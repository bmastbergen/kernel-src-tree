ALSA: jack: Fix the id uniqueness check

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] jack: Fix the id uniqueness check (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 91.67%
commit-author Takashi Iwai <tiwai@suse.de>
commit d0a601c278de6876f36bcf1b7a9678d93d7dc67b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d0a601c2.failed

snd_kctl_jack_new() tries to assign a unique index number when a name
string that has been already registered is passed.  However, it checks
with the base string without "Jack" suffix, so it never hits.
Fix the call with the properly processed name string instead.

Fixes: b8dd086674cf 'ALSA: Jack: handle jack embedded kcontrol creating within ctljack')
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit d0a601c278de6876f36bcf1b7a9678d93d7dc67b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/ctljack.c
diff --cc sound/core/ctljack.c
index 7a271f5f7296,9149a4aefa95..000000000000
--- a/sound/core/ctljack.c
+++ b/sound/core/ctljack.c
@@@ -31,15 -31,46 +31,21 @@@ static struct snd_kcontrol_new jack_det
  	.get = jack_detect_kctl_get,
  };
  
 -static int get_available_index(struct snd_card *card, const char *name)
 -{
 -	struct snd_ctl_elem_id sid;
 -
 -	memset(&sid, 0, sizeof(sid));
 -
 -	sid.index = 0;
 -	sid.iface = SNDRV_CTL_ELEM_IFACE_CARD;
 -	strlcpy(sid.name, name, sizeof(sid.name));
 -
 -	while (snd_ctl_find_id(card, &sid))
 -		sid.index++;
 -
 -	return sid.index;
 -}
 -
 -static void jack_kctl_name_gen(char *name, const char *src_name, int size)
 -{
 -	size_t count = strlen(src_name);
 -	bool need_cat = true;
 -
 -	/* remove redundant " Jack" from src_name */
 -	if (count >= 5)
 -		need_cat = strncmp(&src_name[count - 5], " Jack", 5) ? true : false;
 -
 -	snprintf(name, size, need_cat ? "%s Jack" : "%s", src_name);
 -
 -}
 -
  struct snd_kcontrol *
 -snd_kctl_jack_new(const char *name, struct snd_card *card)
 +snd_kctl_jack_new(const char *name, int idx, void *private_data)
  {
  	struct snd_kcontrol *kctl;
 -
 -	kctl = snd_ctl_new1(&jack_detect_kctl, NULL);
 +	kctl = snd_ctl_new1(&jack_detect_kctl, private_data);
  	if (!kctl)
  		return NULL;
++<<<<<<< HEAD
 +	snprintf(kctl->id.name, sizeof(kctl->id.name), "%s Jack", name);
 +	kctl->id.index = idx;
++=======
+ 
+ 	jack_kctl_name_gen(kctl->id.name, name, sizeof(kctl->id.name));
+ 	kctl->id.index = get_available_index(card, kctl->id.name);
++>>>>>>> d0a601c278de (ALSA: jack: Fix the id uniqueness check)
  	kctl->private_value = 0;
  	return kctl;
  }
* Unmerged path sound/core/ctljack.c
