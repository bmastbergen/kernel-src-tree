sb_edac: Claim a different PCI device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Andy Lutomirski <luto@amacapital.net>
commit d0585cd815faef50ce3d12cbe173438eb4d81eb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d0585cd8.failed

sb_edac controls a large number of different PCI functions.  Rather
than registering as a normal PCI driver for all of them, it
registers for just one so that it gets probed and, at probe time, it
looks for all the others.

Coincidentally, the device it registers for also contains the SMBUS
registers, so the PCI core will refuse to probe both sb_edac and a
future iMC SMBUS driver.  The drivers don't actually conflict, so
just change sb_edac's device table to probe a different device.

An alternative fix would be to merge the two drivers, but sb_edac
will also refuse to load on non-ECC systems, whereas i2c_imc would
still be useful without ECC.

The only user-visible change should be that sb_edac appears to bind
a different device.

	Signed-off-by: Andy Lutomirski <luto@amacapital.net>
	Cc: Rui Wang <ruiv.wang@gmail.com>
	Acked-by: Aristeu Rozanski <aris@redhat.com>
	Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
(cherry picked from commit d0585cd815faef50ce3d12cbe173438eb4d81eb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/sb_edac.c
diff --cc drivers/edac/sb_edac.c
index 6eca3bb900bd,e9bb1af67c8d..000000000000
--- a/drivers/edac/sb_edac.c
+++ b/drivers/edac/sb_edac.c
@@@ -541,11 -499,10 +541,16 @@@ static const struct pci_id_table pci_de
  /*
   *	pci_device_id	table for which devices we are looking for
   */
++<<<<<<< HEAD
 +static DEFINE_PCI_DEVICE_TABLE(sbridge_pci_tbl) = {
 +	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_SBRIDGE_IMC_TA)},
++=======
+ static const struct pci_device_id sbridge_pci_tbl[] = {
+ 	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_SBRIDGE_IMC_HA0)},
++>>>>>>> d0585cd815fa (sb_edac: Claim a different PCI device)
  	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_IBRIDGE_IMC_HA0_TA)},
  	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_HASWELL_IMC_HA0)},
 +	{PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_BROADWELL_IMC_HA0)},
  	{0,}			/* 0 terminated list. */
  };
  
* Unmerged path drivers/edac/sb_edac.c
