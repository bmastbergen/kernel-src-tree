ALSA: line6: Reduce superfluous spinlock in midi.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] line6: Reduce superfluous spinlock in midi.c (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 93.62%
commit-author Takashi Iwai <tiwai@suse.de>
commit bc518ba4ccb487ef52e418c3ff68050cf07b3bc0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/bc518ba4.failed

The midi_transmit_lock is used always inside the send_urb_lock, thus
it doesn't play any role.  Let's kill it.  Also, rename
"send_urb_lock" as a more simple name "lock" since this is the only
lock for midi.

	Tested-by: Chris Rorvick <chris@rorvick.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit bc518ba4ccb487ef52e418c3ff68050cf07b3bc0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/line6/midi.c
diff --cc drivers/staging/line6/midi.c
index e3f9a53dbd96,beeedf9a2cbe..000000000000
--- a/drivers/staging/line6/midi.c
+++ b/drivers/staging/line6/midi.c
@@@ -46,12 -45,9 +46,14 @@@ static void line6_midi_transmit(struct 
  	    line6_rawmidi_substream_midi(substream)->line6;
  	struct snd_line6_midi *line6midi = line6->line6midi;
  	struct midi_buffer *mb = &line6midi->midibuf_out;
++<<<<<<< HEAD:drivers/staging/line6/midi.c
 +	unsigned long flags;
 +	unsigned char chunk[line6->max_packet_size];
++=======
+ 	unsigned char chunk[LINE6_FALLBACK_MAXPACKETSIZE];
++>>>>>>> bc518ba4ccb4 (ALSA: line6: Reduce superfluous spinlock in midi.c):sound/usb/line6/midi.c
  	int req, done;
  
- 	spin_lock_irqsave(&line6->line6midi->midi_transmit_lock, flags);
- 
  	for (;;) {
  		req = min(line6_midibuf_bytes_free(mb), line6->max_packet_size);
  		done = snd_rawmidi_transmit_peek(substream, chunk, req);
@@@ -307,14 -268,26 +307,29 @@@ int line6_init_midi(struct usb_line6 *l
  	if (err < 0)
  		return err;
  
 -	line6midi = kzalloc(sizeof(struct snd_line6_midi), GFP_KERNEL);
 -	if (!line6midi)
 -		return -ENOMEM;
 +	snd_card_set_dev(line6->card, line6->ifcdev);
  
 -	rmidi->private_data = line6midi;
 -	rmidi->private_free = snd_line6_midi_free;
 +	err = snd_line6_new_midi(line6midi);
 +	if (err < 0)
 +		return err;
  
  	init_waitqueue_head(&line6midi->send_wait);
++<<<<<<< HEAD:drivers/staging/line6/midi.c
 +	spin_lock_init(&line6midi->send_urb_lock);
 +	spin_lock_init(&line6midi->midi_transmit_lock);
++=======
+ 	spin_lock_init(&line6midi->lock);
+ 	line6midi->line6 = line6;
+ 
+ 	err = line6_midibuf_init(&line6midi->midibuf_in, MIDI_BUFFER_SIZE, 0);
+ 	if (err < 0)
+ 		return err;
+ 
+ 	err = line6_midibuf_init(&line6midi->midibuf_out, MIDI_BUFFER_SIZE, 1);
+ 	if (err < 0)
+ 		return err;
+ 
+ 	line6->line6midi = line6midi;
++>>>>>>> bc518ba4ccb4 (ALSA: line6: Reduce superfluous spinlock in midi.c):sound/usb/line6/midi.c
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(line6_init_midi);
* Unmerged path drivers/staging/line6/midi.c
diff --git a/drivers/staging/line6/midi.h b/drivers/staging/line6/midi.h
index 78f903fb4d41..7d4f3f983e3a 100644
--- a/drivers/staging/line6/midi.h
+++ b/drivers/staging/line6/midi.h
@@ -39,15 +39,10 @@ struct snd_line6_midi {
 	*/
 	int num_active_send_urbs;
 
-	/**
-		 Spin lock to protect updates of send_urb.
-	*/
-	spinlock_t send_urb_lock;
-
 	/**
 		 Spin lock to protect MIDI buffer handling.
 	*/
-	spinlock_t midi_transmit_lock;
+	spinlock_t lock;
 
 	/**
 		 Wait queue for MIDI transmission.
