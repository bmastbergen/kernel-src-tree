bonding: Introduce 4 AD link speed to fix agg_bandwidth

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jianhua Xie <Jianhua.Xie@freescale.com>
commit 424c3232b04ac97176d105ffaaed80edcaa19b92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/424c3232.failed

This patch adds [2.5|20|40|56] Gbps enum definition, and fixes
aggregated bandwidth calculation based on above slave links.

CC: Jay Vosburgh <j.vosburgh@gmail.com>
CC: Veaceslav Falico <vfalico@gmail.com>
CC: Andy Gospodarek <andy@greyhouse.net>
CC: David S. Miller <davem@davemloft.net>

	Signed-off-by: Jianhua Xie <jianhua.xie@freescale.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 424c3232b04ac97176d105ffaaed80edcaa19b92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_3ad.c
diff --cc drivers/net/bonding/bond_3ad.c
index 65115ee7b259,8baa87df1738..000000000000
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@@ -69,24 -71,29 +69,38 @@@
  #define AD_PORT_SELECTED        0x100
  #define AD_PORT_MOVED           0x200
  
 -/* Port Key definitions
 - * key is determined according to the link speed, duplex and
 - * user key (which is yet not supported)
 - * --------------------------------------------------------------
 - * Port key :	| User key	| Speed		| Duplex	|
 - * --------------------------------------------------------------
 - * 16		  6		  1		  0
 - */
 -#define  AD_DUPLEX_KEY_MASKS    0x1
 -#define  AD_SPEED_KEY_MASKS     0x3E
 -#define  AD_USER_KEY_MASKS      0xFFC0
 -
 +// Port Key definitions
 +// key is determined according to the link speed, duplex and
 +// user key(which is yet not supported)
 +//              ------------------------------------------------------------
 +// Port key :   | User key                       |      Speed       |Duplex|
 +//              ------------------------------------------------------------
 +//              16                               6               1 0
 +#define  AD_DUPLEX_KEY_BITS    0x1
 +#define  AD_SPEED_KEY_BITS     0x3E
 +#define  AD_USER_KEY_BITS      0xFFC0
 +
++<<<<<<< HEAD
 +//dalloun
 +#define     AD_LINK_SPEED_BITMASK_1MBPS       0x1
 +#define     AD_LINK_SPEED_BITMASK_10MBPS      0x2
 +#define     AD_LINK_SPEED_BITMASK_100MBPS     0x4
 +#define     AD_LINK_SPEED_BITMASK_1000MBPS    0x8
 +#define     AD_LINK_SPEED_BITMASK_10000MBPS   0x10
 +//endalloun
++=======
+ enum ad_link_speed_type {
+ 	AD_LINK_SPEED_1MBPS = 1,
+ 	AD_LINK_SPEED_10MBPS,
+ 	AD_LINK_SPEED_100MBPS,
+ 	AD_LINK_SPEED_1000MBPS,
+ 	AD_LINK_SPEED_2500MBPS,
+ 	AD_LINK_SPEED_10000MBPS,
+ 	AD_LINK_SPEED_20000MBPS,
+ 	AD_LINK_SPEED_40000MBPS,
+ 	AD_LINK_SPEED_56000MBPS
+ };
++>>>>>>> 424c3232b04a (bonding: Introduce 4 AD link speed to fix agg_bandwidth)
  
  /* compare MAC addresses */
  #define MAC_ADDRESS_EQUAL(A, B)	\
@@@ -303,12 -246,16 +317,23 @@@ static inline void __release_state_mach
   * __get_link_speed - get a port's speed
   * @port: the port we're looking at
   *
 - * Return @port's speed in 802.3ad enum format. i.e. one of:
 + * Return @port's speed in 802.3ad bitmask format. i.e. one of:
   *     0,
++<<<<<<< HEAD
 + *     %AD_LINK_SPEED_BITMASK_10MBPS,
 + *     %AD_LINK_SPEED_BITMASK_100MBPS,
 + *     %AD_LINK_SPEED_BITMASK_1000MBPS,
 + *     %AD_LINK_SPEED_BITMASK_10000MBPS
++=======
+  *     %AD_LINK_SPEED_10MBPS,
+  *     %AD_LINK_SPEED_100MBPS,
+  *     %AD_LINK_SPEED_1000MBPS,
+  *     %AD_LINK_SPEED_2500MBPS,
+  *     %AD_LINK_SPEED_10000MBPS
+  *     %AD_LINK_SPEED_20000MBPS
+  *     %AD_LINK_SPEED_40000MBPS
+  *     %AD_LINK_SPEED_56000MBPS
++>>>>>>> 424c3232b04a (bonding: Introduce 4 AD link speed to fix agg_bandwidth)
   */
  static u16 __get_link_speed(struct port *port)
  {
@@@ -332,15 -280,32 +357,31 @@@
  			break;
  
  		case SPEED_1000:
 -			speed = AD_LINK_SPEED_1000MBPS;
 +			speed = AD_LINK_SPEED_BITMASK_1000MBPS;
  			break;
  
+ 		case SPEED_2500:
+ 			speed = AD_LINK_SPEED_2500MBPS;
+ 			break;
+ 
  		case SPEED_10000:
 -			speed = AD_LINK_SPEED_10000MBPS;
 +			speed = AD_LINK_SPEED_BITMASK_10000MBPS;
  			break;
  
+ 		case SPEED_20000:
+ 			speed = AD_LINK_SPEED_20000MBPS;
+ 			break;
+ 
+ 		case SPEED_40000:
+ 			speed = AD_LINK_SPEED_40000MBPS;
+ 			break;
+ 
+ 		case SPEED_56000:
+ 			speed = AD_LINK_SPEED_56000MBPS;
+ 			break;
+ 
  		default:
 -			/* unknown speed value from ethtool. shouldn't happen */
 -			speed = 0;
 +			speed = 0; // unknown speed value from ethtool. shouldn't happen
  			break;
  		}
  	}
@@@ -722,23 -651,35 +763,39 @@@ static u32 __get_agg_bandwidth(struct a
  
  	if (aggregator->num_of_ports) {
  		switch (__get_link_speed(aggregator->lag_ports)) {
 -		case AD_LINK_SPEED_1MBPS:
 +		case AD_LINK_SPEED_BITMASK_1MBPS:
  			bandwidth = aggregator->num_of_ports;
  			break;
 -		case AD_LINK_SPEED_10MBPS:
 +		case AD_LINK_SPEED_BITMASK_10MBPS:
  			bandwidth = aggregator->num_of_ports * 10;
  			break;
 -		case AD_LINK_SPEED_100MBPS:
 +		case AD_LINK_SPEED_BITMASK_100MBPS:
  			bandwidth = aggregator->num_of_ports * 100;
  			break;
 -		case AD_LINK_SPEED_1000MBPS:
 +		case AD_LINK_SPEED_BITMASK_1000MBPS:
  			bandwidth = aggregator->num_of_ports * 1000;
  			break;
++<<<<<<< HEAD
 +		case AD_LINK_SPEED_BITMASK_10000MBPS:
++=======
+ 		case AD_LINK_SPEED_2500MBPS:
+ 			bandwidth = aggregator->num_of_ports * 2500;
+ 			break;
+ 		case AD_LINK_SPEED_10000MBPS:
++>>>>>>> 424c3232b04a (bonding: Introduce 4 AD link speed to fix agg_bandwidth)
  			bandwidth = aggregator->num_of_ports * 10000;
  			break;
+ 		case AD_LINK_SPEED_20000MBPS:
+ 			bandwidth = aggregator->num_of_ports * 20000;
+ 			break;
+ 		case AD_LINK_SPEED_40000MBPS:
+ 			bandwidth = aggregator->num_of_ports * 40000;
+ 			break;
+ 		case AD_LINK_SPEED_56000MBPS:
+ 			bandwidth = aggregator->num_of_ports * 56000;
+ 			break;
  		default:
 -			bandwidth = 0; /* to silence the compiler */
 +			bandwidth = 0; /*to silence the compiler ....*/
  		}
  	}
  	return bandwidth;
* Unmerged path drivers/net/bonding/bond_3ad.c
