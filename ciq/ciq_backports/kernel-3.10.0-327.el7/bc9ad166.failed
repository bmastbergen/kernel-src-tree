net: introduce napi_schedule_irqoff()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] introduce napi_schedule_irqoff() (Ivan Vecera) [1200759]
Rebuild_FUZZ: 92.75%
commit-author Eric Dumazet <edumazet@google.com>
commit bc9ad166e38ae1cdcb5323a8aa45dff834d68bfa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/bc9ad166.failed

napi_schedule() can be called from any context and has to mask hard
irqs.

Add a variant that can only be called from hard interrupts handlers
or when irqs are already masked.

Many NIC drivers can use it from their hard IRQ handler instead of
generic variant.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bc9ad166e38ae1cdcb5323a8aa45dff834d68bfa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index d77c2cff9dff,c85e06512246..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -396,7 -385,8 +396,12 @@@ enum rx_handler_result 
  typedef enum rx_handler_result rx_handler_result_t;
  typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **pskb);
  
++<<<<<<< HEAD
 +extern void __napi_schedule(struct napi_struct *n);
++=======
+ void __napi_schedule(struct napi_struct *n);
+ void __napi_schedule_irqoff(struct napi_struct *n);
++>>>>>>> bc9ad166e38a (net: introduce napi_schedule_irqoff())
  
  static inline bool napi_disable_pending(struct napi_struct *n)
  {
* Unmerged path include/linux/netdevice.h
diff --git a/net/core/dev.c b/net/core/dev.c
index 9a2bea4eeeee..314d3c83dc6f 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -4147,7 +4147,8 @@ static int process_backlog(struct napi_struct *napi, int quota)
  * __napi_schedule - schedule for receive
  * @n: entry to schedule
  *
- * The entry's receive function will be scheduled to run
+ * The entry's receive function will be scheduled to run.
+ * Consider using __napi_schedule_irqoff() if hard irqs are masked.
  */
 void __napi_schedule(struct napi_struct *n)
 {
@@ -4159,6 +4160,18 @@ void __napi_schedule(struct napi_struct *n)
 }
 EXPORT_SYMBOL(__napi_schedule);
 
+/**
+ * __napi_schedule_irqoff - schedule for receive
+ * @n: entry to schedule
+ *
+ * Variant of __napi_schedule() assuming hard irqs are masked
+ */
+void __napi_schedule_irqoff(struct napi_struct *n)
+{
+	____napi_schedule(this_cpu_ptr(&softnet_data), n);
+}
+EXPORT_SYMBOL(__napi_schedule_irqoff);
+
 void __napi_complete(struct napi_struct *n)
 {
 	BUG_ON(!test_bit(NAPI_STATE_SCHED, &n->state));
