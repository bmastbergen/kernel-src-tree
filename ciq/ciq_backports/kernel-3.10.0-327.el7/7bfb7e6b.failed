perf: Convert kmalloc_node(...GFP_ZERO...) to kzalloc_node()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Joe Perches <joe@perches.com>
commit 7bfb7e6bdd906f11ee9e751b3fec4f4fc728e818
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7bfb7e6b.failed

Use the convenience function instead of __GFP_ZERO.

	Signed-off-by: Joe Perches <joe@perches.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/f58599ae1a8d7b32d37e9cf283e95fba6452f7f6.1377809875.git.joe@perches.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 7bfb7e6bdd906f11ee9e751b3fec4f4fc728e818)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_intel_ds.c
diff --cc arch/x86/kernel/cpu/perf_event_intel_ds.c
index f97762054cb3,63438aad177f..000000000000
--- a/arch/x86/kernel/cpu/perf_event_intel_ds.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_ds.c
@@@ -310,11 -262,9 +310,16 @@@ static int alloc_bts_buffer(int cpu
  	if (!x86_pmu.bts)
  		return 0;
  
++<<<<<<< HEAD
 +	buffer = kmalloc_node(BTS_BUFFER_SIZE, GFP_KERNEL | __GFP_ZERO | __GFP_NOWARN, node);
 +	if (unlikely(!buffer)) {
 +		WARN_ONCE(1, "%s: BTS buffer allocation failure\n", __func__);
++=======
+ 	buffer = kzalloc_node(BTS_BUFFER_SIZE, GFP_KERNEL, node);
+ 	if (unlikely(!buffer))
++>>>>>>> 7bfb7e6bdd90 (perf: Convert kmalloc_node(...GFP_ZERO...) to kzalloc_node())
  		return -ENOMEM;
 +	}
  
  	max = BTS_BUFFER_SIZE / BTS_RECORD_SIZE;
  	thresh = max / 16;
diff --git a/arch/x86/kernel/cpu/perf_event_amd.c b/arch/x86/kernel/cpu/perf_event_amd.c
index 4cbe03287b08..beeb7cc07044 100644
--- a/arch/x86/kernel/cpu/perf_event_amd.c
+++ b/arch/x86/kernel/cpu/perf_event_amd.c
@@ -347,8 +347,7 @@ static struct amd_nb *amd_alloc_nb(int cpu)
 	struct amd_nb *nb;
 	int i;
 
-	nb = kmalloc_node(sizeof(struct amd_nb), GFP_KERNEL | __GFP_ZERO,
-			  cpu_to_node(cpu));
+	nb = kzalloc_node(sizeof(struct amd_nb), GFP_KERNEL, cpu_to_node(cpu));
 	if (!nb)
 		return NULL;
 
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_ds.c
diff --git a/arch/x86/kernel/cpu/perf_event_intel_uncore.c b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
index 6564c5852b84..45992bfcd068 100644
--- a/arch/x86/kernel/cpu/perf_event_intel_uncore.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
@@ -2718,7 +2718,7 @@ struct intel_uncore_box *uncore_alloc_box(struct intel_uncore_type *type, int cp
 
 	size = sizeof(*box) + type->num_shared_regs * sizeof(struct intel_uncore_extra_reg);
 
-	box = kmalloc_node(size, GFP_KERNEL | __GFP_ZERO, cpu_to_node(cpu));
+	box = kzalloc_node(size, GFP_KERNEL, cpu_to_node(cpu));
 	if (!box)
 		return NULL;
 
