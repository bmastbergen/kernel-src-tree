bonding: create netlink event when bonding option is changed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit d4261e5650004d6d51137553ea5433d5828562dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d4261e56.failed

Userspace needs to be notified if one changes some option.

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Acked-by: Veaceslav Falico <vfalico@gmail.com>
	Acked-by: Andy Gospodarek <gospo@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d4261e5650004d6d51137553ea5433d5828562dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_options.c
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index dba59a041ff6,7e2b0b8b5cd7..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1749,17 -1979,39 +1749,22 @@@ struct udp_offload 
  #define NETDEV_RELEASE		0x0012
  #define NETDEV_NOTIFY_PEERS	0x0013
  #define NETDEV_JOIN		0x0014
 -#define NETDEV_CHANGEUPPER	0x0015
  #define NETDEV_RESEND_IGMP	0x0016
++<<<<<<< HEAD
++=======
+ #define NETDEV_PRECHANGEMTU	0x0017 /* notify before mtu change happened */
+ #define NETDEV_CHANGEINFODATA	0x0018
++>>>>>>> d4261e565000 (bonding: create netlink event when bonding option is changed)
  
 -int register_netdevice_notifier(struct notifier_block *nb);
 -int unregister_netdevice_notifier(struct notifier_block *nb);
 +extern int register_netdevice_notifier(struct notifier_block *nb);
 +extern int unregister_netdevice_notifier(struct notifier_block *nb);
 +extern int call_netdevice_notifiers(unsigned long val, struct net_device *dev);
  
 -struct netdev_notifier_info {
 -	struct net_device *dev;
 -};
 -
 -struct netdev_notifier_change_info {
 -	struct netdev_notifier_info info; /* must be first */
 -	unsigned int flags_changed;
 -};
  
 -static inline void netdev_notifier_info_init(struct netdev_notifier_info *info,
 -					     struct net_device *dev)
 -{
 -	info->dev = dev;
 -}
 -
 -static inline struct net_device *
 -netdev_notifier_info_to_dev(const struct netdev_notifier_info *info)
 -{
 -	return info->dev;
 -}
 -
 -int call_netdevice_notifiers(unsigned long val, struct net_device *dev);
 +extern rwlock_t				dev_base_lock;		/* Device list lock */
  
 +extern seqcount_t	devnet_rename_seq;	/* Device rename seq */
  
 -extern rwlock_t				dev_base_lock;		/* Device list lock */
  
  #define for_each_netdev(net, d)		\
  		list_for_each_entry(d, &(net)->dev_base_head, dev_list)
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path include/linux/netdevice.h
