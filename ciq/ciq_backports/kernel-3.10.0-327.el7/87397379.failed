ixgbe: Force QDE via PFQDE for VFs during reset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Alexander Duyck <alexander.h.duyck@intel.com>
commit 87397379d566d5d8692df1bfc22bef95fd64ae3b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/87397379.failed

This change makes it so that the QDE bits are set for a VF before the Rx
queues are enabled.  As such we avoid head of line blocking in the event
that the VF stops cleaning Rx descriptors for whatever reason.

	Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>

 drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c |   14 ++++++++++++++
 drivers/net/ethernet/intel/ixgbe/ixgbe_type.h  |    7 ++++---
 2 files changed, 18 insertions(+), 3 deletions(-)
	Signed-off-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 87397379d566d5d8692df1bfc22bef95fd64ae3b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
#	drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
index fb15c53611c0,43e10c67ac4e..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
@@@ -636,29 -629,9 +636,30 @@@ int ixgbe_vf_configuration(struct pci_d
  	return 0;
  }
  
 +static inline void ixgbe_write_qde(struct ixgbe_adapter *adapter, u32 vf,
 +                                   u32 qde)
 +{
 +        struct ixgbe_hw *hw = &adapter->hw;
 +        struct ixgbe_ring_feature *vmdq = &adapter->ring_feature[RING_F_VMDQ];
 +        u32 q_per_pool = __ALIGN_MASK(1, ~vmdq->mask);
 +        int i;
 +
 +        for (i = vf * q_per_pool; i < ((vf + 1) * q_per_pool); i++) {
 +                u32 reg;
 +
 +                /* flush previous write */
 +                IXGBE_WRITE_FLUSH(hw);
 +
 +                /* indicate to hardware that we want to set drop enable */
 +                reg = IXGBE_QDE_WRITE | IXGBE_QDE_ENABLE;
 +                reg |= i <<  IXGBE_QDE_IDX_SHIFT;
 +                IXGBE_WRITE_REG(hw, IXGBE_QDE, reg);
 +        }
 +}
 +
  static int ixgbe_vf_reset_msg(struct ixgbe_adapter *adapter, u32 vf)
  {
+ 	struct ixgbe_ring_feature *vmdq = &adapter->ring_feature[RING_F_VMDQ];
  	struct ixgbe_hw *hw = &adapter->hw;
  	unsigned char *vf_mac = adapter->vfinfo[vf].vf_mac_addresses;
  	u32 reg, reg_offset, vf_shift;
@@@ -682,8 -657,16 +685,21 @@@
  	reg |= 1 << vf_shift;
  	IXGBE_WRITE_REG(hw, IXGBE_VFTE(reg_offset), reg);
  
++<<<<<<< HEAD
 +	/* RHEL: set drop enable on all queues, needed for 550 enablement */
 +	ixgbe_write_qde(adapter, vf, IXGBE_QDE_ENABLE);
++=======
+ 	/* force drop enable for all VF Rx queues */
+ 	for (i = vf * q_per_pool; i < ((vf + 1) * q_per_pool); i++) {
+ 		/* flush previous write */
+ 		IXGBE_WRITE_FLUSH(hw);
+ 
+ 		/* indicate to hardware that we want to set drop enable */
+ 		reg = IXGBE_QDE_WRITE | IXGBE_QDE_ENABLE;
+ 		reg |= i <<  IXGBE_QDE_IDX_SHIFT;
+ 		IXGBE_WRITE_REG(hw, IXGBE_QDE, reg);
+ 	}
++>>>>>>> 87397379d566 (ixgbe: Force QDE via PFQDE for VFs during reset)
  
  	/* enable receive for vf */
  	reg = IXGBE_READ_REG(hw, IXGBE_VFRE(reg_offset));
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
index 952d61a42f60,d8e59f42b85c..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
@@@ -2073,7 -1981,6 +2073,10 @@@ enum 
  
  /* Queue Drop Enable */
  #define IXGBE_QDE_ENABLE	0x00000001
++<<<<<<< HEAD
 +#define IXGBE_QDE_HIDE_VLAN	0x00000002
++=======
++>>>>>>> 87397379d566 (ixgbe: Force QDE via PFQDE for VFs during reset)
  #define IXGBE_QDE_IDX_MASK	0x00007F00
  #define IXGBE_QDE_IDX_SHIFT	8
  #define IXGBE_QDE_WRITE		0x00010000
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_type.h
