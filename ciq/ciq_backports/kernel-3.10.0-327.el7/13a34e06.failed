KVM: remove garbage arg to *hardware_{en,dis}able

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [kvm] remove garbage arg to *hardware_{en, dis}able (Bandan Das) [1209995]
Rebuild_FUZZ: 93.62%
commit-author Radim Krčmář <rkrcmar@redhat.com>
commit 13a34e067eab24fec882e1834fbf2cc31911d474
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/13a34e06.failed

In the beggining was on_each_cpu(), which required an unused argument to
kvm_arch_ops.hardware_{en,dis}able, but this was soon forgotten.

Remove unnecessary arguments that stem from this.

	Signed-off-by: Radim KrÄmÃ¡Å™ <rkrcmar@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 13a34e067eab24fec882e1834fbf2cc31911d474)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/include/asm/kvm_host.h
#	arch/arm64/include/asm/kvm_host.h
#	arch/mips/include/asm/kvm_host.h
#	arch/powerpc/include/asm/kvm_host.h
#	arch/powerpc/kvm/powerpc.c
#	arch/s390/include/asm/kvm_host.h
diff --cc arch/arm/include/asm/kvm_host.h
index 9ead7f53be2e,032a8538318a..000000000000
--- a/arch/arm/include/asm/kvm_host.h
+++ b/arch/arm/include/asm/kvm_host.h
@@@ -229,4 -225,15 +229,13 @@@ static inline int kvm_arch_dev_ioctl_ch
  int kvm_perf_init(void);
  int kvm_perf_teardown(void);
  
++<<<<<<< HEAD
++=======
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_hardware_unsetup(void) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
+ 
++>>>>>>> 13a34e067eab (KVM: remove garbage arg to *hardware_{en,dis}able)
  #endif /* __ARM_KVM_HOST_H__ */
diff --cc arch/mips/include/asm/kvm_host.h
index 4d6fa0bf1305,f2c249796ea8..000000000000
--- a/arch/mips/include/asm/kvm_host.h
+++ b/arch/mips/include/asm/kvm_host.h
@@@ -655,9 -759,19 +655,23 @@@ extern int kvm_mips_trans_mtc0(uint32_
  			       struct kvm_vcpu *vcpu);
  
  /* Misc */
 -extern void kvm_mips_dump_stats(struct kvm_vcpu *vcpu);
 +extern void mips32_SyncICache(unsigned long addr, unsigned long size);
 +extern int kvm_mips_dump_stats(struct kvm_vcpu *vcpu);
  extern unsigned long kvm_mips_get_ramsize(struct kvm *kvm);
  
++<<<<<<< HEAD
++=======
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_hardware_unsetup(void) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_free_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *free, struct kvm_memory_slot *dont) {}
+ static inline void kvm_arch_memslots_updated(struct kvm *kvm) {}
+ static inline void kvm_arch_flush_shadow_all(struct kvm *kvm) {}
+ static inline void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *slot) {}
+ static inline void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
++>>>>>>> 13a34e067eab (KVM: remove garbage arg to *hardware_{en,dis}able)
  
  #endif /* __MIPS_KVM_HOST_H__ */
diff --cc arch/powerpc/include/asm/kvm_host.h
index c71536d27831,604000882352..000000000000
--- a/arch/powerpc/include/asm/kvm_host.h
+++ b/arch/powerpc/include/asm/kvm_host.h
@@@ -701,4 -682,12 +701,15 @@@ struct kvm_vcpu_arch 
  #define __KVM_HAVE_ARCH_WQP
  #define __KVM_HAVE_CREATE_DEVICE
  
++<<<<<<< HEAD
++=======
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_hardware_unsetup(void) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_memslots_updated(struct kvm *kvm) {}
+ static inline void kvm_arch_flush_shadow_all(struct kvm *kvm) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
+ static inline void kvm_arch_exit(void) {}
+ 
++>>>>>>> 13a34e067eab (KVM: remove garbage arg to *hardware_{en,dis}able)
  #endif /* __POWERPC_KVM_HOST_H__ */
diff --cc arch/powerpc/kvm/powerpc.c
index b5d58afc7bea,da505237a664..000000000000
--- a/arch/powerpc/kvm/powerpc.c
+++ b/arch/powerpc/kvm/powerpc.c
@@@ -284,7 -309,82 +284,86 @@@ int kvmppc_emulate_mmio(struct kvm_run 
  }
  EXPORT_SYMBOL_GPL(kvmppc_emulate_mmio);
  
++<<<<<<< HEAD
 +int kvm_arch_hardware_enable(void *garbage)
++=======
+ int kvmppc_st(struct kvm_vcpu *vcpu, ulong *eaddr, int size, void *ptr,
+ 	      bool data)
+ {
+ 	ulong mp_pa = vcpu->arch.magic_page_pa & KVM_PAM & PAGE_MASK;
+ 	struct kvmppc_pte pte;
+ 	int r;
+ 
+ 	vcpu->stat.st++;
+ 
+ 	r = kvmppc_xlate(vcpu, *eaddr, data ? XLATE_DATA : XLATE_INST,
+ 			 XLATE_WRITE, &pte);
+ 	if (r < 0)
+ 		return r;
+ 
+ 	*eaddr = pte.raddr;
+ 
+ 	if (!pte.may_write)
+ 		return -EPERM;
+ 
+ 	/* Magic page override */
+ 	if (kvmppc_supports_magic_page(vcpu) && mp_pa &&
+ 	    ((pte.raddr & KVM_PAM & PAGE_MASK) == mp_pa) &&
+ 	    !(kvmppc_get_msr(vcpu) & MSR_PR)) {
+ 		void *magic = vcpu->arch.shared;
+ 		magic += pte.eaddr & 0xfff;
+ 		memcpy(magic, ptr, size);
+ 		return EMULATE_DONE;
+ 	}
+ 
+ 	if (kvm_write_guest(vcpu->kvm, pte.raddr, ptr, size))
+ 		return EMULATE_DO_MMIO;
+ 
+ 	return EMULATE_DONE;
+ }
+ EXPORT_SYMBOL_GPL(kvmppc_st);
+ 
+ int kvmppc_ld(struct kvm_vcpu *vcpu, ulong *eaddr, int size, void *ptr,
+ 		      bool data)
+ {
+ 	ulong mp_pa = vcpu->arch.magic_page_pa & KVM_PAM & PAGE_MASK;
+ 	struct kvmppc_pte pte;
+ 	int rc;
+ 
+ 	vcpu->stat.ld++;
+ 
+ 	rc = kvmppc_xlate(vcpu, *eaddr, data ? XLATE_DATA : XLATE_INST,
+ 			  XLATE_READ, &pte);
+ 	if (rc)
+ 		return rc;
+ 
+ 	*eaddr = pte.raddr;
+ 
+ 	if (!pte.may_read)
+ 		return -EPERM;
+ 
+ 	if (!data && !pte.may_execute)
+ 		return -ENOEXEC;
+ 
+ 	/* Magic page override */
+ 	if (kvmppc_supports_magic_page(vcpu) && mp_pa &&
+ 	    ((pte.raddr & KVM_PAM & PAGE_MASK) == mp_pa) &&
+ 	    !(kvmppc_get_msr(vcpu) & MSR_PR)) {
+ 		void *magic = vcpu->arch.shared;
+ 		magic += pte.eaddr & 0xfff;
+ 		memcpy(ptr, magic, size);
+ 		return EMULATE_DONE;
+ 	}
+ 
+ 	if (kvm_read_guest(vcpu->kvm, pte.raddr, ptr, size))
+ 		return EMULATE_DO_MMIO;
+ 
+ 	return EMULATE_DONE;
+ }
+ EXPORT_SYMBOL_GPL(kvmppc_ld);
+ 
+ int kvm_arch_hardware_enable(void)
++>>>>>>> 13a34e067eab (KVM: remove garbage arg to *hardware_{en,dis}able)
  {
  	return 0;
  }
diff --cc arch/s390/include/asm/kvm_host.h
index e87ecaa2c569,a76a124dff48..000000000000
--- a/arch/s390/include/asm/kvm_host.h
+++ b/arch/s390/include/asm/kvm_host.h
@@@ -282,6 -433,36 +282,23 @@@ static inline bool kvm_is_error_hva(uns
  	return IS_ERR_VALUE(addr);
  }
  
 -#define ASYNC_PF_PER_VCPU	64
 -struct kvm_arch_async_pf {
 -	unsigned long pfault_token;
 -};
 -
 -bool kvm_arch_can_inject_async_page_present(struct kvm_vcpu *vcpu);
 -
 -void kvm_arch_async_page_ready(struct kvm_vcpu *vcpu,
 -			       struct kvm_async_pf *work);
 -
 -void kvm_arch_async_page_not_present(struct kvm_vcpu *vcpu,
 -				     struct kvm_async_pf *work);
 -
 -void kvm_arch_async_page_present(struct kvm_vcpu *vcpu,
 -				 struct kvm_async_pf *work);
 -
  extern int sie64a(struct kvm_s390_sie_block *, u64 *);
  extern char sie_exit;
++<<<<<<< HEAD
++=======
+ 
+ static inline void kvm_arch_hardware_disable(void) {}
+ static inline void kvm_arch_check_processor_compat(void *rtn) {}
+ static inline void kvm_arch_exit(void) {}
+ static inline void kvm_arch_sync_events(struct kvm *kvm) {}
+ static inline void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu) {}
+ static inline void kvm_arch_sched_in(struct kvm_vcpu *vcpu, int cpu) {}
+ static inline void kvm_arch_free_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *free, struct kvm_memory_slot *dont) {}
+ static inline void kvm_arch_memslots_updated(struct kvm *kvm) {}
+ static inline void kvm_arch_flush_shadow_all(struct kvm *kvm) {}
+ static inline void kvm_arch_flush_shadow_memslot(struct kvm *kvm,
+ 		struct kvm_memory_slot *slot) {}
+ 
++>>>>>>> 13a34e067eab (KVM: remove garbage arg to *hardware_{en,dis}able)
  #endif
* Unmerged path arch/arm64/include/asm/kvm_host.h
* Unmerged path arch/arm/include/asm/kvm_host.h
diff --git a/arch/arm/kvm/arm.c b/arch/arm/kvm/arm.c
index d2b153a4bb09..b4201bc239d8 100644
--- a/arch/arm/kvm/arm.c
+++ b/arch/arm/kvm/arm.c
@@ -86,7 +86,7 @@ struct kvm_vcpu __percpu **kvm_get_running_vcpus(void)
 	return &kvm_arm_running_vcpu;
 }
 
-int kvm_arch_hardware_enable(void *garbage)
+int kvm_arch_hardware_enable(void)
 {
 	return 0;
 }
* Unmerged path arch/arm64/include/asm/kvm_host.h
diff --git a/arch/ia64/kvm/kvm-ia64.c b/arch/ia64/kvm/kvm-ia64.c
index 0729ba6acddf..1b9228248944 100644
--- a/arch/ia64/kvm/kvm-ia64.c
+++ b/arch/ia64/kvm/kvm-ia64.c
@@ -125,7 +125,7 @@ long ia64_pal_vp_create(u64 *vpd, u64 *host_iva, u64 *opt_handler)
 
 static  DEFINE_SPINLOCK(vp_lock);
 
-int kvm_arch_hardware_enable(void *garbage)
+int kvm_arch_hardware_enable(void)
 {
 	long  status;
 	long  tmp_base;
@@ -160,7 +160,7 @@ int kvm_arch_hardware_enable(void *garbage)
 	return 0;
 }
 
-void kvm_arch_hardware_disable(void *garbage)
+void kvm_arch_hardware_disable(void)
 {
 
 	long status;
* Unmerged path arch/mips/include/asm/kvm_host.h
diff --git a/arch/mips/kvm/kvm_mips.c b/arch/mips/kvm/kvm_mips.c
index 329f169fd18c..03c250d50963 100644
--- a/arch/mips/kvm/kvm_mips.c
+++ b/arch/mips/kvm/kvm_mips.c
@@ -79,7 +79,7 @@ int kvm_arch_vcpu_should_kick(struct kvm_vcpu *vcpu)
 	return 1;
 }
 
-int kvm_arch_hardware_enable(void *garbage)
+int kvm_arch_hardware_enable(void)
 {
 	return 0;
 }
* Unmerged path arch/powerpc/include/asm/kvm_host.h
* Unmerged path arch/powerpc/kvm/powerpc.c
* Unmerged path arch/s390/include/asm/kvm_host.h
diff --git a/arch/s390/kvm/kvm-s390.c b/arch/s390/kvm/kvm-s390.c
index 9247ec7dc605..3b2aa46cac86 100644
--- a/arch/s390/kvm/kvm-s390.c
+++ b/arch/s390/kvm/kvm-s390.c
@@ -95,7 +95,7 @@ static inline int test_vfacility(unsigned long nr)
 }
 
 /* Section: not file related */
-int kvm_arch_hardware_enable(void *garbage)
+int kvm_arch_hardware_enable(void)
 {
 	/* every s390 is virtualization enabled ;-) */
 	return 0;
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 7d9e64f16eec..4fb6cebb87bd 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -666,8 +666,8 @@ struct msr_data {
 struct kvm_x86_ops {
 	int (*cpu_has_kvm_support)(void);          /* __init */
 	int (*disabled_by_bios)(void);             /* __init */
-	int (*hardware_enable)(void *dummy);
-	void (*hardware_disable)(void *dummy);
+	int (*hardware_enable)(void);
+	void (*hardware_disable)(void);
 	void (*check_processor_compatibility)(void *rtn);
 	int (*hardware_setup)(void);               /* __init */
 	void (*hardware_unsetup)(void);            /* __exit */
diff --git a/arch/x86/kvm/svm.c b/arch/x86/kvm/svm.c
index 4a9be9dfca9d..5e06ac2bc5f0 100644
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@ -622,7 +622,7 @@ static int has_svm(void)
 	return 1;
 }
 
-static void svm_hardware_disable(void *garbage)
+static void svm_hardware_disable(void)
 {
 	/* Make sure we clean up behind us */
 	if (static_cpu_has(X86_FEATURE_TSCRATEMSR))
@@ -633,7 +633,7 @@ static void svm_hardware_disable(void *garbage)
 	amd_pmu_disable_virt();
 }
 
-static int svm_hardware_enable(void *garbage)
+static int svm_hardware_enable(void)
 {
 
 	struct svm_cpu_data *sd;
diff --git a/arch/x86/kvm/vmx.c b/arch/x86/kvm/vmx.c
index ccfe5bb586e5..f279cd6b1c34 100644
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@ -2728,7 +2728,7 @@ static void kvm_cpu_vmxon(u64 addr)
 			: "memory", "cc");
 }
 
-static int hardware_enable(void *garbage)
+static int hardware_enable(void)
 {
 	int cpu = raw_smp_processor_id();
 	u64 phys_addr = __pa(per_cpu(vmxarea, cpu));
@@ -2792,7 +2792,7 @@ static void kvm_cpu_vmxoff(void)
 	asm volatile (__ex(ASM_VMX_VMXOFF) : : : "cc");
 }
 
-static void hardware_disable(void *garbage)
+static void hardware_disable(void)
 {
 	if (vmm_exclusive) {
 		vmclear_local_loaded_vmcss();
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 2683e83d658b..4c39aff91177 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -246,7 +246,7 @@ void kvm_set_shared_msr(unsigned slot, u64 value, u64 mask)
 }
 EXPORT_SYMBOL_GPL(kvm_set_shared_msr);
 
-static void drop_user_return_notifiers(void *ignore)
+static void drop_user_return_notifiers(void)
 {
 	unsigned int cpu = smp_processor_id();
 	struct kvm_shared_msrs *smsr = per_cpu_ptr(shared_msrs, cpu);
@@ -7037,7 +7037,7 @@ void kvm_vcpu_deliver_sipi_vector(struct kvm_vcpu *vcpu, unsigned int vector)
 	kvm_rip_write(vcpu, 0);
 }
 
-int kvm_arch_hardware_enable(void *garbage)
+int kvm_arch_hardware_enable(void)
 {
 	struct kvm *kvm;
 	struct kvm_vcpu *vcpu;
@@ -7048,7 +7048,7 @@ int kvm_arch_hardware_enable(void *garbage)
 	bool stable, backwards_tsc = false;
 
 	kvm_shared_msr_cpu_online();
-	ret = kvm_x86_ops->hardware_enable(garbage);
+	ret = kvm_x86_ops->hardware_enable();
 	if (ret != 0)
 		return ret;
 
@@ -7129,10 +7129,10 @@ int kvm_arch_hardware_enable(void *garbage)
 	return 0;
 }
 
-void kvm_arch_hardware_disable(void *garbage)
+void kvm_arch_hardware_disable(void)
 {
-	kvm_x86_ops->hardware_disable(garbage);
-	drop_user_return_notifiers(garbage);
+	kvm_x86_ops->hardware_disable();
+	drop_user_return_notifiers();
 }
 
 int kvm_arch_hardware_setup(void)
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index e1e1c9fa034a..28e4535beff0 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -627,8 +627,8 @@ int kvm_arch_vcpu_setup(struct kvm_vcpu *vcpu);
 int kvm_arch_vcpu_postcreate(struct kvm_vcpu *vcpu);
 void kvm_arch_vcpu_destroy(struct kvm_vcpu *vcpu);
 
-int kvm_arch_hardware_enable(void *garbage);
-void kvm_arch_hardware_disable(void *garbage);
+int kvm_arch_hardware_enable(void);
+void kvm_arch_hardware_disable(void);
 int kvm_arch_hardware_setup(void);
 void kvm_arch_hardware_unsetup(void);
 void kvm_arch_check_processor_compat(void *rtn);
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 5267f2b6e637..0852e0eceef3 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -2667,7 +2667,7 @@ static void hardware_enable_nolock(void *junk)
 
 	cpumask_set_cpu(cpu, cpus_hardware_enabled);
 
-	r = kvm_arch_hardware_enable(NULL);
+	r = kvm_arch_hardware_enable();
 
 	if (r) {
 		cpumask_clear_cpu(cpu, cpus_hardware_enabled);
@@ -2692,7 +2692,7 @@ static void hardware_disable_nolock(void *junk)
 	if (!cpumask_test_cpu(cpu, cpus_hardware_enabled))
 		return;
 	cpumask_clear_cpu(cpu, cpus_hardware_enabled);
-	kvm_arch_hardware_disable(NULL);
+	kvm_arch_hardware_disable();
 }
 
 static void hardware_disable(void)
