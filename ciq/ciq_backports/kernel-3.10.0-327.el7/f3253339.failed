bonding: options handling cleanup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit f3253339a47ff3690ce52e2acd95ec295f8521b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/f3253339.failed

Make local functions static (ie. only used in bond_options.c)
Make bond options parsing tables constant.

	Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f3253339a47ff3690ce52e2acd95ec295f8521b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bond_options.h
#	drivers/net/bonding/bond_sysfs.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_main.c
index fe3f9d12b71e,324389b44915..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -4348,6 -3950,8 +4348,11 @@@ int bond_parse_parm(const char *buf, co
  static int bond_check_params(struct bond_params *params)
  {
  	int arp_validate_value, fail_over_mac_value, primary_reselect_value, i;
++<<<<<<< HEAD
++=======
+ 	struct bond_opt_value newval;
+ 	const struct bond_opt_value *valptr;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  	int arp_all_targets_value;
  
  	/*
diff --cc drivers/net/bonding/bond_sysfs.c
index 9519d678a368,0e8b268da0a0..000000000000
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@@ -302,10 -220,11 +302,14 @@@ static ssize_t bonding_show_mode(struc
  				 struct device_attribute *attr, char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
++=======
+ 	const struct bond_opt_value *val;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
 -	val = bond_opt_get_val(BOND_OPT_MODE, bond->params.mode);
 -
 -	return sprintf(buf, "%s %d\n", val->string, bond->params.mode);
 +	return sprintf(buf, "%s %d\n",
 +			bond_mode_tbl[bond->params.mode].modename,
 +			bond->params.mode);
  }
  
  static ssize_t bonding_store_mode(struct device *d,
@@@ -370,10 -251,11 +374,14 @@@ static ssize_t bonding_show_xmit_hash(s
  				      char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
++=======
+ 	const struct bond_opt_value *val;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
 -	val = bond_opt_get_val(BOND_OPT_XMIT_HASH, bond->params.xmit_policy);
 -
 -	return sprintf(buf, "%s %d\n", val->string, bond->params.xmit_policy);
 +	return sprintf(buf, "%s %d\n",
 +		       xmit_hashtype_tbl[bond->params.xmit_policy].modename,
 +		       bond->params.xmit_policy);
  }
  
  static ssize_t bonding_store_xmit_hash(struct device *d,
@@@ -410,10 -282,12 +418,14 @@@ static ssize_t bonding_show_arp_validat
  					 char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
++=======
+ 	const struct bond_opt_value *val;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
 -	val = bond_opt_get_val(BOND_OPT_ARP_VALIDATE,
 -			       bond->params.arp_validate);
 -
 -	return sprintf(buf, "%s %d\n", val->string, bond->params.arp_validate);
 +	return sprintf(buf, "%s %d\n",
 +		       arp_validate_tbl[bond->params.arp_validate].modename,
 +		       bond->params.arp_validate);
  }
  
  static ssize_t bonding_store_arp_validate(struct device *d,
@@@ -465,10 -314,12 +477,14 @@@ static ssize_t bonding_show_arp_all_tar
  					 char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
 +	int value = bond->params.arp_all_targets;
++=======
+ 	const struct bond_opt_value *val;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
 -	val = bond_opt_get_val(BOND_OPT_ARP_ALL_TARGETS,
 -			       bond->params.arp_all_targets);
 -	return sprintf(buf, "%s %d\n",
 -		       val->string, bond->params.arp_all_targets);
 +	return sprintf(buf, "%s %d\n", arp_all_targets_tbl[value].modename,
 +		       value);
  }
  
  static ssize_t bonding_store_arp_all_targets(struct device *d,
@@@ -505,10 -348,12 +521,14 @@@ static ssize_t bonding_show_fail_over_m
  					  char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
++=======
+ 	const struct bond_opt_value *val;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
 -	val = bond_opt_get_val(BOND_OPT_FAIL_OVER_MAC,
 -			       bond->params.fail_over_mac);
 -
 -	return sprintf(buf, "%s %d\n", val->string, bond->params.fail_over_mac);
 +	return sprintf(buf, "%s %d\n",
 +		       fail_over_mac_tbl[bond->params.fail_over_mac].modename,
 +		       bond->params.fail_over_mac);
  }
  
  static ssize_t bonding_store_fail_over_mac(struct device *d,
@@@ -867,10 -505,11 +887,14 @@@ static ssize_t bonding_show_lacp(struc
  				 char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
++=======
+ 	const struct bond_opt_value *val;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
 -	val = bond_opt_get_val(BOND_OPT_LACP_RATE, bond->params.lacp_fast);
 -
 -	return sprintf(buf, "%s %d\n", val->string, bond->params.lacp_fast);
 +	return sprintf(buf, "%s %d\n",
 +		bond_lacp_tbl[bond->params.lacp_fast].modename,
 +		bond->params.lacp_fast);
  }
  
  static ssize_t bonding_store_lacp(struct device *d,
@@@ -950,10 -558,11 +974,14 @@@ static ssize_t bonding_show_ad_select(s
  				      char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
++=======
+ 	const struct bond_opt_value *val;
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
 -	val = bond_opt_get_val(BOND_OPT_AD_SELECT, bond->params.ad_select);
 -
 -	return sprintf(buf, "%s %d\n", val->string, bond->params.ad_select);
 +	return sprintf(buf, "%s %d\n",
 +		ad_select_tbl[bond->params.ad_select].modename,
 +		bond->params.ad_select);
  }
  
  
@@@ -1174,10 -686,13 +1202,17 @@@ static ssize_t bonding_show_primary_res
  					     char *buf)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
++=======
+ 	const struct bond_opt_value *val;
+ 
+ 	val = bond_opt_get_val(BOND_OPT_PRIMARY_RESELECT,
+ 			       bond->params.primary_reselect);
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
  	return sprintf(buf, "%s %d\n",
 -		       val->string, bond->params.primary_reselect);
 +		       pri_reselect_tbl[bond->params.primary_reselect].modename,
 +		       bond->params.primary_reselect);
  }
  
  static ssize_t bonding_store_primary_reselect(struct device *d,
diff --cc drivers/net/bonding/bonding.h
index e1ca02f0b074,0896f1db24db..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -438,6 -507,9 +438,12 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
+ const char *bond_slave_link_status(s8 link);
++>>>>>>> f3253339a47f (bonding: options handling cleanup)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
* Unmerged path drivers/net/bonding/bond_main.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
* Unmerged path drivers/net/bonding/bond_sysfs.c
* Unmerged path drivers/net/bonding/bonding.h
