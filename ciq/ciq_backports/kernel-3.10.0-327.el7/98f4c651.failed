hv: move ringbuffer bus attributes to dev_groups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [hv] move ringbuffer bus attributes to dev_groups (Vitaly Kuznetsov) [1201889]
Rebuild_FUZZ: 95.65%
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 98f4c651762c3b4f4dd300504563075c2b726a89
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/98f4c651.failed

This moves the ringbuffer bus attributes to the dev_groups structure,
deletes the now unneeded struct hv_device_info, and removes some now
unused functions, and variables as everything is now moved to the
dev_groups structure, dev_attrs is no longer needed.

	Tested-by: "K. Y. Srinivasan" <kys@microsoft.com>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 98f4c651762c3b4f4dd300504563075c2b726a89)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/vmbus_drv.c
diff --cc drivers/hv/vmbus_drv.c
index 2ed3b20b532d,48aad4faea06..000000000000
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@@ -46,24 -46,6 +46,27 @@@ static struct tasklet_struct msg_dpc
  static struct completion probe_event;
  static int irq;
  
++<<<<<<< HEAD
 +struct resource hyperv_mmio = {
 +	.name  = "hyperv mmio",
 +	.flags = IORESOURCE_MEM,
 +};
 +EXPORT_SYMBOL_GPL(hyperv_mmio);
 +
 +struct hv_device_info {
 +	u32 server_monitor_pending;
 +	u32 server_monitor_latency;
 +	u32 server_monitor_conn_id;
 +	u32 client_monitor_pending;
 +	u32 client_monitor_latency;
 +	u32 client_monitor_conn_id;
 +
 +	struct hv_dev_port_info inbound;
 +	struct hv_dev_port_info outbound;
 +};
 +
++=======
++>>>>>>> 98f4c651762c (hv: move ringbuffer bus attributes to dev_groups)
  static int vmbus_exists(void)
  {
  	if (hv_acpi_dev == NULL)
@@@ -72,43 -54,6 +75,46 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +
 +static void get_channel_info(struct hv_device *device,
 +			     struct hv_device_info *info)
 +{
 +	struct vmbus_channel_debug_info debug_info;
 +
 +	if (!device->channel)
 +		return;
 +
 +	vmbus_get_debug_info(device->channel, &debug_info);
 +
 +	info->server_monitor_pending = debug_info.servermonitor_pending;
 +	info->server_monitor_latency = debug_info.servermonitor_latency;
 +	info->server_monitor_conn_id = debug_info.servermonitor_connectionid;
 +
 +	info->client_monitor_pending = debug_info.clientmonitor_pending;
 +	info->client_monitor_latency = debug_info.clientmonitor_latency;
 +	info->client_monitor_conn_id = debug_info.clientmonitor_connectionid;
 +
 +	info->inbound.int_mask = debug_info.inbound.current_interrupt_mask;
 +	info->inbound.read_idx = debug_info.inbound.current_read_index;
 +	info->inbound.write_idx = debug_info.inbound.current_write_index;
 +	info->inbound.bytes_avail_toread =
 +		debug_info.inbound.bytes_avail_toread;
 +	info->inbound.bytes_avail_towrite =
 +		debug_info.inbound.bytes_avail_towrite;
 +
 +	info->outbound.int_mask =
 +		debug_info.outbound.current_interrupt_mask;
 +	info->outbound.read_idx = debug_info.outbound.current_read_index;
 +	info->outbound.write_idx = debug_info.outbound.current_write_index;
 +	info->outbound.bytes_avail_toread =
 +		debug_info.outbound.bytes_avail_toread;
 +	info->outbound.bytes_avail_towrite =
 +		debug_info.outbound.bytes_avail_towrite;
 +}
 +
++=======
++>>>>>>> 98f4c651762c (hv: move ringbuffer bus attributes to dev_groups)
  #define VMBUS_ALIAS_LEN ((sizeof((struct hv_vmbus_device_id *)0)->guid) * 2)
  static void print_alias_name(struct hv_device *hv_dev, char *alias_name)
  {
@@@ -117,68 -62,37 +123,102 @@@
  		sprintf(&alias_name[i], "%02x", hv_dev->dev_type.b[i/2]);
  }
  
++<<<<<<< HEAD
 +/*
 + * vmbus_show_device_attr - Show the device attribute in sysfs.
 + *
 + * This is invoked when user does a
 + * "cat /sys/bus/vmbus/devices/<busdevice>/<attr name>"
 + */
 +static ssize_t vmbus_show_device_attr(struct device *dev,
 +				      struct device_attribute *dev_attr,
 +				      char *buf)
 +{
 +	struct hv_device *hv_dev = device_to_hv_device(dev);
 +	struct hv_device_info *device_info;
 +	int ret = 0;
 +
 +	device_info = kzalloc(sizeof(struct hv_device_info), GFP_KERNEL);
 +	if (!device_info)
 +		return ret;
 +
 +	get_channel_info(hv_dev, device_info);
 +
 +	if (!strcmp(dev_attr->attr.name, "out_intr_mask")) {
 +		ret = sprintf(buf, "%d\n", device_info->outbound.int_mask);
 +	} else if (!strcmp(dev_attr->attr.name, "out_read_index")) {
 +		ret = sprintf(buf, "%d\n", device_info->outbound.read_idx);
 +	} else if (!strcmp(dev_attr->attr.name, "out_write_index")) {
 +		ret = sprintf(buf, "%d\n", device_info->outbound.write_idx);
 +	} else if (!strcmp(dev_attr->attr.name, "out_read_bytes_avail")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->outbound.bytes_avail_toread);
 +	} else if (!strcmp(dev_attr->attr.name, "out_write_bytes_avail")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->outbound.bytes_avail_towrite);
 +	} else if (!strcmp(dev_attr->attr.name, "in_intr_mask")) {
 +		ret = sprintf(buf, "%d\n", device_info->inbound.int_mask);
 +	} else if (!strcmp(dev_attr->attr.name, "in_read_index")) {
 +		ret = sprintf(buf, "%d\n", device_info->inbound.read_idx);
 +	} else if (!strcmp(dev_attr->attr.name, "in_write_index")) {
 +		ret = sprintf(buf, "%d\n", device_info->inbound.write_idx);
 +	} else if (!strcmp(dev_attr->attr.name, "in_read_bytes_avail")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->inbound.bytes_avail_toread);
 +	} else if (!strcmp(dev_attr->attr.name, "in_write_bytes_avail")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->inbound.bytes_avail_towrite);
 +	} else if (!strcmp(dev_attr->attr.name, "server_monitor_pending")) {
 +		ret = sprintf(buf, "%d\n", device_info->server_monitor_pending);
 +	} else if (!strcmp(dev_attr->attr.name, "server_monitor_latency")) {
 +		ret = sprintf(buf, "%d\n", device_info->server_monitor_latency);
 +	} else if (!strcmp(dev_attr->attr.name, "server_monitor_conn_id")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->server_monitor_conn_id);
 +	} else if (!strcmp(dev_attr->attr.name, "client_monitor_pending")) {
 +		ret = sprintf(buf, "%d\n", device_info->client_monitor_pending);
 +	} else if (!strcmp(dev_attr->attr.name, "client_monitor_latency")) {
 +		ret = sprintf(buf, "%d\n", device_info->client_monitor_latency);
 +	} else if (!strcmp(dev_attr->attr.name, "client_monitor_conn_id")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->client_monitor_conn_id);
 +	}
 +
 +	kfree(device_info);
 +	return ret;
++=======
+ static u8 channel_monitor_group(struct vmbus_channel *channel)
+ {
+ 	return (u8)channel->offermsg.monitorid / 32;
+ }
+ 
+ static u8 channel_monitor_offset(struct vmbus_channel *channel)
+ {
+ 	return (u8)channel->offermsg.monitorid % 32;
+ }
+ 
+ static u32 channel_pending(struct vmbus_channel *channel,
+ 			   struct hv_monitor_page *monitor_page)
+ {
+ 	u8 monitor_group = channel_monitor_group(channel);
+ 	return monitor_page->trigger_group[monitor_group].pending;
+ }
+ 
+ static u32 channel_latency(struct vmbus_channel *channel,
+ 			   struct hv_monitor_page *monitor_page)
+ {
+ 	u8 monitor_group = channel_monitor_group(channel);
+ 	u8 monitor_offset = channel_monitor_offset(channel);
+ 	return monitor_page->latency[monitor_group][monitor_offset];
+ }
+ 
+ static u32 channel_conn_id(struct vmbus_channel *channel,
+ 			   struct hv_monitor_page *monitor_page)
+ {
+ 	u8 monitor_group = channel_monitor_group(channel);
+ 	u8 monitor_offset = channel_monitor_offset(channel);
+ 	return monitor_page->parameter[monitor_group][monitor_offset].connectionid.u.id;
++>>>>>>> 98f4c651762c (hv: move ringbuffer bus attributes to dev_groups)
  }
  
  static ssize_t id_show(struct device *dev, struct device_attribute *dev_attr,
@@@ -249,7 -163,226 +289,143 @@@ static ssize_t modalias_show(struct dev
  }
  static DEVICE_ATTR_RO(modalias);
  
 -static ssize_t server_monitor_pending_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_pending(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[1]));
 -}
 -static DEVICE_ATTR_RO(server_monitor_pending);
 -
 -static ssize_t client_monitor_pending_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_pending(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[1]));
 -}
 -static DEVICE_ATTR_RO(client_monitor_pending);
 -
 -static ssize_t server_monitor_latency_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_latency(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[0]));
 -}
 -static DEVICE_ATTR_RO(server_monitor_latency);
 -
 -static ssize_t client_monitor_latency_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_latency(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[1]));
 -}
 -static DEVICE_ATTR_RO(client_monitor_latency);
 -
 -static ssize_t server_monitor_conn_id_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_conn_id(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[0]));
 -}
 -static DEVICE_ATTR_RO(server_monitor_conn_id);
 -
 -static ssize_t client_monitor_conn_id_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_conn_id(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[1]));
 -}
 -static DEVICE_ATTR_RO(client_monitor_conn_id);
  
+ static ssize_t out_intr_mask_show(struct device *dev,
+ 				  struct device_attribute *dev_attr, char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info outbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->outbound, &outbound);
+ 	return sprintf(buf, "%d\n", outbound.current_interrupt_mask);
+ }
+ static DEVICE_ATTR_RO(out_intr_mask);
+ 
+ static ssize_t out_read_index_show(struct device *dev,
+ 				   struct device_attribute *dev_attr, char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info outbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->outbound, &outbound);
+ 	return sprintf(buf, "%d\n", outbound.current_read_index);
+ }
+ static DEVICE_ATTR_RO(out_read_index);
+ 
+ static ssize_t out_write_index_show(struct device *dev,
+ 				    struct device_attribute *dev_attr,
+ 				    char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info outbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->outbound, &outbound);
+ 	return sprintf(buf, "%d\n", outbound.current_write_index);
+ }
+ static DEVICE_ATTR_RO(out_write_index);
+ 
+ static ssize_t out_read_bytes_avail_show(struct device *dev,
+ 					 struct device_attribute *dev_attr,
+ 					 char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info outbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->outbound, &outbound);
+ 	return sprintf(buf, "%d\n", outbound.bytes_avail_toread);
+ }
+ static DEVICE_ATTR_RO(out_read_bytes_avail);
+ 
+ static ssize_t out_write_bytes_avail_show(struct device *dev,
+ 					  struct device_attribute *dev_attr,
+ 					  char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info outbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->outbound, &outbound);
+ 	return sprintf(buf, "%d\n", outbound.bytes_avail_towrite);
+ }
+ static DEVICE_ATTR_RO(out_write_bytes_avail);
+ 
+ static ssize_t in_intr_mask_show(struct device *dev,
+ 				 struct device_attribute *dev_attr, char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info inbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->inbound, &inbound);
+ 	return sprintf(buf, "%d\n", inbound.current_interrupt_mask);
+ }
+ static DEVICE_ATTR_RO(in_intr_mask);
+ 
+ static ssize_t in_read_index_show(struct device *dev,
+ 				  struct device_attribute *dev_attr, char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info inbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->inbound, &inbound);
+ 	return sprintf(buf, "%d\n", inbound.current_read_index);
+ }
+ static DEVICE_ATTR_RO(in_read_index);
+ 
+ static ssize_t in_write_index_show(struct device *dev,
+ 				   struct device_attribute *dev_attr, char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info inbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->inbound, &inbound);
+ 	return sprintf(buf, "%d\n", inbound.current_write_index);
+ }
+ static DEVICE_ATTR_RO(in_write_index);
+ 
+ static ssize_t in_read_bytes_avail_show(struct device *dev,
+ 					struct device_attribute *dev_attr,
+ 					char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info inbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->inbound, &inbound);
+ 	return sprintf(buf, "%d\n", inbound.bytes_avail_toread);
+ }
+ static DEVICE_ATTR_RO(in_read_bytes_avail);
+ 
+ static ssize_t in_write_bytes_avail_show(struct device *dev,
+ 					 struct device_attribute *dev_attr,
+ 					 char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 	struct hv_ring_buffer_debug_info inbound;
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	hv_ringbuffer_get_debuginfo(&hv_dev->channel->inbound, &inbound);
+ 	return sprintf(buf, "%d\n", inbound.bytes_avail_towrite);
+ }
+ static DEVICE_ATTR_RO(in_write_bytes_avail);
+ 
+ /* Set up per device attributes in /sys/bus/vmbus/devices/<bus device> */
  static struct attribute *vmbus_attrs[] = {
  	&dev_attr_id.attr,
  	&dev_attr_state.attr,
@@@ -257,35 -390,26 +433,57 @@@
  	&dev_attr_class_id.attr,
  	&dev_attr_device_id.attr,
  	&dev_attr_modalias.attr,
++<<<<<<< HEAD
++=======
+ 	&dev_attr_server_monitor_pending.attr,
+ 	&dev_attr_client_monitor_pending.attr,
+ 	&dev_attr_server_monitor_latency.attr,
+ 	&dev_attr_client_monitor_latency.attr,
+ 	&dev_attr_server_monitor_conn_id.attr,
+ 	&dev_attr_client_monitor_conn_id.attr,
+ 	&dev_attr_out_intr_mask.attr,
+ 	&dev_attr_out_read_index.attr,
+ 	&dev_attr_out_write_index.attr,
+ 	&dev_attr_out_read_bytes_avail.attr,
+ 	&dev_attr_out_write_bytes_avail.attr,
+ 	&dev_attr_in_intr_mask.attr,
+ 	&dev_attr_in_read_index.attr,
+ 	&dev_attr_in_write_index.attr,
+ 	&dev_attr_in_read_bytes_avail.attr,
+ 	&dev_attr_in_write_bytes_avail.attr,
++>>>>>>> 98f4c651762c (hv: move ringbuffer bus attributes to dev_groups)
  	NULL,
  };
  ATTRIBUTE_GROUPS(vmbus);
  
++<<<<<<< HEAD
 +/* Set up per device attributes in /sys/bus/vmbus/devices/<bus device> */
 +static struct device_attribute vmbus_device_attrs[] = {
 +	__ATTR(server_monitor_pending, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(server_monitor_latency, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(server_monitor_conn_id, S_IRUGO, vmbus_show_device_attr, NULL),
 +
 +	__ATTR(client_monitor_pending, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(client_monitor_latency, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(client_monitor_conn_id, S_IRUGO, vmbus_show_device_attr, NULL),
 +
 +	__ATTR(out_intr_mask, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(out_read_index, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(out_write_index, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(out_read_bytes_avail, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(out_write_bytes_avail, S_IRUGO, vmbus_show_device_attr, NULL),
 +
 +	__ATTR(in_intr_mask, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(in_read_index, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(in_write_index, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(in_read_bytes_avail, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(in_write_bytes_avail, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR_NULL
 +};
 +
 +
++=======
++>>>>>>> 98f4c651762c (hv: move ringbuffer bus attributes to dev_groups)
  /*
   * vmbus_uevent - add uevent for our device
   *
* Unmerged path drivers/hv/vmbus_drv.c
