cifs: switch to ->read_iter()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit e6a7bcb4c489e3e078ba3cc92ae6621b2b8bb9a7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e6a7bcb4.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit e6a7bcb4c489e3e078ba3cc92ae6621b2b8bb9a7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/file.c
diff --cc fs/cifs/file.c
index 0a9decae6d5c,2ec7fce6d350..000000000000
--- a/fs/cifs/file.c
+++ b/fs/cifs/file.c
@@@ -2860,8 -2849,6 +2855,11 @@@ ssize_t cifs_user_readv(struct kiocb *i
  	if (!len)
  		return 0;
  
++<<<<<<< HEAD
 +	iov_iter_init(&to, iov, nr_segs, len, 0);
 +
++=======
++>>>>>>> e6a7bcb4c489 (cifs: switch to ->read_iter())
  	INIT_LIST_HEAD(&rdata_list);
  	cifs_sb = CIFS_SB(file->f_path.dentry->d_sb);
  	open_file = file->private_data;
diff --git a/fs/cifs/cifsfs.c b/fs/cifs/cifsfs.c
index 35309d1d74d2..fefe9f5a83a6 100644
--- a/fs/cifs/cifsfs.c
+++ b/fs/cifs/cifsfs.c
@@ -907,9 +907,9 @@ const struct file_operations cifs_file_ops = {
 };
 
 const struct file_operations cifs_file_strict_ops = {
-	.read = do_sync_read,
+	.read = new_sync_read,
 	.write = do_sync_write,
-	.aio_read = cifs_strict_readv,
+	.read_iter = cifs_strict_readv,
 	.aio_write = cifs_strict_writev,
 	.open = cifs_open,
 	.release = cifs_close,
@@ -927,9 +927,9 @@ const struct file_operations cifs_file_strict_ops = {
 
 const struct file_operations cifs_file_direct_ops = {
 	/* BB reevaluate whether they can be done with directio, no cache */
-	.read = do_sync_read,
+	.read = new_sync_read,
 	.write = do_sync_write,
-	.aio_read = cifs_user_readv,
+	.read_iter = cifs_user_readv,
 	.aio_write = cifs_user_writev,
 	.open = cifs_open,
 	.release = cifs_close,
@@ -964,9 +964,9 @@ const struct file_operations cifs_file_nobrl_ops = {
 };
 
 const struct file_operations cifs_file_strict_nobrl_ops = {
-	.read = do_sync_read,
+	.read = new_sync_read,
 	.write = do_sync_write,
-	.aio_read = cifs_strict_readv,
+	.read_iter = cifs_strict_readv,
 	.aio_write = cifs_strict_writev,
 	.open = cifs_open,
 	.release = cifs_close,
@@ -983,9 +983,9 @@ const struct file_operations cifs_file_strict_nobrl_ops = {
 
 const struct file_operations cifs_file_direct_nobrl_ops = {
 	/* BB reevaluate whether they can be done with directio, no cache */
-	.read = do_sync_read,
+	.read = new_sync_read,
 	.write = do_sync_write,
-	.aio_read = cifs_user_readv,
+	.read_iter = cifs_user_readv,
 	.aio_write = cifs_user_writev,
 	.open = cifs_open,
 	.release = cifs_close,
diff --git a/fs/cifs/cifsfs.h b/fs/cifs/cifsfs.h
index e9c35e2ef148..73ae4afc85a8 100644
--- a/fs/cifs/cifsfs.h
+++ b/fs/cifs/cifsfs.h
@@ -95,10 +95,8 @@ extern const struct file_operations cifs_file_strict_nobrl_ops;
 extern int cifs_open(struct inode *inode, struct file *file);
 extern int cifs_close(struct inode *inode, struct file *file);
 extern int cifs_closedir(struct inode *inode, struct file *file);
-extern ssize_t cifs_user_readv(struct kiocb *iocb, const struct iovec *iov,
-			       unsigned long nr_segs, loff_t pos);
-extern ssize_t cifs_strict_readv(struct kiocb *iocb, const struct iovec *iov,
-				 unsigned long nr_segs, loff_t pos);
+extern ssize_t cifs_user_readv(struct kiocb *iocb, struct iov_iter *to);
+extern ssize_t cifs_strict_readv(struct kiocb *iocb, struct iov_iter *to);
 extern ssize_t cifs_user_writev(struct kiocb *iocb, const struct iovec *iov,
 				unsigned long nr_segs, loff_t pos);
 extern ssize_t cifs_strict_writev(struct kiocb *iocb, const struct iovec *iov,
* Unmerged path fs/cifs/file.c
