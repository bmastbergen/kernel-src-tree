net/mlx4_core: Avoid double dumping of the PF device capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx4_core: Avoid double dumping of the PF device capabilities (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 96.83%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit c78e25edbf3ed87b23709c9b0732be5fa00d5f9f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c78e25ed.failed

To support asymmetric EQ allocations, we should query the device
capabilities prior to enabling SRIOV. As a side effect of adding that,
we are dumping the PF device capabilities twice. Avoid that by moving
the printing into a helper function which is called once.

Fixes: 7ae0e400cd93 ('net/mlx4_core: Flexible (asymmetric) allocation of
		     EQs and MSI-X vectors for PF/VFs')
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c78e25edbf3ed87b23709c9b0732be5fa00d5f9f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/fw.c
diff --cc drivers/net/ethernet/mellanox/mlx4/fw.c
index cd477077e8f4,51807bb7546e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/fw.c
+++ b/drivers/net/ethernet/mellanox/mlx4/fw.c
@@@ -876,9 -904,27 +870,24 @@@ int mlx4_QUERY_DEV_CAP(struct mlx4_dev 
  	 * we can't use any EQs whose doorbell falls on that page,
  	 * even if the EQ itself isn't reserved.
  	 */
 -	if (dev_cap->num_sys_eqs == 0)
 -		dev_cap->reserved_eqs = max(dev_cap->reserved_uars * 4,
 -					    dev_cap->reserved_eqs);
 -	else
 -		dev_cap->flags2 |= MLX4_DEV_CAP_FLAG2_SYS_EQS;
 +	dev_cap->reserved_eqs = max(dev_cap->reserved_uars * 4,
 +				    dev_cap->reserved_eqs);
  
+ out:
+ 	mlx4_free_cmd_mailbox(dev, mailbox);
+ 	return err;
+ }
+ 
+ void mlx4_dev_cap_dump(struct mlx4_dev *dev, struct mlx4_dev_cap *dev_cap)
+ {
+ 	if (dev_cap->bf_reg_size > 0)
+ 		mlx4_dbg(dev, "BlueFlame available (reg size %d, regs/page %d)\n",
+ 			 dev_cap->bf_reg_size, dev_cap->bf_regs_per_page);
+ 	else
+ 		mlx4_dbg(dev, "BlueFlame not available\n");
+ 
+ 	mlx4_dbg(dev, "Base MM extensions: flags %08x, rsvd L_Key %08x\n",
+ 		 dev_cap->bmme_flags, dev_cap->reserved_lkey);
  	mlx4_dbg(dev, "Max ICM size %lld MB\n",
  		 (unsigned long long) dev_cap->max_icm_sz >> 20);
  	mlx4_dbg(dev, "Max QPs: %d, reserved QPs: %d, entry size: %d\n",
@@@ -907,13 -954,12 +916,16 @@@
  	mlx4_dbg(dev, "Max GSO size: %d\n", dev_cap->max_gso_sz);
  	mlx4_dbg(dev, "Max counters: %d\n", dev_cap->max_counters);
  	mlx4_dbg(dev, "Max RSS Table size: %d\n", dev_cap->max_rss_tbl_sz);
- 
++<<<<<<< HEAD
++
++=======
+ 	mlx4_dbg(dev, "DMFS high rate steer QPn base: %d\n",
+ 		 dev_cap->dmfs_high_rate_qpn_base);
+ 	mlx4_dbg(dev, "DMFS high rate steer QPn range: %d\n",
+ 		 dev_cap->dmfs_high_rate_qpn_range);
++>>>>>>> c78e25edbf3e (net/mlx4_core: Avoid double dumping of the PF device capabilities)
  	dump_dev_cap_flags(dev, dev_cap->flags);
  	dump_dev_cap_flags2(dev, dev_cap->flags2);
- 
- out:
- 	mlx4_free_cmd_mailbox(dev, mailbox);
- 	return err;
  }
  
  int mlx4_QUERY_PORT(struct mlx4_dev *dev, int port, struct mlx4_port_cap *port_cap)
* Unmerged path drivers/net/ethernet/mellanox/mlx4/fw.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/fw.h b/drivers/net/ethernet/mellanox/mlx4/fw.h
index c1fe28314ccf..c24ccdaeb471 100644
--- a/drivers/net/ethernet/mellanox/mlx4/fw.h
+++ b/drivers/net/ethernet/mellanox/mlx4/fw.h
@@ -218,6 +218,7 @@ struct mlx4_set_ib_param {
 	u32 cap_mask;
 };
 
+void mlx4_dev_cap_dump(struct mlx4_dev *dev, struct mlx4_dev_cap *dev_cap);
 int mlx4_QUERY_DEV_CAP(struct mlx4_dev *dev, struct mlx4_dev_cap *dev_cap);
 int mlx4_QUERY_PORT(struct mlx4_dev *dev, int port, struct mlx4_port_cap *port_cap);
 int mlx4_QUERY_FUNC_CAP(struct mlx4_dev *dev, u8 gen_or_port,
diff --git a/drivers/net/ethernet/mellanox/mlx4/main.c b/drivers/net/ethernet/mellanox/mlx4/main.c
index 794737489226..14a4d70e46e3 100644
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@ -281,6 +281,7 @@ static int mlx4_dev_cap(struct mlx4_dev *dev, struct mlx4_dev_cap *dev_cap)
 		mlx4_err(dev, "QUERY_DEV_CAP command failed, aborting\n");
 		return err;
 	}
+	mlx4_dev_cap_dump(dev, dev_cap);
 
 	if (dev_cap->min_page_sz > PAGE_SIZE) {
 		mlx4_err(dev, "HCA minimum page size of %d bigger than kernel PAGE_SIZE of %ld, aborting\n",
