perf session: Remove perf_session from warn_errors signature

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf] session: Remove perf_session from warn_errors signature (Jiri Olsa) [1222189]
Rebuild_FUZZ: 95.65%
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit ccda068f96138734eb40e9202ea9562566b43c12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ccda068f.failed

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Don Zickus <dzickus@redhat.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/n/tip-pxxm1liohog3d6i826x8sud8@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ccda068f96138734eb40e9202ea9562566b43c12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/session.c
diff --cc tools/perf/util/session.c
index 78b55d673ea4,34dd749dc390..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -1242,44 -1125,47 +1242,82 @@@ static struct thread *perf_session__reg
  	return thread;
  }
  
- static void perf_session__warn_about_errors(const struct perf_session *session,
- 					    const struct perf_tool *tool)
+ static void perf_tool__warn_about_errors(const struct perf_tool *tool,
+ 					 const struct events_stats *stats)
  {
  	if (tool->lost == perf_event__process_lost &&
++<<<<<<< HEAD
 +	    session->stats.nr_events[PERF_RECORD_LOST] != 0) {
 +		ui__warning("Processed %d events and lost %d chunks!\n\n"
 +			    "Check IO/CPU overload!\n\n",
 +			    session->stats.nr_events[0],
 +			    session->stats.nr_events[PERF_RECORD_LOST]);
 +	}
 +
 +	if (session->stats.nr_unknown_events != 0) {
++=======
+ 	    stats->nr_events[PERF_RECORD_LOST] != 0) {
+ 		ui__warning("Processed %d events and lost %d chunks!\n\n"
+ 			    "Check IO/CPU overload!\n\n",
+ 			    stats->nr_events[0],
+ 			    stats->nr_events[PERF_RECORD_LOST]);
+ 	}
+ 
+ 	if (stats->nr_unknown_events != 0) {
++>>>>>>> ccda068f9613 (perf session: Remove perf_session from warn_errors signature)
  		ui__warning("Found %u unknown events!\n\n"
  			    "Is this an older tool processing a perf.data "
  			    "file generated by a more recent tool?\n\n"
  			    "If that is not the case, consider "
  			    "reporting to linux-kernel@vger.kernel.org.\n\n",
++<<<<<<< HEAD
 +			    session->stats.nr_unknown_events);
 +	}
 +
 +	if (session->stats.nr_unknown_id != 0) {
 +		ui__warning("%u samples with id not present in the header\n",
 +			    session->stats.nr_unknown_id);
 +	}
 +
 + 	if (session->stats.nr_invalid_chains != 0) {
 + 		ui__warning("Found invalid callchains!\n\n"
 + 			    "%u out of %u events were discarded for this reason.\n\n"
 + 			    "Consider reporting to linux-kernel@vger.kernel.org.\n\n",
 + 			    session->stats.nr_invalid_chains,
 + 			    session->stats.nr_events[PERF_RECORD_SAMPLE]);
 + 	}
 +
 +	if (session->stats.nr_unprocessable_samples != 0) {
 +		ui__warning("%u unprocessable samples recorded.\n"
 +			    "Do you have a KVM guest running and not using 'perf kvm'?\n",
 +			    session->stats.nr_unprocessable_samples);
 +	}
++=======
+ 			    stats->nr_unknown_events);
+ 	}
+ 
+ 	if (stats->nr_unknown_id != 0) {
+ 		ui__warning("%u samples with id not present in the header\n",
+ 			    stats->nr_unknown_id);
+ 	}
+ 
+ 	if (stats->nr_invalid_chains != 0) {
+ 		ui__warning("Found invalid callchains!\n\n"
+ 			    "%u out of %u events were discarded for this reason.\n\n"
+ 			    "Consider reporting to linux-kernel@vger.kernel.org.\n\n",
+ 			    stats->nr_invalid_chains,
+ 			    stats->nr_events[PERF_RECORD_SAMPLE]);
+ 	}
+ 
+ 	if (stats->nr_unprocessable_samples != 0) {
+ 		ui__warning("%u unprocessable samples recorded.\n"
+ 			    "Do you have a KVM guest running and not using 'perf kvm'?\n",
+ 			    stats->nr_unprocessable_samples);
+ 	}
+ 
+ 	if (stats->nr_unordered_events != 0)
+ 		ui__warning("%u out of order events recorded.\n", stats->nr_unordered_events);
++>>>>>>> ccda068f9613 (perf session: Remove perf_session from warn_errors signature)
  }
  
  volatile int session_done;
@@@ -1369,8 -1255,8 +1407,13 @@@ done
  	err = ordered_events__flush(session, tool, OE_FLUSH__FINAL);
  out_err:
  	free(buf);
++<<<<<<< HEAD
 +	perf_session__warn_about_errors(session, tool);
 +	perf_session_free_sample_buffers(session);
++=======
+ 	perf_tool__warn_about_errors(tool, &session->evlist->stats);
+ 	ordered_events__free(&session->ordered_events);
++>>>>>>> ccda068f9613 (perf session: Remove perf_session from warn_errors signature)
  	return err;
  }
  
@@@ -1514,8 -1400,8 +1557,13 @@@ out
  	err = ordered_events__flush(session, tool, OE_FLUSH__FINAL);
  out_err:
  	ui_progress__finish();
++<<<<<<< HEAD
 +	perf_session__warn_about_errors(session, tool);
 +	perf_session_free_sample_buffers(session);
++=======
+ 	perf_tool__warn_about_errors(tool, &session->evlist->stats);
+ 	ordered_events__free(&session->ordered_events);
++>>>>>>> ccda068f9613 (perf session: Remove perf_session from warn_errors signature)
  	session->one_mmap = false;
  	return err;
  }
* Unmerged path tools/perf/util/session.c
