xfs: use percpu_counter_read_positive for mp->m_icount

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author George Wang <xuw2015@gmail.com>
commit 74f9ce1cf2830b94e189f4e99678dbf19aa3bc90
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/74f9ce1c.failed

Function percpu_counter_read just return the current counter, which can be
negative. This will cause the checking of "allocated inode
counts <= m_maxicount" false positive. Use percpu_counter_read_positive can
solve this problem, and be consistent with the purpose to introduce percpu
mechanism to xfs.

	Signed-off-by: George Wang <xuw2015@gmail.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 74f9ce1cf2830b94e189f4e99678dbf19aa3bc90)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_ialloc.c
diff --cc fs/xfs/libxfs/xfs_ialloc.c
index 6f5020a584af,1c9e75521250..000000000000
--- a/fs/xfs/libxfs/xfs_ialloc.c
+++ b/fs/xfs/libxfs/xfs_ialloc.c
@@@ -381,8 -376,9 +381,14 @@@ xfs_ialloc_ag_alloc
  	 */
  	newlen = args.mp->m_ialloc_inos;
  	if (args.mp->m_maxicount &&
++<<<<<<< HEAD
 +	    args.mp->m_sb.sb_icount + newlen > args.mp->m_maxicount)
 +		return XFS_ERROR(ENOSPC);
++=======
+ 	    percpu_counter_read_positive(&args.mp->m_icount) + newlen >
+ 							args.mp->m_maxicount)
+ 		return -ENOSPC;
++>>>>>>> 74f9ce1cf283 (xfs: use percpu_counter_read_positive for mp->m_icount)
  	args.minlen = args.maxlen = args.mp->m_ialloc_blks;
  	/*
  	 * First try to allocate inodes contiguous with the last-allocated
@@@ -1343,9 -1339,13 +1349,17 @@@ xfs_dialloc
  	 * If we have already hit the ceiling of inode blocks then clear
  	 * okalloc so we scan all available agi structures for a free
  	 * inode.
+ 	 *
+ 	 * Read rough value of mp->m_icount by percpu_counter_read_positive,
+ 	 * which will sacrifice the preciseness but improve the performance.
  	 */
  	if (mp->m_maxicount &&
++<<<<<<< HEAD
 +	    mp->m_sb.sb_icount + mp->m_ialloc_inos > mp->m_maxicount) {
++=======
+ 	    percpu_counter_read_positive(&mp->m_icount) + mp->m_ialloc_inos
+ 							> mp->m_maxicount) {
++>>>>>>> 74f9ce1cf283 (xfs: use percpu_counter_read_positive for mp->m_icount)
  		noroom = 1;
  		okalloc = 0;
  	}
* Unmerged path fs/xfs/libxfs/xfs_ialloc.c
