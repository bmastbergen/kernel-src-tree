KVM: VMX: Add PML support in VMX

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [kvm] vmx: Add PML support in VMX (Bandan Das) [1209995]
Rebuild_FUZZ: 91.53%
commit-author Kai Huang <kai.huang@linux.intel.com>
commit 843e4330573cc5261ae260ce0b83dc570d8cdc05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/843e4330.failed

This patch adds PML support in VMX. A new module parameter 'enable_pml' is added
to allow user to enable/disable it manually.

	Signed-off-by: Kai Huang <kai.huang@linux.intel.com>
	Reviewed-by: Xiao Guangrong <guangrong.xiao@linux.intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 843e4330573cc5261ae260ce0b83dc570d8cdc05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/vmx.h
#	arch/x86/include/uapi/asm/vmx.h
#	arch/x86/kvm/vmx.c
diff --cc arch/x86/include/asm/vmx.h
index bcbfade26d8d,da772edd19ab..000000000000
--- a/arch/x86/include/asm/vmx.h
+++ b/arch/x86/include/asm/vmx.h
@@@ -69,6 -69,8 +69,11 @@@
  #define SECONDARY_EXEC_PAUSE_LOOP_EXITING	0x00000400
  #define SECONDARY_EXEC_ENABLE_INVPCID		0x00001000
  #define SECONDARY_EXEC_SHADOW_VMCS              0x00004000
++<<<<<<< HEAD
++=======
+ #define SECONDARY_EXEC_ENABLE_PML               0x00020000
+ #define SECONDARY_EXEC_XSAVES			0x00100000
++>>>>>>> 843e4330573c (KVM: VMX: Add PML support in VMX)
  
  
  #define PIN_BASED_EXT_INTR_MASK                 0x00000001
diff --cc arch/x86/include/uapi/asm/vmx.h
index 69429bd0935f,c5f1a1deb91a..000000000000
--- a/arch/x86/include/uapi/asm/vmx.h
+++ b/arch/x86/include/uapi/asm/vmx.h
@@@ -73,6 -73,9 +73,12 @@@
  #define EXIT_REASON_XSETBV              55
  #define EXIT_REASON_APIC_WRITE          56
  #define EXIT_REASON_INVPCID             58
++<<<<<<< HEAD
++=======
+ #define EXIT_REASON_PML_FULL            62
+ #define EXIT_REASON_XSAVES              63
+ #define EXIT_REASON_XRSTORS             64
++>>>>>>> 843e4330573c (KVM: VMX: Add PML support in VMX)
  
  #define VMX_EXIT_REASONS \
  	{ EXIT_REASON_EXCEPTION_NMI,         "EXCEPTION_NMI" }, \
diff --cc arch/x86/kvm/vmx.c
index a4fa771e3adf,de5ce82b2436..000000000000
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@@ -99,6 -99,11 +99,14 @@@ module_param_named(enable_shadow_vmcs, 
  static bool __read_mostly nested = 0;
  module_param(nested, bool, S_IRUGO);
  
++<<<<<<< HEAD
++=======
+ static u64 __read_mostly host_xss;
+ 
+ static bool __read_mostly enable_pml = 1;
+ module_param_named(pml, enable_pml, bool, S_IRUGO);
+ 
++>>>>>>> 843e4330573c (KVM: VMX: Add PML support in VMX)
  #define KVM_GUEST_CR0_MASK (X86_CR0_NW | X86_CR0_CD)
  #define KVM_VM_CR0_ALWAYS_ON_UNRESTRICTED_GUEST (X86_CR0_WP | X86_CR0_NE)
  #define KVM_VM_CR0_ALWAYS_ON						\
@@@ -2885,7 -2935,9 +2902,13 @@@ static __init int setup_vmcs_config(str
  			SECONDARY_EXEC_ENABLE_INVPCID |
  			SECONDARY_EXEC_APIC_REGISTER_VIRT |
  			SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY |
++<<<<<<< HEAD
 +			SECONDARY_EXEC_SHADOW_VMCS;
++=======
+ 			SECONDARY_EXEC_SHADOW_VMCS |
+ 			SECONDARY_EXEC_XSAVES |
+ 			SECONDARY_EXEC_ENABLE_PML;
++>>>>>>> 843e4330573c (KVM: VMX: Add PML support in VMX)
  		if (adjust_vmx_controls(min2, opt2,
  					MSR_IA32_VMX_PROCBASED_CTLS2,
  					&_cpu_based_2nd_exec_control) < 0)
@@@ -6952,6 -7072,9 +7017,12 @@@ static int (*const kvm_vmx_exit_handler
  	[EXIT_REASON_MONITOR_INSTRUCTION]     = handle_monitor,
  	[EXIT_REASON_INVEPT]                  = handle_invept,
  	[EXIT_REASON_INVVPID]                 = handle_invvpid,
++<<<<<<< HEAD
++=======
+ 	[EXIT_REASON_XSAVES]                  = handle_xsaves,
+ 	[EXIT_REASON_XRSTORS]                 = handle_xrstors,
+ 	[EXIT_REASON_PML_FULL]		      = handle_pml_full,
++>>>>>>> 843e4330573c (KVM: VMX: Add PML support in VMX)
  };
  
  static const int kvm_vmx_max_exit_handlers =
* Unmerged path arch/x86/include/asm/vmx.h
* Unmerged path arch/x86/include/uapi/asm/vmx.h
diff --git a/arch/x86/kvm/trace.h b/arch/x86/kvm/trace.h
index c2a34bb5ad93..ef43e3f4f77b 100644
--- a/arch/x86/kvm/trace.h
+++ b/arch/x86/kvm/trace.h
@@ -848,6 +848,24 @@ TRACE_EVENT(kvm_track_tsc,
 
 #endif /* CONFIG_X86_64 */
 
+/*
+ * Tracepoint for PML full VMEXIT.
+ */
+TRACE_EVENT(kvm_pml_full,
+	TP_PROTO(unsigned int vcpu_id),
+	TP_ARGS(vcpu_id),
+
+	TP_STRUCT__entry(
+		__field(	unsigned int,	vcpu_id			)
+	),
+
+	TP_fast_assign(
+		__entry->vcpu_id		= vcpu_id;
+	),
+
+	TP_printk("vcpu %d: PML full", __entry->vcpu_id)
+);
+
 TRACE_EVENT(kvm_ple_window,
 	TP_PROTO(bool grow, unsigned int vcpu_id, int new, int old),
 	TP_ARGS(grow, vcpu_id, new, old),
* Unmerged path arch/x86/kvm/vmx.c
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 7b812805de5a..66e434f31879 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -7721,3 +7721,4 @@ EXPORT_TRACEPOINT_SYMBOL_GPL(kvm_skinit);
 EXPORT_TRACEPOINT_SYMBOL_GPL(kvm_nested_intercepts);
 EXPORT_TRACEPOINT_SYMBOL_GPL(kvm_write_tsc_offset);
 EXPORT_TRACEPOINT_SYMBOL_GPL(kvm_ple_window);
+EXPORT_TRACEPOINT_SYMBOL_GPL(kvm_pml_full);
