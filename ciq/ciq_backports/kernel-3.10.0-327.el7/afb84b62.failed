pktgen: add flag NO_TIMESTAMP to disable timestamping

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jesper Dangaard Brouer <brouer@redhat.com>
commit afb84b6261841f8ab387e267e748236fa805bea0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/afb84b62.failed

Then testing the TX limits of the stack, then it is useful to
be-able to disable the do_gettimeofday() timetamping on every packet.

This implements a pktgen flag NO_TIMESTAMP which will disable this
call to do_gettimeofday().

The performance change on (my system E5-2695) with skb_clone=0, goes
from TX 2,423,751 pps to 2,567,165 pps with flag NO_TIMESTAMP. Thus,
the cost of do_gettimeofday() or saving is approx 23 nanosec.

	Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit afb84b6261841f8ab387e267e748236fa805bea0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/pktgen.c
diff --cc net/core/pktgen.c
index dc189dd7ca08,21cb4839bc97..000000000000
--- a/net/core/pktgen.c
+++ b/net/core/pktgen.c
@@@ -198,6 -201,8 +198,11 @@@
  #define F_QUEUE_MAP_RND (1<<13)	/* queue map Random */
  #define F_QUEUE_MAP_CPU (1<<14)	/* queue map mirrors smp_processor_id() */
  #define F_NODE          (1<<15)	/* Node memory alloc*/
++<<<<<<< HEAD
++=======
+ #define F_UDPCSUM       (1<<16)	/* Include UDP checksum */
+ #define F_NO_TIMESTAMP  (1<<17)	/* Don't timestamp packets (default TS) */
++>>>>>>> afb84b626184 (pktgen: add flag NO_TIMESTAMP to disable timestamping)
  
  /* Thread control flag bits */
  #define T_STOP        (1<<0)	/* Stop run */
@@@ -611,34 -616,40 +616,37 @@@ static int pktgen_if_show(struct seq_fi
  	if (pkt_dev->node >= 0)
  		seq_printf(seq, "     node: %d\n", pkt_dev->node);
  
 -	seq_puts(seq, "     Flags: ");
 +	seq_printf(seq, "     Flags: ");
  
  	if (pkt_dev->flags & F_IPV6)
 -		seq_puts(seq, "IPV6  ");
 +		seq_printf(seq, "IPV6  ");
  
  	if (pkt_dev->flags & F_IPSRC_RND)
 -		seq_puts(seq, "IPSRC_RND  ");
 +		seq_printf(seq, "IPSRC_RND  ");
  
  	if (pkt_dev->flags & F_IPDST_RND)
 -		seq_puts(seq, "IPDST_RND  ");
 +		seq_printf(seq, "IPDST_RND  ");
  
  	if (pkt_dev->flags & F_TXSIZE_RND)
 -		seq_puts(seq, "TXSIZE_RND  ");
 +		seq_printf(seq, "TXSIZE_RND  ");
  
  	if (pkt_dev->flags & F_UDPSRC_RND)
 -		seq_puts(seq, "UDPSRC_RND  ");
 +		seq_printf(seq, "UDPSRC_RND  ");
  
  	if (pkt_dev->flags & F_UDPDST_RND)
 -		seq_puts(seq, "UDPDST_RND  ");
 -
 -	if (pkt_dev->flags & F_UDPCSUM)
 -		seq_puts(seq, "UDPCSUM  ");
 +		seq_printf(seq, "UDPDST_RND  ");
  
+ 	if (pkt_dev->flags & F_NO_TIMESTAMP)
+ 		seq_puts(seq, "NO_TIMESTAMP  ");
+ 
  	if (pkt_dev->flags & F_MPLS_RND)
 -		seq_puts(seq,  "MPLS_RND  ");
 +		seq_printf(seq,  "MPLS_RND  ");
  
  	if (pkt_dev->flags & F_QUEUE_MAP_RND)
 -		seq_puts(seq,  "QUEUE_MAP_RND  ");
 +		seq_printf(seq,  "QUEUE_MAP_RND  ");
  
  	if (pkt_dev->flags & F_QUEUE_MAP_CPU)
 -		seq_puts(seq,  "QUEUE_MAP_CPU  ");
 +		seq_printf(seq,  "QUEUE_MAP_CPU  ");
  
  	if (pkt_dev->cflows) {
  		if (pkt_dev->flags & F_FLOW_SEQ)
@@@ -1228,12 -1241,28 +1236,35 @@@ static ssize_t pktgen_if_write(struct f
  		else if (strcmp(f, "!NODE_ALLOC") == 0)
  			pkt_dev->flags &= ~F_NODE;
  
++<<<<<<< HEAD
++=======
+ 		else if (strcmp(f, "UDPCSUM") == 0)
+ 			pkt_dev->flags |= F_UDPCSUM;
+ 
+ 		else if (strcmp(f, "!UDPCSUM") == 0)
+ 			pkt_dev->flags &= ~F_UDPCSUM;
+ 
+ 		else if (strcmp(f, "NO_TIMESTAMP") == 0)
+ 			pkt_dev->flags |= F_NO_TIMESTAMP;
+ 
++>>>>>>> afb84b626184 (pktgen: add flag NO_TIMESTAMP to disable timestamping)
  		else {
  			sprintf(pg_result,
  				"Flag -:%s:- unknown\nAvailable flags, (prepend ! to un-set flag):\n%s",
  				f,
  				"IPSRC_RND, IPDST_RND, UDPSRC_RND, UDPDST_RND, "
++<<<<<<< HEAD
 +				"MACSRC_RND, MACDST_RND, TXSIZE_RND, IPV6, MPLS_RND, VID_RND, SVID_RND, FLOW_SEQ, IPSEC, NODE_ALLOC\n");
++=======
+ 				"MACSRC_RND, MACDST_RND, TXSIZE_RND, IPV6, "
+ 				"MPLS_RND, VID_RND, SVID_RND, FLOW_SEQ, "
+ 				"QUEUE_MAP_RND, QUEUE_MAP_CPU, UDPCSUM, "
+ 				"NO_TIMESTAMP, "
+ #ifdef CONFIG_XFRM
+ 				"IPSEC, "
+ #endif
+ 				"NODE_ALLOC\n");
++>>>>>>> afb84b626184 (pktgen: add flag NO_TIMESTAMP to disable timestamping)
  			return count;
  		}
  		sprintf(pg_result, "OK: flags=0x%x", pkt_dev->flags);
@@@ -2629,11 -2693,39 +2660,16 @@@ static void pktgen_finalize_skb(struct 
  	pgh->pgh_magic = htonl(PKTGEN_MAGIC);
  	pgh->seq_num = htonl(pkt_dev->seq_num);
  
- 	do_gettimeofday(&timestamp);
- 	pgh->tv_sec = htonl(timestamp.tv_sec);
- 	pgh->tv_usec = htonl(timestamp.tv_usec);
+ 	if (pkt_dev->flags & F_NO_TIMESTAMP) {
+ 		pgh->tv_sec = 0;
+ 		pgh->tv_usec = 0;
+ 	} else {
+ 		do_gettimeofday(&timestamp);
+ 		pgh->tv_sec = htonl(timestamp.tv_sec);
+ 		pgh->tv_usec = htonl(timestamp.tv_usec);
+ 	}
  }
  
 -static struct sk_buff *pktgen_alloc_skb(struct net_device *dev,
 -					struct pktgen_dev *pkt_dev,
 -					unsigned int extralen)
 -{
 -	struct sk_buff *skb = NULL;
 -	unsigned int size = pkt_dev->cur_pkt_size + 64 + extralen +
 -			    pkt_dev->pkt_overhead;
 -
 -	if (pkt_dev->flags & F_NODE) {
 -		int node = pkt_dev->node >= 0 ? pkt_dev->node : numa_node_id();
 -
 -		skb = __alloc_skb(NET_SKB_PAD + size, GFP_NOWAIT, 0, node);
 -		if (likely(skb)) {
 -			skb_reserve(skb, NET_SKB_PAD);
 -			skb->dev = dev;
 -		}
 -	} else {
 -		 skb = __netdev_alloc_skb(dev, size, GFP_NOWAIT);
 -	}
 -
 -	return skb;
 -}
 -
  static struct sk_buff *fill_packet_ipv4(struct net_device *odev,
  					struct pktgen_dev *pkt_dev)
  {
* Unmerged path net/core/pktgen.c
