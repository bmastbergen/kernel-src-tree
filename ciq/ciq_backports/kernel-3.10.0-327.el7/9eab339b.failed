audit: get comm using lock to avoid race in string printing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [security] lsm: get comm using lock to avoid race in string printing (Richard Guy Briggs) [1056327]
Rebuild_FUZZ: 93.10%
commit-author Richard Guy Briggs <rgb@redhat.com>
commit 9eab339b197a6903043d272295dcb716ff739b21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9eab339b.failed

When task->comm is passed directly to audit_log_untrustedstring() without
getting a copy or using the task_lock, there is a race that could happen that
would output a NULL (\0) in the output string that would effectively truncate
the rest of the report text after the comm= field in the audit, losing fields.

Use get_task_comm() to get a copy while acquiring the task_lock to prevent
this and to prevent the result from being a mixture of old and new values of
comm.

	Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
	Signed-off-by: Richard Guy Briggs <rgb@redhat.com>
(cherry picked from commit 9eab339b197a6903043d272295dcb716ff739b21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/auditsc.c
diff --cc kernel/auditsc.c
index 01f5de1b9bd4,89335723fb2a..000000000000
--- a/kernel/auditsc.c
+++ b/kernel/auditsc.c
@@@ -2366,6 -2423,8 +2366,11 @@@ static void audit_log_task(struct audit
  	kuid_t auid, uid;
  	kgid_t gid;
  	unsigned int sessionid;
++<<<<<<< HEAD
++=======
+ 	struct mm_struct *mm = current->mm;
+ 	char comm[sizeof(current->comm)];
++>>>>>>> 9eab339b197a (audit: get comm using lock to avoid race in string printing)
  
  	auid = audit_get_loginuid(current);
  	sessionid = audit_get_sessionid(current);
@@@ -2378,16 -2437,16 +2383,27 @@@
  			 sessionid);
  	audit_log_task_context(ab);
  	audit_log_format(ab, " pid=%d comm=", task_pid_nr(current));
++<<<<<<< HEAD
 +	audit_log_untrustedstring(ab, current->comm);
++=======
+ 	audit_log_untrustedstring(ab, get_task_comm(comm, current));
+ 	if (mm) {
+ 		down_read(&mm->mmap_sem);
+ 		if (mm->exe_file)
+ 			audit_log_d_path(ab, " exe=", &mm->exe_file->f_path);
+ 		up_read(&mm->mmap_sem);
+ 	} else
+ 		audit_log_format(ab, " exe=(null)");
++>>>>>>> 9eab339b197a (audit: get comm using lock to avoid race in string printing)
  }
  
 +static void audit_log_abend(struct audit_buffer *ab, char *reason, long signr)
 +{
 +	audit_log_task(ab);
 +	audit_log_format(ab, " reason=");
 +	audit_log_string(ab, reason);
 +	audit_log_format(ab, " sig=%ld", signr);
 +}
  /**
   * audit_core_dumps - record information about processes that end abnormally
   * @signr: signal value
diff --git a/kernel/audit.c b/kernel/audit.c
index f3a996e2f95b..5df1be7e0b3f 100644
--- a/kernel/audit.c
+++ b/kernel/audit.c
@@ -1730,7 +1730,7 @@ EXPORT_SYMBOL(audit_log_task_context);
 void audit_log_task_info(struct audit_buffer *ab, struct task_struct *tsk)
 {
 	const struct cred *cred;
-	char name[sizeof(tsk->comm)];
+	char comm[sizeof(tsk->comm)];
 	struct mm_struct *mm = tsk->mm;
 	char *tty;
 
@@ -1764,9 +1764,8 @@ void audit_log_task_info(struct audit_buffer *ab, struct task_struct *tsk)
 			 from_kgid(&init_user_ns, cred->fsgid),
 			 tty, audit_get_sessionid(tsk));
 
-	get_task_comm(name, tsk);
 	audit_log_format(ab, " comm=");
-	audit_log_untrustedstring(ab, name);
+	audit_log_untrustedstring(ab, get_task_comm(comm, tsk));
 
 	if (mm) {
 		down_read(&mm->mmap_sem);
* Unmerged path kernel/auditsc.c
