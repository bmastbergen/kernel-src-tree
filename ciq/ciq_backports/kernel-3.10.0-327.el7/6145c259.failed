perf kmem: Consistently use PRIu64 for printing u64 values

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf] kmem: Consistently use PRIu64 for printing u64 values (Jiri Olsa) [1222189]
Rebuild_FUZZ: 95.50%
commit-author Will Deacon <will.deacon@arm.com>
commit 6145c259cd454bcb7a1288f7bbb7b4fbc18175dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6145c259.failed

Building the perf tool for 32-bit ARM results in the following build
error due to a combination of an incorrect conversion specifier and
compiling with -Werror:

  builtin-kmem.c: In function ‘print_page_summary’:
  builtin-kmem.c:644:9: error: format ‘%lu’ expects argument of type ‘long unsigned int’, but argument 3 has type ‘u64’ [-Werror=format=]
           nr_alloc_freed, (total_alloc_freed_bytes) / 1024);
           ^
  builtin-kmem.c:647:9: error: format ‘%lu’ expects argument of type ‘long unsigned int’, but argument 3 has type ‘u64’ [-Werror=format=]
           (total_page_alloc_bytes - total_alloc_freed_bytes) / 1024);
           ^
  cc1: all warnings being treated as errors

This patch fixes the problem by consistently using PRIu64 for printing
out u64 values.

	Signed-off-by: Will Deacon <will.deacon@arm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Joonsoo Kim <js1304@gmail.com>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1429796437-1790-1-git-send-email-will.deacon@arm.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 6145c259cd454bcb7a1288f7bbb7b4fbc18175dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-kmem.c
diff --cc tools/perf/builtin-kmem.c
index 625af3a853c2,a1915b430044..000000000000
--- a/tools/perf/builtin-kmem.c
+++ b/tools/perf/builtin-kmem.c
@@@ -335,13 -626,73 +335,77 @@@ static void print_summary(void
  	printf("Cross CPU allocations: %'lu/%'lu\n", nr_cross_allocs, nr_allocs);
  }
  
++<<<<<<< HEAD
++=======
+ static void print_page_summary(void)
+ {
+ 	int o, m;
+ 	u64 nr_alloc_freed = nr_page_frees - nr_page_nomatch;
+ 	u64 total_alloc_freed_bytes = total_page_free_bytes - total_page_nomatch_bytes;
+ 
+ 	printf("\nSUMMARY (page allocator)");
+ 	printf("\n========================\n");
+ 	printf("%-30s: %'16lu   [ %'16"PRIu64" KB ]\n", "Total allocation requests",
+ 	       nr_page_allocs, total_page_alloc_bytes / 1024);
+ 	printf("%-30s: %'16lu   [ %'16"PRIu64" KB ]\n", "Total free requests",
+ 	       nr_page_frees, total_page_free_bytes / 1024);
+ 	printf("\n");
+ 
+ 	printf("%-30s: %'16"PRIu64"   [ %'16"PRIu64" KB ]\n", "Total alloc+freed requests",
+ 	       nr_alloc_freed, (total_alloc_freed_bytes) / 1024);
+ 	printf("%-30s: %'16"PRIu64"   [ %'16"PRIu64" KB ]\n", "Total alloc-only requests",
+ 	       nr_page_allocs - nr_alloc_freed,
+ 	       (total_page_alloc_bytes - total_alloc_freed_bytes) / 1024);
+ 	printf("%-30s: %'16lu   [ %'16"PRIu64" KB ]\n", "Total free-only requests",
+ 	       nr_page_nomatch, total_page_nomatch_bytes / 1024);
+ 	printf("\n");
+ 
+ 	printf("%-30s: %'16lu   [ %'16"PRIu64" KB ]\n", "Total allocation failures",
+ 	       nr_page_fails, total_page_fail_bytes / 1024);
+ 	printf("\n");
+ 
+ 	printf("%5s  %12s  %12s  %12s  %12s  %12s\n", "Order",  "Unmovable",
+ 	       "Reclaimable", "Movable", "Reserved", "CMA/Isolated");
+ 	printf("%.5s  %.12s  %.12s  %.12s  %.12s  %.12s\n", graph_dotted_line,
+ 	       graph_dotted_line, graph_dotted_line, graph_dotted_line,
+ 	       graph_dotted_line, graph_dotted_line);
+ 
+ 	for (o = 0; o < MAX_PAGE_ORDER; o++) {
+ 		printf("%5d", o);
+ 		for (m = 0; m < MAX_MIGRATE_TYPES - 1; m++) {
+ 			if (order_stats[o][m])
+ 				printf("  %'12d", order_stats[o][m]);
+ 			else
+ 				printf("  %12c", '.');
+ 		}
+ 		printf("\n");
+ 	}
+ }
+ 
+ static void print_slab_result(struct perf_session *session)
+ {
+ 	if (caller_flag)
+ 		__print_slab_result(&root_caller_sorted, session, caller_lines, 1);
+ 	if (alloc_flag)
+ 		__print_slab_result(&root_alloc_sorted, session, alloc_lines, 0);
+ 	print_slab_summary();
+ }
+ 
+ static void print_page_result(struct perf_session *session)
+ {
+ 	if (alloc_flag)
+ 		__print_page_result(&page_alloc_sorted, session, alloc_lines);
+ 	print_page_summary();
+ }
+ 
++>>>>>>> 6145c259cd45 (perf kmem: Consistently use PRIu64 for printing u64 values)
  static void print_result(struct perf_session *session)
  {
 -	if (kmem_slab)
 -		print_slab_result(session);
 -	if (kmem_page)
 -		print_page_result(session);
 +	if (caller_flag)
 +		__print_result(&root_caller_sorted, session, caller_lines, 1);
 +	if (alloc_flag)
 +		__print_result(&root_alloc_sorted, session, alloc_lines, 0);
 +	print_summary();
  }
  
  struct sort_dimension {
* Unmerged path tools/perf/builtin-kmem.c
