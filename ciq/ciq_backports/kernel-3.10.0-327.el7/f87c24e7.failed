Revert "Bluetooth: Move rfcomm_get_device() before rfcomm_dev_activate()"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Peter Hurley <peter@hurleysoftware.com>
commit f87c24e74e88d767e7024c4464d0d1fb3642fb5e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/f87c24e7.failed

This reverts commit e228b63390536f5b737056059a9a04ea016b1abf.

This is the third of a 3-patch revert, together with
Revert "Bluetooth: Remove rfcomm_carrier_raised()" and
Revert "Bluetooth: Always wait for a connection on RFCOMM open()".

Commit 4a2fb3ecc7467c775b154813861f25a0ddc11aa0,
"Bluetooth: Always wait for a connection on RFCOMM open()" open-codes
blocking on tty open(), rather than using the default behavior
implemented by the tty port.

The reasons for reverting that patch are detailed in that changelog;
this patch restores required functionality for that revert.

	Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
Tested-By: Alexander Holler <holler@ahsoftware.de>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit f87c24e74e88d767e7024c4464d0d1fb3642fb5e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/rfcomm/tty.c
diff --cc net/bluetooth/rfcomm/tty.c
index 62bd75eda078,a535ef148ef6..000000000000
--- a/net/bluetooth/rfcomm/tty.c
+++ b/net/bluetooth/rfcomm/tty.c
@@@ -104,8 -103,39 +104,39 @@@ static void rfcomm_dev_destruct(struct 
  	module_put(THIS_MODULE);
  }
  
++<<<<<<< HEAD
++=======
+ /* device-specific initialization: open the dlc */
+ static int rfcomm_dev_activate(struct tty_port *port, struct tty_struct *tty)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	return rfcomm_dlc_open(dev->dlc, &dev->src, &dev->dst, dev->channel);
+ }
+ 
+ /* we block the open until the dlc->state becomes BT_CONNECTED */
+ static int rfcomm_dev_carrier_raised(struct tty_port *port)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	return (dev->dlc->state == BT_CONNECTED);
+ }
+ 
+ /* device-specific cleanup: close the dlc */
+ static void rfcomm_dev_shutdown(struct tty_port *port)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	if (dev->tty_dev->parent)
+ 		device_move(dev->tty_dev, NULL, DPM_ORDER_DEV_LAST);
+ 
+ 	/* close the dlc */
+ 	rfcomm_dlc_close(dev->dlc, 0);
+ }
+ 
++>>>>>>> f87c24e74e88 (Revert "Bluetooth: Move rfcomm_get_device() before rfcomm_dev_activate()")
  static const struct tty_port_operations rfcomm_port_ops = {
  	.destruct = rfcomm_dev_destruct,
 -	.activate = rfcomm_dev_activate,
 -	.shutdown = rfcomm_dev_shutdown,
 -	.carrier_raised = rfcomm_dev_carrier_raised,
  };
  
  static struct rfcomm_dev *__rfcomm_dev_get(int id)
* Unmerged path net/bluetooth/rfcomm/tty.c
