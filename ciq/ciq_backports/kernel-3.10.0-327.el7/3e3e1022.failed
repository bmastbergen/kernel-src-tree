hwmon: (k10temp) Convert to devm_hwmon_device_register_with_groups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [hwmon] k10temp: Convert to devm_hwmon_device_register_with_groups (Jarod Wilson) [1135029]
Rebuild_FUZZ: 91.94%
commit-author Guenter Roeck <linux@roeck-us.net>
commit 3e3e102251a7e3a535087e0acdc6010c6acf1474
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3e3e1022.failed

Use devm_hwmon_device_register_with_groups() to simplify the code
and reduce code size.

	Cc: Clemens Ladisch <clemens@ladisch.de>
	Tested-by: Clemens Ladisch <clemens@ladisch.de>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
(cherry picked from commit 3e3e102251a7e3a535087e0acdc6010c6acf1474)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hwmon/k10temp.c
diff --cc drivers/hwmon/k10temp.c
index d6339b018769,1e7bdcdcb295..000000000000
--- a/drivers/hwmon/k10temp.c
+++ b/drivers/hwmon/k10temp.c
@@@ -55,9 -77,15 +55,13 @@@ static ssize_t show_temp(struct device 
  			 struct device_attribute *attr, char *buf)
  {
  	u32 regval;
++<<<<<<< HEAD
++=======
+ 	struct pci_dev *pdev = dev_get_drvdata(dev);
++>>>>>>> 3e3e102251a7 (hwmon: (k10temp) Convert to devm_hwmon_device_register_with_groups)
  
 -	if (boot_cpu_data.x86 == 0x15 && boot_cpu_data.x86_model == 0x60) {
 -		amd_nb_smu_index_read(pdev, PCI_DEVFN(0, 0),
 -				      F15H_M60H_REPORTED_TEMP_CTRL_OFFSET,
 -				      &regval);
 -	} else {
 -		pci_read_config_dword(pdev, REG_REPORTED_TEMPERATURE, &regval);
 -	}
 +	pci_read_config_dword(to_pci_dev(dev),
 +			      REG_REPORTED_TEMPERATURE, &regval);
  	return sprintf(buf, "%u\n", (regval >> 21) * 125);
  }
  
@@@ -132,79 -186,26 +162,26 @@@ static bool has_erratum_319(struct pci_
  static int k10temp_probe(struct pci_dev *pdev,
  				   const struct pci_device_id *id)
  {
- 	struct device *hwmon_dev;
- 	u32 reg_caps, reg_htc;
  	int unreliable = has_erratum_319(pdev);
- 	int err;
- 
- 	if (unreliable && !force) {
- 		dev_err(&pdev->dev,
- 			"unreliable CPU thermal sensor; monitoring disabled\n");
- 		err = -ENODEV;
- 		goto exit;
- 	}
- 
- 	err = device_create_file(&pdev->dev, &dev_attr_temp1_input);
- 	if (err)
- 		goto exit;
- 	err = device_create_file(&pdev->dev, &dev_attr_temp1_max);
- 	if (err)
- 		goto exit_remove;
- 
- 	pci_read_config_dword(pdev, REG_NORTHBRIDGE_CAPABILITIES, &reg_caps);
- 	pci_read_config_dword(pdev, REG_HARDWARE_THERMAL_CONTROL, &reg_htc);
- 	if ((reg_caps & NB_CAP_HTC) && (reg_htc & HTC_ENABLE)) {
- 		err = device_create_file(&pdev->dev,
- 				&sensor_dev_attr_temp1_crit.dev_attr);
- 		if (err)
- 			goto exit_remove;
- 		err = device_create_file(&pdev->dev,
- 				&sensor_dev_attr_temp1_crit_hyst.dev_attr);
- 		if (err)
- 			goto exit_remove;
- 	}
- 
- 	err = device_create_file(&pdev->dev, &dev_attr_name);
- 	if (err)
- 		goto exit_remove;
- 
- 	hwmon_dev = hwmon_device_register(&pdev->dev);
- 	if (IS_ERR(hwmon_dev)) {
- 		err = PTR_ERR(hwmon_dev);
- 		goto exit_remove;
- 	}
- 	pci_set_drvdata(pdev, hwmon_dev);
+ 	struct device *dev = &pdev->dev;
+ 	struct device *hwmon_dev;
  
- 	if (unreliable && force)
- 		dev_warn(&pdev->dev,
+ 	if (unreliable) {
+ 		if (!force) {
+ 			dev_err(dev,
+ 				"unreliable CPU thermal sensor; monitoring disabled\n");
+ 			return -ENODEV;
+ 		}
+ 		dev_warn(dev,
  			 "unreliable CPU thermal sensor; check erratum 319\n");
- 	return 0;
- 
- exit_remove:
- 	device_remove_file(&pdev->dev, &dev_attr_name);
- 	device_remove_file(&pdev->dev, &dev_attr_temp1_input);
- 	device_remove_file(&pdev->dev, &dev_attr_temp1_max);
- 	device_remove_file(&pdev->dev,
- 			   &sensor_dev_attr_temp1_crit.dev_attr);
- 	device_remove_file(&pdev->dev,
- 			   &sensor_dev_attr_temp1_crit_hyst.dev_attr);
- exit:
- 	return err;
- }
+ 	}
  
- static void k10temp_remove(struct pci_dev *pdev)
- {
- 	hwmon_device_unregister(pci_get_drvdata(pdev));
- 	device_remove_file(&pdev->dev, &dev_attr_name);
- 	device_remove_file(&pdev->dev, &dev_attr_temp1_input);
- 	device_remove_file(&pdev->dev, &dev_attr_temp1_max);
- 	device_remove_file(&pdev->dev,
- 			   &sensor_dev_attr_temp1_crit.dev_attr);
- 	device_remove_file(&pdev->dev,
- 			   &sensor_dev_attr_temp1_crit_hyst.dev_attr);
+ 	hwmon_dev = devm_hwmon_device_register_with_groups(dev, "k10temp", pdev,
+ 							   k10temp_groups);
+ 	return PTR_ERR_OR_ZERO(hwmon_dev);
  }
  
 -static const struct pci_device_id k10temp_id_table[] = {
 +static DEFINE_PCI_DEVICE_TABLE(k10temp_id_table) = {
  	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_10H_NB_MISC) },
  	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_11H_NB_MISC) },
  	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_CNB17H_F3) },
* Unmerged path drivers/hwmon/k10temp.c
