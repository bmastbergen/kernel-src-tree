bonding: make IS_IP_TARGET_UNUSABLE_ADDRESS an inline function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Veaceslav Falico <vfalico@gmail.com>
commit 2807a9feb2393648f4db114fdf3fa99860ff6a36
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2807a9fe.failed

Also, use standard IP primitives to check the address.

CC: Jay Vosburgh <j.vosburgh@gmail.com>
CC: Andy Gospodarek <andy@greyhouse.net>
	Signed-off-by: Veaceslav Falico <vfalico@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2807a9feb2393648f4db114fdf3fa99860ff6a36)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_main.c
index d0eec7c786f0,1af2be53ebb5..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -4534,9 -4195,9 +4534,15 @@@ static int bond_check_params(struct bon
  		   catch mistakes */
  		__be32 ip;
  		if (!in4_pton(arp_ip_target[i], -1, (u8 *)&ip, -1, NULL) ||
++<<<<<<< HEAD
 +		    IS_IP_TARGET_UNUSABLE_ADDRESS(ip)) {
 +			pr_warning("Warning: bad arp_ip_target module parameter (%s), ARP monitoring will not be performed\n",
 +				   arp_ip_target[i]);
++=======
+ 		    !bond_is_ip_target_ok(ip)) {
+ 			pr_warn("Warning: bad arp_ip_target module parameter (%s), ARP monitoring will not be performed\n",
+ 				arp_ip_target[i]);
++>>>>>>> 2807a9feb239 (bonding: make IS_IP_TARGET_UNUSABLE_ADDRESS an inline function)
  			arp_interval = 0;
  		} else {
  			if (bond_get_targets_ip(arp_target, ip) == -1)
diff --cc drivers/net/bonding/bonding.h
index e1ca02f0b074,ac75b0fbf768..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -49,15 -54,6 +49,18 @@@
  		     ((slave)->link == BOND_LINK_UP) && \
  		     bond_is_active_slave(slave))
  
++<<<<<<< HEAD
 +
 +#define USES_PRIMARY(mode)				\
 +		(((mode) == BOND_MODE_ACTIVEBACKUP) ||	\
 +		 ((mode) == BOND_MODE_TLB)          ||	\
 +		 ((mode) == BOND_MODE_ALB))
 +
 +#define TX_QUEUE_OVERRIDE(mode)				\
 +			(((mode) == BOND_MODE_ACTIVEBACKUP) ||	\
 +			 ((mode) == BOND_MODE_ROUNDROBIN))
++=======
++>>>>>>> 2807a9feb239 (bonding: make IS_IP_TARGET_UNUSABLE_ADDRESS an inline function)
  /*
   * Less bad way to call ioctl from within the kernel; this needs to be
   * done some other way to get the call out of interrupt context.
@@@ -334,6 -398,16 +337,19 @@@ static inline int slave_do_arp_validate
  	return bond->params.arp_validate & (1 << bond_slave_state(slave));
  }
  
++<<<<<<< HEAD
++=======
+ static inline int slave_do_arp_validate_only(struct bonding *bond)
+ {
+ 	return bond->params.arp_validate & BOND_ARP_FILTER;
+ }
+ 
+ static inline int bond_is_ip_target_ok(__be32 addr)
+ {
+ 	return !ipv4_is_lbcast(addr) && !ipv4_is_zeronet(addr);
+ }
+ 
++>>>>>>> 2807a9feb239 (bonding: make IS_IP_TARGET_UNUSABLE_ADDRESS an inline function)
  /* Get the oldest arp which we've received on this slave for bond's
   * arp_targets.
   */
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_main.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bonding.h
