net: Have xmit_list() signal more==true when appropriate.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] Have xmit_list() signal more==true when appropriate (Alexander Duyck) [1205266]
Rebuild_FUZZ: 94.44%
commit-author David S. Miller <davem@davemloft.net>
commit 95f6b3dda2a4a052f7dabe9998e4ffac491b7bc2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/95f6b3dd.failed

	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 95f6b3dda2a4a052f7dabe9998e4ffac491b7bc2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 1924c9647d47,6d82194e414b..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -2485,6 -2599,51 +2485,54 @@@ netdev_features_t netif_skb_features(st
  }
  EXPORT_SYMBOL(netif_skb_features);
  
++<<<<<<< HEAD
++=======
+ static int xmit_one(struct sk_buff *skb, struct net_device *dev,
+ 		    struct netdev_queue *txq, bool more)
+ {
+ 	unsigned int len;
+ 	int rc;
+ 
+ 	if (!list_empty(&ptype_all))
+ 		dev_queue_xmit_nit(skb, dev);
+ 
+ 	len = skb->len;
+ 	trace_net_dev_start_xmit(skb, dev);
+ 	rc = netdev_start_xmit(skb, dev, txq, more);
+ 	trace_net_dev_xmit(skb, rc, dev, len);
+ 
+ 	return rc;
+ }
+ 
+ static struct sk_buff *xmit_list(struct sk_buff *first, struct net_device *dev,
+ 				 struct netdev_queue *txq, int *ret)
+ {
+ 	struct sk_buff *skb = first;
+ 	int rc = NETDEV_TX_OK;
+ 
+ 	while (skb) {
+ 		struct sk_buff *next = skb->next;
+ 
+ 		skb->next = NULL;
+ 		rc = xmit_one(skb, dev, txq, next != NULL);
+ 		if (unlikely(!dev_xmit_complete(rc))) {
+ 			skb->next = next;
+ 			goto out;
+ 		}
+ 
+ 		skb = next;
+ 		if (netif_xmit_stopped(txq) && skb) {
+ 			rc = NETDEV_TX_BUSY;
+ 			break;
+ 		}
+ 	}
+ 
+ out:
+ 	*ret = rc;
+ 	return skb;
+ }
+ 
++>>>>>>> 95f6b3dda2a4 (net: Have xmit_list() signal more==true when appropriate.)
  int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
  			struct netdev_queue *txq)
  {
@@@ -2548,15 -2705,7 +2596,19 @@@
  			}
  		}
  
++<<<<<<< HEAD
 +		if (!list_empty(&ptype_all))
 +			dev_queue_xmit_nit(skb, dev);
 +
 +		skb_len = skb->len;
 +		rc = ops->ndo_start_xmit(skb, dev);
 +		trace_net_dev_xmit(skb, rc, dev, skb_len);
 +		if (rc == NETDEV_TX_OK)
 +			txq_trans_update(txq);
 +		return rc;
++=======
+ 		return xmit_one(skb, dev, txq, false);
++>>>>>>> 95f6b3dda2a4 (net: Have xmit_list() signal more==true when appropriate.)
  	}
  
  gso:
* Unmerged path net/core/dev.c
