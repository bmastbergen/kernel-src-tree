intel_pstate: Add num_pstates to sysfs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Kristen Carlson Accardi <kristen@linux.intel.com>
commit 0522424ecb333c0874c4e74bc053dd662bed40df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/0522424e.failed

Add a sysfs interface to display the total number of supported
pstates.  This value is independent of whether turbo has been
enabled or disabled.

	Signed-off-by: Kristen Carlson Accardi <kristen@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 0522424ecb333c0874c4e74bc053dd662bed40df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/cpu-freq/intel-pstate.txt
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index f94b3dfc5690,80ecc351d613..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -307,6 -338,33 +307,36 @@@ static void __init intel_pstate_debug_e
  		return sprintf(buf, "%u\n", limits.object);		\
  	}
  
++<<<<<<< HEAD
++=======
+ static ssize_t show_turbo_pct(struct kobject *kobj,
+ 				struct attribute *attr, char *buf)
+ {
+ 	struct cpudata *cpu;
+ 	int total, no_turbo, turbo_pct;
+ 	uint32_t turbo_fp;
+ 
+ 	cpu = all_cpu_data[0];
+ 
+ 	total = cpu->pstate.turbo_pstate - cpu->pstate.min_pstate + 1;
+ 	no_turbo = cpu->pstate.max_pstate - cpu->pstate.min_pstate + 1;
+ 	turbo_fp = div_fp(int_tofp(no_turbo), int_tofp(total));
+ 	turbo_pct = 100 - fp_toint(mul_fp(turbo_fp, int_tofp(100)));
+ 	return sprintf(buf, "%u\n", turbo_pct);
+ }
+ 
+ static ssize_t show_num_pstates(struct kobject *kobj,
+ 				struct attribute *attr, char *buf)
+ {
+ 	struct cpudata *cpu;
+ 	int total;
+ 
+ 	cpu = all_cpu_data[0];
+ 	total = cpu->pstate.turbo_pstate - cpu->pstate.min_pstate + 1;
+ 	return sprintf(buf, "%u\n", total);
+ }
+ 
++>>>>>>> 0522424ecb33 (intel_pstate: Add num_pstates to sysfs)
  static ssize_t show_no_turbo(struct kobject *kobj,
  			     struct attribute *attr, char *buf)
  {
@@@ -379,11 -445,15 +409,21 @@@ show_one(min_perf_pct, min_perf_pct)
  define_one_global_rw(no_turbo);
  define_one_global_rw(max_perf_pct);
  define_one_global_rw(min_perf_pct);
++<<<<<<< HEAD
++=======
+ define_one_global_ro(turbo_pct);
+ define_one_global_ro(num_pstates);
++>>>>>>> 0522424ecb33 (intel_pstate: Add num_pstates to sysfs)
  
  static struct attribute *intel_pstate_attributes[] = {
  	&no_turbo.attr,
  	&max_perf_pct.attr,
  	&min_perf_pct.attr,
++<<<<<<< HEAD
++=======
+ 	&turbo_pct.attr,
+ 	&num_pstates.attr,
++>>>>>>> 0522424ecb33 (intel_pstate: Add num_pstates to sysfs)
  	NULL
  };
  
* Unmerged path Documentation/cpu-freq/intel-pstate.txt
* Unmerged path Documentation/cpu-freq/intel-pstate.txt
* Unmerged path drivers/cpufreq/intel_pstate.c
