IB/iser: Add/Fix kernel doc style descriptions in iscsi_iser.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [infiniband] iser: Add/Fix kernel doc style descriptions in iscsi_iser.h (Amir Vadai) [1164539]
Rebuild_FUZZ: 97.52%
commit-author Sagi Grimberg <sagig@mellanox.com>
commit cd88621a9e91ee791dee321cb81a45cb357855ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/cd88621a.failed

- iser_hdr
- iser_data_buf
- iser_mem_reg
- iser_regd_buf
- iser_tx_desc
- iser_rx_desc
- iser_device
- iser_pi_context
- iser_conn
- ib_conn
- iser_comp
- iscsi_iser_task
- iser_global

While we're at it, change nit alignments in this file

This patch does not change any functionality.

	Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit cd88621a9e91ee791dee321cb81a45cb357855ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/iser/iscsi_iser.h
diff --cc drivers/infiniband/ulp/iser/iscsi_iser.h
index 7d776c7b654c,5250a125b79e..000000000000
--- a/drivers/infiniband/ulp/iser/iscsi_iser.h
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.h
@@@ -150,7 -152,18 +150,17 @@@
  #define ISER_RSV			0x04
  
  #define ISER_FASTREG_LI_WRID		0xffffffffffffffffULL
 -#define ISER_BEACON_WRID		0xfffffffffffffffeULL
  
+ /**
+  * struct iser_hdr - iSER header
+  *
+  * @flags:        flags support (zbva, remote_inv)
+  * @rsvd:         reserved
+  * @write_stag:   write rkey
+  * @write_va:     write virtual address
+  * @reaf_stag:    read rkey
+  * @read_va:      read virtual address
+  */
  struct iser_hdr {
  	u8      flags;
  	u8      rsvd[3];
@@@ -265,25 -326,59 +324,65 @@@ struct iser_rx_desc 
  #define ISER_MAX_CQ 4
  
  struct iser_conn;
 -struct ib_conn;
  struct iscsi_iser_task;
  
++<<<<<<< HEAD
++=======
+ /**
+  * struct iser_comp - iSER completion context
+  *
+  * @device:     pointer to device handle
+  * @cq:         completion queue
+  * @wcs:        work completion array
+  * @tasklet:    Tasklet handle
+  * @active_qps: Number of active QPs attached
+  *              to completion context
+  */
+ struct iser_comp {
+ 	struct iser_device      *device;
+ 	struct ib_cq		*cq;
+ 	struct ib_wc		 wcs[ISER_WC_BATCH_COUNT];
+ 	struct tasklet_struct	 tasklet;
+ 	int                      active_qps;
+ };
+ 
+ /**
+  * struct iser_device - iSER device handle
+  *
+  * @ib_device:     RDMA device
+  * @pd:            Protection Domain for this device
+  * @dev_attr:      Device attributes container
+  * @mr:            Global DMA memory region
+  * @event_handler: IB events handle routine
+  * @ig_list:	   entry in devices list
+  * @refcount:      Reference counter, dominated by open iser connections
+  * @comps_used:    Number of completion contexts used, Min between online
+  *                 cpus and device max completion vectors
+  * @comps:         Dinamically allocated array of completion handlers
+  * Memory registration pool Function pointers (FMR or Fastreg):
+  *     @iser_alloc_rdma_reg_res: Allocation of memory regions pool
+  *     @iser_free_rdma_reg_res:  Free of memory regions pool
+  *     @iser_reg_rdma_mem:       Memory registration routine
+  *     @iser_unreg_rdma_mem:     Memory deregistration routine
+  */
++>>>>>>> cd88621a9e91 (IB/iser: Add/Fix kernel doc style descriptions in iscsi_iser.h)
  struct iser_device {
  	struct ib_device             *ib_device;
  	struct ib_pd	             *pd;
  	struct ib_device_attr	     dev_attr;
 +	struct ib_cq	             *rx_cq[ISER_MAX_CQ];
 +	struct ib_cq	             *tx_cq[ISER_MAX_CQ];
  	struct ib_mr	             *mr;
 +	struct tasklet_struct	     cq_tasklet[ISER_MAX_CQ];
  	struct ib_event_handler      event_handler;
- 	struct list_head             ig_list; /* entry in ig devices list */
+ 	struct list_head             ig_list;
  	int                          refcount;
 -	int			     comps_used;
 -	struct iser_comp	     comps[ISER_MAX_CQ];
 -	int                          (*iser_alloc_rdma_reg_res)(struct ib_conn *ib_conn,
 +	int                          cq_active_qps[ISER_MAX_CQ];
 +	int			     cqs_used;
 +	struct iser_cq_desc	     *cq_desc;
 +	int                          (*iser_alloc_rdma_reg_res)(struct iser_conn *ib_conn,
  								unsigned cmds_max);
 -	void                         (*iser_free_rdma_reg_res)(struct ib_conn *ib_conn);
 +	void                         (*iser_free_rdma_reg_res)(struct iser_conn *ib_conn);
  	int                          (*iser_reg_rdma_mem)(struct iscsi_iser_task *iser_task,
  							  enum iser_data_dir cmd_dir);
  	void                         (*iser_unreg_rdma_mem)(struct iscsi_iser_task *iser_task,
@@@ -316,63 -426,130 +430,160 @@@ struct fast_reg_descriptor 
  	u8				  reg_indicators;
  };
  
++<<<<<<< HEAD
++=======
+ /**
+  * struct ib_conn - Infiniband related objects
+  *
+  * @cma_id:              rdma_cm connection maneger handle
+  * @qp:                  Connection Queue-pair
+  * @post_recv_buf_count: post receive counter
+  * @rx_wr:               receive work request for batch posts
+  * @device:              reference to iser device
+  * @comp:                iser completion context
+  * @pi_support:          Indicate device T10-PI support
+  * @beacon:              beacon send wr to signal all flush errors were drained
+  * @flush_comp:          completes when all connection completions consumed
+  * @lock:                protects fmr/fastreg pool
+  * @union.fmr:
+  *     @pool:            FMR pool for fast registrations
+  *     @page_vec:        page vector to hold mapped commands pages
+  *                       used for registration
+  * @union.fastreg:
+  *     @pool:            Fast registration descriptors pool for fast
+  *                       registrations
+  *     @pool_size:       Size of pool
+  */
+ struct ib_conn {
+ 	struct rdma_cm_id           *cma_id;
+ 	struct ib_qp	            *qp;
+ 	int                          post_recv_buf_count;
+ 	struct ib_recv_wr	     rx_wr[ISER_MIN_POSTED_RX];
+ 	struct iser_device          *device;
+ 	struct iser_comp	    *comp;
+ 	bool			     pi_support;
+ 	struct ib_send_wr	     beacon;
+ 	struct completion	     flush_comp;
+ 	spinlock_t		     lock;
+ 	union {
+ 		struct {
+ 			struct ib_fmr_pool      *pool;
+ 			struct iser_page_vec	*page_vec;
+ 		} fmr;
+ 		struct {
+ 			struct list_head	 pool;
+ 			int			 pool_size;
+ 		} fastreg;
+ 	};
+ };
+ 
+ /**
+  * struct iser_conn - iSER connection context
+  *
+  * @ib_conn:          connection RDMA resources
+  * @iscsi_conn:       link to matching iscsi connection
+  * @ep:               transport handle
+  * @state:            connection logical state
+  * @qp_max_recv_dtos: maximum number of data outs, corresponds
+  *                    to max number of post recvs
+  * @qp_max_recv_dtos_mask: (qp_max_recv_dtos - 1)
+  * @min_posted_rx:    (qp_max_recv_dtos >> 2)
+  * @name:             connection peer portal
+  * @release_work:     deffered work for release job
+  * @state_mutex:      protects iser onnection state
+  * @stop_completion:  conn_stop completion
+  * @ib_completion:    RDMA cleanup completion
+  * @up_completion:    connection establishment completed
+  *                    (state is ISER_CONN_UP)
+  * @conn_list:        entry in ig conn list
+  * @login_buf:        login data buffer (stores login parameters)
+  * @login_req_buf:    login request buffer
+  * @login_req_dma:    login request buffer dma address
+  * @login_resp_buf:   login response buffer
+  * @login_resp_dma:   login response buffer dma address
+  * @rx_desc_head:     head of rx_descs cyclic buffer
+  * @rx_descs:         rx buffers array (cyclic buffer)
+  * @num_rx_descs:     number of rx descriptors
+  */
++>>>>>>> cd88621a9e91 (IB/iser: Add/Fix kernel doc style descriptions in iscsi_iser.h)
  struct iser_conn {
 -	struct ib_conn		     ib_conn;
  	struct iscsi_conn	     *iscsi_conn;
  	struct iscsi_endpoint	     *ep;
++<<<<<<< HEAD
 +	enum iser_ib_conn_state	     state;	    /* rdma connection state   */
 +	atomic_t		     refcount;
 +	spinlock_t		     lock;	    /* used for state changes  */
 +	struct iser_device           *device;       /* device context          */
 +	struct rdma_cm_id            *cma_id;       /* CMA ID		       */
 +	struct ib_qp	             *qp;           /* QP 		       */
 +	unsigned		     qp_max_recv_dtos; /* num of rx buffers */
 +	unsigned		     qp_max_recv_dtos_mask; /* above minus 1 */
 +	unsigned		     min_posted_rx; /* qp_max_recv_dtos >> 2 */
 +	int                          post_recv_buf_count; /* posted rx count  */
 +	atomic_t                     post_send_buf_count; /* posted tx count   */
++=======
+ 	enum iser_conn_state	     state;
+ 	unsigned		     qp_max_recv_dtos;
+ 	unsigned		     qp_max_recv_dtos_mask;
+ 	unsigned		     min_posted_rx;
++>>>>>>> cd88621a9e91 (IB/iser: Add/Fix kernel doc style descriptions in iscsi_iser.h)
  	char 			     name[ISER_OBJECT_NAME_SIZE];
  	struct work_struct	     release_work;
 -	struct mutex		     state_mutex;
  	struct completion	     stop_completion;
 -	struct completion	     ib_completion;
 +	struct mutex		     state_mutex;
 +	struct completion	     flush_completion;
  	struct completion	     up_completion;
- 	struct list_head	     conn_list;       /* entry in ig conn list */
+ 	struct list_head	     conn_list;
  
  	char  			     *login_buf;
  	char			     *login_req_buf, *login_resp_buf;
  	u64			     login_req_dma, login_resp_dma;
  	unsigned int 		     rx_desc_head;
  	struct iser_rx_desc	     *rx_descs;
 -	u32                          num_rx_descs;
 +	struct ib_recv_wr	     rx_wr[ISER_MIN_POSTED_RX];
 +	bool			     pi_support;
 +
 +	/* Connection memory registration pool */
 +	union {
 +		struct {
 +			struct ib_fmr_pool      *pool;	   /* pool of IB FMRs         */
 +			struct iser_page_vec	*page_vec; /* represents SG to fmr maps*
 +							    * maps serialized as tx is*/
 +		} fmr;
 +		struct {
 +			struct list_head	pool;
 +			int			pool_size;
 +		} fastreg;
 +	};
  };
  
+ /**
+  * struct iscsi_iser_task - iser task context
+  *
+  * @desc:     TX descriptor
+  * @iser_conn:        link to iser connection
+  * @status:           current task status
+  * @sc:               link to scsi command
+  * @command_sent:     indicate if command was sent
+  * @dir:              iser data direction
+  * @rdma_regd:        task rdma registration desc
+  * @data:             iser data buffer desc
+  * @data_copy:        iser data copy buffer desc (bounce buffer)
+  * @prot:             iser protection buffer desc
+  * @prot_copy:        iser protection copy buffer desc (bounce buffer)
+  */
  struct iscsi_iser_task {
  	struct iser_tx_desc          desc;
 -	struct iser_conn	     *iser_conn;
 +	struct iser_conn	     *ib_conn;
  	enum iser_task_status 	     status;
  	struct scsi_cmnd	     *sc;
- 	int                          command_sent;  /* set if command  sent  */
- 	int                          dir[ISER_DIRS_NUM];      /* set if dir use*/
- 	struct iser_regd_buf         rdma_regd[ISER_DIRS_NUM];/* regd rdma buf */
- 	struct iser_data_buf         data[ISER_DIRS_NUM];     /* orig. data des*/
- 	struct iser_data_buf         data_copy[ISER_DIRS_NUM];/* contig. copy  */
- 	struct iser_data_buf         prot[ISER_DIRS_NUM];     /* prot desc     */
- 	struct iser_data_buf         prot_copy[ISER_DIRS_NUM];/* prot copy     */
+ 	int                          command_sent;
+ 	int                          dir[ISER_DIRS_NUM];
+ 	struct iser_regd_buf         rdma_regd[ISER_DIRS_NUM];
+ 	struct iser_data_buf         data[ISER_DIRS_NUM];
+ 	struct iser_data_buf         data_copy[ISER_DIRS_NUM];
+ 	struct iser_data_buf         prot[ISER_DIRS_NUM];
+ 	struct iser_data_buf         prot_copy[ISER_DIRS_NUM];
  };
  
  struct iser_page_vec {
@@@ -382,17 -559,20 +593,28 @@@
  	int data_size;
  };
  
++<<<<<<< HEAD
 +struct iser_cq_desc {
 +	struct iser_device           *device;
 +	int                          cq_index;
 +};
 +
++=======
+ /**
+  * struct iser_global: iSER global context
+  *
+  * @device_list_mutex:    protects device_list
+  * @device_list:          iser devices global list
+  * @connlist_mutex:       protects connlist
+  * @connlist:             iser connections global list
+  * @desc_cache:           kmem cache for tx dataout
+  */
++>>>>>>> cd88621a9e91 (IB/iser: Add/Fix kernel doc style descriptions in iscsi_iser.h)
  struct iser_global {
- 	struct mutex      device_list_mutex;/*                   */
- 	struct list_head  device_list;	     /* all iSER devices */
+ 	struct mutex      device_list_mutex;
+ 	struct list_head  device_list;
  	struct mutex      connlist_mutex;
- 	struct list_head  connlist;		/* all iSER IB connections */
- 
+ 	struct list_head  connlist;
  	struct kmem_cache *desc_cache;
  };
  
@@@ -415,23 -592,24 +637,28 @@@ int iser_send_data_out(struct iscsi_con
  		       struct iscsi_data *hdr);
  
  void iscsi_iser_recv(struct iscsi_conn *conn,
- 		     struct iscsi_hdr       *hdr,
- 		     char                   *rx_data,
- 		     int                    rx_data_len);
+ 		     struct iscsi_hdr *hdr,
+ 		     char *rx_data,
+ 		     int rx_data_len);
  
 -void iser_conn_init(struct iser_conn *iser_conn);
 +void iser_conn_init(struct iser_conn *ib_conn);
  
 -void iser_conn_release(struct iser_conn *iser_conn);
 +void iser_conn_release(struct iser_conn *ib_conn);
  
 -int iser_conn_terminate(struct iser_conn *iser_conn);
 +void iser_conn_terminate(struct iser_conn *ib_conn);
  
  void iser_release_work(struct work_struct *work);
  
  void iser_rcv_completion(struct iser_rx_desc *desc,
++<<<<<<< HEAD
 +			 unsigned long    dto_xfer_len,
 +			struct iser_conn *ib_conn);
++=======
+ 			 unsigned long dto_xfer_len,
+ 			 struct ib_conn *ib_conn);
++>>>>>>> cd88621a9e91 (IB/iser: Add/Fix kernel doc style descriptions in iscsi_iser.h)
  
 -void iser_snd_completion(struct iser_tx_desc *desc,
 -			 struct ib_conn *ib_conn);
 +void iser_snd_completion(struct iser_tx_desc *desc, struct iser_conn *ib_conn);
  
  void iser_task_rdma_init(struct iscsi_iser_task *task);
  
@@@ -449,28 -627,29 +676,35 @@@ int  iser_reg_rdma_mem_fmr(struct iscsi
  int  iser_reg_rdma_mem_fastreg(struct iscsi_iser_task *task,
  			       enum iser_data_dir cmd_dir);
  
++<<<<<<< HEAD
 +int  iser_connect(struct iser_conn   *ib_conn,
 +		  struct sockaddr    *src_addr,
 +		  struct sockaddr    *dst_addr,
 +		  int                non_blocking);
++=======
+ int  iser_connect(struct iser_conn *iser_conn,
+ 		  struct sockaddr *src_addr,
+ 		  struct sockaddr *dst_addr,
+ 		  int non_blocking);
++>>>>>>> cd88621a9e91 (IB/iser: Add/Fix kernel doc style descriptions in iscsi_iser.h)
  
 -int  iser_reg_page_vec(struct ib_conn *ib_conn,
 +int  iser_reg_page_vec(struct iser_conn     *ib_conn,
  		       struct iser_page_vec *page_vec,
- 		       struct iser_mem_reg  *mem_reg);
+ 		       struct iser_mem_reg *mem_reg);
  
  void iser_unreg_mem_fmr(struct iscsi_iser_task *iser_task,
  			enum iser_data_dir cmd_dir);
  void iser_unreg_mem_fastreg(struct iscsi_iser_task *iser_task,
  			    enum iser_data_dir cmd_dir);
  
 -int  iser_post_recvl(struct iser_conn *iser_conn);
 -int  iser_post_recvm(struct iser_conn *iser_conn, int count);
 -int  iser_post_send(struct ib_conn *ib_conn, struct iser_tx_desc *tx_desc,
 -		    bool signal);
 +int  iser_post_recvl(struct iser_conn *ib_conn);
 +int  iser_post_recvm(struct iser_conn *ib_conn, int count);
 +int  iser_post_send(struct iser_conn *ib_conn, struct iser_tx_desc *tx_desc);
  
  int iser_dma_map_task_data(struct iscsi_iser_task *iser_task,
- 			    struct iser_data_buf       *data,
- 			    enum   iser_data_dir       iser_dir,
- 			    enum   dma_data_direction  dma_dir);
+ 			   struct iser_data_buf *data,
+ 			   enum iser_data_dir iser_dir,
+ 			   enum dma_data_direction dma_dir);
  
  void iser_dma_unmap_task_data(struct iscsi_iser_task *iser_task,
  			      struct iser_data_buf *data);
* Unmerged path drivers/infiniband/ulp/iser/iscsi_iser.h
