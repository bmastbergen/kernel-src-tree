usb: host: ehci: use new USB_RESUME_TIMEOUT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [usb] host: ehci: use new USB_RESUME_TIMEOUT (Don Zickus) [1232920]
Rebuild_FUZZ: 93.83%
commit-author Felipe Balbi <balbi@ti.com>
commit ea16328f80ca8d74434352157f37ef60e2f55ce2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ea16328f.failed

Make sure we're using the new macro, so our
resume signaling will always pass certification.

	Cc: <stable@vger.kernel.org> # v3.10+
	Signed-off-by: Felipe Balbi <balbi@ti.com>
(cherry picked from commit ea16328f80ca8d74434352157f37ef60e2f55ce2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/ehci-hcd.c
diff --cc drivers/usb/host/ehci-hcd.c
index f3dc6f0f67eb,f4d88dfb26a7..000000000000
--- a/drivers/usb/host/ehci-hcd.c
+++ b/drivers/usb/host/ehci-hcd.c
@@@ -792,12 -792,12 +792,19 @@@ static irqreturn_t ehci_irq (struct usb
  					ehci->reset_done[i] == 0))
  				continue;
  
++<<<<<<< HEAD
 +			/* start 20 msec resume signaling from this port,
 +			 * and make khubd collect PORT_STAT_C_SUSPEND to
 +			 * stop that signaling.  Use 5 ms extra for safety,
 +			 * like usb_port_resume() does.
++=======
+ 			/* start USB_RESUME_TIMEOUT msec resume signaling from
+ 			 * this port, and make hub_wq collect
+ 			 * PORT_STAT_C_SUSPEND to stop that signaling.
++>>>>>>> ea16328f80ca (usb: host: ehci: use new USB_RESUME_TIMEOUT)
  			 */
- 			ehci->reset_done[i] = jiffies + msecs_to_jiffies(25);
+ 			ehci->reset_done[i] = jiffies +
+ 				msecs_to_jiffies(USB_RESUME_TIMEOUT);
  			set_bit(i, &ehci->resuming_ports);
  			ehci_dbg (ehci, "port %d remote wakeup\n", i + 1);
  			usb_hcd_start_port_resume(&hcd->self, i);
* Unmerged path drivers/usb/host/ehci-hcd.c
diff --git a/drivers/usb/host/ehci-hub.c b/drivers/usb/host/ehci-hub.c
index bea7cfba71a0..2f7c205621f1 100644
--- a/drivers/usb/host/ehci-hub.c
+++ b/drivers/usb/host/ehci-hub.c
@@ -480,10 +480,13 @@ static int ehci_bus_resume (struct usb_hcd *hcd)
 		ehci_writel(ehci, temp, &ehci->regs->port_status [i]);
 	}
 
-	/* msleep for 20ms only if code is trying to resume port */
+	/*
+	 * msleep for USB_RESUME_TIMEOUT ms only if code is trying to resume
+	 * port
+	 */
 	if (resume_needed) {
 		spin_unlock_irq(&ehci->lock);
-		msleep(20);
+		msleep(USB_RESUME_TIMEOUT);
 		spin_lock_irq(&ehci->lock);
 		if (ehci->shutdown)
 			goto shutdown;
@@ -951,7 +954,7 @@ static int ehci_hub_control (
 			temp &= ~PORT_WAKE_BITS;
 			ehci_writel(ehci, temp | PORT_RESUME, status_reg);
 			ehci->reset_done[wIndex] = jiffies
-					+ msecs_to_jiffies(20);
+					+ msecs_to_jiffies(USB_RESUME_TIMEOUT);
 			set_bit(wIndex, &ehci->resuming_ports);
 			usb_hcd_start_port_resume(&hcd->self, wIndex);
 			break;
