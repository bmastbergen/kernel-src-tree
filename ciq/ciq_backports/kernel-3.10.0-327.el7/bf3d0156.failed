sfc: Move and rename efx_vf struct to siena_vf

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Daniel Pieczko <dpieczko@solarflare.com>
commit bf3d0156c5b7b31a74845b21d131276f9eb31493
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/bf3d0156.failed

The efx_vf struct contains Siena-specific fields for VFs,
so rename to siena_vf.
Also move it into the siena_nic_data struct, as EF10 will
track its VFs in its own ef10_nic_data, storing much less
information about them since VFDI is no longer used.

	Signed-off-by: Shradha Shah <sshah@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bf3d0156c5b7b31a74845b21d131276f9eb31493)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/siena_sriov.c
diff --cc drivers/net/ethernet/sfc/siena_sriov.c
index 2c02474c28a6,2044e929f48d..000000000000
--- a/drivers/net/ethernet/sfc/siena_sriov.c
+++ b/drivers/net/ethernet/sfc/siena_sriov.c
@@@ -1370,8 -1367,7 +1375,12 @@@ fail_cmd
  
  void efx_siena_sriov_fini(struct efx_nic *efx)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_SFC_SRIOV
 +	struct efx_vf *vf;
++=======
+ 	struct siena_vf *vf;
++>>>>>>> bf3d0156c5b7 (sfc: Move and rename efx_vf struct to siena_vf)
  	unsigned int pos;
  	struct siena_nic_data *nic_data = efx->nic_data;
  
@@@ -1398,17 -1394,15 +1407,17 @@@
  	/* Tear down back-end state */
  	efx_siena_sriov_vfs_fini(efx);
  	efx_siena_sriov_free_local(efx);
- 	kfree(efx->vf);
+ 	kfree(nic_data->vf);
  	efx_nic_free_buffer(efx, &nic_data->vfdi_status);
  	efx_siena_sriov_cmd(efx, false, NULL, NULL);
 +#endif /* CONFIG_SFC_SRIOV*/
  }
  
  void efx_siena_sriov_event(struct efx_channel *channel, efx_qword_t *event)
  {
 +#ifdef CONFIG_SFC_SRIOV
  	struct efx_nic *efx = channel->efx;
- 	struct efx_vf *vf;
+ 	struct siena_vf *vf;
  	unsigned qid, seq, type, data;
  
  	qid = EFX_QWORD_FIELD(*event, FSF_CZ_USER_QID);
@@@ -1465,8 -1458,8 +1474,13 @@@ error
  
  void efx_siena_sriov_flr(struct efx_nic *efx, unsigned vf_i)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_SFC_SRIOV
 +	struct efx_vf *vf;
++=======
+ 	struct siena_nic_data *nic_data = efx->nic_data;
+ 	struct siena_vf *vf;
++>>>>>>> bf3d0156c5b7 (sfc: Move and rename efx_vf struct to siena_vf)
  
  	if (vf_i > efx->vf_init_count)
  		return;
@@@ -1498,8 -1488,7 +1512,12 @@@ void efx_siena_sriov_mac_address_change
  
  void efx_siena_sriov_tx_flush_done(struct efx_nic *efx, efx_qword_t *event)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_SFC_SRIOV
 +	struct efx_vf *vf;
++=======
+ 	struct siena_vf *vf;
++>>>>>>> bf3d0156c5b7 (sfc: Move and rename efx_vf struct to siena_vf)
  	unsigned queue, qid;
  
  	queue = EFX_QWORD_FIELD(*event,  FSF_AZ_DRIVER_EV_SUBDATA);
@@@ -1519,8 -1507,7 +1537,12 @@@
  
  void efx_siena_sriov_rx_flush_done(struct efx_nic *efx, efx_qword_t *event)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_SFC_SRIOV
 +	struct efx_vf *vf;
++=======
+ 	struct siena_vf *vf;
++>>>>>>> bf3d0156c5b7 (sfc: Move and rename efx_vf struct to siena_vf)
  	unsigned ev_failed, queue, qid;
  
  	queue = EFX_QWORD_FIELD(*event, FSF_AZ_DRIVER_EV_RX_DESCQ_ID);
@@@ -1546,8 -1532,7 +1568,12 @@@
  /* Called from napi. Schedule the reset work item */
  void efx_siena_sriov_desc_fetch_err(struct efx_nic *efx, unsigned dmaq)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_SFC_SRIOV
 +	struct efx_vf *vf;
++=======
+ 	struct siena_vf *vf;
++>>>>>>> bf3d0156c5b7 (sfc: Move and rename efx_vf struct to siena_vf)
  	unsigned int rel;
  
  	if (map_vi_index(efx, dmaq, &vf, &rel))
@@@ -1564,10 -1548,10 +1590,14 @@@
  /* Reset all VFs */
  void efx_siena_sriov_reset(struct efx_nic *efx)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_SFC_SRIOV
++=======
+ 	struct siena_nic_data *nic_data = efx->nic_data;
++>>>>>>> bf3d0156c5b7 (sfc: Move and rename efx_vf struct to siena_vf)
  	unsigned int vf_i;
  	struct efx_buffer buf;
- 	struct efx_vf *vf;
+ 	struct siena_vf *vf;
  
  	ASSERT_RTNL();
  
@@@ -1605,15 -1586,13 +1635,16 @@@ int efx_init_sriov(void
  
  void efx_fini_sriov(void)
  {
 +#ifdef CONFIG_SFC_SRIOV
  	destroy_workqueue(vfdi_workqueue);
 +#endif
  }
  
 +#ifdef CONFIG_SFC_SRIOV
  int efx_siena_sriov_set_vf_mac(struct efx_nic *efx, int vf_i, u8 *mac)
  {
- 	struct efx_vf *vf;
+ 	struct siena_nic_data *nic_data = efx->nic_data;
+ 	struct siena_vf *vf;
  
  	if (vf_i >= efx->vf_init_count)
  		return -EINVAL;
diff --git a/drivers/net/ethernet/sfc/net_driver.h b/drivers/net/ethernet/sfc/net_driver.h
index ae0d145a5bed..e3054b2a71f7 100644
--- a/drivers/net/ethernet/sfc/net_driver.h
+++ b/drivers/net/ethernet/sfc/net_driver.h
@@ -793,7 +793,6 @@ union efx_multicast_hash {
 	efx_oword_t oword[EFX_MCAST_HASH_ENTRIES / sizeof(efx_oword_t) / 8];
 };
 
-struct efx_vf;
 struct vfdi_status;
 
 /**
@@ -909,7 +908,6 @@ struct vfdi_status;
  *	completed (either success or failure). Not used when MCDI is used to
  *	flush receive queues.
  * @flush_wq: wait queue used by efx_nic_flush_queues() to wait for flush completions.
- * @vf: Array of &struct efx_vf objects.
  * @vf_count: Number of VFs intended to be enabled.
  * @vf_init_count: Number of VFs that have been fully initialised.
  * @vi_scale: log2 number of vnics per VF.
@@ -1053,7 +1051,6 @@ struct efx_nic {
 	wait_queue_head_t flush_wq;
 
 #ifdef CONFIG_SFC_SRIOV
-	struct efx_vf *vf;
 	unsigned vf_count;
 	unsigned vf_init_count;
 	unsigned vi_scale;
diff --git a/drivers/net/ethernet/sfc/nic.h b/drivers/net/ethernet/sfc/nic.h
index ea4ca18df7c5..65dcbc7f3d83 100644
--- a/drivers/net/ethernet/sfc/nic.h
+++ b/drivers/net/ethernet/sfc/nic.h
@@ -381,6 +381,7 @@ enum {
  * @efx: Pointer back to main interface structure
  * @wol_filter_id: Wake-on-LAN packet filter id
  * @stats: Hardware statistics
+ * @vf: Array of &struct siena_vf objects
  * @vf_buftbl_base: The zeroth buffer table index used to back VF queues.
  * @vfdi_status: Common VFDI status page to be dmad to VF address space.
  * @local_addr_list: List of local addresses. Protected by %local_lock.
@@ -394,6 +395,7 @@ struct siena_nic_data {
 	int wol_filter_id;
 	u64 stats[SIENA_STAT_COUNT];
 #ifdef CONFIG_SFC_SRIOV
+	struct siena_vf *vf;
 	struct efx_channel *vfdi_channel;
 	unsigned vf_buftbl_base;
 	struct efx_buffer vfdi_status;
* Unmerged path drivers/net/ethernet/sfc/siena_sriov.c
