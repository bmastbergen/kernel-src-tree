tcp: restore 1.5x per RTT limit to CUBIC cwnd growth in congestion avoidance

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Neal Cardwell <ncardwell@google.com>
commit d578e18ce93f5d33a7120fd57c453e22a4c0fc37
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d578e18c.failed

Commit 814d488c6126 ("tcp: fix the timid additive increase on stretch
ACKs") fixed a bug where tcp_cong_avoid_ai() would either credit a
connection with an increase of snd_cwnd_cnt, or increase snd_cwnd, but
not both, resulting in cwnd increasing by 1 packet on at most every
alternate invocation of tcp_cong_avoid_ai().

Although the commit correctly implemented the CUBIC algorithm, which
can increase cwnd by as much as 1 packet per 1 packet ACKed (2x per
RTT), in practice that could be too aggressive: in tests on network
paths with small buffers, YouTube server retransmission rates nearly
doubled.

This commit restores CUBIC to a maximum cwnd growth rate of 1 packet
per 2 packets ACKed (1.5x per RTT). In YouTube tests this restored
retransmit rates to low levels.

Testing: This patch has been tested in datacenter netperf transfers
and live youtube.com and google.com servers.

Fixes: 9cd981dcf174 ("tcp: fix stretch ACK bugs in CUBIC")
	Signed-off-by: Neal Cardwell <ncardwell@google.com>
	Signed-off-by: Yuchung Cheng <ycheng@google.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d578e18ce93f5d33a7120fd57c453e22a4c0fc37)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_cubic.c
diff --cc net/ipv4/tcp_cubic.c
index bd439c5fc279,06d3d665a9fd..000000000000
--- a/net/ipv4/tcp_cubic.c
+++ b/net/ipv4/tcp_cubic.c
@@@ -307,12 -306,13 +307,19 @@@ tcp_friendliness
  		}
  	}
  
++<<<<<<< HEAD
 +	ca->cnt = (ca->cnt << ACK_RATIO_SHIFT) / ca->delayed_ack;
 +	if (ca->cnt == 0)			/* cannot be zero */
 +		ca->cnt = 1;
++=======
+ 	/* The maximum rate of cwnd increase CUBIC allows is 1 packet per
+ 	 * 2 packets ACKed, meaning cwnd grows at 1.5x per RTT.
+ 	 */
+ 	ca->cnt = max(ca->cnt, 2U);
++>>>>>>> d578e18ce93f (tcp: restore 1.5x per RTT limit to CUBIC cwnd growth in congestion avoidance)
  }
  
 -static void bictcp_cong_avoid(struct sock *sk, u32 ack, u32 acked)
 +static void bictcp_cong_avoid(struct sock *sk, u32 ack, u32 in_flight)
  {
  	struct tcp_sock *tp = tcp_sk(sk);
  	struct bictcp *ca = inet_csk_ca(sk);
* Unmerged path net/ipv4/tcp_cubic.c
