bonding: remove bond_prev_slave()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Veaceslav Falico <vfalico@redhat.com>
commit c8c23903f12a62708606b5cdba8cd8550cd6bdcd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c8c23903.failed

We don't really need it, and it's really hard to RCUify the list->prev.

CC: Jay Vosburgh <fubar@us.ibm.com>
CC: Andy Gospodarek <andy@greyhouse.net>
	Signed-off-by: Veaceslav Falico <vfalico@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c8c23903f12a62708606b5cdba8cd8550cd6bdcd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_main.c
index 05a57077bb1c,6aa345a6a0bc..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -1489,8 -1255,7 +1489,12 @@@ int bond_enslave(struct net_device *bon
  {
  	struct bonding *bond = netdev_priv(bond_dev);
  	const struct net_device_ops *slave_ops = slave_dev->netdev_ops;
++<<<<<<< HEAD
 +	struct slave *new_slave = NULL;
 +	struct netdev_hw_addr *ha;
++=======
+ 	struct slave *new_slave = NULL, *prev_slave;
++>>>>>>> c8c23903f12a (bonding: remove bond_prev_slave())
  	struct sockaddr addr;
  	int link_reporting;
  	int res = 0, i;
@@@ -3769,10 -3503,9 +3774,16 @@@ static int bond_change_mtu(struct net_d
  	 * call to the base driver.
  	 */
  
++<<<<<<< HEAD
 +	bond_for_each_slave(bond, slave, i) {
 +		pr_debug("s %p s->p %p c_m %p\n",
 +			 slave,
 +			 slave->prev,
++=======
+ 	bond_for_each_slave(bond, slave, iter) {
+ 		pr_debug("s %p c_m %p\n",
+ 			 slave,
++>>>>>>> c8c23903f12a (bonding: remove bond_prev_slave())
  			 slave->dev->netdev_ops->ndo_change_mtu);
  
  		res = dev_set_mtu(slave->dev, new_mtu);
diff --cc drivers/net/bonding/bonding.h
index 788e19ed5f58,454d6affa06a..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -71,12 -71,36 +71,40 @@@
  	set_fs(fs);			\
  	res; })
  
++<<<<<<< HEAD
++=======
+ /* slave list primitives */
+ #define bond_slave_list(bond) (&(bond)->dev->adj_list.lower)
+ 
+ #define bond_has_slaves(bond) !list_empty(bond_slave_list(bond))
+ 
+ #define bond_to_slave(ptr) list_entry(ptr, struct slave, list)
+ 
+ /* IMPORTANT: bond_first/last_slave can return NULL in case of an empty list */
+ #define bond_first_slave(bond) \
+ 	(bond_has_slaves(bond) ? \
+ 		netdev_adjacent_get_private(bond_slave_list(bond)->next) : \
+ 		NULL)
+ #define bond_last_slave(bond) \
+ 	(bond_has_slaves(bond) ? \
+ 		netdev_adjacent_get_private(bond_slave_list(bond)->prev) : \
+ 		NULL)
+ 
+ #define bond_is_first_slave(bond, pos) (pos == bond_first_slave(bond))
+ #define bond_is_last_slave(bond, pos) (pos == bond_last_slave(bond))
+ 
+ /* Since bond_first/last_slave can return NULL, these can return NULL too */
+ #define bond_next_slave(bond, pos) \
+ 	(bond_is_last_slave(bond, pos) ? bond_first_slave(bond) : \
+ 					 bond_to_slave((pos)->list.next))
+ 
++>>>>>>> c8c23903f12a (bonding: remove bond_prev_slave())
  /**
 - * bond_for_each_slave - iterate over all slaves
 - * @bond:	the bond holding this list
 - * @pos:	current slave
 - * @iter:	list_head * iterator
 + * bond_for_each_slave_from - iterate the slaves list from a starting point
 + * @bond:	the bond holding this list.
 + * @pos:	current slave.
 + * @cnt:	counter for max number of moves
 + * @start:	starting point.
   *
   * Caller must hold bond->lock
   */
* Unmerged path drivers/net/bonding/bond_main.c
* Unmerged path drivers/net/bonding/bonding.h
