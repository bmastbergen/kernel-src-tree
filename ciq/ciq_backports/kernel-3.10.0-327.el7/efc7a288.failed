fnic: IOMMU Fault occurs when IO and abort IO is out of order

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Anil Chintalapati (achintal) <achintal@cisco.com>
commit efc7a288382cffc76d6cdb9678f643db37991906
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/efc7a288.failed

When I/O is aborted by mid-layer, fnic FW will complete the I/O before
completing the abort task. In some cases abort request is completed before
the I/O, which could lead to inconsistent driver and firmware states.
In this case firmware reset would clear the inconsistent state.

	Signed-off-by: Anil Chintalapati <achintal@cisco.com>
	Signed-off-by: Sesidhar Baddela <sebaddel@cisco.com>
	Signed-off-by: Hiral Shah <hishah@cisco.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit efc7a288382cffc76d6cdb9678f643db37991906)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/fnic/fnic.h
diff --cc drivers/scsi/fnic/fnic.h
index a547c3fee2f5,26270c351624..000000000000
--- a/drivers/scsi/fnic/fnic.h
+++ b/drivers/scsi/fnic/fnic.h
@@@ -39,7 -39,7 +39,11 @@@
  
  #define DRV_NAME		"fnic"
  #define DRV_DESCRIPTION		"Cisco FCoE HBA Driver"
++<<<<<<< HEAD
 +#define DRV_VERSION		"1.5.0.45a"
++=======
+ #define DRV_VERSION		"1.6.0.17"
++>>>>>>> efc7a288382c (fnic: IOMMU Fault occurs when IO and abort IO is out of order)
  #define PFX			DRV_NAME ": "
  #define DFX                     DRV_NAME "%d: "
  
* Unmerged path drivers/scsi/fnic/fnic.h
diff --git a/drivers/scsi/fnic/fnic_scsi.c b/drivers/scsi/fnic/fnic_scsi.c
index 0521436d05d6..94c647ca3d84 100644
--- a/drivers/scsi/fnic/fnic_scsi.c
+++ b/drivers/scsi/fnic/fnic_scsi.c
@@ -1872,6 +1872,21 @@ int fnic_abort_cmd(struct scsi_cmnd *sc)
 		goto fnic_abort_cmd_end;
 	}
 
+	/* IO out of order */
+
+	if (!(CMD_FLAGS(sc) & (FNIC_IO_ABORTED | FNIC_IO_DONE))) {
+		spin_unlock_irqrestore(io_lock, flags);
+		FNIC_SCSI_DBG(KERN_DEBUG, fnic->lport->host,
+			"Issuing Host reset due to out of order IO\n");
+
+		if (fnic_host_reset(sc) == FAILED) {
+			FNIC_SCSI_DBG(KERN_DEBUG, fnic->lport->host,
+				"fnic_host_reset failed.\n");
+		}
+		ret = FAILED;
+		goto fnic_abort_cmd_end;
+	}
+
 	CMD_STATE(sc) = FNIC_IOREQ_ABTS_COMPLETE;
 
 	/*
