ACPI / video: Fix backlight taking 2 steps on a brightness up/down keypress

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [acpi] video: Fix backlight taking 2 steps on a brightness up/down keypress (Benjamin Tissoires) [1218354]
Rebuild_FUZZ: 95.10%
commit-author Linus Torvalds <torvalds@linux-foundation.org>
commit 8ab58e8e7e097bae5fe39cbc67eb93a91f7134b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/8ab58e8e.failed

In various scenarious userspace will respond to brightness up/down keypresses
by increasing/decreasing the backlight brightness itself. If the kernel then
also changes the brightness this results in the brightness having changed 2
steps for a single keypress which is undesirable. See e.g. :

https://bugs.launchpad.net/gnome-settings-daemon/+bug/527157
http://askubuntu.com/questions/173921/why-does-my-thinkpad-brightness-control-skip-steps

This commit delays responding to brightness up/down keypresses by 100 ms and
if userspace in that time responds by changing the backlight itself, cancels
the kernels own handling of these keypresses, fixing the 2 steps issue.

Link: http://marc.info/?l=linux-kernel&m=140535721100839&w=2
[hdegoede@redhat.com: Move the delayed_work struct into struct
 acpi_video_device instead of having it as a global]
[hdegoede@redhat.com: Keep brightness_switch_enabled as a boolean and always
 delay the keypress handling]
	Tested-by: Hans de Goede <hdegoede@redhat.com>
	Tested-by: Bj√∏rn Mork <bjorn@mork.no>
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8ab58e8e7e097bae5fe39cbc67eb93a91f7134b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/video.c
diff --cc drivers/acpi/video.c
index 81c28f7441f2,bfe1fa2fb5d1..000000000000
--- a/drivers/acpi/video.c
+++ b/drivers/acpi/video.c
@@@ -224,9 -232,25 +226,8 @@@ static int acpi_video_device_lcd_get_le
  			unsigned long long *level, bool raw);
  static int acpi_video_get_next_level(struct acpi_video_device *device,
  				     u32 level_current, u32 event);
- static int acpi_video_switch_brightness(struct acpi_video_device *device,
- 					 int event);
+ static void acpi_video_switch_brightness(struct work_struct *work);
  
 -static bool acpi_video_use_native_backlight(void)
 -{
 -	if (use_native_backlight_param != -1)
 -		return use_native_backlight_param;
 -	else
 -		return use_native_backlight_dmi;
 -}
 -
 -bool acpi_video_verify_backlight_support(void)
 -{
 -	if (acpi_osi_is_win8() && acpi_video_use_native_backlight() &&
 -	    backlight_device_registered(BACKLIGHT_RAW))
 -		return false;
 -	return acpi_video_backlight_support();
 -}
 -EXPORT_SYMBOL_GPL(acpi_video_verify_backlight_support);
 -
  /* backlight device sysfs support */
  static int acpi_video_get_brightness(struct backlight_device *bd)
  {
@@@ -251,9 -274,9 +252,10 @@@
  static int acpi_video_set_brightness(struct backlight_device *bd)
  {
  	int request_level = bd->props.brightness + 2;
 -	struct acpi_video_device *vd = bl_get_data(bd);
 +	struct acpi_video_device *vd =
 +		(struct acpi_video_device *)bl_get_data(bd);
  
+ 	cancel_delayed_work(&vd->switch_brightness_work);
  	return acpi_video_device_lcd_set_level(vd,
  				vd->brightness->levels[request_level]);
  }
@@@ -1333,15 -1414,18 +1337,24 @@@ acpi_video_get_next_level(struct acpi_v
  	}
  }
  
- static int
- acpi_video_switch_brightness(struct acpi_video_device *device, int event)
+ static void
+ acpi_video_switch_brightness(struct work_struct *work)
  {
+ 	struct acpi_video_device *device = container_of(to_delayed_work(work),
+ 			     struct acpi_video_device, switch_brightness_work);
  	unsigned long long level_current, level_next;
+ 	int event = device->switch_brightness_event;
  	int result = -EINVAL;
  
++<<<<<<< HEAD
 +	/* no warning message if acpi_backlight=vendor is used */
 +	if (!acpi_video_backlight_support())
 +		return 0;
++=======
+ 	/* no warning message if acpi_backlight=vendor or a quirk is used */
+ 	if (!acpi_video_verify_backlight_support())
+ 		return;
++>>>>>>> 8ab58e8e7e09 (ACPI / video: Fix backlight taking 2 steps on a brightness up/down keypress)
  
  	if (!device->brightness)
  		goto out;
@@@ -1612,33 -1641,23 +1633,53 @@@ static void acpi_video_device_notify(ac
  
  	switch (event) {
  	case ACPI_VIDEO_NOTIFY_CYCLE_BRIGHTNESS:	/* Cycle brightness */
++<<<<<<< HEAD
 +		if (brightness_switch_enabled)
 +			acpi_video_switch_brightness(video_device, event);
 +		acpi_bus_generate_proc_event(device, event, 0);
 +		keycode = KEY_BRIGHTNESS_CYCLE;
 +		break;
 +	case ACPI_VIDEO_NOTIFY_INC_BRIGHTNESS:	/* Increase brightness */
 +		if (brightness_switch_enabled)
 +			acpi_video_switch_brightness(video_device, event);
 +		acpi_bus_generate_proc_event(device, event, 0);
 +		keycode = KEY_BRIGHTNESSUP;
 +		break;
 +	case ACPI_VIDEO_NOTIFY_DEC_BRIGHTNESS:	/* Decrease brightness */
 +		if (brightness_switch_enabled)
 +			acpi_video_switch_brightness(video_device, event);
 +		acpi_bus_generate_proc_event(device, event, 0);
 +		keycode = KEY_BRIGHTNESSDOWN;
 +		break;
 +	case ACPI_VIDEO_NOTIFY_ZERO_BRIGHTNESS:	/* zero brightness */
 +		if (brightness_switch_enabled)
 +			acpi_video_switch_brightness(video_device, event);
 +		acpi_bus_generate_proc_event(device, event, 0);
 +		keycode = KEY_BRIGHTNESS_ZERO;
 +		break;
 +	case ACPI_VIDEO_NOTIFY_DISPLAY_OFF:	/* display device off */
 +		if (brightness_switch_enabled)
 +			acpi_video_switch_brightness(video_device, event);
 +		acpi_bus_generate_proc_event(device, event, 0);
++=======
+ 		brightness_switch_event(video_device, event);
+ 		keycode = KEY_BRIGHTNESS_CYCLE;
+ 		break;
+ 	case ACPI_VIDEO_NOTIFY_INC_BRIGHTNESS:	/* Increase brightness */
+ 		brightness_switch_event(video_device, event);
+ 		keycode = KEY_BRIGHTNESSUP;
+ 		break;
+ 	case ACPI_VIDEO_NOTIFY_DEC_BRIGHTNESS:	/* Decrease brightness */
+ 		brightness_switch_event(video_device, event);
+ 		keycode = KEY_BRIGHTNESSDOWN;
+ 		break;
+ 	case ACPI_VIDEO_NOTIFY_ZERO_BRIGHTNESS:	/* zero brightness */
+ 		brightness_switch_event(video_device, event);
+ 		keycode = KEY_BRIGHTNESS_ZERO;
+ 		break;
+ 	case ACPI_VIDEO_NOTIFY_DISPLAY_OFF:	/* display device off */
+ 		brightness_switch_event(video_device, event);
++>>>>>>> 8ab58e8e7e09 (ACPI / video: Fix backlight taking 2 steps on a brightness up/down keypress)
  		keycode = KEY_DISPLAY_OFF;
  		break;
  	default:
* Unmerged path drivers/acpi/video.c
