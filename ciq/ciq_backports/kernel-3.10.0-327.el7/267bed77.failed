bonding: make BOND_NO_USES_ARP an inline function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Veaceslav Falico <vfalico@gmail.com>
commit 267bed777a5f8a8f5acd50a9134c7341fc46d822
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/267bed77.failed

Also, change its name to better reflect its scope, and skip the "no"
part.

CC: Jay Vosburgh <j.vosburgh@gmail.com>
CC: Andy Gospodarek <andy@greyhouse.net>
	Signed-off-by: Veaceslav Falico <vfalico@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 267bed777a5f8a8f5acd50a9134c7341fc46d822)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_main.c
index d0eec7c786f0,2448e28f38bc..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -4444,12 -4112,12 +4444,17 @@@ static int bond_check_params(struct bon
  		num_peer_notif = 1;
  	}
  
++<<<<<<< HEAD
 +	/* reset values for 802.3ad */
 +	if (bond_mode == BOND_MODE_8023AD) {
++=======
+ 	/* reset values for 802.3ad/TLB/ALB */
+ 	if (!bond_mode_uses_arp(bond_mode)) {
++>>>>>>> 267bed777a5f (bonding: make BOND_NO_USES_ARP an inline function)
  		if (!miimon) {
 -			pr_warn("Warning: miimon must be specified, otherwise bonding will not detect link failure, speed and duplex which are essential for 802.3ad operation\n");
 -			pr_warn("Forcing miimon to 100msec\n");
 -			miimon = BOND_DEFAULT_MIIMON;
 +			pr_warning("Warning: miimon must be specified, otherwise bonding will not detect link failure, speed and duplex which are essential for 802.3ad operation\n");
 +			pr_warning("Forcing miimon to 100msec\n");
 +			miimon = 100;
  		}
  	}
  
diff --cc drivers/net/bonding/bonding.h
index e1ca02f0b074,105c552f96d8..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -55,9 -60,9 +55,15 @@@
  		 ((mode) == BOND_MODE_TLB)          ||	\
  		 ((mode) == BOND_MODE_ALB))
  
++<<<<<<< HEAD
 +#define TX_QUEUE_OVERRIDE(mode)				\
 +			(((mode) == BOND_MODE_ACTIVEBACKUP) ||	\
 +			 ((mode) == BOND_MODE_ROUNDROBIN))
++=======
+ #define IS_IP_TARGET_UNUSABLE_ADDRESS(a)	\
+ 	((htonl(INADDR_BROADCAST) == a) ||	\
+ 	 ipv4_is_zeronet(a))
++>>>>>>> 267bed777a5f (bonding: make BOND_NO_USES_ARP an inline function)
  /*
   * Less bad way to call ioctl from within the kernel; this needs to be
   * done some other way to get the call out of interrupt context.
@@@ -285,15 -275,30 +291,21 @@@ static inline struct bonding *bond_get_
  	return slave->bond;
  }
  
 -static inline bool bond_should_override_tx_queue(struct bonding *bond)
 -{
 -	return bond->params.mode == BOND_MODE_ACTIVEBACKUP ||
 -	       bond->params.mode == BOND_MODE_ROUNDROBIN;
 -}
 -
  static inline bool bond_is_lb(const struct bonding *bond)
  {
 -	return bond->params.mode == BOND_MODE_TLB ||
 -	       bond->params.mode == BOND_MODE_ALB;
 +	return (bond->params.mode == BOND_MODE_TLB ||
 +		bond->params.mode == BOND_MODE_ALB);
  }
  
+ static inline bool bond_mode_uses_arp(int mode)
+ {
+ 	return mode != BOND_MODE_8023AD && mode != BOND_MODE_TLB &&
+ 	       mode != BOND_MODE_ALB;
+ }
+ 
  static inline void bond_set_active_slave(struct slave *slave)
  {
 -	if (slave->backup) {
 -		slave->backup = 0;
 -		rtmsg_ifinfo(RTM_NEWLINK, slave->dev, 0, GFP_ATOMIC);
 -	}
 +	slave->backup = 0;
  }
  
  static inline void bond_set_backup_slave(struct slave *slave)
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_main.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bonding.h
