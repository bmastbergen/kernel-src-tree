bonding: get rid of bond_option_active_slave_get()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Eric Dumazet <edumazet@google.com>
commit e965f8049460569bab12fe7bb5381bb2279712e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e965f804.failed

Only keep bond_option_active_slave_get_rcu() helper.

bond_fill_info() uses a new bond_option_active_slave_get_ifindex()
helper.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Veaceslav Falico <vfalico@gmail.com>
	Reviewed-by: Nikolay Aleksandrov <nikolay@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e965f8049460569bab12fe7bb5381bb2279712e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,4d97e23eb497..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -83,19 -366,187 +83,167 @@@ static int bond_newlink(struct net *src
  static size_t bond_get_size(const struct net_device *bond_dev)
  {
  	return nla_total_size(sizeof(u8)) +	/* IFLA_BOND_MODE */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ACTIVE_SLAVE */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIIMON */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_UPDELAY */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_DOWNDELAY */
 -		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_USE_CARRIER */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_INTERVAL */
 -						/* IFLA_BOND_ARP_IP_TARGET */
 -		nla_total_size(sizeof(struct nlattr)) +
 -		nla_total_size(sizeof(u32)) * BOND_MAX_ARP_TARGETS +
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_VALIDATE */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_ALL_TARGETS */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_PRIMARY */
 -		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_PRIMARY_RESELECT */
 -		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_FAIL_OVER_MAC */
 -		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_XMIT_HASH_POLICY */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_RESEND_IGMP */
 -		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_NUM_PEER_NOTIF */
 -		nla_total_size(sizeof(u8)) +   /* IFLA_BOND_ALL_SLAVES_ACTIVE */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIN_LINKS */
 -		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_LP_INTERVAL */
 -		nla_total_size(sizeof(u32)) +  /* IFLA_BOND_PACKETS_PER_SLAVE */
 -		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_AD_LACP_RATE */
 -		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_AD_SELECT */
 -		nla_total_size(sizeof(struct nlattr)) + /* IFLA_BOND_AD_INFO */
 -		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_AGGREGATOR */
 -		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_NUM_PORTS */
 -		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_ACTOR_KEY */
 -		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_PARTNER_KEY*/
 -		nla_total_size(ETH_ALEN) +    /* IFLA_BOND_AD_INFO_PARTNER_MAC*/
 -		0;
 +		nla_total_size(sizeof(u32));	/* IFLA_BOND_ACTIVE_SLAVE */
  }
  
+ static int bond_option_active_slave_get_ifindex(struct bonding *bond)
+ {
+ 	const struct net_device *slave;
+ 	int ifindex;
+ 
+ 	rcu_read_lock();
+ 	slave = bond_option_active_slave_get_rcu(bond);
+ 	ifindex = slave ? slave->ifindex : 0;
+ 	rcu_read_unlock();
+ 	return ifindex;
+ }
+ 
  static int bond_fill_info(struct sk_buff *skb,
  			  const struct net_device *bond_dev)
  {
  	struct bonding *bond = netdev_priv(bond_dev);
++<<<<<<< HEAD
 +	struct net_device *slave_dev = bond_option_active_slave_get(bond);
++=======
+ 	unsigned int packets_per_slave;
+ 	int ifindex, i, targets_added;
+ 	struct nlattr *targets;
++>>>>>>> e965f8049460 (bonding: get rid of bond_option_active_slave_get())
  
 -	if (nla_put_u8(skb, IFLA_BOND_MODE, BOND_MODE(bond)))
 +	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode) ||
 +	    (slave_dev &&
 +	     nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex)))
  		goto nla_put_failure;
++<<<<<<< HEAD
++=======
+ 
+ 	ifindex = bond_option_active_slave_get_ifindex(bond);
+ 	if (ifindex && nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIIMON, bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_UPDELAY,
+ 			bond->params.updelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_DOWNDELAY,
+ 			bond->params.downdelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_USE_CARRIER, bond->params.use_carrier))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_INTERVAL, bond->params.arp_interval))
+ 		goto nla_put_failure;
+ 
+ 	targets = nla_nest_start(skb, IFLA_BOND_ARP_IP_TARGET);
+ 	if (!targets)
+ 		goto nla_put_failure;
+ 
+ 	targets_added = 0;
+ 	for (i = 0; i < BOND_MAX_ARP_TARGETS; i++) {
+ 		if (bond->params.arp_targets[i]) {
+ 			nla_put_be32(skb, i, bond->params.arp_targets[i]);
+ 			targets_added = 1;
+ 		}
+ 	}
+ 
+ 	if (targets_added)
+ 		nla_nest_end(skb, targets);
+ 	else
+ 		nla_nest_cancel(skb, targets);
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_VALIDATE, bond->params.arp_validate))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_ALL_TARGETS,
+ 			bond->params.arp_all_targets))
+ 		goto nla_put_failure;
+ 
+ 	if (bond->primary_slave &&
+ 	    nla_put_u32(skb, IFLA_BOND_PRIMARY,
+ 			bond->primary_slave->dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_PRIMARY_RESELECT,
+ 		       bond->params.primary_reselect))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_FAIL_OVER_MAC,
+ 		       bond->params.fail_over_mac))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_XMIT_HASH_POLICY,
+ 		       bond->params.xmit_policy))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_RESEND_IGMP,
+ 		        bond->params.resend_igmp))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_NUM_PEER_NOTIF,
+ 		       bond->params.num_peer_notif))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_ALL_SLAVES_ACTIVE,
+ 		       bond->params.all_slaves_active))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIN_LINKS,
+ 			bond->params.min_links))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_LP_INTERVAL,
+ 			bond->params.lp_interval))
+ 		goto nla_put_failure;
+ 
+ 	packets_per_slave = bond->params.packets_per_slave;
+ 	if (nla_put_u32(skb, IFLA_BOND_PACKETS_PER_SLAVE,
+ 			packets_per_slave))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_AD_LACP_RATE,
+ 		       bond->params.lacp_fast))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_AD_SELECT,
+ 		       bond->params.ad_select))
+ 		goto nla_put_failure;
+ 
+ 	if (BOND_MODE(bond) == BOND_MODE_8023AD) {
+ 		struct ad_info info;
+ 
+ 		if (!bond_3ad_get_active_agg_info(bond, &info)) {
+ 			struct nlattr *nest;
+ 
+ 			nest = nla_nest_start(skb, IFLA_BOND_AD_INFO);
+ 			if (!nest)
+ 				goto nla_put_failure;
+ 
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_AGGREGATOR,
+ 					info.aggregator_id))
+ 				goto nla_put_failure;
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_NUM_PORTS,
+ 					info.ports))
+ 				goto nla_put_failure;
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_ACTOR_KEY,
+ 					info.actor_key))
+ 				goto nla_put_failure;
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_PARTNER_KEY,
+ 					info.partner_key))
+ 				goto nla_put_failure;
+ 			if (nla_put(skb, IFLA_BOND_AD_INFO_PARTNER_MAC,
+ 				    sizeof(info.partner_system),
+ 				    &info.partner_system))
+ 				goto nla_put_failure;
+ 
+ 			nla_nest_end(skb, nest);
+ 		}
+ 	}
+ 
++>>>>>>> e965f8049460 (bonding: get rid of bond_option_active_slave_get())
  	return 0;
  
  nla_put_failure:
diff --cc drivers/net/bonding/bonding.h
index 64c0cb81e478,713e2a99c661..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -436,15 -513,11 +436,23 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
 +
 +struct bond_net {
 +	struct net *		net;	/* Associated network namespace */
 +	struct list_head	dev_list;
 +#ifdef CONFIG_PROC_FS
 +	struct proc_dir_entry *	proc_dir;
 +#endif
 +	struct class_attribute	class_attr_bonding_masters;
 +};
++=======
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ const char *bond_slave_link_status(s8 link);
+ bool bond_verify_device_path(struct net_device *start_dev,
+ 			     struct net_device *end_dev,
+ 			     struct bond_vlan_tag *tags);
++>>>>>>> e965f8049460 (bonding: get rid of bond_option_active_slave_get())
  
  #ifdef CONFIG_PROC_FS
  void bond_create_proc_entry(struct bonding *bond);
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bonding.h
