virtio-net: drop config_mutex

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 080c637373904258ecc20cedc552b2472ab03d10
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/080c6373.failed

config_mutex served two purposes: prevent multiple concurrent config
change handlers, and synchronize access to config_enable flag.

Since commit dbf2576e37da0fcc7aacbfbb9fd5d3de7888a3c1
    workqueue: make all workqueues non-reentrant
all workqueues are non-reentrant, and config_enable
is now gone.

Get rid of the unnecessary lock.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
	Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
(cherry picked from commit 080c637373904258ecc20cedc552b2472ab03d10)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/virtio_net.c
diff --cc drivers/net/virtio_net.c
index 54b3d59391dd,23e4a69d92de..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -1315,10 -1401,6 +1312,13 @@@ static void virtnet_config_changed_work
  		container_of(work, struct virtnet_info, config_work);
  	u16 v;
  
++<<<<<<< HEAD
 +	mutex_lock(&vi->config_lock);
 +	if (!vi->config_enable)
 +		goto done;
 +
++=======
++>>>>>>> 080c63737390 (virtio-net: drop config_mutex)
  	if (virtio_cread_feature(vi->vdev, VIRTIO_NET_F_STATUS,
  				 struct virtio_net_config, status, &v) < 0)
  		goto done;
@@@ -1618,12 -1740,13 +1618,15 @@@ static int virtnet_probe(struct virtio_
  	if (vi->stats == NULL)
  		goto free;
  
 -	for_each_possible_cpu(i) {
 -		struct virtnet_stats *virtnet_stats;
 -		virtnet_stats = per_cpu_ptr(vi->stats, i);
 -		u64_stats_init(&virtnet_stats->tx_syncp);
 -		u64_stats_init(&virtnet_stats->rx_syncp);
 -	}
 +	vi->vq_index = alloc_percpu(int);
 +	if (vi->vq_index == NULL)
 +		goto free_stats;
  
++<<<<<<< HEAD
 +	mutex_init(&vi->config_lock);
 +	vi->config_enable = true;
++=======
++>>>>>>> 080c63737390 (virtio-net: drop config_mutex)
  	INIT_WORK(&vi->config_work, virtnet_config_changed_work);
  
  	/* If we can receive ANY GSO packets, we must allocate large ones. */
* Unmerged path drivers/net/virtio_net.c
