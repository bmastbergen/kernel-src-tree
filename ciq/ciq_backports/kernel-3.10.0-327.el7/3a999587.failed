perf/x86/intel/uncore: Use Sandy Bridge client PMU on Haswell/Broadwell

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] perf/uncore: Use Sandy Bridge client PMU on Haswell/Broadwell (Jiri Olsa) [1250642]
Rebuild_FUZZ: 92.42%
commit-author Andi Kleen <ak@linux.intel.com>
commit 3a999587b4a1815cf4dadddf6b5aad470f048239
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3a999587.failed

Haswell and Broadwell have the same uncore CBOX/ARB PMU as Sandy Bridge.
Add the respective model numbers to enable the SNB uncore PMU.

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: eranian@google.com
	Cc: kan.liang@intel.com
Link: http://lkml.kernel.org/r/1434347862-28490-2-git-send-email-andi@firstfloor.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 3a999587b4a1815cf4dadddf6b5aad470f048239)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_intel_uncore.c
diff --cc arch/x86/kernel/cpu/perf_event_intel_uncore.c
index 4ce0c799c887,c2af96716d62..000000000000
--- a/arch/x86/kernel/cpu/perf_event_intel_uncore.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
@@@ -4170,30 -1209,26 +4170,39 @@@ static int __init uncore_cpu_init(void
  		break;
  	case 42: /* Sandy Bridge */
  	case 58: /* Ivy Bridge */
++<<<<<<< HEAD
 +		if (snb_uncore_cbox.num_boxes > max_cores)
 +			snb_uncore_cbox.num_boxes = max_cores;
 +		msr_uncores = snb_msr_uncores;
++=======
+ 	case 60: /* Haswell */
+ 	case 69: /* Haswell */
+ 	case 70: /* Haswell */
+ 	case 61: /* Broadwell */
+ 	case 71: /* Broadwell */
+ 		snb_uncore_cpu_init();
++>>>>>>> 3a999587b4a1 (perf/x86/intel/uncore: Use Sandy Bridge client PMU on Haswell/Broadwell)
  		break;
  	case 45: /* Sandy Bridge-EP */
 -		snbep_uncore_cpu_init();
 +		if (snbep_uncore_cbox.num_boxes > max_cores)
 +			snbep_uncore_cbox.num_boxes = max_cores;
 +		msr_uncores = snbep_msr_uncores;
  		break;
  	case 46: /* Nehalem-EX */
 +		uncore_nhmex = true;
  	case 47: /* Westmere-EX aka. Xeon E7 */
 -		nhmex_uncore_cpu_init();
 +		if (!uncore_nhmex)
 +			nhmex_uncore_mbox.event_descs = wsmex_uncore_mbox_events;
 +		if (nhmex_uncore_cbox.num_boxes > max_cores)
 +			nhmex_uncore_cbox.num_boxes = max_cores;
 +		msr_uncores = nhmex_msr_uncores;
  		break;
 -	case 62: /* Ivy Bridge-EP */
 -		ivbep_uncore_cpu_init();
 -		break;
 -	case 63: /* Haswell-EP */
 -		hswep_uncore_cpu_init();
 +	case 62: /* IvyTown */
 +		if (ivt_uncore_cbox.num_boxes > max_cores)
 +			ivt_uncore_cbox.num_boxes = max_cores;
 +		msr_uncores = ivt_msr_uncores;
  		break;
 +
  	default:
  		return 0;
  	}
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_uncore.c
