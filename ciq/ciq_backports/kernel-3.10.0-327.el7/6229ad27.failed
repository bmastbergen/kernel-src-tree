x86/xsaves: Detect xsaves/xrstors feature

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Fenghua Yu <fenghua.yu@intel.com>
commit 6229ad278ca74acdbc8bd3a3d469322a3de91039
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6229ad27.failed

Detect the xsaveopt, xsavec, xgetbv, and xsaves features in processor extended
state enumberation sub-leaf (eax=0x0d, ecx=1):
Bit 00: XSAVEOPT is available
Bit 01: Supports XSAVEC and the compacted form of XRSTOR if set
Bit 02: Supports XGETBV with ECX = 1 if set
Bit 03: Supports XSAVES/XRSTORS and IA32_XSS if set

The above features are defined in the new word 10 in cpu features.

The IA32_XSS MSR (index DA0H) contains a state-component bitmap that specifies
the state components that software has enabled xsaves and xrstors to manage.
If the bit corresponding to a state component is clear in XCR0 | IA32_XSS,
xsaves and xrstors will not operate on that state component, regardless of
the value of the instruction mask.

	Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
Link: http://lkml.kernel.org/r/1401387164-43416-3-git-send-email-fenghua.yu@intel.com
	Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
(cherry picked from commit 6229ad278ca74acdbc8bd3a3d469322a3de91039)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeature.h
diff --cc arch/x86/include/asm/cpufeature.h
index ba9a53d71585,b82f95144a05..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -8,8 -8,8 +8,13 @@@
  #include <asm/required-features.h>
  #endif
  
++<<<<<<< HEAD
 +#define NCAPINTS	20	/* N 32-bit words worth of info */
 +#define NBUGINTS	10	/* N 32-bit bug flags */
++=======
+ #define NCAPINTS	11	/* N 32-bit words worth of info */
+ #define NBUGINTS	1	/* N 32-bit bug flags */
++>>>>>>> 6229ad278ca7 (x86/xsaves: Detect xsaves/xrstors feature)
  
  /*
   * Note: If the comment begins with a quoted string, that string is used
@@@ -176,56 -176,61 +181,74 @@@
   * Auxiliary flags: Linux defined - For features scattered in various
   * CPUID levels like 0x6, 0xA etc, word 7
   */
++<<<<<<< HEAD
 +#define X86_FEATURE_IDA		(7*32+ 0) /* Intel Dynamic Acceleration */
 +#define X86_FEATURE_ARAT	(7*32+ 1) /* Always Running APIC Timer */
 +#define X86_FEATURE_CPB		(7*32+ 2) /* AMD Core Performance Boost */
 +#define X86_FEATURE_EPB		(7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
 +#define X86_FEATURE_XSAVEOPT	(7*32+ 4) /* Optimized Xsave */
 +#define X86_FEATURE_PLN		(7*32+ 5) /* Intel Power Limit Notification */
 +#define X86_FEATURE_PTS		(7*32+ 6) /* Intel Package Thermal Status */
 +#define X86_FEATURE_DTHERM	(7*32+ 7) /* Digital Thermal Sensor */
 +#define X86_FEATURE_HW_PSTATE	(7*32+ 8) /* AMD HW-PState */
 +#define X86_FEATURE_PROC_FEEDBACK (7*32+ 9) /* AMD ProcFeedbackInterface */
++=======
+ #define X86_FEATURE_IDA		( 7*32+ 0) /* Intel Dynamic Acceleration */
+ #define X86_FEATURE_ARAT	( 7*32+ 1) /* Always Running APIC Timer */
+ #define X86_FEATURE_CPB		( 7*32+ 2) /* AMD Core Performance Boost */
+ #define X86_FEATURE_EPB		( 7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
+ #define X86_FEATURE_PLN		( 7*32+ 5) /* Intel Power Limit Notification */
+ #define X86_FEATURE_PTS		( 7*32+ 6) /* Intel Package Thermal Status */
+ #define X86_FEATURE_DTHERM	( 7*32+ 7) /* Digital Thermal Sensor */
+ #define X86_FEATURE_HW_PSTATE	( 7*32+ 8) /* AMD HW-PState */
+ #define X86_FEATURE_PROC_FEEDBACK ( 7*32+ 9) /* AMD ProcFeedbackInterface */
++>>>>>>> 6229ad278ca7 (x86/xsaves: Detect xsaves/xrstors feature)
  
  /* Virtualization flags: Linux defined, word 8 */
 -#define X86_FEATURE_TPR_SHADOW  ( 8*32+ 0) /* Intel TPR Shadow */
 -#define X86_FEATURE_VNMI        ( 8*32+ 1) /* Intel Virtual NMI */
 -#define X86_FEATURE_FLEXPRIORITY ( 8*32+ 2) /* Intel FlexPriority */
 -#define X86_FEATURE_EPT         ( 8*32+ 3) /* Intel Extended Page Table */
 -#define X86_FEATURE_VPID        ( 8*32+ 4) /* Intel Virtual Processor ID */
 -#define X86_FEATURE_NPT		( 8*32+ 5) /* AMD Nested Page Table support */
 -#define X86_FEATURE_LBRV	( 8*32+ 6) /* AMD LBR Virtualization support */
 -#define X86_FEATURE_SVML	( 8*32+ 7) /* "svm_lock" AMD SVM locking MSR */
 -#define X86_FEATURE_NRIPS	( 8*32+ 8) /* "nrip_save" AMD SVM next_rip save */
 -#define X86_FEATURE_TSCRATEMSR  ( 8*32+ 9) /* "tsc_scale" AMD TSC scaling support */
 -#define X86_FEATURE_VMCBCLEAN   ( 8*32+10) /* "vmcb_clean" AMD VMCB clean bits support */
 -#define X86_FEATURE_FLUSHBYASID ( 8*32+11) /* AMD flush-by-ASID support */
 -#define X86_FEATURE_DECODEASSISTS ( 8*32+12) /* AMD Decode Assists support */
 -#define X86_FEATURE_PAUSEFILTER ( 8*32+13) /* AMD filtered pause intercept */
 -#define X86_FEATURE_PFTHRESHOLD ( 8*32+14) /* AMD pause filter threshold */
 +#define X86_FEATURE_TPR_SHADOW  (8*32+ 0) /* Intel TPR Shadow */
 +#define X86_FEATURE_VNMI        (8*32+ 1) /* Intel Virtual NMI */
 +#define X86_FEATURE_FLEXPRIORITY (8*32+ 2) /* Intel FlexPriority */
 +#define X86_FEATURE_EPT         (8*32+ 3) /* Intel Extended Page Table */
 +#define X86_FEATURE_VPID        (8*32+ 4) /* Intel Virtual Processor ID */
 +#define X86_FEATURE_NPT		(8*32+ 5) /* AMD Nested Page Table support */
 +#define X86_FEATURE_LBRV	(8*32+ 6) /* AMD LBR Virtualization support */
 +#define X86_FEATURE_SVML	(8*32+ 7) /* "svm_lock" AMD SVM locking MSR */
 +#define X86_FEATURE_NRIPS	(8*32+ 8) /* "nrip_save" AMD SVM next_rip save */
 +#define X86_FEATURE_TSCRATEMSR  (8*32+ 9) /* "tsc_scale" AMD TSC scaling support */
 +#define X86_FEATURE_VMCBCLEAN   (8*32+10) /* "vmcb_clean" AMD VMCB clean bits support */
 +#define X86_FEATURE_FLUSHBYASID (8*32+11) /* AMD flush-by-ASID support */
 +#define X86_FEATURE_DECODEASSISTS (8*32+12) /* AMD Decode Assists support */
 +#define X86_FEATURE_PAUSEFILTER (8*32+13) /* AMD filtered pause intercept */
 +#define X86_FEATURE_PFTHRESHOLD (8*32+14) /* AMD pause filter threshold */
  
  
  /* Intel-defined CPU features, CPUID level 0x00000007:0 (ebx), word 9 */
 -#define X86_FEATURE_FSGSBASE	( 9*32+ 0) /* {RD/WR}{FS/GS}BASE instructions*/
 -#define X86_FEATURE_TSC_ADJUST	( 9*32+ 1) /* TSC adjustment MSR 0x3b */
 -#define X86_FEATURE_BMI1	( 9*32+ 3) /* 1st group bit manipulation extensions */
 -#define X86_FEATURE_HLE		( 9*32+ 4) /* Hardware Lock Elision */
 -#define X86_FEATURE_AVX2	( 9*32+ 5) /* AVX2 instructions */
 -#define X86_FEATURE_SMEP	( 9*32+ 7) /* Supervisor Mode Execution Protection */
 -#define X86_FEATURE_BMI2	( 9*32+ 8) /* 2nd group bit manipulation extensions */
 -#define X86_FEATURE_ERMS	( 9*32+ 9) /* Enhanced REP MOVSB/STOSB */
 -#define X86_FEATURE_INVPCID	( 9*32+10) /* Invalidate Processor Context ID */
 -#define X86_FEATURE_RTM		( 9*32+11) /* Restricted Transactional Memory */
 -#define X86_FEATURE_MPX		( 9*32+14) /* Memory Protection Extension */
 -#define X86_FEATURE_AVX512F	( 9*32+16) /* AVX-512 Foundation */
 -#define X86_FEATURE_RDSEED	( 9*32+18) /* The RDSEED instruction */
 -#define X86_FEATURE_ADX		( 9*32+19) /* The ADCX and ADOX instructions */
 -#define X86_FEATURE_SMAP	( 9*32+20) /* Supervisor Mode Access Prevention */
 -#define X86_FEATURE_CLFLUSHOPT	( 9*32+23) /* CLFLUSHOPT instruction */
 -#define X86_FEATURE_AVX512PF	( 9*32+26) /* AVX-512 Prefetch */
 -#define X86_FEATURE_AVX512ER	( 9*32+27) /* AVX-512 Exponential and Reciprocal */
 -#define X86_FEATURE_AVX512CD	( 9*32+28) /* AVX-512 Conflict Detection */
 +#define X86_FEATURE_FSGSBASE	(9*32+ 0) /* {RD/WR}{FS/GS}BASE instructions*/
 +#define X86_FEATURE_TSC_ADJUST	(9*32+ 1) /* TSC adjustment MSR 0x3b */
 +#define X86_FEATURE_BMI1	(9*32+ 3) /* 1st group bit manipulation extensions */
 +#define X86_FEATURE_HLE		(9*32+ 4) /* Hardware Lock Elision */
 +#define X86_FEATURE_AVX2	(9*32+ 5) /* AVX2 instructions */
 +#define X86_FEATURE_SMEP	(9*32+ 7) /* Supervisor Mode Execution Protection */
 +#define X86_FEATURE_BMI2	(9*32+ 8) /* 2nd group bit manipulation extensions */
 +#define X86_FEATURE_ERMS	(9*32+ 9) /* Enhanced REP MOVSB/STOSB */
 +#define X86_FEATURE_INVPCID	(9*32+10) /* Invalidate Processor Context ID */
 +#define X86_FEATURE_RTM		(9*32+11) /* Restricted Transactional Memory */
 +#define X86_FEATURE_AVX512F	(9*32+16) /* AVX-512 Foundation */
 +#define X86_FEATURE_MPX		(9*32+14) /* Memory Protection Extension */
 +#define X86_FEATURE_RDSEED	(9*32+18) /* The RDSEED instruction */
 +#define X86_FEATURE_ADX		(9*32+19) /* The ADCX and ADOX instructions */
 +#define X86_FEATURE_SMAP	(9*32+20) /* Supervisor Mode Access Prevention */
 +#define X86_FEATURE_CLFLUSHOPT	(9*32+23) /* CLFLUSHOPT instruction */
 +#define X86_FEATURE_AVX512PF	(9*32+26) /* AVX-512 Prefetch */
 +#define X86_FEATURE_AVX512ER	(9*32+27) /* AVX-512 Exponential and Reciprocal */
 +#define X86_FEATURE_AVX512CD	(9*32+28) /* AVX-512 Conflict Detection */
  
+ /* Extended state features, CPUID level 0x0000000d:1 (eax), word 10 */
+ #define X86_FEATURE_XSAVEOPT	(10*32+ 0) /* XSAVEOPT */
+ #define X86_FEATURE_XSAVEC	(10*32+ 1) /* XSAVEC */
+ #define X86_FEATURE_XGETBV1	(10*32+ 2) /* XGETBV with ECX = 1 */
+ #define X86_FEATURE_XSAVES	(10*32+ 3) /* XSAVES/XRSTORS */
+ 
  /*
   * BUG word(s)
   */
* Unmerged path arch/x86/include/asm/cpufeature.h
diff --git a/arch/x86/include/uapi/asm/msr-index.h b/arch/x86/include/uapi/asm/msr-index.h
index b64ab4578684..4edf0400bf0b 100644
--- a/arch/x86/include/uapi/asm/msr-index.h
+++ b/arch/x86/include/uapi/asm/msr-index.h
@@ -299,6 +299,8 @@
 #define MSR_IA32_TSC_ADJUST             0x0000003b
 #define MSR_IA32_BNDCFGS		0x00000d90
 
+#define MSR_IA32_XSS			0x00000da0
+
 #define FEATURE_CONTROL_LOCKED				(1<<0)
 #define FEATURE_CONTROL_VMXON_ENABLED_INSIDE_SMX	(1<<1)
 #define FEATURE_CONTROL_VMXON_ENABLED_OUTSIDE_SMX	(1<<2)
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index a968de0cc209..0024048652cf 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -624,6 +624,15 @@ void get_cpu_cap(struct cpuinfo_x86 *c)
 		c->x86_capability[9] = ebx;
 	}
 
+	/* Extended state features: level 0x0000000d */
+	if (c->cpuid_level >= 0x0000000d) {
+		u32 eax, ebx, ecx, edx;
+
+		cpuid_count(0x0000000d, 1, &eax, &ebx, &ecx, &edx);
+
+		c->x86_capability[10] = eax;
+	}
+
 	/* AMD-defined flags: level 0x80000001 */
 	xlvl = cpuid_eax(0x80000000);
 	c->extended_cpuid_level = xlvl;
diff --git a/arch/x86/kernel/cpu/scattered.c b/arch/x86/kernel/cpu/scattered.c
index f2cc63e9cf08..6cc313dd9dce 100644
--- a/arch/x86/kernel/cpu/scattered.c
+++ b/arch/x86/kernel/cpu/scattered.c
@@ -38,7 +38,6 @@ void init_scattered_cpuid_features(struct cpuinfo_x86 *c)
 		{ X86_FEATURE_PTS,		CR_EAX, 6, 0x00000006, 0 },
 		{ X86_FEATURE_APERFMPERF,	CR_ECX, 0, 0x00000006, 0 },
 		{ X86_FEATURE_EPB,		CR_ECX, 3, 0x00000006, 0 },
-		{ X86_FEATURE_XSAVEOPT,		CR_EAX,	0, 0x0000000d, 1 },
 		{ X86_FEATURE_HW_PSTATE,	CR_EDX, 7, 0x80000007, 0 },
 		{ X86_FEATURE_CPB,		CR_EDX, 9, 0x80000007, 0 },
 		{ X86_FEATURE_PROC_FEEDBACK,	CR_EDX,11, 0x80000007, 0 },
