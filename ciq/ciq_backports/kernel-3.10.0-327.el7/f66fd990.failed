ALSA: line6: Drop interface argument from private_init and disconnect callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] line6: Drop interface argument from private_init and disconnect callbacks (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 96.05%
commit-author Takashi Iwai <tiwai@suse.de>
commit f66fd990c5db177d6b9f0eae301ca6b15882eb2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/f66fd990.failed

The interface argument is used just for retrieving the assigned
device, which can be already found in line6->ifcdev.  Drop them from
the callbacks.  Also, pass the usb id to private_init so that the
driver can deal with it there.  This is a preliminary work for the
further cleanup to move the whole allocation into driver.c.

	Tested-by: Chris Rorvick <chris@rorvick.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit f66fd990c5db177d6b9f0eae301ca6b15882eb2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/line6/driver.h
#	drivers/staging/line6/pod.c
#	drivers/staging/line6/toneport.c
#	drivers/staging/line6/variax.c
#	sound/usb/line6/driver.c
#	sound/usb/line6/podhd.c
diff --cc drivers/staging/line6/driver.h
index 4fd9dad58be7,4dc6c28e8224..000000000000
--- a/drivers/staging/line6/driver.h
+++ b/drivers/staging/line6/driver.h
@@@ -180,6 -155,9 +180,12 @@@ struct usb_line6 
  		 Length of message to be processed.
  	*/
  	int message_length;
++<<<<<<< HEAD:drivers/staging/line6/driver.h
++=======
+ 
+ 	void (*process_message)(struct usb_line6 *);
+ 	void (*disconnect)(struct usb_line6 *line6);
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/driver.h
  };
  
  extern char *line6_alloc_sysex_buffer(struct usb_line6 *line6, int code1,
@@@ -211,4 -179,17 +217,20 @@@ extern int line6_version_request_async(
  extern int line6_write_data(struct usb_line6 *line6, int address, void *data,
  			    size_t datalen);
  
++<<<<<<< HEAD:drivers/staging/line6/driver.h
++=======
+ int line6_probe(struct usb_interface *interface,
+ 		const struct usb_device_id *id,
+ 		struct usb_line6 *line6,
+ 		const struct line6_properties *properties,
+ 		int (*private_init)(struct usb_line6 *, const struct usb_device_id *id));
+ 
+ void line6_disconnect(struct usb_interface *interface);
+ 
+ #ifdef CONFIG_PM
+ int line6_suspend(struct usb_interface *interface, pm_message_t message);
+ int line6_resume(struct usb_interface *interface);
+ #endif
+ 
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/driver.h
  #endif
diff --cc drivers/staging/line6/pod.c
index 711d2c74641b,d1e952fbcae7..000000000000
--- a/drivers/staging/line6/pod.c
+++ b/drivers/staging/line6/pod.c
@@@ -323,17 -397,19 +323,24 @@@ static struct snd_kcontrol_new pod_cont
  };
  
  /*
 -	POD device disconnected.
 +	POD destructor.
  */
++<<<<<<< HEAD:drivers/staging/line6/pod.c
 +static void pod_destruct(struct usb_interface *interface)
 +{
 +	struct usb_line6_pod *pod = usb_get_intfdata(interface);
++=======
+ static void line6_pod_disconnect(struct usb_line6 *line6)
+ {
+ 	struct usb_line6_pod *pod = (struct usb_line6_pod *)line6;
+ 	struct device *dev = line6->ifcdev;
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/pod.c
  
 -	/* remove sysfs entries: */
 -	device_remove_file(dev, &dev_attr_device_id);
 -	device_remove_file(dev, &dev_attr_firmware_version);
 -	device_remove_file(dev, &dev_attr_serial_number);
 +	if (pod == NULL)
 +		return;
 +	line6_cleanup_audio(&pod->line6);
  
 -	del_timer_sync(&pod->startup_timer);
 +	del_timer(&pod->startup_timer);
  	cancel_work_sync(&pod->startup_work);
  }
  
@@@ -353,20 -435,20 +360,25 @@@ static int pod_create_files2(struct dev
  /*
  	 Try to init POD device.
  */
++<<<<<<< HEAD:drivers/staging/line6/pod.c
 +static int pod_try_init(struct usb_interface *interface,
 +			struct usb_line6_pod *pod)
++=======
+ static int pod_init(struct usb_line6 *line6,
+ 		    const struct usb_device_id *id)
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/pod.c
  {
  	int err;
 -	struct usb_line6_pod *pod = (struct usb_line6_pod *) line6;
 -
 -	line6->process_message = line6_pod_process_message;
 -	line6->disconnect = line6_pod_disconnect;
 +	struct usb_line6 *line6 = &pod->line6;
  
  	init_timer(&pod->startup_timer);
  	INIT_WORK(&pod->startup_work, pod_startup4);
  
 +	if ((interface == NULL) || (pod == NULL))
 +		return -ENODEV;
 +
  	/* create sysfs entries: */
- 	err = pod_create_files2(&interface->dev);
+ 	err = pod_create_files2(line6->ifcdev);
  	if (err < 0)
  		return err;
  
@@@ -427,24 -593,27 +439,33 @@@ void line6_pod_disconnect(struct usb_in
  {
  	struct usb_line6_pod *pod;
  
++<<<<<<< HEAD:drivers/staging/line6/pod.c
 +	if (interface == NULL)
 +		return;
 +	pod = usb_get_intfdata(interface);
 +
 +	if (pod != NULL) {
 +		struct snd_line6_pcm *line6pcm = pod->line6.line6pcm;
 +		struct device *dev = &interface->dev;
 +
 +		if (line6pcm != NULL)
 +			line6_pcm_disconnect(line6pcm);
 +
 +		if (dev != NULL) {
 +			/* remove sysfs entries: */
 +			device_remove_file(dev, &dev_attr_device_id);
 +			device_remove_file(dev, &dev_attr_firmware_version);
 +			device_remove_file(dev, &dev_attr_serial_number);
 +		}
 +	}
 +
 +	pod_destruct(interface);
++=======
+ 	pod = kzalloc(sizeof(*pod), GFP_KERNEL);
+ 	if (!pod)
+ 		return -ENODEV;
+ 	return line6_probe(interface, id, &pod->line6,
+ 			   &pod_properties_table[id->driver_info],
+ 			   pod_init);
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/pod.c
  }
 -
 -static struct usb_driver pod_driver = {
 -	.name = KBUILD_MODNAME,
 -	.probe = pod_probe,
 -	.disconnect = line6_disconnect,
 -#ifdef CONFIG_PM
 -	.suspend = line6_suspend,
 -	.resume = line6_resume,
 -	.reset_resume = line6_resume,
 -#endif
 -	.id_table = pod_id_table,
 -};
 -
 -module_usb_driver(pod_driver);
 -
 -MODULE_DESCRIPTION("Line 6 POD USB driver");
 -MODULE_LICENSE("GPL");
diff --cc drivers/staging/line6/toneport.c
index 4f8fc09cde1e,8e7020df0d10..000000000000
--- a/drivers/staging/line6/toneport.c
+++ b/drivers/staging/line6/toneport.c
@@@ -321,22 -385,34 +321,50 @@@ static void toneport_setup(struct usb_l
  }
  
  /*
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +	 Try to init Toneport device.
 +*/
 +static int toneport_try_init(struct usb_interface *interface,
 +			     struct usb_line6_toneport *toneport)
++=======
+ 	Toneport device disconnected.
+ */
+ static void line6_toneport_disconnect(struct usb_line6 *line6)
+ {
+ 	struct usb_line6_toneport *toneport =
+ 		(struct usb_line6_toneport *)line6;
+ 
+ 	del_timer_sync(&toneport->timer);
+ 
+ 	if (toneport_has_led(toneport->type))
+ 		toneport_remove_leds(toneport);
+ }
+ 
+ 
+ /*
+ 	 Try to init Toneport device.
+ */
+ static int toneport_init(struct usb_line6 *line6,
+ 			 const struct usb_device_id *id)
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/toneport.c
  {
  	int err;
 -	struct usb_line6_toneport *toneport =  (struct usb_line6_toneport *) line6;
 +	struct usb_line6 *line6 = &toneport->line6;
 +	struct usb_device *usbdev = line6->usbdev;
  
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +	if ((interface == NULL) || (toneport == NULL))
 +		return -ENODEV;
++=======
+ 	toneport->type = id->driver_info;
+ 	setup_timer(&toneport->timer, toneport_start_pcm,
+ 		    (unsigned long)toneport);
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/toneport.c
  
 -	line6->disconnect = line6_toneport_disconnect;
 +	/* initialize audio system: */
 +	err = line6_init_audio(line6);
 +	if (err < 0)
 +		return err;
  
  	/* initialize PCM subsystem: */
  	err = line6_init_pcm(line6, &toneport_pcm_properties);
@@@ -417,25 -560,27 +445,34 @@@ void line6_toneport_disconnect(struct u
  {
  	struct usb_line6_toneport *toneport;
  
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +	if (interface == NULL)
 +		return;
 +
 +	toneport = usb_get_intfdata(interface);
 +	del_timer_sync(&toneport->timer);
 +
 +	if (toneport_has_led(toneport->line6.usbdev->descriptor.idProduct)) {
 +		device_remove_file(&interface->dev, &dev_attr_led_red);
 +		device_remove_file(&interface->dev, &dev_attr_led_green);
 +	}
 +
 +	if (toneport != NULL) {
 +		struct snd_line6_pcm *line6pcm = toneport->line6.line6pcm;
 +
 +		if (line6pcm != NULL) {
 +			line6_pcm_release(line6pcm, LINE6_BITS_PCM_MONITOR);
 +			line6_pcm_disconnect(line6pcm);
 +		}
 +	}
 +
 +	toneport_destruct(interface);
++=======
+ 	toneport = kzalloc(sizeof(*toneport), GFP_KERNEL);
+ 	if (!toneport)
+ 		return -ENODEV;
+ 	return line6_probe(interface, id, &toneport->line6,
+ 			   &toneport_properties_table[id->driver_info],
+ 			   toneport_init);
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/toneport.c
  }
 -
 -static struct usb_driver toneport_driver = {
 -	.name = KBUILD_MODNAME,
 -	.probe = toneport_probe,
 -	.disconnect = line6_disconnect,
 -#ifdef CONFIG_PM
 -	.suspend = line6_suspend,
 -	.resume = line6_resume,
 -	.reset_resume = toneport_reset_resume,
 -#endif
 -	.id_table = toneport_id_table,
 -};
 -
 -module_usb_driver(toneport_driver);
 -
 -MODULE_DESCRIPTION("TonePort USB driver");
 -MODULE_LICENSE("GPL");
diff --cc drivers/staging/line6/variax.c
index bd0f694fa8d8,ba6e85eed2ba..000000000000
--- a/drivers/staging/line6/variax.c
+++ b/drivers/staging/line6/variax.c
@@@ -153,13 -210,9 +153,19 @@@ void line6_variax_process_message(struc
  /*
  	Variax destructor.
  */
++<<<<<<< HEAD:drivers/staging/line6/variax.c
 +static void variax_destruct(struct usb_interface *interface)
 +{
 +	struct usb_line6_variax *variax = usb_get_intfdata(interface);
 +
 +	if (variax == NULL)
 +		return;
 +	line6_cleanup_audio(&variax->line6);
++=======
+ static void line6_variax_disconnect(struct usb_line6 *line6)
+ {
+ 	struct usb_line6_variax *variax = (struct usb_line6_variax *)line6;
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/variax.c
  
  	del_timer(&variax->startup_timer1);
  	del_timer(&variax->startup_timer2);
@@@ -171,11 -224,15 +177,16 @@@
  /*
  	 Try to init workbench device.
  */
++<<<<<<< HEAD:drivers/staging/line6/variax.c
 +static int variax_try_init(struct usb_interface *interface,
 +			   struct usb_line6_variax *variax)
++=======
+ static int variax_init(struct usb_line6 *line6,
+ 		       const struct usb_device_id *id)
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/variax.c
  {
 -	struct usb_line6_variax *variax = (struct usb_line6_variax *) line6;
  	int err;
  
 -	line6->process_message = line6_variax_process_message;
 -	line6->disconnect = line6_variax_disconnect;
 -
  	init_timer(&variax->startup_timer1);
  	init_timer(&variax->startup_timer2);
  	INIT_WORK(&variax->startup_work, variax_startup6);
@@@ -207,27 -254,71 +218,36 @@@
  	return 0;
  }
  
 -#define LINE6_DEVICE(prod) USB_DEVICE(0x0e41, prod)
 -#define LINE6_IF_NUM(prod, n) USB_DEVICE_INTERFACE_NUMBER(0x0e41, prod, n)
 -
 -/* table of devices that work with this driver */
 -static const struct usb_device_id variax_id_table[] = {
 -	{ LINE6_IF_NUM(0x4650, 1), .driver_info = LINE6_PODXTLIVE_VARIAX },
 -	{ LINE6_DEVICE(0x534d),    .driver_info = LINE6_VARIAX },
 -	{}
 -};
 -
 -MODULE_DEVICE_TABLE(usb, variax_id_table);
 -
 -static const struct line6_properties variax_properties_table[] = {
 -	[LINE6_PODXTLIVE_VARIAX] = {
 -		.id = "PODxtLive",
 -		.name = "PODxt Live",
 -		.capabilities	= LINE6_CAP_CONTROL
 -				| LINE6_CAP_PCM
 -				| LINE6_CAP_HWMON,
 -		.altsetting = 1,
 -		.ep_ctrl_r = 0x86,
 -		.ep_ctrl_w = 0x05,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -	[LINE6_VARIAX] = {
 -		.id = "Variax",
 -		.name = "Variax Workbench",
 -		.capabilities	= LINE6_CAP_CONTROL,
 -		.altsetting = 1,
 -		.ep_ctrl_r = 0x82,
 -		.ep_ctrl_w = 0x01,
 -		/* no audio channel */
 -	}
 -};
 -
  /*
 -	Probe USB device.
 +	 Init workbench device (and clean up in case of failure).
  */
 -static int variax_probe(struct usb_interface *interface,
 -			const struct usb_device_id *id)
 +int line6_variax_init(struct usb_interface *interface,
 +		      struct usb_line6_variax *variax)
  {
 -	struct usb_line6_variax *variax;
 +	int err = variax_try_init(interface, variax);
  
++<<<<<<< HEAD:drivers/staging/line6/variax.c
 +	if (err < 0)
 +		variax_destruct(interface);
 +
 +	return err;
++=======
+ 	variax = kzalloc(sizeof(*variax), GFP_KERNEL);
+ 	if (!variax)
+ 		return -ENODEV;
+ 	return line6_probe(interface, id, &variax->line6,
+ 			   &variax_properties_table[id->driver_info],
+ 			   variax_init);
++>>>>>>> f66fd990c5db (ALSA: line6: Drop interface argument from private_init and disconnect callbacks):sound/usb/line6/variax.c
  }
  
 -static struct usb_driver variax_driver = {
 -	.name = KBUILD_MODNAME,
 -	.probe = variax_probe,
 -	.disconnect = line6_disconnect,
 -#ifdef CONFIG_PM
 -	.suspend = line6_suspend,
 -	.resume = line6_resume,
 -	.reset_resume = line6_resume,
 -#endif
 -	.id_table = variax_id_table,
 -};
 -
 -module_usb_driver(variax_driver);
 +/*
 +	Workbench device disconnected.
 +*/
 +void line6_variax_disconnect(struct usb_interface *interface)
 +{
 +	if (interface == NULL)
 +		return;
  
 -MODULE_DESCRIPTION("Vairax Workbench USB driver");
 -MODULE_LICENSE("GPL");
 +	variax_destruct(interface);
 +}
* Unmerged path sound/usb/line6/driver.c
* Unmerged path sound/usb/line6/podhd.c
* Unmerged path drivers/staging/line6/driver.h
* Unmerged path drivers/staging/line6/pod.c
* Unmerged path drivers/staging/line6/toneport.c
* Unmerged path drivers/staging/line6/variax.c
* Unmerged path sound/usb/line6/driver.c
* Unmerged path sound/usb/line6/podhd.c
