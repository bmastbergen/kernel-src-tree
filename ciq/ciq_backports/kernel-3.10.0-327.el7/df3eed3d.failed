s390/bpf: Fix ALU_NEG (A = -A)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [s390] bpf: Fix ALU_NEG (A = -A) (Hendrik Brueckner) [1193604]
Rebuild_FUZZ: 90.91%
commit-author Michael Holzheu <holzheu@linux.vnet.ibm.com>
commit df3eed3d282f2fe1ffb73d3545fcde4e9b80a0d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/df3eed3d.failed

Currently the LOAD NEGATIVE (lnr) instruction is used for ALU_NEG. This
instruction always loads the negative value. Therefore, if A is already
negative, it remains unchanged. To fix this use LOAD COMPLEMENT (lcr)
instead.

	Signed-off-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit df3eed3d282f2fe1ffb73d3545fcde4e9b80a0d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/net/bpf_jit_comp.c
diff --cc arch/s390/net/bpf_jit_comp.c
index b7792d499da6,8bc474fb52fd..000000000000
--- a/arch/s390/net/bpf_jit_comp.c
+++ b/arch/s390/net/bpf_jit_comp.c
@@@ -432,11 -430,11 +432,17 @@@ static int bpf_jit_insn(struct bpf_jit 
  		/* srl %r5,K */
  		EMIT4_DISP(0x88500000, K);
  		break;
++<<<<<<< HEAD
 +	case BPF_S_ALU_NEG: /* A = -A */
 +		/* lnr %r5,%r5 */
 +		EMIT2(0x1155);
++=======
+ 	case BPF_ALU | BPF_NEG: /* A = -A */
+ 		/* lcr %r5,%r5 */
+ 		EMIT2(0x1355);
++>>>>>>> df3eed3d282f (s390/bpf: Fix ALU_NEG (A = -A))
  		break;
 -	case BPF_JMP | BPF_JA: /* ip += K */
 +	case BPF_S_JMP_JA: /* ip += K */
  		offset = addrs[i + K] + jit->start - jit->prg;
  		EMIT4_PCREL(0xa7f40000, offset);
  		break;
* Unmerged path arch/s390/net/bpf_jit_comp.c
