bonding: More use of ether_addr_copy

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Joe Perches <joe@perches.com>
commit 2a7c183bc7ae798915c4bc58d3bf413fe466705b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2a7c183b.failed

It's smaller and faster for some architectures.

	Signed-off-by: Joe Perches <joe@perches.com>
	Reviewed-by: Ding Tianhong <dingtianhong@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2a7c183bc7ae798915c4bc58d3bf413fe466705b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_3ad.c
#	drivers/net/bonding/bond_alb.c
#	drivers/net/bonding/bond_main.c
diff --cc drivers/net/bonding/bond_3ad.c
index dc508c87249d,87348411bafe..000000000000
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@@ -2414,7 -2384,8 +2414,12 @@@ int __bond_3ad_get_active_agg_info(stru
  		ad_info->ports = aggregator->num_of_ports;
  		ad_info->actor_key = aggregator->actor_oper_aggregator_key;
  		ad_info->partner_key = aggregator->partner_oper_aggregator_key;
++<<<<<<< HEAD
 +		memcpy(ad_info->partner_system, aggregator->partner_system.mac_addr_value, ETH_ALEN);
++=======
+ 		ether_addr_copy(ad_info->partner_system,
+ 				aggregator->partner_system.mac_addr_value);
++>>>>>>> 2a7c183bc7ae (bonding: More use of ether_addr_copy)
  		return 0;
  	}
  
diff --cc drivers/net/bonding/bond_alb.c
index c0b6155b648d,97a43a20dae8..000000000000
--- a/drivers/net/bonding/bond_alb.c
+++ b/drivers/net/bonding/bond_alb.c
@@@ -1426,13 -1448,13 +1426,19 @@@ int bond_alb_xmit(struct sk_buff *skb, 
  	}
  
  	if (tx_slave && SLAVE_IS_OK(tx_slave)) {
++<<<<<<< HEAD
 +		if (tx_slave != bond->curr_active_slave) {
 +			memcpy(eth_data->h_source,
 +			       tx_slave->dev->dev_addr,
 +			       ETH_ALEN);
++=======
+ 		if (tx_slave != rcu_dereference(bond->curr_active_slave)) {
+ 			ether_addr_copy(eth_data->h_source,
+ 					tx_slave->dev->dev_addr);
++>>>>>>> 2a7c183bc7ae (bonding: More use of ether_addr_copy)
  		}
  
 -		bond_dev_queue_xmit(bond, skb, tx_slave->dev);
 -		goto out;
 +		res = bond_dev_queue_xmit(bond, skb, tx_slave->dev);
  	} else {
  		if (tx_slave) {
  			_lock_tx_hashtbl(bond);
diff --cc drivers/net/bonding/bond_main.c
index 1769905a03a5,71edf03544aa..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -895,12 -673,12 +895,18 @@@ static void bond_do_fail_over_mac(struc
  		write_unlock_bh(&bond->curr_slave_lock);
  
  		if (old_active) {
++<<<<<<< HEAD
 +			memcpy(tmp_mac, new_active->dev->dev_addr, ETH_ALEN);
 +			memcpy(saddr.sa_data, old_active->dev->dev_addr,
 +			       ETH_ALEN);
++=======
+ 			ether_addr_copy(tmp_mac, new_active->dev->dev_addr);
+ 			ether_addr_copy(saddr.sa_data,
+ 					old_active->dev->dev_addr);
++>>>>>>> 2a7c183bc7ae (bonding: More use of ether_addr_copy)
  			saddr.sa_family = new_active->dev->type;
  		} else {
 -			ether_addr_copy(saddr.sa_data, bond->dev->dev_addr);
 +			memcpy(saddr.sa_data, bond->dev->dev_addr, ETH_ALEN);
  			saddr.sa_family = bond->dev->type;
  		}
  
* Unmerged path drivers/net/bonding/bond_3ad.c
* Unmerged path drivers/net/bonding/bond_alb.c
* Unmerged path drivers/net/bonding/bond_main.c
