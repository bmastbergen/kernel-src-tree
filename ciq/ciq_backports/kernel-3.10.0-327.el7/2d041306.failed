hpsa: fix rmmod issues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Don Brace <don.brace@pmcs.com>
commit 2d041306b669e281427de7dd398e74335c9f5042
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2d041306.failed

The driver is calling hpsa_shutdown before calling scsi_remove_host.
hpsa_shutdown is disabling interrupts.

scsi_remove_host can trigger I/O operations, such as
SYNCHRONIZE CACHE when multipath is enabled which hang the system.

Call scsi_remove_host before calling hpsa_shutdown.

	Reviewed-by: Kevin Barnett <kevin.barnett@pmcs.com>
	Reviewed-by: Scott Teel <scott.teel@pmcs.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Signed-off-by: Don Brace <don.brace@pmcs.com>
	Signed-off-by: James Bottomley <JBottomley@Odin.com>
(cherry picked from commit 2d041306b669e281427de7dd398e74335c9f5042)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/hpsa.c
diff --cc drivers/scsi/hpsa.c
index c2d8bf98388f,40669f8dd0df..000000000000
--- a/drivers/scsi/hpsa.c
+++ b/drivers/scsi/hpsa.c
@@@ -6996,29 -8266,45 +6996,57 @@@ static void hpsa_remove_one(struct pci_
  	/* Get rid of any controller monitoring work items */
  	spin_lock_irqsave(&h->lock, flags);
  	h->remove_in_progress = 1;
 +	cancel_delayed_work(&h->monitor_ctlr_work);
  	spin_unlock_irqrestore(&h->lock, flags);
 -	cancel_delayed_work_sync(&h->monitor_ctlr_work);
 -	cancel_delayed_work_sync(&h->rescan_ctlr_work);
 -	destroy_workqueue(h->rescan_ctlr_wq);
 -	destroy_workqueue(h->resubmit_wq);
  
++<<<<<<< HEAD
 +	hpsa_unregister_scsi(h);	/* unhook from SCSI subsystem */
 +
 +	/* includes hpsa_free_irqs */
 +	/* includes hpsa_disable_interrupt_mode - pci_init 2 */
 +	hpsa_shutdown(pdev);
 +
 +	hpsa_free_device_info(h);
 +	hpsa_free_sg_chain_blocks(h);
 +	kfree(h->blockFetchTable);		/* perf 2 */
 +	hpsa_free_reply_queues(h);		/* perf 1 */
 +	hpsa_free_ioaccel1_cmd_and_bft(h);	/* perf 1 */
 +	hpsa_free_ioaccel2_cmd_and_bft(h);	/* perf 1 */
 +	hpsa_free_cmd_pool(h);			/* init_one 5 */
 +	kfree(h->hba_inquiry_data);
++=======
+ 	/*
+ 	 * Call before disabling interrupts.
+ 	 * scsi_remove_host can trigger I/O operations especially
+ 	 * when multipath is enabled. There can be SYNCHRONIZE CACHE
+ 	 * operations which cannot complete and will hang the system.
+ 	 */
+ 	if (h->scsi_host)
+ 		scsi_remove_host(h->scsi_host);		/* init_one 8 */
+ 	/* includes hpsa_free_irqs - init_one 4 */
+ 	/* includes hpsa_disable_interrupt_mode - pci_init 2 */
+ 	hpsa_shutdown(pdev);
+ 
+ 	hpsa_free_device_info(h);		/* scan */
+ 
+ 	kfree(h->hba_inquiry_data);			/* init_one 10 */
+ 	h->hba_inquiry_data = NULL;			/* init_one 10 */
+ 	hpsa_free_ioaccel2_sg_chain_blocks(h);
+ 	hpsa_free_performant_mode(h);			/* init_one 7 */
+ 	hpsa_free_sg_chain_blocks(h);			/* init_one 6 */
+ 	hpsa_free_cmd_pool(h);				/* init_one 5 */
+ 
+ 	/* hpsa_free_irqs already called via hpsa_shutdown init_one 4 */
+ 
+ 	scsi_host_put(h->scsi_host);			/* init_one 3 */
+ 	h->scsi_host = NULL;				/* init_one 3 */
++>>>>>>> 2d041306b669 (hpsa: fix rmmod issues)
  
  	/* includes hpsa_disable_interrupt_mode - pci_init 2 */
 -	hpsa_free_pci_init(h);				/* init_one 2.5 */
 +	hpsa_free_pci_init(h);
  
 -	free_percpu(h->lockup_detected);		/* init_one 2 */
 -	h->lockup_detected = NULL;			/* init_one 2 */
 -	/* (void) pci_disable_pcie_error_reporting(pdev); */	/* init_one 1 */
 -	kfree(h);					/* init_one 1 */
 +	free_percpu(h->lockup_detected);
 +	kfree(h);
  }
  
  static int hpsa_suspend(__attribute__((unused)) struct pci_dev *pdev,
* Unmerged path drivers/scsi/hpsa.c
