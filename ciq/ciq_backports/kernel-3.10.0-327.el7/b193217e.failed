alarmtimer: Get rid of unused return value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit b193217e6dc3f88b599b573b53e0e0f6671d969a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b193217e.failed

We want to get rid of the hrtimer_start() return value and the alarm
timer return value is nowhere used. Remove it.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Preeti U Murthy <preeti@linux.vnet.ibm.com>
	Cc: Viresh Kumar <viresh.kumar@linaro.org>
	Cc: Marcelo Tosatti <mtosatti@redhat.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: John Stultz <john.stultz@linaro.org>
Link: http://lkml.kernel.org/r/20150414203503.243910615@linutronix.de
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit b193217e6dc3f88b599b573b53e0e0f6671d969a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/alarmtimer.h
#	kernel/time/alarmtimer.c
diff --cc include/linux/alarmtimer.h
index 9069694e70eb,52f3b7da4f2d..000000000000
--- a/include/linux/alarmtimer.h
+++ b/include/linux/alarmtimer.h
@@@ -43,7 -43,9 +43,13 @@@ struct alarm 
  
  void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
  		enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
++<<<<<<< HEAD
 +int alarm_start(struct alarm *alarm, ktime_t start);
++=======
+ void alarm_start(struct alarm *alarm, ktime_t start);
+ void alarm_start_relative(struct alarm *alarm, ktime_t start);
+ void alarm_restart(struct alarm *alarm);
++>>>>>>> b193217e6dc3 (alarmtimer: Get rid of unused return value)
  int alarm_try_to_cancel(struct alarm *alarm);
  int alarm_cancel(struct alarm *alarm);
  
diff --cc kernel/time/alarmtimer.c
index 294bf4ef1f47,7fbba635a549..000000000000
--- a/kernel/time/alarmtimer.c
+++ b/kernel/time/alarmtimer.c
@@@ -318,11 -325,37 +317,40 @@@ void alarm_start(struct alarm *alarm, k
  	spin_lock_irqsave(&base->lock, flags);
  	alarm->node.expires = start;
  	alarmtimer_enqueue(base, alarm);
- 	ret = hrtimer_start(&alarm->timer, alarm->node.expires,
- 				HRTIMER_MODE_ABS);
+ 	hrtimer_start(&alarm->timer, alarm->node.expires, HRTIMER_MODE_ABS);
+ 	spin_unlock_irqrestore(&base->lock, flags);
+ }
++<<<<<<< HEAD
++=======
+ EXPORT_SYMBOL_GPL(alarm_start);
+ 
+ /**
+  * alarm_start_relative - Sets a relative alarm to fire
+  * @alarm: ptr to alarm to set
+  * @start: time relative to now to run the alarm
+  */
+ void alarm_start_relative(struct alarm *alarm, ktime_t start)
+ {
+ 	struct alarm_base *base = &alarm_bases[alarm->type];
+ 
+ 	start = ktime_add(start, base->gettime());
+ 	alarm_start(alarm, start);
+ }
+ EXPORT_SYMBOL_GPL(alarm_start_relative);
+ 
+ void alarm_restart(struct alarm *alarm)
+ {
+ 	struct alarm_base *base = &alarm_bases[alarm->type];
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&base->lock, flags);
+ 	hrtimer_set_expires(&alarm->timer, alarm->node.expires);
+ 	hrtimer_restart(&alarm->timer);
+ 	alarmtimer_enqueue(base, alarm);
  	spin_unlock_irqrestore(&base->lock, flags);
- 	return ret;
  }
+ EXPORT_SYMBOL_GPL(alarm_restart);
++>>>>>>> b193217e6dc3 (alarmtimer: Get rid of unused return value)
  
  /**
   * alarm_try_to_cancel - Tries to cancel an alarm timer
* Unmerged path include/linux/alarmtimer.h
* Unmerged path kernel/time/alarmtimer.c
