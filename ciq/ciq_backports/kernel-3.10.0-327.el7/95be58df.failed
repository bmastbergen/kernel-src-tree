firmware: dmi_scan: Use full dmi version for SMBIOS3

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [firmware] dmi_scan: Use full dmi version for SMBIOS3 (Jarod Wilson) [853192]
Rebuild_FUZZ: 89.36%
commit-author Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
commit 95be58df74a5b21e5a78e45fddb2fd59112524c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/95be58df.failed

New SMBIOS3 spec adds additional field for versioning - docrev.
The docrev identifies the revision of a specification implemented in
the table structures, so display SMBIOSv3 versions in format,
like "3.22.1".

In case of only 32 bit entry point for versions > 3 display
dmi version like "3.22.x" as we don't know the docrev.

In other cases display version like it was.

	Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
	Signed-off-by: Matt Fleming <matt.fleming@intel.com>
(cherry picked from commit 95be58df74a5b21e5a78e45fddb2fd59112524c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/dmi_scan.c
diff --cc drivers/firmware/dmi_scan.c
index aef094cb4e8f,c8f9e9d3bf91..000000000000
--- a/drivers/firmware/dmi_scan.c
+++ b/drivers/firmware/dmi_scan.c
@@@ -15,9 -15,9 +15,9 @@@
   * of and an antecedent to, SMBIOS, which stands for System
   * Management BIOS.  See further: http://www.dmtf.org/standards
   */
 -static const char dmi_empty_string[] = "        ";
 +static char dmi_empty_string[] = "        ";
  
- static u16 __initdata dmi_ver;
+ static u32 dmi_ver __initdata;
  /*
   * Catch too early calls to dmi_check_system():
   */
@@@ -540,14 -530,27 +542,20 @@@ static int __init dmi_smbios3_present(c
  {
  	if (memcmp(buf, "_SM3_", 5) == 0 &&
  	    buf[6] < 32 && dmi_checksum(buf, buf[6])) {
++<<<<<<< HEAD
 +		dmi_ver = get_unaligned_be16(buf + 7);
 +		dmi_num = 0;			/* No longer specified */
++=======
+ 		dmi_ver = get_unaligned_be32(buf + 6);
+ 		dmi_ver &= 0xFFFFFF;
++>>>>>>> 95be58df74a5 (firmware: dmi_scan: Use full dmi version for SMBIOS3)
  		dmi_len = get_unaligned_le32(buf + 12);
  		dmi_base = get_unaligned_le64(buf + 16);
  
 -		/*
 -		 * The 64-bit SMBIOS 3.0 entry point no longer has a field
 -		 * containing the number of structures present in the table.
 -		 * Instead, it defines the table size as a maximum size, and
 -		 * relies on the end-of-table structure type (#127) to be used
 -		 * to signal the end of the table.
 -		 * So let's define dmi_num as an upper bound as well: each
 -		 * structure has a 4 byte header, so dmi_len / 4 is an upper
 -		 * bound for the number of structures in the table.
 -		 */
 -		dmi_num = dmi_len / 4;
 -
  		if (dmi_walk_early(dmi_decode) == 0) {
- 			pr_info("SMBIOS %d.%d present.\n",
- 				dmi_ver >> 8, dmi_ver & 0xFF);
+ 			pr_info("SMBIOS %d.%d.%d present.\n",
+ 				dmi_ver >> 16, (dmi_ver >> 8) & 0xFF,
+ 				dmi_ver & 0xFF);
  			dmi_format_ids(dmi_ids_string, sizeof(dmi_ids_string));
  			pr_debug("DMI: %s\n", dmi_ids_string);
  			return 0;
* Unmerged path drivers/firmware/dmi_scan.c
