md/bitmap: protect clearing of ->bitmap by mddev->lock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [md] bitmap: protect clearing of ->bitmap by mddev->lock (Jes Sorensen) [1150149 1173510 1194720]
Rebuild_FUZZ: 97.14%
commit-author NeilBrown <neilb@suse.de>
commit 978a7a47cae79ae7a7b5a1e80bfcaef6ee700312
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/978a7a47.failed

This makes it safe to inspect the struct while holding only
the spinlock.

	Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 978a7a47cae79ae7a7b5a1e80bfcaef6ee700312)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.h
diff --cc drivers/md/md.h
index 8c92b269b12b,8770308a8052..000000000000
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@@ -391,6 -391,8 +391,11 @@@ struct mddev 
  	 *   rdev superblocks, events
  	 *   clearing MD_CHANGE_*
  	 *   in_sync - and related safemode and MD_CHANGE changes
++<<<<<<< HEAD
++=======
+ 	 *   pers (also protected by reconfig_mutex and pending IO).
+ 	 *   clearing ->bitmap
++>>>>>>> 978a7a47cae7 (md/bitmap: protect clearing of ->bitmap by mddev->lock)
  	 */
  	spinlock_t			lock;
  	wait_queue_head_t		sb_wait;	/* for waiting on superblock updates */
diff --git a/drivers/md/bitmap.c b/drivers/md/bitmap.c
index 0e10e8c8d42a..ebe506c1f75e 100644
--- a/drivers/md/bitmap.c
+++ b/drivers/md/bitmap.c
@@ -1606,7 +1606,9 @@ void bitmap_destroy(struct mddev *mddev)
 		return;
 
 	mutex_lock(&mddev->bitmap_info.mutex);
+	spin_lock(&mddev->lock);
 	mddev->bitmap = NULL; /* disconnect from the md device */
+	spin_unlock(&mddev->lock);
 	mutex_unlock(&mddev->bitmap_info.mutex);
 	if (mddev->thread)
 		mddev->thread->timeout = MAX_SCHEDULE_TIMEOUT;
* Unmerged path drivers/md/md.h
