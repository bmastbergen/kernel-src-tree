openvswitch: Fix key serialization.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] openvswitch: Fix key serialization (Jiri Benc) [1156461 1211348]
Rebuild_FUZZ: 98.55%
commit-author Pravin B Shelar <pshelar@nicira.com>
commit 26ad0b83587fb6e9a20eef388b0587ada3da5d06
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/26ad0b83.failed

Fix typo where mask is used rather than key.

Fixes: 74ed7ab9264("openvswitch: Add support for unique flow IDs.")
	Reported-by: Joe Stringer <joestringer@nicira.com>
	Signed-off-by: Pravin B Shelar <pshelar@nicira.com>
	Acked-by: Joe Stringer <joestringer@nicira.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 26ad0b83587fb6e9a20eef388b0587ada3da5d06)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/flow_netlink.c
diff --cc net/openvswitch/flow_netlink.c
index d35e6f9713da,216f20b90aa5..000000000000
--- a/net/openvswitch/flow_netlink.c
+++ b/net/openvswitch/flow_netlink.c
@@@ -1294,9 -1484,52 +1294,55 @@@ nla_put_failure
  	return -EMSGSIZE;
  }
  
++<<<<<<< HEAD
++=======
+ int ovs_nla_put_key(const struct sw_flow_key *swkey,
+ 		    const struct sw_flow_key *output, int attr, bool is_mask,
+ 		    struct sk_buff *skb)
+ {
+ 	int err;
+ 	struct nlattr *nla;
+ 
+ 	nla = nla_nest_start(skb, attr);
+ 	if (!nla)
+ 		return -EMSGSIZE;
+ 	err = __ovs_nla_put_key(swkey, output, is_mask, skb);
+ 	if (err)
+ 		return err;
+ 	nla_nest_end(skb, nla);
+ 
+ 	return 0;
+ }
+ 
+ /* Called with ovs_mutex or RCU read lock. */
+ int ovs_nla_put_identifier(const struct sw_flow *flow, struct sk_buff *skb)
+ {
+ 	if (ovs_identifier_is_ufid(&flow->id))
+ 		return nla_put(skb, OVS_FLOW_ATTR_UFID, flow->id.ufid_len,
+ 			       flow->id.ufid);
+ 
+ 	return ovs_nla_put_key(flow->id.unmasked_key, flow->id.unmasked_key,
+ 			       OVS_FLOW_ATTR_KEY, false, skb);
+ }
+ 
+ /* Called with ovs_mutex or RCU read lock. */
+ int ovs_nla_put_masked_key(const struct sw_flow *flow, struct sk_buff *skb)
+ {
+ 	return ovs_nla_put_key(&flow->key, &flow->key,
+ 				OVS_FLOW_ATTR_KEY, false, skb);
+ }
+ 
+ /* Called with ovs_mutex or RCU read lock. */
+ int ovs_nla_put_mask(const struct sw_flow *flow, struct sk_buff *skb)
+ {
+ 	return ovs_nla_put_key(&flow->key, &flow->mask->key,
+ 				OVS_FLOW_ATTR_MASK, true, skb);
+ }
+ 
++>>>>>>> 26ad0b83587f (openvswitch: Fix key serialization.)
  #define MAX_ACTIONS_BUFSIZE	(32 * 1024)
  
 -static struct sw_flow_actions *nla_alloc_flow_actions(int size, bool log)
 +struct sw_flow_actions *ovs_nla_alloc_flow_actions(int size)
  {
  	struct sw_flow_actions *sfa;
  
* Unmerged path net/openvswitch/flow_netlink.c
