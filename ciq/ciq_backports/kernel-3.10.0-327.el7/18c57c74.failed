be2net: use be_virtfn() instead of !be_physfn()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Kalesh AP <kalesh.purayil@emulex.com>
commit 18c57c74a12031144fd63a055a0a159ac218aaab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/18c57c74.failed

Use be_virtfn() to determine a VF instead of !be_physfn() for better
readability.

	Signed-off-by: Sathya Perla <sathya.perla@avagotech.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 18c57c74a12031144fd63a055a0a159ac218aaab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be_cmds.c
diff --cc drivers/net/ethernet/emulex/benet/be_cmds.c
index 70c5b7972640,f03ec2dcc971..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@@ -3324,6 -3267,24 +3324,27 @@@ err
  	return status;
  }
  
++<<<<<<< HEAD
++=======
+ static bool be_is_wol_excluded(struct be_adapter *adapter)
+ {
+ 	struct pci_dev *pdev = adapter->pdev;
+ 
+ 	if (be_virtfn(adapter))
+ 		return true;
+ 
+ 	switch (pdev->subsystem_device) {
+ 	case OC_SUBSYS_DEVICE_ID1:
+ 	case OC_SUBSYS_DEVICE_ID2:
+ 	case OC_SUBSYS_DEVICE_ID3:
+ 	case OC_SUBSYS_DEVICE_ID4:
+ 		return true;
+ 	default:
+ 		return false;
+ 	}
+ }
+ 
++>>>>>>> 18c57c74a120 (be2net: use be_virtfn() instead of !be_physfn())
  int be_cmd_get_acpi_wol_cap(struct be_adapter *adapter)
  {
  	struct be_mcc_wrb *wrb;
* Unmerged path drivers/net/ethernet/emulex/benet/be_cmds.c
diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index 8172279f9276..b0f8ef150f22 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -2852,7 +2852,7 @@ fail:
 	dev_warn(dev, "MSIx enable failed\n");
 
 	/* INTx is not supported in VFs, so fail probe if enable_msix fails */
-	if (!be_physfn(adapter))
+	if (be_virtfn(adapter))
 		return num_vec;
 	return 0;
 }
@@ -2899,7 +2899,7 @@ static int be_irq_register(struct be_adapter *adapter)
 		if (status == 0)
 			goto done;
 		/* INTx is not supported for VF */
-		if (!be_physfn(adapter))
+		if (be_virtfn(adapter))
 			return status;
 	}
 
@@ -3558,8 +3558,9 @@ static void BEx_get_resources(struct be_adapter *adapter,
 	 *    *only* if it is RSS-capable.
 	 */
 	if (BE2_chip(adapter) || use_sriov ||  (adapter->port_num > 1) ||
-	    !be_physfn(adapter) || (be_is_mc(adapter) &&
-	    !(adapter->function_caps & BE_FUNCTION_CAPS_RSS))) {
+	    be_virtfn(adapter) ||
+	    (be_is_mc(adapter) &&
+	     !(adapter->function_caps & BE_FUNCTION_CAPS_RSS))) {
 		res->max_tx_qs = 1;
 	} else if (adapter->function_caps & BE_FUNCTION_CAPS_SUPER_NIC) {
 		struct be_resources super_nic_res = {0};
@@ -4772,7 +4773,7 @@ static void be_unmap_pci_bars(struct be_adapter *adapter)
 
 static int db_bar(struct be_adapter *adapter)
 {
-	if (lancer_chip(adapter) || !be_physfn(adapter))
+	if (lancer_chip(adapter) || be_virtfn(adapter))
 		return 0;
 	else
 		return 4;
