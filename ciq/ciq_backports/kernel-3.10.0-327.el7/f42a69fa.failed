GFS2: Allocate reservation during splice_write

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Bob Peterson <rpeterso@redhat.com>
commit f42a69fadc4b90b5d59c4672dcbe52dcd4b6a117
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/f42a69fa.failed

This patch adds a GFS2-specific function for splice_write which
first calls function gfs2_rs_alloc to make sure a reservation
structure has been allocated before attempting to reserve blocks.

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
	Acked-by: Steven Whitehouse <swhiteho@redhat.com>
(cherry picked from commit f42a69fadc4b90b5d59c4672dcbe52dcd4b6a117)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/file.c
diff --cc fs/gfs2/file.c
index 6afdcc9b9f9c,556d774f9aa9..000000000000
--- a/fs/gfs2/file.c
+++ b/fs/gfs2/file.c
@@@ -1072,12 -1063,28 +1072,28 @@@ static int gfs2_flock(struct file *file
  	}
  }
  
+ static ssize_t gfs2_file_splice_write(struct pipe_inode_info *pipe,
+ 				      struct file *out, loff_t *ppos,
+ 				      size_t len, unsigned int flags)
+ {
+ 	int error;
+ 	struct gfs2_inode *ip = GFS2_I(out->f_mapping->host);
+ 
+ 	error = gfs2_rs_alloc(ip);
+ 	if (error)
+ 		return (ssize_t)error;
+ 
+ 	gfs2_size_hint(out, *ppos, len);
+ 
+ 	return iter_file_splice_write(pipe, out, ppos, len, flags);
+ }
+ 
  const struct file_operations gfs2_file_fops = {
  	.llseek		= gfs2_llseek,
 -	.read		= new_sync_read,
 -	.read_iter	= generic_file_read_iter,
 -	.write		= new_sync_write,
 -	.write_iter	= gfs2_file_write_iter,
 +	.read		= do_sync_read,
 +	.aio_read	= generic_file_aio_read,
 +	.write		= do_sync_write,
 +	.aio_write	= gfs2_file_aio_write,
  	.unlocked_ioctl	= gfs2_ioctl,
  	.mmap		= gfs2_mmap,
  	.open		= gfs2_open,
@@@ -1086,8 -1093,8 +1102,13 @@@
  	.lock		= gfs2_lock,
  	.flock		= gfs2_flock,
  	.splice_read	= generic_file_splice_read,
++<<<<<<< HEAD
 +	.splice_write	= generic_file_splice_write,
 +	.setlease	= gfs2_setlease,
++=======
+ 	.splice_write	= gfs2_file_splice_write,
+ 	.setlease	= simple_nosetlease,
++>>>>>>> f42a69fadc4b (GFS2: Allocate reservation during splice_write)
  	.fallocate	= gfs2_fallocate,
  };
  
@@@ -1116,7 -1123,7 +1137,11 @@@ const struct file_operations gfs2_file_
  	.release	= gfs2_release,
  	.fsync		= gfs2_fsync,
  	.splice_read	= generic_file_splice_read,
++<<<<<<< HEAD
 +	.splice_write	= generic_file_splice_write,
++=======
+ 	.splice_write	= gfs2_file_splice_write,
++>>>>>>> f42a69fadc4b (GFS2: Allocate reservation during splice_write)
  	.setlease	= generic_setlease,
  	.fallocate	= gfs2_fallocate,
  };
* Unmerged path fs/gfs2/file.c
