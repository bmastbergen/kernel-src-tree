iwlwifi: pcie: fix prepare card flow

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Emmanuel Grumbach <emmanuel.grumbach@intel.com>
commit c9fdec9f3970eeaa1b176422f46167f5f5158804
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c9fdec9f.failed

When the card is not owned by the PCIe bus, we need to
acquire ownership first. This flow is implemented in
iwl_pcie_prepare_card_hw. Because of a hardware bug, we
need to disable link power management before we can
request ownership otherwise the other user of the device
won't get notified that we are requesting the device which
will prevent us from acquire ownership.

Same holds for the down flow where we need to make sure
that any other potential user is notified that the driver
is going down.

CC: <stable@vger.kernel.org> [4.1]
	Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
(cherry picked from commit c9fdec9f3970eeaa1b176422f46167f5f5158804)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/iwlwifi/pcie/trans.c
diff --cc drivers/net/wireless/iwlwifi/pcie/trans.c
index 9788fc59c13b,9e144e71da0b..000000000000
--- a/drivers/net/wireless/iwlwifi/pcie/trans.c
+++ b/drivers/net/wireless/iwlwifi/pcie/trans.c
@@@ -377,6 -470,27 +377,30 @@@ static void iwl_pcie_apm_stop(struct iw
  {
  	IWL_DEBUG_INFO(trans, "Stop card, put in low power state\n");
  
++<<<<<<< HEAD
++=======
+ 	if (op_mode_leave) {
+ 		if (!test_bit(STATUS_DEVICE_ENABLED, &trans->status))
+ 			iwl_pcie_apm_init(trans);
+ 
+ 		/* inform ME that we are leaving */
+ 		if (trans->cfg->device_family == IWL_DEVICE_FAMILY_7000)
+ 			iwl_set_bits_prph(trans, APMG_PCIDEV_STT_REG,
+ 					  APMG_PCIDEV_STT_VAL_WAKE_ME);
+ 		else if (trans->cfg->device_family == IWL_DEVICE_FAMILY_8000) {
+ 			iwl_set_bit(trans, CSR_DBG_LINK_PWR_MGMT_REG,
+ 				    CSR_RESET_LINK_PWR_MGMT_DISABLED);
+ 			iwl_set_bit(trans, CSR_HW_IF_CONFIG_REG,
+ 				    CSR_HW_IF_CONFIG_REG_PREPARE |
+ 				    CSR_HW_IF_CONFIG_REG_ENABLE_PME);
+ 			mdelay(1);
+ 			iwl_clear_bit(trans, CSR_DBG_LINK_PWR_MGMT_REG,
+ 				      CSR_RESET_LINK_PWR_MGMT_DISABLED);
+ 		}
+ 		mdelay(5);
+ 	}
+ 
++>>>>>>> c9fdec9f3970 (iwlwifi: pcie: fix prepare card flow)
  	clear_bit(STATUS_DEVICE_ENABLED, &trans->status);
  
  	/* Stop device's DMA activity */
@@@ -481,8 -603,12 +511,12 @@@ static int iwl_pcie_prepare_card_hw(str
  		msleep(25);
  	}
  
 -	IWL_ERR(trans, "Couldn't prepare the card\n");
 +	IWL_DEBUG_INFO(trans, "got NIC after %d iterations\n", iter);
  
+ out:
+ 	iwl_clear_bit(trans, CSR_DBG_LINK_PWR_MGMT_REG,
+ 		      CSR_RESET_LINK_PWR_MGMT_DISABLED);
+ 
  	return ret;
  }
  
* Unmerged path drivers/net/wireless/iwlwifi/pcie/trans.c
