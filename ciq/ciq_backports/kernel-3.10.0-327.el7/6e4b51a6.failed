cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Hariprasad Shenai <hariprasad@chelsio.com>
commit 6e4b51a604f9722f6cf99b7b3d7b79b7b4336ece
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6e4b51a6.failed

This patch cleanups all queue related macros/register defines that are defined
in t4fw_api.h and the affected files.

	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6e4b51a604f9722f6cf99b7b3d7b79b7b4336ece)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/sge.c
#	drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
#	drivers/net/ethernet/chelsio/cxgb4vf/sge.c
#	drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c
#	drivers/scsi/csiostor/csio_mb.c
diff --cc drivers/net/ethernet/chelsio/cxgb4/sge.c
index b5afc3f0dd91,433560b8cb1b..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@@ -2297,20 -2297,20 +2297,27 @@@ int t4_sge_alloc_rxq(struct adapter *ad
  		return -ENOMEM;
  
  	memset(&c, 0, sizeof(c));
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_IQ_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_WRITE | FW_CMD_EXEC |
 +			    FW_IQ_CMD_PFN(adap->fn) | FW_IQ_CMD_VFN(0));
 +	c.alloc_to_len16 = htonl(FW_IQ_CMD_ALLOC | FW_IQ_CMD_IQSTART(1) |
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_IQ_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_WRITE_F | FW_CMD_EXEC_F |
+ 			    FW_IQ_CMD_PFN_V(adap->fn) | FW_IQ_CMD_VFN_V(0));
+ 	c.alloc_to_len16 = htonl(FW_IQ_CMD_ALLOC_F | FW_IQ_CMD_IQSTART_F |
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  				 FW_LEN16(c));
- 	c.type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE(FW_IQ_TYPE_FL_INT_CAP) |
- 		FW_IQ_CMD_IQASYNCH(fwevtq) | FW_IQ_CMD_VIID(pi->viid) |
- 		FW_IQ_CMD_IQANDST(intr_idx < 0) | FW_IQ_CMD_IQANUD(1) |
- 		FW_IQ_CMD_IQANDSTINDEX(intr_idx >= 0 ? intr_idx :
+ 	c.type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE_V(FW_IQ_TYPE_FL_INT_CAP) |
+ 		FW_IQ_CMD_IQASYNCH_V(fwevtq) | FW_IQ_CMD_VIID_V(pi->viid) |
+ 		FW_IQ_CMD_IQANDST_V(intr_idx < 0) | FW_IQ_CMD_IQANUD_V(1) |
+ 		FW_IQ_CMD_IQANDSTINDEX_V(intr_idx >= 0 ? intr_idx :
  							-intr_idx - 1));
- 	c.iqdroprss_to_iqesize = htons(FW_IQ_CMD_IQPCIECH(pi->tx_chan) |
- 		FW_IQ_CMD_IQGTSMODE |
- 		FW_IQ_CMD_IQINTCNTTHRESH(iq->pktcnt_idx) |
- 		FW_IQ_CMD_IQESIZE(ilog2(iq->iqe_len) - 4));
+ 	c.iqdroprss_to_iqesize = htons(FW_IQ_CMD_IQPCIECH_V(pi->tx_chan) |
+ 		FW_IQ_CMD_IQGTSMODE_F |
+ 		FW_IQ_CMD_IQINTCNTTHRESH_V(iq->pktcnt_idx) |
+ 		FW_IQ_CMD_IQESIZE_V(ilog2(iq->iqe_len) - 4));
  	c.iqsize = htons(iq->size);
  	c.iqaddr = cpu_to_be64(iq->phys_addr);
  
@@@ -2423,21 -2423,22 +2430,40 @@@ int t4_sge_alloc_eth_txq(struct adapte
  		return -ENOMEM;
  
  	memset(&c, 0, sizeof(c));
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_EQ_ETH_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_WRITE | FW_CMD_EXEC |
 +			    FW_EQ_ETH_CMD_PFN(adap->fn) | FW_EQ_ETH_CMD_VFN(0));
 +	c.alloc_to_len16 = htonl(FW_EQ_ETH_CMD_ALLOC |
 +				 FW_EQ_ETH_CMD_EQSTART | FW_LEN16(c));
 +	c.viid_pkd = htonl(FW_EQ_ETH_CMD_AUTOEQUEQE |
 +			   FW_EQ_ETH_CMD_VIID(pi->viid));
 +	c.fetchszm_to_iqid = htonl(FW_EQ_ETH_CMD_HOSTFCMODE(2) |
 +				   FW_EQ_ETH_CMD_PCIECHN(pi->tx_chan) |
 +				   FW_EQ_ETH_CMD_FETCHRO(1) |
 +				   FW_EQ_ETH_CMD_IQID(iqid));
 +	c.dcaen_to_eqsize = htonl(FW_EQ_ETH_CMD_FBMIN(2) |
 +				  FW_EQ_ETH_CMD_FBMAX(3) |
 +				  FW_EQ_ETH_CMD_CIDXFTHRESH(5) |
 +				  FW_EQ_ETH_CMD_EQSIZE(nentries));
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_ETH_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_WRITE_F | FW_CMD_EXEC_F |
+ 			    FW_EQ_ETH_CMD_PFN_V(adap->fn) |
+ 			    FW_EQ_ETH_CMD_VFN_V(0));
+ 	c.alloc_to_len16 = htonl(FW_EQ_ETH_CMD_ALLOC_F |
+ 				 FW_EQ_ETH_CMD_EQSTART_F | FW_LEN16(c));
+ 	c.viid_pkd = htonl(FW_EQ_ETH_CMD_AUTOEQUEQE_F |
+ 			   FW_EQ_ETH_CMD_VIID_V(pi->viid));
+ 	c.fetchszm_to_iqid = htonl(FW_EQ_ETH_CMD_HOSTFCMODE_V(2) |
+ 				   FW_EQ_ETH_CMD_PCIECHN_V(pi->tx_chan) |
+ 				   FW_EQ_ETH_CMD_FETCHRO_V(1) |
+ 				   FW_EQ_ETH_CMD_IQID_V(iqid));
+ 	c.dcaen_to_eqsize = htonl(FW_EQ_ETH_CMD_FBMIN_V(2) |
+ 				  FW_EQ_ETH_CMD_FBMAX_V(3) |
+ 				  FW_EQ_ETH_CMD_CIDXFTHRESH_V(5) |
+ 				  FW_EQ_ETH_CMD_EQSIZE_V(nentries));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	c.eqaddr = cpu_to_be64(txq->q.phys_addr);
  
  	ret = t4_wr_mbox(adap, adap->fn, &c, sizeof(c), &c);
@@@ -2476,22 -2477,22 +2502,32 @@@ int t4_sge_alloc_ctrl_txq(struct adapte
  	if (!txq->q.desc)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_EQ_CTRL_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_WRITE | FW_CMD_EXEC |
 +			    FW_EQ_CTRL_CMD_PFN(adap->fn) |
 +			    FW_EQ_CTRL_CMD_VFN(0));
 +	c.alloc_to_len16 = htonl(FW_EQ_CTRL_CMD_ALLOC |
 +				 FW_EQ_CTRL_CMD_EQSTART | FW_LEN16(c));
 +	c.cmpliqid_eqid = htonl(FW_EQ_CTRL_CMD_CMPLIQID(cmplqid));
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_CTRL_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_WRITE_F | FW_CMD_EXEC_F |
+ 			    FW_EQ_CTRL_CMD_PFN_V(adap->fn) |
+ 			    FW_EQ_CTRL_CMD_VFN_V(0));
+ 	c.alloc_to_len16 = htonl(FW_EQ_CTRL_CMD_ALLOC_F |
+ 				 FW_EQ_CTRL_CMD_EQSTART_F | FW_LEN16(c));
+ 	c.cmpliqid_eqid = htonl(FW_EQ_CTRL_CMD_CMPLIQID_V(cmplqid));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	c.physeqid_pkd = htonl(0);
- 	c.fetchszm_to_iqid = htonl(FW_EQ_CTRL_CMD_HOSTFCMODE(2) |
- 				   FW_EQ_CTRL_CMD_PCIECHN(pi->tx_chan) |
- 				   FW_EQ_CTRL_CMD_FETCHRO |
- 				   FW_EQ_CTRL_CMD_IQID(iqid));
- 	c.dcaen_to_eqsize = htonl(FW_EQ_CTRL_CMD_FBMIN(2) |
- 				  FW_EQ_CTRL_CMD_FBMAX(3) |
- 				  FW_EQ_CTRL_CMD_CIDXFTHRESH(5) |
- 				  FW_EQ_CTRL_CMD_EQSIZE(nentries));
+ 	c.fetchszm_to_iqid = htonl(FW_EQ_CTRL_CMD_HOSTFCMODE_V(2) |
+ 				   FW_EQ_CTRL_CMD_PCIECHN_V(pi->tx_chan) |
+ 				   FW_EQ_CTRL_CMD_FETCHRO_F |
+ 				   FW_EQ_CTRL_CMD_IQID_V(iqid));
+ 	c.dcaen_to_eqsize = htonl(FW_EQ_CTRL_CMD_FBMIN_V(2) |
+ 				  FW_EQ_CTRL_CMD_FBMAX_V(3) |
+ 				  FW_EQ_CTRL_CMD_CIDXFTHRESH_V(5) |
+ 				  FW_EQ_CTRL_CMD_EQSIZE_V(nentries));
  	c.eqaddr = cpu_to_be64(txq->q.phys_addr);
  
  	ret = t4_wr_mbox(adap, adap->fn, &c, sizeof(c), &c);
@@@ -2530,20 -2531,20 +2566,37 @@@ int t4_sge_alloc_ofld_txq(struct adapte
  		return -ENOMEM;
  
  	memset(&c, 0, sizeof(c));
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_EQ_OFLD_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_WRITE | FW_CMD_EXEC |
 +			    FW_EQ_OFLD_CMD_PFN(adap->fn) |
 +			    FW_EQ_OFLD_CMD_VFN(0));
 +	c.alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_ALLOC |
 +				 FW_EQ_OFLD_CMD_EQSTART | FW_LEN16(c));
 +	c.fetchszm_to_iqid = htonl(FW_EQ_OFLD_CMD_HOSTFCMODE(2) |
 +				   FW_EQ_OFLD_CMD_PCIECHN(pi->tx_chan) |
 +				   FW_EQ_OFLD_CMD_FETCHRO(1) |
 +				   FW_EQ_OFLD_CMD_IQID(iqid));
 +	c.dcaen_to_eqsize = htonl(FW_EQ_OFLD_CMD_FBMIN(2) |
 +				  FW_EQ_OFLD_CMD_FBMAX(3) |
 +				  FW_EQ_OFLD_CMD_CIDXFTHRESH(5) |
 +				  FW_EQ_OFLD_CMD_EQSIZE(nentries));
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_OFLD_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_WRITE_F | FW_CMD_EXEC_F |
+ 			    FW_EQ_OFLD_CMD_PFN_V(adap->fn) |
+ 			    FW_EQ_OFLD_CMD_VFN_V(0));
+ 	c.alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_ALLOC_F |
+ 				 FW_EQ_OFLD_CMD_EQSTART_F | FW_LEN16(c));
+ 	c.fetchszm_to_iqid = htonl(FW_EQ_OFLD_CMD_HOSTFCMODE_V(2) |
+ 				   FW_EQ_OFLD_CMD_PCIECHN_V(pi->tx_chan) |
+ 				   FW_EQ_OFLD_CMD_FETCHRO_F |
+ 				   FW_EQ_OFLD_CMD_IQID_V(iqid));
+ 	c.dcaen_to_eqsize = htonl(FW_EQ_OFLD_CMD_FBMIN_V(2) |
+ 				  FW_EQ_OFLD_CMD_FBMAX_V(3) |
+ 				  FW_EQ_OFLD_CMD_CIDXFTHRESH_V(5) |
+ 				  FW_EQ_OFLD_CMD_EQSIZE_V(nentries));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	c.eqaddr = cpu_to_be64(txq->q.phys_addr);
  
  	ret = t4_wr_mbox(adap, adap->fn, &c, sizeof(c), &c);
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
index 71d1d4fe87b2,da72814dff3d..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
@@@ -3654,11 -3714,11 +3654,19 @@@ int t4_iq_free(struct adapter *adap, un
  	struct fw_iq_cmd c;
  
  	memset(&c, 0, sizeof(c));
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_IQ_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_EXEC | FW_IQ_CMD_PFN(pf) |
 +			    FW_IQ_CMD_VFN(vf));
 +	c.alloc_to_len16 = htonl(FW_IQ_CMD_FREE | FW_LEN16(c));
 +	c.type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE(iqtype));
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_IQ_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_EXEC_F | FW_IQ_CMD_PFN_V(pf) |
+ 			    FW_IQ_CMD_VFN_V(vf));
+ 	c.alloc_to_len16 = htonl(FW_IQ_CMD_FREE_F | FW_LEN16(c));
+ 	c.type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE_V(iqtype));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	c.iqid = htons(iqid);
  	c.fl0id = htons(fl0id);
  	c.fl1id = htons(fl1id);
@@@ -3681,11 -3741,11 +3689,19 @@@ int t4_eth_eq_free(struct adapter *adap
  	struct fw_eq_eth_cmd c;
  
  	memset(&c, 0, sizeof(c));
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_EQ_ETH_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_EXEC | FW_EQ_ETH_CMD_PFN(pf) |
 +			    FW_EQ_ETH_CMD_VFN(vf));
 +	c.alloc_to_len16 = htonl(FW_EQ_ETH_CMD_FREE | FW_LEN16(c));
 +	c.eqid_pkd = htonl(FW_EQ_ETH_CMD_EQID(eqid));
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_ETH_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_EXEC_F | FW_EQ_ETH_CMD_PFN_V(pf) |
+ 			    FW_EQ_ETH_CMD_VFN_V(vf));
+ 	c.alloc_to_len16 = htonl(FW_EQ_ETH_CMD_FREE_F | FW_LEN16(c));
+ 	c.eqid_pkd = htonl(FW_EQ_ETH_CMD_EQID_V(eqid));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	return t4_wr_mbox(adap, mbox, &c, sizeof(c), NULL);
  }
  
@@@ -3705,11 -3765,11 +3721,19 @@@ int t4_ctrl_eq_free(struct adapter *ada
  	struct fw_eq_ctrl_cmd c;
  
  	memset(&c, 0, sizeof(c));
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_EQ_CTRL_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_EXEC | FW_EQ_CTRL_CMD_PFN(pf) |
 +			    FW_EQ_CTRL_CMD_VFN(vf));
 +	c.alloc_to_len16 = htonl(FW_EQ_CTRL_CMD_FREE | FW_LEN16(c));
 +	c.cmpliqid_eqid = htonl(FW_EQ_CTRL_CMD_EQID(eqid));
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_CTRL_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_EXEC_F | FW_EQ_CTRL_CMD_PFN_V(pf) |
+ 			    FW_EQ_CTRL_CMD_VFN_V(vf));
+ 	c.alloc_to_len16 = htonl(FW_EQ_CTRL_CMD_FREE_F | FW_LEN16(c));
+ 	c.cmpliqid_eqid = htonl(FW_EQ_CTRL_CMD_EQID_V(eqid));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	return t4_wr_mbox(adap, mbox, &c, sizeof(c), NULL);
  }
  
@@@ -3729,11 -3789,11 +3753,19 @@@ int t4_ofld_eq_free(struct adapter *ada
  	struct fw_eq_ofld_cmd c;
  
  	memset(&c, 0, sizeof(c));
++<<<<<<< HEAD
 +	c.op_to_vfn = htonl(FW_CMD_OP(FW_EQ_OFLD_CMD) | FW_CMD_REQUEST |
 +			    FW_CMD_EXEC | FW_EQ_OFLD_CMD_PFN(pf) |
 +			    FW_EQ_OFLD_CMD_VFN(vf));
 +	c.alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_FREE | FW_LEN16(c));
 +	c.eqid_pkd = htonl(FW_EQ_OFLD_CMD_EQID(eqid));
++=======
+ 	c.op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_OFLD_CMD) | FW_CMD_REQUEST_F |
+ 			    FW_CMD_EXEC_F | FW_EQ_OFLD_CMD_PFN_V(pf) |
+ 			    FW_EQ_OFLD_CMD_VFN_V(vf));
+ 	c.alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_FREE_F | FW_LEN16(c));
+ 	c.eqid_pkd = htonl(FW_EQ_OFLD_CMD_EQID_V(eqid));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	return t4_wr_mbox(adap, mbox, &c, sizeof(c), NULL);
  }
  
diff --cc drivers/net/ethernet/chelsio/cxgb4vf/sge.c
index 4e4e43e07043,045301d336bb..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
@@@ -2087,26 -2088,26 +2087,35 @@@ int t4vf_sge_alloc_rxq(struct adapter *
  	 * into OS-independent common code ...
  	 */
  	memset(&cmd, 0, sizeof(cmd));
++<<<<<<< HEAD
 +	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP(FW_IQ_CMD) |
 +				    FW_CMD_REQUEST |
 +				    FW_CMD_WRITE |
 +				    FW_CMD_EXEC);
 +	cmd.alloc_to_len16 = cpu_to_be32(FW_IQ_CMD_ALLOC |
 +					 FW_IQ_CMD_IQSTART(1) |
++=======
+ 	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP_V(FW_IQ_CMD) |
+ 				    FW_CMD_REQUEST_F |
+ 				    FW_CMD_WRITE_F |
+ 				    FW_CMD_EXEC_F);
+ 	cmd.alloc_to_len16 = cpu_to_be32(FW_IQ_CMD_ALLOC_F |
+ 					 FW_IQ_CMD_IQSTART_F |
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  					 FW_LEN16(cmd));
  	cmd.type_to_iqandstindex =
- 		cpu_to_be32(FW_IQ_CMD_TYPE(FW_IQ_TYPE_FL_INT_CAP) |
- 			    FW_IQ_CMD_IQASYNCH(iqasynch) |
- 			    FW_IQ_CMD_VIID(pi->viid) |
- 			    FW_IQ_CMD_IQANDST(iqandst) |
- 			    FW_IQ_CMD_IQANUS(1) |
- 			    FW_IQ_CMD_IQANUD(SGE_UPDATEDEL_INTR) |
- 			    FW_IQ_CMD_IQANDSTINDEX(intr_dest));
+ 		cpu_to_be32(FW_IQ_CMD_TYPE_V(FW_IQ_TYPE_FL_INT_CAP) |
+ 			    FW_IQ_CMD_IQASYNCH_V(iqasynch) |
+ 			    FW_IQ_CMD_VIID_V(pi->viid) |
+ 			    FW_IQ_CMD_IQANDST_V(iqandst) |
+ 			    FW_IQ_CMD_IQANUS_V(1) |
+ 			    FW_IQ_CMD_IQANUD_V(SGE_UPDATEDEL_INTR) |
+ 			    FW_IQ_CMD_IQANDSTINDEX_V(intr_dest));
  	cmd.iqdroprss_to_iqesize =
- 		cpu_to_be16(FW_IQ_CMD_IQPCIECH(pi->port_id) |
- 			    FW_IQ_CMD_IQGTSMODE |
- 			    FW_IQ_CMD_IQINTCNTTHRESH(rspq->pktcnt_idx) |
- 			    FW_IQ_CMD_IQESIZE(ilog2(rspq->iqe_len) - 4));
+ 		cpu_to_be16(FW_IQ_CMD_IQPCIECH_V(pi->port_id) |
+ 			    FW_IQ_CMD_IQGTSMODE_F |
+ 			    FW_IQ_CMD_IQINTCNTTHRESH_V(rspq->pktcnt_idx) |
+ 			    FW_IQ_CMD_IQESIZE_V(ilog2(rspq->iqe_len) - 4));
  	cmd.iqsize = cpu_to_be16(rspq->size);
  	cmd.iqaddr = cpu_to_be64(rspq->phys_addr);
  
@@@ -2250,24 -2251,25 +2259,34 @@@ int t4vf_sge_alloc_eth_txq(struct adapt
  	 * into the common code ...
  	 */
  	memset(&cmd, 0, sizeof(cmd));
++<<<<<<< HEAD
 +	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP(FW_EQ_ETH_CMD) |
 +				    FW_CMD_REQUEST |
 +				    FW_CMD_WRITE |
 +				    FW_CMD_EXEC);
 +	cmd.alloc_to_len16 = cpu_to_be32(FW_EQ_ETH_CMD_ALLOC |
 +					 FW_EQ_ETH_CMD_EQSTART |
++=======
+ 	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP_V(FW_EQ_ETH_CMD) |
+ 				    FW_CMD_REQUEST_F |
+ 				    FW_CMD_WRITE_F |
+ 				    FW_CMD_EXEC_F);
+ 	cmd.alloc_to_len16 = cpu_to_be32(FW_EQ_ETH_CMD_ALLOC_F |
+ 					 FW_EQ_ETH_CMD_EQSTART_F |
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  					 FW_LEN16(cmd));
- 	cmd.viid_pkd = cpu_to_be32(FW_EQ_ETH_CMD_AUTOEQUEQE |
- 				   FW_EQ_ETH_CMD_VIID(pi->viid));
+ 	cmd.viid_pkd = cpu_to_be32(FW_EQ_ETH_CMD_AUTOEQUEQE_F |
+ 				   FW_EQ_ETH_CMD_VIID_V(pi->viid));
  	cmd.fetchszm_to_iqid =
- 		cpu_to_be32(FW_EQ_ETH_CMD_HOSTFCMODE(SGE_HOSTFCMODE_STPG) |
- 			    FW_EQ_ETH_CMD_PCIECHN(pi->port_id) |
- 			    FW_EQ_ETH_CMD_IQID(iqid));
+ 		cpu_to_be32(FW_EQ_ETH_CMD_HOSTFCMODE_V(SGE_HOSTFCMODE_STPG) |
+ 			    FW_EQ_ETH_CMD_PCIECHN_V(pi->port_id) |
+ 			    FW_EQ_ETH_CMD_IQID_V(iqid));
  	cmd.dcaen_to_eqsize =
- 		cpu_to_be32(FW_EQ_ETH_CMD_FBMIN(SGE_FETCHBURSTMIN_64B) |
- 			    FW_EQ_ETH_CMD_FBMAX(SGE_FETCHBURSTMAX_512B) |
- 			    FW_EQ_ETH_CMD_CIDXFTHRESH(SGE_CIDXFLUSHTHRESH_32) |
- 			    FW_EQ_ETH_CMD_EQSIZE(nentries));
+ 		cpu_to_be32(FW_EQ_ETH_CMD_FBMIN_V(SGE_FETCHBURSTMIN_64B) |
+ 			    FW_EQ_ETH_CMD_FBMAX_V(SGE_FETCHBURSTMAX_512B) |
+ 			    FW_EQ_ETH_CMD_CIDXFTHRESH_V(
+ 						SGE_CIDXFLUSHTHRESH_32) |
+ 			    FW_EQ_ETH_CMD_EQSIZE_V(nentries));
  	cmd.eqaddr = cpu_to_be64(txq->q.phys_addr);
  
  	/*
diff --cc drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c
index 1e896b923234,5d3bd8db7ea6..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c
+++ b/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c
@@@ -1299,13 -1299,13 +1299,20 @@@ int t4vf_iq_free(struct adapter *adapte
  	struct fw_iq_cmd cmd;
  
  	memset(&cmd, 0, sizeof(cmd));
++<<<<<<< HEAD
 +	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP(FW_IQ_CMD) |
 +				    FW_CMD_REQUEST |
 +				    FW_CMD_EXEC);
 +	cmd.alloc_to_len16 = cpu_to_be32(FW_IQ_CMD_FREE |
++=======
+ 	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP_V(FW_IQ_CMD) |
+ 				    FW_CMD_REQUEST_F |
+ 				    FW_CMD_EXEC_F);
+ 	cmd.alloc_to_len16 = cpu_to_be32(FW_IQ_CMD_FREE_F |
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  					 FW_LEN16(cmd));
  	cmd.type_to_iqandstindex =
- 		cpu_to_be32(FW_IQ_CMD_TYPE(iqtype));
+ 		cpu_to_be32(FW_IQ_CMD_TYPE_V(iqtype));
  
  	cmd.iqid = cpu_to_be16(iqid);
  	cmd.fl0id = cpu_to_be16(fl0id);
@@@ -1325,12 -1325,12 +1332,19 @@@ int t4vf_eth_eq_free(struct adapter *ad
  	struct fw_eq_eth_cmd cmd;
  
  	memset(&cmd, 0, sizeof(cmd));
++<<<<<<< HEAD
 +	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP(FW_EQ_ETH_CMD) |
 +				    FW_CMD_REQUEST |
 +				    FW_CMD_EXEC);
 +	cmd.alloc_to_len16 = cpu_to_be32(FW_EQ_ETH_CMD_FREE |
++=======
+ 	cmd.op_to_vfn = cpu_to_be32(FW_CMD_OP_V(FW_EQ_ETH_CMD) |
+ 				    FW_CMD_REQUEST_F |
+ 				    FW_CMD_EXEC_F);
+ 	cmd.alloc_to_len16 = cpu_to_be32(FW_EQ_ETH_CMD_FREE_F |
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  					 FW_LEN16(cmd));
- 	cmd.eqid_pkd = cpu_to_be32(FW_EQ_ETH_CMD_EQID(eqid));
+ 	cmd.eqid_pkd = cpu_to_be32(FW_EQ_ETH_CMD_EQID_V(eqid));
  	return t4vf_wr_mbox(adapter, &cmd, sizeof(cmd), NULL);
  }
  
diff --cc drivers/scsi/csiostor/csio_mb.c
index 15b635142546,5a514b6bc8ec..000000000000
--- a/drivers/scsi/csiostor/csio_mb.c
+++ b/drivers/scsi/csiostor/csio_mb.c
@@@ -443,18 -443,18 +443,28 @@@ csio_mb_iq_alloc(struct csio_hw *hw, st
  
  	CSIO_INIT_MBP(mbp, cmdp, mb_tmo, priv, cbfn, 1);
  
++<<<<<<< HEAD
 +	cmdp->op_to_vfn = htonl(FW_CMD_OP(FW_IQ_CMD)		|
 +				FW_CMD_REQUEST | FW_CMD_EXEC	|
 +				FW_IQ_CMD_PFN(iq_params->pfn)	|
 +				FW_IQ_CMD_VFN(iq_params->vfn));
 +
 +	cmdp->alloc_to_len16 = htonl(FW_IQ_CMD_ALLOC		|
 +				FW_CMD_LEN16(sizeof(*cmdp) / 16));
++=======
+ 	cmdp->op_to_vfn = htonl(FW_CMD_OP_V(FW_IQ_CMD)		|
+ 				FW_CMD_REQUEST_F | FW_CMD_EXEC_F	|
+ 				FW_IQ_CMD_PFN_V(iq_params->pfn)	|
+ 				FW_IQ_CMD_VFN_V(iq_params->vfn));
+ 
+ 	cmdp->alloc_to_len16 = htonl(FW_IQ_CMD_ALLOC_F		|
+ 				FW_CMD_LEN16_V(sizeof(*cmdp) / 16));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  
  	cmdp->type_to_iqandstindex = htonl(
- 				FW_IQ_CMD_VIID(iq_params->viid)	|
- 				FW_IQ_CMD_TYPE(iq_params->type)	|
- 				FW_IQ_CMD_IQASYNCH(iq_params->iqasynch));
+ 				FW_IQ_CMD_VIID_V(iq_params->viid)	|
+ 				FW_IQ_CMD_TYPE_V(iq_params->type)	|
+ 				FW_IQ_CMD_IQASYNCH_V(iq_params->iqasynch));
  
  	cmdp->fl0size = htons(iq_params->fl0size);
  	cmdp->fl0size = htons(iq_params->fl1size);
@@@ -499,12 -499,12 +509,19 @@@ csio_mb_iq_write(struct csio_hw *hw, st
  	if (!cascaded_req)
  		CSIO_INIT_MBP(mbp, cmdp, mb_tmo, priv, cbfn, 1);
  
++<<<<<<< HEAD
 +	cmdp->op_to_vfn |= htonl(FW_CMD_OP(FW_IQ_CMD)		|
 +				FW_CMD_REQUEST | FW_CMD_WRITE	|
 +				FW_IQ_CMD_PFN(iq_params->pfn)	|
 +				FW_IQ_CMD_VFN(iq_params->vfn));
++=======
+ 	cmdp->op_to_vfn |= htonl(FW_CMD_OP_V(FW_IQ_CMD)		|
+ 				FW_CMD_REQUEST_F | FW_CMD_WRITE_F	|
+ 				FW_IQ_CMD_PFN_V(iq_params->pfn)	|
+ 				FW_IQ_CMD_VFN_V(iq_params->vfn));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	cmdp->alloc_to_len16 |= htonl(iq_start_stop |
 -				FW_CMD_LEN16_V(sizeof(*cmdp) / 16));
 +				FW_CMD_LEN16(sizeof(*cmdp) / 16));
  	cmdp->iqid |= htons(iq_params->iqid);
  	cmdp->fl0id |= htons(iq_params->fl0id);
  	cmdp->fl1id |= htons(iq_params->fl1id);
@@@ -622,13 -622,13 +639,23 @@@ csio_mb_iq_free(struct csio_hw *hw, str
  
  	CSIO_INIT_MBP(mbp, cmdp, mb_tmo, priv, cbfn, 1);
  
++<<<<<<< HEAD
 +	cmdp->op_to_vfn = htonl(FW_CMD_OP(FW_IQ_CMD)		|
 +				FW_CMD_REQUEST | FW_CMD_EXEC	|
 +				FW_IQ_CMD_PFN(iq_params->pfn)	|
 +				FW_IQ_CMD_VFN(iq_params->vfn));
 +	cmdp->alloc_to_len16 = htonl(FW_IQ_CMD_FREE		|
 +				FW_CMD_LEN16(sizeof(*cmdp) / 16));
 +	cmdp->type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE(iq_params->type));
++=======
+ 	cmdp->op_to_vfn = htonl(FW_CMD_OP_V(FW_IQ_CMD)		|
+ 				FW_CMD_REQUEST_F | FW_CMD_EXEC_F	|
+ 				FW_IQ_CMD_PFN_V(iq_params->pfn)	|
+ 				FW_IQ_CMD_VFN_V(iq_params->vfn));
+ 	cmdp->alloc_to_len16 = htonl(FW_IQ_CMD_FREE_F		|
+ 				FW_CMD_LEN16_V(sizeof(*cmdp) / 16));
+ 	cmdp->type_to_iqandstindex = htonl(FW_IQ_CMD_TYPE_V(iq_params->type));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  
  	cmdp->iqid = htons(iq_params->iqid);
  	cmdp->fl0id = htons(iq_params->fl0id);
@@@ -657,12 -657,12 +684,21 @@@ csio_mb_eq_ofld_alloc(struct csio_hw *h
  	struct fw_eq_ofld_cmd *cmdp = (struct fw_eq_ofld_cmd *)(mbp->mb);
  
  	CSIO_INIT_MBP(mbp, cmdp, mb_tmo, priv, cbfn, 1);
++<<<<<<< HEAD
 +	cmdp->op_to_vfn = htonl(FW_CMD_OP(FW_EQ_OFLD_CMD)		|
 +				FW_CMD_REQUEST | FW_CMD_EXEC		|
 +				FW_EQ_OFLD_CMD_PFN(eq_ofld_params->pfn) |
 +				FW_EQ_OFLD_CMD_VFN(eq_ofld_params->vfn));
 +	cmdp->alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_ALLOC	|
 +				FW_CMD_LEN16(sizeof(*cmdp) / 16));
++=======
+ 	cmdp->op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_OFLD_CMD)		|
+ 				FW_CMD_REQUEST_F | FW_CMD_EXEC_F	|
+ 				FW_EQ_OFLD_CMD_PFN_V(eq_ofld_params->pfn) |
+ 				FW_EQ_OFLD_CMD_VFN_V(eq_ofld_params->vfn));
+ 	cmdp->alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_ALLOC_F	|
+ 				FW_CMD_LEN16_V(sizeof(*cmdp) / 16));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  
  } /* csio_mb_eq_ofld_alloc */
  
@@@ -704,29 -705,29 +741,36 @@@ csio_mb_eq_ofld_write(struct csio_hw *h
  	if (!cascaded_req)
  		CSIO_INIT_MBP(mbp, cmdp, mb_tmo, priv, cbfn, 1);
  
++<<<<<<< HEAD
 +	cmdp->op_to_vfn |= htonl(FW_CMD_OP(FW_EQ_OFLD_CMD)	|
 +				FW_CMD_REQUEST | FW_CMD_WRITE	|
 +				FW_EQ_OFLD_CMD_PFN(eq_ofld_params->pfn) |
 +				FW_EQ_OFLD_CMD_VFN(eq_ofld_params->vfn));
++=======
+ 	cmdp->op_to_vfn |= htonl(FW_CMD_OP_V(FW_EQ_OFLD_CMD)	|
+ 				FW_CMD_REQUEST_F | FW_CMD_WRITE_F	|
+ 				FW_EQ_OFLD_CMD_PFN_V(eq_ofld_params->pfn) |
+ 				FW_EQ_OFLD_CMD_VFN_V(eq_ofld_params->vfn));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  	cmdp->alloc_to_len16 |= htonl(eq_start_stop		|
 -				      FW_CMD_LEN16_V(sizeof(*cmdp) / 16));
 +				      FW_CMD_LEN16(sizeof(*cmdp) / 16));
  
- 	cmdp->eqid_pkd |= htonl(FW_EQ_OFLD_CMD_EQID(eq_ofld_params->eqid));
+ 	cmdp->eqid_pkd |= htonl(FW_EQ_OFLD_CMD_EQID_V(eq_ofld_params->eqid));
  
  	cmdp->fetchszm_to_iqid |= htonl(
- 		FW_EQ_OFLD_CMD_HOSTFCMODE(eq_ofld_params->hostfcmode)	|
- 		FW_EQ_OFLD_CMD_CPRIO(eq_ofld_params->cprio)		|
- 		FW_EQ_OFLD_CMD_PCIECHN(eq_ofld_params->pciechn)		|
- 		FW_EQ_OFLD_CMD_IQID(eq_ofld_params->iqid));
+ 		FW_EQ_OFLD_CMD_HOSTFCMODE_V(eq_ofld_params->hostfcmode)	|
+ 		FW_EQ_OFLD_CMD_CPRIO_V(eq_ofld_params->cprio)		|
+ 		FW_EQ_OFLD_CMD_PCIECHN_V(eq_ofld_params->pciechn)	|
+ 		FW_EQ_OFLD_CMD_IQID_V(eq_ofld_params->iqid));
  
  	cmdp->dcaen_to_eqsize |= htonl(
- 		FW_EQ_OFLD_CMD_DCAEN(eq_ofld_params->dcaen)		|
- 		FW_EQ_OFLD_CMD_DCACPU(eq_ofld_params->dcacpu)		|
- 		FW_EQ_OFLD_CMD_FBMIN(eq_ofld_params->fbmin)		|
- 		FW_EQ_OFLD_CMD_FBMAX(eq_ofld_params->fbmax)		|
- 		FW_EQ_OFLD_CMD_CIDXFTHRESHO(eq_ofld_params->cidxfthresho) |
- 		FW_EQ_OFLD_CMD_CIDXFTHRESH(eq_ofld_params->cidxfthresh) |
- 		FW_EQ_OFLD_CMD_EQSIZE(eq_ofld_params->eqsize));
+ 		FW_EQ_OFLD_CMD_DCAEN_V(eq_ofld_params->dcaen)		|
+ 		FW_EQ_OFLD_CMD_DCACPU_V(eq_ofld_params->dcacpu)		|
+ 		FW_EQ_OFLD_CMD_FBMIN_V(eq_ofld_params->fbmin)		|
+ 		FW_EQ_OFLD_CMD_FBMAX_V(eq_ofld_params->fbmax)		|
+ 		FW_EQ_OFLD_CMD_CIDXFTHRESHO_V(eq_ofld_params->cidxfthresho) |
+ 		FW_EQ_OFLD_CMD_CIDXFTHRESH_V(eq_ofld_params->cidxfthresh) |
+ 		FW_EQ_OFLD_CMD_EQSIZE_V(eq_ofld_params->eqsize));
  
  	cmdp->eqaddr |= cpu_to_be64(eq_ofld_params->eqaddr);
  
@@@ -773,12 -774,12 +817,12 @@@ csio_mb_eq_ofld_alloc_write_rsp(struct 
  {
  	struct fw_eq_ofld_cmd *rsp = (struct fw_eq_ofld_cmd *)(mbp->mb);
  
 -	*ret_val = FW_CMD_RETVAL_G(ntohl(rsp->alloc_to_len16));
 +	*ret_val = FW_CMD_RETVAL_GET(ntohl(rsp->alloc_to_len16));
  
  	if (*ret_val == FW_SUCCESS) {
- 		eq_ofld_params->eqid = FW_EQ_OFLD_CMD_EQID_GET(
+ 		eq_ofld_params->eqid = FW_EQ_OFLD_CMD_EQID_G(
  						ntohl(rsp->eqid_pkd));
- 		eq_ofld_params->physeqid = FW_EQ_OFLD_CMD_PHYSEQID_GET(
+ 		eq_ofld_params->physeqid = FW_EQ_OFLD_CMD_PHYSEQID_G(
  						ntohl(rsp->physeqid_pkd));
  	} else
  		eq_ofld_params->eqid = 0;
@@@ -807,13 -808,13 +851,23 @@@ csio_mb_eq_ofld_free(struct csio_hw *hw
  
  	CSIO_INIT_MBP(mbp, cmdp, mb_tmo, priv, cbfn, 1);
  
++<<<<<<< HEAD
 +	cmdp->op_to_vfn = htonl(FW_CMD_OP(FW_EQ_OFLD_CMD)	|
 +				FW_CMD_REQUEST | FW_CMD_EXEC	|
 +				FW_EQ_OFLD_CMD_PFN(eq_ofld_params->pfn) |
 +				FW_EQ_OFLD_CMD_VFN(eq_ofld_params->vfn));
 +	cmdp->alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_FREE |
 +				FW_CMD_LEN16(sizeof(*cmdp) / 16));
 +	cmdp->eqid_pkd = htonl(FW_EQ_OFLD_CMD_EQID(eq_ofld_params->eqid));
++=======
+ 	cmdp->op_to_vfn = htonl(FW_CMD_OP_V(FW_EQ_OFLD_CMD)	|
+ 				FW_CMD_REQUEST_F | FW_CMD_EXEC_F	|
+ 				FW_EQ_OFLD_CMD_PFN_V(eq_ofld_params->pfn) |
+ 				FW_EQ_OFLD_CMD_VFN_V(eq_ofld_params->vfn));
+ 	cmdp->alloc_to_len16 = htonl(FW_EQ_OFLD_CMD_FREE_F |
+ 				FW_CMD_LEN16_V(sizeof(*cmdp) / 16));
+ 	cmdp->eqid_pkd = htonl(FW_EQ_OFLD_CMD_EQID_V(eq_ofld_params->eqid));
++>>>>>>> 6e4b51a604f9 (cxgb4/cxgb4vf/csiostor: Cleanup macros/register defines related to queues)
  
  } /* csio_mb_eq_ofld_free */
  
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sge.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
diff --git a/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h b/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
index 0487eeccb419..6b698699bca0 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
@@ -1103,85 +1103,239 @@ struct fw_iq_cmd {
 	__be64 fl1addr;
 };
 
-#define FW_IQ_CMD_PFN(x) ((x) << 8)
-#define FW_IQ_CMD_VFN(x) ((x) << 0)
-
-#define FW_IQ_CMD_ALLOC (1U << 31)
-#define FW_IQ_CMD_FREE (1U << 30)
-#define FW_IQ_CMD_MODIFY (1U << 29)
-#define FW_IQ_CMD_IQSTART(x) ((x) << 28)
-#define FW_IQ_CMD_IQSTOP(x) ((x) << 27)
-
-#define FW_IQ_CMD_TYPE(x) ((x) << 29)
-#define FW_IQ_CMD_IQASYNCH(x) ((x) << 28)
-#define FW_IQ_CMD_VIID(x) ((x) << 16)
-#define FW_IQ_CMD_IQANDST(x) ((x) << 15)
-#define FW_IQ_CMD_IQANUS(x) ((x) << 14)
-#define FW_IQ_CMD_IQANUD(x) ((x) << 12)
-#define FW_IQ_CMD_IQANDSTINDEX(x) ((x) << 0)
-
-#define FW_IQ_CMD_IQDROPRSS (1U << 15)
-#define FW_IQ_CMD_IQGTSMODE (1U << 14)
-#define FW_IQ_CMD_IQPCIECH(x) ((x) << 12)
-#define FW_IQ_CMD_IQDCAEN(x) ((x) << 11)
-#define FW_IQ_CMD_IQDCACPU(x) ((x) << 6)
-#define FW_IQ_CMD_IQINTCNTTHRESH(x) ((x) << 4)
-#define FW_IQ_CMD_IQO (1U << 3)
-#define FW_IQ_CMD_IQCPRIO(x) ((x) << 2)
-#define FW_IQ_CMD_IQESIZE(x) ((x) << 0)
-
-#define FW_IQ_CMD_IQNS(x) ((x) << 31)
-#define FW_IQ_CMD_IQRO(x) ((x) << 30)
-#define FW_IQ_CMD_IQFLINTIQHSEN(x) ((x) << 28)
-#define FW_IQ_CMD_IQFLINTCONGEN(x) ((x) << 27)
-#define FW_IQ_CMD_IQFLINTISCSIC(x) ((x) << 26)
-#define FW_IQ_CMD_FL0CNGCHMAP(x) ((x) << 20)
-#define FW_IQ_CMD_FL0CACHELOCK(x) ((x) << 15)
-#define FW_IQ_CMD_FL0DBP(x) ((x) << 14)
-#define FW_IQ_CMD_FL0DATANS(x) ((x) << 13)
-#define FW_IQ_CMD_FL0DATARO(x) ((x) << 12)
-#define FW_IQ_CMD_FL0CONGCIF(x) ((x) << 11)
-#define FW_IQ_CMD_FL0ONCHIP(x) ((x) << 10)
-#define FW_IQ_CMD_FL0STATUSPGNS(x) ((x) << 9)
-#define FW_IQ_CMD_FL0STATUSPGRO(x) ((x) << 8)
-#define FW_IQ_CMD_FL0FETCHNS(x) ((x) << 7)
-#define FW_IQ_CMD_FL0FETCHRO(x) ((x) << 6)
-#define FW_IQ_CMD_FL0HOSTFCMODE(x) ((x) << 4)
-#define FW_IQ_CMD_FL0CPRIO(x) ((x) << 3)
-#define FW_IQ_CMD_FL0PADEN(x) ((x) << 2)
-#define FW_IQ_CMD_FL0PACKEN(x) ((x) << 1)
-#define FW_IQ_CMD_FL0CONGEN (1U << 0)
-
-#define FW_IQ_CMD_FL0DCAEN(x) ((x) << 15)
-#define FW_IQ_CMD_FL0DCACPU(x) ((x) << 10)
-#define FW_IQ_CMD_FL0FBMIN(x) ((x) << 7)
-#define FW_IQ_CMD_FL0FBMAX(x) ((x) << 4)
-#define FW_IQ_CMD_FL0CIDXFTHRESHO (1U << 3)
-#define FW_IQ_CMD_FL0CIDXFTHRESH(x) ((x) << 0)
-
-#define FW_IQ_CMD_FL1CNGCHMAP(x) ((x) << 20)
-#define FW_IQ_CMD_FL1CACHELOCK(x) ((x) << 15)
-#define FW_IQ_CMD_FL1DBP(x) ((x) << 14)
-#define FW_IQ_CMD_FL1DATANS(x) ((x) << 13)
-#define FW_IQ_CMD_FL1DATARO(x) ((x) << 12)
-#define FW_IQ_CMD_FL1CONGCIF(x) ((x) << 11)
-#define FW_IQ_CMD_FL1ONCHIP(x) ((x) << 10)
-#define FW_IQ_CMD_FL1STATUSPGNS(x) ((x) << 9)
-#define FW_IQ_CMD_FL1STATUSPGRO(x) ((x) << 8)
-#define FW_IQ_CMD_FL1FETCHNS(x) ((x) << 7)
-#define FW_IQ_CMD_FL1FETCHRO(x) ((x) << 6)
-#define FW_IQ_CMD_FL1HOSTFCMODE(x) ((x) << 4)
-#define FW_IQ_CMD_FL1CPRIO(x) ((x) << 3)
-#define FW_IQ_CMD_FL1PADEN (1U << 2)
-#define FW_IQ_CMD_FL1PACKEN (1U << 1)
-#define FW_IQ_CMD_FL1CONGEN (1U << 0)
-
-#define FW_IQ_CMD_FL1DCAEN(x) ((x) << 15)
-#define FW_IQ_CMD_FL1DCACPU(x) ((x) << 10)
-#define FW_IQ_CMD_FL1FBMIN(x) ((x) << 7)
-#define FW_IQ_CMD_FL1FBMAX(x) ((x) << 4)
-#define FW_IQ_CMD_FL1CIDXFTHRESHO (1U << 3)
-#define FW_IQ_CMD_FL1CIDXFTHRESH(x) ((x) << 0)
+#define FW_IQ_CMD_PFN_S		8
+#define FW_IQ_CMD_PFN_V(x)	((x) << FW_IQ_CMD_PFN_S)
+
+#define FW_IQ_CMD_VFN_S		0
+#define FW_IQ_CMD_VFN_V(x)	((x) << FW_IQ_CMD_VFN_S)
+
+#define FW_IQ_CMD_ALLOC_S	31
+#define FW_IQ_CMD_ALLOC_V(x)	((x) << FW_IQ_CMD_ALLOC_S)
+#define FW_IQ_CMD_ALLOC_F	FW_IQ_CMD_ALLOC_V(1U)
+
+#define FW_IQ_CMD_FREE_S	30
+#define FW_IQ_CMD_FREE_V(x)	((x) << FW_IQ_CMD_FREE_S)
+#define FW_IQ_CMD_FREE_F	FW_IQ_CMD_FREE_V(1U)
+
+#define FW_IQ_CMD_MODIFY_S	29
+#define FW_IQ_CMD_MODIFY_V(x)	((x) << FW_IQ_CMD_MODIFY_S)
+#define FW_IQ_CMD_MODIFY_F	FW_IQ_CMD_MODIFY_V(1U)
+
+#define FW_IQ_CMD_IQSTART_S	28
+#define FW_IQ_CMD_IQSTART_V(x)	((x) << FW_IQ_CMD_IQSTART_S)
+#define FW_IQ_CMD_IQSTART_F	FW_IQ_CMD_IQSTART_V(1U)
+
+#define FW_IQ_CMD_IQSTOP_S	27
+#define FW_IQ_CMD_IQSTOP_V(x)	((x) << FW_IQ_CMD_IQSTOP_S)
+#define FW_IQ_CMD_IQSTOP_F	FW_IQ_CMD_IQSTOP_V(1U)
+
+#define FW_IQ_CMD_TYPE_S	29
+#define FW_IQ_CMD_TYPE_V(x)	((x) << FW_IQ_CMD_TYPE_S)
+
+#define FW_IQ_CMD_IQASYNCH_S	28
+#define FW_IQ_CMD_IQASYNCH_V(x)	((x) << FW_IQ_CMD_IQASYNCH_S)
+
+#define FW_IQ_CMD_VIID_S	16
+#define FW_IQ_CMD_VIID_V(x)	((x) << FW_IQ_CMD_VIID_S)
+
+#define FW_IQ_CMD_IQANDST_S	15
+#define FW_IQ_CMD_IQANDST_V(x)	((x) << FW_IQ_CMD_IQANDST_S)
+
+#define FW_IQ_CMD_IQANUS_S	14
+#define FW_IQ_CMD_IQANUS_V(x)	((x) << FW_IQ_CMD_IQANUS_S)
+
+#define FW_IQ_CMD_IQANUD_S	12
+#define FW_IQ_CMD_IQANUD_V(x)	((x) << FW_IQ_CMD_IQANUD_S)
+
+#define FW_IQ_CMD_IQANDSTINDEX_S	0
+#define FW_IQ_CMD_IQANDSTINDEX_V(x)	((x) << FW_IQ_CMD_IQANDSTINDEX_S)
+
+#define FW_IQ_CMD_IQDROPRSS_S		15
+#define FW_IQ_CMD_IQDROPRSS_V(x)	((x) << FW_IQ_CMD_IQDROPRSS_S)
+#define FW_IQ_CMD_IQDROPRSS_F	FW_IQ_CMD_IQDROPRSS_V(1U)
+
+#define FW_IQ_CMD_IQGTSMODE_S		14
+#define FW_IQ_CMD_IQGTSMODE_V(x)	((x) << FW_IQ_CMD_IQGTSMODE_S)
+#define FW_IQ_CMD_IQGTSMODE_F		FW_IQ_CMD_IQGTSMODE_V(1U)
+
+#define FW_IQ_CMD_IQPCIECH_S	12
+#define FW_IQ_CMD_IQPCIECH_V(x)	((x) << FW_IQ_CMD_IQPCIECH_S)
+
+#define FW_IQ_CMD_IQDCAEN_S	11
+#define FW_IQ_CMD_IQDCAEN_V(x)	((x) << FW_IQ_CMD_IQDCAEN_S)
+
+#define FW_IQ_CMD_IQDCACPU_S	6
+#define FW_IQ_CMD_IQDCACPU_V(x)	((x) << FW_IQ_CMD_IQDCACPU_S)
+
+#define FW_IQ_CMD_IQINTCNTTHRESH_S	4
+#define FW_IQ_CMD_IQINTCNTTHRESH_V(x)	((x) << FW_IQ_CMD_IQINTCNTTHRESH_S)
+
+#define FW_IQ_CMD_IQO_S		3
+#define FW_IQ_CMD_IQO_V(x)	((x) << FW_IQ_CMD_IQO_S)
+#define FW_IQ_CMD_IQO_F		FW_IQ_CMD_IQO_V(1U)
+
+#define FW_IQ_CMD_IQCPRIO_S	2
+#define FW_IQ_CMD_IQCPRIO_V(x)	((x) << FW_IQ_CMD_IQCPRIO_S)
+
+#define FW_IQ_CMD_IQESIZE_S	0
+#define FW_IQ_CMD_IQESIZE_V(x)	((x) << FW_IQ_CMD_IQESIZE_S)
+
+#define FW_IQ_CMD_IQNS_S	31
+#define FW_IQ_CMD_IQNS_V(x)	((x) << FW_IQ_CMD_IQNS_S)
+
+#define FW_IQ_CMD_IQRO_S	30
+#define FW_IQ_CMD_IQRO_V(x)	((x) << FW_IQ_CMD_IQRO_S)
+
+#define FW_IQ_CMD_IQFLINTIQHSEN_S	28
+#define FW_IQ_CMD_IQFLINTIQHSEN_V(x)	((x) << FW_IQ_CMD_IQFLINTIQHSEN_S)
+
+#define FW_IQ_CMD_IQFLINTCONGEN_S	27
+#define FW_IQ_CMD_IQFLINTCONGEN_V(x)	((x) << FW_IQ_CMD_IQFLINTCONGEN_S)
+
+#define FW_IQ_CMD_IQFLINTISCSIC_S	26
+#define FW_IQ_CMD_IQFLINTISCSIC_V(x)	((x) << FW_IQ_CMD_IQFLINTISCSIC_S)
+
+#define FW_IQ_CMD_FL0CNGCHMAP_S		20
+#define FW_IQ_CMD_FL0CNGCHMAP_V(x)	((x) << FW_IQ_CMD_FL0CNGCHMAP_S)
+
+#define FW_IQ_CMD_FL0CACHELOCK_S	15
+#define FW_IQ_CMD_FL0CACHELOCK_V(x)	((x) << FW_IQ_CMD_FL0CACHELOCK_S)
+
+#define FW_IQ_CMD_FL0DBP_S	14
+#define FW_IQ_CMD_FL0DBP_V(x)	((x) << FW_IQ_CMD_FL0DBP_S)
+
+#define FW_IQ_CMD_FL0DATANS_S		13
+#define FW_IQ_CMD_FL0DATANS_V(x)	((x) << FW_IQ_CMD_FL0DATANS_S)
+
+#define FW_IQ_CMD_FL0DATARO_S		12
+#define FW_IQ_CMD_FL0DATARO_V(x)	((x) << FW_IQ_CMD_FL0DATARO_S)
+#define FW_IQ_CMD_FL0DATARO_F		FW_IQ_CMD_FL0DATARO_V(1U)
+
+#define FW_IQ_CMD_FL0CONGCIF_S		11
+#define FW_IQ_CMD_FL0CONGCIF_V(x)	((x) << FW_IQ_CMD_FL0CONGCIF_S)
+
+#define FW_IQ_CMD_FL0ONCHIP_S		10
+#define FW_IQ_CMD_FL0ONCHIP_V(x)	((x) << FW_IQ_CMD_FL0ONCHIP_S)
+
+#define FW_IQ_CMD_FL0STATUSPGNS_S	9
+#define FW_IQ_CMD_FL0STATUSPGNS_V(x)	((x) << FW_IQ_CMD_FL0STATUSPGNS_S)
+
+#define FW_IQ_CMD_FL0STATUSPGRO_S	8
+#define FW_IQ_CMD_FL0STATUSPGRO_V(x)	((x) << FW_IQ_CMD_FL0STATUSPGRO_S)
+
+#define FW_IQ_CMD_FL0FETCHNS_S		7
+#define FW_IQ_CMD_FL0FETCHNS_V(x)	((x) << FW_IQ_CMD_FL0FETCHNS_S)
+
+#define FW_IQ_CMD_FL0FETCHRO_S		6
+#define FW_IQ_CMD_FL0FETCHRO_V(x)	((x) << FW_IQ_CMD_FL0FETCHRO_S)
+#define FW_IQ_CMD_FL0FETCHRO_F		FW_IQ_CMD_FL0FETCHRO_V(1U)
+
+#define FW_IQ_CMD_FL0HOSTFCMODE_S	4
+#define FW_IQ_CMD_FL0HOSTFCMODE_V(x)	((x) << FW_IQ_CMD_FL0HOSTFCMODE_S)
+
+#define FW_IQ_CMD_FL0CPRIO_S	3
+#define FW_IQ_CMD_FL0CPRIO_V(x)	((x) << FW_IQ_CMD_FL0CPRIO_S)
+
+#define FW_IQ_CMD_FL0PADEN_S	2
+#define FW_IQ_CMD_FL0PADEN_V(x)	((x) << FW_IQ_CMD_FL0PADEN_S)
+#define FW_IQ_CMD_FL0PADEN_F	FW_IQ_CMD_FL0PADEN_V(1U)
+
+#define FW_IQ_CMD_FL0PACKEN_S		1
+#define FW_IQ_CMD_FL0PACKEN_V(x)	((x) << FW_IQ_CMD_FL0PACKEN_S)
+#define FW_IQ_CMD_FL0PACKEN_F		FW_IQ_CMD_FL0PACKEN_V(1U)
+
+#define FW_IQ_CMD_FL0CONGEN_S		0
+#define FW_IQ_CMD_FL0CONGEN_V(x)	((x) << FW_IQ_CMD_FL0CONGEN_S)
+#define FW_IQ_CMD_FL0CONGEN_F		FW_IQ_CMD_FL0CONGEN_V(1U)
+
+#define FW_IQ_CMD_FL0DCAEN_S	15
+#define FW_IQ_CMD_FL0DCAEN_V(x)	((x) << FW_IQ_CMD_FL0DCAEN_S)
+
+#define FW_IQ_CMD_FL0DCACPU_S		10
+#define FW_IQ_CMD_FL0DCACPU_V(x)	((x) << FW_IQ_CMD_FL0DCACPU_S)
+
+#define FW_IQ_CMD_FL0FBMIN_S	7
+#define FW_IQ_CMD_FL0FBMIN_V(x)	((x) << FW_IQ_CMD_FL0FBMIN_S)
+
+#define FW_IQ_CMD_FL0FBMAX_S	4
+#define FW_IQ_CMD_FL0FBMAX_V(x)	((x) << FW_IQ_CMD_FL0FBMAX_S)
+
+#define FW_IQ_CMD_FL0CIDXFTHRESHO_S	3
+#define FW_IQ_CMD_FL0CIDXFTHRESHO_V(x)	((x) << FW_IQ_CMD_FL0CIDXFTHRESHO_S)
+#define FW_IQ_CMD_FL0CIDXFTHRESHO_F	FW_IQ_CMD_FL0CIDXFTHRESHO_V(1U)
+
+#define FW_IQ_CMD_FL0CIDXFTHRESH_S	0
+#define FW_IQ_CMD_FL0CIDXFTHRESH_V(x)	((x) << FW_IQ_CMD_FL0CIDXFTHRESH_S)
+
+#define FW_IQ_CMD_FL1CNGCHMAP_S		20
+#define FW_IQ_CMD_FL1CNGCHMAP_V(x)	((x) << FW_IQ_CMD_FL1CNGCHMAP_S)
+
+#define FW_IQ_CMD_FL1CACHELOCK_S	15
+#define FW_IQ_CMD_FL1CACHELOCK_V(x)	((x) << FW_IQ_CMD_FL1CACHELOCK_S)
+
+#define FW_IQ_CMD_FL1DBP_S	14
+#define FW_IQ_CMD_FL1DBP_V(x)	((x) << FW_IQ_CMD_FL1DBP_S)
+
+#define FW_IQ_CMD_FL1DATANS_S		13
+#define FW_IQ_CMD_FL1DATANS_V(x)	((x) << FW_IQ_CMD_FL1DATANS_S)
+
+#define FW_IQ_CMD_FL1DATARO_S		12
+#define FW_IQ_CMD_FL1DATARO_V(x)	((x) << FW_IQ_CMD_FL1DATARO_S)
+
+#define FW_IQ_CMD_FL1CONGCIF_S		11
+#define FW_IQ_CMD_FL1CONGCIF_V(x)	((x) << FW_IQ_CMD_FL1CONGCIF_S)
+
+#define FW_IQ_CMD_FL1ONCHIP_S		10
+#define FW_IQ_CMD_FL1ONCHIP_V(x)	((x) << FW_IQ_CMD_FL1ONCHIP_S)
+
+#define FW_IQ_CMD_FL1STATUSPGNS_S	9
+#define FW_IQ_CMD_FL1STATUSPGNS_V(x)	((x) << FW_IQ_CMD_FL1STATUSPGNS_S)
+
+#define FW_IQ_CMD_FL1STATUSPGRO_S	8
+#define FW_IQ_CMD_FL1STATUSPGRO_V(x)	((x) << FW_IQ_CMD_FL1STATUSPGRO_S)
+
+#define FW_IQ_CMD_FL1FETCHNS_S		7
+#define FW_IQ_CMD_FL1FETCHNS_V(x)	((x) << FW_IQ_CMD_FL1FETCHNS_S)
+
+#define FW_IQ_CMD_FL1FETCHRO_S		6
+#define FW_IQ_CMD_FL1FETCHRO_V(x)	((x) << FW_IQ_CMD_FL1FETCHRO_S)
+
+#define FW_IQ_CMD_FL1HOSTFCMODE_S	4
+#define FW_IQ_CMD_FL1HOSTFCMODE_V(x)	((x) << FW_IQ_CMD_FL1HOSTFCMODE_S)
+
+#define FW_IQ_CMD_FL1CPRIO_S	3
+#define FW_IQ_CMD_FL1CPRIO_V(x)	((x) << FW_IQ_CMD_FL1CPRIO_S)
+
+#define FW_IQ_CMD_FL1PADEN_S	2
+#define FW_IQ_CMD_FL1PADEN_V(x)	((x) << FW_IQ_CMD_FL1PADEN_S)
+#define FW_IQ_CMD_FL1PADEN_F	FW_IQ_CMD_FL1PADEN_V(1U)
+
+#define FW_IQ_CMD_FL1PACKEN_S		1
+#define FW_IQ_CMD_FL1PACKEN_V(x)	((x) << FW_IQ_CMD_FL1PACKEN_S)
+#define FW_IQ_CMD_FL1PACKEN_F	FW_IQ_CMD_FL1PACKEN_V(1U)
+
+#define FW_IQ_CMD_FL1CONGEN_S		0
+#define FW_IQ_CMD_FL1CONGEN_V(x)	((x) << FW_IQ_CMD_FL1CONGEN_S)
+#define FW_IQ_CMD_FL1CONGEN_F	FW_IQ_CMD_FL1CONGEN_V(1U)
+
+#define FW_IQ_CMD_FL1DCAEN_S	15
+#define FW_IQ_CMD_FL1DCAEN_V(x)	((x) << FW_IQ_CMD_FL1DCAEN_S)
+
+#define FW_IQ_CMD_FL1DCACPU_S		10
+#define FW_IQ_CMD_FL1DCACPU_V(x)	((x) << FW_IQ_CMD_FL1DCACPU_S)
+
+#define FW_IQ_CMD_FL1FBMIN_S	7
+#define FW_IQ_CMD_FL1FBMIN_V(x)	((x) << FW_IQ_CMD_FL1FBMIN_S)
+
+#define FW_IQ_CMD_FL1FBMAX_S	4
+#define FW_IQ_CMD_FL1FBMAX_V(x)	((x) << FW_IQ_CMD_FL1FBMAX_S)
+
+#define FW_IQ_CMD_FL1CIDXFTHRESHO_S	3
+#define FW_IQ_CMD_FL1CIDXFTHRESHO_V(x)	((x) << FW_IQ_CMD_FL1CIDXFTHRESHO_S)
+#define FW_IQ_CMD_FL1CIDXFTHRESHO_F	FW_IQ_CMD_FL1CIDXFTHRESHO_V(1U)
+
+#define FW_IQ_CMD_FL1CIDXFTHRESH_S	0
+#define FW_IQ_CMD_FL1CIDXFTHRESH_V(x)	((x) << FW_IQ_CMD_FL1CIDXFTHRESH_S)
 
 struct fw_eq_eth_cmd {
 	__be32 op_to_vfn;
@@ -1196,40 +1350,102 @@ struct fw_eq_eth_cmd {
 	__be64 r9;
 };
 
-#define FW_EQ_ETH_CMD_PFN(x) ((x) << 8)
-#define FW_EQ_ETH_CMD_VFN(x) ((x) << 0)
-#define FW_EQ_ETH_CMD_ALLOC (1U << 31)
-#define FW_EQ_ETH_CMD_FREE (1U << 30)
-#define FW_EQ_ETH_CMD_MODIFY (1U << 29)
-#define FW_EQ_ETH_CMD_EQSTART (1U << 28)
-#define FW_EQ_ETH_CMD_EQSTOP (1U << 27)
-
-#define FW_EQ_ETH_CMD_EQID(x) ((x) << 0)
-#define FW_EQ_ETH_CMD_EQID_GET(x) (((x) >> 0) & 0xfffff)
-#define FW_EQ_ETH_CMD_PHYSEQID(x) ((x) << 0)
-#define FW_EQ_ETH_CMD_PHYSEQID_GET(x) (((x) >> 0) & 0xfffff)
-
-#define FW_EQ_ETH_CMD_FETCHSZM(x) ((x) << 26)
-#define FW_EQ_ETH_CMD_STATUSPGNS(x) ((x) << 25)
-#define FW_EQ_ETH_CMD_STATUSPGRO(x) ((x) << 24)
-#define FW_EQ_ETH_CMD_FETCHNS(x) ((x) << 23)
-#define FW_EQ_ETH_CMD_FETCHRO(x) ((x) << 22)
-#define FW_EQ_ETH_CMD_HOSTFCMODE(x) ((x) << 20)
-#define FW_EQ_ETH_CMD_CPRIO(x) ((x) << 19)
-#define FW_EQ_ETH_CMD_ONCHIP(x) ((x) << 18)
-#define FW_EQ_ETH_CMD_PCIECHN(x) ((x) << 16)
-#define FW_EQ_ETH_CMD_IQID(x) ((x) << 0)
-
-#define FW_EQ_ETH_CMD_DCAEN(x) ((x) << 31)
-#define FW_EQ_ETH_CMD_DCACPU(x) ((x) << 26)
-#define FW_EQ_ETH_CMD_FBMIN(x) ((x) << 23)
-#define FW_EQ_ETH_CMD_FBMAX(x) ((x) << 20)
-#define FW_EQ_ETH_CMD_CIDXFTHRESHO(x) ((x) << 19)
-#define FW_EQ_ETH_CMD_CIDXFTHRESH(x) ((x) << 16)
-#define FW_EQ_ETH_CMD_EQSIZE(x) ((x) << 0)
-
-#define FW_EQ_ETH_CMD_AUTOEQUEQE (1U << 30)
-#define FW_EQ_ETH_CMD_VIID(x) ((x) << 16)
+#define FW_EQ_ETH_CMD_PFN_S	8
+#define FW_EQ_ETH_CMD_PFN_V(x)	((x) << FW_EQ_ETH_CMD_PFN_S)
+
+#define FW_EQ_ETH_CMD_VFN_S	0
+#define FW_EQ_ETH_CMD_VFN_V(x)	((x) << FW_EQ_ETH_CMD_VFN_S)
+
+#define FW_EQ_ETH_CMD_ALLOC_S		31
+#define FW_EQ_ETH_CMD_ALLOC_V(x)	((x) << FW_EQ_ETH_CMD_ALLOC_S)
+#define FW_EQ_ETH_CMD_ALLOC_F	FW_EQ_ETH_CMD_ALLOC_V(1U)
+
+#define FW_EQ_ETH_CMD_FREE_S	30
+#define FW_EQ_ETH_CMD_FREE_V(x)	((x) << FW_EQ_ETH_CMD_FREE_S)
+#define FW_EQ_ETH_CMD_FREE_F	FW_EQ_ETH_CMD_FREE_V(1U)
+
+#define FW_EQ_ETH_CMD_MODIFY_S		29
+#define FW_EQ_ETH_CMD_MODIFY_V(x)	((x) << FW_EQ_ETH_CMD_MODIFY_S)
+#define FW_EQ_ETH_CMD_MODIFY_F	FW_EQ_ETH_CMD_MODIFY_V(1U)
+
+#define FW_EQ_ETH_CMD_EQSTART_S		28
+#define FW_EQ_ETH_CMD_EQSTART_V(x)	((x) << FW_EQ_ETH_CMD_EQSTART_S)
+#define FW_EQ_ETH_CMD_EQSTART_F	FW_EQ_ETH_CMD_EQSTART_V(1U)
+
+#define FW_EQ_ETH_CMD_EQSTOP_S		27
+#define FW_EQ_ETH_CMD_EQSTOP_V(x)	((x) << FW_EQ_ETH_CMD_EQSTOP_S)
+#define FW_EQ_ETH_CMD_EQSTOP_F	FW_EQ_ETH_CMD_EQSTOP_V(1U)
+
+#define FW_EQ_ETH_CMD_EQID_S	0
+#define FW_EQ_ETH_CMD_EQID_M	0xfffff
+#define FW_EQ_ETH_CMD_EQID_V(x)	((x) << FW_EQ_ETH_CMD_EQID_S)
+#define FW_EQ_ETH_CMD_EQID_G(x)	\
+	(((x) >> FW_EQ_ETH_CMD_EQID_S) & FW_EQ_ETH_CMD_EQID_M)
+
+#define FW_EQ_ETH_CMD_PHYSEQID_S	0
+#define FW_EQ_ETH_CMD_PHYSEQID_M	0xfffff
+#define FW_EQ_ETH_CMD_PHYSEQID_V(x)	((x) << FW_EQ_ETH_CMD_PHYSEQID_S)
+#define FW_EQ_ETH_CMD_PHYSEQID_G(x)	\
+	(((x) >> FW_EQ_ETH_CMD_PHYSEQID_S) & FW_EQ_ETH_CMD_PHYSEQID_M)
+
+#define FW_EQ_ETH_CMD_FETCHSZM_S	26
+#define FW_EQ_ETH_CMD_FETCHSZM_V(x)	((x) << FW_EQ_ETH_CMD_FETCHSZM_S)
+#define FW_EQ_ETH_CMD_FETCHSZM_F	FW_EQ_ETH_CMD_FETCHSZM_V(1U)
+
+#define FW_EQ_ETH_CMD_STATUSPGNS_S	25
+#define FW_EQ_ETH_CMD_STATUSPGNS_V(x)	((x) << FW_EQ_ETH_CMD_STATUSPGNS_S)
+
+#define FW_EQ_ETH_CMD_STATUSPGRO_S	24
+#define FW_EQ_ETH_CMD_STATUSPGRO_V(x)	((x) << FW_EQ_ETH_CMD_STATUSPGRO_S)
+
+#define FW_EQ_ETH_CMD_FETCHNS_S		23
+#define FW_EQ_ETH_CMD_FETCHNS_V(x)	((x) << FW_EQ_ETH_CMD_FETCHNS_S)
+
+#define FW_EQ_ETH_CMD_FETCHRO_S		22
+#define FW_EQ_ETH_CMD_FETCHRO_V(x)	((x) << FW_EQ_ETH_CMD_FETCHRO_S)
+
+#define FW_EQ_ETH_CMD_HOSTFCMODE_S	20
+#define FW_EQ_ETH_CMD_HOSTFCMODE_V(x)	((x) << FW_EQ_ETH_CMD_HOSTFCMODE_S)
+
+#define FW_EQ_ETH_CMD_CPRIO_S		19
+#define FW_EQ_ETH_CMD_CPRIO_V(x)	((x) << FW_EQ_ETH_CMD_CPRIO_S)
+
+#define FW_EQ_ETH_CMD_ONCHIP_S		18
+#define FW_EQ_ETH_CMD_ONCHIP_V(x)	((x) << FW_EQ_ETH_CMD_ONCHIP_S)
+
+#define FW_EQ_ETH_CMD_PCIECHN_S		16
+#define FW_EQ_ETH_CMD_PCIECHN_V(x)	((x) << FW_EQ_ETH_CMD_PCIECHN_S)
+
+#define FW_EQ_ETH_CMD_IQID_S	0
+#define FW_EQ_ETH_CMD_IQID_V(x)	((x) << FW_EQ_ETH_CMD_IQID_S)
+
+#define FW_EQ_ETH_CMD_DCAEN_S		31
+#define FW_EQ_ETH_CMD_DCAEN_V(x)	((x) << FW_EQ_ETH_CMD_DCAEN_S)
+
+#define FW_EQ_ETH_CMD_DCACPU_S		26
+#define FW_EQ_ETH_CMD_DCACPU_V(x)	((x) << FW_EQ_ETH_CMD_DCACPU_S)
+
+#define FW_EQ_ETH_CMD_FBMIN_S		23
+#define FW_EQ_ETH_CMD_FBMIN_V(x)	((x) << FW_EQ_ETH_CMD_FBMIN_S)
+
+#define FW_EQ_ETH_CMD_FBMAX_S		20
+#define FW_EQ_ETH_CMD_FBMAX_V(x)	((x) << FW_EQ_ETH_CMD_FBMAX_S)
+
+#define FW_EQ_ETH_CMD_CIDXFTHRESHO_S	19
+#define FW_EQ_ETH_CMD_CIDXFTHRESHO_V(x)	((x) << FW_EQ_ETH_CMD_CIDXFTHRESHO_S)
+
+#define FW_EQ_ETH_CMD_CIDXFTHRESH_S	16
+#define FW_EQ_ETH_CMD_CIDXFTHRESH_V(x)	((x) << FW_EQ_ETH_CMD_CIDXFTHRESH_S)
+
+#define FW_EQ_ETH_CMD_EQSIZE_S		0
+#define FW_EQ_ETH_CMD_EQSIZE_V(x)	((x) << FW_EQ_ETH_CMD_EQSIZE_S)
+
+#define FW_EQ_ETH_CMD_AUTOEQUEQE_S	30
+#define FW_EQ_ETH_CMD_AUTOEQUEQE_V(x)	((x) << FW_EQ_ETH_CMD_AUTOEQUEQE_S)
+#define FW_EQ_ETH_CMD_AUTOEQUEQE_F	FW_EQ_ETH_CMD_AUTOEQUEQE_V(1U)
+
+#define FW_EQ_ETH_CMD_VIID_S	16
+#define FW_EQ_ETH_CMD_VIID_V(x)	((x) << FW_EQ_ETH_CMD_VIID_S)
 
 struct fw_eq_ctrl_cmd {
 	__be32 op_to_vfn;
@@ -1241,38 +1457,102 @@ struct fw_eq_ctrl_cmd {
 	__be64 eqaddr;
 };
 
-#define FW_EQ_CTRL_CMD_PFN(x) ((x) << 8)
-#define FW_EQ_CTRL_CMD_VFN(x) ((x) << 0)
-
-#define FW_EQ_CTRL_CMD_ALLOC (1U << 31)
-#define FW_EQ_CTRL_CMD_FREE (1U << 30)
-#define FW_EQ_CTRL_CMD_MODIFY (1U << 29)
-#define FW_EQ_CTRL_CMD_EQSTART (1U << 28)
-#define FW_EQ_CTRL_CMD_EQSTOP (1U << 27)
-
-#define FW_EQ_CTRL_CMD_CMPLIQID(x) ((x) << 20)
-#define FW_EQ_CTRL_CMD_EQID(x) ((x) << 0)
-#define FW_EQ_CTRL_CMD_EQID_GET(x) (((x) >> 0) & 0xfffff)
-#define FW_EQ_CTRL_CMD_PHYSEQID_GET(x) (((x) >> 0) & 0xfffff)
-
-#define FW_EQ_CTRL_CMD_FETCHSZM (1U << 26)
-#define FW_EQ_CTRL_CMD_STATUSPGNS (1U << 25)
-#define FW_EQ_CTRL_CMD_STATUSPGRO (1U << 24)
-#define FW_EQ_CTRL_CMD_FETCHNS (1U << 23)
-#define FW_EQ_CTRL_CMD_FETCHRO (1U << 22)
-#define FW_EQ_CTRL_CMD_HOSTFCMODE(x) ((x) << 20)
-#define FW_EQ_CTRL_CMD_CPRIO(x) ((x) << 19)
-#define FW_EQ_CTRL_CMD_ONCHIP(x) ((x) << 18)
-#define FW_EQ_CTRL_CMD_PCIECHN(x) ((x) << 16)
-#define FW_EQ_CTRL_CMD_IQID(x) ((x) << 0)
-
-#define FW_EQ_CTRL_CMD_DCAEN(x) ((x) << 31)
-#define FW_EQ_CTRL_CMD_DCACPU(x) ((x) << 26)
-#define FW_EQ_CTRL_CMD_FBMIN(x) ((x) << 23)
-#define FW_EQ_CTRL_CMD_FBMAX(x) ((x) << 20)
-#define FW_EQ_CTRL_CMD_CIDXFTHRESHO(x) ((x) << 19)
-#define FW_EQ_CTRL_CMD_CIDXFTHRESH(x) ((x) << 16)
-#define FW_EQ_CTRL_CMD_EQSIZE(x) ((x) << 0)
+#define FW_EQ_CTRL_CMD_PFN_S	8
+#define FW_EQ_CTRL_CMD_PFN_V(x)	((x) << FW_EQ_CTRL_CMD_PFN_S)
+
+#define FW_EQ_CTRL_CMD_VFN_S	0
+#define FW_EQ_CTRL_CMD_VFN_V(x)	((x) << FW_EQ_CTRL_CMD_VFN_S)
+
+#define FW_EQ_CTRL_CMD_ALLOC_S		31
+#define FW_EQ_CTRL_CMD_ALLOC_V(x)	((x) << FW_EQ_CTRL_CMD_ALLOC_S)
+#define FW_EQ_CTRL_CMD_ALLOC_F		FW_EQ_CTRL_CMD_ALLOC_V(1U)
+
+#define FW_EQ_CTRL_CMD_FREE_S		30
+#define FW_EQ_CTRL_CMD_FREE_V(x)	((x) << FW_EQ_CTRL_CMD_FREE_S)
+#define FW_EQ_CTRL_CMD_FREE_F		FW_EQ_CTRL_CMD_FREE_V(1U)
+
+#define FW_EQ_CTRL_CMD_MODIFY_S		29
+#define FW_EQ_CTRL_CMD_MODIFY_V(x)	((x) << FW_EQ_CTRL_CMD_MODIFY_S)
+#define FW_EQ_CTRL_CMD_MODIFY_F		FW_EQ_CTRL_CMD_MODIFY_V(1U)
+
+#define FW_EQ_CTRL_CMD_EQSTART_S	28
+#define FW_EQ_CTRL_CMD_EQSTART_V(x)	((x) << FW_EQ_CTRL_CMD_EQSTART_S)
+#define FW_EQ_CTRL_CMD_EQSTART_F	FW_EQ_CTRL_CMD_EQSTART_V(1U)
+
+#define FW_EQ_CTRL_CMD_EQSTOP_S		27
+#define FW_EQ_CTRL_CMD_EQSTOP_V(x)	((x) << FW_EQ_CTRL_CMD_EQSTOP_S)
+#define FW_EQ_CTRL_CMD_EQSTOP_F		FW_EQ_CTRL_CMD_EQSTOP_V(1U)
+
+#define FW_EQ_CTRL_CMD_CMPLIQID_S	20
+#define FW_EQ_CTRL_CMD_CMPLIQID_V(x)	((x) << FW_EQ_CTRL_CMD_CMPLIQID_S)
+
+#define FW_EQ_CTRL_CMD_EQID_S		0
+#define FW_EQ_CTRL_CMD_EQID_M		0xfffff
+#define FW_EQ_CTRL_CMD_EQID_V(x)	((x) << FW_EQ_CTRL_CMD_EQID_S)
+#define FW_EQ_CTRL_CMD_EQID_G(x)	\
+	(((x) >> FW_EQ_CTRL_CMD_EQID_S) & FW_EQ_CTRL_CMD_EQID_M)
+
+#define FW_EQ_CTRL_CMD_PHYSEQID_S	0
+#define FW_EQ_CTRL_CMD_PHYSEQID_M	0xfffff
+#define FW_EQ_CTRL_CMD_PHYSEQID_G(x)	\
+	(((x) >> FW_EQ_CTRL_CMD_PHYSEQID_S) & FW_EQ_CTRL_CMD_PHYSEQID_M)
+
+#define FW_EQ_CTRL_CMD_FETCHSZM_S	26
+#define FW_EQ_CTRL_CMD_FETCHSZM_V(x)	((x) << FW_EQ_CTRL_CMD_FETCHSZM_S)
+#define FW_EQ_CTRL_CMD_FETCHSZM_F	FW_EQ_CTRL_CMD_FETCHSZM_V(1U)
+
+#define FW_EQ_CTRL_CMD_STATUSPGNS_S	25
+#define FW_EQ_CTRL_CMD_STATUSPGNS_V(x)	((x) << FW_EQ_CTRL_CMD_STATUSPGNS_S)
+#define FW_EQ_CTRL_CMD_STATUSPGNS_F	FW_EQ_CTRL_CMD_STATUSPGNS_V(1U)
+
+#define FW_EQ_CTRL_CMD_STATUSPGRO_S	24
+#define FW_EQ_CTRL_CMD_STATUSPGRO_V(x)	((x) << FW_EQ_CTRL_CMD_STATUSPGRO_S)
+#define FW_EQ_CTRL_CMD_STATUSPGRO_F	FW_EQ_CTRL_CMD_STATUSPGRO_V(1U)
+
+#define FW_EQ_CTRL_CMD_FETCHNS_S	23
+#define FW_EQ_CTRL_CMD_FETCHNS_V(x)	((x) << FW_EQ_CTRL_CMD_FETCHNS_S)
+#define FW_EQ_CTRL_CMD_FETCHNS_F	FW_EQ_CTRL_CMD_FETCHNS_V(1U)
+
+#define FW_EQ_CTRL_CMD_FETCHRO_S	22
+#define FW_EQ_CTRL_CMD_FETCHRO_V(x)	((x) << FW_EQ_CTRL_CMD_FETCHRO_S)
+#define FW_EQ_CTRL_CMD_FETCHRO_F	FW_EQ_CTRL_CMD_FETCHRO_V(1U)
+
+#define FW_EQ_CTRL_CMD_HOSTFCMODE_S	20
+#define FW_EQ_CTRL_CMD_HOSTFCMODE_V(x)	((x) << FW_EQ_CTRL_CMD_HOSTFCMODE_S)
+
+#define FW_EQ_CTRL_CMD_CPRIO_S		19
+#define FW_EQ_CTRL_CMD_CPRIO_V(x)	((x) << FW_EQ_CTRL_CMD_CPRIO_S)
+
+#define FW_EQ_CTRL_CMD_ONCHIP_S		18
+#define FW_EQ_CTRL_CMD_ONCHIP_V(x)	((x) << FW_EQ_CTRL_CMD_ONCHIP_S)
+
+#define FW_EQ_CTRL_CMD_PCIECHN_S	16
+#define FW_EQ_CTRL_CMD_PCIECHN_V(x)	((x) << FW_EQ_CTRL_CMD_PCIECHN_S)
+
+#define FW_EQ_CTRL_CMD_IQID_S		0
+#define FW_EQ_CTRL_CMD_IQID_V(x)	((x) << FW_EQ_CTRL_CMD_IQID_S)
+
+#define FW_EQ_CTRL_CMD_DCAEN_S		31
+#define FW_EQ_CTRL_CMD_DCAEN_V(x)	((x) << FW_EQ_CTRL_CMD_DCAEN_S)
+
+#define FW_EQ_CTRL_CMD_DCACPU_S		26
+#define FW_EQ_CTRL_CMD_DCACPU_V(x)	((x) << FW_EQ_CTRL_CMD_DCACPU_S)
+
+#define FW_EQ_CTRL_CMD_FBMIN_S		23
+#define FW_EQ_CTRL_CMD_FBMIN_V(x)	((x) << FW_EQ_CTRL_CMD_FBMIN_S)
+
+#define FW_EQ_CTRL_CMD_FBMAX_S		20
+#define FW_EQ_CTRL_CMD_FBMAX_V(x)	((x) << FW_EQ_CTRL_CMD_FBMAX_S)
+
+#define FW_EQ_CTRL_CMD_CIDXFTHRESHO_S		19
+#define FW_EQ_CTRL_CMD_CIDXFTHRESHO_V(x)	\
+	((x) << FW_EQ_CTRL_CMD_CIDXFTHRESHO_S)
+
+#define FW_EQ_CTRL_CMD_CIDXFTHRESH_S	16
+#define FW_EQ_CTRL_CMD_CIDXFTHRESH_V(x)	((x) << FW_EQ_CTRL_CMD_CIDXFTHRESH_S)
+
+#define FW_EQ_CTRL_CMD_EQSIZE_S		0
+#define FW_EQ_CTRL_CMD_EQSIZE_V(x)	((x) << FW_EQ_CTRL_CMD_EQSIZE_S)
 
 struct fw_eq_ofld_cmd {
 	__be32 op_to_vfn;
@@ -1284,37 +1564,95 @@ struct fw_eq_ofld_cmd {
 	__be64 eqaddr;
 };
 
-#define FW_EQ_OFLD_CMD_PFN(x) ((x) << 8)
-#define FW_EQ_OFLD_CMD_VFN(x) ((x) << 0)
-
-#define FW_EQ_OFLD_CMD_ALLOC (1U << 31)
-#define FW_EQ_OFLD_CMD_FREE (1U << 30)
-#define FW_EQ_OFLD_CMD_MODIFY (1U << 29)
-#define FW_EQ_OFLD_CMD_EQSTART (1U << 28)
-#define FW_EQ_OFLD_CMD_EQSTOP (1U << 27)
-
-#define FW_EQ_OFLD_CMD_EQID(x) ((x) << 0)
-#define FW_EQ_OFLD_CMD_EQID_GET(x) (((x) >> 0) & 0xfffff)
-#define FW_EQ_OFLD_CMD_PHYSEQID_GET(x) (((x) >> 0) & 0xfffff)
-
-#define FW_EQ_OFLD_CMD_FETCHSZM(x) ((x) << 26)
-#define FW_EQ_OFLD_CMD_STATUSPGNS(x) ((x) << 25)
-#define FW_EQ_OFLD_CMD_STATUSPGRO(x) ((x) << 24)
-#define FW_EQ_OFLD_CMD_FETCHNS(x) ((x) << 23)
-#define FW_EQ_OFLD_CMD_FETCHRO(x) ((x) << 22)
-#define FW_EQ_OFLD_CMD_HOSTFCMODE(x) ((x) << 20)
-#define FW_EQ_OFLD_CMD_CPRIO(x) ((x) << 19)
-#define FW_EQ_OFLD_CMD_ONCHIP(x) ((x) << 18)
-#define FW_EQ_OFLD_CMD_PCIECHN(x) ((x) << 16)
-#define FW_EQ_OFLD_CMD_IQID(x) ((x) << 0)
-
-#define FW_EQ_OFLD_CMD_DCAEN(x) ((x) << 31)
-#define FW_EQ_OFLD_CMD_DCACPU(x) ((x) << 26)
-#define FW_EQ_OFLD_CMD_FBMIN(x) ((x) << 23)
-#define FW_EQ_OFLD_CMD_FBMAX(x) ((x) << 20)
-#define FW_EQ_OFLD_CMD_CIDXFTHRESHO(x) ((x) << 19)
-#define FW_EQ_OFLD_CMD_CIDXFTHRESH(x) ((x) << 16)
-#define FW_EQ_OFLD_CMD_EQSIZE(x) ((x) << 0)
+#define FW_EQ_OFLD_CMD_PFN_S	8
+#define FW_EQ_OFLD_CMD_PFN_V(x)	((x) << FW_EQ_OFLD_CMD_PFN_S)
+
+#define FW_EQ_OFLD_CMD_VFN_S	0
+#define FW_EQ_OFLD_CMD_VFN_V(x)	((x) << FW_EQ_OFLD_CMD_VFN_S)
+
+#define FW_EQ_OFLD_CMD_ALLOC_S		31
+#define FW_EQ_OFLD_CMD_ALLOC_V(x)	((x) << FW_EQ_OFLD_CMD_ALLOC_S)
+#define FW_EQ_OFLD_CMD_ALLOC_F		FW_EQ_OFLD_CMD_ALLOC_V(1U)
+
+#define FW_EQ_OFLD_CMD_FREE_S		30
+#define FW_EQ_OFLD_CMD_FREE_V(x)	((x) << FW_EQ_OFLD_CMD_FREE_S)
+#define FW_EQ_OFLD_CMD_FREE_F		FW_EQ_OFLD_CMD_FREE_V(1U)
+
+#define FW_EQ_OFLD_CMD_MODIFY_S		29
+#define FW_EQ_OFLD_CMD_MODIFY_V(x)	((x) << FW_EQ_OFLD_CMD_MODIFY_S)
+#define FW_EQ_OFLD_CMD_MODIFY_F		FW_EQ_OFLD_CMD_MODIFY_V(1U)
+
+#define FW_EQ_OFLD_CMD_EQSTART_S	28
+#define FW_EQ_OFLD_CMD_EQSTART_V(x)	((x) << FW_EQ_OFLD_CMD_EQSTART_S)
+#define FW_EQ_OFLD_CMD_EQSTART_F	FW_EQ_OFLD_CMD_EQSTART_V(1U)
+
+#define FW_EQ_OFLD_CMD_EQSTOP_S		27
+#define FW_EQ_OFLD_CMD_EQSTOP_V(x)	((x) << FW_EQ_OFLD_CMD_EQSTOP_S)
+#define FW_EQ_OFLD_CMD_EQSTOP_F		FW_EQ_OFLD_CMD_EQSTOP_V(1U)
+
+#define FW_EQ_OFLD_CMD_EQID_S		0
+#define FW_EQ_OFLD_CMD_EQID_M		0xfffff
+#define FW_EQ_OFLD_CMD_EQID_V(x)	((x) << FW_EQ_OFLD_CMD_EQID_S)
+#define FW_EQ_OFLD_CMD_EQID_G(x)	\
+	(((x) >> FW_EQ_OFLD_CMD_EQID_S) & FW_EQ_OFLD_CMD_EQID_M)
+
+#define FW_EQ_OFLD_CMD_PHYSEQID_S	0
+#define FW_EQ_OFLD_CMD_PHYSEQID_M	0xfffff
+#define FW_EQ_OFLD_CMD_PHYSEQID_G(x)	\
+	(((x) >> FW_EQ_OFLD_CMD_PHYSEQID_S) & FW_EQ_OFLD_CMD_PHYSEQID_M)
+
+#define FW_EQ_OFLD_CMD_FETCHSZM_S	26
+#define FW_EQ_OFLD_CMD_FETCHSZM_V(x)	((x) << FW_EQ_OFLD_CMD_FETCHSZM_S)
+
+#define FW_EQ_OFLD_CMD_STATUSPGNS_S	25
+#define FW_EQ_OFLD_CMD_STATUSPGNS_V(x)	((x) << FW_EQ_OFLD_CMD_STATUSPGNS_S)
+
+#define FW_EQ_OFLD_CMD_STATUSPGRO_S	24
+#define FW_EQ_OFLD_CMD_STATUSPGRO_V(x)	((x) << FW_EQ_OFLD_CMD_STATUSPGRO_S)
+
+#define FW_EQ_OFLD_CMD_FETCHNS_S	23
+#define FW_EQ_OFLD_CMD_FETCHNS_V(x)	((x) << FW_EQ_OFLD_CMD_FETCHNS_S)
+
+#define FW_EQ_OFLD_CMD_FETCHRO_S	22
+#define FW_EQ_OFLD_CMD_FETCHRO_V(x)	((x) << FW_EQ_OFLD_CMD_FETCHRO_S)
+#define FW_EQ_OFLD_CMD_FETCHRO_F	FW_EQ_OFLD_CMD_FETCHRO_V(1U)
+
+#define FW_EQ_OFLD_CMD_HOSTFCMODE_S	20
+#define FW_EQ_OFLD_CMD_HOSTFCMODE_V(x)	((x) << FW_EQ_OFLD_CMD_HOSTFCMODE_S)
+
+#define FW_EQ_OFLD_CMD_CPRIO_S		19
+#define FW_EQ_OFLD_CMD_CPRIO_V(x)	((x) << FW_EQ_OFLD_CMD_CPRIO_S)
+
+#define FW_EQ_OFLD_CMD_ONCHIP_S		18
+#define FW_EQ_OFLD_CMD_ONCHIP_V(x)	((x) << FW_EQ_OFLD_CMD_ONCHIP_S)
+
+#define FW_EQ_OFLD_CMD_PCIECHN_S	16
+#define FW_EQ_OFLD_CMD_PCIECHN_V(x)	((x) << FW_EQ_OFLD_CMD_PCIECHN_S)
+
+#define FW_EQ_OFLD_CMD_IQID_S		0
+#define FW_EQ_OFLD_CMD_IQID_V(x)	((x) << FW_EQ_OFLD_CMD_IQID_S)
+
+#define FW_EQ_OFLD_CMD_DCAEN_S		31
+#define FW_EQ_OFLD_CMD_DCAEN_V(x)	((x) << FW_EQ_OFLD_CMD_DCAEN_S)
+
+#define FW_EQ_OFLD_CMD_DCACPU_S		26
+#define FW_EQ_OFLD_CMD_DCACPU_V(x)	((x) << FW_EQ_OFLD_CMD_DCACPU_S)
+
+#define FW_EQ_OFLD_CMD_FBMIN_S		23
+#define FW_EQ_OFLD_CMD_FBMIN_V(x)	((x) << FW_EQ_OFLD_CMD_FBMIN_S)
+
+#define FW_EQ_OFLD_CMD_FBMAX_S		20
+#define FW_EQ_OFLD_CMD_FBMAX_V(x)	((x) << FW_EQ_OFLD_CMD_FBMAX_S)
+
+#define FW_EQ_OFLD_CMD_CIDXFTHRESHO_S		19
+#define FW_EQ_OFLD_CMD_CIDXFTHRESHO_V(x)	\
+	((x) << FW_EQ_OFLD_CMD_CIDXFTHRESHO_S)
+
+#define FW_EQ_OFLD_CMD_CIDXFTHRESH_S	16
+#define FW_EQ_OFLD_CMD_CIDXFTHRESH_V(x)	((x) << FW_EQ_OFLD_CMD_CIDXFTHRESH_S)
+
+#define FW_EQ_OFLD_CMD_EQSIZE_S		0
+#define FW_EQ_OFLD_CMD_EQSIZE_V(x)	((x) << FW_EQ_OFLD_CMD_EQSIZE_S)
 
 /*
  * Macros for VIID parsing:
* Unmerged path drivers/net/ethernet/chelsio/cxgb4vf/sge.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c
* Unmerged path drivers/scsi/csiostor/csio_mb.c
