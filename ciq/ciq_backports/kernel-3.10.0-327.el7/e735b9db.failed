perf/x86/intel/uncore: Add Haswell-EP uncore support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] perf/uncore: Add Haswell-EP uncore support (Jiri Olsa) [1176340]
Rebuild_FUZZ: 89.36%
commit-author Yan, Zheng <zheng.z.yan@intel.com>
commit e735b9db12d76d45f74aee78bd63bbd2f8f480e1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e735b9db.failed

The uncore subsystem in Haswell-EP is similar to Sandy/Ivy
Bridge-EP. There are some differences in config register
encoding and pci device IDs. The Haswell-EP uncore also
supports a few new events. Add the Haswell-EP driver to
the snbep split driver.

	Signed-off-by: Yan, Zheng <zheng.z.yan@intel.com>
[ Add missing break. Add imc events. Add cbox nc/isoc/c6. ]
	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: eranian@google.com
Link: http://lkml.kernel.org/r/1409872109-31645-2-git-send-email-andi@firstfloor.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit e735b9db12d76d45f74aee78bd63bbd2f8f480e1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_intel_uncore.h
#	arch/x86/kernel/cpu/perf_event_intel_uncore_snbep.c
diff --cc arch/x86/kernel/cpu/perf_event_intel_uncore.h
index 90236f0c94a9,18eb78bbdd10..000000000000
--- a/arch/x86/kernel/cpu/perf_event_intel_uncore.h
+++ b/arch/x86/kernel/cpu/perf_event_intel_uncore.h
@@@ -694,3 -299,41 +694,44 @@@ static inline bool uncore_box_is_fake(s
  {
  	return (box->phys_id < 0);
  }
++<<<<<<< HEAD
++=======
+ 
+ struct intel_uncore_pmu *uncore_event_to_pmu(struct perf_event *event);
+ struct intel_uncore_box *uncore_pmu_to_box(struct intel_uncore_pmu *pmu, int cpu);
+ struct intel_uncore_box *uncore_event_to_box(struct perf_event *event);
+ u64 uncore_msr_read_counter(struct intel_uncore_box *box, struct perf_event *event);
+ void uncore_pmu_start_hrtimer(struct intel_uncore_box *box);
+ void uncore_pmu_cancel_hrtimer(struct intel_uncore_box *box);
+ void uncore_pmu_event_read(struct perf_event *event);
+ void uncore_perf_event_update(struct intel_uncore_box *box, struct perf_event *event);
+ struct event_constraint *
+ uncore_get_constraint(struct intel_uncore_box *box, struct perf_event *event);
+ void uncore_put_constraint(struct intel_uncore_box *box, struct perf_event *event);
+ u64 uncore_shared_reg_config(struct intel_uncore_box *box, int idx);
+ 
+ extern struct intel_uncore_type **uncore_msr_uncores;
+ extern struct intel_uncore_type **uncore_pci_uncores;
+ extern struct pci_driver *uncore_pci_driver;
+ extern int uncore_pcibus_to_physid[256];
+ extern struct pci_dev *uncore_extra_pci_dev[UNCORE_SOCKET_MAX][UNCORE_EXTRA_PCI_DEV_MAX];
+ extern struct event_constraint uncore_constraint_empty;
+ 
+ /* perf_event_intel_uncore_snb.c */
+ int snb_uncore_pci_init(void);
+ int ivb_uncore_pci_init(void);
+ int hsw_uncore_pci_init(void);
+ void snb_uncore_cpu_init(void);
+ void nhm_uncore_cpu_init(void);
+ 
+ /* perf_event_intel_uncore_snbep.c */
+ int snbep_uncore_pci_init(void);
+ void snbep_uncore_cpu_init(void);
+ int ivbep_uncore_pci_init(void);
+ void ivbep_uncore_cpu_init(void);
+ int hswep_uncore_pci_init(void);
+ void hswep_uncore_cpu_init(void);
+ 
+ /* perf_event_intel_uncore_nhmex.c */
+ void nhmex_uncore_cpu_init(void);
++>>>>>>> e735b9db12d7 (perf/x86/intel/uncore: Add Haswell-EP uncore support)
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_uncore_snbep.c
diff --git a/arch/x86/kernel/cpu/perf_event_intel_uncore.c b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
index 969a74b7104d..c47a658e7106 100644
--- a/arch/x86/kernel/cpu/perf_event_intel_uncore.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
@@ -3867,6 +3867,9 @@ static int __init uncore_pci_init(void)
 		pci_uncores = ivt_pci_uncores;
 		uncore_pci_driver = &ivt_uncore_pci_driver;
 		break;
+	case 63: /* Haswell-EP */
+		ret = hswep_uncore_pci_init();
+		break;
 	case 42: /* Sandy Bridge */
 		ret = snb_pci2phy_map_init(PCI_DEVICE_ID_INTEL_SNB_IMC);
 		if (ret)
@@ -4195,7 +4198,9 @@ static int __init uncore_cpu_init(void)
 			ivt_uncore_cbox.num_boxes = max_cores;
 		msr_uncores = ivt_msr_uncores;
 		break;
-
+	case 63: /* Haswell-EP */
+		hswep_uncore_cpu_init();
+		break;
 	default:
 		return 0;
 	}
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_uncore.h
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_uncore_snbep.c
