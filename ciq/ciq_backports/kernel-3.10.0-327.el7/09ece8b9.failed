iw_cxgb4: use BAR2 GTS register for T5 kernel mode CQs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Hariprasad S <hariprasad@chelsio.com>
commit 09ece8b9e983fe858de6eab7a386d58d194227b6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/09ece8b9.failed

For T5, we must not use the kdb/kgts registers, in order avoid db drops
under extreme loads.

	Signed-off-by: Steve Wise <swise@opengridcomputing.com>
	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 09ece8b9e983fe858de6eab7a386d58d194227b6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/cxgb4/t4.h
diff --cc drivers/infiniband/hw/cxgb4/t4.h
index c04e5134b30c,7f2a6c244d25..000000000000
--- a/drivers/infiniband/hw/cxgb4/t4.h
+++ b/drivers/infiniband/hw/cxgb4/t4.h
@@@ -561,14 -562,14 +562,25 @@@ static inline int t4_arm_cq(struct t4_c
  	u32 val;
  
  	set_bit(CQ_ARMED, &cq->flags);
++<<<<<<< HEAD
 +	while (cq->cidx_inc > CIDXINC_MASK) {
 +		val = SEINTARM(0) | CIDXINC(CIDXINC_MASK) | TIMERREG(7) |
 +		      INGRESSQID(cq->cqid);
++=======
+ 	while (cq->cidx_inc > CIDXINC_M) {
+ 		val = SEINTARM_V(0) | CIDXINC_V(CIDXINC_M) | TIMERREG_V(7) |
+ 		      INGRESSQID_V(cq->cqid & cq->qid_mask);
++>>>>>>> 09ece8b9e983 (iw_cxgb4: use BAR2 GTS register for T5 kernel mode CQs)
  		writel(val, cq->gts);
 -		cq->cidx_inc -= CIDXINC_M;
 +		cq->cidx_inc -= CIDXINC_MASK;
  	}
++<<<<<<< HEAD
 +	val = SEINTARM(se) | CIDXINC(cq->cidx_inc) | TIMERREG(6) |
 +	      INGRESSQID(cq->cqid);
++=======
+ 	val = SEINTARM_V(se) | CIDXINC_V(cq->cidx_inc) | TIMERREG_V(6) |
+ 	      INGRESSQID_V(cq->cqid & cq->qid_mask);
++>>>>>>> 09ece8b9e983 (iw_cxgb4: use BAR2 GTS register for T5 kernel mode CQs)
  	writel(val, cq->gts);
  	cq->cidx_inc = 0;
  	return 0;
@@@ -597,11 -598,11 +609,16 @@@ static inline void t4_swcq_consume(stru
  static inline void t4_hwcq_consume(struct t4_cq *cq)
  {
  	cq->bits_type_ts = cq->queue[cq->cidx].bits_type_ts;
 -	if (++cq->cidx_inc == (cq->size >> 4) || cq->cidx_inc == CIDXINC_M) {
 +	if (++cq->cidx_inc == (cq->size >> 4) || cq->cidx_inc == CIDXINC_MASK) {
  		u32 val;
  
++<<<<<<< HEAD
 +		val = SEINTARM(0) | CIDXINC(cq->cidx_inc) | TIMERREG(7) |
 +		      INGRESSQID(cq->cqid);
++=======
+ 		val = SEINTARM_V(0) | CIDXINC_V(cq->cidx_inc) | TIMERREG_V(7) |
+ 		      INGRESSQID_V(cq->cqid & cq->qid_mask);
++>>>>>>> 09ece8b9e983 (iw_cxgb4: use BAR2 GTS register for T5 kernel mode CQs)
  		writel(val, cq->gts);
  		cq->cidx_inc = 0;
  	}
diff --git a/drivers/infiniband/hw/cxgb4/cq.c b/drivers/infiniband/hw/cxgb4/cq.c
index 0f773e78e080..992b2f8efaea 100644
--- a/drivers/infiniband/hw/cxgb4/cq.c
+++ b/drivers/infiniband/hw/cxgb4/cq.c
@@ -156,12 +156,19 @@ static int create_cq(struct c4iw_rdev *rdev, struct t4_cq *cq,
 		goto err4;
 
 	cq->gen = 1;
-	cq->gts = rdev->lldi.gts_reg;
 	cq->rdev = rdev;
 	if (user) {
-		cq->ugts = (u64)pci_resource_start(rdev->lldi.pdev, 2) +
-					(cq->cqid << rdev->cqshift);
-		cq->ugts &= PAGE_MASK;
+		u32 off = (cq->cqid << rdev->cqshift) & PAGE_MASK;
+
+		cq->ugts = (u64)rdev->bar2_pa + off;
+	} else if (is_t4(rdev->lldi.adapter_type)) {
+		cq->gts = rdev->lldi.gts_reg;
+		cq->qid_mask = -1U;
+	} else {
+		u32 off = ((cq->cqid << rdev->cqshift) & PAGE_MASK) + 12;
+
+		cq->gts = rdev->bar2_kva + off;
+		cq->qid_mask = rdev->qpmask;
 	}
 	return 0;
 err4:
* Unmerged path drivers/infiniband/hw/cxgb4/t4.h
