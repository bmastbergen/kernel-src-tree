ixgbe: enable relaxed ordering for SPARC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jeff Kirsher <jeffrey.t.kirsher@intel.com>
commit 887012e80aeaf36968456e8085abf41aee907707
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/887012e8.failed

This patch makes sure that relaxed ordering is not disabled when
on SPARC, where it helps with performance.

CC: <kernel-team@fb.com>
CC: Sowmini Varadhan <sowmini.varadhan@oracle.com>
	Reported-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
	Tested-by: Phil Schmitt <phillip.j.schmitt@intel.com>
(cherry picked from commit 887012e80aeaf36968456e8085abf41aee907707)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c
index 7481c33b25ed,824a7ab79ab6..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c
@@@ -181,9 -177,11 +182,15 @@@ out
   **/
  static s32 ixgbe_start_hw_82598(struct ixgbe_hw *hw)
  {
+ #ifndef CONFIG_SPARC
  	u32 regval;
  	u32 i;
++<<<<<<< HEAD
 +	s32 ret_val = 0;
++=======
+ #endif
+ 	s32 ret_val;
++>>>>>>> 887012e80aea (ixgbe: enable relaxed ordering for SPARC)
  
  	ret_val = ixgbe_start_hw_generic(hw);
  
@@@ -202,12 -201,14 +210,18 @@@
  			    IXGBE_DCA_RXCTRL_HEAD_WRO_EN);
  		IXGBE_WRITE_REG(hw, IXGBE_DCA_RXCTRL(i), regval);
  	}
++<<<<<<< HEAD
++=======
+ #endif
+ 	if (ret_val)
+ 		return ret_val;
++>>>>>>> 887012e80aea (ixgbe: enable relaxed ordering for SPARC)
  
  	/* set the completion timeout for interface */
 -	ixgbe_set_pcie_completion_timeout(hw);
 +	if (ret_val == 0)
 +		ixgbe_set_pcie_completion_timeout(hw);
  
 -	return 0;
 +	return ret_val;
  }
  
  /**
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_82598.c
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
index 3752cb5a0418..68847a28e7f1 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_common.c
@@ -316,7 +316,6 @@ out:
 s32 ixgbe_start_hw_gen2(struct ixgbe_hw *hw)
 {
 	u32 i;
-	u32 regval;
 
 	/* Clear the rate limiters */
 	for (i = 0; i < hw->mac.max_tx_queues; i++) {
@@ -325,20 +324,25 @@ s32 ixgbe_start_hw_gen2(struct ixgbe_hw *hw)
 	}
 	IXGBE_WRITE_FLUSH(hw);
 
+#ifndef CONFIG_SPARC
 	/* Disable relaxed ordering */
 	for (i = 0; i < hw->mac.max_tx_queues; i++) {
+		u32 regval;
+
 		regval = IXGBE_READ_REG(hw, IXGBE_DCA_TXCTRL_82599(i));
 		regval &= ~IXGBE_DCA_TXCTRL_DESC_WRO_EN;
 		IXGBE_WRITE_REG(hw, IXGBE_DCA_TXCTRL_82599(i), regval);
 	}
 
 	for (i = 0; i < hw->mac.max_rx_queues; i++) {
+		u32 regval;
+
 		regval = IXGBE_READ_REG(hw, IXGBE_DCA_RXCTRL(i));
 		regval &= ~(IXGBE_DCA_RXCTRL_DATA_WRO_EN |
 			    IXGBE_DCA_RXCTRL_HEAD_WRO_EN);
 		IXGBE_WRITE_REG(hw, IXGBE_DCA_RXCTRL(i), regval);
 	}
-
+#endif
 	return 0;
 }
 
