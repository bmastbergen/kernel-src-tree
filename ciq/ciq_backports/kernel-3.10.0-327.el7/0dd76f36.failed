ALSA: hda - Replace open codes with snd_hdac_stream_set_params()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] hda - Replace open codes with snd_hdac_stream_set_params() (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 95.08%
commit-author Takashi Iwai <tiwai@suse.de>
commit 0dd76f36efa43fa75a568b0d24736a9e51d51170
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/0dd76f36.failed

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 0dd76f36efa43fa75a568b0d24736a9e51d51170)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/pci/hda/hda_controller.c
diff --cc sound/pci/hda/hda_controller.c
index 0d7233e1e418,e0bb6231ff0c..000000000000
--- a/sound/pci/hda/hda_controller.c
+++ b/sound/pci/hda/hda_controller.c
@@@ -470,9 -155,9 +470,9 @@@ static int azx_pcm_prepare(struct snd_p
  	struct azx_pcm *apcm = snd_pcm_substream_chip(substream);
  	struct azx *chip = apcm->chip;
  	struct azx_dev *azx_dev = get_azx_dev(substream);
 -	struct hda_pcm_stream *hinfo = to_hda_pcm_stream(substream);
 +	struct hda_pcm_stream *hinfo = apcm->hinfo[substream->stream];
  	struct snd_pcm_runtime *runtime = substream->runtime;
- 	unsigned int bufsize, period_bytes, format_val, stream_tag;
+ 	unsigned int format_val, stream_tag;
  	int err;
  	struct hda_spdif_out *spdif =
  		snd_hda_spdif_out_of_nid(apcm->codec, hinfo->nid);
@@@ -499,45 -183,13 +499,51 @@@
  		goto unlock;
  	}
  
++<<<<<<< HEAD
 +	bufsize = snd_pcm_lib_buffer_bytes(substream);
 +	period_bytes = snd_pcm_lib_period_bytes(substream);
 +
 +	dev_dbg(chip->card->dev, "azx_pcm_prepare: bufsize=0x%x, format=0x%x\n",
 +		bufsize, format_val);
 +
 +	if (bufsize != azx_dev->bufsize ||
 +	    period_bytes != azx_dev->period_bytes ||
 +	    format_val != azx_dev->format_val ||
 +	    runtime->no_period_wakeup != azx_dev->no_period_wakeup) {
 +		azx_dev->bufsize = bufsize;
 +		azx_dev->period_bytes = period_bytes;
 +		azx_dev->format_val = format_val;
 +		azx_dev->no_period_wakeup = runtime->no_period_wakeup;
 +		err = azx_setup_periods(chip, substream, azx_dev);
 +		if (err < 0)
 +			goto unlock;
 +	}
++=======
+ 	err = snd_hdac_stream_set_params(azx_stream(azx_dev), format_val);
+ 	if (err < 0)
+ 		goto unlock;
++>>>>>>> 0dd76f36efa4 (ALSA: hda - Replace open codes with snd_hdac_stream_set_params())
  
 -	snd_hdac_stream_setup(azx_stream(azx_dev));
 +	/* when LPIB delay correction gives a small negative value,
 +	 * we ignore it; currently set the threshold statically to
 +	 * 64 frames
 +	 */
 +	if (runtime->period_size > 64)
 +		azx_dev->delay_negative_threshold = -frames_to_bytes(runtime, 64);
 +	else
 +		azx_dev->delay_negative_threshold = 0;
 +
 +	/* wallclk has 24Mhz clock source */
 +	azx_dev->period_wallclk = (((runtime->period_size * 24000) /
 +						runtime->rate) * 1000);
 +	azx_setup_controller(chip, azx_dev);
 +	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
 +		azx_dev->fifo_size =
 +			azx_sd_readw(chip, azx_dev, SD_FIFOSIZE) + 1;
 +	else
 +		azx_dev->fifo_size = 0;
  
 -	stream_tag = azx_dev->core.stream_tag;
 +	stream_tag = azx_dev->stream_tag;
  	/* CA-IBG chips need the playback stream starting from 1 */
  	if ((chip->driver_caps & AZX_DCAPS_CTX_WORKAROUND) &&
  	    stream_tag > chip->capture_streams)
* Unmerged path sound/pci/hda/hda_controller.c
