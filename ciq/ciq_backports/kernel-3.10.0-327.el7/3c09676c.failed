block: move flush initialization to blk_flush_init

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [block] move flush initialization to blk_flush_init (Jeff Moyer) [1209624]
Rebuild_FUZZ: 92.47%
commit-author Ming Lei <ming.lei@canonical.com>
commit 3c09676c12b1dabf84acbb5849bfc54acadaf092
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3c09676c.failed

These fields are always used with the flush request, so
initialize them together.

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Ming Lei <ming.lei@canonical.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 3c09676c12b1dabf84acbb5849bfc54acadaf092)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-flush.c
diff --cc block/blk-flush.c
index d8b80a403a8f,a49ffbdcfcdc..000000000000
--- a/block/blk-flush.c
+++ b/block/blk-flush.c
@@@ -502,3 -485,24 +502,27 @@@ int blk_mq_init_flush(struct request_qu
  		return -ENOMEM;
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ int blk_init_flush(struct request_queue *q)
+ {
+ 	INIT_LIST_HEAD(&q->flush_queue[0]);
+ 	INIT_LIST_HEAD(&q->flush_queue[1]);
+ 	INIT_LIST_HEAD(&q->flush_data_in_flight);
+ 
+ 	if (q->mq_ops)
+ 		return blk_mq_init_flush(q);
+ 
+ 	q->flush_rq = kzalloc(sizeof(struct request), GFP_KERNEL);
+ 	if (!q->flush_rq)
+ 		return -ENOMEM;
+ 
+ 	return 0;
+ }
+ 
+ void blk_exit_flush(struct request_queue *q)
+ {
+ 	kfree(q->flush_rq);
+ }
++>>>>>>> 3c09676c12b1 (block: move flush initialization to blk_flush_init)
diff --git a/block/blk-core.c b/block/blk-core.c
index 6c8ecd3370db..0697ccaebd04 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -603,9 +603,6 @@ struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id)
 #ifdef CONFIG_BLK_CGROUP
 	INIT_LIST_HEAD(&q->blkg_list);
 #endif
-	INIT_LIST_HEAD(&q->flush_queue[0]);
-	INIT_LIST_HEAD(&q->flush_queue[1]);
-	INIT_LIST_HEAD(&q->flush_data_in_flight);
 	INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);
 
 	kobject_init(&q->kobj, &blk_queue_ktype);
* Unmerged path block/blk-flush.c
