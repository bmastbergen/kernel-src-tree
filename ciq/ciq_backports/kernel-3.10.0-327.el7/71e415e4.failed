vlan: make a new function vlan_dev_vlan_proto() and export

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author dingtianhong <dingtianhong@huawei.com>
commit 71e415e44c1f9b7a4f05dac4f8038575dbef0c6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/71e415e4.failed

The vlan support 2 proto: 802.1q and 802.1ad, so make a new function
called vlan_dev_vlan_proto() which could return the vlan proto for
input dev.

	Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 71e415e44c1f9b7a4f05dac4f8038575dbef0c6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/if_vlan.h
diff --cc include/linux/if_vlan.h
index 1bd9a1e5db11,13bbbde00e68..000000000000
--- a/include/linux/if_vlan.h
+++ b/include/linux/if_vlan.h
@@@ -123,6 -104,26 +123,29 @@@ struct vlan_pcpu_stats 
  	u32			tx_dropped;
  };
  
++<<<<<<< HEAD
++=======
+ #if defined(CONFIG_VLAN_8021Q) || defined(CONFIG_VLAN_8021Q_MODULE)
+ 
+ extern struct net_device *__vlan_find_dev_deep(struct net_device *real_dev,
+ 					       __be16 vlan_proto, u16 vlan_id);
+ extern struct net_device *vlan_dev_real_dev(const struct net_device *dev);
+ extern u16 vlan_dev_vlan_id(const struct net_device *dev);
+ extern __be16 vlan_dev_vlan_proto(const struct net_device *dev);
+ 
+ /**
+  *	struct vlan_priority_tci_mapping - vlan egress priority mappings
+  *	@priority: skb priority
+  *	@vlan_qos: vlan priority: (skb->priority << 13) & 0xE000
+  *	@next: pointer to next struct
+  */
+ struct vlan_priority_tci_mapping {
+ 	u32					priority;
+ 	u16					vlan_qos;
+ 	struct vlan_priority_tci_mapping	*next;
+ };
+ 
++>>>>>>> 71e415e44c1f (vlan: make a new function vlan_dev_vlan_proto() and export)
  struct proc_dir_entry;
  struct netpoll;
  
* Unmerged path include/linux/if_vlan.h
diff --git a/net/8021q/vlan_core.c b/net/8021q/vlan_core.c
index 6ee48aac776f..b316d1ccebef 100644
--- a/net/8021q/vlan_core.c
+++ b/net/8021q/vlan_core.c
@@ -106,6 +106,12 @@ u16 vlan_dev_vlan_id(const struct net_device *dev)
 }
 EXPORT_SYMBOL(vlan_dev_vlan_id);
 
+__be16 vlan_dev_vlan_proto(const struct net_device *dev)
+{
+	return vlan_dev_priv(dev)->vlan_proto;
+}
+EXPORT_SYMBOL(vlan_dev_vlan_proto);
+
 static struct sk_buff *vlan_reorder_header(struct sk_buff *skb)
 {
 	if (skb_cow(skb, skb_headroom(skb)) < 0)
