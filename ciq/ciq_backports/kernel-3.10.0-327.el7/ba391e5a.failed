HID: rmi: do not handle touchscreens through hid-rmi

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [hid] rmi: do not handle touchscreens through hid-rmi (Aristeu Rozanski) [1075108 1075114]
Rebuild_FUZZ: 94.95%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit ba391e5a5ac6697b8bcae8c0d01439cb765d9ef8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ba391e5a.failed

Currently, hid-rmi drives every Synaptics product, but the touchscreens
on the Windows tablets should be handled through hid-multitouch.

Instead of providing a long list of PIDs, rely on the scan_report
capability to detect which should go to hid-multitouch, and which
should not go to hid-rmi.

related bug:
https://bugzilla.kernel.org/show_bug.cgi?id=74241
https://bugzilla.redhat.com/show_bug.cgi?id=1089583

	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit ba391e5a5ac6697b8bcae8c0d01439cb765d9ef8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-core.c
#	drivers/hid/hid-rmi.c
diff --cc drivers/hid/hid-core.c
index c4e5cdfa5d24,64c71c866916..000000000000
--- a/drivers/hid/hid-core.c
+++ b/drivers/hid/hid-core.c
@@@ -692,48 -742,49 +692,75 @@@ static void hid_scan_usage(struct hid_d
   */
  static int hid_scan_report(struct hid_device *hid)
  {
 -	struct hid_parser *parser;
 -	struct hid_item item;
 +	unsigned int page = 0, delim = 0;
  	__u8 *start = hid->dev_rdesc;
  	__u8 *end = start + hid->dev_rsize;
 -	static int (*dispatch_type[])(struct hid_parser *parser,
 -				      struct hid_item *item) = {
 -		hid_scan_main,
 -		hid_parser_global,
 -		hid_parser_local,
 -		hid_parser_reserved
 -	};
 -
 -	parser = vzalloc(sizeof(struct hid_parser));
 -	if (!parser)
 -		return -ENOMEM;
 +	unsigned int u, u_min = 0, u_max = 0;
 +	struct hid_item item;
  
 -	parser->device = hid;
  	hid->group = HID_GROUP_GENERIC;
 +	while ((start = fetch_item(start, end, &item)) != NULL) {
 +		if (item.format != HID_ITEM_FORMAT_SHORT)
 +			return -EINVAL;
 +		if (item.type == HID_ITEM_TYPE_GLOBAL) {
 +			if (item.tag == HID_GLOBAL_ITEM_TAG_USAGE_PAGE)
 +				page = item_udata(&item) << 16;
 +		} else if (item.type == HID_ITEM_TYPE_LOCAL) {
 +			if (delim > 1)
 +				break;
 +			u = item_udata(&item);
 +			if (item.size <= 2)
 +				u += page;
 +			switch (item.tag) {
 +			case HID_LOCAL_ITEM_TAG_DELIMITER:
 +				delim += !!u;
 +				break;
 +			case HID_LOCAL_ITEM_TAG_USAGE:
 +				hid_scan_usage(hid, u);
 +				break;
 +			case HID_LOCAL_ITEM_TAG_USAGE_MINIMUM:
 +				u_min = u;
 +				break;
 +			case HID_LOCAL_ITEM_TAG_USAGE_MAXIMUM:
 +				u_max = u;
 +				for (u = u_min; u <= u_max; u++)
 +					hid_scan_usage(hid, u);
 +				break;
 +			}
 +		} else if (page == HID_UP_SENSOR &&
 +			item.type == HID_ITEM_TYPE_MAIN &&
 +			item.tag == HID_MAIN_ITEM_TAG_BEGIN_COLLECTION &&
 +			(item_udata(&item) & 0xff) == HID_COLLECTION_PHYSICAL)
 +			hid->group = HID_GROUP_SENSOR_HUB;
 +	}
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * The parsing is simpler than the one in hid_open_report() as we should
+ 	 * be robust against hid errors. Those errors will be raised by
+ 	 * hid_open_report() anyway.
+ 	 */
+ 	while ((start = fetch_item(start, end, &item)) != NULL)
+ 		dispatch_type[item.type](parser, &item);
+ 
+ 	/*
+ 	 * Handle special flags set during scanning.
+ 	 */
+ 	if ((parser->scan_flags & HID_SCAN_FLAG_MT_WIN_8) &&
+ 	    (hid->group == HID_GROUP_MULTITOUCH))
+ 		hid->group = HID_GROUP_MULTITOUCH_WIN_8;
+ 
+ 	/*
+ 	* Vendor specific handlings
+ 	*/
+ 	if ((hid->vendor == USB_VENDOR_ID_SYNAPTICS) &&
+ 	    (hid->group == HID_GROUP_GENERIC))
+ 		/* hid-rmi should take care of them, not hid-generic */
+ 		hid->group = HID_GROUP_RMI;
+ 
+ 	vfree(parser);
++>>>>>>> ba391e5a5ac6 (HID: rmi: do not handle touchscreens through hid-rmi)
  	return 0;
  }
  
* Unmerged path drivers/hid/hid-rmi.c
* Unmerged path drivers/hid/hid-core.c
* Unmerged path drivers/hid/hid-rmi.c
diff --git a/include/linux/hid.h b/include/linux/hid.h
index 4f8aa4733fb6..ea84e650b32c 100644
--- a/include/linux/hid.h
+++ b/include/linux/hid.h
@@ -291,11 +291,19 @@ struct hid_item {
 
 /*
  * HID device groups
+ *
+ * Note: HID_GROUP_ANY is declared in linux/mod_devicetable.h
+ * and has a value of 0x0000
  */
 #define HID_GROUP_GENERIC			0x0001
 #define HID_GROUP_MULTITOUCH			0x0002
 #define HID_GROUP_SENSOR_HUB			0x0003
 
+/*
+ * Vendor specific HID device groups
+ */
+#define HID_GROUP_RMI				0x0100
+
 /*
  * This is the global environment of the parser. This information is
  * persistent for main-items. The global environment can be saved and
