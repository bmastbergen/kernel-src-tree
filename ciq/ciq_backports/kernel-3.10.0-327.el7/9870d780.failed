perf ordered_samples: Remove references to perf_{evlist,tool} and machines

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf] ordered_samples: Remove references to perf_{evlist, tool} and machines (Jiri Olsa) [1222189]
Rebuild_FUZZ: 95.83%
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 9870d7809575515e26194f4b3df1750872a6ee60
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9870d780.failed

As these can be obtained from the ordered_events pointer, via
container_of, reducing the cross section of ordered_samples.

These were added to ordered_samples in:

 commit b7b61cbebd789a3dbca522e3fdb727fe5c95593f
 Author: Arnaldo Carvalho de Melo <acme@redhat.com>
 Date:   Tue Mar 3 11:58:45 2015 -0300

    perf ordered_events: Shorten function signatures

    By keeping pointers to machines, evlist and tool in ordered_events.

But that was more a transitional patch while moving stuff out from
perf_session.c to ordered_events.c and possibly not even needed by then,
as we could use the container_of() method and instead of having the
nr_unordered_samples stats in events_stats, we can have it in
ordered_samples.

Based-on-a-patch-by: Jiri Olsa <jolsa@kernel.org>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Don Zickus <dzickus@redhat.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/n/tip-4lk0t9js82g0tfc0x1onpkjt@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9870d7809575515e26194f4b3df1750872a6ee60)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/ordered-events.c
#	tools/perf/util/ordered-events.h
#	tools/perf/util/session.c
diff --cc tools/perf/util/session.c
index 0cda1e0750c5,dfacf1d50162..000000000000
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@@ -85,6 -92,23 +85,26 @@@ static void perf_session__set_comm_exec
  	machines__set_comm_exec(&session->machines, comm_exec);
  }
  
++<<<<<<< HEAD
++=======
+ static int ordered_events__deliver_event(struct ordered_events *oe,
+ 					 struct ordered_event *event)
+ {
+ 	struct perf_sample sample;
+ 	struct perf_session *session = container_of(oe, struct perf_session,
+ 						    ordered_events);
+ 	int ret = perf_evlist__parse_sample(session->evlist, event->event, &sample);
+ 
+ 	if (ret) {
+ 		pr_err("Can't parse sample, err = %d\n", ret);
+ 		return ret;
+ 	}
+ 
+ 	return machines__deliver_event(&session->machines, session->evlist, event->event,
+ 				       &sample, session->tool, event->file_offset);
+ }
+ 
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  struct perf_session *perf_session__new(struct perf_data_file *file,
  				       bool repipe, struct perf_tool *tool)
  {
@@@ -94,12 -118,9 +114,15 @@@
  		goto out;
  
  	session->repipe = repipe;
++<<<<<<< HEAD
 +	INIT_LIST_HEAD(&session->ordered_events.events);
 +	INIT_LIST_HEAD(&session->ordered_events.cache);
 +	INIT_LIST_HEAD(&session->ordered_events.to_free);
++=======
+ 	session->tool   = tool;
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  	machines__init(&session->machines);
- 	ordered_events__init(&session->ordered_events, &session->machines,
- 			     session->evlist, tool, ordered_events__deliver_event);
+ 	ordered_events__init(&session->ordered_events, ordered_events__deliver_event);
  
  	if (file) {
  		if (perf_data_file__open(file))
@@@ -1061,9 -946,10 +1084,14 @@@ static int perf_session_deliver_event(s
  
  static s64 perf_session__process_user_event(struct perf_session *session,
  					    union perf_event *event,
 +					    struct perf_tool *tool,
  					    u64 file_offset)
  {
++<<<<<<< HEAD
++=======
+ 	struct ordered_events *oe = &session->ordered_events;
+ 	struct perf_tool *tool = session->tool;
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  	int fd = perf_data_file__fd(session->file);
  	int err;
  
@@@ -1101,15 -987,17 +1129,22 @@@
  
  int perf_session__deliver_synth_event(struct perf_session *session,
  				      union perf_event *event,
 -				      struct perf_sample *sample)
 +				      struct perf_sample *sample,
 +				      struct perf_tool *tool)
  {
++<<<<<<< HEAD
 +	events_stats__inc(&session->stats, event->header.type);
++=======
+ 	struct perf_evlist *evlist = session->evlist;
+ 	struct perf_tool *tool = session->tool;
+ 
+ 	events_stats__inc(&evlist->stats, event->header.type);
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  
  	if (event->header.type >= PERF_RECORD_USER_TYPE_START)
 -		return perf_session__process_user_event(session, event, 0);
 +		return perf_session__process_user_event(session, event, tool, 0);
  
 -	return machines__deliver_event(&session->machines, evlist, event, sample, tool, 0);
 +	return perf_session__deliver_event(session, event, sample, tool, 0);
  }
  
  static void event_swap(union perf_event *event, bool sample_id_all)
@@@ -1177,10 -1065,10 +1212,15 @@@ out_parse_sample
  }
  
  static s64 perf_session__process_event(struct perf_session *session,
 -				       union perf_event *event, u64 file_offset)
 +				       union perf_event *event,
 +				       struct perf_tool *tool,
 +				       u64 file_offset)
  {
++<<<<<<< HEAD
++=======
+ 	struct perf_evlist *evlist = session->evlist;
+ 	struct perf_tool *tool = session->tool;
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  	struct perf_sample sample;
  	int ret;
  
@@@ -1238,51 -1125,57 +1278,72 @@@ static struct thread *perf_session__reg
  	return thread;
  }
  
++<<<<<<< HEAD
 +static void perf_session__warn_about_errors(const struct perf_session *session,
 +					    const struct perf_tool *tool)
 +{
 +	if (tool->lost == perf_event__process_lost &&
 +	    session->stats.nr_events[PERF_RECORD_LOST] != 0) {
++=======
+ static void perf_session__warn_about_errors(const struct perf_session *session)
+ {
+ 	const struct events_stats *stats = &session->evlist->stats;
+ 	const struct ordered_events *oe = &session->ordered_events;
+ 
+ 	if (session->tool->lost == perf_event__process_lost &&
+ 	    stats->nr_events[PERF_RECORD_LOST] != 0) {
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  		ui__warning("Processed %d events and lost %d chunks!\n\n"
  			    "Check IO/CPU overload!\n\n",
 -			    stats->nr_events[0],
 -			    stats->nr_events[PERF_RECORD_LOST]);
 +			    session->stats.nr_events[0],
 +			    session->stats.nr_events[PERF_RECORD_LOST]);
  	}
  
 -	if (stats->nr_unknown_events != 0) {
 +	if (session->stats.nr_unknown_events != 0) {
  		ui__warning("Found %u unknown events!\n\n"
  			    "Is this an older tool processing a perf.data "
  			    "file generated by a more recent tool?\n\n"
  			    "If that is not the case, consider "
  			    "reporting to linux-kernel@vger.kernel.org.\n\n",
 -			    stats->nr_unknown_events);
 +			    session->stats.nr_unknown_events);
  	}
  
 -	if (stats->nr_unknown_id != 0) {
 +	if (session->stats.nr_unknown_id != 0) {
  		ui__warning("%u samples with id not present in the header\n",
 -			    stats->nr_unknown_id);
 +			    session->stats.nr_unknown_id);
  	}
  
 -	if (stats->nr_invalid_chains != 0) {
 -		ui__warning("Found invalid callchains!\n\n"
 -			    "%u out of %u events were discarded for this reason.\n\n"
 -			    "Consider reporting to linux-kernel@vger.kernel.org.\n\n",
 -			    stats->nr_invalid_chains,
 -			    stats->nr_events[PERF_RECORD_SAMPLE]);
 -	}
 + 	if (session->stats.nr_invalid_chains != 0) {
 + 		ui__warning("Found invalid callchains!\n\n"
 + 			    "%u out of %u events were discarded for this reason.\n\n"
 + 			    "Consider reporting to linux-kernel@vger.kernel.org.\n\n",
 + 			    session->stats.nr_invalid_chains,
 + 			    session->stats.nr_events[PERF_RECORD_SAMPLE]);
 + 	}
  
 -	if (stats->nr_unprocessable_samples != 0) {
 +	if (session->stats.nr_unprocessable_samples != 0) {
  		ui__warning("%u unprocessable samples recorded.\n"
  			    "Do you have a KVM guest running and not using 'perf kvm'?\n",
 -			    stats->nr_unprocessable_samples);
 +			    session->stats.nr_unprocessable_samples);
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	if (oe->nr_unordered_events != 0)
+ 		ui__warning("%u out of order events recorded.\n", oe->nr_unordered_events);
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  }
  
  volatile int session_done;
  
 -static int __perf_session__process_pipe_events(struct perf_session *session)
 +static int __perf_session__process_pipe_events(struct perf_session *session,
 +					       struct perf_tool *tool)
  {
++<<<<<<< HEAD
++=======
+ 	struct ordered_events *oe = &session->ordered_events;
+ 	struct perf_tool *tool = session->tool;
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  	int fd = perf_data_file__fd(session->file);
  	union perf_event *event;
  	uint32_t size, cur_size = 0;
@@@ -1362,11 -1255,11 +1423,16 @@@ more
  		goto more;
  done:
  	/* do the final flush for ordered samples */
 -	err = ordered_events__flush(oe, OE_FLUSH__FINAL);
 +	err = ordered_events__flush(session, tool, OE_FLUSH__FINAL);
  out_err:
  	free(buf);
++<<<<<<< HEAD
 +	perf_session__warn_about_errors(session, tool);
 +	perf_session_free_sample_buffers(session);
++=======
+ 	perf_session__warn_about_errors(session);
+ 	ordered_events__free(&session->ordered_events);
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  	return err;
  }
  
@@@ -1412,8 -1305,10 +1478,13 @@@ fetch_mmaped_event(struct perf_session 
  
  static int __perf_session__process_events(struct perf_session *session,
  					  u64 data_offset, u64 data_size,
 -					  u64 file_size)
 +					  u64 file_size, struct perf_tool *tool)
  {
++<<<<<<< HEAD
++=======
+ 	struct ordered_events *oe = &session->ordered_events;
+ 	struct perf_tool *tool = session->tool;
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  	int fd = perf_data_file__fd(session->file);
  	u64 head, page_offset, file_offset, file_pos, size;
  	int err, mmap_prot, mmap_flags, map_idx = 0;
@@@ -1507,11 -1401,11 +1578,16 @@@ more
  
  out:
  	/* do the final flush for ordered samples */
 -	err = ordered_events__flush(oe, OE_FLUSH__FINAL);
 +	err = ordered_events__flush(session, tool, OE_FLUSH__FINAL);
  out_err:
  	ui_progress__finish();
++<<<<<<< HEAD
 +	perf_session__warn_about_errors(session, tool);
 +	perf_session_free_sample_buffers(session);
++=======
+ 	perf_session__warn_about_errors(session);
+ 	ordered_events__free(&session->ordered_events);
++>>>>>>> 9870d7809575 (perf ordered_samples: Remove references to perf_{evlist,tool} and machines)
  	session->one_mmap = false;
  	return err;
  }
* Unmerged path tools/perf/util/ordered-events.c
* Unmerged path tools/perf/util/ordered-events.h
* Unmerged path tools/perf/util/ordered-events.c
* Unmerged path tools/perf/util/ordered-events.h
* Unmerged path tools/perf/util/session.c
diff --git a/tools/perf/util/session.h b/tools/perf/util/session.h
index 4c0f5b098c9f..711dfef1c217 100644
--- a/tools/perf/util/session.h
+++ b/tools/perf/util/session.h
@@ -40,6 +40,7 @@ struct perf_session {
 	u64			one_mmap_offset;
 	struct ordered_events	ordered_events;
 	struct perf_data_file	*file;
+	struct perf_tool	*tool;
 };
 
 #define PRINT_IP_OPT_IP		(1<<0)
