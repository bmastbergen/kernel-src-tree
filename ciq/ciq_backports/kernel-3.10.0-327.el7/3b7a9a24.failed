ovl: mount: change order of initialization

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Miklos Szeredi <mszeredi@suse.cz>
commit 3b7a9a249a93e68b7bb318de40e64d3b68ba1a6d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3b7a9a24.failed

Move allocation of root entry above to where it's needed.

Move initializations related to upperdir and workdir near each other.

	Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
(cherry picked from commit 3b7a9a249a93e68b7bb318de40e64d3b68ba1a6d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/super.c
diff --cc fs/overlayfs/super.c
index ab28e68ccbc7,a17702833dd0..000000000000
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@@ -686,16 -748,11 +685,19 @@@ static int ovl_fill_super(struct super_
  		goto out_free_config;
  	}
  
++<<<<<<< HEAD
 +	err = -ENOMEM;
 +	oe = ovl_alloc_entry();
 +	if (oe == NULL)
 +		goto out_free_config;
 +
++=======
++>>>>>>> 3b7a9a249a93 (ovl: mount: change order of initialization)
  	err = ovl_mount_dir(ufs->config.upperdir, &upperpath);
  	if (err)
- 		goto out_free_oe;
+ 		goto out_free_config;
  
- 	err = ovl_mount_dir(ufs->config.lowerdir, &lowerpath);
+ 	err = ovl_mount_dir(ufs->config.workdir, &workpath);
  	if (err)
  		goto out_put_upperpath;
  
@@@ -737,51 -794,49 +739,72 @@@
  	}
  	ufs->lower_namelen = statfs.f_namelen;
  
 -	sb->s_stack_depth = max(upperpath.mnt->mnt_sb->s_stack_depth,
 -				lowerpath.mnt->mnt_sb->s_stack_depth) + 1;
 +	upper_stack_depth = get_s_stack_depth(upperpath.mnt->mnt_sb);
 +	lower_stack_depth = get_s_stack_depth(lowerpath.mnt->mnt_sb);
 +	overlay_stack_depth = get_s_stack_depth(sb);
 +	err = -EOPNOTSUPP;
 +	if (!upper_stack_depth || !lower_stack_depth || !overlay_stack_depth) {
 +		pr_err("overlayfs: superblock missing extension wrapper (old kernel?)\n");
 +		goto out_put_workpath;
 +	}
 +
 +	*overlay_stack_depth = max(*upper_stack_depth, *lower_stack_depth) + 1;
  
  	err = -EINVAL;
 -	if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
 +	if (*overlay_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
  		pr_err("overlayfs: maximum fs stacking depth exceeded\n");
- 		goto out_put_workpath;
+ 		goto out_put_lowerpath;
  	}
  
  	ufs->upper_mnt = clone_private_mount(&upperpath);
  	err = PTR_ERR(ufs->upper_mnt);
  	if (IS_ERR(ufs->upper_mnt)) {
  		pr_err("overlayfs: failed to clone upperpath\n");
- 		goto out_put_workpath;
+ 		goto out_put_lowerpath;
  	}
  
+ 	ufs->workdir = ovl_workdir_create(ufs->upper_mnt, workpath.dentry);
+ 	err = PTR_ERR(ufs->workdir);
+ 	if (IS_ERR(ufs->workdir)) {
+ 		pr_err("overlayfs: failed to create directory %s/%s\n",
+ 		       ufs->config.workdir, OVL_WORKDIR_NAME);
+ 		goto out_put_upper_mnt;
+ 	}
+ 
++<<<<<<< HEAD
 +	ufs->lower_mnt = clone_private_mount(&lowerpath);
 +	err = PTR_ERR(ufs->lower_mnt);
 +	if (IS_ERR(ufs->lower_mnt)) {
++=======
+ 	ufs->lower_mnt = kcalloc(1, sizeof(struct vfsmount *), GFP_KERNEL);
+ 	if (ufs->lower_mnt == NULL)
+ 		goto out_put_workdir;
+ 
+ 	mnt = clone_private_mount(&lowerpath);
+ 	err = PTR_ERR(mnt);
+ 	if (IS_ERR(mnt)) {
++>>>>>>> 3b7a9a249a93 (ovl: mount: change order of initialization)
  		pr_err("overlayfs: failed to clone lowerpath\n");
 +		goto out_put_upper_mnt;
 +	}
 +
++<<<<<<< HEAD
 +	ufs->workdir = ovl_workdir_create(ufs->upper_mnt, workpath.dentry);
 +	err = PTR_ERR(ufs->workdir);
 +	if (IS_ERR(ufs->workdir)) {
 +		pr_err("overlayfs: failed to create directory %s/%s\n",
 +		       ufs->config.workdir, OVL_WORKDIR_NAME);
  		goto out_put_lower_mnt;
  	}
 +
  	/*
  	 * Make lower_mnt R/O.  That way fchmod/fchown on lower file
  	 * will fail instead of modifying lower fs.
  	 */
 -	mnt->mnt_flags |= MNT_READONLY;
 -
 -	ufs->lower_mnt[0] = mnt;
 -	ufs->numlower = 1;
 +	ufs->lower_mnt->mnt_flags |= MNT_READONLY;
  
++=======
++>>>>>>> 3b7a9a249a93 (ovl: mount: change order of initialization)
  	/* If the upper fs is r/o, we mark overlayfs r/o too */
  	if (ufs->upper_mnt->mnt_sb->s_flags & MS_RDONLY)
  		sb->s_flags |= MS_RDONLY;
@@@ -813,20 -869,22 +836,26 @@@
  
  	return 0;
  
- out_put_workdir:
- 	dput(ufs->workdir);
+ out_free_oe:
+ 	kfree(oe);
  out_put_lower_mnt:
++<<<<<<< HEAD
 +	mntput(ufs->lower_mnt);
++=======
+ 	for (i = 0; i < ufs->numlower; i++)
+ 		mntput(ufs->lower_mnt[i]);
+ 	kfree(ufs->lower_mnt);
+ out_put_workdir:
+ 	dput(ufs->workdir);
++>>>>>>> 3b7a9a249a93 (ovl: mount: change order of initialization)
  out_put_upper_mnt:
  	mntput(ufs->upper_mnt);
- out_put_workpath:
- 	path_put(&workpath);
  out_put_lowerpath:
  	path_put(&lowerpath);
+ out_put_workpath:
+ 	path_put(&workpath);
  out_put_upperpath:
  	path_put(&upperpath);
- out_free_oe:
- 	kfree(oe);
  out_free_config:
  	kfree(ufs->config.lowerdir);
  	kfree(ufs->config.upperdir);
* Unmerged path fs/overlayfs/super.c
