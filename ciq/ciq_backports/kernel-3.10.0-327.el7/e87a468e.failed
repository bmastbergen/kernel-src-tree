ipv6: Fix udp checksums with raw sockets

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Vlad Yasevich <vyasevich@gmail.com>
commit e87a468eb97da35d8dc00e8fa9828b4de4ab69d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e87a468e.failed

It was reported that trancerout6 would cause
a kernel to crash when trying to compute checksums
on raw UDP packets.  The cause was the check in
__ip6_append_data that would attempt to use
partial checksums on the packet.  However,
raw sockets do not initialize partial checksum
fields so partial checksums can't be used.

Solve this the same way IPv4 does it.  raw sockets
pass transhdrlen value of 0 to ip_append_data which
causes the checksum to be computed in software.  Use
the same check in ip6_append_data (check transhdrlen).

	Reported-by: Wolfgang Walter <linux@stwm.de>
CC: Wolfgang Walter <linux@stwm.de>
CC: Eric Dumazet <eric.dumazet@gmail.com>
	Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e87a468eb97da35d8dc00e8fa9828b4de4ab69d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_output.c
diff --cc net/ipv6/ip6_output.c
index 524b4ad02d70,bc09cb97b840..000000000000
--- a/net/ipv6/ip6_output.c
+++ b/net/ipv6/ip6_output.c
@@@ -1261,10 -1291,23 +1261,23 @@@ emsgsize
  		}
  	}
  
 -	if (sk->sk_type == SOCK_DGRAM || sk->sk_type == SOCK_RAW) {
 +	/* For UDP, check if TX timestamp is enabled */
 +	if (sk->sk_type == SOCK_DGRAM)
  		sock_tx_timestamp(sk, &tx_flags);
 -		if (tx_flags & SKBTX_ANY_SW_TSTAMP &&
 -		    sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID)
 -			tskey = sk->sk_tskey++;
 -	}
  
++<<<<<<< HEAD
++=======
+ 	/* If this is the first and only packet and device
+ 	 * supports checksum offloading, let's use it.
+ 	 * Use transhdrlen, same as IPv4, because partial
+ 	 * sums only work when transhdrlen is set.
+ 	 */
+ 	if (transhdrlen && sk->sk_protocol == IPPROTO_UDP &&
+ 	    length + fragheaderlen < mtu &&
+ 	    rt->dst.dev->features & NETIF_F_V6_CSUM &&
+ 	    !exthdrlen)
+ 		csummode = CHECKSUM_PARTIAL;
++>>>>>>> e87a468eb97d (ipv6: Fix udp checksums with raw sockets)
  	/*
  	 * Let's try using as much space as possible.
  	 * Use MTU if total length of the message fits into the MTU.
* Unmerged path net/ipv6/ip6_output.c
