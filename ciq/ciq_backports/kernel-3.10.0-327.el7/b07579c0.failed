PCI: Export pci_iov_virtfn_bus() and pci_iov_virtfn_devfn()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Wei Yang <weiyang@linux.vnet.ibm.com>
commit b07579c0924eee1543eb6cd2c19544d15a4b5236
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b07579c0.failed

On PowerNV, some resource reservation is needed for SR-IOV VFs that don't
exist at the bootup stage.  To do the match between resources and VFs, the
code need to get the VF's BDF in advance.

Rename virtfn_bus() and virtfn_devfn() to pci_iov_virtfn_bus() and
pci_iov_virtfn_devfn() and export them.

[bhelgaas: changelog, make "busnr" int]
	Signed-off-by: Wei Yang <weiyang@linux.vnet.ibm.com>
	Acked-by: Bjorn Helgaas <bhelgaas@google.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit b07579c0924eee1543eb6cd2c19544d15a4b5236)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/iov.c
diff --cc drivers/pci/iov.c
index cb6f24740ee3,5643a1011e23..000000000000
--- a/drivers/pci/iov.c
+++ b/drivers/pci/iov.c
@@@ -19,18 -19,61 +19,64 @@@
  
  #define VIRTFN_ID_LEN	16
  
- static inline u8 virtfn_bus(struct pci_dev *dev, int id)
+ int pci_iov_virtfn_bus(struct pci_dev *dev, int vf_id)
  {
+ 	if (!dev->is_physfn)
+ 		return -EINVAL;
  	return dev->bus->number + ((dev->devfn + dev->sriov->offset +
- 				    dev->sriov->stride * id) >> 8);
+ 				    dev->sriov->stride * vf_id) >> 8);
  }
  
- static inline u8 virtfn_devfn(struct pci_dev *dev, int id)
+ int pci_iov_virtfn_devfn(struct pci_dev *dev, int vf_id)
  {
+ 	if (!dev->is_physfn)
+ 		return -EINVAL;
  	return (dev->devfn + dev->sriov->offset +
- 		dev->sriov->stride * id) & 0xff;
+ 		dev->sriov->stride * vf_id) & 0xff;
+ }
+ 
++<<<<<<< HEAD
++=======
+ /*
+  * Per SR-IOV spec sec 3.3.10 and 3.3.11, First VF Offset and VF Stride may
+  * change when NumVFs changes.
+  *
+  * Update iov->offset and iov->stride when NumVFs is written.
+  */
+ static inline void pci_iov_set_numvfs(struct pci_dev *dev, int nr_virtfn)
+ {
+ 	struct pci_sriov *iov = dev->sriov;
+ 
+ 	pci_write_config_word(dev, iov->pos + PCI_SRIOV_NUM_VF, nr_virtfn);
+ 	pci_read_config_word(dev, iov->pos + PCI_SRIOV_VF_OFFSET, &iov->offset);
+ 	pci_read_config_word(dev, iov->pos + PCI_SRIOV_VF_STRIDE, &iov->stride);
+ }
+ 
+ /*
+  * The PF consumes one bus number.  NumVFs, First VF Offset, and VF Stride
+  * determine how many additional bus numbers will be consumed by VFs.
+  *
+  * Iterate over all valid NumVFs and calculate the maximum number of bus
+  * numbers that could ever be required.
+  */
+ static inline u8 virtfn_max_buses(struct pci_dev *dev)
+ {
+ 	struct pci_sriov *iov = dev->sriov;
+ 	int nr_virtfn;
+ 	u8 max = 0;
+ 	int busnr;
+ 
+ 	for (nr_virtfn = 1; nr_virtfn <= iov->total_VFs; nr_virtfn++) {
+ 		pci_iov_set_numvfs(dev, nr_virtfn);
+ 		busnr = pci_iov_virtfn_bus(dev, nr_virtfn - 1);
+ 		if (busnr > max)
+ 			max = busnr;
+ 	}
+ 
+ 	return max;
  }
  
++>>>>>>> b07579c0924e (PCI: Export pci_iov_virtfn_bus() and pci_iov_virtfn_devfn())
  static struct pci_bus *virtfn_add_bus(struct pci_bus *bus, int busnr)
  {
  	struct pci_bus *child;
@@@ -180,6 -230,7 +226,10 @@@ static int sriov_enable(struct pci_dev 
  	struct pci_dev *pdev;
  	struct pci_sriov *iov = dev->sriov;
  	int bars = 0;
++<<<<<<< HEAD
++=======
+ 	int bus;
++>>>>>>> b07579c0924e (PCI: Export pci_iov_virtfn_bus() and pci_iov_virtfn_devfn())
  
  	if (!nr_virtfn)
  		return 0;
@@@ -216,8 -267,10 +266,15 @@@
  	iov->offset = offset;
  	iov->stride = stride;
  
++<<<<<<< HEAD
 +	if (virtfn_bus(dev, nr_virtfn - 1) > dev->bus->busn_res.end) {
 +		dev_err(&dev->dev, "SR-IOV: bus number out of range\n");
++=======
+ 	bus = pci_iov_virtfn_bus(dev, nr_virtfn - 1);
+ 	if (bus > dev->bus->busn_res.end) {
+ 		dev_err(&dev->dev, "can't enable %d VFs (bus %02x out of range of %pR)\n",
+ 			nr_virtfn, bus, &dev->bus->busn_res);
++>>>>>>> b07579c0924e (PCI: Export pci_iov_virtfn_bus() and pci_iov_virtfn_devfn())
  		return -ENOMEM;
  	}
  
* Unmerged path drivers/pci/iov.c
diff --git a/include/linux/pci.h b/include/linux/pci.h
index b4b6c0506dae..e20af8d9b958 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1636,6 +1636,9 @@ int pci_ext_cfg_avail(void);
 void __iomem *pci_ioremap_bar(struct pci_dev *pdev, int bar);
 
 #ifdef CONFIG_PCI_IOV
+int pci_iov_virtfn_bus(struct pci_dev *dev, int id);
+int pci_iov_virtfn_devfn(struct pci_dev *dev, int id);
+
 int pci_enable_sriov(struct pci_dev *dev, int nr_virtfn);
 void pci_disable_sriov(struct pci_dev *dev);
 int pci_num_vf(struct pci_dev *dev);
@@ -1643,6 +1646,14 @@ int pci_vfs_assigned(struct pci_dev *dev);
 int pci_sriov_set_totalvfs(struct pci_dev *dev, u16 numvfs);
 int pci_sriov_get_totalvfs(struct pci_dev *dev);
 #else
+static inline int pci_iov_virtfn_bus(struct pci_dev *dev, int id)
+{
+	return -ENOSYS;
+}
+static inline int pci_iov_virtfn_devfn(struct pci_dev *dev, int id)
+{
+	return -ENOSYS;
+}
 static inline int pci_enable_sriov(struct pci_dev *dev, int nr_virtfn)
 { return -ENODEV; }
 static inline void pci_disable_sriov(struct pci_dev *dev) { }
