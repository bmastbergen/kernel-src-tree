xfs: combine xfs_dir_canenter into xfs_dir_createname

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Eric Sandeen <sandeen@sandeen.net>
commit b16ed7c114b8cca45fa87b675c431f43ff90c179
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b16ed7c1.failed

xfs_dir_canenter and xfs_dir_createname are
almost identical.

Fold the former into the latter, with a helpful
wrapper for the former.  If createname is called without
an inode number, it now only checks for space, and does
not actually add the entry.

	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit b16ed7c114b8cca45fa87b675c431f43ff90c179)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_dir2.c
diff --cc fs/xfs/libxfs/xfs_dir2.c
index 9c24f03e02cd,7075aaf131f4..000000000000
--- a/fs/xfs/libxfs/xfs_dir2.c
+++ b/fs/xfs/libxfs/xfs_dir2.c
@@@ -545,50 -547,7 +550,54 @@@ xfs_dir_canenter
  	xfs_inode_t	*dp,
  	struct xfs_name	*name)		/* name of entry to add */
  {
++<<<<<<< HEAD
 +	struct xfs_da_args *args;
 +	int		rval;
 +	int		v;		/* type-checking value */
 +
 +	ASSERT(S_ISDIR(dp->i_d.di_mode));
 +
 +	args = kmem_zalloc(sizeof(*args), KM_SLEEP | KM_NOFS);
 +	if (!args)
 +		return ENOMEM;
 +
 +	args->geo = dp->i_mount->m_dir_geo;
 +	args->name = name->name;
 +	args->namelen = name->len;
 +	args->filetype = name->type;
 +	args->hashval = dp->i_mount->m_dirnameops->hashname(name);
 +	args->dp = dp;
 +	args->whichfork = XFS_DATA_FORK;
 +	args->trans = tp;
 +	args->op_flags = XFS_DA_OP_JUSTCHECK | XFS_DA_OP_ADDNAME |
 +							XFS_DA_OP_OKNOENT;
 +
 +	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL) {
 +		rval = xfs_dir2_sf_addname(args);
 +		goto out_free;
 +	}
 +
 +	rval = xfs_dir2_isblock(tp, dp, &v);
 +	if (rval)
 +		goto out_free;
 +	if (v) {
 +		rval = xfs_dir2_block_addname(args);
 +		goto out_free;
 +	}
 +
 +	rval = xfs_dir2_isleaf(tp, dp, &v);
 +	if (rval)
 +		goto out_free;
 +	if (v)
 +		rval = xfs_dir2_leaf_addname(args);
 +	else
 +		rval = xfs_dir2_node_addname(args);
 +out_free:
 +	kmem_free(args);
 +	return rval;
++=======
+ 	return xfs_dir_createname(tp, dp, name, 0, NULL, NULL, 0);
++>>>>>>> b16ed7c114b8 (xfs: combine xfs_dir_canenter into xfs_dir_createname)
  }
  
  /*
* Unmerged path fs/xfs/libxfs/xfs_dir2.c
