xfs: fix agno increment in xfs_inumbers() loop

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Eric Sandeen <sandeen@sandeen.net>
commit a8b1ee8bafc765ebf029d03c5479a69aebff9693
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/a8b1ee8b.failed

caused a regression in xfs_inumbers, which in turn broke
xfsdump, causing incomplete dumps.

The loop in xfs_inumbers() needs to fill the user-supplied
buffers, and iterates via xfs_btree_increment, reading new
ags as needed.

But the first time through the loop, if xfs_btree_increment()
succeeds, we continue, which triggers the ++agno at the bottom
of the loop, and we skip to soon to the next ag - without
the proper setup under next_ag to read the next ag.

Fix this by removing the agno increment from the loop conditional,
and only increment agno if we have actually hit the code under
the next_ag: target.

	Cc: stable@vger.kernel.org
	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit a8b1ee8bafc765ebf029d03c5479a69aebff9693)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_itable.c
diff --cc fs/xfs/xfs_itable.c
index 8b51c4e93b7b,f1deb961a296..000000000000
--- a/fs/xfs/xfs_itable.c
+++ b/fs/xfs/xfs_itable.c
@@@ -667,28 -624,30 +667,49 @@@ xfs_inumbers
  			*count += bufidx;
  			bufidx = 0;
  		}
++<<<<<<< HEAD
 +		if (left) {
 +			error = xfs_btree_increment(cur, 0, &tmp);
 +			if (error) {
 +				xfs_btree_del_cursor(cur, XFS_BTREE_ERROR);
 +				cur = NULL;
 +				xfs_buf_relse(agbp);
 +				agbp = NULL;
 +				/*
 +				 * The agino value has already been bumped.
 +				 * Just try to skip up to it.
 +				 */
 +				agino += XFS_INODES_PER_CHUNK;
 +				continue;
 +			}
 +		}
 +	}
++=======
+ 		if (!--left)
+ 			break;
+ 
+ 		error = xfs_btree_increment(cur, 0, &stat);
+ 		if (error)
+ 			break;
+ 		if (stat)
+ 			continue;
+ 
+ next_ag:
+ 		xfs_btree_del_cursor(cur, XFS_BTREE_ERROR);
+ 		cur = NULL;
+ 		xfs_buf_relse(agbp);
+ 		agbp = NULL;
+ 		agino = 0;
+ 		agno++;
+ 	} while (agno < mp->m_sb.sb_agcount);
+ 
++>>>>>>> a8b1ee8bafc7 (xfs: fix agno increment in xfs_inumbers() loop)
  	if (!error) {
  		if (bufidx) {
 -			long	written;
 -
 -			error = formatter(ubuffer, buffer, bufidx, &written);
 -			if (!error)
 +			long written;
 +			if (formatter(ubuffer, buffer, bufidx, &written))
 +				error = XFS_ERROR(EFAULT);
 +			else
  				*count += bufidx;
  		}
  		*lastino = XFS_AGINO_TO_INO(mp, agno, agino);
* Unmerged path fs/xfs/xfs_itable.c
