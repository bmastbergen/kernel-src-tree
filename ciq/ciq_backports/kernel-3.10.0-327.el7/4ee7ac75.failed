bonding: add ad_info attribute netlink support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author sfeldma@cumulusnetworks.com <sfeldma@cumulusnetworks.com>
commit 4ee7ac7526d4a9413cafa733d824edfe49fdcc46
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/4ee7ac75.failed

Add nested IFLA_BOND_AD_INFO for bonding 802.3ad info.

	Signed-off-by: Scott Feldman <sfeldma@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4ee7ac7526d4a9413cafa733d824edfe49fdcc46)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	include/uapi/linux/if_link.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,1b4013b5f230..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -23,6 -25,27 +23,30 @@@
  static const struct nla_policy bond_policy[IFLA_BOND_MAX + 1] = {
  	[IFLA_BOND_MODE]		= { .type = NLA_U8 },
  	[IFLA_BOND_ACTIVE_SLAVE]	= { .type = NLA_U32 },
++<<<<<<< HEAD
++=======
+ 	[IFLA_BOND_MIIMON]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_UPDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_DOWNDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_USE_CARRIER]		= { .type = NLA_U8 },
+ 	[IFLA_BOND_ARP_INTERVAL]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_ARP_IP_TARGET]	= { .type = NLA_NESTED },
+ 	[IFLA_BOND_ARP_VALIDATE]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_ARP_ALL_TARGETS]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_PRIMARY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_PRIMARY_RESELECT]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_FAIL_OVER_MAC]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_XMIT_HASH_POLICY]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_RESEND_IGMP]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_NUM_PEER_NOTIF]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_ALL_SLAVES_ACTIVE]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_MIN_LINKS]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_LP_INTERVAL]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_PACKETS_PER_SLAVE]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_AD_LACP_RATE]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_AD_SELECT]		= { .type = NLA_U8 },
+ 	[IFLA_BOND_AD_INFO]		= { .type = NLA_NESTED },
++>>>>>>> 4ee7ac7526d4 (bonding: add ad_info attribute netlink support)
  };
  
  static int bond_validate(struct nlattr *tb[], struct nlattr *data[])
@@@ -83,7 -289,35 +107,39 @@@ static int bond_newlink(struct net *src
  static size_t bond_get_size(const struct net_device *bond_dev)
  {
  	return nla_total_size(sizeof(u8)) +	/* IFLA_BOND_MODE */
++<<<<<<< HEAD
 +		nla_total_size(sizeof(u32));	/* IFLA_BOND_ACTIVE_SLAVE */
++=======
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ACTIVE_SLAVE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIIMON */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_UPDELAY */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_DOWNDELAY */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_USE_CARRIER */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_INTERVAL */
+ 						/* IFLA_BOND_ARP_IP_TARGET */
+ 		nla_total_size(sizeof(u32)) * BOND_MAX_ARP_TARGETS +
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_VALIDATE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_ALL_TARGETS */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_PRIMARY */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_PRIMARY_RESELECT */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_FAIL_OVER_MAC */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_XMIT_HASH_POLICY */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_RESEND_IGMP */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_NUM_PEER_NOTIF */
+ 		nla_total_size(sizeof(u8)) +   /* IFLA_BOND_ALL_SLAVES_ACTIVE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIN_LINKS */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_LP_INTERVAL */
+ 		nla_total_size(sizeof(u32)) +  /* IFLA_BOND_PACKETS_PER_SLAVE */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_AD_LACP_RATE */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_AD_SELECT */
+ 		nla_total_size(sizeof(struct nlattr)) + /* IFLA_BOND_AD_INFO */
+ 		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_AGGREGATOR */
+ 		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_NUM_PORTS */
+ 		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_ACTOR_KEY */
+ 		nla_total_size(sizeof(u16)) + /* IFLA_BOND_AD_INFO_PARTNER_KEY*/
+ 		nla_total_size(ETH_ALEN) +    /* IFLA_BOND_AD_INFO_PARTNER_MAC*/
+ 		0;
++>>>>>>> 4ee7ac7526d4 (bonding: add ad_info attribute netlink support)
  }
  
  static int bond_fill_info(struct sk_buff *skb,
@@@ -91,11 -325,142 +147,144 @@@
  {
  	struct bonding *bond = netdev_priv(bond_dev);
  	struct net_device *slave_dev = bond_option_active_slave_get(bond);
 -	struct nlattr *targets;
 -	unsigned int packets_per_slave;
 -	int i, targets_added;
  
 -	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode))
 +	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode) ||
 +	    (slave_dev &&
 +	     nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex)))
  		goto nla_put_failure;
++<<<<<<< HEAD
++=======
+ 
+ 	if (slave_dev &&
+ 	    nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIIMON, bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_UPDELAY,
+ 			bond->params.updelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_DOWNDELAY,
+ 			bond->params.downdelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_USE_CARRIER, bond->params.use_carrier))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_INTERVAL, bond->params.arp_interval))
+ 		goto nla_put_failure;
+ 
+ 	targets = nla_nest_start(skb, IFLA_BOND_ARP_IP_TARGET);
+ 	if (!targets)
+ 		goto nla_put_failure;
+ 
+ 	targets_added = 0;
+ 	for (i = 0; i < BOND_MAX_ARP_TARGETS; i++) {
+ 		if (bond->params.arp_targets[i]) {
+ 			nla_put_be32(skb, i, bond->params.arp_targets[i]);
+ 			targets_added = 1;
+ 		}
+ 	}
+ 
+ 	if (targets_added)
+ 		nla_nest_end(skb, targets);
+ 	else
+ 		nla_nest_cancel(skb, targets);
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_VALIDATE, bond->params.arp_validate))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_ALL_TARGETS,
+ 			bond->params.arp_all_targets))
+ 		goto nla_put_failure;
+ 
+ 	if (bond->primary_slave &&
+ 	    nla_put_u32(skb, IFLA_BOND_PRIMARY,
+ 			bond->primary_slave->dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_PRIMARY_RESELECT,
+ 		       bond->params.primary_reselect))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_FAIL_OVER_MAC,
+ 		       bond->params.fail_over_mac))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_XMIT_HASH_POLICY,
+ 		       bond->params.xmit_policy))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_RESEND_IGMP,
+ 		        bond->params.resend_igmp))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_NUM_PEER_NOTIF,
+ 		       bond->params.num_peer_notif))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_ALL_SLAVES_ACTIVE,
+ 		       bond->params.all_slaves_active))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIN_LINKS,
+ 			bond->params.min_links))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_LP_INTERVAL,
+ 			bond->params.lp_interval))
+ 		goto nla_put_failure;
+ 
+ 	packets_per_slave = bond->params.packets_per_slave;
+ 	if (packets_per_slave > 1)
+ 		packets_per_slave = reciprocal_value(packets_per_slave);
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_PACKETS_PER_SLAVE,
+ 			packets_per_slave))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_AD_LACP_RATE,
+ 		       bond->params.lacp_fast))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_AD_SELECT,
+ 		       bond->params.ad_select))
+ 		goto nla_put_failure;
+ 
+ 	if (bond->params.mode == BOND_MODE_8023AD) {
+ 		struct ad_info info;
+ 
+ 		if (!bond_3ad_get_active_agg_info(bond, &info)) {
+ 			struct nlattr *nest;
+ 
+ 			nest = nla_nest_start(skb, IFLA_BOND_AD_INFO);
+ 			if (!nest)
+ 				goto nla_put_failure;
+ 
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_AGGREGATOR,
+ 					info.aggregator_id))
+ 				goto nla_put_failure;
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_NUM_PORTS,
+ 					info.ports))
+ 				goto nla_put_failure;
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_ACTOR_KEY,
+ 					info.actor_key))
+ 				goto nla_put_failure;
+ 			if (nla_put_u16(skb, IFLA_BOND_AD_INFO_PARTNER_KEY,
+ 					info.partner_key))
+ 				goto nla_put_failure;
+ 			if (nla_put(skb, IFLA_BOND_AD_INFO_PARTNER_MAC,
+ 				    sizeof(info.partner_system),
+ 				    &info.partner_system))
+ 				goto nla_put_failure;
+ 
+ 			nla_nest_end(skb, nest);
+ 		}
+ 	}
+ 
++>>>>>>> 4ee7ac7526d4 (bonding: add ad_info attribute netlink support)
  	return 0;
  
  nla_put_failure:
diff --cc include/uapi/linux/if_link.h
index 4efe6bcb6e67,3e6bd3c7445d..000000000000
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@@ -340,6 -331,27 +340,30 @@@ enum 
  	IFLA_BOND_UNSPEC,
  	IFLA_BOND_MODE,
  	IFLA_BOND_ACTIVE_SLAVE,
++<<<<<<< HEAD
++=======
+ 	IFLA_BOND_MIIMON,
+ 	IFLA_BOND_UPDELAY,
+ 	IFLA_BOND_DOWNDELAY,
+ 	IFLA_BOND_USE_CARRIER,
+ 	IFLA_BOND_ARP_INTERVAL,
+ 	IFLA_BOND_ARP_IP_TARGET,
+ 	IFLA_BOND_ARP_VALIDATE,
+ 	IFLA_BOND_ARP_ALL_TARGETS,
+ 	IFLA_BOND_PRIMARY,
+ 	IFLA_BOND_PRIMARY_RESELECT,
+ 	IFLA_BOND_FAIL_OVER_MAC,
+ 	IFLA_BOND_XMIT_HASH_POLICY,
+ 	IFLA_BOND_RESEND_IGMP,
+ 	IFLA_BOND_NUM_PEER_NOTIF,
+ 	IFLA_BOND_ALL_SLAVES_ACTIVE,
+ 	IFLA_BOND_MIN_LINKS,
+ 	IFLA_BOND_LP_INTERVAL,
+ 	IFLA_BOND_PACKETS_PER_SLAVE,
+ 	IFLA_BOND_AD_LACP_RATE,
+ 	IFLA_BOND_AD_SELECT,
+ 	IFLA_BOND_AD_INFO,
++>>>>>>> 4ee7ac7526d4 (bonding: add ad_info attribute netlink support)
  	__IFLA_BOND_MAX,
  };
  
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path include/uapi/linux/if_link.h
