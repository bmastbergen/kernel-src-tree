vfio-pci: Attempt bus/slot reset on release

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Alex Williamson <alex.williamson@redhat.com>
commit bc4fba77124e2fe4eb14bcb52875c0b0228deace
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/bc4fba77.failed

Each time a device is released, mark whether a local reset was
successful or whether a bus/slot reset is needed.  If a reset is
needed and all of the affected devices are bound to vfio-pci and
unused, allow the reset.  This is most useful when the userspace
driver is killed and releases all the devices in an unclean state,
such as when a QEMU VM quits.

	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit bc4fba77124e2fe4eb14bcb52875c0b0228deace)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/pci/vfio_pci.c
diff --cc drivers/vfio/pci/vfio_pci.c
index a22e87f88fa7,1651c0769b72..000000000000
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@@ -37,6 -37,10 +37,13 @@@ module_param_named(nointxmask, nointxma
  MODULE_PARM_DESC(nointxmask,
  		  "Disable support for PCI 2.3 style INTx masking.  If this resolves problems for specific devices, report lspci -vvvxxx to linux-pci@vger.kernel.org so the device can be fixed automatically via the broken_intx_masking flag.");
  
++<<<<<<< HEAD
++=======
+ static DEFINE_MUTEX(driver_lock);
+ 
+ static void vfio_pci_try_bus_reset(struct vfio_pci_device *vdev);
+ 
++>>>>>>> bc4fba77124e (vfio-pci: Attempt bus/slot reset on release)
  static int vfio_pci_enable(struct vfio_pci_device *vdev)
  {
  	struct pci_dev *pdev = vdev->pdev;
* Unmerged path drivers/vfio/pci/vfio_pci.c
diff --git a/drivers/vfio/pci/vfio_pci_private.h b/drivers/vfio/pci/vfio_pci_private.h
index 9c6d5d0f3b02..9ff525c0ddb6 100644
--- a/drivers/vfio/pci/vfio_pci_private.h
+++ b/drivers/vfio/pci/vfio_pci_private.h
@@ -54,6 +54,7 @@ struct vfio_pci_device {
 	bool			extended_caps;
 	bool			bardirty;
 	bool			has_vga;
+	bool			needs_reset;
 	struct pci_saved_state	*pci_saved_state;
 	atomic_t		refcnt;
 	struct eventfd_ctx	*err_trigger;
