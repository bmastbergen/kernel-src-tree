core/dev: do not ignore dmac in dev_forward_skb()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] do not ignore dmac in dev_forward_skb() (Marcelo Leitner) [1206570]
Rebuild_FUZZ: 88.64%
commit-author Alexei Starovoitov <ast@plumgrid.com>
commit 81b9eab5ebbf0d5d54da4fc168cfb02c2adc76b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/81b9eab5.failed

commit 06a23fe31ca3
("core/dev: set pkt_type after eth_type_trans() in dev_forward_skb()")
and refactoring 64261f230a91
("dev: move skb_scrub_packet() after eth_type_trans()")

are forcing pkt_type to be PACKET_HOST when skb traverses veth.

which means that ip forwarding will kick in inside netns
even if skb->eth->h_dest != dev->dev_addr

Fix order of eth_type_trans() and skb_scrub_packet() in dev_forward_skb()
and in ip_tunnel_rcv()

Fixes: 06a23fe31ca3 ("core/dev: set pkt_type after eth_type_trans() in dev_forward_skb()")
CC: Isaku Yamahata <yamahatanetdev@gmail.com>
CC: Maciej Zenczykowski <zenczykowski@gmail.com>
CC: Nicolas Dichtel <nicolas.dichtel@6wind.com>
	Signed-off-by: Alexei Starovoitov <ast@plumgrid.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 81b9eab5ebbf0d5d54da4fc168cfb02c2adc76b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
#	net/ipv4/ip_tunnel.c
diff --cc net/core/dev.c
index 1924c9647d47,974143d3e727..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -1665,8 -1690,10 +1665,15 @@@ int dev_forward_skb(struct net_device *
  		kfree_skb(skb);
  		return NET_RX_DROP;
  	}
++<<<<<<< HEAD
 +	skb_scrub_packet(skb, true);
 +	skb->protocol = eth_type_trans(skb, dev);
++=======
+ 
+ 	skb_scrub_packet(skb, true);
+ 	skb->protocol = eth_type_trans(skb, dev);
+ 
++>>>>>>> 81b9eab5ebbf (core/dev: do not ignore dmac in dev_forward_skb())
  	return netif_rx(skb);
  }
  EXPORT_SYMBOL_GPL(dev_forward_skb);
diff --cc net/ipv4/ip_tunnel.c
index 97e997263ac1,254f11c24aa5..000000000000
--- a/net/ipv4/ip_tunnel.c
+++ b/net/ipv4/ip_tunnel.c
@@@ -457,8 -454,7 +457,12 @@@ int ip_tunnel_rcv(struct ip_tunnel *tun
  	tstats->rx_bytes += skb->len;
  	u64_stats_update_end(&tstats->syncp);
  
++<<<<<<< HEAD
 +	if (tunnel->net != dev_net(tunnel->dev))
 +		skb_scrub_packet(skb, true);
++=======
+ 	skb_scrub_packet(skb, !net_eq(tunnel->net, dev_net(tunnel->dev)));
++>>>>>>> 81b9eab5ebbf (core/dev: do not ignore dmac in dev_forward_skb())
  
  	if (tunnel->dev->type == ARPHRD_ETHER) {
  		skb->protocol = eth_type_trans(skb, tunnel->dev);
@@@ -466,6 -462,7 +470,10 @@@
  	} else {
  		skb->dev = tunnel->dev;
  	}
++<<<<<<< HEAD
++=======
+ 
++>>>>>>> 81b9eab5ebbf (core/dev: do not ignore dmac in dev_forward_skb())
  	gro_cells_receive(&tunnel->gro_cells, skb);
  	return 0;
  
* Unmerged path net/core/dev.c
* Unmerged path net/ipv4/ip_tunnel.c
