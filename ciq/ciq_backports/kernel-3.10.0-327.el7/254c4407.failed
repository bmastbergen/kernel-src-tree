bio: modify __bio_add_page() to accept pages that don't start a new segment

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Maurizio Lombardi <mlombard@redhat.com>
commit 254c4407cb84a6dec90336054615b0f0e996bb7c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/254c4407.failed

The original behaviour is to refuse to add a new page if the maximum
number of segments has been reached, regardless of the fact the page we
are going to add can be merged into the last segment or not.

Unfortunately, when the system runs under heavy memory fragmentation
conditions, a driver may try to add multiple pages to the last segment.
The original code won't accept them and EBUSY will be reported to
userspace.

This patch modifies the function so it refuses to add a page only in case
the latter starts a new segment and the maximum number of segments has
already been reached.

The bug can be easily reproduced with the st driver:

1) set CONFIG_SCSI_MPT2SAS_MAX_SGE or CONFIG_SCSI_MPT3SAS_MAX_SGE  to 16
2) modprobe st buffer_kbs=1024
3) #dd if=/dev/zero of=/dev/st0 bs=1M count=10
   dd: error writing `/dev/st0': Device or resource busy

[ming.lei@canonical.com: update bi_iter.bi_size before recounting segments]
	Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
	Signed-off-by: Ming Lei <ming.lei@canonical.com>
	Tested-by: Dongsu Park <dongsu.park@profitbricks.com>
	Tested-by: Jet Chen <jet.chen@intel.com>
	Cc: Al Viro <viro@zeniv.linux.org.uk>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Kent Overstreet <kmo@daterainc.com>
	Cc: Jens Axboe <axboe@kernel.dk>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 254c4407cb84a6dec90336054615b0f0e996bb7c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/bio.c
diff --cc fs/bio.c
index 4329823b87b2,fb12df9af0fc..000000000000
--- a/fs/bio.c
+++ b/fs/bio.c
@@@ -710,14 -808,20 +710,24 @@@ static int __bio_add_page(struct reques
  	}
  
  	/* If we may be able to merge these biovecs, force a recount */
- 	if (bio->bi_vcnt && (BIOVEC_PHYS_MERGEABLE(bvec-1, bvec)))
+ 	if (bio->bi_vcnt > 1 && (BIOVEC_PHYS_MERGEABLE(bvec-1, bvec)))
  		bio->bi_flags &= ~(1 << BIO_SEG_VALID);
  
- 	bio->bi_vcnt++;
- 	bio->bi_phys_segments++;
   done:
++<<<<<<< HEAD:fs/bio.c
 +	bio->bi_size += len;
++=======
++>>>>>>> 254c4407cb84 (bio: modify __bio_add_page() to accept pages that don't start a new segment):block/bio.c
  	return len;
+ 
+  failed:
+ 	bvec->bv_page = NULL;
+ 	bvec->bv_len = 0;
+ 	bvec->bv_offset = 0;
+ 	bio->bi_vcnt--;
+ 	bio->bi_iter.bi_size -= len;
+ 	blk_recount_segments(q, bio);
+ 	return 0;
  }
  
  /**
* Unmerged path fs/bio.c
