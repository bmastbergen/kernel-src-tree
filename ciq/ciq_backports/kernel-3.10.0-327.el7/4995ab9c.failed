x86/mm: Clean up the TLB flushing code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] mm: Clean up the TLB flushing code (Larry Woodman) [1172891]
Rebuild_FUZZ: 94.44%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit 4995ab9cf512e9a6cc07dfd6b1d4e2fc48ce7fef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/4995ab9c.failed

The

	if (cpumask_any_but(mm_cpumask(mm), smp_processor_id()) < nr_cpu_ids)

line of code is not exactly the easiest to audit, especially when
it ends up at two different indentation levels.  This eliminates
one of the the copy-n-paste versions.  It also gives us a unified
exit point for each path through this function.  We need this in
a minute for our tracepoint.

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
Link: http://lkml.kernel.org/r/20140731154054.44F1CDDC@viggo.jf.intel.com
	Acked-by: Rik van Riel <riel@redhat.com>
	Acked-by: Mel Gorman <mgorman@suse.de>
	Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
(cherry picked from commit 4995ab9cf512e9a6cc07dfd6b1d4e2fc48ce7fef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/tlb.c
diff --cc arch/x86/mm/tlb.c
index 459590c20aa5,378fbef279d2..000000000000
--- a/arch/x86/mm/tlb.c
+++ b/arch/x86/mm/tlb.c
@@@ -190,22 -194,23 +191,30 @@@ void flush_tlb_mm_range(struct mm_struc
  
  	/* tlb_flushall_shift is on balance point, details in commit log */
  	if (nr_base_pages > act_entries) {
 -		count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
  		local_flush_tlb();
  	} else {
+ 		need_flush_others_all = false;
  		/* flush range by one by one 'invlpg' */
 -		for (addr = start; addr < end;	addr += PAGE_SIZE) {
 -			count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ONE);
 +		for (addr = start; addr < end;	addr += PAGE_SIZE)
  			__flush_tlb_single(addr);
++<<<<<<< HEAD
 +
 +		if (cpumask_any_but(mm_cpumask(mm),
 +				smp_processor_id()) < nr_cpu_ids)
 +			flush_tlb_others(mm_cpumask(mm), mm, start, end);
 +		preempt_enable();
 +		return;
++=======
+ 		}
++>>>>>>> 4995ab9cf512 (x86/mm: Clean up the TLB flushing code)
+ 	}
+ out:
+ 	if (need_flush_others_all) {
+ 		start = 0UL;
+ 		end = TLB_FLUSH_ALL;
  	}
- 
- flush_all:
  	if (cpumask_any_but(mm_cpumask(mm), smp_processor_id()) < nr_cpu_ids)
- 		flush_tlb_others(mm_cpumask(mm), mm, 0UL, TLB_FLUSH_ALL);
+ 		flush_tlb_others(mm_cpumask(mm), mm, start, end);
  	preempt_enable();
  }
  
* Unmerged path arch/x86/mm/tlb.c
