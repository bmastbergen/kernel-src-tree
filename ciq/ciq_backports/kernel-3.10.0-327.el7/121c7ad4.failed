NVMe: within nvme_free_queues(), delete RCU sychro/deferred free

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author kaoudis <kaoudis@colorado.edu>
commit 121c7ad4ef3f3a9e697c4b8b78d74e4d6847d9e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/121c7ad4.failed

Converting from to blk-queue got rid of the driver's RCU
locking-on-queue, so removing unnecessary RCU locking-on-queue
artefacts.

	Reviewed-by: Keith Busch <keith.busch@intel.com>

	Signed-off-by: Kelly Nicole Kaoudis <kaoudis@colorado.edu>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 121c7ad4ef3f3a9e697c4b8b78d74e4d6847d9e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index 4365f3348321,f4aa64160838..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -1319,18 -1111,11 +1319,22 @@@ static void nvme_free_queues(struct nvm
  	int i;
  
  	for (i = dev->queue_count - 1; i >= lowest; i--) {
++<<<<<<< HEAD
 +		nvmeq = raw_nvmeq(dev, i);
 +		RCU_INIT_POINTER(dev->queues[i], NULL);
 +		llist_add(&nvmeq->node, &q_list);
 +		dev->queue_count--;
 +	}
 +	synchronize_rcu();
 +	entry = llist_del_all(&q_list);
 +	llist_for_each_entry_safe(nvmeq, next, entry, node)
++=======
+ 		struct nvme_queue *nvmeq = dev->queues[i];
+ 		dev->queue_count--;
+ 		dev->queues[i] = NULL;
++>>>>>>> 121c7ad4ef3f (NVMe: within nvme_free_queues(), delete RCU sychro/deferred free)
  		nvme_free_queue(nvmeq);
+ 	}
  }
  
  /**
* Unmerged path drivers/block/nvme-core.c
