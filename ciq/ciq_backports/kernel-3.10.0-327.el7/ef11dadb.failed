perf/x86/uncore: Add __init for uncore_cpumask_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] perf/uncore: Add __init for uncore_cpumask_init() (Jiri Olsa) [1176340]
Rebuild_FUZZ: 96.08%
commit-author Dongsheng Yang <yangds.fnst@cn.fujitsu.com>
commit ef11dadb8373fcbe53bdd09ceb262b2f18da10c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ef11dadb.failed

Commit:

  411cf180fa00 perf/x86/uncore: fix initialization of cpumask

introduced the function uncore_cpumask_init(), which is only
called in __init intel_uncore_init(). But it is not marked
with __init, which produces the following warning:

	WARNING: vmlinux.o(.text+0x2464a): Section mismatch in reference from the function uncore_cpumask_init() to the function .init.text:uncore_cpu_setup()
	The function uncore_cpumask_init() references
	the function __init uncore_cpu_setup().
	This is often because uncore_cpumask_init lacks a __init
	annotation or the annotation of uncore_cpu_setup is wrong.

This patch marks uncore_cpumask_init() with __init.

	Signed-off-by: Dongsheng Yang <yangds.fnst@cn.fujitsu.com>
	Acked-by: Stephane Eranian <eranian@google.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
Link: http://lkml.kernel.org/r/1394013516-4964-1-git-send-email-yangds.fnst@cn.fujitsu.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit ef11dadb8373fcbe53bdd09ceb262b2f18da10c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_intel_uncore.c
diff --cc arch/x86/kernel/cpu/perf_event_intel_uncore.c
index f59a2938a794,5c2537af0a25..000000000000
--- a/arch/x86/kernel/cpu/perf_event_intel_uncore.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
@@@ -4250,6 -4229,41 +4250,44 @@@ static int __init uncore_pmus_register(
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void __init uncore_cpumask_init(void)
+ {
+ 	int cpu;
+ 
+ 	/*
+ 	 * ony invoke once from msr or pci init code
+ 	 */
+ 	if (!cpumask_empty(&uncore_cpu_mask))
+ 		return;
+ 
+ 	get_online_cpus();
+ 
+ 	for_each_online_cpu(cpu) {
+ 		int i, phys_id = topology_physical_package_id(cpu);
+ 
+ 		for_each_cpu(i, &uncore_cpu_mask) {
+ 			if (phys_id == topology_physical_package_id(i)) {
+ 				phys_id = -1;
+ 				break;
+ 			}
+ 		}
+ 		if (phys_id < 0)
+ 			continue;
+ 
+ 		uncore_cpu_prepare(cpu, phys_id);
+ 		uncore_event_init_cpu(cpu);
+ 	}
+ 	on_each_cpu(uncore_cpu_setup, NULL, 1);
+ 
+ 	register_cpu_notifier(&uncore_cpu_nb);
+ 
+ 	put_online_cpus();
+ }
+ 
+ 
++>>>>>>> ef11dadb8373 (perf/x86/uncore: Add __init for uncore_cpumask_init())
  static int __init intel_uncore_init(void)
  {
  	int ret;
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_uncore.c
