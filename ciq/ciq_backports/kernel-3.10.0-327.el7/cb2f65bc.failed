i40e/i40evf: Update the admin queue command header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Greg Rose <gregory.v.rose@intel.com>
commit cb2f65bc0c64015e8fa45fe1065ad241bf31a994
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/cb2f65bc.failed

Make the necessary updates to i40e_adminq_cmd.h.

Change-ID: Ib031c86cc6cab78e5aa44c64d8ce5474be8d7e42
	Signed-off-by: Greg Rose <gregory.v.rose@intel.com>
	Tested-by: Jim Young <james.m.young@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit cb2f65bc0c64015e8fa45fe1065ad241bf31a994)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
diff --cc drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
index 000600b6613b,9101f5c00f37..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
@@@ -267,10 -264,10 +261,8 @@@ enum i40e_admin_queue_opc 
  	/* OEM commands */
  	i40e_aqc_opc_oem_parameter_change	= 0xFE00,
  	i40e_aqc_opc_oem_device_status_change	= 0xFE01,
 -	i40e_aqc_opc_oem_ocsd_initialize	= 0xFE02,
 -	i40e_aqc_opc_oem_ocbb_initialize	= 0xFE03,
  
  	/* debug commands */
- 	i40e_aqc_opc_debug_get_deviceid		= 0xFF00,
- 	i40e_aqc_opc_debug_set_mode		= 0xFF01,
  	i40e_aqc_opc_debug_read_reg		= 0xFF03,
  	i40e_aqc_opc_debug_write_reg		= 0xFF04,
  	i40e_aqc_opc_debug_modify_reg		= 0xFF07,
@@@ -2030,10 -2043,98 +2026,100 @@@ struct i40e_aqc_lldp_start 
  
  I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_start);
  
 -/* Get CEE DCBX Oper Config (0x0A07)
 - * uses the generic descriptor struct
 - * returns below as indirect response
 +/* Apply MIB changes (0x0A07)
 + * uses the generic struc as it contains no data
   */
  
++<<<<<<< HEAD
++=======
+ #define I40E_AQC_CEE_APP_FCOE_SHIFT	0x0
+ #define I40E_AQC_CEE_APP_FCOE_MASK	(0x7 << I40E_AQC_CEE_APP_FCOE_SHIFT)
+ #define I40E_AQC_CEE_APP_ISCSI_SHIFT	0x3
+ #define I40E_AQC_CEE_APP_ISCSI_MASK	(0x7 << I40E_AQC_CEE_APP_ISCSI_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ #define I40E_AQC_CEE_PG_STATUS_SHIFT	0x0
+ #define I40E_AQC_CEE_PG_STATUS_MASK	(0x7 << I40E_AQC_CEE_PG_STATUS_SHIFT)
+ #define I40E_AQC_CEE_PFC_STATUS_SHIFT	0x3
+ #define I40E_AQC_CEE_PFC_STATUS_MASK	(0x7 << I40E_AQC_CEE_PFC_STATUS_SHIFT)
+ #define I40E_AQC_CEE_APP_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_STATUS_MASK	(0x7 << I40E_AQC_CEE_APP_STATUS_SHIFT)
+ #define I40E_AQC_CEE_FCOE_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_FCOE_STATUS_MASK	(0x7 << I40E_AQC_CEE_FCOE_STATUS_SHIFT)
+ #define I40E_AQC_CEE_ISCSI_STATUS_SHIFT	0xA
+ #define I40E_AQC_CEE_ISCSI_STATUS_MASK	(0x7 << I40E_AQC_CEE_ISCSI_STATUS_SHIFT)
+ #define I40E_AQC_CEE_FIP_STATUS_SHIFT	0x10
+ #define I40E_AQC_CEE_FIP_STATUS_MASK	(0x7 << I40E_AQC_CEE_FIP_STATUS_SHIFT)
+ struct i40e_aqc_get_cee_dcb_cfg_v1_resp {
+ 	u8	reserved1;
+ 	u8	oper_num_tc;
+ 	u8	oper_prio_tc[4];
+ 	u8	reserved2;
+ 	u8	oper_tc_bw[8];
+ 	u8	oper_pfc_en;
+ 	u8	reserved3;
+ 	__le16	oper_app_prio;
+ 	u8	reserved4;
+ 	__le16	tlv_status;
+ };
+ 
+ I40E_CHECK_STRUCT_LEN(0x18, i40e_aqc_get_cee_dcb_cfg_v1_resp);
+ 
+ struct i40e_aqc_get_cee_dcb_cfg_resp {
+ 	u8	oper_num_tc;
+ 	u8	oper_prio_tc[4];
+ 	u8	oper_tc_bw[8];
+ 	u8	oper_pfc_en;
+ 	__le16	oper_app_prio;
+ #define I40E_AQC_CEE_APP_FCOE_SHIFT	0x0
+ #define I40E_AQC_CEE_APP_FCOE_MASK	(0x7 << I40E_AQC_CEE_APP_FCOE_SHIFT)
+ #define I40E_AQC_CEE_APP_ISCSI_SHIFT	0x3
+ #define I40E_AQC_CEE_APP_ISCSI_MASK	(0x7 << I40E_AQC_CEE_APP_ISCSI_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ 	__le32	tlv_status;
+ #define I40E_AQC_CEE_PG_STATUS_SHIFT	0x0
+ #define I40E_AQC_CEE_PG_STATUS_MASK	(0x7 << I40E_AQC_CEE_PG_STATUS_SHIFT)
+ #define I40E_AQC_CEE_PFC_STATUS_SHIFT	0x3
+ #define I40E_AQC_CEE_PFC_STATUS_MASK	(0x7 << I40E_AQC_CEE_PFC_STATUS_SHIFT)
+ #define I40E_AQC_CEE_APP_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_STATUS_MASK	(0x7 << I40E_AQC_CEE_APP_STATUS_SHIFT)
+ 	u8	reserved[12];
+ };
+ 
+ I40E_CHECK_STRUCT_LEN(0x20, i40e_aqc_get_cee_dcb_cfg_resp);
+ 
+ /*	Set Local LLDP MIB (indirect 0x0A08)
+  *	Used to replace the local MIB of a given LLDP agent. e.g. DCBx
+  */
+ struct i40e_aqc_lldp_set_local_mib {
+ #define SET_LOCAL_MIB_AC_TYPE_DCBX_SHIFT	0
+ #define SET_LOCAL_MIB_AC_TYPE_DCBX_MASK	(1 << SET_LOCAL_MIB_AC_TYPE_DCBX_SHIFT)
+ 	u8	type;
+ 	u8	reserved0;
+ 	__le16	length;
+ 	u8	reserved1[4];
+ 	__le32	address_high;
+ 	__le32	address_low;
+ };
+ 
+ I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_set_local_mib);
+ 
+ /*	Stop/Start LLDP Agent (direct 0x0A09)
+  *	Used for stopping/starting specific LLDP agent. e.g. DCBx
+  */
+ struct i40e_aqc_lldp_stop_start_specific_agent {
+ #define I40E_AQC_START_SPECIFIC_AGENT_SHIFT	0
+ #define I40E_AQC_START_SPECIFIC_AGENT_MASK \
+ 				(1 << I40E_AQC_START_SPECIFIC_AGENT_SHIFT)
+ 	u8	command;
+ 	u8	reserved[15];
+ };
+ 
+ I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_stop_start_specific_agent);
+ 
++>>>>>>> cb2f65bc0c64 (i40e/i40evf: Update the admin queue command header)
  /* Add Udp Tunnel command and completion (direct 0x0B00) */
  struct i40e_aqc_add_udp_tunnel {
  	__le16	udp_port;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
diff --git a/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h b/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h
index 5363cbf38eb8..1a2e4dca8ede 100644
--- a/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h
+++ b/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h
@@ -34,7 +34,7 @@
  */
 
 #define I40E_FW_API_VERSION_MAJOR	0x0001
-#define I40E_FW_API_VERSION_MINOR	0x0002
+#define I40E_FW_API_VERSION_MINOR	0x0004
 #define I40E_FW_API_VERSION_A0_MINOR  0x0000
 
 struct i40e_aq_desc {
@@ -133,12 +133,7 @@ enum i40e_admin_queue_opc {
 	i40e_aqc_opc_list_func_capabilities	= 0x000A,
 	i40e_aqc_opc_list_dev_capabilities	= 0x000B,
 
-	i40e_aqc_opc_set_cppm_configuration	= 0x0103,
-	i40e_aqc_opc_set_arp_proxy_entry	= 0x0104,
-	i40e_aqc_opc_set_ns_proxy_entry		= 0x0105,
-
 	/* LAA */
-	i40e_aqc_opc_mng_laa		= 0x0106,   /* AQ obsolete */
 	i40e_aqc_opc_mac_address_read	= 0x0107,
 	i40e_aqc_opc_mac_address_write	= 0x0108,
 
@@ -260,7 +255,6 @@ enum i40e_admin_queue_opc {
 	/* Tunnel commands */
 	i40e_aqc_opc_add_udp_tunnel	= 0x0B00,
 	i40e_aqc_opc_del_udp_tunnel	= 0x0B01,
-	i40e_aqc_opc_tunnel_key_structure	= 0x0B10,
 
 	/* Async Events */
 	i40e_aqc_opc_event_lan_overflow		= 0x1001,
@@ -270,8 +264,6 @@ enum i40e_admin_queue_opc {
 	i40e_aqc_opc_oem_device_status_change	= 0xFE01,
 
 	/* debug commands */
-	i40e_aqc_opc_debug_get_deviceid		= 0xFF00,
-	i40e_aqc_opc_debug_set_mode		= 0xFF01,
 	i40e_aqc_opc_debug_read_reg		= 0xFF03,
 	i40e_aqc_opc_debug_write_reg		= 0xFF04,
 	i40e_aqc_opc_debug_modify_reg		= 0xFF07,
@@ -504,7 +496,8 @@ struct i40e_aqc_mac_address_read {
 #define I40E_AQC_SAN_ADDR_VALID		0x20
 #define I40E_AQC_PORT_ADDR_VALID	0x40
 #define I40E_AQC_WOL_ADDR_VALID		0x80
-#define I40E_AQC_ADDR_VALID_MASK	0xf0
+#define I40E_AQC_MC_MAG_EN_VALID	0x100
+#define I40E_AQC_ADDR_VALID_MASK	0x1F0
 	u8	reserved[6];
 	__le32	addr_high;
 	__le32	addr_low;
@@ -527,7 +520,9 @@ struct i40e_aqc_mac_address_write {
 #define I40E_AQC_WRITE_TYPE_LAA_ONLY	0x0000
 #define I40E_AQC_WRITE_TYPE_LAA_WOL	0x4000
 #define I40E_AQC_WRITE_TYPE_PORT	0x8000
-#define I40E_AQC_WRITE_TYPE_MASK	0xc000
+#define I40E_AQC_WRITE_TYPE_UPDATE_MC_MAG	0xC000
+#define I40E_AQC_WRITE_TYPE_MASK	0xC000
+
 	__le16	mac_sah;
 	__le32	mac_sal;
 	u8	reserved[8];
@@ -1063,6 +1058,7 @@ struct i40e_aqc_set_vsi_promiscuous_modes {
 	__le16	seid;
 #define I40E_AQC_VSI_PROM_CMD_SEID_MASK		0x3FF
 	__le16	vlan_tag;
+#define I40E_AQC_SET_VSI_VLAN_MASK		0x0FFF
 #define I40E_AQC_SET_VSI_VLAN_VALID		0x8000
 	u8	reserved[8];
 };
