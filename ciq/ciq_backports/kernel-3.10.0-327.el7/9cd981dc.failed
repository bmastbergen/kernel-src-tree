tcp: fix stretch ACK bugs in CUBIC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Neal Cardwell <ncardwell@google.com>
commit 9cd981dcf174d26805a032aefa791436da709bee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9cd981dc.failed

Change CUBIC to properly handle stretch ACKs in additive increase mode
by passing in the count of ACKed packets to tcp_cong_avoid_ai().

In addition, because we are now precisely accounting for stretch ACKs,
including delayed ACKs, we can now remove the delayed ACK tracking and
estimation code that tracked recent delayed ACK behavior in
ca->delayed_ack.

	Reported-by: Eyal Perry <eyalpe@mellanox.com>
	Signed-off-by: Neal Cardwell <ncardwell@google.com>
	Signed-off-by: Yuchung Cheng <ycheng@google.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9cd981dcf174d26805a032aefa791436da709bee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_cubic.c
diff --cc net/ipv4/tcp_cubic.c
index e784aa6cee64,ffc045da2fd5..000000000000
--- a/net/ipv4/tcp_cubic.c
+++ b/net/ipv4/tcp_cubic.c
@@@ -219,8 -217,8 +216,13 @@@ static inline void bictcp_update(struc
  	ca->last_time = tcp_time_stamp;
  
  	if (ca->epoch_start == 0) {
++<<<<<<< HEAD
 +		ca->epoch_start = tcp_time_stamp;	/* record the beginning of an epoch */
 +		ca->ack_cnt = 1;			/* start counting */
++=======
+ 		ca->epoch_start = tcp_time_stamp;	/* record beginning */
+ 		ca->ack_cnt = acked;			/* start counting */
++>>>>>>> 9cd981dcf174 (tcp: fix stretch ACK bugs in CUBIC)
  		ca->tcp_cwnd = cwnd;			/* syn with cubic */
  
  		if (ca->last_max_cwnd <= cwnd) {
@@@ -315,12 -313,12 +316,21 @@@ static void bictcp_cong_avoid(struct so
  	if (tp->snd_cwnd <= tp->snd_ssthresh) {
  		if (hystart && after(ack, ca->end_seq))
  			bictcp_hystart_reset(sk);
++<<<<<<< HEAD
 +		tcp_slow_start(tp);
 +	} else {
 +		bictcp_update(ca, tp->snd_cwnd);
 +		tcp_cong_avoid_ai(tp, ca->cnt);
 +	}
 +
++=======
+ 		acked = tcp_slow_start(tp, acked);
+ 		if (!acked)
+ 			return;
+ 	}
+ 	bictcp_update(ca, tp->snd_cwnd, acked);
+ 	tcp_cong_avoid_ai(tp, ca->cnt, acked);
++>>>>>>> 9cd981dcf174 (tcp: fix stretch ACK bugs in CUBIC)
  }
  
  static u32 bictcp_recalc_ssthresh(struct sock *sk)
* Unmerged path net/ipv4/tcp_cubic.c
