ALSA: line6: Make common PCM pointer callback

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] line6: Make common PCM pointer callback (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 92.86%
commit-author Takashi Iwai <tiwai@suse.de>
commit 2954f914f2816738b800be7909b771f30bf6a856
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2954f914.failed

Both playback and capture callbacks are identical, so let's merge
them.

	Tested-by: Chris Rorvick <chris@rorvick.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 2954f914f2816738b800be7909b771f30bf6a856)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/line6/capture.c
#	drivers/staging/line6/playback.c
#	sound/usb/line6/pcm.c
#	sound/usb/line6/pcm.h
diff --cc drivers/staging/line6/capture.c
index 7ed8560f3c0a,4183c5f5edc2..000000000000
--- a/drivers/staging/line6/capture.c
+++ b/drivers/staging/line6/capture.c
@@@ -294,88 -231,16 +294,91 @@@ static int snd_line6_capture_close(stru
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/staging/line6/capture.c
 +/* hw_params capture callback */
 +static int snd_line6_capture_hw_params(struct snd_pcm_substream *substream,
 +				       struct snd_pcm_hw_params *hw_params)
 +{
 +	int ret;
 +	struct snd_line6_pcm *line6pcm = snd_pcm_substream_chip(substream);
 +
 +	ret = line6_pcm_acquire(line6pcm, LINE6_BIT_PCM_ALSA_CAPTURE_BUFFER);
 +
 +	if (ret < 0)
 +		return ret;
 +
 +	ret = snd_pcm_lib_malloc_pages(substream,
 +				       params_buffer_bytes(hw_params));
 +	if (ret < 0) {
 +		line6_pcm_release(line6pcm, LINE6_BIT_PCM_ALSA_CAPTURE_BUFFER);
 +		return ret;
 +	}
 +
 +	line6pcm->period_in = params_period_bytes(hw_params);
 +	return 0;
 +}
 +
 +/* hw_free capture callback */
 +static int snd_line6_capture_hw_free(struct snd_pcm_substream *substream)
 +{
 +	struct snd_line6_pcm *line6pcm = snd_pcm_substream_chip(substream);
 +	line6_pcm_release(line6pcm, LINE6_BIT_PCM_ALSA_CAPTURE_BUFFER);
 +	return snd_pcm_lib_free_pages(substream);
 +}
 +
 +/* trigger callback */
 +int snd_line6_capture_trigger(struct snd_line6_pcm *line6pcm, int cmd)
 +{
 +	int err;
 +
 +	switch (cmd) {
 +	case SNDRV_PCM_TRIGGER_START:
 +	case SNDRV_PCM_TRIGGER_RESUME:
 +		err = line6_pcm_acquire(line6pcm,
 +					LINE6_BIT_PCM_ALSA_CAPTURE_STREAM);
 +
 +		if (err < 0)
 +			return err;
 +
 +		break;
 +
 +	case SNDRV_PCM_TRIGGER_STOP:
 +	case SNDRV_PCM_TRIGGER_SUSPEND:
 +		err = line6_pcm_release(line6pcm,
 +					LINE6_BIT_PCM_ALSA_CAPTURE_STREAM);
 +
 +		if (err < 0)
 +			return err;
 +
 +		break;
 +
 +	default:
 +		return -EINVAL;
 +	}
 +
 +	return 0;
 +}
 +
 +/* capture pointer callback */
 +static snd_pcm_uframes_t
 +snd_line6_capture_pointer(struct snd_pcm_substream *substream)
 +{
 +	struct snd_line6_pcm *line6pcm = snd_pcm_substream_chip(substream);
 +	return line6pcm->pos_in_done;
 +}
 +
++=======
++>>>>>>> 2954f914f281 (ALSA: line6: Make common PCM pointer callback):sound/usb/line6/capture.c
  /* capture operators */
  struct snd_pcm_ops snd_line6_capture_ops = {
  	.open = snd_line6_capture_open,
  	.close = snd_line6_capture_close,
  	.ioctl = snd_pcm_lib_ioctl,
 -	.hw_params = snd_line6_hw_params,
 -	.hw_free = snd_line6_hw_free,
 +	.hw_params = snd_line6_capture_hw_params,
 +	.hw_free = snd_line6_capture_hw_free,
  	.prepare = snd_line6_prepare,
  	.trigger = snd_line6_trigger,
- 	.pointer = snd_line6_capture_pointer,
+ 	.pointer = snd_line6_pointer,
  };
  
  int line6_create_audio_in_urbs(struct snd_line6_pcm *line6pcm)
diff --cc drivers/staging/line6/playback.c
index f97584b88a0d,1708c05f14db..000000000000
--- a/drivers/staging/line6/playback.c
+++ b/drivers/staging/line6/playback.c
@@@ -444,96 -380,16 +444,99 @@@ static int snd_line6_playback_close(str
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/staging/line6/playback.c
 +/* hw_params playback callback */
 +static int snd_line6_playback_hw_params(struct snd_pcm_substream *substream,
 +					struct snd_pcm_hw_params *hw_params)
 +{
 +	int ret;
 +	struct snd_line6_pcm *line6pcm = snd_pcm_substream_chip(substream);
 +
 +	ret = line6_pcm_acquire(line6pcm, LINE6_BIT_PCM_ALSA_PLAYBACK_BUFFER);
 +
 +	if (ret < 0)
 +		return ret;
 +
 +	ret = snd_pcm_lib_malloc_pages(substream,
 +				       params_buffer_bytes(hw_params));
 +	if (ret < 0) {
 +		line6_pcm_release(line6pcm, LINE6_BIT_PCM_ALSA_PLAYBACK_BUFFER);
 +		return ret;
 +	}
 +
 +	line6pcm->period_out = params_period_bytes(hw_params);
 +	return 0;
 +}
 +
 +/* hw_free playback callback */
 +static int snd_line6_playback_hw_free(struct snd_pcm_substream *substream)
 +{
 +	struct snd_line6_pcm *line6pcm = snd_pcm_substream_chip(substream);
 +	line6_pcm_release(line6pcm, LINE6_BIT_PCM_ALSA_PLAYBACK_BUFFER);
 +	return snd_pcm_lib_free_pages(substream);
 +}
 +
 +/* trigger playback callback */
 +int snd_line6_playback_trigger(struct snd_line6_pcm *line6pcm, int cmd)
 +{
 +	int err;
 +
 +	switch (cmd) {
 +	case SNDRV_PCM_TRIGGER_START:
 +	case SNDRV_PCM_TRIGGER_RESUME:
 +		err = line6_pcm_acquire(line6pcm,
 +					LINE6_BIT_PCM_ALSA_PLAYBACK_STREAM);
 +
 +		if (err < 0)
 +			return err;
 +
 +		break;
 +
 +	case SNDRV_PCM_TRIGGER_STOP:
 +	case SNDRV_PCM_TRIGGER_SUSPEND:
 +		err = line6_pcm_release(line6pcm,
 +					LINE6_BIT_PCM_ALSA_PLAYBACK_STREAM);
 +
 +		if (err < 0)
 +			return err;
 +
 +		break;
 +
 +	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
 +		set_bit(LINE6_INDEX_PAUSE_PLAYBACK, &line6pcm->flags);
 +		break;
 +
 +	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
 +		clear_bit(LINE6_INDEX_PAUSE_PLAYBACK, &line6pcm->flags);
 +		break;
 +
 +	default:
 +		return -EINVAL;
 +	}
 +
 +	return 0;
 +}
 +
 +/* playback pointer callback */
 +static snd_pcm_uframes_t
 +snd_line6_playback_pointer(struct snd_pcm_substream *substream)
 +{
 +	struct snd_line6_pcm *line6pcm = snd_pcm_substream_chip(substream);
 +	return line6pcm->pos_out_done;
 +}
 +
++=======
++>>>>>>> 2954f914f281 (ALSA: line6: Make common PCM pointer callback):sound/usb/line6/playback.c
  /* playback operators */
  struct snd_pcm_ops snd_line6_playback_ops = {
  	.open = snd_line6_playback_open,
  	.close = snd_line6_playback_close,
  	.ioctl = snd_pcm_lib_ioctl,
 -	.hw_params = snd_line6_hw_params,
 -	.hw_free = snd_line6_hw_free,
 +	.hw_params = snd_line6_playback_hw_params,
 +	.hw_free = snd_line6_playback_hw_free,
  	.prepare = snd_line6_prepare,
  	.trigger = snd_line6_trigger,
- 	.pointer = snd_line6_playback_pointer,
+ 	.pointer = snd_line6_pointer,
  };
  
  int line6_create_audio_out_urbs(struct snd_line6_pcm *line6pcm)
* Unmerged path sound/usb/line6/pcm.c
* Unmerged path sound/usb/line6/pcm.h
* Unmerged path drivers/staging/line6/capture.c
* Unmerged path drivers/staging/line6/playback.c
* Unmerged path sound/usb/line6/pcm.c
* Unmerged path sound/usb/line6/pcm.h
