timekeeping: Update timekeeper before updating vsyscall and pvclock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 9bf2419fa7bffa16ce58a4d5c20399eff8c970c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9bf2419f.failed

The update_walltime() code works on the shadow timekeeper to make the
seqcount protected region as short as possible. But that update to the
shadow timekeeper does not update all timekeeper fields because it's
sufficient to do that once before it becomes life. One of these fields
is tkr.base_mono. That stays stale in the shadow timekeeper unless an
operation happens which copies the real timekeeper to the shadow.

The update function is called after the update calls to vsyscall and
pvclock. While not correct, it did not cause any problems because none
of the invoked update functions used base_mono.

commit cbcf2dd3b3d4 (x86: kvm: Make kvm_get_time_and_clockread()
nanoseconds based) changed that in the kvm pvclock update function, so
the stale mono_base value got used and caused kvm-clock to malfunction.

Put the update where it belongs and fix the issue.

	Reported-by: Chris J Arges <chris.j.arges@canonical.com>
	Reported-by: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Gleb Natapov <gleb@kernel.org>
	Cc: John Stultz <john.stultz@linaro.org>
Link: http://lkml.kernel.org/r/alpine.DEB.2.10.1409050000570.3333@nanos
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 9bf2419fa7bffa16ce58a4d5c20399eff8c970c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/time/timekeeping.c
diff --cc kernel/time/timekeeping.c
index ee61723d1a46,ec1791fae965..000000000000
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@@ -254,11 -442,17 +254,17 @@@ static void timekeeping_update(struct t
  		tk->ntp_error = 0;
  		ntp_clear();
  	}
+ 
++<<<<<<< HEAD
++=======
+ 	tk_update_ktime_data(tk);
+ 
  	update_vsyscall(tk);
  	update_pvclock_gtod(tk, action & TK_CLOCK_WAS_SET);
  
++>>>>>>> 9bf2419fa7bf (timekeeping: Update timekeeper before updating vsyscall and pvclock)
  	if (action & TK_MIRROR)
 -		memcpy(&shadow_timekeeper, &tk_core.timekeeper,
 -		       sizeof(tk_core.timekeeper));
 -
 -	update_fast_timekeeper(tk);
 +		memcpy(&shadow_timekeeper, &timekeeper, sizeof(timekeeper));
  }
  
  /**
* Unmerged path kernel/time/timekeeping.c
