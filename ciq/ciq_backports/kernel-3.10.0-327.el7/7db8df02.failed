bonding: Inactive slaves should keep inactive flag's value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author zheng.li <zheng.x.li@oracle.com>
commit 7db8df02797e29cfa7d62a7e0b19f41e64b8433e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7db8df02.failed

bond_open is not setting the inactive flag correctly for some modes (alb and
tlb), resulting in error behavior if the bond has been administratively set
down and then back up. This effect should not occur when slaves are added while
the bond is up; it's something that only happens after a down/up bounce of the
bond.

For example, in bond tlb or alb mode, domu send some ARP request which go out
from dom0 bond's active slave, then the ARP broadcast request packets go back to
inactive slave from switch, because the inactive slave's inactive flag is zero,
kernel will receive the packets and pass them to bridge that cause dom0's bridge
map domu's MAC address to port of bond, bridge should map domu's MAC to port of
vif.

	Signed-off-by: Zheng Li <zheng.x.li@oracle.com>
	Signed-off-by: Jay Vosburgh <j.vosburgh@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7db8df02797e29cfa7d62a7e0b19f41e64b8433e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
diff --cc drivers/net/bonding/bond_main.c
index 6df1bb589f96,d9f85464b362..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -3346,14 -3074,16 +3346,19 @@@ static int bond_open(struct net_device 
  
  	/* reset slave->backup and slave->inactive */
  	read_lock(&bond->lock);
 -	if (bond_has_slaves(bond)) {
 +	if (bond->slave_cnt > 0) {
  		read_lock(&bond->curr_slave_lock);
++<<<<<<< HEAD
 +		bond_for_each_slave(bond, slave, i) {
 +			if ((bond->params.mode == BOND_MODE_ACTIVEBACKUP)
++=======
+ 		bond_for_each_slave(bond, slave, iter) {
+ 			if (USES_PRIMARY(bond->params.mode)
++>>>>>>> 7db8df02797e (bonding: Inactive slaves should keep inactive flag's value)
  				&& (slave != bond->curr_active_slave)) {
 -				bond_set_slave_inactive_flags(slave,
 -							      BOND_SLAVE_NOTIFY_NOW);
 +				bond_set_slave_inactive_flags(slave);
  			} else {
 -				bond_set_slave_active_flags(slave,
 -							    BOND_SLAVE_NOTIFY_NOW);
 +				bond_set_slave_active_flags(slave);
  			}
  		}
  		read_unlock(&bond->curr_slave_lock);
* Unmerged path drivers/net/bonding/bond_main.c
