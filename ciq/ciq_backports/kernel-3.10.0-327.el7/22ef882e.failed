x86/mm/numa: Fix kernel stack corruption in numa_init()->numa_clear_kernel_node_hotplug()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] mm: numa: Fix kernel stack corruption in numa_init()->numa_clear_kernel_node_hotplug() (Dave Young) [1188542]
Rebuild_FUZZ: 96.00%
commit-author Dave Young <dyoung@redhat.com>
commit 22ef882e6b5bd2bf668d10b1e2be3dc2fc365b99
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/22ef882e.failed

I got below kernel panic during kdump test on Thinkpad T420
laptop:

[    0.000000] No NUMA configuration found
[    0.000000] Faking a node at [mem 0x0000000000000000-0x0000000037ba4fff]
[    0.000000] Kernel panic - not syncing: stack-protector: Kernel stack is corrupted in: ffffffff81d21910
 ...
[    0.000000] Call Trace:
[    0.000000]  [<ffffffff817c2a26>] dump_stack+0x45/0x57
[    0.000000]  [<ffffffff817bc8d2>] panic+0xd0/0x204
[    0.000000]  [<ffffffff81d21910>] ? numa_clear_kernel_node_hotplug+0xe6/0xf2
[    0.000000]  [<ffffffff8107741b>] __stack_chk_fail+0x1b/0x20
[    0.000000]  [<ffffffff81d21910>] numa_clear_kernel_node_hotplug+0xe6/0xf2
[    0.000000]  [<ffffffff81d21e5d>] numa_init+0x1a5/0x520
[    0.000000]  [<ffffffff81d222b1>] x86_numa_init+0x19/0x3d
[    0.000000]  [<ffffffff81d22460>] initmem_init+0x9/0xb
[    0.000000]  [<ffffffff81d0d00c>] setup_arch+0x94f/0xc82
[    0.000000]  [<ffffffff81d05120>] ? early_idt_handlers+0x120/0x120
[    0.000000]  [<ffffffff817bd0bb>] ? printk+0x55/0x6b
[    0.000000]  [<ffffffff81d05120>] ? early_idt_handlers+0x120/0x120
[    0.000000]  [<ffffffff81d05d9b>] start_kernel+0xe8/0x4d6
[    0.000000]  [<ffffffff81d05120>] ? early_idt_handlers+0x120/0x120
[    0.000000]  [<ffffffff81d05120>] ? early_idt_handlers+0x120/0x120
[    0.000000]  [<ffffffff81d055ee>] x86_64_start_reservations+0x2a/0x2c
[    0.000000]  [<ffffffff81d05751>] x86_64_start_kernel+0x161/0x184
[    0.000000] ---[ end Kernel panic - not syncing: stack-protector: Kernel sta

This is caused by writing over the end of numa mask bitmap
in numa_clear_kernel_node().

numa_clear_kernel_node() tries to set the node id in a mask bitmap,
by iterating all reserved regions and assuming that every region
has a valid nid.

This assumption is not true because there's an exception for some
graphic memory quirks. See trim_snb_memory() in arch/x86/kernel/setup.c

It is easily to reproduce the bug in the kdump kernel because kdump
kernel use pre-reserved memory instead of the whole memory, but
kexec pass other reserved memory ranges to 2nd kernel as well.
like below in my test:

kdump kernel ram 0x2d000000 - 0x37bfffff
One of the reserved regions: 0x40000000 - 0x40100000 which
includes 0x40004000, a page excluded in trim_snb_memory(). For
this memblock reserved region the nid is not set, it is still
default value MAX_NUMNODES. later node_set will set bit
MAX_NUMNODES thus stack corruption happen.

This also happens when booting with mem= kernel commandline
during my test.

Fixing it by adding a check, do not call node_set in case nid is
MAX_NUMNODES.

	Signed-off-by: Dave Young <dyoung@redhat.com>
	Reviewed-by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: bhe@redhat.com
	Cc: qiuxishi@huawei.com
Link: http://lkml.kernel.org/r/20150407134132.GA23522@dhcp-16-198.nay.redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 22ef882e6b5bd2bf668d10b1e2be3dc2fc365b99)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/numa.c
diff --cc arch/x86/mm/numa.c
index 9e0f45ec0cf5,4053bb58bf92..000000000000
--- a/arch/x86/mm/numa.c
+++ b/arch/x86/mm/numa.c
@@@ -473,6 -463,49 +473,52 @@@ static bool __init numa_meminfo_cover_m
  	return true;
  }
  
++<<<<<<< HEAD
++=======
+ static void __init numa_clear_kernel_node_hotplug(void)
+ {
+ 	int i, nid;
+ 	nodemask_t numa_kernel_nodes = NODE_MASK_NONE;
+ 	unsigned long start, end;
+ 	struct memblock_region *r;
+ 
+ 	/*
+ 	 * At this time, all memory regions reserved by memblock are
+ 	 * used by the kernel. Set the nid in memblock.reserved will
+ 	 * mark out all the nodes the kernel resides in.
+ 	 */
+ 	for (i = 0; i < numa_meminfo.nr_blks; i++) {
+ 		struct numa_memblk *mb = &numa_meminfo.blk[i];
+ 
+ 		memblock_set_node(mb->start, mb->end - mb->start,
+ 				  &memblock.reserved, mb->nid);
+ 	}
+ 
+ 	/*
+ 	 * Mark all kernel nodes.
+ 	 *
+ 	 * When booting with mem=nn[kMG] or in a kdump kernel, numa_meminfo
+ 	 * may not include all the memblock.reserved memory ranges because
+ 	 * trim_snb_memory() reserves specific pages for Sandy Bridge graphics.
+ 	 */
+ 	for_each_memblock(reserved, r)
+ 		if (r->nid != MAX_NUMNODES)
+ 			node_set(r->nid, numa_kernel_nodes);
+ 
+ 	/* Clear MEMBLOCK_HOTPLUG flag for memory in kernel nodes. */
+ 	for (i = 0; i < numa_meminfo.nr_blks; i++) {
+ 		nid = numa_meminfo.blk[i].nid;
+ 		if (!node_isset(nid, numa_kernel_nodes))
+ 			continue;
+ 
+ 		start = numa_meminfo.blk[i].start;
+ 		end = numa_meminfo.blk[i].end;
+ 
+ 		memblock_clear_hotplug(start, end - start);
+ 	}
+ }
+ 
++>>>>>>> 22ef882e6b5b (x86/mm/numa: Fix kernel stack corruption in numa_init()->numa_clear_kernel_node_hotplug())
  static int __init numa_register_memblks(struct numa_meminfo *mi)
  {
  	unsigned long uninitialized_var(pfn_align);
* Unmerged path arch/x86/mm/numa.c
