net/mlx5_core: Get vendor-id using the query adapter command

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx5_core: Get vendor-id using the query adapter command (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 96.55%
commit-author Majd Dibbiny <majd@mellanox.com>
commit 211e6c80e5a68ef39a81484583e8efbf9774627d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/211e6c80.failed

Add two wrapper functions to the query adapter command:

1. mlx5_query_board_id -- replaces the old mlx5_cmd_query_adapter.

2. mlx5_core_query_vendor_id -- retrieves the vendor_id from the
   query_adapter command.

	Signed-off-by: Majd Dibbiny <majd@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 211e6c80e5a68ef39a81484583e8efbf9774627d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fw.c
#	drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fw.c
index ef9b7695decd,ba87442ef776..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fw.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fw.c
@@@ -63,51 -71,96 +71,76 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD
 +int mlx5_cmd_query_hca_cap(struct mlx5_core_dev *dev, struct mlx5_caps *caps)
++=======
+ int mlx5_core_query_vendor_id(struct mlx5_core_dev *mdev, u32 *vendor_id)
+ {
+ 	u32 *out;
+ 	int outlen = MLX5_ST_SZ_BYTES(query_adapter_out);
+ 	int err;
+ 
+ 	out = kzalloc(outlen, GFP_KERNEL);
+ 	if (!out)
+ 		return -ENOMEM;
+ 
+ 	err = mlx5_cmd_query_adapter(mdev, out, outlen);
+ 	if (err)
+ 		goto out;
+ 
+ 	*vendor_id = MLX5_GET(query_adapter_out, out,
+ 			      query_adapter_struct.ieee_vendor_id);
+ out:
+ 	kfree(out);
+ 	return err;
+ }
+ EXPORT_SYMBOL(mlx5_core_query_vendor_id);
+ 
+ int mlx5_query_hca_caps(struct mlx5_core_dev *dev)
++>>>>>>> 211e6c80e5a6 (net/mlx5_core: Get vendor-id using the query adapter command)
  {
 +	return mlx5_core_get_caps(dev, caps, HCA_CAP_OPMOD_GET_CUR);
 +}
 +
 +int mlx5_query_odp_caps(struct mlx5_core_dev *dev, struct mlx5_odp_caps *caps)
 +{
 +	u8 in[MLX5_ST_SZ_BYTES(query_hca_cap_in)];
 +	int out_sz = MLX5_ST_SZ_BYTES(query_hca_cap_out);
 +	void *out;
  	int err;
  
 -	err = mlx5_core_get_caps(dev, MLX5_CAP_GENERAL, HCA_CAP_OPMOD_GET_CUR);
 -	if (err)
 -		return err;
 +	if (!(dev->caps.gen.flags & MLX5_DEV_CAP_FLAG_ON_DMND_PG))
 +		return -ENOTSUPP;
  
 -	err = mlx5_core_get_caps(dev, MLX5_CAP_GENERAL, HCA_CAP_OPMOD_GET_MAX);
 +	memset(in, 0, sizeof(in));
 +	out = kzalloc(out_sz, GFP_KERNEL);
 +	if (!out)
 +		return -ENOMEM;
 +	MLX5_SET(query_hca_cap_in, in, opcode, MLX5_CMD_OP_QUERY_HCA_CAP);
 +	MLX5_SET(query_hca_cap_in, in, op_mod, HCA_CAP_OPMOD_GET_ODP_CUR);
 +	err = mlx5_cmd_exec(dev, in, sizeof(in), out, out_sz);
  	if (err)
 -		return err;
 -
 -	if (MLX5_CAP_GEN(dev, eth_net_offloads)) {
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ETHERNET_OFFLOADS,
 -					 HCA_CAP_OPMOD_GET_CUR);
 -		if (err)
 -			return err;
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ETHERNET_OFFLOADS,
 -					 HCA_CAP_OPMOD_GET_MAX);
 -		if (err)
 -			return err;
 -	}
 +		goto out;
  
 -	if (MLX5_CAP_GEN(dev, pg)) {
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ODP,
 -					 HCA_CAP_OPMOD_GET_CUR);
 -		if (err)
 -			return err;
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ODP,
 -					 HCA_CAP_OPMOD_GET_MAX);
 -		if (err)
 -			return err;
 +	err = mlx5_cmd_status_to_err_v2(out);
 +	if (err) {
 +		mlx5_core_warn(dev, "query cur hca ODP caps failed, %d\n", err);
 +		goto out;
  	}
  
 -	if (MLX5_CAP_GEN(dev, atomic)) {
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ATOMIC,
 -					 HCA_CAP_OPMOD_GET_CUR);
 -		if (err)
 -			return err;
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ATOMIC,
 -					 HCA_CAP_OPMOD_GET_MAX);
 -		if (err)
 -			return err;
 -	}
 +	memcpy(caps, MLX5_ADDR_OF(query_hca_cap_out, out, capability),
 +	       sizeof(*caps));
  
 -	if (MLX5_CAP_GEN(dev, roce)) {
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ROCE,
 -					 HCA_CAP_OPMOD_GET_CUR);
 -		if (err)
 -			return err;
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_ROCE,
 -					 HCA_CAP_OPMOD_GET_MAX);
 -		if (err)
 -			return err;
 -	}
 +	mlx5_core_dbg(dev, "on-demand paging capabilities:\nrc: %08x\nuc: %08x\nud: %08x\n",
 +		be32_to_cpu(caps->per_transport_caps.rc_odp_caps),
 +		be32_to_cpu(caps->per_transport_caps.uc_odp_caps),
 +		be32_to_cpu(caps->per_transport_caps.ud_odp_caps));
  
 -	if (MLX5_CAP_GEN(dev, nic_flow_table)) {
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_FLOW_TABLE,
 -					 HCA_CAP_OPMOD_GET_CUR);
 -		if (err)
 -			return err;
 -		err = mlx5_core_get_caps(dev, MLX5_CAP_FLOW_TABLE,
 -					 HCA_CAP_OPMOD_GET_MAX);
 -		if (err)
 -			return err;
 -	}
 -	return 0;
 +out:
 +	kfree(out);
 +	return err;
  }
 +EXPORT_SYMBOL(mlx5_query_odp_caps);
  
  int mlx5_cmd_init_hca(struct mlx5_core_dev *dev)
  {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
index a051b906afdf,fc88ecaecb4b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
@@@ -65,10 -69,16 +65,15 @@@ enum 
  	MLX5_CMD_TIME, /* print command execution time */
  };
  
 -static inline int mlx5_cmd_exec_check_status(struct mlx5_core_dev *dev, u32 *in,
 -					     int in_size, u32 *out,
 -					     int out_size)
 -{
 -	mlx5_cmd_exec(dev, in, in_size, out, out_size);
 -	return mlx5_cmd_status_to_err((struct mlx5_outbox_hdr *)out);
 -}
  
++<<<<<<< HEAD
 +int mlx5_cmd_query_hca_cap(struct mlx5_core_dev *dev,
 +			   struct mlx5_caps *caps);
 +int mlx5_cmd_query_adapter(struct mlx5_core_dev *dev);
++=======
+ int mlx5_query_hca_caps(struct mlx5_core_dev *dev);
+ int mlx5_query_board_id(struct mlx5_core_dev *dev);
++>>>>>>> 211e6c80e5a6 (net/mlx5_core: Get vendor-id using the query adapter command)
  int mlx5_cmd_init_hca(struct mlx5_core_dev *dev);
  int mlx5_cmd_teardown_hca(struct mlx5_core_dev *dev);
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fw.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/main.c b/drivers/net/ethernet/mellanox/mlx5/core/main.c
index a652cb93ceaa..245ef99dc68a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -774,9 +774,9 @@ static int mlx5_dev_init(struct mlx5_core_dev *dev, struct pci_dev *pdev)
 		goto err_stop_poll;
 	}
 
-	err = mlx5_cmd_query_adapter(dev);
+	err = mlx5_query_board_id(dev);
 	if (err) {
-		dev_err(&pdev->dev, "query adapter failed\n");
+		dev_err(&pdev->dev, "query board id failed\n");
 		goto err_stop_poll;
 	}
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/mlx5_core.h
diff --git a/include/linux/mlx5/driver.h b/include/linux/mlx5/driver.h
index ee45556daa8c..9772554d59dc 100644
--- a/include/linux/mlx5/driver.h
+++ b/include/linux/mlx5/driver.h
@@ -823,6 +823,7 @@ struct mlx5_interface {
 void *mlx5_get_protocol_dev(struct mlx5_core_dev *mdev, int protocol);
 int mlx5_register_interface(struct mlx5_interface *intf);
 void mlx5_unregister_interface(struct mlx5_interface *intf);
+int mlx5_core_query_vendor_id(struct mlx5_core_dev *mdev, u32 *vendor_id);
 
 struct mlx5_profile {
 	u64	mask;
diff --git a/include/linux/mlx5/mlx5_ifc.h b/include/linux/mlx5/mlx5_ifc.h
index b27e9f6e090a..0ef2b116f222 100644
--- a/include/linux/mlx5/mlx5_ifc.h
+++ b/include/linux/mlx5/mlx5_ifc.h
@@ -2470,9 +2470,12 @@ union mlx5_ifc_cong_control_roce_ecn_auto_bits {
 };
 
 struct mlx5_ifc_query_adapter_param_block_bits {
-	u8         reserved_0[0xe0];
+	u8         reserved_0[0xc0];
 
-	u8         reserved_1[0x10];
+	u8         reserved_1[0x8];
+	u8         ieee_vendor_id[0x18];
+
+	u8         reserved_2[0x10];
 	u8         vsd_vendor_id[0x10];
 
 	u8         vsd[208][0x8];
