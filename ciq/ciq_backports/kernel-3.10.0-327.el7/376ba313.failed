xfs: Add support for FALLOC_FL_ZERO_RANGE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Lukas Czerner <lczerner@redhat.com>
commit 376ba313147b4172f3e8cf620b9fb591f3e8cdfa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/376ba313.failed

Introduce new FALLOC_FL_ZERO_RANGE flag for fallocate. This has the same
functionality as xfs ioctl XFS_IOC_ZERO_RANGE.

We can also preallocate blocks past EOF in the same was as with
fallocate. Flag FALLOC_FL_KEEP_SIZE will cause the inode size to remain
the same even if we preallocate blocks past EOF.

It uses the same code to zero range as it is used by the
XFS_IOC_ZERO_RANGE ioctl.

	Signed-off-by: Lukas Czerner <lczerner@redhat.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 376ba313147b4172f3e8cf620b9fb591f3e8cdfa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_file.c
diff --cc fs/xfs/xfs_file.c
index ca62368780a0,8fb97a65286e..000000000000
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@@ -856,7 -823,8 +856,12 @@@ xfs_file_fallocate
  
  	if (!S_ISREG(inode->i_mode))
  		return -EINVAL;
++<<<<<<< HEAD
 +	if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE))
++=======
+ 	if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE |
+ 		     FALLOC_FL_COLLAPSE_RANGE | FALLOC_FL_ZERO_RANGE))
++>>>>>>> 376ba313147b (xfs: Add support for FALLOC_FL_ZERO_RANGE)
  		return -EOPNOTSUPP;
  
  	xfs_ilock(ip, XFS_IOLOCK_EXCL);
* Unmerged path fs/xfs/xfs_file.c
