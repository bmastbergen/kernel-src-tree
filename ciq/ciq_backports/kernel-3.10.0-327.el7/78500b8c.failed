net/mlx4_en: Add RX-ALL support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx4_en: Add RX-ALL support (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 93.10%
commit-author Muhammad Mahajna <muhammadm@mellanox.com>
commit 78500b8c03236a18d454c9cc8a24cccca506b200
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/78500b8c.failed

Enabled when the device supports KEEP FCS and IGNORE FCS.

When the flag is set, pass all received frames up the stack,
even ones with invalid FCS, controlled by ethtool.

	Signed-off-by: Muhammad Mahajna <muhammadm@mellanox.com>
	Signed-off-by: Ido Shamay <idos@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 78500b8c03236a18d454c9cc8a24cccca506b200)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/fw.c
#	drivers/net/ethernet/mellanox/mlx4/port.c
#	include/linux/mlx4/device.h
diff --cc drivers/net/ethernet/mellanox/mlx4/fw.c
index 8976ba4929d3,b9881fc1252f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/fw.c
+++ b/drivers/net/ethernet/mellanox/mlx4/fw.c
@@@ -139,7 -139,19 +139,23 @@@ static void dump_dev_cap_flags2(struct 
  		[13] = "Large cache line (>64B) EQE stride support",
  		[14] = "Ethernet protocol control support",
  		[15] = "Ethernet Backplane autoneg support",
++<<<<<<< HEAD
 +		[16] = "CONFIG DEV support"
++=======
+ 		[16] = "CONFIG DEV support",
+ 		[17] = "Asymmetric EQs support",
+ 		[18] = "More than 80 VFs support",
+ 		[19] = "Performance optimized for limited rule configuration flow steering support",
+ 		[20] = "Recoverable error events support",
+ 		[21] = "Port Remap support",
+ 		[22] = "QCN support",
+ 		[23] = "QP rate limiting support",
+ 		[24] = "Ethernet Flow control statistics support",
+ 		[25] = "Granular QoS per VF support",
+ 		[26] = "Port ETS Scheduler support",
+ 		[27] = "Port beacon support",
+ 		[28] = "RX-ALL support",
++>>>>>>> 78500b8c0323 (net/mlx4_en: Add RX-ALL support)
  	};
  	int i;
  
@@@ -1096,9 -1206,28 +1114,31 @@@ int mlx4_QUERY_DEV_CAP_wrapper(struct m
  	/* turn off host side virt features (VST, FSM, etc) for guests */
  	MLX4_GET(field32, outbox->buf, QUERY_DEV_CAP_EXT_2_FLAGS_OFFSET);
  	field32 &= ~(DEV_CAP_EXT_2_FLAG_VLAN_CONTROL | DEV_CAP_EXT_2_FLAG_80_VFS |
 -		     DEV_CAP_EXT_2_FLAG_FSM | DEV_CAP_EXT_2_FLAG_PFC_COUNTERS);
 +		     DEV_CAP_EXT_2_FLAG_FSM);
  	MLX4_PUT(outbox->buf, field32, QUERY_DEV_CAP_EXT_2_FLAGS_OFFSET);
  
++<<<<<<< HEAD
++=======
+ 	/* turn off QCN for guests */
+ 	MLX4_GET(field, outbox->buf, QUERY_DEV_CAP_ECN_QCN_VER_OFFSET);
+ 	field &= 0xfe;
+ 	MLX4_PUT(outbox->buf, field, QUERY_DEV_CAP_ECN_QCN_VER_OFFSET);
+ 
+ 	/* turn off QP max-rate limiting for guests */
+ 	field16 = 0;
+ 	MLX4_PUT(outbox->buf, field16, QUERY_DEV_CAP_QP_RATE_LIMIT_NUM_OFFSET);
+ 
+ 	/* turn off QoS per VF support for guests */
+ 	MLX4_GET(field, outbox->buf, QUERY_DEV_CAP_CQ_EQ_CACHE_LINE_STRIDE);
+ 	field &= 0xef;
+ 	MLX4_PUT(outbox->buf, field, QUERY_DEV_CAP_CQ_EQ_CACHE_LINE_STRIDE);
+ 
+ 	/* turn off ignore FCS feature for guests */
+ 	MLX4_GET(field, outbox->buf, QUERY_DEV_CAP_CONFIG_DEV_OFFSET);
+ 	field &= 0xfb;
+ 	MLX4_PUT(outbox->buf, field, QUERY_DEV_CAP_CONFIG_DEV_OFFSET);
+ 
++>>>>>>> 78500b8c0323 (net/mlx4_en: Add RX-ALL support)
  	return 0;
  }
  
diff --cc drivers/net/ethernet/mellanox/mlx4/port.c
index feb223aa98f5,c2b21313dba7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/port.c
+++ b/drivers/net/ethernet/mellanox/mlx4/port.c
@@@ -48,7 -48,10 +48,14 @@@
  #define MLX4_STATS_TRAFFIC_COUNTERS_MASK	0xfULL
  #define MLX4_STATS_TRAFFIC_DROPS_MASK		0xc0ULL
  #define MLX4_STATS_ERROR_COUNTERS_MASK		0x1ffc30ULL
++<<<<<<< HEAD
 +#define MLX4_STATS_PORT_COUNTERS_MASK		0x7fe00000ULL
++=======
+ #define MLX4_STATS_PORT_COUNTERS_MASK		0x1fe00000ULL
+ 
+ #define MLX4_FLAG_V_IGNORE_FCS_MASK		0x2
+ #define MLX4_IGNORE_FCS_MASK			0x1
++>>>>>>> 78500b8c0323 (net/mlx4_en: Add RX-ALL support)
  
  void mlx4_init_mac_table(struct mlx4_dev *dev, struct mlx4_mac_table *table)
  {
diff --cc include/linux/mlx4/device.h
index 7c7eeeb434eb,f9ce34bec45b..000000000000
--- a/include/linux/mlx4/device.h
+++ b/include/linux/mlx4/device.h
@@@ -189,7 -197,19 +189,23 @@@ enum 
  	MLX4_DEV_CAP_FLAG2_EQE_STRIDE		= 1LL <<  13,
  	MLX4_DEV_CAP_FLAG2_ETH_PROT_CTRL        = 1LL <<  14,
  	MLX4_DEV_CAP_FLAG2_ETH_BACKPL_AN_REP	= 1LL <<  15,
++<<<<<<< HEAD
 +	MLX4_DEV_CAP_FLAG2_CONFIG_DEV		= 1LL <<  16
++=======
+ 	MLX4_DEV_CAP_FLAG2_CONFIG_DEV		= 1LL <<  16,
+ 	MLX4_DEV_CAP_FLAG2_SYS_EQS		= 1LL <<  17,
+ 	MLX4_DEV_CAP_FLAG2_80_VFS		= 1LL <<  18,
+ 	MLX4_DEV_CAP_FLAG2_FS_A0		= 1LL <<  19,
+ 	MLX4_DEV_CAP_FLAG2_RECOVERABLE_ERROR_EVENT = 1LL << 20,
+ 	MLX4_DEV_CAP_FLAG2_PORT_REMAP		= 1LL <<  21,
+ 	MLX4_DEV_CAP_FLAG2_QCN			= 1LL <<  22,
+ 	MLX4_DEV_CAP_FLAG2_QP_RATE_LIMIT	= 1LL <<  23,
+ 	MLX4_DEV_CAP_FLAG2_FLOWSTATS_EN         = 1LL <<  24,
+ 	MLX4_DEV_CAP_FLAG2_QOS_VPP		= 1LL <<  25,
+ 	MLX4_DEV_CAP_FLAG2_ETS_CFG		= 1LL <<  26,
+ 	MLX4_DEV_CAP_FLAG2_PORT_BEACON		= 1LL <<  27,
+ 	MLX4_DEV_CAP_FLAG2_IGNORE_FCS		= 1LL <<  28,
++>>>>>>> 78500b8c0323 (net/mlx4_en: Add RX-ALL support)
  };
  
  enum {
@@@ -1229,6 -1313,9 +1245,12 @@@ int mlx4_SET_PORT_general(struct mlx4_d
  			  u8 pptx, u8 pfctx, u8 pprx, u8 pfcrx);
  int mlx4_SET_PORT_qpn_calc(struct mlx4_dev *dev, u8 port, u32 base_qpn,
  			   u8 promisc);
++<<<<<<< HEAD
++=======
+ int mlx4_SET_PORT_BEACON(struct mlx4_dev *dev, u8 port, u16 time);
+ int mlx4_SET_PORT_fcs_check(struct mlx4_dev *dev, u8 port,
+ 			    u8 ignore_fcs_value);
++>>>>>>> 78500b8c0323 (net/mlx4_en: Add RX-ALL support)
  int mlx4_SET_PORT_VXLAN(struct mlx4_dev *dev, u8 port, u8 steering, int enable);
  int mlx4_find_cached_mac(struct mlx4_dev *dev, u8 port, u64 mac, int *idx);
  int mlx4_find_cached_vlan(struct mlx4_dev *dev, u8 port, u16 vid, int *idx);
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 8286830eb509..ee2e2347158c 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -2193,6 +2193,17 @@ static int mlx4_en_set_features(struct net_device *netdev,
 		reset = true;
 	}
 
+	if (DEV_FEATURE_CHANGED(netdev, features, NETIF_F_RXALL)) {
+		u8 ignore_fcs_value = (features & NETIF_F_RXALL) ? 1 : 0;
+
+		en_info(priv, "Turn %s RX-ALL\n",
+			ignore_fcs_value ? "ON" : "OFF");
+		ret = mlx4_SET_PORT_fcs_check(priv->mdev->dev,
+					      priv->port, ignore_fcs_value);
+		if (ret)
+			return ret;
+	}
+
 	if (DEV_FEATURE_CHANGED(netdev, features, NETIF_F_HW_VLAN_CTAG_RX)) {
 		en_info(priv, "Turn %s RX vlan strip offload\n",
 			(features & NETIF_F_HW_VLAN_CTAG_RX) ? "ON" : "OFF");
@@ -2608,6 +2619,9 @@ int mlx4_en_init_netdev(struct mlx4_en_dev *mdev, int port,
 	if (mdev->dev->caps.flags & MLX4_DEV_CAP_FLAG_FCS_KEEP)
 		dev->hw_features |= NETIF_F_RXFCS;
 
+	if (mdev->dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_IGNORE_FCS)
+		dev->hw_features |= NETIF_F_RXALL;
+
 	if (mdev->dev->caps.steering_mode ==
 	    MLX4_STEERING_MODE_DEVICE_MANAGED)
 		dev->hw_features |= NETIF_F_NTUPLE;
* Unmerged path drivers/net/ethernet/mellanox/mlx4/fw.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/main.c b/drivers/net/ethernet/mellanox/mlx4/main.c
index 7e092d9c247b..971ad936c6c4 100644
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@ -271,6 +271,25 @@ static int mlx4_dev_port(struct mlx4_dev *dev, int port,
 	return err;
 }
 
+static inline void mlx4_enable_ignore_fcs(struct mlx4_dev *dev)
+{
+	if (!(dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_IGNORE_FCS))
+		return;
+
+	if (mlx4_is_mfunc(dev)) {
+		mlx4_dbg(dev, "SRIOV mode - Disabling Ignore FCS");
+		dev->caps.flags2 &= ~MLX4_DEV_CAP_FLAG2_IGNORE_FCS;
+		return;
+	}
+
+	if (!(dev->caps.flags & MLX4_DEV_CAP_FLAG_FCS_KEEP)) {
+		mlx4_dbg(dev,
+			 "Keep FCS is not supported - Disabling Ignore FCS");
+		dev->caps.flags2 &= ~MLX4_DEV_CAP_FLAG2_IGNORE_FCS;
+		return;
+	}
+}
+
 #define MLX4_A0_STEERING_TABLE_SIZE	256
 static int mlx4_dev_cap(struct mlx4_dev *dev, struct mlx4_dev_cap *dev_cap)
 {
@@ -479,6 +498,8 @@ static int mlx4_dev_cap(struct mlx4_dev *dev, struct mlx4_dev_cap *dev_cap)
 		dev->caps.alloc_res_qp_mask = 0;
 	}
 
+	mlx4_enable_ignore_fcs(dev);
+
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4.h b/drivers/net/ethernet/mellanox/mlx4/mlx4.h
index 693d8152c03b..97c152e1cad5 100644
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4.h
@@ -756,9 +756,11 @@ enum {
 
 
 struct mlx4_set_port_general_context {
-	u8 reserved[3];
+	u16 reserved1;
+	u8 v_ignore_fcs;
 	u8 flags;
-	u16 reserved2;
+	u8 ignore_fcs;
+	u8 reserved2;
 	__be16 mtu;
 	u8 pptx;
 	u8 pfctx;
* Unmerged path drivers/net/ethernet/mellanox/mlx4/port.c
* Unmerged path include/linux/mlx4/device.h
