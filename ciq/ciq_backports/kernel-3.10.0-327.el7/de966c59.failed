net/mlx4_core: Support more than 64 VFs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx4_core: Support more than 64 VFs (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 94.59%
commit-author Matan Barak <matanb@mellanox.com>
commit de966c5928026b100a989c8cef761d306310a184
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/de966c59.failed

We now allow up to 126 VFs. Note though that certain firmware
versions only allow up to 80 VFs. Moreover, old HCAs only support 64 VFs.
In these cases, we limit the maximum number of VFs to 64.

	Signed-off-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit de966c5928026b100a989c8cef761d306310a184)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/fw.c
#	drivers/net/ethernet/mellanox/mlx4/main.c
#	include/linux/mlx4/device.h
diff --cc drivers/net/ethernet/mellanox/mlx4/fw.c
index f6582e8e2ab0,4251f81a0275..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/fw.c
+++ b/drivers/net/ethernet/mellanox/mlx4/fw.c
@@@ -142,7 -142,9 +142,13 @@@ static void dump_dev_cap_flags2(struct 
  		[13] = "Large cache line (>64B) EQE stride support",
  		[14] = "Ethernet protocol control support",
  		[15] = "Ethernet Backplane autoneg support",
++<<<<<<< HEAD
 +		[16] = "CONFIG DEV support"
++=======
+ 		[16] = "CONFIG DEV support",
+ 		[17] = "Asymmetric EQs support",
+ 		[18] = "More than 80 VFs support"
++>>>>>>> de966c592802 (net/mlx4_core: Support more than 64 VFs)
  	};
  	int i;
  
diff --cc drivers/net/ethernet/mellanox/mlx4/main.c
index 7cc4575ed985,3044f9e623cb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@@ -2434,6 -2487,58 +2452,61 @@@ slave_start
  		goto err_mfunc;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (mlx4_is_master(dev)) {
+ 		if (!dev_cap) {
+ 			dev_cap = kzalloc(sizeof(*dev_cap), GFP_KERNEL);
+ 
+ 			if (!dev_cap) {
+ 				err = -ENOMEM;
+ 				goto err_fw;
+ 			}
+ 
+ 			err = mlx4_QUERY_DEV_CAP(dev, dev_cap);
+ 			if (err) {
+ 				mlx4_err(dev, "QUERY_DEV_CAP command failed, aborting.\n");
+ 				goto err_fw;
+ 			}
+ 
+ 			if (mlx4_check_dev_cap(dev, dev_cap, nvfs))
+ 				goto err_fw;
+ 
+ 			if (!(dev_cap->flags2 & MLX4_DEV_CAP_FLAG2_SYS_EQS)) {
+ 				u64 dev_flags = mlx4_enable_sriov(dev, pdev, total_vfs,
+ 								  existing_vfs);
+ 
+ 				mlx4_cmd_cleanup(dev, MLX4_CMD_CLEANUP_ALL);
+ 				dev->flags = dev_flags;
+ 				if (!SRIOV_VALID_STATE(dev->flags)) {
+ 					mlx4_err(dev, "Invalid SRIOV state\n");
+ 					goto err_sriov;
+ 				}
+ 				err = mlx4_reset(dev);
+ 				if (err) {
+ 					mlx4_err(dev, "Failed to reset HCA, aborting.\n");
+ 					goto err_sriov;
+ 				}
+ 				goto slave_start;
+ 			}
+ 		} else {
+ 			/* Legacy mode FW requires SRIOV to be enabled before
+ 			 * doing QUERY_DEV_CAP, since max_eq's value is different if
+ 			 * SRIOV is enabled.
+ 			 */
+ 			memset(dev_cap, 0, sizeof(*dev_cap));
+ 			err = mlx4_QUERY_DEV_CAP(dev, dev_cap);
+ 			if (err) {
+ 				mlx4_err(dev, "QUERY_DEV_CAP command failed, aborting.\n");
+ 				goto err_fw;
+ 			}
+ 
+ 			if (mlx4_check_dev_cap(dev, dev_cap, nvfs))
+ 				goto err_fw;
+ 		}
+ 	}
+ 
++>>>>>>> de966c592802 (net/mlx4_core: Support more than 64 VFs)
  	err = mlx4_init_hca(dev);
  	if (err) {
  		if (err == -EACCES) {
diff --cc include/linux/mlx4/device.h
index f9f97bb513db,cf09e65c2901..000000000000
--- a/include/linux/mlx4/device.h
+++ b/include/linux/mlx4/device.h
@@@ -189,7 -189,9 +189,13 @@@ enum 
  	MLX4_DEV_CAP_FLAG2_EQE_STRIDE		= 1LL <<  13,
  	MLX4_DEV_CAP_FLAG2_ETH_PROT_CTRL        = 1LL <<  14,
  	MLX4_DEV_CAP_FLAG2_ETH_BACKPL_AN_REP	= 1LL <<  15,
++<<<<<<< HEAD
 +	MLX4_DEV_CAP_FLAG2_CONFIG_DEV		= 1LL <<  16
++=======
+ 	MLX4_DEV_CAP_FLAG2_CONFIG_DEV		= 1LL <<  16,
+ 	MLX4_DEV_CAP_FLAG2_SYS_EQS		= 1LL <<  17,
+ 	MLX4_DEV_CAP_FLAG2_80_VFS		= 1LL <<  18
++>>>>>>> de966c592802 (net/mlx4_core: Support more than 64 VFs)
  };
  
  enum {
* Unmerged path drivers/net/ethernet/mellanox/mlx4/fw.c
* Unmerged path drivers/net/ethernet/mellanox/mlx4/main.c
* Unmerged path include/linux/mlx4/device.h
