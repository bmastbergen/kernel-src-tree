NVMe: increase depth of admin queue

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jens Axboe <axboe@fb.com>
commit d31af0a325ca4ff8e57b8616ab2228913df369ad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d31af0a3.failed

Usually the admin queue depth of 64 is plenty, but for some use cases we
really need it larger. Examples are use cases like MAT, where you have
to touch all of NAND for init/format like purposes. In those cases, we
see a good 2x increase with an increased queue depth.

	Signed-off-by: Jens Axboe <axboe@fb.com>
	Acked-by: Keith Busch <keith.busch@intel.com>
(cherry picked from commit d31af0a325ca4ff8e57b8616ab2228913df369ad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index 29d2b5fb1975,ef432786213b..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -42,9 -42,9 +42,13 @@@
  #include <scsi/sg.h>
  #include <asm-generic/io-64-nonatomic-lo-hi.h>
  
 -#define NVME_MINORS		(1U << MINORBITS)
 +#include <trace/events/block.h>
 +
  #define NVME_Q_DEPTH		1024
++<<<<<<< HEAD
++=======
+ #define NVME_AQ_DEPTH		256
++>>>>>>> d31af0a325ca (NVMe: increase depth of admin queue)
  #define SQ_SIZE(depth)		(depth * sizeof(struct nvme_command))
  #define CQ_SIZE(depth)		(depth * sizeof(struct nvme_completion))
  #define ADMIN_TIMEOUT		(admin_timeout * HZ)
* Unmerged path drivers/block/nvme-core.c
