bonding: Convert pr_warning to pr_warn, neatening

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Joe Perches <joe@perches.com>
commit 91565ebbcc5aea69d4d6cb3832f52da03dbd44b6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/91565ebb.failed

Use more current logging style.

Coalesce formats, realign arguments, drop unnecessary periods.

	Signed-off-by: Joe Perches <joe@perches.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 91565ebbcc5aea69d4d6cb3832f52da03dbd44b6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
diff --cc drivers/net/bonding/bond_main.c
index 4c3b4d213395,1d4dfc9f649a..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -2022,19 -1718,24 +2022,29 @@@ static int __bond_release_one(struct ne
  		bond_select_active_slave(bond);
  
  		write_unlock_bh(&bond->curr_slave_lock);
 +		read_unlock(&bond->lock);
 +		write_lock_bh(&bond->lock);
  	}
  
 -	if (!bond_has_slaves(bond)) {
 +	if (bond->slave_cnt == 0) {
  		bond_set_carrier(bond);
  		eth_hw_addr_random(bond_dev);
++<<<<<<< HEAD
++=======
+ 
+ 		if (vlan_uses_dev(bond_dev)) {
+ 			pr_warn("%s: Warning: clearing HW address of %s while it still has VLANs\n",
+ 				bond_dev->name, bond_dev->name);
+ 			pr_warn("%s: When re-adding slaves, make sure the bond's HW address matches its VLANs\n",
+ 				bond_dev->name);
+ 		}
++>>>>>>> 91565ebbcc5a (bonding: Convert pr_warning to pr_warn, neatening)
  	}
  
 +	write_unlock_bh(&bond->lock);
  	unblock_netpoll_tx();
 -	synchronize_rcu();
  
 -	if (!bond_has_slaves(bond)) {
 +	if (bond->slave_cnt == 0) {
  		call_netdevice_notifiers(NETDEV_CHANGEADDR, bond->dev);
  		call_netdevice_notifiers(NETDEV_RELEASE, bond->dev);
  	}
@@@ -4395,16 -4037,16 +4405,22 @@@ static int bond_check_params(struct bon
  	}
  
  	if (ad_select) {
 -		bond_opt_initstr(&newval, lacp_rate);
 -		valptr = bond_opt_parse(bond_opt_get(BOND_OPT_AD_SELECT),
 -					&newval);
 -		if (!valptr) {
 -			pr_err("Error: Invalid ad_select \"%s\"\n", ad_select);
 +		params->ad_select = bond_parse_parm(ad_select, ad_select_tbl);
 +		if (params->ad_select == -1) {
 +			pr_err("Error: Invalid ad_select \"%s\"\n",
 +			       ad_select == NULL ? "NULL" : ad_select);
  			return -EINVAL;
  		}
++<<<<<<< HEAD
 +
 +		if (bond_mode != BOND_MODE_8023AD) {
 +			pr_warning("ad_select param only affects 802.3ad mode\n");
 +		}
++=======
+ 		params->ad_select = valptr->value;
+ 		if (bond_mode != BOND_MODE_8023AD)
+ 			pr_warn("ad_select param only affects 802.3ad mode\n");
++>>>>>>> 91565ebbcc5a (bonding: Convert pr_warning to pr_warn, neatening)
  	} else {
  		params->ad_select = BOND_AD_STABLE;
  	}
@@@ -4416,9 -4058,9 +4432,15 @@@
  	}
  
  	if (miimon < 0) {
++<<<<<<< HEAD
 +		pr_warning("Warning: miimon module parameter (%d), not in range 0-%d, so it was reset to %d\n",
 +			   miimon, INT_MAX, BOND_LINK_MON_INTERV);
 +		miimon = BOND_LINK_MON_INTERV;
++=======
+ 		pr_warn("Warning: miimon module parameter (%d), not in range 0-%d, so it was reset to 0\n",
+ 			miimon, INT_MAX);
+ 		miimon = 0;
++>>>>>>> 91565ebbcc5a (bonding: Convert pr_warning to pr_warn, neatening)
  	}
  
  	if (updelay < 0) {
@@@ -4445,12 -4087,12 +4467,18 @@@
  		num_peer_notif = 1;
  	}
  
 -	/* reset values for 802.3ad/TLB/ALB */
 -	if (BOND_NO_USES_ARP(bond_mode)) {
 +	/* reset values for 802.3ad */
 +	if (bond_mode == BOND_MODE_8023AD) {
  		if (!miimon) {
++<<<<<<< HEAD
 +			pr_warning("Warning: miimon must be specified, otherwise bonding will not detect link failure, speed and duplex which are essential for 802.3ad operation\n");
 +			pr_warning("Forcing miimon to 100msec\n");
 +			miimon = 100;
++=======
+ 			pr_warn("Warning: miimon must be specified, otherwise bonding will not detect link failure, speed and duplex which are essential for 802.3ad operation\n");
+ 			pr_warn("Forcing miimon to 100msec\n");
+ 			miimon = BOND_DEFAULT_MIIMON;
++>>>>>>> 91565ebbcc5a (bonding: Convert pr_warning to pr_warn, neatening)
  		}
  	}
  
@@@ -4524,9 -4159,9 +4548,15 @@@
  	}
  
  	if (arp_interval < 0) {
++<<<<<<< HEAD
 +		pr_warning("Warning: arp_interval module parameter (%d) , not in range 0-%d, so it was reset to %d\n",
 +			   arp_interval, INT_MAX, BOND_LINK_ARP_INTERV);
 +		arp_interval = BOND_LINK_ARP_INTERV;
++=======
+ 		pr_warn("Warning: arp_interval module parameter (%d), not in range 0-%d, so it was reset to 0\n",
+ 			arp_interval, INT_MAX);
+ 		arp_interval = 0;
++>>>>>>> 91565ebbcc5a (bonding: Convert pr_warning to pr_warn, neatening)
  	}
  
  	for (arp_ip_count = 0, i = 0;
@@@ -4630,20 -4271,27 +4660,29 @@@
  	}
  
  	if (fail_over_mac) {
 -		bond_opt_initstr(&newval, fail_over_mac);
 -		valptr = bond_opt_parse(bond_opt_get(BOND_OPT_FAIL_OVER_MAC),
 -					&newval);
 -		if (!valptr) {
 +		fail_over_mac_value = bond_parse_parm(fail_over_mac,
 +						      fail_over_mac_tbl);
 +		if (fail_over_mac_value == -1) {
  			pr_err("Error: invalid fail_over_mac \"%s\"\n",
 -			       fail_over_mac);
 +			       arp_validate == NULL ? "NULL" : arp_validate);
  			return -EINVAL;
  		}
 -		fail_over_mac_value = valptr->value;
 +
  		if (bond_mode != BOND_MODE_ACTIVEBACKUP)
- 			pr_warning("Warning: fail_over_mac only affects active-backup mode.\n");
+ 			pr_warn("Warning: fail_over_mac only affects active-backup mode\n");
  	} else {
  		fail_over_mac_value = BOND_FOM_NONE;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (lp_interval == 0) {
+ 		pr_warn("Warning: ip_interval must be between 1 and %d, so it was reset to %d\n",
+ 			INT_MAX, BOND_ALB_DEFAULT_LP_INTERVAL);
+ 		lp_interval = BOND_ALB_DEFAULT_LP_INTERVAL;
+ 	}
+ 
++>>>>>>> 91565ebbcc5a (bonding: Convert pr_warning to pr_warn, neatening)
  	/* fill params struct with the proper values */
  	params->mode = bond_mode;
  	params->xmit_policy = xmit_hashtype;
diff --git a/drivers/net/bonding/bond_alb.c b/drivers/net/bonding/bond_alb.c
index c0b6155b648d..9b276e4b9c96 100644
--- a/drivers/net/bonding/bond_alb.c
+++ b/drivers/net/bonding/bond_alb.c
@@ -1213,9 +1213,9 @@ static int alb_handle_addr_collision_on_attach(struct bonding *bond, struct slav
 	if (free_mac_slave) {
 		alb_set_slave_mac_addr(slave, free_mac_slave->perm_hwaddr);
 
-		pr_warning("%s: Warning: the hw address of slave %s is in use by the bond; giving it the hw address of %s\n",
-			   bond->dev->name, slave->dev->name,
-			   free_mac_slave->dev->name);
+		pr_warn("%s: Warning: the hw address of slave %s is in use by the bond; giving it the hw address of %s\n",
+			bond->dev->name, slave->dev->name,
+			free_mac_slave->dev->name);
 
 	} else if (has_bond_addr) {
 		pr_err("%s: Error: the hw address of slave %s is in use by the bond; couldn't find a slave with a free hw address to give it (this should not have happened)\n",
diff --git a/drivers/net/bonding/bond_debugfs.c b/drivers/net/bonding/bond_debugfs.c
index 5fc4c2351478..2d3f7fa541ff 100644
--- a/drivers/net/bonding/bond_debugfs.c
+++ b/drivers/net/bonding/bond_debugfs.c
@@ -69,7 +69,7 @@ void bond_debug_register(struct bonding *bond)
 		debugfs_create_dir(bond->dev->name, bonding_debug_root);
 
 	if (!bond->debug_dir) {
-		pr_warning("%s: Warning: failed to register to debugfs\n",
+		pr_warn("%s: Warning: failed to register to debugfs\n",
 			bond->dev->name);
 		return;
 	}
@@ -98,9 +98,8 @@ void bond_debug_reregister(struct bonding *bond)
 	if (d) {
 		bond->debug_dir = d;
 	} else {
-		pr_warning("%s: Warning: failed to reregister, "
-				"so just unregister old one\n",
-				bond->dev->name);
+		pr_warn("%s: Warning: failed to reregister, so just unregister old one\n",
+			bond->dev->name);
 		bond_debug_unregister(bond);
 	}
 }
@@ -110,8 +109,7 @@ void bond_create_debugfs(void)
 	bonding_debug_root = debugfs_create_dir("bonding", NULL);
 
 	if (!bonding_debug_root) {
-		pr_warning("Warning: Cannot create bonding directory"
-				" in debugfs\n");
+		pr_warn("Warning: Cannot create bonding directory in debugfs\n");
 	}
 }
 
* Unmerged path drivers/net/bonding/bond_main.c
diff --git a/drivers/net/bonding/bond_procfs.c b/drivers/net/bonding/bond_procfs.c
index 4060d41f0ee7..6faadddfb69f 100644
--- a/drivers/net/bonding/bond_procfs.c
+++ b/drivers/net/bonding/bond_procfs.c
@@ -248,8 +248,8 @@ void bond_create_proc_entry(struct bonding *bond)
 						    S_IRUGO, bn->proc_dir,
 						    &bond_info_fops, bond);
 		if (bond->proc_entry == NULL)
-			pr_warning("Warning: Cannot create /proc/net/%s/%s\n",
-				   DRV_NAME, bond_dev->name);
+			pr_warn("Warning: Cannot create /proc/net/%s/%s\n",
+				DRV_NAME, bond_dev->name);
 		else
 			memcpy(bond->proc_file_name, bond_dev->name, IFNAMSIZ);
 	}
@@ -275,8 +275,8 @@ void __net_init bond_create_proc_dir(struct bond_net *bn)
 	if (!bn->proc_dir) {
 		bn->proc_dir = proc_mkdir(DRV_NAME, bn->net->proc_net);
 		if (!bn->proc_dir)
-			pr_warning("Warning: cannot create /proc/net/%s\n",
-				   DRV_NAME);
+			pr_warn("Warning: cannot create /proc/net/%s\n",
+				DRV_NAME);
 	}
 }
 
