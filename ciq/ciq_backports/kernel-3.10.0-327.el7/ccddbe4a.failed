ALSA: line6: Split to each driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] line6: Split to each driver (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 90.00%
commit-author Takashi Iwai <tiwai@suse.de>
commit ccddbe4a99536154e61d16c0f1c2df8a6d63f52a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ccddbe4a.failed

Split to each individual driver for POD, PODHD, TonePort and Variax
with a core LINE6 helper module.  The new modules follow the standard
ALSA naming rule with snd prefix: snd-usb-pod, snd-usb-podhd,
snd-usb-toneport and snd-usb-variax, together with the corresponding
CONFIG_SND_USB_* Kconfig items.

	Tested-by: Chris Rorvick <chris@rorvick.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit ccddbe4a99536154e61d16c0f1c2df8a6d63f52a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/line6/driver.c
#	drivers/staging/line6/driver.h
#	drivers/staging/line6/pod.c
#	drivers/staging/line6/pod.h
#	drivers/staging/line6/podhd.c
#	drivers/staging/line6/podhd.h
#	drivers/staging/line6/toneport.c
#	drivers/staging/line6/toneport.h
#	drivers/staging/line6/variax.c
#	drivers/staging/line6/variax.h
#	sound/usb/Makefile
diff --cc drivers/staging/line6/driver.c
index 4502f3eab6e0,149c393c7302..000000000000
--- a/drivers/staging/line6/driver.c
+++ b/drivers/staging/line6/driver.c
@@@ -30,56 -27,6 +27,59 @@@
  #define DRIVER_DESC    "Line6 USB Driver"
  #define DRIVER_VERSION "0.9.1beta" DRIVER_REVISION
  
++<<<<<<< HEAD:drivers/staging/line6/driver.c
 +/* table of devices that work with this driver */
 +static const struct usb_device_id line6_id_table[] = {
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_BASSPODXT)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_BASSPODXTLIVE)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_BASSPODXTPRO)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_GUITARPORT)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_POCKETPOD)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODHD300)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODHD500)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODSTUDIO_GX)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODSTUDIO_UX1)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODSTUDIO_UX2)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODX3)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODX3LIVE)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODXT)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODXTLIVE)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_PODXTPRO)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_TONEPORT_GX)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_TONEPORT_UX1)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_TONEPORT_UX2)},
 +	{USB_DEVICE(LINE6_VENDOR_ID, LINE6_DEVID_VARIAX)},
 +	{},
 +};
 +
 +MODULE_DEVICE_TABLE(usb, line6_id_table);
 +
 +/* *INDENT-OFF* */
 +static struct line6_properties line6_properties_table[] = {
 +	{ LINE6_BIT_BASSPODXT,     "BassPODxt",     "BassPODxt",        LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_BASSPODXTLIVE, "BassPODxtLive", "BassPODxt Live",   LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_BASSPODXTPRO,  "BassPODxtPro",  "BassPODxt Pro",    LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_GUITARPORT,    "GuitarPort",    "GuitarPort",       LINE6_BIT_PCM               },
 +	{ LINE6_BIT_POCKETPOD,     "PocketPOD",     "Pocket POD",       LINE6_BIT_CONTROL           },
 +	{ LINE6_BIT_PODHD300,      "PODHD300",      "POD HD300",        LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_PODHD500,      "PODHD500",      "POD HD500",        LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_PODSTUDIO_GX,  "PODStudioGX",   "POD Studio GX",    LINE6_BIT_PCM               },
 +	{ LINE6_BIT_PODSTUDIO_UX1, "PODStudioUX1",  "POD Studio UX1",   LINE6_BIT_PCM               },
 +	{ LINE6_BIT_PODSTUDIO_UX2, "PODStudioUX2",  "POD Studio UX2",   LINE6_BIT_PCM               },
 +	{ LINE6_BIT_PODX3,         "PODX3",         "POD X3",           LINE6_BIT_PCM               },
 +	{ LINE6_BIT_PODX3LIVE,     "PODX3Live",     "POD X3 Live",      LINE6_BIT_PCM               },
 +	{ LINE6_BIT_PODXT,         "PODxt",         "PODxt",            LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_PODXTLIVE,     "PODxtLive",     "PODxt Live",       LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_PODXTPRO,      "PODxtPro",      "PODxt Pro",        LINE6_BIT_CONTROL_PCM_HWMON },
 +	{ LINE6_BIT_TONEPORT_GX,   "TonePortGX",    "TonePort GX",      LINE6_BIT_PCM               },
 +	{ LINE6_BIT_TONEPORT_UX1,  "TonePortUX1",   "TonePort UX1",     LINE6_BIT_PCM               },
 +	{ LINE6_BIT_TONEPORT_UX2,  "TonePortUX2",   "TonePort UX2",     LINE6_BIT_PCM               },
 +	{ LINE6_BIT_VARIAX,        "Variax",        "Variax Workbench", LINE6_BIT_CONTROL           },
 +};
 +/* *INDENT-ON* */
 +
++=======
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.c
  /*
  	This is Line6's MIDI manufacturer ID.
  */
@@@ -565,16 -481,8 +574,17 @@@ ssize_t line6_nop_read(struct device *d
  {
  	return 0;
  }
+ EXPORT_SYMBOL_GPL(line6_nop_read);
  
 +/*
 +	No operation (i.e., unsupported).
 +*/
 +ssize_t line6_nop_write(struct device *dev, struct device_attribute *attr,
 +			const char *buf, size_t count)
 +{
 +	return count;
 +}
 +
  /*
  	Generic destructor.
  */
@@@ -605,24 -510,24 +612,35 @@@ static void line6_destruct(struct usb_i
  /*
  	Probe USB device.
  */
- static int line6_probe(struct usb_interface *interface,
- 		       const struct usb_device_id *id)
+ int line6_probe(struct usb_interface *interface,
+ 		struct usb_line6 *line6,
+ 		const struct line6_properties *properties,
+ 		int (*private_init)(struct usb_interface *, struct usb_line6 *))
  {
++<<<<<<< HEAD:drivers/staging/line6/driver.c
 +	int devtype;
 +	struct usb_device *usbdev;
 +	struct usb_line6 *line6;
 +	const struct line6_properties *properties;
 +	int interface_number, alternate = 0;
 +	int product;
 +	int size = 0;
 +	int ep_read = 0, ep_write = 0;
++=======
+ 	struct usb_device *usbdev;
+ 	int interface_number;
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.c
  	int ret;
  
- 	if (interface == NULL)
- 		return -ENODEV;
+ 	if (!interface) {
+ 		ret = -ENODEV;
+ 		goto err_put;
+ 	}
  	usbdev = interface_to_usbdev(interface);
- 	if (usbdev == NULL)
- 		return -ENODEV;
+ 	if (!usbdev) {
+ 		ret = -ENODEV;
+ 		goto err_put;
+ 	}
  
  	/* we don't handle multiple configurations */
  	if (usbdev->descriptor.bNumConfigurations != 1) {
@@@ -630,25 -535,8 +648,27 @@@
  		goto err_put;
  	}
  
++<<<<<<< HEAD:drivers/staging/line6/driver.c
 +	/* check vendor and product id */
 +	for (devtype = ARRAY_SIZE(line6_id_table) - 1; devtype--;) {
 +		u16 idVendor = le16_to_cpu(usbdev->descriptor.idVendor);
 +		u16 idProduct = le16_to_cpu(usbdev->descriptor.idProduct);
 +
 +		if (idVendor == line6_id_table[devtype].idVendor &&
 +		    idProduct == line6_id_table[devtype].idProduct)
 +			break;
 +	}
 +
 +	if (devtype < 0) {
 +		ret = -ENODEV;
 +		goto err_put;
 +	}
 +
++=======
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.c
  	/* initialize device info: */
- 	properties = &line6_properties_table[devtype];
  	dev_info(&interface->dev, "Line6 %s found\n", properties->name);
 +	product = le16_to_cpu(usbdev->descriptor.idProduct);
  
  	/* query interface number */
  	interface_number = interface->cur_altsetting->desc.bInterfaceNumber;
@@@ -733,108 -548,10 +753,114 @@@
  		goto err_put;
  	}
  
++<<<<<<< HEAD:drivers/staging/line6/driver.c
 +	/* initialize device data based on product id: */
 +	switch (product) {
 +	case LINE6_DEVID_BASSPODXT:
 +	case LINE6_DEVID_BASSPODXTLIVE:
 +	case LINE6_DEVID_BASSPODXTPRO:
 +	case LINE6_DEVID_PODXT:
 +	case LINE6_DEVID_PODXTPRO:
 +		size = sizeof(struct usb_line6_pod);
 +		ep_read = 0x84;
 +		ep_write = 0x03;
 +		break;
 +
 +	case LINE6_DEVID_PODHD300:
 +		size = sizeof(struct usb_line6_podhd);
 +		ep_read = 0x84;
 +		ep_write = 0x03;
 +		break;
 +
 +	case LINE6_DEVID_PODHD500:
 +		size = sizeof(struct usb_line6_podhd);
 +		ep_read = 0x81;
 +		ep_write = 0x01;
 +		break;
 +
 +	case LINE6_DEVID_POCKETPOD:
 +		size = sizeof(struct usb_line6_pod);
 +		ep_read = 0x82;
 +		ep_write = 0x02;
 +		break;
 +
 +	case LINE6_DEVID_PODX3:
 +	case LINE6_DEVID_PODX3LIVE:
 +		/* currently unused! */
 +		size = sizeof(struct usb_line6_pod);
 +		ep_read = 0x81;
 +		ep_write = 0x01;
 +		break;
 +
 +	case LINE6_DEVID_PODSTUDIO_GX:
 +	case LINE6_DEVID_PODSTUDIO_UX1:
 +	case LINE6_DEVID_PODSTUDIO_UX2:
 +	case LINE6_DEVID_TONEPORT_GX:
 +	case LINE6_DEVID_TONEPORT_UX1:
 +	case LINE6_DEVID_TONEPORT_UX2:
 +	case LINE6_DEVID_GUITARPORT:
 +		size = sizeof(struct usb_line6_toneport);
 +		/* these don't have a control channel */
 +		break;
 +
 +	case LINE6_DEVID_PODXTLIVE:
 +		switch (interface_number) {
 +		case PODXTLIVE_INTERFACE_POD:
 +			size = sizeof(struct usb_line6_pod);
 +			ep_read = 0x84;
 +			ep_write = 0x03;
 +			break;
 +
 +		case PODXTLIVE_INTERFACE_VARIAX:
 +			size = sizeof(struct usb_line6_variax);
 +			ep_read = 0x86;
 +			ep_write = 0x05;
 +			break;
 +
 +		default:
 +			ret = -ENODEV;
 +			goto err_put;
 +		}
 +		break;
 +
 +	case LINE6_DEVID_VARIAX:
 +		size = sizeof(struct usb_line6_variax);
 +		ep_read = 0x82;
 +		ep_write = 0x01;
 +		break;
 +
 +	default:
 +		MISSING_CASE;
 +		ret = -ENODEV;
 +		goto err_put;
 +	}
 +
 +	if (size == 0) {
 +		dev_err(&interface->dev,
 +			"driver bug: interface data size not set\n");
 +		ret = -ENODEV;
 +		goto err_put;
 +	}
 +
 +	line6 = kzalloc(size, GFP_KERNEL);
 +	if (line6 == NULL) {
 +		ret = -ENODEV;
 +		goto err_put;
 +	}
 +
++=======
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.c
  	/* store basic data: */
 +	line6->interface_number = interface_number;
  	line6->properties = properties;
  	line6->usbdev = usbdev;
  	line6->ifcdev = &interface->dev;
++<<<<<<< HEAD:drivers/staging/line6/driver.c
 +	line6->ep_control_read = ep_read;
 +	line6->ep_control_write = ep_write;
 +	line6->product = product;
++=======
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.c
  
  	/* get data from endpoint descriptor (see usb_maxpacket): */
  	{
@@@ -890,71 -606,8 +915,76 @@@
  		}
  	}
  
++<<<<<<< HEAD:drivers/staging/line6/driver.c
 +	/* initialize device data based on product id: */
 +	switch (product) {
 +	case LINE6_DEVID_BASSPODXT:
 +	case LINE6_DEVID_BASSPODXTLIVE:
 +	case LINE6_DEVID_BASSPODXTPRO:
 +	case LINE6_DEVID_POCKETPOD:
 +	case LINE6_DEVID_PODX3:
 +	case LINE6_DEVID_PODX3LIVE:
 +	case LINE6_DEVID_PODXT:
 +	case LINE6_DEVID_PODXTPRO:
 +		ret = line6_pod_init(interface, (struct usb_line6_pod *)line6);
 +		break;
 +
 +	case LINE6_DEVID_PODHD300:
 +	case LINE6_DEVID_PODHD500:
 +		ret = line6_podhd_init(interface,
 +				       (struct usb_line6_podhd *)line6);
 +		break;
 +
 +	case LINE6_DEVID_PODXTLIVE:
 +		switch (interface_number) {
 +		case PODXTLIVE_INTERFACE_POD:
 +			ret =
 +			    line6_pod_init(interface,
 +					   (struct usb_line6_pod *)line6);
 +			break;
 +
 +		case PODXTLIVE_INTERFACE_VARIAX:
 +			ret =
 +			    line6_variax_init(interface,
 +					      (struct usb_line6_variax *)line6);
 +			break;
 +
 +		default:
 +			dev_err(&interface->dev,
 +				"PODxt Live interface %d not supported\n",
 +				interface_number);
 +			ret = -ENODEV;
 +		}
 +
 +		break;
 +
 +	case LINE6_DEVID_VARIAX:
 +		ret =
 +		    line6_variax_init(interface,
 +				      (struct usb_line6_variax *)line6);
 +		break;
 +
 +	case LINE6_DEVID_PODSTUDIO_GX:
 +	case LINE6_DEVID_PODSTUDIO_UX1:
 +	case LINE6_DEVID_PODSTUDIO_UX2:
 +	case LINE6_DEVID_TONEPORT_GX:
 +	case LINE6_DEVID_TONEPORT_UX1:
 +	case LINE6_DEVID_TONEPORT_UX2:
 +	case LINE6_DEVID_GUITARPORT:
 +		ret =
 +		    line6_toneport_init(interface,
 +					(struct usb_line6_toneport *)line6);
 +		break;
 +
 +	default:
 +		MISSING_CASE;
 +		ret = -ENODEV;
 +	}
 +
++=======
+ 	/* initialize device data based on device: */
+ 	ret = private_init(interface, line6);
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.c
  	if (ret < 0)
  		goto err_destruct;
  
@@@ -1114,27 -719,7 +1150,31 @@@ int line6_resume(struct usb_interface *
  	snd_power_change_state(line6->card, SNDRV_CTL_POWER_D0);
  	return 0;
  }
++<<<<<<< HEAD:drivers/staging/line6/driver.c
 +
 +/*
 +	Resume Line6 device after reset.
 +*/
 +static int line6_reset_resume(struct usb_interface *interface)
 +{
 +	struct usb_line6 *line6 = usb_get_intfdata(interface);
 +
 +	switch (line6->usbdev->descriptor.idProduct) {
 +	case LINE6_DEVID_PODSTUDIO_GX:
 +	case LINE6_DEVID_PODSTUDIO_UX1:
 +	case LINE6_DEVID_PODSTUDIO_UX2:
 +	case LINE6_DEVID_TONEPORT_GX:
 +	case LINE6_DEVID_TONEPORT_UX1:
 +	case LINE6_DEVID_TONEPORT_UX2:
 +	case LINE6_DEVID_GUITARPORT:
 +		line6_toneport_reset_resume((struct usb_line6_toneport *)line6);
 +	}
 +
 +	return line6_resume(interface);
 +}
++=======
+ EXPORT_SYMBOL_GPL(line6_resume);
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.c
  
  #endif /* CONFIG_PM */
  
diff --cc drivers/staging/line6/driver.h
index a8341f9fdb98,31cd318369e9..000000000000
--- a/drivers/staging/line6/driver.h
+++ b/drivers/staging/line6/driver.h
@@@ -110,11 -112,6 +110,14 @@@ struct usb_line6 
  	struct usb_device *usbdev;
  
  	/**
++<<<<<<< HEAD:drivers/staging/line6/driver.h
 +		 Product id.
 +	*/
 +	int product;
 +
 +	/**
++=======
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/driver.h
  		 Properties.
  	*/
  	const struct line6_properties *properties;
diff --cc drivers/staging/line6/pod.c
index 699b21725062,dde9c2b8ad0f..000000000000
--- a/drivers/staging/line6/pod.c
+++ b/drivers/staging/line6/pod.c
@@@ -416,9 -523,10 +497,14 @@@ static int pod_try_init(struct usb_inte
  /*
  	 Init POD device (and clean up in case of failure).
  */
++<<<<<<< HEAD:drivers/staging/line6/pod.c
 +int line6_pod_init(struct usb_interface *interface, struct usb_line6_pod *pod)
++=======
+ static int pod_init(struct usb_interface *interface,
+ 		    struct usb_line6 *line6)
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/pod.c
  {
 -	int err = pod_try_init(interface, line6);
 +	int err = pod_try_init(interface, pod);
  
  	if (err < 0)
  		pod_destruct(interface);
@@@ -426,31 -534,140 +512,171 @@@
  	return err;
  }
  
++<<<<<<< HEAD:drivers/staging/line6/pod.c
 +/*
 +	POD device disconnected.
 +*/
 +void line6_pod_disconnect(struct usb_interface *interface)
 +{
 +	struct usb_line6_pod *pod;
 +
 +	if (interface == NULL)
 +		return;
 +	pod = usb_get_intfdata(interface);
 +
 +	if (pod != NULL) {
 +		struct snd_line6_pcm *line6pcm = pod->line6.line6pcm;
 +		struct device *dev = &interface->dev;
 +
 +		if (line6pcm != NULL)
 +			line6_pcm_disconnect(line6pcm);
 +
 +		if (dev != NULL) {
 +			/* remove sysfs entries: */
 +			device_remove_file(dev, &dev_attr_device_id);
 +			device_remove_file(dev, &dev_attr_firmware_version);
 +			device_remove_file(dev, &dev_attr_serial_number);
 +		}
 +	}
 +
 +	pod_destruct(interface);
 +}
++=======
+ #define LINE6_DEVICE(prod) USB_DEVICE(0x0e41, prod)
+ #define LINE6_IF_NUM(prod, n) USB_DEVICE_INTERFACE_NUMBER(0x0e41, prod, n)
+ 
+ /* table of devices that work with this driver */
+ static const struct usb_device_id pod_id_table[] = {
+ 	{ LINE6_DEVICE(0x4250),    .driver_info = LINE6_BASSPODXT },
+ 	{ LINE6_DEVICE(0x4642),    .driver_info = LINE6_BASSPODXTLIVE },
+ 	{ LINE6_DEVICE(0x4252),    .driver_info = LINE6_BASSPODXTPRO },
+ 	{ LINE6_IF_NUM(0x5051, 1), .driver_info = LINE6_POCKETPOD },
+ 	{ LINE6_DEVICE(0x5044),    .driver_info = LINE6_PODXT },
+ 	{ LINE6_IF_NUM(0x4650, 0), .driver_info = LINE6_PODXTLIVE_POD },
+ 	{ LINE6_DEVICE(0x5050),    .driver_info = LINE6_PODXTPRO },
+ 	{}
+ };
+ 
+ MODULE_DEVICE_TABLE(usb, pod_id_table);
+ 
+ static const struct line6_properties pod_properties_table[] = {
+ 	[LINE6_BASSPODXT] = {
+ 		.id = "BassPODxt",
+ 		.name = "BassPODxt",
+ 		.capabilities	= LINE6_CAP_CONTROL
+ 				| LINE6_CAP_PCM
+ 				| LINE6_CAP_HWMON,
+ 		.altsetting = 5,
+ 		.ep_ctrl_r = 0x84,
+ 		.ep_ctrl_w = 0x03,
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_BASSPODXTLIVE] = {
+ 		.id = "BassPODxtLive",
+ 		.name = "BassPODxt Live",
+ 		.capabilities	= LINE6_CAP_CONTROL
+ 				| LINE6_CAP_PCM
+ 				| LINE6_CAP_HWMON,
+ 		.altsetting = 1,
+ 		.ep_ctrl_r = 0x84,
+ 		.ep_ctrl_w = 0x03,
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_BASSPODXTPRO] = {
+ 		.id = "BassPODxtPro",
+ 		.name = "BassPODxt Pro",
+ 		.capabilities	= LINE6_CAP_CONTROL
+ 				| LINE6_CAP_PCM
+ 				| LINE6_CAP_HWMON,
+ 		.altsetting = 5,
+ 		.ep_ctrl_r = 0x84,
+ 		.ep_ctrl_w = 0x03,
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_POCKETPOD] = {
+ 		.id = "PocketPOD",
+ 		.name = "Pocket POD",
+ 		.capabilities	= LINE6_CAP_CONTROL,
+ 		.altsetting = 0,
+ 		.ep_ctrl_r = 0x82,
+ 		.ep_ctrl_w = 0x02,
+ 		/* no audio channel */
+ 	},
+ 	[LINE6_PODXT] = {
+ 		.id = "PODxt",
+ 		.name = "PODxt",
+ 		.capabilities	= LINE6_CAP_CONTROL
+ 				| LINE6_CAP_PCM
+ 				| LINE6_CAP_HWMON,
+ 		.altsetting = 5,
+ 		.ep_ctrl_r = 0x84,
+ 		.ep_ctrl_w = 0x03,
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_PODXTLIVE_POD] = {
+ 		.id = "PODxtLive",
+ 		.name = "PODxt Live",
+ 		.capabilities	= LINE6_CAP_CONTROL
+ 				| LINE6_CAP_PCM
+ 				| LINE6_CAP_HWMON,
+ 		.altsetting = 1,
+ 		.ep_ctrl_r = 0x84,
+ 		.ep_ctrl_w = 0x03,
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_PODXTPRO] = {
+ 		.id = "PODxtPro",
+ 		.name = "PODxt Pro",
+ 		.capabilities	= LINE6_CAP_CONTROL
+ 				| LINE6_CAP_PCM
+ 				| LINE6_CAP_HWMON,
+ 		.altsetting = 5,
+ 		.ep_ctrl_r = 0x84,
+ 		.ep_ctrl_w = 0x03,
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ };
+ 
+ /*
+ 	Probe USB device.
+ */
+ static int pod_probe(struct usb_interface *interface,
+ 		     const struct usb_device_id *id)
+ {
+ 	struct usb_line6_pod *pod;
+ 	int err;
+ 
+ 	pod = kzalloc(sizeof(*pod), GFP_KERNEL);
+ 	if (!pod)
+ 		return -ENODEV;
+ 	err = line6_probe(interface, &pod->line6,
+ 			  &pod_properties_table[id->driver_info],
+ 			  pod_init);
+ 	if (err < 0)
+ 		kfree(pod);
+ 	return err;
+ }
+ 
+ static struct usb_driver pod_driver = {
+ 	.name = KBUILD_MODNAME,
+ 	.probe = pod_probe,
+ 	.disconnect = line6_disconnect,
+ #ifdef CONFIG_PM
+ 	.suspend = line6_suspend,
+ 	.resume = line6_resume,
+ 	.reset_resume = line6_resume,
+ #endif
+ 	.id_table = pod_id_table,
+ };
+ 
+ module_usb_driver(pod_driver);
+ 
+ MODULE_DESCRIPTION("Line6 POD USB driver");
+ MODULE_LICENSE("GPL");
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/pod.c
diff --cc drivers/staging/line6/podhd.c
index 7ef45437b4f2,84096326694c..000000000000
--- a/drivers/staging/line6/podhd.c
+++ b/drivers/staging/line6/podhd.c
@@@ -121,9 -226,10 +203,14 @@@ static const struct line6_properties po
  /*
  	Init POD HD device (and clean up in case of failure).
  */
++<<<<<<< HEAD:drivers/staging/line6/podhd.c
 +int line6_podhd_init(struct usb_interface *interface,
 +		     struct usb_line6_podhd *podhd)
++=======
+ static int podhd_init(struct usb_interface *interface,
+ 		      struct usb_line6 *line6)
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/podhd.c
  {
 -	struct usb_line6_podhd *podhd = (struct usb_line6_podhd *) line6;
  	int err = podhd_try_init(interface, podhd);
  
  	if (err < 0)
@@@ -133,22 -239,38 +220,60 @@@
  }
  
  /*
++<<<<<<< HEAD:drivers/staging/line6/podhd.c
 +	POD HD device disconnected.
 +*/
 +void line6_podhd_disconnect(struct usb_interface *interface)
 +{
 +	struct usb_line6_podhd *podhd;
 +
 +	if (interface == NULL)
 +		return;
 +	podhd = usb_get_intfdata(interface);
 +
 +	if (podhd != NULL) {
 +		struct snd_line6_pcm *line6pcm = podhd->line6.line6pcm;
 +
 +		if (line6pcm != NULL)
 +			line6_pcm_disconnect(line6pcm);
 +	}
 +
 +	podhd_destruct(interface);
 +}
++=======
+ 	Probe USB device.
+ */
+ static int podhd_probe(struct usb_interface *interface,
+ 		       const struct usb_device_id *id)
+ {
+ 	struct usb_line6_podhd *podhd;
+ 	int err;
+ 
+ 	podhd = kzalloc(sizeof(*podhd), GFP_KERNEL);
+ 	if (!podhd)
+ 		return -ENODEV;
+ 	err = line6_probe(interface, &podhd->line6,
+ 			  &podhd_properties_table[id->driver_info],
+ 			  podhd_init);
+ 	if (err < 0)
+ 		kfree(podhd);
+ 	return err;
+ }
+ 
+ static struct usb_driver podhd_driver = {
+ 	.name = KBUILD_MODNAME,
+ 	.probe = podhd_probe,
+ 	.disconnect = line6_disconnect,
+ #ifdef CONFIG_PM
+ 	.suspend = line6_suspend,
+ 	.resume = line6_resume,
+ 	.reset_resume = line6_resume,
+ #endif
+ 	.id_table = podhd_id_table,
+ };
+ 
+ module_usb_driver(podhd_driver);
+ 
+ MODULE_DESCRIPTION("Line6 PODHD USB driver");
+ MODULE_LICENSE("GPL");
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/podhd.c
diff --cc drivers/staging/line6/toneport.c
index 4717bd662142,4f07643e47f2..000000000000
--- a/drivers/staging/line6/toneport.c
+++ b/drivers/staging/line6/toneport.c
@@@ -312,17 -365,19 +358,29 @@@ static void toneport_setup(struct usb_l
  	toneport_send_cmd(usbdev, 0x0301, 0x0000);
  
  	/* initialize source select: */
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +	switch (usbdev->descriptor.idProduct) {
 +	case LINE6_DEVID_TONEPORT_UX1:
 +	case LINE6_DEVID_TONEPORT_UX2:
 +	case LINE6_DEVID_PODSTUDIO_UX1:
 +	case LINE6_DEVID_PODSTUDIO_UX2:
++=======
+ 	switch (toneport->type) {
+ 	case LINE6_TONEPORT_UX1:
+ 	case LINE6_TONEPORT_UX2:
+ 	case LINE6_PODSTUDIO_UX1:
+ 	case LINE6_PODSTUDIO_UX2:
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/toneport.c
  		toneport_send_cmd(usbdev,
  				  toneport_source_info[toneport->source].code,
  				  0x0000);
 -	default:
 -		break;
  	}
  
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +	if (toneport_has_led(usbdev->descriptor.idProduct))
++=======
+ 	if (toneport_has_led(toneport->type))
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/toneport.c
  		toneport_update_led(&usbdev->dev);
  }
  
@@@ -357,11 -446,11 +415,19 @@@ static int toneport_try_init(struct usb
  		return err;
  
  	/* register source select control: */
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +	switch (usbdev->descriptor.idProduct) {
 +	case LINE6_DEVID_TONEPORT_UX1:
 +	case LINE6_DEVID_TONEPORT_UX2:
 +	case LINE6_DEVID_PODSTUDIO_UX1:
 +	case LINE6_DEVID_PODSTUDIO_UX2:
++=======
+ 	switch (toneport->type) {
+ 	case LINE6_TONEPORT_UX1:
+ 	case LINE6_TONEPORT_UX2:
+ 	case LINE6_PODSTUDIO_UX1:
+ 	case LINE6_PODSTUDIO_UX2:
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/toneport.c
  		err =
  		    snd_ctl_add(line6->card,
  				snd_ctl_new1(&toneport_control_source,
@@@ -378,7 -470,7 +444,11 @@@
  	line6_read_serial_number(line6, &toneport->serial_number);
  	line6_read_data(line6, 0x80c2, &toneport->firmware_version, 1);
  
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +	if (toneport_has_led(usbdev->descriptor.idProduct)) {
++=======
+ 	if (toneport_has_led(toneport->type)) {
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/toneport.c
  		CHECK_RETURN(device_create_file
  			     (&interface->dev, &dev_attr_led_red));
  		CHECK_RETURN(device_create_file
@@@ -397,10 -489,10 +467,15 @@@
  /*
  	 Init Toneport device (and clean up in case of failure).
  */
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +int line6_toneport_init(struct usb_interface *interface,
 +			struct usb_line6_toneport *toneport)
++=======
+ static int toneport_init(struct usb_interface *interface,
+ 			 struct usb_line6 *line6)
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/toneport.c
  {
 -	int err = toneport_try_init(interface, line6);
 +	int err = toneport_try_init(interface, toneport);
  
  	if (err < 0)
  		toneport_destruct(interface);
@@@ -411,37 -504,130 +487,163 @@@
  /*
  	Resume Toneport device after reset.
  */
- void line6_toneport_reset_resume(struct usb_line6_toneport *toneport)
+ static int toneport_reset_resume(struct usb_interface *interface)
  {
- 	toneport_setup(toneport);
+ 	toneport_setup(usb_get_intfdata(interface));
+ 	return line6_resume(interface);
  }
++<<<<<<< HEAD:drivers/staging/line6/toneport.c
 +
 +/*
 +	Toneport device disconnected.
 +*/
 +void line6_toneport_disconnect(struct usb_interface *interface)
 +{
 +	struct usb_line6_toneport *toneport;
 +
 +	if (interface == NULL)
 +		return;
 +
 +	toneport = usb_get_intfdata(interface);
 +	del_timer_sync(&toneport->timer);
 +
 +	if (toneport_has_led(toneport->line6.usbdev->descriptor.idProduct)) {
 +		device_remove_file(&interface->dev, &dev_attr_led_red);
 +		device_remove_file(&interface->dev, &dev_attr_led_green);
 +	}
 +
 +	if (toneport != NULL) {
 +		struct snd_line6_pcm *line6pcm = toneport->line6.line6pcm;
 +
 +		if (line6pcm != NULL) {
 +			line6_pcm_release(line6pcm, LINE6_BITS_PCM_MONITOR);
 +			line6_pcm_disconnect(line6pcm);
 +		}
 +	}
 +
 +	toneport_destruct(interface);
 +}
++=======
+ #endif
+ 
+ #define LINE6_DEVICE(prod) USB_DEVICE(0x0e41, prod)
+ #define LINE6_IF_NUM(prod, n) USB_DEVICE_INTERFACE_NUMBER(0x0e41, prod, n)
+ 
+ /* table of devices that work with this driver */
+ static const struct usb_device_id toneport_id_table[] = {
+ 	{ LINE6_DEVICE(0x4750),    .driver_info = LINE6_GUITARPORT },
+ 	{ LINE6_DEVICE(0x4153),    .driver_info = LINE6_PODSTUDIO_GX },
+ 	{ LINE6_DEVICE(0x4150),    .driver_info = LINE6_PODSTUDIO_UX1 },
+ 	{ LINE6_IF_NUM(0x4151, 0), .driver_info = LINE6_PODSTUDIO_UX2 },
+ 	{ LINE6_DEVICE(0x4147),    .driver_info = LINE6_TONEPORT_GX },
+ 	{ LINE6_DEVICE(0x4141),    .driver_info = LINE6_TONEPORT_UX1 },
+ 	{ LINE6_IF_NUM(0x4142, 0), .driver_info = LINE6_TONEPORT_UX2 },
+ 	{}
+ };
+ 
+ MODULE_DEVICE_TABLE(usb, toneport_id_table);
+ 
+ static const struct line6_properties toneport_properties_table[] = {
+ 	[LINE6_GUITARPORT] = {
+ 		.id = "GuitarPort",
+ 		.name = "GuitarPort",
+ 		.capabilities	= LINE6_CAP_PCM,
+ 		.altsetting = 2,  /* 1..4 seem to be ok */
+ 		/* no control channel */
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_PODSTUDIO_GX] = {
+ 		.id = "PODStudioGX",
+ 		.name = "POD Studio GX",
+ 		.capabilities	= LINE6_CAP_PCM,
+ 		.altsetting = 2,  /* 1..4 seem to be ok */
+ 		/* no control channel */
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_PODSTUDIO_UX1] = {
+ 		.id = "PODStudioUX1",
+ 		.name = "POD Studio UX1",
+ 		.capabilities	= LINE6_CAP_PCM,
+ 		.altsetting = 2,  /* 1..4 seem to be ok */
+ 		/* no control channel */
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_PODSTUDIO_UX2] = {
+ 		.id = "PODStudioUX2",
+ 		.name = "POD Studio UX2",
+ 		.capabilities	= LINE6_CAP_PCM,
+ 		.altsetting = 2,  /* defaults to 44.1kHz, 16-bit */
+ 		/* no control channel */
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_TONEPORT_GX] = {
+ 		.id = "TonePortGX",
+ 		.name = "TonePort GX",
+ 		.capabilities	= LINE6_CAP_PCM,
+ 		.altsetting = 2,  /* 1..4 seem to be ok */
+ 		/* no control channel */
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_TONEPORT_UX1] = {
+ 		.id = "TonePortUX1",
+ 		.name = "TonePort UX1",
+ 		.capabilities	= LINE6_CAP_PCM,
+ 		.altsetting = 2,  /* 1..4 seem to be ok */
+ 		/* no control channel */
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_TONEPORT_UX2] = {
+ 		.id = "TonePortUX2",
+ 		.name = "TonePort UX2",
+ 		.capabilities	= LINE6_CAP_PCM,
+ 		.altsetting = 2,  /* defaults to 44.1kHz, 16-bit */
+ 		/* no control channel */
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ };
+ 
+ /*
+ 	Probe USB device.
+ */
+ static int toneport_probe(struct usb_interface *interface,
+ 			  const struct usb_device_id *id)
+ {
+ 	struct usb_line6_toneport *toneport;
+ 	int err;
+ 
+ 	toneport = kzalloc(sizeof(*toneport), GFP_KERNEL);
+ 	if (!toneport)
+ 		return -ENODEV;
+ 	toneport->type = id->driver_info;
+ 	err = line6_probe(interface, &toneport->line6,
+ 			  &toneport_properties_table[id->driver_info],
+ 			  toneport_init);
+ 	if (err < 0)
+ 		kfree(toneport);
+ 	return err;
+ }
+ 
+ static struct usb_driver toneport_driver = {
+ 	.name = KBUILD_MODNAME,
+ 	.probe = toneport_probe,
+ 	.disconnect = line6_disconnect,
+ #ifdef CONFIG_PM
+ 	.suspend = line6_suspend,
+ 	.resume = line6_resume,
+ 	.reset_resume = toneport_reset_resume,
+ #endif
+ 	.id_table = toneport_id_table,
+ };
+ 
+ module_usb_driver(toneport_driver);
+ 
+ MODULE_DESCRIPTION("TonePort USB driver");
+ MODULE_LICENSE("GPL");
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/toneport.c
diff --cc drivers/staging/line6/variax.c
index bd0f694fa8d8,0c852bb1e76c..000000000000
--- a/drivers/staging/line6/variax.c
+++ b/drivers/staging/line6/variax.c
@@@ -210,10 -283,10 +265,15 @@@ static int variax_try_init(struct usb_i
  /*
  	 Init workbench device (and clean up in case of failure).
  */
++<<<<<<< HEAD:drivers/staging/line6/variax.c
 +int line6_variax_init(struct usb_interface *interface,
 +		      struct usb_line6_variax *variax)
++=======
+ static int variax_init(struct usb_interface *interface,
+ 		       struct usb_line6 *line6)
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/variax.c
  {
 -	int err = variax_try_init(interface, line6);
 +	int err = variax_try_init(interface, variax);
  
  	if (err < 0)
  		variax_destruct(interface);
@@@ -221,13 -294,75 +281,88 @@@
  	return err;
  }
  
++<<<<<<< HEAD:drivers/staging/line6/variax.c
 +/*
 +	Workbench device disconnected.
 +*/
 +void line6_variax_disconnect(struct usb_interface *interface)
 +{
 +	if (interface == NULL)
 +		return;
 +
 +	variax_destruct(interface);
 +}
++=======
+ #define LINE6_DEVICE(prod) USB_DEVICE(0x0e41, prod)
+ #define LINE6_IF_NUM(prod, n) USB_DEVICE_INTERFACE_NUMBER(0x0e41, prod, n)
+ 
+ /* table of devices that work with this driver */
+ static const struct usb_device_id variax_id_table[] = {
+ 	{ LINE6_IF_NUM(0x4650, 1), .driver_info = LINE6_PODXTLIVE_VARIAX },
+ 	{ LINE6_DEVICE(0x534d),    .driver_info = LINE6_VARIAX },
+ 	{}
+ };
+ 
+ MODULE_DEVICE_TABLE(usb, variax_id_table);
+ 
+ static const struct line6_properties variax_properties_table[] = {
+ 	[LINE6_PODXTLIVE_VARIAX] = {
+ 		.id = "PODxtLive",
+ 		.name = "PODxt Live",
+ 		.capabilities	= LINE6_CAP_CONTROL
+ 				| LINE6_CAP_PCM
+ 				| LINE6_CAP_HWMON,
+ 		.altsetting = 1,
+ 		.ep_ctrl_r = 0x86,
+ 		.ep_ctrl_w = 0x05,
+ 		.ep_audio_r = 0x82,
+ 		.ep_audio_w = 0x01,
+ 	},
+ 	[LINE6_VARIAX] = {
+ 		.id = "Variax",
+ 		.name = "Variax Workbench",
+ 		.capabilities	= LINE6_CAP_CONTROL,
+ 		.altsetting = 1,
+ 		.ep_ctrl_r = 0x82,
+ 		.ep_ctrl_w = 0x01,
+ 		/* no audio channel */
+ 	}
+ };
+ 
+ /*
+ 	Probe USB device.
+ */
+ static int variax_probe(struct usb_interface *interface,
+ 			const struct usb_device_id *id)
+ {
+ 	struct usb_line6_variax *variax;
+ 	int err;
+ 
+ 	variax = kzalloc(sizeof(*variax), GFP_KERNEL);
+ 	if (!variax)
+ 		return -ENODEV;
+ 	err = line6_probe(interface, &variax->line6,
+ 			  &variax_properties_table[id->driver_info],
+ 			  variax_init);
+ 	if (err < 0)
+ 		kfree(variax);
+ 	return err;
+ }
+ 
+ static struct usb_driver variax_driver = {
+ 	.name = KBUILD_MODNAME,
+ 	.probe = variax_probe,
+ 	.disconnect = line6_disconnect,
+ #ifdef CONFIG_PM
+ 	.suspend = line6_suspend,
+ 	.resume = line6_resume,
+ 	.reset_resume = line6_resume,
+ #endif
+ 	.id_table = variax_id_table,
+ };
+ 
+ module_usb_driver(variax_driver);
+ 
+ MODULE_DESCRIPTION("Vairax Workbench USB driver");
+ MODULE_LICENSE("GPL");
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver):sound/usb/line6/variax.c
diff --cc sound/usb/Makefile
index bcee4060fd18,2d2d122b069f..000000000000
--- a/sound/usb/Makefile
+++ b/sound/usb/Makefile
@@@ -25,3 -25,4 +25,7 @@@ obj-$(CONFIG_SND_USB_USX2Y) += snd-usbm
  obj-$(CONFIG_SND_USB_US122L) += snd-usbmidi-lib.o
  
  obj-$(CONFIG_SND) += misc/ usx2y/ caiaq/ 6fire/ hiface/ bcd2000/
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_SND_USB_LINE6)	+= line6/
++>>>>>>> ccddbe4a9953 (ALSA: line6: Split to each driver)
* Unmerged path drivers/staging/line6/pod.h
* Unmerged path drivers/staging/line6/podhd.h
* Unmerged path drivers/staging/line6/toneport.h
* Unmerged path drivers/staging/line6/variax.h
diff --git a/drivers/staging/line6/Kconfig b/drivers/staging/line6/Kconfig
index 4f1219b4c692..33deb419dde8 100644
--- a/drivers/staging/line6/Kconfig
+++ b/drivers/staging/line6/Kconfig
@@ -1,12 +1,14 @@
-menuconfig LINE6_USB
-	tristate "Line6 USB support"
-	depends on USB && SND
+config SND_USB_LINE6
+	tristate
 	select SND_RAWMIDI
 	select SND_PCM
+
+config SND_USB_POD
+	tristate "Line6 POD USB support"
+	select SND_USB_LINE6
 	help
-	  This is a driver for the guitar amp, cab, and effects modeller
-	  PODxt Pro by Line6 (and similar devices), supporting the
-	  following features:
+	  This is a driver for PODxt and other similar devices,
+	  supporting the following features:
 	    * Reading/writing individual parameters
 	    * Reading/writing complete channel, effects setup, and amp
 	      setup data
@@ -18,14 +20,27 @@ menuconfig LINE6_USB
 	    * Signal routing (record clean/processed guitar signal,
 	      re-amping)
 
-	  Preliminary support for the Variax Workbench and TonePort
-	  devices is included.
+config SND_USB_PODHD
+	tristate "Line6 POD HD300/400/500 USB support"
+	select SND_USB_LINE6
+	help
+	  This is a driver for POD HD300, 400 and 500 devices.
 
-if LINE6_USB
+config SND_USB_TONEPORT
+	tristate "TonePort GX, UX1 and UX2 USB support"
+	select SND_USB_LINE6
+	help
+	  This is a driver for TonePort GX, UX1 and UX2 devices.
+
+config SND_USB_VARIAX
+	tristate "Variax Workbench USB support"
+	select SND_USB_LINE6
+	help
+	  This is a driver for Variax Workbench device.
 
 config LINE6_USB_IMPULSE_RESPONSE
 	bool "measure impulse response"
-	default n
+	depends on SND_USB_LINE6
 	help
 	  Say Y here to add code to measure the impulse response of a Line6
 	  device. This is more accurate than user-space methods since it
@@ -35,4 +50,3 @@ config LINE6_USB_IMPULSE_RESPONSE
 
 	  If unsure, say N.
 
-endif # LINE6_USB
diff --git a/drivers/staging/line6/Makefile b/drivers/staging/line6/Makefile
index ae5c374b0f87..fa3a78dac097 100644
--- a/drivers/staging/line6/Makefile
+++ b/drivers/staging/line6/Makefile
@@ -1,14 +1,19 @@
-obj-$(CONFIG_LINE6_USB)		+= line6usb.o
-
-line6usb-y := 		\
+snd-usb-line6-y := 		\
 		audio.o		\
 		capture.o	\
 		driver.o	\
 		midi.o		\
 		midibuf.o	\
 		pcm.o		\
-		playback.o	\
-		pod.o		\
-		toneport.o	\
-		variax.o	\
-		podhd.o
+		playback.o
+
+snd-usb-pod-y := pod.o
+snd-usb-podhd-y := podhd.o
+snd-usb-toneport-y := toneport.o
+snd-usb-variax-y := variax.o
+
+obj-$(CONFIG_SND_USB_LINE6)	+= snd-usb-line6.o
+obj-$(CONFIG_SND_USB_POD)	+= snd-usb-pod.o
+obj-$(CONFIG_SND_USB_PODHD)	+= snd-usb-podhd.o
+obj-$(CONFIG_SND_USB_TONEPORT)	+= snd-usb-toneport.o
+obj-$(CONFIG_SND_USB_VARIAX)	+= snd-usb-variax.o
diff --git a/drivers/staging/line6/audio.c b/drivers/staging/line6/audio.c
index a92e21f7d55b..6914f9000aab 100644
--- a/drivers/staging/line6/audio.c
+++ b/drivers/staging/line6/audio.c
@@ -39,6 +39,7 @@ int line6_init_audio(struct usb_line6 *line6)
 		dev_name(line6->ifcdev));
 	return 0;
 }
+EXPORT_SYMBOL_GPL(line6_init_audio);
 
 /*
 	Register the Line6 USB audio system.
@@ -53,6 +54,7 @@ int line6_register_audio(struct usb_line6 *line6)
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(line6_register_audio);
 
 /*
 	Cleanup the Line6 USB audio system.
@@ -68,3 +70,4 @@ void line6_cleanup_audio(struct usb_line6 *line6)
 	snd_card_free(card);
 	line6->card = NULL;
 }
+EXPORT_SYMBOL_GPL(line6_cleanup_audio);
diff --git a/drivers/staging/line6/capture.c b/drivers/staging/line6/capture.c
index f8316b71f13d..a9dab3c1f6d8 100644
--- a/drivers/staging/line6/capture.c
+++ b/drivers/staging/line6/capture.c
@@ -18,7 +18,6 @@
 #include "capture.h"
 #include "driver.h"
 #include "pcm.h"
-#include "pod.h"
 
 /*
 	Find a free URB and submit it.
* Unmerged path drivers/staging/line6/driver.c
* Unmerged path drivers/staging/line6/driver.h
diff --git a/drivers/staging/line6/midi.c b/drivers/staging/line6/midi.c
index e3f9a53dbd96..f79a58ff7f0e 100644
--- a/drivers/staging/line6/midi.c
+++ b/drivers/staging/line6/midi.c
@@ -11,13 +11,13 @@
 
 #include <linux/slab.h>
 #include <linux/usb.h>
+#include <linux/export.h>
 #include <sound/core.h>
 #include <sound/rawmidi.h>
 
 #include "audio.h"
 #include "driver.h"
 #include "midi.h"
-#include "pod.h"
 #include "usbdefs.h"
 
 #define line6_rawmidi_substream_midi(substream) \
@@ -318,3 +318,4 @@ int line6_init_midi(struct usb_line6 *line6)
 	spin_lock_init(&line6midi->midi_transmit_lock);
 	return 0;
 }
+EXPORT_SYMBOL_GPL(line6_init_midi);
diff --git a/drivers/staging/line6/pcm.c b/drivers/staging/line6/pcm.c
index a7856bad3cc6..33f1f33bf199 100644
--- a/drivers/staging/line6/pcm.c
+++ b/drivers/staging/line6/pcm.c
@@ -10,6 +10,7 @@
  */
 
 #include <linux/slab.h>
+#include <linux/export.h>
 #include <sound/core.h>
 #include <sound/control.h>
 #include <sound/pcm.h>
@@ -19,7 +20,6 @@
 #include "capture.h"
 #include "driver.h"
 #include "playback.h"
-#include "pod.h"
 
 #ifdef CONFIG_LINE6_USB_IMPULSE_RESPONSE
 
@@ -194,6 +194,7 @@ pcm_acquire_error:
 	line6_pcm_release(line6pcm, flags_final & channels);
 	return err;
 }
+EXPORT_SYMBOL_GPL(line6_pcm_acquire);
 
 int line6_pcm_release(struct snd_line6_pcm *line6pcm, int channels)
 {
@@ -219,6 +220,7 @@ int line6_pcm_release(struct snd_line6_pcm *line6pcm, int channels)
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(line6_pcm_release);
 
 /* trigger callback */
 int snd_line6_trigger(struct snd_pcm_substream *substream, int cmd)
@@ -404,6 +406,7 @@ void line6_pcm_disconnect(struct snd_line6_pcm *line6pcm)
 	line6_unlink_wait_clear_audio_out_urbs(line6pcm);
 	line6_unlink_wait_clear_audio_in_urbs(line6pcm);
 }
+EXPORT_SYMBOL_GPL(line6_pcm_disconnect);
 
 /*
 	Create and register the PCM device and mixer entries.
@@ -536,6 +539,7 @@ int line6_init_pcm(struct usb_line6 *line6,
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(line6_init_pcm);
 
 /* prepare pcm callback */
 int snd_line6_prepare(struct snd_pcm_substream *substream)
diff --git a/drivers/staging/line6/playback.c b/drivers/staging/line6/playback.c
index f9135c7cb195..8098597024e2 100644
--- a/drivers/staging/line6/playback.c
+++ b/drivers/staging/line6/playback.c
@@ -18,7 +18,6 @@
 #include "capture.h"
 #include "driver.h"
 #include "pcm.h"
-#include "pod.h"
 #include "playback.h"
 
 /*
* Unmerged path drivers/staging/line6/pod.c
* Unmerged path drivers/staging/line6/pod.h
* Unmerged path drivers/staging/line6/podhd.c
* Unmerged path drivers/staging/line6/podhd.h
* Unmerged path drivers/staging/line6/toneport.c
* Unmerged path drivers/staging/line6/toneport.h
* Unmerged path drivers/staging/line6/variax.c
* Unmerged path drivers/staging/line6/variax.h
* Unmerged path sound/usb/Makefile
