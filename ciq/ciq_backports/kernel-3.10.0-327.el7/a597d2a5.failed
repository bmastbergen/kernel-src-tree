amd64_edac: Add F15h M60h support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Aravind Gopalakrishnan <Aravind.Gopalakrishnan@amd.com>
commit a597d2a5d9820dbbadd70583170c48c7290427df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/a597d2a5.failed

This patch adds support for ECC error decoding for F15h M60h processor.
Aside from the usual changes, the patch adds support for some new features
in the processor:
 - DDR4(unbuffered, registered); LRDIMM DDR3 support
   - relevant debug messages have been modified/added to report these
     memory types
 - new dbam_to_cs mappers
   - if (F15h M60h && LRDIMM); we need a 'multiplier' value to find
     cs_size. This multiplier value is obtained from the per-dimm
     DCSM register. So, change the interface to accept a 'cs_mask_nr'
     value to facilitate this calculation
 - switch-casing determine_memory_type()
   - done to cleanse the function of too many if-else statements
     and improve readability
   - This is now called early in read_mc_regs() to cache dram_type

Misc cleanup:
 - amd64_pci_table[] is condensed by using PCI_VDEVICE macro.

Testing details:
Tested the patch by injecting 'ECC' type errors using mce_amd_inj
and error decoding works fine.

	Signed-off-by: Aravind Gopalakrishnan <Aravind.Gopalakrishnan@amd.com>
Link: http://lkml.kernel.org/r/1414617483-4941-1-git-send-email-Aravind.Gopalakrishnan@amd.com
[ Boris: determine_memory_type() cleanups ]
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit a597d2a5d9820dbbadd70583170c48c7290427df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/edac/amd64_edac.c
#	drivers/edac/amd64_edac.h
diff --cc drivers/edac/amd64_edac.c
index 9d33c8814154,1a1d7c43a20f..000000000000
--- a/drivers/edac/amd64_edac.c
+++ b/drivers/edac/amd64_edac.c
@@@ -1785,9 -1935,18 +1910,19 @@@ static struct amd64_family_type family_
  			.early_channel_count	= f1x_early_channel_count,
  			.map_sysaddr_to_csrow	= f1x_map_sysaddr_to_csrow,
  			.dbam_to_cs		= f16_dbam_to_chip_select,
 +			.read_dct_pci_cfg	= f15_read_dct_pci_cfg,
  		}
  	},
+ 	[F15_M60H_CPUS] = {
+ 		.ctl_name = "F15h_M60h",
+ 		.f1_id = PCI_DEVICE_ID_AMD_15H_M60H_NB_F1,
+ 		.f3_id = PCI_DEVICE_ID_AMD_15H_M60H_NB_F3,
+ 		.ops = {
+ 			.early_channel_count	= f1x_early_channel_count,
+ 			.map_sysaddr_to_csrow	= f1x_map_sysaddr_to_csrow,
+ 			.dbam_to_cs		= f15_m60h_dbam_to_chip_select,
+ 		}
+ 	},
  	[F16_CPUS] = {
  		.ctl_name = "F16h",
  		.f1_id = PCI_DEVICE_ID_AMD_16H_NB_F1,
@@@ -2794,48 -2966,14 +2933,59 @@@ static void remove_one_instance(struct 
   * PCI core identifies what devices are on a system during boot, and then
   * inquiry this table to see if this driver is for a given device found.
   */
++<<<<<<< HEAD
 +static DEFINE_PCI_DEVICE_TABLE(amd64_pci_table) = {
 +	{
 +		.vendor		= PCI_VENDOR_ID_AMD,
 +		.device		= PCI_DEVICE_ID_AMD_K8_NB_MEMCTL,
 +		.subvendor	= PCI_ANY_ID,
 +		.subdevice	= PCI_ANY_ID,
 +		.class		= 0,
 +		.class_mask	= 0,
 +	},
 +	{
 +		.vendor		= PCI_VENDOR_ID_AMD,
 +		.device		= PCI_DEVICE_ID_AMD_10H_NB_DRAM,
 +		.subvendor	= PCI_ANY_ID,
 +		.subdevice	= PCI_ANY_ID,
 +		.class		= 0,
 +		.class_mask	= 0,
 +	},
 +	{
 +		.vendor		= PCI_VENDOR_ID_AMD,
 +		.device		= PCI_DEVICE_ID_AMD_15H_NB_F2,
 +		.subvendor	= PCI_ANY_ID,
 +		.subdevice	= PCI_ANY_ID,
 +		.class		= 0,
 +		.class_mask	= 0,
 +	},
 +	{
 +		.vendor		= PCI_VENDOR_ID_AMD,
 +		.device		= PCI_DEVICE_ID_AMD_15H_M30H_NB_F2,
 +		.subvendor	= PCI_ANY_ID,
 +		.subdevice	= PCI_ANY_ID,
 +		.class		= 0,
 +		.class_mask	= 0,
 +	},
 +	{
 +		.vendor		= PCI_VENDOR_ID_AMD,
 +		.device		= PCI_DEVICE_ID_AMD_16H_NB_F2,
 +		.subvendor	= PCI_ANY_ID,
 +		.subdevice	= PCI_ANY_ID,
 +		.class		= 0,
 +		.class_mask	= 0,
 +	},
 +
++=======
+ static const struct pci_device_id amd64_pci_table[] = {
+ 	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_K8_NB_MEMCTL) },
+ 	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_10H_NB_DRAM) },
+ 	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_15H_NB_F2) },
+ 	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_15H_M30H_NB_F2) },
+ 	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_15H_M60H_NB_F2) },
+ 	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_16H_NB_F2) },
+ 	{ PCI_VDEVICE(AMD, PCI_DEVICE_ID_AMD_16H_M30H_NB_F2) },
++>>>>>>> a597d2a5d982 (amd64_edac: Add F15h M60h support)
  	{0, }
  };
  MODULE_DEVICE_TABLE(pci, amd64_pci_table);
diff --cc drivers/edac/amd64_edac.h
index 6dc1fcc25afb,d8468c667925..000000000000
--- a/drivers/edac/amd64_edac.h
+++ b/drivers/edac/amd64_edac.h
@@@ -162,12 -162,16 +162,14 @@@
  /*
   * PCI-defined configuration space registers
   */
- #define PCI_DEVICE_ID_AMD_15H_M30H_NB_F1 0x141b
- #define PCI_DEVICE_ID_AMD_15H_M30H_NB_F2 0x141c
  #define PCI_DEVICE_ID_AMD_15H_NB_F1	0x1601
  #define PCI_DEVICE_ID_AMD_15H_NB_F2	0x1602
+ #define PCI_DEVICE_ID_AMD_15H_M30H_NB_F1 0x141b
+ #define PCI_DEVICE_ID_AMD_15H_M30H_NB_F2 0x141c
+ #define PCI_DEVICE_ID_AMD_15H_M60H_NB_F1 0x1571
+ #define PCI_DEVICE_ID_AMD_15H_M60H_NB_F2 0x1572
  #define PCI_DEVICE_ID_AMD_16H_NB_F1	0x1531
  #define PCI_DEVICE_ID_AMD_16H_NB_F2	0x1532
 -#define PCI_DEVICE_ID_AMD_16H_M30H_NB_F1 0x1581
 -#define PCI_DEVICE_ID_AMD_16H_M30H_NB_F2 0x1582
  
  /*
   * Function 1 - Address Map
@@@ -299,7 -305,9 +303,8 @@@ enum amd_families 
  	F10_CPUS,
  	F15_CPUS,
  	F15_M30H_CPUS,
+ 	F15_M60H_CPUS,
  	F16_CPUS,
 -	F16_M30H_CPUS,
  	NUM_FAMILIES,
  };
  
@@@ -477,9 -488,8 +485,14 @@@ struct low_ops 
  	int (*early_channel_count)	(struct amd64_pvt *pvt);
  	void (*map_sysaddr_to_csrow)	(struct mem_ctl_info *mci, u64 sys_addr,
  					 struct err_info *);
++<<<<<<< HEAD
 +	int (*dbam_to_cs)		(struct amd64_pvt *pvt, u8 dct, unsigned cs_mode);
 +	int (*read_dct_pci_cfg)		(struct amd64_pvt *pvt, int offset,
 +					 u32 *val, const char *func);
++=======
+ 	int (*dbam_to_cs)		(struct amd64_pvt *pvt, u8 dct,
+ 					 unsigned cs_mode, int cs_mask_nr);
++>>>>>>> a597d2a5d982 (amd64_edac: Add F15h M60h support)
  };
  
  struct amd64_family_type {
* Unmerged path drivers/edac/amd64_edac.c
* Unmerged path drivers/edac/amd64_edac.h
