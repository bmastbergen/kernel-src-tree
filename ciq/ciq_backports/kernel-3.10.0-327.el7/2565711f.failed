perf: Improve the perf_sample_data struct layout

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf] Improve the perf_sample_data struct layout (Jiri Olsa) [1209607]
Rebuild_FUZZ: 93.33%
commit-author Peter Zijlstra <peterz@infradead.org>
commit 2565711fb7d7c28e0cd93c8971b520d1b10b857c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2565711f.failed

This patch reorders fields in the perf_sample_data struct in order to
minimize the number of cachelines touched in perf_sample_data_init().
It also removes some intializations which are redundant with the code
in kernel/events/core.c

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1411559322-16548-7-git-send-email-eranian@google.com
	Cc: cebbert.lkml@gmail.com
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: jolsa@redhat.com
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 2565711fb7d7c28e0cd93c8971b520d1b10b857c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/perf_event.h
diff --cc include/linux/perf_event.h
index 7d06dfb6891c,486e84ccb1f9..000000000000
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@@ -619,15 -613,7 +631,17 @@@ struct perf_sample_data 
  	struct perf_regs		regs_user;
  	struct perf_regs		regs_intr;
  	u64				stack_user_size;
++<<<<<<< HEAD
 +	u64				weight;
 +
 +	/*
 +	 * Transaction flags for abort events:
 +	 */
 +	RH_KABI_EXTEND(u64				txn)
 +};
++=======
+ } ____cacheline_aligned;
++>>>>>>> 2565711fb7d7 (perf: Improve the perf_sample_data struct layout)
  
  /* default value for data source */
  #define PERF_MEM_NA (PERF_MEM_S(OP, NA)   |\
* Unmerged path include/linux/perf_event.h
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 30b7d0bf3ac7..3399c0390312 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -4480,8 +4480,11 @@ static void perf_sample_regs_user(struct perf_regs *regs_user,
 	}
 
 	if (regs) {
-		regs_user->regs = regs;
 		regs_user->abi  = perf_reg_abi(current);
+		regs_user->regs = regs;
+	} else {
+		regs_user->abi = PERF_SAMPLE_REGS_ABI_NONE;
+		regs_user->regs = NULL;
 	}
 }
 
@@ -4956,12 +4959,13 @@ void perf_prepare_sample(struct perf_event_header *header,
 		header->size += size;
 	}
 
+	if (sample_type & (PERF_SAMPLE_REGS_USER | PERF_SAMPLE_STACK_USER))
+		perf_sample_regs_user(&data->regs_user, regs);
+
 	if (sample_type & PERF_SAMPLE_REGS_USER) {
 		/* regs dump ABI info */
 		int size = sizeof(u64);
 
-		perf_sample_regs_user(&data->regs_user, regs);
-
 		if (data->regs_user.regs) {
 			u64 mask = event->attr.sample_regs_user;
 			size += hweight64(mask) * sizeof(u64);
@@ -4977,15 +4981,11 @@ void perf_prepare_sample(struct perf_event_header *header,
 		 * in case new sample type is added, because we could eat
 		 * up the rest of the sample size.
 		 */
-		struct perf_regs *uregs = &data->regs_user;
 		u16 stack_size = event->attr.sample_stack_user;
 		u16 size = sizeof(u64);
 
-		if (!uregs->abi)
-			perf_sample_regs_user(uregs, regs);
-
 		stack_size = perf_sample_ustack_size(stack_size, header->size,
-						     uregs->regs);
+						     data->regs_user.regs);
 
 		/*
 		 * If there is something to dump, add space for the dump
