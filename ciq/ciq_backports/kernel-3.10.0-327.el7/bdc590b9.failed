iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Hariprasad Shenai <hariprasad@chelsio.com>
commit bdc590b99f6002faeb12c1c810cbbf8ac4481f70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/bdc590b9.failed

This patch cleanups all other macros/register define related to
CPL messages that are defined in t4_msg.h and the affected files

	Signed-off-by: Anish Bhatt <anish@chelsio.com>
	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bdc590b99f6002faeb12c1c810cbbf8ac4481f70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/cxgb4/mem.c
#	drivers/net/ethernet/chelsio/cxgb4/l2t.c
#	drivers/net/ethernet/chelsio/cxgb4/sge.c
#	drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
#	drivers/net/ethernet/chelsio/cxgb4vf/sge.c
#	drivers/scsi/csiostor/csio_lnode.c
#	drivers/scsi/csiostor/csio_scsi.c
diff --cc drivers/infiniband/hw/cxgb4/mem.c
index ec7a2988a703,b9dc9fc6be66..000000000000
--- a/drivers/infiniband/hw/cxgb4/mem.c
+++ b/drivers/infiniband/hw/cxgb4/mem.c
@@@ -74,19 -81,19 +74,31 @@@ static int _c4iw_write_mem_dma_aligned(
  	req = (struct ulp_mem_io *)__skb_put(skb, wr_len);
  	memset(req, 0, wr_len);
  	INIT_ULPTX_WR(req, wr_len, 0, 0);
 -	req->wr.wr_hi = cpu_to_be32(FW_WR_OP_V(FW_ULPTX_WR) |
 -			(wait ? FW_WR_COMPL_F : 0));
 +	req->wr.wr_hi = cpu_to_be32(FW_WR_OP(FW_ULPTX_WR) |
 +			(wait ? FW_WR_COMPL(1) : 0));
  	req->wr.wr_lo = wait ? (__force __be64)(unsigned long) &wr_wait : 0L;
++<<<<<<< HEAD
 +	req->wr.wr_mid = cpu_to_be32(FW_WR_LEN16(DIV_ROUND_UP(wr_len, 16)));
 +	req->cmd = cpu_to_be32(ULPTX_CMD(ULP_TX_MEM_WRITE));
 +	req->cmd |= cpu_to_be32(V_T5_ULP_MEMIO_ORDER(1));
 +	req->dlen = cpu_to_be32(ULP_MEMIO_DATA_LEN(len>>5));
++=======
+ 	req->wr.wr_mid = cpu_to_be32(FW_WR_LEN16_V(DIV_ROUND_UP(wr_len, 16)));
+ 	req->cmd = cpu_to_be32(ULPTX_CMD_V(ULP_TX_MEM_WRITE));
+ 	req->cmd |= cpu_to_be32(T5_ULP_MEMIO_ORDER_V(1));
+ 	req->dlen = cpu_to_be32(ULP_MEMIO_DATA_LEN_V(len>>5));
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  	req->len16 = cpu_to_be32(DIV_ROUND_UP(wr_len-sizeof(req->wr), 16));
 -	req->lock_addr = cpu_to_be32(ULP_MEMIO_ADDR_V(addr));
 +	req->lock_addr = cpu_to_be32(ULP_MEMIO_ADDR(addr));
  
  	sgl = (struct ulptx_sgl *)(req + 1);
++<<<<<<< HEAD
 +	sgl->cmd_nsge = cpu_to_be32(ULPTX_CMD(ULP_TX_SC_DSGL) |
 +				    ULPTX_NSGE(1));
++=======
+ 	sgl->cmd_nsge = cpu_to_be32(ULPTX_CMD_V(ULP_TX_SC_DSGL) |
+ 				    ULPTX_NSGE_V(1));
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  	sgl->len0 = cpu_to_be32(len);
  	sgl->addr0 = cpu_to_be64(data);
  
diff --cc drivers/net/ethernet/chelsio/cxgb4/l2t.c
index 96041397ee15,252efc29321f..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/l2t.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/l2t.c
@@@ -150,8 -151,8 +150,13 @@@ static int write_l2e(struct adapter *ad
  
  	OPCODE_TID(req) = htonl(MK_OPCODE_TID(CPL_L2T_WRITE_REQ,
  					e->idx | (sync ? F_SYNC_WR : 0) |
++<<<<<<< HEAD
 +					TID_QID(adap->sge.fw_evtq.abs_id)));
 +	req->params = htons(L2T_W_PORT(e->lport) | L2T_W_NOREPLY(!sync));
++=======
+ 					TID_QID_V(adap->sge.fw_evtq.abs_id)));
+ 	req->params = htons(L2T_W_PORT_V(e->lport) | L2T_W_NOREPLY_V(!sync));
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  	req->l2t_idx = htons(e->idx);
  	req->vlan = htons(e->vlan);
  	if (e->neigh && !(e->neigh->dev->flags & IFF_LOOPBACK))
diff --cc drivers/net/ethernet/chelsio/cxgb4/sge.c
index b5afc3f0dd91,a79fa6a0f5c5..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@@ -816,7 -821,8 +816,12 @@@ static void write_sgl(const struct sk_b
  		sgl->addr0 = cpu_to_be64(addr[1]);
  	}
  
++<<<<<<< HEAD
 +	sgl->cmd_nsge = htonl(ULPTX_CMD(ULP_TX_SC_DSGL) | ULPTX_NSGE(nfrags));
++=======
+ 	sgl->cmd_nsge = htonl(ULPTX_CMD_V(ULP_TX_SC_DSGL) |
+ 			      ULPTX_NSGE_V(nfrags));
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  	if (likely(--nfrags == 0))
  		return;
  	/*
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
index 5f4db2398c71,0fb975e258b3..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
@@@ -810,9 -1024,6 +889,12 @@@ struct ulptx_sge_pair 
  
  struct ulptx_sgl {
  	__be32 cmd_nsge;
++<<<<<<< HEAD
 +#define ULPTX_CMD(x) ((x) << 24)
 +#define ULPTX_NSGE(x) ((x) << 0)
 +#define ULPTX_MORE (1U << 23)
++=======
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  	__be32 len0;
  	__be64 addr0;
  	struct ulptx_sge_pair sge[0];
@@@ -821,21 -1039,34 +910,42 @@@
  struct ulp_mem_io {
  	WR_HDR;
  	__be32 cmd;
 +#define ULP_MEMIO_ORDER(x) ((x) << 23)
  	__be32 len16;             /* command length */
  	__be32 dlen;              /* data length in 32-byte units */
 +#define ULP_MEMIO_DATA_LEN(x) ((x) << 0)
  	__be32 lock_addr;
++<<<<<<< HEAD
 +#define ULP_MEMIO_ADDR(x) ((x) << 0)
 +#define ULP_MEMIO_LOCK(x) ((x) << 31)
 +};
 +
 +#define S_T5_ULP_MEMIO_IMM    23
 +#define V_T5_ULP_MEMIO_IMM(x) ((x) << S_T5_ULP_MEMIO_IMM)
 +#define F_T5_ULP_MEMIO_IMM    V_T5_ULP_MEMIO_IMM(1U)
 +
 +#define S_T5_ULP_MEMIO_ORDER    22
 +#define V_T5_ULP_MEMIO_ORDER(x) ((x) << S_T5_ULP_MEMIO_ORDER)
 +#define F_T5_ULP_MEMIO_ORDER    V_T5_ULP_MEMIO_ORDER(1U)
++=======
+ };
+ 
+ #define ULP_MEMIO_LOCK_S    31
+ #define ULP_MEMIO_LOCK_V(x) ((x) << ULP_MEMIO_LOCK_S)
+ #define ULP_MEMIO_LOCK_F    ULP_MEMIO_LOCK_V(1U)
+ 
+ /* additional ulp_mem_io.cmd fields */
+ #define ULP_MEMIO_ORDER_S    23
+ #define ULP_MEMIO_ORDER_V(x) ((x) << ULP_MEMIO_ORDER_S)
+ #define ULP_MEMIO_ORDER_F    ULP_MEMIO_ORDER_V(1U)
+ 
+ #define T5_ULP_MEMIO_IMM_S    23
+ #define T5_ULP_MEMIO_IMM_V(x) ((x) << T5_ULP_MEMIO_IMM_S)
+ #define T5_ULP_MEMIO_IMM_F    T5_ULP_MEMIO_IMM_V(1U)
+ 
+ #define T5_ULP_MEMIO_ORDER_S    22
+ #define T5_ULP_MEMIO_ORDER_V(x) ((x) << T5_ULP_MEMIO_ORDER_S)
+ #define T5_ULP_MEMIO_ORDER_F    T5_ULP_MEMIO_ORDER_V(1U)
 -
 -/* ulp_mem_io.lock_addr fields */
 -#define ULP_MEMIO_ADDR_S    0
 -#define ULP_MEMIO_ADDR_V(x) ((x) << ULP_MEMIO_ADDR_S)
 -
 -/* ulp_mem_io.dlen fields */
 -#define ULP_MEMIO_DATA_LEN_S    0
 -#define ULP_MEMIO_DATA_LEN_V(x) ((x) << ULP_MEMIO_DATA_LEN_S)
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  
  #endif  /* __T4_MSG_H */
diff --cc drivers/net/ethernet/chelsio/cxgb4vf/sge.c
index 4e4e43e07043,4424277a7e4d..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4vf/sge.c
@@@ -902,8 -925,8 +902,13 @@@ static void write_sgl(const struct sk_b
  		sgl->addr0 = cpu_to_be64(addr[1]);
  	}
  
++<<<<<<< HEAD
 +	sgl->cmd_nsge = htonl(ULPTX_CMD(ULP_TX_SC_DSGL) |
 +			      ULPTX_NSGE(nfrags));
++=======
+ 	sgl->cmd_nsge = htonl(ULPTX_CMD_V(ULP_TX_SC_DSGL) |
+ 			      ULPTX_NSGE_V(nfrags));
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  	if (likely(--nfrags == 0))
  		return;
  	/*
diff --cc drivers/scsi/csiostor/csio_lnode.c
index ffe9be04dc39,c00b2ff72b55..000000000000
--- a/drivers/scsi/csiostor/csio_lnode.c
+++ b/drivers/scsi/csiostor/csio_lnode.c
@@@ -1757,8 -1757,8 +1757,13 @@@ csio_ln_mgmt_submit_wr(struct csio_mgmt
  		csio_wr_copy_to_wrp(pld->vaddr, &wrp, wr_off, im_len);
  	else {
  		/* Program DSGL to dma payload */
++<<<<<<< HEAD
 +		dsgl.cmd_nsge = htonl(ULPTX_CMD(ULP_TX_SC_DSGL) |
 +					ULPTX_MORE | ULPTX_NSGE(1));
++=======
+ 		dsgl.cmd_nsge = htonl(ULPTX_CMD_V(ULP_TX_SC_DSGL) |
+ 					ULPTX_MORE_F | ULPTX_NSGE_V(1));
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  		dsgl.len0 = cpu_to_be32(pld_len);
  		dsgl.addr0 = cpu_to_be64(pld->paddr);
  		csio_wr_copy_to_wrp(&dsgl, &wrp, ALIGN(wr_off, 8),
diff --cc drivers/scsi/csiostor/csio_scsi.c
index 7494e4bc69cc,2c4562d82dc0..000000000000
--- a/drivers/scsi/csiostor/csio_scsi.c
+++ b/drivers/scsi/csiostor/csio_scsi.c
@@@ -322,8 -298,8 +322,13 @@@ csio_scsi_init_ultptx_dsgl(struct csio_
  	struct csio_dma_buf *dma_buf;
  	struct scsi_cmnd *scmnd = csio_scsi_cmnd(req);
  
++<<<<<<< HEAD
 +	sgl->cmd_nsge = htonl(ULPTX_CMD(ULP_TX_SC_DSGL) | ULPTX_MORE |
 +				     ULPTX_NSGE(req->nsge));
++=======
+ 	sgl->cmd_nsge = htonl(ULPTX_CMD_V(ULP_TX_SC_DSGL) | ULPTX_MORE_F |
+ 				     ULPTX_NSGE_V(req->nsge));
++>>>>>>> bdc590b99f60 (iw_cxgb4/cxgb4/cxgb4vf/cxgb4i/csiostor: Cleanup register defines/macros related to all other cpl messages)
  	/* Now add the data SGLs */
  	if (likely(!req->dcopy)) {
  		scsi_for_each_sg(scmnd, sgel, req->nsge, i) {
diff --git a/drivers/infiniband/hw/cxgb4/cm.c b/drivers/infiniband/hw/cxgb4/cm.c
index bd8c0f1864d7..92c83f278b55 100644
--- a/drivers/infiniband/hw/cxgb4/cm.c
+++ b/drivers/infiniband/hw/cxgb4/cm.c
@@ -3495,19 +3495,19 @@ static void build_cpl_pass_accept_req(struct sk_buff *skb, int stid , u8 tos)
 	req = (struct cpl_pass_accept_req *)__skb_push(skb, sizeof(*req));
 	memset(req, 0, sizeof(*req));
 	req->l2info = cpu_to_be16(V_SYN_INTF(intf) |
-			 V_SYN_MAC_IDX(G_RX_MACIDX(
+			 V_SYN_MAC_IDX(RX_MACIDX_G(
 			 (__force int) htonl(l2info))) |
 			 F_SYN_XACT_MATCH);
 	eth_hdr_len = is_t4(dev->rdev.lldi.adapter_type) ?
-			    G_RX_ETHHDR_LEN((__force int) htonl(l2info)) :
-			    G_RX_T5_ETHHDR_LEN((__force int) htonl(l2info));
-	req->hdr_len = cpu_to_be32(V_SYN_RX_CHAN(G_RX_CHAN(
+			    RX_ETHHDR_LEN_G((__force int)htonl(l2info)) :
+			    RX_T5_ETHHDR_LEN_G((__force int)htonl(l2info));
+	req->hdr_len = cpu_to_be32(V_SYN_RX_CHAN(RX_CHAN_G(
 					(__force int) htonl(l2info))) |
-				   V_TCP_HDR_LEN(G_RX_TCPHDR_LEN(
+				   V_TCP_HDR_LEN(RX_TCPHDR_LEN_G(
 					(__force int) htons(hdr_len))) |
-				   V_IP_HDR_LEN(G_RX_IPHDR_LEN(
+				   V_IP_HDR_LEN(RX_IPHDR_LEN_G(
 					(__force int) htons(hdr_len))) |
-				   V_ETH_HDR_LEN(G_RX_ETHHDR_LEN(eth_hdr_len)));
+				   V_ETH_HDR_LEN(RX_ETHHDR_LEN_G(eth_hdr_len)));
 	req->vlan = (__force __be16) vlantag;
 	req->len = (__force __be16) len;
 	req->tos_stid = cpu_to_be32(PASS_OPEN_TID(stid) |
@@ -3607,7 +3607,7 @@ static int rx_pkt(struct c4iw_dev *dev, struct sk_buff *skb)
 	struct neighbour *neigh;
 
 	/* Drop all non-SYN packets */
-	if (!(cpl->l2info & cpu_to_be32(F_RXF_SYN)))
+	if (!(cpl->l2info & cpu_to_be32(RXF_SYN_F)))
 		goto reject;
 
 	/*
@@ -3629,8 +3629,8 @@ static int rx_pkt(struct c4iw_dev *dev, struct sk_buff *skb)
 	}
 
 	eth_hdr_len = is_t4(dev->rdev.lldi.adapter_type) ?
-			    G_RX_ETHHDR_LEN(htonl(cpl->l2info)) :
-			    G_RX_T5_ETHHDR_LEN(htonl(cpl->l2info));
+			    RX_ETHHDR_LEN_G(htonl(cpl->l2info)) :
+			    RX_T5_ETHHDR_LEN_G(htonl(cpl->l2info));
 	if (eth_hdr_len == ETH_HLEN) {
 		eh = (struct ethhdr *)(req + 1);
 		iph = (struct iphdr *)(eh + 1);
* Unmerged path drivers/infiniband/hw/cxgb4/mem.c
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index eacea363ec4e..b549c5a3f6f1 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@ -662,7 +662,7 @@ static void filter_rpl(struct adapter *adap, const struct cpl_set_tcb_rpl *rpl)
 	if (idx >= adap->tids.ftid_base && nidx <
 	   (adap->tids.nftids + adap->tids.nsftids)) {
 		idx = nidx;
-		ret = GET_TCB_COOKIE(rpl->cookie);
+		ret = TCB_COOKIE_G(rpl->cookie);
 		f = &adap->tids.ftid_tab[idx];
 
 		if (ret == FW_FILTER_WR_FLT_DELETED) {
@@ -714,7 +714,7 @@ static int fwevtq_handler(struct sge_rspq *q, const __be64 *rsp,
 
 	if (likely(opcode == CPL_SGE_EGR_UPDATE)) {
 		const struct cpl_sge_egr_update *p = (void *)rsp;
-		unsigned int qid = EGR_QID(ntohl(p->opcode_qid));
+		unsigned int qid = EGR_QID_G(ntohl(p->opcode_qid));
 		struct sge_txq *txq;
 
 		txq = q->adap->sge.egr_map[qid - q->adap->sge.egr_start];
@@ -3480,8 +3480,8 @@ int cxgb4_remove_server(const struct net_device *dev, unsigned int stid,
 	req = (struct cpl_close_listsvr_req *)__skb_put(skb, sizeof(*req));
 	INIT_TP_WR(req, 0);
 	OPCODE_TID(req) = htonl(MK_OPCODE_TID(CPL_CLOSE_LISTSRV_REQ, stid));
-	req->reply_ctrl = htons(NO_REPLY(0) | (ipv6 ? LISTSVR_IPV6(1) :
-				LISTSVR_IPV6(0)) | QUEUENO(queue));
+	req->reply_ctrl = htons(NO_REPLY_V(0) | (ipv6 ? LISTSVR_IPV6_V(1) :
+				LISTSVR_IPV6_V(0)) | QUEUENO_V(queue));
 	ret = t4_mgmt_tx(adap, skb);
 	return net_xmit_eval(ret);
 }
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/l2t.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sge.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_msg.h
diff --git a/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c b/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c
index 0b0c9434b272..b0bba85fa5bb 100644
--- a/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c
@@ -438,7 +438,7 @@ static int fwevtq_handler(struct sge_rspq *rspq, const __be64 *rsp,
 		 * free TX Queue Descriptors ...
 		 */
 		const struct cpl_sge_egr_update *p = cpl;
-		unsigned int qid = EGR_QID(be32_to_cpu(p->opcode_qid));
+		unsigned int qid = EGR_QID_G(be32_to_cpu(p->opcode_qid));
 		struct sge *s = &adapter->sge;
 		struct sge_txq *tq;
 		struct sge_eth_txq *txq;
* Unmerged path drivers/net/ethernet/chelsio/cxgb4vf/sge.c
* Unmerged path drivers/scsi/csiostor/csio_lnode.c
* Unmerged path drivers/scsi/csiostor/csio_scsi.c
diff --git a/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c b/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c
index 626b1b374c9d..d9915982dd7e 100644
--- a/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c
+++ b/drivers/scsi/cxgbi/cxgb4i/cxgb4i.c
@@ -1109,7 +1109,7 @@ static void do_rx_iscsi_hdr(struct cxgbi_device *cdev, struct sk_buff *skb)
 		hlen = ntohs(cpl->len);
 		dlen = ntohl(*(unsigned int *)(bhs + 4)) & 0xFFFFFF;
 
-		plen = ISCSI_PDU_LEN(pdu_len_ddp);
+		plen = ISCSI_PDU_LEN_G(pdu_len_ddp);
 		if (is_t4(lldi->adapter_type))
 			plen -= 40;
 
@@ -1616,7 +1616,7 @@ static int ddp_setup_conn_pgidx(struct cxgbi_sock *csk, unsigned int tid,
 	req = (struct cpl_set_tcb_field *)skb->head;
 	INIT_TP_WR(req, csk->tid);
 	OPCODE_TID(req) = htonl(MK_OPCODE_TID(CPL_SET_TCB_FIELD, csk->tid));
-	req->reply_ctrl = htons(NO_REPLY(reply) | QUEUENO(csk->rss_qid));
+	req->reply_ctrl = htons(NO_REPLY_V(reply) | QUEUENO_V(csk->rss_qid));
 	req->word_cookie = htons(0);
 	req->mask = cpu_to_be64(0x3 << 8);
 	req->val = cpu_to_be64(pg_idx << 8);
@@ -1648,7 +1648,7 @@ static int ddp_setup_conn_digest(struct cxgbi_sock *csk, unsigned int tid,
 	req = (struct cpl_set_tcb_field *)skb->head;
 	INIT_TP_WR(req, tid);
 	OPCODE_TID(req) = htonl(MK_OPCODE_TID(CPL_SET_TCB_FIELD, tid));
-	req->reply_ctrl = htons(NO_REPLY(reply) | QUEUENO(csk->rss_qid));
+	req->reply_ctrl = htons(NO_REPLY_V(reply) | QUEUENO_V(csk->rss_qid));
 	req->word_cookie = htons(0);
 	req->mask = cpu_to_be64(0x3 << 4);
 	req->val = cpu_to_be64(((hcrc ? ULP_CRC_HEADER : 0) |
