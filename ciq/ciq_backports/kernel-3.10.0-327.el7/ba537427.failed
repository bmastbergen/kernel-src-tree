tcp: use ACCESS_ONCE() in tcp_update_pacing_rate()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Eric Dumazet <edumazet@google.com>
commit ba537427d77cf274592f31ce94f4b4cadfad88b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ba537427.failed

sk_pacing_rate is read by sch_fq packet scheduler at any time,
with no synchronization, so make sure we update it in a
sensible way. ACCESS_ONCE() is how we instruct compiler
to not do stupid things, like using the memory location
as a temporary variable.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ba537427d77cf274592f31ce94f4b4cadfad88b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_input.c
diff --cc net/ipv4/tcp_input.c
index ef845c96b4d4,eb651a069a6c..000000000000
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@@ -763,7 -755,12 +763,16 @@@ static void tcp_update_pacing_rate(stru
  	if (tp->srtt > 8 + 2)
  		do_div(rate, tp->srtt);
  
++<<<<<<< HEAD
 +	sk->sk_pacing_rate = min_t(u64, rate, ~0U);
++=======
+ 	/* ACCESS_ONCE() is needed because sch_fq fetches sk_pacing_rate
+ 	 * without any lock. We want to make sure compiler wont store
+ 	 * intermediate values in this location.
+ 	 */
+ 	ACCESS_ONCE(sk->sk_pacing_rate) = min_t(u64, rate,
+ 						sk->sk_max_pacing_rate);
++>>>>>>> ba537427d77c (tcp: use ACCESS_ONCE() in tcp_update_pacing_rate())
  }
  
  /* Calculate rto without backoff.  This is the second half of Van Jacobson's
* Unmerged path net/ipv4/tcp_input.c
