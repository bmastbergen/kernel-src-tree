crypto: nx - fix nx-842 pSeries driver minimum buffer size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [crypto] nx - fix nx-842 pSeries driver minimum buffer size (Gustavo Duarte) [1221925]
Rebuild_FUZZ: 92.59%
commit-author Dan Streetman <ddstreet@ieee.org>
commit 3154de71258a32040214fda174e67b975b0810ef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3154de71.failed

Reduce the nx-842 pSeries driver minimum buffer size from 128 to 8.
Also replace the single use of IO_BUFFER_ALIGN macro with the standard
and correct DDE_BUFFER_ALIGN.

The hw sometimes rejects buffers that contain padding past the end of the
8-byte aligned section where it sees the "end" marker.  With the minimum
buffer size set too high, some highly compressed buffers were being padded
and the hw was incorrectly rejecting them; this sets the minimum correctly
so there will be no incorrect padding.

	Signed-off-by: Dan Streetman <ddstreet@ieee.org>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 3154de71258a32040214fda174e67b975b0810ef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/nx/nx-842-pseries.c
diff --cc drivers/crypto/nx/nx-842-pseries.c
index 502edf0a2933,41bc551ccaf3..000000000000
--- a/drivers/crypto/nx/nx-842-pseries.c
+++ b/drivers/crypto/nx/nx-842-pseries.c
@@@ -37,26 -30,59 +37,34 @@@ MODULE_LICENSE("GPL")
  MODULE_AUTHOR("Robert Jennings <rcj@linux.vnet.ibm.com>");
  MODULE_DESCRIPTION("842 H/W Compression driver for IBM Power processors");
  
++<<<<<<< HEAD
 +#define SHIFT_4K 12
 +#define SHIFT_64K 16
 +#define SIZE_4K (1UL << SHIFT_4K)
 +#define SIZE_64K (1UL << SHIFT_64K)
 +
 +/* IO buffer must be 128 byte aligned */
 +#define IO_BUFFER_ALIGN 128
 +
 +struct nx842_header {
 +	int blocks_nr; /* number of compressed blocks */
 +	int offset; /* offset of the first block (from beginning of header) */
 +	int sizes[0]; /* size of compressed blocks */
++=======
+ static struct nx842_constraints nx842_pseries_constraints = {
+ 	.alignment =	DDE_BUFFER_ALIGN,
+ 	.multiple =	DDE_BUFFER_LAST_MULT,
+ 	.minimum =	DDE_BUFFER_LAST_MULT,
+ 	.maximum =	PAGE_SIZE, /* dynamic, max_sync_size */
++>>>>>>> 3154de71258a (crypto: nx - fix nx-842 pSeries driver minimum buffer size)
  };
  
 -static int check_constraints(unsigned long buf, unsigned int *len, bool in)
 +static inline int nx842_header_size(const struct nx842_header *hdr)
  {
 -	if (!IS_ALIGNED(buf, nx842_pseries_constraints.alignment)) {
 -		pr_debug("%s buffer 0x%lx not aligned to 0x%x\n",
 -			 in ? "input" : "output", buf,
 -			 nx842_pseries_constraints.alignment);
 -		return -EINVAL;
 -	}
 -	if (*len % nx842_pseries_constraints.multiple) {
 -		pr_debug("%s buffer len 0x%x not multiple of 0x%x\n",
 -			 in ? "input" : "output", *len,
 -			 nx842_pseries_constraints.multiple);
 -		if (in)
 -			return -EINVAL;
 -		*len = round_down(*len, nx842_pseries_constraints.multiple);
 -	}
 -	if (*len < nx842_pseries_constraints.minimum) {
 -		pr_debug("%s buffer len 0x%x under minimum 0x%x\n",
 -			 in ? "input" : "output", *len,
 -			 nx842_pseries_constraints.minimum);
 -		return -EINVAL;
 -	}
 -	if (*len > nx842_pseries_constraints.maximum) {
 -		pr_debug("%s buffer len 0x%x over maximum 0x%x\n",
 -			 in ? "input" : "output", *len,
 -			 nx842_pseries_constraints.maximum);
 -		if (in)
 -			return -EINVAL;
 -		*len = nx842_pseries_constraints.maximum;
 -	}
 -	return 0;
 +	return sizeof(struct nx842_header) +
 +			hdr->blocks_nr * sizeof(hdr->sizes[0]);
  }
  
 -/* I assume we need to align the CSB? */
 -#define WORKMEM_ALIGN	(256)
 -
 -struct nx842_workmem {
 -	/* scatterlist */
 -	char slin[4096];
 -	char slout[4096];
 -	/* coprocessor status/parameter block */
 -	struct nx_csbcpb csbcpb;
 -
 -	char padding[WORKMEM_ALIGN];
 -} __aligned(WORKMEM_ALIGN);
 -
  /* Macros for fields within nx_csbcpb */
  /* Check the valid bit within the csbcpb valid field */
  #define NX842_CSBCBP_VALID_CHK(x) (x & BIT_MASK(7))
* Unmerged path drivers/crypto/nx/nx-842-pseries.c
