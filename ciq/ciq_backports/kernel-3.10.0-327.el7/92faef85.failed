i40e: Set defport behavior for the Main VSI when in promiscuous mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Anjali Singhai Jain <anjali.singhai@intel.com>
commit 92faef85613d6d56803ad6130f6daf4a803deddc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/92faef85.failed

This fixes bugs where the port is not receiving multicast or VLAN tagged
packets when in promiscuous mode. This can occur when a SW bridge is
created on top of the device.

This also fixes issues where the promiscuous behavior setting was not
being preserved across a reset caused by features being enabled or
disabled.

We are using defport instead of doing a true promiscuous mode because we do
not need to receive the SRIOV or VMDq VSI directed traffic which would suck
up bandwidth and is really not intended for the SW bridge.

In addition, with defport we get VLAN promiscuous behavior which is not
possible from the VSI level promiscuous setting.

Change-ID: Ie21985eac32d5af1c02e9d71c6430a90d5bab40f
	Signed-off-by: Anjali Singhai Jain <anjali.singhai@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 92faef85613d6d56803ad6130f6daf4a803deddc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index cd6f468170b8,851c1a159be8..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -1867,20 -1937,44 +1867,56 @@@ int i40e_sync_vsi_filters(struct i40e_v
  		cur_promisc = (!!(vsi->current_netdev_flags & IFF_PROMISC) ||
  			       test_bit(__I40E_FILTER_OVERFLOW_PROMISC,
  					&vsi->state));
++<<<<<<< HEAD
 +		aq_ret = i40e_aq_set_vsi_unicast_promiscuous(&vsi->back->hw,
 +							     vsi->seid,
 +							     cur_promisc, NULL);
 +		if (aq_ret)
 +			dev_info(&pf->pdev->dev,
 +				 "set uni promisc failed, err %d, aq_err %d\n",
 +				 aq_ret, pf->hw.aq.asq_last_status);
 +		aq_ret = i40e_aq_set_vsi_broadcast(&vsi->back->hw,
 +						   vsi->seid,
 +						   cur_promisc, NULL);
 +		if (aq_ret)
++=======
+ 		if (vsi->type == I40E_VSI_MAIN && pf->lan_veb != I40E_NO_VEB) {
+ 			/* set defport ON for Main VSI instead of true promisc
+ 			 * this way we will get all unicast/multicast and VLAN
+ 			 * promisc behavior but will not get VF or VMDq traffic
+ 			 * replicated on the Main VSI.
+ 			 */
+ 			if (pf->cur_promisc != cur_promisc) {
+ 				pf->cur_promisc = cur_promisc;
+ 				i40e_do_reset_safe(pf,
+ 						BIT(__I40E_PF_RESET_REQUESTED));
+ 			}
+ 		} else {
+ 			ret = i40e_aq_set_vsi_unicast_promiscuous(
+ 							  &vsi->back->hw,
+ 							  vsi->seid,
+ 							  cur_promisc, NULL);
+ 			if (ret)
+ 				dev_info(&pf->pdev->dev,
+ 					 "set unicast promisc failed, err %d, aq_err %d\n",
+ 					 ret, pf->hw.aq.asq_last_status);
+ 			ret = i40e_aq_set_vsi_multicast_promiscuous(
+ 							  &vsi->back->hw,
+ 							  vsi->seid,
+ 							  cur_promisc, NULL);
+ 			if (ret)
+ 				dev_info(&pf->pdev->dev,
+ 					 "set multicast promisc failed, err %d, aq_err %d\n",
+ 					 ret, pf->hw.aq.asq_last_status);
+ 		}
+ 		ret = i40e_aq_set_vsi_broadcast(&vsi->back->hw,
+ 						vsi->seid,
+ 						cur_promisc, NULL);
+ 		if (ret)
++>>>>>>> 92faef85613d (i40e: Set defport behavior for the Main VSI when in promiscuous mode)
  			dev_info(&pf->pdev->dev,
 -				 "set brdcast promisc failed, err %s, aq_err %s\n",
 -				 i40e_stat_str(&pf->hw, ret),
 -				 i40e_aq_str(&pf->hw,
 -					     pf->hw.aq.asq_last_status));
 +				 "set brdcast promisc failed, err %d, aq_err %d\n",
 +				 aq_ret, pf->hw.aq.asq_last_status);
  	}
  
  	clear_bit(__I40E_CONFIG_BUSY, &vsi->state);
@@@ -9049,7 -9332,8 +9086,12 @@@ void i40e_veb_release(struct i40e_veb *
   **/
  static int i40e_add_veb(struct i40e_veb *veb, struct i40e_vsi *vsi)
  {
++<<<<<<< HEAD
 +	bool is_default = false;
++=======
+ 	struct i40e_pf *pf = veb->pf;
+ 	bool is_default = veb->pf->cur_promisc;
++>>>>>>> 92faef85613d (i40e: Set defport behavior for the Main VSI when in promiscuous mode)
  	bool is_cloud = false;
  	int ret;
  
diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index 11601b91991b..12df36cc06b2 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -363,6 +363,7 @@ struct i40e_pf {
 #ifdef CONFIG_DEBUG_FS
 	struct dentry *i40e_dbg_pf;
 #endif /* CONFIG_DEBUG_FS */
+	bool cur_promisc;
 
 	u16 instance; /* A unique number per i40e_pf instance in the system */
 
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
