md: use set_bit/clear_bit instead of shift/mask for bi_flags changes.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [md] use set_bit/clear_bit instead of shift/mask for bi_flags changes (Jes Sorensen) [1150149 1173510 1194720]
Rebuild_FUZZ: 96.24%
commit-author NeilBrown <neilb@suse.de>
commit 3fd83717e47687817f5d3e45696bf22456d8b422
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3fd83717.failed

Using {set,clear}_bit is more consistent than shifting and masking.

No functional change.

	Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 3fd83717e47687817f5d3e45696bf22456d8b422)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid1.c
#	drivers/md/raid10.c
diff --cc drivers/md/raid1.c
index c59775d9cb89,019aa1840210..000000000000
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@@ -2714,8 -2721,8 +2714,13 @@@ static sector_t sync_request(struct mdd
  							continue;
  						/* remove last page from this bio */
  						bio->bi_vcnt--;
++<<<<<<< HEAD
 +						bio->bi_size -= len;
 +						bio->bi_flags &= ~(1<< BIO_SEG_VALID);
++=======
+ 						bio->bi_iter.bi_size -= len;
+ 						__clear_bit(BIO_SEG_VALID, &bio->bi_flags);
++>>>>>>> 3fd83717e476 (md: use set_bit/clear_bit instead of shift/mask for bi_flags changes.)
  					}
  					goto bio_full;
  				}
diff --cc drivers/md/raid10.c
index e353571d33c5,a2788bcf75b2..000000000000
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@@ -3399,8 -3387,8 +3399,13 @@@ static sector_t sync_request(struct mdd
  			     bio2 = bio2->bi_next) {
  				/* remove last page from this bio */
  				bio2->bi_vcnt--;
++<<<<<<< HEAD
 +				bio2->bi_size -= len;
 +				bio2->bi_flags &= ~(1<< BIO_SEG_VALID);
++=======
+ 				bio2->bi_iter.bi_size -= len;
+ 				__clear_bit(BIO_SEG_VALID, &bio2->bi_flags);
++>>>>>>> 3fd83717e476 (md: use set_bit/clear_bit instead of shift/mask for bi_flags changes.)
  			}
  			goto bio_full;
  		}
@@@ -4428,9 -4416,9 +4433,9 @@@ read_more
  	read_bio->bi_end_io = end_sync_read;
  	read_bio->bi_rw = READ;
  	read_bio->bi_flags &= (~0UL << BIO_RESET_BITS);
- 	read_bio->bi_flags |= 1 << BIO_UPTODATE;
+ 	__set_bit(BIO_UPTODATE, &read_bio->bi_flags);
  	read_bio->bi_vcnt = 0;
 -	read_bio->bi_iter.bi_size = 0;
 +	read_bio->bi_size = 0;
  	r10_bio->master_bio = read_bio;
  	r10_bio->read_slot = r10_bio->devs[r10_bio->read_slot].devnum;
  
@@@ -4483,8 -4472,8 +4488,13 @@@
  			     bio2 = bio2->bi_next) {
  				/* Remove last page from this bio */
  				bio2->bi_vcnt--;
++<<<<<<< HEAD
 +				bio2->bi_size -= len;
 +				bio2->bi_flags &= ~(1<<BIO_SEG_VALID);
++=======
+ 				bio2->bi_iter.bi_size -= len;
+ 				__clear_bit(BIO_SEG_VALID, &bio2->bi_flags);
++>>>>>>> 3fd83717e476 (md: use set_bit/clear_bit instead of shift/mask for bi_flags changes.)
  			}
  			goto bio_full;
  		}
* Unmerged path drivers/md/raid1.c
* Unmerged path drivers/md/raid10.c
diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index 955bd8de769b..f0c97b572863 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -4295,7 +4295,7 @@ static int chunk_aligned_read(struct mddev *mddev, struct bio * raid_bio)
 		rcu_read_unlock();
 		raid_bio->bi_next = (void*)rdev;
 		align_bi->bi_bdev =  rdev->bdev;
-		align_bi->bi_flags &= ~(1 << BIO_SEG_VALID);
+		__clear_bit(BIO_SEG_VALID, &align_bi->bi_flags);
 
 		if (!bio_fits_rdev(align_bi) ||
 		    is_badblock(rdev, align_bi->bi_sector, bio_sectors(align_bi),
