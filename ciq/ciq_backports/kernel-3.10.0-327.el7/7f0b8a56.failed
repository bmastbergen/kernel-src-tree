cxgb4: Fix MC1 memory offset calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Hariprasad Shenai <hariprasad@chelsio.com>
commit 7f0b8a56c978b0a3315ac84c6cbb065413afb8e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7f0b8a56.failed

Commit 6559a7e8296002b4 ("cxgb4: Cleanup macros so they follow the same
style and look consistent") introduced a regression where reading MC1
memory in adapters where MC0 isn't present or MC0 size is not equal to MC1
size caused the adapter to crash due to incorrect computation of memoffset.
Fix is to read the size of MC0 instead of MC1 for offset calculation

	Signed-off-by: Steve Wise <swise@opengridcomputing.com>
	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7f0b8a56c978b0a3315ac84c6cbb065413afb8e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
index 4234b8c917e7,e8578a742f2a..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
@@@ -490,8 -491,8 +490,13 @@@ int t4_memory_rw(struct adapter *adap, 
  	if (mtype != MEM_MC1)
  		memoffset = (mtype * (edc_size * 1024 * 1024));
  	else {
++<<<<<<< HEAD
 +		mc_size = EXT_MEM_SIZE_GET(t4_read_reg(adap,
 +						       MA_EXT_MEMORY_BAR));
++=======
+ 		mc_size = EXT_MEM0_SIZE_G(t4_read_reg(adap,
+ 						      MA_EXT_MEMORY0_BAR_A));
++>>>>>>> 7f0b8a56c978 (cxgb4: Fix MC1 memory offset calculation)
  		memoffset = (MEM_MC0 * edc_size + mc_size) * 1024 * 1024;
  	}
  
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
