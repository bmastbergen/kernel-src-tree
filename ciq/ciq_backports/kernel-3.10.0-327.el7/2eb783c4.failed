tun: Fix TUN_PKT_STRIP setting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit 2eb783c43e7cf807a45899c10ed556b6dc116625
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2eb783c4.failed

We set the flag TUN_PKT_STRIP if the user buffer provided is too
small to contain the entire packet plus meta-data.  However, this
has been broken ever since we added GSO meta-data.  VLAN acceleration
also has the same problem.

This patch fixes this by taking both into account when setting the
TUN_PKT_STRIP flag.

The fact that this has been broken for six years without anyone
realising means that nobody actually uses this flag.

Fixes: f43798c27684 ("tun: Allow GSO using virtio_net_hdr")
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2eb783c43e7cf807a45899c10ed556b6dc116625)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/tun.c
diff --cc drivers/net/tun.c
index 5e36119f8ef6,9dd3746994a4..000000000000
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@@ -1274,12 -1233,16 +1274,25 @@@ static ssize_t tun_put_user(struct tun_
  			    const struct iovec *iv, int len)
  {
  	struct tun_pi pi = { 0, skb->protocol };
++<<<<<<< HEAD
 +	struct {
 +		__be16 h_vlan_proto;
 +		__be16 h_vlan_TCI;
 +	} veth;
 +	ssize_t total = 0, off = 0;
 +	int vlan_offset = 0;
++=======
+ 	ssize_t total = 0;
+ 	int vlan_offset = 0, copied;
+ 	int vlan_hlen = 0;
+ 	int vnet_hdr_sz = 0;
+ 
+ 	if (vlan_tx_tag_present(skb))
+ 		vlan_hlen = VLAN_HLEN;
++>>>>>>> 2eb783c43e7c (tun: Fix TUN_PKT_STRIP setting)
+ 
+ 	if (tun->flags & TUN_VNET_HDR)
+ 		vnet_hdr_sz = tun->vnet_hdr_sz;
  
  	if (!(tun->flags & TUN_NO_PI)) {
  		if ((len -= sizeof(pi)) < 0)
@@@ -1340,14 -1302,18 +1353,14 @@@
  		if (unlikely(memcpy_toiovecend(iv, (void *)&gso, total,
  					       sizeof(gso))))
  			return -EFAULT;
- 		total += tun->vnet_hdr_sz;
+ 		total += vnet_hdr_sz;
  	}
  
 -	copied = total;
 -	len = min_t(int, skb->len + vlan_hlen, len);
 -	total += skb->len + vlan_hlen;
 -	if (vlan_hlen) {
 +	off = total;
 +	if (!vlan_tx_tag_present(skb)) {
 +		len = min_t(int, skb->len, len);
 +	} else {
  		int copy, ret;
 -		struct {
 -			__be16 h_vlan_proto;
 -			__be16 h_vlan_TCI;
 -		} veth;
  
  		veth.h_vlan_proto = skb->vlan_proto;
  		veth.h_vlan_TCI = htons(vlan_tx_tag_get(skb));
* Unmerged path drivers/net/tun.c
