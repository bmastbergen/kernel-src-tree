scsi: use 'bool' as return value for scsi_normalize_sense()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [scsi] use 'bool' as return value for scsi_normalize_sense() (Ewan Milne) [1124082]
Rebuild_FUZZ: 94.64%
commit-author Hannes Reinecke <hare@suse.de>
commit 4753cbc0a1286a60d2f859a7056f8e4873f494c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/4753cbc0.failed

Convert scsi_normalize_sense() and friends to return 'bool'
instead of an integer.

	Signed-off-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Robert Elliott <elliott@hp.com>
	Reviewed-by: Yoshihiro Yunomae <yoshihiro.yunomae.ez@hitachi.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 4753cbc0a1286a60d2f859a7056f8e4873f494c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/scsi/scsi_eh.h
diff --cc include/scsi/scsi_eh.h
index 06a8790893ef,256248141322..000000000000
--- a/include/scsi/scsi_eh.h
+++ b/include/scsi/scsi_eh.h
@@@ -42,12 -42,12 +42,16 @@@ extern void scsi_eh_flush_done_q(struc
  extern void scsi_report_bus_reset(struct Scsi_Host *, int);
  extern void scsi_report_device_reset(struct Scsi_Host *, int, int);
  extern int scsi_block_when_processing_errors(struct scsi_device *);
- extern int scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
- 		struct scsi_sense_hdr *sshdr);
- extern int scsi_command_normalize_sense(struct scsi_cmnd *cmd,
- 		struct scsi_sense_hdr *sshdr);
+ extern bool scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
+ 				 struct scsi_sense_hdr *sshdr);
+ extern bool scsi_command_normalize_sense(const struct scsi_cmnd *cmd,
+ 					 struct scsi_sense_hdr *sshdr);
  
++<<<<<<< HEAD
 +static inline int scsi_sense_is_deferred(struct scsi_sense_hdr *sshdr)
++=======
+ static inline bool scsi_sense_is_deferred(const struct scsi_sense_hdr *sshdr)
++>>>>>>> 4753cbc0a128 (scsi: use 'bool' as return value for scsi_normalize_sense())
  {
  	return ((sshdr->response_code >= 0x70) && (sshdr->response_code & 1));
  }
diff --git a/drivers/scsi/scsi_error.c b/drivers/scsi/scsi_error.c
index 4ad9c19ca10c..5d5ac20908a0 100644
--- a/drivers/scsi/scsi_error.c
+++ b/drivers/scsi/scsi_error.c
@@ -2408,20 +2408,20 @@ EXPORT_SYMBOL(scsi_reset_provider);
  *	responded to a SCSI command with the CHECK_CONDITION status.
  *
  * Return value:
- *	1 if valid sense data information found, else 0;
+ *	true if valid sense data information found, else false;
  */
-int scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
-                         struct scsi_sense_hdr *sshdr)
+bool scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
+			  struct scsi_sense_hdr *sshdr)
 {
 	if (!sense_buffer || !sb_len)
-		return 0;
+		return false;
 
 	memset(sshdr, 0, sizeof(struct scsi_sense_hdr));
 
 	sshdr->response_code = (sense_buffer[0] & 0x7f);
 
 	if (!scsi_sense_valid(sshdr))
-		return 0;
+		return false;
 
 	if (sshdr->response_code >= 0x72) {
 		/*
@@ -2451,12 +2451,12 @@ int scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
 		}
 	}
 
-	return 1;
+	return true;
 }
 EXPORT_SYMBOL(scsi_normalize_sense);
 
-int scsi_command_normalize_sense(struct scsi_cmnd *cmd,
-				 struct scsi_sense_hdr *sshdr)
+bool scsi_command_normalize_sense(const struct scsi_cmnd *cmd,
+				  struct scsi_sense_hdr *sshdr)
 {
 	return scsi_normalize_sense(cmd->sense_buffer,
 			SCSI_SENSE_BUFFERSIZE, sshdr);
diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index 2eb9f5889dec..a56c0805d9ea 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -683,7 +683,7 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 	struct request *req = cmd->request;
 	int error = 0;
 	struct scsi_sense_hdr sshdr;
-	int sense_valid = 0;
+	bool sense_valid = false;
 	int sense_deferred = 0;
 	enum {ACTION_FAIL, ACTION_REPREP, ACTION_RETRY,
 	      ACTION_DELAYED_RETRY} action;
* Unmerged path include/scsi/scsi_eh.h
