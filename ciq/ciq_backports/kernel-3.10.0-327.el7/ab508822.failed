ovl: improve mount helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Miklos Szeredi <mszeredi@suse.cz>
commit ab508822cab4c84f07373cd6ad107a1fd1362831
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ab508822.failed

Move common checks into ovl_mount_dir() helper.

Create helper for looking up lower directories.

	Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
(cherry picked from commit ab508822cab4c84f07373cd6ad107a1fd1362831)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/super.c
diff --cc fs/overlayfs/super.c
index ab28e68ccbc7,592370ff453a..000000000000
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@@ -664,9 -773,8 +711,14 @@@ static int ovl_fill_super(struct super_
  	struct dentry *root_dentry;
  	struct ovl_entry *oe;
  	struct ovl_fs *ufs;
++<<<<<<< HEAD
 +	struct kstatfs statfs;
 +	const int *upper_stack_depth, *lower_stack_depth;
 +	int *overlay_stack_depth;
++=======
+ 	struct vfsmount *mnt;
+ 	unsigned int i;
++>>>>>>> ab508822cab4 (ovl: improve mount helpers)
  	int err;
  
  	err = -ENOMEM;
@@@ -686,72 -794,34 +738,88 @@@
  		goto out_free_config;
  	}
  
 -	err = ovl_mount_dir(ufs->config.upperdir, &upperpath);
 -	if (err)
 +	err = -ENOMEM;
 +	oe = ovl_alloc_entry();
 +	if (oe == NULL)
  		goto out_free_config;
  
 -	err = ovl_mount_dir(ufs->config.workdir, &workpath);
 +	err = ovl_mount_dir(ufs->config.upperdir, &upperpath);
  	if (err)
 -		goto out_put_upperpath;
 +		goto out_free_oe;
  
- 	err = ovl_mount_dir(ufs->config.lowerdir, &lowerpath);
+ 	if (upperpath.mnt != workpath.mnt) {
+ 		pr_err("overlayfs: workdir and upperdir must reside under the same mount\n");
+ 		goto out_put_workpath;
+ 	}
+ 	if (!ovl_workdir_ok(workpath.dentry, upperpath.dentry)) {
+ 		pr_err("overlayfs: workdir and upperdir must be separate subtrees\n");
+ 		goto out_put_workpath;
+ 	}
+ 	sb->s_stack_depth = upperpath.mnt->mnt_sb->s_stack_depth;
+ 
+ 	err = ovl_lower_dir(ufs->config.lowerdir, &lowerpath,
+ 			    &ufs->lower_namelen, &sb->s_stack_depth);
  	if (err)
 +		goto out_put_upperpath;
 +
 +	err = ovl_mount_dir(ufs->config.workdir, &workpath);
 +	if (err)
 +		goto out_put_lowerpath;
 +
 +	err = -EINVAL;
++<<<<<<< HEAD
 +	if (!S_ISDIR(upperpath.dentry->d_inode->i_mode) ||
 +	    !S_ISDIR(lowerpath.dentry->d_inode->i_mode) ||
 +	    !S_ISDIR(workpath.dentry->d_inode->i_mode)) {
 +		pr_err("overlayfs: upperdir or lowerdir or workdir not a directory\n");
  		goto out_put_workpath;
 +	}
 +
 +	if (upperpath.mnt != workpath.mnt) {
 +		pr_err("overlayfs: workdir and upperdir must reside under the same mount\n");
 +		goto out_put_workpath;
 +	}
 +	if (!ovl_workdir_ok(workpath.dentry, upperpath.dentry)) {
 +		pr_err("overlayfs: workdir and upperdir must be separate subtrees\n");
 +		goto out_put_workpath;
 +	}
 +
 +	if (!ovl_is_allowed_fs_type(upperpath.dentry)) {
 +		pr_err("overlayfs: filesystem of upperdir is not supported\n");
 +		goto out_put_workpath;
 +	}
 +
 +	if (!ovl_is_allowed_fs_type(lowerpath.dentry)) {
 +		pr_err("overlayfs: filesystem of lowerdir is not supported\n");
 +		goto out_put_workpath;
 +	}
 +
 +	err = vfs_statfs(&lowerpath, &statfs);
 +	if (err) {
 +		pr_err("overlayfs: statfs failed on lowerpath\n");
 +		goto out_put_workpath;
 +	}
 +	ufs->lower_namelen = statfs.f_namelen;
 +
 +	upper_stack_depth = get_s_stack_depth(upperpath.mnt->mnt_sb);
 +	lower_stack_depth = get_s_stack_depth(lowerpath.mnt->mnt_sb);
 +	overlay_stack_depth = get_s_stack_depth(sb);
 +	err = -EOPNOTSUPP;
 +	if (!upper_stack_depth || !lower_stack_depth || !overlay_stack_depth) {
 +		pr_err("overlayfs: superblock missing extension wrapper (old kernel?)\n");
 +		goto out_put_workpath;
 +	}
 +
 +	*overlay_stack_depth = max(*upper_stack_depth, *lower_stack_depth) + 1;
  
  	err = -EINVAL;
 +	if (*overlay_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
++=======
+ 	sb->s_stack_depth++;
+ 	if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
++>>>>>>> ab508822cab4 (ovl: improve mount helpers)
  		pr_err("overlayfs: maximum fs stacking depth exceeded\n");
 -		goto out_put_lowerpath;
 +		goto out_put_workpath;
  	}
  
  	ufs->upper_mnt = clone_private_mount(&upperpath);
* Unmerged path fs/overlayfs/super.c
