bonding: convert 3ad to use pr_warn instead of pr_warning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Veaceslav Falico <vfalico@redhat.com>
commit ed3587fa5c4f822f5b9d6505c29788c223b75310
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ed3587fa.failed

CC: Jay Vosburgh <fubar@us.ibm.com>
CC: Andy Gospodarek <andy@greyhouse.net>
	Signed-off-by: Veaceslav Falico <vfalico@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ed3587fa5c4f822f5b9d6505c29788c223b75310)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_3ad.c
diff --cc drivers/net/bonding/bond_3ad.c
index dc508c87249d,7118eef5a7b7..000000000000
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@@ -1312,15 -1314,18 +1312,27 @@@ static void ad_port_selection_logic(str
  				break;
  			}
  		}
++<<<<<<< HEAD
 +		if (!curr_port) { // meaning: the port was related to an aggregator but was not on the aggregator port list
 +			pr_warning("%s: Warning: Port %d (on %s) was related to aggregator %d but was not on its port list\n",
 +				   port->slave->bond->dev->name,
 +				   port->actor_port_number,
 +				   port->slave->dev->name,
 +				   port->aggregator->aggregator_identifier);
++=======
+ 		if (!curr_port) {
+ 			/* meaning: the port was related to an aggregator
+ 			 * but was not on the aggregator port list
+ 			 */
+ 			pr_warn("%s: Warning: Port %d (on %s) was related to aggregator %d but was not on its port list\n",
+ 				port->slave->bond->dev->name,
+ 				port->actor_port_number,
+ 				port->slave->dev->name,
+ 				port->aggregator->aggregator_identifier);
++>>>>>>> ed3587fa5c4f (bonding: convert 3ad to use pr_warn instead of pr_warning)
  		}
  	}
 -	/* search on all aggregators for a suitable aggregator for this port */
 +	// search on all aggregators for a suitable aggregator for this port
  	bond_for_each_slave(bond, slave, iter) {
  		aggregator = &(SLAVE_AD_INFO(slave).aggregator);
  
@@@ -1580,10 -1592,11 +1592,16 @@@ static void ad_agg_selection_logic(stru
  				 agg->is_individual, agg->is_active);
  		}
  
 -		/* check if any partner replys */
 +		// check if any partner replys
  		if (best->is_individual) {
++<<<<<<< HEAD
 +			pr_warning("%s: Warning: No 802.3ad response from the link partner for any adapters in the bond\n",
 +				   best->slave ? best->slave->bond->dev->name : "NULL");
++=======
+ 			pr_warn("%s: Warning: No 802.3ad response from the link partner for any adapters in the bond\n",
+ 				best->slave ?
+ 				best->slave->bond->dev->name : "NULL");
++>>>>>>> ed3587fa5c4f (bonding: convert 3ad to use pr_warn instead of pr_warning)
  		}
  
  		best->is_active = 1;
@@@ -1966,16 -1981,13 +1984,16 @@@ void bond_3ad_unbind_slave(struct slav
  	struct slave *slave_iter;
  	struct list_head *iter;
  
 +	// find the aggregator related to this slave
  	aggregator = &(SLAVE_AD_INFO(slave).aggregator);
 +
 +	// find the port related to this slave
  	port = &(SLAVE_AD_INFO(slave).port);
  
 -	/* if slave is null, the whole port is not initialized */
 +	// if slave is null, the whole port is not initialized
  	if (!port->slave) {
- 		pr_warning("Warning: %s: Trying to unbind an uninitialized port on %s\n",
- 			   slave->bond->dev->name, slave->dev->name);
+ 		pr_warn("Warning: %s: Trying to unbind an uninitialized port on %s\n",
+ 			slave->bond->dev->name, slave->dev->name);
  		return;
  	}
  
@@@ -2043,12 -2064,14 +2061,12 @@@
  				if (select_new_active_agg)
  					ad_agg_selection_logic(__get_first_agg(port));
  			} else {
- 				pr_warning("%s: Warning: unbinding aggregator, and could not find a new aggregator for its ports\n",
- 					   slave->bond->dev->name);
+ 				pr_warn("%s: Warning: unbinding aggregator, and could not find a new aggregator for its ports\n",
+ 					slave->bond->dev->name);
  			}
 -		} else {
 -			/* in case that the only port related to this
 -			 * aggregator is the one we want to remove
 -			 */
 +		} else { // in case that the only port related to this aggregator is the one we want to remove
  			select_new_active_agg = aggregator->is_active;
 +			// clear the aggregator
  			ad_clear_agg(aggregator);
  			if (select_new_active_agg) {
  				pr_info("%s: Removing an active aggregator\n",
@@@ -2111,24 -2137,29 +2129,24 @@@ void bond_3ad_state_machine_handler(str
  {
  	struct bonding *bond = container_of(work, struct bonding,
  					    ad_work.work);
 -	struct aggregator *aggregator;
 -	struct list_head *iter;
 -	struct slave *slave;
  	struct port *port;
 +	struct aggregator *aggregator;
  
 -	read_lock(&bond->lock);
 -	rcu_read_lock();
 -
 -	/* check if there are any slaves */
 -	if (!bond_has_slaves(bond))
 +	if (!rtnl_trylock()) {
 +		queue_delayed_work(bond->wq, &bond->ad_work, ad_delta_in_ticks);
 +		return;
 +	}
 +	//check if there are any slaves
 +	if (bond->slave_cnt == 0)
  		goto re_arm;
  
 -	/* check if agg_select_timer timer after initialize is timed out */
 -	if (BOND_AD_INFO(bond).agg_select_timer &&
 -	    !(--BOND_AD_INFO(bond).agg_select_timer)) {
 -		slave = bond_first_slave_rcu(bond);
 -		port = slave ? &(SLAVE_AD_INFO(slave).port) : NULL;
 -
 -		/* select the active aggregator for the bond */
 -		if (port) {
 +	// check if agg_select_timer timer after initialize is timed out
 +	if (BOND_AD_INFO(bond).agg_select_timer && !(--BOND_AD_INFO(bond).agg_select_timer)) {
 +		// select the active aggregator for the bond
 +		if ((port = __get_first_port(bond))) {
  			if (!port->slave) {
- 				pr_warning("%s: Warning: bond's first port is uninitialized\n",
- 					   bond->dev->name);
+ 				pr_warn("%s: Warning: bond's first port is uninitialized\n",
+ 					bond->dev->name);
  				goto re_arm;
  			}
  
@@@ -2138,11 -2169,12 +2156,11 @@@
  		bond_3ad_set_carrier(bond);
  	}
  
 -	/* for each port run the state machines */
 -	bond_for_each_slave_rcu(bond, slave, iter) {
 -		port = &(SLAVE_AD_INFO(slave).port);
 +	// for each port run the state machines
 +	for (port = __get_first_port(bond); port; port = __get_next_port(port)) {
  		if (!port->slave) {
- 			pr_warning("%s: Warning: Found an uninitialized port\n",
- 				   bond->dev->name);
+ 			pr_warn("%s: Warning: Found an uninitialized port\n",
+ 				bond->dev->name);
  			goto re_arm;
  		}
  
* Unmerged path drivers/net/bonding/bond_3ad.c
