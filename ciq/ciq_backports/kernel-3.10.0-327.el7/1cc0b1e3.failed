bonding: add all_slaves_active attribute netlink support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author sfeldma@cumulusnetworks.com <sfeldma@cumulusnetworks.com>
commit 1cc0b1e30c662d84a89690f42826cf49e2278b97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/1cc0b1e3.failed

Add IFLA_BOND_ALL_SLAVES_ACTIVE to allow get/set of bonding parameter
all_slaves_active via netlink.

	Signed-off-by: Scott Feldman <sfeldma@cumulusnetworks.com>
	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1cc0b1e30c662d84a89690f42826cf49e2278b97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bond_sysfs.c
#	drivers/net/bonding/bonding.h
#	include/uapi/linux/if_link.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,517521569adf..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -23,6 -24,21 +23,24 @@@
  static const struct nla_policy bond_policy[IFLA_BOND_MAX + 1] = {
  	[IFLA_BOND_MODE]		= { .type = NLA_U8 },
  	[IFLA_BOND_ACTIVE_SLAVE]	= { .type = NLA_U32 },
++<<<<<<< HEAD
++=======
+ 	[IFLA_BOND_MIIMON]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_UPDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_DOWNDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_USE_CARRIER]		= { .type = NLA_U8 },
+ 	[IFLA_BOND_ARP_INTERVAL]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_ARP_IP_TARGET]	= { .type = NLA_NESTED },
+ 	[IFLA_BOND_ARP_VALIDATE]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_ARP_ALL_TARGETS]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_PRIMARY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_PRIMARY_RESELECT]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_FAIL_OVER_MAC]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_XMIT_HASH_POLICY]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_RESEND_IGMP]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_NUM_PEER_NOTIF]	= { .type = NLA_U8 },
+ 	[IFLA_BOND_ALL_SLAVES_ACTIVE]	= { .type = NLA_U8 },
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  };
  
  static int bond_validate(struct nlattr *tb[], struct nlattr *data[])
@@@ -65,6 -85,144 +83,147 @@@ static int bond_changelink(struct net_d
  		if (err)
  			return err;
  	}
++<<<<<<< HEAD
++=======
+ 	if (data[IFLA_BOND_MIIMON]) {
+ 		miimon = nla_get_u32(data[IFLA_BOND_MIIMON]);
+ 
+ 		err = bond_option_miimon_set(bond, miimon);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_UPDELAY]) {
+ 		int updelay = nla_get_u32(data[IFLA_BOND_UPDELAY]);
+ 
+ 		err = bond_option_updelay_set(bond, updelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_DOWNDELAY]) {
+ 		int downdelay = nla_get_u32(data[IFLA_BOND_DOWNDELAY]);
+ 
+ 		err = bond_option_downdelay_set(bond, downdelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_USE_CARRIER]) {
+ 		int use_carrier = nla_get_u8(data[IFLA_BOND_USE_CARRIER]);
+ 
+ 		err = bond_option_use_carrier_set(bond, use_carrier);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_INTERVAL]) {
+ 		int arp_interval = nla_get_u32(data[IFLA_BOND_ARP_INTERVAL]);
+ 
+ 		if (arp_interval && miimon) {
+ 			pr_err("%s: ARP monitoring cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		err = bond_option_arp_interval_set(bond, arp_interval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_IP_TARGET]) {
+ 		__be32 targets[BOND_MAX_ARP_TARGETS] = { 0, };
+ 		struct nlattr *attr;
+ 		int i = 0, rem;
+ 
+ 		nla_for_each_nested(attr, data[IFLA_BOND_ARP_IP_TARGET], rem) {
+ 			__be32 target = nla_get_be32(attr);
+ 			targets[i++] = target;
+ 		}
+ 
+ 		err = bond_option_arp_ip_targets_set(bond, targets, i);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_VALIDATE]) {
+ 		int arp_validate = nla_get_u32(data[IFLA_BOND_ARP_VALIDATE]);
+ 
+ 		if (arp_validate && miimon) {
+ 			pr_err("%s: ARP validating cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		err = bond_option_arp_validate_set(bond, arp_validate);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_ALL_TARGETS]) {
+ 		int arp_all_targets =
+ 			nla_get_u32(data[IFLA_BOND_ARP_ALL_TARGETS]);
+ 
+ 		err = bond_option_arp_all_targets_set(bond, arp_all_targets);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY]) {
+ 		int ifindex = nla_get_u32(data[IFLA_BOND_PRIMARY]);
+ 		struct net_device *dev;
+ 		char *primary = "";
+ 
+ 		dev = __dev_get_by_index(dev_net(bond_dev), ifindex);
+ 		if (dev)
+ 			primary = dev->name;
+ 
+ 		err = bond_option_primary_set(bond, primary);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY_RESELECT]) {
+ 		int primary_reselect =
+ 			nla_get_u8(data[IFLA_BOND_PRIMARY_RESELECT]);
+ 
+ 		err = bond_option_primary_reselect_set(bond, primary_reselect);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_FAIL_OVER_MAC]) {
+ 		int fail_over_mac =
+ 			nla_get_u8(data[IFLA_BOND_FAIL_OVER_MAC]);
+ 
+ 		err = bond_option_fail_over_mac_set(bond, fail_over_mac);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_XMIT_HASH_POLICY]) {
+ 		int xmit_hash_policy =
+ 			nla_get_u8(data[IFLA_BOND_XMIT_HASH_POLICY]);
+ 
+ 		err = bond_option_xmit_hash_policy_set(bond, xmit_hash_policy);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_RESEND_IGMP]) {
+ 		int resend_igmp =
+ 			nla_get_u32(data[IFLA_BOND_RESEND_IGMP]);
+ 
+ 		err = bond_option_resend_igmp_set(bond, resend_igmp);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_NUM_PEER_NOTIF]) {
+ 		int num_peer_notif =
+ 			nla_get_u8(data[IFLA_BOND_NUM_PEER_NOTIF]);
+ 
+ 		err = bond_option_num_peer_notif_set(bond, num_peer_notif);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ALL_SLAVES_ACTIVE]) {
+ 		int all_slaves_active =
+ 			nla_get_u8(data[IFLA_BOND_ALL_SLAVES_ACTIVE]);
+ 
+ 		err = bond_option_all_slaves_active_set(bond,
+ 							all_slaves_active);
+ 		if (err)
+ 			return err;
+ 	}
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  	return 0;
  }
  
@@@ -83,7 -241,24 +242,28 @@@ static int bond_newlink(struct net *src
  static size_t bond_get_size(const struct net_device *bond_dev)
  {
  	return nla_total_size(sizeof(u8)) +	/* IFLA_BOND_MODE */
++<<<<<<< HEAD
 +		nla_total_size(sizeof(u32));	/* IFLA_BOND_ACTIVE_SLAVE */
++=======
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ACTIVE_SLAVE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIIMON */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_UPDELAY */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_DOWNDELAY */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_USE_CARRIER */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_INTERVAL */
+ 						/* IFLA_BOND_ARP_IP_TARGET */
+ 		nla_total_size(sizeof(u32)) * BOND_MAX_ARP_TARGETS +
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_VALIDATE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_ALL_TARGETS */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_PRIMARY */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_PRIMARY_RESELECT */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_FAIL_OVER_MAC */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_XMIT_HASH_POLICY */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_RESEND_IGMP */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_NUM_PEER_NOTIF */
+ 		nla_total_size(sizeof(u8)) +   /* IFLA_BOND_ALL_SLAVES_ACTIVE */
+ 		0;
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  }
  
  static int bond_fill_info(struct sk_buff *skb,
@@@ -91,11 -266,86 +271,89 @@@
  {
  	struct bonding *bond = netdev_priv(bond_dev);
  	struct net_device *slave_dev = bond_option_active_slave_get(bond);
 -	struct nlattr *targets;
 -	int i, targets_added;
  
 -	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode))
 +	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode) ||
 +	    (slave_dev &&
 +	     nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex)))
  		goto nla_put_failure;
++<<<<<<< HEAD
++=======
+ 
+ 	if (slave_dev &&
+ 	    nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIIMON, bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_UPDELAY,
+ 			bond->params.updelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_DOWNDELAY,
+ 			bond->params.downdelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_USE_CARRIER, bond->params.use_carrier))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_INTERVAL, bond->params.arp_interval))
+ 		goto nla_put_failure;
+ 
+ 	targets = nla_nest_start(skb, IFLA_BOND_ARP_IP_TARGET);
+ 	if (!targets)
+ 		goto nla_put_failure;
+ 
+ 	targets_added = 0;
+ 	for (i = 0; i < BOND_MAX_ARP_TARGETS; i++) {
+ 		if (bond->params.arp_targets[i]) {
+ 			nla_put_be32(skb, i, bond->params.arp_targets[i]);
+ 			targets_added = 1;
+ 		}
+ 	}
+ 
+ 	if (targets_added)
+ 		nla_nest_end(skb, targets);
+ 	else
+ 		nla_nest_cancel(skb, targets);
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_VALIDATE, bond->params.arp_validate))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_ALL_TARGETS,
+ 			bond->params.arp_all_targets))
+ 		goto nla_put_failure;
+ 
+ 	if (bond->primary_slave &&
+ 	    nla_put_u32(skb, IFLA_BOND_PRIMARY,
+ 			bond->primary_slave->dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_PRIMARY_RESELECT,
+ 		       bond->params.primary_reselect))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_FAIL_OVER_MAC,
+ 		       bond->params.fail_over_mac))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_XMIT_HASH_POLICY,
+ 		       bond->params.xmit_policy))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_RESEND_IGMP,
+ 		        bond->params.resend_igmp))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_NUM_PEER_NOTIF,
+ 		       bond->params.num_peer_notif))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_ALL_SLAVES_ACTIVE,
+ 		       bond->params.all_slaves_active))
+ 		goto nla_put_failure;
+ 
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  	return 0;
  
  nla_put_failure:
diff --cc drivers/net/bonding/bond_sysfs.c
index 9519d678a368,9a3712513932..000000000000
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@@ -1621,40 -1289,23 +1621,42 @@@ static ssize_t bonding_store_slaves_act
  					   struct device_attribute *attr,
  					   const char *buf, size_t count)
  {
 +	int i, new_value, ret = count;
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
 +	struct slave *slave;
++=======
+ 	int new_value, ret;
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  
  	if (sscanf(buf, "%d", &new_value) != 1) {
  		pr_err("%s: no all_slaves_active value specified.\n",
  		       bond->dev->name);
- 		ret = -EINVAL;
- 		goto out;
+ 		return -EINVAL;
  	}
  
- 	if (new_value == bond->params.all_slaves_active)
- 		goto out;
+ 	if (!rtnl_trylock())
+ 		return restart_syscall();
  
- 	if ((new_value == 0) || (new_value == 1)) {
- 		bond->params.all_slaves_active = new_value;
- 	} else {
- 		pr_info("%s: Ignoring invalid all_slaves_active value %d.\n",
- 			bond->dev->name, new_value);
- 		ret = -EINVAL;
- 		goto out;
- 	}
+ 	ret = bond_option_all_slaves_active_set(bond, new_value);
+ 	if (!ret)
+ 		ret = count;
  
++<<<<<<< HEAD
 +	read_lock(&bond->lock);
 +	bond_for_each_slave(bond, slave, i) {
 +		if (!bond_is_active_slave(slave)) {
 +			if (new_value)
 +				slave->inactive = 0;
 +			else
 +				slave->inactive = 1;
 +		}
 +	}
 +	read_unlock(&bond->lock);
 +out:
++=======
+ 	rtnl_unlock();
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  	return ret;
  }
  static DEVICE_ATTR(all_slaves_active, S_IRUGO | S_IWUSR,
diff --cc drivers/net/bonding/bonding.h
index 743d73f75728,3701e7d1fb16..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -442,6 -441,31 +442,34 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ int bond_option_mode_set(struct bonding *bond, int mode);
+ int bond_option_active_slave_set(struct bonding *bond, struct net_device *slave_dev);
+ int bond_option_miimon_set(struct bonding *bond, int miimon);
+ int bond_option_updelay_set(struct bonding *bond, int updelay);
+ int bond_option_downdelay_set(struct bonding *bond, int downdelay);
+ int bond_option_use_carrier_set(struct bonding *bond, int use_carrier);
+ int bond_option_arp_interval_set(struct bonding *bond, int arp_interval);
+ int bond_option_arp_ip_targets_set(struct bonding *bond, __be32 *targets,
+ 				   int count);
+ int bond_option_arp_ip_target_add(struct bonding *bond, __be32 target);
+ int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target);
+ int bond_option_arp_validate_set(struct bonding *bond, int arp_validate);
+ int bond_option_arp_all_targets_set(struct bonding *bond, int arp_all_targets);
+ int bond_option_primary_set(struct bonding *bond, const char *primary);
+ int bond_option_primary_reselect_set(struct bonding *bond,
+ 				     int primary_reselect);
+ int bond_option_fail_over_mac_set(struct bonding *bond, int fail_over_mac);
+ int bond_option_xmit_hash_policy_set(struct bonding *bond,
+ 				     int xmit_hash_policy);
+ int bond_option_resend_igmp_set(struct bonding *bond, int resend_igmp);
+ int bond_option_num_peer_notif_set(struct bonding *bond, int num_peer_notif);
+ int bond_option_all_slaves_active_set(struct bonding *bond,
+ 				      int all_slaves_active);
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
diff --cc include/uapi/linux/if_link.h
index 4efe6bcb6e67,93e9c1b99f7a..000000000000
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@@ -340,6 -331,21 +340,24 @@@ enum 
  	IFLA_BOND_UNSPEC,
  	IFLA_BOND_MODE,
  	IFLA_BOND_ACTIVE_SLAVE,
++<<<<<<< HEAD
++=======
+ 	IFLA_BOND_MIIMON,
+ 	IFLA_BOND_UPDELAY,
+ 	IFLA_BOND_DOWNDELAY,
+ 	IFLA_BOND_USE_CARRIER,
+ 	IFLA_BOND_ARP_INTERVAL,
+ 	IFLA_BOND_ARP_IP_TARGET,
+ 	IFLA_BOND_ARP_VALIDATE,
+ 	IFLA_BOND_ARP_ALL_TARGETS,
+ 	IFLA_BOND_PRIMARY,
+ 	IFLA_BOND_PRIMARY_RESELECT,
+ 	IFLA_BOND_FAIL_OVER_MAC,
+ 	IFLA_BOND_XMIT_HASH_POLICY,
+ 	IFLA_BOND_RESEND_IGMP,
+ 	IFLA_BOND_NUM_PEER_NOTIF,
+ 	IFLA_BOND_ALL_SLAVES_ACTIVE,
++>>>>>>> 1cc0b1e30c66 (bonding: add all_slaves_active attribute netlink support)
  	__IFLA_BOND_MAX,
  };
  
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_sysfs.c
* Unmerged path drivers/net/bonding/bonding.h
* Unmerged path include/uapi/linux/if_link.h
