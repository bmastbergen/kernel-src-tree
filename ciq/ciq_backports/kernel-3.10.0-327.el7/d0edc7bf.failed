mpls: Fix config check for mpls.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] mpls: Fix config check for mpls (Jiri Benc) [1156461 1211348]
Rebuild_FUZZ: 98.41%
commit-author Pravin B Shelar <pshelar@nicira.com>
commit d0edc7bf397a5e0f312bf8a1e87cfee0019dc07b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d0edc7bf.failed

Fixes MPLS GSO for case when mpls is compiled as kernel module.

Fixes: 0d89d2035f ("MPLS: Add limited GSO support").
	Signed-off-by: Pravin B Shelar <pshelar@nicira.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d0edc7bf397a5e0f312bf8a1e87cfee0019dc07b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 883bfd5aec6c,67b6210a589a..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -2414,51 -2519,27 +2414,64 @@@ static int illegal_highdma(struct net_d
  	return 0;
  }
  
++<<<<<<< HEAD
 +struct dev_gso_cb {
 +	void (*destructor)(struct sk_buff *skb);
 +};
++=======
+ /* If MPLS offload request, verify we are testing hardware MPLS features
+  * instead of standard features for the netdev.
+  */
+ #if IS_ENABLED(CONFIG_NET_MPLS_GSO)
+ static netdev_features_t net_mpls_features(struct sk_buff *skb,
+ 					   netdev_features_t features,
+ 					   __be16 type)
+ {
+ 	if (eth_p_mpls(type))
+ 		features &= skb->dev->mpls_features;
++>>>>>>> d0edc7bf397a (mpls: Fix config check for mpls.)
  
 -	return features;
 +#define DEV_GSO_CB(skb) ((struct dev_gso_cb *)(skb)->cb)
 +
 +static void dev_gso_skb_destructor(struct sk_buff *skb)
 +{
 +	struct dev_gso_cb *cb;
 +
 +	kfree_skb_list(skb->next);
 +	skb->next = NULL;
 +
 +	cb = DEV_GSO_CB(skb);
 +	if (cb->destructor)
 +		cb->destructor(skb);
  }
 -#else
 -static netdev_features_t net_mpls_features(struct sk_buff *skb,
 -					   netdev_features_t features,
 -					   __be16 type)
 +
 +/**
 + *	dev_gso_segment - Perform emulated hardware segmentation on skb.
 + *	@skb: buffer to segment
 + *	@features: device features as applicable to this skb
 + *
 + *	This function segments the given skb and stores the list of segments
 + *	in skb->next.
 + */
 +static int dev_gso_segment(struct sk_buff *skb, netdev_features_t features)
  {
 -	return features;
 +	struct sk_buff *segs;
 +
 +	segs = skb_gso_segment(skb, features);
 +
 +	/* Verifying header integrity only. */
 +	if (!segs)
 +		return 0;
 +
 +	if (IS_ERR(segs))
 +		return PTR_ERR(segs);
 +
 +	skb->next = segs;
 +	DEV_GSO_CB(skb)->destructor = skb->destructor;
 +	skb->destructor = dev_gso_skb_destructor;
 +
 +	return 0;
  }
 -#endif
  
  static netdev_features_t harmonize_features(struct sk_buff *skb,
  	netdev_features_t features)
* Unmerged path net/core/dev.c
