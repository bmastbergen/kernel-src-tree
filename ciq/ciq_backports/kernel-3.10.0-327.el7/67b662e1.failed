ACPI / video: seperate backlight control and event interface

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [acpi] video: seperate backlight control and event interface (Benjamin Tissoires) [1218354]
Rebuild_FUZZ: 93.81%
commit-author Aaron Lu <aaron.lu@intel.com>
commit 67b662e189f469c6d373f81d76b0ef0495940e99
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/67b662e1.failed

The backlight control and event delivery functionality provided by ACPI
video module is mixed together and registered all during video device
enumeration time. As a result, the two functionality are also removed
together on module unload time or by the acpi_video_unregister function.
The two functionalities are actually independent and one may be useful
while the other one may be broken, so it is desirable to seperate the
two functionalities such that it is clear and easy to disable one
functionality without affecting the other one.

APIs to selectively remove backlight control interface and/or event
delivery functionality can be easily added once needed.

	Signed-off-by: Aaron Lu <aaron.lu@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 67b662e189f469c6d373f81d76b0ef0495940e99)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/video.c
diff --cc drivers/acpi/video.c
index 63e8923aaa29,3bd1eaa4ef90..000000000000
--- a/drivers/acpi/video.c
+++ b/drivers/acpi/video.c
@@@ -86,7 -88,9 +86,13 @@@ module_param(allow_duplicates, bool, 06
  static bool use_bios_initial_backlight = 1;
  module_param(use_bios_initial_backlight, bool, 0644);
  
++<<<<<<< HEAD
 +static int register_count = 0;
++=======
+ static int register_count;
+ static struct mutex video_list_lock;
+ static struct list_head video_bus_head;
++>>>>>>> 67b662e189f4 (ACPI / video: seperate backlight control and event interface)
  static int acpi_video_bus_add(struct acpi_device *device);
  static int acpi_video_bus_remove(struct acpi_device *device);
  static void acpi_video_bus_notify(struct acpi_device *device, u32 event);
@@@ -884,79 -887,6 +891,82 @@@ static void acpi_video_device_find_cap(
  
  	if (acpi_has_method(device->dev->handle, "_DDC"))
  		device->cap._DDC = 1;
++<<<<<<< HEAD
 +
 +	if (acpi_video_backlight_support()) {
 +		struct backlight_properties props;
 +		struct pci_dev *pdev;
 +		acpi_handle acpi_parent;
 +		struct device *parent = NULL;
 +		int result;
 +		static int count = 0;
 +		char *name;
 +
 +		result = acpi_video_init_brightness(device);
 +		if (result)
 +			return;
 +		name = kasprintf(GFP_KERNEL, "acpi_video%d", count);
 +		if (!name)
 +			return;
 +		count++;
 +
 +		acpi_get_parent(device->dev->handle, &acpi_parent);
 +
 +		pdev = acpi_get_pci_dev(acpi_parent);
 +		if (pdev) {
 +			parent = &pdev->dev;
 +			pci_dev_put(pdev);
 +		}
 +
 +		memset(&props, 0, sizeof(struct backlight_properties));
 +		props.type = BACKLIGHT_FIRMWARE;
 +		props.max_brightness = device->brightness->count - 3;
 +		device->backlight = backlight_device_register(name,
 +							      parent,
 +							      device,
 +							      &acpi_backlight_ops,
 +							      &props);
 +		kfree(name);
 +		if (IS_ERR(device->backlight))
 +			return;
 +
 +		/*
 +		 * Save current brightness level in case we have to restore it
 +		 * before acpi_video_device_lcd_set_level() is called next time.
 +		 */
 +		device->backlight->props.brightness =
 +				acpi_video_get_brightness(device->backlight);
 +
 +		device->cooling_dev = thermal_cooling_device_register("LCD",
 +					device->dev, &video_cooling_ops);
 +		if (IS_ERR(device->cooling_dev)) {
 +			/*
 +			 * Set cooling_dev to NULL so we don't crash trying to
 +			 * free it.
 +			 * Also, why the hell we are returning early and
 +			 * not attempt to register video output if cooling
 +			 * device registration failed?
 +			 * -- dtor
 +			 */
 +			device->cooling_dev = NULL;
 +			return;
 +		}
 +
 +		dev_info(&device->dev->dev, "registered as cooling_device%d\n",
 +			 device->cooling_dev->id);
 +		result = sysfs_create_link(&device->dev->dev.kobj,
 +				&device->cooling_dev->device.kobj,
 +				"thermal_cooling");
 +		if (result)
 +			printk(KERN_ERR PREFIX "Create sysfs link\n");
 +		result = sysfs_create_link(&device->cooling_dev->device.kobj,
 +				&device->dev->dev.kobj, "device");
 +		if (result)
 +			printk(KERN_ERR PREFIX "Create sysfs link\n");
 +
 +	}
++=======
++>>>>>>> 67b662e189f4 (ACPI / video: seperate backlight control and event interface)
  }
  
  /*
* Unmerged path drivers/acpi/video.c
