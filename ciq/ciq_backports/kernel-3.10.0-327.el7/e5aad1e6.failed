powerpc/powernv/ioda2: Rework iommu_table creation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [powerpc] powernv/ioda2: Rework iommu_table creation (David Gibson) [1213665]
Rebuild_FUZZ: 91.30%
commit-author Alexey Kardashevskiy <aik@ozlabs.ru>
commit e5aad1e678746af663e3e3acc7f3501309997f51
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e5aad1e6.failed

This moves iommu_table creation to the beginning to make following changes
easier to review. This starts using table parameters from the iommu_table
struct.

This should cause no behavioural change.

	Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
	Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
	Reviewed-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit e5aad1e678746af663e3e3acc7f3501309997f51)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/pci-ioda.c
diff --cc arch/powerpc/platforms/powernv/pci-ioda.c
index 109e90d84e34,feaba5ecfa97..000000000000
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@@ -856,32 -2094,27 +866,46 @@@ static void pnv_pci_ioda2_setup_dma_pe(
  		goto fail;
  	}
  
++<<<<<<< HEAD
 +	/* Setup linux iommu table */
 +	tbl = &pe->tce32_table;
 +	pnv_pci_setup_iommu_table(tbl, addr, tce_table_size, 0,
 +			IOMMU_PAGE_SHIFT_4K);
 +
 +	/* OPAL variant of PHB3 invalidated TCEs */
 +	swinvp = of_get_property(phb->hose->dn, "ibm,opal-tce-kill", NULL);
 +	if (swinvp) {
 +		/* We need a couple more fields -- an address and a data
 +		 * to or.  Since the bus is only printed out on table free
 +		 * errors, and on the first pass the data will be a relative
 +		 * bus number, print that out instead.
++=======
+ 	pnv_pci_ioda2_tce_invalidate_entire(pe);
+ 
+ 	/* OPAL variant of PHB3 invalidated TCEs */
+ 	if (phb->ioda.tce_inval_reg)
+ 		tbl->it_type |= (TCE_PCI_SWINV_CREATE | TCE_PCI_SWINV_FREE);
+ 
+ 	if (pe->flags & PNV_IODA_PE_DEV) {
+ 		/*
+ 		 * Setting table base here only for carrying iommu_group
+ 		 * further down to let iommu_add_device() do the job.
+ 		 * pnv_pci_ioda_dma_dev_setup will override it later anyway.
++>>>>>>> e5aad1e67874 (powerpc/powernv/ioda2: Rework iommu_table creation)
  		 */
 -		set_iommu_table_base(&pe->pdev->dev, tbl);
 -		iommu_add_device(&pe->pdev->dev);
 -	} else if (pe->flags & (PNV_IODA_PE_BUS | PNV_IODA_PE_BUS_ALL))
 -		pnv_ioda_setup_bus_dma(pe, pe->pbus);
 +		tbl->it_index = (unsigned long)ioremap(be64_to_cpup(swinvp), 8);
 +		tbl->it_type |= (TCE_PCI_SWINV_CREATE | TCE_PCI_SWINV_FREE);
 +	}
 +	iommu_init_table(tbl, phb->hose->node);
 +	iommu_register_group(tbl, phb->hose->global_number, pe->pe_number);
  
 -	/* Also create a bypass window */
 -	if (!pnv_iommu_bypass_disabled)
 -		pnv_pci_ioda2_set_bypass(pe, true);
 +	if (pe->pdev)
 +		set_iommu_table_base_and_group(&pe->pdev->dev, tbl);
 +	else
 +		pnv_ioda_setup_bus_dma(pe, pe->pbus, true);
  
 +	/* Also create a bypass window */
 +	pnv_pci_ioda2_setup_bypass_pe(phb, pe);
  	return;
  fail:
  	if (pe->tce32_seg >= 0)
* Unmerged path arch/powerpc/platforms/powernv/pci-ioda.c
