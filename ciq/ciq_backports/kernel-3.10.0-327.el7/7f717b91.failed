Revert "Bluetooth: Remove rfcomm_carrier_raised()"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Peter Hurley <peter@hurleysoftware.com>
commit 7f717b91dd68db1fa01d396d03997ed1b748659f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7f717b91.failed

This reverts commit f86772af6a0f643d3e13eb3f4f9213ae0c333ee4.

This is the first of a 3-patch revert, together with
Revert "Bluetooth: Always wait for a connection on RFCOMM open()" and
Revert "Bluetooth: Move rfcomm_get_device() before rfcomm_dev_activate()".

Commit 4a2fb3ecc7467c775b154813861f25a0ddc11aa0,
"Bluetooth: Always wait for a connection on RFCOMM open()" open-codes
blocking on tty open(), rather than using the default behavior
implemented by the tty port.

The reasons for reverting that patch are detailed in that changelog;
this patch restores required functionality for that revert.

	Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
Tested-By: Alexander Holler <holler@ahsoftware.de>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 7f717b91dd68db1fa01d396d03997ed1b748659f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/rfcomm/tty.c
diff --cc net/bluetooth/rfcomm/tty.c
index 62bd75eda078,aeabadeef82b..000000000000
--- a/net/bluetooth/rfcomm/tty.c
+++ b/net/bluetooth/rfcomm/tty.c
@@@ -104,8 -104,86 +104,87 @@@ static void rfcomm_dev_destruct(struct 
  	module_put(THIS_MODULE);
  }
  
++<<<<<<< HEAD
++=======
+ static struct device *rfcomm_get_device(struct rfcomm_dev *dev)
+ {
+ 	struct hci_dev *hdev;
+ 	struct hci_conn *conn;
+ 
+ 	hdev = hci_get_route(&dev->dst, &dev->src);
+ 	if (!hdev)
+ 		return NULL;
+ 
+ 	conn = hci_conn_hash_lookup_ba(hdev, ACL_LINK, &dev->dst);
+ 
+ 	hci_dev_put(hdev);
+ 
+ 	return conn ? &conn->dev : NULL;
+ }
+ 
+ /* device-specific initialization: open the dlc */
+ static int rfcomm_dev_activate(struct tty_port *port, struct tty_struct *tty)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 	DEFINE_WAIT(wait);
+ 	int err;
+ 
+ 	err = rfcomm_dlc_open(dev->dlc, &dev->src, &dev->dst, dev->channel);
+ 	if (err)
+ 		return err;
+ 
+ 	while (1) {
+ 		prepare_to_wait(&dev->conn_wait, &wait, TASK_INTERRUPTIBLE);
+ 
+ 		if (dev->dlc->state == BT_CLOSED) {
+ 			err = -dev->err;
+ 			break;
+ 		}
+ 
+ 		if (dev->dlc->state == BT_CONNECTED)
+ 			break;
+ 
+ 		if (signal_pending(current)) {
+ 			err = -ERESTARTSYS;
+ 			break;
+ 		}
+ 
+ 		tty_unlock(tty);
+ 		schedule();
+ 		tty_lock(tty);
+ 	}
+ 	finish_wait(&dev->conn_wait, &wait);
+ 
+ 	if (!err)
+ 		device_move(dev->tty_dev, rfcomm_get_device(dev),
+ 			    DPM_ORDER_DEV_AFTER_PARENT);
+ 
+ 	return err;
+ }
+ 
+ /* we block the open until the dlc->state becomes BT_CONNECTED */
+ static int rfcomm_dev_carrier_raised(struct tty_port *port)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	return (dev->dlc->state == BT_CONNECTED);
+ }
+ 
+ /* device-specific cleanup: close the dlc */
+ static void rfcomm_dev_shutdown(struct tty_port *port)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	if (dev->tty_dev->parent)
+ 		device_move(dev->tty_dev, NULL, DPM_ORDER_DEV_LAST);
+ 
+ 	/* close the dlc */
+ 	rfcomm_dlc_close(dev->dlc, 0);
+ }
+ 
++>>>>>>> 7f717b91dd68 (Revert "Bluetooth: Remove rfcomm_carrier_raised()")
  static const struct tty_port_operations rfcomm_port_ops = {
  	.destruct = rfcomm_dev_destruct,
 -	.activate = rfcomm_dev_activate,
 -	.shutdown = rfcomm_dev_shutdown,
  };
  
  static struct rfcomm_dev *__rfcomm_dev_get(int id)
* Unmerged path net/bluetooth/rfcomm/tty.c
