shm: add memfd_create() syscall

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author David Herrmann <dh.herrmann@gmail.com>
commit 9183df25fe7b194563db3fec6dc3202a5855839c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9183df25.failed

memfd_create() is similar to mmap(MAP_ANON), but returns a file-descriptor
that you can pass to mmap().  It can support sealing and avoids any
connection to user-visible mount-points.  Thus, it's not subject to quotas
on mounted file-systems, but can be used like malloc()'ed memory, but with
a file-descriptor to it.

memfd_create() returns the raw shmem file, so calls like ftruncate() can
be used to modify the underlying inode.  Also calls like fstat() will
return proper information and mark the file as regular file.  If you want
sealing, you can specify MFD_ALLOW_SEALING.  Otherwise, sealing is not
supported (like on all other regular files).

Compared to O_TMPFILE, it does not require a tmpfs mount-point and is not
subject to a filesystem size limit.  It is still properly accounted to
memcg limits, though, and to the same overcommit or no-overcommit
accounting as all user memory.

	Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
	Acked-by: Hugh Dickins <hughd@google.com>
	Cc: Michael Kerrisk <mtk.manpages@gmail.com>
	Cc: Ryan Lortie <desrt@desrt.ca>
	Cc: Lennart Poettering <lennart@poettering.net>
	Cc: Daniel Mack <zonque@gmail.com>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9183df25fe7b194563db3fec6dc3202a5855839c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/syscalls/syscall_32.tbl
#	arch/x86/syscalls/syscall_64.tbl
#	mm/shmem.c
diff --cc arch/x86/syscalls/syscall_32.tbl
index aabfb8380a1c,028b78168d85..000000000000
--- a/arch/x86/syscalls/syscall_32.tbl
+++ b/arch/x86/syscalls/syscall_32.tbl
@@@ -357,3 -357,9 +357,12 @@@
  348	i386	process_vm_writev	sys_process_vm_writev		compat_sys_process_vm_writev
  349	i386	kcmp			sys_kcmp
  350	i386	finit_module		sys_finit_module
++<<<<<<< HEAD
++=======
+ 351	i386	sched_setattr		sys_sched_setattr
+ 352	i386	sched_getattr		sys_sched_getattr
+ 353	i386	renameat2		sys_renameat2
+ 354	i386	seccomp			sys_seccomp
+ 355	i386	getrandom		sys_getrandom
+ 356	i386	memfd_create		sys_memfd_create
++>>>>>>> 9183df25fe7b (shm: add memfd_create() syscall)
diff --cc arch/x86/syscalls/syscall_64.tbl
index ba71cb12cfa0,ca2b9aa78c81..000000000000
--- a/arch/x86/syscalls/syscall_64.tbl
+++ b/arch/x86/syscalls/syscall_64.tbl
@@@ -320,8 -320,12 +320,14 @@@
  311	64	process_vm_writev	sys_process_vm_writev
  312	common	kcmp			sys_kcmp
  313	common	finit_module		sys_finit_module
 -314	common	sched_setattr		sys_sched_setattr
 -315	common	sched_getattr		sys_sched_getattr
  316	common	renameat2		sys_renameat2
++<<<<<<< HEAD
 +320	common	kexec_file_load		sys_kexec_file_load
++=======
+ 317	common	seccomp			sys_seccomp
+ 318	common	getrandom		sys_getrandom
+ 319	common	memfd_create		sys_memfd_create
++>>>>>>> 9183df25fe7b (shm: add memfd_create() syscall)
  
  #
  # x32-specific system call numbers start at 512 to avoid cache impact
diff --cc mm/shmem.c
index 79833817e524,4a5498795a2b..000000000000
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@@ -66,6 -66,9 +66,12 @@@ static struct vfsmount *shm_mnt
  #include <linux/highmem.h>
  #include <linux/seq_file.h>
  #include <linux/magic.h>
++<<<<<<< HEAD
++=======
+ #include <linux/syscalls.h>
+ #include <linux/fcntl.h>
+ #include <uapi/linux/memfd.h>
++>>>>>>> 9183df25fe7b (shm: add memfd_create() syscall)
  
  #include <asm/uaccess.h>
  #include <asm/pgtable.h>
* Unmerged path arch/x86/syscalls/syscall_32.tbl
* Unmerged path arch/x86/syscalls/syscall_64.tbl
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index c89c93885853..2c2e39636423 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -786,6 +786,7 @@ asmlinkage long sys_timerfd_settime(int ufd, int flags,
 asmlinkage long sys_timerfd_gettime(int ufd, struct itimerspec __user *otmr);
 asmlinkage long sys_eventfd(unsigned int count);
 asmlinkage long sys_eventfd2(unsigned int count, int flags);
+asmlinkage long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);
 asmlinkage long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);
 asmlinkage long sys_old_readdir(unsigned int, struct old_linux_dirent __user *, unsigned int);
 asmlinkage long sys_pselect6(int, fd_set __user *, fd_set __user *,
diff --git a/include/uapi/linux/memfd.h b/include/uapi/linux/memfd.h
new file mode 100644
index 000000000000..534e364bda92
--- /dev/null
+++ b/include/uapi/linux/memfd.h
@@ -0,0 +1,8 @@
+#ifndef _UAPI_LINUX_MEMFD_H
+#define _UAPI_LINUX_MEMFD_H
+
+/* flags for memfd_create(2) (unsigned int) */
+#define MFD_CLOEXEC		0x0001U
+#define MFD_ALLOW_SEALING	0x0002U
+
+#endif /* _UAPI_LINUX_MEMFD_H */
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index 7e1e13d76acc..5901034d1af9 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -194,6 +194,7 @@ cond_syscall(compat_sys_timerfd_settime);
 cond_syscall(compat_sys_timerfd_gettime);
 cond_syscall(sys_eventfd);
 cond_syscall(sys_eventfd2);
+cond_syscall(sys_memfd_create);
 
 /* performance counters: */
 cond_syscall(sys_perf_event_open);
* Unmerged path mm/shmem.c
