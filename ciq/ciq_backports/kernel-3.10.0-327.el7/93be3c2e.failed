list: introduce list_last_entry(), use list_{first,last}_entry()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf] list: introduce list_last_entry(), use list_{first, last}_entry() (Jiri Olsa) [1209607]
Rebuild_FUZZ: 99.22%
commit-author Oleg Nesterov <oleg@redhat.com>
commit 93be3c2eb3371f022ad88acf1ab6bee8e3c38378
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/93be3c2e.failed

We already have list_first_entry(), it makes sense to also add
list_last_entry() for consistency.  And we use both helpers in
list_for_each_*().

	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Cc: Eilon Greenstein <eilong@broadcom.com>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 93be3c2eb3371f022ad88acf1ab6bee8e3c38378)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/list.h
diff --cc include/linux/list.h
index 83a9576f479f,ef9594171062..000000000000
--- a/include/linux/list.h
+++ b/include/linux/list.h
@@@ -443,9 -443,9 +454,15 @@@ static inline void list_splice_tail_ini
   * @member:	the name of the list_struct within the struct.
   */
  #define list_for_each_entry(pos, head, member)				\
++<<<<<<< HEAD
 +	for (pos = list_entry((head)->next, typeof(*pos), member);	\
 +	     &pos->member != (head); 	\
 +	     pos = list_entry(pos->member.next, typeof(*pos), member))
++=======
+ 	for (pos = list_first_entry(head, typeof(*pos), member);	\
+ 	     &pos->member != (head);					\
+ 	     pos = list_next_entry(pos, member))
++>>>>>>> 93be3c2eb337 (list: introduce list_last_entry(), use list_{first,last}_entry())
  
  /**
   * list_for_each_entry_reverse - iterate backwards over list of given type.
@@@ -454,9 -454,9 +471,15 @@@
   * @member:	the name of the list_struct within the struct.
   */
  #define list_for_each_entry_reverse(pos, head, member)			\
++<<<<<<< HEAD
 +	for (pos = list_entry((head)->prev, typeof(*pos), member);	\
 +	     &pos->member != (head); 	\
 +	     pos = list_entry(pos->member.prev, typeof(*pos), member))
++=======
+ 	for (pos = list_last_entry(head, typeof(*pos), member);		\
+ 	     &pos->member != (head); 					\
+ 	     pos = list_prev_entry(pos, member))
++>>>>>>> 93be3c2eb337 (list: introduce list_last_entry(), use list_{first,last}_entry())
  
  /**
   * list_prepare_entry - prepare a pos entry for use in list_for_each_entry_continue()
@@@ -517,10 -517,10 +540,15 @@@
   * @member:	the name of the list_struct within the struct.
   */
  #define list_for_each_entry_safe(pos, n, head, member)			\
++<<<<<<< HEAD
 +	for (pos = list_entry((head)->next, typeof(*pos), member),	\
 +		n = list_entry(pos->member.next, typeof(*pos), member);	\
++=======
+ 	for (pos = list_first_entry(head, typeof(*pos), member),	\
+ 		n = list_next_entry(pos, member);			\
++>>>>>>> 93be3c2eb337 (list: introduce list_last_entry(), use list_{first,last}_entry())
  	     &pos->member != (head); 					\
 -	     pos = n, n = list_next_entry(n, member))
 +	     pos = n, n = list_entry(n->member.next, typeof(*n), member))
  
  /**
   * list_for_each_entry_safe_continue - continue list iteration safe against removal
@@@ -564,10 -564,10 +592,15 @@@
   * of list entry.
   */
  #define list_for_each_entry_safe_reverse(pos, n, head, member)		\
++<<<<<<< HEAD
 +	for (pos = list_entry((head)->prev, typeof(*pos), member),	\
 +		n = list_entry(pos->member.prev, typeof(*pos), member);	\
++=======
+ 	for (pos = list_last_entry(head, typeof(*pos), member),		\
+ 		n = list_prev_entry(pos, member);			\
++>>>>>>> 93be3c2eb337 (list: introduce list_last_entry(), use list_{first,last}_entry())
  	     &pos->member != (head); 					\
 -	     pos = n, n = list_prev_entry(n, member))
 +	     pos = n, n = list_entry(n->member.prev, typeof(*n), member))
  
  /**
   * list_safe_reset_next - reset a stale list_for_each_entry_safe loop
* Unmerged path include/linux/list.h
