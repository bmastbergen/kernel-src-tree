virtio: simplify feature bit handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] simplify feature bit handling (Jason Wang) [1227339]
Rebuild_FUZZ: 87.88%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit c102659d690d382171bd2e40f35c5c811f0cdcac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c102659d.failed

Now that we use u64 for bits, we can simply & them together.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
	Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>




(cherry picked from commit c102659d690d382171bd2e40f35c5c811f0cdcac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio.c
diff --cc drivers/virtio/virtio.c
index ee59b74768d9,3e78f4bcfa8e..000000000000
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@@ -111,7 -159,9 +111,13 @@@ static int virtio_dev_probe(struct devi
  	int err, i;
  	struct virtio_device *dev = dev_to_virtio(_d);
  	struct virtio_driver *drv = drv_to_virtio(dev->dev.driver);
++<<<<<<< HEAD
 +	u32 device_features;
++=======
+ 	u64 device_features;
+ 	u64 driver_features;
+ 	unsigned status;
++>>>>>>> c102659d690d (virtio: simplify feature bit handling)
  
  	/* We have a driver! */
  	add_status(dev, VIRTIO_CONFIG_S_DRIVER);
@@@ -119,19 -169,20 +125,30 @@@
  	/* Figure out what features the device supports. */
  	device_features = dev->config->get_features(dev);
  
++<<<<<<< HEAD
 +	/* Features supported by both device and driver into dev->features. */
 +	memset(dev->features, 0, sizeof(dev->features));
 +	for (i = 0; i < drv->feature_table_size; i++) {
 +		unsigned int f = drv->feature_table[i];
 +		BUG_ON(f >= 32);
 +		if (device_features & (1 << f))
 +			set_bit(f, dev->features);
++=======
+ 	/* Figure out what features the driver supports. */
+ 	driver_features = 0;
+ 	for (i = 0; i < drv->feature_table_size; i++) {
+ 		unsigned int f = drv->feature_table[i];
+ 		BUG_ON(f >= 64);
+ 		driver_features |= (1ULL << f);
++>>>>>>> c102659d690d (virtio: simplify feature bit handling)
  	}
  
+ 	dev->features = driver_features & device_features;
+ 
  	/* Transport features always preserved to pass to finalize_features. */
  	for (i = VIRTIO_TRANSPORT_F_START; i < VIRTIO_TRANSPORT_F_END; i++)
 -		if (device_features & (1ULL << i))
 -			__virtio_set_bit(dev, i);
 +		if (device_features & (1 << i))
 +			set_bit(i, dev->features);
  
  	dev->config->finalize_features(dev);
  
* Unmerged path drivers/virtio/virtio.c
