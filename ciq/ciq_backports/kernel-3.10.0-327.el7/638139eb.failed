usb: hub: allow to process more usb hub events in parallel

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [usb] hub: allow to process more usb hub events in parallel (Don Zickus) [1232920]
Rebuild_FUZZ: 95.50%
commit-author Petr Mladek <pmladek@suse.cz>
commit 638139eb95d2d241781330a321e88c8dafe46078
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/638139eb.failed

It seems that only choose_devnum() was not ready to process more hub
events at the same time.

All should be fine if we take bus->usb_address0_mutex there. It will
make sure that more devnums will not be chosen for the given bus and
the related devices at the same time.

	Signed-off-by: Petr Mladek <pmladek@suse.cz>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 638139eb95d2d241781330a321e88c8dafe46078)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/core/hub.c
diff --cc drivers/usb/core/hub.c
index 49fb6517ffdc,374b3f93071c..000000000000
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@@ -2039,7 -2045,8 +2039,12 @@@ static void choose_devnum(struct usb_de
  	int		devnum;
  	struct usb_bus	*bus = udev->bus;
  
++<<<<<<< HEAD
 +	/* If khubd ever becomes multithreaded, this will need a lock */
++=======
+ 	/* be safe when more hub events are proceed in parallel */
+ 	mutex_lock(&bus->usb_address0_mutex);
++>>>>>>> 638139eb95d2 (usb: hub: allow to process more usb hub events in parallel)
  	if (udev->wusb) {
  		devnum = udev->portnum + 1;
  		BUG_ON(test_bit(devnum, bus->devmap.devicemap));
* Unmerged path drivers/usb/core/hub.c
