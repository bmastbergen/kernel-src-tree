be2net: refactor function initalization sequence into be_func_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Sathya Perla <sathya.perla@emulex.com>
commit ca3de6b29d09585bdb7b5af2e12f815468120184
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ca3de6b2.failed

Function initialization sequence is executed in be_probe(), be_resume
and be_eeh_resume(). Move this code to a new routine called be_func_init()
to prevent code duplication.

	Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
	Signed-off-by: Kalesh AP <kalesh.purayil@emulex.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ca3de6b29d09585bdb7b5af2e12f815468120184)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be_main.c
diff --cc drivers/net/ethernet/emulex/benet/be_main.c
index b2184bdb8a43,fda2e5dcd977..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@@ -5008,6 -5230,55 +5008,58 @@@ static inline char *func_name(struct be
  	return be_physfn(adapter) ? "PF" : "VF";
  }
  
++<<<<<<< HEAD
++=======
+ static inline char *nic_name(struct pci_dev *pdev)
+ {
+ 	switch (pdev->device) {
+ 	case OC_DEVICE_ID1:
+ 		return OC_NAME;
+ 	case OC_DEVICE_ID2:
+ 		return OC_NAME_BE;
+ 	case OC_DEVICE_ID3:
+ 	case OC_DEVICE_ID4:
+ 		return OC_NAME_LANCER;
+ 	case BE_DEVICE_ID2:
+ 		return BE3_NAME;
+ 	case OC_DEVICE_ID5:
+ 	case OC_DEVICE_ID6:
+ 		return OC_NAME_SH;
+ 	default:
+ 		return BE_NAME;
+ 	}
+ }
+ 
+ /* Wait for the FW to be ready and perform the required initialization */
+ static int be_func_init(struct be_adapter *adapter)
+ {
+ 	int status;
+ 
+ 	status = be_fw_wait_ready(adapter);
+ 	if (status)
+ 		return status;
+ 
+ 	if (be_reset_required(adapter)) {
+ 		status = be_cmd_reset_function(adapter);
+ 		if (status)
+ 			return status;
+ 
+ 		/* Wait for interrupts to quiesce after an FLR */
+ 		msleep(100);
+ 	}
+ 
+ 	/* Tell FW we're ready to fire cmds */
+ 	status = be_cmd_fw_init(adapter);
+ 	if (status)
+ 		return status;
+ 
+ 	/* Allow interrupts for other ULPs running on NIC function */
+ 	be_intr_set(adapter, true);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> ca3de6b29d09 (be2net: refactor function initalization sequence into be_func_init())
  static int be_probe(struct pci_dev *pdev, const struct pci_device_id *pdev_id)
  {
  	struct be_adapter *adapter;
@@@ -5055,42 -5326,13 +5107,50 @@@
  	if (status)
  		goto free_netdev;
  
++<<<<<<< HEAD
 +	/* sync up with fw's ready state */
 +	if (be_physfn(adapter)) {
 +		status = be_fw_wait_ready(adapter);
 +		if (status)
 +			goto ctrl_clean;
 +	}
 +
 +	if (be_reset_required(adapter)) {
 +		status = be_cmd_reset_function(adapter);
 +		if (status)
 +			goto ctrl_clean;
 +
 +		/* Wait for interrupts to quiesce after an FLR */
 +		msleep(100);
 +	}
 +
 +	/* Allow interrupts for other ULPs running on NIC function */
 +	be_intr_set(adapter, true);
 +
 +	/* tell fw we're ready to fire cmds */
 +	status = be_cmd_fw_init(adapter);
++=======
+ 	status = be_drv_init(adapter);
+ 	if (status)
+ 		goto unmap_bars;
+ 
+ 	status = be_func_init(adapter);
++>>>>>>> ca3de6b29d09 (be2net: refactor function initalization sequence into be_func_init())
  	if (status)
 -		goto drv_cleanup;
 +		goto ctrl_clean;
 +
 +	status = be_stats_init(adapter);
 +	if (status)
 +		goto ctrl_clean;
 +
 +	status = be_get_initial_config(adapter);
 +	if (status)
 +		goto stats_clean;
 +
 +	INIT_DELAYED_WORK(&adapter->work, be_worker);
 +	INIT_DELAYED_WORK(&adapter->func_recovery_work, be_func_recovery_task);
 +	adapter->rx_fc = true;
 +	adapter->tx_fc = true;
  
  	status = be_setup(adapter);
  	if (status)
diff --git a/drivers/net/ethernet/emulex/benet/be_cmds.c b/drivers/net/ethernet/emulex/benet/be_cmds.c
index 4c2df61e8122..977ffd4b37cd 100644
--- a/drivers/net/ethernet/emulex/benet/be_cmds.c
+++ b/drivers/net/ethernet/emulex/benet/be_cmds.c
@@ -720,6 +720,10 @@ int be_fw_wait_ready(struct be_adapter *adapter)
 	}
 
 	do {
+		/* There's no means to poll POST state on BE2/3 VFs */
+		if (BEx_chip(adapter) && be_virtfn(adapter))
+			return 0;
+
 		stage = be_POST_stage_get(adapter);
 		if (stage == POST_STAGE_ARMFW_RDY)
 			return 0;
* Unmerged path drivers/net/ethernet/emulex/benet/be_main.c
