flow_dissector: factor out the ports extraction in skb_flow_get_ports

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Nikolay Aleksandrov <nikolay@redhat.com>
commit 357afe9c46c951c34769e39cabdf8d1637e2eecc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/357afe9c.failed

Factor out the code that extracts the ports from skb_flow_dissect and
add a new function skb_flow_get_ports which can be re-used.

	Suggested-by: Veaceslav Falico <vfalico@redhat.com>
	Signed-off-by: Nikolay Aleksandrov <nikolay@redhat.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Reviewed-by: Veaceslav Falico <vfalico@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 357afe9c46c951c34769e39cabdf8d1637e2eecc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/flow_keys.h
diff --cc include/net/flow_keys.h
index d4fec0ba6827,7e64bd8bbda9..000000000000
--- a/include/net/flow_keys.h
+++ b/include/net/flow_keys.h
@@@ -27,5 -13,6 +27,10 @@@ struct flow_keys 
  	u8 ip_proto;
  };
  
++<<<<<<< HEAD
 +extern bool skb_flow_dissect(const struct sk_buff *skb, struct flow_keys *flow);
++=======
+ bool skb_flow_dissect(const struct sk_buff *skb, struct flow_keys *flow);
+ __be32 skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto);
++>>>>>>> 357afe9c46c9 (flow_dissector: factor out the ports extraction in skb_flow_get_ports)
  #endif
* Unmerged path include/net/flow_keys.h
diff --git a/net/core/flow_dissector.c b/net/core/flow_dissector.c
index 6a5c78b76323..f798e904cd5a 100644
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@ -25,9 +25,35 @@ static void iph_to_flow_copy_addrs(struct flow_keys *flow, const struct iphdr *i
 	memcpy(&flow->src, &iph->saddr, sizeof(flow->src) + sizeof(flow->dst));
 }
 
+/**
+ * skb_flow_get_ports - extract the upper layer ports and return them
+ * @skb: buffer to extract the ports from
+ * @thoff: transport header offset
+ * @ip_proto: protocol for which to get port offset
+ *
+ * The function will try to retrieve the ports at offset thoff + poff where poff
+ * is the protocol port offset returned from proto_ports_offset
+ */
+__be32 skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto)
+{
+	int poff = proto_ports_offset(ip_proto);
+
+	if (poff >= 0) {
+		__be32 *ports, _ports;
+
+		ports = skb_header_pointer(skb, thoff + poff,
+					   sizeof(_ports), &_ports);
+		if (ports)
+			return *ports;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(skb_flow_get_ports);
+
 bool skb_flow_dissect(const struct sk_buff *skb, struct flow_keys *flow)
 {
-	int poff, nhoff = skb_network_offset(skb);
+	int nhoff = skb_network_offset(skb);
 	u8 ip_proto;
 	__be16 proto = skb->protocol;
 
@@ -146,16 +172,7 @@ ipv6:
 
 	flow->n_proto = proto;
 	flow->ip_proto = ip_proto;
-	poff = proto_ports_offset(ip_proto);
-	if (poff >= 0) {
-		__be32 *ports, _ports;
-
-		ports = skb_header_pointer(skb, nhoff + poff,
-					   sizeof(_ports), &_ports);
-		if (ports)
-			flow->ports = *ports;
-	}
-
+	flow->ports = skb_flow_get_ports(skb, nhoff, ip_proto);
 	flow->thoff = (u16) nhoff;
 
 	return true;
