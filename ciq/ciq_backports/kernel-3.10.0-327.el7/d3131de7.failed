bonding: convert lacp_rate to use the new option API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Nikolay Aleksandrov <nikolay@redhat.com>
commit d3131de76b1b1a4d95f145846bd61f96e72f0411
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d3131de7.failed

This patch adds the necessary changes so lacp_rate would use
the new bonding option API. Also some trivial/style error fixes.

	Signed-off-by: Nikolay Aleksandrov <nikolay@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d3131de76b1b1a4d95f145846bd61f96e72f0411)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bond_options.h
#	drivers/net/bonding/bond_sysfs.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_main.c
index 38a1c7877edd,f3bfcafc96a4..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -195,51 -207,6 +195,54 @@@ static int bond_mode	= BOND_MODE_ROUNDR
  static int xmit_hashtype = BOND_XMIT_POLICY_LAYER2;
  static int lacp_fast;
  
++<<<<<<< HEAD
 +const struct bond_parm_tbl bond_lacp_tbl[] = {
 +{	"slow",		AD_LACP_SLOW},
 +{	"fast",		AD_LACP_FAST},
 +{	NULL,		-1},
 +};
 +
 +const struct bond_parm_tbl bond_mode_tbl[] = {
 +{	"balance-rr",		BOND_MODE_ROUNDROBIN},
 +{	"active-backup",	BOND_MODE_ACTIVEBACKUP},
 +{	"balance-xor",		BOND_MODE_XOR},
 +{	"broadcast",		BOND_MODE_BROADCAST},
 +{	"802.3ad",		BOND_MODE_8023AD},
 +{	"balance-tlb",		BOND_MODE_TLB},
 +{	"balance-alb",		BOND_MODE_ALB},
 +{	NULL,			-1},
 +};
 +
 +const struct bond_parm_tbl xmit_hashtype_tbl[] = {
 +{	"layer2",		BOND_XMIT_POLICY_LAYER2},
 +{	"layer3+4",		BOND_XMIT_POLICY_LAYER34},
 +{	"layer2+3",		BOND_XMIT_POLICY_LAYER23},
 +{	NULL,			-1},
 +};
 +
 +const struct bond_parm_tbl arp_all_targets_tbl[] = {
 +{	"any",			BOND_ARP_TARGETS_ANY},
 +{	"all",			BOND_ARP_TARGETS_ALL},
 +{	NULL,			-1},
 +};
 +
 +const struct bond_parm_tbl arp_validate_tbl[] = {
 +{	"none",			BOND_ARP_VALIDATE_NONE},
 +{	"active",		BOND_ARP_VALIDATE_ACTIVE},
 +{	"backup",		BOND_ARP_VALIDATE_BACKUP},
 +{	"all",			BOND_ARP_VALIDATE_ALL},
 +{	NULL,			-1},
 +};
 +
 +const struct bond_parm_tbl fail_over_mac_tbl[] = {
 +{	"none",			BOND_FOM_NONE},
 +{	"active",		BOND_FOM_ACTIVE},
 +{	"follow",		BOND_FOM_FOLLOW},
 +{	NULL,			-1},
 +};
 +
++=======
++>>>>>>> d3131de76b1b (bonding: convert lacp_rate to use the new option API)
  const struct bond_parm_tbl pri_reselect_tbl[] = {
  {	"always",		BOND_PRI_RESELECT_ALWAYS},
  {	"better",		BOND_PRI_RESELECT_BETTER},
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,508f2f51adad..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -65,6 -129,200 +65,203 @@@ static int bond_changelink(struct net_d
  		if (err)
  			return err;
  	}
++<<<<<<< HEAD
++=======
+ 	if (data[IFLA_BOND_MIIMON]) {
+ 		miimon = nla_get_u32(data[IFLA_BOND_MIIMON]);
+ 
+ 		err = bond_option_miimon_set(bond, miimon);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_UPDELAY]) {
+ 		int updelay = nla_get_u32(data[IFLA_BOND_UPDELAY]);
+ 
+ 		bond_opt_initval(&newval, updelay);
+ 		err = __bond_opt_set(bond, BOND_OPT_UPDELAY, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_DOWNDELAY]) {
+ 		int downdelay = nla_get_u32(data[IFLA_BOND_DOWNDELAY]);
+ 
+ 		bond_opt_initval(&newval, downdelay);
+ 		err = __bond_opt_set(bond, BOND_OPT_DOWNDELAY, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_USE_CARRIER]) {
+ 		int use_carrier = nla_get_u8(data[IFLA_BOND_USE_CARRIER]);
+ 
+ 		err = bond_option_use_carrier_set(bond, use_carrier);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_INTERVAL]) {
+ 		int arp_interval = nla_get_u32(data[IFLA_BOND_ARP_INTERVAL]);
+ 
+ 		if (arp_interval && miimon) {
+ 			pr_err("%s: ARP monitoring cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		bond_opt_initval(&newval, arp_interval);
+ 		err = __bond_opt_set(bond, BOND_OPT_ARP_INTERVAL, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_IP_TARGET]) {
+ 		struct nlattr *attr;
+ 		int i = 0, rem;
+ 
+ 		bond_option_arp_ip_targets_clear(bond);
+ 		nla_for_each_nested(attr, data[IFLA_BOND_ARP_IP_TARGET], rem) {
+ 			__be32 target = nla_get_be32(attr);
+ 
+ 			bond_opt_initval(&newval, target);
+ 			err = __bond_opt_set(bond, BOND_OPT_ARP_TARGETS,
+ 					     &newval);
+ 			if (err)
+ 				break;
+ 			i++;
+ 		}
+ 		if (i == 0 && bond->params.arp_interval)
+ 			pr_warn("%s: removing last arp target with arp_interval on\n",
+ 				bond->dev->name);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_VALIDATE]) {
+ 		int arp_validate = nla_get_u32(data[IFLA_BOND_ARP_VALIDATE]);
+ 
+ 		if (arp_validate && miimon) {
+ 			pr_err("%s: ARP validating cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		bond_opt_initval(&newval, arp_validate);
+ 		err = __bond_opt_set(bond, BOND_OPT_ARP_VALIDATE, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_ALL_TARGETS]) {
+ 		int arp_all_targets =
+ 			nla_get_u32(data[IFLA_BOND_ARP_ALL_TARGETS]);
+ 
+ 		bond_opt_initval(&newval, arp_all_targets);
+ 		err = __bond_opt_set(bond, BOND_OPT_ARP_ALL_TARGETS, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY]) {
+ 		int ifindex = nla_get_u32(data[IFLA_BOND_PRIMARY]);
+ 		struct net_device *dev;
+ 		char *primary = "";
+ 
+ 		dev = __dev_get_by_index(dev_net(bond_dev), ifindex);
+ 		if (dev)
+ 			primary = dev->name;
+ 
+ 		err = bond_option_primary_set(bond, primary);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY_RESELECT]) {
+ 		int primary_reselect =
+ 			nla_get_u8(data[IFLA_BOND_PRIMARY_RESELECT]);
+ 
+ 		err = bond_option_primary_reselect_set(bond, primary_reselect);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_FAIL_OVER_MAC]) {
+ 		int fail_over_mac =
+ 			nla_get_u8(data[IFLA_BOND_FAIL_OVER_MAC]);
+ 
+ 		bond_opt_initval(&newval, fail_over_mac);
+ 		err = __bond_opt_set(bond, BOND_OPT_FAIL_OVER_MAC, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_XMIT_HASH_POLICY]) {
+ 		int xmit_hash_policy =
+ 			nla_get_u8(data[IFLA_BOND_XMIT_HASH_POLICY]);
+ 
+ 		bond_opt_initval(&newval, xmit_hash_policy);
+ 		err = __bond_opt_set(bond, BOND_OPT_XMIT_HASH, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_RESEND_IGMP]) {
+ 		int resend_igmp =
+ 			nla_get_u32(data[IFLA_BOND_RESEND_IGMP]);
+ 
+ 		err = bond_option_resend_igmp_set(bond, resend_igmp);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_NUM_PEER_NOTIF]) {
+ 		int num_peer_notif =
+ 			nla_get_u8(data[IFLA_BOND_NUM_PEER_NOTIF]);
+ 
+ 		err = bond_option_num_peer_notif_set(bond, num_peer_notif);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ALL_SLAVES_ACTIVE]) {
+ 		int all_slaves_active =
+ 			nla_get_u8(data[IFLA_BOND_ALL_SLAVES_ACTIVE]);
+ 
+ 		err = bond_option_all_slaves_active_set(bond,
+ 							all_slaves_active);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_MIN_LINKS]) {
+ 		int min_links =
+ 			nla_get_u32(data[IFLA_BOND_MIN_LINKS]);
+ 
+ 		err = bond_option_min_links_set(bond, min_links);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_LP_INTERVAL]) {
+ 		int lp_interval =
+ 			nla_get_u32(data[IFLA_BOND_LP_INTERVAL]);
+ 
+ 		err = bond_option_lp_interval_set(bond, lp_interval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PACKETS_PER_SLAVE]) {
+ 		int packets_per_slave =
+ 			nla_get_u32(data[IFLA_BOND_PACKETS_PER_SLAVE]);
+ 
+ 		bond_opt_initval(&newval, packets_per_slave);
+ 		err = __bond_opt_set(bond, BOND_OPT_PACKETS_PER_SLAVE, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_AD_LACP_RATE]) {
+ 		int lacp_rate =
+ 			nla_get_u8(data[IFLA_BOND_AD_LACP_RATE]);
+ 
+ 		bond_opt_initval(&newval, lacp_rate);
+ 		err = __bond_opt_set(bond, BOND_OPT_LACP_RATE, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_AD_SELECT]) {
+ 		int ad_select =
+ 			nla_get_u8(data[IFLA_BOND_AD_SELECT]);
+ 
+ 		err = bond_option_ad_select_set(bond, ad_select);
+ 		if (err)
+ 			return err;
+ 	}
++>>>>>>> d3131de76b1b (bonding: convert lacp_rate to use the new option API)
  	return 0;
  }
  
diff --cc drivers/net/bonding/bond_sysfs.c
index 9519d678a368,a0a54d035c52..000000000000
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@@ -877,37 -559,13 +878,46 @@@ static ssize_t bonding_store_lacp(struc
  				  struct device_attribute *attr,
  				  const char *buf, size_t count)
  {
 +	int new_value, ret = count;
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
 +
 +	if (bond->dev->flags & IFF_UP) {
 +		pr_err("%s: Unable to update LACP rate because interface is up.\n",
 +		       bond->dev->name);
 +		ret = -EPERM;
 +		goto out;
 +	}
 +
 +	if (bond->params.mode != BOND_MODE_8023AD) {
 +		pr_err("%s: Unable to update LACP rate because bond is not in 802.3ad mode.\n",
 +		       bond->dev->name);
 +		ret = -EPERM;
 +		goto out;
 +	}
 +
 +	new_value = bond_parse_parm(buf, bond_lacp_tbl);
 +
 +	if ((new_value == 1) || (new_value == 0)) {
 +		bond->params.lacp_fast = new_value;
 +		bond_3ad_update_lacp_rate(bond);
 +		pr_info("%s: Setting LACP rate to %s (%d).\n",
 +			bond->dev->name, bond_lacp_tbl[new_value].modename,
 +			new_value);
 +	} else {
 +		pr_err("%s: Ignoring invalid LACP rate value %.*s.\n",
 +		       bond->dev->name, (int)strlen(buf) - 1, buf);
 +		ret = -EINVAL;
 +	}
 +out:
++=======
+ 	int ret;
+ 
+ 	ret = bond_opt_tryset_rtnl(bond, BOND_OPT_LACP_RATE, (char *)buf);
+ 	if (!ret)
+ 		ret = count;
+ 
++>>>>>>> d3131de76b1b (bonding: convert lacp_rate to use the new option API)
  	return ret;
  }
  static DEVICE_ATTR(lacp_rate, S_IRUGO | S_IWUSR,
diff --cc drivers/net/bonding/bonding.h
index 6097f0c04b95,da03ede3e0a5..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -442,6 -452,24 +442,27 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ int bond_option_active_slave_set(struct bonding *bond, struct net_device *slave_dev);
+ int bond_option_miimon_set(struct bonding *bond, int miimon);
+ int bond_option_use_carrier_set(struct bonding *bond, int use_carrier);
+ int bond_option_arp_ip_target_add(struct bonding *bond, __be32 target);
+ int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target);
+ int bond_option_primary_set(struct bonding *bond, const char *primary);
+ int bond_option_primary_reselect_set(struct bonding *bond,
+ 				     int primary_reselect);
+ int bond_option_resend_igmp_set(struct bonding *bond, int resend_igmp);
+ int bond_option_num_peer_notif_set(struct bonding *bond, int num_peer_notif);
+ int bond_option_all_slaves_active_set(struct bonding *bond,
+ 				      int all_slaves_active);
+ int bond_option_min_links_set(struct bonding *bond, int min_links);
+ int bond_option_lp_interval_set(struct bonding *bond, int min_links);
+ int bond_option_ad_select_set(struct bonding *bond, int ad_select);
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
+ const char *bond_slave_link_status(s8 link);
++>>>>>>> d3131de76b1b (bonding: convert lacp_rate to use the new option API)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
* Unmerged path drivers/net/bonding/bond_main.c
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
* Unmerged path drivers/net/bonding/bond_sysfs.c
* Unmerged path drivers/net/bonding/bonding.h
