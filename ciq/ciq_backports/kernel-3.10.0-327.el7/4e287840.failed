powernv/iommu: disable IOMMU bypass with param iommu=nobypass

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Thadeu Lima de Souza Cascardo <cascardo@linux.vnet.ibm.com>
commit 4e28784024a0d87f6f04250e46e8c9ac4f30e361
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/4e287840.failed

When IOMMU bypass is enabled, a PCI device can read and write memory
that was not mapped by the driver without causing an EEH. That might
cause memory corruption, for example.

When we disable bypass, DMA reads and writes to addresses not mapped by
the IOMMU will cause an EEH, allowing us to debug such issues.

	Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@linux.vnet.ibm.com>
	Reviewed-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 4e28784024a0d87f6f04250e46e8c9ac4f30e361)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/pci-ioda.c
diff --cc arch/powerpc/platforms/powernv/pci-ioda.c
index 109e90d84e34,85b473823fda..000000000000
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@@ -71,6 -75,62 +71,65 @@@ static void pe_level_printk(const struc
  #define pe_info(pe, fmt, ...)					\
  	pe_level_printk(pe, KERN_INFO, fmt, ##__VA_ARGS__)
  
++<<<<<<< HEAD
++=======
+ static bool pnv_iommu_bypass_disabled __read_mostly;
+ 
+ static int __init iommu_setup(char *str)
+ {
+ 	if (!str)
+ 		return -EINVAL;
+ 
+ 	while (*str) {
+ 		if (!strncmp(str, "nobypass", 8)) {
+ 			pnv_iommu_bypass_disabled = true;
+ 			pr_info("PowerNV: IOMMU bypass window disabled.\n");
+ 			break;
+ 		}
+ 		str += strcspn(str, ",");
+ 		if (*str == ',')
+ 			str++;
+ 	}
+ 
+ 	return 0;
+ }
+ early_param("iommu", iommu_setup);
+ 
+ /*
+  * stdcix is only supposed to be used in hypervisor real mode as per
+  * the architecture spec
+  */
+ static inline void __raw_rm_writeq(u64 val, volatile void __iomem *paddr)
+ {
+ 	__asm__ __volatile__("stdcix %0,0,%1"
+ 		: : "r" (val), "r" (paddr) : "memory");
+ }
+ 
+ static inline bool pnv_pci_is_mem_pref_64(unsigned long flags)
+ {
+ 	return ((flags & (IORESOURCE_MEM_64 | IORESOURCE_PREFETCH)) ==
+ 		(IORESOURCE_MEM_64 | IORESOURCE_PREFETCH));
+ }
+ 
+ static void pnv_ioda_reserve_pe(struct pnv_phb *phb, int pe_no)
+ {
+ 	if (!(pe_no >= 0 && pe_no < phb->ioda.total_pe)) {
+ 		pr_warn("%s: Invalid PE %d on PHB#%x\n",
+ 			__func__, pe_no, phb->hose->global_number);
+ 		return;
+ 	}
+ 
+ 	if (test_and_set_bit(pe_no, phb->ioda.pe_alloc)) {
+ 		pr_warn("%s: PE %d was assigned on PHB#%x\n",
+ 			__func__, pe_no, phb->hose->global_number);
+ 		return;
+ 	}
+ 
+ 	phb->ioda.pe_array[pe_no].phb = phb;
+ 	phb->ioda.pe_array[pe_no].pe_number = pe_no;
+ }
+ 
++>>>>>>> 4e28784024a0 (powernv/iommu: disable IOMMU bypass with param iommu=nobypass)
  static int pnv_ioda_alloc_pe(struct pnv_phb *phb)
  {
  	unsigned long pe;
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 2f034f498397..2fd8fd6048dc 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -1262,6 +1262,8 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 		forcesac
 		soft
 		pt		[x86, IA-64]
+		nobypass	[PPC/POWERNV]
+			Disable IOMMU bypass, using IOMMU for PCI devices.
 
 
 	io7=		[HW] IO7 for Marvel based alpha systems
* Unmerged path arch/powerpc/platforms/powernv/pci-ioda.c
