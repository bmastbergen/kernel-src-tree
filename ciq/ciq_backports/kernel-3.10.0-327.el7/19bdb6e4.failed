PCI: Move pci_ari_enabled() to global header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [pci] Move pci_ari_enabled() to global header (Alex Williamson) [1222066]
Rebuild_FUZZ: 93.98%
commit-author Alex Williamson <alex.williamson@redhat.com>
commit 19bdb6e4ec071bc49a9871b41e6a59a1657ed365
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/19bdb6e4.failed

pci_ari_enabled() is useful outside of drivers/pci, particularly for
deriving INTx routing via ACPI _PRT, so move it to the global header.
Also convert to bool return.

	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Don Dutile <ddutile@redhat.com>
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 19bdb6e4ec071bc49a9871b41e6a59a1657ed365)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pci.h
diff --cc include/linux/pci.h
index be12434c750f,2925561a8f1e..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -1811,15 -1892,28 +1811,42 @@@ int pci_for_each_dma_alias(struct pci_d
  			   int (*fn)(struct pci_dev *pdev,
  				     u16 alias, void *data), void *data);
  
++<<<<<<< HEAD
 +/**
 + * pci_find_upstream_pcie_bridge - find upstream PCIe-to-PCI bridge of a device
 + * @pdev: the PCI device
 + *
 + * if the device is PCIE, return NULL
 + * if the device isn't connected to a PCIe bridge (that is its parent is a
 + * legacy PCI bridge and the bridge is directly connected to bus 0), return its
 + * parent
 + */
 +struct pci_dev *pci_find_upstream_pcie_bridge(struct pci_dev *pdev);
 +
++=======
+ /* helper functions for operation of device flag */
+ static inline void pci_set_dev_assigned(struct pci_dev *pdev)
+ {
+ 	pdev->dev_flags |= PCI_DEV_FLAGS_ASSIGNED;
+ }
+ static inline void pci_clear_dev_assigned(struct pci_dev *pdev)
+ {
+ 	pdev->dev_flags &= ~PCI_DEV_FLAGS_ASSIGNED;
+ }
+ static inline bool pci_is_dev_assigned(struct pci_dev *pdev)
+ {
+ 	return (pdev->dev_flags & PCI_DEV_FLAGS_ASSIGNED) == PCI_DEV_FLAGS_ASSIGNED;
+ }
+ 
+ /**
+  * pci_ari_enabled - query ARI forwarding status
+  * @bus: the PCI bus
+  *
+  * Returns true if ARI forwarding is enabled.
+  */
+ static inline bool pci_ari_enabled(struct pci_bus *bus)
+ {
+ 	return bus->self && bus->self->ari_enabled;
+ }
++>>>>>>> 19bdb6e4ec07 (PCI: Move pci_ari_enabled() to global header)
  #endif /* LINUX_PCI_H */
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index f90671e34816..6ae6c10a862a 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -208,17 +208,6 @@ void __pci_bus_assign_resources(const struct pci_bus *bus,
 				struct list_head *fail_head);
 bool pci_bus_clip_resource(struct pci_dev *dev, int idx);
 
-/**
- * pci_ari_enabled - query ARI forwarding status
- * @bus: the PCI bus
- *
- * Returns 1 if ARI forwarding is enabled, or 0 if not enabled;
- */
-static inline int pci_ari_enabled(struct pci_bus *bus)
-{
-	return bus->self && bus->self->ari_enabled;
-}
-
 void pci_reassigndev_resource_alignment(struct pci_dev *dev);
 void pci_disable_bridge_window(struct pci_dev *dev);
 
* Unmerged path include/linux/pci.h
