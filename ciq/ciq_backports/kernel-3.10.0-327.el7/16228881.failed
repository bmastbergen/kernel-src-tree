bonding: convert arp_validate to use the new option API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Nikolay Aleksandrov <nikolay@redhat.com>
commit 162288810c9ebd2efb79ee6dc364e266044cac9e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/16228881.failed

This patch adds the necessary changes so arp_validate would use the
new bonding option API. Also fix some trivial/style errors.

	Signed-off-by: Nikolay Aleksandrov <nikolay@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 162288810c9ebd2efb79ee6dc364e266044cac9e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bond_options.h
#	drivers/net/bonding/bond_sysfs.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,588730c39748..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -65,6 -129,187 +65,190 @@@ static int bond_changelink(struct net_d
  		if (err)
  			return err;
  	}
++<<<<<<< HEAD
++=======
+ 	if (data[IFLA_BOND_MIIMON]) {
+ 		miimon = nla_get_u32(data[IFLA_BOND_MIIMON]);
+ 
+ 		err = bond_option_miimon_set(bond, miimon);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_UPDELAY]) {
+ 		int updelay = nla_get_u32(data[IFLA_BOND_UPDELAY]);
+ 
+ 		err = bond_option_updelay_set(bond, updelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_DOWNDELAY]) {
+ 		int downdelay = nla_get_u32(data[IFLA_BOND_DOWNDELAY]);
+ 
+ 		err = bond_option_downdelay_set(bond, downdelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_USE_CARRIER]) {
+ 		int use_carrier = nla_get_u8(data[IFLA_BOND_USE_CARRIER]);
+ 
+ 		err = bond_option_use_carrier_set(bond, use_carrier);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_INTERVAL]) {
+ 		int arp_interval = nla_get_u32(data[IFLA_BOND_ARP_INTERVAL]);
+ 
+ 		if (arp_interval && miimon) {
+ 			pr_err("%s: ARP monitoring cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		err = bond_option_arp_interval_set(bond, arp_interval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_IP_TARGET]) {
+ 		__be32 targets[BOND_MAX_ARP_TARGETS] = { 0, };
+ 		struct nlattr *attr;
+ 		int i = 0, rem;
+ 
+ 		nla_for_each_nested(attr, data[IFLA_BOND_ARP_IP_TARGET], rem) {
+ 			__be32 target = nla_get_be32(attr);
+ 			targets[i++] = target;
+ 		}
+ 
+ 		err = bond_option_arp_ip_targets_set(bond, targets, i);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_VALIDATE]) {
+ 		int arp_validate = nla_get_u32(data[IFLA_BOND_ARP_VALIDATE]);
+ 
+ 		if (arp_validate && miimon) {
+ 			pr_err("%s: ARP validating cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		bond_opt_initval(&newval, arp_validate);
+ 		err = __bond_opt_set(bond, BOND_OPT_ARP_VALIDATE, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_ALL_TARGETS]) {
+ 		int arp_all_targets =
+ 			nla_get_u32(data[IFLA_BOND_ARP_ALL_TARGETS]);
+ 
+ 		err = bond_option_arp_all_targets_set(bond, arp_all_targets);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY]) {
+ 		int ifindex = nla_get_u32(data[IFLA_BOND_PRIMARY]);
+ 		struct net_device *dev;
+ 		char *primary = "";
+ 
+ 		dev = __dev_get_by_index(dev_net(bond_dev), ifindex);
+ 		if (dev)
+ 			primary = dev->name;
+ 
+ 		err = bond_option_primary_set(bond, primary);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY_RESELECT]) {
+ 		int primary_reselect =
+ 			nla_get_u8(data[IFLA_BOND_PRIMARY_RESELECT]);
+ 
+ 		err = bond_option_primary_reselect_set(bond, primary_reselect);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_FAIL_OVER_MAC]) {
+ 		int fail_over_mac =
+ 			nla_get_u8(data[IFLA_BOND_FAIL_OVER_MAC]);
+ 
+ 		err = bond_option_fail_over_mac_set(bond, fail_over_mac);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_XMIT_HASH_POLICY]) {
+ 		int xmit_hash_policy =
+ 			nla_get_u8(data[IFLA_BOND_XMIT_HASH_POLICY]);
+ 
+ 		bond_opt_initval(&newval, xmit_hash_policy);
+ 		err = __bond_opt_set(bond, BOND_OPT_XMIT_HASH, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_RESEND_IGMP]) {
+ 		int resend_igmp =
+ 			nla_get_u32(data[IFLA_BOND_RESEND_IGMP]);
+ 
+ 		err = bond_option_resend_igmp_set(bond, resend_igmp);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_NUM_PEER_NOTIF]) {
+ 		int num_peer_notif =
+ 			nla_get_u8(data[IFLA_BOND_NUM_PEER_NOTIF]);
+ 
+ 		err = bond_option_num_peer_notif_set(bond, num_peer_notif);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ALL_SLAVES_ACTIVE]) {
+ 		int all_slaves_active =
+ 			nla_get_u8(data[IFLA_BOND_ALL_SLAVES_ACTIVE]);
+ 
+ 		err = bond_option_all_slaves_active_set(bond,
+ 							all_slaves_active);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_MIN_LINKS]) {
+ 		int min_links =
+ 			nla_get_u32(data[IFLA_BOND_MIN_LINKS]);
+ 
+ 		err = bond_option_min_links_set(bond, min_links);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_LP_INTERVAL]) {
+ 		int lp_interval =
+ 			nla_get_u32(data[IFLA_BOND_LP_INTERVAL]);
+ 
+ 		err = bond_option_lp_interval_set(bond, lp_interval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PACKETS_PER_SLAVE]) {
+ 		int packets_per_slave =
+ 			nla_get_u32(data[IFLA_BOND_PACKETS_PER_SLAVE]);
+ 
+ 		bond_opt_initval(&newval, packets_per_slave);
+ 		err = __bond_opt_set(bond, BOND_OPT_PACKETS_PER_SLAVE, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_AD_LACP_RATE]) {
+ 		int lacp_rate =
+ 			nla_get_u8(data[IFLA_BOND_AD_LACP_RATE]);
+ 
+ 		err = bond_option_lacp_rate_set(bond, lacp_rate);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_AD_SELECT]) {
+ 		int ad_select =
+ 			nla_get_u8(data[IFLA_BOND_AD_SELECT]);
+ 
+ 		err = bond_option_ad_select_set(bond, ad_select);
+ 		if (err)
+ 			return err;
+ 	}
++>>>>>>> 162288810c9e (bonding: convert arp_validate to use the new option API)
  	return 0;
  }
  
diff --cc drivers/net/bonding/bond_sysfs.c
index 9519d678a368,e1a4b633013f..000000000000
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@@ -421,37 -338,12 +423,46 @@@ static ssize_t bonding_store_arp_valida
  					  const char *buf, size_t count)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
 +	int new_value, ret = count;
 +
 +	if (!rtnl_trylock())
 +		return restart_syscall();
 +	new_value = bond_parse_parm(buf, arp_validate_tbl);
 +	if (new_value < 0) {
 +		pr_err("%s: Ignoring invalid arp_validate value %s\n",
 +		       bond->dev->name, buf);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	if (bond->params.mode != BOND_MODE_ACTIVEBACKUP) {
 +		pr_err("%s: arp_validate only supported in active-backup mode.\n",
 +		       bond->dev->name);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	pr_info("%s: setting arp_validate to %s (%d).\n",
 +		bond->dev->name, arp_validate_tbl[new_value].modename,
 +		new_value);
 +
 +	if (bond->dev->flags & IFF_UP) {
 +		if (!new_value)
 +			bond->recv_probe = NULL;
 +		else if (bond->params.arp_interval)
 +			bond->recv_probe = bond_arp_rcv;
 +	}
 +	bond->params.arp_validate = new_value;
 +out:
 +	rtnl_unlock();
 +
++=======
+ 	int ret;
+ 
+ 	ret = bond_opt_tryset_rtnl(bond, BOND_OPT_ARP_VALIDATE, (char *)buf);
+ 	if (!ret)
+ 		ret = count;
+ 
++>>>>>>> 162288810c9e (bonding: convert arp_validate to use the new option API)
  	return ret;
  }
  
diff --cc drivers/net/bonding/bonding.h
index 6097f0c04b95,9af61716d78a..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -442,6 -452,32 +442,35 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ int bond_option_active_slave_set(struct bonding *bond, struct net_device *slave_dev);
+ int bond_option_miimon_set(struct bonding *bond, int miimon);
+ int bond_option_updelay_set(struct bonding *bond, int updelay);
+ int bond_option_downdelay_set(struct bonding *bond, int downdelay);
+ int bond_option_use_carrier_set(struct bonding *bond, int use_carrier);
+ int bond_option_arp_interval_set(struct bonding *bond, int arp_interval);
+ int bond_option_arp_ip_targets_set(struct bonding *bond, __be32 *targets,
+ 				   int count);
+ int bond_option_arp_ip_target_add(struct bonding *bond, __be32 target);
+ int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target);
+ int bond_option_arp_all_targets_set(struct bonding *bond, int arp_all_targets);
+ int bond_option_primary_set(struct bonding *bond, const char *primary);
+ int bond_option_primary_reselect_set(struct bonding *bond,
+ 				     int primary_reselect);
+ int bond_option_fail_over_mac_set(struct bonding *bond, int fail_over_mac);
+ int bond_option_resend_igmp_set(struct bonding *bond, int resend_igmp);
+ int bond_option_num_peer_notif_set(struct bonding *bond, int num_peer_notif);
+ int bond_option_all_slaves_active_set(struct bonding *bond,
+ 				      int all_slaves_active);
+ int bond_option_min_links_set(struct bonding *bond, int min_links);
+ int bond_option_lp_interval_set(struct bonding *bond, int min_links);
+ int bond_option_lacp_rate_set(struct bonding *bond, int lacp_rate);
+ int bond_option_ad_select_set(struct bonding *bond, int ad_select);
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
+ const char *bond_slave_link_status(s8 link);
++>>>>>>> 162288810c9e (bonding: convert arp_validate to use the new option API)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index 38a1c7877edd..9ba4b7c70a42 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -225,14 +225,6 @@ const struct bond_parm_tbl arp_all_targets_tbl[] = {
 {	NULL,			-1},
 };
 
-const struct bond_parm_tbl arp_validate_tbl[] = {
-{	"none",			BOND_ARP_VALIDATE_NONE},
-{	"active",		BOND_ARP_VALIDATE_ACTIVE},
-{	"backup",		BOND_ARP_VALIDATE_BACKUP},
-{	"all",			BOND_ARP_VALIDATE_ALL},
-{	NULL,			-1},
-};
-
 const struct bond_parm_tbl fail_over_mac_tbl[] = {
 {	"none",			BOND_FOM_NONE},
 {	"active",		BOND_FOM_ACTIVE},
@@ -4562,15 +4554,18 @@ static int bond_check_params(struct bond_params *params)
 			return -EINVAL;
 		}
 
-		arp_validate_value = bond_parse_parm(arp_validate,
-						     arp_validate_tbl);
-		if (arp_validate_value == -1) {
+		bond_opt_initstr(&newval, arp_validate);
+		valptr = bond_opt_parse(bond_opt_get(BOND_OPT_ARP_VALIDATE),
+					&newval);
+		if (!valptr) {
 			pr_err("Error: invalid arp_validate \"%s\"\n",
-			       arp_validate == NULL ? "NULL" : arp_validate);
+			       arp_validate);
 			return -EINVAL;
 		}
-	} else
+		arp_validate_value = valptr->value;
+	} else {
 		arp_validate_value = 0;
+	}
 
 	arp_all_targets_value = 0;
 	if (arp_all_targets) {
@@ -4587,10 +4582,10 @@ static int bond_check_params(struct bond_params *params)
 	if (miimon) {
 		pr_info("MII link monitoring set to %d ms\n", miimon);
 	} else if (arp_interval) {
+		valptr = bond_opt_get_val(BOND_OPT_ARP_VALIDATE,
+					  arp_validate_value);
 		pr_info("ARP monitoring set to %d ms, validate %s, with %d target(s):",
-			arp_interval,
-			arp_validate_tbl[arp_validate_value].modename,
-			arp_ip_count);
+			arp_interval, valptr->string, arp_ip_count);
 
 		for (i = 0; i < arp_ip_count; i++)
 			pr_info(" %s", arp_ip_target[i]);
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
* Unmerged path drivers/net/bonding/bond_sysfs.c
* Unmerged path drivers/net/bonding/bonding.h
