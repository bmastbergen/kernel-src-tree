perf data: Fix sentinel setting for data_cmds array

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf] data: Fix sentinel setting for data_cmds array (Jiri Olsa) [1222189]
Rebuild_FUZZ: 94.85%
commit-author Yunlong Song <yunlong.song@huawei.com>
commit 1f924c29b5ab2257be88a2a4075d0800573d8479
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/1f924c29.failed

The recent new patch "perf tools: Add new 'perf data' command" (commit
2245bf14 in acme's git repo perf/core) has caused a building error when
compiling the source code of perf:

 cc1: warnings being treated as errors
 builtin-data.c:89: error: missing initializer
 builtin-data.c:89: error: (near initialization for ‘data_cmds[1].summary’)
 make[2]: *** [builtin-data.o] Error 1
 make[2]: *** Waiting for unfinished jobs....
   LD       bench/perf-in.o
   LD       tests/perf-in.o
 make[1]: *** [perf-in.o] Error 2
 make: *** [all] Error 2

This patch fixes the building error above.

	Signed-off-by: Yunlong Song <yunlong.song@huawei.com>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1425038026-27604-1-git-send-email-yunlong.song@huawei.com
[ .name == NULL ends the loop, use it instead of seting all fields to NULL ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1f924c29b5ab2257be88a2a4075d0800573d8479)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-data.c
diff --cc tools/perf/builtin-data.c
index 1eee97d020fa,155cf75b8199..000000000000
--- a/tools/perf/builtin-data.c
+++ b/tools/perf/builtin-data.c
@@@ -41,8 -42,51 +41,13 @@@ static void print_usage(void
  	printf("\n");
  }
  
 -static const char * const data_convert_usage[] = {
 -	"perf data convert [<options>]",
 -	NULL
 -};
 -
 -static int cmd_data_convert(int argc, const char **argv,
 -			    const char *prefix __maybe_unused)
 -{
 -	const char *to_ctf     = NULL;
 -	const struct option options[] = {
 -		OPT_INCR('v', "verbose", &verbose, "be more verbose"),
 -		OPT_STRING('i', "input", &input_name, "file", "input file name"),
 -#ifdef HAVE_LIBBABELTRACE_SUPPORT
 -		OPT_STRING(0, "to-ctf", &to_ctf, NULL, "Convert to CTF format"),
 -#endif
 -		OPT_END()
 -	};
 -
 -#ifndef HAVE_LIBBABELTRACE_SUPPORT
 -	pr_err("No conversion support compiled in.\n");
 -	return -1;
 -#endif
 -
 -	argc = parse_options(argc, argv, options,
 -			     data_convert_usage, 0);
 -	if (argc) {
 -		usage_with_options(data_convert_usage, options);
 -		return -1;
 -	}
 -
 -	if (to_ctf) {
 -#ifdef HAVE_LIBBABELTRACE_SUPPORT
 -		return bt_convert__perf2ctf(input_name, to_ctf);
 -#else
 -		pr_err("The libbabeltrace support is not compiled in.\n");
 -		return -1;
 -#endif
 -	}
 -
 -	return 0;
 -}
 -
  static struct data_cmd data_cmds[] = {
++<<<<<<< HEAD
 +	{ NULL },
++=======
+ 	{ "convert", "converts data file between formats", cmd_data_convert },
+ 	{ .name = NULL, },
++>>>>>>> 1f924c29b5ab (perf data: Fix sentinel setting for data_cmds array)
  };
  
  int cmd_data(int argc, const char **argv, const char *prefix)
* Unmerged path tools/perf/builtin-data.c
