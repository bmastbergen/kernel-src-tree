futex: Mention key referencing differences between shared and private futexes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Davidlohr Bueso <dave@stgolabs.net>
commit 993b2ff221999066fcff231590593d0b98f45d32
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/993b2ff2.failed

Update our documentation as of fix 76835b0ebf8 (futex: Ensure
get_futex_key_refs() always implies a barrier). Explicitly
state that we don't do key referencing for private futexes.

	Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
	Cc: Matteo Franchin <Matteo.Franchin@arm.com>
	Cc: Davidlohr Bueso <davidlohr@hp.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Darren Hart <dvhart@linux.intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
Link: http://lkml.kernel.org/r/1414121220.817.0.camel@linux-t7sj.site
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 993b2ff221999066fcff231590593d0b98f45d32)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/futex.c
diff --cc kernel/futex.c
index 7e6b39027df5,bbf071f325b8..000000000000
--- a/kernel/futex.c
+++ b/kernel/futex.c
@@@ -135,14 -138,13 +135,21 @@@
   *     unlock(hash_bucket(futex));
   *     schedule();                         if (waiters)
   *                                           lock(hash_bucket(futex));
 - *   else                                    wake_waiters(futex);
 - *     waiters--; (b)                        unlock(hash_bucket(futex));
 - *
 + *                                           wake_waiters(futex);
 + *                                           unlock(hash_bucket(futex));
 + *
++<<<<<<< HEAD
 + * Where (A) orders the waiters increment and the futex value read -- this
 + * is guaranteed by the head counter in the hb spinlock; and where (B)
 + * orders the write to futex and the waiters read -- this is done by the
 + * barriers in get_futex_key_refs(), through either ihold or atomic_inc,
 + * depending on the futex type.
++=======
+  * Where (A) orders the waiters increment and the futex value read through
+  * atomic operations (see hb_waiters_inc) and where (B) orders the write
+  * to futex and the waiters read -- this is done by the barriers for both
+  * shared and private futexes in get_futex_key_refs().
++>>>>>>> 993b2ff22199 (futex: Mention key referencing differences between shared and private futexes)
   *
   * This yields the following case (where X:=waiters, Y:=futex):
   *
* Unmerged path kernel/futex.c
