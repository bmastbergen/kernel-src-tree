net: Replace get_cpu_var through this_cpu_ptr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] Replace get_cpu_var through this_cpu_ptr (Ivan Vecera) [1200759]
Rebuild_FUZZ: 94.12%
commit-author Christoph Lameter <cl@linux.com>
commit 903ceff7ca7b4d80c083a80ee5163b74e9fa359f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/903ceff7.failed

Replace uses of get_cpu_var for address calculation through this_cpu_ptr.

	Cc: netdev@vger.kernel.org
	Cc: Eric Dumazet <edumazet@google.com>
	Acked-by: David S. Miller <davem@davemloft.net>
	Signed-off-by: Christoph Lameter <cl@linux.com>
	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit 903ceff7ca7b4d80c083a80ee5163b74e9fa359f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/snmp.h
#	net/core/dev.c
#	net/ipv4/syncookies.c
#	net/ipv6/syncookies.c
diff --cc include/net/snmp.h
index 71596261fa99,e154133877a2..000000000000
--- a/include/net/snmp.h
+++ b/include/net/snmp.h
@@@ -170,7 -168,7 +170,11 @@@ struct linux_xfrm_mib 
  
  #define SNMP_ADD_STATS64_BH(mib, field, addend) 			\
  	do {								\
++<<<<<<< HEAD
 +		__typeof__(*mib[0]) *ptr = __this_cpu_ptr((mib)[0]);	\
++=======
+ 		__typeof__(*mib) *ptr = raw_cpu_ptr(mib);		\
++>>>>>>> 903ceff7ca7b (net: Replace get_cpu_var through this_cpu_ptr)
  		u64_stats_update_begin(&ptr->syncp);			\
  		ptr->mibs[field] += addend;				\
  		u64_stats_update_end(&ptr->syncp);			\
@@@ -191,8 -189,8 +195,13 @@@
  #define SNMP_INC_STATS64(mib, field) SNMP_ADD_STATS64(mib, field, 1)
  #define SNMP_UPD_PO_STATS64_BH(mib, basefield, addend)			\
  	do {								\
++<<<<<<< HEAD
 +		__typeof__(*mib[0]) *ptr;				\
 +		ptr = __this_cpu_ptr((mib)[0]);				\
++=======
+ 		__typeof__(*mib) *ptr;				\
+ 		ptr = raw_cpu_ptr((mib));				\
++>>>>>>> 903ceff7ca7b (net: Replace get_cpu_var through this_cpu_ptr)
  		u64_stats_update_begin(&ptr->syncp);			\
  		ptr->mibs[basefield##PKTS]++;				\
  		ptr->mibs[basefield##OCTETS] += addend;			\
diff --cc net/core/dev.c
index 9a2bea4eeeee,9ef13ff354fe..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -3083,6 -3208,46 +3083,49 @@@ static int rps_ipi_queued(struct softne
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NET_FLOW_LIMIT
+ int netdev_flow_limit_table_len __read_mostly = (1 << 12);
+ #endif
+ 
+ static bool skb_flow_limit(struct sk_buff *skb, unsigned int qlen)
+ {
+ #ifdef CONFIG_NET_FLOW_LIMIT
+ 	struct sd_flow_limit *fl;
+ 	struct softnet_data *sd;
+ 	unsigned int old_flow, new_flow;
+ 
+ 	if (qlen < (netdev_max_backlog >> 1))
+ 		return false;
+ 
+ 	sd = this_cpu_ptr(&softnet_data);
+ 
+ 	rcu_read_lock();
+ 	fl = rcu_dereference(sd->flow_limit);
+ 	if (fl) {
+ 		new_flow = skb_get_hash(skb) & (fl->num_buckets - 1);
+ 		old_flow = fl->history[fl->history_head];
+ 		fl->history[fl->history_head] = new_flow;
+ 
+ 		fl->history_head++;
+ 		fl->history_head &= FLOW_LIMIT_HISTORY - 1;
+ 
+ 		if (likely(fl->buckets[old_flow]))
+ 			fl->buckets[old_flow]--;
+ 
+ 		if (++fl->buckets[new_flow] > (FLOW_LIMIT_HISTORY >> 1)) {
+ 			fl->count++;
+ 			rcu_read_unlock();
+ 			return true;
+ 		}
+ 	}
+ 	rcu_read_unlock();
+ #endif
+ 	return false;
+ }
+ 
++>>>>>>> 903ceff7ca7b (net: Replace get_cpu_var through this_cpu_ptr)
  /*
   * enqueue_to_backlog is called to queue an skb to a per CPU backlog
   * queue (may be a remote CPU queue).
diff --cc net/ipv4/syncookies.c
index 84b29ed816a8,f83391bfdd76..000000000000
--- a/net/ipv4/syncookies.c
+++ b/net/ipv4/syncookies.c
@@@ -64,8 -36,11 +64,14 @@@ static DEFINE_PER_CPU(__u32 [16 + 5 + S
  static u32 cookie_hash(__be32 saddr, __be32 daddr, __be16 sport, __be16 dport,
  		       u32 count, int c)
  {
 -	__u32 *tmp;
 +	__u32 *tmp = __get_cpu_var(ipv4_cookie_scratch);
  
++<<<<<<< HEAD
++=======
+ 	net_get_random_once(syncookie_secret, sizeof(syncookie_secret));
+ 
+ 	tmp  = this_cpu_ptr(ipv4_cookie_scratch);
++>>>>>>> 903ceff7ca7b (net: Replace get_cpu_var through this_cpu_ptr)
  	memcpy(tmp + 4, syncookie_secret[c], sizeof(syncookie_secret[c]));
  	tmp[0] = (__force u32)saddr;
  	tmp[1] = (__force u32)daddr;
diff --cc net/ipv6/syncookies.c
index d04d3f1dd9b7,637de5b87589..000000000000
--- a/net/ipv6/syncookies.c
+++ b/net/ipv6/syncookies.c
@@@ -61,7 -63,11 +61,15 @@@ static DEFINE_PER_CPU(__u32 [16 + 5 + S
  static u32 cookie_hash(const struct in6_addr *saddr, const struct in6_addr *daddr,
  		       __be16 sport, __be16 dport, u32 count, int c)
  {
++<<<<<<< HEAD
 +	__u32 *tmp = __get_cpu_var(ipv6_cookie_scratch);
++=======
+ 	__u32 *tmp;
+ 
+ 	net_get_random_once(syncookie6_secret, sizeof(syncookie6_secret));
+ 
+ 	tmp  = this_cpu_ptr(ipv6_cookie_scratch);
++>>>>>>> 903ceff7ca7b (net: Replace get_cpu_var through this_cpu_ptr)
  
  	/*
  	 * we have 320 bits of information to hash, copy in the remaining
diff --git a/include/net/netfilter/nf_conntrack.h b/include/net/netfilter/nf_conntrack.h
index 37252f71a380..c8a7db605e03 100644
--- a/include/net/netfilter/nf_conntrack.h
+++ b/include/net/netfilter/nf_conntrack.h
@@ -242,7 +242,7 @@ extern s32 (*nf_ct_nat_offset)(const struct nf_conn *ct,
 DECLARE_PER_CPU(struct nf_conn, nf_conntrack_untracked);
 static inline struct nf_conn *nf_ct_untracked_get(void)
 {
-	return &__raw_get_cpu_var(nf_conntrack_untracked);
+	return raw_cpu_ptr(&nf_conntrack_untracked);
 }
 void nf_ct_untracked_status_or(unsigned long bits);
 
* Unmerged path include/net/snmp.h
* Unmerged path net/core/dev.c
diff --git a/net/core/drop_monitor.c b/net/core/drop_monitor.c
index 342380061035..a4e9d1dd89e3 100644
--- a/net/core/drop_monitor.c
+++ b/net/core/drop_monitor.c
@@ -147,7 +147,7 @@ static void trace_drop_common(struct sk_buff *skb, void *location)
 	unsigned long flags;
 
 	local_irq_save(flags);
-	data = &__get_cpu_var(dm_cpu_data);
+	data = this_cpu_ptr(&dm_cpu_data);
 	spin_lock(&data->lock);
 	dskb = data->skb;
 
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 13e8ed896c2a..d7ba43cccac3 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -372,7 +372,7 @@ static void *__netdev_alloc_frag(unsigned int fragsz, gfp_t gfp_mask)
 	unsigned long flags;
 
 	local_irq_save(flags);
-	nc = &__get_cpu_var(netdev_alloc_cache);
+	nc = this_cpu_ptr(&netdev_alloc_cache);
 	if (unlikely(!nc->frag.page)) {
 refill:
 		for (order = NETDEV_FRAG_PAGE_MAX_ORDER; ;) {
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index ea8723ba067c..c3f90aeb89bf 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -1273,7 +1273,7 @@ static bool rt_cache_route(struct fib_nh *nh, struct rtable *rt)
 	if (rt_is_input_route(rt)) {
 		p = (struct rtable **)&nh->nh_rth_input;
 	} else {
-		p = (struct rtable **)__this_cpu_ptr(nh->nh_pcpu_rth_output);
+		p = (struct rtable **)raw_cpu_ptr(nh->nh_pcpu_rth_output);
 	}
 	orig = *p;
 
@@ -1892,7 +1892,7 @@ static struct rtable *__mkroute_output(const struct fib_result *res,
 				do_cache = false;
 				goto add;
 			}
-			prth = __this_cpu_ptr(nh->nh_pcpu_rth_output);
+			prth = raw_cpu_ptr(nh->nh_pcpu_rth_output);
 		}
 		rth = rcu_dereference(*prth);
 		if (rt_cache_valid(rth)) {
* Unmerged path net/ipv4/syncookies.c
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 82001502275d..4bc8a1a660b1 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -2899,7 +2899,7 @@ struct tcp_md5sig_pool *tcp_get_md5sig_pool(void)
 	local_bh_disable();
 	p = ACCESS_ONCE(tcp_md5sig_pool);
 	if (p)
-		return __this_cpu_ptr(p);
+		return raw_cpu_ptr(p);
 
 	local_bh_enable();
 	return NULL;
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index 074c9a68acbd..5e5266049ee4 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -839,7 +839,7 @@ void tcp_wfree(struct sk_buff *skb)
 
 		/* queue this socket to tasklet queue */
 		local_irq_save(flags);
-		tsq = &__get_cpu_var(tsq_tasklet);
+		tsq = this_cpu_ptr(&tsq_tasklet);
 		list_add(&tp->tsq_node, &tsq->head);
 		tasklet_schedule(&tsq->tasklet);
 		local_irq_restore(flags);
* Unmerged path net/ipv6/syncookies.c
diff --git a/net/rds/ib_rdma.c b/net/rds/ib_rdma.c
index e8fdb172adbb..273b8bff6ba4 100644
--- a/net/rds/ib_rdma.c
+++ b/net/rds/ib_rdma.c
@@ -267,7 +267,7 @@ static inline struct rds_ib_mr *rds_ib_reuse_fmr(struct rds_ib_mr_pool *pool)
 	unsigned long *flag;
 
 	preempt_disable();
-	flag = &__get_cpu_var(clean_list_grace);
+	flag = this_cpu_ptr(&clean_list_grace);
 	set_bit(CLEAN_LIST_BUSY_BIT, flag);
 	ret = llist_del_first(&pool->clean_list);
 	if (ret)
