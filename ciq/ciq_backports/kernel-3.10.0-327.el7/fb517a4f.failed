net/mlx4_core: Set initial admin GUIDs for VFs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx4_core: Set initial admin GUIDs for VFs (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 95.45%
commit-author Yishai Hadas <yishaih@mellanox.com>
commit fb517a4f03041c5eaed394bd57ee518b44301f1a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/fb517a4f.failed

To have out of the box experience, the PF generates random GUIDs who
serve as the initial admin values.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit fb517a4f03041c5eaed394bd57ee518b44301f1a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/main.c
#	include/linux/mlx4/device.h
diff --cc drivers/net/ethernet/mellanox/mlx4/main.c
index 7e092d9c247b,ced5ecab5aa7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@@ -2022,6 -2260,37 +2022,40 @@@ void mlx4_counter_free(struct mlx4_dev 
  }
  EXPORT_SYMBOL_GPL(mlx4_counter_free);
  
++<<<<<<< HEAD
++=======
+ void mlx4_set_admin_guid(struct mlx4_dev *dev, __be64 guid, int entry, int port)
+ {
+ 	struct mlx4_priv *priv = mlx4_priv(dev);
+ 
+ 	priv->mfunc.master.vf_admin[entry].vport[port].guid = guid;
+ }
+ EXPORT_SYMBOL_GPL(mlx4_set_admin_guid);
+ 
+ __be64 mlx4_get_admin_guid(struct mlx4_dev *dev, int entry, int port)
+ {
+ 	struct mlx4_priv *priv = mlx4_priv(dev);
+ 
+ 	return priv->mfunc.master.vf_admin[entry].vport[port].guid;
+ }
+ EXPORT_SYMBOL_GPL(mlx4_get_admin_guid);
+ 
+ void mlx4_set_random_admin_guid(struct mlx4_dev *dev, int entry, int port)
+ {
+ 	struct mlx4_priv *priv = mlx4_priv(dev);
+ 	__be64 guid;
+ 
+ 	/* hw GUID */
+ 	if (entry == 0)
+ 		return;
+ 
+ 	get_random_bytes((char *)&guid, sizeof(guid));
+ 	guid &= ~(cpu_to_be64(1ULL << 56));
+ 	guid |= cpu_to_be64(1ULL << 57);
+ 	priv->mfunc.master.vf_admin[entry].vport[port].guid = guid;
+ }
+ 
++>>>>>>> fb517a4f0304 (net/mlx4_core: Set initial admin GUIDs for VFs)
  static int mlx4_setup_hca(struct mlx4_dev *dev)
  {
  	struct mlx4_priv *priv = mlx4_priv(dev);
diff --cc include/linux/mlx4/device.h
index 7c7eeeb434eb,83e80ab94500..000000000000
--- a/include/linux/mlx4/device.h
+++ b/include/linux/mlx4/device.h
@@@ -1258,6 -1345,10 +1258,13 @@@ int mlx4_wol_write(struct mlx4_dev *dev
  int mlx4_counter_alloc(struct mlx4_dev *dev, u32 *idx);
  void mlx4_counter_free(struct mlx4_dev *dev, u32 idx);
  
++<<<<<<< HEAD
++=======
+ void mlx4_set_admin_guid(struct mlx4_dev *dev, __be64 guid, int entry,
+ 			 int port);
+ __be64 mlx4_get_admin_guid(struct mlx4_dev *dev, int entry, int port);
+ void mlx4_set_random_admin_guid(struct mlx4_dev *dev, int entry, int port);
++>>>>>>> fb517a4f0304 (net/mlx4_core: Set initial admin GUIDs for VFs)
  int mlx4_flow_attach(struct mlx4_dev *dev,
  		     struct mlx4_net_trans_rule *rule, u64 *reg_id);
  int mlx4_flow_detach(struct mlx4_dev *dev, u64 reg_id);
diff --git a/drivers/net/ethernet/mellanox/mlx4/cmd.c b/drivers/net/ethernet/mellanox/mlx4/cmd.c
index 9a86029fbef2..2a9680f09cbb 100644
--- a/drivers/net/ethernet/mellanox/mlx4/cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx4/cmd.c
@@ -2140,6 +2140,7 @@ int mlx4_multi_func_init(struct mlx4_dev *dev)
 				oper_vport->default_vlan = MLX4_VGT;
 				vf_oper->vport[port].vlan_idx = NO_INDX;
 				vf_oper->vport[port].mac_idx = NO_INDX;
+				mlx4_set_random_admin_guid(dev, i, port);
 			}
 			spin_lock_init(&s_state->lock);
 		}
* Unmerged path drivers/net/ethernet/mellanox/mlx4/main.c
* Unmerged path include/linux/mlx4/device.h
