hv: delete vmbus_get_debug_info()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [hv] delete vmbus_get_debug_info() (Vitaly Kuznetsov) [1201889]
Rebuild_FUZZ: 93.55%
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 2c9be3eacc39948af2341595322c014833699ac5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2c9be3ea.failed

It's only used once, only contains 2 function calls, so just make those
calls directly, deleting the function, and the now unneeded structure
entirely.

	Tested-by: "K. Y. Srinivasan" <kys@microsoft.com>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2c9be3eacc39948af2341595322c014833699ac5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/channel.c
#	drivers/hv/vmbus_drv.c
#	include/linux/hyperv.h
diff --cc drivers/hv/channel.c
index 45ad7011d110,94d54591b226..000000000000
--- a/drivers/hv/channel.c
+++ b/drivers/hv/channel.c
@@@ -60,40 -60,6 +60,43 @@@ static void vmbus_setevent(struct vmbus
  }
  
  /*
++<<<<<<< HEAD
 + * vmbus_get_debug_info -Retrieve various channel debug info
 + */
 +void vmbus_get_debug_info(struct vmbus_channel *channel,
 +			      struct vmbus_channel_debug_info *debuginfo)
 +{
 +	struct hv_monitor_page *monitorpage;
 +	u8 monitor_group = (u8)channel->offermsg.monitorid / 32;
 +	u8 monitor_offset = (u8)channel->offermsg.monitorid % 32;
 +
 +	monitorpage = (struct hv_monitor_page *)vmbus_connection.monitor_pages;
 +
 +	debuginfo->servermonitor_pending =
 +			monitorpage->trigger_group[monitor_group].pending;
 +	debuginfo->servermonitor_latency =
 +			monitorpage->latency[monitor_group][monitor_offset];
 +	debuginfo->servermonitor_connectionid =
 +			monitorpage->parameter[monitor_group]
 +					[monitor_offset].connectionid.u.id;
 +
 +	monitorpage++;
 +
 +	debuginfo->clientmonitor_pending =
 +			monitorpage->trigger_group[monitor_group].pending;
 +	debuginfo->clientmonitor_latency =
 +			monitorpage->latency[monitor_group][monitor_offset];
 +	debuginfo->clientmonitor_connectionid =
 +			monitorpage->parameter[monitor_group]
 +					[monitor_offset].connectionid.u.id;
 +
 +	hv_ringbuffer_get_debuginfo(&channel->inbound, &debuginfo->inbound);
 +	hv_ringbuffer_get_debuginfo(&channel->outbound, &debuginfo->outbound);
 +}
 +
 +/*
++=======
++>>>>>>> 2c9be3eacc39 (hv: delete vmbus_get_debug_info())
   * vmbus_open - Open the specified channel.
   */
  int vmbus_open(struct vmbus_channel *newchannel, u32 send_ringbuffer_size,
diff --cc drivers/hv/vmbus_drv.c
index 2ed3b20b532d,62d9311b0541..000000000000
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@@ -81,32 -69,20 +82,38 @@@ static void get_channel_info(struct hv_
  	if (!device->channel)
  		return;
  
- 	vmbus_get_debug_info(device->channel, &debug_info);
+ 	hv_ringbuffer_get_debuginfo(&device->channel->inbound, &inbound);
+ 	hv_ringbuffer_get_debuginfo(&device->channel->outbound, &outbound);
  
++<<<<<<< HEAD
 +	info->server_monitor_pending = debug_info.servermonitor_pending;
 +	info->server_monitor_latency = debug_info.servermonitor_latency;
 +	info->server_monitor_conn_id = debug_info.servermonitor_connectionid;
 +
 +	info->client_monitor_pending = debug_info.clientmonitor_pending;
 +	info->client_monitor_latency = debug_info.clientmonitor_latency;
 +	info->client_monitor_conn_id = debug_info.clientmonitor_connectionid;
 +
 +	info->inbound.int_mask = debug_info.inbound.current_interrupt_mask;
 +	info->inbound.read_idx = debug_info.inbound.current_read_index;
 +	info->inbound.write_idx = debug_info.inbound.current_write_index;
 +	info->inbound.bytes_avail_toread =
 +		debug_info.inbound.bytes_avail_toread;
 +	info->inbound.bytes_avail_towrite =
 +		debug_info.inbound.bytes_avail_towrite;
- 
- 	info->outbound.int_mask =
- 		debug_info.outbound.current_interrupt_mask;
- 	info->outbound.read_idx = debug_info.outbound.current_read_index;
- 	info->outbound.write_idx = debug_info.outbound.current_write_index;
- 	info->outbound.bytes_avail_toread =
- 		debug_info.outbound.bytes_avail_toread;
- 	info->outbound.bytes_avail_towrite =
- 		debug_info.outbound.bytes_avail_towrite;
++=======
+ 	info->inbound.int_mask = inbound.current_interrupt_mask;
+ 	info->inbound.read_idx = inbound.current_read_index;
+ 	info->inbound.write_idx = inbound.current_write_index;
+ 	info->inbound.bytes_avail_toread = inbound.bytes_avail_toread;
+ 	info->inbound.bytes_avail_towrite = inbound.bytes_avail_towrite;
++>>>>>>> 2c9be3eacc39 (hv: delete vmbus_get_debug_info())
+ 
+ 	info->outbound.int_mask = outbound.current_interrupt_mask;
+ 	info->outbound.read_idx = outbound.current_read_index;
+ 	info->outbound.write_idx = outbound.current_write_index;
+ 	info->outbound.bytes_avail_toread = outbound.bytes_avail_toread;
+ 	info->outbound.bytes_avail_towrite = outbound.bytes_avail_towrite;
  }
  
  #define VMBUS_ALIAS_LEN ((sizeof((struct hv_vmbus_device_id *)0)->guid) * 2)
diff --cc include/linux/hyperv.h
index c9f89b16b793,c0e8faf40b35..000000000000
--- a/include/linux/hyperv.h
+++ b/include/linux/hyperv.h
@@@ -587,18 -899,6 +587,21 @@@ enum vmbus_channel_state 
  	CHANNEL_OPENED_STATE,
  };
  
++<<<<<<< HEAD
 +struct vmbus_channel_debug_info {
 +	u32 servermonitor_pending;
 +	u32 servermonitor_latency;
 +	u32 servermonitor_connectionid;
 +	u32 clientmonitor_pending;
 +	u32 clientmonitor_latency;
 +	u32 clientmonitor_connectionid;
 +
 +	struct hv_ring_buffer_debug_info inbound;
 +	struct hv_ring_buffer_debug_info outbound;
 +};
 +
++=======
++>>>>>>> 2c9be3eacc39 (hv: delete vmbus_get_debug_info())
  /*
   * Represents each channel msg on the vmbus connection This is a
   * variable-size data structure depending on the msg type itself
* Unmerged path drivers/hv/channel.c
* Unmerged path drivers/hv/vmbus_drv.c
* Unmerged path include/linux/hyperv.h
