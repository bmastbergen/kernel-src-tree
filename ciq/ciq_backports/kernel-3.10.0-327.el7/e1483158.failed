powerpc/mm: Change the swap encoding in pte.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [powerpc] mm: Change the swap encoding in pte (Gustavo Duarte) [1217743]
Rebuild_FUZZ: 88.61%
commit-author Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
commit e148315852855f8f06b8bb4601c8cade34af8df3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e1483158.failed

Current swap encoding in pte can't support large pfns
above 4TB. Change the swap encoding such that we put
the swap type in the PTE bits. Also add build checks
to make sure we don't overlap with HPTEFLAGS.

	Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit e148315852855f8f06b8bb4601c8cade34af8df3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/pgtable-ppc64.h
#	arch/powerpc/include/asm/pte-hash64.h
diff --cc arch/powerpc/include/asm/pgtable-ppc64.h
index 380b076826d0,f890f7ce1593..000000000000
--- a/arch/powerpc/include/asm/pgtable-ppc64.h
+++ b/arch/powerpc/include/asm/pgtable-ppc64.h
@@@ -328,21 -340,34 +328,45 @@@ static inline void __ptep_set_access_fl
  #define pte_same(A,B)	(((pte_val(A) ^ pte_val(B)) & ~_PAGE_HPTEFLAGS) == 0)
  
  #define pte_ERROR(e) \
 -	pr_err("%s:%d: bad pte %08lx.\n", __FILE__, __LINE__, pte_val(e))
 +	printk("%s:%d: bad pte %08lx.\n", __FILE__, __LINE__, pte_val(e))
  #define pmd_ERROR(e) \
 -	pr_err("%s:%d: bad pmd %08lx.\n", __FILE__, __LINE__, pmd_val(e))
 +	printk("%s:%d: bad pmd %08lx.\n", __FILE__, __LINE__, pmd_val(e))
  #define pgd_ERROR(e) \
 -	pr_err("%s:%d: bad pgd %08lx.\n", __FILE__, __LINE__, pgd_val(e))
 +	printk("%s:%d: bad pgd %08lx.\n", __FILE__, __LINE__, pgd_val(e))
  
  /* Encode and de-code a swap entry */
++<<<<<<< HEAD
 +#define __swp_type(entry)	(((entry).val >> 1) & 0x3f)
 +#define __swp_offset(entry)	((entry).val >> 8)
 +#define __swp_entry(type, offset) ((swp_entry_t){((type)<< 1)|((offset)<<8)})
 +#define __pte_to_swp_entry(pte)	((swp_entry_t){pte_val(pte) >> PTE_RPN_SHIFT})
 +#define __swp_entry_to_pte(x)	((pte_t) { (x).val << PTE_RPN_SHIFT })
 +#define pte_to_pgoff(pte)	(pte_val(pte) >> PTE_RPN_SHIFT)
 +#define pgoff_to_pte(off)	((pte_t) {((off) << PTE_RPN_SHIFT)|_PAGE_FILE})
 +#define PTE_FILE_MAX_BITS	(BITS_PER_LONG - PTE_RPN_SHIFT)
++=======
+ #define MAX_SWAPFILES_CHECK() do { \
+ 	BUILD_BUG_ON(MAX_SWAPFILES_SHIFT > SWP_TYPE_BITS); \
+ 	/*							\
+ 	 * Don't have overlapping bits with _PAGE_HPTEFLAGS	\
+ 	 * We filter HPTEFLAGS on set_pte.			\
+ 	 */							\
+ 	BUILD_BUG_ON(_PAGE_HPTEFLAGS & (0x1f << _PAGE_BIT_SWAP_TYPE)); \
+ 	} while (0)
+ /*
+  * on pte we don't need handle RADIX_TREE_EXCEPTIONAL_SHIFT;
+  */
+ #define SWP_TYPE_BITS 5
+ #define __swp_type(x)		(((x).val >> _PAGE_BIT_SWAP_TYPE) \
+ 				& ((1UL << SWP_TYPE_BITS) - 1))
+ #define __swp_offset(x)		((x).val >> PTE_RPN_SHIFT)
+ #define __swp_entry(type, offset)	((swp_entry_t) { \
+ 					((type) << _PAGE_BIT_SWAP_TYPE) \
+ 					| ((offset) << PTE_RPN_SHIFT) })
+ 
+ #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val((pte)) })
+ #define __swp_entry_to_pte(x)		__pte((x).val)
++>>>>>>> e14831585285 (powerpc/mm: Change the swap encoding in pte.)
  
  void pgtable_cache_add(unsigned shift, void (*ctor)(void *));
  void pgtable_cache_init(void);
diff --cc arch/powerpc/include/asm/pte-hash64.h
index 2505d8eab15c,ef612c160da7..000000000000
--- a/arch/powerpc/include/asm/pte-hash64.h
+++ b/arch/powerpc/include/asm/pte-hash64.h
@@@ -16,7 -16,7 +16,11 @@@
   */
  #define _PAGE_PRESENT		0x0001 /* software: pte contains a translation */
  #define _PAGE_USER		0x0002 /* matches one of the PP bits */
++<<<<<<< HEAD
 +#define _PAGE_FILE		0x0002 /* (!present only) software: pte holds file offset */
++=======
+ #define _PAGE_BIT_SWAP_TYPE	2
++>>>>>>> e14831585285 (powerpc/mm: Change the swap encoding in pte.)
  #define _PAGE_EXEC		0x0004 /* No execute on POWER4 and newer (we invert) */
  #define _PAGE_GUARDED		0x0008
  /* We can derive Memory coherence from _PAGE_NO_CACHE */
* Unmerged path arch/powerpc/include/asm/pgtable-ppc64.h
diff --git a/arch/powerpc/include/asm/pte-book3e.h b/arch/powerpc/include/asm/pte-book3e.h
index 0156702ba24e..a87c60a7e299 100644
--- a/arch/powerpc/include/asm/pte-book3e.h
+++ b/arch/powerpc/include/asm/pte-book3e.h
@@ -12,6 +12,7 @@
 #define _PAGE_PRESENT	0x000001 /* software: pte contains a translation */
 #define _PAGE_FILE	0x000002 /* (!present only) software: pte holds file offset */
 #define _PAGE_SW1	0x000002
+#define _PAGE_BIT_SWAP_TYPE	2
 #define _PAGE_BAP_SR	0x000004
 #define _PAGE_BAP_UR	0x000008
 #define _PAGE_BAP_SW	0x000010
* Unmerged path arch/powerpc/include/asm/pte-hash64.h
