backlight: introduce backlight_device_registered

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Aaron Lu <aaron.lu@intel.com>
commit 5915a3db0c3983f1cd5e046bf70086c7d0c686d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/5915a3db.failed

Introduce a new API for modules to query if a specific type of backlight
device has been registered. This is useful for some backlight device
provider module (e.g. ACPI video) to know if a native control
interface(e.g. the interface created by i915) is available and then do
things accordingly (e.g. avoid registering its own on Win8 systems).

	Signed-off-by: Aaron Lu <aaron.lu@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 5915a3db0c3983f1cd5e046bf70086c7d0c686d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/backlight/backlight.c
diff --cc drivers/video/backlight/backlight.c
index e3c279083253,5d05555fe841..000000000000
--- a/drivers/video/backlight/backlight.c
+++ b/drivers/video/backlight/backlight.c
@@@ -413,9 -526,10 +442,16 @@@ static int __init backlight_class_init(
  		return PTR_ERR(backlight_class);
  	}
  
++<<<<<<< HEAD
 +	backlight_class->dev_attrs = bl_device_attributes;
 +	backlight_class->suspend = backlight_suspend;
 +	backlight_class->resume = backlight_resume;
++=======
+ 	backlight_class->dev_groups = bl_device_groups;
+ 	backlight_class->pm = &backlight_class_dev_pm_ops;
+ 	INIT_LIST_HEAD(&backlight_dev_list);
+ 	mutex_init(&backlight_dev_list_mutex);
++>>>>>>> 5915a3db0c39 (backlight: introduce backlight_device_registered)
  	return 0;
  }
  
* Unmerged path drivers/video/backlight/backlight.c
diff --git a/include/linux/backlight.h b/include/linux/backlight.h
index da9a0825e007..9ab6688b65e7 100644
--- a/include/linux/backlight.h
+++ b/include/linux/backlight.h
@@ -100,6 +100,9 @@ struct backlight_device {
 	/* The framebuffer notifier block */
 	struct notifier_block fb_notif;
 
+	/* list entry of all registered backlight devices */
+	struct list_head entry;
+
 	struct device dev;
 };
 
@@ -117,6 +120,7 @@ extern struct backlight_device *backlight_device_register(const char *name,
 extern void backlight_device_unregister(struct backlight_device *bd);
 extern void backlight_force_update(struct backlight_device *bd,
 				   enum backlight_update_reason reason);
+extern bool backlight_device_registered(enum backlight_type type);
 
 #define to_backlight_device(obj) container_of(obj, struct backlight_device, dev)
 
