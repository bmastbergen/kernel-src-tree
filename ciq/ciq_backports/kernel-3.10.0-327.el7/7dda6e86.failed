xfs: convert directory segment limits to xfs_da_geometry

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 7dda6e8644a31c366484bbcb564ea6c6225e5963
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7dda6e86.failed

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 7dda6e8644a31c366484bbcb564ea6c6225e5963)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_dir2_data.c
#	fs/xfs/xfs_dir2_readdir.c
diff --cc fs/xfs/xfs_dir2_data.c
index bae8b5b8d1c2,6c23f86e0148..000000000000
--- a/fs/xfs/xfs_dir2_data.c
+++ b/fs/xfs/xfs_dir2_data.c
@@@ -172,9 -174,9 +174,15 @@@ __xfs_dir3_data_check
  		lastfree = 0;
  		if (hdr->magic == cpu_to_be32(XFS_DIR2_BLOCK_MAGIC) ||
  		    hdr->magic == cpu_to_be32(XFS_DIR3_BLOCK_MAGIC)) {
++<<<<<<< HEAD
 +			addr = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk,
 +				(xfs_dir2_data_aoff_t)
 +				((char *)dep - (char *)hdr));
++=======
+ 			addr = xfs_dir2_db_off_to_dataptr(geo, geo->datablk,
+ 						(xfs_dir2_data_aoff_t)
+ 						((char *)dep - (char *)hdr));
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  			name.name = dep->name;
  			name.len = dep->namelen;
  			hash = mp->m_dirnameops->hashname(&name);
diff --cc fs/xfs/xfs_dir2_readdir.c
index d6645e8c5ecc,0c8c09cf313f..000000000000
--- a/fs/xfs/xfs_dir2_readdir.c
+++ b/fs/xfs/xfs_dir2_readdir.c
@@@ -111,18 -111,18 +111,28 @@@ xfs_dir2_sf_getdents
  	/*
  	 * If the block number in the offset is out of range, we're done.
  	 */
++<<<<<<< HEAD
 +	if (xfs_dir2_dataptr_to_db(mp, *offset) > mp->m_dirdatablk)
++=======
+ 	if (xfs_dir2_dataptr_to_db(geo, ctx->pos) > geo->datablk)
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  		return 0;
  
  	/*
  	 * Precalculate offsets for . and .. as we will always need them.
  	 *
  	 * XXX(hch): the second argument is sometimes 0 and sometimes
- 	 * mp->m_dirdatablk.
+ 	 * geo->datablk
  	 */
++<<<<<<< HEAD
 +	dot_offset = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk,
 +						dp->d_ops->data_dot_offset);
 +	dotdot_offset = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk,
++=======
+ 	dot_offset = xfs_dir2_db_off_to_dataptr(geo, geo->datablk,
+ 						dp->d_ops->data_dot_offset);
+ 	dotdot_offset = xfs_dir2_db_off_to_dataptr(geo, geo->datablk,
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  						dp->d_ops->data_dotdot_offset);
  
  	/*
@@@ -153,10 -151,10 +163,14 @@@
  	for (i = 0; i < sfp->count; i++) {
  		__uint8_t filetype;
  
++<<<<<<< HEAD
 +		off = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk,
++=======
+ 		off = xfs_dir2_db_off_to_dataptr(geo, geo->datablk,
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  				xfs_dir2_sf_get_offset(sfep));
  
 -		if (ctx->pos > off) {
 +		if (*offset > off) {
  			sfep = dp->d_ops->sf_nextentry(sfp, sfep);
  			continue;
  		}
@@@ -172,7 -168,7 +186,11 @@@
  		sfep = dp->d_ops->sf_nextentry(sfp, sfep);
  	}
  
++<<<<<<< HEAD
 +	*offset = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk + 1, 0) &
++=======
+ 	ctx->pos = xfs_dir2_db_off_to_dataptr(geo, geo->datablk + 1, 0) &
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  			0x7fffffff;
  	return 0;
  }
@@@ -203,7 -198,8 +221,11 @@@ xfs_dir2_block_getdents
  	/*
  	 * If the block number in the offset is out of range, we're done.
  	 */
++<<<<<<< HEAD
 +	if (xfs_dir2_dataptr_to_db(mp, *offset) > mp->m_dirdatablk)
++=======
+ 	if (xfs_dir2_dataptr_to_db(geo, ctx->pos) > geo->datablk)
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  		return 0;
  
  	error = xfs_dir3_block_read(NULL, dp, &bp);
@@@ -252,10 -248,11 +274,14 @@@
  		if ((char *)dep - (char *)hdr < wantoff)
  			continue;
  
++<<<<<<< HEAD
 +		cook = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk,
++=======
+ 		cook = xfs_dir2_db_off_to_dataptr(geo, geo->datablk,
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  					    (char *)dep - (char *)hdr);
 -
 -		ctx->pos = cook & 0x7fffffff;
  		filetype = dp->d_ops->data_get_ftype(dep);
 +
  		/*
  		 * If it didn't fit, set the final offset to here & return.
  		 */
@@@ -272,7 -268,7 +298,11 @@@
  	 * Reached the end of the block.
  	 * Set the offset to a non-existent block 1 and return.
  	 */
++<<<<<<< HEAD
 +	*offset = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk + 1, 0) &
++=======
+ 	ctx->pos = xfs_dir2_db_off_to_dataptr(geo, geo->datablk + 1, 0) &
++>>>>>>> 7dda6e8644a3 (xfs: convert directory segment limits to xfs_da_geometry)
  			0x7fffffff;
  	xfs_trans_brelse(NULL, bp);
  	return 0;
diff --git a/fs/xfs/xfs_da_btree.c b/fs/xfs/xfs_da_btree.c
index 4db5102d403a..862120244f30 100644
--- a/fs/xfs/xfs_da_btree.c
+++ b/fs/xfs/xfs_da_btree.c
@@ -598,7 +598,7 @@ xfs_da3_root_split(
 	 * Set up the new root node.
 	 */
 	error = xfs_da3_node_create(args,
-		(args->whichfork == XFS_DATA_FORK) ? mp->m_dirleafblk : 0,
+		(args->whichfork == XFS_DATA_FORK) ? args->geo->leafblk : 0,
 		level + 1, &bp, args->whichfork);
 	if (error)
 		return error;
@@ -616,10 +616,10 @@ xfs_da3_root_split(
 #ifdef DEBUG
 	if (oldroot->hdr.info.magic == cpu_to_be16(XFS_DIR2_LEAFN_MAGIC) ||
 	    oldroot->hdr.info.magic == cpu_to_be16(XFS_DIR3_LEAFN_MAGIC)) {
-		ASSERT(blk1->blkno >= mp->m_dirleafblk &&
-		       blk1->blkno < mp->m_dirfreeblk);
-		ASSERT(blk2->blkno >= mp->m_dirleafblk &&
-		       blk2->blkno < mp->m_dirfreeblk);
+		ASSERT(blk1->blkno >= args->geo->leafblk &&
+		       blk1->blkno < args->geo->freeblk);
+		ASSERT(blk2->blkno >= args->geo->leafblk &&
+		       blk2->blkno < args->geo->freeblk);
 	}
 #endif
 
@@ -894,8 +894,8 @@ xfs_da3_node_add(
 	ASSERT(oldblk->index >= 0 && oldblk->index <= nodehdr.count);
 	ASSERT(newblk->blkno != 0);
 	if (state->args->whichfork == XFS_DATA_FORK)
-		ASSERT(newblk->blkno >= state->mp->m_dirleafblk &&
-		       newblk->blkno < state->mp->m_dirfreeblk);
+		ASSERT(newblk->blkno >= state->args->geo->leafblk &&
+		       newblk->blkno < state->args->geo->freeblk);
 
 	/*
 	 * We may need to make some room before we insert the new node.
@@ -1472,7 +1472,7 @@ xfs_da3_node_lookup_int(
 	 * Descend thru the B-tree searching each level for the right
 	 * node to use, until the right hashval is found.
 	 */
-	blkno = (args->whichfork == XFS_DATA_FORK)? state->mp->m_dirleafblk : 0;
+	blkno = (args->whichfork == XFS_DATA_FORK)? args->geo->leafblk : 0;
 	for (blk = &state->path.blk[0], state->path.active = 1;
 			 state->path.active <= XFS_DA_NODE_MAXDEPTH;
 			 blk++, state->path.active++) {
@@ -2096,7 +2096,7 @@ xfs_da_grow_inode(
 	trace_xfs_da_grow_inode(args);
 
 	if (args->whichfork == XFS_DATA_FORK) {
-		bno = args->dp->i_mount->m_dirleafblk;
+		bno = args->geo->leafblk;
 		count = args->dp->i_mount->m_dirblkfsbs;
 	} else {
 		bno = 0;
@@ -2158,7 +2158,7 @@ xfs_da3_swap_lastblock(
 	w = args->whichfork;
 	ASSERT(w == XFS_DATA_FORK);
 	mp = dp->i_mount;
-	lastoff = mp->m_dirfreeblk;
+	lastoff = args->geo->freeblk;
 	error = xfs_bmap_last_before(tp, dp, &lastoff, w);
 	if (error)
 		return error;
@@ -2247,7 +2247,7 @@ xfs_da3_swap_lastblock(
 					sizeof(sib_info->back)));
 		sib_buf = NULL;
 	}
-	par_blkno = mp->m_dirleafblk;
+	par_blkno = args->geo->leafblk;
 	level = -1;
 	/*
 	 * Walk down the tree looking for the parent of the moved block.
diff --git a/fs/xfs/xfs_dir2.c b/fs/xfs/xfs_dir2.c
index b4210d6721ad..4f9273a65be7 100644
--- a/fs/xfs/xfs_dir2.c
+++ b/fs/xfs/xfs_dir2.c
@@ -142,9 +142,6 @@ xfs_da_mount(
 	/* XXX: these are to be removed as code is converted to use geo */
 	mp->m_dirblksize = mp->m_dir_geo->blksize;
 	mp->m_dirblkfsbs = mp->m_dir_geo->fsbcount;
-	mp->m_dirdatablk = mp->m_dir_geo->datablk;
-	mp->m_dirleafblk = mp->m_dir_geo->leafblk;
-	mp->m_dirfreeblk = mp->m_dir_geo->freeblk;
 	mp->m_dir_node_ents = mp->m_dir_geo->node_ents;
 	mp->m_dir_magicpct = mp->m_dir_geo->magicpct;
 	mp->m_attr_node_ents = mp->m_attr_geo->node_ents;
@@ -687,7 +684,7 @@ xfs_dir2_isleaf(
 	mp = dp->i_mount;
 	if ((rval = xfs_bmap_last_offset(tp, dp, &last, XFS_DATA_FORK)))
 		return rval;
-	*vp = last == mp->m_dirleafblk + (1 << mp->m_sb.sb_dirblklog);
+	*vp = last == mp->m_dir_geo->leafblk + (1 << mp->m_sb.sb_dirblklog);
 	return 0;
 }
 
@@ -760,7 +757,7 @@ xfs_dir2_shrink_inode(
 		 */
 		return error;
 	}
-	if (db == mp->m_dirdatablk)
+	if (db == args->geo->datablk)
 		ASSERT(bno == 0);
 	else
 		ASSERT(bno > 0);
diff --git a/fs/xfs/xfs_dir2_block.c b/fs/xfs/xfs_dir2_block.c
index 525993902ddb..4fdec3931b1d 100644
--- a/fs/xfs/xfs_dir2_block.c
+++ b/fs/xfs/xfs_dir2_block.c
@@ -136,7 +136,7 @@ xfs_dir3_block_read(
 	struct xfs_mount	*mp = dp->i_mount;
 	int			err;
 
-	err = xfs_da_read_buf(tp, dp, mp->m_dirdatablk, -1, bpp,
+	err = xfs_da_read_buf(tp, dp, mp->m_dir_geo->datablk, -1, bpp,
 				XFS_DATA_FORK, &xfs_dir3_block_buf_ops);
 	if (!err && tp)
 		xfs_trans_buf_set_type(tp, *bpp, XFS_BLFT_DIR_BLOCK_BUF);
@@ -966,7 +966,7 @@ xfs_dir2_leaf_to_block(
 	 * Read the data block if we don't already have it, give up if it fails.
 	 */
 	if (!dbp) {
-		error = xfs_dir3_data_read(tp, dp, mp->m_dirdatablk, -1, &dbp);
+		error = xfs_dir3_data_read(tp, dp, args->geo->datablk, -1, &dbp);
 		if (error)
 			return error;
 	}
@@ -1031,7 +1031,7 @@ xfs_dir2_leaf_to_block(
 	/*
 	 * Pitch the old leaf block.
 	 */
-	error = xfs_da_shrink_inode(args, mp->m_dirleafblk, lbp);
+	error = xfs_da_shrink_inode(args, args->geo->leafblk, lbp);
 	if (error)
 		return error;
 
* Unmerged path fs/xfs/xfs_dir2_data.c
diff --git a/fs/xfs/xfs_dir2_leaf.c b/fs/xfs/xfs_dir2_leaf.c
index 4d5097750d39..bf225e79d6f4 100644
--- a/fs/xfs/xfs_dir2_leaf.c
+++ b/fs/xfs/xfs_dir2_leaf.c
@@ -641,7 +641,7 @@ xfs_dir2_leaf_addname(
 	tp = args->trans;
 	mp = dp->i_mount;
 
-	error = xfs_dir3_leaf_read(tp, dp, mp->m_dirleafblk, -1, &lbp);
+	error = xfs_dir3_leaf_read(tp, dp, args->geo->leafblk, -1, &lbp);
 	if (error)
 		return error;
 
@@ -1231,7 +1231,7 @@ xfs_dir2_leaf_lookup_int(
 	tp = args->trans;
 	mp = dp->i_mount;
 
-	error = xfs_dir3_leaf_read(tp, dp, mp->m_dirleafblk, -1, &lbp);
+	error = xfs_dir3_leaf_read(tp, dp, args->geo->leafblk, -1, &lbp);
 	if (error)
 		return error;
 
@@ -1426,7 +1426,7 @@ xfs_dir2_leaf_removename(
 	 */
 	if (be16_to_cpu(bf[0].length) ==
 			mp->m_dirblksize - dp->d_ops->data_entry_offset) {
-		ASSERT(db != mp->m_dirdatablk);
+		ASSERT(db != args->geo->datablk);
 		if ((error = xfs_dir2_shrink_inode(args, db, dbp))) {
 			/*
 			 * Nope, can't get rid of it because it caused
@@ -1467,7 +1467,7 @@ xfs_dir2_leaf_removename(
 	/*
 	 * If the data block was not the first one, drop it.
 	 */
-	else if (db != mp->m_dirdatablk)
+	else if (db != args->geo->datablk)
 		dbp = NULL;
 
 	xfs_dir3_leaf_check(dp, lbp);
@@ -1718,7 +1718,7 @@ xfs_dir2_node_to_leaf(
 	 * that may have been left behind during no-space-reservation
 	 * operations.
 	 */
-	while (fo > mp->m_dirfreeblk) {
+	while (fo > args->geo->freeblk) {
 		if ((error = xfs_dir2_node_trim_free(args, fo, &rval))) {
 			return error;
 		}
@@ -1748,7 +1748,7 @@ xfs_dir2_node_to_leaf(
 	/*
 	 * Read the freespace block.
 	 */
-	error = xfs_dir2_free_read(tp, dp,  mp->m_dirfreeblk, &fbp);
+	error = xfs_dir2_free_read(tp, dp,  args->geo->freeblk, &fbp);
 	if (error)
 		return error;
 	free = fbp->b_addr;
* Unmerged path fs/xfs/xfs_dir2_readdir.c
diff --git a/fs/xfs/xfs_dir2_sf.c b/fs/xfs/xfs_dir2_sf.c
index 7aab8ec117ad..48b747630759 100644
--- a/fs/xfs/xfs_dir2_sf.c
+++ b/fs/xfs/xfs_dir2_sf.c
@@ -247,7 +247,7 @@ xfs_dir2_block_to_sf(
 
 	/* now we are done with the block, we can shrink the inode */
 	logflags = XFS_ILOG_CORE;
-	error = xfs_dir2_shrink_inode(args, mp->m_dirdatablk, bp);
+	error = xfs_dir2_shrink_inode(args, args->geo->datablk, bp);
 	if (error) {
 		ASSERT(error != ENOSPC);
 		goto out;
diff --git a/fs/xfs/xfs_mount.h b/fs/xfs/xfs_mount.h
index 2f4a123357f9..f60c1ff9c2b0 100644
--- a/fs/xfs/xfs_mount.h
+++ b/fs/xfs/xfs_mount.h
@@ -156,9 +156,6 @@ typedef struct xfs_mount {
 	const struct xfs_dir_ops *m_nondir_inode_ops; /* !dir inode ops */
 	int			m_dirblksize;	/* directory block sz--bytes */
 	int			m_dirblkfsbs;	/* directory block sz--fsbs */
-	xfs_dablk_t		m_dirdatablk;	/* blockno of dir data v2 */
-	xfs_dablk_t		m_dirleafblk;	/* blockno of dir non-data v2 */
-	xfs_dablk_t		m_dirfreeblk;	/* blockno of dirfreeindex v2 */
 	uint			m_chsize;	/* size of next field */
 	atomic_t		m_active_trans;	/* number trans frozen */
 #ifdef HAVE_PERCPU_SB
