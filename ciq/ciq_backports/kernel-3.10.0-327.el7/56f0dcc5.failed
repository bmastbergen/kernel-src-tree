tun: TUN_VNET_LE support, fix sparse warnings for virtio headers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 56f0dcc5aaeb9f56c40d480b87f9b4161f18ebc5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/56f0dcc5.failed

Pretty straight-forward: convert all fields to/from
virtio endian-ness.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Jason Wang <jasowang@redhat.com>




(cherry picked from commit 56f0dcc5aaeb9f56c40d480b87f9b4161f18ebc5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/tun.c
diff --cc drivers/net/tun.c
index 598e92640d18,c052bd6b2f23..000000000000
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@@ -107,15 -109,9 +107,15 @@@ do {								
   * overload it to mean fasync when stored there.
   */
  #define TUN_FASYNC	IFF_ATTACH_QUEUE
 +#define TUN_NO_PI	IFF_NO_PI
 +/* This flag has no real effect */
 +#define TUN_ONE_QUEUE	IFF_ONE_QUEUE
 +#define TUN_PERSIST 	IFF_PERSIST
 +#define TUN_VNET_HDR 	IFF_VNET_HDR
 +#define TUN_TAP_MQ      IFF_MULTI_QUEUE
  
  #define TUN_FEATURES (IFF_NO_PI | IFF_ONE_QUEUE | IFF_VNET_HDR | \
- 		      IFF_MULTI_QUEUE)
+ 		      IFF_VNET_LE | IFF_MULTI_QUEUE)
  #define GOODCOPY_LEN 128
  
  #define FLT_EXACT_COUNT 8
@@@ -1121,10 -1071,10 +1131,10 @@@ static ssize_t tun_get_user(struct tun_
  		offset += tun->vnet_hdr_sz;
  	}
  
 -	if ((tun->flags & TUN_TYPE_MASK) == IFF_TAP) {
 +	if ((tun->flags & TUN_TYPE_MASK) == TUN_TAP_DEV) {
  		align += NET_IP_ALIGN;
  		if (unlikely(len < ETH_HLEN ||
- 			     (gso.hdr_len && gso.hdr_len < ETH_HLEN)))
+ 			     (gso.hdr_len && tun16_to_cpu(tun, gso.hdr_len) < ETH_HLEN)))
  			return -EINVAL;
  	}
  
@@@ -1346,8 -1311,9 +1356,14 @@@ static ssize_t tun_put_user(struct tun_
  
  		if (skb->ip_summed == CHECKSUM_PARTIAL) {
  			gso.flags = VIRTIO_NET_HDR_F_NEEDS_CSUM;
++<<<<<<< HEAD
 +			gso.csum_start = skb_checksum_start_offset(skb);
 +			gso.csum_offset = skb->csum_offset;
++=======
+ 			gso.csum_start = cpu_to_tun16(tun, skb_checksum_start_offset(skb) +
+ 						      vlan_hlen);
+ 			gso.csum_offset = cpu_to_tun16(tun, skb->csum_offset);
++>>>>>>> 56f0dcc5aaeb (tun: TUN_VNET_LE support, fix sparse warnings for virtio headers)
  		} else if (skb->ip_summed == CHECKSUM_UNNECESSARY) {
  			gso.flags = VIRTIO_NET_HDR_F_DATA_VALID;
  		} /* else everything is zero */
* Unmerged path drivers/net/tun.c
