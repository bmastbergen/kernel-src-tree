bonding: add arp_ip_target netlink support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author sfeldma@cumulusnetworks.com <sfeldma@cumulusnetworks.com>
commit 7f28fa10e21376a10d3b9faad5836869465cc376
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7f28fa10.failed

Add IFLA_BOND_ARP_IP_TARGET to allow get/set of bonding parameter
arp_ip_target via netlink.

	Signed-off-by: Scott Feldman <sfeldma@cumulusnetworks.com>
	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7f28fa10e21376a10d3b9faad5836869465cc376)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bond_sysfs.c
#	drivers/net/bonding/bonding.h
#	include/uapi/linux/if_link.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,6d30e5db9e3c..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -23,6 -24,12 +23,15 @@@
  static const struct nla_policy bond_policy[IFLA_BOND_MAX + 1] = {
  	[IFLA_BOND_MODE]		= { .type = NLA_U8 },
  	[IFLA_BOND_ACTIVE_SLAVE]	= { .type = NLA_U32 },
++<<<<<<< HEAD
++=======
+ 	[IFLA_BOND_MIIMON]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_UPDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_DOWNDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_USE_CARRIER]		= { .type = NLA_U8 },
+ 	[IFLA_BOND_ARP_INTERVAL]	= { .type = NLA_U32 },
+ 	[IFLA_BOND_ARP_IP_TARGET]	= { .type = NLA_NESTED },
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  };
  
  static int bond_validate(struct nlattr *tb[], struct nlattr *data[])
@@@ -65,6 -76,61 +74,64 @@@ static int bond_changelink(struct net_d
  		if (err)
  			return err;
  	}
++<<<<<<< HEAD
++=======
+ 	if (data[IFLA_BOND_MIIMON]) {
+ 		miimon = nla_get_u32(data[IFLA_BOND_MIIMON]);
+ 
+ 		err = bond_option_miimon_set(bond, miimon);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_UPDELAY]) {
+ 		int updelay = nla_get_u32(data[IFLA_BOND_UPDELAY]);
+ 
+ 		err = bond_option_updelay_set(bond, updelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_DOWNDELAY]) {
+ 		int downdelay = nla_get_u32(data[IFLA_BOND_DOWNDELAY]);
+ 
+ 		err = bond_option_downdelay_set(bond, downdelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_USE_CARRIER]) {
+ 		int use_carrier = nla_get_u8(data[IFLA_BOND_USE_CARRIER]);
+ 
+ 		err = bond_option_use_carrier_set(bond, use_carrier);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_INTERVAL]) {
+ 		int arp_interval = nla_get_u32(data[IFLA_BOND_ARP_INTERVAL]);
+ 
+ 		if (arp_interval && miimon) {
+ 			pr_err("%s: ARP monitoring cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		err = bond_option_arp_interval_set(bond, arp_interval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_IP_TARGET]) {
+ 		__be32 targets[BOND_MAX_ARP_TARGETS] = { 0, };
+ 		struct nlattr *attr;
+ 		int i = 0, rem;
+ 
+ 		nla_for_each_nested(attr, data[IFLA_BOND_ARP_IP_TARGET], rem) {
+ 			__be32 target = nla_get_u32(attr);
+ 			targets[i++] = target;
+ 		}
+ 
+ 		err = bond_option_arp_ip_targets_set(bond, targets, i);
+ 		if (err)
+ 			return err;
+ 	}
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  	return 0;
  }
  
@@@ -83,7 -149,15 +150,19 @@@ static int bond_newlink(struct net *src
  static size_t bond_get_size(const struct net_device *bond_dev)
  {
  	return nla_total_size(sizeof(u8)) +	/* IFLA_BOND_MODE */
++<<<<<<< HEAD
 +		nla_total_size(sizeof(u32));	/* IFLA_BOND_ACTIVE_SLAVE */
++=======
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ACTIVE_SLAVE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIIMON */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_UPDELAY */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_DOWNDELAY */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_USE_CARRIER */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_INTERVAL */
+ 						/* IFLA_BOND_ARP_IP_TARGET */
+ 		nla_total_size(sizeof(u32)) * BOND_MAX_ARP_TARGETS +
+ 		0;
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  }
  
  static int bond_fill_info(struct sk_buff *skb,
@@@ -91,11 -165,50 +170,55 @@@
  {
  	struct bonding *bond = netdev_priv(bond_dev);
  	struct net_device *slave_dev = bond_option_active_slave_get(bond);
+ 	struct nlattr *targets;
+ 	int i, targets_added;
  
 -	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode))
 +	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode) ||
 +	    (slave_dev &&
 +	     nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex)))
  		goto nla_put_failure;
++<<<<<<< HEAD
++=======
+ 
+ 	if (slave_dev &&
+ 	    nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIIMON, bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_UPDELAY,
+ 			bond->params.updelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_DOWNDELAY,
+ 			bond->params.downdelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_USE_CARRIER, bond->params.use_carrier))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_INTERVAL, bond->params.arp_interval))
+ 		goto nla_put_failure;
+ 
+ 	targets = nla_nest_start(skb, IFLA_BOND_ARP_IP_TARGET);
+ 	if (!targets)
+ 		goto nla_put_failure;
+ 
+ 	targets_added = 0;
+ 	for (i = 0; i < BOND_MAX_ARP_TARGETS; i++) {
+ 		if (bond->params.arp_targets[i]) {
+ 			nla_put_u32(skb, i, bond->params.arp_targets[i]);
+ 			targets_added = 1;
+ 		}
+ 	}
+ 
+ 	if (targets_added)
+ 		nla_nest_end(skb, targets);
+ 	else
+ 		nla_nest_cancel(skb, targets);
+ 
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  	return 0;
  
  nla_put_failure:
diff --cc drivers/net/bonding/bond_sysfs.c
index 739d4dbe8629,a443bbd0fe86..000000000000
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@@ -656,84 -552,30 +656,108 @@@ static ssize_t bonding_store_arp_target
  					 const char *buf, size_t count)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
 +	struct slave *slave;
 +	__be32 newtarget, *targets;
 +	unsigned long *targets_rx;
 +	int ind, i, j, ret = -EINVAL;
 +
 +	targets = bond->params.arp_targets;
 +	newtarget = in_aton(buf + 1);
 +	/* look for adds */
 +	if (buf[0] == '+') {
 +		if ((newtarget == 0) || (newtarget == htonl(INADDR_BROADCAST))) {
 +			pr_err("%s: invalid ARP target %pI4 specified for addition\n",
 +			       bond->dev->name, &newtarget);
 +			goto out;
 +		}
 +
 +		if (bond_get_targets_ip(targets, newtarget) != -1) { /* dup */
 +			pr_err("%s: ARP target %pI4 is already present\n",
 +			       bond->dev->name, &newtarget);
 +			goto out;
 +		}
 +
 +		ind = bond_get_targets_ip(targets, 0); /* first free slot */
 +		if (ind == -1) {
 +			pr_err("%s: ARP target table is full!\n",
 +			       bond->dev->name);
 +			goto out;
 +		}
 +
 +		pr_info("%s: adding ARP target %pI4.\n", bond->dev->name,
 +			 &newtarget);
 +		/* not to race with bond_arp_rcv */
 +		write_lock_bh(&bond->lock);
 +		bond_for_each_slave(bond, slave, i)
 +			slave->target_last_arp_rx[ind] = jiffies;
 +		targets[ind] = newtarget;
 +		write_unlock_bh(&bond->lock);
 +	} else if (buf[0] == '-')	{
 +		if ((newtarget == 0) || (newtarget == htonl(INADDR_BROADCAST))) {
 +			pr_err("%s: invalid ARP target %pI4 specified for removal\n",
 +			       bond->dev->name, &newtarget);
 +			goto out;
 +		}
 +
 +		ind = bond_get_targets_ip(targets, newtarget);
 +		if (ind == -1) {
 +			pr_err("%s: unable to remove nonexistent ARP target %pI4.\n",
 +				bond->dev->name, &newtarget);
 +			goto out;
 +		}
 +
 +		if (ind == 0 && !targets[1] && bond->params.arp_interval)
 +			pr_warn("%s: removing last arp target with arp_interval on\n",
 +				bond->dev->name);
 +
 +		pr_info("%s: removing ARP target %pI4.\n", bond->dev->name,
 +			&newtarget);
 +
 +		write_lock_bh(&bond->lock);
 +		bond_for_each_slave(bond, slave, i) {
 +			targets_rx = slave->target_last_arp_rx;
 +			j = ind;
 +			for (; (j < BOND_MAX_ARP_TARGETS-1) && targets[j+1]; j++)
 +				targets_rx[j] = targets_rx[j+1];
 +			targets_rx[j] = 0;
 +		}
 +		for (i = ind; (i < BOND_MAX_ARP_TARGETS-1) && targets[i+1]; i++)
 +			targets[i] = targets[i+1];
 +		targets[i] = 0;
 +		write_unlock_bh(&bond->lock);
 +	} else {
++=======
+ 	__be32 target;
+ 	int ret = -EPERM;
+ 
+ 	if (!in4_pton(buf + 1, -1, (u8 *)&target, -1, NULL)) {
+ 		pr_err("%s: invalid ARP target %pI4 specified\n",
+ 		       bond->dev->name, &target);
+ 		return -EPERM;
+ 	}
+ 
+ 	if (!rtnl_trylock())
+ 		return restart_syscall();
+ 
+ 	if (buf[0] == '+')
+ 		ret = bond_option_arp_ip_target_add(bond, target);
+ 	else if (buf[0] == '-')
+ 		ret = bond_option_arp_ip_target_rem(bond, target);
+ 	else
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  		pr_err("no command found in arp_ip_targets file for bond %s. Use +<addr> or -<addr>.\n",
  		       bond->dev->name);
- 		ret = -EPERM;
- 		goto out;
- 	}
  
++<<<<<<< HEAD
 +	ret = count;
 +out:
++=======
+ 	if (!ret)
+ 		ret = count;
+ 
+ 	rtnl_unlock();
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  	return ret;
  }
  static DEVICE_ATTR(arp_ip_target, S_IRUGO | S_IWUSR , bonding_show_arp_targets, bonding_store_arp_targets);
diff --cc drivers/net/bonding/bonding.h
index 743d73f75728,dcdc8095c169..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -442,6 -437,19 +442,22 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ int bond_option_mode_set(struct bonding *bond, int mode);
+ int bond_option_active_slave_set(struct bonding *bond, struct net_device *slave_dev);
+ int bond_option_miimon_set(struct bonding *bond, int miimon);
+ int bond_option_updelay_set(struct bonding *bond, int updelay);
+ int bond_option_downdelay_set(struct bonding *bond, int downdelay);
+ int bond_option_use_carrier_set(struct bonding *bond, int use_carrier);
+ int bond_option_arp_interval_set(struct bonding *bond, int arp_interval);
+ int bond_option_arp_ip_targets_set(struct bonding *bond, __be32 *targets,
+ 				   int count);
+ int bond_option_arp_ip_target_add(struct bonding *bond, __be32 target);
+ int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target);
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
diff --cc include/uapi/linux/if_link.h
index 4efe6bcb6e67,5b0c44469279..000000000000
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@@ -340,6 -331,12 +340,15 @@@ enum 
  	IFLA_BOND_UNSPEC,
  	IFLA_BOND_MODE,
  	IFLA_BOND_ACTIVE_SLAVE,
++<<<<<<< HEAD
++=======
+ 	IFLA_BOND_MIIMON,
+ 	IFLA_BOND_UPDELAY,
+ 	IFLA_BOND_DOWNDELAY,
+ 	IFLA_BOND_USE_CARRIER,
+ 	IFLA_BOND_ARP_INTERVAL,
+ 	IFLA_BOND_ARP_IP_TARGET,
++>>>>>>> 7f28fa10e213 (bonding: add arp_ip_target netlink support)
  	__IFLA_BOND_MAX,
  };
  
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_sysfs.c
* Unmerged path drivers/net/bonding/bonding.h
* Unmerged path include/uapi/linux/if_link.h
