sfc: only use vadaptor stats if firmware is capable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Bert Kenward <bkenward@solarflare.com>
commit fbe4307e9ffd9b9c9d4631a37c8f16080da8df85
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/fbe4307e.failed

Some of the stats handling code differs based on SR-IOV support,
and SRIOV support is only available if full-featured firmware is
used.
Do not use vadaptor stats if firmware mode is not set to
full-featured.

	Signed-off-by: Shradha Shah <sshah@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit fbe4307e9ffd9b9c9d4631a37c8f16080da8df85)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/ef10.c
diff --cc drivers/net/ethernet/sfc/ef10.c
index 95f33d51af2f,b1a4ea21c91c..000000000000
--- a/drivers/net/ethernet/sfc/ef10.c
+++ b/drivers/net/ethernet/sfc/ef10.c
@@@ -994,7 -1263,76 +994,80 @@@ static size_t efx_ef10_describe_stats(s
  				      mask, names);
  }
  
++<<<<<<< HEAD
 +static int efx_ef10_try_update_nic_stats(struct efx_nic *efx)
++=======
+ static size_t efx_ef10_update_stats_common(struct efx_nic *efx, u64 *full_stats,
+ 					   struct rtnl_link_stats64 *core_stats)
+ {
+ 	DECLARE_BITMAP(mask, EF10_STAT_COUNT);
+ 	struct efx_ef10_nic_data *nic_data = efx->nic_data;
+ 	u64 *stats = nic_data->stats;
+ 	size_t stats_count = 0, index;
+ 
+ 	efx_ef10_get_stat_mask(efx, mask);
+ 
+ 	if (full_stats) {
+ 		for_each_set_bit(index, mask, EF10_STAT_COUNT) {
+ 			if (efx_ef10_stat_desc[index].name) {
+ 				*full_stats++ = stats[index];
+ 				++stats_count;
+ 			}
+ 		}
+ 	}
+ 
+ 	if (!core_stats)
+ 		return stats_count;
+ 
+ 	if (nic_data->datapath_caps &
+ 			1 << MC_CMD_GET_CAPABILITIES_OUT_EVB_LBN) {
+ 		/* Use vadaptor stats. */
+ 		core_stats->rx_packets = stats[EF10_STAT_rx_unicast] +
+ 					 stats[EF10_STAT_rx_multicast] +
+ 					 stats[EF10_STAT_rx_broadcast];
+ 		core_stats->tx_packets = stats[EF10_STAT_tx_unicast] +
+ 					 stats[EF10_STAT_tx_multicast] +
+ 					 stats[EF10_STAT_tx_broadcast];
+ 		core_stats->rx_bytes = stats[EF10_STAT_rx_unicast_bytes] +
+ 				       stats[EF10_STAT_rx_multicast_bytes] +
+ 				       stats[EF10_STAT_rx_broadcast_bytes];
+ 		core_stats->tx_bytes = stats[EF10_STAT_tx_unicast_bytes] +
+ 				       stats[EF10_STAT_tx_multicast_bytes] +
+ 				       stats[EF10_STAT_tx_broadcast_bytes];
+ 		core_stats->rx_dropped = stats[GENERIC_STAT_rx_nodesc_trunc] +
+ 					 stats[GENERIC_STAT_rx_noskb_drops];
+ 		core_stats->multicast = stats[EF10_STAT_rx_multicast];
+ 		core_stats->rx_crc_errors = stats[EF10_STAT_rx_bad];
+ 		core_stats->rx_fifo_errors = stats[EF10_STAT_rx_overflow];
+ 		core_stats->rx_errors = core_stats->rx_crc_errors;
+ 		core_stats->tx_errors = stats[EF10_STAT_tx_bad];
+ 	} else {
+ 		/* Use port stats. */
+ 		core_stats->rx_packets = stats[EF10_STAT_port_rx_packets];
+ 		core_stats->tx_packets = stats[EF10_STAT_port_tx_packets];
+ 		core_stats->rx_bytes = stats[EF10_STAT_port_rx_bytes];
+ 		core_stats->tx_bytes = stats[EF10_STAT_port_tx_bytes];
+ 		core_stats->rx_dropped = stats[EF10_STAT_port_rx_nodesc_drops] +
+ 					 stats[GENERIC_STAT_rx_nodesc_trunc] +
+ 					 stats[GENERIC_STAT_rx_noskb_drops];
+ 		core_stats->multicast = stats[EF10_STAT_port_rx_multicast];
+ 		core_stats->rx_length_errors =
+ 				stats[EF10_STAT_port_rx_gtjumbo] +
+ 				stats[EF10_STAT_port_rx_length_error];
+ 		core_stats->rx_crc_errors = stats[EF10_STAT_port_rx_bad];
+ 		core_stats->rx_frame_errors =
+ 				stats[EF10_STAT_port_rx_align_error];
+ 		core_stats->rx_fifo_errors = stats[EF10_STAT_port_rx_overflow];
+ 		core_stats->rx_errors = (core_stats->rx_length_errors +
+ 					 core_stats->rx_crc_errors +
+ 					 core_stats->rx_frame_errors);
+ 	}
+ 
+ 	return stats_count;
+ }
+ 
+ static int efx_ef10_try_update_nic_stats_pf(struct efx_nic *efx)
++>>>>>>> fbe4307e9ffd (sfc: only use vadaptor stats if firmware is capable)
  {
  	struct efx_ef10_nic_data *nic_data = efx->nic_data;
  	DECLARE_BITMAP(mask, EF10_STAT_COUNT);
* Unmerged path drivers/net/ethernet/sfc/ef10.c
