bonding: convert arp_interval to use the new option API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Nikolay Aleksandrov <nikolay@redhat.com>
commit 7bdb04ed0dbf9f0e94110be43db4f8bb7df58de2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7bdb04ed.failed

This patch adds the necessary changes so arp_interval would use
the new bonding option API. The "default" definition has been removed as
it was 0.

	Signed-off-by: Nikolay Aleksandrov <nikolay@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7bdb04ed0dbf9f0e94110be43db4f8bb7df58de2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bond_options.h
#	drivers/net/bonding/bond_sysfs.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,74463f3db8b6..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -65,6 -129,190 +65,193 @@@ static int bond_changelink(struct net_d
  		if (err)
  			return err;
  	}
++<<<<<<< HEAD
++=======
+ 	if (data[IFLA_BOND_MIIMON]) {
+ 		miimon = nla_get_u32(data[IFLA_BOND_MIIMON]);
+ 
+ 		err = bond_option_miimon_set(bond, miimon);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_UPDELAY]) {
+ 		int updelay = nla_get_u32(data[IFLA_BOND_UPDELAY]);
+ 
+ 		err = bond_option_updelay_set(bond, updelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_DOWNDELAY]) {
+ 		int downdelay = nla_get_u32(data[IFLA_BOND_DOWNDELAY]);
+ 
+ 		err = bond_option_downdelay_set(bond, downdelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_USE_CARRIER]) {
+ 		int use_carrier = nla_get_u8(data[IFLA_BOND_USE_CARRIER]);
+ 
+ 		err = bond_option_use_carrier_set(bond, use_carrier);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_INTERVAL]) {
+ 		int arp_interval = nla_get_u32(data[IFLA_BOND_ARP_INTERVAL]);
+ 
+ 		if (arp_interval && miimon) {
+ 			pr_err("%s: ARP monitoring cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		bond_opt_initval(&newval, arp_interval);
+ 		err = __bond_opt_set(bond, BOND_OPT_ARP_INTERVAL, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_IP_TARGET]) {
+ 		__be32 targets[BOND_MAX_ARP_TARGETS] = { 0, };
+ 		struct nlattr *attr;
+ 		int i = 0, rem;
+ 
+ 		nla_for_each_nested(attr, data[IFLA_BOND_ARP_IP_TARGET], rem) {
+ 			__be32 target = nla_get_be32(attr);
+ 			targets[i++] = target;
+ 		}
+ 
+ 		err = bond_option_arp_ip_targets_set(bond, targets, i);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_VALIDATE]) {
+ 		int arp_validate = nla_get_u32(data[IFLA_BOND_ARP_VALIDATE]);
+ 
+ 		if (arp_validate && miimon) {
+ 			pr_err("%s: ARP validating cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		bond_opt_initval(&newval, arp_validate);
+ 		err = __bond_opt_set(bond, BOND_OPT_ARP_VALIDATE, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_ALL_TARGETS]) {
+ 		int arp_all_targets =
+ 			nla_get_u32(data[IFLA_BOND_ARP_ALL_TARGETS]);
+ 
+ 		bond_opt_initval(&newval, arp_all_targets);
+ 		err = __bond_opt_set(bond, BOND_OPT_ARP_ALL_TARGETS, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY]) {
+ 		int ifindex = nla_get_u32(data[IFLA_BOND_PRIMARY]);
+ 		struct net_device *dev;
+ 		char *primary = "";
+ 
+ 		dev = __dev_get_by_index(dev_net(bond_dev), ifindex);
+ 		if (dev)
+ 			primary = dev->name;
+ 
+ 		err = bond_option_primary_set(bond, primary);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PRIMARY_RESELECT]) {
+ 		int primary_reselect =
+ 			nla_get_u8(data[IFLA_BOND_PRIMARY_RESELECT]);
+ 
+ 		err = bond_option_primary_reselect_set(bond, primary_reselect);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_FAIL_OVER_MAC]) {
+ 		int fail_over_mac =
+ 			nla_get_u8(data[IFLA_BOND_FAIL_OVER_MAC]);
+ 
+ 		bond_opt_initval(&newval, fail_over_mac);
+ 		err = __bond_opt_set(bond, BOND_OPT_FAIL_OVER_MAC, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_XMIT_HASH_POLICY]) {
+ 		int xmit_hash_policy =
+ 			nla_get_u8(data[IFLA_BOND_XMIT_HASH_POLICY]);
+ 
+ 		bond_opt_initval(&newval, xmit_hash_policy);
+ 		err = __bond_opt_set(bond, BOND_OPT_XMIT_HASH, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_RESEND_IGMP]) {
+ 		int resend_igmp =
+ 			nla_get_u32(data[IFLA_BOND_RESEND_IGMP]);
+ 
+ 		err = bond_option_resend_igmp_set(bond, resend_igmp);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_NUM_PEER_NOTIF]) {
+ 		int num_peer_notif =
+ 			nla_get_u8(data[IFLA_BOND_NUM_PEER_NOTIF]);
+ 
+ 		err = bond_option_num_peer_notif_set(bond, num_peer_notif);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ALL_SLAVES_ACTIVE]) {
+ 		int all_slaves_active =
+ 			nla_get_u8(data[IFLA_BOND_ALL_SLAVES_ACTIVE]);
+ 
+ 		err = bond_option_all_slaves_active_set(bond,
+ 							all_slaves_active);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_MIN_LINKS]) {
+ 		int min_links =
+ 			nla_get_u32(data[IFLA_BOND_MIN_LINKS]);
+ 
+ 		err = bond_option_min_links_set(bond, min_links);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_LP_INTERVAL]) {
+ 		int lp_interval =
+ 			nla_get_u32(data[IFLA_BOND_LP_INTERVAL]);
+ 
+ 		err = bond_option_lp_interval_set(bond, lp_interval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_PACKETS_PER_SLAVE]) {
+ 		int packets_per_slave =
+ 			nla_get_u32(data[IFLA_BOND_PACKETS_PER_SLAVE]);
+ 
+ 		bond_opt_initval(&newval, packets_per_slave);
+ 		err = __bond_opt_set(bond, BOND_OPT_PACKETS_PER_SLAVE, &newval);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_AD_LACP_RATE]) {
+ 		int lacp_rate =
+ 			nla_get_u8(data[IFLA_BOND_AD_LACP_RATE]);
+ 
+ 		err = bond_option_lacp_rate_set(bond, lacp_rate);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_AD_SELECT]) {
+ 		int ad_select =
+ 			nla_get_u8(data[IFLA_BOND_AD_SELECT]);
+ 
+ 		err = bond_option_ad_select_set(bond, ad_select);
+ 		if (err)
+ 			return err;
+ 	}
++>>>>>>> 7bdb04ed0dbf (bonding: convert arp_interval to use the new option API)
  	return 0;
  }
  
diff --cc drivers/net/bonding/bond_sysfs.c
index 9519d678a368,585c38c5562c..000000000000
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@@ -569,63 -436,12 +569,72 @@@ static ssize_t bonding_store_arp_interv
  					  const char *buf, size_t count)
  {
  	struct bonding *bond = to_bond(d);
++<<<<<<< HEAD
 +	int new_value, ret = count;
 +
 +	if (!rtnl_trylock())
 +		return restart_syscall();
 +	if (sscanf(buf, "%d", &new_value) != 1) {
 +		pr_err("%s: no arp_interval value specified.\n",
 +		       bond->dev->name);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	if (new_value < 0) {
 +		pr_err("%s: Invalid arp_interval value %d not in range 0-%d; rejected.\n",
 +		       bond->dev->name, new_value, INT_MAX);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	if (bond->params.mode == BOND_MODE_ALB ||
 +	    bond->params.mode == BOND_MODE_TLB ||
 +	    bond->params.mode == BOND_MODE_8023AD) {
 +		pr_info("%s: ARP monitoring cannot be used with ALB/TLB/802.3ad. Only MII monitoring is supported on %s.\n",
 +			bond->dev->name, bond->dev->name);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	pr_info("%s: Setting ARP monitoring interval to %d.\n",
 +		bond->dev->name, new_value);
 +	bond->params.arp_interval = new_value;
 +	if (new_value) {
 +		if (bond->params.miimon) {
 +			pr_info("%s: ARP monitoring cannot be used with MII monitoring. %s Disabling MII monitoring.\n",
 +				bond->dev->name, bond->dev->name);
 +			bond->params.miimon = 0;
 +		}
 +		if (!bond->params.arp_targets[0])
 +			pr_info("%s: ARP monitoring has been set up, but no ARP targets have been specified.\n",
 +				bond->dev->name);
 +	}
 +	if (bond->dev->flags & IFF_UP) {
 +		/* If the interface is up, we may need to fire off
 +		 * the ARP timer.  If the interface is down, the
 +		 * timer will get fired off when the open function
 +		 * is called.
 +		 */
 +		if (!new_value) {
 +			if (bond->params.arp_validate)
 +				bond->recv_probe = NULL;
 +			cancel_delayed_work_sync(&bond->arp_work);
 +		} else {
 +			/* arp_validate can be set only in active-backup mode */
 +			if (bond->params.arp_validate)
 +				bond->recv_probe = bond_arp_rcv;
 +			cancel_delayed_work_sync(&bond->mii_work);
 +			queue_delayed_work(bond->wq, &bond->arp_work, 0);
 +		}
 +	}
 +out:
 +	rtnl_unlock();
++=======
+ 	int ret;
+ 
+ 	ret = bond_opt_tryset_rtnl(bond, BOND_OPT_ARP_INTERVAL, (char *)buf);
+ 	if (!ret)
+ 		ret = count;
+ 
++>>>>>>> 7bdb04ed0dbf (bonding: convert arp_interval to use the new option API)
  	return ret;
  }
  static DEVICE_ATTR(arp_interval, S_IRUGO | S_IWUSR,
diff --cc drivers/net/bonding/bonding.h
index 6097f0c04b95,7d39588b17db..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -442,6 -452,29 +442,32 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ int bond_option_active_slave_set(struct bonding *bond, struct net_device *slave_dev);
+ int bond_option_miimon_set(struct bonding *bond, int miimon);
+ int bond_option_updelay_set(struct bonding *bond, int updelay);
+ int bond_option_downdelay_set(struct bonding *bond, int downdelay);
+ int bond_option_use_carrier_set(struct bonding *bond, int use_carrier);
+ int bond_option_arp_ip_targets_set(struct bonding *bond, __be32 *targets,
+ 				   int count);
+ int bond_option_arp_ip_target_add(struct bonding *bond, __be32 target);
+ int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target);
+ int bond_option_primary_set(struct bonding *bond, const char *primary);
+ int bond_option_primary_reselect_set(struct bonding *bond,
+ 				     int primary_reselect);
+ int bond_option_resend_igmp_set(struct bonding *bond, int resend_igmp);
+ int bond_option_num_peer_notif_set(struct bonding *bond, int num_peer_notif);
+ int bond_option_all_slaves_active_set(struct bonding *bond,
+ 				      int all_slaves_active);
+ int bond_option_min_links_set(struct bonding *bond, int min_links);
+ int bond_option_lp_interval_set(struct bonding *bond, int min_links);
+ int bond_option_lacp_rate_set(struct bonding *bond, int lacp_rate);
+ int bond_option_ad_select_set(struct bonding *bond, int ad_select);
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
+ const char *bond_slave_link_status(s8 link);
++>>>>>>> 7bdb04ed0dbf (bonding: convert arp_interval to use the new option API)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index 38a1c7877edd..c10982873a5f 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -85,7 +85,6 @@
 
 /* monitor all links that often (in milliseconds). <=0 disables monitoring */
 #define BOND_LINK_MON_INTERV	0
-#define BOND_LINK_ARP_INTERV	0
 
 static int max_bonds	= BOND_DEFAULT_MAX_BONDS;
 static int tx_queues	= BOND_DEFAULT_TX_QUEUES;
@@ -101,7 +100,7 @@ static char *lacp_rate;
 static int min_links;
 static char *ad_select;
 static char *xmit_hash_policy;
-static int arp_interval = BOND_LINK_ARP_INTERV;
+static int arp_interval;
 static char *arp_ip_target[BOND_MAX_ARP_TARGETS];
 static char *arp_validate;
 static char *arp_all_targets;
@@ -4521,9 +4520,9 @@ static int bond_check_params(struct bond_params *params)
 	}
 
 	if (arp_interval < 0) {
-		pr_warning("Warning: arp_interval module parameter (%d) , not in range 0-%d, so it was reset to %d\n",
-			   arp_interval, INT_MAX, BOND_LINK_ARP_INTERV);
-		arp_interval = BOND_LINK_ARP_INTERV;
+		pr_warning("Warning: arp_interval module parameter (%d) , not in range 0-%d, so it was reset to 0\n",
+			   arp_interval, INT_MAX);
+		arp_interval = 0;
 	}
 
 	for (arp_ip_count = 0, i = 0;
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_options.h
* Unmerged path drivers/net/bonding/bond_sysfs.c
* Unmerged path drivers/net/bonding/bonding.h
