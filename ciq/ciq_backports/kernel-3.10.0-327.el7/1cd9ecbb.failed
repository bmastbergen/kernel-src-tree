sfc: get the PF number and record in nic_data

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Daniel Pieczko <dpieczko@solarflare.com>
commit 1cd9ecbbe6e9261578510962ad899415053acc1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/1cd9ecbb.failed

Use MC_CMD_GET_FUNCTION_INFO to record the PF number in nic_data.
This will be needed when assigned vports to VFs.

	Signed-off-by: Shradha Shah <sshah@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1cd9ecbbe6e9261578510962ad899415053acc1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/nic.h
diff --cc drivers/net/ethernet/sfc/nic.h
index ce965cc22a3b,3ab88401a5fd..000000000000
--- a/drivers/net/ethernet/sfc/nic.h
+++ b/drivers/net/ethernet/sfc/nic.h
@@@ -492,6 -494,8 +492,11 @@@ enum 
   * @rx_dpcpu_fw_id: Firmware ID of the RxDPCPU
   * @tx_dpcpu_fw_id: Firmware ID of the TxDPCPU
   * @vport_id: The function's vport ID, only relevant for PFs
++<<<<<<< HEAD
++=======
+  * @must_probe_vswitching: Flag: vswitching has yet to be setup after MC reboot
+  * @pf_index: The number for this PF, or the parent PF if this is a VF
++>>>>>>> 1cd9ecbbe6e9 (sfc: get the PF number and record in nic_data)
   */
  struct efx_ef10_nic_data {
  	struct efx_buffer mcdi_buf;
@@@ -513,6 -517,8 +518,11 @@@
  	unsigned int rx_dpcpu_fw_id;
  	unsigned int tx_dpcpu_fw_id;
  	unsigned int vport_id;
++<<<<<<< HEAD
++=======
+ 	bool must_probe_vswitching;
+ 	unsigned int pf_index;
++>>>>>>> 1cd9ecbbe6e9 (sfc: get the PF number and record in nic_data)
  };
  
  int efx_init_sriov(void);
diff --git a/drivers/net/ethernet/sfc/ef10.c b/drivers/net/ethernet/sfc/ef10.c
index 61edbf385044..96b77895c0ce 100644
--- a/drivers/net/ethernet/sfc/ef10.c
+++ b/drivers/net/ethernet/sfc/ef10.c
@@ -96,6 +96,24 @@ static unsigned int efx_ef10_mem_map_size(struct efx_nic *efx)
 	return resource_size(&efx->pci_dev->resource[EFX_MEM_BAR]);
 }
 
+static int efx_ef10_get_pf_index(struct efx_nic *efx)
+{
+	MCDI_DECLARE_BUF(outbuf, MC_CMD_GET_FUNCTION_INFO_OUT_LEN);
+	struct efx_ef10_nic_data *nic_data = efx->nic_data;
+	size_t outlen;
+	int rc;
+
+	rc = efx_mcdi_rpc(efx, MC_CMD_GET_FUNCTION_INFO, NULL, 0, outbuf,
+			  sizeof(outbuf), &outlen);
+	if (rc)
+		return rc;
+	if (outlen < sizeof(outbuf))
+		return -EIO;
+
+	nic_data->pf_index = MCDI_DWORD(outbuf, GET_FUNCTION_INFO_OUT_PF);
+	return 0;
+}
+
 static int efx_ef10_init_datapath_caps(struct efx_nic *efx)
 {
 	MCDI_DECLARE_BUF(outbuf, MC_CMD_GET_CAPABILITIES_OUT_LEN);
@@ -240,6 +258,10 @@ static int efx_ef10_probe(struct efx_nic *efx)
 	if (rc)
 		goto fail3;
 
+	rc = efx_ef10_get_pf_index(efx);
+	if (rc)
+		goto fail3;
+
 	rc = efx_ef10_init_datapath_caps(efx);
 	if (rc < 0)
 		goto fail3;
* Unmerged path drivers/net/ethernet/sfc/nic.h
