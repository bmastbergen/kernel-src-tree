IB/mlx4: Set VF to read from QP counters

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [infiniband] mlx4: Set VF to read from QP counters (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 96.10%
commit-author Eran Ben Elisha <eranbe@mellanox.com>
commit 7193a141eb74579ce7ff242c9f842a5c36c4bf69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7193a141.failed

As IB VFs are not capable to read the port counters through MADs,
move there to read their own QP counters to gather statistics.

	Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7193a141eb74579ce7ff242c9f842a5c36c4bf69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx4/mad.c
diff --cc drivers/infiniband/hw/mlx4/mad.c
index f2b6b625c2e9,bc698b14683f..000000000000
--- a/drivers/infiniband/hw/mlx4/mad.c
+++ b/drivers/infiniband/hw/mlx4/mad.c
@@@ -868,21 -866,15 +868,26 @@@ static int iboe_process_mad(struct ib_d
  }
  
  int mlx4_ib_process_mad(struct ib_device *ibdev, int mad_flags, u8 port_num,
 -			struct ib_wc *in_wc, struct ib_grh *in_grh,
 -			struct ib_mad *in_mad, struct ib_mad *out_mad)
 +			const struct ib_wc *in_wc, const struct ib_grh *in_grh,
 +			const struct ib_mad_hdr *in, size_t in_mad_size,
 +			struct ib_mad_hdr *out, size_t *out_mad_size,
 +			u16 *out_mad_pkey_index)
  {
++<<<<<<< HEAD
 +	const struct ib_mad *in_mad = (const struct ib_mad *)in;
 +	struct ib_mad *out_mad = (struct ib_mad *)out;
 +
 +	BUG_ON(in_mad_size != sizeof(*in_mad) ||
 +	       *out_mad_size != sizeof(*out_mad));
 +
++=======
+ 	struct mlx4_ib_dev *dev = to_mdev(ibdev);
++>>>>>>> 7193a141eb74 (IB/mlx4: Set VF to read from QP counters)
  	switch (rdma_port_get_link_layer(ibdev, port_num)) {
  	case IB_LINK_LAYER_INFINIBAND:
- 		return ib_process_mad(ibdev, mad_flags, port_num, in_wc,
- 				      in_grh, in_mad, out_mad);
+ 		if (!mlx4_is_slave(dev->dev))
+ 			return ib_process_mad(ibdev, mad_flags, port_num, in_wc,
+ 					      in_grh, in_mad, out_mad);
  	case IB_LINK_LAYER_ETHERNET:
  		return iboe_process_mad(ibdev, mad_flags, port_num, in_wc,
  					  in_grh, in_mad, out_mad);
* Unmerged path drivers/infiniband/hw/mlx4/mad.c
