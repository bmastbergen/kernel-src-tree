i40e: fixup padding issue in get_cee_dcb_cfg_v1_resp

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Shannon Nelson <shannon.nelson@intel.com>
commit 17351401fec6df1e6032054cd3c2ea03ad917a92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/17351401.failed

The struct i40e_aqc_get_cee_dcb_cfg_v1_resp was originally defined with
word boundary layout issues, which most compilers deal with by silently
adding padding, making the actual struct larger than designed.
This patch adds an extra byte in fields reserved3 and reserved4 to directly
acknowledge that padding.

Because the struct doesn't actually change in size or layout, this doesn't
constitute a change in the API.

Change-ID: I53fa4741b73fa255621232a85fba000b0e223015
	Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 17351401fec6df1e6032054cd3c2ea03ad917a92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
diff --cc drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
index 000600b6613b,b840fabe3997..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
@@@ -2030,10 -2051,107 +2030,109 @@@ struct i40e_aqc_lldp_start 
  
  I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_start);
  
 -/* Get CEE DCBX Oper Config (0x0A07)
 - * uses the generic descriptor struct
 - * returns below as indirect response
 +/* Apply MIB changes (0x0A07)
 + * uses the generic struc as it contains no data
   */
  
++<<<<<<< HEAD
++=======
+ #define I40E_AQC_CEE_APP_FCOE_SHIFT	0x0
+ #define I40E_AQC_CEE_APP_FCOE_MASK	(0x7 << I40E_AQC_CEE_APP_FCOE_SHIFT)
+ #define I40E_AQC_CEE_APP_ISCSI_SHIFT	0x3
+ #define I40E_AQC_CEE_APP_ISCSI_MASK	(0x7 << I40E_AQC_CEE_APP_ISCSI_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ #define I40E_AQC_CEE_PG_STATUS_SHIFT	0x0
+ #define I40E_AQC_CEE_PG_STATUS_MASK	(0x7 << I40E_AQC_CEE_PG_STATUS_SHIFT)
+ #define I40E_AQC_CEE_PFC_STATUS_SHIFT	0x3
+ #define I40E_AQC_CEE_PFC_STATUS_MASK	(0x7 << I40E_AQC_CEE_PFC_STATUS_SHIFT)
+ #define I40E_AQC_CEE_APP_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_STATUS_MASK	(0x7 << I40E_AQC_CEE_APP_STATUS_SHIFT)
+ #define I40E_AQC_CEE_FCOE_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_FCOE_STATUS_MASK	(0x7 << I40E_AQC_CEE_FCOE_STATUS_SHIFT)
+ #define I40E_AQC_CEE_ISCSI_STATUS_SHIFT	0xA
+ #define I40E_AQC_CEE_ISCSI_STATUS_MASK	(0x7 << I40E_AQC_CEE_ISCSI_STATUS_SHIFT)
+ #define I40E_AQC_CEE_FIP_STATUS_SHIFT	0x10
+ #define I40E_AQC_CEE_FIP_STATUS_MASK	(0x7 << I40E_AQC_CEE_FIP_STATUS_SHIFT)
+ 
+ /* struct i40e_aqc_get_cee_dcb_cfg_v1_resp was originally defined with
+  * word boundary layout issues, which the Linux compilers silently deal
+  * with by adding padding, making the actual struct larger than designed.
+  * However, the FW compiler for the NIC is less lenient and complains
+  * about the struct.  Hence, the struct defined here has an extra byte in
+  * fields reserved3 and reserved4 to directly acknowledge that padding,
+  * and the new length is used in the length check macro.
+  */
+ struct i40e_aqc_get_cee_dcb_cfg_v1_resp {
+ 	u8	reserved1;
+ 	u8	oper_num_tc;
+ 	u8	oper_prio_tc[4];
+ 	u8	reserved2;
+ 	u8	oper_tc_bw[8];
+ 	u8	oper_pfc_en;
+ 	u8	reserved3[2];
+ 	__le16	oper_app_prio;
+ 	u8	reserved4[2];
+ 	__le16	tlv_status;
+ };
+ 
+ I40E_CHECK_STRUCT_LEN(0x18, i40e_aqc_get_cee_dcb_cfg_v1_resp);
+ 
+ struct i40e_aqc_get_cee_dcb_cfg_resp {
+ 	u8	oper_num_tc;
+ 	u8	oper_prio_tc[4];
+ 	u8	oper_tc_bw[8];
+ 	u8	oper_pfc_en;
+ 	__le16	oper_app_prio;
+ #define I40E_AQC_CEE_APP_FCOE_SHIFT	0x0
+ #define I40E_AQC_CEE_APP_FCOE_MASK	(0x7 << I40E_AQC_CEE_APP_FCOE_SHIFT)
+ #define I40E_AQC_CEE_APP_ISCSI_SHIFT	0x3
+ #define I40E_AQC_CEE_APP_ISCSI_MASK	(0x7 << I40E_AQC_CEE_APP_ISCSI_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ 	__le32	tlv_status;
+ #define I40E_AQC_CEE_PG_STATUS_SHIFT	0x0
+ #define I40E_AQC_CEE_PG_STATUS_MASK	(0x7 << I40E_AQC_CEE_PG_STATUS_SHIFT)
+ #define I40E_AQC_CEE_PFC_STATUS_SHIFT	0x3
+ #define I40E_AQC_CEE_PFC_STATUS_MASK	(0x7 << I40E_AQC_CEE_PFC_STATUS_SHIFT)
+ #define I40E_AQC_CEE_APP_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_STATUS_MASK	(0x7 << I40E_AQC_CEE_APP_STATUS_SHIFT)
+ 	u8	reserved[12];
+ };
+ 
+ I40E_CHECK_STRUCT_LEN(0x20, i40e_aqc_get_cee_dcb_cfg_resp);
+ 
+ /*	Set Local LLDP MIB (indirect 0x0A08)
+  *	Used to replace the local MIB of a given LLDP agent. e.g. DCBx
+  */
+ struct i40e_aqc_lldp_set_local_mib {
+ #define SET_LOCAL_MIB_AC_TYPE_DCBX_SHIFT	0
+ #define SET_LOCAL_MIB_AC_TYPE_DCBX_MASK	(1 << SET_LOCAL_MIB_AC_TYPE_DCBX_SHIFT)
+ 	u8	type;
+ 	u8	reserved0;
+ 	__le16	length;
+ 	u8	reserved1[4];
+ 	__le32	address_high;
+ 	__le32	address_low;
+ };
+ 
+ I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_set_local_mib);
+ 
+ /*	Stop/Start LLDP Agent (direct 0x0A09)
+  *	Used for stopping/starting specific LLDP agent. e.g. DCBx
+  */
+ struct i40e_aqc_lldp_stop_start_specific_agent {
+ #define I40E_AQC_START_SPECIFIC_AGENT_SHIFT	0
+ #define I40E_AQC_START_SPECIFIC_AGENT_MASK \
+ 				(1 << I40E_AQC_START_SPECIFIC_AGENT_SHIFT)
+ 	u8	command;
+ 	u8	reserved[15];
+ };
+ 
+ I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_stop_start_specific_agent);
+ 
++>>>>>>> 17351401fec6 (i40e: fixup padding issue in get_cee_dcb_cfg_v1_resp)
  /* Add Udp Tunnel command and completion (direct 0x0B00) */
  struct i40e_aqc_add_udp_tunnel {
  	__le16	udp_port;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
