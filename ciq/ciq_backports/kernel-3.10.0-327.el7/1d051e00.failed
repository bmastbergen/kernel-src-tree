sfc: Implement ndo_gets_phys_port_id() for EF10 VFs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Shradha Shah <sshah@solarflare.com>
commit 1d051e009851334899e2041c3d8dcde36e2db1c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/1d051e00.failed

	Signed-off-by: Shradha Shah <sshah@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1d051e009851334899e2041c3d8dcde36e2db1c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/ef10.c
#	drivers/net/ethernet/sfc/ef10_sriov.h
#	drivers/net/ethernet/sfc/efx.c
#	drivers/net/ethernet/sfc/net_driver.h
#	drivers/net/ethernet/sfc/nic.h
#	drivers/net/ethernet/sfc/sriov.c
#	drivers/net/ethernet/sfc/sriov.h
diff --cc drivers/net/ethernet/sfc/ef10.c
index 64db1d0e1c7a,22c5dc3ba43b..000000000000
--- a/drivers/net/ethernet/sfc/ef10.c
+++ b/drivers/net/ethernet/sfc/ef10.c
@@@ -294,8 -406,22 +294,18 @@@ static int efx_ef10_probe(struct efx_ni
  
  	efx_ptp_probe(efx, NULL);
  
+ #ifdef CONFIG_SFC_SRIOV
+ 	if ((efx->pci_dev->physfn) && (!efx->pci_dev->is_physfn)) {
+ 		struct pci_dev *pci_dev_pf = efx->pci_dev->physfn;
+ 		struct efx_nic *efx_pf = pci_get_drvdata(pci_dev_pf);
+ 
+ 		efx_pf->type->get_mac_address(efx_pf, nic_data->port_id);
+ 	} else
+ #endif
+ 		ether_addr_copy(nic_data->port_id, efx->net_dev->perm_addr);
+ 
  	return 0;
  
 -fail5:
 -	device_remove_file(&efx->pci_dev->dev, &dev_attr_primary_flag);
 -fail4:
 -	device_remove_file(&efx->pci_dev->dev, &dev_attr_link_control_flag);
  fail3:
  	efx_mcdi_fini(efx);
  fail2:
@@@ -3640,9 -4070,113 +3650,114 @@@ static int efx_ef10_ptp_set_ts_config(s
  	}
  }
  
++<<<<<<< HEAD
++=======
+ const struct efx_nic_type efx_hunt_a0_vf_nic_type = {
+ 	.is_vf = true,
+ 	.mem_bar = EFX_MEM_VF_BAR,
+ 	.mem_map_size = efx_ef10_mem_map_size,
+ 	.probe = efx_ef10_probe_vf,
+ 	.remove = efx_ef10_remove,
+ 	.dimension_resources = efx_ef10_dimension_resources,
+ 	.init = efx_ef10_init_nic,
+ 	.fini = efx_port_dummy_op_void,
+ 	.map_reset_reason = efx_ef10_map_reset_reason,
+ 	.map_reset_flags = efx_ef10_map_reset_flags,
+ 	.reset = efx_ef10_reset,
+ 	.probe_port = efx_mcdi_port_probe,
+ 	.remove_port = efx_mcdi_port_remove,
+ 	.fini_dmaq = efx_ef10_fini_dmaq,
+ 	.prepare_flr = efx_ef10_prepare_flr,
+ 	.finish_flr = efx_port_dummy_op_void,
+ 	.describe_stats = efx_ef10_describe_stats,
+ 	.update_stats = efx_ef10_update_stats,
+ 	.start_stats = efx_port_dummy_op_void,
+ 	.pull_stats = efx_port_dummy_op_void,
+ 	.stop_stats = efx_port_dummy_op_void,
+ 	.set_id_led = efx_mcdi_set_id_led,
+ 	.push_irq_moderation = efx_ef10_push_irq_moderation,
+ 	.reconfigure_mac = efx_ef10_mac_reconfigure_vf,
+ 	.check_mac_fault = efx_mcdi_mac_check_fault,
+ 	.reconfigure_port = efx_mcdi_port_reconfigure,
+ 	.get_wol = efx_ef10_get_wol_vf,
+ 	.set_wol = efx_ef10_set_wol_vf,
+ 	.resume_wol = efx_port_dummy_op_void,
+ 	.mcdi_request = efx_ef10_mcdi_request,
+ 	.mcdi_poll_response = efx_ef10_mcdi_poll_response,
+ 	.mcdi_read_response = efx_ef10_mcdi_read_response,
+ 	.mcdi_poll_reboot = efx_ef10_mcdi_poll_reboot,
+ 	.irq_enable_master = efx_port_dummy_op_void,
+ 	.irq_test_generate = efx_ef10_irq_test_generate,
+ 	.irq_disable_non_ev = efx_port_dummy_op_void,
+ 	.irq_handle_msi = efx_ef10_msi_interrupt,
+ 	.irq_handle_legacy = efx_ef10_legacy_interrupt,
+ 	.tx_probe = efx_ef10_tx_probe,
+ 	.tx_init = efx_ef10_tx_init,
+ 	.tx_remove = efx_ef10_tx_remove,
+ 	.tx_write = efx_ef10_tx_write,
+ 	.rx_push_rss_config = efx_ef10_vf_rx_push_rss_config,
+ 	.rx_probe = efx_ef10_rx_probe,
+ 	.rx_init = efx_ef10_rx_init,
+ 	.rx_remove = efx_ef10_rx_remove,
+ 	.rx_write = efx_ef10_rx_write,
+ 	.rx_defer_refill = efx_ef10_rx_defer_refill,
+ 	.ev_probe = efx_ef10_ev_probe,
+ 	.ev_init = efx_ef10_ev_init,
+ 	.ev_fini = efx_ef10_ev_fini,
+ 	.ev_remove = efx_ef10_ev_remove,
+ 	.ev_process = efx_ef10_ev_process,
+ 	.ev_read_ack = efx_ef10_ev_read_ack,
+ 	.ev_test_generate = efx_ef10_ev_test_generate,
+ 	.filter_table_probe = efx_ef10_filter_table_probe,
+ 	.filter_table_restore = efx_ef10_filter_table_restore,
+ 	.filter_table_remove = efx_ef10_filter_table_remove,
+ 	.filter_update_rx_scatter = efx_ef10_filter_update_rx_scatter,
+ 	.filter_insert = efx_ef10_filter_insert,
+ 	.filter_remove_safe = efx_ef10_filter_remove_safe,
+ 	.filter_get_safe = efx_ef10_filter_get_safe,
+ 	.filter_clear_rx = efx_ef10_filter_clear_rx,
+ 	.filter_count_rx_used = efx_ef10_filter_count_rx_used,
+ 	.filter_get_rx_id_limit = efx_ef10_filter_get_rx_id_limit,
+ 	.filter_get_rx_ids = efx_ef10_filter_get_rx_ids,
+ #ifdef CONFIG_RFS_ACCEL
+ 	.filter_rfs_insert = efx_ef10_filter_rfs_insert,
+ 	.filter_rfs_expire_one = efx_ef10_filter_rfs_expire_one,
+ #endif
+ #ifdef CONFIG_SFC_MTD
+ 	.mtd_probe = efx_port_dummy_op_int,
+ #endif
+ 	.ptp_write_host_time = efx_ef10_ptp_write_host_time_vf,
+ 	.ptp_set_ts_config = efx_ef10_ptp_set_ts_config_vf,
+ #ifdef CONFIG_SFC_SRIOV
+ 	.vswitching_probe = efx_ef10_vswitching_probe_vf,
+ 	.vswitching_restore = efx_ef10_vswitching_restore_vf,
+ 	.vswitching_remove = efx_ef10_vswitching_remove_vf,
+ 	.sriov_get_phys_port_id = efx_ef10_sriov_get_phys_port_id,
+ #endif
+ 	.get_mac_address = efx_ef10_get_mac_address_vf,
+ 	.set_mac_address = efx_ef10_set_mac_address,
+ 
+ 	.revision = EFX_REV_HUNT_A0,
+ 	.max_dma_mask = DMA_BIT_MASK(ESF_DZ_TX_KER_BUF_ADDR_WIDTH),
+ 	.rx_prefix_size = ES_DZ_RX_PREFIX_SIZE,
+ 	.rx_hash_offset = ES_DZ_RX_PREFIX_HASH_OFST,
+ 	.rx_ts_offset = ES_DZ_RX_PREFIX_TSTAMP_OFST,
+ 	.can_rx_scatter = true,
+ 	.always_rx_scatter = true,
+ 	.max_interrupt_mode = EFX_INT_MODE_MSIX,
+ 	.timer_period_max = 1 << ERF_DD_EVQ_IND_TIMER_VAL_WIDTH,
+ 	.offload_features = (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM |
+ 			     NETIF_F_RXHASH | NETIF_F_NTUPLE),
+ 	.mcdi_max_ver = 2,
+ 	.max_rx_ip_filters = HUNT_FILTER_TBL_ROWS,
+ 	.hwtstamp_filters = 1 << HWTSTAMP_FILTER_NONE |
+ 			    1 << HWTSTAMP_FILTER_ALL,
+ };
+ 
++>>>>>>> 1d051e009851 (sfc: Implement ndo_gets_phys_port_id() for EF10 VFs)
  const struct efx_nic_type efx_hunt_a0_nic_type = {
 -	.is_vf = false,
 -	.mem_bar = EFX_MEM_BAR,
  	.mem_map_size = efx_ef10_mem_map_size,
 -	.probe = efx_ef10_probe_pf,
 +	.probe = efx_ef10_probe,
  	.remove = efx_ef10_remove,
  	.dimension_resources = efx_ef10_dimension_resources,
  	.init = efx_ef10_init_nic,
diff --cc drivers/net/ethernet/sfc/ef10_sriov.h
index 6ea115e3c3f2,ffc92a504c3f..000000000000
--- a/drivers/net/ethernet/sfc/ef10_sriov.h
+++ b/drivers/net/ethernet/sfc/ef10_sriov.h
@@@ -18,41 -35,33 +18,59 @@@ static inline bool efx_ef10_sriov_wante
  }
  
  int efx_ef10_sriov_configure(struct efx_nic *efx, int num_vfs);
 -int efx_ef10_sriov_init(struct efx_nic *efx);
 +
 +static inline int efx_ef10_sriov_init(struct efx_nic *efx)
 +{
 +	return -EOPNOTSUPP;
 +}
 +
 +static inline void efx_ef10_sriov_mac_address_changed(struct efx_nic *efx) {}
  static inline void efx_ef10_sriov_reset(struct efx_nic *efx) {}
 -void efx_ef10_sriov_fini(struct efx_nic *efx);
 +static inline void efx_ef10_sriov_fini(struct efx_nic *efx) {}
  static inline void efx_ef10_sriov_flr(struct efx_nic *efx, unsigned vf_i) {}
  
 -int efx_ef10_sriov_set_vf_mac(struct efx_nic *efx, int vf, u8 *mac);
 +#ifdef CONFIG_SFC_SRIOV
 +static inline int efx_ef10_sriov_set_vf_mac(struct efx_nic *efx, int vf,
 +					    u8 *mac)
 +{
 +	return -EOPNOTSUPP;
 +}
  
 -int efx_ef10_sriov_set_vf_vlan(struct efx_nic *efx, int vf_i,
 -			       u16 vlan, u8 qos);
 +static inline int efx_ef10_sriov_set_vf_vlan(struct efx_nic *efx, int vf,
 +					     u16 vlan, u8 qos)
 +{
 +	return -EOPNOTSUPP;
 +}
  
 -int efx_ef10_sriov_set_vf_spoofchk(struct efx_nic *efx, int vf,
 -				   bool spoofchk);
 +static inline int efx_ef10_sriov_set_vf_spoofchk(struct efx_nic *efx, int vf,
 +						 bool spoofchk)
 +{
 +	return -EOPNOTSUPP;
 +}
  
++<<<<<<< HEAD
 +static inline int efx_ef10_sriov_get_vf_config(struct efx_nic *efx, int vf,
 +					       struct ifla_vf_info *ivf)
 +{
 +	return -EOPNOTSUPP;
 +}
 +#endif /* CONFIG_SFC_SRIOV */
++=======
+ int efx_ef10_sriov_get_vf_config(struct efx_nic *efx, int vf_i,
+ 				 struct ifla_vf_info *ivf);
+ 
+ int efx_ef10_sriov_set_vf_link_state(struct efx_nic *efx, int vf_i,
+ 				     int link_state);
+ 
+ int efx_ef10_sriov_get_phys_port_id(struct efx_nic *efx,
+ 				    struct netdev_phys_item_id *ppid);
+ 
+ int efx_ef10_vswitching_probe_pf(struct efx_nic *efx);
+ int efx_ef10_vswitching_probe_vf(struct efx_nic *efx);
+ int efx_ef10_vswitching_restore_pf(struct efx_nic *efx);
+ int efx_ef10_vswitching_restore_vf(struct efx_nic *efx);
+ void efx_ef10_vswitching_remove_pf(struct efx_nic *efx);
+ void efx_ef10_vswitching_remove_vf(struct efx_nic *efx);
++>>>>>>> 1d051e009851 (sfc: Implement ndo_gets_phys_port_id() for EF10 VFs)
  
  #endif /* EF10_SRIOV_H */
diff --cc drivers/net/ethernet/sfc/efx.c
index cf7fbb399851,de16cec7ec61..000000000000
--- a/drivers/net/ethernet/sfc/efx.c
+++ b/drivers/net/ethernet/sfc/efx.c
@@@ -2225,6 -2281,8 +2225,11 @@@ static const struct net_device_ops efx_
  	.ndo_set_vf_vlan	= efx_sriov_set_vf_vlan,
  	.ndo_set_vf_spoofchk	= efx_sriov_set_vf_spoofchk,
  	.ndo_get_vf_config	= efx_sriov_get_vf_config,
++<<<<<<< HEAD
++=======
+ 	.ndo_set_vf_link_state  = efx_sriov_set_vf_link_state,
+ 	.ndo_get_phys_port_id   = efx_sriov_get_phys_port_id,
++>>>>>>> 1d051e009851 (sfc: Implement ndo_gets_phys_port_id() for EF10 VFs)
  #endif
  #ifdef CONFIG_NET_POLL_CONTROLLER
  	.ndo_poll_controller = efx_netpoll,
diff --cc drivers/net/ethernet/sfc/net_driver.h
index a6f4d9aadd40,d72f522bf9c3..000000000000
--- a/drivers/net/ethernet/sfc/net_driver.h
+++ b/drivers/net/ethernet/sfc/net_driver.h
@@@ -1344,6 -1348,15 +1344,18 @@@ struct efx_nic_type 
  				     bool spoofchk);
  	int (*sriov_get_vf_config)(struct efx_nic *efx, int vf_i,
  				   struct ifla_vf_info *ivi);
++<<<<<<< HEAD
++=======
+ 	int (*sriov_set_vf_link_state)(struct efx_nic *efx, int vf_i,
+ 				       int link_state);
+ 	int (*sriov_get_phys_port_id)(struct efx_nic *efx,
+ 				      struct netdev_phys_item_id *ppid);
+ 	int (*vswitching_probe)(struct efx_nic *efx);
+ 	int (*vswitching_restore)(struct efx_nic *efx);
+ 	void (*vswitching_remove)(struct efx_nic *efx);
+ 	int (*get_mac_address)(struct efx_nic *efx, unsigned char *perm_addr);
+ 	int (*set_mac_address)(struct efx_nic *efx);
++>>>>>>> 1d051e009851 (sfc: Implement ndo_gets_phys_port_id() for EF10 VFs)
  
  	int revision;
  	unsigned int txd_ptr_tbl_base;
diff --cc drivers/net/ethernet/sfc/nic.h
index ce965cc22a3b,e146e30780a1..000000000000
--- a/drivers/net/ethernet/sfc/nic.h
+++ b/drivers/net/ethernet/sfc/nic.h
@@@ -513,6 -522,14 +513,17 @@@ struct efx_ef10_nic_data 
  	unsigned int rx_dpcpu_fw_id;
  	unsigned int tx_dpcpu_fw_id;
  	unsigned int vport_id;
++<<<<<<< HEAD
++=======
+ 	bool must_probe_vswitching;
+ 	unsigned int pf_index;
+ 	u8 port_id[ETH_ALEN];
+ #ifdef CONFIG_SFC_SRIOV
+ 	unsigned int vf_index;
+ 	struct ef10_vf *vf;
+ #endif
+ 	u8 vport_mac[ETH_ALEN];
++>>>>>>> 1d051e009851 (sfc: Implement ndo_gets_phys_port_id() for EF10 VFs)
  };
  
  int efx_init_sriov(void);
diff --cc drivers/net/ethernet/sfc/sriov.c
index ea0b6e763887,816c44689e67..000000000000
--- a/drivers/net/ethernet/sfc/sriov.c
+++ b/drivers/net/ethernet/sfc/sriov.c
@@@ -61,4 -59,25 +61,29 @@@ int efx_sriov_get_vf_config(struct net_
  		return -EOPNOTSUPP;
  }
  
++<<<<<<< HEAD
 +#endif
++=======
+ int efx_sriov_set_vf_link_state(struct net_device *net_dev, int vf_i,
+ 				int link_state)
+ {
+ 	struct efx_nic *efx = netdev_priv(net_dev);
+ 
+ 	if (efx->type->sriov_set_vf_link_state)
+ 		return efx->type->sriov_set_vf_link_state(efx, vf_i,
+ 							  link_state);
+ 	else
+ 		return -EOPNOTSUPP;
+ }
+ 
+ int efx_sriov_get_phys_port_id(struct net_device *net_dev,
+ 			       struct netdev_phys_item_id *ppid)
+ {
+ 	struct efx_nic *efx = netdev_priv(net_dev);
+ 
+ 	if (efx->type->sriov_get_phys_port_id)
+ 		return efx->type->sriov_get_phys_port_id(efx, ppid);
+ 	else
+ 		return -EOPNOTSUPP;
+ }
++>>>>>>> 1d051e009851 (sfc: Implement ndo_gets_phys_port_id() for EF10 VFs)
diff --cc drivers/net/ethernet/sfc/sriov.h
index 0b9f0f6acf3b,400df526586d..000000000000
--- a/drivers/net/ethernet/sfc/sriov.h
+++ b/drivers/net/ethernet/sfc/sriov.h
@@@ -21,6 -21,10 +21,13 @@@ int efx_sriov_set_vf_spoofchk(struct ne
  			      bool spoofchk);
  int efx_sriov_get_vf_config(struct net_device *net_dev, int vf_i,
  			    struct ifla_vf_info *ivi);
++<<<<<<< HEAD
++=======
+ int efx_sriov_set_vf_link_state(struct net_device *net_dev, int vf_i,
+ 				int link_state);
+ int efx_sriov_get_phys_port_id(struct net_device *net_dev,
+ 			       struct netdev_phys_item_id *ppid);
++>>>>>>> 1d051e009851 (sfc: Implement ndo_gets_phys_port_id() for EF10 VFs)
  
  #endif /* CONFIG_SFC_SRIOV */
  
* Unmerged path drivers/net/ethernet/sfc/ef10.c
diff --git a/drivers/net/ethernet/sfc/ef10_sriov.c b/drivers/net/ethernet/sfc/ef10_sriov.c
index 9e6a3e197e01..1f1f10b1ec9a 100644
--- a/drivers/net/ethernet/sfc/ef10_sriov.c
+++ b/drivers/net/ethernet/sfc/ef10_sriov.c
@@ -50,3 +50,17 @@ int efx_ef10_sriov_configure(struct efx_nic *efx, int num_vfs)
 	return -EOPNOTSUPP;
 #endif
 }
+
+int efx_ef10_sriov_get_phys_port_id(struct efx_nic *efx,
+				    struct netdev_phys_item_id *ppid)
+{
+	struct efx_ef10_nic_data *nic_data = efx->nic_data;
+
+	if (!is_valid_ether_addr(nic_data->port_id))
+		return -EOPNOTSUPP;
+
+	ppid->id_len = ETH_ALEN;
+	memcpy(ppid->id, nic_data->port_id, ppid->id_len);
+
+	return 0;
+}
* Unmerged path drivers/net/ethernet/sfc/ef10_sriov.h
* Unmerged path drivers/net/ethernet/sfc/efx.c
* Unmerged path drivers/net/ethernet/sfc/net_driver.h
* Unmerged path drivers/net/ethernet/sfc/nic.h
* Unmerged path drivers/net/ethernet/sfc/sriov.c
* Unmerged path drivers/net/ethernet/sfc/sriov.h
