KVM: device: add simple registration mechanism for kvm_device_ops

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [kvm] device: add simple registration mechanism for kvm_device_ops (Bandan Das) [1209995]
Rebuild_FUZZ: 96.00%
commit-author Will Deacon <will.deacon@arm.com>
commit d60eacb07053142bfb9b41582074a89a790a9d46
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d60eacb0.failed

kvm_ioctl_create_device currently has knowledge of all the device types
and their associated ops. This is fairly inflexible when adding support
for new in-kernel device emulations, so move what we currently have out
into a table, which can support dynamic registration of ops by new
drivers for virtual hardware.

	Cc: Alex Williamson <Alex.Williamson@redhat.com>
	Cc: Alex Graf <agraf@suse.de>
	Cc: Gleb Natapov <gleb@kernel.org>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Marc Zyngier <marc.zyngier@arm.com>
	Acked-by: Cornelia Huck <cornelia.huck@de.ibm.com>
	Reviewed-by: Christoffer Dall <christoffer.dall@linaro.org>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit d60eacb07053142bfb9b41582074a89a790a9d46)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/kvm.h
#	virt/kvm/kvm_main.c
diff --cc include/uapi/linux/kvm.h
index 0285e92caed5,60768822b140..000000000000
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@@ -850,10 -946,22 +850,25 @@@ struct kvm_device_attr 
  #define  KVM_DEV_VFIO_GROUP			1
  #define   KVM_DEV_VFIO_GROUP_ADD			1
  #define   KVM_DEV_VFIO_GROUP_DEL			2
++<<<<<<< HEAD
++=======
+ 
+ enum kvm_device_type {
+ 	KVM_DEV_TYPE_FSL_MPIC_20	= 1,
+ #define KVM_DEV_TYPE_FSL_MPIC_20	KVM_DEV_TYPE_FSL_MPIC_20
+ 	KVM_DEV_TYPE_FSL_MPIC_42,
+ #define KVM_DEV_TYPE_FSL_MPIC_42	KVM_DEV_TYPE_FSL_MPIC_42
+ 	KVM_DEV_TYPE_XICS,
+ #define KVM_DEV_TYPE_XICS		KVM_DEV_TYPE_XICS
+ 	KVM_DEV_TYPE_VFIO,
+ #define KVM_DEV_TYPE_VFIO		KVM_DEV_TYPE_VFIO
+ 	KVM_DEV_TYPE_ARM_VGIC_V2,
+ #define KVM_DEV_TYPE_ARM_VGIC_V2	KVM_DEV_TYPE_ARM_VGIC_V2
+ 	KVM_DEV_TYPE_FLIC,
+ #define KVM_DEV_TYPE_FLIC		KVM_DEV_TYPE_FLIC
+ 	KVM_DEV_TYPE_MAX,
+ };
++>>>>>>> d60eacb07053 (KVM: device: add simple registration mechanism for kvm_device_ops)
  
  /*
   * ioctls for VM fds
diff --cc virt/kvm/kvm_main.c
index 570c0d8e02bd,686d783387a0..000000000000
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@@ -2292,26 -2315,12 +2327,33 @@@ static int kvm_ioctl_create_device(stru
  	bool test = cd->flags & KVM_CREATE_DEVICE_TEST;
  	int ret;
  
++<<<<<<< HEAD
 +	switch (cd->type) {
 +#ifdef CONFIG_KVM_MPIC
 +	case KVM_DEV_TYPE_FSL_MPIC_20:
 +	case KVM_DEV_TYPE_FSL_MPIC_42:
 +		ops = &kvm_mpic_ops;
 +		break;
 +#endif
 +#ifdef CONFIG_KVM_XICS
 +	case KVM_DEV_TYPE_XICS:
 +		ops = &kvm_xics_ops;
 +		break;
 +#endif
 +#ifdef CONFIG_KVM_VFIO
 +	case KVM_DEV_TYPE_VFIO:
 +		ops = &kvm_vfio_ops;
 +		break;
 +#endif
 +	default:
++=======
+ 	if (cd->type >= ARRAY_SIZE(kvm_device_ops_table))
+ 		return -ENODEV;
+ 
+ 	ops = kvm_device_ops_table[cd->type];
+ 	if (ops == NULL)
++>>>>>>> d60eacb07053 (KVM: device: add simple registration mechanism for kvm_device_ops)
  		return -ENODEV;
- 	}
  
  	if (test)
  		return 0;
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index e1e1c9fa034a..a5060418106f 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -1052,6 +1052,7 @@ struct kvm_device_ops {
 void kvm_device_get(struct kvm_device *dev);
 void kvm_device_put(struct kvm_device *dev);
 struct kvm_device *kvm_device_from_filp(struct file *filp);
+int kvm_register_device_ops(struct kvm_device_ops *ops, u32 type);
 
 extern struct kvm_device_ops kvm_mpic_ops;
 extern struct kvm_device_ops kvm_xics_ops;
* Unmerged path include/uapi/linux/kvm.h
* Unmerged path virt/kvm/kvm_main.c
