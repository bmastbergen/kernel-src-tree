percpu: rename pcpu_reclaim_work to pcpu_balance_work

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Tejun Heo <tj@kernel.org>
commit fe6bd8c3d28357174587c4fe895d10b00321b692
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/fe6bd8c3.failed

pcpu_reclaim_work will also be used to populate chunks asynchronously.
Rename it to pcpu_balance_work in preparation.  pcpu_reclaim() is
renamed to pcpu_balance_workfn() and some of its local variables are
renamed too.

This is pure rename.

	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit fe6bd8c3d28357174587c4fe895d10b00321b692)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/percpu.c
diff --cc mm/percpu.c
index 576643473552,28a830590b4c..000000000000
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@@ -166,9 -162,15 +166,21 @@@ static DEFINE_MUTEX(pcpu_alloc_mutex);	
  
  static struct list_head *pcpu_slot __read_mostly; /* chunk list slots */
  
++<<<<<<< HEAD
 +/* reclaim work to release fully free chunks, scheduled from free path */
 +static void pcpu_reclaim(struct work_struct *work);
 +static DECLARE_WORK(pcpu_reclaim_work, pcpu_reclaim);
++=======
+ /*
+  * The number of empty populated pages, protected by pcpu_lock.  The
+  * reserved chunk doesn't contribute to the count.
+  */
+ static int pcpu_nr_empty_pop_pages;
+ 
+ /* balance work is used to populate or destroy chunks asynchronously */
+ static void pcpu_balance_workfn(struct work_struct *work);
+ static DECLARE_WORK(pcpu_balance_work, pcpu_balance_workfn);
++>>>>>>> fe6bd8c3d283 (percpu: rename pcpu_reclaim_work to pcpu_balance_work)
  
  static bool pcpu_addr_in_first_chunk(void *addr)
  {
* Unmerged path mm/percpu.c
