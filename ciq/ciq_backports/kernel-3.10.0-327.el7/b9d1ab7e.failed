mlx4: use netdev_rss_key_fill() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx4_en: use netdev_rss_key_fill() helper (Ivan Vecera) [1200759]
Rebuild_FUZZ: 96.20%
commit-author Eric Dumazet <edumazet@google.com>
commit b9d1ab7eb42ede51ffbb6cafffd0a521b30c12e1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b9d1ab7e.failed

Use of well known RSS key increases attack surface.
Switch to a random one, using generic helper so that all
ports share a common key.

Also provide ethtool -x support to fetch RSS key

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Amir Vadai <amirv@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b9d1ab7eb42ede51ffbb6cafffd0a521b30c12e1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
diff --cc drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
index 12606f2da954,710cf309962a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
@@@ -972,7 -973,12 +972,16 @@@ static u32 mlx4_en_get_rxfh_indir_size(
  	return priv->rx_ring_num;
  }
  
++<<<<<<< HEAD
 +static int mlx4_en_get_rxfh_indir(struct net_device *dev, u32 *ring_index)
++=======
+ static u32 mlx4_en_get_rxfh_key_size(struct net_device *netdev)
+ {
+ 	return MLX4_EN_RSS_KEY_SIZE;
+ }
+ 
+ static int mlx4_en_get_rxfh(struct net_device *dev, u32 *ring_index, u8 *key)
++>>>>>>> b9d1ab7eb42e (mlx4: use netdev_rss_key_fill() helper)
  {
  	struct mlx4_en_priv *priv = netdev_priv(dev);
  	struct mlx4_en_rss_map *rss_map = &priv->rss_map;
@@@ -1755,8 -1805,9 +1765,14 @@@ const struct ethtool_ops mlx4_en_ethtoo
  	.get_rxnfc = mlx4_en_get_rxnfc,
  	.set_rxnfc = mlx4_en_set_rxnfc,
  	.get_rxfh_indir_size = mlx4_en_get_rxfh_indir_size,
++<<<<<<< HEAD
 +	.get_rxfh_indir = mlx4_en_get_rxfh_indir,
 +	.set_rxfh_indir = mlx4_en_set_rxfh_indir,
++=======
+ 	.get_rxfh_key_size = mlx4_en_get_rxfh_key_size,
+ 	.get_rxfh = mlx4_en_get_rxfh,
+ 	.set_rxfh = mlx4_en_set_rxfh,
++>>>>>>> b9d1ab7eb42e (mlx4: use netdev_rss_key_fill() helper)
  	.get_channels = mlx4_en_get_channels,
  	.set_channels = mlx4_en_set_channels,
  	.get_ts_info = mlx4_en_get_ts_info,
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_rx.c b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
index 36e236791b3f..de0b128c4d7a 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
@@ -1065,9 +1065,6 @@ int mlx4_en_config_rss_steer(struct mlx4_en_priv *priv)
 	int i, qpn;
 	int err = 0;
 	int good_qps = 0;
-	static const u32 rsskey[10] = { 0xD181C62C, 0xF7F4DB5B, 0x1983A2FC,
-				0x943E1ADB, 0xD9389E6B, 0xD1039C2C, 0xA74499AD,
-				0x593D56D9, 0xF3253C06, 0x2ADC1FFC};
 
 	en_dbg(DRV, priv, "Configuring rss steering\n");
 	err = mlx4_qp_reserve_range(mdev->dev, priv->rx_ring_num,
@@ -1122,8 +1119,7 @@ int mlx4_en_config_rss_steer(struct mlx4_en_priv *priv)
 
 	rss_context->flags = rss_mask;
 	rss_context->hash_fn = MLX4_RSS_HASH_TOP;
-	for (i = 0; i < 10; i++)
-		rss_context->rss_key[i] = cpu_to_be32(rsskey[i]);
+	netdev_rss_key_fill(rss_context->rss_key, MLX4_EN_RSS_KEY_SIZE);
 
 	err = mlx4_qp_to_ready(mdev->dev, &priv->res.mtt, &context,
 			       &rss_map->indir_qp, &rss_map->indir_state);
diff --git a/include/linux/mlx4/qp.h b/include/linux/mlx4/qp.h
index 5f4e36cf0091..467ccdf94c98 100644
--- a/include/linux/mlx4/qp.h
+++ b/include/linux/mlx4/qp.h
@@ -120,13 +120,15 @@ enum {
 	MLX4_RSS_QPC_FLAG_OFFSET		= 13,
 };
 
+#define MLX4_EN_RSS_KEY_SIZE 40
+
 struct mlx4_rss_context {
 	__be32			base_qpn;
 	__be32			default_qpn;
 	u16			reserved;
 	u8			hash_fn;
 	u8			flags;
-	__be32			rss_key[10];
+	__be32			rss_key[MLX4_EN_RSS_KEY_SIZE / sizeof(__be32)];
 	__be32			base_qpn_udp;
 };
 
