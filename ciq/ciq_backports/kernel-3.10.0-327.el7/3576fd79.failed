openvswitch: Fix L4 checksum handling when dealing with IP fragments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Glenn Griffin <ggriffin.kernel@gmail.com>
commit 3576fd794b38306e196498ac54bb3b21c32e1ae4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3576fd79.failed

openvswitch modifies the L4 checksum of a packet when modifying
the ip address. When an IP packet is fragmented only the first
fragment contains an L4 header and checksum. Prior to this change
openvswitch would modify all fragments, modifying application data
in non-first fragments, causing checksum failures in the
reassembled packet.

	Signed-off-by: Glenn Griffin <ggriffin.kernel@gmail.com>
	Acked-by: Pravin B Shelar <pshelar@nicira.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3576fd794b38306e196498ac54bb3b21c32e1ae4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/actions.c
diff --cc net/openvswitch/actions.c
index 5e332feb5508,ee34f474ad14..000000000000
--- a/net/openvswitch/actions.c
+++ b/net/openvswitch/actions.c
@@@ -214,8 -271,10 +214,13 @@@ static int set_eth_addr(struct sk_buff 
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void set_ip_addr(struct sk_buff *skb, struct iphdr *nh,
 +				__be32 *addr, __be32 new_addr)
++=======
+ static void update_ip_l4_checksum(struct sk_buff *skb, struct iphdr *nh,
+ 				  __be32 addr, __be32 new_addr)
++>>>>>>> 3576fd794b38 (openvswitch: Fix L4 checksum handling when dealing with IP fragments)
  {
  	int transport_len = skb->len - skb_transport_offset(skb);
  
* Unmerged path net/openvswitch/actions.c
