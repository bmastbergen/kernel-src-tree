net: Add support for device specific address syncing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] Add support for device specific address syncing (Neil Horman) [1173790]
Rebuild_FUZZ: 94.95%
commit-author Alexander Duyck <alexander.h.duyck@intel.com>
commit 670e5b8eaf85704742bc3cb1df51fdd3ce08fc15
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/670e5b8e.failed

This change provides a function to be used in order to break the
ndo_set_rx_mode call into a set of address add and remove calls.  The code
is based on the implementation of dev_uc_sync/dev_mc_sync.  Since they
essentially do the same thing but with only one dev I simply named my
functions __dev_uc_sync/__dev_mc_sync.

I also implemented an unsync version of the functions as well to allow for
cleanup on close.

	Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 670e5b8eaf85704742bc3cb1df51fdd3ce08fc15)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/dev_addr_lists.c
diff --cc include/linux/netdevice.h
index d77c2cff9dff,774e5391eb8e..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -2859,75 -2995,133 +2859,156 @@@ extern struct net_device *alloc_netdev_
  #define alloc_netdev_mq(sizeof_priv, name, setup, count) \
  	alloc_netdev_mqs(sizeof_priv, name, setup, count, count)
  
 -int register_netdev(struct net_device *dev);
 -void unregister_netdev(struct net_device *dev);
 +extern int		register_netdev(struct net_device *dev);
 +extern void		unregister_netdev(struct net_device *dev);
  
  /* General hardware address lists handling functions */
++<<<<<<< HEAD
 +extern int __hw_addr_add_multiple(struct netdev_hw_addr_list *to_list,
 +				  struct netdev_hw_addr_list *from_list,
 +				  int addr_len, unsigned char addr_type);
 +extern void __hw_addr_del_multiple(struct netdev_hw_addr_list *to_list,
 +				   struct netdev_hw_addr_list *from_list,
 +				   int addr_len, unsigned char addr_type);
 +extern int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
 +			  struct netdev_hw_addr_list *from_list,
 +			  int addr_len);
 +extern void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
 +			     struct netdev_hw_addr_list *from_list,
 +			     int addr_len);
 +extern void __hw_addr_flush(struct netdev_hw_addr_list *list);
 +extern void __hw_addr_init(struct netdev_hw_addr_list *list);
++=======
+ int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
+ 		   struct netdev_hw_addr_list *from_list, int addr_len);
+ void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
+ 		      struct netdev_hw_addr_list *from_list, int addr_len);
+ int __hw_addr_sync_dev(struct netdev_hw_addr_list *list,
+ 		       struct net_device *dev,
+ 		       int (*sync)(struct net_device *, const unsigned char *),
+ 		       int (*unsync)(struct net_device *,
+ 				     const unsigned char *));
+ void __hw_addr_unsync_dev(struct netdev_hw_addr_list *list,
+ 			  struct net_device *dev,
+ 			  int (*unsync)(struct net_device *,
+ 					const unsigned char *));
+ void __hw_addr_init(struct netdev_hw_addr_list *list);
++>>>>>>> 670e5b8eaf85 (net: Add support for device specific address syncing)
  
  /* Functions used for device addresses handling */
 -int dev_addr_add(struct net_device *dev, const unsigned char *addr,
 -		 unsigned char addr_type);
 -int dev_addr_del(struct net_device *dev, const unsigned char *addr,
 -		 unsigned char addr_type);
 -void dev_addr_flush(struct net_device *dev);
 -int dev_addr_init(struct net_device *dev);
 +extern int dev_addr_add(struct net_device *dev, const unsigned char *addr,
 +			unsigned char addr_type);
 +extern int dev_addr_del(struct net_device *dev, const unsigned char *addr,
 +			unsigned char addr_type);
 +extern int dev_addr_add_multiple(struct net_device *to_dev,
 +				 struct net_device *from_dev,
 +				 unsigned char addr_type);
 +extern int dev_addr_del_multiple(struct net_device *to_dev,
 +				 struct net_device *from_dev,
 +				 unsigned char addr_type);
 +extern void dev_addr_flush(struct net_device *dev);
 +extern int dev_addr_init(struct net_device *dev);
  
  /* Functions used for unicast addresses handling */
 -int dev_uc_add(struct net_device *dev, const unsigned char *addr);
 -int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr);
 -int dev_uc_del(struct net_device *dev, const unsigned char *addr);
 -int dev_uc_sync(struct net_device *to, struct net_device *from);
 -int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
 -void dev_uc_unsync(struct net_device *to, struct net_device *from);
 -void dev_uc_flush(struct net_device *dev);
 -void dev_uc_init(struct net_device *dev);
 +extern int dev_uc_add(struct net_device *dev, const unsigned char *addr);
 +extern int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr);
 +extern int dev_uc_del(struct net_device *dev, const unsigned char *addr);
 +extern int dev_uc_sync(struct net_device *to, struct net_device *from);
 +extern int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
 +extern void dev_uc_unsync(struct net_device *to, struct net_device *from);
 +extern void dev_uc_flush(struct net_device *dev);
 +extern void dev_uc_init(struct net_device *dev);
  
+ /**
+  *  __dev_uc_sync - Synchonize device's unicast list
+  *  @dev:  device to sync
+  *  @sync: function to call if address should be added
+  *  @unsync: function to call if address should be removed
+  *
+  *  Add newly added addresses to the interface, and release
+  *  addresses that have been deleted.
+  **/
+ static inline int __dev_uc_sync(struct net_device *dev,
+ 				int (*sync)(struct net_device *,
+ 					    const unsigned char *),
+ 				int (*unsync)(struct net_device *,
+ 					      const unsigned char *))
+ {
+ 	return __hw_addr_sync_dev(&dev->uc, dev, sync, unsync);
+ }
+ 
+ /**
+  *  __dev_uc_unsync - Remove synchonized addresses from device
+  *  @dev:  device to sync
+  *  @unsync: function to call if address should be removed
+  *
+  *  Remove all addresses that were added to the device by dev_uc_sync().
+  **/
+ static inline void __dev_uc_unsync(struct net_device *dev,
+ 				   int (*unsync)(struct net_device *,
+ 						 const unsigned char *))
+ {
+ 	__hw_addr_unsync_dev(&dev->uc, dev, unsync);
+ }
+ 
  /* Functions used for multicast addresses handling */
 -int dev_mc_add(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_add_global(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_del(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_del_global(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_sync(struct net_device *to, struct net_device *from);
 -int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
 -void dev_mc_unsync(struct net_device *to, struct net_device *from);
 -void dev_mc_flush(struct net_device *dev);
 -void dev_mc_init(struct net_device *dev);
 +extern int dev_mc_add(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_add_global(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_del(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_del_global(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_sync(struct net_device *to, struct net_device *from);
 +extern int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
 +extern void dev_mc_unsync(struct net_device *to, struct net_device *from);
 +extern void dev_mc_flush(struct net_device *dev);
 +extern void dev_mc_init(struct net_device *dev);
  
+ /**
+  *  __dev_mc_sync - Synchonize device's multicast list
+  *  @dev:  device to sync
+  *  @sync: function to call if address should be added
+  *  @unsync: function to call if address should be removed
+  *
+  *  Add newly added addresses to the interface, and release
+  *  addresses that have been deleted.
+  **/
+ static inline int __dev_mc_sync(struct net_device *dev,
+ 				int (*sync)(struct net_device *,
+ 					    const unsigned char *),
+ 				int (*unsync)(struct net_device *,
+ 					      const unsigned char *))
+ {
+ 	return __hw_addr_sync_dev(&dev->mc, dev, sync, unsync);
+ }
+ 
+ /**
+  *  __dev_mc_unsync - Remove synchonized addresses from device
+  *  @dev:  device to sync
+  *  @unsync: function to call if address should be removed
+  *
+  *  Remove all addresses that were added to the device by dev_mc_sync().
+  **/
+ static inline void __dev_mc_unsync(struct net_device *dev,
+ 				   int (*unsync)(struct net_device *,
+ 						 const unsigned char *))
+ {
+ 	__hw_addr_unsync_dev(&dev->mc, dev, unsync);
+ }
+ 
  /* Functions used for secondary unicast and multicast support */
 -void dev_set_rx_mode(struct net_device *dev);
 -void __dev_set_rx_mode(struct net_device *dev);
 -int dev_set_promiscuity(struct net_device *dev, int inc);
 -int dev_set_allmulti(struct net_device *dev, int inc);
 -void netdev_state_change(struct net_device *dev);
 -void netdev_notify_peers(struct net_device *dev);
 -void netdev_features_change(struct net_device *dev);
 +extern void		dev_set_rx_mode(struct net_device *dev);
 +extern void		__dev_set_rx_mode(struct net_device *dev);
 +extern int		dev_set_promiscuity(struct net_device *dev, int inc);
 +extern int		dev_set_allmulti(struct net_device *dev, int inc);
 +extern void		netdev_state_change(struct net_device *dev);
 +extern void		netdev_notify_peers(struct net_device *dev);
 +extern void		netdev_features_change(struct net_device *dev);
  /* Load a device via the kmod */
 -void dev_load(struct net *net, const char *name);
 -struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
 -					struct rtnl_link_stats64 *storage);
 -void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
 -			     const struct net_device_stats *netdev_stats);
 +extern void		dev_load(struct net *net, const char *name);
 +extern struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
 +					       struct rtnl_link_stats64 *storage);
 +extern void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
 +				    const struct net_device_stats *netdev_stats);
  
  extern int		netdev_max_backlog;
  extern int		netdev_tstamp_prequeue;
diff --cc net/core/dev_addr_lists.c
index 762ba80be7c4,b6b230600b97..000000000000
--- a/net/core/dev_addr_lists.c
+++ b/net/core/dev_addr_lists.c
@@@ -266,7 -225,92 +266,96 @@@ void __hw_addr_unsync(struct netdev_hw_
  }
  EXPORT_SYMBOL(__hw_addr_unsync);
  
++<<<<<<< HEAD
 +void __hw_addr_flush(struct netdev_hw_addr_list *list)
++=======
+ /**
+  *  __hw_addr_sync_dev - Synchonize device's multicast list
+  *  @list: address list to syncronize
+  *  @dev:  device to sync
+  *  @sync: function to call if address should be added
+  *  @unsync: function to call if address should be removed
+  *
+  *  This funciton is intended to be called from the ndo_set_rx_mode
+  *  function of devices that require explicit address add/remove
+  *  notifications.  The unsync function may be NULL in which case
+  *  the addresses requiring removal will simply be removed without
+  *  any notification to the device.
+  **/
+ int __hw_addr_sync_dev(struct netdev_hw_addr_list *list,
+ 		       struct net_device *dev,
+ 		       int (*sync)(struct net_device *, const unsigned char *),
+ 		       int (*unsync)(struct net_device *,
+ 				     const unsigned char *))
+ {
+ 	struct netdev_hw_addr *ha, *tmp;
+ 	int err;
+ 
+ 	/* first go through and flush out any stale entries */
+ 	list_for_each_entry_safe(ha, tmp, &list->list, list) {
+ 		if (!ha->sync_cnt || ha->refcount != 1)
+ 			continue;
+ 
+ 		/* if unsync is defined and fails defer unsyncing address */
+ 		if (unsync && unsync(dev, ha->addr))
+ 			continue;
+ 
+ 		ha->sync_cnt--;
+ 		__hw_addr_del_entry(list, ha, false, false);
+ 	}
+ 
+ 	/* go through and sync new entries to the list */
+ 	list_for_each_entry_safe(ha, tmp, &list->list, list) {
+ 		if (ha->sync_cnt)
+ 			continue;
+ 
+ 		err = sync(dev, ha->addr);
+ 		if (err)
+ 			return err;
+ 
+ 		ha->sync_cnt++;
+ 		ha->refcount++;
+ 	}
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL(__hw_addr_sync_dev);
+ 
+ /**
+  *  __hw_addr_unsync_dev - Remove synchonized addresses from device
+  *  @list: address list to remove syncronized addresses from
+  *  @dev:  device to sync
+  *  @unsync: function to call if address should be removed
+  *
+  *  Remove all addresses that were added to the device by __hw_addr_sync_dev().
+  *  This function is intended to be called from the ndo_stop or ndo_open
+  *  functions on devices that require explicit address add/remove
+  *  notifications.  If the unsync function pointer is NULL then this function
+  *  can be used to just reset the sync_cnt for the addresses in the list.
+  **/
+ void __hw_addr_unsync_dev(struct netdev_hw_addr_list *list,
+ 			  struct net_device *dev,
+ 			  int (*unsync)(struct net_device *,
+ 					const unsigned char *))
+ {
+ 	struct netdev_hw_addr *ha, *tmp;
+ 
+ 	list_for_each_entry_safe(ha, tmp, &list->list, list) {
+ 		if (!ha->sync_cnt)
+ 			continue;
+ 
+ 		/* if unsync is defined and fails defer unsyncing address */
+ 		if (unsync && unsync(dev, ha->addr))
+ 			continue;
+ 
+ 		ha->sync_cnt--;
+ 		__hw_addr_del_entry(list, ha, false, false);
+ 	}
+ }
+ EXPORT_SYMBOL(__hw_addr_unsync_dev);
+ 
+ static void __hw_addr_flush(struct netdev_hw_addr_list *list)
++>>>>>>> 670e5b8eaf85 (net: Add support for device specific address syncing)
  {
  	struct netdev_hw_addr *ha, *tmp;
  
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/dev_addr_lists.c
