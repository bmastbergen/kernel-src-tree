perf build: Display make commands on V=1

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf] build: Display make commands on V=1 (Jiri Olsa) [1222189]
Rebuild_FUZZ: 93.33%
commit-author Jiri Olsa <jolsa@kernel.org>
commit ceed252fe0b8b7975845ed4cb9e6069d8a12f233
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ceed252f.failed

Get more verbose output wrt displaying executed commands from make.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
	Tested-by: Will Deacon <will.deacon@arm.com>
	Cc: Alexis Berlemont <alexis.berlemont@gmail.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
Link: http://lkml.kernel.org/n/tip-68v67h59zoz7ilb1ggcuff3j@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ceed252fe0b8b7975845ed4cb9e6069d8a12f233)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
diff --cc tools/perf/Makefile.perf
index 9842afffa808,efc5158738f4..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -82,8 -82,19 +82,14 @@@ endi
  
  ifneq ($(OUTPUT),)
  #$(info Determined 'OUTPUT' to be $(OUTPUT))
 -# Adding $(OUTPUT) as a directory to look for source files,
 -# because use generated output files as sources dependency
 -# for flex/bison parsers.
 -VPATH += $(OUTPUT)
 -export VPATH
  endif
  
+ ifeq ($(V),1)
+   Q =
+ else
+   Q = @
+ endif
+ 
  # Do not use make's built-in rules
  # (this improves performance and avoids hard-to-debug behaviour);
  MAKEFLAGS += -r
@@@ -545,25 -266,19 +551,35 @@@ strip: $(PROGRAMS) $(OUTPUT)per
  
  PERF_IN := $(OUTPUT)perf-in.o
  
 -export srctree OUTPUT RM CC LD AR CFLAGS V BISON FLEX
 +export srctree OUTPUT RM CC LD AR CFLAGS V
  build := -f $(srctree)/tools/build/Makefile.build dir=. obj
  
++<<<<<<< HEAD
 +$(PERF_IN): $(OUTPUT)common-cmds.h FORCE
 +	@$(MAKE) $(build)=perf
++=======
+ $(PERF_IN): $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)common-cmds.h FORCE
+ 	$(Q)$(MAKE) $(build)=perf
 -
 -$(OUTPUT)perf: $(PERFLIBS) $(PERF_IN)
 -	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $(PERF_IN) $(LIBS) -o $@
 -
++>>>>>>> ceed252fe0b8 (perf build: Display make commands on V=1)
 +
 +$(OUTPUT)perf.o: perf.c $(OUTPUT)common-cmds.h $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -include $(OUTPUT)PERF-VERSION-FILE \
 +		'-DPERF_HTML_PATH="$(htmldir_SQ)"' \
 +		$(CFLAGS) -c $(filter %.c,$^) -o $@
 +
++<<<<<<< HEAD
 +$(OUTPUT)perf: $(OUTPUT)perf.o $(BUILTIN_OBJS) $(PERFLIBS) $(PERF_IN)
 +	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) $(OUTPUT)perf.o \
 +               $(BUILTIN_OBJS) $(PERF_IN) $(LIBS) -o $@
++=======
+ $(GTK_IN): FORCE
+ 	$(Q)$(MAKE) $(build)=gtk
++>>>>>>> ceed252fe0b8 (perf build: Display make commands on V=1)
  
 -$(OUTPUT)libperf-gtk.so: $(GTK_IN) $(PERFLIBS)
 +$(GTK_OBJS): $(OUTPUT)%.o: %.c $(LIB_H)
 +	$(QUIET_CC)$(CC) -o $@ -c -fPIC $(CFLAGS) $(GTK_CFLAGS) $<
 +
 +$(OUTPUT)libperf-gtk.so: $(GTK_OBJS) $(PERFLIBS)
  	$(QUIET_LINK)$(CC) -o $@ -shared $(LDFLAGS) $(filter %.o,$^) $(GTK_LIBS)
  
  $(OUTPUT)common-cmds.h: util/generate-cmdlist.sh command-list.txt
@@@ -599,76 -313,33 +615,99 @@@ endi
  # These two need to be here so that when O= is not used they take precedence
  # over the general rule for .o
  
 -# get relative building directory (to $(OUTPUT))
 -# and '.' if it's $(OUTPUT) itself
 -__build-dir = $(subst $(OUTPUT),,$(dir $@))
 -build-dir   = $(if $(__build-dir),$(__build-dir),.)
 +$(OUTPUT)util/%-flex.o: $(OUTPUT)util/%-flex.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c -Iutil/ $(CFLAGS) -w $<
 +
 +$(OUTPUT)util/%-bison.o: $(OUTPUT)util/%-bison.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c -Iutil/ $(CFLAGS) -DYYENABLE_NLS=0 -DYYLTYPE_IS_TRIVIAL=0 -w $<
 +
++<<<<<<< HEAD
 +$(OUTPUT)%.o: %.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) $<
 +$(OUTPUT)%.i: %.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -E $(CFLAGS) $<
 +$(OUTPUT)%.s: %.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -S $(CFLAGS) $<
 +$(OUTPUT)%.o: %.S
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) $<
 +$(OUTPUT)%.s: %.S
 +	$(QUIET_CC)$(CC) -o $@ -E $(CFLAGS) $<
 +
 +$(OUTPUT)util/exec_cmd.o: util/exec_cmd.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) \
 +		'-DPERF_EXEC_PATH="$(perfexecdir_SQ)"' \
 +		'-DPREFIX="$(prefix_SQ)"' \
 +		$<
 +
 +$(OUTPUT)util/config.o: util/config.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -DETC_PERFCONFIG='"$(ETC_PERFCONFIG_SQ)"' $<
 +
 +$(OUTPUT)ui/setup.o: ui/setup.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -DLIBDIR='"$(libdir_SQ)"' $<
 +
 +$(OUTPUT)ui/browser.o: ui/browser.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -DENABLE_SLFUTURE_CONST $<
 +
 +$(OUTPUT)ui/browsers/annotate.o: ui/browsers/annotate.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -DENABLE_SLFUTURE_CONST $<
 +
 +$(OUTPUT)ui/browsers/hists.o: ui/browsers/hists.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -DENABLE_SLFUTURE_CONST $<
 +
 +$(OUTPUT)ui/browsers/map.o: ui/browsers/map.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -DENABLE_SLFUTURE_CONST $<
 +
 +$(OUTPUT)ui/browsers/scripts.o: ui/browsers/scripts.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -DENABLE_SLFUTURE_CONST $<
 +
 +$(OUTPUT)util/kallsyms.o: ../lib/symbol/kallsyms.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) $<
 +
 +$(OUTPUT)util/rbtree.o: ../../lib/rbtree.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -Wno-unused-parameter -DETC_PERFCONFIG='"$(ETC_PERFCONFIG_SQ)"' $<
 +
 +$(OUTPUT)util/hweight.o: ../../lib/hweight.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -Wno-unused-parameter -DETC_PERFCONFIG='"$(ETC_PERFCONFIG_SQ)"' $<
  
 -single_dep: $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)common-cmds.h
 +$(OUTPUT)util/find_next_bit.o: ../lib/util/find_next_bit.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -Wno-unused-parameter -DETC_PERFCONFIG='"$(ETC_PERFCONFIG_SQ)"' $<
  
 +$(OUTPUT)util/parse-events.o: util/parse-events.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) -Wno-redundant-decls $<
 +
 +$(OUTPUT)util/scripting-engines/trace-event-perl.o: util/scripting-engines/trace-event-perl.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) $(PERL_EMBED_CCOPTS) -Wno-redundant-decls -Wno-strict-prototypes -Wno-unused-parameter -Wno-shadow -Wno-undef -Wno-switch-default $<
 +
 +$(OUTPUT)scripts/perl/Perf-Trace-Util/Context.o: scripts/perl/Perf-Trace-Util/Context.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) $(PERL_EMBED_CCOPTS) -Wno-redundant-decls -Wno-strict-prototypes -Wno-unused-parameter -Wno-nested-externs -Wno-undef -Wno-switch-default $<
 +
 +$(OUTPUT)util/scripting-engines/trace-event-python.o: util/scripting-engines/trace-event-python.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) $(PYTHON_EMBED_CCOPTS) -Wno-redundant-decls -Wno-strict-prototypes -Wno-unused-parameter -Wno-shadow $<
 +
 +$(OUTPUT)scripts/python/Perf-Trace-Util/Context.o: scripts/python/Perf-Trace-Util/Context.c $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_CC)$(CC) -o $@ -c $(CFLAGS) $(PYTHON_EMBED_CCOPTS) -Wno-redundant-decls -Wno-strict-prototypes -Wno-unused-parameter -Wno-nested-externs $<
++=======
+ $(OUTPUT)%.o: %.c single_dep FORCE
+ 	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
+ 
+ $(OUTPUT)%.i: %.c single_dep FORCE
+ 	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
+ 
+ $(OUTPUT)%.s: %.c single_dep FORCE
+ 	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
+ 
+ $(OUTPUT)%-bison.o: %.c single_dep FORCE
+ 	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
+ 
+ $(OUTPUT)%-flex.o: %.c single_dep FORCE
+ 	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
+ 
+ $(OUTPUT)%.o: %.S single_dep FORCE
+ 	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
+ 
+ $(OUTPUT)%.i: %.S single_dep FORCE
+ 	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
++>>>>>>> ceed252fe0b8 (perf build: Display make commands on V=1)
  
  $(OUTPUT)perf-%: %.o $(PERFLIBS)
  	$(QUIET_LINK)$(CC) $(CFLAGS) -o $@ $(LDFLAGS) $(filter %.o,$^) $(LIBS)
@@@ -683,58 -354,34 +722,79 @@@ $(OUTPUT)perf-read-vdsox32: perf-read-v
  	$(QUIET_CC)$(CC) -mx32 $(filter -static,$(LDFLAGS)) -Wall -Werror -o $@ perf-read-vdso.c
  endif
  
 -$(patsubst perf-%,%.o,$(PROGRAMS)): $(wildcard */*.h)
 +$(LIB_OBJS) $(BUILTIN_OBJS): $(LIB_H)
 +$(patsubst perf-%,%.o,$(PROGRAMS)): $(LIB_H) $(wildcard */*.h)
  
 -LIBPERF_IN := $(OUTPUT)libperf-in.o
 +# we compile into subdirectories. if the target directory is not the source directory, they might not exists. So
 +# we depend the various files onto their directories.
 +DIRECTORY_DEPS = $(LIB_OBJS) $(BUILTIN_OBJS) $(GTK_OBJS)
 +DIRECTORY_DEPS += $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)common-cmds.h
 +# no need to add flex objects, because they depend on bison ones
 +DIRECTORY_DEPS += $(OUTPUT)util/parse-events-bison.c
 +DIRECTORY_DEPS += $(OUTPUT)util/pmu-bison.c
  
++<<<<<<< HEAD
 +OUTPUT_DIRECTORIES := $(sort $(dir $(DIRECTORY_DEPS)))
++=======
+ $(LIBPERF_IN): FORCE
+ 	$(Q)$(MAKE) $(build)=libperf
++>>>>>>> ceed252fe0b8 (perf build: Display make commands on V=1)
  
 -$(LIB_FILE): $(LIBPERF_IN)
 -	$(QUIET_AR)$(RM) $@ && $(AR) rcs $@ $(LIBPERF_IN) $(LIB_OBJS)
 +$(DIRECTORY_DEPS): | $(OUTPUT_DIRECTORIES)
 +# In the second step, we make a rule to actually create these directories
 +$(OUTPUT_DIRECTORIES):
 +	$(QUIET_MKDIR)$(MKDIR) -p $@ 2>/dev/null
  
 +$(LIB_FILE): $(LIB_OBJS)
 +	$(QUIET_AR)$(RM) $@ && $(AR) rcs $@ $(LIB_OBJS)
 +
 +# libtraceevent.a
 +TE_SOURCES = $(wildcard $(TRACE_EVENT_DIR)*.[ch])
 +
 +LIBTRACEEVENT_FLAGS  = $(QUIET_SUBDIR1) O=$(OUTPUT)
 +LIBTRACEEVENT_FLAGS += CFLAGS="-g -Wall $(EXTRA_CFLAGS)"
  LIBTRACEEVENT_FLAGS += plugin_dir=$(plugindir_SQ)
  
++<<<<<<< HEAD
 +$(LIBTRACEEVENT): $(TE_SOURCES) $(OUTPUT)PERF-CFLAGS
 +	$(QUIET_SUBDIR0)$(TRACE_EVENT_DIR) $(LIBTRACEEVENT_FLAGS) libtraceevent.a plugins
++=======
+ $(LIBTRACEEVENT): FORCE
+ 	$(Q)$(MAKE) -C $(TRACE_EVENT_DIR) $(LIBTRACEEVENT_FLAGS) O=$(OUTPUT) $(OUTPUT)libtraceevent.a plugins
++>>>>>>> ceed252fe0b8 (perf build: Display make commands on V=1)
  
  $(LIBTRACEEVENT)-clean:
  	$(call QUIET_CLEAN, libtraceevent)
- 	@$(MAKE) -C $(TRACE_EVENT_DIR) O=$(OUTPUT) clean >/dev/null
+ 	$(Q)$(MAKE) -C $(TRACE_EVENT_DIR) O=$(OUTPUT) clean >/dev/null
  
  install-traceevent-plugins: $(LIBTRACEEVENT)
++<<<<<<< HEAD
 +	$(QUIET_SUBDIR0)$(TRACE_EVENT_DIR) $(LIBTRACEEVENT_FLAGS) install_plugins
 +
 +LIBAPIKFS_SOURCES = $(wildcard $(LIB_PATH)fs/*.[ch] $(LIB_PATH)fd/*.[ch])
 +
 +# if subdir is set, we've been called from above so target has been built
 +# already
 +$(LIBAPIKFS): $(LIBAPIKFS_SOURCES)
 +ifeq ($(subdir),)
 +	$(QUIET_SUBDIR0)$(LIB_DIR) $(QUIET_SUBDIR1) O=$(OUTPUT) libapikfs.a
 +endif
 +
 +$(LIBAPIKFS)-clean:
 +ifeq ($(subdir),)
 +	$(call QUIET_CLEAN, libapikfs)
 +	@$(MAKE) -C $(LIB_DIR) O=$(OUTPUT) clean >/dev/null
 +endif
++=======
+ 	$(Q)$(MAKE) -C $(TRACE_EVENT_DIR) $(LIBTRACEEVENT_FLAGS) O=$(OUTPUT) install_plugins
+ 
+ $(LIBAPI): FORCE
+ 	$(Q)$(MAKE) -C $(LIB_DIR) O=$(OUTPUT) $(OUTPUT)libapi.a
+ 
+ $(LIBAPI)-clean:
+ 	$(call QUIET_CLEAN, libapi)
+ 	$(Q)$(MAKE) -C $(LIB_DIR) O=$(OUTPUT) clean >/dev/null
++>>>>>>> ceed252fe0b8 (perf build: Display make commands on V=1)
  
  help:
  	@echo 'Perf make targets:'
@@@ -883,14 -519,14 +943,21 @@@ $(INSTALL_DOC_TARGETS)
  #
  config-clean:
  	$(call QUIET_CLEAN, config)
- 	@$(MAKE) -C config/feature-checks clean >/dev/null
+ 	$(Q)$(MAKE) -C config/feature-checks clean >/dev/null
  
++<<<<<<< HEAD
 +clean: $(LIBTRACEEVENT)-clean $(LIBAPIKFS)-clean config-clean
 +	$(call QUIET_CLEAN, core-objs)  $(RM) $(LIB_OBJS) $(BUILTIN_OBJS) $(LIB_FILE) $(OUTPUT)perf-archive $(OUTPUT)perf-with-kcore $(OUTPUT)perf.o $(LANG_BINDINGS) $(GTK_OBJS)
 +	@find . -name '*.o' -delete -o -name '\.*.cmd' -delete -o -name '\.*.d' -delete
 +	@$(RM) .config-detected
++=======
+ clean: $(LIBTRACEEVENT)-clean $(LIBAPI)-clean config-clean
+ 	$(call QUIET_CLEAN, core-objs)  $(RM) $(LIB_FILE) $(OUTPUT)perf-archive $(OUTPUT)perf-with-kcore $(LANG_BINDINGS)
+ 	$(Q)find . -name '*.o' -delete -o -name '\.*.cmd' -delete -o -name '\.*.d' -delete
+ 	$(Q)$(RM) .config-detected
++>>>>>>> ceed252fe0b8 (perf build: Display make commands on V=1)
  	$(call QUIET_CLEAN, core-progs) $(RM) $(ALL_PROGRAMS) perf perf-read-vdso32 perf-read-vdsox32
 -	$(call QUIET_CLEAN, core-gen)   $(RM)  *.spec *.pyc *.pyo */*.pyc */*.pyo $(OUTPUT)common-cmds.h TAGS tags cscope* $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)PERF-FEATURES $(OUTPUT)util/*-bison* $(OUTPUT)util/*-flex*
 +	$(call QUIET_CLEAN, core-gen)   $(RM)  *.spec *.pyc *.pyo */*.pyc */*.pyo $(OUTPUT)common-cmds.h TAGS tags cscope* $(OUTPUT)PERF-VERSION-FILE $(OUTPUT)PERF-CFLAGS $(OUTPUT)PERF-FEATURES $(OUTPUT)util/*-bison* $(OUTPUT)util/*-flex*
  	$(QUIET_SUBDIR0)Documentation $(QUIET_SUBDIR1) clean
  	$(python-clean)
  
diff --git a/tools/build/Makefile.build b/tools/build/Makefile.build
index 692e1b154200..d977de76312e 100644
--- a/tools/build/Makefile.build
+++ b/tools/build/Makefile.build
@@ -13,8 +13,10 @@ __build:
 
 ifeq ($(V),1)
   quiet =
+  Q =
 else
   quiet=quiet_
+  Q=@
 endif
 
 build-dir := $(srctree)/tools/build
@@ -81,7 +83,7 @@ in-target := $(prefix)$(obj)-in.o
 PHONY += $(subdir-y)
 
 $(subdir-y):
-	@$(MAKE) -f $(build-dir)/Makefile.build dir=$(dir)/$@ obj=$(obj)
+	$(Q)$(MAKE) -f $(build-dir)/Makefile.build dir=$(dir)/$@ obj=$(obj)
 
 $(sort $(subdir-obj-y)): $(subdir-y) ;
 
* Unmerged path tools/perf/Makefile.perf
