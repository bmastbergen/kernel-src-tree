net: remove dead code for add/del multiple

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] remove dead code for add/del multiple (Neil Horman) [1173790]
Rebuild_FUZZ: 93.67%
commit-author stephen hemminger <shemming@brocade.com>
commit 477bb93320cec7ae74d5ccfad4f2bfa0b28fbe90
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/477bb933.failed

These function to manipulate multiple addresses are not used anywhere
in current net-next tree. Some out of tree code maybe using these but
too bad; they should submit their code upstream..

Also, make __hw_addr_flush local since only used by dev_addr_lists.c

	Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 477bb93320cec7ae74d5ccfad4f2bfa0b28fbe90)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index d77c2cff9dff,a0dfcc8c002b..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -2859,75 -2806,60 +2859,91 @@@ extern struct net_device *alloc_netdev_
  #define alloc_netdev_mq(sizeof_priv, name, setup, count) \
  	alloc_netdev_mqs(sizeof_priv, name, setup, count, count)
  
 -int register_netdev(struct net_device *dev);
 -void unregister_netdev(struct net_device *dev);
 +extern int		register_netdev(struct net_device *dev);
 +extern void		unregister_netdev(struct net_device *dev);
  
  /* General hardware address lists handling functions */
++<<<<<<< HEAD
 +extern int __hw_addr_add_multiple(struct netdev_hw_addr_list *to_list,
 +				  struct netdev_hw_addr_list *from_list,
 +				  int addr_len, unsigned char addr_type);
 +extern void __hw_addr_del_multiple(struct netdev_hw_addr_list *to_list,
 +				   struct netdev_hw_addr_list *from_list,
 +				   int addr_len, unsigned char addr_type);
 +extern int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
 +			  struct netdev_hw_addr_list *from_list,
 +			  int addr_len);
 +extern void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
 +			     struct netdev_hw_addr_list *from_list,
 +			     int addr_len);
 +extern void __hw_addr_flush(struct netdev_hw_addr_list *list);
 +extern void __hw_addr_init(struct netdev_hw_addr_list *list);
 +
 +/* Functions used for device addresses handling */
 +extern int dev_addr_add(struct net_device *dev, const unsigned char *addr,
 +			unsigned char addr_type);
 +extern int dev_addr_del(struct net_device *dev, const unsigned char *addr,
 +			unsigned char addr_type);
 +extern int dev_addr_add_multiple(struct net_device *to_dev,
 +				 struct net_device *from_dev,
 +				 unsigned char addr_type);
 +extern int dev_addr_del_multiple(struct net_device *to_dev,
 +				 struct net_device *from_dev,
 +				 unsigned char addr_type);
 +extern void dev_addr_flush(struct net_device *dev);
 +extern int dev_addr_init(struct net_device *dev);
++=======
+ int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
+ 		   struct netdev_hw_addr_list *from_list, int addr_len);
+ void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
+ 		      struct netdev_hw_addr_list *from_list, int addr_len);
+ void __hw_addr_init(struct netdev_hw_addr_list *list);
+ 
+ /* Functions used for device addresses handling */
+ int dev_addr_add(struct net_device *dev, const unsigned char *addr,
+ 		 unsigned char addr_type);
+ int dev_addr_del(struct net_device *dev, const unsigned char *addr,
+ 		 unsigned char addr_type);
+ void dev_addr_flush(struct net_device *dev);
+ int dev_addr_init(struct net_device *dev);
++>>>>>>> 477bb93320ce (net: remove dead code for add/del multiple)
  
  /* Functions used for unicast addresses handling */
 -int dev_uc_add(struct net_device *dev, const unsigned char *addr);
 -int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr);
 -int dev_uc_del(struct net_device *dev, const unsigned char *addr);
 -int dev_uc_sync(struct net_device *to, struct net_device *from);
 -int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
 -void dev_uc_unsync(struct net_device *to, struct net_device *from);
 -void dev_uc_flush(struct net_device *dev);
 -void dev_uc_init(struct net_device *dev);
 +extern int dev_uc_add(struct net_device *dev, const unsigned char *addr);
 +extern int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr);
 +extern int dev_uc_del(struct net_device *dev, const unsigned char *addr);
 +extern int dev_uc_sync(struct net_device *to, struct net_device *from);
 +extern int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
 +extern void dev_uc_unsync(struct net_device *to, struct net_device *from);
 +extern void dev_uc_flush(struct net_device *dev);
 +extern void dev_uc_init(struct net_device *dev);
  
  /* Functions used for multicast addresses handling */
 -int dev_mc_add(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_add_global(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_del(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_del_global(struct net_device *dev, const unsigned char *addr);
 -int dev_mc_sync(struct net_device *to, struct net_device *from);
 -int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
 -void dev_mc_unsync(struct net_device *to, struct net_device *from);
 -void dev_mc_flush(struct net_device *dev);
 -void dev_mc_init(struct net_device *dev);
 +extern int dev_mc_add(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_add_global(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_del(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_del_global(struct net_device *dev, const unsigned char *addr);
 +extern int dev_mc_sync(struct net_device *to, struct net_device *from);
 +extern int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
 +extern void dev_mc_unsync(struct net_device *to, struct net_device *from);
 +extern void dev_mc_flush(struct net_device *dev);
 +extern void dev_mc_init(struct net_device *dev);
  
  /* Functions used for secondary unicast and multicast support */
 -void dev_set_rx_mode(struct net_device *dev);
 -void __dev_set_rx_mode(struct net_device *dev);
 -int dev_set_promiscuity(struct net_device *dev, int inc);
 -int dev_set_allmulti(struct net_device *dev, int inc);
 -void netdev_state_change(struct net_device *dev);
 -void netdev_notify_peers(struct net_device *dev);
 -void netdev_features_change(struct net_device *dev);
 +extern void		dev_set_rx_mode(struct net_device *dev);
 +extern void		__dev_set_rx_mode(struct net_device *dev);
 +extern int		dev_set_promiscuity(struct net_device *dev, int inc);
 +extern int		dev_set_allmulti(struct net_device *dev, int inc);
 +extern void		netdev_state_change(struct net_device *dev);
 +extern void		netdev_notify_peers(struct net_device *dev);
 +extern void		netdev_features_change(struct net_device *dev);
  /* Load a device via the kmod */
 -void dev_load(struct net *net, const char *name);
 -struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
 -					struct rtnl_link_stats64 *storage);
 -void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
 -			     const struct net_device_stats *netdev_stats);
 +extern void		dev_load(struct net *net, const char *name);
 +extern struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
 +					       struct rtnl_link_stats64 *storage);
 +extern void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
 +				    const struct net_device_stats *netdev_stats);
  
  extern int		netdev_max_backlog;
  extern int		netdev_tstamp_prequeue;
* Unmerged path include/linux/netdevice.h
diff --git a/net/core/dev_addr_lists.c b/net/core/dev_addr_lists.c
index 762ba80be7c4..1facaaee65e7 100644
--- a/net/core/dev_addr_lists.c
+++ b/net/core/dev_addr_lists.c
@@ -188,47 +188,6 @@ static int __hw_addr_sync_multiple(struct netdev_hw_addr_list *to_list,
 	return err;
 }
 
-int __hw_addr_add_multiple(struct netdev_hw_addr_list *to_list,
-			   struct netdev_hw_addr_list *from_list,
-			   int addr_len, unsigned char addr_type)
-{
-	int err;
-	struct netdev_hw_addr *ha, *ha2;
-	unsigned char type;
-
-	list_for_each_entry(ha, &from_list->list, list) {
-		type = addr_type ? addr_type : ha->type;
-		err = __hw_addr_add(to_list, ha->addr, addr_len, type);
-		if (err)
-			goto unroll;
-	}
-	return 0;
-
-unroll:
-	list_for_each_entry(ha2, &from_list->list, list) {
-		if (ha2 == ha)
-			break;
-		type = addr_type ? addr_type : ha2->type;
-		__hw_addr_del(to_list, ha2->addr, addr_len, type);
-	}
-	return err;
-}
-EXPORT_SYMBOL(__hw_addr_add_multiple);
-
-void __hw_addr_del_multiple(struct netdev_hw_addr_list *to_list,
-			    struct netdev_hw_addr_list *from_list,
-			    int addr_len, unsigned char addr_type)
-{
-	struct netdev_hw_addr *ha;
-	unsigned char type;
-
-	list_for_each_entry(ha, &from_list->list, list) {
-		type = addr_type ? addr_type : ha->type;
-		__hw_addr_del(to_list, ha->addr, addr_len, type);
-	}
-}
-EXPORT_SYMBOL(__hw_addr_del_multiple);
-
 /* This function only works where there is a strict 1-1 relationship
  * between source and destionation of they synch. If you ever need to
  * sync addresses to more then 1 destination, you need to use
@@ -266,7 +225,7 @@ void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
 }
 EXPORT_SYMBOL(__hw_addr_unsync);
 
-void __hw_addr_flush(struct netdev_hw_addr_list *list)
+static void __hw_addr_flush(struct netdev_hw_addr_list *list)
 {
 	struct netdev_hw_addr *ha, *tmp;
 
@@ -276,7 +235,6 @@ void __hw_addr_flush(struct netdev_hw_addr_list *list)
 	}
 	list->count = 0;
 }
-EXPORT_SYMBOL(__hw_addr_flush);
 
 void __hw_addr_init(struct netdev_hw_addr_list *list)
 {
@@ -402,59 +360,6 @@ int dev_addr_del(struct net_device *dev, const unsigned char *addr,
 }
 EXPORT_SYMBOL(dev_addr_del);
 
-/**
- *	dev_addr_add_multiple - Add device addresses from another device
- *	@to_dev: device to which addresses will be added
- *	@from_dev: device from which addresses will be added
- *	@addr_type: address type - 0 means type will be used from from_dev
- *
- *	Add device addresses of the one device to another.
- **
- *	The caller must hold the rtnl_mutex.
- */
-int dev_addr_add_multiple(struct net_device *to_dev,
-			  struct net_device *from_dev,
-			  unsigned char addr_type)
-{
-	int err;
-
-	ASSERT_RTNL();
-
-	if (from_dev->addr_len != to_dev->addr_len)
-		return -EINVAL;
-	err = __hw_addr_add_multiple(&to_dev->dev_addrs, &from_dev->dev_addrs,
-				     to_dev->addr_len, addr_type);
-	if (!err)
-		call_netdevice_notifiers(NETDEV_CHANGEADDR, to_dev);
-	return err;
-}
-EXPORT_SYMBOL(dev_addr_add_multiple);
-
-/**
- *	dev_addr_del_multiple - Delete device addresses by another device
- *	@to_dev: device where the addresses will be deleted
- *	@from_dev: device supplying the addresses to be deleted
- *	@addr_type: address type - 0 means type will be used from from_dev
- *
- *	Deletes addresses in to device by the list of addresses in from device.
- *
- *	The caller must hold the rtnl_mutex.
- */
-int dev_addr_del_multiple(struct net_device *to_dev,
-			  struct net_device *from_dev,
-			  unsigned char addr_type)
-{
-	ASSERT_RTNL();
-
-	if (from_dev->addr_len != to_dev->addr_len)
-		return -EINVAL;
-	__hw_addr_del_multiple(&to_dev->dev_addrs, &from_dev->dev_addrs,
-			       to_dev->addr_len, addr_type);
-	call_netdevice_notifiers(NETDEV_CHANGEADDR, to_dev);
-	return 0;
-}
-EXPORT_SYMBOL(dev_addr_del_multiple);
-
 /*
  * Unicast list handling functions
  */
