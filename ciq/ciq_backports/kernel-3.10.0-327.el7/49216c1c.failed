cxgb4: Add debugfs entry to dump the contents of the flash

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Hariprasad Shenai <hariprasad@chelsio.com>
commit 49216c1c170f07c138b043d67cd34c67d75a27cc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/49216c1c.failed

Adds support to dump the contents of the flash in the adapter

	Signed-off-by: Hariprasad Shenai <hariprasad@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 49216c1c170f07c138b043d67cd34c67d75a27cc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c
#	drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
#	include/linux/mlx5/flow_table.h
diff --cc drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
index 6e8a06e7cea8,1e72cda5eb1a..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
@@@ -997,20 -1122,34 +998,51 @@@ enum fw_params_param_dmaq 
  	FW_PARAMS_PARAM_DMAQ_EQ_DCBPRIO_ETH = 0x13,
  };
  
++<<<<<<< HEAD
 +#define FW_PARAMS_MNEM(x)      ((x) << 24)
 +#define FW_PARAMS_PARAM_X(x)   ((x) << 16)
 +#define FW_PARAMS_PARAM_Y_SHIFT  8
 +#define FW_PARAMS_PARAM_Y_MASK   0xffU
 +#define FW_PARAMS_PARAM_Y(x)     ((x) << FW_PARAMS_PARAM_Y_SHIFT)
 +#define FW_PARAMS_PARAM_Y_GET(x) (((x) >> FW_PARAMS_PARAM_Y_SHIFT) &\
 +		FW_PARAMS_PARAM_Y_MASK)
 +#define FW_PARAMS_PARAM_Z_SHIFT  0
 +#define FW_PARAMS_PARAM_Z_MASK   0xffu
 +#define FW_PARAMS_PARAM_Z(x)     ((x) << FW_PARAMS_PARAM_Z_SHIFT)
 +#define FW_PARAMS_PARAM_Z_GET(x) (((x) >> FW_PARAMS_PARAM_Z_SHIFT) &\
 +		FW_PARAMS_PARAM_Z_MASK)
 +#define FW_PARAMS_PARAM_XYZ(x) ((x) << 0)
 +#define FW_PARAMS_PARAM_YZ(x)  ((x) << 0)
++=======
+ enum fw_params_param_dev_fwcache {
+ 	FW_PARAM_DEV_FWCACHE_FLUSH      = 0x00,
+ 	FW_PARAM_DEV_FWCACHE_FLUSHINV   = 0x01,
+ };
+ 
+ #define FW_PARAMS_MNEM_S	24
+ #define FW_PARAMS_MNEM_V(x)	((x) << FW_PARAMS_MNEM_S)
+ 
+ #define FW_PARAMS_PARAM_X_S     16
+ #define FW_PARAMS_PARAM_X_V(x)	((x) << FW_PARAMS_PARAM_X_S)
+ 
+ #define FW_PARAMS_PARAM_Y_S	8
+ #define FW_PARAMS_PARAM_Y_M	0xffU
+ #define FW_PARAMS_PARAM_Y_V(x)	((x) << FW_PARAMS_PARAM_Y_S)
+ #define FW_PARAMS_PARAM_Y_G(x)	(((x) >> FW_PARAMS_PARAM_Y_S) &\
+ 		FW_PARAMS_PARAM_Y_M)
+ 
+ #define FW_PARAMS_PARAM_Z_S	0
+ #define FW_PARAMS_PARAM_Z_M	0xffu
+ #define FW_PARAMS_PARAM_Z_V(x)	((x) << FW_PARAMS_PARAM_Z_S)
+ #define FW_PARAMS_PARAM_Z_G(x)	(((x) >> FW_PARAMS_PARAM_Z_S) &\
+ 		FW_PARAMS_PARAM_Z_M)
+ 
+ #define FW_PARAMS_PARAM_XYZ_S		0
+ #define FW_PARAMS_PARAM_XYZ_V(x)	((x) << FW_PARAMS_PARAM_XYZ_S)
+ 
+ #define FW_PARAMS_PARAM_YZ_S		0
+ #define FW_PARAMS_PARAM_YZ_V(x)		((x) << FW_PARAMS_PARAM_YZ_S)
++>>>>>>> 49216c1c170f (cxgb4: Add debugfs entry to dump the contents of the flash)
  
  struct fw_params_cmd {
  	__be32 op_to_vfn;
diff --cc include/linux/mlx5/flow_table.h
index 5f922c6d4fc2,e162c611e089..000000000000
--- a/include/linux/mlx5/flow_table.h
+++ b/include/linux/mlx5/flow_table.h
@@@ -30,25 -32,36 +30,49 @@@
   * SOFTWARE.
   */
  
 -#ifndef __CXGB4_DEBUGFS_H
 -#define __CXGB4_DEBUGFS_H
 +#ifndef MLX5_FLOW_TABLE_H
 +#define MLX5_FLOW_TABLE_H
  
 -#include <linux/export.h>
 +#include <linux/mlx5/driver.h>
  
++<<<<<<< HEAD:include/linux/mlx5/flow_table.h
 +struct mlx5_flow_table_group {
 +	u8	log_sz;
 +	u8	match_criteria_enable;
 +	u32	match_criteria[MLX5_ST_SZ_DW(fte_match_param)];
++=======
+ #define FILE_DATA(_file) ((_file)->f_path.dentry->d_inode)
+ 
+ struct t4_debugfs_entry {
+ 	const char *name;
+ 	const struct file_operations *ops;
+ 	mode_t mode;
+ 	unsigned char data;
++>>>>>>> 49216c1c170f (cxgb4: Add debugfs entry to dump the contents of the flash):drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.h
  };
  
 -struct seq_tab {
 -	int (*show)(struct seq_file *seq, void *v, int idx);
 -	unsigned int rows;        /* # of entries */
 -	unsigned char width;      /* size in bytes of each entry */
 -	unsigned char skip_first; /* whether the first line is a header */
 -	char data[0];             /* the table data */
 -};
 +void *mlx5_create_flow_table(struct mlx5_core_dev *dev, u8 level, u8 table_type,
 +			     u16 num_groups,
 +			     struct mlx5_flow_table_group *group);
 +void mlx5_destroy_flow_table(void *flow_table);
 +int mlx5_add_flow_table_entry(void *flow_table, u8 match_criteria_enable,
 +			      void *match_criteria, void *flow_context,
 +			      u32 *flow_index);
 +void mlx5_del_flow_table_entry(void *flow_table, u32 flow_index);
 +u32 mlx5_get_flow_table_id(void *flow_table);
  
++<<<<<<< HEAD:include/linux/mlx5/flow_table.h
 +#endif /* MLX5_FLOW_TABLE_H */
++=======
+ struct seq_tab *seq_open_tab(struct file *f, unsigned int rows,
+ 			     unsigned int width, unsigned int have_header,
+ 			     int (*show)(struct seq_file *seq, void *v, int i));
+ 
+ int t4_setup_debugfs(struct adapter *adap);
+ void add_debugfs_files(struct adapter *adap,
+ 		       struct t4_debugfs_entry *files,
+ 		       unsigned int nfiles);
+ int mem_open(struct inode *inode, struct file *file);
+ 
+ #endif
++>>>>>>> 49216c1c170f (cxgb4: Add debugfs entry to dump the contents of the flash):drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.h
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
index 067eaa5ac000..17e76b0b2bb5 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
@@ -984,7 +984,10 @@ static inline int t4_memory_write(struct adapter *adap, int mtype, u32 addr,
 
 int t4_seeprom_wp(struct adapter *adapter, bool enable);
 int get_vpd_params(struct adapter *adapter, struct vpd_params *p);
+int t4_read_flash(struct adapter *adapter, unsigned int addr,
+		  unsigned int nwords, u32 *data, int byte_oriented);
 int t4_load_fw(struct adapter *adapter, const u8 *fw_data, unsigned int size);
+int t4_fwcache(struct adapter *adap, enum fw_params_param_dev_fwcache op);
 int t4_fw_upgrade(struct adapter *adap, unsigned int mbox,
 		  const u8 *fw_data, unsigned int size, int force);
 unsigned int t4_flash_cfg_addr(struct adapter *adapter);
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c
diff --git a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
index 500e399e494e..7c0dd65a82c4 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c
@@ -837,8 +837,8 @@ static int flash_wait_op(struct adapter *adapter, int attempts, int delay)
  *	(i.e., big-endian), otherwise as 32-bit words in the platform's
  *	natural endianess.
  */
-static int t4_read_flash(struct adapter *adapter, unsigned int addr,
-			 unsigned int nwords, u32 *data, int byte_oriented)
+int t4_read_flash(struct adapter *adapter, unsigned int addr,
+		  unsigned int nwords, u32 *data, int byte_oriented)
 {
 	int ret;
 
@@ -1241,6 +1241,30 @@ out:
 	return ret;
 }
 
+/**
+ *	t4_fwcache - firmware cache operation
+ *	@adap: the adapter
+ *	@op  : the operation (flush or flush and invalidate)
+ */
+int t4_fwcache(struct adapter *adap, enum fw_params_param_dev_fwcache op)
+{
+	struct fw_params_cmd c;
+
+	memset(&c, 0, sizeof(c));
+	c.op_to_vfn =
+		cpu_to_be32(FW_CMD_OP_V(FW_PARAMS_CMD) |
+			    FW_CMD_REQUEST_F | FW_CMD_WRITE_F |
+			    FW_PARAMS_CMD_PFN_V(adap->fn) |
+			    FW_PARAMS_CMD_VFN_V(0));
+	c.retval_len16 = cpu_to_be32(FW_LEN16(c));
+	c.param[0].mnem =
+		cpu_to_be32(FW_PARAMS_MNEM_V(FW_PARAMS_MNEM_DEV) |
+			    FW_PARAMS_PARAM_X_V(FW_PARAMS_PARAM_DEV_FWCACHE));
+	c.param[0].val = (__force __be32)op;
+
+	return t4_wr_mbox(adap, adap->mbox, &c, sizeof(c), NULL);
+}
+
 #define ADVERT_MASK (FW_PORT_CAP_SPEED_100M | FW_PORT_CAP_SPEED_1G |\
 		     FW_PORT_CAP_SPEED_10G | FW_PORT_CAP_SPEED_40G | \
 		     FW_PORT_CAP_ANEG)
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h
* Unmerged path include/linux/mlx5/flow_table.h
