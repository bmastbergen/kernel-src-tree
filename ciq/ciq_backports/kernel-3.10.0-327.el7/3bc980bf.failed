drm/radeon: Add RADEON_INFO_VA_UNMAP_WORKING query

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [drm] radeon: Add RADEON_INFO_VA_UNMAP_WORKING query (Rob Clark) [1249805]
Rebuild_FUZZ: 95.83%
commit-author Michel Dänzer <michel.daenzer@amd.com>
commit 3bc980bf19bb62007e923691fa2869ba113be895
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3bc980bf.failed

This tells userspace that it's safe to use the RADEON_VA_UNMAP operation
of the DRM_RADEON_GEM_VA ioctl.

	Cc: stable@vger.kernel.org
(NOTE: Backporting this commit requires at least backports of commits
26d4d129b6042197b4cbc8341c0618f99231af2f,
48afbd70ac7b6aa62e8d452091023941d8085f8a and
c29c0876ec05d51a93508a39b90b92c29ba6423d as well, otherwise using
RADEON_VA_UNMAP runs into trouble)

	Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
	Signed-off-by: Christian König <christian.koenig@amd.com>
(cherry picked from commit 3bc980bf19bb62007e923691fa2869ba113be895)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/radeon/radeon_kms.c
#	include/uapi/drm/radeon_drm.h
diff --cc drivers/gpu/drm/radeon/radeon_kms.c
index b3758de7009a,b0acf50d9558..000000000000
--- a/drivers/gpu/drm/radeon/radeon_kms.c
+++ b/drivers/gpu/drm/radeon/radeon_kms.c
@@@ -536,6 -547,38 +536,41 @@@ static int radeon_info_ioctl(struct drm
  		else
  			*value = 1;
  		break;
++<<<<<<< HEAD
++=======
+ 	case RADEON_INFO_CURRENT_GPU_TEMP:
+ 		/* get temperature in millidegrees C */
+ 		if (rdev->asic->pm.get_temperature)
+ 			*value = radeon_get_temperature(rdev);
+ 		else
+ 			*value = 0;
+ 		break;
+ 	case RADEON_INFO_CURRENT_GPU_SCLK:
+ 		/* get sclk in Mhz */
+ 		if (rdev->pm.dpm_enabled)
+ 			*value = radeon_dpm_get_current_sclk(rdev) / 100;
+ 		else
+ 			*value = rdev->pm.current_sclk / 100;
+ 		break;
+ 	case RADEON_INFO_CURRENT_GPU_MCLK:
+ 		/* get mclk in Mhz */
+ 		if (rdev->pm.dpm_enabled)
+ 			*value = radeon_dpm_get_current_mclk(rdev) / 100;
+ 		else
+ 			*value = rdev->pm.current_mclk / 100;
+ 		break;
+ 	case RADEON_INFO_READ_REG:
+ 		if (copy_from_user(value, value_ptr, sizeof(uint32_t))) {
+ 			DRM_ERROR("copy_from_user %s:%u\n", __func__, __LINE__);
+ 			return -EFAULT;
+ 		}
+ 		if (radeon_get_allowed_info_register(rdev, *value, value))
+ 			return -EINVAL;
+ 		break;
+ 	case RADEON_INFO_VA_UNMAP_WORKING:
+ 		*value = true;
+ 		break;
++>>>>>>> 3bc980bf19bb (drm/radeon: Add RADEON_INFO_VA_UNMAP_WORKING query)
  	default:
  		DRM_DEBUG_KMS("Invalid request %d\n", info->request);
  		return -EINVAL;
diff --cc include/uapi/drm/radeon_drm.h
index 79719f940ea4,94d44ab2fda1..000000000000
--- a/include/uapi/drm/radeon_drm.h
+++ b/include/uapi/drm/radeon_drm.h
@@@ -1009,6 -1034,11 +1009,14 @@@ struct drm_radeon_cs 
  #define RADEON_INFO_VRAM_USAGE		0x1e
  #define RADEON_INFO_GTT_USAGE		0x1f
  #define RADEON_INFO_ACTIVE_CU_COUNT	0x20
++<<<<<<< HEAD
++=======
+ #define RADEON_INFO_CURRENT_GPU_TEMP	0x21
+ #define RADEON_INFO_CURRENT_GPU_SCLK	0x22
+ #define RADEON_INFO_CURRENT_GPU_MCLK	0x23
+ #define RADEON_INFO_READ_REG		0x24
+ #define RADEON_INFO_VA_UNMAP_WORKING	0x25
++>>>>>>> 3bc980bf19bb (drm/radeon: Add RADEON_INFO_VA_UNMAP_WORKING query)
  
  struct drm_radeon_info {
  	uint32_t		request;
* Unmerged path drivers/gpu/drm/radeon/radeon_kms.c
* Unmerged path include/uapi/drm/radeon_drm.h
