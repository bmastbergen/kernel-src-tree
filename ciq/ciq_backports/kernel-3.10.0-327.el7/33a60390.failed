xfs: use xfs_da_geometry for block size in attr code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 33a6039007af112509f48910e62640dadd064322
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/33a60390.failed

Rather than using the superblock value obtained through the
xfs_mount.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 33a6039007af112509f48910e62640dadd064322)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_attr.c
diff --cc fs/xfs/xfs_attr.c
index f3b9670979f5,ccfc2c9700fa..000000000000
--- a/fs/xfs/xfs_attr.c
+++ b/fs/xfs/xfs_attr.c
@@@ -176,8 -174,8 +176,13 @@@ xfs_attr_calc_size
  	 * Determine space new attribute will use, and if it would be
  	 * "local" or "remote" (note: local != inline).
  	 */
++<<<<<<< HEAD
 +	size = xfs_attr_leaf_newentsize(namelen, valuelen,
 +					mp->m_sb.sb_blocksize, local);
++=======
+ 	size = xfs_attr_leaf_newentsize(args->namelen, args->valuelen,
+ 					args->geo->blksize, local);
++>>>>>>> 33a6039007af (xfs: use xfs_da_geometry for block size in attr code)
  
  	nblks = XFS_DAENTER_SPACE_RES(mp, XFS_ATTR_FORK);
  	if (*local) {
@@@ -902,8 -898,8 +907,13 @@@ restart
  	state = xfs_da_state_alloc();
  	state->args = args;
  	state->mp = mp;
++<<<<<<< HEAD
 +	state->blocksize = state->mp->m_sb.sb_blocksize;
 +	state->node_ents = state->mp->m_attr_node_ents;
++=======
+ 	state->blocksize = args->geo->blksize;
+ 	state->node_ents = args->geo->node_ents;
++>>>>>>> 33a6039007af (xfs: use xfs_da_geometry for block size in attr code)
  
  	/*
  	 * Search to see if name already exists, and get back a pointer
@@@ -1081,8 -1077,8 +1091,13 @@@
  		state = xfs_da_state_alloc();
  		state->args = args;
  		state->mp = mp;
++<<<<<<< HEAD
 +		state->blocksize = state->mp->m_sb.sb_blocksize;
 +		state->node_ents = state->mp->m_attr_node_ents;
++=======
+ 		state->blocksize = args->geo->blksize;
+ 		state->node_ents = args->geo->node_ents;
++>>>>>>> 33a6039007af (xfs: use xfs_da_geometry for block size in attr code)
  		state->inleaf = 0;
  		error = xfs_da3_node_lookup_int(state, &retval);
  		if (error)
@@@ -1173,8 -1169,8 +1188,13 @@@ xfs_attr_node_removename(xfs_da_args_t 
  	state = xfs_da_state_alloc();
  	state->args = args;
  	state->mp = dp->i_mount;
++<<<<<<< HEAD
 +	state->blocksize = state->mp->m_sb.sb_blocksize;
 +	state->node_ents = state->mp->m_attr_node_ents;
++=======
+ 	state->blocksize = args->geo->blksize;
+ 	state->node_ents = args->geo->node_ents;
++>>>>>>> 33a6039007af (xfs: use xfs_da_geometry for block size in attr code)
  
  	/*
  	 * Search to see if name exists, and get back a pointer to it.
@@@ -1436,8 -1432,8 +1456,13 @@@ xfs_attr_node_get(xfs_da_args_t *args
  	state = xfs_da_state_alloc();
  	state->args = args;
  	state->mp = args->dp->i_mount;
++<<<<<<< HEAD
 +	state->blocksize = state->mp->m_sb.sb_blocksize;
 +	state->node_ents = state->mp->m_attr_node_ents;
++=======
+ 	state->blocksize = args->geo->blksize;
+ 	state->node_ents = args->geo->node_ents;
++>>>>>>> 33a6039007af (xfs: use xfs_da_geometry for block size in attr code)
  
  	/*
  	 * Search to see if name exists, and get back a pointer to it.
* Unmerged path fs/xfs/xfs_attr.c
diff --git a/fs/xfs/xfs_attr_leaf.c b/fs/xfs/xfs_attr_leaf.c
index 5be77b3a9bc4..88cd84a31f82 100644
--- a/fs/xfs/xfs_attr_leaf.c
+++ b/fs/xfs/xfs_attr_leaf.c
@@ -1077,7 +1077,7 @@ xfs_attr3_leaf_add(
 	xfs_attr3_leaf_hdr_from_disk(&ichdr, leaf);
 	ASSERT(args->index >= 0 && args->index <= ichdr.count);
 	entsize = xfs_attr_leaf_newentsize(args->namelen, args->valuelen,
-			   args->trans->t_mountp->m_sb.sb_blocksize, NULL);
+			   args->geo->blksize, NULL);
 
 	/*
 	 * Search through freemap for first-fit on new name length.
@@ -1180,13 +1180,13 @@ xfs_attr3_leaf_add_work(
 	ASSERT((ichdr->freemap[mapindex].base & 0x3) == 0);
 	ASSERT(ichdr->freemap[mapindex].size >=
 		xfs_attr_leaf_newentsize(args->namelen, args->valuelen,
-					 mp->m_sb.sb_blocksize, NULL));
+					 args->geo->blksize, NULL));
 	ASSERT(ichdr->freemap[mapindex].size < XFS_LBSIZE(mp));
 	ASSERT((ichdr->freemap[mapindex].size & 0x3) == 0);
 
 	ichdr->freemap[mapindex].size -=
 			xfs_attr_leaf_newentsize(args->namelen, args->valuelen,
-						 mp->m_sb.sb_blocksize, &tmp);
+						 args->geo->blksize, &tmp);
 
 	entry->nameidx = cpu_to_be16(ichdr->freemap[mapindex].base +
 				     ichdr->freemap[mapindex].size);
diff --git a/fs/xfs/xfs_log_rlimit.c b/fs/xfs/xfs_log_rlimit.c
index 2af1a0a4d0f1..ee7e0e80246b 100644
--- a/fs/xfs/xfs_log_rlimit.c
+++ b/fs/xfs/xfs_log_rlimit.c
@@ -42,7 +42,7 @@ xfs_log_calc_max_attrsetm_res(
 	int			size;
 	int			nblks;
 
-	size = xfs_attr_leaf_entsize_local_max(mp->m_sb.sb_blocksize) -
+	size = xfs_attr_leaf_entsize_local_max(mp->m_attr_geo->blksize) -
 	       MAXNAMELEN - 1;
 	nblks = XFS_DAENTER_SPACE_RES(mp, XFS_ATTR_FORK);
 	nblks += XFS_B_TO_FSB(mp, size);
