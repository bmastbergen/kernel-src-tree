tools/power turbostat: calculate TSC frequency from CPUID(0x15) on SKL

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [tools] turbostat: calculate TSC frequency from CPUID(0x15) on SKL (Prarit Bhargava) [1187329]
Rebuild_FUZZ: 90.62%
commit-author Len Brown <len.brown@intel.com>
commit 8a5bdf41d2c027c1e4ad62bc4f96f3fdf82070ba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/8a5bdf41.failed

turbostat --debug
...
CPUID(0x15): eax_crystal: 2 ebx_tsc: 100 ecx_crystal_hz: 0
TSC: 1200 MHz (24000000 Hz * 100 / 2 / 1000000)

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 8a5bdf41d2c027c1e4ad62bc4f96f3fdf82070ba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index a636659b8e99,203d45d0a560..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -84,6 -86,11 +84,14 @@@ unsigned int tcc_activation_temp_overri
  double rapl_power_units, rapl_time_units;
  double rapl_dram_energy_units, rapl_energy_units;
  double rapl_joule_counter_range;
++<<<<<<< HEAD
++=======
+ unsigned int do_core_perf_limit_reasons;
+ unsigned int do_gfx_perf_limit_reasons;
+ unsigned int do_ring_perf_limit_reasons;
+ unsigned int crystal_hz;
+ unsigned long long tsc_hz;
++>>>>>>> 8a5bdf41d2c0 (tools/power turbostat: calculate TSC frequency from CPUID(0x15) on SKL)
  
  #define RAPL_PKG		(1 << 0)
  					/* 0x610 MSR_PKG_POWER_LIMIT */
@@@ -2143,19 -2491,56 +2151,58 @@@ void check_cpuid(
  	do_ptm = eax & (1 << 6);
  	has_epb = ecx & (1 << 3);
  
 -	if (debug)
 -		fprintf(stderr, "CPUID(6): %sAPERF, %sDTS, %sPTM, %sEPB\n",
 -			has_aperf ? "" : "No ",
 -			do_dts ? "" : "No ",
 -			do_ptm ? "" : "No ",
 -			has_epb ? "" : "No ");
 +	if (verbose)
 +		fprintf(stderr, "CPUID(6): %s%s%s%s\n",
 +			has_aperf ? "APERF" : "No APERF!",
 +			do_dts ? ", DTS" : "",
 +			do_ptm ? ", PTM": "",
 +			has_epb ? ", EPB": "");
 +
++<<<<<<< HEAD
 +	if (!has_aperf)
 +		errx(-1, "No APERF");
  
 +	do_nhm_platform_info = do_nhm_cstates = do_smi = has_nhm_msrs(family, model);
++=======
+ 	if (max_level > 0x15) {
+ 		unsigned int eax_crystal;
+ 		unsigned int ebx_tsc;
+ 
+ 		/*
+ 		 * CPUID 15H TSC/Crystal ratio, possibly Crystal Hz
+ 		 */
+ 		eax_crystal = ebx_tsc = crystal_hz = edx = 0;
+ 		__get_cpuid(0x15, &eax_crystal, &ebx_tsc, &crystal_hz, &edx);
+ 
+ 		if (ebx_tsc != 0) {
+ 
+ 			if (debug && (ebx != 0))
+ 				fprintf(stderr, "CPUID(0x15): eax_crystal: %d ebx_tsc: %d ecx_crystal_hz: %d\n",
+ 					eax_crystal, ebx_tsc, crystal_hz);
+ 
+ 			if (crystal_hz == 0)
+ 				switch(model) {
+ 				case 0x4E:	/* SKL */
+ 				case 0x5E:	/* SKL */
+ 					crystal_hz = 24000000;	/* 24 MHz */
+ 					break;
+ 				default:
+ 					crystal_hz = 0;
+ 			}
+ 
+ 			if (crystal_hz) {
+ 				tsc_hz =  (unsigned long long) crystal_hz * ebx_tsc / eax_crystal;
+ 				if (debug)
+ 					fprintf(stderr, "TSC: %lld MHz (%d Hz * %d / %d / 1000000)\n",
+ 						tsc_hz / 1000000, crystal_hz, ebx_tsc,  eax_crystal);
+ 			}
+ 		}
+ 	}
+ 
+ 	do_nhm_platform_info = do_nhm_cstates = do_smi = probe_nhm_msrs(family, model);
++>>>>>>> 8a5bdf41d2c0 (tools/power turbostat: calculate TSC frequency from CPUID(0x15) on SKL)
  	do_snb_cstates = has_snb_msrs(family, model);
 -	do_pc2 = do_snb_cstates && (pkg_cstate_limit >= PCL__2);
 -	do_pc3 = (pkg_cstate_limit >= PCL__3);
 -	do_pc6 = (pkg_cstate_limit >= PCL__6);
 -	do_pc7 = do_snb_cstates && (pkg_cstate_limit >= PCL__7);
  	do_c8_c9_c10 = has_hsw_msrs(family, model);
 -	do_skl_residency = has_skl_msrs(family, model);
  	do_slm_cstates = is_slm(family, model);
  	bclk = discover_bclk(family, model);
  
@@@ -2469,6 -2870,11 +2516,14 @@@ int get_and_dump_counters(void
  	return status;
  }
  
++<<<<<<< HEAD
++=======
+ void print_version() {
+ 	fprintf(stderr, "turbostat version 4.4 2 Apr, 2015"
+ 		" - Len Brown <lenb@kernel.org>\n");
+ }
+ 
++>>>>>>> 8a5bdf41d2c0 (tools/power turbostat: calculate TSC frequency from CPUID(0x15) on SKL)
  void cmdline(int argc, char **argv)
  {
  	int opt;
* Unmerged path tools/power/x86/turbostat/turbostat.c
