nfs: add nfs_pgio_current_mirror helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Peng Tao <tao.peng@primarydata.com>
commit 48d635f14a544c2b3ca870d2c7349b41160496d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/48d635f1.failed

Let it return current nfs_pgio_mirror in use depending on pg_mirror_count.
For read, we always use pg_mirrors[0], so this effectively gives us freedom
to use pg_mirror_idx to track the actual mirror to read from through out the
IO stack.

	Signed-off-by: Peng Tao <tao.peng@primarydata.com>
	Signed-off-by: Tom Haynes <loghyr@primarydata.com>
(cherry picked from commit 48d635f14a544c2b3ca870d2c7349b41160496d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/objlayout/objio_osd.c
#	fs/nfs/pagelist.c
#	fs/nfs/pnfs.c
diff --cc fs/nfs/objlayout/objio_osd.c
index 0c6a60121243,24e1d7403c0b..000000000000
--- a/fs/nfs/objlayout/objio_osd.c
+++ b/fs/nfs/objlayout/objio_osd.c
@@@ -537,6 -537,7 +537,10 @@@ int objio_write_pagelist(struct nfs_pgi
  static size_t objio_pg_test(struct nfs_pageio_descriptor *pgio,
  			  struct nfs_page *prev, struct nfs_page *req)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(pgio);
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	unsigned int size;
  
  	size = pnfs_generic_pg_test(pgio, prev, req);
diff --cc fs/nfs/pagelist.c
index c60681b2bf26,960c99f75d3f..000000000000
--- a/fs/nfs/pagelist.c
+++ b/fs/nfs/pagelist.c
@@@ -46,7 -55,10 +55,14 @@@ void nfs_pgheader_init(struct nfs_pagei
  		       struct nfs_pgio_header *hdr,
  		       void (*release)(struct nfs_pgio_header *hdr))
  {
++<<<<<<< HEAD
 +	hdr->req = nfs_list_entry(desc->pg_list.next);
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
+ 
+ 	hdr->req = nfs_list_entry(mirror->pg_list.next);
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	hdr->inode = desc->pg_inode;
  	hdr->cred = hdr->req->wb_context->cred;
  	hdr->io_start = req_offset(hdr->req);
@@@ -484,7 -494,10 +500,14 @@@ nfs_wait_on_request(struct nfs_page *re
  size_t nfs_generic_pg_test(struct nfs_pageio_descriptor *desc,
  			   struct nfs_page *prev, struct nfs_page *req)
  {
++<<<<<<< HEAD
 +	if (desc->pg_count > desc->pg_bsize) {
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
+ 
+ 	if (mirror->pg_count > mirror->pg_bsize) {
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  		/* should never happen */
  		WARN_ON_ONCE(1);
  		return 0;
@@@ -742,6 -791,8 +765,11 @@@ static void nfs_pgio_result(struct rpc_
  int nfs_generic_pgio(struct nfs_pageio_descriptor *desc,
  		     struct nfs_pgio_header *hdr)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	struct nfs_page		*req;
  	struct page		**pages,
  				*last_page;
@@@ -788,9 -839,14 +816,14 @@@ static int nfs_generic_pg_pgios(struct 
  	struct nfs_pgio_header *hdr;
  	int ret;
  
++<<<<<<< HEAD
++=======
+ 	mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	hdr = nfs_pgio_header_alloc(desc->pg_rw_ops);
  	if (!hdr) {
 -		/* TODO: make sure this is right with mirroring - or
 -		 *       should it back out all mirrors? */
 -		desc->pg_completion_ops->error_cleanup(&mirror->pg_list);
 +		desc->pg_completion_ops->error_cleanup(&desc->pg_list);
  		return -ENOMEM;
  	}
  	nfs_pgheader_init(desc, hdr, nfs_pgio_header_free);
@@@ -871,9 -970,12 +904,14 @@@ static bool nfs_can_coalesce_requests(s
  static int nfs_pageio_do_add_request(struct nfs_pageio_descriptor *desc,
  				     struct nfs_page *req)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	struct nfs_page *prev = NULL;
 -
 -	if (mirror->pg_count != 0) {
 -		prev = nfs_list_entry(mirror->pg_list.prev);
 +	if (desc->pg_count != 0) {
 +		prev = nfs_list_entry(desc->pg_list.prev);
  	} else {
  		if (desc->pg_ops->pg_init)
  			desc->pg_ops->pg_init(desc, req);
@@@ -892,7 -994,10 +930,14 @@@
   */
  static void nfs_pageio_doio(struct nfs_pageio_descriptor *desc)
  {
++<<<<<<< HEAD
 +	if (!list_empty(&desc->pg_list)) {
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
+ 
+ 	if (!list_empty(&mirror->pg_list)) {
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  		int error = desc->pg_ops->pg_doio(desc);
  		if (error < 0)
  			desc->pg_error = error;
@@@ -919,6 -1024,8 +964,11 @@@
  static int __nfs_pageio_add_request(struct nfs_pageio_descriptor *desc,
  			   struct nfs_page *req)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	struct nfs_page *subreq;
  	unsigned int bytes_left = 0;
  	unsigned int offset, pgbase;
@@@ -980,6 -1087,7 +1030,10 @@@ err_ptr
  
  static int nfs_do_recoalesce(struct nfs_pageio_descriptor *desc)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	LIST_HEAD(head);
  
  	do {
diff --cc fs/nfs/pnfs.c
index aa3602117bc0,b822b1749643..000000000000
--- a/fs/nfs/pnfs.c
+++ b/fs/nfs/pnfs.c
@@@ -1731,10 -1731,12 +1731,15 @@@ static voi
  pnfs_write_through_mds(struct nfs_pageio_descriptor *desc,
  		struct nfs_pgio_header *hdr)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	if (!test_and_set_bit(NFS_IOHDR_REDO, &hdr->flags)) {
 -		list_splice_tail_init(&hdr->pages, &mirror->pg_list);
 +		list_splice_tail_init(&hdr->pages, &desc->pg_list);
  		nfs_pageio_reset_write_mds(desc);
 -		mirror->pg_recoalesce = 1;
 +		desc->pg_recoalesce = 1;
  	}
  	nfs_pgio_data_destroy(hdr);
  }
@@@ -1783,6 -1785,8 +1788,11 @@@ EXPORT_SYMBOL_GPL(pnfs_writehdr_free)
  int
  pnfs_generic_pg_writepages(struct nfs_pageio_descriptor *desc)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	struct nfs_pgio_header *hdr;
  	int ret;
  
@@@ -1841,10 -1846,12 +1851,15 @@@ static voi
  pnfs_read_through_mds(struct nfs_pageio_descriptor *desc,
  		struct nfs_pgio_header *hdr)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	if (!test_and_set_bit(NFS_IOHDR_REDO, &hdr->flags)) {
 -		list_splice_tail_init(&hdr->pages, &mirror->pg_list);
 +		list_splice_tail_init(&hdr->pages, &desc->pg_list);
  		nfs_pageio_reset_read_mds(desc);
 -		mirror->pg_recoalesce = 1;
 +		desc->pg_recoalesce = 1;
  	}
  	nfs_pgio_data_destroy(hdr);
  }
@@@ -1895,6 -1902,8 +1910,11 @@@ EXPORT_SYMBOL_GPL(pnfs_readhdr_free)
  int
  pnfs_generic_pg_readpages(struct nfs_pageio_descriptor *desc)
  {
++<<<<<<< HEAD
++=======
+ 	struct nfs_pgio_mirror *mirror = nfs_pgio_current_mirror(desc);
+ 
++>>>>>>> 48d635f14a54 (nfs: add nfs_pgio_current_mirror helper)
  	struct nfs_pgio_header *hdr;
  	int ret;
  
diff --git a/fs/nfs/internal.h b/fs/nfs/internal.h
index 9fe4201d709b..4403dd78c413 100644
--- a/fs/nfs/internal.h
+++ b/fs/nfs/internal.h
@@ -248,6 +248,8 @@ int nfs_initiate_pgio(struct rpc_clnt *clnt, struct nfs_pgio_header *hdr,
 		      struct rpc_cred *cred, const struct nfs_rpc_ops *rpc_ops,
 		      const struct rpc_call_ops *call_ops, int how, int flags);
 void nfs_free_request(struct nfs_page *req);
+struct nfs_pgio_mirror *
+nfs_pgio_current_mirror(struct nfs_pageio_descriptor *desc);
 
 static inline void nfs_iocounter_init(struct nfs_io_counter *c)
 {
* Unmerged path fs/nfs/objlayout/objio_osd.c
* Unmerged path fs/nfs/pagelist.c
* Unmerged path fs/nfs/pnfs.c
