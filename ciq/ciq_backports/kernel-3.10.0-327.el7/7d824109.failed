virtio: add explicit big-endian support to memory accessors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] add explicit big-endian support to memory accessors (Thomas Huth) [1213658]
Rebuild_FUZZ: 92.73%
commit-author Greg Kurz <gkurz@linux.vnet.ibm.com>
commit 7d82410950aa74adccf035c332e409af2bb93e92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/7d824109.failed

The current memory accessors logic is:
- little endian if little_endian
- native endian (i.e. no byteswap) if !little_endian

If we want to fully support cross-endian vhost, we also need to be
able to convert to big endian.

Instead of changing the little_endian argument to some 3-value enum, this
patch changes the logic to:
- little endian if little_endian
- big endian if !little_endian

The native endian case is handled by all users with a trivial helper. This
patch doesn't change any functionality, nor it does add overhead.

	Signed-off-by: Greg Kurz <gkurz@linux.vnet.ibm.com>

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
	Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
(cherry picked from commit 7d82410950aa74adccf035c332e409af2bb93e92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/tun.c
#	include/linux/virtio_byteorder.h
#	include/linux/virtio_config.h
diff --cc drivers/net/tun.c
index 96714cdadb7d,b210139bef8f..000000000000
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@@ -205,6 -206,22 +205,25 @@@ struct tun_struct 
  	u32 flow_count;
  };
  
++<<<<<<< HEAD
++=======
+ static inline bool tun_is_little_endian(struct tun_struct *tun)
+ {
+ 	return tun->flags & TUN_VNET_LE ||
+ 		virtio_legacy_is_little_endian();
+ }
+ 
+ static inline u16 tun16_to_cpu(struct tun_struct *tun, __virtio16 val)
+ {
+ 	return __virtio16_to_cpu(tun_is_little_endian(tun), val);
+ }
+ 
+ static inline __virtio16 cpu_to_tun16(struct tun_struct *tun, u16 val)
+ {
+ 	return __cpu_to_virtio16(tun_is_little_endian(tun), val);
+ }
+ 
++>>>>>>> 7d82410950aa (virtio: add explicit big-endian support to memory accessors)
  static inline u32 tun_hashfn(u32 rxhash)
  {
  	return rxhash & 0x3ff;
diff --cc include/linux/virtio_config.h
index d0d06abddd7b,e5ce8ab0b8b0..000000000000
--- a/include/linux/virtio_config.h
+++ b/include/linux/virtio_config.h
@@@ -213,6 -205,43 +213,46 @@@ int virtqueue_set_affinity(struct virtq
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static inline bool virtio_is_little_endian(struct virtio_device *vdev)
+ {
+ 	return virtio_has_feature(vdev, VIRTIO_F_VERSION_1) ||
+ 		virtio_legacy_is_little_endian();
+ }
+ 
+ /* Memory accessors */
+ static inline u16 virtio16_to_cpu(struct virtio_device *vdev, __virtio16 val)
+ {
+ 	return __virtio16_to_cpu(virtio_is_little_endian(vdev), val);
+ }
+ 
+ static inline __virtio16 cpu_to_virtio16(struct virtio_device *vdev, u16 val)
+ {
+ 	return __cpu_to_virtio16(virtio_is_little_endian(vdev), val);
+ }
+ 
+ static inline u32 virtio32_to_cpu(struct virtio_device *vdev, __virtio32 val)
+ {
+ 	return __virtio32_to_cpu(virtio_is_little_endian(vdev), val);
+ }
+ 
+ static inline __virtio32 cpu_to_virtio32(struct virtio_device *vdev, u32 val)
+ {
+ 	return __cpu_to_virtio32(virtio_is_little_endian(vdev), val);
+ }
+ 
+ static inline u64 virtio64_to_cpu(struct virtio_device *vdev, __virtio64 val)
+ {
+ 	return __virtio64_to_cpu(virtio_is_little_endian(vdev), val);
+ }
+ 
+ static inline __virtio64 cpu_to_virtio64(struct virtio_device *vdev, u64 val)
+ {
+ 	return __cpu_to_virtio64(virtio_is_little_endian(vdev), val);
+ }
+ 
++>>>>>>> 7d82410950aa (virtio: add explicit big-endian support to memory accessors)
  /* Config space accessors. */
  #define virtio_cread(vdev, structname, member, ptr)			\
  	do {								\
* Unmerged path include/linux/virtio_byteorder.h
diff --git a/drivers/net/macvtap.c b/drivers/net/macvtap.c
index bcbc7e7f3396..47c7a54a6202 100644
--- a/drivers/net/macvtap.c
+++ b/drivers/net/macvtap.c
@@ -51,7 +51,8 @@ struct macvtap_queue {
 
 static inline bool macvtap_is_little_endian(struct macvtap_queue *q)
 {
-	return q->flags & MACVTAP_VNET_LE;
+	return q->flags & MACVTAP_VNET_LE ||
+		virtio_legacy_is_little_endian();
 }
 
 static inline u16 macvtap16_to_cpu(struct macvtap_queue *q, __virtio16 val)
* Unmerged path drivers/net/tun.c
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index 3f6aaf03d116..f1822cfeaf7e 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -190,7 +190,8 @@ static inline int vhost_has_feature(struct vhost_dev *dev, int bit)
 
 static inline bool vhost_is_little_endian(struct vhost_virtqueue *vq)
 {
-	return vhost_has_feature(vq, VIRTIO_F_VERSION_1);
+	return vhost_has_feature(vq, VIRTIO_F_VERSION_1) ||
+		virtio_legacy_is_little_endian();
 }
 
 /* Memory accessors */
* Unmerged path include/linux/virtio_byteorder.h
* Unmerged path include/linux/virtio_config.h
diff --git a/include/linux/vringh.h b/include/linux/vringh.h
index 3ed62efc2bc5..bc6c28d04263 100644
--- a/include/linux/vringh.h
+++ b/include/linux/vringh.h
@@ -228,7 +228,8 @@ static inline void vringh_notify(struct vringh *vrh)
 
 static inline bool vringh_is_little_endian(const struct vringh *vrh)
 {
-	return vrh->little_endian;
+	return vrh->little_endian ||
+		virtio_legacy_is_little_endian();
 }
 
 static inline u16 vringh16_to_cpu(const struct vringh *vrh, __virtio16 val)
