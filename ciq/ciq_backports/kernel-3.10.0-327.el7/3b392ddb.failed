MPLS: Use mpls_features to activate software MPLS GSO segmentation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Simon Horman <horms@verge.net.au>
commit 3b392ddba25a95dcf5fb30b33358961c49dd5cfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3b392ddb.failed

If an MPLS packet requires segmentation then use mpls_features
to determine if the software implementation should be used.

As no driver advertises MPLS GSO segmentation this will always be
the case.

I had not noticed that this was necessary before as software MPLS GSO
segmentation was already being used in my test environment. I believe that
the reason for that is the skbs in question always had fragments and the
driver I used does not advertise NETIF_F_FRAGLIST (which seems to be the
case for most drivers). Thus software segmentation was activated by
skb_gso_ok().

This introduces the overhead of an extra call to skb_network_protocol()
in the case where where CONFIG_NET_MPLS_GSO is set and
skb->ip_summed == CHECKSUM_NONE.

Thanks to Jesse Gross for prompting me to investigate this.

	Signed-off-by: Simon Horman <horms@verge.net.au>
	Acked-by: YAMAMOTO Takashi <yamamoto@valinux.co.jp>
	Acked-by: Thomas Graf <tgraf@suug.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3b392ddba25a95dcf5fb30b33358961c49dd5cfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 883bfd5aec6c,ed8fe62d41af..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -2463,8 -2538,14 +2485,19 @@@ static netdev_features_t net_mpls_featu
  static netdev_features_t harmonize_features(struct sk_buff *skb,
  	netdev_features_t features)
  {
++<<<<<<< HEAD
 +	if (skb->ip_summed != CHECKSUM_NONE &&
 +	    !can_checksum_protocol(features, skb_network_protocol(skb))) {
++=======
+ 	int tmp;
+ 	__be16 type;
+ 
+ 	type = skb_network_protocol(skb, &tmp);
+ 	features = net_mpls_features(skb, features, type);
+ 
+ 	if (skb->ip_summed != CHECKSUM_NONE &&
+ 	    !can_checksum_protocol(features, type)) {
++>>>>>>> 3b392ddba25a (MPLS: Use mpls_features to activate software MPLS GSO segmentation)
  		features &= ~NETIF_F_ALL_CSUM;
  	} else if (illegal_highdma(skb->dev, skb)) {
  		features &= ~NETIF_F_SG;
* Unmerged path net/core/dev.c
