mshyperv: fix recognition of Hyper-V guest crash MSR's

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Denis V. Lunev <den@openvz.org>
commit cc2dd4027a43bb36c846f195a764edabc0828602
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/cc2dd402.failed

Hypervisor Top Level Functional Specification v3.1/4.0 notes that cpuid
(0x40000003) EDX's 10th bit should be used to check that Hyper-V guest
crash MSR's functionality available.

This patch should fix this recognition. Currently the code checks EAX
register instead of EDX.

	Signed-off-by: Andrey Smetanin <asmetanin@virtuozzo.com>
	Signed-off-by: Denis V. Lunev <den@openvz.org>
	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit cc2dd4027a43bb36c846f195a764edabc0828602)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/vmbus_drv.c
diff --cc drivers/hv/vmbus_drv.c
index ca849c308e2e,e7b0bcd453e7..000000000000
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@@ -584,6 -866,17 +584,20 @@@ static int vmbus_bus_init(int irq
  	if (ret)
  		goto err_alloc;
  
++<<<<<<< HEAD
++=======
+ 	hv_cpu_hotplug_quirk(true);
+ 
+ 	/*
+ 	 * Only register if the crash MSRs are available
+ 	 */
+ 	if (ms_hyperv.misc_features & HV_FEATURE_GUEST_CRASH_MSR_AVAILABLE) {
+ 		register_die_notifier(&hyperv_die_block);
+ 		atomic_notifier_chain_register(&panic_notifier_list,
+ 					       &hyperv_panic_block);
+ 	}
+ 
++>>>>>>> cc2dd4027a43 (mshyperv: fix recognition of Hyper-V guest crash MSR's)
  	vmbus_request_offers();
  
  	return 0;
@@@ -832,9 -1159,18 +846,14 @@@ cleanup
  
  static void __exit vmbus_exit(void)
  {
 -	int cpu;
 -
 -	hv_remove_kexec_handler();
 -	hv_remove_crash_handler();
 -	vmbus_connection.conn_state = DISCONNECTED;
 -	hv_synic_clockevents_cleanup();
 -	vmbus_disconnect();
  	hv_remove_vmbus_irq();
 -	tasklet_kill(&msg_dpc);
  	vmbus_free_channels();
++<<<<<<< HEAD
 +	if (ms_hyperv.features & HV_FEATURE_GUEST_CRASH_MSR_AVAILABLE) {
++=======
+ 	if (ms_hyperv.misc_features & HV_FEATURE_GUEST_CRASH_MSR_AVAILABLE) {
+ 		unregister_die_notifier(&hyperv_die_block);
++>>>>>>> cc2dd4027a43 (mshyperv: fix recognition of Hyper-V guest crash MSR's)
  		atomic_notifier_chain_unregister(&panic_notifier_list,
  						 &hyperv_panic_block);
  	}
diff --git a/arch/x86/include/asm/mshyperv.h b/arch/x86/include/asm/mshyperv.h
index c163215abb9a..eebe433f6e22 100644
--- a/arch/x86/include/asm/mshyperv.h
+++ b/arch/x86/include/asm/mshyperv.h
@@ -7,6 +7,7 @@
 
 struct ms_hyperv_info {
 	u32 features;
+	u32 misc_features;
 	u32 hints;
 };
 
diff --git a/arch/x86/kernel/cpu/mshyperv.c b/arch/x86/kernel/cpu/mshyperv.c
index b74054527183..923e1313ca51 100644
--- a/arch/x86/kernel/cpu/mshyperv.c
+++ b/arch/x86/kernel/cpu/mshyperv.c
@@ -117,6 +117,7 @@ static void __init ms_hyperv_init_platform(void)
 	 * Extract the features and hints
 	 */
 	ms_hyperv.features = cpuid_eax(HYPERV_CPUID_FEATURES);
+	ms_hyperv.misc_features = cpuid_edx(HYPERV_CPUID_FEATURES);
 	ms_hyperv.hints    = cpuid_eax(HYPERV_CPUID_ENLIGHTMENT_INFO);
 
 	printk(KERN_INFO "HyperV: features 0x%x, hints 0x%x\n",
* Unmerged path drivers/hv/vmbus_drv.c
