virtio: add legacy feature table support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] add legacy feature table support (Jason Wang) [1227339]
Rebuild_FUZZ: 88.89%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit b3bb62d11950eb6ac87403cacd667f84fa9495bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b3bb62d1.failed

virtio-blk has some legacy feature bits that modern drivers
must not negotiate, but are needed for old legacy hosts
(that e.g. don't support virtio-scsi).
Allow a separate legacy feature table for such cases.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>




(cherry picked from commit b3bb62d11950eb6ac87403cacd667f84fa9495bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio.c
diff --cc drivers/virtio/virtio.c
index ee59b74768d9,f9ad99c8b352..000000000000
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@@ -111,7 -166,10 +118,14 @@@ static int virtio_dev_probe(struct devi
  	int err, i;
  	struct virtio_device *dev = dev_to_virtio(_d);
  	struct virtio_driver *drv = drv_to_virtio(dev->dev.driver);
++<<<<<<< HEAD
 +	u32 device_features;
++=======
+ 	u64 device_features;
+ 	u64 driver_features;
+ 	u64 driver_features_legacy;
+ 	unsigned status;
++>>>>>>> b3bb62d11950 (virtio: add legacy feature table support)
  
  	/* We have a driver! */
  	add_status(dev, VIRTIO_CONFIG_S_DRIVER);
@@@ -119,19 -177,35 +133,39 @@@
  	/* Figure out what features the device supports. */
  	device_features = dev->config->get_features(dev);
  
 -	/* Figure out what features the driver supports. */
 -	driver_features = 0;
 +	/* Features supported by both device and driver into dev->features. */
 +	memset(dev->features, 0, sizeof(dev->features));
  	for (i = 0; i < drv->feature_table_size; i++) {
  		unsigned int f = drv->feature_table[i];
 -		BUG_ON(f >= 64);
 -		driver_features |= (1ULL << f);
 +		BUG_ON(f >= 32);
 +		if (device_features & (1 << f))
 +			set_bit(f, dev->features);
  	}
  
++<<<<<<< HEAD
++=======
+ 	/* Some drivers have a separate feature table for virtio v1.0 */
+ 	if (drv->feature_table_legacy) {
+ 		driver_features_legacy = 0;
+ 		for (i = 0; i < drv->feature_table_size_legacy; i++) {
+ 			unsigned int f = drv->feature_table_legacy[i];
+ 			BUG_ON(f >= 64);
+ 			driver_features_legacy |= (1ULL << f);
+ 		}
+ 	} else {
+ 		driver_features_legacy = driver_features;
+ 	}
+ 
+ 	if (driver_features & device_features & (1ULL << VIRTIO_F_VERSION_1))
+ 		dev->features = driver_features & device_features;
+ 	else
+ 		dev->features = driver_features_legacy & device_features;
+ 
++>>>>>>> b3bb62d11950 (virtio: add legacy feature table support)
  	/* Transport features always preserved to pass to finalize_features. */
  	for (i = VIRTIO_TRANSPORT_F_START; i < VIRTIO_TRANSPORT_F_END; i++)
 -		if (device_features & (1ULL << i))
 -			__virtio_set_bit(dev, i);
 +		if (device_features & (1 << i))
 +			set_bit(i, dev->features);
  
  	dev->config->finalize_features(dev);
  
* Unmerged path drivers/virtio/virtio.c
diff --git a/include/linux/virtio.h b/include/linux/virtio.h
index 8370524524c1..e4934b0cacc1 100644
--- a/include/linux/virtio.h
+++ b/include/linux/virtio.h
@@ -124,6 +124,8 @@ void virtio_break_device(struct virtio_device *dev);
  * @id_table: the ids serviced by this driver.
  * @feature_table: an array of feature numbers supported by this driver.
  * @feature_table_size: number of entries in the feature table array.
+ * @feature_table_legacy: same as feature_table but when working in legacy mode.
+ * @feature_table_size_legacy: number of entries in feature table legacy array.
  * @probe: the function to call when a device is found.  Returns 0 or -errno.
  * @remove: the function to call when a device is removed.
  * @config_changed: optional function to call when the device configuration
@@ -134,6 +136,8 @@ struct virtio_driver {
 	const struct virtio_device_id *id_table;
 	const unsigned int *feature_table;
 	unsigned int feature_table_size;
+	const unsigned int *feature_table_legacy;
+	unsigned int feature_table_size_legacy;
 	int (*probe)(struct virtio_device *dev);
 	void (*scan)(struct virtio_device *dev);
 	void (*remove)(struct virtio_device *dev);
