ipv6: Introduce udpv6_send_skb()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Vlad Yasevich <vyasevich@gmail.com>
commit d39d938c8228a4c5860138a53cf2b9ae4c4baec2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d39d938c.failed

Now that we can individually construct IPv6 skbs to send, add a
udpv6_send_skb() function to populate the udp header and send the
skb.  This allows udp_v6_push_pending_frames() to re-use this
function as well as enables us to add lockless sendmsg() support.

	Signed-off-by: Vladislav Yasevich <vyasevic@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d39d938c8228a4c5860138a53cf2b9ae4c4baec2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/udp.c
diff --cc net/ipv6/udp.c
index 2e50fde0d0ea,67a3d70f7ac4..000000000000
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@@ -992,18 -1031,8 +993,20 @@@ static int udp_v6_send_skb(struct sk_bu
  	int err = 0;
  	int is_udplite = IS_UDPLITE(sk);
  	__wsum csum = 0;
++<<<<<<< HEAD
 +
 +	if (up->pending == AF_INET)
 +		return udp_push_pending_frames(sk);
 +
 +	fl6 = &inet->cork.fl.u.ip6;
 +
 +	/* Grab the skbuff where UDP header space exists. */
 +	if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)
 +		goto out;
++=======
+ 	int offset = skb_transport_offset(skb);
+ 	int len = skb->len - offset;
++>>>>>>> d39d938c8228 (ipv6: Introduce udpv6_send_skb())
  
  	/*
  	 * Create a UDP header
* Unmerged path net/ipv6/udp.c
