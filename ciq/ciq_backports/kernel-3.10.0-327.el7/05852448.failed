ALSA: hda - Support indirect execution of verbs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] hda - Support indirect execution of verbs (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 93.18%
commit-author Takashi Iwai <tiwai@suse.de>
commit 05852448690d7d810175f8ceccefba083525aa89
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/05852448.failed

Add an overriding exec_verb op to struct hdac_device so that the call
via snd_hdac_exec_verb() can switch to a different route depending on
the setup.  The codec driver sets this field so that it can handle the
errors or applying quirks appropriately.  Furthermore, this mechanism
will be used for smooth transition for the regmap support in later
patches.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 05852448690d7d810175f8ceccefba083525aa89)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/sound/hdaudio.h
#	sound/hda/hdac_device.c
#	sound/pci/hda/hda_codec.c
diff --cc sound/pci/hda/hda_codec.c
index 05cb5f57659a,36483f7dd3ce..000000000000
--- a/sound/pci/hda/hda_codec.c
+++ b/sound/pci/hda/hda_codec.c
@@@ -136,34 -124,12 +136,39 @@@ const char *snd_hda_get_jack_type(u32 c
  EXPORT_SYMBOL_GPL(snd_hda_get_jack_type);
  
  /*
++<<<<<<< HEAD
 + * Compose a 32bit command word to be sent to the HD-audio controller
 + */
 +static inline unsigned int
 +make_codec_cmd(struct hda_codec *codec, hda_nid_t nid, int flags,
 +	       unsigned int verb, unsigned int parm)
 +{
 +	u32 val;
 +
 +	if ((codec->addr & ~0xf) || (nid & ~0x7f) ||
 +	    (verb & ~0xfff) || (parm & ~0xffff)) {
 +		codec_err(codec, "hda-codec: out of range cmd %x:%x:%x:%x\n",
 +		       codec->addr, nid, verb, parm);
 +		return ~0;
 +	}
 +
 +	val = (u32)codec->addr << 28;
 +	val |= (u32)nid << 20;
 +	val |= verb << 8;
 +	val |= parm;
 +	return val;
 +}
 +
 +/*
 + * Send and receive a verb
++=======
+  * Send and receive a verb - passed to exec_verb override for hdac_device
++>>>>>>> 05852448690d (ALSA: hda - Support indirect execution of verbs)
   */
- static int codec_exec_verb(struct hda_codec *codec, unsigned int cmd,
- 			   int flags, unsigned int *res)
+ static int codec_exec_verb(struct hdac_device *dev, unsigned int cmd,
+ 			   unsigned int flags, unsigned int *res)
  {
+ 	struct hda_codec *codec = container_of(dev, struct hda_codec, core);
  	struct hda_bus *bus = codec->bus;
  	int err;
  
@@@ -223,9 -176,9 +228,9 @@@ unsigned int snd_hda_codec_read(struct 
  				int flags,
  				unsigned int verb, unsigned int parm)
  {
 -	unsigned int cmd = snd_hdac_make_cmd(&codec->core, nid, verb, parm);
 +	unsigned cmd = make_codec_cmd(codec, nid, flags, verb, parm);
  	unsigned int res;
- 	if (codec_exec_verb(codec, cmd, flags, &res))
+ 	if (snd_hdac_exec_verb(&codec->core, cmd, flags, &res))
  		return -1;
  	return res;
  }
@@@ -246,10 -199,8 +251,15 @@@ EXPORT_SYMBOL_GPL(snd_hda_codec_read)
  int snd_hda_codec_write(struct hda_codec *codec, hda_nid_t nid, int flags,
  			unsigned int verb, unsigned int parm)
  {
++<<<<<<< HEAD
 +	unsigned int cmd = make_codec_cmd(codec, nid, flags, verb, parm);
 +	unsigned int res;
 +	return codec_exec_verb(codec, cmd, flags,
 +			       codec->bus->sync_write ? &res : NULL);
++=======
+ 	unsigned int cmd = snd_hdac_make_cmd(&codec->core, nid, verb, parm);
+ 	return snd_hdac_exec_verb(&codec->core, cmd, flags, NULL);
++>>>>>>> 05852448690d (ALSA: hda - Support indirect execution of verbs)
  }
  EXPORT_SYMBOL_GPL(snd_hda_codec_write);
  
@@@ -1303,15 -1017,17 +1313,29 @@@ int snd_hda_codec_new(struct hda_bus *b
  	if (!codec)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	dev = hda_codec_dev(codec);
 +	device_initialize(dev);
 +	dev->parent = card->dev;
 +	dev->bus = &snd_hda_bus_type;
 +	dev->release = snd_hda_codec_dev_release;
 +	dev->groups = snd_hda_dev_attr_groups;
 +	dev_set_name(dev, "hdaudioC%dD%d", card->number, codec_addr);
 +	dev_set_drvdata(dev, codec); /* for sysfs */
 +	device_enable_async_suspend(dev);
++=======
+ 	sprintf(component, "hdaudioC%dD%d", card->number, codec_addr);
+ 	err = snd_hdac_device_init(&codec->core, &bus->core, component,
+ 				   codec_addr);
+ 	if (err < 0) {
+ 		kfree(codec);
+ 		return err;
+ 	}
+ 
+ 	codec->core.dev.release = snd_hda_codec_dev_release;
+ 	codec->core.type = HDA_DEV_LEGACY;
+ 	codec->core.exec_verb = codec_exec_verb;
++>>>>>>> 05852448690d (ALSA: hda - Support indirect execution of verbs)
  
  	codec->bus = bus;
  	codec->card = card;
* Unmerged path include/sound/hdaudio.h
* Unmerged path sound/hda/hdac_device.c
* Unmerged path include/sound/hdaudio.h
* Unmerged path sound/hda/hdac_device.c
* Unmerged path sound/pci/hda/hda_codec.c
