virtio: assert 32 bit features in transports

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] assert 32 bit features in transports (Jason Wang) [1227339]
Rebuild_FUZZ: 90.00%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 93d389f82078cf7197152fb10d21977da0883420
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/93d389f8.failed

At this point, no transports set any of the high 32 feature bits.
Since transports generally can't (yet) cope with such bits, add BUG_ON
checks to make sure they are not set by mistake.

Based on rproc patch by Rusty.

	Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
	Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>




(cherry picked from commit 93d389f82078cf7197152fb10d21977da0883420)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/misc/mic/card/mic_virtio.c
#	drivers/s390/kvm/virtio_ccw.c
#	drivers/virtio/virtio_mmio.c
diff --cc drivers/s390/kvm/virtio_ccw.c
index d2c0b442bce5,244d611a0df2..000000000000
--- a/drivers/s390/kvm/virtio_ccw.c
+++ b/drivers/s390/kvm/virtio_ccw.c
@@@ -715,19 -714,18 +715,34 @@@ static void virtio_ccw_finalize_feature
  	/* Give virtio_ring a chance to accept features. */
  	vring_transport_features(vdev);
  
++<<<<<<< HEAD
 +	for (i = 0; i < sizeof(*vdev->features) / sizeof(features->features);
 +	     i++) {
 +		int highbits = i % 2 ? 32 : 0;
 +		features->index = i;
 +		features->features = cpu_to_le32(vdev->features[i / 2]
 +						 >> highbits);
 +		/* Write the feature bits to the host. */
 +		ccw->cmd_code = CCW_CMD_WRITE_FEAT;
 +		ccw->flags = 0;
 +		ccw->count = sizeof(*features);
 +		ccw->cda = (__u32)(unsigned long)features;
 +		ccw_io_helper(vcdev, ccw, VIRTIO_CCW_DOING_WRITE_FEAT);
 +	}
++=======
+ 	/* Make sure we don't have any features > 32 bits! */
+ 	BUG_ON((u32)vdev->features != vdev->features);
+ 
+ 	features->index = 0;
+ 	features->features = cpu_to_le32(vdev->features);
+ 	/* Write the feature bits to the host. */
+ 	ccw->cmd_code = CCW_CMD_WRITE_FEAT;
+ 	ccw->flags = 0;
+ 	ccw->count = sizeof(*features);
+ 	ccw->cda = (__u32)(unsigned long)features;
+ 	ccw_io_helper(vcdev, ccw, VIRTIO_CCW_DOING_WRITE_FEAT);
+ 
++>>>>>>> 93d389f82078 (virtio: assert 32 bit features in transports)
  out_free:
  	kfree(features);
  	kfree(ccw);
diff --cc drivers/virtio/virtio_mmio.c
index e9fdeb861992,aec1daee9ada..000000000000
--- a/drivers/virtio/virtio_mmio.c
+++ b/drivers/virtio/virtio_mmio.c
@@@ -160,11 -159,11 +160,19 @@@ static void vm_finalize_features(struc
  	/* Give virtio_ring a chance to accept features. */
  	vring_transport_features(vdev);
  
++<<<<<<< HEAD
 +	for (i = 0; i < ARRAY_SIZE(vdev->features); i++) {
 +		writel(i, vm_dev->base + VIRTIO_MMIO_GUEST_FEATURES_SEL);
 +		writel(vdev->features[i],
 +				vm_dev->base + VIRTIO_MMIO_GUEST_FEATURES);
 +	}
++=======
+ 	/* Make sure we don't have any features > 32 bits! */
+ 	BUG_ON((u32)vdev->features != vdev->features);
+ 
+ 	writel(0, vm_dev->base + VIRTIO_MMIO_GUEST_FEATURES_SEL);
+ 	writel(vdev->features, vm_dev->base + VIRTIO_MMIO_GUEST_FEATURES);
++>>>>>>> 93d389f82078 (virtio: assert 32 bit features in transports)
  }
  
  static void vm_get(struct virtio_device *vdev, unsigned offset,
* Unmerged path drivers/misc/mic/card/mic_virtio.c
diff --git a/drivers/lguest/lguest_device.c b/drivers/lguest/lguest_device.c
index d0a1d8a45c81..bf2e17d5f420 100644
--- a/drivers/lguest/lguest_device.c
+++ b/drivers/lguest/lguest_device.c
@@ -136,6 +136,9 @@ static void lg_finalize_features(struct virtio_device *vdev)
 	/* Give virtio_ring a chance to accept features. */
 	vring_transport_features(vdev);
 
+	/* Make sure we don't have any features > 32 bits! */
+	BUG_ON((u32)vdev->features != vdev->features);
+
 	/*
 	 * The vdev->feature array is a Linux bitmask: this isn't the same as a
 	 * the simple array of bits used by lguest devices for features.  So we
* Unmerged path drivers/misc/mic/card/mic_virtio.c
diff --git a/drivers/remoteproc/remoteproc_virtio.c b/drivers/remoteproc/remoteproc_virtio.c
index a34b50690b4e..19f86a40ddaa 100644
--- a/drivers/remoteproc/remoteproc_virtio.c
+++ b/drivers/remoteproc/remoteproc_virtio.c
@@ -227,6 +227,9 @@ static void rproc_virtio_finalize_features(struct virtio_device *vdev)
 	/* Give virtio_ring a chance to accept features */
 	vring_transport_features(vdev);
 
+	/* Make sure we don't have any features > 32 bits! */
+	BUG_ON((u32)vdev->features != vdev->features);
+
 	/*
 	 * Remember the finalized features of our vdev, and provide it
 	 * to the remote processor once it is powered on.
diff --git a/drivers/s390/kvm/kvm_virtio.c b/drivers/s390/kvm/kvm_virtio.c
index 0b51fa7ede7f..bbf0a2808b20 100644
--- a/drivers/s390/kvm/kvm_virtio.c
+++ b/drivers/s390/kvm/kvm_virtio.c
@@ -103,6 +103,9 @@ static void kvm_finalize_features(struct virtio_device *vdev)
 	/* Give virtio_ring a chance to accept features. */
 	vring_transport_features(vdev);
 
+	/* Make sure we don't have any features > 32 bits! */
+	BUG_ON((u32)vdev->features != vdev->features);
+
 	memset(out_features, 0, desc->feature_len);
 	bits = min_t(unsigned, desc->feature_len, sizeof(vdev->features)) * 8;
 	for (i = 0; i < bits; i++) {
* Unmerged path drivers/s390/kvm/virtio_ccw.c
* Unmerged path drivers/virtio/virtio_mmio.c
diff --git a/drivers/virtio/virtio_pci.c b/drivers/virtio/virtio_pci.c
index 498787bc62e1..6be97511a687 100644
--- a/drivers/virtio/virtio_pci.c
+++ b/drivers/virtio/virtio_pci.c
@@ -122,6 +122,9 @@ static void vp_finalize_features(struct virtio_device *vdev)
 	/* Give virtio_ring a chance to accept features. */
 	vring_transport_features(vdev);
 
+	/* Make sure we don't have any features > 32 bits! */
+	BUG_ON((u32)vdev->features != vdev->features);
+
 	/* We only support 32 feature bits. */
 	BUILD_BUG_ON(ARRAY_SIZE(vdev->features) != 1);
 	iowrite32(vdev->features[0], vp_dev->ioaddr+VIRTIO_PCI_GUEST_FEATURES);
