sched: Fix compiler warnings

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Guenter Roeck <linux@roeck-us.net>
commit b6220ad66bcd4a50737eb3c08e9466aa44f3bc98
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b6220ad6.failed

Commit 143e1e28cb (sched: Rework sched_domain topology definition)
introduced a number of functions with a return value of 'const int'.
gcc doesn't know what to do with that and, if the kernel is compiled
with W=1, complains with the following warnings whenever sched.h
is included.

  include/linux/sched.h:875:25: warning: type qualifiers ignored on function return type
  include/linux/sched.h:882:25: warning: type qualifiers ignored on function return type
  include/linux/sched.h:889:25: warning: type qualifiers ignored on function return type
  include/linux/sched.h:1002:21: warning: type qualifiers ignored on function return type

Commits fb2aa855 (sched, ARM: Create a dedicated scheduler topology table)
and 607b45e9a (sched, powerpc: Create a dedicated topology table) introduce
the same warning in the arm and powerpc code.

Drop 'const' from the function declarations to fix the problem.

The fix for all three patches has to be applied together to avoid
compilation failures for the affected architectures.

	Acked-by: Vincent Guittot <vincent.guittot@linaro.org>
	Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Cc: Russell King <linux@arm.linux.org.uk>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Dietmar Eggemann <dietmar.eggemann@arm.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1403658329-13196-1-git-send-email-linux@roeck-us.net
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit b6220ad66bcd4a50737eb3c08e9466aa44f3bc98)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/kernel/topology.c
#	arch/powerpc/kernel/smp.c
diff --cc arch/arm/kernel/topology.c
index c5a59546a256,e35d880f9773..000000000000
--- a/arch/arm/kernel/topology.c
+++ b/arch/arm/kernel/topology.c
@@@ -289,6 -275,20 +289,23 @@@ void store_cpu_topology(unsigned int cp
  		cpu_topology[cpuid].socket_id, mpidr);
  }
  
++<<<<<<< HEAD
++=======
+ static inline int cpu_corepower_flags(void)
+ {
+ 	return SD_SHARE_PKG_RESOURCES  | SD_SHARE_POWERDOMAIN;
+ }
+ 
+ static struct sched_domain_topology_level arm_topology[] = {
+ #ifdef CONFIG_SCHED_MC
+ 	{ cpu_corepower_mask, cpu_corepower_flags, SD_INIT_NAME(GMC) },
+ 	{ cpu_coregroup_mask, cpu_core_flags, SD_INIT_NAME(MC) },
+ #endif
+ 	{ cpu_cpu_mask, SD_INIT_NAME(DIE) },
+ 	{ NULL, },
+ };
+ 
++>>>>>>> b6220ad66bcd (sched: Fix compiler warnings)
  /*
   * init_cpu_topology is called at boot when only one cpu is running
   * which prevent simultaneous write access to cpu_topology array
diff --cc arch/powerpc/kernel/smp.c
index 9ec229ceaf25,1007fb802e6b..000000000000
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@@ -750,6 -745,28 +750,31 @@@ int setup_profiling_timer(unsigned int 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_SCHED_SMT
+ /* cpumask of CPUs with asymetric SMT dependancy */
+ static int powerpc_smt_flags(void)
+ {
+ 	int flags = SD_SHARE_CPUCAPACITY | SD_SHARE_PKG_RESOURCES;
+ 
+ 	if (cpu_has_feature(CPU_FTR_ASYM_SMT)) {
+ 		printk_once(KERN_INFO "Enabling Asymmetric SMT scheduling\n");
+ 		flags |= SD_ASYM_PACKING;
+ 	}
+ 	return flags;
+ }
+ #endif
+ 
+ static struct sched_domain_topology_level powerpc_topology[] = {
+ #ifdef CONFIG_SCHED_SMT
+ 	{ cpu_smt_mask, powerpc_smt_flags, SD_INIT_NAME(SMT) },
+ #endif
+ 	{ cpu_cpu_mask, SD_INIT_NAME(DIE) },
+ 	{ NULL, },
+ };
+ 
++>>>>>>> b6220ad66bcd (sched: Fix compiler warnings)
  void __init smp_cpus_done(unsigned int max_cpus)
  {
  	cpumask_var_t old_mask;
* Unmerged path arch/arm/kernel/topology.c
* Unmerged path arch/powerpc/kernel/smp.c
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 83644643f4da..8a98c88e107b 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -807,21 +807,21 @@ enum cpu_idle_type {
 extern int __weak arch_sd_sibiling_asym_packing(void);
 
 #ifdef CONFIG_SCHED_SMT
-static inline const int cpu_smt_flags(void)
+static inline int cpu_smt_flags(void)
 {
 	return SD_SHARE_CPUPOWER | SD_SHARE_PKG_RESOURCES;
 }
 #endif
 
 #ifdef CONFIG_SCHED_MC
-static inline const int cpu_core_flags(void)
+static inline int cpu_core_flags(void)
 {
 	return SD_SHARE_PKG_RESOURCES;
 }
 #endif
 
 #ifdef CONFIG_NUMA
-static inline const int cpu_numa_flags(void)
+static inline int cpu_numa_flags(void)
 {
 	return SD_NUMA;
 }
@@ -936,7 +936,7 @@ void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms);
 bool cpus_share_cache(int this_cpu, int that_cpu);
 
 typedef const struct cpumask *(*sched_domain_mask_f)(int cpu);
-typedef const int (*sched_domain_flags_f)(void);
+typedef int (*sched_domain_flags_f)(void);
 
 #define SDTL_OVERLAP	0x01
 
