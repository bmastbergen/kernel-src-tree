powerpc/powernv: convert codes returned by OPAL calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Cédric Le Goater <clg@fr.ibm.com>
commit e3c5c2e0bc857c7cbdb81f35a6b90236c5f330e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e3c5c2e0.failed

OPAL has its own list of return codes. The patch provides a translation
of such codes in errnos for the opal_sensor_read call, and possibly
others if needed.

	Signed-off-by: Cédric Le Goater <clg@fr.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit e3c5c2e0bc857c7cbdb81f35a6b90236c5f330e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/opal.h
#	arch/powerpc/platforms/powernv/opal.c
diff --cc arch/powerpc/include/asm/opal.h
index 5683e9a3a478,fde90bacc65e..000000000000
--- a/arch/powerpc/include/asm/opal.h
+++ b/arch/powerpc/include/asm/opal.h
@@@ -920,12 -247,7 +920,16 @@@ struct opal_sg_list *opal_vmalloc_to_sg
  					     unsigned long vmalloc_size);
  void opal_free_sg_list(struct opal_sg_list *sg);
  
++<<<<<<< HEAD
 +/*
 + * Dump region ID range usable by the OS
 + */
 +#define OPAL_DUMP_REGION_HOST_START		0x80
 +#define OPAL_DUMP_REGION_LOG_BUF		0x80
 +#define OPAL_DUMP_REGION_HOST_END		0xFF
++=======
+ extern int opal_error_code(int rc);
++>>>>>>> e3c5c2e0bc85 (powerpc/powernv: convert codes returned by OPAL calls)
  
  #endif /* __ASSEMBLY__ */
  
diff --cc arch/powerpc/platforms/powernv/opal.c
index 2542700371c7,3fb981c0ca80..000000000000
--- a/arch/powerpc/platforms/powernv/opal.c
+++ b/arch/powerpc/platforms/powernv/opal.c
@@@ -750,3 -930,29 +750,32 @@@ void opal_free_sg_list(struct opal_sg_l
  			sg = NULL;
  	}
  }
++<<<<<<< HEAD
++=======
+ 
+ int opal_error_code(int rc)
+ {
+ 	switch (rc) {
+ 	case OPAL_SUCCESS:		return 0;
+ 
+ 	case OPAL_PARAMETER:		return -EINVAL;
+ 	case OPAL_ASYNC_COMPLETION:	return -EINPROGRESS;
+ 	case OPAL_BUSY_EVENT:		return -EBUSY;
+ 	case OPAL_NO_MEM:		return -ENOMEM;
+ 
+ 	case OPAL_UNSUPPORTED:		return -EIO;
+ 	case OPAL_HARDWARE:		return -EIO;
+ 	case OPAL_INTERNAL_ERROR:	return -EIO;
+ 	default:
+ 		pr_err("%s: unexpected OPAL error %d\n", __func__, rc);
+ 		return -EIO;
+ 	}
+ }
+ 
+ EXPORT_SYMBOL_GPL(opal_poll_events);
+ EXPORT_SYMBOL_GPL(opal_rtc_read);
+ EXPORT_SYMBOL_GPL(opal_rtc_write);
+ EXPORT_SYMBOL_GPL(opal_tpo_read);
+ EXPORT_SYMBOL_GPL(opal_tpo_write);
+ EXPORT_SYMBOL_GPL(opal_i2c_request);
++>>>>>>> e3c5c2e0bc85 (powerpc/powernv: convert codes returned by OPAL calls)
* Unmerged path arch/powerpc/include/asm/opal.h
diff --git a/arch/powerpc/platforms/powernv/opal-sensor.c b/arch/powerpc/platforms/powernv/opal-sensor.c
index 10271ad1fac4..30fd6a46017f 100644
--- a/arch/powerpc/platforms/powernv/opal-sensor.c
+++ b/arch/powerpc/platforms/powernv/opal-sensor.c
@@ -44,8 +44,10 @@ int opal_get_sensor_data(u32 sensor_hndl, u32 *sensor_data)
 
 	mutex_lock(&opal_sensor_mutex);
 	ret = opal_sensor_read(sensor_hndl, token, &data);
-	if (ret != OPAL_ASYNC_COMPLETION)
+	if (ret != OPAL_ASYNC_COMPLETION) {
+		ret = opal_error_code(ret);
 		goto out_token;
+	}
 
 	ret = opal_async_wait_response(token, &msg);
 	if (ret) {
@@ -55,7 +57,7 @@ int opal_get_sensor_data(u32 sensor_hndl, u32 *sensor_data)
 	}
 
 	*sensor_data = be32_to_cpu(data);
-	ret = be64_to_cpu(msg.params[1]);
+	ret = opal_error_code(be64_to_cpu(msg.params[1]));
 
 out_token:
 	mutex_unlock(&opal_sensor_mutex);
* Unmerged path arch/powerpc/platforms/powernv/opal.c
