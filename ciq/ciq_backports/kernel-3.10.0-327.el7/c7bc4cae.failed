qla2xxx: Do not reset adapter if SRB handle is in range.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Do not reset adapter if SRB handle is in range (Chad Dupuis) [1188168]
Rebuild_FUZZ: 99.10%
commit-author Chad Dupuis <chad.dupuis@qlogic.com>
commit c7bc4cae0d5c9703d8b15fcc0fd53b86b135bde8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c7bc4cae.failed

If an SRB is NULL but the handle is in range just drop the
command instead of also resetting the adapter. If the handle
is in range then the command was valid at some point and may
have been aborted. Resetting the adapter can lead to extended
recovery times in this case.

	Signed-off-by: Chad Dupuis <chad.dupuis@qlogic.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
	Signed-off-by: James Bottomley <JBottomley@Odin.com>
(cherry picked from commit c7bc4cae0d5c9703d8b15fcc0fd53b86b135bde8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_dbg.c
#	drivers/scsi/qla2xxx/qla_os.c
diff --cc drivers/scsi/qla2xxx/qla_dbg.c
index e7fa7d02d853,c6e51c6cd3dc..000000000000
--- a/drivers/scsi/qla2xxx/qla_dbg.c
+++ b/drivers/scsi/qla2xxx/qla_dbg.c
@@@ -11,18 -11,15 +11,23 @@@
   * ----------------------------------------------------------------------
   * |             Level            |   Last Value Used  |     Holes	|
   * ----------------------------------------------------------------------
 - * | Module Init and Probe        |       0x017f       | 0x0146         |
 + * | Module Init and Probe        |       0x017d       | 0x004b,0x0141	|
 + * |                              |                    | 0x0144,0x0146	|
   * |                              |                    | 0x015b-0x0160	|
 - * |                              |                    | 0x016e-0x0170  |
 - * | Mailbox commands             |       0x118d       | 0x1115-0x1116	|
 - * |                              |                    | 0x111a-0x111b  |
 - * | Device Discovery             |       0x2016       | 0x2020-0x2022, |
 + * |                              |                    | 0x016e-0x0170	|
 + * | Mailbox commands             |       0x118d       | 0x1018-0x1019	|
 + * |                              |                    | 0x10ca         |
 + * |                              |                    | 0x1115-0x1116  |
 + * |                              |                    | 0x111a-0x111b	|
 + * | Device Discovery             |       0x2095       | 0x2020-0x2022, |
   * |                              |                    | 0x2011-0x2012, |
++<<<<<<< HEAD
 + * |                              |                    | 0x2016         |
 + * | Queue Command and IO tracing |       0x3059       | 0x3006-0x300b  |
++=======
+  * |                              |                    | 0x2099-0x20a4  |
+  * | Queue Command and IO tracing |       0x3075       | 0x300b         |
++>>>>>>> c7bc4cae0d5c (qla2xxx: Do not reset adapter if SRB handle is in range.)
   * |                              |                    | 0x3027-0x3028  |
   * |                              |                    | 0x303d-0x3041  |
   * |                              |                    | 0x302d,0x3033  |
diff --cc drivers/scsi/qla2xxx/qla_os.c
index a38d857753f1,f70809feca90..000000000000
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@@ -957,8 -958,8 +957,13 @@@ qla2xxx_eh_abort(struct scsi_cmnd *cmd
  	}
  
  	ql_dbg(ql_dbg_taskm, vha, 0x8002,
++<<<<<<< HEAD
 +	    "Aborting from RISC nexus=%ld:%d:%d sp=%p cmd=%p\n",
 +	    vha->host_no, id, lun, sp, cmd);
++=======
+ 	    "Aborting from RISC nexus=%ld:%d:%llu sp=%p cmd=%p handle=%x\n",
+ 	    vha->host_no, id, lun, sp, cmd, sp->handle);
++>>>>>>> c7bc4cae0d5c (qla2xxx: Do not reset adapter if SRB handle is in range.)
  
  	/* Get a reference to the sp and drop the lock.*/
  	sp_get(sp);
* Unmerged path drivers/scsi/qla2xxx/qla_dbg.c
diff --git a/drivers/scsi/qla2xxx/qla_isr.c b/drivers/scsi/qla2xxx/qla_isr.c
index 213c09acbead..d718ab85919b 100644
--- a/drivers/scsi/qla2xxx/qla_isr.c
+++ b/drivers/scsi/qla2xxx/qla_isr.c
@@ -1984,14 +1984,18 @@ qla2x00_status_entry(scsi_qla_host_t *vha, struct rsp_que *rsp, void *pkt)
 	}
 
 	/* Validate handle. */
-	if (handle < req->num_outstanding_cmds)
+	if (handle < req->num_outstanding_cmds) {
 		sp = req->outstanding_cmds[handle];
-	else
-		sp = NULL;
-
-	if (sp == NULL) {
+		if (!sp) {
+			ql_dbg(ql_dbg_io, vha, 0x3075,
+			    "%s(%ld): Already returned command for status handle (0x%x).\n",
+			    __func__, vha->host_no, sts->handle);
+			return;
+		}
+	} else {
 		ql_dbg(ql_dbg_io, vha, 0x3017,
-		    "Invalid status handle (0x%x).\n", sts->handle);
+		    "Invalid status handle, out of range (0x%x).\n",
+		    sts->handle);
 
 		if (!test_bit(ABORT_ISP_ACTIVE, &vha->dpc_flags)) {
 			if (IS_P3P_TYPE(ha))
@@ -2278,12 +2282,12 @@ out:
 		ql_dbg(ql_dbg_io, fcport->vha, 0x3022,
 		    "FCP command status: 0x%x-0x%x (0x%x) nexus=%ld:%d:%d "
 		    "portid=%02x%02x%02x oxid=0x%x cdb=%10phN len=0x%x "
-		    "rsp_info=0x%x resid=0x%x fw_resid=0x%x.\n",
+		    "rsp_info=0x%x resid=0x%x fw_resid=0x%x sp=%p cp=%p.\n",
 		    comp_status, scsi_status, res, vha->host_no,
 		    cp->device->id, cp->device->lun, fcport->d_id.b.domain,
 		    fcport->d_id.b.area, fcport->d_id.b.al_pa, ox_id,
 		    cp->cmnd, scsi_bufflen(cp), rsp_info_len,
-		    resid_len, fw_resid_len);
+		    resid_len, fw_resid_len, sp, cp);
 
 	if (rsp->status_srb == NULL)
 		sp->done(ha, sp, res);
* Unmerged path drivers/scsi/qla2xxx/qla_os.c
