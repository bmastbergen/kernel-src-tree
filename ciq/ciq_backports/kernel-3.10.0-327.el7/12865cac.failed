ALSA: line6: Pass driver name to line6_probe()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [alsa] line6: Pass driver name to line6_probe() (Jaroslav Kysela) [1197064]
Rebuild_FUZZ: 93.02%
commit-author Chris Rorvick <chris@rorvick.com>
commit 12865cac38cc9e808ce8b479f4bb12fd00bfee7c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/12865cac.failed

Provide a unique name for each driver instead of using "line6usb" for
all of them.  This will allow for different configurations based on the
driver type.

	Signed-off-by: Chris Rorvick <chris@rorvick.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 12865cac38cc9e808ce8b479f4bb12fd00bfee7c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/line6/driver.h
#	drivers/staging/line6/pod.c
#	drivers/staging/line6/variax.c
#	sound/usb/line6/driver.c
#	sound/usb/line6/podhd.c
#	sound/usb/line6/toneport.c
diff --cc drivers/staging/line6/driver.h
index 4fd9dad58be7,92a662a0469e..000000000000
--- a/drivers/staging/line6/driver.h
+++ b/drivers/staging/line6/driver.h
@@@ -18,7 -18,11 +18,15 @@@
  
  #include "midi.h"
  
++<<<<<<< HEAD:drivers/staging/line6/driver.h
 +#define DRIVER_NAME "line6usb"
++=======
+ #define USB_INTERVALS_PER_SECOND 1000
+ 
+ /* Fallback USB interval and max packet size values */
+ #define LINE6_FALLBACK_INTERVAL 10
+ #define LINE6_FALLBACK_MAXPACKETSIZE 16
++>>>>>>> 12865cac38cc (ALSA: line6: Pass driver name to line6_probe()):sound/usb/line6/driver.h
  
  #define LINE6_TIMEOUT 1
  #define LINE6_BUFSIZE_LISTEN 32
@@@ -211,4 -164,18 +219,21 @@@ extern int line6_version_request_async(
  extern int line6_write_data(struct usb_line6 *line6, int address, void *data,
  			    size_t datalen);
  
++<<<<<<< HEAD:drivers/staging/line6/driver.h
++=======
+ int line6_probe(struct usb_interface *interface,
+ 		const struct usb_device_id *id,
+ 		const char *driver_name,
+ 		const struct line6_properties *properties,
+ 		int (*private_init)(struct usb_line6 *, const struct usb_device_id *id),
+ 		size_t data_size);
+ 
+ void line6_disconnect(struct usb_interface *interface);
+ 
+ #ifdef CONFIG_PM
+ int line6_suspend(struct usb_interface *interface, pm_message_t message);
+ int line6_resume(struct usb_interface *interface);
+ #endif
+ 
++>>>>>>> 12865cac38cc (ALSA: line6: Pass driver name to line6_probe()):sound/usb/line6/driver.h
  #endif
diff --cc drivers/staging/line6/pod.c
index 711d2c74641b,09017bc9615b..000000000000
--- a/drivers/staging/line6/pod.c
+++ b/drivers/staging/line6/pod.c
@@@ -407,44 -454,131 +407,50 @@@ static int pod_try_init(struct usb_inte
  	return 0;
  }
  
 -#define LINE6_DEVICE(prod) USB_DEVICE(0x0e41, prod)
 -#define LINE6_IF_NUM(prod, n) USB_DEVICE_INTERFACE_NUMBER(0x0e41, prod, n)
 -
 -/* table of devices that work with this driver */
 -static const struct usb_device_id pod_id_table[] = {
 -	{ LINE6_DEVICE(0x4250),    .driver_info = LINE6_BASSPODXT },
 -	{ LINE6_DEVICE(0x4642),    .driver_info = LINE6_BASSPODXTLIVE },
 -	{ LINE6_DEVICE(0x4252),    .driver_info = LINE6_BASSPODXTPRO },
 -	{ LINE6_IF_NUM(0x5051, 1), .driver_info = LINE6_POCKETPOD },
 -	{ LINE6_DEVICE(0x5044),    .driver_info = LINE6_PODXT },
 -	{ LINE6_IF_NUM(0x4650, 0), .driver_info = LINE6_PODXTLIVE_POD },
 -	{ LINE6_DEVICE(0x5050),    .driver_info = LINE6_PODXTPRO },
 -	{}
 -};
 -
 -MODULE_DEVICE_TABLE(usb, pod_id_table);
 -
 -static const struct line6_properties pod_properties_table[] = {
 -	[LINE6_BASSPODXT] = {
 -		.id = "BassPODxt",
 -		.name = "BassPODxt",
 -		.capabilities	= LINE6_CAP_CONTROL
 -				| LINE6_CAP_PCM
 -				| LINE6_CAP_HWMON,
 -		.altsetting = 5,
 -		.ep_ctrl_r = 0x84,
 -		.ep_ctrl_w = 0x03,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -	[LINE6_BASSPODXTLIVE] = {
 -		.id = "BassPODxtLive",
 -		.name = "BassPODxt Live",
 -		.capabilities	= LINE6_CAP_CONTROL
 -				| LINE6_CAP_PCM
 -				| LINE6_CAP_HWMON,
 -		.altsetting = 1,
 -		.ep_ctrl_r = 0x84,
 -		.ep_ctrl_w = 0x03,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -	[LINE6_BASSPODXTPRO] = {
 -		.id = "BassPODxtPro",
 -		.name = "BassPODxt Pro",
 -		.capabilities	= LINE6_CAP_CONTROL
 -				| LINE6_CAP_PCM
 -				| LINE6_CAP_HWMON,
 -		.altsetting = 5,
 -		.ep_ctrl_r = 0x84,
 -		.ep_ctrl_w = 0x03,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -	[LINE6_POCKETPOD] = {
 -		.id = "PocketPOD",
 -		.name = "Pocket POD",
 -		.capabilities	= LINE6_CAP_CONTROL,
 -		.altsetting = 0,
 -		.ep_ctrl_r = 0x82,
 -		.ep_ctrl_w = 0x02,
 -		/* no audio channel */
 -	},
 -	[LINE6_PODXT] = {
 -		.id = "PODxt",
 -		.name = "PODxt",
 -		.capabilities	= LINE6_CAP_CONTROL
 -				| LINE6_CAP_PCM
 -				| LINE6_CAP_HWMON,
 -		.altsetting = 5,
 -		.ep_ctrl_r = 0x84,
 -		.ep_ctrl_w = 0x03,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -	[LINE6_PODXTLIVE_POD] = {
 -		.id = "PODxtLive",
 -		.name = "PODxt Live",
 -		.capabilities	= LINE6_CAP_CONTROL
 -				| LINE6_CAP_PCM
 -				| LINE6_CAP_HWMON,
 -		.altsetting = 1,
 -		.ep_ctrl_r = 0x84,
 -		.ep_ctrl_w = 0x03,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -	[LINE6_PODXTPRO] = {
 -		.id = "PODxtPro",
 -		.name = "PODxt Pro",
 -		.capabilities	= LINE6_CAP_CONTROL
 -				| LINE6_CAP_PCM
 -				| LINE6_CAP_HWMON,
 -		.altsetting = 5,
 -		.ep_ctrl_r = 0x84,
 -		.ep_ctrl_w = 0x03,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -};
 -
  /*
 -	Probe USB device.
 +	 Init POD device (and clean up in case of failure).
  */
 -static int pod_probe(struct usb_interface *interface,
 -		     const struct usb_device_id *id)
 +int line6_pod_init(struct usb_interface *interface, struct usb_line6_pod *pod)
  {
++<<<<<<< HEAD:drivers/staging/line6/pod.c
 +	int err = pod_try_init(interface, pod);
 +
 +	if (err < 0)
 +		pod_destruct(interface);
 +
 +	return err;
++=======
+ 	return line6_probe(interface, id, "Line6-POD",
+ 			   &pod_properties_table[id->driver_info],
+ 			   pod_init, sizeof(struct usb_line6_pod));
++>>>>>>> 12865cac38cc (ALSA: line6: Pass driver name to line6_probe()):sound/usb/line6/pod.c
  }
  
 -static struct usb_driver pod_driver = {
 -	.name = KBUILD_MODNAME,
 -	.probe = pod_probe,
 -	.disconnect = line6_disconnect,
 -#ifdef CONFIG_PM
 -	.suspend = line6_suspend,
 -	.resume = line6_resume,
 -	.reset_resume = line6_resume,
 -#endif
 -	.id_table = pod_id_table,
 -};
 +/*
 +	POD device disconnected.
 +*/
 +void line6_pod_disconnect(struct usb_interface *interface)
 +{
 +	struct usb_line6_pod *pod;
 +
 +	if (interface == NULL)
 +		return;
 +	pod = usb_get_intfdata(interface);
  
 -module_usb_driver(pod_driver);
 +	if (pod != NULL) {
 +		struct snd_line6_pcm *line6pcm = pod->line6.line6pcm;
 +		struct device *dev = &interface->dev;
  
 -MODULE_DESCRIPTION("Line 6 POD USB driver");
 -MODULE_LICENSE("GPL");
 +		if (line6pcm != NULL)
 +			line6_pcm_disconnect(line6pcm);
 +
 +		if (dev != NULL) {
 +			/* remove sysfs entries: */
 +			device_remove_file(dev, &dev_attr_device_id);
 +			device_remove_file(dev, &dev_attr_firmware_version);
 +			device_remove_file(dev, &dev_attr_serial_number);
 +		}
 +	}
 +
 +	pod_destruct(interface);
 +}
diff --cc drivers/staging/line6/variax.c
index bd0f694fa8d8,ddc23ddf0750..000000000000
--- a/drivers/staging/line6/variax.c
+++ b/drivers/staging/line6/variax.c
@@@ -207,27 -243,64 +207,33 @@@ static int variax_try_init(struct usb_i
  	return 0;
  }
  
 -#define LINE6_DEVICE(prod) USB_DEVICE(0x0e41, prod)
 -#define LINE6_IF_NUM(prod, n) USB_DEVICE_INTERFACE_NUMBER(0x0e41, prod, n)
 -
 -/* table of devices that work with this driver */
 -static const struct usb_device_id variax_id_table[] = {
 -	{ LINE6_IF_NUM(0x4650, 1), .driver_info = LINE6_PODXTLIVE_VARIAX },
 -	{ LINE6_DEVICE(0x534d),    .driver_info = LINE6_VARIAX },
 -	{}
 -};
 -
 -MODULE_DEVICE_TABLE(usb, variax_id_table);
 -
 -static const struct line6_properties variax_properties_table[] = {
 -	[LINE6_PODXTLIVE_VARIAX] = {
 -		.id = "PODxtLive",
 -		.name = "PODxt Live",
 -		.capabilities	= LINE6_CAP_CONTROL,
 -		.altsetting = 1,
 -		.ep_ctrl_r = 0x86,
 -		.ep_ctrl_w = 0x05,
 -		.ep_audio_r = 0x82,
 -		.ep_audio_w = 0x01,
 -	},
 -	[LINE6_VARIAX] = {
 -		.id = "Variax",
 -		.name = "Variax Workbench",
 -		.capabilities	= LINE6_CAP_CONTROL,
 -		.altsetting = 1,
 -		.ep_ctrl_r = 0x82,
 -		.ep_ctrl_w = 0x01,
 -		/* no audio channel */
 -	}
 -};
 -
  /*
 -	Probe USB device.
 +	 Init workbench device (and clean up in case of failure).
  */
 -static int variax_probe(struct usb_interface *interface,
 -			const struct usb_device_id *id)
 +int line6_variax_init(struct usb_interface *interface,
 +		      struct usb_line6_variax *variax)
  {
++<<<<<<< HEAD:drivers/staging/line6/variax.c
 +	int err = variax_try_init(interface, variax);
 +
 +	if (err < 0)
 +		variax_destruct(interface);
 +
 +	return err;
++=======
+ 	return line6_probe(interface, id, "Line6-Variax",
+ 			   &variax_properties_table[id->driver_info],
+ 			   variax_init, sizeof(struct usb_line6_variax));
++>>>>>>> 12865cac38cc (ALSA: line6: Pass driver name to line6_probe()):sound/usb/line6/variax.c
  }
  
 -static struct usb_driver variax_driver = {
 -	.name = KBUILD_MODNAME,
 -	.probe = variax_probe,
 -	.disconnect = line6_disconnect,
 -#ifdef CONFIG_PM
 -	.suspend = line6_suspend,
 -	.resume = line6_resume,
 -	.reset_resume = line6_resume,
 -#endif
 -	.id_table = variax_id_table,
 -};
 -
 -module_usb_driver(variax_driver);
 +/*
 +	Workbench device disconnected.
 +*/
 +void line6_variax_disconnect(struct usb_interface *interface)
 +{
 +	if (interface == NULL)
 +		return;
  
 -MODULE_DESCRIPTION("Vairax Workbench USB driver");
 -MODULE_LICENSE("GPL");
 +	variax_destruct(interface);
 +}
* Unmerged path sound/usb/line6/driver.c
* Unmerged path sound/usb/line6/podhd.c
* Unmerged path sound/usb/line6/toneport.c
* Unmerged path drivers/staging/line6/driver.h
* Unmerged path drivers/staging/line6/pod.c
* Unmerged path drivers/staging/line6/variax.c
* Unmerged path sound/usb/line6/driver.c
* Unmerged path sound/usb/line6/podhd.c
* Unmerged path sound/usb/line6/toneport.c
