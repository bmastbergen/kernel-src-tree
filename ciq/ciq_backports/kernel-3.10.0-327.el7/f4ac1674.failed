nfs: Add ALLOCATE support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Anna Schumaker <Anna.Schumaker@netapp.com>
commit f4ac1674f5da420ef17896f0f222c5215ebcde80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/f4ac1674.failed

This patch adds support for using the NFS v4.2 operation ALLOCATE to
preallocate data in a file.

	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit f4ac1674f5da420ef17896f0f222c5215ebcde80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs42.h
#	fs/nfs/nfs42proc.c
#	fs/nfs/nfs42xdr.c
#	fs/nfs/nfs4_fs.h
#	fs/nfs/nfs4file.c
#	fs/nfs/nfs4proc.c
#	fs/nfs/nfs4xdr.c
#	include/linux/nfs4.h
#	include/linux/nfs_fs_sb.h
#	include/linux/nfs_xdr.h
diff --cc fs/nfs/nfs4_fs.h
index 88a315c883c6,a08178764cf9..000000000000
--- a/fs/nfs/nfs4_fs.h
+++ b/fs/nfs/nfs4_fs.h
@@@ -226,6 -226,10 +226,13 @@@ int nfs4_replace_transport(struct nfs_s
  				const struct nfs4_fs_locations *locations);
  
  /* nfs4proc.c */
++<<<<<<< HEAD
++=======
+ extern int nfs4_handle_exception(struct nfs_server *, int, struct nfs4_exception *);
+ extern int nfs4_call_sync(struct rpc_clnt *, struct nfs_server *,
+ 			  struct rpc_message *, struct nfs4_sequence_args *,
+ 			  struct nfs4_sequence_res *, int);
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  extern int nfs4_proc_setclientid(struct nfs_client *, u32, unsigned short, struct rpc_cred *, struct nfs4_setclientid_res *);
  extern int nfs4_proc_setclientid_confirm(struct nfs_client *, struct nfs4_setclientid_res *arg, struct rpc_cred *);
  extern int nfs4_proc_get_rootfh(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *, bool);
diff --cc fs/nfs/nfs4file.c
index cb5f89c48651,f78e9fd0735a..000000000000
--- a/fs/nfs/nfs4file.c
+++ b/fs/nfs/nfs4file.c
@@@ -115,12 -121,56 +117,55 @@@ nfs4_file_fsync(struct file *file, loff
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NFS_V4_2
+ static loff_t nfs4_file_llseek(struct file *filep, loff_t offset, int whence)
+ {
+ 	loff_t ret;
+ 
+ 	switch (whence) {
+ 	case SEEK_HOLE:
+ 	case SEEK_DATA:
+ 		ret = nfs42_proc_llseek(filep, offset, whence);
+ 		if (ret != -ENOTSUPP)
+ 			return ret;
+ 	default:
+ 		return nfs_file_llseek(filep, offset, whence);
+ 	}
+ }
+ 
+ static long nfs42_fallocate(struct file *filep, int mode, loff_t offset, loff_t len)
+ {
+ 	struct inode *inode = file_inode(filep);
+ 	long ret;
+ 
+ 	if (!S_ISREG(inode->i_mode))
+ 		return -EOPNOTSUPP;
+ 
+ 	if (mode != 0)
+ 		return -EOPNOTSUPP;
+ 
+ 	ret = inode_newsize_ok(inode, offset + len);
+ 	if (ret < 0)
+ 		return ret;
+ 
+ 	mutex_lock(&inode->i_mutex);
+ 	ret = nfs42_proc_allocate(filep, offset, len);
+ 	mutex_unlock(&inode->i_mutex);
+ 
+ 	nfs_zap_caches(inode);
+ 	return ret;
+ }
+ #endif /* CONFIG_NFS_V4_2 */
+ 
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  const struct file_operations nfs4_file_operations = {
 -#ifdef CONFIG_NFS_V4_2
 -	.llseek		= nfs4_file_llseek,
 -#else
  	.llseek		= nfs_file_llseek,
 -#endif
 -	.read		= new_sync_read,
 -	.write		= new_sync_write,
 -	.read_iter	= nfs_file_read,
 -	.write_iter	= nfs_file_write,
 +	.read		= do_sync_read,
 +	.write		= do_sync_write,
 +	.aio_read	= nfs_file_read,
 +	.aio_write	= nfs_file_write,
  	.mmap		= nfs_file_mmap,
  	.open		= nfs4_file_open,
  	.flush		= nfs_file_flush,
@@@ -129,7 -179,10 +174,14 @@@
  	.lock		= nfs_lock,
  	.flock		= nfs_flock,
  	.splice_read	= nfs_file_splice_read,
++<<<<<<< HEAD
 +	.splice_write	= nfs_file_splice_write,
++=======
+ 	.splice_write	= iter_file_splice_write,
+ #ifdef CONFIG_NFS_V4_2
+ 	.fallocate	= nfs42_fallocate,
+ #endif /* CONFIG_NFS_V4_2 */
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  	.check_flags	= nfs_check_flags,
 -	.setlease	= simple_nosetlease,
 +	.setlease	= nfs_setlease,
  };
diff --cc fs/nfs/nfs4proc.c
index 21f0de0c3a8b,b1b403b0ca0d..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -8502,7 -8423,9 +8502,13 @@@ static const struct nfs4_minor_version_
  		| NFS_CAP_CHANGE_ATTR
  		| NFS_CAP_POSIX_LOCK
  		| NFS_CAP_STATEID_NFSV41
++<<<<<<< HEAD
 +		| NFS_CAP_ATOMIC_OPEN_V1,
++=======
+ 		| NFS_CAP_ATOMIC_OPEN_V1
+ 		| NFS_CAP_ALLOCATE
+ 		| NFS_CAP_SEEK,
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  	.init_client = nfs41_init_client,
  	.shutdown_client = nfs41_shutdown_client,
  	.match_stateid = nfs41_match_stateid,
diff --cc fs/nfs/nfs4xdr.c
index bd5ef45c5e50,0a1484561e4b..000000000000
--- a/fs/nfs/nfs4xdr.c
+++ b/fs/nfs/nfs4xdr.c
@@@ -7506,6 -7392,10 +7506,13 @@@ struct rpc_procinfo	nfs4_procedures[] 
  			enc_bind_conn_to_session, dec_bind_conn_to_session),
  	PROC(DESTROY_CLIENTID,	enc_destroy_clientid,	dec_destroy_clientid),
  #endif /* CONFIG_NFS_V4_1 */
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NFS_V4_2
+ 	PROC(SEEK,		enc_seek,		dec_seek),
+ 	PROC(ALLOCATE,		enc_allocate,		dec_allocate),
+ #endif /* CONFIG_NFS_V4_2 */
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  };
  
  const struct rpc_version nfs_version4 = {
diff --cc include/linux/nfs4.h
index d56c4c28a3c0,2b28a21edcd0..000000000000
--- a/include/linux/nfs4.h
+++ b/include/linux/nfs4.h
@@@ -489,6 -487,10 +489,13 @@@ enum 
  	NFSPROC4_CLNT_GETDEVICELIST,
  	NFSPROC4_CLNT_BIND_CONN_TO_SESSION,
  	NFSPROC4_CLNT_DESTROY_CLIENTID,
++<<<<<<< HEAD
++=======
+ 
+ 	/* nfs42 */
+ 	NFSPROC4_CLNT_SEEK,
+ 	NFSPROC4_CLNT_ALLOCATE,
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  };
  
  /* nfs41 types */
diff --cc include/linux/nfs_fs_sb.h
index 922be2e050f5,df6ed429b406..000000000000
--- a/include/linux/nfs_fs_sb.h
+++ b/include/linux/nfs_fs_sb.h
@@@ -230,5 -230,7 +230,10 @@@ struct nfs_server 
  #define NFS_CAP_STATEID_NFSV41	(1U << 16)
  #define NFS_CAP_ATOMIC_OPEN_V1	(1U << 17)
  #define NFS_CAP_SECURITY_LABEL	(1U << 18)
++<<<<<<< HEAD
++=======
+ #define NFS_CAP_SEEK		(1U << 19)
+ #define NFS_CAP_ALLOCATE	(1U << 20)
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  
  #endif
diff --cc include/linux/nfs_xdr.h
index d874b38c2470,467c84efb596..000000000000
--- a/include/linux/nfs_xdr.h
+++ b/include/linux/nfs_xdr.h
@@@ -1256,6 -1242,39 +1256,42 @@@ nfs_free_pnfs_ds_cinfo(struct pnfs_ds_c
  
  #endif /* CONFIG_NFS_V4_1 */
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NFS_V4_2
+ struct nfs42_falloc_args {
+ 	struct nfs4_sequence_args	seq_args;
+ 
+ 	struct nfs_fh			*falloc_fh;
+ 	nfs4_stateid			 falloc_stateid;
+ 	u64				 falloc_offset;
+ 	u64				 falloc_length;
+ };
+ 
+ struct nfs42_falloc_res {
+ 	struct nfs4_sequence_res	seq_res;
+ 	unsigned int			status;
+ };
+ 
+ struct nfs42_seek_args {
+ 	struct nfs4_sequence_args	seq_args;
+ 
+ 	struct nfs_fh			*sa_fh;
+ 	nfs4_stateid			sa_stateid;
+ 	u64				sa_offset;
+ 	u32				sa_what;
+ };
+ 
+ struct nfs42_seek_res {
+ 	struct nfs4_sequence_res	seq_res;
+ 	unsigned int			status;
+ 
+ 	u32	sr_eof;
+ 	u64	sr_offset;
+ };
+ #endif
+ 
++>>>>>>> f4ac1674f5da (nfs: Add ALLOCATE support)
  struct nfs_page;
  
  #define NFS_PAGEVEC_SIZE	(8U)
* Unmerged path fs/nfs/nfs42.h
* Unmerged path fs/nfs/nfs42proc.c
* Unmerged path fs/nfs/nfs42xdr.c
diff --git a/fs/nfs/inode.c b/fs/nfs/inode.c
index 3f66e2951a18..36a9eb49b4a6 100644
--- a/fs/nfs/inode.c
+++ b/fs/nfs/inode.c
@@ -192,6 +192,7 @@ void nfs_zap_caches(struct inode *inode)
 	nfs_zap_caches_locked(inode);
 	spin_unlock(&inode->i_lock);
 }
+EXPORT_SYMBOL_GPL(nfs_zap_caches);
 
 void nfs_zap_mapping(struct inode *inode, struct address_space *mapping)
 {
* Unmerged path fs/nfs/nfs42.h
* Unmerged path fs/nfs/nfs42proc.c
* Unmerged path fs/nfs/nfs42xdr.c
* Unmerged path fs/nfs/nfs4_fs.h
* Unmerged path fs/nfs/nfs4file.c
* Unmerged path fs/nfs/nfs4proc.c
* Unmerged path fs/nfs/nfs4xdr.c
* Unmerged path include/linux/nfs4.h
* Unmerged path include/linux/nfs_fs_sb.h
* Unmerged path include/linux/nfs_xdr.h
