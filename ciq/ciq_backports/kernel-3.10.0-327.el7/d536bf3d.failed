ACPI / processor: use apic_id and remove duplicated _MAT evaluation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [acpi] processor: use apic_id and remove duplicated _MAT evaluation (Prarit Bhargava) [1201167]
Rebuild_FUZZ: 94.49%
commit-author Jiang Liu <jiang.liu@huawei.com>
commit d536bf3dc97417471e2c5098837a1cddd7fbb3c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d536bf3d.failed

Since APIC id is saved in processor struct, just use it and
remove the duplicated _MAT evaluation.

	Signed-off-by: Jiang Liu <jiang.liu@huawei.com>
	Signed-off-by: Hanjun Guo <hanjun.guo@linaro.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit d536bf3dc97417471e2c5098837a1cddd7fbb3c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/ia64/kernel/acpi.c
#	drivers/acpi/acpi_processor.c
diff --cc arch/ia64/kernel/acpi.c
index 335eb07480fe,59d52e3aef12..000000000000
--- a/arch/ia64/kernel/acpi.c
+++ b/arch/ia64/kernel/acpi.c
@@@ -882,40 -882,10 +882,14 @@@ __init void prefill_possible_map(void
  		set_cpu_possible(i, true);
  }
  
++<<<<<<< HEAD
 +static int __cpuinit _acpi_map_lsapic(acpi_handle handle, int *pcpu)
++=======
+ static int _acpi_map_lsapic(acpi_handle handle, int physid, int *pcpu)
++>>>>>>> d536bf3dc974 (ACPI / processor: use apic_id and remove duplicated _MAT evaluation)
  {
- 	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
- 	union acpi_object *obj;
- 	struct acpi_madt_local_sapic *lsapic;
  	cpumask_t tmp_map;
- 	int cpu, physid;
- 
- 	if (ACPI_FAILURE(acpi_evaluate_object(handle, "_MAT", NULL, &buffer)))
- 		return -EINVAL;
- 
- 	if (!buffer.length || !buffer.pointer)
- 		return -EINVAL;
- 
- 	obj = buffer.pointer;
- 	if (obj->type != ACPI_TYPE_BUFFER)
- 	{
- 		kfree(buffer.pointer);
- 		return -EINVAL;
- 	}
- 
- 	lsapic = (struct acpi_madt_local_sapic *)obj->buffer.pointer;
- 
- 	if ((lsapic->header.type != ACPI_MADT_TYPE_LOCAL_SAPIC) ||
- 	    (!(lsapic->lapic_flags & ACPI_MADT_ENABLED))) {
- 		kfree(buffer.pointer);
- 		return -EINVAL;
- 	}
- 
- 	physid = ((lsapic->id << 8) | (lsapic->eid));
- 
- 	kfree(buffer.pointer);
- 	buffer.length = ACPI_ALLOCATE_BUFFER;
- 	buffer.pointer = NULL;
+ 	int cpu;
  
  	cpumask_complement(&tmp_map, cpu_present_mask);
  	cpu = cpumask_first(&tmp_map);
diff --cc drivers/acpi/acpi_processor.c
index 79f2fe8754c2,66c9b702894b..000000000000
--- a/drivers/acpi/acpi_processor.c
+++ b/drivers/acpi/acpi_processor.c
@@@ -178,9 -178,12 +178,16 @@@ static int acpi_processor_hotadd_init(s
  	if (ACPI_FAILURE(status) || !(sta & ACPI_STA_DEVICE_PRESENT))
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	ret = acpi_map_lsapic(pr->handle, &pr->id);
++=======
+ 	cpu_maps_update_begin();
+ 	cpu_hotplug_begin();
+ 
+ 	ret = acpi_map_lsapic(pr->handle, pr->apic_id, &pr->id);
++>>>>>>> d536bf3dc974 (ACPI / processor: use apic_id and remove duplicated _MAT evaluation)
  	if (ret)
 -		goto out;
 +		return ret;
  
  	ret = arch_register_cpu(pr->id);
  	if (ret) {
* Unmerged path arch/ia64/kernel/acpi.c
diff --git a/arch/x86/kernel/acpi/boot.c b/arch/x86/kernel/acpi/boot.c
index 45a51de24266..7646a900ee99 100644
--- a/arch/x86/kernel/acpi/boot.c
+++ b/arch/x86/kernel/acpi/boot.c
@@ -621,44 +621,12 @@ static void acpi_map_cpu2node(acpi_handle handle, int cpu, int physid)
 #endif
 }
 
-static int _acpi_map_lsapic(acpi_handle handle, int *pcpu)
+static int _acpi_map_lsapic(acpi_handle handle, int physid, int *pcpu)
 {
-	struct acpi_buffer buffer = { ACPI_ALLOCATE_BUFFER, NULL };
-	union acpi_object *obj;
-	struct acpi_madt_local_apic *lapic;
 	cpumask_var_t tmp_map, new_map;
-	u8 physid;
 	int cpu;
 	int retval = -ENOMEM;
 
-	if (ACPI_FAILURE(acpi_evaluate_object(handle, "_MAT", NULL, &buffer)))
-		return -EINVAL;
-
-	if (!buffer.length || !buffer.pointer)
-		return -EINVAL;
-
-	obj = buffer.pointer;
-	if (obj->type != ACPI_TYPE_BUFFER ||
-	    obj->buffer.length < sizeof(*lapic)) {
-		kfree(buffer.pointer);
-		return -EINVAL;
-	}
-
-	lapic = (struct acpi_madt_local_apic *)obj->buffer.pointer;
-
-	if (lapic->header.type != ACPI_MADT_TYPE_LOCAL_APIC ||
-	    !(lapic->lapic_flags & ACPI_MADT_ENABLED)) {
-		kfree(buffer.pointer);
-		return -EINVAL;
-	}
-
-	physid = lapic->id;
-
-	kfree(buffer.pointer);
-	buffer.length = ACPI_ALLOCATE_BUFFER;
-	buffer.pointer = NULL;
-	lapic = NULL;
-
 	if (!alloc_cpumask_var(&tmp_map, GFP_KERNEL))
 		goto out;
 
@@ -696,9 +664,9 @@ out:
 }
 
 /* wrapper to silence section mismatch warning */
-int __ref acpi_map_lsapic(acpi_handle handle, int *pcpu)
+int __ref acpi_map_lsapic(acpi_handle handle, int physid, int *pcpu)
 {
-	return _acpi_map_lsapic(handle, pcpu);
+	return _acpi_map_lsapic(handle, physid, pcpu);
 }
 EXPORT_SYMBOL(acpi_map_lsapic);
 
* Unmerged path drivers/acpi/acpi_processor.c
diff --git a/include/linux/acpi.h b/include/linux/acpi.h
index 3ebc82e7b5ca..8488e2032ec4 100644
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@ -131,7 +131,7 @@ void acpi_numa_arch_fixup(void);
 
 #ifdef CONFIG_ACPI_HOTPLUG_CPU
 /* Arch dependent functions for cpu hotplug support */
-int acpi_map_lsapic(acpi_handle handle, int *pcpu);
+int acpi_map_lsapic(acpi_handle handle, int physid, int *pcpu);
 int acpi_unmap_lsapic(int cpu);
 #endif /* CONFIG_ACPI_HOTPLUG_CPU */
 
