i40e/i40evf: Add flags for X722 capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Anjali Singhai Jain <anjali.singhai@intel.com>
commit d502ce01d21bf4092f282cae5817e7d140e21816
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d502ce01.failed

Add capabilities flags specific to X722.

	Signed-off-by: Anjali Singhai Jain <anjali.singhai@intel.com>
	Signed-off-by: Catherine Sullivan <catherine.sullivan@intel.com>
	Tested-by: Jim Young <james.m.young@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit d502ce01d21bf4092f282cae5817e7d140e21816)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e.h
#	drivers/net/ethernet/intel/i40evf/i40evf.h
diff --cc drivers/net/ethernet/intel/i40e/i40e.h
index 11601b91991b,99148861b1c0..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@@ -290,35 -289,42 +290,59 @@@ struct i40e_pf 
  	struct work_struct service_task;
  
  	u64 flags;
++<<<<<<< HEAD
 +#define I40E_FLAG_RX_CSUM_ENABLED              (u64)(1 << 1)
 +#define I40E_FLAG_MSI_ENABLED                  (u64)(1 << 2)
 +#define I40E_FLAG_MSIX_ENABLED                 (u64)(1 << 3)
 +#define I40E_FLAG_RX_1BUF_ENABLED              (u64)(1 << 4)
 +#define I40E_FLAG_RX_PS_ENABLED                (u64)(1 << 5)
 +#define I40E_FLAG_RSS_ENABLED                  (u64)(1 << 6)
 +#define I40E_FLAG_VMDQ_ENABLED                 (u64)(1 << 7)
 +#define I40E_FLAG_FDIR_REQUIRES_REINIT         (u64)(1 << 8)
 +#define I40E_FLAG_NEED_LINK_UPDATE             (u64)(1 << 9)
++=======
+ #define I40E_FLAG_RX_CSUM_ENABLED		BIT_ULL(1)
+ #define I40E_FLAG_MSI_ENABLED			BIT_ULL(2)
+ #define I40E_FLAG_MSIX_ENABLED			BIT_ULL(3)
+ #define I40E_FLAG_RX_1BUF_ENABLED		BIT_ULL(4)
+ #define I40E_FLAG_RX_PS_ENABLED			BIT_ULL(5)
+ #define I40E_FLAG_RSS_ENABLED			BIT_ULL(6)
+ #define I40E_FLAG_VMDQ_ENABLED			BIT_ULL(7)
+ #define I40E_FLAG_FDIR_REQUIRES_REINIT		BIT_ULL(8)
+ #define I40E_FLAG_NEED_LINK_UPDATE		BIT_ULL(9)
+ #define I40E_FLAG_IWARP_ENABLED			BIT_ULL(10)
++>>>>>>> d502ce01d21b (i40e/i40evf: Add flags for X722 capabilities)
  #ifdef I40E_FCOE
 -#define I40E_FLAG_FCOE_ENABLED			BIT_ULL(11)
 +#define I40E_FLAG_FCOE_ENABLED                 (u64)(1 << 11)
  #endif /* I40E_FCOE */
 -#define I40E_FLAG_IN_NETPOLL			BIT_ULL(12)
 -#define I40E_FLAG_16BYTE_RX_DESC_ENABLED	BIT_ULL(13)
 -#define I40E_FLAG_CLEAN_ADMINQ			BIT_ULL(14)
 -#define I40E_FLAG_FILTER_SYNC			BIT_ULL(15)
 -#define I40E_FLAG_PROCESS_MDD_EVENT		BIT_ULL(17)
 -#define I40E_FLAG_PROCESS_VFLR_EVENT		BIT_ULL(18)
 -#define I40E_FLAG_SRIOV_ENABLED			BIT_ULL(19)
 -#define I40E_FLAG_DCB_ENABLED			BIT_ULL(20)
 -#define I40E_FLAG_FD_SB_ENABLED			BIT_ULL(21)
 -#define I40E_FLAG_FD_ATR_ENABLED		BIT_ULL(22)
 -#define I40E_FLAG_PTP				BIT_ULL(25)
 -#define I40E_FLAG_MFP_ENABLED			BIT_ULL(26)
 +#define I40E_FLAG_IN_NETPOLL                   (u64)(1 << 12)
 +#define I40E_FLAG_16BYTE_RX_DESC_ENABLED       (u64)(1 << 13)
 +#define I40E_FLAG_CLEAN_ADMINQ                 (u64)(1 << 14)
 +#define I40E_FLAG_FILTER_SYNC                  (u64)(1 << 15)
 +#define I40E_FLAG_PROCESS_MDD_EVENT            (u64)(1 << 17)
 +#define I40E_FLAG_PROCESS_VFLR_EVENT           (u64)(1 << 18)
 +#define I40E_FLAG_SRIOV_ENABLED                (u64)(1 << 19)
 +#define I40E_FLAG_DCB_ENABLED                  (u64)(1 << 20)
 +#define I40E_FLAG_FD_SB_ENABLED                (u64)(1 << 21)
 +#define I40E_FLAG_FD_ATR_ENABLED               (u64)(1 << 22)
 +#define I40E_FLAG_PTP                          (u64)(1 << 25)
 +#define I40E_FLAG_MFP_ENABLED                  (u64)(1 << 26)
  #ifdef CONFIG_I40E_VXLAN
 -#define I40E_FLAG_VXLAN_FILTER_SYNC		BIT_ULL(27)
 +#define I40E_FLAG_VXLAN_FILTER_SYNC            (u64)(1 << 27)
  #endif
++<<<<<<< HEAD
 +#define I40E_FLAG_PORT_ID_VALID                (u64)(1 << 28)
 +#define I40E_FLAG_DCB_CAPABLE                  (u64)(1 << 29)
++=======
+ #define I40E_FLAG_PORT_ID_VALID			BIT_ULL(28)
+ #define I40E_FLAG_DCB_CAPABLE			BIT_ULL(29)
+ #define I40E_FLAG_RSS_AQ_CAPABLE		BIT_ULL(31)
+ #define I40E_FLAG_HW_ATR_EVICT_CAPABLE		BIT_ULL(32)
+ #define I40E_FLAG_OUTER_UDP_CSUM_CAPABLE	BIT_ULL(33)
+ #define I40E_FLAG_128_QP_RSS_CAPABLE		BIT_ULL(34)
+ #define I40E_FLAG_WB_ON_ITR_CAPABLE		BIT_ULL(35)
+ #define I40E_FLAG_MULTIPLE_TCP_UDP_RSS_PCTYPE	BIT_ULL(38)
++>>>>>>> d502ce01d21b (i40e/i40evf: Add flags for X722 capabilities)
  #define I40E_FLAG_VEB_MODE_ENABLED		BIT_ULL(40)
  
  	/* tracks features that get auto disabled by errors */
diff --cc drivers/net/ethernet/intel/i40evf/i40evf.h
index dfc5bc539890,bd227b39ac55..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40evf.h
+++ b/drivers/net/ethernet/intel/i40evf/i40evf.h
@@@ -207,34 -207,39 +207,67 @@@ struct i40evf_adapter 
  	struct msix_entry *msix_entries;
  
  	u32 flags;
++<<<<<<< HEAD
 +#define I40EVF_FLAG_RX_CSUM_ENABLED              (u32)(1)
 +#define I40EVF_FLAG_RX_1BUF_CAPABLE              (u32)(1 << 1)
 +#define I40EVF_FLAG_RX_PS_CAPABLE                (u32)(1 << 2)
 +#define I40EVF_FLAG_RX_PS_ENABLED                (u32)(1 << 3)
 +#define I40EVF_FLAG_IN_NETPOLL                   (u32)(1 << 4)
 +#define I40EVF_FLAG_IMIR_ENABLED                 (u32)(1 << 5)
 +#define I40EVF_FLAG_MQ_CAPABLE                   (u32)(1 << 6)
 +#define I40EVF_FLAG_NEED_LINK_UPDATE             (u32)(1 << 7)
 +#define I40EVF_FLAG_PF_COMMS_FAILED              (u32)(1 << 8)
 +#define I40EVF_FLAG_RESET_PENDING                (u32)(1 << 9)
 +#define I40EVF_FLAG_RESET_NEEDED                 (u32)(1 << 10)
 +/* duplcates for common code */
++=======
+ #define I40EVF_FLAG_RX_CSUM_ENABLED              BIT(0)
+ #define I40EVF_FLAG_RX_1BUF_CAPABLE              BIT(1)
+ #define I40EVF_FLAG_RX_PS_CAPABLE                BIT(2)
+ #define I40EVF_FLAG_RX_PS_ENABLED                BIT(3)
+ #define I40EVF_FLAG_IN_NETPOLL                   BIT(4)
+ #define I40EVF_FLAG_IMIR_ENABLED                 BIT(5)
+ #define I40EVF_FLAG_MQ_CAPABLE                   BIT(6)
+ #define I40EVF_FLAG_NEED_LINK_UPDATE             BIT(7)
+ #define I40EVF_FLAG_PF_COMMS_FAILED              BIT(8)
+ #define I40EVF_FLAG_RESET_PENDING                BIT(9)
+ #define I40EVF_FLAG_RESET_NEEDED                 BIT(10)
+ #define I40EVF_FLAG_WB_ON_ITR_CAPABLE		BIT(11)
+ #define I40EVF_FLAG_OUTER_UDP_CSUM_CAPABLE	BIT(12)
+ /* duplicates for common code */
++>>>>>>> d502ce01d21b (i40e/i40evf: Add flags for X722 capabilities)
  #define I40E_FLAG_FDIR_ATR_ENABLED		 0
  #define I40E_FLAG_DCB_ENABLED			 0
  #define I40E_FLAG_IN_NETPOLL			 I40EVF_FLAG_IN_NETPOLL
  #define I40E_FLAG_RX_CSUM_ENABLED                I40EVF_FLAG_RX_CSUM_ENABLED
+ #define I40E_FLAG_WB_ON_ITR_CAPABLE		I40EVF_FLAG_WB_ON_ITR_CAPABLE
+ #define I40E_FLAG_OUTER_UDP_CSUM_CAPABLE	I40EVF_FLAG_OUTER_UDP_CSUM_CAPABLE
  	/* flags for admin queue service task */
  	u32 aq_required;
++<<<<<<< HEAD
 +#define I40EVF_FLAG_AQ_ENABLE_QUEUES		(u32)(1)
 +#define I40EVF_FLAG_AQ_DISABLE_QUEUES		(u32)(1 << 1)
 +#define I40EVF_FLAG_AQ_ADD_MAC_FILTER		(u32)(1 << 2)
 +#define I40EVF_FLAG_AQ_ADD_VLAN_FILTER		(u32)(1 << 3)
 +#define I40EVF_FLAG_AQ_DEL_MAC_FILTER		(u32)(1 << 4)
 +#define I40EVF_FLAG_AQ_DEL_VLAN_FILTER		(u32)(1 << 5)
 +#define I40EVF_FLAG_AQ_CONFIGURE_QUEUES		(u32)(1 << 6)
 +#define I40EVF_FLAG_AQ_MAP_VECTORS		(u32)(1 << 7)
 +#define I40EVF_FLAG_AQ_HANDLE_RESET		(u32)(1 << 8)
 +#define I40EVF_FLAG_AQ_GET_CONFIG		(u32)(1 << 10)
++=======
+ #define I40EVF_FLAG_AQ_ENABLE_QUEUES		BIT(0)
+ #define I40EVF_FLAG_AQ_DISABLE_QUEUES		BIT(1)
+ #define I40EVF_FLAG_AQ_ADD_MAC_FILTER		BIT(2)
+ #define I40EVF_FLAG_AQ_ADD_VLAN_FILTER		BIT(3)
+ #define I40EVF_FLAG_AQ_DEL_MAC_FILTER		BIT(4)
+ #define I40EVF_FLAG_AQ_DEL_VLAN_FILTER		BIT(5)
+ #define I40EVF_FLAG_AQ_CONFIGURE_QUEUES		BIT(6)
+ #define I40EVF_FLAG_AQ_MAP_VECTORS		BIT(7)
+ #define I40EVF_FLAG_AQ_HANDLE_RESET		BIT(8)
+ #define I40EVF_FLAG_AQ_CONFIGURE_RSS		BIT(9)
+ #define I40EVF_FLAG_AQ_GET_CONFIG		BIT(10)
++>>>>>>> d502ce01d21b (i40e/i40evf: Add flags for X722 capabilities)
  
  	/* OS defined structs */
  	struct net_device *netdev;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e.h
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 2cf82c34baf1..7269266e6c40 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -7719,6 +7719,14 @@ static int i40e_sw_init(struct i40e_pf *pf)
 					I40E_MAX_VF_COUNT);
 	}
 #endif /* CONFIG_PCI_IOV */
+	if (pf->hw.mac.type == I40E_MAC_X722) {
+		pf->flags |= I40E_FLAG_RSS_AQ_CAPABLE |
+			     I40E_FLAG_128_QP_RSS_CAPABLE |
+			     I40E_FLAG_HW_ATR_EVICT_CAPABLE |
+			     I40E_FLAG_OUTER_UDP_CSUM_CAPABLE |
+			     I40E_FLAG_WB_ON_ITR_CAPABLE |
+			     I40E_FLAG_MULTIPLE_TCP_UDP_RSS_PCTYPE;
+	}
 	pf->eeprom_version = 0xDEAD;
 	pf->lan_veb = I40E_NO_VEB;
 	pf->lan_vsi = I40E_NO_VSI;
* Unmerged path drivers/net/ethernet/intel/i40evf/i40evf.h
