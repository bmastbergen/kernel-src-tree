drm: Provide compat ioctl for addfb2.1

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [drm] Provide compat ioctl for addfb2.1 (Rob Clark) [1249805]
Rebuild_FUZZ: 92.96%
commit-author Tvrtko Ursulin <tvrtko.ursulin@intel.com>
commit c631d5f90e7ee246536c72f80ade86e9ef4d2f13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c631d5f9.failed

Frame buffer modifiers extensions provided in;

  commit e3eb3250d84ef97b766312345774367b6a310db8
  Author: Rob Clark <robdclark@gmail.com>
  Date:   Thu Feb 5 14:41:52 2015 +0000

      drm: add support for tiled/compressed/etc modifier in addfb2

Missed the structure packing/alignment problem where 64-bit
members were added after the odd number of 32-bit ones. This
makes the compiler produce structures of different sizes under
32- and 64-bit x86 targets and makes the ioctl need explicit
compat handling.

v2: Removed the typedef. (Daniel Vetter)

	Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
	Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
	Cc: dri-devel@lists.freedesktop.org
	Cc: Rob Clark <robdclark@gmail.com>
	Cc: Daniel Stone <daniels@collabora.com>
	Cc: Daniel Vetter <daniel.vetter@intel.com>
	Cc: stable@vger.kernel.org
[danvet: Squash in compile fix from Mika.]
	Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
(cherry picked from commit c631d5f90e7ee246536c72f80ade86e9ef4d2f13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/drm_ioc32.c
diff --cc drivers/gpu/drm/drm_ioc32.c
index 2f4c4343dfa3,9cfcd0aef0df..000000000000
--- a/drivers/gpu/drm/drm_ioc32.c
+++ b/drivers/gpu/drm/drm_ioc32.c
@@@ -1016,7 -1018,64 +1018,68 @@@ static int compat_drm_wait_vblank(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +drm_ioctl_compat_t *drm_compat_ioctls[] = {
++=======
+ typedef struct drm_mode_fb_cmd232 {
+ 	u32 fb_id;
+ 	u32 width;
+ 	u32 height;
+ 	u32 pixel_format;
+ 	u32 flags;
+ 	u32 handles[4];
+ 	u32 pitches[4];
+ 	u32 offsets[4];
+ 	u64 modifier[4];
+ } __attribute__((packed)) drm_mode_fb_cmd232_t;
+ 
+ static int compat_drm_mode_addfb2(struct file *file, unsigned int cmd,
+ 				  unsigned long arg)
+ {
+ 	struct drm_mode_fb_cmd232 __user *argp = (void __user *)arg;
+ 	struct drm_mode_fb_cmd232 req32;
+ 	struct drm_mode_fb_cmd2 __user *req64;
+ 	int i;
+ 	int err;
+ 
+ 	if (copy_from_user(&req32, argp, sizeof(req32)))
+ 		return -EFAULT;
+ 
+ 	req64 = compat_alloc_user_space(sizeof(*req64));
+ 
+ 	if (!access_ok(VERIFY_WRITE, req64, sizeof(*req64))
+ 	    || __put_user(req32.width, &req64->width)
+ 	    || __put_user(req32.height, &req64->height)
+ 	    || __put_user(req32.pixel_format, &req64->pixel_format)
+ 	    || __put_user(req32.flags, &req64->flags))
+ 		return -EFAULT;
+ 
+ 	for (i = 0; i < 4; i++) {
+ 		if (__put_user(req32.handles[i], &req64->handles[i]))
+ 			return -EFAULT;
+ 		if (__put_user(req32.pitches[i], &req64->pitches[i]))
+ 			return -EFAULT;
+ 		if (__put_user(req32.offsets[i], &req64->offsets[i]))
+ 			return -EFAULT;
+ 		if (__put_user(req32.modifier[i], &req64->modifier[i]))
+ 			return -EFAULT;
+ 	}
+ 
+ 	err = drm_ioctl(file, DRM_IOCTL_MODE_ADDFB2, (unsigned long)req64);
+ 	if (err)
+ 		return err;
+ 
+ 	if (__get_user(req32.fb_id, &req64->fb_id))
+ 		return -EFAULT;
+ 
+ 	if (copy_to_user(argp, &req32, sizeof(req32)))
+ 		return -EFAULT;
+ 
+ 	return 0;
+ }
+ 
+ static drm_ioctl_compat_t *drm_compat_ioctls[] = {
++>>>>>>> c631d5f90e7e (drm: Provide compat ioctl for addfb2.1)
  	[DRM_IOCTL_NR(DRM_IOCTL_VERSION32)] = compat_drm_version,
  	[DRM_IOCTL_NR(DRM_IOCTL_GET_UNIQUE32)] = compat_drm_getunique,
  	[DRM_IOCTL_NR(DRM_IOCTL_GET_MAP32)] = compat_drm_getmap,
* Unmerged path drivers/gpu/drm/drm_ioc32.c
