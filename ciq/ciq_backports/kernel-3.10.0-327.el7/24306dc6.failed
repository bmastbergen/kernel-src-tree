IB/core: Add timestamp_mask and hca_core_clock to query_device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [inifniband] core: Add timestamp_mask and hca_core_clock to query_device (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 97.52%
commit-author Matan Barak <matanb@mellanox.com>
commit 24306dc66149020c59a07b64e2a325af59ee7d10
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/24306dc6.failed

In order to expose timestamp we need to expose two new attributes in
query_device to be used for CQ completion time-stamping:

timestamp_mask - how many bits are valid in the timestamp, where timestamp
values could be 64bits the most.

hca_core_clock - timestamp is given in HW cycles, the frequency in KHZ units
of the HCA, necessary in order to convert cycles to seconds.

This is added both to ib_query_device and its respective uverbs counterpart.

	Signed-off-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 24306dc66149020c59a07b64e2a325af59ee7d10)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_cmd.c
#	include/rdma/ib_verbs.h
#	include/uapi/rdma/ib_user_verbs.h
diff --cc drivers/infiniband/core/uverbs_cmd.c
index 422dd8c84243,11ee298bb26b..000000000000
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@@ -3287,6 -3418,16 +3287,16 @@@ int ib_uverbs_ex_query_device(struct ib
  	if (cmd.reserved)
  		return -EINVAL;
  
++<<<<<<< HEAD
++=======
+ 	resp.response_length = offsetof(typeof(resp), odp_caps);
+ 
+ 	if (ucore->outlen < resp.response_length)
+ 		return -ENOSPC;
+ 
+ 	memset(&attr, 0, sizeof(attr));
+ 
++>>>>>>> 24306dc66149 (IB/core: Add timestamp_mask and hca_core_clock to query_device)
  	err = device->query_device(device, &attr);
  	if (err)
  		return err;
@@@ -3295,7 -3435,37 +3305,41 @@@
  	copy_query_dev_fields(file, &resp.base, &attr);
  	resp.comp_mask = 0;
  
++<<<<<<< HEAD
 +	err = ib_copy_to_udata(ucore, &resp, sizeof(resp));
++=======
+ 	if (ucore->outlen < resp.response_length + sizeof(resp.odp_caps))
+ 		goto end;
+ 
+ #ifdef CONFIG_INFINIBAND_ON_DEMAND_PAGING
+ 	resp.odp_caps.general_caps = attr.odp_caps.general_caps;
+ 	resp.odp_caps.per_transport_caps.rc_odp_caps =
+ 		attr.odp_caps.per_transport_caps.rc_odp_caps;
+ 	resp.odp_caps.per_transport_caps.uc_odp_caps =
+ 		attr.odp_caps.per_transport_caps.uc_odp_caps;
+ 	resp.odp_caps.per_transport_caps.ud_odp_caps =
+ 		attr.odp_caps.per_transport_caps.ud_odp_caps;
+ 	resp.odp_caps.reserved = 0;
+ #else
+ 	memset(&resp.odp_caps, 0, sizeof(resp.odp_caps));
+ #endif
+ 	resp.response_length += sizeof(resp.odp_caps);
+ 
+ 	if (ucore->outlen < resp.response_length + sizeof(resp.timestamp_mask))
+ 		goto end;
+ 
+ 	resp.timestamp_mask = attr.timestamp_mask;
+ 	resp.response_length += sizeof(resp.timestamp_mask);
+ 
+ 	if (ucore->outlen < resp.response_length + sizeof(resp.hca_core_clock))
+ 		goto end;
+ 
+ 	resp.hca_core_clock = attr.hca_core_clock;
+ 	resp.response_length += sizeof(resp.hca_core_clock);
+ 
+ end:
+ 	err = ib_copy_to_udata(ucore, &resp, resp.response_length);
++>>>>>>> 24306dc66149 (IB/core: Add timestamp_mask and hca_core_clock to query_device)
  	if (err)
  		return err;
  
diff --cc include/rdma/ib_verbs.h
index 694968172984,c0929245ddee..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -193,6 -226,9 +193,12 @@@ struct ib_device_attr 
  	u8			local_ca_ack_delay;
  	int			sig_prot_cap;
  	int			sig_guard_cap;
++<<<<<<< HEAD
++=======
+ 	struct ib_odp_caps	odp_caps;
+ 	uint64_t		timestamp_mask;
+ 	uint64_t		hca_core_clock; /* in KHZ */
++>>>>>>> 24306dc66149 (IB/core: Add timestamp_mask and hca_core_clock to query_device)
  };
  
  enum ib_mtu {
diff --cc include/uapi/rdma/ib_user_verbs.h
index e8a96071e352,978841eeaff1..000000000000
--- a/include/uapi/rdma/ib_user_verbs.h
+++ b/include/uapi/rdma/ib_user_verbs.h
@@@ -210,7 -211,20 +210,14 @@@ struct ib_uverbs_ex_query_device 
  struct ib_uverbs_ex_query_device_resp {
  	struct ib_uverbs_query_device_resp base;
  	__u32 comp_mask;
++<<<<<<< HEAD
 +	__u32 reserved;
++=======
+ 	__u32 response_length;
+ 	struct ib_uverbs_odp_caps odp_caps;
+ 	__u64 timestamp_mask;
+ 	__u64 hca_core_clock; /* in KHZ */
++>>>>>>> 24306dc66149 (IB/core: Add timestamp_mask and hca_core_clock to query_device)
  };
  
  struct ib_uverbs_query_port {
diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index 5a67be5d391d..935f8ba1fdad 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -550,6 +550,8 @@ EXPORT_SYMBOL(ib_dispatch_event);
 int ib_query_device(struct ib_device *device,
 		    struct ib_device_attr *device_attr)
 {
+	memset(device_attr, 0, sizeof(*device_attr));
+
 	return device->query_device(device, device_attr);
 }
 EXPORT_SYMBOL(ib_query_device);
* Unmerged path drivers/infiniband/core/uverbs_cmd.c
* Unmerged path include/rdma/ib_verbs.h
* Unmerged path include/uapi/rdma/ib_user_verbs.h
