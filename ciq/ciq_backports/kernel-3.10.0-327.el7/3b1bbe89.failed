vhost: virtio 1.0 endian-ness support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [vhost] virtio 1.0 endian-ness support (Thomas Huth) [1231879]
Rebuild_FUZZ: 89.55%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 3b1bbe89351a8003857aeb5cbef3595f5d0ee609
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3b1bbe89.failed

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>




(cherry picked from commit 3b1bbe89351a8003857aeb5cbef3595f5d0ee609)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vhost/vhost.c
diff --cc drivers/vhost/vhost.c
index 292d482f1320,ed71b5347a76..000000000000
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@@ -1023,11 -1052,12 +1023,11 @@@ int vhost_init_used(struct vhost_virtqu
  	r = __get_user(last_used_idx, &vq->used->idx);
  	if (r)
  		return r;
- 	vq->last_used_idx = last_used_idx;
+ 	vq->last_used_idx = vhost16_to_cpu(vq, last_used_idx);
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(vhost_init_used);
  
 -static int translate_desc(struct vhost_virtqueue *vq, u64 addr, u32 len,
 +static int translate_desc(struct vhost_dev *dev, u64 addr, u32 len,
  			  struct iovec iov[], int iov_size)
  {
  	const struct vhost_memory_region *reg;
@@@ -1104,7 -1132,7 +1105,11 @@@ static int get_indirect(struct vhost_de
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	ret = translate_desc(dev, indirect->addr, indirect->len, vq->indirect,
++=======
+ 	ret = translate_desc(vq, vhost64_to_cpu(vq, indirect->addr), len, vq->indirect,
++>>>>>>> 3b1bbe89351a (vhost: virtio 1.0 endian-ness support)
  			     UIO_MAXIOV);
  	if (unlikely(ret < 0)) {
  		vq_err(vq, "Translation failure %d in indirect.\n", ret);
@@@ -1144,7 -1172,8 +1149,12 @@@
  			return -EINVAL;
  		}
  
++<<<<<<< HEAD
 +		ret = translate_desc(dev, desc.addr, desc.len, iov + iov_count,
++=======
+ 		ret = translate_desc(vq, vhost64_to_cpu(vq, desc.addr),
+ 				     vhost32_to_cpu(vq, desc.len), iov + iov_count,
++>>>>>>> 3b1bbe89351a (vhost: virtio 1.0 endian-ness support)
  				     iov_size - iov_count);
  		if (unlikely(ret < 0)) {
  			vq_err(vq, "Translation failure %d indirect idx %d\n",
@@@ -1254,8 -1288,8 +1269,13 @@@ int vhost_get_vq_desc(struct vhost_dev 
  			       i, vq->desc + i);
  			return -EFAULT;
  		}
++<<<<<<< HEAD
 +		if (desc.flags & VRING_DESC_F_INDIRECT) {
 +			ret = get_indirect(dev, vq, iov, iov_size,
++=======
+ 		if (desc.flags & cpu_to_vhost16(vq, VRING_DESC_F_INDIRECT)) {
+ 			ret = get_indirect(vq, iov, iov_size,
++>>>>>>> 3b1bbe89351a (vhost: virtio 1.0 endian-ness support)
  					   out_num, in_num,
  					   log, log_num, &desc);
  			if (unlikely(ret < 0)) {
@@@ -1266,7 -1300,8 +1286,12 @@@
  			continue;
  		}
  
++<<<<<<< HEAD
 +		ret = translate_desc(dev, desc.addr, desc.len, iov + iov_count,
++=======
+ 		ret = translate_desc(vq, vhost64_to_cpu(vq, desc.addr),
+ 				     vhost32_to_cpu(vq, desc.len), iov + iov_count,
++>>>>>>> 3b1bbe89351a (vhost: virtio 1.0 endian-ness support)
  				     iov_size - iov_count);
  		if (unlikely(ret < 0)) {
  			vq_err(vq, "Translation failure %d descriptor idx %d\n",
@@@ -1409,8 -1452,8 +1438,13 @@@ static bool vhost_notify(struct vhost_d
  	    unlikely(vq->avail_idx == vq->last_avail_idx))
  		return true;
  
++<<<<<<< HEAD
 +	if (!vhost_has_feature(dev, VIRTIO_RING_F_EVENT_IDX)) {
 +		__u16 flags;
++=======
+ 	if (!vhost_has_feature(vq, VIRTIO_RING_F_EVENT_IDX)) {
+ 		__virtio16 flags;
++>>>>>>> 3b1bbe89351a (vhost: virtio 1.0 endian-ness support)
  		if (__get_user(flags, &vq->avail->flags)) {
  			vq_err(vq, "Failed to get flags");
  			return true;
@@@ -1492,8 -1538,9 +1526,8 @@@ bool vhost_enable_notify(struct vhost_d
  		return false;
  	}
  
- 	return avail_idx != vq->avail_idx;
+ 	return vhost16_to_cpu(vq, avail_idx) != vq->avail_idx;
  }
 -EXPORT_SYMBOL_GPL(vhost_enable_notify);
  
  /* We don't need to be notified again. */
  void vhost_disable_notify(struct vhost_dev *dev, struct vhost_virtqueue *vq)
* Unmerged path drivers/vhost/vhost.c
