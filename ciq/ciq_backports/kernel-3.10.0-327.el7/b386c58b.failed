bonding: remove unused bond_for_each_slave_from()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Veaceslav Falico <vfalico@redhat.com>
commit b386c58b85b23c3a73baa014d01d2943ca8260cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b386c58b.failed

It has no users, so we can remove it.

CC: Jay Vosburgh <fubar@us.ibm.com>
CC: Andy Gospodarek <andy@greyhouse.net>
	Signed-off-by: Veaceslav Falico <vfalico@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b386c58b85b23c3a73baa014d01d2943ca8260cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bonding.h
index 788e19ed5f58,7c8a4b128f65..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -71,27 -71,33 +71,34 @@@
  	set_fs(fs);			\
  	res; })
  
 -/* slave list primitives */
 -#define bond_to_slave(ptr) list_entry(ptr, struct slave, list)
 -
 -/* IMPORTANT: bond_first/last_slave can return NULL in case of an empty list */
 -#define bond_first_slave(bond) \
 -	list_first_entry_or_null(&(bond)->slave_list, struct slave, list)
 -#define bond_last_slave(bond) \
 -	(list_empty(&(bond)->slave_list) ? NULL : \
 -					   bond_to_slave((bond)->slave_list.prev))
 -
 -#define bond_is_first_slave(bond, pos) ((pos)->list.prev == &(bond)->slave_list)
 -#define bond_is_last_slave(bond, pos) ((pos)->list.next == &(bond)->slave_list)
 -
 -/* Since bond_first/last_slave can return NULL, these can return NULL too */
 -#define bond_next_slave(bond, pos) \
 -	(bond_is_last_slave(bond, pos) ? bond_first_slave(bond) : \
 -					 bond_to_slave((pos)->list.next))
 -
 -#define bond_prev_slave(bond, pos) \
 -	(bond_is_first_slave(bond, pos) ? bond_last_slave(bond) : \
 -					  bond_to_slave((pos)->list.prev))
 +/**
++<<<<<<< HEAD
 + * bond_for_each_slave_from - iterate the slaves list from a starting point
 + * @bond:	the bond holding this list.
 + * @pos:	current slave.
 + * @cnt:	counter for max number of moves
 + * @start:	starting point.
 + *
 + * Caller must hold bond->lock
 + */
 +#define bond_for_each_slave_from(bond, pos, cnt, start)	\
 +	for (cnt = 0, pos = start;				\
 +	     cnt < (bond)->slave_cnt;				\
 +             cnt++, pos = (pos)->next)
  
  /**
 + * bond_for_each_slave_from_to - iterate the slaves list from start point to stop point
 + * @bond:	the bond holding this list.
 + * @pos:	current slave.
 + * @cnt:	counter for number max of moves
 + * @start:	start point.
 + * @stop:	stop point.
++=======
+  * bond_for_each_slave - iterate over all slaves
+  * @bond:	the bond holding this list
+  * @pos:	current slave
+  * @iter:	list_head * iterator
++>>>>>>> b386c58b85b2 (bonding: remove unused bond_for_each_slave_from())
   *
   * Caller must hold bond->lock
   */
* Unmerged path drivers/net/bonding/bonding.h
