bonding: add use_carrier netlink support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author sfeldma@cumulusnetworks.com <sfeldma@cumulusnetworks.com>
commit 9f53e14e86c46a2300f17309f6308ad0dfbb53ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9f53e14e.failed

Add IFLA_BOND_USE_CARRIER to allow get/set of bonding parameter
use_carrier via netlink.

	Signed-off-by: Scott Feldman <sfeldma@cumulusnetworks.com>
	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9f53e14e86c46a2300f17309f6308ad0dfbb53ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bonding.h
#	include/uapi/linux/if_link.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,7edf6399cea2..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -23,6 -24,10 +23,13 @@@
  static const struct nla_policy bond_policy[IFLA_BOND_MAX + 1] = {
  	[IFLA_BOND_MODE]		= { .type = NLA_U8 },
  	[IFLA_BOND_ACTIVE_SLAVE]	= { .type = NLA_U32 },
++<<<<<<< HEAD
++=======
+ 	[IFLA_BOND_MIIMON]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_UPDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_DOWNDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_USE_CARRIER]		= { .type = NLA_U8 },
++>>>>>>> 9f53e14e86c4 (bonding: add use_carrier netlink support)
  };
  
  static int bond_validate(struct nlattr *tb[], struct nlattr *data[])
@@@ -65,6 -73,34 +72,37 @@@ static int bond_changelink(struct net_d
  		if (err)
  			return err;
  	}
++<<<<<<< HEAD
++=======
+ 	if (data[IFLA_BOND_MIIMON]) {
+ 		int miimon = nla_get_u32(data[IFLA_BOND_MIIMON]);
+ 
+ 		err = bond_option_miimon_set(bond, miimon);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_UPDELAY]) {
+ 		int updelay = nla_get_u32(data[IFLA_BOND_UPDELAY]);
+ 
+ 		err = bond_option_updelay_set(bond, updelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_DOWNDELAY]) {
+ 		int downdelay = nla_get_u32(data[IFLA_BOND_DOWNDELAY]);
+ 
+ 		err = bond_option_downdelay_set(bond, downdelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_USE_CARRIER]) {
+ 		int use_carrier = nla_get_u8(data[IFLA_BOND_USE_CARRIER]);
+ 
+ 		err = bond_option_use_carrier_set(bond, use_carrier);
+ 		if (err)
+ 			return err;
+ 	}
++>>>>>>> 9f53e14e86c4 (bonding: add use_carrier netlink support)
  	return 0;
  }
  
@@@ -83,7 -119,12 +121,16 @@@ static int bond_newlink(struct net *src
  static size_t bond_get_size(const struct net_device *bond_dev)
  {
  	return nla_total_size(sizeof(u8)) +	/* IFLA_BOND_MODE */
++<<<<<<< HEAD
 +		nla_total_size(sizeof(u32));	/* IFLA_BOND_ACTIVE_SLAVE */
++=======
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ACTIVE_SLAVE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIIMON */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_UPDELAY */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_DOWNDELAY */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_USE_CARRIER */
+ 		0;
++>>>>>>> 9f53e14e86c4 (bonding: add use_carrier netlink support)
  }
  
  static int bond_fill_info(struct sk_buff *skb,
@@@ -92,10 -133,27 +139,32 @@@
  	struct bonding *bond = netdev_priv(bond_dev);
  	struct net_device *slave_dev = bond_option_active_slave_get(bond);
  
 -	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode))
 +	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode) ||
 +	    (slave_dev &&
 +	     nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex)))
  		goto nla_put_failure;
++<<<<<<< HEAD
++=======
+ 
+ 	if (slave_dev &&
+ 	    nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIIMON, bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_UPDELAY,
+ 			bond->params.updelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_DOWNDELAY,
+ 			bond->params.downdelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_USE_CARRIER, bond->params.use_carrier))
+ 		goto nla_put_failure;
+ 
++>>>>>>> 9f53e14e86c4 (bonding: add use_carrier netlink support)
  	return 0;
  
  nla_put_failure:
diff --cc drivers/net/bonding/bonding.h
index 743d73f75728,df159da8db30..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -442,6 -437,14 +442,17 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ int bond_option_mode_set(struct bonding *bond, int mode);
+ int bond_option_active_slave_set(struct bonding *bond, struct net_device *slave_dev);
+ int bond_option_miimon_set(struct bonding *bond, int miimon);
+ int bond_option_updelay_set(struct bonding *bond, int updelay);
+ int bond_option_downdelay_set(struct bonding *bond, int downdelay);
+ int bond_option_use_carrier_set(struct bonding *bond, int use_carrier);
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
++>>>>>>> 9f53e14e86c4 (bonding: add use_carrier netlink support)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
diff --cc include/uapi/linux/if_link.h
index 4efe6bcb6e67,77c41bda36a4..000000000000
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@@ -340,6 -331,10 +340,13 @@@ enum 
  	IFLA_BOND_UNSPEC,
  	IFLA_BOND_MODE,
  	IFLA_BOND_ACTIVE_SLAVE,
++<<<<<<< HEAD
++=======
+ 	IFLA_BOND_MIIMON,
+ 	IFLA_BOND_UPDELAY,
+ 	IFLA_BOND_DOWNDELAY,
+ 	IFLA_BOND_USE_CARRIER,
++>>>>>>> 9f53e14e86c4 (bonding: add use_carrier netlink support)
  	__IFLA_BOND_MAX,
  };
  
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
diff --git a/drivers/net/bonding/bond_sysfs.c b/drivers/net/bonding/bond_sysfs.c
index 739d4dbe8629..b81599a15de9 100644
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@ -1237,25 +1237,23 @@ static ssize_t bonding_store_carrier(struct device *d,
 				     struct device_attribute *attr,
 				     const char *buf, size_t count)
 {
-	int new_value, ret = count;
+	int new_value, ret;
 	struct bonding *bond = to_bond(d);
 
-
 	if (sscanf(buf, "%d", &new_value) != 1) {
 		pr_err("%s: no use_carrier value specified.\n",
 		       bond->dev->name);
-		ret = -EINVAL;
-		goto out;
-	}
-	if ((new_value == 0) || (new_value == 1)) {
-		bond->params.use_carrier = new_value;
-		pr_info("%s: Setting use_carrier to %d.\n",
-			bond->dev->name, new_value);
-	} else {
-		pr_info("%s: Ignoring invalid use_carrier value %d.\n",
-			bond->dev->name, new_value);
+		return -EINVAL;
 	}
-out:
+
+	if (!rtnl_trylock())
+		return restart_syscall();
+
+	ret = bond_option_use_carrier_set(bond, new_value);
+	if (!ret)
+		ret = count;
+
+	rtnl_unlock();
 	return ret;
 }
 static DEVICE_ATTR(use_carrier, S_IRUGO | S_IWUSR,
* Unmerged path drivers/net/bonding/bonding.h
* Unmerged path include/uapi/linux/if_link.h
