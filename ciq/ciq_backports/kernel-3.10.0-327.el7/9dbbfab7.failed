NVMe: Do not over allocate for discard requests

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Keith Busch <keith.busch@intel.com>
commit 9dbbfab7d54109626031bf3bc476fb1804113970
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9dbbfab7.failed

Discard requests are often for very large ranges. The discard size is not
representative of the data transfer size so we don't need to allocate
for such a large prp list. This patch requests allocating only enough
for the memory needed for the data transfer and saves a little over 8k
of memory per max discard request.

	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Reported-by: Paul Grabinar <paul.grabinar@ranbarg.com>
	Signed-off-by: Matthew Wilcox <matthew.r.wilcox@intel.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 9dbbfab7d54109626031bf3bc476fb1804113970)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nvme-core.c
diff --cc drivers/block/nvme-core.c
index dfa7c848f446,c70eff3673d0..000000000000
--- a/drivers/block/nvme-core.c
+++ b/drivers/block/nvme-core.c
@@@ -848,7 -769,7 +850,11 @@@ static int nvme_submit_bio_queue(struc
  	if ((bio->bi_rw & REQ_FLUSH) && psegs)
  		return nvme_split_flush_data(nvmeq, bio);
  
++<<<<<<< HEAD
 +	iod = nvme_alloc_iod(psegs, bio->bi_size, GFP_ATOMIC);
++=======
+ 	iod = nvme_alloc_iod(psegs, size, ns->dev, GFP_ATOMIC);
++>>>>>>> 9dbbfab7d541 (NVMe: Do not over allocate for discard requests)
  	if (!iod)
  		return -ENOMEM;
  
* Unmerged path drivers/block/nvme-core.c
