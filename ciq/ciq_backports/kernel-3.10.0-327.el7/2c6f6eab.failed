crypto: nx - replace NX842_MEM_COMPRESS with function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [crypto] nx - replace NX842_MEM_COMPRESS with function (Gustavo Duarte) [1221925]
Rebuild_FUZZ: 91.84%
commit-author Dan Streetman <ddstreet@ieee.org>
commit 2c6f6eabc0bfcea0a62370038da713e3873cff31
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/2c6f6eab.failed

Replace the NX842_MEM_COMPRESS define with a function that returns the
specific platform driver's required working memory size.

The common nx-842.c driver refuses to load if there is no platform
driver present, so instead of defining an approximate working memory
size that's the maximum approximate size of both platform driver's
size requirements, the platform driver can directly provide its
specific, i.e. sizeof(struct nx842_workmem), size requirements which
the 842-nx crypto compression driver will use.

This saves memory by both reducing the required size of each driver
to the specific sizeof() amount, as well as using the specific loaded
platform driver's required amount, instead of the maximum of both.

	Signed-off-by: Dan Streetman <ddstreet@ieee.org>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 2c6f6eabc0bfcea0a62370038da713e3873cff31)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/nx/nx-842-crypto.c
#	drivers/crypto/nx/nx-842-powernv.c
#	drivers/crypto/nx/nx-842-pseries.c
#	drivers/crypto/nx/nx-842.c
#	drivers/crypto/nx/nx-842.h
diff --cc drivers/crypto/nx/nx-842-pseries.c
index 502edf0a2933,da52d8edefb3..000000000000
--- a/drivers/crypto/nx/nx-842-pseries.c
+++ b/drivers/crypto/nx/nx-842-pseries.c
@@@ -315,7 -284,7 +315,11 @@@ static int nx842_validate_result(struc
   * @out: Pointer to output buffer
   * @outlen: Length of output buffer
   * @wrkmem: ptr to buffer for working memory, size determined by
++<<<<<<< HEAD
 + *          nx842_get_workmem_size()
++=======
+  *          nx842_pseries_driver.workmem_size
++>>>>>>> 2c6f6eabc0bf (crypto: nx - replace NX842_MEM_COMPRESS with function)
   *
   * Returns:
   *   0		Success, output of length @outlen stored in the buffer at @out
@@@ -509,13 -406,12 +513,17 @@@ static int sw842_decompress(const unsig
   * If there is an error then @outlen will be 0 and an error will be
   * specified by the return code from this function.
   *
 - * @in: Pointer to input buffer
 + * @in: Pointer to input buffer, will use bounce buffer if not 128 byte
 + *      aligned
   * @inlen: Length of input buffer
 - * @out: Pointer to output buffer
 - * @outlen: Length of output buffer
 + * @out: Pointer to output buffer, must be page aligned
 + * @outlen: Length of output buffer, must be PAGE_SIZE
   * @wrkmem: ptr to buffer for working memory, size determined by
++<<<<<<< HEAD
 + *          nx842_get_workmem_size()
++=======
+  *          nx842_pseries_driver.workmem_size
++>>>>>>> 2c6f6eabc0bf (crypto: nx - replace NX842_MEM_COMPRESS with function)
   *
   * Returns:
   *   0		Success, output of length @outlen stored in the buffer at @out
@@@ -1144,6 -960,15 +1152,18 @@@ static struct attribute_group nx842_att
  	.attrs = nx842_sysfs_entries,
  };
  
++<<<<<<< HEAD
++=======
+ static struct nx842_driver nx842_pseries_driver = {
+ 	.name =		KBUILD_MODNAME,
+ 	.owner =	THIS_MODULE,
+ 	.workmem_size =	sizeof(struct nx842_workmem),
+ 	.constraints =	&nx842_pseries_constraints,
+ 	.compress =	nx842_pseries_compress,
+ 	.decompress =	nx842_pseries_decompress,
+ };
+ 
++>>>>>>> 2c6f6eabc0bf (crypto: nx - replace NX842_MEM_COMPRESS with function)
  static int __init nx842_probe(struct vio_dev *viodev,
  				  const struct vio_device_id *id)
  {
@@@ -1255,8 -1081,13 +1275,14 @@@ static struct vio_driver nx842_driver 
  static int __init nx842_init(void)
  {
  	struct nx842_devdata *new_devdata;
 -	int ret;
 -
  	pr_info("Registering IBM Power 842 compression driver\n");
  
++<<<<<<< HEAD
++=======
+ 	if (!of_find_compatible_node(NULL, NULL, "ibm,compression"))
+ 		return -ENODEV;
+ 
++>>>>>>> 2c6f6eabc0bf (crypto: nx - replace NX842_MEM_COMPRESS with function)
  	RCU_INIT_POINTER(devdata, NULL);
  	new_devdata = kzalloc(sizeof(*new_devdata), GFP_KERNEL);
  	if (!new_devdata) {
* Unmerged path drivers/crypto/nx/nx-842-crypto.c
* Unmerged path drivers/crypto/nx/nx-842-powernv.c
* Unmerged path drivers/crypto/nx/nx-842.c
* Unmerged path drivers/crypto/nx/nx-842.h
* Unmerged path drivers/crypto/nx/nx-842-crypto.c
* Unmerged path drivers/crypto/nx/nx-842-powernv.c
* Unmerged path drivers/crypto/nx/nx-842-pseries.c
* Unmerged path drivers/crypto/nx/nx-842.c
* Unmerged path drivers/crypto/nx/nx-842.h
