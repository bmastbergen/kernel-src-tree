sunrpc: add a debugfs rpc_xprt directory with an info file in it

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jeff Layton <jlayton@primarydata.com>
commit 388f0c776781fe64ce951701bfe712b2182a31f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/388f0c77.failed

Add a new directory heirarchy under the debugfs sunrpc/ directory:

    sunrpc/
        rpc_xprt/
            <xprt id>/

Within that directory, we can put files that give info about the
xprts. We do have the (minor) problem that there is no succinct,
unique identifier for rpc_xprts. So we generate them synthetically
with a static atomic_t counter.

For now, this directory just holds an "info" file, but we may add
other files to it in the future.

	Signed-off-by: Jeff Layton <jlayton@primarydata.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 388f0c776781fe64ce951701bfe712b2182a31f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sunrpc/debug.h
#	net/sunrpc/debugfs.c
diff --cc include/linux/sunrpc/debug.h
index 9385bd74c860,c57d8ea0716c..000000000000
--- a/include/linux/sunrpc/debug.h
+++ b/include/linux/sunrpc/debug.h
@@@ -65,9 -53,55 +65,61 @@@ extern unsigned int		nlm_debug
  /*
   * Sysctl interface for RPC debugging
   */
++<<<<<<< HEAD
 +#ifdef RPC_DEBUG
 +void		rpc_register_sysctl(void);
 +void		rpc_unregister_sysctl(void);
++=======
+ 
+ struct rpc_clnt;
+ struct rpc_xprt;
+ 
+ #if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
+ void		rpc_register_sysctl(void);
+ void		rpc_unregister_sysctl(void);
+ int		sunrpc_debugfs_init(void);
+ void		sunrpc_debugfs_exit(void);
+ int		rpc_clnt_debugfs_register(struct rpc_clnt *);
+ void		rpc_clnt_debugfs_unregister(struct rpc_clnt *);
+ int		rpc_xprt_debugfs_register(struct rpc_xprt *);
+ void		rpc_xprt_debugfs_unregister(struct rpc_xprt *);
+ #else
+ static inline int
+ sunrpc_debugfs_init(void)
+ {
+ 	return 0;
+ }
+ 
+ static inline void
+ sunrpc_debugfs_exit(void)
+ {
+ 	return;
+ }
+ 
+ static inline int
+ rpc_clnt_debugfs_register(struct rpc_clnt *clnt)
+ {
+ 	return 0;
+ }
+ 
+ static inline void
+ rpc_clnt_debugfs_unregister(struct rpc_clnt *clnt)
+ {
+ 	return;
+ }
+ 
+ static inline int
+ rpc_xprt_debugfs_register(struct rpc_xprt *xprt)
+ {
+ 	return 0;
+ }
+ 
+ static inline void
+ rpc_xprt_debugfs_unregister(struct rpc_xprt *xprt)
+ {
+ 	return;
+ }
++>>>>>>> 388f0c776781 (sunrpc: add a debugfs rpc_xprt directory with an info file in it)
  #endif
  
  #endif /* _LINUX_SUNRPC_DEBUG_H_ */
* Unmerged path net/sunrpc/debugfs.c
* Unmerged path include/linux/sunrpc/debug.h
diff --git a/include/linux/sunrpc/xprt.h b/include/linux/sunrpc/xprt.h
index 407f0bdd56b8..aedef98ab2b0 100644
--- a/include/linux/sunrpc/xprt.h
+++ b/include/linux/sunrpc/xprt.h
@@ -239,6 +239,9 @@ struct rpc_xprt {
 	struct net		*xprt_net;
 	const char		*servername;
 	const char		*address_strings[RPC_DISPLAY_MAX];
+#if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
+	struct dentry		*debugfs;		/* debugfs directory */
+#endif
 };
 
 #if defined(CONFIG_SUNRPC_BACKCHANNEL)
* Unmerged path net/sunrpc/debugfs.c
diff --git a/net/sunrpc/xprt.c b/net/sunrpc/xprt.c
index dc83880236d8..3cc321031200 100644
--- a/net/sunrpc/xprt.c
+++ b/net/sunrpc/xprt.c
@@ -1296,6 +1296,7 @@ static void xprt_init(struct rpc_xprt *xprt, struct net *net)
  */
 struct rpc_xprt *xprt_create_transport(struct xprt_create *args)
 {
+	int err;
 	struct rpc_xprt	*xprt;
 	struct xprt_class *t;
 
@@ -1336,6 +1337,12 @@ found:
 		return ERR_PTR(-ENOMEM);
 	}
 
+	err = rpc_xprt_debugfs_register(xprt);
+	if (err) {
+		xprt_destroy(xprt);
+		return ERR_PTR(err);
+	}
+
 	dprintk("RPC:       created transport %p with %u slots\n", xprt,
 			xprt->max_reqs);
 out:
@@ -1352,6 +1359,7 @@ static void xprt_destroy(struct rpc_xprt *xprt)
 	dprintk("RPC:       destroying transport %p\n", xprt);
 	del_timer_sync(&xprt->timer);
 
+	rpc_xprt_debugfs_unregister(xprt);
 	rpc_destroy_wait_queue(&xprt->binding);
 	rpc_destroy_wait_queue(&xprt->pending);
 	rpc_destroy_wait_queue(&xprt->sending);
