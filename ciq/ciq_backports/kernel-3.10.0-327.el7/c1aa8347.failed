gue: Protocol constants for remote checksum offload

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Tom Herbert <therbert@google.com>
commit c1aa8347e73e4092411fbd96cc59531fb7e76d04
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c1aa8347.failed

Define a private flag for remote checksun offload as well as a length
for the option.

	Signed-off-by: Tom Herbert <therbert@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c1aa8347e73e4092411fbd96cc59531fb7e76d04)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/gue.h
diff --cc include/net/gue.h
index b6c332788084,3f28ec7f1c7f..000000000000
--- a/include/net/gue.h
+++ b/include/net/gue.h
@@@ -20,4 -50,67 +20,70 @@@ struct guehdr 
  	};
  };
  
++<<<<<<< HEAD
++=======
+ /* Standard flags in GUE header */
+ 
+ #define GUE_FLAG_PRIV	htons(1<<0)	/* Private flags are in options */
+ #define GUE_LEN_PRIV	4
+ 
+ #define GUE_FLAGS_ALL	(GUE_FLAG_PRIV)
+ 
+ /* Private flags in the private option extension */
+ 
+ #define GUE_PFLAG_REMCSUM	htonl(1 << 31)
+ #define GUE_PLEN_REMCSUM	4
+ 
+ #define GUE_PFLAGS_ALL	(GUE_PFLAG_REMCSUM)
+ 
+ /* Functions to compute options length corresponding to flags.
+  * If we ever have a lot of flags this can be potentially be
+  * converted to a more optimized algorithm (table lookup
+  * for instance).
+  */
+ static inline size_t guehdr_flags_len(__be16 flags)
+ {
+ 	return ((flags & GUE_FLAG_PRIV) ? GUE_LEN_PRIV : 0);
+ }
+ 
+ static inline size_t guehdr_priv_flags_len(__be32 flags)
+ {
+ 	return 0;
+ }
+ 
+ /* Validate standard and private flags. Returns non-zero (meaning invalid)
+  * if there is an unknown standard or private flags, or the options length for
+  * the flags exceeds the options length specific in hlen of the GUE header.
+  */
+ static inline int validate_gue_flags(struct guehdr *guehdr,
+ 				     size_t optlen)
+ {
+ 	size_t len;
+ 	__be32 flags = guehdr->flags;
+ 
+ 	if (flags & ~GUE_FLAGS_ALL)
+ 		return 1;
+ 
+ 	len = guehdr_flags_len(flags);
+ 	if (len > optlen)
+ 		return 1;
+ 
+ 	if (flags & GUE_FLAG_PRIV) {
+ 		/* Private flags are last four bytes accounted in
+ 		 * guehdr_flags_len
+ 		 */
+ 		flags = *(__be32 *)((void *)&guehdr[1] + len - GUE_LEN_PRIV);
+ 
+ 		if (flags & ~GUE_PFLAGS_ALL)
+ 			return 1;
+ 
+ 		len += guehdr_priv_flags_len(flags);
+ 		if (len > optlen)
+ 			return 1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> c1aa8347e73e (gue: Protocol constants for remote checksum offload)
  #endif
* Unmerged path include/net/gue.h
