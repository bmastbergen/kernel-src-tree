timekeeping: Provide timespec64 based interfaces

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit d6d29896c665dfd50e6e0be7a9039901640433a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d6d29896.failed

To convert callers of the core code to timespec64 we need to provide
the proper interfaces.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: John Stultz <john.stultz@linaro.org>
(cherry picked from commit d6d29896c665dfd50e6e0be7a9039901640433a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/timekeeping.h
#	kernel/time/timekeeping.c
diff --cc kernel/time/timekeeping.c
index 129b1a43892d,3210c9e690c5..000000000000
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@@ -366,10 -357,10 +366,14 @@@ EXPORT_SYMBOL_GPL(ktime_get)
   * clock and the wall_to_monotonic offset and stores the result
   * in normalized timespec format in the variable pointed to by @ts.
   */
- void ktime_get_ts(struct timespec *ts)
+ void ktime_get_ts64(struct timespec64 *ts)
  {
  	struct timekeeper *tk = &timekeeper;
++<<<<<<< HEAD
 +	struct timespec tomono;
++=======
+ 	struct timespec64 tomono;
++>>>>>>> d6d29896c665 (timekeeping: Provide timespec64 based interfaces)
  	s64 nsec;
  	unsigned int seq;
  
@@@ -385,9 -376,9 +389,13 @@@
  
  	ts->tv_sec += tomono.tv_sec;
  	ts->tv_nsec = 0;
++<<<<<<< HEAD
 +	timespec_add_ns(ts, nsec + tomono.tv_nsec);
++=======
+ 	timespec64_add_ns(ts, nsec + tomono.tv_nsec);
++>>>>>>> d6d29896c665 (timekeeping: Provide timespec64 based interfaces)
  }
- EXPORT_SYMBOL_GPL(ktime_get_ts);
+ EXPORT_SYMBOL_GPL(ktime_get_ts64);
  
  
  /**
@@@ -1628,7 -1687,7 +1636,11 @@@ int do_adjtimex(struct timex *txc
  {
  	struct timekeeper *tk = &timekeeper;
  	unsigned long flags;
++<<<<<<< HEAD
 +	struct timespec ts;
++=======
+ 	struct timespec64 ts;
++>>>>>>> d6d29896c665 (timekeeping: Provide timespec64 based interfaces)
  	s32 orig_tai, tai;
  	int ret;
  
@@@ -1648,7 -1707,7 +1660,11 @@@
  			return ret;
  	}
  
++<<<<<<< HEAD
 +	getnstimeofday(&ts);
++=======
+ 	getnstimeofday64(&ts);
++>>>>>>> d6d29896c665 (timekeeping: Provide timespec64 based interfaces)
  
  	raw_spin_lock_irqsave(&timekeeper_lock, flags);
  	write_seqcount_begin(&timekeeper_seq);
* Unmerged path include/linux/timekeeping.h
* Unmerged path include/linux/timekeeping.h
diff --git a/kernel/time/ntp.c b/kernel/time/ntp.c
index af8d1d4f3d55..c0e569ebabb8 100644
--- a/kernel/time/ntp.c
+++ b/kernel/time/ntp.c
@@ -466,7 +466,8 @@ static DECLARE_DELAYED_WORK(sync_cmos_work, sync_cmos_clock);
 
 static void sync_cmos_clock(struct work_struct *work)
 {
-	struct timespec now, next;
+	struct timespec64 now;
+	struct timespec next;
 	int fail = 1;
 
 	/*
@@ -485,9 +486,9 @@ static void sync_cmos_clock(struct work_struct *work)
 		return;
 	}
 
-	getnstimeofday(&now);
+	getnstimeofday64(&now);
 	if (abs(now.tv_nsec - (NSEC_PER_SEC / 2)) <= tick_nsec * 5) {
-		struct timespec adjust = now;
+		struct timespec adjust = timespec64_to_timespec(now);
 
 		fail = -ENODEV;
 		if (persistent_clock_is_local)
* Unmerged path kernel/time/timekeeping.c
