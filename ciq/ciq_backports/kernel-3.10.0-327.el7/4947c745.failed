hv: move "client/server_monitor_conn_id" bus attributes to dev_groups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [hv] move "client/server_monitor_conn_id" bus attributes to dev_groups (Vitaly Kuznetsov) [1201889]
Rebuild_FUZZ: 97.01%
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 4947c7453b184bc33a0056cf95af61c3cad11ef6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/4947c745.failed

This moves the "client_monitor_conn_id" and "server_monitor_conn_id" bus
attributes to the dev_groups structure, removing the need for it to be
in a temporary structure.

	Tested-by: "K. Y. Srinivasan" <kys@microsoft.com>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 4947c7453b184bc33a0056cf95af61c3cad11ef6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/channel.c
#	drivers/hv/vmbus_drv.c
#	include/linux/hyperv.h
diff --cc drivers/hv/channel.c
index 45ad7011d110,75c26da3e011..000000000000
--- a/drivers/hv/channel.c
+++ b/drivers/hv/channel.c
@@@ -65,30 -65,6 +65,33 @@@ static void vmbus_setevent(struct vmbus
  void vmbus_get_debug_info(struct vmbus_channel *channel,
  			      struct vmbus_channel_debug_info *debuginfo)
  {
++<<<<<<< HEAD
 +	struct hv_monitor_page *monitorpage;
 +	u8 monitor_group = (u8)channel->offermsg.monitorid / 32;
 +	u8 monitor_offset = (u8)channel->offermsg.monitorid % 32;
 +
 +	monitorpage = (struct hv_monitor_page *)vmbus_connection.monitor_pages;
 +
 +	debuginfo->servermonitor_pending =
 +			monitorpage->trigger_group[monitor_group].pending;
 +	debuginfo->servermonitor_latency =
 +			monitorpage->latency[monitor_group][monitor_offset];
 +	debuginfo->servermonitor_connectionid =
 +			monitorpage->parameter[monitor_group]
 +					[monitor_offset].connectionid.u.id;
 +
 +	monitorpage++;
 +
 +	debuginfo->clientmonitor_pending =
 +			monitorpage->trigger_group[monitor_group].pending;
 +	debuginfo->clientmonitor_latency =
 +			monitorpage->latency[monitor_group][monitor_offset];
 +	debuginfo->clientmonitor_connectionid =
 +			monitorpage->parameter[monitor_group]
 +					[monitor_offset].connectionid.u.id;
 +
++=======
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  	hv_ringbuffer_get_debuginfo(&channel->inbound, &debuginfo->inbound);
  	hv_ringbuffer_get_debuginfo(&channel->outbound, &debuginfo->outbound);
  }
diff --cc drivers/hv/vmbus_drv.c
index 2ed3b20b532d,73cb456e256b..000000000000
--- a/drivers/hv/vmbus_drv.c
+++ b/drivers/hv/vmbus_drv.c
@@@ -46,20 -46,7 +46,23 @@@ static struct tasklet_struct msg_dpc
  static struct completion probe_event;
  static int irq;
  
 +struct resource hyperv_mmio = {
 +	.name  = "hyperv mmio",
 +	.flags = IORESOURCE_MEM,
 +};
 +EXPORT_SYMBOL_GPL(hyperv_mmio);
 +
  struct hv_device_info {
++<<<<<<< HEAD
 +	u32 server_monitor_pending;
 +	u32 server_monitor_latency;
 +	u32 server_monitor_conn_id;
 +	u32 client_monitor_pending;
 +	u32 client_monitor_latency;
 +	u32 client_monitor_conn_id;
 +
++=======
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  	struct hv_dev_port_info inbound;
  	struct hv_dev_port_info outbound;
  };
@@@ -83,14 -70,6 +86,17 @@@ static void get_channel_info(struct hv_
  
  	vmbus_get_debug_info(device->channel, &debug_info);
  
++<<<<<<< HEAD
 +	info->server_monitor_pending = debug_info.servermonitor_pending;
 +	info->server_monitor_latency = debug_info.servermonitor_latency;
 +	info->server_monitor_conn_id = debug_info.servermonitor_connectionid;
 +
 +	info->client_monitor_pending = debug_info.clientmonitor_pending;
 +	info->client_monitor_latency = debug_info.clientmonitor_latency;
 +	info->client_monitor_conn_id = debug_info.clientmonitor_connectionid;
 +
++=======
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  	info->inbound.int_mask = debug_info.inbound.current_interrupt_mask;
  	info->inbound.read_idx = debug_info.inbound.current_read_index;
  	info->inbound.write_idx = debug_info.inbound.current_write_index;
@@@ -161,26 -140,45 +167,65 @@@ static ssize_t vmbus_show_device_attr(s
  	} else if (!strcmp(dev_attr->attr.name, "in_write_bytes_avail")) {
  		ret = sprintf(buf, "%d\n",
  			       device_info->inbound.bytes_avail_towrite);
++<<<<<<< HEAD
 +	} else if (!strcmp(dev_attr->attr.name, "server_monitor_pending")) {
 +		ret = sprintf(buf, "%d\n", device_info->server_monitor_pending);
 +	} else if (!strcmp(dev_attr->attr.name, "server_monitor_latency")) {
 +		ret = sprintf(buf, "%d\n", device_info->server_monitor_latency);
 +	} else if (!strcmp(dev_attr->attr.name, "server_monitor_conn_id")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->server_monitor_conn_id);
 +	} else if (!strcmp(dev_attr->attr.name, "client_monitor_pending")) {
 +		ret = sprintf(buf, "%d\n", device_info->client_monitor_pending);
 +	} else if (!strcmp(dev_attr->attr.name, "client_monitor_latency")) {
 +		ret = sprintf(buf, "%d\n", device_info->client_monitor_latency);
 +	} else if (!strcmp(dev_attr->attr.name, "client_monitor_conn_id")) {
 +		ret = sprintf(buf, "%d\n",
 +			       device_info->client_monitor_conn_id);
++=======
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  	}
  
  	kfree(device_info);
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static u8 channel_monitor_group(struct vmbus_channel *channel)
+ {
+ 	return (u8)channel->offermsg.monitorid / 32;
+ }
+ 
+ static u8 channel_monitor_offset(struct vmbus_channel *channel)
+ {
+ 	return (u8)channel->offermsg.monitorid % 32;
+ }
+ 
+ static u32 channel_pending(struct vmbus_channel *channel,
+ 			   struct hv_monitor_page *monitor_page)
+ {
+ 	u8 monitor_group = channel_monitor_group(channel);
+ 	return monitor_page->trigger_group[monitor_group].pending;
+ }
+ 
+ static u32 channel_latency(struct vmbus_channel *channel,
+ 			   struct hv_monitor_page *monitor_page)
+ {
+ 	u8 monitor_group = channel_monitor_group(channel);
+ 	u8 monitor_offset = channel_monitor_offset(channel);
+ 	return monitor_page->latency[monitor_group][monitor_offset];
+ }
+ 
+ static u32 channel_conn_id(struct vmbus_channel *channel,
+ 			   struct hv_monitor_page *monitor_page)
+ {
+ 	u8 monitor_group = channel_monitor_group(channel);
+ 	u8 monitor_offset = channel_monitor_offset(channel);
+ 	return monitor_page->parameter[monitor_group][monitor_offset].connectionid.u.id;
+ }
+ 
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  static ssize_t id_show(struct device *dev, struct device_attribute *dev_attr,
  		       char *buf)
  {
@@@ -249,7 -247,90 +294,35 @@@ static ssize_t modalias_show(struct dev
  }
  static DEVICE_ATTR_RO(modalias);
  
 -static ssize_t server_monitor_pending_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_pending(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[1]));
 -}
 -static DEVICE_ATTR_RO(server_monitor_pending);
 -
 -static ssize_t client_monitor_pending_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_pending(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[1]));
 -}
 -static DEVICE_ATTR_RO(client_monitor_pending);
 -
 -static ssize_t server_monitor_latency_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_latency(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[0]));
 -}
 -static DEVICE_ATTR_RO(server_monitor_latency);
 -
 -static ssize_t client_monitor_latency_show(struct device *dev,
 -					   struct device_attribute *dev_attr,
 -					   char *buf)
 -{
 -	struct hv_device *hv_dev = device_to_hv_device(dev);
 -
 -	if (!hv_dev->channel)
 -		return -ENODEV;
 -	return sprintf(buf, "%d\n",
 -		       channel_latency(hv_dev->channel,
 -				       vmbus_connection.monitor_pages[1]));
 -}
 -static DEVICE_ATTR_RO(client_monitor_latency);
  
+ static ssize_t server_monitor_conn_id_show(struct device *dev,
+ 					   struct device_attribute *dev_attr,
+ 					   char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	return sprintf(buf, "%d\n",
+ 		       channel_conn_id(hv_dev->channel,
+ 				       vmbus_connection.monitor_pages[0]));
+ }
+ static DEVICE_ATTR_RO(server_monitor_conn_id);
+ 
+ static ssize_t client_monitor_conn_id_show(struct device *dev,
+ 					   struct device_attribute *dev_attr,
+ 					   char *buf)
+ {
+ 	struct hv_device *hv_dev = device_to_hv_device(dev);
+ 
+ 	if (!hv_dev->channel)
+ 		return -ENODEV;
+ 	return sprintf(buf, "%d\n",
+ 		       channel_conn_id(hv_dev->channel,
+ 				       vmbus_connection.monitor_pages[1]));
+ }
+ static DEVICE_ATTR_RO(client_monitor_conn_id);
+ 
  static struct attribute *vmbus_attrs[] = {
  	&dev_attr_id.attr,
  	&dev_attr_state.attr,
@@@ -257,20 -338,18 +330,32 @@@
  	&dev_attr_class_id.attr,
  	&dev_attr_device_id.attr,
  	&dev_attr_modalias.attr,
++<<<<<<< HEAD
++=======
+ 	&dev_attr_server_monitor_pending.attr,
+ 	&dev_attr_client_monitor_pending.attr,
+ 	&dev_attr_server_monitor_latency.attr,
+ 	&dev_attr_client_monitor_latency.attr,
+ 	&dev_attr_server_monitor_conn_id.attr,
+ 	&dev_attr_client_monitor_conn_id.attr,
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  	NULL,
  };
  ATTRIBUTE_GROUPS(vmbus);
  
  /* Set up per device attributes in /sys/bus/vmbus/devices/<bus device> */
  static struct device_attribute vmbus_device_attrs[] = {
++<<<<<<< HEAD
 +	__ATTR(server_monitor_pending, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(server_monitor_latency, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(server_monitor_conn_id, S_IRUGO, vmbus_show_device_attr, NULL),
 +
 +	__ATTR(client_monitor_pending, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(client_monitor_latency, S_IRUGO, vmbus_show_device_attr, NULL),
 +	__ATTR(client_monitor_conn_id, S_IRUGO, vmbus_show_device_attr, NULL),
 +
++=======
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  	__ATTR(out_intr_mask, S_IRUGO, vmbus_show_device_attr, NULL),
  	__ATTR(out_read_index, S_IRUGO, vmbus_show_device_attr, NULL),
  	__ATTR(out_write_index, S_IRUGO, vmbus_show_device_attr, NULL),
diff --cc include/linux/hyperv.h
index c9f89b16b793,332e80ce9b8a..000000000000
--- a/include/linux/hyperv.h
+++ b/include/linux/hyperv.h
@@@ -588,13 -900,6 +588,16 @@@ enum vmbus_channel_state 
  };
  
  struct vmbus_channel_debug_info {
++<<<<<<< HEAD
 +	u32 servermonitor_pending;
 +	u32 servermonitor_latency;
 +	u32 servermonitor_connectionid;
 +	u32 clientmonitor_pending;
 +	u32 clientmonitor_latency;
 +	u32 clientmonitor_connectionid;
 +
++=======
++>>>>>>> 4947c7453b18 (hv: move "client/server_monitor_conn_id" bus attributes to dev_groups)
  	struct hv_ring_buffer_debug_info inbound;
  	struct hv_ring_buffer_debug_info outbound;
  };
* Unmerged path drivers/hv/channel.c
* Unmerged path drivers/hv/vmbus_drv.c
* Unmerged path include/linux/hyperv.h
