xfs: cleanup xfs_rename error handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 445883e8133975fe8d555610c70c1c4c501f0bf8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/445883e8.failed

The jump labels are ambiguous and unclear and some of the error
paths are used inconsistently. Rules for error jumps are:

- use out_trans_cancel for unmodified transaction context
- use out_bmap_cancel on ENOSPC errors
- use out_trans_abort when transaction is likely to be dirty.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 445883e8133975fe8d555610c70c1c4c501f0bf8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_inode.c
diff --cc fs/xfs/xfs_inode.c
index 0a9e226dbdb3,426dbf7d094a..000000000000
--- a/fs/xfs/xfs_inode.c
+++ b/fs/xfs/xfs_inode.c
@@@ -2775,12 -2802,10 +2775,10 @@@ xfs_rename
  	xfs_sort_for_rename(src_dp, target_dp, src_ip, target_ip, NULL,
  				inodes, &num_inodes);
  
- 	xfs_bmap_init(&free_list, &first_block);
  	tp = xfs_trans_alloc(mp, XFS_TRANS_RENAME);
- 	cancel_flags = XFS_TRANS_RELEASE_LOG_RES;
  	spaceres = XFS_RENAME_SPACE_RES(mp, target_name->len);
  	error = xfs_trans_reserve(tp, &M_RES(mp)->tr_rename, spaceres, 0);
 -	if (error == -ENOSPC) {
 +	if (error == ENOSPC) {
  		spaceres = 0;
  		error = xfs_trans_reserve(tp, &M_RES(mp)->tr_rename, 0, 0);
  	}
@@@ -2825,11 -2847,25 +2820,33 @@@
  	 */
  	if (unlikely((target_dp->i_d.di_flags & XFS_DIFLAG_PROJINHERIT) &&
  		     (xfs_get_projid(target_dp) != xfs_get_projid(src_ip)))) {
++<<<<<<< HEAD
 +		error = XFS_ERROR(EXDEV);
 +		goto error_return;
++=======
+ 		error = -EXDEV;
+ 		goto out_trans_cancel;
++>>>>>>> 445883e81339 (xfs: cleanup xfs_rename error handling)
+ 	}
+ 
+ 	xfs_bmap_init(&free_list, &first_block);
+ 
+ 	/*
++<<<<<<< HEAD
++=======
+ 	 * Handle RENAME_EXCHANGE flags
+ 	 */
+ 	if (flags & RENAME_EXCHANGE) {
+ 		error = xfs_cross_rename(tp, src_dp, src_name, src_ip,
+ 					 target_dp, target_name, target_ip,
+ 					 &free_list, &first_block, spaceres);
+ 		if (error)
+ 			goto out_trans_abort;
+ 		goto finish_rename;
  	}
  
  	/*
++>>>>>>> 445883e81339 (xfs: cleanup xfs_rename error handling)
  	 * Set up the target.
  	 */
  	if (target_ip == NULL) {
@@@ -2850,10 -2886,10 +2867,15 @@@
  		error = xfs_dir_createname(tp, target_dp, target_name,
  						src_ip->i_ino, &first_block,
  						&free_list, spaceres);
++<<<<<<< HEAD
 +		if (error == ENOSPC)
 +			goto error_return;
++=======
+ 		if (error == -ENOSPC)
+ 			goto out_bmap_cancel;
++>>>>>>> 445883e81339 (xfs: cleanup xfs_rename error handling)
  		if (error)
- 			goto abort_return;
+ 			goto out_trans_abort;
  
  		xfs_trans_ichgtime(tp, target_dp,
  					XFS_ICHGTIME_MOD | XFS_ICHGTIME_CHG);
@@@ -2875,8 -2911,8 +2897,13 @@@
  			 */
  			if (!(xfs_dir_isempty(target_ip)) ||
  			    (target_ip->i_d.di_nlink > 2)) {
++<<<<<<< HEAD
 +				error = XFS_ERROR(EEXIST);
 +				goto error_return;
++=======
+ 				error = -EEXIST;
+ 				goto out_trans_cancel;
++>>>>>>> 445883e81339 (xfs: cleanup xfs_rename error handling)
  			}
  		}
  
@@@ -2927,9 -2963,9 +2954,9 @@@
  		error = xfs_dir_replace(tp, src_ip, &xfs_name_dotdot,
  					target_dp->i_ino,
  					&first_block, &free_list, spaceres);
 -		ASSERT(error != -EEXIST);
 +		ASSERT(error != EEXIST);
  		if (error)
- 			goto abort_return;
+ 			goto out_trans_abort;
  	}
  
  	/*
* Unmerged path fs/xfs/xfs_inode.c
