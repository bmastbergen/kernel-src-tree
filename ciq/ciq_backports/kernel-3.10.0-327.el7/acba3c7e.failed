perf, powerpc: Fix up flush_branch_stack() users

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [perf]  powerpc: Fix up flush_branch_stack() users (Jiri Olsa) [1222189]
Rebuild_FUZZ: 94.51%
commit-author Peter Zijlstra <peterz@infradead.org>
commit acba3c7e4652ca5fcb2fd9376d58c2dffd8ddf2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/acba3c7e.failed

The recent LBR rework for x86 left a stray flush_branch_stack() user in
the PowerPC code, fix that up.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Anshuman Khandual <khandual@linux.vnet.ibm.com>
	Cc: Anton Blanchard <anton@samba.org>
	Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Christoph Lameter <cl@linux.com>
	Cc: Joel Stanley <joel@jms.id.au>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Michael Neuling <mikey@neuling.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Tejun Heo <tj@kernel.org>
	Cc: linuxppc-dev@lists.ozlabs.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit acba3c7e4652ca5fcb2fd9376d58c2dffd8ddf2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/perf/core-book3s.c
#	include/linux/perf_event.h
diff --cc arch/powerpc/perf/core-book3s.c
index c9218572b428,7fd60dcb2cb0..000000000000
--- a/arch/powerpc/perf/core-book3s.c
+++ b/arch/powerpc/perf/core-book3s.c
@@@ -119,7 -124,7 +119,11 @@@ static unsigned long ebb_switch_in(boo
  
  static inline void power_pmu_bhrb_enable(struct perf_event *event) {}
  static inline void power_pmu_bhrb_disable(struct perf_event *event) {}
++<<<<<<< HEAD
 +void power_pmu_flush_branch_stack(void) {}
++=======
+ static void power_pmu_sched_task(struct perf_event_context *ctx, bool sched_in) {}
++>>>>>>> acba3c7e4652 (perf, powerpc: Fix up flush_branch_stack() users)
  static inline void power_pmu_bhrb_read(struct cpu_hw_events *cpuhw) {}
  static void pmao_restore_workaround(bool ebb) { }
  #endif /* CONFIG_PPC32 */
@@@ -370,9 -377,12 +376,16 @@@ static void power_pmu_bhrb_disable(stru
  /* Called from ctxsw to prevent one process's branch entries to
   * mingle with the other process's entries during context switch.
   */
++<<<<<<< HEAD
 +void power_pmu_flush_branch_stack(void)
++=======
+ static void power_pmu_sched_task(struct perf_event_context *ctx, bool sched_in)
++>>>>>>> acba3c7e4652 (perf, powerpc: Fix up flush_branch_stack() users)
  {
- 	if (ppmu->bhrb_nr)
+ 	if (!ppmu->bhrb_nr)
+ 		return;
+ 
+ 	if (sched_in)
  		power_pmu_bhrb_reset();
  }
  /* Calculate the to address for a branch */
diff --cc include/linux/perf_event.h
index 68768e324db6,724d3720c9b1..000000000000
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@@ -280,16 -262,15 +280,27 @@@ struct pmu 
  	int (*event_idx)		(struct perf_event *event); /*optional */
  
  	/*
++<<<<<<< HEAD
 +	 * flush branch stack on context-switches (needed in cpu-wide mode)
 +	 */
 +	void (*flush_branch_stack)	(void);
 +
 +	RH_KABI_EXTEND(struct module *module)
++=======
+ 	 * context-switches callback
+ 	 */
+ 	void (*sched_task)		(struct perf_event_context *ctx,
+ 					bool sched_in);
+ 	/*
+ 	 * PMU specific data size
+ 	 */
+ 	size_t				task_ctx_size;
++>>>>>>> acba3c7e4652 (perf, powerpc: Fix up flush_branch_stack() users)
  
 +	/*
 +	 * various common per-pmu feature flags
 +	 */
 +	RH_KABI_EXTEND(int	capabilities)
  };
  
  /**
* Unmerged path arch/powerpc/perf/core-book3s.c
* Unmerged path include/linux/perf_event.h
