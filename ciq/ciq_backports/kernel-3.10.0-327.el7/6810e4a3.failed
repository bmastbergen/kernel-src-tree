percpu_ref: remove unnecessary ACCESS_ONCE() in percpu_ref_tryget_live()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [lib] percpu-refcount: remove unnecessary ACCESS_ONCE() in percpu_ref_tryget_live() (Jeff Moyer) [1209624]
Rebuild_FUZZ: 95.30%
commit-author Tejun Heo <tj@kernel.org>
commit 6810e4a394f9d781050107529b8d1465c00b7b13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6810e4a3.failed

__ref_is_percpu() needs the implied ACCESS_ONCE() in
lockless_dereference() on @ref->percpu_count_ptr because the value is
tested for !__PERCPU_REF_ATOMIC, which may be set asynchronously, and
then used as a pointer.  If the compiler generates a separate fetch
when using it as a pointer, __PERCPU_REF_ATOMIC may be set in between
contaminating the pointer value.

percpu_ref_tryget_live() also uses ACCESS_ONCE() to test
__PERCPU_REF_DEAD; however, there's no reason for this.  I just copied
ACCESS_ONCE() usage blindly from __ref_is_percpu().  All it does is
confusing people trying to understand what's going on.

This patch removes the unnecessary ACCESS_ONCE() usage from
percpu_ref_tryget_live() and adds a comment explaining why
__ref_is_percpu() needs it.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Cc: Kent Overstreet <kmo@daterainc.com>
(cherry picked from commit 6810e4a394f9d781050107529b8d1465c00b7b13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/percpu-refcount.h
* Unmerged path include/linux/percpu-refcount.h
* Unmerged path include/linux/percpu-refcount.h
