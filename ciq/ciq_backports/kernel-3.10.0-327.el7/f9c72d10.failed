sunrpc: make debugfs file creation failure non-fatal

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jeff Layton <jlayton@poochiereds.net>
commit f9c72d10d6fbf949558cd088389a42213ed7b12d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/f9c72d10.failed

We currently have a problem that SELinux policy is being enforced when
creating debugfs files. If a debugfs file is created as a side effect of
doing some syscall, then that creation can fail if the SELinux policy
for that process prevents it.

This seems wrong. We don't do that for files under /proc, for instance,
so Bruce has proposed a patch to fix that.

While discussing that patch however, Greg K.H. stated:

    "No kernel code should care / fail if a debugfs function fails, so
     please fix up the sunrpc code first."

This patch converts all of the sunrpc debugfs setup code to be void
return functins, and the callers to not look for errors from those
functions.

This should allow rpc_clnt and rpc_xprt creation to work, even if the
kernel fails to create debugfs files for some reason.

Symptoms were failing krb5 mounts on systems using gss-proxy and
selinux.

Fixes: 388f0c776781 "sunrpc: add a debugfs rpc_xprt directory..."
	Cc: stable@vger.kernel.org
	Signed-off-by: Jeff Layton <jeff.layton@primarydata.com>
	Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: J. Bruce Fields <bfields@redhat.com>
(cherry picked from commit f9c72d10d6fbf949558cd088389a42213ed7b12d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sunrpc/debug.h
#	net/sunrpc/clnt.c
#	net/sunrpc/debugfs.c
#	net/sunrpc/sunrpc_syms.c
#	net/sunrpc/xprt.c
diff --cc include/linux/sunrpc/debug.h
index 9385bd74c860,59a7889e15db..000000000000
--- a/include/linux/sunrpc/debug.h
+++ b/include/linux/sunrpc/debug.h
@@@ -65,9 -53,55 +65,54 @@@ extern unsigned int		nlm_debug
  /*
   * Sysctl interface for RPC debugging
   */
 -
 -struct rpc_clnt;
 -struct rpc_xprt;
 -
 -#if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
 +#ifdef RPC_DEBUG
  void		rpc_register_sysctl(void);
  void		rpc_unregister_sysctl(void);
++<<<<<<< HEAD
++=======
+ void		sunrpc_debugfs_init(void);
+ void		sunrpc_debugfs_exit(void);
+ void		rpc_clnt_debugfs_register(struct rpc_clnt *);
+ void		rpc_clnt_debugfs_unregister(struct rpc_clnt *);
+ void		rpc_xprt_debugfs_register(struct rpc_xprt *);
+ void		rpc_xprt_debugfs_unregister(struct rpc_xprt *);
+ #else
+ static inline void
+ sunrpc_debugfs_init(void)
+ {
+ 	return;
+ }
+ 
+ static inline void
+ sunrpc_debugfs_exit(void)
+ {
+ 	return;
+ }
+ 
+ static inline void
+ rpc_clnt_debugfs_register(struct rpc_clnt *clnt)
+ {
+ 	return;
+ }
+ 
+ static inline void
+ rpc_clnt_debugfs_unregister(struct rpc_clnt *clnt)
+ {
+ 	return;
+ }
+ 
+ static inline void
+ rpc_xprt_debugfs_register(struct rpc_xprt *xprt)
+ {
+ 	return;
+ }
+ 
+ static inline void
+ rpc_xprt_debugfs_unregister(struct rpc_xprt *xprt)
+ {
+ 	return;
+ }
++>>>>>>> f9c72d10d6fb (sunrpc: make debugfs file creation failure non-fatal)
  #endif
  
  #endif /* _LINUX_SUNRPC_DEBUG_H_ */
diff --cc net/sunrpc/clnt.c
index ae46f0198608,e6ce1517367f..000000000000
--- a/net/sunrpc/clnt.c
+++ b/net/sunrpc/clnt.c
@@@ -303,6 -303,8 +303,11 @@@ static int rpc_client_register(struct r
  	struct super_block *pipefs_sb;
  	int err;
  
++<<<<<<< HEAD
++=======
+ 	rpc_clnt_debugfs_register(clnt);
+ 
++>>>>>>> f9c72d10d6fb (sunrpc: make debugfs file creation failure non-fatal)
  	pipefs_sb = rpc_get_sb_net(net);
  	if (pipefs_sb) {
  		err = rpc_setup_pipedir(pipefs_sb, clnt);
diff --cc net/sunrpc/sunrpc_syms.c
index cd30120de9e4,ee5d3d253102..000000000000
--- a/net/sunrpc/sunrpc_syms.c
+++ b/net/sunrpc/sunrpc_syms.c
@@@ -97,7 -97,9 +97,13 @@@ init_sunrpc(void
  	err = register_rpc_pipefs();
  	if (err)
  		goto out4;
++<<<<<<< HEAD
 +#ifdef RPC_DEBUG
++=======
+ 
+ 	sunrpc_debugfs_init();
+ #if IS_ENABLED(CONFIG_SUNRPC_DEBUG)
++>>>>>>> f9c72d10d6fb (sunrpc: make debugfs file creation failure non-fatal)
  	rpc_register_sysctl();
  #endif
  	svc_init_xprt_sock();	/* svc sock transport */
diff --cc net/sunrpc/xprt.c
index dc83880236d8,9949722d99ce..000000000000
--- a/net/sunrpc/xprt.c
+++ b/net/sunrpc/xprt.c
@@@ -1336,6 -1371,8 +1336,11 @@@ found
  		return ERR_PTR(-ENOMEM);
  	}
  
++<<<<<<< HEAD
++=======
+ 	rpc_xprt_debugfs_register(xprt);
+ 
++>>>>>>> f9c72d10d6fb (sunrpc: make debugfs file creation failure non-fatal)
  	dprintk("RPC:       created transport %p with %u slots\n", xprt,
  			xprt->max_reqs);
  out:
* Unmerged path net/sunrpc/debugfs.c
* Unmerged path include/linux/sunrpc/debug.h
* Unmerged path net/sunrpc/clnt.c
* Unmerged path net/sunrpc/debugfs.c
* Unmerged path net/sunrpc/sunrpc_syms.c
* Unmerged path net/sunrpc/xprt.c
