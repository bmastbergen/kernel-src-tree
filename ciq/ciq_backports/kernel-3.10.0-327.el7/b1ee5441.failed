x86: Implement arch_setup/teardown_hwirq()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] Implement arch_setup/teardown_hwirq() (Steve Best) [1231358]
Rebuild_FUZZ: 93.67%
commit-author Thomas Gleixner <tglx@linutronix.de>
commit b1ee544174fd0eb28a7770403b9577fd70f1cd3d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b1ee5441.failed

This is just a cleanup to get rid of the create/destroy_irq variants
which were designed in hell.

The long term solution for x86 is to switch over to irq domains and
cleanup the whole vector allocation mess.

The generic irq_alloc_hwirqs() interface deliberately prevents
multi-MSI vector allocation to further enforce the irq domain
conversion (aside of the desire to support ioapic hotplug).

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Grant Likely <grant.likely@linaro.org>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: x86@kernel.org
Link: http://lkml.kernel.org/r/20140507154334.482904047@linutronix.de
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit b1ee544174fd0eb28a7770403b9577fd70f1cd3d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
diff --cc arch/x86/Kconfig
index 9b26872f4d21,47247708c9eb..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -876,11 -830,8 +876,16 @@@ config X86_LOCAL_API
  
  config X86_IO_APIC
  	def_bool y
++<<<<<<< HEAD
 +	depends on X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_IOAPIC
 +
 +config X86_VISWS_APIC
 +	def_bool y
 +	depends on X86_32 && X86_VISWS
++=======
+ 	depends on X86_64 || SMP || X86_32_NON_STANDARD || X86_UP_IOAPIC || PCI_MSI
+ 	select GENERIC_IRQ_LEGACY_ALLOC_HWIRQ
++>>>>>>> b1ee544174fd (x86: Implement arch_setup/teardown_hwirq())
  
  config X86_REROUTE_FOR_BROKEN_BOOT_IRQS
  	bool "Reroute for broken boot IRQs"
* Unmerged path arch/x86/Kconfig
diff --git a/arch/x86/kernel/apic/io_apic.c b/arch/x86/kernel/apic/io_apic.c
index 4336719952b4..6d0f3d2aa74c 100644
--- a/arch/x86/kernel/apic/io_apic.c
+++ b/arch/x86/kernel/apic/io_apic.c
@@ -2999,6 +2999,39 @@ void destroy_irqs(unsigned int irq, unsigned int count)
 		destroy_irq(irq + i);
 }
 
+int arch_setup_hwirq(unsigned int irq, int node)
+{
+	struct irq_cfg *cfg;
+	unsigned long flags;
+	int ret;
+
+	cfg = alloc_irq_cfg(irq, node);
+	if (!cfg)
+		return -ENOMEM;
+
+	raw_spin_lock_irqsave(&vector_lock, flags);
+	ret = __assign_irq_vector(irq, cfg, apic->target_cpus());
+	raw_spin_unlock_irqrestore(&vector_lock, flags);
+
+	if (!ret)
+		irq_set_chip_data(irq, cfg);
+	else
+		free_irq_cfg(irq, cfg);
+	return ret;
+}
+
+void arch_teardown_hwirq(unsigned int irq)
+{
+	struct irq_cfg *cfg = irq_get_chip_data(irq);
+	unsigned long flags;
+
+	free_remapped_irq(irq);
+	raw_spin_lock_irqsave(&vector_lock, flags);
+	__clear_irq_vector(irq, cfg);
+	raw_spin_unlock_irqrestore(&vector_lock, flags);
+	free_irq_cfg(irq, cfg);
+}
+
 /*
  * MSI message composition
  */
