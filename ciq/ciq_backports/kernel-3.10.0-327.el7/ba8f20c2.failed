cpuidle: Handle clockevents_notify(BROADCAST_ENTER) failure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [cpuidle] Handle clockevents_notify(BROADCAST_ENTER) failure (Gustavo Duarte) [1123121]
Rebuild_FUZZ: 91.74%
commit-author Preeti U Murthy <preeti@linux.vnet.ibm.com>
commit ba8f20c2eb4158a443e9d6a909aee5010efa0c69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/ba8f20c2.failed

Some archs set the CPUIDLE_FLAG_TIMER_STOP flag for idle states in which the
local timers stop. The cpuidle_idle_call() currently handles such idle states
by calling into the broadcast framework so as to wakeup CPUs at their next
wakeup event. With the hrtimer mode of broadcast, the BROADCAST_ENTER call
into the broadcast frameowork can fail for archs that do not have an external
clock device to handle wakeups and the CPU in question has thus to be made
the stand by CPU. This patch handles such cases by failing the call into
cpuidle so that the arch can take some default action. The arch will certainly
not enter a similar idle state because a failed cpuidle call will also implicitly
indicate that the broadcast framework has not registered this CPU to be woken up.
Hence we are safe if we fail the cpuidle call.

In the process move the functions that trace idle statistics just before and
after the entry and exit into idle states respectively. In other
scenarios where the call to cpuidle fails, we end up not tracing idle
entry and exit since a decision on an idle state could not be taken. Similarly
when the call to broadcast framework fails, we skip tracing idle statistics
because we are in no further position to take a decision on an alternative
idle state to enter into.

	Signed-off-by: Preeti U Murthy <preeti@linux.vnet.ibm.com>
	Cc: deepthi@linux.vnet.ibm.com
	Cc: paulmck@linux.vnet.ibm.com
	Cc: fweisbec@gmail.com
	Cc: paulus@samba.org
	Cc: srivatsa.bhat@linux.vnet.ibm.com
	Cc: svaidy@linux.vnet.ibm.com
	Cc: peterz@infradead.org
	Cc: benh@kernel.crashing.org
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Cc: linuxppc-dev@lists.ozlabs.org
Link: http://lkml.kernel.org/r/20140207080652.17187.66344.stgit@preeti.in.ibm.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit ba8f20c2eb4158a443e9d6a909aee5010efa0c69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpuidle/cpuidle.c
diff --cc drivers/cpuidle/cpuidle.c
index fdc432f18022,09d05ab262be..000000000000
--- a/drivers/cpuidle/cpuidle.c
+++ b/drivers/cpuidle/cpuidle.c
@@@ -144,11 -140,14 +144,22 @@@ int cpuidle_idle_call(void
  		return 0;
  	}
  
++<<<<<<< HEAD
 +	trace_cpu_idle_rcuidle(next_state, dev->cpu);
 +
 +	if (drv->states[next_state].flags & CPUIDLE_FLAG_TIMER_STOP)
 +		clockevents_notify(CLOCK_EVT_NOTIFY_BROADCAST_ENTER,
 +				   &dev->cpu);
++=======
+ 	broadcast = !!(drv->states[next_state].flags & CPUIDLE_FLAG_TIMER_STOP);
+ 
+ 	if (broadcast &&
+ 	    clockevents_notify(CLOCK_EVT_NOTIFY_BROADCAST_ENTER, &dev->cpu))
+ 		return -EBUSY;
+ 
+ 
+ 	trace_cpu_idle_rcuidle(next_state, dev->cpu);
++>>>>>>> ba8f20c2eb41 (cpuidle: Handle clockevents_notify(BROADCAST_ENTER) failure)
  
  	if (cpuidle_state_is_coupled(dev, drv, next_state))
  		entered_state = cpuidle_enter_state_coupled(dev, drv,
@@@ -156,12 -155,11 +167,17 @@@
  	else
  		entered_state = cpuidle_enter_state(dev, drv, next_state);
  
++<<<<<<< HEAD
 +	if (drv->states[next_state].flags & CPUIDLE_FLAG_TIMER_STOP)
 +		clockevents_notify(CLOCK_EVT_NOTIFY_BROADCAST_EXIT,
 +				   &dev->cpu);
- 
++=======
  	trace_cpu_idle_rcuidle(PWR_EVENT_EXIT, dev->cpu);
  
+ 	if (broadcast)
+ 		clockevents_notify(CLOCK_EVT_NOTIFY_BROADCAST_EXIT, &dev->cpu);
++>>>>>>> ba8f20c2eb41 (cpuidle: Handle clockevents_notify(BROADCAST_ENTER) failure)
+ 
  	/* give the governor an opportunity to reflect on the outcome */
  	if (cpuidle_curr_governor->reflect)
  		cpuidle_curr_governor->reflect(dev, entered_state);
* Unmerged path drivers/cpuidle/cpuidle.c
