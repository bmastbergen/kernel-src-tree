firmware: dmi_scan: Trim DMI table length before exporting it

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [firmware] dmi_scan: Trim DMI table length before exporting it (Jarod Wilson) [853192]
Rebuild_FUZZ: 91.07%
commit-author Jean Delvare <jdelvare@suse.de>
commit 6e0ad59e3d838a2887e7aa657baee5896030d009
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6e0ad59e.failed

The SMBIOS v3 entry points specify a maximum length for the DMI table,
not the exact length. Thus there may be garbage after the end-of-table
marker, which we don't want to export to user-space. Adjust dmi_len
when we find the end-of-table marker, so that only the actual table
payload is exported.

	Signed-off-by: Jean Delvare <jdelvare@suse.de>
	Cc: Ivan Khoronzhuk <ivan.khoronzhuk@globallogic.com>
(cherry picked from commit 6e0ad59e3d838a2887e7aa657baee5896030d009)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/dmi_scan.c
diff --cc drivers/firmware/dmi_scan.c
index 6e066c3026ef,7fdf2868a276..000000000000
--- a/drivers/firmware/dmi_scan.c
+++ b/drivers/firmware/dmi_scan.c
@@@ -103,11 -103,14 +103,14 @@@ static void dmi_table(u8 *buf, int len
  		 *  table in dmi_decode or dmi_string
  		 */
  		data += dm->length;
 -		while ((data - buf < dmi_len - 1) && (data[0] || data[1]))
 +		while ((data - buf < len - 1) && (data[0] || data[1]))
  			data++;
 -		if (data - buf < dmi_len - 1)
 +		if (data - buf < len - 1)
  			decode(dm, private_data);
  
+ 		data += 2;
+ 		i++;
+ 
  		/*
  		 * 7.45 End-of-Table (Type 127) [SMBIOS reference spec v3.0.0]
  		 * For tables behind a 64-bit entry point, we have no item
@@@ -132,8 -134,9 +136,13 @@@ static int __init dmi_walk_early(void (
  		void *))
  {
  	u8 *buf;
+ 	u32 orig_dmi_len = dmi_len;
  
++<<<<<<< HEAD
 +	buf = dmi_ioremap(dmi_base, dmi_len);
++=======
+ 	buf = dmi_early_remap(dmi_base, orig_dmi_len);
++>>>>>>> 6e0ad59e3d83 (firmware: dmi_scan: Trim DMI table length before exporting it)
  	if (buf == NULL)
  		return -1;
  
@@@ -141,7 -144,7 +150,11 @@@
  
  	add_device_randomness(buf, dmi_len);
  
++<<<<<<< HEAD
 +	dmi_iounmap(buf, dmi_len);
++=======
+ 	dmi_early_unmap(buf, orig_dmi_len);
++>>>>>>> 6e0ad59e3d83 (firmware: dmi_scan: Trim DMI table length before exporting it)
  	return 0;
  }
  
* Unmerged path drivers/firmware/dmi_scan.c
