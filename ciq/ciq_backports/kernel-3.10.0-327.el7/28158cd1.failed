powerpc/eeh: Enhance pcibios_set_pcie_reset_state()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [powerpc] eeh: Enhance pcibios_set_pcie_reset_state() (Laurent Vivier) [1213675]
Rebuild_FUZZ: 91.49%
commit-author Gavin Shan <gwshan@linux.vnet.ibm.com>
commit 28158cd1b75180343efa7c4d7d2f8e74ccc63b8f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/28158cd1.failed

Function pcibios_set_pcie_reset_state() is possibly called by
pci_reset_function(), on which VFIO infrastructure depends to
issue reset. pcibios_set_pcie_reset_state() is issuing reset
on the parent PE of the indicated PCI device. The reset causes
state lost on all PCI devices except the indicated one as the
argument to pcibios_set_pcie_reset_state(). Also, sideband
MMIO access from guest when issuing reset would cause unexpected
EEH error.

For above two issues, the patch applies following enhancements
to pcibios_set_pcie_reset_state():

   * For all PCI devices except the indicated one, save their
     state prior to reset and restore state after that.
   * Explicitly freeze PE prior to reset and unfreeze it after
     that, in order to avoid unexpected EEH error.

	Tested-by: Priya M. A <priyama2@in.ibm.com>
	Signed-off-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
	Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
(cherry picked from commit 28158cd1b75180343efa7c4d7d2f8e74ccc63b8f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/eeh.c
diff --cc arch/powerpc/kernel/eeh.c
index 6021b67a433c,19a897c810be..000000000000
--- a/arch/powerpc/kernel/eeh.c
+++ b/arch/powerpc/kernel/eeh.c
@@@ -686,14 -738,20 +735,31 @@@ int pcibios_set_pcie_reset_state(struc
  	switch (state) {
  	case pcie_deassert_reset:
  		eeh_ops->reset(pe, EEH_RESET_DEACTIVATE);
++<<<<<<< HEAD
 +		eeh_pe_state_clear(pe, EEH_PE_RESET);
 +		break;
 +	case pcie_hot_reset:
 +		eeh_pe_state_mark(pe, EEH_PE_RESET);
 +		eeh_ops->reset(pe, EEH_RESET_HOT);
 +		break;
 +	case pcie_warm_reset:
 +		eeh_pe_state_mark(pe, EEH_PE_RESET);
++=======
+ 		eeh_unfreeze_pe(pe, false);
+ 		eeh_pe_state_clear(pe, EEH_PE_CFG_BLOCKED);
+ 		eeh_pe_dev_traverse(pe, eeh_restore_dev_state, dev);
+ 		break;
+ 	case pcie_hot_reset:
+ 		eeh_ops->set_option(pe, EEH_OPT_FREEZE_PE);
+ 		eeh_pe_dev_traverse(pe, eeh_disable_and_save_dev_state, dev);
+ 		eeh_pe_state_mark(pe, EEH_PE_CFG_BLOCKED);
+ 		eeh_ops->reset(pe, EEH_RESET_HOT);
+ 		break;
+ 	case pcie_warm_reset:
+ 		eeh_ops->set_option(pe, EEH_OPT_FREEZE_PE);
+ 		eeh_pe_dev_traverse(pe, eeh_disable_and_save_dev_state, dev);
+ 		eeh_pe_state_mark(pe, EEH_PE_CFG_BLOCKED);
++>>>>>>> 28158cd1b751 (powerpc/eeh: Enhance pcibios_set_pcie_reset_state())
  		eeh_ops->reset(pe, EEH_RESET_FUNDAMENTAL);
  		break;
  	default:
* Unmerged path arch/powerpc/kernel/eeh.c
