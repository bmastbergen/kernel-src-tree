ppc64: add paranoid warnings for unexpected DSISR_PROTFAULT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [powerpc] mm: add paranoid warnings for unexpected DSISR_PROTFAULT (Gustavo Duarte) [1217743]
Rebuild_FUZZ: 93.91%
commit-author Mel Gorman <mgorman@suse.de>
commit 842915f56667f9eebd85932f08c79565148c26d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/842915f5.failed

ppc64 should not be depending on DSISR_PROTFAULT and it's unexpected if
they are triggered.  This patch adds warnings just in case they are being
accidentally depended upon.

	Signed-off-by: Mel Gorman <mgorman@suse.de>
	Acked-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
	Tested-by: Sasha Levin <sasha.levin@oracle.com>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Dave Jones <davej@redhat.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Kirill Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Rik van Riel <riel@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 842915f56667f9eebd85932f08c79565148c26d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/mm/fault.c
diff --cc arch/powerpc/mm/fault.c
index e4717afd0967,b396868d2aa7..000000000000
--- a/arch/powerpc/mm/fault.c
+++ b/arch/powerpc/mm/fault.c
@@@ -397,19 -389,6 +397,22 @@@ good_area
  #endif /* CONFIG_8xx */
  
  	if (is_exec) {
++<<<<<<< HEAD
 +#ifdef CONFIG_PPC_STD_MMU
 +		/* Protection fault on exec go straight to failure on
 +		 * Hash based MMUs as they either don't support per-page
 +		 * execute permission, or if they do, it's handled already
 +		 * at the hash level. This test would probably have to
 +		 * be removed if we change the way this works to make hash
 +		 * processors use the same I/D cache coherency mechanism
 +		 * as embedded.
 +		 */
 +		if (error_code & DSISR_PROTFAULT)
 +			goto bad_area;
 +#endif /* CONFIG_PPC_STD_MMU */
 +
++=======
++>>>>>>> 842915f56667 (ppc64: add paranoid warnings for unexpected DSISR_PROTFAULT)
  		/*
  		 * Allow execution from readable areas if the MMU does not
  		 * provide separate controls over reading and executing.
@@@ -428,13 -415,12 +439,14 @@@
  	} else if (is_write) {
  		if (!(vma->vm_flags & VM_WRITE))
  			goto bad_area;
 -		flags |= FAULT_FLAG_WRITE;
  	/* a read */
  	} else {
 +		/* protection fault */
 +		if (error_code & 0x08000000)
 +			goto bad_area;
  		if (!(vma->vm_flags & (VM_READ | VM_EXEC | VM_WRITE)))
  			goto bad_area;
+ 		WARN_ON_ONCE(error_code & DSISR_PROTFAULT);
  	}
  
  	/*
diff --git a/arch/powerpc/mm/copro_fault.c b/arch/powerpc/mm/copro_fault.c
index a15a23efc0e2..aa7a7117065d 100644
--- a/arch/powerpc/mm/copro_fault.c
+++ b/arch/powerpc/mm/copro_fault.c
@@ -62,10 +62,14 @@ int copro_handle_mm_fault(struct mm_struct *mm, unsigned long ea,
 		if (!(vma->vm_flags & VM_WRITE))
 			goto out_unlock;
 	} else {
-		if (dsisr & DSISR_PROTFAULT)
-			goto out_unlock;
 		if (!(vma->vm_flags & (VM_READ | VM_EXEC)))
 			goto out_unlock;
+		/*
+		 * protfault should only happen due to us
+		 * mapping a region readonly temporarily. PROT_NONE
+		 * is also covered by the VMA check above.
+		 */
+		WARN_ON_ONCE(dsisr & DSISR_PROTFAULT);
 	}
 
 	ret = 0;
* Unmerged path arch/powerpc/mm/fault.c
