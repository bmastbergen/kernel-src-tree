virtio_scsi: export to userspace

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] virtio-scsi: export to userspace (Jason Wang) [1227339]
Rebuild_FUZZ: 96.88%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit fba7f020e80d59a90d6135b0965cd488cc86f695
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/fba7f020.failed

Replace uXX by __uXX and _packed by __attribute((packed))
as seems to be the norm for userspace headers.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Acked-by: Paolo Bonzini <pbonzini@redhat.com>




(cherry picked from commit fba7f020e80d59a90d6135b0965cd488cc86f695)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/Kbuild
#	include/uapi/linux/virtio_scsi.h
diff --cc include/uapi/linux/Kbuild
index 5343cdd0a585,2e8fd10f0299..000000000000
--- a/include/uapi/linux/Kbuild
+++ b/include/uapi/linux/Kbuild
@@@ -413,6 -428,8 +413,11 @@@ header-y += virtio_net.
  header-y += virtio_pci.h
  header-y += virtio_ring.h
  header-y += virtio_rng.h
++<<<<<<< HEAD
++=======
+ header-y += virtio_scsi.h
+ header-y += vm_sockets.h
++>>>>>>> fba7f020e80d (virtio_scsi: export to userspace)
  header-y += vt.h
  header-y += wait.h
  header-y += wanrouter.h
diff --cc include/uapi/linux/virtio_scsi.h
index 4195b97a3def,42b9370771b0..000000000000
--- a/include/uapi/linux/virtio_scsi.h
+++ b/include/uapi/linux/virtio_scsi.h
@@@ -32,66 -34,78 +32,124 @@@
  
  /* SCSI command request, followed by data-out */
  struct virtio_scsi_cmd_req {
++<<<<<<< HEAD
 +	u8 lun[8];		/* Logical Unit Number */
 +	u64 tag;		/* Command identifier */
 +	u8 task_attr;		/* Task attribute */
 +	u8 prio;
 +	u8 crn;
 +	u8 cdb[VIRTIO_SCSI_CDB_SIZE];
 +} __packed;
 +
 +/* Response, followed by sense data and data-in */
 +struct virtio_scsi_cmd_resp {
 +	u32 sense_len;		/* Sense data length */
 +	u32 resid;		/* Residual bytes in data buffer */
 +	u16 status_qualifier;	/* Status qualifier */
 +	u8 status;		/* Command completion status */
 +	u8 response;		/* Response values */
 +	u8 sense[VIRTIO_SCSI_SENSE_SIZE];
 +} __packed;
 +
 +/* Task Management Request */
 +struct virtio_scsi_ctrl_tmf_req {
 +	u32 type;
 +	u32 subtype;
 +	u8 lun[8];
 +	u64 tag;
 +} __packed;
++=======
+ 	__u8 lun[8];		/* Logical Unit Number */
+ 	__virtio64 tag;		/* Command identifier */
+ 	__u8 task_attr;		/* Task attribute */
+ 	__u8 prio;		/* SAM command priority field */
+ 	__u8 crn;
+ 	__u8 cdb[VIRTIO_SCSI_CDB_SIZE];
+ } __attribute__((packed));
+ 
+ /* SCSI command request, followed by protection information */
+ struct virtio_scsi_cmd_req_pi {
+ 	__u8 lun[8];		/* Logical Unit Number */
+ 	__virtio64 tag;		/* Command identifier */
+ 	__u8 task_attr;		/* Task attribute */
+ 	__u8 prio;		/* SAM command priority field */
+ 	__u8 crn;
+ 	__virtio32 pi_bytesout;	/* DataOUT PI Number of bytes */
+ 	__virtio32 pi_bytesin;		/* DataIN PI Number of bytes */
+ 	__u8 cdb[VIRTIO_SCSI_CDB_SIZE];
+ } __attribute__((packed));
+ 
+ /* Response, followed by sense data and data-in */
+ struct virtio_scsi_cmd_resp {
+ 	__virtio32 sense_len;		/* Sense data length */
+ 	__virtio32 resid;		/* Residual bytes in data buffer */
+ 	__virtio16 status_qualifier;	/* Status qualifier */
+ 	__u8 status;		/* Command completion status */
+ 	__u8 response;		/* Response values */
+ 	__u8 sense[VIRTIO_SCSI_SENSE_SIZE];
+ } __attribute__((packed));
+ 
+ /* Task Management Request */
+ struct virtio_scsi_ctrl_tmf_req {
+ 	__virtio32 type;
+ 	__virtio32 subtype;
+ 	__u8 lun[8];
+ 	__virtio64 tag;
+ } __attribute__((packed));
++>>>>>>> fba7f020e80d (virtio_scsi: export to userspace)
  
  struct virtio_scsi_ctrl_tmf_resp {
- 	u8 response;
- } __packed;
+ 	__u8 response;
+ } __attribute__((packed));
  
  /* Asynchronous notification query/subscription */
  struct virtio_scsi_ctrl_an_req {
++<<<<<<< HEAD
 +	u32 type;
 +	u8 lun[8];
 +	u32 event_requested;
 +} __packed;
 +
 +struct virtio_scsi_ctrl_an_resp {
 +	u32 event_actual;
 +	u8 response;
 +} __packed;
 +
 +struct virtio_scsi_event {
 +	u32 event;
 +	u8 lun[8];
 +	u32 reason;
 +} __packed;
++=======
+ 	__virtio32 type;
+ 	__u8 lun[8];
+ 	__virtio32 event_requested;
+ } __attribute__((packed));
+ 
+ struct virtio_scsi_ctrl_an_resp {
+ 	__virtio32 event_actual;
+ 	__u8 response;
+ } __attribute__((packed));
+ 
+ struct virtio_scsi_event {
+ 	__virtio32 event;
+ 	__u8 lun[8];
+ 	__virtio32 reason;
+ } __attribute__((packed));
++>>>>>>> fba7f020e80d (virtio_scsi: export to userspace)
  
  struct virtio_scsi_config {
- 	u32 num_queues;
- 	u32 seg_max;
- 	u32 max_sectors;
- 	u32 cmd_per_lun;
- 	u32 event_info_size;
- 	u32 sense_size;
- 	u32 cdb_size;
- 	u16 max_channel;
- 	u16 max_target;
- 	u32 max_lun;
- } __packed;
+ 	__u32 num_queues;
+ 	__u32 seg_max;
+ 	__u32 max_sectors;
+ 	__u32 cmd_per_lun;
+ 	__u32 event_info_size;
+ 	__u32 sense_size;
+ 	__u32 cdb_size;
+ 	__u16 max_channel;
+ 	__u16 max_target;
+ 	__u32 max_lun;
+ } __attribute__((packed));
  
  /* Feature Bits */
  #define VIRTIO_SCSI_F_INOUT                    0
* Unmerged path include/uapi/linux/Kbuild
* Unmerged path include/uapi/linux/virtio_scsi.h
