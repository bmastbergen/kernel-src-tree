fanotify: fix -EOVERFLOW with large files on 64-bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Will Woods <wwoods@redhat.com>
commit 1e2ee49f7f1b79f0b14884fe6a602f0411b39552
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/1e2ee49f.failed

On 64-bit systems, O_LARGEFILE is automatically added to flags inside
the open() syscall (also openat(), blkdev_open(), etc).  Userspace
therefore defines O_LARGEFILE to be 0 - you can use it, but it's a
no-op.  Everything should be O_LARGEFILE by default.

But: when fanotify does create_fd() it uses dentry_open(), which skips
all that.  And userspace can't set O_LARGEFILE in fanotify_init()
because it's defined to 0.  So if fanotify gets an event regarding a
large file, the read() will just fail with -EOVERFLOW.

This patch adds O_LARGEFILE to fanotify_init()'s event_f_flags on 64-bit
systems, using the same test as open()/openat()/etc.

Addresses https://bugzilla.redhat.com/show_bug.cgi?id=696821

	Signed-off-by: Will Woods <wwoods@redhat.com>
	Acked-by: Eric Paris <eparis@redhat.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1e2ee49f7f1b79f0b14884fe6a602f0411b39552)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/notify/fanotify/fanotify_user.c
diff --cc fs/notify/fanotify/fanotify_user.c
index f1680cdbd88b,732648b270dc..000000000000
--- a/fs/notify/fanotify/fanotify_user.c
+++ b/fs/notify/fanotify/fanotify_user.c
@@@ -706,9 -691,18 +706,21 @@@ SYSCALL_DEFINE2(fanotify_init, unsigne
  	group->fanotify_data.user = user;
  	atomic_inc(&user->fanotify_listeners);
  
++<<<<<<< HEAD
++=======
+ 	oevent = fanotify_alloc_event(NULL, FS_Q_OVERFLOW, NULL);
+ 	if (unlikely(!oevent)) {
+ 		fd = -ENOMEM;
+ 		goto out_destroy_group;
+ 	}
+ 	group->overflow_event = &oevent->fse;
+ 
+ 	if (force_o_largefile())
+ 		event_f_flags |= O_LARGEFILE;
++>>>>>>> 1e2ee49f7f1b (fanotify: fix -EOVERFLOW with large files on 64-bit)
  	group->fanotify_data.f_flags = event_f_flags;
  #ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
 -	spin_lock_init(&group->fanotify_data.access_lock);
 +	mutex_init(&group->fanotify_data.access_mutex);
  	init_waitqueue_head(&group->fanotify_data.access_waitq);
  	INIT_LIST_HEAD(&group->fanotify_data.access_list);
  	atomic_set(&group->fanotify_data.bypass_perm, 0);
* Unmerged path fs/notify/fanotify/fanotify_user.c
