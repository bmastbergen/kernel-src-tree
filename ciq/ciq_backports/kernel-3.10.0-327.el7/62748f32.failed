net: introduce SO_MAX_PACING_RATE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] introduce SO_MAX_PACING_RATE (Sabrina Dubroca) [1235100]
Rebuild_FUZZ: 91.80%
commit-author Eric Dumazet <edumazet@google.com>
commit 62748f32d501f5d3712a7c372bbb92abc7c62bc7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/62748f32.failed

As mentioned in commit afe4fd062416b ("pkt_sched: fq: Fair Queue packet
scheduler"), this patch adds a new socket option.

SO_MAX_PACING_RATE offers the application the ability to cap the
rate computed by transport layer. Value is in bytes per second.

u32 val = 1000000;
setsockopt(sockfd, SOL_SOCKET, SO_MAX_PACING_RATE, &val, sizeof(val));

To be effectively paced, a flow must use FQ packet scheduler.

Note that a packet scheduler takes into account the headers for its
computations. The effective payload rate depends on MSS and retransmits
if any.

I chose to make this pacing rate a SOL_SOCKET option instead of a
TCP one because this can be used by other protocols.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Steinar H. Gunderson <sesse@google.com>
	Cc: Michael Kerrisk <mtk.manpages@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 62748f32d501f5d3712a7c372bbb92abc7c62bc7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/alpha/include/uapi/asm/socket.h
#	arch/avr32/include/uapi/asm/socket.h
#	arch/cris/include/uapi/asm/socket.h
#	arch/frv/include/uapi/asm/socket.h
#	arch/h8300/include/uapi/asm/socket.h
#	arch/ia64/include/uapi/asm/socket.h
#	arch/m32r/include/uapi/asm/socket.h
#	arch/mips/include/uapi/asm/socket.h
#	arch/mn10300/include/uapi/asm/socket.h
#	arch/parisc/include/uapi/asm/socket.h
#	arch/powerpc/include/uapi/asm/socket.h
#	arch/s390/include/uapi/asm/socket.h
#	arch/sparc/include/uapi/asm/socket.h
#	arch/xtensa/include/uapi/asm/socket.h
#	include/uapi/asm-generic/socket.h
#	net/core/sock.c
diff --cc arch/alpha/include/uapi/asm/socket.h
index eee6ea76bdaf,e3a1491d5073..000000000000
--- a/arch/alpha/include/uapi/asm/socket.h
+++ b/arch/alpha/include/uapi/asm/socket.h
@@@ -81,4 -81,8 +81,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/avr32/include/uapi/asm/socket.h
index 37401f535126,439936421434..000000000000
--- a/arch/avr32/include/uapi/asm/socket.h
+++ b/arch/avr32/include/uapi/asm/socket.h
@@@ -74,4 -74,8 +74,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* __ASM_AVR32_SOCKET_H */
diff --cc arch/cris/include/uapi/asm/socket.h
index ba409c9947bc,13829aaaeec5..000000000000
--- a/arch/cris/include/uapi/asm/socket.h
+++ b/arch/cris/include/uapi/asm/socket.h
@@@ -76,6 -76,10 +76,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _ASM_SOCKET_H */
  
  
diff --cc arch/frv/include/uapi/asm/socket.h
index 31dbb5d8e13d,5d4299762426..000000000000
--- a/arch/frv/include/uapi/asm/socket.h
+++ b/arch/frv/include/uapi/asm/socket.h
@@@ -74,5 -74,9 +74,12 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _ASM_SOCKET_H */
  
diff --cc arch/h8300/include/uapi/asm/socket.h
index 5d1c6d0870e6,214ccaf3554a..000000000000
--- a/arch/h8300/include/uapi/asm/socket.h
+++ b/arch/h8300/include/uapi/asm/socket.h
@@@ -74,4 -74,8 +74,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _ASM_SOCKET_H */
diff --cc arch/ia64/include/uapi/asm/socket.h
index 6b4329f18b29,c25302fb48d9..000000000000
--- a/arch/ia64/include/uapi/asm/socket.h
+++ b/arch/ia64/include/uapi/asm/socket.h
@@@ -83,4 -83,8 +83,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _ASM_IA64_SOCKET_H */
diff --cc arch/m32r/include/uapi/asm/socket.h
index 2a3b59e0e171,52966650114f..000000000000
--- a/arch/m32r/include/uapi/asm/socket.h
+++ b/arch/m32r/include/uapi/asm/socket.h
@@@ -74,4 -74,8 +74,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _ASM_M32R_SOCKET_H */
diff --cc arch/mips/include/uapi/asm/socket.h
index 3b211507be7f,0df9787cd84d..000000000000
--- a/arch/mips/include/uapi/asm/socket.h
+++ b/arch/mips/include/uapi/asm/socket.h
@@@ -92,4 -92,8 +92,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/mn10300/include/uapi/asm/socket.h
index b4ce844c9391,71dedcae55a6..000000000000
--- a/arch/mn10300/include/uapi/asm/socket.h
+++ b/arch/mn10300/include/uapi/asm/socket.h
@@@ -74,4 -74,8 +74,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif /* _ASM_SOCKET_H */
diff --cc arch/parisc/include/uapi/asm/socket.h
index 4fecb26230e7,7c614d01f1fa..000000000000
--- a/arch/parisc/include/uapi/asm/socket.h
+++ b/arch/parisc/include/uapi/asm/socket.h
@@@ -73,4 -73,13 +73,17 @@@
  
  #define SO_SELECT_ERR_QUEUE	0x4026
  
++<<<<<<< HEAD
 +#endif /* _UAPI_ASM_SOCKET_H */
++=======
+ #define SO_BUSY_POLL		0x4027
+ 
+ #define SO_MAX_PACING_RATE	0x4048
+ 
+ /* O_NONBLOCK clashes with the bits used for socket types.  Therefore we
+  * have to define SOCK_NONBLOCK to a different value here.
+  */
+ #define SOCK_NONBLOCK   0x40000000
+ 
+ #endif /* _ASM_SOCKET_H */
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
diff --cc arch/powerpc/include/uapi/asm/socket.h
index 4bef0e7d1b87,fa698324a1fd..000000000000
--- a/arch/powerpc/include/uapi/asm/socket.h
+++ b/arch/powerpc/include/uapi/asm/socket.h
@@@ -83,6 -83,6 +83,10 @@@
  
  #define SO_BUSY_POLL		46
  
++<<<<<<< HEAD
 +#define SO_BPF_EXTENSIONS	48
++=======
+ #define SO_MAX_PACING_RATE	47
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  
  #endif	/* _ASM_POWERPC_SOCKET_H */
diff --cc arch/s390/include/uapi/asm/socket.h
index a9aab287e03c,c286c2e868f0..000000000000
--- a/arch/s390/include/uapi/asm/socket.h
+++ b/arch/s390/include/uapi/asm/socket.h
@@@ -82,6 -82,6 +82,10 @@@
  
  #define SO_BUSY_POLL		46
  
++<<<<<<< HEAD
 +#define SO_BPF_EXTENSIONS	48
++=======
+ #define SO_MAX_PACING_RATE	47
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  
  #endif /* _ASM_SOCKET_H */
diff --cc arch/sparc/include/uapi/asm/socket.h
index 89f49b68a21c,0f21e9a5ca18..000000000000
--- a/arch/sparc/include/uapi/asm/socket.h
+++ b/arch/sparc/include/uapi/asm/socket.h
@@@ -70,6 -70,10 +70,13 @@@
  
  #define SO_SELECT_ERR_QUEUE	0x0029
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		0x0030
+ 
+ #define SO_MAX_PACING_RATE	0x0031
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  /* Security levels - as per NRL IPv6 - don't actually do anything */
  #define SO_SECURITY_AUTHENTICATION		0x5001
  #define SO_SECURITY_ENCRYPTION_TRANSPORT	0x5002
diff --cc arch/xtensa/include/uapi/asm/socket.h
index a8f44f50e651,7db5c22faa68..000000000000
--- a/arch/xtensa/include/uapi/asm/socket.h
+++ b/arch/xtensa/include/uapi/asm/socket.h
@@@ -85,4 -85,8 +85,11 @@@
  
  #define SO_SELECT_ERR_QUEUE	45
  
++<<<<<<< HEAD
++=======
+ #define SO_BUSY_POLL		46
+ 
+ #define SO_MAX_PACING_RATE	47
+ 
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  #endif	/* _XTENSA_SOCKET_H */
diff --cc include/uapi/asm-generic/socket.h
index df71cc9df786,38f14d0264c3..000000000000
--- a/include/uapi/asm-generic/socket.h
+++ b/include/uapi/asm-generic/socket.h
@@@ -78,6 -78,6 +78,10 @@@
  
  #define SO_BUSY_POLL		46
  
++<<<<<<< HEAD
 +#define SO_BPF_EXTENSIONS	48
++=======
+ #define SO_MAX_PACING_RATE	47
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  
  #endif /* __ASM_GENERIC_SOCKET_H */
diff --cc net/core/sock.c
index 2705bfcdedd8,2bd9b3faa0d0..000000000000
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@@ -2297,7 -2330,7 +2308,11 @@@ void sock_init_data(struct socket *sock
  	sk->sk_ll_usec		=	sysctl_net_busy_read;
  #endif
  
++<<<<<<< HEAD
 +	sk->sk_pacing_rate = ~0U;
++=======
+ 	sk->sk_max_pacing_rate = ~0U;
++>>>>>>> 62748f32d501 (net: introduce SO_MAX_PACING_RATE)
  	/*
  	 * Before updating sk_refcnt, we must commit prior changes to memory
  	 * (Documentation/RCU/rculist_nulls.txt for details)
* Unmerged path arch/alpha/include/uapi/asm/socket.h
* Unmerged path arch/avr32/include/uapi/asm/socket.h
* Unmerged path arch/cris/include/uapi/asm/socket.h
* Unmerged path arch/frv/include/uapi/asm/socket.h
* Unmerged path arch/h8300/include/uapi/asm/socket.h
* Unmerged path arch/ia64/include/uapi/asm/socket.h
* Unmerged path arch/m32r/include/uapi/asm/socket.h
* Unmerged path arch/mips/include/uapi/asm/socket.h
* Unmerged path arch/mn10300/include/uapi/asm/socket.h
* Unmerged path arch/parisc/include/uapi/asm/socket.h
* Unmerged path arch/powerpc/include/uapi/asm/socket.h
* Unmerged path arch/s390/include/uapi/asm/socket.h
* Unmerged path arch/sparc/include/uapi/asm/socket.h
* Unmerged path arch/xtensa/include/uapi/asm/socket.h
diff --git a/include/net/sock.h b/include/net/sock.h
index a7480947869a..b66a5330e2c7 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -385,6 +385,7 @@ struct sock {
 	int			sk_wmem_queued;
 	gfp_t			sk_allocation;
 	u32			sk_pacing_rate; /* bytes per second */
+	u32			sk_max_pacing_rate;
 	netdev_features_t	sk_route_caps;
 	netdev_features_t	sk_route_nocaps;
 	int			sk_gso_type;
* Unmerged path include/uapi/asm-generic/socket.h
* Unmerged path net/core/sock.c
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index ef845c96b4d4..ecd9bea1cd2d 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -763,7 +763,7 @@ static void tcp_update_pacing_rate(struct sock *sk)
 	if (tp->srtt > 8 + 2)
 		do_div(rate, tp->srtt);
 
-	sk->sk_pacing_rate = min_t(u64, rate, ~0U);
+	sk->sk_pacing_rate = min_t(u64, rate, sk->sk_max_pacing_rate);
 }
 
 /* Calculate rto without backoff.  This is the second half of Van Jacobson's
