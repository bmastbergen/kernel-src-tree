virtio: make VIRTIO_F_VERSION_1 a transport bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] make VIRTIO_F_VERSION_1 a transport bit (Jason Wang) [1227339]
Rebuild_FUZZ: 90.70%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 747ae34a6ef681fbd993be214d8c0a30bd4a2fda
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/747ae34a.failed

Activate VIRTIO_F_VERSION_1 automatically unless legacy_only
is set.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>




(cherry picked from commit 747ae34a6ef681fbd993be214d8c0a30bd4a2fda)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio.c
diff --cc drivers/virtio/virtio.c
index ee59b74768d9,fa6b75db5f1f..000000000000
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@@ -119,19 -177,39 +119,43 @@@ static int virtio_dev_probe(struct devi
  	/* Figure out what features the device supports. */
  	device_features = dev->config->get_features(dev);
  
 -	/* Figure out what features the driver supports. */
 -	driver_features = 0;
 +	/* Features supported by both device and driver into dev->features. */
 +	memset(dev->features, 0, sizeof(dev->features));
  	for (i = 0; i < drv->feature_table_size; i++) {
  		unsigned int f = drv->feature_table[i];
 -		BUG_ON(f >= 64);
 -		driver_features |= (1ULL << f);
 +		BUG_ON(f >= 32);
 +		if (device_features & (1 << f))
 +			set_bit(f, dev->features);
  	}
  
++<<<<<<< HEAD
++=======
+ 	/* Some drivers have a separate feature table for virtio v1.0 */
+ 	if (drv->feature_table_legacy) {
+ 		driver_features_legacy = 0;
+ 		for (i = 0; i < drv->feature_table_size_legacy; i++) {
+ 			unsigned int f = drv->feature_table_legacy[i];
+ 			BUG_ON(f >= 64);
+ 			driver_features_legacy |= (1ULL << f);
+ 		}
+ 	} else {
+ 		driver_features_legacy = driver_features;
+ 	}
+ 
+ 	/* Detect legacy-only drivers and disable VIRTIO_F_VERSION_1. */
+ 	if (drv->legacy_only)
+ 		device_features &= ~(1ULL << VIRTIO_F_VERSION_1);
+ 
+ 	if (device_features & (1ULL << VIRTIO_F_VERSION_1))
+ 		dev->features = driver_features & device_features;
+ 	else
+ 		dev->features = driver_features_legacy & device_features;
+ 
++>>>>>>> 747ae34a6ef6 (virtio: make VIRTIO_F_VERSION_1 a transport bit)
  	/* Transport features always preserved to pass to finalize_features. */
  	for (i = VIRTIO_TRANSPORT_F_START; i < VIRTIO_TRANSPORT_F_END; i++)
 -		if (device_features & (1ULL << i))
 -			__virtio_set_bit(dev, i);
 +		if (device_features & (1 << i))
 +			set_bit(i, dev->features);
  
  	dev->config->finalize_features(dev);
  
* Unmerged path drivers/virtio/virtio.c
diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index 7f4706f2ab2a..06f32bfaf225 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -811,6 +811,8 @@ void vring_transport_features(struct virtio_device *vdev)
 			break;
 		case VIRTIO_RING_F_EVENT_IDX:
 			break;
+		case VIRTIO_F_VERSION_1:
+			break;
 		default:
 			/* We don't understand this bit. */
 			clear_bit(i, vdev->features);
diff --git a/include/uapi/linux/virtio_config.h b/include/uapi/linux/virtio_config.h
index 3ce768c6910d..bc5c3be8f2d0 100644
--- a/include/uapi/linux/virtio_config.h
+++ b/include/uapi/linux/virtio_config.h
@@ -41,11 +41,11 @@
 /* We've given up on this device. */
 #define VIRTIO_CONFIG_S_FAILED		0x80
 
-/* Some virtio feature bits (currently bits 28 through 31) are reserved for the
+/* Some virtio feature bits (currently bits 28 through 32) are reserved for the
  * transport being used (eg. virtio_ring), the rest are per-device feature
  * bits. */
 #define VIRTIO_TRANSPORT_F_START	28
-#define VIRTIO_TRANSPORT_F_END		32
+#define VIRTIO_TRANSPORT_F_END		33
 
 /* Do we get callbacks when the ring is completely used, even if we've
  * suppressed them? */
