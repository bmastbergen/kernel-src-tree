md: don't return 0 from array_state_store

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [md] don't return 0 from array_state_store (Jes Sorensen) [1173510 1231997]
Rebuild_FUZZ: 94.87%
commit-author NeilBrown <neilb@suse.de>
commit c008f1d356277a5b7561040596a073d87e56b0c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/c008f1d3.failed

Returning zero from a 'store' function is bad.
The return value should be either len length of the string
or an error.

So use 'len' if 'err' is zero.

Fixes: 6791875e2e53 ("md: make reconfig_mutex optional for writes to md sysfs files.")
	Signed-off-by: NeilBrown <neilb@suse.de>
	Cc: stable@vger.kernel (v4.0+)
(cherry picked from commit c008f1d356277a5b7561040596a073d87e56b0c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
diff --cc drivers/md/md.c
index 12c52aceb5eb,dd59d71ade2f..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -3862,8 -3807,39 +3862,42 @@@ static int restart_array(struct mddev *
  static ssize_t
  array_state_store(struct mddev *mddev, const char *buf, size_t len)
  {
 -	int err;
 +	int err = -EINVAL;
  	enum array_state st = match_word(buf, array_states);
++<<<<<<< HEAD
++=======
+ 
+ 	if (mddev->pers && (st == active || st == clean) && mddev->ro != 1) {
+ 		/* don't take reconfig_mutex when toggling between
+ 		 * clean and active
+ 		 */
+ 		spin_lock(&mddev->lock);
+ 		if (st == active) {
+ 			restart_array(mddev);
+ 			clear_bit(MD_CHANGE_PENDING, &mddev->flags);
+ 			wake_up(&mddev->sb_wait);
+ 			err = 0;
+ 		} else /* st == clean */ {
+ 			restart_array(mddev);
+ 			if (atomic_read(&mddev->writes_pending) == 0) {
+ 				if (mddev->in_sync == 0) {
+ 					mddev->in_sync = 1;
+ 					if (mddev->safemode == 1)
+ 						mddev->safemode = 0;
+ 					set_bit(MD_CHANGE_CLEAN, &mddev->flags);
+ 				}
+ 				err = 0;
+ 			} else
+ 				err = -EBUSY;
+ 		}
+ 		spin_unlock(&mddev->lock);
+ 		return err ?: len;
+ 	}
+ 	err = mddev_lock(mddev);
+ 	if (err)
+ 		return err;
+ 	err = -EINVAL;
++>>>>>>> c008f1d35627 (md: don't return 0 from array_state_store)
  	switch(st) {
  	case bad_word:
  		break;
* Unmerged path drivers/md/md.c
