bonding: convert netlink to use slave data info api

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jiri Pirko <jiri@resnulli.us>
commit 3bad540ed8285fb53f6365420bba0320d8cd2066
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3bad540e.failed

	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3bad540ed8285fb53f6365420bba0320d8cd2066)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,70651f8e8e3b..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -20,6 -21,57 +20,60 @@@
  #include <net/rtnetlink.h>
  #include "bonding.h"
  
++<<<<<<< HEAD
++=======
+ static size_t bond_get_slave_size(const struct net_device *bond_dev,
+ 				  const struct net_device *slave_dev)
+ {
+ 	return nla_total_size(sizeof(u8)) +	/* IFLA_BOND_SLAVE_STATE */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_SLAVE_MII_STATUS */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_SLAVE_LINK_FAILURE_COUNT */
+ 		nla_total_size(MAX_ADDR_LEN) +	/* IFLA_BOND_SLAVE_PERM_HWADDR */
+ 		nla_total_size(sizeof(u16)) +	/* IFLA_BOND_SLAVE_QUEUE_ID */
+ 		nla_total_size(sizeof(u16)) +	/* IFLA_BOND_SLAVE_AD_AGGREGATOR_ID */
+ 		0;
+ }
+ 
+ static int bond_fill_slave_info(struct sk_buff *skb,
+ 				const struct net_device *bond_dev,
+ 				const struct net_device *slave_dev)
+ {
+ 	struct slave *slave = bond_slave_get_rtnl(slave_dev);
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_SLAVE_STATE, bond_slave_state(slave)))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_SLAVE_MII_STATUS, slave->link))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_SLAVE_LINK_FAILURE_COUNT,
+ 			slave->link_failure_count))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put(skb, IFLA_BOND_SLAVE_PERM_HWADDR,
+ 		    slave_dev->addr_len, slave->perm_hwaddr))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u16(skb, IFLA_BOND_SLAVE_QUEUE_ID, slave->queue_id))
+ 		goto nla_put_failure;
+ 
+ 	if (slave->bond->params.mode == BOND_MODE_8023AD) {
+ 		const struct aggregator *agg;
+ 
+ 		agg = SLAVE_AD_INFO(slave).port.aggregator;
+ 		if (agg)
+ 			if (nla_put_u16(skb, IFLA_BOND_SLAVE_AD_AGGREGATOR_ID,
+ 					agg->aggregator_identifier))
+ 				goto nla_put_failure;
+ 	}
+ 
+ 	return 0;
+ 
+ nla_put_failure:
+ 	return -EMSGSIZE;
+ }
+ 
++>>>>>>> 3bad540ed828 (bonding: convert netlink to use slave data info api)
  static const struct nla_policy bond_policy[IFLA_BOND_MAX + 1] = {
  	[IFLA_BOND_MODE]		= { .type = NLA_U8 },
  	[IFLA_BOND_ACTIVE_SLAVE]	= { .type = NLA_U32 },
diff --cc drivers/net/bonding/bonding.h
index 64c0cb81e478,1a9062f4e0d6..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -415,15 -432,13 +415,19 @@@ int bond_create(struct net *net, const 
  int bond_create_sysfs(struct bond_net *net);
  void bond_destroy_sysfs(struct bond_net *net);
  void bond_prepare_sysfs_group(struct bonding *bond);
 -int bond_sysfs_slave_add(struct slave *slave);
 -void bond_sysfs_slave_del(struct slave *slave);
 +int bond_create_slave_symlinks(struct net_device *master, struct net_device *slave);
 +void bond_destroy_slave_symlinks(struct net_device *master, struct net_device *slave);
  int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev);
  int bond_release(struct net_device *bond_dev, struct net_device *slave_dev);
++<<<<<<< HEAD
 +void bond_mii_monitor(struct work_struct *);
 +void bond_loadbalance_arp_mon(struct work_struct *);
 +void bond_activebackup_arp_mon(struct work_struct *);
 +void bond_set_mode_ops(struct bonding *bond, int mode);
++=======
+ int bond_xmit_hash(struct bonding *bond, struct sk_buff *skb, int count);
++>>>>>>> 3bad540ed828 (bonding: convert netlink to use slave data info api)
  int bond_parse_parm(const char *mode_arg, const struct bond_parm_tbl *tbl);
 -int bond_parm_tbl_lookup(int mode, const struct bond_parm_tbl *tbl);
  void bond_select_active_slave(struct bonding *bond);
  void bond_change_active_slave(struct bonding *bond, struct slave *new_active);
  void bond_create_debugfs(void);
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bonding.h
