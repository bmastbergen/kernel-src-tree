panic: add TAINT_SOFTLOCKUP

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Josh Hunt <johunt@akamai.com>
commit 69361eef9056b0babb507798c2135ad1572f0ef7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/69361eef.failed

This taint flag will be set if the system has ever entered a softlockup
state.  Similar to TAINT_WARN it is useful to know whether or not the
system has been in a softlockup state when debugging.

[akpm@linux-foundation.org: apply the taint before calling panic()]
	Signed-off-by: Josh Hunt <johunt@akamai.com>
	Cc: Jason Baron <jbaron@akamai.com>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 69361eef9056b0babb507798c2135ad1572f0ef7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/oops-tracing.txt
#	Documentation/sysctl/kernel.txt
#	include/linux/kernel.h
#	kernel/panic.c
#	kernel/watchdog.c
diff --cc Documentation/oops-tracing.txt
index 13032c0140d4,beefb9f82902..000000000000
--- a/Documentation/oops-tracing.txt
+++ b/Documentation/oops-tracing.txt
@@@ -265,6 -265,11 +265,14 @@@ characters, each representing a particu
  
   13: 'O' if an externally-built ("out-of-tree") module has been loaded.
  
++<<<<<<< HEAD
++=======
+  14: 'E' if an unsigned module has been loaded in a kernel supporting
+      module signature.
+ 
+  15: 'L' if a soft lockup has previously occurred on the system.
+ 
++>>>>>>> 69361eef9056 (panic: add TAINT_SOFTLOCKUP)
  The primary reason for the 'Tainted: ' string is to tell kernel
  debuggers if this is a clean kernel or if anything unusual has
  occurred.  Tainting is permanent: even if an offending module is
diff --cc Documentation/sysctl/kernel.txt
index 04a405ea32da,f79eb9666379..000000000000
--- a/Documentation/sysctl/kernel.txt
+++ b/Documentation/sysctl/kernel.txt
@@@ -768,6 -824,9 +768,12 @@@ can be ORed together
  1024 - A module from drivers/staging was loaded.
  2048 - The system is working around a severe firmware bug.
  4096 - An out-of-tree module has been loaded.
++<<<<<<< HEAD
++=======
+ 8192 - An unsigned module has been loaded in a kernel supporting module
+        signature.
+ 16384 - A soft lockup has previously occurred on the system.
++>>>>>>> 69361eef9056 (panic: add TAINT_SOFTLOCKUP)
  
  ==============================================================
  
diff --cc include/linux/kernel.h
index 69701437f09a,31ae66f34235..000000000000
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@@ -469,29 -469,8 +469,34 @@@ extern enum system_states 
  #define TAINT_CRAP			10
  #define TAINT_FIRMWARE_WORKAROUND	11
  #define TAINT_OOT_MODULE		12
++<<<<<<< HEAD
 +#define TAINT_13			13
 +#define TAINT_14			14
 +#define TAINT_15			15
 +#define TAINT_16			16
 +#define TAINT_17			17
 +#define TAINT_18			18
 +#define TAINT_19			19
 +#define TAINT_20			20
 +#define TAINT_21			21
 +#define TAINT_22			22
 +#define TAINT_23			23
 +#define TAINT_24			24
 +#define TAINT_25			25
 +#define TAINT_26			26
 +#define TAINT_27			27
 +/* Reserving bits for vendor specific uses */
 +#define TAINT_HARDWARE_UNSUPPORTED	28
 +#define TAINT_TECH_PREVIEW		29
 +/* Bits 30 - 31 are reserved for Red Hat use only */
 +#define TAINT_RESERVED30		30
 +#define TAINT_RESERVED31		31
 +
 +
++=======
+ #define TAINT_UNSIGNED_MODULE		13
+ #define TAINT_SOFTLOCKUP		14
++>>>>>>> 69361eef9056 (panic: add TAINT_SOFTLOCKUP)
  
  extern const char hex_asc[];
  #define hex_asc_lo(x)	hex_asc[((x) & 0x0f)]
diff --cc kernel/panic.c
index 68447f710f29,d09dc5c32c67..000000000000
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@@ -206,23 -223,8 +206,28 @@@ static const struct tnt tnts[] = 
  	{ TAINT_CRAP,			'C', ' ' },
  	{ TAINT_FIRMWARE_WORKAROUND,	'I', ' ' },
  	{ TAINT_OOT_MODULE,		'O', ' ' },
++<<<<<<< HEAD
 +	{ TAINT_14,			'?', '-' },
 +	{ TAINT_15,			'?', '-' },
 +	{ TAINT_16,			'?', '-' },
 +	{ TAINT_17,			'?', '-' },
 +	{ TAINT_18,			'?', '-' },
 +	{ TAINT_19,			'?', '-' },
 +	{ TAINT_20,			'?', '-' },
 +	{ TAINT_21,			'?', '-' },
 +	{ TAINT_22,			'?', '-' },
 +	{ TAINT_23,			'?', '-' },
 +	{ TAINT_24,			'?', '-' },
 +	{ TAINT_25,			'?', '-' },
 +	{ TAINT_26,			'?', '-' },
 +	{ TAINT_27,			'?', '-' },
 +	{ TAINT_HARDWARE_UNSUPPORTED,	'H', ' ' },
 +	{ TAINT_TECH_PREVIEW,		'T', ' ' },
 +
++=======
+ 	{ TAINT_UNSIGNED_MODULE,	'E', ' ' },
+ 	{ TAINT_SOFTLOCKUP,		'L', ' ' },
++>>>>>>> 69361eef9056 (panic: add TAINT_SOFTLOCKUP)
  };
  
  /**
diff --cc kernel/watchdog.c
index 51c4f34d258e,a8d6914030fe..000000000000
--- a/kernel/watchdog.c
+++ b/kernel/watchdog.c
@@@ -323,6 -357,18 +323,21 @@@ static enum hrtimer_restart watchdog_ti
  		else
  			dump_stack();
  
++<<<<<<< HEAD
++=======
+ 		if (softlockup_all_cpu_backtrace) {
+ 			/* Avoid generating two back traces for current
+ 			 * given that one is already made above
+ 			 */
+ 			trigger_allbutself_cpu_backtrace();
+ 
+ 			clear_bit(0, &soft_lockup_nmi_warn);
+ 			/* Barrier to sync with other cpus */
+ 			smp_mb__after_atomic();
+ 		}
+ 
+ 		add_taint(TAINT_SOFTLOCKUP, LOCKDEP_STILL_OK);
++>>>>>>> 69361eef9056 (panic: add TAINT_SOFTLOCKUP)
  		if (softlockup_panic)
  			panic("softlockup: hung tasks");
  		__this_cpu_write(soft_watchdog_warn, true);
* Unmerged path Documentation/oops-tracing.txt
* Unmerged path Documentation/sysctl/kernel.txt
* Unmerged path include/linux/kernel.h
* Unmerged path kernel/panic.c
* Unmerged path kernel/watchdog.c
