ovl: make upperdir optional

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Miklos Szeredi <mszeredi@suse.cz>
commit 53a08cb9b8bccfe58f1228c7c27baf34a83da78b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/53a08cb9.failed

Make "upperdir=" mount option optional.  If "upperdir=" is not given, then
the "workdir=" option is also optional (and ignored if given).

	Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
(cherry picked from commit 53a08cb9b8bccfe58f1228c7c27baf34a83da78b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/super.c
diff --cc fs/overlayfs/super.c
index ab28e68ccbc7,35bb0adf10cf..000000000000
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@@ -658,9 -770,8 +660,14 @@@ static bool ovl_workdir_ok(struct dentr
  static int ovl_fill_super(struct super_block *sb, void *data, int silent)
  {
  	struct path lowerpath;
++<<<<<<< HEAD
 +	struct path upperpath;
 +	struct path workpath;
 +	struct inode *root_inode;
++=======
+ 	struct path upperpath = { NULL, NULL };
+ 	struct path workpath = { NULL, NULL };
++>>>>>>> 53a08cb9b8bc (ovl: make upperdir optional)
  	struct dentry *root_dentry;
  	struct ovl_entry *oe;
  	struct ovl_fs *ufs;
@@@ -686,104 -794,83 +691,159 @@@
  		goto out_free_config;
  	}
  
++<<<<<<< HEAD
 +	err = -ENOMEM;
 +	oe = ovl_alloc_entry();
 +	if (oe == NULL)
 +		goto out_free_config;
 +
 +	err = ovl_mount_dir(ufs->config.upperdir, &upperpath);
 +	if (err)
 +		goto out_free_oe;
 +
 +	err = ovl_mount_dir(ufs->config.lowerdir, &lowerpath);
 +	if (err)
 +		goto out_put_upperpath;
 +
 +	err = ovl_mount_dir(ufs->config.workdir, &workpath);
 +	if (err)
 +		goto out_put_lowerpath;
 +
 +	err = -EINVAL;
 +	if (!S_ISDIR(upperpath.dentry->d_inode->i_mode) ||
 +	    !S_ISDIR(lowerpath.dentry->d_inode->i_mode) ||
 +	    !S_ISDIR(workpath.dentry->d_inode->i_mode)) {
 +		pr_err("overlayfs: upperdir or lowerdir or workdir not a directory\n");
 +		goto out_put_workpath;
 +	}
++=======
+ 	sb->s_stack_depth = 0;
+ 	if (ufs->config.upperdir) {
+ 		/* FIXME: workdir is not needed for a R/O mount */
+ 		if (!ufs->config.workdir) {
+ 			pr_err("overlayfs: missing 'workdir'\n");
+ 			goto out_free_config;
+ 		}
  
- 	if (upperpath.mnt != workpath.mnt) {
- 		pr_err("overlayfs: workdir and upperdir must reside under the same mount\n");
- 		goto out_put_workpath;
+ 		err = ovl_mount_dir(ufs->config.upperdir, &upperpath);
+ 		if (err)
+ 			goto out_free_config;
++>>>>>>> 53a08cb9b8bc (ovl: make upperdir optional)
+ 
+ 		err = ovl_mount_dir(ufs->config.workdir, &workpath);
+ 		if (err)
+ 			goto out_put_upperpath;
+ 
+ 		if (upperpath.mnt != workpath.mnt) {
+ 			pr_err("overlayfs: workdir and upperdir must reside under the same mount\n");
+ 			goto out_put_workpath;
+ 		}
+ 		if (!ovl_workdir_ok(workpath.dentry, upperpath.dentry)) {
+ 			pr_err("overlayfs: workdir and upperdir must be separate subtrees\n");
+ 			goto out_put_workpath;
+ 		}
+ 		sb->s_stack_depth = upperpath.mnt->mnt_sb->s_stack_depth;
  	}
++<<<<<<< HEAD
 +	if (!ovl_workdir_ok(workpath.dentry, upperpath.dentry)) {
 +		pr_err("overlayfs: workdir and upperdir must be separate subtrees\n");
 +		goto out_put_workpath;
 +	}
++=======
++>>>>>>> 53a08cb9b8bc (ovl: make upperdir optional)
  
 -	err = ovl_lower_dir(ufs->config.lowerdir, &lowerpath,
 -			    &ufs->lower_namelen, &sb->s_stack_depth);
 -	if (err)
 +	if (!ovl_is_allowed_fs_type(upperpath.dentry)) {
 +		pr_err("overlayfs: filesystem of upperdir is not supported\n");
 +		goto out_put_workpath;
 +	}
 +
 +	if (!ovl_is_allowed_fs_type(lowerpath.dentry)) {
 +		pr_err("overlayfs: filesystem of lowerdir is not supported\n");
 +		goto out_put_workpath;
 +	}
 +
 +	err = vfs_statfs(&lowerpath, &statfs);
 +	if (err) {
 +		pr_err("overlayfs: statfs failed on lowerpath\n");
  		goto out_put_workpath;
 +	}
 +	ufs->lower_namelen = statfs.f_namelen;
 +
 +	upper_stack_depth = get_s_stack_depth(upperpath.mnt->mnt_sb);
 +	lower_stack_depth = get_s_stack_depth(lowerpath.mnt->mnt_sb);
 +	overlay_stack_depth = get_s_stack_depth(sb);
 +	err = -EOPNOTSUPP;
 +	if (!upper_stack_depth || !lower_stack_depth || !overlay_stack_depth) {
 +		pr_err("overlayfs: superblock missing extension wrapper (old kernel?)\n");
 +		goto out_put_workpath;
 +	}
 +
 +	*overlay_stack_depth = max(*upper_stack_depth, *lower_stack_depth) + 1;
  
  	err = -EINVAL;
 -	sb->s_stack_depth++;
 -	if (sb->s_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
 +	if (*overlay_stack_depth > FILESYSTEM_MAX_STACK_DEPTH) {
  		pr_err("overlayfs: maximum fs stacking depth exceeded\n");
 -		goto out_put_lowerpath;
 +		goto out_put_workpath;
  	}
  
++<<<<<<< HEAD
 +	ufs->upper_mnt = clone_private_mount(&upperpath);
 +	err = PTR_ERR(ufs->upper_mnt);
 +	if (IS_ERR(ufs->upper_mnt)) {
 +		pr_err("overlayfs: failed to clone upperpath\n");
 +		goto out_put_workpath;
 +	}
 +
 +	ufs->lower_mnt = clone_private_mount(&lowerpath);
 +	err = PTR_ERR(ufs->lower_mnt);
 +	if (IS_ERR(ufs->lower_mnt)) {
 +		pr_err("overlayfs: failed to clone lowerpath\n");
 +		goto out_put_upper_mnt;
 +	}
 +
 +	ufs->workdir = ovl_workdir_create(ufs->upper_mnt, workpath.dentry);
 +	err = PTR_ERR(ufs->workdir);
 +	if (IS_ERR(ufs->workdir)) {
 +		pr_err("overlayfs: failed to create directory %s/%s\n",
 +		       ufs->config.workdir, OVL_WORKDIR_NAME);
++=======
+ 	if (ufs->config.upperdir) {
+ 		ufs->upper_mnt = clone_private_mount(&upperpath);
+ 		err = PTR_ERR(ufs->upper_mnt);
+ 		if (IS_ERR(ufs->upper_mnt)) {
+ 			pr_err("overlayfs: failed to clone upperpath\n");
+ 			goto out_put_lowerpath;
+ 		}
+ 
+ 		ufs->workdir = ovl_workdir_create(ufs->upper_mnt, workpath.dentry);
+ 		err = PTR_ERR(ufs->workdir);
+ 		if (IS_ERR(ufs->workdir)) {
+ 			pr_err("overlayfs: failed to create directory %s/%s\n",
+ 			       ufs->config.workdir, OVL_WORKDIR_NAME);
+ 			goto out_put_upper_mnt;
+ 		}
+ 	}
+ 
+ 	ufs->lower_mnt = kcalloc(1, sizeof(struct vfsmount *), GFP_KERNEL);
+ 	if (ufs->lower_mnt == NULL)
+ 		goto out_put_workdir;
+ 
+ 	mnt = clone_private_mount(&lowerpath);
+ 	err = PTR_ERR(mnt);
+ 	if (IS_ERR(mnt)) {
+ 		pr_err("overlayfs: failed to clone lowerpath\n");
++>>>>>>> 53a08cb9b8bc (ovl: make upperdir optional)
  		goto out_put_lower_mnt;
  	}
 +
  	/*
  	 * Make lower_mnt R/O.  That way fchmod/fchown on lower file
  	 * will fail instead of modifying lower fs.
  	 */
 -	mnt->mnt_flags |= MNT_READONLY;
 -
 -	ufs->lower_mnt[0] = mnt;
 -	ufs->numlower = 1;
 +	ufs->lower_mnt->mnt_flags |= MNT_READONLY;
  
- 	/* If the upper fs is r/o, we mark overlayfs r/o too */
- 	if (ufs->upper_mnt->mnt_sb->s_flags & MS_RDONLY)
+ 	/* If the upper fs is r/o or nonexistent, we mark overlayfs r/o too */
+ 	if (!ufs->upper_mnt || (ufs->upper_mnt->mnt_sb->s_flags & MS_RDONLY))
  		sb->s_flags |= MS_RDONLY;
  
  	sb->s_d_op = &ovl_dentry_operations;
* Unmerged path fs/overlayfs/super.c
