drm/dp/mst: split connector registration into two parts (v2)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [drm] dp_mst: split connector registration into two parts (Dave Airlie) [1251331]
Rebuild_FUZZ: 90.09%
commit-author Dave Airlie <airlied@redhat.com>
commit d9515c5ec1a20c77d83471e634ad9bb12deb0eac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/d9515c5e.failed

In order to cache the EDID properly for tiled displays, we
need to retrieve it before we register the connector with
userspace, otherwise userspace can call get resources
and try and get the edid before we've even cached it.

This fixes some problems when hotplugging mst monitors,
with X/mutter running. As mutter seems to get 0 modes
for one of the monitors in the tile.

v2: fix warning in radeon
handle tile setting in cached path rather than
get edid path.

	Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
	Cc: stable@vger.kernel.org
	Signed-off-by: Dave Airlie <airlied@redhat.com>
(cherry picked from commit d9515c5ec1a20c77d83471e634ad9bb12deb0eac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/drm_dp_mst_topology.c
#	drivers/gpu/drm/i915/intel_dp_mst.c
#	drivers/gpu/drm/radeon/radeon_dp_mst.c
#	include/drm/drm_dp_mst_helper.h
diff --cc drivers/gpu/drm/drm_dp_mst_topology.c
index 16779028bcc1,36454a146ae9..000000000000
--- a/drivers/gpu/drm/drm_dp_mst_topology.c
+++ b/drivers/gpu/drm/drm_dp_mst_topology.c
@@@ -1096,10 -1115,26 +1096,27 @@@ static void drm_dp_add_port(struct drm_
  
  	if (created && !port->input) {
  		char proppath[255];
 -
 -		build_mst_prop_path(mstb, port->port_num, proppath, sizeof(proppath));
 +		build_mst_prop_path(port, mstb, proppath);
  		port->connector = (*mstb->mgr->cbs->add_connector)(mstb->mgr, port, proppath);
++<<<<<<< HEAD
++=======
+ 		if (!port->connector) {
+ 			/* remove it from the port list */
+ 			mutex_lock(&mstb->mgr->lock);
+ 			list_del(&port->next);
+ 			mutex_unlock(&mstb->mgr->lock);
+ 			/* drop port list reference */
+ 			drm_dp_put_port(port);
+ 			goto out;
+ 		}
+ 		if (port->port_num >= 8) {
+ 			port->cached_edid = drm_get_edid(port->connector, &port->aux.ddc);
+ 			drm_mode_connector_set_tile_property(port->connector);
+ 		}
+ 		(*mstb->mgr->cbs->register_connector)(port->connector);
++>>>>>>> d9515c5ec1a2 (drm/dp/mst: split connector registration into two parts (v2))
  	}
  
 -out:
  	/* put reference to this port */
  	drm_dp_put_port(port);
  }
@@@ -2219,7 -2276,12 +2236,16 @@@ struct edid *drm_dp_mst_get_edid(struc
  	if (!port)
  		return NULL;
  
++<<<<<<< HEAD
 +	edid = drm_get_edid(connector, &port->aux.ddc);
++=======
+ 	if (port->cached_edid)
+ 		edid = drm_edid_duplicate(port->cached_edid);
+ 	else {
+ 		edid = drm_get_edid(connector, &port->aux.ddc);
+ 		drm_mode_connector_set_tile_property(connector);
+ 	}
++>>>>>>> d9515c5ec1a2 (drm/dp/mst: split connector registration into two parts (v2))
  	drm_dp_put_port(port);
  	return edid;
  }
diff --cc drivers/gpu/drm/i915/intel_dp_mst.c
index 24946bd1f6b0,6ade06888432..000000000000
--- a/drivers/gpu/drm/i915/intel_dp_mst.c
+++ b/drivers/gpu/drm/i915/intel_dp_mst.c
@@@ -408,13 -459,20 +408,27 @@@ static struct drm_connector *intel_dp_a
  	intel_dp_add_properties(intel_dp, connector);
  
  	drm_object_attach_property(&connector->base, dev->mode_config.path_property, 0);
 -	drm_object_attach_property(&connector->base, dev->mode_config.tile_property, 0);
 -
  	drm_mode_connector_set_path_property(connector, pathprop);
++<<<<<<< HEAD
 +	drm_reinit_primary_mode_group(dev);
 +	mutex_lock(&dev->mode_config.mutex);
 +	drm_fb_helper_add_one_connector(&dev_priv->fbdev->helper, connector);
 +	mutex_unlock(&dev->mode_config.mutex);
 +	drm_sysfs_connector_add(&intel_connector->base);
 +	return connector;
++=======
+ 	return connector;
+ }
+ 
+ static void intel_dp_register_mst_connector(struct drm_connector *connector)
+ {
+ 	struct intel_connector *intel_connector = to_intel_connector(connector);
+ 	struct drm_device *dev = connector->dev;
+ 	drm_modeset_lock_all(dev);
+ 	intel_connector_add_to_fbdev(intel_connector);
+ 	drm_modeset_unlock_all(dev);
+ 	drm_connector_register(&intel_connector->base);
++>>>>>>> d9515c5ec1a2 (drm/dp/mst: split connector registration into two parts (v2))
  }
  
  static void intel_dp_destroy_mst_connector(struct drm_dp_mst_topology_mgr *mgr,
@@@ -450,8 -516,9 +464,9 @@@ static void intel_dp_mst_hotplug(struc
  	drm_kms_helper_hotplug_event(dev);
  }
  
 -static struct drm_dp_mst_topology_cbs mst_cbs = {
 +struct drm_dp_mst_topology_cbs mst_cbs = {
  	.add_connector = intel_dp_add_mst_connector,
+ 	.register_connector = intel_dp_register_mst_connector,
  	.destroy_connector = intel_dp_destroy_mst_connector,
  	.hotplug = intel_dp_mst_hotplug,
  };
diff --cc include/drm/drm_dp_mst_helper.h
index 338fc1053835,0f408b002d98..000000000000
--- a/include/drm/drm_dp_mst_helper.h
+++ b/include/drm/drm_dp_mst_helper.h
@@@ -371,7 -373,8 +371,12 @@@ struct drm_dp_sideband_msg_tx 
  struct drm_dp_mst_topology_mgr;
  struct drm_dp_mst_topology_cbs {
  	/* create a connector for a port */
++<<<<<<< HEAD
 +	struct drm_connector *(*add_connector)(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port, char *path);
++=======
+ 	struct drm_connector *(*add_connector)(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port, const char *path);
+ 	void (*register_connector)(struct drm_connector *connector);
++>>>>>>> d9515c5ec1a2 (drm/dp/mst: split connector registration into two parts (v2))
  	void (*destroy_connector)(struct drm_dp_mst_topology_mgr *mgr,
  				  struct drm_connector *connector);
  	void (*hotplug)(struct drm_dp_mst_topology_mgr *mgr);
* Unmerged path drivers/gpu/drm/radeon/radeon_dp_mst.c
* Unmerged path drivers/gpu/drm/drm_dp_mst_topology.c
* Unmerged path drivers/gpu/drm/i915/intel_dp_mst.c
* Unmerged path drivers/gpu/drm/radeon/radeon_dp_mst.c
* Unmerged path include/drm/drm_dp_mst_helper.h
