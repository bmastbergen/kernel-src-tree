IB/iser: Suppress scsi command send completions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [infiniband] iser: Suppress scsi command send completions (Amir Vadai) [1164539]
Rebuild_FUZZ: 96.70%
commit-author Sagi Grimberg <sagig@mellanox.com>
commit 6df5a128f0fde6315a44e80b30412997147f5efd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6df5a128.failed

Singal completion of every 32 scsi commands and suppress all the rest.
We don't do anything upon getting the completion so no need to "just
consume" it.  Cleanup of scsi command is done in cleanup_task callback.

Still keep dataout and control send completions as we may need to
cleanup there. This helps reducing the amount of interrupts/completions
in the IO path.

	Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Roland Dreier <roland@purestorage.com>
(cherry picked from commit 6df5a128f0fde6315a44e80b30412997147f5efd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/ulp/iser/iscsi_iser.h
#	drivers/infiniband/ulp/iser/iser_initiator.c
#	drivers/infiniband/ulp/iser/iser_verbs.c
diff --cc drivers/infiniband/ulp/iser/iscsi_iser.h
index 9f0e0e34d6ca,f4e9d621826e..000000000000
--- a/drivers/infiniband/ulp/iser/iscsi_iser.h
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.h
@@@ -145,6 -144,9 +144,12 @@@
  					ISER_MAX_TX_MISC_PDUS         + \
  					ISER_MAX_RX_MISC_PDUS)
  
++<<<<<<< HEAD
++=======
+ #define ISER_WC_BATCH_COUNT   16
+ #define ISER_SIGNAL_CMD_COUNT 32
+ 
++>>>>>>> 6df5a128f0fd (IB/iser: Suppress scsi command send completions)
  #define ISER_VER			0x10
  #define ISER_WSV			0x08
  #define ISER_RSV			0x04
@@@ -463,9 -498,10 +468,16 @@@ void iser_unreg_mem_fmr(struct iscsi_is
  void iser_unreg_mem_fastreg(struct iscsi_iser_task *iser_task,
  			    enum iser_data_dir cmd_dir);
  
++<<<<<<< HEAD
 +int  iser_post_recvl(struct iser_conn *ib_conn);
 +int  iser_post_recvm(struct iser_conn *ib_conn, int count);
 +int  iser_post_send(struct iser_conn *ib_conn, struct iser_tx_desc *tx_desc);
++=======
+ int  iser_post_recvl(struct iser_conn *iser_conn);
+ int  iser_post_recvm(struct iser_conn *iser_conn, int count);
+ int  iser_post_send(struct ib_conn *ib_conn, struct iser_tx_desc *tx_desc,
+ 		    bool signal);
++>>>>>>> 6df5a128f0fd (IB/iser: Suppress scsi command send completions)
  
  int iser_dma_map_task_data(struct iscsi_iser_task *iser_task,
  			    struct iser_data_buf       *data,
diff --cc drivers/infiniband/ulp/iser/iser_initiator.c
index 8d44a4060634,5a489ea63732..000000000000
--- a/drivers/infiniband/ulp/iser/iser_initiator.c
+++ b/drivers/infiniband/ulp/iser/iser_initiator.c
@@@ -423,7 -434,8 +429,12 @@@ int iser_send_command(struct iscsi_con
  
  	iser_task->status = ISER_TASK_STATUS_STARTED;
  
++<<<<<<< HEAD
 +	err = iser_post_send(ib_conn, tx_desc);
++=======
+ 	err = iser_post_send(&iser_conn->ib_conn, tx_desc,
+ 			     iser_signal_comp(++sig_count));
++>>>>>>> 6df5a128f0fd (IB/iser: Suppress scsi command send completions)
  	if (!err)
  		return 0;
  
@@@ -488,7 -500,7 +499,11 @@@ int iser_send_data_out(struct iscsi_con
  		 itt, buf_offset, data_seg_len);
  
  
++<<<<<<< HEAD
 +	err = iser_post_send(ib_conn, tx_desc);
++=======
+ 	err = iser_post_send(&iser_conn->ib_conn, tx_desc, true);
++>>>>>>> 6df5a128f0fd (IB/iser: Suppress scsi command send completions)
  	if (!err)
  		return 0;
  
@@@ -550,7 -562,7 +565,11 @@@ int iser_send_control(struct iscsi_con
  			goto send_control_error;
  	}
  
++<<<<<<< HEAD
 +	err = iser_post_send(ib_conn, mdesc);
++=======
+ 	err = iser_post_send(&iser_conn->ib_conn, mdesc, true);
++>>>>>>> 6df5a128f0fd (IB/iser: Suppress scsi command send completions)
  	if (!err)
  		return 0;
  
diff --cc drivers/infiniband/ulp/iser/iser_verbs.c
index fbf2a1e0f2e2,67225bb82bb5..000000000000
--- a/drivers/infiniband/ulp/iser/iser_verbs.c
+++ b/drivers/infiniband/ulp/iser/iser_verbs.c
@@@ -1065,7 -1099,8 +1065,12 @@@ int iser_post_recvm(struct iser_conn *i
   *
   * returns 0 on success, -1 on failure
   */
++<<<<<<< HEAD
 +int iser_post_send(struct iser_conn *ib_conn, struct iser_tx_desc *tx_desc)
++=======
+ int iser_post_send(struct ib_conn *ib_conn, struct iser_tx_desc *tx_desc,
+ 		   bool signal)
++>>>>>>> 6df5a128f0fd (IB/iser: Suppress scsi command send completions)
  {
  	int		  ib_ret;
  	struct ib_send_wr send_wr, *send_wr_failed;
@@@ -1078,15 -1114,12 +1083,15 @@@
  	send_wr.sg_list	   = tx_desc->tx_sg;
  	send_wr.num_sge	   = tx_desc->num_sge;
  	send_wr.opcode	   = IB_WR_SEND;
- 	send_wr.send_flags = IB_SEND_SIGNALED;
+ 	send_wr.send_flags = signal ? IB_SEND_SIGNALED : 0;
  
 +	atomic_inc(&ib_conn->post_send_buf_count);
 +
  	ib_ret = ib_post_send(ib_conn->qp, &send_wr, &send_wr_failed);
 -	if (ib_ret)
 +	if (ib_ret) {
  		iser_err("ib_post_send failed, ret:%d\n", ib_ret);
 -
 +		atomic_dec(&ib_conn->post_send_buf_count);
 +	}
  	return ib_ret;
  }
  
* Unmerged path drivers/infiniband/ulp/iser/iscsi_iser.h
* Unmerged path drivers/infiniband/ulp/iser/iser_initiator.c
* Unmerged path drivers/infiniband/ulp/iser/iser_verbs.c
