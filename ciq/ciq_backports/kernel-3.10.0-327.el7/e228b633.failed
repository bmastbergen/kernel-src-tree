Bluetooth: Move rfcomm_get_device() before rfcomm_dev_activate()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [bluetooth] Move rfcomm_get_device() before rfcomm_dev_activate() (Lubomir Rintel) [1241844]
Rebuild_FUZZ: 90.60%
commit-author Gianluca Anzolin <gianluca@sottospazio.it>
commit e228b63390536f5b737056059a9a04ea016b1abf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e228b633.failed

This is a preparatory patch which moves the rfcomm_get_device()
definition before rfcomm_dev_activate() where it will be used.

	Signed-off-by: Gianluca Anzolin <gianluca@sottospazio.it>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit e228b63390536f5b737056059a9a04ea016b1abf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/rfcomm/tty.c
diff --cc net/bluetooth/rfcomm/tty.c
index 62bd75eda078,32ef9f91965c..000000000000
--- a/net/bluetooth/rfcomm/tty.c
+++ b/net/bluetooth/rfcomm/tty.c
@@@ -104,8 -103,55 +104,55 @@@ static void rfcomm_dev_destruct(struct 
  	module_put(THIS_MODULE);
  }
  
++<<<<<<< HEAD
++=======
+ static struct device *rfcomm_get_device(struct rfcomm_dev *dev)
+ {
+ 	struct hci_dev *hdev;
+ 	struct hci_conn *conn;
+ 
+ 	hdev = hci_get_route(&dev->dst, &dev->src);
+ 	if (!hdev)
+ 		return NULL;
+ 
+ 	conn = hci_conn_hash_lookup_ba(hdev, ACL_LINK, &dev->dst);
+ 
+ 	hci_dev_put(hdev);
+ 
+ 	return conn ? &conn->dev : NULL;
+ }
+ 
+ /* device-specific initialization: open the dlc */
+ static int rfcomm_dev_activate(struct tty_port *port, struct tty_struct *tty)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	return rfcomm_dlc_open(dev->dlc, &dev->src, &dev->dst, dev->channel);
+ }
+ 
+ /* we block the open until the dlc->state becomes BT_CONNECTED */
+ static int rfcomm_dev_carrier_raised(struct tty_port *port)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	return (dev->dlc->state == BT_CONNECTED);
+ }
+ 
+ /* device-specific cleanup: close the dlc */
+ static void rfcomm_dev_shutdown(struct tty_port *port)
+ {
+ 	struct rfcomm_dev *dev = container_of(port, struct rfcomm_dev, port);
+ 
+ 	if (dev->tty_dev->parent)
+ 		device_move(dev->tty_dev, NULL, DPM_ORDER_DEV_LAST);
+ 
+ 	/* close the dlc */
+ 	rfcomm_dlc_close(dev->dlc, 0);
+ }
+ 
++>>>>>>> e228b6339053 (Bluetooth: Move rfcomm_get_device() before rfcomm_dev_activate())
  static const struct tty_port_operations rfcomm_port_ops = {
  	.destruct = rfcomm_dev_destruct,
 -	.activate = rfcomm_dev_activate,
 -	.shutdown = rfcomm_dev_shutdown,
 -	.carrier_raised = rfcomm_dev_carrier_raised,
  };
  
  static struct rfcomm_dev *__rfcomm_dev_get(int id)
* Unmerged path net/bluetooth/rfcomm/tty.c
