tcp: fix the timid additive increase on stretch ACKs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Neal Cardwell <ncardwell@google.com>
commit 814d488c61260521b1b3cc97063700a5a6667c8f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/814d488c.failed

tcp_cong_avoid_ai() was too timid (snd_cwnd increased too slowly) on
"stretch ACKs" -- cases where the receiver ACKed more than 1 packet in
a single ACK. For example, suppose w is 10 and we get a stretch ACK
for 20 packets, so acked is 20. We ought to increase snd_cwnd by 2
(since acked/w = 20/10 = 2), but instead we were only increasing cwnd
by 1. This patch fixes that behavior.

	Reported-by: Eyal Perry <eyalpe@mellanox.com>
	Signed-off-by: Neal Cardwell <ncardwell@google.com>
	Signed-off-by: Yuchung Cheng <ycheng@google.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 814d488c61260521b1b3cc97063700a5a6667c8f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_cong.c
diff --cc net/ipv4/tcp_cong.c
index 511547b93096,faaee5338bea..000000000000
--- a/net/ipv4/tcp_cong.c
+++ b/net/ipv4/tcp_cong.c
@@@ -334,16 -304,19 +334,32 @@@ void tcp_slow_start(struct tcp_sock *tp
  }
  EXPORT_SYMBOL_GPL(tcp_slow_start);
  
++<<<<<<< HEAD
 +/* In theory this is tp->snd_cwnd += 1 / tp->snd_cwnd (or alternative w) */
 +void tcp_cong_avoid_ai(struct tcp_sock *tp, u32 w)
++=======
+ /* In theory this is tp->snd_cwnd += 1 / tp->snd_cwnd (or alternative w),
+  * for every packet that was ACKed.
+  */
+ void tcp_cong_avoid_ai(struct tcp_sock *tp, u32 w, u32 acked)
++>>>>>>> 814d488c6126 (tcp: fix the timid additive increase on stretch ACKs)
  {
+ 	tp->snd_cwnd_cnt += acked;
  	if (tp->snd_cwnd_cnt >= w) {
++<<<<<<< HEAD
 +		if (tp->snd_cwnd < tp->snd_cwnd_clamp)
 +			tp->snd_cwnd++;
 +		tp->snd_cwnd_cnt = 0;
 +	} else {
 +		tp->snd_cwnd_cnt++;
++=======
+ 		u32 delta = tp->snd_cwnd_cnt / w;
+ 
+ 		tp->snd_cwnd_cnt -= delta * w;
+ 		tp->snd_cwnd += delta;
++>>>>>>> 814d488c6126 (tcp: fix the timid additive increase on stretch ACKs)
  	}
+ 	tp->snd_cwnd = min(tp->snd_cwnd, tp->snd_cwnd_clamp);
  }
  EXPORT_SYMBOL_GPL(tcp_cong_avoid_ai);
  
* Unmerged path net/ipv4/tcp_cong.c
