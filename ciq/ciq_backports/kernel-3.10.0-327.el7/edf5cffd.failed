i40e: Use new 40G speeds

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Greg Rose <gregory.v.rose@intel.com>
commit edf5cffd58d8e1a4b1bd5de43bc9f0553f9910fc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/edf5cffd.failed

The kernel has added SPEED_40000 for ethtool.
Go ahead and use the new #define.

Change-ID: Ic7e16e5c9e91085afe539f11ee1b7668adc4d0ef
	Signed-off-by: Greg Rose <gregory.v.rose@intel.com>
	Tested-by: Jim Young <james.m.young@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit edf5cffd58d8e1a4b1bd5de43bc9f0553f9910fc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ethtool.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 51763b0c5846,4cbaaeb902c4..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@@ -397,8 -353,125 +397,130 @@@ static int i40e_get_settings(struct net
  			    hw_link_info->phy_type);
  	}
  
++<<<<<<< HEAD
 +no_valid_phy_type:
 +	/* this is if autoneg is enabled or disabled */
++=======
+ 	/* Set speed and duplex */
+ 	switch (link_speed) {
+ 	case I40E_LINK_SPEED_40GB:
+ 		ethtool_cmd_speed_set(ecmd, SPEED_40000);
+ 		break;
+ 	case I40E_LINK_SPEED_20GB:
+ 		ethtool_cmd_speed_set(ecmd, SPEED_20000);
+ 		break;
+ 	case I40E_LINK_SPEED_10GB:
+ 		ethtool_cmd_speed_set(ecmd, SPEED_10000);
+ 		break;
+ 	case I40E_LINK_SPEED_1GB:
+ 		ethtool_cmd_speed_set(ecmd, SPEED_1000);
+ 		break;
+ 	case I40E_LINK_SPEED_100MB:
+ 		ethtool_cmd_speed_set(ecmd, SPEED_100);
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 	ecmd->duplex = DUPLEX_FULL;
+ }
+ 
+ /**
+  * i40e_get_settings_link_down - Get the Link settings for when link is down
+  * @hw: hw structure
+  * @ecmd: ethtool command to fill in
+  *
+  * Reports link settings that can be determined when link is down
+  **/
+ static void i40e_get_settings_link_down(struct i40e_hw *hw,
+ 					struct ethtool_cmd *ecmd)
+ {
+ 	struct i40e_link_status *hw_link_info = &hw->phy.link_info;
+ 
+ 	/* link is down and the driver needs to fall back on
+ 	 * device ID to determine what kinds of info to display,
+ 	 * it's mostly a guess that may change when link is up
+ 	 */
+ 	switch (hw->device_id) {
+ 	case I40E_DEV_ID_QSFP_A:
+ 	case I40E_DEV_ID_QSFP_B:
+ 	case I40E_DEV_ID_QSFP_C:
+ 		/* pluggable QSFP */
+ 		ecmd->supported = SUPPORTED_40000baseSR4_Full |
+ 				  SUPPORTED_40000baseCR4_Full |
+ 				  SUPPORTED_40000baseLR4_Full;
+ 		ecmd->advertising = ADVERTISED_40000baseSR4_Full |
+ 				    ADVERTISED_40000baseCR4_Full |
+ 				    ADVERTISED_40000baseLR4_Full;
+ 		break;
+ 	case I40E_DEV_ID_KX_B:
+ 		/* backplane 40G */
+ 		ecmd->supported = SUPPORTED_40000baseKR4_Full;
+ 		ecmd->advertising = ADVERTISED_40000baseKR4_Full;
+ 		break;
+ 	case I40E_DEV_ID_KX_C:
+ 		/* backplane 10G */
+ 		ecmd->supported = SUPPORTED_10000baseKR_Full;
+ 		ecmd->advertising = ADVERTISED_10000baseKR_Full;
+ 		break;
+ 	case I40E_DEV_ID_10G_BASE_T:
+ 		ecmd->supported = SUPPORTED_10000baseT_Full |
+ 				  SUPPORTED_1000baseT_Full |
+ 				  SUPPORTED_100baseT_Full;
+ 		/* Figure out what has been requested */
+ 		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_10GB)
+ 			ecmd->advertising |= ADVERTISED_10000baseT_Full;
+ 		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_1GB)
+ 			ecmd->advertising |= ADVERTISED_1000baseT_Full;
+ 		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_100MB)
+ 			ecmd->advertising |= ADVERTISED_100baseT_Full;
+ 		break;
+ 	case I40E_DEV_ID_20G_KR2:
+ 		/* backplane 20G */
+ 		ecmd->supported = SUPPORTED_20000baseKR2_Full;
+ 		ecmd->advertising = ADVERTISED_20000baseKR2_Full;
+ 		break;
+ 	default:
+ 		/* all the rest are 10G/1G */
+ 		ecmd->supported = SUPPORTED_10000baseT_Full |
+ 				  SUPPORTED_1000baseT_Full;
+ 		/* Figure out what has been requested */
+ 		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_10GB)
+ 			ecmd->advertising |= ADVERTISED_10000baseT_Full;
+ 		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_1GB)
+ 			ecmd->advertising |= ADVERTISED_1000baseT_Full;
+ 		break;
+ 	}
+ 
+ 	/* With no link speed and duplex are unknown */
+ 	ethtool_cmd_speed_set(ecmd, SPEED_UNKNOWN);
+ 	ecmd->duplex = DUPLEX_UNKNOWN;
+ }
+ 
+ /**
+  * i40e_get_settings - Get Link Speed and Duplex settings
+  * @netdev: network interface device structure
+  * @ecmd: ethtool command
+  *
+  * Reports speed/duplex settings based on media_type
+  **/
+ static int i40e_get_settings(struct net_device *netdev,
+ 			     struct ethtool_cmd *ecmd)
+ {
+ 	struct i40e_netdev_priv *np = netdev_priv(netdev);
+ 	struct i40e_pf *pf = np->vsi->back;
+ 	struct i40e_hw *hw = &pf->hw;
+ 	struct i40e_link_status *hw_link_info = &hw->phy.link_info;
+ 	bool link_up = hw_link_info->link_info & I40E_AQ_LINK_UP;
+ 
+ 	if (link_up)
+ 		i40e_get_settings_link_up(hw, ecmd, netdev);
+ 	else
+ 		i40e_get_settings_link_down(hw, ecmd);
+ 
+ 	/* Now set the settings that don't rely on link being up/down */
+ 
+ 	/* Set autoneg settings */
++>>>>>>> edf5cffd58d8 (i40e: Use new 40G speeds)
  	ecmd->autoneg = ((hw_link_info->an_info & I40E_AQ_AN_COMPLETED) ?
  			  AUTONEG_ENABLE : AUTONEG_DISABLE);
  
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ethtool.c
