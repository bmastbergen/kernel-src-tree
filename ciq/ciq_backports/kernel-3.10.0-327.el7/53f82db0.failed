xfs: reduce direct usage of mp->m_dir_geo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 53f82db003900822ff828b792b1690a53a57c028
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/53f82db0.failed

There are many places in the directory code were we don't pass the
args into and so have to extract the geometry direct from the mount
structure. Push the args or the geometry into these leaf functions
so that we don't need to grab it from the struct xfs_mount.

This, in turn, brings use to the point where directory geometry is
no longer a property of the struct xfs_mount; it is not a global
property anymore, and hence we can start to consider per-directory
configuration of physical geometries.

Start by converting the xfs_dir_isblock/leaf code - pass in the
xfs_da_args and convert the readdir code to use xfs_da_args like
the rest of the directory code to pass information around.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 53f82db003900822ff828b792b1690a53a57c028)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_dir2.c
#	fs/xfs/xfs_dir2.h
#	fs/xfs/xfs_dir2_readdir.c
diff --cc fs/xfs/xfs_dir2.c
index 94787d4498db,07aa3907d237..000000000000
--- a/fs/xfs/xfs_dir2.c
+++ b/fs/xfs/xfs_dir2.c
@@@ -285,7 -282,7 +285,11 @@@ xfs_dir_createname
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isblock(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isblock(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v) {
@@@ -293,7 -290,7 +297,11 @@@
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isleaf(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isleaf(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v)
@@@ -378,7 -375,7 +386,11 @@@ xfs_dir_lookup
  		goto out_check_rval;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isblock(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isblock(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v) {
@@@ -386,7 -383,7 +398,11 @@@
  		goto out_check_rval;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isleaf(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isleaf(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v)
@@@ -451,7 -448,7 +467,11 @@@ xfs_dir_removename
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isblock(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isblock(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v) {
@@@ -459,7 -456,7 +479,11 @@@
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isleaf(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isleaf(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v)
@@@ -516,7 -513,7 +540,11 @@@ xfs_dir_replace
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isblock(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isblock(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v) {
@@@ -524,7 -521,7 +552,11 @@@
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isleaf(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isleaf(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v)
@@@ -576,7 -573,7 +608,11 @@@ xfs_dir_canenter
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isblock(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isblock(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v) {
@@@ -584,7 -581,7 +620,11 @@@
  		goto out_free;
  	}
  
++<<<<<<< HEAD
 +	rval = xfs_dir2_isleaf(tp, dp, &v);
++=======
+ 	rval = xfs_dir2_isleaf(args, &v);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	if (rval)
  		goto out_free;
  	if (v)
@@@ -652,19 -649,16 +692,30 @@@ xfs_dir2_grow_inode
   */
  int
  xfs_dir2_isblock(
++<<<<<<< HEAD
 +	xfs_trans_t	*tp,
 +	xfs_inode_t	*dp,
 +	int		*vp)		/* out: 1 is block, 0 is not block */
++=======
+ 	struct xfs_da_args	*args,
+ 	int			*vp)	/* out: 1 is block, 0 is not block */
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  {
- 	xfs_fileoff_t	last;		/* last file offset */
- 	xfs_mount_t	*mp;
- 	int		rval;
+ 	xfs_fileoff_t		last;	/* last file offset */
+ 	int			rval;
  
++<<<<<<< HEAD
 +	mp = dp->i_mount;
 +	if ((rval = xfs_bmap_last_offset(tp, dp, &last, XFS_DATA_FORK)))
 +		return rval;
 +	rval = XFS_FSB_TO_B(mp, last) == mp->m_dirblksize;
 +	ASSERT(rval == 0 || dp->i_d.di_size == mp->m_dirblksize);
++=======
+ 	if ((rval = xfs_bmap_last_offset(args->dp, &last, XFS_DATA_FORK)))
+ 		return rval;
+ 	rval = XFS_FSB_TO_B(args->dp->i_mount, last) == args->geo->blksize;
+ 	ASSERT(rval == 0 || args->dp->i_d.di_size == args->geo->blksize);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	*vp = rval;
  	return 0;
  }
@@@ -674,18 -668,15 +725,28 @@@
   */
  int
  xfs_dir2_isleaf(
++<<<<<<< HEAD
 +	xfs_trans_t	*tp,
 +	xfs_inode_t	*dp,
 +	int		*vp)		/* out: 1 is leaf, 0 is not leaf */
++=======
+ 	struct xfs_da_args	*args,
+ 	int			*vp)	/* out: 1 is block, 0 is not block */
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  {
- 	xfs_fileoff_t	last;		/* last file offset */
- 	xfs_mount_t	*mp;
- 	int		rval;
+ 	xfs_fileoff_t		last;	/* last file offset */
+ 	int			rval;
  
++<<<<<<< HEAD
 +	mp = dp->i_mount;
 +	if ((rval = xfs_bmap_last_offset(tp, dp, &last, XFS_DATA_FORK)))
 +		return rval;
 +	*vp = last == mp->m_dirleafblk + (1 << mp->m_sb.sb_dirblklog);
++=======
+ 	if ((rval = xfs_bmap_last_offset(args->dp, &last, XFS_DATA_FORK)))
+ 		return rval;
+ 	*vp = last == args->geo->leafblk + args->geo->fsbcount;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	return 0;
  }
  
diff --cc fs/xfs/xfs_dir2.h
index caf663f31f38,1292e780e5b7..000000000000
--- a/fs/xfs/xfs_dir2.h
+++ b/fs/xfs/xfs_dir2.h
@@@ -144,8 -146,8 +144,13 @@@ extern int xfs_dir2_sf_to_block(struct 
  /*
   * Interface routines used by userspace utilities
   */
++<<<<<<< HEAD
 +extern int xfs_dir2_isblock(struct xfs_trans *tp, struct xfs_inode *dp, int *r);
 +extern int xfs_dir2_isleaf(struct xfs_trans *tp, struct xfs_inode *dp, int *r);
++=======
+ extern int xfs_dir2_isblock(struct xfs_da_args *args, int *r);
+ extern int xfs_dir2_isleaf(struct xfs_da_args *args, int *r);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  extern int xfs_dir2_shrink_inode(struct xfs_da_args *args, xfs_dir2_db_t db,
  				struct xfs_buf *bp);
  
diff --cc fs/xfs/xfs_dir2_readdir.c
index d6645e8c5ecc,ca1f43cd3939..000000000000
--- a/fs/xfs/xfs_dir2_readdir.c
+++ b/fs/xfs/xfs_dir2_readdir.c
@@@ -74,23 -74,20 +74,32 @@@ const unsigned char xfs_mode_to_ftype[S
  	[S_IFLNK >> S_SHIFT]    = XFS_DIR3_FT_SYMLINK,
  };
  
 -STATIC int
 +STATIC int						/* error */
  xfs_dir2_sf_getdents(
++<<<<<<< HEAD
 +	xfs_inode_t		*dp,		/* incore directory inode */
 +	void			*dirent,
 +	xfs_off_t		*offset,
 +	filldir_t		filldir)
++=======
+ 	struct xfs_da_args	*args,
+ 	struct dir_context	*ctx)
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  {
  	int			i;		/* shortform entry number */
- 	xfs_mount_t		*mp;		/* filesystem mount point */
+ 	struct xfs_inode	*dp = args->dp;	/* incore directory inode */
  	xfs_dir2_dataptr_t	off;		/* current entry's offset */
  	xfs_dir2_sf_entry_t	*sfep;		/* shortform directory entry */
  	xfs_dir2_sf_hdr_t	*sfp;		/* shortform structure */
  	xfs_dir2_dataptr_t	dot_offset;
  	xfs_dir2_dataptr_t	dotdot_offset;
  	xfs_ino_t		ino;
++<<<<<<< HEAD
 +
 +	mp = dp->i_mount;
++=======
+ 	struct xfs_da_geometry	*geo = args->geo;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  
  	ASSERT(dp->i_df.if_flags & XFS_IFINLINE);
  	/*
@@@ -163,30 -158,27 +172,47 @@@
  
  		ino = dp->d_ops->sf_get_ino(sfp, sfep);
  		filetype = dp->d_ops->sf_get_ftype(sfep);
++<<<<<<< HEAD
 +		if (filldir(dirent, (char *)sfep->name, sfep->namelen,
 +			    off & 0x7fffffff, ino,
 +			    xfs_dir3_get_dtype(mp, filetype))) {
 +			*offset = off & 0x7fffffff;
++=======
+ 		ctx->pos = off & 0x7fffffff;
+ 		if (!dir_emit(ctx, (char *)sfep->name, sfep->namelen, ino,
+ 			    xfs_dir3_get_dtype(dp->i_mount, filetype)))
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  			return 0;
 +		}
  		sfep = dp->d_ops->sf_nextentry(sfp, sfep);
  	}
  
++<<<<<<< HEAD
 +	*offset = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk + 1, 0) &
 +			0x7fffffff;
++=======
+ 	ctx->pos = xfs_dir2_db_off_to_dataptr(geo, geo->datablk + 1, 0) &
+ 								0x7fffffff;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	return 0;
  }
  
  /*
   * Readdir for block directories.
   */
 -STATIC int
 +STATIC int						/* error */
  xfs_dir2_block_getdents(
++<<<<<<< HEAD
 +	xfs_inode_t		*dp,		/* incore inode */
 +	void			*dirent,
 +	xfs_off_t		*offset,
 +	filldir_t		filldir)
++=======
+ 	struct xfs_da_args	*args,
+ 	struct dir_context	*ctx)
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  {
+ 	struct xfs_inode	*dp = args->dp;	/* incore directory inode */
  	xfs_dir2_data_hdr_t	*hdr;		/* block header */
  	struct xfs_buf		*bp;		/* buffer for block */
  	xfs_dir2_block_tail_t	*btp;		/* block tail */
@@@ -197,9 -189,8 +223,13 @@@
  	char			*ptr;		/* current data entry */
  	int			wantoff;	/* starting block offset */
  	xfs_off_t		cook;
++<<<<<<< HEAD
 +
 +	mp = dp->i_mount;
++=======
+ 	struct xfs_da_geometry	*geo = args->geo;
+ 
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	/*
  	 * If the block number in the offset is out of range, we're done.
  	 */
@@@ -259,10 -251,9 +289,16 @@@
  		/*
  		 * If it didn't fit, set the final offset to here & return.
  		 */
++<<<<<<< HEAD
 +		if (filldir(dirent, (char *)dep->name, dep->namelen,
 +			    cook & 0x7fffffff, be64_to_cpu(dep->inumber),
 +			    xfs_dir3_get_dtype(mp, filetype))) {
 +			*offset = cook & 0x7fffffff;
++=======
+ 		if (!dir_emit(ctx, (char *)dep->name, dep->namelen,
+ 			    be64_to_cpu(dep->inumber),
+ 			    xfs_dir3_get_dtype(dp->i_mount, filetype))) {
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  			xfs_trans_brelse(NULL, bp);
  			return 0;
  		}
@@@ -272,8 -263,8 +308,13 @@@
  	 * Reached the end of the block.
  	 * Set the offset to a non-existent block 1 and return.
  	 */
++<<<<<<< HEAD
 +	*offset = xfs_dir2_db_off_to_dataptr(mp, mp->m_dirdatablk + 1, 0) &
 +			0x7fffffff;
++=======
+ 	ctx->pos = xfs_dir2_db_off_to_dataptr(geo, geo->datablk + 1, 0) &
+ 								0x7fffffff;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	xfs_trans_brelse(NULL, bp);
  	return 0;
  }
@@@ -308,6 -299,7 +349,10 @@@ xfs_dir2_leaf_readbuf
  	int			length;
  	int			i;
  	int			j;
++<<<<<<< HEAD
++=======
+ 	struct xfs_da_geometry	*geo = args->geo;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  
  	/*
  	 * If we have a buffer, we need to release it and
@@@ -341,8 -333,7 +386,12 @@@
  	/*
  	 * Recalculate the readahead blocks wanted.
  	 */
++<<<<<<< HEAD
 +	mip->ra_want = howmany(bufsize + mp->m_dirblksize,
 +			       mp->m_sb.sb_blocksize) - 1;
++=======
+ 	mip->ra_want = howmany(bufsize + geo->blksize, (1 << geo->fsblog)) - 1;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	ASSERT(mip->ra_want >= 0);
  
  	/*
@@@ -411,11 -402,11 +460,17 @@@
  	/*
  	 * Read the directory block starting at the first mapping.
  	 */
 -	mip->curdb = xfs_dir2_da_to_db(geo, map->br_startoff);
 +	mip->curdb = xfs_dir2_da_to_db(mp, map->br_startoff);
  	error = xfs_dir3_data_read(NULL, dp, map->br_startoff,
++<<<<<<< HEAD
 +			map->br_blockcount >= mp->m_dirblkfsbs ?
 +			    XFS_FSB_TO_DADDR(mp, map->br_startblock) : -1, &bp);
 +
++=======
+ 			map->br_blockcount >= geo->fsbcount ?
+ 			    XFS_FSB_TO_DADDR(dp->i_mount, map->br_startblock) :
+ 			    -1, &bp);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	/*
  	 * Should just skip over the data block instead of giving up.
  	 */
@@@ -441,10 -432,10 +496,10 @@@
  		 * Read-ahead a contiguous directory block.
  		 */
  		if (i > mip->ra_current &&
 -		    map[mip->ra_index].br_blockcount >= geo->fsbcount) {
 +		    map[mip->ra_index].br_blockcount >= mp->m_dirblkfsbs) {
  			xfs_dir3_data_readahead(dp,
  				map[mip->ra_index].br_startoff + mip->ra_offset,
- 				XFS_FSB_TO_DADDR(mp,
+ 				XFS_FSB_TO_DADDR(dp->i_mount,
  					map[mip->ra_index].br_startblock +
  							mip->ra_offset));
  			mip->ra_current = i;
@@@ -494,14 -485,13 +549,21 @@@ out
   * Getdents (readdir) for leaf and node directories.
   * This reads the data blocks only, so is the same for both forms.
   */
 -STATIC int
 +STATIC int						/* error */
  xfs_dir2_leaf_getdents(
++<<<<<<< HEAD
 +	xfs_inode_t		*dp,		/* incore directory inode */
 +	void			*dirent,
 +	size_t			bufsize,
 +	xfs_off_t		*offset,
 +	filldir_t		filldir)
++=======
+ 	struct xfs_da_args	*args,
+ 	struct dir_context	*ctx,
+ 	size_t			bufsize)
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  {
+ 	struct xfs_inode	*dp = args->dp;
  	struct xfs_buf		*bp = NULL;	/* data block buffer */
  	xfs_dir2_data_hdr_t	*hdr;		/* data block header */
  	xfs_dir2_data_entry_t	*dep;		/* data entry */
@@@ -514,23 -503,21 +575,34 @@@
  	xfs_dir2_off_t		newoff;		/* new curoff after new blk */
  	char			*ptr = NULL;	/* pointer to current data */
  	struct xfs_dir2_leaf_map_info *map_info;
++<<<<<<< HEAD
++=======
+ 	struct xfs_da_geometry	*geo = args->geo;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  
  	/*
  	 * If the offset is at or past the largest allowed value,
  	 * give up right away.
  	 */
 -	if (ctx->pos >= XFS_DIR2_MAX_DATAPTR)
 +	if (*offset >= XFS_DIR2_MAX_DATAPTR)
  		return 0;
  
++<<<<<<< HEAD
 +	mp = dp->i_mount;
 +
++=======
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	/*
  	 * Set up to bmap a number of blocks based on the caller's
  	 * buffer size, the directory block size, and the filesystem
  	 * block size.
  	 */
++<<<<<<< HEAD
 +	length = howmany(bufsize + mp->m_dirblksize,
 +				     mp->m_sb.sb_blocksize);
++=======
+ 	length = howmany(bufsize + geo->blksize, (1 << geo->fsblog));
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	map_info = kmem_zalloc(offsetof(struct xfs_dir2_leaf_map_info, map) +
  				(length * sizeof(struct xfs_bmbt_irec)),
  			       KM_SLEEP | KM_NOFS);
@@@ -560,9 -547,9 +632,9 @@@
  		 * If we have no buffer, or we're off the end of the
  		 * current buffer, need to get another one.
  		 */
 -		if (!bp || ptr >= (char *)bp->b_addr + geo->blksize) {
 +		if (!bp || ptr >= (char *)bp->b_addr + mp->m_dirblksize) {
  
- 			error = xfs_dir2_leaf_readbuf(dp, bufsize, map_info,
+ 			error = xfs_dir2_leaf_readbuf(args, bufsize, map_info,
  						      &curoff, &bp);
  			if (error || !map_info->map_valid)
  				break;
@@@ -570,7 -557,8 +642,12 @@@
  			/*
  			 * Having done a read, we need to set a new offset.
  			 */
++<<<<<<< HEAD
 +			newoff = xfs_dir2_db_off_to_byte(mp, map_info->curdb, 0);
++=======
+ 			newoff = xfs_dir2_db_off_to_byte(geo,
+ 							 map_info->curdb, 0);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  			/*
  			 * Start of the current block.
  			 */
@@@ -588,7 -576,7 +665,11 @@@
  			 * Find our position in the block.
  			 */
  			ptr = (char *)dp->d_ops->data_entry_p(hdr);
++<<<<<<< HEAD
 +			byteoff = xfs_dir2_byte_to_off(mp, curoff);
++=======
+ 			byteoff = xfs_dir2_byte_to_off(geo, curoff);
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  			/*
  			 * Skip past the header.
  			 */
@@@ -644,10 -632,10 +725,10 @@@
  		length = dp->d_ops->data_entsize(dep->namelen);
  		filetype = dp->d_ops->data_get_ftype(dep);
  
 -		ctx->pos = xfs_dir2_byte_to_dataptr(curoff) & 0x7fffffff;
 -		if (!dir_emit(ctx, (char *)dep->name, dep->namelen,
 +		if (filldir(dirent, (char *)dep->name, dep->namelen,
 +			    xfs_dir2_byte_to_dataptr(mp, curoff) & 0x7fffffff,
  			    be64_to_cpu(dep->inumber),
- 			    xfs_dir3_get_dtype(mp, filetype)))
+ 			    xfs_dir3_get_dtype(dp->i_mount, filetype)))
  			break;
  
  		/*
@@@ -677,14 -665,14 +758,25 @@@
   */
  int
  xfs_readdir(
++<<<<<<< HEAD
 +	xfs_inode_t	*dp,
 +	void		*dirent,
 +	size_t		bufsize,
 +	xfs_off_t	*offset,
 +	filldir_t	filldir)
 +{
 +	int		rval;		/* return value */
 +	int		v;		/* type-checking value */
++=======
+ 	struct xfs_inode	*dp,
+ 	struct dir_context	*ctx,
+ 	size_t			bufsize)
+ {
+ 	struct xfs_da_args	args = {0};
+ 	int			rval;
+ 	int			v;
+ 	uint			lock_mode;
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  
  	trace_xfs_readdir(dp);
  
@@@ -694,15 -682,19 +786,32 @@@
  	ASSERT(S_ISDIR(dp->i_d.di_mode));
  	XFS_STATS_INC(xs_dir_getdents);
  
++<<<<<<< HEAD
 +	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL)
 +		rval = xfs_dir2_sf_getdents(dp, dirent, offset, filldir);
 +	else if ((rval = xfs_dir2_isblock(NULL, dp, &v)))
 +		;
 +	else if (v)
 +		rval = xfs_dir2_block_getdents(dp, dirent, offset, filldir);
 +	else
 +		rval = xfs_dir2_leaf_getdents(dp, dirent, bufsize, offset,
 +					      filldir);
++=======
+ 	args.dp = dp;
+ 	args.geo = dp->i_mount->m_dir_geo;
+ 
+ 	lock_mode = xfs_ilock_data_map_shared(dp);
+ 	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL)
+ 		rval = xfs_dir2_sf_getdents(&args, ctx);
+ 	else if ((rval = xfs_dir2_isblock(&args, &v)))
+ 		;
+ 	else if (v)
+ 		rval = xfs_dir2_block_getdents(&args, ctx);
+ 	else
+ 		rval = xfs_dir2_leaf_getdents(&args, ctx, bufsize);
+ 	xfs_iunlock(dp, lock_mode);
+ 
++>>>>>>> 53f82db00390 (xfs: reduce direct usage of mp->m_dir_geo)
  	return rval;
  }
 +
* Unmerged path fs/xfs/xfs_dir2.c
* Unmerged path fs/xfs/xfs_dir2.h
* Unmerged path fs/xfs/xfs_dir2_readdir.c
