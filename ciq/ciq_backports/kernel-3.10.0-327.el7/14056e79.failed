bonding: use rtnl_deref in bond_change_rx_flags()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Veaceslav Falico <vfalico@gmail.com>
commit 14056e7930761b730e2b34ae716e151ba890f3bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/14056e79.failed

As it's always called with RTNL held, via dev_set_allmulti/promiscuity.
Also, remove the wrong comment.

CC: Jay Vosburgh <j.vosburgh@gmail.com>
CC: Andy Gospodarek <andy@greyhouse.net>
	Signed-off-by: Veaceslav Falico <vfalico@gmail.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 14056e7930761b730e2b34ae716e151ba890f3bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
diff --cc drivers/net/bonding/bond_main.c
index 5e51f44f6317,5e5b3b30c51c..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -668,17 -492,18 +668,26 @@@ static int bond_check_dev_link(struct b
   */
  static int bond_set_promiscuity(struct bonding *bond, int inc)
  {
 -	struct list_head *iter;
  	int err = 0;
++<<<<<<< HEAD
 +	if (USES_PRIMARY(bond->params.mode)) {
 +		/* write lock already acquired */
 +		if (bond->curr_active_slave) {
 +			err = dev_set_promiscuity(bond->curr_active_slave->dev,
 +						  inc);
 +		}
++=======
+ 
+ 	if (bond_uses_primary(bond)) {
+ 		struct slave *curr_active = rtnl_dereference(bond->curr_active_slave);
+ 
+ 		if (curr_active)
+ 			err = dev_set_promiscuity(curr_active->dev, inc);
++>>>>>>> 14056e793076 (bonding: use rtnl_deref in bond_change_rx_flags())
  	} else {
  		struct slave *slave;
 -
 -		bond_for_each_slave(bond, slave, iter) {
 +		int i;
 +		bond_for_each_slave(bond, slave, i) {
  			err = dev_set_promiscuity(slave->dev, inc);
  			if (err)
  				return err;
@@@ -692,17 -517,18 +701,26 @@@
   */
  static int bond_set_allmulti(struct bonding *bond, int inc)
  {
 -	struct list_head *iter;
  	int err = 0;
++<<<<<<< HEAD
 +	if (USES_PRIMARY(bond->params.mode)) {
 +		/* write lock already acquired */
 +		if (bond->curr_active_slave) {
 +			err = dev_set_allmulti(bond->curr_active_slave->dev,
 +					       inc);
 +		}
++=======
+ 
+ 	if (bond_uses_primary(bond)) {
+ 		struct slave *curr_active = rtnl_dereference(bond->curr_active_slave);
+ 
+ 		if (curr_active)
+ 			err = dev_set_allmulti(curr_active->dev, inc);
++>>>>>>> 14056e793076 (bonding: use rtnl_deref in bond_change_rx_flags())
  	} else {
  		struct slave *slave;
 -
 -		bond_for_each_slave(bond, slave, iter) {
 +		int i;
 +		bond_for_each_slave(bond, slave, i) {
  			err = dev_set_allmulti(slave->dev, inc);
  			if (err)
  				return err;
* Unmerged path drivers/net/bonding/bond_main.c
