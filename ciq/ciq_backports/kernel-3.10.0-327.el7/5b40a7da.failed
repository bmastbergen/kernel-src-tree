virtio: don't set VIRTIO_CONFIG_S_DRIVER_OK twice.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] don't set VIRTIO_CONFIG_S_DRIVER_OK twice (Jason Wang) [1227339]
Rebuild_FUZZ: 90.11%
commit-author Rusty Russell <rusty@rustcorp.com.au>
commit 5b40a7daf51812b35cf05d1601a779a7043f8414
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/5b40a7da.failed

I noticed this with the console device.  It's not *wrong*, just a bit
weird.

	Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
(cherry picked from commit 5b40a7daf51812b35cf05d1601a779a7043f8414)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio.c
diff --cc drivers/virtio/virtio.c
index 683d7137d7c9,5ce2aa48fc6e..000000000000
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@@ -138,14 -234,22 +138,29 @@@ static int virtio_dev_probe(struct devi
  
  	err = drv->probe(dev);
  	if (err)
 -		goto err;
 +		add_status(dev, VIRTIO_CONFIG_S_FAILED);
 +	else {
 +		add_status(dev, VIRTIO_CONFIG_S_DRIVER_OK);
 +		if (drv->scan)
 +			drv->scan(dev);
 +	}
  
++<<<<<<< HEAD
++=======
+ 	/* If probe didn't do it, mark device DRIVER_OK ourselves. */
+ 	if (!(dev->config->get_status(dev) & VIRTIO_CONFIG_S_DRIVER_OK))
+ 		virtio_device_ready(dev);
+ 
+ 	if (drv->scan)
+ 		drv->scan(dev);
+ 
+ 	virtio_config_enable(dev);
+ 
+ 	return 0;
+ err:
+ 	add_status(dev, VIRTIO_CONFIG_S_FAILED);
++>>>>>>> 5b40a7daf518 (virtio: don't set VIRTIO_CONFIG_S_DRIVER_OK twice.)
  	return err;
 -
  }
  
  static int virtio_dev_remove(struct device *_d)
* Unmerged path drivers/virtio/virtio.c
