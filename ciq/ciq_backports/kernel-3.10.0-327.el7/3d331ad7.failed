percpu: speed alloc_pcpu_area() up

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 3d331ad74fa33f0b14a46cf0de8358012d3c1500
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3d331ad7.failed

If we know that first N areas are all in use, we can obviously skip
them when searching for a free one.  And that kind of hint is very
easy to maintain.

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit 3d331ad74fa33f0b14a46cf0de8358012d3c1500)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/percpu.c
diff --cc mm/percpu.c
index 89e586173340,c7206d06f8de..000000000000
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@@ -484,9 -443,9 +484,15 @@@ static int pcpu_alloc_area(struct pcpu_
  	int max_contig = 0;
  	int i, off;
  	bool seen_free = false;
++<<<<<<< HEAD
 +
 +	for (i = 0; i < chunk->map_used; i++) {
 +		bool is_last = i + 1 == chunk->map_used;
++=======
+ 	int *p;
+ 
+ 	for (i = chunk->first_free, p = chunk->map + i; i < chunk->map_used; i++, p++) {
++>>>>>>> 3d331ad74fa3 (percpu: speed alloc_pcpu_area() up)
  		int head, tail;
  		int this_size;
  
@@@ -536,12 -501,14 +542,17 @@@
  					chunk->first_free = i;
  					seen_free = true;
  				}
++<<<<<<< HEAD
 +				i++;
 +				off += head;
++=======
+ 				*++p = off += head;
+ 				++i;
++>>>>>>> 3d331ad74fa3 (percpu: speed alloc_pcpu_area() up)
  				max_contig = max(head, max_contig);
  			}
 -			if (tail) {
 -				p[1] = off + size;
 +			if (tail)
  				max_contig = max(tail, max_contig);
 -			}
  		}
  
  		if (!seen_free)
* Unmerged path mm/percpu.c
