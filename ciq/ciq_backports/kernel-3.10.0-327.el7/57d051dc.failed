md: Export and rename find_rdev_nr_rcu

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [md] Export and rename find_rdev_nr_rcu (Jes Sorensen) [1150149 1173510 1194720]
Rebuild_FUZZ: 94.44%
commit-author Goldwyn Rodrigues <rgoldwyn@suse.de>
commit 57d051dccaef395e0d8c0fff02cfc3a77bacc88c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/57d051dc.failed

This is required by the clustering module (patches to follow) to
find the device to remove or re-add.

	Signed-off-by: Goldwyn Rodrigues <rgoldwyn@suse.com>
	Signed-off-by: NeilBrown <neilb@suse.de>
(cherry picked from commit 57d051dccaef395e0d8c0fff02cfc3a77bacc88c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.h
diff --cc drivers/md/md.h
index c37c2ee00769,ecdce36ec6b8..000000000000
--- a/drivers/md/md.h
+++ b/drivers/md/md.h
@@@ -627,6 -669,10 +627,13 @@@ extern struct bio *bio_alloc_mddev(gfp_
  				   struct mddev *mddev);
  
  extern void md_unplug(struct blk_plug_cb *cb, bool from_schedule);
++<<<<<<< HEAD
++=======
+ extern void md_reload_sb(struct mddev *mddev);
+ extern void md_update_sb(struct mddev *mddev, int force);
+ extern void md_kick_rdev_from_array(struct md_rdev * rdev);
+ struct md_rdev *md_find_rdev_nr_rcu(struct mddev *mddev, int nr);
++>>>>>>> 57d051dccaef (md: Export and rename find_rdev_nr_rcu)
  static inline int mddev_check_plugged(struct mddev *mddev)
  {
  	return !!blk_check_plugged(md_unplug, mddev,
diff --git a/drivers/md/md.c b/drivers/md/md.c
index 5d8c7c589a1e..08e9f4aae804 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -665,7 +665,7 @@ static void mddev_unlock(struct mddev * mddev)
 	spin_unlock(&pers_lock);
 }
 
-static struct md_rdev *find_rdev_nr_rcu(struct mddev *mddev, int nr)
+struct md_rdev *md_find_rdev_nr_rcu(struct mddev *mddev, int nr)
 {
 	struct md_rdev *rdev;
 
@@ -675,6 +675,7 @@ static struct md_rdev *find_rdev_nr_rcu(struct mddev *mddev, int nr)
 
 	return NULL;
 }
+EXPORT_SYMBOL_GPL(md_find_rdev_nr_rcu);
 
 static struct md_rdev *find_rdev(struct mddev *mddev, dev_t dev)
 {
@@ -2078,11 +2079,11 @@ static int bind_rdev_to_array(struct md_rdev * rdev, struct mddev * mddev)
 		int choice = 0;
 		if (mddev->pers)
 			choice = mddev->raid_disks;
-		while (find_rdev_nr_rcu(mddev, choice))
+		while (md_find_rdev_nr_rcu(mddev, choice))
 			choice++;
 		rdev->desc_nr = choice;
 	} else {
-		if (find_rdev_nr_rcu(mddev, rdev->desc_nr)) {
+		if (md_find_rdev_nr_rcu(mddev, rdev->desc_nr)) {
 			rcu_read_unlock();
 			return -EBUSY;
 		}
@@ -5667,7 +5668,7 @@ static int get_disk_info(struct mddev * mddev, void __user * arg)
 		return -EFAULT;
 
 	rcu_read_lock();
-	rdev = find_rdev_nr_rcu(mddev, info.number);
+	rdev = md_find_rdev_nr_rcu(mddev, info.number);
 	if (rdev) {
 		info.major = MAJOR(rdev->bdev->bd_dev);
 		info.minor = MINOR(rdev->bdev->bd_dev);
* Unmerged path drivers/md/md.h
