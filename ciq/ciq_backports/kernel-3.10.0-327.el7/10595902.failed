net: allow large number of rx queues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] allow large number of rx queues (Jason Wang) [1231604]
Rebuild_FUZZ: 92.54%
commit-author Pankaj Gupta <pagupta@redhat.com>
commit 1059590254fa9dce9cafc4f07d1103dbec415e76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/10595902.failed

netif_alloc_rx_queues() uses kcalloc() to allocate memory
for "struct netdev_queue *_rx" array.
If we are doing large rx queue allocation kcalloc() might
fail, so this patch does a fallback to vzalloc().
Similar implementation is done for tx queue allocation in
netif_alloc_netdev_queues().

We avoid failure of high order memory allocation
with the help of vzalloc(), this allows us to do large
rx and tx queue allocation which in turn helps us to
increase the number of queues in tun.

As vmalloc() adds overhead on a critical network path,
__GFP_REPEAT flag is used with kzalloc() to do this fallback
only when really needed.

	Signed-off-by: Pankaj Gupta <pagupta@redhat.com>
	Reviewed-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: David Gibson <dgibson@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1059590254fa9dce9cafc4f07d1103dbec415e76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index c33def8a553a,805456147c30..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -5940,8 -6810,8 +5943,13 @@@ void free_netdev(struct net_device *dev
  	release_net(dev_net(dev));
  
  	netif_free_tx_queues(dev);
++<<<<<<< HEAD
 +#ifdef CONFIG_RPS
 +	kfree(dev->_rx);
++=======
+ #ifdef CONFIG_SYSFS
+ 	kvfree(dev->_rx);
++>>>>>>> 1059590254fa (net: allow large number of rx queues)
  #endif
  
  	kfree(rcu_dereference_protected(dev->ingress_queue, 1));
* Unmerged path net/core/dev.c
