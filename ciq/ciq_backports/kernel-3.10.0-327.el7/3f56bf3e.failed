ACPI / LPSS: remove struct lpss_shared_clock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [acpi] lpss: remove struct lpss_shared_clock (Prarit Bhargava) [1178891]
Rebuild_FUZZ: 91.36%
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit 3f56bf3e939f0344febf92c41fbc0c26a21593c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/3f56bf3e.failed

Nothing requires it anymore. The PWM driver no longer
uses clk framework to get the rate.

	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 3f56bf3e939f0344febf92c41fbc0c26a21593c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpi_lpss.c
diff --cc drivers/acpi/acpi_lpss.c
index ed5dc78f528a,bcbdbd224c10..000000000000
--- a/drivers/acpi/acpi_lpss.c
+++ b/drivers/acpi/acpi_lpss.c
@@@ -43,22 -52,21 +43,36 @@@ ACPI_MODULE_NAME("acpi_lpss")
  #define LPSS_TX_INT			0x20
  #define LPSS_TX_INT_MASK		BIT(1)
  
++<<<<<<< HEAD
 +struct lpss_shared_clock {
 +	const char *name;
 +	unsigned long rate;
 +	struct clk *clk;
 +};
++=======
+ #define LPSS_PRV_REG_COUNT		9
+ 
+ /* LPSS Flags */
+ #define LPSS_CLK			BIT(0)
+ #define LPSS_CLK_GATE			BIT(1)
+ #define LPSS_CLK_DIVIDER		BIT(2)
+ #define LPSS_LTR			BIT(3)
+ #define LPSS_SAVE_CTX			BIT(4)
++>>>>>>> 3f56bf3e939f (ACPI / LPSS: remove struct lpss_shared_clock)
  
  struct lpss_private_data;
  
  struct lpss_device_desc {
 -	unsigned int flags;
 +	bool clk_required;
 +	const char *clkdev_name;
 +	bool ltr_required;
  	unsigned int prv_offset;
  	size_t prv_size_override;
++<<<<<<< HEAD
 +	bool clk_gate;
 +	struct lpss_shared_clock *shared_clock;
++=======
++>>>>>>> 3f56bf3e939f (ACPI / LPSS: remove struct lpss_shared_clock)
  	void (*setup)(struct lpss_private_data *pdata);
  };
  
@@@ -104,14 -128,13 +118,19 @@@ static struct lpss_device_desc lpt_uart
  };
  
  static struct lpss_device_desc lpt_sdio_dev_desc = {
 -	.flags = LPSS_LTR,
  	.prv_offset = 0x1000,
  	.prv_size_override = 0x1018,
 +	.ltr_required = true,
  };
  
++<<<<<<< HEAD
 +static struct lpss_shared_clock uart_clock = {
 +	.name = "uart_clk",
 +	.rate = 44236800,
++=======
+ static struct lpss_device_desc byt_pwm_dev_desc = {
+ 	.flags = LPSS_SAVE_CTX,
++>>>>>>> 3f56bf3e939f (ACPI / LPSS: remove struct lpss_shared_clock)
  };
  
  static struct lpss_device_desc byt_uart_dev_desc = {
@@@ -144,31 -153,57 +163,62 @@@ static struct lpss_shared_clock i2c_clo
  };
  
  static struct lpss_device_desc byt_i2c_dev_desc = {
 -	.flags = LPSS_CLK | LPSS_SAVE_CTX,
 +	.clk_required = true,
  	.prv_offset = 0x800,
 -	.setup = byt_i2c_setup,
 +	.shared_clock = &i2c_clock,
  };
  
++<<<<<<< HEAD
++=======
+ #else
+ 
+ #define LPSS_ADDR(desc) (0UL)
+ 
+ #endif /* CONFIG_X86_INTEL_LPSS */
+ 
++>>>>>>> 3f56bf3e939f (ACPI / LPSS: remove struct lpss_shared_clock)
  static const struct acpi_device_id acpi_lpss_device_ids[] = {
  	/* Generic LPSS devices */
 -	{ "INTL9C60", LPSS_ADDR(lpss_dma_desc) },
 +	{ "INTL9C60", (unsigned long)&lpss_dma_desc },
  
  	/* Lynxpoint LPSS devices */
 -	{ "INT33C0", LPSS_ADDR(lpt_dev_desc) },
 -	{ "INT33C1", LPSS_ADDR(lpt_dev_desc) },
 -	{ "INT33C2", LPSS_ADDR(lpt_i2c_dev_desc) },
 -	{ "INT33C3", LPSS_ADDR(lpt_i2c_dev_desc) },
 -	{ "INT33C4", LPSS_ADDR(lpt_uart_dev_desc) },
 -	{ "INT33C5", LPSS_ADDR(lpt_uart_dev_desc) },
 -	{ "INT33C6", LPSS_ADDR(lpt_sdio_dev_desc) },
 +	{ "INT33C0", (unsigned long)&lpt_dev_desc },
 +	{ "INT33C1", (unsigned long)&lpt_dev_desc },
 +	{ "INT33C2", (unsigned long)&lpt_dev_desc },
 +	{ "INT33C3", (unsigned long)&lpt_dev_desc },
 +	{ "INT33C4", (unsigned long)&lpt_uart_dev_desc },
 +	{ "INT33C5", (unsigned long)&lpt_uart_dev_desc },
 +	{ "INT33C6", (unsigned long)&lpt_sdio_dev_desc },
  	{ "INT33C7", },
  
  	/* BayTrail LPSS devices */
 -	{ "80860F09", LPSS_ADDR(byt_pwm_dev_desc) },
 -	{ "80860F0A", LPSS_ADDR(byt_uart_dev_desc) },
 -	{ "80860F0E", LPSS_ADDR(byt_spi_dev_desc) },
 -	{ "80860F14", LPSS_ADDR(byt_sdio_dev_desc) },
 -	{ "80860F41", LPSS_ADDR(byt_i2c_dev_desc) },
 +	{ "80860F0A", (unsigned long)&byt_uart_dev_desc },
 +	{ "80860F0E", (unsigned long)&byt_spi_dev_desc },
 +	{ "80860F14", (unsigned long)&byt_sdio_dev_desc },
 +	{ "80860F41", (unsigned long)&byt_i2c_dev_desc },
  	{ "INT33B2", },
++<<<<<<< HEAD
++=======
+ 	{ "INT33FC", },
+ 
+ 	/* Braswell LPSS devices */
+ 	{ "80862288", LPSS_ADDR(byt_pwm_dev_desc) },
+ 	{ "8086228A", LPSS_ADDR(byt_uart_dev_desc) },
+ 	{ "8086228E", LPSS_ADDR(byt_spi_dev_desc) },
+ 	{ "808622C1", LPSS_ADDR(byt_i2c_dev_desc) },
+ 
+ 	{ "INT3430", LPSS_ADDR(lpt_dev_desc) },
+ 	{ "INT3431", LPSS_ADDR(lpt_dev_desc) },
+ 	{ "INT3432", LPSS_ADDR(lpt_i2c_dev_desc) },
+ 	{ "INT3433", LPSS_ADDR(lpt_i2c_dev_desc) },
+ 	{ "INT3434", LPSS_ADDR(lpt_uart_dev_desc) },
+ 	{ "INT3435", LPSS_ADDR(lpt_uart_dev_desc) },
+ 	{ "INT3436", LPSS_ADDR(lpt_sdio_dev_desc) },
+ 	{ "INT3437", },
+ 
+ 	/* Wildcat Point LPSS devices */
+ 	{ "INT3438", LPSS_ADDR(lpt_dev_desc) },
++>>>>>>> 3f56bf3e939f (ACPI / LPSS: remove struct lpss_shared_clock)
  
  	{ }
  };
@@@ -191,10 -228,11 +241,14 @@@ static int register_device_clock(struc
  				 struct lpss_private_data *pdata)
  {
  	const struct lpss_device_desc *dev_desc = pdata->dev_desc;
++<<<<<<< HEAD
 +	struct lpss_shared_clock *shared_clock = dev_desc->shared_clock;
++=======
+ 	const char *devname = dev_name(&adev->dev);
++>>>>>>> 3f56bf3e939f (ACPI / LPSS: remove struct lpss_shared_clock)
  	struct clk *clk = ERR_PTR(-ENODEV);
  	struct lpss_clk_data *clk_data;
 -	const char *parent, *clk_name;
 -	void __iomem *prv_base;
 +	const char *parent;
  
  	if (!lpss_clk_dev)
  		lpt_register_clock_device();
@@@ -214,25 -247,45 +268,32 @@@
  		return -ENODATA;
  
  	parent = clk_data->name;
 -	prv_base = pdata->mmio_base + dev_desc->prv_offset;
  
++<<<<<<< HEAD
 +	if (shared_clock) {
 +		clk = shared_clock->clk;
 +		if (!clk) {
 +			clk = clk_register_fixed_rate(NULL, shared_clock->name,
 +						      "lpss_clk", 0,
 +						      shared_clock->rate);
 +			shared_clock->clk = clk;
 +		}
 +		parent = shared_clock->name;
 +	}
 +
 +	if (dev_desc->clk_gate) {
 +		clk = clk_register_gate(NULL, dev_name(&adev->dev), parent, 0,
 +					pdata->mmio_base + dev_desc->prv_offset,
 +					0, 0, NULL);
 +		pdata->clk = clk;
++=======
+ 	if (pdata->fixed_clk_rate) {
+ 		clk = clk_register_fixed_rate(NULL, devname, parent, 0,
+ 					      pdata->fixed_clk_rate);
+ 		goto out;
++>>>>>>> 3f56bf3e939f (ACPI / LPSS: remove struct lpss_shared_clock)
  	}
  
 -	if (dev_desc->flags & LPSS_CLK_GATE) {
 -		clk = clk_register_gate(NULL, devname, parent, 0,
 -					prv_base, 0, 0, NULL);
 -		parent = devname;
 -	}
 -
 -	if (dev_desc->flags & LPSS_CLK_DIVIDER) {
 -		/* Prevent division by zero */
 -		if (!readl(prv_base))
 -			writel(LPSS_CLK_DIVIDER_DEF_MASK, prv_base);
 -
 -		clk_name = kasprintf(GFP_KERNEL, "%s-div", devname);
 -		if (!clk_name)
 -			return -ENOMEM;
 -		clk = clk_register_fractional_divider(NULL, clk_name, parent,
 -						      0, prv_base,
 -						      1, 15, 16, 15, 0, NULL);
 -		parent = clk_name;
 -
 -		clk_name = kasprintf(GFP_KERNEL, "%s-update", devname);
 -		if (!clk_name) {
 -			kfree(parent);
 -			return -ENOMEM;
 -		}
 -		clk = clk_register_gate(NULL, clk_name, parent,
 -					CLK_SET_RATE_PARENT | CLK_SET_RATE_GATE,
 -					prv_base, 31, 0, NULL);
 -		kfree(parent);
 -		kfree(clk_name);
 -	}
 -out:
  	if (IS_ERR(clk))
  		return PTR_ERR(clk);
  
* Unmerged path drivers/acpi/acpi_lpss.c
