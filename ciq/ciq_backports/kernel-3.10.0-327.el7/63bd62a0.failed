virtio_pci: defer kfree until release callback

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] virtio-pci: defer kfree until release callback (Jason Wang) [1227339]
Rebuild_FUZZ: 97.83%
commit-author Sasha Levin <sasha.levin@oracle.com>
commit 63bd62a08ca45a0c804c3c89777edc7f76a2d6da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/63bd62a0.failed

A struct device which has just been unregistered can live on past the
point at which a driver decides to drop it's initial reference to the
kobject gained on allocation.

This implies that when releasing a virtio device, we can't free a struct
virtio_device until the underlying struct device has been released,
which might not happen immediately on device_unregister().

Unfortunately, this is exactly what virtio pci does:
it has an empty release callback, and frees memory immediately
after unregistering the device.

This causes an easy to reproduce crash if CONFIG_DEBUG_KOBJECT_RELEASE
it enabled.

To fix, free the memory only once we know the device is gone in the release
callback.

	Cc: stable@vger.kernel.org
	Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>


(cherry picked from commit 63bd62a08ca45a0c804c3c89777edc7f76a2d6da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio_pci_legacy.c
* Unmerged path drivers/virtio/virtio_pci_legacy.c
* Unmerged path drivers/virtio/virtio_pci_legacy.c
