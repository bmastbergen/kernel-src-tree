component: add support for component match array

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Russell King <rmk+kernel@arm.linux.org.uk>
commit 6955b58254c2bcee8a7b55ce06468a645dc98ec5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6955b582.failed

Add support for generating a set of component matches at master probe
time, and submitting them to the component layer.  This allows the
component layer to perform the matches internally without needing to
call into the master driver, and allows for further restructuring of
the component helper.

	Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
	Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
(cherry picked from commit 6955b58254c2bcee8a7b55ce06468a645dc98ec5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/component.c
diff --cc drivers/base/component.c
index 94b7d77a5708,b4236daed4fa..000000000000
--- a/drivers/base/component.c
+++ b/drivers/base/component.c
@@@ -119,37 -157,44 +157,48 @@@ static void master_remove_components(st
  static int try_to_bring_up_master(struct master *master,
  	struct component *component)
  {
 -	int ret;
 +	int ret = 0;
  
 -	if (master->bound)
 -		return 0;
 +	if (!master->bound) {
 +		/*
 +		 * Search the list of components, looking for components that
 +		 * belong to this master, and attach them to the master.
 +		 */
 +		if (master->ops->add_components(master->dev, master)) {
 +			/* Failed to find all components */
 +			master_remove_components(master);
 +			ret = 0;
 +			goto out;
 +		}
  
++<<<<<<< HEAD
 +		if (component && component->master != master) {
 +			master_remove_components(master);
 +			ret = 0;
 +			goto out;
 +		}
 +
 +		/* Found all components */
 +		ret = master->ops->bind(master->dev);
 +		if (ret < 0) {
 +			master_remove_components(master);
 +			goto out;
 +		}
 +
 +		master->bound = true;
 +		ret = 1;
++=======
+ 	/*
+ 	 * Search the list of components, looking for components that
+ 	 * belong to this master, and attach them to the master.
+ 	 */
+ 	if (find_components(master)) {
+ 		/* Failed to find all components */
+ 		ret = 0;
+ 		goto out;
++>>>>>>> 6955b58254c2 (component: add support for component match array)
  	}
 -
 -	if (component && component->master != master) {
 -		ret = 0;
 -		goto out;
 -	}
 -
 -	if (!devres_open_group(master->dev, NULL, GFP_KERNEL)) {
 -		ret = -ENOMEM;
 -		goto out;
 -	}
 -
 -	/* Found all components */
 -	ret = master->ops->bind(master->dev);
 -	if (ret < 0) {
 -		devres_release_group(master->dev, NULL);
 -		dev_info(master->dev, "master bind failed: %d\n", ret);
 -		goto out;
 -	}
 -
 -	master->bound = true;
 -	return 1;
 -
  out:
 -	master_remove_components(master);
  
  	return ret;
  }
* Unmerged path drivers/base/component.c
diff --git a/include/linux/component.h b/include/linux/component.h
index 68870182ca1e..c00dcc302611 100644
--- a/include/linux/component.h
+++ b/include/linux/component.h
@@ -29,4 +29,11 @@ void component_master_del(struct device *,
 int component_master_add_child(struct master *master,
 	int (*compare)(struct device *, void *), void *compare_data);
 
+struct component_match;
+
+int component_master_add_with_match(struct device *,
+	const struct component_master_ops *, struct component_match *);
+void component_match_add(struct device *, struct component_match **,
+	int (*compare)(struct device *, void *), void *compare_data);
+
 #endif
