sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Shradha Shah <sshah@solarflare.com>
commit 910c8789a777c0a18cd997765de291b49bd26906
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/910c8789.failed

Add a set_mac_address() NIC-type function for EF10 only, and
use this to set the MAC address on the vadaptor. For Siena and
earlier, the MAC address continues to be set by MC_CMD_SET_MAC;
this is still called on EF10, and including a MAC address in
this command has no effect.

The sriov_mac_address_changed() NIC-type function is no longer
needed on EF10, but it is needed for Siena where it is used to
update the peer address of the PF for VFDI.  Change this to use
the new set_mac_address function pointer.

efx_ef10_sriov_mac_address_changed() is no longer called, as VFs
will try to change the MAC address on their vadaptor rather than
trying to change to the context of the PF to alter the vport.

When a VF is running in direct passthrough mode with MAC spoofing
enabled, it will be able to change the MAC address on its vadaptor.
In this case, there is a link to the PF, so find the correct VF in
its ef10_vf array and update the MAC address.

ndo_set_mac_address() can be called during driver unload while
bonding, and in this case the device has already been stopped, so
don't call efx_net_open() to restart it after reconfiguration.

efx->port_enabled is set to false in efx_stop_port(), so it is
indicator of whether the device needs to be restarted.

	Signed-off-by: Shradha Shah <sshah@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 910c8789a777c0a18cd997765de291b49bd26906)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/ef10.c
#	drivers/net/ethernet/sfc/ef10_sriov.h
#	drivers/net/ethernet/sfc/efx.c
#	drivers/net/ethernet/sfc/net_driver.h
#	drivers/net/ethernet/sfc/siena.c
diff --cc drivers/net/ethernet/sfc/ef10.c
index 6249861a8939,a547cebff4e2..000000000000
--- a/drivers/net/ethernet/sfc/ef10.c
+++ b/drivers/net/ethernet/sfc/ef10.c
@@@ -3635,9 -4011,112 +3707,113 @@@ static int efx_ef10_ptp_set_ts_config(s
  	}
  }
  
++<<<<<<< HEAD
++=======
+ const struct efx_nic_type efx_hunt_a0_vf_nic_type = {
+ 	.is_vf = true,
+ 	.mem_bar = EFX_MEM_VF_BAR,
+ 	.mem_map_size = efx_ef10_mem_map_size,
+ 	.probe = efx_ef10_probe_vf,
+ 	.remove = efx_ef10_remove,
+ 	.dimension_resources = efx_ef10_dimension_resources,
+ 	.init = efx_ef10_init_nic,
+ 	.fini = efx_port_dummy_op_void,
+ 	.map_reset_reason = efx_ef10_map_reset_reason,
+ 	.map_reset_flags = efx_ef10_map_reset_flags,
+ 	.reset = efx_ef10_reset,
+ 	.probe_port = efx_mcdi_port_probe,
+ 	.remove_port = efx_mcdi_port_remove,
+ 	.fini_dmaq = efx_ef10_fini_dmaq,
+ 	.prepare_flr = efx_ef10_prepare_flr,
+ 	.finish_flr = efx_port_dummy_op_void,
+ 	.describe_stats = efx_ef10_describe_stats,
+ 	.update_stats = efx_ef10_update_stats,
+ 	.start_stats = efx_port_dummy_op_void,
+ 	.pull_stats = efx_port_dummy_op_void,
+ 	.stop_stats = efx_port_dummy_op_void,
+ 	.set_id_led = efx_mcdi_set_id_led,
+ 	.push_irq_moderation = efx_ef10_push_irq_moderation,
+ 	.reconfigure_mac = efx_ef10_mac_reconfigure_vf,
+ 	.check_mac_fault = efx_mcdi_mac_check_fault,
+ 	.reconfigure_port = efx_mcdi_port_reconfigure,
+ 	.get_wol = efx_ef10_get_wol_vf,
+ 	.set_wol = efx_ef10_set_wol_vf,
+ 	.resume_wol = efx_port_dummy_op_void,
+ 	.mcdi_request = efx_ef10_mcdi_request,
+ 	.mcdi_poll_response = efx_ef10_mcdi_poll_response,
+ 	.mcdi_read_response = efx_ef10_mcdi_read_response,
+ 	.mcdi_poll_reboot = efx_ef10_mcdi_poll_reboot,
+ 	.irq_enable_master = efx_port_dummy_op_void,
+ 	.irq_test_generate = efx_ef10_irq_test_generate,
+ 	.irq_disable_non_ev = efx_port_dummy_op_void,
+ 	.irq_handle_msi = efx_ef10_msi_interrupt,
+ 	.irq_handle_legacy = efx_ef10_legacy_interrupt,
+ 	.tx_probe = efx_ef10_tx_probe,
+ 	.tx_init = efx_ef10_tx_init,
+ 	.tx_remove = efx_ef10_tx_remove,
+ 	.tx_write = efx_ef10_tx_write,
+ 	.rx_push_rss_config = efx_ef10_vf_rx_push_rss_config,
+ 	.rx_probe = efx_ef10_rx_probe,
+ 	.rx_init = efx_ef10_rx_init,
+ 	.rx_remove = efx_ef10_rx_remove,
+ 	.rx_write = efx_ef10_rx_write,
+ 	.rx_defer_refill = efx_ef10_rx_defer_refill,
+ 	.ev_probe = efx_ef10_ev_probe,
+ 	.ev_init = efx_ef10_ev_init,
+ 	.ev_fini = efx_ef10_ev_fini,
+ 	.ev_remove = efx_ef10_ev_remove,
+ 	.ev_process = efx_ef10_ev_process,
+ 	.ev_read_ack = efx_ef10_ev_read_ack,
+ 	.ev_test_generate = efx_ef10_ev_test_generate,
+ 	.filter_table_probe = efx_ef10_filter_table_probe,
+ 	.filter_table_restore = efx_ef10_filter_table_restore,
+ 	.filter_table_remove = efx_ef10_filter_table_remove,
+ 	.filter_update_rx_scatter = efx_ef10_filter_update_rx_scatter,
+ 	.filter_insert = efx_ef10_filter_insert,
+ 	.filter_remove_safe = efx_ef10_filter_remove_safe,
+ 	.filter_get_safe = efx_ef10_filter_get_safe,
+ 	.filter_clear_rx = efx_ef10_filter_clear_rx,
+ 	.filter_count_rx_used = efx_ef10_filter_count_rx_used,
+ 	.filter_get_rx_id_limit = efx_ef10_filter_get_rx_id_limit,
+ 	.filter_get_rx_ids = efx_ef10_filter_get_rx_ids,
+ #ifdef CONFIG_RFS_ACCEL
+ 	.filter_rfs_insert = efx_ef10_filter_rfs_insert,
+ 	.filter_rfs_expire_one = efx_ef10_filter_rfs_expire_one,
+ #endif
+ #ifdef CONFIG_SFC_MTD
+ 	.mtd_probe = efx_port_dummy_op_int,
+ #endif
+ 	.ptp_write_host_time = efx_ef10_ptp_write_host_time_vf,
+ 	.ptp_set_ts_config = efx_ef10_ptp_set_ts_config_vf,
+ #ifdef CONFIG_SFC_SRIOV
+ 	.vswitching_probe = efx_ef10_vswitching_probe_vf,
+ 	.vswitching_restore = efx_ef10_vswitching_restore_vf,
+ 	.vswitching_remove = efx_ef10_vswitching_remove_vf,
+ #endif
+ 	.get_mac_address = efx_ef10_get_mac_address_vf,
+ 	.set_mac_address = efx_ef10_set_mac_address,
+ 
+ 	.revision = EFX_REV_HUNT_A0,
+ 	.max_dma_mask = DMA_BIT_MASK(ESF_DZ_TX_KER_BUF_ADDR_WIDTH),
+ 	.rx_prefix_size = ES_DZ_RX_PREFIX_SIZE,
+ 	.rx_hash_offset = ES_DZ_RX_PREFIX_HASH_OFST,
+ 	.rx_ts_offset = ES_DZ_RX_PREFIX_TSTAMP_OFST,
+ 	.can_rx_scatter = true,
+ 	.always_rx_scatter = true,
+ 	.max_interrupt_mode = EFX_INT_MODE_MSIX,
+ 	.timer_period_max = 1 << ERF_DD_EVQ_IND_TIMER_VAL_WIDTH,
+ 	.offload_features = (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM |
+ 			     NETIF_F_RXHASH | NETIF_F_NTUPLE),
+ 	.mcdi_max_ver = 2,
+ 	.max_rx_ip_filters = HUNT_FILTER_TBL_ROWS,
+ 	.hwtstamp_filters = 1 << HWTSTAMP_FILTER_NONE |
+ 			    1 << HWTSTAMP_FILTER_ALL,
+ };
+ 
++>>>>>>> 910c8789a777 (sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC)
  const struct efx_nic_type efx_hunt_a0_nic_type = {
 -	.is_vf = false,
 -	.mem_bar = EFX_MEM_BAR,
  	.mem_map_size = efx_ef10_mem_map_size,
 -	.probe = efx_ef10_probe_pf,
 +	.probe = efx_ef10_probe,
  	.remove = efx_ef10_remove,
  	.dimension_resources = efx_ef10_dimension_resources,
  	.init = efx_ef10_init_nic,
@@@ -3728,6 -4207,13 +3903,16 @@@
  	.sriov_set_vf_vlan = efx_ef10_sriov_set_vf_vlan,
  	.sriov_set_vf_spoofchk = efx_ef10_sriov_set_vf_spoofchk,
  	.sriov_get_vf_config = efx_ef10_sriov_get_vf_config,
++<<<<<<< HEAD
++=======
+ 	.sriov_set_vf_link_state = efx_ef10_sriov_set_vf_link_state,
+ 	.vswitching_probe = efx_ef10_vswitching_probe_pf,
+ 	.vswitching_restore = efx_ef10_vswitching_restore_pf,
+ 	.vswitching_remove = efx_ef10_vswitching_remove_pf,
+ #endif
+ 	.get_mac_address = efx_ef10_get_mac_address_pf,
+ 	.set_mac_address = efx_ef10_set_mac_address,
++>>>>>>> 910c8789a777 (sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC)
  
  	.revision = EFX_REV_HUNT_A0,
  	.max_dma_mask = DMA_BIT_MASK(ESF_DZ_TX_KER_BUF_ADDR_WIDTH),
diff --cc drivers/net/ethernet/sfc/ef10_sriov.h
index 6ea115e3c3f2,b98557670f73..000000000000
--- a/drivers/net/ethernet/sfc/ef10_sriov.h
+++ b/drivers/net/ethernet/sfc/ef10_sriov.h
@@@ -18,41 -35,30 +18,45 @@@ static inline bool efx_ef10_sriov_wante
  }
  
  int efx_ef10_sriov_configure(struct efx_nic *efx, int num_vfs);
++<<<<<<< HEAD
 +
 +static inline int efx_ef10_sriov_init(struct efx_nic *efx)
 +{
 +	return -EOPNOTSUPP;
 +}
 +
 +static inline void efx_ef10_sriov_mac_address_changed(struct efx_nic *efx) {}
++=======
+ int efx_ef10_sriov_init(struct efx_nic *efx);
++>>>>>>> 910c8789a777 (sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC)
  static inline void efx_ef10_sriov_reset(struct efx_nic *efx) {}
 -void efx_ef10_sriov_fini(struct efx_nic *efx);
 +static inline void efx_ef10_sriov_fini(struct efx_nic *efx) {}
  static inline void efx_ef10_sriov_flr(struct efx_nic *efx, unsigned vf_i) {}
  
 -int efx_ef10_sriov_set_vf_mac(struct efx_nic *efx, int vf, u8 *mac);
 -
 -int efx_ef10_sriov_set_vf_vlan(struct efx_nic *efx, int vf_i,
 -			       u16 vlan, u8 qos);
 -
 -int efx_ef10_sriov_set_vf_spoofchk(struct efx_nic *efx, int vf,
 -				   bool spoofchk);
 +#ifdef CONFIG_SFC_SRIOV
 +static inline int efx_ef10_sriov_set_vf_mac(struct efx_nic *efx, int vf,
 +					    u8 *mac)
 +{
 +	return -EOPNOTSUPP;
 +}
  
 -int efx_ef10_sriov_get_vf_config(struct efx_nic *efx, int vf_i,
 -				 struct ifla_vf_info *ivf);
 +static inline int efx_ef10_sriov_set_vf_vlan(struct efx_nic *efx, int vf,
 +					     u16 vlan, u8 qos)
 +{
 +	return -EOPNOTSUPP;
 +}
  
 -int efx_ef10_sriov_set_vf_link_state(struct efx_nic *efx, int vf_i,
 -				     int link_state);
 +static inline int efx_ef10_sriov_set_vf_spoofchk(struct efx_nic *efx, int vf,
 +						 bool spoofchk)
 +{
 +	return -EOPNOTSUPP;
 +}
  
 -int efx_ef10_vswitching_probe_pf(struct efx_nic *efx);
 -int efx_ef10_vswitching_probe_vf(struct efx_nic *efx);
 -int efx_ef10_vswitching_restore_pf(struct efx_nic *efx);
 -int efx_ef10_vswitching_restore_vf(struct efx_nic *efx);
 -void efx_ef10_vswitching_remove_pf(struct efx_nic *efx);
 -void efx_ef10_vswitching_remove_vf(struct efx_nic *efx);
 +static inline int efx_ef10_sriov_get_vf_config(struct efx_nic *efx, int vf,
 +					       struct ifla_vf_info *ivf)
 +{
 +	return -EOPNOTSUPP;
 +}
 +#endif /* CONFIG_SFC_SRIOV */
  
  #endif /* EF10_SRIOV_H */
diff --cc drivers/net/ethernet/sfc/efx.c
index 9557690dd00f,9eafa39d0e7f..000000000000
--- a/drivers/net/ethernet/sfc/efx.c
+++ b/drivers/net/ethernet/sfc/efx.c
@@@ -2175,9 -2224,16 +2175,19 @@@ static int efx_set_mac_address(struct n
  		return -EADDRNOTAVAIL;
  	}
  
 -	/* save old address */
 -	ether_addr_copy(old_addr, net_dev->dev_addr);
  	ether_addr_copy(net_dev->dev_addr, new_addr);
++<<<<<<< HEAD
 +	if (efx->type->sriov_mac_address_changed)
 +		efx->type->sriov_mac_address_changed(efx);
++=======
+ 	if (efx->type->set_mac_address) {
+ 		rc = efx->type->set_mac_address(efx);
+ 		if (rc) {
+ 			ether_addr_copy(net_dev->dev_addr, old_addr);
+ 			return rc;
+ 		}
+ 	}
++>>>>>>> 910c8789a777 (sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC)
  
  	/* Reconfigure the MAC */
  	mutex_lock(&efx->mac_lock);
diff --cc drivers/net/ethernet/sfc/net_driver.h
index a6f4d9aadd40,a468a22e7a88..000000000000
--- a/drivers/net/ethernet/sfc/net_driver.h
+++ b/drivers/net/ethernet/sfc/net_driver.h
@@@ -1333,7 -1338,6 +1334,10 @@@ struct efx_nic_type 
  	int (*sriov_configure)(struct efx_nic *efx, int num_vfs);
  	int (*sriov_init)(struct efx_nic *efx);
  	void (*sriov_fini)(struct efx_nic *efx);
++<<<<<<< HEAD
 +	void (*sriov_mac_address_changed)(struct efx_nic *efx);
++=======
++>>>>>>> 910c8789a777 (sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC)
  	bool (*sriov_wanted)(struct efx_nic *efx);
  	void (*sriov_reset)(struct efx_nic *efx);
  	void (*sriov_flr)(struct efx_nic *efx, unsigned vf_i);
@@@ -1344,6 -1348,13 +1348,16 @@@
  				     bool spoofchk);
  	int (*sriov_get_vf_config)(struct efx_nic *efx, int vf_i,
  				   struct ifla_vf_info *ivi);
++<<<<<<< HEAD
++=======
+ 	int (*sriov_set_vf_link_state)(struct efx_nic *efx, int vf_i,
+ 				       int link_state);
+ 	int (*vswitching_probe)(struct efx_nic *efx);
+ 	int (*vswitching_restore)(struct efx_nic *efx);
+ 	void (*vswitching_remove)(struct efx_nic *efx);
+ 	int (*get_mac_address)(struct efx_nic *efx, unsigned char *perm_addr);
+ 	int (*set_mac_address)(struct efx_nic *efx);
++>>>>>>> 910c8789a777 (sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC)
  
  	int revision;
  	unsigned int txd_ptr_tbl_base;
diff --cc drivers/net/ethernet/sfc/siena.c
index 49792287dd67,b323b9167526..000000000000
--- a/drivers/net/ethernet/sfc/siena.c
+++ b/drivers/net/ethernet/sfc/siena.c
@@@ -1009,6 -1017,11 +1008,14 @@@ const struct efx_nic_type siena_a0_nic_
  	.sriov_set_vf_vlan = efx_siena_sriov_set_vf_vlan,
  	.sriov_set_vf_spoofchk = efx_siena_sriov_set_vf_spoofchk,
  	.sriov_get_vf_config = efx_siena_sriov_get_vf_config,
++<<<<<<< HEAD
++=======
+ 	.vswitching_probe = efx_port_dummy_op_int,
+ 	.vswitching_restore = efx_port_dummy_op_int,
+ 	.vswitching_remove = efx_port_dummy_op_void,
+ 	.set_mac_address = efx_siena_sriov_mac_address_changed,
+ #endif
++>>>>>>> 910c8789a777 (sfc: set the MAC address using MC_CMD_VADAPTOR_SET_MAC)
  
  	.revision = EFX_REV_SIENA_A0,
  	.txd_ptr_tbl_base = FR_BZ_TX_DESC_PTR_TBL,
* Unmerged path drivers/net/ethernet/sfc/ef10.c
* Unmerged path drivers/net/ethernet/sfc/ef10_sriov.h
* Unmerged path drivers/net/ethernet/sfc/efx.c
diff --git a/drivers/net/ethernet/sfc/mcdi_pcol.h b/drivers/net/ethernet/sfc/mcdi_pcol.h
index 9e380fd209d7..b7b941fbc7c4 100644
--- a/drivers/net/ethernet/sfc/mcdi_pcol.h
+++ b/drivers/net/ethernet/sfc/mcdi_pcol.h
@@ -5921,6 +5921,46 @@
 #define    MC_CMD_VADAPTOR_FREE_OUT_LEN 0
 
 
+/***********************************/
+/* MC_CMD_VADAPTOR_SET_MAC
+ * assign a new MAC address to a v-adaptor.
+ */
+#define MC_CMD_VADAPTOR_SET_MAC 0x5d
+
+#define MC_CMD_0x5d_PRIVILEGE_CTG SRIOV_CTG_GENERAL
+
+/* MC_CMD_VADAPTOR_SET_MAC_IN msgrequest */
+#define    MC_CMD_VADAPTOR_SET_MAC_IN_LEN 10
+/* The port to which the v-adaptor is connected. */
+#define       MC_CMD_VADAPTOR_SET_MAC_IN_UPSTREAM_PORT_ID_OFST 0
+/* The new MAC address to assign to this v-adaptor */
+#define       MC_CMD_VADAPTOR_SET_MAC_IN_MACADDR_OFST 4
+#define       MC_CMD_VADAPTOR_SET_MAC_IN_MACADDR_LEN 6
+
+/* MC_CMD_VADAPTOR_SET_MAC_OUT msgresponse */
+#define    MC_CMD_VADAPTOR_SET_MAC_OUT_LEN 0
+
+
+/***********************************/
+/* MC_CMD_VADAPTOR_GET_MAC
+ * read the MAC address assigned to a v-adaptor.
+ */
+#define MC_CMD_VADAPTOR_GET_MAC 0x5e
+
+#define MC_CMD_0x5e_PRIVILEGE_CTG SRIOV_CTG_GENERAL
+
+/* MC_CMD_VADAPTOR_GET_MAC_IN msgrequest */
+#define    MC_CMD_VADAPTOR_GET_MAC_IN_LEN 4
+/* The port to which the v-adaptor is connected. */
+#define       MC_CMD_VADAPTOR_GET_MAC_IN_UPSTREAM_PORT_ID_OFST 0
+
+/* MC_CMD_VADAPTOR_GET_MAC_OUT msgresponse */
+#define    MC_CMD_VADAPTOR_GET_MAC_OUT_LEN 6
+/* The MAC address assigned to this v-adaptor */
+#define       MC_CMD_VADAPTOR_GET_MAC_OUT_MACADDR_OFST 0
+#define       MC_CMD_VADAPTOR_GET_MAC_OUT_MACADDR_LEN 6
+
+
 /***********************************/
 /* MC_CMD_EVB_PORT_ASSIGN
  * assign a port to a PCI function.
diff --git a/drivers/net/ethernet/sfc/mcdi_port.c b/drivers/net/ethernet/sfc/mcdi_port.c
index fb19b70eac01..9bf04cbce20a 100644
--- a/drivers/net/ethernet/sfc/mcdi_port.c
+++ b/drivers/net/ethernet/sfc/mcdi_port.c
@@ -865,6 +865,7 @@ int efx_mcdi_set_mac(struct efx_nic *efx)
 
 	BUILD_BUG_ON(MC_CMD_SET_MAC_OUT_LEN != 0);
 
+	/* This has no effect on EF10 */
 	ether_addr_copy(MCDI_PTR(cmdbytes, SET_MAC_IN_ADDR),
 			efx->net_dev->dev_addr);
 
* Unmerged path drivers/net/ethernet/sfc/net_driver.h
* Unmerged path drivers/net/ethernet/sfc/siena.c
