btrfs: use slab for end_io_wq structures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author David Sterba <dsterba@suse.cz>
commit 97eb6b69d1e856cb5e1cf2c3d94afab643e93128
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/97eb6b69.failed

The structure is frequently reused.  Rename it according to the slab
name.

	Signed-off-by: David Sterba <dsterba@suse.cz>
(cherry picked from commit 97eb6b69d1e856cb5e1cf2c3d94afab643e93128)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/btrfs/disk-io.c
diff --cc fs/btrfs/disk-io.c
index 186fc6ebd6bb,2f075ef20050..000000000000
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@@ -732,8 -756,9 +752,14 @@@ static void end_workqueue_bio(struct bi
  int btrfs_bio_wq_end_io(struct btrfs_fs_info *info, struct bio *bio,
  			enum btrfs_wq_endio_type metadata)
  {
++<<<<<<< HEAD
 +	struct end_io_wq *end_io_wq;
 +	end_io_wq = kmalloc(sizeof(*end_io_wq), GFP_NOFS);
++=======
+ 	struct btrfs_end_io_wq *end_io_wq;
+ 
+ 	end_io_wq = kmem_cache_alloc(btrfs_end_io_wq_cache, GFP_NOFS);
++>>>>>>> 97eb6b69d1e8 (btrfs: use slab for end_io_wq structures)
  	if (!end_io_wq)
  		return -ENOMEM;
  
@@@ -1722,8 -1752,8 +1748,13 @@@ static void end_workqueue_fn(struct btr
  	error = end_io_wq->error;
  	bio->bi_private = end_io_wq->private;
  	bio->bi_end_io = end_io_wq->end_io;
++<<<<<<< HEAD
 +	kfree(end_io_wq);
 +	bio_endio(bio, error);
++=======
+ 	kmem_cache_free(btrfs_end_io_wq_cache, end_io_wq);
+ 	bio_endio_nodec(bio, error);
++>>>>>>> 97eb6b69d1e8 (btrfs: use slab for end_io_wq structures)
  }
  
  static int cleaner_kthread(void *arg)
* Unmerged path fs/btrfs/disk-io.c
diff --git a/fs/btrfs/disk-io.h b/fs/btrfs/disk-io.h
index f4a99a9431c5..0ce5b00b4a85 100644
--- a/fs/btrfs/disk-io.h
+++ b/fs/btrfs/disk-io.h
@@ -140,6 +140,8 @@ int btree_lock_page_hook(struct page *page, void *data,
 				void (*flush_fn)(void *));
 int btrfs_calc_num_tolerated_disk_barrier_failures(
 	struct btrfs_fs_info *fs_info);
+int __init btrfs_end_io_wq_init(void);
+void btrfs_end_io_wq_exit(void);
 
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 void btrfs_init_lockdep(void);
diff --git a/fs/btrfs/super.c b/fs/btrfs/super.c
index 9b57b1f2f0e4..d4f29a337186 100644
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -2007,10 +2007,14 @@ static int __init init_btrfs_fs(void)
 	if (err)
 		goto free_delayed_ref;
 
-	err = btrfs_interface_init();
+	err = btrfs_end_io_wq_init();
 	if (err)
 		goto free_prelim_ref;
 
+	err = btrfs_interface_init();
+	if (err)
+		goto free_end_io_wq;
+
 	btrfs_init_lockdep();
 
 	btrfs_print_info();
@@ -2027,6 +2031,8 @@ static int __init init_btrfs_fs(void)
 
 unregister_ioctl:
 	btrfs_interface_exit();
+free_end_io_wq:
+	btrfs_end_io_wq_exit();
 free_prelim_ref:
 	btrfs_prelim_ref_exit();
 free_delayed_ref:
