ktime: add ktime_after and ktime_before helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Daniel Borkmann <dborkman@redhat.com>
commit 67cb9366ff5f99868100198efba5ca88aaa6ad25
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/67cb9366.failed

Add two minimal helper functions analogous to time_before() and
time_after() that will later on both be needed by SCTP code.

	Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 67cb9366ff5f99868100198efba5ca88aaa6ad25)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sctp/sm_make_chunk.c
diff --cc net/sctp/sm_make_chunk.c
index 1d29f138ad52,ae0e616a7ca5..000000000000
--- a/net/sctp/sm_make_chunk.c
+++ b/net/sctp/sm_make_chunk.c
@@@ -1760,11 -1778,11 +1760,15 @@@ no_hmac
  	 * down the new association establishment instead of every packet.
  	 */
  	if (sock_flag(ep->base.sk, SOCK_TIMESTAMP))
 -		kt = skb_get_ktime(skb);
 +		skb_get_timestamp(skb, &tv);
  	else
 -		kt = ktime_get();
 +		do_gettimeofday(&tv);
  
++<<<<<<< HEAD
 +	if (!asoc && tv_lt(bear_cookie->expiration, tv)) {
++=======
+ 	if (!asoc && ktime_before(bear_cookie->expiration, kt)) {
++>>>>>>> 67cb9366ff5f (ktime: add ktime_after and ktime_before helper)
  		/*
  		 * Section 3.3.10.3 Stale Cookie Error (3)
  		 *
diff --git a/include/linux/ktime.h b/include/linux/ktime.h
index 32ff45bdf4ac..ea641c847ce8 100644
--- a/include/linux/ktime.h
+++ b/include/linux/ktime.h
@@ -310,6 +310,30 @@ static inline int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
 	return 0;
 }
 
+/**
+ * ktime_after - Compare if a ktime_t value is bigger than another one.
+ * @cmp1:	comparable1
+ * @cmp2:	comparable2
+ *
+ * Return: true if cmp1 happened after cmp2.
+ */
+static inline bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
+{
+	return ktime_compare(cmp1, cmp2) > 0;
+}
+
+/**
+ * ktime_before - Compare if a ktime_t value is smaller than another one.
+ * @cmp1:	comparable1
+ * @cmp2:	comparable2
+ *
+ * Return: true if cmp1 happened before cmp2.
+ */
+static inline bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
+{
+	return ktime_compare(cmp1, cmp2) < 0;
+}
+
 static inline s64 ktime_to_us(const ktime_t kt)
 {
 	struct timeval tv = ktime_to_timeval(kt);
* Unmerged path net/sctp/sm_make_chunk.c
