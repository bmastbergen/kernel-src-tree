vxlan: Set inner protocol before transmit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Tom Herbert <therbert@google.com>
commit 996c9fd167c99b382bcb9c1eb833b5b4711140ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/996c9fd1.failed

Call skb_set_inner_protocol to set inner Ethernet protocol to
ETH_P_TEB before transmit. This is needed for GSO with UDP tunnels.

	Signed-off-by: Tom Herbert <therbert@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 996c9fd167c99b382bcb9c1eb833b5b4711140ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/vxlan.c
diff --cc drivers/net/vxlan.c
index 82f83662a0c5,2af795d6ba05..000000000000
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@@ -1617,39 -1610,10 +1617,46 @@@ static int vxlan6_xmit_skb(struct net *
  	vxh->vx_flags = htonl(VXLAN_FLAGS);
  	vxh->vx_vni = vni;
  
++<<<<<<< HEAD
 +	__skb_push(skb, sizeof(*uh));
 +	skb_reset_transport_header(skb);
 +	uh = udp_hdr(skb);
 +
 +	uh->dest = dst_port;
 +	uh->source = src_port;
 +
 +	uh->len = htons(skb->len);
 +
 +	memset(&(IPCB(skb)->opt), 0, sizeof(IPCB(skb)->opt));
 +	IPCB(skb)->flags &= ~(IPSKB_XFRM_TUNNEL_SIZE | IPSKB_XFRM_TRANSFORMED |
 +			      IPSKB_REROUTED);
 +	skb_dst_drop(skb);
 +	skb_dst_set(skb, dst);
 +
 +	udp6_set_csum(udp_get_no_check6_tx(vs->sock->sk), skb,
 +		      saddr, daddr, skb->len);
 +
 +	__skb_push(skb, sizeof(*ip6h));
 +	skb_reset_network_header(skb);
 +	ip6h		  = ipv6_hdr(skb);
 +	ip6h->version	  = 6;
 +	ip6h->priority	  = prio;
 +	ip6h->flow_lbl[0] = 0;
 +	ip6h->flow_lbl[1] = 0;
 +	ip6h->flow_lbl[2] = 0;
 +	ip6h->payload_len = htons(skb->len);
 +	ip6h->nexthdr     = IPPROTO_UDP;
 +	ip6h->hop_limit   = ttl;
 +	ip6h->daddr	  = *daddr;
 +	ip6h->saddr	  = *saddr;
 +
 +	ip6tunnel_xmit(skb, dev);
++=======
+ 	skb_set_inner_protocol(skb, htons(ETH_P_TEB));
+ 
+ 	udp_tunnel6_xmit_skb(vs->sock, dst, skb, dev, saddr, daddr, prio,
+ 			     ttl, src_port, dst_port);
++>>>>>>> 996c9fd167c9 (vxlan: Set inner protocol before transmit)
  	return 0;
  }
  #endif
@@@ -1690,20 -1654,10 +1697,27 @@@ int vxlan_xmit_skb(struct net *net, str
  	vxh->vx_flags = htonl(VXLAN_FLAGS);
  	vxh->vx_vni = vni;
  
++<<<<<<< HEAD
 +	__skb_push(skb, sizeof(*uh));
 +	skb_reset_transport_header(skb);
 +	uh = udp_hdr(skb);
 +
 +	uh->dest = dst_port;
 +	uh->source = src_port;
 +
 +	uh->len = htons(skb->len);
 +
 +	udp_set_csum(vs->sock->sk->sk_no_check_tx, skb,
 +		     src, dst, skb->len);
 +
 +	return iptunnel_xmit(vs->sock->sk, rt, skb, src, dst, IPPROTO_UDP,
 +			     tos, ttl, df);
++=======
+ 	skb_set_inner_protocol(skb, htons(ETH_P_TEB));
+ 
+ 	return udp_tunnel_xmit_skb(vs->sock, rt, skb, src, dst, tos,
+ 				   ttl, df, src_port, dst_port, xnet);
++>>>>>>> 996c9fd167c9 (vxlan: Set inner protocol before transmit)
  }
  EXPORT_SYMBOL_GPL(vxlan_xmit_skb);
  
* Unmerged path drivers/net/vxlan.c
