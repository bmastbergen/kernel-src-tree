x86: Add support for Intel HWP feature detection.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] Add support for Intel HWP feature detection (Prarit Bhargava) [1214335]
Rebuild_FUZZ: 93.48%
commit-author Dirk Brandewie <dirk.j.brandewie@intel.com>
commit 77873887729aaddec5cd27203a6ce8c4987733e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/77873887.failed

Add support of Hardware Managed Performance States (HWP) described in Volume 3
section 14.4 of the SDM.

One bit CPUID.06H:EAX[bit 7] expresses the presence of the HWP feature on
the processor. The remaining bits CPUID.06H:EAX[bit 8-11] denote the
presense of various HWP features.

	Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 77873887729aaddec5cd27203a6ce8c4987733e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeature.h
diff --cc arch/x86/include/asm/cpufeature.h
index ba9a53d71585,aede2c347bde..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -176,33 -180,38 +176,50 @@@
   * Auxiliary flags: Linux defined - For features scattered in various
   * CPUID levels like 0x6, 0xA etc, word 7
   */
++<<<<<<< HEAD
 +#define X86_FEATURE_IDA		(7*32+ 0) /* Intel Dynamic Acceleration */
 +#define X86_FEATURE_ARAT	(7*32+ 1) /* Always Running APIC Timer */
 +#define X86_FEATURE_CPB		(7*32+ 2) /* AMD Core Performance Boost */
 +#define X86_FEATURE_EPB		(7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
 +#define X86_FEATURE_XSAVEOPT	(7*32+ 4) /* Optimized Xsave */
 +#define X86_FEATURE_PLN		(7*32+ 5) /* Intel Power Limit Notification */
 +#define X86_FEATURE_PTS		(7*32+ 6) /* Intel Package Thermal Status */
 +#define X86_FEATURE_DTHERM	(7*32+ 7) /* Digital Thermal Sensor */
 +#define X86_FEATURE_HW_PSTATE	(7*32+ 8) /* AMD HW-PState */
 +#define X86_FEATURE_PROC_FEEDBACK (7*32+ 9) /* AMD ProcFeedbackInterface */
++=======
+ #define X86_FEATURE_IDA		( 7*32+ 0) /* Intel Dynamic Acceleration */
+ #define X86_FEATURE_ARAT	( 7*32+ 1) /* Always Running APIC Timer */
+ #define X86_FEATURE_CPB		( 7*32+ 2) /* AMD Core Performance Boost */
+ #define X86_FEATURE_EPB		( 7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
+ #define X86_FEATURE_PLN		( 7*32+ 5) /* Intel Power Limit Notification */
+ #define X86_FEATURE_PTS		( 7*32+ 6) /* Intel Package Thermal Status */
+ #define X86_FEATURE_DTHERM	( 7*32+ 7) /* Digital Thermal Sensor */
+ #define X86_FEATURE_HW_PSTATE	( 7*32+ 8) /* AMD HW-PState */
+ #define X86_FEATURE_PROC_FEEDBACK ( 7*32+ 9) /* AMD ProcFeedbackInterface */
+ #define X86_FEATURE_HWP		( 7*32+ 10) /* "hwp" Intel HWP */
+ #define X86_FEATURE_HWP_NOITFY	( 7*32+ 11) /* Intel HWP_NOTIFY */
+ #define X86_FEATURE_HWP_ACT_WINDOW ( 7*32+ 12) /* Intel HWP_ACT_WINDOW */
+ #define X86_FEATURE_HWP_EPP	( 7*32+13) /* Intel HWP_EPP */
+ #define X86_FEATURE_HWP_PKG_REQ ( 7*32+14) /* Intel HWP_PKG_REQ */
++>>>>>>> 77873887729a (x86: Add support for Intel HWP feature detection.)
  
  /* Virtualization flags: Linux defined, word 8 */
 -#define X86_FEATURE_TPR_SHADOW  ( 8*32+ 0) /* Intel TPR Shadow */
 -#define X86_FEATURE_VNMI        ( 8*32+ 1) /* Intel Virtual NMI */
 -#define X86_FEATURE_FLEXPRIORITY ( 8*32+ 2) /* Intel FlexPriority */
 -#define X86_FEATURE_EPT         ( 8*32+ 3) /* Intel Extended Page Table */
 -#define X86_FEATURE_VPID        ( 8*32+ 4) /* Intel Virtual Processor ID */
 -#define X86_FEATURE_NPT		( 8*32+ 5) /* AMD Nested Page Table support */
 -#define X86_FEATURE_LBRV	( 8*32+ 6) /* AMD LBR Virtualization support */
 -#define X86_FEATURE_SVML	( 8*32+ 7) /* "svm_lock" AMD SVM locking MSR */
 -#define X86_FEATURE_NRIPS	( 8*32+ 8) /* "nrip_save" AMD SVM next_rip save */
 -#define X86_FEATURE_TSCRATEMSR  ( 8*32+ 9) /* "tsc_scale" AMD TSC scaling support */
 -#define X86_FEATURE_VMCBCLEAN   ( 8*32+10) /* "vmcb_clean" AMD VMCB clean bits support */
 -#define X86_FEATURE_FLUSHBYASID ( 8*32+11) /* AMD flush-by-ASID support */
 -#define X86_FEATURE_DECODEASSISTS ( 8*32+12) /* AMD Decode Assists support */
 -#define X86_FEATURE_PAUSEFILTER ( 8*32+13) /* AMD filtered pause intercept */
 -#define X86_FEATURE_PFTHRESHOLD ( 8*32+14) /* AMD pause filter threshold */
 -#define X86_FEATURE_VMMCALL     ( 8*32+15) /* Prefer vmmcall to vmcall */
 +#define X86_FEATURE_TPR_SHADOW  (8*32+ 0) /* Intel TPR Shadow */
 +#define X86_FEATURE_VNMI        (8*32+ 1) /* Intel Virtual NMI */
 +#define X86_FEATURE_FLEXPRIORITY (8*32+ 2) /* Intel FlexPriority */
 +#define X86_FEATURE_EPT         (8*32+ 3) /* Intel Extended Page Table */
 +#define X86_FEATURE_VPID        (8*32+ 4) /* Intel Virtual Processor ID */
 +#define X86_FEATURE_NPT		(8*32+ 5) /* AMD Nested Page Table support */
 +#define X86_FEATURE_LBRV	(8*32+ 6) /* AMD LBR Virtualization support */
 +#define X86_FEATURE_SVML	(8*32+ 7) /* "svm_lock" AMD SVM locking MSR */
 +#define X86_FEATURE_NRIPS	(8*32+ 8) /* "nrip_save" AMD SVM next_rip save */
 +#define X86_FEATURE_TSCRATEMSR  (8*32+ 9) /* "tsc_scale" AMD TSC scaling support */
 +#define X86_FEATURE_VMCBCLEAN   (8*32+10) /* "vmcb_clean" AMD VMCB clean bits support */
 +#define X86_FEATURE_FLUSHBYASID (8*32+11) /* AMD flush-by-ASID support */
 +#define X86_FEATURE_DECODEASSISTS (8*32+12) /* AMD Decode Assists support */
 +#define X86_FEATURE_PAUSEFILTER (8*32+13) /* AMD filtered pause intercept */
 +#define X86_FEATURE_PFTHRESHOLD (8*32+14) /* AMD pause filter threshold */
  
  
  /* Intel-defined CPU features, CPUID level 0x00000007:0 (ebx), word 9 */
* Unmerged path arch/x86/include/asm/cpufeature.h
diff --git a/arch/x86/kernel/cpu/scattered.c b/arch/x86/kernel/cpu/scattered.c
index f2cc63e9cf08..a59f636689e8 100644
--- a/arch/x86/kernel/cpu/scattered.c
+++ b/arch/x86/kernel/cpu/scattered.c
@@ -36,6 +36,11 @@ void init_scattered_cpuid_features(struct cpuinfo_x86 *c)
 		{ X86_FEATURE_ARAT,		CR_EAX, 2, 0x00000006, 0 },
 		{ X86_FEATURE_PLN,		CR_EAX, 4, 0x00000006, 0 },
 		{ X86_FEATURE_PTS,		CR_EAX, 6, 0x00000006, 0 },
+		{ X86_FEATURE_HWP,		CR_EAX, 7, 0x00000006, 0 },
+		{ X86_FEATURE_HWP_NOITFY,	CR_EAX, 8, 0x00000006, 0 },
+		{ X86_FEATURE_HWP_ACT_WINDOW,	CR_EAX, 9, 0x00000006, 0 },
+		{ X86_FEATURE_HWP_EPP,		CR_EAX,10, 0x00000006, 0 },
+		{ X86_FEATURE_HWP_PKG_REQ,	CR_EAX,11, 0x00000006, 0 },
 		{ X86_FEATURE_APERFMPERF,	CR_ECX, 0, 0x00000006, 0 },
 		{ X86_FEATURE_EPB,		CR_ECX, 3, 0x00000006, 0 },
 		{ X86_FEATURE_XSAVEOPT,		CR_EAX,	0, 0x0000000d, 1 },
