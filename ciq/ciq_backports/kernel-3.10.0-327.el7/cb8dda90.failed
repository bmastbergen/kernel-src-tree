bonding: change AD_LINK_SPEED_BITMASK to enum to suport more speed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jianhua Xie <Jianhua.Xie@freescale.com>
commit cb8dda90c28e2a13a007ef675a25db6a79991630
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/cb8dda90.failed

Port Key was determined as 16 bits according to the link speed,
duplex and user key (which is yet not supported).  In the old
speed field, 5 bits are for speed [1|10|100|1000|10000]Mbps as
below:
--------------------------------------------------------------
Port key :| User key        | Speed         |       Duplex|
--------------------------------------------------------------
    16                  6               1               0
This patch keeps the old layout, but changes AD_LINK_SPEED_BITMASK
from bit type to an enum type.  In this way, the speed field can
expand speed type from 5 to 32.

CC: Jay Vosburgh <j.vosburgh@gmail.com>
CC: Veaceslav Falico <vfalico@gmail.com>
CC: Andy Gospodarek <andy@greyhouse.net>
CC: David S. Miller <davem@davemloft.net>

	Signed-off-by: Jianhua Xie <jianhua.xie@freescale.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cb8dda90c28e2a13a007ef675a25db6a79991630)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_3ad.c
diff --cc drivers/net/bonding/bond_3ad.c
index 65115ee7b259,6bc27d9a8670..000000000000
--- a/drivers/net/bonding/bond_3ad.c
+++ b/drivers/net/bonding/bond_3ad.c
@@@ -69,24 -71,25 +69,46 @@@
  #define AD_PORT_SELECTED        0x100
  #define AD_PORT_MOVED           0x200
  
++<<<<<<< HEAD
 +// Port Key definitions
 +// key is determined according to the link speed, duplex and
 +// user key(which is yet not supported)
 +//              ------------------------------------------------------------
 +// Port key :   | User key                       |      Speed       |Duplex|
 +//              ------------------------------------------------------------
 +//              16                               6               1 0
 +#define  AD_DUPLEX_KEY_BITS    0x1
 +#define  AD_SPEED_KEY_BITS     0x3E
 +#define  AD_USER_KEY_BITS      0xFFC0
 +
 +//dalloun
 +#define     AD_LINK_SPEED_BITMASK_1MBPS       0x1
 +#define     AD_LINK_SPEED_BITMASK_10MBPS      0x2
 +#define     AD_LINK_SPEED_BITMASK_100MBPS     0x4
 +#define     AD_LINK_SPEED_BITMASK_1000MBPS    0x8
 +#define     AD_LINK_SPEED_BITMASK_10000MBPS   0x10
 +//endalloun
++=======
+ /* Port Key definitions
+  * key is determined according to the link speed, duplex and
+  * user key (which is yet not supported)
+  * --------------------------------------------------------------
+  * Port key :	| User key	| Speed		| Duplex	|
+  * --------------------------------------------------------------
+  * 16		  6		  1		  0
+  */
+ #define  AD_DUPLEX_KEY_MASKS    0x1
+ #define  AD_SPEED_KEY_MASKS     0x3E
+ #define  AD_USER_KEY_MASKS      0xFFC0
+ 
+ enum ad_link_speed_type {
+ 	AD_LINK_SPEED_1MBPS = 1,
+ 	AD_LINK_SPEED_10MBPS,
+ 	AD_LINK_SPEED_100MBPS,
+ 	AD_LINK_SPEED_1000MBPS,
+ 	AD_LINK_SPEED_10000MBPS
+ };
++>>>>>>> cb8dda90c28e (bonding: change AD_LINK_SPEED_BITMASK to enum to suport more speed)
  
  /* compare MAC addresses */
  #define MAC_ADDRESS_EQUAL(A, B)	\
@@@ -1364,9 -1317,10 +1386,16 @@@ static void ad_port_selection_logic(str
  			port->actor_port_aggregator_identifier =
  				port->aggregator->aggregator_identifier;
  
++<<<<<<< HEAD
 +			// update the new aggregator's parameters
 +			// if port was responsed from the end-user
 +			if (port->actor_oper_port_key & AD_DUPLEX_KEY_BITS)
++=======
+ 			/* update the new aggregator's parameters
+ 			 * if port was responsed from the end-user
+ 			 */
+ 			if (port->actor_oper_port_key & AD_DUPLEX_KEY_MASKS)
++>>>>>>> cb8dda90c28e (bonding: change AD_LINK_SPEED_BITMASK to enum to suport more speed)
  				/* if port is full duplex */
  				port->aggregator->is_individual = false;
  			else
@@@ -1922,8 -1845,10 +1951,15 @@@ void bond_3ad_bind_slave(struct slave *
  		port->actor_admin_port_key |= __get_duplex(port);
  		port->actor_admin_port_key |= (__get_link_speed(port) << 1);
  		port->actor_oper_port_key = port->actor_admin_port_key;
++<<<<<<< HEAD
 +		/* if the port is not full duplex, then the port should be not lacp Enabled */
 +		if (!(port->actor_oper_port_key & AD_DUPLEX_KEY_BITS))
++=======
+ 		/* if the port is not full duplex, then the port should be not
+ 		 * lacp Enabled
+ 		 */
+ 		if (!(port->actor_oper_port_key & AD_DUPLEX_KEY_MASKS))
++>>>>>>> cb8dda90c28e (bonding: change AD_LINK_SPEED_BITMASK to enum to suport more speed)
  			port->sm_vars &= ~AD_PORT_LACP_ENABLED;
  		/* actor system is the bond's system */
  		port->actor_system = BOND_AD_INFO(bond).system.sys_mac_addr;
@@@ -2249,12 -2214,12 +2285,12 @@@ void bond_3ad_adapter_speed_changed(str
  		return;
  	}
  
 -	spin_lock_bh(&slave->bond->mode_lock);
 +	__get_state_machine_lock(port);
  
- 	port->actor_admin_port_key &= ~AD_SPEED_KEY_BITS;
+ 	port->actor_admin_port_key &= ~AD_SPEED_KEY_MASKS;
  	port->actor_oper_port_key = port->actor_admin_port_key |=
  		(__get_link_speed(port) << 1);
 -	netdev_dbg(slave->bond->dev, "Port %d changed speed\n", port->actor_port_number);
 +	pr_debug("Port %d changed speed\n", port->actor_port_number);
  	/* there is no need to reselect a new aggregator, just signal the
  	 * state machines to reinitialize
  	 */
@@@ -2282,12 -2247,12 +2318,12 @@@ void bond_3ad_adapter_duplex_changed(st
  		return;
  	}
  
 -	spin_lock_bh(&slave->bond->mode_lock);
 +	__get_state_machine_lock(port);
  
- 	port->actor_admin_port_key &= ~AD_DUPLEX_KEY_BITS;
+ 	port->actor_admin_port_key &= ~AD_DUPLEX_KEY_MASKS;
  	port->actor_oper_port_key = port->actor_admin_port_key |=
  		__get_duplex(port);
 -	netdev_dbg(slave->bond->dev, "Port %d changed duplex\n", port->actor_port_number);
 +	pr_debug("Port %d changed duplex\n", port->actor_port_number);
  	/* there is no need to reselect a new aggregator, just signal the
  	 * state machines to reinitialize
  	 */
@@@ -2335,13 -2300,13 +2371,13 @@@ void bond_3ad_handle_link_change(struc
  	} else {
  		/* link has failed */
  		port->is_enabled = false;
- 		port->actor_admin_port_key &= ~AD_DUPLEX_KEY_BITS;
+ 		port->actor_admin_port_key &= ~AD_DUPLEX_KEY_MASKS;
  		port->actor_oper_port_key = (port->actor_admin_port_key &=
- 					     ~AD_SPEED_KEY_BITS);
+ 					     ~AD_SPEED_KEY_MASKS);
  	}
 -	netdev_dbg(slave->bond->dev, "Port %d changed link status to %s\n",
 -		   port->actor_port_number,
 -		   link == BOND_LINK_UP ? "UP" : "DOWN");
 +	pr_debug("Port %d changed link status to %s",
 +		port->actor_port_number,
 +		(link == BOND_LINK_UP) ? "UP" : "DOWN");
  	/* there is no need to reselect a new aggregator, just signal the
  	 * state machines to reinitialize
  	 */
* Unmerged path drivers/net/bonding/bond_3ad.c
