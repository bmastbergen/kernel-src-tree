perf/x86/uncore: fix initialization of cpumask

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [x86] perf/uncore: fix initialization of cpumask (Jiri Olsa) [1176340]
Rebuild_FUZZ: 95.45%
commit-author Stephane Eranian <eranian@google.com>
commit 411cf180fa00521f9bfb1d022e3ebf059a2d299f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/411cf180.failed

On certain processors, the uncore PMU boxes may only be
msr-bsed or PCI-based. But in both cases, the cpumask,
suggesting on which CPUs to monitor to get full coverage
of the particular PMU, must be created.

However with the current code base, the cpumask was only
created on processor which had at least one MSR-based
uncore PMU. This patch removes that restriction and
ensures the cpumask is created even when there is no
msr-based PMU. For instance, on SNB client where only
a PCI-based memory controller PMU is supported.

	Cc: mingo@elte.hu
	Cc: acme@redhat.com
	Cc: ak@linux.intel.com
	Cc: zheng.z.yan@intel.com
	Cc: peterz@infradead.org
	Signed-off-by: Stephane Eranian <eranian@google.com>
	Signed-off-by: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1392132015-14521-2-git-send-email-eranian@google.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 411cf180fa00521f9bfb1d022e3ebf059a2d299f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/perf_event_intel_uncore.c
diff --cc arch/x86/kernel/cpu/perf_event_intel_uncore.c
index 06d40029dd2c,fe4255b9be55..000000000000
--- a/arch/x86/kernel/cpu/perf_event_intel_uncore.c
+++ b/arch/x86/kernel/cpu/perf_event_intel_uncore.c
@@@ -3814,29 -3808,6 +3814,32 @@@ static int __init uncore_cpu_init(void
  	if (ret)
  		return ret;
  
++<<<<<<< HEAD
 +	cpu_notifier_register_begin();
 +
 +	for_each_online_cpu(cpu) {
 +		int i, phys_id = topology_physical_package_id(cpu);
 +
 +		for_each_cpu(i, &uncore_cpu_mask) {
 +			if (phys_id == topology_physical_package_id(i)) {
 +				phys_id = -1;
 +				break;
 +			}
 +		}
 +		if (phys_id < 0)
 +			continue;
 +
 +		uncore_cpu_prepare(cpu, phys_id);
 +		uncore_event_init_cpu(cpu);
 +	}
 +	on_each_cpu(uncore_cpu_setup, NULL, 1);
 +
 +	__register_cpu_notifier(&uncore_cpu_nb);
 +
 +	cpu_notifier_register_done();
 +
++=======
++>>>>>>> 411cf180fa00 (perf/x86/uncore: fix initialization of cpumask)
  	return 0;
  }
  
* Unmerged path arch/x86/kernel/cpu/perf_event_intel_uncore.c
