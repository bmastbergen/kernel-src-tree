bonding: consolidate ASSERT_RTNL()s and remove the unnecessary

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Nikolay Aleksandrov <nikolay@redhat.com>
commit e0974585e74cc16446bc0690f0545b72aa2a3485
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e0974585.failed

Consolidate the calls to ASSERT_RTNL() before bond_select_active_slave()
inside bond_select_active_slave() itself and remove the ASSERT_RTNL()
from bond_hw_addr_swap() as it's not exported and its only caller -
bond_change_active_slave() already has an ASSERT_RTNL().

	Signed-off-by: Nikolay Aleksandrov <nikolay@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e0974585e74cc16446bc0690f0545b72aa2a3485)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
diff --cc drivers/net/bonding/bond_main.c
index b4cb8784d691,5e7987bba583..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -795,22 -569,14 +795,25 @@@ static void bond_mc_list_flush(struct n
  
  /*--------------------------- Active slave change ---------------------------*/
  
 -/* Update the hardware address list and promisc/allmulti for the new and
 - * old active slaves (if any).  Modes that are not using primary keep all
 - * slaves up date at all times; only the modes that use primary need to call
 - * this function to swap these settings during a failover.
 +/*
 + * Update the mc list and multicast-related flags for the new and
 + * old active slaves (if any) according to the multicast mode, and
 + * promiscuous flags unconditionally.
   */
 -static void bond_hw_addr_swap(struct bonding *bond, struct slave *new_active,
 -			      struct slave *old_active)
 +static void bond_mc_swap(struct bonding *bond, struct slave *new_active,
 +			 struct slave *old_active)
  {
++<<<<<<< HEAD
 +	struct netdev_hw_addr *ha;
 +
 +	if (!USES_PRIMARY(bond->params.mode))
 +		/* nothing to do -  mc list is already up-to-date on
 +		 * all slaves
 +		 */
 +		return;
 +
++=======
++>>>>>>> e0974585e74c (bonding: consolidate ASSERT_RTNL()s and remove the unnecessary)
  	if (old_active) {
  		if (bond->dev->flags & IFF_PROMISC)
  			dev_set_promiscuity(old_active->dev, -1);
@@@ -1131,8 -874,10 +1134,10 @@@ void bond_select_active_slave(struct bo
  	struct slave *best_slave;
  	int rv;
  
+ 	ASSERT_RTNL();
+ 
  	best_slave = bond_find_best_slave(bond);
 -	if (best_slave != rtnl_dereference(bond->curr_active_slave)) {
 +	if (best_slave != bond->curr_active_slave) {
  		bond_change_active_slave(bond, best_slave);
  		rv = bond_set_carrier(bond);
  		if (!rv)
@@@ -2336,11 -2004,8 +2341,10 @@@ static void bond_miimon_commit(struct b
  		}
  
  do_failover:
- 		ASSERT_RTNL();
  		block_netpoll_tx();
 +		write_lock_bh(&bond->curr_slave_lock);
  		bond_select_active_slave(bond);
 +		write_unlock_bh(&bond->curr_slave_lock);
  		unblock_netpoll_tx();
  	}
  
@@@ -2912,11 -2597,8 +2916,10 @@@ static void bond_ab_arp_commit(struct b
  		}
  
  do_failover:
- 		ASSERT_RTNL();
  		block_netpoll_tx();
 +		write_lock_bh(&bond->curr_slave_lock);
  		bond_select_active_slave(bond);
 +		write_unlock_bh(&bond->curr_slave_lock);
  		unblock_netpoll_tx();
  	}
  
* Unmerged path drivers/net/bonding/bond_main.c
