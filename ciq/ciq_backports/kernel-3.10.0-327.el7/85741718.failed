bonding: add proper __rcu annotation for current_arp_slave

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 8574171833b24fda5101e1aa892a38c0d91d083e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/85741718.failed

Using __rcu annotation actually helps to spot all accesses to
bond->current_arp_slave are correctly protected, with LOCKDEP support.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reviewed-by: Nikolay Aleksandrov <nikolay@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8574171833b24fda5101e1aa892a38c0d91d083e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
#	drivers/net/bonding/bonding.h
diff --cc drivers/net/bonding/bond_main.c
index aa34e1bea1e8,6d3b8db882a1..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -1978,12 -1709,19 +1978,12 @@@ static int __bond_release_one(struct ne
  		bond_is_active_slave(slave) ? "active" : "backup",
  		slave_dev->name);
  
 -	oldcurrent = rcu_access_pointer(bond->curr_active_slave);
 +	oldcurrent = bond->curr_active_slave;
  
- 	bond->current_arp_slave = NULL;
+ 	RCU_INIT_POINTER(bond->current_arp_slave, NULL);
  
 -	if (!all && (!bond->params.fail_over_mac ||
 -		     BOND_MODE(bond) != BOND_MODE_ACTIVEBACKUP)) {
 -		if (ether_addr_equal_64bits(bond_dev->dev_addr, slave->perm_hwaddr) &&
 -		    bond_has_slaves(bond))
 -			pr_warn("%s: Warning: the permanent HWaddr of %s - %pM - is still in use by %s - set the HWaddr of %s to a different address to avoid conflicts\n",
 -				bond_dev->name, slave_dev->name,
 -				slave->perm_hwaddr,
 -				bond_dev->name, slave_dev->name);
 -	}
 +	/* release the slave from its bond */
 +	bond_detach_slave(bond, slave);
  
  	if (bond->primary_slave == slave)
  		bond->primary_slave = NULL;
@@@ -2815,11 -2569,8 +2815,16 @@@ static int bond_ab_arp_inspect(struct b
  		 * before being taken out
  		 */
  		if (!bond_is_active_slave(slave) &&
++<<<<<<< HEAD
 +		    !bond->current_arp_slave &&
 +		    !time_in_range(jiffies,
 +			slave_last_rx(bond, slave) - delta_in_ticks,
 +			slave_last_rx(bond, slave) + 3 * delta_in_ticks + extra_ticks)) {
 +
++=======
+ 		    !rcu_access_pointer(bond->current_arp_slave) &&
+ 		    !bond_time_in_interval(bond, last_rx, 3)) {
++>>>>>>> 8574171833b2 (bonding: add proper __rcu annotation for current_arp_slave)
  			slave->new_link = BOND_LINK_DOWN;
  			commit++;
  		}
@@@ -2866,22 -2612,24 +2871,37 @@@ static void bond_ab_arp_commit(struct b
  
  		case BOND_LINK_UP:
  			trans_start = dev_trans_start(slave->dev);
++<<<<<<< HEAD
 +			if ((!bond->curr_active_slave &&
 +			     time_in_range(jiffies,
 +					   trans_start - delta_in_ticks,
 +					   trans_start + delta_in_ticks + delta_in_ticks / 2)) ||
 +			    bond->curr_active_slave != slave) {
++=======
+ 			if (rtnl_dereference(bond->curr_active_slave) != slave ||
+ 			    (!rtnl_dereference(bond->curr_active_slave) &&
+ 			     bond_time_in_interval(bond, trans_start, 1))) {
+ 				struct slave *current_arp_slave;
+ 
+ 				current_arp_slave = rtnl_dereference(bond->current_arp_slave);
++>>>>>>> 8574171833b2 (bonding: add proper __rcu annotation for current_arp_slave)
  				slave->link = BOND_LINK_UP;
- 				if (bond->current_arp_slave) {
+ 				if (current_arp_slave) {
  					bond_set_slave_inactive_flags(
++<<<<<<< HEAD
 +						bond->current_arp_slave);
 +					bond->current_arp_slave = NULL;
++=======
+ 						current_arp_slave,
+ 						BOND_SLAVE_NOTIFY_NOW);
+ 					RCU_INIT_POINTER(bond->current_arp_slave, NULL);
++>>>>>>> 8574171833b2 (bonding: add proper __rcu annotation for current_arp_slave)
  				}
  
 -				pr_info("%s: link status definitely up for interface %s\n",
 +				pr_info("%s: link status definitely up for interface %s.\n",
  					bond->dev->name, slave->dev->name);
  
 -				if (!rtnl_dereference(bond->curr_active_slave) ||
 +				if (!bond->curr_active_slave ||
  				    (slave == bond->primary_slave))
  					goto do_failover;
  
@@@ -2899,8 -2648,8 +2919,13 @@@
  			pr_info("%s: link status definitely down for interface %s, disabling it\n",
  				bond->dev->name, slave->dev->name);
  
++<<<<<<< HEAD
 +			if (slave == bond->curr_active_slave) {
 +				bond->current_arp_slave = NULL;
++=======
+ 			if (slave == rtnl_dereference(bond->curr_active_slave)) {
+ 				RCU_INIT_POINTER(bond->current_arp_slave, NULL);
++>>>>>>> 8574171833b2 (bonding: add proper __rcu annotation for current_arp_slave)
  				goto do_failover;
  			}
  
diff --cc drivers/net/bonding/bonding.h
index 64c0cb81e478,b2e548e9d738..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -216,9 -194,8 +216,14 @@@ struct slave 
   */
  struct bonding {
  	struct   net_device *dev; /* first - useful for panic debug */
++<<<<<<< HEAD
 +	struct   slave *first_slave;
 +	struct   slave *curr_active_slave;
 +	struct   slave *current_arp_slave;
++=======
+ 	struct   slave __rcu *curr_active_slave;
+ 	struct   slave __rcu *current_arp_slave;
++>>>>>>> 8574171833b2 (bonding: add proper __rcu annotation for current_arp_slave)
  	struct   slave *primary_slave;
  	bool     force_primary;
  	s32      slave_cnt; /* never change this value outside the attach/detach wrappers */
* Unmerged path drivers/net/bonding/bond_main.c
* Unmerged path drivers/net/bonding/bonding.h
