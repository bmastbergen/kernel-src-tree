cxgb4: add cxgb4_fcoe.c for FCoE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] revert "cxgb4: add cxgb4_fcoe.c for FCoE" (Sai Vemuri) [1258657]
Rebuild_FUZZ: 87.67%
commit-author Varun Prakash <varun@chelsio.com>
commit 84a200b390d60fd84293670a089d0c864e35d0b1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/84a200b3.failed

This patch adds cxgb4_fcoe.c and enables FCOE_CRC, FCOE_MTU
net device features.

	Signed-off-by: Varun Prakash <varun@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 84a200b390d60fd84293670a089d0c864e35d0b1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
#	drivers/net/ethernet/chelsio/cxgb4/sge.c
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index 2a3e5627b439,e40e283ff36c..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@@ -1337,6 -1248,52 +1337,55 @@@ static int del_filter_wr(struct adapte
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static u16 cxgb_select_queue(struct net_device *dev, struct sk_buff *skb,
+ 			     void *accel_priv, select_queue_fallback_t fallback)
+ {
+ 	int txq;
+ 
+ #ifdef CONFIG_CHELSIO_T4_DCB
+ 	/* If a Data Center Bridging has been successfully negotiated on this
+ 	 * link then we'll use the skb's priority to map it to a TX Queue.
+ 	 * The skb's priority is determined via the VLAN Tag Priority Code
+ 	 * Point field.
+ 	 */
+ 	if (cxgb4_dcb_enabled(dev)) {
+ 		u16 vlan_tci;
+ 		int err;
+ 
+ 		err = vlan_get_tag(skb, &vlan_tci);
+ 		if (unlikely(err)) {
+ 			if (net_ratelimit())
+ 				netdev_warn(dev,
+ 					    "TX Packet without VLAN Tag on DCB Link\n");
+ 			txq = 0;
+ 		} else {
+ 			txq = (vlan_tci & VLAN_PRIO_MASK) >> VLAN_PRIO_SHIFT;
+ #ifdef CONFIG_CHELSIO_T4_FCOE
+ 			if (skb->protocol == htons(ETH_P_FCOE))
+ 				txq = skb->priority & 0x7;
+ #endif /* CONFIG_CHELSIO_T4_FCOE */
+ 		}
+ 		return txq;
+ 	}
+ #endif /* CONFIG_CHELSIO_T4_DCB */
+ 
+ 	if (select_queue) {
+ 		txq = (skb_rx_queue_recorded(skb)
+ 			? skb_get_rx_queue(skb)
+ 			: smp_processor_id());
+ 
+ 		while (unlikely(txq >= dev->real_num_tx_queues))
+ 			txq -= dev->real_num_tx_queues;
+ 
+ 		return txq;
+ 	}
+ 
+ 	return fallback(dev, skb) % dev->real_num_tx_queues;
+ }
+ 
++>>>>>>> 84a200b390d6 (cxgb4: add cxgb4_fcoe.c for FCoE)
  static inline int is_offload(const struct adapter *adap)
  {
  	return adap->params.offload;
@@@ -4795,6 -4582,14 +4844,17 @@@ static const struct net_device_ops cxgb
  #ifdef CONFIG_NET_POLL_CONTROLLER
  	.ndo_poll_controller  = cxgb_netpoll,
  #endif
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CHELSIO_T4_FCOE
+ 	.ndo_fcoe_enable      = cxgb_fcoe_enable,
+ 	.ndo_fcoe_disable     = cxgb_fcoe_disable,
+ #endif /* CONFIG_CHELSIO_T4_FCOE */
+ #ifdef CONFIG_NET_RX_BUSY_POLL
+ 	.ndo_busy_poll        = cxgb_busy_poll,
+ #endif
+ 
++>>>>>>> 84a200b390d6 (cxgb4: add cxgb4_fcoe.c for FCoE)
  };
  
  void t4_fatal_err(struct adapter *adap)
diff --cc drivers/net/ethernet/chelsio/cxgb4/sge.c
index 9797215ec30f,c46e7a938317..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/sge.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/sge.c
@@@ -43,8 -43,15 +43,17 @@@
  #include <linux/export.h>
  #include <net/ipv6.h>
  #include <net/tcp.h>
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NET_RX_BUSY_POLL
+ #include <net/busy_poll.h>
+ #endif /* CONFIG_NET_RX_BUSY_POLL */
+ #ifdef CONFIG_CHELSIO_T4_FCOE
+ #include <scsi/fc/fc_fcoe.h>
+ #endif /* CONFIG_CHELSIO_T4_FCOE */
++>>>>>>> 84a200b390d6 (cxgb4: add cxgb4_fcoe.c for FCoE)
  #include "cxgb4.h"
  #include "t4_regs.h"
 -#include "t4_values.h"
  #include "t4_msg.h"
  #include "t4fw_api.h"
  
@@@ -1183,13 -1198,17 +1234,21 @@@ out_free:	dev_kfree_skb_any(skb)
  		if (skb->ip_summed == CHECKSUM_PARTIAL) {
  			cntrl = hwcsum(skb) | TXPKT_IPCSUM_DIS;
  			q->tx_cso++;
- 		} else
- 			cntrl = TXPKT_L4CSUM_DIS | TXPKT_IPCSUM_DIS;
+ 		}
  	}
  
 -	if (skb_vlan_tag_present(skb)) {
 +	if (vlan_tx_tag_present(skb)) {
  		q->vlan_ins++;
++<<<<<<< HEAD
 +		cntrl |= TXPKT_VLAN_VLD | TXPKT_VLAN(vlan_tx_tag_get(skb));
++=======
+ 		cntrl |= TXPKT_VLAN_VLD | TXPKT_VLAN(skb_vlan_tag_get(skb));
+ #ifdef CONFIG_CHELSIO_T4_FCOE
+ 		if (skb->protocol == htons(ETH_P_FCOE))
+ 			cntrl |= TXPKT_VLAN(
+ 				 ((skb->priority & 0x7) << VLAN_PRIO_SHIFT));
+ #endif /* CONFIG_CHELSIO_T4_FCOE */
++>>>>>>> 84a200b390d6 (cxgb4: add cxgb4_fcoe.c for FCoE)
  	}
  
  	cpl->ctrl0 = htonl(TXPKT_OPCODE(CPL_TX_PKT_XT) |
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.c
new file mode 100644
index 000000000000..062d3c0b5818
--- /dev/null
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.c
@@ -0,0 +1,122 @@
+/*
+ * This file is part of the Chelsio T4 Ethernet driver for Linux.
+ *
+ * Copyright (c) 2015 Chelsio Communications, Inc. All rights reserved.
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * OpenIB.org BSD license below:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      - Redistributions of source code must retain the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer.
+ *
+ *      - Redistributions in binary form must reproduce the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer in the documentation and/or other materials
+ *        provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifdef CONFIG_CHELSIO_T4_FCOE
+
+#include <scsi/fc/fc_fs.h>
+#include <scsi/libfcoe.h>
+#include "cxgb4.h"
+
+bool cxgb_fcoe_sof_eof_supported(struct adapter *adap, struct sk_buff *skb)
+{
+	struct fcoe_hdr *fcoeh = (struct fcoe_hdr *)skb_network_header(skb);
+	u8 sof = fcoeh->fcoe_sof;
+	u8 eof = 0;
+
+	if ((sof != FC_SOF_I3) && (sof != FC_SOF_N3)) {
+		dev_err(adap->pdev_dev, "Unsupported SOF 0x%x\n", sof);
+		return 0;
+	}
+
+	skb_copy_bits(skb, skb->len - 4, &eof, 1);
+
+	if ((eof != FC_EOF_N) && (eof != FC_EOF_T)) {
+		dev_err(adap->pdev_dev, "Unsupported EOF 0x%x\n", eof);
+		return 0;
+	}
+
+	return 1;
+}
+
+/**
+ * cxgb_fcoe_enable - enable FCoE offload features
+ * @netdev: net device
+ *
+ * Returns 0 on success or -EINVAL on failure.
+ */
+int cxgb_fcoe_enable(struct net_device *netdev)
+{
+	struct port_info *pi = netdev_priv(netdev);
+	struct adapter *adap = pi->adapter;
+	struct cxgb_fcoe *fcoe = &pi->fcoe;
+
+	if (is_t4(adap->params.chip))
+		return -EINVAL;
+
+	if (!(adap->flags & FULL_INIT_DONE))
+		return -EINVAL;
+
+	dev_info(adap->pdev_dev, "Enabling FCoE offload features\n");
+
+	netdev->features |= NETIF_F_FCOE_CRC;
+	netdev->vlan_features |= NETIF_F_FCOE_CRC;
+	netdev->features |= NETIF_F_FCOE_MTU;
+	netdev->vlan_features |= NETIF_F_FCOE_MTU;
+
+	netdev_features_change(netdev);
+
+	fcoe->flags |= CXGB_FCOE_ENABLED;
+
+	return 0;
+}
+
+/**
+ * cxgb_fcoe_disable - disable FCoE offload
+ * @netdev: net device
+ *
+ * Returns 0 on success or -EINVAL on failure.
+ */
+int cxgb_fcoe_disable(struct net_device *netdev)
+{
+	struct port_info *pi = netdev_priv(netdev);
+	struct adapter *adap = pi->adapter;
+	struct cxgb_fcoe *fcoe = &pi->fcoe;
+
+	if (!(fcoe->flags & CXGB_FCOE_ENABLED))
+		return -EINVAL;
+
+	dev_info(adap->pdev_dev, "Disabling FCoE offload features\n");
+
+	fcoe->flags &= ~CXGB_FCOE_ENABLED;
+
+	netdev->features &= ~NETIF_F_FCOE_CRC;
+	netdev->vlan_features &= ~NETIF_F_FCOE_CRC;
+	netdev->features &= ~NETIF_F_FCOE_MTU;
+	netdev->vlan_features &= ~NETIF_F_FCOE_MTU;
+
+	netdev_features_change(netdev);
+
+	return 0;
+}
+#endif /* CONFIG_CHELSIO_T4_FCOE */
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/sge.c
