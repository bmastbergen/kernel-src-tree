flowcache: Fix resource leaks on namespace exit.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] flowcache: Fix resource leaks on namespace exit (Phil Sutter) [1243591]
Rebuild_FUZZ: 98.95%
commit-author Steffen Klassert <steffen.klassert@secunet.com>
commit 4a93f5095a628d812b0b30c16d7bacea1efd783c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/4a93f509.failed

We leak an active timer, the hotcpu notifier and all allocated
resources when we exit a namespace. Fix this by introducing a
flow_cache_fini() function where we release the resources before
we exit.

Fixes: ca925cf1534e ("flowcache: Make flow cache name space aware")
	Reported-by: Jakub Kicinski <moorray3@wp.pl>
	Tested-by: Jakub Kicinski <moorray3@wp.pl>
	Cc: Eric Dumazet <eric.dumazet@gmail.com>
	Cc: Fan Du <fan.du@windriver.com>
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4a93f5095a628d812b0b30c16d7bacea1efd783c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/flow.h
#	net/core/flow.c
#	net/xfrm/xfrm_policy.c
diff --cc include/net/flow.h
index 628e11b98c58,64fd24836650..000000000000
--- a/include/net/flow.h
+++ b/include/net/flow.h
@@@ -215,12 -214,15 +215,21 @@@ typedef struct flow_cache_object *(*flo
  		struct net *net, const struct flowi *key, u16 family,
  		u8 dir, struct flow_cache_object *oldobj, void *ctx);
  
++<<<<<<< HEAD
 +extern struct flow_cache_object *flow_cache_lookup(
 +		struct net *net, const struct flowi *key, u16 family,
 +		u8 dir, flow_resolve_t resolver, void *ctx);
++=======
+ struct flow_cache_object *flow_cache_lookup(struct net *net,
+ 					    const struct flowi *key, u16 family,
+ 					    u8 dir, flow_resolve_t resolver,
+ 					    void *ctx);
+ int flow_cache_init(struct net *net);
+ void flow_cache_fini(struct net *net);
++>>>>>>> 4a93f5095a62 (flowcache: Fix resource leaks on namespace exit.)
  
 -void flow_cache_flush(struct net *net);
 -void flow_cache_flush_deferred(struct net *net);
 +extern void flow_cache_flush(void);
 +extern void flow_cache_flush_deferred(void);
  extern atomic_t flow_cache_genid;
  
  #endif
diff --cc net/core/flow.c
index dfa602ceb8cd,31cfb365e0c6..000000000000
--- a/net/core/flow.c
+++ b/net/core/flow.c
@@@ -484,14 -483,23 +484,37 @@@ err
  
  	return -ENOMEM;
  }
++<<<<<<< HEAD
 +
 +static int __init flow_cache_init_global(void)
 +{
 +	flow_cachep = kmem_cache_create("flow_cache",
 +					sizeof(struct flow_cache_entry),
 +					0, SLAB_PANIC, NULL);
 +
 +	return flow_cache_init(&flow_cache_global);
 +}
 +
 +module_init(flow_cache_init_global);
++=======
+ EXPORT_SYMBOL(flow_cache_init);
+ 
+ void flow_cache_fini(struct net *net)
+ {
+ 	int i;
+ 	struct flow_cache *fc = &net->xfrm.flow_cache_global;
+ 
+ 	del_timer_sync(&fc->rnd_timer);
+ 	unregister_hotcpu_notifier(&fc->hotcpu_notifier);
+ 
+ 	for_each_possible_cpu(i) {
+ 		struct flow_cache_percpu *fcp = per_cpu_ptr(fc->percpu, i);
+ 		kfree(fcp->hash_table);
+ 		fcp->hash_table = NULL;
+ 	}
+ 
+ 	free_percpu(fc->percpu);
+ 	fc->percpu = NULL;
+ }
+ EXPORT_SYMBOL(flow_cache_fini);
++>>>>>>> 4a93f5095a62 (flowcache: Fix resource leaks on namespace exit.)
diff --cc net/xfrm/xfrm_policy.c
index 45d7878f13c0,f02f511b7107..000000000000
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@@ -2959,8 -2913,19 +2959,22 @@@ static int __net_init xfrm_net_init(str
  	rv = xfrm_sysctl_init(net);
  	if (rv < 0)
  		goto out_sysctl;
++<<<<<<< HEAD
++=======
+ 	rv = flow_cache_init(net);
+ 	if (rv < 0)
+ 		goto out;
+ 
+ 	/* Initialize the per-net locks here */
+ 	spin_lock_init(&net->xfrm.xfrm_state_lock);
+ 	rwlock_init(&net->xfrm.xfrm_policy_lock);
+ 	mutex_init(&net->xfrm.xfrm_cfg_mutex);
+ 
++>>>>>>> 4a93f5095a62 (flowcache: Fix resource leaks on namespace exit.)
  	return 0;
  
+ out:
+ 	xfrm_sysctl_fini(net);
  out_sysctl:
  	xfrm_policy_fini(net);
  out_policy:
* Unmerged path include/net/flow.h
* Unmerged path net/core/flow.c
* Unmerged path net/xfrm/xfrm_policy.c
