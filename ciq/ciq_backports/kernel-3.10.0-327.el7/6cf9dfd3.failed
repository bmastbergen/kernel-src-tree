net: fib: move metrics parsing to a helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] fib: move metrics parsing to a helper (Florian Westphal) [1254839]
Rebuild_FUZZ: 93.67%
commit-author Florian Westphal <fw@strlen.de>
commit 6cf9dfd3bd62edfff69f11c0f111bc261166e4c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/6cf9dfd3.failed

fib_create_info() is already quite large, so before adding more
code to the metrics section move that to a helper, similar to
ip6_convert_metrics.

	Suggested-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6cf9dfd3bd62edfff69f11c0f111bc261166e4c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/fib_semantics.c
diff --cc net/ipv4/fib_semantics.c
index 33ffde3d859d,88afbae893f0..000000000000
--- a/net/ipv4/fib_semantics.c
+++ b/net/ipv4/fib_semantics.c
@@@ -772,6 -859,61 +772,64 @@@ __be32 fib_info_update_nh_saddr(struct 
  	return nh->nh_saddr;
  }
  
++<<<<<<< HEAD
++=======
+ static bool fib_valid_prefsrc(struct fib_config *cfg, __be32 fib_prefsrc)
+ {
+ 	if (cfg->fc_type != RTN_LOCAL || !cfg->fc_dst ||
+ 	    fib_prefsrc != cfg->fc_dst) {
+ 		int tb_id = cfg->fc_table;
+ 
+ 		if (tb_id == RT_TABLE_MAIN)
+ 			tb_id = RT_TABLE_LOCAL;
+ 
+ 		if (inet_addr_type_table(cfg->fc_nlinfo.nl_net,
+ 					 fib_prefsrc, tb_id) != RTN_LOCAL) {
+ 			return false;
+ 		}
+ 	}
+ 	return true;
+ }
+ 
+ static int
+ fib_convert_metrics(struct fib_info *fi, const struct fib_config *cfg)
+ {
+ 	struct nlattr *nla;
+ 	int remaining;
+ 
+ 	if (!cfg->fc_mx)
+ 		return 0;
+ 
+ 	nla_for_each_attr(nla, cfg->fc_mx, cfg->fc_mx_len, remaining) {
+ 		int type = nla_type(nla);
+ 		u32 val;
+ 
+ 		if (!type)
+ 			continue;
+ 		if (type > RTAX_MAX)
+ 			return -EINVAL;
+ 
+ 		if (type == RTAX_CC_ALGO) {
+ 			char tmp[TCP_CA_NAME_MAX];
+ 
+ 			nla_strlcpy(tmp, nla, sizeof(tmp));
+ 			val = tcp_ca_get_key_by_name(tmp);
+ 			if (val == TCP_CA_UNSPEC)
+ 				return -EINVAL;
+ 		} else {
+ 			val = nla_get_u32(nla);
+ 		}
+ 		if (type == RTAX_ADVMSS && val > 65535 - 40)
+ 			val = 65535 - 40;
+ 		if (type == RTAX_MTU && val > 65535 - 15)
+ 			val = 65535 - 15;
+ 		fi->fib_metrics[type - 1] = val;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 6cf9dfd3bd62 (net: fib: move metrics parsing to a helper)
  struct fib_info *fib_create_info(struct fib_config *cfg)
  {
  	int err;
@@@ -844,27 -986,9 +902,33 @@@
  			goto failure;
  	} endfor_nexthops(fi)
  
++<<<<<<< HEAD
 +	if (cfg->fc_mx) {
 +		struct nlattr *nla;
 +		int remaining;
 +
 +		nla_for_each_attr(nla, cfg->fc_mx, cfg->fc_mx_len, remaining) {
 +			int type = nla_type(nla);
 +
 +			if (type) {
 +				u32 val;
 +
 +				if (type > RTAX_MAX)
 +					goto err_inval;
 +				val = nla_get_u32(nla);
 +				if (type == RTAX_ADVMSS && val > 65535 - 40)
 +					val = 65535 - 40;
 +				if (type == RTAX_MTU && val > 65535 - 15)
 +					val = 65535 - 15;
 +				fi->fib_metrics[type - 1] = val;
 +			}
 +		}
 +	}
++=======
+ 	err = fib_convert_metrics(fi, cfg);
+ 	if (err)
+ 		goto failure;
++>>>>>>> 6cf9dfd3bd62 (net: fib: move metrics parsing to a helper)
  
  	if (cfg->fc_mp) {
  #ifdef CONFIG_IP_ROUTE_MULTIPATH
* Unmerged path net/ipv4/fib_semantics.c
