be2net: move adapter fields alloc/free code to new routines

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Sathya Perla <sathya.perla@emulex.com>
commit 78fad34eb8b22ce588b9ebdab39965210588e4b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/78fad34e.failed

The members of be_adapter struct were being allocated in two separate
routines -- be_ctrl_init() and be_stats_init(). Also, some other members
were allocated elsewhere. This patch moves the alloc/free code into
be_drv_init/cleanup() routines. The be_pci_map_bars() routine that was
called from be_ctrl_init() is now called directly from be_probe().
The new routine be_drv_init() will now be the place-holder for allocating
memory for any new be_adapter{} members in the future.
Some routines needed to be moved to provide forward definitions for their
calls.

	Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
	Signed-off-by: Kalesh AP <kalesh.purayil@emulex.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 78fad34eb8b22ce588b9ebdab39965210588e4b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/emulex/benet/be_main.c
diff --cc drivers/net/ethernet/emulex/benet/be_main.c
index b2184bdb8a43,ae8ad5502db0..000000000000
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@@ -4622,228 -4878,6 +4622,231 @@@ static void be_netdev_init(struct net_d
  	netdev->ethtool_ops = &be_ethtool_ops;
  }
  
++<<<<<<< HEAD
 +static void be_unmap_pci_bars(struct be_adapter *adapter)
 +{
 +	if (adapter->csr)
 +		pci_iounmap(adapter->pdev, adapter->csr);
 +	if (adapter->db)
 +		pci_iounmap(adapter->pdev, adapter->db);
 +}
 +
 +static int db_bar(struct be_adapter *adapter)
 +{
 +	if (lancer_chip(adapter) || !be_physfn(adapter))
 +		return 0;
 +	else
 +		return 4;
 +}
 +
 +static int be_roce_map_pci_bars(struct be_adapter *adapter)
 +{
 +	if (skyhawk_chip(adapter)) {
 +		adapter->roce_db.size = 4096;
 +		adapter->roce_db.io_addr = pci_resource_start(adapter->pdev,
 +							      db_bar(adapter));
 +		adapter->roce_db.total_size = pci_resource_len(adapter->pdev,
 +							       db_bar(adapter));
 +	}
 +	return 0;
 +}
 +
 +static int be_map_pci_bars(struct be_adapter *adapter)
 +{
 +	struct pci_dev *pdev = adapter->pdev;
 +	u8 __iomem *addr;
 +
 +	if (BEx_chip(adapter) && be_physfn(adapter)) {
 +		adapter->csr = pci_iomap(pdev, 2, 0);
 +		if (!adapter->csr)
 +			return -ENOMEM;
 +	}
 +
 +	addr = pci_iomap(pdev, db_bar(adapter), 0);
 +	if (!addr)
 +		goto pci_map_err;
 +	adapter->db = addr;
 +
 +	if (skyhawk_chip(adapter) || BEx_chip(adapter)) {
 +		if (be_physfn(adapter)) {
 +			/* PCICFG is the 2nd BAR in BE2 */
 +			addr = pci_iomap(pdev, BE2_chip(adapter) ? 1 : 0, 0);
 +			if (!addr)
 +				goto pci_map_err;
 +			adapter->pcicfg = addr;
 +		} else {
 +			adapter->pcicfg = adapter->db + SRIOV_VF_PCICFG_OFFSET;
 +		}
 +	}
 +
 +	be_roce_map_pci_bars(adapter);
 +	return 0;
 +
 +pci_map_err:
 +	dev_err(&pdev->dev, "Error in mapping PCI BARs\n");
 +	be_unmap_pci_bars(adapter);
 +	return -ENOMEM;
 +}
 +
 +static void be_ctrl_cleanup(struct be_adapter *adapter)
 +{
 +	struct be_dma_mem *mem = &adapter->mbox_mem_alloced;
 +
 +	be_unmap_pci_bars(adapter);
 +
 +	if (mem->va)
 +		dma_free_coherent(&adapter->pdev->dev, mem->size, mem->va,
 +				  mem->dma);
 +
 +	mem = &adapter->rx_filter;
 +	if (mem->va)
 +		dma_free_coherent(&adapter->pdev->dev, mem->size, mem->va,
 +				  mem->dma);
 +}
 +
 +static int be_ctrl_init(struct be_adapter *adapter)
 +{
 +	struct be_dma_mem *mbox_mem_alloc = &adapter->mbox_mem_alloced;
 +	struct be_dma_mem *mbox_mem_align = &adapter->mbox_mem;
 +	struct be_dma_mem *rx_filter = &adapter->rx_filter;
 +	u32 sli_intf;
 +	int status;
 +
 +	pci_read_config_dword(adapter->pdev, SLI_INTF_REG_OFFSET, &sli_intf);
 +	adapter->sli_family = (sli_intf & SLI_INTF_FAMILY_MASK) >>
 +				 SLI_INTF_FAMILY_SHIFT;
 +	adapter->virtfn = (sli_intf & SLI_INTF_FT_MASK) ? 1 : 0;
 +
 +	status = be_map_pci_bars(adapter);
 +	if (status)
 +		goto done;
 +
 +	mbox_mem_alloc->size = sizeof(struct be_mcc_mailbox) + 16;
 +	mbox_mem_alloc->va = dma_alloc_coherent(&adapter->pdev->dev,
 +						mbox_mem_alloc->size,
 +						&mbox_mem_alloc->dma,
 +						GFP_KERNEL);
 +	if (!mbox_mem_alloc->va) {
 +		status = -ENOMEM;
 +		goto unmap_pci_bars;
 +	}
 +	mbox_mem_align->size = sizeof(struct be_mcc_mailbox);
 +	mbox_mem_align->va = PTR_ALIGN(mbox_mem_alloc->va, 16);
 +	mbox_mem_align->dma = PTR_ALIGN(mbox_mem_alloc->dma, 16);
 +	memset(mbox_mem_align->va, 0, sizeof(struct be_mcc_mailbox));
 +
 +	rx_filter->size = sizeof(struct be_cmd_req_rx_filter);
 +	rx_filter->va = dma_zalloc_coherent(&adapter->pdev->dev,
 +					    rx_filter->size, &rx_filter->dma,
 +					    GFP_KERNEL);
 +	if (!rx_filter->va) {
 +		status = -ENOMEM;
 +		goto free_mbox;
 +	}
 +
 +	mutex_init(&adapter->mbox_lock);
 +	spin_lock_init(&adapter->mcc_lock);
 +	spin_lock_init(&adapter->mcc_cq_lock);
 +
 +	init_completion(&adapter->et_cmd_compl);
 +	pci_save_state(adapter->pdev);
 +	return 0;
 +
 +free_mbox:
 +	dma_free_coherent(&adapter->pdev->dev, mbox_mem_alloc->size,
 +			  mbox_mem_alloc->va, mbox_mem_alloc->dma);
 +
 +unmap_pci_bars:
 +	be_unmap_pci_bars(adapter);
 +
 +done:
 +	return status;
 +}
 +
 +static void be_stats_cleanup(struct be_adapter *adapter)
 +{
 +	struct be_dma_mem *cmd = &adapter->stats_cmd;
 +
 +	if (cmd->va)
 +		dma_free_coherent(&adapter->pdev->dev, cmd->size,
 +				  cmd->va, cmd->dma);
 +}
 +
 +static int be_stats_init(struct be_adapter *adapter)
 +{
 +	struct be_dma_mem *cmd = &adapter->stats_cmd;
 +
 +	if (lancer_chip(adapter))
 +		cmd->size = sizeof(struct lancer_cmd_req_pport_stats);
 +	else if (BE2_chip(adapter))
 +		cmd->size = sizeof(struct be_cmd_req_get_stats_v0);
 +	else if (BE3_chip(adapter))
 +		cmd->size = sizeof(struct be_cmd_req_get_stats_v1);
 +	else
 +		/* ALL non-BE ASICs */
 +		cmd->size = sizeof(struct be_cmd_req_get_stats_v2);
 +
 +	cmd->va = dma_zalloc_coherent(&adapter->pdev->dev, cmd->size, &cmd->dma,
 +				      GFP_KERNEL);
 +	if (!cmd->va)
 +		return -ENOMEM;
 +	return 0;
 +}
 +
 +static void be_remove(struct pci_dev *pdev)
 +{
 +	struct be_adapter *adapter = pci_get_drvdata(pdev);
 +
 +	if (!adapter)
 +		return;
 +
 +	be_roce_dev_remove(adapter);
 +	be_intr_set(adapter, false);
 +
 +	cancel_delayed_work_sync(&adapter->func_recovery_work);
 +
 +	unregister_netdev(adapter->netdev);
 +
 +	be_clear(adapter);
 +
 +	/* tell fw we're done with firing cmds */
 +	be_cmd_fw_clean(adapter);
 +
 +	be_stats_cleanup(adapter);
 +
 +	be_ctrl_cleanup(adapter);
 +
 +	pci_disable_pcie_error_reporting(pdev);
 +
 +	pci_release_regions(pdev);
 +	pci_disable_device(pdev);
 +
 +	free_netdev(adapter->netdev);
 +}
 +
 +static int be_get_initial_config(struct be_adapter *adapter)
 +{
 +	int status, level;
 +
 +	status = be_cmd_get_cntl_attributes(adapter);
 +	if (status)
 +		return status;
 +
 +	/* Must be a power of 2 or else MODULO will BUG_ON */
 +	adapter->be_get_temp_freq = 64;
 +
 +	if (BEx_chip(adapter)) {
 +		level = be_cmd_get_fw_log_level(adapter);
 +		adapter->msg_enable =
 +			level <= FW_LOG_LEVEL_DEFAULT ? NETIF_MSG_HW : 0;
 +	}
 +
 +	adapter->cfg_num_qs = netif_get_num_default_rss_queues();
 +	return 0;
 +}
 +
++=======
++>>>>>>> 78fad34eb8b2 (be2net: move adapter fields alloc/free code to new routines)
  static int lancer_recover_func(struct be_adapter *adapter)
  {
  	struct device *dev = &adapter->pdev->dev;
* Unmerged path drivers/net/ethernet/emulex/benet/be_main.c
