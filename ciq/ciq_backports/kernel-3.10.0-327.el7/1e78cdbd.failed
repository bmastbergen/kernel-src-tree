sched/rt/nohz: Stop scheduler tick if running realtime task

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Rik van Riel <riel@redhat.com>
commit 1e78cdbd9b2266503339accafe0ebdd99b93a531
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/1e78cdbd.failed

If the CPU is running a realtime task that does not round-robin
with another realtime task of equal priority, there is no point
in keeping the scheduler tick going. After all, whenever the
scheduler tick runs, the kernel will just decide not to
reschedule.

Extend sched_can_stop_tick() to recognize these situations, and
inform the rest of the kernel that the scheduler tick can be
stopped.

	Tested-by: Luiz Capitulino <lcapitulino@redhat.com>
	Signed-off-by: Rik van Riel <riel@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: fweisbec@redhat.com
	Cc: mtosatti@redhat.com
Link: http://lkml.kernel.org/r/20150216152349.6a8ed824@annuminas.surriel.com
[ Small cleanliness tweak. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 1e78cdbd9b2266503339accafe0ebdd99b93a531)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index bb1463993f6a,97fe79cf613e..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -682,18 -689,32 +682,45 @@@ static inline bool got_nohz_idle_kick(v
  #ifdef CONFIG_NO_HZ_FULL
  bool sched_can_stop_tick(void)
  {
++<<<<<<< HEAD
 +       struct rq *rq;
++=======
+ 	/*
+ 	 * FIFO realtime policy runs the highest priority task. Other runnable
+ 	 * tasks are of a lower priority. The scheduler tick does nothing.
+ 	 */
+ 	if (current->policy == SCHED_FIFO)
+ 		return true;
+ 
+ 	/*
+ 	 * Round-robin realtime tasks time slice with other tasks at the same
+ 	 * realtime priority. Is this task the only one at this priority?
+ 	 */
+ 	if (current->policy == SCHED_RR) {
+ 		struct sched_rt_entity *rt_se = &current->rt;
+ 
+ 		return rt_se->run_list.prev == rt_se->run_list.next;
+ 	}
+ 
+ 	/*
+ 	 * More than one running task need preemption.
+ 	 * nr_running update is assumed to be visible
+ 	 * after IPI is sent from wakers.
+ 	 */
+ 	if (this_rq()->nr_running > 1)
+ 		return false;
++>>>>>>> 1e78cdbd9b22 (sched/rt/nohz: Stop scheduler tick if running realtime task)
 +
 +       rq = this_rq();
 +
 +       /* Make sure rq->nr_running update is visible after the IPI */
 +       smp_rmb();
 +
 +       /* More than one running task need preemption */
 +       if (rq->nr_running > 1)
 +               return false;
  
 -	return true;
 +       return true;
  }
  #endif /* CONFIG_NO_HZ_FULL */
  
* Unmerged path kernel/sched/core.c
