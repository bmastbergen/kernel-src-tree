rcu: Remove "Experimental" flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit 9a5739d73f9369ba1cdba3889ee4e2f87be25a46
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/9a5739d7.failed

After a release or two, features are no longer experimental.  Therefore,
this commit removes the "Experimental" tag from them.

	Reported-by: Paul Gortmaker <paul.gortmaker@windriver.com>
	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Reviewed-by: Josh Triplett <josh@joshtriplett.org>
(cherry picked from commit 9a5739d73f9369ba1cdba3889ee4e2f87be25a46)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcutree_plugin.h
diff --cc kernel/rcutree_plugin.h
index 1d6c5cb9a366,6b3ccaae93ab..000000000000
--- a/kernel/rcutree_plugin.h
+++ b/kernel/rcutree_plugin.h
@@@ -60,31 -60,30 +60,35 @@@ static void __init rcu_bootup_announce_
  	       CONFIG_RCU_FANOUT);
  #endif
  #ifdef CONFIG_RCU_FANOUT_EXACT
 -	pr_info("\tHierarchical RCU autobalancing is disabled.\n");
 +	printk(KERN_INFO "\tHierarchical RCU autobalancing is disabled.\n");
  #endif
  #ifdef CONFIG_RCU_FAST_NO_HZ
 -	pr_info("\tRCU dyntick-idle grace-period acceleration is enabled.\n");
 +	printk(KERN_INFO
 +	       "\tRCU dyntick-idle grace-period acceleration is enabled.\n");
  #endif
  #ifdef CONFIG_PROVE_RCU
 -	pr_info("\tRCU lockdep checking is enabled.\n");
 +	printk(KERN_INFO "\tRCU lockdep checking is enabled.\n");
  #endif
  #ifdef CONFIG_RCU_TORTURE_TEST_RUNNABLE
 -	pr_info("\tRCU torture testing starts during boot.\n");
 +	printk(KERN_INFO "\tRCU torture testing starts during boot.\n");
  #endif
  #if defined(CONFIG_TREE_PREEMPT_RCU) && !defined(CONFIG_RCU_CPU_STALL_VERBOSE)
 -	pr_info("\tDump stacks of tasks blocking RCU-preempt GP.\n");
 +	printk(KERN_INFO "\tDump stacks of tasks blocking RCU-preempt GP.\n");
  #endif
  #if defined(CONFIG_RCU_CPU_STALL_INFO)
 -	pr_info("\tAdditional per-CPU info printed with stalls.\n");
 +	printk(KERN_INFO "\tAdditional per-CPU info printed with stalls.\n");
  #endif
  #if NUM_RCU_LVL_4 != 0
 -	pr_info("\tFour-level hierarchy is enabled.\n");
 +	printk(KERN_INFO "\tFour-level hierarchy is enabled.\n");
  #endif
  	if (rcu_fanout_leaf != CONFIG_RCU_FANOUT_LEAF)
++<<<<<<< HEAD
 +		printk(KERN_INFO "\tExperimental boot-time adjustment of leaf fanout to %d.\n", rcu_fanout_leaf);
++=======
+ 		pr_info("\tBoot-time adjustment of leaf fanout to %d.\n", rcu_fanout_leaf);
++>>>>>>> 9a5739d73f93 (rcu: Remove "Experimental" flags)
  	if (nr_cpu_ids != NR_CPUS)
 -		pr_info("\tRCU restricting CPUs from NR_CPUS=%d to nr_cpu_ids=%d.\n", NR_CPUS, nr_cpu_ids);
 +		printk(KERN_INFO "\tRCU restricting CPUs from NR_CPUS=%d to nr_cpu_ids=%d.\n", NR_CPUS, nr_cpu_ids);
  #ifdef CONFIG_RCU_NOCB_CPU
  #ifndef CONFIG_RCU_NOCB_CPU_NONE
  	if (!have_rcu_nocb_mask) {
diff --git a/init/Kconfig b/init/Kconfig
index cbaba6dd8f49..9a119b861fd1 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -658,7 +658,7 @@ config RCU_BOOST_DELAY
 	  Accept the default if unsure.
 
 config RCU_NOCB_CPU
-	bool "Offload RCU callback processing from boot-selected CPUs (EXPERIMENTAL"
+	bool "Offload RCU callback processing from boot-selected CPUs"
 	depends on TREE_RCU || TREE_PREEMPT_RCU
 	default n
 	help
* Unmerged path kernel/rcutree_plugin.h
