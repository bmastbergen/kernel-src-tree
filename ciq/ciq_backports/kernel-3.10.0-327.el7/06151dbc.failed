bonding: add arp_interval netlink support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author sfeldma@cumulusnetworks.com <sfeldma@cumulusnetworks.com>
commit 06151dbcf3f76edbe900138cde9e862f429918c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/06151dbc.failed

Add IFLA_BOND_ARP_INTERVAL to allow get/set of bonding parameter
arp_interval via netlink.

	Signed-off-by: Scott Feldman <sfeldma@cumulusnetworks.com>
	Signed-off-by: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 06151dbcf3f76edbe900138cde9e862f429918c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_netlink.c
#	drivers/net/bonding/bond_options.c
#	drivers/net/bonding/bond_sysfs.c
#	drivers/net/bonding/bonding.h
#	include/uapi/linux/if_link.h
diff --cc drivers/net/bonding/bond_netlink.c
index 40e7b1cb4aea,58e71235b75f..000000000000
--- a/drivers/net/bonding/bond_netlink.c
+++ b/drivers/net/bonding/bond_netlink.c
@@@ -23,6 -24,11 +23,14 @@@
  static const struct nla_policy bond_policy[IFLA_BOND_MAX + 1] = {
  	[IFLA_BOND_MODE]		= { .type = NLA_U8 },
  	[IFLA_BOND_ACTIVE_SLAVE]	= { .type = NLA_U32 },
++<<<<<<< HEAD
++=======
+ 	[IFLA_BOND_MIIMON]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_UPDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_DOWNDELAY]		= { .type = NLA_U32 },
+ 	[IFLA_BOND_USE_CARRIER]		= { .type = NLA_U8 },
+ 	[IFLA_BOND_ARP_INTERVAL]	= { .type = NLA_U32 },
++>>>>>>> 06151dbcf3f7 (bonding: add arp_interval netlink support)
  };
  
  static int bond_validate(struct nlattr *tb[], struct nlattr *data[])
@@@ -40,9 -46,13 +48,10 @@@ static int bond_changelink(struct net_d
  			   struct nlattr *tb[], struct nlattr *data[])
  {
  	struct bonding *bond = netdev_priv(bond_dev);
+ 	int miimon = 0;
  	int err;
  
 -	if (!data)
 -		return 0;
 -
 -	if (data[IFLA_BOND_MODE]) {
 +	if (data && data[IFLA_BOND_MODE]) {
  		int mode = nla_get_u8(data[IFLA_BOND_MODE]);
  
  		err = bond_option_mode_set(bond, mode);
@@@ -65,6 -75,47 +74,50 @@@
  		if (err)
  			return err;
  	}
++<<<<<<< HEAD
++=======
+ 	if (data[IFLA_BOND_MIIMON]) {
+ 		miimon = nla_get_u32(data[IFLA_BOND_MIIMON]);
+ 
+ 		err = bond_option_miimon_set(bond, miimon);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_UPDELAY]) {
+ 		int updelay = nla_get_u32(data[IFLA_BOND_UPDELAY]);
+ 
+ 		err = bond_option_updelay_set(bond, updelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_DOWNDELAY]) {
+ 		int downdelay = nla_get_u32(data[IFLA_BOND_DOWNDELAY]);
+ 
+ 		err = bond_option_downdelay_set(bond, downdelay);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_USE_CARRIER]) {
+ 		int use_carrier = nla_get_u8(data[IFLA_BOND_USE_CARRIER]);
+ 
+ 		err = bond_option_use_carrier_set(bond, use_carrier);
+ 		if (err)
+ 			return err;
+ 	}
+ 	if (data[IFLA_BOND_ARP_INTERVAL]) {
+ 		int arp_interval = nla_get_u32(data[IFLA_BOND_ARP_INTERVAL]);
+ 
+ 		if (arp_interval && miimon) {
+ 			pr_err("%s: ARP monitoring cannot be used with MII monitoring.\n",
+ 			       bond->dev->name);
+ 			return -EINVAL;
+ 		}
+ 
+ 		err = bond_option_arp_interval_set(bond, arp_interval);
+ 		if (err)
+ 			return err;
+ 	}
++>>>>>>> 06151dbcf3f7 (bonding: add arp_interval netlink support)
  	return 0;
  }
  
@@@ -83,7 -134,13 +136,17 @@@ static int bond_newlink(struct net *src
  static size_t bond_get_size(const struct net_device *bond_dev)
  {
  	return nla_total_size(sizeof(u8)) +	/* IFLA_BOND_MODE */
++<<<<<<< HEAD
 +		nla_total_size(sizeof(u32));	/* IFLA_BOND_ACTIVE_SLAVE */
++=======
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ACTIVE_SLAVE */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_MIIMON */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_UPDELAY */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_DOWNDELAY */
+ 		nla_total_size(sizeof(u8)) +	/* IFLA_BOND_USE_CARRIER */
+ 		nla_total_size(sizeof(u32)) +	/* IFLA_BOND_ARP_INTERVAL */
+ 		0;
++>>>>>>> 06151dbcf3f7 (bonding: add arp_interval netlink support)
  }
  
  static int bond_fill_info(struct sk_buff *skb,
@@@ -92,10 -149,30 +155,35 @@@
  	struct bonding *bond = netdev_priv(bond_dev);
  	struct net_device *slave_dev = bond_option_active_slave_get(bond);
  
 -	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode))
 +	if (nla_put_u8(skb, IFLA_BOND_MODE, bond->params.mode) ||
 +	    (slave_dev &&
 +	     nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex)))
  		goto nla_put_failure;
++<<<<<<< HEAD
++=======
+ 
+ 	if (slave_dev &&
+ 	    nla_put_u32(skb, IFLA_BOND_ACTIVE_SLAVE, slave_dev->ifindex))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_MIIMON, bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_UPDELAY,
+ 			bond->params.updelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_DOWNDELAY,
+ 			bond->params.downdelay * bond->params.miimon))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u8(skb, IFLA_BOND_USE_CARRIER, bond->params.use_carrier))
+ 		goto nla_put_failure;
+ 
+ 	if (nla_put_u32(skb, IFLA_BOND_ARP_INTERVAL, bond->params.arp_interval))
+ 		goto nla_put_failure;
+ 
++>>>>>>> 06151dbcf3f7 (bonding: add arp_interval netlink support)
  	return 0;
  
  nla_put_failure:
diff --cc drivers/net/bonding/bond_sysfs.c
index 739d4dbe8629,12128bfa88ce..000000000000
--- a/drivers/net/bonding/bond_sysfs.c
+++ b/drivers/net/bonding/bond_sysfs.c
@@@ -573,58 -516,11 +579,66 @@@ static ssize_t bonding_store_arp_interv
  
  	if (!rtnl_trylock())
  		return restart_syscall();
++<<<<<<< HEAD
 +	if (sscanf(buf, "%d", &new_value) != 1) {
 +		pr_err("%s: no arp_interval value specified.\n",
 +		       bond->dev->name);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	if (new_value < 0) {
 +		pr_err("%s: Invalid arp_interval value %d not in range 0-%d; rejected.\n",
 +		       bond->dev->name, new_value, INT_MAX);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	if (bond->params.mode == BOND_MODE_ALB ||
 +	    bond->params.mode == BOND_MODE_TLB ||
 +	    bond->params.mode == BOND_MODE_8023AD) {
 +		pr_info("%s: ARP monitoring cannot be used with ALB/TLB/802.3ad. Only MII monitoring is supported on %s.\n",
 +			bond->dev->name, bond->dev->name);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	pr_info("%s: Setting ARP monitoring interval to %d.\n",
 +		bond->dev->name, new_value);
 +	bond->params.arp_interval = new_value;
 +	if (new_value) {
 +		if (bond->params.miimon) {
 +			pr_info("%s: ARP monitoring cannot be used with MII monitoring. %s Disabling MII monitoring.\n",
 +				bond->dev->name, bond->dev->name);
 +			bond->params.miimon = 0;
 +		}
 +		if (!bond->params.arp_targets[0])
 +			pr_info("%s: ARP monitoring has been set up, but no ARP targets have been specified.\n",
 +				bond->dev->name);
 +	}
 +	if (bond->dev->flags & IFF_UP) {
 +		/* If the interface is up, we may need to fire off
 +		 * the ARP timer.  If the interface is down, the
 +		 * timer will get fired off when the open function
 +		 * is called.
 +		 */
 +		if (!new_value) {
 +			if (bond->params.arp_validate)
 +				bond->recv_probe = NULL;
 +			cancel_delayed_work_sync(&bond->arp_work);
 +		} else {
 +			/* arp_validate can be set only in active-backup mode */
 +			if (bond->params.arp_validate)
 +				bond->recv_probe = bond_arp_rcv;
 +			cancel_delayed_work_sync(&bond->mii_work);
 +			queue_delayed_work(bond->wq, &bond->arp_work, 0);
 +		}
 +	}
 +out:
++=======
+ 
+ 	ret = bond_option_arp_interval_set(bond, new_value);
+ 	if (!ret)
+ 		ret = count;
+ 
++>>>>>>> 06151dbcf3f7 (bonding: add arp_interval netlink support)
  	rtnl_unlock();
  	return ret;
  }
diff --cc drivers/net/bonding/bonding.h
index 743d73f75728,44df2738577d..000000000000
--- a/drivers/net/bonding/bonding.h
+++ b/drivers/net/bonding/bonding.h
@@@ -442,6 -437,15 +442,18 @@@ void bond_setup(struct net_device *bond
  unsigned int bond_get_num_tx_queues(void);
  int bond_netlink_init(void);
  void bond_netlink_fini(void);
++<<<<<<< HEAD
++=======
+ int bond_option_mode_set(struct bonding *bond, int mode);
+ int bond_option_active_slave_set(struct bonding *bond, struct net_device *slave_dev);
+ int bond_option_miimon_set(struct bonding *bond, int miimon);
+ int bond_option_updelay_set(struct bonding *bond, int updelay);
+ int bond_option_downdelay_set(struct bonding *bond, int downdelay);
+ int bond_option_use_carrier_set(struct bonding *bond, int use_carrier);
+ int bond_option_arp_interval_set(struct bonding *bond, int arp_interval);
+ struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond);
+ struct net_device *bond_option_active_slave_get(struct bonding *bond);
++>>>>>>> 06151dbcf3f7 (bonding: add arp_interval netlink support)
  
  struct bond_net {
  	struct net *		net;	/* Associated network namespace */
diff --cc include/uapi/linux/if_link.h
index 4efe6bcb6e67,c73d878afd58..000000000000
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@@ -340,6 -331,11 +340,14 @@@ enum 
  	IFLA_BOND_UNSPEC,
  	IFLA_BOND_MODE,
  	IFLA_BOND_ACTIVE_SLAVE,
++<<<<<<< HEAD
++=======
+ 	IFLA_BOND_MIIMON,
+ 	IFLA_BOND_UPDELAY,
+ 	IFLA_BOND_DOWNDELAY,
+ 	IFLA_BOND_USE_CARRIER,
+ 	IFLA_BOND_ARP_INTERVAL,
++>>>>>>> 06151dbcf3f7 (bonding: add arp_interval netlink support)
  	__IFLA_BOND_MAX,
  };
  
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_netlink.c
* Unmerged path drivers/net/bonding/bond_options.c
* Unmerged path drivers/net/bonding/bond_sysfs.c
* Unmerged path drivers/net/bonding/bonding.h
* Unmerged path include/uapi/linux/if_link.h
