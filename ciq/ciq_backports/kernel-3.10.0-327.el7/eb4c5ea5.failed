firmware: dmi_scan: Rename dmi_table to dmi_decode_table

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [firmware] dmi_scan: Rename dmi_table to dmi_decode_table (Jarod Wilson) [853192]
Rebuild_FUZZ: 90.20%
commit-author Ivan Khoronzhuk <ivan.khoronzhuk@globallogic.com>
commit eb4c5ea50e60aa8faaf6aae762cb06ee1c8e0b8e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/eb4c5ea5.failed

The "dmi_table" function looks like data instance, but it does DMI
table decode. This patch renames it to "dmi_decode_table" name as
more appropriate. That allows us to use "dmi_table" name for correct
purposes.

	Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@globallogic.com>
	Signed-off-by: Jean Delvare <jdelvare@suse.de>
(cherry picked from commit eb4c5ea50e60aa8faaf6aae762cb06ee1c8e0b8e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/dmi_scan.c
diff --cc drivers/firmware/dmi_scan.c
index 6e066c3026ef,14a89123cb7c..000000000000
--- a/drivers/firmware/dmi_scan.c
+++ b/drivers/firmware/dmi_scan.c
@@@ -80,9 -80,9 +80,15 @@@ static char * __init dmi_string(const s
   *	We have to be cautious here. We have seen BIOSes with DMI pointers
   *	pointing to completely the wrong place for example
   */
++<<<<<<< HEAD
 +static void dmi_table(u8 *buf, int len, int num,
 +		      void (*decode)(const struct dmi_header *, void *),
 +		      void *private_data)
++=======
+ static void dmi_decode_table(u8 *buf,
+ 			     void (*decode)(const struct dmi_header *, void *),
+ 			     void *private_data)
++>>>>>>> eb4c5ea50e60 (firmware: dmi_scan: Rename dmi_table to dmi_decode_table)
  {
  	u8 *data = buf;
  	int i = 0;
@@@ -137,7 -135,7 +143,11 @@@ static int __init dmi_walk_early(void (
  	if (buf == NULL)
  		return -1;
  
++<<<<<<< HEAD
 +	dmi_table(buf, dmi_len, dmi_num, decode, NULL);
++=======
+ 	dmi_decode_table(buf, decode, NULL);
++>>>>>>> eb4c5ea50e60 (firmware: dmi_scan: Rename dmi_table to dmi_decode_table)
  
  	add_device_randomness(buf, dmi_len);
  
@@@ -914,9 -902,9 +924,13 @@@ int dmi_walk(void (*decode)(const struc
  	if (buf == NULL)
  		return -1;
  
++<<<<<<< HEAD
 +	dmi_table(buf, dmi_len, dmi_num, decode, private_data);
++=======
+ 	dmi_decode_table(buf, decode, private_data);
++>>>>>>> eb4c5ea50e60 (firmware: dmi_scan: Rename dmi_table to dmi_decode_table)
  
 -	dmi_unmap(buf);
 +	iounmap(buf);
  	return 0;
  }
  EXPORT_SYMBOL_GPL(dmi_walk);
* Unmerged path drivers/firmware/dmi_scan.c
