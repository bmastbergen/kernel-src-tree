net/mlx5_core: Add transport domain alloc/dealloc support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx5_core: Add transport domain alloc/dealloc support (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 96.36%
commit-author Achiad Shochat <achiad@mellanox.com>
commit 56508b5013718e9df783ebb8495461357a97ceda
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/56508b50.failed

Each transport object, namely TIR and TIS, must have a transport domain
number (TDN) identifier.

The driver wrongly assumed that it is OK to use TDN=0 without explicit
TDN allocation from the device.

The TDN will also be used for isolating different processes once user
mode Ethernet will be supported.

	Signed-off-by: Achiad Shochat <achiad@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 56508b5013718e9df783ebb8495461357a97ceda)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/transobj.c
#	drivers/net/ethernet/mellanox/mlx5/core/transobj.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/transobj.c
index 3c555d708af1,8d98b03026d5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/transobj.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/transobj.c
@@@ -34,7 -34,42 +34,46 @@@
  #include "mlx5_core.h"
  #include "transobj.h"
  
++<<<<<<< HEAD
 +int mlx5_create_rq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *rqn)
++=======
+ int mlx5_alloc_transport_domain(struct mlx5_core_dev *dev, u32 *tdn)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(alloc_transport_domain_in)];
+ 	u32 out[MLX5_ST_SZ_DW(alloc_transport_domain_out)];
+ 	int err;
+ 
+ 	memset(in, 0, sizeof(in));
+ 	memset(out, 0, sizeof(out));
+ 
+ 	MLX5_SET(alloc_transport_domain_in, in, opcode,
+ 		 MLX5_CMD_OP_ALLOC_TRANSPORT_DOMAIN);
+ 
+ 	err = mlx5_cmd_exec_check_status(dev, in, sizeof(in), out, sizeof(out));
+ 	if (!err)
+ 		*tdn = MLX5_GET(alloc_transport_domain_out, out,
+ 				transport_domain);
+ 
+ 	return err;
+ }
+ 
+ void mlx5_dealloc_transport_domain(struct mlx5_core_dev *dev, u32 tdn)
+ {
+ 	u32 in[MLX5_ST_SZ_DW(dealloc_transport_domain_in)];
+ 	u32 out[MLX5_ST_SZ_DW(dealloc_transport_domain_out)];
+ 
+ 	memset(in, 0, sizeof(in));
+ 	memset(out, 0, sizeof(out));
+ 
+ 	MLX5_SET(dealloc_transport_domain_in, in, opcode,
+ 		 MLX5_CMD_OP_DEALLOC_TRANSPORT_DOMAIN);
+ 	MLX5_SET(dealloc_transport_domain_in, in, transport_domain, tdn);
+ 
+ 	mlx5_cmd_exec_check_status(dev, in, sizeof(in), out, sizeof(out));
+ }
+ 
+ int mlx5_core_create_rq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *rqn)
++>>>>>>> 56508b501371 (net/mlx5_core: Add transport domain alloc/dealloc support)
  {
  	u32 out[MLX5_ST_SZ_DW(create_rq_out)];
  	int err;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/transobj.h
index 1bc898cc4933,f9ef244710d5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/transobj.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/transobj.h
@@@ -33,15 -33,32 +33,45 @@@
  #ifndef __TRANSOBJ_H__
  #define __TRANSOBJ_H__
  
++<<<<<<< HEAD
 +int mlx5_create_rq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *rqn);
 +int mlx5_modify_rq(struct mlx5_core_dev *dev, u32 rqn, u32 *in, int inlen);
 +void mlx5_destroy_rq(struct mlx5_core_dev *dev, u32 rqn);
 +int mlx5_create_sq(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *sqn);
 +int mlx5_modify_sq(struct mlx5_core_dev *dev, u32 sqn, u32 *in, int inlen);
 +void mlx5_destroy_sq(struct mlx5_core_dev *dev, u32 sqn);
 +int mlx5_create_tir(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *tirn);
 +void mlx5_destroy_tir(struct mlx5_core_dev *dev, u32 tirn);
 +int mlx5_create_tis(struct mlx5_core_dev *dev, u32 *in, int inlen, u32 *tisn);
 +void mlx5_destroy_tis(struct mlx5_core_dev *dev, u32 tisn);
++=======
+ int mlx5_alloc_transport_domain(struct mlx5_core_dev *dev, u32 *tdn);
+ void mlx5_dealloc_transport_domain(struct mlx5_core_dev *dev, u32 tdn);
+ int mlx5_core_create_rq(struct mlx5_core_dev *dev, u32 *in, int inlen,
+ 			u32 *rqn);
+ int mlx5_core_modify_rq(struct mlx5_core_dev *dev, u32 rqn, u32 *in, int inlen);
+ void mlx5_core_destroy_rq(struct mlx5_core_dev *dev, u32 rqn);
+ int mlx5_core_create_sq(struct mlx5_core_dev *dev, u32 *in, int inlen,
+ 			u32 *sqn);
+ int mlx5_core_modify_sq(struct mlx5_core_dev *dev, u32 sqn, u32 *in, int inlen);
+ void mlx5_core_destroy_sq(struct mlx5_core_dev *dev, u32 sqn);
+ int mlx5_core_create_tir(struct mlx5_core_dev *dev, u32 *in, int inlen,
+ 			 u32 *tirn);
+ void mlx5_core_destroy_tir(struct mlx5_core_dev *dev, u32 tirn);
+ int mlx5_core_create_tis(struct mlx5_core_dev *dev, u32 *in, int inlen,
+ 			 u32 *tisn);
+ void mlx5_core_destroy_tis(struct mlx5_core_dev *dev, u32 tisn);
+ int mlx5_core_create_rmp(struct mlx5_core_dev *dev, u32 *in, int inlen,
+ 			 u32 *rmpn);
+ int mlx5_core_modify_rmp(struct mlx5_core_dev *dev, u32 *in, int inlen);
+ int mlx5_core_destroy_rmp(struct mlx5_core_dev *dev, u32 rmpn);
+ int mlx5_core_query_rmp(struct mlx5_core_dev *dev, u32 rmpn, u32 *out);
+ int mlx5_core_arm_rmp(struct mlx5_core_dev *dev, u32 rmpn, u16 lwm);
+ int mlx5_core_create_xsrq(struct mlx5_core_dev *dev, u32 *in, int inlen,
+ 			  u32 *rmpn);
+ int mlx5_core_destroy_xsrq(struct mlx5_core_dev *dev, u32 rmpn);
+ int mlx5_core_query_xsrq(struct mlx5_core_dev *dev, u32 rmpn, u32 *out);
+ int mlx5_core_arm_xsrq(struct mlx5_core_dev *dev, u32 rmpn, u16 lwm);
++>>>>>>> 56508b501371 (net/mlx5_core: Add transport domain alloc/dealloc support)
  
  #endif /* __TRANSOBJ_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/transobj.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/transobj.h
