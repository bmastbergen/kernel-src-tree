blk-mq: get rid of ->cmd_size in the hardware queue

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Jens Axboe <axboe@fb.com>
commit 17ded320706c6316376059cfbe9dccab32c62b42
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/17ded320.failed

We store it in the tag set, we don't need it in the hardware queue.
While removing cmd_size, place ->queue_num further down to avoid
a hole on 64-bit archs. It's not used in any fast paths, so we
can safely move it.

	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 17ded320706c6316376059cfbe9dccab32c62b42)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/blk-mq.h
diff --cc include/linux/blk-mq.h
index a58379f22a1c,d0de259e92b2..000000000000
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@@ -33,7 -34,7 +33,11 @@@ struct blk_mq_hw_ctx 
  	unsigned long		flags;		/* BLK_MQ_F_* flags */
  
  	struct request_queue	*queue;
++<<<<<<< HEAD
 +	unsigned int		queue_num;
++=======
+ 	struct blk_flush_queue	*fq;
++>>>>>>> 17ded320706c (blk-mq: get rid of ->cmd_size in the hardware queue)
  
  	void			*driver_data;
  
@@@ -59,35 -52,15 +63,35 @@@
  #define BLK_MQ_MAX_DISPATCH_ORDER	10
  	unsigned long		dispatched[BLK_MQ_MAX_DISPATCH_ORDER];
  
 +	unsigned int		queue_depth;	/* DEPRECATED: RHEL kABI padding, repurpose? */
  	unsigned int		numa_node;
- 	unsigned int		cmd_size;	/* per-request extra data */
+ 	unsigned int		queue_num;
  
 -	atomic_t		nr_active;
 -
  	struct blk_mq_cpu_notifier	cpu_notifier;
  	struct kobject		kobj;
 +
 +	RH_KABI_EXTEND(struct delayed_work	run_work)
 +	RH_KABI_EXTEND(cpumask_var_t		cpumask)
 +	RH_KABI_EXTEND(int			next_cpu)
 +	RH_KABI_EXTEND(int			next_cpu_batch)
 +
 +	RH_KABI_EXTEND(struct blk_mq_ctxmap	ctx_map)
 +
 +	RH_KABI_EXTEND(atomic_t		nr_active)
  };
  
 +#ifdef __GENKSYMS__
 +struct blk_mq_reg {
 +	struct blk_mq_ops	*ops;
 +	unsigned int		nr_hw_queues;
 +	unsigned int		queue_depth;	/* max hw supported */
 +	unsigned int		reserved_tags;
 +	unsigned int		cmd_size;	/* per-request extra data */
 +	int			numa_node;
 +	unsigned int		timeout;
 +	unsigned int		flags;		/* BLK_MQ_F_* */
 +};
 +#else
  struct blk_mq_tag_set {
  	struct blk_mq_ops	*ops;
  	unsigned int		nr_hw_queues;
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 13238b516d55..9e3ecdf1d02a 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1615,7 +1615,6 @@ static int blk_mq_init_hctx(struct request_queue *q,
 	hctx->queue = q;
 	hctx->queue_num = hctx_idx;
 	hctx->flags = set->flags;
-	hctx->cmd_size = set->cmd_size;
 
 	blk_mq_init_cpu_notifier(&hctx->cpu_notifier,
 					blk_mq_hctx_notify, hctx);
* Unmerged path include/linux/blk-mq.h
