vti6: Simplify error handling in module init and exit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Mathias Krause <minipli@googlemail.com>
commit e59d82fd33f7670cf67fd69cf684aa589ec8340a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/e59d82fd.failed

The error handling in the module init and exit functions can be
shortened to safe us some code.

1/ Remove the code duplications in the init function, jump straight to
the existing cleanup code by adding some labels. Also give the error
message some more value by telling the reason why loading the module has
failed.

2/ Remove the error handling in the exit function as the only legitimate
reason xfrm6_protocol_deregister() might fail is inet6_del_protocol()
returning -1. That, in turn, means some other protocol handler had been
registered for this very protocol in the meantime. But that essentially
means we haven't been handling that protocol any more, anyway. What it
definitely means not is that we "can't deregister protocol". Therefore
just get rid of that bogus warning. It's plain wrong.

	Signed-off-by: Mathias Krause <minipli@googlemail.com>
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
(cherry picked from commit e59d82fd33f7670cf67fd69cf684aa589ec8340a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_vti.c
diff --cc net/ipv6/ip6_vti.c
index fa94409a7aed,b61b0b1bb7ce..000000000000
--- a/net/ipv6/ip6_vti.c
+++ b/net/ipv6/ip6_vti.c
@@@ -974,17 -1089,26 +974,34 @@@ static struct pernet_operations vti6_ne
   **/
  static int __init vti6_tunnel_init(void)
  {
- 	int  err;
+ 	const char *msg;
+ 	int err;
  
+ 	msg = "tunnel device";
  	err = register_pernet_device(&vti6_net_ops);
  	if (err < 0)
- 		goto out_pernet;
+ 		goto pernet_dev_failed;
  
++<<<<<<< HEAD
 +	err = xfrm6_mode_tunnel_input_register(&vti6_handler);
 +	if (err < 0) {
 +		pr_err("%s: can't register vti6\n", __func__);
 +		goto out;
 +	}
++=======
+ 	msg = "tunnel protocols";
+ 	err = xfrm6_protocol_register(&vti_esp6_protocol, IPPROTO_ESP);
+ 	if (err < 0)
+ 		goto xfrm_proto_esp_failed;
+ 	err = xfrm6_protocol_register(&vti_ah6_protocol, IPPROTO_AH);
+ 	if (err < 0)
+ 		goto xfrm_proto_ah_failed;
+ 	err = xfrm6_protocol_register(&vti_ipcomp6_protocol, IPPROTO_COMP);
+ 	if (err < 0)
+ 		goto xfrm_proto_comp_failed;
+ 
+ 	msg = "netlink interface";
++>>>>>>> e59d82fd33f7 (vti6: Simplify error handling in module init and exit)
  	err = rtnl_link_register(&vti6_link_ops);
  	if (err < 0)
  		goto rtnl_link_failed;
@@@ -992,10 -1116,15 +1009,20 @@@
  	return 0;
  
  rtnl_link_failed:
++<<<<<<< HEAD
 +	xfrm6_mode_tunnel_input_deregister(&vti6_handler);
 +out:
++=======
+ 	xfrm6_protocol_deregister(&vti_ipcomp6_protocol, IPPROTO_COMP);
+ xfrm_proto_comp_failed:
+ 	xfrm6_protocol_deregister(&vti_ah6_protocol, IPPROTO_AH);
+ xfrm_proto_ah_failed:
+ 	xfrm6_protocol_deregister(&vti_esp6_protocol, IPPROTO_ESP);
+ xfrm_proto_esp_failed:
++>>>>>>> e59d82fd33f7 (vti6: Simplify error handling in module init and exit)
  	unregister_pernet_device(&vti6_net_ops);
- out_pernet:
+ pernet_dev_failed:
+ 	pr_err("vti6 init: failed to register %s\n", msg);
  	return err;
  }
  
@@@ -1005,9 -1134,9 +1032,15 @@@
  static void __exit vti6_tunnel_cleanup(void)
  {
  	rtnl_link_unregister(&vti6_link_ops);
++<<<<<<< HEAD
 +	if (xfrm6_mode_tunnel_input_deregister(&vti6_handler))
 +		pr_info("%s: can't deregister vti6\n", __func__);
 +
++=======
+ 	xfrm6_protocol_deregister(&vti_ipcomp6_protocol, IPPROTO_COMP);
+ 	xfrm6_protocol_deregister(&vti_ah6_protocol, IPPROTO_AH);
+ 	xfrm6_protocol_deregister(&vti_esp6_protocol, IPPROTO_ESP);
++>>>>>>> e59d82fd33f7 (vti6: Simplify error handling in module init and exit)
  	unregister_pernet_device(&vti6_net_ops);
  }
  
* Unmerged path net/ipv6/ip6_vti.c
