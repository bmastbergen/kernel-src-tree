i40e: Add AOC PHY types to case statements

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Catherine Sullivan <catherine.sullivan@intel.com>
commit 180204c79ffc5c525c51a209291c323b127fb32e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/180204c7.failed

Add the 10G and 40G AOC PHY types to the case statement in get_media_type
and ethtool get_settings so that the correct information gets reported
back to the user.

Change-ID: I1b4849d22199a9acf7c8807166d0317c1faad375
	Signed-off-by: Catherine Sullivan <catherine.sullivan@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 180204c79ffc5c525c51a209291c323b127fb32e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ethtool.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 91b6dd2f6a1b,764305e9d95a..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@@ -311,6 -257,11 +311,14 @@@ static int i40e_get_settings(struct net
  		ecmd->advertising = ADVERTISED_Autoneg |
  				    ADVERTISED_40000baseCR4_Full;
  		break;
++<<<<<<< HEAD
++=======
+ 	case I40E_PHY_TYPE_XLAUI:
+ 	case I40E_PHY_TYPE_XLPPI:
+ 	case I40E_PHY_TYPE_40GBASE_AOC:
+ 		ecmd->supported = SUPPORTED_40000baseCR4_Full;
+ 		break;
++>>>>>>> 180204c79ffc (i40e: Add AOC PHY types to case statements)
  	case I40E_PHY_TYPE_40GBASE_KR4:
  		ecmd->supported = SUPPORTED_Autoneg |
  				  SUPPORTED_40000baseKR4_Full;
@@@ -360,45 -329,136 +368,46 @@@
  	case I40E_PHY_TYPE_XFI:
  	case I40E_PHY_TYPE_SFI:
  	case I40E_PHY_TYPE_10GBASE_SFPP_CU:
+ 	case I40E_PHY_TYPE_10GBASE_AOC:
  		ecmd->supported = SUPPORTED_10000baseT_Full;
  		break;
 -	case I40E_PHY_TYPE_SGMII:
 +	case I40E_PHY_TYPE_1000BASE_KX:
 +	case I40E_PHY_TYPE_1000BASE_T:
  		ecmd->supported = SUPPORTED_Autoneg |
 +				  SUPPORTED_10000baseT_Full |
  				  SUPPORTED_1000baseT_Full |
  				  SUPPORTED_100baseT_Full;
 -		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_1GB)
 -			ecmd->advertising |= ADVERTISED_1000baseT_Full;
 -		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_100MB)
 -			ecmd->advertising |= ADVERTISED_100baseT_Full;
 -		break;
 -	default:
 -		/* if we got here and link is up something bad is afoot */
 -		netdev_info(netdev, "WARNING: Link is up but PHY type 0x%x is not recognized.\n",
 -			    hw_link_info->phy_type);
 -	}
 -
 -	/* Set speed and duplex */
 -	switch (link_speed) {
 -	case I40E_LINK_SPEED_40GB:
 -		/* need a SPEED_40000 in ethtool.h */
 -		ethtool_cmd_speed_set(ecmd, 40000);
 -		break;
 -	case I40E_LINK_SPEED_10GB:
 -		ethtool_cmd_speed_set(ecmd, SPEED_10000);
 -		break;
 -	case I40E_LINK_SPEED_1GB:
 -		ethtool_cmd_speed_set(ecmd, SPEED_1000);
 -		break;
 -	case I40E_LINK_SPEED_100MB:
 -		ethtool_cmd_speed_set(ecmd, SPEED_100);
 -		break;
 -	default:
 -		break;
 -	}
 -	ecmd->duplex = DUPLEX_FULL;
 -}
 -
 -/**
 - * i40e_get_settings_link_down - Get the Link settings for when link is down
 - * @hw: hw structure
 - * @ecmd: ethtool command to fill in
 - *
 - * Reports link settings that can be determined when link is down
 - **/
 -static void i40e_get_settings_link_down(struct i40e_hw *hw,
 -					struct ethtool_cmd *ecmd)
 -{
 -	struct i40e_link_status *hw_link_info = &hw->phy.link_info;
 -
 -	/* link is down and the driver needs to fall back on
 -	 * device ID to determine what kinds of info to display,
 -	 * it's mostly a guess that may change when link is up
 -	 */
 -	switch (hw->device_id) {
 -	case I40E_DEV_ID_QSFP_A:
 -	case I40E_DEV_ID_QSFP_B:
 -	case I40E_DEV_ID_QSFP_C:
 -		/* pluggable QSFP */
 -		ecmd->supported = SUPPORTED_40000baseSR4_Full |
 -				  SUPPORTED_40000baseCR4_Full |
 -				  SUPPORTED_40000baseLR4_Full;
 -		ecmd->advertising = ADVERTISED_40000baseSR4_Full |
 -				    ADVERTISED_40000baseCR4_Full |
 -				    ADVERTISED_40000baseLR4_Full;
 -		break;
 -	case I40E_DEV_ID_KX_B:
 -		/* backplane 40G */
 -		ecmd->supported = SUPPORTED_40000baseKR4_Full;
 -		ecmd->advertising = ADVERTISED_40000baseKR4_Full;
 +		ecmd->advertising = ADVERTISED_Autoneg |
 +				    ADVERTISED_10000baseT_Full |
 +				    ADVERTISED_1000baseT_Full |
 +				    ADVERTISED_100baseT_Full;
  		break;
 -	case I40E_DEV_ID_KX_C:
 -		/* backplane 10G */
 -		ecmd->supported = SUPPORTED_10000baseKR_Full;
 -		ecmd->advertising = ADVERTISED_10000baseKR_Full;
 +	case I40E_PHY_TYPE_100BASE_TX:
 +		ecmd->supported = SUPPORTED_Autoneg |
 +				  SUPPORTED_10000baseT_Full |
 +				  SUPPORTED_1000baseT_Full |
 +				  SUPPORTED_100baseT_Full;
 +		ecmd->advertising = ADVERTISED_Autoneg |
 +				    ADVERTISED_10000baseT_Full |
 +				    ADVERTISED_1000baseT_Full |
 +				    ADVERTISED_100baseT_Full;
  		break;
 -	case I40E_DEV_ID_10G_BASE_T:
 -		ecmd->supported = SUPPORTED_10000baseT_Full |
 +	case I40E_PHY_TYPE_SGMII:
 +		ecmd->supported = SUPPORTED_Autoneg |
  				  SUPPORTED_1000baseT_Full |
  				  SUPPORTED_100baseT_Full;
 -		/* Figure out what has been requested */
 -		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_10GB)
 -			ecmd->advertising |= ADVERTISED_10000baseT_Full;
 -		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_1GB)
 -			ecmd->advertising |= ADVERTISED_1000baseT_Full;
 -		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_100MB)
 -			ecmd->advertising |= ADVERTISED_100baseT_Full;
 +		ecmd->advertising = ADVERTISED_Autoneg |
 +				    ADVERTISED_1000baseT_Full |
 +				    ADVERTISED_100baseT_Full;
  		break;
  	default:
 -		/* all the rest are 10G/1G */
 -		ecmd->supported = SUPPORTED_10000baseT_Full |
 -				  SUPPORTED_1000baseT_Full;
 -		/* Figure out what has been requested */
 -		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_10GB)
 -			ecmd->advertising |= ADVERTISED_10000baseT_Full;
 -		if (hw_link_info->requested_speeds & I40E_LINK_SPEED_1GB)
 -			ecmd->advertising |= ADVERTISED_1000baseT_Full;
 -		break;
 +		/* if we got here and link is up something bad is afoot */
 +		netdev_info(netdev, "WARNING: Link is up but PHY type 0x%x is not recognized.\n",
 +			    hw_link_info->phy_type);
  	}
  
 -	/* With no link speed and duplex are unknown */
 -	ethtool_cmd_speed_set(ecmd, SPEED_UNKNOWN);
 -	ecmd->duplex = DUPLEX_UNKNOWN;
 -}
 -
 -/**
 - * i40e_get_settings - Get Link Speed and Duplex settings
 - * @netdev: network interface device structure
 - * @ecmd: ethtool command
 - *
 - * Reports speed/duplex settings based on media_type
 - **/
 -static int i40e_get_settings(struct net_device *netdev,
 -			     struct ethtool_cmd *ecmd)
 -{
 -	struct i40e_netdev_priv *np = netdev_priv(netdev);
 -	struct i40e_pf *pf = np->vsi->back;
 -	struct i40e_hw *hw = &pf->hw;
 -	struct i40e_link_status *hw_link_info = &hw->phy.link_info;
 -	bool link_up = hw_link_info->link_info & I40E_AQ_LINK_UP;
 -
 -	if (link_up)
 -		i40e_get_settings_link_up(hw, ecmd, netdev);
 -	else
 -		i40e_get_settings_link_down(hw, ecmd);
 -
 -	/* Now set the settings that don't rely on link being up/down */
 -
 -	/* Set autoneg settings */
 +no_valid_phy_type:
 +	/* this is if autoneg is enabled or disabled */
  	ecmd->autoneg = ((hw_link_info->an_info & I40E_AQ_AN_COMPLETED) ?
  			  AUTONEG_ENABLE : AUTONEG_DISABLE);
  
diff --git a/drivers/net/ethernet/intel/i40e/i40e_common.c b/drivers/net/ethernet/intel/i40e/i40e_common.c
index c3192432df32..42a840a8f8b4 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_common.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_common.c
@@ -827,6 +827,8 @@ static enum i40e_media_type i40e_get_media_type(struct i40e_hw *hw)
 	case I40E_PHY_TYPE_10GBASE_CR1:
 	case I40E_PHY_TYPE_40GBASE_CR4:
 	case I40E_PHY_TYPE_10GBASE_SFPP_CU:
+	case I40E_PHY_TYPE_40GBASE_AOC:
+	case I40E_PHY_TYPE_10GBASE_AOC:
 		media = I40E_MEDIA_TYPE_DA;
 		break;
 	case I40E_PHY_TYPE_1000BASE_KX:
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ethtool.c
