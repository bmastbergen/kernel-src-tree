xfs: move directory block translatiosn to xfs_dir2_priv.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Dave Chinner <dchinner@redhat.com>
commit 892e3f342f9888066f1ce56f3683572f0ca9b8e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/892e3f34.failed

Because they aren't actually part of the on-disk format, and so
shouldn't be in xfs_da_format.h.

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>


(cherry picked from commit 892e3f342f9888066f1ce56f3683572f0ca9b8e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_da_format.h
diff --cc fs/xfs/xfs_da_format.h
index a19d3f8f639c,32b415ce7798..000000000000
--- a/fs/xfs/xfs_da_format.h
+++ b/fs/xfs/xfs_da_format.h
@@@ -534,123 -523,6 +523,126 @@@ xfs_dir2_leaf_bests_p(struct xfs_dir2_l
  }
  
  /*
++<<<<<<< HEAD
 + * DB blocks here are logical directory block numbers, not filesystem blocks.
 + */
 +
 +/*
 + * Convert dataptr to byte in file space
 + */
 +static inline xfs_dir2_off_t
 +xfs_dir2_dataptr_to_byte(struct xfs_mount *mp, xfs_dir2_dataptr_t dp)
 +{
 +	return (xfs_dir2_off_t)dp << XFS_DIR2_DATA_ALIGN_LOG;
 +}
 +
 +/*
 + * Convert byte in file space to dataptr.  It had better be aligned.
 + */
 +static inline xfs_dir2_dataptr_t
 +xfs_dir2_byte_to_dataptr(struct xfs_mount *mp, xfs_dir2_off_t by)
 +{
 +	return (xfs_dir2_dataptr_t)(by >> XFS_DIR2_DATA_ALIGN_LOG);
 +}
 +
 +/*
 + * Convert byte in space to (DB) block
 + */
 +static inline xfs_dir2_db_t
 +xfs_dir2_byte_to_db(struct xfs_mount *mp, xfs_dir2_off_t by)
 +{
 +	return (xfs_dir2_db_t)
 +		(by >> (mp->m_sb.sb_blocklog + mp->m_sb.sb_dirblklog));
 +}
 +
 +/*
 + * Convert dataptr to a block number
 + */
 +static inline xfs_dir2_db_t
 +xfs_dir2_dataptr_to_db(struct xfs_mount *mp, xfs_dir2_dataptr_t dp)
 +{
 +	return xfs_dir2_byte_to_db(mp, xfs_dir2_dataptr_to_byte(mp, dp));
 +}
 +
 +/*
 + * Convert byte in space to offset in a block
 + */
 +static inline xfs_dir2_data_aoff_t
 +xfs_dir2_byte_to_off(struct xfs_mount *mp, xfs_dir2_off_t by)
 +{
 +	return (xfs_dir2_data_aoff_t)(by &
 +		((1 << (mp->m_sb.sb_blocklog + mp->m_sb.sb_dirblklog)) - 1));
 +}
 +
 +/*
 + * Convert dataptr to a byte offset in a block
 + */
 +static inline xfs_dir2_data_aoff_t
 +xfs_dir2_dataptr_to_off(struct xfs_mount *mp, xfs_dir2_dataptr_t dp)
 +{
 +	return xfs_dir2_byte_to_off(mp, xfs_dir2_dataptr_to_byte(mp, dp));
 +}
 +
 +/*
 + * Convert block and offset to byte in space
 + */
 +static inline xfs_dir2_off_t
 +xfs_dir2_db_off_to_byte(struct xfs_mount *mp, xfs_dir2_db_t db,
 +			xfs_dir2_data_aoff_t o)
 +{
 +	return ((xfs_dir2_off_t)db <<
 +		(mp->m_sb.sb_blocklog + mp->m_sb.sb_dirblklog)) + o;
 +}
 +
 +/*
 + * Convert block (DB) to block (dablk)
 + */
 +static inline xfs_dablk_t
 +xfs_dir2_db_to_da(struct xfs_mount *mp, xfs_dir2_db_t db)
 +{
 +	return (xfs_dablk_t)(db << mp->m_sb.sb_dirblklog);
 +}
 +
 +/*
 + * Convert byte in space to (DA) block
 + */
 +static inline xfs_dablk_t
 +xfs_dir2_byte_to_da(struct xfs_mount *mp, xfs_dir2_off_t by)
 +{
 +	return xfs_dir2_db_to_da(mp, xfs_dir2_byte_to_db(mp, by));
 +}
 +
 +/*
 + * Convert block and offset to dataptr
 + */
 +static inline xfs_dir2_dataptr_t
 +xfs_dir2_db_off_to_dataptr(struct xfs_mount *mp, xfs_dir2_db_t db,
 +			   xfs_dir2_data_aoff_t o)
 +{
 +	return xfs_dir2_byte_to_dataptr(mp, xfs_dir2_db_off_to_byte(mp, db, o));
 +}
 +
 +/*
 + * Convert block (dablk) to block (DB)
 + */
 +static inline xfs_dir2_db_t
 +xfs_dir2_da_to_db(struct xfs_mount *mp, xfs_dablk_t da)
 +{
 +	return (xfs_dir2_db_t)(da >> mp->m_sb.sb_dirblklog);
 +}
 +
 +/*
 + * Convert block (dablk) to byte offset in space
 + */
 +static inline xfs_dir2_off_t
 +xfs_dir2_da_to_byte(struct xfs_mount *mp, xfs_dablk_t da)
 +{
 +	return xfs_dir2_db_off_to_byte(mp, xfs_dir2_da_to_db(mp, da), 0);
 +}
 +
 +/*
++=======
++>>>>>>> 892e3f342f98 (xfs: move directory block translatiosn to xfs_dir2_priv.h)
   * Free space block defintions for the node format.
   */
  
diff --git a/fs/xfs/xfs_da_format.c b/fs/xfs/xfs_da_format.c
index e6c83e1fbc8a..f4a783b0359c 100644
--- a/fs/xfs/xfs_da_format.c
+++ b/fs/xfs/xfs_da_format.c
@@ -26,8 +26,10 @@
 #include "xfs_ag.h"
 #include "xfs_mount.h"
 #include "xfs_da_format.h"
+#include "xfs_da_btree.h"
 #include "xfs_inode.h"
 #include "xfs_dir2.h"
+#include "xfs_dir2_priv.h"
 
 /*
  * Shortform directory ops
* Unmerged path fs/xfs/xfs_da_format.h
diff --git a/fs/xfs/xfs_dir2_priv.h b/fs/xfs/xfs_dir2_priv.h
index f3dfbc996c43..1742b20e8242 100644
--- a/fs/xfs/xfs_dir2_priv.h
+++ b/fs/xfs/xfs_dir2_priv.h
@@ -20,6 +20,143 @@
 
 struct dir_context;
 
+/*
+ * Directory offset/block conversion functions.
+ *
+ * DB blocks here are logical directory block numbers, not filesystem blocks.
+ */
+
+/*
+ * Convert dataptr to byte in file space
+ */
+static inline xfs_dir2_off_t
+xfs_dir2_dataptr_to_byte(xfs_dir2_dataptr_t dp)
+{
+	return (xfs_dir2_off_t)dp << XFS_DIR2_DATA_ALIGN_LOG;
+}
+
+/*
+ * Convert byte in file space to dataptr.  It had better be aligned.
+ */
+static inline xfs_dir2_dataptr_t
+xfs_dir2_byte_to_dataptr(xfs_dir2_off_t by)
+{
+	return (xfs_dir2_dataptr_t)(by >> XFS_DIR2_DATA_ALIGN_LOG);
+}
+
+/*
+ * Convert byte in space to (DB) block
+ */
+static inline xfs_dir2_db_t
+xfs_dir2_byte_to_db(struct xfs_mount *mp, xfs_dir2_off_t by)
+{
+	return (xfs_dir2_db_t)
+		(by >> (mp->m_sb.sb_blocklog + mp->m_sb.sb_dirblklog));
+}
+
+/*
+ * Convert dataptr to a block number
+ */
+static inline xfs_dir2_db_t
+xfs_dir2_dataptr_to_db(struct xfs_mount *mp, xfs_dir2_dataptr_t dp)
+{
+	return xfs_dir2_byte_to_db(mp, xfs_dir2_dataptr_to_byte(dp));
+}
+
+/*
+ * Convert byte in space to offset in a block
+ */
+static inline xfs_dir2_data_aoff_t
+xfs_dir2_byte_to_off(struct xfs_mount *mp, xfs_dir2_off_t by)
+{
+	return (xfs_dir2_data_aoff_t)(by &
+		((1 << (mp->m_sb.sb_blocklog + mp->m_sb.sb_dirblklog)) - 1));
+}
+
+/*
+ * Convert dataptr to a byte offset in a block
+ */
+static inline xfs_dir2_data_aoff_t
+xfs_dir2_dataptr_to_off(struct xfs_mount *mp, xfs_dir2_dataptr_t dp)
+{
+	return xfs_dir2_byte_to_off(mp, xfs_dir2_dataptr_to_byte(dp));
+}
+
+/*
+ * Convert block and offset to byte in space
+ */
+static inline xfs_dir2_off_t
+xfs_dir2_db_off_to_byte(struct xfs_mount *mp, xfs_dir2_db_t db,
+			xfs_dir2_data_aoff_t o)
+{
+	return ((xfs_dir2_off_t)db <<
+		(mp->m_sb.sb_blocklog + mp->m_sb.sb_dirblklog)) + o;
+}
+
+/*
+ * Convert block (DB) to block (dablk)
+ */
+static inline xfs_dablk_t
+xfs_dir2_db_to_da(struct xfs_mount *mp, xfs_dir2_db_t db)
+{
+	return (xfs_dablk_t)(db << mp->m_sb.sb_dirblklog);
+}
+
+/*
+ * Convert byte in space to (DA) block
+ */
+static inline xfs_dablk_t
+xfs_dir2_byte_to_da(struct xfs_mount *mp, xfs_dir2_off_t by)
+{
+	return xfs_dir2_db_to_da(mp, xfs_dir2_byte_to_db(mp, by));
+}
+
+/*
+ * Convert block and offset to dataptr
+ */
+static inline xfs_dir2_dataptr_t
+xfs_dir2_db_off_to_dataptr(struct xfs_mount *mp, xfs_dir2_db_t db,
+			   xfs_dir2_data_aoff_t o)
+{
+	return xfs_dir2_byte_to_dataptr(xfs_dir2_db_off_to_byte(mp, db, o));
+}
+
+/*
+ * Convert block (dablk) to block (DB)
+ */
+static inline xfs_dir2_db_t
+xfs_dir2_da_to_db(struct xfs_mount *mp, xfs_dablk_t da)
+{
+	return (xfs_dir2_db_t)(da >> mp->m_sb.sb_dirblklog);
+}
+
+/*
+ * Convert block (dablk) to byte offset in space
+ */
+static inline xfs_dir2_off_t
+xfs_dir2_da_to_byte(struct xfs_mount *mp, xfs_dablk_t da)
+{
+	return xfs_dir2_db_off_to_byte(mp, xfs_dir2_da_to_db(mp, da), 0);
+}
+
+/*
+ * Directory tail pointer accessor functions. Based on block geometry.
+ */
+static inline struct xfs_dir2_block_tail *
+xfs_dir2_block_tail_p(struct xfs_mount *mp, struct xfs_dir2_data_hdr *hdr)
+{
+	return ((struct xfs_dir2_block_tail *)
+		((char *)hdr + mp->m_dirblksize)) - 1;
+}
+
+static inline struct xfs_dir2_leaf_tail *
+xfs_dir2_leaf_tail_p(struct xfs_mount *mp, struct xfs_dir2_leaf *lp)
+{
+	return (struct xfs_dir2_leaf_tail *)
+		((char *)lp + mp->m_dirblksize -
+		  sizeof(struct xfs_dir2_leaf_tail));
+}
+
 /* xfs_dir2.c */
 extern int xfs_dir_ino_validate(struct xfs_mount *mp, xfs_ino_t ino);
 extern int xfs_dir2_grow_inode(struct xfs_da_args *args, int space,
