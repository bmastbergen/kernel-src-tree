userfaultfd: activate syscall

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Andrea Arcangeli <aarcange@redhat.com>
commit 1380fca084743fef8d17e59b273473393944ce58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/1380fca0.failed

This activates the userfaultfd syscall.

[sfr@canb.auug.org.au: activate syscall fix]
[akpm@linux-foundation.org: don't enable userfaultfd on powerpc]
	Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
	Acked-by: Pavel Emelyanov <xemul@parallels.com>
	Cc: Sanidhya Kashyap <sanidhya.gatech@gmail.com>
	Cc: zhang.zhanghailiang@huawei.com
	Cc: "Kirill A. Shutemov" <kirill@shutemov.name>
	Cc: Andres Lagar-Cavilla <andreslc@google.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Mel Gorman <mgorman@suse.de>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Peter Feiner <pfeiner@google.com>
	Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: "Huangpeng (Peter)" <peter.huangpeng@huawei.com>
	Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1380fca084743fef8d17e59b273473393944ce58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/syscalls/syscall_32.tbl
#	arch/x86/syscalls/syscall_64.tbl
#	include/linux/syscalls.h
#	kernel/sys_ni.c
diff --cc arch/x86/syscalls/syscall_32.tbl
index aabfb8380a1c,477bfa6db370..000000000000
--- a/arch/x86/syscalls/syscall_32.tbl
+++ b/arch/x86/syscalls/syscall_32.tbl
@@@ -357,3 -357,27 +357,30 @@@
  348	i386	process_vm_writev	sys_process_vm_writev		compat_sys_process_vm_writev
  349	i386	kcmp			sys_kcmp
  350	i386	finit_module		sys_finit_module
++<<<<<<< HEAD:arch/x86/syscalls/syscall_32.tbl
++=======
+ 351	i386	sched_setattr		sys_sched_setattr
+ 352	i386	sched_getattr		sys_sched_getattr
+ 353	i386	renameat2		sys_renameat2
+ 354	i386	seccomp			sys_seccomp
+ 355	i386	getrandom		sys_getrandom
+ 356	i386	memfd_create		sys_memfd_create
+ 357	i386	bpf			sys_bpf
+ 358	i386	execveat		sys_execveat			stub32_execveat
+ 359	i386	socket			sys_socket
+ 360	i386	socketpair		sys_socketpair
+ 361	i386	bind			sys_bind
+ 362	i386	connect			sys_connect
+ 363	i386	listen			sys_listen
+ 364	i386	accept4			sys_accept4
+ 365	i386	getsockopt		sys_getsockopt			compat_sys_getsockopt
+ 366	i386	setsockopt		sys_setsockopt			compat_sys_setsockopt
+ 367	i386	getsockname		sys_getsockname
+ 368	i386	getpeername		sys_getpeername
+ 369	i386	sendto			sys_sendto
+ 370	i386	sendmsg			sys_sendmsg			compat_sys_sendmsg
+ 371	i386	recvfrom		sys_recvfrom			compat_sys_recvfrom
+ 372	i386	recvmsg			sys_recvmsg			compat_sys_recvmsg
+ 373	i386	shutdown		sys_shutdown
+ 374	i386	userfaultfd		sys_userfaultfd
++>>>>>>> 1380fca08474 (userfaultfd: activate syscall):arch/x86/entry/syscalls/syscall_32.tbl
diff --cc arch/x86/syscalls/syscall_64.tbl
index ba71cb12cfa0,81c490634db9..000000000000
--- a/arch/x86/syscalls/syscall_64.tbl
+++ b/arch/x86/syscalls/syscall_64.tbl
@@@ -320,8 -320,16 +320,14 @@@
  311	64	process_vm_writev	sys_process_vm_writev
  312	common	kcmp			sys_kcmp
  313	common	finit_module		sys_finit_module
 -314	common	sched_setattr		sys_sched_setattr
 -315	common	sched_getattr		sys_sched_getattr
  316	common	renameat2		sys_renameat2
 -317	common	seccomp			sys_seccomp
 -318	common	getrandom		sys_getrandom
 -319	common	memfd_create		sys_memfd_create
  320	common	kexec_file_load		sys_kexec_file_load
++<<<<<<< HEAD:arch/x86/syscalls/syscall_64.tbl
++=======
+ 321	common	bpf			sys_bpf
+ 322	64	execveat		stub_execveat
+ 323	common	userfaultfd		sys_userfaultfd
++>>>>>>> 1380fca08474 (userfaultfd: activate syscall):arch/x86/entry/syscalls/syscall_64.tbl
  
  #
  # x32-specific system call numbers start at 512 to avoid cache impact
diff --cc include/linux/syscalls.h
index c89c93885853,08001317aee7..000000000000
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@@ -786,6 -809,8 +786,11 @@@ asmlinkage long sys_timerfd_settime(in
  asmlinkage long sys_timerfd_gettime(int ufd, struct itimerspec __user *otmr);
  asmlinkage long sys_eventfd(unsigned int count);
  asmlinkage long sys_eventfd2(unsigned int count, int flags);
++<<<<<<< HEAD
++=======
+ asmlinkage long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);
+ asmlinkage long sys_userfaultfd(int flags);
++>>>>>>> 1380fca08474 (userfaultfd: activate syscall)
  asmlinkage long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);
  asmlinkage long sys_old_readdir(unsigned int, struct old_linux_dirent __user *, unsigned int);
  asmlinkage long sys_pselect6(int, fd_set __user *, fd_set __user *,
diff --cc kernel/sys_ni.c
index 7e1e13d76acc,03c3875d9958..000000000000
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@@ -194,6 -218,8 +194,11 @@@ cond_syscall(compat_sys_timerfd_settime
  cond_syscall(compat_sys_timerfd_gettime);
  cond_syscall(sys_eventfd);
  cond_syscall(sys_eventfd2);
++<<<<<<< HEAD
++=======
+ cond_syscall(sys_memfd_create);
+ cond_syscall(sys_userfaultfd);
++>>>>>>> 1380fca08474 (userfaultfd: activate syscall)
  
  /* performance counters: */
  cond_syscall(sys_perf_event_open);
* Unmerged path arch/x86/syscalls/syscall_32.tbl
* Unmerged path arch/x86/syscalls/syscall_64.tbl
* Unmerged path include/linux/syscalls.h
* Unmerged path kernel/sys_ni.c
