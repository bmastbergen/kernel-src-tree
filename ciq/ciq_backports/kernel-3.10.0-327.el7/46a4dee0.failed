igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] ipv6: igmp: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop (Marcelo Leitner) [1206570]
Rebuild_FUZZ: 92.17%
commit-author Madhu Challa <challa@noironetworks.com>
commit 46a4dee074b58c4256dbf6c2dbf199c372f85b04
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/46a4dee0.failed

Based on the igmp v4 changes from Eric Dumazet.
959d10f6bbf6("igmp: add __ip_mc_{join|leave}_group()")

These changes are needed to perform igmp v6 join/leave while
RTNL is held.

Make ipv6_sock_mc_join and ipv6_sock_mc_drop wrappers around
__ipv6_sock_mc_join and  __ipv6_sock_mc_drop to avoid
proliferation of work queues.

	Signed-off-by: Madhu Challa <challa@noironetworks.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 46a4dee074b58c4256dbf6c2dbf199c372f85b04)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/mcast.c
diff --cc net/ipv6/mcast.c
index 8c315d7cece8,e4955d019734..000000000000
--- a/net/ipv6/mcast.c
+++ b/net/ipv6/mcast.c
@@@ -173,7 -163,6 +175,10 @@@ int __ipv6_sock_mc_join(struct sock *sk
  	mc_lst->next = NULL;
  	mc_lst->addr = *addr;
  
++<<<<<<< HEAD
 +	rcu_read_lock();
++=======
++>>>>>>> 46a4dee074b5 (igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop)
  	if (ifindex == 0) {
  		struct rt6_info *rt;
  		rt = rt6_lookup(net, addr, NULL, 0, 0);
@@@ -182,10 -171,9 +187,13 @@@
  			ip6_rt_put(rt);
  		}
  	} else
 -		dev = __dev_get_by_index(net, ifindex);
 +		dev = dev_get_by_index_rcu(net, ifindex);
  
  	if (dev == NULL) {
++<<<<<<< HEAD
 +		rcu_read_unlock();
++=======
++>>>>>>> 46a4dee074b5 (igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop)
  		sock_kfree_s(sk, mc_lst, sizeof(*mc_lst));
  		return -ENODEV;
  	}
@@@ -202,20 -190,28 +210,39 @@@
  	err = ipv6_dev_mc_inc(dev, addr);
  
  	if (err) {
++<<<<<<< HEAD
 +		rcu_read_unlock();
++=======
++>>>>>>> 46a4dee074b5 (igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop)
  		sock_kfree_s(sk, mc_lst, sizeof(*mc_lst));
  		return err;
  	}
  
 +	spin_lock(&ipv6_sk_mc_lock);
  	mc_lst->next = np->ipv6_mc_list;
  	rcu_assign_pointer(np->ipv6_mc_list, mc_lst);
 +	spin_unlock(&ipv6_sk_mc_lock);
 +
++<<<<<<< HEAD
 +	rcu_read_unlock();
  
++=======
++>>>>>>> 46a4dee074b5 (igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop)
  	return 0;
  }
+ EXPORT_SYMBOL(__ipv6_sock_mc_join);
+ 
+ int ipv6_sock_mc_join(struct sock *sk, int ifindex, const struct in6_addr *addr)
+ {
+ 	int ret;
+ 
+ 	rtnl_lock();
+ 	ret = __ipv6_sock_mc_join(sk, ifindex, addr);
+ 	rtnl_unlock();
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL(ipv6_sock_mc_join);
  
  /*
   *	socket leave on multicast group
@@@ -230,10 -228,8 +259,13 @@@ int __ipv6_sock_mc_drop(struct sock *sk
  	if (!ipv6_addr_is_multicast(addr))
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	spin_lock(&ipv6_sk_mc_lock);
++=======
++>>>>>>> 46a4dee074b5 (igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop)
  	for (lnk = &np->ipv6_mc_list;
 -	     (mc_lst = rtnl_dereference(*lnk)) != NULL;
 +	     (mc_lst = rcu_dereference_protected(*lnk,
 +			lockdep_is_held(&ipv6_sk_mc_lock))) !=NULL ;
  	      lnk = &mc_lst->next) {
  		if ((ifindex == 0 || mc_lst->ifindex == ifindex) &&
  		    ipv6_addr_equal(&mc_lst->addr, addr)) {
@@@ -252,13 -246,12 +284,20 @@@
  					__ipv6_dev_mc_dec(idev, &mc_lst->addr);
  			} else
  				(void) ip6_mc_leave_src(sk, mc_lst, NULL);
++<<<<<<< HEAD
 +			rcu_read_unlock();
++=======
+ 
++>>>>>>> 46a4dee074b5 (igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop)
  			atomic_sub(sizeof(*mc_lst), &sk->sk_omem_alloc);
  			kfree_rcu(mc_lst, rcu);
  			return 0;
  		}
  	}
++<<<<<<< HEAD
 +	spin_unlock(&ipv6_sk_mc_lock);
++=======
++>>>>>>> 46a4dee074b5 (igmp v6: add __ipv6_sock_mc_join and __ipv6_sock_mc_drop)
  
  	return -EADDRNOTAVAIL;
  }
diff --git a/include/net/ipv6.h b/include/net/ipv6.h
index a8cae4809670..1c12bf4025be 100644
--- a/include/net/ipv6.h
+++ b/include/net/ipv6.h
@@ -874,4 +874,12 @@ extern int ipv6_sysctl_register(void);
 extern void ipv6_sysctl_unregister(void);
 #endif
 
+int ipv6_sock_mc_join(struct sock *sk, int ifindex,
+		      const struct in6_addr *addr);
+int __ipv6_sock_mc_join(struct sock *sk, int ifindex,
+			const struct in6_addr *addr);
+int ipv6_sock_mc_drop(struct sock *sk, int ifindex,
+		      const struct in6_addr *addr);
+int __ipv6_sock_mc_drop(struct sock *sk, int ifindex,
+			const struct in6_addr *addr);
 #endif /* _NET_IPV6_H */
* Unmerged path net/ipv6/mcast.c
