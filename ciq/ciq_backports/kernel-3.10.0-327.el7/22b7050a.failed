virtio: defer config changed notifications

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [virtio] defer config changed notifications (David Gibson) [1196009]
Rebuild_FUZZ: 89.47%
commit-author Michael S. Tsirkin <mst@redhat.com>
commit 22b7050a024d7deb0c9ef1e14ed73e3b1e369f24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/22b7050a.failed

Defer config changed notifications that arrive during
probe/scan/freeze/restore.

This will allow drivers to set DRIVER_OK earlier, without worrying about
racing with config change interrupts.

This change will also benefit old hypervisors (before 2009)
that send interrupts without checking DRIVER_OK: previously,
the callback could race with driver-specific initialization.

This will also help simplify drivers.

	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
	Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> (cosmetic changes)
(cherry picked from commit 22b7050a024d7deb0c9ef1e14ed73e3b1e369f24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/virtio/virtio.c
#	include/linux/virtio.h
diff --cc drivers/virtio/virtio.c
index ee59b74768d9,df598dd8c5c8..000000000000
--- a/drivers/virtio/virtio.c
+++ b/drivers/virtio/virtio.c
@@@ -228,6 -284,64 +273,67 @@@ void unregister_virtio_device(struct vi
  }
  EXPORT_SYMBOL_GPL(unregister_virtio_device);
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_PM_SLEEP
+ int virtio_device_freeze(struct virtio_device *dev)
+ {
+ 	struct virtio_driver *drv = drv_to_virtio(dev->dev.driver);
+ 
+ 	virtio_config_disable(dev);
+ 
+ 	dev->failed = dev->config->get_status(dev) & VIRTIO_CONFIG_S_FAILED;
+ 
+ 	if (drv && drv->freeze)
+ 		return drv->freeze(dev);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(virtio_device_freeze);
+ 
+ int virtio_device_restore(struct virtio_device *dev)
+ {
+ 	struct virtio_driver *drv = drv_to_virtio(dev->dev.driver);
+ 
+ 	/* We always start by resetting the device, in case a previous
+ 	 * driver messed it up. */
+ 	dev->config->reset(dev);
+ 
+ 	/* Acknowledge that we've seen the device. */
+ 	add_status(dev, VIRTIO_CONFIG_S_ACKNOWLEDGE);
+ 
+ 	/* Maybe driver failed before freeze.
+ 	 * Restore the failed status, for debugging. */
+ 	if (dev->failed)
+ 		add_status(dev, VIRTIO_CONFIG_S_FAILED);
+ 
+ 	if (!drv)
+ 		return 0;
+ 
+ 	/* We have a driver! */
+ 	add_status(dev, VIRTIO_CONFIG_S_DRIVER);
+ 
+ 	dev->config->finalize_features(dev);
+ 
+ 	if (drv->restore) {
+ 		int ret = drv->restore(dev);
+ 		if (ret) {
+ 			add_status(dev, VIRTIO_CONFIG_S_FAILED);
+ 			return ret;
+ 		}
+ 	}
+ 
+ 	/* Finally, tell the device we're all set */
+ 	add_status(dev, VIRTIO_CONFIG_S_DRIVER_OK);
+ 
+ 	virtio_config_enable(dev);
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(virtio_device_restore);
+ #endif
+ 
++>>>>>>> 22b7050a024d (virtio: defer config changed notifications)
  static int virtio_init(void)
  {
  	if (bus_register(&virtio_bus) != 0)
diff --cc include/linux/virtio.h
index 19472171fdba,65261a7244fc..000000000000
--- a/include/linux/virtio.h
+++ b/include/linux/virtio.h
@@@ -85,6 -78,10 +85,13 @@@ bool virtqueue_is_broken(struct virtque
  /**
   * virtio_device - representation of a device using virtio
   * @index: unique position on the virtio bus
++<<<<<<< HEAD
++=======
+  * @failed: saved value for CONFIG_S_FAILED bit (for restore)
+  * @config_enabled: configuration change reporting enabled
+  * @config_change_pending: configuration change reported while disabled
+  * @config_lock: protects configuration change reporting
++>>>>>>> 22b7050a024d (virtio: defer config changed notifications)
   * @dev: underlying device.
   * @id: the device type identification (used to match it with a driver).
   * @config: the configuration ops for this device.
@@@ -95,6 -92,10 +102,13 @@@
   */
  struct virtio_device {
  	int index;
++<<<<<<< HEAD
++=======
+ 	bool failed;
+ 	bool config_enabled;
+ 	bool config_change_pending;
+ 	spinlock_t config_lock;
++>>>>>>> 22b7050a024d (virtio: defer config changed notifications)
  	struct device dev;
  	struct virtio_device_id id;
  	const struct virtio_config_ops *config;
* Unmerged path drivers/virtio/virtio.c
* Unmerged path include/linux/virtio.h
