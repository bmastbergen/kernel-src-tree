netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [net] netfilter: Pass nf_hook_state through nf_nat_ipv6_{in, out, fn, local_fn}() (Jiri Benc) [1230935]
Rebuild_FUZZ: 97.30%
commit-author David S. Miller <davem@davemloft.net>
commit 8fe22382d1e73dc0ded8098ccf761c986149f72b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/8fe22382.failed

	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8fe22382d1e73dc0ded8098ccf761c986149f72b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/netfilter/ip6table_nat.c
#	net/ipv6/netfilter/nft_chain_nat_ipv6.c
diff --cc net/ipv6/netfilter/ip6table_nat.c
index e85882144e52,d78f69c7abce..000000000000
--- a/net/ipv6/netfilter/ip6table_nat.c
+++ b/net/ipv6/netfilter/ip6table_nat.c
@@@ -43,38 -43,30 +43,54 @@@ static unsigned int ip6table_nat_do_cha
  
  static unsigned int ip6table_nat_fn(const struct nf_hook_ops *ops,
  				    struct sk_buff *skb,
 -				    const struct nf_hook_state *state)
 +				    const struct net_device *in,
 +				    const struct net_device *out,
 +				    int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_fn(ops, skb, in, out, ip6table_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_fn(ops, skb, state, ip6table_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static unsigned int ip6table_nat_in(const struct nf_hook_ops *ops,
  				    struct sk_buff *skb,
 -				    const struct nf_hook_state *state)
 +				    const struct net_device *in,
 +				    const struct net_device *out,
 +				    int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_in(ops, skb, in, out, ip6table_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_in(ops, skb, state, ip6table_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static unsigned int ip6table_nat_out(const struct nf_hook_ops *ops,
  				     struct sk_buff *skb,
 -				     const struct nf_hook_state *state)
 +				     const struct net_device *in,
 +				     const struct net_device *out,
 +				     int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_out(ops, skb, in, out, ip6table_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_out(ops, skb, state, ip6table_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static unsigned int ip6table_nat_local_fn(const struct nf_hook_ops *ops,
  					  struct sk_buff *skb,
 -					  const struct nf_hook_state *state)
 +					  const struct net_device *in,
 +					  const struct net_device *out,
 +					  int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_local_fn(ops, skb, in, out, ip6table_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_local_fn(ops, skb, state, ip6table_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static struct nf_hook_ops nf_nat_ipv6_ops[] __read_mostly = {
diff --cc net/ipv6/netfilter/nft_chain_nat_ipv6.c
index 1c4b75dd425b,11c6f75fcc4d..000000000000
--- a/net/ipv6/netfilter/nft_chain_nat_ipv6.c
+++ b/net/ipv6/netfilter/nft_chain_nat_ipv6.c
@@@ -39,38 -38,30 +38,54 @@@ static unsigned int nft_nat_do_chain(co
  
  static unsigned int nft_nat_ipv6_fn(const struct nf_hook_ops *ops,
  				    struct sk_buff *skb,
 -				    const struct nf_hook_state *state)
 +				    const struct net_device *in,
 +				    const struct net_device *out,
 +				    int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_fn(ops, skb, in, out, nft_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_fn(ops, skb, state, nft_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static unsigned int nft_nat_ipv6_in(const struct nf_hook_ops *ops,
  				    struct sk_buff *skb,
 -				    const struct nf_hook_state *state)
 +				    const struct net_device *in,
 +				    const struct net_device *out,
 +				    int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_in(ops, skb, in, out, nft_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_in(ops, skb, state, nft_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static unsigned int nft_nat_ipv6_out(const struct nf_hook_ops *ops,
  				     struct sk_buff *skb,
 -				     const struct nf_hook_state *state)
 +				     const struct net_device *in,
 +				     const struct net_device *out,
 +				     int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_out(ops, skb, in, out, nft_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_out(ops, skb, state, nft_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static unsigned int nft_nat_ipv6_local_fn(const struct nf_hook_ops *ops,
  					  struct sk_buff *skb,
 -					  const struct nf_hook_state *state)
 +					  const struct net_device *in,
 +					  const struct net_device *out,
 +					  int (*okfn)(struct sk_buff *))
  {
++<<<<<<< HEAD
 +	return nf_nat_ipv6_local_fn(ops, skb, in, out, nft_nat_do_chain);
++=======
+ 	return nf_nat_ipv6_local_fn(ops, skb, state, nft_nat_do_chain);
++>>>>>>> 8fe22382d1e7 (netfilter: Pass nf_hook_state through nf_nat_ipv6_{in,out,fn,local_fn}().)
  }
  
  static const struct nf_chain_type nft_chain_nat_ipv6 = {
diff --git a/include/net/netfilter/nf_nat_l3proto.h b/include/net/netfilter/nf_nat_l3proto.h
index 340c013795a4..11afb5aed7f9 100644
--- a/include/net/netfilter/nf_nat_l3proto.h
+++ b/include/net/netfilter/nf_nat_l3proto.h
@@ -85,40 +85,32 @@ int nf_nat_icmpv6_reply_translation(struct sk_buff *skb, struct nf_conn *ct,
 				    unsigned int hooknum, unsigned int hdrlen);
 
 unsigned int nf_nat_ipv6_in(const struct nf_hook_ops *ops, struct sk_buff *skb,
-			    const struct net_device *in,
-			    const struct net_device *out,
+			    const struct nf_hook_state *state,
 			    unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 						     struct sk_buff *skb,
-						     const struct net_device *in,
-						     const struct net_device *out,
+						     const struct nf_hook_state *state,
 						     struct nf_conn *ct));
 
 unsigned int nf_nat_ipv6_out(const struct nf_hook_ops *ops, struct sk_buff *skb,
-			     const struct net_device *in,
-			     const struct net_device *out,
+			     const struct nf_hook_state *state,
 			     unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 						      struct sk_buff *skb,
-						      const struct net_device *in,
-						      const struct net_device *out,
+						      const struct nf_hook_state *state,
 						      struct nf_conn *ct));
 
 unsigned int nf_nat_ipv6_local_fn(const struct nf_hook_ops *ops,
 				  struct sk_buff *skb,
-				  const struct net_device *in,
-				  const struct net_device *out,
+				  const struct nf_hook_state *state,
 				  unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 							   struct sk_buff *skb,
-							   const struct net_device *in,
-							   const struct net_device *out,
+							   const struct nf_hook_state *state,
 							   struct nf_conn *ct));
 
 unsigned int nf_nat_ipv6_fn(const struct nf_hook_ops *ops, struct sk_buff *skb,
-			    const struct net_device *in,
-			    const struct net_device *out,
+			    const struct nf_hook_state *state,
 			    unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 						     struct sk_buff *skb,
-						     const struct net_device *in,
-						     const struct net_device *out,
+						     const struct nf_hook_state *state,
 						     struct nf_conn *ct));
 
 #endif /* _NF_NAT_L3PROTO_H */
* Unmerged path net/ipv6/netfilter/ip6table_nat.c
diff --git a/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c b/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
index 55a1f038e497..807f34dfe7f5 100644
--- a/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
+++ b/net/ipv6/netfilter/nf_nat_l3proto_ipv6.c
@@ -259,11 +259,10 @@ EXPORT_SYMBOL_GPL(nf_nat_icmpv6_reply_translation);
 
 unsigned int
 nf_nat_ipv6_fn(const struct nf_hook_ops *ops, struct sk_buff *skb,
-	       const struct net_device *in, const struct net_device *out,
+	       const struct nf_hook_state *state,
 	       unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 					struct sk_buff *skb,
-					const struct net_device *in,
-					const struct net_device *out,
+					const struct nf_hook_state *state,
 					struct nf_conn *ct))
 {
 	struct nf_conn *ct;
@@ -314,7 +313,7 @@ nf_nat_ipv6_fn(const struct nf_hook_ops *ops, struct sk_buff *skb,
 		if (!nf_nat_initialized(ct, maniptype)) {
 			unsigned int ret;
 
-			ret = do_chain(ops, skb, in, out, ct);
+			ret = do_chain(ops, skb, state, ct);
 			if (ret != NF_ACCEPT)
 				return ret;
 
@@ -328,7 +327,7 @@ nf_nat_ipv6_fn(const struct nf_hook_ops *ops, struct sk_buff *skb,
 			pr_debug("Already setup manip %s for ct %p\n",
 				 maniptype == NF_NAT_MANIP_SRC ? "SRC" : "DST",
 				 ct);
-			if (nf_nat_oif_changed(ops->hooknum, ctinfo, nat, out))
+			if (nf_nat_oif_changed(ops->hooknum, ctinfo, nat, state->out))
 				goto oif_changed;
 		}
 		break;
@@ -337,7 +336,7 @@ nf_nat_ipv6_fn(const struct nf_hook_ops *ops, struct sk_buff *skb,
 		/* ESTABLISHED */
 		NF_CT_ASSERT(ctinfo == IP_CT_ESTABLISHED ||
 			     ctinfo == IP_CT_ESTABLISHED_REPLY);
-		if (nf_nat_oif_changed(ops->hooknum, ctinfo, nat, out))
+		if (nf_nat_oif_changed(ops->hooknum, ctinfo, nat, state->out))
 			goto oif_changed;
 	}
 
@@ -351,17 +350,16 @@ EXPORT_SYMBOL_GPL(nf_nat_ipv6_fn);
 
 unsigned int
 nf_nat_ipv6_in(const struct nf_hook_ops *ops, struct sk_buff *skb,
-	       const struct net_device *in, const struct net_device *out,
+	       const struct nf_hook_state *state,
 	       unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 					struct sk_buff *skb,
-					const struct net_device *in,
-					const struct net_device *out,
+					const struct nf_hook_state *state,
 					struct nf_conn *ct))
 {
 	unsigned int ret;
 	struct in6_addr daddr = ipv6_hdr(skb)->daddr;
 
-	ret = nf_nat_ipv6_fn(ops, skb, in, out, do_chain);
+	ret = nf_nat_ipv6_fn(ops, skb, state, do_chain);
 	if (ret != NF_DROP && ret != NF_STOLEN &&
 	    ipv6_addr_cmp(&daddr, &ipv6_hdr(skb)->daddr))
 		skb_dst_drop(skb);
@@ -372,11 +370,10 @@ EXPORT_SYMBOL_GPL(nf_nat_ipv6_in);
 
 unsigned int
 nf_nat_ipv6_out(const struct nf_hook_ops *ops, struct sk_buff *skb,
-		const struct net_device *in, const struct net_device *out,
+		const struct nf_hook_state *state,
 		unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 					 struct sk_buff *skb,
-					 const struct net_device *in,
-					 const struct net_device *out,
+					 const struct nf_hook_state *state,
 					 struct nf_conn *ct))
 {
 #ifdef CONFIG_XFRM
@@ -390,7 +387,7 @@ nf_nat_ipv6_out(const struct nf_hook_ops *ops, struct sk_buff *skb,
 	if (skb->len < sizeof(struct ipv6hdr))
 		return NF_ACCEPT;
 
-	ret = nf_nat_ipv6_fn(ops, skb, in, out, do_chain);
+	ret = nf_nat_ipv6_fn(ops, skb, state, do_chain);
 #ifdef CONFIG_XFRM
 	if (ret != NF_DROP && ret != NF_STOLEN &&
 	    !(IP6CB(skb)->flags & IP6SKB_XFRM_TRANSFORMED) &&
@@ -414,11 +411,10 @@ EXPORT_SYMBOL_GPL(nf_nat_ipv6_out);
 
 unsigned int
 nf_nat_ipv6_local_fn(const struct nf_hook_ops *ops, struct sk_buff *skb,
-		     const struct net_device *in, const struct net_device *out,
+		     const struct nf_hook_state *state,
 		     unsigned int (*do_chain)(const struct nf_hook_ops *ops,
 					      struct sk_buff *skb,
-					      const struct net_device *in,
-					      const struct net_device *out,
+					      const struct nf_hook_state *state,
 					      struct nf_conn *ct))
 {
 	const struct nf_conn *ct;
@@ -430,7 +426,7 @@ nf_nat_ipv6_local_fn(const struct nf_hook_ops *ops, struct sk_buff *skb,
 	if (skb->len < sizeof(struct ipv6hdr))
 		return NF_ACCEPT;
 
-	ret = nf_nat_ipv6_fn(ops, skb, in, out, do_chain);
+	ret = nf_nat_ipv6_fn(ops, skb, state, do_chain);
 	if (ret != NF_DROP && ret != NF_STOLEN &&
 	    (ct = nf_ct_get(skb, &ctinfo)) != NULL) {
 		enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);
* Unmerged path net/ipv6/netfilter/nft_chain_nat_ipv6.c
