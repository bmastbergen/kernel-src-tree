i40e: AQ API updates for new commands

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
commit-author Shannon Nelson <shannon.nelson@intel.com>
commit 672415c5f024affb9fd560484c073ce8ee450001
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/672415c5.failed

Add lldp control commands, add oem ocsd and ocbb commands.

Change-ID: I89eba2bd02013d0a44e1ce900559c54bb15f4a66
	Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
	Signed-off-by: Kamil Krawczyk <kamil.krawczyk@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 672415c5f024affb9fd560484c073ce8ee450001)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
diff --cc drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
index 000600b6613b,929e3d72a01e..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
@@@ -255,6 -255,9 +255,12 @@@ enum i40e_admin_queue_opc 
  	i40e_aqc_opc_lldp_delete_tlv	= 0x0A04,
  	i40e_aqc_opc_lldp_stop		= 0x0A05,
  	i40e_aqc_opc_lldp_start		= 0x0A06,
++<<<<<<< HEAD
++=======
+ 	i40e_aqc_opc_get_cee_dcb_cfg	= 0x0A07,
+ 	i40e_aqc_opc_lldp_set_local_mib	= 0x0A08,
+ 	i40e_aqc_opc_lldp_stop_start_spec_agent	= 0x0A09,
++>>>>>>> 672415c5f024 (i40e: AQ API updates for new commands)
  
  	/* Tunnel commands */
  	i40e_aqc_opc_add_udp_tunnel	= 0x0B00,
@@@ -2030,10 -2047,92 +2050,94 @@@ struct i40e_aqc_lldp_start 
  
  I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_start);
  
 -/* Get CEE DCBX Oper Config (0x0A07)
 - * uses the generic descriptor struct
 - * returns below as indirect response
 +/* Apply MIB changes (0x0A07)
 + * uses the generic struc as it contains no data
   */
  
++<<<<<<< HEAD
++=======
+ #define I40E_AQC_CEE_APP_FCOE_SHIFT	0x0
+ #define I40E_AQC_CEE_APP_FCOE_MASK	(0x7 << I40E_AQC_CEE_APP_FCOE_SHIFT)
+ #define I40E_AQC_CEE_APP_ISCSI_SHIFT	0x3
+ #define I40E_AQC_CEE_APP_ISCSI_MASK	(0x7 << I40E_AQC_CEE_APP_ISCSI_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ #define I40E_AQC_CEE_PG_STATUS_SHIFT	0x0
+ #define I40E_AQC_CEE_PG_STATUS_MASK	(0x7 << I40E_AQC_CEE_PG_STATUS_SHIFT)
+ #define I40E_AQC_CEE_PFC_STATUS_SHIFT	0x3
+ #define I40E_AQC_CEE_PFC_STATUS_MASK	(0x7 << I40E_AQC_CEE_PFC_STATUS_SHIFT)
+ #define I40E_AQC_CEE_APP_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_STATUS_MASK	(0x7 << I40E_AQC_CEE_APP_STATUS_SHIFT)
+ struct i40e_aqc_get_cee_dcb_cfg_v1_resp {
+ 	u8	reserved1;
+ 	u8	oper_num_tc;
+ 	u8	oper_prio_tc[4];
+ 	u8	reserved2;
+ 	u8	oper_tc_bw[8];
+ 	u8	oper_pfc_en;
+ 	u8	reserved3;
+ 	__le16	oper_app_prio;
+ 	u8	reserved4;
+ 	__le16	tlv_status;
+ };
+ 
+ I40E_CHECK_STRUCT_LEN(0x18, i40e_aqc_get_cee_dcb_cfg_v1_resp);
+ 
+ struct i40e_aqc_get_cee_dcb_cfg_resp {
+ 	u8	oper_num_tc;
+ 	u8	oper_prio_tc[4];
+ 	u8	oper_tc_bw[8];
+ 	u8	oper_pfc_en;
+ 	__le16	oper_app_prio;
+ #define I40E_AQC_CEE_APP_FCOE_SHIFT	0x0
+ #define I40E_AQC_CEE_APP_FCOE_MASK	(0x7 << I40E_AQC_CEE_APP_FCOE_SHIFT)
+ #define I40E_AQC_CEE_APP_ISCSI_SHIFT	0x3
+ #define I40E_AQC_CEE_APP_ISCSI_MASK	(0x7 << I40E_AQC_CEE_APP_ISCSI_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ #define I40E_AQC_CEE_APP_FIP_MASK	(0x7 << I40E_AQC_CEE_APP_FIP_SHIFT)
+ 	__le32	tlv_status;
+ #define I40E_AQC_CEE_PG_STATUS_SHIFT	0x0
+ #define I40E_AQC_CEE_PG_STATUS_MASK	(0x7 << I40E_AQC_CEE_PG_STATUS_SHIFT)
+ #define I40E_AQC_CEE_PFC_STATUS_SHIFT	0x3
+ #define I40E_AQC_CEE_PFC_STATUS_MASK	(0x7 << I40E_AQC_CEE_PFC_STATUS_SHIFT)
+ #define I40E_AQC_CEE_APP_STATUS_SHIFT	0x8
+ #define I40E_AQC_CEE_APP_STATUS_MASK	(0x7 << I40E_AQC_CEE_APP_STATUS_SHIFT)
+ 	u8	reserved[12];
+ };
+ 
+ I40E_CHECK_STRUCT_LEN(0x20, i40e_aqc_get_cee_dcb_cfg_resp);
+ 
+ /*	Set Local LLDP MIB (indirect 0x0A08)
+  *	Used to replace the local MIB of a given LLDP agent. e.g. DCBx
+  */
+ struct i40e_aqc_lldp_set_local_mib {
+ #define SET_LOCAL_MIB_AC_TYPE_DCBX_SHIFT	0
+ #define SET_LOCAL_MIB_AC_TYPE_DCBX_MASK	(1 << SET_LOCAL_MIB_AC_TYPE_DCBX_SHIFT)
+ 	u8	type;
+ 	u8	reserved0;
+ 	__le16	length;
+ 	u8	reserved1[4];
+ 	__le32	address_high;
+ 	__le32	address_low;
+ };
+ 
+ I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_set_local_mib);
+ 
+ /*	Stop/Start LLDP Agent (direct 0x0A09)
+  *	Used for stopping/starting specific LLDP agent. e.g. DCBx
+  */
+ struct i40e_aqc_lldp_stop_start_specific_agent {
+ #define I40E_AQC_START_SPECIFIC_AGENT_SHIFT	0
+ #define I40E_AQC_START_SPECIFIC_AGENT_MASK \
+ 				(1 << I40E_AQC_START_SPECIFIC_AGENT_SHIFT)
+ 	u8	command;
+ 	u8	reserved[15];
+ };
+ 
+ I40E_CHECK_CMD_LENGTH(i40e_aqc_lldp_stop_start_specific_agent);
+ 
++>>>>>>> 672415c5f024 (i40e: AQ API updates for new commands)
  /* Add Udp Tunnel command and completion (direct 0x0B00) */
  struct i40e_aqc_add_udp_tunnel {
  	__le16	udp_port;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_adminq_cmd.h
diff --git a/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h b/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h
index 5363cbf38eb8..e715bccfb5d2 100644
--- a/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h
+++ b/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h
@@ -268,6 +268,8 @@ enum i40e_admin_queue_opc {
 	/* OEM commands */
 	i40e_aqc_opc_oem_parameter_change	= 0xFE00,
 	i40e_aqc_opc_oem_device_status_change	= 0xFE01,
+	i40e_aqc_opc_oem_ocsd_initialize	= 0xFE02,
+	i40e_aqc_opc_oem_ocbb_initialize	= 0xFE03,
 
 	/* debug commands */
 	i40e_aqc_opc_debug_get_deviceid		= 0xFF00,
@@ -454,6 +456,7 @@ struct i40e_aqc_arp_proxy_data {
 	__le32	pfpm_proxyfc;
 	__le32	ip_addr;
 	u8	mac_addr[6];
+	u8	reserved[2];
 };
 
 I40E_CHECK_STRUCT_LEN(0x14, i40e_aqc_arp_proxy_data);
@@ -1854,21 +1857,32 @@ struct i40e_aqc_nvm_config_write {
 
 I40E_CHECK_CMD_LENGTH(i40e_aqc_nvm_config_write);
 
+/* Used for 0x0704 as well as for 0x0705 commands */
+#define I40E_AQ_ANVM_FEATURE_OR_IMMEDIATE_SHIFT		1
+#define I40E_AQ_ANVM_FEATURE_OR_IMMEDIATE_MASK \
+				(1 << I40E_AQ_ANVM_FEATURE_OR_IMMEDIATE_SHIFT)
+#define I40E_AQ_ANVM_FEATURE		0
+#define I40E_AQ_ANVM_IMMEDIATE_FIELD	(1 << FEATURE_OR_IMMEDIATE_SHIFT)
 struct i40e_aqc_nvm_config_data_feature {
 	__le16 feature_id;
-	__le16 instance_id;
+#define I40E_AQ_ANVM_FEATURE_OPTION_OEM_ONLY		0x01
+#define I40E_AQ_ANVM_FEATURE_OPTION_DWORD_MAP		0x08
+#define I40E_AQ_ANVM_FEATURE_OPTION_POR_CSR		0x10
 	__le16 feature_options;
 	__le16 feature_selection;
 };
 
+I40E_CHECK_STRUCT_LEN(0x6, i40e_aqc_nvm_config_data_feature);
+
 struct i40e_aqc_nvm_config_data_immediate_field {
-#define ANVM_FEATURE_OR_IMMEDIATE_MASK	0x2
-	__le16 field_id;
-	__le16 instance_id;
+	__le32 field_id;
+	__le32 field_value;
 	__le16 field_options;
-	__le16 field_value;
+	__le16 reserved;
 };
 
+I40E_CHECK_STRUCT_LEN(0xc, i40e_aqc_nvm_config_data_immediate_field);
+
 /* Send to PF command (indirect 0x0801) id is only used by PF
  * Send to VF command (indirect 0x0802) id is only used by PF
  * Send to Peer PF command (indirect 0x0803)
@@ -2140,6 +2154,28 @@ struct i40e_aqc_oem_state_change {
 
 I40E_CHECK_CMD_LENGTH(i40e_aqc_oem_state_change);
 
+/* Initialize OCSD (0xFE02, direct) */
+struct i40e_aqc_opc_oem_ocsd_initialize {
+	u8 type_status;
+	u8 reserved1[3];
+	__le32 ocsd_memory_block_addr_high;
+	__le32 ocsd_memory_block_addr_low;
+	__le32 requested_update_interval;
+};
+
+I40E_CHECK_CMD_LENGTH(i40e_aqc_opc_oem_ocsd_initialize);
+
+/* Initialize OCBB  (0xFE03, direct) */
+struct i40e_aqc_opc_oem_ocbb_initialize {
+	u8 type_status;
+	u8 reserved1[3];
+	__le32 ocbb_memory_block_addr_high;
+	__le32 ocbb_memory_block_addr_low;
+	u8 reserved2[4];
+};
+
+I40E_CHECK_CMD_LENGTH(i40e_aqc_opc_oem_ocbb_initialize);
+
 /* debug commands */
 
 /* get device id (0xFF00) uses the generic structure */
