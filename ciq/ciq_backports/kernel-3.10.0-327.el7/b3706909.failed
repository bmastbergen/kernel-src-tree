net/mlx4_en: Prevent setting invalid RSS hash function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-327.el7
Rebuild_CHGLOG: - [netdrv] mlx4_en: Prevent setting invalid RSS hash function (Amir Vadai) [1164527 1164530 1164531 1164536 1164537]
Rebuild_FUZZ: 96.15%
commit-author Amir Vadai <amirv@mellanox.com>
commit b37069090b7c5615610a8aa6b36533d67b364d38
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-327.el7/b3706909.failed

mlx4_en_check_rxfh_func() was checking for hardware support before
setting a known RSS hash function, but didn't do any check before
setting unknown RSS hash function. Need to make it fail on such values.
In this occasion, moved the actual setting of the new value from the
check function into mlx4_en_set_rxfh().

Fixes: 947cbb0 ("net/mlx4_en: Support for configurable RSS hash function")
	Signed-off-by: Amir Vadai <amirv@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b37069090b7c5615610a8aa6b36533d67b364d38)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
diff --cc drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
index 1b8da57abd19,a2ddf3d75ff8..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
@@@ -991,7 -1092,35 +991,39 @@@ static u32 mlx4_en_get_rxfh_indir_size(
  	return priv->rx_ring_num;
  }
  
++<<<<<<< HEAD
 +static int mlx4_en_get_rxfh_indir(struct net_device *dev, u32 *ring_index)
++=======
+ static u32 mlx4_en_get_rxfh_key_size(struct net_device *netdev)
+ {
+ 	return MLX4_EN_RSS_KEY_SIZE;
+ }
+ 
+ static int mlx4_en_check_rxfh_func(struct net_device *dev, u8 hfunc)
+ {
+ 	struct mlx4_en_priv *priv = netdev_priv(dev);
+ 
+ 	/* check if requested function is supported by the device */
+ 	if (hfunc == ETH_RSS_HASH_TOP) {
+ 		if (!(priv->mdev->dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_RSS_TOP))
+ 			return -EINVAL;
+ 		if (!(dev->features & NETIF_F_RXHASH))
+ 			en_warn(priv, "Toeplitz hash function should be used in conjunction with RX hashing for optimal performance\n");
+ 		return 0;
+ 	} else if (hfunc == ETH_RSS_HASH_XOR) {
+ 		if (!(priv->mdev->dev->caps.flags2 & MLX4_DEV_CAP_FLAG2_RSS_XOR))
+ 			return -EINVAL;
+ 		if (dev->features & NETIF_F_RXHASH)
+ 			en_warn(priv, "Enabling both XOR Hash function and RX Hashing can limit RPS functionality\n");
+ 		return 0;
+ 	}
+ 
+ 	return -EINVAL;
+ }
+ 
+ static int mlx4_en_get_rxfh(struct net_device *dev, u32 *ring_index, u8 *key,
+ 			    u8 *hfunc)
++>>>>>>> b37069090b7c (net/mlx4_en: Prevent setting invalid RSS hash function)
  {
  	struct mlx4_en_priv *priv = netdev_priv(dev);
  	struct mlx4_en_rss_map *rss_map = &priv->rss_map;
@@@ -1044,7 -1186,12 +1076,16 @@@ static int mlx4_en_set_rxfh_indir(struc
  		mlx4_en_stop_port(dev, 1);
  	}
  
++<<<<<<< HEAD
 +	priv->prof->rss_rings = rss_rings;
++=======
+ 	if (ring_index)
+ 		priv->prof->rss_rings = rss_rings;
+ 	if (key)
+ 		memcpy(priv->rss_key, key, MLX4_EN_RSS_KEY_SIZE);
+ 	if (hfunc !=  ETH_RSS_HASH_NO_CHANGE)
+ 		priv->rss_hash_fn = hfunc;
++>>>>>>> b37069090b7c (net/mlx4_en: Prevent setting invalid RSS hash function)
  
  	if (port_up) {
  		err = mlx4_en_start_port(dev);
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_ethtool.c
