module: move early sanity checks into a helper

jira LE-1907
Rebuild_History Non-Buildable kernel-5.14.0-427.40.1.el9_4
commit-author Luis Chamberlain <mcgrof@kernel.org>
commit 85e6f61c134f111232d27d3f63667c1bccbbc12d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-427.40.1.el9_4/85e6f61c.failed

Move early sanity checkers for the module into a helper.
This let's us make it clear when we are working with the
local copy of the module prior to allocation.

This produces no functional changes, it just makes subsequent
changes easier to read.

	Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
(cherry picked from commit 85e6f61c134f111232d27d3f63667c1bccbbc12d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/module.c
diff --cc kernel/module.c
index 90ad015c6fb5,22596cb46dc8..000000000000
--- a/kernel/module.c
+++ b/kernel/module.c
@@@ -3938,7 -2668,30 +3938,34 @@@ static int unknown_module_param_cb(cha
  	return 0;
  }
  
++<<<<<<< HEAD:kernel/module.c
 +static void cfi_init(struct module *mod);
++=======
+ /* Module within temporary copy, this doesn't do any allocation  */
+ static int early_mod_check(struct load_info *info, int flags)
+ {
+ 	int err;
+ 
+ 	/*
+ 	 * Now that we know we have the correct module name, check
+ 	 * if it's blacklisted.
+ 	 */
+ 	if (blacklisted(info->name)) {
+ 		pr_err("Module %s is blacklisted\n", info->name);
+ 		return -EPERM;
+ 	}
+ 
+ 	err = rewrite_section_headers(info, flags);
+ 	if (err)
+ 		return err;
+ 
+ 	/* Check module struct version now, before we try to use module. */
+ 	if (!check_modstruct_version(info, info->mod))
+ 		return -ENOEXEC;
+ 
+ 	return 0;
+ }
++>>>>>>> 85e6f61c134f (module: move early sanity checks into a helper):kernel/module/main.c
  
  /*
   * Allocate and load the module: note that size of section 0 is always
@@@ -3985,22 -2736,7 +4012,26 @@@ static int load_module(struct load_inf
  	if (err)
  		goto free_copy;
  
++<<<<<<< HEAD:kernel/module.c
 +	/*
 +	 * Now that we know we have the correct module name, check
 +	 * if it's blacklisted.
 +	 */
 +	if (blacklisted(info->name)) {
 +		err = -EPERM;
 +		pr_err("Module %s is blacklisted\n", info->name);
 +		goto free_copy;
 +	}
 +
 +#ifdef CONFIG_RHEL_DIFFERENCES
 +	if (get_modinfo(info, "intree"))
 +		module_rh_check_status(info->name);
 +#endif
 +
 +	err = rewrite_section_headers(info, flags);
++=======
+ 	err = early_mod_check(info, flags);
++>>>>>>> 85e6f61c134f (module: move early sanity checks into a helper):kernel/module/main.c
  	if (err)
  		goto free_copy;
  
* Unmerged path kernel/module.c
