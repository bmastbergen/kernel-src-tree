tls: fix use-after-free on failed backlog decryption

jira LE-1907
cve CVE-2024-26584
Rebuild_History Non-Buildable kernel-5.14.0-427.16.1.el9_4
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit 13114dc5543069f7b97991e3b79937b6da05f5b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-5.14.0-427.16.1.el9_4/13114dc5.failed

When the decrypt request goes to the backlog and crypto_aead_decrypt
returns -EBUSY, tls_do_decryption will wait until all async
decryptions have completed. If one of them fails, tls_do_decryption
will return -EBADMSG and tls_decrypt_sg jumps to the error path,
releasing all the pages. But the pages have been passed to the async
callback, and have already been released by tls_decrypt_done.

The only true async case is when crypto_aead_decrypt returns
 -EINPROGRESS. With -EBUSY, we already waited so we can tell
tls_sw_recvmsg that the data is available for immediate copy, but we
need to notify tls_decrypt_sg (via the new ->async_done flag) that the
memory has already been released.

Fixes: 859054147318 ("net: tls: handle backlogging of crypto requests")
	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
Link: https://lore.kernel.org/r/4755dd8d9bebdefaa19ce1439b833d6199d4364c.1709132643.git.sd@queasysnail.net
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 13114dc5543069f7b97991e3b79937b6da05f5b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/tls/tls_sw.c
diff --cc net/tls/tls_sw.c
index 9452cf12ed55,211f57164cb6..000000000000
--- a/net/tls/tls_sw.c
+++ b/net/tls/tls_sw.c
@@@ -258,11 -287,18 +259,25 @@@ static int tls_do_decryption(struct soc
  	}
  
  	ret = crypto_aead_decrypt(aead_req);
++<<<<<<< HEAD
 +	if (ret == -EINPROGRESS) {
 +		return 0;
 +	} else if (darg->async) {
 +		atomic_dec(&ctx->decrypt_pending);
++=======
+ 	if (ret == -EINPROGRESS)
+ 		return 0;
+ 
+ 	if (ret == -EBUSY) {
+ 		ret = tls_decrypt_async_wait(ctx);
+ 		darg->async_done = true;
+ 		/* all completions have run, we're not doing async anymore */
+ 		darg->async = false;
+ 		return ret;
++>>>>>>> 13114dc55430 (tls: fix use-after-free on failed backlog decryption)
  	}
+ 
+ 	atomic_dec(&ctx->decrypt_pending);
  	darg->async = false;
  
  	return ret;
* Unmerged path net/tls/tls_sw.c
