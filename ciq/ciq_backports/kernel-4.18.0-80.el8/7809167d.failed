block: don't lose track of REQ_INTEGRITY flag

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 7809167da5c86fd6bf309b33dee7a797e263342f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/7809167d.failed

We need to pass bio->bi_opf after bio intergrity preparing, otherwise
the flag of REQ_INTEGRITY may not be set on the allocated request, then
breaks block integrity.

Fixes: f9afca4d367b ("blk-mq: pass in request/bio flags to queue mapping")
	Cc: Hannes Reinecke <hare@suse.com>
	Cc: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 7809167da5c86fd6bf309b33dee7a797e263342f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 91f431966b0c,8f5b533764ca..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -1877,9 -1906,8 +1877,13 @@@ static blk_qc_t blk_mq_make_request(str
  {
  	const int is_sync = op_is_sync(bio->bi_opf);
  	const int is_flush_fua = op_is_flush(bio->bi_opf);
++<<<<<<< HEAD
 +	struct blk_mq_alloc_data data = { .flags = 0 };
++=======
+ 	struct blk_mq_alloc_data data = { .flags = 0};
++>>>>>>> 7809167da5c8 (block: don't lose track of REQ_INTEGRITY flag)
  	struct request *rq;
 +	unsigned int request_count = 0;
  	struct blk_plug *plug;
  	struct request *same_queue_rq = NULL;
  	blk_qc_t cookie;
@@@ -1900,7 -1928,8 +1904,12 @@@
  
  	rq_qos_throttle(q, bio);
  
++<<<<<<< HEAD
 +	rq = blk_mq_get_request(q, bio, bio->bi_opf, &data);
++=======
+ 	data.cmd_flags = bio->bi_opf;
+ 	rq = blk_mq_get_request(q, bio, &data);
++>>>>>>> 7809167da5c8 (block: don't lose track of REQ_INTEGRITY flag)
  	if (unlikely(!rq)) {
  		rq_qos_cleanup(q, bio);
  		if (bio->bi_opf & REQ_NOWAIT)
* Unmerged path block/blk-mq.c
