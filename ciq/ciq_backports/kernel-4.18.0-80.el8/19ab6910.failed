net/sched: act_pedit: fix memory leak when IDR allocation fails

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
Rebuild_CHGLOG: - [net] sched: act_pedit: fix memory leak when IDR allocation fails (Ivan Vecera) [1638022]
Rebuild_FUZZ: 96.72%
commit-author Davide Caratti <dcaratti@redhat.com>
commit 19ab69107d3ecfb7cd3e38ad262a881be40c01a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/19ab6910.failed

tcf_idr_check_alloc() can return a negative value, on allocation failures
(-ENOMEM) or IDR exhaustion (-ENOSPC): don't leak keys_ex in these cases.

Fixes: 0190c1d452a9 ("net: sched: atomically check-allocate action")
	Signed-off-by: Davide Caratti <dcaratti@redhat.com>
	Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 19ab69107d3ecfb7cd3e38ad262a881be40c01a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_pedit.c
diff --cc net/sched/act_pedit.c
index 504990003810,2b372a06b432..000000000000
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@@ -196,28 -193,29 +196,34 @@@ static int tcf_pedit_init(struct net *n
  			goto out_free;
  		}
  		ret = ACT_P_CREATED;
 -	} else if (err > 0) {
 +	} else {
  		if (bind)
  			goto out_free;
 +		tcf_idr_release(*a, bind);
  		if (!ovr) {
  			ret = -EEXIST;
 -			goto out_release;
 +			goto out_free;
 +		}
 +		p = to_pedit(*a);
 +		if (p->tcfp_nkeys && p->tcfp_nkeys != parm->nkeys) {
 +			keys = kmalloc(ksize, GFP_KERNEL);
 +			if (!keys) {
 +				ret = -ENOMEM;
 +				goto out_free;
 +			}
  		}
++<<<<<<< HEAD
++=======
+ 	} else {
+ 		ret = err;
+ 		goto out_free;
++>>>>>>> 19ab69107d3e (net/sched: act_pedit: fix memory leak when IDR allocation fails)
  	}
  
 -	p = to_pedit(*a);
  	spin_lock_bh(&p->tcf_lock);
 -
 -	if (ret == ACT_P_CREATED ||
 -	    (p->tcfp_nkeys && p->tcfp_nkeys != parm->nkeys)) {
 -		keys = kmalloc(ksize, GFP_ATOMIC);
 -		if (!keys) {
 -			spin_unlock_bh(&p->tcf_lock);
 -			ret = -ENOMEM;
 -			goto out_release;
 -		}
 +	p->tcfp_flags = parm->flags;
 +	p->tcf_action = parm->action;
 +	if (keys) {
  		kfree(p->tcfp_keys);
  		p->tcfp_keys = keys;
  		p->tcfp_nkeys = parm->nkeys;
* Unmerged path net/sched/act_pedit.c
