block: fix attempt to assign NULL io_context

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Jens Axboe <axboe@kernel.dk>
commit 0c62bff1fd633774756be6d88d71002cd37615e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/0c62bff1.failed

If the first request allocated and issued by a process is a passhthrough
request, we don't set up an IO context for it. Ensure that
blk_mq_sched_assign_ioc() ignores a NULL io_context.

Fixes: e2b3fa5af70c ("block: Remove bio->bi_ioc")
	Reported-by: Ming Lei <ming.lei@redhat.com>
	Tested-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 0c62bff1fd633774756be6d88d71002cd37615e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-sched.c
diff --cc block/blk-mq-sched.c
index 51ff587cddb8,f096d8989773..000000000000
--- a/block/blk-mq-sched.c
+++ b/block/blk-mq-sched.c
@@@ -31,15 -31,22 +31,29 @@@ void blk_mq_sched_free_hctx_data(struc
  }
  EXPORT_SYMBOL_GPL(blk_mq_sched_free_hctx_data);
  
 -void blk_mq_sched_assign_ioc(struct request *rq)
 +void blk_mq_sched_assign_ioc(struct request *rq, struct bio *bio)
  {
  	struct request_queue *q = rq->q;
++<<<<<<< HEAD
 +	struct io_context *ioc = rq_ioc(bio);
 +	struct io_cq *icq;
 +
 +	spin_lock_irq(q->queue_lock);
++=======
+ 	struct io_context *ioc;
+ 	struct io_cq *icq;
+ 
+ 	/*
+ 	 * May not have an IO context if it's a passthrough request
+ 	 */
+ 	ioc = current->io_context;
+ 	if (!ioc)
+ 		return;
+ 
+ 	spin_lock_irq(&q->queue_lock);
++>>>>>>> 0c62bff1fd63 (block: fix attempt to assign NULL io_context)
  	icq = ioc_lookup_icq(ioc, q);
 -	spin_unlock_irq(&q->queue_lock);
 +	spin_unlock_irq(q->queue_lock);
  
  	if (!icq) {
  		icq = ioc_create_icq(ioc, q, GFP_ATOMIC);
* Unmerged path block/blk-mq-sched.c
