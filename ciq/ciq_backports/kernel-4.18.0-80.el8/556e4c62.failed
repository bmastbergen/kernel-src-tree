x86/amd_nb: Add support for newer PCI topologies

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Woods, Brian <Brian.Woods@amd.com>
commit 556e4c62baffa71e2045a298379db7e57dd47f3d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/556e4c62.failed

Add support for new processors which have multiple PCI root complexes
per data fabric/system management network interface.  If there are (N)
multiple PCI roots per DF/SMN interface, then the PCI roots are
redundant (as far as SMN/DF access goes).  For each DF/SMN interface:
map to the first available PCI root and skip the next N-1 PCI roots so
the following DF/SMN interface get mapped to a correct PCI root.

Ex:
DF/SMN 0 -> 60
	    40
	    20
	    00
DF/SMN 1 -> e0
	    c0
	    a0
	    80

	Signed-off-by: Brian Woods <brian.woods@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
CC: Bjorn Helgaas <bhelgaas@google.com>
CC: Clemens Ladisch <clemens@ladisch.de>
CC: Guenter Roeck <linux@roeck-us.net>
CC: "H. Peter Anvin" <hpa@zytor.com>
CC: Ingo Molnar <mingo@redhat.com>
CC: Jean Delvare <jdelvare@suse.com>
CC: Jia Zhang <qianyue.zj@alibaba-inc.com>
CC: <linux-hwmon@vger.kernel.org>
CC: <linux-pci@vger.kernel.org>
CC: Pu Wen <puwen@hygon.cn>
CC: Thomas Gleixner <tglx@linutronix.de>
CC: x86-ml <x86@kernel.org>
Link: http://lkml.kernel.org/r/20181106200754.60722-3-brian.woods@amd.com
(cherry picked from commit 556e4c62baffa71e2045a298379db7e57dd47f3d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/amd_nb.c
diff --cc arch/x86/kernel/amd_nb.c
index bf440af5ff9c,cc34266e3c62..000000000000
--- a/arch/x86/kernel/amd_nb.c
+++ b/arch/x86/kernel/amd_nb.c
@@@ -193,35 -208,76 +193,85 @@@ EXPORT_SYMBOL_GPL(amd_df_indirect_read)
  
  int amd_cache_northbridges(void)
  {
++<<<<<<< HEAD
 +	u16 i = 0;
 +	struct amd_northbridge *nb;
 +	struct pci_dev *root, *misc, *link;
++=======
+ 	const struct pci_device_id *misc_ids = amd_nb_misc_ids;
+ 	const struct pci_device_id *link_ids = amd_nb_link_ids;
+ 	const struct pci_device_id *root_ids = amd_root_ids;
+ 	struct pci_dev *root, *misc, *link;
+ 	struct amd_northbridge *nb;
+ 	u16 roots_per_misc = 0;
+ 	u16 misc_count = 0;
+ 	u16 root_count = 0;
+ 	u16 i, j;
++>>>>>>> 556e4c62baff (x86/amd_nb: Add support for newer PCI topologies)
  
  	if (amd_northbridges.num)
  		return 0;
  
 -	if (boot_cpu_data.x86_vendor == X86_VENDOR_HYGON) {
 -		root_ids = hygon_root_ids;
 -		misc_ids = hygon_nb_misc_ids;
 -		link_ids = hygon_nb_link_ids;
 -	}
 -
  	misc = NULL;
++<<<<<<< HEAD
 +	while ((misc = next_northbridge(misc, amd_nb_misc_ids)) != NULL)
 +		i++;
++=======
+ 	while ((misc = next_northbridge(misc, misc_ids)) != NULL)
+ 		misc_count++;
++>>>>>>> 556e4c62baff (x86/amd_nb: Add support for newer PCI topologies)
  
- 	if (!i)
+ 	if (!misc_count)
  		return -ENODEV;
  
- 	nb = kcalloc(i, sizeof(struct amd_northbridge), GFP_KERNEL);
+ 	root = NULL;
+ 	while ((root = next_northbridge(root, root_ids)) != NULL)
+ 		root_count++;
+ 
+ 	if (root_count) {
+ 		roots_per_misc = root_count / misc_count;
+ 
+ 		/*
+ 		 * There should be _exactly_ N roots for each DF/SMN
+ 		 * interface.
+ 		 */
+ 		if (!roots_per_misc || (root_count % roots_per_misc)) {
+ 			pr_info("Unsupported AMD DF/PCI configuration found\n");
+ 			return -ENODEV;
+ 		}
+ 	}
+ 
+ 	nb = kcalloc(misc_count, sizeof(struct amd_northbridge), GFP_KERNEL);
  	if (!nb)
  		return -ENOMEM;
  
  	amd_northbridges.nb = nb;
- 	amd_northbridges.num = i;
+ 	amd_northbridges.num = misc_count;
  
  	link = misc = root = NULL;
- 	for (i = 0; i != amd_northbridges.num; i++) {
+ 	for (i = 0; i < amd_northbridges.num; i++) {
  		node_to_amd_nb(i)->root = root =
 -			next_northbridge(root, root_ids);
 +			next_northbridge(root, amd_root_ids);
  		node_to_amd_nb(i)->misc = misc =
 -			next_northbridge(misc, misc_ids);
 +			next_northbridge(misc, amd_nb_misc_ids);
  		node_to_amd_nb(i)->link = link =
++<<<<<<< HEAD
 +			next_northbridge(link, amd_nb_link_ids);
++=======
+ 			next_northbridge(link, link_ids);
+ 
+ 		/*
+ 		 * If there are more PCI root devices than data fabric/
+ 		 * system management network interfaces, then the (N)
+ 		 * PCI roots per DF/SMN interface are functionally the
+ 		 * same (for DF/SMN access) and N-1 are redundant.  N-1
+ 		 * PCI roots should be skipped per DF/SMN interface so
+ 		 * the following DF/SMN interfaces get mapped to
+ 		 * correct PCI roots.
+ 		 */
+ 		for (j = 1; j < roots_per_misc; j++)
+ 			root = next_northbridge(root, root_ids);
++>>>>>>> 556e4c62baff (x86/amd_nb: Add support for newer PCI topologies)
  	}
  
  	if (amd_gart_present())
* Unmerged path arch/x86/kernel/amd_nb.c
