x86/speculation/l1tf: Fix overflow in l1tf_pfn_limit() on 32bit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Vlastimil Babka <vbabka@suse.cz>
commit 9df9516940a61d29aedf4d91b483ca6597e7d480
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/9df95169.failed

On 32bit PAE kernels on 64bit hardware with enough physical bits,
l1tf_pfn_limit() will overflow unsigned long. This in turn affects
max_swapfile_size() and can lead to swapon returning -EINVAL. This has been
observed in a 32bit guest with 42 bits physical address size, where
max_swapfile_size() overflows exactly to 1 << 32, thus zero, and produces
the following warning to dmesg:

[    6.396845] Truncating oversized swap area, only using 0k out of 2047996k

Fix this by using unsigned long long instead.

Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
Fixes: 377eeaa8e11f ("x86/speculation/l1tf: Limit swap file size to MAX_PA/2")
	Reported-by: Dominique Leuenberger <dimstar@suse.de>
	Reported-by: Adrian Schroeter <adrian@suse.de>
	Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Cc: "H . Peter Anvin" <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/20180820095835.5298-1-vbabka@suse.cz

(cherry picked from commit 9df9516940a61d29aedf4d91b483ca6597e7d480)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/processor.h
diff --cc arch/x86/include/asm/processor.h
index cfd29ee8c3da,a0a52274cb4a..000000000000
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@@ -181,6 -181,11 +181,14 @@@ extern const struct seq_operations cpui
  
  extern void cpu_detect(struct cpuinfo_x86 *c);
  
++<<<<<<< HEAD
++=======
+ static inline unsigned long long l1tf_pfn_limit(void)
+ {
+ 	return BIT_ULL(boot_cpu_data.x86_phys_bits - 1 - PAGE_SHIFT) - 1;
+ }
+ 
++>>>>>>> 9df9516940a6 (x86/speculation/l1tf: Fix overflow in l1tf_pfn_limit() on 32bit)
  extern void early_cpu_init(void);
  extern void identify_boot_cpu(void);
  extern void identify_secondary_cpu(struct cpuinfo_x86 *);
* Unmerged path arch/x86/include/asm/processor.h
diff --git a/arch/x86/mm/init.c b/arch/x86/mm/init.c
index 862191ed3d6e..a6a95edad859 100644
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@ -891,7 +891,7 @@ unsigned long max_swapfile_size(void)
 
 	if (boot_cpu_has_bug(X86_BUG_L1TF)) {
 		/* Limit the swap file size to MAX_PA/2 for L1TF workaround */
-		unsigned long l1tf_limit = l1tf_pfn_limit() + 1;
+		unsigned long long l1tf_limit = l1tf_pfn_limit() + 1;
 		/*
 		 * We encode swap offsets also with 3 bits below those for pfn
 		 * which makes the usable limit higher.
@@ -899,7 +899,7 @@ unsigned long max_swapfile_size(void)
 #if CONFIG_PGTABLE_LEVELS > 2
 		l1tf_limit <<= PAGE_SHIFT - SWP_OFFSET_FIRST_BIT;
 #endif
-		pages = min_t(unsigned long, l1tf_limit, pages);
+		pages = min_t(unsigned long long, l1tf_limit, pages);
 	}
 	return pages;
 }
