vfs: remap helper should update destination inode metadata

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit 8dde90bca6fca3736ea20109654bcf6dcf2ecf1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/8dde90bc.failed

Extend generic_remap_file_range_prep to handle inode metadata updates
when remapping into a file.  If the operation can possibly alter the
file contents, we must update the ctime and mtime and remove security
privileges, just like we do for regular file writes.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 8dde90bca6fca3736ea20109654bcf6dcf2ecf1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_reflink.c
diff --cc fs/xfs/xfs_reflink.c
index a7757a128a78,2d7dd8b28d7c..000000000000
--- a/fs/xfs/xfs_reflink.c
+++ b/fs/xfs/xfs_reflink.c
@@@ -1371,29 -1372,6 +1371,32 @@@ xfs_reflink_remap_prep
  	truncate_inode_pages_range(&inode_out->i_data, pos_out,
  				   PAGE_ALIGN(pos_out + *len) - 1);
  
++<<<<<<< HEAD
 +	/* If we're altering the file contents... */
 +	if (!is_dedupe) {
 +		/*
 +		 * ...update the timestamps (which will grab the ilock again
 +		 * from xfs_fs_dirty_inode, so we have to call it before we
 +		 * take the ilock).
 +		 */
 +		if (!(file_out->f_mode & FMODE_NOCMTIME)) {
 +			ret = file_update_time(file_out);
 +			if (ret)
 +				goto out_unlock;
 +		}
 +
 +		/*
 +		 * ...clear the security bits if the process is not being run
 +		 * by root.  This keeps people from modifying setuid and setgid
 +		 * binaries.
 +		 */
 +		ret = file_remove_privs(file_out);
 +		if (ret)
 +			goto out_unlock;
 +	}
 +
++=======
++>>>>>>> 8dde90bca6fc (vfs: remap helper should update destination inode metadata)
  	return 1;
  out_unlock:
  	xfs_reflink_remap_unlock(file_in, file_out);
diff --git a/fs/read_write.c b/fs/read_write.c
index 734c5661fb69..e4ed58ee862d 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -1820,6 +1820,25 @@ int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
 	if (ret)
 		return ret;
 
+	/* If can't alter the file contents, we're done. */
+	if (!(remap_flags & REMAP_FILE_DEDUP)) {
+		/* Update the timestamps, since we can alter file contents. */
+		if (!(file_out->f_mode & FMODE_NOCMTIME)) {
+			ret = file_update_time(file_out);
+			if (ret)
+				return ret;
+		}
+
+		/*
+		 * Clear the security bits if the process is not being run by
+		 * root.  This keeps people from modifying setuid and setgid
+		 * binaries.
+		 */
+		ret = file_remove_privs(file_out);
+		if (ret)
+			return ret;
+	}
+
 	return 1;
 }
 EXPORT_SYMBOL(generic_remap_file_range_prep);
* Unmerged path fs/xfs/xfs_reflink.c
