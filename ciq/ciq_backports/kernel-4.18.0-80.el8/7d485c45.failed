net_sched: remove unused tcf_idr_check()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit 7d485c451fc82f8ae431cdb379521bc6d0641064
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/7d485c45.failed

tcf_idr_check() is replaced by tcf_idr_check_alloc(),
and __tcf_idr_check() now can be folded into tcf_idr_search().

Fixes: 0190c1d452a9 ("net: sched: atomically check-allocate action")
	Cc: Jiri Pirko <jiri@mellanox.com>
	Cc: Vlad Buslov <vladbu@mellanox.com>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7d485c451fc82f8ae431cdb379521bc6d0641064)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_api.c
diff --cc net/sched/act_api.c
index 798bd0da5ca2,d76948f02a02..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -277,50 -300,29 +277,67 @@@ int tcf_generic_walker(struct tc_action
  }
  EXPORT_SYMBOL(tcf_generic_walker);
  
++<<<<<<< HEAD
 +static struct tc_action *tcf_idr_lookup(u32 index, struct tcf_idrinfo *idrinfo)
++=======
+ int tcf_idr_search(struct tc_action_net *tn, struct tc_action **a, u32 index)
++>>>>>>> 7d485c451fc8 (net_sched: remove unused tcf_idr_check())
  {
 -	struct tcf_idrinfo *idrinfo = tn->idrinfo;
 -	struct tc_action *p;
 +	struct tc_action *p = NULL;
  
  	spin_lock(&idrinfo->lock);
  	p = idr_find(&idrinfo->action_idr, index);
++<<<<<<< HEAD
++=======
+ 	if (IS_ERR(p))
+ 		p = NULL;
+ 	else if (p)
+ 		refcount_inc(&p->tcfa_refcnt);
++>>>>>>> 7d485c451fc8 (net_sched: remove unused tcf_idr_check())
  	spin_unlock(&idrinfo->lock);
  
 +	return p;
 +}
++<<<<<<< HEAD
 +
 +int tcf_idr_search(struct tc_action_net *tn, struct tc_action **a, u32 index)
 +{
 +	struct tcf_idrinfo *idrinfo = tn->idrinfo;
 +	struct tc_action *p = tcf_idr_lookup(index, idrinfo);
 +
  	if (p) {
 +		*a = p;
 +		return 1;
 +	}
 +	return 0;
 +}
 +EXPORT_SYMBOL(tcf_idr_search);
 +
 +bool tcf_idr_check(struct tc_action_net *tn, u32 index, struct tc_action **a,
 +		   int bind)
 +{
 +	struct tcf_idrinfo *idrinfo = tn->idrinfo;
 +	struct tc_action *p = tcf_idr_lookup(index, idrinfo);
 +
 +	if (index && p) {
 +		if (bind)
 +			p->tcfa_bindcnt++;
 +		p->tcfa_refcnt++;
  		*a = p;
  		return true;
  	}
  	return false;
  }
 +EXPORT_SYMBOL(tcf_idr_check);
 +
 +int tcf_idr_delete_index(struct tc_action_net *tn, u32 index)
++=======
+ EXPORT_SYMBOL(tcf_idr_search);
+ 
+ static int tcf_idr_delete_index(struct tcf_idrinfo *idrinfo, u32 index)
++>>>>>>> 7d485c451fc8 (net_sched: remove unused tcf_idr_check())
  {
 +	struct tcf_idrinfo *idrinfo = tn->idrinfo;
  	struct tc_action *p;
  	int ret = 0;
  
diff --git a/include/net/act_api.h b/include/net/act_api.h
index 3713cac1ded4..6b941fed1182 100644
--- a/include/net/act_api.h
+++ b/include/net/act_api.h
@@ -147,8 +147,6 @@ int tcf_generic_walker(struct tc_action_net *tn, struct sk_buff *skb,
 		       const struct tc_action_ops *ops,
 		       struct netlink_ext_ack *extack);
 int tcf_idr_search(struct tc_action_net *tn, struct tc_action **a, u32 index);
-bool tcf_idr_check(struct tc_action_net *tn, u32 index, struct tc_action **a,
-		    int bind);
 int tcf_idr_create(struct tc_action_net *tn, u32 index, struct nlattr *est,
 		   struct tc_action **a, const struct tc_action_ops *ops,
 		   int bind, bool cpustats);
* Unmerged path net/sched/act_api.c
