rcu: Provide improved interrupt-from-idle check in rcu_check_callbacks()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit a0ef9ec24144799b5b47fa54c38f9a0f9dfe9a59
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/a0ef9ec2.failed

The patch making need_resched() respond to urgent RCU-QS needs used
is_idle_task(current) to detect an interrupt from idle, which does work
reasonably, but is (in theory at least) vulnerable to loops containing
need_resched() invoked from within RCU_NONIDLE() or its tracepoint
equivalent.  This commit therefore moves rcu_is_cpu_rrupt_from_idle()
to a place from which rcu_check_callbacks() can invoke it and replaces
the is_idle_task(current) with rcu_is_cpu_rrupt_from_idle().

	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
(cherry picked from commit a0ef9ec24144799b5b47fa54c38f9a0f9dfe9a59)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcu/tree.c
diff --cc kernel/rcu/tree.c
index 19ff444b5603,77d2cbf7c831..000000000000
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@@ -2479,7 -2470,16 +2479,20 @@@ static void rcu_do_batch(struct rcu_dat
  void rcu_check_callbacks(int user)
  {
  	trace_rcu_utilization(TPS("Start scheduler-tick"));
++<<<<<<< HEAD
 +	increment_cpu_stall_ticks();
++=======
+ 	raw_cpu_inc(rcu_data.ticks_this_gp);
+ 	/* The load-acquire pairs with the store-release setting to true. */
+ 	if (smp_load_acquire(this_cpu_ptr(&rcu_dynticks.rcu_urgent_qs))) {
+ 		/* Idle and userspace execution already are quiescent states. */
+ 		if (!rcu_is_cpu_rrupt_from_idle() && !user) {
+ 			set_tsk_need_resched(current);
+ 			set_preempt_need_resched();
+ 		}
+ 		__this_cpu_write(rcu_dynticks.rcu_urgent_qs, false);
+ 	}
++>>>>>>> a0ef9ec24144 (rcu: Provide improved interrupt-from-idle check in rcu_check_callbacks())
  	rcu_flavor_check_callbacks(user);
  	if (rcu_pending())
  		invoke_rcu_core();
* Unmerged path kernel/rcu/tree.c
