blkcg: convert blkg_lookup_create() to find closest blkg

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Dennis Zhou <dennis@kernel.org>
commit beea9da07d8a6228a7e4a31a83f9478d513bf03f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/beea9da0.failed

There are several scenarios where blkg_lookup_create() can fail such as
the blkcg dying, request_queue is dying, or simply being OOM. Most
handle this by simply falling back to the q->root_blkg and calling it a
day.

This patch implements the notion of closest blkg. During
blkg_lookup_create(), if it fails to create, return the closest blkg
found or the q->root_blkg. blkg_try_get_closest() is introduced and used
during association so a bio is always attached to a blkg.

	Signed-off-by: Dennis Zhou <dennis@kernel.org>
	Acked-by: Tejun Heo <tj@kernel.org>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit beea9da07d8a6228a7e4a31a83f9478d513bf03f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-iolatency.c
#	include/linux/blk-cgroup.h
diff --cc block/blk-iolatency.c
index 171f7ae1a396,46e86c34cf79..000000000000
--- a/block/blk-iolatency.c
+++ b/block/blk-iolatency.c
@@@ -396,21 -483,11 +396,25 @@@ static void blkcg_iolatency_throttle(st
  	rcu_read_lock();
  	bio_associate_blkcg(bio, NULL);
  	blkcg = bio_blkcg(bio);
++<<<<<<< HEAD
 +	blkg = blkg_lookup(blkcg, q);
 +	if (unlikely(!blkg)) {
 +		spin_lock_irq(q->queue_lock);
 +		blkg = blkg_lookup_create(blkcg, q);
 +		if (IS_ERR(blkg))
 +			blkg = NULL;
 +		spin_unlock_irq(q->queue_lock);
 +	}
 +	if (!blkg)
 +		goto out;
 +
++=======
+ 	blkg = blkg_lookup_create(blkcg, q);
++>>>>>>> beea9da07d8a (blkcg: convert blkg_lookup_create() to find closest blkg)
  	bio_issue_init(&bio->bi_issue, bio_sectors(bio));
  	bio_associate_blkg(bio, blkg);
- out:
  	rcu_read_unlock();
+ 
  	while (blkg && blkg->parent) {
  		struct iolatency_grp *iolat = blkg_to_lat(blkg);
  		if (!iolat) {
diff --cc include/linux/blk-cgroup.h
index 8bf2308b920c,c08e96e521ed..000000000000
--- a/include/linux/blk-cgroup.h
+++ b/include/linux/blk-cgroup.h
@@@ -849,15 -811,7 +863,19 @@@ static inline bool blkcg_bio_issue_chec
  	/* associate blkcg if bio hasn't attached one */
  	bio_associate_blkcg(bio, NULL);
  	blkcg = bio_blkcg(bio);
++<<<<<<< HEAD
 +
 +	blkg = blkg_lookup(blkcg, q);
 +	if (unlikely(!blkg)) {
 +		spin_lock_irq(q->queue_lock);
 +		blkg = blkg_lookup_create(blkcg, q);
 +		if (IS_ERR(blkg))
 +			blkg = NULL;
 +		spin_unlock_irq(q->queue_lock);
 +	}
++=======
+ 	blkg = blkg_lookup_create(blkcg, q);
++>>>>>>> beea9da07d8a (blkcg: convert blkg_lookup_create() to find closest blkg)
  
  	throtl = blk_throtl_bio(q, blkg, bio);
  
diff --git a/block/bio.c b/block/bio.c
index 8d70c85b6b8f..629bf45c024f 100644
--- a/block/bio.c
+++ b/block/bio.c
@@ -2009,21 +2009,24 @@ int bio_associate_blkcg(struct bio *bio, struct cgroup_subsys_state *blkcg_css)
 EXPORT_SYMBOL_GPL(bio_associate_blkcg);
 
 /**
- * bio_associate_blkg - associate a bio with the specified blkg
+ * bio_associate_blkg - associate a bio with the a blkg
  * @bio: target bio
  * @blkg: the blkg to associate
  *
- * Associate @bio with the blkg specified by @blkg.  This is the queue specific
- * blkcg information associated with the @bio, a reference will be taken on the
- * @blkg and will be freed when the bio is freed.
+ * This tries to associate @bio with the specified @blkg.  Association failure
+ * is handled by walking up the blkg tree.  Therefore, the blkg associated can
+ * be anything between @blkg and the root_blkg.  This situation only happens
+ * when a cgroup is dying and then the remaining bios will spill to the closest
+ * alive blkg.
+ *
+ * A reference will be taken on the @blkg and will be released when @bio is
+ * freed.
  */
 int bio_associate_blkg(struct bio *bio, struct blkcg_gq *blkg)
 {
 	if (unlikely(bio->bi_blkg))
 		return -EBUSY;
-	if (!blkg_try_get(blkg))
-		return -ENODEV;
-	bio->bi_blkg = blkg;
+	bio->bi_blkg = blkg_try_get_closest(blkg);
 	return 0;
 }
 
diff --git a/block/blk-cgroup.c b/block/blk-cgroup.c
index 301ed0447460..5ae6f9469def 100644
--- a/block/blk-cgroup.c
+++ b/block/blk-cgroup.c
@@ -268,9 +268,8 @@ static struct blkcg_gq *blkg_create(struct blkcg *blkcg,
  * that all non-root blkg's have access to the parent blkg.  This function
  * should be called under RCU read lock and @q->queue_lock.
  *
- * Returns pointer to the looked up or created blkg on success, ERR_PTR()
- * value on error.  If @q is dead, returns ERR_PTR(-EINVAL).  If @q is not
- * dead and bypassing, returns ERR_PTR(-EBUSY).
+ * Returns the blkg or the closest blkg if blkg_create() fails as it walks
+ * down from root.
  */
 struct blkcg_gq *blkg_lookup_create(struct blkcg *blkcg,
 				    struct request_queue *q)
@@ -286,19 +285,29 @@ struct blkcg_gq *blkg_lookup_create(struct blkcg *blkcg,
 
 	/*
 	 * Create blkgs walking down from blkcg_root to @blkcg, so that all
-	 * non-root blkgs have access to their parents.
+	 * non-root blkgs have access to their parents.  Returns the closest
+	 * blkg to the intended blkg should blkg_create() fail.
 	 */
 	while (true) {
 		struct blkcg *pos = blkcg;
 		struct blkcg *parent = blkcg_parent(blkcg);
-
-		while (parent && !__blkg_lookup(parent, q, false)) {
+		struct blkcg_gq *ret_blkg = q->root_blkg;
+
+		while (parent) {
+			blkg = __blkg_lookup(parent, q, false);
+			if (blkg) {
+				/* remember closest blkg */
+				ret_blkg = blkg;
+				break;
+			}
 			pos = parent;
 			parent = blkcg_parent(parent);
 		}
 
 		blkg = blkg_create(pos, q, NULL);
-		if (pos == blkcg || IS_ERR(blkg))
+		if (IS_ERR(blkg))
+			return ret_blkg;
+		if (pos == blkcg)
 			return blkg;
 	}
 }
* Unmerged path block/blk-iolatency.c
diff --git a/block/blk-throttle.c b/block/blk-throttle.c
index 07f1b008e5ab..d6c7fdfe9de9 100644
--- a/block/blk-throttle.c
+++ b/block/blk-throttle.c
@@ -2116,9 +2116,7 @@ static inline void throtl_update_latency_buckets(struct throtl_data *td)
 static void blk_throtl_assoc_bio(struct throtl_grp *tg, struct bio *bio)
 {
 #ifdef CONFIG_BLK_DEV_THROTTLING_LOW
-	/* fallback to root_blkg if we fail to get a blkg ref */
-	if (bio->bi_css && (bio_associate_blkg(bio, tg_to_blkg(tg)) == -ENODEV))
-		bio_associate_blkg(bio, bio->bi_disk->queue->root_blkg);
+	bio_associate_blkg(bio, tg_to_blkg(tg));
 	bio_issue_init(&bio->bi_issue, bio_sectors(bio));
 #endif
 }
* Unmerged path include/linux/blk-cgroup.h
