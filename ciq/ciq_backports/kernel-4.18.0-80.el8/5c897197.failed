net: hns3: Fix for l4 checksum offload bug

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Yunsheng Lin <linyunsheng@huawei.com>
commit 5c8971979a10783150e1011ece685333bbec5759
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/5c897197.failed

Hardware only support tcp/udp/sctp l4 checksum offload, but
the driver currently tell hardware to do l4 checksum offlad when
l3 is IPv4 or IPv6, which may cause checksumm error.

This patch fixes it by only enabling the l4 offload when l4 is
tcp/udp/sctp.

Fixes: 76ad4f0ee747 ("net: hns3: Add support of HNS3 Ethernet Driver for hip08 SoC")
	Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
	Signed-off-by: Peng Li <lipeng321@huawei.com>
	Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5c8971979a10783150e1011ece685333bbec5759)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
diff --cc drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
index 53abd18b5f31,c211450bfd78..000000000000
--- a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
@@@ -785,36 -790,36 +785,66 @@@ static int hns3_set_l3l4_type_csum(stru
  		 * need the hardware to recompute it is in the case of TSO.
  		 */
  		if (skb_is_gso(skb))
++<<<<<<< HEAD
 +			hnae_set_bit(*type_cs_vlan_tso, HNS3_TXD_L3CS_B, 1);
 +
 +		hnae_set_bit(*type_cs_vlan_tso, HNS3_TXD_L4CS_B, 1);
 +	} else if (l3.v6->version == 6) {
 +		hnae_set_field(*type_cs_vlan_tso, HNS3_TXD_L3T_M,
 +			       HNS3_TXD_L3T_S, HNS3_L3T_IPV6);
 +		hnae_set_bit(*type_cs_vlan_tso, HNS3_TXD_L4CS_B, 1);
++=======
+ 			hnae3_set_bit(*type_cs_vlan_tso, HNS3_TXD_L3CS_B, 1);
+ 	} else if (l3.v6->version == 6) {
+ 		hnae3_set_field(*type_cs_vlan_tso, HNS3_TXD_L3T_M,
+ 				HNS3_TXD_L3T_S, HNS3_L3T_IPV6);
++>>>>>>> 5c8971979a10 (net: hns3: Fix for l4 checksum offload bug)
  	}
  
  	switch (l4_proto) {
  	case IPPROTO_TCP:
++<<<<<<< HEAD
 +		hnae_set_field(*type_cs_vlan_tso,
 +			       HNS3_TXD_L4T_M,
 +			       HNS3_TXD_L4T_S,
 +			       HNS3_L4T_TCP);
++=======
+ 		hnae3_set_bit(*type_cs_vlan_tso, HNS3_TXD_L4CS_B, 1);
+ 		hnae3_set_field(*type_cs_vlan_tso,
+ 				HNS3_TXD_L4T_M,
+ 				HNS3_TXD_L4T_S,
+ 				HNS3_L4T_TCP);
++>>>>>>> 5c8971979a10 (net: hns3: Fix for l4 checksum offload bug)
  		break;
  	case IPPROTO_UDP:
  		if (hns3_tunnel_csum_bug(skb))
  			break;
  
++<<<<<<< HEAD
 +		hnae_set_field(*type_cs_vlan_tso,
 +			       HNS3_TXD_L4T_M,
 +			       HNS3_TXD_L4T_S,
 +			       HNS3_L4T_UDP);
 +		break;
 +	case IPPROTO_SCTP:
 +		hnae_set_field(*type_cs_vlan_tso,
 +			       HNS3_TXD_L4T_M,
 +			       HNS3_TXD_L4T_S,
 +			       HNS3_L4T_SCTP);
++=======
+ 		hnae3_set_bit(*type_cs_vlan_tso, HNS3_TXD_L4CS_B, 1);
+ 		hnae3_set_field(*type_cs_vlan_tso,
+ 				HNS3_TXD_L4T_M,
+ 				HNS3_TXD_L4T_S,
+ 				HNS3_L4T_UDP);
+ 		break;
+ 	case IPPROTO_SCTP:
+ 		hnae3_set_bit(*type_cs_vlan_tso, HNS3_TXD_L4CS_B, 1);
+ 		hnae3_set_field(*type_cs_vlan_tso,
+ 				HNS3_TXD_L4T_M,
+ 				HNS3_TXD_L4T_S,
+ 				HNS3_L4T_SCTP);
++>>>>>>> 5c8971979a10 (net: hns3: Fix for l4 checksum offload bug)
  		break;
  	default:
  		/* drop the skb tunnel packet if hardware don't support,
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
