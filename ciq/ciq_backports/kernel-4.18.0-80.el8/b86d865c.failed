blkcg: Make blkg_root_lookup() work for queues in bypass mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Bart Van Assche <bart.vanassche@wdc.com>
commit b86d865cb1cae1e61527ea0b8977078bbf694328
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/b86d865c.failed

For legacy queues the only call of blkg_root_lookup() happens after
bypass mode has been enabled. Since blkg_lookup() returns NULL for
queues in bypass mode, modify the blkg_root_lookup() such that it
no longer depends on bypass mode. Rename the function into
blk_queue_root_blkg() as suggested by Tejun.

	Suggested-by: Tejun Heo <tj@kernel.org>
Fixes: 6bad9b210a22 ("blkcg: Introduce blkg_root_lookup()")
	Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
	Cc: Tejun Heo <tj@kernel.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b86d865cb1cae1e61527ea0b8977078bbf694328)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-sysfs.c
diff --cc block/blk-sysfs.c
index 49c29a5d06bb,bb109bb0a055..000000000000
--- a/block/blk-sysfs.c
+++ b/block/blk-sysfs.c
@@@ -802,6 -802,21 +802,24 @@@ static void __blk_release_queue(struct 
  		blk_stat_remove_callback(q, q->poll_cb);
  	blk_stat_free_callback(q->poll_cb);
  
++<<<<<<< HEAD
++=======
+ 	if (!blk_queue_dead(q)) {
+ 		/*
+ 		 * Last reference was dropped without having called
+ 		 * blk_cleanup_queue().
+ 		 */
+ 		WARN_ONCE(blk_queue_init_done(q),
+ 			  "request queue %p has been registered but blk_cleanup_queue() has not been called for that queue\n",
+ 			  q);
+ 		blk_exit_queue(q);
+ 	}
+ 
+ 	WARN(blk_queue_root_blkg(q),
+ 	     "request queue %p is being released but it has not yet been removed from the blkcg controller\n",
+ 	     q);
+ 
++>>>>>>> b86d865cb1ca (blkcg: Make blkg_root_lookup() work for queues in bypass mode)
  	blk_free_queue_stats(q->stats);
  
  	blk_exit_rl(q, &q->root_rl);
* Unmerged path block/blk-sysfs.c
diff --git a/include/linux/blk-cgroup.h b/include/linux/blk-cgroup.h
index 1361cfc9b878..34aec30e06c7 100644
--- a/include/linux/blk-cgroup.h
+++ b/include/linux/blk-cgroup.h
@@ -342,20 +342,14 @@ static inline struct blkcg_gq *blkg_lookup(struct blkcg *blkcg,
 }
 
 /**
- * blkg_lookup - look up blkg for the specified request queue
+ * blk_queue_root_blkg - return blkg for the (blkcg_root, @q) pair
  * @q: request_queue of interest
  *
  * Lookup blkg for @q at the root level. See also blkg_lookup().
  */
-static inline struct blkcg_gq *blkg_root_lookup(struct request_queue *q)
+static inline struct blkcg_gq *blk_queue_root_blkg(struct request_queue *q)
 {
-	struct blkcg_gq *blkg;
-
-	rcu_read_lock();
-	blkg = blkg_lookup(&blkcg_root, q);
-	rcu_read_unlock();
-
-	return blkg;
+	return q->root_blkg;
 }
 
 /**
@@ -881,7 +875,8 @@ static inline bool blk_cgroup_congested(void) { return false; }
 static inline void blkcg_schedule_throttle(struct request_queue *q, bool use_memdelay) { }
 
 static inline struct blkcg_gq *blkg_lookup(struct blkcg *blkcg, void *key) { return NULL; }
-static inline struct blkcg_gq *blkg_root_lookup(struct request_queue *q) { return NULL; }
+static inline struct blkcg_gq *blk_queue_root_blkg(struct request_queue *q)
+{ return NULL; }
 static inline int blkcg_init_queue(struct request_queue *q) { return 0; }
 static inline void blkcg_drain_queue(struct request_queue *q) { }
 static inline void blkcg_exit_queue(struct request_queue *q) { }
