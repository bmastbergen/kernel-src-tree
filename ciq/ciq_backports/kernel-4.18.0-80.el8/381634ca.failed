PCI: Hide pci_reset_bridge_secondary_bus() from drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Sinan Kaya <okaya@codeaurora.org>
commit 381634cad15b711e033a2638d558232b60f753f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/381634ca.failed

Rename pci_reset_bridge_secondary_bus() to pci_bridge_secondary_bus_reset()
and move the declaration from linux/pci.h to drivers/pci.h to be used
internally in PCI directory only.

	Signed-off-by: Sinan Kaya <okaya@codeaurora.org>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 381634cad15b711e033a2638d558232b60f753f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/hotplug/pciehp_hpc.c
#	drivers/pci/pci.c
#	drivers/pci/pcie/aer.c
#	drivers/pci/pcie/err.c
diff --cc drivers/pci/hotplug/pciehp_hpc.c
index 5b15e76f3564,8dae23221344..000000000000
--- a/drivers/pci/hotplug/pciehp_hpc.c
+++ b/drivers/pci/hotplug/pciehp_hpc.c
@@@ -777,8 -743,10 +777,12 @@@ int pciehp_reset_slot(struct slot *slot
  	pcie_write_cmd(ctrl, 0, ctrl_mask);
  	ctrl_dbg(ctrl, "%s: SLOTCTRL %x write cmd %x\n", __func__,
  		 pci_pcie_cap(ctrl->pcie->port) + PCI_EXP_SLTCTL, 0);
 -	if (pciehp_poll_mode)
 -		del_timer_sync(&ctrl->poll_timer);
  
++<<<<<<< HEAD
 +	pci_reset_bridge_secondary_bus(ctrl->pcie->port);
++=======
+ 	rc = pci_bridge_secondary_bus_reset(ctrl->pcie->port);
++>>>>>>> 381634cad15b (PCI: Hide pci_reset_bridge_secondary_bus() from drivers)
  
  	pcie_capability_write_word(pdev, PCI_EXP_SLTSTA, stat_mask);
  	pcie_write_cmd_nowait(ctrl, ctrl_mask, ctrl_mask);
diff --cc drivers/pci/pci.c
index 216dcb4b0a67,236220cb0f77..000000000000
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@@ -4559,9 -4252,7 +4558,13 @@@ static int pci_parent_bus_reset(struct 
  	if (probe)
  		return 0;
  
++<<<<<<< HEAD
 +	pci_reset_bridge_secondary_bus(dev->bus->self);
 +
 +	return 0;
++=======
+ 	return pci_bridge_secondary_bus_reset(dev->bus->self);
++>>>>>>> 381634cad15b (PCI: Hide pci_reset_bridge_secondary_bus() from drivers)
  }
  
  static int pci_reset_hotplug_slot(struct hotplug_slot *hotplug, int probe)
@@@ -5166,7 -4859,7 +5169,11 @@@ static int pci_bus_reset(struct pci_bu
  
  	might_sleep();
  
++<<<<<<< HEAD
 +	pci_reset_bridge_secondary_bus(bus->self);
++=======
+ 	ret = pci_bridge_secondary_bus_reset(bus->self);
++>>>>>>> 381634cad15b (PCI: Hide pci_reset_bridge_secondary_bus() from drivers)
  
  	pci_bus_unlock(bus);
  
@@@ -5230,7 -4923,7 +5237,11 @@@ int pci_try_reset_bus(struct pci_bus *b
  
  	if (pci_bus_trylock(bus)) {
  		might_sleep();
++<<<<<<< HEAD
 +		pci_reset_bridge_secondary_bus(bus->self);
++=======
+ 		rc = pci_bridge_secondary_bus_reset(bus->self);
++>>>>>>> 381634cad15b (PCI: Hide pci_reset_bridge_secondary_bus() from drivers)
  		pci_bus_unlock(bus);
  	} else
  		rc = -EAGAIN;
diff --cc drivers/pci/pcie/aer.c
index c7d5232e5a1c,8c12efca9259..000000000000
--- a/drivers/pci/pcie/aer.c
+++ b/drivers/pci/pcie/aer.c
@@@ -1545,7 -1314,7 +1545,11 @@@ static pci_ers_result_t aer_root_reset(
  	reg32 &= ~ROOT_PORT_INTR_ON_MESG_MASK;
  	pci_write_config_dword(dev, pos + PCI_ERR_ROOT_COMMAND, reg32);
  
++<<<<<<< HEAD
 +	pci_reset_bridge_secondary_bus(dev);
++=======
+ 	rc = pci_bridge_secondary_bus_reset(dev);
++>>>>>>> 381634cad15b (PCI: Hide pci_reset_bridge_secondary_bus() from drivers)
  	pci_printk(KERN_DEBUG, dev, "Root Port link has been reset\n");
  
  	/* Clear Root Error Status */
diff --cc drivers/pci/pcie/err.c
index 674984a9277a,ae72f88d3ca2..000000000000
--- a/drivers/pci/pcie/err.c
+++ b/drivers/pci/pcie/err.c
@@@ -175,9 -175,11 +175,15 @@@ out
   */
  static pci_ers_result_t default_reset_link(struct pci_dev *dev)
  {
++<<<<<<< HEAD
 +	pci_reset_bridge_secondary_bus(dev);
++=======
+ 	int rc;
+ 
+ 	rc = pci_bridge_secondary_bus_reset(dev);
++>>>>>>> 381634cad15b (PCI: Hide pci_reset_bridge_secondary_bus() from drivers)
  	pci_printk(KERN_DEBUG, dev, "downstream link has been reset\n");
 -	return rc ? PCI_ERS_RESULT_DISCONNECT : PCI_ERS_RESULT_RECOVERED;
 +	return PCI_ERS_RESULT_RECOVERED;
  }
  
  static pci_ers_result_t reset_link(struct pci_dev *dev, u32 service)
* Unmerged path drivers/pci/hotplug/pciehp_hpc.c
* Unmerged path drivers/pci/pci.c
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index d8291f0ea7a2..1ba2e4d09ba4 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -33,6 +33,7 @@ int pci_mmap_fits(struct pci_dev *pdev, int resno, struct vm_area_struct *vmai,
 		  enum pci_mmap_api mmap_api);
 
 int pci_probe_reset_function(struct pci_dev *dev);
+int pci_bridge_secondary_bus_reset(struct pci_dev *dev);
 
 /**
  * struct pci_platform_pm_ops - Firmware PM callbacks
* Unmerged path drivers/pci/pcie/aer.c
* Unmerged path drivers/pci/pcie/err.c
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 54d75bcf2f8b..41ca17730318 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1119,7 +1119,6 @@ int pci_reset_bus(struct pci_bus *bus);
 int pci_try_reset_bus(struct pci_bus *bus);
 void pci_reset_secondary_bus(struct pci_dev *dev);
 void pcibios_reset_secondary_bus(struct pci_dev *dev);
-int pci_reset_bridge_secondary_bus(struct pci_dev *dev);
 void pci_update_resource(struct pci_dev *dev, int resno);
 int __must_check pci_assign_resource(struct pci_dev *dev, int i);
 int __must_check pci_reassign_resource(struct pci_dev *dev, int i, resource_size_t add_size, resource_size_t align);
