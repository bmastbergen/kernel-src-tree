kvm: nVMX: Set VM instruction error for VMPTRLD of unbacked page

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Jim Mattson <jmattson@google.com>
commit fca91f6d60b6ee53b8d43c8ad5bad153a758961c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/fca91f6d.failed

It is never correct for a VMX instruction to fail with "invalid VMCS"
if there is, in fact, a current VMCS. Reads from unbacked addresses
return all 1's, which means that an unbacked VMCS will not have the
correct VMCS revision ID (i.e. VMCS12_REVISION).

Fixes: 63846663eac78 ("KVM: nVMX: Implement VMPTRLD")
	Signed-off-by: Jim Mattson <jmattson@google.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit fca91f6d60b6ee53b8d43c8ad5bad153a758961c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx.c
diff --cc arch/x86/kvm/vmx.c
index ae631b330642,c379d0bfdcba..000000000000
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@@ -8741,7 -9319,14 +8741,18 @@@ static int handle_vmptrld(struct kvm_vc
  		struct page *page;
  		page = kvm_vcpu_gpa_to_page(vcpu, vmptr);
  		if (is_error_page(page)) {
++<<<<<<< HEAD
 +			nested_vmx_failInvalid(vcpu);
++=======
+ 			/*
+ 			 * Reads from an unbacked page return all 1s,
+ 			 * which means that the 32 bits located at the
+ 			 * given physical address won't match the required
+ 			 * VMCS12_REVISION identifier.
+ 			 */
+ 			nested_vmx_failValid(vcpu,
+ 				VMXERR_VMPTRLD_INCORRECT_VMCS_REVISION_ID);
++>>>>>>> fca91f6d60b6 (kvm: nVMX: Set VM instruction error for VMPTRLD of unbacked page)
  			return kvm_skip_emulated_instruction(vcpu);
  		}
  		new_vmcs12 = kmap(page);
* Unmerged path arch/x86/kvm/vmx.c
