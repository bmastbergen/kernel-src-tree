rcu: Make need_resched() respond to urgent RCU-QS needs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit 92aa39e9dc77481b90cbef25e547d66cab901496
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/92aa39e9.failed

The per-CPU rcu_dynticks.rcu_urgent_qs variable communicates an urgent
need for an RCU quiescent state from the force-quiescent-state processing
within the grace-period kthread to context switches and to cond_resched().
Unfortunately, such urgent needs are not communicated to need_resched(),
which is sometimes used to decide when to invoke cond_resched(), for
but one example, within the KVM vcpu_run() function.  As of v4.15, this
can result in synchronize_sched() being delayed by up to ten seconds,
which can be problematic, to say nothing of annoying.

This commit therefore checks rcu_dynticks.rcu_urgent_qs from within
rcu_check_callbacks(), which is invoked from the scheduling-clock
interrupt handler.  If the current task is not an idle task and is
not executing in usermode, a context switch is forced, and either way,
the rcu_dynticks.rcu_urgent_qs variable is set to false.  If the current
task is an idle task, then RCU's dyntick-idle code will detect the
quiescent state, so no further action is required.  Similarly, if the
task is executing in usermode, other code in rcu_check_callbacks() and
its called functions will report the corresponding quiescent state.

	Reported-by: Marius Hillenbrand <mhillenb@amazon.de>
	Reported-by: David Woodhouse <dwmw2@infradead.org>
	Suggested-by: Peter Zijlstra <peterz@infradead.org>
	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
(cherry picked from commit 92aa39e9dc77481b90cbef25e547d66cab901496)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcu/tree.c
diff --cc kernel/rcu/tree.c
index 19ff444b5603,f47ac7a4719f..000000000000
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@@ -2479,7 -2470,16 +2479,20 @@@ static void rcu_do_batch(struct rcu_dat
  void rcu_check_callbacks(int user)
  {
  	trace_rcu_utilization(TPS("Start scheduler-tick"));
++<<<<<<< HEAD
 +	increment_cpu_stall_ticks();
++=======
+ 	raw_cpu_inc(rcu_data.ticks_this_gp);
+ 	/* The load-acquire pairs with the store-release setting to true. */
+ 	if (smp_load_acquire(this_cpu_ptr(&rcu_dynticks.rcu_urgent_qs))) {
+ 		/* Idle and userspace execution already are quiescent states. */
+ 		if (!is_idle_task(current) && !user) {
+ 			set_tsk_need_resched(current);
+ 			set_preempt_need_resched();
+ 		}
+ 		__this_cpu_write(rcu_dynticks.rcu_urgent_qs, false);
+ 	}
++>>>>>>> 92aa39e9dc77 (rcu: Make need_resched() respond to urgent RCU-QS needs)
  	rcu_flavor_check_callbacks(user);
  	if (rcu_pending())
  		invoke_rcu_core();
* Unmerged path kernel/rcu/tree.c
