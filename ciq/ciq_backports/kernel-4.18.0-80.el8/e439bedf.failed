blkcg: consolidate bio_issue_init() to be a part of core

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Dennis Zhou <dennis@kernel.org>
commit e439bedf6b24264f620cc05627e23a90054bde41
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/e439bedf.failed

bio_issue_init among other things initializes the timestamp for an IO.
Rather than have this logic handled by policies, this consolidates it to
be on the init paths (normal, clone, bounce clone).

	Signed-off-by: Dennis Zhou <dennis@kernel.org>
	Acked-by: Tejun Heo <tj@kernel.org>
	Reviewed-by: Liu Bo <bo.liu@linux.alibaba.com>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e439bedf6b24264f620cc05627e23a90054bde41)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-iolatency.c
#	block/blk-throttle.c
#	include/linux/blk-cgroup.h
diff --cc block/blk-iolatency.c
index 171f7ae1a396,5a79f06a730d..000000000000
--- a/block/blk-iolatency.c
+++ b/block/blk-iolatency.c
@@@ -393,24 -478,6 +393,27 @@@ static void blkcg_iolatency_throttle(st
  	if (!blk_iolatency_enabled(blkiolat))
  		return;
  
++<<<<<<< HEAD
 +	rcu_read_lock();
 +	bio_associate_blkcg(bio, NULL);
 +	blkcg = bio_blkcg(bio);
 +	blkg = blkg_lookup(blkcg, q);
 +	if (unlikely(!blkg)) {
 +		spin_lock_irq(q->queue_lock);
 +		blkg = blkg_lookup_create(blkcg, q);
 +		if (IS_ERR(blkg))
 +			blkg = NULL;
 +		spin_unlock_irq(q->queue_lock);
 +	}
 +	if (!blkg)
 +		goto out;
 +
 +	bio_issue_init(&bio->bi_issue, bio_sectors(bio));
 +	bio_associate_blkg(bio, blkg);
 +out:
 +	rcu_read_unlock();
++=======
++>>>>>>> e439bedf6b24 (blkcg: consolidate bio_issue_init() to be a part of core)
  	while (blkg && blkg->parent) {
  		struct iolatency_grp *iolat = blkg_to_lat(blkg);
  		if (!iolat) {
diff --cc block/blk-throttle.c
index 07f1b008e5ab,1b97a73d2fb1..000000000000
--- a/block/blk-throttle.c
+++ b/block/blk-throttle.c
@@@ -2113,16 -2115,6 +2113,19 @@@ static inline void throtl_update_latenc
  }
  #endif
  
++<<<<<<< HEAD
 +static void blk_throtl_assoc_bio(struct throtl_grp *tg, struct bio *bio)
 +{
 +#ifdef CONFIG_BLK_DEV_THROTTLING_LOW
 +	/* fallback to root_blkg if we fail to get a blkg ref */
 +	if (bio->bi_css && (bio_associate_blkg(bio, tg_to_blkg(tg)) == -ENODEV))
 +		bio_associate_blkg(bio, bio->bi_disk->queue->root_blkg);
 +	bio_issue_init(&bio->bi_issue, bio_sectors(bio));
 +#endif
 +}
 +
++=======
++>>>>>>> e439bedf6b24 (blkcg: consolidate bio_issue_init() to be a part of core)
  bool blk_throtl_bio(struct request_queue *q, struct blkcg_gq *blkg,
  		    struct bio *bio)
  {
@@@ -2143,7 -2135,6 +2146,10 @@@
  
  	throtl_update_latency_buckets(td);
  
++<<<<<<< HEAD
 +	blk_throtl_assoc_bio(tg, bio);
++=======
++>>>>>>> e439bedf6b24 (blkcg: consolidate bio_issue_init() to be a part of core)
  	blk_throtl_update_idletime(tg);
  
  	sq = &tg->service_queue;
diff --cc include/linux/blk-cgroup.h
index 8bf2308b920c,8b069c3775ee..000000000000
--- a/include/linux/blk-cgroup.h
+++ b/include/linux/blk-cgroup.h
@@@ -874,7 -837,8 +880,12 @@@ static inline bool blkcg_bio_issue_chec
  		blkg_rwstat_add(&blkg->stat_ios, bio->bi_opf, 1);
  	}
  
++<<<<<<< HEAD
 +	rcu_read_unlock();
++=======
+ 	blkcg_bio_issue_init(bio);
+ 
++>>>>>>> e439bedf6b24 (blkcg: consolidate bio_issue_init() to be a part of core)
  	return !throtl;
  }
  
@@@ -979,12 -944,7 +990,16 @@@ static inline char *blkg_path(struct bl
  static inline void blkg_get(struct blkcg_gq *blkg) { }
  static inline void blkg_put(struct blkcg_gq *blkg) { }
  
++<<<<<<< HEAD
 +static inline struct request_list *blk_get_rl(struct request_queue *q,
 +					      struct bio *bio) { return &q->root_rl; }
 +static inline void blk_put_rl(struct request_list *rl) { }
 +static inline void blk_rq_set_rl(struct request *rq, struct request_list *rl) { }
 +static inline struct request_list *blk_rq_rl(struct request *rq) { return &rq->q->root_rl; }
 +
++=======
+ static inline void blkcg_bio_issue_init(struct bio *bio) { }
++>>>>>>> e439bedf6b24 (blkcg: consolidate bio_issue_init() to be a part of core)
  static inline bool blkcg_bio_issue_check(struct request_queue *q,
  					 struct bio *bio) { return true; }
  
diff --git a/block/bio.c b/block/bio.c
index 8d70c85b6b8f..89766e815314 100644
--- a/block/bio.c
+++ b/block/bio.c
@@ -611,6 +611,7 @@ void __bio_clone_fast(struct bio *bio, struct bio *bio_src)
 	bio->bi_io_vec = bio_src->bi_io_vec;
 
 	bio_clone_blkcg_association(bio, bio_src);
+	blkcg_bio_issue_init(bio);
 }
 EXPORT_SYMBOL(__bio_clone_fast);
 
* Unmerged path block/blk-iolatency.c
* Unmerged path block/blk-throttle.c
diff --git a/block/bounce.c b/block/bounce.c
index a2d951197420..691a35954731 100644
--- a/block/bounce.c
+++ b/block/bounce.c
@@ -259,6 +259,7 @@ static struct bio *bounce_clone_bio(struct bio *bio_src, gfp_t gfp_mask,
 	}
 
 	bio_clone_blkcg_association(bio, bio_src);
+	blkcg_bio_issue_init(bio);
 
 	return bio;
 }
* Unmerged path include/linux/blk-cgroup.h
