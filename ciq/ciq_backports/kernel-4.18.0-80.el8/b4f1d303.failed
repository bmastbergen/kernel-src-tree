net: hns3: Fix tqp array traversal condition for vf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Jian Shen <shenjian15@huawei.com>
commit b4f1d30327c831c4582a4e4672a06162ddfd3854
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/b4f1d303.failed

There are two tqp_num variables "hdev->tqp_num" and "kinfo->tqp_num"
used in VF. "hdev->tqp_num" is the total tqp number allocated to the
VF, and "kinfo->tqp_num" indicates the tqp number being used by the
VF. Usually the two variables are equal. But for the case hdev->tqp_num
larger than rss_size_max, and num_tc is 1, "kinfo->tqp_num" will be
less than "hdev->tqp_num".

In original codes, "hdev->tqp_num" is always used to traverse the
tqp array of kinfo. It may cause null pointer error when "hdev->tqp_num"
is larger than "kinfo->tqp_num"

Fixes: e2cb1dec9779 ("net: hns3: Add HNS3 VF HCL(Hardware Compatibility Layer) Support")
	Signed-off-by: Jian Shen <shenjian15@huawei.com>
	Signed-off-by: Peng Li <lipeng321@huawei.com>
	Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b4f1d30327c831c4582a4e4672a06162ddfd3854)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c
diff --cc drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c
index 2c96c01f56e5,f7ab2ebf48e9..000000000000
--- a/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c
@@@ -107,18 -105,18 +105,32 @@@ static u8 *hclgevf_tqps_get_strings(str
  	u8 *buff = data;
  	int i = 0;
  
++<<<<<<< HEAD
 +	for (i = 0; i < hdev->num_tqps; i++) {
 +		struct hclgevf_tqp *tqp = container_of(handle->kinfo.tqp[i],
 +			struct hclgevf_tqp, q);
 +		snprintf(buff, ETH_GSTRING_LEN, "txq#%d_pktnum_rcd",
++=======
+ 	for (i = 0; i < kinfo->num_tqps; i++) {
+ 		struct hclgevf_tqp *tqp = container_of(kinfo->tqp[i],
+ 						       struct hclgevf_tqp, q);
+ 		snprintf(buff, ETH_GSTRING_LEN, "txq%d_pktnum_rcd",
++>>>>>>> b4f1d30327c8 (net: hns3: Fix tqp array traversal condition for vf)
  			 tqp->index);
  		buff += ETH_GSTRING_LEN;
  	}
  
++<<<<<<< HEAD
 +	for (i = 0; i < hdev->num_tqps; i++) {
 +		struct hclgevf_tqp *tqp = container_of(handle->kinfo.tqp[i],
 +			struct hclgevf_tqp, q);
 +		snprintf(buff, ETH_GSTRING_LEN, "rxq#%d_pktnum_rcd",
++=======
+ 	for (i = 0; i < kinfo->num_tqps; i++) {
+ 		struct hclgevf_tqp *tqp = container_of(kinfo->tqp[i],
+ 						       struct hclgevf_tqp, q);
+ 		snprintf(buff, ETH_GSTRING_LEN, "rxq%d_pktnum_rcd",
++>>>>>>> b4f1d30327c8 (net: hns3: Fix tqp array traversal condition for vf)
  			 tqp->index);
  		buff += ETH_GSTRING_LEN;
  	}
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_main.c
