rcu: Convert "1UL << x" to "BIT(x)"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit df63fa5bc11aadf81126d4a1785080c800e2ece3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/df63fa5b.failed

This commit saves a few characters by converting "1UL << x" to "BIT(x)".

	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
(cherry picked from commit df63fa5bc11aadf81126d4a1785080c800e2ece3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcu/tree.c
diff --cc kernel/rcu/tree.c
index 65383db6b433,e778fd5546d1..000000000000
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@@ -3584,8 -3582,8 +3584,13 @@@ static void __init rcu_init_one(void
  				rnp->parent = NULL;
  			} else {
  				rnp->grpnum = j % levelspread[i - 1];
++<<<<<<< HEAD
 +				rnp->grpmask = 1UL << rnp->grpnum;
 +				rnp->parent = rsp->level[i - 1] +
++=======
+ 				rnp->grpmask = BIT(rnp->grpnum);
+ 				rnp->parent = rcu_state.level[i - 1] +
++>>>>>>> df63fa5bc11a (rcu: Convert "1UL << x" to "BIT(x)")
  					      j / levelspread[i - 1];
  			}
  			rnp->level = i;
* Unmerged path kernel/rcu/tree.c
diff --git a/kernel/rcu/tree.h b/kernel/rcu/tree.h
index 7c6033d71e9d..b7f5b4382704 100644
--- a/kernel/rcu/tree.h
+++ b/kernel/rcu/tree.h
@@ -170,7 +170,7 @@ struct rcu_node {
  * are indexed relative to this interval rather than the global CPU ID space.
  * This generates the bit for a CPU in node-local masks.
  */
-#define leaf_node_cpu_bit(rnp, cpu) (1UL << ((cpu) - (rnp)->grplo))
+#define leaf_node_cpu_bit(rnp, cpu) (BIT((cpu) - (rnp)->grplo))
 
 /*
  * Union to allow "aggregate OR" operation on the need for a quiescent
