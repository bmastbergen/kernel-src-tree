PCI/AER: Expose internal API for obtaining AER information

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Keith Busch <keith.busch@intel.com>
commit 1e4511604dfaf6d1642603ff89effb9e93682716
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/1e451160.failed

Export some common AER functions and structures for other PCI core drivers
to use.  Since this is making the function externally visible inside the
PCI core, prepend "aer_" to the function name.

	Signed-off-by: Keith Busch <keith.busch@intel.com>
[bhelgaas: move AER declarations from linux/aer.h to drivers/pci/pci.h]
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Sinan Kaya <okaya@kernel.org>
	Reviewed-by: Oza Pawandeep <poza@codeaurora.org>
(cherry picked from commit 1e4511604dfaf6d1642603ff89effb9e93682716)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci.h
diff --cc drivers/pci/pci.h
index 08817253c8a2,4f723442f602..000000000000
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@@ -301,15 -300,33 +301,45 @@@ static inline bool pci_dev_is_disconnec
  	return test_bit(PCI_DEV_DISCONNECTED, &dev->priv_flags);
  }
  
++<<<<<<< HEAD
 +static inline void pci_dev_assign_added(struct pci_dev *dev, bool added)
 +{
 +	assign_bit(PCI_DEV_ADDED, &dev->priv_flags, added);
 +}
 +
 +static inline bool pci_dev_is_added(const struct pci_dev *dev)
 +{
 +	return test_bit(PCI_DEV_ADDED, &dev->priv_flags);
 +}
++=======
+ #ifdef CONFIG_PCIEAER
+ #include <linux/aer.h>
+ 
+ #define AER_MAX_MULTI_ERR_DEVICES	5	/* Not likely to have more */
+ 
+ struct aer_err_info {
+ 	struct pci_dev *dev[AER_MAX_MULTI_ERR_DEVICES];
+ 	int error_dev_num;
+ 
+ 	unsigned int id:16;
+ 
+ 	unsigned int severity:2;	/* 0:NONFATAL | 1:FATAL | 2:COR */
+ 	unsigned int __pad1:5;
+ 	unsigned int multi_error_valid:1;
+ 
+ 	unsigned int first_error:5;
+ 	unsigned int __pad2:2;
+ 	unsigned int tlp_header_valid:1;
+ 
+ 	unsigned int status;		/* COR/UNCOR Error Status */
+ 	unsigned int mask;		/* COR/UNCOR Error Mask */
+ 	struct aer_header_log_regs tlp;	/* TLP Header */
+ };
+ 
+ int aer_get_device_error_info(struct pci_dev *dev, struct aer_err_info *info);
+ void aer_print_error(struct pci_dev *dev, struct aer_err_info *info);
+ #endif	/* CONFIG_PCIEAER */
++>>>>>>> 1e4511604dfa (PCI/AER: Expose internal API for obtaining AER information)
  
  #ifdef CONFIG_PCI_ATS
  void pci_restore_ats_state(struct pci_dev *dev);
* Unmerged path drivers/pci/pci.h
diff --git a/drivers/pci/pcie/aer.c b/drivers/pci/pcie/aer.c
index a2e88386af28..0a60275f0582 100644
--- a/drivers/pci/pcie/aer.c
+++ b/drivers/pci/pcie/aer.c
@@ -31,26 +31,6 @@
 #include "portdrv.h"
 
 #define AER_ERROR_SOURCES_MAX		100
-#define AER_MAX_MULTI_ERR_DEVICES	5	/* Not likely to have more */
-
-struct aer_err_info {
-	struct pci_dev *dev[AER_MAX_MULTI_ERR_DEVICES];
-	int error_dev_num;
-
-	unsigned int id:16;
-
-	unsigned int severity:2;	/* 0:NONFATAL | 1:FATAL | 2:COR */
-	unsigned int __pad1:5;
-	unsigned int multi_error_valid:1;
-
-	unsigned int first_error:5;
-	unsigned int __pad2:2;
-	unsigned int tlp_header_valid:1;
-
-	unsigned int status;		/* COR/UNCOR Error Status */
-	unsigned int mask;		/* COR/UNCOR Error Mask */
-	struct aer_header_log_regs tlp;	/* TLP Header */
-};
 
 struct aer_err_source {
 	unsigned int status;
@@ -547,7 +527,7 @@ static void __aer_print_error(struct pci_dev *dev,
 	}
 }
 
-static void aer_print_error(struct pci_dev *dev, struct aer_err_info *info)
+void aer_print_error(struct pci_dev *dev, struct aer_err_info *info)
 {
 	int layer, agent;
 	int id = ((dev->bus->number << 8) | dev->devfn);
@@ -876,7 +856,7 @@ EXPORT_SYMBOL_GPL(aer_recover_queue);
 #endif
 
 /**
- * get_device_error_info - read error status from dev and store it to info
+ * aer_get_device_error_info - read error status from dev and store it to info
  * @dev: pointer to the device expected to have a error record
  * @info: pointer to structure to store the error record
  *
@@ -884,7 +864,7 @@ EXPORT_SYMBOL_GPL(aer_recover_queue);
  *
  * Note that @info is reused among all error devices. Clear fields properly.
  */
-static int get_device_error_info(struct pci_dev *dev, struct aer_err_info *info)
+int aer_get_device_error_info(struct pci_dev *dev, struct aer_err_info *info)
 {
 	int pos, temp;
 
@@ -942,11 +922,11 @@ static inline void aer_process_err_devices(struct aer_err_info *e_info)
 
 	/* Report all before handle them, not to lost records by reset etc. */
 	for (i = 0; i < e_info->error_dev_num && e_info->dev[i]; i++) {
-		if (get_device_error_info(e_info->dev[i], e_info))
+		if (aer_get_device_error_info(e_info->dev[i], e_info))
 			aer_print_error(e_info->dev[i], e_info);
 	}
 	for (i = 0; i < e_info->error_dev_num && e_info->dev[i]; i++) {
-		if (get_device_error_info(e_info->dev[i], e_info))
+		if (aer_get_device_error_info(e_info->dev[i], e_info))
 			handle_error_source(e_info->dev[i], e_info);
 	}
 }
