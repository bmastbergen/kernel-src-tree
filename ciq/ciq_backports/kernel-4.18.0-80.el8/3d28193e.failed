vfs: pass remap flags to generic_remap_checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit 3d28193e1df043764deb7abdaba5e3a6660bc393
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/3d28193e.failed

Pass the same remap flags to generic_remap_checks for consistency.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Amir Goldstein <amir73il@gmail.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 3d28193e1df043764deb7abdaba5e3a6660bc393)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/read_write.c
diff --cc fs/read_write.c
index 734c5661fb69,ebcbfc4f2907..000000000000
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@@ -1782,7 -1782,7 +1782,11 @@@ int generic_remap_file_range_prep(struc
  
  	/* Check that we don't violate system file offset limits. */
  	ret = generic_remap_checks(file_in, pos_in, file_out, pos_out, len,
++<<<<<<< HEAD
 +			is_dedupe);
++=======
+ 			remap_flags);
++>>>>>>> 3d28193e1df0 (vfs: pass remap flags to generic_remap_checks)
  	if (ret)
  		return ret;
  
* Unmerged path fs/read_write.c
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 6f009fb80ab1..1ce64030d0e6 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2958,7 +2958,7 @@ extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
 extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
 extern int generic_remap_checks(struct file *file_in, loff_t pos_in,
 				struct file *file_out, loff_t pos_out,
-				uint64_t *count, bool is_dedupe);
+				uint64_t *count, unsigned int remap_flags);
 extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
 extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
 extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
diff --git a/mm/filemap.c b/mm/filemap.c
index 84b7301e41a0..410dc58f7b16 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -2994,7 +2994,7 @@ EXPORT_SYMBOL(generic_write_checks);
  */
 int generic_remap_checks(struct file *file_in, loff_t pos_in,
 			 struct file *file_out, loff_t pos_out,
-			 uint64_t *req_count, bool is_dedupe)
+			 uint64_t *req_count, unsigned int remap_flags)
 {
 	struct inode *inode_in = file_in->f_mapping->host;
 	struct inode *inode_out = file_out->f_mapping->host;
@@ -3016,7 +3016,7 @@ int generic_remap_checks(struct file *file_in, loff_t pos_in,
 	size_out = i_size_read(inode_out);
 
 	/* Dedupe requires both ranges to be within EOF. */
-	if (is_dedupe &&
+	if ((remap_flags & REMAP_FILE_DEDUP) &&
 	    (pos_in >= size_in || pos_in + count > size_in ||
 	     pos_out >= size_out || pos_out + count > size_out))
 		return -EINVAL;
