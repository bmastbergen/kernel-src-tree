i40evf: remove ndo_poll_controller

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 1aa28fb98368078bcaf527bf46c0e001db934414
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/1aa28fb9.failed

As diagnosed by Song Liu, ndo_poll_controller() can
be very dangerous on loaded hosts, since the cpu
calling ndo_poll_controller() might steal all NAPI
contexts (for all RX/TX queues of the NIC). This capture
can last for unlimited amount of time, since one
cpu is generally not able to drain all the queues under load.

i40evf uses NAPI for TX completions, so we better let core
networking stack call the napi->poll() to avoid the capture.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1aa28fb98368078bcaf527bf46c0e001db934414)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/iavf/iavf_main.c
diff --cc drivers/net/ethernet/intel/iavf/iavf_main.c
index 2e00211e5268,fef6d892ed4c..000000000000
--- a/drivers/net/ethernet/intel/iavf/iavf_main.c
+++ b/drivers/net/ethernet/intel/iavf/iavf_main.c
@@@ -390,34 -393,11 +390,37 @@@ static void iavf_map_rings_to_vectors(s
  			vidx = 0;
  	}
  
 -	adapter->aq_required |= I40EVF_FLAG_AQ_MAP_VECTORS;
 +	adapter->aq_required |= IAVF_FLAG_AQ_MAP_VECTORS;
  }
  
++<<<<<<< HEAD:drivers/net/ethernet/intel/iavf/iavf_main.c
 +#ifdef CONFIG_NET_POLL_CONTROLLER
  /**
 - * i40evf_irq_affinity_notify - Callback for affinity changes
 + * iavf_netpoll - A Polling 'interrupt' handler
 + * @netdev: network interface device structure
 + *
 + * This is used by netconsole to send skbs without having to re-enable
 + * interrupts.  It's not called while the normal interrupt routine is executing.
 + **/
 +static void iavf_netpoll(struct net_device *netdev)
 +{
 +	struct iavf_adapter *adapter = netdev_priv(netdev);
 +	int q_vectors = adapter->num_msix_vectors - NONQ_VECS;
 +	int i;
 +
 +	/* if interface is down do nothing */
 +	if (test_bit(__IAVF_VSI_DOWN, adapter->vsi.state))
 +		return;
 +
 +	for (i = 0; i < q_vectors; i++)
 +		iavf_msix_clean_rings(0, &adapter->q_vectors[i]);
 +}
 +
 +#endif
++=======
++>>>>>>> 1aa28fb98368 (i40evf: remove ndo_poll_controller):drivers/net/ethernet/intel/i40evf/i40evf_main.c
 +/**
 + * iavf_irq_affinity_notify - Callback for affinity changes
   * @notify: context as to what irq was changed
   * @mask: the new affinity mask
   *
@@@ -3213,24 -3192,21 +3216,36 @@@ static netdev_features_t iavf_fix_featu
  	return features;
  }
  
 -static const struct net_device_ops i40evf_netdev_ops = {
 -	.ndo_open		= i40evf_open,
 -	.ndo_stop		= i40evf_close,
 -	.ndo_start_xmit		= i40evf_xmit_frame,
 -	.ndo_set_rx_mode	= i40evf_set_rx_mode,
 +static const struct net_device_ops iavf_netdev_ops = {
 +	.ndo_open		= iavf_open,
 +	.ndo_stop		= iavf_close,
 +	.ndo_start_xmit		= iavf_xmit_frame,
 +	.ndo_set_rx_mode	= iavf_set_rx_mode,
  	.ndo_validate_addr	= eth_validate_addr,
++<<<<<<< HEAD:drivers/net/ethernet/intel/iavf/iavf_main.c
 +	.ndo_set_mac_address	= iavf_set_mac,
 +	.ndo_change_mtu		= iavf_change_mtu,
 +	.ndo_tx_timeout		= iavf_tx_timeout,
 +	.ndo_vlan_rx_add_vid	= iavf_vlan_rx_add_vid,
 +	.ndo_vlan_rx_kill_vid	= iavf_vlan_rx_kill_vid,
 +	.ndo_features_check	= iavf_features_check,
 +	.ndo_fix_features	= iavf_fix_features,
 +	.ndo_set_features	= iavf_set_features,
 +#ifdef CONFIG_NET_POLL_CONTROLLER
 +	.ndo_poll_controller	= iavf_netpoll,
 +#endif
 +	.ndo_setup_tc		= iavf_setup_tc,
++=======
+ 	.ndo_set_mac_address	= i40evf_set_mac,
+ 	.ndo_change_mtu		= i40evf_change_mtu,
+ 	.ndo_tx_timeout		= i40evf_tx_timeout,
+ 	.ndo_vlan_rx_add_vid	= i40evf_vlan_rx_add_vid,
+ 	.ndo_vlan_rx_kill_vid	= i40evf_vlan_rx_kill_vid,
+ 	.ndo_features_check	= i40evf_features_check,
+ 	.ndo_fix_features	= i40evf_fix_features,
+ 	.ndo_set_features	= i40evf_set_features,
+ 	.ndo_setup_tc		= i40evf_setup_tc,
++>>>>>>> 1aa28fb98368 (i40evf: remove ndo_poll_controller):drivers/net/ethernet/intel/i40evf/i40evf_main.c
  };
  
  /**
* Unmerged path drivers/net/ethernet/intel/iavf/iavf_main.c
