nvme-pci: only allow polling with separate poll queues

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Christoph Hellwig <hch@lst.de>
commit c6d962aebaf8ec5d867aac09ee33e3f528c2539d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/c6d962ae.failed

This will allow us to simplify both the regular NVMe interrupt handler
and the upcoming aio poll code.  In addition to that the separate
queues are generally a good idea for performance reasons.

	Reviewed-by: Keith Busch <keith.busch@intel.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit c6d962aebaf8ec5d867aac09ee33e3f528c2539d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 8099916b0522,d42bb76e5e78..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -1095,16 -1088,9 +1095,19 @@@ static int __nvme_poll(struct nvme_queu
  	return found;
  }
  
 -static int nvme_poll(struct blk_mq_hw_ctx *hctx)
 +static int nvme_poll(struct blk_mq_hw_ctx *hctx, unsigned int tag)
  {
  	struct nvme_queue *nvmeq = hctx->driver_data;
++<<<<<<< HEAD
 +
 +	return __nvme_poll(nvmeq, tag);
 +}
 +
 +static int nvme_poll_noirq(struct blk_mq_hw_ctx *hctx, unsigned int tag)
 +{
 +	struct nvme_queue *nvmeq = hctx->driver_data;
++=======
++>>>>>>> c6d962aebaf8 (nvme-pci: only allow polling with separate poll queues)
  	u16 start, end;
  	bool found;
  
@@@ -2306,13 -2290,13 +2308,18 @@@ static int nvme_dev_add(struct nvme_de
  	int ret;
  
  	if (!dev->ctrl.tagset) {
++<<<<<<< HEAD
 +		if (!dev->io_queues[NVMEQ_TYPE_POLL])
 +			dev->tagset.ops = &nvme_mq_ops;
++=======
+ 		if (dev->io_queues[HCTX_TYPE_POLL])
+ 			dev->tagset.ops = &nvme_mq_poll_ops;
++>>>>>>> c6d962aebaf8 (nvme-pci: only allow polling with separate poll queues)
  		else
- 			dev->tagset.ops = &nvme_mq_poll_noirq_ops;
+ 			dev->tagset.ops = &nvme_mq_ops;
  
  		dev->tagset.nr_hw_queues = dev->online_queues - 1;
 -		dev->tagset.nr_maps = HCTX_MAX_TYPES;
 +		dev->tagset.nr_maps = NVMEQ_TYPE_NR;
  		dev->tagset.timeout = NVME_IO_TIMEOUT;
  		dev->tagset.numa_node = dev_to_node(dev->dev);
  		dev->tagset.queue_depth =
* Unmerged path drivers/nvme/host/pci.c
