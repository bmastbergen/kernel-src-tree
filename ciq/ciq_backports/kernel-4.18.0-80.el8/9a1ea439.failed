mm: put_and_wait_on_page_locked() while page is migrated

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Hugh Dickins <hughd@google.com>
commit 9a1ea439b16b92002e0a6fceebc5d1794906e297
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/9a1ea439.failed

Waiting on a page migration entry has used wait_on_page_locked() all along
since 2006: but you cannot safely wait_on_page_locked() without holding a
reference to the page, and that extra reference is enough to make
migrate_page_move_mapping() fail with -EAGAIN, when a racing task faults
on the entry before migrate_page_move_mapping() gets there.

And that failure is retried nine times, amplifying the pain when trying to
migrate a popular page.  With a single persistent faulter, migration
sometimes succeeds; with two or three concurrent faulters, success becomes
much less likely (and the more the page was mapped, the worse the overhead
of unmapping and remapping it on each try).

This is especially a problem for memory offlining, where the outer level
retries forever (or until terminated from userspace), because a heavy
refault workload can trigger an endless loop of migration failures.
wait_on_page_locked() is the wrong tool for the job.

David Herrmann (but was he the first?) noticed this issue in 2014:
https://marc.info/?l=linux-mm&m=140110465608116&w=2

Tim Chen started a thread in August 2017 which appears relevant:
https://marc.info/?l=linux-mm&m=150275941014915&w=2 where Kan Liang went
on to implicate __migration_entry_wait():
https://marc.info/?l=linux-mm&m=150300268411980&w=2 and the thread ended
up with the v4.14 commits: 2554db916586 ("sched/wait: Break up long wake
list walk") 11a19c7b099f ("sched/wait: Introduce wakeup boomark in
wake_up_page_bit")

Baoquan He reported "Memory hotplug softlock issue" 14 November 2018:
https://marc.info/?l=linux-mm&m=154217936431300&w=2

We have all assumed that it is essential to hold a page reference while
waiting on a page lock: partly to guarantee that there is still a struct
page when MEMORY_HOTREMOVE is configured, but also to protect against
reuse of the struct page going to someone who then holds the page locked
indefinitely, when the waiter can reasonably expect timely unlocking.

But in fact, so long as wait_on_page_bit_common() does the put_page(), and
is careful not to rely on struct page contents thereafter, there is no
need to hold a reference to the page while waiting on it.  That does mean
that this case cannot go back through the loop: but that's fine for the
page migration case, and even if used more widely, is limited by the "Stop
walking if it's locked" optimization in wake_page_function().

Add interface put_and_wait_on_page_locked() to do this, using "behavior"
enum in place of "lock" arg to wait_on_page_bit_common() to implement it.
No interruptible or killable variant needed yet, but they might follow: I
have a vague notion that reporting -EINTR should take precedence over
return from wait_on_page_bit_common() without knowing the page state, so
arrange it accordingly - but that may be nothing but pedantic.

__migration_entry_wait() still has to take a brief reference to the page,
prior to calling put_and_wait_on_page_locked(): but now that it is dropped
before waiting, the chance of impeding page migration is very much
reduced.  Should we perhaps disable preemption across this?

shrink_page_list()'s __ClearPageLocked(): that was a surprise!  This
survived a lot of testing before that showed up.  PageWaiters may have
been set by wait_on_page_bit_common(), and the reference dropped, just
before shrink_page_list() succeeds in freezing its last page reference: in
such a case, unlock_page() must be used.  Follow the suggestion from
Michal Hocko, just revert a978d6f52106 ("mm: unlockless reclaim") now:
that optimization predates PageWaiters, and won't buy much these days; but
we can reinstate it for the !PageWaiters case if anyone notices.

It does raise the question: should vmscan.c's is_page_cache_freeable() and
__remove_mapping() now treat a PageWaiters page as if an extra reference
were held?  Perhaps, but I don't think it matters much, since
shrink_page_list() already had to win its trylock_page(), so waiters are
not very common there: I noticed no difference when trying the bigger
change, and it's surely not needed while put_and_wait_on_page_locked() is
only used for page migration.

[willy@infradead.org: add put_and_wait_on_page_locked() kerneldoc]
Link: http://lkml.kernel.org/r/alpine.LSU.2.11.1811261121330.1116@eggly.anvils
	Signed-off-by: Hugh Dickins <hughd@google.com>
	Reported-by: Baoquan He <bhe@redhat.com>
	Tested-by: Baoquan He <bhe@redhat.com>
	Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Matthew Wilcox <willy@infradead.org>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: Mel Gorman <mgorman@techsingularity.net>
	Cc: David Herrmann <dh.herrmann@gmail.com>
	Cc: Tim Chen <tim.c.chen@linux.intel.com>
	Cc: Kan Liang <kan.liang@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Davidlohr Bueso <dave@stgolabs.net>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Christoph Lameter <cl@linux.com>
	Cc: Nick Piggin <npiggin@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9a1ea439b16b92002e0a6fceebc5d1794906e297)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/filemap.c
#	mm/migrate.c
diff --cc mm/filemap.c
index 84b7301e41a0,d2df272152f5..000000000000
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@@ -1076,10 -1076,24 +1098,29 @@@ static inline int wait_on_page_bit_comm
  {
  	struct wait_page_queue wait_page;
  	wait_queue_entry_t *wait = &wait_page.wait;
++<<<<<<< HEAD
++	int ret = 0;
++
++=======
+ 	bool bit_is_set;
+ 	bool thrashing = false;
+ 	bool delayacct = false;
+ 	unsigned long pflags;
  	int ret = 0;
  
+ 	if (bit_nr == PG_locked &&
+ 	    !PageUptodate(page) && PageWorkingset(page)) {
+ 		if (!PageSwapBacked(page)) {
+ 			delayacct_thrashing_start();
+ 			delayacct = true;
+ 		}
+ 		psi_memstall_enter(&pflags);
+ 		thrashing = true;
+ 	}
+ 
++>>>>>>> 9a1ea439b16b (mm: put_and_wait_on_page_locked() while page is migrated)
  	init_wait(wait);
- 	wait->flags = lock ? WQ_FLAG_EXCLUSIVE : 0;
+ 	wait->flags = behavior == EXCLUSIVE ? WQ_FLAG_EXCLUSIVE : 0;
  	wait->func = wake_page_function;
  	wait_page.page = page;
  	wait_page.bit_nr = bit_nr;
@@@ -1116,6 -1144,12 +1171,15 @@@
  
  	finish_wait(q, wait);
  
++<<<<<<< HEAD
++=======
+ 	if (thrashing) {
+ 		if (delayacct)
+ 			delayacct_thrashing_end();
+ 		psi_memstall_leave(&pflags);
+ 	}
+ 
++>>>>>>> 9a1ea439b16b (mm: put_and_wait_on_page_locked() while page is migrated)
  	/*
  	 * A signal could leave PageWaiters set. Clearing it here if
  	 * !waitqueue_active would be possible (by open-coding finish_wait),
diff --cc mm/migrate.c
index 4a83268e23c2,acda06f99754..000000000000
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@@ -323,11 -326,9 +323,17 @@@ void __migration_entry_wait(struct mm_s
  	page = migration_entry_to_page(entry);
  
  	/*
++<<<<<<< HEAD
 +	 * Once radix-tree replacement of page migration started, page_count
 +	 * *must* be zero. And, we don't want to call wait_on_page_locked()
 +	 * against a page without get_page().
 +	 * So, we use get_page_unless_zero(), here. Even failed, page fault
 +	 * will occur again.
++=======
+ 	 * Once page cache replacement of page migration started, page_count
+ 	 * is zero; but we must not call put_and_wait_on_page_locked() without
+ 	 * a ref. Use get_page_unless_zero(), and just fault again if it fails.
++>>>>>>> 9a1ea439b16b (mm: put_and_wait_on_page_locked() while page is migrated)
  	 */
  	if (!get_page_unless_zero(page))
  		goto out;
diff --git a/include/linux/pagemap.h b/include/linux/pagemap.h
index b1bd2186e6d2..2c4d0d562112 100644
--- a/include/linux/pagemap.h
+++ b/include/linux/pagemap.h
@@ -537,6 +537,8 @@ static inline int wait_on_page_locked_killable(struct page *page)
 	return wait_on_page_bit_killable(compound_head(page), PG_locked);
 }
 
+extern void put_and_wait_on_page_locked(struct page *page);
+
 /* 
  * Wait for a page to complete writeback
  */
* Unmerged path mm/filemap.c
diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index 46183fe4c01e..6395ffeacf79 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -1483,8 +1483,7 @@ int do_huge_pmd_numa_page(struct vm_fault *vmf, pmd_t pmd)
 		if (!get_page_unless_zero(page))
 			goto out_unlock;
 		spin_unlock(vmf->ptl);
-		wait_on_page_locked(page);
-		put_page(page);
+		put_and_wait_on_page_locked(page);
 		goto out;
 	}
 
@@ -1520,8 +1519,7 @@ int do_huge_pmd_numa_page(struct vm_fault *vmf, pmd_t pmd)
 		if (!get_page_unless_zero(page))
 			goto out_unlock;
 		spin_unlock(vmf->ptl);
-		wait_on_page_locked(page);
-		put_page(page);
+		put_and_wait_on_page_locked(page);
 		goto out;
 	}
 
* Unmerged path mm/migrate.c
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 03822f86f288..6a130aa00c2f 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -1277,14 +1277,8 @@ static unsigned long shrink_page_list(struct list_head *page_list,
 			count_memcg_page_event(page, PGLAZYFREED);
 		} else if (!mapping || !__remove_mapping(mapping, page, true))
 			goto keep_locked;
-		/*
-		 * At this point, we have no other references and there is
-		 * no way to pick any more up (removed from LRU, removed
-		 * from pagecache). Can use non-atomic bitops now (and
-		 * we obviously don't have to worry about waking up a process
-		 * waiting on the page lock, because there are no references.
-		 */
-		__ClearPageLocked(page);
+
+		unlock_page(page);
 free_it:
 		nr_reclaimed++;
 
