net: sched: act_police: remove dependency on rtnl lock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
Rebuild_CHGLOG: - [net] sched: act_police: remove dependency on rtnl lock (Ivan Vecera) [1638022]
Rebuild_FUZZ: 95.15%
commit-author Vlad Buslov <vladbu@mellanox.com>
commit e329bc427395e2d74f2bb685ef3dddda91a6695f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/e329bc42.failed

Use tcf spinlock to protect police action private data from concurrent
modification during dump. (init already uses tcf spinlock when changing
police action state)

Pass tcf spinlock as estimator lock argument to gen_replace_estimator()
during action init.

	Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e329bc427395e2d74f2bb685ef3dddda91a6695f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_police.c
diff --cc net/sched/act_police.c
index 5ce7c3afa9b0,88c16d80c1cf..000000000000
--- a/net/sched/act_police.c
+++ b/net/sched/act_police.c
@@@ -271,11 -274,8 +271,16 @@@ static int tcf_act_police_dump(struct s
  	struct tcf_police *police = to_police(a);
  	struct tc_police opt = {
  		.index = police->tcf_index,
++<<<<<<< HEAD
 +		.action = police->tcf_action,
 +		.mtu = police->tcfp_mtu,
 +		.burst = PSCHED_NS2TICKS(police->tcfp_burst),
 +		.refcnt = police->tcf_refcnt - ref,
 +		.bindcnt = police->tcf_bindcnt - bind,
++=======
+ 		.refcnt = refcount_read(&police->tcf_refcnt) - ref,
+ 		.bindcnt = atomic_read(&police->tcf_bindcnt) - bind,
++>>>>>>> e329bc427395 (net: sched: act_police: remove dependency on rtnl lock)
  	};
  	struct tcf_t t;
  
* Unmerged path net/sched/act_police.c
