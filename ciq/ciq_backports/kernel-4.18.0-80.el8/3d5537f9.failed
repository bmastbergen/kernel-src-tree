net: aquantia: Make function aq_fw1x_set_power() static

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Wei Yongjun <weiyongjun1@huawei.com>
commit 3d5537f9d468a6afa6c07f6681a4adac0237c235
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/3d5537f9.failed

Fixes the following sparse warning:

drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c:873:5: warning:
 symbol 'aq_fw1x_set_power' was not declared. Should it be static?

Fixes: a0da96c08cfa ("net: aquantia: implement WOL support")
	Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3d5537f9d468a6afa6c07f6681a4adac0237c235)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
index 54d5759f0ff8,7def1cb8ab9d..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
@@@ -839,6 -832,81 +839,84 @@@ int hw_atl_utils_get_fw_version(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int aq_fw1x_set_wol(struct aq_hw_s *self, bool wol_enabled, u8 *mac)
+ {
+ 	struct hw_atl_utils_fw_rpc *prpc = NULL;
+ 	unsigned int rpc_size = 0U;
+ 	int err = 0;
+ 
+ 	err = hw_atl_utils_fw_rpc_wait(self, &prpc);
+ 	if (err < 0)
+ 		goto err_exit;
+ 
+ 	memset(prpc, 0, sizeof(*prpc));
+ 
+ 	if (wol_enabled) {
+ 		rpc_size = sizeof(prpc->msg_id) + sizeof(prpc->msg_wol);
+ 
+ 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_WOL_ADD;
+ 		prpc->msg_wol.priority =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PRIOR;
+ 		prpc->msg_wol.pattern_id =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PATTERN;
+ 		prpc->msg_wol.wol_packet_type =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_MAG_PKT;
+ 
+ 		ether_addr_copy((u8 *)&prpc->msg_wol.wol_pattern, mac);
+ 	} else {
+ 		rpc_size = sizeof(prpc->msg_id) + sizeof(prpc->msg_del_id);
+ 
+ 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_WOL_DEL;
+ 		prpc->msg_wol.pattern_id =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PATTERN;
+ 	}
+ 
+ 	err = hw_atl_utils_fw_rpc_call(self, rpc_size);
+ 
+ err_exit:
+ 	return err;
+ }
+ 
+ static int aq_fw1x_set_power(struct aq_hw_s *self, unsigned int power_state,
+ 			     u8 *mac)
+ {
+ 	struct hw_atl_utils_fw_rpc *prpc = NULL;
+ 	unsigned int rpc_size = 0U;
+ 	int err = 0;
+ 
+ 	if (self->aq_nic_cfg->wol & AQ_NIC_WOL_ENABLED) {
+ 		err = aq_fw1x_set_wol(self, 1, mac);
+ 
+ 		if (err < 0)
+ 			goto err_exit;
+ 
+ 		rpc_size = sizeof(prpc->msg_id) +
+ 			   sizeof(prpc->msg_enable_wakeup);
+ 
+ 		err = hw_atl_utils_fw_rpc_wait(self, &prpc);
+ 
+ 		if (err < 0)
+ 			goto err_exit;
+ 
+ 		memset(prpc, 0, rpc_size);
+ 
+ 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_ENABLE_WAKEUP;
+ 		prpc->msg_enable_wakeup.pattern_mask = 0x00000002;
+ 
+ 		err = hw_atl_utils_fw_rpc_call(self, rpc_size);
+ 		if (err < 0)
+ 			goto err_exit;
+ 	}
+ 	hw_atl_utils_mpi_set_speed(self, 0);
+ 	hw_atl_utils_mpi_set_state(self, MPI_POWER);
+ 
+ err_exit:
+ 	return err;
+ }
+ 
++>>>>>>> 3d5537f9d468 (net: aquantia: Make function aq_fw1x_set_power() static)
  const struct aq_fw_ops aq_fw_1x_ops = {
  	.init = hw_atl_utils_mpi_create,
  	.deinit = hw_atl_fw1x_deinit,
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
