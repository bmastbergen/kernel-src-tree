net: hns3: Set tx ring' tc info when netdev is up

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Yunsheng Lin <linyunsheng@huawei.com>
commit 1c77215480bcfa0852575180f997bd156f2aef17
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/1c772154.failed

The HNS3_RING_TX_RING_TC_REG register is used to map tx ring to
specific tc, the tx queue to tc mapping is needed by the hardware
to do the correct tx schedule.

	Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
	Signed-off-by: Peng Li <lipeng321@huawei.com>
	Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1c77215480bcfa0852575180f997bd156f2aef17)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/hisilicon/hns3/hns3_enet.h
diff --cc drivers/net/ethernet/hisilicon/hns3/hns3_enet.h
index c84c09053640,a02a96aee2a2..000000000000
--- a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.h
@@@ -43,7 -37,7 +43,11 @@@ enum hns3_nic_state 
  #define HNS3_RING_TX_RING_BASEADDR_L_REG	0x00040
  #define HNS3_RING_TX_RING_BASEADDR_H_REG	0x00044
  #define HNS3_RING_TX_RING_BD_NUM_REG		0x00048
++<<<<<<< HEAD
 +#define HNS3_RING_TX_RING_BD_LEN_REG		0x0004C
++=======
+ #define HNS3_RING_TX_RING_TC_REG		0x00050
++>>>>>>> 1c77215480bc (net: hns3: Set tx ring' tc info when netdev is up)
  #define HNS3_RING_TX_RING_TAIL_REG		0x00058
  #define HNS3_RING_TX_RING_HEAD_REG		0x0005C
  #define HNS3_RING_TX_RING_FBDNUM_REG		0x00060
diff --git a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
index 3baa50ce336f..a02ad277aa75 100644
--- a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
@@ -2987,6 +2987,28 @@ static void hns3_init_ring_hw(struct hns3_enet_ring *ring)
 	}
 }
 
+static void hns3_init_tx_ring_tc(struct hns3_nic_priv *priv)
+{
+	struct hnae3_knic_private_info *kinfo = &priv->ae_handle->kinfo;
+	int i;
+
+	for (i = 0; i < HNAE3_MAX_TC; i++) {
+		struct hnae3_tc_info *tc_info = &kinfo->tc_info[i];
+		int j;
+
+		if (!tc_info->enable)
+			continue;
+
+		for (j = 0; j < tc_info->tqp_count; j++) {
+			struct hnae3_queue *q;
+
+			q = priv->ring_data[tc_info->tqp_offset + j].ring->tqp;
+			hns3_write_dev(q, HNS3_RING_TX_RING_TC_REG,
+				       tc_info->tc);
+		}
+	}
+}
+
 int hns3_init_all_ring(struct hns3_nic_priv *priv)
 {
 	struct hnae3_handle *h = priv->ae_handle;
@@ -3398,6 +3420,8 @@ int hns3_nic_reset_all_ring(struct hnae3_handle *h)
 		rx_ring->next_to_use = 0;
 	}
 
+	hns3_init_tx_ring_tc(priv);
+
 	return 0;
 }
 
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3_enet.h
