net/mlx5e: Add CONFIG_MLX5_EN_ARFS for accelerated flow steering support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit ec080045977073c5e69a7fddee3a8aef9bf62881
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/ec080045.failed

Add new mlx5 Kconfig flag to allow selecting accelerated flow steering
support, and compile out en_arfs.c if not selected.

Move arfs declarations and definitions to en/fs.h header file.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Moshe Shemesh <moshe@mellanox.com>
(cherry picked from commit ec080045977073c5e69a7fddee3a8aef9bf62881)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/Kconfig
#	drivers/net/ethernet/mellanox/mlx5/core/Makefile
#	drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Kconfig
index 7a84dd07ced2,01f9ba1a2098..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
@@@ -35,6 -35,24 +35,27 @@@ config MLX5_CORE_E
  	---help---
  	  Ethernet support in Mellanox Technologies ConnectX-4 NIC.
  
++<<<<<<< HEAD
++=======
+ config MLX5_EN_ARFS
+ 	bool "Mellanox MLX5 ethernet accelerated receive flow steering (ARFS) support"
+ 	depends on MLX5_CORE_EN && RFS_ACCEL
+ 	default y
+ 	---help---
+ 	  Mellanox MLX5 ethernet hardware-accelerated receive flow steering support,
+ 	  Enables ethernet netdevice arfs support and ntuple filtering.
+ 
+ config MLX5_EN_RXNFC
+ 	bool "Mellanox MLX5 ethernet rx nfc flow steering support"
+ 	depends on MLX5_CORE_EN
+ 	default y
+ 	---help---
+ 	  Mellanox MLX5 ethernet rx nfc flow steering support
+ 	  Enables ethtool receive network flow classification, which allows user defined
+ 	  flow rules to direct traffic into arbitrary rx queue via ethtool set/get_rxnfc
+ 	  API.
+ 
++>>>>>>> ec0800459770 (net/mlx5e: Add CONFIG_MLX5_EN_ARFS for accelerated flow steering support)
  config MLX5_MPFS
          bool "Mellanox Technologies MLX5 MPFS support"
          depends on MLX5_CORE_EN
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Makefile
index 4ff226a37f16,ae9da4b51487..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Makefile
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
@@@ -14,8 -14,11 +14,16 @@@ mlx5_core-$(CONFIG_MLX5_FPGA) += fpga/c
  		fpga/ipsec.o fpga/tls.o
  
  mlx5_core-$(CONFIG_MLX5_CORE_EN) += en_main.o en_common.o en_fs.o en_ethtool.o \
++<<<<<<< HEAD
 +		en_tx.o en_rx.o en_dim.o en_txrx.o en/xdp.o en_stats.o vxlan.o \
 +		en_arfs.o en_fs_ethtool.o en_selftest.o en/port.o
++=======
+ 		en_tx.o en_rx.o en_dim.o en_txrx.o en/xdp.o en_stats.o \
+ 		en_selftest.o en/port.o lib/vxlan.o
+ 
+ mlx5_core-$(CONFIG_MLX5_EN_ARFS)  += en_arfs.o
+ mlx5_core-$(CONFIG_MLX5_EN_RXNFC) += en_fs_ethtool.o
++>>>>>>> ec0800459770 (net/mlx5e: Add CONFIG_MLX5_EN_ARFS for accelerated flow steering support)
  
  mlx5_core-$(CONFIG_MLX5_MPFS) += lib/mpfs.o
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index c488db7d1bb9,e09086f41365..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -4321,11 -4348,12 +4321,15 @@@ static const struct net_device_ops mlx5
  	.ndo_udp_tunnel_add      = mlx5e_add_vxlan_port,
  	.ndo_udp_tunnel_del      = mlx5e_del_vxlan_port,
  	.ndo_features_check      = mlx5e_features_check,
- #ifdef CONFIG_RFS_ACCEL
- 	.ndo_rx_flow_steer	 = mlx5e_rx_flow_steer,
- #endif
  	.ndo_tx_timeout          = mlx5e_tx_timeout,
  	.ndo_bpf		 = mlx5e_xdp,
++<<<<<<< HEAD
++=======
+ 	.ndo_xdp_xmit            = mlx5e_xdp_xmit,
+ #ifdef CONFIG_MLX5_EN_ARFS
+ 	.ndo_rx_flow_steer	 = mlx5e_rx_flow_steer,
+ #endif
++>>>>>>> ec0800459770 (net/mlx5e: Add CONFIG_MLX5_EN_ARFS for accelerated flow steering support)
  #ifdef CONFIG_NET_POLL_CONTROLLER
  	.ndo_poll_controller     = mlx5e_netpoll,
  #endif
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Kconfig
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Makefile
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 7ebed66cd496..2ad6ba53ea18 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -649,12 +649,6 @@ struct mlx5e_l2_rule {
 	struct mlx5_flow_handle *rule;
 };
 
-struct mlx5e_flow_table {
-	int num_groups;
-	struct mlx5_flow_table *t;
-	struct mlx5_flow_group **g;
-};
-
 #define MLX5E_L2_ADDR_HASH_SIZE BIT(BITS_PER_BYTE)
 
 struct mlx5e_tc_table {
@@ -697,38 +691,15 @@ struct mlx5e_ttc_table {
 	struct mlx5_flow_handle  *tunnel_rules[MLX5E_NUM_TUNNEL_TT];
 };
 
-#define ARFS_HASH_SHIFT BITS_PER_BYTE
-#define ARFS_HASH_SIZE BIT(BITS_PER_BYTE)
-struct arfs_table {
-	struct mlx5e_flow_table  ft;
-	struct mlx5_flow_handle	 *default_rule;
-	struct hlist_head	 rules_hash[ARFS_HASH_SIZE];
-};
-
-enum  arfs_type {
-	ARFS_IPV4_TCP,
-	ARFS_IPV6_TCP,
-	ARFS_IPV4_UDP,
-	ARFS_IPV6_UDP,
-	ARFS_NUM_TYPES,
-};
-
-struct mlx5e_arfs_tables {
-	struct arfs_table arfs_tables[ARFS_NUM_TYPES];
-	/* Protect aRFS rules list */
-	spinlock_t                     arfs_lock;
-	struct list_head               rules;
-	int                            last_filter_id;
-	struct workqueue_struct        *wq;
-};
-
 /* NIC prio FTS */
 enum {
 	MLX5E_VLAN_FT_LEVEL = 0,
 	MLX5E_L2_FT_LEVEL,
 	MLX5E_TTC_FT_LEVEL,
 	MLX5E_INNER_TTC_FT_LEVEL,
+#ifdef CONFIG_MLX5_EN_ARFS
 	MLX5E_ARFS_FT_LEVEL
+#endif
 };
 
 enum {
@@ -759,7 +730,9 @@ struct mlx5e_flow_steering {
 	struct mlx5e_l2_table           l2;
 	struct mlx5e_ttc_table          ttc;
 	struct mlx5e_ttc_table          inner_ttc;
+#ifdef CONFIG_MLX5_EN_ARFS
 	struct mlx5e_arfs_tables        arfs;
+#endif
 };
 
 struct mlx5e_rqt {
@@ -1036,32 +1009,6 @@ void mlx5e_dcbnl_init_app(struct mlx5e_priv *priv);
 void mlx5e_dcbnl_delete_app(struct mlx5e_priv *priv);
 #endif
 
-#ifndef CONFIG_RFS_ACCEL
-static inline int mlx5e_arfs_create_tables(struct mlx5e_priv *priv)
-{
-	return 0;
-}
-
-static inline void mlx5e_arfs_destroy_tables(struct mlx5e_priv *priv) {}
-
-static inline int mlx5e_arfs_enable(struct mlx5e_priv *priv)
-{
-	return -EOPNOTSUPP;
-}
-
-static inline int mlx5e_arfs_disable(struct mlx5e_priv *priv)
-{
-	return -EOPNOTSUPP;
-}
-#else
-int mlx5e_arfs_create_tables(struct mlx5e_priv *priv);
-void mlx5e_arfs_destroy_tables(struct mlx5e_priv *priv);
-int mlx5e_arfs_enable(struct mlx5e_priv *priv);
-int mlx5e_arfs_disable(struct mlx5e_priv *priv);
-int mlx5e_rx_flow_steer(struct net_device *dev, const struct sk_buff *skb,
-			u16 rxq_index, u32 flow_id);
-#endif
-
 int mlx5e_create_tir(struct mlx5_core_dev *mdev,
 		     struct mlx5e_tir *tir, u32 *in, int inlen);
 void mlx5e_destroy_tir(struct mlx5_core_dev *mdev,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/fs.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c b/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
index d258bb679271..45cdde694d20 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
@@ -30,8 +30,6 @@
  * SOFTWARE.
  */
 
-#ifdef CONFIG_RFS_ACCEL
-
 #include <linux/hash.h>
 #include <linux/mlx5/fs.h>
 #include <linux/ip.h>
@@ -738,4 +736,4 @@ int mlx5e_rx_flow_steer(struct net_device *dev, const struct sk_buff *skb,
 	spin_unlock_bh(&arfs->arfs_lock);
 	return arfs_rule->filter_id;
 }
-#endif
+
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
