acpi: Ignore acpi_rsdp kernel param when the kernel has been locked down

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Josh Boyer <jwboyer@redhat.com>
commit 41fa1ee9c6d687afb05760dd349f361855f1d7f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/41fa1ee9.failed

This option allows userspace to pass the RSDP address to the kernel, which
makes it possible for a user to modify the workings of hardware. Reject
the option when the kernel is locked down. This requires some reworking
of the existing RSDP command line logic, since the early boot code also
makes use of a command-line passed RSDP when locating the SRAT table
before the lockdown code has been initialised. This is achieved by
separating the command line RSDP path in the early boot code from the
generic RSDP path, and then copying the command line RSDP into boot
params in the kernel proper if lockdown is not enabled. If lockdown is
enabled and an RSDP is provided on the command line, this will only be
used when parsing SRAT (which shouldn't permit kernel code execution)
and will be ignored in the rest of the kernel.

(Modified by Matthew Garrett in order to handle the early boot RSDP
environment)

	Signed-off-by: Josh Boyer <jwboyer@redhat.com>
	Signed-off-by: David Howells <dhowells@redhat.com>
	Signed-off-by: Matthew Garrett <mjg59@google.com>
	Reviewed-by: Kees Cook <keescook@chromium.org>
cc: Dave Young <dyoung@redhat.com>
cc: linux-acpi@vger.kernel.org
	Signed-off-by: James Morris <jmorris@namei.org>
(cherry picked from commit 41fa1ee9c6d687afb05760dd349f361855f1d7f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/acpi.c
#	arch/x86/include/asm/acpi.h
#	arch/x86/kernel/acpi/boot.c
#	arch/x86/kernel/x86_init.c
diff --cc arch/x86/include/asm/acpi.h
index a303d7b7d763,bc9693c9107e..000000000000
--- a/arch/x86/include/asm/acpi.h
+++ b/arch/x86/include/asm/acpi.h
@@@ -142,6 -131,9 +148,12 @@@ static inline u64 acpi_arch_get_root_po
  
  void acpi_generic_reduced_hw_init(void);
  
++<<<<<<< HEAD
++=======
+ void x86_default_set_root_pointer(u64 addr);
+ u64 x86_default_get_root_pointer(void);
+ 
++>>>>>>> 41fa1ee9c6d6 (acpi: Ignore acpi_rsdp kernel param when the kernel has been locked down)
  #else /* !CONFIG_ACPI */
  
  #define acpi_lapic 0
@@@ -153,6 -145,13 +165,16 @@@ static inline void disable_acpi(void) 
  
  static inline void acpi_generic_reduced_hw_init(void) { }
  
++<<<<<<< HEAD
++=======
+ static inline void x86_default_set_root_pointer(u64 addr) { }
+ 
+ static inline u64 x86_default_get_root_pointer(void)
+ {
+ 	return 0;
+ }
+ 
++>>>>>>> 41fa1ee9c6d6 (acpi: Ignore acpi_rsdp kernel param when the kernel has been locked down)
  #endif /* !CONFIG_ACPI */
  
  #define ARCH_HAS_POWER_INIT	1
diff --cc arch/x86/kernel/acpi/boot.c
index 3b20607d581b,04205ce127a1..000000000000
--- a/arch/x86/kernel/acpi/boot.c
+++ b/arch/x86/kernel/acpi/boot.c
@@@ -1771,3 -1759,13 +1771,16 @@@ void __init arch_reserve_mem_area(acpi_
  	e820__range_add(addr, size, E820_TYPE_ACPI);
  	e820__update_table_print();
  }
++<<<<<<< HEAD
++=======
+ 
+ void x86_default_set_root_pointer(u64 addr)
+ {
+ 	boot_params.acpi_rsdp_addr = addr;
+ }
+ 
+ u64 x86_default_get_root_pointer(void)
+ {
+ 	return boot_params.acpi_rsdp_addr;
+ }
++>>>>>>> 41fa1ee9c6d6 (acpi: Ignore acpi_rsdp kernel param when the kernel has been locked down)
diff --cc arch/x86/kernel/x86_init.c
index 3ab867603e81,d0b8f5585a73..000000000000
--- a/arch/x86/kernel/x86_init.c
+++ b/arch/x86/kernel/x86_init.c
@@@ -96,7 -95,8 +96,12 @@@ struct x86_init_ops x86_init __initdat
  	},
  
  	.acpi = {
++<<<<<<< HEAD
 +		.get_root_pointer	= u64_x86_init_noop,
++=======
+ 		.set_root_pointer	= x86_default_set_root_pointer,
+ 		.get_root_pointer	= x86_default_get_root_pointer,
++>>>>>>> 41fa1ee9c6d6 (acpi: Ignore acpi_rsdp kernel param when the kernel has been locked down)
  		.reduced_hw_early_init	= acpi_generic_reduced_hw_init,
  	},
  };
* Unmerged path arch/x86/boot/compressed/acpi.c
* Unmerged path arch/x86/boot/compressed/acpi.c
* Unmerged path arch/x86/include/asm/acpi.h
diff --git a/arch/x86/include/asm/x86_init.h b/arch/x86/include/asm/x86_init.h
index b85a7c54c6a1..d584128435cb 100644
--- a/arch/x86/include/asm/x86_init.h
+++ b/arch/x86/include/asm/x86_init.h
@@ -134,10 +134,12 @@ struct x86_hyper_init {
 
 /**
  * struct x86_init_acpi - x86 ACPI init functions
+ * @set_root_poitner:		set RSDP address
  * @get_root_pointer:		get RSDP address
  * @reduced_hw_early_init:	hardware reduced platform early init
  */
 struct x86_init_acpi {
+	void (*set_root_pointer)(u64 addr);
 	u64 (*get_root_pointer)(void);
 	void (*reduced_hw_early_init)(void);
 };
* Unmerged path arch/x86/kernel/acpi/boot.c
* Unmerged path arch/x86/kernel/x86_init.c
diff --git a/drivers/acpi/osl.c b/drivers/acpi/osl.c
index 8df9abfa947b..d4c5675d277e 100644
--- a/drivers/acpi/osl.c
+++ b/drivers/acpi/osl.c
@@ -40,6 +40,7 @@
 #include <linux/list.h>
 #include <linux/jiffies.h>
 #include <linux/semaphore.h>
+#include <linux/security.h>
 
 #include <asm/io.h>
 #include <linux/uaccess.h>
@@ -194,8 +195,19 @@ acpi_physical_address __init acpi_os_get_root_pointer(void)
 	acpi_physical_address pa;
 
 #ifdef CONFIG_KEXEC
-	if (acpi_rsdp)
+	/*
+	 * We may have been provided with an RSDP on the command line,
+	 * but if a malicious user has done so they may be pointing us
+	 * at modified ACPI tables that could alter kernel behaviour -
+	 * so, we check the lockdown status before making use of
+	 * it. If we trust it then also stash it in an architecture
+	 * specific location (if appropriate) so it can be carried
+	 * over further kexec()s.
+	 */
+	if (acpi_rsdp && !security_locked_down(LOCKDOWN_ACPI_TABLES)) {
+		acpi_arch_set_root_pointer(acpi_rsdp);
 		return acpi_rsdp;
+	}
 #endif
 	pa = acpi_arch_get_root_pointer();
 	if (pa)
diff --git a/include/linux/acpi.h b/include/linux/acpi.h
index 9808a9bbc2ef..727951be77a3 100644
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@ -628,6 +628,12 @@ bool acpi_gtdt_c3stop(int type);
 int acpi_arch_timer_mem_init(struct arch_timer_mem *timer_mem, int *timer_count);
 #endif
 
+#ifndef ACPI_HAVE_ARCH_SET_ROOT_POINTER
+static inline void acpi_arch_set_root_pointer(u64 addr)
+{
+}
+#endif
+
 #ifndef ACPI_HAVE_ARCH_GET_ROOT_POINTER
 static inline u64 acpi_arch_get_root_pointer(void)
 {
