vfs: plumb remap flags through the vfs dedupe functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit df3658361951e17364f1e1c3fa92862a990ad8bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/df365836.failed

Plumb a remap_flags argument through the vfs_dedupe_file_range_one
functions so that dedupe can take advantage of it.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit df3658361951e17364f1e1c3fa92862a990ad8bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/read_write.c
#	include/linux/fs.h
diff --cc fs/read_write.c
index 734c5661fb69,ea30666013b0..000000000000
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@@ -1980,11 -2008,14 +1980,19 @@@ out_error
  }
  EXPORT_SYMBOL(vfs_dedupe_file_range_compare);
  
++<<<<<<< HEAD
 +int vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
 +			      struct file *dst_file, loff_t dst_pos, u64 len)
++=======
+ loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
+ 				 struct file *dst_file, loff_t dst_pos,
+ 				 loff_t len, unsigned int remap_flags)
++>>>>>>> df3658361951 (vfs: plumb remap flags through the vfs dedupe functions)
  {
 -	loff_t ret;
 +	s64 ret;
  
+ 	WARN_ON_ONCE(remap_flags & ~(REMAP_FILE_DEDUP));
+ 
  	ret = mnt_want_write_file(dst_file);
  	if (ret)
  		return ret;
@@@ -2014,8 -2045,8 +2022,13 @@@
  		goto out_drop_write;
  	}
  
++<<<<<<< HEAD
 +	ret = dst_file->f_op->dedupe_file_range(src_file, src_pos,
 +						dst_file, dst_pos, len);
++=======
+ 	ret = dst_file->f_op->remap_file_range(src_file, src_pos, dst_file,
+ 			dst_pos, len, remap_flags | REMAP_FILE_DEDUP);
++>>>>>>> df3658361951 (vfs: plumb remap flags through the vfs dedupe functions)
  out_drop_write:
  	mnt_drop_write_file(dst_file);
  
diff --cc include/linux/fs.h
index 6f009fb80ab1,544ab5083b48..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -1819,9 -1857,9 +1819,15 @@@ extern int vfs_dedupe_file_range_compar
  					 loff_t len, bool *is_same);
  extern int vfs_dedupe_file_range(struct file *file,
  				 struct file_dedupe_range *same);
++<<<<<<< HEAD
 +extern int vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
 +				     struct file *dst_file, loff_t dst_pos,
 +				     u64 len);
++=======
+ extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
+ 					struct file *dst_file, loff_t dst_pos,
+ 					loff_t len, unsigned int remap_flags);
++>>>>>>> df3658361951 (vfs: plumb remap flags through the vfs dedupe functions)
  
  
  struct super_operations {
diff --git a/fs/overlayfs/file.c b/fs/overlayfs/file.c
index 986313da0c88..9c5ea21a5a1f 100644
--- a/fs/overlayfs/file.c
+++ b/fs/overlayfs/file.c
@@ -467,7 +467,8 @@ static ssize_t ovl_copyfile(struct file *file_in, loff_t pos_in,
 
 	case OVL_DEDUPE:
 		ret = vfs_dedupe_file_range_one(real_in.file, pos_in,
-						real_out.file, pos_out, len);
+						real_out.file, pos_out, len,
+						flags);
 		break;
 	}
 	revert_creds(old_cred);
* Unmerged path fs/read_write.c
* Unmerged path include/linux/fs.h
