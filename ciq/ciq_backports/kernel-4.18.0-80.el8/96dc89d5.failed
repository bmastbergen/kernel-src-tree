powerpc/tm: Avoid possible userspace r1 corruption on reclaim

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Michael Neuling <mikey@neuling.org>
commit 96dc89d526ef77604376f06220e3d2931a0bfd58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/96dc89d5.failed

Current we store the userspace r1 to PACATMSCRATCH before finally
saving it to the thread struct.

In theory an exception could be taken here (like a machine check or
SLB miss) that could write PACATMSCRATCH and hence corrupt the
userspace r1. The SLB fault currently doesn't touch PACATMSCRATCH, but
others do.

We've never actually seen this happen but it's theoretically
possible. Either way, the code is fragile as it is.

This patch saves r1 to the kernel stack (which can't fault) before we
turn MSR[RI] back on. PACATMSCRATCH is still used but only with
MSR[RI] off. We then copy r1 from the kernel stack to the thread
struct once we have MSR[RI] back on.

	Suggested-by: Breno Leitao <leitao@debian.org>
	Signed-off-by: Michael Neuling <mikey@neuling.org>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 96dc89d526ef77604376f06220e3d2931a0bfd58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/tm.S
diff --cc arch/powerpc/kernel/tm.S
index ff12f47a96b6,7716374786bd..000000000000
--- a/arch/powerpc/kernel/tm.S
+++ b/arch/powerpc/kernel/tm.S
@@@ -175,9 -176,22 +175,26 @@@ _GLOBAL(tm_reclaim
  	std	r1, PACATMSCRATCH(r13)
  	ld	r1, PACAR1(r13)
  
 +	/* Store the PPR in r11 and reset to decent value */
  	std	r11, GPR11(r1)			/* Temporary stash */
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Move the saved user r1 to the kernel stack in case PACATMSCRATCH is
+ 	 * clobbered by an exception once we turn on MSR_RI below.
+ 	 */
+ 	ld	r11, PACATMSCRATCH(r13)
+ 	std	r11, GPR1(r1)
+ 
+ 	/*
+ 	 * Store r13 away so we can free up the scratch SPR for the SLB fault
+ 	 * handler (needed once we start accessing the thread_struct).
+ 	 */
+ 	GET_SCRATCH0(r11)
+ 	std	r11, GPR13(r1)
+ 
++>>>>>>> 96dc89d526ef (powerpc/tm: Avoid possible userspace r1 corruption on reclaim)
  	/* Reset MSR RI so we can take SLB faults again */
  	li	r11, MSR_RI
  	mtmsrd	r11, 1
* Unmerged path arch/powerpc/kernel/tm.S
