x86/KVM/VMX: Add L1D flush algorithm

jira LE-1907
cve CVE-2018-3646
cve CVE-2018-3620
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit a47dd5f06714c844b33f3b5f517b6f3e81ce57b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/a47dd5f0.failed

To mitigate the L1 Terminal Fault vulnerability it's required to flush L1D
on VMENTER to prevent rogue guests from snooping host memory.

CPUs will have a new control MSR via a microcode update to flush L1D with a
single MSR write, but in the absence of microcode a fallback to a software
based flush algorithm is required.

Add a software flush loop which is based on code from Intel.

[ tglx: Split out from combo patch ]
[ bpetkov: Polish the asm code ]

	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit a47dd5f06714c844b33f3b5f517b6f3e81ce57b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx.c
diff --cc arch/x86/kvm/vmx.c
index 82f23cbd7f05,b072264eb464..000000000000
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@@ -13852,6 -13150,31 +13892,34 @@@ static struct kvm_x86_ops vmx_x86_ops _
  	.enable_smi_window = enable_smi_window,
  };
  
++<<<<<<< HEAD
++=======
+ static int __init vmx_setup_l1d_flush(void)
+ {
+ 	struct page *page;
+ 
+ 	if (vmentry_l1d_flush == VMENTER_L1D_FLUSH_NEVER ||
+ 	    !boot_cpu_has_bug(X86_BUG_L1TF))
+ 		return 0;
+ 
+ 	page = alloc_pages(GFP_KERNEL, L1D_CACHE_ORDER);
+ 	if (!page)
+ 		return -ENOMEM;
+ 
+ 	vmx_l1d_flush_pages = page_address(page);
+ 	static_branch_enable(&vmx_l1d_should_flush);
+ 	return 0;
+ }
+ 
+ static void vmx_free_l1d_flush_pages(void)
+ {
+ 	if (vmx_l1d_flush_pages) {
+ 		free_pages((unsigned long)vmx_l1d_flush_pages, L1D_CACHE_ORDER);
+ 		vmx_l1d_flush_pages = NULL;
+ 	}
+ }
+ 
++>>>>>>> a47dd5f06714 (x86/KVM/VMX: Add L1D flush algorithm)
  static int __init vmx_init(void)
  {
  	int r;
@@@ -13885,8 -13208,7 +13953,12 @@@
  	}
  #endif
  
++<<<<<<< HEAD
 +	r = kvm_init(&vmx_x86_ops, sizeof(struct vcpu_vmx),
 +                     __alignof__(struct vcpu_vmx), THIS_MODULE);
++=======
+ 	r = vmx_setup_l1d_flush();
++>>>>>>> a47dd5f06714 (x86/KVM/VMX: Add L1D flush algorithm)
  	if (r)
  		return r;
  
* Unmerged path arch/x86/kvm/vmx.c
