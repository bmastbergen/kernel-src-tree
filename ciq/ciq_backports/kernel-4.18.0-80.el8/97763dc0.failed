net_sched: reject unknown tcfa_action values

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 97763dc0f4010bc20e2969a6bf9a40a2551c4f79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/97763dc0.failed

After the commit 802bfb19152c ("net/sched: user-space can't set
unknown tcfa_action values"), unknown tcfa_action values are
converted to TC_ACT_UNSPEC, but the common agreement is instead
rejecting such configurations.

This change also introduces a helper to simplify the destruction
of a single action, avoiding code duplication.

v1 -> v2:
 - helper is now static and renamed according to act_* convention
 - updated extack message, according to the new behavior

Fixes: 802bfb19152c ("net/sched: user-space can't set unknown tcfa_action values")
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 97763dc0f4010bc20e2969a6bf9a40a2551c4f79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_api.c
diff --cc net/sched/act_api.c
index 798bd0da5ca2,316c98bb87e4..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -614,6 -662,35 +614,38 @@@ int tcf_action_destroy(struct list_hea
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static int tcf_action_destroy_1(struct tc_action *a, int bind)
+ {
+ 	struct tc_action *actions[] = { a, NULL };
+ 
+ 	return tcf_action_destroy(actions, bind);
+ }
+ 
+ static int tcf_action_put(struct tc_action *p)
+ {
+ 	return __tcf_action_put(p, false);
+ }
+ 
+ /* Put all actions in this array, skip those NULL's. */
+ static void tcf_action_put_many(struct tc_action *actions[])
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < TCA_ACT_MAX_PRIO; i++) {
+ 		struct tc_action *a = actions[i];
+ 		const struct tc_action_ops *ops;
+ 
+ 		if (!a)
+ 			continue;
+ 		ops = a->ops;
+ 		if (tcf_action_put(a))
+ 			module_put(ops->owner);
+ 	}
+ }
+ 
++>>>>>>> 97763dc0f401 (net_sched: reject unknown tcfa_action values)
  int
  tcf_action_dump_old(struct sk_buff *skb, struct tc_action *a, int bind, int ref)
  {
@@@ -810,10 -888,7 +842,14 @@@ struct tc_action *tcf_action_init_1(str
  	if (TC_ACT_EXT_CMP(a->tcfa_action, TC_ACT_GOTO_CHAIN)) {
  		err = tcf_action_goto_chain_init(a, tp);
  		if (err) {
++<<<<<<< HEAD
 +			LIST_HEAD(actions);
 +
 +			list_add_tail(&a->list, &actions);
 +			tcf_action_destroy(&actions, bind);
++=======
+ 			tcf_action_destroy_1(a, bind);
++>>>>>>> 97763dc0f401 (net_sched: reject unknown tcfa_action values)
  			NL_SET_ERR_MSG(extack, "Failed to init TC action chain");
  			return ERR_PTR(err);
  		}
* Unmerged path net/sched/act_api.c
