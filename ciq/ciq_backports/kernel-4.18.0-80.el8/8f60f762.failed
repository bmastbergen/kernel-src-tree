net: aquantia: renaming for better visibility

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Nikita Danilov <nikita.danilov@aquantia.com>
commit 8f60f762aa3d4c8b940ac01d6c0bbb5ec2361d6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/8f60f762.failed

Removed extra characters from the names of structures to unify prefixes
used through the driver code (we normally use hw_atl for hw specifics).
HW_ATL_B0_ and HW_ATL_A0_ are the same and useless copies.

	Signed-off-by: Nikita Danilov <nikita.danilov@aquantia.com>
	Signed-off-by: Igor Russkikh <igor.russkikh@aquantia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8f60f762aa3d4c8b940ac01d6c0bbb5ec2361d6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
index a9f236ec0cf2,2469ed4d86b9..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
@@@ -47,20 -49,20 +47,35 @@@
  const struct aq_hw_caps_s hw_atl_a0_caps_aqc100 = {
  	DEFAULT_A0_BOARD_BASIC_CAPABILITIES,
  	.media_type = AQ_HW_MEDIA_TYPE_FIBRE,
++<<<<<<< HEAD
 +	.link_speed_msk = HW_ATL_A0_RATE_5G  |
 +			  HW_ATL_A0_RATE_2G5 |
 +			  HW_ATL_A0_RATE_1G  |
 +			  HW_ATL_A0_RATE_100M,
++=======
+ 	.link_speed_msk = AQ_NIC_RATE_5G |
+ 			  AQ_NIC_RATE_2GS |
+ 			  AQ_NIC_RATE_1G |
+ 			  AQ_NIC_RATE_100M,
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  };
  
  const struct aq_hw_caps_s hw_atl_a0_caps_aqc107 = {
  	DEFAULT_A0_BOARD_BASIC_CAPABILITIES,
  	.media_type = AQ_HW_MEDIA_TYPE_TP,
++<<<<<<< HEAD
 +	.link_speed_msk = HW_ATL_A0_RATE_10G |
 +			  HW_ATL_A0_RATE_5G  |
 +			  HW_ATL_A0_RATE_2G5 |
 +			  HW_ATL_A0_RATE_1G  |
 +			  HW_ATL_A0_RATE_100M,
++=======
+ 	.link_speed_msk = AQ_NIC_RATE_10G |
+ 			  AQ_NIC_RATE_5G |
+ 			  AQ_NIC_RATE_2GS |
+ 			  AQ_NIC_RATE_1G |
+ 			  AQ_NIC_RATE_100M,
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  };
  
  const struct aq_hw_caps_s hw_atl_a0_caps_aqc108 = {
@@@ -75,9 -77,9 +90,15 @@@
  const struct aq_hw_caps_s hw_atl_a0_caps_aqc109 = {
  	DEFAULT_A0_BOARD_BASIC_CAPABILITIES,
  	.media_type = AQ_HW_MEDIA_TYPE_TP,
++<<<<<<< HEAD
 +	.link_speed_msk = HW_ATL_A0_RATE_2G5 |
 +			  HW_ATL_A0_RATE_1G  |
 +			  HW_ATL_A0_RATE_100M,
++=======
+ 	.link_speed_msk = AQ_NIC_RATE_2GS |
+ 			  AQ_NIC_RATE_1G |
+ 			  AQ_NIC_RATE_100M,
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  };
  
  static int hw_atl_a0_hw_reset(struct aq_hw_s *self)
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index b245cd105cc1,76d25d594a0f..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -49,38 -51,38 +49,67 @@@
  const struct aq_hw_caps_s hw_atl_b0_caps_aqc100 = {
  	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
  	.media_type = AQ_HW_MEDIA_TYPE_FIBRE,
++<<<<<<< HEAD
 +	.link_speed_msk = HW_ATL_B0_RATE_10G |
 +			  HW_ATL_B0_RATE_5G  |
 +			  HW_ATL_B0_RATE_2G5 |
 +			  HW_ATL_B0_RATE_1G  |
 +			  HW_ATL_B0_RATE_100M,
++=======
+ 	.link_speed_msk = AQ_NIC_RATE_10G |
+ 			  AQ_NIC_RATE_5G |
+ 			  AQ_NIC_RATE_2GS |
+ 			  AQ_NIC_RATE_1G |
+ 			  AQ_NIC_RATE_100M,
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  };
  
  const struct aq_hw_caps_s hw_atl_b0_caps_aqc107 = {
  	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
  	.media_type = AQ_HW_MEDIA_TYPE_TP,
++<<<<<<< HEAD
 +	.link_speed_msk = HW_ATL_B0_RATE_10G |
 +			  HW_ATL_B0_RATE_5G  |
 +			  HW_ATL_B0_RATE_2G5 |
 +			  HW_ATL_B0_RATE_1G  |
 +			  HW_ATL_B0_RATE_100M,
++=======
+ 	.link_speed_msk = AQ_NIC_RATE_10G |
+ 			  AQ_NIC_RATE_5G |
+ 			  AQ_NIC_RATE_2GS |
+ 			  AQ_NIC_RATE_1G |
+ 			  AQ_NIC_RATE_100M,
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  };
  
  const struct aq_hw_caps_s hw_atl_b0_caps_aqc108 = {
  	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
  	.media_type = AQ_HW_MEDIA_TYPE_TP,
++<<<<<<< HEAD
 +	.link_speed_msk = HW_ATL_B0_RATE_5G  |
 +			  HW_ATL_B0_RATE_2G5 |
 +			  HW_ATL_B0_RATE_1G  |
 +			  HW_ATL_B0_RATE_100M,
++=======
+ 	.link_speed_msk = AQ_NIC_RATE_5G |
+ 			  AQ_NIC_RATE_2GS |
+ 			  AQ_NIC_RATE_1G |
+ 			  AQ_NIC_RATE_100M,
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  };
  
  const struct aq_hw_caps_s hw_atl_b0_caps_aqc109 = {
  	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
  	.media_type = AQ_HW_MEDIA_TYPE_TP,
++<<<<<<< HEAD
 +	.link_speed_msk = HW_ATL_B0_RATE_2G5 |
 +			  HW_ATL_B0_RATE_1G  |
 +			  HW_ATL_B0_RATE_100M,
++=======
+ 	.link_speed_msk = AQ_NIC_RATE_2GS |
+ 			  AQ_NIC_RATE_1G |
+ 			  AQ_NIC_RATE_100M,
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  };
  
  static int hw_atl_b0_hw_reset(struct aq_hw_s *self)
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
index 54d5759f0ff8,0dd59b09060b..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
@@@ -503,12 -504,12 +503,12 @@@ err_exit
  }
  
  int hw_atl_utils_mpi_read_mbox(struct aq_hw_s *self,
- 			       struct hw_aq_atl_utils_mbox_header *pmbox)
+ 			       struct hw_atl_utils_mbox_header *pmbox)
  {
  	return hw_atl_utils_fw_downld_dwords(self,
 -					     self->mbox_addr,
 -					     (u32 *)(void *)pmbox,
 -					     sizeof(*pmbox) / sizeof(u32));
 +				      self->mbox_addr,
 +				      (u32 *)(void *)pmbox,
 +				      sizeof(*pmbox) / sizeof(u32));
  }
  
  void hw_atl_utils_mpi_read_stats(struct aq_hw_s *self,
@@@ -744,17 -745,9 +744,17 @@@ static int hw_atl_fw1x_deinit(struct aq
  	return 0;
  }
  
 +int hw_atl_utils_hw_set_power(struct aq_hw_s *self,
 +			      unsigned int power_state)
 +{
 +	hw_atl_utils_mpi_set_speed(self, 0);
 +	hw_atl_utils_mpi_set_state(self, MPI_POWER);
 +	return 0;
 +}
 +
  int hw_atl_utils_update_stats(struct aq_hw_s *self)
  {
- 	struct hw_aq_atl_utils_mbox mbox;
+ 	struct hw_atl_utils_mbox mbox;
  
  	hw_atl_utils_mpi_read_stats(self, &mbox);
  
@@@ -839,6 -832,81 +839,84 @@@ int hw_atl_utils_get_fw_version(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int aq_fw1x_set_wol(struct aq_hw_s *self, bool wol_enabled, u8 *mac)
+ {
+ 	struct hw_atl_utils_fw_rpc *prpc = NULL;
+ 	unsigned int rpc_size = 0U;
+ 	int err = 0;
+ 
+ 	err = hw_atl_utils_fw_rpc_wait(self, &prpc);
+ 	if (err < 0)
+ 		goto err_exit;
+ 
+ 	memset(prpc, 0, sizeof(*prpc));
+ 
+ 	if (wol_enabled) {
+ 		rpc_size = sizeof(prpc->msg_id) + sizeof(prpc->msg_wol);
+ 
+ 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_WOL_ADD;
+ 		prpc->msg_wol.priority =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PRIOR;
+ 		prpc->msg_wol.pattern_id =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PATTERN;
+ 		prpc->msg_wol.wol_packet_type =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_MAG_PKT;
+ 
+ 		ether_addr_copy((u8 *)&prpc->msg_wol.wol_pattern, mac);
+ 	} else {
+ 		rpc_size = sizeof(prpc->msg_id) + sizeof(prpc->msg_del_id);
+ 
+ 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_WOL_DEL;
+ 		prpc->msg_wol.pattern_id =
+ 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PATTERN;
+ 	}
+ 
+ 	err = hw_atl_utils_fw_rpc_call(self, rpc_size);
+ 
+ err_exit:
+ 	return err;
+ }
+ 
+ int aq_fw1x_set_power(struct aq_hw_s *self, unsigned int power_state,
+ 		      u8 *mac)
+ {
+ 	struct hw_atl_utils_fw_rpc *prpc = NULL;
+ 	unsigned int rpc_size = 0U;
+ 	int err = 0;
+ 
+ 	if (self->aq_nic_cfg->wol & AQ_NIC_WOL_ENABLED) {
+ 		err = aq_fw1x_set_wol(self, 1, mac);
+ 
+ 		if (err < 0)
+ 			goto err_exit;
+ 
+ 		rpc_size = sizeof(prpc->msg_id) +
+ 			   sizeof(prpc->msg_enable_wakeup);
+ 
+ 		err = hw_atl_utils_fw_rpc_wait(self, &prpc);
+ 
+ 		if (err < 0)
+ 			goto err_exit;
+ 
+ 		memset(prpc, 0, rpc_size);
+ 
+ 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_ENABLE_WAKEUP;
+ 		prpc->msg_enable_wakeup.pattern_mask = 0x00000002;
+ 
+ 		err = hw_atl_utils_fw_rpc_call(self, rpc_size);
+ 		if (err < 0)
+ 			goto err_exit;
+ 	}
+ 	hw_atl_utils_mpi_set_speed(self, 0);
+ 	hw_atl_utils_mpi_set_state(self, MPI_POWER);
+ 
+ err_exit:
+ 	return err;
+ }
+ 
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  const struct aq_fw_ops aq_fw_1x_ops = {
  	.init = hw_atl_utils_mpi_create,
  	.deinit = hw_atl_fw1x_deinit,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
index a0fcd232c627,3613fca64b58..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
@@@ -171,9 -171,22 +171,26 @@@ struct __packed hw_atl_utils_mbox_heade
  	u32 error;
  };
  
++<<<<<<< HEAD
 +struct __packed hw_aq_atl_utils_mbox {
 +	struct hw_aq_atl_utils_mbox_header header;
++=======
+ struct __packed hw_aq_info {
+ 	u8 reserved[6];
+ 	u16 phy_fault_code;
+ 	u16 phy_temperature;
+ 	u8 cable_len;
+ 	u8 reserved1;
+ 	u32 cable_diag_data[4];
+ 	u8 reserved2[32];
+ 	u32 caps_lo;
+ 	u32 caps_hi;
+ };
+ 
+ struct __packed hw_atl_utils_mbox {
+ 	struct hw_atl_utils_mbox_header header;
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  	struct hw_atl_stats_s stats;
 -	struct hw_aq_info info;
  };
  
  /* fw2x */
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
index 9c442f3e95f1,c0568465e10b..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
@@@ -238,6 -300,157 +238,160 @@@ static int aq_fw2x_update_stats(struct 
  	return hw_atl_utils_update_stats(self);
  }
  
++<<<<<<< HEAD
++=======
+ static int aq_fw2x_set_sleep_proxy(struct aq_hw_s *self, u8 *mac)
+ {
+ 	struct hw_atl_utils_fw_rpc *rpc = NULL;
+ 	struct offload_info *cfg = NULL;
+ 	unsigned int rpc_size = 0U;
+ 	u32 mpi_opts;
+ 	int err = 0;
+ 
+ 	rpc_size = sizeof(rpc->msg_id) + sizeof(*cfg);
+ 
+ 	err = hw_atl_utils_fw_rpc_wait(self, &rpc);
+ 	if (err < 0)
+ 		goto err_exit;
+ 
+ 	memset(rpc, 0, rpc_size);
+ 	cfg = (struct offload_info *)(&rpc->msg_id + 1);
+ 
+ 	memcpy(cfg->mac_addr, mac, ETH_ALEN);
+ 	cfg->len = sizeof(*cfg);
+ 
+ 	/* Clear bit 0x36C.23 and 0x36C.22 */
+ 	mpi_opts = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR);
+ 	mpi_opts &= ~HW_ATL_FW2X_CTRL_SLEEP_PROXY;
+ 	mpi_opts &= ~HW_ATL_FW2X_CTRL_LINK_DROP;
+ 
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_opts);
+ 
+ 	err = hw_atl_utils_fw_rpc_call(self, rpc_size);
+ 	if (err < 0)
+ 		goto err_exit;
+ 
+ 	/* Set bit 0x36C.23 */
+ 	mpi_opts |= HW_ATL_FW2X_CTRL_SLEEP_PROXY;
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_opts);
+ 
+ 	AQ_HW_WAIT_FOR((aq_hw_read_reg(self, HW_ATL_FW2X_MPI_STATE2_ADDR) &
+ 			HW_ATL_FW2X_CTRL_SLEEP_PROXY), 1U, 10000U);
+ 
+ err_exit:
+ 	return err;
+ }
+ 
+ static int aq_fw2x_set_wol_params(struct aq_hw_s *self, u8 *mac)
+ {
+ 	struct hw_atl_utils_fw_rpc *rpc = NULL;
+ 	struct fw2x_msg_wol *msg = NULL;
+ 	u32 mpi_opts;
+ 	int err = 0;
+ 
+ 	err = hw_atl_utils_fw_rpc_wait(self, &rpc);
+ 	if (err < 0)
+ 		goto err_exit;
+ 
+ 	msg = (struct fw2x_msg_wol *)rpc;
+ 
+ 	msg->msg_id = HAL_ATLANTIC_UTILS_FW2X_MSG_WOL;
+ 	msg->magic_packet_enabled = true;
+ 	memcpy(msg->hw_addr, mac, ETH_ALEN);
+ 
+ 	mpi_opts = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR);
+ 	mpi_opts &= ~(HW_ATL_FW2X_CTRL_SLEEP_PROXY | HW_ATL_FW2X_CTRL_WOL);
+ 
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_opts);
+ 
+ 	err = hw_atl_utils_fw_rpc_call(self, sizeof(*msg));
+ 	if (err < 0)
+ 		goto err_exit;
+ 
+ 	/* Set bit 0x36C.24 */
+ 	mpi_opts |= HW_ATL_FW2X_CTRL_WOL;
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_opts);
+ 
+ 	AQ_HW_WAIT_FOR((aq_hw_read_reg(self, HW_ATL_FW2X_MPI_STATE2_ADDR) &
+ 			HW_ATL_FW2X_CTRL_WOL), 1U, 10000U);
+ 
+ err_exit:
+ 	return err;
+ }
+ 
+ static int aq_fw2x_set_power(struct aq_hw_s *self, unsigned int power_state,
+ 			     u8 *mac)
+ {
+ 	int err = 0;
+ 
+ 	if (self->aq_nic_cfg->wol & AQ_NIC_WOL_ENABLED) {
+ 		err = aq_fw2x_set_sleep_proxy(self, mac);
+ 		if (err < 0)
+ 			goto err_exit;
+ 		err = aq_fw2x_set_wol_params(self, mac);
+ 	}
+ 
+ err_exit:
+ 	return err;
+ }
+ 
+ static int aq_fw2x_set_eee_rate(struct aq_hw_s *self, u32 speed)
+ {
+ 	u32 mpi_opts = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR);
+ 
+ 	aq_fw2x_upd_eee_rate_bits(self, &mpi_opts, speed);
+ 
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_opts);
+ 
+ 	return 0;
+ }
+ 
+ static int aq_fw2x_get_eee_rate(struct aq_hw_s *self, u32 *rate,
+ 				u32 *supported_rates)
+ {
+ 	u32 mpi_state;
+ 	u32 caps_hi;
+ 	int err = 0;
+ 	u32 addr = self->mbox_addr + offsetof(struct hw_atl_utils_mbox, info) +
+ 		   offsetof(struct hw_aq_info, caps_hi);
+ 
+ 	err = hw_atl_utils_fw_downld_dwords(self, addr, &caps_hi,
+ 					    sizeof(caps_hi) / sizeof(u32));
+ 
+ 	if (err)
+ 		return err;
+ 
+ 	*supported_rates = fw2x_to_eee_mask(caps_hi);
+ 
+ 	mpi_state = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_STATE2_ADDR);
+ 	*rate = fw2x_to_eee_mask(mpi_state);
+ 
+ 	return err;
+ }
+ 
+ static int aq_fw2x_renegotiate(struct aq_hw_s *self)
+ {
+ 	u32 mpi_opts = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR);
+ 
+ 	mpi_opts |= BIT(CTRL_FORCE_RECONNECT);
+ 
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_opts);
+ 
+ 	return 0;
+ }
+ 
+ static int aq_fw2x_set_flow_control(struct aq_hw_s *self)
+ {
+ 	u32 mpi_state = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR);
+ 
+ 	aq_fw2x_set_mpi_flow_control(self, &mpi_state);
+ 
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_state);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 8f60f762aa3d (net: aquantia: renaming for better visibility)
  const struct aq_fw_ops aq_fw_2x_ops = {
  	.init = aq_fw2x_init,
  	.deinit = aq_fw2x_deinit,
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_hw.h b/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
index 1cf486d813e0..1cdf8d57f2bf 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
@@ -107,7 +107,7 @@ struct aq_hw_s {
 	const struct aq_fw_ops *aq_fw_ops;
 	void __iomem *mmio;
 	struct aq_hw_link_status_s aq_link_status;
-	struct hw_aq_atl_utils_mbox mbox;
+	struct hw_atl_utils_mbox mbox;
 	struct hw_atl_stats_s last_stats;
 	struct aq_stats_s curr_stats;
 	u64 speed;
@@ -119,7 +119,7 @@ struct aq_hw_s {
 	u32 mbox_addr;
 	u32 rpc_addr;
 	u32 rpc_tid;
-	struct hw_aq_atl_utils_fw_rpc rpc;
+	struct hw_atl_utils_fw_rpc rpc;
 };
 
 struct aq_ring_s;
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
index 1d8855558d74..de583e279a14 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
@@ -62,12 +62,6 @@
 #define HW_ATL_A0_MPI_SPEED_MSK       0xFFFFU
 #define HW_ATL_A0_MPI_SPEED_SHIFT     16U
 
-#define HW_ATL_A0_RATE_10G            BIT(0)
-#define HW_ATL_A0_RATE_5G             BIT(1)
-#define HW_ATL_A0_RATE_2G5            BIT(3)
-#define HW_ATL_A0_RATE_1G             BIT(4)
-#define HW_ATL_A0_RATE_100M           BIT(5)
-
 #define HW_ATL_A0_TXBUF_MAX 160U
 #define HW_ATL_A0_RXBUF_MAX 320U
 
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
index 405d1455c222..7c6ad66dc98d 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
@@ -67,12 +67,6 @@
 #define HW_ATL_B0_MPI_SPEED_MSK         0xFFFFU
 #define HW_ATL_B0_MPI_SPEED_SHIFT       16U
 
-#define HW_ATL_B0_RATE_10G              BIT(0)
-#define HW_ATL_B0_RATE_5G               BIT(1)
-#define HW_ATL_B0_RATE_2G5              BIT(3)
-#define HW_ATL_B0_RATE_1G               BIT(4)
-#define HW_ATL_B0_RATE_100M             BIT(5)
-
 #define HW_ATL_B0_TXBUF_MAX  160U
 #define HW_ATL_B0_RXBUF_MAX  320U
 
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
