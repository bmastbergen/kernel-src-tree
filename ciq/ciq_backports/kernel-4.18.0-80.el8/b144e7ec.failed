net_sched: remove unused parameter for tcf_action_delete()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit b144e7ec51a132eac00a68bf897b6349d810022f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/b144e7ec.failed

Fixes: 16af6067392c ("net: sched: implement reference counted action release")
	Cc: Jiri Pirko <jiri@mellanox.com>
	Cc: Vlad Buslov <vladbu@mellanox.com>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b144e7ec51a132eac00a68bf897b6349d810022f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_api.c
diff --cc net/sched/act_api.c
index 798bd0da5ca2,ba55226928a3..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -1105,8 -1177,37 +1105,40 @@@ err_out
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static int tcf_action_delete(struct net *net, struct tc_action *actions[])
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < TCA_ACT_MAX_PRIO && actions[i]; i++) {
+ 		struct tc_action *a = actions[i];
+ 		const struct tc_action_ops *ops = a->ops;
+ 		/* Actions can be deleted concurrently so we must save their
+ 		 * type and id to search again after reference is released.
+ 		 */
+ 		struct tcf_idrinfo *idrinfo = a->idrinfo;
+ 		u32 act_index = a->tcfa_index;
+ 
+ 		if (tcf_action_put(a)) {
+ 			/* last reference, action was deleted concurrently */
+ 			module_put(ops->owner);
+ 		} else  {
+ 			int ret;
+ 
+ 			/* now do the delete */
+ 			ret = tcf_idr_delete_index(idrinfo, act_index);
+ 			if (ret < 0)
+ 				return ret;
+ 		}
+ 		actions[i] = NULL;
+ 	}
+ 	return 0;
+ }
+ 
++>>>>>>> b144e7ec51a1 (net_sched: remove unused parameter for tcf_action_delete())
  static int
 -tcf_del_notify(struct net *net, struct nlmsghdr *n, struct tc_action *actions[],
 +tcf_del_notify(struct net *net, struct nlmsghdr *n, struct list_head *actions,
  	       u32 portid, size_t attr_size, struct netlink_ext_ack *extack)
  {
  	int ret;
@@@ -1125,7 -1226,7 +1157,11 @@@
  	}
  
  	/* now do the delete */
++<<<<<<< HEAD
 +	ret = tcf_action_destroy(actions, 0);
++=======
+ 	ret = tcf_action_delete(net, actions);
++>>>>>>> b144e7ec51a1 (net_sched: remove unused parameter for tcf_action_delete())
  	if (ret < 0) {
  		NL_SET_ERR_MSG(extack, "Failed to delete TC action");
  		kfree_skb(skb);
* Unmerged path net/sched/act_api.c
