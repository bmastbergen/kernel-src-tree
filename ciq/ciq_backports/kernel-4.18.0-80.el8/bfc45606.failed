IB/hfi1,PCI: Allow bus reset while probing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Dennis Dalessandro <dennis.dalessandro@intel.com>
commit bfc456060d0cbcf6902a436d358b60cb1534668c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/bfc45606.failed

Calling into the new API to reset the secondary bus results in a deadlock.
This occurs because the device/bus is already locked at probe time.
Reverting back to the old behavior while the API is improved.

Link: https://bugzilla.kernel.org/show_bug.cgi?id=200985
Fixes: c6a44ba950d1 ("PCI: Rename pci_try_reset_bus() to pci_reset_bus()")
Fixes: 409888e0966e ("IB/hfi1: Use pci_try_reset_bus() for initiating PCI Secondary Bus Reset")
	Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
	Cc: Sinan Kaya <okaya@codeaurora.org>
(cherry picked from commit bfc456060d0cbcf6902a436d358b60cb1534668c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci.c
diff --cc drivers/pci/pci.c
index fea04cba0bea,1835f3a7aa8d..000000000000
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@@ -4542,7 -4547,7 +4542,11 @@@ int pci_reset_bridge_secondary_bus(stru
  
  	return pci_dev_wait(dev, "bus reset", PCIE_RESET_READY_POLL_MS);
  }
++<<<<<<< HEAD
 +EXPORT_SYMBOL_GPL(pci_reset_bridge_secondary_bus);
++=======
+ EXPORT_SYMBOL_GPL(pci_bridge_secondary_bus_reset);
++>>>>>>> bfc456060d0c (IB/hfi1,PCI: Allow bus reset while probing)
  
  static int pci_parent_bus_reset(struct pci_dev *dev, int probe)
  {
diff --git a/drivers/infiniband/hw/hfi1/pcie.c b/drivers/infiniband/hw/hfi1/pcie.c
index baf7c324f7b8..9e9f720a2827 100644
--- a/drivers/infiniband/hw/hfi1/pcie.c
+++ b/drivers/infiniband/hw/hfi1/pcie.c
@@ -898,14 +898,11 @@ static int trigger_sbr(struct hfi1_devdata *dd)
 		}
 
 	/*
-	 * A secondary bus reset (SBR) issues a hot reset to our device.
-	 * The following routine does a 1s wait after the reset is dropped
-	 * per PCI Trhfa (recovery time).  PCIe 3.0 section 6.6.1 -
-	 * Conventional Reset, paragraph 3, line 35 also says that a 1s
-	 * delay after a reset is required.  Per spec requirements,
-	 * the link is either working or not after that point.
+	 * This is an end around to do an SBR during probe time. A new API needs
+	 * to be implemented to have cleaner interface but this fixes the
+	 * current brokenness
 	 */
-	return pci_reset_bus(dev);
+	return pci_bridge_secondary_bus_reset(dev->bus->self);
 }
 
 /*
* Unmerged path drivers/pci/pci.c
diff --git a/include/linux/pci.h b/include/linux/pci.h
index dfff42c39ea7..9df2ec22aef3 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1232,6 +1232,9 @@ void pci_bus_remove_resources(struct pci_bus *bus);
 int devm_request_pci_bus_resources(struct device *dev,
 				   struct list_head *resources);
 
+/* Temporary until new and working PCI SBR API in place */
+int pci_bridge_secondary_bus_reset(struct pci_dev *dev);
+
 #define pci_bus_for_each_resource(bus, res, i)				\
 	for (i = 0;							\
 	    (res = pci_bus_resource_n(bus, i)) || i < PCI_BRIDGE_RESOURCE_NUM; \
