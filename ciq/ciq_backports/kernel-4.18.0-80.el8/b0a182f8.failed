x86/speculation/l1tf: Fix off-by-one error when warning that system has too much RAM

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Vlastimil Babka <vbabka@suse.cz>
commit b0a182f875689647b014bc01d36b340217792852
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/b0a182f8.failed

Two users have reported [1] that they have an "extremely unlikely" system
with more than MAX_PA/2 memory and L1TF mitigation is not effective. In
fact it's a CPU with 36bits phys limit (64GB) and 32GB memory, but due to
holes in the e820 map, the main region is almost 500MB over the 32GB limit:

[    0.000000] BIOS-e820: [mem 0x0000000100000000-0x000000081effffff] usable

Suggestions to use 'mem=32G' to enable the L1TF mitigation while losing the
500MB revealed, that there's an off-by-one error in the check in
l1tf_select_mitigation().

l1tf_pfn_limit() returns the last usable pfn (inclusive) and the range
check in the mitigation path does not take this into account.

Instead of amending the range check, make l1tf_pfn_limit() return the first
PFN which is over the limit which is less error prone. Adjust the other
users accordingly.

[1] https://bugzilla.suse.com/show_bug.cgi?id=1105536

Fixes: 17dbca119312 ("x86/speculation/l1tf: Add sysfs reporting for l1tf")
	Reported-by: George Anchev <studio@anchev.net>
	Reported-by: Christopher Snowhill <kode54@gmail.com>
	Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: "H . Peter Anvin" <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/20180823134418.17008-1-vbabka@suse.cz

(cherry picked from commit b0a182f875689647b014bc01d36b340217792852)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/processor.h
#	arch/x86/mm/init.c
diff --cc arch/x86/include/asm/processor.h
index cfd29ee8c3da,c24297268ebc..000000000000
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@@ -181,6 -181,11 +181,14 @@@ extern const struct seq_operations cpui
  
  extern void cpu_detect(struct cpuinfo_x86 *c);
  
++<<<<<<< HEAD
++=======
+ static inline unsigned long long l1tf_pfn_limit(void)
+ {
+ 	return BIT_ULL(boot_cpu_data.x86_phys_bits - 1 - PAGE_SHIFT);
+ }
+ 
++>>>>>>> b0a182f87568 (x86/speculation/l1tf: Fix off-by-one error when warning that system has too much RAM)
  extern void early_cpu_init(void);
  extern void identify_boot_cpu(void);
  extern void identify_secondary_cpu(struct cpuinfo_x86 *);
diff --cc arch/x86/mm/init.c
index 862191ed3d6e,63a6f9fcaf20..000000000000
--- a/arch/x86/mm/init.c
+++ b/arch/x86/mm/init.c
@@@ -891,7 -923,7 +891,11 @@@ unsigned long max_swapfile_size(void
  
  	if (boot_cpu_has_bug(X86_BUG_L1TF)) {
  		/* Limit the swap file size to MAX_PA/2 for L1TF workaround */
++<<<<<<< HEAD
 +		unsigned long l1tf_limit = l1tf_pfn_limit() + 1;
++=======
+ 		unsigned long long l1tf_limit = l1tf_pfn_limit();
++>>>>>>> b0a182f87568 (x86/speculation/l1tf: Fix off-by-one error when warning that system has too much RAM)
  		/*
  		 * We encode swap offsets also with 3 bits below those for pfn
  		 * which makes the usable limit higher.
* Unmerged path arch/x86/include/asm/processor.h
* Unmerged path arch/x86/mm/init.c
diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c
index f40ab8185d94..1e95d57760cf 100644
--- a/arch/x86/mm/mmap.c
+++ b/arch/x86/mm/mmap.c
@@ -257,7 +257,7 @@ bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot)
 	/* If it's real memory always allow */
 	if (pfn_valid(pfn))
 		return true;
-	if (pfn > l1tf_pfn_limit() && !capable(CAP_SYS_ADMIN))
+	if (pfn >= l1tf_pfn_limit() && !capable(CAP_SYS_ADMIN))
 		return false;
 	return true;
 }
