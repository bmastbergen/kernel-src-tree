net: aquantia: Implement rx/tx flow control ethtools callback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Igor Russkikh <igor.russkikh@aquantia.com>
commit 288551de45aa39a751bc03e7976919aa896c5093
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/288551de.failed

Runtime change of pause frame configuration (rx/tx flow control)
via ethtool.

	Signed-off-by: Igor Russkikh <igor.russkikh@aquantia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 288551de45aa39a751bc03e7976919aa896c5093)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
index f2d8063a2cef,37f8460647ac..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
@@@ -284,6 -285,104 +284,107 @@@ static int aq_ethtool_set_coalesce(stru
  	return aq_nic_update_interrupt_moderation_settings(aq_nic);
  }
  
++<<<<<<< HEAD
++=======
+ static void aq_ethtool_get_pauseparam(struct net_device *ndev,
+ 				      struct ethtool_pauseparam *pause)
+ {
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 
+ 	pause->autoneg = 0;
+ 
+ 	if (aq_nic->aq_hw->aq_nic_cfg->flow_control & AQ_NIC_FC_RX)
+ 		pause->rx_pause = 1;
+ 	if (aq_nic->aq_hw->aq_nic_cfg->flow_control & AQ_NIC_FC_TX)
+ 		pause->tx_pause = 1;
+ }
+ 
+ static int aq_ethtool_set_pauseparam(struct net_device *ndev,
+ 				     struct ethtool_pauseparam *pause)
+ {
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 	int err = 0;
+ 
+ 	if (!aq_nic->aq_fw_ops->set_flow_control)
+ 		return -EOPNOTSUPP;
+ 
+ 	if (pause->autoneg == AUTONEG_ENABLE)
+ 		return -EOPNOTSUPP;
+ 
+ 	if (pause->rx_pause)
+ 		aq_nic->aq_hw->aq_nic_cfg->flow_control |= AQ_NIC_FC_RX;
+ 	else
+ 		aq_nic->aq_hw->aq_nic_cfg->flow_control &= ~AQ_NIC_FC_RX;
+ 
+ 	if (pause->tx_pause)
+ 		aq_nic->aq_hw->aq_nic_cfg->flow_control |= AQ_NIC_FC_TX;
+ 	else
+ 		aq_nic->aq_hw->aq_nic_cfg->flow_control &= ~AQ_NIC_FC_TX;
+ 
+ 	err = aq_nic->aq_fw_ops->set_flow_control(aq_nic->aq_hw);
+ 
+ 	return err;
+ }
+ 
+ static void aq_get_ringparam(struct net_device *ndev,
+ 			     struct ethtool_ringparam *ring)
+ {
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 	struct aq_nic_cfg_s *aq_nic_cfg = aq_nic_get_cfg(aq_nic);
+ 
+ 	ring->rx_pending = aq_nic_cfg->rxds;
+ 	ring->tx_pending = aq_nic_cfg->txds;
+ 
+ 	ring->rx_max_pending = aq_nic_cfg->aq_hw_caps->rxds_max;
+ 	ring->tx_max_pending = aq_nic_cfg->aq_hw_caps->txds_max;
+ }
+ 
+ static int aq_set_ringparam(struct net_device *ndev,
+ 			    struct ethtool_ringparam *ring)
+ {
+ 	int err = 0;
+ 	bool ndev_running = false;
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 	struct aq_nic_cfg_s *aq_nic_cfg = aq_nic_get_cfg(aq_nic);
+ 	const struct aq_hw_caps_s *hw_caps = aq_nic_cfg->aq_hw_caps;
+ 
+ 	if (ring->rx_mini_pending || ring->rx_jumbo_pending) {
+ 		err = -EOPNOTSUPP;
+ 		goto err_exit;
+ 	}
+ 
+ 	if (netif_running(ndev)) {
+ 		ndev_running = true;
+ 		dev_close(ndev);
+ 	}
+ 
+ 	aq_nic_free_vectors(aq_nic);
+ 
+ 	aq_nic_cfg->rxds = max(ring->rx_pending, hw_caps->rxds_min);
+ 	aq_nic_cfg->rxds = min(aq_nic_cfg->rxds, hw_caps->rxds_max);
+ 	aq_nic_cfg->rxds = ALIGN(aq_nic_cfg->rxds, AQ_HW_RXD_MULTIPLE);
+ 
+ 	aq_nic_cfg->txds = max(ring->tx_pending, hw_caps->txds_min);
+ 	aq_nic_cfg->txds = min(aq_nic_cfg->txds, hw_caps->txds_max);
+ 	aq_nic_cfg->txds = ALIGN(aq_nic_cfg->txds, AQ_HW_TXD_MULTIPLE);
+ 
+ 	for (aq_nic->aq_vecs = 0; aq_nic->aq_vecs < aq_nic_cfg->vecs;
+ 	     aq_nic->aq_vecs++) {
+ 		aq_nic->aq_vec[aq_nic->aq_vecs] =
+ 		    aq_vec_alloc(aq_nic, aq_nic->aq_vecs, aq_nic_cfg);
+ 		if (unlikely(!aq_nic->aq_vec[aq_nic->aq_vecs])) {
+ 			err = -ENOMEM;
+ 			goto err_exit;
+ 		}
+ 	}
+ 	if (ndev_running)
+ 		err = dev_open(ndev);
+ 
+ err_exit:
+ 	return err;
+ }
+ 
++>>>>>>> 288551de45aa (net: aquantia: Implement rx/tx flow control ethtools callback)
  const struct ethtool_ops aq_ethtool_ops = {
  	.get_link            = aq_ethtool_get_link,
  	.get_regs_len        = aq_ethtool_get_regs_len,
@@@ -291,6 -390,10 +392,13 @@@
  	.get_drvinfo         = aq_ethtool_get_drvinfo,
  	.get_strings         = aq_ethtool_get_strings,
  	.get_rxfh_indir_size = aq_ethtool_get_rss_indir_size,
++<<<<<<< HEAD
++=======
+ 	.get_ringparam       = aq_get_ringparam,
+ 	.set_ringparam       = aq_set_ringparam,
+ 	.get_pauseparam      = aq_ethtool_get_pauseparam,
+ 	.set_pauseparam      = aq_ethtool_set_pauseparam,
++>>>>>>> 288551de45aa (net: aquantia: Implement rx/tx flow control ethtools callback)
  	.get_rxfh_key_size   = aq_ethtool_get_rss_key_size,
  	.get_rxfh            = aq_ethtool_get_rss,
  	.get_rxnfc           = aq_ethtool_get_rxnfc,
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index 05f82879ec0d..4f8e60b235d9 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@ -768,10 +768,14 @@ void aq_nic_get_link_ksettings(struct aq_nic_s *self,
 		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 						     100baseT_Full);
 
-	if (self->aq_nic_cfg.flow_control)
+	if (self->aq_nic_cfg.flow_control & AQ_NIC_FC_RX)
 		ethtool_link_ksettings_add_link_mode(cmd, advertising,
 						     Pause);
 
+	if (self->aq_nic_cfg.flow_control & AQ_NIC_FC_TX)
+		ethtool_link_ksettings_add_link_mode(cmd, advertising,
+						     Asym_Pause);
+
 	if (self->aq_nic_cfg.aq_hw_caps->media_type == AQ_HW_MEDIA_TYPE_FIBRE)
 		ethtool_link_ksettings_add_link_mode(cmd, advertising, FIBRE);
 	else
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
index 9d0a96dda8bc..e1feba5787d1 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
@@ -834,4 +834,5 @@ const struct aq_fw_ops aq_fw_1x_ops = {
 	.set_state = hw_atl_utils_mpi_set_state,
 	.update_link_status = hw_atl_utils_mpi_get_link_status,
 	.update_stats = hw_atl_utils_update_stats,
+	.set_flow_control = NULL,
 };
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
index a3e95f076bf0..c1b671e604fe 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
@@ -87,6 +87,19 @@ static int aq_fw2x_set_link_speed(struct aq_hw_s *self, u32 speed)
 	return 0;
 }
 
+static void aq_fw2x_set_mpi_flow_control(struct aq_hw_s *self, u32 *mpi_state)
+{
+	if (self->aq_nic_cfg->flow_control & AQ_NIC_FC_RX)
+		*mpi_state |= BIT(CAPS_HI_PAUSE);
+	else
+		*mpi_state &= ~BIT(CAPS_HI_PAUSE);
+
+	if (self->aq_nic_cfg->flow_control & AQ_NIC_FC_TX)
+		*mpi_state |= BIT(CAPS_HI_ASYMMETRIC_PAUSE);
+	else
+		*mpi_state &= ~BIT(CAPS_HI_ASYMMETRIC_PAUSE);
+}
+
 static int aq_fw2x_set_state(struct aq_hw_s *self,
 			     enum hal_atl_utils_fw_state_e state)
 {
@@ -95,6 +108,7 @@ static int aq_fw2x_set_state(struct aq_hw_s *self,
 	switch (state) {
 	case MPI_INIT:
 		mpi_state &= ~BIT(CAPS_HI_LINK_DROP);
+		aq_fw2x_set_mpi_flow_control(self, &mpi_state);
 		break;
 	case MPI_DEINIT:
 		mpi_state |= BIT(CAPS_HI_LINK_DROP);
@@ -201,6 +215,17 @@ static int aq_fw2x_update_stats(struct aq_hw_s *self)
 	return hw_atl_utils_update_stats(self);
 }
 
+static int aq_fw2x_set_flow_control(struct aq_hw_s *self)
+{
+	u32 mpi_state = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR);
+
+	aq_fw2x_set_mpi_flow_control(self, &mpi_state);
+
+	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR, mpi_state);
+
+	return 0;
+}
+
 const struct aq_fw_ops aq_fw_2x_ops = {
 	.init = aq_fw2x_init,
 	.deinit = aq_fw2x_deinit,
@@ -210,4 +235,5 @@ const struct aq_fw_ops aq_fw_2x_ops = {
 	.set_state = aq_fw2x_set_state,
 	.update_link_status = aq_fw2x_update_link_status,
 	.update_stats = aq_fw2x_update_stats,
+	.set_flow_control   = aq_fw2x_set_flow_control,
 };
