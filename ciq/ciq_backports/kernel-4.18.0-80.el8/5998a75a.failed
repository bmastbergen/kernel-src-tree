rcu: Switch last accelerate/advance to rcu_data structure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit 5998a75adbf4f85e63b06fa7723633cc84d7129b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/5998a75a.failed

This commit removes ->last_accelerate and ->last_advance_all from the
rcu_dynticks structure and updates the code to access them from the
rcu_data structure.

	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
(cherry picked from commit 5998a75adbf4f85e63b06fa7723633cc84d7129b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcu/tree.h
#	kernel/rcu/tree_plugin.h
diff --cc kernel/rcu/tree.h
index 971069b043e9,69bd6bec05bb..000000000000
--- a/kernel/rcu/tree.h
+++ b/kernel/rcu/tree.h
@@@ -50,11 -49,6 +50,14 @@@ struct rcu_dynticks 
  				    /* # times non-lazy CBs posted to CPU. */
  	unsigned long nonlazy_posted_snap;
  				    /* idle-period nonlazy_posted snapshot. */
++<<<<<<< HEAD
 +	unsigned long last_accelerate;
 +				    /* Last jiffy CBs were accelerated. */
 +	unsigned long last_advance_all;
 +				    /* Last jiffy CBs were all advanced. */
 +	int tick_nohz_enabled_snap; /* Previously seen value from sysfs. */
++=======
++>>>>>>> 5998a75adbf4 (rcu: Switch last accelerate/advance to rcu_data structure)
  #endif /* #ifdef CONFIG_RCU_FAST_NO_HZ */
  };
  
diff --cc kernel/rcu/tree_plugin.h
index 6d38152e918f,45708164ddf9..000000000000
--- a/kernel/rcu/tree_plugin.h
+++ b/kernel/rcu/tree_plugin.h
@@@ -1599,34 -1597,29 +1599,37 @@@ module_param(rcu_idle_lazy_gp_delay, in
  static bool __maybe_unused rcu_try_advance_all_cbs(void)
  {
  	bool cbs_ready = false;
- 	struct rcu_data *rdp;
- 	struct rcu_dynticks *rdtp = this_cpu_ptr(&rcu_dynticks);
+ 	struct rcu_data *rdp = this_cpu_ptr(&rcu_data);
  	struct rcu_node *rnp;
 +	struct rcu_state *rsp;
  
  	/* Exit early if we advanced recently. */
- 	if (jiffies == rdtp->last_advance_all)
+ 	if (jiffies == rdp->last_advance_all)
  		return false;
- 	rdtp->last_advance_all = jiffies;
+ 	rdp->last_advance_all = jiffies;
  
++<<<<<<< HEAD
 +	for_each_rcu_flavor(rsp) {
 +		rdp = this_cpu_ptr(&rcu_data);
 +		rnp = rdp->mynode;
++=======
+ 	rnp = rdp->mynode;
++>>>>>>> 5998a75adbf4 (rcu: Switch last accelerate/advance to rcu_data structure)
  
 -	/*
 -	 * Don't bother checking unless a grace period has
 -	 * completed since we last checked and there are
 -	 * callbacks not yet ready to invoke.
 -	 */
 -	if ((rcu_seq_completed_gp(rdp->gp_seq,
 -				  rcu_seq_current(&rnp->gp_seq)) ||
 -	     unlikely(READ_ONCE(rdp->gpwrap))) &&
 -	    rcu_segcblist_pend_cbs(&rdp->cblist))
 -		note_gp_changes(rdp);
 -
 -	if (rcu_segcblist_ready_cbs(&rdp->cblist))
 -		cbs_ready = true;
 +		/*
 +		 * Don't bother checking unless a grace period has
 +		 * completed since we last checked and there are
 +		 * callbacks not yet ready to invoke.
 +		 */
 +		if ((rcu_seq_completed_gp(rdp->gp_seq,
 +					  rcu_seq_current(&rnp->gp_seq)) ||
 +		     unlikely(READ_ONCE(rdp->gpwrap))) &&
 +		    rcu_segcblist_pend_cbs(&rdp->cblist))
 +			note_gp_changes(rdp);
 +
 +		if (rcu_segcblist_ready_cbs(&rdp->cblist))
 +			cbs_ready = true;
 +	}
  	return cbs_ready;
  }
  
@@@ -1724,13 -1717,10 +1728,18 @@@ static void rcu_prepare_for_idle(void
  	 * If we have not yet accelerated this jiffy, accelerate all
  	 * callbacks on this CPU.
  	 */
- 	if (rdtp->last_accelerate == jiffies)
+ 	if (rdp->last_accelerate == jiffies)
  		return;
++<<<<<<< HEAD
 +	rdtp->last_accelerate = jiffies;
 +	for_each_rcu_flavor(rsp) {
 +		rdp = this_cpu_ptr(&rcu_data);
 +		if (!rcu_segcblist_pend_cbs(&rdp->cblist))
 +			continue;
++=======
+ 	rdp->last_accelerate = jiffies;
+ 	if (rcu_segcblist_pend_cbs(&rdp->cblist)) {
++>>>>>>> 5998a75adbf4 (rcu: Switch last accelerate/advance to rcu_data structure)
  		rnp = rdp->mynode;
  		raw_spin_lock_rcu_node(rnp); /* irqs already disabled. */
  		needwake = rcu_accelerate_cbs(rnp, rdp);
@@@ -1777,10 -1768,10 +1786,10 @@@ static void print_cpu_stall_fast_no_hz(
  	unsigned long nlpd = rdtp->nonlazy_posted - rdtp->nonlazy_posted_snap;
  
  	sprintf(cp, "last_accelerate: %04lx/%04lx, nonlazy_posted: %ld, %c%c",
- 		rdtp->last_accelerate & 0xffff, jiffies & 0xffff,
+ 		rdp->last_accelerate & 0xffff, jiffies & 0xffff,
  		ulong2long(nlpd),
  		rdtp->all_lazy ? 'L' : '.',
 -		rdp->tick_nohz_enabled_snap ? '.' : 'D');
 +		rdtp->tick_nohz_enabled_snap ? '.' : 'D');
  }
  
  #else /* #ifdef CONFIG_RCU_FAST_NO_HZ */
* Unmerged path kernel/rcu/tree.h
* Unmerged path kernel/rcu/tree_plugin.h
