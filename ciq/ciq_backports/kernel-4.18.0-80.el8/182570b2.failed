net/mlx5e: Gather common netdev init/cleanup functionality in one place

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Feras Daoud <ferasda@mellanox.com>
commit 182570b26223deea0eaf09ba384c79a29d0a328f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/182570b2.failed

Introduce a helper init/cleanup function that initializes mlx5e generic
netdev private structure, and use them from all profiles init/cleanup
callbacks.

This patch will also be helpful to initialize/cleanup netdevs that are
not created by mlx5 driver, e.g: accelerated ipoib child netdevs.

Fixes: 26e59d8077a3 ("net/mlx5e: Implement mlx5e interface attach/detach callbacks")
	Signed-off-by: Feras Daoud <ferasda@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 182570b26223deea0eaf09ba384c79a29d0a328f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 11fe75e05d5e,376197c97e3b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -4730,7 -4757,9 +4730,13 @@@ static int mlx5e_nic_init(struct mlx5_c
  	struct mlx5e_priv *priv = netdev_priv(netdev);
  	int err;
  
++<<<<<<< HEAD
 +	priv->vxlan = mlx5_vxlan_create(mdev);
++=======
+ 	err = mlx5e_netdev_init(netdev, priv);
+ 	if (err)
+ 		return err;
++>>>>>>> 182570b26223 (net/mlx5e: Gather common netdev init/cleanup functionality in one place)
  
  	mlx5e_build_nic_netdev_priv(mdev, netdev, profile, ppriv);
  	err = mlx5e_ipsec_init(priv);
@@@ -4745,9 -4776,9 +4753,10 @@@
  
  static void mlx5e_nic_cleanup(struct mlx5e_priv *priv)
  {
 +	mlx5_vxlan_destroy(priv->vxlan);
  	mlx5e_tls_cleanup(priv);
  	mlx5e_ipsec_cleanup(priv);
+ 	mlx5e_netdev_cleanup(priv->netdev, priv);
  }
  
  static int mlx5e_init_nic_rx(struct mlx5e_priv *priv)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 8e3c5b4b90ab,6176e53c8b83..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -986,15 -1097,46 +989,27 @@@ static int mlx5e_init_rep(struct mlx5_c
  
  	INIT_DELAYED_WORK(&priv->update_stats_work, mlx5e_update_stats_work);
  
++<<<<<<< HEAD
++=======
+ 	mutex_init(&priv->state_lock);
+ 
++>>>>>>> 182570b26223 (net/mlx5e: Gather common netdev init/cleanup functionality in one place)
  	priv->channels.params.num_channels = profile->max_nch(mdev);
  
  	mlx5e_build_rep_params(mdev, &priv->channels.params, netdev->mtu);
  	mlx5e_build_rep_netdev(netdev);
  
  	mlx5e_timestamp_init(priv);
+ 
+ 	return 0;
+ }
+ 
+ static void mlx5e_cleanup_rep(struct mlx5e_priv *priv)
+ {
+ 	mlx5e_netdev_cleanup(priv->netdev, priv);
  }
  
 -static int mlx5e_create_rep_ttc_table(struct mlx5e_priv *priv)
 -{
 -	struct ttc_params ttc_params = {};
 -	int tt, err;
 -
 -	priv->fs.ns = mlx5_get_flow_namespace(priv->mdev,
 -					      MLX5_FLOW_NAMESPACE_KERNEL);
 -
 -	/* The inner_ttc in the ttc params is intentionally not set */
 -	ttc_params.any_tt_tirn = priv->direct_tir[0].tirn;
 -	mlx5e_set_ttc_ft_params(&ttc_params);
 -	for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++)
 -		ttc_params.indir_tirn[tt] = priv->indir_tir[tt].tirn;
 -
 -	err = mlx5e_create_ttc_table(priv, &ttc_params, &priv->fs.ttc);
 -	if (err) {
 -		netdev_err(priv->netdev, "Failed to create rep ttc table, err=%d\n", err);
 -		return err;
 -	}
 -	return 0;
 -}
 -
 -static int mlx5e_create_rep_vport_rx_rule(struct mlx5e_priv *priv)
 +static int mlx5e_init_rep_rx(struct mlx5e_priv *priv)
  {
  	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
  	struct mlx5e_rep_priv *rpriv = priv->ppriv;
@@@ -1051,14 -1234,9 +1066,15 @@@ static int mlx5e_init_rep_tx(struct mlx
  	return 0;
  }
  
 +static int mlx5e_get_rep_max_num_channels(struct mlx5_core_dev *mdev)
 +{
 +#define	MLX5E_PORT_REPRESENTOR_NCH 1
 +	return MLX5E_PORT_REPRESENTOR_NCH;
 +}
 +
  static const struct mlx5e_profile mlx5e_rep_profile = {
  	.init			= mlx5e_init_rep,
+ 	.cleanup		= mlx5e_cleanup_rep,
  	.init_rx		= mlx5e_init_rep_rx,
  	.cleanup_rx		= mlx5e_cleanup_rep_rx,
  	.init_tx		= mlx5e_init_rep_tx,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index 0e07e0bb17d3,3f544baab9c9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@@ -627,13 -649,38 +634,46 @@@ static int mlx5i_check_required_hca_cap
  	return 0;
  }
  
 -static void mlx5_rdma_netdev_free(struct net_device *netdev)
 +struct net_device *mlx5_rdma_netdev_alloc(struct mlx5_core_dev *mdev,
 +					  struct ib_device *ibdev,
 +					  const char *name,
 +					  void (*setup)(struct net_device *))
  {
++<<<<<<< HEAD
 +	const struct mlx5e_profile *profile;
 +	struct net_device *netdev;
++=======
+ 	struct mlx5e_priv *priv = mlx5i_epriv(netdev);
+ 	struct mlx5i_priv *ipriv = priv->ppriv;
+ 	const struct mlx5e_profile *profile = priv->profile;
+ 
+ 	mlx5e_detach_netdev(priv);
+ 	profile->cleanup(priv);
+ 
+ 	if (!ipriv->sub_interface) {
+ 		mlx5i_pkey_qpn_ht_cleanup(netdev);
+ 		mlx5e_destroy_mdev_resources(priv->mdev);
+ 	}
+ }
+ 
+ static bool mlx5_is_sub_interface(struct mlx5_core_dev *mdev)
+ {
+ 	return mdev->mlx5e_res.pdn != 0;
+ }
+ 
+ static const struct mlx5e_profile *mlx5_get_profile(struct mlx5_core_dev *mdev)
+ {
+ 	if (mlx5_is_sub_interface(mdev))
+ 		return mlx5i_pkey_get_profile();
+ 	return &mlx5i_nic_profile;
+ }
+ 
+ static int mlx5_rdma_setup_rn(struct ib_device *ibdev, u8 port_num,
+ 			      struct net_device *netdev, void *param)
+ {
+ 	struct mlx5_core_dev *mdev = (struct mlx5_core_dev *)param;
+ 	const struct mlx5e_profile *prof = mlx5_get_profile(mdev);
++>>>>>>> 182570b26223 (net/mlx5e: Gather common netdev init/cleanup functionality in one place)
  	struct mlx5i_priv *ipriv;
  	struct mlx5e_priv *epriv;
  	struct rdma_netdev *rn;
@@@ -669,11 -689,7 +709,15 @@@
  	ipriv = netdev_priv(netdev);
  	epriv = mlx5i_epriv(netdev);
  
++<<<<<<< HEAD
 +	epriv->wq = create_singlethread_workqueue("mlx5i");
 +	if (!epriv->wq)
 +		goto err_free_netdev;
 +
 +	ipriv->sub_interface = sub_interface;
++=======
+ 	ipriv->sub_interface = mlx5_is_sub_interface(mdev);
++>>>>>>> 182570b26223 (net/mlx5e: Gather common netdev init/cleanup functionality in one place)
  	if (!ipriv->sub_interface) {
  		err = mlx5i_pkey_qpn_ht_init(netdev);
  		if (err) {
@@@ -704,29 -723,31 +748,34 @@@
  
  destroy_ht:
  	mlx5i_pkey_qpn_ht_cleanup(netdev);
++<<<<<<< HEAD
 +destroy_wq:
 +	destroy_workqueue(epriv->wq);
 +err_free_netdev:
 +	free_netdev(netdev);
++=======
+ 	return err;
+ }
++>>>>>>> 182570b26223 (net/mlx5e: Gather common netdev init/cleanup functionality in one place)
  
 -int mlx5_rdma_rn_get_params(struct mlx5_core_dev *mdev,
 -			    struct ib_device *device,
 -			    struct rdma_netdev_alloc_params *params)
 -{
 -	int nch;
 -	int rc;
 -
 -	rc = mlx5i_check_required_hca_cap(mdev);
 -	if (rc)
 -		return rc;
 +	return NULL;
 +}
 +EXPORT_SYMBOL(mlx5_rdma_netdev_alloc);
  
 -	nch = mlx5_get_profile(mdev)->max_nch(mdev);
 +void mlx5_rdma_netdev_free(struct net_device *netdev)
 +{
 +	struct mlx5e_priv *priv = mlx5i_epriv(netdev);
 +	struct mlx5i_priv *ipriv = priv->ppriv;
 +	const struct mlx5e_profile *profile = priv->profile;
  
 -	*params = (struct rdma_netdev_alloc_params){
 -		.sizeof_priv = sizeof(struct mlx5i_priv) +
 -			       sizeof(struct mlx5e_priv),
 -		.txqs = nch * MLX5E_MAX_NUM_TC,
 -		.rxqs = nch,
 -		.param = mdev,
 -		.initialize_rdma_netdev = mlx5_rdma_setup_rn,
 -	};
 +	mlx5e_detach_netdev(priv);
 +	profile->cleanup(priv);
 +	destroy_workqueue(priv->wq);
  
 -	return 0;
 +	if (!ipriv->sub_interface) {
 +		mlx5i_pkey_qpn_ht_cleanup(netdev);
 +		mlx5e_destroy_mdev_resources(priv->mdev);
 +	}
 +	free_netdev(netdev);
  }
 -EXPORT_SYMBOL(mlx5_rdma_rn_get_params);
 +EXPORT_SYMBOL(mlx5_rdma_netdev_free);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 6ddc006bb555..200af52392e3 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -832,7 +832,7 @@ struct mlx5e_priv {
 };
 
 struct mlx5e_profile {
-	void	(*init)(struct mlx5_core_dev *mdev,
+	int	(*init)(struct mlx5_core_dev *mdev,
 			struct net_device *netdev,
 			const struct mlx5e_profile *profile, void *ppriv);
 	void	(*cleanup)(struct mlx5e_priv *priv);
@@ -1144,6 +1144,8 @@ int mlx5e_ethtool_flash_device(struct mlx5e_priv *priv,
 			       struct ethtool_flash *flash);
 
 /* mlx5e generic netdev management API */
+int mlx5e_netdev_init(struct net_device *netdev, struct mlx5e_priv *priv);
+void mlx5e_netdev_cleanup(struct net_device *netdev, struct mlx5e_priv *priv);
 struct net_device*
 mlx5e_create_netdev(struct mlx5_core_dev *mdev, const struct mlx5e_profile *profile,
 		    void *ppriv);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.h b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.h
index 445a1f7a7de4..9165ca567047 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.h
@@ -84,10 +84,11 @@ void mlx5i_dev_cleanup(struct net_device *dev);
 int mlx5i_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd);
 
 /* Parent profile functions */
-void mlx5i_init(struct mlx5_core_dev *mdev,
-		struct net_device *netdev,
-		const struct mlx5e_profile *profile,
-		void *ppriv);
+int mlx5i_init(struct mlx5_core_dev *mdev,
+	       struct net_device *netdev,
+	       const struct mlx5e_profile *profile,
+	       void *ppriv);
+void mlx5i_cleanup(struct mlx5e_priv *priv);
 
 /* Get child interface nic profile */
 const struct mlx5e_profile *mlx5i_pkey_get_profile(void);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib_vlan.c b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib_vlan.c
index e3e8a5f1ac9b..3dbfa532fda1 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib_vlan.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib_vlan.c
@@ -275,14 +275,17 @@ static int mlx5i_pkey_change_mtu(struct net_device *netdev, int new_mtu)
 }
 
 /* Called directly after IPoIB netdevice was created to initialize SW structs */
-static void mlx5i_pkey_init(struct mlx5_core_dev *mdev,
-			     struct net_device *netdev,
-			     const struct mlx5e_profile *profile,
-			     void *ppriv)
+static int mlx5i_pkey_init(struct mlx5_core_dev *mdev,
+			   struct net_device *netdev,
+			   const struct mlx5e_profile *profile,
+			   void *ppriv)
 {
 	struct mlx5e_priv *priv  = mlx5i_epriv(netdev);
+	int err;
 
-	mlx5i_init(mdev, netdev, profile, ppriv);
+	err = mlx5i_init(mdev, netdev, profile, ppriv);
+	if (err)
+		return err;
 
 	/* Override parent ndo */
 	netdev->netdev_ops = &mlx5i_pkey_netdev_ops;
@@ -292,12 +295,14 @@ static void mlx5i_pkey_init(struct mlx5_core_dev *mdev,
 
 	/* Use dummy rqs */
 	priv->channels.params.log_rq_mtu_frames = MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE;
+
+	return 0;
 }
 
 /* Called directly before IPoIB netdevice is destroyed to cleanup SW structs */
 static void mlx5i_pkey_cleanup(struct mlx5e_priv *priv)
 {
-	/* Do nothing .. */
+	mlx5i_cleanup(priv);
 }
 
 static int mlx5i_pkey_init_tx(struct mlx5e_priv *priv)
