iommu: Add config option to set passthrough as default

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Olof Johansson <olof@lixom.net>
commit 58d1131777a4b7c228267b809bd88f7be66edcfb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/58d11317.failed

This allows the default behavior to be controlled by a kernel config
option instead of changing the commandline for the kernel to include
"iommu.passthrough=on" or "iommu=pt" on machines where this is desired.

Likewise, for machines where this config option is enabled, it can be
disabled at boot time with "iommu.passthrough=off" or "iommu=nopt".

Also corrected iommu=pt documentation for IA-64, since it has no code that
parses iommu= at all.

	Signed-off-by: Olof Johansson <olof@lixom.net>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 58d1131777a4b7c228267b809bd88f7be66edcfb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/Kconfig
diff --cc drivers/iommu/Kconfig
index 07a52a366a79,08c957759e74..000000000000
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@@ -60,6 -60,27 +60,30 @@@ config IOMMU_IO_PGTABLE_ARMV7S_SELFTES
  
  endmenu
  
++<<<<<<< HEAD
++=======
+ config IOMMU_DEBUGFS
+ 	bool "Export IOMMU internals in DebugFS"
+ 	depends on DEBUG_FS
+ 	help
+ 	  Allows exposure of IOMMU device internals. This option enables
+ 	  the use of debugfs by IOMMU drivers as required. Devices can,
+ 	  at initialization time, cause the IOMMU code to create a top-level
+ 	  debug/iommu directory, and then populate a subdirectory with
+ 	  entries as required.
+ 
+ config IOMMU_DEFAULT_PASSTHROUGH
+ 	bool "IOMMU passthrough by default"
+ 	depends on IOMMU_API
+         help
+ 	  Enable passthrough by default, removing the need to pass in
+ 	  iommu.passthrough=on or iommu=pt through command line. If this
+ 	  is enabled, you can still disable with iommu.passthrough=off
+ 	  or iommu=nopt depending on the architecture.
+ 
+ 	  If unsure, say N here.
+ 
++>>>>>>> 58d1131777a4 (iommu: Add config option to set passthrough as default)
  config IOMMU_IOVA
  	tristate
  
diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 8059a56ef18f..a284e22316de 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -1735,7 +1735,8 @@
 		merge
 		nomerge
 		soft
-		pt		[x86, IA-64]
+		pt		[x86]
+		nopt		[x86]
 		nobypass	[PPC/POWERNV]
 			Disable IOMMU bypass, using IOMMU for PCI devices.
 
diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c
index acfd04121da3..7ba73fe0d917 100644
--- a/arch/x86/kernel/pci-dma.c
+++ b/arch/x86/kernel/pci-dma.c
@@ -40,8 +40,14 @@ int iommu_detected __read_mostly = 0;
  * devices and allow every device to access to whole physical memory. This is
  * useful if a user wants to use an IOMMU only for KVM device assignment to
  * guests and not for driver dma translation.
+ * It is also possible to disable by default in kernel config, and enable with
+ * iommu=nopt at boot time.
  */
+#ifdef CONFIG_IOMMU_DEFAULT_PASSTHROUGH
+int iommu_pass_through __read_mostly = 1;
+#else
 int iommu_pass_through __read_mostly;
+#endif
 
 extern struct iommu_table_entry __iommu_table[], __iommu_table_end[];
 
@@ -135,6 +141,8 @@ static __init int iommu_setup(char *p)
 #endif
 		if (!strncmp(p, "pt", 2))
 			iommu_pass_through = 1;
+		if (!strncmp(p, "nopt", 4))
+			iommu_pass_through = 0;
 
 		gart_parse_options(p);
 
* Unmerged path drivers/iommu/Kconfig
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index 63b37563db7e..ab8fc54467e0 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -36,7 +36,11 @@
 
 static struct kset *iommu_group_kset;
 static DEFINE_IDA(iommu_group_ida);
+#ifdef CONFIG_IOMMU_DEFAULT_PASSTHROUGH
+static unsigned int iommu_def_domain_type = IOMMU_DOMAIN_IDENTITY;
+#else
 static unsigned int iommu_def_domain_type = IOMMU_DOMAIN_DMA;
+#endif
 
 struct iommu_callback_data {
 	const struct iommu_ops *ops;
