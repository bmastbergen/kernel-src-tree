blkcg: update blkg_lookup_create() to do locking

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Dennis Zhou <dennis@kernel.org>
commit b978962ad4f7f9c06e5aa07b2a9b22f6d600456c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/b978962a.failed

To know when to create a blkg, the general pattern is to do a
blkg_lookup() and if that fails, lock and do the lookup again, and if
that fails finally create. It doesn't make much sense for everyone who
wants to do creation to write this themselves.

This changes blkg_lookup_create() to do locking and implement this
pattern. The old blkg_lookup_create() is renamed to
__blkg_lookup_create().  If a call site wants to do its own error
handling or already owns the queue lock, they can use
__blkg_lookup_create(). This will be used in upcoming patches.

	Signed-off-by: Dennis Zhou <dennis@kernel.org>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Acked-by: Tejun Heo <tj@kernel.org>
	Reviewed-by: Liu Bo <bo.liu@linux.alibaba.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b978962ad4f7f9c06e5aa07b2a9b22f6d600456c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-cgroup.c
#	block/blk-iolatency.c
#	include/linux/blk-cgroup.h
diff --cc block/blk-cgroup.c
index 301ed0447460,b421a9457e05..000000000000
--- a/block/blk-cgroup.c
+++ b/block/blk-cgroup.c
@@@ -303,22 -293,26 +303,45 @@@ struct blkcg_gq *__blkg_lookup_create(s
  	}
  }
  
++<<<<<<< HEAD
 +static void blkg_pd_offline(struct blkcg_gq *blkg)
 +{
 +	int i;
 +
 +	lockdep_assert_held(blkg->q->queue_lock);
 +	lockdep_assert_held(&blkg->blkcg->lock);
 +
 +	for (i = 0; i < BLKCG_MAX_POLS; i++) {
 +		struct blkcg_policy *pol = blkcg_policy[i];
 +
 +		if (blkg->pd[i] && !blkg->pd[i]->offline &&
 +		    pol->pd_offline_fn) {
 +			pol->pd_offline_fn(blkg->pd[i]);
 +			blkg->pd[i]->offline = true;
 +		}
 +	}
++=======
+ /**
+  * blkg_lookup_create - find or create a blkg
+  * @blkcg: target block cgroup
+  * @q: target request_queue
+  *
+  * This looks up or creates the blkg representing the unique pair
+  * of the blkcg and the request_queue.
+  */
+ struct blkcg_gq *blkg_lookup_create(struct blkcg *blkcg,
+ 				    struct request_queue *q)
+ {
+ 	struct blkcg_gq *blkg = blkg_lookup(blkcg, q);
+ 
+ 	if (unlikely(!blkg)) {
+ 		spin_lock_irq(&q->queue_lock);
+ 		blkg = __blkg_lookup_create(blkcg, q);
+ 		spin_unlock_irq(&q->queue_lock);
+ 	}
+ 
+ 	return blkg;
++>>>>>>> b978962ad4f7 (blkcg: update blkg_lookup_create() to do locking)
  }
  
  static void blkg_destroy(struct blkcg_gq *blkg)
diff --cc block/blk-iolatency.c
index 171f7ae1a396,e6f68f15dee9..000000000000
--- a/block/blk-iolatency.c
+++ b/block/blk-iolatency.c
@@@ -398,11 -485,11 +398,16 @@@ static void blkcg_iolatency_throttle(st
  	blkcg = bio_blkcg(bio);
  	blkg = blkg_lookup(blkcg, q);
  	if (unlikely(!blkg)) {
++<<<<<<< HEAD
 +		spin_lock_irq(q->queue_lock);
 +		blkg = blkg_lookup_create(blkcg, q);
++=======
+ 		spin_lock_irq(&q->queue_lock);
+ 		blkg = __blkg_lookup_create(blkcg, q);
++>>>>>>> b978962ad4f7 (blkcg: update blkg_lookup_create() to do locking)
  		if (IS_ERR(blkg))
  			blkg = NULL;
 -		spin_unlock_irq(&q->queue_lock);
 +		spin_unlock_irq(q->queue_lock);
  	}
  	if (!blkg)
  		goto out;
diff --cc include/linux/blk-cgroup.h
index 8bf2308b920c,b3b1a8187d23..000000000000
--- a/include/linux/blk-cgroup.h
+++ b/include/linux/blk-cgroup.h
@@@ -852,11 -800,11 +854,16 @@@ static inline bool blkcg_bio_issue_chec
  
  	blkg = blkg_lookup(blkcg, q);
  	if (unlikely(!blkg)) {
++<<<<<<< HEAD
 +		spin_lock_irq(q->queue_lock);
 +		blkg = blkg_lookup_create(blkcg, q);
++=======
+ 		spin_lock_irq(&q->queue_lock);
+ 		blkg = __blkg_lookup_create(blkcg, q);
++>>>>>>> b978962ad4f7 (blkcg: update blkg_lookup_create() to do locking)
  		if (IS_ERR(blkg))
  			blkg = NULL;
 -		spin_unlock_irq(&q->queue_lock);
 +		spin_unlock_irq(q->queue_lock);
  	}
  
  	throtl = blk_throtl_bio(q, blkg, bio);
* Unmerged path block/blk-cgroup.c
* Unmerged path block/blk-iolatency.c
* Unmerged path include/linux/blk-cgroup.h
