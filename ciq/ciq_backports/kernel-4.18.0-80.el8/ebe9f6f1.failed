acpi/nfit: Fix bus command validation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Dan Williams <dan.j.williams@intel.com>
commit ebe9f6f19d80d8978d16078dff3d5bd93ad8d102
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/ebe9f6f1.failed

Commit 11189c1089da "acpi/nfit: Fix command-supported detection" broke
ND_CMD_CALL for bus-level commands. The "func = cmd" assumption is only
valid for:

    ND_CMD_ARS_CAP
    ND_CMD_ARS_START
    ND_CMD_ARS_STATUS
    ND_CMD_CLEAR_ERROR

The function number otherwise needs to be pulled from the command
payload for:

    NFIT_CMD_TRANSLATE_SPA
    NFIT_CMD_ARS_INJECT_SET
    NFIT_CMD_ARS_INJECT_CLEAR
    NFIT_CMD_ARS_INJECT_GET

Update cmd_to_func() for the bus case and call it in the common path.

Fixes: 11189c1089da ("acpi/nfit: Fix command-supported detection")
	Cc: <stable@vger.kernel.org>
	Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
	Reported-by: Grzegorz Burzynski <grzegorz.burzynski@intel.com>
	Tested-by: Jeff Moyer <jmoyer@redhat.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit ebe9f6f19d80d8978d16078dff3d5bd93ad8d102)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/nfit/core.c
diff --cc drivers/acpi/nfit/core.c
index 69ab41fe34fc,c34c595d6bb0..000000000000
--- a/drivers/acpi/nfit/core.c
+++ b/drivers/acpi/nfit/core.c
@@@ -391,6 -398,47 +391,50 @@@ static u8 nfit_dsm_revid(unsigned famil
  	return id;
  }
  
++<<<<<<< HEAD
++=======
+ static bool payload_dumpable(struct nvdimm *nvdimm, unsigned int func)
+ {
+ 	struct nfit_mem *nfit_mem = nvdimm_provider_data(nvdimm);
+ 
+ 	if (nfit_mem && nfit_mem->family == NVDIMM_FAMILY_INTEL
+ 			&& func >= NVDIMM_INTEL_GET_SECURITY_STATE
+ 			&& func <= NVDIMM_INTEL_MASTER_SECURE_ERASE)
+ 		return IS_ENABLED(CONFIG_NFIT_SECURITY_DEBUG);
+ 	return true;
+ }
+ 
+ static int cmd_to_func(struct nfit_mem *nfit_mem, unsigned int cmd,
+ 		struct nd_cmd_pkg *call_pkg)
+ {
+ 	if (call_pkg) {
+ 		int i;
+ 
+ 		if (nfit_mem && nfit_mem->family != call_pkg->nd_family)
+ 			return -ENOTTY;
+ 
+ 		for (i = 0; i < ARRAY_SIZE(call_pkg->nd_reserved2); i++)
+ 			if (call_pkg->nd_reserved2[i])
+ 				return -EINVAL;
+ 		return call_pkg->nd_command;
+ 	}
+ 
+ 	/* In the !call_pkg case, bus commands == bus functions */
+ 	if (!nfit_mem)
+ 		return cmd;
+ 
+ 	/* Linux ND commands == NVDIMM_FAMILY_INTEL function numbers */
+ 	if (nfit_mem->family == NVDIMM_FAMILY_INTEL)
+ 		return cmd;
+ 
+ 	/*
+ 	 * Force function number validation to fail since 0 is never
+ 	 * published as a valid function in dsm_mask.
+ 	 */
+ 	return 0;
+ }
+ 
++>>>>>>> ebe9f6f19d80 (acpi/nfit: Fix bus command validation)
  int acpi_nfit_ctl(struct nvdimm_bus_descriptor *nd_desc, struct nvdimm *nvdimm,
  		unsigned int cmd, void *buf, unsigned int buf_len, int *cmd_rc)
  {
@@@ -410,16 -457,13 +454,22 @@@
  
  	if (cmd_rc)
  		*cmd_rc = -EINVAL;
 +	func = cmd;
 +	if (cmd == ND_CMD_CALL) {
 +		call_pkg = buf;
 +		func = call_pkg->nd_command;
 +
 +		for (i = 0; i < ARRAY_SIZE(call_pkg->nd_reserved2); i++)
 +			if (call_pkg->nd_reserved2[i])
 +				return -EINVAL;
 +	}
  
+ 	if (cmd == ND_CMD_CALL)
+ 		call_pkg = buf;
+ 	func = cmd_to_func(nfit_mem, cmd, call_pkg);
+ 	if (func < 0)
+ 		return func;
+ 
  	if (nvdimm) {
  		struct acpi_device *adev = nfit_mem->adev;
  
* Unmerged path drivers/acpi/nfit/core.c
