rcu: Eliminate RCU-barrier use of rsp

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit ec9f5835f74cba5cc2285d3032bb2b16afc312c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/ec9f5835.failed

Now that there is only one rcu_state structure, there is less point
in maintaining a pointer to it.  This commit therefore replaces rsp
with &rcu_state in rcu_barrier_callback(), rcu_barrier_func(), and
_rcu_barrier().

	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
(cherry picked from commit ec9f5835f74cba5cc2285d3032bb2b16afc312c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/rcu/tree.c
diff --cc kernel/rcu/tree.c
index a0aff61f4663,ce5fb177a0f7..000000000000
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@@ -3151,14 -3129,12 +3151,21 @@@ static void _rcu_barrier_trace(const ch
   */
  static void rcu_barrier_callback(struct rcu_head *rhp)
  {
++<<<<<<< HEAD
 +	struct rcu_data *rdp = container_of(rhp, struct rcu_data, barrier_head);
 +	struct rcu_state *rsp = rdp->rsp;
 +
 +	if (atomic_dec_and_test(&rsp->barrier_cpu_count)) {
 +		_rcu_barrier_trace(TPS("LastCB"), -1, rsp->barrier_sequence);
 +		complete(&rsp->barrier_completion);
++=======
+ 	if (atomic_dec_and_test(&rcu_state.barrier_cpu_count)) {
+ 		_rcu_barrier_trace(TPS("LastCB"), -1,
+ 				   rcu_state.barrier_sequence);
+ 		complete(&rcu_state.barrier_completion);
++>>>>>>> ec9f5835f74c (rcu: Eliminate RCU-barrier use of rsp)
  	} else {
- 		_rcu_barrier_trace(TPS("CB"), -1, rsp->barrier_sequence);
+ 		_rcu_barrier_trace(TPS("CB"), -1, rcu_state.barrier_sequence);
  	}
  }
  
* Unmerged path kernel/rcu/tree.c
