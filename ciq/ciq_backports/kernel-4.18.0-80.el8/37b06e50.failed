IB/mlx5: Fix implicit ODP interrupted page fault

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Artemy Kovalyov <artemyko@mellanox.com>
commit 37b06e5078975bb4efe3cbd91e254112851b125f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/37b06e50.failed

Since any page fault may be interrupted by a MMU invalidation and implicit
leaf MR may be released during this process. The check for parent value
is unreliable condition for an implicit MR.
Use other condition that we can rely on to determine if MR is implicit.

Fixes: b4cfe447d47b ("IB/mlx5: Implement on demand paging by adding support for MMU notifiers")
	Signed-off-by: Artemy Kovalyov <artemyko@mellanox.com>
	Signed-off-by: Moni Shoua <monis@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 37b06e5078975bb4efe3cbd91e254112851b125f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/odp.c
diff --cc drivers/infiniband/hw/mlx5/odp.c
index 5cec0decfbc2,4dc6cc640ce0..000000000000
--- a/drivers/infiniband/hw/mlx5/odp.c
+++ b/drivers/infiniband/hw/mlx5/odp.c
@@@ -497,23 -506,23 +497,26 @@@ void mlx5_ib_free_implicit_mr(struct ml
  static int pagefault_mr(struct mlx5_ib_dev *dev, struct mlx5_ib_mr *mr,
  			u64 io_virt, size_t bcnt, u32 *bytes_mapped)
  {
++<<<<<<< HEAD
++=======
+ 	int npages = 0, current_seq, page_shift, ret, np;
+ 	bool implicit = false;
+ 	struct ib_umem_odp *odp_mr = to_ib_umem_odp(mr->umem);
++>>>>>>> 37b06e507897 (IB/mlx5: Fix implicit ODP interrupted page fault)
  	u64 access_mask = ODP_READ_ALLOWED_BIT;
- 	int npages = 0, page_shift, np;
  	u64 start_idx, page_mask;
  	struct ib_umem_odp *odp;
- 	int current_seq;
  	size_t size;
- 	int ret;
  
 -	if (!odp_mr->page_list) {
 +	if (!mr->umem->odp_data->page_list) {
  		odp = implicit_mr_get_data(mr, io_virt, bcnt);
  
  		if (IS_ERR(odp))
  			return PTR_ERR(odp);
  		mr = odp->private;
- 
+ 		implicit = true;
  	} else {
 -		odp = odp_mr;
 +		odp = mr->umem->odp_data;
  	}
  
  next_mr:
* Unmerged path drivers/infiniband/hw/mlx5/odp.c
