dma-direct: reject highmem pages from dma_alloc_from_contiguous

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 704f2c20eaa566f6906e8812b6e2115889bd753d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/704f2c20.failed

dma_alloc_from_contiguous can return highmem pages depending on the
setup, which a plain non-remapping DMA allocator can't handle.  Detect
this case and fail the allocation.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
(cherry picked from commit 704f2c20eaa566f6906e8812b6e2115889bd753d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/dma/direct.c
diff --cc kernel/dma/direct.c
index a0ae9e05e04e,c49849bcced6..000000000000
--- a/kernel/dma/direct.c
+++ b/kernel/dma/direct.c
@@@ -108,11 -149,34 +108,27 @@@ again
  		}
  	}
  
 -	return page;
 -}
 -
 -void *dma_direct_alloc_pages(struct device *dev, size_t size,
 -		dma_addr_t *dma_handle, gfp_t gfp, unsigned long attrs)
 -{
 -	struct page *page;
 -	void *ret;
 -
 -	page = __dma_direct_alloc_pages(dev, size, dma_handle, gfp, attrs);
  	if (!page)
  		return NULL;
++<<<<<<< HEAD
++=======
+ 
+ 	if (PageHighMem(page)) {
+ 		/*
+ 		 * Depending on the cma= arguments and per-arch setup
+ 		 * dma_alloc_from_contiguous could return highmem pages.
+ 		 * Without remapping there is no way to return them here,
+ 		 * so log an error and fail.
+ 		 */
+ 		dev_info(dev, "Rejecting highmem page from CMA.\n");
+ 		__dma_direct_free_pages(dev, size, page);
+ 		return NULL;
+ 	}
+ 
++>>>>>>> 704f2c20eaa5 (dma-direct: reject highmem pages from dma_alloc_from_contiguous)
  	ret = page_address(page);
  	if (force_dma_unencrypted()) {
 -		set_memory_decrypted((unsigned long)ret, 1 << get_order(size));
 +		set_memory_decrypted((unsigned long)ret, 1 << page_order);
  		*dma_handle = __phys_to_dma(dev, page_to_phys(page));
  	} else {
  		*dma_handle = phys_to_dma(dev, page_to_phys(page));
* Unmerged path kernel/dma/direct.c
