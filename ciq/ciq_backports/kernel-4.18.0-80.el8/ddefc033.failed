PCI: Fix "try" semantics of bus and slot reset

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Alex Williamson <alex.williamson@redhat.com>
commit ddefc033eecf23f1e8b81d0663c5db965adf5516
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/ddefc033.failed

The commit referenced below introduced device locking around save and
restore of state for each device during a PCI bus "try" reset, making it
decidely non-"try" and prone to deadlock in the event that a device is
already locked.  Restore __pci_reset_bus() and __pci_reset_slot() to their
advertised locking semantics by pushing the save and restore functions into
the branch where the entire tree is already locked.  Extend the helper
function names with "_locked" and update the comment to reflect this
calling requirement.

Fixes: b014e96d1abb ("PCI: Protect pci_error_handlers->reset_notify() usage with device_lock()")
	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Sinan Kaya <okaya@kernel.org>
(cherry picked from commit ddefc033eecf23f1e8b81d0663c5db965adf5516)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci.c
diff --cc drivers/pci/pci.c
index 1da75bce7090,a3e8edd62a04..000000000000
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@@ -5217,11 -5273,11 +5217,15 @@@ static int __pci_reset_bus(struct pci_b
  	if (rc)
  		return rc;
  
- 	pci_bus_save_and_disable(bus);
- 
  	if (pci_bus_trylock(bus)) {
+ 		pci_bus_save_and_disable_locked(bus);
  		might_sleep();
++<<<<<<< HEAD
 +		pci_reset_bridge_secondary_bus(bus->self);
++=======
+ 		rc = pci_bridge_secondary_bus_reset(bus->self);
+ 		pci_bus_restore_locked(bus);
++>>>>>>> ddefc033eecf (PCI: Fix "try" semantics of bus and slot reset)
  		pci_bus_unlock(bus);
  	} else
  		rc = -EAGAIN;
* Unmerged path drivers/pci/pci.c
