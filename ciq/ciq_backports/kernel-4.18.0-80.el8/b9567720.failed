arm64: mm: Allow forcing all userspace addresses to 52-bit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Steve Capper <steve.capper@arm.com>
commit b9567720a1b8e739380e0241413606c056c57859
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/b9567720.failed

On arm64 52-bit VAs are provided to userspace when a hint is supplied to
mmap. This helps maintain compatibility with software that expects at
most 48-bit VAs to be returned.

In order to help identify software that has 48-bit VA assumptions, this
patch allows one to compile a kernel where 52-bit VAs are returned by
default on HW that supports it.

This feature is intended to be for development systems only.

	Signed-off-by: Steve Capper <steve.capper@arm.com>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit b9567720a1b8e739380e0241413606c056c57859)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/Kconfig
diff --cc arch/arm64/Kconfig
index fb2fa81c0abb,ca1f93233b22..000000000000
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@@ -1155,6 -1172,33 +1155,36 @@@ config ARM64_RAS_EXT
  	  and access the new registers if the system supports the extension.
  	  Platform RAS features may additionally depend on firmware support.
  
++<<<<<<< HEAD
++=======
+ config ARM64_CNP
+ 	bool "Enable support for Common Not Private (CNP) translations"
+ 	default y
+ 	depends on ARM64_PAN || !ARM64_SW_TTBR0_PAN
+ 	help
+ 	  Common Not Private (CNP) allows translation table entries to
+ 	  be shared between different PEs in the same inner shareable
+ 	  domain, so the hardware can use this fact to optimise the
+ 	  caching of such entries in the TLB.
+ 
+ 	  Selecting this option allows the CNP feature to be detected
+ 	  at runtime, and does not affect PEs that do not implement
+ 	  this feature.
+ 
+ config ARM64_FORCE_52BIT
+ 	bool "Force 52-bit virtual addresses for userspace"
+ 	depends on ARM64_52BIT_VA && EXPERT
+ 	help
+ 	  For systems with 52-bit userspace VAs enabled, the kernel will attempt
+ 	  to maintain compatibility with older software by providing 48-bit VAs
+ 	  unless a hint is supplied to mmap.
+ 
+ 	  This configuration option disables the 48-bit compatibility logic, and
+ 	  forces all userspace addresses to be 52-bit on HW that supports it. One
+ 	  should only enable this configuration option for stress testing userspace
+ 	  memory management code. If unsure say N here.
+ 
++>>>>>>> b9567720a1b8 (arm64: mm: Allow forcing all userspace addresses to 52-bit)
  endmenu
  
  config ARM64_SVE
* Unmerged path arch/arm64/Kconfig
diff --git a/arch/arm64/include/asm/elf.h b/arch/arm64/include/asm/elf.h
index bc9bd9e77d9d..6adc1a90e7e6 100644
--- a/arch/arm64/include/asm/elf.h
+++ b/arch/arm64/include/asm/elf.h
@@ -117,7 +117,11 @@
  * 64-bit, this is above 4GB to leave the entire 32-bit address
  * space open for things that want to use the area for 32-bit pointers.
  */
+#ifdef CONFIG_ARM64_FORCE_52BIT
+#define ELF_ET_DYN_BASE		(2 * TASK_SIZE_64 / 3)
+#else
 #define ELF_ET_DYN_BASE		(2 * DEFAULT_MAP_WINDOW_64 / 3)
+#endif /* CONFIG_ARM64_FORCE_52BIT */
 
 #ifndef __ASSEMBLY__
 
diff --git a/arch/arm64/include/asm/processor.h b/arch/arm64/include/asm/processor.h
index 516c433ecbba..8af133603ae9 100644
--- a/arch/arm64/include/asm/processor.h
+++ b/arch/arm64/include/asm/processor.h
@@ -73,8 +73,13 @@ extern u64 vabits_user;
 #define DEFAULT_MAP_WINDOW	DEFAULT_MAP_WINDOW_64
 #endif /* CONFIG_COMPAT */
 
-#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(DEFAULT_MAP_WINDOW / 4))
+#ifdef CONFIG_ARM64_FORCE_52BIT
+#define STACK_TOP_MAX		TASK_SIZE_64
+#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(TASK_SIZE / 4))
+#else
 #define STACK_TOP_MAX		DEFAULT_MAP_WINDOW_64
+#define TASK_UNMAPPED_BASE	(PAGE_ALIGN(DEFAULT_MAP_WINDOW / 4))
+#endif /* CONFIG_ARM64_FORCE_52BIT */
 
 #ifdef CONFIG_COMPAT
 #define AARCH32_VECTORS_BASE	0xffff0000
@@ -84,12 +89,14 @@ extern u64 vabits_user;
 #define STACK_TOP		STACK_TOP_MAX
 #endif /* CONFIG_COMPAT */
 
+#ifndef CONFIG_ARM64_FORCE_52BIT
 #define arch_get_mmap_end(addr) ((addr > DEFAULT_MAP_WINDOW) ? TASK_SIZE :\
 				DEFAULT_MAP_WINDOW)
 
 #define arch_get_mmap_base(addr, base) ((addr > DEFAULT_MAP_WINDOW) ? \
 					base + TASK_SIZE - DEFAULT_MAP_WINDOW :\
 					base)
+#endif /* CONFIG_ARM64_FORCE_52BIT */
 
 extern phys_addr_t arm64_dma_phys_limit;
 #define ARCH_LOW_ADDRESS_LIMIT	(arm64_dma_phys_limit - 1)
