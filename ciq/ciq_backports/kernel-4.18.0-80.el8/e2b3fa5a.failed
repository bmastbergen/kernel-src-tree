block: Remove bio->bi_ioc

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Damien Le Moal <damien.lemoal@wdc.com>
commit e2b3fa5af70c1e646270f6c7c799414f5e904d7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/e2b3fa5a.failed

bio->bi_ioc is never set so always NULL. Remove references to it in
bio_disassociate_task() and in rq_ioc() and delete this field from
struct bio. With this change, rq_ioc() always returns
current->io_context without the need for a bio argument. Further
simplify the code and make it more readable by also removing this
helper, which also allows to simplify blk_mq_sched_assign_ioc() by
removing its bio argument.

	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Adam Manzanares <adam.manzanares@wdc.com>
	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e2b3fa5af70c1e646270f6c7c799414f5e904d7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 52f967bfb7fc,174384eaace7..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -383,14 -385,14 +383,20 @@@ static struct request *blk_mq_get_reque
  		return NULL;
  	}
  
 -	rq = blk_mq_rq_ctx_init(data, tag, data->cmd_flags);
 -	if (!op_is_flush(data->cmd_flags)) {
 +	rq = blk_mq_rq_ctx_init(data, tag, op);
 +	if (!op_is_flush(op)) {
  		rq->elv.icq = NULL;
++<<<<<<< HEAD
 +		if (e && e->type->ops.mq.prepare_request) {
 +			if (e->type->icq_cache && rq_ioc(bio))
 +				blk_mq_sched_assign_ioc(rq, bio);
++=======
+ 		if (e && e->type->ops.prepare_request) {
+ 			if (e->type->icq_cache)
+ 				blk_mq_sched_assign_ioc(rq);
++>>>>>>> e2b3fa5af70c (block: Remove bio->bi_ioc)
  
 -			e->type->ops.prepare_request(rq, bio);
 +			e->type->ops.mq.prepare_request(rq, bio);
  			rq->rq_flags |= RQF_ELVPRIV;
  		}
  	}
diff --git a/block/bio.c b/block/bio.c
index a2dc254850ad..b7421ba270d8 100644
--- a/block/bio.c
+++ b/block/bio.c
@@ -2027,10 +2027,6 @@ int bio_associate_blkg(struct bio *bio, struct blkcg_gq *blkg)
  */
 void bio_disassociate_task(struct bio *bio)
 {
-	if (bio->bi_ioc) {
-		put_io_context(bio->bi_ioc);
-		bio->bi_ioc = NULL;
-	}
 	if (bio->bi_css) {
 		css_put(bio->bi_css);
 		bio->bi_css = NULL;
diff --git a/block/blk-core.c b/block/blk-core.c
index f000f658d70d..1cd6d5e50d63 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -1925,7 +1925,7 @@ unsigned int blk_plug_queued_count(struct request_queue *q)
 
 void blk_init_request_from_bio(struct request *req, struct bio *bio)
 {
-	struct io_context *ioc = rq_ioc(bio);
+	struct io_context *ioc = current->io_context;
 
 	if (bio->bi_opf & REQ_RAHEAD)
 		req->cmd_flags |= REQ_FAILFAST_MASK;
diff --git a/block/blk-mq-sched.c b/block/blk-mq-sched.c
index 51ff587cddb8..2e9161f88c0f 100644
--- a/block/blk-mq-sched.c
+++ b/block/blk-mq-sched.c
@@ -31,10 +31,10 @@ void blk_mq_sched_free_hctx_data(struct request_queue *q,
 }
 EXPORT_SYMBOL_GPL(blk_mq_sched_free_hctx_data);
 
-void blk_mq_sched_assign_ioc(struct request *rq, struct bio *bio)
+void blk_mq_sched_assign_ioc(struct request *rq)
 {
 	struct request_queue *q = rq->q;
-	struct io_context *ioc = rq_ioc(bio);
+	struct io_context *ioc = current->io_context;
 	struct io_cq *icq;
 
 	spin_lock_irq(q->queue_lock);
diff --git a/block/blk-mq-sched.h b/block/blk-mq-sched.h
index 8a9544203173..3b3cc4ad3ec8 100644
--- a/block/blk-mq-sched.h
+++ b/block/blk-mq-sched.h
@@ -8,7 +8,7 @@
 void blk_mq_sched_free_hctx_data(struct request_queue *q,
 				 void (*exit)(struct blk_mq_hw_ctx *));
 
-void blk_mq_sched_assign_ioc(struct request *rq, struct bio *bio);
+void blk_mq_sched_assign_ioc(struct request *rq);
 
 void blk_mq_sched_request_inserted(struct request *rq);
 bool blk_mq_sched_try_merge(struct request_queue *q, struct bio *bio,
* Unmerged path block/blk-mq.c
diff --git a/block/blk.h b/block/blk.h
index fc4461de2d5b..1bd7f1014480 100644
--- a/block/blk.h
+++ b/block/blk.h
@@ -413,22 +413,6 @@ void ioc_clear_queue(struct request_queue *q);
 
 int create_task_io_context(struct task_struct *task, gfp_t gfp_mask, int node);
 
-/**
- * rq_ioc - determine io_context for request allocation
- * @bio: request being allocated is for this bio (can be %NULL)
- *
- * Determine io_context to use for request allocation for @bio.  May return
- * %NULL if %current->io_context doesn't exist.
- */
-static inline struct io_context *rq_ioc(struct bio *bio)
-{
-#ifdef CONFIG_BLK_CGROUP
-	if (bio && bio->bi_ioc)
-		return bio->bi_ioc;
-#endif
-	return current->io_context;
-}
-
 /**
  * create_io_context - try to create task->io_context
  * @gfp_mask: allocation mask
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index dbdbfbd6a987..c0ba1a038ff3 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -174,10 +174,9 @@ struct bio {
 	void			*bi_private;
 #ifdef CONFIG_BLK_CGROUP
 	/*
-	 * Optional ioc and css associated with this bio.  Put on bio
+	 * Optional css associated with this bio.  Put on bio
 	 * release.  Read comment on top of bio_associate_current().
 	 */
-	struct io_context	*bi_ioc;
 	struct cgroup_subsys_state *bi_css;
 	struct blkcg_gq		*bi_blkg;
 	struct bio_issue	bi_issue;
