dm: set the static flush bio device on demand

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Dennis Zhou <dennis@kernel.org>
commit 892ad71f622bbf39c6de321d5ca9b0fdec237c24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/892ad71f.failed

The next patch changes the macro bio_set_dev() to associate a bio with a
blkg based on the device set. However, dm creates a static bio to be
used as the basis for cloning empty flush bios on creation. The
bio_set_dev() call in alloc_dev() will cause problems with the next
patch adding association to bio_set_dev() because the call is before the
bdev is associated with a gendisk (bd_disk is %NULL). To get around
this, set the device on the static bio every time and use that to clone
to the other bios.

	Signed-off-by: Dennis Zhou <dennis@kernel.org>
	Acked-by: Mike Snitzer <snitzer@redhat.com>
	Cc: Alasdair Kergon <agk@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 892ad71f622bbf39c6de321d5ca9b0fdec237c24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/bio.c
diff --cc block/bio.c
index 8d70c85b6b8f,41ebb3f8e2fc..000000000000
--- a/block/bio.c
+++ b/block/bio.c
@@@ -2009,7 -2009,22 +2009,26 @@@ int bio_associate_blkcg(struct bio *bio
  EXPORT_SYMBOL_GPL(bio_associate_blkcg);
  
  /**
++<<<<<<< HEAD
 + * bio_associate_blkg - associate a bio with the specified blkg
++=======
+  * bio_disassociate_blkg - puts back the blkg reference if associated
+  * @bio: target bio
+  *
+  * Helper to disassociate the blkg from @bio if a blkg is associated.
+  */
+ void bio_disassociate_blkg(struct bio *bio)
+ {
+ 	if (bio->bi_blkg) {
+ 		blkg_put(bio->bi_blkg);
+ 		bio->bi_blkg = NULL;
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(bio_disassociate_blkg);
+ 
+ /**
+  * __bio_associate_blkg - associate a bio with the a blkg
++>>>>>>> 892ad71f622b (dm: set the static flush bio device on demand)
   * @bio: target bio
   * @blkg: the blkg to associate
   *
* Unmerged path block/bio.c
diff --git a/drivers/md/dm.c b/drivers/md/dm.c
index 738568b6753c..c3ae437a6431 100644
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -1417,10 +1417,21 @@ static int __send_empty_flush(struct clone_info *ci)
 	unsigned target_nr = 0;
 	struct dm_target *ti;
 
+	/*
+	 * Empty flush uses a statically initialized bio, &md->flush_bio, as
+	 * the base for cloning.  However, blkg association requires that a
+	 * bdev is associated with a gendisk, which doesn't happen until the
+	 * bdev is opened.  So, blkg association is done at issue time of the
+	 * flush rather than when the device is created in alloc_dev().
+	 */
+	bio_set_dev(ci->bio, ci->io->md->bdev);
+
 	BUG_ON(bio_has_data(ci->bio));
 	while ((ti = dm_table_get_target(ci->map, target_nr++)))
 		__send_duplicate_bios(ci, ti, ti->num_flush_bios, NULL);
 
+	bio_disassociate_blkg(ci->bio);
+
 	return 0;
 }
 
@@ -1941,7 +1952,6 @@ static struct mapped_device *alloc_dev(int minor)
 		goto bad;
 
 	bio_init(&md->flush_bio, NULL, 0);
-	bio_set_dev(&md->flush_bio, md->bdev);
 	md->flush_bio.bi_opf = REQ_OP_WRITE | REQ_PREFLUSH | REQ_SYNC;
 
 	dm_stats_init(&md->stats);
