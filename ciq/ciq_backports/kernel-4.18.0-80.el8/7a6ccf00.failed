xfs: remove redundant remap partial EOF block checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-80.el8
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit 7a6ccf004e234c01fb2a11771de9837c9ff3d56d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-80.el8/7a6ccf00.failed

Now that we've moved the partial EOF block checks to the VFS helpers, we
can remove the redundant functionality from XFS.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Signed-off-by: Dave Chinner <david@fromorbit.com>

(cherry picked from commit 7a6ccf004e234c01fb2a11771de9837c9ff3d56d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_reflink.c
diff --cc fs/xfs/xfs_reflink.c
index c17089911875,bccc66316cc4..000000000000
--- a/fs/xfs/xfs_reflink.c
+++ b/fs/xfs/xfs_reflink.c
@@@ -1332,28 -1337,10 +1331,31 @@@ xfs_reflink_remap_prep
  		goto out_unlock;
  
  	ret = generic_remap_file_range_prep(file_in, pos_in, file_out, pos_out,
 -			len, remap_flags);
 -	if (ret < 0 || *len == 0)
 +			len, is_dedupe);
 +	if (ret <= 0)
  		goto out_unlock;
  
++<<<<<<< HEAD
 +	/*
 +	 * If the dedupe data matches, chop off the partial EOF block
 +	 * from the source file so we don't try to dedupe the partial
 +	 * EOF block.
 +	 */
 +	if (is_dedupe) {
 +		*len &= ~blkmask;
 +	} else if (*len & blkmask) {
 +		/*
 +		 * The user is attempting to share a partial EOF block,
 +		 * if it's inside the destination EOF then reject it.
 +		 */
 +		if (pos_out + *len < i_size_read(inode_out)) {
 +			ret = -EINVAL;
 +			goto out_unlock;
 +		}
 +	}
 +
++=======
++>>>>>>> 7a6ccf004e23 (xfs: remove redundant remap partial EOF block checks)
  	/* Attach dquots to dest inode before changing block map */
  	ret = xfs_qm_dqattach(dest);
  	if (ret)
* Unmerged path fs/xfs/xfs_reflink.c
