gfs2: Split gfs2_lm_withdraw into two functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.53.1.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit badb55ec208adc4c406ed084f486deb1f9f5baa0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.53.1.el7/badb55ec.failed

Split gfs2_lm_withdraw into a function that prints an error message and a
function that withdraws the filesystem.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit badb55ec208adc4c406ed084f486deb1f9f5baa0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/log.c
#	fs/gfs2/sys.c
#	fs/gfs2/util.c
#	fs/gfs2/util.h
diff --cc fs/gfs2/log.c
index 78f81ccc8357,c4c7c013f7a7..000000000000
--- a/fs/gfs2/log.c
+++ b/fs/gfs2/log.c
@@@ -156,6 -163,9 +156,12 @@@ restart
  			goto restart;
  	}
  	spin_unlock(&sdp->sd_ail_lock);
++<<<<<<< HEAD
++=======
+ 	blk_finish_plug(&plug);
+ 	if (withdraw)
+ 		gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  	trace_gfs2_ail_flush(sdp, wbc, 0);
  }
  
@@@ -225,6 -239,11 +231,14 @@@ static int gfs2_ail1_empty(struct gfs2_
  	ret = list_empty(&sdp->sd_ail1_list);
  	spin_unlock(&sdp->sd_ail_lock);
  
++<<<<<<< HEAD
++=======
+ 	if (withdraw) {
+ 		gfs2_lm(sdp, "fatal: I/O error(s)\n");
+ 		gfs2_withdraw(sdp);
+ 	}
+ 
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  	return ret;
  }
  
diff --cc fs/gfs2/sys.c
index 66e85f87e8c9,a2eae5c578d6..000000000000
--- a/fs/gfs2/sys.c
+++ b/fs/gfs2/sys.c
@@@ -135,12 -127,18 +135,18 @@@ static ssize_t withdraw_store(struct gf
  	if (!capable(CAP_SYS_ADMIN))
  		return -EPERM;
  
 -	error = kstrtoint(buf, 0, &val);
 -	if (error)
 -		return error;
 -
 -	if (val != 1)
 +	if (simple_strtol(buf, NULL, 0) != 1)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: withdrawing from cluster at user's request\n",
 +		sdp->sd_fsname);
++=======
+ 	gfs2_lm(sdp, "withdrawing from cluster at user's request\n");
+ 	gfs2_withdraw(sdp);
+ 
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  	return len;
  }
  
diff --cc fs/gfs2/util.c
index d62797b79ef2,322012e2064e..000000000000
--- a/fs/gfs2/util.c
+++ b/fs/gfs2/util.c
@@@ -31,24 -30,34 +31,50 @@@ mempool_t *gfs2_page_pool __read_mostly
  
  void gfs2_assert_i(struct gfs2_sbd *sdp)
  {
 -	fs_emerg(sdp, "fatal assertion failed\n");
 +	printk(KERN_EMERG "GFS2: fsid=%s: fatal assertion failed\n",
 +	       sdp->sd_fsname);
  }
  
++<<<<<<< HEAD
 +int gfs2_lm_withdraw(struct gfs2_sbd *sdp, char *fmt, ...)
 +{
 +	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
 +	const struct lm_lockops *lm = ls->ls_ops;
 +	va_list args;
++=======
+ void gfs2_lm(struct gfs2_sbd *sdp, const char *fmt, ...)
+ {
+ 	struct va_format vaf;
+ 	va_list args;
+ 
+ 	if (sdp->sd_args.ar_errors == GFS2_ERRORS_WITHDRAW &&
+ 	    test_bit(SDF_WITHDRAWN, &sdp->sd_flags))
+ 		return;
+ 
+ 	va_start(args, fmt);
+ 	vaf.fmt = fmt;
+ 	vaf.va = &args;
+ 	fs_err(sdp, "%pV", &vaf);
+ 	va_end(args);
+ }
+ 
+ int gfs2_withdraw(struct gfs2_sbd *sdp)
+ {
+ 	struct lm_lockstruct *ls = &sdp->sd_lockstruct;
+ 	const struct lm_lockops *lm = ls->ls_ops;
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  
  	if (sdp->sd_args.ar_errors == GFS2_ERRORS_WITHDRAW &&
 -	    test_and_set_bit(SDF_WITHDRAWN, &sdp->sd_flags))
 +	    test_and_set_bit(SDF_SHUTDOWN, &sdp->sd_flags))
  		return 0;
  
++<<<<<<< HEAD
 +	va_start(args, fmt);
 +	vprintk(fmt, args);
 +	va_end(args);
 +
++=======
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  	if (sdp->sd_args.ar_errors == GFS2_ERRORS_WITHDRAW) {
  		fs_err(sdp, "about to withdraw this file system\n");
  		BUG_ON(sdp->sd_args.ar_debug);
@@@ -83,11 -92,12 +109,20 @@@ int gfs2_assert_withdraw_i(struct gfs2_
  			   const char *function, char *file, unsigned int line)
  {
  	int me;
++<<<<<<< HEAD
 +	me = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: assertion \"%s\" failed\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname, assertion,
 +		sdp->sd_fsname, function, file, line);
++=======
+ 
+ 	gfs2_lm(sdp,
+ 		"fatal: assertion \"%s\" failed\n"
+ 		"   function = %s, file = %s, line = %u\n",
+ 		assertion, function, file, line);
+ 	me = gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  	dump_stack();
  	return (me) ? -1 : -2;
  }
@@@ -138,13 -145,10 +173,20 @@@ int gfs2_assert_warn_i(struct gfs2_sbd 
  int gfs2_consist_i(struct gfs2_sbd *sdp, int cluster_wide, const char *function,
  		   char *file, unsigned int line)
  {
++<<<<<<< HEAD
 +	int rv;
 +	rv = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: filesystem consistency error\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname,
 +		sdp->sd_fsname, function, file, line);
 +	return rv;
++=======
+ 	gfs2_lm(sdp,
+ 		"fatal: filesystem consistency error - function = %s, file = %s, line = %u\n",
+ 		function, file, line);
+ 	return gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  }
  
  /**
@@@ -157,16 -161,15 +199,28 @@@ int gfs2_consist_inode_i(struct gfs2_in
  			 const char *function, char *file, unsigned int line)
  {
  	struct gfs2_sbd *sdp = GFS2_SB(&ip->i_inode);
++<<<<<<< HEAD
 +	int rv;
 +	rv = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: filesystem consistency error\n"
 +		"GFS2: fsid=%s:   inode = %llu %llu\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname,
 +		sdp->sd_fsname, (unsigned long long)ip->i_no_formal_ino,
 +		(unsigned long long)ip->i_no_addr,
 +		sdp->sd_fsname, function, file, line);
 +	return rv;
++=======
+ 
+ 	gfs2_lm(sdp,
+ 		"fatal: filesystem consistency error\n"
+ 		"  inode = %llu %llu\n"
+ 		"  function = %s, file = %s, line = %u\n",
+ 		(unsigned long long)ip->i_no_formal_ino,
+ 		(unsigned long long)ip->i_no_addr,
+ 		function, file, line);
+ 	return gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  }
  
  /**
@@@ -179,17 -182,17 +233,31 @@@ int gfs2_consist_rgrpd_i(struct gfs2_rg
  			 const char *function, char *file, unsigned int line)
  {
  	struct gfs2_sbd *sdp = rgd->rd_sbd;
++<<<<<<< HEAD
 +	int rv;
 +
 +	gfs2_rgrp_dump(NULL, rgd->rd_gl);
 +	rv = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: filesystem consistency error\n"
 +		"GFS2: fsid=%s:   RG = %llu\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname,
 +		sdp->sd_fsname, (unsigned long long)rgd->rd_addr,
 +		sdp->sd_fsname, function, file, line);
 +	return rv;
++=======
+ 	char fs_id_buf[sizeof(sdp->sd_fsname) + 7];
+ 
+ 	sprintf(fs_id_buf, "fsid=%s: ", sdp->sd_fsname);
+ 	gfs2_rgrp_dump(NULL, rgd->rd_gl, fs_id_buf);
+ 	gfs2_lm(sdp,
+ 		"fatal: filesystem consistency error\n"
+ 		"  RG = %llu\n"
+ 		"  function = %s, file = %s, line = %u\n",
+ 		(unsigned long long)rgd->rd_addr,
+ 		function, file, line);
+ 	return gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  }
  
  /**
@@@ -203,13 -206,14 +271,24 @@@ int gfs2_meta_check_ii(struct gfs2_sbd 
  		       unsigned int line)
  {
  	int me;
++<<<<<<< HEAD
 +	me = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: invalid metadata block\n"
 +		"GFS2: fsid=%s:   bh = %llu (%s)\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname,
 +		sdp->sd_fsname, (unsigned long long)bh->b_blocknr, type,
 +		sdp->sd_fsname, function, file, line);
++=======
+ 
+ 	gfs2_lm(sdp,
+ 		"fatal: invalid metadata block\n"
+ 		"  bh = %llu (%s)\n"
+ 		"  function = %s, file = %s, line = %u\n",
+ 		(unsigned long long)bh->b_blocknr, type,
+ 		function, file, line);
+ 	me = gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  	return (me) ? -1 : -2;
  }
  
@@@ -224,13 -228,14 +303,24 @@@ int gfs2_metatype_check_ii(struct gfs2_
  			   char *file, unsigned int line)
  {
  	int me;
++<<<<<<< HEAD
 +	me = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: invalid metadata block\n"
 +		"GFS2: fsid=%s:   bh = %llu (type: exp=%u, found=%u)\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname,
 +		sdp->sd_fsname, (unsigned long long)bh->b_blocknr, type, t,
 +		sdp->sd_fsname, function, file, line);
++=======
+ 
+ 	gfs2_lm(sdp,
+ 		"fatal: invalid metadata block\n"
+ 		"  bh = %llu (type: exp=%u, found=%u)\n"
+ 		"  function = %s, file = %s, line = %u\n",
+ 		(unsigned long long)bh->b_blocknr, type, t,
+ 		function, file, line);
+ 	me = gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  	return (me) ? -1 : -2;
  }
  
@@@ -243,31 -248,30 +333,51 @@@
  int gfs2_io_error_i(struct gfs2_sbd *sdp, const char *function, char *file,
  		    unsigned int line)
  {
++<<<<<<< HEAD
 +	int rv;
 +	rv = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: I/O error\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname,
 +		sdp->sd_fsname, function, file, line);
 +	return rv;
++=======
+ 	gfs2_lm(sdp,
+ 		"fatal: I/O error\n"
+ 		"  function = %s, file = %s, line = %u\n",
+ 		function, file, line);
+ 	return gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  }
  
  /**
 - * gfs2_io_error_bh_i - Flag a buffer I/O error
 - * @withdraw: withdraw the filesystem
 + * gfs2_io_error_bh_i - Flag a buffer I/O error and withdraw
 + * Returns: -1 if this call withdrew the machine,
 + *          0 if it was already withdrawn
   */
  
 -void gfs2_io_error_bh_i(struct gfs2_sbd *sdp, struct buffer_head *bh,
 -			const char *function, char *file, unsigned int line,
 -			bool withdraw)
 +int gfs2_io_error_bh_i(struct gfs2_sbd *sdp, struct buffer_head *bh,
 +		       const char *function, char *file, unsigned int line)
  {
++<<<<<<< HEAD
 +	int rv;
 +	rv = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: I/O error\n"
 +		"GFS2: fsid=%s:   block = %llu\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname,
 +		sdp->sd_fsname, (unsigned long long)bh->b_blocknr,
 +		sdp->sd_fsname, function, file, line);
 +	return rv;
++=======
+ 	if (!gfs2_withdrawn(sdp))
+ 		fs_err(sdp,
+ 		       "fatal: I/O error\n"
+ 		       "  block = %llu\n"
+ 		       "  function = %s, file = %s, line = %u\n",
+ 		       (unsigned long long)bh->b_blocknr,
+ 		       function, file, line);
+ 	if (withdraw)
+ 		gfs2_withdraw(sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  }
 -
diff --cc fs/gfs2/util.h
index 136b196396ef,fdc218a28609..000000000000
--- a/fs/gfs2/util.h
+++ b/fs/gfs2/util.h
@@@ -164,7 -167,17 +164,13 @@@ static inline unsigned int gfs2_tune_ge
  #define gfs2_tune_get(sdp, field) \
  gfs2_tune_get_i(&(sdp)->sd_tune, &(sdp)->sd_tune.field)
  
++<<<<<<< HEAD
 +int gfs2_lm_withdraw(struct gfs2_sbd *sdp, char *fmt, ...);
++=======
+ __printf(2, 3)
+ void gfs2_lm(struct gfs2_sbd *sdp, const char *fmt, ...);
+ int gfs2_withdraw(struct gfs2_sbd *sdp);
++>>>>>>> badb55ec208a (gfs2: Split gfs2_lm_withdraw into two functions)
  
  #endif /* __UTIL_DOT_H__ */
 +
diff --git a/fs/gfs2/glops.c b/fs/gfs2/glops.c
index 90b93ba7dd9f..da04bee05c05 100644
--- a/fs/gfs2/glops.c
+++ b/fs/gfs2/glops.c
@@ -40,7 +40,8 @@ static void gfs2_ail_error(struct gfs2_glock *gl, const struct buffer_head *bh)
 	fs_err(gl->gl_name.ln_sbd, "AIL glock %u:%llu mapping %p\n",
 	       gl->gl_name.ln_type, gl->gl_name.ln_number,
 	       gfs2_glock2aspace(gl));
-	gfs2_lm_withdraw(gl->gl_name.ln_sbd, "AIL error\n");
+	gfs2_lm(gl->gl_name.ln_sbd, "AIL error\n");
+	gfs2_withdraw(gl->gl_name.ln_sbd);
 }
 
 /**
* Unmerged path fs/gfs2/log.c
* Unmerged path fs/gfs2/sys.c
* Unmerged path fs/gfs2/util.c
* Unmerged path fs/gfs2/util.h
