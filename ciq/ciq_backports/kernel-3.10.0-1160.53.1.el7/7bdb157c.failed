perf/core: Fix a memory leak in perf_event_parse_addr_filter()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.53.1.el7
commit-author kiyin(尹亮) <kiyin@tencent.com>
commit 7bdb157cdebbf95a1cd94ed2e01b338714075d00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.53.1.el7/7bdb157c.failed

As shown through runtime testing, the "filename" allocation is not
always freed in perf_event_parse_addr_filter().

There are three possible ways that this could happen:

 - It could be allocated twice on subsequent iterations through the loop,
 - or leaked on the success path,
 - or on the failure path.

Clean up the code flow to make it obvious that 'filename' is always
freed in the reallocation path and in the two return paths as well.

We rely on the fact that kfree(NULL) is NOP and filename is initialized
with NULL.

This fixes the leak. No other side effects expected.

[ Dan Carpenter: cleaned up the code flow & added a changelog. ]
[ Ingo Molnar: updated the changelog some more. ]

Fixes: 375637bc5249 ("perf/core: Introduce address range filtering")
	Signed-off-by: "kiyin(尹亮)" <kiyin@tencent.com>
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Cc: "Srivatsa S. Bhat" <srivatsa@csail.mit.edu>
	Cc: Anthony Liguori <aliguori@amazon.com>
--
 kernel/events/core.c | 12 +++++-------
 1 file changed, 5 insertions(+), 7 deletions(-)
(cherry picked from commit 7bdb157cdebbf95a1cd94ed2e01b338714075d00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/events/core.c
diff --cc kernel/events/core.c
index b5da8dcb2e08,5a29ab09e72d..000000000000
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@@ -8610,8 -10083,9 +8610,9 @@@ perf_event_parse_addr_filter(struct per
  			}
  
  			if (token == IF_SRC_FILE || token == IF_SRC_FILEADDR) {
 -				int fpos = token == IF_SRC_FILE ? 2 : 1;
 +				int fpos = filter->range ? 2 : 1;
  
+ 				kfree(filename);
  				filename = match_strdup(&args[fpos]);
  				if (!filename) {
  					ret = -ENOMEM;
@@@ -8650,22 -10132,18 +8651,26 @@@
  				 */
  				ret = -EOPNOTSUPP;
  				if (!event->ctx->task)
- 					goto fail_free_name;
+ 					goto fail;
  
  				/* look up the path and grab its inode */
 -				ret = kern_path(filename, LOOKUP_FOLLOW,
 -						&filter->path);
 +				ret = kern_path(filename, LOOKUP_FOLLOW, &path);
  				if (ret)
++<<<<<<< HEAD
 +					goto fail_free_name;
 +
 +				filter->inode = igrab(d_inode(path.dentry));
 +				path_put(&path);
 +				kfree(filename);
 +				filename = NULL;
++=======
+ 					goto fail;
++>>>>>>> 7bdb157cdebb (perf/core: Fix a memory leak in perf_event_parse_addr_filter())
  
  				ret = -EINVAL;
 -				if (!filter->path.dentry ||
 -				    !S_ISREG(d_inode(filter->path.dentry)
 -					     ->i_mode))
 +				if (!filter->inode ||
 +				    !S_ISREG(filter->inode->i_mode))
 +					/* free_filters_list() will iput() */
  					goto fail;
  
  				event->addr_filters.nr_file_filters++;
* Unmerged path kernel/events/core.c
