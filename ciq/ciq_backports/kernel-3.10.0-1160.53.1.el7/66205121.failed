tcp: grow window for OOO packets only for SACK flows

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.53.1.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 662051215c758ae8545451628816204ed6cd372d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.53.1.el7/66205121.failed

Back in 2013, we made a change that broke fast retransmit
for non SACK flows.

Indeed, for these flows, a sender needs to receive three duplicate
ACK before starting fast retransmit. Sending ACK with different
receive window do not count.

Even if enabling SACK is strongly recommended these days,
there still are some cases where it has to be disabled.

Not increasing the window seems better than having to
rely on RTO.

After the fix, following packetdrill test gives :

// Initialize connection
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +0 < S 0:0(0) win 32792 <mss 1000,nop,wscale 7>
   +0 > S. 0:0(0) ack 1 <mss 1460,nop,wscale 8>
   +0 < . 1:1(0) ack 1 win 514

   +0 accept(3, ..., ...) = 4

   +0 < . 1:1001(1000) ack 1 win 514
// Quick ack
   +0 > . 1:1(0) ack 1001 win 264

   +0 < . 2001:3001(1000) ack 1 win 514
// DUPACK : Normally we should not change the window
   +0 > . 1:1(0) ack 1001 win 264

   +0 < . 3001:4001(1000) ack 1 win 514
// DUPACK : Normally we should not change the window
   +0 > . 1:1(0) ack 1001 win 264

   +0 < . 4001:5001(1000) ack 1 win 514
// DUPACK : Normally we should not change the window
    +0 > . 1:1(0) ack 1001 win 264

   +0 < . 1001:2001(1000) ack 1 win 514
// Hole is repaired.
   +0 > . 1:1(0) ack 5001 win 272

Fixes: 4e4f1fc22681 ("tcp: properly increase rcv_ssthresh for ofo packets")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Venkat Venkatsubra <venkat.x.venkatsubra@oracle.com>
	Acked-by: Neal Cardwell <ncardwell@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 662051215c758ae8545451628816204ed6cd372d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_input.c
diff --cc net/ipv4/tcp_input.c
index 85c86206efd4,12fda8f27b08..000000000000
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@@ -4384,9 -4602,14 +4384,13 @@@ static void tcp_data_queue_ofo(struct s
  	/* In the typical case, we are adding an skb to the end of the list.
  	 * Use of ooo_last_skb avoids the O(Log(N)) rbtree lookup.
  	 */
 -	if (tcp_ooo_try_coalesce(sk, tp->ooo_last_skb,
 -				 skb, &fragstolen)) {
 +	if (tcp_ooo_try_coalesce(sk, tp->ooo_last_skb, skb, &fragstolen)) {
  coalesce_done:
- 		tcp_grow_window(sk, skb);
+ 		/* For non sack flows, do not grow window to force DUPACK
+ 		 * and trigger fast retransmit.
+ 		 */
+ 		if (tcp_is_sack(tp))
+ 			tcp_grow_window(sk, skb);
  		kfree_skb_partial(skb, fragstolen);
  		skb = NULL;
  		goto add_sack;
@@@ -4463,7 -4693,12 +4467,16 @@@ add_sack
  		tcp_sack_new_ofo_skb(sk, seq, end_seq);
  end:
  	if (skb) {
++<<<<<<< HEAD
 +		tcp_grow_window(sk, skb);
++=======
+ 		/* For non sack flows, do not grow window to force DUPACK
+ 		 * and trigger fast retransmit.
+ 		 */
+ 		if (tcp_is_sack(tp))
+ 			tcp_grow_window(sk, skb);
+ 		skb_condense(skb);
++>>>>>>> 662051215c75 (tcp: grow window for OOO packets only for SACK flows)
  		skb_set_owner_r(skb, sk);
  	}
  }
* Unmerged path net/ipv4/tcp_input.c
