media: firewire: firedtv-avc: fix a buffer overflow in avc_ca_pmt()

jira LE-1907
cve CVE-2021-42739
Rebuild_History Non-Buildable kernel-3.10.0-1160.53.1.el7
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit 35d2969ea3c7d32aee78066b1f3cf61a0d935a4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.53.1.el7/35d2969e.failed

The bounds checking in avc_ca_pmt() is not strict enough.  It should
be checking "read_pos + 4" because it's reading 5 bytes.  If the
"es_info_length" is non-zero then it reads a 6th byte so there needs to
be an additional check for that.

I also added checks for the "write_pos".  I don't think these are
required because "read_pos" and "write_pos" are tied together so
checking one ought to be enough.  But they make the code easier to
understand for me.  The check on write_pos is:

	if (write_pos + 4 >= sizeof(c->operand) - 4) {

The first "+ 4" is because we're writing 5 bytes and the last " - 4"
is to leave space for the CRC.

The other problem is that "length" can be invalid.  It comes from
"data_length" in fdtv_ca_pmt().

	Cc: stable@vger.kernel.org
	Reported-by: Luo Likang <luolikang@nsfocus.com>
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
	Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
(cherry picked from commit 35d2969ea3c7d32aee78066b1f3cf61a0d935a4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/media/firewire/firedtv-avc.c
diff --cc drivers/media/firewire/firedtv-avc.c
index d1a1a1324ef8,71991f8638e6..000000000000
--- a/drivers/media/firewire/firedtv-avc.c
+++ b/drivers/media/firewire/firedtv-avc.c
@@@ -1175,10 -1181,20 +1179,25 @@@ int avc_ca_pmt(struct firedtv *fdtv, ch
  		c->operand[write_pos++] = es_info_length >> 8;
  		c->operand[write_pos++] = es_info_length & 0xff;
  		if (es_info_length > 0) {
+ 			if (read_pos >= length) {
+ 				ret = -EINVAL;
+ 				goto out;
+ 			}
  			pmt_cmd_id = msg[read_pos++];
  			if (pmt_cmd_id != 1 && pmt_cmd_id != 4)
++<<<<<<< HEAD
 +				dev_err(fdtv->device, "invalid pmt_cmd_id %d "
 +					"at stream level\n", pmt_cmd_id);
++=======
+ 				dev_err(fdtv->device, "invalid pmt_cmd_id %d at stream level\n",
+ 					pmt_cmd_id);
+ 
+ 			if (es_info_length > sizeof(c->operand) - 4 - write_pos ||
+ 			    es_info_length > length - read_pos) {
+ 				ret = -EINVAL;
+ 				goto out;
+ 			}
++>>>>>>> 35d2969ea3c7 (media: firewire: firedtv-avc: fix a buffer overflow in avc_ca_pmt())
  
  			memcpy(&c->operand[write_pos], &msg[read_pos],
  			       es_info_length);
* Unmerged path drivers/media/firewire/firedtv-avc.c
diff --git a/drivers/media/firewire/firedtv-ci.c b/drivers/media/firewire/firedtv-ci.c
index e5ebdbfe8c19..7c75a91cf0d3 100644
--- a/drivers/media/firewire/firedtv-ci.c
+++ b/drivers/media/firewire/firedtv-ci.c
@@ -138,6 +138,8 @@ static int fdtv_ca_pmt(struct firedtv *fdtv, void *arg)
 	} else {
 		data_length = msg->msg[3];
 	}
+	if (data_length > sizeof(msg->msg) - data_pos)
+		return -EINVAL;
 
 	return avc_ca_pmt(fdtv, &msg->msg[data_pos], data_length);
 }
