gfs2: Return bool from gfs2_assert functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.53.1.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 8e28ef1f2fa176854f96fb0416f2aaf5516793d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.53.1.el7/8e28ef1f.failed

The gfs2_assert functions only print messages when the filesystem hasn't been
withdrawn yet, and they indicate whether or not they've printed something in
their return value.  However, none of the callers use that information, so
simply return whether or not the assert has failed.

(The gfs2_assert functions are still backwards; they return false when an
assertion is true.)

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 8e28ef1f2fa176854f96fb0416f2aaf5516793d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/util.c
diff --cc fs/gfs2/util.c
index 33a5f6d866e6,ec8e8c5ce848..000000000000
--- a/fs/gfs2/util.c
+++ b/fs/gfs2/util.c
@@@ -75,21 -84,17 +75,26 @@@ int gfs2_lm_withdraw(struct gfs2_sbd *s
  
  /**
   * gfs2_assert_withdraw_i - Cause the machine to withdraw if @assertion is false
-  * Returns: -1 if this call withdrew the machine,
-  *          -2 if it was already withdrawn
   */
  
- int gfs2_assert_withdraw_i(struct gfs2_sbd *sdp, char *assertion,
- 			   const char *function, char *file, unsigned int line)
+ void gfs2_assert_withdraw_i(struct gfs2_sbd *sdp, char *assertion,
+ 			    const char *function, char *file, unsigned int line)
  {
++<<<<<<< HEAD
 +	int me;
 +	me = gfs2_lm_withdraw(sdp,
 +		"GFS2: fsid=%s: fatal: assertion \"%s\" failed\n"
 +		"GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		sdp->sd_fsname, assertion,
 +		sdp->sd_fsname, function, file, line);
++=======
+ 	gfs2_lm(sdp,
+ 		"fatal: assertion \"%s\" failed\n"
+ 		"   function = %s, file = %s, line = %u\n",
+ 		assertion, function, file, line);
+ 	gfs2_withdraw(sdp);
++>>>>>>> 8e28ef1f2fa1 (gfs2: Return bool from gfs2_assert functions)
  	dump_stack();
- 	return (me) ? -1 : -2;
  }
  
  /**
@@@ -104,14 -107,11 +107,14 @@@ void gfs2_assert_warn_i(struct gfs2_sb
  	if (time_before(jiffies,
  			sdp->sd_last_warning +
  			gfs2_tune_get(sdp, gt_complain_secs) * HZ))
- 		return -2;
+ 		return;
  
  	if (sdp->sd_args.ar_errors == GFS2_ERRORS_WITHDRAW)
 -		fs_warn(sdp, "warning: assertion \"%s\" failed at function = %s, file = %s, line = %u\n",
 -			assertion, function, file, line);
 +		printk(KERN_WARNING
 +		       "GFS2: fsid=%s: warning: assertion \"%s\" failed\n"
 +		       "GFS2: fsid=%s:   function = %s, file = %s, line = %u\n",
 +		       sdp->sd_fsname, assertion,
 +		       sdp->sd_fsname, function, file, line);
  
  	if (sdp->sd_args.ar_debug)
  		BUG();
* Unmerged path fs/gfs2/util.c
diff --git a/fs/gfs2/util.h b/fs/gfs2/util.h
index 44242f56811a..c16d1196a414 100644
--- a/fs/gfs2/util.h
+++ b/fs/gfs2/util.h
@@ -38,21 +38,29 @@ do { \
 } while (0)
 
 
-int gfs2_assert_withdraw_i(struct gfs2_sbd *sdp, char *assertion,
-			   const char *function, char *file, unsigned int line);
+void gfs2_assert_withdraw_i(struct gfs2_sbd *sdp, char *assertion,
+			    const char *function, char *file, unsigned int line);
 
 #define gfs2_assert_withdraw(sdp, assertion) \
-((likely(assertion)) ? 0 : gfs2_assert_withdraw_i((sdp), #assertion, \
-					__func__, __FILE__, __LINE__))
+	({ \
+		bool _bool = (assertion); \
+		if (unlikely(!_bool)) \
+			gfs2_assert_withdraw_i((sdp), #assertion, \
+					__func__, __FILE__, __LINE__); \
+		!_bool; \
+	})
 
-
-int gfs2_assert_warn_i(struct gfs2_sbd *sdp, char *assertion,
-		       const char *function, char *file, unsigned int line);
+void gfs2_assert_warn_i(struct gfs2_sbd *sdp, char *assertion,
+			const char *function, char *file, unsigned int line);
 
 #define gfs2_assert_warn(sdp, assertion) \
-((likely(assertion)) ? 0 : gfs2_assert_warn_i((sdp), #assertion, \
-					__func__, __FILE__, __LINE__))
-
+	({ \
+		bool _bool = (assertion); \
+		if (unlikely(!_bool)) \
+			gfs2_assert_warn_i((sdp), #assertion, \
+					__func__, __FILE__, __LINE__); \
+		!_bool; \
+	})
 
 int gfs2_consist_i(struct gfs2_sbd *sdp,
 		   const char *function, char *file, unsigned int line);
