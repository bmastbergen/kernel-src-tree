gfs2: Report errors before withdraw

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.53.1.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 8dc88ac68df89851488a60b8f1582fe466f41a64
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.53.1.el7/8dc88ac6.failed

In gfs2_rgrp_verify and compute_bitstructs, make sure to report errors before
withdrawing the filesystem: otherwise, when we withdraw first and withdraw is
configured to panic, we'll never get to the error reporting.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 8dc88ac68df89851488a60b8f1582fe466f41a64)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/rgrp.c
diff --cc fs/gfs2/rgrp.c
index eebb1e1cfe40,2bdd662deff5..000000000000
--- a/fs/gfs2/rgrp.c
+++ b/fs/gfs2/rgrp.c
@@@ -688,15 -733,6 +688,18 @@@ void gfs2_clear_rgrpd(struct gfs2_sbd *
  	}
  }
  
++<<<<<<< HEAD
 +static void gfs2_rindex_print(const struct gfs2_rgrpd *rgd)
 +{
 +	printk(KERN_INFO "  ri_addr = %llu\n", (unsigned long long)rgd->rd_addr);
 +	printk(KERN_INFO "  ri_length = %u\n", rgd->rd_length);
 +	printk(KERN_INFO "  ri_data0 = %llu\n", (unsigned long long)rgd->rd_data0);
 +	printk(KERN_INFO "  ri_data = %u\n", rgd->rd_data);
 +	printk(KERN_INFO "  ri_bitbytes = %u\n", rgd->rd_bitbytes);
 +}
 +
++=======
++>>>>>>> 8dc88ac68df8 (gfs2: Report errors before withdraw)
  /**
   * gfs2_compute_bitstructs - Compute the bitmap sizes
   * @rgd: The resource group descriptor
@@@ -762,12 -802,21 +765,30 @@@ static int compute_bitstructs(struct gf
  		return -EIO;
  	}
  	bi = rgd->rd_bits + (length - 1);
++<<<<<<< HEAD
 +	if ((bi->bi_start + bi->bi_len) * GFS2_NBBY != rgd->rd_data) {
 +		if (gfs2_consist_rgrpd(rgd)) {
 +			gfs2_rindex_print(rgd);
 +			fs_err(sdp, "start=%u len=%u offset=%u\n",
 +			       bi->bi_start, bi->bi_len, bi->bi_offset);
 +		}
++=======
+ 	if ((bi->bi_start + bi->bi_bytes) * GFS2_NBBY != rgd->rd_data) {
+ 		gfs2_lm(sdp,
+ 			"ri_addr = %llu\n"
+ 			"ri_length = %u\n"
+ 			"ri_data0 = %llu\n"
+ 			"ri_data = %u\n"
+ 			"ri_bitbytes = %u\n"
+ 			"start=%u len=%u offset=%u\n",
+ 			(unsigned long long)rgd->rd_addr,
+ 			rgd->rd_length,
+ 			(unsigned long long)rgd->rd_data0,
+ 			rgd->rd_data,
+ 			rgd->rd_bitbytes,
+ 			bi->bi_start, bi->bi_bytes, bi->bi_offset);
+ 		gfs2_consist_rgrpd(rgd);
++>>>>>>> 8dc88ac68df8 (gfs2: Report errors before withdraw)
  		return -EIO;
  	}
  
* Unmerged path fs/gfs2/rgrp.c
