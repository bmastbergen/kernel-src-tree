x86/cpu/AMD: Fix erratum 1076 (CPB bit)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.53.1.el7
commit-author Borislav Petkov <bp@suse.de>
commit f7f3dc00f61261cdc9ccd8b886f21bc4dffd6fd9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.53.1.el7/f7f3dc00.failed

CPUID Fn8000_0007_EDX[CPB] is wrongly 0 on models up to B1. But they do
support CPB (AMD's Core Performance Boosting cpufreq CPU feature), so fix that.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Sherry Hurwitz <sherry.hurwitz@amd.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20170907170821.16021-1-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f7f3dc00f61261cdc9ccd8b886f21bc4dffd6fd9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/amd.c
diff --cc arch/x86/kernel/cpu/amd.c
index 95fcf2fa2817,d58184b7cd44..000000000000
--- a/arch/x86/kernel/cpu/amd.c
+++ b/arch/x86/kernel/cpu/amd.c
@@@ -653,12 -683,98 +653,40 @@@ static void init_amd(struct cpuinfo_x8
  	 * Errata 63 for SH-B3 steppings
  	 * Errata 122 for all steppings (F+ have it disabled by default)
  	 */
 -	msr_set_bit(MSR_K7_HWCR, 6);
 -#endif
 -	set_cpu_bug(c, X86_BUG_SWAPGS_FENCE);
 -}
 -
 -static void init_amd_gh(struct cpuinfo_x86 *c)
 -{
 -#ifdef CONFIG_X86_64
 -	/* do this for boot cpu */
 -	if (c == &boot_cpu_data)
 -		check_enable_amd_mmconf_dmi();
 -
 -	fam10h_check_enable_mmcfg();
 -#endif
 -
 -	/*
 -	 * Disable GART TLB Walk Errors on Fam10h. We do this here because this
 -	 * is always needed when GART is enabled, even in a kernel which has no
 -	 * MCE support built in. BIOS should disable GartTlbWlk Errors already.
 -	 * If it doesn't, we do it here as suggested by the BKDG.
 -	 *
 -	 * Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=33012
 -	 */
 -	msr_set_bit(MSR_AMD64_MCx_MASK(4), 10);
 -
 -	/*
 -	 * On family 10h BIOS may not have properly enabled WC+ support, causing
 -	 * it to be converted to CD memtype. This may result in performance
 -	 * degradation for certain nested-paging guests. Prevent this conversion
 -	 * by clearing bit 24 in MSR_AMD64_BU_CFG2.
 -	 *
 -	 * NOTE: we want to use the _safe accessors so as not to #GP kvm
 -	 * guests on older kvm hosts.
 -	 */
 -	msr_clear_bit(MSR_AMD64_BU_CFG2, 24);
 -
 -	if (cpu_has_amd_erratum(c, amd_erratum_383))
 -		set_cpu_bug(c, X86_BUG_AMD_TLB_MMATCH);
 -}
 -
 -#define MSR_AMD64_DE_CFG	0xC0011029
 -
 -static void init_amd_ln(struct cpuinfo_x86 *c)
 -{
 -	/*
 -	 * Apply erratum 665 fix unconditionally so machines without a BIOS
 -	 * fix work.
 -	 */
 -	msr_set_bit(MSR_AMD64_DE_CFG, 31);
 -}
 -
 -static void init_amd_bd(struct cpuinfo_x86 *c)
 -{
 -	u64 value;
 -
 -	/* re-enable TopologyExtensions if switched off by BIOS */
 -	if ((c->x86_model >= 0x10) && (c->x86_model <= 0x6f) &&
 -	    !cpu_has(c, X86_FEATURE_TOPOEXT)) {
 -
 -		if (msr_set_bit(0xc0011005, 54) > 0) {
 -			rdmsrl(0xc0011005, value);
 -			if (value & BIT_64(54)) {
 -				set_cpu_cap(c, X86_FEATURE_TOPOEXT);
 -				pr_info_once(FW_INFO "CPU: Re-enabling disabled Topology Extensions Support.\n");
 -			}
 -		}
 +	if (c->x86 == 0xf) {
 +		rdmsrl(MSR_K7_HWCR, value);
 +		value |= 1 << 6;
 +		wrmsrl(MSR_K7_HWCR, value);
  	}
++<<<<<<< HEAD
 +#endif
++=======
+ 
+ 	/*
+ 	 * The way access filter has a performance penalty on some workloads.
+ 	 * Disable it on the affected CPUs.
+ 	 */
+ 	if ((c->x86_model >= 0x02) && (c->x86_model < 0x20)) {
+ 		if (!rdmsrl_safe(MSR_F15H_IC_CFG, &value) && !(value & 0x1E)) {
+ 			value |= 0x1E;
+ 			wrmsrl_safe(MSR_F15H_IC_CFG, value);
+ 		}
+ 	}
+ }
+ 
+ static void init_amd_zn(struct cpuinfo_x86 *c)
+ {
+ 	/*
+ 	 * Fix erratum 1076: CPB feature bit not being set in CPUID. It affects
+ 	 * all up to and including B1.
+ 	 */
+ 	if (c->x86_model <= 1 && c->x86_mask <= 1)
+ 		set_cpu_cap(c, X86_FEATURE_CPB);
+ }
+ 
+ static void init_amd(struct cpuinfo_x86 *c)
+ {
++>>>>>>> f7f3dc00f612 (x86/cpu/AMD: Fix erratum 1076 (CPB bit))
  	early_init_amd(c);
  
  	/*
@@@ -718,7 -792,17 +746,21 @@@
  	/* K6s reports MCEs but don't actually have all the MSRs */
  	if (c->x86 < 6)
  		clear_cpu_cap(c, X86_FEATURE_MCE);
++<<<<<<< HEAD
 +#endif
++=======
+ 
+ 	switch (c->x86) {
+ 	case 4:    init_amd_k5(c); break;
+ 	case 5:    init_amd_k6(c); break;
+ 	case 6:	   init_amd_k7(c); break;
+ 	case 0xf:  init_amd_k8(c); break;
+ 	case 0x10: init_amd_gh(c); break;
+ 	case 0x12: init_amd_ln(c); break;
+ 	case 0x15: init_amd_bd(c); break;
+ 	case 0x17: init_amd_zn(c); break;
+ 	}
++>>>>>>> f7f3dc00f612 (x86/cpu/AMD: Fix erratum 1076 (CPB bit))
  
  	/* Enable workaround for FXSAVE leak */
  	if (c->x86 >= 6)
* Unmerged path arch/x86/kernel/cpu/amd.c
