vt: selection, introduce vc_is_sel

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.36.2.el7
commit-author Jiri Slaby <jslaby@suse.cz>
commit dce05aa6eec977f1472abed95ccd71276b9a3864
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.36.2.el7/dce05aa6.failed

Avoid global variables (namely sel_cons) by introducing vc_is_sel. It
checks whether the parameter is the current selection console. This will
help putting sel_cons to a struct later.

	Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Link: https://lore.kernel.org/r/20200219073951.16151-1-jslaby@suse.cz
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit dce05aa6eec977f1472abed95ccd71276b9a3864)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/tty/vt/vt.c
#	include/linux/selection.h
diff --cc drivers/tty/vt/vt.c
index 520af084cd9b,a2bbff602999..000000000000
--- a/drivers/tty/vt/vt.c
+++ b/drivers/tty/vt/vt.c
@@@ -889,6 -1189,17 +890,20 @@@ static int vc_do_resize(struct tty_stru
  	if (!newscreen)
  		return -ENOMEM;
  
++<<<<<<< HEAD
++=======
+ 	if (get_vc_uniscr(vc)) {
+ 		new_uniscr = vc_uniscr_alloc(new_cols, new_rows);
+ 		if (!new_uniscr) {
+ 			kfree(newscreen);
+ 			return -ENOMEM;
+ 		}
+ 	}
+ 
+ 	if (vc_is_sel(vc))
+ 		clear_selection();
+ 
++>>>>>>> dce05aa6eec9 (vt: selection, introduce vc_is_sel)
  	old_rows = vc->vc_rows;
  	old_row_size = vc->vc_size_row;
  
diff --cc include/linux/selection.h
index 7e6c4450b8a5,5b890ef5b59f..000000000000
--- a/include/linux/selection.h
+++ b/include/linux/selection.h
@@@ -10,13 -11,14 +10,17 @@@
  #include <linux/tiocl.h>
  #include <linux/vt_buffer.h>
  
++<<<<<<< HEAD
 +struct tty_struct;
 +
 +extern struct vc_data *sel_cons;
++=======
++>>>>>>> dce05aa6eec9 (vt: selection, introduce vc_is_sel)
  struct tty_struct;
+ struct vc_data;
  
  extern void clear_selection(void);
 -extern int set_selection_user(const struct tiocl_selection __user *sel,
 -			      struct tty_struct *tty);
 -extern int set_selection_kernel(struct tiocl_selection *v,
 -				struct tty_struct *tty);
 +extern int set_selection(const struct tiocl_selection __user *sel, struct tty_struct *tty);
  extern int paste_selection(struct tty_struct *tty);
  extern int sel_loadlut(char __user *p);
  extern int mouse_reporting(void);
diff --git a/drivers/tty/vt/selection.c b/drivers/tty/vt/selection.c
index 145cf969d3ae..b336e1b62a0e 100644
--- a/drivers/tty/vt/selection.c
+++ b/drivers/tty/vt/selection.c
@@ -79,6 +79,11 @@ void clear_selection(void)
 	}
 }
 
+bool vc_is_sel(struct vc_data *vc)
+{
+	return vc == sel_cons;
+}
+
 /*
  * User settable table: what characters are to be considered alphabetic?
  * 256 bits. Locked by the console lock.
* Unmerged path drivers/tty/vt/vt.c
diff --git a/drivers/tty/vt/vt_ioctl.c b/drivers/tty/vt/vt_ioctl.c
index cf7ccafa6fc0..b89012d8fcea 100644
--- a/drivers/tty/vt/vt_ioctl.c
+++ b/drivers/tty/vt/vt_ioctl.c
@@ -42,7 +42,7 @@ char vt_dont_switch;
 extern struct tty_driver *console_driver;
 
 #define VT_IS_IN_USE(i)	(console_driver->ttys[i] && console_driver->ttys[i]->count)
-#define VT_BUSY(i)	(VT_IS_IN_USE(i) || i == fg_console || vc_cons[i].d == sel_cons)
+#define VT_BUSY(i)	(VT_IS_IN_USE(i) || i == fg_console || vc_is_sel(vc_cons[i].d))
 
 /*
  * Console (vt and kd) routines, as defined by USL SVR4 manual, and by
* Unmerged path include/linux/selection.h
