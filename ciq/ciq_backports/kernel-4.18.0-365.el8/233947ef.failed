arm64: memory: fix flipped VA space fallout

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Mark Rutland <mark.rutland@arm.com>
commit 233947ef16a18952d22786770dab1ddafa1ac377
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/233947ef.failed

VA_START used to be the start of the TTBR1 address space, but now it's a
point midway though. In a couple of places we still use VA_START to get
the start of the TTBR1 address space, so let's fix these up to use
PAGE_OFFSET instead.

Fixes: 14c127c957c1c607 ("arm64: mm: Flip kernel VA space")
	Signed-off-by: Mark Rutland <mark.rutland@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Tested-by: Steve Capper <steve.capper@arm.com>
	Reviewed-by: Steve Capper <steve.capper@arm.com>
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 233947ef16a18952d22786770dab1ddafa1ac377)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/mm/dump.c
diff --cc arch/arm64/mm/dump.c
index e38089453a79,8e10b4ba215a..000000000000
--- a/arch/arm64/mm/dump.c
+++ b/arch/arm64/mm/dump.c
@@@ -354,17 -398,10 +354,22 @@@ void ptdump_check_wx(void
  			{ -1, NULL},
  		},
  		.check_wx = true,
 +		.ptdump = {
 +			.note_page = note_page,
 +			.range = (struct ptdump_range[]) {
 +				{PAGE_OFFSET, ~0UL},
 +				{0, 0}
 +			}
 +		}
  	};
  
++<<<<<<< HEAD
 +	ptdump_walk_pgd(&st.ptdump, &init_mm);
 +
++=======
+ 	walk_pgd(&st, &init_mm, PAGE_OFFSET);
+ 	note_page(&st, 0, 0, 0);
++>>>>>>> 233947ef16a1 (arm64: memory: fix flipped VA space fallout)
  	if (st.wx_pages || st.uxn_pages)
  		pr_warn("Checked W+X mappings: FAILED, %lu W+X pages found, %lu non-UXN pages found\n",
  			st.wx_pages, st.uxn_pages);
* Unmerged path arch/arm64/mm/dump.c
diff --git a/arch/arm64/mm/fault.c b/arch/arm64/mm/fault.c
index 9216265c0f74..3224c24b73e4 100644
--- a/arch/arm64/mm/fault.c
+++ b/arch/arm64/mm/fault.c
@@ -142,7 +142,7 @@ static inline bool is_ttbr0_addr(unsigned long addr)
 static inline bool is_ttbr1_addr(unsigned long addr)
 {
 	/* TTBR1 addresses may have a tag if KASAN_SW_TAGS is in use */
-	return arch_kasan_reset_tag(addr) >= VA_START;
+	return arch_kasan_reset_tag(addr) >= PAGE_OFFSET;
 }
 
 /*
