drm/i915/adl_p: Allow underrun recovery when possible

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Matt Roper <matthew.d.roper@intel.com>
commit ba3b049f477436b7e4bb19c293c78c9068582d54
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/ba3b049f.failed

ADL_P requires that we disable underrun recovery when downscaling (or
using the scaler for YUV420 pipe output), using DSC, or using PSR2.
Otherwise we should be able to enable the underrun recovery.

On DG2 we need to keep underrun recovery disabled at all times, but the
chicken bit in PIPE_CHICKEN has an inverted meaning (it's an enable bit
instead of disable).

v2:
 - Reverse the condition (clear the disable bit when supported, set
   disable bit when not supported).

Bspec: 50351
	Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
	Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210727145056.2049720-1-matthew.d.roper@intel.com
(cherry picked from commit ba3b049f477436b7e4bb19c293c78c9068582d54)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_display.c
#	drivers/gpu/drm/i915/i915_reg.h
diff --cc drivers/gpu/drm/i915/display/intel_display.c
index 105a65e966a7,456cb384317f..000000000000
--- a/drivers/gpu/drm/i915/display/intel_display.c
+++ b/drivers/gpu/drm/i915/display/intel_display.c
@@@ -3774,6 -2247,21 +3792,24 @@@ static void icl_set_pipe_chicken(const 
  	 * across pipe
  	 */
  	tmp |= PIXEL_ROUNDING_TRUNC_FB_PASSTHRU;
++<<<<<<< HEAD
++=======
+ 
+ 	if (IS_DG2(dev_priv)) {
+ 		/*
+ 		 * Underrun recovery must always be disabled on DG2.  However
+ 		 * the chicken bit meaning is inverted compared to other
+ 		 * platforms.
+ 		 */
+ 		tmp &= ~UNDERRUN_RECOVERY_ENABLE_DG2;
+ 	} else if (DISPLAY_VER(dev_priv) >= 13) {
+ 		if (underrun_recovery_supported(crtc_state))
+ 			tmp &= ~UNDERRUN_RECOVERY_DISABLE_ADLP;
+ 		else
+ 			tmp |= UNDERRUN_RECOVERY_DISABLE_ADLP;
+ 	}
+ 
++>>>>>>> ba3b049f4774 (drm/i915/adl_p: Allow underrun recovery when possible)
  	intel_de_write(dev_priv, PIPE_CHICKEN(pipe), tmp);
  }
  
@@@ -5537,8 -3597,8 +5573,13 @@@ static void hsw_crtc_enable(struct inte
  
  	hsw_set_linetime_wm(new_crtc_state);
  
++<<<<<<< HEAD
 +	if (INTEL_GEN(dev_priv) >= 11)
 +		icl_set_pipe_chicken(crtc);
++=======
+ 	if (DISPLAY_VER(dev_priv) >= 11)
+ 		icl_set_pipe_chicken(new_crtc_state);
++>>>>>>> ba3b049f4774 (drm/i915/adl_p: Allow underrun recovery when possible)
  
  	if (dev_priv->display.initial_watermarks)
  		dev_priv->display.initial_watermarks(state, crtc);
@@@ -12786,12 -10229,12 +12827,17 @@@ static void intel_pipe_fastset(const st
  	    IS_BROADWELL(dev_priv) || IS_HASWELL(dev_priv))
  		hsw_set_linetime_wm(new_crtc_state);
  
++<<<<<<< HEAD
 +	if (INTEL_GEN(dev_priv) >= 11)
 +		icl_set_pipe_chicken(crtc);
++=======
+ 	if (DISPLAY_VER(dev_priv) >= 11)
+ 		icl_set_pipe_chicken(new_crtc_state);
++>>>>>>> ba3b049f4774 (drm/i915/adl_p: Allow underrun recovery when possible)
  }
  
 -static void commit_pipe_pre_planes(struct intel_atomic_state *state,
 -				   struct intel_crtc *crtc)
 +static void commit_pipe_config(struct intel_atomic_state *state,
 +			       struct intel_crtc *crtc)
  {
  	struct drm_i915_private *dev_priv = to_i915(state->base.dev);
  	const struct intel_crtc_state *old_crtc_state =
diff --cc drivers/gpu/drm/i915/i915_reg.h
index f515475c1335,730afa341f8a..000000000000
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@@ -8290,6 -8393,8 +8290,11 @@@ enum 
  #define _PIPEC_CHICKEN				0x72038
  #define PIPE_CHICKEN(pipe)			_MMIO_PIPE(pipe, _PIPEA_CHICKEN,\
  							   _PIPEB_CHICKEN)
++<<<<<<< HEAD
++=======
+ #define   UNDERRUN_RECOVERY_DISABLE_ADLP	REG_BIT(30)
+ #define   UNDERRUN_RECOVERY_ENABLE_DG2		REG_BIT(30)
++>>>>>>> ba3b049f4774 (drm/i915/adl_p: Allow underrun recovery when possible)
  #define   PIXEL_ROUNDING_TRUNC_FB_PASSTHRU 	(1 << 15)
  #define   PER_PIXEL_ALPHA_BYPASS_EN		(1 << 7)
  
* Unmerged path drivers/gpu/drm/i915/display/intel_display.c
* Unmerged path drivers/gpu/drm/i915/i915_reg.h
