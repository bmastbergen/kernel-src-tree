drm/i915: Program DPLL P1 dividers consistently

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 98b27e79898b5f5a15734525c7a31f67f7a9766a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/98b27e79.failed

On g4x and pch the DPLL has two P1 dividers (for refresh rate
switching). Program the FPx1 P1 divider consistently to the reduced
clock P1 divider if available, otherwise just program it to the
same value as the FPx0 P1 divider.

	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210715093530.31711-9-ville.syrjala@linux.intel.com
	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
(cherry picked from commit 98b27e79898b5f5a15734525c7a31f67f7a9766a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dpll.c
diff --cc drivers/gpu/drm/i915/display/intel_dpll.c
index de345d1ba1af,09a57ce86676..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dpll.c
+++ b/drivers/gpu/drm/i915/display/intel_dpll.c
@@@ -766,42 -778,35 +766,63 @@@ static u32 pnv_dpll_compute_fp(struct d
  	return (1 << dpll->n) << 16 | dpll->m2;
  }
  
++<<<<<<< HEAD
 +static void i9xx_update_pll_dividers(struct intel_crtc *crtc,
 +				     struct intel_crtc_state *crtc_state,
 +				     struct dpll *reduced_clock)
++=======
+ static void i9xx_update_pll_dividers(struct intel_crtc_state *crtc_state,
+ 				     const struct dpll *clock,
+ 				     const struct dpll *reduced_clock)
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  {
 -	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
  	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
++<<<<<<< HEAD
 +	u32 fp, fp2 = 0;
 +
 +	if (IS_PINEVIEW(dev_priv)) {
 +		fp = pnv_dpll_compute_fp(&crtc_state->dpll);
 +		if (reduced_clock)
 +			fp2 = pnv_dpll_compute_fp(reduced_clock);
 +	} else {
 +		fp = i9xx_dpll_compute_fp(&crtc_state->dpll);
 +		if (reduced_clock)
 +			fp2 = i9xx_dpll_compute_fp(reduced_clock);
- 	}
- 
- 	crtc_state->dpll_hw_state.fp0 = fp;
++=======
+ 	u32 fp, fp2;
  
- 	if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_LVDS) &&
- 	    reduced_clock) {
- 		crtc_state->dpll_hw_state.fp1 = fp2;
+ 	if (IS_PINEVIEW(dev_priv)) {
+ 		fp = pnv_dpll_compute_fp(clock);
+ 		fp2 = pnv_dpll_compute_fp(reduced_clock);
  	} else {
- 		crtc_state->dpll_hw_state.fp1 = fp;
+ 		fp = i9xx_dpll_compute_fp(clock);
+ 		fp2 = i9xx_dpll_compute_fp(reduced_clock);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  	}
+ 
+ 	crtc_state->dpll_hw_state.fp0 = fp;
+ 	crtc_state->dpll_hw_state.fp1 = fp2;
  }
  
++<<<<<<< HEAD
 +static void i9xx_compute_dpll(struct intel_crtc *crtc,
 +			      struct intel_crtc_state *crtc_state,
 +			      struct dpll *reduced_clock)
++=======
+ static void i9xx_compute_dpll(struct intel_crtc_state *crtc_state,
+ 			      const struct dpll *clock,
+ 			      const struct dpll *reduced_clock)
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  {
 -	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
  	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
  	u32 dpll;
 +	struct dpll *clock = &crtc_state->dpll;
  
++<<<<<<< HEAD
 +	i9xx_update_pll_dividers(crtc, crtc_state, reduced_clock);
++=======
+ 	i9xx_update_pll_dividers(crtc_state, clock, reduced_clock);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	dpll = DPLL_VGA_MODE_DIS;
  
@@@ -845,7 -854,9 +870,13 @@@
  		dpll |= DPLLB_LVDS_P2_CLOCK_DIV_14;
  		break;
  	}
++<<<<<<< HEAD
 +	if (INTEL_GEN(dev_priv) >= 4)
++=======
+ 	WARN_ON(reduced_clock->p2 != clock->p2);
+ 
+ 	if (DISPLAY_VER(dev_priv) >= 4)
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  		dpll |= (6 << PLL_LOAD_PULSE_PHASE_SHIFT);
  
  	if (crtc_state->sdvo_tv_clock)
@@@ -866,16 -877,15 +897,29 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static void i8xx_compute_dpll(struct intel_crtc *crtc,
 +			      struct intel_crtc_state *crtc_state,
 +			      struct dpll *reduced_clock)
 +{
 +	struct drm_device *dev = crtc->base.dev;
 +	struct drm_i915_private *dev_priv = to_i915(dev);
++=======
+ static void i8xx_compute_dpll(struct intel_crtc_state *crtc_state,
+ 			      const struct dpll *clock,
+ 			      const struct dpll *reduced_clock)
+ {
+ 	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
+ 	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  	u32 dpll;
 +	struct dpll *clock = &crtc_state->dpll;
  
++<<<<<<< HEAD
 +	i9xx_update_pll_dividers(crtc, crtc_state, reduced_clock);
++=======
+ 	i9xx_update_pll_dividers(crtc_state, clock, reduced_clock);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	dpll = DPLL_VGA_MODE_DIS;
  
@@@ -944,13 -957,13 +990,23 @@@ static bool ilk_needs_fb_cb_tune(struc
  	return i9xx_dpll_compute_m(dpll) < factor * dpll->n;
  }
  
++<<<<<<< HEAD
 +
 +static void ilk_update_pll_dividers(struct intel_crtc *crtc,
 +				    struct intel_crtc_state *crtc_state,
 +				    struct dpll *reduced_clock)
++=======
+ static void ilk_update_pll_dividers(struct intel_crtc_state *crtc_state,
+ 				    const struct dpll *clock,
+ 				    const struct dpll *reduced_clock)
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  {
 -	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
  	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
++<<<<<<< HEAD
 +	u32 fp, fp2 = 0;
++=======
+ 	u32 fp, fp2;
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  	int factor;
  
  	/* Enable autotuning of the PLL clock (if permissible) */
@@@ -965,30 -978,27 +1021,42 @@@
  		factor = 20;
  	}
  
++<<<<<<< HEAD
 +	fp = i9xx_dpll_compute_fp(&crtc_state->dpll);
 +
 +	if (ilk_needs_fb_cb_tune(&crtc_state->dpll, factor))
++=======
+ 	fp = i9xx_dpll_compute_fp(clock);
+ 	if (ilk_needs_fb_cb_tune(clock, factor))
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  		fp |= FP_CB_TUNE;
  
- 	if (reduced_clock) {
- 		fp2 = i9xx_dpll_compute_fp(reduced_clock);
- 
- 		if (reduced_clock->m < factor * reduced_clock->n)
- 			fp2 |= FP_CB_TUNE;
- 	}
+ 	fp2 = i9xx_dpll_compute_fp(reduced_clock);
+ 	if (reduced_clock->m < factor * reduced_clock->n)
+ 		fp2 |= FP_CB_TUNE;
  
  	crtc_state->dpll_hw_state.fp0 = fp;
- 	crtc_state->dpll_hw_state.fp1 = reduced_clock ? fp2 : fp;
+ 	crtc_state->dpll_hw_state.fp1 = fp2;
  }
  
++<<<<<<< HEAD
 +static void ilk_compute_dpll(struct intel_crtc *crtc,
 +			     struct intel_crtc_state *crtc_state,
 +			     struct dpll *reduced_clock)
++=======
+ static void ilk_compute_dpll(struct intel_crtc_state *crtc_state,
+ 			     const struct dpll *clock,
+ 			     const struct dpll *reduced_clock)
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  {
 -	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
  	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
  	u32 dpll;
  
++<<<<<<< HEAD
 +	ilk_update_pll_dividers(crtc, crtc_state, reduced_clock);
++=======
+ 	ilk_update_pll_dividers(crtc_state, clock, reduced_clock);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	dpll = 0;
  
@@@ -1026,11 -1036,11 +1094,15 @@@
  		dpll |= DPLL_SDVO_HIGH_SPEED;
  
  	/* compute bitmask from p1 value */
 -	dpll |= (1 << (clock->p1 - 1)) << DPLL_FPA01_P1_POST_DIV_SHIFT;
 +	dpll |= (1 << (crtc_state->dpll.p1 - 1)) << DPLL_FPA01_P1_POST_DIV_SHIFT;
  	/* also FPA1 */
++<<<<<<< HEAD
 +	dpll |= (1 << (crtc_state->dpll.p1 - 1)) << DPLL_FPA1_P1_POST_DIV_SHIFT;
++=======
+ 	dpll |= (1 << (reduced_clock->p1 - 1)) << DPLL_FPA1_P1_POST_DIV_SHIFT;
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
 -	switch (clock->p2) {
 +	switch (crtc_state->dpll.p2) {
  	case 5:
  		dpll |= DPLL_DAC_SERIAL_P2_CLOCK_DIV_5;
  		break;
@@@ -1103,7 -1114,8 +1176,12 @@@ static int ilk_crtc_compute_clock(struc
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	ilk_compute_dpll(crtc, crtc_state, NULL);
++=======
+ 	ilk_compute_dpll(crtc_state, &crtc_state->dpll,
+ 			 &crtc_state->dpll);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	if (!intel_reserve_shared_dplls(state, crtc, NULL)) {
  		drm_dbg_kms(&dev_priv->drm,
@@@ -1232,7 -1244,8 +1310,12 @@@ static int g4x_crtc_compute_clock(struc
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	i9xx_compute_dpll(crtc, crtc_state, NULL);
++=======
+ 	i9xx_compute_dpll(crtc_state, &crtc_state->dpll,
+ 			  &crtc_state->dpll);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	return 0;
  }
@@@ -1269,7 -1281,8 +1352,12 @@@ static int pnv_crtc_compute_clock(struc
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	i9xx_compute_dpll(crtc, crtc_state, NULL);
++=======
+ 	i9xx_compute_dpll(crtc_state, &crtc_state->dpll,
+ 			  &crtc_state->dpll);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	return 0;
  }
@@@ -1306,7 -1318,8 +1394,12 @@@ static int i9xx_crtc_compute_clock(stru
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	i9xx_compute_dpll(crtc, crtc_state, NULL);
++=======
+ 	i9xx_compute_dpll(crtc_state, &crtc_state->dpll,
+ 			  &crtc_state->dpll);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	return 0;
  }
@@@ -1345,7 -1357,8 +1438,12 @@@ static int i8xx_crtc_compute_clock(stru
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	i8xx_compute_dpll(crtc, crtc_state, NULL);
++=======
+ 	i8xx_compute_dpll(crtc_state, &crtc_state->dpll,
+ 			  &crtc_state->dpll);
++>>>>>>> 98b27e79898b (drm/i915: Program DPLL P1 dividers consistently)
  
  	return 0;
  }
* Unmerged path drivers/gpu/drm/i915/display/intel_dpll.c
