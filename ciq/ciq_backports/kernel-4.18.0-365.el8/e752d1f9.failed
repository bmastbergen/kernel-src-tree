drm/i915/dg2: add DG2 UHBR source rates

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Jani Nikula <jani.nikula@intel.com>
commit e752d1f9c14a61b0996bdbcaf024ef587c6af9d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/e752d1f9.failed

DG2 supports DP 2.0 UHBR and 128b/132b channel encoding.

Bspec: 53657, 54034
	Acked-by: Manasi Navare <manasi.d.navare@intel.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/8f82b7eb76f20f1c4ddd2cc7d1bb31e2173c55a6.1629735412.git.jani.nikula@intel.com
(cherry picked from commit e752d1f9c14a61b0996bdbcaf024ef587c6af9d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dp.c
diff --cc drivers/gpu/drm/i915/display/intel_dp.c
index 97a785aa8839,1a0eb4c4d666..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dp.c
+++ b/drivers/gpu/drm/i915/display/intel_dp.c
@@@ -265,27 -242,9 +265,33 @@@ bool intel_dp_can_bigjoiner(struct inte
  		 encoder->port != PORT_A);
  }
  
++<<<<<<< HEAD
 +static int cnl_max_source_rate(struct intel_dp *intel_dp)
 +{
 +	struct intel_digital_port *dig_port = dp_to_dig_port(intel_dp);
 +	struct drm_i915_private *dev_priv = to_i915(dig_port->base.base.dev);
 +	enum port port = dig_port->base.port;
 +
 +	u32 voltage = intel_de_read(dev_priv, CNL_PORT_COMP_DW3) & VOLTAGE_INFO_MASK;
 +
 +	/* Low voltage SKUs are limited to max of 5.4G */
 +	if (voltage == VOLTAGE_INFO_0_85V)
 +		return 540000;
 +
 +	/* For this SKU 8.1G is supported in all ports */
 +	if (IS_CNL_WITH_PORT_F(dev_priv))
 +		return 810000;
 +
 +	/* For other SKUs, max rate on ports A and D is 5.4G */
 +	if (port == PORT_A || port == PORT_D)
 +		return 540000;
 +
 +	return 810000;
++=======
+ static int dg2_max_source_rate(struct intel_dp *intel_dp)
+ {
+ 	return intel_dp_is_edp(intel_dp) ? 810000 : 1350000;
++>>>>>>> e752d1f9c14a (drm/i915/dg2: add DG2 UHBR source rates)
  }
  
  static int icl_max_source_rate(struct intel_dp *intel_dp)
@@@ -313,8 -272,9 +319,14 @@@ static voi
  intel_dp_set_source_rates(struct intel_dp *intel_dp)
  {
  	/* The values must be in increasing order */
++<<<<<<< HEAD
 +	static const int cnl_rates[] = {
 +		162000, 216000, 270000, 324000, 432000, 540000, 648000, 810000
++=======
+ 	static const int icl_rates[] = {
+ 		162000, 216000, 270000, 324000, 432000, 540000, 648000, 810000,
+ 		1000000, 1350000,
++>>>>>>> e752d1f9c14a (drm/i915/dg2: add DG2 UHBR source rates)
  	};
  	static const int bxt_rates[] = {
  		162000, 216000, 243000, 270000, 324000, 432000, 540000
@@@ -338,12 -298,12 +350,21 @@@
  	drm_WARN_ON(&dev_priv->drm,
  		    intel_dp->source_rates || intel_dp->num_source_rates);
  
++<<<<<<< HEAD
 +	if (INTEL_GEN(dev_priv) >= 10) {
 +		source_rates = cnl_rates;
 +		size = ARRAY_SIZE(cnl_rates);
 +		if (IS_GEN(dev_priv, 10))
 +			max_rate = cnl_max_source_rate(intel_dp);
 +		else if (IS_JSL_EHL(dev_priv))
++=======
+ 	if (DISPLAY_VER(dev_priv) >= 11) {
+ 		source_rates = icl_rates;
+ 		size = ARRAY_SIZE(icl_rates);
+ 		if (IS_DG2(dev_priv))
+ 			max_rate = dg2_max_source_rate(intel_dp);
+ 		if (IS_JSL_EHL(dev_priv))
++>>>>>>> e752d1f9c14a (drm/i915/dg2: add DG2 UHBR source rates)
  			max_rate = ehl_max_source_rate(intel_dp);
  		else
  			max_rate = icl_max_source_rate(intel_dp);
* Unmerged path drivers/gpu/drm/i915/display/intel_dp.c
