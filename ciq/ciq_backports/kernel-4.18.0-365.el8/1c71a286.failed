iio: Add relative sensitivity support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Ye Xiang <xiang.ye@intel.com>
commit 1c71a2863a0c56123e5a67880cf658083c0a0b1e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/1c71a286.failed

Some hid sensors may use relative sensitivity such as als sensor.
This patch adds relative sensitivity checking for all hid sensors.

	Signed-off-by: Ye Xiang <xiang.ye@intel.com>
	Acked-by: Jiri Kosina <jkosina@suse.cz>
Link: https://lore.kernel.org/r/20210207070048.23935-2-xiang.ye@intel.com
	Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
(cherry picked from commit 1c71a2863a0c56123e5a67880cf658083c0a0b1e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/common/hid-sensors/hid-sensor-attributes.c
diff --cc drivers/iio/common/hid-sensors/hid-sensor-attributes.c
index 8511b0132142,cb52b4fd6bf7..000000000000
--- a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
@@@ -468,6 -532,30 +522,33 @@@ int hid_sensor_parse_common_attributes(
  			HID_USAGE_SENSOR_PROP_SENSITIVITY_ABS,
  			 &st->sensitivity);
  
++<<<<<<< HEAD
++=======
+ 	sensor_hub_input_get_attribute_info(hsdev,
+ 			HID_FEATURE_REPORT, usage_id,
+ 			HID_USAGE_SENSOR_PROP_SENSITIVITY_REL_PCT,
+ 			&st->sensitivity_rel);
+ 	/*
+ 	 * Set Sensitivity field ids, when there is no individual modifier, will
+ 	 * check absolute sensitivity and relative sensitivity of data field
+ 	 */
+ 	for (i = 0; i < sensitivity_addresses_len; i++) {
+ 		if (st->sensitivity.index < 0)
+ 			sensor_hub_input_get_attribute_info(
+ 				hsdev, HID_FEATURE_REPORT, usage_id,
+ 				HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS |
+ 					sensitivity_addresses[i],
+ 				&st->sensitivity);
+ 
+ 		if (st->sensitivity_rel.index < 0)
+ 			sensor_hub_input_get_attribute_info(
+ 				hsdev, HID_FEATURE_REPORT, usage_id,
+ 				HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_REL_PCT |
+ 					sensitivity_addresses[i],
+ 				&st->sensitivity_rel);
+ 	}
+ 
++>>>>>>> 1c71a2863a0c (iio: Add relative sensitivity support)
  	st->raw_hystersis = -1;
  
  	sensor_hub_input_get_attribute_info(hsdev,
* Unmerged path drivers/iio/common/hid-sensors/hid-sensor-attributes.c
diff --git a/drivers/iio/industrialio-core.c b/drivers/iio/industrialio-core.c
index d2df625b3636..dbe27913ecf9 100644
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@ -147,6 +147,7 @@ static const char * const iio_chan_info_postfix[] = {
 	[IIO_CHAN_INFO_PHASE] = "phase",
 	[IIO_CHAN_INFO_HARDWAREGAIN] = "hardwaregain",
 	[IIO_CHAN_INFO_HYSTERESIS] = "hysteresis",
+	[IIO_CHAN_INFO_HYSTERESIS_RELATIVE] = "hysteresis_relative",
 	[IIO_CHAN_INFO_INT_TIME] = "integration_time",
 	[IIO_CHAN_INFO_ENABLE] = "en",
 	[IIO_CHAN_INFO_CALIBHEIGHT] = "calibheight",
diff --git a/include/linux/hid-sensor-hub.h b/include/linux/hid-sensor-hub.h
index 763802b2b8f9..1afa1b9787c1 100644
--- a/include/linux/hid-sensor-hub.h
+++ b/include/linux/hid-sensor-hub.h
@@ -231,6 +231,7 @@ struct hid_sensor_common {
 	struct hid_sensor_hub_attribute_info report_state;
 	struct hid_sensor_hub_attribute_info power_state;
 	struct hid_sensor_hub_attribute_info sensitivity;
+	struct hid_sensor_hub_attribute_info sensitivity_rel;
 	struct hid_sensor_hub_attribute_info report_latency;
 	struct work_struct work;
 };
@@ -251,8 +252,12 @@ int hid_sensor_parse_common_attributes(struct hid_sensor_hub_device *hsdev,
 					struct hid_sensor_common *st);
 int hid_sensor_write_raw_hyst_value(struct hid_sensor_common *st,
 					int val1, int val2);
+int hid_sensor_write_raw_hyst_rel_value(struct hid_sensor_common *st, int val1,
+					int val2);
 int hid_sensor_read_raw_hyst_value(struct hid_sensor_common *st,
 					int *val1, int *val2);
+int hid_sensor_read_raw_hyst_rel_value(struct hid_sensor_common *st,
+				       int *val1, int *val2);
 int hid_sensor_write_samp_freq_value(struct hid_sensor_common *st,
 					int val1, int val2);
 int hid_sensor_read_samp_freq_value(struct hid_sensor_common *st,
diff --git a/include/linux/hid-sensor-ids.h b/include/linux/hid-sensor-ids.h
index 3bbdbccc5805..ac631159403a 100644
--- a/include/linux/hid-sensor-ids.h
+++ b/include/linux/hid-sensor-ids.h
@@ -149,6 +149,7 @@
 /* Per data field properties */
 #define HID_USAGE_SENSOR_DATA_MOD_NONE					0x00
 #define HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS		0x1000
+#define HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_REL_PCT            0xE000
 
 /* Power state enumerations */
 #define HID_USAGE_SENSOR_PROP_POWER_STATE_UNDEFINED_ENUM	0x200850
diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 6eb3d683ef62..4e976ea537a3 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -52,6 +52,7 @@ enum iio_chan_info_enum {
 	IIO_CHAN_INFO_PHASE,
 	IIO_CHAN_INFO_HARDWAREGAIN,
 	IIO_CHAN_INFO_HYSTERESIS,
+	IIO_CHAN_INFO_HYSTERESIS_RELATIVE,
 	IIO_CHAN_INFO_INT_TIME,
 	IIO_CHAN_INFO_ENABLE,
 	IIO_CHAN_INFO_CALIBHEIGHT,
