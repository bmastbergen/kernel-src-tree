net: stmmac: Add GFP_DMA32 for rx buffers if no 64 capability

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author David Wu <david.wu@rock-chips.com>
commit 884d2b845477cd0a18302444dc20fe2d9a01743e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/884d2b84.failed

Use page_pool_alloc_pages instead of page_pool_dev_alloc_pages, which
can give the gfp parameter, in the case of not supporting 64-bit width,
using 32-bit address memory can reduce a copy from swiotlb.

	Signed-off-by: David Wu <david.wu@rock-chips.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 884d2b845477cd0a18302444dc20fe2d9a01743e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
diff --cc drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 81f686809507,8ded4be08b00..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@@ -1390,13 -1461,20 +1390,29 @@@ static int stmmac_init_rx_buffers(struc
  {
  	struct stmmac_rx_queue *rx_q = &priv->rx_queue[queue];
  	struct stmmac_rx_buffer *buf = &rx_q->buf_pool[i];
+ 	gfp_t gfp = (GFP_ATOMIC | __GFP_NOWARN);
  
+ 	if (priv->dma_cap.addr64 <= 32)
+ 		gfp |= GFP_DMA32;
+ 
++<<<<<<< HEAD
 +	buf->page = page_pool_dev_alloc_pages(rx_q->page_pool);
 +	if (!buf->page)
 +		return -ENOMEM;
 +
 +	if (priv->sph) {
 +		buf->sec_page = page_pool_dev_alloc_pages(rx_q->page_pool);
++=======
+ 	if (!buf->page) {
+ 		buf->page = page_pool_alloc_pages(rx_q->page_pool, gfp);
+ 		if (!buf->page)
+ 			return -ENOMEM;
+ 		buf->page_offset = stmmac_rx_offset(priv);
+ 	}
+ 
+ 	if (priv->sph && !buf->sec_page) {
+ 		buf->sec_page = page_pool_alloc_pages(rx_q->page_pool, gfp);
++>>>>>>> 884d2b845477 (net: stmmac: Add GFP_DMA32 for rx buffers if no 64 capability)
  		if (!buf->sec_page)
  			return -ENOMEM;
  
@@@ -3997,11 -4484,13 +4013,15 @@@ static void stmmac_rx_vlan(struct net_d
  static inline void stmmac_rx_refill(struct stmmac_priv *priv, u32 queue)
  {
  	struct stmmac_rx_queue *rx_q = &priv->rx_queue[queue];
 -	int dirty = stmmac_rx_dirty(priv, queue);
 +	int len, dirty = stmmac_rx_dirty(priv, queue);
  	unsigned int entry = rx_q->dirty_rx;
+ 	gfp_t gfp = (GFP_ATOMIC | __GFP_NOWARN);
+ 
+ 	if (priv->dma_cap.addr64 <= 32)
+ 		gfp |= GFP_DMA32;
  
 +	len = DIV_ROUND_UP(priv->dma_buf_sz, PAGE_SIZE) * PAGE_SIZE;
 +
  	while (dirty-- > 0) {
  		struct stmmac_rx_buffer *buf = &rx_q->buf_pool[entry];
  		struct dma_desc *p;
* Unmerged path drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
