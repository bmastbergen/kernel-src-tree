block: make QUEUE_SYSFS_BIT_FNS more useful

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Christoph Hellwig <hch@lst.de>
commit fc93fe145316dad6186d8eb4b4f49f68b1cba0c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/fc93fe14.failed

Switch to the naming used by the other entries so that we can use the
QUEUE_RW_ENTRY helper.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit fc93fe145316dad6186d8eb4b4f49f68b1cba0c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-sysfs.c
diff --cc block/blk-sysfs.c
index 69ff6dc18eaa,81722cdcf0cb..000000000000
--- a/block/blk-sysfs.c
+++ b/block/blk-sysfs.c
@@@ -261,41 -258,9 +261,41 @@@ static ssize_t queue_max_hw_sectors_sho
  	return queue_var_show(max_hw_sectors_kb, (page));
  }
  
 +static ssize_t
 +queue_show_unpriv_sgio(struct request_queue *q, char *page)
 +{
 +	int bit;
 +	bit = test_bit(QUEUE_FLAG_UNPRIV_SGIO, &q->queue_flags);
 +	return queue_var_show(bit, page);
 +}
 +static ssize_t
 +queue_store_unpriv_sgio(struct request_queue *q, const char *page, size_t count)
 +{
 +	unsigned long val;
 +	ssize_t ret;
 +
 +	if (!capable(CAP_SYS_ADMIN))
 +		return -EPERM;
 +
 +	ret = queue_var_store(&val, page, count);
 +	if (ret < 0)
 +		return ret;
 +
 +	if (val)
 +		blk_queue_flag_set(QUEUE_FLAG_UNPRIV_SGIO, q);
 +	else
 +		blk_queue_flag_clear(QUEUE_FLAG_UNPRIV_SGIO, q);
 +	return ret;
 +}
 +
 +static ssize_t queue_virt_boundary_mask_show(struct request_queue *q, char *page)
 +{
 +	return queue_var_show(q->limits.virt_boundary_mask, (page));
 +}
 +
  #define QUEUE_SYSFS_BIT_FNS(name, flag, neg)				\
  static ssize_t								\
- queue_show_##name(struct request_queue *q, char *page)			\
+ queue_##name##_show(struct request_queue *q, char *page)		\
  {									\
  	int bit;							\
  	bit = test_bit(QUEUE_FLAG_##flag, &q->queue_flags);		\
@@@ -629,167 -610,11 +629,173 @@@ static struct queue_sysfs_entry queue_h
  	.show = queue_logical_block_size_show,
  };
  
++<<<<<<< HEAD
 +static struct queue_sysfs_entry queue_logical_block_size_entry = {
 +	.attr = {.name = "logical_block_size", .mode = 0444 },
 +	.show = queue_logical_block_size_show,
 +};
 +
 +static struct queue_sysfs_entry queue_physical_block_size_entry = {
 +	.attr = {.name = "physical_block_size", .mode = 0444 },
 +	.show = queue_physical_block_size_show,
 +};
 +
 +static struct queue_sysfs_entry queue_chunk_sectors_entry = {
 +	.attr = {.name = "chunk_sectors", .mode = 0444 },
 +	.show = queue_chunk_sectors_show,
 +};
 +
 +static struct queue_sysfs_entry queue_io_min_entry = {
 +	.attr = {.name = "minimum_io_size", .mode = 0444 },
 +	.show = queue_io_min_show,
 +};
 +
 +static struct queue_sysfs_entry queue_io_opt_entry = {
 +	.attr = {.name = "optimal_io_size", .mode = 0444 },
 +	.show = queue_io_opt_show,
 +};
 +
 +static struct queue_sysfs_entry queue_discard_granularity_entry = {
 +	.attr = {.name = "discard_granularity", .mode = 0444 },
 +	.show = queue_discard_granularity_show,
 +};
 +
 +static struct queue_sysfs_entry queue_discard_max_hw_entry = {
 +	.attr = {.name = "discard_max_hw_bytes", .mode = 0444 },
 +	.show = queue_discard_max_hw_show,
 +};
 +
 +static struct queue_sysfs_entry queue_discard_max_entry = {
 +	.attr = {.name = "discard_max_bytes", .mode = 0644 },
 +	.show = queue_discard_max_show,
 +	.store = queue_discard_max_store,
 +};
 +
 +static struct queue_sysfs_entry queue_discard_zeroes_data_entry = {
 +	.attr = {.name = "discard_zeroes_data", .mode = 0444 },
 +	.show = queue_discard_zeroes_data_show,
 +};
 +
 +static struct queue_sysfs_entry queue_unpriv_sgio_entry = {
 +	.attr = {.name = "unpriv_sgio", .mode = S_IRUGO | S_IWUSR },
 +	.show = queue_show_unpriv_sgio,
 +	.store = queue_store_unpriv_sgio,
 +};
 +
 +static struct queue_sysfs_entry queue_write_same_max_entry = {
 +	.attr = {.name = "write_same_max_bytes", .mode = 0444 },
 +	.show = queue_write_same_max_show,
 +};
 +
 +static struct queue_sysfs_entry queue_write_zeroes_max_entry = {
 +	.attr = {.name = "write_zeroes_max_bytes", .mode = 0444 },
 +	.show = queue_write_zeroes_max_show,
 +};
 +
 +static struct queue_sysfs_entry queue_zone_append_max_entry = {
 +	.attr = {.name = "zone_append_max_bytes", .mode = 0444 },
 +	.show = queue_zone_append_max_show,
 +};
 +
 +static struct queue_sysfs_entry queue_nonrot_entry = {
 +	.attr = {.name = "rotational", .mode = 0644 },
 +	.show = queue_show_nonrot,
 +	.store = queue_store_nonrot,
 +};
 +
 +static struct queue_sysfs_entry queue_zoned_entry = {
 +	.attr = {.name = "zoned", .mode = 0444 },
 +	.show = queue_zoned_show,
 +};
 +
 +static struct queue_sysfs_entry queue_nr_zones_entry = {
 +	.attr = {.name = "nr_zones", .mode = 0444 },
 +	.show = queue_nr_zones_show,
 +};
 +
 +static struct queue_sysfs_entry queue_nomerges_entry = {
 +	.attr = {.name = "nomerges", .mode = 0644 },
 +	.show = queue_nomerges_show,
 +	.store = queue_nomerges_store,
 +};
 +
 +static struct queue_sysfs_entry queue_rq_affinity_entry = {
 +	.attr = {.name = "rq_affinity", .mode = 0644 },
 +	.show = queue_rq_affinity_show,
 +	.store = queue_rq_affinity_store,
 +};
 +
 +static struct queue_sysfs_entry queue_iostats_entry = {
 +	.attr = {.name = "iostats", .mode = 0644 },
 +	.show = queue_show_iostats,
 +	.store = queue_store_iostats,
 +};
 +
 +static struct queue_sysfs_entry queue_random_entry = {
 +	.attr = {.name = "add_random", .mode = 0644 },
 +	.show = queue_show_random,
 +	.store = queue_store_random,
 +};
++=======
+ QUEUE_RW_ENTRY(queue_nonrot, "rotational");
+ QUEUE_RW_ENTRY(queue_iostats, "iostats");
+ QUEUE_RW_ENTRY(queue_random, "add_random");
++>>>>>>> fc93fe145316 (block: make QUEUE_SYSFS_BIT_FNS more useful)
 +
 +static struct queue_sysfs_entry queue_poll_entry = {
 +	.attr = {.name = "io_poll", .mode = 0644 },
 +	.show = queue_poll_show,
 +	.store = queue_poll_store,
 +};
 +
 +static struct queue_sysfs_entry queue_poll_delay_entry = {
 +	.attr = {.name = "io_poll_delay", .mode = 0644 },
 +	.show = queue_poll_delay_show,
 +	.store = queue_poll_delay_store,
 +};
 +
 +static struct queue_sysfs_entry queue_wc_entry = {
 +	.attr = {.name = "write_cache", .mode = 0644 },
 +	.show = queue_wc_show,
 +	.store = queue_wc_store,
 +};
  
 -static struct attribute *queue_attrs[] = {
 +static struct queue_sysfs_entry queue_fua_entry = {
 +	.attr = {.name = "fua", .mode = 0444 },
 +	.show = queue_fua_show,
 +};
 +
 +static struct queue_sysfs_entry queue_dax_entry = {
 +	.attr = {.name = "dax", .mode = 0444 },
 +	.show = queue_dax_show,
 +};
 +
 +static struct queue_sysfs_entry queue_io_timeout_entry = {
 +	.attr = {.name = "io_timeout", .mode = 0644 },
 +	.show = queue_io_timeout_show,
 +	.store = queue_io_timeout_store,
 +};
 +
 +static struct queue_sysfs_entry queue_wb_lat_entry = {
 +	.attr = {.name = "wbt_lat_usec", .mode = 0644 },
 +	.show = queue_wb_lat_show,
 +	.store = queue_wb_lat_store,
 +};
 +
 +#ifdef CONFIG_BLK_DEV_THROTTLING_LOW
 +static struct queue_sysfs_entry throtl_sample_time_entry = {
 +	.attr = {.name = "throttle_sample_time", .mode = 0644 },
 +	.show = blk_throtl_sample_time_show,
 +	.store = blk_throtl_sample_time_store,
 +};
 +#endif
 +
 +static struct queue_sysfs_entry queue_virt_boundary_mask_entry = {
 +	.attr = {.name = "virt_boundary_mask", .mode = 0444 },
 +	.show = queue_virt_boundary_mask_show,
 +};
 +
 +static struct attribute *default_attrs[] = {
  	&queue_requests_entry.attr,
  	&queue_ra_entry.attr,
  	&queue_max_hw_sectors_entry.attr,
* Unmerged path block/blk-sysfs.c
