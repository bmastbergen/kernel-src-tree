kasan: don't round_up too much

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit d99f6a10c161227ae7a698470b1cff7b33734d4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/d99f6a10.failed

For hardware tag-based mode kasan_poison_memory() already rounds up the
size. Do the same for software modes and remove round_up() from the common
code.

Link: https://lkml.kernel.org/r/47b232474f1f89dc072aeda0fa58daa6efade377.1606162397.git.andreyknvl@google.com
Link: https://linux-review.googlesource.com/id/Ib397128fac6eba874008662b4964d65352db4aa4
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d99f6a10c161227ae7a698470b1cff7b33734d4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/common.c
#	mm/kasan/shadow.c
diff --cc mm/kasan/common.c
index e989322c0f3f,e3cfe156f693..000000000000
--- a/mm/kasan/common.c
+++ b/mm/kasan/common.c
@@@ -306,22 -200,20 +306,26 @@@ void kasan_poison_slab(struct page *pag
  {
  	unsigned long i;
  
 -	for (i = 0; i < compound_nr(page); i++)
 +	for (i = 0; i < (1 << compound_order(page)); i++)
  		page_kasan_tag_reset(page + i);
 -	poison_range(page_address(page), page_size(page),
 -		     KASAN_KMALLOC_REDZONE);
 +	kasan_poison_shadow(page_address(page), page_size(page),
 +			KASAN_KMALLOC_REDZONE);
  }
  
 -void __kasan_unpoison_object_data(struct kmem_cache *cache, void *object)
 +void kasan_unpoison_object_data(struct kmem_cache *cache, void *object)
  {
 -	unpoison_range(object, cache->object_size);
 +	kasan_unpoison_shadow(object, cache->object_size);
  }
  
 -void __kasan_poison_object_data(struct kmem_cache *cache, void *object)
 +void kasan_poison_object_data(struct kmem_cache *cache, void *object)
  {
++<<<<<<< HEAD
 +	kasan_poison_shadow(object,
 +			round_up(cache->object_size, KASAN_SHADOW_SCALE_SIZE),
 +			KASAN_KMALLOC_REDZONE);
++=======
+ 	poison_range(object, cache->object_size, KASAN_KMALLOC_REDZONE);
++>>>>>>> d99f6a10c161 (kasan: don't round_up too much)
  }
  
  /*
@@@ -388,28 -281,11 +392,27 @@@ void * __must_check kasan_init_slab_obj
  	return (void *)object;
  }
  
 -static bool ____kasan_slab_free(struct kmem_cache *cache, void *object,
 +static inline bool shadow_invalid(u8 tag, s8 shadow_byte)
 +{
 +	if (IS_ENABLED(CONFIG_KASAN_GENERIC))
 +		return shadow_byte < 0 ||
 +			shadow_byte >= KASAN_SHADOW_SCALE_SIZE;
 +
 +	/* else CONFIG_KASAN_SW_TAGS: */
 +	if ((u8)shadow_byte == KASAN_TAG_INVALID)
 +		return true;
 +	if ((tag != KASAN_TAG_KERNEL) && (tag != (u8)shadow_byte))
 +		return true;
 +
 +	return false;
 +}
 +
 +static bool __kasan_slab_free(struct kmem_cache *cache, void *object,
  			      unsigned long ip, bool quarantine)
  {
 +	s8 shadow_byte;
  	u8 tag;
  	void *tagged_object;
- 	unsigned long rounded_up_size;
  
  	tag = get_tag(object);
  	tagged_object = object;
@@@ -431,8 -306,10 +434,15 @@@
  		return true;
  	}
  
++<<<<<<< HEAD
 +	rounded_up_size = round_up(cache->object_size, KASAN_SHADOW_SCALE_SIZE);
 +	kasan_poison_shadow(object, rounded_up_size, KASAN_KMALLOC_FREE);
++=======
+ 	poison_range(object, cache->object_size, KASAN_KMALLOC_FREE);
+ 
+ 	if (!kasan_stack_collection_enabled())
+ 		return false;
++>>>>>>> d99f6a10c161 (kasan: don't round_up too much)
  
  	if ((IS_ENABLED(CONFIG_KASAN_GENERIC) && !quarantine) ||
  			unlikely(!(cache->flags & SLAB_KASAN)))
* Unmerged path mm/kasan/shadow.c
* Unmerged path mm/kasan/common.c
* Unmerged path mm/kasan/shadow.c
