x86/fpu: Add fpu_state_config::legacy_features

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit c33f0a81a2cf3920465309ce683534751bb86485
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/c33f0a81.failed

The upcoming prctl() which is required to request the permission for a
dynamically enabled feature will also provide an option to retrieve the
supported features. If the CPU does not support XSAVE, the supported
features would be 0 even when the CPU supports FP and SSE.

Provide separate storage for the legacy feature set to avoid that and fill
in the bits in the legacy init function.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Chang S. Bae <chang.seok.bae@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20211021225527.10184-6-chang.seok.bae@intel.com
(cherry picked from commit c33f0a81a2cf3920465309ce683534751bb86485)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/fpu/init.c
diff --cc arch/x86/kernel/fpu/init.c
index f076729aabd0,621f4b6cac4a..000000000000
--- a/arch/x86/kernel/fpu/init.c
+++ b/arch/x86/kernel/fpu/init.c
@@@ -193,18 -187,34 +193,30 @@@ static void __init fpu__init_task_struc
   */
  static void __init fpu__init_system_xstate_size_legacy(void)
  {
 -	unsigned int size;
 -
  	/*
 -	 * Note that the size configuration might be overwritten later
 -	 * during fpu__init_system_xstate().
 +	 * Note that xstate sizes might be overwritten later during
 +	 * fpu__init_system_xstate().
  	 */
++<<<<<<< HEAD
 +	if (!cpu_feature_enabled(X86_FEATURE_FPU))
 +		fpu_kernel_xstate_size = sizeof(struct swregs_state);
 +	else if (cpu_feature_enabled(X86_FEATURE_FXSR))
 +		fpu_kernel_xstate_size = sizeof(struct fxregs_state);
 +	else
 +		fpu_kernel_xstate_size = sizeof(struct fregs_state);
++=======
+ 	if (!cpu_feature_enabled(X86_FEATURE_FPU)) {
+ 		size = sizeof(struct swregs_state);
+ 	} else if (cpu_feature_enabled(X86_FEATURE_FXSR)) {
+ 		size = sizeof(struct fxregs_state);
+ 		fpu_user_cfg.legacy_features = XFEATURE_MASK_FPSSE;
+ 	} else {
+ 		size = sizeof(struct fregs_state);
+ 		fpu_user_cfg.legacy_features = XFEATURE_MASK_FP;
+ 	}
++>>>>>>> c33f0a81a2cf (x86/fpu: Add fpu_state_config::legacy_features)
  
 -	fpu_kernel_cfg.max_size = size;
 -	fpu_kernel_cfg.default_size = size;
 -	fpu_user_cfg.max_size = size;
 -	fpu_user_cfg.default_size = size;
 -	fpstate_reset(&current->thread.fpu);
 -}
 -
 -static void __init fpu__init_init_fpstate(void)
 -{
 -	/* Bring init_fpstate size and features up to date */
 -	init_fpstate.size		= fpu_kernel_cfg.max_size;
 -	init_fpstate.xfeatures		= fpu_kernel_cfg.max_features;
 +	fpu_user_xstate_size = fpu_kernel_xstate_size;
  }
  
  /*
diff --git a/arch/x86/include/asm/fpu/types.h b/arch/x86/include/asm/fpu/types.h
index 696fdf451047..b83eb6f67694 100644
--- a/arch/x86/include/asm/fpu/types.h
+++ b/arch/x86/include/asm/fpu/types.h
@@ -386,6 +386,13 @@ struct fpu_state_config {
 	 * be requested by user space before usage.
 	 */
 	u64 default_features;
+	/*
+	 * @legacy_features:
+	 *
+	 * Features which can be reported back to user space
+	 * even without XSAVE support, i.e. legacy features FP + SSE
+	 */
+	u64 legacy_features;
 };
 
 /* FPU state configuration information */
* Unmerged path arch/x86/kernel/fpu/init.c
