x86/fpu: Rework copy_xstate_to_uabi_buf()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit ca834defd33bae9cf9542ff92b15635a84e91946
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/ca834def.failed

Prepare for replacing the KVM copy xstate to user function by extending
copy_xstate_to_uabi_buf() with a pkru argument which allows the caller to
hand in the pkru value, which is required for KVM because the guest PKRU is
not accessible via current. Fixup all callsites accordingly.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20211015011539.191902137@linutronix.de
(cherry picked from commit ca834defd33bae9cf9542ff92b15635a84e91946)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/fpu/xstate.c
diff --cc arch/x86/kernel/fpu/xstate.c
index 450017624df2,b2537a8203ee..000000000000
--- a/arch/x86/kernel/fpu/xstate.c
+++ b/arch/x86/kernel/fpu/xstate.c
@@@ -1063,10 -1033,9 +1063,13 @@@ void __copy_xstate_to_uabi_buf(struct m
  			struct pkru_state pkru = {0};
  			/*
  			 * PKRU is not necessarily up to date in the
- 			 * thread's XSAVE buffer.  Fill this part from the
- 			 * per-thread storage.
+ 			 * XSAVE buffer. Use the provided value.
  			 */
++<<<<<<< HEAD
 +			pkru.pkru = tsk->task_struct_rh->pkru;
++=======
+ 			pkru.pkru = pkru_val;
++>>>>>>> ca834defd33b (x86/fpu: Rework copy_xstate_to_uabi_buf())
  			membuf_write(&to, &pkru, sizeof(pkru));
  		} else {
  			copy_feature(header.xfeatures & BIT_ULL(i), &to,
* Unmerged path arch/x86/kernel/fpu/xstate.c
diff --git a/arch/x86/kernel/fpu/xstate.h b/arch/x86/kernel/fpu/xstate.h
index 0789a04ee705..81f4202781ac 100644
--- a/arch/x86/kernel/fpu/xstate.h
+++ b/arch/x86/kernel/fpu/xstate.h
@@ -15,4 +15,7 @@ static inline void xstate_init_xcomp_bv(struct xregs_state *xsave, u64 mask)
 		xsave->header.xcomp_bv = mask | XCOMP_BV_COMPACTED_FORMAT;
 }
 
+extern void __copy_xstate_to_uabi_buf(struct membuf to, struct xregs_state *xsave,
+				      u32 pkru_val, enum xstate_copy_mode copy_mode);
+
 #endif
