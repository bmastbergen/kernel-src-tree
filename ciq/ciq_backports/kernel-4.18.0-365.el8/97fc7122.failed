kasan: decode stack frame only with KASAN_STACK_ENABLE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit 97fc712232368ddeabd91cdabf40da9b2155c033
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/97fc7122.failed

Decoding routines aren't needed when CONFIG_KASAN_STACK_ENABLE is not
enabled.  Currently only generic KASAN mode implements stack error
reporting.

No functional changes for software modes.

Link: https://lkml.kernel.org/r/05a24db36f5ec876af876a299bbea98c29468ebd.1606161801.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Reviewed-by: Alexander Potapenko <glider@google.com>
	Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 97fc712232368ddeabd91cdabf40da9b2155c033)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/report.c
diff --cc mm/kasan/report.c
index abb2fbfc9202,d140d26cfb31..000000000000
--- a/mm/kasan/report.c
+++ b/mm/kasan/report.c
@@@ -208,168 -211,6 +208,171 @@@ static inline bool init_task_stack_addr
  			sizeof(init_thread_union.stack));
  }
  
++<<<<<<< HEAD
 +static bool __must_check tokenize_frame_descr(const char **frame_descr,
 +					      char *token, size_t max_tok_len,
 +					      unsigned long *value)
 +{
 +	const char *sep = strchr(*frame_descr, ' ');
 +
 +	if (sep == NULL)
 +		sep = *frame_descr + strlen(*frame_descr);
 +
 +	if (token != NULL) {
 +		const size_t tok_len = sep - *frame_descr;
 +
 +		if (tok_len + 1 > max_tok_len) {
 +			pr_err("KASAN internal error: frame description too long: %s\n",
 +			       *frame_descr);
 +			return false;
 +		}
 +
 +		/* Copy token (+ 1 byte for '\0'). */
 +		strlcpy(token, *frame_descr, tok_len + 1);
 +	}
 +
 +	/* Advance frame_descr past separator. */
 +	*frame_descr = sep + 1;
 +
 +	if (value != NULL && kstrtoul(token, 10, value)) {
 +		pr_err("KASAN internal error: not a valid number: %s\n", token);
 +		return false;
 +	}
 +
 +	return true;
 +}
 +
 +static void print_decoded_frame_descr(const char *frame_descr)
 +{
 +	/*
 +	 * We need to parse the following string:
 +	 *    "n alloc_1 alloc_2 ... alloc_n"
 +	 * where alloc_i looks like
 +	 *    "offset size len name"
 +	 * or "offset size len name:line".
 +	 */
 +
 +	char token[64];
 +	unsigned long num_objects;
 +
 +	if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
 +				  &num_objects))
 +		return;
 +
 +	pr_err("\n");
 +	pr_err("this frame has %lu %s:\n", num_objects,
 +	       num_objects == 1 ? "object" : "objects");
 +
 +	while (num_objects--) {
 +		unsigned long offset;
 +		unsigned long size;
 +
 +		/* access offset */
 +		if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
 +					  &offset))
 +			return;
 +		/* access size */
 +		if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
 +					  &size))
 +			return;
 +		/* name length (unused) */
 +		if (!tokenize_frame_descr(&frame_descr, NULL, 0, NULL))
 +			return;
 +		/* object name */
 +		if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
 +					  NULL))
 +			return;
 +
 +		/* Strip line number; without filename it's not very helpful. */
 +		strreplace(token, ':', '\0');
 +
 +		/* Finally, print object information. */
 +		pr_err(" [%lu, %lu) '%s'", offset, offset + size, token);
 +	}
 +}
 +
 +static bool __must_check get_address_stack_frame_info(const void *addr,
 +						      unsigned long *offset,
 +						      const char **frame_descr,
 +						      const void **frame_pc)
 +{
 +	unsigned long aligned_addr;
 +	unsigned long mem_ptr;
 +	const u8 *shadow_bottom;
 +	const u8 *shadow_ptr;
 +	const unsigned long *frame;
 +
 +	BUILD_BUG_ON(IS_ENABLED(CONFIG_STACK_GROWSUP));
 +
 +	/*
 +	 * NOTE: We currently only support printing frame information for
 +	 * accesses to the task's own stack.
 +	 */
 +	if (!object_is_on_stack(addr))
 +		return false;
 +
 +	aligned_addr = round_down((unsigned long)addr, sizeof(long));
 +	mem_ptr = round_down(aligned_addr, KASAN_SHADOW_SCALE_SIZE);
 +	shadow_ptr = kasan_mem_to_shadow((void *)aligned_addr);
 +	shadow_bottom = kasan_mem_to_shadow(end_of_stack(current));
 +
 +	while (shadow_ptr >= shadow_bottom && *shadow_ptr != KASAN_STACK_LEFT) {
 +		shadow_ptr--;
 +		mem_ptr -= KASAN_SHADOW_SCALE_SIZE;
 +	}
 +
 +	while (shadow_ptr >= shadow_bottom && *shadow_ptr == KASAN_STACK_LEFT) {
 +		shadow_ptr--;
 +		mem_ptr -= KASAN_SHADOW_SCALE_SIZE;
 +	}
 +
 +	if (shadow_ptr < shadow_bottom)
 +		return false;
 +
 +	frame = (const unsigned long *)(mem_ptr + KASAN_SHADOW_SCALE_SIZE);
 +	if (frame[0] != KASAN_CURRENT_STACK_FRAME_MAGIC) {
 +		pr_err("KASAN internal error: frame info validation failed; invalid marker: %lu\n",
 +		       frame[0]);
 +		return false;
 +	}
 +
 +	*offset = (unsigned long)addr - (unsigned long)frame;
 +	*frame_descr = (const char *)frame[1];
 +	*frame_pc = (void *)frame[2];
 +
 +	return true;
 +}
 +
 +static void print_address_stack_frame(const void *addr)
 +{
 +	unsigned long offset;
 +	const char *frame_descr;
 +	const void *frame_pc;
 +
 +	if (IS_ENABLED(CONFIG_KASAN_SW_TAGS))
 +		return;
 +
 +	if (!get_address_stack_frame_info(addr, &offset, &frame_descr,
 +					  &frame_pc))
 +		return;
 +
 +	/*
 +	 * get_address_stack_frame_info only returns true if the given addr is
 +	 * on the current task's stack.
 +	 */
 +	pr_err("\n");
 +	pr_err("addr %px is located in stack of task %s/%d at offset %lu in frame:\n",
 +	       addr, current->comm, task_pid_nr(current), offset);
 +	pr_err(" %pS\n", frame_pc);
 +
 +	if (!frame_descr)
 +		return;
 +
 +	print_decoded_frame_descr(frame_descr);
 +}
 +
++=======
++>>>>>>> 97fc71223236 (kasan: decode stack frame only with KASAN_STACK_ENABLE)
  static void print_address_description(void *addr, u8 tag)
  {
  	struct page *page = kasan_addr_to_page(addr);
diff --git a/mm/kasan/generic_report.c b/mm/kasan/generic_report.c
index 6bb3f66992df..38240fb1b84b 100644
--- a/mm/kasan/generic_report.c
+++ b/mm/kasan/generic_report.c
@@ -16,6 +16,7 @@
 #include <linux/mm.h>
 #include <linux/printk.h>
 #include <linux/sched.h>
+#include <linux/sched/task_stack.h>
 #include <linux/slab.h>
 #include <linux/stackdepot.h>
 #include <linux/stacktrace.h>
@@ -122,6 +123,167 @@ const char *get_bug_type(struct kasan_access_info *info)
 	return get_wild_bug_type(info);
 }
 
+#if CONFIG_KASAN_STACK
+static bool __must_check tokenize_frame_descr(const char **frame_descr,
+					      char *token, size_t max_tok_len,
+					      unsigned long *value)
+{
+	const char *sep = strchr(*frame_descr, ' ');
+
+	if (sep == NULL)
+		sep = *frame_descr + strlen(*frame_descr);
+
+	if (token != NULL) {
+		const size_t tok_len = sep - *frame_descr;
+
+		if (tok_len + 1 > max_tok_len) {
+			pr_err("KASAN internal error: frame description too long: %s\n",
+			       *frame_descr);
+			return false;
+		}
+
+		/* Copy token (+ 1 byte for '\0'). */
+		strlcpy(token, *frame_descr, tok_len + 1);
+	}
+
+	/* Advance frame_descr past separator. */
+	*frame_descr = sep + 1;
+
+	if (value != NULL && kstrtoul(token, 10, value)) {
+		pr_err("KASAN internal error: not a valid number: %s\n", token);
+		return false;
+	}
+
+	return true;
+}
+
+static void print_decoded_frame_descr(const char *frame_descr)
+{
+	/*
+	 * We need to parse the following string:
+	 *    "n alloc_1 alloc_2 ... alloc_n"
+	 * where alloc_i looks like
+	 *    "offset size len name"
+	 * or "offset size len name:line".
+	 */
+
+	char token[64];
+	unsigned long num_objects;
+
+	if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
+				  &num_objects))
+		return;
+
+	pr_err("\n");
+	pr_err("this frame has %lu %s:\n", num_objects,
+	       num_objects == 1 ? "object" : "objects");
+
+	while (num_objects--) {
+		unsigned long offset;
+		unsigned long size;
+
+		/* access offset */
+		if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
+					  &offset))
+			return;
+		/* access size */
+		if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
+					  &size))
+			return;
+		/* name length (unused) */
+		if (!tokenize_frame_descr(&frame_descr, NULL, 0, NULL))
+			return;
+		/* object name */
+		if (!tokenize_frame_descr(&frame_descr, token, sizeof(token),
+					  NULL))
+			return;
+
+		/* Strip line number; without filename it's not very helpful. */
+		strreplace(token, ':', '\0');
+
+		/* Finally, print object information. */
+		pr_err(" [%lu, %lu) '%s'", offset, offset + size, token);
+	}
+}
+
+static bool __must_check get_address_stack_frame_info(const void *addr,
+						      unsigned long *offset,
+						      const char **frame_descr,
+						      const void **frame_pc)
+{
+	unsigned long aligned_addr;
+	unsigned long mem_ptr;
+	const u8 *shadow_bottom;
+	const u8 *shadow_ptr;
+	const unsigned long *frame;
+
+	BUILD_BUG_ON(IS_ENABLED(CONFIG_STACK_GROWSUP));
+
+	/*
+	 * NOTE: We currently only support printing frame information for
+	 * accesses to the task's own stack.
+	 */
+	if (!object_is_on_stack(addr))
+		return false;
+
+	aligned_addr = round_down((unsigned long)addr, sizeof(long));
+	mem_ptr = round_down(aligned_addr, KASAN_GRANULE_SIZE);
+	shadow_ptr = kasan_mem_to_shadow((void *)aligned_addr);
+	shadow_bottom = kasan_mem_to_shadow(end_of_stack(current));
+
+	while (shadow_ptr >= shadow_bottom && *shadow_ptr != KASAN_STACK_LEFT) {
+		shadow_ptr--;
+		mem_ptr -= KASAN_GRANULE_SIZE;
+	}
+
+	while (shadow_ptr >= shadow_bottom && *shadow_ptr == KASAN_STACK_LEFT) {
+		shadow_ptr--;
+		mem_ptr -= KASAN_GRANULE_SIZE;
+	}
+
+	if (shadow_ptr < shadow_bottom)
+		return false;
+
+	frame = (const unsigned long *)(mem_ptr + KASAN_GRANULE_SIZE);
+	if (frame[0] != KASAN_CURRENT_STACK_FRAME_MAGIC) {
+		pr_err("KASAN internal error: frame info validation failed; invalid marker: %lu\n",
+		       frame[0]);
+		return false;
+	}
+
+	*offset = (unsigned long)addr - (unsigned long)frame;
+	*frame_descr = (const char *)frame[1];
+	*frame_pc = (void *)frame[2];
+
+	return true;
+}
+
+void print_address_stack_frame(const void *addr)
+{
+	unsigned long offset;
+	const char *frame_descr;
+	const void *frame_pc;
+
+	if (!get_address_stack_frame_info(addr, &offset, &frame_descr,
+					  &frame_pc))
+		return;
+
+	/*
+	 * get_address_stack_frame_info only returns true if the given addr is
+	 * on the current task's stack.
+	 */
+	pr_err("\n");
+	pr_err("addr %px is located in stack of task %s/%d at offset %lu in frame:\n",
+	       addr, current->comm, task_pid_nr(current), offset);
+	pr_err(" %pS\n", frame_pc);
+
+	if (!frame_descr)
+		return;
+
+	print_decoded_frame_descr(frame_descr);
+}
+#endif /* CONFIG_KASAN_STACK */
+
 #define DEFINE_ASAN_REPORT_LOAD(size)                     \
 void __asan_report_load##size##_noabort(unsigned long addr) \
 {                                                         \
diff --git a/mm/kasan/kasan.h b/mm/kasan/kasan.h
index ac499456740f..868bd2a565c8 100644
--- a/mm/kasan/kasan.h
+++ b/mm/kasan/kasan.h
@@ -166,6 +166,12 @@ bool check_memory_region(unsigned long addr, size_t size, bool write,
 void *find_first_bad_addr(void *addr, size_t size);
 const char *get_bug_type(struct kasan_access_info *info);
 
+#if defined(CONFIG_KASAN_GENERIC) && CONFIG_KASAN_STACK
+void print_address_stack_frame(const void *addr);
+#else
+static inline void print_address_stack_frame(const void *addr) { }
+#endif
+
 bool kasan_report(unsigned long addr, size_t size,
 		bool is_write, unsigned long ip);
 void kasan_report_invalid_free(void *object, unsigned long ip);
* Unmerged path mm/kasan/report.c
