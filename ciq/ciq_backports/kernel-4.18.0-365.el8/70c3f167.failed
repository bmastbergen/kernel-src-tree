x86/fpu/xstate: Prepare XSAVE feature table for gaps in state component numbers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Chang S. Bae <chang.seok.bae@intel.com>
commit 70c3f1671b0cbc386b387f1de33b7837e276a195
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/70c3f167.failed

The kernel checks at boot time which features are available by walking a
XSAVE feature table which contains the CPUID feature bit numbers which need
to be checked whether a feature is available on a CPU or not. So far the
feature numbers have been linear, but AMX will create a gap which the
current code cannot handle.

Make the table entries explicitly indexed and adjust the loop code
accordingly to prepare for that.

No functional change.

	Signed-off-by: Chang S. Bae <chang.seok.bae@intel.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Len Brown <len.brown@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20211021225527.10184-20-chang.seok.bae@intel.com
(cherry picked from commit 70c3f1671b0cbc386b387f1de33b7837e276a195)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/fpu/xstate.c
diff --cc arch/x86/kernel/fpu/xstate.c
index f744359fb635,e3d1898a3823..000000000000
--- a/arch/x86/kernel/fpu/xstate.c
+++ b/arch/x86/kernel/fpu/xstate.c
@@@ -47,26 -53,20 +47,26 @@@ static const char *xfeature_names[] 
  	"unknown xstate feature"	,
  };
  
- static short xsave_cpuid_features[] __initdata = {
- 	X86_FEATURE_FPU,
- 	X86_FEATURE_XMM,
- 	X86_FEATURE_AVX,
- 	X86_FEATURE_MPX,
- 	X86_FEATURE_MPX,
- 	X86_FEATURE_AVX512F,
- 	X86_FEATURE_AVX512F,
- 	X86_FEATURE_AVX512F,
- 	X86_FEATURE_INTEL_PT,
- 	X86_FEATURE_PKU,
- 	X86_FEATURE_ENQCMD,
+ static unsigned short xsave_cpuid_features[] __initdata = {
+ 	[XFEATURE_FP]				= X86_FEATURE_FPU,
+ 	[XFEATURE_SSE]				= X86_FEATURE_XMM,
+ 	[XFEATURE_YMM]				= X86_FEATURE_AVX,
+ 	[XFEATURE_BNDREGS]			= X86_FEATURE_MPX,
+ 	[XFEATURE_BNDCSR]			= X86_FEATURE_MPX,
+ 	[XFEATURE_OPMASK]			= X86_FEATURE_AVX512F,
+ 	[XFEATURE_ZMM_Hi256]			= X86_FEATURE_AVX512F,
+ 	[XFEATURE_Hi16_ZMM]			= X86_FEATURE_AVX512F,
+ 	[XFEATURE_PT_UNIMPLEMENTED_SO_FAR]	= X86_FEATURE_INTEL_PT,
+ 	[XFEATURE_PKRU]				= X86_FEATURE_PKU,
+ 	[XFEATURE_PASID]			= X86_FEATURE_ENQCMD,
  };
  
 +/*
 + * This represents the full set of bits that should ever be set in a kernel
 + * XSAVE buffer, both supervisor and user xstates.
 + */
 +u64 xfeatures_mask_all __ro_after_init;
 +
  static unsigned int xstate_offsets[XFEATURE_MAX] __ro_after_init =
  	{ [ 0 ... XFEATURE_MAX - 1] = -1};
  static unsigned int xstate_sizes[XFEATURE_MAX] __ro_after_init =
@@@ -795,15 -809,25 +795,23 @@@ void __init fpu__init_system_xstate(voi
  	 * Clear XSAVE features that are disabled in the normal CPUID.
  	 */
  	for (i = 0; i < ARRAY_SIZE(xsave_cpuid_features); i++) {
++<<<<<<< HEAD
 +		if (!boot_cpu_has(xsave_cpuid_features[i]))
 +			xfeatures_mask_all &= ~BIT_ULL(i);
++=======
+ 		unsigned short cid = xsave_cpuid_features[i];
+ 
+ 		/* Careful: X86_FEATURE_FPU is 0! */
+ 		if ((i != XFEATURE_FP && !cid) || !boot_cpu_has(cid))
+ 			fpu_kernel_cfg.max_features &= ~BIT_ULL(i);
++>>>>>>> 70c3f1671b0c (x86/fpu/xstate: Prepare XSAVE feature table for gaps in state component numbers)
  	}
  
 -	fpu_kernel_cfg.max_features &= XFEATURE_MASK_USER_SUPPORTED |
 +	xfeatures_mask_all &= XFEATURE_MASK_USER_SUPPORTED |
  			      XFEATURE_MASK_SUPERVISOR_SUPPORTED;
  
 -	fpu_user_cfg.max_features = fpu_kernel_cfg.max_features;
 -	fpu_user_cfg.max_features &= XFEATURE_MASK_USER_SUPPORTED;
 -
 -	/* Identical for now */
 -	fpu_kernel_cfg.default_features = fpu_kernel_cfg.max_features;
 -	fpu_user_cfg.default_features = fpu_user_cfg.max_features;
 -
  	/* Store it for paranoia check at the end */
 -	xfeatures = fpu_kernel_cfg.max_features;
 +	xfeatures = xfeatures_mask_all;
  
  	/* Enable xstate instructions to be able to continue with initialization: */
  	fpu__init_cpu_xstate();
* Unmerged path arch/x86/kernel/fpu/xstate.c
