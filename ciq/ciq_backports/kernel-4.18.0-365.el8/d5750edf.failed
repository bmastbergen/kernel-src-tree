kasan: shadow declarations only for software modes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit d5750edf6da759576f91ec2b57d5553985815b40
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/d5750edf.failed

This is a preparatory commit for the upcoming addition of a new hardware
tag-based (MTE-based) KASAN mode.

Group shadow-related KASAN function declarations and only define them for
the two existing software modes.

No functional changes for software modes.

  Link: https://lkml.kernel.org/r/35126.1606402815@turing-police
  Link: https://lore.kernel.org/linux-arm-kernel/24105.1606397102@turing-police/

Link: https://lkml.kernel.org/r/e88d94eff94db883a65dca52e1736d80d28dd9bc.1606161801.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Signed-off-by: Valdis Kletnieks <valdis.kletnieks@vt.edu>
	Reviewed-by: Marco Elver <elver@google.com>
	Reviewed-by: Alexander Potapenko <glider@google.com>
	Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will.deacon@arm.com>
[valdis.kletnieks@vt.edu: fix build issue with asmlinkage]
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d5750edf6da759576f91ec2b57d5553985815b40)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kasan.h
diff --cc include/linux/kasan.h
index f00d17cf6822,7828436a3a99..000000000000
--- a/include/linux/kasan.h
+++ b/include/linux/kasan.h
@@@ -11,9 -11,29 +11,27 @@@ struct task_struct
  
  #ifdef CONFIG_KASAN
  
++<<<<<<< HEAD
++=======
+ #include <linux/linkage.h>
++>>>>>>> d5750edf6da7 (kasan: shadow declarations only for software modes)
  #include <asm/kasan.h>
 -
 -/* kasan_data struct is used in KUnit tests for KASAN expected failures */
 -struct kunit_kasan_expectation {
 -	bool report_expected;
 -	bool report_found;
 -};
 +#include <asm/pgtable.h>
  
+ #endif
+ 
+ #if defined(CONFIG_KASAN_GENERIC) || defined(CONFIG_KASAN_SW_TAGS)
+ 
+ #include <linux/pgtable.h>
+ 
+ /* Software KASAN implementations use shadow memory. */
+ 
+ #ifdef CONFIG_KASAN_SW_TAGS
+ #define KASAN_SHADOW_INIT 0xFF
+ #else
+ #define KASAN_SHADOW_INIT 0
+ #endif
+ 
  extern unsigned char kasan_early_shadow_page[PAGE_SIZE];
  extern pte_t kasan_early_shadow_pte[PTRS_PER_PTE];
  extern pmd_t kasan_early_shadow_pmd[PTRS_PER_PMD];
@@@ -69,22 -106,6 +104,25 @@@ struct kasan_cache 
  	int free_meta_offset;
  };
  
++<<<<<<< HEAD
 +/*
 + * These functions provide a special case to support backing module
 + * allocations with real shadow memory. With KASAN vmalloc, the special
 + * case is unnecessary, as the work is handled in the generic case.
 + */
 +#ifndef CONFIG_KASAN_VMALLOC
 +int kasan_module_alloc(void *addr, size_t size);
 +void kasan_free_shadow(const struct vm_struct *vm);
 +#else
 +static inline int kasan_module_alloc(void *addr, size_t size) { return 0; }
 +static inline void kasan_free_shadow(const struct vm_struct *vm) {}
 +#endif
 +
 +int kasan_add_zero_shadow(void *start, unsigned long size);
 +void kasan_remove_zero_shadow(void *start, unsigned long size);
 +
++=======
++>>>>>>> d5750edf6da7 (kasan: shadow declarations only for software modes)
  size_t __ksize(const void *);
  static inline void kasan_unpoison_slab(const void *ptr)
  {
@@@ -150,17 -171,6 +188,20 @@@ static inline bool kasan_slab_free(stru
  	return false;
  }
  
++<<<<<<< HEAD
 +static inline int kasan_module_alloc(void *addr, size_t size) { return 0; }
 +static inline void kasan_free_shadow(const struct vm_struct *vm) {}
 +
 +static inline int kasan_add_zero_shadow(void *start, unsigned long size)
 +{
 +	return 0;
 +}
 +static inline void kasan_remove_zero_shadow(void *start,
 +					unsigned long size)
 +{}
 +
++=======
++>>>>>>> d5750edf6da7 (kasan: shadow declarations only for software modes)
  static inline void kasan_unpoison_slab(const void *ptr) { }
  static inline size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
  
* Unmerged path include/linux/kasan.h
