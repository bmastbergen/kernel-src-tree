kasan, arm64: rename kasan_init_tags and mark as __init

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit 60a3a5fe950f4e6c02e9fc6676dc96de043ed743
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/60a3a5fe.failed

Rename kasan_init_tags() to kasan_init_sw_tags() as the upcoming hardware
tag-based KASAN mode will have its own initialization routine.  Also
similarly to kasan_init() mark kasan_init_tags() as __init.

Link: https://lkml.kernel.org/r/71e52af72a09f4b50c8042f16101c60e50649fbb.1606161801.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Reviewed-by: Alexander Potapenko <glider@google.com>
	Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Marco Elver <elver@google.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 60a3a5fe950f4e6c02e9fc6676dc96de043ed743)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/mm/kasan_init.c
#	include/linux/kasan.h
diff --cc arch/arm64/mm/kasan_init.c
index 2fa9841fa8dc,d8e66c78440e..000000000000
--- a/arch/arm64/mm/kasan_init.c
+++ b/arch/arm64/mm/kasan_init.c
@@@ -274,8 -281,11 +274,17 @@@ static inline void __init kasan_init_sh
  void __init kasan_init(void)
  {
  	kasan_init_shadow();
++<<<<<<< HEAD
++=======
+ 	kasan_init_depth();
+ #if defined(CONFIG_KASAN_GENERIC)
+ 	/* CONFIG_KASAN_SW_TAGS also requires kasan_init_sw_tags(). */
+ 	pr_info("KernelAddressSanitizer initialized\n");
+ #endif
+ }
++>>>>>>> 60a3a5fe950f (kasan, arm64: rename kasan_init_tags and mark as __init)
  
 -#endif /* CONFIG_KASAN_GENERIC || CONFIG_KASAN_SW_TAGS */
 +	/* At this point kasan is fully initialized. Enable error messages */
 +	init_task.kasan_depth = 0;
 +	pr_info("KernelAddressSanitizer initialized\n");
 +}
diff --cc include/linux/kasan.h
index f00d17cf6822,d7042d129dc1..000000000000
--- a/include/linux/kasan.h
+++ b/include/linux/kasan.h
@@@ -184,9 -192,7 +184,13 @@@ static inline void kasan_record_aux_sta
  
  #ifdef CONFIG_KASAN_SW_TAGS
  
++<<<<<<< HEAD
 +#define KASAN_SHADOW_INIT 0xFF
 +
 +void kasan_init_tags(void);
++=======
+ void __init kasan_init_sw_tags(void);
++>>>>>>> 60a3a5fe950f (kasan, arm64: rename kasan_init_tags and mark as __init)
  
  void *kasan_reset_tag(const void *addr);
  
diff --git a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c
index b628c7770454..7dab5c910d9e 100644
--- a/arch/arm64/kernel/setup.c
+++ b/arch/arm64/kernel/setup.c
@@ -349,7 +349,7 @@ void __init setup_arch(char **cmdline_p)
 	smp_build_mpidr_hash();
 
 	/* Init percpu seeds for random tags after cpus are set up. */
-	kasan_init_tags();
+	kasan_init_sw_tags();
 
 #ifdef CONFIG_ARM64_SW_TTBR0_PAN
 	/*
* Unmerged path arch/arm64/mm/kasan_init.c
* Unmerged path include/linux/kasan.h
diff --git a/mm/kasan/tags.c b/mm/kasan/tags.c
index 5c8b08a25715..bbc18ca66b74 100644
--- a/mm/kasan/tags.c
+++ b/mm/kasan/tags.c
@@ -35,7 +35,7 @@
 
 static DEFINE_PER_CPU(u32, prng_state);
 
-void kasan_init_tags(void)
+void __init kasan_init_sw_tags(void)
 {
 	int cpu;
 
