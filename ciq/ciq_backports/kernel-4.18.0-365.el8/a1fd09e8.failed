dma-mapping: move dma-debug.h to kernel/dma/

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Christoph Hellwig <hch@lst.de>
commit a1fd09e8e6ae35228ecc7c1e4bfff1fd725f78a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/a1fd09e8.failed

Most of dma-debug.h is not required by anything outside of kernel/dma.
Move the four declarations needed by dma-mappin.h or dma-ops providers
into dma-mapping.h and dma-map-ops.h, and move the remainder of the
file to kernel/dma/debug.h.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit a1fd09e8e6ae35228ecc7c1e4bfff1fd725f78a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-driver.c
#	include/linux/dma-map-ops.h
#	include/linux/dma-mapping.h
diff --cc drivers/pci/pci-driver.c
index 355c5e758aad,d1b7169c0684..000000000000
--- a/drivers/pci/pci-driver.c
+++ b/drivers/pci/pci-driver.c
@@@ -19,7 -19,7 +19,11 @@@
  #include <linux/kexec.h>
  #include <linux/of_device.h>
  #include <linux/acpi.h>
++<<<<<<< HEAD
 +#include <linux/kernel.h>
++=======
+ #include <linux/dma-map-ops.h>
++>>>>>>> a1fd09e8e6ae (dma-mapping: move dma-debug.h to kernel/dma/)
  #include "pci.h"
  #include "pcie/portdrv.h"
  
diff --cc include/linux/dma-mapping.h
index 5c32cbab4717,3f029afdc9dc..000000000000
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@@ -147,100 -73,24 +146,117 @@@ struct dma_map_ops 
   */
  #define DMA_MAPPING_ERROR		(~(dma_addr_t)0)
  
 +extern const struct dma_map_ops dma_virt_ops;
 +extern const struct dma_map_ops dma_dummy_ops;
 +
  #define DMA_BIT_MASK(n)	(((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
  
++<<<<<<< HEAD
 +#define DMA_MASK_NONE	0x0ULL
 +
 +static inline int is_device_dma_capable(struct device *dev)
 +{
 +	return dev->dma_mask != NULL && *dev->dma_mask != DMA_MASK_NONE;
 +}
 +
 +#ifdef CONFIG_HAVE_GENERIC_DMA_COHERENT
 +/*
 + * These three functions are only for dma allocator.
 + * Don't use them in device drivers.
 + */
 +int dma_alloc_from_dev_coherent(struct device *dev, ssize_t size,
 +				       dma_addr_t *dma_handle, void **ret);
 +int dma_release_from_dev_coherent(struct device *dev, int order, void *vaddr);
 +
 +int dma_mmap_from_dev_coherent(struct device *dev, struct vm_area_struct *vma,
 +			    void *cpu_addr, size_t size, int *ret);
 +
 +void *dma_alloc_from_global_coherent(struct device *dev, ssize_t size, dma_addr_t *dma_handle);
 +int dma_release_from_global_coherent(int order, void *vaddr);
 +int dma_mmap_from_global_coherent(struct vm_area_struct *vma, void *cpu_addr,
 +				  size_t size, int *ret);
 +
 +#else
 +#define dma_alloc_from_dev_coherent(dev, size, handle, ret) (0)
 +#define dma_release_from_dev_coherent(dev, order, vaddr) (0)
 +#define dma_mmap_from_dev_coherent(dev, vma, vaddr, order, ret) (0)
 +
 +static inline void *dma_alloc_from_global_coherent(struct device *dev, ssize_t size,
 +						   dma_addr_t *dma_handle)
 +{
 +	return NULL;
 +}
 +
 +static inline int dma_release_from_global_coherent(int order, void *vaddr)
 +{
 +	return 0;
 +}
 +
 +static inline int dma_mmap_from_global_coherent(struct vm_area_struct *vma,
 +						void *cpu_addr, size_t size,
 +						int *ret)
 +{
 +	return 0;
 +}
 +#endif /* CONFIG_HAVE_GENERIC_DMA_COHERENT */
 +
 +/*
 + * This is the actual return value from the ->alloc_noncontiguous method.
 + * The users of the DMA API should only care about the sg_table, but to make
 + * the DMA-API internal vmaping and freeing easier we stash away the page
 + * array as well (except for the fallback case).  This can go away any time,
 + * e.g. when a vmap-variant that takes a scatterlist comes along.
 + */
 +struct dma_sgt_handle {
 +	struct sg_table sgt;
 +	struct page **pages;
 +};
 +#define sgt_handle(sgt) \
 +	container_of((sgt), struct dma_sgt_handle, sgt)
++=======
+ #ifdef CONFIG_DMA_API_DEBUG
+ void debug_dma_mapping_error(struct device *dev, dma_addr_t dma_addr);
+ void debug_dma_map_single(struct device *dev, const void *addr,
+ 		unsigned long len);
+ #else
+ static inline void debug_dma_mapping_error(struct device *dev,
+ 		dma_addr_t dma_addr)
+ {
+ }
+ static inline void debug_dma_map_single(struct device *dev, const void *addr,
+ 		unsigned long len)
+ {
+ }
+ #endif /* CONFIG_DMA_API_DEBUG */
++>>>>>>> a1fd09e8e6ae (dma-mapping: move dma-debug.h to kernel/dma/)
  
  #ifdef CONFIG_HAS_DMA
 +#include <asm/dma-mapping.h>
 +
 +#ifdef CONFIG_DMA_OPS
 +static inline const struct dma_map_ops *get_dma_ops(struct device *dev)
 +{
 +	if (dev->dma_ops)
 +		return dev->dma_ops;
 +	return get_arch_dma_ops(dev->bus);
 +}
 +
 +static inline void set_dma_ops(struct device *dev,
 +			       const struct dma_map_ops *dma_ops)
 +{
 +	dev->dma_ops = dma_ops;
 +}
 +#else /* CONFIG_DMA_OPS */
 +static inline const struct dma_map_ops *get_dma_ops(struct device *dev)
 +{
 +	return NULL;
 +}
 +static inline void set_dma_ops(struct device *dev,
 +			       const struct dma_map_ops *dma_ops)
 +{
 +}
 +#endif /* CONFIG_DMA_OPS */
 +
  static inline int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
  {
  	debug_dma_mapping_error(dev, dma_addr);
* Unmerged path include/linux/dma-map-ops.h
diff --git a/arch/arm/include/asm/dma-iommu.h b/arch/arm/include/asm/dma-iommu.h
index 6821f1249300..13184da5bb74 100644
--- a/arch/arm/include/asm/dma-iommu.h
+++ b/arch/arm/include/asm/dma-iommu.h
@@ -6,7 +6,6 @@
 
 #include <linux/mm_types.h>
 #include <linux/scatterlist.h>
-#include <linux/dma-debug.h>
 #include <linux/kref.h>
 
 #define ARM_MAPPING_ERROR		(~(dma_addr_t)0x0)
diff --git a/arch/arm/include/asm/dma-mapping.h b/arch/arm/include/asm/dma-mapping.h
index 8436f6ade57d..dbb208227442 100644
--- a/arch/arm/include/asm/dma-mapping.h
+++ b/arch/arm/include/asm/dma-mapping.h
@@ -6,7 +6,6 @@
 
 #include <linux/mm_types.h>
 #include <linux/scatterlist.h>
-#include <linux/dma-debug.h>
 
 #include <asm/memory.h>
 
diff --git a/arch/microblaze/kernel/dma.c b/arch/microblaze/kernel/dma.c
index 3145e7dc8ab1..753872d5df8c 100644
--- a/arch/microblaze/kernel/dma.c
+++ b/arch/microblaze/kernel/dma.c
@@ -10,7 +10,6 @@
 #include <linux/device.h>
 #include <linux/dma-mapping.h>
 #include <linux/gfp.h>
-#include <linux/dma-debug.h>
 #include <linux/export.h>
 #include <linux/bug.h>
 #include <asm/cacheflush.h>
diff --git a/arch/sh/drivers/pci/pci.c b/arch/sh/drivers/pci/pci.c
index 8256626bc53c..cf81947075fe 100644
--- a/arch/sh/drivers/pci/pci.c
+++ b/arch/sh/drivers/pci/pci.c
@@ -16,7 +16,6 @@
 #include <linux/pci.h>
 #include <linux/init.h>
 #include <linux/types.h>
-#include <linux/dma-debug.h>
 #include <linux/io.h>
 #include <linux/mutex.h>
 #include <linux/spinlock.h>
diff --git a/arch/x86/include/asm/dma-mapping.h b/arch/x86/include/asm/dma-mapping.h
index fed67eafcacc..ac01094d2e31 100644
--- a/arch/x86/include/asm/dma-mapping.h
+++ b/arch/x86/include/asm/dma-mapping.h
@@ -8,7 +8,6 @@
  */
 
 #include <linux/scatterlist.h>
-#include <linux/dma-debug.h>
 #include <asm/io.h>
 #include <asm/swiotlb.h>
 #include <linux/dma-contiguous.h>
diff --git a/arch/x86/kernel/pci-dma.c b/arch/x86/kernel/pci-dma.c
index 80d2a0954d39..7d8e12828ce6 100644
--- a/arch/x86/kernel/pci-dma.c
+++ b/arch/x86/kernel/pci-dma.c
@@ -1,6 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/dma-direct.h>
-#include <linux/dma-debug.h>
 #include <linux/iommu.h>
 #include <linux/dmar.h>
 #include <linux/export.h>
* Unmerged path drivers/pci/pci-driver.c
* Unmerged path include/linux/dma-map-ops.h
* Unmerged path include/linux/dma-mapping.h
diff --git a/kernel/dma/debug.c b/kernel/dma/debug.c
index 437de1d92f5b..5614fbc520bf 100644
--- a/kernel/dma/debug.c
+++ b/kernel/dma/debug.c
@@ -21,10 +21,9 @@
 
 #include <linux/sched/task_stack.h>
 #include <linux/scatterlist.h>
-#include <linux/dma-mapping.h>
+#include <linux/dma-map-ops.h>
 #include <linux/sched/task.h>
 #include <linux/stacktrace.h>
-#include <linux/dma-debug.h>
 #include <linux/spinlock.h>
 #include <linux/vmalloc.h>
 #include <linux/debugfs.h>
@@ -36,8 +35,8 @@
 #include <linux/ctype.h>
 #include <linux/list.h>
 #include <linux/slab.h>
-
 #include <asm/sections.h>
+#include "debug.h"
 
 #define HASH_SIZE       16384ULL
 #define HASH_FN_SHIFT   13
diff --git a/include/linux/dma-debug.h b/kernel/dma/debug.h
similarity index 83%
rename from include/linux/dma-debug.h
rename to kernel/dma/debug.h
index ddbe92e3a69a..e433b69c6dae 100644
--- a/include/linux/dma-debug.h
+++ b/kernel/dma/debug.h
@@ -17,28 +17,14 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
  */
 
-#ifndef __DMA_DEBUG_H
-#define __DMA_DEBUG_H
-
-#include <linux/types.h>
-
-struct device;
-struct scatterlist;
-struct bus_type;
+#ifndef _KERNEL_DMA_DEBUG_H
+#define _KERNEL_DMA_DEBUG_H
 
 #ifdef CONFIG_DMA_API_DEBUG
-
-extern void dma_debug_add_bus(struct bus_type *bus);
-
-extern void debug_dma_map_single(struct device *dev, const void *addr,
-				 unsigned long len);
-
 extern void debug_dma_map_page(struct device *dev, struct page *page,
 			       size_t offset, size_t size,
 			       int direction, dma_addr_t dma_addr);
 
-extern void debug_dma_mapping_error(struct device *dev, dma_addr_t dma_addr);
-
 extern void debug_dma_unmap_page(struct device *dev, dma_addr_t addr,
 				 size_t size, int direction);
 
@@ -76,31 +62,13 @@ extern void debug_dma_sync_sg_for_cpu(struct device *dev,
 extern void debug_dma_sync_sg_for_device(struct device *dev,
 					 struct scatterlist *sg,
 					 int nelems, int direction);
-
-extern void debug_dma_dump_mappings(struct device *dev);
-
 #else /* CONFIG_DMA_API_DEBUG */
-
-static inline void dma_debug_add_bus(struct bus_type *bus)
-{
-}
-
-static inline void debug_dma_map_single(struct device *dev, const void *addr,
-					unsigned long len)
-{
-}
-
 static inline void debug_dma_map_page(struct device *dev, struct page *page,
 				      size_t offset, size_t size,
 				      int direction, dma_addr_t dma_addr)
 {
 }
 
-static inline void debug_dma_mapping_error(struct device *dev,
-					  dma_addr_t dma_addr)
-{
-}
-
 static inline void debug_dma_unmap_page(struct device *dev, dma_addr_t addr,
 					size_t size, int direction)
 {
@@ -162,11 +130,5 @@ static inline void debug_dma_sync_sg_for_device(struct device *dev,
 						int nelems, int direction)
 {
 }
-
-static inline void debug_dma_dump_mappings(struct device *dev)
-{
-}
-
 #endif /* CONFIG_DMA_API_DEBUG */
-
-#endif /* __DMA_DEBUG_H */
+#endif /* _KERNEL_DMA_DEBUG_H */
diff --git a/kernel/dma/mapping.c b/kernel/dma/mapping.c
index b152e4e4a653..a93e0e5f0901 100644
--- a/kernel/dma/mapping.c
+++ b/kernel/dma/mapping.c
@@ -14,6 +14,7 @@
 #include <linux/of_device.h>
 #include <linux/slab.h>
 #include <linux/vmalloc.h>
+#include "debug.h"
 
 /*
  * Avoid KABI breakage due to struct device opacity change when relocating
diff --git a/mm/memory.c b/mm/memory.c
index 3f43d4da7ab5..ea354c711d3e 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -64,7 +64,6 @@
 #include <linux/gfp.h>
 #include <linux/migrate.h>
 #include <linux/string.h>
-#include <linux/dma-debug.h>
 #include <linux/debugfs.h>
 #include <linux/userfaultfd_k.h>
 #include <linux/dax.h>
