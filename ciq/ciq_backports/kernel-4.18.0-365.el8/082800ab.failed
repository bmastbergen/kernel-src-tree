drm/i915: split color functions from display vtable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Dave Airlie <airlied@redhat.com>
commit 082800ab52d64cdb754c5d89361e737cdc44ffba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/082800ab.failed

These are only used internally in the color module

	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
	Signed-off-by: Dave Airlie <airlied@redhat.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/084a31362f1621d2f556069bb2bc47d362a63823.1632869550.git.jani.nikula@intel.com
(cherry picked from commit 082800ab52d64cdb754c5d89361e737cdc44ffba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_color.c
#	drivers/gpu/drm/i915/i915_drv.h
diff --cc drivers/gpu/drm/i915/display/intel_color.c
index ff7dcb7088bf,ed79075158dd..000000000000
--- a/drivers/gpu/drm/i915/display/intel_color.c
+++ b/drivers/gpu/drm/i915/display/intel_color.c
@@@ -2101,51 -2101,51 +2101,90 @@@ void intel_color_init(struct intel_crt
  
  	if (HAS_GMCH(dev_priv)) {
  		if (IS_CHERRYVIEW(dev_priv)) {
++<<<<<<< HEAD
 +			dev_priv->display.color_check = chv_color_check;
 +			dev_priv->display.color_commit = i9xx_color_commit;
 +			dev_priv->display.load_luts = chv_load_luts;
 +			dev_priv->display.read_luts = chv_read_luts;
 +		} else if (INTEL_GEN(dev_priv) >= 4) {
 +			dev_priv->display.color_check = i9xx_color_check;
 +			dev_priv->display.color_commit = i9xx_color_commit;
 +			dev_priv->display.load_luts = i965_load_luts;
 +			dev_priv->display.read_luts = i965_read_luts;
++=======
+ 			dev_priv->color_funcs.color_check = chv_color_check;
+ 			dev_priv->color_funcs.color_commit = i9xx_color_commit;
+ 			dev_priv->color_funcs.load_luts = chv_load_luts;
+ 			dev_priv->color_funcs.read_luts = chv_read_luts;
+ 		} else if (DISPLAY_VER(dev_priv) >= 4) {
+ 			dev_priv->color_funcs.color_check = i9xx_color_check;
+ 			dev_priv->color_funcs.color_commit = i9xx_color_commit;
+ 			dev_priv->color_funcs.load_luts = i965_load_luts;
+ 			dev_priv->color_funcs.read_luts = i965_read_luts;
++>>>>>>> 082800ab52d6 (drm/i915: split color functions from display vtable)
  		} else {
- 			dev_priv->display.color_check = i9xx_color_check;
- 			dev_priv->display.color_commit = i9xx_color_commit;
- 			dev_priv->display.load_luts = i9xx_load_luts;
- 			dev_priv->display.read_luts = i9xx_read_luts;
+ 			dev_priv->color_funcs.color_check = i9xx_color_check;
+ 			dev_priv->color_funcs.color_commit = i9xx_color_commit;
+ 			dev_priv->color_funcs.load_luts = i9xx_load_luts;
+ 			dev_priv->color_funcs.read_luts = i9xx_read_luts;
  		}
  	} else {
++<<<<<<< HEAD
 +		if (INTEL_GEN(dev_priv) >= 11)
 +			dev_priv->display.color_check = icl_color_check;
 +		else if (INTEL_GEN(dev_priv) >= 10 || IS_GEMINILAKE(dev_priv))
 +			dev_priv->display.color_check = glk_color_check;
 +		else if (INTEL_GEN(dev_priv) >= 7)
 +			dev_priv->display.color_check = ivb_color_check;
++=======
+ 		if (DISPLAY_VER(dev_priv) >= 11)
+ 			dev_priv->color_funcs.color_check = icl_color_check;
+ 		else if (DISPLAY_VER(dev_priv) >= 10)
+ 			dev_priv->color_funcs.color_check = glk_color_check;
+ 		else if (DISPLAY_VER(dev_priv) >= 7)
+ 			dev_priv->color_funcs.color_check = ivb_color_check;
++>>>>>>> 082800ab52d6 (drm/i915: split color functions from display vtable)
  		else
- 			dev_priv->display.color_check = ilk_color_check;
+ 			dev_priv->color_funcs.color_check = ilk_color_check;
  
++<<<<<<< HEAD
 +		if (INTEL_GEN(dev_priv) >= 9)
 +			dev_priv->display.color_commit = skl_color_commit;
++=======
+ 		if (DISPLAY_VER(dev_priv) >= 9)
+ 			dev_priv->color_funcs.color_commit = skl_color_commit;
++>>>>>>> 082800ab52d6 (drm/i915: split color functions from display vtable)
  		else if (IS_BROADWELL(dev_priv) || IS_HASWELL(dev_priv))
- 			dev_priv->display.color_commit = hsw_color_commit;
+ 			dev_priv->color_funcs.color_commit = hsw_color_commit;
  		else
- 			dev_priv->display.color_commit = ilk_color_commit;
+ 			dev_priv->color_funcs.color_commit = ilk_color_commit;
  
++<<<<<<< HEAD
 +		if (INTEL_GEN(dev_priv) >= 11) {
 +			dev_priv->display.load_luts = icl_load_luts;
 +			dev_priv->display.read_luts = icl_read_luts;
 +		} else if (IS_CANNONLAKE(dev_priv) || IS_GEMINILAKE(dev_priv)) {
 +			dev_priv->display.load_luts = glk_load_luts;
 +			dev_priv->display.read_luts = glk_read_luts;
 +		} else if (INTEL_GEN(dev_priv) >= 8) {
 +			dev_priv->display.load_luts = bdw_load_luts;
 +		} else if (INTEL_GEN(dev_priv) >= 7) {
 +			dev_priv->display.load_luts = ivb_load_luts;
++=======
+ 		if (DISPLAY_VER(dev_priv) >= 11) {
+ 			dev_priv->color_funcs.load_luts = icl_load_luts;
+ 			dev_priv->color_funcs.read_luts = icl_read_luts;
+ 		} else if (DISPLAY_VER(dev_priv) == 10) {
+ 			dev_priv->color_funcs.load_luts = glk_load_luts;
+ 			dev_priv->color_funcs.read_luts = glk_read_luts;
+ 		} else if (DISPLAY_VER(dev_priv) >= 8) {
+ 			dev_priv->color_funcs.load_luts = bdw_load_luts;
+ 		} else if (DISPLAY_VER(dev_priv) >= 7) {
+ 			dev_priv->color_funcs.load_luts = ivb_load_luts;
++>>>>>>> 082800ab52d6 (drm/i915: split color functions from display vtable)
  		} else {
- 			dev_priv->display.load_luts = ilk_load_luts;
- 			dev_priv->display.read_luts = ilk_read_luts;
+ 			dev_priv->color_funcs.load_luts = ilk_load_luts;
+ 			dev_priv->color_funcs.read_luts = ilk_read_luts;
  		}
  	}
  
diff --cc drivers/gpu/drm/i915/i915_drv.h
index 6638c0aec2d4,65f5b2128708..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -279,7 -343,34 +279,38 @@@ struct drm_i915_display_funcs 
  	void (*optimize_watermarks)(struct intel_atomic_state *state,
  				    struct intel_crtc *crtc);
  	int (*compute_global_watermarks)(struct intel_atomic_state *state);
++<<<<<<< HEAD
 +	void (*update_wm)(struct intel_crtc *crtc);
++=======
+ };
+ 
+ struct intel_color_funcs {
+ 	int (*color_check)(struct intel_crtc_state *crtc_state);
+ 	/*
+ 	 * Program double buffered color management registers during
+ 	 * vblank evasion. The registers should then latch during the
+ 	 * next vblank start, alongside any other double buffered registers
+ 	 * involved with the same commit.
+ 	 */
+ 	void (*color_commit)(const struct intel_crtc_state *crtc_state);
+ 	/*
+ 	 * Load LUTs (and other single buffered color management
+ 	 * registers). Will (hopefully) be called during the vblank
+ 	 * following the latching of any double buffered registers
+ 	 * involved with the same commit.
+ 	 */
+ 	void (*load_luts)(const struct intel_crtc_state *crtc_state);
+ 	void (*read_luts)(struct intel_crtc_state *crtc_state);
+ };
+ 
+ struct drm_i915_display_funcs {
+ 	void (*get_cdclk)(struct drm_i915_private *dev_priv,
+ 			  struct intel_cdclk_config *cdclk_config);
+ 	void (*set_cdclk)(struct drm_i915_private *dev_priv,
+ 			  const struct intel_cdclk_config *cdclk_config,
+ 			  enum pipe pipe);
+ 	int (*bw_calc_min_cdclk)(struct intel_atomic_state *state);
++>>>>>>> 082800ab52d6 (drm/i915: split color functions from display vtable)
  	int (*modeset_calc_cdclk)(struct intel_cdclk_state *state);
  	u8 (*calc_voltage_level)(int cdclk);
  	/* Returns the active state of the crtc, and if the crtc is active,
@@@ -311,51 -400,8 +342,34 @@@
  	/* render clock increase/decrease */
  	/* display clock increase/decrease */
  	/* pll clock increase/decrease */
- 
- 	int (*color_check)(struct intel_crtc_state *crtc_state);
- 	/*
- 	 * Program double buffered color management registers during
- 	 * vblank evasion. The registers should then latch during the
- 	 * next vblank start, alongside any other double buffered registers
- 	 * involved with the same commit.
- 	 */
- 	void (*color_commit)(const struct intel_crtc_state *crtc_state);
- 	/*
- 	 * Load LUTs (and other single buffered color management
- 	 * registers). Will (hopefully) be called during the vblank
- 	 * following the latching of any double buffered registers
- 	 * involved with the same commit.
- 	 */
- 	void (*load_luts)(const struct intel_crtc_state *crtc_state);
- 	void (*read_luts)(struct intel_crtc_state *crtc_state);
  };
  
 +struct intel_csr {
 +	struct work_struct work;
 +	const char *fw_path;
 +	u32 required_version;
 +	u32 max_fw_size; /* bytes */
 +	u32 *dmc_payload;
 +	u32 dmc_fw_size; /* dwords */
 +	u32 version;
 +	u32 mmio_count;
 +	i915_reg_t mmioaddr[20];
 +	u32 mmiodata[20];
 +	u32 dc_state;
 +	u32 target_dc_state;
 +	u32 allowed_dc_mask;
 +	intel_wakeref_t wakeref;
 +};
 +
 +enum i915_cache_level {
 +	I915_CACHE_NONE = 0,
 +	I915_CACHE_LLC, /* also used for snoopable memory on non-LLC */
 +	I915_CACHE_L3_LLC, /* gen7+, L3 sits between the domain specifc
 +			      caches, eg sampler/render caches, and the
 +			      large Last-Level-Cache. LLC is coherent with
 +			      the CPU, but L3 is only visible to the GPU. */
 +	I915_CACHE_WT, /* hsw:gt3e WriteThrough for scanouts */
 +};
  
  #define I915_COLOR_UNEVICTABLE (-1) /* a non-vma sharing the address space */
  
* Unmerged path drivers/gpu/drm/i915/display/intel_color.c
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
