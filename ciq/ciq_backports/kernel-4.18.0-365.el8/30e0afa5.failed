drm/i915: Wrap the platform specific buf trans structs into a union

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 30e0afa5570296ab737aa5d304e6c217881ce17f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/30e0afa5.failed

In order to abstact the buf trans stuff let's wrap the platform
specific structs into a union.

v2: Handle adl-p

	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210608073603.2408-4-ville.syrjala@linux.intel.com
(cherry picked from commit 30e0afa5570296ab737aa5d304e6c217881ce17f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_ddi.c
#	drivers/gpu/drm/i915/display/intel_ddi_buf_trans.c
#	drivers/gpu/drm/i915/display/intel_ddi_buf_trans.h
diff --cc drivers/gpu/drm/i915/display/intel_ddi.c
index 0f72647ed48c,83cebbbe6015..000000000000
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@@ -1571,20 -102,16 +1571,24 @@@ static void intel_prepare_dp_ddi_buffer
  	u32 iboost_bit = 0;
  	int i, n_entries;
  	enum port port = encoder->port;
++<<<<<<< HEAD
 +	const struct ddi_buf_trans *ddi_translations;
++=======
+ 	const union intel_ddi_buf_trans_entry *ddi_translations;
 -
 -	ddi_translations = hsw_get_buf_trans(encoder, crtc_state, &n_entries);
 -
 -	if (drm_WARN_ON_ONCE(&dev_priv->drm, !ddi_translations))
 -		return;
++>>>>>>> 30e0afa55702 (drm/i915: Wrap the platform specific buf trans structs into a union)
 +
 +	if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_ANALOG))
 +		ddi_translations = intel_ddi_get_buf_trans_fdi(dev_priv,
 +							       &n_entries);
 +	else if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_EDP))
 +		ddi_translations = intel_ddi_get_buf_trans_edp(encoder,
 +							       &n_entries);
 +	else
 +		ddi_translations = intel_ddi_get_buf_trans_dp(encoder,
 +							      &n_entries);
  
  	/* If we're boosting the current, set bit 31 of trans1 */
 -	if (DISPLAY_VER(dev_priv) == 9 && !IS_BROXTON(dev_priv) &&
 -	    intel_bios_encoder_dp_boost_level(encoder->devdata))
 +	if (IS_GEN9_BC(dev_priv) && intel_bios_dp_boost_level(encoder))
  		iboost_bit = DDI_BUF_BALANCE_LEG_ENABLE;
  
  	for (i = 0; i < n_entries; i++) {
@@@ -1607,9 -135,9 +1611,13 @@@ static void intel_prepare_hdmi_ddi_buff
  	u32 iboost_bit = 0;
  	int n_entries;
  	enum port port = encoder->port;
++<<<<<<< HEAD
 +	const struct ddi_buf_trans *ddi_translations;
++=======
+ 	const union intel_ddi_buf_trans_entry *ddi_translations;
++>>>>>>> 30e0afa55702 (drm/i915: Wrap the platform specific buf trans structs into a union)
  
 -	ddi_translations = hsw_get_buf_trans(encoder, crtc_state,  &n_entries);
 +	ddi_translations = intel_ddi_get_buf_trans_hdmi(encoder, &n_entries);
  
  	if (drm_WARN_ON_ONCE(&dev_priv->drm, !ddi_translations))
  		return;
@@@ -1622,13 -151,13 +1630,13 @@@
  
  	/* Entry 9 is for HDMI: */
  	intel_de_write(dev_priv, DDI_BUF_TRANS_LO(port, 9),
- 		       ddi_translations[level].trans1 | iboost_bit);
+ 		       ddi_translations[level].hsw.trans1 | iboost_bit);
  	intel_de_write(dev_priv, DDI_BUF_TRANS_HI(port, 9),
- 		       ddi_translations[level].trans2);
+ 		       ddi_translations[level].hsw.trans2);
  }
  
 -void intel_wait_ddi_buf_idle(struct drm_i915_private *dev_priv,
 -			     enum port port)
 +static void intel_wait_ddi_buf_idle(struct drm_i915_private *dev_priv,
 +				    enum port port)
  {
  	if (IS_BROXTON(dev_priv)) {
  		udelay(16);
@@@ -2529,20 -939,15 +2537,24 @@@ static void skl_ddi_set_iboost(struct i
  	u8 iboost;
  
  	if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_HDMI))
 -		iboost = intel_bios_encoder_hdmi_boost_level(encoder->devdata);
 +		iboost = intel_bios_hdmi_boost_level(encoder);
  	else
 -		iboost = intel_bios_encoder_dp_boost_level(encoder->devdata);
 +		iboost = intel_bios_dp_boost_level(encoder);
  
  	if (iboost == 0) {
++<<<<<<< HEAD
 +		const struct ddi_buf_trans *ddi_translations;
++=======
+ 		const union intel_ddi_buf_trans_entry *ddi_translations;
++>>>>>>> 30e0afa55702 (drm/i915: Wrap the platform specific buf trans structs into a union)
  		int n_entries;
  
 -		ddi_translations = hsw_get_buf_trans(encoder, crtc_state, &n_entries);
 +		if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_HDMI))
 +			ddi_translations = intel_ddi_get_buf_trans_hdmi(encoder, &n_entries);
 +		else if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_EDP))
 +			ddi_translations = intel_ddi_get_buf_trans_edp(encoder, &n_entries);
 +		else
 +			ddi_translations = intel_ddi_get_buf_trans_dp(encoder, &n_entries);
  
  		if (drm_WARN_ON_ONCE(&dev_priv->drm, !ddi_translations))
  			return;
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.c
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.h
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi.c
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.c
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.h
