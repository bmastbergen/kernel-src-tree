drm/i915: Add a table with a descriptor for all i915 modifiers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Imre Deak <imre.deak@intel.com>
commit e2b8329432b880f3821f85e1253a9b6b9d714a86
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/e2b83294.failed

Add a table describing all the framebuffer modifiers used by i915 at one
place. This has the benefit of deduplicating the listing of supported
modifiers for each platform and checking the support of these modifiers
on a given plane. This also simplifies in a similar way getting some
attribute for a modifier, for instance checking if the modifier is a
CCS modifier type.

While at it drop the cursor plane filtering from skl_plane_has_rc_ccs(),
as the cursor plane is registered with DRM core elsewhere.

v1: Unchanged.
v2:
- Keep the plane caps calculation in the plane code and pass an enum
  with these caps to intel_fb_get_modifiers(). (Ville)
- Get the modifiers calling intel_fb_get_modifiers() in i9xx_plane.c as
  well.
v3:
- s/.id/.modifier/ (Ville)
- Keep modifier_desc vs. plane_cap filter conditions consistent. (Ville)
- Drop redundant cursor plane check from skl_plane_has_rc_ccs(). (Ville)
- Use from, until display version fields in modifier_desc instead of a mask. (Jani)
- Unexport struct intel_modifier_desc, separate its decl and init. (Jani)
- Remove enum pipe, plane_id forward decls from intel_fb.h, which are
  not needed after v2.
v4:
- Reuse IS_DISPLAY_VER() instead of open-coding it. (Jani)
- Preserve the current modifier order exposed to user space. (Ville)
v5: Use }, { on one line to seperate the descriptor array elements. (Jani)

	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Cc: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
	Cc: Jani Nikula <jani.nikula@intel.com>
	Signed-off-by: Imre Deak <imre.deak@intel.com>
	Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com> (v3)
Link: https://patchwork.freedesktop.org/patch/msgid/20211020195138.1841242-2-imre.deak@intel.com
(cherry picked from commit e2b8329432b880f3821f85e1253a9b6b9d714a86)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/i9xx_plane.c
#	drivers/gpu/drm/i915/display/intel_fb.c
#	drivers/gpu/drm/i915/display/intel_fb.h
#	drivers/gpu/drm/i915/display/intel_sprite.c
#	drivers/gpu/drm/i915/display/skl_scaler.c
#	drivers/gpu/drm/i915/display/skl_universal_plane.c
diff --cc drivers/gpu/drm/i915/display/i9xx_plane.c
index e3e69e6cef65,a939accff7ee..000000000000
--- a/drivers/gpu/drm/i915/display/i9xx_plane.c
+++ b/drivers/gpu/drm/i915/display/i9xx_plane.c
@@@ -877,7 -860,9 +862,13 @@@ intel_primary_plane_create(struct drm_i
  		plane->disable_flip_done = ilk_primary_disable_flip_done;
  	}
  
++<<<<<<< HEAD
 +	if (INTEL_GEN(dev_priv) >= 5 || IS_G4X(dev_priv))
++=======
+ 	modifiers = intel_fb_plane_get_modifiers(dev_priv, PLANE_HAS_TILING);
+ 
+ 	if (DISPLAY_VER(dev_priv) >= 5 || IS_G4X(dev_priv))
++>>>>>>> e2b8329432b8 (drm/i915: Add a table with a descriptor for all i915 modifiers)
  		ret = drm_universal_plane_init(&dev_priv->drm, &plane->base,
  					       0, plane_funcs,
  					       formats, num_formats,
diff --cc drivers/gpu/drm/i915/display/intel_sprite.c
index 73ea342ba19b,2f4f47ab9da0..000000000000
--- a/drivers/gpu/drm/i915/display/intel_sprite.c
+++ b/drivers/gpu/drm/i915/display/intel_sprite.c
@@@ -43,11 -43,10 +43,12 @@@
  #include "i915_trace.h"
  #include "i915_vgpu.h"
  #include "intel_atomic_plane.h"
 -#include "intel_de.h"
  #include "intel_display_types.h"
+ #include "intel_fb.h"
  #include "intel_frontbuffer.h"
 +#include "intel_pm.h"
 +#include "intel_psr.h"
 +#include "intel_dsi.h"
  #include "intel_sprite.h"
  #include "i9xx_plane.h"
  #include "intel_vrr.h"
@@@ -2653,94 -1568,8 +2654,88 @@@ out
  	return ret;
  }
  
 -static const u32 g4x_plane_formats[] = {
 +static const u32 g4x_plane_formats[] = {
 +	DRM_FORMAT_XRGB8888,
 +	DRM_FORMAT_YUYV,
 +	DRM_FORMAT_YVYU,
 +	DRM_FORMAT_UYVY,
 +	DRM_FORMAT_VYUY,
 +};
 +
- static const u64 i9xx_plane_format_modifiers[] = {
- 	I915_FORMAT_MOD_X_TILED,
- 	DRM_FORMAT_MOD_LINEAR,
- 	DRM_FORMAT_MOD_INVALID
- };
- 
 +static const u32 snb_plane_formats[] = {
 +	DRM_FORMAT_XRGB8888,
 +	DRM_FORMAT_XBGR8888,
 +	DRM_FORMAT_XRGB2101010,
 +	DRM_FORMAT_XBGR2101010,
 +	DRM_FORMAT_XRGB16161616F,
 +	DRM_FORMAT_XBGR16161616F,
 +	DRM_FORMAT_YUYV,
 +	DRM_FORMAT_YVYU,
 +	DRM_FORMAT_UYVY,
 +	DRM_FORMAT_VYUY,
 +};
 +
 +static const u32 vlv_plane_formats[] = {
 +	DRM_FORMAT_C8,
 +	DRM_FORMAT_RGB565,
 +	DRM_FORMAT_XRGB8888,
 +	DRM_FORMAT_XBGR8888,
 +	DRM_FORMAT_ARGB8888,
 +	DRM_FORMAT_ABGR8888,
 +	DRM_FORMAT_XBGR2101010,
 +	DRM_FORMAT_ABGR2101010,
 +	DRM_FORMAT_YUYV,
 +	DRM_FORMAT_YVYU,
 +	DRM_FORMAT_UYVY,
 +	DRM_FORMAT_VYUY,
 +};
 +
 +static const u32 chv_pipe_b_sprite_formats[] = {
 +	DRM_FORMAT_C8,
 +	DRM_FORMAT_RGB565,
 +	DRM_FORMAT_XRGB8888,
 +	DRM_FORMAT_XBGR8888,
 +	DRM_FORMAT_ARGB8888,
 +	DRM_FORMAT_ABGR8888,
 +	DRM_FORMAT_XRGB2101010,
 +	DRM_FORMAT_XBGR2101010,
 +	DRM_FORMAT_ARGB2101010,
 +	DRM_FORMAT_ABGR2101010,
 +	DRM_FORMAT_YUYV,
 +	DRM_FORMAT_YVYU,
 +	DRM_FORMAT_UYVY,
 +	DRM_FORMAT_VYUY,
 +};
 +
 +static const u32 skl_plane_formats[] = {
 +	DRM_FORMAT_C8,
 +	DRM_FORMAT_RGB565,
 +	DRM_FORMAT_XRGB8888,
 +	DRM_FORMAT_XBGR8888,
 +	DRM_FORMAT_ARGB8888,
 +	DRM_FORMAT_ABGR8888,
 +	DRM_FORMAT_XRGB2101010,
 +	DRM_FORMAT_XBGR2101010,
 +	DRM_FORMAT_XRGB16161616F,
 +	DRM_FORMAT_XBGR16161616F,
 +	DRM_FORMAT_YUYV,
 +	DRM_FORMAT_YVYU,
 +	DRM_FORMAT_UYVY,
 +	DRM_FORMAT_VYUY,
 +	DRM_FORMAT_XYUV8888,
 +};
 +
 +static const u32 skl_planar_formats[] = {
 +	DRM_FORMAT_C8,
 +	DRM_FORMAT_RGB565,
  	DRM_FORMAT_XRGB8888,
 +	DRM_FORMAT_XBGR8888,
 +	DRM_FORMAT_ARGB8888,
 +	DRM_FORMAT_ABGR8888,
 +	DRM_FORMAT_XRGB2101010,
 +	DRM_FORMAT_XBGR2101010,
 +	DRM_FORMAT_XRGB16161616F,
 +	DRM_FORMAT_XBGR16161616F,
  	DRM_FORMAT_YUYV,
  	DRM_FORMAT_YVYU,
  	DRM_FORMAT_UYVY,
@@@ -3441,10 -1756,9 +3421,9 @@@ intel_sprite_plane_create(struct drm_i9
  			formats = vlv_plane_formats;
  			num_formats = ARRAY_SIZE(vlv_plane_formats);
  		}
- 		modifiers = i9xx_plane_format_modifiers;
  
  		plane_funcs = &vlv_sprite_funcs;
 -	} else if (DISPLAY_VER(dev_priv) >= 7) {
 +	} else if (INTEL_GEN(dev_priv) >= 7) {
  		plane->update_plane = ivb_update_plane;
  		plane->disable_plane = ivb_disable_plane;
  		plane->get_hw_state = ivb_plane_get_hw_state;
@@@ -3471,8 -1784,7 +3449,12 @@@
  		plane->max_stride = g4x_sprite_max_stride;
  		plane->min_cdclk = g4x_sprite_min_cdclk;
  
++<<<<<<< HEAD
 +		modifiers = i9xx_plane_format_modifiers;
 +		if (IS_GEN(dev_priv, 6)) {
++=======
+ 		if (IS_SANDYBRIDGE(dev_priv)) {
++>>>>>>> e2b8329432b8 (drm/i915: Add a table with a descriptor for all i915 modifiers)
  			formats = snb_plane_formats;
  			num_formats = ARRAY_SIZE(snb_plane_formats);
  
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.c
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.h
* Unmerged path drivers/gpu/drm/i915/display/skl_scaler.c
* Unmerged path drivers/gpu/drm/i915/display/skl_universal_plane.c
* Unmerged path drivers/gpu/drm/i915/display/i9xx_plane.c
diff --git a/drivers/gpu/drm/i915/display/intel_cursor.c b/drivers/gpu/drm/i915/display/intel_cursor.c
index 21fe4d2753e9..d78d7f2c28c0 100644
--- a/drivers/gpu/drm/i915/display/intel_cursor.c
+++ b/drivers/gpu/drm/i915/display/intel_cursor.c
@@ -26,11 +26,6 @@ static const u32 intel_cursor_formats[] = {
 	DRM_FORMAT_ARGB8888,
 };
 
-static const u64 cursor_format_modifiers[] = {
-	DRM_FORMAT_MOD_LINEAR,
-	DRM_FORMAT_MOD_INVALID
-};
-
 static u32 intel_cursor_base(const struct intel_plane_state *plane_state)
 {
 	struct drm_i915_private *dev_priv =
@@ -597,8 +592,10 @@ static bool i9xx_cursor_get_hw_state(struct intel_plane *plane,
 static bool intel_cursor_format_mod_supported(struct drm_plane *_plane,
 					      u32 format, u64 modifier)
 {
-	return modifier == DRM_FORMAT_MOD_LINEAR &&
-		format == DRM_FORMAT_ARGB8888;
+	if (!intel_fb_plane_supports_modifier(to_intel_plane(_plane), modifier))
+		return false;
+
+	return format == DRM_FORMAT_ARGB8888;
 }
 
 static int
@@ -743,6 +740,7 @@ intel_cursor_plane_create(struct drm_i915_private *dev_priv,
 {
 	struct intel_plane *cursor;
 	int ret, zpos;
+	u64 *modifiers;
 
 	cursor = intel_plane_alloc();
 	if (IS_ERR(cursor))
@@ -773,13 +771,18 @@ intel_cursor_plane_create(struct drm_i915_private *dev_priv,
 	if (IS_I845G(dev_priv) || IS_I865G(dev_priv) || HAS_CUR_FBC(dev_priv))
 		cursor->cursor.size = ~0;
 
+	modifiers = intel_fb_plane_get_modifiers(dev_priv, PLANE_HAS_NO_CAPS);
+
 	ret = drm_universal_plane_init(&dev_priv->drm, &cursor->base,
 				       0, &intel_cursor_plane_funcs,
 				       intel_cursor_formats,
 				       ARRAY_SIZE(intel_cursor_formats),
-				       cursor_format_modifiers,
+				       modifiers,
 				       DRM_PLANE_TYPE_CURSOR,
 				       "cursor %c", pipe_name(pipe));
+
+	kfree(modifiers);
+
 	if (ret)
 		goto fail;
 
diff --git a/drivers/gpu/drm/i915/display/intel_display_types.h b/drivers/gpu/drm/i915/display/intel_display_types.h
index 421b07aecc99..f06a388a1fec 100644
--- a/drivers/gpu/drm/i915/display/intel_display_types.h
+++ b/drivers/gpu/drm/i915/display/intel_display_types.h
@@ -1264,7 +1264,6 @@ struct intel_plane {
 	enum plane_id id;
 	enum pipe pipe;
 	bool has_fbc;
-	bool has_ccs;
 	bool need_async_flip_disable_wa;
 	u32 frontbuffer_bit;
 
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.c
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.h
* Unmerged path drivers/gpu/drm/i915/display/intel_sprite.c
* Unmerged path drivers/gpu/drm/i915/display/skl_scaler.c
* Unmerged path drivers/gpu/drm/i915/display/skl_universal_plane.c
