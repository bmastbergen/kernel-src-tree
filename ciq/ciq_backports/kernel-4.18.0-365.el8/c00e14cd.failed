drm/i915/adl_p: Also disable underrun recovery with MSO

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Matt Roper <matthew.d.roper@intel.com>
commit c00e14cd4d3fbc5469d6e367371f9e4786a08c03
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/c00e14cd.failed

One of the cases that the bspec lists for when underrun recovery must be
disabled is "COG;" that note actually refers to eDP multi-segmented
operation (MSO).  Let's ensure the this additional restriction is
honored by the driver.

Bspec: 50351
	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
Fixes: ba3b049f4774 ("drm/i915/adl_p: Allow underrun recovery when possible")
	Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210816204112.2960624-1-matthew.d.roper@intel.com
	Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
(cherry picked from commit c00e14cd4d3fbc5469d6e367371f9e4786a08c03)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_display.c
diff --cc drivers/gpu/drm/i915/display/intel_display.c
index 105a65e966a7,134a6acbd8fb..000000000000
--- a/drivers/gpu/drm/i915/display/intel_display.c
+++ b/drivers/gpu/drm/i915/display/intel_display.c
@@@ -3753,8 -2212,29 +3753,32 @@@ unlock
  	clear_bit_unlock(I915_RESET_MODESET, &dev_priv->gt.reset.flags);
  }
  
 -static bool underrun_recovery_supported(const struct intel_crtc_state *crtc_state)
 +static void icl_set_pipe_chicken(struct intel_crtc *crtc)
  {
++<<<<<<< HEAD
++=======
+ 	if (crtc_state->pch_pfit.enabled &&
+ 	    (crtc_state->pipe_src_w > drm_rect_width(&crtc_state->pch_pfit.dst) ||
+ 	     crtc_state->pipe_src_h > drm_rect_height(&crtc_state->pch_pfit.dst) ||
+ 	     crtc_state->output_format == INTEL_OUTPUT_FORMAT_YCBCR420))
+ 		return false;
+ 
+ 	if (crtc_state->dsc.compression_enable)
+ 		return false;
+ 
+ 	if (crtc_state->has_psr2)
+ 		return false;
+ 
+ 	if (crtc_state->splitter.enable)
+ 		return false;
+ 
+ 	return true;
+ }
+ 
+ static void icl_set_pipe_chicken(const struct intel_crtc_state *crtc_state)
+ {
+ 	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
++>>>>>>> c00e14cd4d3f (drm/i915/adl_p: Also disable underrun recovery with MSO)
  	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
  	enum pipe pipe = crtc->pipe;
  	u32 tmp;
* Unmerged path drivers/gpu/drm/i915/display/intel_display.c
