powerpc/watchdog: Fix wd_smp_last_reset_tb reporting

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Nicholas Piggin <npiggin@gmail.com>
commit 3d030e301856da366380b3865fce6c03037b08a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/3d030e30.failed

wd_smp_last_reset_tb now gets reset by watchdog_smp_panic() as part of
marking CPUs stuck and removing them from the pending mask before it
begins any printing. This causes last reset times reported to be off.

Fix this by reading it into a local variable before it gets reset.

Fixes: 76521c4b0291 ("powerpc/watchdog: Avoid holding wd_smp_lock over printk and smp_send_nmi_ipi")
	Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20211125103346.1188958-1-npiggin@gmail.com

(cherry picked from commit 3d030e301856da366380b3865fce6c03037b08a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/watchdog.c
diff --cc arch/powerpc/kernel/watchdog.c
index ad2f126d0d8d,23745af38d62..000000000000
--- a/arch/powerpc/kernel/watchdog.c
+++ b/arch/powerpc/kernel/watchdog.c
@@@ -146,25 -175,43 +146,34 @@@ static bool set_cpu_stuck(int cpu, u64 
  	return false;
  }
  
 -static void watchdog_smp_panic(int cpu)
 +static void watchdog_smp_panic(int cpu, u64 tb)
  {
 -	static cpumask_t wd_smp_cpus_ipi; // protected by reporting
  	unsigned long flags;
++<<<<<<< HEAD
++=======
+ 	u64 tb, last_reset;
++>>>>>>> 3d030e301856 (powerpc/watchdog: Fix wd_smp_last_reset_tb reporting)
  	int c;
  
  	wd_smp_lock(&flags);
  	/* Double check some things under lock */
++<<<<<<< HEAD
 +	if ((s64)(tb - wd_smp_last_reset_tb) < (s64)wd_smp_panic_timeout_tb)
++=======
+ 	tb = get_tb();
+ 	last_reset = wd_smp_last_reset_tb;
+ 	if ((s64)(tb - last_reset) < (s64)wd_smp_panic_timeout_tb)
++>>>>>>> 3d030e301856 (powerpc/watchdog: Fix wd_smp_last_reset_tb reporting)
  		goto out;
  	if (cpumask_test_cpu(cpu, &wd_smp_cpus_pending))
  		goto out;
 -	if (!wd_try_report())
 +	if (cpumask_weight(&wd_smp_cpus_pending) == 0)
  		goto out;
 -	for_each_online_cpu(c) {
 -		if (!cpumask_test_cpu(c, &wd_smp_cpus_pending))
 -			continue;
 -		if (c == cpu)
 -			continue; // should not happen
 -
 -		__cpumask_set_cpu(c, &wd_smp_cpus_ipi);
 -		if (set_cpu_stuck(c))
 -			break;
 -	}
 -	if (cpumask_empty(&wd_smp_cpus_ipi)) {
 -		wd_end_reporting();
 -		goto out;
 -	}
 -	wd_smp_unlock(&flags);
  
  	pr_emerg("CPU %d detected hard LOCKUP on other CPUs %*pbl\n",
 -		 cpu, cpumask_pr_args(&wd_smp_cpus_ipi));
 +		 cpu, cpumask_pr_args(&wd_smp_cpus_pending));
  	pr_emerg("CPU %d TB:%lld, last SMP heartbeat TB:%lld (%lldms ago)\n",
- 		 cpu, tb, wd_smp_last_reset_tb,
- 		 tb_to_ns(tb - wd_smp_last_reset_tb) / 1000000);
+ 		 cpu, tb, last_reset, tb_to_ns(tb - last_reset) / 1000000);
  
  	if (!sysctl_hardlockup_all_cpu_backtrace) {
  		/*
* Unmerged path arch/powerpc/kernel/watchdog.c
