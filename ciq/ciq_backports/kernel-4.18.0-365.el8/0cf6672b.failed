skmsg: Fix a memory leak in sk_psock_verdict_apply()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Cong Wang <cong.wang@bytedance.com>
commit 0cf6672b23c8aa9d9274798dd63cbf6ede77ef90
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/0cf6672b.failed

If the dest psock does not set SK_PSOCK_TX_ENABLED,
the skb can't be queued anywhere so must be dropped.

This one is found during code review.

Fixes: 799aa7f98d53 ("skmsg: Avoid lock_sock() in sk_psock_backlog()")
	Signed-off-by: Cong Wang <cong.wang@bytedance.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20210615021342.7416-6-xiyou.wangcong@gmail.com
(cherry picked from commit 0cf6672b23c8aa9d9274798dd63cbf6ede77ef90)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/skmsg.c
diff --cc net/core/skmsg.c
index cfa6fc7cc1e0,5464477e2d3d..000000000000
--- a/net/core/skmsg.c
+++ b/net/core/skmsg.c
@@@ -847,8 -920,17 +847,22 @@@ static void sk_psock_verdict_apply(stru
  			err = sk_psock_skb_ingress_self(psock, skb);
  		}
  		if (err < 0) {
++<<<<<<< HEAD
 +			skb_queue_tail(&psock->ingress_skb, skb);
 +			schedule_work(&psock->work);
++=======
+ 			spin_lock_bh(&psock->ingress_lock);
+ 			if (sk_psock_test_state(psock, SK_PSOCK_TX_ENABLED)) {
+ 				skb_queue_tail(&psock->ingress_skb, skb);
+ 				schedule_work(&psock->work);
+ 				err = 0;
+ 			}
+ 			spin_unlock_bh(&psock->ingress_lock);
+ 			if (err < 0) {
+ 				skb_bpf_redirect_clear(skb);
+ 				goto out_free;
+ 			}
++>>>>>>> 0cf6672b23c8 (skmsg: Fix a memory leak in sk_psock_verdict_apply())
  		}
  		break;
  	case __SK_REDIRECT:
* Unmerged path net/core/skmsg.c
