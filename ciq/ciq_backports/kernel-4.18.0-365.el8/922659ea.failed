swiotlb-xen: remove xen_swiotlb_dma_mmap and xen_swiotlb_dma_get_sgtable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 922659ea771b3fd728149262c5ea15608fab9719
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/922659ea.failed

There is no need to wrap the common version, just wire them up directly.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
(cherry picked from commit 922659ea771b3fd728149262c5ea15608fab9719)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/xen/swiotlb-xen.c
diff --cc drivers/xen/swiotlb-xen.c
index 07aef6f0e45a,b8808677ae1d..000000000000
--- a/drivers/xen/swiotlb-xen.c
+++ b/drivers/xen/swiotlb-xen.c
@@@ -552,51 -547,6 +552,54 @@@ xen_swiotlb_dma_supported(struct devic
  	return xen_virt_to_bus(xen_io_tlb_end - 1) <= mask;
  }
  
++<<<<<<< HEAD
 +/*
 + * Create userspace mapping for the DMA-coherent memory.
 + * This function should be called with the pages from the current domain only,
 + * passing pages mapped from other domains would lead to memory corruption.
 + */
 +static int
 +xen_swiotlb_dma_mmap(struct device *dev, struct vm_area_struct *vma,
 +		     void *cpu_addr, dma_addr_t dma_addr, size_t size,
 +		     unsigned long attrs)
 +{
 +#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 +	if (xen_get_dma_ops(dev)->mmap)
 +		return xen_get_dma_ops(dev)->mmap(dev, vma, cpu_addr,
 +						    dma_addr, size, attrs);
 +#endif
 +	return dma_common_mmap(dev, vma, cpu_addr, dma_addr, size, attrs);
 +}
 +
 +/*
 + * This function should be called with the pages from the current domain only,
 + * passing pages mapped from other domains would lead to memory corruption.
 + */
 +static int
 +xen_swiotlb_get_sgtable(struct device *dev, struct sg_table *sgt,
 +			void *cpu_addr, dma_addr_t handle, size_t size,
 +			unsigned long attrs)
 +{
 +#if defined(CONFIG_ARM) || defined(CONFIG_ARM64)
 +	if (xen_get_dma_ops(dev)->get_sgtable) {
 +#if 0
 +	/*
 +	 * This check verifies that the page belongs to the current domain and
 +	 * is not one mapped from another domain.
 +	 * This check is for debug only, and should not go to production build
 +	 */
 +		unsigned long bfn = PHYS_PFN(dma_to_phys(dev, handle));
 +		BUG_ON (!page_is_ram(bfn));
 +#endif
 +		return xen_get_dma_ops(dev)->get_sgtable(dev, sgt, cpu_addr,
 +							   handle, size, attrs);
 +	}
 +#endif
 +	return dma_common_get_sgtable(dev, sgt, cpu_addr, handle, size, attrs);
 +}
 +
++=======
++>>>>>>> 922659ea771b (swiotlb-xen: remove xen_swiotlb_dma_mmap and xen_swiotlb_dma_get_sgtable)
  const struct dma_map_ops xen_swiotlb_dma_ops = {
  	.alloc = xen_swiotlb_alloc_coherent,
  	.free = xen_swiotlb_free_coherent,
@@@ -609,8 -559,6 +612,13 @@@
  	.map_page = xen_swiotlb_map_page,
  	.unmap_page = xen_swiotlb_unmap_page,
  	.dma_supported = xen_swiotlb_dma_supported,
++<<<<<<< HEAD
 +	.mmap = xen_swiotlb_dma_mmap,
 +	.get_sgtable = xen_swiotlb_get_sgtable,
 +	.alloc_pages = dma_common_alloc_pages,
 +	.free_pages = dma_common_free_pages,
++=======
+ 	.mmap = dma_common_mmap,
+ 	.get_sgtable = dma_common_get_sgtable,
++>>>>>>> 922659ea771b (swiotlb-xen: remove xen_swiotlb_dma_mmap and xen_swiotlb_dma_get_sgtable)
  };
* Unmerged path drivers/xen/swiotlb-xen.c
