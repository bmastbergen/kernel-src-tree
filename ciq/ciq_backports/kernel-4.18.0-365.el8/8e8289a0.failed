drm/i915/tc: Avoid using legacy AUX PW in TBT mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Imre Deak <imre.deak@intel.com>
commit 8e8289a00e6360e0b340db05b7e16dfb5e7be067
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/8e8289a0.failed

For the ADL-P TBT mode the spec doesn't require blocking TC-cold by
using the legacy AUX power domain. To avoid the timeouts that this would
cause during PHY disconnect/reconnect sequences (which will be more
frequent after a follow-up change) use the TC_COLD_OFF power domain in
TBT mode on all platforms. On TGL this power domain blocks TC-cold via a
PUNIT command, while on other platforms the domain just takes a runtime
PM reference.

If the HPD live status indicates that the port mode needs to be reset
- for instance after switching from TBT to a DP-alt sink - still take
the AUX domain, since the IOM firmware handshake requires this.

v2: Rebased on v2 of the previous patch.

	Cc: José Roberto de Souza <jose.souza@intel.com>
	Signed-off-by: Imre Deak <imre.deak@intel.com>
	Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210929132833.2253961-5-imre.deak@intel.com
(cherry picked from commit 8e8289a00e6360e0b340db05b7e16dfb5e7be067)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_tc.c
diff --cc drivers/gpu/drm/i915/display/intel_tc.c
index 2cefc13535a0,2df4d0beb636..000000000000
--- a/drivers/gpu/drm/i915/display/intel_tc.c
+++ b/drivers/gpu/drm/i915/display/intel_tc.c
@@@ -23,15 -24,45 +23,21 @@@ static const char *tc_port_mode_name(en
  	return names[mode];
  }
  
 -static bool intel_tc_port_in_mode(struct intel_digital_port *dig_port,
 -				  enum tc_port_mode mode)
 -{
 -	struct drm_i915_private *i915 = to_i915(dig_port->base.base.dev);
 -	enum phy phy = intel_port_to_phy(i915, dig_port->base.port);
 -
 -	return intel_phy_is_tc(i915, phy) && dig_port->tc_mode == mode;
 -}
 -
 -bool intel_tc_port_in_tbt_alt_mode(struct intel_digital_port *dig_port)
 -{
 -	return intel_tc_port_in_mode(dig_port, TC_PORT_TBT_ALT);
 -}
 -
 -bool intel_tc_port_in_dp_alt_mode(struct intel_digital_port *dig_port)
 -{
 -	return intel_tc_port_in_mode(dig_port, TC_PORT_DP_ALT);
 -}
 -
 -bool intel_tc_port_in_legacy_mode(struct intel_digital_port *dig_port)
 -{
 -	return intel_tc_port_in_mode(dig_port, TC_PORT_LEGACY);
 -}
 -
 -bool intel_tc_cold_requires_aux_pw(struct intel_digital_port *dig_port)
 +static enum intel_display_power_domain
 +tc_cold_get_power_domain(struct intel_digital_port *dig_port)
  {
++<<<<<<< HEAD
  	struct drm_i915_private *i915 = to_i915(dig_port->base.base.dev);
  
 -	return (DISPLAY_VER(i915) == 11 && dig_port->tc_legacy_port) ||
 -		IS_ALDERLAKE_P(i915);
 -}
 -
 -static enum intel_display_power_domain
 -tc_cold_get_power_domain(struct intel_digital_port *dig_port, enum tc_port_mode mode)
 -{
 +	if (INTEL_GEN(i915) == 11)
 +		return intel_legacy_aux_to_power_domain(dig_port->aux_ch);
 +	else
++=======
+ 	if (mode == TC_PORT_TBT_ALT || !intel_tc_cold_requires_aux_pw(dig_port))
++>>>>>>> 8e8289a00e63 (drm/i915/tc: Avoid using legacy AUX PW in TBT mode)
  		return POWER_DOMAIN_TC_COLD_OFF;
+ 
+ 	return intel_legacy_aux_to_power_domain(dig_port->aux_ch);
  }
  
  static intel_wakeref_t
@@@ -564,16 -760,10 +595,23 @@@ static void __intel_tc_port_lock(struc
  
  	mutex_lock(&dig_port->tc_lock);
  
++<<<<<<< HEAD
 +	if (!dig_port->tc_link_refcount) {
 +		intel_wakeref_t tc_cold_wref;
 +
 +		tc_cold_wref = tc_cold_block(dig_port);
 +
 +		if (intel_tc_port_needs_reset(dig_port))
 +			intel_tc_port_reset_mode(dig_port, required_lanes);
 +
 +		tc_cold_unblock(dig_port, tc_cold_wref);
 +	}
++=======
+ 
+ 	if (!dig_port->tc_link_refcount)
+ 		intel_tc_port_update_mode(dig_port, required_lanes,
+ 					  force_disconnect);
++>>>>>>> 8e8289a00e63 (drm/i915/tc: Avoid using legacy AUX PW in TBT mode)
  
  	drm_WARN_ON(&i915->drm, dig_port->tc_lock_wakeref);
  	dig_port->tc_lock_wakeref = wakeref;
* Unmerged path drivers/gpu/drm/i915/display/intel_tc.c
