fork: support VMAP_STACK with KASAN_VMALLOC

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Daniel Axtens <dja@axtens.net>
commit eafb149ed73a8bb8359c0ce027b98acd4e95b070
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/eafb149e.failed

Supporting VMAP_STACK with KASAN_VMALLOC is straightforward:

 - clear the shadow region of vmapped stacks when swapping them in
 - tweak Kconfig to allow VMAP_STACK to be turned on with KASAN

Link: http://lkml.kernel.org/r/20191031093909.9228-4-dja@axtens.net
	Signed-off-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
	Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Christophe Leroy <christophe.leroy@c-s.fr>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit eafb149ed73a8bb8359c0ce027b98acd4e95b070)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/fork.c
diff --cc kernel/fork.c
index 6cbbcf7501b3,21c6c1e29b98..000000000000
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@@ -92,7 -92,8 +92,12 @@@
  #include <linux/kcov.h>
  #include <linux/livepatch.h>
  #include <linux/thread_info.h>
++<<<<<<< HEAD
 +#include <linux/scs.h>
++=======
+ #include <linux/stackleak.h>
+ #include <linux/kasan.h>
++>>>>>>> eafb149ed73a (fork: support VMAP_STACK with KASAN_VMALLOC)
  
  #include <asm/pgtable.h>
  #include <asm/pgalloc.h>
diff --git a/arch/Kconfig b/arch/Kconfig
index 9daac07317f6..695c1962da78 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -974,16 +974,17 @@ config HAVE_ARCH_VMAP_STACK
 config VMAP_STACK
 	default y
 	bool "Use a virtually-mapped stack"
-	depends on HAVE_ARCH_VMAP_STACK && !KASAN
+	depends on HAVE_ARCH_VMAP_STACK
+	depends on !KASAN || KASAN_VMALLOC
 	---help---
 	  Enable this if you want the use virtually-mapped kernel stacks
 	  with guard pages.  This causes kernel stack overflows to be
 	  caught immediately rather than causing difficult-to-diagnose
 	  corruption.
 
-	  This is presently incompatible with KASAN because KASAN expects
-	  the stack to map directly to the KASAN shadow map using a formula
-	  that is incorrect if the stack is in vmalloc space.
+	  To use this with KASAN, the architecture must support backing
+	  virtual mappings with real shadow memory, and KASAN_VMALLOC must
+	  be enabled.
 
 config ARCH_OPTIONAL_KERNEL_RWX
 	def_bool n
* Unmerged path kernel/fork.c
