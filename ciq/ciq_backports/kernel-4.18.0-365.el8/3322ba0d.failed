s390: make PCI mio support a machine flag

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Niklas Schnelle <schnelle@linux.ibm.com>
commit 3322ba0d7bea1e24ae464418626f6a15b69533ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/3322ba0d.failed

Kernel support for the newer PCI mio instructions can be toggled off
with the pci=nomio command line option which needs to integrate with
common code PCI option parsing. However this option then toggles static
branches which can't be toggled yet in an early_param() call.

Thus commit 9964f396f1d0 ("s390: fix setting of mio addressing control")
moved toggling the static branches to the PCI init routine.

With this setup however we can't check for mio support outside the PCI
code during early boot, i.e. before switching the static branches, which
we need to be able to export this as an ELF HWCAP.

Improve on this by turning mio availability into a machine flag that
gets initially set based on CONFIG_PCI and the facility bit and gets
toggled off if pci=nomio is found during PCI option parsing allowing
simple access to this machine flag after early init.

	Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
	Signed-off-by: Niklas Schnelle <schnelle@linux.ibm.com>
	Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
(cherry picked from commit 3322ba0d7bea1e24ae464418626f6a15b69533ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/setup.h
diff --cc arch/s390/include/asm/setup.h
index d75f0e4ddcb6,b6606ffd85d8..000000000000
--- a/arch/s390/include/asm/setup.h
+++ b/arch/s390/include/asm/setup.h
@@@ -20,25 -17,25 +20,45 @@@
   * Machine features detected in early.c
   */
  
++<<<<<<< HEAD
 +#define MACHINE_FLAG_VM		_BITUL(0)
 +#define MACHINE_FLAG_KVM	_BITUL(1)
 +#define MACHINE_FLAG_LPAR	_BITUL(2)
 +#define MACHINE_FLAG_DIAG9C	_BITUL(3)
 +#define MACHINE_FLAG_ESOP	_BITUL(4)
 +#define MACHINE_FLAG_IDTE	_BITUL(5)
 +#define MACHINE_FLAG_DIAG44	_BITUL(6)
 +#define MACHINE_FLAG_EDAT1	_BITUL(7)
 +#define MACHINE_FLAG_EDAT2	_BITUL(8)
 +#define MACHINE_FLAG_TOPOLOGY	_BITUL(10)
 +#define MACHINE_FLAG_TE		_BITUL(11)
 +#define MACHINE_FLAG_TLB_LC	_BITUL(12)
 +#define MACHINE_FLAG_VX		_BITUL(13)
 +#define MACHINE_FLAG_TLB_GUEST	_BITUL(14)
 +#define MACHINE_FLAG_NX		_BITUL(15)
 +#define MACHINE_FLAG_GS		_BITUL(16)
 +#define MACHINE_FLAG_SCC	_BITUL(17)
++=======
+ #define MACHINE_FLAG_VM		BIT(0)
+ #define MACHINE_FLAG_KVM	BIT(1)
+ #define MACHINE_FLAG_LPAR	BIT(2)
+ #define MACHINE_FLAG_DIAG9C	BIT(3)
+ #define MACHINE_FLAG_ESOP	BIT(4)
+ #define MACHINE_FLAG_IDTE	BIT(5)
+ #define MACHINE_FLAG_EDAT1	BIT(7)
+ #define MACHINE_FLAG_EDAT2	BIT(8)
+ #define MACHINE_FLAG_TOPOLOGY	BIT(10)
+ #define MACHINE_FLAG_TE		BIT(11)
+ #define MACHINE_FLAG_TLB_LC	BIT(12)
+ #define MACHINE_FLAG_VX		BIT(13)
+ #define MACHINE_FLAG_TLB_GUEST	BIT(14)
+ #define MACHINE_FLAG_NX		BIT(15)
+ #define MACHINE_FLAG_GS		BIT(16)
+ #define MACHINE_FLAG_SCC	BIT(17)
+ #define MACHINE_FLAG_PCI_MIO	BIT(18)
++>>>>>>> 3322ba0d7bea (s390: make PCI mio support a machine flag)
  
 -#define LPP_MAGIC		BIT(31)
 +#define LPP_MAGIC		_BITUL(31)
  #define LPP_PID_MASK		_AC(0xffffffff, UL)
  
  /* Offsets to entry points in kernel/head.S  */
* Unmerged path arch/s390/include/asm/setup.h
diff --git a/arch/s390/kernel/early.c b/arch/s390/kernel/early.c
index 0916e0e78677..21937ca5489c 100644
--- a/arch/s390/kernel/early.c
+++ b/arch/s390/kernel/early.c
@@ -235,6 +235,10 @@ static __init void detect_machine_facilities(void)
 		clock_comparator_max = -1ULL >> 1;
 		__ctl_set_bit(0, 53);
 	}
+	if (IS_ENABLED(CONFIG_PCI) && test_facility(153)) {
+		S390_lowcore.machine_flags |= MACHINE_FLAG_PCI_MIO;
+		/* the control bit is set during PCI initialization */
+	}
 }
 
 static inline void save_vector_registers(void)
diff --git a/arch/s390/pci/pci.c b/arch/s390/pci/pci.c
index 1fec60fc669b..0e3d45033337 100644
--- a/arch/s390/pci/pci.c
+++ b/arch/s390/pci/pci.c
@@ -847,7 +847,6 @@ static void zpci_mem_exit(void)
 }
 
 static unsigned int s390_pci_probe __initdata = 1;
-static unsigned int s390_pci_no_mio __initdata;
 unsigned int s390_pci_force_floating __initdata;
 static unsigned int s390_pci_initialized;
 
@@ -858,7 +857,7 @@ char * __init pcibios_setup(char *str)
 		return NULL;
 	}
 	if (!strcmp(str, "nomio")) {
-		s390_pci_no_mio = 1;
+		S390_lowcore.machine_flags &= ~MACHINE_FLAG_PCI_MIO;
 		return NULL;
 	}
 	if (!strcmp(str, "force_floating")) {
@@ -887,7 +886,7 @@ static int __init pci_base_init(void)
 	if (!test_facility(69) || !test_facility(71))
 		return 0;
 
-	if (test_facility(153) && !s390_pci_no_mio) {
+	if (MACHINE_HAS_PCI_MIO) {
 		static_branch_enable(&have_mio);
 		ctl_set_bit(2, 5);
 	}
