md/raid6: refactor raid5_read_one_chunk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Christoph Hellwig <hch@lst.de>
commit e82ed3a4fbb54b2d7dcb2a7733520f3e10b97abf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/e82ed3a4.failed

Refactor raid5_read_one_chunk so that all simple checks are done
before allocating the bio.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Acked-by: Song Liu <song@kernel.org>
	Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
	Acked-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e82ed3a4fbb54b2d7dcb2a7733520f3e10b97abf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid5.c
diff --cc drivers/md/raid5.c
index 08041f68d898,a348b2adf2a9..000000000000
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@@ -5470,45 -5441,24 +5471,56 @@@ static int raid5_read_one_chunk(struct 
  		return 0;
  	}
  
- 	if (rdev) {
- 		sector_t first_bad;
- 		int bad_sectors;
+ 	/* No reshape active, so we can trust rdev->data_offset */
+ 	align_bio->bi_iter.bi_sector += rdev->data_offset;
  
++<<<<<<< HEAD
 +		atomic_inc(&rdev->nr_pending);
 +		rcu_read_unlock();
 +		raid_bio->bi_next = (void*)rdev;
 +		bio_set_dev(align_bi, rdev->bdev);
 +		bio_clear_flag(align_bi, BIO_SEG_VALID);
++=======
+ 	spin_lock_irq(&conf->device_lock);
+ 	wait_event_lock_irq(conf->wait_for_quiescent, conf->quiesce == 0,
+ 			    conf->device_lock);
+ 	atomic_inc(&conf->active_aligned_reads);
+ 	spin_unlock_irq(&conf->device_lock);
++>>>>>>> e82ed3a4fbb5 (md/raid6: refactor raid5_read_one_chunk)
+ 
+ 	if (mddev->gendisk)
+ 		trace_block_bio_remap(align_bio, disk_devt(mddev->gendisk),
+ 				      raid_bio->bi_iter.bi_sector);
+ 	submit_bio_noacct(align_bio);
+ 	return 1;
  
- 		if (is_badblock(rdev, align_bi->bi_iter.bi_sector,
- 				bio_sectors(align_bi),
- 				&first_bad, &bad_sectors)) {
- 			bio_put(align_bi);
- 			rdev_dec_pending(rdev, mddev);
- 			return 0;
- 		}
- 
++<<<<<<< HEAD
 +		/* No reshape active, so we can trust rdev->data_offset */
 +		align_bi->bi_iter.bi_sector += rdev->data_offset;
 +
 +		spin_lock_irq(&conf->device_lock);
 +		wait_event_lock_irq(conf->wait_for_quiescent,
 +				    conf->quiesce == 0,
 +				    conf->device_lock);
 +		atomic_inc(&conf->active_aligned_reads);
 +		spin_unlock_irq(&conf->device_lock);
 +
 +		if (mddev->gendisk)
 +			trace_block_bio_remap(align_bi->bi_disk->queue,
 +					      align_bi, disk_devt(mddev->gendisk),
 +					      raid_bio->bi_iter.bi_sector);
 +		generic_make_request(align_bi);
 +		return 1;
 +	} else {
 +		rcu_read_unlock();
 +		bio_put(align_bi);
 +		return 0;
 +	}
++=======
+ out_rcu_unlock:
+ 	rcu_read_unlock();
+ 	return 0;
++>>>>>>> e82ed3a4fbb5 (md/raid6: refactor raid5_read_one_chunk)
  }
  
  static struct bio *chunk_aligned_read(struct mddev *mddev, struct bio *raid_bio)
* Unmerged path drivers/md/raid5.c
