ice: make use of ice_for_each_* macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit 2faf63b650bb2f6f4549227406631f6004b14101
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/2faf63b6.failed

Go through the code base and use ice_for_each_* macros.  While at it,
introduce ice_for_each_xdp_txq() macro that can be used for looping over
xdp_rings array.

Commit is not introducing any new functionality.

	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Tested-by: Gurucharan G <gurucharanx.g@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 2faf63b650bb2f6f4549227406631f6004b14101)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
#	drivers/net/ethernet/intel/ice/ice_main.c
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index 414dccdfaaac,f981e77f72ad..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -1285,8 -1327,8 +1285,13 @@@ static int ice_vsi_alloc_rings(struct i
  
  	dev = ice_pf_to_dev(pf);
  	/* Allocate Tx rings */
++<<<<<<< HEAD
 +	for (i = 0; i < vsi->alloc_txq; i++) {
 +		struct ice_ring *ring;
++=======
+ 	ice_for_each_alloc_txq(vsi, i) {
+ 		struct ice_tx_ring *ring;
++>>>>>>> 2faf63b650bb (ice: make use of ice_for_each_* macros)
  
  		/* allocate with kzalloc(), free with kfree_rcu() */
  		ring = kzalloc(sizeof(*ring), GFP_KERNEL);
@@@ -1304,8 -1346,8 +1309,13 @@@
  	}
  
  	/* Allocate Rx rings */
++<<<<<<< HEAD
 +	for (i = 0; i < vsi->alloc_rxq; i++) {
 +		struct ice_ring *ring;
++=======
+ 	ice_for_each_alloc_rxq(vsi, i) {
+ 		struct ice_rx_ring *ring;
++>>>>>>> 2faf63b650bb (ice: make use of ice_for_each_* macros)
  
  		/* allocate with kzalloc(), free with kfree_rcu() */
  		ring = kzalloc(sizeof(*ring), GFP_KERNEL);
@@@ -1815,8 -1857,8 +1825,13 @@@ int ice_vsi_cfg_xdp_txqs(struct ice_vs
  	if (ret)
  		return ret;
  
++<<<<<<< HEAD
 +	for (i = 0; i < vsi->num_xdp_txq; i++)
 +		vsi->xdp_rings[i]->xsk_pool = ice_xsk_pool(vsi->xdp_rings[i]);
++=======
+ 	ice_for_each_xdp_txq(vsi, i)
+ 		vsi->xdp_rings[i]->xsk_pool = ice_tx_xsk_pool(vsi->xdp_rings[i]);
++>>>>>>> 2faf63b650bb (ice: make use of ice_for_each_* macros)
  
  	return ret;
  }
diff --cc drivers/net/ethernet/intel/ice/ice_main.c
index 331a94af8fd3,f531691a3e12..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@@ -108,8 -103,8 +108,13 @@@ static void ice_check_for_hang_subtask(
  
  	hw = &vsi->back->hw;
  
++<<<<<<< HEAD
 +	for (i = 0; i < vsi->num_txq; i++) {
 +		struct ice_ring *tx_ring = vsi->tx_rings[i];
++=======
+ 	ice_for_each_txq(vsi, i) {
+ 		struct ice_tx_ring *tx_ring = vsi->tx_rings[i];
++>>>>>>> 2faf63b650bb (ice: make use of ice_for_each_* macros)
  
  		if (tx_ring && tx_ring->desc) {
  			/* If packet counter has not changed the queue is
@@@ -2379,11 -2374,12 +2384,11 @@@ free_q_irqs
  static int ice_xdp_alloc_setup_rings(struct ice_vsi *vsi)
  {
  	struct device *dev = ice_pf_to_dev(vsi->back);
 -	struct ice_tx_desc *tx_desc;
 -	int i, j;
 +	int i;
  
- 	for (i = 0; i < vsi->num_xdp_txq; i++) {
+ 	ice_for_each_xdp_txq(vsi, i) {
  		u16 xdp_q_idx = vsi->alloc_txq + i;
 -		struct ice_tx_ring *xdp_ring;
 +		struct ice_ring *xdp_ring;
  
  		xdp_ring = kzalloc(sizeof(*xdp_ring), GFP_KERNEL);
  
diff --git a/drivers/net/ethernet/intel/ice/ice.h b/drivers/net/ethernet/intel/ice/ice.h
index d77e0cbcc94a..c5c441e15315 100644
--- a/drivers/net/ethernet/intel/ice/ice.h
+++ b/drivers/net/ethernet/intel/ice/ice.h
@@ -122,10 +122,13 @@
 #define ice_for_each_vsi(pf, i) \
 	for ((i) = 0; (i) < (pf)->num_alloc_vsi; (i)++)
 
-/* Macros for each Tx/Rx ring in a VSI */
+/* Macros for each Tx/Xdp/Rx ring in a VSI */
 #define ice_for_each_txq(vsi, i) \
 	for ((i) = 0; (i) < (vsi)->num_txq; (i)++)
 
+#define ice_for_each_xdp_txq(vsi, i) \
+	for ((i) = 0; (i) < (vsi)->num_xdp_txq; (i)++)
+
 #define ice_for_each_rxq(vsi, i) \
 	for ((i) = 0; (i) < (vsi)->num_rxq; (i)++)
 
diff --git a/drivers/net/ethernet/intel/ice/ice_arfs.c b/drivers/net/ethernet/intel/ice/ice_arfs.c
index 3071b8e79499..5daade32ea62 100644
--- a/drivers/net/ethernet/intel/ice/ice_arfs.c
+++ b/drivers/net/ethernet/intel/ice/ice_arfs.c
@@ -614,7 +614,7 @@ int ice_set_cpu_rx_rmap(struct ice_vsi *vsi)
 		return -EINVAL;
 
 	base_idx = vsi->base_vector;
-	for (i = 0; i < vsi->num_q_vectors; i++)
+	ice_for_each_q_vector(vsi, i)
 		if (irq_cpu_rmap_add(netdev->rx_cpu_rmap,
 				     pf->msix_entries[base_idx + i].vector)) {
 			ice_free_cpu_rx_rmap(vsi);
diff --git a/drivers/net/ethernet/intel/ice/ice_dcb_lib.c b/drivers/net/ethernet/intel/ice/ice_dcb_lib.c
index 26b4d5f579e6..b3b047ae48c9 100644
--- a/drivers/net/ethernet/intel/ice/ice_dcb_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_dcb_lib.c
@@ -200,11 +200,11 @@ void ice_vsi_cfg_dcb_rings(struct ice_vsi *vsi)
 
 	if (!test_bit(ICE_FLAG_DCB_ENA, vsi->back->flags)) {
 		/* Reset the TC information */
-		for (i = 0; i < vsi->num_txq; i++) {
+		ice_for_each_txq(vsi, i) {
 			tx_ring = vsi->tx_rings[i];
 			tx_ring->dcb_tc = 0;
 		}
-		for (i = 0; i < vsi->num_rxq; i++) {
+		ice_for_each_rxq(vsi, i) {
 			rx_ring = vsi->rx_rings[i];
 			rx_ring->dcb_tc = 0;
 		}
diff --git a/drivers/net/ethernet/intel/ice/ice_ethtool.c b/drivers/net/ethernet/intel/ice/ice_ethtool.c
index 805e30873479..c9ffcee3c0ac 100644
--- a/drivers/net/ethernet/intel/ice/ice_ethtool.c
+++ b/drivers/net/ethernet/intel/ice/ice_ethtool.c
@@ -2746,12 +2746,12 @@ ice_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
 
 	/* set for the next time the netdev is started */
 	if (!netif_running(vsi->netdev)) {
-		for (i = 0; i < vsi->alloc_txq; i++)
+		ice_for_each_alloc_txq(vsi, i)
 			vsi->tx_rings[i]->count = new_tx_cnt;
-		for (i = 0; i < vsi->alloc_rxq; i++)
+		ice_for_each_alloc_rxq(vsi, i)
 			vsi->rx_rings[i]->count = new_rx_cnt;
 		if (ice_is_xdp_ena_vsi(vsi))
-			for (i = 0; i < vsi->num_xdp_txq; i++)
+			ice_for_each_xdp_txq(vsi, i)
 				vsi->xdp_rings[i]->count = new_tx_cnt;
 		vsi->num_tx_desc = (u16)new_tx_cnt;
 		vsi->num_rx_desc = (u16)new_rx_cnt;
@@ -2800,7 +2800,7 @@ ice_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
 		goto free_tx;
 	}
 
-	for (i = 0; i < vsi->num_xdp_txq; i++) {
+	ice_for_each_xdp_txq(vsi, i) {
 		/* clone ring and setup updated count */
 		xdp_rings[i] = *vsi->xdp_rings[i];
 		xdp_rings[i].count = new_tx_cnt;
@@ -2894,7 +2894,7 @@ ice_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
 		}
 
 		if (xdp_rings) {
-			for (i = 0; i < vsi->num_xdp_txq; i++) {
+			ice_for_each_xdp_txq(vsi, i) {
 				ice_free_tx_ring(vsi->xdp_rings[i]);
 				*vsi->xdp_rings[i] = xdp_rings[i];
 			}
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_main.c
