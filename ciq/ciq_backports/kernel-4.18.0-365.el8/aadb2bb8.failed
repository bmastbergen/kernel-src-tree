sock_map: Fix a potential use-after-free in sock_map_close()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Cong Wang <cong.wang@bytedance.com>
commit aadb2bb83ff789de63b48b4edeab7329423a50d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/aadb2bb8.failed

The last refcnt of the psock can be gone right after
sock_map_remove_links(), so sk_psock_stop() could trigger a UAF.
The reason why I placed sk_psock_stop() there is to avoid RCU read
critical section, and more importantly, some callee of
sock_map_remove_links() is supposed to be called with RCU read lock,
we can not simply get rid of RCU read lock here. Therefore, the only
choice we have is to grab an additional refcnt with sk_psock_get()
and put it back after sk_psock_stop().

Fixes: 799aa7f98d53 ("skmsg: Avoid lock_sock() in sk_psock_backlog()")
	Reported-by: syzbot+7b6548ae483d6f4c64ae@syzkaller.appspotmail.com
	Signed-off-by: Cong Wang <cong.wang@bytedance.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20210408030556.45134-1-xiyou.wangcong@gmail.com
(cherry picked from commit aadb2bb83ff789de63b48b4edeab7329423a50d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/sock_map.c
diff --cc net/core/sock_map.c
index c0612744b44c,6f1b82b8ad49..000000000000
--- a/net/core/sock_map.c
+++ b/net/core/sock_map.c
@@@ -1546,6 -1531,8 +1546,11 @@@ void sock_map_close(struct sock *sk, lo
  	saved_close = psock->saved_close;
  	sock_map_remove_links(sk, psock);
  	rcu_read_unlock();
++<<<<<<< HEAD
++=======
+ 	sk_psock_stop(psock, true);
+ 	sk_psock_put(sk, psock);
++>>>>>>> aadb2bb83ff7 (sock_map: Fix a potential use-after-free in sock_map_close())
  	release_sock(sk);
  	saved_close(sk, timeout);
  }
* Unmerged path net/core/sock_map.c
