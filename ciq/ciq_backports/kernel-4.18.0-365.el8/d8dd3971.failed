kasan: inline random_tag for HW_TAGS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit d8dd397120be14a80220c78dad2bbcb9b0768959
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/d8dd3971.failed

Using random_tag() currently results in a function call. Move its
definition to mm/kasan/kasan.h and turn it into a static inline function
for hardware tag-based mode to avoid uneeded function calls.

Link: https://lkml.kernel.org/r/be438471690e351e1d792e6bb432e8c03ccb15d3.1606162397.git.andreyknvl@google.com
Link: https://linux-review.googlesource.com/id/Iac5b2faf9a912900e16cca6834d621f5d4abf427
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
	Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d8dd397120be14a80220c78dad2bbcb9b0768959)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/hw_tags.c
#	mm/kasan/kasan.h
diff --cc mm/kasan/kasan.h
index 2db4c5c1b473,7876a2547b7d..000000000000
--- a/mm/kasan/kasan.h
+++ b/mm/kasan/kasan.h
@@@ -163,8 -181,32 +163,28 @@@ void kasan_poison_shadow(const void *ad
  bool check_memory_region(unsigned long addr, size_t size, bool write,
  				unsigned long ret_ip);
  
++<<<<<<< HEAD
++=======
+ #else /* CONFIG_KASAN_GENERIC || CONFIG_KASAN_SW_TAGS */
+ 
+ static inline bool addr_has_metadata(const void *addr)
+ {
+ 	return true;
+ }
+ 
+ #endif /* CONFIG_KASAN_GENERIC || CONFIG_KASAN_SW_TAGS */
+ 
+ #if defined(CONFIG_KASAN_SW_TAGS) || defined(CONFIG_KASAN_HW_TAGS)
+ void print_tags(u8 addr_tag, const void *addr);
+ #else
+ static inline void print_tags(u8 addr_tag, const void *addr) { }
+ #endif
+ 
+ bool check_invalid_free(void *addr);
+ 
++>>>>>>> d8dd397120be (kasan: inline random_tag for HW_TAGS)
  void *find_first_bad_addr(void *addr, size_t size);
  const char *get_bug_type(struct kasan_access_info *info);
 -void metadata_fetch_row(char *buffer, void *row);
 -
 -#if defined(CONFIG_KASAN_GENERIC) && CONFIG_KASAN_STACK
 -void print_address_stack_frame(const void *addr);
 -#else
 -static inline void print_address_stack_frame(const void *addr) { }
 -#endif
  
  bool kasan_report(unsigned long addr, size_t size,
  		bool is_write, unsigned long ip);
@@@ -189,23 -231,6 +209,26 @@@ static inline void quarantine_reduce(vo
  static inline void quarantine_remove_cache(struct kmem_cache *cache) { }
  #endif
  
++<<<<<<< HEAD
 +#ifdef CONFIG_KASAN_SW_TAGS
 +
 +void print_tags(u8 addr_tag, const void *addr);
 +
 +u8 random_tag(void);
 +
 +#else
 +
 +static inline void print_tags(u8 addr_tag, const void *addr) { }
 +
 +static inline u8 random_tag(void)
 +{
 +	return 0;
 +}
 +
 +#endif
 +
++=======
++>>>>>>> d8dd397120be (kasan: inline random_tag for HW_TAGS)
  #ifndef arch_kasan_set_tag
  static inline const void *arch_kasan_set_tag(const void *addr, u8 tag)
  {
* Unmerged path mm/kasan/hw_tags.c
* Unmerged path mm/kasan/hw_tags.c
* Unmerged path mm/kasan/kasan.h
