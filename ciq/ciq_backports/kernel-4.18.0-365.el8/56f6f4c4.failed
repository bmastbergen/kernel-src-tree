bus: mhi: pci_generic: Apply no-op for wake using sideband wake boolean

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Bhaumik Bhatt <bbhatt@codeaurora.org>
commit 56f6f4c4eb2a710ec8878dd9373d3d2b2eb75f5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/56f6f4c4.failed

Devices such as SDX24 do not have the provision for inband wake
doorbell in the form of channel 127 and instead have a sideband
GPIO for it. Newer devices such as SDX55 or SDX65 support inband
wake method by default. Ensure the functionality is used based on
this such that device wake stays held when a client driver uses
mhi_device_get() API or the equivalent debugfs entry.

Link: https://lore.kernel.org/r/1624560809-30610-1-git-send-email-bbhatt@codeaurora.org
Fixes: e3e5e6508fc1 ("bus: mhi: pci_generic: No-Op for device_wake operations")
	Cc: stable@vger.kernel.org #5.12
	Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
	Signed-off-by: Bhaumik Bhatt <bbhatt@codeaurora.org>
	Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Link: https://lore.kernel.org/r/20210716075106.49938-2-manivannan.sadhasivam@linaro.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 56f6f4c4eb2a710ec8878dd9373d3d2b2eb75f5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bus/mhi/pci_generic.c
diff --cc drivers/bus/mhi/pci_generic.c
index 19413daa0917,3396cb30ebec..000000000000
--- a/drivers/bus/mhi/pci_generic.c
+++ b/drivers/bus/mhi/pci_generic.c
@@@ -32,7 -32,8 +32,12 @@@
   * @edl: emergency download mode firmware path (if any)
   * @bar_num: PCI base address register to use for MHI MMIO register space
   * @dma_data_width: DMA transfer word size (32 or 64 bits)
++<<<<<<< HEAD
 + * @mru_default: default MRU size for MBIM network packets
++=======
+  * @sideband_wake: Devices using dedicated sideband GPIO for wakeup instead
+  *		   of inband wake support (such as sdx24)
++>>>>>>> 56f6f4c4eb2a (bus: mhi: pci_generic: Apply no-op for wake using sideband wake boolean)
   */
  struct mhi_pci_dev_info {
  	const struct mhi_controller_config *config;
@@@ -41,7 -42,7 +46,11 @@@
  	const char *edl;
  	unsigned int bar_num;
  	unsigned int dma_data_width;
++<<<<<<< HEAD
 +	unsigned int mru_default;
++=======
+ 	bool sideband_wake;
++>>>>>>> 56f6f4c4eb2a (bus: mhi: pci_generic: Apply no-op for wake using sideband wake boolean)
  };
  
  #define MHI_CHANNEL_CONFIG_UL(ch_num, ch_name, el_count, ev_ring) \
@@@ -254,7 -256,7 +264,11 @@@ static const struct mhi_pci_dev_info mh
  	.config = &modem_qcom_v1_mhiv_config,
  	.bar_num = MHI_PCI_DEFAULT_BAR_NUM,
  	.dma_data_width = 32,
++<<<<<<< HEAD
 +	.mru_default = 32768
++=======
+ 	.sideband_wake = false,
++>>>>>>> 56f6f4c4eb2a (bus: mhi: pci_generic: Apply no-op for wake using sideband wake boolean)
  };
  
  static const struct mhi_pci_dev_info mhi_qcom_sdx24_info = {
@@@ -643,10 -648,12 +660,19 @@@ static int mhi_pci_probe(struct pci_de
  	mhi_cntrl->status_cb = mhi_pci_status_cb;
  	mhi_cntrl->runtime_get = mhi_pci_runtime_get;
  	mhi_cntrl->runtime_put = mhi_pci_runtime_put;
++<<<<<<< HEAD
 +	mhi_cntrl->wake_get = mhi_pci_wake_get_nop;
 +	mhi_cntrl->wake_put = mhi_pci_wake_put_nop;
 +	mhi_cntrl->wake_toggle = mhi_pci_wake_toggle_nop;
 +	mhi_cntrl->mru = info->mru_default;
++=======
+ 
+ 	if (info->sideband_wake) {
+ 		mhi_cntrl->wake_get = mhi_pci_wake_get_nop;
+ 		mhi_cntrl->wake_put = mhi_pci_wake_put_nop;
+ 		mhi_cntrl->wake_toggle = mhi_pci_wake_toggle_nop;
+ 	}
++>>>>>>> 56f6f4c4eb2a (bus: mhi: pci_generic: Apply no-op for wake using sideband wake boolean)
  
  	err = mhi_pci_claim(mhi_cntrl, info->bar_num, DMA_BIT_MASK(info->dma_data_width));
  	if (err)
* Unmerged path drivers/bus/mhi/pci_generic.c
