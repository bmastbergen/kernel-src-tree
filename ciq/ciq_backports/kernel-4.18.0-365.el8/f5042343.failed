drm/i915: Add a platform independent way to check for CCS AUX planes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Imre Deak <imre.deak@intel.com>
commit f50423436105e136e2409b500719334188a77aa6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/f5042343.failed

Future platforms change the location of CCS AUX planes in CCS
framebuffers, so add intel_fb_is_ccs_aux_plane() to query for these
planes independently of the platform. This function can be used
everywhere instead of is_ccs_plane() (or is_ccs_plane() && !cc_plane()),
since all the callers are only interested in CCS AUX planes (and not CCS
color-clear planes).

Add the corresponding intel_fb_is_gen12_ccs_aux_plane(), which can be
used everywhere instead of is_gen12_ccs_plane(), based on the above
explanation.

This change also unexports the is_gen12_ccs_modifier(),
is_gen12_ccs_plane(), is_gen12_ccs_cc_plane() functions as they are only
used in intel_fb.c

v1-v2: Unchanged
v3: (Ville)
- Use ccs_aux instead of the ccs_ctrl term everywhere.
- Use color_plane instead of plane term for FB plane indicies.
v4: Fix version range check. (Jani)

	Cc: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Cc: Jani Nikula <jani.nikula@intel.com>
	Signed-off-by: Imre Deak <imre.deak@intel.com>
	Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20211020195138.1841242-10-imre.deak@intel.com
(cherry picked from commit f50423436105e136e2409b500719334188a77aa6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_display_types.h
#	drivers/gpu/drm/i915/display/intel_fb.c
#	drivers/gpu/drm/i915/display/intel_fb.h
#	drivers/gpu/drm/i915/display/skl_universal_plane.c
diff --cc drivers/gpu/drm/i915/display/intel_display_types.h
index 421b07aecc99,bf97a56bdbc3..000000000000
--- a/drivers/gpu/drm/i915/display/intel_display_types.h
+++ b/drivers/gpu/drm/i915/display/intel_display_types.h
@@@ -1870,37 -2021,34 +1870,40 @@@ intel_wait_for_vblank_if_active(struct 
  		intel_wait_for_vblank(dev_priv, pipe);
  }
  
 -static inline bool intel_modifier_uses_dpt(struct drm_i915_private *i915, u64 modifier)
 +static inline u32 intel_plane_ggtt_offset(const struct intel_plane_state *state)
  {
 -	return DISPLAY_VER(i915) >= 13 && modifier != DRM_FORMAT_MOD_LINEAR;
 +	return i915_ggtt_offset(state->vma);
  }
  
 -static inline bool intel_fb_uses_dpt(const struct drm_framebuffer *fb)
 +static inline struct intel_frontbuffer *
 +to_intel_frontbuffer(struct drm_framebuffer *fb)
  {
 -	return fb && intel_modifier_uses_dpt(to_i915(fb->dev), fb->modifier);
 +	return fb ? to_intel_framebuffer(fb)->frontbuffer : NULL;
  }
  
 -static inline u32 intel_plane_ggtt_offset(const struct intel_plane_state *plane_state)
 +static inline bool intel_panel_use_ssc(struct drm_i915_private *dev_priv)
  {
 -	return i915_ggtt_offset(plane_state->ggtt_vma);
 +	if (dev_priv->params.panel_use_ssc >= 0)
 +		return dev_priv->params.panel_use_ssc != 0;
 +	return dev_priv->vbt.lvds_use_ssc
 +		&& !(dev_priv->quirks & QUIRK_LVDS_SSC_DISABLE);
  }
  
 -static inline struct intel_frontbuffer *
 -to_intel_frontbuffer(struct drm_framebuffer *fb)
++<<<<<<< HEAD
 +static inline u32 i9xx_dpll_compute_fp(struct dpll *dpll)
  {
 -	return fb ? to_intel_framebuffer(fb)->frontbuffer : NULL;
 +	return dpll->n << 16 | dpll->m1 << 8 | dpll->m2;
  }
  
 -static inline bool is_ccs_modifier(u64 modifier)
 +static inline u32 intel_fdi_link_freq(struct drm_i915_private *dev_priv,
 +				      const struct intel_crtc_state *pipe_config)
  {
 -	return modifier == I915_FORMAT_MOD_Y_TILED_GEN12_RC_CCS ||
 -	       modifier == I915_FORMAT_MOD_Y_TILED_GEN12_RC_CCS_CC ||
 -	       modifier == I915_FORMAT_MOD_Y_TILED_GEN12_MC_CCS ||
 -	       modifier == I915_FORMAT_MOD_Y_TILED_CCS ||
 -	       modifier == I915_FORMAT_MOD_Yf_TILED_CCS;
 +	if (HAS_DDI(dev_priv))
 +		return pipe_config->port_clock; /* SPLL */
 +	else
 +		return dev_priv->fdi_pll_freq;
  }
  
++=======
++>>>>>>> f50423436105 (drm/i915: Add a platform independent way to check for CCS AUX planes)
  #endif /*  __INTEL_DISPLAY_TYPES_H__ */
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.c
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.h
* Unmerged path drivers/gpu/drm/i915/display/skl_universal_plane.c
* Unmerged path drivers/gpu/drm/i915/display/intel_display_types.h
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.c
* Unmerged path drivers/gpu/drm/i915/display/intel_fb.h
* Unmerged path drivers/gpu/drm/i915/display/skl_universal_plane.c
