kasan: fix stack traces dependency for HW_TAGS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit 1cc4cdb521f9689183474bc89eefc451ac44fa1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/1cc4cdb5.failed

Currently, whether the alloc/free stack traces collection is enabled by
default for hardware tag-based KASAN depends on CONFIG_DEBUG_KERNEL.
The intention for this dependency was to only enable collection on slow
debug kernels due to a significant perf and memory impact.

As it turns out, CONFIG_DEBUG_KERNEL is not considered a debug option
and is enabled on many productions kernels including Android and Ubuntu.
As the result, this dependency is pointless and only complicates the
code and documentation.

Having stack traces collection disabled by default would make the
hardware mode work differently to to the software ones, which is
confusing.

This change removes the dependency and enables stack traces collection
by default.

Looking into the future, this default might makes sense for production
kernels, assuming we implement a fast stack trace collection approach.

Link: https://lkml.kernel.org/r/6678d77ceffb71f1cff2cf61560e2ffe7bb6bfe9.1612808820.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Peter Collingbourne <pcc@google.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1cc4cdb521f9689183474bc89eefc451ac44fa1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/dev-tools/kasan.rst
#	mm/kasan/hw_tags.c
diff --cc Documentation/dev-tools/kasan.rst
index 19b982c535c7,a248ac3941be..000000000000
--- a/Documentation/dev-tools/kasan.rst
+++ b/Documentation/dev-tools/kasan.rst
@@@ -151,7 -150,40 +151,44 @@@ In the report above the arrows point t
  the accessed address is partially accessible.
  
  For tag-based KASAN this last report section shows the memory tags around the
++<<<<<<< HEAD
 +accessed address (see Implementation details section).
++=======
+ accessed address (see `Implementation details`_ section).
+ 
+ Boot parameters
+ ~~~~~~~~~~~~~~~
+ 
+ Hardware tag-based KASAN mode (see the section about different mode below) is
+ intended for use in production as a security mitigation. Therefore it supports
+ boot parameters that allow to disable KASAN competely or otherwise control
+ particular KASAN features.
+ 
+ - ``kasan=off`` or ``=on`` controls whether KASAN is enabled (default: ``on``).
+ 
+ - ``kasan.stacktrace=off`` or ``=on`` disables or enables alloc and free stack
+   traces collection (default: ``on``).
+ 
+ - ``kasan.fault=report`` or ``=panic`` controls whether to only print a KASAN
+   report or also panic the kernel (default: ``report``).
+ 
+ For developers
+ ~~~~~~~~~~~~~~
+ 
+ Software KASAN modes use compiler instrumentation to insert validity checks.
+ Such instrumentation might be incompatible with some part of the kernel, and
+ therefore needs to be disabled. To disable instrumentation for specific files
+ or directories, add a line similar to the following to the respective kernel
+ Makefile:
+ 
+ - For a single file (e.g. main.o)::
+ 
+     KASAN_SANITIZE_main.o := n
+ 
+ - For all files in one directory::
+ 
+     KASAN_SANITIZE := n
++>>>>>>> 1cc4cdb521f9 (kasan: fix stack traces dependency for HW_TAGS)
  
  
  Implementation details
* Unmerged path mm/kasan/hw_tags.c
* Unmerged path Documentation/dev-tools/kasan.rst
* Unmerged path mm/kasan/hw_tags.c
