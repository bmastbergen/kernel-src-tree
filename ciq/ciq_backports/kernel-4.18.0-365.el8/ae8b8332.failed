sock_map: Rename skb_parser and skb_verdict

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Cong Wang <cong.wang@bytedance.com>
commit ae8b8332fbb512f53bf50ff6a7586dd0f90ed18a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/ae8b8332.failed

These two eBPF programs are tied to BPF_SK_SKB_STREAM_PARSER
and BPF_SK_SKB_STREAM_VERDICT, rename them to reflect the fact
they are only used for TCP. And save the name 'skb_verdict' for
general use later.

	Signed-off-by: Cong Wang <cong.wang@bytedance.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Reviewed-by: Lorenz Bauer <lmb@cloudflare.com>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20210223184934.6054-6-xiyou.wangcong@gmail.com
(cherry picked from commit ae8b8332fbb512f53bf50ff6a7586dd0f90ed18a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/skmsg.c
#	net/core/sock_map.c
diff --cc net/core/skmsg.c
index 9316dc9fce4f,35f9caa3b125..000000000000
--- a/net/core/skmsg.c
+++ b/net/core/skmsg.c
@@@ -805,12 -803,17 +805,12 @@@ int sk_psock_tls_strp_read(struct sk_ps
  	int ret = __SK_PASS;
  
  	rcu_read_lock();
- 	prog = READ_ONCE(psock->progs.skb_verdict);
+ 	prog = READ_ONCE(psock->progs.stream_verdict);
  	if (likely(prog)) {
 -		/* We skip full set_owner_r here because if we do a SK_PASS
 -		 * or SK_DROP we can skip skb memory accounting and use the
 -		 * TLS context.
 -		 */
  		skb->sk = psock->sk;
 -		skb_dst_drop(skb);
 -		skb_bpf_redirect_clear(skb);
 +		tcp_skb_bpf_redirect_clear(skb);
  		ret = sk_psock_bpf_run(psock, prog, skb);
 -		ret = sk_psock_map_verd(ret, skb_bpf_redirect_fetch(skb));
 +		ret = sk_psock_map_verd(ret, tcp_skb_bpf_redirect_fetch(skb));
  		skb->sk = NULL;
  	}
  	sk_psock_tls_verdict_apply(skb, psock->sk, ret);
@@@ -876,13 -894,13 +876,18 @@@ static void sk_psock_strp_read(struct s
  		kfree_skb(skb);
  		goto out;
  	}
++<<<<<<< HEAD
 +	prog = READ_ONCE(psock->progs.skb_verdict);
++=======
+ 	skb_set_owner_r(skb, sk);
+ 	prog = READ_ONCE(psock->progs.stream_verdict);
++>>>>>>> ae8b8332fbb5 (sock_map: Rename skb_parser and skb_verdict)
  	if (likely(prog)) {
 -		skb_dst_drop(skb);
 -		skb_bpf_redirect_clear(skb);
 +		skb->sk = sk;
 +		tcp_skb_bpf_redirect_clear(skb);
  		ret = sk_psock_bpf_run(psock, prog, skb);
 -		ret = sk_psock_map_verd(ret, skb_bpf_redirect_fetch(skb));
 +		ret = sk_psock_map_verd(ret, tcp_skb_bpf_redirect_fetch(skb));
 +		skb->sk = NULL;
  	}
  	sk_psock_verdict_apply(psock, skb, ret);
  out:
@@@ -930,6 -948,49 +935,52 @@@ static void sk_psock_strp_data_ready(st
  	rcu_read_unlock();
  }
  
++<<<<<<< HEAD
++=======
+ int sk_psock_init_strp(struct sock *sk, struct sk_psock *psock)
+ {
+ 	static const struct strp_callbacks cb = {
+ 		.rcv_msg	= sk_psock_strp_read,
+ 		.read_sock_done	= sk_psock_strp_read_done,
+ 		.parse_msg	= sk_psock_strp_parse,
+ 	};
+ 
+ 	return strp_init(&psock->strp, sk, &cb);
+ }
+ 
+ void sk_psock_start_strp(struct sock *sk, struct sk_psock *psock)
+ {
+ 	if (psock->saved_data_ready)
+ 		return;
+ 
+ 	psock->saved_data_ready = sk->sk_data_ready;
+ 	sk->sk_data_ready = sk_psock_strp_data_ready;
+ 	sk->sk_write_space = sk_psock_write_space;
+ }
+ 
+ void sk_psock_stop_strp(struct sock *sk, struct sk_psock *psock)
+ {
+ 	if (!psock->saved_data_ready)
+ 		return;
+ 
+ 	sk->sk_data_ready = psock->saved_data_ready;
+ 	psock->saved_data_ready = NULL;
+ 	strp_stop(&psock->strp);
+ }
+ 
+ static void sk_psock_done_strp(struct sk_psock *psock)
+ {
+ 	/* Parser has been stopped */
+ 	if (psock->progs.stream_parser)
+ 		strp_done(&psock->strp);
+ }
+ #else
+ static void sk_psock_done_strp(struct sk_psock *psock)
+ {
+ }
+ #endif /* CONFIG_BPF_STREAM_PARSER */
+ 
++>>>>>>> ae8b8332fbb5 (sock_map: Rename skb_parser and skb_verdict)
  static int sk_psock_verdict_recv(read_descriptor_t *desc, struct sk_buff *skb,
  				 unsigned int offset, size_t orig_len)
  {
@@@ -953,13 -1014,13 +1004,18 @@@
  		kfree_skb(skb);
  		goto out;
  	}
++<<<<<<< HEAD
 +	prog = READ_ONCE(psock->progs.skb_verdict);
++=======
+ 	skb_set_owner_r(skb, sk);
+ 	prog = READ_ONCE(psock->progs.stream_verdict);
++>>>>>>> ae8b8332fbb5 (sock_map: Rename skb_parser and skb_verdict)
  	if (likely(prog)) {
 -		skb_dst_drop(skb);
 -		skb_bpf_redirect_clear(skb);
 +		skb->sk = sk;
 +		tcp_skb_bpf_redirect_clear(skb);
  		ret = sk_psock_bpf_run(psock, prog, skb);
 -		ret = sk_psock_map_verd(ret, skb_bpf_redirect_fetch(skb));
 +		ret = sk_psock_map_verd(ret, tcp_skb_bpf_redirect_fetch(skb));
 +		skb->sk = NULL;
  	}
  	sk_psock_verdict_apply(psock, skb, ret);
  out:
diff --cc net/core/sock_map.c
index f2963865e78e,69785070f02d..000000000000
--- a/net/core/sock_map.c
+++ b/net/core/sock_map.c
@@@ -152,9 -148,9 +152,15 @@@ static void sock_map_del_link(struct so
  			struct bpf_map *map = link->map;
  			struct bpf_stab *stab = container_of(map, struct bpf_stab,
  							     map);
++<<<<<<< HEAD
 +			if (psock->parser.enabled && stab->progs.skb_parser)
 +				strp_stop = true;
 +			if (psock->parser.enabled && stab->progs.skb_verdict)
++=======
+ 			if (psock->saved_data_ready && stab->progs.stream_parser)
+ 				strp_stop = true;
+ 			if (psock->saved_data_ready && stab->progs.stream_verdict)
++>>>>>>> ae8b8332fbb5 (sock_map: Rename skb_parser and skb_verdict)
  				verdict_stop = true;
  			list_del(&link->list);
  			sk_psock_free_link(link);
@@@ -287,15 -283,15 +293,24 @@@ static int sock_map_link(struct bpf_ma
  		goto out_drop;
  
  	write_lock_bh(&sk->sk_callback_lock);
++<<<<<<< HEAD
 +	if (skb_parser && skb_verdict && !psock->parser.enabled) {
++=======
+ 	if (stream_parser && stream_verdict && !psock->saved_data_ready) {
++>>>>>>> ae8b8332fbb5 (sock_map: Rename skb_parser and skb_verdict)
  		ret = sk_psock_init_strp(sk, psock);
  		if (ret)
  			goto out_unlock_drop;
- 		psock_set_prog(&psock->progs.skb_verdict, skb_verdict);
- 		psock_set_prog(&psock->progs.skb_parser, skb_parser);
+ 		psock_set_prog(&psock->progs.stream_verdict, stream_verdict);
+ 		psock_set_prog(&psock->progs.stream_parser, stream_parser);
  		sk_psock_start_strp(sk, psock);
++<<<<<<< HEAD
 +	} else if (!skb_parser && skb_verdict && !psock->parser.enabled) {
 +		psock_set_prog(&psock->progs.skb_verdict, skb_verdict);
++=======
+ 	} else if (!stream_parser && stream_verdict && !psock->saved_data_ready) {
+ 		psock_set_prog(&psock->progs.stream_verdict, stream_verdict);
++>>>>>>> ae8b8332fbb5 (sock_map: Rename skb_parser and skb_verdict)
  		sk_psock_start_verdict(sk,psock);
  	}
  	write_unlock_bh(&sk->sk_callback_lock);
@@@ -1465,11 -1457,13 +1480,11 @@@ int sock_map_prog_update(struct bpf_ma
  	case BPF_SK_MSG_VERDICT:
  		pprog = &progs->msg_parser;
  		break;
 -#if IS_ENABLED(CONFIG_BPF_STREAM_PARSER)
  	case BPF_SK_SKB_STREAM_PARSER:
- 		pprog = &progs->skb_parser;
+ 		pprog = &progs->stream_parser;
  		break;
 -#endif
  	case BPF_SK_SKB_STREAM_VERDICT:
- 		pprog = &progs->skb_verdict;
+ 		pprog = &progs->stream_verdict;
  		break;
  	default:
  		return -EOPNOTSUPP;
diff --git a/include/linux/skmsg.h b/include/linux/skmsg.h
index 98263673d9b8..b27ee567bb8d 100644
--- a/include/linux/skmsg.h
+++ b/include/linux/skmsg.h
@@ -56,8 +56,8 @@ struct sk_msg {
 
 struct sk_psock_progs {
 	struct bpf_prog			*msg_parser;
-	struct bpf_prog			*skb_parser;
-	struct bpf_prog			*skb_verdict;
+	struct bpf_prog			*stream_parser;
+	struct bpf_prog			*stream_verdict;
 };
 
 enum sk_psock_state_bits {
@@ -435,8 +435,8 @@ static inline int psock_replace_prog(struct bpf_prog **pprog,
 static inline void psock_progs_drop(struct sk_psock_progs *progs)
 {
 	psock_set_prog(&progs->msg_parser, NULL);
-	psock_set_prog(&progs->skb_parser, NULL);
-	psock_set_prog(&progs->skb_verdict, NULL);
+	psock_set_prog(&progs->stream_parser, NULL);
+	psock_set_prog(&progs->stream_verdict, NULL);
 }
 
 int sk_psock_tls_strp_read(struct sk_psock *psock, struct sk_buff *skb);
* Unmerged path net/core/skmsg.c
* Unmerged path net/core/sock_map.c
diff --git a/tools/testing/selftests/bpf/prog_tests/sockmap_listen.c b/tools/testing/selftests/bpf/prog_tests/sockmap_listen.c
index d7d65a700799..c26e6bf05e49 100644
--- a/tools/testing/selftests/bpf/prog_tests/sockmap_listen.c
+++ b/tools/testing/selftests/bpf/prog_tests/sockmap_listen.c
@@ -1014,8 +1014,8 @@ static void test_skb_redir_to_connected(struct test_sockmap_listen *skel,
 					struct bpf_map *inner_map, int family,
 					int sotype)
 {
-	int verdict = bpf_program__fd(skel->progs.prog_skb_verdict);
-	int parser = bpf_program__fd(skel->progs.prog_skb_parser);
+	int verdict = bpf_program__fd(skel->progs.prog_stream_verdict);
+	int parser = bpf_program__fd(skel->progs.prog_stream_parser);
 	int verdict_map = bpf_map__fd(skel->maps.verdict_map);
 	int sock_map = bpf_map__fd(inner_map);
 	int err;
@@ -1125,8 +1125,8 @@ static void test_skb_redir_to_listening(struct test_sockmap_listen *skel,
 					struct bpf_map *inner_map, int family,
 					int sotype)
 {
-	int verdict = bpf_program__fd(skel->progs.prog_skb_verdict);
-	int parser = bpf_program__fd(skel->progs.prog_skb_parser);
+	int verdict = bpf_program__fd(skel->progs.prog_stream_verdict);
+	int parser = bpf_program__fd(skel->progs.prog_stream_parser);
 	int verdict_map = bpf_map__fd(skel->maps.verdict_map);
 	int sock_map = bpf_map__fd(inner_map);
 	int err;
diff --git a/tools/testing/selftests/bpf/progs/test_sockmap_listen.c b/tools/testing/selftests/bpf/progs/test_sockmap_listen.c
index a3a366c57ce1..fa221141e9c1 100644
--- a/tools/testing/selftests/bpf/progs/test_sockmap_listen.c
+++ b/tools/testing/selftests/bpf/progs/test_sockmap_listen.c
@@ -31,13 +31,13 @@ struct {
 static volatile bool test_sockmap; /* toggled by user-space */
 
 SEC("sk_skb/stream_parser")
-int prog_skb_parser(struct __sk_buff *skb)
+int prog_stream_parser(struct __sk_buff *skb)
 {
 	return skb->len;
 }
 
 SEC("sk_skb/stream_verdict")
-int prog_skb_verdict(struct __sk_buff *skb)
+int prog_stream_verdict(struct __sk_buff *skb)
 {
 	unsigned int *count;
 	__u32 zero = 0;
