kasan: add proper page allocator tests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit 858bdeb046f6dc7a79039d577d03e4d2b39272b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/858bdeb0.failed

The currently existing page allocator tests rely on kmalloc fallback
with large sizes that is only present for SLUB. Add proper tests that
use alloc/free_pages().

Link: https://linux-review.googlesource.com/id/Ia173d5a1b215fe6b2548d814ef0f4433cf983570
Link: https://lkml.kernel.org/r/a2648930e55ff75b8e700f2e0d905c2b55a67483.1610733117.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Reviewed-by: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Peter Collingbourne <pcc@google.com>
	Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 858bdeb046f6dc7a79039d577d03e4d2b39272b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/test_kasan.c
diff --cc lib/test_kasan.c
index 5679dda37d78,acbc7d54d067..000000000000
--- a/lib/test_kasan.c
+++ b/lib/test_kasan.c
@@@ -93,24 -147,24 +93,44 @@@ static noinline void __init kmalloc_nod
  	kfree(ptr);
  }
  
++<<<<<<< HEAD
 +#ifdef CONFIG_SLUB
 +static noinline void __init kmalloc_pagealloc_oob_right(void)
++=======
+ /*
+  * These kmalloc_pagealloc_* tests try allocating a memory chunk that doesn't
+  * fit into a slab cache and therefore is allocated via the page allocator
+  * fallback. Since this kind of fallback is only implemented for SLUB, these
+  * tests are limited to that allocator.
+  */
+ static void kmalloc_pagealloc_oob_right(struct kunit *test)
++>>>>>>> 858bdeb046f6 (kasan: add proper page allocator tests)
  {
  	char *ptr;
  	size_t size = KMALLOC_MAX_CACHE_SIZE + 10;
  
++<<<<<<< HEAD
 +	/* Allocate a chunk that does not fit into a SLUB cache to trigger
 +	 * the page allocator fallback.
 +	 */
 +	pr_info("kmalloc pagealloc allocation: out-of-bounds to right\n");
++=======
+ 	KASAN_TEST_NEEDS_CONFIG_ON(test, CONFIG_SLUB);
+ 
++>>>>>>> 858bdeb046f6 (kasan: add proper page allocator tests)
  	ptr = kmalloc(size, GFP_KERNEL);
 -	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
 +	if (!ptr) {
 +		pr_err("Allocation failed\n");
 +		return;
 +	}
 +
 +	ptr[size + OOB_TAG_OFF] = 0;
  
++<<<<<<< HEAD
++=======
+ 	KUNIT_EXPECT_KASAN_FAIL(test, ptr[size + OOB_TAG_OFF] = 0);
+ 
++>>>>>>> 858bdeb046f6 (kasan: add proper page allocator tests)
  	kfree(ptr);
  }
  
@@@ -119,34 -173,65 +139,81 @@@ static noinline void __init kmalloc_pag
  	char *ptr;
  	size_t size = KMALLOC_MAX_CACHE_SIZE + 10;
  
 -	KASAN_TEST_NEEDS_CONFIG_ON(test, CONFIG_SLUB);
 -
 +	pr_info("kmalloc pagealloc allocation: use-after-free\n");
  	ptr = kmalloc(size, GFP_KERNEL);
++<<<<<<< HEAD
 +	if (!ptr) {
 +		pr_err("Allocation failed\n");
 +		return;
 +	}
 +
 +	kfree(ptr);
 +	ptr[0] = 0;
++=======
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
+ 	kfree(ptr);
+ 
+ 	KUNIT_EXPECT_KASAN_FAIL(test, ptr[0] = 0);
++>>>>>>> 858bdeb046f6 (kasan: add proper page allocator tests)
  }
  
 -static void kmalloc_pagealloc_invalid_free(struct kunit *test)
 +static noinline void __init kmalloc_pagealloc_invalid_free(void)
  {
  	char *ptr;
  	size_t size = KMALLOC_MAX_CACHE_SIZE + 10;
  
 -	KASAN_TEST_NEEDS_CONFIG_ON(test, CONFIG_SLUB);
 -
 +	pr_info("kmalloc pagealloc allocation: invalid-free\n");
  	ptr = kmalloc(size, GFP_KERNEL);
 -	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
 +	if (!ptr) {
 +		pr_err("Allocation failed\n");
 +		return;
 +	}
  
 -	KUNIT_EXPECT_KASAN_FAIL(test, kfree(ptr + 1));
 +	kfree(ptr + 1);
  }
 +#endif
  
++<<<<<<< HEAD
 +static noinline void __init kmalloc_large_oob_right(void)
++=======
+ static void pagealloc_oob_right(struct kunit *test)
+ {
+ 	char *ptr;
+ 	struct page *pages;
+ 	size_t order = 4;
+ 	size_t size = (1UL << (PAGE_SHIFT + order));
+ 
+ 	/*
+ 	 * With generic KASAN page allocations have no redzones, thus
+ 	 * out-of-bounds detection is not guaranteed.
+ 	 * See https://bugzilla.kernel.org/show_bug.cgi?id=210503.
+ 	 */
+ 	KASAN_TEST_NEEDS_CONFIG_OFF(test, CONFIG_KASAN_GENERIC);
+ 
+ 	pages = alloc_pages(GFP_KERNEL, order);
+ 	ptr = page_address(pages);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
+ 
+ 	KUNIT_EXPECT_KASAN_FAIL(test, ptr[size] = 0);
+ 	free_pages((unsigned long)ptr, order);
+ }
+ 
+ static void pagealloc_uaf(struct kunit *test)
+ {
+ 	char *ptr;
+ 	struct page *pages;
+ 	size_t order = 4;
+ 
+ 	pages = alloc_pages(GFP_KERNEL, order);
+ 	ptr = page_address(pages);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
+ 	free_pages((unsigned long)ptr, order);
+ 
+ 	KUNIT_EXPECT_KASAN_FAIL(test, ptr[0] = 0);
+ }
+ 
+ static void kmalloc_large_oob_right(struct kunit *test)
++>>>>>>> 858bdeb046f6 (kasan: add proper page allocator tests)
  {
  	char *ptr;
  	size_t size = KMALLOC_MAX_CACHE_SIZE - 256;
@@@ -808,100 -841,155 +875,150 @@@ static noinline void __init vmalloc_oob
  	 * The MMU will catch that and crash us.
  	 */
  	area = vmalloc(3000);
 -	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, area);
 +	if (!area) {
 +		pr_err("Allocation failed\n");
 +		return;
 +	}
  
 -	KUNIT_EXPECT_KASAN_FAIL(test, ((volatile char *)area)[3100]);
 +	((volatile char *)area)[3100];
  	vfree(area);
  }
 +#else
 +static void __init vmalloc_oob(void) {}
 +#endif
  
 -/*
 - * Check that the assigned pointer tag falls within the [KASAN_TAG_MIN,
 - * KASAN_TAG_KERNEL) range (note: excluding the match-all tag) for tag-based
 - * modes.
 - */
 -static void match_all_not_assigned(struct kunit *test)
 -{
 -	char *ptr;
 -	struct page *pages;
 -	int i, size, order;
 -
 -	KASAN_TEST_NEEDS_CONFIG_OFF(test, CONFIG_KASAN_GENERIC);
 -
 -	for (i = 0; i < 256; i++) {
 -		size = (get_random_int() % 1024) + 1;
 -		ptr = kmalloc(size, GFP_KERNEL);
 -		KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
 -		KUNIT_EXPECT_GE(test, (u8)get_tag(ptr), (u8)KASAN_TAG_MIN);
 -		KUNIT_EXPECT_LT(test, (u8)get_tag(ptr), (u8)KASAN_TAG_KERNEL);
 -		kfree(ptr);
 -	}
 -
 -	for (i = 0; i < 256; i++) {
 -		order = (get_random_int() % 4) + 1;
 -		pages = alloc_pages(GFP_KERNEL, order);
 -		ptr = page_address(pages);
 -		KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
 -		KUNIT_EXPECT_GE(test, (u8)get_tag(ptr), (u8)KASAN_TAG_MIN);
 -		KUNIT_EXPECT_LT(test, (u8)get_tag(ptr), (u8)KASAN_TAG_KERNEL);
 -		free_pages((unsigned long)ptr, order);
 -	}
 -}
 +static struct kasan_rcu_info {
 +	int i;
 +	struct rcu_head rcu;
 +} *global_rcu_ptr;
  
 -/* Check that 0xff works as a match-all pointer tag for tag-based modes. */
 -static void match_all_ptr_tag(struct kunit *test)
 +static noinline void __init kasan_rcu_reclaim(struct rcu_head *rp)
  {
 -	char *ptr;
 -	u8 tag;
 +	struct kasan_rcu_info *fp = container_of(rp,
 +						struct kasan_rcu_info, rcu);
  
 -	KASAN_TEST_NEEDS_CONFIG_OFF(test, CONFIG_KASAN_GENERIC);
 -
 -	ptr = kmalloc(128, GFP_KERNEL);
 -	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
 -
 -	/* Backup the assigned tag. */
 -	tag = get_tag(ptr);
 -	KUNIT_EXPECT_NE(test, tag, (u8)KASAN_TAG_KERNEL);
 -
 -	/* Reset the tag to 0xff.*/
 -	ptr = set_tag(ptr, KASAN_TAG_KERNEL);
 -
 -	/* This access shouldn't trigger a KASAN report. */
 -	*ptr = 0;
 -
 -	/* Recover the pointer tag and free. */
 -	ptr = set_tag(ptr, tag);
 -	kfree(ptr);
 +	kfree(fp);
 +	fp->i = 1;
  }
  
 -/* Check that there are no match-all memory tags for tag-based modes. */
 -static void match_all_mem_tag(struct kunit *test)
 +static noinline void __init kasan_rcu_uaf(void)
  {
 -	char *ptr;
 -	int tag;
 -
 -	KASAN_TEST_NEEDS_CONFIG_OFF(test, CONFIG_KASAN_GENERIC);
 -
 -	ptr = kmalloc(128, GFP_KERNEL);
 -	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, ptr);
 -	KUNIT_EXPECT_NE(test, (u8)get_tag(ptr), (u8)KASAN_TAG_KERNEL);
 -
 -	/* For each possible tag value not matching the pointer tag. */
 -	for (tag = KASAN_TAG_MIN; tag <= KASAN_TAG_KERNEL; tag++) {
 -		if (tag == get_tag(ptr))
 -			continue;
 +	struct kasan_rcu_info *ptr;
  
 -		/* Mark the first memory granule with the chosen memory tag. */
 -		kasan_poison(ptr, KASAN_GRANULE_SIZE, (u8)tag);
 -
 -		/* This access must cause a KASAN report. */
 -		KUNIT_EXPECT_KASAN_FAIL(test, *ptr = 0);
 +	pr_info("use-after-free in kasan_rcu_reclaim\n");
 +	ptr = kmalloc(sizeof(struct kasan_rcu_info), GFP_KERNEL);
 +	if (!ptr) {
 +		pr_err("Allocation failed\n");
 +		return;
  	}
  
 -	/* Recover the memory tag and free. */
 -	kasan_poison(ptr, KASAN_GRANULE_SIZE, get_tag(ptr));
 -	kfree(ptr);
 +	global_rcu_ptr = rcu_dereference_protected(ptr, NULL);
 +	call_rcu(&global_rcu_ptr->rcu, kasan_rcu_reclaim);
  }
  
++<<<<<<< HEAD
 +static int __init kmalloc_tests_init(void)
 +{
 +	/*
 +	 * Temporarily enable multi-shot mode. Otherwise, we'd only get a
 +	 * report for the first case.
 +	 */
 +	bool multishot = kasan_save_enable_multi_shot();
++=======
+ static struct kunit_case kasan_kunit_test_cases[] = {
+ 	KUNIT_CASE(kmalloc_oob_right),
+ 	KUNIT_CASE(kmalloc_oob_left),
+ 	KUNIT_CASE(kmalloc_node_oob_right),
+ 	KUNIT_CASE(kmalloc_pagealloc_oob_right),
+ 	KUNIT_CASE(kmalloc_pagealloc_uaf),
+ 	KUNIT_CASE(kmalloc_pagealloc_invalid_free),
+ 	KUNIT_CASE(pagealloc_oob_right),
+ 	KUNIT_CASE(pagealloc_uaf),
+ 	KUNIT_CASE(kmalloc_large_oob_right),
+ 	KUNIT_CASE(kmalloc_oob_krealloc_more),
+ 	KUNIT_CASE(kmalloc_oob_krealloc_less),
+ 	KUNIT_CASE(kmalloc_oob_16),
+ 	KUNIT_CASE(kmalloc_uaf_16),
+ 	KUNIT_CASE(kmalloc_oob_in_memset),
+ 	KUNIT_CASE(kmalloc_oob_memset_2),
+ 	KUNIT_CASE(kmalloc_oob_memset_4),
+ 	KUNIT_CASE(kmalloc_oob_memset_8),
+ 	KUNIT_CASE(kmalloc_oob_memset_16),
+ 	KUNIT_CASE(kmalloc_memmove_invalid_size),
+ 	KUNIT_CASE(kmalloc_uaf),
+ 	KUNIT_CASE(kmalloc_uaf_memset),
+ 	KUNIT_CASE(kmalloc_uaf2),
+ 	KUNIT_CASE(kfree_via_page),
+ 	KUNIT_CASE(kfree_via_phys),
+ 	KUNIT_CASE(kmem_cache_oob),
+ 	KUNIT_CASE(memcg_accounted_kmem_cache),
+ 	KUNIT_CASE(kasan_global_oob),
+ 	KUNIT_CASE(kasan_stack_oob),
+ 	KUNIT_CASE(kasan_alloca_oob_left),
+ 	KUNIT_CASE(kasan_alloca_oob_right),
+ 	KUNIT_CASE(ksize_unpoisons_memory),
+ 	KUNIT_CASE(ksize_uaf),
+ 	KUNIT_CASE(kmem_cache_double_free),
+ 	KUNIT_CASE(kmem_cache_invalid_free),
+ 	KUNIT_CASE(kasan_memchr),
+ 	KUNIT_CASE(kasan_memcmp),
+ 	KUNIT_CASE(kasan_strings),
+ 	KUNIT_CASE(kasan_bitops_generic),
+ 	KUNIT_CASE(kasan_bitops_tags),
+ 	KUNIT_CASE(kmalloc_double_kzfree),
+ 	KUNIT_CASE(vmalloc_oob),
+ 	KUNIT_CASE(match_all_not_assigned),
+ 	KUNIT_CASE(match_all_ptr_tag),
+ 	KUNIT_CASE(match_all_mem_tag),
+ 	{}
+ };
++>>>>>>> 858bdeb046f6 (kasan: add proper page allocator tests)
 +
 +	kmalloc_oob_right();
 +	kmalloc_oob_left();
 +	kmalloc_node_oob_right();
 +#ifdef CONFIG_SLUB
 +	kmalloc_pagealloc_oob_right();
 +	kmalloc_pagealloc_uaf();
 +	kmalloc_pagealloc_invalid_free();
 +#endif
 +	kmalloc_large_oob_right();
 +	kmalloc_oob_krealloc_more();
 +	kmalloc_oob_krealloc_less();
 +	kmalloc_oob_16();
 +	kmalloc_oob_in_memset();
 +	kmalloc_oob_memset_2();
 +	kmalloc_oob_memset_4();
 +	kmalloc_oob_memset_8();
 +	kmalloc_oob_memset_16();
 +	kmalloc_memmove_invalid_size();
 +	kmalloc_uaf();
 +	kmalloc_uaf_memset();
 +	kmalloc_uaf2();
 +	kfree_via_page();
 +	kfree_via_phys();
 +	kmem_cache_oob();
 +	memcg_accounted_kmem_cache();
 +	kasan_stack_oob();
 +	kasan_global_oob();
 +	kasan_alloca_oob_left();
 +	kasan_alloca_oob_right();
 +	ksize_unpoisons_memory();
 +	copy_user_test();
 +	kmem_cache_double_free();
 +	kmem_cache_invalid_free();
 +	kasan_memchr();
 +	kasan_memcmp();
 +	kasan_strings();
 +	kasan_bitops();
 +	kmalloc_double_kzfree();
 +	vmalloc_oob();
 +	kasan_rcu_uaf();
  
 -static struct kunit_suite kasan_kunit_test_suite = {
 -	.name = "kasan",
 -	.init = kasan_test_init,
 -	.test_cases = kasan_kunit_test_cases,
 -	.exit = kasan_test_exit,
 -};
 +	kasan_restore_multi_shot(multishot);
  
 -kunit_test_suite(kasan_kunit_test_suite);
 +	return -EAGAIN;
 +}
  
 +module_init(kmalloc_tests_init);
  MODULE_LICENSE("GPL");
* Unmerged path lib/test_kasan.c
