platform/x86: firmware_attributes_class: Create helper file for handling firmware-attributes class registration events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Mark Pearson <markpearson@lenovo.com>
commit 17b707fe5fbd3c019691873c1c11bddb0e0f7225
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/17b707fe.failed

This offers shared code for registering the firmware_attributes_class,
which is used by the Dell and Lenovo WMI management drivers.

	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Mark Pearson <markpearson@lenovo.com>
Link: https://lore.kernel.org/r/20210530223111.25929-1-markpearson@lenovo.com
	Reviewed-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
(cherry picked from commit 17b707fe5fbd3c019691873c1c11bddb0e0f7225)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/Makefile
diff --cc drivers/platform/x86/Makefile
index bc00c206ad61,98c776967fa0..000000000000
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@@ -60,40 -101,35 +60,59 @@@ obj-$(CONFIG_INTEL_WMI_THUNDERBOLT)	+= 
  # before toshiba_acpi initializes
  obj-$(CONFIG_ACPI_TOSHIBA)	+= toshiba_acpi.o
  
 -# Laptop drivers
 -obj-$(CONFIG_ACPI_CMPC)		+= classmate-laptop.o
 -obj-$(CONFIG_COMPAL_LAPTOP)	+= compal-laptop.o
 -obj-$(CONFIG_LG_LAPTOP)		+= lg-laptop.o
 -obj-$(CONFIG_PANASONIC_LAPTOP)	+= panasonic-laptop.o
 -obj-$(CONFIG_SONY_LAPTOP)	+= sony-laptop.o
 -obj-$(CONFIG_SYSTEM76_ACPI)	+= system76_acpi.o
 -obj-$(CONFIG_TOPSTAR_LAPTOP)	+= topstar-laptop.o
 -
 +obj-$(CONFIG_TOSHIBA_BT_RFKILL)	+= toshiba_bluetooth.o
 +obj-$(CONFIG_TOSHIBA_HAPS)	+= toshiba_haps.o
 +obj-$(CONFIG_TOSHIBA_WMI)	+= toshiba-wmi.o
 +obj-$(CONFIG_INTEL_CHT_INT33FE)	+= intel_cht_int33fe.o
 +obj-$(CONFIG_INTEL_INT0002_VGPIO) += intel_int0002_vgpio.o
 +obj-$(CONFIG_INTEL_HID_EVENT)	+= intel-hid.o
 +obj-$(CONFIG_INTEL_VBTN)	+= intel-vbtn.o
 +obj-$(CONFIG_INTEL_SCU_IPC)	+= intel_scu_ipc.o
 +obj-$(CONFIG_INTEL_SCU_IPC_UTIL) += intel_scu_ipcutil.o
 +obj-$(CONFIG_INTEL_MFLD_THERMAL) += intel_mid_thermal.o
 +obj-$(CONFIG_INTEL_IPS)		+= intel_ips.o
 +obj-$(CONFIG_XO1_RFKILL)	+= xo1-rfkill.o
 +obj-$(CONFIG_XO15_EBOOK)	+= xo15-ebook.o
 +obj-$(CONFIG_IBM_RTL)		+= ibm_rtl.o
 +obj-$(CONFIG_SAMSUNG_LAPTOP)	+= samsung-laptop.o
 +obj-$(CONFIG_MXM_WMI)		+= mxm-wmi.o
 +obj-$(CONFIG_INTEL_MID_POWER_BUTTON)	+= intel_mid_powerbtn.o
 +obj-$(CONFIG_INTEL_OAKTRAIL)	+= intel_oaktrail.o
 +obj-$(CONFIG_SAMSUNG_Q10)	+= samsung-q10.o
 +obj-$(CONFIG_APPLE_GMUX)	+= apple-gmux.o
 +obj-$(CONFIG_INTEL_RST)		+= intel-rst.o
 +obj-$(CONFIG_INTEL_SMARTCONNECT)	+= intel-smartconnect.o
 +
++<<<<<<< HEAD
 +obj-$(CONFIG_PVPANIC)           += pvpanic.o
 +obj-$(CONFIG_ALIENWARE_WMI)	+= alienware-wmi.o
 +obj-$(CONFIG_INTEL_PMC_IPC)	+= intel_pmc_ipc.o
 +obj-$(CONFIG_SILEAD_DMI)	+= silead_dmi.o
 +obj-$(CONFIG_SURFACE_PRO3_BUTTON)	+= surfacepro3_button.o
 +obj-$(CONFIG_SURFACE_3_BUTTON)	+= surface3_button.o
 +obj-$(CONFIG_INTEL_PUNIT_IPC)  += intel_punit_ipc.o
++=======
+ # Platform drivers
+ obj-$(CONFIG_FW_ATTR_CLASS)		+= firmware_attributes_class.o
+ obj-$(CONFIG_I2C_MULTI_INSTANTIATE)	+= i2c-multi-instantiate.o
+ obj-$(CONFIG_MLX_PLATFORM)		+= mlx-platform.o
+ obj-$(CONFIG_TOUCHSCREEN_DMI)		+= touchscreen_dmi.o
+ obj-$(CONFIG_WIRELESS_HOTKEY)		+= wireless-hotkey.o
+ 
+ # Intel uncore drivers
+ obj-$(CONFIG_INTEL_IPS)				+= intel_ips.o
+ obj-$(CONFIG_INTEL_RST)				+= intel-rst.o
+ obj-$(CONFIG_INTEL_SMARTCONNECT)		+= intel-smartconnect.o
+ obj-$(CONFIG_INTEL_SPEED_SELECT_INTERFACE)	+= intel_speed_select_if/
+ obj-$(CONFIG_INTEL_TURBO_MAX_3)			+= intel_turbo_max_3.o
+ obj-$(CONFIG_INTEL_UNCORE_FREQ_CONTROL)		+= intel-uncore-frequency.o
+ 
+ # Intel PMIC / PMC / P-Unit devices
++>>>>>>> 17b707fe5fbd (platform/x86: firmware_attributes_class: Create helper file for handling firmware-attributes class registration events)
  obj-$(CONFIG_INTEL_BXTWC_PMIC_TMU)	+= intel_bxtwc_tmu.o
 -obj-$(CONFIG_INTEL_CHTDC_TI_PWRBTN)	+= intel_chtdc_ti_pwrbtn.o
 -obj-$(CONFIG_INTEL_MRFLD_PWRBTN)	+= intel_mrfld_pwrbtn.o
 -obj-$(CONFIG_INTEL_PMC_CORE)		+= intel_pmc_core.o intel_pmc_core_pltdrv.o
 +obj-$(CONFIG_INTEL_TELEMETRY)	+= intel_telemetry_core.o \
 +				   intel_telemetry_pltdrv.o \
 +				   intel_telemetry_debugfs.o
  obj-$(CONFIG_INTEL_PMT_CLASS)		+= intel_pmt_class.o
  obj-$(CONFIG_INTEL_PMT_TELEMETRY)	+= intel_pmt_telemetry.o
  obj-$(CONFIG_INTEL_PMT_CRASHLOG)	+= intel_pmt_crashlog.o
diff --git a/drivers/platform/x86/Kconfig b/drivers/platform/x86/Kconfig
index 9a282595af99..1941ea899d04 100644
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@ -1013,6 +1013,10 @@ config INTEL_IPS
 	  functionality.  If in doubt, say Y here; it will only load on
 	  supported platforms.
 
+config FW_ATTR_CLASS
+	tristate
+	default n
+
 config INTEL_IMR
 	bool "Intel Isolated Memory Region support"
 	depends on X86_INTEL_QUARK && IOSF_MBI
* Unmerged path drivers/platform/x86/Makefile
diff --git a/drivers/platform/x86/firmware_attributes_class.c b/drivers/platform/x86/firmware_attributes_class.c
new file mode 100644
index 000000000000..d62ec3d71ede
--- /dev/null
+++ b/drivers/platform/x86/firmware_attributes_class.c
@@ -0,0 +1,52 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+
+/* Firmware attributes class helper module */
+
+#include <linux/mutex.h>
+#include <linux/device/class.h>
+#include <linux/module.h>
+#include "firmware_attributes_class.h"
+
+static DEFINE_MUTEX(fw_attr_lock);
+int fw_attr_inuse;
+
+static struct class firmware_attributes_class = {
+	.name = "firmware-attributes",
+};
+
+int fw_attributes_class_get(struct class **fw_attr_class)
+{
+	int err;
+
+	mutex_lock(&fw_attr_lock);
+	if (!fw_attr_inuse) { /*first time class is being used*/
+		err = class_register(&firmware_attributes_class);
+		if (err) {
+			mutex_unlock(&fw_attr_lock);
+			return err;
+		}
+	}
+	fw_attr_inuse++;
+	*fw_attr_class = &firmware_attributes_class;
+	mutex_unlock(&fw_attr_lock);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(fw_attributes_class_get);
+
+int fw_attributes_class_put(void)
+{
+	mutex_lock(&fw_attr_lock);
+	if (!fw_attr_inuse) {
+		mutex_unlock(&fw_attr_lock);
+		return -EINVAL;
+	}
+	fw_attr_inuse--;
+	if (!fw_attr_inuse) /* No more consumers */
+		class_unregister(&firmware_attributes_class);
+	mutex_unlock(&fw_attr_lock);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(fw_attributes_class_put);
+
+MODULE_AUTHOR("Mark Pearson <markpearson@lenovo.com>");
+MODULE_LICENSE("GPL");
diff --git a/drivers/platform/x86/firmware_attributes_class.h b/drivers/platform/x86/firmware_attributes_class.h
new file mode 100644
index 000000000000..486485cb1f54
--- /dev/null
+++ b/drivers/platform/x86/firmware_attributes_class.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+/* Firmware attributes class helper module */
+
+#ifndef FW_ATTR_CLASS_H
+#define FW_ATTR_CLASS_H
+
+int fw_attributes_class_get(struct class **fw_attr_class);
+int fw_attributes_class_put(void);
+
+#endif /* FW_ATTR_CLASS_H */
