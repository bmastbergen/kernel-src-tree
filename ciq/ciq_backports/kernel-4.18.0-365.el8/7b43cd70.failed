drm/i915: Reuse ilk_needs_fb_cb_tune() for the reduced clock as well

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 7b43cd70b56d5d708cfaea272ed62f88a482214f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/7b43cd70.failed

Use ilk_needs_fb_cb_tune() for reduced_clock instead of hand rolling
it. Also ilk_needs_fb_cb_tune() can just use the precomputed M value
instead of calculating it again.

	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210715093530.31711-11-ville.syrjala@linux.intel.com
	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
(cherry picked from commit 7b43cd70b56d5d708cfaea272ed62f88a482214f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dpll.c
diff --cc drivers/gpu/drm/i915/display/intel_dpll.c
index de345d1ba1af,381f6eabeb01..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dpll.c
+++ b/drivers/gpu/drm/i915/display/intel_dpll.c
@@@ -939,18 -952,18 +939,18 @@@ static int hsw_crtc_compute_clock(struc
  	return 0;
  }
  
 -static bool ilk_needs_fb_cb_tune(const struct dpll *dpll, int factor)
 +static bool ilk_needs_fb_cb_tune(struct dpll *dpll, int factor)
  {
- 	return i9xx_dpll_compute_m(dpll) < factor * dpll->n;
+ 	return dpll->m < factor * dpll->n;
  }
  
 -static void ilk_update_pll_dividers(struct intel_crtc_state *crtc_state,
 -				    const struct dpll *clock,
 -				    const struct dpll *reduced_clock)
 +
 +static void ilk_update_pll_dividers(struct intel_crtc *crtc,
 +				    struct intel_crtc_state *crtc_state,
 +				    struct dpll *reduced_clock)
  {
 -	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
  	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
 -	u32 fp, fp2;
 +	u32 fp, fp2 = 0;
  	int factor;
  
  	/* Enable autotuning of the PLL clock (if permissible) */
@@@ -965,26 -978,23 +965,32 @@@
  		factor = 20;
  	}
  
 -	fp = i9xx_dpll_compute_fp(clock);
 -	if (ilk_needs_fb_cb_tune(clock, factor))
 +	fp = i9xx_dpll_compute_fp(&crtc_state->dpll);
 +
 +	if (ilk_needs_fb_cb_tune(&crtc_state->dpll, factor))
  		fp |= FP_CB_TUNE;
  
++<<<<<<< HEAD
 +	if (reduced_clock) {
 +		fp2 = i9xx_dpll_compute_fp(reduced_clock);
 +
 +		if (reduced_clock->m < factor * reduced_clock->n)
 +			fp2 |= FP_CB_TUNE;
 +	}
++=======
+ 	fp2 = i9xx_dpll_compute_fp(reduced_clock);
+ 	if (ilk_needs_fb_cb_tune(reduced_clock, factor))
+ 		fp2 |= FP_CB_TUNE;
++>>>>>>> 7b43cd70b56d (drm/i915: Reuse ilk_needs_fb_cb_tune() for the reduced clock as well)
  
  	crtc_state->dpll_hw_state.fp0 = fp;
 -	crtc_state->dpll_hw_state.fp1 = fp2;
 +	crtc_state->dpll_hw_state.fp1 = reduced_clock ? fp2 : fp;
  }
  
 -static void ilk_compute_dpll(struct intel_crtc_state *crtc_state,
 -			     const struct dpll *clock,
 -			     const struct dpll *reduced_clock)
 +static void ilk_compute_dpll(struct intel_crtc *crtc,
 +			     struct intel_crtc_state *crtc_state,
 +			     struct dpll *reduced_clock)
  {
 -	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
  	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
  	u32 dpll;
  
* Unmerged path drivers/gpu/drm/i915/display/intel_dpll.c
