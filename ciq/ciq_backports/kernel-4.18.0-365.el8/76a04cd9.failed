drm/i915: Nuke intel_prepare_shared_dpll()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 76a04cd9af1e0cd9043b3904faa3ee3dc600799e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/76a04cd9.failed

intel_prepare_shared_dpll() is now useless, so get rid of it.

	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210715093530.31711-14-ville.syrjala@linux.intel.com
	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
(cherry picked from commit 76a04cd9af1e0cd9043b3904faa3ee3dc600799e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dpll_mgr.c
diff --cc drivers/gpu/drm/i915/display/intel_dpll_mgr.c
index 2fde8fa86f11,055992d099c7..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dpll_mgr.c
+++ b/drivers/gpu/drm/i915/display/intel_dpll_mgr.c
@@@ -156,38 -168,23 +156,41 @@@ intel_combo_pll_enable_reg(struct drm_i
  	else if (IS_JSL_EHL(i915) && (pll->info->id == DPLL_ID_EHL_DPLL4))
  		return MG_PLL_ENABLE(0);
  
 -	return ICL_DPLL_ENABLE(pll->info->id);
 +	return CNL_DPLL_ENABLE(pll->info->id);
  }
  
 -static i915_reg_t
 -intel_tc_pll_enable_reg(struct drm_i915_private *i915,
 -			struct intel_shared_dpll *pll)
 +/**
++<<<<<<< HEAD
 + * intel_prepare_shared_dpll - call a dpll's prepare hook
 + * @crtc_state: CRTC, and its state, which has a shared dpll
 + *
 + * This calls the PLL's prepare hook if it has one and if the PLL is not
 + * already enabled. The prepare hook is platform specific.
 + */
 +void intel_prepare_shared_dpll(const struct intel_crtc_state *crtc_state)
  {
 -	const enum intel_dpll_id id = pll->info->id;
 -	enum tc_port tc_port = icl_pll_id_to_tc_port(id);
 +	struct intel_crtc *crtc = to_intel_crtc(crtc_state->uapi.crtc);
 +	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
 +	struct intel_shared_dpll *pll = crtc_state->shared_dpll;
 +
 +	if (drm_WARN_ON(&dev_priv->drm, pll == NULL))
 +		return;
  
 -	if (IS_ALDERLAKE_P(i915))
 -		return ADLP_PORTTC_PLL_ENABLE(tc_port);
 +	mutex_lock(&dev_priv->dpll.lock);
 +	drm_WARN_ON(&dev_priv->drm, !pll->state.crtc_mask);
 +	if (!pll->active_mask) {
 +		drm_dbg(&dev_priv->drm, "setting up %s\n", pll->info->name);
 +		drm_WARN_ON(&dev_priv->drm, pll->on);
 +		assert_shared_dpll_disabled(dev_priv, pll);
  
 -	return MG_PLL_ENABLE(tc_port);
 +		pll->info->funcs->prepare(dev_priv, pll);
 +	}
 +	mutex_unlock(&dev_priv->dpll.lock);
  }
  
  /**
++=======
++>>>>>>> 76a04cd9af1e (drm/i915: Nuke intel_prepare_shared_dpll())
   * intel_enable_shared_dpll - enable a CRTC's shared DPLL
   * @crtc_state: CRTC, and its state, which has a shared DPLL
   *
diff --git a/drivers/gpu/drm/i915/display/intel_display.c b/drivers/gpu/drm/i915/display/intel_display.c
index be4f122dd751..e2ca03356d2f 100644
--- a/drivers/gpu/drm/i915/display/intel_display.c
+++ b/drivers/gpu/drm/i915/display/intel_display.c
@@ -5324,9 +5324,6 @@ static void ilk_crtc_enable(struct intel_atomic_state *state,
 	intel_set_cpu_fifo_underrun_reporting(dev_priv, pipe, false);
 	intel_set_pch_fifo_underrun_reporting(dev_priv, pipe, false);
 
-	if (new_crtc_state->has_pch_encoder)
-		intel_prepare_shared_dpll(new_crtc_state);
-
 	if (intel_crtc_has_dp_encoder(new_crtc_state))
 		intel_dp_set_m_n(new_crtc_state, M1_N1);
 
* Unmerged path drivers/gpu/drm/i915/display/intel_dpll_mgr.c
diff --git a/drivers/gpu/drm/i915/display/intel_dpll_mgr.h b/drivers/gpu/drm/i915/display/intel_dpll_mgr.h
index 2eb7618ef957..ea7535a34915 100644
--- a/drivers/gpu/drm/i915/display/intel_dpll_mgr.h
+++ b/drivers/gpu/drm/i915/display/intel_dpll_mgr.h
@@ -256,16 +256,6 @@ struct intel_shared_dpll_state {
  * struct intel_shared_dpll_funcs - platform specific hooks for managing DPLLs
  */
 struct intel_shared_dpll_funcs {
-	/**
-	 * @prepare:
-	 *
-	 * Optional hook to perform operations prior to enabling the PLL.
-	 * Called from intel_prepare_shared_dpll() function unless the PLL
-	 * is already enabled.
-	 */
-	void (*prepare)(struct drm_i915_private *dev_priv,
-			struct intel_shared_dpll *pll);
-
 	/**
 	 * @enable:
 	 *
@@ -405,7 +395,6 @@ int intel_dpll_get_freq(struct drm_i915_private *i915,
 bool intel_dpll_get_hw_state(struct drm_i915_private *i915,
 			     struct intel_shared_dpll *pll,
 			     struct intel_dpll_hw_state *hw_state);
-void intel_prepare_shared_dpll(const struct intel_crtc_state *crtc_state);
 void intel_enable_shared_dpll(const struct intel_crtc_state *crtc_state);
 void intel_disable_shared_dpll(const struct intel_crtc_state *crtc_state);
 void intel_shared_dpll_swap_state(struct intel_atomic_state *state);
