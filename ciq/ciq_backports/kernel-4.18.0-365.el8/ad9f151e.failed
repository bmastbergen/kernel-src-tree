netfilter: nf_tables: initialize set before expression setup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit ad9f151e560b016b6ad3280b48e42fa11e1a5440
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/ad9f151e.failed

nft_set_elem_expr_alloc() needs an initialized set if expression sets on
the NFT_EXPR_GC flag. Move set fields initialization before expression
setup.

[4512935.019450] ==================================================================
[4512935.019456] BUG: KASAN: null-ptr-deref in nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]
[4512935.019487] Read of size 8 at addr 0000000000000070 by task nft/23532
[4512935.019494] CPU: 1 PID: 23532 Comm: nft Not tainted 5.12.0-rc4+ #48
[...]
[4512935.019502] Call Trace:
[4512935.019505]  dump_stack+0x89/0xb4
[4512935.019512]  ? nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]
[4512935.019536]  ? nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]
[4512935.019560]  kasan_report.cold.12+0x5f/0xd8
[4512935.019566]  ? nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]
[4512935.019590]  nft_set_elem_expr_alloc+0x84/0xd0 [nf_tables]
[4512935.019615]  nf_tables_newset+0xc7f/0x1460 [nf_tables]

	Reported-by: syzbot+ce96ca2b1d0b37c6422d@syzkaller.appspotmail.com
Fixes: 65038428b2c6 ("netfilter: nf_tables: allow to specify stateful expression in set definition")
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit ad9f151e560b016b6ad3280b48e42fa11e1a5440)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_tables_api.c
diff --cc net/netfilter/nf_tables_api.c
index 9f4a0cc92500,bf4d6ec9fc55..000000000000
--- a/net/netfilter/nf_tables_api.c
+++ b/net/netfilter/nf_tables_api.c
@@@ -4145,7 -4364,7 +4145,11 @@@ static int nf_tables_newset(struct net 
  	err = nf_tables_set_alloc_name(&ctx, set, name);
  	kfree(name);
  	if (err < 0)
++<<<<<<< HEAD
 +		goto err2;
++=======
+ 		goto err_set_name;
++>>>>>>> ad9f151e560b (netfilter: nf_tables: initialize set before expression setup)
  
  	udata = NULL;
  	if (udlen) {
@@@ -4154,22 -4373,22 +4158,21 @@@
  	}
  
  	INIT_LIST_HEAD(&set->bindings);
 -	INIT_LIST_HEAD(&set->catchall_list);
  	set->table = table;
  	write_pnet(&set->net, net);
- 	set->ops   = ops;
+ 	set->ops = ops;
  	set->ktype = ktype;
- 	set->klen  = desc.klen;
+ 	set->klen = desc.klen;
  	set->dtype = dtype;
  	set->objtype = objtype;
- 	set->dlen  = desc.dlen;
+ 	set->dlen = desc.dlen;
  	set->flags = flags;
- 	set->size  = desc.size;
+ 	set->size = desc.size;
  	set->policy = policy;
- 	set->udlen  = udlen;
- 	set->udata  = udata;
+ 	set->udlen = udlen;
+ 	set->udata = udata;
  	set->timeout = timeout;
  	set->gc_int = gc_int;
- 	set->handle = nf_tables_alloc_handle(table);
  
  	set->field_count = desc.field_count;
  	for (i = 0; i < desc.field_count; i++)
@@@ -4177,24 -4396,64 +4180,76 @@@
  
  	err = ops->init(set, &desc, nla);
  	if (err < 0)
 -		goto err_set_init;
 +		goto err3;
  
+ 	if (nla[NFTA_SET_EXPR]) {
+ 		expr = nft_set_elem_expr_alloc(&ctx, set, nla[NFTA_SET_EXPR]);
+ 		if (IS_ERR(expr)) {
+ 			err = PTR_ERR(expr);
+ 			goto err_set_expr_alloc;
+ 		}
+ 		set->exprs[0] = expr;
+ 		set->num_exprs++;
+ 	} else if (nla[NFTA_SET_EXPRESSIONS]) {
+ 		struct nft_expr *expr;
+ 		struct nlattr *tmp;
+ 		int left;
+ 
+ 		if (!(flags & NFT_SET_EXPR)) {
+ 			err = -EINVAL;
+ 			goto err_set_expr_alloc;
+ 		}
+ 		i = 0;
+ 		nla_for_each_nested(tmp, nla[NFTA_SET_EXPRESSIONS], left) {
+ 			if (i == NFT_SET_EXPR_MAX) {
+ 				err = -E2BIG;
+ 				goto err_set_expr_alloc;
+ 			}
+ 			if (nla_type(tmp) != NFTA_LIST_ELEM) {
+ 				err = -EINVAL;
+ 				goto err_set_expr_alloc;
+ 			}
+ 			expr = nft_set_elem_expr_alloc(&ctx, set, tmp);
+ 			if (IS_ERR(expr)) {
+ 				err = PTR_ERR(expr);
+ 				goto err_set_expr_alloc;
+ 			}
+ 			set->exprs[i++] = expr;
+ 			set->num_exprs++;
+ 		}
+ 	}
+ 
+ 	set->handle = nf_tables_alloc_handle(table);
+ 
  	err = nft_trans_set_add(&ctx, NFT_MSG_NEWSET, set);
  	if (err < 0)
++<<<<<<< HEAD
 +		goto err4;
++=======
+ 		goto err_set_expr_alloc;
++>>>>>>> ad9f151e560b (netfilter: nf_tables: initialize set before expression setup)
  
  	list_add_tail_rcu(&set->list, &table->sets);
  	table->use++;
  	return 0;
  
++<<<<<<< HEAD
 +err4:
 +	ops->destroy(set);
 +err3:
++=======
+ err_set_expr_alloc:
+ 	for (i = 0; i < set->num_exprs; i++)
+ 		nft_expr_destroy(&ctx, set->exprs[i]);
+ 
+ 	ops->destroy(set);
+ err_set_init:
++>>>>>>> ad9f151e560b (netfilter: nf_tables: initialize set before expression setup)
  	kfree(set->name);
 -err_set_name:
 +err2:
  	kvfree(set);
 +err1:
 +	module_put(to_set_type(ops)->owner);
  	return err;
  }
  
* Unmerged path net/netfilter/nf_tables_api.c
