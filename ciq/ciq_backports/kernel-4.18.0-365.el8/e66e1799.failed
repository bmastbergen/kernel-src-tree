kasan: fix memory corruption in kasan_bitops_tags test

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit e66e1799a76621003e5b04c9c057826a2152e103
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/e66e1799.failed

Since the hardware tag-based KASAN mode might not have a redzone that
comes after an allocated object (when kasan.mode=prod is enabled), the
kasan_bitops_tags() test ends up corrupting the next object in memory.

Change the test so it always accesses the redzone that lies within the
allocated object's boundaries.

Link: https://linux-review.googlesource.com/id/I67f51d1ee48f0a8d0fe2658c2a39e4879fe0832a
Link: https://lkml.kernel.org/r/7d452ce4ae35bb1988d2c9244dfea56cf2cc9315.1610733117.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Reviewed-by: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Peter Collingbourne <pcc@google.com>
	Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit e66e1799a76621003e5b04c9c057826a2152e103)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/test_kasan.c
diff --cc lib/test_kasan.c
index 5679dda37d78,e59f185b8075..000000000000
--- a/lib/test_kasan.c
+++ b/lib/test_kasan.c
@@@ -780,7 -742,25 +780,29 @@@ static noinline void __init kasan_bitop
  	kfree(bits);
  }
  
++<<<<<<< HEAD
 +static noinline void __init kmalloc_double_kzfree(void)
++=======
+ static void kasan_bitops_tags(struct kunit *test)
+ {
+ 	long *bits;
+ 
+ 	/* This test is specifically crafted for tag-based modes. */
+ 	KASAN_TEST_NEEDS_CONFIG_OFF(test, CONFIG_KASAN_GENERIC);
+ 
+ 	/* kmalloc-64 cache will be used and the last 16 bytes will be the redzone. */
+ 	bits = kzalloc(48, GFP_KERNEL);
+ 	KUNIT_ASSERT_NOT_ERR_OR_NULL(test, bits);
+ 
+ 	/* Do the accesses past the 48 allocated bytes, but within the redone. */
+ 	kasan_bitops_modify(test, BITS_PER_LONG, (void *)bits + 48);
+ 	kasan_bitops_test_and_modify(test, BITS_PER_LONG + BITS_PER_BYTE, (void *)bits + 48);
+ 
+ 	kfree(bits);
+ }
+ 
+ static void kmalloc_double_kzfree(struct kunit *test)
++>>>>>>> e66e1799a766 (kasan: fix memory corruption in kasan_bitops_tags test)
  {
  	char *ptr;
  	size_t size = 16;
* Unmerged path lib/test_kasan.c
