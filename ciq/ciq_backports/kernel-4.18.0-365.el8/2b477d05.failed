igc: Integrate flex filter into ethtool ops

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Kurt Kanzenbach <kurt@linutronix.de>
commit 2b477d057e3364c22e8f86724c798ad664bd8360
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/2b477d05.failed

Use the flex filter mechanism to extend the current ethtool filter
operations by intercoperating the user data. This allows to match
eight more bytes within a Ethernet frame in addition to macs, ether
types and vlan.

The matching pattern looks like this:

 * dest_mac [6]
 * src_mac [6]
 * tpid [2]
 * vlan tci [2]
 * ether type [2]
 * user data [8]

This can be used to match Profinet traffic classes by FrameID range.

	Signed-off-by: Kurt Kanzenbach <kurt@linutronix.de>
	Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Tested-by: Dvora Fuxbrumer <dvorax.fuxbrumer@linux.intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 2b477d057e3364c22e8f86724c798ad664bd8360)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igc/igc_defines.h
#	drivers/net/ethernet/intel/igc/igc_main.c
diff --cc drivers/net/ethernet/intel/igc/igc_defines.h
index 8edb678df792,c6315690e20f..000000000000
--- a/drivers/net/ethernet/intel/igc/igc_defines.h
+++ b/drivers/net/ethernet/intel/igc/igc_defines.h
@@@ -15,12 -17,23 +15,14 @@@
  #define IGC_WUC_PME_EN	0x00000002 /* PME Enable */
  
  /* Wake Up Filter Control */
 -#define IGC_WUFC_LNKC		0x00000001 /* Link Status Change Wakeup Enable */
 -#define IGC_WUFC_MAG		0x00000002 /* Magic Packet Wakeup Enable */
 -#define IGC_WUFC_EX		0x00000004 /* Directed Exact Wakeup Enable */
 -#define IGC_WUFC_MC		0x00000008 /* Directed Multicast Wakeup Enable */
 -#define IGC_WUFC_BC		0x00000010 /* Broadcast Wakeup Enable */
 -#define IGC_WUFC_FLEX_HQ	BIT(14)	   /* Flex Filters Host Queuing */
 -#define IGC_WUFC_FLX0		BIT(16)	   /* Flexible Filter 0 Enable */
 -#define IGC_WUFC_FLX1		BIT(17)	   /* Flexible Filter 1 Enable */
 -#define IGC_WUFC_FLX2		BIT(18)	   /* Flexible Filter 2 Enable */
 -#define IGC_WUFC_FLX3		BIT(19)	   /* Flexible Filter 3 Enable */
 -#define IGC_WUFC_FLX4		BIT(20)	   /* Flexible Filter 4 Enable */
 -#define IGC_WUFC_FLX5		BIT(21)	   /* Flexible Filter 5 Enable */
 -#define IGC_WUFC_FLX6		BIT(22)	   /* Flexible Filter 6 Enable */
 -#define IGC_WUFC_FLX7		BIT(23)	   /* Flexible Filter 7 Enable */
 +#define IGC_WUFC_LNKC	0x00000001 /* Link Status Change Wakeup Enable */
 +#define IGC_WUFC_MAG	0x00000002 /* Magic Packet Wakeup Enable */
 +#define IGC_WUFC_EX	0x00000004 /* Directed Exact Wakeup Enable */
 +#define IGC_WUFC_MC	0x00000008 /* Directed Multicast Wakeup Enable */
 +#define IGC_WUFC_BC	0x00000010 /* Broadcast Wakeup Enable */
  
+ #define IGC_WUFC_FILTER_MASK GENMASK(23, 14)
+ 
  #define IGC_CTRL_ADVD3WUC	0x00100000  /* D3 WUC */
  
  /* Wake Up Status */
@@@ -44,6 -57,37 +46,40 @@@
  /* Wake Up Packet Memory stores the first 128 bytes of the wake up packet */
  #define IGC_WUPM_BYTES	128
  
++<<<<<<< HEAD
++=======
+ /* Wakeup Filter Control Extended */
+ #define IGC_WUFC_EXT_FLX8	BIT(8)	/* Flexible Filter 8 Enable */
+ #define IGC_WUFC_EXT_FLX9	BIT(9)	/* Flexible Filter 9 Enable */
+ #define IGC_WUFC_EXT_FLX10	BIT(10)	/* Flexible Filter 10 Enable */
+ #define IGC_WUFC_EXT_FLX11	BIT(11)	/* Flexible Filter 11 Enable */
+ #define IGC_WUFC_EXT_FLX12	BIT(12)	/* Flexible Filter 12 Enable */
+ #define IGC_WUFC_EXT_FLX13	BIT(13)	/* Flexible Filter 13 Enable */
+ #define IGC_WUFC_EXT_FLX14	BIT(14)	/* Flexible Filter 14 Enable */
+ #define IGC_WUFC_EXT_FLX15	BIT(15)	/* Flexible Filter 15 Enable */
+ #define IGC_WUFC_EXT_FLX16	BIT(16)	/* Flexible Filter 16 Enable */
+ #define IGC_WUFC_EXT_FLX17	BIT(17)	/* Flexible Filter 17 Enable */
+ #define IGC_WUFC_EXT_FLX18	BIT(18)	/* Flexible Filter 18 Enable */
+ #define IGC_WUFC_EXT_FLX19	BIT(19)	/* Flexible Filter 19 Enable */
+ #define IGC_WUFC_EXT_FLX20	BIT(20)	/* Flexible Filter 20 Enable */
+ #define IGC_WUFC_EXT_FLX21	BIT(21)	/* Flexible Filter 21 Enable */
+ #define IGC_WUFC_EXT_FLX22	BIT(22)	/* Flexible Filter 22 Enable */
+ #define IGC_WUFC_EXT_FLX23	BIT(23)	/* Flexible Filter 23 Enable */
+ #define IGC_WUFC_EXT_FLX24	BIT(24)	/* Flexible Filter 24 Enable */
+ #define IGC_WUFC_EXT_FLX25	BIT(25)	/* Flexible Filter 25 Enable */
+ #define IGC_WUFC_EXT_FLX26	BIT(26)	/* Flexible Filter 26 Enable */
+ #define IGC_WUFC_EXT_FLX27	BIT(27)	/* Flexible Filter 27 Enable */
+ #define IGC_WUFC_EXT_FLX28	BIT(28)	/* Flexible Filter 28 Enable */
+ #define IGC_WUFC_EXT_FLX29	BIT(29)	/* Flexible Filter 29 Enable */
+ #define IGC_WUFC_EXT_FLX30	BIT(30)	/* Flexible Filter 30 Enable */
+ #define IGC_WUFC_EXT_FLX31	BIT(31)	/* Flexible Filter 31 Enable */
+ 
+ #define IGC_WUFC_EXT_FILTER_MASK GENMASK(31, 8)
+ 
+ /* Physical Func Reset Done Indication */
+ #define IGC_CTRL_EXT_LINK_MODE_MASK	0x00C00000
+ 
++>>>>>>> 2b477d057e33 (igc: Integrate flex filter into ethtool ops)
  /* Loop limit on how long we wait for auto-negotiation to complete */
  #define COPPER_LINK_UP_LIMIT		10
  #define PHY_AUTO_NEG_LIMIT		45
diff --cc drivers/net/ethernet/intel/igc/igc_main.c
index cf93948fb897,9999d8fc640b..000000000000
--- a/drivers/net/ethernet/intel/igc/igc_main.c
+++ b/drivers/net/ethernet/intel/igc/igc_main.c
@@@ -2461,8 -3075,313 +2461,316 @@@ static void igc_del_etype_filter(struc
  		   etype);
  }
  
++<<<<<<< HEAD
++=======
+ static int igc_flex_filter_select(struct igc_adapter *adapter,
+ 				  struct igc_flex_filter *input,
+ 				  u32 *fhft)
+ {
+ 	struct igc_hw *hw = &adapter->hw;
+ 	u8 fhft_index;
+ 	u32 fhftsl;
+ 
+ 	if (input->index >= MAX_FLEX_FILTER) {
+ 		dev_err(&adapter->pdev->dev, "Wrong Flex Filter index selected!\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* Indirect table select register */
+ 	fhftsl = rd32(IGC_FHFTSL);
+ 	fhftsl &= ~IGC_FHFTSL_FTSL_MASK;
+ 	switch (input->index) {
+ 	case 0 ... 7:
+ 		fhftsl |= 0x00;
+ 		break;
+ 	case 8 ... 15:
+ 		fhftsl |= 0x01;
+ 		break;
+ 	case 16 ... 23:
+ 		fhftsl |= 0x02;
+ 		break;
+ 	case 24 ... 31:
+ 		fhftsl |= 0x03;
+ 		break;
+ 	}
+ 	wr32(IGC_FHFTSL, fhftsl);
+ 
+ 	/* Normalize index down to host table register */
+ 	fhft_index = input->index % 8;
+ 
+ 	*fhft = (fhft_index < 4) ? IGC_FHFT(fhft_index) :
+ 		IGC_FHFT_EXT(fhft_index - 4);
+ 
+ 	return 0;
+ }
+ 
+ static int igc_write_flex_filter_ll(struct igc_adapter *adapter,
+ 				    struct igc_flex_filter *input)
+ {
+ 	struct device *dev = &adapter->pdev->dev;
+ 	struct igc_hw *hw = &adapter->hw;
+ 	u8 *data = input->data;
+ 	u8 *mask = input->mask;
+ 	u32 queuing;
+ 	u32 fhft;
+ 	u32 wufc;
+ 	int ret;
+ 	int i;
+ 
+ 	/* Length has to be aligned to 8. Otherwise the filter will fail. Bail
+ 	 * out early to avoid surprises later.
+ 	 */
+ 	if (input->length % 8 != 0) {
+ 		dev_err(dev, "The length of a flex filter has to be 8 byte aligned!\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* Select corresponding flex filter register and get base for host table. */
+ 	ret = igc_flex_filter_select(adapter, input, &fhft);
+ 	if (ret)
+ 		return ret;
+ 
+ 	/* When adding a filter globally disable flex filter feature. That is
+ 	 * recommended within the datasheet.
+ 	 */
+ 	wufc = rd32(IGC_WUFC);
+ 	wufc &= ~IGC_WUFC_FLEX_HQ;
+ 	wr32(IGC_WUFC, wufc);
+ 
+ 	/* Configure filter */
+ 	queuing = input->length & IGC_FHFT_LENGTH_MASK;
+ 	queuing |= (input->rx_queue << IGC_FHFT_QUEUE_SHIFT) & IGC_FHFT_QUEUE_MASK;
+ 	queuing |= (input->prio << IGC_FHFT_PRIO_SHIFT) & IGC_FHFT_PRIO_MASK;
+ 
+ 	if (input->immediate_irq)
+ 		queuing |= IGC_FHFT_IMM_INT;
+ 
+ 	if (input->drop)
+ 		queuing |= IGC_FHFT_DROP;
+ 
+ 	wr32(fhft + 0xFC, queuing);
+ 
+ 	/* Write data (128 byte) and mask (128 bit) */
+ 	for (i = 0; i < 16; ++i) {
+ 		const size_t data_idx = i * 8;
+ 		const size_t row_idx = i * 16;
+ 		u32 dw0 =
+ 			(data[data_idx + 0] << 0) |
+ 			(data[data_idx + 1] << 8) |
+ 			(data[data_idx + 2] << 16) |
+ 			(data[data_idx + 3] << 24);
+ 		u32 dw1 =
+ 			(data[data_idx + 4] << 0) |
+ 			(data[data_idx + 5] << 8) |
+ 			(data[data_idx + 6] << 16) |
+ 			(data[data_idx + 7] << 24);
+ 		u32 tmp;
+ 
+ 		/* Write row: dw0, dw1 and mask */
+ 		wr32(fhft + row_idx, dw0);
+ 		wr32(fhft + row_idx + 4, dw1);
+ 
+ 		/* mask is only valid for MASK(7, 0) */
+ 		tmp = rd32(fhft + row_idx + 8);
+ 		tmp &= ~GENMASK(7, 0);
+ 		tmp |= mask[i];
+ 		wr32(fhft + row_idx + 8, tmp);
+ 	}
+ 
+ 	/* Enable filter. */
+ 	wufc |= IGC_WUFC_FLEX_HQ;
+ 	if (input->index > 8) {
+ 		/* Filter 0-7 are enabled via WUFC. The other 24 filters are not. */
+ 		u32 wufc_ext = rd32(IGC_WUFC_EXT);
+ 
+ 		wufc_ext |= (IGC_WUFC_EXT_FLX8 << (input->index - 8));
+ 
+ 		wr32(IGC_WUFC_EXT, wufc_ext);
+ 	} else {
+ 		wufc |= (IGC_WUFC_FLX0 << input->index);
+ 	}
+ 	wr32(IGC_WUFC, wufc);
+ 
+ 	dev_dbg(&adapter->pdev->dev, "Added flex filter %u to HW.\n",
+ 		input->index);
+ 
+ 	return 0;
+ }
+ 
+ static void igc_flex_filter_add_field(struct igc_flex_filter *flex,
+ 				      const void *src, unsigned int offset,
+ 				      size_t len, const void *mask)
+ {
+ 	int i;
+ 
+ 	/* data */
+ 	memcpy(&flex->data[offset], src, len);
+ 
+ 	/* mask */
+ 	for (i = 0; i < len; ++i) {
+ 		const unsigned int idx = i + offset;
+ 		const u8 *ptr = mask;
+ 
+ 		if (mask) {
+ 			if (ptr[i] & 0xff)
+ 				flex->mask[idx / 8] |= BIT(idx % 8);
+ 
+ 			continue;
+ 		}
+ 
+ 		flex->mask[idx / 8] |= BIT(idx % 8);
+ 	}
+ }
+ 
+ static int igc_find_avail_flex_filter_slot(struct igc_adapter *adapter)
+ {
+ 	struct igc_hw *hw = &adapter->hw;
+ 	u32 wufc, wufc_ext;
+ 	int i;
+ 
+ 	wufc = rd32(IGC_WUFC);
+ 	wufc_ext = rd32(IGC_WUFC_EXT);
+ 
+ 	for (i = 0; i < MAX_FLEX_FILTER; i++) {
+ 		if (i < 8) {
+ 			if (!(wufc & (IGC_WUFC_FLX0 << i)))
+ 				return i;
+ 		} else {
+ 			if (!(wufc_ext & (IGC_WUFC_EXT_FLX8 << (i - 8))))
+ 				return i;
+ 		}
+ 	}
+ 
+ 	return -ENOSPC;
+ }
+ 
+ static bool igc_flex_filter_in_use(struct igc_adapter *adapter)
+ {
+ 	struct igc_hw *hw = &adapter->hw;
+ 	u32 wufc, wufc_ext;
+ 
+ 	wufc = rd32(IGC_WUFC);
+ 	wufc_ext = rd32(IGC_WUFC_EXT);
+ 
+ 	if (wufc & IGC_WUFC_FILTER_MASK)
+ 		return true;
+ 
+ 	if (wufc_ext & IGC_WUFC_EXT_FILTER_MASK)
+ 		return true;
+ 
+ 	return false;
+ }
+ 
+ static int igc_add_flex_filter(struct igc_adapter *adapter,
+ 			       struct igc_nfc_rule *rule)
+ {
+ 	struct igc_flex_filter flex = { };
+ 	struct igc_nfc_filter *filter = &rule->filter;
+ 	unsigned int eth_offset, user_offset;
+ 	int ret, index;
+ 	bool vlan;
+ 
+ 	index = igc_find_avail_flex_filter_slot(adapter);
+ 	if (index < 0)
+ 		return -ENOSPC;
+ 
+ 	/* Construct the flex filter:
+ 	 *  -> dest_mac [6]
+ 	 *  -> src_mac [6]
+ 	 *  -> tpid [2]
+ 	 *  -> vlan tci [2]
+ 	 *  -> ether type [2]
+ 	 *  -> user data [8]
+ 	 *  -> = 26 bytes => 32 length
+ 	 */
+ 	flex.index    = index;
+ 	flex.length   = 32;
+ 	flex.rx_queue = rule->action;
+ 
+ 	vlan = rule->filter.vlan_tci || rule->filter.vlan_etype;
+ 	eth_offset = vlan ? 16 : 12;
+ 	user_offset = vlan ? 18 : 14;
+ 
+ 	/* Add destination MAC  */
+ 	if (rule->filter.match_flags & IGC_FILTER_FLAG_DST_MAC_ADDR)
+ 		igc_flex_filter_add_field(&flex, &filter->dst_addr, 0,
+ 					  ETH_ALEN, NULL);
+ 
+ 	/* Add source MAC */
+ 	if (rule->filter.match_flags & IGC_FILTER_FLAG_SRC_MAC_ADDR)
+ 		igc_flex_filter_add_field(&flex, &filter->src_addr, 6,
+ 					  ETH_ALEN, NULL);
+ 
+ 	/* Add VLAN etype */
+ 	if (rule->filter.match_flags & IGC_FILTER_FLAG_VLAN_ETYPE)
+ 		igc_flex_filter_add_field(&flex, &filter->vlan_etype, 12,
+ 					  sizeof(filter->vlan_etype),
+ 					  NULL);
+ 
+ 	/* Add VLAN TCI */
+ 	if (rule->filter.match_flags & IGC_FILTER_FLAG_VLAN_TCI)
+ 		igc_flex_filter_add_field(&flex, &filter->vlan_tci, 14,
+ 					  sizeof(filter->vlan_tci), NULL);
+ 
+ 	/* Add Ether type */
+ 	if (rule->filter.match_flags & IGC_FILTER_FLAG_ETHER_TYPE) {
+ 		__be16 etype = cpu_to_be16(filter->etype);
+ 
+ 		igc_flex_filter_add_field(&flex, &etype, eth_offset,
+ 					  sizeof(etype), NULL);
+ 	}
+ 
+ 	/* Add user data */
+ 	if (rule->filter.match_flags & IGC_FILTER_FLAG_USER_DATA)
+ 		igc_flex_filter_add_field(&flex, &filter->user_data,
+ 					  user_offset,
+ 					  sizeof(filter->user_data),
+ 					  filter->user_mask);
+ 
+ 	/* Add it down to the hardware and enable it. */
+ 	ret = igc_write_flex_filter_ll(adapter, &flex);
+ 	if (ret)
+ 		return ret;
+ 
+ 	filter->flex_index = index;
+ 
+ 	return 0;
+ }
+ 
+ static void igc_del_flex_filter(struct igc_adapter *adapter,
+ 				u16 reg_index)
+ {
+ 	struct igc_hw *hw = &adapter->hw;
+ 	u32 wufc;
+ 
+ 	/* Just disable the filter. The filter table itself is kept
+ 	 * intact. Another flex_filter_add() should override the "old" data
+ 	 * then.
+ 	 */
+ 	if (reg_index > 8) {
+ 		u32 wufc_ext = rd32(IGC_WUFC_EXT);
+ 
+ 		wufc_ext &= ~(IGC_WUFC_EXT_FLX8 << (reg_index - 8));
+ 		wr32(IGC_WUFC_EXT, wufc_ext);
+ 	} else {
+ 		wufc = rd32(IGC_WUFC);
+ 
+ 		wufc &= ~(IGC_WUFC_FLX0 << reg_index);
+ 		wr32(IGC_WUFC, wufc);
+ 	}
+ 
+ 	if (igc_flex_filter_in_use(adapter))
+ 		return;
+ 
+ 	/* No filters are in use, we may disable flex filters */
+ 	wufc = rd32(IGC_WUFC);
+ 	wufc &= ~IGC_WUFC_FLEX_HQ;
+ 	wr32(IGC_WUFC, wufc);
+ }
+ 
++>>>>>>> 2b477d057e33 (igc: Integrate flex filter into ethtool ops)
  static int igc_enable_nfc_rule(struct igc_adapter *adapter,
- 			       const struct igc_nfc_rule *rule)
+ 			       struct igc_nfc_rule *rule)
  {
  	int err;
  
diff --git a/drivers/net/ethernet/intel/igc/igc.h b/drivers/net/ethernet/intel/igc/igc.h
index d1a87ef60f7c..0a66fba47844 100644
--- a/drivers/net/ethernet/intel/igc/igc.h
+++ b/drivers/net/ethernet/intel/igc/igc.h
@@ -438,18 +438,28 @@ struct igc_q_vector {
 };
 
 enum igc_filter_match_flags {
-	IGC_FILTER_FLAG_ETHER_TYPE =	0x1,
-	IGC_FILTER_FLAG_VLAN_TCI   =	0x2,
-	IGC_FILTER_FLAG_SRC_MAC_ADDR =	0x4,
-	IGC_FILTER_FLAG_DST_MAC_ADDR =	0x8,
+	IGC_FILTER_FLAG_ETHER_TYPE =	BIT(0),
+	IGC_FILTER_FLAG_VLAN_TCI   =	BIT(1),
+	IGC_FILTER_FLAG_SRC_MAC_ADDR =	BIT(2),
+	IGC_FILTER_FLAG_DST_MAC_ADDR =	BIT(3),
+	IGC_FILTER_FLAG_USER_DATA =	BIT(4),
+	IGC_FILTER_FLAG_VLAN_ETYPE =	BIT(5),
 };
 
 struct igc_nfc_filter {
 	u8 match_flags;
 	u16 etype;
+	__be16 vlan_etype;
 	u16 vlan_tci;
 	u8 src_addr[ETH_ALEN];
 	u8 dst_addr[ETH_ALEN];
+	u8 user_data[8];
+	u8 user_mask[8];
+	u8 flex_index;
+	u8 rx_queue;
+	u8 prio;
+	u8 immediate_irq;
+	u8 drop;
 };
 
 struct igc_nfc_rule {
@@ -459,10 +469,10 @@ struct igc_nfc_rule {
 	u16 action;
 };
 
-/* IGC supports a total of 32 NFC rules: 16 MAC address based,, 8 VLAN priority
- * based, and 8 ethertype based.
+/* IGC supports a total of 32 NFC rules: 16 MAC address based, 8 VLAN priority
+ * based, 8 ethertype based and 32 Flex filter based rules.
  */
-#define IGC_MAX_RXNFC_RULES		32
+#define IGC_MAX_RXNFC_RULES		64
 
 /* igc_desc_unused - calculate if we have unused descriptors */
 static inline u16 igc_desc_unused(const struct igc_ring *ring)
* Unmerged path drivers/net/ethernet/intel/igc/igc_defines.h
diff --git a/drivers/net/ethernet/intel/igc/igc_ethtool.c b/drivers/net/ethernet/intel/igc/igc_ethtool.c
index b2da4d20a439..5788db8007bf 100644
--- a/drivers/net/ethernet/intel/igc/igc_ethtool.c
+++ b/drivers/net/ethernet/intel/igc/igc_ethtool.c
@@ -981,6 +981,12 @@ static int igc_ethtool_get_nfc_rule(struct igc_adapter *adapter,
 		eth_broadcast_addr(fsp->m_u.ether_spec.h_source);
 	}
 
+	if (rule->filter.match_flags & IGC_FILTER_FLAG_USER_DATA) {
+		fsp->flow_type |= FLOW_EXT;
+		memcpy(fsp->h_ext.data, rule->filter.user_data, sizeof(fsp->h_ext.data));
+		memcpy(fsp->m_ext.data, rule->filter.user_mask, sizeof(fsp->m_ext.data));
+	}
+
 	mutex_unlock(&adapter->nfc_rule_lock);
 	return 0;
 
@@ -1217,6 +1223,20 @@ static void igc_ethtool_init_nfc_rule(struct igc_nfc_rule *rule,
 		ether_addr_copy(rule->filter.dst_addr,
 				fsp->h_u.ether_spec.h_dest);
 	}
+
+	/* Check for user defined data */
+	if ((fsp->flow_type & FLOW_EXT) &&
+	    (fsp->h_ext.data[0] || fsp->h_ext.data[1])) {
+		rule->filter.match_flags |= IGC_FILTER_FLAG_USER_DATA;
+		memcpy(rule->filter.user_data, fsp->h_ext.data, sizeof(fsp->h_ext.data));
+		memcpy(rule->filter.user_mask, fsp->m_ext.data, sizeof(fsp->m_ext.data));
+
+		/* VLAN etype matching is only valid using flex filter */
+		if ((fsp->flow_type & FLOW_EXT) && fsp->h_ext.vlan_etype) {
+			rule->filter.vlan_etype = fsp->h_ext.vlan_etype;
+			rule->filter.match_flags |= IGC_FILTER_FLAG_VLAN_ETYPE;
+		}
+	}
 }
 
 /**
* Unmerged path drivers/net/ethernet/intel/igc/igc_main.c
