drm/i915: split irq hotplug function from display vtable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Dave Airlie <airlied@redhat.com>
commit de1677c5e32ace87ca69861dc32115e824af3278
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/de1677c5.failed

This provide a service from irq to display, so make it separate

	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
	Signed-off-by: Dave Airlie <airlied@redhat.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/05f533064709764dff8bcfef6a58f9a8482dc5bb.1632869550.git.jani.nikula@intel.com
(cherry picked from commit de1677c5e32ace87ca69861dc32115e824af3278)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_drv.h
#	drivers/gpu/drm/i915/i915_irq.c
diff --cc drivers/gpu/drm/i915/i915_drv.h
index 6638c0aec2d4,58db1e2789e2..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -330,33 -364,56 +330,66 @@@ struct drm_i915_display_funcs 
  	void (*read_luts)(struct intel_crtc_state *crtc_state);
  };
  
 -struct intel_audio_funcs {
 -	void (*audio_codec_enable)(struct intel_encoder *encoder,
 -				   const struct intel_crtc_state *crtc_state,
 -				   const struct drm_connector_state *conn_state);
 -	void (*audio_codec_disable)(struct intel_encoder *encoder,
 -				    const struct intel_crtc_state *old_crtc_state,
 -				    const struct drm_connector_state *old_conn_state);
 +struct intel_csr {
 +	struct work_struct work;
 +	const char *fw_path;
 +	u32 required_version;
 +	u32 max_fw_size; /* bytes */
 +	u32 *dmc_payload;
 +	u32 dmc_fw_size; /* dwords */
 +	u32 version;
 +	u32 mmio_count;
 +	i915_reg_t mmioaddr[20];
 +	u32 mmiodata[20];
 +	u32 dc_state;
 +	u32 target_dc_state;
 +	u32 allowed_dc_mask;
 +	intel_wakeref_t wakeref;
  };
  
 -struct intel_cdclk_funcs {
 -	void (*get_cdclk)(struct drm_i915_private *dev_priv,
 -			  struct intel_cdclk_config *cdclk_config);
 -	void (*set_cdclk)(struct drm_i915_private *dev_priv,
 -			  const struct intel_cdclk_config *cdclk_config,
 -			  enum pipe pipe);
 -	int (*bw_calc_min_cdclk)(struct intel_atomic_state *state);
 -	int (*modeset_calc_cdclk)(struct intel_cdclk_state *state);
 -	u8 (*calc_voltage_level)(int cdclk);
 +enum i915_cache_level {
 +	I915_CACHE_NONE = 0,
 +	I915_CACHE_LLC, /* also used for snoopable memory on non-LLC */
 +	I915_CACHE_L3_LLC, /* gen7+, L3 sits between the domain specifc
 +			      caches, eg sampler/render caches, and the
 +			      large Last-Level-Cache. LLC is coherent with
 +			      the CPU, but L3 is only visible to the GPU. */
 +	I915_CACHE_WT, /* hsw:gt3e WriteThrough for scanouts */
  };
  
++<<<<<<< HEAD
++=======
+ struct intel_hotplug_funcs {
+ 	void (*hpd_irq_setup)(struct drm_i915_private *dev_priv);
+ };
+ 
+ struct drm_i915_display_funcs {
+ 	/* Returns the active state of the crtc, and if the crtc is active,
+ 	 * fills out the pipe-config with the hw state. */
+ 	bool (*get_pipe_config)(struct intel_crtc *,
+ 				struct intel_crtc_state *);
+ 	void (*get_initial_plane_config)(struct intel_crtc *,
+ 					 struct intel_initial_plane_config *);
+ 	int (*crtc_compute_clock)(struct intel_crtc_state *crtc_state);
+ 	void (*crtc_enable)(struct intel_atomic_state *state,
+ 			    struct intel_crtc *crtc);
+ 	void (*crtc_disable)(struct intel_atomic_state *state,
+ 			     struct intel_crtc *crtc);
+ 	void (*commit_modeset_enables)(struct intel_atomic_state *state);
+ 	void (*commit_modeset_disables)(struct intel_atomic_state *state);
+ 
+ 	void (*fdi_link_train)(struct intel_crtc *crtc,
+ 			       const struct intel_crtc_state *crtc_state);
+ 
+ 	/* clock updates for mode set */
+ 	/* cursor updates */
+ 	/* render clock increase/decrease */
+ 	/* display clock increase/decrease */
+ 	/* pll clock increase/decrease */
+ };
+ 
+ 
++>>>>>>> de1677c5e32a (drm/i915: split irq hotplug function from display vtable)
  #define I915_COLOR_UNEVICTABLE (-1) /* a non-vma sharing the address space */
  
  struct intel_fbc {
@@@ -962,6 -976,15 +995,18 @@@ struct drm_i915_private 
  	/* unbound hipri wq for page flips/plane updates */
  	struct workqueue_struct *flip_wq;
  
++<<<<<<< HEAD
++=======
+ 	/* pm private clock gating functions */
+ 	struct drm_i915_clock_gating_funcs clock_gating_funcs;
+ 
+ 	/* pm display functions */
+ 	struct drm_i915_wm_disp_funcs wm_disp;
+ 
+ 	/* irq display functions */
+ 	struct intel_hotplug_funcs hotplug_funcs;
+ 
++>>>>>>> de1677c5e32a (drm/i915: split irq hotplug function from display vtable)
  	/* Display functions */
  	struct drm_i915_display_funcs display;
  
diff --cc drivers/gpu/drm/i915/i915_irq.c
index a2ed64c52594,c35065f8f429..000000000000
--- a/drivers/gpu/drm/i915/i915_irq.c
+++ b/drivers/gpu/drm/i915/i915_irq.c
@@@ -4278,20 -4395,20 +4278,28 @@@ void intel_irq_init(struct drm_i915_pri
  
  	if (HAS_GMCH(dev_priv)) {
  		if (I915_HAS_HOTPLUG(dev_priv))
- 			dev_priv->display.hpd_irq_setup = i915_hpd_irq_setup;
+ 			dev_priv->hotplug_funcs.hpd_irq_setup = i915_hpd_irq_setup;
  	} else {
  		if (HAS_PCH_DG1(dev_priv))
++<<<<<<< HEAD
 +			dev_priv->display.hpd_irq_setup = dg1_hpd_irq_setup;
 +		else if (INTEL_GEN(dev_priv) >= 11)
 +			dev_priv->display.hpd_irq_setup = gen11_hpd_irq_setup;
 +		else if (IS_GEN9_LP(dev_priv))
 +			dev_priv->display.hpd_irq_setup = bxt_hpd_irq_setup;
++=======
+ 			dev_priv->hotplug_funcs.hpd_irq_setup = dg1_hpd_irq_setup;
+ 		else if (DISPLAY_VER(dev_priv) >= 11)
+ 			dev_priv->hotplug_funcs.hpd_irq_setup = gen11_hpd_irq_setup;
+ 		else if (IS_GEMINILAKE(dev_priv) || IS_BROXTON(dev_priv))
+ 			dev_priv->hotplug_funcs.hpd_irq_setup = bxt_hpd_irq_setup;
++>>>>>>> de1677c5e32a (drm/i915: split irq hotplug function from display vtable)
  		else if (INTEL_PCH_TYPE(dev_priv) >= PCH_ICP)
- 			dev_priv->display.hpd_irq_setup = icp_hpd_irq_setup;
+ 			dev_priv->hotplug_funcs.hpd_irq_setup = icp_hpd_irq_setup;
  		else if (INTEL_PCH_TYPE(dev_priv) >= PCH_SPT)
- 			dev_priv->display.hpd_irq_setup = spt_hpd_irq_setup;
+ 			dev_priv->hotplug_funcs.hpd_irq_setup = spt_hpd_irq_setup;
  		else
- 			dev_priv->display.hpd_irq_setup = ilk_hpd_irq_setup;
+ 			dev_priv->hotplug_funcs.hpd_irq_setup = ilk_hpd_irq_setup;
  	}
  }
  
diff --git a/drivers/gpu/drm/i915/display/intel_hotplug.c b/drivers/gpu/drm/i915/display/intel_hotplug.c
index f46a1b7190b8..bd011ea72d45 100644
--- a/drivers/gpu/drm/i915/display/intel_hotplug.c
+++ b/drivers/gpu/drm/i915/display/intel_hotplug.c
@@ -215,8 +215,8 @@ intel_hpd_irq_storm_switch_to_polling(struct drm_i915_private *dev_priv)
 
 static void intel_hpd_irq_setup(struct drm_i915_private *i915)
 {
-	if (i915->display_irqs_enabled && i915->display.hpd_irq_setup)
-		i915->display.hpd_irq_setup(i915);
+	if (i915->display_irqs_enabled && i915->hotplug_funcs.hpd_irq_setup)
+		i915->hotplug_funcs.hpd_irq_setup(i915);
 }
 
 static void intel_hpd_irq_storm_reenable_work(struct work_struct *work)
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
* Unmerged path drivers/gpu/drm/i915/i915_irq.c
