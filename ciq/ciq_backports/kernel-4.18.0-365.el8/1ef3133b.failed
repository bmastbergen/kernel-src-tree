kasan: simplify assign_tag and set_tag calls

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit 1ef3133bd3b8627a99af2535a923a488563737a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/1ef3133b.failed

set_tag() already ignores the tag for the generic mode, so just call it
as is. Add a check for the generic mode to assign_tag(), and simplify its
call in ____kasan_kmalloc().

Link: https://lkml.kernel.org/r/121eeab245f98555862b289d2ba9269c868fbbcf.1606162397.git.andreyknvl@google.com
Link: https://linux-review.googlesource.com/id/I18905ca78fb4a3d60e1a34a4ca00247272480438
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1ef3133bd3b8627a99af2535a923a488563737a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/common.c
diff --cc mm/kasan/common.c
index e989322c0f3f,17b22107f8eb..000000000000
--- a/mm/kasan/common.c
+++ b/mm/kasan/common.c
@@@ -370,20 -265,21 +373,25 @@@ static u8 assign_tag(struct kmem_cache 
  #endif
  }
  
 -void * __must_check __kasan_init_slab_obj(struct kmem_cache *cache,
 +void * __must_check kasan_init_slab_obj(struct kmem_cache *cache,
  						const void *object)
  {
 -	struct kasan_alloc_meta *alloc_meta;
 +	struct kasan_alloc_meta *alloc_info;
  
 -	if (kasan_stack_collection_enabled()) {
 -		if (!(cache->flags & SLAB_KASAN))
 -			return (void *)object;
 +	if (!(cache->flags & SLAB_KASAN))
 +		return (void *)object;
  
 -		alloc_meta = kasan_get_alloc_meta(cache, object);
 -		__memset(alloc_meta, 0, sizeof(*alloc_meta));
 -	}
 +	alloc_info = get_alloc_info(cache, object);
 +	__memset(alloc_info, 0, sizeof(*alloc_info));
  
++<<<<<<< HEAD
 +	if (IS_ENABLED(CONFIG_KASAN_SW_TAGS))
 +		object = set_tag(object,
 +				assign_tag(cache, object, true, false));
++=======
+ 	/* Tag is ignored in set_tag() without CONFIG_KASAN_SW/HW_TAGS */
+ 	object = set_tag(object, assign_tag(cache, object, true, false));
++>>>>>>> 1ef3133bd3b8 (kasan: simplify assign_tag and set_tag calls)
  
  	return (void *)object;
  }
@@@ -464,20 -372,18 +472,25 @@@ static void *__kasan_kmalloc(struct kme
  		return NULL;
  
  	redzone_start = round_up((unsigned long)(object + size),
 -				KASAN_GRANULE_SIZE);
 +				KASAN_SHADOW_SCALE_SIZE);
  	redzone_end = round_up((unsigned long)object + cache->object_size,
++<<<<<<< HEAD
 +				KASAN_SHADOW_SCALE_SIZE);
 +
 +	if (IS_ENABLED(CONFIG_KASAN_SW_TAGS))
 +		tag = assign_tag(cache, object, false, keep_tag);
++=======
+ 				KASAN_GRANULE_SIZE);
+ 	tag = assign_tag(cache, object, false, keep_tag);
++>>>>>>> 1ef3133bd3b8 (kasan: simplify assign_tag and set_tag calls)
  
 -	/* Tag is ignored in set_tag without CONFIG_KASAN_SW/HW_TAGS */
 -	unpoison_range(set_tag(object, tag), size);
 -	poison_range((void *)redzone_start, redzone_end - redzone_start,
 -		     KASAN_KMALLOC_REDZONE);
 +	/* Tag is ignored in set_tag without CONFIG_KASAN_SW_TAGS */
 +	kasan_unpoison_shadow(set_tag(object, tag), size);
 +	kasan_poison_shadow((void *)redzone_start, redzone_end - redzone_start,
 +		KASAN_KMALLOC_REDZONE);
  
 -	if (kasan_stack_collection_enabled() && (cache->flags & SLAB_KASAN))
 -		set_alloc_info(cache, (void *)object, flags);
 +	if (cache->flags & SLAB_KASAN)
 +		kasan_set_track(&get_alloc_info(cache, object)->alloc_track, flags);
  
  	return set_tag(object, tag);
  }
* Unmerged path mm/kasan/common.c
