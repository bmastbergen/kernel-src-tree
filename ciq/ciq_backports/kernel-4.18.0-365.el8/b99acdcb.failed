kasan: make addr_has_metadata() return true for valid addresses

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Vincenzo Frascino <vincenzo.frascino@arm.com>
commit b99acdcbfe3c8394ddd8b8d89d9bae2bbba4a459
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/b99acdcb.failed

Currently, addr_has_metadata() returns true for every address.  An
invalid address (e.g.  NULL) passed to the function when, KASAN_HW_TAGS
is enabled, leads to a kernel panic.

Make addr_has_metadata() return true for valid addresses only.

Note: KASAN_HW_TAGS support for vmalloc will be added with a future
patch.

Link: https://lkml.kernel.org/r/20210126134409.47894-3-vincenzo.frascino@arm.com
Fixes: 2e903b91479782b7 ("kasan, arm64: implement HW_TAGS runtime")
	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Reviewed-by: Andrey Konovalov <andreyknvl@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Leon Romanovsky <leonro@mellanox.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Naresh Kamboju <naresh.kamboju@linaro.org>
	Cc: "Paul E . McKenney" <paulmck@kernel.org>
	Cc: Will Deacon <will@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b99acdcbfe3c8394ddd8b8d89d9bae2bbba4a459)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/kasan.h
diff --cc mm/kasan/kasan.h
index 2db4c5c1b473,8c706e7652f2..000000000000
--- a/mm/kasan/kasan.h
+++ b/mm/kasan/kasan.h
@@@ -163,8 -205,30 +163,26 @@@ void kasan_poison_shadow(const void *ad
  bool check_memory_region(unsigned long addr, size_t size, bool write,
  				unsigned long ret_ip);
  
++<<<<<<< HEAD
++=======
+ #else /* CONFIG_KASAN_GENERIC || CONFIG_KASAN_SW_TAGS */
+ 
+ static inline bool addr_has_metadata(const void *addr)
+ {
+ 	return (is_vmalloc_addr(addr) || virt_addr_valid(addr));
+ }
+ 
+ #endif /* CONFIG_KASAN_GENERIC || CONFIG_KASAN_SW_TAGS */
+ 
+ #if defined(CONFIG_KASAN_SW_TAGS) || defined(CONFIG_KASAN_HW_TAGS)
+ void print_tags(u8 addr_tag, const void *addr);
+ #else
+ static inline void print_tags(u8 addr_tag, const void *addr) { }
+ #endif
+ 
++>>>>>>> b99acdcbfe3c (kasan: make addr_has_metadata() return true for valid addresses)
  void *find_first_bad_addr(void *addr, size_t size);
  const char *get_bug_type(struct kasan_access_info *info);
 -void metadata_fetch_row(char *buffer, void *row);
 -
 -#if defined(CONFIG_KASAN_GENERIC) && CONFIG_KASAN_STACK
 -void print_address_stack_frame(const void *addr);
 -#else
 -static inline void print_address_stack_frame(const void *addr) { }
 -#endif
  
  bool kasan_report(unsigned long addr, size_t size,
  		bool is_write, unsigned long ip);
* Unmerged path mm/kasan/kasan.h
