net: Add priv_flags for allow tx skb without linear

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Xuan Zhuo <xuanzhuo@linux.alibaba.com>
commit c2ff53d8049f30098153cd2d1299a44d7b124c57
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/c2ff53d8.failed

In some cases, we hope to construct skb directly based on the existing
memory without copying data. In this case, the page will be placed
directly in the skb, and the linear space of skb is empty. But
unfortunately, many the network card does not support this operation.
For example Mellanox Technologies MT27710 Family [ConnectX-4 Lx] will
get the following error message:

    mlx5_core 0000:3b:00.1 eth1: Error cqe on cqn 0x817, ci 0x8,
    qn 0x1dbb, opcode 0xd, syndrome 0x1, vendor syndrome 0x68
    00000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00000030: 00 00 00 00 60 10 68 01 0a 00 1d bb 00 0f 9f d2
    WQE DUMP: WQ size 1024 WQ cur size 0, WQE index 0xf, len: 64
    00000000: 00 00 0f 0a 00 1d bb 03 00 00 00 08 00 00 00 00
    00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    00000020: 00 00 00 2b 00 08 00 00 00 00 00 05 9e e3 08 00
    00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    mlx5_core 0000:3b:00.1 eth1: ERR CQE on SQ: 0x1dbb

So a priv_flag is added here to indicate whether the network card
supports this feature.

	Suggested-by: Alexander Lobakin <alobakin@pm.me>
	Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
	Signed-off-by: Alexander Lobakin <alobakin@pm.me>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20210218204908.5455-3-alobakin@pm.me
(cherry picked from commit c2ff53d8049f30098153cd2d1299a44d7b124c57)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index dd2ac5682ea7,6cef47b76cc6..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1646,6 -1517,9 +1646,12 @@@ struct net_device_ops 
   * @IFF_FAILOVER: device is a failover master device
   * @IFF_FAILOVER_SLAVE: device is lower dev of a failover master device
   * @IFF_L3MDEV_RX_HANDLER: only invoke the rx handler of L3 master device
++<<<<<<< HEAD
++=======
+  * @IFF_LIVE_RENAME_OK: rename is allowed while device is up and running
+  * @IFF_TX_SKB_NO_LINEAR: device/driver is capable of xmitting frames with
+  *	skb_headlen(skb) == 0 (data starts from frag0)
++>>>>>>> c2ff53d8049f (net: Add priv_flags for allow tx skb without linear)
   */
  enum netdev_priv_flags {
  	IFF_802_1Q_VLAN			= 1<<0,
@@@ -1678,6 -1552,8 +1684,11 @@@
  	IFF_FAILOVER			= 1<<27,
  	IFF_FAILOVER_SLAVE		= 1<<28,
  	IFF_L3MDEV_RX_HANDLER		= 1<<29,
++<<<<<<< HEAD
++=======
+ 	IFF_LIVE_RENAME_OK		= 1<<30,
+ 	IFF_TX_SKB_NO_LINEAR		= 1<<31,
++>>>>>>> c2ff53d8049f (net: Add priv_flags for allow tx skb without linear)
  };
  
  #define IFF_802_1Q_VLAN			IFF_802_1Q_VLAN
@@@ -1710,9 -1586,8 +1721,14 @@@
  #define IFF_FAILOVER			IFF_FAILOVER
  #define IFF_FAILOVER_SLAVE		IFF_FAILOVER_SLAVE
  #define IFF_L3MDEV_RX_HANDLER		IFF_L3MDEV_RX_HANDLER
++<<<<<<< HEAD
 +
 +struct net_device_extended_rh {
 +};
++=======
+ #define IFF_LIVE_RENAME_OK		IFF_LIVE_RENAME_OK
+ #define IFF_TX_SKB_NO_LINEAR		IFF_TX_SKB_NO_LINEAR
++>>>>>>> c2ff53d8049f (net: Add priv_flags for allow tx skb without linear)
  
  /**
   *	struct net_device - The DEVICE structure.
* Unmerged path include/linux/netdevice.h
