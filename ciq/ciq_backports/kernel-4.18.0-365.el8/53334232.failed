skmsg: Get rid of sk_psock_bpf_run()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Cong Wang <cong.wang@bytedance.com>
commit 533342322276b06b4db260c413ce907238851e9b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/53334232.failed

It is now nearly identical to bpf_prog_run_pin_on_cpu() and
it has an unused parameter 'psock', so we can just get rid
of it and call bpf_prog_run_pin_on_cpu() directly.

	Signed-off-by: Cong Wang <cong.wang@bytedance.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
Link: https://lore.kernel.org/bpf/20210223184934.6054-9-xiyou.wangcong@gmail.com
(cherry picked from commit 533342322276b06b4db260c413ce907238851e9b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/skmsg.c
diff --cc net/core/skmsg.c
index c39c0a361217,07f54015238a..000000000000
--- a/net/core/skmsg.c
+++ b/net/core/skmsg.c
@@@ -744,20 -749,6 +744,23 @@@ out
  }
  EXPORT_SYMBOL_GPL(sk_psock_msg_verdict);
  
++<<<<<<< HEAD
 +static int sk_psock_bpf_run(struct sk_psock *psock, struct bpf_prog *prog,
 +			    struct sk_buff *skb)
 +{
 +	return bpf_prog_run_pin_on_cpu(prog, skb);
 +}
 +
 +static struct sk_psock *sk_psock_from_strp(struct strparser *strp)
 +{
 +	struct sk_psock_parser *parser;
 +
 +	parser = container_of(strp, struct sk_psock_parser, strp);
 +	return container_of(parser, struct sk_psock, parser);
 +}
 +
++=======
++>>>>>>> 533342322276 (skmsg: Get rid of sk_psock_bpf_run())
  static void sk_psock_skb_redirect(struct sk_buff *skb)
  {
  	struct sk_psock *psock_other;
@@@ -805,12 -797,17 +808,19 @@@ int sk_psock_tls_strp_read(struct sk_ps
  	int ret = __SK_PASS;
  
  	rcu_read_lock();
 -	prog = READ_ONCE(psock->progs.stream_verdict);
 +	prog = READ_ONCE(psock->progs.skb_verdict);
  	if (likely(prog)) {
 -		/* We skip full set_owner_r here because if we do a SK_PASS
 -		 * or SK_DROP we can skip skb memory accounting and use the
 -		 * TLS context.
 -		 */
  		skb->sk = psock->sk;
++<<<<<<< HEAD
 +		tcp_skb_bpf_redirect_clear(skb);
 +		ret = sk_psock_bpf_run(psock, prog, skb);
 +		ret = sk_psock_map_verd(ret, tcp_skb_bpf_redirect_fetch(skb));
++=======
+ 		skb_dst_drop(skb);
+ 		skb_bpf_redirect_clear(skb);
+ 		ret = bpf_prog_run_pin_on_cpu(prog, skb);
+ 		ret = sk_psock_map_verd(ret, skb_bpf_redirect_fetch(skb));
++>>>>>>> 533342322276 (skmsg: Get rid of sk_psock_bpf_run())
  		skb->sk = NULL;
  	}
  	sk_psock_tls_verdict_apply(skb, psock->sk, ret);
@@@ -876,13 -888,13 +886,20 @@@ static void sk_psock_strp_read(struct s
  		kfree_skb(skb);
  		goto out;
  	}
 -	skb_set_owner_r(skb, sk);
 -	prog = READ_ONCE(psock->progs.stream_verdict);
 +	prog = READ_ONCE(psock->progs.skb_verdict);
  	if (likely(prog)) {
++<<<<<<< HEAD
 +		skb->sk = sk;
 +		tcp_skb_bpf_redirect_clear(skb);
 +		ret = sk_psock_bpf_run(psock, prog, skb);
 +		ret = sk_psock_map_verd(ret, tcp_skb_bpf_redirect_fetch(skb));
 +		skb->sk = NULL;
++=======
+ 		skb_dst_drop(skb);
+ 		skb_bpf_redirect_clear(skb);
+ 		ret = bpf_prog_run_pin_on_cpu(prog, skb);
+ 		ret = sk_psock_map_verd(ret, skb_bpf_redirect_fetch(skb));
++>>>>>>> 533342322276 (skmsg: Get rid of sk_psock_bpf_run())
  	}
  	sk_psock_verdict_apply(psock, skb, ret);
  out:
@@@ -901,10 -913,10 +918,10 @@@ static int sk_psock_strp_parse(struct s
  	int ret = skb->len;
  
  	rcu_read_lock();
 -	prog = READ_ONCE(psock->progs.stream_parser);
 +	prog = READ_ONCE(psock->progs.skb_parser);
  	if (likely(prog)) {
  		skb->sk = psock->sk;
- 		ret = sk_psock_bpf_run(psock, prog, skb);
+ 		ret = bpf_prog_run_pin_on_cpu(prog, skb);
  		skb->sk = NULL;
  	}
  	rcu_read_unlock();
@@@ -953,13 -1008,13 +970,20 @@@ static int sk_psock_verdict_recv(read_d
  		kfree_skb(skb);
  		goto out;
  	}
 -	skb_set_owner_r(skb, sk);
 -	prog = READ_ONCE(psock->progs.stream_verdict);
 +	prog = READ_ONCE(psock->progs.skb_verdict);
  	if (likely(prog)) {
++<<<<<<< HEAD
 +		skb->sk = sk;
 +		tcp_skb_bpf_redirect_clear(skb);
 +		ret = sk_psock_bpf_run(psock, prog, skb);
 +		ret = sk_psock_map_verd(ret, tcp_skb_bpf_redirect_fetch(skb));
 +		skb->sk = NULL;
++=======
+ 		skb_dst_drop(skb);
+ 		skb_bpf_redirect_clear(skb);
+ 		ret = bpf_prog_run_pin_on_cpu(prog, skb);
+ 		ret = sk_psock_map_verd(ret, skb_bpf_redirect_fetch(skb));
++>>>>>>> 533342322276 (skmsg: Get rid of sk_psock_bpf_run())
  	}
  	sk_psock_verdict_apply(psock, skb, ret);
  out:
* Unmerged path net/core/skmsg.c
