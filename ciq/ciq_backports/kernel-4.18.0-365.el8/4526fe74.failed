drivers: net: mhi: fix error path in mhi_net_newlink

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Daniele Palmas <dnlplm@gmail.com>
commit 4526fe74c3c5095cc55931a3a6fb4932f9e06002
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/4526fe74.failed

Fix double free_netdev when mhi_prepare_for_transfer fails.

Fixes: 3ffec6a14f24 ("net: Add mhi-net driver")
	Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
	Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
	Reviewed-by: Loic Poulain <loic.poulain@linaro.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4526fe74c3c5095cc55931a3a6fb4932f9e06002)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/mhi/net.c
diff --cc drivers/net/mhi/net.c
index 4ca3107abaf4,aaa628f859fd..000000000000
--- a/drivers/net/mhi/net.c
+++ b/drivers/net/mhi/net.c
@@@ -343,38 -326,18 +343,41 @@@ static int mhi_net_newlink(void *ctxt, 
  	/* Number of transfer descriptors determines size of the queue */
  	mhi_netdev->rx_queue_sz = mhi_get_free_desc_count(mhi_dev, DMA_FROM_DEVICE);
  
 -	err = register_netdev(ndev);
 +	if (extack)
 +		err = register_netdevice(ndev);
 +	else
 +		err = register_netdev(ndev);
  	if (err)
 -		return err;
 +		goto out_err;
 +
 +	if (mhi_netdev->proto) {
 +		err = mhi_netdev->proto->init(mhi_netdev);
 +		if (err)
 +			goto out_err_proto;
 +	}
  
  	return 0;
++<<<<<<< HEAD:drivers/net/mhi/net.c
 +
 +out_err_proto:
 +	unregister_netdevice(ndev);
 +out_err:
 +	free_netdev(ndev);
 +	return err;
++=======
++>>>>>>> 4526fe74c3c5 (drivers: net: mhi: fix error path in mhi_net_newlink):drivers/net/mhi_net.c
  }
  
 -static void mhi_net_dellink(struct mhi_device *mhi_dev, struct net_device *ndev)
 +static void mhi_net_dellink(void *ctxt, struct net_device *ndev,
 +			    struct list_head *head)
  {
  	struct mhi_net_dev *mhi_netdev = netdev_priv(ndev);
 +	struct mhi_device *mhi_dev = ctxt;
  
 -	unregister_netdev(ndev);
 +	if (head)
 +		unregister_netdevice_queue(ndev, head);
 +	else
 +		unregister_netdev(ndev);
  
  	mhi_unprepare_from_transfer(mhi_dev);
  
* Unmerged path drivers/net/mhi/net.c
