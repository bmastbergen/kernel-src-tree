of/device: Update dma_range_map only when dev has valid dma-ranges

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Yong Wu <yong.wu@mediatek.com>
commit 89c7cb1608ac3c7ecc19436469f35ed12da97e1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/89c7cb16.failed

The commit e0d072782c73 ("dma-mapping: introduce DMA range map,
supplanting dma_pfn_offset") always update dma_range_map even though it was
already set, like in the sunxi_mbus driver. the issue is reported at [1].
This patch avoid this(Updating it only when dev has valid dma-ranges).

Meanwhile, dma_range_map contains the devices' dma_ranges information,
This patch moves dma_range_map before of_iommu_configure. The iommu
driver may need to know the dma_address requirements of its iommu
consumer devices.

[1] https://lore.kernel.org/linux-arm-kernel/5c7946f3-b56e-da00-a750-be097c7ceb32@arm.com/

CC: Frank Rowand <frowand.list@gmail.com>
Fixes: e0d072782c73 ("dma-mapping: introduce DMA range map, supplanting dma_pfn_offset"),
	Suggested-by: Robin Murphy <robin.murphy@arm.com>
	Signed-off-by: Yong Wu <yong.wu@mediatek.com>
	Signed-off-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
	Reviewed-by: Rob Herring <robh@kernel.org>
	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
	Signed-off-by: Rob Herring <robh@kernel.org>
Link: https://lore.kernel.org/r/20210119105203.15530-1-yong.wu@mediatek.com
(cherry picked from commit 89c7cb1608ac3c7ecc19436469f35ed12da97e1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/of/device.c
diff --cc drivers/of/device.c
index f137835e2a84,1122daa8e273..000000000000
--- a/drivers/of/device.c
+++ b/drivers/of/device.c
@@@ -162,10 -172,14 +164,18 @@@ int of_dma_configure_id(struct device *
  	dev_dbg(dev, "device is%sdma coherent\n",
  		coherent ? " " : " not ");
  
 +
  	iommu = of_iommu_configure(dev, np, id);
++<<<<<<< HEAD
 +	if (IS_ERR(iommu) && PTR_ERR(iommu) == -EPROBE_DEFER)
++=======
+ 	if (PTR_ERR(iommu) == -EPROBE_DEFER) {
+ 		/* Don't touch range map if it wasn't set from a valid dma-ranges */
+ 		if (!ret)
+ 			dev->dma_range_map = NULL;
+ 		kfree(map);
++>>>>>>> 89c7cb1608ac (of/device: Update dma_range_map only when dev has valid dma-ranges)
  		return -EPROBE_DEFER;
 -	}
  
  	dev_dbg(dev, "device is%sbehind an iommu\n",
  		iommu ? " " : " not ");
* Unmerged path drivers/of/device.c
