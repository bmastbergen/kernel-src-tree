kasan: define KASAN_MEMORY_PER_SHADOW_PAGE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit affc3f07759cfdcb1ffd87f2847b1c27d8781d65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/affc3f07.failed

Define KASAN_MEMORY_PER_SHADOW_PAGE as (KASAN_GRANULE_SIZE << PAGE_SHIFT),
which is the same as (KASAN_GRANULE_SIZE * PAGE_SIZE) for software modes
that use shadow memory, and use it across KASAN code to simplify it.

Link: https://lkml.kernel.org/r/8329391cfe14b5cffd3decf3b5c535b6ce21eef6.1606161801.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Reviewed-by: Marco Elver <elver@google.com>
	Reviewed-by: Alexander Potapenko <glider@google.com>
	Tested-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Branislav Rankov <Branislav.Rankov@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Evgenii Stepanov <eugenis@google.com>
	Cc: Kevin Brodsky <kevin.brodsky@arm.com>
	Cc: Vasily Gorbik <gor@linux.ibm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit affc3f07759cfdcb1ffd87f2847b1c27d8781d65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/init.c
#	mm/kasan/shadow.c
diff --cc mm/kasan/init.c
index 004ce0a28c99,bc0ad208b3a7..000000000000
--- a/mm/kasan/init.c
+++ b/mm/kasan/init.c
@@@ -455,9 -441,8 +455,14 @@@ void kasan_remove_zero_shadow(void *sta
  	addr = (unsigned long)kasan_mem_to_shadow(start);
  	end = addr + (size >> KASAN_SHADOW_SCALE_SHIFT);
  
++<<<<<<< HEAD
 +	if (WARN_ON((unsigned long)start %
 +			(KASAN_SHADOW_SCALE_SIZE * PAGE_SIZE)) ||
 +	    WARN_ON(size % (KASAN_SHADOW_SCALE_SIZE * PAGE_SIZE)))
++=======
+ 	if (WARN_ON((unsigned long)start % KASAN_MEMORY_PER_SHADOW_PAGE) ||
+ 	    WARN_ON(size % KASAN_MEMORY_PER_SHADOW_PAGE))
++>>>>>>> affc3f07759c (kasan: define KASAN_MEMORY_PER_SHADOW_PAGE)
  		return;
  
  	for (; addr < end; addr = next) {
@@@ -491,9 -475,8 +496,14 @@@ int kasan_add_zero_shadow(void *start, 
  	shadow_start = kasan_mem_to_shadow(start);
  	shadow_end = shadow_start + (size >> KASAN_SHADOW_SCALE_SHIFT);
  
++<<<<<<< HEAD
 +	if (WARN_ON((unsigned long)start %
 +			(KASAN_SHADOW_SCALE_SIZE * PAGE_SIZE)) ||
 +	    WARN_ON(size % (KASAN_SHADOW_SCALE_SIZE * PAGE_SIZE)))
++=======
+ 	if (WARN_ON((unsigned long)start % KASAN_MEMORY_PER_SHADOW_PAGE) ||
+ 	    WARN_ON(size % KASAN_MEMORY_PER_SHADOW_PAGE))
++>>>>>>> affc3f07759c (kasan: define KASAN_MEMORY_PER_SHADOW_PAGE)
  		return -EINVAL;
  
  	ret = kasan_populate_early_shadow(shadow_start, shadow_end);
* Unmerged path mm/kasan/shadow.c
* Unmerged path mm/kasan/init.c
diff --git a/mm/kasan/kasan.h b/mm/kasan/kasan.h
index ac499456740f..765592514436 100644
--- a/mm/kasan/kasan.h
+++ b/mm/kasan/kasan.h
@@ -8,6 +8,8 @@
 #define KASAN_SHADOW_SCALE_SIZE (1UL << KASAN_SHADOW_SCALE_SHIFT)
 #define KASAN_SHADOW_MASK       (KASAN_SHADOW_SCALE_SIZE - 1)
 
+#define KASAN_MEMORY_PER_SHADOW_PAGE	(KASAN_GRANULE_SIZE << PAGE_SHIFT)
+
 #define KASAN_TAG_KERNEL	0xFF /* native kernel pointers tag */
 #define KASAN_TAG_INVALID	0xFE /* inaccessible memory tag */
 #define KASAN_TAG_MAX		0xFD /* maximum value for random tags */
* Unmerged path mm/kasan/shadow.c
