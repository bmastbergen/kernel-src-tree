ARM: 8943/1: Fix topology setup in case of CPU hotplug for CONFIG_SCHED_MC

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Dietmar Eggemann <dietmar.eggemann@arm.com>
commit ff98a5f624d2910de050f1fc7f2a32769da86b51
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/ff98a5f6.failed

Commit ca74b316df96 ("arm: Use common cpu_topology structure and
functions.") changed cpu_coregroup_mask() from the ARM32 specific
implementation in arch/arm/include/asm/topology.h to the one shared
with ARM64 and RISCV in drivers/base/arch_topology.c.

Currently on ARM32 (TC2 w/ CONFIG_SCHED_MC) the task scheduler setup
code (w/ CONFIG_SCHED_DEBUG) shows this during CPU hotplug:

  ERROR: groups don't span domain->span

It happens to CPUs of the cluster of the CPU which gets hot-plugged
out on scheduler domain MC.

Turns out that the shared cpu_coregroup_mask() requires that the
hot-plugged CPU is removed from the core_sibling mask via
remove_cpu_topology(). Otherwise the 'is core_sibling subset of
cpumask_of_node()' doesn't work. In this case the task scheduler has to
deal with cpumask_of_node instead of core_sibling which is wrong on
scheduler domain MC.

e.g. CPU3 hot-plugged out on TC2 [cluster0: 0,3-4 cluster1: 1-2]:

  cpu_coregroup_mask(): CPU3 cpumask_of_node=0-2,4 core_sibling=0,3-4
                                                                  ^
should be:

  cpu_coregroup_mask(): CPU3 cpumask_of_node=0-2,4 core_sibling=0,4

Add remove_cpu_topology() to __cpu_disable() to remove the CPU from the
topology masks in case of a CPU hotplug out operation.

At the same time tweak store_cpu_topology() slightly so it will call
update_siblings_masks() in case of CPU hotplug in operation via
secondary_start_kernel()->smp_store_cpu_info().

This aligns the ARM32 implementation with the ARM64 one.

Guarding remove_cpu_topology() with CONFIG_GENERIC_ARCH_TOPOLOGY is
necessary since some Arm32 defconfigs (aspeed_g5_defconfig,
milbeaut_m10v_defconfig, spear13xx_defconfig) specify an explicit

 # CONFIG_ARM_CPU_TOPOLOGY is not set

w/ ./arch/arm/Kconfig: select GENERIC_ARCH_TOPOLOGY if ARM_CPU_TOPOLOGY

Fixes: ca74b316df96 ("arm: Use common cpu_topology structure and functions")
	Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
	Reviewed-by: Lukasz Luba <lukasz.luba@arm.com>
	Tested-by: Lukasz Luba <lukasz.luba@arm.com>
	Tested-by: Ondrej Jirman <megous@megous.com>
	Signed-off-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
	Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
(cherry picked from commit ff98a5f624d2910de050f1fc7f2a32769da86b51)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/kernel/topology.c
diff --cc arch/arm/kernel/topology.c
index d3d75c58832c,b5adaf744630..000000000000
--- a/arch/arm/kernel/topology.c
+++ b/arch/arm/kernel/topology.c
@@@ -236,12 -193,11 +236,11 @@@ static void update_siblings_masks(unsig
   */
  void store_cpu_topology(unsigned int cpuid)
  {
 -	struct cpu_topology *cpuid_topo = &cpu_topology[cpuid];
 +	struct cputopo_arm *cpuid_topo = &cpu_topology[cpuid];
  	unsigned int mpidr;
  
- 	/* If the cpu topology has been already set, just return */
- 	if (cpuid_topo->core_id != -1)
- 		return;
+ 	if (cpuid_topo->package_id != -1)
+ 		goto topology_populated;
  
  	mpidr = read_cpuid_mpidr();
  
@@@ -271,17 -227,18 +270,22 @@@
  		 */
  		cpuid_topo->thread_id = -1;
  		cpuid_topo->core_id = 0;
 -		cpuid_topo->package_id = -1;
 +		cpuid_topo->socket_id = -1;
  	}
  
- 	update_siblings_masks(cpuid);
- 
  	update_cpu_capacity(cpuid);
  
  	pr_info("CPU%u: thread %d, cpu %d, socket %d, mpidr %x\n",
  		cpuid, cpu_topology[cpuid].thread_id,
  		cpu_topology[cpuid].core_id,
++<<<<<<< HEAD
 +		cpu_topology[cpuid].socket_id, mpidr);
++=======
+ 		cpu_topology[cpuid].package_id, mpidr);
+ 
+ topology_populated:
+ 	update_siblings_masks(cpuid);
++>>>>>>> ff98a5f624d2 (ARM: 8943/1: Fix topology setup in case of CPU hotplug for CONFIG_SCHED_MC)
  }
  
  static inline int cpu_corepower_flags(void)
diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index f9e003f22ed0..3ee72472caf2 100644
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -216,6 +216,10 @@ int __cpu_disable(void)
 	if (ret)
 		return ret;
 
+#ifdef CONFIG_GENERIC_ARCH_TOPOLOGY
+	remove_cpu_topology(cpu);
+#endif
+
 	/*
 	 * Take this CPU offline.  Once we clear this, we can't return,
 	 * and we must not schedule until we're ready to give up the cpu.
* Unmerged path arch/arm/kernel/topology.c
