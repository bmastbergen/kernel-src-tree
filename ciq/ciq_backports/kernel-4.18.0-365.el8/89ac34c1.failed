drm/i915: split cdclk functions from display vtable.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Dave Airlie <airlied@redhat.com>
commit 89ac34c14d7e48bf8066e35a9b4886208c06c4d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/89ac34c1.failed

This moves all the cdclk related functions into their own vtable.

	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
	Signed-off-by: Dave Airlie <airlied@redhat.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/591b7b6a79c4ab644a161ae00b7d630b3ef16434.1632869550.git.jani.nikula@intel.com
(cherry picked from commit 89ac34c14d7e48bf8066e35a9b4886208c06c4d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_cdclk.c
#	drivers/gpu/drm/i915/i915_drv.h
diff --cc drivers/gpu/drm/i915/display/intel_cdclk.c
index 2e878cc274b7,cf0a865df596..000000000000
--- a/drivers/gpu/drm/i915/display/intel_cdclk.c
+++ b/drivers/gpu/drm/i915/display/intel_cdclk.c
@@@ -57,6 -59,37 +57,40 @@@
   * dividers can be programmed correctly.
   */
  
++<<<<<<< HEAD
++=======
+ void intel_cdclk_get_cdclk(struct drm_i915_private *dev_priv,
+ 			   struct intel_cdclk_config *cdclk_config)
+ {
+ 	dev_priv->cdclk_funcs.get_cdclk(dev_priv, cdclk_config);
+ }
+ 
+ int intel_cdclk_bw_calc_min_cdclk(struct intel_atomic_state *state)
+ {
+ 	struct drm_i915_private *dev_priv = to_i915(state->base.dev);
+ 	return dev_priv->cdclk_funcs.bw_calc_min_cdclk(state);
+ }
+ 
+ static void intel_cdclk_set_cdclk(struct drm_i915_private *dev_priv,
+ 				  const struct intel_cdclk_config *cdclk_config,
+ 				  enum pipe pipe)
+ {
+ 	dev_priv->cdclk_funcs.set_cdclk(dev_priv, cdclk_config, pipe);
+ }
+ 
+ static int intel_cdclk_modeset_calc_cdclk(struct drm_i915_private *dev_priv,
+ 					  struct intel_cdclk_state *cdclk_config)
+ {
+ 	return dev_priv->cdclk_funcs.modeset_calc_cdclk(cdclk_config);
+ }
+ 
+ static u8 intel_cdclk_calc_voltage_level(struct drm_i915_private *dev_priv,
+ 					 int cdclk)
+ {
+ 	return dev_priv->cdclk_funcs.calc_voltage_level(cdclk);
+ }
+ 
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  static void fixed_133mhz_get_cdclk(struct drm_i915_private *dev_priv,
  				   struct intel_cdclk_config *cdclk_config)
  {
@@@ -2846,110 -2890,120 +2880,176 @@@ u32 intel_read_rawclk(struct drm_i915_p
   */
  void intel_init_cdclk_hooks(struct drm_i915_private *dev_priv)
  {
++<<<<<<< HEAD
 +	if (IS_ROCKETLAKE(dev_priv)) {
 +		dev_priv->display.set_cdclk = bxt_set_cdclk;
 +		dev_priv->display.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
 +		dev_priv->display.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
 +		dev_priv->display.calc_voltage_level = tgl_calc_voltage_level;
 +		dev_priv->cdclk.table = rkl_cdclk_table;
 +	} else if (INTEL_GEN(dev_priv) >= 12) {
 +		dev_priv->display.set_cdclk = bxt_set_cdclk;
 +		dev_priv->display.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
 +		dev_priv->display.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
 +		dev_priv->display.calc_voltage_level = tgl_calc_voltage_level;
++=======
+ 	if (IS_DG2(dev_priv)) {
+ 		dev_priv->cdclk_funcs.set_cdclk = bxt_set_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.calc_voltage_level = tgl_calc_voltage_level;
+ 		dev_priv->cdclk.table = dg2_cdclk_table;
+ 	} else if (IS_ALDERLAKE_P(dev_priv)) {
+ 		dev_priv->cdclk_funcs.set_cdclk = bxt_set_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.calc_voltage_level = tgl_calc_voltage_level;
+ 		/* Wa_22011320316:adl-p[a0] */
+ 		if (IS_ADLP_DISPLAY_STEP(dev_priv, STEP_A0, STEP_B0))
+ 			dev_priv->cdclk.table = adlp_a_step_cdclk_table;
+ 		else
+ 			dev_priv->cdclk.table = adlp_cdclk_table;
+ 	} else if (IS_ROCKETLAKE(dev_priv)) {
+ 		dev_priv->cdclk_funcs.set_cdclk = bxt_set_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.calc_voltage_level = tgl_calc_voltage_level;
+ 		dev_priv->cdclk.table = rkl_cdclk_table;
+ 	} else if (DISPLAY_VER(dev_priv) >= 12) {
+ 		dev_priv->cdclk_funcs.set_cdclk = bxt_set_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.calc_voltage_level = tgl_calc_voltage_level;
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  		dev_priv->cdclk.table = icl_cdclk_table;
  	} else if (IS_JSL_EHL(dev_priv)) {
- 		dev_priv->display.set_cdclk = bxt_set_cdclk;
- 		dev_priv->display.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
- 		dev_priv->display.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
- 		dev_priv->display.calc_voltage_level = ehl_calc_voltage_level;
+ 		dev_priv->cdclk_funcs.set_cdclk = bxt_set_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.calc_voltage_level = ehl_calc_voltage_level;
  		dev_priv->cdclk.table = icl_cdclk_table;
++<<<<<<< HEAD
 +	} else if (INTEL_GEN(dev_priv) >= 11) {
 +		dev_priv->display.set_cdclk = bxt_set_cdclk;
 +		dev_priv->display.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
 +		dev_priv->display.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
 +		dev_priv->display.calc_voltage_level = icl_calc_voltage_level;
 +		dev_priv->cdclk.table = icl_cdclk_table;
 +	} else if (IS_CANNONLAKE(dev_priv)) {
 +		dev_priv->display.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
 +		dev_priv->display.set_cdclk = bxt_set_cdclk;
 +		dev_priv->display.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
 +		dev_priv->display.calc_voltage_level = cnl_calc_voltage_level;
 +		dev_priv->cdclk.table = cnl_cdclk_table;
 +	} else if (IS_GEN9_LP(dev_priv)) {
 +		dev_priv->display.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
 +		dev_priv->display.set_cdclk = bxt_set_cdclk;
 +		dev_priv->display.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
 +		dev_priv->display.calc_voltage_level = bxt_calc_voltage_level;
++=======
+ 	} else if (DISPLAY_VER(dev_priv) >= 11) {
+ 		dev_priv->cdclk_funcs.set_cdclk = bxt_set_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.calc_voltage_level = icl_calc_voltage_level;
+ 		dev_priv->cdclk.table = icl_cdclk_table;
+ 	} else if (IS_GEMINILAKE(dev_priv) || IS_BROXTON(dev_priv)) {
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.set_cdclk = bxt_set_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bxt_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.calc_voltage_level = bxt_calc_voltage_level;
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  		if (IS_GEMINILAKE(dev_priv))
  			dev_priv->cdclk.table = glk_cdclk_table;
  		else
  			dev_priv->cdclk.table = bxt_cdclk_table;
++<<<<<<< HEAD
 +	} else if (IS_GEN9_BC(dev_priv)) {
 +		dev_priv->display.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
 +		dev_priv->display.set_cdclk = skl_set_cdclk;
 +		dev_priv->display.modeset_calc_cdclk = skl_modeset_calc_cdclk;
++=======
+ 	} else if (DISPLAY_VER(dev_priv) == 9) {
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = skl_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.set_cdclk = skl_set_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = skl_modeset_calc_cdclk;
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  	} else if (IS_BROADWELL(dev_priv)) {
- 		dev_priv->display.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
- 		dev_priv->display.set_cdclk = bdw_set_cdclk;
- 		dev_priv->display.modeset_calc_cdclk = bdw_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.set_cdclk = bdw_set_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = bdw_modeset_calc_cdclk;
  	} else if (IS_CHERRYVIEW(dev_priv)) {
- 		dev_priv->display.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
- 		dev_priv->display.set_cdclk = chv_set_cdclk;
- 		dev_priv->display.modeset_calc_cdclk = vlv_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.set_cdclk = chv_set_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = vlv_modeset_calc_cdclk;
  	} else if (IS_VALLEYVIEW(dev_priv)) {
- 		dev_priv->display.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
- 		dev_priv->display.set_cdclk = vlv_set_cdclk;
- 		dev_priv->display.modeset_calc_cdclk = vlv_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.set_cdclk = vlv_set_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = vlv_modeset_calc_cdclk;
  	} else {
- 		dev_priv->display.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
- 		dev_priv->display.modeset_calc_cdclk = fixed_modeset_calc_cdclk;
+ 		dev_priv->cdclk_funcs.bw_calc_min_cdclk = intel_bw_calc_min_cdclk;
+ 		dev_priv->cdclk_funcs.modeset_calc_cdclk = fixed_modeset_calc_cdclk;
  	}
  
++<<<<<<< HEAD
 +	if (INTEL_GEN(dev_priv) >= 10 || IS_GEN9_LP(dev_priv))
 +		dev_priv->display.get_cdclk = bxt_get_cdclk;
 +	else if (IS_GEN9_BC(dev_priv))
 +		dev_priv->display.get_cdclk = skl_get_cdclk;
++=======
+ 	if (DISPLAY_VER(dev_priv) >= 10 || IS_BROXTON(dev_priv))
+ 		dev_priv->cdclk_funcs.get_cdclk = bxt_get_cdclk;
+ 	else if (DISPLAY_VER(dev_priv) == 9)
+ 		dev_priv->cdclk_funcs.get_cdclk = skl_get_cdclk;
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  	else if (IS_BROADWELL(dev_priv))
- 		dev_priv->display.get_cdclk = bdw_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = bdw_get_cdclk;
  	else if (IS_HASWELL(dev_priv))
- 		dev_priv->display.get_cdclk = hsw_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = hsw_get_cdclk;
  	else if (IS_VALLEYVIEW(dev_priv) || IS_CHERRYVIEW(dev_priv))
++<<<<<<< HEAD
 +		dev_priv->display.get_cdclk = vlv_get_cdclk;
 +	else if (IS_GEN(dev_priv, 6) || IS_IVYBRIDGE(dev_priv))
 +		dev_priv->display.get_cdclk = fixed_400mhz_get_cdclk;
 +	else if (IS_GEN(dev_priv, 5))
 +		dev_priv->display.get_cdclk = fixed_450mhz_get_cdclk;
++=======
+ 		dev_priv->cdclk_funcs.get_cdclk = vlv_get_cdclk;
+ 	else if (IS_SANDYBRIDGE(dev_priv) || IS_IVYBRIDGE(dev_priv))
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_400mhz_get_cdclk;
+ 	else if (IS_IRONLAKE(dev_priv))
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_450mhz_get_cdclk;
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  	else if (IS_GM45(dev_priv))
- 		dev_priv->display.get_cdclk = gm45_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = gm45_get_cdclk;
  	else if (IS_G45(dev_priv))
- 		dev_priv->display.get_cdclk = g33_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = g33_get_cdclk;
  	else if (IS_I965GM(dev_priv))
- 		dev_priv->display.get_cdclk = i965gm_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = i965gm_get_cdclk;
  	else if (IS_I965G(dev_priv))
- 		dev_priv->display.get_cdclk = fixed_400mhz_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_400mhz_get_cdclk;
  	else if (IS_PINEVIEW(dev_priv))
- 		dev_priv->display.get_cdclk = pnv_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = pnv_get_cdclk;
  	else if (IS_G33(dev_priv))
- 		dev_priv->display.get_cdclk = g33_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = g33_get_cdclk;
  	else if (IS_I945GM(dev_priv))
- 		dev_priv->display.get_cdclk = i945gm_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = i945gm_get_cdclk;
  	else if (IS_I945G(dev_priv))
- 		dev_priv->display.get_cdclk = fixed_400mhz_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_400mhz_get_cdclk;
  	else if (IS_I915GM(dev_priv))
- 		dev_priv->display.get_cdclk = i915gm_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = i915gm_get_cdclk;
  	else if (IS_I915G(dev_priv))
- 		dev_priv->display.get_cdclk = fixed_333mhz_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_333mhz_get_cdclk;
  	else if (IS_I865G(dev_priv))
- 		dev_priv->display.get_cdclk = fixed_266mhz_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_266mhz_get_cdclk;
  	else if (IS_I85X(dev_priv))
- 		dev_priv->display.get_cdclk = i85x_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = i85x_get_cdclk;
  	else if (IS_I845G(dev_priv))
- 		dev_priv->display.get_cdclk = fixed_200mhz_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_200mhz_get_cdclk;
  	else if (IS_I830(dev_priv))
- 		dev_priv->display.get_cdclk = fixed_133mhz_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_133mhz_get_cdclk;
  
- 	if (drm_WARN(&dev_priv->drm, !dev_priv->display.get_cdclk,
+ 	if (drm_WARN(&dev_priv->drm, !dev_priv->cdclk_funcs.get_cdclk,
  		     "Unknown platform. Assuming 133 MHz CDCLK\n"))
- 		dev_priv->display.get_cdclk = fixed_133mhz_get_cdclk;
+ 		dev_priv->cdclk_funcs.get_cdclk = fixed_133mhz_get_cdclk;
  }
diff --cc drivers/gpu/drm/i915/i915_drv.h
index 6638c0aec2d4,6da19391ea0d..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -330,33 -364,52 +330,70 @@@ struct drm_i915_display_funcs 
  	void (*read_luts)(struct intel_crtc_state *crtc_state);
  };
  
 -struct intel_audio_funcs {
 -	void (*audio_codec_enable)(struct intel_encoder *encoder,
 -				   const struct intel_crtc_state *crtc_state,
 -				   const struct drm_connector_state *conn_state);
 -	void (*audio_codec_disable)(struct intel_encoder *encoder,
 -				    const struct intel_crtc_state *old_crtc_state,
 -				    const struct drm_connector_state *old_conn_state);
 +struct intel_csr {
 +	struct work_struct work;
 +	const char *fw_path;
 +	u32 required_version;
 +	u32 max_fw_size; /* bytes */
 +	u32 *dmc_payload;
 +	u32 dmc_fw_size; /* dwords */
 +	u32 version;
 +	u32 mmio_count;
 +	i915_reg_t mmioaddr[20];
 +	u32 mmiodata[20];
 +	u32 dc_state;
 +	u32 target_dc_state;
 +	u32 allowed_dc_mask;
 +	intel_wakeref_t wakeref;
  };
  
++<<<<<<< HEAD
 +enum i915_cache_level {
 +	I915_CACHE_NONE = 0,
 +	I915_CACHE_LLC, /* also used for snoopable memory on non-LLC */
 +	I915_CACHE_L3_LLC, /* gen7+, L3 sits between the domain specifc
 +			      caches, eg sampler/render caches, and the
 +			      large Last-Level-Cache. LLC is coherent with
 +			      the CPU, but L3 is only visible to the GPU. */
 +	I915_CACHE_WT, /* hsw:gt3e WriteThrough for scanouts */
++=======
+ struct intel_cdclk_funcs {
+ 	void (*get_cdclk)(struct drm_i915_private *dev_priv,
+ 			  struct intel_cdclk_config *cdclk_config);
+ 	void (*set_cdclk)(struct drm_i915_private *dev_priv,
+ 			  const struct intel_cdclk_config *cdclk_config,
+ 			  enum pipe pipe);
+ 	int (*bw_calc_min_cdclk)(struct intel_atomic_state *state);
+ 	int (*modeset_calc_cdclk)(struct intel_cdclk_state *state);
+ 	u8 (*calc_voltage_level)(int cdclk);
+ };
+ 
+ struct drm_i915_display_funcs {
+ 	/* Returns the active state of the crtc, and if the crtc is active,
+ 	 * fills out the pipe-config with the hw state. */
+ 	bool (*get_pipe_config)(struct intel_crtc *,
+ 				struct intel_crtc_state *);
+ 	void (*get_initial_plane_config)(struct intel_crtc *,
+ 					 struct intel_initial_plane_config *);
+ 	int (*crtc_compute_clock)(struct intel_crtc_state *crtc_state);
+ 	void (*crtc_enable)(struct intel_atomic_state *state,
+ 			    struct intel_crtc *crtc);
+ 	void (*crtc_disable)(struct intel_atomic_state *state,
+ 			     struct intel_crtc *crtc);
+ 	void (*commit_modeset_enables)(struct intel_atomic_state *state);
+ 	void (*commit_modeset_disables)(struct intel_atomic_state *state);
+ 
+ 	void (*fdi_link_train)(struct intel_crtc *crtc,
+ 			       const struct intel_crtc_state *crtc_state);
+ 	void (*hpd_irq_setup)(struct drm_i915_private *dev_priv);
+ 	/* clock updates for mode set */
+ 	/* cursor updates */
+ 	/* render clock increase/decrease */
+ 	/* display clock increase/decrease */
+ 	/* pll clock increase/decrease */
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  };
  
 -
  #define I915_COLOR_UNEVICTABLE (-1) /* a non-vma sharing the address space */
  
  struct intel_fbc {
@@@ -965,6 -975,21 +1002,18 @@@ struct drm_i915_private 
  	/* Display functions */
  	struct drm_i915_display_funcs display;
  
++<<<<<<< HEAD
++=======
+ 	/* Display internal color functions */
+ 	struct intel_color_funcs color_funcs;
+ 
+ 	/* Display internal audio functions */
+ 	struct intel_audio_funcs audio_funcs;
+ 
+ 	/* Display CDCLK functions */
+ 	struct intel_cdclk_funcs cdclk_funcs;
+ 
++>>>>>>> 89ac34c14d7e (drm/i915: split cdclk functions from display vtable.)
  	/* PCH chipset type */
  	enum intel_pch pch_type;
  	unsigned short pch_id;
* Unmerged path drivers/gpu/drm/i915/display/intel_cdclk.c
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
