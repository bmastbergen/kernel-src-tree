igc: Make flex filter more flexible

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Kurt Kanzenbach <kurt@linutronix.de>
commit 73744262210c4560efb2d89385c6219739d16bbd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/73744262.failed

Currently flex filters are only used for filters containing user data.
However, it makes sense to utilize them also for filters having
multiple conditions, because that's not supported by the driver at the
moment. Add it.

	Signed-off-by: Kurt Kanzenbach <kurt@linutronix.de>
	Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
	Tested-by: Dvora Fuxbrumer <dvorax.fuxbrumer@linux.intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 73744262210c4560efb2d89385c6219739d16bbd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igc/igc_ethtool.c
#	drivers/net/ethernet/intel/igc/igc_main.c
diff --cc drivers/net/ethernet/intel/igc/igc_ethtool.c
index 8cd68c331d8d,d3e84416248e..000000000000
--- a/drivers/net/ethernet/intel/igc/igc_ethtool.c
+++ b/drivers/net/ethernet/intel/igc/igc_ethtool.c
@@@ -1217,6 -1221,30 +1217,33 @@@ static void igc_ethtool_init_nfc_rule(s
  		ether_addr_copy(rule->filter.dst_addr,
  				fsp->h_u.ether_spec.h_dest);
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	/* VLAN etype matching */
+ 	if ((fsp->flow_type & FLOW_EXT) && fsp->h_ext.vlan_etype) {
+ 		rule->filter.vlan_etype = fsp->h_ext.vlan_etype;
+ 		rule->filter.match_flags |= IGC_FILTER_FLAG_VLAN_ETYPE;
+ 	}
+ 
+ 	/* Check for user defined data */
+ 	if ((fsp->flow_type & FLOW_EXT) &&
+ 	    (fsp->h_ext.data[0] || fsp->h_ext.data[1])) {
+ 		rule->filter.match_flags |= IGC_FILTER_FLAG_USER_DATA;
+ 		memcpy(rule->filter.user_data, fsp->h_ext.data, sizeof(fsp->h_ext.data));
+ 		memcpy(rule->filter.user_mask, fsp->m_ext.data, sizeof(fsp->m_ext.data));
+ 	}
+ 
+ 	/* When multiple filter options or user data or vlan etype is set, use a
+ 	 * flex filter.
+ 	 */
+ 	if ((rule->filter.match_flags & IGC_FILTER_FLAG_USER_DATA) ||
+ 	    (rule->filter.match_flags & IGC_FILTER_FLAG_VLAN_ETYPE) ||
+ 	    (rule->filter.match_flags & (rule->filter.match_flags - 1)))
+ 		rule->flex = true;
+ 	else
+ 		rule->flex = false;
++>>>>>>> 73744262210c (igc: Make flex filter more flexible)
  }
  
  /**
diff --cc drivers/net/ethernet/intel/igc/igc_main.c
index cf93948fb897,11385c380947..000000000000
--- a/drivers/net/ethernet/intel/igc/igc_main.c
+++ b/drivers/net/ethernet/intel/igc/igc_main.c
@@@ -2466,6 -3385,10 +2466,13 @@@ static int igc_enable_nfc_rule(struct i
  {
  	int err;
  
++<<<<<<< HEAD
++=======
+ 	if (rule->flex) {
+ 		return igc_add_flex_filter(adapter, rule);
+ 	}
+ 
++>>>>>>> 73744262210c (igc: Make flex filter more flexible)
  	if (rule->filter.match_flags & IGC_FILTER_FLAG_ETHER_TYPE) {
  		err = igc_add_etype_filter(adapter, rule->filter.etype,
  					   rule->action);
@@@ -2502,6 -3425,11 +2509,14 @@@
  static void igc_disable_nfc_rule(struct igc_adapter *adapter,
  				 const struct igc_nfc_rule *rule)
  {
++<<<<<<< HEAD
++=======
+ 	if (rule->flex) {
+ 		igc_del_flex_filter(adapter, rule->filter.flex_index);
+ 		return;
+ 	}
+ 
++>>>>>>> 73744262210c (igc: Make flex filter more flexible)
  	if (rule->filter.match_flags & IGC_FILTER_FLAG_ETHER_TYPE)
  		igc_del_etype_filter(adapter, rule->filter.etype);
  
diff --git a/drivers/net/ethernet/intel/igc/igc.h b/drivers/net/ethernet/intel/igc/igc.h
index d1a87ef60f7c..23f51511c0aa 100644
--- a/drivers/net/ethernet/intel/igc/igc.h
+++ b/drivers/net/ethernet/intel/igc/igc.h
@@ -457,6 +457,7 @@ struct igc_nfc_rule {
 	struct igc_nfc_filter filter;
 	u32 location;
 	u16 action;
+	bool flex;
 };
 
 /* IGC supports a total of 32 NFC rules: 16 MAC address based,, 8 VLAN priority
* Unmerged path drivers/net/ethernet/intel/igc/igc_ethtool.c
* Unmerged path drivers/net/ethernet/intel/igc/igc_main.c
