md: use part_[begin|end]_io_acct instead of disk_[begin|end]_io_acct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Song Liu <songliubraving@fb.com>
commit 00fe60eae94efa5629bb6caf3839045cb22017e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/00fe60ea.failed

This enables proper statistics in /proc/diskstats for md partitions.

	Signed-off-by: Song Liu <songliubraving@fb.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 00fe60eae94efa5629bb6caf3839045cb22017e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
diff --cc drivers/md/md.c
index 3468a62c3688,64bc22d2b606..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -471,12 -459,34 +471,40 @@@ check_suspended
  }
  EXPORT_SYMBOL(md_handle_request);
  
++<<<<<<< HEAD
 +static blk_qc_t md_make_request(struct request_queue *q, struct bio *bio)
++=======
+ struct md_io {
+ 	struct mddev *mddev;
+ 	bio_end_io_t *orig_bi_end_io;
+ 	void *orig_bi_private;
+ 	unsigned long start_time;
+ 	struct hd_struct *part;
+ };
+ 
+ static void md_end_io(struct bio *bio)
+ {
+ 	struct md_io *md_io = bio->bi_private;
+ 	struct mddev *mddev = md_io->mddev;
+ 
+ 	part_end_io_acct(md_io->part, bio, md_io->start_time);
+ 
+ 	bio->bi_end_io = md_io->orig_bi_end_io;
+ 	bio->bi_private = md_io->orig_bi_private;
+ 
+ 	mempool_free(md_io, &mddev->md_io_pool);
+ 
+ 	if (bio->bi_end_io)
+ 		bio->bi_end_io(bio);
+ }
+ 
+ static blk_qc_t md_submit_bio(struct bio *bio)
++>>>>>>> 00fe60eae94e (md: use part_[begin|end]_io_acct instead of disk_[begin|end]_io_acct)
  {
  	const int rw = bio_data_dir(bio);
 +	const int sgrp = op_stat_group(bio_op(bio));
  	struct mddev *mddev = bio->bi_disk->private_data;
 +	unsigned int sectors;
  
  	if (mddev == NULL || mddev->pers == NULL) {
  		bio_io_error(bio);
@@@ -497,11 -507,21 +525,29 @@@
  		return BLK_QC_T_NONE;
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * save the sectors now since our bio can
 +	 * go away inside make_request
 +	 */
 +	sectors = bio_sectors(bio);
++=======
+ 	if (bio->bi_end_io != md_end_io) {
+ 		struct md_io *md_io;
+ 
+ 		md_io = mempool_alloc(&mddev->md_io_pool, GFP_NOIO);
+ 		md_io->mddev = mddev;
+ 		md_io->orig_bi_end_io = bio->bi_end_io;
+ 		md_io->orig_bi_private = bio->bi_private;
+ 
+ 		bio->bi_end_io = md_end_io;
+ 		bio->bi_private = md_io;
+ 
+ 		md_io->start_time = part_start_io_acct(mddev->gendisk,
+ 						       &md_io->part, bio);
+ 	}
+ 
++>>>>>>> 00fe60eae94e (md: use part_[begin|end]_io_acct instead of disk_[begin|end]_io_acct)
  	/* bio could be mergeable after passing to underlayer */
  	bio->bi_opf &= ~REQ_NOMERGE;
  
* Unmerged path drivers/md/md.c
