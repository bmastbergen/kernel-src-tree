devlink: Make devlink_register to be void

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
Rebuild_CHGLOG: - ice: devlink: Make devlink_register to be void (Jonathan Toppins) [2030400]
Rebuild_FUZZ: 94.25%
commit-author Leon Romanovsky <leonro@nvidia.com>
commit db4278c55fa53760893266538e86e638330b03bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/db4278c5.failed

devlink_register() can't fail and always returns success, but all drivers
are obligated to check returned status anyway. This adds a lot of boilerplate
code to handle impossible flow.

Make devlink_register() void and simplify the drivers that use that
API call.

	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Acked-by: Simon Horman <simon.horman@corigine.com>
	Acked-by: Vladimir Oltean <olteanv@gmail.com> # dsa
	Reviewed-by: Jiri Pirko <jiri@nvidia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit db4278c55fa53760893266538e86e638330b03bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
#	drivers/net/ethernet/cavium/liquidio/lio_main.c
#	drivers/net/ethernet/freescale/dpaa2/dpaa2-eth-devlink.c
#	drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_devlink.c
#	drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_devlink.c
#	drivers/net/ethernet/huawei/hinic/hinic_devlink.c
#	drivers/net/ethernet/huawei/hinic/hinic_devlink.h
#	drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c
#	drivers/net/ethernet/intel/ice/ice_devlink.c
#	drivers/net/ethernet/marvell/octeontx2/af/rvu_devlink.c
#	drivers/net/ethernet/marvell/octeontx2/nic/otx2_devlink.c
#	drivers/net/ethernet/marvell/prestera/prestera_devlink.c
#	drivers/net/ethernet/mellanox/mlx4/main.c
#	drivers/net/ethernet/mellanox/mlx5/core/devlink.c
#	drivers/net/ethernet/mellanox/mlxsw/core.c
#	drivers/net/ethernet/mscc/ocelot_vsc7514.c
#	drivers/net/ethernet/netronome/nfp/nfp_net_main.c
#	drivers/net/ethernet/pensando/ionic/ionic_devlink.c
#	drivers/net/ethernet/qlogic/qed/qed_devlink.c
#	drivers/net/ethernet/qlogic/qlge/qlge_main.c
#	drivers/net/ethernet/ti/am65-cpsw-nuss.c
#	drivers/net/ethernet/ti/cpsw_new.c
#	drivers/net/netdevsim/dev.c
#	drivers/net/wwan/iosm/iosm_ipc_devlink.c
#	drivers/ptp/ptp_ocp.c
#	include/net/devlink.h
#	net/core/devlink.c
#	net/dsa/dsa2.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
index 64381be935a8,bf7d3c17049b..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
@@@ -763,12 -802,7 +763,16 @@@ int bnxt_dl_register(struct bnxt *bp
  	    bp->hwrm_spec_code > 0x10803)
  		bp->eswitch_mode = DEVLINK_ESWITCH_MODE_LEGACY;
  
++<<<<<<< HEAD
 +	rc = devlink_register(dl, &bp->pdev->dev);
 +	if (rc) {
 +		netdev_warn(bp->dev, "devlink_register failed. rc=%d\n", rc);
 +		goto err_dl_free;
 +	}
 +
++=======
+ 	devlink_register(dl);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	if (!BNXT_PF(bp))
  		return 0;
  
diff --cc drivers/net/ethernet/cavium/liquidio/lio_main.c
index 43399d9f4733,a34b3bb2dd4f..000000000000
--- a/drivers/net/ethernet/cavium/liquidio/lio_main.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_main.c
@@@ -3691,13 -3760,7 +3691,17 @@@ static int setup_nic_devices(struct oct
  	lio_devlink = devlink_priv(devlink);
  	lio_devlink->oct = octeon_dev;
  
++<<<<<<< HEAD
 +	if (devlink_register(devlink, &octeon_dev->pci_dev->dev)) {
 +		devlink_free(devlink);
 +		dev_err(&octeon_dev->pci_dev->dev,
 +			"devlink registration failed\n");
 +		goto setup_nic_wait_intr;
 +	}
 +
++=======
+ 	devlink_register(devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	octeon_dev->devlink = devlink;
  	octeon_dev->eswitch_mode = DEVLINK_ESWITCH_MODE_LEGACY;
  
diff --cc drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c
index 3875f39f43bb,b2ece3adbc72..000000000000
--- a/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c
+++ b/drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c
@@@ -732,10 -754,34 +732,38 @@@ static int init_pfhwdev(struct hinic_pf
  		return err;
  	}
  
++<<<<<<< HEAD
 +	hinic_register_mgmt_msg_cb(&pfhwdev->pf_to_mgmt, HINIC_MOD_L2NIC,
 +				   pfhwdev, nic_mgmt_msg_handler);
++=======
+ 	hinic_devlink_register(hwdev->devlink_dev);
+ 	err = hinic_func_to_func_init(hwdev);
+ 	if (err) {
+ 		dev_err(&hwif->pdev->dev, "Failed to init mailbox\n");
+ 		hinic_devlink_unregister(hwdev->devlink_dev);
+ 		hinic_pf_to_mgmt_free(&pfhwdev->pf_to_mgmt);
+ 		return err;
+ 	}
+ 
+ 	if (!HINIC_IS_VF(hwif)) {
+ 		hinic_register_mgmt_msg_cb(&pfhwdev->pf_to_mgmt,
+ 					   HINIC_MOD_L2NIC, pfhwdev,
+ 					   nic_mgmt_msg_handler);
+ 		hinic_register_mgmt_msg_cb(&pfhwdev->pf_to_mgmt, HINIC_MOD_COMM,
+ 					   pfhwdev, comm_mgmt_msg_handler);
+ 		hinic_comm_recv_mgmt_self_cmd_reg(pfhwdev,
+ 						  HINIC_COMM_CMD_FAULT_REPORT,
+ 						  pf_fault_event_handler);
+ 		hinic_comm_recv_mgmt_self_cmd_reg
+ 			(pfhwdev, HINIC_COMM_CMD_WATCHDOG_INFO,
+ 			 mgmt_watchdog_timeout_event_handler);
+ 	} else {
+ 		hinic_register_vf_mbox_cb(hwdev, HINIC_MOD_L2NIC,
+ 					  nic_mgmt_msg_handler);
+ 	}
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  
  	hinic_set_pf_action(hwif, HINIC_PF_MGMT_ACTIVE);
 -
  	return 0;
  }
  
diff --cc drivers/net/ethernet/intel/ice/ice_devlink.c
index 64bea7659cf7,ab3d876fa624..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_devlink.c
+++ b/drivers/net/ethernet/intel/ice/ice_devlink.c
@@@ -499,19 -498,11 +499,21 @@@ struct ice_pf *ice_allocate_pf(struct d
   *
   * Return: zero on success or an error code on failure.
   */
- int ice_devlink_register(struct ice_pf *pf)
+ void ice_devlink_register(struct ice_pf *pf)
  {
  	struct devlink *devlink = priv_to_devlink(pf);
- 	struct device *dev = ice_pf_to_dev(pf);
- 	int err;
  
++<<<<<<< HEAD
 +	err = devlink_register(devlink, dev);
 +	if (err) {
 +		dev_err(dev, "devlink registration failed: %d\n", err);
 +		return err;
 +	}
 +
 +	return 0;
++=======
+ 	devlink_register(devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  }
  
  /**
diff --cc drivers/net/ethernet/mellanox/mlx4/main.c
index c326b434734e,27ed4694fbea..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@@ -4017,9 -4015,7 +4017,13 @@@ static int mlx4_init_one(struct pci_de
  	mutex_init(&dev->persist->interface_state_mutex);
  	mutex_init(&dev->persist->pci_status_mutex);
  
++<<<<<<< HEAD
 +	ret = devlink_register(devlink, &pdev->dev);
 +	if (ret)
 +		goto err_persist_free;
++=======
+ 	devlink_register(devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	ret = devlink_params_register(devlink, mlx4_devlink_params,
  				      ARRAY_SIZE(mlx4_devlink_params));
  	if (ret)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/devlink.c
index 9b263ca85c0e,b36f721625e4..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
@@@ -636,10 -793,7 +636,14 @@@ int mlx5_devlink_register(struct devlin
  {
  	int err;
  
++<<<<<<< HEAD
 +	err = devlink_register(devlink, dev);
 +	if (err)
 +		return err;
 +
++=======
+ 	devlink_register(devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	err = devlink_params_register(devlink, mlx5_devlink_params,
  				      ARRAY_SIZE(mlx5_devlink_params));
  	if (err)
diff --cc drivers/net/ethernet/mellanox/mlxsw/core.c
index 7e9a7cb31720,9a570fa167b6..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/core.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.c
@@@ -1969,11 -1973,8 +1969,16 @@@ __mlxsw_core_bus_device_register(const 
  	if (err)
  		goto err_emad_init;
  
++<<<<<<< HEAD
 +	if (!reload) {
 +		err = devlink_register(devlink, mlxsw_bus_info->dev);
 +		if (err)
 +			goto err_devlink_register;
 +	}
++=======
+ 	if (!reload)
+ 		devlink_register(devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  
  	if (!reload) {
  		err = mlxsw_core_params_register(mlxsw_core);
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index 921db40047d7,616872928ada..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@@ -701,10 -701,7 +701,14 @@@ int nfp_net_pci_probe(struct nfp_pf *pf
  	if (err)
  		goto err_unmap;
  
++<<<<<<< HEAD
 +	err = devlink_register(devlink, &pf->pdev->dev);
 +	if (err)
 +		goto err_app_clean;
 +
++=======
+ 	devlink_register(devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	err = nfp_shared_buf_register(pf);
  	if (err)
  		goto err_devlink_unreg;
diff --cc drivers/net/ethernet/pensando/ionic/ionic_devlink.c
index 9423673b59c9,93282394d332..000000000000
--- a/drivers/net/ethernet/pensando/ionic/ionic_devlink.c
+++ b/drivers/net/ethernet/pensando/ionic/ionic_devlink.c
@@@ -82,12 -82,7 +82,16 @@@ int ionic_devlink_register(struct ioni
  	struct devlink_port_attrs attrs = {};
  	int err;
  
++<<<<<<< HEAD
 +	err = devlink_register(dl, ionic->dev);
 +	if (err) {
 +		dev_warn(ionic->dev, "devlink_register failed: %d\n", err);
 +		return err;
 +	}
 +
++=======
+ 	devlink_register(dl);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	attrs.flavour = DEVLINK_PORT_FLAVOUR_PHYSICAL;
  	devlink_port_attrs_set(&ionic->dl_port, &attrs);
  	err = devlink_port_register(dl, &ionic->dl_port, 0);
diff --cc drivers/net/ethernet/qlogic/qed/qed_devlink.c
index 61349b8adf75,c51f9590fe19..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_devlink.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_devlink.c
@@@ -214,10 -215,7 +214,14 @@@ struct devlink *qed_devlink_register(st
  	qdevlink = devlink_priv(dl);
  	qdevlink->cdev = cdev;
  
++<<<<<<< HEAD
 +	rc = devlink_register(dl, &cdev->pdev->dev);
 +	if (rc)
 +		goto err_free;
 +
++=======
+ 	devlink_register(dl);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	rc = devlink_params_register(dl, qed_devlink_params,
  				     ARRAY_SIZE(qed_devlink_params));
  	if (rc)
diff --cc drivers/net/ethernet/qlogic/qlge/qlge_main.c
index 8758f134eaac,33539f6c254d..000000000000
--- a/drivers/net/ethernet/qlogic/qlge/qlge_main.c
+++ b/drivers/net/ethernet/qlogic/qlge/qlge_main.c
@@@ -4797,11 -4609,16 +4797,20 @@@ static int qlge_probe(struct pci_dev *p
  	err = register_netdev(ndev);
  	if (err) {
  		dev_err(&pdev->dev, "net device registration failed.\n");
 -		qlge_release_all(pdev);
 +		ql_release_all(pdev);
  		pci_disable_device(pdev);
 -		goto netdev_free;
 +		free_netdev(ndev);
 +		return err;
  	}
++<<<<<<< HEAD:drivers/net/ethernet/qlogic/qlge/qlge_main.c
++=======
+ 
+ 	devlink_register(devlink);
+ 	err = qlge_health_create_reporters(qdev);
+ 	if (err)
+ 		goto devlink_unregister;
+ 
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void):drivers/staging/qlge/qlge_main.c
  	/* Start up the timer to trigger EEH if
  	 * the bus goes dead
  	 */
diff --cc drivers/net/netdevsim/dev.c
index e938d324e5cf,b2214bc9efe2..000000000000
--- a/drivers/net/netdevsim/dev.c
+++ b/drivers/net/netdevsim/dev.c
@@@ -1457,16 -1470,7 +1457,20 @@@ int nsim_dev_probe(struct nsim_bus_dev 
  	if (err)
  		goto err_devlink_free;
  
++<<<<<<< HEAD
 +	nsim_dev->fib_data = nsim_fib_create(devlink, NULL);
 +	if (IS_ERR(nsim_dev->fib_data)) {
 +		err = PTR_ERR(nsim_dev->fib_data);
 +		goto err_resources_unregister;
 +	}
 +
 +	err = devlink_register(devlink, &nsim_bus_dev->dev);
 +	if (err)
 +		goto err_fib_destroy;
 +
++=======
+ 	devlink_register(devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	err = devlink_params_register(devlink, nsim_devlink_params,
  				      ARRAY_SIZE(nsim_devlink_params));
  	if (err)
@@@ -1523,9 -1535,6 +1527,12 @@@ err_params_unregister
  				  ARRAY_SIZE(nsim_devlink_params));
  err_dl_unregister:
  	devlink_unregister(devlink);
++<<<<<<< HEAD
 +err_fib_destroy:
 +	nsim_fib_destroy(devlink, nsim_dev->fib_data);
 +err_resources_unregister:
++=======
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  	devlink_resources_unregister(devlink, NULL);
  err_devlink_free:
  	devlink_free(devlink);
diff --cc include/net/devlink.h
index 162ff9c61514,c902e8e5f012..000000000000
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@@ -1525,9 -1552,21 +1525,27 @@@ static inline struct devlink *netdev_to
  struct ib_device;
  
  struct net *devlink_net(const struct devlink *devlink);
++<<<<<<< HEAD
 +void devlink_net_set(struct devlink *devlink, struct net *net);
 +struct devlink *devlink_alloc(const struct devlink_ops *ops, size_t priv_size);
 +int devlink_register(struct devlink *devlink, struct device *dev);
++=======
+ /* This call is intended for software devices that can create
+  * devlink instances in other namespaces than init_net.
+  *
+  * Drivers that operate on real HW must use devlink_alloc() instead.
+  */
+ struct devlink *devlink_alloc_ns(const struct devlink_ops *ops,
+ 				 size_t priv_size, struct net *net,
+ 				 struct device *dev);
+ static inline struct devlink *devlink_alloc(const struct devlink_ops *ops,
+ 					    size_t priv_size,
+ 					    struct device *dev)
+ {
+ 	return devlink_alloc_ns(ops, priv_size, &init_net, dev);
+ }
+ void devlink_register(struct devlink *devlink);
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  void devlink_unregister(struct devlink *devlink);
  void devlink_reload_enable(struct devlink *devlink);
  void devlink_reload_disable(struct devlink *devlink);
diff --cc net/core/devlink.c
index 3650a2b82236,7d975057c2a9..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -8669,17 -8959,13 +8669,20 @@@ EXPORT_SYMBOL_GPL(devlink_alloc)
   *	devlink_register - Register devlink instance
   *
   *	@devlink: devlink
 + *	@dev: parent device
   */
++<<<<<<< HEAD
 +int devlink_register(struct devlink *devlink, struct device *dev)
++=======
+ void devlink_register(struct devlink *devlink)
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  {
 +	devlink->dev = dev;
 +	devlink->registered = true;
  	mutex_lock(&devlink_mutex);
 -	xa_set_mark(&devlinks, devlink->index, DEVLINK_REGISTERED);
 +	list_add_tail(&devlink->list, &devlink_list);
  	devlink_notify(devlink, DEVLINK_CMD_NEW);
  	mutex_unlock(&devlink_mutex);
- 	return 0;
  }
  EXPORT_SYMBOL_GPL(devlink_register);
  
diff --cc net/dsa/dsa2.c
index 3472b9dc341c,96f211f52ac3..000000000000
--- a/net/dsa/dsa2.c
+++ b/net/dsa/dsa2.c
@@@ -358,13 -797,30 +358,33 @@@ static int dsa_switch_setup(struct dsa_
  	/* Add the switch to devlink before calling setup, so that setup can
  	 * add dpipe tables
  	 */
 -	ds->devlink =
 -		devlink_alloc(&dsa_devlink_ops, sizeof(*dl_priv), ds->dev);
 +	ds->devlink = devlink_alloc(&dsa_devlink_ops, 0);
  	if (!ds->devlink)
  		return -ENOMEM;
 -	dl_priv = devlink_priv(ds->devlink);
 -	dl_priv->ds = ds;
  
++<<<<<<< HEAD
 +	err = devlink_register(ds->devlink, ds->dev);
 +	if (err)
 +		return err;
++=======
+ 	devlink_register(ds->devlink);
+ 	/* Setup devlink port instances now, so that the switch
+ 	 * setup() can register regions etc, against the ports
+ 	 */
+ 	list_for_each_entry(dp, &ds->dst->ports, list) {
+ 		if (dp->ds == ds) {
+ 			err = dsa_port_devlink_setup(dp);
+ 			if (err)
+ 				goto unregister_devlink_ports;
+ 		}
+ 	}
+ 
+ 	err = dsa_switch_register_notifier(ds);
+ 	if (err)
+ 		goto unregister_devlink_ports;
+ 
+ 	ds->configure_vlan_while_not_filtering = true;
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  
  	err = ds->ops->setup(ds);
  	if (err < 0)
@@@ -383,10 -843,26 +403,27 @@@
  
  		err = mdiobus_register(ds->slave_mii_bus);
  		if (err < 0)
 -			goto teardown;
 +			return err;
  	}
  
 -	ds->setup = true;
 -
  	return 0;
++<<<<<<< HEAD
++=======
+ 
+ teardown:
+ 	if (ds->ops->teardown)
+ 		ds->ops->teardown(ds);
+ unregister_notifier:
+ 	dsa_switch_unregister_notifier(ds);
+ unregister_devlink_ports:
+ 	list_for_each_entry(dp, &ds->dst->ports, list)
+ 		if (dp->ds == ds)
+ 			dsa_port_devlink_teardown(dp);
+ 	devlink_unregister(ds->devlink);
+ 	devlink_free(ds->devlink);
+ 	ds->devlink = NULL;
+ 	return err;
++>>>>>>> db4278c55fa5 (devlink: Make devlink_register to be void)
  }
  
  static void dsa_switch_teardown(struct dsa_switch *ds)
* Unmerged path drivers/net/ethernet/freescale/dpaa2/dpaa2-eth-devlink.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_devlink.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_devlink.c
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_devlink.c
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_devlink.h
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/rvu_devlink.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/nic/otx2_devlink.c
* Unmerged path drivers/net/ethernet/marvell/prestera/prestera_devlink.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_vsc7514.c
* Unmerged path drivers/net/ethernet/ti/am65-cpsw-nuss.c
* Unmerged path drivers/net/ethernet/ti/cpsw_new.c
* Unmerged path drivers/net/wwan/iosm/iosm_ipc_devlink.c
* Unmerged path drivers/ptp/ptp_ocp.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_devlink.c
* Unmerged path drivers/net/ethernet/cavium/liquidio/lio_main.c
* Unmerged path drivers/net/ethernet/freescale/dpaa2/dpaa2-eth-devlink.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_devlink.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3vf/hclgevf_devlink.c
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_devlink.c
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_devlink.h
* Unmerged path drivers/net/ethernet/huawei/hinic/hinic_hw_dev.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_devlink.c
diff --git a/drivers/net/ethernet/intel/ice/ice_devlink.h b/drivers/net/ethernet/intel/ice/ice_devlink.h
index e07e74426bde..e721d7b0d627 100644
--- a/drivers/net/ethernet/intel/ice/ice_devlink.h
+++ b/drivers/net/ethernet/intel/ice/ice_devlink.h
@@ -6,7 +6,7 @@
 
 struct ice_pf *ice_allocate_pf(struct device *dev);
 
-int ice_devlink_register(struct ice_pf *pf);
+void ice_devlink_register(struct ice_pf *pf);
 void ice_devlink_unregister(struct ice_pf *pf);
 int ice_devlink_create_port(struct ice_vsi *vsi);
 void ice_devlink_destroy_port(struct ice_vsi *vsi);
diff --git a/drivers/net/ethernet/intel/ice/ice_main.c b/drivers/net/ethernet/intel/ice/ice_main.c
index 1bf21c0f3b5b..d365799464bd 100644
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@ -4269,11 +4269,7 @@ ice_probe(struct pci_dev *pdev, const struct pci_device_id __always_unused *ent)
 
 	pf->msg_enable = netif_msg_init(debug, ICE_DFLT_NETIF_M);
 
-	err = ice_devlink_register(pf);
-	if (err) {
-		dev_err(dev, "ice_devlink_register failed: %d\n", err);
-		goto err_exit_unroll;
-	}
+	ice_devlink_register(pf);
 
 #ifndef CONFIG_DYNAMIC_DEBUG
 	if (debug < -1)
* Unmerged path drivers/net/ethernet/marvell/octeontx2/af/rvu_devlink.c
* Unmerged path drivers/net/ethernet/marvell/octeontx2/nic/otx2_devlink.c
* Unmerged path drivers/net/ethernet/marvell/prestera/prestera_devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlx4/main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/core.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_vsc7514.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_main.c
* Unmerged path drivers/net/ethernet/pensando/ionic/ionic_devlink.c
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_devlink.c
* Unmerged path drivers/net/ethernet/qlogic/qlge/qlge_main.c
* Unmerged path drivers/net/ethernet/ti/am65-cpsw-nuss.c
* Unmerged path drivers/net/ethernet/ti/cpsw_new.c
* Unmerged path drivers/net/netdevsim/dev.c
* Unmerged path drivers/net/wwan/iosm/iosm_ipc_devlink.c
* Unmerged path drivers/ptp/ptp_ocp.c
* Unmerged path include/net/devlink.h
* Unmerged path net/core/devlink.c
* Unmerged path net/dsa/dsa2.c
