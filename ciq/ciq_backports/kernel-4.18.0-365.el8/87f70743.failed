drm/i915; Return the whole buf_trans struct from get_buf_trans()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 87f7074330a35966cabfb7bacbd9a0ad67b61337
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/87f70743.failed

Raise the abstraction level of the get_buf_trans() functions
a bit more by returning the whole wrapper intel_ddi_buf_trans
struct.

v2: Handle adl-p

	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210608073603.2408-8-ville.syrjala@linux.intel.com
(cherry picked from commit 87f7074330a35966cabfb7bacbd9a0ad67b61337)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_ddi.c
#	drivers/gpu/drm/i915/display/intel_ddi_buf_trans.c
#	drivers/gpu/drm/i915/display/intel_ddi_buf_trans.h
diff --cc drivers/gpu/drm/i915/display/intel_ddi.c
index 0f72647ed48c,ef2723ae3633..000000000000
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@@ -1571,27 -102,23 +1571,37 @@@ static void intel_prepare_dp_ddi_buffer
  	u32 iboost_bit = 0;
  	int i, n_entries;
  	enum port port = encoder->port;
++<<<<<<< HEAD
 +	const struct ddi_buf_trans *ddi_translations;
++=======
+ 	const struct intel_ddi_buf_trans *ddi_translations;
 -
 -	ddi_translations = hsw_get_buf_trans(encoder, crtc_state, &n_entries);
 -
 -	if (drm_WARN_ON_ONCE(&dev_priv->drm, !ddi_translations))
 -		return;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
 +
 +	if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_ANALOG))
 +		ddi_translations = intel_ddi_get_buf_trans_fdi(dev_priv,
 +							       &n_entries);
 +	else if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_EDP))
 +		ddi_translations = intel_ddi_get_buf_trans_edp(encoder,
 +							       &n_entries);
 +	else
 +		ddi_translations = intel_ddi_get_buf_trans_dp(encoder,
 +							      &n_entries);
  
  	/* If we're boosting the current, set bit 31 of trans1 */
 -	if (DISPLAY_VER(dev_priv) == 9 && !IS_BROXTON(dev_priv) &&
 -	    intel_bios_encoder_dp_boost_level(encoder->devdata))
 +	if (IS_GEN9_BC(dev_priv) && intel_bios_dp_boost_level(encoder))
  		iboost_bit = DDI_BUF_BALANCE_LEG_ENABLE;
  
  	for (i = 0; i < n_entries; i++) {
  		intel_de_write(dev_priv, DDI_BUF_TRANS_LO(port, i),
++<<<<<<< HEAD
 +			       ddi_translations[i].trans1 | iboost_bit);
 +		intel_de_write(dev_priv, DDI_BUF_TRANS_HI(port, i),
 +			       ddi_translations[i].trans2);
++=======
+ 			       ddi_translations->entries[i].hsw.trans1 | iboost_bit);
+ 		intel_de_write(dev_priv, DDI_BUF_TRANS_HI(port, i),
+ 			       ddi_translations->entries[i].hsw.trans2);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	}
  }
  
@@@ -1607,9 -135,9 +1617,13 @@@ static void intel_prepare_hdmi_ddi_buff
  	u32 iboost_bit = 0;
  	int n_entries;
  	enum port port = encoder->port;
++<<<<<<< HEAD
 +	const struct ddi_buf_trans *ddi_translations;
++=======
+ 	const struct intel_ddi_buf_trans *ddi_translations;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  
 -	ddi_translations = hsw_get_buf_trans(encoder, crtc_state,  &n_entries);
 +	ddi_translations = intel_ddi_get_buf_trans_hdmi(encoder, &n_entries);
  
  	if (drm_WARN_ON_ONCE(&dev_priv->drm, !ddi_translations))
  		return;
@@@ -1622,13 -151,13 +1636,19 @@@
  
  	/* Entry 9 is for HDMI: */
  	intel_de_write(dev_priv, DDI_BUF_TRANS_LO(port, 9),
++<<<<<<< HEAD
 +		       ddi_translations[level].trans1 | iboost_bit);
 +	intel_de_write(dev_priv, DDI_BUF_TRANS_HI(port, 9),
 +		       ddi_translations[level].trans2);
++=======
+ 		       ddi_translations->entries[level].hsw.trans1 | iboost_bit);
+ 	intel_de_write(dev_priv, DDI_BUF_TRANS_HI(port, 9),
+ 		       ddi_translations->entries[level].hsw.trans2);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  }
  
 -void intel_wait_ddi_buf_idle(struct drm_i915_private *dev_priv,
 -			     enum port port)
 +static void intel_wait_ddi_buf_idle(struct drm_i915_private *dev_priv,
 +				    enum port port)
  {
  	if (IS_BROXTON(dev_priv)) {
  		udelay(16);
@@@ -2529,27 -939,22 +2549,35 @@@ static void skl_ddi_set_iboost(struct i
  	u8 iboost;
  
  	if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_HDMI))
 -		iboost = intel_bios_encoder_hdmi_boost_level(encoder->devdata);
 +		iboost = intel_bios_hdmi_boost_level(encoder);
  	else
 -		iboost = intel_bios_encoder_dp_boost_level(encoder->devdata);
 +		iboost = intel_bios_dp_boost_level(encoder);
  
  	if (iboost == 0) {
++<<<<<<< HEAD
 +		const struct ddi_buf_trans *ddi_translations;
++=======
+ 		const struct intel_ddi_buf_trans *ddi_translations;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  		int n_entries;
  
 -		ddi_translations = hsw_get_buf_trans(encoder, crtc_state, &n_entries);
 +		if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_HDMI))
 +			ddi_translations = intel_ddi_get_buf_trans_hdmi(encoder, &n_entries);
 +		else if (intel_crtc_has_type(crtc_state, INTEL_OUTPUT_EDP))
 +			ddi_translations = intel_ddi_get_buf_trans_edp(encoder, &n_entries);
 +		else
 +			ddi_translations = intel_ddi_get_buf_trans_dp(encoder, &n_entries);
  
  		if (drm_WARN_ON_ONCE(&dev_priv->drm, !ddi_translations))
  			return;
  		if (drm_WARN_ON_ONCE(&dev_priv->drm, level >= n_entries))
  			level = n_entries - 1;
  
++<<<<<<< HEAD
 +		iboost = ddi_translations[level].i_boost;
++=======
+ 		iboost = ddi_translations->entries[level].hsw.i_boost;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	}
  
  	/* Make sure that the requested I_boost is valid */
@@@ -2569,7 -974,7 +2597,11 @@@ static void bxt_ddi_vswing_sequence(str
  				    int level)
  {
  	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
++<<<<<<< HEAD
 +	const struct bxt_ddi_buf_trans *ddi_translations;
++=======
+ 	const struct intel_ddi_buf_trans *ddi_translations;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	enum port port = encoder->port;
  	int n_entries;
  
@@@ -2586,10 -985,10 +2618,17 @@@
  		level = n_entries - 1;
  
  	bxt_ddi_phy_set_signal_level(dev_priv, port,
++<<<<<<< HEAD
 +				     ddi_translations[level].margin,
 +				     ddi_translations[level].scale,
 +				     ddi_translations[level].enable,
 +				     ddi_translations[level].deemphasis);
++=======
+ 				     ddi_translations->entries[level].bxt.margin,
+ 				     ddi_translations->entries[level].bxt.scale,
+ 				     ddi_translations->entries[level].bxt.enable,
+ 				     ddi_translations->entries[level].bxt.deemphasis);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  }
  
  static u8 intel_ddi_dp_voltage_max(struct intel_dp *intel_dp,
@@@ -2659,7 -1049,7 +2698,11 @@@ static void cnl_ddi_vswing_program(stru
  				   int level)
  {
  	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
++<<<<<<< HEAD
 +	const struct cnl_ddi_buf_trans *ddi_translations;
++=======
+ 	const struct intel_ddi_buf_trans *ddi_translations;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	enum port port = encoder->port;
  	int n_entries, ln;
  	u32 val;
@@@ -2686,8 -1071,8 +2729,13 @@@
  	val = intel_de_read(dev_priv, CNL_PORT_TX_DW2_LN0(port));
  	val &= ~(SWING_SEL_LOWER_MASK | SWING_SEL_UPPER_MASK |
  		 RCOMP_SCALAR_MASK);
++<<<<<<< HEAD
 +	val |= SWING_SEL_UPPER(ddi_translations[level].dw2_swing_sel);
 +	val |= SWING_SEL_LOWER(ddi_translations[level].dw2_swing_sel);
++=======
+ 	val |= SWING_SEL_UPPER(ddi_translations->entries[level].cnl.dw2_swing_sel);
+ 	val |= SWING_SEL_LOWER(ddi_translations->entries[level].cnl.dw2_swing_sel);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	/* Rcomp scalar is fixed as 0x98 for every table entry */
  	val |= RCOMP_SCALAR(0x98);
  	intel_de_write(dev_priv, CNL_PORT_TX_DW2_GRP(port), val);
@@@ -2698,9 -1083,9 +2746,15 @@@
  		val = intel_de_read(dev_priv, CNL_PORT_TX_DW4_LN(ln, port));
  		val &= ~(POST_CURSOR_1_MASK | POST_CURSOR_2_MASK |
  			 CURSOR_COEFF_MASK);
++<<<<<<< HEAD
 +		val |= POST_CURSOR_1(ddi_translations[level].dw4_post_cursor_1);
 +		val |= POST_CURSOR_2(ddi_translations[level].dw4_post_cursor_2);
 +		val |= CURSOR_COEFF(ddi_translations[level].dw4_cursor_coeff);
++=======
+ 		val |= POST_CURSOR_1(ddi_translations->entries[level].cnl.dw4_post_cursor_1);
+ 		val |= POST_CURSOR_2(ddi_translations->entries[level].cnl.dw4_post_cursor_2);
+ 		val |= CURSOR_COEFF(ddi_translations->entries[level].cnl.dw4_cursor_coeff);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  		intel_de_write(dev_priv, CNL_PORT_TX_DW4_LN(ln, port), val);
  	}
  
@@@ -2715,7 -1100,7 +2769,11 @@@
  	/* Program PORT_TX_DW7 */
  	val = intel_de_read(dev_priv, CNL_PORT_TX_DW7_LN0(port));
  	val &= ~N_SCALAR_MASK;
++<<<<<<< HEAD
 +	val |= N_SCALAR(ddi_translations[level].dw7_n_scalar);
++=======
+ 	val |= N_SCALAR(ddi_translations->entries[level].cnl.dw7_n_scalar);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	intel_de_write(dev_priv, CNL_PORT_TX_DW7_GRP(port), val);
  }
  
@@@ -2785,7 -1170,7 +2843,11 @@@ static void icl_ddi_combo_vswing_progra
  					 int level)
  {
  	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
++<<<<<<< HEAD
 +	const struct cnl_ddi_buf_trans *ddi_translations;
++=======
+ 	const struct intel_ddi_buf_trans *ddi_translations;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
  	int n_entries, ln;
  	u32 val;
@@@ -2828,8 -1211,8 +2890,13 @@@
  	val = intel_de_read(dev_priv, ICL_PORT_TX_DW2_LN0(phy));
  	val &= ~(SWING_SEL_LOWER_MASK | SWING_SEL_UPPER_MASK |
  		 RCOMP_SCALAR_MASK);
++<<<<<<< HEAD
 +	val |= SWING_SEL_UPPER(ddi_translations[level].dw2_swing_sel);
 +	val |= SWING_SEL_LOWER(ddi_translations[level].dw2_swing_sel);
++=======
+ 	val |= SWING_SEL_UPPER(ddi_translations->entries[level].cnl.dw2_swing_sel);
+ 	val |= SWING_SEL_LOWER(ddi_translations->entries[level].cnl.dw2_swing_sel);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	/* Program Rcomp scalar for every table entry */
  	val |= RCOMP_SCALAR(0x98);
  	intel_de_write(dev_priv, ICL_PORT_TX_DW2_GRP(phy), val);
@@@ -2840,16 -1223,16 +2907,26 @@@
  		val = intel_de_read(dev_priv, ICL_PORT_TX_DW4_LN(ln, phy));
  		val &= ~(POST_CURSOR_1_MASK | POST_CURSOR_2_MASK |
  			 CURSOR_COEFF_MASK);
++<<<<<<< HEAD
 +		val |= POST_CURSOR_1(ddi_translations[level].dw4_post_cursor_1);
 +		val |= POST_CURSOR_2(ddi_translations[level].dw4_post_cursor_2);
 +		val |= CURSOR_COEFF(ddi_translations[level].dw4_cursor_coeff);
++=======
+ 		val |= POST_CURSOR_1(ddi_translations->entries[level].cnl.dw4_post_cursor_1);
+ 		val |= POST_CURSOR_2(ddi_translations->entries[level].cnl.dw4_post_cursor_2);
+ 		val |= CURSOR_COEFF(ddi_translations->entries[level].cnl.dw4_cursor_coeff);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  		intel_de_write(dev_priv, ICL_PORT_TX_DW4_LN(ln, phy), val);
  	}
  
  	/* Program PORT_TX_DW7 */
  	val = intel_de_read(dev_priv, ICL_PORT_TX_DW7_LN0(phy));
  	val &= ~N_SCALAR_MASK;
++<<<<<<< HEAD
 +	val |= N_SCALAR(ddi_translations[level].dw7_n_scalar);
++=======
+ 	val |= N_SCALAR(ddi_translations->entries[level].cnl.dw7_n_scalar);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	intel_de_write(dev_priv, ICL_PORT_TX_DW7_GRP(phy), val);
  }
  
@@@ -2920,7 -1303,7 +2997,11 @@@ static void icl_mg_phy_ddi_vswing_seque
  {
  	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
  	enum tc_port tc_port = intel_port_to_tc(dev_priv, encoder->port);
++<<<<<<< HEAD
 +	const struct icl_mg_phy_ddi_buf_trans *ddi_translations;
++=======
+ 	const struct intel_ddi_buf_trans *ddi_translations;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	int n_entries, ln;
  	u32 val;
  
@@@ -2950,13 -1333,13 +3031,21 @@@
  		val = intel_de_read(dev_priv, MG_TX1_SWINGCTRL(ln, tc_port));
  		val &= ~CRI_TXDEEMPH_OVERRIDE_17_12_MASK;
  		val |= CRI_TXDEEMPH_OVERRIDE_17_12(
++<<<<<<< HEAD
 +			ddi_translations[level].cri_txdeemph_override_17_12);
++=======
+ 			ddi_translations->entries[level].mg.cri_txdeemph_override_17_12);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  		intel_de_write(dev_priv, MG_TX1_SWINGCTRL(ln, tc_port), val);
  
  		val = intel_de_read(dev_priv, MG_TX2_SWINGCTRL(ln, tc_port));
  		val &= ~CRI_TXDEEMPH_OVERRIDE_17_12_MASK;
  		val |= CRI_TXDEEMPH_OVERRIDE_17_12(
++<<<<<<< HEAD
 +			ddi_translations[level].cri_txdeemph_override_17_12);
++=======
+ 			ddi_translations->entries[level].mg.cri_txdeemph_override_17_12);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  		intel_de_write(dev_priv, MG_TX2_SWINGCTRL(ln, tc_port), val);
  	}
  
@@@ -2966,9 -1349,9 +3055,15 @@@
  		val &= ~(CRI_TXDEEMPH_OVERRIDE_11_6_MASK |
  			 CRI_TXDEEMPH_OVERRIDE_5_0_MASK);
  		val |= CRI_TXDEEMPH_OVERRIDE_5_0(
++<<<<<<< HEAD
 +			ddi_translations[level].cri_txdeemph_override_5_0) |
 +			CRI_TXDEEMPH_OVERRIDE_11_6(
 +				ddi_translations[level].cri_txdeemph_override_11_6) |
++=======
+ 			ddi_translations->entries[level].mg.cri_txdeemph_override_5_0) |
+ 			CRI_TXDEEMPH_OVERRIDE_11_6(
+ 				ddi_translations->entries[level].mg.cri_txdeemph_override_11_6) |
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  			CRI_TXDEEMPH_OVERRIDE_EN;
  		intel_de_write(dev_priv, MG_TX1_DRVCTRL(ln, tc_port), val);
  
@@@ -2976,9 -1359,9 +3071,15 @@@
  		val &= ~(CRI_TXDEEMPH_OVERRIDE_11_6_MASK |
  			 CRI_TXDEEMPH_OVERRIDE_5_0_MASK);
  		val |= CRI_TXDEEMPH_OVERRIDE_5_0(
++<<<<<<< HEAD
 +			ddi_translations[level].cri_txdeemph_override_5_0) |
 +			CRI_TXDEEMPH_OVERRIDE_11_6(
 +				ddi_translations[level].cri_txdeemph_override_11_6) |
++=======
+ 			ddi_translations->entries[level].mg.cri_txdeemph_override_5_0) |
+ 			CRI_TXDEEMPH_OVERRIDE_11_6(
+ 				ddi_translations->entries[level].mg.cri_txdeemph_override_11_6) |
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  			CRI_TXDEEMPH_OVERRIDE_EN;
  		intel_de_write(dev_priv, MG_TX2_DRVCTRL(ln, tc_port), val);
  
@@@ -3058,7 -1441,7 +3159,11 @@@ tgl_dkl_phy_ddi_vswing_sequence(struct 
  {
  	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
  	enum tc_port tc_port = intel_port_to_tc(dev_priv, encoder->port);
++<<<<<<< HEAD
 +	const struct tgl_dkl_phy_ddi_buf_trans *ddi_translations;
++=======
+ 	const struct intel_ddi_buf_trans *ddi_translations;
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  	u32 val, dpcnt_mask, dpcnt_val;
  	int n_entries, ln;
  
@@@ -3075,9 -1461,9 +3180,15 @@@
  	dpcnt_mask = (DKL_TX_PRESHOOT_COEFF_MASK |
  		      DKL_TX_DE_EMPAHSIS_COEFF_MASK |
  		      DKL_TX_VSWING_CONTROL_MASK);
++<<<<<<< HEAD
 +	dpcnt_val = DKL_TX_VSWING_CONTROL(ddi_translations[level].dkl_vswing_control);
 +	dpcnt_val |= DKL_TX_DE_EMPHASIS_COEFF(ddi_translations[level].dkl_de_emphasis_control);
 +	dpcnt_val |= DKL_TX_PRESHOOT_COEFF(ddi_translations[level].dkl_preshoot_control);
++=======
+ 	dpcnt_val = DKL_TX_VSWING_CONTROL(ddi_translations->entries[level].dkl.dkl_vswing_control);
+ 	dpcnt_val |= DKL_TX_DE_EMPHASIS_COEFF(ddi_translations->entries[level].dkl.dkl_de_emphasis_control);
+ 	dpcnt_val |= DKL_TX_PRESHOOT_COEFF(ddi_translations->entries[level].dkl.dkl_preshoot_control);
++>>>>>>> 87f7074330a3 (drm/i915; Return the whole buf_trans struct from get_buf_trans())
  
  	for (ln = 0; ln < 2; ln++) {
  		intel_de_write(dev_priv, HIP_INDEX_REG(tc_port),
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.c
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.h
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi.c
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.c
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi_buf_trans.h
