thunderbolt: Check for NVM authentication status after the operation started

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit 25335b30daf66f4cc03715c2ac9cdc3258fb5531
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/25335b30.failed

If the NVM authentication fails immediately, like if the firmware
detects that the image is not valid for some reason, better to read the
status once and if set to non-zero fail the operation accordingly.

	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 25335b30daf66f4cc03715c2ac9cdc3258fb5531)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/thunderbolt/retimer.c
diff --cc drivers/thunderbolt/retimer.c
index 05af0feefe84,722694052f4a..000000000000
--- a/drivers/thunderbolt/retimer.c
+++ b/drivers/thunderbolt/retimer.c
@@@ -140,8 -141,43 +140,48 @@@ static int tb_retimer_nvm_validate_and_
  	buf += hdr_size;
  	image_size -= hdr_size;
  
++<<<<<<< HEAD
 +	return usb4_port_retimer_nvm_write(rt->port, rt->index, 0, buf,
 +					   image_size);
++=======
+ 	ret = usb4_port_retimer_nvm_write(rt->port, rt->index, 0, buf,
+ 					 image_size);
+ 	if (!ret)
+ 		rt->nvm->flushed = true;
+ 
+ 	return ret;
+ }
+ 
+ static int tb_retimer_nvm_authenticate(struct tb_retimer *rt, bool auth_only)
+ {
+ 	u32 status;
+ 	int ret;
+ 
+ 	if (auth_only) {
+ 		ret = usb4_port_retimer_nvm_set_offset(rt->port, rt->index, 0);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	ret = usb4_port_retimer_nvm_authenticate(rt->port, rt->index);
+ 	if (ret)
+ 		return ret;
+ 
+ 	usleep_range(100, 150);
+ 
+ 	/*
+ 	 * Check the status now if we still can access the retimer. It
+ 	 * is expected that the below fails.
+ 	 */
+ 	ret = usb4_port_retimer_nvm_authenticate_status(rt->port, rt->index,
+ 							&status);
+ 	if (!ret) {
+ 		rt->auth_status = status;
+ 		return status ? -EINVAL : 0;
+ 	}
+ 
+ 	return 0;
++>>>>>>> 25335b30daf6 (thunderbolt: Check for NVM authentication status after the operation started)
  }
  
  static ssize_t device_show(struct device *dev, struct device_attribute *attr,
* Unmerged path drivers/thunderbolt/retimer.c
