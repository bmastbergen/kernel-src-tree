drm/i915: Program DFR enable/disable as a GT workaround

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Matt Roper <matthew.d.roper@intel.com>
commit 1e1824de33c1a44640778fd04106e240e819866b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/1e1824de.failed

DFR programming (which we enable as an optimization on gen11, but must
ensure is disabled on gen12) should be handled as a GT workaround rather
than clock gating initialization.  This will ensure that the programming
of these registers is verified with our typical workaround checks.

	Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
	Reviewed-by: Jos√© Roberto de Souza <jose.souza@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210717051426.4120328-4-matthew.d.roper@intel.com
(cherry picked from commit 1e1824de33c1a44640778fd04106e240e819866b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/intel_workarounds.c
#	drivers/gpu/drm/i915/intel_pm.c
diff --cc drivers/gpu/drm/i915/gt/intel_workarounds.c
index ce9b1244604b,685c6115d380..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_workarounds.c
+++ b/drivers/gpu/drm/i915/gt/intel_workarounds.c
@@@ -1089,7 -965,12 +1089,16 @@@ icl_gt_workarounds_init(struct drm_i915
  		wa_write_or(wal,
  			    SLICE_UNIT_LEVEL_CLKGATE,
  			    L3_CLKGATE_DIS | L3_CR2X_CLKGATE_DIS);
++<<<<<<< HEAD
 +	}
++=======
+ 
+ 	/*
+ 	 * This is not a documented workaround, but rather an optimization
+ 	 * to reduce sampler power.
+ 	 */
+ 	wa_write_clr(wal, GEN10_DFR_RATIO_EN_AND_CHICKEN, DFR_DISABLE);
++>>>>>>> 1e1824de33c1 (drm/i915: Program DFR enable/disable as a GT workaround)
  }
  
  /*
@@@ -1119,15 -1000,13 +1128,23 @@@ static voi
  gen12_gt_workarounds_init(struct drm_i915_private *i915,
  			  struct i915_wa_list *wal)
  {
 -	icl_wa_init_mcr(i915, wal);
 +	wa_init_mcr(i915, wal);
  
++<<<<<<< HEAD
 +	/* RH note: this workaround came in quite late, so limit it to ADL-S to avoid potential
 +	 * regressions
 +	 */
 +	if (IS_ALDERLAKE_S(i915)) {
 +		/* Wa_14011060649:tgl,rkl,dg1,adls */
 +		wa_14011060649(i915, wal);
 +	}
++=======
+ 	/* Wa_14011060649:tgl,rkl,dg1,adl-s,adl-p */
+ 	wa_14011060649(i915, wal);
+ 
+ 	/* Wa_14011059788:tgl,rkl,adl-s,dg1,adl-p */
+ 	wa_write_or(wal, GEN10_DFR_RATIO_EN_AND_CHICKEN, DFR_DISABLE);
++>>>>>>> 1e1824de33c1 (drm/i915: Program DFR enable/disable as a GT workaround)
  }
  
  static void
diff --cc drivers/gpu/drm/i915/intel_pm.c
index bac0c94e6962,839ab94b36fe..000000000000
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@@ -7076,9 -7358,18 +7072,24 @@@ static void gen12lp_init_clock_gating(s
  		intel_uncore_write(&dev_priv->uncore, GEN9_CLKGATE_DIS_3, intel_uncore_read(&dev_priv->uncore, GEN9_CLKGATE_DIS_3) |
  			   TGL_VRH_GATING_DIS);
  
++<<<<<<< HEAD
 +	/* Wa_14011059788:tgl,rkl,adl_s,dg1 */
 +	intel_uncore_rmw(&dev_priv->uncore, GEN10_DFR_RATIO_EN_AND_CHICKEN,
 +			 0, DFR_DISABLE);
++=======
+ 	/* Wa_14013723622:tgl,rkl,dg1,adl-s */
+ 	if (DISPLAY_VER(dev_priv) == 12)
+ 		intel_uncore_rmw(&dev_priv->uncore, CLKREQ_POLICY,
+ 				 CLKREQ_POLICY_MEM_UP_OVRD, 0);
+ }
+ 
+ static void adlp_init_clock_gating(struct drm_i915_private *dev_priv)
+ {
+ 	gen12lp_init_clock_gating(dev_priv);
+ 
+ 	/* Wa_22011091694:adlp */
+ 	intel_de_rmw(dev_priv, GEN9_CLKGATE_DIS_5, 0, DPCE_GATING_DIS);
++>>>>>>> 1e1824de33c1 (drm/i915: Program DFR enable/disable as a GT workaround)
  }
  
  static void dg1_init_clock_gating(struct drm_i915_private *dev_priv)
* Unmerged path drivers/gpu/drm/i915/gt/intel_workarounds.c
* Unmerged path drivers/gpu/drm/i915/intel_pm.c
