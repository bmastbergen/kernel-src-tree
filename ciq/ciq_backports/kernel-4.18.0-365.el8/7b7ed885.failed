net/core: Allow the compiler to verify declaration and definition consistency

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Bart Van Assche <bvanassche@acm.org>
commit 7b7ed885aff2eede24d641c3b042ebcf7517a5c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/7b7ed885.failed

Instead of declaring a function in a .c file, declare it in a header
file and include that header file from the source files that define
and that use the function. That allows the compiler to verify
consistency of declaration and definition. See also commit
52267790ef52 ("sock: add MSG_ZEROCOPY") # v4.14.

	Cc: Willem de Bruijn <willemb@google.com>
	Signed-off-by: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7b7ed885aff2eede24d641c3b042ebcf7517a5c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/skbuff.c
diff --cc net/core/skbuff.c
index ef58502f56f0,4782f9354dd1..000000000000
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@@ -1185,8 -1107,11 +1187,16 @@@ void sock_zerocopy_put_abort(struct ubu
  }
  EXPORT_SYMBOL_GPL(sock_zerocopy_put_abort);
  
++<<<<<<< HEAD
 +extern int __zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
 +				   struct iov_iter *from, size_t length);
++=======
+ int skb_zerocopy_iter_dgram(struct sk_buff *skb, struct msghdr *msg, int len)
+ {
+ 	return __zerocopy_sg_from_iter(skb->sk, skb, &msg->msg_iter, len);
+ }
+ EXPORT_SYMBOL_GPL(skb_zerocopy_iter_dgram);
++>>>>>>> 7b7ed885aff2 (net/core: Allow the compiler to verify declaration and definition consistency)
  
  int skb_zerocopy_iter_stream(struct sock *sk, struct sk_buff *skb,
  			     struct msghdr *msg, int len,
diff --git a/net/core/datagram.c b/net/core/datagram.c
index 00f961c57d69..b9a63105b80f 100644
--- a/net/core/datagram.c
+++ b/net/core/datagram.c
@@ -62,6 +62,8 @@
 #include <trace/events/skb.h>
 #include <net/busy_poll.h>
 
+#include "datagram.h"
+
 /*
  *	Is a socket 'connection oriented' ?
  */
diff --git a/net/core/datagram.h b/net/core/datagram.h
new file mode 100644
index 000000000000..bcfb75bfa3b2
--- /dev/null
+++ b/net/core/datagram.h
@@ -0,0 +1,15 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef _NET_CORE_DATAGRAM_H_
+#define _NET_CORE_DATAGRAM_H_
+
+#include <linux/types.h>
+
+struct sock;
+struct sk_buff;
+struct iov_iter;
+
+int __zerocopy_sg_from_iter(struct sock *sk, struct sk_buff *skb,
+			    struct iov_iter *from, size_t length);
+
+#endif /* _NET_CORE_DATAGRAM_H_ */
* Unmerged path net/core/skbuff.c
