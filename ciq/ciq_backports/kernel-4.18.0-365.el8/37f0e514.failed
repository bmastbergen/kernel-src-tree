skmsg: Lock ingress_skb when purging

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Cong Wang <cong.wang@bytedance.com>
commit 37f0e514db660f03f8982b8f4fbbd4b2740abe7d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/37f0e514.failed

Currently we purge the ingress_skb queue only when psock
refcnt goes down to 0, so locking the queue is not necessary,
but in order to be called during ->close, we have to lock it
here.

	Signed-off-by: Cong Wang <cong.wang@bytedance.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Jakub Sitnicki <jakub@cloudflare.com>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20210331023237.41094-2-xiyou.wangcong@gmail.com
(cherry picked from commit 37f0e514db660f03f8982b8f4fbbd4b2740abe7d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/skmsg.c
diff --cc net/core/skmsg.c
index c39c0a361217,bebf84ed4e30..000000000000
--- a/net/core/skmsg.c
+++ b/net/core/skmsg.c
@@@ -632,7 -632,12 +632,16 @@@ static void __sk_psock_purge_ingress_ms
  
  static void sk_psock_zap_ingress(struct sk_psock *psock)
  {
++<<<<<<< HEAD
 +	__skb_queue_purge(&psock->ingress_skb);
++=======
+ 	struct sk_buff *skb;
+ 
+ 	while ((skb = skb_dequeue(&psock->ingress_skb)) != NULL) {
+ 		skb_bpf_redirect_clear(skb);
+ 		kfree_skb(skb);
+ 	}
++>>>>>>> 37f0e514db66 (skmsg: Lock ingress_skb when purging)
  	__sk_psock_purge_ingress_msg(psock);
  }
  
* Unmerged path net/core/skmsg.c
