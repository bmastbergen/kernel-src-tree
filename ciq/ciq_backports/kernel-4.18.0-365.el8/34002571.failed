x86/fpu: Move legacy ASM wrappers to core

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 34002571cb4199a446f7582704424d20a01c276e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/34002571.failed

Nothing outside the core code requires them.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20211015011539.572439164@linutronix.de
(cherry picked from commit 34002571cb4199a446f7582704424d20a01c276e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/fpu/internal.h
#	arch/x86/kernel/fpu/signal.c
diff --cc arch/x86/include/asm/fpu/internal.h
index 7e91d8aebe3d,7722aadc3278..000000000000
--- a/arch/x86/include/asm/fpu/internal.h
+++ b/arch/x86/include/asm/fpu/internal.h
@@@ -60,276 -60,9 +60,279 @@@ extern void fpstate_init_soft(struct sw
  static inline void fpstate_init_soft(struct swregs_state *soft) {}
  #endif
  
++<<<<<<< HEAD
 +/* Returns 0 or the negated trap number, which results in -EFAULT for #PF */
 +#define user_insn(insn, output, input...)				\
 +({									\
 +	int err;							\
 +	asm volatile(ASM_STAC "\n"					\
 +		     "1: " #insn "\n"					\
 +		     "2: " ASM_CLAC "\n"				\
 +		     ".section .fixup,\"ax\"\n"				\
 +		     "3:  negl %%eax\n"					\
 +		     "    jmp  2b\n"					\
 +		     ".previous\n"					\
 +		     _ASM_EXTABLE_FAULT(1b, 3b)				\
 +		     : [err] "=a" (err), output				\
 +		     : "0"(0), input);					\
 +	err;								\
 +})
 +
 +#define kernel_insn_err(insn, output, input...)				\
 +({									\
 +	int err;							\
 +	asm volatile("1:" #insn "\n\t"					\
 +		     "2:\n"						\
 +		     ".section .fixup,\"ax\"\n"				\
 +		     "3:  movl $-1,%[err]\n"				\
 +		     "    jmp  2b\n"					\
 +		     ".previous\n"					\
 +		     _ASM_EXTABLE(1b, 3b)				\
 +		     : [err] "=r" (err), output				\
 +		     : "0"(0), input);					\
 +	err;								\
 +})
 +
 +#define kernel_insn(insn, output, input...)				\
 +	asm volatile("1:" #insn "\n\t"					\
 +		     "2:\n"						\
 +		     _ASM_EXTABLE_HANDLE(1b, 2b, ex_handler_fprestore)	\
 +		     : output : input)
 +
 +static inline int fnsave_to_user_sigframe(struct fregs_state __user *fx)
 +{
 +	return user_insn(fnsave %[fx]; fwait,  [fx] "=m" (*fx), "m" (*fx));
 +}
 +
 +static inline int fxsave_to_user_sigframe(struct fxregs_state __user *fx)
 +{
 +	if (IS_ENABLED(CONFIG_X86_32))
 +		return user_insn(fxsave %[fx], [fx] "=m" (*fx), "m" (*fx));
 +	else
 +		return user_insn(fxsaveq %[fx], [fx] "=m" (*fx), "m" (*fx));
 +}
 +
 +static inline void fxrstor(struct fxregs_state *fx)
 +{
 +	if (IS_ENABLED(CONFIG_X86_32))
 +		kernel_insn(fxrstor %[fx], "=m" (*fx), [fx] "m" (*fx));
 +	else
 +		kernel_insn(fxrstorq %[fx], "=m" (*fx), [fx] "m" (*fx));
 +}
 +
 +static inline int fxrstor_safe(struct fxregs_state *fx)
 +{
 +	if (IS_ENABLED(CONFIG_X86_32))
 +		return kernel_insn_err(fxrstor %[fx], "=m" (*fx), [fx] "m" (*fx));
 +	else
 +		return kernel_insn_err(fxrstorq %[fx], "=m" (*fx), [fx] "m" (*fx));
 +}
 +
 +static inline int fxrstor_from_user_sigframe(struct fxregs_state __user *fx)
 +{
 +	if (IS_ENABLED(CONFIG_X86_32))
 +		return user_insn(fxrstor %[fx], "=m" (*fx), [fx] "m" (*fx));
 +	else
 +		return user_insn(fxrstorq %[fx], "=m" (*fx), [fx] "m" (*fx));
 +}
 +
 +static inline void frstor(struct fregs_state *fx)
 +{
 +	kernel_insn(frstor %[fx], "=m" (*fx), [fx] "m" (*fx));
 +}
 +
 +static inline int frstor_safe(struct fregs_state *fx)
 +{
 +	return kernel_insn_err(frstor %[fx], "=m" (*fx), [fx] "m" (*fx));
 +}
 +
 +static inline int frstor_from_user_sigframe(struct fregs_state __user *fx)
 +{
 +	return user_insn(frstor %[fx], "=m" (*fx), [fx] "m" (*fx));
 +}
 +
 +static inline void fxsave(struct fxregs_state *fx)
 +{
 +	if (IS_ENABLED(CONFIG_X86_32))
 +		asm volatile( "fxsave %[fx]" : [fx] "=m" (*fx));
 +	else
 +		asm volatile("fxsaveq %[fx]" : [fx] "=m" (*fx));
 +}
 +
 +/* These macros all use (%edi)/(%rdi) as the single memory argument. */
 +#define XSAVE		".byte " REX_PREFIX "0x0f,0xae,0x27"
 +#define XSAVEOPT	".byte " REX_PREFIX "0x0f,0xae,0x37"
 +#define XSAVES		".byte " REX_PREFIX "0x0f,0xc7,0x2f"
 +#define XRSTOR		".byte " REX_PREFIX "0x0f,0xae,0x2f"
 +#define XRSTORS		".byte " REX_PREFIX "0x0f,0xc7,0x1f"
 +
 +/*
 + * After this @err contains 0 on success or the negated trap number when
 + * the operation raises an exception. For faults this results in -EFAULT.
 + */
 +#define XSTATE_OP(op, st, lmask, hmask, err)				\
 +	asm volatile("1:" op "\n\t"					\
 +		     "xor %[err], %[err]\n"				\
 +		     "2:\n\t"						\
 +		     ".pushsection .fixup,\"ax\"\n\t"			\
 +		     "3: negl %%eax\n\t"				\
 +		     "jmp 2b\n\t"					\
 +		     ".popsection\n\t"					\
 +		     _ASM_EXTABLE_FAULT(1b, 3b)				\
 +		     : [err] "=a" (err)					\
 +		     : "D" (st), "m" (*st), "a" (lmask), "d" (hmask)	\
 +		     : "memory")
 +
 +/*
 + * If XSAVES is enabled, it replaces XSAVEOPT because it supports a compact
 + * format and supervisor states in addition to modified optimization in
 + * XSAVEOPT.
 + *
 + * Otherwise, if XSAVEOPT is enabled, XSAVEOPT replaces XSAVE because XSAVEOPT
 + * supports modified optimization which is not supported by XSAVE.
 + *
 + * We use XSAVE as a fallback.
 + *
 + * The 661 label is defined in the ALTERNATIVE* macros as the address of the
 + * original instruction which gets replaced. We need to use it here as the
 + * address of the instruction where we might get an exception at.
 + */
 +#define XSTATE_XSAVE(st, lmask, hmask, err)				\
 +	asm volatile(ALTERNATIVE_2(XSAVE,				\
 +				   XSAVEOPT, X86_FEATURE_XSAVEOPT,	\
 +				   XSAVES,   X86_FEATURE_XSAVES)	\
 +		     "\n"						\
 +		     "xor %[err], %[err]\n"				\
 +		     "3:\n"						\
 +		     ".pushsection .fixup,\"ax\"\n"			\
 +		     "4: movl $-2, %[err]\n"				\
 +		     "jmp 3b\n"						\
 +		     ".popsection\n"					\
 +		     _ASM_EXTABLE(661b, 4b)				\
 +		     : [err] "=r" (err)					\
 +		     : "D" (st), "m" (*st), "a" (lmask), "d" (hmask)	\
 +		     : "memory")
 +
 +/*
 + * Use XRSTORS to restore context if it is enabled. XRSTORS supports compact
 + * XSAVE area format.
 + */
 +#define XSTATE_XRESTORE(st, lmask, hmask)				\
 +	asm volatile(ALTERNATIVE(XRSTOR,				\
 +				 XRSTORS, X86_FEATURE_XSAVES)		\
 +		     "\n"						\
 +		     "3:\n"						\
 +		     _ASM_EXTABLE_HANDLE(661b, 3b, ex_handler_fprestore)\
 +		     :							\
 +		     : "D" (st), "m" (*st), "a" (lmask), "d" (hmask)	\
 +		     : "memory")
 +
 +/*
 + * Save processor xstate to xsave area.
 + *
 + * Uses either XSAVE or XSAVEOPT or XSAVES depending on the CPU features
 + * and command line options. The choice is permanent until the next reboot.
 + */
 +static inline void os_xsave(struct xregs_state *xstate)
 +{
 +	u64 mask = xfeatures_mask_all;
 +	u32 lmask = mask;
 +	u32 hmask = mask >> 32;
 +	int err;
 +
 +	WARN_ON_FPU(!alternatives_patched);
 +
 +	XSTATE_XSAVE(xstate, lmask, hmask, err);
 +
 +	/* We should never fault when copying to a kernel buffer: */
 +	WARN_ON_FPU(err);
 +}
 +
 +/*
 + * Restore processor xstate from xsave area.
 + *
 + * Uses XRSTORS when XSAVES is used, XRSTOR otherwise.
 + */
 +static inline void os_xrstor(struct xregs_state *xstate, u64 mask)
 +{
 +	u32 lmask = mask;
 +	u32 hmask = mask >> 32;
 +
 +	XSTATE_XRESTORE(xstate, lmask, hmask);
 +}
 +
 +/*
 + * Save xstate to user space xsave area.
 + *
 + * We don't use modified optimization because xrstor/xrstors might track
 + * a different application.
 + *
 + * We don't use compacted format xsave area for backward compatibility for
 + * old applications which don't understand the compacted format of the
 + * xsave area.
 + *
 + * The caller has to zero buf::header before calling this because XSAVE*
 + * does not touch the reserved fields in the header.
 + */
 +static inline int xsave_to_user_sigframe(struct xregs_state __user *buf)
 +{
 +	/*
 +	 * Include the features which are not xsaved/rstored by the kernel
 +	 * internally, e.g. PKRU. That's user space ABI and also required
 +	 * to allow the signal handler to modify PKRU.
 +	 */
 +	u64 mask = xfeatures_mask_uabi();
 +	u32 lmask = mask;
 +	u32 hmask = mask >> 32;
 +	int err;
 +
 +	stac();
 +	XSTATE_OP(XSAVE, buf, lmask, hmask, err);
 +	clac();
 +
 +	return err;
 +}
 +
 +/*
 + * Restore xstate from user space xsave area.
 + */
 +static inline int xrstor_from_user_sigframe(struct xregs_state __user *buf, u64 mask)
 +{
 +	struct xregs_state *xstate = ((__force struct xregs_state *)buf);
 +	u32 lmask = mask;
 +	u32 hmask = mask >> 32;
 +	int err;
 +
 +	stac();
 +	XSTATE_OP(XRSTOR, xstate, lmask, hmask, err);
 +	clac();
 +
 +	return err;
 +}
 +
 +/*
 + * Restore xstate from kernel space xsave area, return an error code instead of
 + * an exception.
 + */
 +static inline int os_xrstor_safe(struct xregs_state *xstate, u64 mask)
 +{
 +	u32 lmask = mask;
 +	u32 hmask = mask >> 32;
 +	int err;
 +
 +	if (cpu_feature_enabled(X86_FEATURE_XSAVES))
 +		XSTATE_OP(XRSTORS, xstate, lmask, hmask, err);
 +	else
 +		XSTATE_OP(XRSTOR, xstate, lmask, hmask, err);
 +
 +	return err;
 +}
 +
++=======
++>>>>>>> 34002571cb41 (x86/fpu: Move legacy ASM wrappers to core)
  extern void restore_fpregs_from_fpstate(union fpregs_state *fpstate, u64 mask);
  
 -extern bool copy_fpstate_to_sigframe(void __user *buf, void __user *fp, int size);
 +extern int copy_fpstate_to_sigframe(void __user *buf, void __user *fp, int size);
  
  /*
   * FPU context switch related helper methods:
diff --cc arch/x86/kernel/fpu/signal.c
index 090bd82561bb,e0198b24e28c..000000000000
--- a/arch/x86/kernel/fpu/signal.c
+++ b/arch/x86/kernel/fpu/signal.c
@@@ -16,6 -16,9 +16,11 @@@
  #include <asm/trace/fpu.h>
  
  #include "internal.h"
++<<<<<<< HEAD
++=======
+ #include "legacy.h"
+ #include "xstate.h"
++>>>>>>> 34002571cb41 (x86/fpu: Move legacy ASM wrappers to core)
  
  static struct _fpx_sw_bytes fx_sw_reserved __ro_after_init;
  static struct _fpx_sw_bytes fx_sw_reserved_ia32 __ro_after_init;
* Unmerged path arch/x86/include/asm/fpu/internal.h
diff --git a/arch/x86/kernel/fpu/core.c b/arch/x86/kernel/fpu/core.c
index e2b72bcd4dd5..6456241a8317 100644
--- a/arch/x86/kernel/fpu/core.c
+++ b/arch/x86/kernel/fpu/core.c
@@ -18,6 +18,7 @@
 #include <linux/pkeys.h>
 
 #include "internal.h"
+#include "legacy.h"
 #include "xstate.h"
 
 #define CREATE_TRACE_POINTS
diff --git a/arch/x86/kernel/fpu/legacy.h b/arch/x86/kernel/fpu/legacy.h
new file mode 100644
index 000000000000..2ff36b0f79e9
--- /dev/null
+++ b/arch/x86/kernel/fpu/legacy.h
@@ -0,0 +1,108 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __X86_KERNEL_FPU_LEGACY_H
+#define __X86_KERNEL_FPU_LEGACY_H
+
+#include <asm/fpu/types.h>
+
+/*
+ * Returns 0 on success or the trap number when the operation raises an
+ * exception.
+ */
+#define user_insn(insn, output, input...)				\
+({									\
+	int err;							\
+									\
+	might_fault();							\
+									\
+	asm volatile(ASM_STAC "\n"					\
+		     "1: " #insn "\n"					\
+		     "2: " ASM_CLAC "\n"				\
+		     _ASM_EXTABLE_TYPE(1b, 2b, EX_TYPE_FAULT_MCE_SAFE)	\
+		     : [err] "=a" (err), output				\
+		     : "0"(0), input);					\
+	err;								\
+})
+
+#define kernel_insn_err(insn, output, input...)				\
+({									\
+	int err;							\
+	asm volatile("1:" #insn "\n\t"					\
+		     "2:\n"						\
+		     ".section .fixup,\"ax\"\n"				\
+		     "3:  movl $-1,%[err]\n"				\
+		     "    jmp  2b\n"					\
+		     ".previous\n"					\
+		     _ASM_EXTABLE(1b, 3b)				\
+		     : [err] "=r" (err), output				\
+		     : "0"(0), input);					\
+	err;								\
+})
+
+#define kernel_insn(insn, output, input...)				\
+	asm volatile("1:" #insn "\n\t"					\
+		     "2:\n"						\
+		     _ASM_EXTABLE_TYPE(1b, 2b, EX_TYPE_FPU_RESTORE)	\
+		     : output : input)
+
+static inline int fnsave_to_user_sigframe(struct fregs_state __user *fx)
+{
+	return user_insn(fnsave %[fx]; fwait,  [fx] "=m" (*fx), "m" (*fx));
+}
+
+static inline int fxsave_to_user_sigframe(struct fxregs_state __user *fx)
+{
+	if (IS_ENABLED(CONFIG_X86_32))
+		return user_insn(fxsave %[fx], [fx] "=m" (*fx), "m" (*fx));
+	else
+		return user_insn(fxsaveq %[fx], [fx] "=m" (*fx), "m" (*fx));
+
+}
+
+static inline void fxrstor(struct fxregs_state *fx)
+{
+	if (IS_ENABLED(CONFIG_X86_32))
+		kernel_insn(fxrstor %[fx], "=m" (*fx), [fx] "m" (*fx));
+	else
+		kernel_insn(fxrstorq %[fx], "=m" (*fx), [fx] "m" (*fx));
+}
+
+static inline int fxrstor_safe(struct fxregs_state *fx)
+{
+	if (IS_ENABLED(CONFIG_X86_32))
+		return kernel_insn_err(fxrstor %[fx], "=m" (*fx), [fx] "m" (*fx));
+	else
+		return kernel_insn_err(fxrstorq %[fx], "=m" (*fx), [fx] "m" (*fx));
+}
+
+static inline int fxrstor_from_user_sigframe(struct fxregs_state __user *fx)
+{
+	if (IS_ENABLED(CONFIG_X86_32))
+		return user_insn(fxrstor %[fx], "=m" (*fx), [fx] "m" (*fx));
+	else
+		return user_insn(fxrstorq %[fx], "=m" (*fx), [fx] "m" (*fx));
+}
+
+static inline void frstor(struct fregs_state *fx)
+{
+	kernel_insn(frstor %[fx], "=m" (*fx), [fx] "m" (*fx));
+}
+
+static inline int frstor_safe(struct fregs_state *fx)
+{
+	return kernel_insn_err(frstor %[fx], "=m" (*fx), [fx] "m" (*fx));
+}
+
+static inline int frstor_from_user_sigframe(struct fregs_state __user *fx)
+{
+	return user_insn(frstor %[fx], "=m" (*fx), [fx] "m" (*fx));
+}
+
+static inline void fxsave(struct fxregs_state *fx)
+{
+	if (IS_ENABLED(CONFIG_X86_32))
+		asm volatile( "fxsave %[fx]" : [fx] "=m" (*fx));
+	else
+		asm volatile("fxsaveq %[fx]" : [fx] "=m" (*fx));
+}
+
+#endif
* Unmerged path arch/x86/kernel/fpu/signal.c
diff --git a/arch/x86/kernel/fpu/xstate.c b/arch/x86/kernel/fpu/xstate.c
index 8c27dcecbad5..22e156e68ee3 100644
--- a/arch/x86/kernel/fpu/xstate.c
+++ b/arch/x86/kernel/fpu/xstate.c
@@ -20,6 +20,7 @@
 #include <asm/tlbflush.h>
 
 #include "internal.h"
+#include "legacy.h"
 #include "xstate.h"
 
 #define for_each_extended_xfeature(bit, mask)				\
