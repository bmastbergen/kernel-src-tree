iommu/dma: Fold _swiotlb helpers into callers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author David Stevens <stevensd@chromium.org>
commit 9b49bbc2c4dfd0431bf7ff4e862171189cf94b7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/9b49bbc2.failed

Fold the _swiotlb helper functions into the respective _page functions,
since recent fixes have moved all logic from the _page functions to the
_swiotlb functions.

	Signed-off-by: David Stevens <stevensd@chromium.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
Link: https://lore.kernel.org/r/20210929023300.335969-5-stevensd@google.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 9b49bbc2c4dfd0431bf7ff4e862171189cf94b7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/dma-iommu.c
diff --cc drivers/iommu/dma-iommu.c
index 5899c384b30a,4f77c44eaf14..000000000000
--- a/drivers/iommu/dma-iommu.c
+++ b/drivers/iommu/dma-iommu.c
@@@ -497,34 -505,11 +497,37 @@@ static void __iommu_dma_unmap(struct de
  	unmapped = iommu_unmap_fast(domain, dma_addr, size, &iotlb_gather);
  	WARN_ON(unmapped != size);
  
 -	if (!iotlb_gather.queued)
 +	if (!cookie->fq_domain)
  		iommu_iotlb_sync(domain, &iotlb_gather);
 -	iommu_dma_free_iova(cookie, dma_addr, size, &iotlb_gather);
 +	iommu_dma_free_iova(cookie, dma_addr, size, iotlb_gather.freelist);
  }
  
++<<<<<<< HEAD
 +static void __iommu_dma_unmap_swiotlb(struct device *dev, dma_addr_t dma_addr,
 +		size_t size, enum dma_data_direction dir,
 +		unsigned long attrs)
 +{
 +	struct iommu_domain *domain = iommu_get_dma_domain(dev);
 +	struct iommu_dma_cookie *cookie = domain->iova_cookie;
 +	struct iova_domain *iovad = &cookie->iovad;
 +	phys_addr_t phys;
 +
 +	phys = iommu_iova_to_phys(domain, dma_addr);
 +	if (WARN_ON(!phys))
 +		return;
 +
 +	if (!(attrs & DMA_ATTR_SKIP_CPU_SYNC) && !dev_is_dma_coherent(dev))
 +		arch_sync_dma_for_cpu(phys, size, dir);
 +
 +	__iommu_dma_unmap(dev, dma_addr, size);
 +
 +	if (unlikely(is_swiotlb_buffer(phys)))
 +		swiotlb_tbl_unmap_single(dev, phys, size,
 +				iova_align(iovad, size), dir, attrs);
 +}
 +
++=======
++>>>>>>> 9b49bbc2c4df (iommu/dma: Fold _swiotlb helpers into callers)
  static dma_addr_t __iommu_dma_map(struct device *dev, phys_addr_t phys,
  		size_t size, int prot, u64 dma_mask)
  {
@@@ -551,57 -536,6 +554,60 @@@
  	return iova + iova_off;
  }
  
++<<<<<<< HEAD
 +static dma_addr_t __iommu_dma_map_swiotlb(struct device *dev, phys_addr_t phys,
 +		size_t org_size, dma_addr_t dma_mask, bool coherent,
 +		enum dma_data_direction dir, unsigned long attrs)
 +{
 +	int prot = dma_info_to_prot(dir, coherent, attrs);
 +	struct iommu_domain *domain = iommu_get_dma_domain(dev);
 +	struct iommu_dma_cookie *cookie = domain->iova_cookie;
 +	struct iova_domain *iovad = &cookie->iovad;
 +	size_t aligned_size = org_size;
 +	void *padding_start;
 +	size_t padding_size;
 +	dma_addr_t iova;
 +
 +	/*
 +	 * If both the physical buffer start address and size are
 +	 * page aligned, we don't need to use a bounce page.
 +	 */
 +	if (IS_ENABLED(CONFIG_SWIOTLB) && dev_is_untrusted(dev) &&
 +	    iova_offset(iovad, phys | org_size)) {
 +		aligned_size = iova_align(iovad, org_size);
 +		phys = swiotlb_tbl_map_single(dev, phys, org_size,
 +					      aligned_size, dir, attrs);
 +
 +		if (phys == DMA_MAPPING_ERROR)
 +			return DMA_MAPPING_ERROR;
 +
 +		/* Cleanup the padding area. */
 +		padding_start = phys_to_virt(phys);
 +		padding_size = aligned_size;
 +
 +		if (!(attrs & DMA_ATTR_SKIP_CPU_SYNC) &&
 +		    (dir == DMA_TO_DEVICE ||
 +		     dir == DMA_BIDIRECTIONAL)) {
 +			padding_start += org_size;
 +			padding_size -= org_size;
 +		}
 +
 +		memset(padding_start, 0, padding_size);
 +	}
 +
 +	if (!coherent && !(attrs & DMA_ATTR_SKIP_CPU_SYNC))
 +		arch_sync_dma_for_device(phys, org_size, dir);
 +
 +	iova = __iommu_dma_map(dev, phys, aligned_size, prot, dma_mask);
 +	if ((iova == DMA_MAPPING_ERROR) && is_swiotlb_buffer(phys))
 +		swiotlb_tbl_unmap_single(dev, phys, org_size,
 +				aligned_size, dir, attrs);
 +
 +	return iova;
 +}
 +
++=======
++>>>>>>> 9b49bbc2c4df (iommu/dma: Fold _swiotlb helpers into callers)
  static void __iommu_dma_free_pages(struct page **pages, int count)
  {
  	while (count--)
* Unmerged path drivers/iommu/dma-iommu.c
