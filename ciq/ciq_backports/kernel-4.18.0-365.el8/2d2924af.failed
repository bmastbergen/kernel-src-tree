net: ethernet: fix similar warning reported by kbuild test robot

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Petr Štetiar <ynezz@true.cz>
commit 2d2924af96881f3300239156d6ff316a1a3e48e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/2d2924af.failed

This patch fixes following (similar) warning reported by kbuild test robot:

 In function ‘memcpy’,
  inlined from ‘smsc75xx_init_mac_address’ at drivers/net/usb/smsc75xx.c:778:3,
  inlined from ‘smsc75xx_bind’ at drivers/net/usb/smsc75xx.c:1501:2:
  ./include/linux/string.h:355:9: warning: argument 2 null where non-null expected [-Wnonnull]
  return __builtin_memcpy(p, q, size);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
  drivers/net/usb/smsc75xx.c: In function ‘smsc75xx_bind’:
  ./include/linux/string.h:355:9: note: in a call to built-in function ‘__builtin_memcpy’

I've replaced the offending memcpy with ether_addr_copy, because I'm
100% sure, that of_get_mac_address can't return NULL as it returns valid
pointer or ERR_PTR encoded value, nothing else.

I'm hesitant to just change IS_ERR into IS_ERR_OR_NULL check, as this
would make the warning disappear also, but it would be confusing to
check for impossible return value just to make a compiler happy.

I'm now changing all occurencies of memcpy to ether_addr_copy after the
of_get_mac_address call, as it's very likely, that we're going to get
similar reports from kbuild test robot in the future.

Fixes: a51645f70f63 ("net: ethernet: support of_get_mac_address new ERR_PTR error")
	Reported-by: kbuild test robot <lkp@intel.com>
	Signed-off-by: Petr Štetiar <ynezz@true.cz>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2d2924af96881f3300239156d6ff316a1a3e48e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/allwinner/sun4i-emac.c
#	drivers/net/ethernet/arc/emac_main.c
#	drivers/net/ethernet/cavium/octeon/octeon_mgmt.c
#	drivers/net/ethernet/davicom/dm9000.c
#	drivers/net/ethernet/freescale/fec_mpc52xx.c
#	drivers/net/ethernet/freescale/fs_enet/fs_enet-main.c
#	drivers/net/ethernet/freescale/gianfar.c
#	drivers/net/ethernet/freescale/ucc_geth.c
#	drivers/net/ethernet/marvell/mv643xx_eth.c
#	drivers/net/ethernet/marvell/sky2.c
#	drivers/net/ethernet/micrel/ks8851.c
#	drivers/net/ethernet/micrel/ks8851_mll.c
#	drivers/net/ethernet/nxp/lpc_eth.c
#	drivers/net/ethernet/renesas/sh_eth.c
#	drivers/net/ethernet/ti/cpsw.c
diff --cc drivers/net/ethernet/allwinner/sun4i-emac.c
index 7b54c4472fb3,9e06dff619c3..000000000000
--- a/drivers/net/ethernet/allwinner/sun4i-emac.c
+++ b/drivers/net/ethernet/allwinner/sun4i-emac.c
@@@ -870,8 -870,8 +870,13 @@@ static int emac_probe(struct platform_d
  
  	/* Read MAC-address from DT */
  	mac_addr = of_get_mac_address(np);
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(ndev->dev_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(ndev->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  
  	/* Check if the MAC address is valid, if not get a random one */
  	if (!is_valid_ether_addr(ndev->dev_addr)) {
diff --cc drivers/net/ethernet/arc/emac_main.c
index 4406325fdd9f,13a1d99b29c6..000000000000
--- a/drivers/net/ethernet/arc/emac_main.c
+++ b/drivers/net/ethernet/arc/emac_main.c
@@@ -960,8 -960,8 +960,13 @@@ int arc_emac_probe(struct net_device *n
  	/* Get MAC address from device tree */
  	mac_addr = of_get_mac_address(dev->of_node);
  
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(ndev->dev_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(ndev->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  	else
  		eth_hw_addr_random(ndev);
  
diff --cc drivers/net/ethernet/cavium/octeon/octeon_mgmt.c
index a8e5b6b02696,0e5de88fd6e8..000000000000
--- a/drivers/net/ethernet/cavium/octeon/octeon_mgmt.c
+++ b/drivers/net/ethernet/cavium/octeon/octeon_mgmt.c
@@@ -1502,8 -1503,8 +1502,13 @@@ static int octeon_mgmt_probe(struct pla
  
  	mac = of_get_mac_address(pdev->dev.of_node);
  
++<<<<<<< HEAD
 +	if (mac)
 +		memcpy(netdev->dev_addr, mac, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac))
+ 		ether_addr_copy(netdev->dev_addr, mac);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  	else
  		eth_hw_addr_random(netdev);
  
diff --cc drivers/net/ethernet/davicom/dm9000.c
index 1ea29122e1f2,5e1aff9a5fd6..000000000000
--- a/drivers/net/ethernet/davicom/dm9000.c
+++ b/drivers/net/ethernet/davicom/dm9000.c
@@@ -1411,8 -1412,8 +1411,13 @@@ static struct dm9000_plat_data *dm9000_
  		pdata->flags |= DM9000_PLATF_NO_EEPROM;
  
  	mac_addr = of_get_mac_address(np);
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(pdata->dev_addr, mac_addr, sizeof(pdata->dev_addr));
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(pdata->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  
  	return pdata;
  }
diff --cc drivers/net/ethernet/freescale/fec_mpc52xx.c
index dc20614b8f44,30cdb246d020..000000000000
--- a/drivers/net/ethernet/freescale/fec_mpc52xx.c
+++ b/drivers/net/ethernet/freescale/fec_mpc52xx.c
@@@ -901,8 -902,8 +901,13 @@@ static int mpc52xx_fec_probe(struct pla
  	 * First try to read MAC address from DT
  	 */
  	mac_addr = of_get_mac_address(np);
++<<<<<<< HEAD
 +	if (mac_addr) {
 +		memcpy(ndev->dev_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr)) {
+ 		ether_addr_copy(ndev->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  	} else {
  		struct mpc52xx_fec __iomem *fec = priv->fec;
  
diff --cc drivers/net/ethernet/freescale/fs_enet/fs_enet-main.c
index 8379ab1dc6e3,5fad73b2e123..000000000000
--- a/drivers/net/ethernet/freescale/fs_enet/fs_enet-main.c
+++ b/drivers/net/ethernet/freescale/fs_enet/fs_enet-main.c
@@@ -1013,8 -1014,8 +1013,13 @@@ static int fs_enet_probe(struct platfor
  	spin_lock_init(&fep->tx_lock);
  
  	mac_addr = of_get_mac_address(ofdev->dev.of_node);
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(ndev->dev_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(ndev->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  
  	ret = fep->ops->allocate_bd(ndev);
  	if (ret)
diff --cc drivers/net/ethernet/freescale/gianfar.c
index de9438022f2e,e670cd293dba..000000000000
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@@ -873,8 -872,8 +873,13 @@@ static int gfar_of_init(struct platform
  
  	mac_addr = of_get_mac_address(np);
  
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(dev->dev_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(dev->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  
  	if (model && !strcasecmp(model, "TSEC"))
  		priv->device_flags |= FSL_GIANFAR_DEV_HAS_GIGABIT |
diff --cc drivers/net/ethernet/freescale/ucc_geth.c
index 2e8e7a2fde71,4d6892d2f0a4..000000000000
--- a/drivers/net/ethernet/freescale/ucc_geth.c
+++ b/drivers/net/ethernet/freescale/ucc_geth.c
@@@ -3898,8 -3910,8 +3898,13 @@@ static int ucc_geth_probe(struct platfo
  	}
  
  	mac_addr = of_get_mac_address(np);
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(dev->dev_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(dev->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  
  	ugeth->ug_info = ug_info;
  	ugeth->dev = device;
diff --cc drivers/net/ethernet/marvell/mv643xx_eth.c
index 8772a715952f,409b69fd4374..000000000000
--- a/drivers/net/ethernet/marvell/mv643xx_eth.c
+++ b/drivers/net/ethernet/marvell/mv643xx_eth.c
@@@ -2753,8 -2749,8 +2753,13 @@@ static int mv643xx_eth_shared_of_add_po
  	}
  
  	mac_addr = of_get_mac_address(pnp);
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(ppd.mac_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(ppd.mac_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  
  	mv643xx_eth_property(pnp, "tx-queue-size", ppd.tx_queue_size);
  	mv643xx_eth_property(pnp, "tx-sram-addr", ppd.tx_sram_addr);
diff --cc drivers/net/ethernet/marvell/sky2.c
index 0e01b4486d17,5adf307fbbfd..000000000000
--- a/drivers/net/ethernet/marvell/sky2.c
+++ b/drivers/net/ethernet/marvell/sky2.c
@@@ -4821,8 -4804,8 +4821,13 @@@ static struct net_device *sky2_init_net
  	 * 2) from internal registers set by bootloader
  	 */
  	iap = of_get_mac_address(hw->pdev->dev.of_node);
++<<<<<<< HEAD
 +	if (iap)
 +		memcpy(dev->dev_addr, iap, ETH_ALEN);
++=======
+ 	if (!IS_ERR(iap))
+ 		ether_addr_copy(dev->dev_addr, iap);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  	else
  		memcpy_fromio(dev->dev_addr, hw->regs + B2_MAC_1 + port * 8,
  			      ETH_ALEN);
diff --cc drivers/net/ethernet/micrel/ks8851.c
index bd6e9014bc74,ba4fdf1b0dea..000000000000
--- a/drivers/net/ethernet/micrel/ks8851.c
+++ b/drivers/net/ethernet/micrel/ks8851.c
@@@ -419,8 -425,8 +419,13 @@@ static void ks8851_init_mac(struct ks88
  	const u8 *mac_addr;
  
  	mac_addr = of_get_mac_address(ks->spidev->dev.of_node);
++<<<<<<< HEAD
 +	if (mac_addr) {
 +		memcpy(dev->dev_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr)) {
+ 		ether_addr_copy(dev->dev_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  		ks8851_write_mac_addr(dev);
  		return;
  	}
diff --cc drivers/net/ethernet/micrel/ks8851_mll.c
index f3e9dd47b56f,e5c8412c08c1..000000000000
--- a/drivers/net/ethernet/micrel/ks8851_mll.c
+++ b/drivers/net/ethernet/micrel/ks8851_mll.c
@@@ -1633,8 -1327,8 +1633,13 @@@ static int ks8851_probe(struct platform
  	/* overwriting the default MAC address */
  	if (pdev->dev.of_node) {
  		mac = of_get_mac_address(pdev->dev.of_node);
++<<<<<<< HEAD
 +		if (mac)
 +			memcpy(ks->mac_addr, mac, ETH_ALEN);
++=======
+ 		if (!IS_ERR(mac))
+ 			ether_addr_copy(ks->mac_addr, mac);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  	} else {
  		struct ks8851_mll_platform_data *pdata;
  
diff --cc drivers/net/ethernet/nxp/lpc_eth.c
index f378a450e51b,fec604c4c0d3..000000000000
--- a/drivers/net/ethernet/nxp/lpc_eth.c
+++ b/drivers/net/ethernet/nxp/lpc_eth.c
@@@ -1382,9 -1367,9 +1382,15 @@@ static int lpc_eth_drv_probe(struct pla
  	__lpc_get_mac(pldat, ndev->dev_addr);
  
  	if (!is_valid_ether_addr(ndev->dev_addr)) {
++<<<<<<< HEAD
 +		const char *macaddr = of_get_mac_address(pdev->dev.of_node);
 +		if (macaddr)
 +			memcpy(ndev->dev_addr, macaddr, ETH_ALEN);
++=======
+ 		const char *macaddr = of_get_mac_address(np);
+ 		if (!IS_ERR(macaddr))
+ 			ether_addr_copy(ndev->dev_addr, macaddr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  	}
  	if (!is_valid_ether_addr(ndev->dev_addr))
  		eth_hw_addr_random(ndev);
diff --cc drivers/net/ethernet/renesas/sh_eth.c
index d3bb8450ca29,6354f19a31eb..000000000000
--- a/drivers/net/ethernet/renesas/sh_eth.c
+++ b/drivers/net/ethernet/renesas/sh_eth.c
@@@ -3104,11 -3186,14 +3104,16 @@@ static struct sh_eth_plat_data *sh_eth_
  	if (!pdata)
  		return NULL;
  
 -	ret = of_get_phy_mode(np);
 -	if (ret < 0)
 -		return NULL;
 -	pdata->phy_interface = ret;
 +	pdata->phy_interface = of_get_phy_mode(np);
  
  	mac_addr = of_get_mac_address(np);
++<<<<<<< HEAD
 +	if (mac_addr)
 +		memcpy(pdata->mac_addr, mac_addr, ETH_ALEN);
++=======
+ 	if (!IS_ERR(mac_addr))
+ 		ether_addr_copy(pdata->mac_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  
  	pdata->no_ether_link =
  		of_property_read_bool(np, "renesas,no-ether-link");
diff --cc drivers/net/ethernet/ti/cpsw.c
index 49ae576ed25d,634fc484a0b3..000000000000
--- a/drivers/net/ethernet/ti/cpsw.c
+++ b/drivers/net/ethernet/ti/cpsw.c
@@@ -2842,8 -2232,8 +2842,13 @@@ static int cpsw_probe_dt(struct cpsw_pl
  
  no_phy_slave:
  		mac_addr = of_get_mac_address(slave_node);
++<<<<<<< HEAD
 +		if (mac_addr) {
 +			memcpy(slave_data->mac_addr, mac_addr, ETH_ALEN);
++=======
+ 		if (!IS_ERR(mac_addr)) {
+ 			ether_addr_copy(slave_data->mac_addr, mac_addr);
++>>>>>>> 2d2924af9688 (net: ethernet: fix similar warning reported by kbuild test robot)
  		} else {
  			ret = ti_cm_get_macid(&pdev->dev, i,
  					      slave_data->mac_addr);
* Unmerged path drivers/net/ethernet/allwinner/sun4i-emac.c
* Unmerged path drivers/net/ethernet/arc/emac_main.c
* Unmerged path drivers/net/ethernet/cavium/octeon/octeon_mgmt.c
* Unmerged path drivers/net/ethernet/davicom/dm9000.c
* Unmerged path drivers/net/ethernet/freescale/fec_mpc52xx.c
diff --git a/drivers/net/ethernet/freescale/fman/mac.c b/drivers/net/ethernet/freescale/fman/mac.c
index d4e575032b3e..139656c510d6 100644
--- a/drivers/net/ethernet/freescale/fman/mac.c
+++ b/drivers/net/ethernet/freescale/fman/mac.c
@@ -726,7 +726,7 @@ static int mac_probe(struct platform_device *_of_dev)
 		err = -EINVAL;
 		goto _return_of_get_parent;
 	}
-	memcpy(mac_dev->addr, mac_addr, sizeof(mac_dev->addr));
+	ether_addr_copy(mac_dev->addr, mac_addr);
 
 	/* Get the port handles */
 	nph = of_count_phandle_with_args(mac_node, "fsl,fman-ports", NULL);
* Unmerged path drivers/net/ethernet/freescale/fs_enet/fs_enet-main.c
* Unmerged path drivers/net/ethernet/freescale/gianfar.c
* Unmerged path drivers/net/ethernet/freescale/ucc_geth.c
* Unmerged path drivers/net/ethernet/marvell/mv643xx_eth.c
diff --git a/drivers/net/ethernet/marvell/mvneta.c b/drivers/net/ethernet/marvell/mvneta.c
index 304c49ad6c9b..51ddd1fac9b6 100644
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@ -4426,7 +4426,7 @@ static int mvneta_probe(struct platform_device *pdev)
 	dt_mac_addr = of_get_mac_address(dn);
 	if (dt_mac_addr) {
 		mac_from = "device tree";
-		memcpy(dev->dev_addr, dt_mac_addr, ETH_ALEN);
+		ether_addr_copy(dev->dev_addr, dt_mac_addr);
 	} else {
 		mvneta_get_mac_addr(pp, hw_mac_addr);
 		if (is_valid_ether_addr(hw_mac_addr)) {
* Unmerged path drivers/net/ethernet/marvell/sky2.c
* Unmerged path drivers/net/ethernet/micrel/ks8851.c
* Unmerged path drivers/net/ethernet/micrel/ks8851_mll.c
* Unmerged path drivers/net/ethernet/nxp/lpc_eth.c
* Unmerged path drivers/net/ethernet/renesas/sh_eth.c
* Unmerged path drivers/net/ethernet/ti/cpsw.c
diff --git a/drivers/net/ethernet/xilinx/ll_temac_main.c b/drivers/net/ethernet/xilinx/ll_temac_main.c
index 60abc9250f56..54a3eea89e8b 100644
--- a/drivers/net/ethernet/xilinx/ll_temac_main.c
+++ b/drivers/net/ethernet/xilinx/ll_temac_main.c
@@ -335,7 +335,7 @@ static void temac_do_set_mac_address(struct net_device *ndev)
 
 static int temac_init_mac_address(struct net_device *ndev, const void *address)
 {
-	memcpy(ndev->dev_addr, address, ETH_ALEN);
+	ether_addr_copy(ndev->dev_addr, address);
 	if (!is_valid_ether_addr(ndev->dev_addr))
 		eth_hw_addr_random(ndev);
 	temac_do_set_mac_address(ndev);
diff --git a/drivers/net/ethernet/xilinx/xilinx_emaclite.c b/drivers/net/ethernet/xilinx/xilinx_emaclite.c
index b1700225a984..6a4d58732399 100644
--- a/drivers/net/ethernet/xilinx/xilinx_emaclite.c
+++ b/drivers/net/ethernet/xilinx/xilinx_emaclite.c
@@ -1128,7 +1128,7 @@ static int xemaclite_of_probe(struct platform_device *ofdev)
 
 	if (mac_address) {
 		/* Set the MAC address. */
-		memcpy(ndev->dev_addr, mac_address, ETH_ALEN);
+		ether_addr_copy(ndev->dev_addr, mac_address);
 	} else {
 		dev_warn(dev, "No MAC address found, using random\n");
 		eth_hw_addr_random(ndev);
