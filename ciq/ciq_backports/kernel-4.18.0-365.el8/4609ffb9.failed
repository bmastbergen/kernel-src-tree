igc: Refactor XDP rxq info registration

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Andre Guedes <andre.guedes@intel.com>
commit 4609ffb9f6157880e76c038f8df4fbf4e148a41a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/4609ffb9.failed

Refactor XDP rxq info registration code, preparing the driver for AF_XDP
zero-copy support which is added by upcoming patches.

Currently, xdp_rxq and memory model are both registered during RX
resource setup time by igc_xdp_register_rxq_info() helper. With AF_XDP,
we want to register the memory model later on while configuring the ring
because we will know which memory model type to register
(MEM_TYPE_PAGE_SHARED or MEM_TYPE_XSK_BUFF_POOL).

The helpers igc_xdp_register_rxq_info() and igc_xdp_unregister_rxq_
info() are not useful anymore so they are removed.

	Signed-off-by: Andre Guedes <andre.guedes@intel.com>
	Signed-off-by: Vedang Patel <vedang.patel@intel.com>
	Signed-off-by: Jithu Joseph <jithu.joseph@intel.com>
	Reviewed-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Tested-by: Dvora Fuxbrumer <dvorax.fuxbrumer@linux.intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 4609ffb9f6157880e76c038f8df4fbf4e148a41a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igc/igc_main.c
#	drivers/net/ethernet/intel/igc/igc_xdp.c
#	drivers/net/ethernet/intel/igc/igc_xdp.h
diff --cc drivers/net/ethernet/intel/igc/igc_main.c
index 261f28037c1a,90d8e4355f43..000000000000
--- a/drivers/net/ethernet/intel/igc/igc_main.c
+++ b/drivers/net/ethernet/intel/igc/igc_main.c
@@@ -405,6 -419,8 +405,11 @@@ void igc_free_rx_resources(struct igc_r
  {
  	igc_clean_rx_ring(rx_ring);
  
++<<<<<<< HEAD
++=======
+ 	xdp_rxq_info_unreg(&rx_ring->xdp_rxq);
+ 
++>>>>>>> 4609ffb9f615 (igc: Refactor XDP rxq info registration)
  	vfree(rx_ring->rx_buffer_info);
  	rx_ring->rx_buffer_info = NULL;
  
@@@ -442,7 -458,16 +447,20 @@@ int igc_setup_rx_resources(struct igc_r
  {
  	struct net_device *ndev = rx_ring->netdev;
  	struct device *dev = rx_ring->dev;
++<<<<<<< HEAD
 +	int size, desc_len;
++=======
+ 	u8 index = rx_ring->queue_index;
+ 	int size, desc_len, res;
+ 
+ 	res = xdp_rxq_info_reg(&rx_ring->xdp_rxq, ndev, index,
+ 			       rx_ring->q_vector->napi.napi_id);
+ 	if (res < 0) {
+ 		netdev_err(ndev, "Failed to register xdp_rxq index %u\n",
+ 			   index);
+ 		return res;
+ 	}
++>>>>>>> 4609ffb9f615 (igc: Refactor XDP rxq info registration)
  
  	size = sizeof(struct igc_rx_buffer) * rx_ring->count;
  	rx_ring->rx_buffer_info = vzalloc(size);
@@@ -468,6 -493,7 +486,10 @@@
  	return 0;
  
  err:
++<<<<<<< HEAD
++=======
+ 	xdp_rxq_info_unreg(&rx_ring->xdp_rxq);
++>>>>>>> 4609ffb9f615 (igc: Refactor XDP rxq info registration)
  	vfree(rx_ring->rx_buffer_info);
  	rx_ring->rx_buffer_info = NULL;
  	netdev_err(ndev, "Unable to allocate memory for Rx descriptor ring\n");
@@@ -515,6 -541,12 +537,15 @@@ static void igc_configure_rx_ring(struc
  	u32 srrctl = 0, rxdctl = 0;
  	u64 rdba = ring->dma;
  
++<<<<<<< HEAD
++=======
+ 	WARN_ON(xdp_rxq_info_reg_mem_model(&ring->xdp_rxq,
+ 					   MEM_TYPE_PAGE_SHARED, NULL));
+ 
+ 	if (igc_xdp_is_enabled(adapter))
+ 		set_ring_uses_large_buffer(ring);
+ 
++>>>>>>> 4609ffb9f615 (igc: Refactor XDP rxq info registration)
  	/* disable the queue */
  	wr32(IGC_RXDCTL(reg_idx), 0);
  
* Unmerged path drivers/net/ethernet/intel/igc/igc_xdp.c
* Unmerged path drivers/net/ethernet/intel/igc/igc_xdp.h
* Unmerged path drivers/net/ethernet/intel/igc/igc_main.c
* Unmerged path drivers/net/ethernet/intel/igc/igc_xdp.c
* Unmerged path drivers/net/ethernet/intel/igc/igc_xdp.h
