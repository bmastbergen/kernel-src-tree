dma-debug: fix debugfs initialization order

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Anthony Iliopoulos <ailiop@suse.com>
commit 173735c346c412d9f084825ecb04f24ada0e2986
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/173735c3.failed

Due to link order, dma_debug_init is called before debugfs has a chance
to initialize (via debugfs_init which also happens in the core initcall
stage), so the directories for dma-debug are never created.

Decouple dma_debug_fs_init from dma_debug_init and defer its init until
core_initcall_sync (after debugfs has been initialized) while letting
dma-debug initialization occur as soon as possible to catch any early
mappings, as suggested in [1].

[1] https://lore.kernel.org/linux-iommu/YIgGa6yF%2Fadg8OSN@kroah.com/

Fixes: 15b28bbcd567 ("dma-debug: move initialization to common code")
	Signed-off-by: Anthony Iliopoulos <ailiop@suse.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 173735c346c412d9f084825ecb04f24ada0e2986)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/dma/debug.c
diff --cc kernel/dma/debug.c
index 341ecca89d72,6c90c69e5311..000000000000
--- a/kernel/dma/debug.c
+++ b/kernel/dma/debug.c
@@@ -779,7 -765,34 +779,38 @@@ static const struct file_operations fil
  	.llseek = default_llseek,
  };
  
++<<<<<<< HEAD
 +static void dma_debug_fs_init(void)
++=======
+ static int dump_show(struct seq_file *seq, void *v)
+ {
+ 	int idx;
+ 
+ 	for (idx = 0; idx < HASH_SIZE; idx++) {
+ 		struct hash_bucket *bucket = &dma_entry_hash[idx];
+ 		struct dma_debug_entry *entry;
+ 		unsigned long flags;
+ 
+ 		spin_lock_irqsave(&bucket->lock, flags);
+ 		list_for_each_entry(entry, &bucket->list, list) {
+ 			seq_printf(seq,
+ 				   "%s %s %s idx %d P=%llx N=%lx D=%llx L=%llx %s %s\n",
+ 				   dev_name(entry->dev),
+ 				   dev_driver_string(entry->dev),
+ 				   type2name[entry->type], idx,
+ 				   phys_addr(entry), entry->pfn,
+ 				   entry->dev_addr, entry->size,
+ 				   dir2name[entry->direction],
+ 				   maperr2str[entry->map_err_type]);
+ 		}
+ 		spin_unlock_irqrestore(&bucket->lock, flags);
+ 	}
+ 	return 0;
+ }
+ DEFINE_SHOW_ATTRIBUTE(dump);
+ 
+ static int __init dma_debug_fs_init(void)
++>>>>>>> 173735c346c4 (dma-debug: fix debugfs initialization order)
  {
  	struct dentry *dentry = debugfs_create_dir("dma-api", NULL);
  
@@@ -791,7 -804,11 +822,14 @@@
  	debugfs_create_u32("min_free_entries", 0444, dentry, &min_free_entries);
  	debugfs_create_u32("nr_total_entries", 0444, dentry, &nr_total_entries);
  	debugfs_create_file("driver_filter", 0644, dentry, NULL, &filter_fops);
++<<<<<<< HEAD
++=======
+ 	debugfs_create_file("dump", 0444, dentry, NULL, &dump_fops);
+ 
+ 	return 0;
++>>>>>>> 173735c346c4 (dma-debug: fix debugfs initialization order)
  }
+ core_initcall_sync(dma_debug_fs_init);
  
  static int device_dma_allocations(struct device *dev, struct dma_debug_entry **out_entry)
  {
* Unmerged path kernel/dma/debug.c
