swiotlb: Refactor swiotlb_create_debugfs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Claire Chang <tientzu@chromium.org>
commit 6e675a1c455ea7579c7eaf1a38fe64267039d6fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/6e675a1c.failed

Split the debugfs creation to make the code reusable for supporting
different bounce buffer pools.

	Signed-off-by: Claire Chang <tientzu@chromium.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Tested-by: Stefano Stabellini <sstabellini@kernel.org>
	Tested-by: Will Deacon <will@kernel.org>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit 6e675a1c455ea7579c7eaf1a38fe64267039d6fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/dma/swiotlb.c
diff --cc kernel/dma/swiotlb.c
index be0e4e04c6fd,ae6a151d0a41..000000000000
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@@ -798,22 -664,28 +798,37 @@@ size_t swiotlb_max_mapping_size(struct 
  
  bool is_swiotlb_active(void)
  {
 -	return io_tlb_default_mem != NULL;
 +	/*
 +	 * When SWIOTLB is initialized, even if io_tlb_start points to physical
 +	 * address zero, io_tlb_end surely doesn't.
 +	 */
 +	return io_tlb_end != 0;
  }
 -EXPORT_SYMBOL_GPL(is_swiotlb_active);
  
  #ifdef CONFIG_DEBUG_FS
+ static struct dentry *debugfs_dir;
  
- static int __init swiotlb_create_debugfs(void)
+ static void swiotlb_create_debugfs_files(struct io_tlb_mem *mem)
+ {
+ 	debugfs_create_ulong("io_tlb_nslabs", 0400, mem->debugfs, &mem->nslabs);
+ 	debugfs_create_ulong("io_tlb_used", 0400, mem->debugfs, &mem->used);
+ }
+ 
+ static int __init swiotlb_create_default_debugfs(void)
  {
 -	struct io_tlb_mem *mem = io_tlb_default_mem;
 +	struct dentry *root;
  
++<<<<<<< HEAD
 +	root = debugfs_create_dir("swiotlb", NULL);
 +	debugfs_create_ulong("io_tlb_nslabs", 0400, root, &io_tlb_nslabs);
 +	debugfs_create_ulong("io_tlb_used", 0400, root, &io_tlb_used);
++=======
+ 	debugfs_dir = debugfs_create_dir("swiotlb", NULL);
+ 	if (mem) {
+ 		mem->debugfs = debugfs_dir;
+ 		swiotlb_create_debugfs_files(mem);
+ 	}
++>>>>>>> 6e675a1c455e (swiotlb: Refactor swiotlb_create_debugfs)
  	return 0;
  }
  
* Unmerged path kernel/dma/swiotlb.c
