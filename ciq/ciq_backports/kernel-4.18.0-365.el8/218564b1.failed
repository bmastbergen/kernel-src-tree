arm64: mm: Remove MAX_USER_VA_BITS definition

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Bhupesh Sharma <bhsharma@redhat.com>
commit 218564b164ad9d283d3cb3d5367705726123a610
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/218564b1.failed

commit 9b31cf493ffa ("arm64: mm: Introduce MAX_USER_VA_BITS definition")
introduced the MAX_USER_VA_BITS definition, which was used to support
the arm64 mm use-cases where the user-space could use 52-bit virtual
addresses whereas the kernel-space would still could a maximum of 48-bit
virtual addressing.

But, now with commit b6d00d47e81a ("arm64: mm: Introduce 52-bit Kernel
VAs"), we removed the 52-bit user/48-bit kernel kconfig option and hence
there is no longer any scenario where user VA != kernel VA size
(even with CONFIG_ARM64_FORCE_52BIT enabled, the same is true).

Hence we can do away with the MAX_USER_VA_BITS macro as it is equal to
VA_BITS (maximum VA space size) in all possible use-cases. Note that
even though the 'vabits_actual' value would be 48 for arm64 hardware
which don't support LVA-8.2 extension (even when CONFIG_ARM64_VA_BITS_52
is enabled), VA_BITS would still be set to a value 52. Hence this change
would be safe in all possible VA address space combinations.

	Cc: James Morse <james.morse@arm.com>
	Cc: Will Deacon <will@kernel.org>
	Cc: Steve Capper <steve.capper@arm.com>
	Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Cc: linux-kernel@vger.kernel.org
	Cc: kexec@lists.infradead.org
	Reviewed-by: Mark Rutland <mark.rutland@arm.com>
	Signed-off-by: Bhupesh Sharma <bhsharma@redhat.com>
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 218564b164ad9d283d3cb3d5367705726123a610)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/memory.h
diff --cc arch/arm64/include/asm/memory.h
index 630eaf618e50,4867e58dbc9c..000000000000
--- a/arch/arm64/include/asm/memory.h
+++ b/arch/arm64/include/asm/memory.h
@@@ -80,14 -58,16 +80,21 @@@
  #define PCI_IO_START		(PCI_IO_END - PCI_IO_SIZE)
  #define FIXADDR_TOP		(PCI_IO_START - SZ_2M)
  
 -#if VA_BITS > 48
 -#define VA_BITS_MIN		(48)
 +#define KERNEL_START      _text
 +#define KERNEL_END        _end
 +
++<<<<<<< HEAD
 +#ifdef CONFIG_ARM64_USER_VA_BITS_52
 +#define MAX_USER_VA_BITS	52
  #else
 -#define VA_BITS_MIN		(VA_BITS)
 +#define MAX_USER_VA_BITS	VA_BITS
  #endif
 -
++=======
+ #define _PAGE_END(va)		(-(UL(1) << ((va) - 1)))
+ 
+ #define KERNEL_START		_text
+ #define KERNEL_END		_end
++>>>>>>> 218564b164ad (arm64: mm: Remove MAX_USER_VA_BITS definition)
  
  /*
   * Generic and tag-based KASAN require 1/8th and 1/16th of the kernel virtual
* Unmerged path arch/arm64/include/asm/memory.h
diff --git a/arch/arm64/include/asm/pgtable-hwdef.h b/arch/arm64/include/asm/pgtable-hwdef.h
index 4b18fc45ccfc..81738264a8b3 100644
--- a/arch/arm64/include/asm/pgtable-hwdef.h
+++ b/arch/arm64/include/asm/pgtable-hwdef.h
@@ -80,7 +80,7 @@
 #define PGDIR_SHIFT		ARM64_HW_PGTABLE_LEVEL_SHIFT(4 - CONFIG_PGTABLE_LEVELS)
 #define PGDIR_SIZE		(_AC(1, UL) << PGDIR_SHIFT)
 #define PGDIR_MASK		(~(PGDIR_SIZE-1))
-#define PTRS_PER_PGD		(1 << (MAX_USER_VA_BITS - PGDIR_SHIFT))
+#define PTRS_PER_PGD		(1 << (VA_BITS - PGDIR_SHIFT))
 
 /*
  * Section address mask and size definitions.
diff --git a/arch/arm64/include/asm/processor.h b/arch/arm64/include/asm/processor.h
index 2d679c4f5884..5b74fe493297 100644
--- a/arch/arm64/include/asm/processor.h
+++ b/arch/arm64/include/asm/processor.h
@@ -20,7 +20,7 @@
 #define __ASM_PROCESSOR_H
 
 #define KERNEL_DS		UL(-1)
-#define USER_DS			((UL(1) << MAX_USER_VA_BITS) - 1)
+#define USER_DS			((UL(1) << VA_BITS) - 1)
 
 #ifndef __ASSEMBLY__
 
