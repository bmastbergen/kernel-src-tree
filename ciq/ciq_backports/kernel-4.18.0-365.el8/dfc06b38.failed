swiotlb: don't override user specified size in swiotlb_adjust_size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-365.el8
commit-author Christoph Hellwig <hch@lst.de>
commit dfc06b389a4f54e78c03abecd5b42ab6ea8d492a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-365.el8/dfc06b38.failed

If the user already specified a swiotlb size on the command line,
swiotlb_adjust_size should not overwrite it.

Fixes: 2cbc2776efe4 ("swiotlb: remove swiotlb_nr_tbl")
	Reported-by: Tom Lendacky <thomas.lendacky@amd.com>
	Tested-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit dfc06b389a4f54e78c03abecd5b42ab6ea8d492a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/dma/swiotlb.c
diff --cc kernel/dma/swiotlb.c
index be0e4e04c6fd,8ca7d505d61c..000000000000
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@@ -171,13 -118,11 +171,21 @@@ void __init swiotlb_adjust_size(unsigne
  	 * architectures such as those supporting memory encryption to
  	 * adjust/expand SWIOTLB size for their use.
  	 */
++<<<<<<< HEAD
 +	if (!io_tlb_nslabs) {
 +		size = ALIGN(new_size, IO_TLB_SIZE);
 +		io_tlb_nslabs = size >> IO_TLB_SHIFT;
 +		io_tlb_nslabs = ALIGN(io_tlb_nslabs, IO_TLB_SEGSIZE);
 +
 +		pr_info("SWIOTLB bounce buffer size adjusted to %luMB", size >> 20);
 +	}
++=======
+ 	if (default_nslabs != IO_TLB_DEFAULT_SIZE >> IO_TLB_SHIFT)
+ 		return;
+ 	size = ALIGN(size, IO_TLB_SIZE);
+ 	default_nslabs = ALIGN(size >> IO_TLB_SHIFT, IO_TLB_SEGSIZE);
+ 	pr_info("SWIOTLB bounce buffer size adjusted to %luMB", size >> 20);
++>>>>>>> dfc06b389a4f (swiotlb: don't override user specified size in swiotlb_adjust_size)
  }
  
  void swiotlb_print_info(void)
* Unmerged path kernel/dma/swiotlb.c
