net: Update window_clamp if SOCK_RCVBUF is set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.41.1.el7
commit-author Mao Wenan <wenan.mao@linux.alibaba.com>
commit 909172a149749242990a6e64cb55d55460d4e417
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.41.1.el7/909172a1.failed

When net.ipv4.tcp_syncookies=1 and syn flood is happened,
cookie_v4_check or cookie_v6_check tries to redo what
tcp_v4_send_synack or tcp_v6_send_synack did,
rsk_window_clamp will be changed if SOCK_RCVBUF is set,
which will make rcv_wscale is different, the client
still operates with initial window scale and can overshot
granted window, the client use the initial scale but local
server use new scale to advertise window value, and session
work abnormally.

Fixes: e88c64f0a425 ("tcp: allow effective reduction of TCP's rcv-buffer via setsockopt")
	Signed-off-by: Mao Wenan <wenan.mao@linux.alibaba.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
Link: https://lore.kernel.org/r/1604967391-123737-1-git-send-email-wenan.mao@linux.alibaba.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 909172a149749242990a6e64cb55d55460d4e417)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/syncookies.c
#	net/ipv6/syncookies.c
diff --cc net/ipv4/syncookies.c
index b7f3a5e40f6d,00dc3f943c80..000000000000
--- a/net/ipv4/syncookies.c
+++ b/net/ipv4/syncookies.c
@@@ -389,10 -426,15 +389,22 @@@ struct sock *cookie_v4_check(struct soc
  	}
  
  	/* Try to redo what tcp_v4_send_synack did. */
++<<<<<<< HEAD
 +	req->window_clamp = tp->window_clamp ? :dst_metric(&rt->dst, RTAX_WINDOW);
 +
 +	tcp_select_initial_window(tcp_full_space(sk), req->mss,
 +				  &req->rcv_wnd, &req->window_clamp,
++=======
+ 	req->rsk_window_clamp = tp->window_clamp ? :dst_metric(&rt->dst, RTAX_WINDOW);
+ 	/* limit the window selection if the user enforce a smaller rx buffer */
+ 	full_space = tcp_full_space(sk);
+ 	if (sk->sk_userlocks & SOCK_RCVBUF_LOCK &&
+ 	    (req->rsk_window_clamp > full_space || req->rsk_window_clamp == 0))
+ 		req->rsk_window_clamp = full_space;
+ 
+ 	tcp_select_initial_window(sk, full_space, req->mss,
+ 				  &req->rsk_rcv_wnd, &req->rsk_window_clamp,
++>>>>>>> 909172a14974 (net: Update window_clamp if SOCK_RCVBUF is set)
  				  ireq->wscale_ok, &rcv_wscale,
  				  dst_metric(&rt->dst, RTAX_INITRWND));
  
diff --cc net/ipv6/syncookies.c
index 5944f149c43a,9b6cae1e49d9..000000000000
--- a/net/ipv6/syncookies.c
+++ b/net/ipv6/syncookies.c
@@@ -169,16 -136,20 +169,16 @@@ struct sock *cookie_v6_check(struct soc
  	__u32 cookie = ntohl(th->ack_seq) - 1;
  	struct sock *ret = sk;
  	struct request_sock *req;
- 	int mss;
+ 	int full_space, mss;
  	struct dst_entry *dst;
  	__u8 rcv_wscale;
 -	u32 tsoff = 0;
 -
 -	if (!sock_net(sk)->ipv4.sysctl_tcp_syncookies || !th->ack || th->rst)
 -		goto out;
  
 -	if (tcp_synq_no_recent_overflow(sk))
 +	if (!sysctl_tcp_syncookies || !th->ack || th->rst)
  		goto out;
  
 -	mss = __cookie_v6_check(ipv6_hdr(skb), th, cookie);
 -	if (mss == 0) {
 -		__NET_INC_STATS(sock_net(sk), LINUX_MIB_SYNCOOKIESFAILED);
 +	if (tcp_synq_no_recent_overflow(sk) ||
 +		(mss = __cookie_v6_check(ipv6_hdr(skb), th, cookie)) == 0) {
 +		NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_SYNCOOKIESFAILED);
  		goto out;
  	}
  
@@@ -256,9 -240,15 +256,21 @@@
  			goto out_free;
  	}
  
++<<<<<<< HEAD
 +	req->window_clamp = tp->window_clamp ? :dst_metric(dst, RTAX_WINDOW);
 +	tcp_select_initial_window(tcp_full_space(sk), req->mss,
 +				  &req->rcv_wnd, &req->window_clamp,
++=======
+ 	req->rsk_window_clamp = tp->window_clamp ? :dst_metric(dst, RTAX_WINDOW);
+ 	/* limit the window selection if the user enforce a smaller rx buffer */
+ 	full_space = tcp_full_space(sk);
+ 	if (sk->sk_userlocks & SOCK_RCVBUF_LOCK &&
+ 	    (req->rsk_window_clamp > full_space || req->rsk_window_clamp == 0))
+ 		req->rsk_window_clamp = full_space;
+ 
+ 	tcp_select_initial_window(sk, full_space, req->mss,
+ 				  &req->rsk_rcv_wnd, &req->rsk_window_clamp,
++>>>>>>> 909172a14974 (net: Update window_clamp if SOCK_RCVBUF is set)
  				  ireq->wscale_ok, &rcv_wscale,
  				  dst_metric(dst, RTAX_INITRWND));
  
* Unmerged path net/ipv4/syncookies.c
* Unmerged path net/ipv6/syncookies.c
