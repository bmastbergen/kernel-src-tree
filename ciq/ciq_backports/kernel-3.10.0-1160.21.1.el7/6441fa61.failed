KVM: x86: avoid incorrect writes to host MSR_IA32_SPEC_CTRL

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.21.1.el7
Rebuild_CHGLOG: - [x86] kvm: avoid incorrect writes to host MSR_IA32_SPEC_CTRL (Vitaly Kuznetsov) [1890669]
Rebuild_FUZZ: 95.58%
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit 6441fa6178f5456d1d4b512c08798888f99db185
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.21.1.el7/6441fa61.failed

If the guest is configured to have SPEC_CTRL but the host does not
(which is a nonsensical configuration but these are not explicitly
forbidden) then a host-initiated MSR write can write vmx->spec_ctrl
(respectively svm->spec_ctrl) and trigger a #GP when KVM tries to
restore the host value of the MSR.  Add a more comprehensive check
for valid bits of SPEC_CTRL, covering host CPUID flags and,
since we are at it and it is more correct that way, guest CPUID
flags too.

For AMD, remove the unnecessary is_guest_mode check around setting
the MSR interception bitmap, so that the code looks the same as
for Intel.

	Cc: Jim Mattson <jmattson@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 6441fa6178f5456d1d4b512c08798888f99db185)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm.c
#	arch/x86/kvm/vmx/vmx.c
#	arch/x86/kvm/x86.h
diff --cc arch/x86/kvm/svm.c
index d5995a9c6ac6,235a7e51de96..000000000000
--- a/arch/x86/kvm/svm.c
+++ b/arch/x86/kvm/svm.c
@@@ -3860,6 -4318,32 +3860,35 @@@ static int svm_set_msr(struct kvm_vcpu 
  		svm->vmcb->save.g_pat = data;
  		mark_dirty(svm->vmcb, VMCB_NPT);
  		break;
++<<<<<<< HEAD
++=======
+ 	case MSR_IA32_SPEC_CTRL:
+ 		if (!msr->host_initiated &&
+ 		    !guest_cpuid_has(vcpu, X86_FEATURE_AMD_IBRS) &&
+ 		    !guest_cpuid_has(vcpu, X86_FEATURE_AMD_SSBD))
+ 			return 1;
+ 
+ 		if (data & ~kvm_spec_ctrl_valid_bits(vcpu))
+ 			return 1;
+ 
+ 		svm->spec_ctrl = data;
+ 		if (!data)
+ 			break;
+ 
+ 		/*
+ 		 * For non-nested:
+ 		 * When it's written (to non-zero) for the first time, pass
+ 		 * it through.
+ 		 *
+ 		 * For nested:
+ 		 * The handling of the MSR bitmap for L2 guests is done in
+ 		 * nested_svm_vmrun_msrpm.
+ 		 * We update the L1 MSR bit as well since it will end up
+ 		 * touching the MSR anyway now.
+ 		 */
+ 		set_msr_interception(svm->msrpm, MSR_IA32_SPEC_CTRL, 1, 1);
+ 		break;
++>>>>>>> 6441fa6178f5 (KVM: x86: avoid incorrect writes to host MSR_IA32_SPEC_CTRL)
  	case MSR_IA32_PRED_CMD:
  		if (!msr->host_initiated &&
  		    !guest_cpuid_has(vcpu, X86_FEATURE_AMD_IBPB))
diff --cc arch/x86/kvm/x86.h
index 005175b0a673,dd6e34d0a881..000000000000
--- a/arch/x86/kvm/x86.h
+++ b/arch/x86/kvm/x86.h
@@@ -246,7 -307,66 +246,69 @@@ extern struct static_key kvm_no_apic_vc
  static inline u64 nsec_to_cycles(struct kvm_vcpu *vcpu, u64 nsec)
  {
  	return pvclock_scale_delta(nsec, vcpu->arch.virtual_tsc_mult,
 -				   vcpu->arch.virtual_tsc_shift);
 +		vcpu->arch.virtual_tsc_shift);
  }
  
++<<<<<<< HEAD
++=======
+ /* Same "calling convention" as do_div:
+  * - divide (n << 32) by base
+  * - put result in n
+  * - return remainder
+  */
+ #define do_shl32_div32(n, base)					\
+ 	({							\
+ 	    u32 __quot, __rem;					\
+ 	    asm("divl %2" : "=a" (__quot), "=d" (__rem)		\
+ 			: "rm" (base), "0" (0), "1" ((u32) n));	\
+ 	    n = __quot;						\
+ 	    __rem;						\
+ 	 })
+ 
+ static inline bool kvm_mwait_in_guest(struct kvm *kvm)
+ {
+ 	return kvm->arch.mwait_in_guest;
+ }
+ 
+ static inline bool kvm_hlt_in_guest(struct kvm *kvm)
+ {
+ 	return kvm->arch.hlt_in_guest;
+ }
+ 
+ static inline bool kvm_pause_in_guest(struct kvm *kvm)
+ {
+ 	return kvm->arch.pause_in_guest;
+ }
+ 
+ static inline bool kvm_cstate_in_guest(struct kvm *kvm)
+ {
+ 	return kvm->arch.cstate_in_guest;
+ }
+ 
+ DECLARE_PER_CPU(struct kvm_vcpu *, current_vcpu);
+ 
+ static inline void kvm_before_interrupt(struct kvm_vcpu *vcpu)
+ {
+ 	__this_cpu_write(current_vcpu, vcpu);
+ }
+ 
+ static inline void kvm_after_interrupt(struct kvm_vcpu *vcpu)
+ {
+ 	__this_cpu_write(current_vcpu, NULL);
+ }
+ 
+ 
+ static inline bool kvm_pat_valid(u64 data)
+ {
+ 	if (data & 0xF8F8F8F8F8F8F8F8ull)
+ 		return false;
+ 	/* 0, 1, 4, 5, 6, 7 are valid values.  */
+ 	return (data | ((data & 0x0202020202020202ull) << 1)) == data;
+ }
+ 
+ void kvm_load_guest_xsave_state(struct kvm_vcpu *vcpu);
+ void kvm_load_host_xsave_state(struct kvm_vcpu *vcpu);
+ u64 kvm_spec_ctrl_valid_bits(struct kvm_vcpu *vcpu);
+ 
++>>>>>>> 6441fa6178f5 (KVM: x86: avoid incorrect writes to host MSR_IA32_SPEC_CTRL)
  #endif
* Unmerged path arch/x86/kvm/vmx/vmx.c
* Unmerged path arch/x86/kvm/svm.c
* Unmerged path arch/x86/kvm/vmx/vmx.c
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index de25aba06672..0eff1fd55fb6 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -8998,6 +8998,28 @@ bool kvm_arch_no_poll(struct kvm_vcpu *vcpu)
 }
 EXPORT_SYMBOL_GPL(kvm_arch_no_poll);
 
+u64 kvm_spec_ctrl_valid_bits(struct kvm_vcpu *vcpu)
+{
+	uint64_t bits = SPEC_CTRL_IBRS | SPEC_CTRL_STIBP | SPEC_CTRL_SSBD;
+
+	/* The STIBP bit doesn't fault even if it's not advertised */
+	if (!guest_cpuid_has(vcpu, X86_FEATURE_SPEC_CTRL) &&
+	    !guest_cpuid_has(vcpu, X86_FEATURE_AMD_IBRS))
+		bits &= ~(SPEC_CTRL_IBRS | SPEC_CTRL_STIBP);
+	if (!boot_cpu_has(X86_FEATURE_SPEC_CTRL) &&
+	    !boot_cpu_has(X86_FEATURE_AMD_IBRS))
+		bits &= ~(SPEC_CTRL_IBRS | SPEC_CTRL_STIBP);
+
+	if (!guest_cpuid_has(vcpu, X86_FEATURE_SPEC_CTRL_SSBD) &&
+	    !guest_cpuid_has(vcpu, X86_FEATURE_AMD_SSBD))
+		bits &= ~SPEC_CTRL_SSBD;
+	if (!boot_cpu_has(X86_FEATURE_SPEC_CTRL_SSBD) &&
+	    !boot_cpu_has(X86_FEATURE_AMD_SSBD))
+		bits &= ~SPEC_CTRL_SSBD;
+
+	return bits;
+}
+EXPORT_SYMBOL_GPL(kvm_spec_ctrl_valid_bits);
 
 EXPORT_TRACEPOINT_SYMBOL_GPL(kvm_exit);
 EXPORT_TRACEPOINT_SYMBOL_GPL(kvm_fast_mmio);
* Unmerged path arch/x86/kvm/x86.h
