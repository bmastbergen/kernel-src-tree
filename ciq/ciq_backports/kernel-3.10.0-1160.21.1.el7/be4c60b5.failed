pinctrl: devicetree: Avoid taking direct reference to device name string

jira LE-1907
cve CVE-2020-0427
Rebuild_History Non-Buildable kernel-3.10.0-1160.21.1.el7
Rebuild_CHGLOG: - [pinctrl] devicetree: Avoid taking direct reference to device name string (Aristeu Rozanski) [1922902] {CVE-2020-0427}
Rebuild_FUZZ: 93.33%
commit-author Will Deacon <will@kernel.org>
commit be4c60b563edee3712d392aaeb0943a768df7023
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.21.1.el7/be4c60b5.failed

When populating the pinctrl mapping table entries for a device, the
'dev_name' field for each entry is initialised to point directly at the
string returned by 'dev_name()' for the device and subsequently used by
'create_pinctrl()' when looking up the mappings for the device being
probed.

This is unreliable in the presence of calls to 'dev_set_name()', which may
reallocate the device name string leaving the pinctrl mappings with a
dangling reference. This then leads to a use-after-free every time the
name is dereferenced by a device probe:

  | BUG: KASAN: invalid-access in strcmp+0x20/0x64
  | Read of size 1 at addr 13ffffc153494b00 by task modprobe/590
  | Pointer tag: [13], memory tag: [fe]
  |
  | Call trace:
  |  __kasan_report+0x16c/0x1dc
  |  kasan_report+0x10/0x18
  |  check_memory_region
  |  __hwasan_load1_noabort+0x4c/0x54
  |  strcmp+0x20/0x64
  |  create_pinctrl+0x18c/0x7f4
  |  pinctrl_get+0x90/0x114
  |  devm_pinctrl_get+0x44/0x98
  |  pinctrl_bind_pins+0x5c/0x450
  |  really_probe+0x1c8/0x9a4
  |  driver_probe_device+0x120/0x1d8

Follow the example of sysfs, and duplicate the device name string before
stashing it away in the pinctrl mapping entries.

	Cc: Linus Walleij <linus.walleij@linaro.org>
	Reported-by: Elena Petrova <lenaptr@google.com>
	Tested-by: Elena Petrova <lenaptr@google.com>
	Signed-off-by: Will Deacon <will@kernel.org>
Link: https://lore.kernel.org/r/20191002124206.22928-1-will@kernel.org
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit be4c60b563edee3712d392aaeb0943a768df7023)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pinctrl/devicetree.c
diff --cc drivers/pinctrl/devicetree.c
index 74ddb4e7f209,dbaacde1b36a..000000000000
--- a/drivers/pinctrl/devicetree.c
+++ b/drivers/pinctrl/devicetree.c
@@@ -40,9 -29,17 +40,16 @@@ struct pinctrl_dt_map 
  static void dt_free_map(struct pinctrl_dev *pctldev,
  		     struct pinctrl_map *map, unsigned num_maps)
  {
+ 	int i;
+ 
+ 	for (i = 0; i < num_maps; ++i) {
+ 		kfree_const(map[i].dev_name);
+ 		map[i].dev_name = NULL;
+ 	}
+ 
  	if (pctldev) {
  		const struct pinctrl_ops *ops = pctldev->desc->pctlops;
 -		if (ops->dt_free_map)
 -			ops->dt_free_map(pctldev, map, num_maps);
 +		ops->dt_free_map(pctldev, map, num_maps);
  	} else {
  		/* There is no pctldev for PIN_MAP_TYPE_DUMMY_STATE */
  		kfree(map);
@@@ -91,7 -92,11 +102,15 @@@ static int dt_remember_or_free_map(stru
  	dt_map->num_maps = num_maps;
  	list_add_tail(&dt_map->node, &p->dt_maps);
  
++<<<<<<< HEAD
 +	return pinctrl_register_map(map, num_maps, false, true);
++=======
+ 	return pinctrl_register_map(map, num_maps, false);
+ 
+ err_free_map:
+ 	dt_free_map(pctldev, map, num_maps);
+ 	return -ENOMEM;
++>>>>>>> be4c60b563ed (pinctrl: devicetree: Avoid taking direct reference to device name string)
  }
  
  struct pinctrl_dev *of_pinctrl_get(struct device_node *np)
* Unmerged path drivers/pinctrl/devicetree.c
