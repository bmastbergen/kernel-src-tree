ionic: extend ts_config set locking

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Shannon Nelson <snelson@pensando.io>
commit f3318099658edcc899b95cdf54257edd428e7fbb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/f3318099.failed

Make sure the configuration is locked before
operating on it for the replay.

	Signed-off-by: Shannon Nelson <snelson@pensando.io>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f3318099658edcc899b95cdf54257edd428e7fbb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/pensando/ionic/ionic_phc.c
diff --cc drivers/net/ethernet/pensando/ionic/ionic_phc.c
index 5d5da61284e7,177dbf89affd..000000000000
--- a/drivers/net/ethernet/pensando/ionic/ionic_phc.c
+++ b/drivers/net/ethernet/pensando/ionic/ionic_phc.c
@@@ -77,27 -79,38 +77,44 @@@ int ionic_lif_hwstamp_set(struct ionic_
  	if (!lif->phc || !lif->phc->ptp)
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	if (ifr) {
 +		if (copy_from_user(&config, ifr->ifr_data, sizeof(config)))
 +			return -EFAULT;
++=======
+ 	mutex_lock(&lif->phc->config_lock);
+ 
+ 	if (new_ts) {
+ 		config = new_ts;
++>>>>>>> f3318099658e (ionic: extend ts_config set locking)
  	} else {
 -		/* If called with new_ts == NULL, replay the previous request
 -		 * primarily for recovery after a FW_RESET.
 -		 * We saved the previous configuration request info, so copy
 -		 * the previous request for reference, clear the current state
 -		 * to match the device's reset state, and run with it.
 +		/* if called with ifr == NULL, behave as if called with the
 +		 * current ts_config from the initial cleared state.
  		 */
 -		config = &ts;
 -		memcpy(config, &lif->phc->ts_config, sizeof(*config));
 -		memset(&lif->phc->ts_config, 0, sizeof(lif->phc->ts_config));
 -		lif->phc->ts_config_tx_mode = 0;
 -		lif->phc->ts_config_rx_filt = 0;
 +		memcpy(&config, &lif->phc->ts_config, sizeof(config));
 +		memset(&lif->phc->ts_config, 0, sizeof(config));
  	}
  
++<<<<<<< HEAD
 +	tx_mode = ionic_hwstamp_tx_mode(config.tx_type);
 +	if (tx_mode < 0)
 +		return tx_mode;
++=======
+ 	tx_mode = ionic_hwstamp_tx_mode(config->tx_type);
+ 	if (tx_mode < 0) {
+ 		err = tx_mode;
+ 		goto err_queues;
+ 	}
++>>>>>>> f3318099658e (ionic: extend ts_config set locking)
  
  	mask = cpu_to_le64(BIT_ULL(tx_mode));
- 	if ((ionic->ident.lif.eth.hwstamp_tx_modes & mask) != mask)
- 		return -ERANGE;
+ 	if ((ionic->ident.lif.eth.hwstamp_tx_modes & mask) != mask) {
+ 		err = -ERANGE;
+ 		goto err_queues;
+ 	}
  
 -	rx_filt = ionic_hwstamp_rx_filt(config->rx_filter);
 -	rx_all = config->rx_filter != HWTSTAMP_FILTER_NONE && !rx_filt;
 +	rx_filt = ionic_hwstamp_rx_filt(config.rx_filter);
 +	rx_all = config.rx_filter != HWTSTAMP_FILTER_NONE && !rx_filt;
  
  	mask = cpu_to_le64(rx_filt);
  	if ((ionic->ident.lif.eth.hwstamp_rx_filters & mask) != mask) {
@@@ -107,10 -120,8 +124,8 @@@
  	}
  
  	dev_dbg(ionic->dev, "config_rx_filter %d rx_filt %#llx rx_all %d\n",
 -		config->rx_filter, rx_filt, rx_all);
 +		config.rx_filter, rx_filt, rx_all);
  
- 	mutex_lock(&lif->phc->config_lock);
- 
  	if (tx_mode) {
  		err = ionic_lif_create_hwstamp_txq(lif);
  		if (err)
* Unmerged path drivers/net/ethernet/pensando/ionic/ionic_phc.c
