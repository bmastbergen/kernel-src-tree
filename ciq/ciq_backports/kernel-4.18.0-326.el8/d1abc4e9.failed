cpupower: Remove family arg to decode_pstates()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Nathan Fontenot <nathan.fontenot@amd.com>
commit d1abc4e996d7784ce4d56749e4b5ca8ff23b1e0f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/d1abc4e9.failed

The decode_pstates() routine no longer uses the CPU family and
the caleed routines (get_cof() and get_did()) can grab the family
from the global cpupower_cpu_info struct. These update removes
passing the family arg to all these routines.

	Signed-off-by: Nathan Fontenot <nathan.fontenot@amd.com>
	Reviewed-by: Robert Richter <rrichter@amd.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit d1abc4e996d7784ce4d56749e4b5ca8ff23b1e0f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/cpupower/utils/cpufreq-info.c
#	tools/power/cpupower/utils/helpers/amd.c
diff --cc tools/power/cpupower/utils/cpufreq-info.c
index d827ad1dfe4c,f9895e31ff5a..000000000000
--- a/tools/power/cpupower/utils/cpufreq-info.c
+++ b/tools/power/cpupower/utils/cpufreq-info.c
@@@ -183,10 -183,10 +183,17 @@@ static int get_boost_mode_x86(unsigned 
  	printf(_("    Supported: %s\n"), support ? _("yes") : _("no"));
  	printf(_("    Active: %s\n"), active ? _("yes") : _("no"));
  
++<<<<<<< HEAD
 +	if (cpupower_cpu_info.vendor == X86_VENDOR_AMD &&
 +	    cpupower_cpu_info.family >= 0x10) {
 +		ret = decode_pstates(cpu, cpupower_cpu_info.family, b_states,
 +				     pstates, &pstate_no);
++=======
+ 	if ((cpupower_cpu_info.vendor == X86_VENDOR_AMD &&
+ 	     cpupower_cpu_info.family >= 0x10) ||
+ 	     cpupower_cpu_info.vendor == X86_VENDOR_HYGON) {
+ 		ret = decode_pstates(cpu, b_states, pstates, &pstate_no);
++>>>>>>> d1abc4e996d7 (cpupower: Remove family arg to decode_pstates())
  		if (ret)
  			return ret;
  
diff --cc tools/power/cpupower/utils/helpers/amd.c
index 9607ada5b29a,97f2c857048e..000000000000
--- a/tools/power/cpupower/utils/helpers/amd.c
+++ b/tools/power/cpupower/utils/helpers/amd.c
@@@ -39,33 -41,33 +39,58 @@@ union msr_pstate 
  	unsigned long long val;
  };
  
++<<<<<<< HEAD
 +static int get_did(int family, union msr_pstate pstate)
 +{
 +	int t;
 +
 +	if (family == 0x12)
++=======
+ static int get_did(union core_pstate pstate)
+ {
+ 	int t;
+ 
+ 	if (cpupower_cpu_info.caps & CPUPOWER_CAP_AMD_PSTATEDEF)
+ 		t = pstate.pstatedef.did;
+ 	else if (cpupower_cpu_info.family == 0x12)
++>>>>>>> d1abc4e996d7 (cpupower: Remove family arg to decode_pstates())
  		t = pstate.val & 0xf;
 +	else if (family == 0x17)
 +		t = pstate.fam17h_bits.did;
  	else
 -		t = pstate.pstate.did;
 +		t = pstate.bits.did;
  
  	return t;
  }
  
++<<<<<<< HEAD
 +static int get_cof(int family, union msr_pstate pstate)
++=======
+ static int get_cof(union core_pstate pstate)
++>>>>>>> d1abc4e996d7 (cpupower: Remove family arg to decode_pstates())
  {
  	int t;
  	int fid, did, cof;
  
++<<<<<<< HEAD
 +	did = get_did(family, pstate);
 +	if (family == 0x17) {
 +		fid = pstate.fam17h_bits.fid;
 +		cof = 200 * fid / did;
 +	} else {
 +		t = 0x10;
 +		fid = pstate.bits.fid;
 +		if (family == 0x11)
++=======
+ 	did = get_did(pstate);
+ 	if (cpupower_cpu_info.caps & CPUPOWER_CAP_AMD_PSTATEDEF) {
+ 		fid = pstate.pstatedef.fid;
+ 		cof = 200 * fid / did;
+ 	} else {
+ 		t = 0x10;
+ 		fid = pstate.pstate.fid;
+ 		if (cpupower_cpu_info.family == 0x11)
++>>>>>>> d1abc4e996d7 (cpupower: Remove family arg to decode_pstates())
  			t = 0x8;
  		cof = (100 * (fid + t)) >> did;
  	}
@@@ -85,18 -86,17 +109,18 @@@
   *
   * returns zero on success, -1 on failure
   */
- int decode_pstates(unsigned int cpu, unsigned int cpu_family,
- 		   int boost_states, unsigned long *pstates, int *no)
+ int decode_pstates(unsigned int cpu, int boost_states,
+ 		   unsigned long *pstates, int *no)
  {
 -	int i, psmax;
 -	union core_pstate pstate;
 +	int i, psmax, pscur;
 +	union msr_pstate pstate;
  	unsigned long long val;
  
 -	/* Only read out frequencies from HW if HW Pstate is supported,
 -	 * otherwise frequencies are exported via ACPI tables.
 -	 */
 -	if (!(cpupower_cpu_info.caps & CPUPOWER_CAP_AMD_HW_PSTATE))
 +	/* Only read out frequencies from HW when CPU might be boostable
 +	   to keep the code as short and clean as possible.
 +	   Otherwise frequencies are exported via ACPI tables.
 +	*/
 +	if (cpu_family < 0x10 || cpu_family == 0x14)
  		return -1;
  
  	if (read_msr(cpu, MSR_AMD_PSTATE_LIMIT, &val))
@@@ -119,12 -112,12 +143,12 @@@
  		}
  		if (read_msr(cpu, MSR_AMD_PSTATE + i, &pstate.val))
  			return -1;
 -
 -		/* The enabled bit (bit 63) is common for all families */
 -		if (!pstate.pstatedef.en)
 +		if ((cpu_family == 0x17) && (!pstate.fam17h_bits.en))
 +			continue;
 +		else if (!pstate.bits.en)
  			continue;
  
- 		pstates[i] = get_cof(cpu_family, pstate);
+ 		pstates[i] = get_cof(pstate);
  	}
  	*no = i;
  	return 0;
* Unmerged path tools/power/cpupower/utils/cpufreq-info.c
* Unmerged path tools/power/cpupower/utils/helpers/amd.c
diff --git a/tools/power/cpupower/utils/helpers/helpers.h b/tools/power/cpupower/utils/helpers/helpers.h
index 51ad213a4566..f87f5610aeea 100644
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
@@ -125,8 +125,8 @@ extern struct pci_dev *pci_slot_func_init(struct pci_access **pacc,
 
 /* AMD HW pstate decoding **************************/
 
-extern int decode_pstates(unsigned int cpu, unsigned int cpu_family,
-			  int boost_states, unsigned long *pstates, int *no);
+extern int decode_pstates(unsigned int cpu, int boost_states,
+			  unsigned long *pstates, int *no);
 
 /* AMD HW pstate decoding **************************/
 
@@ -143,9 +143,8 @@ unsigned int cpuid_edx(unsigned int op);
 /* cpuid and cpuinfo helpers  **************************/
 /* X86 ONLY ********************************************/
 #else
-static inline int decode_pstates(unsigned int cpu, unsigned int cpu_family,
-				 int boost_states, unsigned long *pstates,
-				 int *no)
+static inline int decode_pstates(unsigned int cpu, int boost_states,
+				 unsigned long *pstates, int *no)
 { return -1; };
 
 static inline int read_msr(int cpu, unsigned int idx, unsigned long long *val)
