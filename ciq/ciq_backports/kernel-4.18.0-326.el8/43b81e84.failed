ALSA: usb-audio: Use atomic_t for endpoint use_count

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit 43b81e84068d26d630b63fa877e682909a0102fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/43b81e84.failed

The endpoint objects may be started/stopped concurrently by different
substreams in the case of implicit feedback mode, while the current
code handles the reference counter without any protection.

This patch changes the refcount to atomic_t for avoiding the
inconsistency.  We need no reference_t here as the refcount goes only
up to 2.

Also the name "use_count" is renamed to "running" since this is about
actually the running status, not the open refcount.

	Tested-by: Keith Milner <kamilner@superlative.org>
	Tested-by: Dylan Robinson <dylan_robinson@motu.com>
Link: https://lore.kernel.org/r/20201123085347.19667-29-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 43b81e84068d26d630b63fa877e682909a0102fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/usb/card.h
#	sound/usb/endpoint.c
diff --cc sound/usb/card.h
index ce446f8dba4b,f58c3769b058..000000000000
--- a/sound/usb/card.h
+++ b/sound/usb/card.h
@@@ -58,7 -59,8 +58,12 @@@ struct snd_urb_ctx 
  struct snd_usb_endpoint {
  	struct snd_usb_audio *chip;
  
++<<<<<<< HEAD
 +	int use_count;
++=======
+ 	int opened;		/* open refcount; protect with chip->mutex */
+ 	atomic_t running;	/* running status */
++>>>>>>> 43b81e84068d (ALSA: usb-audio: Use atomic_t for endpoint use_count)
  	int ep_num;		/* the referenced endpoint number */
  	int type;		/* SND_USB_ENDPOINT_TYPE_* */
  	unsigned long flags;
diff --cc sound/usb/endpoint.c
index 208ac2aff462,4d733b2d8287..000000000000
--- a/sound/usb/endpoint.c
+++ b/sound/usb/endpoint.c
@@@ -1224,11 -1250,15 +1224,20 @@@ int snd_usb_endpoint_start(struct snd_u
  	if (atomic_read(&ep->chip->shutdown))
  		return -EBADFD;
  
++<<<<<<< HEAD
 +	usb_audio_dbg(ep->chip, "Starting %s EP 0x%x (count %d)\n",
 +		      ep_type_name(ep->type), ep->ep_num, ep->use_count);
++=======
+ 	if (ep->sync_master)
+ 		WRITE_ONCE(ep->sync_master->sync_slave, ep);
+ 
+ 	usb_audio_dbg(ep->chip, "Starting %s EP 0x%x (running %d)\n",
+ 		      ep_type_name(ep->type), ep->ep_num,
+ 		      atomic_read(&ep->running));
++>>>>>>> 43b81e84068d (ALSA: usb-audio: Use atomic_t for endpoint use_count)
  
  	/* already running? */
- 	if (++ep->use_count != 1)
+ 	if (atomic_inc_return(&ep->running) != 1)
  		return 0;
  
  	/* just to be sure */
@@@ -1284,8 -1315,12 +1293,8 @@@
  	return 0;
  
  __error:
 -	if (ep->sync_master)
 -		WRITE_ONCE(ep->sync_master->sync_slave, NULL);
  	clear_bit(EP_FLAG_RUNNING, &ep->flags);
- 	ep->use_count--;
+ 	atomic_dec(&ep->running);
  	deactivate_urbs(ep, false);
  	return -EPIPE;
  }
@@@ -1309,13 -1344,17 +1318,21 @@@ void snd_usb_endpoint_stop(struct snd_u
  	if (!ep)
  		return;
  
- 	usb_audio_dbg(ep->chip, "Stopping %s EP 0x%x (count %d)\n",
- 		      ep_type_name(ep->type), ep->ep_num, ep->use_count);
+ 	usb_audio_dbg(ep->chip, "Stopping %s EP 0x%x (running %d)\n",
+ 		      ep_type_name(ep->type), ep->ep_num,
+ 		      atomic_read(&ep->running));
  
- 	if (snd_BUG_ON(ep->use_count == 0))
+ 	if (snd_BUG_ON(!atomic_read(&ep->running)))
  		return;
  
++<<<<<<< HEAD
 +	if (--ep->use_count == 0) {
++=======
+ 	if (ep->sync_master)
+ 		WRITE_ONCE(ep->sync_master->sync_slave, NULL);
+ 
+ 	if (!atomic_dec_return(&ep->running)) {
++>>>>>>> 43b81e84068d (ALSA: usb-audio: Use atomic_t for endpoint use_count)
  		deactivate_urbs(ep, false);
  		set_bit(EP_FLAG_STOPPING, &ep->flags);
  	}
* Unmerged path sound/usb/card.h
* Unmerged path sound/usb/endpoint.c
