iommu/arm-smmu-v3: Implement iommu_sva_bind/unbind()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Jean-Philippe Brucker <jean-philippe@linaro.org>
commit 32784a9562fb0518b12e9797ee2aec52214adf6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/32784a95.failed

The sva_bind() function allows devices to access process address spaces
using a PASID (aka SSID).

(1) bind() allocates or gets an existing MMU notifier tied to the
    (domain, mm) pair. Each mm gets one PASID.

(2) Any change to the address space calls invalidate_range() which sends
    ATC invalidations (in a subsequent patch).

(3) When the process address space dies, the release() notifier disables
    the CD to allow reclaiming the page tables. Since release() has to
    be light we do not instruct device drivers to stop DMA here, we just
    ignore incoming page faults from this point onwards.

    To avoid any event 0x0a print (C_BAD_CD) we disable translation
    without clearing CD.V. PCIe Translation Requests and Page Requests
    are silently denied. Don't clear the R bit because the S bit can't
    be cleared when STALL_MODEL==0b10 (forced), and clearing R without
    clearing S is useless. Faulting transactions will stall and will be
    aborted by the IOPF handler.

(4) After stopping DMA, the device driver releases the bond by calling
    unbind(). We release the MMU notifier, free the PASID and the bond.

Three structures keep track of bonds:
* arm_smmu_bond: one per {device, mm} pair, the handle returned to the
  device driver for a bind() request.
* arm_smmu_mmu_notifier: one per {domain, mm} pair, deals with ATS/TLB
  invalidations and clearing the context descriptor on mm exit.
* arm_smmu_ctx_desc: one per mm, holds the pinned ASID and pgd.

	Signed-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
Link: https://lore.kernel.org/r/20201106155048.997886-4-jean-philippe@linaro.org
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 32784a9562fb0518b12e9797ee2aec52214adf6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/Kconfig
#	drivers/iommu/arm-smmu-v3.c
#	drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3-sva.c
#	drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h
diff --cc drivers/iommu/Kconfig
index c4e3804df1cd,192ef8f61310..000000000000
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@@ -272,6 -313,18 +272,21 @@@ config ARM_SMMU_V
  	  Say Y here if your system includes an IOMMU device implementing
  	  the ARM SMMUv3 architecture.
  
++<<<<<<< HEAD
++=======
+ config ARM_SMMU_V3_SVA
+ 	bool "Shared Virtual Addressing support for the ARM SMMUv3"
+ 	depends on ARM_SMMU_V3
+ 	select IOMMU_SVA_LIB
+ 	select MMU_NOTIFIER
+ 	help
+ 	  Support for sharing process address spaces with devices using the
+ 	  SMMUv3.
+ 
+ 	  Say Y here if your system supports SVA extensions such as PCIe PASID
+ 	  and PRI.
+ 
++>>>>>>> 32784a9562fb (iommu/arm-smmu-v3: Implement iommu_sva_bind/unbind())
  config S390_IOMMU
  	def_bool y if S390 && PCI
  	depends on S390 && PCI
diff --cc drivers/iommu/arm-smmu-v3.c
index d64028588d13,034ed126e5c8..000000000000
--- a/drivers/iommu/arm-smmu-v3.c
+++ b/drivers/iommu/arm-smmu-v3.c
@@@ -732,8 -73,15 +732,14 @@@ struct arm_smmu_option_prop 
  	const char *prop;
  };
  
 -DEFINE_XARRAY_ALLOC1(arm_smmu_asid_xa);
 -DEFINE_MUTEX(arm_smmu_asid_lock);
 +static DEFINE_XARRAY_ALLOC1(asid_xa);
  
+ /*
+  * Special value used by SVA when a process dies, to quiesce a CD without
+  * disabling it.
+  */
+ struct arm_smmu_ctx_desc quiet_cd = { 0 };
+ 
  static struct arm_smmu_option_prop arm_smmu_options[] = {
  	{ ARM_SMMU_OPT_SKIP_PREFETCH, "hisilicon,broken-prefetch-cmd" },
  	{ ARM_SMMU_OPT_PAGE0_REGS_ONLY, "cavium,cn9900-broken-page1-regspace"},
@@@ -3077,6 -2591,13 +3083,16 @@@ static struct iommu_ops arm_smmu_ops = 
  	.of_xlate		= arm_smmu_of_xlate,
  	.get_resv_regions	= arm_smmu_get_resv_regions,
  	.put_resv_regions	= generic_iommu_put_resv_regions,
++<<<<<<< HEAD:drivers/iommu/arm-smmu-v3.c
++=======
+ 	.dev_has_feat		= arm_smmu_dev_has_feature,
+ 	.dev_feat_enabled	= arm_smmu_dev_feature_enabled,
+ 	.dev_enable_feat	= arm_smmu_dev_enable_feature,
+ 	.dev_disable_feat	= arm_smmu_dev_disable_feature,
+ 	.sva_bind		= arm_smmu_sva_bind,
+ 	.sva_unbind		= arm_smmu_sva_unbind,
+ 	.sva_get_pasid		= arm_smmu_sva_get_pasid,
++>>>>>>> 32784a9562fb (iommu/arm-smmu-v3: Implement iommu_sva_bind/unbind()):drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c
  	.pgsize_bitmap		= -1UL, /* Restricted during device attach */
  };
  
* Unmerged path drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3-sva.c
* Unmerged path drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h
* Unmerged path drivers/iommu/Kconfig
* Unmerged path drivers/iommu/arm-smmu-v3.c
* Unmerged path drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3-sva.c
* Unmerged path drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.h
