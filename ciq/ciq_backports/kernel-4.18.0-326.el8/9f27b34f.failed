mm,hugetlb: drop clearing of flag from prep_new_huge_page

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Oscar Salvador <osalvador@suse.de>
commit 9f27b34f234da7a185b4f1a2aa2cea2c47c458bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/9f27b34f.failed

Pages allocated via the page allocator or CMA get its private field
cleared by means of post_alloc_hook().

Pages allocated during boot, that is directly from the memblock
allocator, get cleared by paging_init()-> ..  ->memmap_init_zone-> ..
->__init_single_page() before any memblock allocation.

Based on this ground, let us remove the clearing of the flag from
prep_new_huge_page() as it is not needed.  This was a leftover from
commit 6c0371490140 ("hugetlb: convert PageHugeFreed to HPageFreed
flag").

Previously the explicit clearing was necessary because compound
allocations do not get this initialization (see prep_compound_page).

Link: https://lkml.kernel.org/r/20210419075413.1064-4-osalvador@suse.de
	Signed-off-by: Oscar Salvador <osalvador@suse.de>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
	Cc: Muchun Song <songmuchun@bytedance.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9f27b34f234da7a185b4f1a2aa2cea2c47c458bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/hugetlb.c
diff --cc mm/hugetlb.c
index ecbeabd66a23,c1539fb95f51..000000000000
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@@ -1305,11 -1488,13 +1305,15 @@@ static void prep_new_huge_page(struct h
  {
  	INIT_LIST_HEAD(&page->lru);
  	set_compound_page_dtor(page, HUGETLB_PAGE_DTOR);
 -	hugetlb_set_page_subpool(page, NULL);
 +	spin_lock(&hugetlb_lock);
  	set_hugetlb_cgroup(page, NULL);
 -	set_hugetlb_cgroup_rsvd(page, NULL);
 -	spin_lock_irq(&hugetlb_lock);
  	h->nr_huge_pages++;
  	h->nr_huge_pages_node[nid]++;
++<<<<<<< HEAD
 +	spin_unlock(&hugetlb_lock);
++=======
+ 	spin_unlock_irq(&hugetlb_lock);
++>>>>>>> 9f27b34f234d (mm,hugetlb: drop clearing of flag from prep_new_huge_page)
  }
  
  static void prep_compound_gigantic_page(struct page *page, unsigned int order)
* Unmerged path mm/hugetlb.c
