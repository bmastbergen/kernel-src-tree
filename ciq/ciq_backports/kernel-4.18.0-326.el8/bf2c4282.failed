scsi: sbitmap: Add helpers for updating allocation hint

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit bf2c4282a10a92810ba83e85677a5273d6ca0df5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/bf2c4282.failed

Add helpers for updating allocation hint so that we can avoid duplicate
code.

Prepare for moving allocation hint into sbitmap.

Link: https://lore.kernel.org/r/20210122023317.687987-4-ming.lei@redhat.com
	Cc: Omar Sandoval <osandov@fb.com>
	Cc: Kashyap Desai <kashyap.desai@broadcom.com>
	Cc: Sumanesh Samanta <sumanesh.samanta@broadcom.com>
	Cc: Ewan D. Milne <emilne@redhat.com>
	Cc: Hannes Reinecke <hare@suse.de>
	Tested-by: Sumanesh Samanta <sumanesh.samanta@broadcom.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit bf2c4282a10a92810ba83e85677a5273d6ca0df5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/sbitmap.c
diff --cc lib/sbitmap.c
index d69d338697cf,2b43a6aefec3..000000000000
--- a/lib/sbitmap.c
+++ b/lib/sbitmap.c
@@@ -427,24 -461,10 +470,29 @@@ int __sbitmap_queue_get(struct sbitmap_
  	unsigned int hint, depth;
  	int nr;
  
- 	hint = this_cpu_read(*sbq->alloc_hint);
  	depth = READ_ONCE(sbq->sb.depth);
++<<<<<<< HEAD
 +	if (unlikely(hint >= depth)) {
 +		hint = depth ? prandom_u32() % depth : 0;
 +		this_cpu_write(*sbq->alloc_hint, hint);
 +	}
 +	nr = sbitmap_get(&sbq->sb, hint, sbq->round_robin);
 +
 +	if (nr == -1) {
 +		/* If the map is full, a hint won't do us much good. */
 +		this_cpu_write(*sbq->alloc_hint, 0);
 +	} else if (nr == hint || unlikely(sbq->round_robin)) {
 +		/* Only update the hint if we used it. */
 +		hint = nr + 1;
 +		if (hint >= depth - 1)
 +			hint = 0;
 +		this_cpu_write(*sbq->alloc_hint, hint);
 +	}
++=======
+ 	hint = update_alloc_hint_before_get(sbq, depth);
+ 	nr = sbitmap_get(&sbq->sb, hint);
+ 	update_alloc_hint_after_get(sbq, depth, hint, nr);
++>>>>>>> bf2c4282a10a (scsi: sbitmap: Add helpers for updating allocation hint)
  
  	return nr;
  }
@@@ -458,24 -478,10 +506,24 @@@ int __sbitmap_queue_get_shallow(struct 
  
  	WARN_ON_ONCE(shallow_depth < sbq->min_shallow_depth);
  
- 	hint = this_cpu_read(*sbq->alloc_hint);
  	depth = READ_ONCE(sbq->sb.depth);
- 	if (unlikely(hint >= depth)) {
- 		hint = depth ? prandom_u32() % depth : 0;
- 		this_cpu_write(*sbq->alloc_hint, hint);
- 	}
+ 	hint = update_alloc_hint_before_get(sbq, depth);
  	nr = sbitmap_get_shallow(&sbq->sb, hint, shallow_depth);
++<<<<<<< HEAD
 +
 +	if (nr == -1) {
 +		/* If the map is full, a hint won't do us much good. */
 +		this_cpu_write(*sbq->alloc_hint, 0);
 +	} else if (nr == hint || unlikely(sbq->round_robin)) {
 +		/* Only update the hint if we used it. */
 +		hint = nr + 1;
 +		if (hint >= depth - 1)
 +			hint = 0;
 +		this_cpu_write(*sbq->alloc_hint, hint);
 +	}
++=======
+ 	update_alloc_hint_after_get(sbq, depth, hint, nr);
++>>>>>>> bf2c4282a10a (scsi: sbitmap: Add helpers for updating allocation hint)
  
  	return nr;
  }
* Unmerged path lib/sbitmap.c
