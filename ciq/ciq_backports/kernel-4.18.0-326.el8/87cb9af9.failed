ALSA: usb-audio: Fix UAC1 rate setup for secondary endpoints

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit 87cb9af9f8a2b242cea7f828206d619e8cbb6a1a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/87cb9af9.failed

The current sample rate setup function for UAC1 assumes only the first
endpoint retrieved from the interface:altset pair, but the rate set up
may be needed also for the secondary endpoint.  Also, retrieving the
endpoint number from the interface descriptor is redundant; we have
already the target endpoint in the given audioformat object.

This patch simplifies the code and corrects the target endpoint as
described in the above.  It simply refers to fmt->endpoint directly.

Also, this patch drops the pioneer_djm_set_format_quirk() that is
caleld from snd_usb_set_format_quirk(); this function does the sample
rate setup but for the capture endpoint (0x82), and that's exactly
what the change above fixes.

Link: https://lore.kernel.org/r/20210118075816.25068-2-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 87cb9af9f8a2b242cea7f828206d619e8cbb6a1a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/usb/quirks.c
diff --cc sound/usb/quirks.c
index 581db82b9cb7,e196e364cef1..000000000000
--- a/sound/usb/quirks.c
+++ b/sound/usb/quirks.c
@@@ -1485,32 -1470,8 +1485,35 @@@ static void set_format_emu_quirk(struc
  	subs->pkt_offset_adj = (emu_samplerate_id >= EMU_QUIRK_SR_176400HZ) ? 4 : 0;
  }
  
++<<<<<<< HEAD
 +
 +/*
 + * Pioneer DJ DJM-900NXS2
 + * Device needs to know the sample rate each time substream is started
 + */
 +static int pioneer_djm_set_format_quirk(struct snd_usb_substream *subs)
 +{
 +
 +	/* Convert sample rate value to little endian */
 +	u8 sr[3];
 +
 +	sr[0] = subs->cur_rate & 0xff;
 +	sr[1] = (subs->cur_rate >> 8) & 0xff;
 +	sr[2] = (subs->cur_rate >> 16) & 0xff;
 +
 +	/* Configure device */
 +	usb_set_interface(subs->dev, 0, 1);
 +	snd_usb_ctl_msg(subs->stream->chip->dev,
 +		usb_rcvctrlpipe(subs->stream->chip->dev, 0),
 +		0x01, 0x22, 0x0100, 0x0082, &sr, 0x0003);
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 87cb9af9f8a2 (ALSA: usb-audio: Fix UAC1 rate setup for secondary endpoints)
  void snd_usb_set_format_quirk(struct snd_usb_substream *subs,
 -			      const struct audioformat *fmt)
 +			      struct audioformat *fmt)
  {
  	switch (subs->stream->chip->usb_id) {
  	case USB_ID(0x041e, 0x3f02): /* E-Mu 0202 USB */
diff --git a/sound/usb/clock.c b/sound/usb/clock.c
index e1fec82cc59e..d1779bcb7101 100644
--- a/sound/usb/clock.c
+++ b/sound/usb/clock.c
@@ -485,18 +485,9 @@ static int set_sample_rate_v1(struct snd_usb_audio *chip,
 			      struct audioformat *fmt, int rate)
 {
 	struct usb_device *dev = chip->dev;
-	struct usb_host_interface *alts;
-	unsigned int ep;
 	unsigned char data[3];
 	int err, crate;
 
-	alts = snd_usb_get_host_interface(chip, fmt->iface, fmt->altsetting);
-	if (!alts)
-		return -EINVAL;
-	if (get_iface_desc(alts)->bNumEndpoints < 1)
-		return -EINVAL;
-	ep = get_endpoint(alts, 0)->bEndpointAddress;
-
 	/* if endpoint doesn't have sampling rate control, bail out */
 	if (!(fmt->attributes & UAC_EP_CS_ATTR_SAMPLE_RATE))
 		return 0;
@@ -506,11 +497,11 @@ static int set_sample_rate_v1(struct snd_usb_audio *chip,
 	data[2] = rate >> 16;
 	err = snd_usb_ctl_msg(dev, usb_sndctrlpipe(dev, 0), UAC_SET_CUR,
 			      USB_TYPE_CLASS | USB_RECIP_ENDPOINT | USB_DIR_OUT,
-			      UAC_EP_CS_ATTR_SAMPLE_RATE << 8, ep,
-			      data, sizeof(data));
+			      UAC_EP_CS_ATTR_SAMPLE_RATE << 8,
+			      fmt->endpoint, data, sizeof(data));
 	if (err < 0) {
 		dev_err(&dev->dev, "%d:%d: cannot set freq %d to ep %#x\n",
-			fmt->iface, fmt->altsetting, rate, ep);
+			fmt->iface, fmt->altsetting, rate, fmt->endpoint);
 		return err;
 	}
 
@@ -524,11 +515,11 @@ static int set_sample_rate_v1(struct snd_usb_audio *chip,
 
 	err = snd_usb_ctl_msg(dev, usb_rcvctrlpipe(dev, 0), UAC_GET_CUR,
 			      USB_TYPE_CLASS | USB_RECIP_ENDPOINT | USB_DIR_IN,
-			      UAC_EP_CS_ATTR_SAMPLE_RATE << 8, ep,
-			      data, sizeof(data));
+			      UAC_EP_CS_ATTR_SAMPLE_RATE << 8,
+			      fmt->endpoint, data, sizeof(data));
 	if (err < 0) {
 		dev_err(&dev->dev, "%d:%d: cannot get freq at ep %#x\n",
-			fmt->iface, fmt->altsetting, ep);
+			fmt->iface, fmt->altsetting, fmt->endpoint);
 		chip->sample_rate_read_error++;
 		return 0; /* some devices don't support reading */
 	}
* Unmerged path sound/usb/quirks.c
