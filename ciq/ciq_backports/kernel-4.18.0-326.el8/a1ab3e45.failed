devlink: Extend SF port attributes to have external attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Parav Pandit <parav@nvidia.com>
commit a1ab3e4554b5342b34845df452601ebd5a310d0a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/a1ab3e45.failed

Extended SF port attributes to have optional external flag similar to
PCI PF and VF port attributes.

External atttibute is required to generate unique phys_port_name when PF number
and SF number are overlapping between two controllers similar to SR-IOV
VFs.

When a SF is for external controller an example view of external SF
port and config sequence.

On eswitch system:
$ devlink dev eswitch set pci/0033:01:00.0 mode switchdev

$ devlink port show
pci/0033:01:00.0/196607: type eth netdev enP51p1s0f0np0 flavour physical port 0 splittable false
pci/0033:01:00.0/131072: type eth netdev eth0 flavour pcipf controller 1 pfnum 0 external true splittable false
  function:
    hw_addr 00:00:00:00:00:00

$ devlink port add pci/0033:01:00.0 flavour pcisf pfnum 0 sfnum 77 controller 1
pci/0033:01:00.0/163840: type eth netdev eth1 flavour pcisf controller 1 pfnum 0 sfnum 77 splittable false
  function:
    hw_addr 00:00:00:00:00:00 state inactive opstate detached

phys_port_name construction:
$ cat /sys/class/net/eth1/phys_port_name
c1pf0sf77

	Signed-off-by: Parav Pandit <parav@nvidia.com>
	Reviewed-by: Jiri Pirko <jiri@nvidia.com>
	Reviewed-by: Vu Pham <vuhuong@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit a1ab3e4554b5342b34845df452601ebd5a310d0a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/esw/devlink_port.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/esw/devlink_port.c
index ffff11baa3d0,183f782b940f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/esw/devlink_port.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/esw/devlink_port.c
@@@ -120,5 -119,46 +120,50 @@@ struct devlink_port *mlx5_esw_offloads_
  	struct mlx5_vport *vport;
  
  	vport = mlx5_eswitch_get_vport(esw, vport_num);
++<<<<<<< HEAD
 +	return vport->dl_port;
++=======
+ 	return IS_ERR(vport) ? ERR_CAST(vport) : vport->dl_port;
+ }
+ 
+ int mlx5_esw_devlink_sf_port_register(struct mlx5_eswitch *esw, struct devlink_port *dl_port,
+ 				      u16 vport_num, u32 sfnum)
+ {
+ 	struct mlx5_core_dev *dev = esw->dev;
+ 	struct netdev_phys_item_id ppid = {};
+ 	unsigned int dl_port_index;
+ 	struct mlx5_vport *vport;
+ 	struct devlink *devlink;
+ 	u16 pfnum;
+ 	int err;
+ 
+ 	vport = mlx5_eswitch_get_vport(esw, vport_num);
+ 	if (IS_ERR(vport))
+ 		return PTR_ERR(vport);
+ 
+ 	pfnum = PCI_FUNC(dev->pdev->devfn);
+ 	mlx5_esw_get_port_parent_id(dev, &ppid);
+ 	memcpy(dl_port->attrs.switch_id.id, &ppid.id[0], ppid.id_len);
+ 	dl_port->attrs.switch_id.id_len = ppid.id_len;
+ 	devlink_port_attrs_pci_sf_set(dl_port, 0, pfnum, sfnum, false);
+ 	devlink = priv_to_devlink(dev);
+ 	dl_port_index = mlx5_esw_vport_to_devlink_port_index(dev, vport_num);
+ 	err = devlink_port_register(devlink, dl_port, dl_port_index);
+ 	if (err)
+ 		return err;
+ 
+ 	vport->dl_port = dl_port;
+ 	return 0;
+ }
+ 
+ void mlx5_esw_devlink_sf_port_unregister(struct mlx5_eswitch *esw, u16 vport_num)
+ {
+ 	struct mlx5_vport *vport;
+ 
+ 	vport = mlx5_eswitch_get_vport(esw, vport_num);
+ 	if (IS_ERR(vport))
+ 		return;
+ 	devlink_port_unregister(vport->dl_port);
+ 	vport->dl_port = NULL;
++>>>>>>> a1ab3e4554b5 (devlink: Extend SF port attributes to have external attribute)
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/esw/devlink_port.c
diff --git a/include/net/devlink.h b/include/net/devlink.h
index 0c2172e2ff29..762aa4e967b5 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -102,11 +102,13 @@ struct devlink_port_pci_vf_attrs {
  * @controller: Associated controller number
  * @sf: Associated PCI SF for of the PCI PF for this port.
  * @pf: Associated PCI PF number for this port.
+ * @external: when set, indicates if a port is for an external controller
  */
 struct devlink_port_pci_sf_attrs {
 	u32 controller;
 	u32 sf;
 	u16 pf;
+	u8 external:1;
 };
 
 /**
@@ -1489,7 +1491,8 @@ void devlink_port_attrs_pci_pf_set(struct devlink_port *devlink_port, u32 contro
 void devlink_port_attrs_pci_vf_set(struct devlink_port *devlink_port, u32 controller,
 				   u16 pf, u16 vf, bool external);
 void devlink_port_attrs_pci_sf_set(struct devlink_port *devlink_port,
-				   u32 controller, u16 pf, u32 sf);
+				   u32 controller, u16 pf, u32 sf,
+				   bool external);
 int devlink_sb_register(struct devlink *devlink, unsigned int sb_index,
 			u32 size, u16 ingress_pools_count,
 			u16 egress_pools_count, u16 ingress_tc_count,
diff --git a/net/core/devlink.c b/net/core/devlink.c
index c9425180615d..58364abc623b 100644
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@ -8453,9 +8453,10 @@ EXPORT_SYMBOL_GPL(devlink_port_attrs_pci_vf_set);
  *	@controller: associated controller number for the devlink port instance
  *	@pf: associated PF for the devlink port instance
  *	@sf: associated SF of a PF for the devlink port instance
+ *	@external: indicates if the port is for an external controller
  */
 void devlink_port_attrs_pci_sf_set(struct devlink_port *devlink_port, u32 controller,
-				   u16 pf, u32 sf)
+				   u16 pf, u32 sf, bool external)
 {
 	struct devlink_port_attrs *attrs = &devlink_port->attrs;
 	int ret;
@@ -8469,6 +8470,7 @@ void devlink_port_attrs_pci_sf_set(struct devlink_port *devlink_port, u32 contro
 	attrs->pci_sf.controller = controller;
 	attrs->pci_sf.pf = pf;
 	attrs->pci_sf.sf = sf;
+	attrs->pci_sf.external = external;
 }
 EXPORT_SYMBOL_GPL(devlink_port_attrs_pci_sf_set);
 
@@ -8521,6 +8523,13 @@ static int __devlink_port_phys_port_name_get(struct devlink_port *devlink_port,
 			     attrs->pci_vf.pf, attrs->pci_vf.vf);
 		break;
 	case DEVLINK_PORT_FLAVOUR_PCI_SF:
+		if (attrs->pci_sf.external) {
+			n = snprintf(name, len, "c%u", attrs->pci_sf.controller);
+			if (n >= len)
+				return -EINVAL;
+			len -= n;
+			name += n;
+		}
 		n = snprintf(name, len, "pf%usf%u", attrs->pci_sf.pf,
 			     attrs->pci_sf.sf);
 		break;
