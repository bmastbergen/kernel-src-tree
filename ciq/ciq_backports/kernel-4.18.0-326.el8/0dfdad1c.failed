NFSD: Add tracepoints in nfsd_dispatch()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 0dfdad1c1d1b77b9b085f4da390464dd0ac5647a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/0dfdad1c.failed

For troubleshooting purposes, record GARBAGE_ARGS and CANT_ENCODE
failures.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 0dfdad1c1d1b77b9b085f4da390464dd0ac5647a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/trace.h
diff --cc fs/nfsd/trace.h
index f2f8d5156540,0bf1707bd846..000000000000
--- a/fs/nfsd/trace.h
+++ b/fs/nfsd/trace.h
@@@ -12,6 -12,82 +12,85 @@@
  #include "export.h"
  #include "nfsfh.h"
  
++<<<<<<< HEAD
++=======
+ #define NFSD_TRACE_PROC_ARG_FIELDS \
+ 		__field(unsigned int, netns_ino) \
+ 		__field(u32, xid) \
+ 		__array(unsigned char, server, sizeof(struct sockaddr_in6)) \
+ 		__array(unsigned char, client, sizeof(struct sockaddr_in6))
+ 
+ #define NFSD_TRACE_PROC_ARG_ASSIGNMENTS \
+ 		do { \
+ 			__entry->netns_ino = SVC_NET(rqstp)->ns.inum; \
+ 			__entry->xid = be32_to_cpu(rqstp->rq_xid); \
+ 			memcpy(__entry->server, &rqstp->rq_xprt->xpt_local, \
+ 			       rqstp->rq_xprt->xpt_locallen); \
+ 			memcpy(__entry->client, &rqstp->rq_xprt->xpt_remote, \
+ 			       rqstp->rq_xprt->xpt_remotelen); \
+ 		} while (0);
+ 
+ TRACE_EVENT(nfsd_garbage_args_err,
+ 	TP_PROTO(
+ 		const struct svc_rqst *rqstp
+ 	),
+ 	TP_ARGS(rqstp),
+ 	TP_STRUCT__entry(
+ 		NFSD_TRACE_PROC_ARG_FIELDS
+ 
+ 		__field(u32, vers)
+ 		__field(u32, proc)
+ 	),
+ 	TP_fast_assign(
+ 		NFSD_TRACE_PROC_ARG_ASSIGNMENTS
+ 
+ 		__entry->vers = rqstp->rq_vers;
+ 		__entry->proc = rqstp->rq_proc;
+ 	),
+ 	TP_printk("xid=0x%08x vers=%u proc=%u",
+ 		__entry->xid, __entry->vers, __entry->proc
+ 	)
+ );
+ 
+ TRACE_EVENT(nfsd_cant_encode_err,
+ 	TP_PROTO(
+ 		const struct svc_rqst *rqstp
+ 	),
+ 	TP_ARGS(rqstp),
+ 	TP_STRUCT__entry(
+ 		NFSD_TRACE_PROC_ARG_FIELDS
+ 
+ 		__field(u32, vers)
+ 		__field(u32, proc)
+ 	),
+ 	TP_fast_assign(
+ 		NFSD_TRACE_PROC_ARG_ASSIGNMENTS
+ 
+ 		__entry->vers = rqstp->rq_vers;
+ 		__entry->proc = rqstp->rq_proc;
+ 	),
+ 	TP_printk("xid=0x%08x vers=%u proc=%u",
+ 		__entry->xid, __entry->vers, __entry->proc
+ 	)
+ );
+ 
+ #define show_nfsd_may_flags(x)						\
+ 	__print_flags(x, "|",						\
+ 		{ NFSD_MAY_EXEC,		"EXEC" },		\
+ 		{ NFSD_MAY_WRITE,		"WRITE" },		\
+ 		{ NFSD_MAY_READ,		"READ" },		\
+ 		{ NFSD_MAY_SATTR,		"SATTR" },		\
+ 		{ NFSD_MAY_TRUNC,		"TRUNC" },		\
+ 		{ NFSD_MAY_LOCK,		"LOCK" },		\
+ 		{ NFSD_MAY_OWNER_OVERRIDE,	"OWNER_OVERRIDE" },	\
+ 		{ NFSD_MAY_LOCAL_ACCESS,	"LOCAL_ACCESS" },	\
+ 		{ NFSD_MAY_BYPASS_GSS_ON_ROOT,	"BYPASS_GSS_ON_ROOT" },	\
+ 		{ NFSD_MAY_NOT_BREAK_LEASE,	"NOT_BREAK_LEASE" },	\
+ 		{ NFSD_MAY_BYPASS_GSS,		"BYPASS_GSS" },		\
+ 		{ NFSD_MAY_READ_IF_EXEC,	"READ_IF_EXEC" },	\
+ 		{ NFSD_MAY_64BIT_COOKIE,	"64BIT_COOKIE" })
+ 
++>>>>>>> 0dfdad1c1d1b (NFSD: Add tracepoints in nfsd_dispatch())
  TRACE_EVENT(nfsd_compound,
  	TP_PROTO(const struct svc_rqst *rqst,
  		 u32 args_opcnt),
diff --git a/fs/nfsd/nfssvc.c b/fs/nfsd/nfssvc.c
index 8377bbb5718d..8c651c9f307c 100644
--- a/fs/nfsd/nfssvc.c
+++ b/fs/nfsd/nfssvc.c
@@ -28,6 +28,8 @@
 #include "vfs.h"
 #include "netns.h"
 
+#include "trace.h"
+
 #define NFSDDBG_FACILITY	NFSDDBG_SVC
 
 extern struct svc_program	nfsd_program;
@@ -1001,11 +1003,8 @@ int nfsd_dispatch(struct svc_rqst *rqstp, __be32 *statp)
 	struct kvec *resv = &rqstp->rq_res.head[0];
 	__be32 *p;
 
-	dprintk("nfsd_dispatch: vers %d proc %d\n",
-				rqstp->rq_vers, rqstp->rq_proc);
-
 	if (nfs_request_too_big(rqstp, proc))
-		goto out_too_large;
+		goto out_decode_err;
 
 	/*
 	 * Give the xdr decoder a chance to change this if it wants
@@ -1044,24 +1043,18 @@ int nfsd_dispatch(struct svc_rqst *rqstp, __be32 *statp)
 out_cached_reply:
 	return 1;
 
-out_too_large:
-	dprintk("nfsd: NFSv%d argument too large\n", rqstp->rq_vers);
-	*statp = rpc_garbage_args;
-	return 1;
-
 out_decode_err:
-	dprintk("nfsd: failed to decode arguments!\n");
+	trace_nfsd_garbage_args_err(rqstp);
 	*statp = rpc_garbage_args;
 	return 1;
 
 out_update_drop:
-	dprintk("nfsd: Dropping request; may be revisited later\n");
 	nfsd_cache_update(rqstp, RC_NOCACHE, NULL);
 out_dropit:
 	return 0;
 
 out_encode_err:
-	dprintk("nfsd: failed to encode result!\n");
+	trace_nfsd_cant_encode_err(rqstp);
 	nfsd_cache_update(rqstp, RC_NOCACHE, NULL);
 	*statp = rpc_system_err;
 	return 1;
* Unmerged path fs/nfsd/trace.h
