bpf: Memcg-based memory accounting for bpf maps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Roman Gushchin <guro@fb.com>
commit d5299b67dd59445902cd30cbc60a03c869cf1adb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/d5299b67.failed

This patch enables memcg-based memory accounting for memory allocated
by __bpf_map_area_alloc(), which is used by many types of bpf maps for
large initial memory allocations.

Please note, that __bpf_map_area_alloc() should not be used outside of
map creation paths without setting the active memory cgroup to the
map's memory cgroup.

Following patches in the series will refine the accounting for
some of the map types.

	Signed-off-by: Roman Gushchin <guro@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20201201215900.3569844-8-guro@fb.com
(cherry picked from commit d5299b67dd59445902cd30cbc60a03c869cf1adb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/syscall.c
diff --cc kernel/bpf/syscall.c
index 526b61397de6,dff3a5f62d7a..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -307,7 -284,9 +311,13 @@@ static void *__bpf_map_area_alloc(u64 s
  	 * __GFP_RETRY_MAYFAIL to avoid such situations.
  	 */
  
++<<<<<<< HEAD
 +	const gfp_t flags = __GFP_NOWARN | __GFP_ZERO;
++=======
+ 	const gfp_t gfp = __GFP_NOWARN | __GFP_ZERO | __GFP_ACCOUNT;
+ 	unsigned int flags = 0;
+ 	unsigned long align = 1;
++>>>>>>> d5299b67dd59 (bpf: Memcg-based memory accounting for bpf maps)
  	void *area;
  
  	if (size >= SIZE_MAX)
* Unmerged path kernel/bpf/syscall.c
