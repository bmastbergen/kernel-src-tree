ice: move skb pointer from rx_buf to rx_ring

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit 29b82f2a09d5904420ba7b5fb95a094cf1550bb6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/29b82f2a.failed

Similar thing has been done in i40e, as there is no real need for having
the sk_buff pointer in each rx_buf. Non-eop frames can be simply handled
on that pointer moved upwards to rx_ring.

	Reviewed-by: Björn Töpel <bjorn.topel@intel.com>
	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Tested-by: Tony Brelinski <tonyx.brelinski@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 29b82f2a09d5904420ba7b5fb95a094cf1550bb6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_txrx.c
diff --cc drivers/net/ethernet/intel/ice/ice_txrx.c
index 6e8a3e8f8452,d92ddcdeaa4d..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_txrx.c
+++ b/drivers/net/ethernet/intel/ice/ice_txrx.c
@@@ -1075,9 -1069,10 +1069,10 @@@ ice_is_non_eop(struct ice_ring *rx_ring
   */
  int ice_clean_rx_irq(struct ice_ring *rx_ring, int budget)
  {
 -	unsigned int total_rx_bytes = 0, total_rx_pkts = 0, frame_sz = 0;
 +	unsigned int total_rx_bytes = 0, total_rx_pkts = 0;
  	u16 cleaned_count = ICE_DESC_UNUSED(rx_ring);
  	unsigned int xdp_res, xdp_xmit = 0;
+ 	struct sk_buff *skb = rx_ring->skb;
  	struct bpf_prog *xdp_prog = NULL;
  	struct xdp_buff xdp;
  	bool failure;
@@@ -1090,9 -1084,11 +1085,13 @@@
  
  	/* start the loop to process Rx packets bounded by 'budget' */
  	while (likely(total_rx_pkts < (unsigned int)budget)) {
 -		unsigned int offset = ice_rx_offset(rx_ring);
  		union ice_32b_rx_flex_desc *rx_desc;
  		struct ice_rx_buf *rx_buf;
++<<<<<<< HEAD
 +		struct sk_buff *skb;
++=======
+ 		unsigned char *hard_start;
++>>>>>>> 29b82f2a09d5 (ice: move skb pointer from rx_buf to rx_ring)
  		unsigned int size;
  		u16 stat_err_bits;
  		int rx_buf_pgcnt;
* Unmerged path drivers/net/ethernet/intel/ice/ice_txrx.c
diff --git a/drivers/net/ethernet/intel/ice/ice_txrx.h b/drivers/net/ethernet/intel/ice/ice_txrx.h
index fe829b017ba3..8a807e774cbe 100644
--- a/drivers/net/ethernet/intel/ice/ice_txrx.h
+++ b/drivers/net/ethernet/intel/ice/ice_txrx.h
@@ -165,7 +165,6 @@ struct ice_tx_offload_params {
 struct ice_rx_buf {
 	union {
 		struct {
-			struct sk_buff *skb;
 			dma_addr_t dma;
 			struct page *page;
 			unsigned int page_offset;
@@ -297,6 +296,7 @@ struct ice_ring {
 	struct xsk_buff_pool *xsk_pool;
 	/* CL3 - 3rd cacheline starts here */
 	struct xdp_rxq_info xdp_rxq;
+	struct sk_buff *skb;
 	/* CLX - the below items are only accessed infrequently and should be
 	 * in their own cache line if possible
 	 */
