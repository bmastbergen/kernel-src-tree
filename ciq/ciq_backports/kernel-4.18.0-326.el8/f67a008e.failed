drm/i915: Sprinkle WARN(!pll) into icl/dg1 .clock_enable()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit f67a008e02e5751296300f9e7aa1028afc4a4964
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/f67a008e.failed

The other DDI .enable_clock() functions are trying to protect us
against pll==NULL. A bit tempted to throw out all the WARNs as
just unnecessary noise, but I guess they might have some use
when poking around the shared_dpll code (not sure it wouldn't
oops elsewhere though). So let's unify it all and sprinkle in
the missing WARNs for icl/dg1.

	Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210205214634.19341-11-ville.syrjala@linux.intel.com
(cherry picked from commit f67a008e02e5751296300f9e7aa1028afc4a4964)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_ddi.c
diff --cc drivers/gpu/drm/i915/display/intel_ddi.c
index 87726ca7041c,9c321b10abbf..000000000000
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@@ -2822,60 -1605,140 +2822,172 @@@ static void icl_map_plls_to_ports(struc
  	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
  	struct intel_shared_dpll *pll = crtc_state->shared_dpll;
  	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
++<<<<<<< HEAD
++=======
+ 
+ 	if (drm_WARN_ON(&dev_priv->drm, !pll))
+ 		return;
+ 
+ 	/*
+ 	 * If we fail this, something went very wrong: first 2 PLLs should be
+ 	 * used by first 2 phys and last 2 PLLs by last phys
+ 	 */
+ 	if (drm_WARN_ON(&dev_priv->drm,
+ 			(pll->info->id < DPLL_ID_DG1_DPLL2 && phy >= PHY_C) ||
+ 			(pll->info->id >= DPLL_ID_DG1_DPLL2 && phy < PHY_C)))
+ 		return;
+ 
+ 	mutex_lock(&dev_priv->dpll.lock);
+ 
+ 	intel_de_rmw(dev_priv, DG1_DPCLKA_CFGCR0(phy),
+ 		     DG1_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy),
+ 		     DG1_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy));
+ 
+ 	intel_de_rmw(dev_priv, DG1_DPCLKA_CFGCR0(phy),
+ 		     DG1_DPCLKA_CFGCR0_DDI_CLK_OFF(phy), 0);
+ 
+ 	mutex_unlock(&dev_priv->dpll.lock);
+ }
+ 
+ static void dg1_ddi_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
+ 	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
+ 
+ 	mutex_lock(&dev_priv->dpll.lock);
+ 
+ 	intel_de_rmw(dev_priv, DG1_DPCLKA_CFGCR0(phy),
+ 		     0, DG1_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
+ 
+ 	mutex_unlock(&dev_priv->dpll.lock);
+ }
+ 
+ static void icl_ddi_combo_enable_clock(struct intel_encoder *encoder,
+ 				       const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
+ 	struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
+ 	u32 mask, sel;
+ 	i915_reg_t reg;
+ 
+ 	if (IS_ALDERLAKE_S(dev_priv)) {
+ 		reg = ADLS_DPCLKA_CFGCR(phy);
+ 		mask = ADLS_DPCLKA_CFGCR_DDI_CLK_SEL_MASK(phy);
+ 		sel = ((pll->info->id) << ADLS_DPCLKA_CFGCR_DDI_SHIFT(phy));
+ 	} else if (IS_ROCKETLAKE(dev_priv)) {
+ 		reg = ICL_DPCLKA_CFGCR0;
+ 		mask = RKL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy);
+ 		sel = RKL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy);
+ 	} else {
+ 		reg = ICL_DPCLKA_CFGCR0;
+ 		mask = ICL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy);
+ 		sel = ICL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy);
+ 	}
+ 
+ 	if (drm_WARN_ON(&dev_priv->drm, !pll))
+ 		return;
+ 
+ 	mutex_lock(&dev_priv->dpll.lock);
+ 
+ 	/*
+ 	 * Even though this register references DDIs, note that we
+ 	 * want to pass the PHY rather than the port (DDI).  For
+ 	 * ICL, port=phy in all cases so it doesn't matter, but for
+ 	 * EHL the bspec notes the following:
+ 	 *
+ 	 *   "DDID clock tied to DDIA clock, so DPCLKA_CFGCR0 DDIA
+ 	 *   Clock Select chooses the PLL for both DDIA and DDID and
+ 	 *   drives port A in all cases."
+ 	 */
+ 	intel_de_rmw(dev_priv, reg, mask, sel);
+ 
+ 	intel_de_rmw(dev_priv, reg,
+ 		     icl_dpclka_cfgcr0_clk_off(dev_priv, phy), 0);
+ 
+ 	mutex_unlock(&dev_priv->dpll.lock);
+ }
+ 
+ static void icl_ddi_combo_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
+ 	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
+ 	i915_reg_t reg;
+ 
+ 	mutex_lock(&dev_priv->dpll.lock);
+ 
+ 	if (IS_ALDERLAKE_S(dev_priv))
+ 		reg = ADLS_DPCLKA_CFGCR(phy);
+ 	else
+ 		reg = ICL_DPCLKA_CFGCR0;
+ 
+ 	mutex_lock(&dev_priv->dpll.lock);
+ 
+ 	intel_de_rmw(dev_priv, reg,
+ 		     0, icl_dpclka_cfgcr0_clk_off(dev_priv, phy));
+ 
+ 	mutex_unlock(&dev_priv->dpll.lock);
+ }
+ 
+ static void dg1_sanitize_port_clk_off(struct drm_i915_private *dev_priv,
+ 				      u32 port_mask, bool ddi_clk_needed)
+ {
+ 	enum port port;
++>>>>>>> f67a008e02e5 (drm/i915: Sprinkle WARN(!pll) into icl/dg1 .clock_enable())
  	u32 val;
  
 -	for_each_port_masked(port, port_mask) {
 -		enum phy phy = intel_port_to_phy(dev_priv, port);
 -		bool ddi_clk_off;
 +	mutex_lock(&dev_priv->dpll.lock);
  
 -		val = intel_de_read(dev_priv, DG1_DPCLKA_CFGCR0(phy));
 -		ddi_clk_off = val & DG1_DPCLKA_CFGCR0_DDI_CLK_OFF(phy);
 +	val = intel_de_read(dev_priv, ICL_DPCLKA_CFGCR0);
 +	drm_WARN_ON(&dev_priv->drm,
 +		    (val & icl_dpclka_cfgcr0_clk_off(dev_priv, phy)) == 0);
  
 -		if (ddi_clk_needed == !ddi_clk_off)
 -			continue;
 +	if (intel_phy_is_combo(dev_priv, phy)) {
 +		u32 mask, sel;
 +
 +		if (IS_ROCKETLAKE(dev_priv)) {
 +			mask = RKL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy);
 +			sel = RKL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy);
 +		} else {
 +			mask = ICL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy);
 +			sel = ICL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy);
 +		}
  
  		/*
 -		 * Punt on the case now where clock is gated, but it would
 -		 * be needed by the port. Something else is really broken then.
 +		 * Even though this register references DDIs, note that we
 +		 * want to pass the PHY rather than the port (DDI).  For
 +		 * ICL, port=phy in all cases so it doesn't matter, but for
 +		 * EHL the bspec notes the following:
 +		 *
 +		 *   "DDID clock tied to DDIA clock, so DPCLKA_CFGCR0 DDIA
 +		 *   Clock Select chooses the PLL for both DDIA and DDID and
 +		 *   drives port A in all cases."
  		 */
 -		if (drm_WARN_ON(&dev_priv->drm, ddi_clk_needed))
 -			continue;
 -
 -		drm_notice(&dev_priv->drm,
 -			   "PHY %c is disabled with an ungated DDI clock, gate it\n",
 -			   phy_name(phy));
 -		val |= DG1_DPCLKA_CFGCR0_DDI_CLK_OFF(phy);
 -		intel_de_write(dev_priv, DG1_DPCLKA_CFGCR0(phy), val);
 +		val &= ~mask;
 +		val |= sel;
 +		intel_de_write(dev_priv, ICL_DPCLKA_CFGCR0, val);
 +		intel_de_posting_read(dev_priv, ICL_DPCLKA_CFGCR0);
  	}
 +
 +	val &= ~icl_dpclka_cfgcr0_clk_off(dev_priv, phy);
 +	intel_de_write(dev_priv, ICL_DPCLKA_CFGCR0, val);
 +
 +	mutex_unlock(&dev_priv->dpll.lock);
 +}
 +
 +static void icl_unmap_plls_to_ports(struct intel_encoder *encoder)
 +{
 +	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
 +	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
 +	u32 val;
 +
 +	mutex_lock(&dev_priv->dpll.lock);
 +
 +	val = intel_de_read(dev_priv, ICL_DPCLKA_CFGCR0);
 +	val |= icl_dpclka_cfgcr0_clk_off(dev_priv, phy);
 +	intel_de_write(dev_priv, ICL_DPCLKA_CFGCR0, val);
 +
 +	mutex_unlock(&dev_priv->dpll.lock);
  }
  
  static void icl_sanitize_port_clk_off(struct drm_i915_private *dev_priv,
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi.c
