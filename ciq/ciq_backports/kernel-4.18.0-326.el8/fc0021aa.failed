swiotlb: remove the tbl_dma_addr argument to swiotlb_tbl_map_single

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Christoph Hellwig <hch@lst.de>
commit fc0021aa340af65a0a37d77be39e22aa886a6132
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/fc0021aa.failed

The tbl_dma_addr argument is used to check the DMA boundary for the
allocations, and thus needs to be a dma_addr_t.  swiotlb-xen instead
passed a physical address, which could lead to incorrect results for
strange offsets.  Fix this by removing the parameter entirely and hard
code the DMA address for io_tlb_start instead.

Fixes: 91ffe4ad534a ("swiotlb-xen: introduce phys_to_dma/dma_to_phys translations")
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit fc0021aa340af65a0a37d77be39e22aa886a6132)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/iommu.c
#	kernel/dma/swiotlb.c
diff --cc drivers/iommu/intel/iommu.c
index 4ebfc748f4a6,6b560e6f1930..000000000000
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@@ -3818,9 -3815,8 +3818,14 @@@ bounce_map_single(struct device *dev, p
  	 * page aligned, we don't need to use a bounce page.
  	 */
  	if (!IS_ALIGNED(paddr | size, VTD_PAGE_SIZE)) {
++<<<<<<< HEAD
 +		tlb_addr = swiotlb_tbl_map_single(dev,
 +				__phys_to_dma(dev, io_tlb_start),
 +				paddr, size, aligned_size, dir, attrs);
++=======
+ 		tlb_addr = swiotlb_tbl_map_single(dev, paddr, size,
+ 				aligned_size, dir, attrs);
++>>>>>>> fc0021aa340a (swiotlb: remove the tbl_dma_addr argument to swiotlb_tbl_map_single)
  		if (tlb_addr == DMA_MAPPING_ERROR) {
  			goto swiotlb_error;
  		} else {
diff --cc kernel/dma/swiotlb.c
index a4f70082b490,781b9dca197c..000000000000
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@@ -670,9 -668,8 +667,14 @@@ dma_addr_t swiotlb_map(struct device *d
  	trace_swiotlb_bounced(dev, phys_to_dma(dev, paddr), size,
  			      swiotlb_force);
  
++<<<<<<< HEAD
 +	swiotlb_addr = swiotlb_tbl_map_single(dev,
 +			__phys_to_dma(dev, io_tlb_start),
 +			paddr, size, size, dir, attrs);
++=======
+ 	swiotlb_addr = swiotlb_tbl_map_single(dev, paddr, size, size, dir,
+ 			attrs);
++>>>>>>> fc0021aa340a (swiotlb: remove the tbl_dma_addr argument to swiotlb_tbl_map_single)
  	if (swiotlb_addr == (phys_addr_t)DMA_MAPPING_ERROR)
  		return DMA_MAPPING_ERROR;
  
* Unmerged path drivers/iommu/intel/iommu.c
diff --git a/drivers/xen/swiotlb-xen.c b/drivers/xen/swiotlb-xen.c
index 2c8f78adf613..db7bf7030444 100644
--- a/drivers/xen/swiotlb-xen.c
+++ b/drivers/xen/swiotlb-xen.c
@@ -391,8 +391,7 @@ static dma_addr_t xen_swiotlb_map_page(struct device *dev, struct page *page,
 	 */
 	trace_swiotlb_bounced(dev, dev_addr, size, swiotlb_force);
 
-	map = swiotlb_tbl_map_single(dev, virt_to_phys(xen_io_tlb_start),
-				     phys, size, size, dir, attrs);
+	map = swiotlb_tbl_map_single(dev, phys, size, size, dir, attrs);
 	if (map == (phys_addr_t)DMA_MAPPING_ERROR)
 		return DMA_MAPPING_ERROR;
 
diff --git a/include/linux/swiotlb.h b/include/linux/swiotlb.h
index d977865274b3..fbdc65782195 100644
--- a/include/linux/swiotlb.h
+++ b/include/linux/swiotlb.h
@@ -46,13 +46,9 @@ enum dma_sync_target {
 	SYNC_FOR_DEVICE = 1,
 };
 
-extern phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,
-					  dma_addr_t tbl_dma_addr,
-					  phys_addr_t phys,
-					  size_t mapping_size,
-					  size_t alloc_size,
-					  enum dma_data_direction dir,
-					  unsigned long attrs);
+phys_addr_t swiotlb_tbl_map_single(struct device *hwdev, phys_addr_t phys,
+		size_t mapping_size, size_t alloc_size,
+		enum dma_data_direction dir, unsigned long attrs);
 
 extern void swiotlb_tbl_unmap_single(struct device *hwdev,
 				     phys_addr_t tlb_addr,
* Unmerged path kernel/dma/swiotlb.c
