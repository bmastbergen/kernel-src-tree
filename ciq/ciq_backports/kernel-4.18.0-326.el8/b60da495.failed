bpf: Only provide bpf_sock_from_file with CONFIG_NET

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Florent Revest <revest@chromium.org>
commit b60da4955f53d1f50e44351a9c3a37a92503079e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/b60da495.failed

This moves the bpf_sock_from_file definition into net/core/filter.c
which only gets compiled with CONFIG_NET and also moves the helper proto
usage next to other tracing helpers that are conditional on CONFIG_NET.

This avoids
  ld: kernel/trace/bpf_trace.o: in function `bpf_sock_from_file':
  bpf_trace.c:(.text+0xe23): undefined reference to `sock_from_file'
When compiling a kernel with BPF and without NET.

	Reported-by: kernel test robot <lkp@intel.com>
	Reported-by: Randy Dunlap <rdunlap@infradead.org>
	Signed-off-by: Florent Revest <revest@chromium.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Randy Dunlap <rdunlap@infradead.org>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: KP Singh <kpsingh@kernel.org>
Link: https://lore.kernel.org/bpf/20201208173623.1136863-1-revest@chromium.org
(cherry picked from commit b60da4955f53d1f50e44351a9c3a37a92503079e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
diff --cc include/linux/bpf.h
index e31890dda3c2,07cb5d15e743..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -1860,6 -1858,8 +1860,11 @@@ extern const struct bpf_func_proto bpf_
  extern const struct bpf_func_proto bpf_snprintf_btf_proto;
  extern const struct bpf_func_proto bpf_per_cpu_ptr_proto;
  extern const struct bpf_func_proto bpf_this_cpu_ptr_proto;
++<<<<<<< HEAD
++=======
+ extern const struct bpf_func_proto bpf_ktime_get_coarse_ns_proto;
+ extern const struct bpf_func_proto bpf_sock_from_file_proto;
++>>>>>>> b60da4955f53 (bpf: Only provide bpf_sock_from_file with CONFIG_NET)
  
  const struct bpf_func_proto *bpf_tracing_func_proto(
  	enum bpf_func_id func_id, const struct bpf_prog *prog);
* Unmerged path include/linux/bpf.h
diff --git a/kernel/trace/bpf_trace.c b/kernel/trace/bpf_trace.c
index 83291e88522f..f3e2570364e4 100644
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@ -1725,6 +1725,8 @@ tracing_prog_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 		return &bpf_sk_storage_get_tracing_proto;
 	case BPF_FUNC_sk_storage_delete:
 		return &bpf_sk_storage_delete_tracing_proto;
+	case BPF_FUNC_sock_from_file:
+		return &bpf_sock_from_file_proto;
 #endif
 	case BPF_FUNC_seq_printf:
 		return prog->expected_attach_type == BPF_TRACE_ITER ?
diff --git a/net/core/filter.c b/net/core/filter.c
index c817409c6680..60b62a3ee9ea 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -10424,6 +10424,24 @@ const struct bpf_func_proto bpf_skc_to_udp6_sock_proto = {
 	.ret_btf_id		= &btf_sock_ids[BTF_SOCK_TYPE_UDP6],
 };
 
+BPF_CALL_1(bpf_sock_from_file, struct file *, file)
+{
+	return (unsigned long)sock_from_file(file);
+}
+
+BTF_ID_LIST(bpf_sock_from_file_btf_ids)
+BTF_ID(struct, socket)
+BTF_ID(struct, file)
+
+const struct bpf_func_proto bpf_sock_from_file_proto = {
+	.func		= bpf_sock_from_file,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_BTF_ID_OR_NULL,
+	.ret_btf_id	= &bpf_sock_from_file_btf_ids[0],
+	.arg1_type	= ARG_PTR_TO_BTF_ID,
+	.arg1_btf_id	= &bpf_sock_from_file_btf_ids[1],
+};
+
 static const struct bpf_func_proto *
 bpf_sk_base_func_proto(enum bpf_func_id func_id)
 {
