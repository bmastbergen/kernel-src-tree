net/mlx5: SF, Port function state change support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Parav Pandit <parav@nvidia.com>
commit 6a3273217469790e6d0abc73893d0ebe6b69180d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/6a327321.failed

Support changing the state of the SF port's function through devlink.
When activating the SF port's function, enable the hca in the device
followed by adding its auxiliary device.
When deactivating the SF port's function, delete its auxiliary device
followed by disabling the vHCA.

Port function attributes get/set callbacks are invoked with devlink
instance lock held. Such callbacks need to synchronize with sf port
table getting disabled either via sriov sysfs callback. Such callbacks
synchronize with table disable context holding table refcount.

$ devlink dev eswitch set pci/0000:06:00.0 mode switchdev

$ devlink port show
pci/0000:06:00.0/65535: type eth netdev ens2f0np0 flavour physical port 0 splittable false

$ devlink port add pci/0000:06:00.0 flavour pcisf pfnum 0 sfnum 88
pci/0000:06:00.0/32768: type eth netdev eth6 flavour pcisf controller 0 pfnum 0 sfnum 88 external false splittable false
  function:
    hw_addr 00:00:00:00:00:00 state inactive opstate detached

$ devlink port show ens2f0npf0sf88
pci/0000:06:00.0/32768: type eth netdev ens2f0npf0sf88 flavour pcisf controller 0 pfnum 0 sfnum 88 external false splittable false
  function:
    hw_addr 00:00:00:00:88:88 state inactive opstate detached

$ devlink port function set pci/0000:06:00.0/32768 hw_addr 00:00:00:00:88:88 state active

$ devlink port show ens2f0npf0sf88 -jp
{
    "port": {
        "pci/0000:06:00.0/32768": {
            "type": "eth",
            "netdev": "ens2f0npf0sf88",
            "flavour": "pcisf",
            "controller": 0,
            "pfnum": 0,
            "sfnum": 88,
            "external": false,
            "splittable": false,
            "function": {
                "hw_addr": "00:00:00:00:88:88",
                "state": "active",
                "opstate": "attached"
            }
        }
    }
}

On port function activation, an auxiliary device is created in below
example.

$ devlink dev show
devlink dev show auxiliary/mlx5_core.sf.4

$ devlink port show auxiliary/mlx5_core.sf.4/1
auxiliary/mlx5_core.sf.4/1: type eth netdev p0sf88 flavour virtual port 0 splittable false

	Signed-off-by: Parav Pandit <parav@nvidia.com>
	Reviewed-by: Vu Pham <vuhuong@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 6a3273217469790e6d0abc73893d0ebe6b69180d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/devlink.c
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
#	drivers/net/ethernet/mellanox/mlx5/core/sf/cmd.c
#	drivers/net/ethernet/mellanox/mlx5/core/sf/devlink.c
#	drivers/net/ethernet/mellanox/mlx5/core/sf/hw_table.c
#	drivers/net/ethernet/mellanox/mlx5/core/sf/priv.h
#	drivers/net/ethernet/mellanox/mlx5/core/sf/sf.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/devlink.c
index b614202e7d92,7712311e8684..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
@@@ -112,9 -192,17 +112,18 @@@ static const struct devlink_ops mlx5_de
  	.port_function_hw_addr_get = mlx5_devlink_port_function_hw_addr_get,
  	.port_function_hw_addr_set = mlx5_devlink_port_function_hw_addr_set,
  #endif
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_MLX5_SF_MANAGER
+ 	.port_new = mlx5_devlink_sf_port_new,
+ 	.port_del = mlx5_devlink_sf_port_del,
+ 	.port_fn_state_get = mlx5_devlink_sf_port_fn_state_get,
+ 	.port_fn_state_set = mlx5_devlink_sf_port_fn_state_set,
+ #endif
++>>>>>>> 6a3273217469 (net/mlx5: SF, Port function state change support)
  	.flash_update = mlx5_devlink_flash_update,
  	.info_get = mlx5_devlink_info_get,
 -	.reload_actions = BIT(DEVLINK_RELOAD_ACTION_DRIVER_REINIT) |
 -			  BIT(DEVLINK_RELOAD_ACTION_FW_ACTIVATE),
 -	.reload_limits = BIT(DEVLINK_RELOAD_LIMIT_NO_RESET),
 +	.reload_actions = BIT(DEVLINK_RELOAD_ACTION_DRIVER_REINIT),
  	.reload_down = mlx5_devlink_reload_down,
  	.reload_up = mlx5_devlink_reload_up,
  };
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index 48053e4b4f51,604ac8bdebe0..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -73,6 -74,8 +73,11 @@@
  #include "lib/hv_vhca.h"
  #include "diag/rsc_dump.h"
  #include "sf/vhca_event.h"
++<<<<<<< HEAD
++=======
+ #include "sf/dev/dev.h"
+ #include "sf/sf.h"
++>>>>>>> 6a3273217469 (net/mlx5: SF, Port function state change support)
  
  MODULE_AUTHOR("Eli Cohen <eli@mellanox.com>");
  MODULE_DESCRIPTION("Mellanox 5th generation network adapters (ConnectX series) core driver");
@@@ -1205,8 -1215,10 +1218,9 @@@ err_irq_table
  
  static void mlx5_unload(struct mlx5_core_dev *dev)
  {
 -	mlx5_sf_dev_table_destroy(dev);
  	mlx5_sriov_detach(dev);
  	mlx5_ec_cleanup(dev);
+ 	mlx5_sf_hw_table_destroy(dev);
  	mlx5_vhca_event_stop(dev);
  	mlx5_cleanup_fs(dev);
  	mlx5_accel_ipsec_cleanup(dev);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/sf/sf.h
index 623191679b49,0b6aea1e6a94..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/sf/sf.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/sf/sf.h
@@@ -42,4 -42,59 +42,62 @@@ static inline u16 mlx5_sf_max_functions
  
  #endif
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_MLX5_SF_MANAGER
+ 
+ int mlx5_sf_hw_table_init(struct mlx5_core_dev *dev);
+ void mlx5_sf_hw_table_cleanup(struct mlx5_core_dev *dev);
+ 
+ int mlx5_sf_hw_table_create(struct mlx5_core_dev *dev);
+ void mlx5_sf_hw_table_destroy(struct mlx5_core_dev *dev);
+ 
+ int mlx5_sf_table_init(struct mlx5_core_dev *dev);
+ void mlx5_sf_table_cleanup(struct mlx5_core_dev *dev);
+ 
+ int mlx5_devlink_sf_port_new(struct devlink *devlink,
+ 			     const struct devlink_port_new_attrs *add_attr,
+ 			     struct netlink_ext_ack *extack,
+ 			     unsigned int *new_port_index);
+ int mlx5_devlink_sf_port_del(struct devlink *devlink, unsigned int port_index,
+ 			     struct netlink_ext_ack *extack);
+ int mlx5_devlink_sf_port_fn_state_get(struct devlink *devlink, struct devlink_port *dl_port,
+ 				      enum devlink_port_fn_state *state,
+ 				      enum devlink_port_fn_opstate *opstate,
+ 				      struct netlink_ext_ack *extack);
+ int mlx5_devlink_sf_port_fn_state_set(struct devlink *devlink, struct devlink_port *dl_port,
+ 				      enum devlink_port_fn_state state,
+ 				      struct netlink_ext_ack *extack);
+ #else
+ 
+ static inline int mlx5_sf_hw_table_init(struct mlx5_core_dev *dev)
+ {
+ 	return 0;
+ }
+ 
+ static inline void mlx5_sf_hw_table_cleanup(struct mlx5_core_dev *dev)
+ {
+ }
+ 
+ static inline int mlx5_sf_hw_table_create(struct mlx5_core_dev *dev)
+ {
+ 	return 0;
+ }
+ 
+ static inline void mlx5_sf_hw_table_destroy(struct mlx5_core_dev *dev)
+ {
+ }
+ 
+ static inline int mlx5_sf_table_init(struct mlx5_core_dev *dev)
+ {
+ 	return 0;
+ }
+ 
+ static inline void mlx5_sf_table_cleanup(struct mlx5_core_dev *dev)
+ {
+ }
+ 
+ #endif
+ 
++>>>>>>> 6a3273217469 (net/mlx5: SF, Port function state change support)
  #endif
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/cmd.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/hw_table.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/priv.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/cmd.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/devlink.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/hw_table.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/priv.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/sf/sf.h
