drm/i915: s/dev_priv/i915/ for the remainder of DDI clock routing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 97a24a701c13f608a57a0969fb99b029c24151b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/97a24a70.failed

Convert the remaining 'dev_priv's to 'i915's in the DDI
clock routing functions.

	Cc: Lucas De Marchi <lucas.demarchi@intel.com>
	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210205214634.19341-16-ville.syrjala@linux.intel.com
	Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
(cherry picked from commit 97a24a701c13f608a57a0969fb99b029c24151b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_ddi.c
diff --cc drivers/gpu/drm/i915/display/intel_ddi.c
index 87726ca7041c,eeae78097a20..000000000000
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@@ -2799,113 -1582,299 +2799,377 @@@ hsw_set_signal_levels(struct intel_dp *
  	intel_de_posting_read(dev_priv, DDI_BUF_CTL(port));
  }
  
 -static void _cnl_ddi_enable_clock(struct drm_i915_private *i915, i915_reg_t reg,
 -				  u32 clk_sel_mask, u32 clk_sel, u32 clk_off)
 +static u32 icl_dpclka_cfgcr0_clk_off(struct drm_i915_private *dev_priv,
 +				     enum phy phy)
  {
 -	mutex_lock(&i915->dpll.lock);
 -
 -	intel_de_rmw(i915, reg, clk_sel_mask, clk_sel);
 +	if (IS_ROCKETLAKE(dev_priv)) {
 +		return RKL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy);
 +	} else if (intel_phy_is_combo(dev_priv, phy)) {
 +		return ICL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy);
 +	} else if (intel_phy_is_tc(dev_priv, phy)) {
 +		enum tc_port tc_port = intel_port_to_tc(dev_priv,
 +							(enum port)phy);
  
 -	/*
 -	 * "This step and the step before must be
 -	 *  done with separate register writes."
 -	 */
 -	intel_de_rmw(i915, reg, clk_off, 0);
 +		return ICL_DPCLKA_CFGCR0_TC_CLK_OFF(tc_port);
 +	}
  
 -	mutex_unlock(&i915->dpll.lock);
 +	return 0;
  }
  
 -static void _cnl_ddi_disable_clock(struct drm_i915_private *i915, i915_reg_t reg,
 -				   u32 clk_off)
 +static void icl_map_plls_to_ports(struct intel_encoder *encoder,
 +				  const struct intel_crtc_state *crtc_state)
  {
 -	mutex_lock(&i915->dpll.lock);
++<<<<<<< HEAD
 +	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
 +	struct intel_shared_dpll *pll = crtc_state->shared_dpll;
 +	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
 +	u32 val;
  
 -	intel_de_rmw(i915, reg, 0, clk_off);
 +	mutex_lock(&dev_priv->dpll.lock);
  
 -	mutex_unlock(&i915->dpll.lock);
 -}
 +	val = intel_de_read(dev_priv, ICL_DPCLKA_CFGCR0);
 +	drm_WARN_ON(&dev_priv->drm,
 +		    (val & icl_dpclka_cfgcr0_clk_off(dev_priv, phy)) == 0);
  
 -static void adls_ddi_enable_clock(struct intel_encoder *encoder,
 -				  const struct intel_crtc_state *crtc_state)
 -{
 +	if (intel_phy_is_combo(dev_priv, phy)) {
 +		u32 mask, sel;
 +
 +		if (IS_ROCKETLAKE(dev_priv)) {
 +			mask = RKL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy);
 +			sel = RKL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy);
 +		} else {
 +			mask = ICL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy);
 +			sel = ICL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy);
 +		}
 +
 +		/*
 +		 * Even though this register references DDIs, note that we
 +		 * want to pass the PHY rather than the port (DDI).  For
 +		 * ICL, port=phy in all cases so it doesn't matter, but for
 +		 * EHL the bspec notes the following:
 +		 *
 +		 *   "DDID clock tied to DDIA clock, so DPCLKA_CFGCR0 DDIA
 +		 *   Clock Select chooses the PLL for both DDIA and DDID and
 +		 *   drives port A in all cases."
 +		 */
 +		val &= ~mask;
 +		val |= sel;
 +		intel_de_write(dev_priv, ICL_DPCLKA_CFGCR0, val);
 +		intel_de_posting_read(dev_priv, ICL_DPCLKA_CFGCR0);
 +	}
 +
 +	val &= ~icl_dpclka_cfgcr0_clk_off(dev_priv, phy);
 +	intel_de_write(dev_priv, ICL_DPCLKA_CFGCR0, val);
 +
 +	mutex_unlock(&dev_priv->dpll.lock);
++=======
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	_cnl_ddi_enable_clock(i915, ADLS_DPCLKA_CFGCR(phy),
+ 			      ADLS_DPCLKA_CFGCR_DDI_CLK_SEL_MASK(phy),
+ 			      pll->info->id << ADLS_DPCLKA_CFGCR_DDI_SHIFT(phy),
+ 			      ICL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
+ }
+ 
+ static void adls_ddi_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	_cnl_ddi_disable_clock(i915, ADLS_DPCLKA_CFGCR(phy),
+ 			       ICL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
+ }
+ 
+ static void rkl_ddi_enable_clock(struct intel_encoder *encoder,
+ 				 const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	_cnl_ddi_enable_clock(i915, ICL_DPCLKA_CFGCR0,
+ 			      RKL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy),
+ 			      RKL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy),
+ 			      RKL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
+ }
+ 
+ static void rkl_ddi_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	_cnl_ddi_disable_clock(i915, ICL_DPCLKA_CFGCR0,
+ 			       RKL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
+ }
+ 
+ static void dg1_ddi_enable_clock(struct intel_encoder *encoder,
+ 				 const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	/*
+ 	 * If we fail this, something went very wrong: first 2 PLLs should be
+ 	 * used by first 2 phys and last 2 PLLs by last phys
+ 	 */
+ 	if (drm_WARN_ON(&i915->drm,
+ 			(pll->info->id < DPLL_ID_DG1_DPLL2 && phy >= PHY_C) ||
+ 			(pll->info->id >= DPLL_ID_DG1_DPLL2 && phy < PHY_C)))
+ 		return;
+ 
+ 	_cnl_ddi_enable_clock(i915, DG1_DPCLKA_CFGCR0(phy),
+ 			      DG1_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy),
+ 			      DG1_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy),
+ 			      DG1_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
++>>>>>>> 97a24a701c13 (drm/i915: s/dev_priv/i915/ for the remainder of DDI clock routing)
  }
  
 -static void dg1_ddi_disable_clock(struct intel_encoder *encoder)
 +static void icl_unmap_plls_to_ports(struct intel_encoder *encoder)
  {
++<<<<<<< HEAD
 +	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
 +	enum phy phy = intel_port_to_phy(dev_priv, encoder->port);
 +	u32 val;
 +
 +	mutex_lock(&dev_priv->dpll.lock);
 +
 +	val = intel_de_read(dev_priv, ICL_DPCLKA_CFGCR0);
 +	val |= icl_dpclka_cfgcr0_clk_off(dev_priv, phy);
 +	intel_de_write(dev_priv, ICL_DPCLKA_CFGCR0, val);
 +
 +	mutex_unlock(&dev_priv->dpll.lock);
++=======
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	_cnl_ddi_disable_clock(i915, DG1_DPCLKA_CFGCR0(phy),
+ 			       DG1_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
++>>>>>>> 97a24a701c13 (drm/i915: s/dev_priv/i915/ for the remainder of DDI clock routing)
  }
  
 -static void icl_ddi_combo_enable_clock(struct intel_encoder *encoder,
 -				       const struct intel_crtc_state *crtc_state)
 -{
 +static void icl_sanitize_port_clk_off(struct drm_i915_private *dev_priv,
 +				      u32 port_mask, bool ddi_clk_needed)
 +{
++<<<<<<< HEAD
 +	enum port port;
 +	u32 val;
 +
 +	val = intel_de_read(dev_priv, ICL_DPCLKA_CFGCR0);
 +	for_each_port_masked(port, port_mask) {
 +		enum phy phy = intel_port_to_phy(dev_priv, port);
 +		bool ddi_clk_off = val & icl_dpclka_cfgcr0_clk_off(dev_priv,
 +								   phy);
 +
 +		if (ddi_clk_needed == !ddi_clk_off)
 +			continue;
 +
 +		/*
 +		 * Punt on the case now where clock is gated, but it would
 +		 * be needed by the port. Something else is really broken then.
 +		 */
 +		if (drm_WARN_ON(&dev_priv->drm, ddi_clk_needed))
 +			continue;
 +
 +		drm_notice(&dev_priv->drm,
 +			   "PHY %c is disabled/in DSI mode with an ungated DDI clock, gate it\n",
 +			   phy_name(phy));
 +		val |= icl_dpclka_cfgcr0_clk_off(dev_priv, phy);
 +		intel_de_write(dev_priv, ICL_DPCLKA_CFGCR0, val);
 +	}
++=======
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	_cnl_ddi_enable_clock(i915, ICL_DPCLKA_CFGCR0,
+ 			      ICL_DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(phy),
+ 			      ICL_DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, phy),
+ 			      ICL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
+ }
+ 
+ static void icl_ddi_combo_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum phy phy = intel_port_to_phy(i915, encoder->port);
+ 
+ 	_cnl_ddi_disable_clock(i915, ICL_DPCLKA_CFGCR0,
+ 			       ICL_DPCLKA_CFGCR0_DDI_CLK_OFF(phy));
+ }
+ 
+ static void jsl_ddi_tc_enable_clock(struct intel_encoder *encoder,
+ 				    const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum port port = encoder->port;
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	/*
+ 	 * "For DDIC and DDID, program DDI_CLK_SEL to map the MG clock to the port.
+ 	 *  MG does not exist, but the programming is required to ungate DDIC and DDID."
+ 	 */
+ 	intel_de_write(i915, DDI_CLK_SEL(port), DDI_CLK_SEL_MG);
+ 
+ 	icl_ddi_combo_enable_clock(encoder, crtc_state);
+ }
+ 
+ static void jsl_ddi_tc_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum port port = encoder->port;
+ 
+ 	icl_ddi_combo_disable_clock(encoder);
+ 
+ 	intel_de_write(i915, DDI_CLK_SEL(port), DDI_CLK_SEL_NONE);
+ }
+ 
+ static void icl_ddi_tc_enable_clock(struct intel_encoder *encoder,
+ 				    const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum tc_port tc_port = intel_port_to_tc(i915, encoder->port);
+ 	enum port port = encoder->port;
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	intel_de_write(i915, DDI_CLK_SEL(port),
+ 		       icl_pll_to_ddi_clk_sel(encoder, crtc_state));
+ 
+ 	mutex_lock(&i915->dpll.lock);
+ 
+ 	intel_de_rmw(i915, ICL_DPCLKA_CFGCR0,
+ 		     ICL_DPCLKA_CFGCR0_TC_CLK_OFF(tc_port), 0);
+ 
+ 	mutex_unlock(&i915->dpll.lock);
+ }
+ 
+ static void icl_ddi_tc_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum tc_port tc_port = intel_port_to_tc(i915, encoder->port);
+ 	enum port port = encoder->port;
+ 
+ 	mutex_lock(&i915->dpll.lock);
+ 
+ 	intel_de_rmw(i915, ICL_DPCLKA_CFGCR0,
+ 		     0, ICL_DPCLKA_CFGCR0_TC_CLK_OFF(tc_port));
+ 
+ 	mutex_unlock(&i915->dpll.lock);
+ 
+ 	intel_de_write(i915, DDI_CLK_SEL(port), DDI_CLK_SEL_NONE);
+ }
+ 
+ static void cnl_ddi_enable_clock(struct intel_encoder *encoder,
+ 				 const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum port port = encoder->port;
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	_cnl_ddi_enable_clock(i915, DPCLKA_CFGCR0,
+ 			      DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(port),
+ 			      DPCLKA_CFGCR0_DDI_CLK_SEL(pll->info->id, port),
+ 			      DPCLKA_CFGCR0_DDI_CLK_OFF(port));
+ }
+ 
+ static void cnl_ddi_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum port port = encoder->port;
+ 
+ 	_cnl_ddi_disable_clock(i915, DPCLKA_CFGCR0,
+ 			       DPCLKA_CFGCR0_DDI_CLK_OFF(port));
+ }
+ 
+ static void skl_ddi_enable_clock(struct intel_encoder *encoder,
+ 				 const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum port port = encoder->port;
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	mutex_lock(&i915->dpll.lock);
+ 
+ 	intel_de_rmw(i915, DPLL_CTRL2,
+ 		     DPLL_CTRL2_DDI_CLK_OFF(port) |
+ 		     DPLL_CTRL2_DDI_CLK_SEL_MASK(port),
+ 		     DPLL_CTRL2_DDI_CLK_SEL(pll->info->id, port) |
+ 		     DPLL_CTRL2_DDI_SEL_OVERRIDE(port));
+ 
+ 	mutex_unlock(&i915->dpll.lock);
+ }
+ 
+ static void skl_ddi_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum port port = encoder->port;
+ 
+ 	mutex_lock(&i915->dpll.lock);
+ 
+ 	intel_de_rmw(i915, DPLL_CTRL2,
+ 		     0, DPLL_CTRL2_DDI_CLK_OFF(port));
+ 
+ 	mutex_unlock(&i915->dpll.lock);
+ }
+ 
+ void hsw_ddi_enable_clock(struct intel_encoder *encoder,
+ 			  const struct intel_crtc_state *crtc_state)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	const struct intel_shared_dpll *pll = crtc_state->shared_dpll;
+ 	enum port port = encoder->port;
+ 
+ 	if (drm_WARN_ON(&i915->drm, !pll))
+ 		return;
+ 
+ 	intel_de_write(i915, PORT_CLK_SEL(port), hsw_pll_to_ddi_pll_sel(pll));
+ }
+ 
+ void hsw_ddi_disable_clock(struct intel_encoder *encoder)
+ {
+ 	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
+ 	enum port port = encoder->port;
+ 
+ 	intel_de_write(i915, PORT_CLK_SEL(port), PORT_CLK_SEL_NONE);
+ }
+ 
+ void intel_ddi_enable_clock(struct intel_encoder *encoder,
+ 			    const struct intel_crtc_state *crtc_state)
+ {
+ 	if (encoder->enable_clock)
+ 		encoder->enable_clock(encoder, crtc_state);
+ }
+ 
+ static void intel_ddi_disable_clock(struct intel_encoder *encoder)
+ {
+ 	if (encoder->disable_clock)
+ 		encoder->disable_clock(encoder);
++>>>>>>> 97a24a701c13 (drm/i915: s/dev_priv/i915/ for the remainder of DDI clock routing)
  }
  
  void icl_sanitize_encoder_pll_mapping(struct intel_encoder *encoder)
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi.c
