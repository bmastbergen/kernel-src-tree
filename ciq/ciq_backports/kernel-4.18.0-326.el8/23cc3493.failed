iommu/uapi: Rename uapi functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Jacob Pan <jacob.pan.linux@gmail.com>
commit 23cc3493b5e107b8deb697cf3157a07276b5eff7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/23cc3493.failed

User APIs such as iommu_sva_unbind_gpasid() may also be used by the
kernel. Since we introduced user pointer to the UAPI functions,
in-kernel callers cannot share the same APIs. In-kernel callers are also
trusted, there is no need to validate the data.

We plan to have two flavors of the same API functions, one called
through ioctls, carrying a user pointer and one called directly with
valid IOMMU UAPI structs. To differentiate both, let's rename existing
functions with an iommu_uapi_ prefix.

	Suggested-by: Alex Williamson <alex.williamson@redhat.com>
	Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
	Reviewed-by: Eric Auger <eric.auger@redhat.com>
Link: https://lore.kernel.org/r/1601051567-54787-5-git-send-email-jacob.jun.pan@linux.intel.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 23cc3493b5e107b8deb697cf3157a07276b5eff7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/iommu.c
#	include/linux/iommu.h
diff --cc drivers/iommu/iommu.c
index 5335b649855c,e412a0abfefa..000000000000
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@@ -1960,18 -1961,8 +1960,23 @@@ out_unlock
  }
  EXPORT_SYMBOL_GPL(iommu_attach_device);
  
++<<<<<<< HEAD
 +int iommu_deferred_attach(struct device *dev, struct iommu_domain *domain)
 +{
 +	const struct iommu_ops *ops = domain->ops;
 +
 +	if (ops->is_attach_deferred && ops->is_attach_deferred(domain, dev))
 +		return __iommu_attach_device(domain, dev);
 +
 +	return 0;
 +}
 +
 +int iommu_cache_invalidate(struct iommu_domain *domain, struct device *dev,
 +			   struct iommu_cache_invalidate_info *inv_info)
++=======
+ int iommu_uapi_cache_invalidate(struct iommu_domain *domain, struct device *dev,
+ 				struct iommu_cache_invalidate_info *inv_info)
++>>>>>>> 23cc3493b5e1 (iommu/uapi: Rename uapi functions)
  {
  	if (unlikely(!domain->ops->cache_invalidate))
  		return -ENODEV;
diff --cc include/linux/iommu.h
index 4968822e1068,d18de2afa6fb..000000000000
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@@ -1068,14 -1038,16 +1067,21 @@@ static inline int iommu_uapi_cache_inva
  {
  	return -ENODEV;
  }
- static inline int iommu_sva_bind_gpasid(struct iommu_domain *domain,
- 				struct device *dev, struct iommu_gpasid_bind_data *data)
+ 
++<<<<<<< HEAD
++static inline int iommu_sva_unbind_gpasid(struct iommu_domain *domain,
++					   struct device *dev, u32 pasid)
++=======
+ static inline int iommu_uapi_sva_bind_gpasid(struct iommu_domain *domain,
+ 					     struct device *dev,
+ 					     struct iommu_gpasid_bind_data *data)
  {
  	return -ENODEV;
  }
  
- static inline int iommu_sva_unbind_gpasid(struct iommu_domain *domain,
- 					   struct device *dev, u32 pasid)
+ static inline int iommu_uapi_sva_unbind_gpasid(struct iommu_domain *domain,
+ 					       struct device *dev, int pasid)
++>>>>>>> 23cc3493b5e1 (iommu/uapi: Rename uapi functions)
  {
  	return -ENODEV;
  }
* Unmerged path drivers/iommu/iommu.c
* Unmerged path include/linux/iommu.h
