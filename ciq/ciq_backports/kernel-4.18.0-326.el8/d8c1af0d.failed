xfs: rename the ondisk dquot d_flags to d_type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit d8c1af0d6ad617df4563e78bbee70691f25ace58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/d8c1af0d.failed

The ondisk dquot stores the quota record type in the flags field.
Rename this field to d_type to make the _type relationship between the
ondisk and incore dquot more obvious.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit d8c1af0d6ad617df4563e78bbee70691f25ace58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_dquot_buf.c
#	fs/xfs/xfs_dquot.c
diff --cc fs/xfs/libxfs/xfs_dquot_buf.c
index 450147df3042,5a2db00b9d5f..000000000000
--- a/fs/xfs/libxfs/xfs_dquot_buf.c
+++ b/fs/xfs/libxfs/xfs_dquot_buf.c
@@@ -59,9 -61,12 +59,18 @@@ xfs_dquot_verify
  	if (ddq->d_version != XFS_DQUOT_VERSION)
  		return __this_address;
  
++<<<<<<< HEAD
 +	if (ddq->d_flags != XFS_DQTYPE_USER &&
 +	    ddq->d_flags != XFS_DQTYPE_PROJ &&
 +	    ddq->d_flags != XFS_DQTYPE_GROUP)
++=======
+ 	if (ddq->d_type & ~XFS_DQTYPE_ANY)
+ 		return __this_address;
+ 	ddq_type = ddq->d_type & XFS_DQTYPE_REC_MASK;
+ 	if (ddq_type != XFS_DQTYPE_USER &&
+ 	    ddq_type != XFS_DQTYPE_PROJ &&
+ 	    ddq_type != XFS_DQTYPE_GROUP)
++>>>>>>> d8c1af0d6ad6 (xfs: rename the ondisk dquot d_flags to d_type)
  		return __this_address;
  
  	if (id != -1 && id != be32_to_cpu(ddq->d_id))
diff --cc fs/xfs/xfs_dquot.c
index 767bb09a6ae3,799b986975e8..000000000000
--- a/fs/xfs/xfs_dquot.c
+++ b/fs/xfs/xfs_dquot.c
@@@ -526,7 -488,7 +526,11 @@@ xfs_dquot_from_disk
  	 * Ensure that we got the type and ID we were looking for.
  	 * Everything else was checked by the dquot buffer verifier.
  	 */
++<<<<<<< HEAD
 +	if ((ddqp->d_flags & XFS_DQTYPE_REC_MASK) != dqp->dq_flags ||
++=======
+ 	if ((ddqp->d_type & XFS_DQTYPE_REC_MASK) != xfs_dquot_type(dqp) ||
++>>>>>>> d8c1af0d6ad6 (xfs: rename the ondisk dquot d_flags to d_type)
  	    be32_to_cpu(ddqp->d_id) != dqp->q_id) {
  		xfs_alert_tag(bp->b_mount, XFS_PTAG_VERIFIER_ERROR,
  			  "Metadata corruption detected at %pS, quota %u",
@@@ -536,6 -498,7 +540,10 @@@
  	}
  
  	/* copy everything from disk dquot to the incore dquot */
++<<<<<<< HEAD
++=======
+ 	dqp->q_type = ddqp->d_type;
++>>>>>>> d8c1af0d6ad6 (xfs: rename the ondisk dquot d_flags to d_type)
  	dqp->q_blk.hardlimit = be64_to_cpu(ddqp->d_blk_hardlimit);
  	dqp->q_blk.softlimit = be64_to_cpu(ddqp->d_blk_softlimit);
  	dqp->q_ino.hardlimit = be64_to_cpu(ddqp->d_ino_hardlimit);
@@@ -576,7 -539,7 +584,11 @@@ xfs_dquot_to_disk
  {
  	ddqp->d_magic = cpu_to_be16(XFS_DQUOT_MAGIC);
  	ddqp->d_version = XFS_DQUOT_VERSION;
++<<<<<<< HEAD
 +	ddqp->d_flags = dqp->dq_flags & XFS_DQTYPE_REC_MASK;
++=======
+ 	ddqp->d_type = dqp->q_type;
++>>>>>>> d8c1af0d6ad6 (xfs: rename the ondisk dquot d_flags to d_type)
  	ddqp->d_id = cpu_to_be32(dqp->q_id);
  	ddqp->d_pad0 = 0;
  	ddqp->d_pad = 0;
* Unmerged path fs/xfs/libxfs/xfs_dquot_buf.c
diff --git a/fs/xfs/libxfs/xfs_format.h b/fs/xfs/libxfs/xfs_format.h
index 5d5e0f5eda97..96267aba4567 100644
--- a/fs/xfs/libxfs/xfs_format.h
+++ b/fs/xfs/libxfs/xfs_format.h
@@ -1157,7 +1157,7 @@ static inline void xfs_dinode_put_rdev(struct xfs_dinode *dip, xfs_dev_t rdev)
 struct xfs_disk_dquot {
 	__be16		d_magic;	/* dquot magic = XFS_DQUOT_MAGIC */
 	__u8		d_version;	/* dquot version */
-	__u8		d_flags;	/* XFS_DQTYPE_USER/PROJ/GROUP */
+	__u8		d_type;		/* XFS_DQTYPE_USER/PROJ/GROUP */
 	__be32		d_id;		/* user,project,group id */
 	__be64		d_blk_hardlimit;/* absolute limit on disk blks */
 	__be64		d_blk_softlimit;/* preferred limit on disk blks */
* Unmerged path fs/xfs/xfs_dquot.c
diff --git a/fs/xfs/xfs_dquot_item_recover.c b/fs/xfs/xfs_dquot_item_recover.c
index 93178341569a..5875c7e1bd28 100644
--- a/fs/xfs/xfs_dquot_item_recover.c
+++ b/fs/xfs/xfs_dquot_item_recover.c
@@ -39,7 +39,7 @@ xlog_recover_dquot_ra_pass2(
 	if (item->ri_buf[1].i_len < sizeof(struct xfs_disk_dquot))
 		return;
 
-	type = recddq->d_flags & XFS_DQTYPE_REC_MASK;
+	type = recddq->d_type & XFS_DQTYPE_REC_MASK;
 	ASSERT(type);
 	if (log->l_quotaoffs_flag & type)
 		return;
@@ -91,7 +91,7 @@ xlog_recover_dquot_commit_pass2(
 	/*
 	 * This type of quotas was turned off, so ignore this record.
 	 */
-	type = recddq->d_flags & XFS_DQTYPE_REC_MASK;
+	type = recddq->d_type & XFS_DQTYPE_REC_MASK;
 	ASSERT(type);
 	if (log->l_quotaoffs_flag & type)
 		return 0;
diff --git a/fs/xfs/xfs_qm.c b/fs/xfs/xfs_qm.c
index ebb106499144..a0e9f58f71eb 100644
--- a/fs/xfs/xfs_qm.c
+++ b/fs/xfs/xfs_qm.c
@@ -855,14 +855,14 @@ xfs_qm_reset_dqcounts(
 		 * xfs_dquot_verify.
 		 */
 		if (xfs_dqblk_verify(mp, &dqb[j], id + j) ||
-		    (dqb[j].dd_diskdq.d_flags & XFS_DQTYPE_REC_MASK) != type)
+		    (dqb[j].dd_diskdq.d_type & XFS_DQTYPE_REC_MASK) != type)
 			xfs_dqblk_repair(mp, &dqb[j], id + j, type);
 
 		/*
 		 * Reset type in case we are reusing group quota file for
 		 * project quotas or vice versa
 		 */
-		ddq->d_flags = type;
+		ddq->d_type = type;
 		ddq->d_bcount = 0;
 		ddq->d_icount = 0;
 		ddq->d_rtbcount = 0;
