ALSA: usb-audio: Fix implicit sync clearance at stopping stream

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit 988cc17552606be67a956cf8cd6ff504cfc5d643
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/988cc175.failed

The recent endpoint management change for implicit feedback mode added
a clearance of ep->sync_sink (formerly ep->sync_slave) pointer at
snd_usb_endpoint_stop() to assure no leftover for the feedback from
the already stopped capture stream.  This turned out to cause a
regression, however, when full-duplex streams were running and only a
capture was stopped.  Because of the above clearance of ep->sync_sink
pointer, no more feedback is done, hence the playback will stall.

This patch fixes the ep->sync_sink clearance to be done only after all
endpoints are released, for addressing the regression.

Reported-and-tested-by: Lucas Endres <jaffa225man@gmail.com>
Fixes: bf6313a0ff76 ("ALSA: usb-audio: Refactor endpoint management")
	Cc: <stable@vger.kernel.org>
Link: https://lore.kernel.org/r/20210426063349.18601-1-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 988cc17552606be67a956cf8cd6ff504cfc5d643)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/usb/endpoint.c
diff --cc sound/usb/endpoint.c
index 208ac2aff462,014c43862826..000000000000
--- a/sound/usb/endpoint.c
+++ b/sound/usb/endpoint.c
@@@ -1309,43 -1436,18 +1309,51 @@@ void snd_usb_endpoint_stop(struct snd_u
  	if (!ep)
  		return;
  
 -	usb_audio_dbg(ep->chip, "Stopping %s EP 0x%x (running %d)\n",
 -		      ep_type_name(ep->type), ep->ep_num,
 -		      atomic_read(&ep->running));
 +	usb_audio_dbg(ep->chip, "Stopping %s EP 0x%x (count %d)\n",
 +		      ep_type_name(ep->type), ep->ep_num, ep->use_count);
  
 -	if (snd_BUG_ON(!atomic_read(&ep->running)))
 +	if (snd_BUG_ON(ep->use_count == 0))
  		return;
  
++<<<<<<< HEAD
 +	if (--ep->use_count == 0) {
 +		deactivate_urbs(ep, false);
 +		set_bit(EP_FLAG_STOPPING, &ep->flags);
 +	}
 +}
 +
 +/**
 + * snd_usb_endpoint_deactivate: deactivate an snd_usb_endpoint
 + *
 + * @ep: the endpoint to deactivate
 + *
 + * If the endpoint is not currently in use, this functions will
 + * deactivate its associated URBs.
 + *
 + * In case of any active users, this functions does nothing.
 + */
 +void snd_usb_endpoint_deactivate(struct snd_usb_endpoint *ep)
 +{
 +	if (!ep)
 +		return;
 +
 +	if (ep->use_count != 0)
 +		return;
 +
 +	deactivate_urbs(ep, true);
 +	wait_clear_urbs(ep);
 +
 +	/* clear the saved hw params */
 +	spin_lock_irq(&ep->lock);
 +	ep->cur_rate = 0;
 +	spin_unlock_irq(&ep->lock);
++=======
+ 	if (!atomic_dec_return(&ep->running)) {
+ 		if (ep->sync_source)
+ 			WRITE_ONCE(ep->sync_source->sync_sink, NULL);
+ 		stop_urbs(ep, false);
+ 	}
++>>>>>>> 988cc1755260 (ALSA: usb-audio: Fix implicit sync clearance at stopping stream)
  }
  
  /**
* Unmerged path sound/usb/endpoint.c
