iommu: Add iova and size as parameters in iotlb_sync_map

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Yong Wu <yong.wu@mediatek.com>
commit 2ebbd25873cef06f739489fd8ff9f707a3dfa2fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/2ebbd258.failed

iotlb_sync_map allow IOMMU drivers tlb sync after completing the whole
mapping. This patch adds iova and size as the parameters in it. then the
IOMMU driver could flush tlb with the whole range once after iova mapping
to improve performance.

	Signed-off-by: Yong Wu <yong.wu@mediatek.com>
	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
	Acked-by: Will Deacon <will@kernel.org>
Link: https://lore.kernel.org/r/20210107122909.16317-3-yong.wu@mediatek.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 2ebbd25873cef06f739489fd8ff9f707a3dfa2fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/tegra-gart.c
#	include/linux/iommu.h
diff --cc drivers/iommu/tegra-gart.c
index 55ec647f9891,05e8e19b8269..000000000000
--- a/drivers/iommu/tegra-gart.c
+++ b/drivers/iommu/tegra-gart.c
@@@ -361,10 -258,21 +361,25 @@@ static int gart_iommu_add_device(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void gart_iommu_remove_device(struct device *dev)
 +{
 +	iommu_group_remove_device(dev);
 +	iommu_device_unlink(&gart_handle->iommu, dev);
++=======
+ static void gart_iommu_sync_map(struct iommu_domain *domain, unsigned long iova,
+ 				size_t size)
+ {
+ 	FLUSH_GART_REGS(gart_handle);
+ }
+ 
+ static void gart_iommu_sync(struct iommu_domain *domain,
+ 			    struct iommu_iotlb_gather *gather)
+ {
+ 	size_t length = gather->end - gather->start;
+ 
+ 	gart_iommu_sync_map(domain, gather->start, length);
++>>>>>>> 2ebbd25873ce (iommu: Add iova and size as parameters in iotlb_sync_map)
  }
  
  static const struct iommu_ops gart_iommu_ops = {
diff --cc include/linux/iommu.h
index 8cdbd24b3c57,9ce0aa9e236b..000000000000
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@@ -257,23 -241,19 +257,30 @@@ struct iommu_ops 
  
  	int (*attach_dev)(struct iommu_domain *domain, struct device *dev);
  	void (*detach_dev)(struct iommu_domain *domain, struct device *dev);
 -	int (*map)(struct iommu_domain *domain, unsigned long iova,
 -		   phys_addr_t paddr, size_t size, int prot, gfp_t gfp);
 -	size_t (*unmap)(struct iommu_domain *domain, unsigned long iova,
 -		     size_t size, struct iommu_iotlb_gather *iotlb_gather);
 +	RH_KABI_BROKEN_REPLACE(int (*map)(struct iommu_domain *domain, unsigned long iova,\
 +					  phys_addr_t paddr, size_t size, int prot),\
 +			       int (*map)(struct iommu_domain *domain, unsigned long iova,\
 +					  phys_addr_t paddr, size_t size, int prot, gfp_t gfp))
 +	RH_KABI_BROKEN_REPLACE(size_t (*unmap)(struct iommu_domain *domain, unsigned long iova,\
 +					       size_t size),size_t (*unmap)(struct iommu_domain *domain, unsigned long iova, \
 +									    size_t size, struct iommu_iotlb_gather *iotlb_gather))
  	void (*flush_iotlb_all)(struct iommu_domain *domain);
++<<<<<<< HEAD
 +	RH_KABI_BROKEN_REPLACE(void (*iotlb_range_add)(struct iommu_domain *domain,\
 +						       unsigned long iova, size_t size), \
 +			       void (*iotlb_sync_map)(struct iommu_domain *domain))
 +	RH_KABI_BROKEN_REPLACE(void (*iotlb_sync)(struct iommu_domain *domain),\
 +			       void (*iotlb_sync)(struct iommu_domain *domain, \
 +						  struct iommu_iotlb_gather *iotlb_gather))
++=======
+ 	void (*iotlb_sync_map)(struct iommu_domain *domain, unsigned long iova,
+ 			       size_t size);
+ 	void (*iotlb_sync)(struct iommu_domain *domain,
+ 			   struct iommu_iotlb_gather *iotlb_gather);
++>>>>>>> 2ebbd25873ce (iommu: Add iova and size as parameters in iotlb_sync_map)
  	phys_addr_t (*iova_to_phys)(struct iommu_domain *domain, dma_addr_t iova);
 -	struct iommu_device *(*probe_device)(struct device *dev);
 -	void (*release_device)(struct device *dev);
 -	void (*probe_finalize)(struct device *dev);
 +	RH_KABI_BROKEN_REMOVE(int (*add_device)(struct device *dev))
 +	RH_KABI_BROKEN_REMOVE(void (*remove_device)(struct device *dev))
  	struct iommu_group *(*device_group)(struct device *dev);
  	int (*domain_get_attr)(struct iommu_domain *domain,
  			       enum iommu_attr attr, void *data);
diff --git a/drivers/iommu/iommu.c b/drivers/iommu/iommu.c
index c1e58e1f25e3..6871e9d1743f 100644
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@ -2272,7 +2272,7 @@ static int _iommu_map(struct iommu_domain *domain, unsigned long iova,
 
 	ret = __iommu_map(domain, iova, paddr, size, prot, GFP_KERNEL);
 	if (ret == 0 && ops->iotlb_sync_map)
-		ops->iotlb_sync_map(domain);
+		ops->iotlb_sync_map(domain, iova, size);
 
 	return ret;
 }
@@ -2404,7 +2404,7 @@ static size_t __iommu_map_sg(struct iommu_domain *domain, unsigned long iova,
 	}
 
 	if (ops->iotlb_sync_map)
-		ops->iotlb_sync_map(domain);
+		ops->iotlb_sync_map(domain, iova, mapped);
 	return mapped;
 
 out_err:
* Unmerged path drivers/iommu/tegra-gart.c
* Unmerged path include/linux/iommu.h
