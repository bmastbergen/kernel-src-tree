drm/i915/gen9_bc: Introduce HPD pin mappings for TGP PCH + CML combos

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Lyude Paul <lyude@redhat.com>
commit c8455098c67914c59d07f01819469e2e6f76f358
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/c8455098.failed

Next, let's start introducing the HPD pin mappings for Intel's new gen9_bc
platform in order to make hotplugging display connectors work. Since
gen9_bc is just a TGP PCH along with a CML CPU, except with the same HPD
mappings as ICL, we simply add a skl_hpd_pin function that is shared
between gen9 and gen9_bc which handles both the traditional gen9 HPD pin
mappings and the Icelake HPD pin mappings that gen9_bc uses.

Changes since v4:
* Split this into its own commit
* Introduce skl_hpd_pin() like vsyrjala suggested and use that instead of
  sticking our HPD pin mappings in TGP code

	Cc: Matt Roper <matthew.d.roper@intel.com>
	Cc: Jani Nikula <jani.nikula@linux.intel.com>
	Cc: Ville Syrjala <ville.syrjala@linux.intel.com>
[originally from Tejas's work]
	Signed-off-by: Tejas Upadhyay <tejaskumarx.surendrakumar.upadhyay@intel.com>
	Signed-off-by: Lyude Paul <lyude@redhat.com>
	Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210209212832.1401815-4-lyude@redhat.com
(cherry picked from commit c8455098c67914c59d07f01819469e2e6f76f358)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_ddi.c
diff --cc drivers/gpu/drm/i915/display/intel_ddi.c
index 87726ca7041c,3b97c0091812..000000000000
--- a/drivers/gpu/drm/i915/display/intel_ddi.c
+++ b/drivers/gpu/drm/i915/display/intel_ddi.c
@@@ -4893,10 -3891,80 +4893,84 @@@ intel_ddi_max_lanes(struct intel_digita
  static bool hti_uses_phy(struct drm_i915_private *i915, enum phy phy)
  {
  	return i915->hti_state & HDPORT_ENABLED &&
 -	       i915->hti_state & HDPORT_DDI_USED(phy);
 +		(i915->hti_state & HDPORT_PHY_USED_DP(phy) ||
 +		 i915->hti_state & HDPORT_PHY_USED_HDMI(phy));
  }
  
++<<<<<<< HEAD
++=======
+ static enum hpd_pin dg1_hpd_pin(struct drm_i915_private *dev_priv,
+ 				enum port port)
+ {
+ 	if (port >= PORT_TC1)
+ 		return HPD_PORT_C + port - PORT_TC1;
+ 	else
+ 		return HPD_PORT_A + port - PORT_A;
+ }
+ 
+ static enum hpd_pin tgl_hpd_pin(struct drm_i915_private *dev_priv,
+ 				enum port port)
+ {
+ 	if (port >= PORT_TC1)
+ 		return HPD_PORT_TC1 + port - PORT_TC1;
+ 	else
+ 		return HPD_PORT_A + port - PORT_A;
+ }
+ 
+ static enum hpd_pin rkl_hpd_pin(struct drm_i915_private *dev_priv,
+ 				enum port port)
+ {
+ 	if (HAS_PCH_TGP(dev_priv))
+ 		return tgl_hpd_pin(dev_priv, port);
+ 
+ 	if (port >= PORT_TC1)
+ 		return HPD_PORT_C + port - PORT_TC1;
+ 	else
+ 		return HPD_PORT_A + port - PORT_A;
+ }
+ 
+ static enum hpd_pin icl_hpd_pin(struct drm_i915_private *dev_priv,
+ 				enum port port)
+ {
+ 	if (port >= PORT_C)
+ 		return HPD_PORT_TC1 + port - PORT_C;
+ 	else
+ 		return HPD_PORT_A + port - PORT_A;
+ }
+ 
+ static enum hpd_pin ehl_hpd_pin(struct drm_i915_private *dev_priv,
+ 				enum port port)
+ {
+ 	if (port == PORT_D)
+ 		return HPD_PORT_A;
+ 
+ 	if (HAS_PCH_MCC(dev_priv))
+ 		return icl_hpd_pin(dev_priv, port);
+ 
+ 	return HPD_PORT_A + port - PORT_A;
+ }
+ 
+ static enum hpd_pin cnl_hpd_pin(struct drm_i915_private *dev_priv,
+ 				enum port port)
+ {
+ 	if (port == PORT_F)
+ 		return HPD_PORT_E;
+ 
+ 	return HPD_PORT_A + port - PORT_A;
+ }
+ 
+ static enum hpd_pin skl_hpd_pin(struct drm_i915_private *dev_priv, enum port port)
+ {
+ 	if (HAS_PCH_TGP(dev_priv))
+ 		return icl_hpd_pin(dev_priv, port);
+ 
+ 	return HPD_PORT_A + port - PORT_A;
+ }
+ 
+ #define port_tc_name(port) ((port) - PORT_TC1 + '1')
+ #define tc_port_name(tc_port) ((tc_port) - TC_PORT_1 + '1')
+ 
++>>>>>>> c8455098c679 (drm/i915/gen9_bc: Introduce HPD pin mappings for TGP PCH + CML combos)
  void intel_ddi_init(struct drm_i915_private *dev_priv, enum port port)
  {
  	struct intel_digital_port *dig_port;
@@@ -4970,6 -4066,23 +5044,26 @@@
  	encoder->cloneable = 0;
  	encoder->pipe_mask = ~0;
  
++<<<<<<< HEAD
++=======
+ 	if (IS_DG1(dev_priv))
+ 		encoder->hpd_pin = dg1_hpd_pin(dev_priv, port);
+ 	else if (IS_ROCKETLAKE(dev_priv))
+ 		encoder->hpd_pin = rkl_hpd_pin(dev_priv, port);
+ 	else if (INTEL_GEN(dev_priv) >= 12)
+ 		encoder->hpd_pin = tgl_hpd_pin(dev_priv, port);
+ 	else if (IS_JSL_EHL(dev_priv))
+ 		encoder->hpd_pin = ehl_hpd_pin(dev_priv, port);
+ 	else if (IS_GEN(dev_priv, 11))
+ 		encoder->hpd_pin = icl_hpd_pin(dev_priv, port);
+ 	else if (IS_GEN(dev_priv, 10))
+ 		encoder->hpd_pin = cnl_hpd_pin(dev_priv, port);
+ 	else if (IS_GEN(dev_priv, 9))
+ 		encoder->hpd_pin = skl_hpd_pin(dev_priv, port);
+ 	else
+ 		encoder->hpd_pin = intel_hpd_pin_default(dev_priv, port);
+ 
++>>>>>>> c8455098c679 (drm/i915/gen9_bc: Introduce HPD pin mappings for TGP PCH + CML combos)
  	if (INTEL_GEN(dev_priv) >= 11)
  		dig_port->saved_port_bits =
  			intel_de_read(dev_priv, DDI_BUF_CTL(port))
* Unmerged path drivers/gpu/drm/i915/display/intel_ddi.c
