net/mlx5e: Fix error flow in change profile

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Roi Dayan <roid@nvidia.com>
commit 469549e4778a1e5ac4a7c6659c4b1a75a648bfdf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/469549e4.failed

Move priv memset from init to cleanup to avoid double priv cleanup
that can happen on profile change if also roolback fails.
Add missing cleanup flow in mlx5e_netdev_attach_profile().

Fixes: c4d7eb57687f ("net/mxl5e: Add change profile method")
	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 469549e4778a1e5ac4a7c6659c4b1a75a648bfdf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index a6f8f9e7ecf5,33b418796e43..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -5294,13 -5484,9 +5294,19 @@@ static const struct mlx5e_profile mlx5e
  };
  
  /* mlx5e generic netdev management API (move to en_common.c) */
++<<<<<<< HEAD
 +
 +/* mlx5e_netdev_init/cleanup must be called from profile->init/cleanup callbacks */
 +int mlx5e_netdev_init(struct net_device *netdev,
 +		      struct mlx5e_priv *priv,
 +		      struct mlx5_core_dev *mdev,
 +		      const struct mlx5e_profile *profile,
 +		      void *ppriv)
++=======
+ int mlx5e_priv_init(struct mlx5e_priv *priv,
+ 		    struct net_device *netdev,
+ 		    struct mlx5_core_dev *mdev)
++>>>>>>> 469549e4778a (net/mlx5e: Fix error flow in change profile)
  {
  	/* priv init */
  	priv->mdev        = mdev;
@@@ -5335,16 -5516,26 +5341,33 @@@ err_free_cpumask
  	return -ENOMEM;
  }
  
 -void mlx5e_priv_cleanup(struct mlx5e_priv *priv)
 +void mlx5e_netdev_cleanup(struct net_device *netdev, struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	destroy_workqueue(priv->wq);
 +	free_cpumask_var(priv->scratchpad.cpumask);
++=======
+ 	int i;
+ 
+ 	/* bail if change profile failed and also rollback failed */
+ 	if (!priv->mdev)
+ 		return;
+ 
+ 	destroy_workqueue(priv->wq);
+ 	free_cpumask_var(priv->scratchpad.cpumask);
+ 
+ 	for (i = 0; i < priv->htb.max_qos_sqs; i++)
+ 		kfree(priv->htb.qos_sq_stats[i]);
+ 	kvfree(priv->htb.qos_sq_stats);
+ 
+ 	memset(priv, 0, sizeof(*priv));
++>>>>>>> 469549e4778a (net/mlx5e: Fix error flow in change profile)
  }
  
 -struct net_device *
 -mlx5e_create_netdev(struct mlx5_core_dev *mdev, unsigned int txqs, unsigned int rxqs)
 +struct net_device *mlx5e_create_netdev(struct mlx5_core_dev *mdev,
 +				       const struct mlx5e_profile *profile,
 +				       int nch,
 +				       void *ppriv)
  {
  	struct net_device *netdev;
  	int err;
@@@ -5444,13 -5647,79 +5467,84 @@@ void mlx5e_detach_netdev(struct mlx5e_p
  	cancel_work_sync(&priv->update_stats_work);
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ mlx5e_netdev_attach_profile(struct net_device *netdev, struct mlx5_core_dev *mdev,
+ 			    const struct mlx5e_profile *new_profile, void *new_ppriv)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(netdev);
+ 	int err;
+ 
+ 	err = mlx5e_priv_init(priv, netdev, mdev);
+ 	if (err) {
+ 		mlx5_core_err(mdev, "mlx5e_priv_init failed, err=%d\n", err);
+ 		return err;
+ 	}
+ 	netif_carrier_off(netdev);
+ 	priv->profile = new_profile;
+ 	priv->ppriv = new_ppriv;
+ 	err = new_profile->init(priv->mdev, priv->netdev);
+ 	if (err)
+ 		goto priv_cleanup;
+ 	err = mlx5e_attach_netdev(priv);
+ 	if (err)
+ 		goto profile_cleanup;
+ 	return err;
+ 
+ profile_cleanup:
+ 	new_profile->cleanup(priv);
+ priv_cleanup:
+ 	mlx5e_priv_cleanup(priv);
+ 	return err;
+ }
+ 
+ int mlx5e_netdev_change_profile(struct mlx5e_priv *priv,
+ 				const struct mlx5e_profile *new_profile, void *new_ppriv)
+ {
+ 	unsigned int new_max_nch = mlx5e_calc_max_nch(priv, new_profile);
+ 	const struct mlx5e_profile *orig_profile = priv->profile;
+ 	struct net_device *netdev = priv->netdev;
+ 	struct mlx5_core_dev *mdev = priv->mdev;
+ 	void *orig_ppriv = priv->ppriv;
+ 	int err, rollback_err;
+ 
+ 	/* sanity */
+ 	if (new_max_nch != priv->max_nch) {
+ 		netdev_warn(netdev, "%s: Replacing profile with different max channels\n",
+ 			    __func__);
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* cleanup old profile */
+ 	mlx5e_detach_netdev(priv);
+ 	priv->profile->cleanup(priv);
+ 	mlx5e_priv_cleanup(priv);
+ 
+ 	err = mlx5e_netdev_attach_profile(netdev, mdev, new_profile, new_ppriv);
+ 	if (err) { /* roll back to original profile */
+ 		netdev_warn(netdev, "%s: new profile init failed, %d\n", __func__, err);
+ 		goto rollback;
+ 	}
+ 
+ 	return 0;
+ 
+ rollback:
+ 	rollback_err = mlx5e_netdev_attach_profile(netdev, mdev, orig_profile, orig_ppriv);
+ 	if (rollback_err)
+ 		netdev_err(netdev, "%s: failed to rollback to orig profile, %d\n",
+ 			   __func__, rollback_err);
+ 	return err;
+ }
+ 
++>>>>>>> 469549e4778a (net/mlx5e: Fix error flow in change profile)
  void mlx5e_destroy_netdev(struct mlx5e_priv *priv)
  {
 +	const struct mlx5e_profile *profile = priv->profile;
  	struct net_device *netdev = priv->netdev;
  
 -	mlx5e_priv_cleanup(priv);
 +	if (profile->cleanup)
 +		profile->cleanup(priv);
  	free_netdev(netdev);
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index 97b5fcb1f406..7b48ac09779c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@ -702,6 +702,7 @@ static int mlx5i_check_required_hca_cap(struct mlx5_core_dev *mdev)
 static void mlx5_rdma_netdev_free(struct net_device *netdev)
 {
 	struct mlx5e_priv *priv = mlx5i_epriv(netdev);
+	struct mlx5_core_dev *mdev = priv->mdev;
 	struct mlx5i_priv *ipriv = priv->ppriv;
 	const struct mlx5e_profile *profile = priv->profile;
 
@@ -710,7 +711,7 @@ static void mlx5_rdma_netdev_free(struct net_device *netdev)
 
 	if (!ipriv->sub_interface) {
 		mlx5i_pkey_qpn_ht_cleanup(netdev);
-		mlx5e_destroy_mdev_resources(priv->mdev);
+		mlx5e_destroy_mdev_resources(mdev);
 	}
 }
 
