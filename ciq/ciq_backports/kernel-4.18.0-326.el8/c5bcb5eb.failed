bpf: Move BPF_STX reserved field check into BPF_STX verifier code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Brendan Jackman <jackmanb@google.com>
commit c5bcb5eb4db632280b4123135d583a7bc8caea3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/c5bcb5eb.failed

I can't find a reason why this code is in resolve_pseudo_ldimm64;
since I'll be modifying it in a subsequent commit, tidy it up.

	Signed-off-by: Brendan Jackman <jackmanb@google.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20210114181751.768687-6-jackmanb@google.com
(cherry picked from commit c5bcb5eb4db632280b4123135d583a7bc8caea3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 628ac51f9efd,d8a85f4e5b95..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -9503,8 -9528,14 +9503,19 @@@ static int do_check(struct bpf_verifier
  		} else if (class == BPF_STX) {
  			enum bpf_reg_type *prev_dst_type, dst_reg_type;
  
++<<<<<<< HEAD
 +			if (BPF_MODE(insn->code) == BPF_XADD) {
 +				err = check_xadd(env, env->insn_idx, insn);
++=======
+ 			if (((BPF_MODE(insn->code) != BPF_MEM &&
+ 			      BPF_MODE(insn->code) != BPF_ATOMIC) || insn->imm != 0)) {
+ 				verbose(env, "BPF_STX uses reserved fields\n");
+ 				return -EINVAL;
+ 			}
+ 
+ 			if (BPF_MODE(insn->code) == BPF_ATOMIC) {
+ 				err = check_atomic(env, env->insn_idx, insn);
++>>>>>>> c5bcb5eb4db6 (bpf: Move BPF_STX reserved field check into BPF_STX verifier code)
  				if (err)
  					return err;
  				env->insn_idx++;
@@@ -9913,13 -10018,6 +9924,16 @@@ static int resolve_pseudo_ldimm64(struc
  			return -EINVAL;
  		}
  
++<<<<<<< HEAD
 +		if (BPF_CLASS(insn->code) == BPF_STX &&
 +		    ((BPF_MODE(insn->code) != BPF_MEM &&
 +		      BPF_MODE(insn->code) != BPF_XADD) || insn->imm != 0)) {
 +			verbose(env, "BPF_STX uses reserved fields\n");
 +			return -EINVAL;
 +		}
 +
++=======
++>>>>>>> c5bcb5eb4db6 (bpf: Move BPF_STX reserved field check into BPF_STX verifier code)
  		if (insn[0].code == (BPF_LD | BPF_IMM | BPF_DW)) {
  			struct bpf_insn_aux_data *aux;
  			struct bpf_map *map;
* Unmerged path kernel/bpf/verifier.c
