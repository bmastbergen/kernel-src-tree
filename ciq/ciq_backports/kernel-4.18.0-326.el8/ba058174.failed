net, xdp, xsk: fix __sk_mark_napi_id_once napi_id error

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit ba0581749fec389e55c9d761f2716f8fcbefced5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/ba058174.failed

Stephen reported the following build error for !CONFIG_NET_RX_BUSY_POLL
built kernels:

  In file included from fs/select.c:32:
  include/net/busy_poll.h: In function 'sk_mark_napi_id_once':
  include/net/busy_poll.h:150:36: error: 'const struct sk_buff' has no member named 'napi_id'
    150 |  __sk_mark_napi_id_once_xdp(sk, skb->napi_id);
        |                                    ^~

Fix it by wrapping a CONFIG_NET_RX_BUSY_POLL around the helpers.

Fixes: b02e5a0ebb17 ("xsk: Propagate napi_id to XDP socket Rx path")
	Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Björn Töpel <bjorn.topel@intel.com>
Link: https://lore.kernel.org/linux-next/20201201190746.7d3357fb@canb.auug.org.au
(cherry picked from commit ba0581749fec389e55c9d761f2716f8fcbefced5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/busy_poll.h
diff --cc include/net/busy_poll.h
index 60f8490ed317,73af4a64a599..000000000000
--- a/include/net/busy_poll.h
+++ b/include/net/busy_poll.h
@@@ -154,13 -135,28 +154,36 @@@ static inline void sk_mark_napi_id(stru
  	sk_rx_queue_set(sk, skb);
  }
  
++<<<<<<< HEAD
++=======
+ static inline void __sk_mark_napi_id_once(struct sock *sk, unsigned int napi_id)
+ {
+ #ifdef CONFIG_NET_RX_BUSY_POLL
+ 	if (!READ_ONCE(sk->sk_napi_id))
+ 		WRITE_ONCE(sk->sk_napi_id, napi_id);
+ #endif
+ }
+ 
++>>>>>>> ba0581749fec (net, xdp, xsk: fix __sk_mark_napi_id_once napi_id error)
  /* variant used for unconnected sockets */
  static inline void sk_mark_napi_id_once(struct sock *sk,
  					const struct sk_buff *skb)
  {
  #ifdef CONFIG_NET_RX_BUSY_POLL
++<<<<<<< HEAD
 +	if (!READ_ONCE(sk->sk_napi_id))
 +		WRITE_ONCE(sk->sk_napi_id, skb->napi_id);
++=======
+ 	__sk_mark_napi_id_once(sk, skb->napi_id);
+ #endif
+ }
+ 
+ static inline void sk_mark_napi_id_once_xdp(struct sock *sk,
+ 					    const struct xdp_buff *xdp)
+ {
+ #ifdef CONFIG_NET_RX_BUSY_POLL
+ 	__sk_mark_napi_id_once(sk, xdp->rxq->napi_id);
++>>>>>>> ba0581749fec (net, xdp, xsk: fix __sk_mark_napi_id_once napi_id error)
  #endif
  }
  
* Unmerged path include/net/busy_poll.h
