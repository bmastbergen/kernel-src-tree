tools: Avoid comma separated statements

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Joe Perches <joe@perches.com>
commit aa803771a80aa2aa2d5cdd38434b369066fbb8fc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/aa803771.failed

Use semicolons and braces.

	Signed-off-by: Joe Perches <joe@perches.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit aa803771a80aa2aa2d5cdd38434b369066fbb8fc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/vm/userfaultfd.c
diff --cc tools/testing/selftests/vm/userfaultfd.c
index 7b8171e3128a,9b0912a01777..000000000000
--- a/tools/testing/selftests/vm/userfaultfd.c
+++ b/tools/testing/selftests/vm/userfaultfd.c
@@@ -271,6 -329,22 +273,25 @@@ static int my_bcmp(char *str1, char *st
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void wp_range(int ufd, __u64 start, __u64 len, bool wp)
+ {
+ 	struct uffdio_writeprotect prms = { 0 };
+ 
+ 	/* Write protection page faults */
+ 	prms.range.start = start;
+ 	prms.range.len = len;
+ 	/* Undo write-protect, do wakeup after that */
+ 	prms.mode = wp ? UFFDIO_WRITEPROTECT_MODE_WP : 0;
+ 
+ 	if (ioctl(ufd, UFFDIO_WRITEPROTECT, &prms)) {
+ 		fprintf(stderr, "clear WP failed for address 0x%Lx\n", start);
+ 		exit(1);
+ 	}
+ }
+ 
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  static void *locking_thread(void *arg)
  {
  	unsigned long cpu = (unsigned long) arg;
@@@ -439,9 -530,57 +474,59 @@@ static int copy_page(int ufd, unsigned 
  	return __copy_page(ufd, offset, false);
  }
  
++<<<<<<< HEAD
++=======
+ static int uffd_read_msg(int ufd, struct uffd_msg *msg)
+ {
+ 	int ret = read(uffd, msg, sizeof(*msg));
+ 
+ 	if (ret != sizeof(*msg)) {
+ 		if (ret < 0) {
+ 			if (errno == EAGAIN)
+ 				return 1;
+ 			perror("blocking read error");
+ 		} else {
+ 			fprintf(stderr, "short read\n");
+ 		}
+ 		exit(1);
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void uffd_handle_page_fault(struct uffd_msg *msg,
+ 				   struct uffd_stats *stats)
+ {
+ 	unsigned long offset;
+ 
+ 	if (msg->event != UFFD_EVENT_PAGEFAULT) {
+ 		fprintf(stderr, "unexpected msg event %u\n", msg->event);
+ 		exit(1);
+ 	}
+ 
+ 	if (msg->arg.pagefault.flags & UFFD_PAGEFAULT_FLAG_WP) {
+ 		wp_range(uffd, msg->arg.pagefault.address, page_size, false);
+ 		stats->wp_faults++;
+ 	} else {
+ 		/* Missing page faults */
+ 		if (bounces & BOUNCE_VERIFY &&
+ 		    msg->arg.pagefault.flags & UFFD_PAGEFAULT_FLAG_WRITE) {
+ 			fprintf(stderr, "unexpected write fault\n");
+ 			exit(1);
+ 		}
+ 
+ 		offset = (char *)(unsigned long)msg->arg.pagefault.address - area_dst;
+ 		offset &= ~(page_size-1);
+ 
+ 		if (copy_page(uffd, offset))
+ 			stats->missing_faults++;
+ 	}
+ }
+ 
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  static void *uffd_poll_thread(void *arg)
  {
 -	struct uffd_stats *stats = (struct uffd_stats *)arg;
 -	unsigned long cpu = stats->cpu;
 +	unsigned long cpu = (unsigned long) arg;
  	struct pollfd pollfd[2];
  	struct uffd_msg msg;
  	struct uffdio_register uffd_reg;
@@@ -457,38 -594,35 +542,51 @@@
  
  	for (;;) {
  		ret = poll(pollfd, 2, -1);
- 		if (!ret)
- 			fprintf(stderr, "poll error %d\n", ret), exit(1);
- 		if (ret < 0)
- 			perror("poll"), exit(1);
+ 		if (!ret) {
+ 			fprintf(stderr, "poll error %d\n", ret);
+ 			exit(1);
+ 		}
+ 		if (ret < 0) {
+ 			perror("poll");
+ 			exit(1);
+ 		}
  		if (pollfd[1].revents & POLLIN) {
- 			if (read(pollfd[1].fd, &tmp_chr, 1) != 1)
- 				fprintf(stderr, "read pipefd error\n"),
- 					exit(1);
+ 			if (read(pollfd[1].fd, &tmp_chr, 1) != 1) {
+ 				fprintf(stderr, "read pipefd error\n");
+ 				exit(1);
+ 			}
  			break;
  		}
- 		if (!(pollfd[0].revents & POLLIN))
+ 		if (!(pollfd[0].revents & POLLIN)) {
  			fprintf(stderr, "pollfd[0].revents %d\n",
++<<<<<<< HEAD
 +				pollfd[0].revents), exit(1);
 +		ret = read(uffd, &msg, sizeof(msg));
 +		if (ret < 0) {
 +			if (errno == EAGAIN)
 +				continue;
 +			perror("nonblocking read error"), exit(1);
 +		}
++=======
+ 				pollfd[0].revents);
+ 			exit(1);
+ 		}
+ 		if (uffd_read_msg(uffd, &msg))
+ 			continue;
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  		switch (msg.event) {
  		default:
  			fprintf(stderr, "unexpected msg event %u\n",
- 				msg.event), exit(1);
+ 				msg.event); exit(1);
  			break;
  		case UFFD_EVENT_PAGEFAULT:
 -			uffd_handle_page_fault(&msg, stats);
 +			if (msg.arg.pagefault.flags & UFFD_PAGEFAULT_FLAG_WRITE)
 +				fprintf(stderr, "unexpected write fault\n"), exit(1);
 +			offset = (char *)(unsigned long)msg.arg.pagefault.address -
 +				area_dst;
 +			offset &= ~(page_size-1);
 +			if (copy_page(uffd, offset))
 +				userfaults++;
  			break;
  		case UFFD_EVENT_FORK:
  			close(uffd);
@@@ -759,8 -919,13 +861,8 @@@ static int faulting_process(int signal_
  			fprintf(stderr,
  				"nr %lu memory corruption %Lu %Lu\n",
  				nr, count,
- 				count_verify[nr]), exit(1);
+ 				count_verify[nr]); exit(1);
  		}
 -		/*
 -		 * Trigger write protection if there is by writting
 -		 * the same value back.
 -		 */
 -		*area_count(area_dst, nr) = count;
  	}
  
  	if (uffd_test_ops->release_pages(area_dst))
@@@ -864,8 -1038,12 +975,17 @@@ static int userfaultfd_zeropage_test(vo
  	uffdio_register.range.start = (unsigned long) area_dst;
  	uffdio_register.range.len = nr_pages * page_size;
  	uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
++<<<<<<< HEAD
 +	if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register))
 +		fprintf(stderr, "register failure\n"), exit(1);
++=======
+ 	if (test_uffdio_wp)
+ 		uffdio_register.mode |= UFFDIO_REGISTER_MODE_WP;
+ 	if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register)) {
+ 		fprintf(stderr, "register failure\n");
+ 		exit(1);
+ 	}
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  
  	expected_ioctls = uffd_test_ops->expected_ioctls;
  	if ((uffdio_register.ioctls & expected_ioctls) !=
@@@ -909,33 -1090,44 +1032,60 @@@ static int userfaultfd_events_test(void
  	uffdio_register.range.start = (unsigned long) area_dst;
  	uffdio_register.range.len = nr_pages * page_size;
  	uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
++<<<<<<< HEAD
 +	if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register))
 +		fprintf(stderr, "register failure\n"), exit(1);
++=======
+ 	if (test_uffdio_wp)
+ 		uffdio_register.mode |= UFFDIO_REGISTER_MODE_WP;
+ 	if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register)) {
+ 		fprintf(stderr, "register failure\n");
+ 		exit(1);
+ 	}
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  
  	expected_ioctls = uffd_test_ops->expected_ioctls;
- 	if ((uffdio_register.ioctls & expected_ioctls) !=
- 	    expected_ioctls)
- 		fprintf(stderr,
- 			"unexpected missing ioctl for anon memory\n"),
- 			exit(1);
+ 	if ((uffdio_register.ioctls & expected_ioctls) != expected_ioctls) {
+ 		fprintf(stderr, "unexpected missing ioctl for anon memory\n");
+ 		exit(1);
+ 	}
  
++<<<<<<< HEAD
 +	if (pthread_create(&uffd_mon, &attr, uffd_poll_thread, NULL))
 +		perror("uffd_poll_thread create"), exit(1);
++=======
+ 	if (pthread_create(&uffd_mon, &attr, uffd_poll_thread, &stats)) {
+ 		perror("uffd_poll_thread create");
+ 		exit(1);
+ 	}
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  
  	pid = fork();
- 	if (pid < 0)
- 		perror("fork"), exit(1);
+ 	if (pid < 0) {
+ 		perror("fork");
+ 		exit(1);
+ 	}
  
  	if (!pid)
  		return faulting_process(0);
  
  	waitpid(pid, &err, 0);
- 	if (err)
- 		fprintf(stderr, "faulting process failed\n"), exit(1);
+ 	if (err) {
+ 		fprintf(stderr, "faulting process failed\n");
+ 		exit(1);
+ 	}
  
++<<<<<<< HEAD
 +	if (write(pipefd[1], &c, sizeof(c)) != sizeof(c))
 +		perror("pipe write"), exit(1);
 +	if (pthread_join(uffd_mon, (void **)&userfaults))
++=======
+ 	if (write(pipefd[1], &c, sizeof(c)) != sizeof(c)) {
+ 		perror("pipe write");
+ 		exit(1);
+ 	}
+ 	if (pthread_join(uffd_mon, NULL))
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  		return 1;
  
  	close(uffd);
@@@ -968,28 -1162,37 +1118,47 @@@ static int userfaultfd_sig_test(void
  	uffdio_register.range.start = (unsigned long) area_dst;
  	uffdio_register.range.len = nr_pages * page_size;
  	uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
++<<<<<<< HEAD
 +	if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register))
 +		fprintf(stderr, "register failure\n"), exit(1);
++=======
+ 	if (test_uffdio_wp)
+ 		uffdio_register.mode |= UFFDIO_REGISTER_MODE_WP;
+ 	if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register)) {
+ 		fprintf(stderr, "register failure\n");
+ 		exit(1);
+ 	}
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  
  	expected_ioctls = uffd_test_ops->expected_ioctls;
- 	if ((uffdio_register.ioctls & expected_ioctls) !=
- 	    expected_ioctls)
- 		fprintf(stderr,
- 			"unexpected missing ioctl for anon memory\n"),
- 			exit(1);
+ 	if ((uffdio_register.ioctls & expected_ioctls) != expected_ioctls) {
+ 		fprintf(stderr, "unexpected missing ioctl for anon memory\n");
+ 		exit(1);
+ 	}
  
- 	if (faulting_process(1))
- 		fprintf(stderr, "faulting process failed\n"), exit(1);
+ 	if (faulting_process(1)) {
+ 		fprintf(stderr, "faulting process failed\n");
+ 		exit(1);
+ 	}
  
  	if (uffd_test_ops->release_pages(area_dst))
  		return 1;
  
++<<<<<<< HEAD
 +	if (pthread_create(&uffd_mon, &attr, uffd_poll_thread, NULL))
 +		perror("uffd_poll_thread create"), exit(1);
++=======
+ 	if (pthread_create(&uffd_mon, &attr, uffd_poll_thread, &stats)) {
+ 		perror("uffd_poll_thread create");
+ 		exit(1);
+ 	}
++>>>>>>> aa803771a80a (tools: Avoid comma separated statements)
  
  	pid = fork();
- 	if (pid < 0)
- 		perror("fork"), exit(1);
+ 	if (pid < 0) {
+ 		perror("fork");
+ 		exit(1);
+ 	}
  
  	if (!pid)
  		exit(faulting_process(2));
@@@ -1272,11 -1491,12 +1448,13 @@@ static void sigalrm(int sig
  int main(int argc, char **argv)
  {
  	if (argc < 4)
 -		usage();
 +		fprintf(stderr, "Usage: <test type> <MiB> <bounces> [hugetlbfs_file]\n"),
 +				exit(1);
  
- 	if (signal(SIGALRM, sigalrm) == SIG_ERR)
- 		fprintf(stderr, "failed to arm SIGALRM"), exit(1);
+ 	if (signal(SIGALRM, sigalrm) == SIG_ERR) {
+ 		fprintf(stderr, "failed to arm SIGALRM");
+ 		exit(1);
+ 	}
  	alarm(ALARM_INTERVAL_SECS);
  
  	set_test_type(argv[1]);
diff --git a/tools/lib/subcmd/help.c b/tools/lib/subcmd/help.c
index 2859f107abc8..bf02d62a3b2b 100644
--- a/tools/lib/subcmd/help.c
+++ b/tools/lib/subcmd/help.c
@@ -65,12 +65,14 @@ void exclude_cmds(struct cmdnames *cmds, struct cmdnames *excludes)
 	ci = cj = ei = 0;
 	while (ci < cmds->cnt && ei < excludes->cnt) {
 		cmp = strcmp(cmds->names[ci]->name, excludes->names[ei]->name);
-		if (cmp < 0)
+		if (cmp < 0) {
 			cmds->names[cj++] = cmds->names[ci++];
-		else if (cmp == 0)
-			ci++, ei++;
-		else if (cmp > 0)
+		} else if (cmp == 0) {
+			ci++;
 			ei++;
+		} else if (cmp > 0) {
+			ei++;
+		}
 	}
 
 	while (ci < cmds->cnt)
diff --git a/tools/power/cpupower/utils/cpufreq-set.c b/tools/power/cpupower/utils/cpufreq-set.c
index f25cdfa05c5f..c5e60a39cfa6 100644
--- a/tools/power/cpupower/utils/cpufreq-set.c
+++ b/tools/power/cpupower/utils/cpufreq-set.c
@@ -99,13 +99,17 @@ static unsigned long string_to_frequency(const char *str)
 		continue;
 
 	if (str[cp] == '.') {
-		while (power > -1 && isdigit(str[cp+1]))
-			cp++, power--;
+		while (power > -1 && isdigit(str[cp+1])) {
+			cp++;
+			power--;
+		}
 	}
-	if (power >= -1)	/* not enough => pad */
+	if (power >= -1) {		/* not enough => pad */
 		pad = power + 1;
-	else			/* to much => strip */
-		pad = 0, cp += power + 1;
+	} else {			/* too much => strip */
+		pad = 0;
+		cp += power + 1;
+	}
 	/* check bounds */
 	if (cp <= 0 || cp + pad > NORM_FREQ_LEN - 1)
 		return 0;
diff --git a/tools/testing/selftests/vm/gup_benchmark.c b/tools/testing/selftests/vm/gup_benchmark.c
index 43b4dfe161a2..d69f0eb0d8c0 100644
--- a/tools/testing/selftests/vm/gup_benchmark.c
+++ b/tools/testing/selftests/vm/gup_benchmark.c
@@ -105,12 +105,16 @@ int main(int argc, char **argv)
 		gup.flags |= FOLL_WRITE;
 
 	fd = open("/sys/kernel/debug/gup_benchmark", O_RDWR);
-	if (fd == -1)
-		perror("open"), exit(1);
+	if (fd == -1) {
+		perror("open");
+		exit(1);
+	}
 
 	p = mmap(NULL, size, PROT_READ | PROT_WRITE, flags, filed, 0);
-	if (p == MAP_FAILED)
-		perror("mmap"), exit(1);
+	if (p == MAP_FAILED) {
+		perror("mmap");
+		exit(1);
+	}
 	gup.addr = (unsigned long)p;
 
 	if (thp == 1)
@@ -123,8 +127,10 @@ int main(int argc, char **argv)
 
 	for (i = 0; i < repeats; i++) {
 		gup.size = size;
-		if (ioctl(fd, cmd, &gup))
-			perror("ioctl"), exit(1);
+		if (ioctl(fd, cmd, &gup)) {
+			perror("ioctl");
+			exit(1);
+		}
 
 		printf("Time: get:%lld put:%lld us", gup.get_delta_usec,
 			gup.put_delta_usec);
* Unmerged path tools/testing/selftests/vm/userfaultfd.c
