bpf: Add a bpf_sock_from_file helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Florent Revest <revest@chromium.org>
commit 4f19cab76136e800a3f04d8c9aa4d8e770e3d3d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/4f19cab7.failed

While eBPF programs can check whether a file is a socket by file->f_op
== &socket_file_ops, they cannot convert the void private_data pointer
to a struct socket BTF pointer. In order to do this a new helper
wrapping sock_from_file is added.

This is useful to tracing programs but also other program types
inheriting this set of helpers such as iterators or LSM programs.

	Signed-off-by: Florent Revest <revest@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: KP Singh <kpsingh@google.com>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20201204113609.1850150-2-revest@google.com
(cherry picked from commit 4f19cab76136e800a3f04d8c9aa4d8e770e3d3d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/bpf.h
#	scripts/bpf_helpers_doc.py
#	tools/include/uapi/linux/bpf.h
diff --cc include/uapi/linux/bpf.h
index 0db238cbb096,30b477a26482..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -3762,6 -3748,88 +3762,91 @@@ union bpf_attr 
   * 	Return
   * 		The helper returns **TC_ACT_REDIRECT** on success or
   * 		**TC_ACT_SHOT** on error.
++<<<<<<< HEAD
++=======
+  *
+  * void *bpf_task_storage_get(struct bpf_map *map, struct task_struct *task, void *value, u64 flags)
+  *	Description
+  *		Get a bpf_local_storage from the *task*.
+  *
+  *		Logically, it could be thought of as getting the value from
+  *		a *map* with *task* as the **key**.  From this
+  *		perspective,  the usage is not much different from
+  *		**bpf_map_lookup_elem**\ (*map*, **&**\ *task*) except this
+  *		helper enforces the key must be an task_struct and the map must also
+  *		be a **BPF_MAP_TYPE_TASK_STORAGE**.
+  *
+  *		Underneath, the value is stored locally at *task* instead of
+  *		the *map*.  The *map* is used as the bpf-local-storage
+  *		"type". The bpf-local-storage "type" (i.e. the *map*) is
+  *		searched against all bpf_local_storage residing at *task*.
+  *
+  *		An optional *flags* (**BPF_LOCAL_STORAGE_GET_F_CREATE**) can be
+  *		used such that a new bpf_local_storage will be
+  *		created if one does not exist.  *value* can be used
+  *		together with **BPF_LOCAL_STORAGE_GET_F_CREATE** to specify
+  *		the initial value of a bpf_local_storage.  If *value* is
+  *		**NULL**, the new bpf_local_storage will be zero initialized.
+  *	Return
+  *		A bpf_local_storage pointer is returned on success.
+  *
+  *		**NULL** if not found or there was an error in adding
+  *		a new bpf_local_storage.
+  *
+  * long bpf_task_storage_delete(struct bpf_map *map, struct task_struct *task)
+  *	Description
+  *		Delete a bpf_local_storage from a *task*.
+  *	Return
+  *		0 on success.
+  *
+  *		**-ENOENT** if the bpf_local_storage cannot be found.
+  *
+  * struct task_struct *bpf_get_current_task_btf(void)
+  *	Description
+  *		Return a BTF pointer to the "current" task.
+  *		This pointer can also be used in helpers that accept an
+  *		*ARG_PTR_TO_BTF_ID* of type *task_struct*.
+  *	Return
+  *		Pointer to the current task.
+  *
+  * long bpf_bprm_opts_set(struct linux_binprm *bprm, u64 flags)
+  *	Description
+  *		Set or clear certain options on *bprm*:
+  *
+  *		**BPF_F_BPRM_SECUREEXEC** Set the secureexec bit
+  *		which sets the **AT_SECURE** auxv for glibc. The bit
+  *		is cleared if the flag is not specified.
+  *	Return
+  *		**-EINVAL** if invalid *flags* are passed, zero otherwise.
+  *
+  * u64 bpf_ktime_get_coarse_ns(void)
+  * 	Description
+  * 		Return a coarse-grained version of the time elapsed since
+  * 		system boot, in nanoseconds. Does not include time the system
+  * 		was suspended.
+  *
+  * 		See: **clock_gettime**\ (**CLOCK_MONOTONIC_COARSE**)
+  * 	Return
+  * 		Current *ktime*.
+  *
+  * long bpf_ima_inode_hash(struct inode *inode, void *dst, u32 size)
+  *	Description
+  *		Returns the stored IMA hash of the *inode* (if it's avaialable).
+  *		If the hash is larger than *size*, then only *size*
+  *		bytes will be copied to *dst*
+  *	Return
+  *		The **hash_algo** is returned on success,
+  *		**-EOPNOTSUP** if IMA is disabled or **-EINVAL** if
+  *		invalid arguments are passed.
+  *
+  * struct socket *bpf_sock_from_file(struct file *file)
+  *	Description
+  *		If the given file represents a socket, returns the associated
+  *		socket.
+  *	Return
+  *		A pointer to a struct socket on success or NULL if the file is
+  *		not a socket.
++>>>>>>> 4f19cab76136 (bpf: Add a bpf_sock_from_file helper)
   */
  #define __BPF_FUNC_MAPPER(FN)		\
  	FN(unspec),			\
@@@ -3917,9 -3985,16 +4002,19 @@@
  	FN(seq_printf_btf),		\
  	FN(skb_cgroup_classid),		\
  	FN(redirect_neigh),		\
 -	FN(bpf_per_cpu_ptr),            \
 -	FN(bpf_this_cpu_ptr),		\
 +	FN(per_cpu_ptr),		\
 +	FN(this_cpu_ptr),		\
  	FN(redirect_peer),		\
++<<<<<<< HEAD
++=======
+ 	FN(task_storage_get),		\
+ 	FN(task_storage_delete),	\
+ 	FN(get_current_task_btf),	\
+ 	FN(bprm_opts_set),		\
+ 	FN(ktime_get_coarse_ns),	\
+ 	FN(ima_inode_hash),		\
+ 	FN(sock_from_file),		\
++>>>>>>> 4f19cab76136 (bpf: Add a bpf_sock_from_file helper)
  	/* */
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
diff --cc scripts/bpf_helpers_doc.py
index 31484377b8b1,867ada23281c..000000000000
--- a/scripts/bpf_helpers_doc.py
+++ b/scripts/bpf_helpers_doc.py
@@@ -435,6 -436,9 +435,12 @@@ class PrinterHelpers(Printer)
              'struct xdp_md',
              'struct path',
              'struct btf_ptr',
++<<<<<<< HEAD
++=======
+             'struct inode',
+             'struct socket',
+             'struct file',
++>>>>>>> 4f19cab76136 (bpf: Add a bpf_sock_from_file helper)
      ]
      known_types = {
              '...',
@@@ -478,6 -483,9 +484,12 @@@
              'struct task_struct',
              'struct path',
              'struct btf_ptr',
++<<<<<<< HEAD
++=======
+             'struct inode',
+             'struct socket',
+             'struct file',
++>>>>>>> 4f19cab76136 (bpf: Add a bpf_sock_from_file helper)
      }
      mapped_types = {
              'u8': '__u8',
diff --cc tools/include/uapi/linux/bpf.h
index b1d65d8c4595,30b477a26482..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -3742,6 -3748,88 +3742,91 @@@ union bpf_attr 
   * 	Return
   * 		The helper returns **TC_ACT_REDIRECT** on success or
   * 		**TC_ACT_SHOT** on error.
++<<<<<<< HEAD
++=======
+  *
+  * void *bpf_task_storage_get(struct bpf_map *map, struct task_struct *task, void *value, u64 flags)
+  *	Description
+  *		Get a bpf_local_storage from the *task*.
+  *
+  *		Logically, it could be thought of as getting the value from
+  *		a *map* with *task* as the **key**.  From this
+  *		perspective,  the usage is not much different from
+  *		**bpf_map_lookup_elem**\ (*map*, **&**\ *task*) except this
+  *		helper enforces the key must be an task_struct and the map must also
+  *		be a **BPF_MAP_TYPE_TASK_STORAGE**.
+  *
+  *		Underneath, the value is stored locally at *task* instead of
+  *		the *map*.  The *map* is used as the bpf-local-storage
+  *		"type". The bpf-local-storage "type" (i.e. the *map*) is
+  *		searched against all bpf_local_storage residing at *task*.
+  *
+  *		An optional *flags* (**BPF_LOCAL_STORAGE_GET_F_CREATE**) can be
+  *		used such that a new bpf_local_storage will be
+  *		created if one does not exist.  *value* can be used
+  *		together with **BPF_LOCAL_STORAGE_GET_F_CREATE** to specify
+  *		the initial value of a bpf_local_storage.  If *value* is
+  *		**NULL**, the new bpf_local_storage will be zero initialized.
+  *	Return
+  *		A bpf_local_storage pointer is returned on success.
+  *
+  *		**NULL** if not found or there was an error in adding
+  *		a new bpf_local_storage.
+  *
+  * long bpf_task_storage_delete(struct bpf_map *map, struct task_struct *task)
+  *	Description
+  *		Delete a bpf_local_storage from a *task*.
+  *	Return
+  *		0 on success.
+  *
+  *		**-ENOENT** if the bpf_local_storage cannot be found.
+  *
+  * struct task_struct *bpf_get_current_task_btf(void)
+  *	Description
+  *		Return a BTF pointer to the "current" task.
+  *		This pointer can also be used in helpers that accept an
+  *		*ARG_PTR_TO_BTF_ID* of type *task_struct*.
+  *	Return
+  *		Pointer to the current task.
+  *
+  * long bpf_bprm_opts_set(struct linux_binprm *bprm, u64 flags)
+  *	Description
+  *		Set or clear certain options on *bprm*:
+  *
+  *		**BPF_F_BPRM_SECUREEXEC** Set the secureexec bit
+  *		which sets the **AT_SECURE** auxv for glibc. The bit
+  *		is cleared if the flag is not specified.
+  *	Return
+  *		**-EINVAL** if invalid *flags* are passed, zero otherwise.
+  *
+  * u64 bpf_ktime_get_coarse_ns(void)
+  * 	Description
+  * 		Return a coarse-grained version of the time elapsed since
+  * 		system boot, in nanoseconds. Does not include time the system
+  * 		was suspended.
+  *
+  * 		See: **clock_gettime**\ (**CLOCK_MONOTONIC_COARSE**)
+  * 	Return
+  * 		Current *ktime*.
+  *
+  * long bpf_ima_inode_hash(struct inode *inode, void *dst, u32 size)
+  *	Description
+  *		Returns the stored IMA hash of the *inode* (if it's avaialable).
+  *		If the hash is larger than *size*, then only *size*
+  *		bytes will be copied to *dst*
+  *	Return
+  *		The **hash_algo** is returned on success,
+  *		**-EOPNOTSUP** if IMA is disabled or **-EINVAL** if
+  *		invalid arguments are passed.
+  *
+  * struct socket *bpf_sock_from_file(struct file *file)
+  *	Description
+  *		If the given file represents a socket, returns the associated
+  *		socket.
+  *	Return
+  *		A pointer to a struct socket on success or NULL if the file is
+  *		not a socket.
++>>>>>>> 4f19cab76136 (bpf: Add a bpf_sock_from_file helper)
   */
  #define __BPF_FUNC_MAPPER(FN)		\
  	FN(unspec),			\
@@@ -3897,9 -3985,16 +3982,19 @@@
  	FN(seq_printf_btf),		\
  	FN(skb_cgroup_classid),		\
  	FN(redirect_neigh),		\
 -	FN(bpf_per_cpu_ptr),            \
 -	FN(bpf_this_cpu_ptr),		\
 +	FN(per_cpu_ptr),		\
 +	FN(this_cpu_ptr),		\
  	FN(redirect_peer),		\
++<<<<<<< HEAD
++=======
+ 	FN(task_storage_get),		\
+ 	FN(task_storage_delete),	\
+ 	FN(get_current_task_btf),	\
+ 	FN(bprm_opts_set),		\
+ 	FN(ktime_get_coarse_ns),	\
+ 	FN(ima_inode_hash),		\
+ 	FN(sock_from_file),		\
++>>>>>>> 4f19cab76136 (bpf: Add a bpf_sock_from_file helper)
  	/* */
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
* Unmerged path include/uapi/linux/bpf.h
diff --git a/kernel/trace/bpf_trace.c b/kernel/trace/bpf_trace.c
index 8ad70e94614e..311c96b4fd5d 100644
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@ -1237,6 +1237,24 @@ const struct bpf_func_proto bpf_snprintf_btf_proto = {
 	.arg5_type	= ARG_ANYTHING,
 };
 
+BPF_CALL_1(bpf_sock_from_file, struct file *, file)
+{
+	return (unsigned long) sock_from_file(file);
+}
+
+BTF_ID_LIST(bpf_sock_from_file_btf_ids)
+BTF_ID(struct, socket)
+BTF_ID(struct, file)
+
+static const struct bpf_func_proto bpf_sock_from_file_proto = {
+	.func		= bpf_sock_from_file,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_BTF_ID_OR_NULL,
+	.ret_btf_id	= &bpf_sock_from_file_btf_ids[0],
+	.arg1_type	= ARG_PTR_TO_BTF_ID,
+	.arg1_btf_id	= &bpf_sock_from_file_btf_ids[1],
+};
+
 const struct bpf_func_proto *
 bpf_tracing_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 {
@@ -1329,6 +1347,8 @@ bpf_tracing_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 		return &bpf_per_cpu_ptr_proto;
 	case BPF_FUNC_this_cpu_ptr:
 		return &bpf_this_cpu_ptr_proto;
+	case BPF_FUNC_sock_from_file:
+		return &bpf_sock_from_file_proto;
 	default:
 		return NULL;
 	}
* Unmerged path scripts/bpf_helpers_doc.py
* Unmerged path tools/include/uapi/linux/bpf.h
