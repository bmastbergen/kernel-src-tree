iommu/arm-smmu: add NVIDIA implementation for ARM MMU-500 usage

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Krishna Reddy <vdumpa@nvidia.com>
commit aab5a1c882760a5bc990b14e5c0c2ee4dab5f1ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/aab5a1c8.failed

NVIDIA's Tegra194 SoC has three ARM MMU-500 instances.
It uses two of the ARM MMU-500s together to interleave IOVA
accesses across them and must be programmed identically.
This implementation supports programming the two ARM MMU-500s
that must be programmed identically.

The third ARM MMU-500 instance is supported by standard
arm-smmu.c driver itself.

	Signed-off-by: Krishna Reddy <vdumpa@nvidia.com>
	Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
	Reviewed-by: Nicolin Chen <nicoleotsuka@gmail.com>
	Reviewed-by: Pritesh Raithatha <praithatha@nvidia.com>
	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
	Reviewed-by: Thierry Reding <thierry.reding@gmail.com>
Link: https://lore.kernel.org/r/20200718193457.30046-4-vdumpa@nvidia.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit aab5a1c882760a5bc990b14e5c0c2ee4dab5f1ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/Makefile
#	drivers/iommu/arm-smmu-impl.c
#	drivers/iommu/arm-smmu.h
diff --cc drivers/iommu/Makefile
index f4971e82f358,2b8203db73ec..000000000000
--- a/drivers/iommu/Makefile
+++ b/drivers/iommu/Makefile
@@@ -12,11 -11,19 +12,15 @@@ obj-$(CONFIG_IOASID) += ioasid.
  obj-$(CONFIG_IOMMU_IOVA) += iova.o
  obj-$(CONFIG_OF_IOMMU)	+= of_iommu.o
  obj-$(CONFIG_MSM_IOMMU) += msm_iommu.o
 -obj-$(CONFIG_AMD_IOMMU) += amd/iommu.o amd/init.o amd/quirks.o
 -obj-$(CONFIG_AMD_IOMMU_DEBUGFS) += amd/debugfs.o
 -obj-$(CONFIG_AMD_IOMMU_V2) += amd/iommu_v2.o
  obj-$(CONFIG_ARM_SMMU) += arm_smmu.o
++<<<<<<< HEAD
 +arm_smmu-objs += arm-smmu.o arm-smmu-impl.o
++=======
+ arm_smmu-objs += arm-smmu.o arm-smmu-impl.o arm-smmu-nvidia.o arm-smmu-qcom.o
++>>>>>>> aab5a1c88276 (iommu/arm-smmu: add NVIDIA implementation for ARM MMU-500 usage)
  obj-$(CONFIG_ARM_SMMU_V3) += arm-smmu-v3.o
 -obj-$(CONFIG_DMAR_TABLE) += intel/dmar.o
 -obj-$(CONFIG_INTEL_IOMMU) += intel/iommu.o intel/pasid.o
 -obj-$(CONFIG_INTEL_IOMMU) += intel/trace.o
 -obj-$(CONFIG_INTEL_IOMMU_DEBUGFS) += intel/debugfs.o
 -obj-$(CONFIG_INTEL_IOMMU_SVM) += intel/svm.o
  obj-$(CONFIG_IPMMU_VMSA) += ipmmu-vmsa.o
 -obj-$(CONFIG_IRQ_REMAP) += intel/irq_remapping.o irq_remapping.o
 +obj-$(CONFIG_IRQ_REMAP) += irq_remapping.o
  obj-$(CONFIG_MTK_IOMMU) += mtk_iommu.o
  obj-$(CONFIG_MTK_IOMMU_V1) += mtk_iommu_v1.o
  obj-$(CONFIG_OMAP_IOMMU) += omap-iommu.o
diff --cc drivers/iommu/arm-smmu-impl.c
index 3a1a5d8188d6,f4ff124a1967..000000000000
--- a/drivers/iommu/arm-smmu-impl.c
+++ b/drivers/iommu/arm-smmu-impl.c
@@@ -166,9 -209,21 +166,24 @@@ struct arm_smmu_device *arm_smmu_impl_i
  		break;
  	}
  
 -	/* This is implicitly MMU-400 */
 -	if (of_property_read_bool(np, "calxeda,smmu-secure-config-access"))
 +	if (of_property_read_bool(smmu->dev->of_node,
 +				  "calxeda,smmu-secure-config-access"))
  		smmu->impl = &calxeda_impl;
  
++<<<<<<< HEAD
++=======
+ 	if (of_device_is_compatible(np, "nvidia,tegra194-smmu"))
+ 		return nvidia_smmu_impl_init(smmu);
+ 
+ 	if (of_device_is_compatible(np, "qcom,sdm845-smmu-500") ||
+ 	    of_device_is_compatible(np, "qcom,sc7180-smmu-500") ||
+ 	    of_device_is_compatible(np, "qcom,sm8150-smmu-500") ||
+ 	    of_device_is_compatible(np, "qcom,sm8250-smmu-500"))
+ 		return qcom_smmu_impl_init(smmu);
+ 
+ 	if (of_device_is_compatible(np, "marvell,ap806-smmu-500"))
+ 		smmu->impl = &mrvl_mmu500_impl;
+ 
++>>>>>>> aab5a1c88276 (iommu/arm-smmu: add NVIDIA implementation for ARM MMU-500 usage)
  	return smmu;
  }
diff --cc drivers/iommu/arm-smmu.h
index 5f939cfc31c2,fad63efa1a72..000000000000
--- a/drivers/iommu/arm-smmu.h
+++ b/drivers/iommu/arm-smmu.h
@@@ -462,5 -452,9 +462,12 @@@ static inline void arm_smmu_writeq(stru
  	arm_smmu_writeq((s), ARM_SMMU_CB((s), (n)), (o), (v))
  
  struct arm_smmu_device *arm_smmu_impl_init(struct arm_smmu_device *smmu);
++<<<<<<< HEAD
++=======
+ struct arm_smmu_device *nvidia_smmu_impl_init(struct arm_smmu_device *smmu);
+ struct arm_smmu_device *qcom_smmu_impl_init(struct arm_smmu_device *smmu);
+ 
+ int arm_mmu500_reset(struct arm_smmu_device *smmu);
++>>>>>>> aab5a1c88276 (iommu/arm-smmu: add NVIDIA implementation for ARM MMU-500 usage)
  
  #endif /* _ARM_SMMU_H */
diff --git a/MAINTAINERS b/MAINTAINERS
index 3c3ba1dd9b1c..5cd497001353 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -14409,8 +14409,10 @@ F:	drivers/i2c/busses/i2c-tegra.c
 
 TEGRA IOMMU DRIVERS
 M:	Thierry Reding <thierry.reding@gmail.com>
+R:	Krishna Reddy <vdumpa@nvidia.com>
 L:	linux-tegra@vger.kernel.org
 S:	Supported
+F:	drivers/iommu/arm-smmu-nvidia.c
 F:	drivers/iommu/tegra*
 
 TEGRA KBC DRIVER
* Unmerged path drivers/iommu/Makefile
* Unmerged path drivers/iommu/arm-smmu-impl.c
diff --git a/drivers/iommu/arm-smmu-nvidia.c b/drivers/iommu/arm-smmu-nvidia.c
new file mode 100644
index 000000000000..2f55e5793d34
--- /dev/null
+++ b/drivers/iommu/arm-smmu-nvidia.c
@@ -0,0 +1,179 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (C) 2019-2020 NVIDIA CORPORATION.  All rights reserved.
+
+#include <linux/bitfield.h>
+#include <linux/delay.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+
+#include "arm-smmu.h"
+
+/*
+ * Tegra194 has three ARM MMU-500 Instances.
+ * Two of them are used together and must be programmed identically for
+ * interleaved IOVA accesses across them and translates accesses from
+ * non-isochronous HW devices.
+ * Third one is used for translating accesses from isochronous HW devices.
+ * This implementation supports programming of the two instances that must
+ * be programmed identically.
+ * The third instance usage is through standard arm-smmu driver itself and
+ * is out of scope of this implementation.
+ */
+#define NUM_SMMU_INSTANCES 2
+
+struct nvidia_smmu {
+	struct arm_smmu_device	smmu;
+	void __iomem		*bases[NUM_SMMU_INSTANCES];
+};
+
+static inline void __iomem *nvidia_smmu_page(struct arm_smmu_device *smmu,
+					     unsigned int inst, int page)
+{
+	struct nvidia_smmu *nvidia_smmu;
+
+	nvidia_smmu = container_of(smmu, struct nvidia_smmu, smmu);
+	return nvidia_smmu->bases[inst] + (page << smmu->pgshift);
+}
+
+static u32 nvidia_smmu_read_reg(struct arm_smmu_device *smmu,
+				int page, int offset)
+{
+	void __iomem *reg = nvidia_smmu_page(smmu, 0, page) + offset;
+
+	return readl_relaxed(reg);
+}
+
+static void nvidia_smmu_write_reg(struct arm_smmu_device *smmu,
+				  int page, int offset, u32 val)
+{
+	unsigned int i;
+
+	for (i = 0; i < NUM_SMMU_INSTANCES; i++) {
+		void __iomem *reg = nvidia_smmu_page(smmu, i, page) + offset;
+
+		writel_relaxed(val, reg);
+	}
+}
+
+static u64 nvidia_smmu_read_reg64(struct arm_smmu_device *smmu,
+				  int page, int offset)
+{
+	void __iomem *reg = nvidia_smmu_page(smmu, 0, page) + offset;
+
+	return readq_relaxed(reg);
+}
+
+static void nvidia_smmu_write_reg64(struct arm_smmu_device *smmu,
+				    int page, int offset, u64 val)
+{
+	unsigned int i;
+
+	for (i = 0; i < NUM_SMMU_INSTANCES; i++) {
+		void __iomem *reg = nvidia_smmu_page(smmu, i, page) + offset;
+
+		writeq_relaxed(val, reg);
+	}
+}
+
+static void nvidia_smmu_tlb_sync(struct arm_smmu_device *smmu, int page,
+				 int sync, int status)
+{
+	unsigned int delay;
+
+	arm_smmu_writel(smmu, page, sync, 0);
+
+	for (delay = 1; delay < TLB_LOOP_TIMEOUT; delay *= 2) {
+		unsigned int spin_cnt;
+
+		for (spin_cnt = TLB_SPIN_COUNT; spin_cnt > 0; spin_cnt--) {
+			u32 val = 0;
+			unsigned int i;
+
+			for (i = 0; i < NUM_SMMU_INSTANCES; i++) {
+				void __iomem *reg;
+
+				reg = nvidia_smmu_page(smmu, i, page) + status;
+				val |= readl_relaxed(reg);
+			}
+
+			if (!(val & ARM_SMMU_sTLBGSTATUS_GSACTIVE))
+				return;
+
+			cpu_relax();
+		}
+
+		udelay(delay);
+	}
+
+	dev_err_ratelimited(smmu->dev,
+			    "TLB sync timed out -- SMMU may be deadlocked\n");
+}
+
+static int nvidia_smmu_reset(struct arm_smmu_device *smmu)
+{
+	unsigned int i;
+
+	for (i = 0; i < NUM_SMMU_INSTANCES; i++) {
+		u32 val;
+		void __iomem *reg = nvidia_smmu_page(smmu, i, ARM_SMMU_GR0) +
+				    ARM_SMMU_GR0_sGFSR;
+
+		/* clear global FSR */
+		val = readl_relaxed(reg);
+		writel_relaxed(val, reg);
+	}
+
+	return 0;
+}
+
+static const struct arm_smmu_impl nvidia_smmu_impl = {
+	.read_reg = nvidia_smmu_read_reg,
+	.write_reg = nvidia_smmu_write_reg,
+	.read_reg64 = nvidia_smmu_read_reg64,
+	.write_reg64 = nvidia_smmu_write_reg64,
+	.reset = nvidia_smmu_reset,
+	.tlb_sync = nvidia_smmu_tlb_sync,
+};
+
+struct arm_smmu_device *nvidia_smmu_impl_init(struct arm_smmu_device *smmu)
+{
+	struct resource *res;
+	struct device *dev = smmu->dev;
+	struct nvidia_smmu *nvidia_smmu;
+	struct platform_device *pdev = to_platform_device(dev);
+
+	nvidia_smmu = devm_kzalloc(dev, sizeof(*nvidia_smmu), GFP_KERNEL);
+	if (!nvidia_smmu)
+		return ERR_PTR(-ENOMEM);
+
+	/*
+	 * Copy the data from struct arm_smmu_device *smmu allocated in
+	 * arm-smmu.c. The smmu from struct nvidia_smmu replaces the smmu
+	 * pointer used in arm-smmu.c once this function returns.
+	 * This is necessary to derive nvidia_smmu from smmu pointer passed
+	 * through arm_smmu_impl function calls subsequently.
+	 */
+	nvidia_smmu->smmu = *smmu;
+	/* Instance 0 is ioremapped by arm-smmu.c. */
+	nvidia_smmu->bases[0] = smmu->base;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	if (!res)
+		return ERR_PTR(-ENODEV);
+
+	nvidia_smmu->bases[1] = devm_ioremap_resource(dev, res);
+	if (IS_ERR(nvidia_smmu->bases[1]))
+		return ERR_CAST(nvidia_smmu->bases[1]);
+
+	nvidia_smmu->smmu.impl = &nvidia_smmu_impl;
+
+	/*
+	 * Free the struct arm_smmu_device *smmu allocated in arm-smmu.c.
+	 * Once this function returns, arm-smmu.c would use arm_smmu_device
+	 * allocated as part of struct nvidia_smmu.
+	 */
+	devm_kfree(dev, smmu);
+
+	return &nvidia_smmu->smmu;
+}
diff --git a/drivers/iommu/arm-smmu.c b/drivers/iommu/arm-smmu.c
index cbe25c76b96c..837974dfe3e1 100644
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@ -1954,6 +1954,7 @@ static const struct of_device_id arm_smmu_of_match[] = {
 	{ .compatible = "arm,mmu-401", .data = &arm_mmu401 },
 	{ .compatible = "arm,mmu-500", .data = &arm_mmu500 },
 	{ .compatible = "cavium,smmu-v2", .data = &cavium_smmuv2 },
+	{ .compatible = "nvidia,smmu-500", .data = &arm_mmu500 },
 	{ .compatible = "qcom,smmu-v2", .data = &qcom_smmuv2 },
 	{ },
 };
* Unmerged path drivers/iommu/arm-smmu.h
