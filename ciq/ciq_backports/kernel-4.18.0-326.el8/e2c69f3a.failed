bpf: Avoid old-style declaration warnings

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Arnd Bergmann <arnd@arndb.de>
commit e2c69f3a5b4edfbcade2c38862c1839fc371c5d5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/e2c69f3a.failed

gcc -Wextra wants type modifiers in the normal order:

kernel/bpf/bpf_lsm.c:70:1: error: 'static' is not at beginning of declaration [-Werror=old-style-declaration]
   70 | const static struct bpf_func_proto bpf_bprm_opts_set_proto = {
      | ^~~~~
kernel/bpf/bpf_lsm.c:91:1: error: 'static' is not at beginning of declaration [-Werror=old-style-declaration]
   91 | const static struct bpf_func_proto bpf_ima_inode_hash_proto = {
      | ^~~~~

Fixes: 3f6719c7b62f ("bpf: Add bpf_bprm_opts_set helper")
Fixes: 27672f0d280a ("bpf: Add a BPF helper for getting the IMA hash of an inode")
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: KP Singh <kpsingh@kernel.org>
Link: https://lore.kernel.org/bpf/20210322215201.1097281-1-arnd@kernel.org
(cherry picked from commit e2c69f3a5b4edfbcade2c38862c1839fc371c5d5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/bpf_lsm.c
diff --cc kernel/bpf/bpf_lsm.c
index 2304a4453f1b,f211506218ea..000000000000
--- a/kernel/bpf/bpf_lsm.c
+++ b/kernel/bpf/bpf_lsm.c
@@@ -51,6 -53,52 +51,55 @@@ int bpf_lsm_verify_prog(struct bpf_veri
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /* Mask for all the currently supported BPRM option flags */
+ #define BPF_F_BRPM_OPTS_MASK	BPF_F_BPRM_SECUREEXEC
+ 
+ BPF_CALL_2(bpf_bprm_opts_set, struct linux_binprm *, bprm, u64, flags)
+ {
+ 	if (flags & ~BPF_F_BRPM_OPTS_MASK)
+ 		return -EINVAL;
+ 
+ 	bprm->secureexec = (flags & BPF_F_BPRM_SECUREEXEC);
+ 	return 0;
+ }
+ 
+ BTF_ID_LIST_SINGLE(bpf_bprm_opts_set_btf_ids, struct, linux_binprm)
+ 
+ static const struct bpf_func_proto bpf_bprm_opts_set_proto = {
+ 	.func		= bpf_bprm_opts_set,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_PTR_TO_BTF_ID,
+ 	.arg1_btf_id	= &bpf_bprm_opts_set_btf_ids[0],
+ 	.arg2_type	= ARG_ANYTHING,
+ };
+ 
+ BPF_CALL_3(bpf_ima_inode_hash, struct inode *, inode, void *, dst, u32, size)
+ {
+ 	return ima_inode_hash(inode, dst, size);
+ }
+ 
+ static bool bpf_ima_inode_hash_allowed(const struct bpf_prog *prog)
+ {
+ 	return bpf_lsm_is_sleepable_hook(prog->aux->attach_btf_id);
+ }
+ 
+ BTF_ID_LIST_SINGLE(bpf_ima_inode_hash_btf_ids, struct, inode)
+ 
+ static const struct bpf_func_proto bpf_ima_inode_hash_proto = {
+ 	.func		= bpf_ima_inode_hash,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_PTR_TO_BTF_ID,
+ 	.arg1_btf_id	= &bpf_ima_inode_hash_btf_ids[0],
+ 	.arg2_type	= ARG_PTR_TO_UNINIT_MEM,
+ 	.arg3_type	= ARG_CONST_SIZE,
+ 	.allowed	= bpf_ima_inode_hash_allowed,
+ };
+ 
++>>>>>>> e2c69f3a5b4e (bpf: Avoid old-style declaration warnings)
  static const struct bpf_func_proto *
  bpf_lsm_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
  {
* Unmerged path kernel/bpf/bpf_lsm.c
