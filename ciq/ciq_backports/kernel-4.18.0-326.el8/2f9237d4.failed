dma-mapping: make support for dma ops optional

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 2f9237d4f6df49b74c51cdac555b0a9979d0c237
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/2f9237d4.failed

Avoid the overhead of the dma ops support for tiny builds that only
use the direct mapping.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
	Reviewed-by: Alexey Kardashevskiy <aik@ozlabs.ru>
(cherry picked from commit 2f9237d4f6df49b74c51cdac555b0a9979d0c237)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/alpha/Kconfig
#	arch/arm/Kconfig
#	arch/ia64/Kconfig
#	arch/powerpc/Kconfig
#	drivers/infiniband/core/device.c
#	drivers/iommu/Kconfig
#	include/linux/device.h
#	kernel/dma/Kconfig
diff --cc arch/alpha/Kconfig
index 31a34079088d,9c5f06e8eb9b..000000000000
--- a/arch/alpha/Kconfig
+++ b/arch/alpha/Kconfig
@@@ -4,8 -4,15 +4,15 @@@ config ALPH
  	default y
  	select ARCH_MIGHT_HAVE_PC_PARPORT
  	select ARCH_MIGHT_HAVE_PC_SERIO
 -	select ARCH_NO_PREEMPT
 -	select ARCH_NO_SG_CHAIN
  	select ARCH_USE_CMPXCHG_LOCKREF
++<<<<<<< HEAD
++=======
+ 	select DMA_OPS if PCI
+ 	select FORCE_PCI if !ALPHA_JENSEN
+ 	select PCI_DOMAINS if PCI
+ 	select PCI_SYSCALL if PCI
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  	select HAVE_AOUT
 -	select HAVE_ASM_MODVERSIONS
  	select HAVE_IDE
  	select HAVE_OPROFILE
  	select HAVE_PCSPKR_PLATFORM
diff --cc arch/arm/Kconfig
index 2e4a73955452,bee35b0187e4..000000000000
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@@ -23,12 -33,16 +23,18 @@@ config AR
  	select ARCH_SUPPORTS_ATOMIC_RMW
  	select ARCH_USE_BUILTIN_BSWAP
  	select ARCH_USE_CMPXCHG_LOCKREF
 -	select ARCH_WANT_DEFAULT_TOPDOWN_MMAP_LAYOUT if MMU
  	select ARCH_WANT_IPC_PARSE_VERSION
 -	select BINFMT_FLAT_ARGVP_ENVP_ON_STACK
 -	select BUILDTIME_TABLE_SORT if MMU
 +	select BUILDTIME_EXTABLE_SORT if MMU
  	select CLONE_BACKWARDS
 -	select CPU_PM if SUSPEND || CPU_IDLE
 +	select CPU_PM if (SUSPEND || CPU_IDLE)
  	select DCACHE_WORD_ACCESS if HAVE_EFFICIENT_UNALIGNED_ACCESS
++<<<<<<< HEAD
 +	select DMA_DIRECT_OPS if !MMU
++=======
+ 	select DMA_DECLARE_COHERENT
+ 	select DMA_OPS
+ 	select DMA_REMAP if MMU
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  	select EDAC_SUPPORT
  	select EDAC_ATOMIC_SCRUB
  	select GENERIC_ALLOCATOR
diff --cc arch/ia64/Kconfig
index d6f777303de9,5b4ec80bf586..000000000000
--- a/arch/ia64/Kconfig
+++ b/arch/ia64/Kconfig
@@@ -275,6 -183,21 +275,24 @@@ config IA64_L1_CACHE_SHIF
  	default "7" if MCKINLEY
  	default "6" if ITANIUM
  
++<<<<<<< HEAD
++=======
+ config IA64_SGI_UV
+ 	bool "SGI-UV support"
+ 	help
+ 	  Selecting this option will add specific support for running on SGI
+ 	  UV based systems.  If you have an SGI UV system or are building a
+ 	  distro kernel, select this option.
+ 
+ config IA64_HP_SBA_IOMMU
+ 	bool "HP SBA IOMMU support"
+ 	select DMA_OPS
+ 	default y
+ 	help
+ 	  Say Y here to add support for the SBA IOMMU found on HP zx1 and
+ 	  sx1000 systems.  If you're unsure, answer Y.
+ 
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  config IA64_CYCLONE
  	bool "Cyclone (EXA) Time Source support"
  	help
diff --cc arch/powerpc/Kconfig
index 37e920725b19,e9b091d35872..000000000000
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@@ -148,13 -146,12 +148,17 @@@ config PP
  	select ARCH_USE_BUILTIN_BSWAP
  	select ARCH_USE_CMPXCHG_LOCKREF		if PPC64
  	select ARCH_WANT_IPC_PARSE_VERSION
 +	select ARCH_WANT_IRQS_OFF_ACTIVATE_MM
  	select ARCH_WEAK_RELEASE_ACQUIRE
  	select BINFMT_ELF
 -	select BUILDTIME_TABLE_SORT
 +	select BUILDTIME_EXTABLE_SORT
  	select CLONE_BACKWARDS
  	select DCACHE_WORD_ACCESS		if PPC64 && CPU_LITTLE_ENDIAN
++<<<<<<< HEAD
 +	select DMA_OPS_BYPASS			if PPC64
++=======
+ 	select DMA_OPS				if PPC64
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  	select DYNAMIC_FTRACE			if FUNCTION_TRACER
  	select EDAC_ATOMIC_SCRUB
  	select EDAC_SUPPORT
diff --cc drivers/infiniband/core/device.c
index 0379573534a3,2927a9d16eaa..000000000000
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@@ -1228,6 -1178,60 +1228,63 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static void setup_dma_device(struct ib_device *device)
+ {
+ 	struct device *parent = device->dev.parent;
+ 
+ 	WARN_ON_ONCE(device->dma_device);
+ 
+ #ifdef CONFIG_DMA_OPS
+ 	if (device->dev.dma_ops) {
+ 		/*
+ 		 * The caller provided custom DMA operations. Copy the
+ 		 * DMA-related fields that are used by e.g. dma_alloc_coherent()
+ 		 * into device->dev.
+ 		 */
+ 		device->dma_device = &device->dev;
+ 		if (!device->dev.dma_mask) {
+ 			if (parent)
+ 				device->dev.dma_mask = parent->dma_mask;
+ 			else
+ 				WARN_ON_ONCE(true);
+ 		}
+ 		if (!device->dev.coherent_dma_mask) {
+ 			if (parent)
+ 				device->dev.coherent_dma_mask =
+ 					parent->coherent_dma_mask;
+ 			else
+ 				WARN_ON_ONCE(true);
+ 		}
+ 	} else
+ #endif /* CONFIG_DMA_OPS */
+ 	{
+ 		/*
+ 		 * The caller did not provide custom DMA operations. Use the
+ 		 * DMA mapping operations of the parent device.
+ 		 */
+ 		WARN_ON_ONCE(!parent);
+ 		device->dma_device = parent;
+ 	}
+ 
+ 	if (!device->dev.dma_parms) {
+ 		if (parent) {
+ 			/*
+ 			 * The caller did not provide DMA parameters, so
+ 			 * 'parent' probably represents a PCI device. The PCI
+ 			 * core sets the maximum segment size to 64
+ 			 * KB. Increase this parameter to 2 GB.
+ 			 */
+ 			device->dev.dma_parms = parent->dma_parms;
+ 			dma_set_max_seg_size(device->dma_device, SZ_2G);
+ 		} else {
+ 			WARN_ON_ONCE(true);
+ 		}
+ 	}
+ }
+ 
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  /*
   * setup_device() allocates memory and sets up data that requires calling the
   * device ops, this is the only reason these actions are not done during
diff --cc drivers/iommu/Kconfig
index c4e3804df1cd,b622af72448f..000000000000
--- a/drivers/iommu/Kconfig
+++ b/drivers/iommu/Kconfig
@@@ -127,8 -129,140 +128,145 @@@ config MSM_IOMM
  
  	  If unsure, say N here.
  
++<<<<<<< HEAD
 +source "drivers/iommu/amd/Kconfig"
 +source "drivers/iommu/intel/Kconfig"
++=======
+ config IOMMU_PGTABLES_L2
+ 	def_bool y
+ 	depends on MSM_IOMMU && MMU && SMP && CPU_DCACHE_DISABLE=n
+ 
+ # AMD IOMMU support
+ config AMD_IOMMU
+ 	bool "AMD IOMMU support"
+ 	select SWIOTLB
+ 	select PCI_MSI
+ 	select PCI_ATS
+ 	select PCI_PRI
+ 	select PCI_PASID
+ 	select IOMMU_API
+ 	select IOMMU_IOVA
+ 	select IOMMU_DMA
+ 	depends on X86_64 && PCI && ACPI
+ 	help
+ 	  With this option you can enable support for AMD IOMMU hardware in
+ 	  your system. An IOMMU is a hardware component which provides
+ 	  remapping of DMA memory accesses from devices. With an AMD IOMMU you
+ 	  can isolate the DMA memory of different devices and protect the
+ 	  system from misbehaving device drivers or hardware.
+ 
+ 	  You can find out if your system has an AMD IOMMU if you look into
+ 	  your BIOS for an option to enable it or if you have an IVRS ACPI
+ 	  table.
+ 
+ config AMD_IOMMU_V2
+ 	tristate "AMD IOMMU Version 2 driver"
+ 	depends on AMD_IOMMU
+ 	select MMU_NOTIFIER
+ 	help
+ 	  This option enables support for the AMD IOMMUv2 features of the IOMMU
+ 	  hardware. Select this option if you want to use devices that support
+ 	  the PCI PRI and PASID interface.
+ 
+ config AMD_IOMMU_DEBUGFS
+ 	bool "Enable AMD IOMMU internals in DebugFS"
+ 	depends on AMD_IOMMU && IOMMU_DEBUGFS
+ 	help
+ 	  !!!WARNING!!!  !!!WARNING!!!  !!!WARNING!!!  !!!WARNING!!!
+ 
+ 	  DO NOT ENABLE THIS OPTION UNLESS YOU REALLY, -REALLY- KNOW WHAT YOU ARE DOING!!!
+ 	  Exposes AMD IOMMU device internals in DebugFS.
+ 
+ 	  This option is -NOT- intended for production environments, and should
+ 	  not generally be enabled.
+ 
+ # Intel IOMMU support
+ config DMAR_TABLE
+ 	bool
+ 
+ config INTEL_IOMMU
+ 	bool "Support for Intel IOMMU using DMA Remapping Devices"
+ 	depends on PCI_MSI && ACPI && (X86 || IA64)
+ 	select DMA_OPS
+ 	select IOMMU_API
+ 	select IOMMU_IOVA
+ 	select NEED_DMA_MAP_STATE
+ 	select DMAR_TABLE
+ 	select SWIOTLB
+ 	select IOASID
+ 	help
+ 	  DMA remapping (DMAR) devices support enables independent address
+ 	  translations for Direct Memory Access (DMA) from devices.
+ 	  These DMA remapping devices are reported via ACPI tables
+ 	  and include PCI device scope covered by these DMA
+ 	  remapping devices.
+ 
+ config INTEL_IOMMU_DEBUGFS
+ 	bool "Export Intel IOMMU internals in Debugfs"
+ 	depends on INTEL_IOMMU && IOMMU_DEBUGFS
+ 	help
+ 	  !!!WARNING!!!
+ 
+ 	  DO NOT ENABLE THIS OPTION UNLESS YOU REALLY KNOW WHAT YOU ARE DOING!!!
+ 
+ 	  Expose Intel IOMMU internals in Debugfs.
+ 
+ 	  This option is -NOT- intended for production environments, and should
+ 	  only be enabled for debugging Intel IOMMU.
+ 
+ config INTEL_IOMMU_SVM
+ 	bool "Support for Shared Virtual Memory with Intel IOMMU"
+ 	depends on INTEL_IOMMU && X86_64
+ 	select PCI_PASID
+ 	select PCI_PRI
+ 	select MMU_NOTIFIER
+ 	select IOASID
+ 	help
+ 	  Shared Virtual Memory (SVM) provides a facility for devices
+ 	  to access DMA resources through process address space by
+ 	  means of a Process Address Space ID (PASID).
+ 
+ config INTEL_IOMMU_DEFAULT_ON
+ 	def_bool y
+ 	prompt "Enable Intel DMA Remapping Devices by default"
+ 	depends on INTEL_IOMMU
+ 	help
+ 	  Selecting this option will enable a DMAR device at boot time if
+ 	  one is found. If this option is not selected, DMAR support can
+ 	  be enabled by passing intel_iommu=on to the kernel.
+ 
+ config INTEL_IOMMU_BROKEN_GFX_WA
+ 	bool "Workaround broken graphics drivers (going away soon)"
+ 	depends on INTEL_IOMMU && BROKEN && X86
+ 	help
+ 	  Current Graphics drivers tend to use physical address
+ 	  for DMA and avoid using DMA APIs. Setting this config
+ 	  option permits the IOMMU driver to set a unity map for
+ 	  all the OS-visible memory. Hence the driver can continue
+ 	  to use physical addresses for DMA, at least until this
+ 	  option is removed in the 2.6.32 kernel.
+ 
+ config INTEL_IOMMU_FLOPPY_WA
+ 	def_bool y
+ 	depends on INTEL_IOMMU && X86
+ 	help
+ 	  Floppy disk drivers are known to bypass DMA API calls
+ 	  thereby failing to work when IOMMU is enabled. This
+ 	  workaround will setup a 1:1 mapping for the first
+ 	  16MiB to make floppy (an ISA device) work.
+ 
+ config INTEL_IOMMU_SCALABLE_MODE_DEFAULT_ON
+ 	bool "Enable Intel IOMMU scalable mode by default"
+ 	depends on INTEL_IOMMU
+ 	help
+ 	  Selecting this option will enable by default the scalable mode if
+ 	  hardware presents the capability. The scalable mode is defined in
+ 	  VT-d 3.0. The scalable mode capability could be checked by reading
+ 	  /sys/devices/virtual/iommu/dmar*/intel-iommu/ecap. If this option
+ 	  is not selected, scalable mode support could also be enabled by
+ 	  passing intel_iommu=sm_on to the kernel. If not sure, please use
+ 	  the default value.
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  
  config IRQ_REMAP
  	bool "Support for Interrupt Remapping"
diff --cc include/linux/device.h
index c1630a5dec50,4c4af98321eb..000000000000
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@@ -1231,11 -568,9 +1231,16 @@@ struct device 
  #ifdef CONFIG_GENERIC_MSI_IRQ
  	struct list_head	msi_list;
  #endif
++<<<<<<< HEAD
 +
 +#ifdef CONFIG_NUMA
 +	int		numa_node;	/* NUMA node this device is close to */
 +#endif
++=======
+ #ifdef CONFIG_DMA_OPS
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  	const struct dma_map_ops *dma_ops;
+ #endif
  	u64		*dma_mask;	/* dma mask (if dma'able device) */
  	u64		coherent_dma_mask;/* Like dma_mask, but for
  					     alloc_coherent mappings as
diff --cc kernel/dma/Kconfig
index 351e3cb0b8ed,5cfb2428593a..000000000000
--- a/kernel/dma/Kconfig
+++ b/kernel/dma/Kconfig
@@@ -4,12 -5,7 +4,16 @@@ config HAS_DM
  	depends on !NO_DMA
  	default y
  
++<<<<<<< HEAD
 +#
 +# IOMMU drivers that can bypass the IOMMU code and optionally use the direct
 +# mapping fast path should select this option and set the dma_ops_bypass
 +# flag in struct device where applicable
 +#
 +config DMA_OPS_BYPASS
++=======
+ config DMA_OPS
++>>>>>>> 2f9237d4f6df (dma-mapping: make support for dma ops optional)
  	bool
  
  config NEED_SG_DMA_LENGTH
* Unmerged path arch/alpha/Kconfig
* Unmerged path arch/arm/Kconfig
* Unmerged path arch/ia64/Kconfig
diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index 8ef87c03cf44..93482aa24031 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -347,6 +347,7 @@ config MACH_JAZZ
 	bool "Jazz family of machines"
 	select ARCH_MIGHT_HAVE_PC_PARPORT
 	select ARCH_MIGHT_HAVE_PC_SERIO
+	select DMA_OPS
 	select FW_ARC
 	select FW_ARC32
 	select ARCH_MAY_HAVE_PC_FDC
diff --git a/arch/parisc/Kconfig b/arch/parisc/Kconfig
index ffac7ac3dc5e..ce45c258404f 100644
--- a/arch/parisc/Kconfig
+++ b/arch/parisc/Kconfig
@@ -12,6 +12,7 @@ config PARISC
 	select ARCH_HAS_STRICT_KERNEL_RWX
 	select ARCH_HAS_UBSAN_SANITIZE_ALL
 	select ARCH_SUPPORTS_MEMORY_FAILURE
+	select DMA_OPS
 	select RTC_CLASS
 	select RTC_DRV_GENERIC
 	select INIT_ALL_POSSIBLE
* Unmerged path arch/powerpc/Kconfig
diff --git a/arch/s390/Kconfig b/arch/s390/Kconfig
index bcfb0a6d38b3..68206b69cbe4 100644
--- a/arch/s390/Kconfig
+++ b/arch/s390/Kconfig
@@ -109,6 +109,7 @@ config S390
 	select ARCH_WANT_IPC_PARSE_VERSION
 	select BUILDTIME_EXTABLE_SORT
 	select CLONE_BACKWARDS2
+	select DMA_OPS if PCI
 	select DYNAMIC_FTRACE if FUNCTION_TRACER
 	select GENERIC_CLOCKEVENTS
 	select GENERIC_CPU_AUTOPROBE
diff --git a/arch/sparc/Kconfig b/arch/sparc/Kconfig
index 12d490d796fe..60090a235a1e 100644
--- a/arch/sparc/Kconfig
+++ b/arch/sparc/Kconfig
@@ -14,6 +14,7 @@ config SPARC
 	default y
 	select ARCH_MIGHT_HAVE_PC_PARPORT if SPARC64 && PCI
 	select ARCH_MIGHT_HAVE_PC_SERIO
+	select DMA_OPS
 	select OF
 	select OF_PROMTREE
 	select HAVE_IDE
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 2c8e1db89f4b..3a4a08d67ccd 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -896,6 +896,7 @@ config DMI
 
 config GART_IOMMU
 	bool "Old AMD GART IOMMU support"
+	select DMA_OPS
 	select IOMMU_HELPER
 	select SWIOTLB
 	depends on X86_64 && PCI && AMD_NB
* Unmerged path drivers/infiniband/core/device.c
* Unmerged path drivers/iommu/Kconfig
diff --git a/drivers/macintosh/macio_asic.c b/drivers/macintosh/macio_asic.c
index 07074820a167..ab2e4c6ff44d 100644
--- a/drivers/macintosh/macio_asic.c
+++ b/drivers/macintosh/macio_asic.c
@@ -385,7 +385,7 @@ static struct macio_dev * macio_add_one_device(struct macio_chip *chip,
 	dma_set_max_seg_size(&dev->ofdev.dev, 65536);
 	dma_set_seg_boundary(&dev->ofdev.dev, 0xffffffff);
 
-#ifdef CONFIG_PCI
+#if defined(CONFIG_PCI) && defined(CONFIG_DMA_OPS)
 	/* Set the DMA ops to the ones from the PCI device, this could be
 	 * fishy if we didn't know that on PowerMac it's always direct ops
 	 * or iommu ops that will work fine
@@ -394,7 +394,7 @@ static struct macio_dev * macio_add_one_device(struct macio_chip *chip,
 	 */
 	dev->ofdev.dev.archdata = chip->lbus.pdev->dev.archdata;
 	dev->ofdev.dev.dma_ops = chip->lbus.pdev->dev.dma_ops;
-#endif /* CONFIG_PCI */
+#endif /* CONFIG_PCI && CONFIG_DMA_OPS */
 
 #ifdef DEBUG
 	printk("preparing mdev @%p, ofdev @%p, dev @%p, kobj @%p\n",
diff --git a/drivers/misc/mic/Kconfig b/drivers/misc/mic/Kconfig
index f5c5a04b427d..f787c31fb060 100644
--- a/drivers/misc/mic/Kconfig
+++ b/drivers/misc/mic/Kconfig
@@ -5,6 +5,7 @@ comment "Intel MIC Bus Driver"
 config INTEL_MIC_BUS
 	tristate "Intel MIC Bus Driver"
 	depends on 64BIT && PCI && X86
+	select DMA_OPS
 	help
 	  This option is selected by any driver which registers a
 	  device or driver on the MIC Bus, such as CONFIG_INTEL_MIC_HOST,
@@ -22,6 +23,7 @@ comment "SCIF Bus Driver"
 config SCIF_BUS
 	tristate "SCIF Bus Driver"
 	depends on 64BIT && PCI && X86
+	select DMA_OPS
 	help
 	  This option is selected by any driver which registers a
 	  device or driver on the SCIF Bus, such as CONFIG_INTEL_MIC_HOST
@@ -38,6 +40,7 @@ comment "VOP Bus Driver"
 
 config VOP_BUS
 	tristate "VOP Bus Driver"
+	select DMA_OPS
 	help
 	  This option is selected by any driver which registers a
 	  device or driver on the VOP Bus, such as CONFIG_INTEL_MIC_HOST
@@ -56,6 +59,7 @@ config INTEL_MIC_HOST
 	tristate "Intel MIC Host Driver"
 	depends on 64BIT && PCI && X86
 	depends on INTEL_MIC_BUS && SCIF_BUS && MIC_COSM && VOP_BUS
+	select DMA_OPS
 	help
 	  This enables Host Driver support for the Intel Many Integrated
 	  Core (MIC) family of PCIe form factor coprocessor devices that
diff --git a/drivers/vdpa/Kconfig b/drivers/vdpa/Kconfig
index 6048a5c4cd79..6caf539091e5 100644
--- a/drivers/vdpa/Kconfig
+++ b/drivers/vdpa/Kconfig
@@ -11,6 +11,7 @@ if VDPA
 config VDPA_SIM
 	tristate "vDPA device simulator"
 	depends on RUNTIME_TESTING_MENU && HAS_DMA
+	select DMA_OPS
 	select VHOST_RING
 	select GENERIC_NET_UTILS
 	default n
diff --git a/drivers/xen/Kconfig b/drivers/xen/Kconfig
index cfeee237710d..3fdd09e6adb0 100644
--- a/drivers/xen/Kconfig
+++ b/drivers/xen/Kconfig
@@ -163,6 +163,7 @@ config XEN_GRANT_DEV_ALLOC
 
 config SWIOTLB_XEN
 	def_bool y
+	select DMA_OPS
 	select SWIOTLB
 
 config XEN_TMEM
* Unmerged path include/linux/device.h
diff --git a/include/linux/dma-mapping.h b/include/linux/dma-mapping.h
index 345f9e13b263..2de510fb3fe0 100644
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@ -204,6 +204,7 @@ static inline int dma_mmap_from_global_coherent(struct vm_area_struct *vma,
 #ifdef CONFIG_HAS_DMA
 #include <asm/dma-mapping.h>
 
+#ifdef CONFIG_DMA_OPS
 static inline const struct dma_map_ops *get_dma_ops(struct device *dev)
 {
 	if (dev->dma_ops)
@@ -216,7 +217,16 @@ static inline void set_dma_ops(struct device *dev,
 {
 	dev->dma_ops = dma_ops;
 }
-
+#else /* CONFIG_DMA_OPS */
+static inline const struct dma_map_ops *get_dma_ops(struct device *dev)
+{
+	return NULL;
+}
+static inline void set_dma_ops(struct device *dev,
+			       const struct dma_map_ops *dma_ops)
+{
+}
+#endif /* CONFIG_DMA_OPS */
 
 static inline int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
 {
* Unmerged path kernel/dma/Kconfig
diff --git a/kernel/dma/Makefile b/kernel/dma/Makefile
index a779ec153210..b93d4b932dd1 100644
--- a/kernel/dma/Makefile
+++ b/kernel/dma/Makefile
@@ -1,6 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
 
-obj-$(CONFIG_HAS_DMA)			+= mapping.o direct.o dummy.o
+obj-$(CONFIG_HAS_DMA)			+= mapping.o direct.o
+obj-$(CONFIG_DMA_OPS)			+= dummy.o
 obj-$(CONFIG_DMA_CMA)			+= contiguous.o
 obj-$(CONFIG_HAVE_GENERIC_DMA_COHERENT) += coherent.o
 obj-$(CONFIG_DMA_VIRT_OPS)		+= virt.o
