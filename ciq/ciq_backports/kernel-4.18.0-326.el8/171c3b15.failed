net: packetmmap: fix only tx timestamp on request

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Richard Sanger <rsanger@wand.net.nz>
commit 171c3b151118a2fe0fc1e2a9d1b5a1570cfe82d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/171c3b15.failed

The packetmmap tx ring should only return timestamps if requested via
setsockopt PACKET_TIMESTAMP, as documented. This allows compatibility
with non-timestamp aware user-space code which checks
tp_status == TP_STATUS_AVAILABLE; not expecting additional timestamp
flags to be set in tp_status.

Fixes: b9c32fb27170 ("packet: if hw/sw ts enabled in rx/tx ring, report which ts we got")
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
	Signed-off-by: Richard Sanger <rsanger@wand.net.nz>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 171c3b151118a2fe0fc1e2a9d1b5a1570cfe82d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/packet/af_packet.c
diff --cc net/packet/af_packet.c
index 69c3916c8efc,ae906eb4b269..000000000000
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@@ -423,10 -419,11 +423,15 @@@ static __u32 tpacket_get_timestamp(stru
  
  	if (shhwtstamps &&
  	    (flags & SOF_TIMESTAMPING_RAW_HARDWARE) &&
 -	    ktime_to_timespec64_cond(shhwtstamps->hwtstamp, ts))
 +	    ktime_to_timespec_cond(shhwtstamps->hwtstamp, ts))
  		return TP_STATUS_TS_RAW_HARDWARE;
  
++<<<<<<< HEAD
 +	if (ktime_to_timespec_cond(skb->tstamp, ts))
++=======
+ 	if ((flags & SOF_TIMESTAMPING_SOFTWARE) &&
+ 	    ktime_to_timespec64_cond(skb->tstamp, ts))
++>>>>>>> 171c3b151118 (net: packetmmap: fix only tx timestamp on request)
  		return TP_STATUS_TS_SOFTWARE;
  
  	return 0;
@@@ -2307,8 -2341,13 +2312,18 @@@ static int tpacket_rcv(struct sk_buff *
  
  	skb_copy_bits(skb, 0, h.raw + macoff, snaplen);
  
++<<<<<<< HEAD
 +	if (!(ts_status = tpacket_get_timestamp(skb, &ts, po->tp_tstamp)))
 +		getnstimeofday(&ts);
++=======
+ 	/* Always timestamp; prefer an existing software timestamp taken
+ 	 * closer to the time of capture.
+ 	 */
+ 	ts_status = tpacket_get_timestamp(skb, &ts,
+ 					  po->tp_tstamp | SOF_TIMESTAMPING_SOFTWARE);
+ 	if (!ts_status)
+ 		ktime_get_real_ts64(&ts);
++>>>>>>> 171c3b151118 (net: packetmmap: fix only tx timestamp on request)
  
  	status |= ts_status;
  
* Unmerged path net/packet/af_packet.c
