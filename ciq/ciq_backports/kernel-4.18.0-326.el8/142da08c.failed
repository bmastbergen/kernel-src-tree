ice: Advertise virtchnl UDP segmentation offload capability

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
Rebuild_CHGLOG: - virtchnl: Advertise virtchnl UDP segmentation offload capability (Ivan Vecera) [1966954]
Rebuild_FUZZ: 94.31%
commit-author Brett Creeley <brett.creeley@intel.com>
commit 142da08c4dc0afd07f9136b4812d5386bd6e1717
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/142da08c.failed

As the hardware is capable of supporting UDP segmentation offload, add a
capability bit to virtchnl.h to communicate this and have the driver
advertise its support.

	Suggested-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Signed-off-by: Brett Creeley <brett.creeley@intel.com>
	Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit 142da08c4dc0afd07f9136b4812d5386bd6e1717)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/avf/virtchnl.h
diff --cc include/linux/avf/virtchnl.h
index 532bcbfc4716,9e0341cf2c36..000000000000
--- a/include/linux/avf/virtchnl.h
+++ b/include/linux/avf/virtchnl.h
@@@ -247,6 -251,8 +247,11 @@@ VIRTCHNL_CHECK_STRUCT_LEN(16, virtchnl_
  #define VIRTCHNL_VF_OFFLOAD_ENCAP_CSUM		0X00200000
  #define VIRTCHNL_VF_OFFLOAD_RX_ENCAP_CSUM	0X00400000
  #define VIRTCHNL_VF_OFFLOAD_ADQ			0X00800000
++<<<<<<< HEAD
++=======
+ #define VIRTCHNL_VF_OFFLOAD_USO			0X02000000
+ #define VIRTCHNL_VF_OFFLOAD_FDIR_PF		0X10000000
++>>>>>>> 142da08c4dc0 (ice: Advertise virtchnl UDP segmentation offload capability)
  
  /* Define below the capability flags that are not offloads */
  #define VIRTCHNL_VF_CAP_ADV_LINK_SPEED		0x00000080
diff --git a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index ec7f6c64132e..dbe94163dedf 100644
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@ -1954,6 +1954,9 @@ static int ice_vc_get_vf_res_msg(struct ice_vf *vf, u8 *msg)
 	if (vf->driver_caps & VIRTCHNL_VF_CAP_ADV_LINK_SPEED)
 		vfres->vf_cap_flags |= VIRTCHNL_VF_CAP_ADV_LINK_SPEED;
 
+	if (vf->driver_caps & VIRTCHNL_VF_OFFLOAD_USO)
+		vfres->vf_cap_flags |= VIRTCHNL_VF_OFFLOAD_USO;
+
 	vfres->num_vsis = 1;
 	/* Tx and Rx queue are equal for VF */
 	vfres->num_queue_pairs = vsi->num_txq;
* Unmerged path include/linux/avf/virtchnl.h
