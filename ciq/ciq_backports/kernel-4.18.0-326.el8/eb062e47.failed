ASoC: Intel: Remove sst_dsp_get_thread_context

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Cezary Rojewski <cezary.rojewski@intel.com>
commit eb062e47f7c8cc28f19ba8f897481c22d13db1ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/eb062e47.failed

While sst_dsp_get_thread_context() is declared as solution-agnostic, it
is only used by /skylake/ solution. Majority of thread_context field
usages are direct accesses. Improve code cohesiveness and convert to
single usage model.

	Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Acked-by: Liam Girdwood <liam.r.girdwood@intel.com>
Link: https://lore.kernel.org/r/20201006064907.16277-14-cezary.rojewski@intel.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit eb062e47f7c8cc28f19ba8f897481c22d13db1ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/intel/common/sst-dsp-priv.h
diff --cc sound/soc/intel/common/sst-dsp-priv.h
index fa47ae811bf0,de2b44568feb..000000000000
--- a/sound/soc/intel/common/sst-dsp-priv.h
+++ b/sound/soc/intel/common/sst-dsp-priv.h
@@@ -270,69 -98,4 +270,72 @@@ struct sst_dsp 
  	struct snd_dma_buffer dmab;
  };
  
++<<<<<<< HEAD
 +/* Size optimised DRAM/IRAM memcpy */
 +static inline void sst_dsp_write(struct sst_dsp *sst, void *src,
 +	u32 dest_offset, size_t bytes)
 +{
 +	sst->ops->ram_write(sst, sst->addr.lpe + dest_offset, src, bytes);
 +}
 +
 +static inline void sst_dsp_read(struct sst_dsp *sst, void *dest,
 +	u32 src_offset, size_t bytes)
 +{
 +	sst->ops->ram_read(sst, dest, sst->addr.lpe + src_offset, bytes);
 +}
 +
 +static inline void *sst_dsp_get_thread_context(struct sst_dsp *sst)
 +{
 +	return sst->thread_context;
 +}
 +
 +/* Create/Free FW files - can contain multiple modules */
 +struct sst_fw *sst_fw_new(struct sst_dsp *dsp,
 +	const struct firmware *fw, void *private);
 +void sst_fw_free(struct sst_fw *sst_fw);
 +void sst_fw_free_all(struct sst_dsp *dsp);
 +int sst_fw_reload(struct sst_fw *sst_fw);
 +void sst_fw_unload(struct sst_fw *sst_fw);
 +
 +/* Create/Free firmware modules */
 +struct sst_module *sst_module_new(struct sst_fw *sst_fw,
 +	struct sst_module_template *template, void *private);
 +void sst_module_free(struct sst_module *sst_module);
 +struct sst_module *sst_module_get_from_id(struct sst_dsp *dsp, u32 id);
 +int sst_module_alloc_blocks(struct sst_module *module);
 +int sst_module_free_blocks(struct sst_module *module);
 +
 +/* Create/Free firmware module runtime instances */
 +struct sst_module_runtime *sst_module_runtime_new(struct sst_module *module,
 +	int id, void *private);
 +void sst_module_runtime_free(struct sst_module_runtime *runtime);
 +struct sst_module_runtime *sst_module_runtime_get_from_id(
 +	struct sst_module *module, u32 id);
 +int sst_module_runtime_alloc_blocks(struct sst_module_runtime *runtime,
 +	int offset);
 +int sst_module_runtime_free_blocks(struct sst_module_runtime *runtime);
 +int sst_module_runtime_save(struct sst_module_runtime *runtime,
 +	struct sst_module_runtime_context *context);
 +int sst_module_runtime_restore(struct sst_module_runtime *runtime,
 +	struct sst_module_runtime_context *context);
 +
 +/* generic block allocation */
 +int sst_alloc_blocks(struct sst_dsp *dsp, struct sst_block_allocator *ba,
 +	struct list_head *block_list);
 +int sst_free_blocks(struct sst_dsp *dsp, struct list_head *block_list);
 +
 +/* scratch allocation */
 +int sst_block_alloc_scratch(struct sst_dsp *dsp);
 +void sst_block_free_scratch(struct sst_dsp *dsp);
 +
 +/* Register the DSPs memory blocks - would be nice to read from ACPI */
 +struct sst_mem_block *sst_mem_block_register(struct sst_dsp *dsp, u32 offset,
 +	u32 size, enum sst_mem_type type, const struct sst_block_ops *ops,
 +	u32 index, void *private);
 +void sst_mem_block_unregister_all(struct sst_dsp *dsp);
 +
 +u32 sst_dsp_get_offset(struct sst_dsp *dsp, u32 offset,
 +	enum sst_mem_type type);
++=======
++>>>>>>> eb062e47f7c8 (ASoC: Intel: Remove sst_dsp_get_thread_context)
  #endif
* Unmerged path sound/soc/intel/common/sst-dsp-priv.h
diff --git a/sound/soc/intel/skylake/cnl-sst.c b/sound/soc/intel/skylake/cnl-sst.c
index c6abcd5aa67b..8907c82a3e95 100644
--- a/sound/soc/intel/skylake/cnl-sst.c
+++ b/sound/soc/intel/skylake/cnl-sst.c
@@ -313,7 +313,7 @@ static struct sst_ops cnl_ops = {
 static irqreturn_t cnl_dsp_irq_thread_handler(int irq, void *context)
 {
 	struct sst_dsp *dsp = context;
-	struct skl_dev *cnl = sst_dsp_get_thread_context(dsp);
+	struct skl_dev *cnl = dsp->thread_context;
 	struct sst_generic_ipc *ipc = &cnl->ipc;
 	struct skl_ipc_header header = {0};
 	u32 hipcida, hipctdr, hipctdd;
diff --git a/sound/soc/intel/skylake/skl-sst-ipc.c b/sound/soc/intel/skylake/skl-sst-ipc.c
index 667cdddc289f..7a425271b08b 100644
--- a/sound/soc/intel/skylake/skl-sst-ipc.c
+++ b/sound/soc/intel/skylake/skl-sst-ipc.c
@@ -489,7 +489,7 @@ void skl_ipc_process_reply(struct sst_generic_ipc *ipc,
 irqreturn_t skl_dsp_irq_thread_handler(int irq, void *context)
 {
 	struct sst_dsp *dsp = context;
-	struct skl_dev *skl = sst_dsp_get_thread_context(dsp);
+	struct skl_dev *skl = dsp->thread_context;
 	struct sst_generic_ipc *ipc = &skl->ipc;
 	struct skl_ipc_header header = {0};
 	u32 hipcie, hipct, hipcte;
