xhci: Add xhci_reset_halted_ep() helper function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Mathias Nyman <mathias.nyman@linux.intel.com>
commit d8ac95001bea683d2088acb3e61613a27b8d2d5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/d8ac9500.failed

Create a separate helper function to issue reset endpont commands
to clear halted endpoints.

This is useful for cases where a halted endpoint is discovered while
completing another command, and the endpoint halt needs to be cleared
with a endpoint reset first.

No functional changes

	Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
Link: https://lore.kernel.org/r/20210129130044.206855-16-mathias.nyman@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit d8ac95001bea683d2088acb3e61613a27b8d2d5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/xhci-ring.c
diff --cc drivers/usb/host/xhci-ring.c
index fdb8f13b8e27,7011b1640a35..000000000000
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@@ -1903,27 -1923,25 +1923,34 @@@ static void xhci_clear_hub_tt_buffer(st
  }
  
  static void xhci_cleanup_halted_endpoint(struct xhci_hcd *xhci,
 -				struct xhci_virt_ep *ep, unsigned int stream_id,
 -				struct xhci_td *td,
 -				enum xhci_ep_reset_type reset_type)
 +		unsigned int slot_id, unsigned int ep_index,
 +		unsigned int stream_id, struct xhci_td *td,
 +		enum xhci_ep_reset_type reset_type)
  {
++<<<<<<< HEAD
 +	struct xhci_virt_ep *ep = &xhci->devs[slot_id]->eps[ep_index];
 +	struct xhci_command *command;
++=======
+ 	unsigned int slot_id = ep->vdev->slot_id;
+ 	int err;
++>>>>>>> d8ac95001bea (xhci: Add xhci_reset_halted_ep() helper function)
  
  	/*
  	 * Avoid resetting endpoint if link is inactive. Can cause host hang.
  	 * Device will be reset soon to recover the link so don't do anything
  	 */
 -	if (ep->vdev->flags & VDEV_PORT_ERROR)
 +	if (xhci->devs[slot_id]->flags & VDEV_PORT_ERROR)
  		return;
  
- 	command = xhci_alloc_command(xhci, false, GFP_ATOMIC);
- 	if (!command)
- 		return;
- 
  	ep->ep_state |= EP_HALTED;
  
++<<<<<<< HEAD
 +	xhci_queue_reset_ep(xhci, command, slot_id, ep_index, reset_type);
++=======
+ 	err = xhci_reset_halted_ep(xhci, slot_id, ep->ep_index, reset_type);
+ 	if (err)
+ 		return;
++>>>>>>> d8ac95001bea (xhci: Add xhci_reset_halted_ep() helper function)
  
  	if (reset_type == EP_HARD_RESET) {
  		ep->ep_state |= EP_HARD_CLEAR_TOGGLE;
* Unmerged path drivers/usb/host/xhci-ring.c
