net: Add SO_BUSY_POLL_BUDGET socket option

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Björn Töpel <bjorn.topel@intel.com>
commit 7c951cafc0cb2e575f1d58677b95ac387ac0a5bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/7c951caf.failed

This option lets a user set a per socket NAPI budget for
busy-polling. If the options is not set, it will use the default of 8.

	Signed-off-by: Björn Töpel <bjorn.topel@intel.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Jakub Kicinski <kuba@kernel.org>
Link: https://lore.kernel.org/bpf/20201130185205.196029-3-bjorn.topel@gmail.com
(cherry picked from commit 7c951cafc0cb2e575f1d58677b95ac387ac0a5bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/alpha/include/uapi/asm/socket.h
#	arch/mips/include/uapi/asm/socket.h
#	arch/parisc/include/uapi/asm/socket.h
#	arch/sparc/include/uapi/asm/socket.h
#	fs/eventpoll.c
#	include/net/busy_poll.h
#	include/net/sock.h
#	include/uapi/asm-generic/socket.h
#	net/core/dev.c
#	net/core/sock.c
diff --cc arch/alpha/include/uapi/asm/socket.h
index 065fb372e355,57420356ce4c..000000000000
--- a/arch/alpha/include/uapi/asm/socket.h
+++ b/arch/alpha/include/uapi/asm/socket.h
@@@ -115,4 -109,46 +115,49 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #define SO_TIMESTAMP_OLD        29
+ #define SO_TIMESTAMPNS_OLD      35
+ #define SO_TIMESTAMPING_OLD     37
+ 
+ #define SO_TIMESTAMP_NEW        63
+ #define SO_TIMESTAMPNS_NEW      64
+ #define SO_TIMESTAMPING_NEW     65
+ 
+ #define SO_RCVTIMEO_NEW         66
+ #define SO_SNDTIMEO_NEW         67
+ 
+ #define SO_DETACH_REUSEPORT_BPF 68
+ 
+ #define SO_PREFER_BUSY_POLL	69
+ #define SO_BUSY_POLL_BUDGET	70
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING         SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/mips/include/uapi/asm/socket.h
index 71370fb3ceef,2d949969313b..000000000000
--- a/arch/mips/include/uapi/asm/socket.h
+++ b/arch/mips/include/uapi/asm/socket.h
@@@ -126,4 -120,46 +126,49 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #define SO_TIMESTAMP_OLD        29
+ #define SO_TIMESTAMPNS_OLD      35
+ #define SO_TIMESTAMPING_OLD     37
+ 
+ #define SO_TIMESTAMP_NEW        63
+ #define SO_TIMESTAMPNS_NEW      64
+ #define SO_TIMESTAMPING_NEW     65
+ 
+ #define SO_RCVTIMEO_NEW         66
+ #define SO_SNDTIMEO_NEW         67
+ 
+ #define SO_DETACH_REUSEPORT_BPF 68
+ 
+ #define SO_PREFER_BUSY_POLL	69
+ #define SO_BUSY_POLL_BUDGET	70
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO             SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO             SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/parisc/include/uapi/asm/socket.h
index 061b9cf2a779,f60904329bbc..000000000000
--- a/arch/parisc/include/uapi/asm/socket.h
+++ b/arch/parisc/include/uapi/asm/socket.h
@@@ -107,4 -101,45 +107,48 @@@
  #define SO_TXTIME		0x4036
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
++=======
+ #define SO_BINDTOIFINDEX	0x4037
+ 
+ #define SO_TIMESTAMP_OLD        0x4012
+ #define SO_TIMESTAMPNS_OLD      0x4013
+ #define SO_TIMESTAMPING_OLD     0x4020
+ 
+ #define SO_TIMESTAMP_NEW        0x4038
+ #define SO_TIMESTAMPNS_NEW      0x4039
+ #define SO_TIMESTAMPING_NEW     0x403A
+ 
+ #define SO_RCVTIMEO_NEW         0x4040
+ #define SO_SNDTIMEO_NEW         0x4041
+ 
+ #define SO_DETACH_REUSEPORT_BPF 0x4042
+ 
+ #define SO_PREFER_BUSY_POLL	0x4043
+ #define SO_BUSY_POLL_BUDGET	0x4044
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING         SO_TIMESTAMPING_OLD
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  #endif /* _UAPI_ASM_SOCKET_H */
diff --cc arch/sparc/include/uapi/asm/socket.h
index 7ea35e5601b6,848a22fbac20..000000000000
--- a/arch/sparc/include/uapi/asm/socket.h
+++ b/arch/sparc/include/uapi/asm/socket.h
@@@ -109,4 -104,45 +109,48 @@@
  #define SO_SECURITY_ENCRYPTION_TRANSPORT	0x5002
  #define SO_SECURITY_ENCRYPTION_NETWORK		0x5004
  
++<<<<<<< HEAD
++=======
+ #define SO_TIMESTAMP_OLD         0x001d
+ #define SO_TIMESTAMPNS_OLD       0x0021
+ #define SO_TIMESTAMPING_OLD      0x0023
+ 
+ #define SO_TIMESTAMP_NEW         0x0046
+ #define SO_TIMESTAMPNS_NEW       0x0042
+ #define SO_TIMESTAMPING_NEW      0x0043
+ 
+ #define SO_RCVTIMEO_NEW          0x0044
+ #define SO_SNDTIMEO_NEW          0x0045
+ 
+ #define SO_DETACH_REUSEPORT_BPF  0x0047
+ 
+ #define SO_PREFER_BUSY_POLL	 0x0048
+ #define SO_BUSY_POLL_BUDGET	 0x0049
+ 
+ #if !defined(__KERNEL__)
+ 
+ 
+ #if __BITS_PER_LONG == 64
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP          SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS        SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING       SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  #endif /* _ASM_SOCKET_H */
diff --cc fs/eventpoll.c
index 6b2959020043,73c346e503d7..000000000000
--- a/fs/eventpoll.c
+++ b/fs/eventpoll.c
@@@ -398,7 -397,8 +398,12 @@@ static void ep_busy_loop(struct eventpo
  	unsigned int napi_id = READ_ONCE(ep->napi_id);
  
  	if ((napi_id >= MIN_NAPI_ID) && net_busy_loop_on())
++<<<<<<< HEAD
 +		napi_busy_loop(napi_id, nonblock ? NULL : ep_busy_loop_end, ep);
++=======
+ 		napi_busy_loop(napi_id, nonblock ? NULL : ep_busy_loop_end, ep, false,
+ 			       BUSY_POLL_BUDGET);
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  }
  
  static inline void ep_reset_busy_poll_napi_id(struct eventpoll *ep)
diff --cc include/net/busy_poll.h
index 60f8490ed317,2f8f51807b83..000000000000
--- a/include/net/busy_poll.h
+++ b/include/net/busy_poll.h
@@@ -55,7 -45,7 +57,11 @@@ bool sk_busy_loop_end(void *p, unsigne
  
  void napi_busy_loop(unsigned int napi_id,
  		    bool (*loop_end)(void *, unsigned long),
++<<<<<<< HEAD
 +		    void *loop_end_arg);
++=======
+ 		    void *loop_end_arg, bool prefer_busy_poll, u16 budget);
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  
  #else /* CONFIG_NET_RX_BUSY_POLL */
  static inline unsigned long net_busy_loop_on(void)
@@@ -117,7 -107,9 +123,13 @@@ static inline void sk_busy_loop(struct 
  	unsigned int napi_id = READ_ONCE(sk->sk_napi_id);
  
  	if (napi_id >= MIN_NAPI_ID)
++<<<<<<< HEAD
 +		napi_busy_loop(napi_id, nonblock ? NULL : sk_busy_loop_end, sk);
++=======
+ 		napi_busy_loop(napi_id, nonblock ? NULL : sk_busy_loop_end, sk,
+ 			       READ_ONCE(sk->sk_prefer_busy_poll),
+ 			       READ_ONCE(sk->sk_busy_poll_budget) ?: BUSY_POLL_BUDGET);
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  #endif
  }
  
diff --cc include/net/sock.h
index af8e0faa1fb6,77ba2c2737db..000000000000
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@@ -290,6 -301,8 +290,11 @@@ struct bpf_local_storage
    *	@sk_ack_backlog: current listen backlog
    *	@sk_max_ack_backlog: listen backlog set in listen()
    *	@sk_uid: user id of owner
++<<<<<<< HEAD
++=======
+   *	@sk_prefer_busy_poll: prefer busypolling over softirq processing
+   *	@sk_busy_poll_budget: napi processing budget when busypolling
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
    *	@sk_priority: %SO_PRIORITY setting
    *	@sk_type: socket type (%SOCK_STREAM, etc)
    *	@sk_protocol: which protocol this socket belongs in this network family
@@@ -474,6 -481,10 +479,13 @@@ struct sock 
  	u32			sk_ack_backlog;
  	u32			sk_max_ack_backlog;
  	kuid_t			sk_uid;
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NET_RX_BUSY_POLL
+ 	u8			sk_prefer_busy_poll;
+ 	u16			sk_busy_poll_budget;
+ #endif
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  	struct pid		*sk_peer_pid;
  	const struct cred	*sk_peer_cred;
  	long			sk_rcvtimeo;
diff --cc include/uapi/asm-generic/socket.h
index 044b8966c2ce,4dcd13d097a9..000000000000
--- a/include/uapi/asm-generic/socket.h
+++ b/include/uapi/asm-generic/socket.h
@@@ -112,6 -106,45 +112,37 @@@
  
  #define SO_BINDTOIFINDEX	62
  
 -#define SO_TIMESTAMP_OLD        29
 -#define SO_TIMESTAMPNS_OLD      35
 -#define SO_TIMESTAMPING_OLD     37
 -
 -#define SO_TIMESTAMP_NEW        63
 -#define SO_TIMESTAMPNS_NEW      64
 -#define SO_TIMESTAMPING_NEW     65
 -
 -#define SO_RCVTIMEO_NEW         66
 -#define SO_SNDTIMEO_NEW         67
 -
  #define SO_DETACH_REUSEPORT_BPF 68
  
++<<<<<<< HEAD
++=======
+ #define SO_PREFER_BUSY_POLL	69
+ #define SO_BUSY_POLL_BUDGET	70
+ 
+ #if !defined(__KERNEL__)
+ 
+ #if __BITS_PER_LONG == 64 || (defined(__x86_64__) && defined(__ILP32__))
+ /* on 64-bit and x32, avoid the ?: operator */
+ #define SO_TIMESTAMP		SO_TIMESTAMP_OLD
+ #define SO_TIMESTAMPNS		SO_TIMESTAMPNS_OLD
+ #define SO_TIMESTAMPING		SO_TIMESTAMPING_OLD
+ 
+ #define SO_RCVTIMEO		SO_RCVTIMEO_OLD
+ #define SO_SNDTIMEO		SO_SNDTIMEO_OLD
+ #else
+ #define SO_TIMESTAMP (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMP_OLD : SO_TIMESTAMP_NEW)
+ #define SO_TIMESTAMPNS (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPNS_OLD : SO_TIMESTAMPNS_NEW)
+ #define SO_TIMESTAMPING (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_TIMESTAMPING_OLD : SO_TIMESTAMPING_NEW)
+ 
+ #define SO_RCVTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_RCVTIMEO_OLD : SO_RCVTIMEO_NEW)
+ #define SO_SNDTIMEO (sizeof(time_t) == sizeof(__kernel_long_t) ? SO_SNDTIMEO_OLD : SO_SNDTIMEO_NEW)
+ #endif
+ 
+ #define SCM_TIMESTAMP           SO_TIMESTAMP
+ #define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+ #define SCM_TIMESTAMPING        SO_TIMESTAMPING
+ 
+ #endif
+ 
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  #endif /* __ASM_GENERIC_SOCKET_H */
diff --cc net/core/dev.c
index 1e7b7a3fd02e,7a1e5936c67f..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -6126,10 -6496,30 +6126,37 @@@ static struct napi_struct *napi_by_id(u
  
  #if defined(CONFIG_NET_RX_BUSY_POLL)
  
++<<<<<<< HEAD
 +#define BUSY_POLL_BUDGET 8
 +
 +static void busy_poll_stop(struct napi_struct *napi, void *have_poll_lock)
 +{
++=======
+ static void __busy_poll_stop(struct napi_struct *napi, bool skip_schedule)
+ {
+ 	if (!skip_schedule) {
+ 		gro_normal_list(napi);
+ 		__napi_schedule(napi);
+ 		return;
+ 	}
+ 
+ 	if (napi->gro_bitmask) {
+ 		/* flush too old packets
+ 		 * If HZ < 1000, flush all packets.
+ 		 */
+ 		napi_gro_flush(napi, HZ >= 1000);
+ 	}
+ 
+ 	gro_normal_list(napi);
+ 	clear_bit(NAPI_STATE_SCHED, &napi->state);
+ }
+ 
+ static void busy_poll_stop(struct napi_struct *napi, void *have_poll_lock, bool prefer_busy_poll,
+ 			   u16 budget)
+ {
+ 	bool skip_schedule = false;
+ 	unsigned long timeout;
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  	int rc;
  
  	/* Busy polling means there is a high chance device driver hard irq
@@@ -6149,17 -6539,30 +6176,33 @@@
  	/* All we really want here is to re-enable device interrupts.
  	 * Ideally, a new ndo_busy_poll_stop() could avoid another round.
  	 */
++<<<<<<< HEAD
 +	rc = napi->poll(napi, BUSY_POLL_BUDGET);
 +	trace_napi_poll(napi, rc, BUSY_POLL_BUDGET);
 +	netpoll_poll_unlock(have_poll_lock);
 +	if (rc == BUSY_POLL_BUDGET)
 +		__napi_schedule(napi);
++=======
+ 	rc = napi->poll(napi, budget);
+ 	/* We can't gro_normal_list() here, because napi->poll() might have
+ 	 * rearmed the napi (napi_complete_done()) in which case it could
+ 	 * already be running on another CPU.
+ 	 */
+ 	trace_napi_poll(napi, rc, budget);
+ 	netpoll_poll_unlock(have_poll_lock);
+ 	if (rc == budget)
+ 		__busy_poll_stop(napi, skip_schedule);
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  	local_bh_enable();
  }
  
  void napi_busy_loop(unsigned int napi_id,
  		    bool (*loop_end)(void *, unsigned long),
++<<<<<<< HEAD
 +		    void *loop_end_arg)
++=======
+ 		    void *loop_end_arg, bool prefer_busy_poll, u16 budget)
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  {
  	unsigned long start_time = loop_end ? busy_loop_current_time() : 0;
  	int (*napi_poll)(struct napi_struct *napi, int budget);
@@@ -6196,8 -6604,10 +6239,14 @@@ restart
  			have_poll_lock = netpoll_poll_lock(napi);
  			napi_poll = napi->poll;
  		}
++<<<<<<< HEAD
 +		work = napi_poll(napi, BUSY_POLL_BUDGET);
 +		trace_napi_poll(napi, work, BUSY_POLL_BUDGET);
++=======
+ 		work = napi_poll(napi, budget);
+ 		trace_napi_poll(napi, work, budget);
+ 		gro_normal_list(napi);
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  count:
  		if (work > 0)
  			__NET_ADD_STATS(dev_net(napi->dev),
@@@ -6209,7 -6619,7 +6258,11 @@@
  
  		if (unlikely(need_resched())) {
  			if (napi_poll)
++<<<<<<< HEAD
 +				busy_poll_stop(napi, have_poll_lock);
++=======
+ 				busy_poll_stop(napi, have_poll_lock, prefer_busy_poll, budget);
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  			preempt_enable();
  			rcu_read_unlock();
  			cond_resched();
@@@ -6220,7 -6630,7 +6273,11 @@@
  		cpu_relax();
  	}
  	if (napi_poll)
++<<<<<<< HEAD
 +		busy_poll_stop(napi, have_poll_lock);
++=======
+ 		busy_poll_stop(napi, have_poll_lock, prefer_busy_poll, budget);
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  	preempt_enable();
  out:
  	rcu_read_unlock();
diff --cc net/core/sock.c
index 72337c8d4eb6,d422a6808405..000000000000
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@@ -1147,6 -1159,22 +1147,25 @@@ set_rcvbuf
  				sk->sk_ll_usec = val;
  		}
  		break;
++<<<<<<< HEAD
++=======
+ 	case SO_PREFER_BUSY_POLL:
+ 		if (valbool && !capable(CAP_NET_ADMIN))
+ 			ret = -EPERM;
+ 		else
+ 			WRITE_ONCE(sk->sk_prefer_busy_poll, valbool);
+ 		break;
+ 	case SO_BUSY_POLL_BUDGET:
+ 		if (val > READ_ONCE(sk->sk_busy_poll_budget) && !capable(CAP_NET_ADMIN)) {
+ 			ret = -EPERM;
+ 		} else {
+ 			if (val < 0 || val > U16_MAX)
+ 				ret = -EINVAL;
+ 			else
+ 				WRITE_ONCE(sk->sk_busy_poll_budget, val);
+ 		}
+ 		break;
++>>>>>>> 7c951cafc0cb (net: Add SO_BUSY_POLL_BUDGET socket option)
  #endif
  
  	case SO_MAX_PACING_RATE:
* Unmerged path arch/alpha/include/uapi/asm/socket.h
* Unmerged path arch/mips/include/uapi/asm/socket.h
* Unmerged path arch/parisc/include/uapi/asm/socket.h
* Unmerged path arch/sparc/include/uapi/asm/socket.h
* Unmerged path fs/eventpoll.c
* Unmerged path include/net/busy_poll.h
* Unmerged path include/net/sock.h
* Unmerged path include/uapi/asm-generic/socket.h
* Unmerged path net/core/dev.c
* Unmerged path net/core/sock.c
