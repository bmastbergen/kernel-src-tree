ionic: simplify tx clean

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Shannon Nelson <snelson@pensando.io>
commit 19fef72cb4ba4c3c25bf89f4e73fdcefb9fd7bd2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/19fef72c.failed

The descriptor mappings are set up the same way whether
or not it is a TSO, so we don't need separate logic for
the two cases.

	Signed-off-by: Shannon Nelson <snelson@pensando.io>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 19fef72cb4ba4c3c25bf89f4e73fdcefb9fd7bd2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/pensando/ionic/ionic_txrx.c
diff --cc drivers/net/ethernet/pensando/ionic/ionic_txrx.c
index 8369e1e143a1,f841ccb5adfd..000000000000
--- a/drivers/net/ethernet/pensando/ionic/ionic_txrx.c
+++ b/drivers/net/ethernet/pensando/ionic/ionic_txrx.c
@@@ -636,33 -654,20 +636,49 @@@ static void ionic_tx_clean(struct ionic
  			   struct ionic_cq_info *cq_info,
  			   void *cb_arg)
  {
++<<<<<<< HEAD
 +	struct ionic_txq_sg_desc *sg_desc = desc_info->sg_desc;
 +	struct ionic_txq_sg_elem *elem = sg_desc->elems;
 +	struct ionic_tx_stats *stats = q_to_tx_stats(q);
 +	struct ionic_txq_desc *desc = desc_info->desc;
 +	struct device *dev = q->lif->ionic->dev;
 +	u8 opcode, flags, nsge;
++=======
+ 	struct ionic_buf_info *buf_info = desc_info->bufs;
+ 	struct ionic_tx_stats *stats = q_to_tx_stats(q);
+ 	struct device *dev = q->dev;
++>>>>>>> 19fef72cb4ba (ionic: simplify tx clean)
  	u16 queue_index;
  	unsigned int i;
- 	u64 addr;
  
++<<<<<<< HEAD
 +	decode_txq_desc_cmd(le64_to_cpu(desc->cmd),
 +			    &opcode, &flags, &nsge, &addr);
 +
 +	/* use unmap_single only if either this is not TSO,
 +	 * or this is first descriptor of a TSO
 +	 */
 +	if (opcode != IONIC_TXQ_DESC_OPCODE_TSO ||
 +	    flags & IONIC_TXQ_DESC_FLAG_TSO_SOT)
 +		dma_unmap_single(dev, (dma_addr_t)addr,
 +				 le16_to_cpu(desc->len), DMA_TO_DEVICE);
 +	else
 +		dma_unmap_page(dev, (dma_addr_t)addr,
 +			       le16_to_cpu(desc->len), DMA_TO_DEVICE);
 +
 +	for (i = 0; i < nsge; i++, elem++)
 +		dma_unmap_page(dev, (dma_addr_t)le64_to_cpu(elem->addr),
 +			       le16_to_cpu(elem->len), DMA_TO_DEVICE);
++=======
+ 	if (desc_info->nbufs) {
+ 		dma_unmap_single(dev, (dma_addr_t)buf_info->dma_addr,
+ 				 buf_info->len, DMA_TO_DEVICE);
+ 		buf_info++;
+ 		for (i = 1; i < desc_info->nbufs; i++, buf_info++)
+ 			dma_unmap_page(dev, (dma_addr_t)buf_info->dma_addr,
+ 				       buf_info->len, DMA_TO_DEVICE);
+ 	}
++>>>>>>> 19fef72cb4ba (ionic: simplify tx clean)
  
  	if (cb_arg) {
  		struct sk_buff *skb = cb_arg;
* Unmerged path drivers/net/ethernet/pensando/ionic/ionic_txrx.c
