crypto: lib/sha256 - add sha256() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Eric Biggers <ebiggers@google.com>
commit 9ea9c58b40a441a0babef8c615acedcfb3733919
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/9ea9c58b.failed

Add a function sha256() which computes a SHA-256 digest in one step,
combining sha256_init() + sha256_update() + sha256_final().

This is similar to how we also have blake2s().

	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Tested-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Eric Biggers <ebiggers@google.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 9ea9c58b40a441a0babef8c615acedcfb3733919)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/crypto/sha.h
#	lib/crypto/sha256.c
diff --cc include/crypto/sha.h
index b91a4b68b661,4ff3da816630..000000000000
--- a/include/crypto/sha.h
+++ b/include/crypto/sha.h
@@@ -130,14 -144,12 +130,21 @@@ static inline int sha256_init(struct sh
  	sctx->state[6] = SHA256_H6;
  	sctx->state[7] = SHA256_H7;
  	sctx->count = 0;
++<<<<<<< HEAD
++=======
+ }
+ void sha256_update(struct sha256_state *sctx, const u8 *data, unsigned int len);
+ void sha256_final(struct sha256_state *sctx, u8 *out);
+ void sha256(const u8 *data, unsigned int len, u8 *out);
++>>>>>>> 9ea9c58b40a4 (crypto: lib/sha256 - add sha256() function)
 +
 +	return 0;
 +}
 +extern int sha256_update(struct sha256_state *sctx, const u8 *input,
 +			 unsigned int length);
 +extern int sha256_final(struct sha256_state *sctx, u8 *hash);
  
 -static inline void sha224_init(struct sha256_state *sctx)
 +static inline int sha224_init(struct sha256_state *sctx)
  {
  	sctx->state[0] = SHA224_H0;
  	sctx->state[1] = SHA224_H1;
diff --cc lib/crypto/sha256.c
index 443d4bb1c0dc,2321f6cb322f..000000000000
--- a/lib/crypto/sha256.c
+++ b/lib/crypto/sha256.c
@@@ -281,8 -274,20 +281,23 @@@ int sha256_final(struct sha256_state *s
  }
  EXPORT_SYMBOL(sha256_final);
  
 -void sha224_final(struct sha256_state *sctx, u8 *out)
 +int sha224_final(struct sha256_state *sctx, u8 *out)
  {
 -	__sha256_final(sctx, out, 7);
 +	return __sha256_final(sctx, out, 7);
  }
  EXPORT_SYMBOL(sha224_final);
++<<<<<<< HEAD
++=======
+ 
+ void sha256(const u8 *data, unsigned int len, u8 *out)
+ {
+ 	struct sha256_state sctx;
+ 
+ 	sha256_init(&sctx);
+ 	sha256_update(&sctx, data, len);
+ 	sha256_final(&sctx, out);
+ }
+ EXPORT_SYMBOL(sha256);
+ 
+ MODULE_LICENSE("GPL");
++>>>>>>> 9ea9c58b40a4 (crypto: lib/sha256 - add sha256() function)
* Unmerged path include/crypto/sha.h
* Unmerged path lib/crypto/sha256.c
