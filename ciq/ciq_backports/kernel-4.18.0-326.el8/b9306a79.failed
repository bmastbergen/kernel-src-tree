mm: filemap: clear idle flag for writes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Yang Shi <yang.shi@linux.alibaba.com>
commit b9306a796cad8a65f4d21779524e73fe0745bae1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/b9306a79.failed

Since commit bbddabe2e436aa ("mm: filemap: only do access activations on
reads"), mark_page_accessed() is called for reads only.  But the idle flag
is cleared by mark_page_accessed() so the idle flag won't get cleared if
the page is write accessed only.

Basically idle page tracking is used to estimate workingset size of
workload, noticeable size of workingset might be missed if the idle flag
is not maintained correctly.

It seems good enough to just clear idle flag for write operations.

Fixes: bbddabe2e436 ("mm: filemap: only do access activations on reads")
	Reported-by: Gang Deng <gavin.dg@linux.alibaba.com>
	Signed-off-by: Yang Shi <yang.shi@linux.alibaba.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Rik van Riel <riel@surriel.com>
Link: http://lkml.kernel.org/r/1593020612-13051-1-git-send-email-yang.shi@linux.alibaba.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b9306a796cad8a65f4d21779524e73fe0745bae1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/filemap.c
diff --cc mm/filemap.c
index 7802a4d3e44b,4c8e64d104bd..000000000000
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@@ -39,8 -38,10 +39,13 @@@
  #include <linux/cleancache.h>
  #include <linux/shmem_fs.h>
  #include <linux/rmap.h>
 -#include <linux/delayacct.h>
 +#include RH_KABI_HIDE_INCLUDE(<linux/delayacct.h>)
  #include <linux/psi.h>
++<<<<<<< HEAD
++=======
+ #include <linux/ramfs.h>
+ #include <linux/page_idle.h>
++>>>>>>> b9306a796cad (mm: filemap: clear idle flag for writes)
  #include "internal.h"
  
  #define CREATE_TRACE_POINTS
@@@ -1664,11 -1685,16 +1669,16 @@@ repeat
  			put_page(page);
  			goto repeat;
  		}
 -		VM_BUG_ON_PAGE(page->index != index, page);
 +		VM_BUG_ON_PAGE(page->index != offset, page);
  	}
  
 -	if (fgp_flags & FGP_ACCESSED)
 +	if (page && (fgp_flags & FGP_ACCESSED))
  		mark_page_accessed(page);
+ 	else if (fgp_flags & FGP_WRITE) {
+ 		/* Clear idle flag for buffer write */
+ 		if (page_is_idle(page))
+ 			clear_page_idle(page);
+ 	}
  
  no_page:
  	if (!page && (fgp_flags & FGP_CREAT)) {
* Unmerged path mm/filemap.c
