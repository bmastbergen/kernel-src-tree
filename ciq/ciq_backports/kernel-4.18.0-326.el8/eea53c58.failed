iommu/vt-d: Remove WO permissions on second-level paging entries

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Lu Baolu <baolu.lu@linux.intel.com>
commit eea53c5816889ee8b64544fa2e9311a81184ff9c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/eea53c58.failed

When the first level page table is used for IOVA translation, it only
supports Read-Only and Read-Write permissions. The Write-Only permission
is not supported as the PRESENT bit (implying Read permission) should
always set. When using second level, we still give separate permissions
that allows WriteOnly which seems inconsistent and awkward. We want to
have consistent behavior. After moving to 1st level, we don't want things
to work sometimes, and break if we use 2nd level for the same mappings.
Hence remove this configuration.

	Suggested-by: Ashok Raj <ashok.raj@intel.com>
Fixes: b802d070a52a1 ("iommu/vt-d: Use iova over first level")
	Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
Link: https://lore.kernel.org/r/20210320025415.641201-3-baolu.lu@linux.intel.com
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit eea53c5816889ee8b64544fa2e9311a81184ff9c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/iommu.c
diff --cc drivers/iommu/intel/iommu.c
index daeb2f503735,b0f901ee6358..000000000000
--- a/drivers/iommu/intel/iommu.c
+++ b/drivers/iommu/intel/iommu.c
@@@ -2366,14 -2312,19 +2366,20 @@@ static int __domain_mapping(struct dmar
  		return -EINVAL;
  
  	attr = prot & (DMA_PTE_READ | DMA_PTE_WRITE | DMA_PTE_SNP);
++<<<<<<< HEAD
 +	if (domain_use_first_level(domain))
 +		attr |= DMA_FL_PTE_PRESENT | DMA_FL_PTE_XD | DMA_FL_PTE_US;
++=======
+ 	attr |= DMA_FL_PTE_PRESENT;
+ 	if (domain_use_first_level(domain)) {
+ 		attr |= DMA_FL_PTE_XD | DMA_FL_PTE_US;
++>>>>>>> eea53c581688 (iommu/vt-d: Remove WO permissions on second-level paging entries)
  
 -		if (domain->domain.type == IOMMU_DOMAIN_DMA) {
 -			attr |= DMA_FL_PTE_ACCESS;
 -			if (prot & DMA_PTE_WRITE)
 -				attr |= DMA_FL_PTE_DIRTY;
 -		}
 +	if (!sg) {
 +		sg_res = nr_pages;
 +		pteval = ((phys_addr_t)phys_pfn << VTD_PAGE_SHIFT) | attr;
  	}
  
 -	pteval = ((phys_addr_t)phys_pfn << VTD_PAGE_SHIFT) | attr;
 -
  	while (nr_pages > 0) {
  		uint64_t tmp;
  
* Unmerged path drivers/iommu/intel/iommu.c
