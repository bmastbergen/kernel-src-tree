perf build: Support build BPF skeletons with perf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Song Liu <songliubraving@fb.com>
commit fbcdaa1908e8f61aa56c71a1db9a9deb72110a9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/fbcdaa19.failed

BPF programs are useful in perf to profile BPF programs.

BPF skeleton is by far the easiest way to write BPF tools. Enable
building BPF skeletons in util/bpf_skel. A dummy bpf skeleton is added.
More bpf skeletons will be added for different use cases.

	Signed-off-by: Song Liu <songliubraving@fb.com>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Acked-by: Jiri Olsa <jolsa@redhat.com>
	Acked-by: Namhyung Kim <namhyung@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: kernel-team@fb.com
Link: http://lore.kernel.org/lkml/20201229214214.3413833-3-songliubraving@fb.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit fbcdaa1908e8f61aa56c71a1db9a9deb72110a9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.perf
diff --cc tools/perf/Makefile.perf
index deed8b8a5f4b,d182a2dbb9bb..000000000000
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@@ -177,6 -180,8 +179,11 @@@ LD += $(EXTRA_LDFLAGS
  HOSTCC  ?= gcc
  HOSTLD  ?= ld
  HOSTAR  ?= ar
++<<<<<<< HEAD
++=======
+ CLANG   ?= clang
+ LLVM_STRIP ?= llvm-strip
++>>>>>>> fbcdaa1908e8 (perf build: Support build BPF skeletons with perf)
  
  PKG_CONFIG = $(CROSS_COMPILE)pkg-config
  LLVM_CONFIG ?= llvm-config
@@@ -727,7 -738,9 +734,13 @@@ prepare: $(OUTPUT)PERF-VERSION-FILE $(O
  	$(x86_arch_MSRs_array) \
  	$(x86_arch_prctl_code_array) \
  	$(rename_flags_array) \
++<<<<<<< HEAD
 +	$(arch_errno_name_array)
++=======
+ 	$(arch_errno_name_array) \
+ 	$(sync_file_range_arrays) \
+ 	bpf-skel
++>>>>>>> fbcdaa1908e8 (perf build: Support build BPF skeletons with perf)
  
  $(OUTPUT)%.o: %.c prepare FORCE
  	$(Q)$(MAKE) -f $(srctree)/tools/build/Makefile.build dir=$(build-dir) $@
diff --git a/tools/build/Makefile.feature b/tools/build/Makefile.feature
index 80868f186db0..8e9c5ec6e422 100644
--- a/tools/build/Makefile.feature
+++ b/tools/build/Makefile.feature
@@ -98,7 +98,9 @@ FEATURE_TESTS_EXTRA :=                  \
          clang                          \
          libbpf                         \
          libpfm4                        \
-         libdebuginfod
+         libdebuginfod			\
+         clang-bpf-co-re
+
 
 FEATURE_TESTS ?= $(FEATURE_TESTS_BASIC)
 
diff --git a/tools/perf/Makefile.config b/tools/perf/Makefile.config
index 02688ae2aa03..480c9f488408 100644
--- a/tools/perf/Makefile.config
+++ b/tools/perf/Makefile.config
@@ -616,6 +616,15 @@ ifndef NO_LIBBPF
   endif
 endif
 
+ifdef BUILD_BPF_SKEL
+  $(call feature_check,clang-bpf-co-re)
+  ifeq ($(feature-clang-bpf-co-re), 0)
+    dummy := $(error Error: clang too old. Please install recent clang)
+  endif
+  $(call detected,CONFIG_PERF_BPF_SKEL)
+  CFLAGS += -DHAVE_BPF_SKEL
+endif
+
 dwarf-post-unwind := 1
 dwarf-post-unwind-text := BUG
 
* Unmerged path tools/perf/Makefile.perf
diff --git a/tools/perf/util/bpf_skel/.gitignore b/tools/perf/util/bpf_skel/.gitignore
new file mode 100644
index 000000000000..5263e9e6c5d8
--- /dev/null
+++ b/tools/perf/util/bpf_skel/.gitignore
@@ -0,0 +1,3 @@
+# SPDX-License-Identifier: GPL-2.0-only
+.tmp
+*.skel.h
\ No newline at end of file
diff --git a/tools/scripts/Makefile.include b/tools/scripts/Makefile.include
index a7974638561c..2da3b37f1c6b 100644
--- a/tools/scripts/Makefile.include
+++ b/tools/scripts/Makefile.include
@@ -117,6 +117,7 @@ ifneq ($(silent),1)
 			 $(MAKE) $(PRINT_DIR) -C $$subdir
 	QUIET_FLEX     = @echo '  FLEX     '$@;
 	QUIET_BISON    = @echo '  BISON    '$@;
+	QUIET_GENSKEL  = @echo '  GEN-SKEL '$@;
 
 	descend = \
 		+@echo	       '  DESCEND  '$(1); \
