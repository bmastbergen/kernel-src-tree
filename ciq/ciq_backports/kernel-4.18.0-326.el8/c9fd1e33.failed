net/mlx5e: Refactor mlx5e_netdev_init/cleanup to mlx5e_priv_init/cleanup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Roi Dayan <roid@nvidia.com>
commit c9fd1e33e989d14fe695c33bf8c7b935b3bea111
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/c9fd1e33.failed

We actually initialize priv and not netdev. The only call to
set netdev carrier will be moved in the following commit.

	Signed-off-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit c9fd1e33e989d14fe695c33bf8c7b935b3bea111)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 2e6376372a67,8cc80c31341f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -1081,15 -1154,18 +1081,30 @@@ int mlx5e_ethtool_set_pauseparam(struc
  				 struct ethtool_pauseparam *pauseparam);
  
  /* mlx5e generic netdev management API */
++<<<<<<< HEAD
 +int mlx5e_netdev_init(struct net_device *netdev,
 +		      struct mlx5e_priv *priv,
 +		      struct mlx5_core_dev *mdev,
 +		      const struct mlx5e_profile *profile,
 +		      void *ppriv);
 +void mlx5e_netdev_cleanup(struct net_device *netdev, struct mlx5e_priv *priv);
 +struct net_device*
 +mlx5e_create_netdev(struct mlx5_core_dev *mdev, const struct mlx5e_profile *profile,
 +		    int nch, void *ppriv);
++=======
+ static inline unsigned int
+ mlx5e_calc_max_nch(struct mlx5e_priv *priv, const struct mlx5e_profile *profile)
+ {
+ 	return priv->netdev->num_rx_queues / max_t(u8, profile->rq_groups, 1);
+ }
+ 
+ int mlx5e_priv_init(struct mlx5e_priv *priv,
+ 		    struct net_device *netdev,
+ 		    struct mlx5_core_dev *mdev);
+ void mlx5e_priv_cleanup(struct mlx5e_priv *priv);
+ struct net_device *
+ mlx5e_create_netdev(struct mlx5_core_dev *mdev, unsigned int txqs, unsigned int rxqs);
++>>>>>>> c9fd1e33e989 (net/mlx5e: Refactor mlx5e_netdev_init/cleanup to mlx5e_priv_init/cleanup)
  int mlx5e_attach_netdev(struct mlx5e_priv *priv);
  void mlx5e_detach_netdev(struct mlx5e_priv *priv);
  void mlx5e_destroy_netdev(struct mlx5e_priv *priv);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 4b7d83e6ef25,177e076f6cce..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -5282,14 -5457,12 +5282,20 @@@ static const struct mlx5e_profile mlx5e
  };
  
  /* mlx5e generic netdev management API (move to en_common.c) */
++<<<<<<< HEAD
 +
 +/* mlx5e_netdev_init/cleanup must be called from profile->init/cleanup callbacks */
 +int mlx5e_netdev_init(struct net_device *netdev,
 +		      struct mlx5e_priv *priv,
 +		      struct mlx5_core_dev *mdev,
 +		      const struct mlx5e_profile *profile,
 +		      void *ppriv)
++=======
+ int mlx5e_priv_init(struct mlx5e_priv *priv,
+ 		    struct net_device *netdev,
+ 		    struct mlx5_core_dev *mdev)
++>>>>>>> c9fd1e33e989 (net/mlx5e: Refactor mlx5e_netdev_init/cleanup to mlx5e_priv_init/cleanup)
  {
 -	memset(priv, 0, sizeof(*priv));
 -
  	/* priv init */
  	priv->mdev        = mdev;
  	priv->netdev      = netdev;
@@@ -5323,16 -5494,20 +5329,16 @@@ err_free_cpumask
  	return -ENOMEM;
  }
  
- void mlx5e_netdev_cleanup(struct net_device *netdev, struct mlx5e_priv *priv)
+ void mlx5e_priv_cleanup(struct mlx5e_priv *priv)
  {
 -	int i;
 -
  	destroy_workqueue(priv->wq);
  	free_cpumask_var(priv->scratchpad.cpumask);
 -
 -	for (i = 0; i < priv->htb.max_qos_sqs; i++)
 -		kfree(priv->htb.qos_sq_stats[i]);
 -	kvfree(priv->htb.qos_sq_stats);
  }
  
 -struct net_device *
 -mlx5e_create_netdev(struct mlx5_core_dev *mdev, unsigned int txqs, unsigned int rxqs)
 +struct net_device *mlx5e_create_netdev(struct mlx5_core_dev *mdev,
 +				       const struct mlx5e_profile *profile,
 +				       int nch,
 +				       void *ppriv)
  {
  	struct net_device *netdev;
  	int err;
@@@ -5345,11 -5518,12 +5351,17 @@@
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	err = profile->init(mdev, netdev, profile, ppriv);
 +	if (err) {
 +		mlx5_core_err(mdev, "failed to init mlx5e profile %d\n", err);
++=======
+ 	err = mlx5e_priv_init(netdev_priv(netdev), netdev, mdev);
+ 	if (err) {
+ 		mlx5_core_err(mdev, "mlx5e_priv_init failed, err=%d\n", err);
++>>>>>>> c9fd1e33e989 (net/mlx5e: Refactor mlx5e_netdev_init/cleanup to mlx5e_priv_init/cleanup)
  		goto err_free_netdev;
  	}
 -	dev_net_set(netdev, mlx5_core_net(mdev));
  
  	return netdev;
  
@@@ -5432,13 -5617,75 +5444,84 @@@ void mlx5e_detach_netdev(struct mlx5e_p
  	cancel_work_sync(&priv->update_stats_work);
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ mlx5e_netdev_attach_profile(struct mlx5e_priv *priv,
+ 			    const struct mlx5e_profile *new_profile, void *new_ppriv)
+ {
+ 	struct net_device *netdev = priv->netdev;
+ 	struct mlx5_core_dev *mdev = priv->mdev;
+ 	int err;
+ 
+ 	err = mlx5e_priv_init(priv, netdev, mdev);
+ 	if (err) {
+ 		mlx5_core_err(mdev, "mlx5e_priv_init failed, err=%d\n", err);
+ 		return err;
+ 	}
+ 	priv->profile = new_profile;
+ 	priv->ppriv = new_ppriv;
+ 	err = new_profile->init(priv->mdev, priv->netdev);
+ 	if (err)
+ 		return err;
+ 	err = mlx5e_attach_netdev(priv);
+ 	if (err)
+ 		new_profile->cleanup(priv);
+ 	return err;
+ }
+ 
+ int mlx5e_netdev_change_profile(struct mlx5e_priv *priv,
+ 				const struct mlx5e_profile *new_profile, void *new_ppriv)
+ {
+ 	unsigned int new_max_nch = mlx5e_calc_max_nch(priv, new_profile);
+ 	const struct mlx5e_profile *orig_profile = priv->profile;
+ 	void *orig_ppriv = priv->ppriv;
+ 	int err, rollback_err;
+ 
+ 	/* sanity */
+ 	if (new_max_nch != priv->max_nch) {
+ 		netdev_warn(priv->netdev,
+ 			    "%s: Replacing profile with different max channles\n",
+ 			    __func__);
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* cleanup old profile */
+ 	mlx5e_detach_netdev(priv);
+ 	priv->profile->cleanup(priv);
+ 	mlx5e_priv_cleanup(priv);
+ 
+ 	err = mlx5e_netdev_attach_profile(priv, new_profile, new_ppriv);
+ 	if (err) { /* roll back to original profile */
+ 		netdev_warn(priv->netdev, "%s: new profile init failed, %d\n",
+ 			    __func__, err);
+ 		goto rollback;
+ 	}
+ 
+ 	return 0;
+ 
+ rollback:
+ 	rollback_err = mlx5e_netdev_attach_profile(priv, orig_profile, orig_ppriv);
+ 	if (rollback_err) {
+ 		netdev_err(priv->netdev,
+ 			   "%s: failed to rollback to orig profile, %d\n",
+ 			   __func__, rollback_err);
+ 	}
+ 	return err;
+ }
+ 
++>>>>>>> c9fd1e33e989 (net/mlx5e: Refactor mlx5e_netdev_init/cleanup to mlx5e_priv_init/cleanup)
  void mlx5e_destroy_netdev(struct mlx5e_priv *priv)
  {
 +	const struct mlx5e_profile *profile = priv->profile;
  	struct net_device *netdev = priv->netdev;
  
++<<<<<<< HEAD
 +	if (profile->cleanup)
 +		profile->cleanup(priv);
++=======
+ 	mlx5e_priv_cleanup(priv);
++>>>>>>> c9fd1e33e989 (net/mlx5e: Refactor mlx5e_netdev_init/cleanup to mlx5e_priv_init/cleanup)
  	free_netdev(netdev);
  }
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
index 97b5fcb1f406,8641bd9bbb53..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
@@@ -753,7 -744,14 +753,18 @@@ static int mlx5_rdma_setup_rn(struct ib
  			goto destroy_ht;
  	}
  
++<<<<<<< HEAD
 +	prof->init(mdev, netdev, prof, ipriv);
++=======
+ 	err = mlx5e_priv_init(epriv, netdev, mdev);
+ 	if (err)
+ 		goto destroy_mdev_resources;
+ 
+ 	epriv->profile = prof;
+ 	epriv->ppriv = ipriv;
+ 
+ 	prof->init(mdev, netdev);
++>>>>>>> c9fd1e33e989 (net/mlx5e: Refactor mlx5e_netdev_init/cleanup to mlx5e_priv_init/cleanup)
  
  	err = mlx5e_attach_netdev(epriv);
  	if (err)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib/ipoib.c
