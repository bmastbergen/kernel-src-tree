iommu/vt-d: Use Real PCI DMA device for IRTE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Jon Derrick <jonathan.derrick@intel.com>
commit 9b4a824b889e1cc5e0430b80e40cfe9838c5b5f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/9b4a824b.failed

VMD retransmits child device MSI-X with the VMD endpoint's requester-id.
In order to support direct interrupt remapping of VMD child devices,
ensure that the IRTE is programmed with the VMD endpoint's requester-id
using pci_real_dma_dev().

Link: https://lore.kernel.org/r/20210210161315.316097-2-jonathan.derrick@intel.com
	Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
	Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
	Acked-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 9b4a824b889e1cc5e0430b80e40cfe9838c5b5f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/intel/irq_remapping.c
diff --cc drivers/iommu/intel/irq_remapping.c
index f112dcafd2ae,75429a5373ec..000000000000
--- a/drivers/iommu/intel/irq_remapping.c
+++ b/drivers/iommu/intel/irq_remapping.c
@@@ -1286,42 -1273,16 +1286,47 @@@ static void intel_irq_remapping_prepare
  			irte->trigger_mode, irte->dlvry_mode,
  			irte->avail, irte->vector, irte->dest_id,
  			irte->sid, irte->sq, irte->svt);
 -		sub_handle = info->ioapic.pin;
 +
 +		entry = (struct IR_IO_APIC_route_entry *)info->ioapic_entry;
 +		info->ioapic_entry = NULL;
 +		memset(entry, 0, sizeof(*entry));
 +		entry->index2	= (index >> 15) & 0x1;
 +		entry->zero	= 0;
 +		entry->format	= 1;
 +		entry->index	= (index & 0x7fff);
 +		/*
 +		 * IO-APIC RTE will be configured with virtual vector.
 +		 * irq handler will do the explicit EOI to the io-apic.
 +		 */
 +		entry->vector	= info->ioapic_pin;
 +		entry->mask	= 0;			/* enable IRQ */
 +		entry->trigger	= info->ioapic_trigger;
 +		entry->polarity	= info->ioapic_polarity;
 +		if (info->ioapic_trigger)
 +			entry->mask = 1; /* Mask level triggered irqs. */
  		break;
 +
  	case X86_IRQ_ALLOC_TYPE_HPET:
 -		set_hpet_sid(irte, info->devid);
 -		break;
  	case X86_IRQ_ALLOC_TYPE_PCI_MSI:
  	case X86_IRQ_ALLOC_TYPE_PCI_MSIX:
++<<<<<<< HEAD
 +		if (info->type == X86_IRQ_ALLOC_TYPE_HPET)
 +			set_hpet_sid(irte, info->hpet_id);
 +		else
 +			set_msi_sid(irte, info->msi_dev);
 +
 +		msg->address_hi = MSI_ADDR_BASE_HI;
 +		msg->data = sub_handle;
 +		msg->address_lo = MSI_ADDR_BASE_LO | MSI_ADDR_IR_EXT_INT |
 +				  MSI_ADDR_IR_SHV |
 +				  MSI_ADDR_IR_INDEX1(index) |
 +				  MSI_ADDR_IR_INDEX2(index);
++=======
+ 		set_msi_sid(irte,
+ 			    pci_real_dma_dev(msi_desc_to_pci_dev(info->desc)));
++>>>>>>> 9b4a824b889e (iommu/vt-d: Use Real PCI DMA device for IRTE)
  		break;
 +
  	default:
  		BUG_ON(1);
  		break;
* Unmerged path drivers/iommu/intel/irq_remapping.c
