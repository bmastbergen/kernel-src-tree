ACPI: property: Make acpi_node_prop_read() static

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 325aa816143228a0b3472074ffb50d55ac3f04fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/325aa816.failed

There is no users outside of property.c. No need to export
acpi_node_prop_read(), hence make it static.

Fixes: 3708184afc77 ("device property: Move FW type specific functionality to FW specific files")
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 325aa816143228a0b3472074ffb50d55ac3f04fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/acpi.h
diff --cc include/linux/acpi.h
index 60751a15bb98,dc6e1f39dc6f..000000000000
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@@ -1131,14 -1114,6 +1131,17 @@@ acpi_data_add_props(struct acpi_device_
  
  int acpi_node_prop_get(const struct fwnode_handle *fwnode, const char *propname,
  		       void **valptr);
++<<<<<<< HEAD
 +int acpi_dev_prop_read_single(struct acpi_device *adev,
 +			      const char *propname, enum dev_prop_type proptype,
 +			      void *val);
 +int acpi_node_prop_read(const struct fwnode_handle *fwnode,
 +			const char *propname, enum dev_prop_type proptype,
 +			void *val, size_t nval);
 +int acpi_dev_prop_read(const struct acpi_device *adev, const char *propname,
 +		       enum dev_prop_type proptype, void *val, size_t nval);
++=======
++>>>>>>> 325aa8161432 (ACPI: property: Make acpi_node_prop_read() static)
  
  struct fwnode_handle *acpi_get_next_subnode(const struct fwnode_handle *fwnode,
  					    struct fwnode_handle *child);
@@@ -1229,37 -1215,6 +1232,40 @@@ static inline int acpi_node_prop_get(co
  	return -ENXIO;
  }
  
++<<<<<<< HEAD
 +static inline int acpi_dev_prop_get(const struct acpi_device *adev,
 +				    const char *propname,
 +				    void **valptr)
 +{
 +	return -ENXIO;
 +}
 +
 +static inline int acpi_dev_prop_read_single(const struct acpi_device *adev,
 +					    const char *propname,
 +					    enum dev_prop_type proptype,
 +					    void *val)
 +{
 +	return -ENXIO;
 +}
 +
 +static inline int acpi_node_prop_read(const struct fwnode_handle *fwnode,
 +				      const char *propname,
 +				      enum dev_prop_type proptype,
 +				      void *val, size_t nval)
 +{
 +	return -ENXIO;
 +}
 +
 +static inline int acpi_dev_prop_read(const struct acpi_device *adev,
 +				     const char *propname,
 +				     enum dev_prop_type proptype,
 +				     void *val, size_t nval)
 +{
 +	return -ENXIO;
 +}
 +
++=======
++>>>>>>> 325aa8161432 (ACPI: property: Make acpi_node_prop_read() static)
  static inline struct fwnode_handle *
  acpi_get_next_subnode(const struct fwnode_handle *fwnode,
  		      struct fwnode_handle *child)
diff --git a/drivers/acpi/property.c b/drivers/acpi/property.c
index 9a60bd42775d..c9a64b85d8e4 100644
--- a/drivers/acpi/property.c
+++ b/drivers/acpi/property.c
@@ -1016,9 +1016,9 @@ int acpi_dev_prop_read(const struct acpi_device *adev, const char *propname,
  * of the property.  Otherwise, read at most @nval values to the array at the
  * location pointed to by @val.
  */
-int acpi_node_prop_read(const struct fwnode_handle *fwnode,
-			const char *propname, enum dev_prop_type proptype,
-			void *val, size_t nval)
+static int acpi_node_prop_read(const struct fwnode_handle *fwnode,
+			       const char *propname, enum dev_prop_type proptype,
+			       void *val, size_t nval)
 {
 	return acpi_data_prop_read(acpi_device_data_of_node(fwnode),
 				   propname, proptype, val, nval);
* Unmerged path include/linux/acpi.h
