samples/bpf: Add BPF_ATOMIC_OP macro for BPF samples

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Björn Töpel <bjorn.topel@intel.com>
commit da9d35e2f2e60bb1256691bb9014a69084ea62d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/da9d35e2.failed

Brendan Jackman added extend atomic operations to the BPF instruction
set in commit 7064a7341a0d ("Merge branch 'Atomics for eBPF'"), which
introduces the BPF_ATOMIC_OP macro. However, that macro was missing
for the BPF samples. Fix that by adding it into bpf_insn.h.

Fixes: 91c960b00566 ("bpf: Rename BPF_XADD and prepare to encode other atomics in .imm")
	Signed-off-by: Björn Töpel <bjorn.topel@intel.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Brendan Jackman <jackmanb@google.com>
Link: https://lore.kernel.org/bpf/20210118091753.107572-1-bjorn.topel@gmail.com
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit da9d35e2f2e60bb1256691bb9014a69084ea62d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	samples/bpf/bpf_insn.h
diff --cc samples/bpf/bpf_insn.h
index 544237980582,aee04534483a..000000000000
--- a/samples/bpf/bpf_insn.h
+++ b/samples/bpf/bpf_insn.h
@@@ -134,15 -134,31 +134,35 @@@ struct bpf_insn
  		.off   = OFF,					\
  		.imm   = 0 })
  
- /* Atomic memory add, *(uint *)(dst_reg + off16) += src_reg */
- 
- #define BPF_STX_XADD(SIZE, DST, SRC, OFF)			\
+ /*
+  * Atomic operations:
+  *
+  *   BPF_ADD                  *(uint *) (dst_reg + off16) += src_reg
+  *   BPF_AND                  *(uint *) (dst_reg + off16) &= src_reg
+  *   BPF_OR                   *(uint *) (dst_reg + off16) |= src_reg
+  *   BPF_XOR                  *(uint *) (dst_reg + off16) ^= src_reg
+  *   BPF_ADD | BPF_FETCH      src_reg = atomic_fetch_add(dst_reg + off16, src_reg);
+  *   BPF_AND | BPF_FETCH      src_reg = atomic_fetch_and(dst_reg + off16, src_reg);
+  *   BPF_OR | BPF_FETCH       src_reg = atomic_fetch_or(dst_reg + off16, src_reg);
+  *   BPF_XOR | BPF_FETCH      src_reg = atomic_fetch_xor(dst_reg + off16, src_reg);
+  *   BPF_XCHG                 src_reg = atomic_xchg(dst_reg + off16, src_reg)
+  *   BPF_CMPXCHG              r0 = atomic_cmpxchg(dst_reg + off16, r0, src_reg)
+  */
+ 
+ #define BPF_ATOMIC_OP(SIZE, OP, DST, SRC, OFF)			\
  	((struct bpf_insn) {					\
 -		.code  = BPF_STX | BPF_SIZE(SIZE) | BPF_ATOMIC,	\
 +		.code  = BPF_STX | BPF_SIZE(SIZE) | BPF_XADD,	\
  		.dst_reg = DST,					\
  		.src_reg = SRC,					\
  		.off   = OFF,					\
++<<<<<<< HEAD
 +		.imm   = 0 })
++=======
+ 		.imm   = OP })
+ 
+ /* Legacy alias */
+ #define BPF_STX_XADD(SIZE, DST, SRC, OFF) BPF_ATOMIC_OP(SIZE, BPF_ADD, DST, SRC, OFF)
++>>>>>>> da9d35e2f2e6 (samples/bpf: Add BPF_ATOMIC_OP macro for BPF samples)
  
  /* Memory store, *(uint *) (dst_reg + off16) = imm32 */
  
* Unmerged path samples/bpf/bpf_insn.h
