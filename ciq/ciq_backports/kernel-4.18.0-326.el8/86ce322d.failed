selftests/bpf: Don't exit on failed bpf_testmod unload

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Andrii Nakryiko <andrii@kernel.org>
commit 86ce322d21eb032ed8fdd294d0fb095d2debb430
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/86ce322d.failed

Fix bug in handling bpf_testmod unloading that will cause test_progs exiting
prematurely if bpf_testmod unloading failed. This is especially problematic
when running a subset of test_progs that doesn't require root permissions and
doesn't rely on bpf_testmod, yet will fail immediately due to exit(1) in
unload_bpf_testmod().

Fixes: 9f7fa225894c ("selftests/bpf: Add bpf_testmod kernel module for testing")
	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20210126065019.1268027-1-andrii@kernel.org
(cherry picked from commit 86ce322d21eb032ed8fdd294d0fb095d2debb430)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_progs.c
diff --cc tools/testing/selftests/bpf/test_progs.c
index 2d2041a176fa,6396932b97e2..000000000000
--- a/tools/testing/selftests/bpf/test_progs.c
+++ b/tools/testing/selftests/bpf/test_progs.c
@@@ -360,6 -361,68 +360,71 @@@ err
  	return -1;
  }
  
++<<<<<<< HEAD
++=======
+ static int finit_module(int fd, const char *param_values, int flags)
+ {
+ 	return syscall(__NR_finit_module, fd, param_values, flags);
+ }
+ 
+ static int delete_module(const char *name, int flags)
+ {
+ 	return syscall(__NR_delete_module, name, flags);
+ }
+ 
+ /*
+  * Trigger synchronize_rcu() in kernel.
+  */
+ int kern_sync_rcu(void)
+ {
+ 	return syscall(__NR_membarrier, MEMBARRIER_CMD_SHARED, 0, 0);
+ }
+ 
+ static void unload_bpf_testmod(void)
+ {
+ 	if (kern_sync_rcu())
+ 		fprintf(env.stderr, "Failed to trigger kernel-side RCU sync!\n");
+ 	if (delete_module("bpf_testmod", 0)) {
+ 		if (errno == ENOENT) {
+ 			if (env.verbosity > VERBOSE_NONE)
+ 				fprintf(stdout, "bpf_testmod.ko is already unloaded.\n");
+ 			return;
+ 		}
+ 		fprintf(env.stderr, "Failed to unload bpf_testmod.ko from kernel: %d\n", -errno);
+ 		return;
+ 	}
+ 	if (env.verbosity > VERBOSE_NONE)
+ 		fprintf(stdout, "Successfully unloaded bpf_testmod.ko.\n");
+ }
+ 
+ static int load_bpf_testmod(void)
+ {
+ 	int fd;
+ 
+ 	/* ensure previous instance of the module is unloaded */
+ 	unload_bpf_testmod();
+ 
+ 	if (env.verbosity > VERBOSE_NONE)
+ 		fprintf(stdout, "Loading bpf_testmod.ko...\n");
+ 
+ 	fd = open("bpf_testmod.ko", O_RDONLY);
+ 	if (fd < 0) {
+ 		fprintf(env.stderr, "Can't find bpf_testmod.ko kernel module: %d\n", -errno);
+ 		return -ENOENT;
+ 	}
+ 	if (finit_module(fd, "", 0)) {
+ 		fprintf(env.stderr, "Failed to load bpf_testmod.ko into the kernel: %d\n", -errno);
+ 		close(fd);
+ 		return -EINVAL;
+ 	}
+ 	close(fd);
+ 
+ 	if (env.verbosity > VERBOSE_NONE)
+ 		fprintf(stdout, "Successfully loaded bpf_testmod.ko.\n");
+ 	return 0;
+ }
+ 
++>>>>>>> 86ce322d21eb (selftests/bpf: Don't exit on failed bpf_testmod unload)
  /* extern declarations for test funcs */
  #define DEFINE_TEST(name) extern void test_##name(void);
  #include <prog_tests/tests.h>
* Unmerged path tools/testing/selftests/bpf/test_progs.c
