dma-mapping: better document dma_addr_t and DMA_MAPPING_ERROR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Christoph Hellwig <hch@lst.de>
commit eba304c6861613a649ba46cfab835b1eddeacd8e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/eba304c6.failed

Move the comment documenting dma_addr_t away from the dma_map_ops
definition which isn't very related to it, and toward DMA_MAPPING_ERROR,
which is somewhat related.  Add a little blurb about DMA_MAPPING_ERROR
as well.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit eba304c6861613a649ba46cfab835b1eddeacd8e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/dma-mapping.h
diff --cc include/linux/dma-mapping.h
index 345f9e13b263,943479fb77f6..000000000000
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@@ -67,15 -67,6 +67,18 @@@
   */
  #define DMA_ATTR_PRIVILEGED		(1UL << 9)
  
++<<<<<<< HEAD
 +struct dma_map_ops_extended_rh {
 +};
 +
 +/*
 + * A dma_addr_t can hold any valid DMA or bus address for the platform.
 + * It can be given to a device to use as a DMA source or target.  A CPU cannot
 + * reference a dma_addr_t directly because there may be translation between
 + * its physical address space and the bus address space.
 + */
++=======
++>>>>>>> eba304c68616 (dma-mapping: better document dma_addr_t and DMA_MAPPING_ERROR)
  struct dma_map_ops {
  	void* (*alloc)(struct device *dev, size_t size,
  				dma_addr_t *dma_handle, gfp_t gfp,
@@@ -136,9 -121,20 +139,19 @@@
  			enum dma_data_direction direction);
  	int (*dma_supported)(struct device *dev, u64 mask);
  	u64 (*get_required_mask)(struct device *dev);
 -	size_t (*max_mapping_size)(struct device *dev);
 -	unsigned long (*get_merge_boundary)(struct device *dev);
 +	RH_KABI_AUX_EMBED(dma_map_ops_extended)
  };
  
+ /*
+  * A dma_addr_t can hold any valid DMA or bus address for the platform.  It can
+  * be given to a device to use as a DMA source or target.  It is specific to a
+  * given device and there may be a translation between the CPU physical address
+  * space and the bus address space.
+  *
+  * DMA_MAPPING_ERROR is the magic error code if a mapping failed.  It should not
+  * be used directly in drivers, but checked for using dma_mapping_error()
+  * instead.
+  */
  #define DMA_MAPPING_ERROR		(~(dma_addr_t)0)
  
  extern const struct dma_map_ops dma_virt_ops;
* Unmerged path include/linux/dma-mapping.h
