ibmvnic: remove set but not used variable 'netdev'

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author YueHaibing <yuehaibing@huawei.com>
commit 53a6b206e36f160dbaa5727e68f8418de0b10bbf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/53a6b206.failed

Fixes gcc '-Wunused-but-set-variable' warning:

drivers/net/ethernet/ibm/ibmvnic.c: In function '__ibmvnic_reset':
drivers/net/ethernet/ibm/ibmvnic.c:1971:21: warning: variable 'netdev' set but not used [-Wunused-but-set-variable]

It's never used since introduction in
commit ed651a10875f ("ibmvnic: Updated reset handling")

	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
	Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 53a6b206e36f160dbaa5727e68f8418de0b10bbf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/ibm/ibmvnic.c
diff --cc drivers/net/ethernet/ibm/ibmvnic.c
index 7b69abff1f09,20c4e0835ba8..000000000000
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@@ -2275,20 -1968,21 +2275,23 @@@ static void __ibmvnic_reset(struct work
  {
  	struct ibmvnic_rwi *rwi;
  	struct ibmvnic_adapter *adapter;
++<<<<<<< HEAD
 +	bool saved_state = false;
 +	unsigned long flags;
 +	struct net_device *netdev;
++=======
+ 	bool we_lock_rtnl = false;
++>>>>>>> 53a6b206e36f (ibmvnic: remove set but not used variable 'netdev')
  	u32 reset_state;
  	int rc = 0;
  
  	adapter = container_of(work, struct ibmvnic_adapter, ibmvnic_reset);
- 	netdev = adapter->netdev;
  
 -	/* netif_set_real_num_xx_queues needs to take rtnl lock here
 -	 * unless wait_for_reset is set, in which case the rtnl lock
 -	 * has already been taken before initializing the reset
 -	 */
 -	if (!adapter->wait_for_reset) {
 -		rtnl_lock();
 -		we_lock_rtnl = true;
 +	if (test_and_set_bit_lock(0, &adapter->resetting)) {
 +		schedule_delayed_work(&adapter->ibmvnic_delayed_reset,
 +				      IBMVNIC_RESET_DELAY);
 +		return;
  	}
 -	reset_state = adapter->state;
  
  	rwi = get_next_rwi(adapter);
  	while (rwi) {
* Unmerged path drivers/net/ethernet/ibm/ibmvnic.c
