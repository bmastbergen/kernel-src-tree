RDMA/mlx5: Fix timestamp default mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Maor Gottlieb <maorg@nvidia.com>
commit 8256c69b2d9c35e94d0e424184c0d27b59bdee12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/8256c69b.failed

1. Don't set the ts_format bit to default when it reserved - device is
   running in the old mode (free running).
2. XRC doesn't have a CQ therefore the ts format in the QP
   context should be default / free running.
3. Set ts_format to WQ.

Fixes: 2fe8d4b87802 ("RDMA/mlx5: Fail QP creation if the device can not support the CQE TS")
	Signed-off-by: Maor Gottlieb <maorg@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 8256c69b2d9c35e94d0e424184c0d27b59bdee12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 352114fcd4c0,f5a52a6fae43..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -1102,6 -1078,7 +1102,10 @@@ static int _create_kernel_qp(struct mlx
  
  	qpc = MLX5_ADDR_OF(create_qp_in, *in, qpc);
  	MLX5_SET(qpc, qpc, uar_page, uar_index);
++<<<<<<< HEAD
++=======
+ 	MLX5_SET(qpc, qpc, ts_format, mlx5_get_qp_default_ts(dev->mdev));
++>>>>>>> 8256c69b2d9c (RDMA/mlx5: Fix timestamp default mode)
  	MLX5_SET(qpc, qpc, log_page_size, qp->buf.page_shift - MLX5_ADAPTER_PAGE_SHIFT);
  
  	/* Set "fast registration enabled" for all kernel QPs */
@@@ -1196,6 -1173,71 +1200,74 @@@ static void destroy_flow_rule_vport_sq(
  	sq->flow_rule = NULL;
  }
  
++<<<<<<< HEAD
++=======
+ static int get_rq_ts_format(struct mlx5_ib_dev *dev, struct mlx5_ib_cq *send_cq)
+ {
+ 	bool fr_supported =
+ 		MLX5_CAP_GEN(dev->mdev, rq_ts_format) ==
+ 			MLX5_RQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING ||
+ 		MLX5_CAP_GEN(dev->mdev, rq_ts_format) ==
+ 			MLX5_RQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING_AND_REAL_TIME;
+ 
+ 	if (send_cq->create_flags & IB_UVERBS_CQ_FLAGS_TIMESTAMP_COMPLETION) {
+ 		if (!fr_supported) {
+ 			mlx5_ib_dbg(dev, "Free running TS format is not supported\n");
+ 			return -EOPNOTSUPP;
+ 		}
+ 		return MLX5_RQC_TIMESTAMP_FORMAT_FREE_RUNNING;
+ 	}
+ 	return fr_supported ? MLX5_RQC_TIMESTAMP_FORMAT_FREE_RUNNING :
+ 			      MLX5_RQC_TIMESTAMP_FORMAT_DEFAULT;
+ }
+ 
+ static int get_sq_ts_format(struct mlx5_ib_dev *dev, struct mlx5_ib_cq *send_cq)
+ {
+ 	bool fr_supported =
+ 		MLX5_CAP_GEN(dev->mdev, sq_ts_format) ==
+ 			MLX5_SQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING ||
+ 		MLX5_CAP_GEN(dev->mdev, sq_ts_format) ==
+ 			MLX5_SQ_TIMESTAMP_FORMAT_CAP_FREE_RUNNING_AND_REAL_TIME;
+ 
+ 	if (send_cq->create_flags & IB_UVERBS_CQ_FLAGS_TIMESTAMP_COMPLETION) {
+ 		if (!fr_supported) {
+ 			mlx5_ib_dbg(dev, "Free running TS format is not supported\n");
+ 			return -EOPNOTSUPP;
+ 		}
+ 		return MLX5_SQC_TIMESTAMP_FORMAT_FREE_RUNNING;
+ 	}
+ 	return fr_supported ? MLX5_SQC_TIMESTAMP_FORMAT_FREE_RUNNING :
+ 			      MLX5_SQC_TIMESTAMP_FORMAT_DEFAULT;
+ }
+ 
+ static int get_qp_ts_format(struct mlx5_ib_dev *dev, struct mlx5_ib_cq *send_cq,
+ 			    struct mlx5_ib_cq *recv_cq)
+ {
+ 	bool fr_supported =
+ 		MLX5_CAP_ROCE(dev->mdev, qp_ts_format) ==
+ 			MLX5_QP_TIMESTAMP_FORMAT_CAP_FREE_RUNNING ||
+ 		MLX5_CAP_ROCE(dev->mdev, qp_ts_format) ==
+ 			MLX5_QP_TIMESTAMP_FORMAT_CAP_FREE_RUNNING_AND_REAL_TIME;
+ 	int ts_format = fr_supported ? MLX5_QPC_TIMESTAMP_FORMAT_FREE_RUNNING :
+ 				       MLX5_QPC_TIMESTAMP_FORMAT_DEFAULT;
+ 
+ 	if (recv_cq &&
+ 	    recv_cq->create_flags & IB_UVERBS_CQ_FLAGS_TIMESTAMP_COMPLETION)
+ 		ts_format = MLX5_QPC_TIMESTAMP_FORMAT_FREE_RUNNING;
+ 
+ 	if (send_cq &&
+ 	    send_cq->create_flags & IB_UVERBS_CQ_FLAGS_TIMESTAMP_COMPLETION)
+ 		ts_format = MLX5_QPC_TIMESTAMP_FORMAT_FREE_RUNNING;
+ 
+ 	if (ts_format == MLX5_QPC_TIMESTAMP_FORMAT_FREE_RUNNING &&
+ 	    !fr_supported) {
+ 		mlx5_ib_dbg(dev, "Free running TS format is not supported\n");
+ 		return -EOPNOTSUPP;
+ 	}
+ 	return ts_format;
+ }
+ 
++>>>>>>> 8256c69b2d9c (RDMA/mlx5: Fix timestamp default mode)
  static int create_raw_packet_qp_sq(struct mlx5_ib_dev *dev,
  				   struct ib_udata *udata,
  				   struct mlx5_ib_sq *sq, void *qpin,
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
