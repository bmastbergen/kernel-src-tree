RDMA/mlx5: Remove npages from mlx5_ib_cont_pages()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Jason Gunthorpe <jgg@nvidia.com>
commit f8fb3110635c91a375399450dc5a4a79a83b0414
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/f8fb3110.failed

Most callers don't need this, and the few that do can get it as
ib_umem_num_pages(umem).

Link: https://lore.kernel.org/r/20201026131936.1335664-8-leon@kernel.org
	Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit f8fb3110635c91a375399450dc5a4a79a83b0414)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/cq.c
#	drivers/infiniband/hw/mlx5/devx.c
#	drivers/infiniband/hw/mlx5/mem.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
#	drivers/infiniband/hw/mlx5/mr.c
#	drivers/infiniband/hw/mlx5/qp.c
#	drivers/infiniband/hw/mlx5/srq.c
diff --cc drivers/infiniband/hw/mlx5/cq.c
index 97c9edcdf214,2088e4a3c32d..000000000000
--- a/drivers/infiniband/hw/mlx5/cq.c
+++ b/drivers/infiniband/hw/mlx5/cq.c
@@@ -746,10 -745,13 +745,20 @@@ static int create_cq_user(struct mlx5_i
  	if (err)
  		goto err_umem;
  
++<<<<<<< HEAD
 +	mlx5_ib_cont_pages(cq->buf.umem, ucmd.buf_addr, 0, &npages, &page_shift,
 +			   &ncont, NULL);
 +	mlx5_ib_dbg(dev, "addr 0x%llx, size %u, npages %d, page_shift %d, ncont %d\n",
 +		    ucmd.buf_addr, entries * ucmd.cqe_size, npages, page_shift, ncont);
++=======
+ 	mlx5_ib_cont_pages(cq->buf.umem, ucmd.buf_addr, 0, &page_shift);
+ 	ncont = ib_umem_num_dma_blocks(cq->buf.umem, 1UL << page_shift);
+ 	mlx5_ib_dbg(
+ 		dev,
+ 		"addr 0x%llx, size %u, npages %zu, page_shift %d, ncont %d\n",
+ 		ucmd.buf_addr, entries * ucmd.cqe_size,
+ 		ib_umem_num_pages(cq->buf.umem), page_shift, ncont);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  
  	*inlen = MLX5_ST_SZ_BYTES(create_cq_in) +
  		 MLX5_FLD_SZ_BYTES(create_cq_in, pas[0]) * ncont;
@@@ -1155,8 -1156,7 +1163,12 @@@ static int resize_user(struct mlx5_ib_d
  		return err;
  	}
  
++<<<<<<< HEAD
 +	mlx5_ib_cont_pages(umem, ucmd.buf_addr, 0, &npages, page_shift,
 +			   npas, NULL);
++=======
+ 	mlx5_ib_cont_pages(umem, ucmd.buf_addr, 0, page_shift);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  
  	cq->resize_umem = umem;
  	*cqe_size = ucmd.cqe_size;
diff --cc drivers/infiniband/hw/mlx5/devx.c
index ed09a0921724,ae889266acf1..000000000000
--- a/drivers/infiniband/hw/mlx5/devx.c
+++ b/drivers/infiniband/hw/mlx5/devx.c
@@@ -2177,14 -2080,7 +2176,18 @@@ static int devx_umem_get(struct mlx5_ib
  		return PTR_ERR(obj->umem);
  
  	mlx5_ib_cont_pages(obj->umem, obj->umem->address,
++<<<<<<< HEAD
 +			   MLX5_MKEY_PAGE_SHIFT_MASK, &npages,
 +			   &obj->page_shift, &obj->ncont, NULL);
 +
 +	if (!npages) {
 +		ib_umem_release(obj->umem);
 +		return -EINVAL;
 +	}
 +
++=======
+ 			   MLX5_MKEY_PAGE_SHIFT_MASK, &obj->page_shift);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  	page_mask = (1 << obj->page_shift) - 1;
  	obj->page_offset = obj->umem->address & page_mask;
  
diff --cc drivers/infiniband/hw/mlx5/mem.c
index 13de3d2edd34,7ae96b37bd6e..000000000000
--- a/drivers/infiniband/hw/mlx5/mem.c
+++ b/drivers/infiniband/hw/mlx5/mem.c
@@@ -39,15 -39,10 +39,18 @@@
  /* @umem: umem object to scan
   * @addr: ib virtual address requested by the user
   * @max_page_shift: high limit for page_shift - 0 means no limit
-  * @count: number of PAGE_SIZE pages covered by umem
   * @shift: page shift for the compound pages found in the region
 + * @ncont: number of compund pages
 + * @order: log2 of the number of compound pages
   */
  void mlx5_ib_cont_pages(struct ib_umem *umem, u64 addr,
++<<<<<<< HEAD
 +			unsigned long max_page_shift,
 +			int *count, int *shift,
 +			int *ncont, int *order)
++=======
+ 			unsigned long max_page_shift, int *shift)
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  {
  	unsigned long tmp;
  	unsigned long m;
@@@ -57,6 -52,13 +60,16 @@@
  	struct scatterlist *sg;
  	int entry;
  
++<<<<<<< HEAD
++=======
+ 	if (umem->is_odp) {
+ 		struct ib_umem_odp *odp = to_ib_umem_odp(umem);
+ 
+ 		*shift = odp->page_shift;
+ 		return;
+ 	}
+ 
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  	addr = addr >> PAGE_SHIFT;
  	tmp = (unsigned long)addr;
  	m = find_first_bit(&tmp, BITS_PER_LONG);
@@@ -82,23 -84,11 +95,22 @@@
  		i += len;
  	}
  
 -	if (i)
 +	if (i) {
  		m = min_t(unsigned long, ilog2(roundup_pow_of_two(i)), m);
 -	else
 +
 +		if (order)
 +			*order = ilog2(roundup_pow_of_two(i) >> m);
 +
 +		*ncont = DIV_ROUND_UP(i, (1 << m));
 +	} else {
  		m  = 0;
 +
 +		if (order)
 +			*order = 0;
 +
 +		*ncont = 0;
 +	}
  	*shift = PAGE_SHIFT + m;
- 	*count = i;
  }
  
  /*
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index 5e47304abc75,3e2c471d77bd..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -1234,8 -1231,7 +1234,12 @@@ int mlx5_ib_query_port(struct ib_devic
  		       struct ib_port_attr *props);
  void mlx5_ib_cont_pages(struct ib_umem *umem, u64 addr,
  			unsigned long max_page_shift,
++<<<<<<< HEAD
 +			int *count, int *shift,
 +			int *ncont, int *order);
++=======
+ 			int *shift);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  void __mlx5_ib_populate_pas(struct mlx5_ib_dev *dev, struct ib_umem *umem,
  			    int page_shift, size_t offset, size_t num_pages,
  			    __be64 *pas, int access_flags);
diff --cc drivers/infiniband/hw/mlx5/mr.c
index 52d81032598e,49484a9e64cd..000000000000
--- a/drivers/infiniband/hw/mlx5/mr.c
+++ b/drivers/infiniband/hw/mlx5/mr.c
@@@ -975,15 -950,18 +975,23 @@@ static struct mlx5_cache_ent *mr_cache_
  	return &cache->ent[order];
  }
  
 -static struct mlx5_ib_mr *alloc_mr_from_cache(struct ib_pd *pd,
 -					      struct ib_umem *umem, u64 iova,
 -					      int access_flags)
 +static struct mlx5_ib_mr *
 +alloc_mr_from_cache(struct ib_pd *pd, struct ib_umem *umem, u64 virt_addr,
 +		    u64 len, int npages, int page_shift, unsigned int order,
 +		    int access_flags)
  {
  	struct mlx5_ib_dev *dev = to_mdev(pd->device);
 -	struct mlx5_cache_ent *ent;
 +	struct mlx5_cache_ent *ent = mr_cache_ent_from_order(dev, order);
  	struct mlx5_ib_mr *mr;
++<<<<<<< HEAD
 +
++=======
+ 	int page_shift;
+ 
+ 	mlx5_ib_cont_pages(umem, iova, MLX5_MKEY_PAGE_SHIFT_MASK, &page_shift);
+ 	ent = mr_cache_ent_from_order(dev, order_base_2(ib_umem_num_dma_blocks(
+ 						   umem, 1UL << page_shift)));
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  	if (!ent)
  		return ERR_PTR(-E2BIG);
  
@@@ -1181,6 -1159,9 +1189,12 @@@ static struct mlx5_ib_mr *reg_create(st
  	if (!mr)
  		return ERR_PTR(-ENOMEM);
  
++<<<<<<< HEAD
++=======
+ 	mlx5_ib_cont_pages(umem, iova, MLX5_MKEY_PAGE_SHIFT_MASK, &page_shift);
+ 
+ 	mr->page_shift = page_shift;
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  	mr->ibmr.pd = pd;
  	mr->access_flags = access_flags;
  
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 981aaf96640e,46cfe50383b2..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -780,8 -780,8 +780,13 @@@ int bfregn_to_uar_index(struct mlx5_ib_
  
  static int mlx5_ib_umem_get(struct mlx5_ib_dev *dev, struct ib_udata *udata,
  			    unsigned long addr, size_t size,
++<<<<<<< HEAD
 +			    struct ib_umem **umem, int *npages, int *page_shift,
 +			    int *ncont, u32 *offset)
++=======
+ 			    struct ib_umem **umem, int *page_shift,
+ 			    u32 *offset)
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  {
  	int err;
  
@@@ -791,7 -791,7 +796,11 @@@
  		return PTR_ERR(*umem);
  	}
  
++<<<<<<< HEAD
 +	mlx5_ib_cont_pages(*umem, addr, 0, npages, page_shift, ncont, NULL);
++=======
+ 	mlx5_ib_cont_pages(*umem, addr, 0, page_shift);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  
  	err = mlx5_ib_get_buf_offset(addr, *page_shift, offset);
  	if (err) {
@@@ -799,8 -799,8 +808,13 @@@
  		goto err_umem;
  	}
  
++<<<<<<< HEAD
 +	mlx5_ib_dbg(dev, "addr 0x%lx, size %zu, npages %d, page_shift %d, ncont %d, offset %d\n",
 +		    addr, size, *npages, *page_shift, *ncont, *offset);
++=======
+ 	mlx5_ib_dbg(dev, "addr 0x%lx, size %zu, npages %zu, page_shift %d, offset %d\n",
+ 		    addr, size, ib_umem_num_pages(*umem), *page_shift, *offset);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  
  	return 0;
  
@@@ -834,9 -834,7 +848,8 @@@ static int create_user_rq(struct mlx5_i
  	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
  		udata, struct mlx5_ib_ucontext, ibucontext);
  	int page_shift = 0;
- 	int npages;
  	u32 offset = 0;
 +	int ncont = 0;
  	int err;
  
  	if (!ucmd->buf_addr)
@@@ -849,8 -847,7 +862,12 @@@
  		return err;
  	}
  
++<<<<<<< HEAD
 +	mlx5_ib_cont_pages(rwq->umem, ucmd->buf_addr, 0, &npages, &page_shift,
 +			   &ncont, NULL);
++=======
+ 	mlx5_ib_cont_pages(rwq->umem, ucmd->buf_addr, 0, &page_shift);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  	err = mlx5_ib_get_buf_offset(ucmd->buf_addr, page_shift,
  				     &rwq->rq_page_offset);
  	if (err) {
@@@ -863,9 -860,12 +880,18 @@@
  	rwq->log_page_size =  page_shift - MLX5_ADAPTER_PAGE_SHIFT;
  	rwq->wq_sig = !!(ucmd->flags & MLX5_WQ_FLAG_SIGNATURE);
  
++<<<<<<< HEAD
 +	mlx5_ib_dbg(dev, "addr 0x%llx, size %zd, npages %d, page_shift %d, ncont %d, offset %d\n",
 +		    (unsigned long long)ucmd->buf_addr, rwq->buf_size,
 +		    npages, page_shift, ncont, offset);
++=======
+ 	mlx5_ib_dbg(
+ 		dev,
+ 		"addr 0x%llx, size %zd, npages %zu, page_shift %d, ncont %d, offset %d\n",
+ 		(unsigned long long)ucmd->buf_addr, rwq->buf_size,
+ 		ib_umem_num_pages(rwq->umem), page_shift, rwq->rq_num_pas,
+ 		offset);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  
  	err = mlx5_ib_db_map_user(ucontext, udata, ucmd->db_addr, &rwq->db);
  	if (err) {
@@@ -952,9 -951,10 +977,13 @@@ static int _create_user_qp(struct mlx5_
  		ubuffer->buf_addr = ucmd->buf_addr;
  		err = mlx5_ib_umem_get(dev, udata, ubuffer->buf_addr,
  				       ubuffer->buf_size, &ubuffer->umem,
++<<<<<<< HEAD
 +				       &npages, &page_shift, &ncont, &offset);
++=======
+ 				       &page_shift, &offset);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  		if (err)
  			goto err_bfreg;
 -		ncont = ib_umem_num_dma_blocks(ubuffer->umem, 1UL << page_shift);
  	} else {
  		ubuffer->umem = NULL;
  	}
@@@ -1210,13 -1210,10 +1239,20 @@@ static int create_raw_packet_qp_sq(stru
  	int inlen;
  	int err;
  	int page_shift = 0;
++<<<<<<< HEAD
 +	int npages;
 +	int ncont = 0;
 +	u32 offset = 0;
 +
 +	err = mlx5_ib_umem_get(dev, udata, ubuffer->buf_addr, ubuffer->buf_size,
 +			       &sq->ubuffer.umem, &npages, &page_shift, &ncont,
 +			       &offset);
++=======
+ 	u32 offset = 0;
+ 
+ 	err = mlx5_ib_umem_get(dev, udata, ubuffer->buf_addr, ubuffer->buf_size,
+ 			       &sq->ubuffer.umem, &page_shift, &offset);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  	if (err)
  		return err;
  
diff --cc drivers/infiniband/hw/mlx5/srq.c
index 39086f3cf4b4,dec9269514b9..000000000000
--- a/drivers/infiniband/hw/mlx5/srq.c
+++ b/drivers/infiniband/hw/mlx5/srq.c
@@@ -51,9 -51,7 +51,8 @@@ static int create_srq_user(struct ib_p
  		udata, struct mlx5_ib_ucontext, ibucontext);
  	size_t ucmdlen;
  	int err;
- 	int npages;
  	int page_shift;
 +	int ncont;
  	u32 offset;
  	u32 uidx = MLX5_IB_DEFAULT_UIDX;
  
@@@ -87,8 -85,7 +86,12 @@@
  		return err;
  	}
  
++<<<<<<< HEAD
 +	mlx5_ib_cont_pages(srq->umem, ucmd.buf_addr, 0, &npages,
 +			   &page_shift, &ncont, NULL);
++=======
+ 	mlx5_ib_cont_pages(srq->umem, ucmd.buf_addr, 0, &page_shift);
++>>>>>>> f8fb3110635c (RDMA/mlx5: Remove npages from mlx5_ib_cont_pages())
  	err = mlx5_ib_get_buf_offset(ucmd.buf_addr, page_shift,
  				     &offset);
  	if (err) {
* Unmerged path drivers/infiniband/hw/mlx5/cq.c
* Unmerged path drivers/infiniband/hw/mlx5/devx.c
* Unmerged path drivers/infiniband/hw/mlx5/mem.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
* Unmerged path drivers/infiniband/hw/mlx5/mr.c
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
* Unmerged path drivers/infiniband/hw/mlx5/srq.c
