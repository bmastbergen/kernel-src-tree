drm/qxl: add qxl_bo_vmap/qxl_bo_vunmap

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Gerd Hoffmann <kraxel@redhat.com>
commit dce39226180afca473057084acab63bba99fcc4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/dce39226.failed

Add vmap/vunmap variants which reserve (and pin) the bo.
They can be used in case the caller doesn't hold a reservation
for the bo.

	Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
	Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
Link: http://patchwork.freedesktop.org/patch/msgid/20210217123213.2199186-7-kraxel@redhat.com
(cherry picked from commit dce39226180afca473057084acab63bba99fcc4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/qxl/qxl_object.c
#	drivers/gpu/drm/qxl/qxl_object.h
diff --cc drivers/gpu/drm/qxl/qxl_object.c
index 80e7a17aaddd,82c3bf195ad6..000000000000
--- a/drivers/gpu/drm/qxl/qxl_object.c
+++ b/drivers/gpu/drm/qxl/qxl_object.c
@@@ -26,7 -26,12 +26,13 @@@
  #include "qxl_drv.h"
  #include "qxl_object.h"
  
++<<<<<<< HEAD
 +#include <linux/io-mapping.h>
++=======
+ static int __qxl_bo_pin(struct qxl_bo *bo);
+ static void __qxl_bo_unpin(struct qxl_bo *bo);
+ 
++>>>>>>> dce39226180a (drm/qxl: add qxl_bo_vmap/qxl_bo_vunmap)
  static void qxl_ttm_bo_destroy(struct ttm_buffer_object *tbo)
  {
  	struct qxl_bo *bo;
@@@ -203,9 -242,23 +228,23 @@@ void qxl_bo_kunmap(struct qxl_bo *bo
  	if (bo->map_count > 0)
  		return;
  	bo->kptr = NULL;
 -	ttm_bo_vunmap(&bo->tbo, &bo->map);
 +	ttm_bo_kunmap(&bo->kmap);
  }
  
+ int qxl_bo_vunmap(struct qxl_bo *bo)
+ {
+ 	int r;
+ 
+ 	r = qxl_bo_reserve(bo);
+ 	if (r)
+ 		return r;
+ 
+ 	qxl_bo_vunmap_locked(bo);
+ 	__qxl_bo_unpin(bo);
+ 	qxl_bo_unreserve(bo);
+ 	return 0;
+ }
+ 
  void qxl_bo_kunmap_atomic_page(struct qxl_device *qdev,
  			       struct qxl_bo *bo, void *pmap)
  {
diff --cc drivers/gpu/drm/qxl/qxl_object.h
index 21fa81048f4f,ee9c29de4d3d..000000000000
--- a/drivers/gpu/drm/qxl/qxl_object.h
+++ b/drivers/gpu/drm/qxl/qxl_object.h
@@@ -84,10 -61,13 +84,17 @@@ static inline int qxl_bo_wait(struct qx
  extern int qxl_bo_create(struct qxl_device *qdev,
  			 unsigned long size,
  			 bool kernel, bool pinned, u32 domain,
 -			 u32 priority,
  			 struct qxl_surface *surf,
  			 struct qxl_bo **bo_ptr);
++<<<<<<< HEAD
 +extern int qxl_bo_kmap(struct qxl_bo *bo, void **ptr);
 +extern void qxl_bo_kunmap(struct qxl_bo *bo);
++=======
+ int qxl_bo_vmap(struct qxl_bo *bo, struct dma_buf_map *map);
+ int qxl_bo_vmap_locked(struct qxl_bo *bo, struct dma_buf_map *map);
+ int qxl_bo_vunmap(struct qxl_bo *bo);
+ void qxl_bo_vunmap_locked(struct qxl_bo *bo);
++>>>>>>> dce39226180a (drm/qxl: add qxl_bo_vmap/qxl_bo_vunmap)
  void *qxl_bo_kmap_atomic_page(struct qxl_device *qdev, struct qxl_bo *bo, int page_offset);
  void qxl_bo_kunmap_atomic_page(struct qxl_device *qdev, struct qxl_bo *bo, void *map);
  extern struct qxl_bo *qxl_bo_ref(struct qxl_bo *bo);
* Unmerged path drivers/gpu/drm/qxl/qxl_object.c
* Unmerged path drivers/gpu/drm/qxl/qxl_object.h
