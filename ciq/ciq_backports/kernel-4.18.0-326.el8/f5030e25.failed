usb: typec: Provide PD Specification Revision for cable and partner

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Benson Leung <bleung@chromium.org>
commit f5030e252687be6e999bd52feb1f79d515b2f684
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/f5030e25.failed

The USB Power Delivery specification Section 6.2.1.1.5 outlines
revision backward compatibility requirements starting from Revision 3.0.

The Port, the Cable Plug, and the Port Partner may support either
revision 2 or revision 3 independently, and communication between ports,
partners, and cables of different revisions are allowed under rules
that the parties agree to communicate between each other using the
lowest common operating revision.

This may mean that Port-to-Partner operating revision comms may be
different than Port-to-CablePlug operating revision comms. For example,
it is possible for a R3.0 port to communicate with a R3.0 partner
using R3.0 messages, while the R3.0 port (in the same session) must
communicate with the R2.0 cable using R2.0 messages only.

Introduce individual revision number properties for cable
and port partner so that the port can track them independently.

	Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Signed-off-by: Benson Leung <bleung@chromium.org>
Link: https://lore.kernel.org/r/20210129061406.2680146-3-bleung@chromium.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit f5030e252687be6e999bd52feb1f79d515b2f684)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/class.c
diff --cc drivers/usb/typec/class.c
index b7c09c796ef6,b5241f4756c2..000000000000
--- a/drivers/usb/typec/class.c
+++ b/drivers/usb/typec/class.c
@@@ -179,8 -250,27 +181,29 @@@ static void typec_report_identity(struc
  	sysfs_notify(&dev->kobj, "identity", "product_type_vdo1");
  	sysfs_notify(&dev->kobj, "identity", "product_type_vdo2");
  	sysfs_notify(&dev->kobj, "identity", "product_type_vdo3");
 -	typec_product_type_notify(dev);
  }
  
++<<<<<<< HEAD
++=======
+ static ssize_t
+ type_show(struct device *dev, struct device_attribute *attr, char *buf)
+ {
+ 	const char *ptype;
+ 
+ 	ptype = get_pd_product_type(dev);
+ 	if (!ptype)
+ 		return 0;
+ 
+ 	return sysfs_emit(buf, "%s\n", ptype);
+ }
+ static DEVICE_ATTR_RO(type);
+ 
+ static ssize_t usb_power_delivery_revision_show(struct device *dev,
+ 						struct device_attribute *attr,
+ 						char *buf);
+ static DEVICE_ATTR_RO(usb_power_delivery_revision);
+ 
++>>>>>>> f5030e252687 (usb: typec: Provide PD Specification Revision for cable and partner)
  /* ------------------------------------------------------------------------- */
  /* Alternate Modes */
  
@@@ -596,6 -686,8 +619,11 @@@ static struct attribute *typec_partner_
  	&dev_attr_accessory_mode.attr,
  	&dev_attr_supports_usb_power_delivery.attr,
  	&dev_attr_number_of_alternate_modes.attr,
++<<<<<<< HEAD
++=======
+ 	&dev_attr_type.attr,
+ 	&dev_attr_usb_power_delivery_revision.attr,
++>>>>>>> f5030e252687 (usb: typec: Provide PD Specification Revision for cable and partner)
  	NULL
  };
  
diff --git a/Documentation/ABI/testing/sysfs-class-typec b/Documentation/ABI/testing/sysfs-class-typec
index be5190007b33..fe6a5e61be41 100644
--- a/Documentation/ABI/testing/sysfs-class-typec
+++ b/Documentation/ABI/testing/sysfs-class-typec
@@ -107,6 +107,19 @@ Description:
 		- "3.0": USB Power Delivery Release 3.0
 		- "3.1": USB Power Delivery Release 3.1
 
+What:		/sys/class/typec/<port>-{partner|cable}/usb_power_delivery_revision
+Date:		January 2021
+Contact:	Benson Leung <bleung@chromium.org>
+Description:
+		Revision number of the supported USB Power Delivery
+		specification of the port partner or cable, or 0.0 when USB
+		Power Delivery is not supported.
+
+		Example values:
+		- "2.0": USB Power Delivery Release 2.0
+		- "3.0": USB Power Delivery Release 3.0
+		- "3.1": USB Power Delivery Release 3.1
+
 What:		/sys/class/typec/<port>/usb_typec_revision
 Date:		April 2017
 Contact:	Heikki Krogerus <heikki.krogerus@linux.intel.com>
* Unmerged path drivers/usb/typec/class.c
diff --git a/include/linux/usb/typec.h b/include/linux/usb/typec.h
index 54475323f83b..42c6b7c07a99 100644
--- a/include/linux/usb/typec.h
+++ b/include/linux/usb/typec.h
@@ -164,6 +164,7 @@ struct typec_plug_desc {
  * @type: The plug type from USB PD Cable VDO
  * @active: Is the cable active or passive
  * @identity: Result of Discover Identity command
+ * @pd_revision: USB Power Delivery Specification revision if supported
  *
  * Represents USB Type-C Cable attached to USB Type-C port.
  */
@@ -171,6 +172,8 @@ struct typec_cable_desc {
 	enum typec_plug_type	type;
 	unsigned int		active:1;
 	struct usb_pd_identity	*identity;
+	u16			pd_revision; /* 0300H = "3.0" */
+
 };
 
 /*
@@ -178,15 +181,22 @@ struct typec_cable_desc {
  * @usb_pd: USB Power Delivery support
  * @accessory: Audio, Debug or none.
  * @identity: Discover Identity command data
+ * @pd_revision: USB Power Delivery Specification Revision if supported
  *
  * Details about a partner that is attached to USB Type-C port. If @identity
  * member exists when partner is registered, a directory named "identity" is
  * created to sysfs for the partner device.
+ *
+ * @pd_revision is based on the setting of the "Specification Revision" field
+ * in the message header on the initial "Source Capabilities" message received
+ * from the partner, or a "Request" message received from the partner, depending
+ * on whether our port is a Sink or a Source.
  */
 struct typec_partner_desc {
 	unsigned int		usb_pd:1;
 	enum typec_accessory	accessory;
 	struct usb_pd_identity	*identity;
+	u16			pd_revision; /* 0300H = "3.0" */
 };
 
 /**
