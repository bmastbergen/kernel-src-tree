bpf: Compile out btf_parse_module() if module BTF is not enabled

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Andrii Nakryiko <andrii@kernel.org>
commit 7112d127984bd7b0c8ded7973b358829f16735f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/7112d127.failed

Make sure btf_parse_module() is compiled out if module BTFs are not enabled.

Fixes: 36e68442d1af ("bpf: Load and verify kernel module BTFs")
	Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20201111040645.903494-1-andrii@kernel.org
(cherry picked from commit 7112d127984bd7b0c8ded7973b358829f16735f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/btf.c
diff --cc kernel/bpf/btf.c
index b89fc7b7da7f,6b2d508b33d4..000000000000
--- a/kernel/bpf/btf.c
+++ b/kernel/bpf/btf.c
@@@ -4477,6 -4478,79 +4477,82 @@@ errout
  	return ERR_PTR(err);
  }
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_DEBUG_INFO_BTF_MODULES
+ 
+ static struct btf *btf_parse_module(const char *module_name, const void *data, unsigned int data_size)
+ {
+ 	struct btf_verifier_env *env = NULL;
+ 	struct bpf_verifier_log *log;
+ 	struct btf *btf = NULL, *base_btf;
+ 	int err;
+ 
+ 	base_btf = bpf_get_btf_vmlinux();
+ 	if (IS_ERR(base_btf))
+ 		return base_btf;
+ 	if (!base_btf)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	env = kzalloc(sizeof(*env), GFP_KERNEL | __GFP_NOWARN);
+ 	if (!env)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	log = &env->log;
+ 	log->level = BPF_LOG_KERNEL;
+ 
+ 	btf = kzalloc(sizeof(*btf), GFP_KERNEL | __GFP_NOWARN);
+ 	if (!btf) {
+ 		err = -ENOMEM;
+ 		goto errout;
+ 	}
+ 	env->btf = btf;
+ 
+ 	btf->base_btf = base_btf;
+ 	btf->start_id = base_btf->nr_types;
+ 	btf->start_str_off = base_btf->hdr.str_len;
+ 	btf->kernel_btf = true;
+ 	snprintf(btf->name, sizeof(btf->name), "%s", module_name);
+ 
+ 	btf->data = kvmalloc(data_size, GFP_KERNEL | __GFP_NOWARN);
+ 	if (!btf->data) {
+ 		err = -ENOMEM;
+ 		goto errout;
+ 	}
+ 	memcpy(btf->data, data, data_size);
+ 	btf->data_size = data_size;
+ 
+ 	err = btf_parse_hdr(env);
+ 	if (err)
+ 		goto errout;
+ 
+ 	btf->nohdr_data = btf->data + btf->hdr.hdr_len;
+ 
+ 	err = btf_parse_str_sec(env);
+ 	if (err)
+ 		goto errout;
+ 
+ 	err = btf_check_all_metas(env);
+ 	if (err)
+ 		goto errout;
+ 
+ 	btf_verifier_env_free(env);
+ 	refcount_set(&btf->refcnt, 1);
+ 	return btf;
+ 
+ errout:
+ 	btf_verifier_env_free(env);
+ 	if (btf) {
+ 		kvfree(btf->data);
+ 		kvfree(btf->types);
+ 		kfree(btf);
+ 	}
+ 	return ERR_PTR(err);
+ }
+ 
+ #endif /* CONFIG_DEBUG_INFO_BTF_MODULES */
+ 
++>>>>>>> 7112d127984b (bpf: Compile out btf_parse_module() if module BTF is not enabled)
  struct btf *bpf_prog_get_target_btf(const struct bpf_prog *prog)
  {
  	struct bpf_prog *tgt_prog = prog->aux->dst_prog;
* Unmerged path kernel/bpf/btf.c
