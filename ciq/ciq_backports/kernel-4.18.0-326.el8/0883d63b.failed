drm/i915/adl_s: Add ADL-S platform info and PCI ids

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Caz Yokoyama <caz.yokoyama@intel.com>
commit 0883d63b19bbd6bb09f27786e768c1af09aa0ede
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/0883d63b.failed

- Add the initial platform information for Alderlake-S.
- Specify ppgtt_size value
- Add dma_mask_size
- Add ADLS REVIDs
- HW tracking(Selective Update Tracking Enable) has been
  removed from ADLS. Disable PSR2 till we enable software/
  manual tracking.

v2:
- Add support for different ADLS SOC steppings to select
  correct GT/DISP stepping based on Bspec 53655 based on
  feedback from Matt Roper.(aswarup)

v3:
- Make display/gt steppings info generic for reuse with TGL and ADLS.
- Modify the macros to reuse tgl_revids_get()
- Add HTI support to adls device info.(mdroper)

v4:
- Rebase on TGL patch for applying WAs based on stepping info from
  Matt Roper's feedback.(aswarup)

v5:
- Replace macros with PCI IDs in revid to stepping table.

v6: remove stray adls_revids (Lucas)

Bspec: 53597
Bspec: 53648
Bspec: 53655
Bspec: 48028
Bspec: 53650
BSpec: 50422

	Cc: José Roberto de Souza <jose.souza@intel.com>
	Cc: Matt Roper <matthew.d.roper@intel.com>
	Cc: Lucas De Marchi <lucas.demarchi@intel.com>
	Cc: Anusha Srivatsa <anusha.srivatsa@intel.com>
	Cc: Jani Nikula <jani.nikula@intel.com>
	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Cc: Imre Deak <imre.deak@intel.com>
	Signed-off-by: Caz Yokoyama <caz.yokoyama@intel.com>
	Signed-off-by: Aditya Swarup <aditya.swarup@intel.com>
	Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
	Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210119192931.1116500-2-lucas.demarchi@intel.com
(cherry picked from commit 0883d63b19bbd6bb09f27786e768c1af09aa0ede)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/intel_workarounds.c
#	drivers/gpu/drm/i915/i915_drv.h
diff --cc drivers/gpu/drm/i915/gt/intel_workarounds.c
index 9cc4a89424f5,4b95ce5d2d3c..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_workarounds.c
+++ b/drivers/gpu/drm/i915/gt/intel_workarounds.c
@@@ -52,6 -53,45 +52,48 @@@
   * - Public functions to init or apply the given workaround type.
   */
  
++<<<<<<< HEAD
++=======
+ /*
+  * KBL revision ID ordering is bizarre; higher revision ID's map to lower
+  * steppings in some cases.  So rather than test against the revision ID
+  * directly, let's map that into our own range of increasing ID's that we
+  * can test against in a regular manner.
+  */
+ 
+ const struct i915_rev_steppings kbl_revids[] = {
+ 	[0] = { .gt_stepping = KBL_REVID_A0, .disp_stepping = KBL_REVID_A0 },
+ 	[1] = { .gt_stepping = KBL_REVID_B0, .disp_stepping = KBL_REVID_B0 },
+ 	[2] = { .gt_stepping = KBL_REVID_C0, .disp_stepping = KBL_REVID_B0 },
+ 	[3] = { .gt_stepping = KBL_REVID_D0, .disp_stepping = KBL_REVID_B0 },
+ 	[4] = { .gt_stepping = KBL_REVID_F0, .disp_stepping = KBL_REVID_C0 },
+ 	[5] = { .gt_stepping = KBL_REVID_C0, .disp_stepping = KBL_REVID_B1 },
+ 	[6] = { .gt_stepping = KBL_REVID_D1, .disp_stepping = KBL_REVID_B1 },
+ 	[7] = { .gt_stepping = KBL_REVID_G0, .disp_stepping = KBL_REVID_C0 },
+ };
+ 
+ const struct i915_rev_steppings tgl_uy_revid_step_tbl[] = {
+ 	[0] = { .gt_stepping = STEP_A0, .disp_stepping = STEP_A0 },
+ 	[1] = { .gt_stepping = STEP_B0, .disp_stepping = STEP_C0 },
+ 	[2] = { .gt_stepping = STEP_B1, .disp_stepping = STEP_C0 },
+ 	[3] = { .gt_stepping = STEP_C0, .disp_stepping = STEP_D0 },
+ };
+ 
+ /* Same GT stepping between tgl_uy_revids and tgl_revids don't mean the same HW */
+ const struct i915_rev_steppings tgl_revid_step_tbl[] = {
+ 	[0] = { .gt_stepping = STEP_A0, .disp_stepping = STEP_B0 },
+ 	[1] = { .gt_stepping = STEP_B0, .disp_stepping = STEP_D0 },
+ };
+ 
+ const struct i915_rev_steppings adls_revid_step_tbl[] = {
+ 	[0x0] = { .gt_stepping = STEP_A0, .disp_stepping = STEP_A0 },
+ 	[0x1] = { .gt_stepping = STEP_A0, .disp_stepping = STEP_A2 },
+ 	[0x4] = { .gt_stepping = STEP_B0, .disp_stepping = STEP_B0 },
+ 	[0x8] = { .gt_stepping = STEP_C0, .disp_stepping = STEP_B0 },
+ 	[0xC] = { .gt_stepping = STEP_D0, .disp_stepping = STEP_C0 },
+ };
+ 
++>>>>>>> 0883d63b19bb (drm/i915/adl_s: Add ADL-S platform info and PCI ids)
  static void wa_init_start(struct i915_wa_list *wal, const char *name, const char *engine_name)
  {
  	wal->name = name;
diff --cc drivers/gpu/drm/i915/i915_drv.h
index b81b4c05e6c3,3b75b5ee4c88..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -1554,16 -1554,66 +1555,74 @@@ IS_SUBPLATFORM(const struct drm_i915_pr
  	(IS_ICELAKE(p) && IS_REVID(p, since, until))
  
  #define EHL_REVID_A0            0x0
 -#define EHL_REVID_B0            0x1
  
 -#define IS_JSL_EHL_REVID(p, since, until) \
 -	(IS_JSL_EHL(p) && IS_REVID(p, since, until))
 +#define IS_EHL_REVID(p, since, until) \
 +	(IS_ELKHARTLAKE(p) && IS_REVID(p, since, until))
 +
++<<<<<<< HEAD
 +#define TGL_REVID_A0		0x0
 +#define TGL_REVID_B0		0x1
 +#define TGL_REVID_C0		0x2
  
 +#define IS_TGL_REVID(p, since, until) \
 +	(IS_TIGERLAKE(p) && IS_REVID(p, since, until))
++=======
+ enum {
+ 	STEP_A0,
+ 	STEP_A2,
+ 	STEP_B0,
+ 	STEP_B1,
+ 	STEP_C0,
+ 	STEP_D0,
+ };
+ 
+ #define TGL_UY_REVID_STEP_TBL_SIZE	4
+ #define TGL_REVID_STEP_TBL_SIZE		2
+ #define ADLS_REVID_STEP_TBL_SIZE	13
+ 
+ extern const struct i915_rev_steppings tgl_uy_revid_step_tbl[TGL_UY_REVID_STEP_TBL_SIZE];
+ extern const struct i915_rev_steppings tgl_revid_step_tbl[TGL_REVID_STEP_TBL_SIZE];
+ extern const struct i915_rev_steppings adls_revid_step_tbl[ADLS_REVID_STEP_TBL_SIZE];
+ 
+ static inline const struct i915_rev_steppings *
+ tgl_stepping_get(struct drm_i915_private *dev_priv)
+ {
+ 	u8 revid = INTEL_REVID(dev_priv);
+ 	u8 size;
+ 	const struct i915_rev_steppings *revid_step_tbl;
+ 
+ 	if (IS_ALDERLAKE_S(dev_priv)) {
+ 		revid_step_tbl = adls_revid_step_tbl;
+ 		size = ARRAY_SIZE(adls_revid_step_tbl);
+ 	} else if (IS_TGL_U(dev_priv) || IS_TGL_Y(dev_priv)) {
+ 		revid_step_tbl = tgl_uy_revid_step_tbl;
+ 		size = ARRAY_SIZE(tgl_uy_revid_step_tbl);
+ 	} else {
+ 		revid_step_tbl = tgl_revid_step_tbl;
+ 		size = ARRAY_SIZE(tgl_revid_step_tbl);
+ 	}
+ 
+ 	revid = min_t(u8, revid, size - 1);
+ 
+ 	return &revid_step_tbl[revid];
+ }
+ 
+ #define IS_TGL_DISP_STEPPING(p, since, until) \
+ 	(IS_TIGERLAKE(p) && \
+ 	 tgl_stepping_get(p)->disp_stepping >= (since) && \
+ 	 tgl_stepping_get(p)->disp_stepping <= (until))
+ 
+ #define IS_TGL_UY_GT_STEPPING(p, since, until) \
+ 	((IS_TGL_U(p) || IS_TGL_Y(p)) && \
+ 	 tgl_stepping_get(p)->gt_stepping >= (since) && \
+ 	 tgl_stepping_get(p)->gt_stepping <= (until))
+ 
+ #define IS_TGL_GT_STEPPING(p, since, until) \
+ 	(IS_TIGERLAKE(p) && \
+ 	 !(IS_TGL_U(p) || IS_TGL_Y(p)) && \
+ 	 tgl_stepping_get(p)->gt_stepping >= (since) && \
+ 	 tgl_stepping_get(p)->gt_stepping <= (until))
++>>>>>>> 0883d63b19bb (drm/i915/adl_s: Add ADL-S platform info and PCI ids)
  
  #define RKL_REVID_A0		0x0
  #define RKL_REVID_B0		0x1
* Unmerged path drivers/gpu/drm/i915/gt/intel_workarounds.c
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
diff --git a/drivers/gpu/drm/i915/i915_pci.c b/drivers/gpu/drm/i915/i915_pci.c
index e16ec21e269f..2a77814ef6e3 100644
--- a/drivers/gpu/drm/i915/i915_pci.c
+++ b/drivers/gpu/drm/i915/i915_pci.c
@@ -912,6 +912,18 @@ static const struct intel_device_info dg1_info __maybe_unused = {
 		BIT(VCS0) | BIT(VCS2),
 };
 
+static const struct intel_device_info adl_s_info = {
+	GEN12_FEATURES,
+	PLATFORM(INTEL_ALDERLAKE_S),
+	.pipe_mask = BIT(PIPE_A) | BIT(PIPE_B) | BIT(PIPE_C) | BIT(PIPE_D),
+	.require_force_probe = 1,
+	.display.has_hti = 1,
+	.display.has_psr_hw_tracking = 0,
+	.platform_engine_mask =
+		BIT(RCS0) | BIT(BCS0) | BIT(VECS0) | BIT(VCS0) | BIT(VCS2),
+	.dma_mask_size = 46,
+};
+
 #undef GEN
 #undef PLATFORM
 
@@ -987,6 +999,7 @@ static const struct pci_device_id pciidlist[] = {
 	INTEL_EHL_IDS(&ehl_info),
 	INTEL_TGL_12_IDS(&tgl_info),
 	INTEL_RKL_IDS(&rkl_info),
+	INTEL_ADLS_IDS(&adl_s_info),
 	{0, 0, 0}
 };
 MODULE_DEVICE_TABLE(pci, pciidlist);
diff --git a/drivers/gpu/drm/i915/intel_device_info.c b/drivers/gpu/drm/i915/intel_device_info.c
index 40c590db3c76..a1a973a32c23 100644
--- a/drivers/gpu/drm/i915/intel_device_info.c
+++ b/drivers/gpu/drm/i915/intel_device_info.c
@@ -65,6 +65,7 @@ static const char * const platform_names[] = {
 	PLATFORM_NAME(TIGERLAKE),
 	PLATFORM_NAME(ROCKETLAKE),
 	PLATFORM_NAME(DG1),
+	PLATFORM_NAME(ALDERLAKE_S),
 };
 #undef PLATFORM_NAME
 
diff --git a/drivers/gpu/drm/i915/intel_device_info.h b/drivers/gpu/drm/i915/intel_device_info.h
index 6a3d607218aa..bfffb64fd542 100644
--- a/drivers/gpu/drm/i915/intel_device_info.h
+++ b/drivers/gpu/drm/i915/intel_device_info.h
@@ -83,6 +83,7 @@ enum intel_platform {
 	INTEL_TIGERLAKE,
 	INTEL_ROCKETLAKE,
 	INTEL_DG1,
+	INTEL_ALDERLAKE_S,
 	INTEL_MAX_PLATFORMS
 };
 
diff --git a/include/drm/i915_pciids.h b/include/drm/i915_pciids.h
index 96e408b4bdc9..617454707eaa 100644
--- a/include/drm/i915_pciids.h
+++ b/include/drm/i915_pciids.h
@@ -622,4 +622,15 @@
 #define INTEL_DG1_IDS(info) \
 	INTEL_VGA_DEVICE(0x4905, info)
 
+/* ADL-S */
+#define INTEL_ADLS_IDS(info) \
+	INTEL_VGA_DEVICE(0x4680, info), \
+	INTEL_VGA_DEVICE(0x4681, info), \
+	INTEL_VGA_DEVICE(0x4682, info), \
+	INTEL_VGA_DEVICE(0x4683, info), \
+	INTEL_VGA_DEVICE(0x4690, info), \
+	INTEL_VGA_DEVICE(0x4691, info), \
+	INTEL_VGA_DEVICE(0x4692, info), \
+	INTEL_VGA_DEVICE(0x4693, info)
+
 #endif /* _I915_PCIIDS_H */
