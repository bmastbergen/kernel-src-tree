net/mlx5: E-switch, Create vport miss group only if src rewrite is supported

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Maor Dickman <maord@nvidia.com>
commit e929e3da537e3c2d97aabbd00530040997dde9ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/e929e3da.failed

Create send to vport miss group was added in order to support traffic
recirculation to root table with metadata source rewrite.
This group is created also in case source rewrite isn't supported.

Fixed by creating send to vport miss group only if source rewrite is
supported by FW.

Fixes: 8e404fefa58b ("net/mlx5e: Match recirculated packet miss in slow table using reg_c1")
	Signed-off-by: Maor Dickman <maord@nvidia.com>
	Reviewed-by: Vlad Buslov <vladbu@nvidia.com>
	Reviewed-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit e929e3da537e3c2d97aabbd00530040997dde9ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 1aa743021f64,d4a2f8d1ee9f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@@ -389,8 -557,12 +397,15 @@@ esw_setup_dests(struct mlx5_flow_destin
  	struct mlx5_fs_chains *chains = esw_chains(esw);
  	int err = 0;
  
++<<<<<<< HEAD
++=======
+ 	if (!mlx5_eswitch_termtbl_required(esw, attr, flow_act, spec) &&
+ 	    esw_src_port_rewrite_supported(esw))
+ 		attr->flags |= MLX5_ESW_ATTR_FLAG_SRC_REWRITE;
+ 
++>>>>>>> e929e3da537e (net/mlx5: E-switch, Create vport miss group only if src rewrite is supported)
  	if (attr->dest_ft) {
 -		esw_setup_ft_dest(dest, flow_act, esw, attr, spec, *i);
 +		esw_setup_ft_dest(dest, flow_act, attr, *i);
  		(*i)++;
  	} else if (attr->flags & MLX5_ESW_ATTR_FLAG_SLOW_PATH) {
  		esw_setup_slow_path_dest(dest, flow_act, chains, *i);
@@@ -1446,6 -1722,42 +1461,45 @@@ static int esw_create_offloads_fdb_tabl
  	}
  	esw->fdb_table.offloads.send_to_vport_grp = g;
  
++<<<<<<< HEAD
++=======
+ 	if (esw_src_port_rewrite_supported(esw)) {
+ 		/* meta send to vport */
+ 		memset(flow_group_in, 0, inlen);
+ 		MLX5_SET(create_flow_group_in, flow_group_in, match_criteria_enable,
+ 			 MLX5_MATCH_MISC_PARAMETERS_2);
+ 
+ 		match_criteria = MLX5_ADDR_OF(create_flow_group_in, flow_group_in, match_criteria);
+ 
+ 		MLX5_SET(fte_match_param, match_criteria,
+ 			 misc_parameters_2.metadata_reg_c_0,
+ 			 mlx5_eswitch_get_vport_metadata_mask());
+ 		MLX5_SET(fte_match_param, match_criteria,
+ 			 misc_parameters_2.metadata_reg_c_1, ESW_TUN_MASK);
+ 
+ 		num_vfs = esw->esw_funcs.num_vfs;
+ 		if (num_vfs) {
+ 			MLX5_SET(create_flow_group_in, flow_group_in, start_flow_index, ix);
+ 			MLX5_SET(create_flow_group_in, flow_group_in,
+ 				 end_flow_index, ix + num_vfs - 1);
+ 			ix += num_vfs;
+ 
+ 			g = mlx5_create_flow_group(fdb, flow_group_in);
+ 			if (IS_ERR(g)) {
+ 				err = PTR_ERR(g);
+ 				esw_warn(dev, "Failed to create send-to-vport meta flow group err(%d)\n",
+ 					 err);
+ 				goto send_vport_meta_err;
+ 			}
+ 			esw->fdb_table.offloads.send_to_vport_meta_grp = g;
+ 
+ 			err = mlx5_eswitch_add_send_to_vport_meta_rules(esw);
+ 			if (err)
+ 				goto meta_rule_err;
+ 		}
+ 	}
+ 
++>>>>>>> e929e3da537e (net/mlx5: E-switch, Create vport miss group only if src rewrite is supported)
  	if (MLX5_CAP_ESW(esw->dev, merged_eswitch)) {
  		/* create peer esw miss group */
  		memset(flow_group_in, 0, inlen);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
