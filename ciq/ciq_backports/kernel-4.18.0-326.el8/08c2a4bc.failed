ALSA: hda: move Intel SoundWire ACPI scan to dedicated module

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 08c2a4bc9f2acaefbd0158866db5cb3238a68674
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/08c2a4bc.failed

The ACPI scan capabilities is called from the intel-dspconfig as well
as the SOF/HDaudio drivers. This creates dependencies and randconfig issues
when HDaudio and SOF/SoundWire are not all configured as modules.

To simplify Kconfig dependencies between HDAudio, SoundWire, SOF and
intel-dspconfig, move the ACPI scan helpers to a dedicated
module. This follows the same idea as NHLT helpers which are already
handled as a dedicated module.

The only functional change is that the kernel parameter to filter
links is now handled by a different module, but that was only provided
for developers needing work-arounds for early BIOS releases.

	Reported-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
	Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
	Reviewed-by: Bard Liao <bard.liao@intel.com>
	Acked-by: Mark Brown <broonie@kernel.org>
	Acked-by: Vinod Koul <vkoul@kernel.org>
Link: https://lore.kernel.org/r/20210302003125.1178419-7-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 08c2a4bc9f2acaefbd0158866db5cb3238a68674)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/soundwire/intel_init.c
#	sound/hda/intel-dsp-config.c
#	sound/soc/sof/intel/hda.c
diff --cc drivers/soundwire/intel_init.c
index d48262ade568,05b726cdfebc..000000000000
--- a/drivers/soundwire/intel_init.c
+++ b/drivers/soundwire/intel_init.c
@@@ -366,65 -259,6 +268,68 @@@ sdw_intel_startup_controller(struct sdw
  	return 0;
  }
  
++<<<<<<< HEAD
 +static acpi_status sdw_intel_acpi_cb(acpi_handle handle, u32 level,
 +				     void *cdata, void **return_value)
 +{
 +	struct sdw_intel_acpi_info *info = cdata;
 +	struct acpi_device *adev;
 +	acpi_status status;
 +	u64 adr;
 +
 +	status = acpi_evaluate_integer(handle, METHOD_NAME__ADR, NULL, &adr);
 +	if (ACPI_FAILURE(status))
 +		return AE_OK; /* keep going */
 +
 +	if (acpi_bus_get_device(handle, &adev)) {
 +		pr_err("%s: Couldn't find ACPI handle\n", __func__);
 +		return AE_NOT_FOUND;
 +	}
 +
 +	info->handle = handle;
 +
 +	/*
 +	 * On some Intel platforms, multiple children of the HDAS
 +	 * device can be found, but only one of them is the SoundWire
 +	 * controller. The SNDW device is always exposed with
 +	 * Name(_ADR, 0x40000000), with bits 31..28 representing the
 +	 * SoundWire link so filter accordingly
 +	 */
 +	if (FIELD_GET(GENMASK(31, 28), adr) != SDW_LINK_TYPE)
 +		return AE_OK; /* keep going */
 +
 +	/* device found, stop namespace walk */
 +	return AE_CTRL_TERMINATE;
 +}
 +
 +/**
 + * sdw_intel_acpi_scan() - SoundWire Intel init routine
 + * @parent_handle: ACPI parent handle
 + * @info: description of what firmware/DSDT tables expose
 + *
 + * This scans the namespace and queries firmware to figure out which
 + * links to enable. A follow-up use of sdw_intel_probe() and
 + * sdw_intel_startup() is required for creation of devices and bus
 + * startup
 + */
 +int sdw_intel_acpi_scan(acpi_handle *parent_handle,
 +			struct sdw_intel_acpi_info *info)
 +{
 +	acpi_status status;
 +
 +	status = acpi_walk_namespace(ACPI_TYPE_DEVICE,
 +				     parent_handle, 1,
 +				     sdw_intel_acpi_cb,
 +				     NULL, info, NULL);
 +	if (ACPI_FAILURE(status))
 +		return -ENODEV;
 +
 +	return sdw_intel_scan_controller(info);
 +}
 +EXPORT_SYMBOL(sdw_intel_acpi_scan);
 +
++=======
++>>>>>>> 08c2a4bc9f2a (ALSA: hda: move Intel SoundWire ACPI scan to dedicated module)
  /**
   * sdw_intel_probe() - SoundWire Intel probe routine
   * @res: resource data
diff --cc sound/hda/intel-dsp-config.c
index e06ebf9b49ee,ab5ff7867eb9..000000000000
--- a/sound/hda/intel-dsp-config.c
+++ b/sound/hda/intel-dsp-config.c
@@@ -561,3 -557,4 +561,7 @@@ EXPORT_SYMBOL_GPL(snd_intel_acpi_dsp_dr
  
  MODULE_LICENSE("GPL v2");
  MODULE_DESCRIPTION("Intel DSP config driver");
++<<<<<<< HEAD
++=======
+ MODULE_IMPORT_NS(SND_INTEL_SOUNDWIRE_ACPI);
++>>>>>>> 08c2a4bc9f2a (ALSA: hda: move Intel SoundWire ACPI scan to dedicated module)
diff --cc sound/soc/sof/intel/hda.c
index 3c3023948214,1d29b1fd6a94..000000000000
--- a/sound/soc/sof/intel/hda.c
+++ b/sound/soc/sof/intel/hda.c
@@@ -1258,4 -1260,24 +1258,13 @@@ void hda_machine_select(struct snd_sof_
  		dev_warn(sdev->dev, "warning: No matching ASoC machine driver found\n");
  }
  
 -int hda_pci_intel_probe(struct pci_dev *pci, const struct pci_device_id *pci_id)
 -{
 -	int ret;
 -
 -	ret = snd_intel_dsp_driver_probe(pci);
 -	if (ret != SND_INTEL_DSP_DRIVER_ANY && ret != SND_INTEL_DSP_DRIVER_SOF) {
 -		dev_dbg(&pci->dev, "SOF PCI driver not selected, aborting probe\n");
 -		return -ENODEV;
 -	}
 -
 -	return sof_pci_probe(pci, pci_id);
 -}
 -EXPORT_SYMBOL_NS(hda_pci_intel_probe, SND_SOC_SOF_INTEL_HDA_COMMON);
 -
  MODULE_LICENSE("Dual BSD/GPL");
++<<<<<<< HEAD
++=======
+ MODULE_IMPORT_NS(SND_SOC_SOF_PCI_DEV);
+ MODULE_IMPORT_NS(SND_SOC_SOF_HDA_AUDIO_CODEC);
+ MODULE_IMPORT_NS(SND_SOC_SOF_HDA_AUDIO_CODEC_I915);
+ MODULE_IMPORT_NS(SND_SOC_SOF_XTENSA);
+ MODULE_IMPORT_NS(SND_INTEL_SOUNDWIRE_ACPI);
+ MODULE_IMPORT_NS(SOUNDWIRE_INTEL_INIT);
++>>>>>>> 08c2a4bc9f2a (ALSA: hda: move Intel SoundWire ACPI scan to dedicated module)
diff --git a/drivers/soundwire/intel.h b/drivers/soundwire/intel.h
index 76820d0b9deb..06bac8ba14e9 100644
--- a/drivers/soundwire/intel.h
+++ b/drivers/soundwire/intel.h
@@ -48,8 +48,6 @@ struct sdw_intel {
 #endif
 };
 
-#define SDW_INTEL_QUIRK_MASK_BUS_DISABLE      BIT(1)
-
 int intel_master_startup(struct platform_device *pdev);
 int intel_master_process_wakeen_event(struct platform_device *pdev);
 
* Unmerged path drivers/soundwire/intel_init.c
diff --git a/include/linux/soundwire/sdw_intel.h b/include/linux/soundwire/sdw_intel.h
index 120ffddc03d2..3a5446ac014a 100644
--- a/include/linux/soundwire/sdw_intel.h
+++ b/include/linux/soundwire/sdw_intel.h
@@ -187,4 +187,6 @@ void sdw_intel_enable_irq(void __iomem *mmio_base, bool enable);
 
 irqreturn_t sdw_intel_thread(int irq, void *dev_id);
 
+#define SDW_INTEL_QUIRK_MASK_BUS_DISABLE      BIT(1)
+
 #endif
diff --git a/sound/hda/Kconfig b/sound/hda/Kconfig
index f192162e2ff3..741179ccbd4e 100644
--- a/sound/hda/Kconfig
+++ b/sound/hda/Kconfig
@@ -43,9 +43,13 @@ config SND_INTEL_NHLT
 config SND_INTEL_DSP_CONFIG
 	tristate
 	select SND_INTEL_NHLT if ACPI
+	select SND_INTEL_SOUNDWIRE_ACPI if ACPI
 	# this config should be selected only for Intel DSP platforms.
 	# A fallback is provided so that the code compiles in all cases.
 
+config SND_INTEL_SOUNDWIRE_ACPI
+	tristate
+
 config SND_INTEL_BYT_PREFER_SOF
 	bool "Prefer SOF driver over SST on BY/CHT platforms"
 	depends on SND_SST_ATOM_HIFI2_PLATFORM_ACPI && SND_SOC_SOF_BAYTRAIL
diff --git a/sound/hda/Makefile b/sound/hda/Makefile
index 601e617918b8..78f487a635f8 100644
--- a/sound/hda/Makefile
+++ b/sound/hda/Makefile
@@ -17,3 +17,6 @@ obj-$(CONFIG_SND_HDA_EXT_CORE) += ext/
 snd-intel-dspcfg-objs := intel-dsp-config.o
 snd-intel-dspcfg-$(CONFIG_SND_INTEL_NHLT) += intel-nhlt.o
 obj-$(CONFIG_SND_INTEL_DSP_CONFIG) += snd-intel-dspcfg.o
+
+snd-intel-sdw-acpi-objs := intel-sdw-acpi.o
+obj-$(CONFIG_SND_INTEL_SOUNDWIRE_ACPI) += snd-intel-sdw-acpi.o
* Unmerged path sound/hda/intel-dsp-config.c
diff --git a/sound/hda/intel-sdw-acpi.c b/sound/hda/intel-sdw-acpi.c
new file mode 100644
index 000000000000..6359936a1503
--- /dev/null
+++ b/sound/hda/intel-sdw-acpi.c
@@ -0,0 +1,174 @@
+// SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
+// Copyright(c) 2015-2021 Intel Corporation.
+
+/*
+ * SDW Intel ACPI scan helpers
+ */
+
+#include <linux/acpi.h>
+#include <linux/export.h>
+#include <linux/module.h>
+#include <linux/soundwire/sdw_intel.h>
+#include <linux/string.h>
+
+#define SDW_LINK_TYPE		4 /* from Intel ACPI documentation */
+#define SDW_MAX_LINKS		4
+
+static int ctrl_link_mask;
+module_param_named(sdw_link_mask, ctrl_link_mask, int, 0444);
+MODULE_PARM_DESC(sdw_link_mask, "Intel link mask (one bit per link)");
+
+static bool is_link_enabled(struct fwnode_handle *fw_node, int i)
+{
+	struct fwnode_handle *link;
+	char name[32];
+	u32 quirk_mask = 0;
+
+	/* Find master handle */
+	snprintf(name, sizeof(name),
+		 "mipi-sdw-link-%d-subproperties", i);
+
+	link = fwnode_get_named_child_node(fw_node, name);
+	if (!link)
+		return false;
+
+	fwnode_property_read_u32(link,
+				 "intel-quirk-mask",
+				 &quirk_mask);
+
+	if (quirk_mask & SDW_INTEL_QUIRK_MASK_BUS_DISABLE)
+		return false;
+
+	return true;
+}
+
+static int
+sdw_intel_scan_controller(struct sdw_intel_acpi_info *info)
+{
+	struct acpi_device *adev;
+	int ret, i;
+	u8 count;
+
+	if (acpi_bus_get_device(info->handle, &adev))
+		return -EINVAL;
+
+	/* Found controller, find links supported */
+	count = 0;
+	ret = fwnode_property_read_u8_array(acpi_fwnode_handle(adev),
+					    "mipi-sdw-master-count", &count, 1);
+
+	/*
+	 * In theory we could check the number of links supported in
+	 * hardware, but in that step we cannot assume SoundWire IP is
+	 * powered.
+	 *
+	 * In addition, if the BIOS doesn't even provide this
+	 * 'master-count' property then all the inits based on link
+	 * masks will fail as well.
+	 *
+	 * We will check the hardware capabilities in the startup() step
+	 */
+
+	if (ret) {
+		dev_err(&adev->dev,
+			"Failed to read mipi-sdw-master-count: %d\n", ret);
+		return -EINVAL;
+	}
+
+	/* Check count is within bounds */
+	if (count > SDW_MAX_LINKS) {
+		dev_err(&adev->dev, "Link count %d exceeds max %d\n",
+			count, SDW_MAX_LINKS);
+		return -EINVAL;
+	}
+
+	if (!count) {
+		dev_warn(&adev->dev, "No SoundWire links detected\n");
+		return -EINVAL;
+	}
+	dev_dbg(&adev->dev, "ACPI reports %d SDW Link devices\n", count);
+
+	info->count = count;
+	info->link_mask = 0;
+
+	for (i = 0; i < count; i++) {
+		if (ctrl_link_mask && !(ctrl_link_mask & BIT(i))) {
+			dev_dbg(&adev->dev,
+				"Link %d masked, will not be enabled\n", i);
+			continue;
+		}
+
+		if (!is_link_enabled(acpi_fwnode_handle(adev), i)) {
+			dev_dbg(&adev->dev,
+				"Link %d not selected in firmware\n", i);
+			continue;
+		}
+
+		info->link_mask |= BIT(i);
+	}
+
+	return 0;
+}
+
+static acpi_status sdw_intel_acpi_cb(acpi_handle handle, u32 level,
+				     void *cdata, void **return_value)
+{
+	struct sdw_intel_acpi_info *info = cdata;
+	struct acpi_device *adev;
+	acpi_status status;
+	u64 adr;
+
+	status = acpi_evaluate_integer(handle, METHOD_NAME__ADR, NULL, &adr);
+	if (ACPI_FAILURE(status))
+		return AE_OK; /* keep going */
+
+	if (acpi_bus_get_device(handle, &adev)) {
+		pr_err("%s: Couldn't find ACPI handle\n", __func__);
+		return AE_NOT_FOUND;
+	}
+
+	info->handle = handle;
+
+	/*
+	 * On some Intel platforms, multiple children of the HDAS
+	 * device can be found, but only one of them is the SoundWire
+	 * controller. The SNDW device is always exposed with
+	 * Name(_ADR, 0x40000000), with bits 31..28 representing the
+	 * SoundWire link so filter accordingly
+	 */
+	if (FIELD_GET(GENMASK(31, 28), adr) != SDW_LINK_TYPE)
+		return AE_OK; /* keep going */
+
+	/* device found, stop namespace walk */
+	return AE_CTRL_TERMINATE;
+}
+
+/**
+ * sdw_intel_acpi_scan() - SoundWire Intel init routine
+ * @parent_handle: ACPI parent handle
+ * @info: description of what firmware/DSDT tables expose
+ *
+ * This scans the namespace and queries firmware to figure out which
+ * links to enable. A follow-up use of sdw_intel_probe() and
+ * sdw_intel_startup() is required for creation of devices and bus
+ * startup
+ */
+int sdw_intel_acpi_scan(acpi_handle *parent_handle,
+			struct sdw_intel_acpi_info *info)
+{
+	acpi_status status;
+
+	info->handle = NULL;
+	status = acpi_walk_namespace(ACPI_TYPE_DEVICE,
+				     parent_handle, 1,
+				     sdw_intel_acpi_cb,
+				     NULL, info, NULL);
+	if (ACPI_FAILURE(status) || info->handle == NULL)
+		return -ENODEV;
+
+	return sdw_intel_scan_controller(info);
+}
+EXPORT_SYMBOL_NS(sdw_intel_acpi_scan, SND_INTEL_SOUNDWIRE_ACPI);
+
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_DESCRIPTION("Intel Soundwire ACPI helpers");
diff --git a/sound/soc/sof/intel/Kconfig b/sound/soc/sof/intel/Kconfig
index 058a5069ed74..76f63c699487 100644
--- a/sound/soc/sof/intel/Kconfig
+++ b/sound/soc/sof/intel/Kconfig
@@ -346,6 +346,7 @@ config SND_SOC_SOF_INTEL_SOUNDWIRE
 	depends on ACPI && SOUNDWIRE
 	depends on !(SOUNDWIRE=m && SND_SOC_SOF_INTEL_SOUNDWIRE_LINK_BASELINE=y)
 	select SOUNDWIRE_INTEL
+	select SND_INTEL_SOUNDWIRE_ACPI
 	help
 	  This adds support for SoundWire with Sound Open Firmware
 	  for Intel(R) platforms.
* Unmerged path sound/soc/sof/intel/hda.c
