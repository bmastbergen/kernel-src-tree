usb: typec: Manage SVDM version

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Kyle Tso <kyletso@google.com>
commit 3c5960c0559c44c6628341a82167ee0d3e40ee50
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/3c5960c0.failed

PD Spec Revision 3.0 Version 2.0 + ECNs 2020-12-10
  6.4.4.2.3 Structured VDM Version
  "The Structured VDM Version field of the Discover Identity Command
  sent and received during VDM discovery Shall be used to determine the
  lowest common Structured VDM Version supported by the Port Partners or
  Cable Plug and Shall continue to operate using this Specification
  Revision until they are Detached."

Add a variable in typec_capability to specify the highest SVDM version
supported by the port and another variable in typec_partner to cache the
negotiated SVDM version between the port and the partner.

Also add setter/getter functions for the negotiated SVDM version.

	Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Signed-off-by: Kyle Tso <kyletso@google.com>
Link: https://lore.kernel.org/r/20210205033415.3320439-2-kyletso@google.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 3c5960c0559c44c6628341a82167ee0d3e40ee50)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/class.c
diff --cc drivers/usb/typec/class.c
index 428d0d2242c9,45f0bf65e9ab..000000000000
--- a/drivers/usb/typec/class.c
+++ b/drivers/usb/typec/class.c
@@@ -35,6 -37,8 +35,11 @@@ struct typec_partner 
  	enum typec_accessory		accessory;
  	struct ida			mode_ids;
  	int				num_altmodes;
++<<<<<<< HEAD
++=======
+ 	u16				pd_revision; /* 0300H = "3.0" */
+ 	enum usb_pd_svdm_ver		svdm_version;
++>>>>>>> 3c5960c0559c (usb: typec: Manage SVDM version)
  };
  
  struct typec_port {
@@@ -751,6 -862,8 +770,11 @@@ struct typec_partner *typec_register_pa
  	partner->usb_pd = desc->usb_pd;
  	partner->accessory = desc->accessory;
  	partner->num_altmodes = -1;
++<<<<<<< HEAD
++=======
+ 	partner->pd_revision = desc->pd_revision;
+ 	partner->svdm_version = port->cap->svdm_version;
++>>>>>>> 3c5960c0559c (usb: typec: Manage SVDM version)
  
  	if (desc->identity) {
  		/*
* Unmerged path drivers/usb/typec/class.c
diff --git a/include/linux/usb/typec.h b/include/linux/usb/typec.h
index 152db63ca7f3..680ca21288df 100644
--- a/include/linux/usb/typec.h
+++ b/include/linux/usb/typec.h
@@ -207,12 +207,19 @@ struct typec_operations {
 			     enum typec_port_type type);
 };
 
+enum usb_pd_svdm_ver {
+	SVDM_VER_1_0 = 0,
+	SVDM_VER_2_0 = 1,
+	SVDM_VER_MAX = SVDM_VER_2_0,
+};
+
 /*
  * struct typec_capability - USB Type-C Port Capabilities
  * @type: Supported power role of the port
  * @data: Supported data role of the port
  * @revision: USB Type-C Specification release. Binary coded decimal
  * @pd_revision: USB Power Delivery Specification revision if supported
+ * @svdm_version: USB PD Structured VDM version if supported
  * @prefer_role: Initial role preference (DRP ports).
  * @accessory: Supported Accessory Modes
  * @fwnode: Optional fwnode of the port
@@ -226,6 +233,7 @@ struct typec_capability {
 	enum typec_port_data	data;
 	u16			revision; /* 0120H = "1.2" */
 	u16			pd_revision; /* 0300H = "3.0" */
+	enum usb_pd_svdm_ver	svdm_version;
 	int			prefer_role;
 	enum typec_accessory	accessory[TYPEC_MAX_ACCESSORY];
 	unsigned int		orientation_aware:1;
@@ -276,4 +284,8 @@ int typec_find_orientation(const char *name);
 int typec_find_port_power_role(const char *name);
 int typec_find_power_role(const char *name);
 int typec_find_port_data_role(const char *name);
+
+void typec_partner_set_svdm_version(struct typec_partner *partner,
+				    enum usb_pd_svdm_ver svdm_version);
+int typec_get_negotiated_svdm_version(struct typec_port *port);
 #endif /* __LINUX_USB_TYPEC_H */
diff --git a/include/linux/usb/typec_altmode.h b/include/linux/usb/typec_altmode.h
index 5e0a7b7647c3..65933cbe9129 100644
--- a/include/linux/usb/typec_altmode.h
+++ b/include/linux/usb/typec_altmode.h
@@ -132,6 +132,16 @@ typec_altmode_get_orientation(struct typec_altmode *altmode)
 	return typec_get_orientation(typec_altmode2port(altmode));
 }
 
+/**
+ * typec_altmode_get_svdm_version - Get negotiated SVDM version
+ * @altmode: Handle to the alternate mode
+ */
+static inline int
+typec_altmode_get_svdm_version(struct typec_altmode *altmode)
+{
+	return typec_get_negotiated_svdm_version(typec_altmode2port(altmode));
+}
+
 /**
  * struct typec_altmode_driver - USB Type-C alternate mode device driver
  * @id_table: Null terminated array of SVIDs
