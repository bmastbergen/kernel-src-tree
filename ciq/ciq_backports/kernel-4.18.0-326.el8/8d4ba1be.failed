ASoC: SOF: pci: split PCI into different drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
commit 8d4ba1be3d2257606e04aff412829d8972670750
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/8d4ba1be.failed

Move PCI IDs and device-specific definitions out of common code. No
functionality change for now, just code split and removal of
IF_ENABLED() which made the configurations too complicated in case of
reuse of IP across generations.

Additional changes to address the DSP_CONFIG case and SoundWire
depends/select confusions are provided in follow-up patches.

	Suggested-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
	Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
	Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
	Reviewed-by: Bard Liao <bard.liao@intel.com>
	Acked-by: Mark Brown <broonie@kernel.org>
	Acked-by: Vinod Koul <vkoul@kernel.org>
Link: https://lore.kernel.org/r/20210302003125.1178419-4-pierre-louis.bossart@linux.intel.com
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 8d4ba1be3d2257606e04aff412829d8972670750)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/sof/intel/Kconfig
#	sound/soc/sof/sof-pci-dev.c
diff --cc sound/soc/sof/intel/Kconfig
index adbce59b6434,7dcb61ba5763..000000000000
--- a/sound/soc/sof/intel/Kconfig
+++ b/sound/soc/sof/intel/Kconfig
@@@ -9,30 -9,6 +9,33 @@@ config SND_SOC_SOF_INTEL_TOPLEVE
  
  if SND_SOC_SOF_INTEL_TOPLEVEL
  
++<<<<<<< HEAD
 +config SND_SOC_SOF_INTEL_ACPI
 +	def_tristate SND_SOC_SOF_ACPI
 +	select SND_SOC_SOF_BAYTRAIL  if SND_SOC_SOF_BAYTRAIL_SUPPORT
 +	select SND_SOC_SOF_BROADWELL if SND_SOC_SOF_BROADWELL_SUPPORT
 +	help
 +	  This option is not user-selectable but automagically handled by
 +	  'select' statements at a higher level.
 +
 +config SND_SOC_SOF_INTEL_PCI
 +	def_tristate SND_SOC_SOF_PCI
 +	select SND_SOC_SOF_MERRIFIELD  if SND_SOC_SOF_MERRIFIELD_SUPPORT
 +	select SND_SOC_SOF_APOLLOLAKE  if SND_SOC_SOF_APOLLOLAKE_SUPPORT
 +	select SND_SOC_SOF_GEMINILAKE  if SND_SOC_SOF_GEMINILAKE_SUPPORT
 +	select SND_SOC_SOF_CANNONLAKE  if SND_SOC_SOF_CANNONLAKE_SUPPORT
 +	select SND_SOC_SOF_COFFEELAKE  if SND_SOC_SOF_COFFEELAKE_SUPPORT
 +	select SND_SOC_SOF_ICELAKE     if SND_SOC_SOF_ICELAKE_SUPPORT
 +	select SND_SOC_SOF_COMETLAKE   if SND_SOC_SOF_COMETLAKE_SUPPORT
 +	select SND_SOC_SOF_TIGERLAKE   if SND_SOC_SOF_TIGERLAKE_SUPPORT
 +	select SND_SOC_SOF_ELKHARTLAKE if SND_SOC_SOF_ELKHARTLAKE_SUPPORT
 +	select SND_SOC_SOF_JASPERLAKE  if SND_SOC_SOF_JASPERLAKE_SUPPORT
 +	help
 +	  This option is not user-selectable but automagically handled by
 +	  'select' statements at a higher level.
 +
++=======
++>>>>>>> 8d4ba1be3d22 (ASoC: SOF: pci: split PCI into different drivers)
  config SND_SOC_SOF_INTEL_HIFI_EP_IPC
  	tristate
  	help
@@@ -99,20 -77,14 +102,22 @@@ config SND_SOC_SOF_BROADWELL_SUPPOR
  	  Say Y if you want to enable SOF on Broadwell.
  	  If unsure select "N".
  
 -endif ## SND_SOC_SOF_ACPI
 +config SND_SOC_SOF_BROADWELL
 +	tristate
 +	select SND_SOC_SOF_INTEL_COMMON
 +	select SND_SOC_SOF_INTEL_HIFI_EP_IPC
 +	help
 +	  This option is not user-selectable but automagically handled by
 +	  'select' statements at a higher level.
 +
 +endif ## SND_SOC_SOF_INTEL_ACPI
  
- if SND_SOC_SOF_INTEL_PCI
+ if SND_SOC_SOF_PCI
  
- config SND_SOC_SOF_MERRIFIELD_SUPPORT
- 	bool "SOF support for Tangier/Merrifield"
+ config SND_SOC_SOF_MERRIFIELD
+ 	tristate "SOF support for Tangier/Merrifield"
+ 	default SND_SOC_SOF_PCI
+ 	select SND_SOC_SOF_INTEL_ATOM_HIFI_EP
  	help
  	  This adds support for Sound Open Firmware for Intel(R) platforms
  	  using the Tangier/Merrifield processors.
@@@ -235,15 -178,14 +211,16 @@@ config SND_SOC_SOF_INTEL_TG
  	tristate
  	select SND_SOC_SOF_HDA_COMMON
  	select SND_SOC_SOF_INTEL_SOUNDWIRE_LINK_BASELINE
- 	help
- 	  This option is not user-selectable but automagically handled by
- 	  'select' statements at a higher level.
  
- config SND_SOC_SOF_ELKHARTLAKE_SUPPORT
- 	bool "SOF support for ElkhartLake"
++<<<<<<< HEAD
++=======
+ config SND_SOC_SOF_TIGERLAKE
+ 	tristate "SOF support for Tigerlake"
+ 	default SND_SOC_SOF_PCI
+ 	select SND_SOC_SOF_INTEL_TGL
  	help
  	  This adds support for Sound Open Firmware for Intel(R) platforms
- 	  using the ElkhartLake processors.
+ 	  using the Tigerlake processors.
  	  Say Y if you have such a device.
  	  If unsure select "N".
  
@@@ -263,17 -199,21 +234,22 @@@ config SND_SOC_SOF_ELKHARTLAK
  	  Say Y if you have such a device.
  	  If unsure select "N".
  
- config SND_SOC_SOF_JASPERLAKE
- 	tristate
- 	select SND_SOC_SOF_HDA_COMMON
+ config SND_SOC_SOF_ALDERLAKE
+ 	tristate "SOF support for Alderlake"
+ 	default SND_SOC_SOF_PCI
+ 	select SND_SOC_SOF_INTEL_TGL
  	help
- 	  This option is not user-selectable but automagically handled by
- 	  'select' statements at a higher level.
+ 	  This adds support for Sound Open Firmware for Intel(R) platforms
+ 	  using the Alderlake processors.
+ 	  Say Y if you have such a device.
+ 	  If unsure select "N".
  
++>>>>>>> 8d4ba1be3d22 (ASoC: SOF: pci: split PCI into different drivers)
  config SND_SOC_SOF_HDA_COMMON
  	tristate
- 	select SND_INTEL_DSP_CONFIG
  	select SND_SOC_SOF_INTEL_COMMON
+ 	select SND_SOC_SOF_PCI_DEV
+ 	select SND_INTEL_DSP_CONFIG
  	select SND_SOC_SOF_HDA_LINK_BASELINE
  	help
  	  This option is not user-selectable but automagically handled by
diff --cc sound/soc/sof/sof-pci-dev.c
index 674071d01867,cfcbd9754c03..000000000000
--- a/sound/soc/sof/sof-pci-dev.c
+++ b/sound/soc/sof/sof-pci-dev.c
@@@ -81,217 -78,7 +78,221 @@@ static const struct dmi_system_id commu
  	{},
  };
  
++<<<<<<< HEAD
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_APOLLOLAKE)
 +static const struct sof_dev_desc bxt_desc = {
 +	.machines		= snd_soc_acpi_intel_bxt_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base	= 0,
 +	.resindex_pcicfg_base	= -1,
 +	.resindex_imr_base	= -1,
 +	.irqindex_host_ipc	= -1,
 +	.resindex_dma_base	= -1,
 +	.chip_info = &apl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-apl.ri",
 +	.nocodec_tplg_filename = "sof-apl-nocodec.tplg",
 +	.ops = &sof_apl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_GEMINILAKE)
 +static const struct sof_dev_desc glk_desc = {
 +	.machines		= snd_soc_acpi_intel_glk_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base	= 0,
 +	.resindex_pcicfg_base	= -1,
 +	.resindex_imr_base	= -1,
 +	.irqindex_host_ipc	= -1,
 +	.resindex_dma_base	= -1,
 +	.chip_info = &apl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-glk.ri",
 +	.nocodec_tplg_filename = "sof-glk-nocodec.tplg",
 +	.ops = &sof_apl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_MERRIFIELD)
 +static struct snd_soc_acpi_mach sof_tng_machines[] = {
 +	{
 +		.id = "INT343A",
 +		.drv_name = "edison",
 +		.sof_fw_filename = "sof-byt.ri",
 +		.sof_tplg_filename = "sof-byt.tplg",
 +	},
 +	{}
 +};
 +
 +static const struct sof_dev_desc tng_desc = {
 +	.machines		= sof_tng_machines,
 +	.resindex_lpe_base	= 3,	/* IRAM, but subtract IRAM offset */
 +	.resindex_pcicfg_base	= -1,
 +	.resindex_imr_base	= 0,
 +	.irqindex_host_ipc	= -1,
 +	.resindex_dma_base	= -1,
 +	.chip_info = &tng_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-byt.ri",
 +	.nocodec_tplg_filename = "sof-byt.tplg",
 +	.ops = &sof_tng_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_CANNONLAKE)
 +static const struct sof_dev_desc cnl_desc = {
 +	.machines		= snd_soc_acpi_intel_cnl_machines,
 +	.alt_machines		= snd_soc_acpi_intel_cnl_sdw_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base	= 0,
 +	.resindex_pcicfg_base	= -1,
 +	.resindex_imr_base	= -1,
 +	.irqindex_host_ipc	= -1,
 +	.resindex_dma_base	= -1,
 +	.chip_info = &cnl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-cnl.ri",
 +	.nocodec_tplg_filename = "sof-cnl-nocodec.tplg",
 +	.ops = &sof_cnl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_COFFEELAKE)
 +static const struct sof_dev_desc cfl_desc = {
 +	.machines		= snd_soc_acpi_intel_cfl_machines,
 +	.alt_machines		= snd_soc_acpi_intel_cfl_sdw_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base	= 0,
 +	.resindex_pcicfg_base	= -1,
 +	.resindex_imr_base	= -1,
 +	.irqindex_host_ipc	= -1,
 +	.resindex_dma_base	= -1,
 +	.chip_info = &cnl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-cfl.ri",
 +	.nocodec_tplg_filename = "sof-cnl-nocodec.tplg",
 +	.ops = &sof_cnl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_COMETLAKE)
 +static const struct sof_dev_desc cml_desc = {
 +	.machines		= snd_soc_acpi_intel_cml_machines,
 +	.alt_machines		= snd_soc_acpi_intel_cml_sdw_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base	= 0,
 +	.resindex_pcicfg_base	= -1,
 +	.resindex_imr_base	= -1,
 +	.irqindex_host_ipc	= -1,
 +	.resindex_dma_base	= -1,
 +	.chip_info = &cnl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-cml.ri",
 +	.nocodec_tplg_filename = "sof-cnl-nocodec.tplg",
 +	.ops = &sof_cnl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_ICELAKE)
 +static const struct sof_dev_desc icl_desc = {
 +	.machines               = snd_soc_acpi_intel_icl_machines,
 +	.alt_machines		= snd_soc_acpi_intel_icl_sdw_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base      = 0,
 +	.resindex_pcicfg_base   = -1,
 +	.resindex_imr_base      = -1,
 +	.irqindex_host_ipc      = -1,
 +	.resindex_dma_base      = -1,
 +	.chip_info = &icl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-icl.ri",
 +	.nocodec_tplg_filename = "sof-icl-nocodec.tplg",
 +	.ops = &sof_cnl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_TIGERLAKE)
 +static const struct sof_dev_desc tgl_desc = {
 +	.machines               = snd_soc_acpi_intel_tgl_machines,
 +	.alt_machines		= snd_soc_acpi_intel_tgl_sdw_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base      = 0,
 +	.resindex_pcicfg_base   = -1,
 +	.resindex_imr_base      = -1,
 +	.irqindex_host_ipc      = -1,
 +	.resindex_dma_base      = -1,
 +	.chip_info = &tgl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-tgl.ri",
 +	.nocodec_tplg_filename = "sof-tgl-nocodec.tplg",
 +	.ops = &sof_tgl_ops,
 +};
 +
 +static const struct sof_dev_desc tglh_desc = {
 +	.machines               = snd_soc_acpi_intel_tgl_machines,
 +	.alt_machines		= snd_soc_acpi_intel_tgl_sdw_machines,
 +	.resindex_lpe_base      = 0,
 +	.resindex_pcicfg_base   = -1,
 +	.resindex_imr_base      = -1,
 +	.irqindex_host_ipc      = -1,
 +	.resindex_dma_base      = -1,
 +	.chip_info = &tglh_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-tgl-h.ri",
 +	.nocodec_tplg_filename = "sof-tgl-nocodec.tplg",
 +	.ops = &sof_tgl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_ELKHARTLAKE)
 +static const struct sof_dev_desc ehl_desc = {
 +	.machines               = snd_soc_acpi_intel_ehl_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base      = 0,
 +	.resindex_pcicfg_base   = -1,
 +	.resindex_imr_base      = -1,
 +	.irqindex_host_ipc      = -1,
 +	.resindex_dma_base      = -1,
 +	.chip_info = &ehl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-ehl.ri",
 +	.nocodec_tplg_filename = "sof-ehl-nocodec.tplg",
 +	.ops = &sof_cnl_ops,
 +};
 +#endif
 +
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_JASPERLAKE)
 +static const struct sof_dev_desc jsl_desc = {
 +	.machines               = snd_soc_acpi_intel_jsl_machines,
 +	.use_acpi_target_states	= true,
 +	.resindex_lpe_base      = 0,
 +	.resindex_pcicfg_base   = -1,
 +	.resindex_imr_base      = -1,
 +	.irqindex_host_ipc      = -1,
 +	.resindex_dma_base      = -1,
 +	.chip_info = &jsl_chip_info,
 +	.default_fw_path = "intel/sof",
 +	.default_tplg_path = "intel/sof-tplg",
 +	.default_fw_filename = "sof-jsl.ri",
 +	.nocodec_tplg_filename = "sof-jsl-nocodec.tplg",
 +	.ops = &sof_cnl_ops,
 +};
 +#endif
 +
 +static const struct dev_pm_ops sof_pci_pm = {
++=======
+ const struct dev_pm_ops sof_pci_pm = {
++>>>>>>> 8d4ba1be3d22 (ASoC: SOF: pci: split PCI into different drivers)
  	.prepare = snd_sof_prepare,
  	.complete = snd_sof_complete,
  	SET_SYSTEM_SLEEP_PM_OPS(snd_sof_suspend, snd_sof_resume)
@@@ -446,81 -235,6 +449,85 @@@ void sof_pci_shutdown(struct pci_dev *p
  {
  	snd_sof_device_shutdown(&pci->dev);
  }
++<<<<<<< HEAD
 +
 +/* PCI IDs */
 +static const struct pci_device_id sof_pci_ids[] = {
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_MERRIFIELD)
 +	{ PCI_DEVICE(0x8086, 0x119a),
 +		.driver_data = (unsigned long)&tng_desc},
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_APOLLOLAKE)
 +	/* BXT-P & Apollolake */
 +	{ PCI_DEVICE(0x8086, 0x5a98),
 +		.driver_data = (unsigned long)&bxt_desc},
 +	{ PCI_DEVICE(0x8086, 0x1a98),
 +		.driver_data = (unsigned long)&bxt_desc},
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_GEMINILAKE)
 +	{ PCI_DEVICE(0x8086, 0x3198),
 +		.driver_data = (unsigned long)&glk_desc},
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_CANNONLAKE)
 +	{ PCI_DEVICE(0x8086, 0x9dc8),
 +		.driver_data = (unsigned long)&cnl_desc},
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_COFFEELAKE)
 +	{ PCI_DEVICE(0x8086, 0xa348),
 +		.driver_data = (unsigned long)&cfl_desc},
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_ICELAKE)
 +	{ PCI_DEVICE(0x8086, 0x34C8), /* ICL-LP */
 +		.driver_data = (unsigned long)&icl_desc},
 +	{ PCI_DEVICE(0x8086, 0x3dc8), /* ICL-H */
 +		.driver_data = (unsigned long)&icl_desc},
 +
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_JASPERLAKE)
 +	{ PCI_DEVICE(0x8086, 0x38c8),
 +		.driver_data = (unsigned long)&jsl_desc},
 +	{ PCI_DEVICE(0x8086, 0x4dc8),
 +		.driver_data = (unsigned long)&jsl_desc},
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_COMETLAKE)
 +	{ PCI_DEVICE(0x8086, 0x02c8), /* CML-LP */
 +		.driver_data = (unsigned long)&cml_desc},
 +	{ PCI_DEVICE(0x8086, 0x06c8), /* CML-H */
 +		.driver_data = (unsigned long)&cml_desc},
 +	{ PCI_DEVICE(0x8086, 0xa3f0), /* CML-S */
 +		.driver_data = (unsigned long)&cml_desc},
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_TIGERLAKE)
 +	{ PCI_DEVICE(0x8086, 0xa0c8), /* TGL-LP */
 +		.driver_data = (unsigned long)&tgl_desc},
 +	{ PCI_DEVICE(0x8086, 0x43c8), /* TGL-H */
 +		.driver_data = (unsigned long)&tglh_desc},
 +
 +#endif
 +#if IS_ENABLED(CONFIG_SND_SOC_SOF_ELKHARTLAKE)
 +	{ PCI_DEVICE(0x8086, 0x4b55),
 +		.driver_data = (unsigned long)&ehl_desc},
 +	{ PCI_DEVICE(0x8086, 0x4b58),
 +		.driver_data = (unsigned long)&ehl_desc},
 +#endif
 +	{ 0, }
 +};
 +MODULE_DEVICE_TABLE(pci, sof_pci_ids);
 +
 +/* pci_driver definition */
 +static struct pci_driver snd_sof_pci_driver = {
 +	.name = "sof-audio-pci",
 +	.id_table = sof_pci_ids,
 +	.probe = sof_pci_probe,
 +	.remove = sof_pci_remove,
 +	.shutdown = sof_pci_shutdown,
 +	.driver = {
 +		.pm = &sof_pci_pm,
 +	},
 +};
 +module_pci_driver(snd_sof_pci_driver);
++=======
+ EXPORT_SYMBOL_NS(sof_pci_shutdown, SND_SOC_SOF_PCI_DEV);
++>>>>>>> 8d4ba1be3d22 (ASoC: SOF: pci: split PCI into different drivers)
  
  MODULE_LICENSE("Dual BSD/GPL");
diff --git a/sound/soc/sof/Kconfig b/sound/soc/sof/Kconfig
index 3e8b6c035ce3..4cea112c0d21 100644
--- a/sound/soc/sof/Kconfig
+++ b/sound/soc/sof/Kconfig
@@ -9,14 +9,17 @@ config SND_SOC_SOF_TOPLEVEL
 
 if SND_SOC_SOF_TOPLEVEL
 
+config SND_SOC_SOF_PCI_DEV
+	tristate
+
 config SND_SOC_SOF_PCI
 	tristate "SOF PCI enumeration support"
 	depends on PCI
-	select SND_SOC_SOF
-	select SND_SOC_ACPI if ACPI
 	help
 	  This adds support for PCI enumeration. This option is
 	  required to enable Intel Skylake+ devices.
+	  For backwards-compatibility with previous configurations the selection will
+	  be used as default for platform-specific drivers.
 	  Say Y if you need this option.
 	  If unsure select "N".
 
diff --git a/sound/soc/sof/Makefile b/sound/soc/sof/Makefile
index 05718dfe6cd2..e5aa399fe0a5 100644
--- a/sound/soc/sof/Makefile
+++ b/sound/soc/sof/Makefile
@@ -16,7 +16,7 @@ obj-$(CONFIG_SND_SOC_SOF_NOCODEC) += snd-sof-nocodec.o
 
 obj-$(CONFIG_SND_SOC_SOF_ACPI) += snd-sof-acpi.o
 obj-$(CONFIG_SND_SOC_SOF_OF) += snd-sof-of.o
-obj-$(CONFIG_SND_SOC_SOF_PCI) += snd-sof-pci.o
+obj-$(CONFIG_SND_SOC_SOF_PCI_DEV) += snd-sof-pci.o
 
 obj-$(CONFIG_SND_SOC_SOF_INTEL_TOPLEVEL) += intel/
 obj-$(CONFIG_SND_SOC_SOF_IMX_TOPLEVEL) += imx/
* Unmerged path sound/soc/sof/intel/Kconfig
diff --git a/sound/soc/sof/intel/Makefile b/sound/soc/sof/intel/Makefile
index 72d85b25df7d..0135eaf454c1 100644
--- a/sound/soc/sof/intel/Makefile
+++ b/sound/soc/sof/intel/Makefile
@@ -18,3 +18,15 @@ obj-$(CONFIG_SND_SOC_SOF_BROADWELL) += snd-sof-intel-bdw.o
 obj-$(CONFIG_SND_SOC_SOF_INTEL_HIFI_EP_IPC) += snd-sof-intel-ipc.o
 obj-$(CONFIG_SND_SOC_SOF_HDA_COMMON) += snd-sof-intel-hda-common.o
 obj-$(CONFIG_SND_SOC_SOF_HDA) += snd-sof-intel-hda.o
+
+snd-sof-pci-intel-tng-objs := pci-tng.o
+snd-sof-pci-intel-apl-objs := pci-apl.o
+snd-sof-pci-intel-cnl-objs := pci-cnl.o
+snd-sof-pci-intel-icl-objs := pci-icl.o
+snd-sof-pci-intel-tgl-objs := pci-tgl.o
+
+obj-$(CONFIG_SND_SOC_SOF_MERRIFIELD) += snd-sof-pci-intel-tng.o
+obj-$(CONFIG_SND_SOC_SOF_INTEL_APL) += snd-sof-pci-intel-apl.o
+obj-$(CONFIG_SND_SOC_SOF_INTEL_CNL) += snd-sof-pci-intel-cnl.o
+obj-$(CONFIG_SND_SOC_SOF_INTEL_ICL) += snd-sof-pci-intel-icl.o
+obj-$(CONFIG_SND_SOC_SOF_INTEL_TGL) += snd-sof-pci-intel-tgl.o
diff --git a/sound/soc/sof/intel/pci-apl.c b/sound/soc/sof/intel/pci-apl.c
new file mode 100644
index 000000000000..e83ddbaafa29
--- /dev/null
+++ b/sound/soc/sof/intel/pci-apl.c
@@ -0,0 +1,81 @@
+// SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
+//
+// This file is provided under a dual BSD/GPLv2 license.  When using or
+// redistributing this file, you may do so under either license.
+//
+// Copyright(c) 2018-2021 Intel Corporation. All rights reserved.
+//
+// Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
+//
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <sound/soc-acpi.h>
+#include <sound/soc-acpi-intel-match.h>
+#include <sound/sof.h>
+#include "../ops.h"
+#include "../sof-pci-dev.h"
+
+/* platform specific devices */
+#include "hda.h"
+
+static const struct sof_dev_desc bxt_desc = {
+	.machines		= snd_soc_acpi_intel_bxt_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base	= 0,
+	.resindex_pcicfg_base	= -1,
+	.resindex_imr_base	= -1,
+	.irqindex_host_ipc	= -1,
+	.resindex_dma_base	= -1,
+	.chip_info = &apl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-apl.ri",
+	.nocodec_tplg_filename = "sof-apl-nocodec.tplg",
+	.ops = &sof_apl_ops,
+};
+
+static const struct sof_dev_desc glk_desc = {
+	.machines		= snd_soc_acpi_intel_glk_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base	= 0,
+	.resindex_pcicfg_base	= -1,
+	.resindex_imr_base	= -1,
+	.irqindex_host_ipc	= -1,
+	.resindex_dma_base	= -1,
+	.chip_info = &apl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-glk.ri",
+	.nocodec_tplg_filename = "sof-glk-nocodec.tplg",
+	.ops = &sof_apl_ops,
+};
+
+/* PCI IDs */
+static const struct pci_device_id sof_pci_ids[] = {
+	{ PCI_DEVICE(0x8086, 0x5a98), /* BXT-P (ApolloLake) */
+		.driver_data = (unsigned long)&bxt_desc},
+	{ PCI_DEVICE(0x8086, 0x1a98),/* BXT-T */
+		.driver_data = (unsigned long)&bxt_desc},
+	{ PCI_DEVICE(0x8086, 0x3198), /* GeminiLake */
+		.driver_data = (unsigned long)&glk_desc},
+	{ 0, }
+};
+MODULE_DEVICE_TABLE(pci, sof_pci_ids);
+
+/* pci_driver definition */
+static struct pci_driver snd_sof_pci_intel_apl_driver = {
+	.name = "sof-audio-pci-intel-apl",
+	.id_table = sof_pci_ids,
+	.probe = sof_pci_probe,
+	.remove = sof_pci_remove,
+	.shutdown = sof_pci_shutdown,
+	.driver = {
+		.pm = &sof_pci_pm,
+	},
+};
+module_pci_driver(snd_sof_pci_intel_apl_driver);
+
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_IMPORT_NS(SND_SOC_SOF_INTEL_HDA_COMMON);
+MODULE_IMPORT_NS(SND_SOC_SOF_PCI_DEV);
diff --git a/sound/soc/sof/intel/pci-cnl.c b/sound/soc/sof/intel/pci-cnl.c
new file mode 100644
index 000000000000..f974d3a77217
--- /dev/null
+++ b/sound/soc/sof/intel/pci-cnl.c
@@ -0,0 +1,104 @@
+// SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
+//
+// This file is provided under a dual BSD/GPLv2 license.  When using or
+// redistributing this file, you may do so under either license.
+//
+// Copyright(c) 2018 Intel Corporation. All rights reserved.
+//
+// Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
+//
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <sound/soc-acpi.h>
+#include <sound/soc-acpi-intel-match.h>
+#include <sound/sof.h>
+#include "../ops.h"
+#include "../sof-pci-dev.h"
+
+/* platform specific devices */
+#include "hda.h"
+
+static const struct sof_dev_desc cnl_desc = {
+	.machines		= snd_soc_acpi_intel_cnl_machines,
+	.alt_machines		= snd_soc_acpi_intel_cnl_sdw_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base	= 0,
+	.resindex_pcicfg_base	= -1,
+	.resindex_imr_base	= -1,
+	.irqindex_host_ipc	= -1,
+	.resindex_dma_base	= -1,
+	.chip_info = &cnl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-cnl.ri",
+	.nocodec_tplg_filename = "sof-cnl-nocodec.tplg",
+	.ops = &sof_cnl_ops,
+};
+
+static const struct sof_dev_desc cfl_desc = {
+	.machines		= snd_soc_acpi_intel_cfl_machines,
+	.alt_machines		= snd_soc_acpi_intel_cfl_sdw_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base	= 0,
+	.resindex_pcicfg_base	= -1,
+	.resindex_imr_base	= -1,
+	.irqindex_host_ipc	= -1,
+	.resindex_dma_base	= -1,
+	.chip_info = &cnl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-cfl.ri",
+	.nocodec_tplg_filename = "sof-cnl-nocodec.tplg",
+	.ops = &sof_cnl_ops,
+};
+
+static const struct sof_dev_desc cml_desc = {
+	.machines		= snd_soc_acpi_intel_cml_machines,
+	.alt_machines		= snd_soc_acpi_intel_cml_sdw_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base	= 0,
+	.resindex_pcicfg_base	= -1,
+	.resindex_imr_base	= -1,
+	.irqindex_host_ipc	= -1,
+	.resindex_dma_base	= -1,
+	.chip_info = &cnl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-cml.ri",
+	.nocodec_tplg_filename = "sof-cnl-nocodec.tplg",
+	.ops = &sof_cnl_ops,
+};
+
+/* PCI IDs */
+static const struct pci_device_id sof_pci_ids[] = {
+	{ PCI_DEVICE(0x8086, 0x9dc8), /* CNL-LP */
+		.driver_data = (unsigned long)&cnl_desc},
+	{ PCI_DEVICE(0x8086, 0xa348), /* CNL-H */
+		.driver_data = (unsigned long)&cfl_desc},
+	{ PCI_DEVICE(0x8086, 0x02c8), /* CML-LP */
+		.driver_data = (unsigned long)&cml_desc},
+	{ PCI_DEVICE(0x8086, 0x06c8), /* CML-H */
+		.driver_data = (unsigned long)&cml_desc},
+	{ PCI_DEVICE(0x8086, 0xa3f0), /* CML-S */
+		.driver_data = (unsigned long)&cml_desc},
+	{ 0, }
+};
+MODULE_DEVICE_TABLE(pci, sof_pci_ids);
+
+/* pci_driver definition */
+static struct pci_driver snd_sof_pci_intel_cnl_driver = {
+	.name = "sof-audio-pci-intel-cnl",
+	.id_table = sof_pci_ids,
+	.probe = sof_pci_probe,
+	.remove = sof_pci_remove,
+	.shutdown = sof_pci_shutdown,
+	.driver = {
+		.pm = &sof_pci_pm,
+	},
+};
+module_pci_driver(snd_sof_pci_intel_cnl_driver);
+
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_IMPORT_NS(SND_SOC_SOF_INTEL_HDA_COMMON);
+MODULE_IMPORT_NS(SND_SOC_SOF_PCI_DEV);
diff --git a/sound/soc/sof/intel/pci-icl.c b/sound/soc/sof/intel/pci-icl.c
new file mode 100644
index 000000000000..d5d7cefa6ef9
--- /dev/null
+++ b/sound/soc/sof/intel/pci-icl.c
@@ -0,0 +1,84 @@
+// SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
+//
+// This file is provided under a dual BSD/GPLv2 license.  When using or
+// redistributing this file, you may do so under either license.
+//
+// Copyright(c) 2018-2021 Intel Corporation. All rights reserved.
+//
+// Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
+//
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <sound/soc-acpi.h>
+#include <sound/soc-acpi-intel-match.h>
+#include <sound/sof.h>
+#include "../ops.h"
+#include "../sof-pci-dev.h"
+
+/* platform specific devices */
+#include "hda.h"
+
+static const struct sof_dev_desc icl_desc = {
+	.machines               = snd_soc_acpi_intel_icl_machines,
+	.alt_machines		= snd_soc_acpi_intel_icl_sdw_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base      = 0,
+	.resindex_pcicfg_base   = -1,
+	.resindex_imr_base      = -1,
+	.irqindex_host_ipc      = -1,
+	.resindex_dma_base      = -1,
+	.chip_info = &icl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-icl.ri",
+	.nocodec_tplg_filename = "sof-icl-nocodec.tplg",
+	.ops = &sof_icl_ops,
+};
+
+static const struct sof_dev_desc jsl_desc = {
+	.machines               = snd_soc_acpi_intel_jsl_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base      = 0,
+	.resindex_pcicfg_base   = -1,
+	.resindex_imr_base      = -1,
+	.irqindex_host_ipc      = -1,
+	.resindex_dma_base      = -1,
+	.chip_info = &jsl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-jsl.ri",
+	.nocodec_tplg_filename = "sof-jsl-nocodec.tplg",
+	.ops = &sof_cnl_ops,
+};
+
+/* PCI IDs */
+static const struct pci_device_id sof_pci_ids[] = {
+	{ PCI_DEVICE(0x8086, 0x34C8), /* ICL-LP */
+		.driver_data = (unsigned long)&icl_desc},
+	{ PCI_DEVICE(0x8086, 0x3dc8), /* ICL-H */
+		.driver_data = (unsigned long)&icl_desc},
+	{ PCI_DEVICE(0x8086, 0x38c8), /* ICL-N */
+		.driver_data = (unsigned long)&jsl_desc},
+	{ PCI_DEVICE(0x8086, 0x4dc8), /* JSL-N */
+		.driver_data = (unsigned long)&jsl_desc},
+	{ 0, }
+};
+MODULE_DEVICE_TABLE(pci, sof_pci_ids);
+
+/* pci_driver definition */
+static struct pci_driver snd_sof_pci_intel_icl_driver = {
+	.name = "sof-audio-pci-intel-icl",
+	.id_table = sof_pci_ids,
+	.probe = sof_pci_probe,
+	.remove = sof_pci_remove,
+	.shutdown = sof_pci_shutdown,
+	.driver = {
+		.pm = &sof_pci_pm,
+	},
+};
+module_pci_driver(snd_sof_pci_intel_icl_driver);
+
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_IMPORT_NS(SND_SOC_SOF_INTEL_HDA_COMMON);
+MODULE_IMPORT_NS(SND_SOC_SOF_PCI_DEV);
diff --git a/sound/soc/sof/intel/pci-tgl.c b/sound/soc/sof/intel/pci-tgl.c
new file mode 100644
index 000000000000..d35c25a450aa
--- /dev/null
+++ b/sound/soc/sof/intel/pci-tgl.c
@@ -0,0 +1,121 @@
+// SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
+//
+// This file is provided under a dual BSD/GPLv2 license.  When using or
+// redistributing this file, you may do so under either license.
+//
+// Copyright(c) 2018-2021 Intel Corporation. All rights reserved.
+//
+// Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
+//
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <sound/soc-acpi.h>
+#include <sound/soc-acpi-intel-match.h>
+#include <sound/sof.h>
+#include "../ops.h"
+#include "../sof-pci-dev.h"
+
+/* platform specific devices */
+#include "hda.h"
+
+static const struct sof_dev_desc tgl_desc = {
+	.machines               = snd_soc_acpi_intel_tgl_machines,
+	.alt_machines		= snd_soc_acpi_intel_tgl_sdw_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base      = 0,
+	.resindex_pcicfg_base   = -1,
+	.resindex_imr_base      = -1,
+	.irqindex_host_ipc      = -1,
+	.resindex_dma_base      = -1,
+	.chip_info = &tgl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-tgl.ri",
+	.nocodec_tplg_filename = "sof-tgl-nocodec.tplg",
+	.ops = &sof_tgl_ops,
+};
+
+static const struct sof_dev_desc tglh_desc = {
+	.machines               = snd_soc_acpi_intel_tgl_machines,
+	.alt_machines		= snd_soc_acpi_intel_tgl_sdw_machines,
+	.resindex_lpe_base      = 0,
+	.resindex_pcicfg_base   = -1,
+	.resindex_imr_base      = -1,
+	.irqindex_host_ipc      = -1,
+	.resindex_dma_base      = -1,
+	.chip_info = &tglh_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-tgl-h.ri",
+	.nocodec_tplg_filename = "sof-tgl-nocodec.tplg",
+	.ops = &sof_tgl_ops,
+};
+
+static const struct sof_dev_desc ehl_desc = {
+	.machines               = snd_soc_acpi_intel_ehl_machines,
+	.use_acpi_target_states	= true,
+	.resindex_lpe_base      = 0,
+	.resindex_pcicfg_base   = -1,
+	.resindex_imr_base      = -1,
+	.irqindex_host_ipc      = -1,
+	.resindex_dma_base      = -1,
+	.chip_info = &ehl_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-ehl.ri",
+	.nocodec_tplg_filename = "sof-ehl-nocodec.tplg",
+	.ops = &sof_cnl_ops,
+};
+
+static const struct sof_dev_desc adls_desc = {
+	.machines               = snd_soc_acpi_intel_adl_machines,
+	.alt_machines           = snd_soc_acpi_intel_adl_sdw_machines,
+	.resindex_lpe_base      = 0,
+	.resindex_pcicfg_base   = -1,
+	.resindex_imr_base      = -1,
+	.irqindex_host_ipc      = -1,
+	.resindex_dma_base      = -1,
+	.chip_info = &adls_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-adl-s.ri",
+	.nocodec_tplg_filename = "sof-adl-nocodec.tplg",
+	.ops = &sof_tgl_ops,
+};
+
+/* PCI IDs */
+static const struct pci_device_id sof_pci_ids[] = {
+	{ PCI_DEVICE(0x8086, 0xa0c8), /* TGL-LP */
+		.driver_data = (unsigned long)&tgl_desc},
+	{ PCI_DEVICE(0x8086, 0x43c8), /* TGL-H */
+		.driver_data = (unsigned long)&tglh_desc},
+	{ PCI_DEVICE(0x8086, 0x4b55), /* EHL */
+		.driver_data = (unsigned long)&ehl_desc},
+	{ PCI_DEVICE(0x8086, 0x4b58), /* EHL */
+		.driver_data = (unsigned long)&ehl_desc},
+	{ PCI_DEVICE(0x8086, 0x7ad0), /* ADL-S */
+		.driver_data = (unsigned long)&adls_desc},
+	{ PCI_DEVICE(0x8086, 0x51c8), /* ADL-P */
+		.driver_data = (unsigned long)&tgl_desc},
+	{ 0, }
+};
+MODULE_DEVICE_TABLE(pci, sof_pci_ids);
+
+/* pci_driver definition */
+static struct pci_driver snd_sof_pci_intel_tgl_driver = {
+	.name = "sof-audio-pci-intel-tgl",
+	.id_table = sof_pci_ids,
+	.probe = sof_pci_probe,
+	.remove = sof_pci_remove,
+	.shutdown = sof_pci_shutdown,
+	.driver = {
+		.pm = &sof_pci_pm,
+	},
+};
+module_pci_driver(snd_sof_pci_intel_tgl_driver);
+
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_IMPORT_NS(SND_SOC_SOF_INTEL_HDA_COMMON);
+MODULE_IMPORT_NS(SND_SOC_SOF_PCI_DEV);
+
diff --git a/sound/soc/sof/intel/pci-tng.c b/sound/soc/sof/intel/pci-tng.c
new file mode 100644
index 000000000000..94b9704c0117
--- /dev/null
+++ b/sound/soc/sof/intel/pci-tng.c
@@ -0,0 +1,70 @@
+// SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
+//
+// This file is provided under a dual BSD/GPLv2 license.  When using or
+// redistributing this file, you may do so under either license.
+//
+// Copyright(c) 2018-2021 Intel Corporation. All rights reserved.
+//
+// Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
+//
+
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <sound/soc-acpi.h>
+#include <sound/soc-acpi-intel-match.h>
+#include <sound/sof.h>
+#include "../ops.h"
+#include "../sof-pci-dev.h"
+
+/* platform specific devices */
+#include "shim.h"
+
+static struct snd_soc_acpi_mach sof_tng_machines[] = {
+	{
+		.id = "INT343A",
+		.drv_name = "edison",
+		.sof_fw_filename = "sof-byt.ri",
+		.sof_tplg_filename = "sof-byt.tplg",
+	},
+	{}
+};
+
+static const struct sof_dev_desc tng_desc = {
+	.machines		= sof_tng_machines,
+	.resindex_lpe_base	= 3,	/* IRAM, but subtract IRAM offset */
+	.resindex_pcicfg_base	= -1,
+	.resindex_imr_base	= 0,
+	.irqindex_host_ipc	= -1,
+	.resindex_dma_base	= -1,
+	.chip_info = &tng_chip_info,
+	.default_fw_path = "intel/sof",
+	.default_tplg_path = "intel/sof-tplg",
+	.default_fw_filename = "sof-byt.ri",
+	.nocodec_tplg_filename = "sof-byt.tplg",
+	.ops = &sof_tng_ops,
+};
+
+/* PCI IDs */
+static const struct pci_device_id sof_pci_ids[] = {
+	{ PCI_DEVICE(0x8086, 0x119a),
+		.driver_data = (unsigned long)&tng_desc},
+	{ 0, }
+};
+MODULE_DEVICE_TABLE(pci, sof_pci_ids);
+
+/* pci_driver definition */
+static struct pci_driver snd_sof_pci_intel_tng_driver = {
+	.name = "sof-audio-pci-intel-tng",
+	.id_table = sof_pci_ids,
+	.probe = sof_pci_probe,
+	.remove = sof_pci_remove,
+	.shutdown = sof_pci_shutdown,
+	.driver = {
+		.pm = &sof_pci_pm,
+	},
+};
+module_pci_driver(snd_sof_pci_intel_tng_driver);
+
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_IMPORT_NS(SND_SOC_SOF_MERRIFIELD);
+MODULE_IMPORT_NS(SND_SOC_SOF_PCI_DEV);
* Unmerged path sound/soc/sof/sof-pci-dev.c
diff --git a/sound/soc/sof/sof-pci-dev.h b/sound/soc/sof/sof-pci-dev.h
new file mode 100644
index 000000000000..81155a59e63a
--- /dev/null
+++ b/sound/soc/sof/sof-pci-dev.h
@@ -0,0 +1,17 @@
+/* SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause) */
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * Copyright(c) 2021 Intel Corporation. All rights reserved.
+ */
+
+#ifndef __SOUND_SOC_SOF_PCI_H
+#define __SOUND_SOC_SOF_PCI_H
+
+extern const struct dev_pm_ops sof_pci_pm;
+int sof_pci_probe(struct pci_dev *pci, const struct pci_device_id *pci_id);
+void sof_pci_remove(struct pci_dev *pci);
+void sof_pci_shutdown(struct pci_dev *pci);
+
+#endif
