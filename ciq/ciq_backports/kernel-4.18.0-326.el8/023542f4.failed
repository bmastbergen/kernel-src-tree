relay: allow the use of const callback structs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Jani Nikula <jani.nikula@intel.com>
commit 023542f48b57d6b785fcadb86ac336ae80653e58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/023542f4.failed

None of the relay users require the use of mutable structs for callbacks,
however the relay code does.  Instead of assigning the default callback
for subbuf_start, add a wrapper to conditionally call the client callback
if available, and fall back to default behaviour otherwise.

This lets all relay users make their struct rchan_callbacks const data.

[jani.nikula@intel.com: cleanups, per Christoph]
  Link: https://lkml.kernel.org/r/20201124115412.32402-1-jani.nikula@intel.com

Link: https://lkml.kernel.org/r/cc3ff292e4eb4fdc56bee3d690c7b8e39209cd37.1606153547.git.jani.nikula@intel.com
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Cc: Jens Axboe <axboe@kernel.dk>
	Cc: Kalle Valo <kvalo@codeaurora.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 023542f48b57d6b785fcadb86ac336ae80653e58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/relay.c
diff --cc kernel/relay.c
index 8391b9ead3b3,d1a67fbb819d..000000000000
--- a/kernel/relay.c
+++ b/kernel/relay.c
@@@ -251,45 -252,16 +251,36 @@@ EXPORT_SYMBOL_GPL(relay_buf_full)
   * High-level relay kernel API and associated functions.
   */
  
- /*
-  * rchan_callback implementations defining default channel behavior.  Used
-  * in place of corresponding NULL values in client callback struct.
-  */
- 
- /*
-  * subbuf_start() default callback.  Does nothing.
-  */
- static int subbuf_start_default_callback (struct rchan_buf *buf,
- 					  void *subbuf,
- 					  void *prev_subbuf,
- 					  size_t prev_padding)
+ static int relay_subbuf_start(struct rchan_buf *buf, void *subbuf,
+ 			      void *prev_subbuf, size_t prev_padding)
  {
- 	if (relay_buf_full(buf))
- 		return 0;
+ 	if (!buf->chan->cb->subbuf_start)
+ 		return !relay_buf_full(buf);
  
- 	return 1;
+ 	return buf->chan->cb->subbuf_start(buf, subbuf,
+ 					   prev_subbuf, prev_padding);
  }
  
 +/*
 + * create_buf_file_create() default callback.  Does nothing.
 + */
 +static struct dentry *create_buf_file_default_callback(const char *filename,
 +						       struct dentry *parent,
 +						       umode_t mode,
 +						       struct rchan_buf *buf,
 +						       int *is_global)
 +{
 +	return NULL;
 +}
 +
 +/*
 + * remove_buf_file() default callback.  Does nothing.
 + */
 +static int remove_buf_file_default_callback(struct dentry *dentry)
 +{
 +	return -EINVAL;
 +}
 +
  /**
   *	wakeup_readers - wake up readers waiting on a channel
   *	@work: contains the channel buffer
@@@ -459,18 -433,6 +450,21 @@@ static void relay_close_buf(struct rcha
  	kref_put(&buf->kref, relay_remove_buf);
  }
  
++<<<<<<< HEAD
 +static void setup_callbacks(struct rchan *chan,
 +				   struct rchan_callbacks *cb)
 +{
 +	if (!cb->subbuf_start)
 +		cb->subbuf_start = subbuf_start_default_callback;
 +	if (!cb->create_buf_file)
 +		cb->create_buf_file = create_buf_file_default_callback;
 +	if (!cb->remove_buf_file)
 +		cb->remove_buf_file = remove_buf_file_default_callback;
 +	chan->cb = cb;
 +}
 +
++=======
++>>>>>>> 023542f48b57 (relay: allow the use of const callback structs)
  int relay_prepare_cpu(unsigned int cpu)
  {
  	struct rchan *chan;
diff --git a/include/linux/relay.h b/include/linux/relay.h
index 320c7cf23b42..48809c69ca3c 100644
--- a/include/linux/relay.h
+++ b/include/linux/relay.h
@@ -62,7 +62,7 @@ struct rchan
 	size_t subbuf_size;		/* sub-buffer size */
 	size_t n_subbufs;		/* number of sub-buffers per buffer */
 	size_t alloc_size;		/* total buffer size allocated */
-	struct rchan_callbacks *cb;	/* client callbacks */
+	const struct rchan_callbacks *cb; /* client callbacks */
 	struct kref kref;		/* channel refcount */
 	void *private_data;		/* for user-defined data */
 	size_t last_toobig;		/* tried to log event > subbuf size */
@@ -151,7 +151,7 @@ struct rchan *relay_open(const char *base_filename,
 			 struct dentry *parent,
 			 size_t subbuf_size,
 			 size_t n_subbufs,
-			 struct rchan_callbacks *cb,
+			 const struct rchan_callbacks *cb,
 			 void *private_data);
 extern int relay_late_setup_files(struct rchan *chan,
 				  const char *base_filename,
* Unmerged path kernel/relay.c
