net/mlx5e: TC, Handle sampled packets

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Chris Mi <cmi@nvidia.com>
commit be9dc0047450f7d8c0462a6ef3f7c26bced16911
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/be9dc004.failed

Mark the sampled packets with a sample restore object. Send sampled
packets using the psample api.

	Signed-off-by: Chris Mi <cmi@nvidia.com>
	Reviewed-by: Oz Shlomo <ozsh@nvidia.com>
	Reviewed-by: Mark Bloch <mbloch@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit be9dc0047450f7d8c0462a6ef3f7c26bced16911)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
#	drivers/net/ethernet/mellanox/mlx5/core/esw/sample.c
#	drivers/net/ethernet/mellanox/mlx5/core/esw/sample.h
#	drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
index 0664a4e01bff,6cdc52d50a48..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
@@@ -643,28 -675,21 +644,46 @@@ bool mlx5e_rep_tc_update_skb(struct mlx
  		return false;
  	}
  
++<<<<<<< HEAD
 +	if (chain) {
 +		tc_skb_ext = skb_ext_add(skb, TC_SKB_EXT);
 +		if (!tc_skb_ext) {
 +			WARN_ON(1);
 +			return false;
 +		}
 +
 +		tc_skb_ext->chain = chain;
 +
 +		zone_restore_id = reg_c1 & ZONE_RESTORE_MAX;
 +
 +		uplink_rpriv = mlx5_eswitch_get_uplink_priv(esw, REP_ETH);
 +		uplink_priv = &uplink_rpriv->uplink_priv;
 +		if (!mlx5e_tc_ct_restore_flow(uplink_priv, skb,
 +					      zone_restore_id))
 +			return false;
 +	}
 +
 +	tunnel_moffset = mlx5e_tc_attr_to_reg_mappings[TUNNEL_TO_REG].moffset;
 +	tunnel_id = reg_c1 >> (8 * tunnel_moffset);
 +	return mlx5e_restore_tunnel(priv, skb, tc_priv, tunnel_id);
 +#endif /* CONFIG_NET_TC_SKB_EXT */
++=======
+ #if IS_ENABLED(CONFIG_NET_TC_SKB_EXT)
+ 	if (mapped_obj.type == MLX5_MAPPED_OBJ_CHAIN)
+ 		return mlx5e_restore_skb(skb, mapped_obj.chain, reg_c1, tc_priv);
+ #endif /* CONFIG_NET_TC_SKB_EXT */
+ #if IS_ENABLED(CONFIG_MLX5_TC_SAMPLE)
+ 	if (mapped_obj.type == MLX5_MAPPED_OBJ_SAMPLE) {
+ 		mlx5_esw_sample_skb(skb, &mapped_obj);
+ 		return false;
+ 	}
+ #endif /* CONFIG_MLX5_TC_SAMPLE */
+ 	if (mapped_obj.type != MLX5_MAPPED_OBJ_SAMPLE &&
+ 	    mapped_obj.type != MLX5_MAPPED_OBJ_CHAIN) {
+ 		netdev_dbg(priv->netdev, "Invalid mapped object type: %d\n", mapped_obj.type);
+ 		return false;
+ 	}
++>>>>>>> be9dc0047450 (net/mlx5e: TC, Handle sampled packets)
  
  	return true;
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index 451410599bb1,ed4d7f8f798f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@@ -45,6 -46,24 +45,27 @@@
  #include "lib/fs_chains.h"
  #include "sf/sf.h"
  #include "en/tc_ct.h"
++<<<<<<< HEAD
++=======
+ #include "esw/sample.h"
+ 
+ enum mlx5_mapped_obj_type {
+ 	MLX5_MAPPED_OBJ_CHAIN,
+ 	MLX5_MAPPED_OBJ_SAMPLE,
+ };
+ 
+ struct mlx5_mapped_obj {
+ 	enum mlx5_mapped_obj_type type;
+ 	union {
+ 		u32 chain;
+ 		struct {
+ 			u32 group_id;
+ 			u32 rate;
+ 			u32 trunc_size;
+ 		} sample;
+ 	};
+ };
++>>>>>>> be9dc0047450 (net/mlx5e: TC, Handle sampled packets)
  
  #ifdef CONFIG_MLX5_ESWITCH
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/esw/sample.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/esw/sample.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/esw/sample.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/esw/sample.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
