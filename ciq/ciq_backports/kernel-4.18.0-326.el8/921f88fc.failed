bpf: Add size arg to build_id_parse function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 921f88fc891922b325b3668cd026a386571ed602
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/921f88fc.failed

It's possible to have other build id types (other than default SHA1).
Currently there's also ld support for MD5 build id.

Adding size argument to build_id_parse function, that returns (if defined)
size of the parsed build id, so we can recognize the build id type.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20210114134044.1418404-3-jolsa@kernel.org
(cherry picked from commit 921f88fc891922b325b3668cd026a386571ed602)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/buildid.h
#	kernel/bpf/stackmap.c
#	lib/buildid.c
diff --cc kernel/bpf/stackmap.c
index 7932cdc9c0e9,cabaf7db8efc..000000000000
--- a/kernel/bpf/stackmap.c
+++ b/kernel/bpf/stackmap.c
@@@ -326,7 -189,7 +326,11 @@@ static void stack_map_get_build_id_offs
  
  	for (i = 0; i < trace_nr; i++) {
  		vma = find_vma(current->mm, ips[i]);
++<<<<<<< HEAD
 +		if (!vma || stack_map_get_build_id(vma, id_offs[i].build_id)) {
++=======
+ 		if (!vma || build_id_parse(vma, id_offs[i].build_id, NULL)) {
++>>>>>>> 921f88fc8919 (bpf: Add size arg to build_id_parse function)
  			/* per entry fall back to ips */
  			id_offs[i].status = BPF_STACK_BUILD_ID_IP;
  			id_offs[i].ip = ips[i];
* Unmerged path include/linux/buildid.h
* Unmerged path lib/buildid.c
* Unmerged path include/linux/buildid.h
* Unmerged path kernel/bpf/stackmap.c
* Unmerged path lib/buildid.c
