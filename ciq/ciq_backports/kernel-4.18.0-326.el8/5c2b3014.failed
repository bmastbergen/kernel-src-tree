ALSA: usb-audio: More strict state change in EP

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit 5c2b301476ec493be15546f05e23414e2aa9d472
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/5c2b3014.failed

The endpoint management has bit flags to indicate the current state,
and we're dealing two things: the running bit and the stopping bit.
There is a thin window in transition from the running to the stopping
in stop_urbs(), and as long as the bit flags are used, it's difficult
to plug.

This patch modifies the state management code to use the atomic int
and follow the explicit three states, STOPPED, RUNNING and STOPPING.
The state change is done via atomic_cmpxhg() for avoiding possible
races, and check the state change more strictly.  The unexpected state
change is now handled as an error.

Fixes: d0f09d1e4a88 ("ALSA: usb-audio: Refactoring endpoint URB deactivation")
	Cc: <stable@vger.kernel.org>
Link: https://lore.kernel.org/r/20210206203052.15606-3-tiwai@suse.de
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 5c2b301476ec493be15546f05e23414e2aa9d472)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/usb/card.h
#	sound/usb/endpoint.c
diff --cc sound/usb/card.h
index ce446f8dba4b,a741e7da83a2..000000000000
--- a/sound/usb/card.h
+++ b/sound/usb/card.h
@@@ -57,11 -60,18 +57,20 @@@ struct snd_urb_ctx 
  
  struct snd_usb_endpoint {
  	struct snd_usb_audio *chip;
 -	struct snd_usb_iface_ref *iface_ref;
  
 -	int opened;		/* open refcount; protect with chip->mutex */
 -	atomic_t running;	/* running status */
 +	int use_count;
  	int ep_num;		/* the referenced endpoint number */
  	int type;		/* SND_USB_ENDPOINT_TYPE_* */
++<<<<<<< HEAD
 +	unsigned long flags;
++=======
+ 
+ 	unsigned char iface;		/* interface number */
+ 	unsigned char altsetting;	/* corresponding alternate setting */
+ 	unsigned char ep_idx;		/* endpoint array index */
+ 
+ 	atomic_t state;		/* running state */
++>>>>>>> 5c2b301476ec (ALSA: usb-audio: More strict state change in EP)
  
  	void (*prepare_data_urb) (struct snd_usb_substream *subs,
  				  struct urb *urb);
diff --cc sound/usb/endpoint.c
index 208ac2aff462,4390075b2c6f..000000000000
--- a/sound/usb/endpoint.c
+++ b/sound/usb/endpoint.c
@@@ -18,11 -18,23 +18,14 @@@
  #include "card.h"
  #include "endpoint.h"
  #include "pcm.h"
 -#include "clock.h"
  #include "quirks.h"
  
- #define EP_FLAG_RUNNING		1
- #define EP_FLAG_STOPPING	2
+ enum {
+ 	EP_STATE_STOPPED,
+ 	EP_STATE_RUNNING,
+ 	EP_STATE_STOPPING,
+ };
  
 -/* interface refcounting */
 -struct snd_usb_iface_ref {
 -	unsigned char iface;
 -	bool need_setup;
 -	int opened;
 -	struct list_head list;
 -};
 -
  /*
   * snd_usb_endpoint is a model that abstracts everything related to an
   * USB endpoint and its streaming.
@@@ -595,6 -848,9 +608,12 @@@ static int wait_clear_urbs(struct snd_u
  	unsigned long end_time = jiffies + msecs_to_jiffies(1000);
  	int alive;
  
++<<<<<<< HEAD
++=======
+ 	if (atomic_read(&ep->state) != EP_STATE_STOPPING)
+ 		return 0;
+ 
++>>>>>>> 5c2b301476ec (ALSA: usb-audio: More strict state change in EP)
  	do {
  		alive = bitmap_weight(&ep->active_mask, ep->nurbs);
  		if (!alive)
@@@ -607,10 -863,11 +626,16 @@@
  		usb_audio_err(ep->chip,
  			"timeout: still %d active urbs on EP #%x\n",
  			alive, ep->ep_num);
- 	clear_bit(EP_FLAG_STOPPING, &ep->flags);
  
++<<<<<<< HEAD
 +	ep->sync_slave = NULL;
 +	snd_usb_endpoint_set_callback(ep, NULL, NULL, NULL);
++=======
+ 	if (ep_state_update(ep, EP_STATE_STOPPING, EP_STATE_STOPPED)) {
+ 		ep->sync_sink = NULL;
+ 		snd_usb_endpoint_set_callback(ep, NULL, NULL, NULL);
+ 	}
++>>>>>>> 5c2b301476ec (ALSA: usb-audio: More strict state change in EP)
  
  	return 0;
  }
@@@ -634,8 -893,12 +659,14 @@@ static int deactivate_urbs(struct snd_u
  	if (!force && atomic_read(&ep->chip->shutdown)) /* to be sure... */
  		return -EBADFD;
  
 -	if (!force && atomic_read(&ep->running))
 -		return -EBUSY;
 +	clear_bit(EP_FLAG_RUNNING, &ep->flags);
  
++<<<<<<< HEAD
++=======
+ 	if (!ep_state_update(ep, EP_STATE_RUNNING, EP_STATE_STOPPING))
+ 		return 0;
+ 
++>>>>>>> 5c2b301476ec (ALSA: usb-audio: More strict state change in EP)
  	INIT_LIST_HEAD(&ep->ready_playback_urbs);
  	ep->next_packet_head = 0;
  	ep->next_packet_queued = 0;
* Unmerged path sound/usb/card.h
* Unmerged path sound/usb/endpoint.c
