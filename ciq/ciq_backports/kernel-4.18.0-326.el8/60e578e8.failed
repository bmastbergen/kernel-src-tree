bpf: Change 'BPF_ADD' to 'BPF_AND' in print_bpf_insn()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Menglong Dong <dong.menglong@zte.com.cn>
commit 60e578e82b7d73fbd9a0966e8fc70a95d8e12e13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/60e578e8.failed

This 'BPF_ADD' is duplicated, and I belive it should be 'BPF_AND'.

Fixes: 981f94c3e921 ("bpf: Add bitwise atomic instructions")
	Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Brendan Jackman <jackmanb@google.com>
Link: https://lore.kernel.org/bpf/20210127022507.23674-1-dong.menglong@zte.com.cn
(cherry picked from commit 60e578e82b7d73fbd9a0966e8fc70a95d8e12e13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/disasm.c
diff --cc kernel/bpf/disasm.c
index d9ce383c0f9c,3acc7e0b6916..000000000000
--- a/kernel/bpf/disasm.c
+++ b/kernel/bpf/disasm.c
@@@ -161,8 -160,10 +161,15 @@@ void print_bpf_insn(const struct bpf_in
  				bpf_ldst_string[BPF_SIZE(insn->code) >> 3],
  				insn->dst_reg,
  				insn->off, insn->src_reg);
++<<<<<<< HEAD
 +		else if (BPF_MODE(insn->code) == BPF_XADD)
 +			verbose(cbs->private_data, "(%02x) lock *(%s *)(r%d %+d) += r%d\n",
++=======
+ 		else if (BPF_MODE(insn->code) == BPF_ATOMIC &&
+ 			 (insn->imm == BPF_ADD || insn->imm == BPF_AND ||
+ 			  insn->imm == BPF_OR || insn->imm == BPF_XOR)) {
+ 			verbose(cbs->private_data, "(%02x) lock *(%s *)(r%d %+d) %s r%d\n",
++>>>>>>> 60e578e82b7d (bpf: Change 'BPF_ADD' to 'BPF_AND' in print_bpf_insn())
  				insn->code,
  				bpf_ldst_string[BPF_SIZE(insn->code) >> 3],
  				insn->dst_reg, insn->off,
* Unmerged path kernel/bpf/disasm.c
