bpf: Return -ENOTSUPP when attaching to non-kernel BTF

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Andrii Nakryiko <andrii@kernel.org>
commit 8bdd8e275ede9786d845b3ec952836e61fd824e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/8bdd8e27.failed

Return -ENOTSUPP if tracing BPF program is attempted to be attached with
specified attach_btf_obj_fd pointing to non-kernel (neither vmlinux nor
module) BTF object. This scenario might be supported in the future and isn't
outright invalid, so -EINVAL isn't the most appropriate error code.

	Suggested-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20201208064326.667389-1-andrii@kernel.org
(cherry picked from commit 8bdd8e275ede9786d845b3ec952836e61fd824e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/syscall.c
diff --cc kernel/bpf/syscall.c
index 526b61397de6,287be337d5f6..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -2167,11 -2110,44 +2167,42 @@@ static int bpf_prog_load(union bpf_att
  	if (is_perfmon_prog_type(type) && !perfmon_capable())
  		return -EPERM;
  
++<<<<<<< HEAD
++=======
+ 	/* attach_prog_fd/attach_btf_obj_fd can specify fd of either bpf_prog
+ 	 * or btf, we need to check which one it is
+ 	 */
+ 	if (attr->attach_prog_fd) {
+ 		dst_prog = bpf_prog_get(attr->attach_prog_fd);
+ 		if (IS_ERR(dst_prog)) {
+ 			dst_prog = NULL;
+ 			attach_btf = btf_get_by_fd(attr->attach_btf_obj_fd);
+ 			if (IS_ERR(attach_btf))
+ 				return -EINVAL;
+ 			if (!btf_is_kernel(attach_btf)) {
+ 				/* attaching through specifying bpf_prog's BTF
+ 				 * objects directly might be supported eventually
+ 				 */
+ 				btf_put(attach_btf);
+ 				return -ENOTSUPP;
+ 			}
+ 		}
+ 	} else if (attr->attach_btf_id) {
+ 		/* fall back to vmlinux BTF, if BTF type ID is specified */
+ 		attach_btf = bpf_get_btf_vmlinux();
+ 		if (IS_ERR(attach_btf))
+ 			return PTR_ERR(attach_btf);
+ 		if (!attach_btf)
+ 			return -EINVAL;
+ 		btf_get(attach_btf);
+ 	}
+ 
++>>>>>>> 8bdd8e275ede (bpf: Return -ENOTSUPP when attaching to non-kernel BTF)
  	bpf_prog_load_fixup_attach_type(attr);
  	if (bpf_prog_load_check_attach(type, attr->expected_attach_type,
 -				       attach_btf, attr->attach_btf_id,
 -				       dst_prog)) {
 -		if (dst_prog)
 -			bpf_prog_put(dst_prog);
 -		if (attach_btf)
 -			btf_put(attach_btf);
 +				       attr->attach_btf_id,
 +				       attr->attach_prog_fd))
  		return -EINVAL;
 -	}
  
  	/* plain bpf_prog allocation */
  	prog = bpf_prog_alloc(bpf_prog_size(attr->insn_cnt), GFP_USER);
* Unmerged path kernel/bpf/syscall.c
