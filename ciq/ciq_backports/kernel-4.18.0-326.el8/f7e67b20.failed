xfs: move the fork format fields into struct xfs_ifork

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Christoph Hellwig <hch@lst.de>
commit f7e67b20ecbbcb9180c888a5c4fde267935e075f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/f7e67b20.failed

Both the data and attr fork have a format that is stored in the legacy
idinode.  Move it into the xfs_ifork structure instead, where it uses
up padding.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Chandan Babu R <chandanrlinux@gmail.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit f7e67b20ecbbcb9180c888a5c4fde267935e075f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_attr.c
#	fs/xfs/libxfs/xfs_bmap.c
#	fs/xfs/libxfs/xfs_inode_fork.c
#	fs/xfs/libxfs/xfs_inode_fork.h
#	fs/xfs/scrub/bmap.c
#	fs/xfs/xfs_bmap_util.c
#	fs/xfs/xfs_icache.c
#	fs/xfs/xfs_inode.c
#	fs/xfs/xfs_inode.h
#	fs/xfs/xfs_trace.h
diff --cc fs/xfs/libxfs/xfs_attr.c
index e4fe3dca9883,3b1bd6e112f8..000000000000
--- a/fs/xfs/libxfs/xfs_attr.c
+++ b/fs/xfs/libxfs/xfs_attr.c
@@@ -61,8 -61,8 +61,13 @@@ xfs_inode_hasattr
  	struct xfs_inode	*ip)
  {
  	if (!XFS_IFORK_Q(ip) ||
++<<<<<<< HEAD
 +	    (ip->i_d.di_aformat == XFS_DINODE_FMT_EXTENTS &&
 +	     ip->i_d.di_anextents == 0))
++=======
+ 	    (ip->i_afp->if_format == XFS_DINODE_FMT_EXTENTS &&
+ 	     ip->i_afp->if_nextents == 0))
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  		return 0;
  	return 1;
  }
@@@ -212,9 -212,9 +217,15 @@@ xfs_attr_set_args
  	 * If the attribute list is non-existent or a shortform list,
  	 * upgrade it to a single-leaf-block attribute list.
  	 */
++<<<<<<< HEAD
 +	if (dp->i_d.di_aformat == XFS_DINODE_FMT_LOCAL ||
 +	    (dp->i_d.di_aformat == XFS_DINODE_FMT_EXTENTS &&
 +	     dp->i_d.di_anextents == 0)) {
++=======
+ 	if (dp->i_afp->if_format == XFS_DINODE_FMT_LOCAL ||
+ 	    (dp->i_afp->if_format == XFS_DINODE_FMT_EXTENTS &&
+ 	     dp->i_afp->if_nextents == 0)) {
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  
  		/*
  		 * Build initial attribute list (if required).
diff --cc fs/xfs/libxfs/xfs_bmap.c
index f59b746453ef,edc63dba007f..000000000000
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@@ -120,10 -120,11 +120,15 @@@ xfs_bmbt_lookup_first
   */
  static inline bool xfs_bmap_needs_btree(struct xfs_inode *ip, int whichfork)
  {
 -	struct xfs_ifork *ifp = XFS_IFORK_PTR(ip, whichfork);
 -
  	return whichfork != XFS_COW_FORK &&
++<<<<<<< HEAD
 +		XFS_IFORK_FORMAT(ip, whichfork) == XFS_DINODE_FMT_EXTENTS &&
 +		XFS_IFORK_NEXTENTS(ip, whichfork) >
 +			XFS_IFORK_MAXEXT(ip, whichfork);
++=======
+ 		ifp->if_format == XFS_DINODE_FMT_EXTENTS &&
+ 		ifp->if_nextents > XFS_IFORK_MAXEXT(ip, whichfork);
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  }
  
  /*
@@@ -131,10 -132,11 +136,15 @@@
   */
  static inline bool xfs_bmap_wants_extents(struct xfs_inode *ip, int whichfork)
  {
 -	struct xfs_ifork *ifp = XFS_IFORK_PTR(ip, whichfork);
 -
  	return whichfork != XFS_COW_FORK &&
++<<<<<<< HEAD
 +		XFS_IFORK_FORMAT(ip, whichfork) == XFS_DINODE_FMT_BTREE &&
 +		XFS_IFORK_NEXTENTS(ip, whichfork) <=
 +			XFS_IFORK_MAXEXT(ip, whichfork);
++=======
+ 		ifp->if_format == XFS_DINODE_FMT_BTREE &&
+ 		ifp->if_nextents <= XFS_IFORK_MAXEXT(ip, whichfork);
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  }
  
  /*
@@@ -329,12 -331,11 +339,11 @@@ xfs_bmap_check_leaf_extents
  	xfs_bmbt_rec_t		*nextp;	/* pointer to next extent */
  	int			bp_release = 0;
  
- 	if (XFS_IFORK_FORMAT(ip, whichfork) != XFS_DINODE_FMT_BTREE) {
+ 	if (ifp->if_format != XFS_DINODE_FMT_BTREE)
  		return;
- 	}
  
  	/* skip large extent count inodes */
 -	if (ip->i_df.if_nextents > 10000)
 +	if (ip->i_d.di_nextents > 10000)
  		return;
  
  	bno = NULLFSBLOCK;
@@@ -800,9 -799,9 +807,9 @@@ xfs_bmap_local_to_extents_empty
  	struct xfs_ifork	*ifp = XFS_IFORK_PTR(ip, whichfork);
  
  	ASSERT(whichfork != XFS_COW_FORK);
- 	ASSERT(XFS_IFORK_FORMAT(ip, whichfork) == XFS_DINODE_FMT_LOCAL);
+ 	ASSERT(ifp->if_format == XFS_DINODE_FMT_LOCAL);
  	ASSERT(ifp->if_bytes == 0);
 -	ASSERT(ifp->if_nextents == 0);
 +	ASSERT(XFS_IFORK_NEXTENTS(ip, whichfork) == 0);
  
  	xfs_bmap_forkoff_reset(ip, whichfork);
  	ifp->if_flags &= ~XFS_IFINLINE;
@@@ -1091,17 -1091,6 +1098,20 @@@ xfs_bmap_add_attrfork
  		goto trans_cancel;
  	if (XFS_IFORK_Q(ip))
  		goto trans_cancel;
++<<<<<<< HEAD
 +	if (XFS_IS_CORRUPT(mp, ip->i_d.di_anextents != 0)) {
 +		error = -EFSCORRUPTED;
 +		goto trans_cancel;
 +	}
 +	if (ip->i_d.di_aformat != XFS_DINODE_FMT_EXTENTS) {
 +		/*
 +		 * For inodes coming from pre-6.2 filesystems.
 +		 */
 +		ASSERT(ip->i_d.di_aformat == 0);
 +		ip->i_d.di_aformat = XFS_DINODE_FMT_EXTENTS;
 +	}
++=======
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  
  	xfs_trans_ijoin(tp, ip, 0);
  	xfs_trans_log_inode(tp, ip, XFS_ILOG_CORE);
@@@ -1475,11 -1462,10 +1484,11 @@@ xfs_bmap_one_block
  	if (whichfork == XFS_DATA_FORK)
  		return XFS_ISIZE(ip) == ip->i_mount->m_sb.sb_blocksize;
  #endif	/* !DEBUG */
 -	if (ifp->if_nextents != 1)
 +	if (XFS_IFORK_NEXTENTS(ip, whichfork) != 1)
  		return 0;
- 	if (XFS_IFORK_FORMAT(ip, whichfork) != XFS_DINODE_FMT_EXTENTS)
+ 	if (ifp->if_format != XFS_DINODE_FMT_EXTENTS)
  		return 0;
 +	ifp = XFS_IFORK_PTR(ip, whichfork);
  	ASSERT(ifp->if_flags & XFS_IFEXTENTS);
  	xfs_iext_first(ifp, &icur);
  	xfs_iext_get_extent(ifp, &icur, &s);
@@@ -4502,9 -4487,8 +4511,14 @@@ xfs_bmapi_write
  	if (error)
  		goto error0;
  
++<<<<<<< HEAD
 +	ASSERT(XFS_IFORK_FORMAT(ip, whichfork) != XFS_DINODE_FMT_BTREE ||
 +	       XFS_IFORK_NEXTENTS(ip, whichfork) >
 +		XFS_IFORK_MAXEXT(ip, whichfork));
++=======
+ 	ASSERT(ifp->if_format != XFS_DINODE_FMT_BTREE ||
+ 	       ifp->if_nextents > XFS_IFORK_MAXEXT(ip, whichfork));
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	xfs_bmapi_finish(&bma, whichfork, 0);
  	xfs_bmap_validate_ret(orig_bno, orig_len, orig_flags, orig_mval,
  		orig_nmap, *nmap);
@@@ -5061,9 -5030,8 +5075,14 @@@ xfs_bmap_del_extent_real
  	 * conversion to btree format, since the transaction will be dirty then.
  	 */
  	if (tp->t_blk_res == 0 &&
++<<<<<<< HEAD
 +	    XFS_IFORK_FORMAT(ip, whichfork) == XFS_DINODE_FMT_EXTENTS &&
 +	    XFS_IFORK_NEXTENTS(ip, whichfork) >=
 +			XFS_IFORK_MAXEXT(ip, whichfork) &&
++=======
+ 	    ifp->if_format == XFS_DINODE_FMT_EXTENTS &&
+ 	    ifp->if_nextents >= XFS_IFORK_MAXEXT(ip, whichfork) &&
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	    del->br_startoff > got.br_startoff && del_endoff < got_endoff)
  		return -ENOSPC;
  
@@@ -5343,9 -5311,9 +5362,9 @@@ __xfs_bunmapi
  
  	logflags = 0;
  	if (ifp->if_flags & XFS_IFBROOT) {
- 		ASSERT(XFS_IFORK_FORMAT(ip, whichfork) == XFS_DINODE_FMT_BTREE);
+ 		ASSERT(ifp->if_format == XFS_DINODE_FMT_BTREE);
  		cur = xfs_bmbt_init_cursor(mp, tp, ip, whichfork);
 -		cur->bc_ino.flags = 0;
 +		cur->bc_private.b.flags = 0;
  	} else
  		cur = NULL;
  
diff --cc fs/xfs/libxfs/xfs_inode_fork.c
index 6c24c27f5f44,ef43b4893766..000000000000
--- a/fs/xfs/libxfs/xfs_inode_fork.c
+++ b/fs/xfs/libxfs/xfs_inode_fork.c
@@@ -229,6 -228,13 +229,16 @@@ xfs_iformat_data_fork
  	struct inode		*inode = VFS_I(ip);
  	int			error;
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Initialize the extent count early, as the per-format routines may
+ 	 * depend on it.
+ 	 */
+ 	ip->i_df.if_format = dip->di_format;
+ 	ip->i_df.if_nextents = be32_to_cpu(dip->di_nextents);
+ 
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	switch (inode->i_mode & S_IFMT) {
  	case S_IFIFO:
  	case S_IFCHR:
@@@ -281,8 -287,17 +291,17 @@@ xfs_iformat_attr_fork
  {
  	int			error = 0;
  
 -	/*
 -	 * Initialize the extent count early, as the per-format routines may
 -	 * depend on it.
 -	 */
  	ip->i_afp = kmem_zone_zalloc(xfs_ifork_zone, KM_NOFS);
++<<<<<<< HEAD
 +	switch (dip->di_aformat) {
++=======
+ 	ip->i_afp->if_format = dip->di_aformat;
+ 	if (unlikely(ip->i_afp->if_format == 0)) /* pre IRIX 6.2 file system */
+ 		ip->i_afp->if_format = XFS_DINODE_FMT_EXTENTS;
+ 	ip->i_afp->if_nextents = be16_to_cpu(dip->di_anextents);
+ 
+ 	switch (ip->i_afp->if_format) {
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	case XFS_DINODE_FMT_LOCAL:
  		error = xfs_iformat_local(ip, dip, XFS_ATTR_FORK,
  				xfs_dfork_attr_shortform_size(dip));
@@@ -675,8 -690,7 +694,12 @@@ xfs_ifork_init_cow
  	ip->i_cowfp = kmem_zone_zalloc(xfs_ifork_zone,
  				       KM_NOFS);
  	ip->i_cowfp->if_flags = XFS_IFEXTENTS;
++<<<<<<< HEAD
 +	ip->i_cformat = XFS_DINODE_FMT_EXTENTS;
 +	ip->i_cnextents = 0;
++=======
+ 	ip->i_cowfp->if_format = XFS_DINODE_FMT_EXTENTS;
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  }
  
  /* Verify the inline contents of the data fork of an inode. */
diff --cc fs/xfs/libxfs/xfs_inode_fork.h
index f46a8c1db596,d849cca103ed..000000000000
--- a/fs/xfs/libxfs/xfs_inode_fork.h
+++ b/fs/xfs/libxfs/xfs_inode_fork.h
@@@ -23,6 -23,8 +23,11 @@@ struct xfs_ifork 
  	} if_u1;
  	short			if_broot_bytes;	/* bytes allocated for root */
  	unsigned char		if_flags;	/* per-fork flags */
++<<<<<<< HEAD
++=======
+ 	int8_t			if_format;	/* format of this fork */
+ 	xfs_extnum_t		if_nextents;	/* # of extents in this fork */
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  };
  
  /*
@@@ -55,37 -57,29 +60,59 @@@
  		((w) == XFS_ATTR_FORK ? \
  			XFS_IFORK_ASIZE(ip) : \
  			0))
++<<<<<<< HEAD
 +#define XFS_IFORK_FORMAT(ip,w) \
 +	((w) == XFS_DATA_FORK ? \
 +		(ip)->i_d.di_format : \
 +		((w) == XFS_ATTR_FORK ? \
 +			(ip)->i_d.di_aformat : \
 +			(ip)->i_cformat))
 +#define XFS_IFORK_FMT_SET(ip,w,n) \
 +	((w) == XFS_DATA_FORK ? \
 +		((ip)->i_d.di_format = (n)) : \
 +		((w) == XFS_ATTR_FORK ? \
 +			((ip)->i_d.di_aformat = (n)) : \
 +			((ip)->i_cformat = (n))))
 +#define XFS_IFORK_NEXTENTS(ip,w) \
 +	((w) == XFS_DATA_FORK ? \
 +		(ip)->i_d.di_nextents : \
 +		((w) == XFS_ATTR_FORK ? \
 +			(ip)->i_d.di_anextents : \
 +			(ip)->i_cnextents))
 +#define XFS_IFORK_NEXT_SET(ip,w,n) \
 +	((w) == XFS_DATA_FORK ? \
 +		((ip)->i_d.di_nextents = (n)) : \
 +		((w) == XFS_ATTR_FORK ? \
 +			((ip)->i_d.di_anextents = (n)) : \
 +			((ip)->i_cnextents = (n))))
++=======
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  #define XFS_IFORK_MAXEXT(ip, w) \
  	(XFS_IFORK_SIZE(ip, w) / sizeof(xfs_bmbt_rec_t))
  
- #define xfs_ifork_has_extents(ip, w) \
- 	(XFS_IFORK_FORMAT((ip), (w)) == XFS_DINODE_FMT_EXTENTS || \
- 	 XFS_IFORK_FORMAT((ip), (w)) == XFS_DINODE_FMT_BTREE)
+ static inline bool xfs_ifork_has_extents(struct xfs_ifork *ifp)
+ {
+ 	return ifp->if_format == XFS_DINODE_FMT_EXTENTS ||
+ 		ifp->if_format == XFS_DINODE_FMT_BTREE;
+ }
  
++<<<<<<< HEAD
++=======
+ static inline xfs_extnum_t xfs_ifork_nextents(struct xfs_ifork *ifp)
+ {
+ 	if (!ifp)
+ 		return 0;
+ 	return ifp->if_nextents;
+ }
+ 
+ static inline int8_t xfs_ifork_format(struct xfs_ifork *ifp)
+ {
+ 	if (!ifp)
+ 		return XFS_DINODE_FMT_EXTENTS;
+ 	return ifp->if_format;
+ }
+ 
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  struct xfs_ifork *xfs_iext_state_to_fork(struct xfs_inode *ip, int state);
  
  int		xfs_iformat_data_fork(struct xfs_inode *, struct xfs_dinode *);
diff --cc fs/xfs/scrub/bmap.c
index 66ee276467a2,7badd6dfe544..000000000000
--- a/fs/xfs/scrub/bmap.c
+++ b/fs/xfs/scrub/bmap.c
@@@ -611,8 -595,8 +612,13 @@@ xchk_bmap_check_rmaps
  	else
  		zero_size = false;
  
++<<<<<<< HEAD
 +	if (XFS_IFORK_FORMAT(sc->ip, whichfork) != XFS_DINODE_FMT_BTREE &&
 +	    (zero_size || XFS_IFORK_NEXTENTS(sc->ip, whichfork) > 0))
++=======
+ 	if (ifp->if_format != XFS_DINODE_FMT_BTREE &&
+ 	    (zero_size || ifp->if_nextents > 0))
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  		return 0;
  
  	for (agno = 0; agno < sc->mp->m_sb.sb_agcount; agno++) {
diff --cc fs/xfs/xfs_bmap_util.c
index cba046e78429,f37f5cc4b19f..000000000000
--- a/fs/xfs/xfs_bmap_util.c
+++ b/fs/xfs/xfs_bmap_util.c
@@@ -1227,7 -1229,7 +1229,11 @@@ xfs_swap_extents_check_format
  	 * if the target inode has less extents that then temporary inode then
  	 * why did userspace call us?
  	 */
++<<<<<<< HEAD
 +	if (ip->i_d.di_nextents < tip->i_d.di_nextents)
++=======
+ 	if (ifp->if_nextents < tifp->if_nextents)
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  		return -EINVAL;
  
  	/*
@@@ -1247,15 -1249,13 +1253,25 @@@
  		return -EINVAL;
  
  	/* Check temp in extent form to max in target */
++<<<<<<< HEAD
 +	if (tip->i_d.di_format == XFS_DINODE_FMT_EXTENTS &&
 +	    XFS_IFORK_NEXTENTS(tip, XFS_DATA_FORK) >
 +			XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK))
 +		return -EINVAL;
 +
 +	/* Check target in extent form to max in temp */
 +	if (ip->i_d.di_format == XFS_DINODE_FMT_EXTENTS &&
 +	    XFS_IFORK_NEXTENTS(ip, XFS_DATA_FORK) >
 +			XFS_IFORK_MAXEXT(tip, XFS_DATA_FORK))
++=======
+ 	if (tifp->if_format == XFS_DINODE_FMT_EXTENTS &&
+ 	    tifp->if_nextents > XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK))
+ 		return -EINVAL;
+ 
+ 	/* Check target in extent form to max in temp */
+ 	if (ifp->if_format == XFS_DINODE_FMT_EXTENTS &&
+ 	    ifp->if_nextents > XFS_IFORK_MAXEXT(tip, XFS_DATA_FORK))
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  		return -EINVAL;
  
  	/*
@@@ -1267,12 -1267,11 +1283,16 @@@
  	 * (a common defrag case) which will occur when the temp inode is in
  	 * extent format...
  	 */
- 	if (tip->i_d.di_format == XFS_DINODE_FMT_BTREE) {
+ 	if (tifp->if_format == XFS_DINODE_FMT_BTREE) {
  		if (XFS_IFORK_Q(ip) &&
- 		    XFS_BMAP_BMDR_SPACE(tip->i_df.if_broot) > XFS_IFORK_BOFF(ip))
+ 		    XFS_BMAP_BMDR_SPACE(tifp->if_broot) > XFS_IFORK_BOFF(ip))
  			return -EINVAL;
++<<<<<<< HEAD
 +		if (XFS_IFORK_NEXTENTS(tip, XFS_DATA_FORK) <=
 +		    XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK))
++=======
+ 		if (tifp->if_nextents <= XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK))
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  			return -EINVAL;
  	}
  
@@@ -1281,8 -1280,7 +1301,12 @@@
  		if (XFS_IFORK_Q(tip) &&
  		    XFS_BMAP_BMDR_SPACE(ip->i_df.if_broot) > XFS_IFORK_BOFF(tip))
  			return -EINVAL;
++<<<<<<< HEAD
 +		if (XFS_IFORK_NEXTENTS(ip, XFS_DATA_FORK) <=
 +		    XFS_IFORK_MAXEXT(tip, XFS_DATA_FORK))
++=======
+ 		if (ifp->if_nextents <= XFS_IFORK_MAXEXT(tip, XFS_DATA_FORK))
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  			return -EINVAL;
  	}
  
@@@ -1434,15 -1432,15 +1458,25 @@@ xfs_swap_extent_forks
  	/*
  	 * Count the number of extended attribute blocks
  	 */
++<<<<<<< HEAD
 +	if ( ((XFS_IFORK_Q(ip) != 0) && (ip->i_d.di_anextents > 0)) &&
 +	     (ip->i_d.di_aformat != XFS_DINODE_FMT_LOCAL)) {
++=======
+ 	if (XFS_IFORK_Q(ip) && ip->i_afp->if_nextents > 0 &&
+ 	    ip->i_afp->if_format != XFS_DINODE_FMT_LOCAL) {
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  		error = xfs_bmap_count_blocks(tp, ip, XFS_ATTR_FORK, &junk,
  				&aforkblks);
  		if (error)
  			return error;
  	}
++<<<<<<< HEAD
 +	if ( ((XFS_IFORK_Q(tip) != 0) && (tip->i_d.di_anextents > 0)) &&
 +	     (tip->i_d.di_aformat != XFS_DINODE_FMT_LOCAL)) {
++=======
+ 	if (XFS_IFORK_Q(tip) && tip->i_afp->if_nextents > 0 &&
+ 	    tip->i_afp->if_format != XFS_DINODE_FMT_LOCAL) {
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  		error = xfs_bmap_count_blocks(tp, tip, XFS_ATTR_FORK, &junk,
  				&taforkblks);
  		if (error)
@@@ -1475,9 -1473,6 +1509,12 @@@
  	ip->i_d.di_nblocks = tip->i_d.di_nblocks - taforkblks + aforkblks;
  	tip->i_d.di_nblocks = tmp + taforkblks - aforkblks;
  
++<<<<<<< HEAD
 +	swap(ip->i_d.di_nextents, tip->i_d.di_nextents);
 +	swap(ip->i_d.di_format, tip->i_d.di_format);
 +
++=======
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	/*
  	 * The extents in the source inode could still contain speculative
  	 * preallocation beyond EOF (e.g. the file is open but not modified
@@@ -1724,10 -1719,11 +1761,12 @@@ xfs_swap_extents
  
  	/* Swap the cow forks. */
  	if (xfs_sb_version_hasreflink(&mp->m_sb)) {
- 		ASSERT(ip->i_cformat == XFS_DINODE_FMT_EXTENTS);
- 		ASSERT(tip->i_cformat == XFS_DINODE_FMT_EXTENTS);
+ 		ASSERT(!ip->i_cowfp ||
+ 		       ip->i_cowfp->if_format == XFS_DINODE_FMT_EXTENTS);
+ 		ASSERT(!tip->i_cowfp ||
+ 		       tip->i_cowfp->if_format == XFS_DINODE_FMT_EXTENTS);
  
 +		swap(ip->i_cnextents, tip->i_cnextents);
  		swap(ip->i_cowfp, tip->i_cowfp);
  
  		if (ip->i_cowfp && ip->i_cowfp->if_bytes)
diff --cc fs/xfs/xfs_icache.c
index da696ab941c9,c09b3e9eab1d..000000000000
--- a/fs/xfs/xfs_icache.c
+++ b/fs/xfs/xfs_icache.c
@@@ -63,8 -63,6 +63,11 @@@ xfs_inode_alloc
  	memset(&ip->i_imap, 0, sizeof(struct xfs_imap));
  	ip->i_afp = NULL;
  	ip->i_cowfp = NULL;
++<<<<<<< HEAD
 +	ip->i_cnextents = 0;
 +	ip->i_cformat = XFS_DINODE_FMT_EXTENTS;
++=======
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	memset(&ip->i_df, 0, sizeof(ip->i_df));
  	ip->i_flags = 0;
  	ip->i_delayed_blks = 0;
diff --cc fs/xfs/xfs_inode.c
index 87659aeda379,64f5f9a440ae..000000000000
--- a/fs/xfs/xfs_inode.c
+++ b/fs/xfs/xfs_inode.c
@@@ -915,11 -916,6 +916,14 @@@ xfs_ialloc
  	default:
  		ASSERT(0);
  	}
++<<<<<<< HEAD
 +	/*
 +	 * Attribute fork settings for new inode.
 +	 */
 +	ip->i_d.di_aformat = XFS_DINODE_FMT_EXTENTS;
 +	ip->i_d.di_anextents = 0;
++=======
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  
  	/*
  	 * Log the new values stuffed into the inode.
@@@ -3629,8 -3620,8 +3632,13 @@@ xfs_iflush
  
  	ASSERT(xfs_isilocked(ip, XFS_ILOCK_EXCL|XFS_ILOCK_SHARED));
  	ASSERT(xfs_isiflocked(ip));
++<<<<<<< HEAD
 +	ASSERT(ip->i_d.di_format != XFS_DINODE_FMT_BTREE ||
 +	       ip->i_d.di_nextents > XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK));
++=======
+ 	ASSERT(ip->i_df.if_format != XFS_DINODE_FMT_BTREE ||
+ 	       ip->i_df.if_nextents > XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK));
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  
  	*bpp = NULL;
  
@@@ -3711,8 -3702,8 +3719,13 @@@ xfs_iflush_int
  
  	ASSERT(xfs_isilocked(ip, XFS_ILOCK_EXCL|XFS_ILOCK_SHARED));
  	ASSERT(xfs_isiflocked(ip));
++<<<<<<< HEAD
 +	ASSERT(ip->i_d.di_format != XFS_DINODE_FMT_BTREE ||
 +	       ip->i_d.di_nextents > XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK));
++=======
+ 	ASSERT(ip->i_df.if_format != XFS_DINODE_FMT_BTREE ||
+ 	       ip->i_df.if_nextents > XFS_IFORK_MAXEXT(ip, XFS_DATA_FORK));
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	ASSERT(iip != NULL && iip->ili_fields != 0);
  
  	dip = xfs_buf_offset(bp, ip->i_imap.im_boffset);
diff --cc fs/xfs/xfs_inode.h
index 2b77c50398c1,dadcf1945896..000000000000
--- a/fs/xfs/xfs_inode.h
+++ b/fs/xfs/xfs_inode.h
@@@ -57,9 -57,6 +57,12 @@@ typedef struct xfs_inode 
  
  	struct xfs_icdinode	i_d;		/* most of ondisk inode */
  
++<<<<<<< HEAD
 +	xfs_extnum_t		i_cnextents;	/* # of extents in cow fork */
 +	unsigned int		i_cformat;	/* format of cow fork */
 +
++=======
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  	/* VFS inode */
  	struct inode		i_vnode;	/* embedded VFS inode */
  
diff --cc fs/xfs/xfs_trace.h
index 970101436bd9,460136628a79..000000000000
--- a/fs/xfs/xfs_trace.h
+++ b/fs/xfs/xfs_trace.h
@@@ -1896,8 -1897,8 +1896,13 @@@ DECLARE_EVENT_CLASS(xfs_swap_extent_cla
  		__entry->dev = VFS_I(ip)->i_sb->s_dev;
  		__entry->which = which;
  		__entry->ino = ip->i_ino;
++<<<<<<< HEAD
 +		__entry->format = ip->i_d.di_format;
 +		__entry->nex = ip->i_d.di_nextents;
++=======
+ 		__entry->format = ip->i_df.if_format;
+ 		__entry->nex = ip->i_df.if_nextents;
++>>>>>>> f7e67b20ecbb (xfs: move the fork format fields into struct xfs_ifork)
  		__entry->broot_size = ip->i_df.if_broot_bytes;
  		__entry->fork_off = XFS_IFORK_BOFF(ip);
  	),
* Unmerged path fs/xfs/libxfs/xfs_attr.c
diff --git a/fs/xfs/libxfs/xfs_attr_leaf.c b/fs/xfs/libxfs/xfs_attr_leaf.c
index 28f5fdba7aaf..36b5461abfeb 100644
--- a/fs/xfs/libxfs/xfs_attr_leaf.c
+++ b/fs/xfs/libxfs/xfs_attr_leaf.c
@@ -538,7 +538,7 @@ xfs_attr_shortform_bytesfit(
 	/* rounded down */
 	offset = (XFS_LITINO(mp) - bytes) >> 3;
 
-	if (dp->i_d.di_format == XFS_DINODE_FMT_DEV) {
+	if (dp->i_df.if_format == XFS_DINODE_FMT_DEV) {
 		minforkoff = roundup(sizeof(xfs_dev_t), 8) >> 3;
 		return (offset >= minforkoff) ? minforkoff : 0;
 	}
@@ -566,7 +566,7 @@ xfs_attr_shortform_bytesfit(
 
 	dsize = dp->i_df.if_bytes;
 
-	switch (dp->i_d.di_format) {
+	switch (dp->i_df.if_format) {
 	case XFS_DINODE_FMT_EXTENTS:
 		/*
 		 * If there is no attr fork and the data fork is extents, 
@@ -635,22 +635,19 @@ xfs_sbversion_add_attr2(xfs_mount_t *mp, xfs_trans_t *tp)
  * Create the initial contents of a shortform attribute list.
  */
 void
-xfs_attr_shortform_create(xfs_da_args_t *args)
+xfs_attr_shortform_create(
+	struct xfs_da_args	*args)
 {
-	xfs_attr_sf_hdr_t *hdr;
-	xfs_inode_t *dp;
-	struct xfs_ifork *ifp;
+	struct xfs_inode	*dp = args->dp;
+	struct xfs_ifork	*ifp = dp->i_afp;
+	struct xfs_attr_sf_hdr	*hdr;
 
 	trace_xfs_attr_sf_create(args);
 
-	dp = args->dp;
-	ASSERT(dp != NULL);
-	ifp = dp->i_afp;
-	ASSERT(ifp != NULL);
 	ASSERT(ifp->if_bytes == 0);
-	if (dp->i_d.di_aformat == XFS_DINODE_FMT_EXTENTS) {
+	if (ifp->if_format == XFS_DINODE_FMT_EXTENTS) {
 		ifp->if_flags &= ~XFS_IFEXTENTS;	/* just in case */
-		dp->i_d.di_aformat = XFS_DINODE_FMT_LOCAL;
+		ifp->if_format = XFS_DINODE_FMT_LOCAL;
 		ifp->if_flags |= XFS_IFINLINE;
 	} else {
 		ASSERT(ifp->if_flags & XFS_IFINLINE);
@@ -720,7 +717,6 @@ xfs_attr_fork_remove(
 {
 	xfs_idestroy_fork(ip, XFS_ATTR_FORK);
 	ip->i_d.di_forkoff = 0;
-	ip->i_d.di_aformat = XFS_DINODE_FMT_EXTENTS;
 
 	ASSERT(ip->i_d.di_anextents == 0);
 	ASSERT(ip->i_afp == NULL);
@@ -774,7 +770,7 @@ xfs_attr_shortform_remove(xfs_da_args_t *args)
 	totsize -= size;
 	if (totsize == sizeof(xfs_attr_sf_hdr_t) &&
 	    (mp->m_flags & XFS_MOUNT_ATTR2) &&
-	    (dp->i_d.di_format != XFS_DINODE_FMT_BTREE) &&
+	    (dp->i_df.if_format != XFS_DINODE_FMT_BTREE) &&
 	    !(args->op_flags & XFS_DA_OP_ADDNAME)) {
 		xfs_attr_fork_remove(dp, args->trans);
 	} else {
@@ -784,7 +780,7 @@ xfs_attr_shortform_remove(xfs_da_args_t *args)
 		ASSERT(totsize > sizeof(xfs_attr_sf_hdr_t) ||
 				(args->op_flags & XFS_DA_OP_ADDNAME) ||
 				!(mp->m_flags & XFS_MOUNT_ATTR2) ||
-				dp->i_d.di_format == XFS_DINODE_FMT_BTREE);
+				dp->i_df.if_format == XFS_DINODE_FMT_BTREE);
 		xfs_trans_log_inode(args->trans, dp,
 					XFS_ILOG_CORE | XFS_ILOG_ADATA);
 	}
@@ -961,7 +957,7 @@ xfs_attr_shortform_allfit(
 				+ be16_to_cpu(name_loc->valuelen);
 	}
 	if ((dp->i_mount->m_flags & XFS_MOUNT_ATTR2) &&
-	    (dp->i_d.di_format != XFS_DINODE_FMT_BTREE) &&
+	    (dp->i_df.if_format != XFS_DINODE_FMT_BTREE) &&
 	    (bytes == sizeof(struct xfs_attr_sf_hdr)))
 		return -1;
 	return xfs_attr_shortform_bytesfit(dp, bytes);
@@ -980,7 +976,7 @@ xfs_attr_shortform_verify(
 	int				i;
 	int64_t				size;
 
-	ASSERT(ip->i_d.di_aformat == XFS_DINODE_FMT_LOCAL);
+	ASSERT(ip->i_afp->if_format == XFS_DINODE_FMT_LOCAL);
 	ifp = XFS_IFORK_PTR(ip, XFS_ATTR_FORK);
 	sfp = (struct xfs_attr_shortform *)ifp->if_u1.if_data;
 	size = ifp->if_bytes;
@@ -1086,7 +1082,7 @@ xfs_attr3_leaf_to_shortform(
 
 	if (forkoff == -1) {
 		ASSERT(dp->i_mount->m_flags & XFS_MOUNT_ATTR2);
-		ASSERT(dp->i_d.di_format != XFS_DINODE_FMT_BTREE);
+		ASSERT(dp->i_df.if_format != XFS_DINODE_FMT_BTREE);
 		xfs_attr_fork_remove(dp, args->trans);
 		goto out;
 	}
* Unmerged path fs/xfs/libxfs/xfs_bmap.c
diff --git a/fs/xfs/libxfs/xfs_bmap_btree.c b/fs/xfs/libxfs/xfs_bmap_btree.c
index ffe608d2a2d9..c8cc3d8a4982 100644
--- a/fs/xfs/libxfs/xfs_bmap_btree.c
+++ b/fs/xfs/libxfs/xfs_bmap_btree.c
@@ -636,10 +636,7 @@ xfs_bmbt_change_owner(
 
 	ASSERT(tp || buffer_list);
 	ASSERT(!(tp && buffer_list));
-	if (whichfork == XFS_DATA_FORK)
-		ASSERT(ip->i_d.di_format == XFS_DINODE_FMT_BTREE);
-	else
-		ASSERT(ip->i_d.di_aformat == XFS_DINODE_FMT_BTREE);
+	ASSERT(XFS_IFORK_PTR(ip, whichfork)->if_format == XFS_DINODE_FMT_BTREE);
 
 	cur = xfs_bmbt_init_cursor(ip->i_mount, tp, ip, whichfork);
 	if (!cur)
diff --git a/fs/xfs/libxfs/xfs_dir2.c b/fs/xfs/libxfs/xfs_dir2.c
index dd6fcaaea318..612a9c5e41b1 100644
--- a/fs/xfs/libxfs/xfs_dir2.c
+++ b/fs/xfs/libxfs/xfs_dir2.c
@@ -278,7 +278,7 @@ xfs_dir_createname(
 	if (!inum)
 		args->op_flags |= XFS_DA_OP_JUSTCHECK;
 
-	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL) {
+	if (dp->i_df.if_format == XFS_DINODE_FMT_LOCAL) {
 		rval = xfs_dir2_sf_addname(args);
 		goto out_free;
 	}
@@ -373,7 +373,7 @@ xfs_dir_lookup(
 		args->op_flags |= XFS_DA_OP_CILOOKUP;
 
 	lock_mode = xfs_ilock_data_map_shared(dp);
-	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL) {
+	if (dp->i_df.if_format == XFS_DINODE_FMT_LOCAL) {
 		rval = xfs_dir2_sf_lookup(args);
 		goto out_check_rval;
 	}
@@ -443,7 +443,7 @@ xfs_dir_removename(
 	args->whichfork = XFS_DATA_FORK;
 	args->trans = tp;
 
-	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL) {
+	if (dp->i_df.if_format == XFS_DINODE_FMT_LOCAL) {
 		rval = xfs_dir2_sf_removename(args);
 		goto out_free;
 	}
@@ -504,7 +504,7 @@ xfs_dir_replace(
 	args->whichfork = XFS_DATA_FORK;
 	args->trans = tp;
 
-	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL) {
+	if (dp->i_df.if_format == XFS_DINODE_FMT_LOCAL) {
 		rval = xfs_dir2_sf_replace(args);
 		goto out_free;
 	}
diff --git a/fs/xfs/libxfs/xfs_dir2_sf.c b/fs/xfs/libxfs/xfs_dir2_sf.c
index 7b7f6fb2ea3b..2463b5d73447 100644
--- a/fs/xfs/libxfs/xfs_dir2_sf.c
+++ b/fs/xfs/libxfs/xfs_dir2_sf.c
@@ -343,7 +343,7 @@ xfs_dir2_block_to_sf(
 	 */
 	ASSERT(dp->i_df.if_bytes == 0);
 	xfs_init_local_fork(dp, XFS_DATA_FORK, sfp, size);
-	dp->i_d.di_format = XFS_DINODE_FMT_LOCAL;
+	dp->i_df.if_format = XFS_DINODE_FMT_LOCAL;
 	dp->i_d.di_size = size;
 
 	logflags |= XFS_ILOG_DDATA;
@@ -710,11 +710,11 @@ xfs_dir2_sf_verify(
 	struct xfs_inode		*ip)
 {
 	struct xfs_mount		*mp = ip->i_mount;
+	struct xfs_ifork		*ifp = XFS_IFORK_PTR(ip, XFS_DATA_FORK);
 	struct xfs_dir2_sf_hdr		*sfp;
 	struct xfs_dir2_sf_entry	*sfep;
 	struct xfs_dir2_sf_entry	*next_sfep;
 	char				*endp;
-	struct xfs_ifork		*ifp;
 	xfs_ino_t			ino;
 	int				i;
 	int				i8count;
@@ -723,9 +723,8 @@ xfs_dir2_sf_verify(
 	int				error;
 	uint8_t				filetype;
 
-	ASSERT(ip->i_d.di_format == XFS_DINODE_FMT_LOCAL);
+	ASSERT(ifp->if_format == XFS_DINODE_FMT_LOCAL);
 
-	ifp = XFS_IFORK_PTR(ip, XFS_DATA_FORK);
 	sfp = (struct xfs_dir2_sf_hdr *)ifp->if_u1.if_data;
 	size = ifp->if_bytes;
 
@@ -827,9 +826,9 @@ xfs_dir2_sf_create(
 	 * If it's currently a zero-length extent file,
 	 * convert it to local format.
 	 */
-	if (dp->i_d.di_format == XFS_DINODE_FMT_EXTENTS) {
+	if (dp->i_df.if_format == XFS_DINODE_FMT_EXTENTS) {
 		dp->i_df.if_flags &= ~XFS_IFEXTENTS;	/* just in case */
-		dp->i_d.di_format = XFS_DINODE_FMT_LOCAL;
+		dp->i_df.if_format = XFS_DINODE_FMT_LOCAL;
 		xfs_trans_log_inode(args->trans, dp, XFS_ILOG_CORE);
 		dp->i_df.if_flags |= XFS_IFINLINE;
 	}
@@ -1027,7 +1026,7 @@ xfs_dir2_sf_replace_needblock(
 	int			newsize;
 	struct xfs_dir2_sf_hdr	*sfp;
 
-	if (dp->i_d.di_format != XFS_DINODE_FMT_LOCAL)
+	if (dp->i_df.if_format != XFS_DINODE_FMT_LOCAL)
 		return false;
 
 	sfp = (struct xfs_dir2_sf_hdr *)dp->i_df.if_u1.if_data;
diff --git a/fs/xfs/libxfs/xfs_inode_buf.c b/fs/xfs/libxfs/xfs_inode_buf.c
index b3ebee7d9765..6f7e57ee5813 100644
--- a/fs/xfs/libxfs/xfs_inode_buf.c
+++ b/fs/xfs/libxfs/xfs_inode_buf.c
@@ -225,7 +225,6 @@ xfs_inode_from_disk(
 					be16_to_cpu(from->di_projid_lo);
 	}
 
-	to->di_format = from->di_format;
 	i_uid_write(inode, be32_to_cpu(from->di_uid));
 	i_gid_write(inode, be32_to_cpu(from->di_gid));
 
@@ -248,7 +247,6 @@ xfs_inode_from_disk(
 	to->di_nextents = be32_to_cpu(from->di_nextents);
 	to->di_anextents = be16_to_cpu(from->di_anextents);
 	to->di_forkoff = from->di_forkoff;
-	to->di_aformat	= from->di_aformat;
 	to->di_dmevmask	= be32_to_cpu(from->di_dmevmask);
 	to->di_dmstate	= be16_to_cpu(from->di_dmstate);
 	to->di_flags	= be16_to_cpu(from->di_flags);
@@ -291,7 +289,7 @@ xfs_inode_to_disk(
 	to->di_magic = cpu_to_be16(XFS_DINODE_MAGIC);
 	to->di_onlink = 0;
 
-	to->di_format = from->di_format;
+	to->di_format = xfs_ifork_format(&ip->i_df);
 	to->di_uid = cpu_to_be32(i_uid_read(inode));
 	to->di_gid = cpu_to_be32(i_gid_read(inode));
 	to->di_projid_lo = cpu_to_be16(from->di_projid & 0xffff);
@@ -314,7 +312,7 @@ xfs_inode_to_disk(
 	to->di_nextents = cpu_to_be32(from->di_nextents);
 	to->di_anextents = cpu_to_be16(from->di_anextents);
 	to->di_forkoff = from->di_forkoff;
-	to->di_aformat = from->di_aformat;
+	to->di_aformat = xfs_ifork_format(ip->i_afp);
 	to->di_dmevmask = cpu_to_be32(from->di_dmevmask);
 	to->di_dmstate = cpu_to_be16(from->di_dmstate);
 	to->di_flags = cpu_to_be16(from->di_flags);
diff --git a/fs/xfs/libxfs/xfs_inode_buf.h b/fs/xfs/libxfs/xfs_inode_buf.h
index e4cbcaf62a32..45d36d6c2890 100644
--- a/fs/xfs/libxfs/xfs_inode_buf.h
+++ b/fs/xfs/libxfs/xfs_inode_buf.h
@@ -16,7 +16,6 @@ struct xfs_dinode;
  * format specific structures at the appropriate time.
  */
 struct xfs_icdinode {
-	int8_t		di_format;	/* format of di_c data */
 	uint16_t	di_flushiter;	/* incremented on flush */
 	uint32_t	di_projid;	/* owner's project id */
 	xfs_fsize_t	di_size;	/* number of bytes in file */
@@ -25,7 +24,6 @@ struct xfs_icdinode {
 	xfs_extnum_t	di_nextents;	/* number of extents in data fork */
 	xfs_aextnum_t	di_anextents;	/* number of extents in attribute fork*/
 	uint8_t		di_forkoff;	/* attr fork offs, <<3 for 64b align */
-	int8_t		di_aformat;	/* format of attr fork's data */
 	uint32_t	di_dmevmask;	/* DMIG event mask */
 	uint16_t	di_dmstate;	/* DMIG state info */
 	uint16_t	di_flags;	/* random flags, XFS_DIFLAG_... */
* Unmerged path fs/xfs/libxfs/xfs_inode_fork.c
* Unmerged path fs/xfs/libxfs/xfs_inode_fork.h
diff --git a/fs/xfs/libxfs/xfs_symlink_remote.c b/fs/xfs/libxfs/xfs_symlink_remote.c
index 3b8260ca7d1b..594bc447a7dd 100644
--- a/fs/xfs/libxfs/xfs_symlink_remote.c
+++ b/fs/xfs/libxfs/xfs_symlink_remote.c
@@ -204,16 +204,12 @@ xfs_failaddr_t
 xfs_symlink_shortform_verify(
 	struct xfs_inode	*ip)
 {
-	char			*sfp;
-	char			*endp;
-	struct xfs_ifork	*ifp;
-	int			size;
-
-	ASSERT(ip->i_d.di_format == XFS_DINODE_FMT_LOCAL);
-	ifp = XFS_IFORK_PTR(ip, XFS_DATA_FORK);
-	sfp = (char *)ifp->if_u1.if_data;
-	size = ifp->if_bytes;
-	endp = sfp + size;
+	struct xfs_ifork	*ifp = XFS_IFORK_PTR(ip, XFS_DATA_FORK);
+	char			*sfp = (char *)ifp->if_u1.if_data;
+	int			size = ifp->if_bytes;
+	char			*endp = sfp + size;
+
+	ASSERT(ifp->if_format == XFS_DINODE_FMT_LOCAL);
 
 	/*
 	 * Zero length symlinks should never occur in memory as they are
* Unmerged path fs/xfs/scrub/bmap.c
diff --git a/fs/xfs/scrub/dabtree.c b/fs/xfs/scrub/dabtree.c
index 9a2e27ac1300..44b15015021f 100644
--- a/fs/xfs/scrub/dabtree.c
+++ b/fs/xfs/scrub/dabtree.c
@@ -468,7 +468,7 @@ xchk_da_btree(
 	int				error;
 
 	/* Skip short format data structures; no btree to scan. */
-	if (!xfs_ifork_has_extents(sc->ip, whichfork))
+	if (!xfs_ifork_has_extents(XFS_IFORK_PTR(sc->ip, whichfork)))
 		return 0;
 
 	/* Set up initial da state. */
diff --git a/fs/xfs/scrub/dir.c b/fs/xfs/scrub/dir.c
index fe2a6e030c8a..7c432997edad 100644
--- a/fs/xfs/scrub/dir.c
+++ b/fs/xfs/scrub/dir.c
@@ -635,7 +635,7 @@ xchk_directory_blocks(
 {
 	struct xfs_bmbt_irec	got;
 	struct xfs_da_args	args;
-	struct xfs_ifork	*ifp;
+	struct xfs_ifork	*ifp = XFS_IFORK_PTR(sc->ip, XFS_DATA_FORK);
 	struct xfs_mount	*mp = sc->mp;
 	xfs_fileoff_t		leaf_lblk;
 	xfs_fileoff_t		free_lblk;
@@ -647,11 +647,10 @@ xchk_directory_blocks(
 	int			error;
 
 	/* Ignore local format directories. */
-	if (sc->ip->i_d.di_format != XFS_DINODE_FMT_EXTENTS &&
-	    sc->ip->i_d.di_format != XFS_DINODE_FMT_BTREE)
+	if (ifp->if_format != XFS_DINODE_FMT_EXTENTS &&
+	    ifp->if_format != XFS_DINODE_FMT_BTREE)
 		return 0;
 
-	ifp = XFS_IFORK_PTR(sc->ip, XFS_DATA_FORK);
 	lblk = XFS_B_TO_FSB(mp, XFS_DIR2_DATA_OFFSET);
 	leaf_lblk = XFS_B_TO_FSB(mp, XFS_DIR2_LEAF_OFFSET);
 	free_lblk = XFS_B_TO_FSB(mp, XFS_DIR2_FREE_OFFSET);
diff --git a/fs/xfs/xfs_aops.c b/fs/xfs/xfs_aops.c
index d1bbf586ca95..996bc9966af2 100644
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@ -289,7 +289,7 @@ xfs_map_blocks(
 	 */
 retry:
 	xfs_ilock(ip, XFS_ILOCK_SHARED);
-	ASSERT(ip->i_d.di_format != XFS_DINODE_FMT_BTREE ||
+	ASSERT(ip->i_df.if_format != XFS_DINODE_FMT_BTREE ||
 	       (ip->i_df.if_flags & XFS_IFEXTENTS));
 
 	/*
diff --git a/fs/xfs/xfs_attr_inactive.c b/fs/xfs/xfs_attr_inactive.c
index c42f90e16b4f..00ffc46c0bf7 100644
--- a/fs/xfs/xfs_attr_inactive.c
+++ b/fs/xfs/xfs_attr_inactive.c
@@ -367,7 +367,7 @@ xfs_attr_inactive(
 	 * removal below.
 	 */
 	if (xfs_inode_hasattr(dp) &&
-	    dp->i_d.di_aformat != XFS_DINODE_FMT_LOCAL) {
+	    dp->i_afp->if_format != XFS_DINODE_FMT_LOCAL) {
 		error = xfs_attr3_root_inactive(&trans, dp);
 		if (error)
 			goto out_cancel;
diff --git a/fs/xfs/xfs_attr_list.c b/fs/xfs/xfs_attr_list.c
index 5ff1d929d3b5..e380bd1a9bfc 100644
--- a/fs/xfs/xfs_attr_list.c
+++ b/fs/xfs/xfs_attr_list.c
@@ -512,9 +512,9 @@ xfs_attr_list_ilocked(
 	 */
 	if (!xfs_inode_hasattr(dp))
 		return 0;
-	else if (dp->i_d.di_aformat == XFS_DINODE_FMT_LOCAL)
+	if (dp->i_afp->if_format == XFS_DINODE_FMT_LOCAL)
 		return xfs_attr_shortform_list(context);
-	else if (xfs_bmap_one_block(dp, XFS_ATTR_FORK))
+	if (xfs_bmap_one_block(dp, XFS_ATTR_FORK))
 		return xfs_attr_leaf_list(context);
 	return xfs_attr_node_list(context);
 }
* Unmerged path fs/xfs/xfs_bmap_util.c
diff --git a/fs/xfs/xfs_dir2_readdir.c b/fs/xfs/xfs_dir2_readdir.c
index 871ec22c9aee..66deddd5e296 100644
--- a/fs/xfs/xfs_dir2_readdir.c
+++ b/fs/xfs/xfs_dir2_readdir.c
@@ -524,7 +524,7 @@ xfs_readdir(
 	args.geo = dp->i_mount->m_dir_geo;
 	args.trans = tp;
 
-	if (dp->i_d.di_format == XFS_DINODE_FMT_LOCAL)
+	if (dp->i_df.if_format == XFS_DINODE_FMT_LOCAL)
 		rval = xfs_dir2_sf_getdents(&args, ctx);
 	else if ((rval = xfs_dir2_isblock(&args, &v)))
 		;
* Unmerged path fs/xfs/xfs_icache.c
* Unmerged path fs/xfs/xfs_inode.c
* Unmerged path fs/xfs/xfs_inode.h
diff --git a/fs/xfs/xfs_inode_item.c b/fs/xfs/xfs_inode_item.c
index cefa2484f0db..042482427a3f 100644
--- a/fs/xfs/xfs_inode_item.c
+++ b/fs/xfs/xfs_inode_item.c
@@ -36,7 +36,7 @@ xfs_inode_item_data_fork_size(
 {
 	struct xfs_inode	*ip = iip->ili_inode;
 
-	switch (ip->i_d.di_format) {
+	switch (ip->i_df.if_format) {
 	case XFS_DINODE_FMT_EXTENTS:
 		if ((iip->ili_fields & XFS_ILOG_DEXT) &&
 		    ip->i_d.di_nextents > 0 &&
@@ -77,7 +77,7 @@ xfs_inode_item_attr_fork_size(
 {
 	struct xfs_inode	*ip = iip->ili_inode;
 
-	switch (ip->i_d.di_aformat) {
+	switch (ip->i_afp->if_format) {
 	case XFS_DINODE_FMT_EXTENTS:
 		if ((iip->ili_fields & XFS_ILOG_AEXT) &&
 		    ip->i_d.di_anextents > 0 &&
@@ -142,7 +142,7 @@ xfs_inode_item_format_data_fork(
 	struct xfs_inode	*ip = iip->ili_inode;
 	size_t			data_bytes;
 
-	switch (ip->i_d.di_format) {
+	switch (ip->i_df.if_format) {
 	case XFS_DINODE_FMT_EXTENTS:
 		iip->ili_fields &=
 			~(XFS_ILOG_DDATA | XFS_ILOG_DBROOT | XFS_ILOG_DEV);
@@ -227,7 +227,7 @@ xfs_inode_item_format_attr_fork(
 	struct xfs_inode	*ip = iip->ili_inode;
 	size_t			data_bytes;
 
-	switch (ip->i_d.di_aformat) {
+	switch (ip->i_afp->if_format) {
 	case XFS_DINODE_FMT_EXTENTS:
 		iip->ili_fields &=
 			~(XFS_ILOG_ADATA | XFS_ILOG_ABROOT);
@@ -305,7 +305,7 @@ xfs_inode_to_log_dinode(
 	struct inode		*inode = VFS_I(ip);
 
 	to->di_magic = XFS_DINODE_MAGIC;
-	to->di_format = from->di_format;
+	to->di_format = xfs_ifork_format(&ip->i_df);
 	to->di_uid = i_uid_read(inode);
 	to->di_gid = i_gid_read(inode);
 	to->di_projid_lo = from->di_projid & 0xffff;
@@ -329,7 +329,7 @@ xfs_inode_to_log_dinode(
 	to->di_nextents = from->di_nextents;
 	to->di_anextents = from->di_anextents;
 	to->di_forkoff = from->di_forkoff;
-	to->di_aformat = from->di_aformat;
+	to->di_aformat = xfs_ifork_format(ip->i_afp);
 	to->di_dmevmask = from->di_dmevmask;
 	to->di_dmstate = from->di_dmstate;
 	to->di_flags = from->di_flags;
diff --git a/fs/xfs/xfs_iomap.c b/fs/xfs/xfs_iomap.c
index 837bdfc8541b..e7002c354ae4 100644
--- a/fs/xfs/xfs_iomap.c
+++ b/fs/xfs/xfs_iomap.c
@@ -853,7 +853,7 @@ xfs_buffered_write_iomap_begin(
 
 	xfs_ilock(ip, XFS_ILOCK_EXCL);
 
-	if (XFS_IS_CORRUPT(mp, !xfs_ifork_has_extents(ip, XFS_DATA_FORK)) ||
+	if (XFS_IS_CORRUPT(mp, !xfs_ifork_has_extents(&ip->i_df)) ||
 	    XFS_TEST_ERROR(false, mp, XFS_ERRTAG_BMAPIFORMAT)) {
 		error = -EFSCORRUPTED;
 		goto out_unlock;
@@ -1267,7 +1267,7 @@ xfs_xattr_iomap_begin(
 		goto out_unlock;
 	}
 
-	ASSERT(ip->i_d.di_aformat != XFS_DINODE_FMT_LOCAL);
+	ASSERT(ip->i_afp->if_format != XFS_DINODE_FMT_LOCAL);
 	error = xfs_bmapi_read(ip, offset_fsb, end_fsb - offset_fsb, &imap,
 			       &nimaps, XFS_BMAPI_ATTRFORK);
 out_unlock:
diff --git a/fs/xfs/xfs_itable.c b/fs/xfs/xfs_itable.c
index ff2da28fed90..0f1bd782c214 100644
--- a/fs/xfs/xfs_itable.c
+++ b/fs/xfs/xfs_itable.c
@@ -115,7 +115,7 @@ xfs_bulkstat_one_int(
 			buf->bs_cowextsize_blks = dic->di_cowextsize;
 	}
 
-	switch (dic->di_format) {
+	switch (ip->i_df.if_format) {
 	case XFS_DINODE_FMT_DEV:
 		buf->bs_rdev = sysv_encode_dev(inode->i_rdev);
 		buf->bs_blksize = BLKDEV_IOSIZE;
diff --git a/fs/xfs/xfs_symlink.c b/fs/xfs/xfs_symlink.c
index 973441992b08..645b86906685 100644
--- a/fs/xfs/xfs_symlink.c
+++ b/fs/xfs/xfs_symlink.c
@@ -251,7 +251,7 @@ xfs_symlink(
 		xfs_init_local_fork(ip, XFS_DATA_FORK, target_path, pathlen);
 
 		ip->i_d.di_size = pathlen;
-		ip->i_d.di_format = XFS_DINODE_FMT_LOCAL;
+		ip->i_df.if_format = XFS_DINODE_FMT_LOCAL;
 		xfs_trans_log_inode(tp, ip, XFS_ILOG_DDATA | XFS_ILOG_CORE);
 	} else {
 		int	offset;
* Unmerged path fs/xfs/xfs_trace.h
