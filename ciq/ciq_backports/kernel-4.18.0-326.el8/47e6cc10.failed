xfs: Remove typedef xfs_attr_shortform_t

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Carlos Maiolino <cmaiolino@redhat.com>
commit 47e6cc100054c8c6b809e25c286a2fd82e82bcb7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/47e6cc10.failed

	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Carlos Maiolino <cmaiolino@redhat.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 47e6cc100054c8c6b809e25c286a2fd82e82bcb7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_attr_leaf.c
diff --cc fs/xfs/libxfs/xfs_attr_leaf.c
index 6ef61e3080cc,d920183b08a9..000000000000
--- a/fs/xfs/libxfs/xfs_attr_leaf.c
+++ b/fs/xfs/libxfs/xfs_attr_leaf.c
@@@ -684,12 -728,9 +684,18 @@@ xfs_attr_shortform_add(xfs_da_args_t *a
  
  	ifp = dp->i_afp;
  	ASSERT(ifp->if_flags & XFS_IFINLINE);
++<<<<<<< HEAD
 +	sf = (xfs_attr_shortform_t *)ifp->if_u1.if_data;
 +	sfe = &sf->list[0];
 +	for (i = 0; i < sf->hdr.count; sfe = XFS_ATTR_SF_NEXTENTRY(sfe), i++) {
 +		ASSERT(!xfs_attr_match(args, sfe->namelen, sfe->nameval,
 +			sfe->flags));
 +	}
++=======
+ 	sf = (struct xfs_attr_shortform *)ifp->if_u1.if_data;
+ 	if (xfs_attr_sf_findname(args, &sfe, NULL) == -EEXIST)
+ 		ASSERT(0);
++>>>>>>> 47e6cc100054 (xfs: Remove typedef xfs_attr_shortform_t)
  
  	offset = (char *)sfe - (char *)sf;
  	size = XFS_ATTR_SF_ENTSIZE_BYNAME(args->namelen, args->valuelen);
@@@ -744,19 -787,12 +750,28 @@@ xfs_attr_shortform_remove(xfs_da_args_
  
  	dp = args->dp;
  	mp = dp->i_mount;
++<<<<<<< HEAD
 +	base = sizeof(xfs_attr_sf_hdr_t);
 +	sf = (xfs_attr_shortform_t *)dp->i_afp->if_u1.if_data;
 +	sfe = &sf->list[0];
 +	end = sf->hdr.count;
 +	for (i = 0; i < end; sfe = XFS_ATTR_SF_NEXTENTRY(sfe),
 +					base += size, i++) {
 +		size = XFS_ATTR_SF_ENTSIZE(sfe);
 +		if (xfs_attr_match(args, sfe->namelen, sfe->nameval,
 +				sfe->flags))
 +			break;
 +	}
 +	if (i == end)
 +		return -ENOATTR;
++=======
+ 	sf = (struct xfs_attr_shortform *)dp->i_afp->if_u1.if_data;
+ 
+ 	error = xfs_attr_sf_findname(args, &sfe, &base);
+ 	if (error != -EEXIST)
+ 		return error;
+ 	size = XFS_ATTR_SF_ENTSIZE(sfe);
++>>>>>>> 47e6cc100054 (xfs: Remove typedef xfs_attr_shortform_t)
  
  	/*
  	 * Fix up the attribute fork data, covering the hole
* Unmerged path fs/xfs/libxfs/xfs_attr_leaf.c
diff --git a/fs/xfs/libxfs/xfs_da_format.h b/fs/xfs/libxfs/xfs_da_format.h
index 059ac108b1b3..e708b714bf99 100644
--- a/fs/xfs/libxfs/xfs_da_format.h
+++ b/fs/xfs/libxfs/xfs_da_format.h
@@ -579,7 +579,7 @@ xfs_dir2_block_leaf_p(struct xfs_dir2_block_tail *btp)
 /*
  * Entries are packed toward the top as tight as possible.
  */
-typedef struct xfs_attr_shortform {
+struct xfs_attr_shortform {
 	struct xfs_attr_sf_hdr {	/* constant-structure header block */
 		__be16	totsize;	/* total bytes in shortform list */
 		__u8	count;	/* count of active entries */
@@ -591,7 +591,7 @@ typedef struct xfs_attr_shortform {
 		uint8_t flags;	/* flags bits (see xfs_attr_leaf.h) */
 		uint8_t nameval[1];	/* name & value bytes concatenated */
 	} list[1];			/* variable sized array */
-} xfs_attr_shortform_t;
+};
 
 typedef struct xfs_attr_leaf_map {	/* RLE map of free bytes */
 	__be16	base;			  /* base of free region */
diff --git a/fs/xfs/xfs_attr_list.c b/fs/xfs/xfs_attr_list.c
index c231c085c4ba..3ed43b02682e 100644
--- a/fs/xfs/xfs_attr_list.c
+++ b/fs/xfs/xfs_attr_list.c
@@ -61,7 +61,7 @@ xfs_attr_shortform_list(
 	int				error = 0;
 
 	ASSERT(dp->i_afp != NULL);
-	sf = (xfs_attr_shortform_t *)dp->i_afp->if_u1.if_data;
+	sf = (struct xfs_attr_shortform *)dp->i_afp->if_u1.if_data;
 	ASSERT(sf != NULL);
 	if (!sf->hdr.count)
 		return 0;
diff --git a/fs/xfs/xfs_ondisk.h b/fs/xfs/xfs_ondisk.h
index cfa54d6b7c11..0b154236277c 100644
--- a/fs/xfs/xfs_ondisk.h
+++ b/fs/xfs/xfs_ondisk.h
@@ -85,12 +85,12 @@ xfs_check_ondisk_structs(void)
 	XFS_CHECK_OFFSET(xfs_attr_leaf_name_remote_t, namelen,	8);
 	XFS_CHECK_OFFSET(xfs_attr_leaf_name_remote_t, name,	9);
 	XFS_CHECK_STRUCT_SIZE(xfs_attr_leafblock_t,		40);
-	XFS_CHECK_OFFSET(xfs_attr_shortform_t, hdr.totsize,	0);
-	XFS_CHECK_OFFSET(xfs_attr_shortform_t, hdr.count,	2);
-	XFS_CHECK_OFFSET(xfs_attr_shortform_t, list[0].namelen,	4);
-	XFS_CHECK_OFFSET(xfs_attr_shortform_t, list[0].valuelen, 5);
-	XFS_CHECK_OFFSET(xfs_attr_shortform_t, list[0].flags,	6);
-	XFS_CHECK_OFFSET(xfs_attr_shortform_t, list[0].nameval,	7);
+	XFS_CHECK_OFFSET(struct xfs_attr_shortform, hdr.totsize, 0);
+	XFS_CHECK_OFFSET(struct xfs_attr_shortform, hdr.count,	 2);
+	XFS_CHECK_OFFSET(struct xfs_attr_shortform, list[0].namelen,	4);
+	XFS_CHECK_OFFSET(struct xfs_attr_shortform, list[0].valuelen,	5);
+	XFS_CHECK_OFFSET(struct xfs_attr_shortform, list[0].flags,	6);
+	XFS_CHECK_OFFSET(struct xfs_attr_shortform, list[0].nameval,	7);
 	XFS_CHECK_STRUCT_SIZE(xfs_da_blkinfo_t,			12);
 	XFS_CHECK_STRUCT_SIZE(xfs_da_intnode_t,			16);
 	XFS_CHECK_STRUCT_SIZE(xfs_da_node_entry_t,		8);
