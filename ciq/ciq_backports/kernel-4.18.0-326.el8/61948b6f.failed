xfs: ratelimit unmount time per-buffer I/O error alert

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Brian Foster <bfoster@redhat.com>
commit 61948b6fb276ad95ad63f82863e607719a31a628
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/61948b6f.failed

At unmount time, XFS emits an alert for every in-core buffer that
might have undergone a write error. In practice this behavior is
probably reasonable given that the filesystem is likely short lived
once I/O errors begin to occur consistently. Under certain test or
otherwise expected error conditions, this can spam the logs and slow
down the unmount.

Now that we have a ratelimit mechanism specifically for buffer
alerts, reuse it for the per-buffer alerts in xfs_wait_buftarg().
Also lift the final repair message out of the loop so it always
prints and assert that the metadata error handling code has shut
down the fs.

	Signed-off-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Allison Collins <allison.henderson@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 61948b6fb276ad95ad63f82863e607719a31a628)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_buf.c
diff --cc fs/xfs/xfs_buf.c
index cd7fa3f9d814,3918270f4eab..000000000000
--- a/fs/xfs/xfs_buf.c
+++ b/fs/xfs/xfs_buf.c
@@@ -1652,13 -1652,14 +1652,20 @@@ xfs_buftarg_drain_rele
  	return LRU_REMOVED;
  }
  
 +/*
 + * Wait for outstanding I/O on the buftarg to complete.
 + */
  void
 -xfs_wait_buftarg(
 +xfs_buftarg_wait(
  	struct xfs_buftarg	*btp)
  {
++<<<<<<< HEAD
++=======
+ 	LIST_HEAD(dispose);
+ 	int			loop = 0;
+ 	bool			write_fail = false;
+ 
++>>>>>>> 61948b6fb276 (xfs: ratelimit unmount time per-buffer I/O error alert)
  	/*
  	 * First wait on the buftarg I/O count for all in-flight buffers to be
  	 * released. This is critical as new buffers do not make the LRU until
* Unmerged path fs/xfs/xfs_buf.c
