SUNRPC: Cleanup - constify a number of xdr_buf helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Trond Myklebust <trond.myklebust@hammerspace.com>
commit f8d0e60f1056687826abc1eded98f0ea067dfc4c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/f8d0e60f.failed

There are a number of xdr helpers for struct xdr_buf that do not change
the structure itself. Mark those as taking const pointers for
documentation purposes.

	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit f8d0e60f1056687826abc1eded98f0ea067dfc4c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sunrpc/xdr.h
diff --cc include/linux/sunrpc/xdr.h
index 751d63851e5c,68d49fdc4ee9..000000000000
--- a/include/linux/sunrpc/xdr.h
+++ b/include/linux/sunrpc/xdr.h
@@@ -181,15 -182,14 +181,20 @@@ xdr_adjust_iovec(struct kvec *iov, __be
   * XDR buffer helper functions
   */
  extern void xdr_shift_buf(struct xdr_buf *, size_t);
++<<<<<<< HEAD
 +extern void xdr_buf_from_iov(struct kvec *, struct xdr_buf *);
 +extern int xdr_buf_subsegment(const struct xdr_buf *buf, struct xdr_buf *subbuf,
 +			      unsigned int base, unsigned int len);
++=======
+ extern void xdr_buf_from_iov(const struct kvec *, struct xdr_buf *);
+ extern int xdr_buf_subsegment(const struct xdr_buf *, struct xdr_buf *, unsigned int, unsigned int);
++>>>>>>> f8d0e60f1056 (SUNRPC: Cleanup - constify a number of xdr_buf helpers)
  extern void xdr_buf_trim(struct xdr_buf *, unsigned int);
- extern int read_bytes_from_xdr_buf(struct xdr_buf *, unsigned int, void *, unsigned int);
- extern int write_bytes_to_xdr_buf(struct xdr_buf *, unsigned int, void *, unsigned int);
+ extern int read_bytes_from_xdr_buf(const struct xdr_buf *, unsigned int, void *, unsigned int);
+ extern int write_bytes_to_xdr_buf(const struct xdr_buf *, unsigned int, void *, unsigned int);
  
- extern int xdr_encode_word(struct xdr_buf *, unsigned int, u32);
- extern int xdr_decode_word(struct xdr_buf *, unsigned int, u32 *);
+ extern int xdr_encode_word(const struct xdr_buf *, unsigned int, u32);
+ extern int xdr_decode_word(const struct xdr_buf *, unsigned int, u32 *);
  
  struct xdr_array2_desc;
  typedef int (*xdr_xcode_elem_t)(struct xdr_array2_desc *desc, void *elem);
@@@ -250,52 -250,10 +255,58 @@@ extern void xdr_init_decode_pages(struc
  extern __be32 *xdr_inline_decode(struct xdr_stream *xdr, size_t nbytes);
  extern unsigned int xdr_read_pages(struct xdr_stream *xdr, unsigned int len);
  extern void xdr_enter_page(struct xdr_stream *xdr, unsigned int len);
++<<<<<<< HEAD
 +extern int xdr_process_buf(struct xdr_buf *buf, unsigned int offset, unsigned int len, int (*actor)(struct scatterlist *, void *), void *data);
 +extern uint64_t xdr_align_data(struct xdr_stream *, uint64_t, uint32_t);
 +extern uint64_t xdr_expand_hole(struct xdr_stream *, uint64_t, uint64_t);
 +
 +/**
 + * xdr_set_scratch_buffer - Attach a scratch buffer for decoding data.
 + * @xdr: pointer to xdr_stream struct
 + * @buf: pointer to an empty buffer
 + * @buflen: size of 'buf'
 + *
 + * The scratch buffer is used when decoding from an array of pages.
 + * If an xdr_inline_decode() call spans across page boundaries, then
 + * we copy the data into the scratch buffer in order to allow linear
 + * access.
 + */
 +static inline void
 +xdr_set_scratch_buffer(struct xdr_stream *xdr, void *buf, size_t buflen)
 +{
 +	xdr->scratch.iov_base = buf;
 +	xdr->scratch.iov_len = buflen;
 +}
 +
 +/**
 + * xdr_set_scratch_page - Attach a scratch buffer for decoding data
 + * @xdr: pointer to xdr_stream struct
 + * @page: an anonymous page
 + *
 + * See xdr_set_scratch_buffer().
 + */
 +static inline void
 +xdr_set_scratch_page(struct xdr_stream *xdr, struct page *page)
 +{
 +	xdr_set_scratch_buffer(xdr, page_address(page), PAGE_SIZE);
 +}
 +
 +/**
 + * xdr_reset_scratch_buffer - Clear scratch buffer information
 + * @xdr: pointer to xdr_stream struct
 + *
 + * See xdr_set_scratch_buffer().
 + */
 +static inline void
 +xdr_reset_scratch_buffer(struct xdr_stream *xdr)
 +{
 +	xdr_set_scratch_buffer(xdr, NULL, 0);
 +}
++=======
+ extern int xdr_process_buf(const struct xdr_buf *buf, unsigned int offset, unsigned int len, int (*actor)(struct scatterlist *, void *), void *data);
+ extern unsigned int xdr_align_data(struct xdr_stream *, unsigned int offset, unsigned int length);
+ extern unsigned int xdr_expand_hole(struct xdr_stream *, unsigned int offset, unsigned int length);
++>>>>>>> f8d0e60f1056 (SUNRPC: Cleanup - constify a number of xdr_buf helpers)
  
  /**
   * xdr_stream_remaining - Return the number of bytes remaining in the stream
* Unmerged path include/linux/sunrpc/xdr.h
diff --git a/net/sunrpc/xdr.c b/net/sunrpc/xdr.c
index 09eff12df7e6..14217116dd94 100644
--- a/net/sunrpc/xdr.c
+++ b/net/sunrpc/xdr.c
@@ -122,8 +122,7 @@ EXPORT_SYMBOL_GPL(xdr_decode_string_inplace);
  * @len: length of string, in bytes
  *
  */
-void
-xdr_terminate_string(struct xdr_buf *buf, const u32 len)
+void xdr_terminate_string(const struct xdr_buf *buf, const u32 len)
 {
 	char *kaddr;
 
@@ -133,8 +132,7 @@ xdr_terminate_string(struct xdr_buf *buf, const u32 len)
 }
 EXPORT_SYMBOL_GPL(xdr_terminate_string);
 
-size_t
-xdr_buf_pagecount(struct xdr_buf *buf)
+size_t xdr_buf_pagecount(const struct xdr_buf *buf)
 {
 	if (!buf->page_len)
 		return 0;
@@ -1337,8 +1335,7 @@ EXPORT_SYMBOL_GPL(xdr_enter_page);
 
 static const struct kvec empty_iov = {.iov_base = NULL, .iov_len = 0};
 
-void
-xdr_buf_from_iov(struct kvec *iov, struct xdr_buf *buf)
+void xdr_buf_from_iov(const struct kvec *iov, struct xdr_buf *buf)
 {
 	buf->head[0] = *iov;
 	buf->tail[0] = empty_iov;
@@ -1450,7 +1447,8 @@ void xdr_buf_trim(struct xdr_buf *buf, unsigned int len)
 }
 EXPORT_SYMBOL_GPL(xdr_buf_trim);
 
-static void __read_bytes_from_xdr_buf(struct xdr_buf *subbuf, void *obj, unsigned int len)
+static void __read_bytes_from_xdr_buf(const struct xdr_buf *subbuf,
+				      void *obj, unsigned int len)
 {
 	unsigned int this_len;
 
@@ -1467,7 +1465,8 @@ static void __read_bytes_from_xdr_buf(struct xdr_buf *subbuf, void *obj, unsigne
 }
 
 /* obj is assumed to point to allocated memory of size at least len: */
-int read_bytes_from_xdr_buf(struct xdr_buf *buf, unsigned int base, void *obj, unsigned int len)
+int read_bytes_from_xdr_buf(const struct xdr_buf *buf, unsigned int base,
+			    void *obj, unsigned int len)
 {
 	struct xdr_buf subbuf;
 	int status;
@@ -1480,7 +1479,8 @@ int read_bytes_from_xdr_buf(struct xdr_buf *buf, unsigned int base, void *obj, u
 }
 EXPORT_SYMBOL_GPL(read_bytes_from_xdr_buf);
 
-static void __write_bytes_to_xdr_buf(struct xdr_buf *subbuf, void *obj, unsigned int len)
+static void __write_bytes_to_xdr_buf(const struct xdr_buf *subbuf,
+				     void *obj, unsigned int len)
 {
 	unsigned int this_len;
 
@@ -1497,7 +1497,8 @@ static void __write_bytes_to_xdr_buf(struct xdr_buf *subbuf, void *obj, unsigned
 }
 
 /* obj is assumed to point to allocated memory of size at least len: */
-int write_bytes_to_xdr_buf(struct xdr_buf *buf, unsigned int base, void *obj, unsigned int len)
+int write_bytes_to_xdr_buf(const struct xdr_buf *buf, unsigned int base,
+			   void *obj, unsigned int len)
 {
 	struct xdr_buf subbuf;
 	int status;
@@ -1510,8 +1511,7 @@ int write_bytes_to_xdr_buf(struct xdr_buf *buf, unsigned int base, void *obj, un
 }
 EXPORT_SYMBOL_GPL(write_bytes_to_xdr_buf);
 
-int
-xdr_decode_word(struct xdr_buf *buf, unsigned int base, u32 *obj)
+int xdr_decode_word(const struct xdr_buf *buf, unsigned int base, u32 *obj)
 {
 	__be32	raw;
 	int	status;
@@ -1524,8 +1524,7 @@ xdr_decode_word(struct xdr_buf *buf, unsigned int base, u32 *obj)
 }
 EXPORT_SYMBOL_GPL(xdr_decode_word);
 
-int
-xdr_encode_word(struct xdr_buf *buf, unsigned int base, u32 obj)
+int xdr_encode_word(const struct xdr_buf *buf, unsigned int base, u32 obj)
 {
 	__be32	raw = cpu_to_be32(obj);
 
@@ -1534,9 +1533,8 @@ xdr_encode_word(struct xdr_buf *buf, unsigned int base, u32 obj)
 EXPORT_SYMBOL_GPL(xdr_encode_word);
 
 /* Returns 0 on success, or else a negative error code. */
-static int
-xdr_xcode_array2(struct xdr_buf *buf, unsigned int base,
-		 struct xdr_array2_desc *desc, int encode)
+static int xdr_xcode_array2(const struct xdr_buf *buf, unsigned int base,
+			    struct xdr_array2_desc *desc, int encode)
 {
 	char *elem = NULL, *c;
 	unsigned int copied = 0, todo, avail_here;
@@ -1728,9 +1726,8 @@ xdr_xcode_array2(struct xdr_buf *buf, unsigned int base,
 	return err;
 }
 
-int
-xdr_decode_array2(struct xdr_buf *buf, unsigned int base,
-		  struct xdr_array2_desc *desc)
+int xdr_decode_array2(const struct xdr_buf *buf, unsigned int base,
+		      struct xdr_array2_desc *desc)
 {
 	if (base >= buf->len)
 		return -EINVAL;
@@ -1739,9 +1736,8 @@ xdr_decode_array2(struct xdr_buf *buf, unsigned int base,
 }
 EXPORT_SYMBOL_GPL(xdr_decode_array2);
 
-int
-xdr_encode_array2(struct xdr_buf *buf, unsigned int base,
-		  struct xdr_array2_desc *desc)
+int xdr_encode_array2(const struct xdr_buf *buf, unsigned int base,
+		      struct xdr_array2_desc *desc)
 {
 	if ((unsigned long) base + 4 + desc->array_len * desc->elem_size >
 	    buf->head->iov_len + buf->page_len + buf->tail->iov_len)
@@ -1751,9 +1747,9 @@ xdr_encode_array2(struct xdr_buf *buf, unsigned int base,
 }
 EXPORT_SYMBOL_GPL(xdr_encode_array2);
 
-int
-xdr_process_buf(struct xdr_buf *buf, unsigned int offset, unsigned int len,
-		int (*actor)(struct scatterlist *, void *), void *data)
+int xdr_process_buf(const struct xdr_buf *buf, unsigned int offset,
+		    unsigned int len,
+		    int (*actor)(struct scatterlist *, void *), void *data)
 {
 	int i, ret = 0;
 	unsigned int page_len, thislen, page_offset;
