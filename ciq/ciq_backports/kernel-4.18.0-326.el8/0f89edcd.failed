xfs: Lift -ENOSPC handler from xfs_attr_leaf_addname

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Allison Collins <allison.henderson@oracle.com>
commit 0f89edcd8e8484dd1790ec474a650dd774c6b75e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/0f89edcd.failed

Lift -ENOSPC handler from xfs_attr_leaf_addname.  This will help to
reorganize transitions between the attr forms later.

	Signed-off-by: Allison Collins <allison.henderson@oracle.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Acked-by: Dave Chinner <dchinner@redhat.com>
(cherry picked from commit 0f89edcd8e8484dd1790ec474a650dd774c6b75e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_attr.c
diff --cc fs/xfs/libxfs/xfs_attr.c
index 9cb14a5eed33,2e055c079f39..000000000000
--- a/fs/xfs/libxfs/xfs_attr.c
+++ b/fs/xfs/libxfs/xfs_attr.c
@@@ -230,10 -299,19 +230,24 @@@ xfs_attr_set_args
  			return error;
  
  		/*
++<<<<<<< HEAD
 +		 * It won't fit in the shortform, transform to a leaf block.
 +		 * GROT: another possible req'mt for a double-split btree op.
++=======
+ 		 * Promote the attribute list to the Btree format.
+ 		 */
+ 		error = xfs_attr3_leaf_to_node(args);
+ 		if (error)
+ 			return error;
+ 
+ 		/*
+ 		 * Finish any deferred work items and roll the transaction once
+ 		 * more.  The goal here is to call node_addname with the inode
+ 		 * and transaction in the same state (inode locked and joined,
+ 		 * transaction clean) no matter how we got to this step.
++>>>>>>> 0f89edcd8e84 (xfs: Lift -ENOSPC handler from xfs_attr_leaf_addname)
  		 */
 -		error = xfs_defer_finish(&args->trans);
 +		error = xfs_attr_shortform_to_leaf(args, &leaf_bp);
  		if (error)
  			return error;
  
@@@ -497,29 -596,21 +511,33 @@@ xfs_attr_restore_rmt_blk
  }
  
  /*
 - * Tries to add an attribute to an inode in leaf form
 + * Add a name to the leaf attribute list structure
   *
 - * This function is meant to execute as part of a delayed operation and leaves
 - * the transaction handling to the caller.  On success the attribute is added
 - * and the inode and transaction are left dirty.  If there is not enough space,
 - * the attr data is converted to node format and -ENOSPC is returned. Caller is
 - * responsible for handling the dirty inode and transaction or adding the attr
 - * in node format.
 + * This leaf block cannot have a "remote" value, we only call this routine
 + * if bmap_one_block() says there is only one block (ie: no remote blks).
   */
  STATIC int
 -xfs_attr_leaf_try_add(
 -	struct xfs_da_args	*args,
 -	struct xfs_buf		*bp)
 +xfs_attr_leaf_addname(
 +	struct xfs_da_args	*args)
  {
++<<<<<<< HEAD
 +	struct xfs_inode	*dp;
 +	struct xfs_buf		*bp;
 +	int			retval, error, forkoff;
 +
 +	trace_xfs_attr_leaf_addname(args);
 +
 +	/*
 +	 * Read the (only) block in the attribute list in.
 +	 */
 +	dp = args->dp;
 +	args->blkno = 0;
 +	error = xfs_attr3_leaf_read(args->trans, args->dp, args->blkno, &bp);
 +	if (error)
 +		return error;
++=======
+ 	int			retval;
++>>>>>>> 0f89edcd8e84 (xfs: Lift -ENOSPC handler from xfs_attr_leaf_addname)
  
  	/*
  	 * Look up the given attribute in the leaf block.  Figure out if
@@@ -549,37 -642,35 +567,45 @@@
  	}
  
  	/*
- 	 * Add the attribute to the leaf block, transitioning to a Btree
- 	 * if required.
+ 	 * Add the attribute to the leaf block
  	 */
++<<<<<<< HEAD
 +	retval = xfs_attr3_leaf_add(bp, args);
 +	if (retval == -ENOSPC) {
 +		/*
 +		 * Promote the attribute list to the Btree format, then
 +		 * Commit that transaction so that the node_addname() call
 +		 * can manage its own transactions.
 +		 */
 +		error = xfs_attr3_leaf_to_node(args);
 +		if (error)
 +			return error;
 +		error = xfs_defer_finish(&args->trans);
 +		if (error)
 +			return error;
++=======
+ 	return xfs_attr3_leaf_add(bp, args);
+ 
+ out_brelse:
+ 	xfs_trans_brelse(args->trans, bp);
+ 	return retval;
+ }
++>>>>>>> 0f89edcd8e84 (xfs: Lift -ENOSPC handler from xfs_attr_leaf_addname)
  
 +		/*
 +		 * Commit the current trans (including the inode) and start
 +		 * a new one.
 +		 */
 +		error = xfs_trans_roll_inode(&args->trans, dp);
 +		if (error)
 +			return error;
  
 -/*
 - * Add a name to the leaf attribute list structure
 - *
 - * This leaf block cannot have a "remote" value, we only call this routine
 - * if bmap_one_block() says there is only one block (ie: no remote blks).
 - */
 -STATIC int
 -xfs_attr_leaf_addname(
 -	struct xfs_da_args	*args)
 -{
 -	int			error, forkoff;
 -	struct xfs_buf		*bp = NULL;
 -	struct xfs_inode	*dp = args->dp;
 -
 -	trace_xfs_attr_leaf_addname(args);
 -
 -	error = xfs_attr_leaf_try_add(args, bp);
 -	if (error)
 +		/*
 +		 * Fob the whole rest of the problem off on the Btree code.
 +		 */
 +		error = xfs_attr_node_addname(args);
  		return error;
 +	}
  
  	/*
  	 * Commit the transaction that added the attr name so that
* Unmerged path fs/xfs/libxfs/xfs_attr.c
