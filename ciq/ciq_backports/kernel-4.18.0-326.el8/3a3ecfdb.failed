cpupower: Add cpuid cap flag for MSR_AMD_HWCR support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Nathan Fontenot <nathan.fontenot@amd.com>
commit 3a3ecfdb605cc8d98988012a4f88c34b4d220c21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/3a3ecfdb.failed

Remove the family check for accessing the MSR_AMD_HWCR MSR and replace
it with a cpupower cap flag.

This update also allows for the removal of the local cpupower_cpu_info
variable in cpufreq_has_boost_support() since we no longer need it to
check the family.

	Signed-off-by: Nathan Fontenot <nathan.fontenot@amd.com>
	Reviewed-by: Robert Richter <rrichter@amd.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 3a3ecfdb605cc8d98988012a4f88c34b4d220c21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/cpupower/utils/helpers/cpuid.c
#	tools/power/cpupower/utils/helpers/helpers.h
#	tools/power/cpupower/utils/helpers/misc.c
diff --cc tools/power/cpupower/utils/helpers/cpuid.c
index 03b44a124d65,72eb43593180..000000000000
--- a/tools/power/cpupower/utils/helpers/cpuid.c
+++ b/tools/power/cpupower/utils/helpers/cpuid.c
@@@ -124,11 -125,26 +124,34 @@@ out
  	if (cpuid_level >= 6 && (cpuid_ecx(6) & 0x1))
  		cpu_info->caps |= CPUPOWER_CAP_APERF;
  
++<<<<<<< HEAD
 +	/* AMD Boost state enable/disable register */
 +	if (cpu_info->vendor == X86_VENDOR_AMD) {
 +		if (ext_cpuid_level >= 0x80000007 &&
 +		    (cpuid_edx(0x80000007) & (1 << 9)))
 +			cpu_info->caps |= CPUPOWER_CAP_AMD_CPB;
++=======
+ 	/* AMD or Hygon Boost state enable/disable register */
+ 	if (cpu_info->vendor == X86_VENDOR_AMD ||
+ 	    cpu_info->vendor == X86_VENDOR_HYGON) {
+ 		if (ext_cpuid_level >= 0x80000007) {
+ 			if (cpuid_edx(0x80000007) & (1 << 9)) {
+ 				cpu_info->caps |= CPUPOWER_CAP_AMD_CPB;
+ 
+ 				if (cpu_info->family >= 0x17)
+ 					cpu_info->caps |= CPUPOWER_CAP_AMD_CPB_MSR;
+ 			}
+ 
+ 			if ((cpuid_edx(0x80000007) & (1 << 7)) &&
+ 			    cpu_info->family != 0x14) {
+ 				/* HW pstate was not implemented in family 0x14 */
+ 				cpu_info->caps |= CPUPOWER_CAP_AMD_HW_PSTATE;
+ 
+ 				if (cpu_info->family >= 0x17)
+ 					cpu_info->caps |= CPUPOWER_CAP_AMD_PSTATEDEF;
+ 			}
+ 		}
++>>>>>>> 3a3ecfdb605c (cpupower: Add cpuid cap flag for MSR_AMD_HWCR support)
  
  		if (ext_cpuid_level >= 0x80000008 &&
  		    cpuid_ebx(0x80000008) & (1 << 4))
diff --cc tools/power/cpupower/utils/helpers/helpers.h
index 51ad213a4566,33ffacee7fcb..000000000000
--- a/tools/power/cpupower/utils/helpers/helpers.h
+++ b/tools/power/cpupower/utils/helpers/helpers.h
@@@ -70,6 -70,9 +70,12 @@@ enum cpupower_cpu_vendor {X86_VENDOR_UN
  #define CPUPOWER_CAP_IS_SNB		0x00000020
  #define CPUPOWER_CAP_INTEL_IDA		0x00000040
  #define CPUPOWER_CAP_AMD_RDPRU		0x00000080
++<<<<<<< HEAD
++=======
+ #define CPUPOWER_CAP_AMD_HW_PSTATE	0x00000100
+ #define CPUPOWER_CAP_AMD_PSTATEDEF	0x00000200
+ #define CPUPOWER_CAP_AMD_CPB_MSR	0x00000400
++>>>>>>> 3a3ecfdb605c (cpupower: Add cpuid cap flag for MSR_AMD_HWCR support)
  
  #define CPUPOWER_AMD_CPBDIS		0x02000000
  
diff --cc tools/power/cpupower/utils/helpers/misc.c
index 7cb2ce981f75,fc6e34511721..000000000000
--- a/tools/power/cpupower/utils/helpers/misc.c
+++ b/tools/power/cpupower/utils/helpers/misc.c
@@@ -30,7 -29,7 +25,11 @@@ int cpufreq_has_boost_support(unsigned 
  		 * has Hardware determined variable increments instead.
  		 */
  
++<<<<<<< HEAD
 +		if (cpu_info.family == 0x17) {
++=======
+ 		if (cpupower_cpu_info.caps & CPUPOWER_CAP_AMD_CPB_MSR) {
++>>>>>>> 3a3ecfdb605c (cpupower: Add cpuid cap flag for MSR_AMD_HWCR support)
  			if (!read_msr(cpu, MSR_AMD_HWCR, &val)) {
  				if (!(val & CPUPOWER_AMD_CPBDIS))
  					*active = 1;
* Unmerged path tools/power/cpupower/utils/helpers/cpuid.c
* Unmerged path tools/power/cpupower/utils/helpers/helpers.h
* Unmerged path tools/power/cpupower/utils/helpers/misc.c
