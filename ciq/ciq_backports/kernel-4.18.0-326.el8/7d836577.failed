moduleparams: Add hexint type parameter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Paul Menzel <pmenzel@molgen.mpg.de>
commit 7d8365771ffb0edc336f2cd45e96ef8214a83dca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/7d836577.failed

For bitmasks printing values in hex is more convenient.

Prefix with `0x` to make it clear, that it’s a hex value, and pad it
out.

Using the helper for `amdgpu.ppfeaturemask`, it will look like below.

Before:

    $ more /sys/module/amdgpu/parameters/ppfeaturemask
    4294950911

After:

    $ more /sys/module/amdgpu/parameters/ppfeaturemask
    0xffffbfff

	Cc: linux-kernel@vger.kernel.org
	Cc: amd-gfx@lists.freedesktop.org
	Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
	Reviewed-by: Christian König <christian.koenig@amd.com>
	Signed-off-by: Christian König <christian.koenig@amd.com>
Link: https://patchwork.freedesktop.org/patch/374726/
(cherry picked from commit 7d8365771ffb0edc336f2cd45e96ef8214a83dca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/params.c
diff --cc kernel/params.c
index 8ac751c938f8,3835fb82c64b..000000000000
--- a/kernel/params.c
+++ b/kernel/params.c
@@@ -244,14 -233,15 +244,26 @@@ char *parse_args(const char *doing
  	EXPORT_SYMBOL(param_ops_##name)
  
  
++<<<<<<< HEAD
 +STANDARD_PARAM_DEF(byte,	unsigned char,		"%hhu", kstrtou8);
 +STANDARD_PARAM_DEF(short,	short,			"%hi",  kstrtos16);
 +STANDARD_PARAM_DEF(ushort,	unsigned short,		"%hu",  kstrtou16);
 +STANDARD_PARAM_DEF(int,		int,			"%i",   kstrtoint);
 +STANDARD_PARAM_DEF(uint,	unsigned int,		"%u",   kstrtouint);
 +STANDARD_PARAM_DEF(long,	long,			"%li",  kstrtol);
 +STANDARD_PARAM_DEF(ulong,	unsigned long,		"%lu",  kstrtoul);
 +STANDARD_PARAM_DEF(ullong,	unsigned long long,	"%llu", kstrtoull);
++=======
+ STANDARD_PARAM_DEF(byte,	unsigned char,		"%hhu",		kstrtou8);
+ STANDARD_PARAM_DEF(short,	short,			"%hi",		kstrtos16);
+ STANDARD_PARAM_DEF(ushort,	unsigned short,		"%hu",		kstrtou16);
+ STANDARD_PARAM_DEF(int,		int,			"%i",		kstrtoint);
+ STANDARD_PARAM_DEF(uint,	unsigned int,		"%u",		kstrtouint);
+ STANDARD_PARAM_DEF(long,	long,			"%li",		kstrtol);
+ STANDARD_PARAM_DEF(ulong,	unsigned long,		"%lu",		kstrtoul);
+ STANDARD_PARAM_DEF(ullong,	unsigned long long,	"%llu",		kstrtoull);
+ STANDARD_PARAM_DEF(hexint,	unsigned int,		"%#08x", 	kstrtouint);
++>>>>>>> 7d8365771ffb (moduleparams: Add hexint type parameter)
  
  int param_set_charp(const char *val, const struct kernel_param *kp)
  {
diff --git a/include/linux/moduleparam.h b/include/linux/moduleparam.h
index ba36506db4fb..db059c27a255 100644
--- a/include/linux/moduleparam.h
+++ b/include/linux/moduleparam.h
@@ -120,7 +120,7 @@ struct kparam_array
  * you can create your own by defining those variables.
  *
  * Standard types are:
- *	byte, short, ushort, int, uint, long, ulong
+ *	byte, hexint, short, ushort, int, uint, long, ulong
  *	charp: a character pointer
  *	bool: a bool, values 0/1, y/n, Y/N.
  *	invbool: the above, only sense-reversed (N = true).
@@ -378,6 +378,11 @@ extern int param_set_ullong(const char *val, const struct kernel_param *kp);
 extern int param_get_ullong(char *buffer, const struct kernel_param *kp);
 #define param_check_ullong(name, p) __param_check(name, p, unsigned long long)
 
+extern const struct kernel_param_ops param_ops_hexint;
+extern int param_set_hexint(const char *val, const struct kernel_param *kp);
+extern int param_get_hexint(char *buffer, const struct kernel_param *kp);
+#define param_check_hexint(name, p) param_check_uint(name, p)
+
 extern const struct kernel_param_ops param_ops_charp;
 extern int param_set_charp(const char *val, const struct kernel_param *kp);
 extern int param_get_charp(char *buffer, const struct kernel_param *kp);
* Unmerged path kernel/params.c
