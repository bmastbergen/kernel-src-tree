RDMA/mlx5: Check for ERR_PTR from uverbs_zalloc()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Jason Gunthorpe <jgg@nvidia.com>
commit d0b7721c5e0d940a514fbff40b9d7bae92735f7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/d0b7721c.failed

The return code from uverbs_zalloc() was wrongly checked, it is ERR_PTR
not NULL like other allocators:

drivers/infiniband/hw/mlx5/devx.c:2110 devx_umem_reg_cmd_alloc() warn: passing zero to 'PTR_ERR'

Fixes: 878f7b31c3a7 ("RDMA/mlx5: Use ib_umem_find_best_pgsz() for devx")
Link: https://lore.kernel.org/r/0-v1-4d05ccc1c223+173-devx_err_ptr_jgg@nvidia.com
	Reported-by: kernel test robot <lkp@intel.com>
	Acked-by: Leon Romanovsky <leonro@nvidia.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit d0b7721c5e0d940a514fbff40b9d7bae92735f7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/devx.c
diff --cc drivers/infiniband/hw/mlx5/devx.c
index ed09a0921724,ad0173f62c0e..000000000000
--- a/drivers/infiniband/hw/mlx5/devx.c
+++ b/drivers/infiniband/hw/mlx5/devx.c
@@@ -2195,18 -2083,31 +2195,23 @@@ static int devx_umem_reg_cmd_alloc(stru
  				   struct devx_umem *obj,
  				   struct devx_umem_reg_cmd *cmd)
  {
 -	unsigned int page_size;
 -	__be64 *mtt;
 -	void *umem;
 -
 -	/*
 -	 * We don't know what the user intends to use this umem for, but the HW
 -	 * restrictions must be met. MR, doorbell records, QP, WQ and CQ all
 -	 * have different requirements. Since we have no idea how to sort this
 -	 * out, only support PAGE_SIZE with the expectation that userspace will
 -	 * provide the necessary alignments inside the known PAGE_SIZE and that
 -	 * FW will check everything.
 -	 */
 -	page_size = ib_umem_find_best_pgoff(
 -		obj->umem, PAGE_SIZE,
 -		__mlx5_page_offset_to_bitmask(__mlx5_bit_sz(umem, page_offset),
 -					      0));
 -	if (!page_size)
 -		return -EINVAL;
 -
  	cmd->inlen = MLX5_ST_SZ_BYTES(create_umem_in) +
 -		     (MLX5_ST_SZ_BYTES(mtt) *
 -		      ib_umem_num_dma_blocks(obj->umem, page_size));
 +		    (MLX5_ST_SZ_BYTES(mtt) * obj->ncont);
  	cmd->in = uverbs_zalloc(attrs, cmd->inlen);
++<<<<<<< HEAD
 +	return PTR_ERR_OR_ZERO(cmd->in);
 +}
 +
 +static void devx_umem_reg_cmd_build(struct mlx5_ib_dev *dev,
 +				    struct devx_umem *obj,
 +				    struct devx_umem_reg_cmd *cmd)
 +{
 +	void *umem;
 +	__be64 *mtt;
++=======
+ 	if (IS_ERR(cmd->in))
+ 		return PTR_ERR(cmd->in);
++>>>>>>> d0b7721c5e0d (RDMA/mlx5: Check for ERR_PTR from uverbs_zalloc())
  
  	umem = MLX5_ADDR_OF(create_umem_in, cmd->in, umem);
  	mtt = (__be64 *)MLX5_ADDR_OF(umem, umem, mtt);
* Unmerged path drivers/infiniband/hw/mlx5/devx.c
