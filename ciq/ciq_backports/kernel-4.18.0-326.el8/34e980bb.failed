IMA: Add audit log for failure conditions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
commit 34e980bb83a07b533d175221436d698c1312c4a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/34e980bb.failed

process_buffer_measurement() and ima_alloc_key_entry() functions need to
log an audit message for auditing integrity measurement failures.

Add audit message in these two functions. Remove "pr_devel" log message
in process_buffer_measurement().

Sample audit messages:

[    6.303048] audit: type=1804 audit(1592506281.627:2): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel op=measuring_key cause=ENOMEM comm="swapper/0" name=".builtin_trusted_keys" res=0 errno=-12

[    8.019432] audit: type=1804 audit(1592506283.344:10): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 op=measuring_kexec_cmdline cause=hashing_error comm="systemd" name="kexec-cmdline" res=0 errno=-22

	Signed-off-by: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
	Suggested-by: Mimi Zohar <zohar@linux.ibm.com>
	Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
(cherry picked from commit 34e980bb83a07b533d175221436d698c1312c4a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/integrity/ima/ima.h
#	security/integrity/ima/ima_main.c
#	security/integrity/ima/ima_queue_keys.c
diff --cc security/integrity/ima/ima.h
index 0e230ccfda41,4515975cc540..000000000000
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@@ -178,26 -180,32 +178,49 @@@ struct ima_h_table 
  };
  extern struct ima_h_table ima_htable;
  
 -static inline unsigned int ima_hash_key(u8 *digest)
 +static inline unsigned long ima_hash_key(u8 *digest)
  {
 -	/* there is no point in taking a hash of part of a digest */
 -	return (digest[0] | digest[1] << 8) % IMA_MEASURE_HTABLE_SIZE;
 +	return hash_long(*digest, IMA_HASH_BITS);
  }
  
++<<<<<<< HEAD
 +#define __ima_hooks(hook)		\
 +	hook(NONE)			\
 +	hook(FILE_CHECK)		\
 +	hook(MMAP_CHECK)		\
 +	hook(BPRM_CHECK)		\
 +	hook(CREDS_CHECK)		\
 +	hook(POST_SETATTR)		\
 +	hook(MODULE_CHECK)		\
 +	hook(FIRMWARE_CHECK)		\
 +	hook(KEXEC_KERNEL_CHECK)	\
 +	hook(KEXEC_INITRAMFS_CHECK)	\
 +	hook(POLICY_CHECK)		\
 +	hook(KEXEC_CMDLINE)		\
 +	hook(MAX_CHECK)
 +#define __ima_hook_enumify(ENUM)	ENUM,
++=======
+ #define __ima_hooks(hook)				\
+ 	hook(NONE, none)				\
+ 	hook(FILE_CHECK, file)				\
+ 	hook(MMAP_CHECK, mmap)				\
+ 	hook(BPRM_CHECK, bprm)				\
+ 	hook(CREDS_CHECK, creds)			\
+ 	hook(POST_SETATTR, post_setattr)		\
+ 	hook(MODULE_CHECK, module)			\
+ 	hook(FIRMWARE_CHECK, firmware)			\
+ 	hook(KEXEC_KERNEL_CHECK, kexec_kernel)		\
+ 	hook(KEXEC_INITRAMFS_CHECK, kexec_initramfs)	\
+ 	hook(POLICY_CHECK, policy)			\
+ 	hook(KEXEC_CMDLINE, kexec_cmdline)		\
+ 	hook(KEY_CHECK, key)				\
+ 	hook(MAX_CHECK, none)
+ 
+ #define __ima_hook_enumify(ENUM, str)	ENUM,
+ #define __ima_stringify(arg) (#arg)
+ #define __ima_hook_measuring_stringify(ENUM, str) \
+ 		(__ima_stringify(measuring_ ##str)),
++>>>>>>> 34e980bb83a0 (IMA: Add audit log for failure conditions)
  
  enum ima_hooks {
  	__ima_hooks(__ima_hook_enumify)
diff --cc security/integrity/ima/ima_main.c
index 4a5832945bc3,8351b2fd48e0..000000000000
--- a/security/integrity/ima/ima_main.c
+++ b/security/integrity/ima/ima_main.c
@@@ -607,9 -737,10 +607,10 @@@ int ima_load_data(enum kernel_load_data
   */
  void process_buffer_measurement(const void *buf, int size,
  				const char *eventname, enum ima_hooks func,
 -				int pcr, const char *keyring)
 +				int pcr)
  {
  	int ret = 0;
+ 	const char *audit_cause = "ENOMEM";
  	struct ima_template_entry *entry = NULL;
  	struct integrity_iint_cache iint = {};
  	struct ima_event_data event_data = {.iint = &iint,
@@@ -661,19 -795,29 +662,32 @@@
  	iint.ima_hash->length = hash_digest_size[ima_hash_algo];
  
  	ret = ima_calc_buffer_hash(buf, size, iint.ima_hash);
- 	if (ret < 0)
+ 	if (ret < 0) {
+ 		audit_cause = "hashing_error";
  		goto out;
+ 	}
  
  	ret = ima_alloc_init_template(&event_data, &entry, template);
- 	if (ret < 0)
+ 	if (ret < 0) {
+ 		audit_cause = "alloc_entry";
  		goto out;
+ 	}
  
  	ret = ima_store_template(entry, violation, NULL, buf, pcr);
- 
- 	if (ret < 0)
+ 	if (ret < 0) {
+ 		audit_cause = "store_entry";
  		ima_free_template_entry(entry);
+ 	}
  
  out:
++<<<<<<< HEAD
++=======
+ 	if (ret < 0)
+ 		integrity_audit_message(AUDIT_INTEGRITY_PCR, NULL, eventname,
+ 					func_measure_str(func),
+ 					audit_cause, ret, 0, ret);
+ 
++>>>>>>> 34e980bb83a0 (IMA: Add audit log for failure conditions)
  	return;
  }
  
* Unmerged path security/integrity/ima/ima_queue_keys.c
* Unmerged path security/integrity/ima/ima.h
* Unmerged path security/integrity/ima/ima_main.c
diff --git a/security/integrity/ima/ima_policy.c b/security/integrity/ima/ima_policy.c
index 2c63d6afc3c9..77c1e3c92616 100644
--- a/security/integrity/ima/ima_policy.c
+++ b/security/integrity/ima/ima_policy.c
@@ -1231,7 +1231,7 @@ void ima_delete_rules(void)
 	}
 }
 
-#define __ima_hook_stringify(str)	(#str),
+#define __ima_hook_stringify(func, str)	(#func),
 
 const char *const func_tokens[] = {
 	__ima_hooks(__ima_hook_stringify)
* Unmerged path security/integrity/ima/ima_queue_keys.c
