ASoC: soc-pcm: check DAI activity under soc_pcm_apply_symmetry()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit f8fc9ec56f341c2a7aa263049340b11c9956962f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/f8fc9ec5.failed

soc_pcm_apply_symmetry() is used like below in all cases.

	if (snd_soc_dai_active(dai)) {
		err = soc_pcm_apply_symmetry(fe_substream, dai);
		...
	}

Because of this style, the code is deep nested.
This patch checks it under soc_pcm_apply_symmetry(), and makes code simple.

	static int soc_pcm_apply_symmetry(...)
	{
		...
=>		if (!snd_soc_dai_active(...))
			return 0;
		...
	}

=>	ret = soc_pcm_apply_symmetry();
	if (ret < 0)
		...

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/87k0qhuobl.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit f8fc9ec56f341c2a7aa263049340b11c9956962f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-pcm.c
diff --cc sound/soc/soc-pcm.c
index d084a9830504,9b5ab7a05f65..000000000000
--- a/sound/soc/soc-pcm.c
+++ b/sound/soc/soc-pcm.c
@@@ -357,53 -349,29 +357,74 @@@ static int soc_pcm_apply_symmetry(struc
  	struct snd_soc_pcm_runtime *rtd = asoc_substream_to_rtd(substream);
  	int ret;
  
++<<<<<<< HEAD
 +	if (soc_dai->rate && (soc_dai->driver->symmetric_rate ||
 +				rtd->dai_link->symmetric_rate)) {
 +		dev_dbg(soc_dai->dev, "ASoC: Symmetry forces %dHz rate\n",
 +				soc_dai->rate);
 +
 +		ret = snd_pcm_hw_constraint_single(substream->runtime,
 +						SNDRV_PCM_HW_PARAM_RATE,
 +						soc_dai->rate);
 +		if (ret < 0) {
 +			dev_err(soc_dai->dev,
 +				"ASoC: Unable to apply rate constraint: %d\n",
 +				ret);
 +			return ret;
 +		}
++=======
+ 	if (!snd_soc_dai_active(soc_dai))
+ 		return 0;
+ 
+ #define __soc_pcm_apply_symmetry(name, NAME)				\
+ 	if (soc_dai->name && (soc_dai->driver->symmetric_##name ||	\
+ 			      rtd->dai_link->symmetric_##name)) {	\
+ 		dev_dbg(soc_dai->dev, "ASoC: Symmetry forces %s to %d\n",\
+ 			#name, soc_dai->name);				\
+ 									\
+ 		ret = snd_pcm_hw_constraint_single(substream->runtime,	\
+ 						   SNDRV_PCM_HW_PARAM_##NAME,\
+ 						   soc_dai->name);	\
+ 		if (ret < 0) {						\
+ 			dev_err(soc_dai->dev,				\
+ 				"ASoC: Unable to apply %s constraint: %d\n",\
+ 				#name, ret);				\
+ 			return ret;					\
+ 		}							\
++>>>>>>> f8fc9ec56f34 (ASoC: soc-pcm: check DAI activity under soc_pcm_apply_symmetry())
  	}
  
 -	__soc_pcm_apply_symmetry(rate,		RATE);
 -	__soc_pcm_apply_symmetry(channels,	CHANNELS);
 -	__soc_pcm_apply_symmetry(sample_bits,	SAMPLE_BITS);
 +	if (soc_dai->channels && (soc_dai->driver->symmetric_channels ||
 +				rtd->dai_link->symmetric_channels)) {
 +		dev_dbg(soc_dai->dev, "ASoC: Symmetry forces %d channel(s)\n",
 +				soc_dai->channels);
 +
 +		ret = snd_pcm_hw_constraint_single(substream->runtime,
 +						SNDRV_PCM_HW_PARAM_CHANNELS,
 +						soc_dai->channels);
 +		if (ret < 0) {
 +			dev_err(soc_dai->dev,
 +				"ASoC: Unable to apply channel symmetry constraint: %d\n",
 +				ret);
 +			return ret;
 +		}
 +	}
 +
 +	if (soc_dai->sample_bits && (soc_dai->driver->symmetric_sample_bits ||
 +				rtd->dai_link->symmetric_sample_bits)) {
 +		dev_dbg(soc_dai->dev, "ASoC: Symmetry forces %d sample bits\n",
 +				soc_dai->sample_bits);
 +
 +		ret = snd_pcm_hw_constraint_single(substream->runtime,
 +						SNDRV_PCM_HW_PARAM_SAMPLE_BITS,
 +						soc_dai->sample_bits);
 +		if (ret < 0) {
 +			dev_err(soc_dai->dev,
 +				"ASoC: Unable to apply sample bits symmetry constraint: %d\n",
 +				ret);
 +			return ret;
 +		}
 +	}
  
  	return 0;
  }
* Unmerged path sound/soc/soc-pcm.c
