NFSD: Add tracepoints in nfsd4_decode/encode_compound()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 08281341be8ebc97ee47999812bcf411942baa1e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/08281341.failed

For troubleshooting purposes, record failures to decode NFSv4
operation arguments and encode operation results.

trace_nfsd_compound_decode_err() replaces the dprintk() call sites
that are embedded in READ_* macros that are about to be removed.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 08281341be8ebc97ee47999812bcf411942baa1e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/trace.h
diff --cc fs/nfsd/trace.h
index f2f8d5156540,92a0973dd671..000000000000
--- a/fs/nfsd/trace.h
+++ b/fs/nfsd/trace.h
@@@ -12,6 -12,100 +12,103 @@@
  #include "export.h"
  #include "nfsfh.h"
  
++<<<<<<< HEAD
++=======
+ #define NFSD_TRACE_PROC_ARG_FIELDS \
+ 		__field(unsigned int, netns_ino) \
+ 		__field(u32, xid) \
+ 		__array(unsigned char, server, sizeof(struct sockaddr_in6)) \
+ 		__array(unsigned char, client, sizeof(struct sockaddr_in6))
+ 
+ #define NFSD_TRACE_PROC_ARG_ASSIGNMENTS \
+ 		do { \
+ 			__entry->netns_ino = SVC_NET(rqstp)->ns.inum; \
+ 			__entry->xid = be32_to_cpu(rqstp->rq_xid); \
+ 			memcpy(__entry->server, &rqstp->rq_xprt->xpt_local, \
+ 			       rqstp->rq_xprt->xpt_locallen); \
+ 			memcpy(__entry->client, &rqstp->rq_xprt->xpt_remote, \
+ 			       rqstp->rq_xprt->xpt_remotelen); \
+ 		} while (0);
+ 
+ #define NFSD_TRACE_PROC_RES_FIELDS \
+ 		__field(unsigned int, netns_ino) \
+ 		__field(u32, xid) \
+ 		__field(unsigned long, status) \
+ 		__array(unsigned char, server, sizeof(struct sockaddr_in6)) \
+ 		__array(unsigned char, client, sizeof(struct sockaddr_in6))
+ 
+ #define NFSD_TRACE_PROC_RES_ASSIGNMENTS(error) \
+ 		do { \
+ 			__entry->netns_ino = SVC_NET(rqstp)->ns.inum; \
+ 			__entry->xid = be32_to_cpu(rqstp->rq_xid); \
+ 			__entry->status = be32_to_cpu(error); \
+ 			memcpy(__entry->server, &rqstp->rq_xprt->xpt_local, \
+ 			       rqstp->rq_xprt->xpt_locallen); \
+ 			memcpy(__entry->client, &rqstp->rq_xprt->xpt_remote, \
+ 			       rqstp->rq_xprt->xpt_remotelen); \
+ 		} while (0);
+ 
+ TRACE_EVENT(nfsd_garbage_args_err,
+ 	TP_PROTO(
+ 		const struct svc_rqst *rqstp
+ 	),
+ 	TP_ARGS(rqstp),
+ 	TP_STRUCT__entry(
+ 		NFSD_TRACE_PROC_ARG_FIELDS
+ 
+ 		__field(u32, vers)
+ 		__field(u32, proc)
+ 	),
+ 	TP_fast_assign(
+ 		NFSD_TRACE_PROC_ARG_ASSIGNMENTS
+ 
+ 		__entry->vers = rqstp->rq_vers;
+ 		__entry->proc = rqstp->rq_proc;
+ 	),
+ 	TP_printk("xid=0x%08x vers=%u proc=%u",
+ 		__entry->xid, __entry->vers, __entry->proc
+ 	)
+ );
+ 
+ TRACE_EVENT(nfsd_cant_encode_err,
+ 	TP_PROTO(
+ 		const struct svc_rqst *rqstp
+ 	),
+ 	TP_ARGS(rqstp),
+ 	TP_STRUCT__entry(
+ 		NFSD_TRACE_PROC_ARG_FIELDS
+ 
+ 		__field(u32, vers)
+ 		__field(u32, proc)
+ 	),
+ 	TP_fast_assign(
+ 		NFSD_TRACE_PROC_ARG_ASSIGNMENTS
+ 
+ 		__entry->vers = rqstp->rq_vers;
+ 		__entry->proc = rqstp->rq_proc;
+ 	),
+ 	TP_printk("xid=0x%08x vers=%u proc=%u",
+ 		__entry->xid, __entry->vers, __entry->proc
+ 	)
+ );
+ 
+ #define show_nfsd_may_flags(x)						\
+ 	__print_flags(x, "|",						\
+ 		{ NFSD_MAY_EXEC,		"EXEC" },		\
+ 		{ NFSD_MAY_WRITE,		"WRITE" },		\
+ 		{ NFSD_MAY_READ,		"READ" },		\
+ 		{ NFSD_MAY_SATTR,		"SATTR" },		\
+ 		{ NFSD_MAY_TRUNC,		"TRUNC" },		\
+ 		{ NFSD_MAY_LOCK,		"LOCK" },		\
+ 		{ NFSD_MAY_OWNER_OVERRIDE,	"OWNER_OVERRIDE" },	\
+ 		{ NFSD_MAY_LOCAL_ACCESS,	"LOCAL_ACCESS" },	\
+ 		{ NFSD_MAY_BYPASS_GSS_ON_ROOT,	"BYPASS_GSS_ON_ROOT" },	\
+ 		{ NFSD_MAY_NOT_BREAK_LEASE,	"NOT_BREAK_LEASE" },	\
+ 		{ NFSD_MAY_BYPASS_GSS,		"BYPASS_GSS" },		\
+ 		{ NFSD_MAY_READ_IF_EXEC,	"READ_IF_EXEC" },	\
+ 		{ NFSD_MAY_64BIT_COOKIE,	"64BIT_COOKIE" })
+ 
++>>>>>>> 08281341be8e (NFSD: Add tracepoints in nfsd4_decode/encode_compound())
  TRACE_EVENT(nfsd_compound,
  	TP_PROTO(const struct svc_rqst *rqst,
  		 u32 args_opcnt),
diff --git a/fs/nfsd/nfs4xdr.c b/fs/nfsd/nfs4xdr.c
index ec94bf483bc9..59254e702911 100644
--- a/fs/nfsd/nfs4xdr.c
+++ b/fs/nfsd/nfs4xdr.c
@@ -52,6 +52,8 @@
 #include "netns.h"
 #include "pnfs.h"
 
+#include "trace.h"
+
 #ifdef CONFIG_NFSD_V4_SECURITY_LABEL
 #include <linux/security.h>
 #endif
@@ -2172,9 +2174,14 @@ nfsd4_decode_compound(struct nfsd4_compoundargs *argp)
 		READ_BUF(4);
 		op->opnum = be32_to_cpup(p++);
 
-		if (nfsd4_opnum_in_range(argp, op))
+		if (nfsd4_opnum_in_range(argp, op)) {
 			op->status = nfsd4_dec_ops[op->opnum](argp, &op->u);
-		else {
+			if (op->status != nfs_ok)
+				trace_nfsd_compound_decode_err(argp->rqstp,
+							       argp->opcnt, i,
+							       op->opnum,
+							       op->status);
+		} else {
 			op->opnum = OP_ILLEGAL;
 			op->status = nfserr_op_illegal;
 		}
@@ -4913,6 +4920,8 @@ nfsd4_encode_operation(struct nfsd4_compoundres *resp, struct nfsd4_op *op)
 	       !nfsd4_enc_ops[op->opnum]);
 	encoder = nfsd4_enc_ops[op->opnum];
 	op->status = encoder(resp, op->status, &op->u);
+	if (op->status)
+		trace_nfsd_compound_encode_err(rqstp, op->opnum, op->status);
 	if (opdesc && opdesc->op_release)
 		opdesc->op_release(&op->u);
 	xdr_commit_encode(xdr);
* Unmerged path fs/nfsd/trace.h
