workqueue: more destroy_workqueue() fixes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Tejun Heo <tj@kernel.org>
commit c29eb85386880750130a01aabf288408a6614d65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/c29eb853.failed

destroy_workqueue() warnings still, at a lower frequency, trigger
spuriously.  The problem seems to be in-flight operations which
haven't reached put_pwq() yet.

* Make sanity check grab all the related locks so that it's
  synchronized against operations which puts pwq at the end.

* Always print out the offending pwq.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Cc: "Williams, Gerald S" <gerald.s.williams@intel.com>
(cherry picked from commit c29eb85386880750130a01aabf288408a6614d65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/workqueue.c
diff --cc kernel/workqueue.c
index 6f2d4879961b,4a3c30177b94..000000000000
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@@ -4303,24 -4315,21 +4304,42 @@@ err_destroy
  }
  EXPORT_SYMBOL_GPL(alloc_workqueue);
  
++<<<<<<< HEAD
 +/*
 + * RHEL8 kABI
 + */
 +struct workqueue_struct *__alloc_workqueue_key(const char *fmt,
 +					       unsigned int flags,
 +					       int max_active,
 +					       struct lock_class_key *key,
 +					       const char *lock_name, ...)
 +{
 +	va_list args;
 +	struct workqueue_struct *wq;
 +
 +	va_start(args, lock_name);
 +	wq = alloc_workqueue(fmt, flags, max_active, args);
 +	va_end(args);
 +	return wq;
 +}
 +EXPORT_SYMBOL_GPL(__alloc_workqueue_key);
++=======
+ static bool pwq_busy(struct pool_workqueue *pwq)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < WORK_NR_COLORS; i++)
+ 		if (pwq->nr_in_flight[i])
+ 			return true;
+ 
+ 	if ((pwq != pwq->wq->dfl_pwq) && (pwq->refcnt > 1))
+ 		return true;
+ 	if (pwq->nr_active || !list_empty(&pwq->delayed_works))
+ 		return true;
+ 
+ 	return false;
+ }
++>>>>>>> c29eb8538688 (workqueue: more destroy_workqueue() fixes)
  
  /**
   * destroy_workqueue - safely terminate a workqueue
* Unmerged path kernel/workqueue.c
