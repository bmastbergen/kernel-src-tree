KVM: x86: Add capability to grant VM access to privileged SGX attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit fe7e948837f312d87853b3fce743795d1ae3715a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/fe7e9488.failed

Add a capability, KVM_CAP_SGX_ATTRIBUTE, that can be used by userspace
to grant a VM access to a priveleged attribute, with args[0] holding a
file handle to a valid SGX attribute file.

The SGX subsystem restricts access to a subset of enclave attributes to
provide additional security for an uncompromised kernel, e.g. to prevent
malware from using the PROVISIONKEY to ensure its nodes are running
inside a geniune SGX enclave and/or to obtain a stable fingerprint.

To prevent userspace from circumventing such restrictions by running an
enclave in a VM, KVM restricts guest access to privileged attributes by
default.

	Cc: Andy Lutomirski <luto@amacapital.net>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Kai Huang <kai.huang@intel.com>
Message-Id: <0b099d65e933e068e3ea934b0523bab070cb8cea.1618196135.git.kai.huang@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit fe7e948837f312d87853b3fce743795d1ae3715a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/virt/kvm/api.rst
#	arch/x86/kvm/cpuid.c
#	arch/x86/kvm/x86.c
diff --cc Documentation/virt/kvm/api.rst
index c18c47a3cc80,414b7fe1cf7b..000000000000
--- a/Documentation/virt/kvm/api.rst
+++ b/Documentation/virt/kvm/api.rst
@@@ -6233,6 -6197,39 +6233,42 @@@ the bus lock vm exit can be preempted b
  notifications to userspace can be KVM_EXIT_BUS_LOCK or other reasons.
  KVM_RUN_BUS_LOCK flag is used to distinguish between them.
  
++<<<<<<< HEAD
++=======
+ 7.23 KVM_CAP_PPC_DAWR1
+ ----------------------
+ 
+ :Architectures: ppc
+ :Parameters: none
+ :Returns: 0 on success, -EINVAL when CPU doesn't support 2nd DAWR
+ 
+ This capability can be used to check / enable 2nd DAWR feature provided
+ by POWER10 processor.
+ 
+ 7.25 KVM_CAP_SGX_ATTRIBUTE
+ ----------------------
+ 
+ :Architectures: x86
+ :Target: VM
+ :Parameters: args[0] is a file handle of a SGX attribute file in securityfs
+ :Returns: 0 on success, -EINVAL if the file handle is invalid or if a requested
+           attribute is not supported by KVM.
+ 
+ KVM_CAP_SGX_ATTRIBUTE enables a userspace VMM to grant a VM access to one or
+ more priveleged enclave attributes.  args[0] must hold a file handle to a valid
+ SGX attribute file corresponding to an attribute that is supported/restricted
+ by KVM (currently only PROVISIONKEY).
+ 
+ The SGX subsystem restricts access to a subset of enclave attributes to provide
+ additional security for an uncompromised kernel, e.g. use of the PROVISIONKEY
+ is restricted to deter malware from using the PROVISIONKEY to obtain a stable
+ system fingerprint.  To prevent userspace from circumventing such restrictions
+ by running an enclave in a VM, KVM prevents access to privileged attributes by
+ default.
+ 
+ See Documentation/x86/sgx/2.Kernel-internals.rst for more details.
+ 
++>>>>>>> fe7e948837f3 (KVM: x86: Add capability to grant VM access to privileged SGX attribute)
  8. Other capabilities.
  ======================
  
diff --cc arch/x86/kvm/cpuid.c
index 6605e91db9d8,2ae061586677..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -800,6 -821,38 +800,41 @@@ static inline int __do_cpuid_func(struc
  			entry->edx = 0;
  		}
  		break;
++<<<<<<< HEAD
++=======
+ 	case 0x12:
+ 		/* Intel SGX */
+ 		if (!kvm_cpu_cap_has(X86_FEATURE_SGX)) {
+ 			entry->eax = entry->ebx = entry->ecx = entry->edx = 0;
+ 			break;
+ 		}
+ 
+ 		/*
+ 		 * Index 0: Sub-features, MISCSELECT (a.k.a extended features)
+ 		 * and max enclave sizes.   The SGX sub-features and MISCSELECT
+ 		 * are restricted by kernel and KVM capabilities (like most
+ 		 * feature flags), while enclave size is unrestricted.
+ 		 */
+ 		cpuid_entry_override(entry, CPUID_12_EAX);
+ 		entry->ebx &= SGX_MISC_EXINFO;
+ 
+ 		entry = do_host_cpuid(array, function, 1);
+ 		if (!entry)
+ 			goto out;
+ 
+ 		/*
+ 		 * Index 1: SECS.ATTRIBUTES.  ATTRIBUTES are restricted a la
+ 		 * feature flags.  Advertise all supported flags, including
+ 		 * privileged attributes that require explicit opt-in from
+ 		 * userspace.  ATTRIBUTES.XFRM is not adjusted as userspace is
+ 		 * expected to derive it from supported XCR0.
+ 		 */
+ 		entry->eax &= SGX_ATTR_DEBUG | SGX_ATTR_MODE64BIT |
+ 			      SGX_ATTR_PROVISIONKEY | SGX_ATTR_EINITTOKENKEY |
+ 			      SGX_ATTR_KSS;
+ 		entry->ebx &= 0;
+ 		break;
++>>>>>>> fe7e948837f3 (KVM: x86: Add capability to grant VM access to privileged SGX attribute)
  	/* Intel PT */
  	case 0x14:
  		if (!kvm_cpu_cap_has(X86_FEATURE_INTEL_PT)) {
diff --cc arch/x86/kvm/x86.c
index 8068cde2526d,d4cdab15238b..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -73,8 -74,9 +73,13 @@@
  #include <asm/hypervisor.h>
  #include <asm/tlbflush.h>
  #include <asm/intel_pt.h>
++<<<<<<< HEAD
++=======
+ #include <asm/emulate_prefix.h>
+ #include <asm/sgx.h>
++>>>>>>> fe7e948837f3 (KVM: x86: Add capability to grant VM access to privileged SGX attribute)
  #include <clocksource/hyperv_timer.h>
 +#include <asm/emulate_prefix.h>
  
  #define CREATE_TRACE_POINTS
  #include "trace.h"
* Unmerged path Documentation/virt/kvm/api.rst
* Unmerged path arch/x86/kvm/cpuid.c
* Unmerged path arch/x86/kvm/x86.c
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index d740e3d18a32..7a95f4c44d76 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -1077,6 +1077,7 @@ struct kvm_ppc_resize_hpt {
 #define KVM_CAP_DIRTY_LOG_RING 192
 #define KVM_CAP_X86_BUS_LOCK_EXIT 193
 #define KVM_CAP_SET_GUEST_DEBUG2 195
+#define KVM_CAP_SGX_ATTRIBUTE 196
 
 #ifdef KVM_CAP_IRQ_ROUTING
 
