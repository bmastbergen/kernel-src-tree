mptcp: init mptcp request socket earlier

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit d8b59efa64060d17b7b61f97d891de2d9f2bd9f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/d8b59efa.failed

The mptcp subflow route_req() callback performs the subflow
req initialization after the route_req() check. If the latter
fails, mptcp-specific bits of the current request sockets
are left uninitialized.

The above causes bad things at req socket disposal time, when
the mptcp resources are cleared.

This change addresses the issue by splitting subflow_init_req()
into the actual initialization and the mptcp-specific checks.
The initialization is moved before any possibly failing check.

	Reported-by: Christoph Paasch <cpaasch@apple.com>
Fixes: 7ea851d19b23 ("tcp: merge 'init_req' and 'route_req' functions")
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d8b59efa64060d17b7b61f97d891de2d9f2bd9f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/subflow.c
diff --cc net/mptcp/subflow.c
index 5d5d65fe6fee,8b2338dfdc80..000000000000
--- a/net/mptcp/subflow.c
+++ b/net/mptcp/subflow.c
@@@ -117,34 -125,6 +133,37 @@@ static int subflow_check_req(struct req
  		return -EINVAL;
  #endif
  
++<<<<<<< HEAD
 +	return 0;
 +}
 +
 +static bool subflow_use_different_sport(struct mptcp_sock *msk, const struct sock *sk)
 +{
 +	return inet_sk(sk)->inet_sport != inet_sk((struct sock *)msk)->inet_sport;
 +}
 +
 +/* Init mptcp request socket.
 + *
 + * Returns an error code if a JOIN has failed and a TCP reset
 + * should be sent.
 + */
 +static int subflow_init_req(struct request_sock *req,
 +			    const struct sock *sk_listener,
 +			    struct sk_buff *skb)
 +{
 +	struct mptcp_subflow_context *listener = mptcp_subflow_ctx(sk_listener);
 +	struct mptcp_subflow_request_sock *subflow_req = mptcp_subflow_rsk(req);
 +	struct mptcp_options_received mp_opt;
 +	int ret;
 +
 +	pr_debug("subflow_req=%p, listener=%p", subflow_req, listener);
 +
 +	ret = __subflow_init_req(req, sk_listener);
 +	if (ret)
 +		return 0;
 +
++=======
++>>>>>>> d8b59efa6406 (mptcp: init mptcp request socket earlier)
  	mptcp_get_options(skb, &mp_opt);
  
  	if (mp_opt.mp_capable) {
* Unmerged path net/mptcp/subflow.c
