dma-buf: Use struct dma_buf_map in dma_buf_vunmap() interfaces

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Thomas Zimmermann <tzimmermann@suse.de>
commit 20e76f1a70596590dec32a5d1f598fba04859526
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/20e76f1a.failed

This patch updates dma_buf_vunmap() and dma-buf's vunmap callback to
use struct dma_buf_map. The interfaces used to receive a buffer address.
This address is now given in an instance of the structure.

Users of the functions are updated accordingly. This is only an interface
change. It is currently expected that dma-buf memory can be accessed with
system memory load/store operations.

v2:
	* include dma-buf-heaps and i915 selftests (kernel test robot)
	* initialize cma_obj before using it in drm_gem_cma_free_object()
	  (kernel test robot)

	Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
	Acked-by: Sumit Semwal <sumit.semwal@linaro.org>
	Acked-by: Christian KÃ¶nig <christian.koenig@amd.com>
	Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
	Acked-by: Tomasz Figa <tfiga@chromium.org>
	Acked-by: Sam Ravnborg <sam@ravnborg.org>
Link: https://patchwork.freedesktop.org/patch/msgid/20200925115601.23955-4-tzimmermann@suse.de
(cherry picked from commit 20e76f1a70596590dec32a5d1f598fba04859526)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/drm_gem_cma_helper.c
#	include/drm/drm_prime.h
#	include/linux/dma-buf-map.h
#	include/linux/dma-buf.h
diff --cc drivers/gpu/drm/drm_gem_cma_helper.c
index 822edeadbab3,5e9d29961307..000000000000
--- a/drivers/gpu/drm/drm_gem_cma_helper.c
+++ b/drivers/gpu/drm/drm_gem_cma_helper.c
@@@ -644,7 -644,7 +643,11 @@@ drm_gem_cma_prime_import_sg_table_vmap(
  
  	obj = drm_gem_cma_prime_import_sg_table(dev, attach, sgt);
  	if (IS_ERR(obj)) {
++<<<<<<< HEAD
 +		dma_buf_vunmap(attach->dmabuf, vaddr);
++=======
+ 		dma_buf_vunmap(attach->dmabuf, &map);
++>>>>>>> 20e76f1a7059 (dma-buf: Use struct dma_buf_map in dma_buf_vunmap() interfaces)
  		return obj;
  	}
  
diff --cc include/drm/drm_prime.h
index bf141e74a1c2,093f760cc131..000000000000
--- a/include/drm/drm_prime.h
+++ b/include/drm/drm_prime.h
@@@ -82,8 -83,8 +82,13 @@@ struct sg_table *drm_gem_map_dma_buf(st
  void drm_gem_unmap_dma_buf(struct dma_buf_attachment *attach,
  			   struct sg_table *sgt,
  			   enum dma_data_direction dir);
++<<<<<<< HEAD
 +void *drm_gem_dmabuf_vmap(struct dma_buf *dma_buf);
 +void drm_gem_dmabuf_vunmap(struct dma_buf *dma_buf, void *vaddr);
++=======
+ int drm_gem_dmabuf_vmap(struct dma_buf *dma_buf, struct dma_buf_map *map);
+ void drm_gem_dmabuf_vunmap(struct dma_buf *dma_buf, struct dma_buf_map *map);
++>>>>>>> 20e76f1a7059 (dma-buf: Use struct dma_buf_map in dma_buf_vunmap() interfaces)
  
  int drm_gem_prime_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma);
  int drm_gem_dmabuf_mmap(struct dma_buf *dma_buf, struct vm_area_struct *vma);
diff --cc include/linux/dma-buf-map.h
index 00143c88feb6,c173a4abf4ba..000000000000
--- a/include/linux/dma-buf-map.h
+++ b/include/linux/dma-buf-map.h
@@@ -23,10 -23,49 +23,54 @@@ struct dma_buf_map 
  	bool is_iomem;
  };
  
++<<<<<<< HEAD
 +/* API transition helper */
 +static inline bool dma_buf_map_is_vaddr(const struct dma_buf_map *map, const void *vaddr)
++=======
+ /**
+  * DMA_BUF_MAP_INIT_VADDR - Initializes struct dma_buf_map to an address in system memory
+  * @vaddr:	A system-memory address
+  */
+ #define DMA_BUF_MAP_INIT_VADDR(vaddr_) \
+ 	{ \
+ 		.vaddr = (vaddr_), \
+ 		.is_iomem = false, \
+ 	}
+ 
+ /**
+  * dma_buf_map_set_vaddr - Sets a dma-buf mapping structure to an address in system memory
+  * @map:	The dma-buf mapping structure
+  * @vaddr:	A system-memory address
+  *
+  * Sets the address and clears the I/O-memory flag.
+  */
+ static inline void dma_buf_map_set_vaddr(struct dma_buf_map *map, void *vaddr)
+ {
+ 	map->vaddr = vaddr;
+ 	map->is_iomem = false;
+ }
+ 
+ /**
+  * dma_buf_map_is_equal - Compares two dma-buf mapping structures for equality
+  * @lhs:	The dma-buf mapping structure
+  * @rhs:	A dma-buf mapping structure to compare with
+  *
+  * Two dma-buf mapping structures are equal if they both refer to the same type of memory
+  * and to the same address within that memory.
+  *
+  * Returns:
+  * True is both structures are equal, or false otherwise.
+  */
+ static inline bool dma_buf_map_is_equal(const struct dma_buf_map *lhs,
+ 					const struct dma_buf_map *rhs)
++>>>>>>> 20e76f1a7059 (dma-buf: Use struct dma_buf_map in dma_buf_vunmap() interfaces)
  {
- 	return !map->is_iomem && (map->vaddr == vaddr);
+ 	if (lhs->is_iomem != rhs->is_iomem)
+ 		return false;
+ 	else if (lhs->is_iomem)
+ 		return lhs->vaddr_iomem == rhs->vaddr_iomem;
+ 	else
+ 		return lhs->vaddr == rhs->vaddr;
  }
  
  /**
diff --cc include/linux/dma-buf.h
index d4a68491dac8,cf77cc15f4ba..000000000000
--- a/include/linux/dma-buf.h
+++ b/include/linux/dma-buf.h
@@@ -266,8 -266,8 +266,13 @@@ struct dma_buf_ops 
  	 */
  	int (*mmap)(struct dma_buf *, struct vm_area_struct *vma);
  
++<<<<<<< HEAD
 +	void *(*vmap)(struct dma_buf *);
 +	void (*vunmap)(struct dma_buf *, void *vaddr);
++=======
+ 	int (*vmap)(struct dma_buf *dmabuf, struct dma_buf_map *map);
+ 	void (*vunmap)(struct dma_buf *dmabuf, struct dma_buf_map *map);
++>>>>>>> 20e76f1a7059 (dma-buf: Use struct dma_buf_map in dma_buf_vunmap() interfaces)
  };
  
  /**
@@@ -502,6 -503,6 +507,11 @@@ int dma_buf_end_cpu_access(struct dma_b
  
  int dma_buf_mmap(struct dma_buf *, struct vm_area_struct *,
  		 unsigned long);
++<<<<<<< HEAD
 +void *dma_buf_vmap(struct dma_buf *);
 +void dma_buf_vunmap(struct dma_buf *, void *vaddr);
++=======
+ int dma_buf_vmap(struct dma_buf *dmabuf, struct dma_buf_map *map);
+ void dma_buf_vunmap(struct dma_buf *dmabuf, struct dma_buf_map *map);
++>>>>>>> 20e76f1a7059 (dma-buf: Use struct dma_buf_map in dma_buf_vunmap() interfaces)
  #endif /* __DMA_BUF_H__ */
diff --git a/drivers/dma-buf/dma-buf.c b/drivers/dma-buf/dma-buf.c
index 1c90d09ec463..c72c9ed6d928 100644
--- a/drivers/dma-buf/dma-buf.c
+++ b/drivers/dma-buf/dma-buf.c
@@ -1220,21 +1220,21 @@ EXPORT_SYMBOL_GPL(dma_buf_vmap);
 /**
  * dma_buf_vunmap - Unmap a vmap obtained by dma_buf_vmap.
  * @dmabuf:	[in]	buffer to vunmap
- * @vaddr:	[in]	vmap to vunmap
+ * @map:	[in]	vmap pointer to vunmap
  */
-void dma_buf_vunmap(struct dma_buf *dmabuf, void *vaddr)
+void dma_buf_vunmap(struct dma_buf *dmabuf, struct dma_buf_map *map)
 {
 	if (WARN_ON(!dmabuf))
 		return;
 
 	BUG_ON(dma_buf_map_is_null(&dmabuf->vmap_ptr));
 	BUG_ON(dmabuf->vmapping_counter == 0);
-	BUG_ON(!dma_buf_map_is_vaddr(&dmabuf->vmap_ptr, vaddr));
+	BUG_ON(!dma_buf_map_is_equal(&dmabuf->vmap_ptr, map));
 
 	mutex_lock(&dmabuf->lock);
 	if (--dmabuf->vmapping_counter == 0) {
 		if (dmabuf->ops->vunmap)
-			dmabuf->ops->vunmap(dmabuf, vaddr);
+			dmabuf->ops->vunmap(dmabuf, map);
 		dma_buf_map_clear(&dmabuf->vmap_ptr);
 	}
 	mutex_unlock(&dmabuf->lock);
diff --git a/drivers/dma-buf/heaps/heap-helpers.c b/drivers/dma-buf/heaps/heap-helpers.c
index 9f964ca3f59c..30bad4bc2b46 100644
--- a/drivers/dma-buf/heaps/heap-helpers.c
+++ b/drivers/dma-buf/heaps/heap-helpers.c
@@ -248,7 +248,7 @@ static void *dma_heap_dma_buf_vmap(struct dma_buf *dmabuf)
 	return vaddr;
 }
 
-static void dma_heap_dma_buf_vunmap(struct dma_buf *dmabuf, void *vaddr)
+static void dma_heap_dma_buf_vunmap(struct dma_buf *dmabuf, struct dma_buf_map *map)
 {
 	struct heap_helper_buffer *buffer = dmabuf->priv;
 
* Unmerged path drivers/gpu/drm/drm_gem_cma_helper.c
diff --git a/drivers/gpu/drm/drm_gem_shmem_helper.c b/drivers/gpu/drm/drm_gem_shmem_helper.c
index 2d474c65f64a..f83d98cbe5bd 100644
--- a/drivers/gpu/drm/drm_gem_shmem_helper.c
+++ b/drivers/gpu/drm/drm_gem_shmem_helper.c
@@ -333,6 +333,7 @@ EXPORT_SYMBOL(drm_gem_shmem_vmap);
 static void drm_gem_shmem_vunmap_locked(struct drm_gem_shmem_object *shmem)
 {
 	struct drm_gem_object *obj = &shmem->base;
+	struct dma_buf_map map = DMA_BUF_MAP_INIT_VADDR(shmem->vaddr);
 
 	if (WARN_ON_ONCE(!shmem->vmap_use_count))
 		return;
@@ -341,7 +342,7 @@ static void drm_gem_shmem_vunmap_locked(struct drm_gem_shmem_object *shmem)
 		return;
 
 	if (obj->import_attach)
-		dma_buf_vunmap(obj->import_attach->dmabuf, shmem->vaddr);
+		dma_buf_vunmap(obj->import_attach->dmabuf, &map);
 	else
 		vunmap(shmem->vaddr);
 
diff --git a/drivers/gpu/drm/drm_prime.c b/drivers/gpu/drm/drm_prime.c
index f2080b9e21a0..01cf459a8274 100644
--- a/drivers/gpu/drm/drm_prime.c
+++ b/drivers/gpu/drm/drm_prime.c
@@ -684,16 +684,16 @@ EXPORT_SYMBOL(drm_gem_dmabuf_vmap);
 /**
  * drm_gem_dmabuf_vunmap - dma_buf vunmap implementation for GEM
  * @dma_buf: buffer to be unmapped
- * @vaddr: the virtual address of the buffer
+ * @map: the virtual address of the buffer
  *
  * Releases a kernel virtual mapping. This can be used as the
  * &dma_buf_ops.vunmap callback. Calls into &drm_gem_object_funcs.vunmap for device specific handling.
  */
-void drm_gem_dmabuf_vunmap(struct dma_buf *dma_buf, void *vaddr)
+void drm_gem_dmabuf_vunmap(struct dma_buf *dma_buf, struct dma_buf_map *map)
 {
 	struct drm_gem_object *obj = dma_buf->priv;
 
-	drm_gem_vunmap(obj, vaddr);
+	drm_gem_vunmap(obj, map->vaddr);
 }
 EXPORT_SYMBOL(drm_gem_dmabuf_vunmap);
 
diff --git a/drivers/gpu/drm/etnaviv/etnaviv_gem_prime.c b/drivers/gpu/drm/etnaviv/etnaviv_gem_prime.c
index 2a14fe45a687..80ae3560f430 100644
--- a/drivers/gpu/drm/etnaviv/etnaviv_gem_prime.c
+++ b/drivers/gpu/drm/etnaviv/etnaviv_gem_prime.c
@@ -68,9 +68,10 @@ void etnaviv_gem_prime_unpin(struct drm_gem_object *obj)
 
 static void etnaviv_gem_prime_release(struct etnaviv_gem_object *etnaviv_obj)
 {
+	struct dma_buf_map map = DMA_BUF_MAP_INIT_VADDR(etnaviv_obj->vaddr);
+
 	if (etnaviv_obj->vaddr)
-		dma_buf_vunmap(etnaviv_obj->base.import_attach->dmabuf,
-			       etnaviv_obj->vaddr);
+		dma_buf_vunmap(etnaviv_obj->base.import_attach->dmabuf, &map);
 
 	/* Don't drop the pages for imported dmabuf, as they are not
 	 * ours, just free the array we allocated:
diff --git a/drivers/gpu/drm/i915/gem/i915_gem_dmabuf.c b/drivers/gpu/drm/i915/gem/i915_gem_dmabuf.c
index 2679380159fc..9b4b6022d994 100644
--- a/drivers/gpu/drm/i915/gem/i915_gem_dmabuf.c
+++ b/drivers/gpu/drm/i915/gem/i915_gem_dmabuf.c
@@ -89,7 +89,7 @@ static void *i915_gem_dmabuf_vmap(struct dma_buf *dma_buf)
 	return i915_gem_object_pin_map(obj, I915_MAP_WB);
 }
 
-static void i915_gem_dmabuf_vunmap(struct dma_buf *dma_buf, void *vaddr)
+static void i915_gem_dmabuf_vunmap(struct dma_buf *dma_buf, struct dma_buf_map *map)
 {
 	struct drm_i915_gem_object *obj = dma_buf_to_obj(dma_buf);
 
diff --git a/drivers/gpu/drm/i915/gem/selftests/i915_gem_dmabuf.c b/drivers/gpu/drm/i915/gem/selftests/i915_gem_dmabuf.c
index 2a52b92586b9..c5e862918b1b 100644
--- a/drivers/gpu/drm/i915/gem/selftests/i915_gem_dmabuf.c
+++ b/drivers/gpu/drm/i915/gem/selftests/i915_gem_dmabuf.c
@@ -150,7 +150,7 @@ static int igt_dmabuf_import(void *arg)
 
 	err = 0;
 out_dma_map:
-	dma_buf_vunmap(dmabuf, dma_map);
+	dma_buf_vunmap(dmabuf, &map);
 out_obj:
 	i915_gem_object_put(obj);
 out_dmabuf:
@@ -178,7 +178,7 @@ static int igt_dmabuf_import_ownership(void *arg)
 	}
 
 	memset(ptr, 0xc5, PAGE_SIZE);
-	dma_buf_vunmap(dmabuf, ptr);
+	dma_buf_vunmap(dmabuf, &map);
 
 	obj = to_intel_bo(i915_gem_prime_import(&i915->drm, dmabuf));
 	if (IS_ERR(obj)) {
@@ -244,7 +244,7 @@ static int igt_dmabuf_export_vmap(void *arg)
 	memset(ptr, 0xc5, dmabuf->size);
 
 	err = 0;
-	dma_buf_vunmap(dmabuf, ptr);
+	dma_buf_vunmap(dmabuf, &map);
 out:
 	dma_buf_put(dmabuf);
 	return err;
diff --git a/drivers/gpu/drm/i915/gem/selftests/mock_dmabuf.c b/drivers/gpu/drm/i915/gem/selftests/mock_dmabuf.c
index debaf7b18ab5..a2926c5c3a19 100644
--- a/drivers/gpu/drm/i915/gem/selftests/mock_dmabuf.c
+++ b/drivers/gpu/drm/i915/gem/selftests/mock_dmabuf.c
@@ -69,11 +69,11 @@ static void *mock_dmabuf_vmap(struct dma_buf *dma_buf)
 	return vm_map_ram(mock->pages, mock->npages, 0);
 }
 
-static void mock_dmabuf_vunmap(struct dma_buf *dma_buf, void *vaddr)
+static void mock_dmabuf_vunmap(struct dma_buf *dma_buf, struct dma_buf_map *map)
 {
 	struct mock_dmabuf *mock = to_mock(dma_buf);
 
-	vm_unmap_ram(vaddr, mock->npages);
+	vm_unmap_ram(map->vaddr, mock->npages);
 }
 
 static int mock_dmabuf_mmap(struct dma_buf *dma_buf, struct vm_area_struct *vma)
diff --git a/drivers/gpu/drm/tegra/gem.c b/drivers/gpu/drm/tegra/gem.c
index 42050ebe18ea..6e9c098f0d2d 100644
--- a/drivers/gpu/drm/tegra/gem.c
+++ b/drivers/gpu/drm/tegra/gem.c
@@ -56,11 +56,12 @@ static void *tegra_bo_mmap(struct host1x_bo *bo)
 static void tegra_bo_munmap(struct host1x_bo *bo, void *addr)
 {
 	struct tegra_bo *obj = host1x_to_tegra_bo(bo);
+	struct dma_buf_map map = DMA_BUF_MAP_INIT_VADDR(addr);
 
 	if (obj->vaddr)
 		return;
 	else if (obj->gem.import_attach)
-		dma_buf_vunmap(obj->gem.import_attach->dmabuf, addr);
+		dma_buf_vunmap(obj->gem.import_attach->dmabuf, &map);
 	else
 		vunmap(addr);
 }
@@ -574,7 +575,7 @@ static void *tegra_gem_prime_vmap(struct dma_buf *buf)
 	return bo->vaddr;
 }
 
-static void tegra_gem_prime_vunmap(struct dma_buf *buf, void *vaddr)
+static void tegra_gem_prime_vunmap(struct dma_buf *buf, struct dma_buf_map *map)
 {
 }
 
diff --git a/drivers/media/common/videobuf2/videobuf2-dma-contig.c b/drivers/media/common/videobuf2/videobuf2-dma-contig.c
index 265af05ccc04..332861c47300 100644
--- a/drivers/media/common/videobuf2/videobuf2-dma-contig.c
+++ b/drivers/media/common/videobuf2/videobuf2-dma-contig.c
@@ -631,6 +631,7 @@ static void vb2_dc_unmap_dmabuf(void *mem_priv)
 {
 	struct vb2_dc_buf *buf = mem_priv;
 	struct sg_table *sgt = buf->dma_sgt;
+	struct dma_buf_map map = DMA_BUF_MAP_INIT_VADDR(buf->vaddr);
 
 	if (WARN_ON(!buf->db_attach)) {
 		pr_err("trying to unpin a not attached buffer\n");
@@ -643,7 +644,7 @@ static void vb2_dc_unmap_dmabuf(void *mem_priv)
 	}
 
 	if (buf->vaddr) {
-		dma_buf_vunmap(buf->db_attach->dmabuf, buf->vaddr);
+		dma_buf_vunmap(buf->db_attach->dmabuf, &map);
 		buf->vaddr = NULL;
 	}
 	dma_buf_unmap_attachment(buf->db_attach, sgt, buf->dma_dir);
diff --git a/drivers/media/common/videobuf2/videobuf2-dma-sg.c b/drivers/media/common/videobuf2/videobuf2-dma-sg.c
index 8526e9db81e9..faf3950f4aca 100644
--- a/drivers/media/common/videobuf2/videobuf2-dma-sg.c
+++ b/drivers/media/common/videobuf2/videobuf2-dma-sg.c
@@ -564,6 +564,7 @@ static void vb2_dma_sg_unmap_dmabuf(void *mem_priv)
 {
 	struct vb2_dma_sg_buf *buf = mem_priv;
 	struct sg_table *sgt = buf->dma_sgt;
+	struct dma_buf_map map = DMA_BUF_MAP_INIT_VADDR(buf->vaddr);
 
 	if (WARN_ON(!buf->db_attach)) {
 		pr_err("trying to unpin a not attached buffer\n");
@@ -576,7 +577,7 @@ static void vb2_dma_sg_unmap_dmabuf(void *mem_priv)
 	}
 
 	if (buf->vaddr) {
-		dma_buf_vunmap(buf->db_attach->dmabuf, buf->vaddr);
+		dma_buf_vunmap(buf->db_attach->dmabuf, &map);
 		buf->vaddr = NULL;
 	}
 	dma_buf_unmap_attachment(buf->db_attach, sgt, buf->dma_dir);
diff --git a/drivers/media/common/videobuf2/videobuf2-vmalloc.c b/drivers/media/common/videobuf2/videobuf2-vmalloc.c
index 6e1db963ef66..d4477b0c0b16 100644
--- a/drivers/media/common/videobuf2/videobuf2-vmalloc.c
+++ b/drivers/media/common/videobuf2/videobuf2-vmalloc.c
@@ -385,17 +385,19 @@ static int vb2_vmalloc_map_dmabuf(void *mem_priv)
 static void vb2_vmalloc_unmap_dmabuf(void *mem_priv)
 {
 	struct vb2_vmalloc_buf *buf = mem_priv;
+	struct dma_buf_map map = DMA_BUF_MAP_INIT_VADDR(buf->vaddr);
 
-	dma_buf_vunmap(buf->dbuf, buf->vaddr);
+	dma_buf_vunmap(buf->dbuf, &map);
 	buf->vaddr = NULL;
 }
 
 static void vb2_vmalloc_detach_dmabuf(void *mem_priv)
 {
 	struct vb2_vmalloc_buf *buf = mem_priv;
+	struct dma_buf_map map = DMA_BUF_MAP_INIT_VADDR(buf->vaddr);
 
 	if (buf->vaddr)
-		dma_buf_vunmap(buf->dbuf, buf->vaddr);
+		dma_buf_vunmap(buf->dbuf, &map);
 
 	kfree(buf);
 }
* Unmerged path include/drm/drm_prime.h
* Unmerged path include/linux/dma-buf-map.h
* Unmerged path include/linux/dma-buf.h
