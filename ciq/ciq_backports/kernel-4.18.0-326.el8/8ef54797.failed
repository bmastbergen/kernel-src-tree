xfs: rename btree cursor private btree member flags

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-326.el8
commit-author Dave Chinner <dchinner@redhat.com>
commit 8ef547976a18e3d672194d8c944c19b345ef6bfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-326.el8/8ef54797.failed

BPRV is not longer appropriate because bc_private is going away.
Script:

$ sed -i 's/BTCUR_BPRV/BTCUR_BMBT/g' fs/xfs/*[ch] fs/xfs/*/*[ch]

With manual cleanup to the definitions in fs/xfs/libxfs/xfs_btree.h

	Signed-off-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
[darrick: change "BC_BT" to "BTCUR_BMBT", fix subject line typo]
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
(cherry picked from commit 8ef547976a18e3d672194d8c944c19b345ef6bfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_bmap.c
#	fs/xfs/libxfs/xfs_bmap_btree.c
#	fs/xfs/libxfs/xfs_btree.c
diff --cc fs/xfs/libxfs/xfs_bmap.c
index b56068b2b5b2,8057486c02b5..000000000000
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@@ -690,7 -690,7 +690,11 @@@ xfs_bmap_extents_to_btree
  	 * Need a cursor.  Can't allocate until bb_level is filled in.
  	 */
  	cur = xfs_bmbt_init_cursor(mp, tp, ip, whichfork);
++<<<<<<< HEAD
 +	cur->bc_private.b.flags = wasdel ? XFS_BTCUR_BPRV_WASDEL : 0;
++=======
+ 	cur->bc_ino.flags = wasdel ? XFS_BTCUR_BMBT_WASDEL : 0;
++>>>>>>> 8ef547976a18 (xfs: rename btree cursor private btree member flags)
  	/*
  	 * Convert to a btree with two levels, one record in root.
  	 */
@@@ -1528,7 -1528,7 +1532,11 @@@ xfs_bmap_add_extent_delay_real
  
  	ASSERT(!isnullstartblock(new->br_startblock));
  	ASSERT(!bma->cur ||
++<<<<<<< HEAD
 +	       (bma->cur->bc_private.b.flags & XFS_BTCUR_BPRV_WASDEL));
++=======
+ 	       (bma->cur->bc_ino.flags & XFS_BTCUR_BMBT_WASDEL));
++>>>>>>> 8ef547976a18 (xfs: rename btree cursor private btree member flags)
  
  	XFS_STATS_INC(mp, xs_add_exlist);
  
@@@ -2752,7 -2752,7 +2760,11 @@@ xfs_bmap_add_extent_hole_real
  	struct xfs_bmbt_irec	old;
  
  	ASSERT(!isnullstartblock(new->br_startblock));
++<<<<<<< HEAD
 +	ASSERT(!cur || !(cur->bc_private.b.flags & XFS_BTCUR_BPRV_WASDEL));
++=======
+ 	ASSERT(!cur || !(cur->bc_ino.flags & XFS_BTCUR_BMBT_WASDEL));
++>>>>>>> 8ef547976a18 (xfs: rename btree cursor private btree member flags)
  
  	XFS_STATS_INC(mp, xs_add_exlist);
  
@@@ -4187,8 -4187,8 +4199,13 @@@ xfs_bmapi_allocate
  	bma->nallocs++;
  
  	if (bma->cur)
++<<<<<<< HEAD
 +		bma->cur->bc_private.b.flags =
 +			bma->wasdel ? XFS_BTCUR_BPRV_WASDEL : 0;
++=======
+ 		bma->cur->bc_ino.flags =
+ 			bma->wasdel ? XFS_BTCUR_BMBT_WASDEL : 0;
++>>>>>>> 8ef547976a18 (xfs: rename btree cursor private btree member flags)
  
  	bma->got.br_startoff = bma->offset;
  	bma->got.br_startblock = bma->blkno;
diff --cc fs/xfs/libxfs/xfs_bmap_btree.c
index ffe608d2a2d9,295a59cf8840..000000000000
--- a/fs/xfs/libxfs/xfs_bmap_btree.c
+++ b/fs/xfs/libxfs/xfs_bmap_btree.c
@@@ -230,7 -230,7 +230,11 @@@ xfs_bmbt_alloc_block
  	}
  
  	args.minlen = args.maxlen = args.prod = 1;
++<<<<<<< HEAD
 +	args.wasdel = cur->bc_private.b.flags & XFS_BTCUR_BPRV_WASDEL;
++=======
+ 	args.wasdel = cur->bc_ino.flags & XFS_BTCUR_BMBT_WASDEL;
++>>>>>>> 8ef547976a18 (xfs: rename btree cursor private btree member flags)
  	if (!args.wasdel && args.tp->t_blk_res == 0) {
  		error = -ENOSPC;
  		goto error0;
@@@ -644,7 -644,7 +648,11 @@@ xfs_bmbt_change_owner
  	cur = xfs_bmbt_init_cursor(ip->i_mount, tp, ip, whichfork);
  	if (!cur)
  		return -ENOMEM;
++<<<<<<< HEAD
 +	cur->bc_private.b.flags |= XFS_BTCUR_BPRV_INVALID_OWNER;
++=======
+ 	cur->bc_ino.flags |= XFS_BTCUR_BMBT_INVALID_OWNER;
++>>>>>>> 8ef547976a18 (xfs: rename btree cursor private btree member flags)
  
  	error = xfs_btree_change_owner(cur, new_owner, buffer_list);
  	xfs_btree_del_cursor(cur, error);
diff --cc fs/xfs/libxfs/xfs_btree.c
index 66c162ec3227,4ef9f0b42c7f..000000000000
--- a/fs/xfs/libxfs/xfs_btree.c
+++ b/fs/xfs/libxfs/xfs_btree.c
@@@ -1734,10 -1743,10 +1734,14 @@@ xfs_btree_lookup_get_block
  
  	/* Check the inode owner since the verifiers don't. */
  	if (xfs_sb_version_hascrc(&cur->bc_mp->m_sb) &&
++<<<<<<< HEAD
 +	    !(cur->bc_private.b.flags & XFS_BTCUR_BPRV_INVALID_OWNER) &&
++=======
+ 	    !(cur->bc_ino.flags & XFS_BTCUR_BMBT_INVALID_OWNER) &&
++>>>>>>> 8ef547976a18 (xfs: rename btree cursor private btree member flags)
  	    (cur->bc_flags & XFS_BTREE_LONG_PTRS) &&
  	    be64_to_cpu((*blkp)->bb_u.l.bb_owner) !=
 -			cur->bc_ino.ip->i_ino)
 +			cur->bc_private.b.ip->i_ino)
  		goto out_bad;
  
  	/* Did we get the level we were looking for? */
* Unmerged path fs/xfs/libxfs/xfs_bmap.c
* Unmerged path fs/xfs/libxfs/xfs_bmap_btree.c
* Unmerged path fs/xfs/libxfs/xfs_btree.c
diff --git a/fs/xfs/libxfs/xfs_btree.h b/fs/xfs/libxfs/xfs_btree.h
index 4a1c98bdfaad..00a58ac8b696 100644
--- a/fs/xfs/libxfs/xfs_btree.h
+++ b/fs/xfs/libxfs/xfs_btree.h
@@ -220,8 +220,8 @@ typedef struct xfs_btree_cur
 			short		forksize;	/* fork's inode space */
 			char		whichfork;	/* data or attr fork */
 			char		flags;		/* flags */
-#define	XFS_BTCUR_BPRV_WASDEL		(1<<0)		/* was delayed */
-#define	XFS_BTCUR_BPRV_INVALID_OWNER	(1<<1)		/* for ext swap */
+#define	XFS_BTCUR_BMBT_WASDEL	(1 << 0)		/* was delayed */
+#define	XFS_BTCUR_BMBT_INVALID_OWNER	(1 << 1)		/* for ext swap */
 		} b;
 	}		bc_private;	/* per-btree type data */
 #define bc_ag	bc_private.a
