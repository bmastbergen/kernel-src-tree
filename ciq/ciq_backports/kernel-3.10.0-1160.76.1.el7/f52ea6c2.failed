x86/speculation: Add a common function for MD_CLEAR mitigation update

jira LE-1907
cve CVE-2022-21166
cve CVE-2022-21125
cve CVE-2022-21123
Rebuild_History Non-Buildable kernel-3.10.0-1160.76.1.el7
commit-author Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
commit f52ea6c26953fed339aa4eae717ee5c2133c7ff2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.76.1.el7/f52ea6c2.failed

Processor MMIO Stale Data mitigation uses similar mitigation as MDS and
TAA. In preparation for adding its mitigation, add a common function to
update all mitigations that depend on MD_CLEAR.

  [ bp: Add a newline in md_clear_update_mitigation() to separate
    statements better. ]

	Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
(cherry picked from commit f52ea6c26953fed339aa4eae717ee5c2133c7ff2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/bugs.c
diff --cc arch/x86/kernel/cpu/bugs.c
index eed1e0c03c19,e05d207e7ec9..000000000000
--- a/arch/x86/kernel/cpu/bugs.c
+++ b/arch/x86/kernel/cpu/bugs.c
@@@ -33,24 -38,53 +33,28 @@@
  
  static void __init spectre_v1_select_mitigation(void);
  static void __init spectre_v2_select_mitigation(void);
 -static void __init ssb_select_mitigation(void);
 +static void __init ssb_parse_cmdline(void);
 +void ssb_select_mitigation(void);
  static void __init l1tf_select_mitigation(void);
  static void __init mds_select_mitigation(void);
++<<<<<<< HEAD
++=======
+ static void __init md_clear_update_mitigation(void);
++>>>>>>> f52ea6c26953 (x86/speculation: Add a common function for MD_CLEAR mitigation update)
  static void __init taa_select_mitigation(void);
  static void __init srbds_select_mitigation(void);
 -static void __init l1d_flush_select_mitigation(void);
  
 -/* The base value of the SPEC_CTRL MSR that always has to be preserved. */
 -u64 x86_spec_ctrl_base;
 -EXPORT_SYMBOL_GPL(x86_spec_ctrl_base);
 -static DEFINE_MUTEX(spec_ctrl_mutex);
 -
 -/*
 - * The vendor and possibly platform specific bits which can be modified in
 - * x86_spec_ctrl_base.
 - */
 -static u64 __ro_after_init x86_spec_ctrl_mask = SPEC_CTRL_IBRS;
 +extern void spec_ctrl_save_msr(void);
  
 -/*
 - * AMD specific MSR info for Speculative Store Bypass control.
 - * x86_amd_ls_cfg_ssbd_mask is initialized in identify_boot_cpu().
 - */
 -u64 __ro_after_init x86_amd_ls_cfg_base;
 -u64 __ro_after_init x86_amd_ls_cfg_ssbd_mask;
 -
 -/* Control conditional STIBP in switch_to() */
 -DEFINE_STATIC_KEY_FALSE(switch_to_cond_stibp);
 -/* Control conditional IBPB in switch_mm() */
 -DEFINE_STATIC_KEY_FALSE(switch_mm_cond_ibpb);
 -/* Control unconditional IBPB in switch_mm() */
 -DEFINE_STATIC_KEY_FALSE(switch_mm_always_ibpb);
 +static DEFINE_MUTEX(spec_ctrl_mutex);
  
  /* Control MDS CPU buffer clear before returning to user space */
 -DEFINE_STATIC_KEY_FALSE(mds_user_clear);
 +struct static_key mds_user_clear = STATIC_KEY_INIT_FALSE;
  EXPORT_SYMBOL_GPL(mds_user_clear);
  /* Control MDS CPU buffer clear before idling (halt, mwait) */
 -DEFINE_STATIC_KEY_FALSE(mds_idle_clear);
 +struct static_key mds_idle_clear = STATIC_KEY_INIT_FALSE;
  EXPORT_SYMBOL_GPL(mds_idle_clear);
  
 -/*
 - * Controls whether l1d flush based mitigations are enabled,
 - * based on hw features and admin setting via boot parameter
 - * defaults to false
 - */
 -DEFINE_STATIC_KEY_FALSE(switch_mm_cond_l1d_flush);
 -
  void __init check_bugs(void)
  {
  	identify_boot_cpu();
@@@ -87,12 -120,13 +91,12 @@@
  	mds_select_mitigation();
  	taa_select_mitigation();
  	srbds_select_mitigation();
 -	l1d_flush_select_mitigation();
  
  	/*
- 	 * As MDS and TAA mitigations are inter-related, print MDS
- 	 * mitigation until after TAA mitigation selection is done.
+ 	 * As MDS and TAA mitigations are inter-related, update and print their
+ 	 * mitigation after TAA mitigation selection is done.
  	 */
- 	mds_print_mitigation();
+ 	md_clear_update_mitigation();
  
  	arch_smt_update();
  
@@@ -200,14 -267,6 +204,17 @@@ static void __init mds_select_mitigatio
  	}
  }
  
++<<<<<<< HEAD
 +void mds_print_mitigation(void)
 +{
 +	if (!boot_cpu_has_bug(X86_BUG_MDS) || cpu_mitigations_off())
 +		return;
 +
 +	pr_info("%s\n", mds_strings[mds_mitigation]);
 +}
 +
++=======
++>>>>>>> f52ea6c26953 (x86/speculation: Add a common function for MD_CLEAR mitigation update)
  static int __init mds_cmdline(char *str)
  {
  	if (!boot_cpu_has_bug(X86_BUG_MDS))
* Unmerged path arch/x86/kernel/cpu/bugs.c
