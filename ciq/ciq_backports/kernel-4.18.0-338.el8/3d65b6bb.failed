arm64: tlbi: Set MAX_TLBI_OPS to PTRS_PER_PTE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Will Deacon <will.deacon@arm.com>
commit 3d65b6bbc01ecece8142e62a8a5f1d48ba41a240
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/3d65b6bb.failed

In order to reduce the possibility of soft lock-ups, we bound the
maximum number of TLBI operations performed by a single call to
flush_tlb_range() to an arbitrary constant of 1024.

Whilst this does the job of avoiding lock-ups, we can actually be a bit
smarter by defining this as PTRS_PER_PTE. Due to the structure of our
page tables, using PTRS_PER_PTE means that an outer loop calling
flush_tlb_range() for entire table entries will end up performing just a
single TLBI operation for each entry. As an example, mremap()ing a 1GB
range mapped using 4k pages now requires only 512 TLBI operations when
moving the page tables as opposed to 262144 operations (512*512) when
using the current threshold of 1024.

	Cc: Joel Fernandes <joel@joelfernandes.org>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit 3d65b6bbc01ecece8142e62a8a5f1d48ba41a240)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/tlbflush.h
diff --cc arch/arm64/include/asm/tlbflush.h
index a5b457f860a3,bb4507a11b1b..000000000000
--- a/arch/arm64/include/asm/tlbflush.h
+++ b/arch/arm64/include/asm/tlbflush.h
@@@ -256,13 -192,11 +256,18 @@@ static inline void __flush_tlb_range(st
  				     unsigned long start, unsigned long end,
  				     unsigned long stride, bool last_level)
  {
 -	unsigned long asid = ASID(vma->vm_mm);
 +	struct mm_struct *mm = vma->vm_mm;
 +	unsigned long asid = ASID(mm);
  	unsigned long addr;
 +	enum tlb_flush_types flush;
  
++<<<<<<< HEAD
 +	if ((end - start) > (MAX_TLBI_OPS * stride)) {
 +		flush_tlb_mm(mm);
++=======
+ 	if ((end - start) >= (MAX_TLBI_OPS * stride)) {
+ 		flush_tlb_mm(vma->vm_mm);
++>>>>>>> 3d65b6bbc01e (arm64: tlbi: Set MAX_TLBI_OPS to PTRS_PER_PTE)
  		return;
  	}
  
* Unmerged path arch/arm64/include/asm/tlbflush.h
