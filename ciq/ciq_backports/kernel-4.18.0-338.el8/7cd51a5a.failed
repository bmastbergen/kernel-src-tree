arm64/cpufeature: Add remaining feature bits in ID_AA64ISAR0 register

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Anshuman Khandual <anshuman.khandual@arm.com>
commit 7cd51a5a84d115cd49c43e90b083ca60873874e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/7cd51a5a.failed

Enable TLB features bit in ID_AA64ISAR0 register as per ARM DDI 0487F.a
specification.

	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will@kernel.org>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linux-kernel@vger.kernel.org

	Suggested-by: Will Deacon <will@kernel.org>
	Signed-off-by: Anshuman Khandual <anshuman.khandual@arm.com>
	Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
Link: https://lore.kernel.org/r/1589881254-10082-10-git-send-email-anshuman.khandual@arm.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 7cd51a5a84d115cd49c43e90b083ca60873874e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/sysreg.h
#	arch/arm64/kernel/cpufeature.c
diff --cc arch/arm64/include/asm/sysreg.h
index d71012f215e9,ea075cc08c8f..000000000000
--- a/arch/arm64/include/asm/sysreg.h
+++ b/arch/arm64/include/asm/sysreg.h
@@@ -598,18 -583,25 +598,23 @@@
  
  #define SCTLR_EL1_SET	(SCTLR_ELx_M    | SCTLR_ELx_C    | SCTLR_ELx_SA   |\
  			 SCTLR_EL1_SA0  | SCTLR_EL1_SED  | SCTLR_ELx_I    |\
 -			 SCTLR_EL1_DZE  | SCTLR_EL1_UCT                   |\
 +			 SCTLR_EL1_DZE  | SCTLR_EL1_UCT  | SCTLR_EL1_NTWI |\
  			 SCTLR_EL1_NTWE | SCTLR_ELx_IESB | SCTLR_EL1_SPAN |\
  			 ENDIAN_SET_EL1 | SCTLR_EL1_UCI  | SCTLR_EL1_RES1)
 +#define SCTLR_EL1_CLEAR	(SCTLR_ELx_A   | SCTLR_EL1_CP15BEN | SCTLR_EL1_ITD    |\
 +			 SCTLR_EL1_UMA | SCTLR_ELx_WXN     | ENDIAN_CLEAR_EL1 |\
 +			 SCTLR_ELx_DSSBS | SCTLR_EL1_RES0)
  
 -/* MAIR_ELx memory attributes (used by Linux) */
 -#define MAIR_ATTR_DEVICE_nGnRnE		UL(0x00)
 -#define MAIR_ATTR_DEVICE_nGnRE		UL(0x04)
 -#define MAIR_ATTR_DEVICE_GRE		UL(0x0c)
 -#define MAIR_ATTR_NORMAL_NC		UL(0x44)
 -#define MAIR_ATTR_NORMAL_WT		UL(0xbb)
 -#define MAIR_ATTR_NORMAL		UL(0xff)
 -#define MAIR_ATTR_MASK			UL(0xff)
 -
 -/* Position the attr at the correct index */
 -#define MAIR_ATTRIDX(attr, idx)		((attr) << ((idx) * 8))
 +#if (SCTLR_EL1_SET ^ SCTLR_EL1_CLEAR) != 0xffffffffffffffff
 +#error "Inconsistent SCTLR_EL1 set/clear bits"
 +#endif
  
  /* id_aa64isar0 */
++<<<<<<< HEAD
++=======
+ #define ID_AA64ISAR0_RNDR_SHIFT		60
+ #define ID_AA64ISAR0_TLB_SHIFT		56
++>>>>>>> 7cd51a5a84d1 (arm64/cpufeature: Add remaining feature bits in ID_AA64ISAR0 register)
  #define ID_AA64ISAR0_TS_SHIFT		52
  #define ID_AA64ISAR0_FHM_SHIFT		48
  #define ID_AA64ISAR0_DP_SHIFT		44
diff --cc arch/arm64/kernel/cpufeature.c
index 06d42cf73c72,41f6e9b26d18..000000000000
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@@ -130,6 -178,8 +130,11 @@@ static void cpu_enable_cnp(struct arm64
   * sync with the documentation of the CPU feature register ABI.
   */
  static const struct arm64_ftr_bits ftr_id_aa64isar0[] = {
++<<<<<<< HEAD
++=======
+ 	ARM64_FTR_BITS(FTR_VISIBLE, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64ISAR0_RNDR_SHIFT, 4, 0),
+ 	ARM64_FTR_BITS(FTR_HIDDEN, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64ISAR0_TLB_SHIFT, 4, 0),
++>>>>>>> 7cd51a5a84d1 (arm64/cpufeature: Add remaining feature bits in ID_AA64ISAR0 register)
  	ARM64_FTR_BITS(FTR_VISIBLE, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64ISAR0_TS_SHIFT, 4, 0),
  	ARM64_FTR_BITS(FTR_VISIBLE, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64ISAR0_FHM_SHIFT, 4, 0),
  	ARM64_FTR_BITS(FTR_VISIBLE, FTR_STRICT, FTR_LOWER_SAFE, ID_AA64ISAR0_DP_SHIFT, 4, 0),
* Unmerged path arch/arm64/include/asm/sysreg.h
* Unmerged path arch/arm64/kernel/cpufeature.c
