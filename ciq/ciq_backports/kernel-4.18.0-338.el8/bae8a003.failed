bnxt_en: Remove the read of BNXT_FW_RESET_INPROG_REG after firmware reset.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Vasundhara Volam <vasundhara-v.volam@broadcom.com>
commit bae8a00379f4c1327c8e38a768083460b5ad5b12
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/bae8a003.failed

Once the chip goes through reset, the register mapping may be lost
and any read of the mapped health registers may return garbage value
until the registers are mapped again in the init path.

Reading BNXT_FW_RESET_INPROG_REG after firmware reset will likely
return garbage value due to the above reason.  Reading this register
is for information purpose only so remove it.

	Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
	Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bae8a00379f4c1327c8e38a768083460b5ad5b12)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 9ade00ccd34f,6db5e927a473..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -11758,28 -11768,20 +11758,25 @@@ static void bnxt_fw_reset_task(struct w
  		bnxt_queue_fw_reset_work(bp, bp->fw_reset_min_dsecs * HZ / 10);
  		return;
  	case BNXT_FW_RESET_STATE_ENABLE_DEV:
++<<<<<<< HEAD
 +		if (test_bit(BNXT_STATE_FW_FATAL_COND, &bp->state)) {
 +			u32 val;
- 
- 			if (!bp->fw_reset_min_dsecs) {
- 				u16 val;
- 
- 				pci_read_config_word(bp->pdev, PCI_SUBSYSTEM_ID,
- 						     &val);
- 				if (val == 0xffff) {
- 					if (bnxt_fw_reset_timeout(bp)) {
- 						netdev_err(bp->dev, "Firmware reset aborted, PCI config space invalid\n");
- 						goto fw_reset_abort;
- 					}
- 					bnxt_queue_fw_reset_work(bp, HZ / 1000);
- 					return;
++=======
+ 		bnxt_inv_fw_health_reg(bp);
+ 		if (test_bit(BNXT_STATE_FW_FATAL_COND, &bp->state) &&
+ 		    !bp->fw_reset_min_dsecs) {
+ 			u16 val;
++>>>>>>> bae8a00379f4 (bnxt_en: Remove the read of BNXT_FW_RESET_INPROG_REG after firmware reset.)
+ 
+ 			pci_read_config_word(bp->pdev, PCI_SUBSYSTEM_ID, &val);
+ 			if (val == 0xffff) {
+ 				if (bnxt_fw_reset_timeout(bp)) {
+ 					netdev_err(bp->dev, "Firmware reset aborted, PCI config space invalid\n");
+ 					goto fw_reset_abort;
  				}
+ 				bnxt_queue_fw_reset_work(bp, HZ / 1000);
+ 				return;
  			}
- 			val = bnxt_fw_health_readl(bp,
- 						   BNXT_FW_RESET_INPROG_REG);
- 			if (val)
- 				netdev_warn(bp->dev, "FW reset inprog %x after min wait time.\n",
- 					    val);
  		}
  		clear_bit(BNXT_STATE_FW_FATAL_COND, &bp->state);
  		if (pci_enable_device(bp->pdev)) {
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
