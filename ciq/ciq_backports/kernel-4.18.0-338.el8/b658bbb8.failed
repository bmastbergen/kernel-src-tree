bpf: Rework ptr_limit into alu_limit and add common error path

jira LE-1907
cve CVE-2021-29155
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit b658bbb844e28f1862867f37e8ca11a8e2aa94a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/b658bbb8.failed

Small refactor with no semantic changes in order to consolidate the max
ptr_limit boundary check.

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit b658bbb844e28f1862867f37e8ca11a8e2aa94a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index e6b860840b50,b8e0171d9591..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -5449,12 -5857,18 +5449,17 @@@ static struct bpf_insn_aux_data *cur_au
  }
  
  static int retrieve_ptr_limit(const struct bpf_reg_state *ptr_reg,
++<<<<<<< HEAD
 +			      u32 *ptr_limit, u8 opcode, bool off_is_neg)
++=======
+ 			      const struct bpf_reg_state *off_reg,
+ 			      u32 *alu_limit, u8 opcode)
++>>>>>>> b658bbb844e2 (bpf: Rework ptr_limit into alu_limit and add common error path)
  {
 -	bool off_is_neg = off_reg->smin_value < 0;
  	bool mask_to_left = (opcode == BPF_ADD &&  off_is_neg) ||
  			    (opcode == BPF_SUB && !off_is_neg);
- 	u32 off, max;
+ 	u32 off, max = 0, ptr_limit = 0;
  
 -	if (!tnum_is_const(off_reg->var_off) &&
 -	    (off_reg->smin_value < 0) != (off_reg->smax_value < 0))
 -		return -EACCES;
 -
  	switch (ptr_reg->type) {
  	case PTR_TO_STACK:
  		/* Offset 0 is out-of-bounds, but acceptable start for the
* Unmerged path kernel/bpf/verifier.c
