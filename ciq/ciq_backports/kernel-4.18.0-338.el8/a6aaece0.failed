bpf: Improve verifier error messages for users

jira LE-1907
cve CVE-2021-29155
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit a6aaece00a57fa6f22575364b3903dfbccf5345d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/a6aaece0.failed

Consolidate all error handling and provide more user-friendly error messages
from sanitize_ptr_alu() and sanitize_val_alu().

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit a6aaece00a57fa6f22575364b3903dfbccf5345d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index e6b860840b50,f378d4ae405f..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -5448,12 -5856,26 +5448,28 @@@ static struct bpf_insn_aux_data *cur_au
  	return &env->insn_aux_data[env->insn_idx];
  }
  
+ enum {
+ 	REASON_BOUNDS	= -1,
+ 	REASON_TYPE	= -2,
+ 	REASON_PATHS	= -3,
+ 	REASON_LIMIT	= -4,
+ 	REASON_STACK	= -5,
+ };
+ 
  static int retrieve_ptr_limit(const struct bpf_reg_state *ptr_reg,
 -			      const struct bpf_reg_state *off_reg,
 -			      u32 *alu_limit, u8 opcode)
 +			      u32 *ptr_limit, u8 opcode, bool off_is_neg)
  {
 -	bool off_is_neg = off_reg->smin_value < 0;
  	bool mask_to_left = (opcode == BPF_ADD &&  off_is_neg) ||
  			    (opcode == BPF_SUB && !off_is_neg);
++<<<<<<< HEAD
 +	u32 off, max;
++=======
+ 	u32 off, max = 0, ptr_limit = 0;
+ 
+ 	if (!tnum_is_const(off_reg->var_off) &&
+ 	    (off_reg->smin_value < 0) != (off_reg->smax_value < 0))
+ 		return REASON_BOUNDS;
++>>>>>>> a6aaece00a57 (bpf: Improve verifier error messages for users)
  
  	switch (ptr_reg->type) {
  	case PTR_TO_STACK:
@@@ -5473,15 -5895,20 +5489,23 @@@
  	case PTR_TO_MAP_VALUE:
  		max = ptr_reg->map_ptr->value_size;
  		if (mask_to_left) {
 -			ptr_limit = ptr_reg->umax_value + ptr_reg->off;
 +			*ptr_limit = ptr_reg->umax_value + ptr_reg->off;
  		} else {
  			off = ptr_reg->smin_value + ptr_reg->off;
 -			ptr_limit = ptr_reg->map_ptr->value_size - off - 1;
 +			*ptr_limit = ptr_reg->map_ptr->value_size - off - 1;
  		}
 -		break;
 +		return *ptr_limit >= max ? -ERANGE : 0;
  	default:
- 		return -EINVAL;
+ 		return REASON_TYPE;
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	if (ptr_limit >= max)
+ 		return REASON_LIMIT;
+ 	*alu_limit = ptr_limit;
+ 	return 0;
++>>>>>>> a6aaece00a57 (bpf: Improve verifier error messages for users)
  }
  
  static bool can_skip_alu_sanitation(const struct bpf_verifier_env *env,
@@@ -5572,9 -5999,83 +5596,48 @@@ do_sim
  	ret = push_stack(env, env->insn_idx + 1, env->insn_idx, true);
  	if (!ptr_is_dst_reg && ret)
  		*dst_reg = tmp;
- 	return !ret ? -EFAULT : 0;
+ 	return !ret ? REASON_STACK : 0;
+ }
+ 
+ static int sanitize_err(struct bpf_verifier_env *env,
+ 			const struct bpf_insn *insn, int reason,
+ 			const struct bpf_reg_state *off_reg,
+ 			const struct bpf_reg_state *dst_reg)
+ {
+ 	static const char *err = "pointer arithmetic with it prohibited for !root";
+ 	const char *op = BPF_OP(insn->code) == BPF_ADD ? "add" : "sub";
+ 	u32 dst = insn->dst_reg, src = insn->src_reg;
+ 
+ 	switch (reason) {
+ 	case REASON_BOUNDS:
+ 		verbose(env, "R%d has unknown scalar with mixed signed bounds, %s\n",
+ 			off_reg == dst_reg ? dst : src, err);
+ 		break;
+ 	case REASON_TYPE:
+ 		verbose(env, "R%d has pointer with unsupported alu operation, %s\n",
+ 			off_reg == dst_reg ? src : dst, err);
+ 		break;
+ 	case REASON_PATHS:
+ 		verbose(env, "R%d tried to %s from different maps, paths or scalars, %s\n",
+ 			dst, op, err);
+ 		break;
+ 	case REASON_LIMIT:
+ 		verbose(env, "R%d tried to %s beyond pointer bounds, %s\n",
+ 			dst, op, err);
+ 		break;
+ 	case REASON_STACK:
+ 		verbose(env, "R%d could not be pushed for speculative verification, %s\n",
+ 			dst, err);
+ 		break;
+ 	default:
+ 		verbose(env, "verifier internal error: unknown reason (%d)\n",
+ 			reason);
+ 		break;
+ 	}
+ 
+ 	return -EACCES;
  }
  
 -/* check that stack access falls within stack limits and that 'reg' doesn't
 - * have a variable offset.
 - *
 - * Variable offset is prohibited for unprivileged mode for simplicity since it
 - * requires corresponding support in Spectre masking for stack ALU.  See also
 - * retrieve_ptr_limit().
 - *
 - *
 - * 'off' includes 'reg->off'.
 - */
 -static int check_stack_access_for_ptr_arithmetic(
 -				struct bpf_verifier_env *env,
 -				int regno,
 -				const struct bpf_reg_state *reg,
 -				int off)
 -{
 -	if (!tnum_is_const(reg->var_off)) {
 -		char tn_buf[48];
 -
 -		tnum_strn(tn_buf, sizeof(tn_buf), reg->var_off);
 -		verbose(env, "R%d variable stack access prohibited for !root, var_off=%s off=%d\n",
 -			regno, tn_buf, off);
 -		return -EACCES;
 -	}
 -
 -	if (off >= 0 || off < -MAX_BPF_STACK) {
 -		verbose(env, "R%d stack pointer arithmetic goes out of range, "
 -			"prohibited for !root; off=%d\n", regno, off);
 -		return -EACCES;
 -	}
 -
 -	return 0;
 -}
 -
 -
  /* Handles arithmetic on a pointer and a scalar: computes new min/max and var_off.
   * Caller should also handle BPF_MOV case separately.
   * If we return -EACCES, caller may want to try again treating pointer as a
* Unmerged path kernel/bpf/verifier.c
