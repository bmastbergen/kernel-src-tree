KVM: nSVM: avoid picking up unsupported bits from L2 in int_ctl (CVE-2021-3653)

jira LE-1907
cve CVE-2021-3653
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Maxim Levitsky <mlevitsk@redhat.com>
commit 0f923e07124df069ba68d8bb12324398f4b6b709
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/0f923e07.failed

* Invert the mask of bits that we pick from L2 in
  nested_vmcb02_prepare_control

* Invert and explicitly use VIRQ related bits bitmask in svm_clear_vintr

This fixes a security issue that allowed a malicious L1 to run L2 with
AVIC enabled, which allowed the L2 to exploit the uninitialized and enabled
AVIC to read/write the host physical memory at some offsets.

Fixes: 3d6368ef580a ("KVM: SVM: Add VMRUN handler")
	Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 0f923e07124df069ba68d8bb12324398f4b6b709)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm/nested.c
diff --cc arch/x86/kvm/svm/nested.c
index b22b700c510b,28381ca5221c..000000000000
--- a/arch/x86/kvm/svm/nested.c
+++ b/arch/x86/kvm/svm/nested.c
@@@ -488,7 -503,12 +488,16 @@@ static void nested_vmcb02_prepare_save(
  
  static void nested_vmcb02_prepare_control(struct vcpu_svm *svm)
  {
++<<<<<<< HEAD
 +	const u32 mask = V_INTR_MASKING_MASK | V_GIF_ENABLE_MASK | V_GIF_MASK;
++=======
+ 	const u32 int_ctl_vmcb01_bits =
+ 		V_INTR_MASKING_MASK | V_GIF_MASK | V_GIF_ENABLE_MASK;
+ 
+ 	const u32 int_ctl_vmcb12_bits = V_TPR_MASK | V_IRQ_INJECTION_BITS_MASK;
+ 
+ 	struct kvm_vcpu *vcpu = &svm->vcpu;
++>>>>>>> 0f923e07124d (KVM: nSVM: avoid picking up unsupported bits from L2 in int_ctl (CVE-2021-3653))
  
  	/*
  	 * Filled at exit: exit_code, exit_code_hi, exit_info_1, exit_info_2,
@@@ -513,14 -533,14 +522,14 @@@
  
  	/* nested_cr3.  */
  	if (nested_npt_enabled(svm))
 -		nested_svm_init_mmu_context(vcpu);
 +		nested_svm_init_mmu_context(&svm->vcpu);
  
 -	svm->vmcb->control.tsc_offset = vcpu->arch.tsc_offset =
 -		vcpu->arch.l1_tsc_offset + svm->nested.ctl.tsc_offset;
 +	svm->vmcb->control.tsc_offset = svm->vcpu.arch.tsc_offset =
 +		svm->vcpu.arch.l1_tsc_offset + svm->nested.ctl.tsc_offset;
  
  	svm->vmcb->control.int_ctl             =
- 		(svm->nested.ctl.int_ctl & ~mask) |
- 		(svm->vmcb01.ptr->control.int_ctl & mask);
+ 		(svm->nested.ctl.int_ctl & int_ctl_vmcb12_bits) |
+ 		(svm->vmcb01.ptr->control.int_ctl & int_ctl_vmcb01_bits);
  
  	svm->vmcb->control.virt_ext            = svm->nested.ctl.virt_ext;
  	svm->vmcb->control.int_vector          = svm->nested.ctl.int_vector;
diff --git a/arch/x86/include/asm/svm.h b/arch/x86/include/asm/svm.h
index 772e60efe243..b6c445ced0e5 100644
--- a/arch/x86/include/asm/svm.h
+++ b/arch/x86/include/asm/svm.h
@@ -178,6 +178,8 @@ struct __attribute__ ((__packed__)) vmcb_control_area {
 #define V_IGN_TPR_SHIFT 20
 #define V_IGN_TPR_MASK (1 << V_IGN_TPR_SHIFT)
 
+#define V_IRQ_INJECTION_BITS_MASK (V_IRQ_MASK | V_INTR_PRIO_MASK | V_IGN_TPR_MASK)
+
 #define V_INTR_MASKING_SHIFT 24
 #define V_INTR_MASKING_MASK (1 << V_INTR_MASKING_SHIFT)
 
* Unmerged path arch/x86/kvm/svm/nested.c
diff --git a/arch/x86/kvm/svm/svm.c b/arch/x86/kvm/svm/svm.c
index 7d4789c23f56..297fe81ba113 100644
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@ -1563,17 +1563,18 @@ static void svm_set_vintr(struct vcpu_svm *svm)
 
 static void svm_clear_vintr(struct vcpu_svm *svm)
 {
-	const u32 mask = V_TPR_MASK | V_GIF_ENABLE_MASK | V_GIF_MASK | V_INTR_MASKING_MASK;
 	svm_clr_intercept(svm, INTERCEPT_VINTR);
 
 	/* Drop int_ctl fields related to VINTR injection.  */
-	svm->vmcb->control.int_ctl &= mask;
+	svm->vmcb->control.int_ctl &= ~V_IRQ_INJECTION_BITS_MASK;
 	if (is_guest_mode(&svm->vcpu)) {
-		svm->vmcb01.ptr->control.int_ctl &= mask;
+		svm->vmcb01.ptr->control.int_ctl &= ~V_IRQ_INJECTION_BITS_MASK;
 
 		WARN_ON((svm->vmcb->control.int_ctl & V_TPR_MASK) !=
 			(svm->nested.ctl.int_ctl & V_TPR_MASK));
-		svm->vmcb->control.int_ctl |= svm->nested.ctl.int_ctl & ~mask;
+
+		svm->vmcb->control.int_ctl |= svm->nested.ctl.int_ctl &
+			V_IRQ_INJECTION_BITS_MASK;
 	}
 
 	vmcb_mark_dirty(svm->vmcb, VMCB_INTR);
