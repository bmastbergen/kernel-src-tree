arm64: tlb: Detect the ARMv8.4 TLBI RANGE feature

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Zhenyu Ye <yezhenyu2@huawei.com>
commit b620ba54547cd0f98e35c1be102eec2cc25fda5d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/b620ba54.failed

ARMv8.4-TLBI provides TLBI invalidation instruction that apply to a
range of input addresses. This patch detect this feature.

	Signed-off-by: Zhenyu Ye <yezhenyu2@huawei.com>
Link: https://lore.kernel.org/r/20200715071945.897-2-yezhenyu2@huawei.com
[catalin.marinas@arm.com: some renaming for consistency]
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit b620ba54547cd0f98e35c1be102eec2cc25fda5d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/cpucaps.h
#	arch/arm64/kernel/cpufeature.c
diff --cc arch/arm64/include/asm/cpucaps.h
index 49fb5c7a117e,07b643a70710..000000000000
--- a/arch/arm64/include/asm/cpucaps.h
+++ b/arch/arm64/include/asm/cpucaps.h
@@@ -61,14 -50,21 +61,33 @@@
  #define ARM64_HAS_GENERIC_AUTH_ARCH		40
  #define ARM64_HAS_GENERIC_AUTH_IMP_DEF		41
  #define ARM64_HAS_IRQ_PRIO_MASKING		42
++<<<<<<< HEAD
 +#define ARM64_WORKAROUND_CAVIUM_TX2_219_TVM	43
 +#define ARM64_WORKAROUND_CAVIUM_TX2_219_PRFM	44
 +#define ARM64_WORKAROUND_1463225		45
 +#define ARM64_WORKAROUND_1542419		46
 +#define ARM64_HAS_32BIT_EL1			47
 +#define ARM64_WORKAROUND_NVIDIA_CARMEL_CNP	48
 +
 +#define ARM64_NCAPS				49
 +
++=======
+ #define ARM64_HAS_DCPODP			43
+ #define ARM64_WORKAROUND_1463225		44
+ #define ARM64_WORKAROUND_CAVIUM_TX2_219_TVM	45
+ #define ARM64_WORKAROUND_CAVIUM_TX2_219_PRFM	46
+ #define ARM64_WORKAROUND_1542419		47
+ #define ARM64_HAS_E0PD				48
+ #define ARM64_HAS_RNG				49
+ #define ARM64_HAS_AMU_EXTN			50
+ #define ARM64_HAS_ADDRESS_AUTH			51
+ #define ARM64_HAS_GENERIC_AUTH			52
+ #define ARM64_HAS_32BIT_EL1			53
+ #define ARM64_BTI				54
+ #define ARM64_HAS_ARMv8_4_TTL			55
+ #define ARM64_HAS_TLB_RANGE			56
+ 
+ #define ARM64_NCAPS				57
++>>>>>>> b620ba54547c (arm64: tlb: Detect the ARMv8.4 TLBI RANGE feature)
  
  #endif /* __ASM_CPUCAPS_H */
diff --cc arch/arm64/kernel/cpufeature.c
index 06d42cf73c72,2f5adefef34d..000000000000
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@@ -1471,6 -1883,26 +1471,29 @@@ static const struct arm64_cpu_capabilit
  		.matches = has_cpuid_feature,
  		.cpu_enable = cpu_has_fwb,
  	},
++<<<<<<< HEAD
++=======
+ 	{
+ 		.desc = "ARMv8.4 Translation Table Level",
+ 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
+ 		.capability = ARM64_HAS_ARMv8_4_TTL,
+ 		.sys_reg = SYS_ID_AA64MMFR2_EL1,
+ 		.sign = FTR_UNSIGNED,
+ 		.field_pos = ID_AA64MMFR2_TTL_SHIFT,
+ 		.min_field_value = 1,
+ 		.matches = has_cpuid_feature,
+ 	},
+ 	{
+ 		.desc = "TLB range maintenance instructions",
+ 		.capability = ARM64_HAS_TLB_RANGE,
+ 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
+ 		.matches = has_cpuid_feature,
+ 		.sys_reg = SYS_ID_AA64ISAR0_EL1,
+ 		.field_pos = ID_AA64ISAR0_TLB_SHIFT,
+ 		.sign = FTR_UNSIGNED,
+ 		.min_field_value = ID_AA64ISAR0_TLB_RANGE,
+ 	},
++>>>>>>> b620ba54547c (arm64: tlb: Detect the ARMv8.4 TLBI RANGE feature)
  #ifdef CONFIG_ARM64_HW_AFDBM
  	{
  		/*
* Unmerged path arch/arm64/include/asm/cpucaps.h
diff --git a/arch/arm64/include/asm/sysreg.h b/arch/arm64/include/asm/sysreg.h
index d71012f215e9..7f5485fe4e09 100644
--- a/arch/arm64/include/asm/sysreg.h
+++ b/arch/arm64/include/asm/sysreg.h
@@ -623,6 +623,9 @@
 #define ID_AA64ISAR0_SHA1_SHIFT		8
 #define ID_AA64ISAR0_AES_SHIFT		4
 
+#define ID_AA64ISAR0_TLB_RANGE_NI	0x0
+#define ID_AA64ISAR0_TLB_RANGE		0x2
+
 /* id_aa64isar1 */
 #define ID_AA64ISAR1_SB_SHIFT		36
 #define ID_AA64ISAR1_GPI_SHIFT		28
* Unmerged path arch/arm64/kernel/cpufeature.c
