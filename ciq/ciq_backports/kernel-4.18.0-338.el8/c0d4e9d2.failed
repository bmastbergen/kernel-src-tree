ixgbe: store the result of ixgbe_rx_offset() onto ixgbe_ring

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Maciej Fijalkowski <maciej.fijalkowski@intel.com>
commit c0d4e9d223c5f4a31bd0146739dcc88e8ac62dd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/c0d4e9d2.failed

Output of ixgbe_rx_offset() is based on ethtool's priv flag setting, which
when changed, causes PF reset (disables napi, frees irqs, loads
different Rx mem model, etc.). This means that within napi its result is
constant and there is no reason to call it per each processed frame.

Add new 'rx_offset' field to ixgbe_ring that is meant to hold the
ixgbe_rx_offset() result and use it within ixgbe_clean_rx_irq().
Furthermore, use it within ixgbe_alloc_mapped_page().

Last but not least, un-inline the function of interest as it lives in .c
file so let compiler do the decision about the inlining.

	Reviewed-by: Björn Töpel <bjorn.topel@intel.com>
	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Tested-by: Tony Brelinski <tonyx.brelinski@intel.com>
	Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
(cherry picked from commit c0d4e9d223c5f4a31bd0146739dcc88e8ac62dd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index c083bd8ee20a,fae84202d870..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@@ -2001,9 -2001,8 +2001,14 @@@ static void ixgbe_add_rx_frag(struct ix
  #if (PAGE_SIZE < 8192)
  	unsigned int truesize = ixgbe_rx_pg_size(rx_ring) / 2;
  #else
++<<<<<<< HEAD
 +	unsigned int truesize = ring_uses_build_skb(rx_ring) ?
 +				SKB_DATA_ALIGN(IXGBE_SKB_PAD + size) +
 +				SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) :
++=======
+ 	unsigned int truesize = rx_ring->rx_offset ?
+ 				SKB_DATA_ALIGN(rx_ring->rx_offset + size) :
++>>>>>>> c0d4e9d223c5 (ixgbe: store the result of ixgbe_rx_offset() onto ixgbe_ring)
  				SKB_DATA_ALIGN(size);
  #endif
  	skb_add_rx_frag(skb, skb_shinfo(skb)->nr_frags, rx_buffer->page,
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe.h b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
index de0fc6ecf491..a604552fa634 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe.h
@@ -349,6 +349,7 @@ struct ixgbe_ring {
 		struct ixgbe_tx_queue_stats tx_stats;
 		struct ixgbe_rx_queue_stats rx_stats;
 	};
+	u16 rx_offset;
 	struct xdp_rxq_info xdp_rxq;
 	struct xsk_buff_pool *xsk_pool;
 	u16 ring_idx;		/* {rx,tx,xdp}_ring back reference idx */
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
