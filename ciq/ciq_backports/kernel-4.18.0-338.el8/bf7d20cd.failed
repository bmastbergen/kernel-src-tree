ch_ktls: Remove redundant variable result

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
commit bf7d20cd51d7b6aa969e263b33805af6e147a70e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/bf7d20cd.failed

Variable result is being assigned a value from a calculation
however the variable is never read, so this redundant variable
can be removed.

Cleans up the following clang-analyzer warning:

drivers/net/ethernet/chelsio/inline_crypto/ch_ktls/chcr_ktls.c:1488:2:
warning: Value stored to 'pos' is never read
[clang-analyzer-deadcode.DeadStores].

drivers/net/ethernet/chelsio/inline_crypto/ch_ktls/chcr_ktls.c:876:3:
warning: Value stored to 'pos' is never read
[clang-analyzer-deadcode.DeadStores].

drivers/net/ethernet/chelsio/inline_crypto/ch_ktls/chcr_ktls.c:36:3:
warning: Value stored to 'start' is never read
[clang-analyzer-deadcode.DeadStores].

	Reported-by: Abaci Robot <abaci@linux.alibaba.com>
	Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bf7d20cd51d7b6aa969e263b33805af6e147a70e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/chelsio/chcr_ktls.c
diff --cc drivers/crypto/chelsio/chcr_ktls.c
index 887ecc2060e8,ef3f1e92632f..000000000000
--- a/drivers/crypto/chelsio/chcr_ktls.c
+++ b/drivers/crypto/chelsio/chcr_ktls.c
@@@ -1,10 -1,62 +1,59 @@@
  // SPDX-License-Identifier: GPL-2.0-only
  /* Copyright (C) 2020 Chelsio Communications.  All rights reserved. */
  
 -#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 -
 -#include <linux/skbuff.h>
 -#include <linux/module.h>
 +#ifdef CONFIG_CHELSIO_TLS_DEVICE
  #include <linux/highmem.h>
 -#include <linux/ip.h>
 -#include <net/ipv6.h>
 -#include <linux/netdevice.h>
 -#include <crypto/aes.h>
  #include "chcr_ktls.h"
++<<<<<<< HEAD:drivers/crypto/chelsio/chcr_ktls.c
 +#include "clip_tbl.h"
++=======
+ 
+ static LIST_HEAD(uld_ctx_list);
+ static DEFINE_MUTEX(dev_mutex);
+ 
+ /* chcr_get_nfrags_to_send: get the remaining nfrags after start offset
+  * @skb: skb
+  * @start: start offset.
+  * @len: how much data to send after @start
+  */
+ static int chcr_get_nfrags_to_send(struct sk_buff *skb, u32 start, u32 len)
+ {
+ 	struct skb_shared_info *si = skb_shinfo(skb);
+ 	u32 frag_size, skb_linear_data_len = skb_headlen(skb);
+ 	u8 nfrags = 0, frag_idx = 0;
+ 	skb_frag_t *frag;
+ 
+ 	/* if its a linear skb then return 1 */
+ 	if (!skb_is_nonlinear(skb))
+ 		return 1;
+ 
+ 	if (unlikely(start < skb_linear_data_len)) {
+ 		frag_size = min(len, skb_linear_data_len - start);
+ 	} else {
+ 		start -= skb_linear_data_len;
+ 
+ 		frag = &si->frags[frag_idx];
+ 		frag_size = skb_frag_size(frag);
+ 		while (start >= frag_size) {
+ 			start -= frag_size;
+ 			frag_idx++;
+ 			frag = &si->frags[frag_idx];
+ 			frag_size = skb_frag_size(frag);
+ 		}
+ 		frag_size = min(len, skb_frag_size(frag) - start);
+ 	}
+ 	len -= frag_size;
+ 	nfrags++;
+ 
+ 	while (len) {
+ 		frag_size = min(len, skb_frag_size(&si->frags[frag_idx]));
+ 		len -= frag_size;
+ 		nfrags++;
+ 		frag_idx++;
+ 	}
+ 	return nfrags;
+ }
++>>>>>>> bf7d20cd51d7 (ch_ktls: Remove redundant variable result):drivers/net/ethernet/chelsio/inline_crypto/ch_ktls/chcr_ktls.c
  
  static int chcr_init_tcb_fields(struct chcr_ktls_info *tx_info);
  /*
* Unmerged path drivers/crypto/chelsio/chcr_ktls.c
