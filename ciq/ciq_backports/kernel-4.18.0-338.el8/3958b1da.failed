bnxt_en: fix error path of FW reset

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Somnath Kotur <somnath.kotur@broadcom.com>
commit 3958b1da725a477b4a222183d16a14d85445d4b6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/3958b1da.failed

When bnxt_open() fails in the firmware reset path, the driver needs to
gracefully abort, but it is executing code that should be invoked only
in the success path.  Define a function to abort FW reset and
consolidate all error paths to call this new function.

Fixes: dab62e7c2de7 ("bnxt_en: Implement faster recovery for firmware fatal error.")
	Signed-off-by: Somnath Kotur <somnath.kotur@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3958b1da725a477b4a222183d16a14d85445d4b6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 2844fcb9a463,f2f1136fd492..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -11762,28 -12046,21 +11774,37 @@@ static void bnxt_fw_reset_task(struct w
  		bnxt_queue_fw_reset_work(bp, bp->fw_reset_min_dsecs * HZ / 10);
  		return;
  	case BNXT_FW_RESET_STATE_ENABLE_DEV:
 -		bnxt_inv_fw_health_reg(bp);
 -		if (test_bit(BNXT_STATE_FW_FATAL_COND, &bp->state) &&
 -		    !bp->fw_reset_min_dsecs) {
 -			u16 val;
 -
 +		if (test_bit(BNXT_STATE_FW_FATAL_COND, &bp->state)) {
 +			u32 val;
 +
++<<<<<<< HEAD
 +			if (!bp->fw_reset_min_dsecs) {
 +				u16 val;
 +
 +				pci_read_config_word(bp->pdev, PCI_SUBSYSTEM_ID,
 +						     &val);
 +				if (val == 0xffff) {
 +					if (bnxt_fw_reset_timeout(bp)) {
 +						netdev_err(bp->dev, "Firmware reset aborted, PCI config space invalid\n");
 +						goto fw_reset_abort;
 +					}
 +					bnxt_queue_fw_reset_work(bp, HZ / 1000);
 +					return;
++=======
+ 			pci_read_config_word(bp->pdev, PCI_SUBSYSTEM_ID, &val);
+ 			if (val == 0xffff) {
+ 				if (bnxt_fw_reset_timeout(bp)) {
+ 					netdev_err(bp->dev, "Firmware reset aborted, PCI config space invalid\n");
+ 					rc = -ETIMEDOUT;
+ 					goto fw_reset_abort;
++>>>>>>> 3958b1da725a (bnxt_en: fix error path of FW reset)
  				}
 -				bnxt_queue_fw_reset_work(bp, HZ / 1000);
 -				return;
  			}
 +			val = bnxt_fw_health_readl(bp,
 +						   BNXT_FW_RESET_INPROG_REG);
 +			if (val)
 +				netdev_warn(bp->dev, "FW reset inprog %x after min wait time.\n",
 +					    val);
  		}
  		clear_bit(BNXT_STATE_FW_FATAL_COND, &bp->state);
  		if (pci_enable_device(bp->pdev)) {
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
