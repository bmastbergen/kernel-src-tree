bpf: No need to simulate speculative domain for immediates

jira LE-1907
cve CVE-2021-29155
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit a7036191277f9fa68d92f2071ddc38c09b1e5ee5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/a7036191.failed

In 801c6058d14a ("bpf: Fix leakage of uninitialized bpf stack under
speculation") we replaced masking logic with direct loads of immediates
if the register is a known constant. Given in this case we do not apply
any masking, there is also no reason for the operation to be truncated
under the speculative domain.

Therefore, there is also zero reason for the verifier to branch-off and
simulate this case, it only needs to do it for unknown but bounded scalars.
As a side-effect, this also enables few test cases that were previously
rejected due to simulation under zero truncation.

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Piotr Krysiuk <piotras@gmail.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit a7036191277f9fa68d92f2071ddc38c09b1e5ee5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index e65c8ec142c6,94ba5163d4c5..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -5886,6 -6542,17 +5886,20 @@@ static int sanitize_ptr_alu(struct bpf_
  	if (err < 0)
  		return err;
  do_sim:
++<<<<<<< HEAD
++=======
+ 	/* If we're in commit phase, we're done here given we already
+ 	 * pushed the truncated dst_reg into the speculative verification
+ 	 * stack.
+ 	 *
+ 	 * Also, when register is a known constant, we rewrite register-based
+ 	 * operation to immediate-based, and thus do not need masking (and as
+ 	 * a consequence, do not need to simulate the zero-truncation either).
+ 	 */
+ 	if (commit_window || off_is_imm)
+ 		return 0;
+ 
++>>>>>>> a7036191277f (bpf: No need to simulate speculative domain for immediates)
  	/* Simulate and find potential out-of-bounds access under
  	 * speculative execution from truncation as a result of
  	 * masking when off was not within expected range. If off
* Unmerged path kernel/bpf/verifier.c
