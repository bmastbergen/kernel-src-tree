crypto: aead - remove useless setting of type flags

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-338.el8
commit-author Eric Biggers <ebiggers@google.com>
commit 3f4a537a26a68600ed1439222fb5e5c3aa513c7a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-338.el8/3f4a537a.failed

Some aead algorithms set .cra_flags = CRYPTO_ALG_TYPE_AEAD.  But this is
redundant with the C structure type ('struct aead_alg'), and
crypto_register_aead() already sets the type flag automatically,
clearing any type flag that was already there.  Apparently the useless
assignment has just been copy+pasted around.

So, remove the useless assignment from all the aead algorithms.

This patch shouldn't change any actual behavior.

	Signed-off-by: Eric Biggers <ebiggers@google.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 3f4a537a26a68600ed1439222fb5e5c3aa513c7a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/inside-secure/safexcel_cipher.c
diff --cc drivers/crypto/inside-secure/safexcel_cipher.c
index 6bb60fda2043,19024500a895..000000000000
--- a/drivers/crypto/inside-secure/safexcel_cipher.c
+++ b/drivers/crypto/inside-secure/safexcel_cipher.c
@@@ -1022,3 -1267,73 +1022,76 @@@ struct safexcel_alg_template safexcel_a
  		},
  	},
  };
++<<<<<<< HEAD
++=======
+ 
+ static int safexcel_aead_sha512_cra_init(struct crypto_tfm *tfm)
+ {
+ 	struct safexcel_cipher_ctx *ctx = crypto_tfm_ctx(tfm);
+ 
+ 	safexcel_aead_cra_init(tfm);
+ 	ctx->hash_alg = CONTEXT_CONTROL_CRYPTO_ALG_SHA512;
+ 	ctx->state_sz = SHA512_DIGEST_SIZE;
+ 	return 0;
+ }
+ 
+ struct safexcel_alg_template safexcel_alg_authenc_hmac_sha512_cbc_aes = {
+ 	.type = SAFEXCEL_ALG_TYPE_AEAD,
+ 	.engines = EIP97IES | EIP197B | EIP197D,
+ 	.alg.aead = {
+ 		.setkey = safexcel_aead_aes_setkey,
+ 		.encrypt = safexcel_aead_encrypt,
+ 		.decrypt = safexcel_aead_decrypt,
+ 		.ivsize = AES_BLOCK_SIZE,
+ 		.maxauthsize = SHA512_DIGEST_SIZE,
+ 		.base = {
+ 			.cra_name = "authenc(hmac(sha512),cbc(aes))",
+ 			.cra_driver_name = "safexcel-authenc-hmac-sha512-cbc-aes",
+ 			.cra_priority = 300,
+ 			.cra_flags = CRYPTO_ALG_ASYNC |
+ 				     CRYPTO_ALG_KERN_DRIVER_ONLY,
+ 			.cra_blocksize = AES_BLOCK_SIZE,
+ 			.cra_ctxsize = sizeof(struct safexcel_cipher_ctx),
+ 			.cra_alignmask = 0,
+ 			.cra_init = safexcel_aead_sha512_cra_init,
+ 			.cra_exit = safexcel_aead_cra_exit,
+ 			.cra_module = THIS_MODULE,
+ 		},
+ 	},
+ };
+ 
+ static int safexcel_aead_sha384_cra_init(struct crypto_tfm *tfm)
+ {
+ 	struct safexcel_cipher_ctx *ctx = crypto_tfm_ctx(tfm);
+ 
+ 	safexcel_aead_cra_init(tfm);
+ 	ctx->hash_alg = CONTEXT_CONTROL_CRYPTO_ALG_SHA384;
+ 	ctx->state_sz = SHA512_DIGEST_SIZE;
+ 	return 0;
+ }
+ 
+ struct safexcel_alg_template safexcel_alg_authenc_hmac_sha384_cbc_aes = {
+ 	.type = SAFEXCEL_ALG_TYPE_AEAD,
+ 	.engines = EIP97IES | EIP197B | EIP197D,
+ 	.alg.aead = {
+ 		.setkey = safexcel_aead_aes_setkey,
+ 		.encrypt = safexcel_aead_encrypt,
+ 		.decrypt = safexcel_aead_decrypt,
+ 		.ivsize = AES_BLOCK_SIZE,
+ 		.maxauthsize = SHA384_DIGEST_SIZE,
+ 		.base = {
+ 			.cra_name = "authenc(hmac(sha384),cbc(aes))",
+ 			.cra_driver_name = "safexcel-authenc-hmac-sha384-cbc-aes",
+ 			.cra_priority = 300,
+ 			.cra_flags = CRYPTO_ALG_ASYNC |
+ 				     CRYPTO_ALG_KERN_DRIVER_ONLY,
+ 			.cra_blocksize = AES_BLOCK_SIZE,
+ 			.cra_ctxsize = sizeof(struct safexcel_cipher_ctx),
+ 			.cra_alignmask = 0,
+ 			.cra_init = safexcel_aead_sha384_cra_init,
+ 			.cra_exit = safexcel_aead_cra_exit,
+ 			.cra_module = THIS_MODULE,
+ 		},
+ 	},
+ };
++>>>>>>> 3f4a537a26a6 (crypto: aead - remove useless setting of type flags)
diff --git a/arch/s390/crypto/aes_s390.c b/arch/s390/crypto/aes_s390.c
index 83d5c2d9e597..5f1fcbc13c15 100644
--- a/arch/s390/crypto/aes_s390.c
+++ b/arch/s390/crypto/aes_s390.c
@@ -1107,7 +1107,6 @@ static struct aead_alg gcm_aes_aead = {
 	.chunksize		= AES_BLOCK_SIZE,
 
 	.base			= {
-		.cra_flags		= CRYPTO_ALG_TYPE_AEAD,
 		.cra_blocksize		= 1,
 		.cra_ctxsize		= sizeof(struct s390_aes_ctx),
 		.cra_priority		= 900,
diff --git a/crypto/aegis128.c b/crypto/aegis128.c
index 38271303ce16..c22f4414856d 100644
--- a/crypto/aegis128.c
+++ b/crypto/aegis128.c
@@ -429,7 +429,6 @@ static struct aead_alg crypto_aegis128_alg = {
 	.chunksize = AEGIS_BLOCK_SIZE,
 
 	.base = {
-		.cra_flags = CRYPTO_ALG_TYPE_AEAD,
 		.cra_blocksize = 1,
 		.cra_ctxsize = sizeof(struct aegis_ctx),
 		.cra_alignmask = 0,
diff --git a/crypto/aegis128l.c b/crypto/aegis128l.c
index 0cc1a7525c85..5d5f514cbd6f 100644
--- a/crypto/aegis128l.c
+++ b/crypto/aegis128l.c
@@ -493,7 +493,6 @@ static struct aead_alg crypto_aegis128l_alg = {
 	.chunksize = AEGIS128L_CHUNK_SIZE,
 
 	.base = {
-		.cra_flags = CRYPTO_ALG_TYPE_AEAD,
 		.cra_blocksize = 1,
 		.cra_ctxsize = sizeof(struct aegis_ctx),
 		.cra_alignmask = 0,
diff --git a/crypto/aegis256.c b/crypto/aegis256.c
index a489d741d33a..11f0f8ec9c7c 100644
--- a/crypto/aegis256.c
+++ b/crypto/aegis256.c
@@ -444,7 +444,6 @@ static struct aead_alg crypto_aegis256_alg = {
 	.chunksize = AEGIS_BLOCK_SIZE,
 
 	.base = {
-		.cra_flags = CRYPTO_ALG_TYPE_AEAD,
 		.cra_blocksize = 1,
 		.cra_ctxsize = sizeof(struct aegis_ctx),
 		.cra_alignmask = 0,
diff --git a/crypto/morus1280.c b/crypto/morus1280.c
index 6180b2557836..d057cf5ac4a8 100644
--- a/crypto/morus1280.c
+++ b/crypto/morus1280.c
@@ -514,7 +514,6 @@ static struct aead_alg crypto_morus1280_alg = {
 	.chunksize = MORUS1280_BLOCK_SIZE,
 
 	.base = {
-		.cra_flags = CRYPTO_ALG_TYPE_AEAD,
 		.cra_blocksize = 1,
 		.cra_ctxsize = sizeof(struct morus1280_ctx),
 		.cra_alignmask = 0,
diff --git a/crypto/morus640.c b/crypto/morus640.c
index 5eede3749e64..1ca76e54281b 100644
--- a/crypto/morus640.c
+++ b/crypto/morus640.c
@@ -511,7 +511,6 @@ static struct aead_alg crypto_morus640_alg = {
 	.chunksize = MORUS640_BLOCK_SIZE,
 
 	.base = {
-		.cra_flags = CRYPTO_ALG_TYPE_AEAD,
 		.cra_blocksize = 1,
 		.cra_ctxsize = sizeof(struct morus640_ctx),
 		.cra_alignmask = 0,
diff --git a/drivers/crypto/axis/artpec6_crypto.c b/drivers/crypto/axis/artpec6_crypto.c
index 0fb8bbf41a8d..f7b56dea1793 100644
--- a/drivers/crypto/axis/artpec6_crypto.c
+++ b/drivers/crypto/axis/artpec6_crypto.c
@@ -2964,7 +2964,7 @@ static struct aead_alg aead_algos[] = {
 			.cra_name = "gcm(aes)",
 			.cra_driver_name = "artpec-gcm-aes",
 			.cra_priority = 300,
-			.cra_flags = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_ASYNC |
+			.cra_flags = CRYPTO_ALG_ASYNC |
 				     CRYPTO_ALG_KERN_DRIVER_ONLY,
 			.cra_blocksize = 1,
 			.cra_ctxsize = sizeof(struct artpec6_cryptotfm_context),
diff --git a/drivers/crypto/bcm/cipher.c b/drivers/crypto/bcm/cipher.c
index 035f3b8c059b..dbfab4142322 100644
--- a/drivers/crypto/bcm/cipher.c
+++ b/drivers/crypto/bcm/cipher.c
@@ -4705,7 +4705,7 @@ static int spu_register_aead(struct iproc_alg_s *driver_alg)
 	aead->base.cra_ctxsize = sizeof(struct iproc_ctx_s);
 	INIT_LIST_HEAD(&aead->base.cra_list);
 
-	aead->base.cra_flags |= CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_ASYNC;
+	aead->base.cra_flags |= CRYPTO_ALG_ASYNC;
 	/* setkey set in alg initialization */
 	aead->setauthsize = aead_setauthsize;
 	aead->encrypt = aead_encrypt;
diff --git a/drivers/crypto/chelsio/chcr_algo.c b/drivers/crypto/chelsio/chcr_algo.c
index d62afc4ebccc..cf0912b0bae5 100644
--- a/drivers/crypto/chelsio/chcr_algo.c
+++ b/drivers/crypto/chelsio/chcr_algo.c
@@ -4441,8 +4441,7 @@ static int chcr_register_alg(void)
 			break;
 		case CRYPTO_ALG_TYPE_AEAD:
 			driver_algs[i].alg.aead.base.cra_flags =
-				CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_ASYNC |
-				CRYPTO_ALG_NEED_FALLBACK;
+				CRYPTO_ALG_ASYNC | CRYPTO_ALG_NEED_FALLBACK;
 			driver_algs[i].alg.aead.encrypt = chcr_aead_encrypt;
 			driver_algs[i].alg.aead.decrypt = chcr_aead_decrypt;
 			driver_algs[i].alg.aead.init = chcr_aead_cra_init;
* Unmerged path drivers/crypto/inside-secure/safexcel_cipher.c
