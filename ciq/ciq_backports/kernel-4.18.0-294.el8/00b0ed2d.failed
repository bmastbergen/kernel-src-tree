locking/lockdep: Cleanup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 00b0ed2d4997af6d0a93edef820386951fd66d94
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/00b0ed2d.failed

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Tested-by: Marco Elver <elver@google.com>
Link: https://lkml.kernel.org/r/20200821085348.546087214@infradead.org
(cherry picked from commit 00b0ed2d4997af6d0a93edef820386951fd66d94)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/irqflags.h
diff --cc include/linux/irqflags.h
index b53a9f136087,00d553d77911..000000000000
--- a/include/linux/irqflags.h
+++ b/include/linux/irqflags.h
@@@ -14,22 -14,56 +14,55 @@@
  
  #include <linux/typecheck.h>
  #include <asm/irqflags.h>
 -#include <asm/percpu.h>
 -
 -/* Currently lockdep_softirqs_on/off is used only by lockdep */
 -#ifdef CONFIG_PROVE_LOCKING
 -  extern void lockdep_softirqs_on(unsigned long ip);
 -  extern void lockdep_softirqs_off(unsigned long ip);
 -  extern void lockdep_hardirqs_on_prepare(unsigned long ip);
 -  extern void lockdep_hardirqs_on(unsigned long ip);
 -  extern void lockdep_hardirqs_off(unsigned long ip);
 -#else
 -  static inline void lockdep_softirqs_on(unsigned long ip) { }
 -  static inline void lockdep_softirqs_off(unsigned long ip) { }
 -  static inline void lockdep_hardirqs_on_prepare(unsigned long ip) { }
 -  static inline void lockdep_hardirqs_on(unsigned long ip) { }
 -  static inline void lockdep_hardirqs_off(unsigned long ip) { }
 -#endif
  
  #ifdef CONFIG_TRACE_IRQFLAGS
++<<<<<<< HEAD
 +  extern void trace_softirqs_on(unsigned long ip);
 +  extern void trace_softirqs_off(unsigned long ip);
 +  extern void trace_hardirqs_on(void);
 +  extern void trace_hardirqs_off(void);
 +# define trace_hardirq_context(p)	((p)->hardirq_context)
 +# define trace_softirq_context(p)	((p)->softirq_context)
 +# define trace_hardirqs_enabled(p)	((p)->hardirqs_enabled)
 +# define trace_softirqs_enabled(p)	((p)->softirqs_enabled)
 +# define trace_hardirq_enter()			\
 +do {						\
 +	if (!current->hardirq_context++)	\
 +		current->hardirq_threaded = 0;	\
++=======
+ 
+ /* Per-task IRQ trace events information. */
+ struct irqtrace_events {
+ 	unsigned int	irq_events;
+ 	unsigned long	hardirq_enable_ip;
+ 	unsigned long	hardirq_disable_ip;
+ 	unsigned int	hardirq_enable_event;
+ 	unsigned int	hardirq_disable_event;
+ 	unsigned long	softirq_disable_ip;
+ 	unsigned long	softirq_enable_ip;
+ 	unsigned int	softirq_disable_event;
+ 	unsigned int	softirq_enable_event;
+ };
+ 
+ DECLARE_PER_CPU(int, hardirqs_enabled);
+ DECLARE_PER_CPU(int, hardirq_context);
+ 
+ extern void trace_hardirqs_on_prepare(void);
+ extern void trace_hardirqs_off_finish(void);
+ extern void trace_hardirqs_on(void);
+ extern void trace_hardirqs_off(void);
+ 
+ # define lockdep_hardirq_context()	(raw_cpu_read(hardirq_context))
+ # define lockdep_softirq_context(p)	((p)->softirq_context)
+ # define lockdep_hardirqs_enabled()	(this_cpu_read(hardirqs_enabled))
+ # define lockdep_softirqs_enabled(p)	((p)->softirqs_enabled)
+ # define lockdep_hardirq_enter()			\
+ do {							\
+ 	if (__this_cpu_inc_return(hardirq_context) == 1)\
+ 		current->hardirq_threaded = 0;		\
++>>>>>>> 00b0ed2d4997 (locking/lockdep: Cleanup)
  } while (0)
 -# define lockdep_hardirq_threaded()		\
 +# define trace_hardirq_threaded()		\
  do {						\
  	current->hardirq_threaded = 1;		\
  } while (0)
@@@ -85,19 -119,19 +118,35 @@@ do {						
  	  } while (0)
  
  #else
++<<<<<<< HEAD
 +# define trace_hardirqs_on()		do { } while (0)
 +# define trace_hardirqs_off()		do { } while (0)
 +# define trace_softirqs_on(ip)		do { } while (0)
 +# define trace_softirqs_off(ip)		do { } while (0)
 +# define trace_hardirq_context(p)	0
 +# define trace_softirq_context(p)	0
 +# define trace_hardirqs_enabled(p)	0
 +# define trace_softirqs_enabled(p)	0
 +# define trace_hardirq_enter()		do { } while (0)
 +# define trace_hardirq_threaded()	do { } while (0)
 +# define trace_hardirq_exit()		do { } while (0)
 +# define lockdep_softirq_enter()	do { } while (0)
 +# define lockdep_softirq_exit()		do { } while (0)
++=======
+ # define trace_hardirqs_on_prepare()		do { } while (0)
+ # define trace_hardirqs_off_finish()		do { } while (0)
+ # define trace_hardirqs_on()			do { } while (0)
+ # define trace_hardirqs_off()			do { } while (0)
+ # define lockdep_hardirq_context()		0
+ # define lockdep_softirq_context(p)		0
+ # define lockdep_hardirqs_enabled()		0
+ # define lockdep_softirqs_enabled(p)		0
+ # define lockdep_hardirq_enter()		do { } while (0)
+ # define lockdep_hardirq_threaded()		do { } while (0)
+ # define lockdep_hardirq_exit()			do { } while (0)
+ # define lockdep_softirq_enter()		do { } while (0)
+ # define lockdep_softirq_exit()			do { } while (0)
++>>>>>>> 00b0ed2d4997 (locking/lockdep: Cleanup)
  # define lockdep_hrtimer_enter(__hrtimer)	false
  # define lockdep_hrtimer_exit(__context)	do { } while (0)
  # define lockdep_posixtimer_enter()		do { } while (0)
* Unmerged path include/linux/irqflags.h
