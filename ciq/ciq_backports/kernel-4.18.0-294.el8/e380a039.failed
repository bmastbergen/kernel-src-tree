x86/PCI: sta2x11: use default DMA address translation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
commit e380a0394c36a3a878c858418d5dd7f5f195b6fc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e380a039.failed

The devices found behind this PCIe chip have unusual DMA mapping
constraints as there is an AMBA interconnect placed in between them and
the different PCI endpoints. The offset between physical memory
addresses and AMBA's view is provided by reading a PCI config register,
which is saved and used whenever DMA mapping is needed.

It turns out that this DMA setup can be represented by properly setting
'dma_pfn_offset', 'dma_bus_mask' and 'dma_mask' during the PCI device
enable fixup. And ultimately allows us to get rid of this device's
custom DMA functions.

Aside from the code deletion and DMA setup, sta2x11_pdev_to_mapping() is
moved to avoid warnings whenever CONFIG_PM is not enabled.

	Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit e380a0394c36a3a878c858418d5dd7f5f195b6fc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/pci/sta2x11-fixup.c
diff --cc arch/x86/pci/sta2x11-fixup.c
index 7a5bafb76d77,4a631264b809..000000000000
--- a/arch/x86/pci/sta2x11-fixup.c
+++ b/arch/x86/pci/sta2x11-fixup.c
@@@ -166,10 -105,6 +120,13 @@@ static void sta2x11_setup_pdev(struct p
  
  	if (!instance) /* either a sta2x11 bridge or another ST device */
  		return;
++<<<<<<< HEAD
 +	pci_set_consistent_dma_mask(pdev, STA2X11_AMBA_SIZE - 1);
 +	pci_set_dma_mask(pdev, STA2X11_AMBA_SIZE - 1);
 +	pdev->dev.dma_ops = &swiotlb_dma_ops;
 +	pdev->dev.archdata.is_sta2x11 = true;
++=======
++>>>>>>> e380a0394c36 (x86/PCI: sta2x11: use default DMA address translation)
  
  	/* We must enable all devices as master, for audio DMA to work */
  	pci_set_master(pdev);
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index db4dfad49e4f..212075296b65 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -714,7 +714,6 @@ config X86_SUPPORTS_MEMORY_FAILURE
 config STA2X11
 	bool "STA2X11 Companion Chip Support"
 	depends on X86_32_NON_STANDARD && PCI
-	select ARCH_HAS_PHYS_TO_DMA
 	select SWIOTLB
 	select MFD_STA2X11
 	select GPIOLIB
diff --git a/arch/x86/include/asm/device.h b/arch/x86/include/asm/device.h
index 251eefdcb60a..c0d60f8b069a 100644
--- a/arch/x86/include/asm/device.h
+++ b/arch/x86/include/asm/device.h
@@ -6,9 +6,6 @@ struct dev_archdata {
 #ifdef CONFIG_IOMMU_API
 	void *iommu; /* hook for IOMMU specific extension */
 #endif
-#ifdef CONFIG_STA2X11
-	bool is_sta2x11;
-#endif
 };
 
 #if defined(CONFIG_X86_DEV_DMA_OPS) && defined(CONFIG_PCI_DOMAINS)
diff --git a/arch/x86/include/asm/dma-direct.h b/arch/x86/include/asm/dma-direct.h
deleted file mode 100644
index 1a19251eaac9..000000000000
--- a/arch/x86/include/asm/dma-direct.h
+++ /dev/null
@@ -1,9 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-#ifndef ASM_X86_DMA_DIRECT_H
-#define ASM_X86_DMA_DIRECT_H 1
-
-bool dma_capable(struct device *dev, dma_addr_t addr, size_t size);
-dma_addr_t __phys_to_dma(struct device *dev, phys_addr_t paddr);
-phys_addr_t __dma_to_phys(struct device *dev, dma_addr_t daddr);
-
-#endif /* ASM_X86_DMA_DIRECT_H */
* Unmerged path arch/x86/pci/sta2x11-fixup.c
