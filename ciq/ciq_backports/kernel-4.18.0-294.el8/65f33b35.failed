block: fix incorrect branching in blk_max_size_offset()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mike Snitzer <snitzer@redhat.com>
commit 65f33b35722952fa076811d5686bfd8a611a80fa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/65f33b35.failed

If non-zero 'chunk_sectors' is passed in to blk_max_size_offset() that
override will be incorrectly ignored.

Old blk_max_size_offset() branching, prior to commit 3ee16db390b4,
must be used only if passed 'chunk_sectors' override is zero.

Fixes: 3ee16db390b4 ("dm: fix IO splitting")
	Cc: stable@vger.kernel.org # 5.9
	Reported-by: John Dorminy <jdorminy@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 65f33b35722952fa076811d5686bfd8a611a80fa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/blkdev.h
diff --cc include/linux/blkdev.h
index 43b1486e0588,033eb5f73b65..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -1043,12 -1073,15 +1043,21 @@@ static inline unsigned int blk_queue_ge
   * file system requests.
   */
  static inline unsigned int blk_max_size_offset(struct request_queue *q,
 -					       sector_t offset,
 -					       unsigned int chunk_sectors)
 +					       sector_t offset)
  {
++<<<<<<< HEAD
 +	unsigned int chunk_sectors = q->limits.chunk_sectors;
 +
 +	if (!chunk_sectors)
 +		return q->limits.max_sectors;
++=======
+ 	if (!chunk_sectors) {
+ 		if (q->limits.chunk_sectors)
+ 			chunk_sectors = q->limits.chunk_sectors;
+ 		else
+ 			return q->limits.max_sectors;
+ 	}
++>>>>>>> 65f33b357229 (block: fix incorrect branching in blk_max_size_offset())
  
  	if (likely(is_power_of_2(chunk_sectors)))
  		chunk_sectors -= offset & (chunk_sectors - 1);
* Unmerged path include/linux/blkdev.h
