bpf: Delete repeated words in comments

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Randy Dunlap <rdunlap@infradead.org>
commit b8c1a3090741f349322ad855d2b66d6e9752a60d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b8c1a309.failed

Drop repeated words in kernel/bpf/: {has, the}

	Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20200807033141.10437-1-rdunlap@infradead.org
(cherry picked from commit b8c1a3090741f349322ad855d2b66d6e9752a60d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/core.c
diff --cc kernel/bpf/core.c
index 807b973cb465,ed0b3578867c..000000000000
--- a/kernel/bpf/core.c
+++ b/kernel/bpf/core.c
@@@ -1963,6 -1958,61 +1963,64 @@@ void bpf_prog_array_delete_safe(struct 
  		}
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * bpf_prog_array_delete_safe_at() - Replaces the program at the given
+  *                                   index into the program array with
+  *                                   a dummy no-op program.
+  * @array: a bpf_prog_array
+  * @index: the index of the program to replace
+  *
+  * Skips over dummy programs, by not counting them, when calculating
+  * the position of the program to replace.
+  *
+  * Return:
+  * * 0		- Success
+  * * -EINVAL	- Invalid index value. Must be a non-negative integer.
+  * * -ENOENT	- Index out of range
+  */
+ int bpf_prog_array_delete_safe_at(struct bpf_prog_array *array, int index)
+ {
+ 	return bpf_prog_array_update_at(array, index, &dummy_bpf_prog.prog);
+ }
+ 
+ /**
+  * bpf_prog_array_update_at() - Updates the program at the given index
+  *                              into the program array.
+  * @array: a bpf_prog_array
+  * @index: the index of the program to update
+  * @prog: the program to insert into the array
+  *
+  * Skips over dummy programs, by not counting them, when calculating
+  * the position of the program to update.
+  *
+  * Return:
+  * * 0		- Success
+  * * -EINVAL	- Invalid index value. Must be a non-negative integer.
+  * * -ENOENT	- Index out of range
+  */
+ int bpf_prog_array_update_at(struct bpf_prog_array *array, int index,
+ 			     struct bpf_prog *prog)
+ {
+ 	struct bpf_prog_array_item *item;
+ 
+ 	if (unlikely(index < 0))
+ 		return -EINVAL;
+ 
+ 	for (item = array->items; item->prog; item++) {
+ 		if (item->prog == &dummy_bpf_prog.prog)
+ 			continue;
+ 		if (!index) {
+ 			WRITE_ONCE(item->prog, prog);
+ 			return 0;
+ 		}
+ 		index--;
+ 	}
+ 	return -ENOENT;
+ }
+ 
++>>>>>>> b8c1a3090741 (bpf: Delete repeated words in comments)
  int bpf_prog_array_copy(struct bpf_prog_array *old_array,
  			struct bpf_prog *exclude_prog,
  			struct bpf_prog *include_prog,
* Unmerged path kernel/bpf/core.c
diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c
index b8aec186e303..bddb262cde8c 100644
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -8025,7 +8025,7 @@ static bool stacksafe(struct bpf_func_state *old,
 		if (old->stack[spi].slot_type[i % BPF_REG_SIZE] !=
 		    cur->stack[spi].slot_type[i % BPF_REG_SIZE])
 			/* Ex: old explored (safe) state has STACK_SPILL in
-			 * this stack slot, but current has has STACK_MISC ->
+			 * this stack slot, but current has STACK_MISC ->
 			 * this verifier states are not equivalent,
 			 * return false to continue verification of this path
 			 */
