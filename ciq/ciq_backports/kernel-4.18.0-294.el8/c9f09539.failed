x86/head/64: Check SEV encryption before switching to kernel page-table

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] head/64: Check SEV encryption before switching to kernel page-table (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 97.10%
commit-author Joerg Roedel <jroedel@suse.de>
commit c9f09539e16e281f92a27760fdfae71e8af036f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c9f09539.failed

When SEV is enabled, the kernel requests the C-bit position again from
the hypervisor to build its own page-table. Since the hypervisor is an
untrusted source, the C-bit position needs to be verified before the
kernel page-table is used.

Call sev_verify_cbit() before writing the CR3.

 [ bp: Massage. ]

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
Link: https://lkml.kernel.org/r/20201028164659.27002-5-joro@8bytes.org
(cherry picked from commit c9f09539e16e281f92a27760fdfae71e8af036f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/mem_encrypt.c
diff --cc arch/x86/mm/mem_encrypt.c
index 0d3e133cbb17,bc0833713be9..000000000000
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@@ -40,8 -37,9 +40,14 @@@
   * reside in the .data section so as not to be zeroed out when the .bss
   * section is later cleared.
   */
++<<<<<<< HEAD
 +u64 sme_me_mask __section(.data) = 0;
 +u64 sev_status __section(.data) = 0;
++=======
+ u64 sme_me_mask __section(".data") = 0;
+ u64 sev_status __section(".data") = 0;
+ u64 sev_check_data __section(".data") = 0;
++>>>>>>> c9f09539e16e (x86/head/64: Check SEV encryption before switching to kernel page-table)
  EXPORT_SYMBOL(sme_me_mask);
  DEFINE_STATIC_KEY_FALSE(sev_enable_key);
  EXPORT_SYMBOL_GPL(sev_enable_key);
diff --git a/arch/x86/kernel/head_64.S b/arch/x86/kernel/head_64.S
index f62d1d12a0aa..8d329bc8cc84 100644
--- a/arch/x86/kernel/head_64.S
+++ b/arch/x86/kernel/head_64.S
@@ -135,6 +135,21 @@ ENTRY(secondary_startup_64)
 
 	/* Setup early boot stage 4-/5-level pagetables. */
 	addq	phys_base(%rip), %rax
+
+	/*
+	 * For SEV guests: Verify that the C-bit is correct. A malicious
+	 * hypervisor could lie about the C-bit position to perform a ROP
+	 * attack on the guest by writing to the unencrypted stack and wait for
+	 * the next RET instruction.
+	 * %rsi carries pointer to realmode data and is callee-clobbered. Save
+	 * and restore it.
+	 */
+	pushq	%rsi
+	movq	%rax, %rdi
+	call	sev_verify_cbit
+	popq	%rsi
+
+	/* Switch to new page-table */
 	movq	%rax, %cr3
 
 	/* Ensure I am executing from virtual addresses */
@@ -248,6 +263,7 @@ ENTRY(secondary_startup_64)
 END(secondary_startup_64)
 
 #include "verify_cpu.S"
+#include "sev_verify_cbit.S"
 
 #ifdef CONFIG_HOTPLUG_CPU
 /*
* Unmerged path arch/x86/mm/mem_encrypt.c
