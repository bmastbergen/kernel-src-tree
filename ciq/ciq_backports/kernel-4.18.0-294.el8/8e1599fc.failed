x86/traps: Complete prototype declarations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Borislav Petkov <bp@suse.de>
commit 8e1599fcac2efda8b7d433ef69d2492f0b351e3f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/8e1599fc.failed

... with proper variable names.

No functional changes.

	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: <x86@kernel.org>
Link: https://lkml.kernel.org/r/20181110141647.GA20073@zn.tnic
(cherry picked from commit 8e1599fcac2efda8b7d433ef69d2492f0b351e3f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/traps.h
diff --cc arch/x86/include/asm/traps.h
index 0ae298ea01a1,877afdedbbc5..000000000000
--- a/arch/x86/include/asm/traps.h
+++ b/arch/x86/include/asm/traps.h
@@@ -61,38 -61,34 +61,42 @@@ asmlinkage void xen_machine_check(void)
  asmlinkage void xen_simd_coprocessor_error(void);
  #endif
  
- dotraplinkage void do_divide_error(struct pt_regs *, long);
- dotraplinkage void do_debug(struct pt_regs *, long);
- dotraplinkage void do_nmi(struct pt_regs *, long);
- dotraplinkage void do_int3(struct pt_regs *, long);
- dotraplinkage void do_overflow(struct pt_regs *, long);
- dotraplinkage void do_bounds(struct pt_regs *, long);
- dotraplinkage void do_invalid_op(struct pt_regs *, long);
- dotraplinkage void do_device_not_available(struct pt_regs *, long);
- dotraplinkage void do_coprocessor_segment_overrun(struct pt_regs *, long);
- dotraplinkage void do_invalid_TSS(struct pt_regs *, long);
- dotraplinkage void do_segment_not_present(struct pt_regs *, long);
- dotraplinkage void do_stack_segment(struct pt_regs *, long);
+ dotraplinkage void do_divide_error(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_debug(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_nmi(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_int3(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_overflow(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_bounds(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_invalid_op(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_device_not_available(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_coprocessor_segment_overrun(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_invalid_TSS(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_segment_not_present(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_stack_segment(struct pt_regs *regs, long error_code);
  #ifdef CONFIG_X86_64
++<<<<<<< HEAD
 +dotraplinkage void do_double_fault(struct pt_regs *, long);
 +asmlinkage __visible notrace struct pt_regs *sync_regs(struct pt_regs *eregs);
 +asmlinkage __visible notrace
 +struct bad_iret_stack *fixup_bad_iret(struct bad_iret_stack *s);
 +void __init trap_init(void);
++=======
+ dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code);
++>>>>>>> 8e1599fcac2e (x86/traps: Complete prototype declarations)
  #endif
- dotraplinkage void do_general_protection(struct pt_regs *, long);
- dotraplinkage void do_page_fault(struct pt_regs *, unsigned long);
- dotraplinkage void do_spurious_interrupt_bug(struct pt_regs *, long);
- dotraplinkage void do_coprocessor_error(struct pt_regs *, long);
- dotraplinkage void do_alignment_check(struct pt_regs *, long);
+ dotraplinkage void do_general_protection(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_page_fault(struct pt_regs *regs, unsigned long error_code);
+ dotraplinkage void do_spurious_interrupt_bug(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_coprocessor_error(struct pt_regs *regs, long error_code);
+ dotraplinkage void do_alignment_check(struct pt_regs *regs, long error_code);
  #ifdef CONFIG_X86_MCE
- dotraplinkage void do_machine_check(struct pt_regs *, long);
+ dotraplinkage void do_machine_check(struct pt_regs *regs, long error_code);
  #endif
- dotraplinkage void do_simd_coprocessor_error(struct pt_regs *, long);
+ dotraplinkage void do_simd_coprocessor_error(struct pt_regs *regs, long error_code);
  #ifdef CONFIG_X86_32
- dotraplinkage void do_iret_error(struct pt_regs *, long);
+ dotraplinkage void do_iret_error(struct pt_regs *regs, long error_code);
  #endif
- dotraplinkage void do_mce(struct pt_regs *, long);
+ dotraplinkage void do_mce(struct pt_regs *regs, long error_code);
  
  static inline int get_si_code(unsigned long condition)
  {
* Unmerged path arch/x86/include/asm/traps.h
