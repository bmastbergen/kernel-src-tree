mptcp: drop rm_addr_signal flag

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Geliang Tang <geliangtang@gmail.com>
commit 42842a425ad6d1ef1087b63486879a6d54b26893
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/42842a42.failed

This patch reused add_addr_signal for the RM_ADDR announcing signal, by
defining a new ADD_ADDR status named MPTCP_RM_ADDR_SIGNAL. Then the flag
rm_addr_signal in PM could be dropped.

	Signed-off-by: Geliang Tang <geliangtang@gmail.com>
	Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 42842a425ad6d1ef1087b63486879a6d54b26893)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/pm.c
#	net/mptcp/protocol.h
diff --cc net/mptcp/pm.c
index a78fc80f9b51,09d6e736161d..000000000000
--- a/net/mptcp/pm.c
+++ b/net/mptcp/pm.c
@@@ -15,23 -13,55 +15,44 @@@ static struct workqueue_struct *pm_wq
  /* path manager command handlers */
  
  int mptcp_pm_announce_addr(struct mptcp_sock *msk,
 -			   const struct mptcp_addr_info *addr,
 -			   bool echo, bool port)
 +			   const struct mptcp_addr_info *addr)
  {
 -	u8 add_addr = READ_ONCE(msk->pm.add_addr_signal);
 -
  	pr_debug("msk=%p, local_id=%d", msk, addr->id);
  
+ 	if (add_addr) {
+ 		pr_warn("addr_signal error, add_addr=%d", add_addr);
+ 		return -EINVAL;
+ 	}
+ 
  	msk->pm.local = *addr;
 -	add_addr |= BIT(MPTCP_ADD_ADDR_SIGNAL);
 -	if (echo)
 -		add_addr |= BIT(MPTCP_ADD_ADDR_ECHO);
 -	if (addr->family == AF_INET6)
 -		add_addr |= BIT(MPTCP_ADD_ADDR_IPV6);
 -	if (port)
 -		add_addr |= BIT(MPTCP_ADD_ADDR_PORT);
 -	WRITE_ONCE(msk->pm.add_addr_signal, add_addr);
 +	WRITE_ONCE(msk->pm.add_addr_signal, true);
  	return 0;
  }
  
  int mptcp_pm_remove_addr(struct mptcp_sock *msk, u8 local_id)
  {
++<<<<<<< HEAD
 +	return -ENOTSUPP;
++=======
+ 	u8 rm_addr = READ_ONCE(msk->pm.add_addr_signal);
+ 
+ 	pr_debug("msk=%p, local_id=%d", msk, local_id);
+ 
+ 	if (rm_addr) {
+ 		pr_warn("addr_signal error, rm_addr=%d", rm_addr);
+ 		return -EINVAL;
+ 	}
+ 
+ 	msk->pm.rm_id = local_id;
+ 	rm_addr |= BIT(MPTCP_RM_ADDR_SIGNAL);
+ 	WRITE_ONCE(msk->pm.add_addr_signal, rm_addr);
+ 	return 0;
++>>>>>>> 42842a425ad6 (mptcp: drop rm_addr_signal flag)
  }
  
 -int mptcp_pm_remove_subflow(struct mptcp_sock *msk, u8 local_id)
 +int mptcp_pm_remove_subflow(struct mptcp_sock *msk, u8 remote_id)
  {
 -	pr_debug("msk=%p, local_id=%d", msk, local_id);
 -
 -	spin_lock_bh(&msk->pm.lock);
 -	mptcp_pm_nl_rm_subflow_received(msk, local_id);
 -	spin_unlock_bh(&msk->pm.lock);
 -	return 0;
 +	return -ENOTSUPP;
  }
  
  /* path manager event handlers */
@@@ -170,7 -221,30 +191,34 @@@ bool mptcp_pm_add_addr_signal(struct mp
  		goto out_unlock;
  
  	*saddr = msk->pm.local;
++<<<<<<< HEAD
 +	WRITE_ONCE(msk->pm.add_addr_signal, false);
++=======
+ 	WRITE_ONCE(msk->pm.add_addr_signal, 0);
+ 	ret = true;
+ 
+ out_unlock:
+ 	spin_unlock_bh(&msk->pm.lock);
+ 	return ret;
+ }
+ 
+ bool mptcp_pm_rm_addr_signal(struct mptcp_sock *msk, unsigned int remaining,
+ 			     u8 *rm_id)
+ {
+ 	int ret = false;
+ 
+ 	spin_lock_bh(&msk->pm.lock);
+ 
+ 	/* double check after the lock is acquired */
+ 	if (!mptcp_pm_should_rm_signal(msk))
+ 		goto out_unlock;
+ 
+ 	if (remaining < TCPOLEN_MPTCP_RM_ADDR_BASE)
+ 		goto out_unlock;
+ 
+ 	*rm_id = msk->pm.rm_id;
+ 	WRITE_ONCE(msk->pm.add_addr_signal, 0);
++>>>>>>> 42842a425ad6 (mptcp: drop rm_addr_signal flag)
  	ret = true;
  
  out_unlock:
@@@ -218,8 -263,9 +266,12 @@@ void mptcp_pm_data_init(struct mptcp_so
  	msk->pm.add_addr_accepted = 0;
  	msk->pm.local_addr_used = 0;
  	msk->pm.subflows = 0;
 -	msk->pm.rm_id = 0;
  	WRITE_ONCE(msk->pm.work_pending, false);
++<<<<<<< HEAD
 +	WRITE_ONCE(msk->pm.add_addr_signal, false);
++=======
+ 	WRITE_ONCE(msk->pm.add_addr_signal, 0);
++>>>>>>> 42842a425ad6 (mptcp: drop rm_addr_signal flag)
  	WRITE_ONCE(msk->pm.accept_addr, false);
  	WRITE_ONCE(msk->pm.accept_subflow, false);
  	msk->pm.status = 0;
diff --cc net/mptcp/protocol.h
index ec3d81e5cc62,f002c12beb98..000000000000
--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@@ -161,13 -168,22 +161,28 @@@ enum mptcp_pm_status 
  	MPTCP_PM_SUBFLOW_ESTABLISHED,
  };
  
++<<<<<<< HEAD
++=======
+ enum mptcp_add_addr_status {
+ 	MPTCP_ADD_ADDR_SIGNAL,
+ 	MPTCP_ADD_ADDR_ECHO,
+ 	MPTCP_ADD_ADDR_IPV6,
+ 	MPTCP_ADD_ADDR_PORT,
+ 	MPTCP_RM_ADDR_SIGNAL,
+ };
+ 
++>>>>>>> 42842a425ad6 (mptcp: drop rm_addr_signal flag)
  struct mptcp_pm_data {
  	struct mptcp_addr_info local;
  	struct mptcp_addr_info remote;
  
  	spinlock_t	lock;		/*protects the whole PM data */
  
++<<<<<<< HEAD
 +	bool		add_addr_signal;
++=======
+ 	u8		add_addr_signal;
++>>>>>>> 42842a425ad6 (mptcp: drop rm_addr_signal flag)
  	bool		server_side;
  	bool		work_pending;
  	bool		accept_addr;
@@@ -447,14 -558,41 +462,47 @@@ int mptcp_pm_remove_subflow(struct mptc
  
  static inline bool mptcp_pm_should_add_signal(struct mptcp_sock *msk)
  {
 -	return READ_ONCE(msk->pm.add_addr_signal) & BIT(MPTCP_ADD_ADDR_SIGNAL);
 +	return READ_ONCE(msk->pm.add_addr_signal);
  }
  
 -static inline bool mptcp_pm_should_add_signal_echo(struct mptcp_sock *msk)
 +static inline unsigned int mptcp_add_addr_len(int family)
  {
++<<<<<<< HEAD
 +	if (family == AF_INET)
 +		return TCPOLEN_MPTCP_ADD_ADDR;
 +	return TCPOLEN_MPTCP_ADD_ADDR6;
++=======
+ 	return READ_ONCE(msk->pm.add_addr_signal) & BIT(MPTCP_ADD_ADDR_ECHO);
+ }
+ 
+ static inline bool mptcp_pm_should_add_signal_ipv6(struct mptcp_sock *msk)
+ {
+ 	return READ_ONCE(msk->pm.add_addr_signal) & BIT(MPTCP_ADD_ADDR_IPV6);
+ }
+ 
+ static inline bool mptcp_pm_should_add_signal_port(struct mptcp_sock *msk)
+ {
+ 	return READ_ONCE(msk->pm.add_addr_signal) & BIT(MPTCP_ADD_ADDR_PORT);
+ }
+ 
+ static inline bool mptcp_pm_should_rm_signal(struct mptcp_sock *msk)
+ {
+ 	return READ_ONCE(msk->pm.add_addr_signal) & BIT(MPTCP_RM_ADDR_SIGNAL);
+ }
+ 
+ static inline unsigned int mptcp_add_addr_len(int family, bool echo, bool port)
+ {
+ 	u8 len = TCPOLEN_MPTCP_ADD_ADDR_BASE;
+ 
+ 	if (family == AF_INET6)
+ 		len = TCPOLEN_MPTCP_ADD_ADDR6_BASE;
+ 	if (!echo)
+ 		len += MPTCPOPT_THMAC_LEN;
+ 	if (port)
+ 		len += TCPOLEN_MPTCP_PORT_LEN;
+ 
+ 	return len;
++>>>>>>> 42842a425ad6 (mptcp: drop rm_addr_signal flag)
  }
  
  bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, unsigned int remaining,
* Unmerged path net/mptcp/pm.c
* Unmerged path net/mptcp/protocol.h
