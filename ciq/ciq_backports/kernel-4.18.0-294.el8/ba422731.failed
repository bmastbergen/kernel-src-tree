mm/mmu_notifier: mm/rmap.c: Fix a mmu_notifier range bug in try_to_unmap_one

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit ba422731316dde1e22dcc84b83c7349dc0ce1c3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ba422731.failed

The conversion to use a structure for mmu_notifier_invalidate_range_*()
unintentionally changed the usage in try_to_unmap_one() to init the
'struct mmu_notifier_range' with vma->vm_start instead of @address,
i.e. it invalidates the wrong address range.  Revert to the correct
address range.

Manifests as KVM use-after-free WARNINGs and subsequent "BUG: Bad page
state in process X" errors when reclaiming from a KVM guest due to KVM
removing the wrong pages from its own mappings.

	Reported-by: leozinho29_eu@hotmail.com
	Reported-by: Mike Galbraith <efault@gmx.de>
Reported-and-tested-by: Adam Borowski <kilobyte@angband.pl>
	Reviewed-by: Jérôme Glisse <jglisse@redhat.com>
	Reviewed-by: Pankaj gupta <pagupta@redhat.com>
	Cc: Christian König <christian.koenig@amd.com>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Matthew Wilcox <mawilcox@microsoft.com>
	Cc: Ross Zwisler <zwisler@kernel.org>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Radim Krčmář <rkrcmar@redhat.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Felix Kuehling <felix.kuehling@amd.com>
	Cc: Ralph Campbell <rcampbell@nvidia.com>
	Cc: John Hubbard <jhubbard@nvidia.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
Fixes: ac46d4f3c432 ("mm/mmu_notifier: use structure for invalidate_range_start/end calls v2")
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ba422731316dde1e22dcc84b83c7349dc0ce1c3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/rmap.c
diff --cc mm/rmap.c
index 4ca7a0db9645,0454ecc29537..000000000000
--- a/mm/rmap.c
+++ b/mm/rmap.c
@@@ -1375,7 -1371,9 +1375,13 @@@ static bool try_to_unmap_one(struct pag
  	 * Note that the page can not be free in this function as call of
  	 * try_to_unmap() must hold a reference on the page.
  	 */
++<<<<<<< HEAD
 +	end = min(vma->vm_end, start + (PAGE_SIZE << compound_order(page)));
++=======
+ 	mmu_notifier_range_init(&range, vma->vm_mm, address,
+ 				min(vma->vm_end, address +
+ 				    (PAGE_SIZE << compound_order(page))));
++>>>>>>> ba422731316d (mm/mmu_notifier: mm/rmap.c: Fix a mmu_notifier range bug in try_to_unmap_one)
  	if (PageHuge(page)) {
  		/*
  		 * If sharing is possible, start and end will be adjusted
* Unmerged path mm/rmap.c
