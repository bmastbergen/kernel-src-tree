net: phylink: ensure manual pause mode configuration takes effect

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Russell King <rmk+kernel@armlinux.org.uk>
commit 2e919bc446faee429ac862a6cdb5e40017051f6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/2e919bc4.failed

We have been relying on link events and mac_config() when the manual
pause modes are changed.  With recent developments, such as moving
the programming of link state to mac_link_up(), this no longer works.

To ensure that we update the MAC, we must generate a link-down followed
by a link-up event; we can do that by setting mac_link_dropped and
triggering a resolve.

Fixes: 91a208f2185a ("net: phylink: propagate resolved link config via mac_link_up()")
	Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2e919bc446faee429ac862a6cdb5e40017051f6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phylink.c
diff --cc drivers/net/phy/phylink.c
index 9078efe83495,3b7c70e6c5dd..000000000000
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@@ -1463,20 -1504,36 +1465,48 @@@ int phylink_ethtool_set_pauseparam(stru
  	linkmode_set_pause(config->advertising, pause->tx_pause,
  			   pause->rx_pause);
  
++<<<<<<< HEAD
 +	/* If we have a PHY, phylib will call our link state function if the
 +	 * mode has changed, which will trigger a resolve and update the MAC
 +	 * configuration.
++=======
+ 	manual_changed = (config->pause ^ pause_state) & MLO_PAUSE_AN ||
+ 			 (!(pause_state & MLO_PAUSE_AN) &&
+ 			   (config->pause ^ pause_state) & MLO_PAUSE_TXRX_MASK);
+ 
+ 	config->pause = pause_state;
+ 
+ 	if (!pl->phydev && !test_bit(PHYLINK_DISABLE_STOPPED,
+ 				     &pl->phylink_disable_state))
+ 		phylink_pcs_config(pl, true, &pl->link_config);
+ 
+ 	mutex_unlock(&pl->state_mutex);
+ 
+ 	/* If we have a PHY, a change of the pause frame advertisement will
+ 	 * cause phylib to renegotiate (if AN is enabled) which will in turn
+ 	 * call our phylink_phy_change() and trigger a resolve.  Note that
+ 	 * we can't hold our state mutex while calling phy_set_asym_pause().
++>>>>>>> 2e919bc446fa (net: phylink: ensure manual pause mode configuration takes effect)
  	 */
 -	if (pl->phydev)
 +	if (pl->phydev) {
  		phy_set_asym_pause(pl->phydev, pause->rx_pause,
  				   pause->tx_pause);
 +	} else if (!test_bit(PHYLINK_DISABLE_STOPPED,
 +			     &pl->phylink_disable_state)) {
 +		phylink_mac_config(pl, &pl->link_config);
 +		phylink_mac_an_restart(pl);
 +	}
 +	mutex_unlock(&pl->state_mutex);
  
+ 	/* If the manual pause settings changed, make sure we trigger a
+ 	 * resolve to update their state; we can not guarantee that the
+ 	 * link will cycle.
+ 	 */
+ 	if (manual_changed) {
+ 		pl->mac_link_dropped = true;
+ 		phylink_run_resolve(pl);
+ 	}
+ 
  	return 0;
  }
  EXPORT_SYMBOL_GPL(phylink_ethtool_set_pauseparam);
* Unmerged path drivers/net/phy/phylink.c
