powerpc/security: change link stack flush state to the flush type enum

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Nicholas Piggin <npiggin@gmail.com>
commit c06ac2771070f465076e87bba262c64fb0b3aca3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c06ac277.failed

Prepare to allow for hardware link stack flushing by using the
none/sw/hw type, same as the count cache state.

	Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200609070610.846703-3-npiggin@gmail.com
(cherry picked from commit c06ac2771070f465076e87bba262c64fb0b3aca3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/security.c
diff --cc arch/powerpc/kernel/security.c
index 9203c2cff485,28f4cb062f69..000000000000
--- a/arch/powerpc/kernel/security.c
+++ b/arch/powerpc/kernel/security.c
@@@ -16,17 -16,18 +16,22 @@@
  #include <asm/debugfs.h>
  #include <asm/security_features.h>
  #include <asm/setup.h>
 -#include <asm/inst.h>
  
  
 -u64 powerpc_security_features __read_mostly = SEC_FTR_DEFAULT;
 +unsigned long powerpc_security_features __read_mostly = SEC_FTR_DEFAULT;
  
 -enum branch_cache_flush_type {
 -	BRANCH_CACHE_FLUSH_NONE	= 0x1,
 -	BRANCH_CACHE_FLUSH_SW	= 0x2,
 -	BRANCH_CACHE_FLUSH_HW	= 0x4,
 +enum count_cache_flush_type {
 +	COUNT_CACHE_FLUSH_NONE	= 0x1,
 +	COUNT_CACHE_FLUSH_SW	= 0x2,
 +	COUNT_CACHE_FLUSH_HW	= 0x4,
  };
++<<<<<<< HEAD
 +static enum count_cache_flush_type count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;
 +static bool link_stack_flush_enabled;
++=======
+ static enum branch_cache_flush_type count_cache_flush_type = BRANCH_CACHE_FLUSH_NONE;
+ static enum branch_cache_flush_type link_stack_flush_type = BRANCH_CACHE_FLUSH_NONE;
++>>>>>>> c06ac2771070 (powerpc/security: change link stack flush state to the flush type enum)
  
  bool barrier_nospec_enabled;
  static bool no_nospec;
@@@ -208,16 -219,16 +213,16 @@@ ssize_t cpu_show_spectre_v2(struct devi
  		if (ccd)
  			seq_buf_printf(&s, "Indirect branch cache disabled");
  
- 		if (link_stack_flush_enabled)
+ 		if (link_stack_flush_type == BRANCH_CACHE_FLUSH_SW)
  			seq_buf_printf(&s, ", Software link stack flush");
  
 -	} else if (count_cache_flush_type != BRANCH_CACHE_FLUSH_NONE) {
 +	} else if (count_cache_flush_type != COUNT_CACHE_FLUSH_NONE) {
  		seq_buf_printf(&s, "Mitigation: Software count cache flush");
  
 -		if (count_cache_flush_type == BRANCH_CACHE_FLUSH_HW)
 +		if (count_cache_flush_type == COUNT_CACHE_FLUSH_HW)
  			seq_buf_printf(&s, " (hardware accelerated)");
  
- 		if (link_stack_flush_enabled)
+ 		if (link_stack_flush_type == BRANCH_CACHE_FLUSH_SW)
  			seq_buf_printf(&s, ", Software link stack flush");
  
  	} else if (btb_flush_enabled) {
@@@ -426,12 -440,14 +431,12 @@@ static void toggle_count_cache_flush(bo
  		enable = false;
  
  	if (!enable) {
 -		patch_instruction_site(&patch__call_flush_branch_caches,
 -				       ppc_inst(PPC_INST_NOP));
 +		patch_instruction_site(&patch__call_flush_count_cache, PPC_INST_NOP);
  #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE
 -		patch_instruction_site(&patch__call_kvm_flush_link_stack,
 -				       ppc_inst(PPC_INST_NOP));
 +		patch_instruction_site(&patch__call_kvm_flush_link_stack, PPC_INST_NOP);
  #endif
  		pr_info("link-stack-flush: software flush disabled.\n");
- 		link_stack_flush_enabled = false;
+ 		link_stack_flush_type = BRANCH_CACHE_FLUSH_NONE;
  		no_count_cache_flush();
  		return;
  	}
* Unmerged path arch/powerpc/kernel/security.c
