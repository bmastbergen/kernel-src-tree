net/mlx5: Remove empty QP and CQ events handlers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 73a75b96fc9a79779ad7491b61d65f0bbae04d11
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/73a75b96.failed

The QP and CQ events functions do nothing except printing some debug
messages. There is nothing to do with this knowledge and such events,
so remove them.

	Reviewed-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit 73a75b96fc9a79779ad7491b61d65f0bbae04d11)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fpga/conn.c
#	drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fpga/conn.c
index 61021133029e,1d49894399af..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fpga/conn.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fpga/conn.c
@@@ -604,7 -588,7 +586,11 @@@ static int mlx5_fpga_conn_create_qp(str
  	if (err)
  		goto err_sq_bufs;
  
++<<<<<<< HEAD
 +	conn->qp.mqp.event = mlx5_fpga_conn_event;
++=======
+ 	conn->qp.mqp.qpn = MLX5_GET(create_qp_out, out, qpn);
++>>>>>>> 73a75b96fc9a (net/mlx5: Remove empty QP and CQ events handlers)
  	mlx5_fpga_dbg(fdev, "Created QP #0x%x\n", conn->qp.mqp.qpn);
  
  	goto out;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
index 5bdc02c260e2,690e4181db4c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
@@@ -180,14 -176,12 +175,17 @@@ static struct mlx5dr_qp *dr_create_rc_q
  				  (__be64 *)MLX5_ADDR_OF(create_qp_in,
  							 in, pas));
  
 -	MLX5_SET(create_qp_in, in, opcode, MLX5_CMD_OP_CREATE_QP);
 -	err = mlx5_cmd_exec(mdev, in, inlen, out, sizeof(out));
 -	dr_qp->mqp.qpn = MLX5_GET(create_qp_out, out, qpn);
 -	kfree(in);
 -	if (err)
 +	err = mlx5_core_create_qp(mdev, &dr_qp->mqp, in, inlen);
 +	kvfree(in);
 +
 +	if (err) {
 +		mlx5_core_warn(mdev, " Can't create QP\n");
  		goto err_in;
++<<<<<<< HEAD
 +	}
 +	dr_qp->mqp.event = dr_qp_event;
++=======
++>>>>>>> 73a75b96fc9a (net/mlx5: Remove empty QP and CQ events handlers)
  	dr_qp->uar = attr->uar;
  
  	return dr_qp;
@@@ -691,18 -689,6 +689,21 @@@ static int dr_prepare_qp_to_rts(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void dr_cq_event(struct mlx5_core_cq *mcq,
 +			enum mlx5_event event)
 +{
 +	pr_info("CQ event %u on CQ #%u\n", event, mcq->cqn);
 +}
 +
 +static void dr_cq_complete(struct mlx5_core_cq *mcq,
 +			   struct mlx5_eqe *eqe)
 +{
 +	pr_err("CQ completion CQ: #%u\n", mcq->cqn);
 +}
 +
++=======
++>>>>>>> 73a75b96fc9a (net/mlx5: Remove empty QP and CQ events handlers)
  static struct mlx5dr_cq *dr_create_cq(struct mlx5_core_dev *mdev,
  				      struct mlx5_uars_page *uar,
  				      size_t ncqe)
@@@ -763,9 -749,6 +764,12 @@@
  	pas = (__be64 *)MLX5_ADDR_OF(create_cq_in, in, pas);
  	mlx5_fill_page_frag_array(&cq->wq_ctrl.buf, pas);
  
++<<<<<<< HEAD
 +	cq->mcq.event = dr_cq_event;
 +	cq->mcq.comp  = dr_cq_complete;
 +
++=======
++>>>>>>> 73a75b96fc9a (net/mlx5: Remove empty QP and CQ events handlers)
  	err = mlx5_core_create_cq(mdev, &cq->mcq, in, inlen, out, sizeof(out));
  	kvfree(in);
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fpga/conn.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/steering/dr_send.c
