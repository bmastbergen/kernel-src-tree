lib/vdso: Mark do_hres() and do_coarse() as __always_inline

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrei Vagin <avagin@gmail.com>
commit c966533f8c6c45f93c52599f8460e7695f0b7eaa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c966533f.failed

Performance numbers for Intel(R) Core(TM) i5-6300U CPU @ 2.40GHz
(more clock_gettime() cycles - the better):

clock            | before     | after      | diff
----------------------------------------------------------
monotonic        |  153222105 |  166775025 | 8.8%
monotonic-coarse |  671557054 |  691513017 | 3.0%
monotonic-raw    |  147116067 |  161057395 | 9.5%
boottime         |  153446224 |  166962668 | 9.1%

The improvement for arm64 for monotonic and boottime is around 3.5%.

clock            | before     | after      | diff
==================================================
monotonic          17326692     17951770     3.6%
monotonic-coarse   43624027     44215292     1.3%
monotonic-raw      17541809     17554932     0.1%
boottime           17334982     17954361     3.5%

[ tglx: Avoid the goto ]

	Signed-off-by: Andrei Vagin <avagin@gmail.com>
	Signed-off-by: Dmitry Safonov <dima@arista.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lore.kernel.org/r/20191112012724.250792-3-dima@arista.com


(cherry picked from commit c966533f8c6c45f93c52599f8460e7695f0b7eaa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/vdso/gettimeofday.c
diff --cc lib/vdso/gettimeofday.c
index 632c43443888,b453d2469b63..000000000000
--- a/lib/vdso/gettimeofday.c
+++ b/lib/vdso/gettimeofday.c
@@@ -26,7 -26,19 +26,23 @@@
  #include <asm/vdso/gettimeofday.h>
  #endif /* ENABLE_COMPAT_VDSO */
  
++<<<<<<< HEAD
 +static int do_hres(const struct vdso_data *vd, clockid_t clk,
++=======
+ #ifndef vdso_calc_delta
+ /*
+  * Default implementation which works for all sane clocksources. That
+  * obviously excludes x86/TSC.
+  */
+ static __always_inline
+ u64 vdso_calc_delta(u64 cycles, u64 last, u64 mask, u32 mult)
+ {
+ 	return ((cycles - last) & mask) * mult;
+ }
+ #endif
+ 
+ static __always_inline int do_hres(const struct vdso_data *vd, clockid_t clk,
++>>>>>>> c966533f8c6c (lib/vdso: Mark do_hres() and do_coarse() as __always_inline)
  		   struct __kernel_timespec *ts)
  {
  	const struct vdso_timestamp *vdso_ts = &vd->basetime[clk];
@@@ -57,8 -68,8 +73,13 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void do_coarse(const struct vdso_data *vd, clockid_t clk,
 +		      struct __kernel_timespec *ts)
++=======
+ static __always_inline int do_coarse(const struct vdso_data *vd, clockid_t clk,
+ 				     struct __kernel_timespec *ts)
++>>>>>>> c966533f8c6c (lib/vdso: Mark do_hres() and do_coarse() as __always_inline)
  {
  	const struct vdso_timestamp *vdso_ts = &vd->basetime[clk];
  	u32 seq;
@@@ -85,17 -98,26 +106,40 @@@ __cvdso_clock_gettime(clockid_t clock, 
  	 * clocks are handled in the VDSO directly.
  	 */
  	msk = 1U << clock;
++<<<<<<< HEAD
 +	if (likely(msk & VDSO_HRES)) {
 +		return do_hres(&vd[CS_HRES_COARSE], clock, ts);
 +	} else if (msk & VDSO_COARSE) {
 +		do_coarse(&vd[CS_HRES_COARSE], clock, ts);
 +		return 0;
 +	} else if (msk & VDSO_RAW) {
 +		return do_hres(&vd[CS_RAW], clock, ts);
 +	}
 +
 +fallback:
 +	return clock_gettime_fallback(clock, ts);
++=======
+ 	if (likely(msk & VDSO_HRES))
+ 		vd = &vd[CS_HRES_COARSE];
+ 	else if (msk & VDSO_COARSE)
+ 		return do_coarse(&vd[CS_HRES_COARSE], clock, ts);
+ 	else if (msk & VDSO_RAW)
+ 		vd = &vd[CS_RAW];
+ 	else
+ 		return -1;
+ 
+ 	return do_hres(vd, clock, ts);
+ }
+ 
+ static __maybe_unused int
+ __cvdso_clock_gettime(clockid_t clock, struct __kernel_timespec *ts)
+ {
+ 	int ret = __cvdso_clock_gettime_common(clock, ts);
+ 
+ 	if (unlikely(ret))
+ 		return clock_gettime_fallback(clock, ts);
+ 	return 0;
++>>>>>>> c966533f8c6c (lib/vdso: Mark do_hres() and do_coarse() as __always_inline)
  }
  
  #ifdef BUILD_VDSO32
* Unmerged path lib/vdso/gettimeofday.c
