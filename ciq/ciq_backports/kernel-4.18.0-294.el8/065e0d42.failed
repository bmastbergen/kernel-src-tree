ethtool: Add support for 100Gbps per lane link modes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Meir Lichtinger <meirl@mellanox.com>
commit 065e0d42a0a728d7f6c2aec7c9f3e5dc7b715394
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/065e0d42.failed

Define 100G, 200G and 400G link modes using 100Gbps per lane

LR, ER and FR are defined as a single link mode because they are
using same technology and by design are fully interoperable.
EEPROM content indicates if the module is LR, ER, or FR, and the
user space ethtool decoder is planned to support decoding these
modes in the EEPROM.

	Signed-off-by: Meir Lichtinger <meirl@mellanox.com>
CC: Andrew Lunn <andrew@lunn.ch>
	Reviewed-by: Aya Levin <ayal@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 065e0d42a0a728d7f6c2aec7c9f3e5dc7b715394)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy-core.c
#	include/uapi/linux/ethtool.h
#	net/ethtool/common.c
#	net/ethtool/linkmodes.c
diff --cc drivers/net/phy/phy-core.c
index a4d2d59fceca,ff8e14b01eeb..000000000000
--- a/drivers/net/phy/phy-core.c
+++ b/drivers/net/phy/phy-core.c
@@@ -8,7 -8,7 +8,11 @@@
  
  const char *phy_speed_to_str(int speed)
  {
++<<<<<<< HEAD
 +	BUILD_BUG_ON_MSG(__ETHTOOL_LINK_MODE_MASK_NBITS != 74,
++=======
+ 	BUILD_BUG_ON_MSG(__ETHTOOL_LINK_MODE_MASK_NBITS != 90,
++>>>>>>> 065e0d42a0a7 (ethtool: Add support for 100Gbps per lane link modes)
  		"Enum ethtool_link_mode_bit_indices and phylib are out of sync. "
  		"If a speed or mode has been added please update phy_speed_to_str "
  		"and the PHY settings array.\n");
diff --cc include/uapi/linux/ethtool.h
index 30dc4eb925a3,60856e0f9618..000000000000
--- a/include/uapi/linux/ethtool.h
+++ b/include/uapi/linux/ethtool.h
@@@ -1518,25 -1599,24 +1518,44 @@@ enum ethtool_link_mode_bit_indices 
  	ETHTOOL_LINK_MODE_400000baseLR8_ER8_FR8_Full_BIT = 71,
  	ETHTOOL_LINK_MODE_400000baseDR8_Full_BIT	 = 72,
  	ETHTOOL_LINK_MODE_400000baseCR8_Full_BIT	 = 73,
- 
++<<<<<<< HEAD
++
++=======
+ 	ETHTOOL_LINK_MODE_FEC_LLRS_BIT			 = 74,
+ 	ETHTOOL_LINK_MODE_100000baseKR_Full_BIT		 = 75,
+ 	ETHTOOL_LINK_MODE_100000baseSR_Full_BIT		 = 76,
+ 	ETHTOOL_LINK_MODE_100000baseLR_ER_FR_Full_BIT	 = 77,
+ 	ETHTOOL_LINK_MODE_100000baseCR_Full_BIT		 = 78,
+ 	ETHTOOL_LINK_MODE_100000baseDR_Full_BIT		 = 79,
+ 	ETHTOOL_LINK_MODE_200000baseKR2_Full_BIT	 = 80,
+ 	ETHTOOL_LINK_MODE_200000baseSR2_Full_BIT	 = 81,
+ 	ETHTOOL_LINK_MODE_200000baseLR2_ER2_FR2_Full_BIT = 82,
+ 	ETHTOOL_LINK_MODE_200000baseDR2_Full_BIT	 = 83,
+ 	ETHTOOL_LINK_MODE_200000baseCR2_Full_BIT	 = 84,
+ 	ETHTOOL_LINK_MODE_400000baseKR4_Full_BIT	 = 85,
+ 	ETHTOOL_LINK_MODE_400000baseSR4_Full_BIT	 = 86,
+ 	ETHTOOL_LINK_MODE_400000baseLR4_ER4_FR4_Full_BIT = 87,
+ 	ETHTOOL_LINK_MODE_400000baseDR4_Full_BIT	 = 88,
+ 	ETHTOOL_LINK_MODE_400000baseCR4_Full_BIT	 = 89,
++>>>>>>> 065e0d42a0a7 (ethtool: Add support for 100Gbps per lane link modes)
  	/* must be last entry */
 -	__ETHTOOL_LINK_MODE_MASK_NBITS
 +	__ETHTOOL_LINK_MODE_MASK_NBITS,
 +
 +	/* RHEL: Last known value for RHEL 8.0 needed for emulation layer
 +         * for old binary drivers compiled against RHEL 8.0
 +         */
 +	__ETHTOOL_LINK_MODE_LAST_RH80 = ETHTOOL_LINK_MODE_FEC_BASER_BIT,
 +
 +#ifdef __GENKSYMS__
 +	/* RHEL: Enum __ETHTOOL_LINK_MODE_LAST and its value is protected by
 +	 * KABI checker.
 +	 * We also need to define __ETHTOOL_LINK_MODE_MASK_NBITS as macro
 +	 * for KABI checker to preserve existing checksums of several
 +	 * ethtool symbols.
 +	 */
 +	__ETHTOOL_LINK_MODE_LAST = __ETHTOOL_LINK_MODE_LAST_RH80,
 +#define __ETHTOOL_LINK_MODE_MASK_NBITS (__ETHTOOL_LINK_MODE_LAST + 1)
 +#endif
  };
  
  #define __ETHTOOL_LINK_MODE_LEGACY_MASK(base_name)	\
diff --cc net/ethtool/common.c
index 9e667dc87e98,c54166713797..000000000000
--- a/net/ethtool/common.c
+++ b/net/ethtool/common.c
@@@ -168,5 -175,227 +168,24 @@@ const char link_mode_names[][ETH_GSTRIN
  	__DEFINE_LINK_MODE_NAME(400000, LR8_ER8_FR8, Full),
  	__DEFINE_LINK_MODE_NAME(400000, DR8, Full),
  	__DEFINE_LINK_MODE_NAME(400000, CR8, Full),
++<<<<<<< HEAD
++=======
+ 	__DEFINE_SPECIAL_MODE_NAME(FEC_LLRS, "LLRS"),
+ 	__DEFINE_LINK_MODE_NAME(100000, KR, Full),
+ 	__DEFINE_LINK_MODE_NAME(100000, SR, Full),
+ 	__DEFINE_LINK_MODE_NAME(100000, LR_ER_FR, Full),
+ 	__DEFINE_LINK_MODE_NAME(100000, DR, Full),
+ 	__DEFINE_LINK_MODE_NAME(100000, CR, Full),
+ 	__DEFINE_LINK_MODE_NAME(200000, KR2, Full),
+ 	__DEFINE_LINK_MODE_NAME(200000, SR2, Full),
+ 	__DEFINE_LINK_MODE_NAME(200000, LR2_ER2_FR2, Full),
+ 	__DEFINE_LINK_MODE_NAME(200000, DR2, Full),
+ 	__DEFINE_LINK_MODE_NAME(200000, CR2, Full),
+ 	__DEFINE_LINK_MODE_NAME(400000, KR4, Full),
+ 	__DEFINE_LINK_MODE_NAME(400000, SR4, Full),
+ 	__DEFINE_LINK_MODE_NAME(400000, LR4_ER4_FR4, Full),
+ 	__DEFINE_LINK_MODE_NAME(400000, DR4, Full),
+ 	__DEFINE_LINK_MODE_NAME(400000, CR4, Full),
++>>>>>>> 065e0d42a0a7 (ethtool: Add support for 100Gbps per lane link modes)
  };
  static_assert(ARRAY_SIZE(link_mode_names) == __ETHTOOL_LINK_MODE_MASK_NBITS);
 -
 -const char netif_msg_class_names[][ETH_GSTRING_LEN] = {
 -	[NETIF_MSG_DRV_BIT]		= "drv",
 -	[NETIF_MSG_PROBE_BIT]		= "probe",
 -	[NETIF_MSG_LINK_BIT]		= "link",
 -	[NETIF_MSG_TIMER_BIT]		= "timer",
 -	[NETIF_MSG_IFDOWN_BIT]		= "ifdown",
 -	[NETIF_MSG_IFUP_BIT]		= "ifup",
 -	[NETIF_MSG_RX_ERR_BIT]		= "rx_err",
 -	[NETIF_MSG_TX_ERR_BIT]		= "tx_err",
 -	[NETIF_MSG_TX_QUEUED_BIT]	= "tx_queued",
 -	[NETIF_MSG_INTR_BIT]		= "intr",
 -	[NETIF_MSG_TX_DONE_BIT]		= "tx_done",
 -	[NETIF_MSG_RX_STATUS_BIT]	= "rx_status",
 -	[NETIF_MSG_PKTDATA_BIT]		= "pktdata",
 -	[NETIF_MSG_HW_BIT]		= "hw",
 -	[NETIF_MSG_WOL_BIT]		= "wol",
 -};
 -static_assert(ARRAY_SIZE(netif_msg_class_names) == NETIF_MSG_CLASS_COUNT);
 -
 -const char wol_mode_names[][ETH_GSTRING_LEN] = {
 -	[const_ilog2(WAKE_PHY)]		= "phy",
 -	[const_ilog2(WAKE_UCAST)]	= "ucast",
 -	[const_ilog2(WAKE_MCAST)]	= "mcast",
 -	[const_ilog2(WAKE_BCAST)]	= "bcast",
 -	[const_ilog2(WAKE_ARP)]		= "arp",
 -	[const_ilog2(WAKE_MAGIC)]	= "magic",
 -	[const_ilog2(WAKE_MAGICSECURE)]	= "magicsecure",
 -	[const_ilog2(WAKE_FILTER)]	= "filter",
 -};
 -static_assert(ARRAY_SIZE(wol_mode_names) == WOL_MODE_COUNT);
 -
 -const char sof_timestamping_names[][ETH_GSTRING_LEN] = {
 -	[const_ilog2(SOF_TIMESTAMPING_TX_HARDWARE)]  = "hardware-transmit",
 -	[const_ilog2(SOF_TIMESTAMPING_TX_SOFTWARE)]  = "software-transmit",
 -	[const_ilog2(SOF_TIMESTAMPING_RX_HARDWARE)]  = "hardware-receive",
 -	[const_ilog2(SOF_TIMESTAMPING_RX_SOFTWARE)]  = "software-receive",
 -	[const_ilog2(SOF_TIMESTAMPING_SOFTWARE)]     = "software-system-clock",
 -	[const_ilog2(SOF_TIMESTAMPING_SYS_HARDWARE)] = "hardware-legacy-clock",
 -	[const_ilog2(SOF_TIMESTAMPING_RAW_HARDWARE)] = "hardware-raw-clock",
 -	[const_ilog2(SOF_TIMESTAMPING_OPT_ID)]       = "option-id",
 -	[const_ilog2(SOF_TIMESTAMPING_TX_SCHED)]     = "sched-transmit",
 -	[const_ilog2(SOF_TIMESTAMPING_TX_ACK)]       = "ack-transmit",
 -	[const_ilog2(SOF_TIMESTAMPING_OPT_CMSG)]     = "option-cmsg",
 -	[const_ilog2(SOF_TIMESTAMPING_OPT_TSONLY)]   = "option-tsonly",
 -	[const_ilog2(SOF_TIMESTAMPING_OPT_STATS)]    = "option-stats",
 -	[const_ilog2(SOF_TIMESTAMPING_OPT_PKTINFO)]  = "option-pktinfo",
 -	[const_ilog2(SOF_TIMESTAMPING_OPT_TX_SWHW)]  = "option-tx-swhw",
 -};
 -static_assert(ARRAY_SIZE(sof_timestamping_names) == __SOF_TIMESTAMPING_CNT);
 -
 -const char ts_tx_type_names[][ETH_GSTRING_LEN] = {
 -	[HWTSTAMP_TX_OFF]		= "off",
 -	[HWTSTAMP_TX_ON]		= "on",
 -	[HWTSTAMP_TX_ONESTEP_SYNC]	= "onestep-sync",
 -	[HWTSTAMP_TX_ONESTEP_P2P]	= "onestep-p2p",
 -};
 -static_assert(ARRAY_SIZE(ts_tx_type_names) == __HWTSTAMP_TX_CNT);
 -
 -const char ts_rx_filter_names[][ETH_GSTRING_LEN] = {
 -	[HWTSTAMP_FILTER_NONE]			= "none",
 -	[HWTSTAMP_FILTER_ALL]			= "all",
 -	[HWTSTAMP_FILTER_SOME]			= "some",
 -	[HWTSTAMP_FILTER_PTP_V1_L4_EVENT]	= "ptpv1-l4-event",
 -	[HWTSTAMP_FILTER_PTP_V1_L4_SYNC]	= "ptpv1-l4-sync",
 -	[HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ]	= "ptpv1-l4-delay-req",
 -	[HWTSTAMP_FILTER_PTP_V2_L4_EVENT]	= "ptpv2-l4-event",
 -	[HWTSTAMP_FILTER_PTP_V2_L4_SYNC]	= "ptpv2-l4-sync",
 -	[HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ]	= "ptpv2-l4-delay-req",
 -	[HWTSTAMP_FILTER_PTP_V2_L2_EVENT]	= "ptpv2-l2-event",
 -	[HWTSTAMP_FILTER_PTP_V2_L2_SYNC]	= "ptpv2-l2-sync",
 -	[HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ]	= "ptpv2-l2-delay-req",
 -	[HWTSTAMP_FILTER_PTP_V2_EVENT]		= "ptpv2-event",
 -	[HWTSTAMP_FILTER_PTP_V2_SYNC]		= "ptpv2-sync",
 -	[HWTSTAMP_FILTER_PTP_V2_DELAY_REQ]	= "ptpv2-delay-req",
 -	[HWTSTAMP_FILTER_NTP_ALL]		= "ntp-all",
 -};
 -static_assert(ARRAY_SIZE(ts_rx_filter_names) == __HWTSTAMP_FILTER_CNT);
 -
 -/* return false if legacy contained non-0 deprecated fields
 - * maxtxpkt/maxrxpkt. rest of ksettings always updated
 - */
 -bool
 -convert_legacy_settings_to_link_ksettings(
 -	struct ethtool_link_ksettings *link_ksettings,
 -	const struct ethtool_cmd *legacy_settings)
 -{
 -	bool retval = true;
 -
 -	memset(link_ksettings, 0, sizeof(*link_ksettings));
 -
 -	/* This is used to tell users that driver is still using these
 -	 * deprecated legacy fields, and they should not use
 -	 * %ETHTOOL_GLINKSETTINGS/%ETHTOOL_SLINKSETTINGS
 -	 */
 -	if (legacy_settings->maxtxpkt ||
 -	    legacy_settings->maxrxpkt)
 -		retval = false;
 -
 -	ethtool_convert_legacy_u32_to_link_mode(
 -		link_ksettings->link_modes.supported,
 -		legacy_settings->supported);
 -	ethtool_convert_legacy_u32_to_link_mode(
 -		link_ksettings->link_modes.advertising,
 -		legacy_settings->advertising);
 -	ethtool_convert_legacy_u32_to_link_mode(
 -		link_ksettings->link_modes.lp_advertising,
 -		legacy_settings->lp_advertising);
 -	link_ksettings->base.speed
 -		= ethtool_cmd_speed(legacy_settings);
 -	link_ksettings->base.duplex
 -		= legacy_settings->duplex;
 -	link_ksettings->base.port
 -		= legacy_settings->port;
 -	link_ksettings->base.phy_address
 -		= legacy_settings->phy_address;
 -	link_ksettings->base.autoneg
 -		= legacy_settings->autoneg;
 -	link_ksettings->base.mdio_support
 -		= legacy_settings->mdio_support;
 -	link_ksettings->base.eth_tp_mdix
 -		= legacy_settings->eth_tp_mdix;
 -	link_ksettings->base.eth_tp_mdix_ctrl
 -		= legacy_settings->eth_tp_mdix_ctrl;
 -	return retval;
 -}
 -
 -int __ethtool_get_link(struct net_device *dev)
 -{
 -	if (!dev->ethtool_ops->get_link)
 -		return -EOPNOTSUPP;
 -
 -	return netif_running(dev) && dev->ethtool_ops->get_link(dev);
 -}
 -
 -int ethtool_get_max_rxfh_channel(struct net_device *dev, u32 *max)
 -{
 -	u32 dev_size, current_max = 0;
 -	u32 *indir;
 -	int ret;
 -
 -	if (!dev->ethtool_ops->get_rxfh_indir_size ||
 -	    !dev->ethtool_ops->get_rxfh)
 -		return -EOPNOTSUPP;
 -	dev_size = dev->ethtool_ops->get_rxfh_indir_size(dev);
 -	if (dev_size == 0)
 -		return -EOPNOTSUPP;
 -
 -	indir = kcalloc(dev_size, sizeof(indir[0]), GFP_USER);
 -	if (!indir)
 -		return -ENOMEM;
 -
 -	ret = dev->ethtool_ops->get_rxfh(dev, indir, NULL, NULL);
 -	if (ret)
 -		goto out;
 -
 -	while (dev_size--)
 -		current_max = max(current_max, indir[dev_size]);
 -
 -	*max = current_max;
 -
 -out:
 -	kfree(indir);
 -	return ret;
 -}
 -
 -int ethtool_check_ops(const struct ethtool_ops *ops)
 -{
 -	if (WARN_ON(ops->set_coalesce && !ops->supported_coalesce_params))
 -		return -EINVAL;
 -	/* NOTE: sufficiently insane drivers may swap ethtool_ops at runtime,
 -	 * the fact that ops are checked at registration time does not
 -	 * mean the ops attached to a netdev later on are sane.
 -	 */
 -	return 0;
 -}
 -
 -int __ethtool_get_ts_info(struct net_device *dev, struct ethtool_ts_info *info)
 -{
 -	const struct ethtool_ops *ops = dev->ethtool_ops;
 -	struct phy_device *phydev = dev->phydev;
 -
 -	memset(info, 0, sizeof(*info));
 -	info->cmd = ETHTOOL_GET_TS_INFO;
 -
 -	if (phy_has_tsinfo(phydev))
 -		return phy_ts_info(phydev, info);
 -	if (ops->get_ts_info)
 -		return ops->get_ts_info(dev, info);
 -
 -	info->so_timestamping = SOF_TIMESTAMPING_RX_SOFTWARE |
 -				SOF_TIMESTAMPING_SOFTWARE;
 -	info->phc_index = -1;
 -
 -	return 0;
 -}
 -
 -const struct ethtool_phy_ops *ethtool_phy_ops;
 -
 -void ethtool_set_ethtool_phy_ops(const struct ethtool_phy_ops *ops)
 -{
 -	rtnl_lock();
 -	ethtool_phy_ops = ops;
 -	rtnl_unlock();
 -}
 -EXPORT_SYMBOL_GPL(ethtool_set_ethtool_phy_ops);
* Unmerged path net/ethtool/linkmodes.c
* Unmerged path drivers/net/phy/phy-core.c
* Unmerged path include/uapi/linux/ethtool.h
* Unmerged path net/ethtool/common.c
* Unmerged path net/ethtool/linkmodes.c
