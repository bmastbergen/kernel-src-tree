drivers: Introduce device lookup variants by device type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Suzuki K Poulose <suzuki.poulose@arm.com>
commit 4495dfdd6193d9712b7b8f5d699d89d5996e6aaa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/4495dfdd.failed

Add a helper to match a device by its type and provide wrappers
for {bus/class/driver}_find_device() APIs.

	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Harald Freudenberger <freude@linux.ibm.com>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: linux-usb@vger.kernel.org
	Cc: Oliver Neukum <oneukum@suse.com>
	Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Cc: Tomas Winkler <tomas.winkler@intel.com>
	Cc: "Rafael J. Wysocki" <rafael@kernel.org>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Ulf Hansson <ulf.hansson@linaro.org>
	Cc: Joe Perches <joe@perches.com>
	Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
Link: https://lore.kernel.org/r/20190723221838.12024-5-suzuki.poulose@arm.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 4495dfdd6193d9712b7b8f5d699d89d5996e6aaa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
#	include/linux/device.h
diff --cc drivers/base/core.c
index d7dfbeaf0c45,3abc32b60c0a..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -3189,3 -3361,15 +3182,18 @@@ int device_match_of_node(struct device 
  	return dev->of_node == np;
  }
  EXPORT_SYMBOL_GPL(device_match_of_node);
++<<<<<<< HEAD
++=======
+ 
+ int device_match_fwnode(struct device *dev, const void *fwnode)
+ {
+ 	return dev_fwnode(dev) == fwnode;
+ }
+ EXPORT_SYMBOL_GPL(device_match_fwnode);
+ 
+ int device_match_devt(struct device *dev, const void *pdevt)
+ {
+ 	return dev->devt == *(dev_t *)pdevt;
+ }
+ EXPORT_SYMBOL_GPL(device_match_devt);
++>>>>>>> 4495dfdd6193 (drivers: Introduce device lookup variants by device type)
diff --cc include/linux/device.h
index 27ff9f1dce60,93b2f55ef44e..000000000000
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@@ -167,9 -164,10 +167,14 @@@ void subsys_dev_iter_init(struct subsys
  struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
  void subsys_dev_iter_exit(struct subsys_dev_iter *iter);
  
 +int device_match_acpi_dev(struct device *dev, const void *adev);
  int device_match_name(struct device *dev, const void *name);
  int device_match_of_node(struct device *dev, const void *np);
++<<<<<<< HEAD
++=======
+ int device_match_fwnode(struct device *dev, const void *fwnode);
+ int device_match_devt(struct device *dev, const void *pdevt);
++>>>>>>> 4495dfdd6193 (drivers: Introduce device lookup variants by device type)
  
  int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
  		     int (*fn)(struct device *dev, void *data));
@@@ -202,28 -200,30 +207,40 @@@ bus_find_device_by_of_node(struct bus_t
  	return bus_find_device(bus, NULL, np, device_match_of_node);
  }
  
 +#ifdef CONFIG_ACPI
 +struct acpi_device;
 +
  /**
 - * bus_find_device_by_fwnode : device iterator for locating a particular device
 - * matching the fwnode.
 + * bus_find_device_by_acpi_dev : device iterator for locating a particular device
 + * matching the ACPI COMPANION device.
   * @bus: bus type
 - * @fwnode: fwnode of the device to match.
 + * @adev: ACPI COMPANION device to match.
   */
  static inline struct device *
 -bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
 +bus_find_device_by_acpi_dev(struct bus_type *bus, const struct acpi_device *adev)
 +{
 +	return bus_find_device(bus, NULL, adev, device_match_acpi_dev);
 +}
 +#else
 +static inline struct device *
 +bus_find_device_by_acpi_dev(struct bus_type *bus, const void *adev)
  {
 -	return bus_find_device(bus, NULL, fwnode, device_match_fwnode);
 +	return NULL;
  }
 +#endif
  
+ /**
+  * bus_find_device_by_devt : device iterator for locating a particular device
+  * matching the device type.
+  * @bus: bus type
+  * @devt: device type of the device to match.
+  */
+ static inline struct device *bus_find_device_by_devt(struct bus_type *bus,
+ 						     dev_t devt)
+ {
+ 	return bus_find_device(bus, NULL, &devt, device_match_devt);
+ }
+ 
  struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
  					struct device *hint);
  int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
@@@ -451,6 -417,32 +468,35 @@@ driver_find_device_by_of_node(struct de
  	return driver_find_device(drv, NULL, np, device_match_of_node);
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * driver_find_device_by_fwnode- device iterator for locating a particular device
+  * by fwnode pointer.
+  * @driver: the driver we're iterating
+  * @fwnode: fwnode pointer to match.
+  */
+ static inline struct device *
+ driver_find_device_by_fwnode(struct device_driver *drv,
+ 			     const struct fwnode_handle *fwnode)
+ {
+ 	return driver_find_device(drv, NULL, fwnode, device_match_fwnode);
+ }
+ 
+ /**
+  * driver_find_device_by_devt- device iterator for locating a particular device
+  * by devt.
+  * @driver: the driver we're iterating
+  * @devt: devt pointer to match.
+  */
+ static inline struct device *driver_find_device_by_devt(struct device_driver *drv,
+ 							dev_t devt)
+ {
+ 	return driver_find_device(drv, NULL, &devt, device_match_devt);
+ }
+ 
+ void driver_deferred_probe_add(struct device *dev);
++>>>>>>> 4495dfdd6193 (drivers: Introduce device lookup variants by device type)
  int driver_deferred_probe_check_state(struct device *dev);
  int driver_deferred_probe_check_state_continue(struct device *dev);
  
@@@ -631,6 -595,31 +677,34 @@@ class_find_device_by_of_node(struct cla
  	return class_find_device(class, NULL, np, device_match_of_node);
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * class_find_device_by_fwnode : device iterator for locating a particular device
+  * matching the fwnode.
+  * @class: class type
+  * @fwnode: fwnode of the device to match.
+  */
+ static inline struct device *
+ class_find_device_by_fwnode(struct class *class,
+ 			    const struct fwnode_handle *fwnode)
+ {
+ 	return class_find_device(class, NULL, fwnode, device_match_fwnode);
+ }
+ 
+ /**
+  * class_find_device_by_devt : device iterator for locating a particular device
+  * matching the device type.
+  * @class: class type
+  * @devt: device type of the device to match.
+  */
+ static inline struct device *class_find_device_by_devt(struct class *class,
+ 						       dev_t devt)
+ {
+ 	return class_find_device(class, NULL, &devt, device_match_devt);
+ }
+ 
++>>>>>>> 4495dfdd6193 (drivers: Introduce device lookup variants by device type)
  struct class_attribute {
  	struct attribute attr;
  	ssize_t (*show)(struct class *class, struct class_attribute *attr,
* Unmerged path drivers/base/core.c
diff --git a/drivers/hwtracing/intel_th/core.c b/drivers/hwtracing/intel_th/core.c
index d7fb051362ed..c9ac3dc65113 100644
--- a/drivers/hwtracing/intel_th/core.c
+++ b/drivers/hwtracing/intel_th/core.c
@@ -785,12 +785,6 @@ static int intel_th_populate(struct intel_th *th)
 	return 0;
 }
 
-static int match_devt(struct device *dev, const void *data)
-{
-	dev_t devt = (dev_t)(unsigned long)(void *)data;
-	return dev->devt == devt;
-}
-
 static int intel_th_output_open(struct inode *inode, struct file *file)
 {
 	const struct file_operations *fops;
@@ -798,9 +792,7 @@ static int intel_th_output_open(struct inode *inode, struct file *file)
 	struct device *dev;
 	int err;
 
-	dev = bus_find_device(&intel_th_bus, NULL,
-			      (void *)(unsigned long)inode->i_rdev,
-			      match_devt);
+	dev = bus_find_device_by_devt(&intel_th_bus, inode->i_rdev);
 	if (!dev || !dev->driver)
 		return -ENODEV;
 
diff --git a/drivers/misc/mei/main.c b/drivers/misc/mei/main.c
index 7fbe9cd35614..f17297f2943d 100644
--- a/drivers/misc/mei/main.c
+++ b/drivers/misc/mei/main.c
@@ -863,13 +863,6 @@ static ssize_t dev_state_show(struct device *device,
 }
 static DEVICE_ATTR_RO(dev_state);
 
-static int match_devt(struct device *dev, const void *data)
-{
-	const dev_t *devt = data;
-
-	return dev->devt == *devt;
-}
-
 /**
  * dev_set_devstate: set to new device state and notify sysfs file.
  *
@@ -885,7 +878,7 @@ void mei_set_devstate(struct mei_device *dev, enum mei_dev_state state)
 
 	dev->dev_state = state;
 
-	clsdev = class_find_device(mei_class, NULL, &dev->cdev.dev, match_devt);
+	clsdev = class_find_device_by_devt(mei_class, dev->cdev.dev);
 	if (clsdev) {
 		sysfs_notify(&clsdev->kobj, NULL, "dev_state");
 		put_device(clsdev);
diff --git a/drivers/s390/crypto/zcrypt_api.c b/drivers/s390/crypto/zcrypt_api.c
index 1d27c6c62e02..a7f2f489ed22 100644
--- a/drivers/s390/crypto/zcrypt_api.c
+++ b/drivers/s390/crypto/zcrypt_api.c
@@ -135,12 +135,6 @@ struct zcdn_device {
 static int zcdn_create(const char *name);
 static int zcdn_destroy(const char *name);
 
-/* helper function, matches the devt value for find_zcdndev_by_devt() */
-static int __match_zcdn_devt(struct device *dev, const void *data)
-{
-	return dev->devt == *((dev_t *) data);
-}
-
 /*
  * Find zcdn device by name.
  * Returns reference to the zcdn device which needs to be released
@@ -160,10 +154,7 @@ static inline struct zcdn_device *find_zcdndev_by_name(const char *name)
  */
 static inline struct zcdn_device *find_zcdndev_by_devt(dev_t devt)
 {
-	struct device *dev =
-		class_find_device(zcrypt_class, NULL,
-				  (void *) &devt,
-				  __match_zcdn_devt);
+	struct device *dev = class_find_device_by_devt(zcrypt_class, devt);
 
 	return dev ? to_zcdn_dev(dev) : NULL;
 }
diff --git a/drivers/tty/tty_io.c b/drivers/tty/tty_io.c
index 3145d0a0b610..cd5e3c9a78c9 100644
--- a/drivers/tty/tty_io.c
+++ b/drivers/tty/tty_io.c
@@ -2800,17 +2800,11 @@ void do_SAK(struct tty_struct *tty)
 
 EXPORT_SYMBOL(do_SAK);
 
-static int dev_match_devt(struct device *dev, const void *data)
-{
-	const dev_t *devt = data;
-	return dev->devt == *devt;
-}
-
 /* Must put_device() after it's unused! */
 static struct device *tty_get_device(struct tty_struct *tty)
 {
 	dev_t devt = tty_devnum(tty);
-	return class_find_device(tty_class, NULL, &devt, dev_match_devt);
+	return class_find_device_by_devt(tty_class, devt);
 }
 
 
diff --git a/drivers/usb/core/devio.c b/drivers/usb/core/devio.c
index 5c4c68f448d6..34e6ed73e68b 100644
--- a/drivers/usb/core/devio.c
+++ b/drivers/usb/core/devio.c
@@ -942,17 +942,11 @@ static int parse_usbdevfs_streams(struct usb_dev_state *ps,
 	return ret;
 }
 
-static int match_devt(struct device *dev, const void *data)
-{
-	return dev->devt == (dev_t)(unsigned long)(void *)data;
-}
-
 static struct usb_device *usbdev_lookup_by_devt(dev_t devt)
 {
 	struct device *dev;
 
-	dev = bus_find_device(&usb_bus_type, NULL,
-			      (void *) (unsigned long) devt, match_devt);
+	dev = bus_find_device_by_devt(&usb_bus_type, devt);
 	if (!dev)
 		return NULL;
 	return to_usb_device(dev);
* Unmerged path include/linux/device.h
