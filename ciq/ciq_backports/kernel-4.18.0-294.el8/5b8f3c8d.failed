virtio_net: Add XDP related stats

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
commit 5b8f3c8d30a6176c6be35c6ac75e22b0a60a3c43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5b8f3c8d.failed

Add counters below:
* Tx
 - xdp_tx: frames sent by ndo_xdp_xmit or XDP_TX.
 - xdp_tx_drops: dropped frames out of xdp_tx ones.
* Rx
 - xdp_packets: frames went through xdp program.
 - xdp_tx: XDP_TX frames.
 - xdp_redirects: XDP_REDIRECT frames.
 - xdp_drops: any dropped frames out of xdp_packets ones.

	Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5b8f3c8d30a6176c6be35c6ac75e22b0a60a3c43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/virtio_net.c
diff --cc drivers/net/virtio_net.c
index bb87a9822737,cb4ef331567c..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -509,29 -507,30 +525,45 @@@ static int virtnet_xdp_xmit(struct net_
  	struct send_queue *sq;
  	unsigned int len;
  	int drops = 0;
++<<<<<<< HEAD
 +	int err;
 +	void *ptr;
++=======
+ 	int ret, err;
++>>>>>>> 5b8f3c8d30a6 (virtio_net: Add XDP related stats)
  	int i;
  
- 	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK))
- 		return -EINVAL;
- 
  	sq = virtnet_xdp_sq(vi);
  
+ 	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK)) {
+ 		ret = -EINVAL;
+ 		drops = n;
+ 		goto out;
+ 	}
+ 
  	/* Only allow ndo_xdp_xmit if XDP is loaded on dev, as this
  	 * indicate XDP resources have been successfully allocated.
  	 */
++<<<<<<< HEAD
 +	xdp_prog = rcu_access_pointer(rq->xdp_prog);
 +	if (!xdp_prog)
 +		return -ENXIO;
++=======
+ 	xdp_prog = rcu_dereference(rq->xdp_prog);
+ 	if (!xdp_prog) {
+ 		ret = -ENXIO;
+ 		drops = n;
+ 		goto out;
+ 	}
++>>>>>>> 5b8f3c8d30a6 (virtio_net: Add XDP related stats)
  
  	/* Free up any pending old buffers before queueing new ones. */
 -	while ((xdpf_sent = virtqueue_get_buf(sq->vq, &len)) != NULL)
 -		xdp_return_frame(xdpf_sent);
 +	while ((ptr = virtqueue_get_buf(sq->vq, &len)) != NULL) {
 +		if (likely(is_xdp_frame(ptr)))
 +			xdp_return_frame(ptr_to_xdp(ptr));
 +		else
 +			dev_consume_skb_any(ptr);
 +	}
  
  	for (i = 0; i < n; i++) {
  		struct xdp_frame *xdpf = frames[i];
* Unmerged path drivers/net/virtio_net.c
