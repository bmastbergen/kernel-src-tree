arm64: compat: Split kuser32

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vincenzo Frascino <vincenzo.frascino@arm.com>
commit d1e5ca64d5bab864000566ea695617d0e124d27e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d1e5ca64.failed

To make it possible to disable kuser helpers in aarch32 we need to
divide the kuser and the sigreturn functionalities.

Split the current version of kuser32 in kuser32 (for kuser helpers)
and sigreturn32 (for sigreturn helpers).

	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit d1e5ca64d5bab864000566ea695617d0e124d27e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/Makefile
diff --cc arch/arm64/kernel/Makefile
index aa002ad6e084,c18c34d56029..000000000000
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@@ -27,40 -27,40 +27,56 @@@ OBJCOPYFLAGS := --prefix-symbols=__efis
  $(obj)/%.stub.o: $(obj)/%.o FORCE
  	$(call if_changed,objcopy)
  
++<<<<<<< HEAD
 +arm64-obj-$(CONFIG_COMPAT)		+= sys32.o kuser32.o signal32.o 	\
 +					   sys_compat.o
 +arm64-obj-$(CONFIG_FUNCTION_TRACER)	+= ftrace.o entry-ftrace.o
 +arm64-obj-$(CONFIG_MODULES)		+= arm64ksyms.o module.o
 +arm64-obj-$(CONFIG_ARM64_MODULE_PLTS)	+= module-plts.o
 +arm64-obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o
 +arm64-obj-$(CONFIG_HW_PERF_EVENTS)	+= perf_event.o
 +arm64-obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
 +arm64-obj-$(CONFIG_CPU_PM)		+= sleep.o suspend.o
 +arm64-obj-$(CONFIG_CPU_IDLE)		+= cpuidle.o
 +arm64-obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o
 +arm64-obj-$(CONFIG_KGDB)		+= kgdb.o
 +arm64-obj-$(CONFIG_EFI)			+= efi.o efi-entry.stub.o		\
++=======
+ obj-$(CONFIG_COMPAT)			+= sys32.o kuser32.o signal32.o 	\
+ 					   sigreturn32.o sys_compat.o
+ obj-$(CONFIG_FUNCTION_TRACER)		+= ftrace.o entry-ftrace.o
+ obj-$(CONFIG_MODULES)			+= module.o
+ obj-$(CONFIG_ARM64_MODULE_PLTS)		+= module-plts.o
+ obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o
+ obj-$(CONFIG_HW_PERF_EVENTS)		+= perf_event.o
+ obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
+ obj-$(CONFIG_CPU_PM)			+= sleep.o suspend.o
+ obj-$(CONFIG_CPU_IDLE)			+= cpuidle.o
+ obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o
+ obj-$(CONFIG_KGDB)			+= kgdb.o
+ obj-$(CONFIG_EFI)			+= efi.o efi-entry.stub.o		\
++>>>>>>> d1e5ca64d5ba (arm64: compat: Split kuser32)
  					   efi-rt-wrapper.o
 -obj-$(CONFIG_PCI)			+= pci.o
 -obj-$(CONFIG_ARMV8_DEPRECATED)		+= armv8_deprecated.o
 -obj-$(CONFIG_ACPI)			+= acpi.o
 -obj-$(CONFIG_ACPI_NUMA)			+= acpi_numa.o
 -obj-$(CONFIG_ARM64_ACPI_PARKING_PROTOCOL)	+= acpi_parking_protocol.o
 -obj-$(CONFIG_PARAVIRT)			+= paravirt.o
 -obj-$(CONFIG_RANDOMIZE_BASE)		+= kaslr.o
 -obj-$(CONFIG_HIBERNATION)		+= hibernate.o hibernate-asm.o
 -obj-$(CONFIG_KEXEC_CORE)		+= machine_kexec.o relocate_kernel.o	\
 +arm64-obj-$(CONFIG_PCI)			+= pci.o
 +arm64-obj-$(CONFIG_ARMV8_DEPRECATED)	+= armv8_deprecated.o
 +arm64-obj-$(CONFIG_ACPI)		+= acpi.o
 +arm64-obj-$(CONFIG_ACPI_NUMA)		+= acpi_numa.o
 +arm64-obj-$(CONFIG_ARM64_ACPI_PARKING_PROTOCOL)	+= acpi_parking_protocol.o
 +arm64-obj-$(CONFIG_PARAVIRT)		+= paravirt.o
 +arm64-obj-$(CONFIG_RANDOMIZE_BASE)	+= kaslr.o
 +arm64-obj-$(CONFIG_HIBERNATION)		+= hibernate.o hibernate-asm.o
 +arm64-obj-$(CONFIG_KEXEC_CORE)		+= machine_kexec.o relocate_kernel.o	\
  					   cpu-reset.o
 -obj-$(CONFIG_KEXEC_FILE)		+= machine_kexec_file.o kexec_image.o
 -obj-$(CONFIG_ARM64_RELOC_TEST)		+= arm64-reloc-test.o
 +arm64-obj-$(CONFIG_KEXEC_FILE)		+= machine_kexec_file.o kexec_image.o
 +arm64-obj-$(CONFIG_ARM64_RELOC_TEST)	+= arm64-reloc-test.o
  arm64-reloc-test-y := reloc_test_core.o reloc_test_syms.o
 -obj-$(CONFIG_CRASH_DUMP)		+= crash_dump.o
 -obj-$(CONFIG_CRASH_CORE)		+= crash_core.o
 -obj-$(CONFIG_ARM_SDE_INTERFACE)		+= sdei.o
 -obj-$(CONFIG_ARM64_SSBD)		+= ssbd.o
 -obj-$(CONFIG_ARM64_PTR_AUTH)		+= pointer_auth.o
 +arm64-obj-$(CONFIG_CRASH_DUMP)		+= crash_dump.o
 +arm64-obj-$(CONFIG_ARM_SDE_INTERFACE)	+= sdei.o
 +arm64-obj-$(CONFIG_ARM64_SSBD)		+= ssbd.o
 +arm64-obj-$(CONFIG_ARM64_PTR_AUTH)	+= pointer_auth.o
  
 -obj-y					+= vdso/ probes/
 +obj-y					+= $(arm64-obj-y) vdso/ probes/
 +obj-m					+= $(arm64-obj-m)
  head-y					:= head.o
  extra-y					+= $(head-y) vmlinux.lds
  
* Unmerged path arch/arm64/kernel/Makefile
diff --git a/arch/arm64/kernel/kuser32.S b/arch/arm64/kernel/kuser32.S
index 997e6b27ff6a..c5f2bbafd723 100644
--- a/arch/arm64/kernel/kuser32.S
+++ b/arch/arm64/kernel/kuser32.S
@@ -1,24 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
- * Low-level user helpers placed in the vectors page for AArch32.
+ * AArch32 user helpers.
  * Based on the kuser helpers in arch/arm/kernel/entry-armv.S.
  *
  * Copyright (C) 2005-2011 Nicolas Pitre <nico@fluxnic.net>
- * Copyright (C) 2012 ARM Ltd.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- *
- * AArch32 user helpers.
+ * Copyright (C) 2012-2018 ARM Ltd.
  *
  * Each segment is 32-byte aligned and will be moved to the top of the high
  * vector page.  New segments (if ever needed) must be added in front of
@@ -77,42 +63,3 @@ __kuser_helper_version:			// 0xffff0ffc
 	.word	((__kuser_helper_end - __kuser_helper_start) >> 5)
 	.globl	__kuser_helper_end
 __kuser_helper_end:
-
-/*
- * AArch32 sigreturn code
- *
- * For ARM syscalls, the syscall number has to be loaded into r7.
- * We do not support an OABI userspace.
- *
- * For Thumb syscalls, we also pass the syscall number via r7. We therefore
- * need two 16-bit instructions.
- */
-	.globl __aarch32_sigret_code_start
-__aarch32_sigret_code_start:
-
-	/*
-	 * ARM Code
-	 */
-	.byte	__NR_compat_sigreturn, 0x70, 0xa0, 0xe3	// mov	r7, #__NR_compat_sigreturn
-	.byte	__NR_compat_sigreturn, 0x00, 0x00, 0xef	// svc	#__NR_compat_sigreturn
-
-	/*
-	 * Thumb code
-	 */
-	.byte	__NR_compat_sigreturn, 0x27			// svc	#__NR_compat_sigreturn
-	.byte	__NR_compat_sigreturn, 0xdf			// mov	r7, #__NR_compat_sigreturn
-
-	/*
-	 * ARM code
-	 */
-	.byte	__NR_compat_rt_sigreturn, 0x70, 0xa0, 0xe3	// mov	r7, #__NR_compat_rt_sigreturn
-	.byte	__NR_compat_rt_sigreturn, 0x00, 0x00, 0xef	// svc	#__NR_compat_rt_sigreturn
-
-	/*
-	 * Thumb code
-	 */
-	.byte	__NR_compat_rt_sigreturn, 0x27			// svc	#__NR_compat_rt_sigreturn
-	.byte	__NR_compat_rt_sigreturn, 0xdf			// mov	r7, #__NR_compat_rt_sigreturn
-
-        .globl __aarch32_sigret_code_end
-__aarch32_sigret_code_end:
diff --git a/arch/arm64/kernel/sigreturn32.S b/arch/arm64/kernel/sigreturn32.S
new file mode 100644
index 000000000000..475d30d471ac
--- /dev/null
+++ b/arch/arm64/kernel/sigreturn32.S
@@ -0,0 +1,46 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * AArch32 sigreturn code.
+ * Based on the kuser helpers in arch/arm/kernel/entry-armv.S.
+ *
+ * Copyright (C) 2005-2011 Nicolas Pitre <nico@fluxnic.net>
+ * Copyright (C) 2012-2018 ARM Ltd.
+ *
+ * For ARM syscalls, the syscall number has to be loaded into r7.
+ * We do not support an OABI userspace.
+ *
+ * For Thumb syscalls, we also pass the syscall number via r7. We therefore
+ * need two 16-bit instructions.
+ */
+
+#include <asm/unistd.h>
+
+	.globl __aarch32_sigret_code_start
+__aarch32_sigret_code_start:
+
+	/*
+	 * ARM Code
+	 */
+	.byte	__NR_compat_sigreturn, 0x70, 0xa0, 0xe3		// mov	r7, #__NR_compat_sigreturn
+	.byte	__NR_compat_sigreturn, 0x00, 0x00, 0xef		// svc	#__NR_compat_sigreturn
+
+	/*
+	 * Thumb code
+	 */
+	.byte	__NR_compat_sigreturn, 0x27			// svc	#__NR_compat_sigreturn
+	.byte	__NR_compat_sigreturn, 0xdf			// mov	r7, #__NR_compat_sigreturn
+
+	/*
+	 * ARM code
+	 */
+	.byte	__NR_compat_rt_sigreturn, 0x70, 0xa0, 0xe3	// mov	r7, #__NR_compat_rt_sigreturn
+	.byte	__NR_compat_rt_sigreturn, 0x00, 0x00, 0xef	// svc	#__NR_compat_rt_sigreturn
+
+	/*
+	 * Thumb code
+	 */
+	.byte	__NR_compat_rt_sigreturn, 0x27			// svc	#__NR_compat_rt_sigreturn
+	.byte	__NR_compat_rt_sigreturn, 0xdf			// mov	r7, #__NR_compat_rt_sigreturn
+
+        .globl __aarch32_sigret_code_end
+__aarch32_sigret_code_end:
