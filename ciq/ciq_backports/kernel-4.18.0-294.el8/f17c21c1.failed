block: remove alloc_part_info and free_part_info

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Christoph Hellwig <hch@lst.de>
commit f17c21c1ecb80e957bafa07d6454836854be7cf2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f17c21c1.failed

There isn't any good reason not to simply open code the allocation and
freeing of the partition_meta_info structure.  Especially as one of
the branches in alloc_part_info is entirely dead code.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit f17c21c1ecb80e957bafa07d6454836854be7cf2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/genhd.h
diff --cc include/linux/genhd.h
index f3962de91562,77f8bb8edfcd..000000000000
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@@ -413,20 -465,7 +413,24 @@@ void part_dec_in_flight(struct request_
  void part_inc_in_flight(struct request_queue *q, struct hd_struct *part,
  			int rw);
  
++<<<<<<< HEAD
 +static inline struct partition_meta_info *alloc_part_info(struct gendisk *disk)
 +{
 +	if (disk)
 +		return kzalloc_node(sizeof(struct partition_meta_info),
 +				    GFP_KERNEL, disk->node_id);
 +	return kzalloc(sizeof(struct partition_meta_info), GFP_KERNEL);
 +}
 +
 +static inline void free_part_info(struct hd_struct *part)
 +{
 +	kfree(part->info);
 +}
 +
 +void update_io_ticks(struct hd_struct *part, unsigned long now, bool end);
++=======
+ void update_io_ticks(struct hd_struct *part, unsigned long now);
++>>>>>>> f17c21c1ecb8 (block: remove alloc_part_info and free_part_info)
  
  /* block/genhd.c */
  extern void device_add_disk(struct device *parent, struct gendisk *disk,
diff --git a/block/partition-generic.c b/block/partition-generic.c
index 4fc72fc8f250..946bc03831ab 100644
--- a/block/partition-generic.c
+++ b/block/partition-generic.c
@@ -362,7 +362,9 @@ struct hd_struct *add_partition(struct gendisk *disk, int partno,
 	p->policy = get_disk_ro(disk);
 
 	if (info) {
-		struct partition_meta_info *pinfo = alloc_part_info(disk);
+		struct partition_meta_info *pinfo;
+
+		pinfo = kzalloc_node(sizeof(*pinfo), GFP_KERNEL, disk->node_id);
 		if (!pinfo) {
 			err = -ENOMEM;
 			goto out_free_stats;
@@ -421,7 +423,7 @@ struct hd_struct *add_partition(struct gendisk *disk, int partno,
 	return p;
 
 out_free_info:
-	free_part_info(p);
+	kfree(p->info);
 out_free_stats:
 	free_part_stats(p);
 out_free:
* Unmerged path include/linux/genhd.h
