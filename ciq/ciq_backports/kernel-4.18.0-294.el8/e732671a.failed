block: Modify revalidate zones

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Damien Le Moal <damien.lemoal@wdc.com>
commit e732671aa5f67232cf760666a15242dead003362
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e732671a.failed

Modify the interface of blk_revalidate_disk_zones() to add an optional
driver callback function that a driver can use to extend processing
done during zone revalidation. The callback, if defined, is executed
with the device request queue frozen, after all zones have been
inspected.

	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e732671aa5f67232cf760666a15242dead003362)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/null_blk_zoned.c
diff --cc drivers/block/null_blk_zoned.c
index de6be9eec94a,46641df2e58e..000000000000
--- a/drivers/block/null_blk_zoned.c
+++ b/drivers/block/null_blk_zoned.c
@@@ -68,7 -64,24 +68,24 @@@ int null_zone_init(struct nullb_device 
  	return 0;
  }
  
++<<<<<<< HEAD
 +void null_zone_exit(struct nullb_device *dev)
++=======
+ int null_register_zoned_dev(struct nullb *nullb)
+ {
+ 	struct request_queue *q = nullb->q;
+ 
+ 	if (queue_is_mq(q))
+ 		return blk_revalidate_disk_zones(nullb->disk, NULL);
+ 
+ 	blk_queue_chunk_sectors(q, nullb->dev->zone_size_sects);
+ 	q->nr_zones = blkdev_nr_zones(nullb->disk);
+ 
+ 	return 0;
+ }
+ 
+ void null_free_zoned_dev(struct nullb_device *dev)
++>>>>>>> e732671aa5f6 (block: Modify revalidate zones)
  {
  	kvfree(dev->zones);
  }
diff --git a/block/blk-zoned.c b/block/blk-zoned.c
index 100a51bf3939..623808ceb3ca 100644
--- a/block/blk-zoned.c
+++ b/block/blk-zoned.c
@@ -470,14 +470,19 @@ static int blk_revalidate_zone_cb(struct blk_zone *zone, unsigned int idx,
 /**
  * blk_revalidate_disk_zones - (re)allocate and initialize zone bitmaps
  * @disk:	Target disk
+ * @update_driver_data:	Callback to update driver data on the frozen disk
  *
  * Helper function for low-level device drivers to (re) allocate and initialize
  * a disk request queue zone bitmaps. This functions should normally be called
  * within the disk ->revalidate method for blk-mq based drivers.  For BIO based
  * drivers only q->nr_zones needs to be updated so that the sysfs exposed value
  * is correct.
+ * If the @update_driver_data callback function is not NULL, the callback is
+ * executed with the device request queue frozen after all zones have been
+ * checked.
  */
-int blk_revalidate_disk_zones(struct gendisk *disk)
+int blk_revalidate_disk_zones(struct gendisk *disk,
+			      void (*update_driver_data)(struct gendisk *disk))
 {
 	struct request_queue *q = disk->queue;
 	struct blk_revalidate_zone_args args = {
@@ -511,6 +516,8 @@ int blk_revalidate_disk_zones(struct gendisk *disk)
 		q->nr_zones = args.nr_zones;
 		swap(q->seq_zones_wlock, args.seq_zones_wlock);
 		swap(q->conv_zones_bitmap, args.conv_zones_bitmap);
+		if (update_driver_data)
+			update_driver_data(disk);
 		ret = 0;
 	} else {
 		pr_warn("%s: failed to revalidate zones\n", disk->disk_name);
* Unmerged path drivers/block/null_blk_zoned.c
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 43b1486e0588..2d556e84c7e3 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -374,7 +374,8 @@ unsigned int blkdev_nr_zones(struct gendisk *disk);
 extern int blkdev_zone_mgmt(struct block_device *bdev, enum req_opf op,
 			    sector_t sectors, sector_t nr_sectors,
 			    gfp_t gfp_mask);
-extern int blk_revalidate_disk_zones(struct gendisk *disk);
+int blk_revalidate_disk_zones(struct gendisk *disk,
+			      void (*update_driver_data)(struct gendisk *disk));
 
 extern int blkdev_report_zones_ioctl(struct block_device *bdev, fmode_t mode,
 				     unsigned int cmd, unsigned long arg);
