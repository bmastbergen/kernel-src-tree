posix-clocks: Introduce clock_get_ktime() callback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrei Vagin <avagin@gmail.com>
commit 9c71a2e8a757bc6aee256bc97c6fb711144b0a0f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9c71a2e8.failed

The callsite in common_timer_get() has already a comment:
    /*
     * The timespec64 based conversion is suboptimal, but it's not
     * worth to implement yet another callback.
     */
    kc->clock_get(timr->it_clock, &ts64);
    now = timespec64_to_ktime(ts64);

The upcoming support for time namespaces requires to have access to:

 - The time in a task's time namespace for sys_clock_gettime()
 - The time in the root name space for common_timer_get()

That adds a valid reason to finally implement a separate callback which
returns the time in ktime_t format.

	Suggested-by: Thomas Gleixner <tglx@linutronix.de>
Co-developed-by: Dmitry Safonov <dima@arista.com>
	Signed-off-by: Andrei Vagin <avagin@gmail.com>
	Signed-off-by: Dmitry Safonov <dima@arista.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lore.kernel.org/r/20191112012724.250792-10-dima@arista.com


(cherry picked from commit 9c71a2e8a757bc6aee256bc97c6fb711144b0a0f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/time/alarmtimer.c
#	kernel/time/posix-timers.c
#	kernel/time/posix-timers.h
diff --cc kernel/time/alarmtimer.c
index b61e59cbf58a,4d8c90546635..000000000000
--- a/kernel/time/alarmtimer.c
+++ b/kernel/time/alarmtimer.c
@@@ -667,9 -663,9 +667,9 @@@ static int alarm_clock_getres(const clo
   * @which_clock: clockid
   * @tp: timespec to fill.
   *
-  * Provides the underlying alarm base time.
+  * Provides the underlying alarm base time in a tasks time namespace.
   */
 -static int alarm_clock_get_timespec(clockid_t which_clock, struct timespec64 *tp)
 +static int alarm_clock_get(clockid_t which_clock, struct timespec64 *tp)
  {
  	struct alarm_base *base = &alarm_bases[clock2alarm(which_clock)];
  
@@@ -844,7 -856,8 +860,12 @@@ static int alarm_timer_nsleep(const clo
  
  const struct k_clock alarm_clock = {
  	.clock_getres		= alarm_clock_getres,
++<<<<<<< HEAD
 +	.clock_get		= alarm_clock_get,
++=======
+ 	.clock_get_ktime	= alarm_clock_get_ktime,
+ 	.clock_get_timespec	= alarm_clock_get_timespec,
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  	.timer_create		= alarm_timer_create,
  	.timer_set		= common_timer_set,
  	.timer_del		= common_timer_del,
diff --cc kernel/time/posix-timers.c
index 01e4d34a4403,a1f6b968c5d8..000000000000
--- a/kernel/time/posix-timers.c
+++ b/kernel/time/posix-timers.c
@@@ -258,7 -238,12 +268,16 @@@ static int posix_get_boottime(const clo
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int posix_get_tai(clockid_t which_clock, struct timespec64 *tp)
++=======
+ static ktime_t posix_get_boottime_ktime(const clockid_t which_clock)
+ {
+ 	return ktime_get_boottime();
+ }
+ 
+ static int posix_get_tai_timespec(clockid_t which_clock, struct timespec64 *tp)
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  {
  	ktime_get_clocktai_ts64(tp);
  	return 0;
@@@ -812,7 -801,7 +836,11 @@@ static void common_hrtimer_arm(struct k
  	 * Posix magic: Relative CLOCK_REALTIME timers are not affected by
  	 * clock modifications, so they become CLOCK_MONOTONIC based under the
  	 * hood. See hrtimer_init(). Update timr->kclock, so the generic
++<<<<<<< HEAD
 +	 * functions which use timr->kclock->clock_get() work.
++=======
+ 	 * functions which use timr->kclock->clock_get_*() work.
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  	 *
  	 * Note: it_clock stays unmodified, because the next timer_set() might
  	 * use ABSTIME, so it needs to switch back.
@@@ -1307,7 -1281,8 +1335,12 @@@ COMPAT_SYSCALL_DEFINE4(clock_nanosleep
  
  static const struct k_clock clock_realtime = {
  	.clock_getres		= posix_get_hrtimer_res,
++<<<<<<< HEAD
 +	.clock_get		= posix_clock_realtime_get,
++=======
+ 	.clock_get_timespec	= posix_get_realtime_timespec,
+ 	.clock_get_ktime	= posix_get_realtime_ktime,
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  	.clock_set		= posix_clock_realtime_set,
  	.clock_adj		= posix_clock_realtime_adj,
  	.nsleep			= common_nsleep,
@@@ -1325,7 -1300,8 +1358,12 @@@
  
  static const struct k_clock clock_monotonic = {
  	.clock_getres		= posix_get_hrtimer_res,
++<<<<<<< HEAD
 +	.clock_get		= posix_ktime_get_ts,
++=======
+ 	.clock_get_timespec	= posix_get_monotonic_timespec,
+ 	.clock_get_ktime	= posix_get_monotonic_ktime,
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  	.nsleep			= common_nsleep,
  	.timer_create		= common_timer_create,
  	.timer_set		= common_timer_set,
@@@ -1356,7 -1332,8 +1394,12 @@@ static const struct k_clock clock_monot
  
  static const struct k_clock clock_tai = {
  	.clock_getres		= posix_get_hrtimer_res,
++<<<<<<< HEAD
 +	.clock_get		= posix_get_tai,
++=======
+ 	.clock_get_ktime	= posix_get_tai_ktime,
+ 	.clock_get_timespec	= posix_get_tai_timespec,
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  	.nsleep			= common_nsleep,
  	.timer_create		= common_timer_create,
  	.timer_set		= common_timer_set,
@@@ -1372,7 -1349,8 +1415,12 @@@
  
  static const struct k_clock clock_boottime = {
  	.clock_getres		= posix_get_hrtimer_res,
++<<<<<<< HEAD
 +	.clock_get		= posix_get_boottime,
++=======
+ 	.clock_get_ktime	= posix_get_boottime_ktime,
+ 	.clock_get_timespec	= posix_get_boottime_timespec,
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  	.nsleep			= common_nsleep,
  	.timer_create		= common_timer_create,
  	.timer_set		= common_timer_set,
diff --cc kernel/time/posix-timers.h
index 7f9bc8539783,f32a2ebba9b8..000000000000
--- a/kernel/time/posix-timers.h
+++ b/kernel/time/posix-timers.h
@@@ -6,9 -6,12 +6,18 @@@ struct k_clock 
  				struct timespec64 *tp);
  	int	(*clock_set)(const clockid_t which_clock,
  			     const struct timespec64 *tp);
++<<<<<<< HEAD
 +	int	(*clock_get)(const clockid_t which_clock,
 +			     struct timespec64 *tp);
 +	int	(*clock_adj)(const clockid_t which_clock, struct timex *tx);
++=======
+ 	/* Returns the clock value in the current time namespace. */
+ 	int	(*clock_get_timespec)(const clockid_t which_clock,
+ 				      struct timespec64 *tp);
+ 	/* Returns the clock value in the root time namespace. */
+ 	ktime_t	(*clock_get_ktime)(const clockid_t which_clock);
+ 	int	(*clock_adj)(const clockid_t which_clock, struct __kernel_timex *tx);
++>>>>>>> 9c71a2e8a757 (posix-clocks: Introduce clock_get_ktime() callback)
  	int	(*timer_create)(struct k_itimer *timer);
  	int	(*nsleep)(const clockid_t which_clock, int flags,
  			  const struct timespec64 *);
* Unmerged path kernel/time/alarmtimer.c
* Unmerged path kernel/time/posix-timers.c
* Unmerged path kernel/time/posix-timers.h
