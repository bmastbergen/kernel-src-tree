x86/idt: Make IDT init functions static inlines

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] idt: Make IDT init functions static inlines (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 95.56%
commit-author Joerg Roedel <jroedel@suse.de>
commit 097ee5b778b8970e1c2ed3ca1631b297d90acd61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/097ee5b7.failed

Move these two functions from kernel/idt.c to include/asm/desc.h:

	* init_idt_data()
	* idt_init_desc()

These functions are needed to setup IDT entries very early and need to
be called from head64.c. To be usable this early, these functions need
to be compiled without instrumentation and the stack-protector feature.

These features need to be kept enabled for kernel/idt.c, so head64.c
must use its own versions.

 [ bp: Take Kees' suggested patch title and add his Rev-by. ]

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Kees Cook <keescook@chromium.org>
Link: https://lkml.kernel.org/r/20200907131613.12703-35-joro@8bytes.org
(cherry picked from commit 097ee5b778b8970e1c2ed3ca1631b297d90acd61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/idt.c
diff --cc arch/x86/kernel/idt.c
index cdf4700ac5e2,4bb4e3d6099e..000000000000
--- a/arch/x86/kernel/idt.c
+++ b/arch/x86/kernel/idt.c
@@@ -171,48 -158,20 +164,52 @@@ struct desc_ptr idt_descr __ro_after_in
  	.address	= (unsigned long) idt_table,
  };
  
 -void load_current_idt(void)
 -{
 -	lockdep_assert_irqs_disabled();
 -	load_idt(&idt_descr);
 -}
 +#ifdef CONFIG_X86_64
 +/* No need to be aligned, but done to keep all IDTs defined the same way. */
 +gate_desc debug_idt_table[IDT_ENTRIES] __page_aligned_bss;
 +
 +/*
 + * The exceptions which use Interrupt stacks. They are setup after
 + * cpu_init() when the TSS has been initialized.
 + */
 +static const __initconst struct idt_data ist_idts[] = {
 +	ISTG(X86_TRAP_DB,	debug,		DEBUG_STACK),
 +	ISTG(X86_TRAP_NMI,	nmi,		NMI_STACK),
 +	ISTG(X86_TRAP_DF,	double_fault,	DOUBLEFAULT_STACK),
 +#ifdef CONFIG_X86_MCE
 +	ISTG(X86_TRAP_MC,	&machine_check,	MCE_STACK),
 +#endif
 +};
 +
 +/*
 + * Override for the debug_idt. Same as the default, but with interrupt
 + * stack set to DEFAULT_STACK (0). Required for NMI trap handling.
 + */
 +const struct desc_ptr debug_idt_descr = {
 +	.size		= IDT_ENTRIES * 16 - 1,
 +	.address	= (unsigned long) debug_idt_table,
 +};
 +#endif
  
 -#ifdef CONFIG_X86_F00F_BUG
 -bool idt_is_f00f_address(unsigned long address)
++<<<<<<< HEAD
 +static inline void idt_init_desc(gate_desc *gate, const struct idt_data *d)
  {
 -	return ((address - idt_descr.address) >> 3) == 6;
 -}
 +	unsigned long addr = (unsigned long) d->addr;
 +
 +	gate->offset_low	= (u16) addr;
 +	gate->segment		= (u16) d->segment;
 +	gate->bits		= d->bits;
 +	gate->offset_middle	= (u16) (addr >> 16);
 +#ifdef CONFIG_X86_64
 +	gate->offset_high	= (u32) (addr >> 32);
 +	gate->reserved		= 0;
  #endif
 +}
  
 +static void
++=======
+ static __init void
++>>>>>>> 097ee5b778b8 (x86/idt: Make IDT init functions static inlines)
  idt_setup_from_table(gate_desc *idt, const struct idt_data *t, int size, bool sys)
  {
  	gate_desc desc;
@@@ -225,7 -184,7 +222,11 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static void set_intr_gate(unsigned int n, const void *addr)
++=======
+ static __init void set_intr_gate(unsigned int n, const void *addr)
++>>>>>>> 097ee5b778b8 (x86/idt: Make IDT init functions static inlines)
  {
  	struct idt_data data;
  
diff --git a/arch/x86/include/asm/desc.h b/arch/x86/include/asm/desc.h
index 13c5ee878a47..f9a4b3255a81 100644
--- a/arch/x86/include/asm/desc.h
+++ b/arch/x86/include/asm/desc.h
@@ -389,6 +389,33 @@ static inline void set_desc_limit(struct desc_struct *desc, unsigned long limit)
 void update_intr_gate(unsigned int n, const void *addr);
 void alloc_intr_gate(unsigned int n, const void *addr);
 
+static inline void init_idt_data(struct idt_data *data, unsigned int n,
+				 const void *addr)
+{
+	BUG_ON(n > 0xFF);
+
+	memset(data, 0, sizeof(*data));
+	data->vector	= n;
+	data->addr	= addr;
+	data->segment	= __KERNEL_CS;
+	data->bits.type	= GATE_INTERRUPT;
+	data->bits.p	= 1;
+}
+
+static inline void idt_init_desc(gate_desc *gate, const struct idt_data *d)
+{
+	unsigned long addr = (unsigned long) d->addr;
+
+	gate->offset_low	= (u16) addr;
+	gate->segment		= (u16) d->segment;
+	gate->bits		= d->bits;
+	gate->offset_middle	= (u16) (addr >> 16);
+#ifdef CONFIG_X86_64
+	gate->offset_high	= (u32) (addr >> 32);
+	gate->reserved		= 0;
+#endif
+}
+
 extern unsigned long system_vectors[];
 
 #ifdef CONFIG_X86_64
diff --git a/arch/x86/include/asm/desc_defs.h b/arch/x86/include/asm/desc_defs.h
index a91f3b6e4f2a..8dddd727b431 100644
--- a/arch/x86/include/asm/desc_defs.h
+++ b/arch/x86/include/asm/desc_defs.h
@@ -74,6 +74,13 @@ struct idt_bits {
 			p	: 1;
 } __attribute__((packed));
 
+struct idt_data {
+	unsigned int	vector;
+	unsigned int	segment;
+	struct idt_bits	bits;
+	const void	*addr;
+};
+
 struct gate_struct {
 	u16		offset_low;
 	u16		segment;
* Unmerged path arch/x86/kernel/idt.c
