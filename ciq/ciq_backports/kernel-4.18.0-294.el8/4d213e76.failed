iommu/vt-d: Avoid panic if iommu init fails in tboot system

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Zhenzhong Duan <zhenzhong.duan@gmail.com>
commit 4d213e76a359e540ca786ee937da7f35faa8e5f8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/4d213e76.failed

"intel_iommu=off" command line is used to disable iommu but iommu is force
enabled in a tboot system for security reason.

However for better performance on high speed network device, a new option
"intel_iommu=tboot_noforce" is introduced to disable the force on.

By default kernel should panic if iommu init fail in tboot for security
reason, but it's unnecessory if we use "intel_iommu=tboot_noforce,off".

Fix the code setting force_on and move intel_iommu_tboot_noforce
from tboot code to intel iommu code.

Fixes: 7304e8f28bb2 ("iommu/vt-d: Correctly disable Intel IOMMU force on")
	Signed-off-by: Zhenzhong Duan <zhenzhong.duan@gmail.com>
	Tested-by: Lukasz Hawrylko <lukasz.hawrylko@linux.intel.com>
	Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
Link: https://lore.kernel.org/r/20201110071908.3133-1-zhenzhong.duan@gmail.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 4d213e76a359e540ca786ee937da7f35faa8e5f8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/intel-iommu.h
diff --cc include/linux/intel-iommu.h
index 20ac0ba90201,d956987ed032..000000000000
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@@ -725,7 -798,7 +725,11 @@@ extern int iommu_calculate_agaw(struct 
  extern int iommu_calculate_max_sagaw(struct intel_iommu *iommu);
  extern int dmar_disabled;
  extern int intel_iommu_enabled;
++<<<<<<< HEAD
 +extern int intel_iommu_tboot_noforce;
++=======
+ extern int intel_iommu_gfx_mapped;
++>>>>>>> 4d213e76a359 (iommu/vt-d: Avoid panic if iommu init fails in tboot system)
  #else
  static inline int iommu_calculate_agaw(struct intel_iommu *iommu)
  {
diff --git a/arch/x86/kernel/tboot.c b/arch/x86/kernel/tboot.c
index 6e5ef8fb8a02..ccad2bc074eb 100644
--- a/arch/x86/kernel/tboot.c
+++ b/arch/x86/kernel/tboot.c
@@ -525,9 +525,6 @@ int tboot_force_iommu(void)
 	if (!tboot_enabled())
 		return 0;
 
-	if (intel_iommu_tboot_noforce)
-		return 1;
-
 	if (no_iommu || swiotlb || dmar_disabled)
 		pr_warning("Forcing Intel-IOMMU to enabled\n");
 
diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index eb1b9e34254e..6a9787fe7be9 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -186,7 +186,7 @@ static int rwbf_quirk;
  * (used when kernel is launched w/ TXT)
  */
 static int force_on = 0;
-int intel_iommu_tboot_noforce;
+static int intel_iommu_tboot_noforce;
 static int no_platform_optin;
 
 #define ROOT_ENTRY_NR (VTD_PAGE_SIZE/sizeof(struct root_entry))
@@ -4675,7 +4675,8 @@ int __init intel_iommu_init(void)
 	 * Intel IOMMU is required for a TXT/tboot launch or platform
 	 * opt in, so enforce that.
 	 */
-	force_on = tboot_force_iommu() || platform_optin_force_iommu();
+	force_on = (!intel_iommu_tboot_noforce && tboot_force_iommu()) ||
+		    platform_optin_force_iommu();
 
 	if (iommu_init_mempool()) {
 		if (force_on)
* Unmerged path include/linux/intel-iommu.h
