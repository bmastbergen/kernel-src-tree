irq_work: Fix irq_work_claim() memory ordering

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Frederic Weisbecker <frederic@kernel.org>
commit 25269871db1ad0cbbaafd5098cbdb40c8db4ccb9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/25269871.failed

When irq_work_claim() finds IRQ_WORK_PENDING flag already set, we just
return and don't raise a new IPI. We expect the destination to see
and handle our latest updades thanks to the pairing atomic_xchg()
in irq_work_run_list().

But cmpxchg() doesn't guarantee a full memory barrier upon failure. So
it's possible that the destination misses our latest updates.

So use atomic_fetch_or() instead that is unconditionally fully ordered
and also performs exactly what we want here and simplify the code.

	Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Paul E . McKenney <paulmck@linux.vnet.ibm.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20191108160858.31665-3-frederic@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 25269871db1ad0cbbaafd5098cbdb40c8db4ccb9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/irq_work.c
diff --cc kernel/irq_work.c
index 73288914ed5e,255454a48346..000000000000
--- a/kernel/irq_work.c
+++ b/kernel/irq_work.c
@@@ -28,24 -29,16 +28,35 @@@ static DEFINE_PER_CPU(struct llist_head
   */
  static bool irq_work_claim(struct irq_work *work)
  {
++<<<<<<< HEAD
 +	unsigned long flags, oflags, nflags;
++=======
+ 	int oflags;
++>>>>>>> 25269871db1a (irq_work: Fix irq_work_claim() memory ordering)
  
+ 	oflags = atomic_fetch_or(IRQ_WORK_CLAIMED, &work->flags);
  	/*
- 	 * Start with our best wish as a premise but only trust any
- 	 * flag value after cmpxchg() result.
+ 	 * If the work is already pending, no need to raise the IPI.
+ 	 * The pairing atomic_xchg() in irq_work_run() makes sure
+ 	 * everything we did before is visible.
  	 */
++<<<<<<< HEAD
 +	flags = work->flags & ~IRQ_WORK_PENDING;
 +	for (;;) {
 +		nflags = flags | IRQ_WORK_CLAIMED;
 +		oflags = cmpxchg(&work->flags, flags, nflags);
 +		if (oflags == flags)
 +			break;
 +		if (oflags & IRQ_WORK_PENDING)
 +			return false;
 +		flags = oflags;
 +		cpu_relax();
 +	}
 +
++=======
+ 	if (oflags & IRQ_WORK_PENDING)
+ 		return false;
++>>>>>>> 25269871db1a (irq_work: Fix irq_work_claim() memory ordering)
  	return true;
  }
  
* Unmerged path kernel/irq_work.c
