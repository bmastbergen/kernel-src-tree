powerpc/test_emulate_step: Enhancement to test negative scenarios

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Balamuruhan S <bala24@linux.ibm.com>
commit 93c3a0ba2a0863a5c82a518d64044434f82a57f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/93c3a0ba.failed

add provision to declare test is a negative scenario, verify
whether emulation fails and avoid executing it.

	Signed-off-by: Balamuruhan S <bala24@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200626095158.1031507-2-bala24@linux.ibm.com
(cherry picked from commit 93c3a0ba2a0863a5c82a518d64044434f82a57f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/lib/test_emulate_step.c
diff --cc arch/powerpc/lib/test_emulate_step.c
index 36931d06bd76,31065e986ff0..000000000000
--- a/arch/powerpc/lib/test_emulate_step.c
+++ b/arch/powerpc/lib/test_emulate_step.c
@@@ -64,7 -18,41 +64,8 @@@
  #define IGNORE_GPR(n)	(0x1UL << (n))
  #define IGNORE_XER	(0x1UL << 32)
  #define IGNORE_CCR	(0x1UL << 33)
+ #define NEGATIVE_TEST	(0x1UL << 63)
  
 -#define TEST_PLD(r, base, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_INST_PLD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -
 -#define TEST_PLWZ(r, base, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_RAW_LWZ(r, base, i))
 -
 -#define TEST_PSTD(r, base, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_INST_PSTD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -
 -#define TEST_PLFS(r, base, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_INST_LFS | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -
 -#define TEST_PSTFS(r, base, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_INST_STFS | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -
 -#define TEST_PLFD(r, base, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_INST_LFD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -
 -#define TEST_PSTFD(r, base, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_INST_STFD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
 -
 -#define TEST_PADDI(t, a, i, pr) \
 -	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
 -			PPC_RAW_ADDI(t, a, i))
 -
 -
  static void __init init_pt_regs(struct pt_regs *regs)
  {
  	static unsigned long msr;
@@@ -847,8 -1136,10 +848,14 @@@ static struct compute_test compute_test
  };
  
  static int __init emulate_compute_instr(struct pt_regs *regs,
++<<<<<<< HEAD
 +					unsigned int instr)
++=======
+ 					struct ppc_inst instr,
+ 					bool negative)
++>>>>>>> 93c3a0ba2a08 (powerpc/test_emulate_step: Enhancement to test negative scenarios)
  {
+ 	int analysed;
  	extern s32 patch__exec_instr;
  	struct instruction_op op;
  
@@@ -857,13 -1148,17 +864,23 @@@
  
  	regs->nip = patch_site_addr(&patch__exec_instr);
  
++<<<<<<< HEAD
 +	if (analyse_instr(&op, regs, instr) != 1 ||
 +	    GETTYPE(op.type) != COMPUTE) {
 +		pr_info("emulation failed, instruction = 0x%08x\n", instr);
++=======
+ 	analysed = analyse_instr(&op, regs, instr);
+ 	if (analysed != 1 || GETTYPE(op.type) != COMPUTE) {
+ 		if (negative)
+ 			return -EFAULT;
+ 		pr_info("emulation failed, instruction = %s\n", ppc_inst_as_str(instr));
++>>>>>>> 93c3a0ba2a08 (powerpc/test_emulate_step: Enhancement to test negative scenarios)
  		return -EFAULT;
  	}
- 
- 	emulate_update_regs(regs, &op);
+ 	if (analysed == 1 && negative)
+ 		pr_info("negative test failed, instruction = %s\n", ppc_inst_as_str(instr));
+ 	if (!negative)
+ 		emulate_update_regs(regs, &op);
  	return 0;
  }
  
@@@ -899,8 -1194,9 +916,14 @@@ static void __init run_tests_compute(vo
  	unsigned long flags;
  	struct compute_test *test;
  	struct pt_regs *regs, exp, got;
++<<<<<<< HEAD
 +	unsigned int i, j, k, instr;
 +	bool ignore_gpr, ignore_xer, ignore_ccr, passed;
++=======
+ 	unsigned int i, j, k;
+ 	struct ppc_inst instr;
+ 	bool ignore_gpr, ignore_xer, ignore_ccr, passed, rc, negative;
++>>>>>>> 93c3a0ba2a08 (powerpc/test_emulate_step: Enhancement to test negative scenarios)
  
  	for (i = 0; i < ARRAY_SIZE(compute_tests); i++) {
  		test = &compute_tests[i];
* Unmerged path arch/powerpc/lib/test_emulate_step.c
