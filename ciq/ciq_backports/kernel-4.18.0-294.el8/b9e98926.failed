net: atlantic: make TCVEC2RING accept nic_cfg

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mark Starovoytov <mstarovoitov@marvell.com>
commit b9e989262a3e2e9b795361a7e7978d64851eb98f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b9e98926.failed

This patch updates TCVEC2RING to accept nic_cfg, which is needed to be able
to use it from hw_atl.
The name is updated to reflect the changes.

	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b9e989262a3e2e9b795361a7e7978d64851eb98f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.c
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.h
#	drivers/net/ethernet/aquantia/atlantic/aq_vec.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
index a64230722f5c,90a52a4b2d48..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
@@@ -141,16 -244,111 +141,46 @@@ static void aq_ethtool_get_strings(stru
  		memcpy(p, aq_ethtool_stat_names,
  		       sizeof(aq_ethtool_stat_names));
  		p = p + sizeof(aq_ethtool_stat_names);
++<<<<<<< HEAD
 +		for (i = 0; i < cfg->vecs; i++) {
++=======
+ 
+ 		for (tc = 0; tc < cfg->tcs; tc++) {
+ 			if (cfg->is_qos)
+ 				snprintf(tc_string, 8, "TC%d ", tc);
+ 
+ 			for (i = 0; i < cfg->vecs; i++) {
+ 				for (si = 0; si < stat_cnt; si++) {
+ 					snprintf(p, ETH_GSTRING_LEN,
+ 					     aq_ethtool_queue_stat_names[si],
+ 					     tc_string,
+ 					     AQ_NIC_CFG_TCVEC2RING(cfg, tc, i));
+ 					p += ETH_GSTRING_LEN;
+ 				}
+ 			}
+ 		}
+ #if IS_ENABLED(CONFIG_MACSEC)
+ 		if (!nic->macsec_cfg)
+ 			break;
+ 
+ 		memcpy(p, aq_macsec_stat_names, sizeof(aq_macsec_stat_names));
+ 		p = p + sizeof(aq_macsec_stat_names);
+ 		for (i = 0; i < AQ_MACSEC_MAX_SC; i++) {
+ 			struct aq_macsec_txsc *aq_txsc;
+ 
+ 			if (!(test_bit(i, &nic->macsec_cfg->txsc_idx_busy)))
+ 				continue;
+ 
++>>>>>>> b9e989262a3e (net: atlantic: make TCVEC2RING accept nic_cfg)
  			for (si = 0;
 -				si < ARRAY_SIZE(aq_macsec_txsc_stat_names);
 +				si < ARRAY_SIZE(aq_ethtool_queue_stat_names);
  				si++) {
  				snprintf(p, ETH_GSTRING_LEN,
 -					 aq_macsec_txsc_stat_names[si], i);
 +					 aq_ethtool_queue_stat_names[si], i);
  				p += ETH_GSTRING_LEN;
  			}
 -			aq_txsc = &nic->macsec_cfg->aq_txsc[i];
 -			for (sa = 0; sa < MACSEC_NUM_AN; sa++) {
 -				if (!(test_bit(sa, &aq_txsc->tx_sa_idx_busy)))
 -					continue;
 -				for (si = 0;
 -				     si < ARRAY_SIZE(aq_macsec_txsa_stat_names);
 -				     si++) {
 -					snprintf(p, ETH_GSTRING_LEN,
 -						 aq_macsec_txsa_stat_names[si],
 -						 i, sa);
 -					p += ETH_GSTRING_LEN;
 -				}
 -			}
  		}
 -		for (i = 0; i < AQ_MACSEC_MAX_SC; i++) {
 -			struct aq_macsec_rxsc *aq_rxsc;
 -
 -			if (!(test_bit(i, &nic->macsec_cfg->rxsc_idx_busy)))
 -				continue;
 -
 -			aq_rxsc = &nic->macsec_cfg->aq_rxsc[i];
 -			for (sa = 0; sa < MACSEC_NUM_AN; sa++) {
 -				if (!(test_bit(sa, &aq_rxsc->rx_sa_idx_busy)))
 -					continue;
 -				for (si = 0;
 -				     si < ARRAY_SIZE(aq_macsec_rxsa_stat_names);
 -				     si++) {
 -					snprintf(p, ETH_GSTRING_LEN,
 -						 aq_macsec_rxsa_stat_names[si],
 -						 i, sa);
 -					p += ETH_GSTRING_LEN;
 -				}
 -			}
 -		}
 -#endif
 -		break;
 -	}
 -	case ETH_SS_PRIV_FLAGS:
 -		memcpy(p, aq_ethtool_priv_flag_names,
 -		       sizeof(aq_ethtool_priv_flag_names));
 -		break;
 -	}
 -}
 -
 -static int aq_ethtool_set_phys_id(struct net_device *ndev,
 -				  enum ethtool_phys_id_state state)
 -{
 -	struct aq_nic_s *aq_nic = netdev_priv(ndev);
 -	struct aq_hw_s *hw = aq_nic->aq_hw;
 -	int ret = 0;
 -
 -	if (!aq_nic->aq_fw_ops->led_control)
 -		return -EOPNOTSUPP;
 -
 -	mutex_lock(&aq_nic->fwreq_mutex);
 -
 -	switch (state) {
 -	case ETHTOOL_ID_ACTIVE:
 -		ret = aq_nic->aq_fw_ops->led_control(hw, AQ_HW_LED_BLINK |
 -				 AQ_HW_LED_BLINK << 2 | AQ_HW_LED_BLINK << 4);
 -		break;
 -	case ETHTOOL_ID_INACTIVE:
 -		ret = aq_nic->aq_fw_ops->led_control(hw, AQ_HW_LED_DEFAULT);
 -		break;
 -	default:
 -		break;
  	}
 -
 -	mutex_unlock(&aq_nic->fwreq_mutex);
 -
 -	return ret;
  }
  
  static int aq_ethtool_get_sset_count(struct net_device *ndev, int stringset)
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index ed7d344e3ed7,b2ef0115c293..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@@ -576,10 -701,11 +576,16 @@@ exit
  
  int aq_nic_xmit(struct aq_nic_s *self, struct sk_buff *skb)
  {
++<<<<<<< HEAD
++=======
+ 	struct aq_nic_cfg_s *cfg = aq_nic_get_cfg(self);
+ 	unsigned int vec = skb->queue_mapping % cfg->vecs;
+ 	unsigned int tc = skb->queue_mapping / cfg->vecs;
++>>>>>>> b9e989262a3e (net: atlantic: make TCVEC2RING accept nic_cfg)
  	struct aq_ring_s *ring = NULL;
  	unsigned int frags = 0U;
 +	unsigned int vec = skb->queue_mapping % self->aq_nic_cfg.vecs;
 +	unsigned int tc = 0U;
  	int err = NETDEV_TX_OK;
  
  	frags = skb_shinfo(skb)->nr_frags + 1;
@@@ -593,8 -719,14 +599,16 @@@
  
  	aq_ring_update_queue_state(ring);
  
++<<<<<<< HEAD
++=======
+ 	if (cfg->priv_flags & BIT(AQ_HW_LOOPBACK_DMA_NET)) {
+ 		err = NETDEV_TX_BUSY;
+ 		goto err_exit;
+ 	}
+ 
++>>>>>>> b9e989262a3e (net: atlantic: make TCVEC2RING accept nic_cfg)
  	/* Above status update may stop the queue. Check this. */
 -	if (__netif_subqueue_stopped(self->ndev,
 -				     AQ_NIC_RING2QMAP(self, ring->idx))) {
 +	if (__netif_subqueue_stopped(self->ndev, ring->idx)) {
  		err = NETDEV_TX_BUSY;
  		goto err_exit;
  	}
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.h
index f6d04351e098,6cc2ebfe6a44..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
@@@ -58,10 -78,19 +58,26 @@@ struct aq_nic_cfg_s 
  #define AQ_NIC_FLAG_ERR_UNPLUG  0x40000000U
  #define AQ_NIC_FLAG_ERR_HW      0x80000000U
  
++<<<<<<< HEAD
 +#define AQ_NIC_WOL_ENABLED	BIT(0)
 +
 +#define AQ_NIC_TCVEC2RING(_NIC_, _TC_, _VEC_) \
 +	((_TC_) * AQ_CFG_TCS_MAX + (_VEC_))
++=======
+ #define AQ_NIC_WOL_MODES        (WAKE_MAGIC |\
+ 				 WAKE_PHY)
+ 
+ #define AQ_NIC_CFG_RING_PER_TC(_NIC_CFG_) \
+ 	(((_NIC_CFG_)->tc_mode == AQ_TC_MODE_4TCS) ? 8 : 4)
+ 
+ #define AQ_NIC_CFG_TCVEC2RING(_NIC_CFG_, _TC_, _VEC_) \
+ 	((_TC_) * AQ_NIC_CFG_RING_PER_TC(_NIC_CFG_) + (_VEC_))
+ 
+ #define AQ_NIC_RING2QMAP(_NIC_, _ID_) \
+ 	((_ID_) / AQ_NIC_CFG_RING_PER_TC(&(_NIC_)->aq_nic_cfg) * \
+ 		(_NIC_)->aq_vecs + \
+ 	((_ID_) % AQ_NIC_CFG_RING_PER_TC(&(_NIC_)->aq_nic_cfg)))
++>>>>>>> b9e989262a3e (net: atlantic: make TCVEC2RING accept nic_cfg)
  
  struct aq_hw_rx_fl2 {
  	struct aq_rx_filter_vlan aq_vlans[AQ_VLAN_MAX_FILTERS];
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_vec.c
index e9e3905626ba,d1d43c8ce400..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
@@@ -131,10 -123,20 +131,15 @@@ struct aq_vec_s *aq_vec_alloc(struct aq
  	netif_napi_add(aq_nic_get_ndev(aq_nic), &self->napi,
  		       aq_vec_poll, AQ_CFG_NAPI_WEIGHT);
  
 -err_exit:
 -	return self;
 -}
 -
 -int aq_vec_ring_alloc(struct aq_vec_s *self, struct aq_nic_s *aq_nic,
 -		      unsigned int idx, struct aq_nic_cfg_s *aq_nic_cfg)
 -{
 -	struct aq_ring_s *ring = NULL;
 -	unsigned int i = 0U;
 -	int err = 0;
 -
  	for (i = 0; i < aq_nic_cfg->tcs; ++i) {
++<<<<<<< HEAD
 +		unsigned int idx_ring = AQ_NIC_TCVEC2RING(self->nic,
 +						self->tx_rings,
 +						self->aq_ring_param.vec_idx);
++=======
+ 		const unsigned int idx_ring = AQ_NIC_CFG_TCVEC2RING(aq_nic_cfg,
+ 								    i, idx);
++>>>>>>> b9e989262a3e (net: atlantic: make TCVEC2RING accept nic_cfg)
  
  		ring = aq_ring_tx_alloc(&self->ring[i][AQ_VEC_TX_ID], aq_nic,
  					idx_ring, aq_nic_cfg);
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_vec.c
