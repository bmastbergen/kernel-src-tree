khugepaged: allow to collapse PTE-mapped compound pages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit 5503fbf2b0b80c1a47a7dca0e4f060f52f522cfd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5503fbf2.failed

We can collapse PTE-mapped compound pages.  We only need to avoid handling
them more than once: lock/unlock page only once if it's present in the PMD
range multiple times as it handled on compound level.  The same goes for
LRU isolation and putback.

	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Tested-by: Zi Yan <ziy@nvidia.com>
	Reviewed-by: William Kucharski <william.kucharski@oracle.com>
	Reviewed-by: Zi Yan <ziy@nvidia.com>
	Acked-by: Yang Shi <yang.shi@linux.alibaba.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: John Hubbard <jhubbard@nvidia.com>
	Cc: Mike Kravetz <mike.kravetz@oracle.com>
	Cc: Ralph Campbell <rcampbell@nvidia.com>
Link: http://lkml.kernel.org/r/20200416160026.16538-7-kirill.shutemov@linux.intel.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 5503fbf2b0b80c1a47a7dca0e4f060f52f522cfd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/khugepaged.c
diff --cc mm/khugepaged.c
index 0af263adde1a,1bae66327f82..000000000000
--- a/mm/khugepaged.c
+++ b/mm/khugepaged.c
@@@ -503,7 -512,9 +503,13 @@@ void __khugepaged_exit(struct mm_struc
  
  static void release_pte_page(struct page *page)
  {
++<<<<<<< HEAD
 +	dec_node_page_state(page, NR_ISOLATED_ANON + page_is_file_cache(page));
++=======
+ 	mod_node_page_state(page_pgdat(page),
+ 			NR_ISOLATED_ANON + page_is_file_lru(page),
+ 			-compound_nr(page));
++>>>>>>> 5503fbf2b0b8 (khugepaged: allow to collapse PTE-mapped compound pages)
  	unlock_page(page);
  	putback_lru_page(page);
  }
@@@ -619,8 -646,9 +641,14 @@@ static int __collapse_huge_page_isolate
  			result = SCAN_DEL_PAGE_LRU;
  			goto out;
  		}
++<<<<<<< HEAD
 +		inc_node_page_state(page,
 +				NR_ISOLATED_ANON + page_is_file_cache(page));
++=======
+ 		mod_node_page_state(page_pgdat(page),
+ 				NR_ISOLATED_ANON + page_is_file_lru(page),
+ 				compound_nr(page));
++>>>>>>> 5503fbf2b0b8 (khugepaged: allow to collapse PTE-mapped compound pages)
  		VM_BUG_ON_PAGE(!PageLocked(page), page);
  		VM_BUG_ON_PAGE(PageLRU(page), page);
  
@@@ -1052,10 -1091,11 +1094,11 @@@ static void collapse_huge_page(struct m
  	 */
  	_pmd = pmdp_collapse_flush(vma, address, pmd);
  	spin_unlock(pmd_ptl);
 -	mmu_notifier_invalidate_range_end(&range);
 +	mmu_notifier_invalidate_range_end(mm, mmun_start, mmun_end);
  
  	spin_lock(pte_ptl);
- 	isolated = __collapse_huge_page_isolate(vma, address, pte);
+ 	isolated = __collapse_huge_page_isolate(vma, address, pte,
+ 			&compound_pagelist);
  	spin_unlock(pte_ptl);
  
  	if (unlikely(!isolated)) {
* Unmerged path mm/khugepaged.c
