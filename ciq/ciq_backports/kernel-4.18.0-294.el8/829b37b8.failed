ext4: avoid race conditions when remounting with options that change dax

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Theodore Ts'o <tytso@mit.edu>
commit 829b37b8cddb1db75c1b7905505b90e593b15db1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/829b37b8.failed

Trying to change dax mount options when remounting could allow mount
options to be enabled for a small amount of time, and then the mount
option change would be reverted.

In the case of "mount -o remount,dax", this can cause a race where
files would temporarily treated as DAX --- and then not.

	Cc: stable@kernel.org
	Reported-by: syzbot+bca9799bf129256190da@syzkaller.appspotmail.com
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 829b37b8cddb1db75c1b7905505b90e593b15db1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/super.c
diff --cc fs/ext4/super.c
index 45de20b6730f,edf06c1bee9d..000000000000
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@@ -2048,13 -2098,56 +2048,59 @@@ static int handle_mount_opt(struct supe
  		}
  		sbi->s_jquota_fmt = m->mount_opt;
  #endif
 -	} else if (token == Opt_dax || token == Opt_dax_always ||
 -		   token == Opt_dax_inode || token == Opt_dax_never) {
 +	} else if (token == Opt_dax) {
  #ifdef CONFIG_FS_DAX
++<<<<<<< HEAD
 +		ext4_msg(sb, KERN_WARNING,
 +		"DAX enabled. Warning: EXPERIMENTAL, use at your own risk");
 +		sbi->s_mount_opt |= m->mount_opt;
++=======
+ 		switch (token) {
+ 		case Opt_dax:
+ 		case Opt_dax_always:
+ 			if (is_remount &&
+ 			    (!(sbi->s_mount_opt & EXT4_MOUNT_DAX_ALWAYS) ||
+ 			     (sbi->s_mount_opt2 & EXT4_MOUNT2_DAX_NEVER))) {
+ 			fail_dax_change_remount:
+ 				ext4_msg(sb, KERN_ERR, "can't change "
+ 					 "dax mount option while remounting");
+ 				return -1;
+ 			}
+ 			if (is_remount &&
+ 			    (test_opt(sb, DATA_FLAGS) ==
+ 			     EXT4_MOUNT_JOURNAL_DATA)) {
+ 				    ext4_msg(sb, KERN_ERR, "can't mount with "
+ 					     "both data=journal and dax");
+ 				    return -1;
+ 			}
+ 			ext4_msg(sb, KERN_WARNING,
+ 				"DAX enabled. Warning: EXPERIMENTAL, use at your own risk");
+ 			sbi->s_mount_opt |= EXT4_MOUNT_DAX_ALWAYS;
+ 			sbi->s_mount_opt2 &= ~EXT4_MOUNT2_DAX_NEVER;
+ 			break;
+ 		case Opt_dax_never:
+ 			if (is_remount &&
+ 			    (!(sbi->s_mount_opt2 & EXT4_MOUNT2_DAX_NEVER) ||
+ 			     (sbi->s_mount_opt & EXT4_MOUNT_DAX_ALWAYS)))
+ 				goto fail_dax_change_remount;
+ 			sbi->s_mount_opt2 |= EXT4_MOUNT2_DAX_NEVER;
+ 			sbi->s_mount_opt &= ~EXT4_MOUNT_DAX_ALWAYS;
+ 			break;
+ 		case Opt_dax_inode:
+ 			if (is_remount &&
+ 			    ((sbi->s_mount_opt & EXT4_MOUNT_DAX_ALWAYS) ||
+ 			     (sbi->s_mount_opt2 & EXT4_MOUNT2_DAX_NEVER) ||
+ 			     !(sbi->s_mount_opt2 & EXT4_MOUNT2_DAX_INODE)))
+ 				goto fail_dax_change_remount;
+ 			sbi->s_mount_opt &= ~EXT4_MOUNT_DAX_ALWAYS;
+ 			sbi->s_mount_opt2 &= ~EXT4_MOUNT2_DAX_NEVER;
+ 			/* Strictly for printing options */
+ 			sbi->s_mount_opt2 |= EXT4_MOUNT2_DAX_INODE;
+ 			break;
+ 		}
++>>>>>>> 829b37b8cddb (ext4: avoid race conditions when remounting with options that change dax)
  #else
  		ext4_msg(sb, KERN_INFO, "dax option not supported");
 -		sbi->s_mount_opt2 |= EXT4_MOUNT2_DAX_NEVER;
 -		sbi->s_mount_opt &= ~EXT4_MOUNT_DAX_ALWAYS;
  		return -1;
  #endif
  	} else if (token == Opt_data_err_abort) {
@@@ -5329,12 -5478,6 +5375,15 @@@ static int ext4_remount(struct super_bl
  			err = -EINVAL;
  			goto restore_opts;
  		}
++<<<<<<< HEAD
 +		if (test_opt(sb, DAX)) {
 +			ext4_msg(sb, KERN_ERR, "can't mount with "
 +				 "both data=journal and dax");
 +			err = -EINVAL;
 +			goto restore_opts;
 +		}
++=======
++>>>>>>> 829b37b8cddb (ext4: avoid race conditions when remounting with options that change dax)
  	} else if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_ORDERED_DATA) {
  		if (test_opt(sb, JOURNAL_ASYNC_COMMIT)) {
  			ext4_msg(sb, KERN_ERR, "can't mount with "
@@@ -5350,12 -5493,6 +5399,15 @@@
  		goto restore_opts;
  	}
  
++<<<<<<< HEAD
 +	if ((sbi->s_mount_opt ^ old_opts.s_mount_opt) & EXT4_MOUNT_DAX) {
 +		ext4_msg(sb, KERN_WARNING, "warning: refusing change of "
 +			"dax flag with busy inodes while remounting");
 +		sbi->s_mount_opt ^= EXT4_MOUNT_DAX;
 +	}
 +
++=======
++>>>>>>> 829b37b8cddb (ext4: avoid race conditions when remounting with options that change dax)
  	if (sbi->s_mount_flags & EXT4_MF_FS_ABORTED)
  		ext4_abort(sb, EXT4_ERR_ESHUTDOWN, "Abort forced by user");
  
* Unmerged path fs/ext4/super.c
