mptcp: change add_addr_signal type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Geliang Tang <geliangtang@gmail.com>
commit d91d322a72a390702376787b925711ce8338daec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d91d322a.failed

This patch changed the 'add_addr_signal' type from bool to char, so that
we could encode the addr type there.

	Suggested-by: Paolo Abeni <pabeni@redhat.com>
	Acked-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: Geliang Tang <geliangtang@gmail.com>
	Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit d91d322a72a390702376787b925711ce8338daec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/pm.c
#	net/mptcp/protocol.h
diff --cc net/mptcp/pm.c
index a78fc80f9b51,c2c12f02a263..000000000000
--- a/net/mptcp/pm.c
+++ b/net/mptcp/pm.c
@@@ -15,12 -13,18 +15,21 @@@ static struct workqueue_struct *pm_wq
  /* path manager command handlers */
  
  int mptcp_pm_announce_addr(struct mptcp_sock *msk,
 -			   const struct mptcp_addr_info *addr,
 -			   bool echo)
 +			   const struct mptcp_addr_info *addr)
  {
+ 	u8 add_addr = READ_ONCE(msk->pm.add_addr_signal);
+ 
  	pr_debug("msk=%p, local_id=%d", msk, addr->id);
  
  	msk->pm.local = *addr;
++<<<<<<< HEAD
 +	WRITE_ONCE(msk->pm.add_addr_signal, true);
++=======
+ 	add_addr |= BIT(MPTCP_ADD_ADDR_SIGNAL);
+ 	if (echo)
+ 		add_addr |= BIT(MPTCP_ADD_ADDR_ECHO);
+ 	WRITE_ONCE(msk->pm.add_addr_signal, add_addr);
++>>>>>>> d91d322a72a3 (mptcp: change add_addr_signal type)
  	return 0;
  }
  
@@@ -166,7 -186,9 +175,13 @@@ bool mptcp_pm_add_addr_signal(struct mp
  	if (!mptcp_pm_should_add_signal(msk))
  		goto out_unlock;
  
++<<<<<<< HEAD
 +	if (remaining < mptcp_add_addr_len(msk->pm.local.family))
++=======
+ 	*echo = mptcp_pm_should_add_signal_echo(msk);
+ 
+ 	if (remaining < mptcp_add_addr_len(msk->pm.local.family, *echo))
++>>>>>>> d91d322a72a3 (mptcp: change add_addr_signal type)
  		goto out_unlock;
  
  	*saddr = msk->pm.local;
@@@ -218,8 -234,10 +233,13 @@@ void mptcp_pm_data_init(struct mptcp_so
  	msk->pm.add_addr_accepted = 0;
  	msk->pm.local_addr_used = 0;
  	msk->pm.subflows = 0;
 -	msk->pm.rm_id = 0;
  	WRITE_ONCE(msk->pm.work_pending, false);
++<<<<<<< HEAD
 +	WRITE_ONCE(msk->pm.add_addr_signal, false);
++=======
+ 	WRITE_ONCE(msk->pm.add_addr_signal, 0);
+ 	WRITE_ONCE(msk->pm.rm_addr_signal, false);
++>>>>>>> d91d322a72a3 (mptcp: change add_addr_signal type)
  	WRITE_ONCE(msk->pm.accept_addr, false);
  	WRITE_ONCE(msk->pm.accept_subflow, false);
  	msk->pm.status = 0;
diff --cc net/mptcp/protocol.h
index a60ec79c4e54,a62ffae621c2..000000000000
--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@@ -167,7 -176,9 +172,12 @@@ struct mptcp_pm_data 
  
  	spinlock_t	lock;		/*protects the whole PM data */
  
++<<<<<<< HEAD
 +	bool		add_addr_signal;
++=======
+ 	u8		add_addr_signal;
+ 	bool		rm_addr_signal;
++>>>>>>> d91d322a72a3 (mptcp: change add_addr_signal type)
  	bool		server_side;
  	bool		work_pending;
  	bool		accept_addr;
@@@ -434,14 -520,25 +444,19 @@@ int mptcp_pm_remove_subflow(struct mptc
  
  static inline bool mptcp_pm_should_add_signal(struct mptcp_sock *msk)
  {
- 	return READ_ONCE(msk->pm.add_addr_signal);
+ 	return READ_ONCE(msk->pm.add_addr_signal) & BIT(MPTCP_ADD_ADDR_SIGNAL);
+ }
+ 
+ static inline bool mptcp_pm_should_add_signal_echo(struct mptcp_sock *msk)
+ {
+ 	return READ_ONCE(msk->pm.add_addr_signal) & BIT(MPTCP_ADD_ADDR_ECHO);
  }
  
 -static inline bool mptcp_pm_should_rm_signal(struct mptcp_sock *msk)
 -{
 -	return READ_ONCE(msk->pm.rm_addr_signal);
 -}
 -
 -static inline unsigned int mptcp_add_addr_len(int family, bool echo)
 +static inline unsigned int mptcp_add_addr_len(int family)
  {
  	if (family == AF_INET)
 -		return echo ? TCPOLEN_MPTCP_ADD_ADDR_BASE
 -			    : TCPOLEN_MPTCP_ADD_ADDR;
 -	return echo ? TCPOLEN_MPTCP_ADD_ADDR6_BASE : TCPOLEN_MPTCP_ADD_ADDR6;
 +		return TCPOLEN_MPTCP_ADD_ADDR;
 +	return TCPOLEN_MPTCP_ADD_ADDR6;
  }
  
  bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, unsigned int remaining,
* Unmerged path net/mptcp/pm.c
* Unmerged path net/mptcp/protocol.h
