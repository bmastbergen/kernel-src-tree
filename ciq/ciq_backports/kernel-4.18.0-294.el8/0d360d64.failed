bpf: Remove inline from bpf_do_trace_printk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Stanislav Fomichev <sdf@google.com>
commit 0d360d64b01231cdb36e1936de889f308fd9317f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0d360d64.failed

I get the following error during compilation on my side:
kernel/trace/bpf_trace.c: In function 'bpf_do_trace_printk':
kernel/trace/bpf_trace.c:386:34: error: function 'bpf_do_trace_printk' can never be inlined because it uses variable argument lists
 static inline __printf(1, 0) int bpf_do_trace_printk(const char *fmt, ...)
                                  ^

Fixes: ac5a72ea5c89 ("bpf: Use dedicated bpf_trace_printk event instead of trace_printk()")
	Signed-off-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200806182612.1390883-1-sdf@google.com
(cherry picked from commit 0d360d64b01231cdb36e1936de889f308fd9317f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/bpf_trace.c
diff --cc kernel/trace/bpf_trace.c
index ba868d951c55,a8d4f253ed77..000000000000
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@@ -318,6 -354,55 +318,58 @@@ static const struct bpf_func_proto *bpf
  	return &bpf_probe_write_user_proto;
  }
  
++<<<<<<< HEAD
++=======
+ static void bpf_trace_copy_string(char *buf, void *unsafe_ptr, char fmt_ptype,
+ 		size_t bufsz)
+ {
+ 	void __user *user_ptr = (__force void __user *)unsafe_ptr;
+ 
+ 	buf[0] = 0;
+ 
+ 	switch (fmt_ptype) {
+ 	case 's':
+ #ifdef CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE
+ 		if ((unsigned long)unsafe_ptr < TASK_SIZE) {
+ 			strncpy_from_user_nofault(buf, user_ptr, bufsz);
+ 			break;
+ 		}
+ 		fallthrough;
+ #endif
+ 	case 'k':
+ 		strncpy_from_kernel_nofault(buf, unsafe_ptr, bufsz);
+ 		break;
+ 	case 'u':
+ 		strncpy_from_user_nofault(buf, user_ptr, bufsz);
+ 		break;
+ 	}
+ }
+ 
+ static DEFINE_RAW_SPINLOCK(trace_printk_lock);
+ 
+ #define BPF_TRACE_PRINTK_SIZE   1024
+ 
+ static __printf(1, 0) int bpf_do_trace_printk(const char *fmt, ...)
+ {
+ 	static char buf[BPF_TRACE_PRINTK_SIZE];
+ 	unsigned long flags;
+ 	va_list ap;
+ 	int ret;
+ 
+ 	raw_spin_lock_irqsave(&trace_printk_lock, flags);
+ 	va_start(ap, fmt);
+ 	ret = vsnprintf(buf, sizeof(buf), fmt, ap);
+ 	va_end(ap);
+ 	/* vsnprintf() will not append null for zero-length strings */
+ 	if (ret == 0)
+ 		buf[0] = '\0';
+ 	trace_bpf_trace_printk(buf);
+ 	raw_spin_unlock_irqrestore(&trace_printk_lock, flags);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> 0d360d64b012 (bpf: Remove inline from bpf_do_trace_printk)
  /*
   * Only limited trace_printk() conversion specifiers allowed:
   * %d %i %u %x %ld %li %lu %lx %lld %lli %llu %llx %p %pB %pks %pus %s
* Unmerged path kernel/trace/bpf_trace.c
