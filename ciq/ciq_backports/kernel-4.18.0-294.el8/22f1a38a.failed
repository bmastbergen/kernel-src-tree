selftests/net: make udpgso_bench skip unsupported testcases

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Willem de Bruijn <willemb@google.com>
commit 22f1a38a547b5ce5e73b0a77339cbf23f70dee5d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/22f1a38a.failed

Kselftest can be run against older kernels. Instead of failing hard
when a feature is unsupported, return the KSFT_SKIP exit code.

Specifically, do not fail hard on missing udp zerocopy.

The udp gso bench test runs multiple test cases from a single script.
Fail if any case fails, else return skip if any test is skipped.

Link: https://lore.kernel.org/lkml/20190618171516.GA17547@kroah.com/
	Signed-off-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 22f1a38a547b5ce5e73b0a77339cbf23f70dee5d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/net/udpgso_bench.sh
diff --cc tools/testing/selftests/net/udpgso_bench.sh
index 99e537ab5ad9,80b5d352702e..000000000000
--- a/tools/testing/selftests/net/udpgso_bench.sh
+++ b/tools/testing/selftests/net/udpgso_bench.sh
@@@ -3,6 -3,48 +3,51 @@@
  #
  # Run a series of udpgso benchmarks
  
++<<<<<<< HEAD
++=======
+ readonly GREEN='\033[0;92m'
+ readonly YELLOW='\033[0;33m'
+ readonly RED='\033[0;31m'
+ readonly NC='\033[0m' # No Color
+ 
+ readonly KSFT_PASS=0
+ readonly KSFT_FAIL=1
+ readonly KSFT_SKIP=4
+ 
+ num_pass=0
+ num_err=0
+ num_skip=0
+ 
+ kselftest_test_exitcode() {
+ 	local -r exitcode=$1
+ 
+ 	if [[ ${exitcode} -eq ${KSFT_PASS} ]]; then
+ 		num_pass=$(( $num_pass + 1 ))
+ 	elif [[ ${exitcode} -eq ${KSFT_SKIP} ]]; then
+ 		num_skip=$(( $num_skip + 1 ))
+ 	else
+ 		num_err=$(( $num_err + 1 ))
+ 	fi
+ }
+ 
+ kselftest_exit() {
+ 	echo -e "$(basename $0): PASS=${num_pass} SKIP=${num_skip} FAIL=${num_err}"
+ 
+ 	if [[ $num_err -ne 0 ]]; then
+ 		echo -e "$(basename $0): ${RED}FAIL${NC}"
+ 		exit ${KSFT_FAIL}
+ 	fi
+ 
+ 	if [[ $num_skip -ne 0 ]]; then
+ 		echo -e "$(basename $0): ${YELLOW}SKIP${NC}"
+ 		exit ${KSFT_SKIP}
+ 	fi
+ 
+ 	echo -e "$(basename $0): ${GREEN}PASS${NC}"
+ 	exit ${KSFT_PASS}
+ }
+ 
++>>>>>>> 22f1a38a547b (selftests/net: make udpgso_bench skip unsupported testcases)
  wake_children() {
  	local -r jobs="$(jobs -p)"
  
@@@ -34,7 -77,22 +80,26 @@@ run_udp() 
  	run_in_netns ${args}
  
  	echo "udp gso"
++<<<<<<< HEAD
 +	run_in_netns ${args} -S
++=======
+ 	run_in_netns ${args} -S 0
+ 
+ 	echo "udp gso zerocopy"
+ 	run_in_netns ${args} -S 0 -z
+ 
+ 	echo "udp gso timestamp"
+ 	run_in_netns ${args} -S 0 -T
+ 
+ 	echo "udp gso zerocopy audit"
+ 	run_in_netns ${args} -S 0 -z -a
+ 
+ 	echo "udp gso timestamp audit"
+ 	run_in_netns ${args} -S 0 -T -a
+ 
+ 	echo "udp gso zerocopy timestamp audit"
+ 	run_in_netns ${args} -S 0 -T -z -a
++>>>>>>> 22f1a38a547b (selftests/net: make udpgso_bench skip unsupported testcases)
  }
  
  run_tcp() {
@@@ -45,6 -103,11 +110,14 @@@
  
  	echo "tcp zerocopy"
  	run_in_netns ${args} -t -z
++<<<<<<< HEAD
++=======
+ 
+ 	# excluding for now because test fails intermittently
+ 	# add -P option to include poll() to reduce possibility of lost messages
+ 	#echo "tcp zerocopy audit"
+ 	#run_in_netns ${args} -t -z -P -a
++>>>>>>> 22f1a38a547b (selftests/net: make udpgso_bench skip unsupported testcases)
  }
  
  run_all() {
@@@ -63,6 -126,7 +136,10 @@@
  
  if [[ $# -eq 0 ]]; then
  	run_all
++<<<<<<< HEAD
++=======
+ 	kselftest_exit
++>>>>>>> 22f1a38a547b (selftests/net: make udpgso_bench skip unsupported testcases)
  elif [[ $1 == "__subprocess" ]]; then
  	shift
  	run_one $@
* Unmerged path tools/testing/selftests/net/udpgso_bench.sh
diff --git a/tools/testing/selftests/net/udpgso_bench_tx.c b/tools/testing/selftests/net/udpgso_bench_tx.c
index 23dfb20d8e85..ceebd1011d2c 100644
--- a/tools/testing/selftests/net/udpgso_bench_tx.c
+++ b/tools/testing/selftests/net/udpgso_bench_tx.c
@@ -22,6 +22,8 @@
 #include <sys/types.h>
 #include <unistd.h>
 
+#include "../kselftest.h"
+
 #ifndef ETH_MAX_MTU
 #define ETH_MAX_MTU 0xFFFFU
 #endif
@@ -38,6 +40,10 @@
 #define MSG_ZEROCOPY	0x4000000
 #endif
 
+#ifndef ENOTSUPP
+#define ENOTSUPP	524
+#endif
+
 #define NUM_PKT		100
 
 static bool	cfg_cache_trash;
@@ -346,7 +352,7 @@ int main(int argc, char **argv)
 {
 	unsigned long num_msgs, num_sends;
 	unsigned long tnow, treport, tstop;
-	int fd, i, val;
+	int fd, i, val, ret;
 
 	parse_opts(argc, argv);
 
@@ -366,8 +372,16 @@ int main(int argc, char **argv)
 
 	if (cfg_zerocopy) {
 		val = 1;
-		if (setsockopt(fd, SOL_SOCKET, SO_ZEROCOPY, &val, sizeof(val)))
+
+		ret = setsockopt(fd, SOL_SOCKET, SO_ZEROCOPY,
+				 &val, sizeof(val));
+		if (ret) {
+			if (errno == ENOPROTOOPT || errno == ENOTSUPP) {
+				fprintf(stderr, "SO_ZEROCOPY not supported");
+				exit(KSFT_SKIP);
+			}
 			error(1, errno, "setsockopt zerocopy");
+		}
 	}
 
 	if (cfg_connected &&
