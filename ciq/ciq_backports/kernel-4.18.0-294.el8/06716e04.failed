selftests/bpf: Extend test_flow_dissector to cover link creation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jakub Sitnicki <jakub@cloudflare.com>
commit 06716e04a043aa5e010f952a823ad038054b0e5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/06716e04.failed

Extend the existing flow_dissector test case to run tests once using direct
prog attachments, and then for the second time using indirect attachment
via link.

The intention is to exercises the newly added high-level API for attaching
programs to network namespace with links (bpf_program__attach_netns).

	Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200531082846.2117903-13-jakub@cloudflare.com
(cherry picked from commit 06716e04a043aa5e010f952a823ad038054b0e5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/flow_dissector.c
diff --cc tools/testing/selftests/bpf/prog_tests/flow_dissector.c
index 47548befbf41,ea14e3ece812..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/flow_dissector.c
+++ b/tools/testing/selftests/bpf/prog_tests/flow_dissector.c
@@@ -534,37 -608,12 +608,43 @@@ void test_flow_dissector(void
  	err = ifup("tap0");
  	CHECK(err, "ifup", "err %d errno %d\n", err, errno);
  
++<<<<<<< HEAD
 +	for (i = 0; i < ARRAY_SIZE(tests); i++) {
 +		/* Keep in sync with 'flags' from eth_get_headlen. */
 +		__u32 eth_get_headlen_flags =
 +			BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG;
 +		struct bpf_prog_test_run_attr tattr = {};
 +		struct bpf_flow_keys flow_keys = {};
 +		__u32 key = (__u32)(tests[i].keys.sport) << 16 |
 +			    tests[i].keys.dport;
 + 
 +		/* For skb-less case we can't pass input flags; run
 +		 * only the tests that have a matching set of flags.
 +		 */
 +
 +		if (tests[i].flags != eth_get_headlen_flags)
 +			continue;
 +
 +		err = tx_tap(tap_fd, &tests[i].pkt, sizeof(tests[i].pkt));
 +		CHECK(err < 0, "tx_tap", "err %d errno %d\n", err, errno);
 +
 +		err = bpf_map_lookup_elem(keys_fd, &key, &flow_keys);
 +		CHECK_ATTR(err, tests[i].name, "bpf_map_lookup_elem %d\n", err);
 +
 +		CHECK_ATTR(err, tests[i].name, "skb-less err %d\n", err);
 +		CHECK_FLOW_KEYS(tests[i].name, flow_keys, tests[i].keys);
 +
 +		err = bpf_map_delete_elem(keys_fd, &key);
 +		CHECK_ATTR(err, tests[i].name, "bpf_map_delete_elem %d\n", err);
 +	}
++=======
+ 	/* Test direct prog attachment */
+ 	test_skb_less_prog_attach(skel, tap_fd);
+ 	/* Test indirect prog attachment via link */
+ 	test_skb_less_link_create(skel, tap_fd);
++>>>>>>> 06716e04a043 (selftests/bpf: Extend test_flow_dissector to cover link creation)
  
  	close(tap_fd);
- 	bpf_prog_detach(prog_fd, BPF_FLOW_DISSECTOR);
  out_destroy_skel:
  	bpf_flow__destroy(skel);
  }
* Unmerged path tools/testing/selftests/bpf/prog_tests/flow_dissector.c
