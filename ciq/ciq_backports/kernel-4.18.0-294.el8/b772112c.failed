net: atlantic: make _get_sw_stats return count as return value

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mark Starovoytov <mstarovoitov@marvell.com>
commit b772112c5af0e45ddcacb144545f06bdc594c736
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b772112c.failed

This patch changes aq_vec_get_sw_stats() to return count as a return
value (which was unused) instead of an out parameter.

	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b772112c5af0e45ddcacb144545f06bdc594c736)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.c
#	drivers/net/ethernet/aquantia/atlantic/aq_vec.c
#	drivers/net/ethernet/aquantia/atlantic/aq_vec.h
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index ed7d344e3ed7,d72f40259715..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@@ -761,13 -902,19 +761,29 @@@ void aq_nic_get_stats(struct aq_nic_s *
  
  	data += i;
  
++<<<<<<< HEAD
 +	for (i = 0U, aq_vec = self->aq_vec[0];
 +		aq_vec && self->aq_vecs > i; ++i, aq_vec = self->aq_vec[i]) {
 +		data += count;
 +		aq_vec_get_sw_stats(aq_vec, data, &count);
 +	}
 +
 +err_exit:;
++=======
+ 	for (tc = 0U; tc < self->aq_nic_cfg.tcs; tc++) {
+ 		for (i = 0U, aq_vec = self->aq_vec[0];
+ 		     aq_vec && self->aq_vecs > i;
+ 		     ++i, aq_vec = self->aq_vec[i]) {
+ 			data += count;
+ 			count = aq_vec_get_sw_stats(aq_vec, tc, data);
+ 		}
+ 	}
+ 
+ 	data += count;
+ 
+ err_exit:
+ 	return data;
++>>>>>>> b772112c5af0 (net: atlantic: make _get_sw_stats return count as return value)
  }
  
  static void aq_nic_update_ndev_stats(struct aq_nic_s *self)
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_vec.c
index e9e3905626ba,8f0a0d18e711..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
@@@ -362,11 -380,11 +362,15 @@@ void aq_vec_add_stats(struct aq_vec_s *
  	}
  }
  
++<<<<<<< HEAD
 +int aq_vec_get_sw_stats(struct aq_vec_s *self, u64 *data, unsigned int *p_count)
++=======
+ unsigned int aq_vec_get_sw_stats(struct aq_vec_s *self, const unsigned int tc, u64 *data)
++>>>>>>> b772112c5af0 (net: atlantic: make _get_sw_stats return count as return value)
  {
 +	unsigned int count = 0U;
  	struct aq_ring_stats_rx_s stats_rx;
  	struct aq_ring_stats_tx_s stats_tx;
 -	unsigned int count = 0U;
  
  	memset(&stats_rx, 0U, sizeof(struct aq_ring_stats_rx_s));
  	memset(&stats_tx, 0U, sizeof(struct aq_ring_stats_tx_s));
@@@ -374,15 -393,12 +378,12 @@@
  
  	/* This data should mimic aq_ethtool_queue_stat_names structure
  	 */
 -	data[count] = stats_rx.packets;
 -	data[++count] = stats_tx.packets;
 -	data[++count] = stats_tx.queue_restarts;
 -	data[++count] = stats_rx.jumbo_packets;
 -	data[++count] = stats_rx.lro_packets;
 -	data[++count] = stats_rx.errors;
 +	data[count] += stats_rx.packets;
 +	data[++count] += stats_tx.packets;
 +	data[++count] += stats_tx.queue_restarts;
 +	data[++count] += stats_rx.jumbo_packets;
 +	data[++count] += stats_rx.lro_packets;
 +	data[++count] += stats_rx.errors;
  
- 	if (p_count)
- 		*p_count = ++count;
- 
- 	return 0;
+ 	return ++count;
  }
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_vec.h
index 8bdf60bb3f63,c079fef80da8..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_vec.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_vec.h
@@@ -1,10 -1,8 +1,18 @@@
++<<<<<<< HEAD
 +/*
 + * aQuantia Corporation Network Driver
 + * Copyright (C) 2014-2017 aQuantia Corporation. All rights reserved
 + *
 + * This program is free software; you can redistribute it and/or modify it
 + * under the terms and conditions of the GNU General Public License,
 + * version 2, as published by the Free Software Foundation.
++=======
+ /* SPDX-License-Identifier: GPL-2.0-only */
+ /* Atlantic Network Driver
+  *
+  * Copyright (C) 2014-2019 aQuantia Corporation
+  * Copyright (C) 2019-2020 Marvell International Ltd.
++>>>>>>> b772112c5af0 (net: atlantic: make _get_sw_stats return count as return value)
   */
  
  /* File aq_vec.h: Definition of common structures for vector of Rx and Tx rings.
@@@ -35,10 -35,7 +43,14 @@@ void aq_vec_free(struct aq_vec_s *self)
  int aq_vec_start(struct aq_vec_s *self);
  void aq_vec_stop(struct aq_vec_s *self);
  cpumask_t *aq_vec_get_affinity_mask(struct aq_vec_s *self);
++<<<<<<< HEAD
 +int aq_vec_get_sw_stats(struct aq_vec_s *self, u64 *data,
 +			unsigned int *p_count);
 +void aq_vec_add_stats(struct aq_vec_s *self,
 +		      struct aq_ring_stats_rx_s *stats_rx,
 +		      struct aq_ring_stats_tx_s *stats_tx);
++=======
+ unsigned int aq_vec_get_sw_stats(struct aq_vec_s *self, const unsigned int tc, u64 *data);
++>>>>>>> b772112c5af0 (net: atlantic: make _get_sw_stats return count as return value)
  
  #endif /* AQ_VEC_H */
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_vec.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_vec.h
