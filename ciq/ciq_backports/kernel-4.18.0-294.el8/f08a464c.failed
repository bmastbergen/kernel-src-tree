net: atlantic: ptp gpio adjustments

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Egor Pomozov <epomozov@marvell.com>
commit f08a464c27ca0a4050333baa271504b27ce834b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f08a464c.failed

Clock adjustment data should be passed to FW as well, otherwise in some
cases a drift was observed when using GPIO features.

	Signed-off-by: Egor Pomozov <epomozov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f08a464c27ca0a4050333baa271504b27ce834b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_hw.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_hw.h
index 5c8995ae94b5,251767c31f7e..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
@@@ -270,6 -327,18 +270,17 @@@ struct aq_fw_ops 
  	int (*set_power)(struct aq_hw_s *self, unsigned int power_state,
  			 u8 *mac);
  
++<<<<<<< HEAD
++=======
+ 	int (*send_fw_request)(struct aq_hw_s *self,
+ 			       const struct hw_fw_request_iface *fw_req,
+ 			       size_t size);
+ 
+ 	void (*enable_ptp)(struct aq_hw_s *self, int enable);
+ 
+ 	void (*adjust_ptp)(struct aq_hw_s *self, uint64_t adj);
+ 
++>>>>>>> f08a464c27ca (net: atlantic: ptp gpio adjustments)
  	int (*set_eee_rate)(struct aq_hw_s *self, u32 speed);
  
  	int (*get_eee_rate)(struct aq_hw_s *self, u32 *rate,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index 42fdeb412b12,9acdb3fbb750..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -978,6 -1083,230 +978,232 @@@ static int hw_atl_b0_hw_ring_rx_stop(st
  	return aq_hw_err_from_flags(self);
  }
  
++<<<<<<< HEAD
++=======
+ static int hw_atl_b0_tx_tc_mode_get(struct aq_hw_s *self, u32 *tc_mode)
+ {
+ 	*tc_mode = hw_atl_rpb_tps_tx_tc_mode_get(self);
+ 	return aq_hw_err_from_flags(self);
+ }
+ 
+ static int hw_atl_b0_rx_tc_mode_get(struct aq_hw_s *self, u32 *tc_mode)
+ {
+ 	*tc_mode = hw_atl_rpb_rpf_rx_traf_class_mode_get(self);
+ 	return aq_hw_err_from_flags(self);
+ }
+ 
+ #define get_ptp_ts_val_u64(self, indx) \
+ 	((u64)(hw_atl_pcs_ptp_clock_get(self, indx) & 0xffff))
+ 
+ static void hw_atl_b0_get_ptp_ts(struct aq_hw_s *self, u64 *stamp)
+ {
+ 	u64 ns;
+ 
+ 	hw_atl_pcs_ptp_clock_read_enable(self, 1);
+ 	hw_atl_pcs_ptp_clock_read_enable(self, 0);
+ 	ns = (get_ptp_ts_val_u64(self, 0) +
+ 	      (get_ptp_ts_val_u64(self, 1) << 16)) * NSEC_PER_SEC +
+ 	     (get_ptp_ts_val_u64(self, 3) +
+ 	      (get_ptp_ts_val_u64(self, 4) << 16));
+ 
+ 	*stamp = ns + self->ptp_clk_offset;
+ }
+ 
+ static void hw_atl_b0_adj_params_get(u64 freq, s64 adj, u32 *ns, u32 *fns)
+ {
+ 	/* For accuracy, the digit is extended */
+ 	s64 base_ns = ((adj + NSEC_PER_SEC) * NSEC_PER_SEC);
+ 	u64 nsi_frac = 0;
+ 	u64 nsi;
+ 
+ 	base_ns = div64_s64(base_ns, freq);
+ 	nsi = div64_u64(base_ns, NSEC_PER_SEC);
+ 
+ 	if (base_ns != nsi * NSEC_PER_SEC) {
+ 		s64 divisor = div64_s64((s64)NSEC_PER_SEC * NSEC_PER_SEC,
+ 					base_ns - nsi * NSEC_PER_SEC);
+ 		nsi_frac = div64_s64(FRAC_PER_NS * NSEC_PER_SEC, divisor);
+ 	}
+ 
+ 	*ns = (u32)nsi;
+ 	*fns = (u32)nsi_frac;
+ }
+ 
+ static void
+ hw_atl_b0_mac_adj_param_calc(struct hw_fw_request_ptp_adj_freq *ptp_adj_freq,
+ 			     u64 phyfreq, u64 macfreq)
+ {
+ 	s64 adj_fns_val;
+ 	s64 fns_in_sec_phy = phyfreq * (ptp_adj_freq->fns_phy +
+ 					FRAC_PER_NS * ptp_adj_freq->ns_phy);
+ 	s64 fns_in_sec_mac = macfreq * (ptp_adj_freq->fns_mac +
+ 					FRAC_PER_NS * ptp_adj_freq->ns_mac);
+ 	s64 fault_in_sec_phy = FRAC_PER_NS * NSEC_PER_SEC - fns_in_sec_phy;
+ 	s64 fault_in_sec_mac = FRAC_PER_NS * NSEC_PER_SEC - fns_in_sec_mac;
+ 	/* MAC MCP counter freq is macfreq / 4 */
+ 	s64 diff_in_mcp_overflow = (fault_in_sec_mac - fault_in_sec_phy) *
+ 				   4 * FRAC_PER_NS;
+ 
+ 	diff_in_mcp_overflow = div64_s64(diff_in_mcp_overflow,
+ 					 AQ_HW_MAC_COUNTER_HZ);
+ 	adj_fns_val = (ptp_adj_freq->fns_mac + FRAC_PER_NS *
+ 		       ptp_adj_freq->ns_mac) + diff_in_mcp_overflow;
+ 
+ 	ptp_adj_freq->mac_ns_adj = div64_s64(adj_fns_val, FRAC_PER_NS);
+ 	ptp_adj_freq->mac_fns_adj = adj_fns_val - ptp_adj_freq->mac_ns_adj *
+ 				    FRAC_PER_NS;
+ }
+ 
+ static int hw_atl_b0_adj_sys_clock(struct aq_hw_s *self, s64 delta)
+ {
+ 	self->ptp_clk_offset += delta;
+ 
+ 	self->aq_fw_ops->adjust_ptp(self, self->ptp_clk_offset);
+ 
+ 	return 0;
+ }
+ 
+ static int hw_atl_b0_set_sys_clock(struct aq_hw_s *self, u64 time, u64 ts)
+ {
+ 	s64 delta = time - (self->ptp_clk_offset + ts);
+ 
+ 	return hw_atl_b0_adj_sys_clock(self, delta);
+ }
+ 
+ static int hw_atl_b0_ts_to_sys_clock(struct aq_hw_s *self, u64 ts, u64 *time)
+ {
+ 	*time = self->ptp_clk_offset + ts;
+ 	return 0;
+ }
+ 
+ static int hw_atl_b0_adj_clock_freq(struct aq_hw_s *self, s32 ppb)
+ {
+ 	struct hw_fw_request_iface fwreq;
+ 	size_t size;
+ 
+ 	memset(&fwreq, 0, sizeof(fwreq));
+ 
+ 	fwreq.msg_id = HW_AQ_FW_REQUEST_PTP_ADJ_FREQ;
+ 	hw_atl_b0_adj_params_get(AQ_HW_MAC_COUNTER_HZ, ppb,
+ 				 &fwreq.ptp_adj_freq.ns_mac,
+ 				 &fwreq.ptp_adj_freq.fns_mac);
+ 	hw_atl_b0_adj_params_get(AQ_HW_PHY_COUNTER_HZ, ppb,
+ 				 &fwreq.ptp_adj_freq.ns_phy,
+ 				 &fwreq.ptp_adj_freq.fns_phy);
+ 	hw_atl_b0_mac_adj_param_calc(&fwreq.ptp_adj_freq,
+ 				     AQ_HW_PHY_COUNTER_HZ,
+ 				     AQ_HW_MAC_COUNTER_HZ);
+ 
+ 	size = sizeof(fwreq.msg_id) + sizeof(fwreq.ptp_adj_freq);
+ 	return self->aq_fw_ops->send_fw_request(self, &fwreq, size);
+ }
+ 
+ static int hw_atl_b0_gpio_pulse(struct aq_hw_s *self, u32 index,
+ 				u64 start, u32 period)
+ {
+ 	struct hw_fw_request_iface fwreq;
+ 	size_t size;
+ 
+ 	memset(&fwreq, 0, sizeof(fwreq));
+ 
+ 	fwreq.msg_id = HW_AQ_FW_REQUEST_PTP_GPIO_CTRL;
+ 	fwreq.ptp_gpio_ctrl.index = index;
+ 	fwreq.ptp_gpio_ctrl.period = period;
+ 	/* Apply time offset */
+ 	fwreq.ptp_gpio_ctrl.start = start;
+ 
+ 	size = sizeof(fwreq.msg_id) + sizeof(fwreq.ptp_gpio_ctrl);
+ 	return self->aq_fw_ops->send_fw_request(self, &fwreq, size);
+ }
+ 
+ static int hw_atl_b0_extts_gpio_enable(struct aq_hw_s *self, u32 index,
+ 				       u32 enable)
+ {
+ 	/* Enable/disable Sync1588 GPIO Timestamping */
+ 	aq_phy_write_reg(self, MDIO_MMD_PCS, 0xc611, enable ? 0x71 : 0);
+ 
+ 	return 0;
+ }
+ 
+ static int hw_atl_b0_get_sync_ts(struct aq_hw_s *self, u64 *ts)
+ {
+ 	u64 sec_l;
+ 	u64 sec_h;
+ 	u64 nsec_l;
+ 	u64 nsec_h;
+ 
+ 	if (!ts)
+ 		return -1;
+ 
+ 	/* PTP external GPIO clock seconds count 15:0 */
+ 	sec_l = aq_phy_read_reg(self, MDIO_MMD_PCS, 0xc914);
+ 	/* PTP external GPIO clock seconds count 31:16 */
+ 	sec_h = aq_phy_read_reg(self, MDIO_MMD_PCS, 0xc915);
+ 	/* PTP external GPIO clock nanoseconds count 15:0 */
+ 	nsec_l = aq_phy_read_reg(self, MDIO_MMD_PCS, 0xc916);
+ 	/* PTP external GPIO clock nanoseconds count 31:16 */
+ 	nsec_h = aq_phy_read_reg(self, MDIO_MMD_PCS, 0xc917);
+ 
+ 	*ts = (nsec_h << 16) + nsec_l + ((sec_h << 16) + sec_l) * NSEC_PER_SEC;
+ 
+ 	return 0;
+ }
+ 
+ static u16 hw_atl_b0_rx_extract_ts(struct aq_hw_s *self, u8 *p,
+ 				   unsigned int len, u64 *timestamp)
+ {
+ 	unsigned int offset = 14;
+ 	struct ethhdr *eth;
+ 	__be64 sec;
+ 	__be32 ns;
+ 	u8 *ptr;
+ 
+ 	if (len <= offset || !timestamp)
+ 		return 0;
+ 
+ 	/* The TIMESTAMP in the end of package has following format:
+ 	 * (big-endian)
+ 	 *   struct {
+ 	 *     uint64_t sec;
+ 	 *     uint32_t ns;
+ 	 *     uint16_t stream_id;
+ 	 *   };
+ 	 */
+ 	ptr = p + (len - offset);
+ 	memcpy(&sec, ptr, sizeof(sec));
+ 	ptr += sizeof(sec);
+ 	memcpy(&ns, ptr, sizeof(ns));
+ 
+ 	*timestamp = (be64_to_cpu(sec) & 0xffffffffffffllu) * NSEC_PER_SEC +
+ 		     be32_to_cpu(ns) + self->ptp_clk_offset;
+ 
+ 	eth = (struct ethhdr *)p;
+ 
+ 	return (eth->h_proto == htons(ETH_P_1588)) ? 12 : 14;
+ }
+ 
+ static int hw_atl_b0_extract_hwts(struct aq_hw_s *self, u8 *p, unsigned int len,
+ 				  u64 *timestamp)
+ {
+ 	struct hw_atl_rxd_hwts_wb_s *hwts_wb = (struct hw_atl_rxd_hwts_wb_s *)p;
+ 	u64 tmp, sec, ns;
+ 
+ 	sec = 0;
+ 	tmp = (hwts_wb->sec_lw0 >> 2) & 0x3ff;
+ 	sec += tmp;
+ 	tmp = (u64)((hwts_wb->sec_lw1 >> 16) & 0xffff) << 10;
+ 	sec += tmp;
+ 	tmp = (u64)(hwts_wb->sec_hw & 0xfff) << 26;
+ 	sec += tmp;
+ 	tmp = (u64)((hwts_wb->sec_hw >> 22) & 0x3ff) << 38;
+ 	sec += tmp;
+ 	ns = sec * NSEC_PER_SEC + hwts_wb->ns;
+ 	if (timestamp)
+ 		*timestamp = ns + self->ptp_clk_offset;
+ 	return 0;
+ }
+ 
++>>>>>>> f08a464c27ca (net: atlantic: ptp gpio adjustments)
  static int hw_atl_b0_hw_fl3l4_clear(struct aq_hw_s *self,
  				    struct aq_rx_filter_l3l4 *data)
  {
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
index 103608a7664f,77a4ed64830f..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
@@@ -20,15 -17,22 +20,18 @@@
  #include "hw_atl_utils.h"
  #include "hw_atl_llh.h"
  
 -#define HW_ATL_FW2X_MPI_LED_ADDR         0x31c
 -#define HW_ATL_FW2X_MPI_RPC_ADDR         0x334
 +#define HW_ATL_FW2X_MPI_RPC_ADDR        0x334
  
 -#define HW_ATL_FW2X_MPI_MBOX_ADDR        0x360
 -#define HW_ATL_FW2X_MPI_EFUSE_ADDR       0x364
 -#define HW_ATL_FW2X_MPI_CONTROL_ADDR     0x368
 -#define HW_ATL_FW2X_MPI_CONTROL2_ADDR    0x36C
 -#define HW_ATL_FW2X_MPI_STATE_ADDR       0x370
 -#define HW_ATL_FW2X_MPI_STATE2_ADDR      0x374
 -
 -#define HW_ATL_FW3X_EXT_CONTROL_ADDR     0x378
 -#define HW_ATL_FW3X_EXT_STATE_ADDR       0x37c
 +#define HW_ATL_FW2X_MPI_MBOX_ADDR       0x360
 +#define HW_ATL_FW2X_MPI_EFUSE_ADDR	0x364
 +#define HW_ATL_FW2X_MPI_CONTROL_ADDR	0x368
 +#define HW_ATL_FW2X_MPI_CONTROL2_ADDR	0x36C
 +#define HW_ATL_FW2X_MPI_STATE_ADDR	0x370
 +#define HW_ATL_FW2X_MPI_STATE2_ADDR     0x374
  
+ #define HW_ATL_FW3X_PTP_ADJ_LSW_ADDR	 0x50a0
+ #define HW_ATL_FW3X_PTP_ADJ_MSW_ADDR	 0x50a4
+ 
  #define HW_ATL_FW2X_CAP_PAUSE            BIT(CAPS_HI_PAUSE)
  #define HW_ATL_FW2X_CAP_ASYM_PAUSE       BIT(CAPS_HI_ASYMMETRIC_PAUSE)
  #define HW_ATL_FW2X_CAP_SLEEP_PROXY      BIT(CAPS_HI_SLEEP_PROXY)
@@@ -431,22 -464,38 +434,57 @@@ err_exit
  	return err;
  }
  
 +static int aq_fw2x_set_power(struct aq_hw_s *self, unsigned int power_state,
 +			     u8 *mac)
 +{
 +	int err = 0;
 +
 +	if (self->aq_nic_cfg->wol & AQ_NIC_WOL_ENABLED) {
 +		err = aq_fw2x_set_sleep_proxy(self, mac);
 +		if (err < 0)
 +			goto err_exit;
 +		err = aq_fw2x_set_wol_params(self, mac);
 +	}
 +
 +err_exit:
 +	return err;
 +}
 +
++<<<<<<< HEAD
++=======
+ static void aq_fw3x_enable_ptp(struct aq_hw_s *self, int enable)
+ {
+ 	u32 ptp_opts = aq_hw_read_reg(self, HW_ATL_FW3X_EXT_STATE_ADDR);
+ 	u32 all_ptp_features = BIT(CAPS_EX_PHY_PTP_EN) |
+ 						   BIT(CAPS_EX_PTP_GPIO_EN);
+ 
+ 	if (enable)
+ 		ptp_opts |= all_ptp_features;
+ 	else
+ 		ptp_opts &= ~all_ptp_features;
+ 
+ 	aq_hw_write_reg(self, HW_ATL_FW3X_EXT_CONTROL_ADDR, ptp_opts);
+ }
+ 
+ static void aq_fw3x_adjust_ptp(struct aq_hw_s *self, uint64_t adj)
+ {
+ 	aq_hw_write_reg(self, HW_ATL_FW3X_PTP_ADJ_LSW_ADDR,
+ 			(adj >>  0) & 0xffffffff);
+ 	aq_hw_write_reg(self, HW_ATL_FW3X_PTP_ADJ_MSW_ADDR,
+ 			(adj >> 32) & 0xffffffff);
+ }
+ 
+ static int aq_fw2x_led_control(struct aq_hw_s *self, u32 mode)
+ {
+ 	if (self->fw_ver_actual < HW_ATL_FW_VER_LED)
+ 		return -EOPNOTSUPP;
+ 
+ 	aq_hw_write_reg(self, HW_ATL_FW2X_MPI_LED_ADDR, mode);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> f08a464c27ca (net: atlantic: ptp gpio adjustments)
  static int aq_fw2x_set_eee_rate(struct aq_hw_s *self, u32 speed)
  {
  	u32 mpi_opts = aq_hw_read_reg(self, HW_ATL_FW2X_MPI_CONTROL2_ADDR);
@@@ -537,19 -625,24 +575,34 @@@ static u32 aq_fw2x_state2_get(struct aq
  }
  
  const struct aq_fw_ops aq_fw_2x_ops = {
 -	.init               = aq_fw2x_init,
 -	.deinit             = aq_fw2x_deinit,
 -	.reset              = NULL,
 -	.renegotiate        = aq_fw2x_renegotiate,
 -	.get_mac_permanent  = aq_fw2x_get_mac_permanent,
 -	.set_link_speed     = aq_fw2x_set_link_speed,
 -	.set_state          = aq_fw2x_set_state,
 +	.init = aq_fw2x_init,
 +	.deinit = aq_fw2x_deinit,
 +	.reset = NULL,
 +	.renegotiate = aq_fw2x_renegotiate,
 +	.get_mac_permanent = aq_fw2x_get_mac_permanent,
 +	.set_link_speed = aq_fw2x_set_link_speed,
 +	.set_state = aq_fw2x_set_state,
  	.update_link_status = aq_fw2x_update_link_status,
++<<<<<<< HEAD
 +	.update_stats = aq_fw2x_update_stats,
 +	.get_phy_temp = aq_fw2x_get_phy_temp,
 +	.set_power = aq_fw2x_set_power,
 +	.set_eee_rate = aq_fw2x_set_eee_rate,
 +	.get_eee_rate = aq_fw2x_get_eee_rate,
 +	.set_flow_control = aq_fw2x_set_flow_control,
 +	.get_flow_control = aq_fw2x_get_flow_control
++=======
+ 	.update_stats       = aq_fw2x_update_stats,
+ 	.get_phy_temp       = aq_fw2x_get_phy_temp,
+ 	.set_power          = aq_fw2x_set_power,
+ 	.set_eee_rate       = aq_fw2x_set_eee_rate,
+ 	.get_eee_rate       = aq_fw2x_get_eee_rate,
+ 	.set_flow_control   = aq_fw2x_set_flow_control,
+ 	.get_flow_control   = aq_fw2x_get_flow_control,
+ 	.send_fw_request    = aq_fw2x_send_fw_request,
+ 	.enable_ptp         = aq_fw3x_enable_ptp,
+ 	.led_control        = aq_fw2x_led_control,
+ 	.set_phyloopback    = aq_fw2x_set_phyloopback,
+ 	.adjust_ptp         = aq_fw3x_adjust_ptp,
++>>>>>>> f08a464c27ca (net: atlantic: ptp gpio adjustments)
  };
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_hw.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
