x86/boot/compressed: Force hidden visibility for all symbol references

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ard Biesheuvel <ardb@kernel.org>
commit e544ea57ac0734bca752eb2d8635fecbe932c356
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e544ea57.failed

Eliminate all GOT entries in the decompressor binary, by forcing hidden
visibility for all symbol references, which informs the compiler that
such references will be resolved at link time without the need for
allocating GOT entries.

To ensure that no GOT entries will creep back in, add an assertion to
the decompressor linker script that will fire if the .got section has
a non-zero size.

[Arvind: move hidden.h to include/linux instead of making a copy]

	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
	Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Tested-by: Nick Desaulniers <ndesaulniers@google.com>
	Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Acked-by: Arvind Sankar <nivedita@alum.mit.edu>
Link: https://lore.kernel.org/r/20200731230820.1742553-3-keescook@chromium.org
(cherry picked from commit e544ea57ac0734bca752eb2d8635fecbe932c356)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/Makefile
#	drivers/firmware/efi/libstub/Makefile
diff --cc arch/x86/boot/compressed/Makefile
index 62f8bfe3111a,7c687a770537..000000000000
--- a/arch/x86/boot/compressed/Makefile
+++ b/arch/x86/boot/compressed/Makefile
@@@ -33,10 -35,15 +33,18 @@@ cflags-$(CONFIG_X86_32) := -march=i38
  cflags-$(CONFIG_X86_64) := -mcmodel=small
  KBUILD_CFLAGS += $(cflags-y)
  KBUILD_CFLAGS += -mno-mmx -mno-sse
 -KBUILD_CFLAGS += -ffreestanding
 -KBUILD_CFLAGS += -fno-stack-protector
 +KBUILD_CFLAGS += $(call cc-option,-ffreestanding)
 +KBUILD_CFLAGS += $(call cc-option,-fno-stack-protector)
  KBUILD_CFLAGS += $(call cc-disable-warning, address-of-packed-member)
  KBUILD_CFLAGS += $(call cc-disable-warning, gnu)
++<<<<<<< HEAD
++=======
+ KBUILD_CFLAGS += -Wno-pointer-sign
+ KBUILD_CFLAGS += $(call cc-option,-fmacro-prefix-map=$(srctree)/=)
+ KBUILD_CFLAGS += -fno-asynchronous-unwind-tables
+ KBUILD_CFLAGS += -D__DISABLE_EXPORTS
+ KBUILD_CFLAGS += -include $(srctree)/include/linux/hidden.h
++>>>>>>> e544ea57ac07 (x86/boot/compressed: Force hidden visibility for all symbol references)
  
  KBUILD_AFLAGS  := $(KBUILD_CFLAGS) -D__ASSEMBLY__
  GCOV_PROFILE := n
diff --cc drivers/firmware/efi/libstub/Makefile
index a34e9290a699,5eefd60917df..000000000000
--- a/drivers/firmware/efi/libstub/Makefile
+++ b/drivers/firmware/efi/libstub/Makefile
@@@ -7,23 -7,39 +7,28 @@@
  #
  cflags-$(CONFIG_X86_32)		:= -march=i386
  cflags-$(CONFIG_X86_64)		:= -mcmodel=small
 -cflags-$(CONFIG_X86)		+= -m$(BITS) -D__KERNEL__ \
 +cflags-$(CONFIG_X86)		+= -m$(BITS) -D__KERNEL__ -O2 \
  				   -fPIC -fno-strict-aliasing -mno-red-zone \
 -				   -mno-mmx -mno-sse -fshort-wchar \
 -				   -Wno-pointer-sign \
 -				   $(call cc-disable-warning, address-of-packed-member) \
 -				   $(call cc-disable-warning, gnu) \
 -				   -fno-asynchronous-unwind-tables
 +				   -mno-mmx -mno-sse -fshort-wchar
  
 -# arm64 uses the full KBUILD_CFLAGS so it's necessary to explicitly
 -# disable the stackleak plugin
 -cflags-$(CONFIG_ARM64)		:= $(subst $(CC_FLAGS_FTRACE),,$(KBUILD_CFLAGS)) \
 -				   -fpie $(DISABLE_STACKLEAK_PLUGIN)
 -cflags-$(CONFIG_ARM)		:= $(subst $(CC_FLAGS_FTRACE),,$(KBUILD_CFLAGS)) \
 -				   -fno-builtin -fpic \
 -				   $(call cc-option,-mno-single-pic-base)
 +cflags-$(CONFIG_ARM64)		:= $(subst -pg,,$(KBUILD_CFLAGS)) -fpie
 +cflags-$(CONFIG_ARM)		:= $(subst -pg,,$(KBUILD_CFLAGS)) \
 +				   -fno-builtin -fpic -mno-single-pic-base
  
 -cflags-$(CONFIG_EFI_GENERIC_STUB) += -I$(srctree)/scripts/dtc/libfdt
 +cflags-$(CONFIG_EFI_ARMSTUB)	+= -I$(srctree)/scripts/dtc/libfdt
  
++<<<<<<< HEAD
 +KBUILD_CFLAGS			:= $(cflags-y) -DDISABLE_BRANCH_PROFILING \
++=======
+ KBUILD_CFLAGS			:= $(cflags-y) -Os -DDISABLE_BRANCH_PROFILING \
+ 				   -include $(srctree)/include/linux/hidden.h \
++>>>>>>> e544ea57ac07 (x86/boot/compressed: Force hidden visibility for all symbol references)
  				   -D__NO_FORTIFY \
 -				   -ffreestanding \
 -				   -fno-stack-protector \
 -				   $(call cc-option,-fno-addrsig) \
 -				   -D__DISABLE_EXPORTS
 -
 -# remove SCS flags from all objects in this directory
 -KBUILD_CFLAGS := $(filter-out $(CC_FLAGS_SCS), $(KBUILD_CFLAGS))
 +				   $(call cc-option,-ffreestanding) \
 +				   $(call cc-option,-fno-stack-protector)
  
  GCOV_PROFILE			:= n
 -# Sanitizer runtimes are unavailable and cannot be linked here.
  KASAN_SANITIZE			:= n
 -KCSAN_SANITIZE			:= n
  UBSAN_SANITIZE			:= n
  OBJECT_FILES_NON_STANDARD	:= y
  
* Unmerged path arch/x86/boot/compressed/Makefile
diff --git a/arch/x86/boot/compressed/vmlinux.lds.S b/arch/x86/boot/compressed/vmlinux.lds.S
index eab537066903..f4c3d2c99449 100644
--- a/arch/x86/boot/compressed/vmlinux.lds.S
+++ b/arch/x86/boot/compressed/vmlinux.lds.S
@@ -78,6 +78,7 @@ SECTIONS
 	_end = .;
 }
 
+ASSERT(SIZEOF(.got) == 0, "Unexpected GOT entries detected!")
 #ifdef CONFIG_X86_64
 ASSERT(SIZEOF(.got.plt) == 0 || SIZEOF(.got.plt) == 0x18, "Unexpected GOT/PLT entries detected!")
 #else
* Unmerged path drivers/firmware/efi/libstub/Makefile
diff --git a/include/linux/hidden.h b/include/linux/hidden.h
new file mode 100644
index 000000000000..49a17b6b5962
--- /dev/null
+++ b/include/linux/hidden.h
@@ -0,0 +1,19 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * When building position independent code with GCC using the -fPIC option,
+ * (or even the -fPIE one on older versions), it will assume that we are
+ * building a dynamic object (either a shared library or an executable) that
+ * may have symbol references that can only be resolved at load time. For a
+ * variety of reasons (ELF symbol preemption, the CoW footprint of the section
+ * that is modified by the loader), this results in all references to symbols
+ * with external linkage to go via entries in the Global Offset Table (GOT),
+ * which carries absolute addresses which need to be fixed up when the
+ * executable image is loaded at an offset which is different from its link
+ * time offset.
+ *
+ * Fortunately, there is a way to inform the compiler that such symbol
+ * references will be satisfied at link time rather than at load time, by
+ * giving them 'hidden' visibility.
+ */
+
+#pragma GCC visibility push(hidden)
