x86/entry: Get rid of ist_begin/end_non_atomic()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] entry: Get rid of ist_begin/end_non_atomic() (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 95.65%
commit-author Thomas Gleixner <tglx@linutronix.de>
commit b052df3da821adfd6be26a6eb16624fb50e90e56
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b052df3d.failed

This is completely overengineered and definitely not an interface which
should be made available to anything else than this particular MCE case.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
Link: https://lkml.kernel.org/r/20200505134059.462640294@linutronix.de


(cherry picked from commit b052df3da821adfd6be26a6eb16624fb50e90e56)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mce/core.c
diff --cc arch/x86/kernel/cpu/mce/core.c
index df108ae34b27,98bf91cd7d5d..000000000000
--- a/arch/x86/kernel/cpu/mce/core.c
+++ b/arch/x86/kernel/cpu/mce/core.c
@@@ -1314,16 -1352,18 +1314,22 @@@ void do_machine_check(struct pt_regs *r
  
  	/* Fault was in user mode and we need to take some action */
  	if ((m.cs & 3) == 3) {
- 		ist_begin_non_atomic(regs);
+ 		/* If this triggers there is no way to recover. Die hard. */
+ 		BUG_ON(!on_thread_stack() || !user_mode(regs));
  		local_irq_enable();
+ 		preempt_enable();
  
  		if (kill_it || do_memory_failure(&m))
++<<<<<<< HEAD
 +			force_sig(SIGBUS, current);
++=======
+ 			force_sig(SIGBUS);
+ 		preempt_disable();
++>>>>>>> b052df3da821 (x86/entry: Get rid of ist_begin/end_non_atomic())
  		local_irq_disable();
- 		ist_end_non_atomic();
  	} else {
 -		if (!fixup_exception(regs, X86_TRAP_MC, error_code, 0))
 -			mce_panic("Failed kernel mode recovery", &m, msg);
 +		if (!fixup_exception(regs, X86_TRAP_MC))
 +			mce_panic("Failed kernel mode recovery", &m, NULL);
  	}
  
  out_ist:
diff --git a/arch/x86/include/asm/traps.h b/arch/x86/include/asm/traps.h
index 121452e33fe5..d47eeb1e4d8c 100644
--- a/arch/x86/include/asm/traps.h
+++ b/arch/x86/include/asm/traps.h
@@ -116,8 +116,6 @@ asmlinkage void smp_deferred_error_interrupt(struct pt_regs *regs);
 
 extern void ist_enter(struct pt_regs *regs);
 extern void ist_exit(struct pt_regs *regs);
-extern void ist_begin_non_atomic(struct pt_regs *regs);
-extern void ist_end_non_atomic(void);
 
 #ifdef CONFIG_VMAP_STACK
 void __noreturn handle_stack_overflow(const char *message,
* Unmerged path arch/x86/kernel/cpu/mce/core.c
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index 1d1d9da68d9c..23c232242b51 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -122,43 +122,6 @@ void ist_exit(struct pt_regs *regs)
 		rcu_nmi_exit();
 }
 
-/**
- * ist_begin_non_atomic() - begin a non-atomic section in an IST exception
- * @regs:	regs passed to the IST exception handler
- *
- * IST exception handlers normally cannot schedule.  As a special
- * exception, if the exception interrupted userspace code (i.e.
- * user_mode(regs) would return true) and the exception was not
- * a double fault, it can be safe to schedule.  ist_begin_non_atomic()
- * begins a non-atomic section within an ist_enter()/ist_exit() region.
- * Callers are responsible for enabling interrupts themselves inside
- * the non-atomic section, and callers must call ist_end_non_atomic()
- * before ist_exit().
- */
-void ist_begin_non_atomic(struct pt_regs *regs)
-{
-	BUG_ON(!user_mode(regs));
-
-	/*
-	 * Sanity check: we need to be on the normal thread stack.  This
-	 * will catch asm bugs and any attempt to use ist_preempt_enable
-	 * from double_fault.
-	 */
-	BUG_ON(!on_thread_stack());
-
-	preempt_enable_no_resched();
-}
-
-/**
- * ist_end_non_atomic() - begin a non-atomic section in an IST exception
- *
- * Ends a non-atomic section started with ist_begin_non_atomic().
- */
-void ist_end_non_atomic(void)
-{
-	preempt_disable();
-}
-
 int is_valid_bugaddr(unsigned long addr)
 {
 	unsigned short ud;
