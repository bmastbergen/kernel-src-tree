driver core: Fix handling of fw_devlink=permissive

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Saravana Kannan <saravanak@google.com>
commit 00b247557858bc0651a646710d90aba186bfeed4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/00b24755.failed

When commit 8375e74f2bca ("driver core: Add fw_devlink kernel
commandline option") added fw_devlink, it didn't implement "permissive"
mode correctly.

That commit got the device links flags correct to make sure unprobed
suppliers don't block the probing of a consumer. However, if a consumer
is waiting for mandatory suppliers to register, that could still block a
consumer from probing.

This commit fixes that by making sure in permissive mode, all suppliers
to a consumer are treated as a optional suppliers. So, even if a
consumer is waiting for suppliers to register and link itself (using the
DL_FLAG_SYNC_STATE_ONLY flag) to the supplier, the consumer is never
blocked from probing.

Fixes: 8375e74f2bca ("driver core: Add fw_devlink kernel commandline option")
	Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
	Signed-off-by: Saravana Kannan <saravanak@google.com>
	Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
Link: https://lore.kernel.org/r/20200331022832.209618-1-saravanak@google.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 00b247557858bc0651a646710d90aba186bfeed4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index 8a0d36852b14,073045cb214e..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -2019,6 -2345,36 +2019,39 @@@ int device_private_init(struct device *
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static u32 fw_devlink_flags;
+ static int __init fw_devlink_setup(char *arg)
+ {
+ 	if (!arg)
+ 		return -EINVAL;
+ 
+ 	if (strcmp(arg, "off") == 0) {
+ 		fw_devlink_flags = 0;
+ 	} else if (strcmp(arg, "permissive") == 0) {
+ 		fw_devlink_flags = DL_FLAG_SYNC_STATE_ONLY;
+ 	} else if (strcmp(arg, "on") == 0) {
+ 		fw_devlink_flags = DL_FLAG_AUTOPROBE_CONSUMER;
+ 	} else if (strcmp(arg, "rpm") == 0) {
+ 		fw_devlink_flags = DL_FLAG_AUTOPROBE_CONSUMER |
+ 				   DL_FLAG_PM_RUNTIME;
+ 	}
+ 	return 0;
+ }
+ early_param("fw_devlink", fw_devlink_setup);
+ 
+ u32 fw_devlink_get_flags(void)
+ {
+ 	return fw_devlink_flags;
+ }
+ 
+ static bool fw_devlink_is_permissive(void)
+ {
+ 	return fw_devlink_flags == DL_FLAG_SYNC_STATE_ONLY;
+ }
+ 
++>>>>>>> 00b247557858 (driver core: Fix handling of fw_devlink=permissive)
  /**
   * device_add - add device to device hierarchy.
   * @dev: device.
@@@ -2145,8 -2507,33 +2178,36 @@@ int device_add(struct device *dev
  
  	kobject_uevent(&dev->kobj, KOBJ_ADD);
  
 -	if (dev->fwnode && !dev->fwnode->dev) {
 +	if (dev->fwnode && !dev->fwnode->dev)
  		dev->fwnode->dev = dev;
++<<<<<<< HEAD
++=======
+ 		is_fwnode_dev = true;
+ 	}
+ 
+ 	/*
+ 	 * Check if any of the other devices (consumers) have been waiting for
+ 	 * this device (supplier) to be added so that they can create a device
+ 	 * link to it.
+ 	 *
+ 	 * This needs to happen after device_pm_add() because device_link_add()
+ 	 * requires the supplier be registered before it's called.
+ 	 *
+ 	 * But this also needs to happe before bus_probe_device() to make sure
+ 	 * waiting consumers can link to it before the driver is bound to the
+ 	 * device and the driver sync_state callback is called for this device.
+ 	 */
+ 	device_link_add_missing_supplier_links();
+ 
+ 	if (fw_devlink_flags && is_fwnode_dev &&
+ 	    fwnode_has_op(dev->fwnode, add_links)) {
+ 		fw_ret = fwnode_call_int_op(dev->fwnode, add_links, dev);
+ 		if (fw_ret == -ENODEV && !fw_devlink_is_permissive())
+ 			device_link_wait_for_mandatory_supplier(dev);
+ 		else if (fw_ret)
+ 			device_link_wait_for_optional_supplier(dev);
+ 	}
++>>>>>>> 00b247557858 (driver core: Fix handling of fw_devlink=permissive)
  
  	bus_probe_device(dev);
  	if (parent)
* Unmerged path drivers/base/core.c
