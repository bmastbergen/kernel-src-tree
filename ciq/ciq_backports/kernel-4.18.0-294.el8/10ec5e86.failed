block: merge part_{inc,dev}_in_flight into their only callers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [block] block: merge part_{inc, dev}_in_flight into their only callers (Ming Lei) [1881760]
Rebuild_FUZZ: 99.19%
commit-author Christoph Hellwig <hch@lst.de>
commit 10ec5e86f9b840b7070b9146257a199dd0227d7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/10ec5e86.failed

part_inc_in_flight and part_dec_in_flight only have one caller each, and
those callers are purely for bio based drivers.  Merge each function into
the only caller, and remove the superflous blk-mq checks.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 10ec5e86f9b840b7070b9146257a199dd0227d7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/bio.c
#	block/blk.h
diff --cc block/bio.c
index b2a160185268,9c101a0572ca..000000000000
--- a/block/bio.c
+++ b/block/bio.c
@@@ -1892,8 -1423,9 +1896,14 @@@ void generic_end_io_acct(struct request
  
  	update_io_ticks(part, now, true);
  	part_stat_add(part, nsecs[sgrp], jiffies_to_nsecs(duration));
++<<<<<<< HEAD
 +	part_stat_add(part, time_in_queue, duration);
 +	part_dec_in_flight(q, part, op_is_write(req_op));
++=======
+ 	part_stat_local_dec(part, in_flight[rw]);
+ 	if (part->partno)
+ 		part_stat_local_dec(&part_to_disk(part)->part0, in_flight[rw]);
++>>>>>>> 10ec5e86f9b8 (block: merge part_{inc,dev}_in_flight into their only callers)
  
  	part_stat_unlock();
  }
diff --cc block/blk.h
index 340a0af4cb0c,af11fd400c72..000000000000
--- a/block/blk.h
+++ b/block/blk.h
@@@ -321,10 -345,101 +321,34 @@@ void blk_queue_free_zone_bitmaps(struc
  static inline void blk_queue_free_zone_bitmaps(struct request_queue *q) {}
  #endif
  
++<<<<<<< HEAD
 +/* internal helper for accessing request_aux  */
 +static inline struct request_aux *rq_aux(const struct request *rq)
++=======
+ void update_io_ticks(struct hd_struct *part, unsigned long now, bool end);
+ struct hd_struct *disk_map_sector_rcu(struct gendisk *disk, sector_t sector);
+ 
+ int blk_alloc_devt(struct hd_struct *part, dev_t *devt);
+ void blk_free_devt(dev_t devt);
+ void blk_invalidate_devt(dev_t devt);
+ char *disk_name(struct gendisk *hd, int partno, char *buf);
+ #define ADDPART_FLAG_NONE	0
+ #define ADDPART_FLAG_RAID	1
+ #define ADDPART_FLAG_WHOLEDISK	2
+ void delete_partition(struct gendisk *disk, struct hd_struct *part);
+ int bdev_add_partition(struct block_device *bdev, int partno,
+ 		sector_t start, sector_t length);
+ int bdev_del_partition(struct block_device *bdev, int partno);
+ int bdev_resize_partition(struct block_device *bdev, int partno,
+ 		sector_t start, sector_t length);
+ int disk_expand_part_tbl(struct gendisk *disk, int target);
+ int hd_ref_init(struct hd_struct *part);
+ 
+ /* no need to get/put refcount of part0 */
+ static inline int hd_struct_try_get(struct hd_struct *part)
++>>>>>>> 10ec5e86f9b8 (block: merge part_{inc,dev}_in_flight into their only callers)
  {
 -	if (part->partno)
 -		return percpu_ref_tryget_live(&part->ref);
 -	return 1;
 -}
 -
 -static inline void hd_struct_put(struct hd_struct *part)
 -{
 -	if (part->partno)
 -		percpu_ref_put(&part->ref);
 -}
 -
 -static inline void hd_free_part(struct hd_struct *part)
 -{
 -	free_part_stats(part);
 -	kfree(part->info);
 -	percpu_ref_exit(&part->ref);
 -}
 -
 -/*
 - * Any access of part->nr_sects which is not protected by partition
 - * bd_mutex or gendisk bdev bd_mutex, should be done using this
 - * accessor function.
 - *
 - * Code written along the lines of i_size_read() and i_size_write().
 - * CONFIG_PREEMPTION case optimizes the case of UP kernel with preemption
 - * on.
 - */
 -static inline sector_t part_nr_sects_read(struct hd_struct *part)
 -{
 -#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
 -	sector_t nr_sects;
 -	unsigned seq;
 -	do {
 -		seq = read_seqcount_begin(&part->nr_sects_seq);
 -		nr_sects = part->nr_sects;
 -	} while (read_seqcount_retry(&part->nr_sects_seq, seq));
 -	return nr_sects;
 -#elif BITS_PER_LONG==32 && defined(CONFIG_PREEMPTION)
 -	sector_t nr_sects;
 -
 -	preempt_disable();
 -	nr_sects = part->nr_sects;
 -	preempt_enable();
 -	return nr_sects;
 -#else
 -	return part->nr_sects;
 -#endif
 +	return (struct request_aux *)((void *)rq - sizeof(struct request_aux));
  }
  
 -/*
 - * Should be called with mutex lock held (typically bd_mutex) of partition
 - * to provide mutual exlusion among writers otherwise seqcount might be
 - * left in wrong state leaving the readers spinning infinitely.
 - */
 -static inline void part_nr_sects_write(struct hd_struct *part, sector_t size)
 -{
 -#if BITS_PER_LONG==32 && defined(CONFIG_SMP)
 -	write_seqcount_begin(&part->nr_sects_seq);
 -	part->nr_sects = size;
 -	write_seqcount_end(&part->nr_sects_seq);
 -#elif BITS_PER_LONG==32 && defined(CONFIG_PREEMPTION)
 -	preempt_disable();
 -	part->nr_sects = size;
 -	preempt_enable();
 -#else
 -	part->nr_sects = size;
 -#endif
 -}
 -
 -struct request_queue *__blk_alloc_queue(int node_id);
 -
 -int bio_add_hw_page(struct request_queue *q, struct bio *bio,
 -		struct page *page, unsigned int len, unsigned int offset,
 -		unsigned int max_sectors, bool *same_page);
 -
  #endif /* BLK_INTERNAL_H */
* Unmerged path block/bio.c
* Unmerged path block/blk.h
diff --git a/block/genhd.c b/block/genhd.c
index a40c6bd653e9..f19463472ad0 100644
--- a/block/genhd.c
+++ b/block/genhd.c
@@ -69,26 +69,6 @@ void set_capacity_revalidate_and_notify(struct gendisk *disk, sector_t size,
 EXPORT_SYMBOL_GPL(set_capacity_revalidate_and_notify);
 
 
-void part_inc_in_flight(struct request_queue *q, struct hd_struct *part, int rw)
-{
-	if (queue_is_mq(q))
-		return;
-
-	part_stat_local_inc(part, in_flight[rw]);
-	if (part->partno)
-		part_stat_local_inc(&part_to_disk(part)->part0, in_flight[rw]);
-}
-
-void part_dec_in_flight(struct request_queue *q, struct hd_struct *part, int rw)
-{
-	if (queue_is_mq(q))
-		return;
-
-	part_stat_local_dec(part, in_flight[rw]);
-	if (part->partno)
-		part_stat_local_dec(&part_to_disk(part)->part0, in_flight[rw]);
-}
-
 static unsigned int part_in_flight(struct request_queue *q,
 		struct hd_struct *part)
 {
