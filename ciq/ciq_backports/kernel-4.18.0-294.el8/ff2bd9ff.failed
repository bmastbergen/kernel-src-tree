KVM: SVM: Fix sev_pin_memory() error handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit ff2bd9ff115218c144441e1df0370d9083b82866
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ff2bd9ff.failed

The sev_pin_memory() function was modified to return error pointers
instead of NULL but there are two problems.  The first problem is that
if "npages" is zero then it still returns NULL.  Secondly, several of
the callers were not updated to check for error pointers instead of
NULL.

Either one of these issues will lead to an Oops.

Fixes: a8d908b5873c ("KVM: x86: report sev_pin_memory errors with PTR_ERR")
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
Message-Id: <20200714142351.GA315374@mwanda>
	Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit ff2bd9ff115218c144441e1df0370d9083b82866)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm/sev.c
diff --cc arch/x86/kvm/svm/sev.c
index f2d67b84609c,402dc4234e39..000000000000
--- a/arch/x86/kvm/svm/sev.c
+++ b/arch/x86/kvm/svm/sev.c
@@@ -318,9 -318,10 +318,10 @@@ static struct page **sev_pin_memory(str
  	unsigned long locked, lock_limit;
  	struct page **pages;
  	unsigned long first, last;
+ 	int ret;
  
  	if (ulen == 0 || uaddr + ulen < uaddr)
 -		return ERR_PTR(-EINVAL);
 +		return NULL;
  
  	/* Calculate number of pages. */
  	first = (uaddr & PAGE_MASK) >> PAGE_SHIFT;
@@@ -346,12 -346,13 +347,13 @@@
  		pages = kmalloc(size, GFP_KERNEL_ACCOUNT);
  
  	if (!pages)
 -		return ERR_PTR(-ENOMEM);
 +		return NULL;
  
  	/* Pin the user virtual address. */
 -	npinned = pin_user_pages_fast(uaddr, npages, write ? FOLL_WRITE : 0, pages);
 +	npinned = get_user_pages_fast(uaddr, npages, write ? FOLL_WRITE : 0, pages);
  	if (npinned != npages) {
  		pr_err("SEV: Failure locking %lu pages.\n", npages);
+ 		ret = -ENOMEM;
  		goto err;
  	}
  
@@@ -362,10 -363,10 +364,17 @@@
  
  err:
  	if (npinned > 0)
++<<<<<<< HEAD
 +		release_pages(pages, npinned);
 +
 +	kvfree(pages);
 +	return NULL;
++=======
+ 		unpin_user_pages(pages, npinned);
+ 
+ 	kvfree(pages);
+ 	return ERR_PTR(ret);
++>>>>>>> ff2bd9ff1152 (KVM: SVM: Fix sev_pin_memory() error handling)
  }
  
  static void sev_unpin_memory(struct kvm *kvm, struct page **pages,
* Unmerged path arch/x86/kvm/svm/sev.c
