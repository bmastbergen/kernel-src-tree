NFSD: Add tracepoints to NFSD's duplicate reply cache

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 0b175b18648ebedfe255b11a7792f1d76848a8f7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0b175b18.failed

Try to capture DRC failures.

Two additional clean-ups:
- Introduce Doxygen-style comments for the main entry points
- Remove a dprintk that fires for an allocation failure. This was
  the only dprintk in the REPCACHE class.

	Reported-by: kbuild test robot <lkp@intel.com>
[ cel: force typecast for display of checksum values ]
	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 0b175b18648ebedfe255b11a7792f1d76848a8f7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/trace.h
diff --cc fs/nfsd/trace.h
index 33a4a6d6f79e,371dc198d28e..000000000000
--- a/fs/nfsd/trace.h
+++ b/fs/nfsd/trace.h
@@@ -286,6 -288,209 +286,212 @@@ DEFINE_STATEID_EVENT(layout_recall_done
  DEFINE_STATEID_EVENT(layout_recall_fail);
  DEFINE_STATEID_EVENT(layout_recall_release);
  
++<<<<<<< HEAD
++=======
+ TRACE_DEFINE_ENUM(NFSD_FILE_HASHED);
+ TRACE_DEFINE_ENUM(NFSD_FILE_PENDING);
+ TRACE_DEFINE_ENUM(NFSD_FILE_BREAK_READ);
+ TRACE_DEFINE_ENUM(NFSD_FILE_BREAK_WRITE);
+ TRACE_DEFINE_ENUM(NFSD_FILE_REFERENCED);
+ 
+ #define show_nf_flags(val)						\
+ 	__print_flags(val, "|",						\
+ 		{ 1 << NFSD_FILE_HASHED,	"HASHED" },		\
+ 		{ 1 << NFSD_FILE_PENDING,	"PENDING" },		\
+ 		{ 1 << NFSD_FILE_BREAK_READ,	"BREAK_READ" },		\
+ 		{ 1 << NFSD_FILE_BREAK_WRITE,	"BREAK_WRITE" },	\
+ 		{ 1 << NFSD_FILE_REFERENCED,	"REFERENCED"})
+ 
+ /* FIXME: This should probably be fleshed out in the future. */
+ #define show_nf_may(val)						\
+ 	__print_flags(val, "|",						\
+ 		{ NFSD_MAY_READ,		"READ" },		\
+ 		{ NFSD_MAY_WRITE,		"WRITE" },		\
+ 		{ NFSD_MAY_NOT_BREAK_LEASE,	"NOT_BREAK_LEASE" })
+ 
+ DECLARE_EVENT_CLASS(nfsd_file_class,
+ 	TP_PROTO(struct nfsd_file *nf),
+ 	TP_ARGS(nf),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned int, nf_hashval)
+ 		__field(void *, nf_inode)
+ 		__field(int, nf_ref)
+ 		__field(unsigned long, nf_flags)
+ 		__field(unsigned char, nf_may)
+ 		__field(struct file *, nf_file)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->nf_hashval = nf->nf_hashval;
+ 		__entry->nf_inode = nf->nf_inode;
+ 		__entry->nf_ref = refcount_read(&nf->nf_ref);
+ 		__entry->nf_flags = nf->nf_flags;
+ 		__entry->nf_may = nf->nf_may;
+ 		__entry->nf_file = nf->nf_file;
+ 	),
+ 	TP_printk("hash=0x%x inode=0x%p ref=%d flags=%s may=%s file=%p",
+ 		__entry->nf_hashval,
+ 		__entry->nf_inode,
+ 		__entry->nf_ref,
+ 		show_nf_flags(__entry->nf_flags),
+ 		show_nf_may(__entry->nf_may),
+ 		__entry->nf_file)
+ )
+ 
+ #define DEFINE_NFSD_FILE_EVENT(name) \
+ DEFINE_EVENT(nfsd_file_class, name, \
+ 	TP_PROTO(struct nfsd_file *nf), \
+ 	TP_ARGS(nf))
+ 
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_alloc);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_put_final);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_unhash);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_put);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_unhash_and_release_locked);
+ 
+ TRACE_EVENT(nfsd_file_acquire,
+ 	TP_PROTO(struct svc_rqst *rqstp, unsigned int hash,
+ 		 struct inode *inode, unsigned int may_flags,
+ 		 struct nfsd_file *nf, __be32 status),
+ 
+ 	TP_ARGS(rqstp, hash, inode, may_flags, nf, status),
+ 
+ 	TP_STRUCT__entry(
+ 		__field(u32, xid)
+ 		__field(unsigned int, hash)
+ 		__field(void *, inode)
+ 		__field(unsigned int, may_flags)
+ 		__field(int, nf_ref)
+ 		__field(unsigned long, nf_flags)
+ 		__field(unsigned char, nf_may)
+ 		__field(struct file *, nf_file)
+ 		__field(u32, status)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__entry->xid = be32_to_cpu(rqstp->rq_xid);
+ 		__entry->hash = hash;
+ 		__entry->inode = inode;
+ 		__entry->may_flags = may_flags;
+ 		__entry->nf_ref = nf ? refcount_read(&nf->nf_ref) : 0;
+ 		__entry->nf_flags = nf ? nf->nf_flags : 0;
+ 		__entry->nf_may = nf ? nf->nf_may : 0;
+ 		__entry->nf_file = nf ? nf->nf_file : NULL;
+ 		__entry->status = be32_to_cpu(status);
+ 	),
+ 
+ 	TP_printk("xid=0x%x hash=0x%x inode=0x%p may_flags=%s ref=%d nf_flags=%s nf_may=%s nf_file=0x%p status=%u",
+ 			__entry->xid, __entry->hash, __entry->inode,
+ 			show_nf_may(__entry->may_flags), __entry->nf_ref,
+ 			show_nf_flags(__entry->nf_flags),
+ 			show_nf_may(__entry->nf_may), __entry->nf_file,
+ 			__entry->status)
+ );
+ 
+ DECLARE_EVENT_CLASS(nfsd_file_search_class,
+ 	TP_PROTO(struct inode *inode, unsigned int hash, int found),
+ 	TP_ARGS(inode, hash, found),
+ 	TP_STRUCT__entry(
+ 		__field(struct inode *, inode)
+ 		__field(unsigned int, hash)
+ 		__field(int, found)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->inode = inode;
+ 		__entry->hash = hash;
+ 		__entry->found = found;
+ 	),
+ 	TP_printk("hash=0x%x inode=0x%p found=%d", __entry->hash,
+ 			__entry->inode, __entry->found)
+ );
+ 
+ #define DEFINE_NFSD_FILE_SEARCH_EVENT(name)				\
+ DEFINE_EVENT(nfsd_file_search_class, name,				\
+ 	TP_PROTO(struct inode *inode, unsigned int hash, int found),	\
+ 	TP_ARGS(inode, hash, found))
+ 
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_close_inode_sync);
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_close_inode);
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_is_cached);
+ 
+ TRACE_EVENT(nfsd_file_fsnotify_handle_event,
+ 	TP_PROTO(struct inode *inode, u32 mask),
+ 	TP_ARGS(inode, mask),
+ 	TP_STRUCT__entry(
+ 		__field(struct inode *, inode)
+ 		__field(unsigned int, nlink)
+ 		__field(umode_t, mode)
+ 		__field(u32, mask)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->inode = inode;
+ 		__entry->nlink = inode->i_nlink;
+ 		__entry->mode = inode->i_mode;
+ 		__entry->mask = mask;
+ 	),
+ 	TP_printk("inode=0x%p nlink=%u mode=0%ho mask=0x%x", __entry->inode,
+ 			__entry->nlink, __entry->mode, __entry->mask)
+ );
+ 
+ #include "cache.h"
+ 
+ TRACE_DEFINE_ENUM(RC_DROPIT);
+ TRACE_DEFINE_ENUM(RC_REPLY);
+ TRACE_DEFINE_ENUM(RC_DOIT);
+ 
+ #define show_drc_retval(x)						\
+ 	__print_symbolic(x,						\
+ 		{ RC_DROPIT, "DROPIT" },				\
+ 		{ RC_REPLY, "REPLY" },					\
+ 		{ RC_DOIT, "DOIT" })
+ 
+ TRACE_EVENT(nfsd_drc_found,
+ 	TP_PROTO(
+ 		const struct nfsd_net *nn,
+ 		const struct svc_rqst *rqstp,
+ 		int result
+ 	),
+ 	TP_ARGS(nn, rqstp, result),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(unsigned long, result)
+ 		__field(u32, xid)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->result = result;
+ 		__entry->xid = be32_to_cpu(rqstp->rq_xid);
+ 	),
+ 	TP_printk("boot_time=%16llx xid=0x%08x result=%s",
+ 		__entry->boot_time, __entry->xid,
+ 		show_drc_retval(__entry->result))
+ 
+ );
+ 
+ TRACE_EVENT(nfsd_drc_mismatch,
+ 	TP_PROTO(
+ 		const struct nfsd_net *nn,
+ 		const struct svc_cacherep *key,
+ 		const struct svc_cacherep *rp
+ 	),
+ 	TP_ARGS(nn, key, rp),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(u32, xid)
+ 		__field(u32, cached)
+ 		__field(u32, ingress)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->xid = be32_to_cpu(key->c_key.k_xid);
+ 		__entry->cached = (__force u32)key->c_key.k_csum;
+ 		__entry->ingress = (__force u32)rp->c_key.k_csum;
+ 	),
+ 	TP_printk("boot_time=%16llx xid=0x%08x cached-csum=0x%08x ingress-csum=0x%08x",
+ 		__entry->boot_time, __entry->xid, __entry->cached,
+ 		__entry->ingress)
+ );
+ 
++>>>>>>> 0b175b18648e (NFSD: Add tracepoints to NFSD's duplicate reply cache)
  #endif /* _NFSD_TRACE_H */
  
  #undef TRACE_INCLUDE_PATH
diff --git a/fs/nfsd/nfscache.c b/fs/nfsd/nfscache.c
index f3595fcead23..4dce802cb1ec 100644
--- a/fs/nfsd/nfscache.c
+++ b/fs/nfsd/nfscache.c
@@ -20,8 +20,7 @@
 
 #include "nfsd.h"
 #include "cache.h"
-
-#define NFSDDBG_FACILITY	NFSDDBG_REPCACHE
+#include "trace.h"
 
 /*
  * We use this value to determine the number of hash buckets from the max
@@ -328,8 +327,10 @@ nfsd_cache_key_cmp(const struct svc_cacherep *key,
 			const struct svc_cacherep *rp, struct nfsd_net *nn)
 {
 	if (key->c_key.k_xid == rp->c_key.k_xid &&
-	    key->c_key.k_csum != rp->c_key.k_csum)
+	    key->c_key.k_csum != rp->c_key.k_csum) {
 		++nn->payload_misses;
+		trace_nfsd_drc_mismatch(nn, key, rp);
+	}
 
 	return memcmp(&key->c_key, &rp->c_key, sizeof(key->c_key));
 }
@@ -382,15 +383,22 @@ nfsd_cache_insert(struct nfsd_drc_bucket *b, struct svc_cacherep *key,
 	return ret;
 }
 
-/*
+/**
+ * nfsd_cache_lookup - Find an entry in the duplicate reply cache
+ * @rqstp: Incoming Call to find
+ *
  * Try to find an entry matching the current call in the cache. When none
  * is found, we try to grab the oldest expired entry off the LRU list. If
  * a suitable one isn't there, then drop the cache_lock and allocate a
  * new one, then search again in case one got inserted while this thread
  * didn't hold the lock.
+ *
+ * Return values:
+ *   %RC_DOIT: Process the request normally
+ *   %RC_REPLY: Reply from cache
+ *   %RC_DROPIT: Do not process the request further
  */
-int
-nfsd_cache_lookup(struct svc_rqst *rqstp)
+int nfsd_cache_lookup(struct svc_rqst *rqstp)
 {
 	struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
 	struct svc_cacherep	*rp, *found;
@@ -404,7 +412,7 @@ nfsd_cache_lookup(struct svc_rqst *rqstp)
 	rqstp->rq_cacherep = NULL;
 	if (type == RC_NOCACHE) {
 		nfsdstats.rcnocache++;
-		return rtn;
+		goto out;
 	}
 
 	csum = nfsd_cache_csum(rqstp);
@@ -414,10 +422,8 @@ nfsd_cache_lookup(struct svc_rqst *rqstp)
 	 * preallocate an entry.
 	 */
 	rp = nfsd_reply_cache_alloc(rqstp, csum, nn);
-	if (!rp) {
-		dprintk("nfsd: unable to allocate DRC entry!\n");
-		return rtn;
-	}
+	if (!rp)
+		goto out;
 
 	spin_lock(&b->cache_lock);
 	found = nfsd_cache_insert(b, rp, nn);
@@ -436,8 +442,10 @@ nfsd_cache_lookup(struct svc_rqst *rqstp)
 
 	/* go ahead and prune the cache */
 	prune_bucket(b, nn);
- out:
+
+out_unlock:
 	spin_unlock(&b->cache_lock);
+out:
 	return rtn;
 
 found_entry:
@@ -447,13 +455,13 @@ nfsd_cache_lookup(struct svc_rqst *rqstp)
 
 	/* Request being processed */
 	if (rp->c_state == RC_INPROG)
-		goto out;
+		goto out_trace;
 
 	/* From the hall of fame of impractical attacks:
 	 * Is this a user who tries to snoop on the cache? */
 	rtn = RC_DOIT;
 	if (!test_bit(RQ_SECURE, &rqstp->rq_flags) && rp->c_secure)
-		goto out;
+		goto out_trace;
 
 	/* Compose RPC reply header */
 	switch (rp->c_type) {
@@ -465,7 +473,7 @@ nfsd_cache_lookup(struct svc_rqst *rqstp)
 		break;
 	case RC_REPLBUFF:
 		if (!nfsd_cache_append(rqstp, &rp->c_replvec))
-			goto out;	/* should not happen */
+			goto out_unlock; /* should not happen */
 		rtn = RC_REPLY;
 		break;
 	default:
@@ -473,13 +481,19 @@ nfsd_cache_lookup(struct svc_rqst *rqstp)
 		nfsd_reply_cache_free_locked(b, rp, nn);
 	}
 
-	goto out;
+out_trace:
+	trace_nfsd_drc_found(nn, rqstp, rtn);
+	goto out_unlock;
 }
 
-/*
- * Update a cache entry. This is called from nfsd_dispatch when
- * the procedure has been executed and the complete reply is in
- * rqstp->rq_res.
+/**
+ * nfsd_cache_update - Update an entry in the duplicate reply cache.
+ * @rqstp: svc_rqst with a finished Reply
+ * @cachetype: which cache to update
+ * @statp: Reply's status code
+ *
+ * This is called from nfsd_dispatch when the procedure has been
+ * executed and the complete reply is in rqstp->rq_res.
  *
  * We're copying around data here rather than swapping buffers because
  * the toplevel loop requires max-sized buffers, which would be a waste
@@ -492,8 +506,7 @@ nfsd_cache_lookup(struct svc_rqst *rqstp)
  * nfsd failed to encode a reply that otherwise would have been cached.
  * In this case, nfsd_cache_update is called with statp == NULL.
  */
-void
-nfsd_cache_update(struct svc_rqst *rqstp, int cachetype, __be32 *statp)
+void nfsd_cache_update(struct svc_rqst *rqstp, int cachetype, __be32 *statp)
 {
 	struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
 	struct svc_cacherep *rp = rqstp->rq_cacherep;
* Unmerged path fs/nfsd/trace.h
