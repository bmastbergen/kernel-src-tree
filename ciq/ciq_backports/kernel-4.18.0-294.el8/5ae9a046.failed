iommu/amd: Add sanity check for interrupt remapping table length macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
commit 5ae9a046a452d60b6a6c076f6df7e3f8e34f918f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5ae9a046.failed

Currently, macros related to the interrupt remapping table length are
defined separately. This has resulted in an oversight in which one of
the macros were missed when changing the length. To prevent this,
redefine the macros to add built-in sanity check.

Also, rename macros to use the name of the DTE[IntTabLen] field as
specified in the AMD IOMMU specification. There is no functional change.

	Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
	Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
	Cc: Will Deacon <will@kernel.org>
	Cc: Jerry Snitselaar <jsnitsel@redhat.com>
	Cc: Joerg Roedel <joro@8bytes.org>
	Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
Link: https://lore.kernel.org/r/20201210162436.126321-1-suravee.suthikulpanit@amd.com
	Signed-off-by: Will Deacon <will@kernel.org>
(cherry picked from commit 5ae9a046a452d60b6a6c076f6df7e3f8e34f918f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu_types.h
diff --cc drivers/iommu/amd_iommu_types.h
index 20466c667c8a,899ce62df3f0..000000000000
--- a/drivers/iommu/amd_iommu_types.h
+++ b/drivers/iommu/amd_iommu_types.h
@@@ -264,11 -255,19 +264,23 @@@
  /* Bit value definition for dte irq remapping fields*/
  #define DTE_IRQ_PHYS_ADDR_MASK	(((1ULL << 45)-1) << 6)
  #define DTE_IRQ_REMAP_INTCTL_MASK	(0x3ULL << 60)
- #define DTE_IRQ_TABLE_LEN_MASK	(0xfULL << 1)
  #define DTE_IRQ_REMAP_INTCTL    (2ULL << 60)
++<<<<<<< HEAD:drivers/iommu/amd_iommu_types.h
 +#define DTE_IRQ_TABLE_LEN       (8ULL << 1)
++=======
++>>>>>>> 5ae9a046a452 (iommu/amd: Add sanity check for interrupt remapping table length macros):drivers/iommu/amd/amd_iommu_types.h
  #define DTE_IRQ_REMAP_ENABLE    1ULL
  
+ /*
+  * AMD IOMMU hardware only support 512 IRTEs despite
+  * the architectural limitation of 2048 entries.
+  */
+ #define DTE_INTTAB_ALIGNMENT    128
+ #define DTE_INTTABLEN_VALUE     9ULL
+ #define DTE_INTTABLEN           (DTE_INTTABLEN_VALUE << 1)
+ #define DTE_INTTABLEN_MASK      (0xfULL << 1)
+ #define MAX_IRQS_PER_TABLE      (1 << DTE_INTTABLEN_VALUE)
+ 
  #define PAGE_MODE_NONE    0x00
  #define PAGE_MODE_1_LEVEL 0x01
  #define PAGE_MODE_2_LEVEL 0x02
diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c
index 4d7a4e546c51..c7743d6b9871 100644
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@ -3124,7 +3124,7 @@ static void set_dte_irq_entry(u16 devid, struct irq_remap_table *table)
 	dte	&= ~DTE_IRQ_PHYS_ADDR_MASK;
 	dte	|= iommu_virt_to_phys(table->table);
 	dte	|= DTE_IRQ_REMAP_INTCTL;
-	dte	|= DTE_IRQ_TABLE_LEN;
+	dte	|= DTE_INTTABLEN;
 	dte	|= DTE_IRQ_REMAP_ENABLE;
 
 	amd_iommu_dev_table[devid].data[2] = dte;
diff --git a/drivers/iommu/amd_iommu_init.c b/drivers/iommu/amd_iommu_init.c
index d0003bb219f9..431c7fd1d023 100644
--- a/drivers/iommu/amd_iommu_init.c
+++ b/drivers/iommu/amd_iommu_init.c
@@ -950,10 +950,10 @@ static bool copy_device_table(void)
 
 		irq_v = old_devtb[devid].data[2] & DTE_IRQ_REMAP_ENABLE;
 		int_ctl = old_devtb[devid].data[2] & DTE_IRQ_REMAP_INTCTL_MASK;
-		int_tab_len = old_devtb[devid].data[2] & DTE_IRQ_TABLE_LEN_MASK;
+		int_tab_len = old_devtb[devid].data[2] & DTE_INTTABLEN_MASK;
 		if (irq_v && (int_ctl || int_tab_len)) {
 			if ((int_ctl != DTE_IRQ_REMAP_INTCTL) ||
-			    (int_tab_len != DTE_IRQ_TABLE_LEN)) {
+			    (int_tab_len != DTE_INTTABLEN)) {
 				pr_err("Wrong old irq remapping flag: %#x\n", devid);
 				return false;
 			}
@@ -2610,7 +2610,7 @@ static int __init early_amd_iommu_init(void)
 			remap_cache_sz = MAX_IRQS_PER_TABLE * (sizeof(u64) * 2);
 		amd_iommu_irq_cache = kmem_cache_create("irq_remap_cache",
 							remap_cache_sz,
-							IRQ_TABLE_ALIGNMENT,
+							DTE_INTTAB_ALIGNMENT,
 							0, NULL);
 		if (!amd_iommu_irq_cache)
 			goto out;
* Unmerged path drivers/iommu/amd_iommu_types.h
