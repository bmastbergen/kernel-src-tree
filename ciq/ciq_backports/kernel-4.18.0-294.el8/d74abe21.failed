Bluetooth: btusb: Add support to read Intel debug feature

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Chethan T N <chethan.tumkur.narayan@intel.com>
commit d74abe2138b39ae34c274f5ba5dec47408036c0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d74abe21.failed

The command shall read the Intel controller supported
debug feature. Based on the supported features additional debug
configuration shall be enabled.

	Signed-off-by: Chethan T N <chethan.tumkur.narayan@intel.com>
	Signed-off-by: Ps AyappadasX <AyappadasX.Ps@intel.com>
	Signed-off-by: Kiran K <kiran.k@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit d74abe2138b39ae34c274f5ba5dec47408036c0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btusb.c
diff --cc drivers/bluetooth/btusb.c
index 597b1987a454,e12d88e19098..000000000000
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@@ -2467,6 -2543,28 +2468,31 @@@ done
  	 */
  	btintel_load_ddc_config(hdev, fwname);
  
++<<<<<<< HEAD
++=======
+ 	/* Read the Intel supported features and if new exception formats
+ 	 * supported, need to load the additional DDC config to enable.
+ 	 */
+ 	btintel_read_debug_features(hdev, &features);
+ 
+ 	/* Read the Intel version information after loading the FW  */
+ 	err = btintel_read_version(hdev, &ver);
+ 	if (err)
+ 		return err;
+ 
+ 	btintel_version_info(hdev, &ver);
+ 
+ finish:
+ 	/* All Intel controllers that support the Microsoft vendor
+ 	 * extension are using 0xFC1E for VsMsftOpCode.
+ 	 */
+ 	switch (ver.hw_variant) {
+ 	case 0x12:	/* ThP */
+ 		hci_set_msft_opcode(hdev, 0xFC1E);
+ 		break;
+ 	}
+ 
++>>>>>>> d74abe2138b3 (Bluetooth: btusb: Add support to read Intel debug feature)
  	/* Set the event mask for Intel specific vendor events. This enables
  	 * a few extra events that are useful during general operation. It
  	 * does not enable any debugging related events.
diff --git a/drivers/bluetooth/btintel.c b/drivers/bluetooth/btintel.c
index e866dcb89de6..217ceec567d4 100644
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@ -769,6 +769,38 @@ void btintel_reset_to_bootloader(struct hci_dev *hdev)
 }
 EXPORT_SYMBOL_GPL(btintel_reset_to_bootloader);
 
+int btintel_read_debug_features(struct hci_dev *hdev,
+				struct intel_debug_features *features)
+{
+	struct sk_buff *skb;
+	u8 page_no = 1;
+
+	/* Intel controller supports two pages, each page is of 128-bit
+	 * feature bit mask. And each bit defines specific feature support
+	 */
+	skb = __hci_cmd_sync(hdev, 0xfca6, sizeof(page_no), &page_no,
+			     HCI_INIT_TIMEOUT);
+	if (IS_ERR(skb)) {
+		bt_dev_err(hdev, "Reading supported features failed (%ld)",
+			   PTR_ERR(skb));
+		return PTR_ERR(skb);
+	}
+
+	if (skb->len != (sizeof(features->page1) + 3)) {
+		bt_dev_err(hdev, "Supported features event size mismatch");
+		kfree_skb(skb);
+		return -EILSEQ;
+	}
+
+	memcpy(features->page1, skb->data + 3, sizeof(features->page1));
+
+	/* Read the supported features page2 if required in future.
+	 */
+	kfree_skb(skb);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(btintel_read_debug_features);
+
 MODULE_AUTHOR("Marcel Holtmann <marcel@holtmann.org>");
 MODULE_DESCRIPTION("Bluetooth support for Intel devices ver " VERSION);
 MODULE_VERSION(VERSION);
diff --git a/drivers/bluetooth/btintel.h b/drivers/bluetooth/btintel.h
index 4265441bf728..7cbb147eed0c 100644
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@ -77,6 +77,10 @@ struct intel_reset {
 	__le32   boot_param;
 } __packed;
 
+struct intel_debug_features {
+	__u8    page1[16];
+} __packed;
+
 #if IS_ENABLED(CONFIG_BT_INTEL)
 
 int btintel_check_bdaddr(struct hci_dev *hdev);
@@ -103,6 +107,10 @@ int btintel_read_boot_params(struct hci_dev *hdev,
 int btintel_download_firmware(struct hci_dev *dev, const struct firmware *fw,
 			      u32 *boot_param);
 void btintel_reset_to_bootloader(struct hci_dev *hdev);
+
+int btintel_read_debug_features(struct hci_dev *hdev,
+				struct intel_debug_features *features);
+
 #else
 
 static inline int btintel_check_bdaddr(struct hci_dev *hdev)
@@ -201,4 +209,11 @@ static inline int btintel_download_firmware(struct hci_dev *dev,
 static inline void btintel_reset_to_bootloader(struct hci_dev *hdev)
 {
 }
+
+static inline int btintel_read_debug_features(struct hci_dev *hdev,
+					      struct intel_debug_features *features)
+{
+	return -EOPNOTSUPP;
+}
+
 #endif
* Unmerged path drivers/bluetooth/btusb.c
