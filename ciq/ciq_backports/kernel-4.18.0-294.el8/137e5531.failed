vfio/pci: Add sriov_configure support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [vfio] pci: Add sriov_configure support (Clark Williams) [1860192]
Rebuild_FUZZ: 92.75%
commit-author Alex Williamson <alex.williamson@redhat.com>
commit 137e5531351db258eff58ea28f4dc8fdf7ca2990
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/137e5531.failed

With the VF Token interface we can now expect that a vfio userspace
driver must be in collaboration with the PF driver, an unwitting
userspace driver will not be able to get past the GET_DEVICE_FD step
in accessing the device.  We can now move on to actually allowing
SR-IOV to be enabled by vfio-pci on the PF.  Support for this is not
enabled by default in this commit, but it does provide a module option
for this to be enabled (enable_sriov=1).  Enabling VFs is rather
straightforward, except we don't want to risk that a VF might get
autoprobed and bound to other drivers, so a bus notifier is used to
"capture" VFs to vfio-pci using the driver_override support.  We
assume any later action to bind the device to other drivers is
condoned by the system admin and allow it with a log warning.

vfio-pci will disable SR-IOV on a PF before releasing the device,
allowing a VF driver to be assured other drivers cannot take over the
PF and that any other userspace driver must know the shared VF token.
This support also does not provide a mechanism for the PF userspace
driver itself to manipulate SR-IOV through the vfio API.  With this
patch SR-IOV can only be enabled via the host sysfs interface and the
PF driver user cannot create or remove VFs.

	Reviewed-by: Cornelia Huck <cohuck@redhat.com>
	Reviewed-by: Kevin Tian <kevin.tian@intel.com>
	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit 137e5531351db258eff58ea28f4dc8fdf7ca2990)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/pci/vfio_pci.c
#	drivers/vfio/pci/vfio_pci_private.h
diff --cc drivers/vfio/pci/vfio_pci.c
index 5f0a4af4b896,df6bae75c8dd..000000000000
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@@ -1702,6 -1625,31 +1737,34 @@@ static int vfio_pci_probe(struct pci_de
  		return ret;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (pdev->is_physfn) {
+ 		vdev->vf_token = kzalloc(sizeof(*vdev->vf_token), GFP_KERNEL);
+ 		if (!vdev->vf_token) {
+ 			vfio_pci_reflck_put(vdev->reflck);
+ 			vfio_del_group_dev(&pdev->dev);
+ 			vfio_iommu_group_put(group, &pdev->dev);
+ 			kfree(vdev);
+ 			return -ENOMEM;
+ 		}
+ 
+ 		vdev->nb.notifier_call = vfio_pci_bus_notifier;
+ 		ret = bus_register_notifier(&pci_bus_type, &vdev->nb);
+ 		if (ret) {
+ 			kfree(vdev->vf_token);
+ 			vfio_pci_reflck_put(vdev->reflck);
+ 			vfio_del_group_dev(&pdev->dev);
+ 			vfio_iommu_group_put(group, &pdev->dev);
+ 			kfree(vdev);
+ 			return ret;
+ 		}
+ 
+ 		mutex_init(&vdev->vf_token->lock);
+ 		uuid_gen(&vdev->vf_token->uuid);
+ 	}
+ 
++>>>>>>> 137e5531351d (vfio/pci: Add sriov_configure support)
  	if (vfio_pci_is_vga(pdev)) {
  		vga_client_register(pdev, vdev, NULL, vfio_pci_set_vga_decode);
  		vga_set_legacy_decoding(pdev,
@@@ -1735,6 -1685,15 +1800,18 @@@ static void vfio_pci_remove(struct pci_
  	if (!vdev)
  		return;
  
++<<<<<<< HEAD
++=======
+ 	if (vdev->vf_token) {
+ 		WARN_ON(vdev->vf_token->users);
+ 		mutex_destroy(&vdev->vf_token->lock);
+ 		kfree(vdev->vf_token);
+ 	}
+ 
+ 	if (vdev->nb.notifier_call)
+ 		bus_unregister_notifier(&pci_bus_type, &vdev->nb);
+ 
++>>>>>>> 137e5531351d (vfio/pci: Add sriov_configure support)
  	vfio_pci_reflck_put(vdev->reflck);
  
  	vfio_iommu_group_put(pdev->dev.iommu_group, &pdev->dev);
diff --cc drivers/vfio/pci/vfio_pci_private.h
index 65576c007e16,36ec69081ecd..000000000000
--- a/drivers/vfio/pci/vfio_pci_private.h
+++ b/drivers/vfio/pci/vfio_pci_private.h
@@@ -15,6 -12,8 +15,11 @@@
  #include <linux/pci.h>
  #include <linux/irqbypass.h>
  #include <linux/types.h>
++<<<<<<< HEAD
++=======
+ #include <linux/uuid.h>
+ #include <linux/notifier.h>
++>>>>>>> 137e5531351d (vfio/pci: Add sriov_configure support)
  
  #ifndef VFIO_PCI_PRIVATE_H
  #define VFIO_PCI_PRIVATE_H
@@@ -130,9 -130,8 +135,14 @@@ struct vfio_pci_device 
  	struct list_head	dummy_resources_list;
  	struct mutex		ioeventfds_lock;
  	struct list_head	ioeventfds_list;
++<<<<<<< HEAD
 +	struct mutex		vma_lock;
 +	struct list_head	vma_list;
 +	struct rw_semaphore	memory_lock;
++=======
+ 	struct vfio_pci_vf_token	*vf_token;
+ 	struct notifier_block	nb;
++>>>>>>> 137e5531351d (vfio/pci: Add sriov_configure support)
  };
  
  #define is_intx(vdev) (vdev->irq_type == VFIO_PCI_INTX_IRQ_INDEX)
* Unmerged path drivers/vfio/pci/vfio_pci.c
* Unmerged path drivers/vfio/pci/vfio_pci_private.h
