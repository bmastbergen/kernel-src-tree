tcp: fix TCP_REPAIR xmit queue setup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 79861919b8896e14b8e5707242721f2312c57ae4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/79861919.failed

Andrey reported the following warning triggered while running CRIU tests:

tcp_clean_rtx_queue()
...
	last_ackt = tcp_skb_timestamp_us(skb);
	WARN_ON_ONCE(last_ackt == 0);

This is caused by 5f6188a8003d ("tcp: do not change tcp_wstamp_ns
in tcp_mstamp_refresh"), as we end up having skbs in retransmit queue
with a zero skb->skb_mstamp_ns field.

We could fix this bug in different ways, like making sure
tp->tcp_wstamp_ns is not zero at socket creation, but as Neal pointed
out, we also do not want that pacing status of a repaired socket
could push tp->tcp_wstamp_ns far ahead in the future.

So we prefer changing tcp_write_xmit() to not call tcp_update_skb_after_send()
and instead do what is requested by TCP_REPAIR logic.

Fixes: 5f6188a8003d ("tcp: do not change tcp_wstamp_ns in tcp_mstamp_refresh")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Andrey Vagin <avagin@openvz.org>
	Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
	Acked-by: Neal Cardwell <ncardwell@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 79861919b8896e14b8e5707242721f2312c57ae4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_output.c
diff --cc net/ipv4/tcp_output.c
index 42d3de51dbfe,c07990a35ff3..000000000000
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@@ -2435,12 -2334,6 +2442,15 @@@ static bool tcp_write_xmit(struct sock 
  		tso_segs = tcp_init_tso_segs(skb, mss_now);
  		BUG_ON(!tso_segs);
  
++<<<<<<< HEAD
 +		if (unlikely(tp->repair) && tp->repair_queue == TCP_SEND_QUEUE) {
 +			/* "skb_mstamp" is used as a start point for the retransmit timer */
 +			tcp_update_skb_after_send(tp, skb);
 +			goto repair; /* Skip network transmission */
 +		}
 +
++=======
++>>>>>>> 79861919b889 (tcp: fix TCP_REPAIR xmit queue setup)
  		cwnd_quota = tcp_cwnd_test(tp, skb);
  		if (!cwnd_quota) {
  			if (push_one == 2)
* Unmerged path net/ipv4/tcp_output.c
