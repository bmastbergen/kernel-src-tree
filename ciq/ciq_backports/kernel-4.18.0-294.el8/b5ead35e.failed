mm: vmscan: naming fixes: global_reclaim() and sane_reclaim()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Johannes Weiner <hannes@cmpxchg.org>
commit b5ead35e7e1d3434ce436dfcb2af32820ce54589
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b5ead35e.failed

Seven years after introducing the global_reclaim() function, I still have
to double take when reading a callsite.  I don't know how others do it,
this is a terrible name.

Invert the meaning and rename it to cgroup_reclaim().

[ After all, "global reclaim" is just regular reclaim invoked from the
  page allocator. It's reclaim on behalf of a cgroup limit that is a
  special case of reclaim, and should be explicit - not the reverse. ]

sane_reclaim() isn't very descriptive either: it tests whether we can use
the regular writeback throttling - available during regular page reclaim
or cgroup2 limit reclaim - or need to use the broken
wait_on_page_writeback() method.  Use "writeback_throttling_sane()".

Link: http://lkml.kernel.org/r/20191022144803.302233-5-hannes@cmpxchg.org
	Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
	Reviewed-by: Roman Gushchin <guro@fb.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit b5ead35e7e1d3434ce436dfcb2af32820ce54589)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmscan.c
diff --cc mm/vmscan.c
index fdc405f00cf6,9281f40eeb45..000000000000
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@@ -227,21 -238,10 +227,25 @@@ static void unregister_memcg_shrinker(s
  	idr_remove(&shrinker_idr, id);
  	up_write(&shrinker_rwsem);
  }
 +#else /* CONFIG_MEMCG_KMEM */
 +static int prealloc_memcg_shrinker(struct shrinker *shrinker)
 +{
 +	return 0;
 +}
 +
++<<<<<<< HEAD
 +static void unregister_memcg_shrinker(struct shrinker *shrinker)
 +{
 +}
 +#endif /* CONFIG_MEMCG_KMEM */
  
 +#ifdef CONFIG_MEMCG
 +static bool global_reclaim(struct scan_control *sc)
++=======
+ static bool cgroup_reclaim(struct scan_control *sc)
++>>>>>>> b5ead35e7e1d (mm: vmscan: naming fixes: global_reclaim() and sane_reclaim())
  {
- 	return !sc->target_mem_cgroup;
+ 	return sc->target_mem_cgroup;
  }
  
  /**
@@@ -293,12 -291,21 +295,25 @@@ static bool memcg_congested(pg_data_t *
  
  }
  #else
++<<<<<<< HEAD
 +static bool global_reclaim(struct scan_control *sc)
++=======
+ static int prealloc_memcg_shrinker(struct shrinker *shrinker)
  {
- 	return true;
+ 	return 0;
+ }
+ 
+ static void unregister_memcg_shrinker(struct shrinker *shrinker)
+ {
+ }
+ 
+ static bool cgroup_reclaim(struct scan_control *sc)
++>>>>>>> b5ead35e7e1d (mm: vmscan: naming fixes: global_reclaim() and sane_reclaim())
+ {
+ 	return false;
  }
  
- static bool sane_reclaim(struct scan_control *sc)
+ static bool writeback_throttling_sane(struct scan_control *sc)
  {
  	return true;
  }
* Unmerged path mm/vmscan.c
