cgroup: Fix sock_cgroup_data on big-endian.

jira LE-1907
cve CVE-2020-14356
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [include] cgroup: Fix sock_cgroup_data on big-endian (Vladis Dronov) [1868659] {CVE-2020-14356}
Rebuild_FUZZ: 98.82%
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit 14b032b8f8fce03a546dcf365454bec8c4a58d7d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/14b032b8.failed

In order for no_refcnt and is_data to be the lowest order two
bits in the 'val' we have to pad out the bitfield of the u8.

Fixes: ad0f75e5f57c ("cgroup: fix cgroup_sk_alloc() for sk_clone_lock()")
	Reported-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 14b032b8f8fce03a546dcf365454bec8c4a58d7d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/cgroup-defs.h
diff --cc include/linux/cgroup-defs.h
index 0110a26434e3,fee0b5547cd0..000000000000
--- a/include/linux/cgroup-defs.h
+++ b/include/linux/cgroup-defs.h
@@@ -823,7 -790,9 +823,13 @@@ struct sock_cgroup_data 
  	union {
  #ifdef __LITTLE_ENDIAN
  		struct {
++<<<<<<< HEAD
 +			u8	is_data;
++=======
+ 			u8	is_data : 1;
+ 			u8	no_refcnt : 1;
+ 			u8	unused : 6;
++>>>>>>> 14b032b8f8fc (cgroup: Fix sock_cgroup_data on big-endian.)
  			u8	padding;
  			u16	prioidx;
  			u32	classid;
@@@ -833,7 -802,9 +839,13 @@@
  			u32	classid;
  			u16	prioidx;
  			u8	padding;
++<<<<<<< HEAD
 +			u8	is_data;
++=======
+ 			u8	unused : 6;
+ 			u8	no_refcnt : 1;
+ 			u8	is_data : 1;
++>>>>>>> 14b032b8f8fc (cgroup: Fix sock_cgroup_data on big-endian.)
  		} __packed;
  #endif
  		u64		val;
* Unmerged path include/linux/cgroup-defs.h
