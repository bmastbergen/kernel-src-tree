mm: vmscan: split shrink_node() into node part and memcgs part

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Johannes Weiner <hannes@cmpxchg.org>
commit 0f6a5cff43d3bcd6aa54c9af267737249d02aa21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0f6a5cff.failed

This function is getting long and unwieldy, split out the memcg bits.

The updated shrink_node() handles the generic (node) reclaim aspects:
  - global vmpressure notifications
  - writeback and congestion throttling
  - reclaim/compaction management
  - kswapd giving up on unreclaimable nodes

It then calls a new shrink_node_memcgs() which handles cgroup specifics:
  - the cgroup tree traversal
  - memory.low considerations
  - per-cgroup slab shrinking callbacks
  - per-cgroup vmpressure notifications

[hannes@cmpxchg.org: rename "root" to "target_memcg", per Roman]
  Link: http://lkml.kernel.org/r/20191025143640.GA386981@cmpxchg.org
Link: http://lkml.kernel.org/r/20191022144803.302233-8-hannes@cmpxchg.org
	Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
	Reviewed-by: Roman Gushchin <guro@fb.com>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 0f6a5cff43d3bcd6aa54c9af267737249d02aa21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmscan.c
diff --cc mm/vmscan.c
index fdc405f00cf6,d35864850b43..000000000000
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@@ -2762,147 -2722,157 +2762,252 @@@ static bool pgdat_memcg_congested(pg_da
  		(memcg && memcg_congested(pgdat, memcg));
  }
  
- static bool shrink_node(pg_data_t *pgdat, struct scan_control *sc)
+ static void shrink_node_memcgs(pg_data_t *pgdat, struct scan_control *sc)
  {
++<<<<<<< HEAD
 +	struct reclaim_state *reclaim_state = current->reclaim_state;
 +	unsigned long nr_reclaimed, nr_scanned;
 +	bool reclaimable = false;
 +
++=======
+ 	struct mem_cgroup *target_memcg = sc->target_mem_cgroup;
+ 	struct mem_cgroup *memcg;
+ 
+ 	memcg = mem_cgroup_iter(target_memcg, NULL, NULL);
++>>>>>>> 0f6a5cff43d3 (mm: vmscan: split shrink_node() into node part and memcgs part)
  	do {
 -		struct lruvec *lruvec = mem_cgroup_lruvec(memcg, pgdat);
 -		unsigned long reclaimed;
 -		unsigned long scanned;
 +		struct mem_cgroup *root = sc->target_mem_cgroup;
 +		struct mem_cgroup *memcg;
 +
++<<<<<<< HEAD
 +		memset(&sc->nr, 0, sizeof(sc->nr));
  
 +		nr_reclaimed = sc->nr_reclaimed;
 +		nr_scanned = sc->nr_scanned;
 +
 +		memcg = mem_cgroup_iter(root, NULL, NULL);
 +		do {
 +			unsigned long reclaimed;
 +			unsigned long scanned;
 +
 +			switch (mem_cgroup_protected(root, memcg)) {
 +			case MEMCG_PROT_MIN:
 +				/*
 +				 * Hard protection.
 +				 * If there is no reclaimable memory, OOM.
 +				 */
++=======
+ 		switch (mem_cgroup_protected(target_memcg, memcg)) {
+ 		case MEMCG_PROT_MIN:
+ 			/*
+ 			 * Hard protection.
+ 			 * If there is no reclaimable memory, OOM.
+ 			 */
+ 			continue;
+ 		case MEMCG_PROT_LOW:
+ 			/*
+ 			 * Soft protection.
+ 			 * Respect the protection only as long as
+ 			 * there is an unprotected supply
+ 			 * of reclaimable memory from other cgroups.
+ 			 */
+ 			if (!sc->memcg_low_reclaim) {
+ 				sc->memcg_low_skipped = 1;
++>>>>>>> 0f6a5cff43d3 (mm: vmscan: split shrink_node() into node part and memcgs part)
  				continue;
 +			case MEMCG_PROT_LOW:
 +				/*
 +				 * Soft protection.
 +				 * Respect the protection only as long as
 +				 * there is an unprotected supply
 +				 * of reclaimable memory from other cgroups.
 +				 */
 +				if (!sc->memcg_low_reclaim) {
 +					sc->memcg_low_skipped = 1;
 +					continue;
 +				}
 +				memcg_memory_event(memcg, MEMCG_LOW);
 +				break;
 +			case MEMCG_PROT_NONE:
 +				/*
 +				 * All protection thresholds breached. We may
 +				 * still choose to vary the scan pressure
 +				 * applied based on by how much the cgroup in
 +				 * question has exceeded its protection
 +				 * thresholds (see get_scan_count).
 +				 */
 +				break;
  			}
 -			memcg_memory_event(memcg, MEMCG_LOW);
 -			break;
 -		case MEMCG_PROT_NONE:
 -			/*
 -			 * All protection thresholds breached. We may
 -			 * still choose to vary the scan pressure
 -			 * applied based on by how much the cgroup in
 -			 * question has exceeded its protection
 -			 * thresholds (see get_scan_count).
 -			 */
 -			break;
 +
 +			reclaimed = sc->nr_reclaimed;
 +			scanned = sc->nr_scanned;
 +			shrink_node_memcg(pgdat, memcg, sc);
 +
 +			shrink_slab(sc->gfp_mask, pgdat->node_id, memcg,
 +					sc->priority);
 +
 +			/* Record the group's reclaim efficiency */
 +			vmpressure(sc->gfp_mask, memcg, false,
 +				   sc->nr_scanned - scanned,
 +				   sc->nr_reclaimed - reclaimed);
 +
 +		} while ((memcg = mem_cgroup_iter(root, memcg, NULL)));
 +
 +		if (reclaim_state) {
 +			sc->nr_reclaimed += reclaim_state->reclaimed_slab;
 +			reclaim_state->reclaimed_slab = 0;
  		}
  
 -		reclaimed = sc->nr_reclaimed;
 -		scanned = sc->nr_scanned;
 +		/* Record the subtree's reclaim efficiency */
 +		vmpressure(sc->gfp_mask, sc->target_mem_cgroup, true,
 +			   sc->nr_scanned - nr_scanned,
 +			   sc->nr_reclaimed - nr_reclaimed);
  
 -		shrink_lruvec(lruvec, sc);
 +		if (sc->nr_reclaimed - nr_reclaimed)
 +			reclaimable = true;
  
 -		shrink_slab(sc->gfp_mask, pgdat->node_id, memcg,
 -			    sc->priority);
 +		if (current_is_kswapd()) {
 +			/*
 +			 * If reclaim is isolating dirty pages under writeback,
 +			 * it implies that the long-lived page allocation rate
 +			 * is exceeding the page laundering rate. Either the
 +			 * global limits are not being effective at throttling
 +			 * processes due to the page distribution throughout
 +			 * zones or there is heavy usage of a slow backing
 +			 * device. The only option is to throttle from reclaim
 +			 * context which is not ideal as there is no guarantee
 +			 * the dirtying process is throttled in the same way
 +			 * balance_dirty_pages() manages.
 +			 *
 +			 * Once a node is flagged PGDAT_WRITEBACK, kswapd will
 +			 * count the number of pages under pages flagged for
 +			 * immediate reclaim and stall if any are encountered
 +			 * in the nr_immediate check below.
 +			 */
 +			if (sc->nr.writeback && sc->nr.writeback == sc->nr.taken)
 +				set_bit(PGDAT_WRITEBACK, &pgdat->flags);
 +
 +			/*
 +			 * Tag a node as congested if all the dirty pages
 +			 * scanned were backed by a congested BDI and
 +			 * wait_iff_congested will stall.
 +			 */
 +			if (sc->nr.dirty && sc->nr.dirty == sc->nr.congested)
 +				set_bit(PGDAT_CONGESTED, &pgdat->flags);
  
 -		/* Record the group's reclaim efficiency */
 -		vmpressure(sc->gfp_mask, memcg, false,
 -			   sc->nr_scanned - scanned,
 -			   sc->nr_reclaimed - reclaimed);
++<<<<<<< HEAD
 +			/* Allow kswapd to start writing pages during reclaim.*/
 +			if (sc->nr.unqueued_dirty == sc->nr.file_taken)
 +				set_bit(PGDAT_DIRTY, &pgdat->flags);
  
 +			/*
 +			 * If kswapd scans pages marked marked for immediate
 +			 * reclaim and under writeback (nr_immediate), it
 +			 * implies that pages are cycling through the LRU
 +			 * faster than they are written so also forcibly stall.
 +			 */
 +			if (sc->nr.immediate)
 +				congestion_wait(BLK_RW_ASYNC, HZ/10);
 +		}
++=======
+ 	} while ((memcg = mem_cgroup_iter(target_memcg, memcg, NULL)));
+ }
+ 
+ static bool shrink_node(pg_data_t *pgdat, struct scan_control *sc)
+ {
+ 	struct reclaim_state *reclaim_state = current->reclaim_state;
+ 	struct mem_cgroup *target_memcg = sc->target_mem_cgroup;
+ 	unsigned long nr_reclaimed, nr_scanned;
+ 	bool reclaimable = false;
+ 
+ again:
+ 	memset(&sc->nr, 0, sizeof(sc->nr));
+ 
+ 	nr_reclaimed = sc->nr_reclaimed;
+ 	nr_scanned = sc->nr_scanned;
+ 
+ 	shrink_node_memcgs(pgdat, sc);
+ 
+ 	if (reclaim_state) {
+ 		sc->nr_reclaimed += reclaim_state->reclaimed_slab;
+ 		reclaim_state->reclaimed_slab = 0;
+ 	}
+ 
+ 	/* Record the subtree's reclaim efficiency */
+ 	vmpressure(sc->gfp_mask, target_memcg, true,
+ 		   sc->nr_scanned - nr_scanned,
+ 		   sc->nr_reclaimed - nr_reclaimed);
+ 
+ 	if (sc->nr_reclaimed - nr_reclaimed)
+ 		reclaimable = true;
+ 
+ 	if (current_is_kswapd()) {
+ 		/*
+ 		 * If reclaim is isolating dirty pages under writeback,
+ 		 * it implies that the long-lived page allocation rate
+ 		 * is exceeding the page laundering rate. Either the
+ 		 * global limits are not being effective at throttling
+ 		 * processes due to the page distribution throughout
+ 		 * zones or there is heavy usage of a slow backing
+ 		 * device. The only option is to throttle from reclaim
+ 		 * context which is not ideal as there is no guarantee
+ 		 * the dirtying process is throttled in the same way
+ 		 * balance_dirty_pages() manages.
+ 		 *
+ 		 * Once a node is flagged PGDAT_WRITEBACK, kswapd will
+ 		 * count the number of pages under pages flagged for
+ 		 * immediate reclaim and stall if any are encountered
+ 		 * in the nr_immediate check below.
+ 		 */
+ 		if (sc->nr.writeback && sc->nr.writeback == sc->nr.taken)
+ 			set_bit(PGDAT_WRITEBACK, &pgdat->flags);
++>>>>>>> 0f6a5cff43d3 (mm: vmscan: split shrink_node() into node part and memcgs part)
  
  		/*
 -		 * Tag a node as congested if all the dirty pages
 -		 * scanned were backed by a congested BDI and
 -		 * wait_iff_congested will stall.
 +		 * Legacy memcg will stall in page writeback so avoid forcibly
 +		 * stalling in wait_iff_congested().
  		 */
 -		if (sc->nr.dirty && sc->nr.dirty == sc->nr.congested)
 -			set_bit(PGDAT_CONGESTED, &pgdat->flags);
 -
 -		/* Allow kswapd to start writing pages during reclaim.*/
 -		if (sc->nr.unqueued_dirty == sc->nr.file_taken)
 -			set_bit(PGDAT_DIRTY, &pgdat->flags);
 +		if (!global_reclaim(sc) && sane_reclaim(sc) &&
 +		    sc->nr.dirty && sc->nr.dirty == sc->nr.congested)
 +			set_memcg_congestion(pgdat, root, true);
  
  		/*
 -		 * If kswapd scans pages marked marked for immediate
 -		 * reclaim and under writeback (nr_immediate), it
 -		 * implies that pages are cycling through the LRU
 -		 * faster than they are written so also forcibly stall.
 +		 * Stall direct reclaim for IO completions if underlying BDIs
 +		 * and node is congested. Allow kswapd to continue until it
 +		 * starts encountering unqueued dirty pages or cycling through
 +		 * the LRU too quickly.
  		 */
 -		if (sc->nr.immediate)
 -			congestion_wait(BLK_RW_ASYNC, HZ/10);
 -	}
 -
 +		if (!sc->hibernation_mode && !current_is_kswapd() &&
 +		   current_may_throttle() && pgdat_memcg_congested(pgdat, root))
 +			wait_iff_congested(BLK_RW_ASYNC, HZ/10);
 +
++<<<<<<< HEAD
 +	} while (should_continue_reclaim(pgdat, sc->nr_reclaimed - nr_reclaimed,
 +					 sc));
++=======
+ 	/*
+ 	 * Legacy memcg will stall in page writeback so avoid forcibly
+ 	 * stalling in wait_iff_congested().
+ 	 */
+ 	if (cgroup_reclaim(sc) && writeback_throttling_sane(sc) &&
+ 	    sc->nr.dirty && sc->nr.dirty == sc->nr.congested)
+ 		set_memcg_congestion(pgdat, target_memcg, true);
+ 
+ 	/*
+ 	 * Stall direct reclaim for IO completions if underlying BDIs
+ 	 * and node is congested. Allow kswapd to continue until it
+ 	 * starts encountering unqueued dirty pages or cycling through
+ 	 * the LRU too quickly.
+ 	 */
+ 	if (!sc->hibernation_mode && !current_is_kswapd() &&
+ 	    current_may_throttle() &&
+ 	    pgdat_memcg_congested(pgdat, target_memcg))
+ 		wait_iff_congested(BLK_RW_ASYNC, HZ/10);
+ 
+ 	if (should_continue_reclaim(pgdat, sc->nr_reclaimed - nr_reclaimed,
+ 				    sc))
+ 		goto again;
++>>>>>>> 0f6a5cff43d3 (mm: vmscan: split shrink_node() into node part and memcgs part)
  
  	/*
  	 * Kswapd gives up on balancing particular nodes after too
* Unmerged path mm/vmscan.c
