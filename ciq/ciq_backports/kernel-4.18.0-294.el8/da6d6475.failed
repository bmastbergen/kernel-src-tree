driver core: Add waiting_for_supplier sysfs file for devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Saravana Kannan <saravanak@google.com>
commit da6d647598a6d182eb6a0344a7b14ae005244399
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/da6d6475.failed

This would be useful to check if a device is not probing because it's
waiting for a supplier to be added and then linked to before it can
probe.

To reduce sysfs clutter, this file is added only if it can ever be 1.
So, if fw_devlink is disabled or set to permissive, this file is not
added. Also, this file is removed once the device probes as it's no
longer relevant.

	Signed-off-by: Saravana Kannan <saravanak@google.com>
Link: https://lore.kernel.org/r/20200521191800.136035-4-saravanak@google.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit da6d647598a6d182eb6a0344a7b14ae005244399)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index 7ffd5023ca95,5373ddd029f6..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -611,6 -905,159 +611,162 @@@ int device_links_check_suppliers(struc
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * __device_links_queue_sync_state - Queue a device for sync_state() callback
+  * @dev: Device to call sync_state() on
+  * @list: List head to queue the @dev on
+  *
+  * Queues a device for a sync_state() callback when the device links write lock
+  * isn't held. This allows the sync_state() execution flow to use device links
+  * APIs.  The caller must ensure this function is called with
+  * device_links_write_lock() held.
+  *
+  * This function does a get_device() to make sure the device is not freed while
+  * on this list.
+  *
+  * So the caller must also ensure that device_links_flush_sync_list() is called
+  * as soon as the caller releases device_links_write_lock().  This is necessary
+  * to make sure the sync_state() is called in a timely fashion and the
+  * put_device() is called on this device.
+  */
+ static void __device_links_queue_sync_state(struct device *dev,
+ 					    struct list_head *list)
+ {
+ 	struct device_link *link;
+ 
+ 	if (!dev_has_sync_state(dev))
+ 		return;
+ 	if (dev->state_synced)
+ 		return;
+ 
+ 	list_for_each_entry(link, &dev->links.consumers, s_node) {
+ 		if (!(link->flags & DL_FLAG_MANAGED))
+ 			continue;
+ 		if (link->status != DL_STATE_ACTIVE)
+ 			return;
+ 	}
+ 
+ 	/*
+ 	 * Set the flag here to avoid adding the same device to a list more
+ 	 * than once. This can happen if new consumers get added to the device
+ 	 * and probed before the list is flushed.
+ 	 */
+ 	dev->state_synced = true;
+ 
+ 	if (WARN_ON(!list_empty(&dev->links.defer_sync)))
+ 		return;
+ 
+ 	get_device(dev);
+ 	list_add_tail(&dev->links.defer_sync, list);
+ }
+ 
+ /**
+  * device_links_flush_sync_list - Call sync_state() on a list of devices
+  * @list: List of devices to call sync_state() on
+  * @dont_lock_dev: Device for which lock is already held by the caller
+  *
+  * Calls sync_state() on all the devices that have been queued for it. This
+  * function is used in conjunction with __device_links_queue_sync_state(). The
+  * @dont_lock_dev parameter is useful when this function is called from a
+  * context where a device lock is already held.
+  */
+ static void device_links_flush_sync_list(struct list_head *list,
+ 					 struct device *dont_lock_dev)
+ {
+ 	struct device *dev, *tmp;
+ 
+ 	list_for_each_entry_safe(dev, tmp, list, links.defer_sync) {
+ 		list_del_init(&dev->links.defer_sync);
+ 
+ 		if (dev != dont_lock_dev)
+ 			device_lock(dev);
+ 
+ 		if (dev->bus->sync_state)
+ 			dev->bus->sync_state(dev);
+ 		else if (dev->driver && dev->driver->sync_state)
+ 			dev->driver->sync_state(dev);
+ 
+ 		if (dev != dont_lock_dev)
+ 			device_unlock(dev);
+ 
+ 		put_device(dev);
+ 	}
+ }
+ 
+ void device_links_supplier_sync_state_pause(void)
+ {
+ 	device_links_write_lock();
+ 	defer_sync_state_count++;
+ 	device_links_write_unlock();
+ }
+ 
+ void device_links_supplier_sync_state_resume(void)
+ {
+ 	struct device *dev, *tmp;
+ 	LIST_HEAD(sync_list);
+ 
+ 	device_links_write_lock();
+ 	if (!defer_sync_state_count) {
+ 		WARN(true, "Unmatched sync_state pause/resume!");
+ 		goto out;
+ 	}
+ 	defer_sync_state_count--;
+ 	if (defer_sync_state_count)
+ 		goto out;
+ 
+ 	list_for_each_entry_safe(dev, tmp, &deferred_sync, links.defer_sync) {
+ 		/*
+ 		 * Delete from deferred_sync list before queuing it to
+ 		 * sync_list because defer_sync is used for both lists.
+ 		 */
+ 		list_del_init(&dev->links.defer_sync);
+ 		__device_links_queue_sync_state(dev, &sync_list);
+ 	}
+ out:
+ 	device_links_write_unlock();
+ 
+ 	device_links_flush_sync_list(&sync_list, NULL);
+ }
+ 
+ static int sync_state_resume_initcall(void)
+ {
+ 	device_links_supplier_sync_state_resume();
+ 	return 0;
+ }
+ late_initcall(sync_state_resume_initcall);
+ 
+ static void __device_links_supplier_defer_sync(struct device *sup)
+ {
+ 	if (list_empty(&sup->links.defer_sync) && dev_has_sync_state(sup))
+ 		list_add_tail(&sup->links.defer_sync, &deferred_sync);
+ }
+ 
+ static void device_link_drop_managed(struct device_link *link)
+ {
+ 	link->flags &= ~DL_FLAG_MANAGED;
+ 	WRITE_ONCE(link->status, DL_STATE_NONE);
+ 	kref_put(&link->kref, __device_link_del);
+ }
+ 
+ static ssize_t waiting_for_supplier_show(struct device *dev,
+ 					 struct device_attribute *attr,
+ 					 char *buf)
+ {
+ 	bool val;
+ 
+ 	device_lock(dev);
+ 	mutex_lock(&wfs_lock);
+ 	val = !list_empty(&dev->links.needs_suppliers)
+ 	      && dev->links.need_for_probe;
+ 	mutex_unlock(&wfs_lock);
+ 	device_unlock(dev);
+ 	return sprintf(buf, "%u\n", val);
+ }
+ static DEVICE_ATTR_RO(waiting_for_supplier);
+ 
+ /**
++>>>>>>> da6d647598a6 (driver core: Add waiting_for_supplier sysfs file for devices)
   * device_links_driver_bound - Update device links after probing its driver.
   * @dev: Device to update the links for.
   *
@@@ -623,7 -1070,18 +779,22 @@@
   */
  void device_links_driver_bound(struct device *dev)
  {
++<<<<<<< HEAD
 +	struct device_link *link;
++=======
+ 	struct device_link *link, *ln;
+ 	LIST_HEAD(sync_list);
+ 
+ 	/*
+ 	 * If a device probes successfully, it's expected to have created all
+ 	 * the device links it needs to or make new device links as it needs
+ 	 * them. So, it no longer needs to wait on any suppliers.
+ 	 */
+ 	mutex_lock(&wfs_lock);
+ 	list_del_init(&dev->links.needs_suppliers);
+ 	mutex_unlock(&wfs_lock);
+ 	device_remove_file(dev, &dev_attr_waiting_for_supplier);
++>>>>>>> da6d647598a6 (driver core: Add waiting_for_supplier sysfs file for devices)
  
  	device_links_write_lock();
  
diff --git a/Documentation/ABI/testing/sysfs-devices-waiting_for_supplier b/Documentation/ABI/testing/sysfs-devices-waiting_for_supplier
new file mode 100644
index 000000000000..59d073d20db6
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-devices-waiting_for_supplier
@@ -0,0 +1,17 @@
+What:		/sys/devices/.../waiting_for_supplier
+Date:		May 2020
+Contact:	Saravana Kannan <saravanak@google.com>
+Description:
+		The /sys/devices/.../waiting_for_supplier attribute is only
+		present when fw_devlink kernel command line option is enabled
+		and is set to something stricter than "permissive".  It is
+		removed once a device probes successfully (because the
+		information is no longer relevant). The number read from it (0
+		or 1) reflects whether the device is waiting for one or more
+		suppliers to be added and then linked to using device links
+		before the device can probe.
+
+		A value of 0 means the device is not waiting for any suppliers
+		to be added before it can probe.  A value of 1 means the device
+		is waiting for one or more suppliers to be added before it can
+		probe.
* Unmerged path drivers/base/core.c
