devlink: collect flash notify params into a struct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Shannon Nelson <snelson@pensando.io>
commit 6700acc5f1fe97b5705832f2678cba9e9756a0dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/6700acc5.failed

The dev flash status notify function parameter lists are getting
rather long, so add a struct to be filled and passed rather than
continuously changing the function signatures.

	Signed-off-by: Shannon Nelson <snelson@pensando.io>
	Reviewed-by: Jacob Keller <jacob.e.keller@intel.com>
	Reviewed-by: Jakub Kicinski <kuba@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6700acc5f1fe97b5705832f2678cba9e9756a0dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/devlink.c
diff --cc net/core/devlink.c
index 67dcebc29a46,d5844761a177..000000000000
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@@ -2988,9 -3022,7 +2988,13 @@@ static int devlink_nl_cmd_reload(struc
  static int devlink_nl_flash_update_fill(struct sk_buff *msg,
  					struct devlink *devlink,
  					enum devlink_command cmd,
++<<<<<<< HEAD
 +					const char *status_msg,
 +					const char *component,
 +					unsigned long done, unsigned long total)
++=======
+ 					struct devlink_flash_notify *params)
++>>>>>>> 6700acc5f1fe (devlink: collect flash notify params into a struct)
  {
  	void *hdr;
  
@@@ -3004,20 -3036,23 +3008,26 @@@
  	if (cmd != DEVLINK_CMD_FLASH_UPDATE_STATUS)
  		goto out;
  
- 	if (status_msg &&
+ 	if (params->status_msg &&
  	    nla_put_string(msg, DEVLINK_ATTR_FLASH_UPDATE_STATUS_MSG,
- 			   status_msg))
+ 			   params->status_msg))
  		goto nla_put_failure;
- 	if (component &&
+ 	if (params->component &&
  	    nla_put_string(msg, DEVLINK_ATTR_FLASH_UPDATE_COMPONENT,
- 			   component))
+ 			   params->component))
  		goto nla_put_failure;
  	if (nla_put_u64_64bit(msg, DEVLINK_ATTR_FLASH_UPDATE_STATUS_DONE,
- 			      done, DEVLINK_ATTR_PAD))
+ 			      params->done, DEVLINK_ATTR_PAD))
  		goto nla_put_failure;
  	if (nla_put_u64_64bit(msg, DEVLINK_ATTR_FLASH_UPDATE_STATUS_TOTAL,
- 			      total, DEVLINK_ATTR_PAD))
+ 			      params->total, DEVLINK_ATTR_PAD))
  		goto nla_put_failure;
++<<<<<<< HEAD
++=======
+ 	if (nla_put_u64_64bit(msg, DEVLINK_ATTR_FLASH_UPDATE_STATUS_TIMEOUT,
+ 			      params->timeout, DEVLINK_ATTR_PAD))
+ 		goto nla_put_failure;
++>>>>>>> 6700acc5f1fe (devlink: collect flash notify params into a struct)
  
  out:
  	genlmsg_end(msg, hdr);
@@@ -3030,10 -3065,7 +3040,14 @@@ nla_put_failure
  
  static void __devlink_flash_update_notify(struct devlink *devlink,
  					  enum devlink_command cmd,
++<<<<<<< HEAD
 +					  const char *status_msg,
 +					  const char *component,
 +					  unsigned long done,
 +					  unsigned long total)
++=======
+ 					  struct devlink_flash_notify *params)
++>>>>>>> 6700acc5f1fe (devlink: collect flash notify params into a struct)
  {
  	struct sk_buff *msg;
  	int err;
@@@ -3046,8 -3078,7 +3060,12 @@@
  	if (!msg)
  		return;
  
++<<<<<<< HEAD
 +	err = devlink_nl_flash_update_fill(msg, devlink, cmd, status_msg,
 +					   component, done, total);
++=======
+ 	err = devlink_nl_flash_update_fill(msg, devlink, cmd, params);
++>>>>>>> 6700acc5f1fe (devlink: collect flash notify params into a struct)
  	if (err)
  		goto out_free_msg;
  
@@@ -3061,17 -3092,21 +3079,29 @@@ out_free_msg
  
  void devlink_flash_update_begin_notify(struct devlink *devlink)
  {
+ 	struct devlink_flash_notify params = { 0 };
+ 
  	__devlink_flash_update_notify(devlink,
  				      DEVLINK_CMD_FLASH_UPDATE,
++<<<<<<< HEAD
 +				      NULL, NULL, 0, 0);
++=======
+ 				      &params);
++>>>>>>> 6700acc5f1fe (devlink: collect flash notify params into a struct)
  }
  EXPORT_SYMBOL_GPL(devlink_flash_update_begin_notify);
  
  void devlink_flash_update_end_notify(struct devlink *devlink)
  {
+ 	struct devlink_flash_notify params = { 0 };
+ 
  	__devlink_flash_update_notify(devlink,
  				      DEVLINK_CMD_FLASH_UPDATE_END,
++<<<<<<< HEAD
 +				      NULL, NULL, 0, 0);
++=======
+ 				      &params);
++>>>>>>> 6700acc5f1fe (devlink: collect flash notify params into a struct)
  }
  EXPORT_SYMBOL_GPL(devlink_flash_update_end_notify);
  
@@@ -3081,12 -3116,36 +3111,43 @@@ void devlink_flash_update_status_notify
  					unsigned long done,
  					unsigned long total)
  {
+ 	struct devlink_flash_notify params = {
+ 		.status_msg = status_msg,
+ 		.component = component,
+ 		.done = done,
+ 		.total = total,
+ 	};
+ 
  	__devlink_flash_update_notify(devlink,
  				      DEVLINK_CMD_FLASH_UPDATE_STATUS,
++<<<<<<< HEAD
 +				      status_msg, component, done, total);
 +}
 +EXPORT_SYMBOL_GPL(devlink_flash_update_status_notify);
 +
++=======
+ 				      &params);
+ }
+ EXPORT_SYMBOL_GPL(devlink_flash_update_status_notify);
+ 
+ void devlink_flash_update_timeout_notify(struct devlink *devlink,
+ 					 const char *status_msg,
+ 					 const char *component,
+ 					 unsigned long timeout)
+ {
+ 	struct devlink_flash_notify params = {
+ 		.status_msg = status_msg,
+ 		.component = component,
+ 		.timeout = timeout,
+ 	};
+ 
+ 	__devlink_flash_update_notify(devlink,
+ 				      DEVLINK_CMD_FLASH_UPDATE_STATUS,
+ 				      &params);
+ }
+ EXPORT_SYMBOL_GPL(devlink_flash_update_timeout_notify);
+ 
++>>>>>>> 6700acc5f1fe (devlink: collect flash notify params into a struct)
  static int devlink_nl_cmd_flash_update(struct sk_buff *skb,
  				       struct genl_info *info)
  {
diff --git a/include/net/devlink.h b/include/net/devlink.h
index 8fb457f77884..83a865bc30c1 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -361,6 +361,25 @@ struct devlink_param_gset_ctx {
 	enum devlink_param_cmode cmode;
 };
 
+/**
+ * struct devlink_flash_notify - devlink dev flash notify data
+ * @status_msg: current status string
+ * @component: firmware component being updated
+ * @done: amount of work completed of total amount
+ * @total: amount of work expected to be done
+ * @timeout: expected max timeout in seconds
+ *
+ * These are values to be given to userland to be displayed in order
+ * to show current activity in a firmware update process.
+ */
+struct devlink_flash_notify {
+	const char *status_msg;
+	const char *component;
+	unsigned long done;
+	unsigned long total;
+	unsigned long timeout;
+};
+
 /**
  * struct devlink_param - devlink configuration parameter data
  * @name: name of the parameter
* Unmerged path net/core/devlink.c
