powerpc/watchpoint/xmon: Support 2nd DAWR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ravi Bangoria <ravi.bangoria@linux.ibm.com>
commit 30df74d67d48949da87e3a5b57c381763e8fd526
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/30df74d6.failed

Add support for 2nd DAWR in xmon. With this, we can have two
simultaneous breakpoints from xmon.

	Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Reviewed-by: Michael Neuling <mikey@neuling.org>
Link: https://lore.kernel.org/r/20200514111741.97993-17-ravi.bangoria@linux.ibm.com
(cherry picked from commit 30df74d67d48949da87e3a5b57c381763e8fd526)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/xmon/xmon.c
diff --cc arch/powerpc/xmon/xmon.c
index 9aed919c051b,de585204d1d2..000000000000
--- a/arch/powerpc/xmon/xmon.c
+++ b/arch/powerpc/xmon/xmon.c
@@@ -867,13 -955,16 +874,24 @@@ static void insert_bpts(void
  
  static void insert_cpu_bpts(void)
  {
+ 	int i;
  	struct arch_hw_breakpoint brk;
  
++<<<<<<< HEAD
 +	if (dabr.enabled) {
 +		brk.address = dabr.address;
 +		brk.type = (dabr.enabled & HW_BRK_TYPE_DABR) | HW_BRK_TYPE_PRIV_ALL;
 +		brk.len = 8;
 +		__set_breakpoint(&brk);
++=======
+ 	for (i = 0; i < nr_wp_slots(); i++) {
+ 		if (dabr[i].enabled) {
+ 			brk.address = dabr[i].address;
+ 			brk.type = (dabr[i].enabled & HW_BRK_TYPE_DABR) | HW_BRK_TYPE_PRIV_ALL;
+ 			brk.len = 8;
+ 			__set_breakpoint(i, &brk);
+ 		}
++>>>>>>> 30df74d67d48 (powerpc/watchpoint/xmon: Support 2nd DAWR)
  	}
  
  	if (iabr)
@@@ -1387,17 -1528,11 +1435,10 @@@ bpt_cmds(void
  			break;
  		}
  		termch = cmd;
 -
 -		if (xmon_is_ro || !scanhex(&a)) {
 +		if (!scanhex(&a)) {
  			/* print all breakpoints */
  			printf("   type            address\n");
- 			if (dabr.enabled) {
- 				printf("   data   "REG"  [", dabr.address);
- 				if (dabr.enabled & 1)
- 					printf("r");
- 				if (dabr.enabled & 2)
- 					printf("w");
- 				printf("]\n");
- 			}
+ 			print_data_bpts();
  			for (bp = bpts; bp < &bpts[NBPTS]; ++bp) {
  				if (!bp->enabled)
  					continue;
@@@ -1852,8 -1992,13 +1893,18 @@@ static void dump_207_sprs(void
  
  	printf("hfscr  = %.16lx  dhdes = %.16lx rpr    = %.16lx\n",
  		mfspr(SPRN_HFSCR), mfspr(SPRN_DHDES), mfspr(SPRN_RPR));
++<<<<<<< HEAD
 +	printf("dawr   = %.16lx  dawrx = %.16lx ciabr  = %.16lx\n",
 +		mfspr(SPRN_DAWR), mfspr(SPRN_DAWRX), mfspr(SPRN_CIABR));
++=======
+ 	printf("dawr0  = %.16lx dawrx0 = %.16lx\n",
+ 	       mfspr(SPRN_DAWR0), mfspr(SPRN_DAWRX0));
+ 	if (nr_wp_slots() > 1) {
+ 		printf("dawr1  = %.16lx dawrx1 = %.16lx\n",
+ 		       mfspr(SPRN_DAWR1), mfspr(SPRN_DAWRX1));
+ 	}
+ 	printf("ciabr  = %.16lx\n", mfspr(SPRN_CIABR));
++>>>>>>> 30df74d67d48 (powerpc/watchpoint/xmon: Support 2nd DAWR)
  #endif
  }
  
@@@ -3713,14 -3947,12 +3764,20 @@@ static void clear_all_bpt(void
  		bpts[i].enabled = 0;
  
  	/* Clear any data or iabr breakpoints */
++<<<<<<< HEAD
 +	if (iabr || dabr.enabled) {
 +		iabr = NULL;
 +		dabr.enabled = 0;
 +	}
 +
 +	printf("xmon: All breakpoints cleared\n");
++=======
+ 	iabr = NULL;
+ 	for (i = 0; i < nr_wp_slots(); i++)
+ 		dabr[i].enabled = 0;
++>>>>>>> 30df74d67d48 (powerpc/watchpoint/xmon: Support 2nd DAWR)
  }
  
 -#ifdef CONFIG_DEBUG_FS
  static int xmon_dbgfs_set(void *data, u64 val)
  {
  	xmon_on = !!val;
* Unmerged path arch/powerpc/xmon/xmon.c
