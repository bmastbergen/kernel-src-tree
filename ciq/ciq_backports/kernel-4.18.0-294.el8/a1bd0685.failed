sched: Fix use of count for nr_running tracepoint

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Phil Auld <pauld@redhat.com>
commit a1bd06853ee478d37fae9435c5521e301de94c67
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a1bd0685.failed

The count field is meant to tell if an update to nr_running
is an add or a subtract. Make it do so by adding the missing
minus sign.

Fixes: 9d246053a691 ("sched: Add a tracepoint to track rq->nr_running")
	Signed-off-by: Phil Auld <pauld@redhat.com>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20200805203138.1411-1-pauld@redhat.com
(cherry picked from commit a1bd06853ee478d37fae9435c5521e301de94c67)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/sched.h
diff --cc kernel/sched/sched.h
index b002c124556d,28709f6b0975..000000000000
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@@ -1912,6 -1998,10 +1912,13 @@@ static inline void add_nr_running(struc
  static inline void sub_nr_running(struct rq *rq, unsigned count)
  {
  	rq->nr_running -= count;
++<<<<<<< HEAD
++=======
+ 	if (trace_sched_update_nr_running_tp_enabled()) {
+ 		call_trace_sched_update_nr_running(rq, -count);
+ 	}
+ 
++>>>>>>> a1bd06853ee4 (sched: Fix use of count for nr_running tracepoint)
  	/* Check if we still need preemption */
  	sched_update_tick_dependency(rq);
  }
* Unmerged path kernel/sched/sched.h
