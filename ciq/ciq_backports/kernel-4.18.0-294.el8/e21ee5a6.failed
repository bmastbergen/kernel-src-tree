scsi: block: Return status code in blk_mq_end_request()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Hannes Reinecke <hare@suse.de>
commit e21ee5a6b9c9d30fd07ce5bd3e4a5668a03af6d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e21ee5a6.failed

blk_mq_end_request() will use the block status returned from queue_rq() as
argument, except in one instance in blk_mq_dispatch_rq_list(), where the
generic BLK_STS_IOERR is used.

Link: https://lore.kernel.org/r/20200930080256.90964-2-hare@suse.de
	Reviewed-by: Ewan D. Milne <emilne@redhat.com>
	Signed-off-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit e21ee5a6b9c9d30fd07ce5bd3e4a5668a03af6d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 7330c42c292b,1b25ec2fe9be..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -1277,20 -1379,37 +1277,24 @@@ bool blk_mq_dispatch_rq_list(struct req
  			bd.last = !blk_mq_get_driver_tag(nxt);
  		}
  
 -		/*
 -		 * once the request is queued to lld, no need to cover the
 -		 * budget any more
 -		 */
 -		if (nr_budgets)
 -			nr_budgets--;
  		ret = q->mq_ops->queue_rq(hctx, &bd);
 -		switch (ret) {
 -		case BLK_STS_OK:
 -			queued++;
 -			break;
 -		case BLK_STS_RESOURCE:
 -		case BLK_STS_DEV_RESOURCE:
 +		if (ret == BLK_STS_RESOURCE || ret == BLK_STS_DEV_RESOURCE) {
  			blk_mq_handle_dev_resource(rq, list);
 -			goto out;
 -		case BLK_STS_ZONE_RESOURCE:
 -			/*
 -			 * Move the request to zone_list and keep going through
 -			 * the dispatch list to find more requests the drive can
 -			 * accept.
 -			 */
 -			blk_mq_handle_zone_resource(rq, &zone_list);
  			break;
 -		default:
 +		}
 +
 +		if (unlikely(ret != BLK_STS_OK)) {
  			errors++;
++<<<<<<< HEAD
 +			blk_mq_end_request(rq, BLK_STS_IOERR);
 +			continue;
++=======
+ 			blk_mq_end_request(rq, ret);
++>>>>>>> e21ee5a6b9c9 (scsi: block: Return status code in blk_mq_end_request())
  		}
 +
 +		queued++;
  	} while (!list_empty(list));
 -out:
 -	if (!list_empty(&zone_list))
 -		list_splice_tail_init(&zone_list, list);
  
  	hctx->dispatched[queued_to_index(queued)]++;
  
* Unmerged path block/blk-mq.c
