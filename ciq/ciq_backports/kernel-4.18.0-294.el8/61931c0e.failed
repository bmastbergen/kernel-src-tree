dm: export dm_copy_name_and_uuid

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mike Snitzer <snitzer@redhat.com>
commit 61931c0ee9cf5da575996b977a2358b598ef84bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/61931c0e.failed

Allow DM targets to access the configured name and uuid.
Also, bump DM ioctl version.

	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 61931c0ee9cf5da575996b977a2358b598ef84bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-ioctl.c
diff --cc drivers/md/dm-ioctl.c
index 46b0fbed84b7,cd0478d44058..000000000000
--- a/drivers/md/dm-ioctl.c
+++ b/drivers/md/dm-ioctl.c
@@@ -2044,3 -2044,110 +2044,113 @@@ out
  
  	return r;
  }
++<<<<<<< HEAD
++=======
+ EXPORT_SYMBOL_GPL(dm_copy_name_and_uuid);
+ 
+ /**
+  * dm_early_create - create a mapped device in early boot.
+  *
+  * @dmi: Contains main information of the device mapping to be created.
+  * @spec_array: array of pointers to struct dm_target_spec. Describes the
+  * mapping table of the device.
+  * @target_params_array: array of strings with the parameters to a specific
+  * target.
+  *
+  * Instead of having the struct dm_target_spec and the parameters for every
+  * target embedded at the end of struct dm_ioctl (as performed in a normal
+  * ioctl), pass them as arguments, so the caller doesn't need to serialize them.
+  * The size of the spec_array and target_params_array is given by
+  * @dmi->target_count.
+  * This function is supposed to be called in early boot, so locking mechanisms
+  * to protect against concurrent loads are not required.
+  */
+ int __init dm_early_create(struct dm_ioctl *dmi,
+ 			   struct dm_target_spec **spec_array,
+ 			   char **target_params_array)
+ {
+ 	int r, m = DM_ANY_MINOR;
+ 	struct dm_table *t, *old_map;
+ 	struct mapped_device *md;
+ 	unsigned int i;
+ 
+ 	if (!dmi->target_count)
+ 		return -EINVAL;
+ 
+ 	r = check_name(dmi->name);
+ 	if (r)
+ 		return r;
+ 
+ 	if (dmi->flags & DM_PERSISTENT_DEV_FLAG)
+ 		m = MINOR(huge_decode_dev(dmi->dev));
+ 
+ 	/* alloc dm device */
+ 	r = dm_create(m, &md);
+ 	if (r)
+ 		return r;
+ 
+ 	/* hash insert */
+ 	r = dm_hash_insert(dmi->name, *dmi->uuid ? dmi->uuid : NULL, md);
+ 	if (r)
+ 		goto err_destroy_dm;
+ 
+ 	/* alloc table */
+ 	r = dm_table_create(&t, get_mode(dmi), dmi->target_count, md);
+ 	if (r)
+ 		goto err_hash_remove;
+ 
+ 	/* add targets */
+ 	for (i = 0; i < dmi->target_count; i++) {
+ 		r = dm_table_add_target(t, spec_array[i]->target_type,
+ 					(sector_t) spec_array[i]->sector_start,
+ 					(sector_t) spec_array[i]->length,
+ 					target_params_array[i]);
+ 		if (r) {
+ 			DMWARN("error adding target to table");
+ 			goto err_destroy_table;
+ 		}
+ 	}
+ 
+ 	/* finish table */
+ 	r = dm_table_complete(t);
+ 	if (r)
+ 		goto err_destroy_table;
+ 
+ 	md->type = dm_table_get_type(t);
+ 	/* setup md->queue to reflect md's type (may block) */
+ 	r = dm_setup_md_queue(md, t);
+ 	if (r) {
+ 		DMWARN("unable to set up device queue for new table.");
+ 		goto err_destroy_table;
+ 	}
+ 
+ 	/* Set new map */
+ 	dm_suspend(md, 0);
+ 	old_map = dm_swap_table(md, t);
+ 	if (IS_ERR(old_map)) {
+ 		r = PTR_ERR(old_map);
+ 		goto err_destroy_table;
+ 	}
+ 	set_disk_ro(dm_disk(md), !!(dmi->flags & DM_READONLY_FLAG));
+ 
+ 	/* resume device */
+ 	r = dm_resume(md);
+ 	if (r)
+ 		goto err_destroy_table;
+ 
+ 	DMINFO("%s (%s) is ready", md->disk->disk_name, dmi->name);
+ 	dm_put(md);
+ 	return 0;
+ 
+ err_destroy_table:
+ 	dm_table_destroy(t);
+ err_hash_remove:
+ 	(void) __hash_remove(__get_name_cell(dmi->name));
+ 	/* release reference from __get_name_cell */
+ 	dm_put(md);
+ err_destroy_dm:
+ 	dm_put(md);
+ 	dm_destroy(md);
+ 	return r;
+ }
++>>>>>>> 61931c0ee9cf (dm: export dm_copy_name_and_uuid)
* Unmerged path drivers/md/dm-ioctl.c
diff --git a/include/uapi/linux/dm-ioctl.h b/include/uapi/linux/dm-ioctl.h
index 6622912c2342..4933b6b67b85 100644
--- a/include/uapi/linux/dm-ioctl.h
+++ b/include/uapi/linux/dm-ioctl.h
@@ -272,9 +272,9 @@ enum {
 #define DM_DEV_SET_GEOMETRY	_IOWR(DM_IOCTL, DM_DEV_SET_GEOMETRY_CMD, struct dm_ioctl)
 
 #define DM_VERSION_MAJOR	4
-#define DM_VERSION_MINOR	42
+#define DM_VERSION_MINOR	43
 #define DM_VERSION_PATCHLEVEL	0
-#define DM_VERSION_EXTRA	"-ioctl (2020-02-27)"
+#define DM_VERSION_EXTRA	"-ioctl (2020-10-01)"
 
 /* Status bits */
 #define DM_READONLY_FLAG	(1 << 0) /* In/Out */
