s390/qeth: allow configuration of TX queues for z/VM NICs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Julian Wiedmann <jwi@linux.ibm.com>
commit fcc2df8b8777c960c8125bc157423c76415a5419
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/fcc2df8b.failed

Add support for ETHTOOL_SCHANNELS to change the count of active
TX queues.

Since all TX queue structs are pre-allocated and -registered, we just
need to trivially adjust dev->real_num_tx_queues.

	Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit fcc2df8b8777c960c8125bc157423c76415a5419)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/net/qeth_ethtool.c
diff --cc drivers/s390/net/qeth_ethtool.c
index ab59bc975719,19b9c8302d36..000000000000
--- a/drivers/s390/net/qeth_ethtool.c
+++ b/drivers/s390/net/qeth_ethtool.c
@@@ -175,6 -175,51 +175,54 @@@ static void qeth_get_channels(struct ne
  	channels->combined_count = 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int qeth_set_channels(struct net_device *dev,
+ 			     struct ethtool_channels *channels)
+ {
+ 	struct qeth_card *card = dev->ml_priv;
+ 
+ 	if (IS_IQD(card) || !IS_VM_NIC(card))
+ 		return -EOPNOTSUPP;
+ 
+ 	if (channels->rx_count == 0 || channels->tx_count == 0)
+ 		return -EINVAL;
+ 	if (channels->tx_count > card->qdio.no_out_queues)
+ 		return -EINVAL;
+ 
+ 	return netif_set_real_num_tx_queues(dev, channels->tx_count);
+ }
+ 
+ static int qeth_get_tunable(struct net_device *dev,
+ 			    const struct ethtool_tunable *tuna, void *data)
+ {
+ 	struct qeth_priv *priv = netdev_priv(dev);
+ 
+ 	switch (tuna->id) {
+ 	case ETHTOOL_RX_COPYBREAK:
+ 		*(u32 *)data = priv->rx_copybreak;
+ 		return 0;
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
+ 
+ static int qeth_set_tunable(struct net_device *dev,
+ 			    const struct ethtool_tunable *tuna,
+ 			    const void *data)
+ {
+ 	struct qeth_priv *priv = netdev_priv(dev);
+ 
+ 	switch (tuna->id) {
+ 	case ETHTOOL_RX_COPYBREAK:
+ 		WRITE_ONCE(priv->rx_copybreak, *(u32 *)data);
+ 		return 0;
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
+ 
++>>>>>>> fcc2df8b8777 (s390/qeth: allow configuration of TX queues for z/VM NICs)
  /* Helper function to fill 'advertising' and 'supported' which are the same. */
  /* Autoneg and full-duplex are supported and advertised unconditionally.     */
  /* Always advertise and support all speeds up to specified, and only one     */
@@@ -381,6 -426,9 +429,12 @@@ const struct ethtool_ops qeth_ethtool_o
  	.get_sset_count = qeth_get_sset_count,
  	.get_drvinfo = qeth_get_drvinfo,
  	.get_channels = qeth_get_channels,
++<<<<<<< HEAD
++=======
+ 	.set_channels = qeth_set_channels,
+ 	.get_tunable = qeth_get_tunable,
+ 	.set_tunable = qeth_set_tunable,
++>>>>>>> fcc2df8b8777 (s390/qeth: allow configuration of TX queues for z/VM NICs)
  	.get_link_ksettings = qeth_get_link_ksettings,
  };
  
* Unmerged path drivers/s390/net/qeth_ethtool.c
