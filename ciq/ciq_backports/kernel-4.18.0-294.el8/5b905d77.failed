powerpc/watchpoint: Fix exception handling for CONFIG_HAVE_HW_BREAKPOINT=N

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ravi Bangoria <ravi.bangoria@linux.ibm.com>
commit 5b905d77987de065bdd3a2906816b5f143df087b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5b905d77.failed

On powerpc, ptrace watchpoint works in one-shot mode. i.e. kernel
disables event every time it fires and user has to re-enable it.
Also, in case of ptrace watchpoint, kernel notifies ptrace user
before executing instruction.

With CONFIG_HAVE_HW_BREAKPOINT=N, kernel is missing to disable
ptrace event and thus it's causing infinite loop of exceptions.
This is especially harmful when user watches on a data which is
also read/written by kernel, eg syscall parameters. In such case,
infinite exceptions happens in kernel mode which causes soft-lockup.

Fixes: 9422de3e953d ("powerpc: Hardware breakpoints rewrite to handle non DABR breakpoint registers")
	Reported-by: Pedro Miraglia Franco de Carvalho <pedromfc@linux.ibm.com>
	Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200902042945.129369-6-ravi.bangoria@linux.ibm.com
(cherry picked from commit 5b905d77987de065bdd3a2906816b5f143df087b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/hw_breakpoint.h
#	arch/powerpc/kernel/process.c
#	arch/powerpc/kernel/ptrace/ptrace-noadv.c
diff --cc arch/powerpc/include/asm/hw_breakpoint.h
index f0b028781c74,abebfbee5b1c..000000000000
--- a/arch/powerpc/include/asm/hw_breakpoint.h
+++ b/arch/powerpc/include/asm/hw_breakpoint.h
@@@ -28,6 -17,8 +28,11 @@@ struct arch_hw_breakpoint 
  	unsigned long	address;
  	u16		type;
  	u16		len; /* length of the target data symbol */
++<<<<<<< HEAD
++=======
+ 	u16		hw_len; /* length programmed in hw */
+ 	u8		flags;
++>>>>>>> 5b905d77987d (powerpc/watchpoint: Fix exception handling for CONFIG_HAVE_HW_BREAKPOINT=N)
  };
  
  /* Note: Don't change the first 6 bits below as they are in the same order
@@@ -47,6 -38,31 +52,34 @@@
  #define HW_BRK_TYPE_PRIV_ALL	(HW_BRK_TYPE_USER | HW_BRK_TYPE_KERNEL | \
  				 HW_BRK_TYPE_HYP)
  
++<<<<<<< HEAD
++=======
+ #define HW_BRK_FLAG_DISABLED	0x1
+ 
+ /* Minimum granularity */
+ #ifdef CONFIG_PPC_8xx
+ #define HW_BREAKPOINT_SIZE  0x4
+ #else
+ #define HW_BREAKPOINT_SIZE  0x8
+ #endif
+ #define HW_BREAKPOINT_SIZE_QUADWORD	0x10
+ 
+ #define DABR_MAX_LEN	8
+ #define DAWR_MAX_LEN	512
+ 
+ static inline int nr_wp_slots(void)
+ {
+ 	return cpu_has_feature(CPU_FTR_DAWR1) ? 2 : 1;
+ }
+ 
+ bool wp_check_constraints(struct pt_regs *regs, struct ppc_inst instr,
+ 			  unsigned long ea, int type, int size,
+ 			  struct arch_hw_breakpoint *info);
+ 
+ void wp_get_instr_detail(struct pt_regs *regs, struct ppc_inst *instr,
+ 			 int *type, int *size, unsigned long *ea);
+ 
++>>>>>>> 5b905d77987d (powerpc/watchpoint: Fix exception handling for CONFIG_HAVE_HW_BREAKPOINT=N)
  #ifdef CONFIG_HAVE_HW_BREAKPOINT
  #include <linux/kdebug.h>
  #include <asm/reg.h>
diff --cc arch/powerpc/kernel/process.c
index 6ca2453dede4,483e36a42617..000000000000
--- a/arch/powerpc/kernel/process.c
+++ b/arch/powerpc/kernel/process.c
@@@ -617,11 -691,18 +655,23 @@@ void do_break (struct pt_regs *regs, un
  	if (debugger_break_match(regs))
  		return;
  
++<<<<<<< HEAD
 +	/* Clear the breakpoint */
 +	hw_breakpoint_disable();
++=======
+ 	/*
+ 	 * We reach here only when watchpoint exception is generated by ptrace
+ 	 * event (or hw is buggy!). Now if CONFIG_HAVE_HW_BREAKPOINT is set,
+ 	 * watchpoint is already handled by hw_breakpoint_handler() so we don't
+ 	 * have to do anything. But when CONFIG_HAVE_HW_BREAKPOINT is not set,
+ 	 * we need to manually handle the watchpoint here.
+ 	 */
+ 	if (!IS_ENABLED(CONFIG_HAVE_HW_BREAKPOINT))
+ 		do_break_handler(regs);
++>>>>>>> 5b905d77987d (powerpc/watchpoint: Fix exception handling for CONFIG_HAVE_HW_BREAKPOINT=N)
  
  	/* Deliver the signal to userspace */
 -	force_sig_fault(SIGTRAP, TRAP_HWBKPT, (void __user *)address);
 +	force_sig_fault(SIGTRAP, TRAP_HWBKPT, (void __user *)address, current);
  }
  #endif	/* CONFIG_PPC_ADV_DEBUG_REGS */
  
* Unmerged path arch/powerpc/kernel/ptrace/ptrace-noadv.c
* Unmerged path arch/powerpc/include/asm/hw_breakpoint.h
* Unmerged path arch/powerpc/kernel/process.c
* Unmerged path arch/powerpc/kernel/ptrace/ptrace-noadv.c
