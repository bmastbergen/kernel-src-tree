mm/page_alloc: inline function to handle CONFIG_DEFERRED_STRUCT_PAGE_INIT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Oscar Salvador <osalvador@suse.de>
commit 0188dc98ad5c7c361d46175623471d4be0fb8610
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0188dc98.failed

Let us move the code between CONFIG_DEFERRED_STRUCT_PAGE_INIT to an inline
function.  Not having an ifdef in the function makes the code more
readable.

Link: http://lkml.kernel.org/r/20180730101757.28058-4-osalvador@techadventures.net
	Signed-off-by: Oscar Salvador <osalvador@suse.de>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Reviewed-by: Pavel Tatashin <pasha.tatashin@oracle.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Aaron Lu <aaron.lu@intel.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Mel Gorman <mgorman@techsingularity.net>
	Cc: Pasha Tatashin <Pavel.Tatashin@microsoft.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 0188dc98ad5c7c361d46175623471d4be0fb8610)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index fa941d4649d5,5b939bd1bff9..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -6533,8 -6364,24 +6533,29 @@@ static void __ref alloc_node_mem_map(st
  static void __ref alloc_node_mem_map(struct pglist_data *pgdat) { }
  #endif /* CONFIG_FLAT_NODE_MEM_MAP */
  
++<<<<<<< HEAD
 +void __paginginit free_area_init_node(int nid, unsigned long *zones_size,
 +		unsigned long node_start_pfn, unsigned long *zholes_size)
++=======
+ #ifdef CONFIG_DEFERRED_STRUCT_PAGE_INIT
+ static inline void pgdat_set_deferred_range(pg_data_t *pgdat)
+ {
+ 	/*
+ 	 * We start only with one section of pages, more pages are added as
+ 	 * needed until the rest of deferred pages are initialized.
+ 	 */
+ 	pgdat->static_init_pgcnt = min_t(unsigned long, PAGES_PER_SECTION,
+ 						pgdat->node_spanned_pages);
+ 	pgdat->first_deferred_pfn = ULONG_MAX;
+ }
+ #else
+ static inline void pgdat_set_deferred_range(pg_data_t *pgdat) {}
+ #endif
+ 
+ void __meminit free_area_init_node(int nid, unsigned long *zones_size,
+ 				   unsigned long node_start_pfn,
+ 				   unsigned long *zholes_size)
++>>>>>>> 0188dc98ad5c (mm/page_alloc: inline function to handle CONFIG_DEFERRED_STRUCT_PAGE_INIT)
  {
  	pg_data_t *pgdat = NODE_DATA(nid);
  	unsigned long start_pfn = 0;
* Unmerged path mm/page_alloc.c
