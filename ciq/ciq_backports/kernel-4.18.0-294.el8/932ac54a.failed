libbf: Fix uninitialized pointer at btf__parse_raw()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Daniel T. Lee <danieltimlee@gmail.com>
commit 932ac54a3e59335a847f7682b5124a788ab3c798
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/932ac54a.failed

Recently, from commit 94a1fedd63ed ("libbpf: Add btf__parse_raw() and
generic btf__parse() APIs"), new API has been added to libbpf that
allows to parse BTF from raw data file (btf__parse_raw()).

The commit derives build failure of samples/bpf due to improper access
of uninitialized pointer at btf_parse_raw().

    btf.c: In function btf__parse_raw:
    btf.c:625:28: error: btf may be used uninitialized in this function
      625 |  return err ? ERR_PTR(err) : btf;
          |         ~~~~~~~~~~~~~~~~~~~^~~~~

This commit fixes the build failure of samples/bpf by adding code of
initializing btf pointer as NULL.

Fixes: 94a1fedd63ed ("libbpf: Add btf__parse_raw() and generic btf__parse() APIs")
	Signed-off-by: Daniel T. Lee <danieltimlee@gmail.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
Link: https://lore.kernel.org/bpf/20200805223359.32109-1-danieltimlee@gmail.com
(cherry picked from commit 932ac54a3e59335a847f7682b5124a788ab3c798)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/btf.c
diff --cc tools/lib/bpf/btf.c
index 201a50362e5c,4843e44916f7..000000000000
--- a/tools/lib/bpf/btf.c
+++ b/tools/lib/bpf/btf.c
@@@ -562,6 -562,83 +562,86 @@@ done
  	return btf;
  }
  
++<<<<<<< HEAD
++=======
+ struct btf *btf__parse_raw(const char *path)
+ {
+ 	struct btf *btf = NULL;
+ 	void *data = NULL;
+ 	FILE *f = NULL;
+ 	__u16 magic;
+ 	int err = 0;
+ 	long sz;
+ 
+ 	f = fopen(path, "rb");
+ 	if (!f) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 
+ 	/* check BTF magic */
+ 	if (fread(&magic, 1, sizeof(magic), f) < sizeof(magic)) {
+ 		err = -EIO;
+ 		goto err_out;
+ 	}
+ 	if (magic != BTF_MAGIC) {
+ 		/* definitely not a raw BTF */
+ 		err = -EPROTO;
+ 		goto err_out;
+ 	}
+ 
+ 	/* get file size */
+ 	if (fseek(f, 0, SEEK_END)) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 	sz = ftell(f);
+ 	if (sz < 0) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 	/* rewind to the start */
+ 	if (fseek(f, 0, SEEK_SET)) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 
+ 	/* pre-alloc memory and read all of BTF data */
+ 	data = malloc(sz);
+ 	if (!data) {
+ 		err = -ENOMEM;
+ 		goto err_out;
+ 	}
+ 	if (fread(data, 1, sz, f) < sz) {
+ 		err = -EIO;
+ 		goto err_out;
+ 	}
+ 
+ 	/* finally parse BTF data */
+ 	btf = btf__new(data, sz);
+ 
+ err_out:
+ 	free(data);
+ 	if (f)
+ 		fclose(f);
+ 	return err ? ERR_PTR(err) : btf;
+ }
+ 
+ struct btf *btf__parse(const char *path, struct btf_ext **btf_ext)
+ {
+ 	struct btf *btf;
+ 
+ 	if (btf_ext)
+ 		*btf_ext = NULL;
+ 
+ 	btf = btf__parse_raw(path);
+ 	if (!IS_ERR(btf) || PTR_ERR(btf) != -EPROTO)
+ 		return btf;
+ 
+ 	return btf__parse_elf(path, btf_ext);
+ }
+ 
++>>>>>>> 932ac54a3e59 (libbf: Fix uninitialized pointer at btf__parse_raw())
  static int compare_vsi_off(const void *_a, const void *_b)
  {
  	const struct btf_var_secinfo *a = _a;
* Unmerged path tools/lib/bpf/btf.c
