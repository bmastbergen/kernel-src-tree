kasan: Bump required compiler version

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Marco Elver <elver@google.com>
commit 7b861a53e46b6b42ab8560b105af308cb72d7285
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7b861a53.failed

Adds config variable CC_HAS_WORKING_NOSANITIZE_ADDRESS, which will be
true if we have a compiler that does not fail builds due to
no_sanitize_address functions. This does not yet mean they work as
intended, but for automated build-tests, this is the minimum
requirement.

For example, we require that __always_inline functions used from
no_sanitize_address functions do not generate instrumentation. On GCC <=
7 this fails to build entirely, therefore we make the minimum version
GCC 8.

	Suggested-by: Peter Zijlstra <peterz@infradead.org>
	Signed-off-by: Marco Elver <elver@google.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
	Acked-by: Andrey Konovalov <andreyknvl@google.com>
Link: https://lkml.kernel.org/r/20200602175859.GC2604@hirez.programming.kicks-ass.net
(cherry picked from commit 7b861a53e46b6b42ab8560b105af308cb72d7285)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/Kconfig.kasan
diff --cc lib/Kconfig.kasan
index d0bad1bd9a2b,af0dd09f91e9..000000000000
--- a/lib/Kconfig.kasan
+++ b/lib/Kconfig.kasan
@@@ -1,36 -1,90 +1,43 @@@
  config HAVE_ARCH_KASAN
  	bool
  
 -config HAVE_ARCH_KASAN_SW_TAGS
 -	bool
 -
 -config	HAVE_ARCH_KASAN_VMALLOC
 -	bool
 -
 -config CC_HAS_KASAN_GENERIC
 -	def_bool $(cc-option, -fsanitize=kernel-address)
 -
 -config CC_HAS_KASAN_SW_TAGS
 -	def_bool $(cc-option, -fsanitize=kernel-hwaddress)
 +if HAVE_ARCH_KASAN
  
+ config CC_HAS_WORKING_NOSANITIZE_ADDRESS
+ 	def_bool !CC_IS_GCC || GCC_VERSION >= 80000
+ 
  config KASAN
 -	bool "KASAN: runtime memory debugger"
 -	depends on (HAVE_ARCH_KASAN && CC_HAS_KASAN_GENERIC) || \
 -		   (HAVE_ARCH_KASAN_SW_TAGS && CC_HAS_KASAN_SW_TAGS)
 -	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
 -	depends on CC_HAS_WORKING_NOSANITIZE_ADDRESS
 -	help
 -	  Enables KASAN (KernelAddressSANitizer) - runtime memory debugger,
 -	  designed to find out-of-bounds accesses and use-after-free bugs.
 -	  See Documentation/dev-tools/kasan.rst for details.
 -
 -choice
 -	prompt "KASAN mode"
 -	depends on KASAN
 -	default KASAN_GENERIC
 -	help
 -	  KASAN has two modes: generic KASAN (similar to userspace ASan,
 -	  x86_64/arm64/xtensa, enabled with CONFIG_KASAN_GENERIC) and
 -	  software tag-based KASAN (a version based on software memory
 -	  tagging, arm64 only, similar to userspace HWASan, enabled with
 -	  CONFIG_KASAN_SW_TAGS).
 -	  Both generic and tag-based KASAN are strictly debugging features.
 -
 -config KASAN_GENERIC
 -	bool "Generic mode"
 -	depends on HAVE_ARCH_KASAN && CC_HAS_KASAN_GENERIC
 +	bool "KASan: runtime memory debugger"
  	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
++<<<<<<< HEAD
  	select SLUB_DEBUG if SLUB
  	select CONSTRUCTORS
  	select STACKDEPOT
++=======
++	depends on CC_HAS_WORKING_NOSANITIZE_ADDRESS
++>>>>>>> 7b861a53e46b (kasan: Bump required compiler version)
  	help
 -	  Enables generic KASAN mode.
 -	  Supported in both GCC and Clang. With GCC it requires version 4.9.2
 -	  or later for basic support and version 5.0 or later for detection of
 -	  out-of-bounds accesses for stack and global variables and for inline
 -	  instrumentation mode (CONFIG_KASAN_INLINE). With Clang it requires
 -	  version 3.7.0 or later and it doesn't support detection of
 -	  out-of-bounds accesses for global variables yet.
 -	  This mode consumes about 1/8th of available memory at kernel start
 -	  and introduces an overhead of ~x1.5 for the rest of the allocations.
 -	  The performance slowdown is ~x3.
 +	  Enables kernel address sanitizer - runtime memory debugger,
 +	  designed to find out-of-bounds accesses and use-after-free bugs.
 +	  This is strictly a debugging feature and it requires a gcc version
 +	  of 4.9.2 or later. Detection of out of bounds accesses to stack or
 +	  global variables requires gcc 5.0 or later.
 +	  This feature consumes about 1/8 of available memory and brings about
 +	  ~x3 performance slowdown.
  	  For better error detection enable CONFIG_STACKTRACE.
 -	  Currently CONFIG_KASAN_GENERIC doesn't work with CONFIG_DEBUG_SLAB
 +	  Currently CONFIG_KASAN doesn't work with CONFIG_DEBUG_SLAB
  	  (the resulting kernel does not boot).
  
 -config KASAN_SW_TAGS
 -	bool "Software tag-based mode"
 -	depends on HAVE_ARCH_KASAN_SW_TAGS && CC_HAS_KASAN_SW_TAGS
 -	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
 -	select SLUB_DEBUG if SLUB
 -	select CONSTRUCTORS
 -	select STACKDEPOT
 +config KASAN_EXTRA
 +	bool "KAsan: extra checks"
 +	depends on KASAN && DEBUG_KERNEL && !COMPILE_TEST
  	help
 -	  Enables software tag-based KASAN mode.
 -	  This mode requires Top Byte Ignore support by the CPU and therefore
 -	  is only supported for arm64.
 -	  This mode requires Clang version 7.0.0 or later.
 -	  This mode consumes about 1/16th of available memory at kernel start
 -	  and introduces an overhead of ~20% for the rest of the allocations.
 -	  This mode may potentially introduce problems relating to pointer
 -	  casting and comparison, as it embeds tags into the top byte of each
 -	  pointer.
 -	  For better error detection enable CONFIG_STACKTRACE.
 -	  Currently CONFIG_KASAN_SW_TAGS doesn't work with CONFIG_DEBUG_SLAB
 -	  (the resulting kernel does not boot).
 +	  This enables further checks in the kernel address sanitizer, for now
 +	  it only includes the address-use-after-scope check that can lead
 +	  to excessive kernel stack usage, frame size warnings and longer
 +	  compile time.
 +	  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 has more
  
 -endchoice
  
  choice
  	prompt "Instrumentation type"
* Unmerged path lib/Kconfig.kasan
