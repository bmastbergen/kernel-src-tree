usb: typec: mux: Allow the muxes to be named

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit ef441dd6af91e1f4265e890021ac3ad631b2b10e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ef441dd6.failed

The mux devices have been named by using the name of the
parent device as base until now, but if for example the
parent device has multiple muxes that will not work. This
makes it possible to supply the name for a mux during
registration.

	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Link: https://lore.kernel.org/r/20200302135353.56659-2-heikki.krogerus@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit ef441dd6af91e1f4265e890021ac3ad631b2b10e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/mux.c
#	include/linux/usb/typec_mux.h
diff --cc drivers/usb/typec/mux.c
index 405d14dbac99,2a073614172a..000000000000
--- a/drivers/usb/typec/mux.c
+++ b/drivers/usb/typec/mux.c
@@@ -96,13 -105,39 +96,42 @@@ EXPORT_SYMBOL_GPL(typec_switch_put)
   * connector to the USB controllers. USB Type-C plugs can be inserted
   * right-side-up or upside-down.
   */
 -struct typec_switch *
 -typec_switch_register(struct device *parent,
 -		      const struct typec_switch_desc *desc)
 +int typec_switch_register(struct typec_switch *sw)
  {
 -	struct typec_switch *sw;
 -	int ret;
 +	mutex_lock(&switch_lock);
 +	list_add_tail(&sw->entry, &switch_list);
 +	mutex_unlock(&switch_lock);
  
++<<<<<<< HEAD
 +	return 0;
++=======
+ 	if (!desc || !desc->set)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	sw = kzalloc(sizeof(*sw), GFP_KERNEL);
+ 	if (!sw)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	sw->set = desc->set;
+ 
+ 	device_initialize(&sw->dev);
+ 	sw->dev.parent = parent;
+ 	sw->dev.fwnode = desc->fwnode;
+ 	sw->dev.class = &typec_mux_class;
+ 	sw->dev.type = &typec_switch_dev_type;
+ 	sw->dev.driver_data = desc->drvdata;
+ 	dev_set_name(&sw->dev, "%s-switch",
+ 		     desc->name ? desc->name : dev_name(parent));
+ 
+ 	ret = device_add(&sw->dev);
+ 	if (ret) {
+ 		dev_err(parent, "failed to register switch (%d)\n", ret);
+ 		put_device(&sw->dev);
+ 		return ERR_PTR(ret);
+ 	}
+ 
+ 	return sw;
++>>>>>>> ef441dd6af91 (usb: typec: mux: Allow the muxes to be named)
  }
  EXPORT_SYMBOL_GPL(typec_switch_register);
  
@@@ -239,13 -289,38 +268,42 @@@ EXPORT_SYMBOL_GPL(typec_mux_put)
   * the pins on the connector need to be reconfigured. This function registers
   * multiplexer switches routing the pins on the connector.
   */
 -struct typec_mux *
 -typec_mux_register(struct device *parent, const struct typec_mux_desc *desc)
 +int typec_mux_register(struct typec_mux *mux)
  {
 -	struct typec_mux *mux;
 -	int ret;
 +	mutex_lock(&mux_lock);
 +	list_add_tail(&mux->entry, &mux_list);
 +	mutex_unlock(&mux_lock);
  
++<<<<<<< HEAD
 +	return 0;
++=======
+ 	if (!desc || !desc->set)
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	mux = kzalloc(sizeof(*mux), GFP_KERNEL);
+ 	if (!mux)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	mux->set = desc->set;
+ 
+ 	device_initialize(&mux->dev);
+ 	mux->dev.parent = parent;
+ 	mux->dev.fwnode = desc->fwnode;
+ 	mux->dev.class = &typec_mux_class;
+ 	mux->dev.type = &typec_mux_dev_type;
+ 	mux->dev.driver_data = desc->drvdata;
+ 	dev_set_name(&mux->dev, "%s-mux",
+ 		     desc->name ? desc->name : dev_name(parent));
+ 
+ 	ret = device_add(&mux->dev);
+ 	if (ret) {
+ 		dev_err(parent, "failed to register mux (%d)\n", ret);
+ 		put_device(&mux->dev);
+ 		return ERR_PTR(ret);
+ 	}
+ 
+ 	return mux;
++>>>>>>> ef441dd6af91 (usb: typec: mux: Allow the muxes to be named)
  }
  EXPORT_SYMBOL_GPL(typec_mux_register);
  
diff --cc include/linux/usb/typec_mux.h
index 43f40685e53c,47ab5a828b07..000000000000
--- a/include/linux/usb/typec_mux.h
+++ b/include/linux/usb/typec_mux.h
@@@ -7,46 -6,47 +7,76 @@@
  #include <linux/usb/typec.h>
  
  struct device;
 -struct typec_mux;
 -struct typec_switch;
 -struct typec_altmode;
 -struct fwnode_handle;
  
 -typedef int (*typec_switch_set_fn_t)(struct typec_switch *sw,
 -				     enum typec_orientation orientation);
 +/**
 + * struct typec_switch - USB Type-C cable orientation switch
 + * @dev: Switch device
 + * @entry: List entry
 + * @set: Callback to the driver for setting the orientation
 + *
 + * USB Type-C pin flipper switch routing the correct data pairs from the
 + * connector to the USB controller depending on the orientation of the cable
 + * plug.
 + */
 +struct typec_switch {
 +	struct device *dev;
 +	struct list_head entry;
  
++<<<<<<< HEAD
 +	int (*set)(struct typec_switch *sw, enum typec_orientation orientation);
 +};
 +
 +/**
 + * struct typec_switch - USB Type-C connector pin mux
 + * @dev: Mux device
 + * @entry: List entry
 + * @set: Callback to the driver for setting the state of the mux
 + *
 + * Pin Multiplexer/DeMultiplexer switch routing the USB Type-C connector pins to
 + * different components depending on the requested mode of operation. Used with
 + * Accessory/Alternate modes.
 + */
 +struct typec_mux {
 +	struct device *dev;
 +	struct list_head entry;
 +
 +	int (*set)(struct typec_mux *mux, int state);
++=======
+ struct typec_switch_desc {
+ 	struct fwnode_handle *fwnode;
+ 	typec_switch_set_fn_t set;
+ 	const char *name;
+ 	void *drvdata;
++>>>>>>> ef441dd6af91 (usb: typec: mux: Allow the muxes to be named)
  };
  
  struct typec_switch *typec_switch_get(struct device *dev);
  void typec_switch_put(struct typec_switch *sw);
 -struct typec_switch *
 -typec_switch_register(struct device *parent,
 -		      const struct typec_switch_desc *desc);
 +int typec_switch_register(struct typec_switch *sw);
  void typec_switch_unregister(struct typec_switch *sw);
  
++<<<<<<< HEAD
++=======
+ void typec_switch_set_drvdata(struct typec_switch *sw, void *data);
+ void *typec_switch_get_drvdata(struct typec_switch *sw);
+ 
+ struct typec_mux_state {
+ 	struct typec_altmode *alt;
+ 	unsigned long mode;
+ 	void *data;
+ };
+ 
+ typedef int (*typec_mux_set_fn_t)(struct typec_mux *mux,
+ 				  struct typec_mux_state *state);
+ 
+ struct typec_mux_desc {
+ 	struct fwnode_handle *fwnode;
+ 	typec_mux_set_fn_t set;
+ 	const char *name;
+ 	void *drvdata;
+ };
+ 
++>>>>>>> ef441dd6af91 (usb: typec: mux: Allow the muxes to be named)
  struct typec_mux *
  typec_mux_get(struct device *dev, const struct typec_altmode_desc *desc);
  void typec_mux_put(struct typec_mux *mux);
* Unmerged path drivers/usb/typec/mux.c
* Unmerged path include/linux/usb/typec_mux.h
