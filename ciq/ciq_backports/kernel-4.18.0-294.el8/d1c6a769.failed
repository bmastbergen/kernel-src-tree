usb: typec: mux: Allow the mux handles to be requested with fwnode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit d1c6a769cdf466053ae211789f2b0671c8a72331
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d1c6a769.failed

Introducing fwnode_typec_switch_get() and
fwnode_typec_mux_get() functions that work just like
typec_switch_get() and typec_mux_get() but they take struct
fwnode_handle as the first parameter instead of struct
device.

	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Link: https://lore.kernel.org/r/20200302135353.56659-4-heikki.krogerus@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit d1c6a769cdf466053ae211789f2b0671c8a72331)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/mux.c
#	include/linux/usb/typec_mux.h
diff --cc drivers/usb/typec/mux.c
index 405d14dbac99,52ad277e4565..000000000000
--- a/drivers/usb/typec/mux.c
+++ b/drivers/usb/typec/mux.c
@@@ -59,14 -61,10 +59,18 @@@ struct typec_switch *fwnode_typec_switc
  {
  	struct typec_switch *sw;
  
++<<<<<<< HEAD
 +	mutex_lock(&switch_lock);
 +	sw = device_connection_find_match(dev, "orientation-switch", NULL,
++=======
+ 	sw = fwnode_connection_find_match(fwnode, "orientation-switch", NULL,
++>>>>>>> d1c6a769cdf4 (usb: typec: mux: Allow the mux handles to be requested with fwnode)
  					  typec_switch_match);
 -	if (!IS_ERR_OR_NULL(sw))
 -		WARN_ON(!try_module_get(sw->dev.parent->driver->owner));
 +	if (!IS_ERR_OR_NULL(sw)) {
 +		WARN_ON(!try_module_get(sw->dev->driver->owner));
 +		get_device(sw->dev);
 +	}
 +	mutex_unlock(&switch_lock);
  
  	return sw;
  }
@@@ -202,14 -255,10 +206,18 @@@ struct typec_mux *fwnode_typec_mux_get(
  {
  	struct typec_mux *mux;
  
++<<<<<<< HEAD
 +	mutex_lock(&mux_lock);
 +	mux = device_connection_find_match(dev, "mode-switch", (void *)desc,
++=======
+ 	mux = fwnode_connection_find_match(fwnode, "mode-switch", (void *)desc,
++>>>>>>> d1c6a769cdf4 (usb: typec: mux: Allow the mux handles to be requested with fwnode)
  					   typec_mux_match);
 -	if (!IS_ERR_OR_NULL(mux))
 -		WARN_ON(!try_module_get(mux->dev.parent->driver->owner));
 +	if (!IS_ERR_OR_NULL(mux)) {
 +		WARN_ON(!try_module_get(mux->dev->driver->owner));
 +		get_device(mux->dev);
 +	}
 +	mutex_unlock(&mux_lock);
  
  	return mux;
  }
diff --cc include/linux/usb/typec_mux.h
index 43f40685e53c,a9d9957933dc..000000000000
--- a/include/linux/usb/typec_mux.h
+++ b/include/linux/usb/typec_mux.h
@@@ -3,54 -3,75 +3,106 @@@
  #ifndef __USB_TYPEC_MUX
  #define __USB_TYPEC_MUX
  
++<<<<<<< HEAD
 +#include <linux/list.h>
++=======
+ #include <linux/property.h>
++>>>>>>> d1c6a769cdf4 (usb: typec: mux: Allow the mux handles to be requested with fwnode)
  #include <linux/usb/typec.h>
  
  struct device;
 -struct typec_mux;
 -struct typec_switch;
 -struct typec_altmode;
 -struct fwnode_handle;
  
 -typedef int (*typec_switch_set_fn_t)(struct typec_switch *sw,
 -				     enum typec_orientation orientation);
 +/**
 + * struct typec_switch - USB Type-C cable orientation switch
 + * @dev: Switch device
 + * @entry: List entry
 + * @set: Callback to the driver for setting the orientation
 + *
 + * USB Type-C pin flipper switch routing the correct data pairs from the
 + * connector to the USB controller depending on the orientation of the cable
 + * plug.
 + */
 +struct typec_switch {
 +	struct device *dev;
 +	struct list_head entry;
 +
 +	int (*set)(struct typec_switch *sw, enum typec_orientation orientation);
 +};
  
 -struct typec_switch_desc {
 -	struct fwnode_handle *fwnode;
 -	typec_switch_set_fn_t set;
 -	const char *name;
 -	void *drvdata;
 +/**
 + * struct typec_switch - USB Type-C connector pin mux
 + * @dev: Mux device
 + * @entry: List entry
 + * @set: Callback to the driver for setting the state of the mux
 + *
 + * Pin Multiplexer/DeMultiplexer switch routing the USB Type-C connector pins to
 + * different components depending on the requested mode of operation. Used with
 + * Accessory/Alternate modes.
 + */
 +struct typec_mux {
 +	struct device *dev;
 +	struct list_head entry;
 +
 +	int (*set)(struct typec_mux *mux, int state);
  };
  
- struct typec_switch *typec_switch_get(struct device *dev);
+ struct typec_switch *fwnode_typec_switch_get(struct fwnode_handle *fwnode);
  void typec_switch_put(struct typec_switch *sw);
++<<<<<<< HEAD
 +int typec_switch_register(struct typec_switch *sw);
 +void typec_switch_unregister(struct typec_switch *sw);
 +
 +struct typec_mux *
 +typec_mux_get(struct device *dev, const struct typec_altmode_desc *desc);
 +void typec_mux_put(struct typec_mux *mux);
 +int typec_mux_register(struct typec_mux *mux);
++=======
+ int typec_switch_set(struct typec_switch *sw,
+ 		     enum typec_orientation orientation);
+ 
+ static inline struct typec_switch *typec_switch_get(struct device *dev)
+ {
+ 	return fwnode_typec_switch_get(dev_fwnode(dev));
+ }
+ 
+ struct typec_switch *
+ typec_switch_register(struct device *parent,
+ 		      const struct typec_switch_desc *desc);
+ void typec_switch_unregister(struct typec_switch *sw);
+ 
+ void typec_switch_set_drvdata(struct typec_switch *sw, void *data);
+ void *typec_switch_get_drvdata(struct typec_switch *sw);
+ 
+ struct typec_mux_state {
+ 	struct typec_altmode *alt;
+ 	unsigned long mode;
+ 	void *data;
+ };
+ 
+ typedef int (*typec_mux_set_fn_t)(struct typec_mux *mux,
+ 				  struct typec_mux_state *state);
+ 
+ struct typec_mux_desc {
+ 	struct fwnode_handle *fwnode;
+ 	typec_mux_set_fn_t set;
+ 	const char *name;
+ 	void *drvdata;
+ };
+ 
+ struct typec_mux *fwnode_typec_mux_get(struct fwnode_handle *fwnode,
+ 				       const struct typec_altmode_desc *desc);
+ void typec_mux_put(struct typec_mux *mux);
+ int typec_mux_set(struct typec_mux *mux, struct typec_mux_state *state);
+ 
+ static inline struct typec_mux *
+ typec_mux_get(struct device *dev, const struct typec_altmode_desc *desc)
+ {
+ 	return fwnode_typec_mux_get(dev_fwnode(dev), desc);
+ }
+ 
+ struct typec_mux *
+ typec_mux_register(struct device *parent, const struct typec_mux_desc *desc);
++>>>>>>> d1c6a769cdf4 (usb: typec: mux: Allow the mux handles to be requested with fwnode)
  void typec_mux_unregister(struct typec_mux *mux);
  
 -void typec_mux_set_drvdata(struct typec_mux *mux, void *data);
 -void *typec_mux_get_drvdata(struct typec_mux *mux);
 -
  #endif /* __USB_TYPEC_MUX */
* Unmerged path drivers/usb/typec/mux.c
* Unmerged path include/linux/usb/typec_mux.h
