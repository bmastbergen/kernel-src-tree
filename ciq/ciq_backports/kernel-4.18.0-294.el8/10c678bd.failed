udp: fix the proto value passed to ip_protocol_deliver_rcu for the segments

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Xin Long <lucien.xin@gmail.com>
commit 10c678bd0a035ac2c64a9b26b222f20556227a53
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/10c678bd.failed

Guillaume noticed that: for segments udp_queue_rcv_one_skb() returns the
proto, and it should pass "ret" unmodified to ip_protocol_deliver_rcu().
Otherwize, with a negtive value passed, it will underflow inet_protos.

This can be reproduced with IPIP FOU:

  # ip fou add port 5555 ipproto 4
  # ethtool -K eth1 rx-gro-list on

Fixes: cf329aa42b66 ("udp: cope with UDP GRO packet misdirection")
	Reported-by: Guillaume Nault <gnault@redhat.com>
	Signed-off-by: Xin Long <lucien.xin@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 10c678bd0a035ac2c64a9b26b222f20556227a53)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/udp.c
diff --cc net/ipv4/udp.c
index b179b91fe862,9eeebd4a0054..000000000000
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@@ -2083,6 -2158,26 +2083,29 @@@ drop
  	return -1;
  }
  
++<<<<<<< HEAD
++=======
+ static int udp_queue_rcv_skb(struct sock *sk, struct sk_buff *skb)
+ {
+ 	struct sk_buff *next, *segs;
+ 	int ret;
+ 
+ 	if (likely(!udp_unexpected_gso(sk, skb)))
+ 		return udp_queue_rcv_one_skb(sk, skb);
+ 
+ 	BUILD_BUG_ON(sizeof(struct udp_skb_cb) > SKB_GSO_CB_OFFSET);
+ 	__skb_push(skb, -skb_mac_offset(skb));
+ 	segs = udp_rcv_segment(sk, skb, true);
+ 	skb_list_walk_safe(segs, skb, next) {
+ 		__skb_pull(skb, skb_transport_offset(skb));
+ 		ret = udp_queue_rcv_one_skb(sk, skb);
+ 		if (ret > 0)
+ 			ip_protocol_deliver_rcu(dev_net(skb->dev), skb, ret);
+ 	}
+ 	return 0;
+ }
+ 
++>>>>>>> 10c678bd0a03 (udp: fix the proto value passed to ip_protocol_deliver_rcu for the segments)
  /* For TCP sockets, sk_rx_dst is protected by socket lock
   * For UDP, we use xchg() to guard against concurrent changes.
   */
* Unmerged path net/ipv4/udp.c
