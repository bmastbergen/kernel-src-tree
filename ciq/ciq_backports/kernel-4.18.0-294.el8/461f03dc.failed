virtio_net: Add kick stats

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
commit 461f03dc99cf6afcc3c70aaac56c4a7eee5a62bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/461f03dc.failed

So we can infer the number of VM-Exits.

	Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 461f03dc99cf6afcc3c70aaac56c4a7eee5a62bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/virtio_net.c
diff --cc drivers/net/virtio_net.c
index bb87a9822737,1880c86e84b4..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -85,12 -82,20 +85,26 @@@ struct virtnet_sq_stats 
  	struct u64_stats_sync syncp;
  	u64 packets;
  	u64 bytes;
++<<<<<<< HEAD
++=======
+ 	u64 xdp_tx;
+ 	u64 xdp_tx_drops;
+ 	u64 kicks;
++>>>>>>> 461f03dc99cf (virtio_net: Add kick stats)
  };
  
  struct virtnet_rq_stat_items {
  	u64 packets;
  	u64 bytes;
  	u64 drops;
++<<<<<<< HEAD
++=======
+ 	u64 xdp_packets;
+ 	u64 xdp_tx;
+ 	u64 xdp_redirects;
+ 	u64 xdp_drops;
+ 	u64 kicks;
++>>>>>>> 461f03dc99cf (virtio_net: Add kick stats)
  };
  
  struct virtnet_rq_stats {
@@@ -106,14 -115,22 +120,33 @@@ struct virtnet_rx_stats 
  #define VIRTNET_RQ_STAT(m)	offsetof(struct virtnet_rq_stat_items, m)
  
  static const struct virtnet_stat_desc virtnet_sq_stats_desc[] = {
++<<<<<<< HEAD
 +	{ "packets",	VIRTNET_SQ_STAT(packets) },
 +	{ "bytes",	VIRTNET_SQ_STAT(bytes) },
 +};
 +
 +static const struct virtnet_stat_desc virtnet_rq_stats_desc[] = {
 +	{ "packets",	VIRTNET_RQ_STAT(packets) },
 +	{ "bytes",	VIRTNET_RQ_STAT(bytes) },
 +	{ "drops",	VIRTNET_RQ_STAT(drops) },
++=======
+ 	{ "packets",		VIRTNET_SQ_STAT(packets) },
+ 	{ "bytes",		VIRTNET_SQ_STAT(bytes) },
+ 	{ "xdp_tx",		VIRTNET_SQ_STAT(xdp_tx) },
+ 	{ "xdp_tx_drops",	VIRTNET_SQ_STAT(xdp_tx_drops) },
+ 	{ "kicks",		VIRTNET_SQ_STAT(kicks) },
+ };
+ 
+ static const struct virtnet_stat_desc virtnet_rq_stats_desc[] = {
+ 	{ "packets",		VIRTNET_RQ_STAT(packets) },
+ 	{ "bytes",		VIRTNET_RQ_STAT(bytes) },
+ 	{ "drops",		VIRTNET_RQ_STAT(drops) },
+ 	{ "xdp_packets",	VIRTNET_RQ_STAT(xdp_packets) },
+ 	{ "xdp_tx",		VIRTNET_RQ_STAT(xdp_tx) },
+ 	{ "xdp_redirects",	VIRTNET_RQ_STAT(xdp_redirects) },
+ 	{ "xdp_drops",		VIRTNET_RQ_STAT(xdp_drops) },
+ 	{ "kicks",		VIRTNET_RQ_STAT(kicks) },
++>>>>>>> 461f03dc99cf (virtio_net: Add kick stats)
  };
  
  #define VIRTNET_SQ_STATS_LEN	ARRAY_SIZE(virtnet_sq_stats_desc)
@@@ -509,14 -511,17 +542,19 @@@ static int virtnet_xdp_xmit(struct net_
  	struct send_queue *sq;
  	unsigned int len;
  	int drops = 0;
++<<<<<<< HEAD
 +	int err;
 +	void *ptr;
++=======
+ 	int kicks = 0;
+ 	int ret, err;
++>>>>>>> 461f03dc99cf (virtio_net: Add kick stats)
  	int i;
  
 -	sq = virtnet_xdp_sq(vi);
 +	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK))
 +		return -EINVAL;
  
 -	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK)) {
 -		ret = -EINVAL;
 -		drops = n;
 -		goto out;
 -	}
 +	sq = virtnet_xdp_sq(vi);
  
  	/* Only allow ndo_xdp_xmit if XDP is loaded on dev, as this
  	 * indicate XDP resources have been successfully allocated.
@@@ -542,11 -546,20 +580,24 @@@
  			drops++;
  		}
  	}
 -	ret = n - drops;
  
++<<<<<<< HEAD
 +	if (flags & XDP_XMIT_FLUSH)
 +		virtqueue_kick(sq->vq);
++=======
+ 	if (flags & XDP_XMIT_FLUSH) {
+ 		if (virtqueue_kick_prepare(sq->vq) && virtqueue_notify(sq->vq))
+ 			kicks = 1;
+ 	}
+ out:
+ 	u64_stats_update_begin(&sq->stats.syncp);
+ 	sq->stats.xdp_tx += n;
+ 	sq->stats.xdp_tx_drops += drops;
+ 	sq->stats.kicks += kicks;
+ 	u64_stats_update_end(&sq->stats.syncp);
++>>>>>>> 461f03dc99cf (virtio_net: Add kick stats)
  
 -	return ret;
 +	return n - drops;
  }
  
  static unsigned int virtnet_get_headroom(struct virtnet_info *vi)
* Unmerged path drivers/net/virtio_net.c
