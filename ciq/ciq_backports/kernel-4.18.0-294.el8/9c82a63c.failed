libbpf: Fix CO-RE relocs against .text section

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 9c82a63cf3701b78cd092c69c3e75ff806837194
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9c82a63c.failed

bpf_object__find_program_by_title(), used by CO-RE relocation code, doesn't
return .text "BPF program", if it is a function storage for sub-programs.
Because of that, any CO-RE relocation in helper non-inlined functions will
fail. Fix this by searching for .text-corresponding BPF program manually.

Adjust one of bpf_iter selftest to exhibit this pattern.

Fixes: ddc7c3042614 ("libbpf: implement BPF CO-RE offset relocation algorithm")
	Reported-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20200619230423.691274-1-andriin@fb.com
(cherry picked from commit 9c82a63cf3701b78cd092c69c3e75ff806837194)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
diff --cc tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
index fda5036fdf75,75ecf956a2df..000000000000
--- a/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
+++ b/tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
@@@ -9,7 -14,18 +9,22 @@@ char _license[] SEC("license") = "GPL"
  #define sk_rmem_alloc	sk_backlog.rmem_alloc
  #define sk_refcnt	__sk_common.skc_refcnt
  
++<<<<<<< HEAD
 +static inline struct inode *SOCK_INODE(struct socket *socket)
++=======
+ struct bpf_iter_meta {
+ 	struct seq_file *seq;
+ 	__u64 session_id;
+ 	__u64 seq_num;
+ } __attribute__((preserve_access_index));
+ 
+ struct bpf_iter__netlink {
+ 	struct bpf_iter_meta *meta;
+ 	struct netlink_sock *sk;
+ } __attribute__((preserve_access_index));
+ 
+ static __attribute__((noinline)) struct inode *SOCK_INODE(struct socket *socket)
++>>>>>>> 9c82a63cf370 (libbpf: Fix CO-RE relocs against .text section)
  {
  	return &container_of(socket, struct socket_alloc, socket)->vfs_inode;
  }
diff --git a/tools/lib/bpf/libbpf.c b/tools/lib/bpf/libbpf.c
index 4ef192460aad..5d2738e5b00b 100644
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@ -4818,7 +4818,13 @@ bpf_core_reloc_fields(struct bpf_object *obj, const char *targ_btf_path)
 			err = -EINVAL;
 			goto out;
 		}
-		prog = bpf_object__find_program_by_title(obj, sec_name);
+		prog = NULL;
+		for (i = 0; i < obj->nr_programs; i++) {
+			if (!strcmp(obj->programs[i].section_name, sec_name)) {
+				prog = &obj->programs[i];
+				break;
+			}
+		}
 		if (!prog) {
 			pr_warn("failed to find program '%s' for CO-RE offset relocation\n",
 				sec_name);
* Unmerged path tools/testing/selftests/bpf/progs/bpf_iter_netlink.c
