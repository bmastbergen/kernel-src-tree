nvme: introduce NVME_NS_METADATA_SUPPORTED flag

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Max Gurtovoy <maxg@mellanox.com>
commit b29f84857a0f1cb4355363d0307d2b83897e8955
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b29f8485.failed

This is a preparation for adding support for metadata in fabric
controllers. New flag will imply that NVMe namespace supports getting
metadata that was originally generated by host's block layer.

	Signed-off-by: Max Gurtovoy <maxg@mellanox.com>
	Reviewed-by: Israel Rukshin <israelr@mellanox.com>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Reviewed-by: James Smart <james.smart@broadcom.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit b29f84857a0f1cb4355363d0307d2b83897e8955)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
#	drivers/nvme/host/nvme.h
diff --cc drivers/nvme/host/core.c
index ce3f74d6d89f,aa168dd58f31..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1932,13 -1885,27 +1932,35 @@@ static void nvme_update_disk_info(struc
  	blk_queue_io_min(disk->queue, phys_bs);
  	blk_queue_io_opt(disk->queue, io_opt);
  
++<<<<<<< HEAD
 +	if (ns->ms && !ns->ext &&
 +	    (ns->ctrl->ops->flags & NVME_F_METADATA_SUPPORTED))
 +		nvme_init_integrity(disk, ns->ms, ns->pi_type);
 +	if ((ns->ms && !nvme_ns_has_pi(ns) && !blk_get_integrity(disk)) ||
 +	    ns->lba_shift > PAGE_SHIFT)
++=======
+ 	/*
+ 	 * The block layer can't support LBA sizes larger than the page size
+ 	 * yet, so catch this early and don't allow block I/O.
+ 	 */
+ 	if (ns->lba_shift > PAGE_SHIFT)
++>>>>>>> b29f84857a0f (nvme: introduce NVME_NS_METADATA_SUPPORTED flag)
  		capacity = 0;
  
+ 	/*
+ 	 * Register a metadata profile for PI, or the plain non-integrity NVMe
+ 	 * metadata masquerading as Type 0 if supported, otherwise reject block
+ 	 * I/O to namespaces with metadata except when the namespace supports
+ 	 * PI, as it can strip/insert in that case.
+ 	 */
+ 	if (ns->ms) {
+ 		if (IS_ENABLED(CONFIG_BLK_DEV_INTEGRITY) &&
+ 		    (ns->features & NVME_NS_METADATA_SUPPORTED))
+ 			nvme_init_integrity(disk, ns->ms, ns->pi_type);
+ 		else if (!nvme_ns_has_pi(ns))
+ 			capacity = 0;
+ 	}
+ 
  	set_capacity_revalidate_and_notify(disk, capacity, false);
  
  	nvme_config_discard(disk, ns);
@@@ -1971,8 -1938,8 +1993,11 @@@ static void __nvme_revalidate_disk(stru
  	else
  		iob = nvme_lba_to_sect(ns, le16_to_cpu(id->noiob));
  
 -	ns->features = 0;
  	ns->ms = le16_to_cpu(id->lbaf[id->flbas & NVME_NS_FLBAS_LBA_MASK].ms);
++<<<<<<< HEAD
 +	ns->ext = ns->ms && (id->flbas & NVME_NS_FLBAS_META_EXT);
++=======
++>>>>>>> b29f84857a0f (nvme: introduce NVME_NS_METADATA_SUPPORTED flag)
  	/* the PI implementation requires metadata equal t10 pi tuple size */
  	if (ns->ms == sizeof(struct t10_pi_tuple))
  		ns->pi_type = id->dps & NVME_NS_DPS_PI_MASK;
diff --cc drivers/nvme/host/nvme.h
index 74fc5994de0f,9ed6a3dac537..000000000000
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@@ -375,6 -364,11 +375,14 @@@ struct nvme_ns_head 
  #endif
  };
  
++<<<<<<< HEAD
++=======
+ enum nvme_ns_features {
+ 	NVME_NS_EXT_LBAS = 1 << 0, /* support extended LBA format */
+ 	NVME_NS_METADATA_SUPPORTED = 1 << 1, /* support getting generated md */
+ };
+ 
++>>>>>>> b29f84857a0f (nvme: introduce NVME_NS_METADATA_SUPPORTED flag)
  struct nvme_ns {
  	struct list_head list;
  
* Unmerged path drivers/nvme/host/core.c
* Unmerged path drivers/nvme/host/nvme.h
