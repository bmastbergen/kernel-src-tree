intel_idle: Move and clean up intel_idle_cpuidle_devices_uninit()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 0755a9bd9963ec3d611129cf2cdbb3e041ccbd6a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0755a9bd.failed

Move intel_idle_cpuidle_devices_uninit() closer to its caller,
intel_idle_init(), add the __init modifier to its header, drop a
redundant local variable from it and fix up its kerneldoc comment.

No intentional functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 0755a9bd9963ec3d611129cf2cdbb3e041ccbd6a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/idle/intel_idle.c
diff --cc drivers/idle/intel_idle.c
index ea562fdda44c,9841046dfd32..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -1315,73 -1297,6 +1315,76 @@@ static inline bool intel_idle_off_by_de
  #endif /* !CONFIG_ACPI_PROCESSOR_CSTATE */
  
  /*
++<<<<<<< HEAD
 + * intel_idle_probe()
 + */
 +static int __init intel_idle_probe(void)
 +{
 +	unsigned int eax, ebx, ecx;
 +	const struct x86_cpu_id *id;
 +
 +	if (max_cstate == 0) {
 +		pr_debug("disabled\n");
 +		return -EPERM;
 +	}
 +
 +	id = x86_match_cpu(intel_idle_ids);
 +	if (id) {
 +		if (!boot_cpu_has(X86_FEATURE_MWAIT)) {
 +			pr_debug("Please enable MWAIT in BIOS SETUP\n");
 +			return -ENODEV;
 +		}
 +	} else {
 +		id = x86_match_cpu(intel_mwait_ids);
 +		if (!id)
 +			return -ENODEV;
 +	}
 +
 +	if (boot_cpu_data.cpuid_level < CPUID_MWAIT_LEAF)
 +		return -ENODEV;
 +
 +	cpuid(CPUID_MWAIT_LEAF, &eax, &ebx, &ecx, &mwait_substates);
 +
 +	if (!(ecx & CPUID5_ECX_EXTENSIONS_SUPPORTED) ||
 +	    !(ecx & CPUID5_ECX_INTERRUPT_BREAK) ||
 +	    !mwait_substates)
 +			return -ENODEV;
 +
 +	pr_debug("MWAIT substates: 0x%x\n", mwait_substates);
 +
 +	icpu = (const struct idle_cpu *)id->driver_data;
 +	if (icpu) {
 +		cpuidle_state_table = icpu->state_table;
 +		if (icpu->use_acpi && force_use_acpi)
 +			intel_idle_acpi_cst_extract();
 +	} else if (!intel_idle_acpi_cst_extract()) {
 +		return -ENODEV;
 +	}
 +
 +	pr_debug("v" INTEL_IDLE_VERSION " model 0x%X\n",
 +		 boot_cpu_data.x86_model);
 +
 +	return 0;
 +}
 +
 +/*
 + * intel_idle_cpuidle_devices_uninit()
 + * Unregisters the cpuidle devices.
 + */
 +static void intel_idle_cpuidle_devices_uninit(void)
 +{
 +	int i;
 +	struct cpuidle_device *dev;
 +
 +	for_each_online_cpu(i) {
 +		dev = per_cpu_ptr(intel_idle_cpuidle_devices, i);
 +		cpuidle_unregister_device(dev);
 +	}
 +}
 +
 +/*
++=======
++>>>>>>> 0755a9bd9963 (intel_idle: Move and clean up intel_idle_cpuidle_devices_uninit())
   * ivt_idle_state_table_update(void)
   *
   * Tune IVT multi-socket targets
@@@ -1636,8 -1550,21 +1639,19 @@@ static int intel_idle_cpu_online(unsign
  	return 0;
  }
  
+ /**
+  * intel_idle_cpuidle_devices_uninit - Unregister all cpuidle devices.
+  */
+ static void __init intel_idle_cpuidle_devices_uninit(void)
+ {
+ 	int i;
+ 
+ 	for_each_online_cpu(i)
+ 		cpuidle_unregister_device(per_cpu_ptr(intel_idle_cpuidle_devices, i));
+ }
+ 
  static int __init intel_idle_init(void)
  {
 -	const struct x86_cpu_id *id;
 -	unsigned int eax, ebx, ecx;
  	int retval;
  
  	/* Do not load intel_idle at all for now if idle= is passed */
* Unmerged path drivers/idle/intel_idle.c
