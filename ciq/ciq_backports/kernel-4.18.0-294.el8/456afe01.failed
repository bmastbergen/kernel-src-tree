mptcp: ADD_ADDRs with echo bit are smaller

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Matthieu Baerts <matthieu.baerts@tessares.net>
commit 456afe01b10085518406022c69cfd2b718d6eaf8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/456afe01.failed

The MPTCP ADD_ADDR suboption with echo-flag=1 has no HMAC, the size is
smaller than the one initially sent without echo-flag=1. We then need to
use the correct size everywhere when we need this echo bit.

Before this patch, the wrong size was reserved but the correct amount of
bytes were written (and read): the remaining bytes contained garbage.

Fixes: 6a6c05a8b016 ("mptcp: send out ADD_ADDR with echo flag")
Closes: https://github.com/multipath-tcp/mptcp_net-next/issues/95
Reported-and-tested-by: Davide Caratti <dcaratti@redhat.com>
	Acked-by: Geliang Tang <geliangtang@gmail.com>
	Signed-off-by: Matthieu Baerts <matthieu.baerts@tessares.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 456afe01b10085518406022c69cfd2b718d6eaf8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/protocol.h
diff --cc net/mptcp/protocol.h
index 2a96091945d4,6eef4db9ee5c..000000000000
--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@@ -429,11 -459,17 +429,21 @@@ static inline bool mptcp_pm_should_add_
  	return READ_ONCE(msk->pm.add_addr_signal);
  }
  
++<<<<<<< HEAD
 +static inline unsigned int mptcp_add_addr_len(int family)
++=======
+ static inline bool mptcp_pm_should_rm_signal(struct mptcp_sock *msk)
+ {
+ 	return READ_ONCE(msk->pm.rm_addr_signal);
+ }
+ 
+ static inline unsigned int mptcp_add_addr_len(int family, bool echo)
++>>>>>>> 456afe01b100 (mptcp: ADD_ADDRs with echo bit are smaller)
  {
  	if (family == AF_INET)
- 		return TCPOLEN_MPTCP_ADD_ADDR;
- 	return TCPOLEN_MPTCP_ADD_ADDR6;
+ 		return echo ? TCPOLEN_MPTCP_ADD_ADDR_BASE
+ 			    : TCPOLEN_MPTCP_ADD_ADDR;
+ 	return echo ? TCPOLEN_MPTCP_ADD_ADDR6_BASE : TCPOLEN_MPTCP_ADD_ADDR6;
  }
  
  bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, unsigned int remaining,
diff --git a/net/mptcp/options.c b/net/mptcp/options.c
index 7b1dabd81ee3..ec69e1345e80 100644
--- a/net/mptcp/options.c
+++ b/net/mptcp/options.c
@@ -586,7 +586,7 @@ static bool mptcp_established_options_add_addr(struct sock *sk,
 	    !(mptcp_pm_add_addr_signal(msk, remaining, &saddr)))
 		return false;
 
-	len = mptcp_add_addr_len(saddr.family);
+	len = mptcp_add_addr_len(saddr.family, echo);
 	if (remaining < len)
 		return false;
 
diff --git a/net/mptcp/pm.c b/net/mptcp/pm.c
index a78fc80f9b51..6e3ffd694824 100644
--- a/net/mptcp/pm.c
+++ b/net/mptcp/pm.c
@@ -166,7 +166,9 @@ bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, unsigned int remaining,
 	if (!mptcp_pm_should_add_signal(msk))
 		goto out_unlock;
 
-	if (remaining < mptcp_add_addr_len(msk->pm.local.family))
+	*echo = READ_ONCE(msk->pm.add_addr_echo);
+
+	if (remaining < mptcp_add_addr_len(msk->pm.local.family, *echo))
 		goto out_unlock;
 
 	*saddr = msk->pm.local;
* Unmerged path net/mptcp/protocol.h
