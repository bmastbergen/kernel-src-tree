bpf: Change func bpf_iter_unreg_target() signature

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Yonghong Song <yhs@fb.com>
commit ab2ee4fcb9d61fd57db70db694adbcf54662bd80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ab2ee4fc.failed

Change func bpf_iter_unreg_target() parameter from target
name to target reg_info, similar to bpf_iter_reg_target().

	Signed-off-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20200513180220.2949737-1-yhs@fb.com
(cherry picked from commit ab2ee4fcb9d61fd57db70db694adbcf54662bd80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
#	kernel/bpf/bpf_iter.c
#	net/ipv6/route.c
diff --cc include/linux/bpf.h
index 531af1e44e56,534174eca86b..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -1158,8 -1147,20 +1158,25 @@@ struct bpf_iter_reg 
  	u32 seq_priv_size;
  };
  
++<<<<<<< HEAD
 +int bpf_iter_reg_target(struct bpf_iter_reg *reg_info);
 +void bpf_iter_unreg_target(const char *target);
++=======
+ struct bpf_iter_meta {
+ 	__bpf_md_ptr(struct seq_file *, seq);
+ 	u64 session_id;
+ 	u64 seq_num;
+ };
+ 
+ int bpf_iter_reg_target(const struct bpf_iter_reg *reg_info);
+ void bpf_iter_unreg_target(const struct bpf_iter_reg *reg_info);
+ bool bpf_iter_prog_supported(struct bpf_prog *prog);
+ int bpf_iter_link_attach(const union bpf_attr *attr, struct bpf_prog *prog);
+ int bpf_iter_new_fd(struct bpf_link *link);
+ bool bpf_link_is_iter(struct bpf_link *link);
+ struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *meta, bool in_stop);
+ int bpf_iter_run_prog(struct bpf_prog *prog, void *ctx);
++>>>>>>> ab2ee4fcb9d6 (bpf: Change func bpf_iter_unreg_target() signature)
  
  int bpf_percpu_hash_copy(struct bpf_map *map, void *key, void *value);
  int bpf_percpu_array_copy(struct bpf_map *map, void *key, void *value);
diff --cc kernel/bpf/bpf_iter.c
index 5a8119d17d14,644f8626b2c0..000000000000
--- a/kernel/bpf/bpf_iter.c
+++ b/kernel/bpf/bpf_iter.c
@@@ -46,7 -264,7 +46,11 @@@ void bpf_iter_unreg_target(const struc
  
  	mutex_lock(&targets_mutex);
  	list_for_each_entry(tinfo, &targets, list) {
++<<<<<<< HEAD
 +		if (!strcmp(target, tinfo->target)) {
++=======
+ 		if (reg_info == tinfo->reg_info) {
++>>>>>>> ab2ee4fcb9d6 (bpf: Change func bpf_iter_unreg_target() signature)
  			list_del(&tinfo->list);
  			kfree(tinfo);
  			found = true;
diff --cc net/ipv6/route.c
index 089b773d7497,22bf4e36c093..000000000000
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@@ -5694,6 -6393,30 +5694,33 @@@ void __init ip6_route_init_special_entr
    #endif
  }
  
++<<<<<<< HEAD
++=======
+ #if IS_BUILTIN(CONFIG_IPV6)
+ #if defined(CONFIG_BPF_SYSCALL) && defined(CONFIG_PROC_FS)
+ DEFINE_BPF_ITER_FUNC(ipv6_route, struct bpf_iter_meta *meta, struct fib6_info *rt)
+ 
+ static const struct bpf_iter_reg ipv6_route_reg_info = {
+ 	.target			= "ipv6_route",
+ 	.seq_ops		= &ipv6_route_seq_ops,
+ 	.init_seq_private	= bpf_iter_init_seq_net,
+ 	.fini_seq_private	= bpf_iter_fini_seq_net,
+ 	.seq_priv_size		= sizeof(struct ipv6_route_iter),
+ };
+ 
+ static int __init bpf_iter_register(void)
+ {
+ 	return bpf_iter_reg_target(&ipv6_route_reg_info);
+ }
+ 
+ static void bpf_iter_unregister(void)
+ {
+ 	bpf_iter_unreg_target(&ipv6_route_reg_info);
+ }
+ #endif
+ #endif
+ 
++>>>>>>> ab2ee4fcb9d6 (bpf: Change func bpf_iter_unreg_target() signature)
  int __init ip6_route_init(void)
  {
  	int ret;
* Unmerged path include/linux/bpf.h
* Unmerged path kernel/bpf/bpf_iter.c
* Unmerged path net/ipv6/route.c
