libbpf: Add low-level APIs for new bpf_link commands

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 0dbc866832a0fbf9f2b98d412da44c5cfd1b7756
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0dbc8668.failed

Add low-level API calls for bpf_link_get_next_id() and
bpf_link_get_fd_by_id().

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200429001614.1544-6-andriin@fb.com
(cherry picked from commit 0dbc866832a0fbf9f2b98d412da44c5cfd1b7756)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/bpf.h
diff --cc tools/lib/bpf/bpf.h
index f8c9bd418cb7,335b457b3a25..000000000000
--- a/tools/lib/bpf/bpf.h
+++ b/tools/lib/bpf/bpf.h
@@@ -216,8 -216,7 +216,12 @@@ LIBBPF_API int bpf_prog_test_run(int pr
  LIBBPF_API int bpf_prog_get_next_id(__u32 start_id, __u32 *next_id);
  LIBBPF_API int bpf_map_get_next_id(__u32 start_id, __u32 *next_id);
  LIBBPF_API int bpf_btf_get_next_id(__u32 start_id, __u32 *next_id);
++<<<<<<< HEAD
 +LIBBPF_API int bpf_btf_get_next_id_v0_0_4(__u32 start_id, __u32 *next_id);
 +LIBBPF_API int bpf_btf_get_next_id_v0_0_5(__u32 start_id, __u32 *next_id);
++=======
+ LIBBPF_API int bpf_link_get_next_id(__u32 start_id, __u32 *next_id);
++>>>>>>> 0dbc866832a0 (libbpf: Add low-level APIs for new bpf_link commands)
  LIBBPF_API int bpf_prog_get_fd_by_id(__u32 id);
  LIBBPF_API int bpf_map_get_fd_by_id(__u32 id);
  LIBBPF_API int bpf_btf_get_fd_by_id(__u32 id);
diff --git a/tools/lib/bpf/bpf.c b/tools/lib/bpf/bpf.c
index da45889fc732..570310c3879e 100644
--- a/tools/lib/bpf/bpf.c
+++ b/tools/lib/bpf/bpf.c
@@ -721,6 +721,11 @@ int bpf_btf_get_next_id_v0_0_5(__u32 start_id, __u32 *next_id)
 	return bpf_obj_get_next_id(start_id, next_id, BPF_BTF_GET_NEXT_ID);
 }
 
+int bpf_link_get_next_id(__u32 start_id, __u32 *next_id)
+{
+	return bpf_obj_get_next_id(start_id, next_id, BPF_LINK_GET_NEXT_ID);
+}
+
 int bpf_prog_get_fd_by_id(__u32 id)
 {
 	union bpf_attr attr;
@@ -751,13 +756,23 @@ int bpf_btf_get_fd_by_id(__u32 id)
 	return sys_bpf(BPF_BTF_GET_FD_BY_ID, &attr, sizeof(attr));
 }
 
-int bpf_obj_get_info_by_fd(int prog_fd, void *info, __u32 *info_len)
+int bpf_link_get_fd_by_id(__u32 id)
+{
+	union bpf_attr attr;
+
+	memset(&attr, 0, sizeof(attr));
+	attr.link_id = id;
+
+	return sys_bpf(BPF_LINK_GET_FD_BY_ID, &attr, sizeof(attr));
+}
+
+int bpf_obj_get_info_by_fd(int bpf_fd, void *info, __u32 *info_len)
 {
 	union bpf_attr attr;
 	int err;
 
 	memset(&attr, 0, sizeof(attr));
-	attr.info.bpf_fd = prog_fd;
+	attr.info.bpf_fd = bpf_fd;
 	attr.info.info_len = *info_len;
 	attr.info.info = ptr_to_u64(info);
 
* Unmerged path tools/lib/bpf/bpf.h
diff --git a/tools/lib/bpf/libbpf.map b/tools/lib/bpf/libbpf.map
index 69599528ddbe..55f0665d58a6 100644
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@ -286,3 +286,9 @@ LIBBPF_0.0.8 {
 		bpf_program__set_lsm;
 		bpf_set_link_xdp_fd_opts;
 } LIBBPF_0.0.7;
+
+LIBBPF_0.0.9 {
+	global:
+		bpf_link_get_fd_by_id;
+		bpf_link_get_next_id;
+} LIBBPF_0.0.8;
