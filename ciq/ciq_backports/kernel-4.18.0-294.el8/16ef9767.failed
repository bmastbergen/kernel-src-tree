powerpc: Add ppc_inst_as_u64()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 16ef9767e4dc5cf03a71ae7bc2bc588dbbe7983e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/16ef9767.failed

The code patching code wants to get the value of a struct ppc_inst as
a u64 when the instruction is prefixed, so we can pass the u64 down to
__put_user_asm() and write it with a single store.

The optprobes code wants to load a struct ppc_inst as an immediate
into a register so it is useful to have it as a u64 to use the
existing helper function.

Currently this is a bit awkward because the value differs based on the
CPU endianness, so add a helper to do the conversion.

This fixes the usage in arch_prepare_optimized_kprobe() which was
previously incorrect on big endian.

Fixes: 650b55b707fd ("powerpc: Add prefixed instructions to instruction data type")
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Tested-by: Jordan Niethe <jniethe5@gmail.com>
Link: https://lore.kernel.org/r/20200526072630.2487363-1-mpe@ellerman.id.au
(cherry picked from commit 16ef9767e4dc5cf03a71ae7bc2bc588dbbe7983e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/inst.h
#	arch/powerpc/kernel/optprobes.c
#	arch/powerpc/lib/code-patching.c
diff --cc arch/powerpc/kernel/optprobes.c
index 8237884ca389,69bfe96884e2..000000000000
--- a/arch/powerpc/kernel/optprobes.c
+++ b/arch/powerpc/kernel/optprobes.c
@@@ -272,7 -282,8 +272,12 @@@ int arch_prepare_optimized_kprobe(struc
  	/*
  	 * 3. load instruction to be emulated into relevant register, and
  	 */
++<<<<<<< HEAD
 +	patch_imm32_load_insns(*p->ainsn.insn, buff + TMPL_INSN_IDX);
++=======
+ 	temp = ppc_inst_read((struct ppc_inst *)p->ainsn.insn);
+ 	patch_imm64_load_insns(ppc_inst_as_u64(temp), 4, buff + TMPL_INSN_IDX);
++>>>>>>> 16ef9767e4dc (powerpc: Add ppc_inst_as_u64())
  
  	/*
  	 * 4. branch back from trampoline
diff --cc arch/powerpc/lib/code-patching.c
index 42fdadac6587,5ecf0d635a8d..000000000000
--- a/arch/powerpc/lib/code-patching.c
+++ b/arch/powerpc/lib/code-patching.c
@@@ -28,7 -24,12 +28,16 @@@ static int __patch_instruction(unsigne
  {
  	int err = 0;
  
++<<<<<<< HEAD
 +	__put_user_asm(instr, patch_addr, err, "stw");
++=======
+ 	if (!ppc_inst_prefixed(instr)) {
+ 		__put_user_asm(ppc_inst_val(instr), patch_addr, err, "stw");
+ 	} else {
+ 		__put_user_asm(ppc_inst_as_u64(instr), patch_addr, err, "std");
+ 	}
+ 
++>>>>>>> 16ef9767e4dc (powerpc: Add ppc_inst_as_u64())
  	if (err)
  		return err;
  
* Unmerged path arch/powerpc/include/asm/inst.h
* Unmerged path arch/powerpc/include/asm/inst.h
* Unmerged path arch/powerpc/kernel/optprobes.c
* Unmerged path arch/powerpc/lib/code-patching.c
