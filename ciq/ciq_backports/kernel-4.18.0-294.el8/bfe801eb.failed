arm64: vdso: Enable vDSO compat support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vincenzo Frascino <vincenzo.frascino@arm.com>
commit bfe801ebe84f42b4666d3f0adde90f504d56e35b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/bfe801eb.failed

Add vDSO compat support to the arm64 build system.

	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Tested-by: Shijith Thotton <sthotton@marvell.com>
	Tested-by: Andre Przywara <andre.przywara@arm.com>
	Cc: linux-arch@vger.kernel.org
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linux-mips@vger.kernel.org
	Cc: linux-kselftest@vger.kernel.org
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Russell King <linux@armlinux.org.uk>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Paul Burton <paul.burton@mips.com>
	Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
	Cc: Mark Salyzyn <salyzyn@android.com>
	Cc: Peter Collingbourne <pcc@google.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Cc: Dmitry Safonov <0x7f454c46@gmail.com>
	Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
	Cc: Huw Davies <huw@codeweavers.com>
Link: https://lkml.kernel.org/r/20190621095252.32307-16-vincenzo.frascino@arm.com

(cherry picked from commit bfe801ebe84f42b4666d3f0adde90f504d56e35b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/Kconfig
#	arch/arm64/Makefile
#	arch/arm64/kernel/Makefile
diff --cc arch/arm64/Kconfig
index d3f3af6e3b68,f5eb592b8579..000000000000
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@@ -104,8 -107,11 +104,13 @@@ config ARM6
  	select GENERIC_STRNCPY_FROM_USER
  	select GENERIC_STRNLEN_USER
  	select GENERIC_TIME_VSYSCALL
++<<<<<<< HEAD
++=======
+ 	select GENERIC_GETTIMEOFDAY
+ 	select GENERIC_COMPAT_VDSO if (!CPU_BIG_ENDIAN && COMPAT)
++>>>>>>> bfe801ebe84f (arm64: vdso: Enable vDSO compat support)
  	select HANDLE_DOMAIN_IRQ
  	select HARDIRQS_SW_RESEND
 -	select HAVE_PCI
  	select HAVE_ACPI_APEI if (ACPI && EFI)
  	select HAVE_ALIGNED_STRUCT_PAGE if SLUB
  	select HAVE_ARCH_AUDITSYSCALL
diff --cc arch/arm64/Makefile
index c97d2227a443,e3d3fd0a4268..000000000000
--- a/arch/arm64/Makefile
+++ b/arch/arm64/Makefile
@@@ -49,9 -49,26 +49,30 @@@ $(warning Detected assembler with broke
    endif
  endif
  
- KBUILD_CFLAGS	+= -mgeneral-regs-only $(lseinstr) $(brokengasinst)
+ ifeq ($(CONFIG_GENERIC_COMPAT_VDSO), y)
+   CROSS_COMPILE_COMPAT ?= $(CONFIG_CROSS_COMPILE_COMPAT_VDSO:"%"=%)
+ 
+   ifeq ($(CONFIG_CC_IS_CLANG), y)
+     $(warning CROSS_COMPILE_COMPAT is clang, the compat vDSO will not be built)
+   else ifeq ($(CROSS_COMPILE_COMPAT),)
+     $(warning CROSS_COMPILE_COMPAT not defined or empty, the compat vDSO will not be built)
+   else ifeq ($(shell which $(CROSS_COMPILE_COMPAT)gcc 2> /dev/null),)
+     $(error $(CROSS_COMPILE_COMPAT)gcc not found, check CROSS_COMPILE_COMPAT)
+   else
+     export CROSS_COMPILE_COMPAT
+     export CONFIG_COMPAT_VDSO := y
+     compat_vdso := -DCONFIG_COMPAT_VDSO=1
+   endif
+ endif
+ 
+ KBUILD_CFLAGS	+= -mgeneral-regs-only $(lseinstr) $(brokengasinst) $(compat_vdso)
  KBUILD_CFLAGS	+= -fno-asynchronous-unwind-tables
++<<<<<<< HEAD
 +KBUILD_AFLAGS	+= $(lseinstr) $(brokengasinst)
++=======
+ KBUILD_CFLAGS	+= $(call cc-disable-warning, psabi)
+ KBUILD_AFLAGS	+= $(lseinstr) $(brokengasinst) $(compat_vdso)
++>>>>>>> bfe801ebe84f (arm64: vdso: Enable vDSO compat support)
  
  KBUILD_CFLAGS	+= $(call cc-option,-mabi=lp64)
  KBUILD_AFLAGS	+= $(call cc-option,-mabi=lp64)
diff --cc arch/arm64/kernel/Makefile
index aa002ad6e084,478491f07b4f..000000000000
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@@ -27,40 -27,45 +27,65 @@@ OBJCOPYFLAGS := --prefix-symbols=__efis
  $(obj)/%.stub.o: $(obj)/%.o FORCE
  	$(call if_changed,objcopy)
  
++<<<<<<< HEAD
 +arm64-obj-$(CONFIG_COMPAT)		+= sys32.o kuser32.o signal32.o 	\
 +					   sys_compat.o
 +arm64-obj-$(CONFIG_FUNCTION_TRACER)	+= ftrace.o entry-ftrace.o
 +arm64-obj-$(CONFIG_MODULES)		+= arm64ksyms.o module.o
 +arm64-obj-$(CONFIG_ARM64_MODULE_PLTS)	+= module-plts.o
 +arm64-obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o
 +arm64-obj-$(CONFIG_HW_PERF_EVENTS)	+= perf_event.o
 +arm64-obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
 +arm64-obj-$(CONFIG_CPU_PM)		+= sleep.o suspend.o
 +arm64-obj-$(CONFIG_CPU_IDLE)		+= cpuidle.o
 +arm64-obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o
 +arm64-obj-$(CONFIG_KGDB)		+= kgdb.o
 +arm64-obj-$(CONFIG_EFI)			+= efi.o efi-entry.stub.o		\
++=======
+ obj-$(CONFIG_COMPAT)			+= sys32.o signal32.o			\
+ 					   sys_compat.o
+ ifneq ($(CONFIG_COMPAT_VDSO), y)
+ obj-$(CONFIG_COMPAT)			+= sigreturn32.o
+ endif
+ obj-$(CONFIG_KUSER_HELPERS)		+= kuser32.o
+ obj-$(CONFIG_FUNCTION_TRACER)		+= ftrace.o entry-ftrace.o
+ obj-$(CONFIG_MODULES)			+= module.o
+ obj-$(CONFIG_ARM64_MODULE_PLTS)		+= module-plts.o
+ obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o
+ obj-$(CONFIG_HW_PERF_EVENTS)		+= perf_event.o
+ obj-$(CONFIG_HAVE_HW_BREAKPOINT)	+= hw_breakpoint.o
+ obj-$(CONFIG_CPU_PM)			+= sleep.o suspend.o
+ obj-$(CONFIG_CPU_IDLE)			+= cpuidle.o
+ obj-$(CONFIG_JUMP_LABEL)		+= jump_label.o
+ obj-$(CONFIG_KGDB)			+= kgdb.o
+ obj-$(CONFIG_EFI)			+= efi.o efi-entry.stub.o		\
++>>>>>>> bfe801ebe84f (arm64: vdso: Enable vDSO compat support)
  					   efi-rt-wrapper.o
 -obj-$(CONFIG_PCI)			+= pci.o
 -obj-$(CONFIG_ARMV8_DEPRECATED)		+= armv8_deprecated.o
 -obj-$(CONFIG_ACPI)			+= acpi.o
 -obj-$(CONFIG_ACPI_NUMA)			+= acpi_numa.o
 -obj-$(CONFIG_ARM64_ACPI_PARKING_PROTOCOL)	+= acpi_parking_protocol.o
 -obj-$(CONFIG_PARAVIRT)			+= paravirt.o
 -obj-$(CONFIG_RANDOMIZE_BASE)		+= kaslr.o
 -obj-$(CONFIG_HIBERNATION)		+= hibernate.o hibernate-asm.o
 -obj-$(CONFIG_KEXEC_CORE)		+= machine_kexec.o relocate_kernel.o	\
 +arm64-obj-$(CONFIG_PCI)			+= pci.o
 +arm64-obj-$(CONFIG_ARMV8_DEPRECATED)	+= armv8_deprecated.o
 +arm64-obj-$(CONFIG_ACPI)		+= acpi.o
 +arm64-obj-$(CONFIG_ACPI_NUMA)		+= acpi_numa.o
 +arm64-obj-$(CONFIG_ARM64_ACPI_PARKING_PROTOCOL)	+= acpi_parking_protocol.o
 +arm64-obj-$(CONFIG_PARAVIRT)		+= paravirt.o
 +arm64-obj-$(CONFIG_RANDOMIZE_BASE)	+= kaslr.o
 +arm64-obj-$(CONFIG_HIBERNATION)		+= hibernate.o hibernate-asm.o
 +arm64-obj-$(CONFIG_KEXEC_CORE)		+= machine_kexec.o relocate_kernel.o	\
  					   cpu-reset.o
 -obj-$(CONFIG_KEXEC_FILE)		+= machine_kexec_file.o kexec_image.o
 -obj-$(CONFIG_ARM64_RELOC_TEST)		+= arm64-reloc-test.o
 +arm64-obj-$(CONFIG_KEXEC_FILE)		+= machine_kexec_file.o kexec_image.o
 +arm64-obj-$(CONFIG_ARM64_RELOC_TEST)	+= arm64-reloc-test.o
  arm64-reloc-test-y := reloc_test_core.o reloc_test_syms.o
 -obj-$(CONFIG_CRASH_DUMP)		+= crash_dump.o
 -obj-$(CONFIG_CRASH_CORE)		+= crash_core.o
 -obj-$(CONFIG_ARM_SDE_INTERFACE)		+= sdei.o
 -obj-$(CONFIG_ARM64_SSBD)		+= ssbd.o
 -obj-$(CONFIG_ARM64_PTR_AUTH)		+= pointer_auth.o
 +arm64-obj-$(CONFIG_CRASH_DUMP)		+= crash_dump.o
 +arm64-obj-$(CONFIG_ARM_SDE_INTERFACE)	+= sdei.o
 +arm64-obj-$(CONFIG_ARM64_SSBD)		+= ssbd.o
 +arm64-obj-$(CONFIG_ARM64_PTR_AUTH)	+= pointer_auth.o
  
++<<<<<<< HEAD
 +obj-y					+= $(arm64-obj-y) vdso/ probes/
 +obj-m					+= $(arm64-obj-m)
++=======
+ obj-y					+= vdso/ probes/
+ obj-$(CONFIG_COMPAT_VDSO)		+= vdso32/
++>>>>>>> bfe801ebe84f (arm64: vdso: Enable vDSO compat support)
  head-y					:= head.o
  extra-y					+= $(head-y) vmlinux.lds
  
* Unmerged path arch/arm64/Kconfig
* Unmerged path arch/arm64/Makefile
* Unmerged path arch/arm64/kernel/Makefile
