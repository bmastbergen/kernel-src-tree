net: stmmac: Add option for VLAN filter fail queue enable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Chuah, Kim Tatt <kim.tatt.chuah@intel.com>
commit e0f9956a3862b32ad73869a8e52a33c84aafa46f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e0f9956a.failed

Add option in plat_stmmacenet_data struct to enable VLAN Filter Fail
Queuing. This option allows packets that fail VLAN filter to be routed
to a specific Rx queue when Receive All is also set.

When this option is enabled:
- Enable VFFQ only when entering promiscuous mode, because Receive All
  will pass up all rx packets that failed address filtering (similar to
  promiscuous mode).
- VLAN-promiscuous mode is never entered to allow rx packet to fail VLAN
  filters and get routed to selected VFFQ Rx queue.

	Reviewed-by: Voon Weifeng <weifeng.voon@intel.com>
	Reviewed-by: Ong Boon Leong <boon.leong.ong@intel.com>
	Signed-off-by: Chuah, Kim Tatt <kim.tatt.chuah@intel.com>
	Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e0f9956a3862b32ad73869a8e52a33c84aafa46f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/stmicro/stmmac/common.h
#	drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
#	drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
diff --cc drivers/net/ethernet/stmicro/stmmac/common.h
index 41eb39add60e,df7de50497a0..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/common.h
+++ b/drivers/net/ethernet/stmicro/stmmac/common.h
@@@ -458,6 -477,12 +458,15 @@@ struct mac_device_info 
  	unsigned int pcs;
  	unsigned int pmt;
  	unsigned int ps;
++<<<<<<< HEAD
++=======
+ 	unsigned int xlgmac;
+ 	unsigned int num_vlan;
+ 	u32 vlan_filter[32];
+ 	unsigned int promisc;
+ 	bool vlan_fail_q_en;
+ 	u8 vlan_fail_q;
++>>>>>>> e0f9956a3862 (net: stmmac: Add option for VLAN filter fail queue enable)
  };
  
  struct stmmac_rx_routing {
diff --cc drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
index bbfc7674bde1,002791b77356..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
@@@ -472,7 -685,23 +483,22 @@@ static void dwmac4_set_filter(struct ma
  		}
  	}
  
 -	/* VLAN filtering */
 -	if (dev->features & NETIF_F_HW_VLAN_CTAG_FILTER)
 -		value |= GMAC_PACKET_FILTER_VTFE;
 -
  	writel(value, ioaddr + GMAC_PACKET_FILTER);
++<<<<<<< HEAD
++=======
+ 
+ 	if (dev->flags & IFF_PROMISC && !hw->vlan_fail_q_en) {
+ 		if (!hw->promisc) {
+ 			hw->promisc = 1;
+ 			dwmac4_vlan_promisc_enable(dev, hw);
+ 		}
+ 	} else {
+ 		if (hw->promisc) {
+ 			hw->promisc = 0;
+ 			dwmac4_restore_hw_vlan_rx_fltr(dev, hw);
+ 		}
+ 	}
++>>>>>>> e0f9956a3862 (net: stmmac: Add option for VLAN filter fail queue enable)
  }
  
  static void dwmac4_flow_ctrl(struct mac_device_info *hw, unsigned int duplex,
* Unmerged path drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
* Unmerged path drivers/net/ethernet/stmicro/stmmac/common.h
* Unmerged path drivers/net/ethernet/stmicro/stmmac/dwmac-intel.c
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac4.h b/drivers/net/ethernet/stmicro/stmmac/dwmac4.h
index 20baf870a602..69603470658b 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac4.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac4.h
@@ -76,6 +76,7 @@
 #define GMAC_PACKET_FILTER_HPF		BIT(10)
 #define GMAC_PACKET_FILTER_VTFE		BIT(16)
 #define GMAC_PACKET_FILTER_IPFE		BIT(20)
+#define GMAC_PACKET_FILTER_RA		BIT(31)
 
 #define GMAC_MAX_PERFECT_ADDRESSES	128
 
* Unmerged path drivers/net/ethernet/stmicro/stmmac/dwmac4_core.c
diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
index 775db776b3cc..383c014127cd 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac5.h
@@ -72,6 +72,12 @@
 #define TCEIE				BIT(0)
 #define DMA_ECC_INT_STATUS		0x00001088
 
+/* EQoS version 5.xx VLAN Tag Filter Fail Packets Queuing */
+#define GMAC_RXQ_CTRL4			0x00000094
+#define GMAC_RXQCTRL_VFFQ_MASK		GENMASK(19, 17)
+#define GMAC_RXQCTRL_VFFQ_SHIFT		17
+#define GMAC_RXQCTRL_VFFQE		BIT(16)
+
 int dwmac5_safety_feat_config(void __iomem *ioaddr, unsigned int asp);
 int dwmac5_safety_feat_irq_status(struct net_device *ndev,
 		void __iomem *ioaddr, unsigned int asp,
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 0f8a7fbe4f9b..260c328361be 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -4507,6 +4507,9 @@ static int stmmac_hw_init(struct stmmac_priv *priv)
 	if (priv->dma_cap.tsoen)
 		dev_info(priv->device, "TSO supported\n");
 
+	priv->hw->vlan_fail_q_en = priv->plat->vlan_fail_q_en;
+	priv->hw->vlan_fail_q = priv->plat->vlan_fail_q;
+
 	/* Run HW quirks, if any */
 	if (priv->hwif_quirks) {
 		ret = priv->hwif_quirks(priv);
diff --git a/include/linux/stmmac.h b/include/linux/stmmac.h
index 7bba6bd261ea..f1b5468d89ad 100644
--- a/include/linux/stmmac.h
+++ b/include/linux/stmmac.h
@@ -192,5 +192,7 @@ struct plat_stmmacenet_data {
 	int mac_port_sel_speed;
 	bool en_tx_lpi_clockgating;
 	int has_xgmac;
+	bool vlan_fail_q_en;
+	u8 vlan_fail_q;
 };
 #endif
