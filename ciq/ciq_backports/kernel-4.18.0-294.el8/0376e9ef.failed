block: replace BIO_QUEUE_ENTERED with BIO_CGROUP_ACCT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 0376e9efe18388bd486a65edbc16d34b84bddc8f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0376e9ef.failed

BIO_QUEUE_ENTERED is only used for cgroup accounting now, so rename
the flag and move setting it into the cgroup code.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 0376e9efe18388bd486a65edbc16d34b84bddc8f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/blk_types.h
diff --cc include/linux/blk_types.h
index 199160f3638f,90895d594e64..000000000000
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@@ -220,21 -206,24 +220,28 @@@ struct bio 
  /*
   * bio flags
   */
 -enum {
 -	BIO_NO_PAGE_REF,	/* don't put release vec pages */
 -	BIO_CLONED,		/* doesn't own data */
 -	BIO_BOUNCED,		/* bio is a bounce bio */
 -	BIO_USER_MAPPED,	/* contains user pages */
 -	BIO_NULL_MAPPED,	/* contains invalid user pages */
 -	BIO_WORKINGSET,		/* contains userspace workingset pages */
 -	BIO_QUIET,		/* Make BIO Quiet */
 -	BIO_CHAIN,		/* chained bio, ->bi_remaining in effect */
 -	BIO_REFFED,		/* bio has elevated ->bi_cnt */
 -	BIO_THROTTLED,		/* This bio has already been subjected to
 +#define BIO_NO_PAGE_REF	0	/* don't put release vec pages */
 +#define BIO_SEG_VALID	1	/* bi_phys_segments valid */
 +#define BIO_CLONED	2	/* doesn't own data */
 +#define BIO_BOUNCED	3	/* bio is a bounce bio */
 +#define BIO_USER_MAPPED 4	/* contains user pages */
 +#define BIO_NULL_MAPPED 5	/* contains invalid user pages */
 +#define BIO_QUIET	6	/* Make BIO Quiet */
 +#define BIO_CHAIN	7	/* chained bio, ->bi_remaining in effect */
 +#define BIO_REFFED	8	/* bio has elevated ->bi_cnt */
 +#define BIO_THROTTLED	9	/* This bio has already been subjected to
  				 * throttling rules. Don't do it again. */
 -	BIO_TRACE_COMPLETION,	/* bio_endio() should trace the final completion
 +#define BIO_TRACE_COMPLETION 10	/* bio_endio() should trace the final completion
  				 * of this bio. */
++<<<<<<< HEAD
 +#define BIO_QUEUE_ENTERED 11	/* can use blk_queue_enter_live() */
 +#define BIO_TRACKED 12		/* set if bio goes through the rq_qos path */
++=======
+ 	BIO_CGROUP_ACCT,	/* has been accounted to a cgroup */
+ 	BIO_TRACKED,		/* set if bio goes through the rq_qos path */
+ 	BIO_FLAG_LAST
+ };
++>>>>>>> 0376e9efe183 (block: replace BIO_QUEUE_ENTERED with BIO_CGROUP_ACCT)
  
  /* See BVEC_POOL_OFFSET below before adding new flags */
  
diff --git a/block/blk-merge.c b/block/blk-merge.c
index 96b6e62209ca..bea7af9ec069 100644
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@ -272,16 +272,6 @@ void blk_queue_split(struct request_queue *q, struct bio **bio)
 		/* there isn't chance to merge the splitted bio */
 		split->bi_opf |= REQ_NOMERGE;
 
-		/*
-		 * Since we're recursing into make_request here, ensure
-		 * that we mark this bio as already having entered the queue.
-		 * If not, and the queue is going away, we can get stuck
-		 * forever on waiting for the queue reference to drop. But
-		 * that will never happen, as we're already holding a
-		 * reference to it.
-		 */
-		bio_set_flag(*bio, BIO_QUEUE_ENTERED);
-
 		bio_chain(split, *bio);
 		trace_block_split(q, split, (*bio)->bi_iter.bi_sector);
 		generic_make_request(*bio);
diff --git a/include/linux/blk-cgroup.h b/include/linux/blk-cgroup.h
index cbb7953b31ca..0d778b6a749a 100644
--- a/include/linux/blk-cgroup.h
+++ b/include/linux/blk-cgroup.h
@@ -604,12 +604,14 @@ static inline bool blkcg_bio_issue_check(struct request_queue *q,
 		u64_stats_update_begin(&bis->sync);
 
 		/*
-		 * If the bio is flagged with BIO_QUEUE_ENTERED it means this
-		 * is a split bio and we would have already accounted for the
-		 * size of the bio.
+		 * If the bio is flagged with BIO_CGROUP_ACCT it means this is a
+		 * split bio and we would have already accounted for the size of
+		 * the bio.
 		 */
-		if (!bio_flagged(bio, BIO_QUEUE_ENTERED))
+		if (!bio_flagged(bio, BIO_CGROUP_ACCT)) {
+			bio_set_flag(bio, BIO_CGROUP_ACCT);
 			bis->cur.bytes[rwd] += bio->bi_iter.bi_size;
+		}
 		bis->cur.ios[rwd]++;
 
 		u64_stats_update_end(&bis->sync);
* Unmerged path include/linux/blk_types.h
