sched/cfs: change initial value of runnable_avg

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vincent Guittot <vincent.guittot@linaro.org>
commit e21cf43406a190adfcc4bfe592768066fb3aaa9b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e21cf434.failed

Some performance regression on reaim benchmark have been raised with
  commit 070f5e860ee2 ("sched/fair: Take into account runnable_avg to classify group")

The problem comes from the init value of runnable_avg which is initialized
with max value. This can be a problem if the newly forked task is finally
a short task because the group of CPUs is wrongly set to overloaded and
tasks are pulled less agressively.

Set initial value of runnable_avg equals to util_avg to reflect that there
is no waiting time so far.

Fixes: 070f5e860ee2 ("sched/fair: Take into account runnable_avg to classify group")
	Reported-by: kernel test robot <rong.a.chen@intel.com>
	Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Link: https://lkml.kernel.org/r/20200624154422.29166-1-vincent.guittot@linaro.org
(cherry picked from commit e21cf43406a190adfcc4bfe592768066fb3aaa9b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/fair.c
diff --cc kernel/sched/fair.c
index 198f25d071ec,658aa7a2ae6f..000000000000
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@@ -777,6 -806,8 +777,11 @@@ void post_init_entity_util_avg(struct t
  		}
  	}
  
++<<<<<<< HEAD
++=======
+ 	sa->runnable_avg = sa->util_avg;
+ 
++>>>>>>> e21cf43406a1 (sched/cfs: change initial value of runnable_avg)
  	if (p->sched_class != &fair_sched_class) {
  		/*
  		 * For !fair tasks do:
* Unmerged path kernel/sched/fair.c
