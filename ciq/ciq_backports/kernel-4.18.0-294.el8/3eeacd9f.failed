powerpc/ptrace: Don't use sizeof(struct pt_regs) in ptrace code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 3eeacd9f4ea33546f272fcf131d6a11edbe3b4a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3eeacd9f.failed

Now that we've split the user & kernel versions of pt_regs we need to
be more careful in the ptrace code.

For now we've ensured the location of the fields in both structs is
the same, so most of the ptrace code doesn't need updating.

But there are a few places where we use sizeof(pt_regs), and these
will be wrong as soon as we increase the size of the kernel structure.

So flip them all to use sizeof(user_pt_regs).

	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 3eeacd9f4ea33546f272fcf131d6a11edbe3b4a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/ptrace.c
diff --cc arch/powerpc/kernel/ptrace.c
index 66bca8e10d66,c7d0d0c1e34d..000000000000
--- a/arch/powerpc/kernel/ptrace.c
+++ b/arch/powerpc/kernel/ptrace.c
@@@ -300,9 -297,7 +300,13 @@@ int ptrace_get_reg(struct task_struct *
  	}
  #endif
  
++<<<<<<< HEAD
 +	regs_max = sizeof(struct pt_regs) / sizeof(unsigned long);
 +	if (regno < regs_max) {
 +		regno = array_index_nospec(regno, regs_max);
++=======
+ 	if (regno < (sizeof(struct user_pt_regs) / sizeof(unsigned long))) {
++>>>>>>> 3eeacd9f4ea3 (powerpc/ptrace: Don't use sizeof(struct pt_regs) in ptrace code)
  		*data = ((unsigned long *)task->thread.regs)[regno];
  		return 0;
  	}
* Unmerged path arch/powerpc/kernel/ptrace.c
