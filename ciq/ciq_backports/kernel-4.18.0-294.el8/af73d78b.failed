kbuild: Remove debug info from kallsyms linking

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Kees Cook <keescook@chromium.org>
commit af73d78bd384aa9b8789aa6e7ddbb165f971276f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/af73d78b.failed

When CONFIG_DEBUG_INFO is enabled, the two kallsyms linking steps spend
time collecting and writing the dwarf sections to the temporary output
files. kallsyms does not need this information, and leaving it off
halves their linking time. This is especially noticeable without
CONFIG_DEBUG_INFO_REDUCED. The BTF linking stage, however, does still
need those details.

Refactor the BTF and kallsyms generation stages slightly for more
regularized temporary names. Skip debug during kallsyms links.
Additionally move "info BTF" to the correct place since commit
8959e39272d6 ("kbuild: Parameterize kallsyms generation and correct
reporting"), which added "info LD ..." to vmlinux_link calls.

For a full debug info build with BTF, my link time goes from 1m06s to
0m54s, saving about 12 seconds, or 18%.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/202003031814.4AEA3351@keescook
(cherry picked from commit af73d78bd384aa9b8789aa6e7ddbb165f971276f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	scripts/link-vmlinux.sh
diff --cc scripts/link-vmlinux.sh
index bbfffccf5206,ac569e197bfa..000000000000
--- a/scripts/link-vmlinux.sh
+++ b/scripts/link-vmlinux.sh
@@@ -86,20 -63,29 +86,31 @@@ vmlinux_link(
  	local lds="${objtree}/${KBUILD_LDS}"
  	local output=${1}
  	local objects
+ 	local strip_debug
  
 -	info LD ${output}
 -
  	# skip output file argument
  	shift
  
+ 	# The kallsyms linking does not need debug symbols included.
+ 	if [ "$output" != "${output#.tmp_vmlinux.kallsyms}" ] ; then
+ 		strip_debug=-Wl,--strip-debug
+ 	fi
+ 
  	if [ "${SRCARCH}" != "um" ]; then
  		objects="--whole-archive			\
 -			${KBUILD_VMLINUX_OBJS}			\
 +			built-in.a				\
  			--no-whole-archive			\
  			--start-group				\
  			${KBUILD_VMLINUX_LIBS}			\
  			--end-group				\
  			${@}"
  
++<<<<<<< HEAD
 +		${LD} ${LDFLAGS} ${LDFLAGS_vmlinux}		\
++=======
+ 		${LD} ${KBUILD_LDFLAGS} ${LDFLAGS_vmlinux}	\
+ 			${strip_debug#-Wl,}			\
++>>>>>>> af73d78bd384 (kbuild: Remove debug info from kallsyms linking)
  			-o ${output}				\
  			-T ${lds} ${objects}
  	else
@@@ -182,6 -173,18 +198,21 @@@ kallsyms(
  	${CC} ${aflags} -c -o ${2} ${afile}
  }
  
++<<<<<<< HEAD
++=======
+ # Perform one step in kallsyms generation, including temporary linking of
+ # vmlinux.
+ kallsyms_step()
+ {
+ 	kallsymso_prev=${kallsymso}
+ 	kallsyms_vmlinux=.tmp_vmlinux.kallsyms${1}
+ 	kallsymso=${kallsyms_vmlinux}.o
+ 
+ 	vmlinux_link ${kallsyms_vmlinux} "${kallsymso_prev}" ${btf_vmlinux_bin_o}
+ 	kallsyms ${kallsyms_vmlinux} ${kallsymso}
+ }
+ 
++>>>>>>> af73d78bd384 (kbuild: Remove debug info from kallsyms linking)
  # Create map file with all symbols from ${1}
  # See mksymap for additional details
  mksysmap()
@@@ -199,9 -202,7 +230,8 @@@ cleanup(
  {
  	rm -f .btf.*
  	rm -f .tmp_System.map
- 	rm -f .tmp_kallsyms*
  	rm -f .tmp_vmlinux*
 +	rm -f built-in.a
  	rm -f System.map
  	rm -f vmlinux
  	rm -f vmlinux.o
* Unmerged path scripts/link-vmlinux.sh
