powerpc/smp: Optimize remove_cpu_from_masks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Srikar Dronamraju <srikar@linux.vnet.ibm.com>
commit 70edd4a7c753ba18e3e4bb9e97b6d85156cea738
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/70edd4a7.failed

While offlining a CPU, system currently iterate through all the CPUs in
the DIE to clear sibling, l2_cache and smallcore maps. However if there
are more cores in a DIE, system can end up spending more time iterating
through CPUs which are completely unrelated.

Optimize this by only iterating through smaller but relevant cpumap.
If shared_cache is set, cpu_l2_cache_map should be relevant else
cpu_sibling_map would be relevant.

	Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Tested-by: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200921095653.9701-5-srikar@linux.vnet.ibm.com
(cherry picked from commit 70edd4a7c753ba18e3e4bb9e97b6d85156cea738)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/smp.c
diff --cc arch/powerpc/kernel/smp.c
index 42b25ec4e23c,9cdb966f00b3..000000000000
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@@ -1227,15 -1263,22 +1227,31 @@@ static bool update_mask_by_l2(int cpu, 
  #ifdef CONFIG_HOTPLUG_CPU
  static void remove_cpu_from_masks(int cpu)
  {
+ 	struct cpumask *(*mask_fn)(int) = cpu_sibling_mask;
  	int i;
  
++<<<<<<< HEAD
 +	/* NB: cpu_core_mask is a superset of the others */
 +	for_each_cpu(i, cpu_core_mask(cpu)) {
 +		set_cpus_unrelated(cpu, i, cpu_core_mask);
++=======
+ 	if (shared_caches)
+ 		mask_fn = cpu_l2_cache_mask;
+ 
+ 	for_each_cpu(i, mask_fn(cpu)) {
++>>>>>>> 70edd4a7c753 (powerpc/smp: Optimize remove_cpu_from_masks)
  		set_cpus_unrelated(cpu, i, cpu_l2_cache_mask);
  		set_cpus_unrelated(cpu, i, cpu_sibling_mask);
  		if (has_big_cores)
  			set_cpus_unrelated(cpu, i, cpu_smallcore_mask);
++<<<<<<< HEAD
++=======
+ 	}
+ 
+ 	if (has_coregroup_support()) {
+ 		for_each_cpu(i, cpu_coregroup_mask(cpu))
+ 			set_cpus_unrelated(cpu, i, cpu_coregroup_mask);
++>>>>>>> 70edd4a7c753 (powerpc/smp: Optimize remove_cpu_from_masks)
  	}
  }
  #endif
* Unmerged path arch/powerpc/kernel/smp.c
