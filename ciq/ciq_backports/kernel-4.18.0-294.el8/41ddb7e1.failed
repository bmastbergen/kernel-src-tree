cpupower: Revert library ABI changes from commit ae2917093fb60bdc1ed3e

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Thomas Renninger <trenn@suse.de>
commit 41ddb7e1f79693d904502ae9bea609837973eff8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/41ddb7e1.failed

Commit ae2917093fb6 ("tools/power/cpupower: Display boost frequency
separately") modified the library function:

struct cpufreq_available_frequencies
*cpufreq_get_available_frequencies(unsigned int cpu)

to
struct cpufreq_frequencies
*cpufreq_get_frequencies(const char *type, unsigned int cpu)

This patch recovers the old API and implements the new functionality
in a newly introduce method:
struct cpufreq_boost_frequencies
*cpufreq_get_available_frequencies(unsigned int cpu)

This one should get merged into stable kernels back to 5.0 when
the above had been introduced.

Fixes: ae2917093fb6 ("tools/power/cpupower: Display boost frequency separately")

	Cc: stable@vger.kernel.org
	Signed-off-by: Thomas Renninger <trenn@suse.de>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 41ddb7e1f79693d904502ae9bea609837973eff8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/cpupower/lib/cpufreq.c
#	tools/power/cpupower/lib/cpufreq.h
#	tools/power/cpupower/utils/cpufreq-info.c
diff --cc tools/power/cpupower/lib/cpufreq.c
index 245e5941f605,6e04304560ca..000000000000
--- a/tools/power/cpupower/lib/cpufreq.c
+++ b/tools/power/cpupower/lib/cpufreq.c
@@@ -343,7 -343,7 +343,11 @@@ struct cpufreq_available_frequencie
  	unsigned int len;
  
  	len = sysfs_cpufreq_read_file(cpu, "scaling_available_frequencies",
++<<<<<<< HEAD
 +				linebuf, sizeof(linebuf));
++=======
+ 				      linebuf, sizeof(linebuf));
++>>>>>>> 41ddb7e1f796 (cpupower: Revert library ABI changes from commit ae2917093fb60bdc1ed3e)
  	if (len == 0)
  		return NULL;
  
@@@ -388,8 -388,64 +392,69 @@@
  	return NULL;
  }
  
++<<<<<<< HEAD
 +void cpufreq_put_available_frequencies(struct cpufreq_available_frequencies
 +				*any) {
++=======
+ struct cpufreq_available_frequencies
+ *cpufreq_get_boost_frequencies(unsigned int cpu)
+ {
+ 	struct cpufreq_available_frequencies *first = NULL;
+ 	struct cpufreq_available_frequencies *current = NULL;
+ 	char one_value[SYSFS_PATH_MAX];
+ 	char linebuf[MAX_LINE_LEN];
+ 	unsigned int pos, i;
+ 	unsigned int len;
+ 
+ 	len = sysfs_cpufreq_read_file(cpu, "scaling_boost_frequencies",
+ 				      linebuf, sizeof(linebuf));
+ 	if (len == 0)
+ 		return NULL;
+ 
+ 	pos = 0;
+ 	for (i = 0; i < len; i++) {
+ 		if (linebuf[i] == ' ' || linebuf[i] == '\n') {
+ 			if (i - pos < 2)
+ 				continue;
+ 			if (i - pos >= SYSFS_PATH_MAX)
+ 				goto error_out;
+ 			if (current) {
+ 				current->next = malloc(sizeof(*current));
+ 				if (!current->next)
+ 					goto error_out;
+ 				current = current->next;
+ 			} else {
+ 				first = malloc(sizeof(*first));
+ 				if (!first)
+ 					goto error_out;
+ 				current = first;
+ 			}
+ 			current->first = first;
+ 			current->next = NULL;
+ 
+ 			memcpy(one_value, linebuf + pos, i - pos);
+ 			one_value[i - pos] = '\0';
+ 			if (sscanf(one_value, "%lu", &current->frequency) != 1)
+ 				goto error_out;
+ 
+ 			pos = i + 1;
+ 		}
+ 	}
+ 
+ 	return first;
+ 
+  error_out:
+ 	while (first) {
+ 		current = first->next;
+ 		free(first);
+ 		first = current;
+ 	}
+ 	return NULL;
+ }
+ 
+ void cpufreq_put_available_frequencies(struct cpufreq_available_frequencies *any)
+ {
++>>>>>>> 41ddb7e1f796 (cpupower: Revert library ABI changes from commit ae2917093fb60bdc1ed3e)
  	struct cpufreq_available_frequencies *tmp, *next;
  
  	if (!any)
diff --cc tools/power/cpupower/lib/cpufreq.h
index 60beaf5ed2ea,95f4fd9e2656..000000000000
--- a/tools/power/cpupower/lib/cpufreq.h
+++ b/tools/power/cpupower/lib/cpufreq.h
@@@ -137,6 -129,12 +137,15 @@@ struct cpufreq_available_frequencie
  
  void cpufreq_put_available_frequencies(
  		struct cpufreq_available_frequencies *first);
++<<<<<<< HEAD
++=======
+ 
+ struct cpufreq_available_frequencies
+ *cpufreq_get_boost_frequencies(unsigned int cpu);
+ 
+ void cpufreq_put_boost_frequencies(
+ 		struct cpufreq_available_frequencies *first);
++>>>>>>> 41ddb7e1f796 (cpupower: Revert library ABI changes from commit ae2917093fb60bdc1ed3e)
  
  
  /* determine affected CPUs
diff --cc tools/power/cpupower/utils/cpufreq-info.c
index d16fe555ceda,6efc0f6b1b11..000000000000
--- a/tools/power/cpupower/utils/cpufreq-info.c
+++ b/tools/power/cpupower/utils/cpufreq-info.c
@@@ -245,6 -240,33 +245,36 @@@ static int get_boost_mode(unsigned int 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /* --boost / -b */
+ 
+ static int get_boost_mode(unsigned int cpu)
+ {
+ 	struct cpufreq_available_frequencies *freqs;
+ 
+ 	if (cpupower_cpu_info.vendor == X86_VENDOR_AMD ||
+ 	    cpupower_cpu_info.vendor == X86_VENDOR_HYGON ||
+ 	    cpupower_cpu_info.vendor == X86_VENDOR_INTEL)
+ 		return get_boost_mode_x86(cpu);
+ 
+ 	freqs = cpufreq_get_boost_frequencies(cpu);
+ 	if (freqs) {
+ 		printf(_("  boost frequency steps: "));
+ 		while (freqs->next) {
+ 			print_speed(freqs->frequency);
+ 			printf(", ");
+ 			freqs = freqs->next;
+ 		}
+ 		print_speed(freqs->frequency);
+ 		printf("\n");
+ 		cpufreq_put_available_frequencies(freqs);
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 41ddb7e1f796 (cpupower: Revert library ABI changes from commit ae2917093fb60bdc1ed3e)
  /* --freq / -f */
  
  static int get_freq_kernel(unsigned int cpu, unsigned int human)
* Unmerged path tools/power/cpupower/lib/cpufreq.c
* Unmerged path tools/power/cpupower/lib/cpufreq.h
* Unmerged path tools/power/cpupower/utils/cpufreq-info.c
