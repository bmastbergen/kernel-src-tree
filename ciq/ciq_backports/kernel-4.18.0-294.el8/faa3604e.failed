x86/resctrl: Fix typos in the mba_sc mount option

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Xiaochen Shen <xiaochen.shen@intel.com>
commit faa3604eda325588451c9c1eb4c8a8d04c1cd633
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/faa3604e.failed

The user can control the MBA memory bandwidth in MBps (Mega
Bytes per second) units of the MBA Software Controller (mba_sc)
by using the "mba_MBps" mount option. For details, see
Documentation/x86/resctrl_ui.txt.

However, commit

  23bf1b6be9c2 ("kernfs, sysfs, cgroup, intel_rdt: Support fs_context")

changed the mount option name from "mba_MBps" to "mba_mpbs" by mistake.

Change it back from to "mba_MBps" because it is user-visible, and
correct "Opt_mba_mpbs" spelling to "Opt_mba_mbps".

 [ bp: massage commit message. ]

Fixes: 23bf1b6be9c2 ("kernfs, sysfs, cgroup, intel_rdt: Support fs_context")
	Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: dhowells@redhat.com
	Cc: Fenghua Yu <fenghua.yu@intel.com>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: pei.p.jia@intel.com
	Cc: Reinette Chatre <reinette.chatre@intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: x86-ml <x86@kernel.org>
Link: https://lkml.kernel.org/r/1553896238-22130-1-git-send-email-xiaochen.shen@intel.com
(cherry picked from commit faa3604eda325588451c9c1eb4c8a8d04c1cd633)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/resctrl/rdtgroup.c
diff --cc arch/x86/kernel/cpu/resctrl/rdtgroup.c
index 4e1b31406e0d,54b9eef3eea9..000000000000
--- a/arch/x86/kernel/cpu/resctrl/rdtgroup.c
+++ b/arch/x86/kernel/cpu/resctrl/rdtgroup.c
@@@ -2157,8 -2033,86 +2157,88 @@@ out
  	rdt_last_cmd_clear();
  	mutex_unlock(&rdtgroup_mutex);
  	cpus_read_unlock();
 -	return ret;
 -}
  
++<<<<<<< HEAD
 +	return dentry;
++=======
+ enum rdt_param {
+ 	Opt_cdp,
+ 	Opt_cdpl2,
+ 	Opt_mba_mbps,
+ 	nr__rdt_params
+ };
+ 
+ static const struct fs_parameter_spec rdt_param_specs[] = {
+ 	fsparam_flag("cdp",		Opt_cdp),
+ 	fsparam_flag("cdpl2",		Opt_cdpl2),
+ 	fsparam_flag("mba_MBps",	Opt_mba_mbps),
+ 	{}
+ };
+ 
+ static const struct fs_parameter_description rdt_fs_parameters = {
+ 	.name		= "rdt",
+ 	.specs		= rdt_param_specs,
+ };
+ 
+ static int rdt_parse_param(struct fs_context *fc, struct fs_parameter *param)
+ {
+ 	struct rdt_fs_context *ctx = rdt_fc2context(fc);
+ 	struct fs_parse_result result;
+ 	int opt;
+ 
+ 	opt = fs_parse(fc, &rdt_fs_parameters, param, &result);
+ 	if (opt < 0)
+ 		return opt;
+ 
+ 	switch (opt) {
+ 	case Opt_cdp:
+ 		ctx->enable_cdpl3 = true;
+ 		return 0;
+ 	case Opt_cdpl2:
+ 		ctx->enable_cdpl2 = true;
+ 		return 0;
+ 	case Opt_mba_mbps:
+ 		if (boot_cpu_data.x86_vendor != X86_VENDOR_INTEL)
+ 			return -EINVAL;
+ 		ctx->enable_mba_mbps = true;
+ 		return 0;
+ 	}
+ 
+ 	return -EINVAL;
+ }
+ 
+ static void rdt_fs_context_free(struct fs_context *fc)
+ {
+ 	struct rdt_fs_context *ctx = rdt_fc2context(fc);
+ 
+ 	kernfs_free_fs_context(fc);
+ 	kfree(ctx);
+ }
+ 
+ static const struct fs_context_operations rdt_fs_context_ops = {
+ 	.free		= rdt_fs_context_free,
+ 	.parse_param	= rdt_parse_param,
+ 	.get_tree	= rdt_get_tree,
+ };
+ 
+ static int rdt_init_fs_context(struct fs_context *fc)
+ {
+ 	struct rdt_fs_context *ctx;
+ 
+ 	ctx = kzalloc(sizeof(struct rdt_fs_context), GFP_KERNEL);
+ 	if (!ctx)
+ 		return -ENOMEM;
+ 
+ 	ctx->kfc.root = rdt_root;
+ 	ctx->kfc.magic = RDTGROUP_SUPER_MAGIC;
+ 	fc->fs_private = &ctx->kfc;
+ 	fc->ops = &rdt_fs_context_ops;
+ 	if (fc->user_ns)
+ 		put_user_ns(fc->user_ns);
+ 	fc->user_ns = get_user_ns(&init_user_ns);
+ 	fc->global = true;
+ 	return 0;
++>>>>>>> faa3604eda32 (x86/resctrl: Fix typos in the mba_sc mount option)
  }
  
  static int reset_all_ctrls(struct rdt_resource *r)
* Unmerged path arch/x86/kernel/cpu/resctrl/rdtgroup.c
