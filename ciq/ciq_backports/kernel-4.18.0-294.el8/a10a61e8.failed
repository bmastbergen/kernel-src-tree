scsi: zfcp: support retrieval of SFP Data via Exchange Port Data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Benjamin Block <bblock@linux.ibm.com>
commit a10a61e807b0a226b78e2041843cbf0521bd0c35
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a10a61e8.failed

A new FCP channel feature allows us to read the diagnostics from our local
SFP transceivers. To make use of that add a flag
(FSF_FEATURE_REQUEST_SFP_DATA) to the feature-set we request from the FCP
channel. Whether the channel actually implements this can be determined via
an other new flag (FSF_FEATURE_REPORT_SFP_DATA), that is set in the
adapter_features field of the adapter structure after Exchange Config Data
finished.

Also add the corresponding definitions in the QTCB Bottom for Exchange Port
Data. These new definitions are only valid, if FSF_FEATURE_REPORT_SFP_DATA
is set.

Link: https://lore.kernel.org/r/ee1eba4de71eb06b4d82207ad4f428429346156f.1572018132.git.bblock@linux.ibm.com
	Reviewed-by: Steffen Maier <maier@linux.ibm.com>
	Signed-off-by: Benjamin Block <bblock@linux.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit a10a61e807b0a226b78e2041843cbf0521bd0c35)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/scsi/zfcp_fsf.c
#	drivers/s390/scsi/zfcp_fsf.h
diff --cc drivers/s390/scsi/zfcp_fsf.c
index 2b3e32ad4831,223a805f0b0b..000000000000
--- a/drivers/s390/scsi/zfcp_fsf.c
+++ b/drivers/s390/scsi/zfcp_fsf.c
@@@ -1339,7 -1287,7 +1339,11 @@@ int zfcp_fsf_exchange_config_data(struc
  	req->qtcb->bottom.config.feature_selection =
  			FSF_FEATURE_NOTIFICATION_LOST |
  			FSF_FEATURE_UPDATE_ALERT |
++<<<<<<< HEAD
 +			FSF_FEATURE_FC_SECURITY;
++=======
+ 			FSF_FEATURE_REQUEST_SFP_DATA;
++>>>>>>> a10a61e807b0 (scsi: zfcp: support retrieval of SFP Data via Exchange Port Data)
  	req->erp_action = erp_action;
  	req->handler = zfcp_fsf_exchange_config_data_handler;
  	erp_action->fsf_req_id = req->req_id;
@@@ -1392,7 -1341,7 +1396,11 @@@ int zfcp_fsf_exchange_config_data_sync(
  	req->qtcb->bottom.config.feature_selection =
  			FSF_FEATURE_NOTIFICATION_LOST |
  			FSF_FEATURE_UPDATE_ALERT |
++<<<<<<< HEAD
 +			FSF_FEATURE_FC_SECURITY;
++=======
+ 			FSF_FEATURE_REQUEST_SFP_DATA;
++>>>>>>> a10a61e807b0 (scsi: zfcp: support retrieval of SFP Data via Exchange Port Data)
  
  	if (data)
  		req->data = data;
diff --cc drivers/s390/scsi/zfcp_fsf.h
index e027b2bd9a85,2b1e4da1944f..000000000000
--- a/drivers/s390/scsi/zfcp_fsf.h
+++ b/drivers/s390/scsi/zfcp_fsf.h
@@@ -172,7 -163,8 +172,12 @@@
  #define FSF_FEATURE_ELS_CT_CHAINED_SBALS	0x00000020
  #define FSF_FEATURE_UPDATE_ALERT		0x00000100
  #define FSF_FEATURE_MEASUREMENT_DATA		0x00000200
++<<<<<<< HEAD
 +#define FSF_FEATURE_FC_SECURITY			0x00001000
++=======
+ #define FSF_FEATURE_REQUEST_SFP_DATA		0x00000200
+ #define FSF_FEATURE_REPORT_SFP_DATA		0x00000800
++>>>>>>> a10a61e807b0 (scsi: zfcp: support retrieval of SFP Data via Exchange Port Data)
  #define FSF_FEATURE_DIF_PROT_TYPE1		0x00010000
  #define FSF_FEATURE_DIX_PROT_TCPIP		0x00020000
  
@@@ -424,9 -410,23 +429,29 @@@ struct fsf_qtcb_bottom_port 
  	u8 cb_util;
  	u8 a_util;
  	u8 res2;
++<<<<<<< HEAD
 +	u8 res3[12];
 +	u32 fc_security_algorithms;
 +	u8 res4[236];
++=======
+ 	u16 temperature;
+ 	u16 vcc;
+ 	u16 tx_bias;
+ 	u16 tx_power;
+ 	u16 rx_power;
+ 	union {
+ 		u16 raw;
+ 		struct {
+ 			u16 fec_active		:1;
+ 			u16:7;
+ 			u16 connector_type	:2;
+ 			u16 sfp_invalid		:1;
+ 			u16 optical_port	:1;
+ 			u16 port_tx_type	:4;
+ 		};
+ 	} sfp_flags;
+ 	u8 res3[240];
++>>>>>>> a10a61e807b0 (scsi: zfcp: support retrieval of SFP Data via Exchange Port Data)
  } __attribute__ ((packed));
  
  union fsf_qtcb_bottom {
* Unmerged path drivers/s390/scsi/zfcp_fsf.c
* Unmerged path drivers/s390/scsi/zfcp_fsf.h
