block: cleanup how md_autodetect_dev is called

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 74cc979c3c7f8328b24651daf15280f07533e735
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/74cc979c.failed

Add a new include/linux/raid/detect.h header to declare the
md_autodetect_dev prototype which can be shared between md and
the partition code.  Then use IS_BUILTIN to call it instead of the
ifdef magic.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 74cc979c3c7f8328b24651daf15280f07533e735)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/partition-generic.c
diff --cc block/partition-generic.c
index 9b9e90161fdf,4d771ae835ed..000000000000
--- a/block/partition-generic.c
+++ b/block/partition-generic.c
@@@ -18,45 -18,11 +18,53 @@@
  #include <linux/ctype.h>
  #include <linux/genhd.h>
  #include <linux/blktrace_api.h>
++<<<<<<< HEAD
 +
 +#include "partitions/check.h"
 +
 +#ifdef CONFIG_BLK_DEV_MD
 +extern void md_autodetect_dev(dev_t dev);
 +#endif
 + 
 +/*
 + * disk_name() is used by partition check code and the genhd driver.
 + * It formats the devicename of the indicated disk into
 + * the supplied buffer (of size at least 32), and returns
 + * a pointer to that same buffer (for convenience).
 + */
 +
 +char *disk_name(struct gendisk *hd, int partno, char *buf)
 +{
 +	if (!partno)
 +		snprintf(buf, BDEVNAME_SIZE, "%s", hd->disk_name);
 +	else if (isdigit(hd->disk_name[strlen(hd->disk_name)-1]))
 +		snprintf(buf, BDEVNAME_SIZE, "%sp%d", hd->disk_name, partno);
 +	else
 +		snprintf(buf, BDEVNAME_SIZE, "%s%d", hd->disk_name, partno);
 +
 +	return buf;
 +}
 +
 +const char *bdevname(struct block_device *bdev, char *buf)
 +{
 +	return disk_name(bdev->bd_disk, bdev->bd_part->partno, buf);
 +}
 +
 +EXPORT_SYMBOL(bdevname);
 +
 +const char *bio_devname(struct bio *bio, char *buf)
 +{
 +	return disk_name(bio->bi_disk, bio->bi_partno, buf);
 +}
 +EXPORT_SYMBOL(bio_devname);
 +
++=======
+ #include <linux/raid/detect.h>
+ #include "blk.h"
+ 
+ #include "partitions/check.h"
+ 
++>>>>>>> 74cc979c3c7f (block: cleanup how md_autodetect_dev is called)
  static ssize_t part_partition_show(struct device *dev,
  				   struct device_attribute *attr, char *buf)
  {
* Unmerged path block/partition-generic.c
diff --git a/drivers/md/md.c b/drivers/md/md.c
index 5fa4c5e0b5a9..d8166e724fed 100644
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@ -65,6 +65,7 @@
 #include <linux/delay.h>
 #include <linux/raid/md_p.h>
 #include <linux/raid/md_u.h>
+#include <linux/raid/detect.h>
 #include <linux/slab.h>
 #include <linux/percpu-refcount.h>
 
diff --git a/include/linux/raid/detect.h b/include/linux/raid/detect.h
new file mode 100644
index 000000000000..37dd3f40cd31
--- /dev/null
+++ b/include/linux/raid/detect.h
@@ -0,0 +1,3 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+void md_autodetect_dev(dev_t dev);
