net: atlantic: move PTP TC initialization to a separate function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Dmitry Bezrukov <dbezrukov@marvell.com>
commit 593dd0fc202eed27de07c5df9ef24a3c00cf0c09
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/593dd0fc.failed

This patch moves the PTP TC initialization into a separate function.

	Signed-off-by: Dmitry Bezrukov <dbezrukov@marvell.com>
Co-developed-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 593dd0fc202eed27de07c5df9ef24a3c00cf0c09)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index b7e5ce0d7af5,0ff3f6eea022..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -108,12 -113,32 +108,30 @@@ static int hw_atl_b0_set_fc(struct aq_h
  	return 0;
  }
  
+ static int hw_atl_b0_tc_ptp_set(struct aq_hw_s *self)
+ {
+ 	/* Init TC2 for PTP_TX */
+ 	hw_atl_tpb_tx_pkt_buff_size_per_tc_set(self, HW_ATL_B0_PTP_TXBUF_SIZE,
+ 					       AQ_HW_PTP_TC);
+ 
+ 	/* Init TC2 for PTP_RX */
+ 	hw_atl_rpb_rx_pkt_buff_size_per_tc_set(self, HW_ATL_B0_PTP_RXBUF_SIZE,
+ 					       AQ_HW_PTP_TC);
+ 	/* No flow control for PTP */
+ 	hw_atl_rpb_rx_xoff_en_per_tc_set(self, 0U, AQ_HW_PTP_TC);
+ 
+ 	return aq_hw_err_from_flags(self);
+ }
+ 
  static int hw_atl_b0_hw_qos_set(struct aq_hw_s *self)
  {
 -	u32 tx_buff_size = HW_ATL_B0_TXBUF_MAX;
 -	u32 rx_buff_size = HW_ATL_B0_RXBUF_MAX;
 -	unsigned int i_priority = 0U;
  	u32 tc = 0U;
 +	u32 buff_size = 0U;
 +	unsigned int i_priority = 0U;
  
+ 	tx_buff_size -= HW_ATL_B0_PTP_TXBUF_SIZE;
+ 	rx_buff_size -= HW_ATL_B0_PTP_RXBUF_SIZE;
+ 
  	/* TPS Descriptor rate init */
  	hw_atl_tps_tx_pkt_shed_desc_rate_curr_time_res_set(self, 0x0U);
  	hw_atl_tps_tx_pkt_shed_desc_rate_lim_set(self, 0xA);
@@@ -125,17 -150,16 +143,22 @@@
  	hw_atl_tps_tx_pkt_shed_desc_tc_arb_mode_set(self, 0U);
  	hw_atl_tps_tx_pkt_shed_data_arb_mode_set(self, 0U);
  
 -	/* TX Packet Scheduler Data TC0 */
 -	hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(self, 0xFFF, tc);
 -	hw_atl_tps_tx_pkt_shed_tc_data_weight_set(self, 0x64, tc);
 -	hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(self, 0x50, tc);
 -	hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(self, 0x1E, tc);
 +	hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(self, 0xFFF, 0U);
 +	hw_atl_tps_tx_pkt_shed_tc_data_weight_set(self, 0x64, 0U);
 +	hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(self, 0x50, 0U);
 +	hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(self, 0x1E, 0U);
 +
++<<<<<<< HEAD
 +	/* Tx buf size */
 +	buff_size = HW_ATL_B0_TXBUF_MAX;
  
 +	hw_atl_tpb_tx_pkt_buff_size_per_tc_set(self, buff_size, tc);
++=======
+ 	/* Tx buf size TC0 */
+ 	hw_atl_tpb_tx_pkt_buff_size_per_tc_set(self, tx_buff_size, tc);
++>>>>>>> 593dd0fc202e (net: atlantic: move PTP TC initialization to a separate function)
  	hw_atl_tpb_tx_buff_hi_threshold_per_tc_set(self,
 -						   (tx_buff_size *
 +						   (buff_size *
  						   (1024 / 32U) * 66U) /
  						   100U, tc);
  	hw_atl_tpb_tx_buff_lo_threshold_per_tc_set(self,
@@@ -144,12 -168,9 +167,16 @@@
  						   100U, tc);
  
  	/* QoS Rx buf size per TC */
++<<<<<<< HEAD
 +	tc = 0;
 +	buff_size = HW_ATL_B0_RXBUF_MAX;
 +
 +	hw_atl_rpb_rx_pkt_buff_size_per_tc_set(self, buff_size, tc);
++=======
+ 	hw_atl_rpb_rx_pkt_buff_size_per_tc_set(self, rx_buff_size, tc);
++>>>>>>> 593dd0fc202e (net: atlantic: move PTP TC initialization to a separate function)
  	hw_atl_rpb_rx_buff_hi_threshold_per_tc_set(self,
 -						   (rx_buff_size *
 +						   (buff_size *
  						   (1024U / 32U) * 66U) /
  						   100U, tc);
  	hw_atl_rpb_rx_buff_lo_threshold_per_tc_set(self,
@@@ -157,7 -178,9 +184,13 @@@
  						   (1024U / 32U) * 50U) /
  						   100U, tc);
  
++<<<<<<< HEAD
 +	hw_atl_b0_set_fc(self, self->aq_nic_cfg->flow_control, tc);
++=======
+ 	hw_atl_b0_set_fc(self, self->aq_nic_cfg->fc.req, tc);
+ 
+ 	hw_atl_b0_tc_ptp_set(self);
++>>>>>>> 593dd0fc202e (net: atlantic: move PTP TC initialization to a separate function)
  
  	/* QoS 802.1p priority -> TC mapping */
  	for (i_priority = 8U; i_priority--;)
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
