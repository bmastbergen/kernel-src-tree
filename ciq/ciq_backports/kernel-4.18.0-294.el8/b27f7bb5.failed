flow_dissector: Move out netns_bpf prog callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jakub Sitnicki <jakub@cloudflare.com>
commit b27f7bb590ba835b32ef122389db158e44cfda1e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b27f7bb5.failed

Move functions to manage BPF programs attached to netns that are not
specific to flow dissector to a dedicated module named
bpf/net_namespace.c.

The set of functions will grow with the addition of bpf_link support for
netns attached programs. This patch prepares ground by creating a place
for it.

This is a code move with no functional changes intended.

	Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200531082846.2117903-4-jakub@cloudflare.com
(cherry picked from commit b27f7bb590ba835b32ef122389db158e44cfda1e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/flow_dissector.c
diff --cc net/core/flow_dissector.c
index 4f65dd7a24e0,d02df0b6d0d9..000000000000
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@@ -30,11 -31,8 +30,14 @@@
  #include <net/netfilter/nf_conntrack_core.h>
  #include <net/netfilter/nf_conntrack_labels.h>
  #endif
 -#include <linux/bpf-netns.h>
  
++<<<<<<< HEAD
 +#include <linux/rh_features.h>
 +
 +static DEFINE_MUTEX(flow_dissector_mutex);
 +
++=======
++>>>>>>> b27f7bb590ba (flow_dissector: Move out netns_bpf prog callbacks)
  static void dissector_set_key(struct flow_dissector *flow_dissector,
  			      enum flow_dissector_key_id key_id)
  {
@@@ -71,56 -69,11 +74,61 @@@ void skb_flow_dissector_init(struct flo
  }
  EXPORT_SYMBOL(skb_flow_dissector_init);
  
++<<<<<<< HEAD
 +int skb_flow_dissector_prog_query(const union bpf_attr *attr,
 +				  union bpf_attr __user *uattr)
 +{
 +	__u32 __user *prog_ids = u64_to_user_ptr(attr->query.prog_ids);
 +	u32 prog_id, prog_cnt = 0, flags = 0;
 +	struct bpf_prog *attached;
 +	struct net *net;
 +
 +	if (attr->query.query_flags)
 +		return -EINVAL;
 +
 +	net = get_net_ns_by_fd(attr->query.target_fd);
 +	if (IS_ERR(net))
 +		return PTR_ERR(net);
 +
 +	rcu_read_lock();
 +	attached = rcu_dereference(net->flow_dissector_prog);
 +	if (attached) {
 +		prog_cnt = 1;
 +		prog_id = attached->aux->id;
 +	}
 +	rcu_read_unlock();
 +
 +	put_net(net);
 +
 +	if (copy_to_user(&uattr->query.attach_flags, &flags, sizeof(flags)))
 +		return -EFAULT;
 +	if (copy_to_user(&uattr->query.prog_cnt, &prog_cnt, sizeof(prog_cnt)))
 +		return -EFAULT;
 +
 +	if (!attr->query.prog_cnt || !prog_ids || !prog_cnt)
 +		return 0;
 +
 +	if (copy_to_user(prog_ids, &prog_id, sizeof(u32)))
 +		return -EFAULT;
 +
 +	return 0;
 +}
 +
 +int skb_flow_dissector_bpf_prog_attach(const union bpf_attr *attr,
 +				       struct bpf_prog *prog)
++=======
+ #ifdef CONFIG_BPF_SYSCALL
+ int flow_dissector_bpf_prog_attach(struct net *net, struct bpf_prog *prog)
++>>>>>>> b27f7bb590ba (flow_dissector: Move out netns_bpf prog callbacks)
  {
 -	enum netns_bpf_attach_type type = NETNS_BPF_FLOW_DISSECTOR;
  	struct bpf_prog *attached;
 +	struct net *net;
 +	int ret = 0;
 +
 +	rh_mark_used_feature("eBPF/flowdissector");
 +
 +	net = current->nsproxy->net_ns;
 +	mutex_lock(&flow_dissector_mutex);
  
  	if (net == &init_net) {
  		/* BPF flow dissector in the root namespace overrides
@@@ -142,61 -93,22 +150,67 @@@
  		/* Make sure root flow dissector is not attached
  		 * when attaching to the non-root namespace.
  		 */
 -		if (rcu_access_pointer(init_net.bpf.progs[type]))
 -			return -EEXIST;
 +		if (rcu_access_pointer(init_net.flow_dissector_prog)) {
 +			ret = -EEXIST;
 +			goto out;
 +		}
  	}
  
 -	attached = rcu_dereference_protected(net->bpf.progs[type],
 -					     lockdep_is_held(&netns_bpf_mutex));
 -	if (attached == prog)
 +	attached = rcu_dereference_protected(net->flow_dissector_prog,
 +					     lockdep_is_held(&flow_dissector_mutex));
 +	if (attached == prog) {
  		/* The same program cannot be attached twice */
 -		return -EINVAL;
 -
 -	rcu_assign_pointer(net->bpf.progs[type], prog);
 +		ret = -EINVAL;
 +		goto out;
 +	}
 +	rcu_assign_pointer(net->flow_dissector_prog, prog);
  	if (attached)
  		bpf_prog_put(attached);
++<<<<<<< HEAD
 +out:
 +	mutex_unlock(&flow_dissector_mutex);
 +	return ret;
 +}
 +
 +static int flow_dissector_bpf_prog_detach(struct net *net)
 +{
 +	struct bpf_prog *attached;
 +
 +	mutex_lock(&flow_dissector_mutex);
 +	attached = rcu_dereference_protected(net->flow_dissector_prog,
 +					     lockdep_is_held(&flow_dissector_mutex));
 +	if (!attached) {
 +		mutex_unlock(&flow_dissector_mutex);
 +		return -ENOENT;
 +	}
 +	RCU_INIT_POINTER(net->flow_dissector_prog, NULL);
 +	bpf_prog_put(attached);
 +	mutex_unlock(&flow_dissector_mutex);
 +	return 0;
 +}
 +
 +int skb_flow_dissector_bpf_prog_detach(const union bpf_attr *attr)
 +{
 +	return flow_dissector_bpf_prog_detach(current->nsproxy->net_ns);
 +}
 +
 +static void __net_exit flow_dissector_pernet_pre_exit(struct net *net)
 +{
 +	/* We're not racing with attach/detach because there are no
 +	 * references to netns left when pre_exit gets called.
 +	 */
 +	if (rcu_access_pointer(net->flow_dissector_prog))
 +		flow_dissector_bpf_prog_detach(net);
 +}
 +
 +static struct pernet_operations flow_dissector_pernet_ops __net_initdata = {
 +	.pre_exit = flow_dissector_pernet_pre_exit,
 +};
++=======
+ 	return 0;
+ }
+ #endif /* CONFIG_BPF_SYSCALL */
++>>>>>>> b27f7bb590ba (flow_dissector: Move out netns_bpf prog callbacks)
  
  /**
   * __skb_flow_get_ports - extract the upper layer ports and return them
@@@ -1872,7 -1786,6 +1886,11 @@@ static int __init init_default_flow_dis
  	skb_flow_dissector_init(&flow_keys_basic_dissector,
  				flow_keys_basic_dissector_keys,
  				ARRAY_SIZE(flow_keys_basic_dissector_keys));
++<<<<<<< HEAD
 +
 +	return register_pernet_subsys(&flow_dissector_pernet_ops);
++=======
+ 	return 0;
++>>>>>>> b27f7bb590ba (flow_dissector: Move out netns_bpf prog callbacks)
  }
  core_initcall(init_default_flow_dissectors);
diff --git a/include/net/flow_dissector.h b/include/net/flow_dissector.h
index 180b52658c68..4674eb42707b 100644
--- a/include/net/flow_dissector.h
+++ b/include/net/flow_dissector.h
@@ -8,6 +8,8 @@
 #include <linux/string.h>
 #include <uapi/linux/if_ether.h>
 
+struct bpf_prog;
+struct net;
 struct sk_buff;
 
 /**
@@ -359,4 +361,8 @@ flow_dissector_init_keys(struct flow_dissector_key_control *key_control,
 	memset(key_basic, 0, sizeof(*key_basic));
 }
 
+#ifdef CONFIG_BPF_SYSCALL
+int flow_dissector_bpf_prog_attach(struct net *net, struct bpf_prog *prog);
+#endif /* CONFIG_BPF_SYSCALL */
+
 #endif
diff --git a/kernel/bpf/Makefile b/kernel/bpf/Makefile
index 37b2d8620153..d4b099d6419e 100644
--- a/kernel/bpf/Makefile
+++ b/kernel/bpf/Makefile
@@ -16,6 +16,7 @@ ifeq ($(CONFIG_XDP_SOCKETS),y)
 obj-$(CONFIG_BPF_SYSCALL) += xskmap.o
 endif
 obj-$(CONFIG_BPF_SYSCALL) += offload.o
+obj-$(CONFIG_BPF_SYSCALL) += net_namespace.o
 endif
 ifeq ($(CONFIG_PERF_EVENTS),y)
 obj-$(CONFIG_BPF_SYSCALL) += stackmap.o
diff --git a/kernel/bpf/net_namespace.c b/kernel/bpf/net_namespace.c
new file mode 100644
index 000000000000..b37d81450c3a
--- /dev/null
+++ b/kernel/bpf/net_namespace.c
@@ -0,0 +1,133 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/bpf.h>
+#include <linux/filter.h>
+#include <net/net_namespace.h>
+
+/*
+ * Functions to manage BPF programs attached to netns
+ */
+
+/* Protects updates to netns_bpf */
+DEFINE_MUTEX(netns_bpf_mutex);
+
+int netns_bpf_prog_query(const union bpf_attr *attr,
+			 union bpf_attr __user *uattr)
+{
+	__u32 __user *prog_ids = u64_to_user_ptr(attr->query.prog_ids);
+	u32 prog_id, prog_cnt = 0, flags = 0;
+	enum netns_bpf_attach_type type;
+	struct bpf_prog *attached;
+	struct net *net;
+
+	if (attr->query.query_flags)
+		return -EINVAL;
+
+	type = to_netns_bpf_attach_type(attr->query.attach_type);
+	if (type < 0)
+		return -EINVAL;
+
+	net = get_net_ns_by_fd(attr->query.target_fd);
+	if (IS_ERR(net))
+		return PTR_ERR(net);
+
+	rcu_read_lock();
+	attached = rcu_dereference(net->bpf.progs[type]);
+	if (attached) {
+		prog_cnt = 1;
+		prog_id = attached->aux->id;
+	}
+	rcu_read_unlock();
+
+	put_net(net);
+
+	if (copy_to_user(&uattr->query.attach_flags, &flags, sizeof(flags)))
+		return -EFAULT;
+	if (copy_to_user(&uattr->query.prog_cnt, &prog_cnt, sizeof(prog_cnt)))
+		return -EFAULT;
+
+	if (!attr->query.prog_cnt || !prog_ids || !prog_cnt)
+		return 0;
+
+	if (copy_to_user(prog_ids, &prog_id, sizeof(u32)))
+		return -EFAULT;
+
+	return 0;
+}
+
+int netns_bpf_prog_attach(const union bpf_attr *attr, struct bpf_prog *prog)
+{
+	enum netns_bpf_attach_type type;
+	struct net *net;
+	int ret;
+
+	type = to_netns_bpf_attach_type(attr->attach_type);
+	if (type < 0)
+		return -EINVAL;
+
+	net = current->nsproxy->net_ns;
+	mutex_lock(&netns_bpf_mutex);
+	switch (type) {
+	case NETNS_BPF_FLOW_DISSECTOR:
+		ret = flow_dissector_bpf_prog_attach(net, prog);
+		break;
+	default:
+		ret = -EINVAL;
+		break;
+	}
+	mutex_unlock(&netns_bpf_mutex);
+
+	return ret;
+}
+
+/* Must be called with netns_bpf_mutex held. */
+static int __netns_bpf_prog_detach(struct net *net,
+				   enum netns_bpf_attach_type type)
+{
+	struct bpf_prog *attached;
+
+	attached = rcu_dereference_protected(net->bpf.progs[type],
+					     lockdep_is_held(&netns_bpf_mutex));
+	if (!attached)
+		return -ENOENT;
+	RCU_INIT_POINTER(net->bpf.progs[type], NULL);
+	bpf_prog_put(attached);
+	return 0;
+}
+
+int netns_bpf_prog_detach(const union bpf_attr *attr)
+{
+	enum netns_bpf_attach_type type;
+	int ret;
+
+	type = to_netns_bpf_attach_type(attr->attach_type);
+	if (type < 0)
+		return -EINVAL;
+
+	mutex_lock(&netns_bpf_mutex);
+	ret = __netns_bpf_prog_detach(current->nsproxy->net_ns, type);
+	mutex_unlock(&netns_bpf_mutex);
+
+	return ret;
+}
+
+static void __net_exit netns_bpf_pernet_pre_exit(struct net *net)
+{
+	enum netns_bpf_attach_type type;
+
+	mutex_lock(&netns_bpf_mutex);
+	for (type = 0; type < MAX_NETNS_BPF_ATTACH_TYPE; type++)
+		__netns_bpf_prog_detach(net, type);
+	mutex_unlock(&netns_bpf_mutex);
+}
+
+static struct pernet_operations netns_bpf_pernet_ops __net_initdata = {
+	.pre_exit = netns_bpf_pernet_pre_exit,
+};
+
+static int __init netns_bpf_init(void)
+{
+	return register_pernet_subsys(&netns_bpf_pernet_ops);
+}
+
+subsys_initcall(netns_bpf_init);
* Unmerged path net/core/flow_dissector.c
