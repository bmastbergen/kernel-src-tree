net/mlx5e: Unify constants for WQE_EMPTY_DS_COUNT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Maxim Mikityanskiy <maximmi@mellanox.com>
commit 97e3afd64dc2918f79026986c575f3343197e7c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/97e3afd6.failed

A constant for the number of DS in an empty WQE (i.e. a WQE without data
segments) is needed in multiple places (normal TX data path, MPWQE in
XDP), but currently we have a constant for XDP and an inline formula in
normal TX. This patch introduces a common constant.

Additionally, mlx5e_xdp_mpwqe_session_start is converted to use struct
assignment, because the code nearby is touched.

	Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit 97e3afd64dc2918f79026986c575f3343197e7c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
index 367a398562d2,737e88d49e89..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
@@@ -215,13 -200,15 +216,23 @@@ static void mlx5e_xdp_mpwqe_session_sta
  	u16 pi;
  
  	pi = mlx5e_xdpsq_get_next_pi(sq, MLX5E_XDP_MPW_MAX_WQEBBS);
- 	session->wqe = MLX5E_TX_FETCH_WQE(sq, pi);
+ 	wqe = MLX5E_TX_FETCH_WQE(sq, pi);
+ 	net_prefetchw(wqe->data);
  
++<<<<<<< HEAD
 +	prefetchw(session->wqe->data);
 +	session->ds_count  = MLX5E_XDP_TX_EMPTY_DS_COUNT;
 +	session->pkt_count = 0;
 +
 +	mlx5e_xdp_update_inline_state(sq);
++=======
+ 	*session = (struct mlx5e_xdp_mpwqe) {
+ 		.wqe = wqe,
+ 		.ds_count = MLX5E_TX_WQE_EMPTY_DS_COUNT,
+ 		.pkt_count = 0,
+ 		.inline_on = mlx5e_xdp_get_inline_state(sq, session->inline_on),
+ 	};
++>>>>>>> 97e3afd64dc2 (net/mlx5e: Unify constants for WQE_EMPTY_DS_COUNT)
  
  	stats->mpwqe++;
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
index d2c9bb371f27,e458a0ab8740..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
@@@ -256,9 -266,71 +256,73 @@@ mlx5e_tx_wqe_inline_mode(struct mlx5e_t
  	return mode;
  }
  
++<<<<<<< HEAD
++=======
+ static void mlx5e_sq_xmit_prepare(struct mlx5e_txqsq *sq, struct sk_buff *skb,
+ 				  struct mlx5e_accel_tx_state *accel,
+ 				  struct mlx5e_tx_attr *attr)
+ {
+ 	struct mlx5e_sq_stats *stats = sq->stats;
+ 
+ 	if (skb_is_gso(skb)) {
+ 		u16 ihs = mlx5e_tx_get_gso_ihs(sq, skb);
+ 
+ 		*attr = (struct mlx5e_tx_attr) {
+ 			.opcode    = MLX5_OPCODE_LSO,
+ 			.mss       = cpu_to_be16(skb_shinfo(skb)->gso_size),
+ 			.ihs       = ihs,
+ 			.num_bytes = skb->len + (skb_shinfo(skb)->gso_segs - 1) * ihs,
+ 			.headlen   = skb_headlen(skb) - ihs,
+ 		};
+ 
+ 		stats->packets += skb_shinfo(skb)->gso_segs;
+ 	} else {
+ 		u8 mode = mlx5e_tx_wqe_inline_mode(sq, skb, accel);
+ 		u16 ihs = mlx5e_calc_min_inline(mode, skb);
+ 
+ 		*attr = (struct mlx5e_tx_attr) {
+ 			.opcode    = MLX5_OPCODE_SEND,
+ 			.mss       = cpu_to_be16(0),
+ 			.ihs       = ihs,
+ 			.num_bytes = max_t(unsigned int, skb->len, ETH_ZLEN),
+ 			.headlen   = skb_headlen(skb) - ihs,
+ 		};
+ 
+ 		stats->packets++;
+ 	}
+ 
+ 	stats->bytes += attr->num_bytes;
+ }
+ 
+ static void mlx5e_sq_calc_wqe_attr(struct sk_buff *skb, const struct mlx5e_tx_attr *attr,
+ 				   struct mlx5e_tx_wqe_attr *wqe_attr)
+ {
+ 	u16 ds_cnt = MLX5E_TX_WQE_EMPTY_DS_COUNT;
+ 	u16 ds_cnt_inl = 0;
+ 
+ 	ds_cnt += !!attr->headlen + skb_shinfo(skb)->nr_frags;
+ 
+ 	if (attr->ihs) {
+ 		u16 inl = attr->ihs - INL_HDR_START_SZ;
+ 
+ 		if (skb_vlan_tag_present(skb))
+ 			inl += VLAN_HLEN;
+ 
+ 		ds_cnt_inl = DIV_ROUND_UP(inl, MLX5_SEND_WQE_DS);
+ 		ds_cnt += ds_cnt_inl;
+ 	}
+ 
+ 	*wqe_attr = (struct mlx5e_tx_wqe_attr) {
+ 		.ds_cnt     = ds_cnt,
+ 		.ds_cnt_inl = ds_cnt_inl,
+ 		.num_wqebbs = DIV_ROUND_UP(ds_cnt, MLX5_SEND_WQEBB_NUM_DS),
+ 	};
+ }
+ 
++>>>>>>> 97e3afd64dc2 (net/mlx5e: Unify constants for WQE_EMPTY_DS_COUNT)
  static inline void
  mlx5e_txwqe_complete(struct mlx5e_txqsq *sq, struct sk_buff *skb,
 -		     const struct mlx5e_tx_attr *attr,
 -		     const struct mlx5e_tx_wqe_attr *wqe_attr, u8 num_dma,
 +		     u8 opcode, u16 ds_cnt, u8 num_wqebbs, u32 num_bytes, u8 num_dma,
  		     struct mlx5e_tx_wqe_info *wi, struct mlx5_wqe_ctrl_seg *cseg,
  		     bool xmit_more)
  {
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h b/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
index 5bd77669337b..b90adde4a0ae 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
@@ -6,6 +6,8 @@
 
 #include "en.h"
 
+#define MLX5E_TX_WQE_EMPTY_DS_COUNT (sizeof(struct mlx5e_tx_wqe) / MLX5_SEND_WQE_DS)
+
 #define INL_HDR_START_SZ (sizeof(((struct mlx5_wqe_eth_seg *)NULL)->inline_hdr.start))
 
 static inline bool
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
index b7a97dc7cba2..5e6722a0f9e8 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
@@ -36,9 +36,7 @@
 #include "en/txrx.h"
 
 #define MLX5E_XDP_MIN_INLINE (ETH_HLEN + VLAN_HLEN)
-#define MLX5E_XDP_TX_EMPTY_DS_COUNT \
-	(sizeof(struct mlx5e_tx_wqe) / MLX5_SEND_WQE_DS)
-#define MLX5E_XDP_TX_DS_COUNT (MLX5E_XDP_TX_EMPTY_DS_COUNT + 1 /* SG DS */)
+#define MLX5E_XDP_TX_DS_COUNT (MLX5E_TX_WQE_EMPTY_DS_COUNT + 1 /* SG DS */)
 
 #define MLX5E_XDP_INLINE_WQE_MAX_DS_CNT 16
 #define MLX5E_XDP_INLINE_WQE_SZ_THRSD \
@@ -110,23 +108,20 @@ static inline void mlx5e_xmit_xdp_doorbell(struct mlx5e_xdpsq *sq)
 /* Enable inline WQEs to shift some load from a congested HCA (HW) to
  * a less congested cpu (SW).
  */
-static inline void mlx5e_xdp_update_inline_state(struct mlx5e_xdpsq *sq)
+static inline bool mlx5e_xdp_get_inline_state(struct mlx5e_xdpsq *sq, bool cur)
 {
 	u16 outstanding = sq->xdpi_fifo_pc - sq->xdpi_fifo_cc;
-	struct mlx5e_xdp_mpwqe *session = &sq->mpwqe;
 
 #define MLX5E_XDP_INLINE_WATERMARK_LOW	10
 #define MLX5E_XDP_INLINE_WATERMARK_HIGH 128
 
-	if (session->inline_on) {
-		if (outstanding <= MLX5E_XDP_INLINE_WATERMARK_LOW)
-			session->inline_on = 0;
-		return;
-	}
+	if (cur && outstanding <= MLX5E_XDP_INLINE_WATERMARK_LOW)
+		return false;
+
+	if (!cur && outstanding >= MLX5E_XDP_INLINE_WATERMARK_HIGH)
+		return true;
 
-	/* inline is false */
-	if (outstanding >= MLX5E_XDP_INLINE_WATERMARK_HIGH)
-		session->inline_on = 1;
+	return cur;
 }
 
 static inline bool mlx5e_xdp_mpqwe_is_full(struct mlx5e_xdp_mpwqe *session)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tx.c
