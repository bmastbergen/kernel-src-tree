net: ena: fix packet's addresses for rx_offset feature

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Shay Agroskin <shayagr@amazon.com>
commit 1396d3148bd250db880573f9ed0abe5d6fba1fce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1396d314.failed

This patch fixes two lines in which the rx_offset received by the device
wasn't taken into account:

- prefetch function:
	In our driver the copied data would reside in
	rx_info->page + rx_headroom + rx_offset

	so the prefetch function is changed accordingly.

- setting page_offset to zero for descriptors > 1:
	for every descriptor but the first, the rx_offset is zero. Hence
	the page_offset value should be set to rx_headroom.

	The previous implementation changed the value of rx_info after
	the descriptor was added to the SKB (essentially providing wrong
	page offset).

Fixes: 68f236df93a9 ("net: ena: add support for the rx offset feature")
	Signed-off-by: Shay Agroskin <shayagr@amazon.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 1396d3148bd250db880573f9ed0abe5d6fba1fce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amazon/ena/ena_netdev.c
diff --cc drivers/net/ethernet/amazon/ena/ena_netdev.c
index f8a2e41a1afa,df1884d57d1a..000000000000
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.c
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.c
@@@ -585,13 -942,12 +589,17 @@@ static int ena_alloc_rx_page(struct ena
  		return -EIO;
  	}
  	netif_dbg(rx_ring->adapter, rx_status, rx_ring->netdev,
 -		  "Allocate page %p, rx_info %p\n", page, rx_info);
 +		  "alloc page %p, rx_info %p\n", page, rx_info);
  
  	rx_info->page = page;
- 	rx_info->page_offset = 0;
  	ena_buf = &rx_info->ena_buf;
++<<<<<<< HEAD
 +	ena_buf->paddr = dma + rx_ring->rx_headroom;
 +	ena_buf->len = ENA_PAGE_SIZE;
++=======
+ 	ena_buf->paddr = dma + headroom;
+ 	ena_buf->len = ENA_PAGE_SIZE - headroom;
++>>>>>>> 1396d3148bd2 (net: ena: fix packet's addresses for rx_offset feature)
  
  	return 0;
  }
@@@ -1018,11 -1401,9 +1027,9 @@@ static struct sk_buff *ena_rx_skb(struc
  
  		skb_add_rx_frag(skb, skb_shinfo(skb)->nr_frags, rx_info->page,
  				rx_info->page_offset, len, ENA_PAGE_SIZE);
- 		/* The offset is non zero only for the first buffer */
- 		rx_info->page_offset = 0;
  
  		netif_dbg(rx_ring->adapter, rx_status, rx_ring->netdev,
 -			  "RX skb updated. len %d. data_len %d\n",
 +			  "rx skb updated. len %d. data_len %d\n",
  			  skb->len, skb->data_len);
  
  		rx_info->page = NULL;
* Unmerged path drivers/net/ethernet/amazon/ena/ena_netdev.c
