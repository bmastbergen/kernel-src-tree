mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 67a929e097b774c69253c8b61ef9eb8a42b463a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/67a929e0.failed

We only support the generic GUP now, so rename the config option to
be more clear, and always use the mm/Kconfig definition of the
symbol and select it from the arch Kconfigs.

Link: http://lkml.kernel.org/r/20190625143715.1689-11-hch@lst.de
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Khalid Aziz <khalid.aziz@oracle.com>
	Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
	Cc: Andrey Konovalov <andreyknvl@google.com>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: David Miller <davem@davemloft.net>
	Cc: James Hogan <jhogan@kernel.org>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Nicholas Piggin <npiggin@gmail.com>
	Cc: Paul Burton <paul.burton@mips.com>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Rich Felker <dalias@libc.org>
	Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 67a929e097b774c69253c8b61ef9eb8a42b463a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/Kconfig
#	arch/mips/Kconfig
#	arch/s390/Kconfig
#	arch/sh/Kconfig
#	arch/sparc/Kconfig
#	arch/x86/Kconfig
#	mm/gup.c
diff --cc arch/arm/Kconfig
index 2e4a73955452,2bf1ce39a96d..000000000000
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@@ -66,12 -75,12 +66,19 @@@ config AR
  	select HAVE_DYNAMIC_FTRACE_WITH_REGS if HAVE_DYNAMIC_FTRACE
  	select HAVE_EFFICIENT_UNALIGNED_ACCESS if (CPU_V6 || CPU_V6K || CPU_V7) && MMU
  	select HAVE_EXIT_THREAD
++<<<<<<< HEAD
 +	select HAVE_FTRACE_MCOUNT_RECORD if (!XIP_KERNEL)
 +	select HAVE_FUNCTION_GRAPH_TRACER if (!THUMB2_KERNEL)
 +	select HAVE_FUNCTION_TRACER if (!XIP_KERNEL)
++=======
+ 	select HAVE_FAST_GUP if ARM_LPAE
+ 	select HAVE_FTRACE_MCOUNT_RECORD if !XIP_KERNEL
+ 	select HAVE_FUNCTION_GRAPH_TRACER if !THUMB2_KERNEL && !CC_IS_CLANG
+ 	select HAVE_FUNCTION_TRACER if !XIP_KERNEL
++>>>>>>> 67a929e097b7 (mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP)
  	select HAVE_GCC_PLUGINS
 -	select HAVE_HW_BREAKPOINT if PERF_EVENTS && (CPU_V6 || CPU_V6K || CPU_V7)
 +	select HAVE_GENERIC_DMA_COHERENT
 +	select HAVE_HW_BREAKPOINT if (PERF_EVENTS && (CPU_V6 || CPU_V6K || CPU_V7))
  	select HAVE_IDE if PCI || ISA || PCMCIA
  	select HAVE_IRQ_TIME_ACCOUNTING
  	select HAVE_KERNEL_GZIP
diff --cc arch/mips/Kconfig
index 8ef87c03cf44,7957d3457156..000000000000
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@@ -52,8 -57,8 +53,11 @@@ config MIP
  	select HAVE_FTRACE_MCOUNT_RECORD
  	select HAVE_FUNCTION_GRAPH_TRACER
  	select HAVE_FUNCTION_TRACER
++<<<<<<< HEAD
 +	select HAVE_GENERIC_DMA_COHERENT
++=======
++>>>>>>> 67a929e097b7 (mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP)
  	select HAVE_IDE
 -	select HAVE_IOREMAP_PROT
  	select HAVE_IRQ_EXIT_ON_IRQ_STACK
  	select HAVE_IRQ_TIME_ACCOUNTING
  	select HAVE_KPROBES
diff --cc arch/s390/Kconfig
index 247a8ecc8c7b,5d8570ed6cab..000000000000
--- a/arch/s390/Kconfig
+++ b/arch/s390/Kconfig
@@@ -136,13 -139,14 +136,18 @@@ config S39
  	select HAVE_DMA_CONTIGUOUS
  	select HAVE_DYNAMIC_FTRACE
  	select HAVE_DYNAMIC_FTRACE_WITH_REGS
+ 	select HAVE_FAST_GUP
  	select HAVE_EFFICIENT_UNALIGNED_ACCESS
 -	select HAVE_FENTRY
  	select HAVE_FTRACE_MCOUNT_RECORD
  	select HAVE_FUNCTION_GRAPH_TRACER
  	select HAVE_FUNCTION_TRACER
  	select HAVE_FUTEX_CMPXCHG if FUTEX
++<<<<<<< HEAD
 +	select HAVE_GCC_PLUGINS if BROKEN
 +	select HAVE_GENERIC_GUP
++=======
+ 	select HAVE_GCC_PLUGINS
++>>>>>>> 67a929e097b7 (mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP)
  	select HAVE_KERNEL_BZIP2
  	select HAVE_KERNEL_GZIP
  	select HAVE_KERNEL_LZ4
diff --cc arch/sh/Kconfig
index f0c3c20df572,31a7d12db705..000000000000
--- a/arch/sh/Kconfig
+++ b/arch/sh/Kconfig
@@@ -15,6 -15,7 +15,10 @@@ config SUPER
  	select HAVE_ARCH_TRACEHOOK
  	select HAVE_PERF_EVENTS
  	select HAVE_DEBUG_BUGVERBOSE
++<<<<<<< HEAD
++=======
+ 	select HAVE_FAST_GUP if MMU
++>>>>>>> 67a929e097b7 (mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP)
  	select ARCH_HAVE_CUSTOM_GPIO_H
  	select ARCH_HAVE_NMI_SAFE_CMPXCHG if (GUSA_RB || CPU_SH4A)
  	select ARCH_HAS_GCOV_PROFILE_ALL
diff --cc arch/sparc/Kconfig
index 12d490d796fe,e9f5d62e9817..000000000000
--- a/arch/sparc/Kconfig
+++ b/arch/sparc/Kconfig
@@@ -26,6 -28,7 +26,10 @@@ config SPAR
  	select RTC_DRV_M48T59
  	select RTC_SYSTOHC
  	select HAVE_ARCH_JUMP_LABEL if SPARC64
++<<<<<<< HEAD
++=======
+ 	select HAVE_FAST_GUP if SPARC64
++>>>>>>> 67a929e097b7 (mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP)
  	select GENERIC_IRQ_SHOW
  	select ARCH_WANT_IPC_PARSE_VERSION
  	select GENERIC_PCI_IOMAP
diff --cc arch/x86/Kconfig
index 3fc0a4c91af5,9df2d1cb7a9e..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -157,10 -155,11 +157,11 @@@ config X8
  	select HAVE_DMA_CONTIGUOUS
  	select HAVE_DYNAMIC_FTRACE
  	select HAVE_DYNAMIC_FTRACE_WITH_REGS
 +	select HAVE_DYNAMIC_FTRACE_WITH_DIRECT_CALLS
  	select HAVE_EBPF_JIT
  	select HAVE_EFFICIENT_UNALIGNED_ACCESS
 -	select HAVE_EISA
  	select HAVE_EXIT_THREAD
+ 	select HAVE_FAST_GUP
  	select HAVE_FENTRY			if X86_64 || DYNAMIC_FTRACE
  	select HAVE_FTRACE_MCOUNT_RECORD
  	select HAVE_FUNCTION_GRAPH_TRACER
@@@ -2999,29 -2907,7 +3000,32 @@@ config HAVE_ATOMIC_IOMA
  
  config X86_DEV_DMA_OPS
  	bool
 +	depends on X86_64 || STA2X11
  
 +config X86_DMA_REMAP
 +	bool
 +	depends on STA2X11
 +
++<<<<<<< HEAD
 +config HAVE_GENERIC_GUP
 +	def_bool y
 +
 +source "net/Kconfig"
 +
 +source "drivers/Kconfig"
 +
++=======
++>>>>>>> 67a929e097b7 (mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP)
  source "drivers/firmware/Kconfig"
  
 +source "fs/Kconfig"
 +
 +source "arch/x86/Kconfig.debug"
 +
 +source "security/Kconfig"
 +
 +source "crypto/Kconfig"
 +
  source "arch/x86/kvm/Kconfig"
 +
 +source "lib/Kconfig"
diff --cc mm/gup.c
index 3ba37043928a,2f69b30a11d3..000000000000
--- a/mm/gup.c
+++ b/mm/gup.c
@@@ -1678,12 -1683,55 +1678,51 @@@ struct page *get_dump_page(unsigned lon
   *
   * This code is based heavily on the PowerPC implementation by Nick Piggin.
   */
++<<<<<<< HEAD
 +#ifdef CONFIG_HAVE_GENERIC_GUP
++=======
+ #ifdef CONFIG_HAVE_FAST_GUP
+ #ifdef CONFIG_GUP_GET_PTE_LOW_HIGH
+ /*
+  * WARNING: only to be used in the get_user_pages_fast() implementation.
+  *
+  * With get_user_pages_fast(), we walk down the pagetables without taking any
+  * locks.  For this we would like to load the pointers atomically, but sometimes
+  * that is not possible (e.g. without expensive cmpxchg8b on x86_32 PAE).  What
+  * we do have is the guarantee that a PTE will only either go from not present
+  * to present, or present to not present or both -- it will not switch to a
+  * completely different present page without a TLB flush in between; something
+  * that we are blocking by holding interrupts off.
+  *
+  * Setting ptes from not present to present goes:
+  *
+  *   ptep->pte_high = h;
+  *   smp_wmb();
+  *   ptep->pte_low = l;
+  *
+  * And present to not present goes:
+  *
+  *   ptep->pte_low = 0;
+  *   smp_wmb();
+  *   ptep->pte_high = 0;
+  *
+  * We must ensure here that the load of pte_low sees 'l' IFF pte_high sees 'h'.
+  * We load pte_high *after* loading pte_low, which ensures we don't see an older
+  * value of pte_high.  *Then* we recheck pte_low, which ensures that we haven't
+  * picked up a changed pte high. We might have gotten rubbish values from
+  * pte_low and pte_high, but we are guaranteed that pte_low will not have the
+  * present bit set *unless* it is 'l'. Because get_user_pages_fast() only
+  * operates on present ptes we're safe.
+  */
+ static inline pte_t gup_get_pte(pte_t *ptep)
+ {
+ 	pte_t pte;
++>>>>>>> 67a929e097b7 (mm: rename CONFIG_HAVE_GENERIC_GUP to CONFIG_HAVE_FAST_GUP)
  
 -	do {
 -		pte.pte_low = ptep->pte_low;
 -		smp_rmb();
 -		pte.pte_high = ptep->pte_high;
 -		smp_rmb();
 -	} while (unlikely(pte.pte_low != ptep->pte_low));
 -
 -	return pte;
 -}
 -#else /* CONFIG_GUP_GET_PTE_LOW_HIGH */
 +#ifndef gup_get_pte
  /*
 - * We require that the PTE can be read atomically.
 + * We assume that the PTE can be read atomically. If this is not the case for
 + * your architecture, please provide the helper.
   */
  static inline pte_t gup_get_pte(pte_t *ptep)
  {
* Unmerged path arch/arm/Kconfig
diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index d3f3af6e3b68..c1f6bbe721c9 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -133,6 +133,7 @@ config ARM64
 	select HAVE_DMA_CONTIGUOUS
 	select HAVE_DYNAMIC_FTRACE
 	select HAVE_EFFICIENT_UNALIGNED_ACCESS
+	select HAVE_FAST_GUP
 	select HAVE_FTRACE_MCOUNT_RECORD
 	select HAVE_FUNCTION_TRACER
 	select HAVE_FUNCTION_GRAPH_TRACER
@@ -255,9 +256,6 @@ config ZONE_DMA32
 	bool "Support DMA32 zone" if EXPERT
 	default y
 
-config HAVE_GENERIC_GUP
-	def_bool y
-
 config ARCH_ENABLE_MEMORY_HOTPLUG
 	def_bool y
 
* Unmerged path arch/mips/Kconfig
diff --git a/arch/powerpc/Kconfig b/arch/powerpc/Kconfig
index f95f7924e00e..18c91d90f9ce 100644
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@ -183,11 +183,11 @@ config PPC
 	select HAVE_DYNAMIC_FTRACE_WITH_REGS	if MPROFILE_KERNEL
 	select HAVE_EBPF_JIT			if PPC64
 	select HAVE_EFFICIENT_UNALIGNED_ACCESS	if !(CPU_LITTLE_ENDIAN && POWER7_CPU)
+	select HAVE_FAST_GUP
 	select HAVE_FTRACE_MCOUNT_RECORD
 	select HAVE_FUNCTION_GRAPH_TRACER
 	select HAVE_FUNCTION_TRACER
 	select HAVE_GCC_PLUGINS			if GCC_VERSION >= 50200   # plugin support on gcc <= 5.1 is buggy on PPC
-	select HAVE_GENERIC_GUP
 	select HAVE_HW_BREAKPOINT		if PERF_EVENTS && (PPC_BOOK3S || PPC_8xx)
 	select HAVE_IDE
 	select HAVE_IOREMAP_PROT
* Unmerged path arch/s390/Kconfig
* Unmerged path arch/sh/Kconfig
* Unmerged path arch/sparc/Kconfig
* Unmerged path arch/x86/Kconfig
diff --git a/mm/Kconfig b/mm/Kconfig
index ba2bdef1230d..15d3587e6bf9 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -130,7 +130,7 @@ config HAVE_MEMBLOCK_NODE_MAP
 config HAVE_MEMBLOCK_PHYS_MAP
 	bool
 
-config HAVE_GENERIC_GUP
+config HAVE_FAST_GUP
 	bool
 
 config ARCH_DISCARD_MEMBLOCK
* Unmerged path mm/gup.c
