cgroup: fold cgroup1_mount() into cgroup1_get_tree()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 7feeef58690a5ea8c5033d43e696ef41b28d82eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7feeef58.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 7feeef58690a5ea8c5033d43e696ef41b28d82eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/cgroup/cgroup-internal.h
#	kernel/cgroup/cgroup.c
diff --cc kernel/cgroup/cgroup-internal.h
index ce1c1553c696,37836d598ff8..000000000000
--- a/kernel/cgroup/cgroup-internal.h
+++ b/kernel/cgroup/cgroup-internal.h
@@@ -257,8 -265,7 +257,13 @@@ bool cgroup1_ssid_disabled(int ssid)
  void cgroup1_pidlist_destroy_all(struct cgroup *cgrp);
  void cgroup1_release_agent(struct work_struct *work);
  void cgroup1_check_for_release(struct cgroup *cgrp);
++<<<<<<< HEAD
 +struct dentry *cgroup1_mount(struct file_system_type *fs_type, int flags,
 +			     void *data, unsigned long magic,
 +			     struct cgroup_namespace *ns);
++=======
+ int cgroup1_get_tree(struct fs_context *fc);
+ int cgroup1_reconfigure(struct fs_context *ctx);
++>>>>>>> 7feeef58690a (cgroup: fold cgroup1_mount() into cgroup1_get_tree())
  
  #endif /* __CGROUP_INTERNAL_H */
diff --cc kernel/cgroup/cgroup.c
index 9e08519ae6db,0652f74064a2..000000000000
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@@ -2050,45 -2068,93 +2050,94 @@@ struct dentry *cgroup_do_mount(struct f
  	return dentry;
  }
  
 -/*
 - * Destroy a cgroup filesystem context.
 - */
 -static void cgroup_fs_context_free(struct fs_context *fc)
 -{
 -	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
 -
 -	kfree(ctx);
 -}
 -
 -static int cgroup_parse_monolithic(struct fs_context *fc, void *data)
 -{
 -	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
 -
 -	ctx->data = data;
 -	if (ctx->data)
 -		security_sb_eat_lsm_opts(ctx->data, &fc->security);
 -	return 0;
 -}
 -
 -static int cgroup_get_tree(struct fs_context *fc)
 +static struct dentry *cgroup_mount(struct file_system_type *fs_type,
 +			 int flags, const char *unused_dev_name,
 +			 void *data)
  {
  	struct cgroup_namespace *ns = current->nsproxy->cgroup_ns;
 -	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
 -	unsigned int root_flags;
 -	struct dentry *root;
 +	struct dentry *dentry;
  	int ret;
  
 +	get_cgroup_ns(ns);
 +
  	/* Check if the caller has permission to mount. */
 -	if (!ns_capable(ns->user_ns, CAP_SYS_ADMIN))
 -		return -EPERM;
 +	if (!ns_capable(ns->user_ns, CAP_SYS_ADMIN)) {
 +		put_cgroup_ns(ns);
 +		return ERR_PTR(-EPERM);
 +	}
  
 -	ret = parse_cgroup_root_flags(ctx->data, &root_flags);
 -	if (ret)
 -		return ret;
 +	if (fs_type == &cgroup2_fs_type) {
 +		unsigned int root_flags;
  
 -	cgrp_dfl_visible = true;
 -	cgroup_get_live(&cgrp_dfl_root.cgrp);
 +		ret = parse_cgroup_root_flags(data, &root_flags);
 +		if (ret) {
 +			put_cgroup_ns(ns);
 +			return ERR_PTR(ret);
 +		}
 +
 +		cgrp_dfl_visible = true;
 +		cgroup_get_live(&cgrp_dfl_root.cgrp);
  
 -	root = cgroup_do_mount(&cgroup2_fs_type, fc->sb_flags, &cgrp_dfl_root,
 +		dentry = cgroup_do_mount(&cgroup2_fs_type, flags, &cgrp_dfl_root,
  					 CGROUP2_SUPER_MAGIC, ns);
++<<<<<<< HEAD
 +		if (!IS_ERR(dentry))
 +			apply_cgroup_root_flags(root_flags);
 +	} else {
 +		dentry = cgroup1_mount(&cgroup_fs_type, flags, data,
 +				       CGROUP_SUPER_MAGIC, ns);
 +	}
 +
 +	put_cgroup_ns(ns);
 +	return dentry;
++=======
+ 	if (IS_ERR(root))
+ 		return PTR_ERR(root);
+ 
+ 	apply_cgroup_root_flags(root_flags);
+ 	fc->root = root;
+ 	return 0;
+ }
+ 
+ static const struct fs_context_operations cgroup_fs_context_ops = {
+ 	.free		= cgroup_fs_context_free,
+ 	.parse_monolithic = cgroup_parse_monolithic,
+ 	.get_tree	= cgroup_get_tree,
+ 	.reconfigure	= cgroup_reconfigure,
+ };
+ 
+ static const struct fs_context_operations cgroup1_fs_context_ops = {
+ 	.free		= cgroup_fs_context_free,
+ 	.parse_monolithic = cgroup_parse_monolithic,
+ 	.get_tree	= cgroup1_get_tree,
+ 	.reconfigure	= cgroup1_reconfigure,
+ };
+ 
+ /*
+  * Initialise the cgroup filesystem creation/reconfiguration context.
+  */
+ static int cgroup_init_fs_context(struct fs_context *fc)
+ {
+ 	struct cgroup_fs_context *ctx;
+ 
+ 	ctx = kzalloc(sizeof(struct cgroup_fs_context), GFP_KERNEL);
+ 	if (!ctx)
+ 		return -ENOMEM;
+ 
+ 	/*
+ 	 * The first time anyone tries to mount a cgroup, enable the list
+ 	 * linking each css_set to its tasks and fix up all existing tasks.
+ 	 */
+ 	if (!use_task_css_set_links)
+ 		cgroup_enable_task_cg_lists();
+ 
+ 	fc->fs_private = ctx;
+ 	if (fc->fs_type == &cgroup2_fs_type)
+ 		fc->ops = &cgroup_fs_context_ops;
+ 	else
+ 		fc->ops = &cgroup1_fs_context_ops;
+ 	return 0;
++>>>>>>> 7feeef58690a (cgroup: fold cgroup1_mount() into cgroup1_get_tree())
  }
  
  static void cgroup_kill_sb(struct super_block *sb)
* Unmerged path kernel/cgroup/cgroup-internal.h
diff --git a/kernel/cgroup/cgroup-v1.c b/kernel/cgroup/cgroup-v1.c
index dd94e2a4c22e..1dfdb08349aa 100644
--- a/kernel/cgroup/cgroup-v1.c
+++ b/kernel/cgroup/cgroup-v1.c
@@ -1079,20 +1079,24 @@ struct kernfs_syscall_ops cgroup1_kf_syscall_ops = {
 	.show_path		= cgroup_show_path,
 };
 
-struct dentry *cgroup1_mount(struct file_system_type *fs_type, int flags,
-			     void *data, unsigned long magic,
-			     struct cgroup_namespace *ns)
+int cgroup1_get_tree(struct fs_context *fc)
 {
+	struct cgroup_namespace *ns = current->nsproxy->cgroup_ns;
+	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
 	struct cgroup_sb_opts opts;
 	struct cgroup_root *root;
 	struct cgroup_subsys *ss;
 	struct dentry *dentry;
 	int i, ret;
 
+	/* Check if the caller has permission to mount. */
+	if (!ns_capable(ns->user_ns, CAP_SYS_ADMIN))
+		return -EPERM;
+
 	cgroup_lock_and_drain_offline(&cgrp_dfl_root.cgrp);
 
 	/* First find the desired set of subsystems */
-	ret = parse_cgroupfs_options(data, &opts);
+	ret = parse_cgroupfs_options(ctx->data, &opts);
 	if (ret)
 		goto out_unlock;
 
@@ -1194,19 +1198,23 @@ struct dentry *cgroup1_mount(struct file_system_type *fs_type, int flags,
 	kfree(opts.name);
 
 	if (ret)
-		return ERR_PTR(ret);
+		return ret;
 
-	dentry = cgroup_do_mount(&cgroup_fs_type, flags, root,
+	dentry = cgroup_do_mount(&cgroup_fs_type, fc->sb_flags, root,
 				 CGROUP_SUPER_MAGIC, ns);
+	if (IS_ERR(dentry))
+		return PTR_ERR(dentry);
 
-	if (!IS_ERR(dentry) && percpu_ref_is_dying(&root->cgrp.self.refcnt)) {
+	if (percpu_ref_is_dying(&root->cgrp.self.refcnt)) {
 		struct super_block *sb = dentry->d_sb;
 		dput(dentry);
 		deactivate_locked_super(sb);
 		msleep(10);
-		dentry = ERR_PTR(restart_syscall());
+		return restart_syscall();
 	}
-	return dentry;
+
+	fc->root = dentry;
+	return 0;
 }
 
 static int __init cgroup1_wq_init(void)
* Unmerged path kernel/cgroup/cgroup.c
