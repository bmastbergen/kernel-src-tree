block: move the blk-mq calls out of part_in_flight{,_rw}

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [block] block: move the blk-mq calls out of part_in_flight{, _rw} (Ming Lei) [1881760]
Rebuild_FUZZ: 99.12%
commit-author Christoph Hellwig <hch@lst.de>
commit b2f609e191edc9c7a9dec603318461eeb23f8a6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b2f609e1.failed

Don't bother to call part_in_flight / part_in_flight_rw on blk-mq
devices, just call the blk-mq versions directly.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit b2f609e191edc9c7a9dec603318461eeb23f8a6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/genhd.c
diff --cc block/genhd.c
index a40c6bd653e9,56e0560738c4..000000000000
--- a/block/genhd.c
+++ b/block/genhd.c
@@@ -1248,6 -1279,74 +1238,77 @@@ static ssize_t disk_ro_show(struct devi
  	return sprintf(buf, "%d\n", get_disk_ro(disk) ? 1 : 0);
  }
  
++<<<<<<< HEAD
++=======
+ ssize_t part_size_show(struct device *dev,
+ 		       struct device_attribute *attr, char *buf)
+ {
+ 	struct hd_struct *p = dev_to_part(dev);
+ 
+ 	return sprintf(buf, "%llu\n",
+ 		(unsigned long long)part_nr_sects_read(p));
+ }
+ 
+ ssize_t part_stat_show(struct device *dev,
+ 		       struct device_attribute *attr, char *buf)
+ {
+ 	struct hd_struct *p = dev_to_part(dev);
+ 	struct request_queue *q = part_to_disk(p)->queue;
+ 	struct disk_stats stat;
+ 	unsigned int inflight;
+ 
+ 	part_stat_read_all(p, &stat);
+ 	if (queue_is_mq(q))
+ 		inflight = blk_mq_in_flight(q, p);
+ 	else
+ 		inflight = part_in_flight(q, p);
+ 
+ 	return sprintf(buf,
+ 		"%8lu %8lu %8llu %8u "
+ 		"%8lu %8lu %8llu %8u "
+ 		"%8u %8u %8u "
+ 		"%8lu %8lu %8llu %8u "
+ 		"%8lu %8u"
+ 		"\n",
+ 		stat.ios[STAT_READ],
+ 		stat.merges[STAT_READ],
+ 		(unsigned long long)stat.sectors[STAT_READ],
+ 		(unsigned int)div_u64(stat.nsecs[STAT_READ], NSEC_PER_MSEC),
+ 		stat.ios[STAT_WRITE],
+ 		stat.merges[STAT_WRITE],
+ 		(unsigned long long)stat.sectors[STAT_WRITE],
+ 		(unsigned int)div_u64(stat.nsecs[STAT_WRITE], NSEC_PER_MSEC),
+ 		inflight,
+ 		jiffies_to_msecs(stat.io_ticks),
+ 		(unsigned int)div_u64(stat.nsecs[STAT_READ] +
+ 				      stat.nsecs[STAT_WRITE] +
+ 				      stat.nsecs[STAT_DISCARD] +
+ 				      stat.nsecs[STAT_FLUSH],
+ 						NSEC_PER_MSEC),
+ 		stat.ios[STAT_DISCARD],
+ 		stat.merges[STAT_DISCARD],
+ 		(unsigned long long)stat.sectors[STAT_DISCARD],
+ 		(unsigned int)div_u64(stat.nsecs[STAT_DISCARD], NSEC_PER_MSEC),
+ 		stat.ios[STAT_FLUSH],
+ 		(unsigned int)div_u64(stat.nsecs[STAT_FLUSH], NSEC_PER_MSEC));
+ }
+ 
+ ssize_t part_inflight_show(struct device *dev, struct device_attribute *attr,
+ 			   char *buf)
+ {
+ 	struct hd_struct *p = dev_to_part(dev);
+ 	struct request_queue *q = part_to_disk(p)->queue;
+ 	unsigned int inflight[2];
+ 
+ 	if (queue_is_mq(q))
+ 		blk_mq_in_flight_rw(q, p, inflight);
+ 	else
+ 		part_in_flight_rw(q, p, inflight);
+ 
+ 	return sprintf(buf, "%8u %8u\n", inflight[0], inflight[1]);
+ }
+ 
++>>>>>>> b2f609e191ed (block: move the blk-mq calls out of part_in_flight{,_rw})
  static ssize_t disk_capability_show(struct device *dev,
  				    struct device_attribute *attr, char *buf)
  {
@@@ -1495,7 -1597,12 +1556,16 @@@ static int diskstats_show(struct seq_fi
  
  	disk_part_iter_init(&piter, gp, DISK_PITER_INCL_EMPTY_PART0);
  	while ((hd = disk_part_iter_next(&piter))) {
++<<<<<<< HEAD
 +		inflight = part_in_flight(gp->queue, hd);
++=======
+ 		part_stat_read_all(hd, &stat);
+ 		if (queue_is_mq(gp->queue))
+ 			inflight = blk_mq_in_flight(gp->queue, hd);
+ 		else
+ 			inflight = part_in_flight(gp->queue, hd);
+ 
++>>>>>>> b2f609e191ed (block: move the blk-mq calls out of part_in_flight{,_rw})
  		seq_printf(seqf, "%4d %7d %s "
  			   "%lu %lu %lu %u "
  			   "%lu %lu %lu %u "
* Unmerged path block/genhd.c
