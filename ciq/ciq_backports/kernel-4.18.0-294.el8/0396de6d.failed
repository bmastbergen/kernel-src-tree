powerpc/sstep: Add tests for prefixed floating-point load/stores

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jordan Niethe <jniethe5@gmail.com>
commit 0396de6d8561c721b03fce386eb9682b37a26013
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0396de6d.failed

Add tests for the prefixed versions of the floating-point load/stores
that are currently tested. This includes the following instructions:
  * Prefixed Load Floating-Point Single (plfs)
  * Prefixed Load Floating-Point Double (plfd)
  * Prefixed Store Floating-Point Single (pstfs)
  * Prefixed Store Floating-Point Double (pstfd)

Skip the new tests if ISA v3.10 is unsupported.

	Signed-off-by: Jordan Niethe <jniethe5@gmail.com>
[mpe: Fix conflicts with ppc-opcode.h changes]
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200525025923.19843-2-jniethe5@gmail.com
(cherry picked from commit 0396de6d8561c721b03fce386eb9682b37a26013)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/ppc-opcode.h
#	arch/powerpc/lib/test_emulate_step.c
diff --cc arch/powerpc/include/asm/ppc-opcode.h
index 8fe0becd8b4e,4c0bdafb6a7b..000000000000
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@@ -328,56 -255,27 +328,71 @@@
  #define PPC_INST_ADDI			0x38000000
  #define PPC_INST_ADDIS			0x3c000000
  #define PPC_INST_ADD			0x7c000214
 +#define PPC_INST_ADDC			0x7c000014
 +#define PPC_INST_SUB			0x7c000050
  #define PPC_INST_BLR			0x4e800020
 +#define PPC_INST_BLRL			0x4e800021
  #define PPC_INST_BCTR			0x4e800420
 -#define PPC_INST_BCTRL			0x4e800421
 +#define PPC_INST_MULLD			0x7c0001d2
 +#define PPC_INST_MULLW			0x7c0001d6
 +#define PPC_INST_MULHWU			0x7c000016
 +#define PPC_INST_MULLI			0x1c000000
 +#define PPC_INST_MADDHD			0x10000030
 +#define PPC_INST_MADDHDU		0x10000031
 +#define PPC_INST_MADDLD			0x10000033
 +#define PPC_INST_DIVWU			0x7c000396
  #define PPC_INST_DIVD			0x7c0003d2
 +#define PPC_INST_DIVDU			0x7c000392
 +#define PPC_INST_RLWINM			0x54000000
 +#define PPC_INST_RLWINM_DOT		0x54000001
 +#define PPC_INST_RLWIMI			0x50000000
 +#define PPC_INST_RLDICL			0x78000000
  #define PPC_INST_RLDICR			0x78000004
 +#define PPC_INST_SLW			0x7c000030
 +#define PPC_INST_SLD			0x7c000036
 +#define PPC_INST_SRW			0x7c000430
 +#define PPC_INST_SRAW			0x7c000630
 +#define PPC_INST_SRAWI			0x7c000670
 +#define PPC_INST_SRD			0x7c000436
 +#define PPC_INST_SRAD			0x7c000634
 +#define PPC_INST_SRADI			0x7c000674
 +#define PPC_INST_AND			0x7c000038
 +#define PPC_INST_ANDDOT			0x7c000039
 +#define PPC_INST_OR			0x7c000378
 +#define PPC_INST_XOR			0x7c000278
 +#define PPC_INST_ANDI			0x70000000
  #define PPC_INST_ORI			0x60000000
  #define PPC_INST_ORIS			0x64000000
 +#define PPC_INST_XORI			0x68000000
 +#define PPC_INST_XORIS			0x6c000000
 +#define PPC_INST_NEG			0x7c0000d0
 +#define PPC_INST_EXTSW			0x7c0007b4
  #define PPC_INST_BRANCH			0x48000000
  #define PPC_INST_BRANCH_COND		0x40800000
++<<<<<<< HEAD
 +#define PPC_INST_LBZCIX			0x7c0006aa
 +#define PPC_INST_STBCIX			0x7c0007aa
 +#define PPC_INST_LWZX			0x7c00002e
 +#define PPC_INST_LFSX			0x7c00042e
 +#define PPC_INST_STFSX			0x7c00052e
 +#define PPC_INST_LFDX			0x7c0004ae
 +#define PPC_INST_STFDX			0x7c0005ae
 +#define PPC_INST_LVX			0x7c0000ce
 +#define PPC_INST_STVX			0x7c0001ce
++=======
+ 
+ /* Prefixes */
+ #define PPC_INST_LFS			0xc0000000
+ #define PPC_INST_STFS			0xd0000000
+ #define PPC_INST_LFD			0xc8000000
+ #define PPC_INST_STFD			0xd8000000
+ #define PPC_PREFIX_MLS			0x06000000
+ #define PPC_PREFIX_8LS			0x04000000
+ 
+ /* Prefixed instructions */
+ #define PPC_INST_PLD			0xe4000000
+ #define PPC_INST_PSTD			0xf4000000
++>>>>>>> 0396de6d8561 (powerpc/sstep: Add tests for prefixed floating-point load/stores)
  
  /* macros to insert fields into opcodes */
  #define ___PPC_RA(a)	(((a) & 0x1f) << 16)
diff --cc arch/powerpc/lib/test_emulate_step.c
index 91111c36f589,0059290f0fed..000000000000
--- a/arch/powerpc/lib/test_emulate_step.c
+++ b/arch/powerpc/lib/test_emulate_step.c
@@@ -65,6 -19,34 +65,37 @@@
  #define IGNORE_XER	(0x1UL << 32)
  #define IGNORE_CCR	(0x1UL << 33)
  
++<<<<<<< HEAD
++=======
+ #define TEST_PLD(r, base, i, pr) \
+ 	ppc_inst_prefix(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_H(i), \
+ 			PPC_INST_PLD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
+ 
+ #define TEST_PLWZ(r, base, i, pr) \
+ 	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
+ 			PPC_RAW_LWZ(r, base, i))
+ 
+ #define TEST_PSTD(r, base, i, pr) \
+ 	ppc_inst_prefix(PPC_PREFIX_8LS | __PPC_PRFX_R(pr) | IMM_H(i), \
+ 			PPC_INST_PSTD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
+ 
+ #define TEST_PLFS(r, base, i, pr) \
+ 	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
+ 			PPC_INST_LFS | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
+ 
+ #define TEST_PSTFS(r, base, i, pr) \
+ 	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
+ 			PPC_INST_STFS | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
+ 
+ #define TEST_PLFD(r, base, i, pr) \
+ 	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
+ 			PPC_INST_LFD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
+ 
+ #define TEST_PSTFD(r, base, i, pr) \
+ 	ppc_inst_prefix(PPC_PREFIX_MLS | __PPC_PRFX_R(pr) | IMM_H(i), \
+ 			PPC_INST_STFD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
+ 
++>>>>>>> 0396de6d8561 (powerpc/sstep: Add tests for prefixed floating-point load/stores)
  static void __init init_pt_regs(struct pt_regs *regs)
  {
  	static unsigned long msr;
@@@ -450,12 -608,17 +587,14 @@@ static void __init test_lxvd2x_stxvd2x(
  static void __init run_tests_load_store(void)
  {
  	test_ld();
 -	test_pld();
  	test_lwz();
 -	test_plwz();
  	test_lwzx();
  	test_std();
 -	test_pstd();
  	test_ldarx_stdcx();
  	test_lfsx_stfsx();
+ 	test_plfs_pstfs();
  	test_lfdx_stfdx();
+ 	test_plfd_pstfd();
  	test_lvx_stvx();
  	test_lxvd2x_stxvd2x();
  }
* Unmerged path arch/powerpc/include/asm/ppc-opcode.h
* Unmerged path arch/powerpc/lib/test_emulate_step.c
