mm/page_alloc.c: move ifdefery out of free_area_init_core

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Oscar Salvador <osalvador@suse.de>
commit ace1db39768cdc58f6b157d99ae5958ad34ffff8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ace1db39.failed

Patch series "Refactor free_area_init_core and add
free_area_init_core_hotplug", v6.

This patchset does three things:

 1) Clean up/refactor free_area_init_core/free_area_init_node
    by moving the ifdefery out of the functions.
 2) Move the pgdat/zone initialization in free_area_init_core to its
    own function.
 3) Introduce free_area_init_core_hotplug, a small subset of
    free_area_init_core, which is only called from memhotlug code path. In this
    way, we have:

    free_area_init_core: called during early initialization
    free_area_init_core_hotplug: called whenever a new node is allocated/re-used (memhotplug path)

This patch (of 5):

Moving the #ifdefs out of the function makes it easier to follow.

Link: http://lkml.kernel.org/r/20180730101757.28058-2-osalvador@techadventures.net
	Signed-off-by: Oscar Salvador <osalvador@suse.de>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Reviewed-by: Pavel Tatashin <pasha.tatashin@oracle.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Pasha Tatashin <Pavel.Tatashin@microsoft.com>
	Cc: Mel Gorman <mgorman@techsingularity.net>
	Cc: Aaron Lu <aaron.lu@intel.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: David Hildenbrand <david@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ace1db39768cdc58f6b157d99ae5958ad34ffff8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index a1541a564e09,455cc3bfae99..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -6549,19 -6239,17 +6580,25 @@@ static void __paginginit free_area_init
  	int nid = pgdat->node_id;
  
  	pgdat_resize_init(pgdat);
++<<<<<<< HEAD
 +#ifdef CONFIG_TRANSPARENT_HUGEPAGE
 +	spin_lock_init(&pgdat->split_queue_lock);
 +	INIT_LIST_HEAD(&pgdat->split_queue);
 +	pgdat->split_queue_len = 0;
 +#endif
++=======
+ 
+ 	pgdat_init_numabalancing(pgdat);
+ 	pgdat_init_split_queue(pgdat);
+ 	pgdat_init_kcompactd(pgdat);
+ 
++>>>>>>> ace1db39768c (mm/page_alloc.c: move ifdefery out of free_area_init_core)
  	init_waitqueue_head(&pgdat->kswapd_wait);
  	init_waitqueue_head(&pgdat->pfmemalloc_wait);
- #ifdef CONFIG_COMPACTION
- 	init_waitqueue_head(&pgdat->kcompactd_wait);
- #endif
+ 
  	pgdat_page_ext_init(pgdat);
  	spin_lock_init(&pgdat->lru_lock);
 -	lruvec_init(node_lruvec(pgdat));
 +	lruvec_init(&pgdat->__lruvec);
  
  	pgdat->per_cpu_nodestats = &boot_nodestats;
  
* Unmerged path mm/page_alloc.c
