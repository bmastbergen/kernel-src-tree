software node: implement software_node_unregister()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Greg Kroah-Hartman <gregkh@linuxfoundation.org>
commit 46d26819a5056f4831649c5887ad5c71a16d86f7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/46d26819.failed

Sometimes it is better to unregister individual nodes instead of trying
to do them all at once with software_node_unregister_nodes(), so create
software_node_unregister() so that you can unregister them one at a
time.

This is especially important when creating nodes in a hierarchy, with
parent -> children representations.  Children always need to be removed
before a parent is, as the swnode logic assumes this is going to be the
case.

Fix up the lib/test_printf.c fwnode_pointer() test which to use this new
function as it had the problem of tearing things down in the backwards
order.

Fixes: f1ce39df508d ("lib/test_printf: Add tests for %pfw printk modifier")
	Cc: stable <stable@vger.kernel.org>
	Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Cc: Brendan Higgins <brendanhiggins@google.com>
	Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
	Cc: Petr Mladek <pmladek@suse.com>
	Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
	Cc: Sakari Ailus <sakari.ailus@linux.intel.com>
	Cc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
	Reported-by: kernel test robot <rong.a.chen@intel.com>
	Reported-by: Randy Dunlap <rdunlap@infradead.org>
	Tested-by: Petr Mladek <pmladek@suse.com>
	Tested-by: Randy Dunlap <rdunlap@infradead.org>
	Tested-by: Guenter Roeck <linux@roeck-us.net>
	Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Acked-by: Randy Dunlap <rdunlap@infradead.org>
Link: https://lore.kernel.org/r/20200524153041.2361-1-gregkh@linuxfoundation.org
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 46d26819a5056f4831649c5887ad5c71a16d86f7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/test_printf.c
diff --cc lib/test_printf.c
index 74b678036192,fc63b8959d42..000000000000
--- a/lib/test_printf.c
+++ b/lib/test_printf.c
@@@ -588,6 -611,37 +588,40 @@@ flags(void
  	kfree(cmp_buffer);
  }
  
++<<<<<<< HEAD
++=======
+ static void __init fwnode_pointer(void)
+ {
+ 	const struct software_node softnodes[] = {
+ 		{ .name = "first", },
+ 		{ .name = "second", .parent = &softnodes[0], },
+ 		{ .name = "third", .parent = &softnodes[1], },
+ 		{ NULL /* Guardian */ }
+ 	};
+ 	const char * const full_name = "first/second/third";
+ 	const char * const full_name_second = "first/second";
+ 	const char * const second_name = "second";
+ 	const char * const third_name = "third";
+ 	int rval;
+ 
+ 	rval = software_node_register_nodes(softnodes);
+ 	if (rval) {
+ 		pr_warn("cannot register softnodes; rval %d\n", rval);
+ 		return;
+ 	}
+ 
+ 	test(full_name_second, "%pfw", software_node_fwnode(&softnodes[1]));
+ 	test(full_name, "%pfw", software_node_fwnode(&softnodes[2]));
+ 	test(full_name, "%pfwf", software_node_fwnode(&softnodes[2]));
+ 	test(second_name, "%pfwP", software_node_fwnode(&softnodes[1]));
+ 	test(third_name, "%pfwP", software_node_fwnode(&softnodes[2]));
+ 
+ 	software_node_unregister(&softnodes[2]);
+ 	software_node_unregister(&softnodes[1]);
+ 	software_node_unregister(&softnodes[0]);
+ }
+ 
++>>>>>>> 46d26819a505 (software node: implement software_node_unregister())
  static void __init
  errptr(void)
  {
diff --git a/drivers/base/swnode.c b/drivers/base/swnode.c
index 4a02349465f2..4026ee5e657a 100644
--- a/drivers/base/swnode.c
+++ b/drivers/base/swnode.c
@@ -698,17 +698,18 @@ EXPORT_SYMBOL_GPL(software_node_register_nodes);
  * @nodes: Zero terminated array of software nodes to be unregistered
  *
  * Unregister multiple software nodes at once.
+ *
+ * NOTE: Be careful using this call if the nodes had parent pointers set up in
+ * them before registering.  If so, it is wiser to remove the nodes
+ * individually, in the correct order (child before parent) instead of relying
+ * on the sequential order of the list of nodes in the array.
  */
 void software_node_unregister_nodes(const struct software_node *nodes)
 {
-	struct swnode *swnode;
 	int i;
 
-	for (i = 0; nodes[i].name; i++) {
-		swnode = software_node_to_swnode(&nodes[i]);
-		if (swnode)
-			fwnode_remove_software_node(&swnode->fwnode);
-	}
+	for (i = 0; nodes[i].name; i++)
+		software_node_unregister(&nodes[i]);
 }
 EXPORT_SYMBOL_GPL(software_node_unregister_nodes);
 
@@ -775,6 +776,20 @@ int software_node_register(const struct software_node *node)
 }
 EXPORT_SYMBOL_GPL(software_node_register);
 
+/**
+ * software_node_unregister - Unregister static software node
+ * @node: The software node to be unregistered
+ */
+void software_node_unregister(const struct software_node *node)
+{
+	struct swnode *swnode;
+
+	swnode = software_node_to_swnode(node);
+	if (swnode)
+		fwnode_remove_software_node(&swnode->fwnode);
+}
+EXPORT_SYMBOL_GPL(software_node_unregister);
+
 struct fwnode_handle *
 fwnode_create_software_node(const struct property_entry *properties,
 			    const struct fwnode_handle *parent)
diff --git a/include/linux/property.h b/include/linux/property.h
index af15b2860257..2f73e17f4b21 100644
--- a/include/linux/property.h
+++ b/include/linux/property.h
@@ -445,6 +445,7 @@ int software_node_register_node_group(const struct software_node **node_group);
 void software_node_unregister_node_group(const struct software_node **node_group);
 
 int software_node_register(const struct software_node *node);
+void software_node_unregister(const struct software_node *node);
 
 int software_node_notify(struct device *dev, unsigned long action);
 
* Unmerged path lib/test_printf.c
