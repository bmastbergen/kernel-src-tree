ethtool: add LINKINFO_NTF notification

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Michal Kubecek <mkubecek@suse.cz>
commit 73286734c1b0d009fd317c2a74e173cb22233dad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/73286734.failed

Send ETHTOOL_MSG_LINKINFO_NTF notification message whenever device link
settings are modified using ETHTOOL_MSG_LINKINFO_SET netlink message or
ETHTOOL_SLINKSETTINGS or ETHTOOL_SSET ioctl commands.

The notification message has the same format as reply to LINKINFO_GET
request. ETHTOOL_MSG_LINKINFO_SET netlink request only triggers the
notification if there is a change but the ioctl command handlers do not
check if there is an actual change and trigger the notification whenever
the commands are executed.

As all work is done by ethnl_default_notify() handler and callback
functions introduced to handle LINKINFO_GET requests, all that remains is
adding entries for ETHTOOL_MSG_LINKINFO_NTF into ethnl_notify_handlers and
ethnl_default_notify_ops lookup tables and calls to ethtool_notify() where
needed.

	Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 73286734c1b0d009fd317c2a74e173cb22233dad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/networking/ethtool-netlink.rst
#	include/uapi/linux/ethtool_netlink.h
#	net/ethtool/ioctl.c
#	net/ethtool/linkinfo.c
#	net/ethtool/netlink.c
diff --cc net/ethtool/ioctl.c
index e6221e091f3d,11a467294a33..000000000000
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@@ -31,8 -24,9 +31,9 @@@
  #include <linux/sched/signal.h>
  #include <linux/net.h>
  #include <net/devlink.h>
 -#include <net/xdp_sock.h>
 +#include RH_KABI_HIDE_INCLUDE(<net/xdp_sock.h>)
  #include <net/flow_offload.h>
+ #include <linux/ethtool_netlink.h>
  
  #include "common.h"
  
@@@ -802,7 -572,10 +803,14 @@@ static int ethtool_set_link_ksettings(s
  	    != link_ksettings.base.link_mode_masks_nwords)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	return __rh_call_set_link_ksettings(dev, &link_ksettings);
++=======
+ 	err = dev->ethtool_ops->set_link_ksettings(dev, &link_ksettings);
+ 	if (err >= 0)
+ 		ethtool_notify(dev, ETHTOOL_MSG_LINKINFO_NTF, NULL);
+ 	return err;
++>>>>>>> 73286734c1b0 (ethtool: add LINKINFO_NTF notification)
  }
  
  /* Query device for its ethtool_cmd settings.
@@@ -870,37 -622,25 +878,49 @@@ static int ethtool_get_settings(struct 
   */
  static int ethtool_set_settings(struct net_device *dev, void __user *useraddr)
  {
 -	struct ethtool_link_ksettings link_ksettings;
  	struct ethtool_cmd cmd;
+ 	int ret;
  
  	ASSERT_RTNL();
  
  	if (copy_from_user(&cmd, useraddr, sizeof(cmd)))
  		return -EFAULT;
 -	if (!dev->ethtool_ops->set_link_ksettings)
 +
 +	/* first, try new %ethtool_link_ksettings API. */
 +	if (__rh_has_set_link_ksettings(dev)) {
 +		struct ethtool_link_ksettings link_ksettings;
 +
 +		if (!convert_legacy_settings_to_link_ksettings(&link_ksettings,
 +							       &cmd))
 +			return -EINVAL;
 +
 +		link_ksettings.base.cmd = ETHTOOL_SLINKSETTINGS;
 +		link_ksettings.base.link_mode_masks_nwords
 +			= __ETHTOOL_LINK_MODE_MASK_NU32;
 +		return __rh_call_set_link_ksettings(dev, &link_ksettings);
 +	}
 +
 +	/* legacy %ethtool_cmd API */
 +
 +	/* TODO: return -EOPNOTSUPP when ethtool_ops::get_settings
 +	 * disappears internally
 +	 */
 +
 +	if (!dev->ethtool_ops->set_settings)
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	return dev->ethtool_ops->set_settings(dev, &cmd);
++=======
+ 	if (!convert_legacy_settings_to_link_ksettings(&link_ksettings, &cmd))
+ 		return -EINVAL;
+ 	link_ksettings.base.link_mode_masks_nwords =
+ 		__ETHTOOL_LINK_MODE_MASK_NU32;
+ 	ret = dev->ethtool_ops->set_link_ksettings(dev, &link_ksettings);
+ 	if (ret >= 0)
+ 		ethtool_notify(dev, ETHTOOL_MSG_LINKINFO_NTF, NULL);
+ 	return ret;
++>>>>>>> 73286734c1b0 (ethtool: add LINKINFO_NTF notification)
  }
  
  static noinline_for_stack int ethtool_get_drvinfo(struct net_device *dev,
* Unmerged path Documentation/networking/ethtool-netlink.rst
* Unmerged path include/uapi/linux/ethtool_netlink.h
* Unmerged path net/ethtool/linkinfo.c
* Unmerged path net/ethtool/netlink.c
* Unmerged path Documentation/networking/ethtool-netlink.rst
* Unmerged path include/uapi/linux/ethtool_netlink.h
* Unmerged path net/ethtool/ioctl.c
* Unmerged path net/ethtool/linkinfo.c
* Unmerged path net/ethtool/netlink.c
