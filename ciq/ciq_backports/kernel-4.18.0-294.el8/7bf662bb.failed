KVM: VMX: Rename "vmx_set_guest_msr" to "vmx_set_guest_uret_msr"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 7bf662bb5ea806e3958638e9b80f203d11fbcc87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7bf662bb.failed

Add "uret" to vmx_set_guest_msr() to explicitly associate it with the
guest_uret_msrs array, and to differentiate it from vmx_set_msr() as
well as VMX's load/store MSRs.

No functional change intended.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
Message-Id: <20200923180409.32255-14-sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 7bf662bb5ea806e3958638e9b80f203d11fbcc87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/kvm/vmx/vmx.c
index 985a4bfb7517,0f75b17d97a3..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -631,7 -631,8 +631,12 @@@ struct shared_msr_entry *find_msr_entry
  	return NULL;
  }
  
++<<<<<<< HEAD
 +static int vmx_set_guest_msr(struct vcpu_vmx *vmx, struct shared_msr_entry *msr, u64 data)
++=======
+ static int vmx_set_guest_uret_msr(struct vcpu_vmx *vmx,
+ 				  struct vmx_uret_msr *msr, u64 data)
++>>>>>>> 7bf662bb5ea8 (KVM: VMX: Rename "vmx_set_guest_msr" to "vmx_set_guest_uret_msr")
  {
  	int ret = 0;
  
@@@ -2137,13 -2127,13 +2142,13 @@@ static int vmx_set_msr(struct kvm_vcpu 
  		/* Check reserved bit, higher 32 bits should be zero */
  		if ((data >> 32) != 0)
  			return 1;
 -		goto find_uret_msr;
 +		goto find_shared_msr;
  
  	default:
 -	find_uret_msr:
 -		msr = vmx_find_uret_msr(vmx, msr_index);
 +	find_shared_msr:
 +		msr = find_msr_entry(vmx, msr_index);
  		if (msr)
- 			ret = vmx_set_guest_msr(vmx, msr, data);
+ 			ret = vmx_set_guest_uret_msr(vmx, msr, data);
  		else
  			ret = kvm_set_msr_common(vcpu, msr_info);
  	}
@@@ -7167,11 -7108,11 +7172,11 @@@ static void vmx_vcpu_after_set_cpuid(st
  		update_intel_pt_cfg(vcpu);
  
  	if (boot_cpu_has(X86_FEATURE_RTM)) {
 -		struct vmx_uret_msr *msr;
 -		msr = vmx_find_uret_msr(vmx, MSR_IA32_TSX_CTRL);
 +		struct shared_msr_entry *msr;
 +		msr = find_msr_entry(vmx, MSR_IA32_TSX_CTRL);
  		if (msr) {
  			bool enabled = guest_cpuid_has(vcpu, X86_FEATURE_RTM);
- 			vmx_set_guest_msr(vmx, msr, enabled ? 0 : TSX_CTRL_RTM_DISABLE);
+ 			vmx_set_guest_uret_msr(vmx, msr, enabled ? 0 : TSX_CTRL_RTM_DISABLE);
  		}
  	}
  }
* Unmerged path arch/x86/kvm/vmx/vmx.c
