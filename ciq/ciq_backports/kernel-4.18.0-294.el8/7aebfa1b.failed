bpf: Support narrow loads from bpf_sock_addr.user_port

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrey Ignatov <rdna@fb.com>
commit 7aebfa1b3885b5aa29fcb4a596d0485ac463bbe8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7aebfa1b.failed

bpf_sock_addr.user_port supports only 4-byte load and it leads to ugly
code in BPF programs, like:

	volatile __u32 user_port = ctx->user_port;
	__u16 port = bpf_ntohs(user_port);

Since otherwise clang may optimize the load to be 2-byte and it's
rejected by verifier.

Add support for 1- and 2-byte loads same way as it's supported for other
fields in bpf_sock_addr like user_ip4, msg_src_ip4, etc.

	Signed-off-by: Andrey Ignatov <rdna@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/c1e983f4c17573032601d0b2b1f9d1274f24bc16.1589420814.git.rdna@fb.com
(cherry picked from commit 7aebfa1b3885b5aa29fcb4a596d0485ac463bbe8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/filter.c
diff --cc net/core/filter.c
index 95172071f533,1fe8c0c2d408..000000000000
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@@ -7995,11 -7989,13 +7992,21 @@@ static u32 sock_addr_convert_ctx_access
  		 */
  		BUILD_BUG_ON(offsetof(struct sockaddr_in, sin_port) !=
  			     offsetof(struct sockaddr_in6, sin6_port));
++<<<<<<< HEAD
 +		BUILD_BUG_ON(FIELD_SIZEOF(struct sockaddr_in, sin_port) !=
 +			     FIELD_SIZEOF(struct sockaddr_in6, sin6_port));
 +		SOCK_ADDR_LOAD_OR_STORE_NESTED_FIELD(struct bpf_sock_addr_kern,
 +						     struct sockaddr_in6, uaddr,
 +						     sin6_port, tmp_reg);
++=======
+ 		BUILD_BUG_ON(sizeof_field(struct sockaddr_in, sin_port) !=
+ 			     sizeof_field(struct sockaddr_in6, sin6_port));
+ 		/* Account for sin6_port being smaller than user_port. */
+ 		port_size = min(port_size, BPF_LDST_BYTES(si));
+ 		SOCK_ADDR_LOAD_OR_STORE_NESTED_FIELD_SIZE_OFF(
+ 			struct bpf_sock_addr_kern, struct sockaddr_in6, uaddr,
+ 			sin6_port, bytes_to_bpf_size(port_size), 0, tmp_reg);
++>>>>>>> 7aebfa1b3885 (bpf: Support narrow loads from bpf_sock_addr.user_port)
  		break;
  
  	case offsetof(struct bpf_sock_addr, family):
diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index a32d03b32735..60a76a9341f2 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3727,7 +3727,7 @@ struct bpf_sock_addr {
 	__u32 user_ip6[4];	/* Allows 1,2,4,8-byte read and 4,8-byte write.
 				 * Stored in network byte order.
 				 */
-	__u32 user_port;	/* Allows 4-byte read and write.
+	__u32 user_port;	/* Allows 1,2,4-byte read and 4-byte write.
 				 * Stored in network byte order
 				 */
 	__u32 family;		/* Allows 4-byte read, but no write */
* Unmerged path net/core/filter.c
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 6a179535d9e4..97f1552e0895 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -3700,7 +3700,7 @@ struct bpf_sock_addr {
 	__u32 user_ip6[4];	/* Allows 1,2,4,8-byte read and 4,8-byte write.
 				 * Stored in network byte order.
 				 */
-	__u32 user_port;	/* Allows 4-byte read and write.
+	__u32 user_port;	/* Allows 1,2,4-byte read and 4-byte write.
 				 * Stored in network byte order
 				 */
 	__u32 family;		/* Allows 4-byte read, but no write */
