net: atlantic: better loopback mode handling

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Nikita Danilov <ndanilov@marvell.com>
commit b42726fcf76e9367e524392e0ead7e672cc0791c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b42726fc.failed

Add checks to not enable multiple loopback modes simultaneously,
It was also discovered that for dma loopback to function correctly
promisc mode should be enabled on device.

Fixes: ea4b4d7fc106 ("net: atlantic: loopback tests via private flags")
	Signed-off-by: Nikita Danilov <ndanilov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b42726fcf76e9367e524392e0ead7e672cc0791c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
index 3b9a73191efa,7b55633d2cb9..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
@@@ -594,6 -703,45 +594,48 @@@ static void aq_set_msg_level(struct net
  	aq_nic->msg_enable = data;
  }
  
++<<<<<<< HEAD
++=======
+ static u32 aq_ethtool_get_priv_flags(struct net_device *ndev)
+ {
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 
+ 	return aq_nic->aq_nic_cfg.priv_flags;
+ }
+ 
+ static int aq_ethtool_set_priv_flags(struct net_device *ndev, u32 flags)
+ {
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 	struct aq_nic_cfg_s *cfg;
+ 	u32 priv_flags;
+ 
+ 	cfg = aq_nic_get_cfg(aq_nic);
+ 	priv_flags = cfg->priv_flags;
+ 
+ 	if (flags & ~AQ_PRIV_FLAGS_MASK)
+ 		return -EOPNOTSUPP;
+ 
+ 	if (hweight32((flags | priv_flags) & AQ_HW_LOOPBACK_MASK) > 1) {
+ 		netdev_info(ndev, "Can't enable more than one loopback simultaneously\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	cfg->priv_flags = flags;
+ 
+ 	if ((priv_flags ^ flags) & BIT(AQ_HW_LOOPBACK_DMA_NET)) {
+ 		if (netif_running(ndev)) {
+ 			dev_close(ndev);
+ 
+ 			dev_open(ndev, NULL);
+ 		}
+ 	} else if ((priv_flags ^ flags) & AQ_HW_LOOPBACK_MASK) {
+ 		aq_nic_set_loopback(aq_nic);
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> b42726fcf76e (net: atlantic: better loopback mode handling)
  const struct ethtool_ops aq_ethtool_ops = {
  	.get_link            = aq_ethtool_get_link,
  	.get_regs_len        = aq_ethtool_get_regs_len,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index 42fdeb412b12,d20d91cdece8..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -780,15 -883,18 +780,21 @@@ static int hw_atl_b0_hw_irq_read(struc
  static int hw_atl_b0_hw_packet_filter_set(struct aq_hw_s *self,
  					  unsigned int packet_filter)
  {
 -	struct aq_nic_cfg_s *cfg = self->aq_nic_cfg;
  	unsigned int i = 0U;
++<<<<<<< HEAD
 +	struct aq_nic_cfg_s *cfg = self->aq_nic_cfg;
++=======
+ 	u32 vlan_promisc;
+ 	u32 l2_promisc;
++>>>>>>> b42726fcf76e (net: atlantic: better loopback mode handling)
  
- 	hw_atl_rpfl2promiscuous_mode_en_set(self,
- 					    IS_FILTER_ENABLED(IFF_PROMISC));
+ 	l2_promisc = IS_FILTER_ENABLED(IFF_PROMISC) ||
+ 		     !!(cfg->priv_flags & BIT(AQ_HW_LOOPBACK_DMA_NET));
+ 	vlan_promisc = l2_promisc || cfg->is_vlan_force_promisc;
  
- 	hw_atl_rpf_vlan_prom_mode_en_set(self,
- 				     IS_FILTER_ENABLED(IFF_PROMISC) ||
- 				     cfg->is_vlan_force_promisc);
+ 	hw_atl_rpfl2promiscuous_mode_en_set(self, l2_promisc);
+ 
+ 	hw_atl_rpf_vlan_prom_mode_en_set(self, vlan_promisc);
  
  	hw_atl_rpfl2multicast_flr_en_set(self,
  					 IS_FILTER_ENABLED(IFF_ALLMULTI) &&
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
