libbpf: Fix native endian assumption when parsing BTF

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Tony Ambardar <tony.ambardar@gmail.com>
commit 1245008122d7311683d70c05b2eea167a314fb5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/12450081.failed

Code in btf__parse_raw() fails to detect raw BTF of non-native endianness
and assumes it must be ELF data, which then fails to parse as ELF and
yields a misleading error message:

  root:/# bpftool btf dump file /sys/kernel/btf/vmlinux
  libbpf: failed to get EHDR from /sys/kernel/btf/vmlinux

For example, this could occur after cross-compiling a BTF-enabled kernel
for a target with non-native endianness, which is currently unsupported.

Check for correct endianness and emit a clearer error message:

  root:/# bpftool btf dump file /sys/kernel/btf/vmlinux
  libbpf: non-native BTF endianness is not supported

Fixes: 94a1fedd63ed ("libbpf: Add btf__parse_raw() and generic btf__parse() APIs")
	Signed-off-by: Tony Ambardar <Tony.Ambardar@gmail.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/90f81508ecc57bc0da318e0fe0f45cfe49b17ea7.1600417359.git.Tony.Ambardar@gmail.com
(cherry picked from commit 1245008122d7311683d70c05b2eea167a314fb5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/btf.c
diff --cc tools/lib/bpf/btf.c
index 201a50362e5c,6bdbc389b493..000000000000
--- a/tools/lib/bpf/btf.c
+++ b/tools/lib/bpf/btf.c
@@@ -562,6 -639,89 +562,92 @@@ done
  	return btf;
  }
  
++<<<<<<< HEAD
++=======
+ struct btf *btf__parse_raw(const char *path)
+ {
+ 	struct btf *btf = NULL;
+ 	void *data = NULL;
+ 	FILE *f = NULL;
+ 	__u16 magic;
+ 	int err = 0;
+ 	long sz;
+ 
+ 	f = fopen(path, "rb");
+ 	if (!f) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 
+ 	/* check BTF magic */
+ 	if (fread(&magic, 1, sizeof(magic), f) < sizeof(magic)) {
+ 		err = -EIO;
+ 		goto err_out;
+ 	}
+ 	if (magic == __bswap_16(BTF_MAGIC)) {
+ 		/* non-native endian raw BTF */
+ 		pr_warn("non-native BTF endianness is not supported\n");
+ 		err = -LIBBPF_ERRNO__ENDIAN;
+ 		goto err_out;
+ 	}
+ 	if (magic != BTF_MAGIC) {
+ 		/* definitely not a raw BTF */
+ 		err = -EPROTO;
+ 		goto err_out;
+ 	}
+ 
+ 	/* get file size */
+ 	if (fseek(f, 0, SEEK_END)) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 	sz = ftell(f);
+ 	if (sz < 0) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 	/* rewind to the start */
+ 	if (fseek(f, 0, SEEK_SET)) {
+ 		err = -errno;
+ 		goto err_out;
+ 	}
+ 
+ 	/* pre-alloc memory and read all of BTF data */
+ 	data = malloc(sz);
+ 	if (!data) {
+ 		err = -ENOMEM;
+ 		goto err_out;
+ 	}
+ 	if (fread(data, 1, sz, f) < sz) {
+ 		err = -EIO;
+ 		goto err_out;
+ 	}
+ 
+ 	/* finally parse BTF data */
+ 	btf = btf__new(data, sz);
+ 
+ err_out:
+ 	free(data);
+ 	if (f)
+ 		fclose(f);
+ 	return err ? ERR_PTR(err) : btf;
+ }
+ 
+ struct btf *btf__parse(const char *path, struct btf_ext **btf_ext)
+ {
+ 	struct btf *btf;
+ 
+ 	if (btf_ext)
+ 		*btf_ext = NULL;
+ 
+ 	btf = btf__parse_raw(path);
+ 	if (!IS_ERR(btf) || PTR_ERR(btf) != -EPROTO)
+ 		return btf;
+ 
+ 	return btf__parse_elf(path, btf_ext);
+ }
+ 
++>>>>>>> 1245008122d7 (libbpf: Fix native endian assumption when parsing BTF)
  static int compare_vsi_off(const void *_a, const void *_b)
  {
  	const struct btf_var_secinfo *a = _a;
* Unmerged path tools/lib/bpf/btf.c
