block: move blk_io_schedule() out of header file

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 71ac860af824ce9ebbbe8de20044e777c0fc33b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/71ac860a.failed

blk_io_schedule() isn't called from performance sensitive code path, and
it is easier to maintain by exporting it as symbol.

Also blk_io_schedule() is only called by CONFIG_BLOCK code, so it is safe
to do this way. Meantime fixes build failure when CONFIG_BLOCK is off.

	Cc: Christoph Hellwig <hch@infradead.org>
Fixes: e6249cdd46e4 ("block: add blk_io_schedule() for avoiding task hung in sync dio")
	Reported-by: Satya Tangirala <satyat@google.com>
	Tested-by: Satya Tangirala <satyat@google.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 71ac860af824ce9ebbbe8de20044e777c0fc33b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
diff --cc block/blk-core.c
index ca0690d00a60,7c1587b45427..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -36,6 -37,8 +36,11 @@@
  #include <linux/t10-pi.h>
  #include <linux/debugfs.h>
  #include <linux/bpf.h>
++<<<<<<< HEAD
++=======
+ #include <linux/psi.h>
+ #include <linux/sched/sysctl.h>
++>>>>>>> 71ac860af824 (block: move blk_io_schedule() out of header file)
  
  #define CREATE_TRACE_POINTS
  #include <trace/events/block.h>
@@@ -1742,14 -1813,17 +1747,28 @@@ void blk_finish_plug(struct blk_plug *p
  }
  EXPORT_SYMBOL(blk_finish_plug);
  
++<<<<<<< HEAD
 +/*
 + * For 3rd party modules to access the extended fields of 'struct request'
 + */
 +struct request_aux *blk_rq_aux(const struct request *rq)
 +{
 +	return (struct request_aux *)((void *)rq - sizeof(struct request_aux));
 +}
 +EXPORT_SYMBOL(blk_rq_aux);
++=======
+ void blk_io_schedule(void)
+ {
+ 	/* Prevent hang_check timer from firing at us during very long I/O */
+ 	unsigned long timeout = sysctl_hung_task_timeout_secs * HZ / 2;
+ 
+ 	if (timeout)
+ 		io_schedule_timeout(timeout);
+ 	else
+ 		io_schedule();
+ }
+ EXPORT_SYMBOL_GPL(blk_io_schedule);
++>>>>>>> 71ac860af824 (block: move blk_io_schedule() out of header file)
  
  int __init blk_dev_init(void)
  {
* Unmerged path block/blk-core.c
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 43b1486e0588..5ff8d2638f79 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -27,7 +27,6 @@
 #include <linux/percpu-refcount.h>
 #include <linux/scatterlist.h>
 #include <linux/blkzoned.h>
-#include <linux/sched/sysctl.h>
 
 struct module;
 struct scsi_ioctl_command;
@@ -1244,6 +1243,8 @@ static inline bool blk_needs_flush_plug(struct task_struct *tsk)
 		 !list_empty(&plug->cb_list));
 }
 
+extern void blk_io_schedule(void);
+
 extern int blkdev_issue_flush(struct block_device *, gfp_t, sector_t *);
 extern int blkdev_issue_write_same(struct block_device *bdev, sector_t sector,
 		sector_t nr_sects, gfp_t gfp_mask, struct page *page);
@@ -1884,15 +1885,4 @@ static inline void blk_wake_io_task(struct task_struct *waiter)
 		wake_up_process(waiter);
 }
 
-static inline void blk_io_schedule(void)
-{
-	/* Prevent hang_check timer from firing at us during very long I/O */
-	unsigned long timeout = sysctl_hung_task_timeout_secs * HZ / 2;
-
-	if (timeout)
-		io_schedule_timeout(timeout);
-	else
-		io_schedule();
-}
-
 #endif
