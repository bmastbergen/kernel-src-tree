powerpc/watchpoint: Fix 512 byte boundary limit

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ravi Bangoria <ravi.bangoria@linux.ibm.com>
commit 3190ecbfeeb2ab17778887ce3fa964615d6460fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3190ecbf.failed

Milton Miller reported that we are aligning start and end address to
wrong size SZ_512M. It should be SZ_512. Fix that.

While doing this change I also found a case where ALIGN() comparison
fails. Within a given aligned range, ALIGN() of two addresses does not
match when start address is pointing to the first byte and end address
is pointing to any other byte except the first one. But that's not true
for ALIGN_DOWN(). ALIGN_DOWN() of any two addresses within that range
will always point to the first byte. So use ALIGN_DOWN() instead of
ALIGN().

Fixes: e68ef121c1f4 ("powerpc/watchpoint: Use builtin ALIGN*() macros")
	Reported-by: Milton Miller <miltonm@us.ibm.com>
	Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Tested-by: Jordan Niethe <jniethe5@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200723090813.303838-2-ravi.bangoria@linux.ibm.com
(cherry picked from commit 3190ecbfeeb2ab17778887ce3fa964615d6460fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/hw_breakpoint.c
diff --cc arch/powerpc/kernel/hw_breakpoint.c
index 90c5c77a5704,031e6defc08e..000000000000
--- a/arch/powerpc/kernel/hw_breakpoint.c
+++ b/arch/powerpc/kernel/hw_breakpoint.c
@@@ -363,6 -388,52 +363,55 @@@ int arch_bp_generic_fields(int type, in
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Watchpoint match range is always doubleword(8 bytes) aligned on
+  * powerpc. If the given range is crossing doubleword boundary, we
+  * need to increase the length such that next doubleword also get
+  * covered. Ex,
+  *
+  *          address   len = 6 bytes
+  *                |=========.
+  *   |------------v--|------v--------|
+  *   | | | | | | | | | | | | | | | | |
+  *   |---------------|---------------|
+  *    <---8 bytes--->
+  *
+  * In this case, we should configure hw as:
+  *   start_addr = address & ~(HW_BREAKPOINT_SIZE - 1)
+  *   len = 16 bytes
+  *
+  * @start_addr is inclusive but @end_addr is exclusive.
+  */
+ static int hw_breakpoint_validate_len(struct arch_hw_breakpoint *hw)
+ {
+ 	u16 max_len = DABR_MAX_LEN;
+ 	u16 hw_len;
+ 	unsigned long start_addr, end_addr;
+ 
+ 	start_addr = ALIGN_DOWN(hw->address, HW_BREAKPOINT_SIZE);
+ 	end_addr = ALIGN(hw->address + hw->len, HW_BREAKPOINT_SIZE);
+ 	hw_len = end_addr - start_addr;
+ 
+ 	if (dawr_enabled()) {
+ 		max_len = DAWR_MAX_LEN;
+ 		/* DAWR region can't cross 512 bytes boundary */
+ 		if (ALIGN_DOWN(start_addr, SZ_512) != ALIGN_DOWN(end_addr - 1, SZ_512))
+ 			return -EINVAL;
+ 	} else if (IS_ENABLED(CONFIG_PPC_8xx)) {
+ 		/* 8xx can setup a range without limitation */
+ 		max_len = U16_MAX;
+ 	}
+ 
+ 	if (hw_len > max_len)
+ 		return -EINVAL;
+ 
+ 	hw->hw_len = hw_len;
+ 	return 0;
+ }
+ 
+ /*
++>>>>>>> 3190ecbfeeb2 (powerpc/watchpoint: Fix 512 byte boundary limit)
   * Validate the arch-specific HW Breakpoint register settings
   */
  int hw_breakpoint_arch_parse(struct perf_event *bp,
* Unmerged path arch/powerpc/kernel/hw_breakpoint.c
