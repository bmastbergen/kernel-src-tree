scsi: scsi_debug: Add zone_size_mb module parameter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Damien Le Moal <damien.lemoal@wdc.com>
commit 98e0a689868c26eb82650ee759073f2295e74c97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/98e0a689.failed

Add the zone_size_mb module parameters to control the zone size of a ZBC
device. If the zone size specified is not a divisor of the device capacity,
the last zone of the device will be created as a smaller "runt" zone. This
parameter is ignored for device types other than 0x14 (zbc=2 case).

Note: for testing purposes, zone sizes that are not a power of 2 are
accepted but will result in the drive being rejected by the sd driver.

Link: https://lore.kernel.org/r/20200422104221.378203-7-damien.lemoal@wdc.com
	Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 98e0a689868c26eb82650ee759073f2295e74c97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_debug.c
diff --cc drivers/scsi/scsi_debug.c
index 8a8e70143123,14a65604e176..000000000000
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@@ -697,6 -821,12 +697,15 @@@ static int dix_writes
  static int dix_reads;
  static int dif_errors;
  
++<<<<<<< HEAD
++=======
+ /* ZBC global data */
+ static bool sdeb_zbc_in_use;		/* true when ptype=TYPE_ZBC [0x14] */
+ static int sdeb_zbc_zone_size_mb;
+ static int sdeb_zbc_max_open = DEF_ZBC_MAX_OPEN_ZONES;
+ static int sdeb_zbc_nr_conv = DEF_ZBC_NR_CONV_ZONES;
+ 
++>>>>>>> 98e0a689868c (scsi: scsi_debug: Add zone_size_mb module parameter)
  static int submit_queues = DEF_SUBMIT_QUEUES;  /* > 1 for multi-queue (mq) */
  static struct sdebug_queue *sdebug_q_arr;  /* ptr to array of submit queues */
  
@@@ -3835,6 -4755,82 +3844,85 @@@ static void sdebug_q_cmd_wq_complete(st
  static bool got_shared_uuid;
  static uuid_t shared_uuid;
  
++<<<<<<< HEAD
++=======
+ static int sdebug_device_create_zones(struct sdebug_dev_info *devip)
+ {
+ 	struct sdeb_zone_state *zsp;
+ 	sector_t capacity = get_sdebug_capacity();
+ 	sector_t zstart = 0;
+ 	unsigned int i;
+ 
+ 	/*
+ 	 * Set the zone size: if sdeb_zbc_zone_size_mb is not set, figure out
+ 	 * a zone size allowing for at least 4 zones on the device. Otherwise,
+ 	 * use the specified zone size checking that at least 2 zones can be
+ 	 * created for the device.
+ 	 */
+ 	if (!sdeb_zbc_zone_size_mb) {
+ 		devip->zsize = (DEF_ZBC_ZONE_SIZE_MB * SZ_1M)
+ 			>> ilog2(sdebug_sector_size);
+ 		while (capacity < devip->zsize << 2 && devip->zsize >= 2)
+ 			devip->zsize >>= 1;
+ 		if (devip->zsize < 2) {
+ 			pr_err("Device capacity too small\n");
+ 			return -EINVAL;
+ 		}
+ 	} else {
+ 		devip->zsize = (sdeb_zbc_zone_size_mb * SZ_1M)
+ 			>> ilog2(sdebug_sector_size);
+ 		if (devip->zsize >= capacity) {
+ 			pr_err("Zone size too large for device capacity\n");
+ 			return -EINVAL;
+ 		}
+ 	}
+ 
+ 	if (is_power_of_2(devip->zsize))
+ 		devip->zsize_shift = ilog2(devip->zsize);
+ 	devip->nr_zones = (capacity + devip->zsize - 1) >> devip->zsize_shift;
+ 
+ 	if (sdeb_zbc_nr_conv >= devip->nr_zones) {
+ 		pr_err("Number of conventional zones too large\n");
+ 		return -EINVAL;
+ 	}
+ 	devip->nr_conv_zones = sdeb_zbc_nr_conv;
+ 
+ 	/* zbc_max_open_zones can be 0, meaning "not reported" (no limit) */
+ 	if (sdeb_zbc_max_open >= devip->nr_zones - 1)
+ 		devip->max_open = (devip->nr_zones - 1) / 2;
+ 	else
+ 		devip->max_open = sdeb_zbc_max_open;
+ 
+ 	devip->zstate = kcalloc(devip->nr_zones,
+ 				sizeof(struct sdeb_zone_state), GFP_KERNEL);
+ 	if (!devip->zstate)
+ 		return -ENOMEM;
+ 
+ 	for (i = 0; i < devip->nr_zones; i++) {
+ 		zsp = &devip->zstate[i];
+ 
+ 		zsp->z_start = zstart;
+ 
+ 		if (i < devip->nr_conv_zones) {
+ 			zsp->z_cond = ZBC_NOT_WRITE_POINTER;
+ 			zsp->z_wp = (sector_t)-1;
+ 		} else {
+ 			zsp->z_cond = ZC1_EMPTY;
+ 			zsp->z_wp = zsp->z_start;
+ 		}
+ 
+ 		if (zsp->z_start + devip->zsize < capacity)
+ 			zsp->z_size = devip->zsize;
+ 		else
+ 			zsp->z_size = capacity - zsp->z_start;
+ 
+ 		zstart += zsp->z_size;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 98e0a689868c (scsi: scsi_debug: Add zone_size_mb module parameter)
  static struct sdebug_dev_info *sdebug_device_create(
  			struct sdebug_host_info *sdbg_host, gfp_t flags)
  {
@@@ -4506,6 -5548,10 +4594,13 @@@ module_param_named(vpd_use_hostno, sdeb
  module_param_named(wp, sdebug_wp, bool, S_IRUGO | S_IWUSR);
  module_param_named(write_same_length, sdebug_write_same_length, int,
  		   S_IRUGO | S_IWUSR);
++<<<<<<< HEAD
++=======
+ module_param_named(zbc, sdeb_zbc_model_s, charp, S_IRUGO);
+ module_param_named(zone_max_open, sdeb_zbc_max_open, int, S_IRUGO);
+ module_param_named(zone_nr_conv, sdeb_zbc_nr_conv, int, S_IRUGO);
+ module_param_named(zone_size_mb, sdeb_zbc_zone_size_mb, int, S_IRUGO);
++>>>>>>> 98e0a689868c (scsi: scsi_debug: Add zone_size_mb module parameter)
  
  MODULE_AUTHOR("Eric Youngdale + Douglas Gilbert");
  MODULE_DESCRIPTION("SCSI debug adapter driver");
@@@ -4565,6 -5613,10 +4660,13 @@@ MODULE_PARM_DESC(virtual_gb, "virtual g
  MODULE_PARM_DESC(vpd_use_hostno, "0 -> dev ids ignore hostno (def=1 -> unique dev ids)");
  MODULE_PARM_DESC(wp, "Write Protect (def=0)");
  MODULE_PARM_DESC(write_same_length, "Maximum blocks per WRITE SAME cmd (def=0xffff)");
++<<<<<<< HEAD
++=======
+ MODULE_PARM_DESC(zbc, "'none' [0]; 'aware' [1]; 'managed' [2] (def=0). Can have 'host-' prefix");
+ MODULE_PARM_DESC(zone_max_open, "Maximum number of open zones; [0] for no limit (def=auto)");
+ MODULE_PARM_DESC(zone_nr_conv, "Number of conventional zones (def=1)");
+ MODULE_PARM_DESC(zone_size_mb, "Zone size in MiB (def=auto)");
++>>>>>>> 98e0a689868c (scsi: scsi_debug: Add zone_size_mb module parameter)
  
  #define SDEBUG_INFO_LEN 256
  static char sdebug_info[SDEBUG_INFO_LEN];
* Unmerged path drivers/scsi/scsi_debug.c
