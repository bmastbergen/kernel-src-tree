x86/boot/compressed: Fix reloading of GDTR post-relocation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] boot/compressed: Fix reloading of GDTR post-relocation (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 96.43%
commit-author Arvind Sankar <nivedita@alum.mit.edu>
commit c98a76eabbb6e7755f3d4a4c33f8fe869dda6383
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c98a76ea.failed

The following commit:

  ef5a7b5eb13e ("efi/x86: Remove GDT setup from efi_main")

introduced GDT setup into the 32-bit kernel's startup_32, and reloads
the GDTR after relocating the kernel for paranoia's sake.

A followup commit:

   32d009137a56 ("x86/boot: Reload GDTR after copying to the end of the buffer")

introduced a similar GDTR reload in the 64-bit kernel as well.

The GDTR is adjusted by (init_size-_end), however this may not be the
correct offset to apply if the kernel was loaded at a misaligned address
or below LOAD_PHYSICAL_ADDR, as in that case the decompression buffer
has an additional offset from the original load address.

This should never happen for a conformant bootloader, but we're being
paranoid anyway, so just store the new GDT address in there instead of
adding any offsets, which is simpler as well.

Fixes: ef5a7b5eb13e ("efi/x86: Remove GDT setup from efi_main")
Fixes: 32d009137a56 ("x86/boot: Reload GDTR after copying to the end of the buffer")
	Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Ard Biesheuvel <ardb@kernel.org>
	Cc: linux-efi@vger.kernel.org
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: x86@kernel.org
Link: https://lore.kernel.org/r/20200226230031.3011645-2-nivedita@alum.mit.edu
(cherry picked from commit c98a76eabbb6e7755f3d4a4c33f8fe869dda6383)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/head_32.S
diff --cc arch/x86/boot/compressed/head_32.S
index 5e30eaaf8576,2f8138b71ea9..000000000000
--- a/arch/x86/boot/compressed/head_32.S
+++ b/arch/x86/boot/compressed/head_32.S
@@@ -137,6 -136,15 +137,18 @@@ ENTRY(startup_32
  	cld
  	popl	%esi
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * The GDT may get overwritten either during the copy we just did or
+ 	 * during extract_kernel below. To avoid any issues, repoint the GDTR
+ 	 * to the new copy of the GDT.
+ 	 */
+ 	leal	gdt(%ebx), %eax
+ 	movl	%eax, 2(%eax)
+ 	lgdt	(%eax)
+ 
++>>>>>>> c98a76eabbb6 (x86/boot/compressed: Fix reloading of GDTR post-relocation)
  /*
   * Jump to the relocated address.
   */
* Unmerged path arch/x86/boot/compressed/head_32.S
diff --git a/arch/x86/boot/compressed/head_64.S b/arch/x86/boot/compressed/head_64.S
index af4f070b33ec..ded1fe819ab4 100644
--- a/arch/x86/boot/compressed/head_64.S
+++ b/arch/x86/boot/compressed/head_64.S
@@ -440,8 +440,8 @@ trampoline_return:
 	 * to the new copy of the GDT.
 	 */
 	leaq	gdt64(%rbx), %rax
-	subq	%rbp, 2(%rax)
-	addq	%rbx, 2(%rax)
+	leaq	gdt(%rbx), %rdx
+	movq	%rdx, 2(%rax)
 	lgdt	(%rax)
 
 /*
