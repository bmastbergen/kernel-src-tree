powerpc/smp: Check for duplicate topologies and consolidate

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Srikar Dronamraju <srikar@linux.vnet.ibm.com>
commit 375370a10d061d5c75c6bc5b09c5db4cc0b0fcfe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/375370a1.failed

CACHE and COREGROUP domains are now part of default topology. However on
systems that don't support CACHE or COREGROUP, these domains will
eventually be degenerated. The degeneration happens per CPU. Do note the
current fixup_topology() logic ensures that mask of a domain that is not
supported on the current platform is set to the previous domain.

Instead of waiting for the scheduler to degenerated try to consolidate
based on their masks and sd_flags. This is done just before setting
the scheduler topology.

	Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200921095653.9701-9-srikar@linux.vnet.ibm.com
(cherry picked from commit 375370a10d061d5c75c6bc5b09c5db4cc0b0fcfe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/smp.c
diff --cc arch/powerpc/kernel/smp.c
index 1221d750a031,917c8598cf61..000000000000
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@@ -1370,9 -1406,36 +1372,39 @@@ static void fixup_topology(void
  #ifdef CONFIG_SCHED_SMT
  	if (has_big_cores) {
  		pr_info("Big cores detected but using small core scheduling\n");
 -		powerpc_topology[smt_idx].mask = smallcore_smt_mask;
 +		powerpc_topology[0].mask = smallcore_smt_mask;
  	}
  #endif
++<<<<<<< HEAD
++=======
+ 
+ 	if (!has_coregroup_support())
+ 		powerpc_topology[mc_idx].mask = powerpc_topology[cache_idx].mask;
+ 
+ 	/*
+ 	 * Try to consolidate topology levels here instead of
+ 	 * allowing scheduler to degenerate.
+ 	 * - Dont consolidate if masks are different.
+ 	 * - Dont consolidate if sd_flags exists and are different.
+ 	 */
+ 	for (i = 1; i <= die_idx; i++) {
+ 		if (powerpc_topology[i].mask != powerpc_topology[i - 1].mask)
+ 			continue;
+ 
+ 		if (powerpc_topology[i].sd_flags && powerpc_topology[i - 1].sd_flags &&
+ 				powerpc_topology[i].sd_flags != powerpc_topology[i - 1].sd_flags)
+ 			continue;
+ 
+ 		if (!powerpc_topology[i - 1].sd_flags)
+ 			powerpc_topology[i - 1].sd_flags = powerpc_topology[i].sd_flags;
+ 
+ 		powerpc_topology[i].mask = powerpc_topology[i + 1].mask;
+ 		powerpc_topology[i].sd_flags = powerpc_topology[i + 1].sd_flags;
+ #ifdef CONFIG_SCHED_DEBUG
+ 		powerpc_topology[i].name = powerpc_topology[i + 1].name;
+ #endif
+ 	}
++>>>>>>> 375370a10d06 (powerpc/smp: Check for duplicate topologies and consolidate)
  }
  
  void __init smp_cpus_done(unsigned int max_cpus)
* Unmerged path arch/powerpc/kernel/smp.c
