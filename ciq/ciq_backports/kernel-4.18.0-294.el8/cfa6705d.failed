radix-tree: Use local_lock for protection

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Sebastian Andrzej Siewior <bigeasy@linutronix.de>
commit cfa6705d89b6562f79c40c249f8d94073c4276e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/cfa6705d.failed

The radix-tree and idr preload mechanisms use preempt_disable() to protect
the complete operation between xxx_preload() and xxx_preload_end().

As the code inside the preempt disabled section acquires regular spinlocks,
which are converted to 'sleeping' spinlocks on a PREEMPT_RT kernel and
eventually calls into a memory allocator, this conflicts with the RT
semantics.

Convert it to a local_lock which allows RT kernels to substitute them with
a real per CPU lock. On non RT kernels this maps to preempt_disable() as
before, but provides also lockdep coverage of the critical region.
No functional change.

	Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
Link: https://lore.kernel.org/r/20200527201119.1692513-3-bigeasy@linutronix.de
(cherry picked from commit cfa6705d89b6562f79c40c249f8d94073c4276e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/radix-tree.c
diff --cc lib/radix-tree.c
index 310e89cc0f92,34e406fe561f..000000000000
--- a/lib/radix-tree.c
+++ b/lib/radix-tree.c
@@@ -40,10 -28,6 +41,13 @@@
  #include <linux/string.h>
  #include <linux/xarray.h>
  
++<<<<<<< HEAD
 +
 +/* Number of nodes in fully populated tree of given height */
 +static unsigned long height_to_maxnodes[RADIX_TREE_MAX_PATH + 1] __read_mostly;
 +
++=======
++>>>>>>> cfa6705d89b6 (radix-tree: Use local_lock for protection)
  /*
   * Radix tree node cache.
   */
diff --git a/include/linux/idr.h b/include/linux/idr.h
index a25447cc91ff..06929ce71f01 100644
--- a/include/linux/idr.h
+++ b/include/linux/idr.h
@@ -171,7 +171,7 @@ static inline bool idr_is_empty(const struct idr *idr)
  */
 static inline void idr_preload_end(void)
 {
-	preempt_enable();
+	local_unlock(&radix_tree_preloads.lock);
 }
 
 /**
diff --git a/include/linux/radix-tree.h b/include/linux/radix-tree.h
index d9f3cf0a4c4d..b2f75fdbbf08 100644
--- a/include/linux/radix-tree.h
+++ b/include/linux/radix-tree.h
@@ -30,6 +30,7 @@
 #include <linux/types.h>
 #include <linux/rh_kabi.h>
 #include <linux/xarray.h>
+#include <linux/local_lock.h>
 
 /* Keep unconverted code working */
 #ifndef __GENKSYMS__
@@ -37,6 +38,14 @@
 #define radix_tree_node		xa_node
 #endif
 
+struct radix_tree_preload {
+	local_lock_t lock;
+	unsigned nr;
+	/* nodes->parent points to next preallocated node */
+	struct radix_tree_node *nodes;
+};
+DECLARE_PER_CPU(struct radix_tree_preload, radix_tree_preloads);
+
 /*
  * The bottom two bits of the slot determine how the remaining bits in the
  * slot are interpreted:
@@ -304,7 +313,7 @@ int radix_tree_tagged(const struct radix_tree_root *, unsigned int tag);
 
 static inline void radix_tree_preload_end(void)
 {
-	preempt_enable();
+	local_unlock(&radix_tree_preloads.lock);
 }
 
 int radix_tree_split_preload(unsigned old_order, unsigned new_order, gfp_t);
* Unmerged path lib/radix-tree.c
