mptcp: plug subflow context memory leak

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 0597d0f8e030d1a5e64708b0f3233209a8b5d39e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0597d0f8.failed

When a MPTCP listener socket is closed with unaccepted
children pending, the ULP release callback will be invoked,
but nobody will call into __mptcp_close_ssk() on the
corresponding subflow.

As a consequence, at ULP release time, the 'disposable' flag
will be cleared and the subflow context memory will be leaked.

This change addresses the issue always freeing the context if
the subflow is still in the accept queue at ULP release time.

Additionally, this fixes an incorrect code reference in the
related comment.

Note: this fix leverages the changes introduced by the previous
commit.

Fixes: e16163b6e2b7 ("mptcp: refactor shutdown and close")
	Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0597d0f8e030d1a5e64708b0f3233209a8b5d39e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/subflow.c
diff --cc net/mptcp/subflow.c
index 7eeb71b1861e,fefcaf497938..000000000000
--- a/net/mptcp/subflow.c
+++ b/net/mptcp/subflow.c
@@@ -1257,10 -1336,18 +1257,22 @@@ static void subflow_ulp_release(struct 
  	if (!ctx)
  		return;
  
++<<<<<<< HEAD
 +	if (ctx->conn)
 +		sock_put(ctx->conn);
++=======
+ 	sk = ctx->conn;
+ 	if (sk) {
+ 		/* if the msk has been orphaned, keep the ctx
+ 		 * alive, will be freed by __mptcp_close_ssk(),
+ 		 * when the subflow is still unaccepted
+ 		 */
+ 		release = ctx->disposable || list_empty(&ctx->node);
+ 		sock_put(sk);
+ 	}
++>>>>>>> 0597d0f8e030 (mptcp: plug subflow context memory leak)
  
 -	if (release)
 -		kfree_rcu(ctx, rcu);
 +	kfree_rcu(ctx, rcu);
  }
  
  static void subflow_ulp_clone(const struct request_sock *req,
* Unmerged path net/mptcp/subflow.c
