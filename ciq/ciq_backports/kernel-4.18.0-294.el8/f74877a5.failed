rtnetlink: provide permanent hardware address in RTM_NEWLINK

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Michal Kubecek <mkubecek@suse.cz>
commit f74877a5457d34d604dba6dbbb13c4c05bac8b93
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f74877a5.failed

Permanent hardware address of a network device was traditionally provided
via ethtool ioctl interface but as Jiri Pirko pointed out in a review of
ethtool netlink interface, rtnetlink is much more suitable for it so let's
add it to the RTM_NEWLINK message.

Add IFLA_PERM_ADDRESS attribute to RTM_NEWLINK messages unless the
permanent address is all zeros (i.e. device driver did not fill it). As
permanent address is not modifiable, reject userspace requests containing
IFLA_PERM_ADDRESS attribute.

Note: we already provide permanent hardware address for bond slaves;
unfortunately we cannot drop that attribute for backward compatibility
reasons.

v5 -> v6: only add the attribute if permanent address is not zero

	Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Acked-by: Stephen Hemminger <stephen@networkplumber.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f74877a5457d34d604dba6dbbb13c4c05bac8b93)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/if_link.h
#	net/core/rtnetlink.c
diff --cc include/uapi/linux/if_link.h
index b3697216da3c,1d69f637c5d6..000000000000
--- a/include/uapi/linux/if_link.h
+++ b/include/uapi/linux/if_link.h
@@@ -196,6 -167,9 +196,12 @@@ enum 
  	IFLA_NEW_IFINDEX,
  	IFLA_MIN_MTU,
  	IFLA_MAX_MTU,
++<<<<<<< HEAD
++=======
+ 	IFLA_PROP_LIST,
+ 	IFLA_ALT_IFNAME, /* Alternative ifname */
+ 	IFLA_PERM_ADDRESS,
++>>>>>>> f74877a5457d (rtnetlink: provide permanent hardware address in RTM_NEWLINK)
  	__IFLA_MAX
  };
  
diff --cc net/core/rtnetlink.c
index 27ccb81c41cc,20bc406f3871..000000000000
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@@ -1031,6 -1040,8 +1031,11 @@@ static noinline size_t if_nlmsg_size(co
  	       + nla_total_size(4)  /* IFLA_CARRIER_DOWN_COUNT */
  	       + nla_total_size(4)  /* IFLA_MIN_MTU */
  	       + nla_total_size(4)  /* IFLA_MAX_MTU */
++<<<<<<< HEAD
++=======
+ 	       + rtnl_prop_list_size(dev)
+ 	       + nla_total_size(MAX_ADDR_LEN) /* IFLA_PERM_ADDRESS */
++>>>>>>> f74877a5457d (rtnetlink: provide permanent hardware address in RTM_NEWLINK)
  	       + 0;
  }
  
@@@ -1785,6 -1823,10 +1793,13 @@@ static const struct nla_policy ifla_pol
  	[IFLA_CARRIER_DOWN_COUNT] = { .type = NLA_U32 },
  	[IFLA_MIN_MTU]		= { .type = NLA_U32 },
  	[IFLA_MAX_MTU]		= { .type = NLA_U32 },
++<<<<<<< HEAD
++=======
+ 	[IFLA_PROP_LIST]	= { .type = NLA_NESTED },
+ 	[IFLA_ALT_IFNAME]	= { .type = NLA_STRING,
+ 				    .len = ALTIFNAMSIZ - 1 },
+ 	[IFLA_PERM_ADDRESS]	= { .type = NLA_REJECT },
++>>>>>>> f74877a5457d (rtnetlink: provide permanent hardware address in RTM_NEWLINK)
  };
  
  static const struct nla_policy ifla_info_policy[IFLA_INFO_MAX+1] = {
* Unmerged path include/uapi/linux/if_link.h
* Unmerged path net/core/rtnetlink.c
