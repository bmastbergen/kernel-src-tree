mm/filemap.c: don't bother dropping mmap_sem for zero size readahead

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jan Kara <jack@suse.cz>
commit 5c72feee3e45b40a3c96c7145ec422899d0e8964
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5c72feee.failed

When handling a page fault, we drop mmap_sem to start async readahead so
that we don't block on IO submission with mmap_sem held.  However there's
no point to drop mmap_sem in case readahead is disabled.  Handle that case
to avoid pointless dropping of mmap_sem and retrying the fault.  This was
actually reported to block mlockall(MCL_CURRENT) indefinitely.

Fixes: 6b4c9f446981 ("filemap: drop the mmap_sem for all blocking operations")
	Reported-by: Minchan Kim <minchan@kernel.org>
	Reported-by: Robert Stupp <snazy@gmx.de>
	Signed-off-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Reviewed-by: Minchan Kim <minchan@kernel.org>
Link: http://lkml.kernel.org/r/20200212101356.30759-1-jack@suse.cz
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 5c72feee3e45b40a3c96c7145ec422899d0e8964)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/filemap.c
diff --cc mm/filemap.c
index c5561788ab4c,5bffaa2176cd..000000000000
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@@ -2466,13 -2415,17 +2466,18 @@@ static void do_async_mmap_readahead(str
  	pgoff_t offset = vmf->pgoff;
  
  	/* If we don't want any read-ahead, don't bother */
++<<<<<<< HEAD
 +	if (vmf->vma->vm_flags & VM_RAND_READ)
 +		return;
++=======
+ 	if (vmf->vma->vm_flags & VM_RAND_READ || !ra->ra_pages)
+ 		return fpin;
++>>>>>>> 5c72feee3e45 (mm/filemap.c: don't bother dropping mmap_sem for zero size readahead)
  	if (ra->mmap_miss > 0)
  		ra->mmap_miss--;
 -	if (PageReadahead(page)) {
 -		fpin = maybe_unlock_mmap_for_io(vmf, fpin);
 +	if (PageReadahead(page))
  		page_cache_async_readahead(mapping, ra, file,
  					   page, offset, ra->ra_pages);
 -	}
 -	return fpin;
  }
  
  /**
* Unmerged path mm/filemap.c
