perf/core: Open access to the core for CAP_PERFMON privileged process

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Alexey Budankov <alexey.budankov@linux.intel.com>
commit 18aa18566218d4a46d940049b835314d2b071cc2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/18aa1856.failed

Open access to monitoring of kernel code, CPUs, tracepoints and
namespaces data for a CAP_PERFMON privileged process. Providing the
access under CAP_PERFMON capability singly, without the rest of
CAP_SYS_ADMIN credentials, excludes chances to misuse the credentials
and makes operation more secure.

CAP_PERFMON implements the principle of least privilege for performance
monitoring and observability operations (POSIX IEEE 1003.1e 2.2.2.39
principle of least privilege: A security design principle that states
that a process or program be granted only those privileges (e.g.,
capabilities) necessary to accomplish its legitimate function, and only
for the time that such privileges are actually required)

For backward compatibility reasons the access to perf_events subsystem
remains open for CAP_SYS_ADMIN privileged processes but CAP_SYS_ADMIN
usage for secure perf_events monitoring is discouraged with respect to
CAP_PERFMON capability.

	Signed-off-by: Alexey Budankov <alexey.budankov@linux.intel.com>
	Reviewed-by: James Morris <jamorris@linux.microsoft.com>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Igor Lubashev <ilubashe@akamai.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: linux-man@vger.kernel.org
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Serge Hallyn <serge@hallyn.com>
	Cc: Song Liu <songliubraving@fb.com>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: intel-gfx@lists.freedesktop.org
	Cc: linux-doc@vger.kernel.org
	Cc: linux-security-module@vger.kernel.org
	Cc: selinux@vger.kernel.org
Link: http://lore.kernel.org/lkml/471acaef-bb8a-5ce2-923f-90606b78eef9@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 18aa18566218d4a46d940049b835314d2b071cc2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/perf_event.h
diff --cc include/linux/perf_event.h
index 56e4dcad2112,87e21681759c..000000000000
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@@ -1291,14 -1303,28 +1291,36 @@@ static inline bool perf_paranoid_tracep
  	return sysctl_perf_event_paranoid > -1;
  }
  
 -static inline int perf_allow_kernel(struct perf_event_attr *attr)
 +static inline bool perf_paranoid_cpu(void)
  {
++<<<<<<< HEAD
 +	return sysctl_perf_event_paranoid > 0;
++=======
+ 	if (sysctl_perf_event_paranoid > 1 && !perfmon_capable())
+ 		return -EACCES;
+ 
+ 	return security_perf_event_open(attr, PERF_SECURITY_KERNEL);
++>>>>>>> 18aa18566218 (perf/core: Open access to the core for CAP_PERFMON privileged process)
  }
  
 -static inline int perf_allow_cpu(struct perf_event_attr *attr)
 +static inline bool perf_paranoid_kernel(void)
  {
++<<<<<<< HEAD
 +	return sysctl_perf_event_paranoid > 1;
++=======
+ 	if (sysctl_perf_event_paranoid > 0 && !perfmon_capable())
+ 		return -EACCES;
+ 
+ 	return security_perf_event_open(attr, PERF_SECURITY_CPU);
+ }
+ 
+ static inline int perf_allow_tracepoint(struct perf_event_attr *attr)
+ {
+ 	if (sysctl_perf_event_paranoid > -1 && !perfmon_capable())
+ 		return -EPERM;
+ 
+ 	return security_perf_event_open(attr, PERF_SECURITY_TRACEPOINT);
++>>>>>>> 18aa18566218 (perf/core: Open access to the core for CAP_PERFMON privileged process)
  }
  
  extern void perf_event_init(void);
* Unmerged path include/linux/perf_event.h
diff --git a/kernel/events/core.c b/kernel/events/core.c
index e7efe1b52c39..7d9058ff2011 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -11487,7 +11487,7 @@ SYSCALL_DEFINE5(perf_event_open,
 	}
 
 	if (attr.namespaces) {
-		if (!capable(CAP_SYS_ADMIN))
+		if (!perfmon_capable())
 			return -EACCES;
 	}
 
