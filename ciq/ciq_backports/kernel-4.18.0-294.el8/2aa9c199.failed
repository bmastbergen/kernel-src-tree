KVM: Move x86's version of struct kvm_mmu_memory_cache to common code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 2aa9c199cf8151c190c7e7ca3ddfcfbb2d85ac36
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/2aa9c199.failed

Move x86's 'struct kvm_mmu_memory_cache' to common code in anticipation
of moving the entire x86 implementation code to common KVM and reusing
it for arm64 and MIPS.  Add a new architecture specific asm/kvm_types.h
to control the existence and parameters of the struct.  The new header
is needed to avoid a chicken-and-egg problem with asm/kvm_host.h as all
architectures define instances of the struct in their vCPU structs.

Add an asm-generic version of kvm_types.h to avoid having empty files on
PPC and s390 in the long term, and for arm64 and mips in the short term.

	Suggested-by: Christoffer Dall <christoffer.dall@arm.com>
	Reviewed-by: Ben Gardon <bgardon@google.com>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
Message-Id: <20200703023545.8771-15-sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 2aa9c199cf8151c190c7e7ca3ddfcfbb2d85ac36)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/Kbuild
#	arch/mips/include/asm/Kbuild
#	arch/powerpc/include/asm/Kbuild
#	arch/s390/include/asm/Kbuild
diff --cc arch/arm64/include/asm/Kbuild
index d4021a199e12,35a68155cd0e..000000000000
--- a/arch/arm64/include/asm/Kbuild
+++ b/arch/arm64/include/asm/Kbuild
@@@ -1,29 -1,9 +1,33 @@@
 -# SPDX-License-Identifier: GPL-2.0
 +generic-y += bugs.h
 +generic-y += delay.h
 +generic-y += div64.h
 +generic-y += dma.h
 +generic-y += dma-contiguous.h
  generic-y += early_ioremap.h
++<<<<<<< HEAD
 +generic-y += emergency-restart.h
 +generic-y += hw_irq.h
 +generic-y += irq_regs.h
 +generic-y += kdebug.h
 +generic-y += kmap_types.h
 +generic-y += local.h
++=======
+ generic-y += kvm_types.h
++>>>>>>> 2aa9c199cf81 (KVM: Move x86's version of struct kvm_mmu_memory_cache to common code)
  generic-y += local64.h
  generic-y += mcs_spinlock.h
 +generic-y += mm-arch-hooks.h
 +generic-y += mmiowb.h
 +generic-y += msi.h
  generic-y += qrwlock.h
  generic-y += qspinlock.h
 +generic-y += segment.h
 +generic-y += serial.h
  generic-y += set_memory.h
 +generic-y += sizes.h
 +generic-y += switch_to.h
 +generic-y += trace_clock.h
 +generic-y += unaligned.h
  generic-y += user.h
 +generic-y += vga.h
 +generic-y += xor.h
diff --cc arch/mips/include/asm/Kbuild
index 50a36f37c6e1,397e6d24d2ab..000000000000
--- a/arch/mips/include/asm/Kbuild
+++ b/arch/mips/include/asm/Kbuild
@@@ -1,23 -1,14 +1,27 @@@
 -# SPDX-License-Identifier: GPL-2.0
  # MIPS headers
 -generated-y += syscall_table_32_o32.h
 -generated-y += syscall_table_64_n32.h
 -generated-y += syscall_table_64_n64.h
 -generated-y += syscall_table_64_o32.h
 +generic-(CONFIG_GENERIC_CSUM) += checksum.h
 +generic-y += current.h
 +generic-y += dma-contiguous.h
 +generic-y += emergency-restart.h
  generic-y += export.h
++<<<<<<< HEAD
 +generic-y += irq_work.h
++=======
+ generic-y += kvm_types.h
++>>>>>>> 2aa9c199cf81 (KVM: Move x86's version of struct kvm_mmu_memory_cache to common code)
  generic-y += local64.h
  generic-y += mcs_spinlock.h
 +generic-y += mm-arch-hooks.h
 +generic-y += mmiowb.h
  generic-y += parport.h
 +generic-y += percpu.h
 +generic-y += preempt.h
  generic-y += qrwlock.h
  generic-y += qspinlock.h
 +generic-y += sections.h
 +generic-y += segment.h
 +generic-y += trace_clock.h
 +generic-y += unaligned.h
  generic-y += user.h
 +generic-y += word-at-a-time.h
 +generic-y += xor.h
diff --cc arch/powerpc/include/asm/Kbuild
index 52a8b98116db,2d444d09b553..000000000000
--- a/arch/powerpc/include/asm/Kbuild
+++ b/arch/powerpc/include/asm/Kbuild
@@@ -1,9 -1,11 +1,13 @@@
 -# SPDX-License-Identifier: GPL-2.0
 -generated-y += syscall_table_32.h
 -generated-y += syscall_table_64.h
 -generated-y += syscall_table_c32.h
 -generated-y += syscall_table_spu.h
 +generic-y += div64.h
  generic-y += export.h
++<<<<<<< HEAD
 +generic-y += irq_regs.h
 +generic-y += irq_work.h
++=======
+ generic-y += kvm_types.h
++>>>>>>> 2aa9c199cf81 (KVM: Move x86's version of struct kvm_mmu_memory_cache to common code)
  generic-y += local64.h
  generic-y += mcs_spinlock.h
 +generic-y += preempt.h
  generic-y += vtime.h
 -generic-y += early_ioremap.h
 +generic-y += msi.h
diff --cc arch/s390/include/asm/Kbuild
index dfd5ca4e490e,319efa0e6d02..000000000000
--- a/arch/s390/include/asm/Kbuild
+++ b/arch/s390/include/asm/Kbuild
@@@ -5,23 -5,7 +5,27 @@@ generated-y += syscall_table.
  generated-y += unistd_nr.h
  
  generic-y += asm-offsets.h
 +generic-y += cacheflush.h
 +generic-y += device.h
 +generic-y += dma-contiguous.h
 +generic-y += dma-mapping.h
 +generic-y += div64.h
 +generic-y += emergency-restart.h
  generic-y += export.h
++<<<<<<< HEAD
 +generic-y += fb.h
 +generic-y += irq_regs.h
 +generic-y += irq_work.h
 +generic-y += kmap_types.h
 +generic-y += local.h
++=======
+ generic-y += kvm_types.h
++>>>>>>> 2aa9c199cf81 (KVM: Move x86's version of struct kvm_mmu_memory_cache to common code)
  generic-y += local64.h
  generic-y += mcs_spinlock.h
 +generic-y += mm-arch-hooks.h
 +generic-y += preempt.h
 +generic-y += mmiowb.h
 +generic-y += trace_clock.h
 +generic-y += unaligned.h
 +generic-y += word-at-a-time.h
* Unmerged path arch/arm64/include/asm/Kbuild
* Unmerged path arch/mips/include/asm/Kbuild
* Unmerged path arch/powerpc/include/asm/Kbuild
* Unmerged path arch/s390/include/asm/Kbuild
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 9b68cc8e98de..c124b69bf848 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -195,8 +195,6 @@ struct x86_exception;
 enum x86_intercept;
 enum x86_intercept_stage;
 
-#define KVM_NR_MEM_OBJS 40
-
 #define KVM_NR_DB_REGS	4
 
 #define DR6_BD		(1 << 13)
@@ -247,17 +245,6 @@ enum x86_intercept_stage;
 
 struct kvm_kernel_irq_routing_entry;
 
-/*
- * We don't want allocation failures within the mmu code, so we preallocate
- * enough memory for a single page fault in a cache.
- */
-struct kvm_mmu_memory_cache {
-	int nobjs;
-	gfp_t gfp_zero;
-	struct kmem_cache *kmem_cache;
-	void *objects[KVM_NR_MEM_OBJS];
-};
-
 /*
  * the pages used as guest page table on soft mmu are tracked by
  * kvm_memory_slot.arch.gfn_track which is 16 bits, so the role bits used
diff --git a/arch/x86/include/asm/kvm_types.h b/arch/x86/include/asm/kvm_types.h
new file mode 100644
index 000000000000..08f1b57d3b62
--- /dev/null
+++ b/arch/x86/include/asm/kvm_types.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_X86_KVM_TYPES_H
+#define _ASM_X86_KVM_TYPES_H
+
+#define KVM_ARCH_NR_OBJS_PER_MEMORY_CACHE 40
+
+#endif /* _ASM_X86_KVM_TYPES_H */
diff --git a/include/asm-generic/kvm_types.h b/include/asm-generic/kvm_types.h
new file mode 100644
index 000000000000..2a82daf110f1
--- /dev/null
+++ b/include/asm-generic/kvm_types.h
@@ -0,0 +1,5 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_GENERIC_KVM_TYPES_H
+#define _ASM_GENERIC_KVM_TYPES_H
+
+#endif
diff --git a/include/linux/kvm_types.h b/include/linux/kvm_types.h
index 1e5d734a2948..8446b08abe44 100644
--- a/include/linux/kvm_types.h
+++ b/include/linux/kvm_types.h
@@ -34,6 +34,8 @@ enum kvm_mr_change;
 
 #include <linux/types.h>
 
+#include <asm/kvm_types.h>
+
 /*
  * Address types:
  *
@@ -72,4 +74,21 @@ struct gfn_to_pfn_cache {
 	bool dirty;
 };
 
+#ifdef KVM_ARCH_NR_OBJS_PER_MEMORY_CACHE
+/*
+ * Memory caches are used to preallocate memory ahead of various MMU flows,
+ * e.g. page fault handlers.  Gracefully handling allocation failures deep in
+ * MMU flows is problematic, as is triggering reclaim, I/O, etc... while
+ * holding MMU locks.  Note, these caches act more like prefetch buffers than
+ * classical caches, i.e. objects are not returned to the cache on being freed.
+ */
+struct kvm_mmu_memory_cache {
+	int nobjs;
+	gfp_t gfp_zero;
+	struct kmem_cache *kmem_cache;
+	void *objects[KVM_ARCH_NR_OBJS_PER_MEMORY_CACHE];
+};
+#endif
+
+
 #endif /* __KVM_TYPES_H__ */
