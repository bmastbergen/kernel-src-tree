net: phy: marvell: unlock after phy_select_page() failure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit 830f5ce266ce79e18f0026c36c99319b1bc08e1b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/830f5ce2.failed

We need to call phy_restore_page() even if phy_select_page() fails.
Otherwise we are holding the phy_lock_mdio_bus() lock.  This requirement
is documented at the start of the phy_select_page() function.

Fixes: a618e86da91d ("net : phy: marvell: Speedup TDR data retrieval by only changing page once")
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 830f5ce266ce79e18f0026c36c99319b1bc08e1b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/marvell.c
diff --cc drivers/net/phy/marvell.c
index e597bee2e966,4ea226566cec..000000000000
--- a/drivers/net/phy/marvell.c
+++ b/drivers/net/phy/marvell.c
@@@ -1843,13 -1859,38 +1843,31 @@@ static int marvell_vct5_amplitude_graph
  	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	for (distance = 0; distance <= 100; distance++) {
 +		err = marvell_vct5_amplitude_distance(phydev, distance);
++=======
+ 	/* Reading the TDR data is very MDIO heavy. We need to optimize
+ 	 * access to keep the time to a minimum. So lock the bus once,
+ 	 * and don't release it until complete. We can then avoid having
+ 	 * to change the page for every access, greatly speeding things
+ 	 * up.
+ 	 */
+ 	page = phy_select_page(phydev, MII_MARVELL_VCT5_PAGE);
+ 	if (page < 0)
+ 		goto restore_page;
+ 
+ 	for (distance = priv->first;
+ 	     distance <= priv->last;
+ 	     distance += priv->step) {
+ 		err = marvell_vct5_amplitude_distance(phydev, distance,
+ 						      priv->pair);
++>>>>>>> 830f5ce266ce (net: phy: marvell: unlock after phy_select_page() failure)
  		if (err)
 -			goto restore_page;
 -
 -		if (distance > TDR_SHORT_CABLE_LENGTH &&
 -		    width == MII_VCT5_TX_PULSE_CTRL_PULSE_WIDTH_32nS) {
 -			width = MII_VCT5_TX_PULSE_CTRL_PULSE_WIDTH_128nS;
 -			reg = MII_VCT5_TX_PULSE_CTRL_GT_140m_46_86mV |
 -				MII_VCT5_TX_PULSE_CTRL_DONT_WAIT_LINK_DOWN |
 -				MII_VCT5_TX_PULSE_CTRL_MAX_AMP | width;
 -			err = __phy_write(phydev, MII_VCT5_TX_PULSE_CTRL, reg);
 -			if (err)
 -				goto restore_page;
 -		}
 +			return err;
  	}
  
 -restore_page:
 -	return phy_restore_page(phydev, page, err);
 +	return 0;
  }
  
  static int marvell_cable_test_start_common(struct phy_device *phydev)
* Unmerged path drivers/net/phy/marvell.c
