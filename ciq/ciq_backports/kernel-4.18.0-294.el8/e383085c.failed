RDMA/mlx5: Set ECE options during QP create

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit e383085c24255821e79d3c2aa6302d804b6a1c48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e383085c.failed

Allow users to ask creation of QPs with specific ECE options.  Such early
set even before RDMA-CM connection is established is useful if user knows
exactly which option he needs.

Link: https://lore.kernel.org/r/20200526115440.205922-4-leon@kernel.org
	Reviewed-by: Mark Zhang <markz@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit e383085c24255821e79d3c2aa6302d804b6a1c48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index d7b72402de2d,eb70eb371b4b..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -1632,14 -1548,27 +1632,32 @@@ static void destroy_rss_raw_qp_tir(stru
  			     to_mpd(qp->ibqp.pd)->uid);
  }
  
++<<<<<<< HEAD
 +static int create_rss_raw_qp_tir(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
 +				 struct ib_pd *pd,
 +				 struct ib_qp_init_attr *init_attr,
 +				 struct ib_udata *udata)
++=======
+ struct mlx5_create_qp_params {
+ 	struct ib_udata *udata;
+ 	size_t inlen;
+ 	size_t outlen;
+ 	size_t ucmd_size;
+ 	void *ucmd;
+ 	u8 is_rss_raw : 1;
+ 	struct ib_qp_init_attr *attr;
+ 	u32 uidx;
+ 	struct mlx5_ib_create_qp_resp resp;
+ };
+ 
+ static int create_rss_raw_qp_tir(struct mlx5_ib_dev *dev, struct ib_pd *pd,
+ 				 struct mlx5_ib_qp *qp,
+ 				 struct mlx5_create_qp_params *params)
++>>>>>>> e383085c2425 (RDMA/mlx5: Set ECE options during QP create)
  {
 -	struct ib_qp_init_attr *init_attr = params->attr;
 -	struct mlx5_ib_create_qp_rss *ucmd = params->ucmd;
 -	struct ib_udata *udata = params->udata;
  	struct mlx5_ib_ucontext *mucontext = rdma_udata_to_drv_context(
  		udata, struct mlx5_ib_ucontext, ibucontext);
 +	struct mlx5_ib_create_qp_resp resp = {};
  	int inlen;
  	int outlen;
  	int err;
@@@ -1960,15 -1837,94 +1978,92 @@@ static int get_atomic_mode(struct mlx5_
  	return atomic_mode;
  }
  
 -static int create_xrc_tgt_qp(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
 -			     struct mlx5_create_qp_params *params)
 +static inline bool check_flags_mask(uint64_t input, uint64_t supported)
  {
++<<<<<<< HEAD
 +	return (input & ~supported) == 0;
++=======
+ 	struct mlx5_ib_create_qp *ucmd = params->ucmd;
+ 	struct ib_qp_init_attr *attr = params->attr;
+ 	u32 uidx = params->uidx;
+ 	struct mlx5_ib_resources *devr = &dev->devr;
+ 	u32 out[MLX5_ST_SZ_DW(create_qp_out)] = {};
+ 	int inlen = MLX5_ST_SZ_BYTES(create_qp_in);
+ 	struct mlx5_core_dev *mdev = dev->mdev;
+ 	struct mlx5_ib_qp_base *base;
+ 	unsigned long flags;
+ 	void *qpc;
+ 	u32 *in;
+ 	int err;
+ 
+ 	mutex_init(&qp->mutex);
+ 
+ 	if (attr->sq_sig_type == IB_SIGNAL_ALL_WR)
+ 		qp->sq_signal_bits = MLX5_WQE_CTRL_CQ_UPDATE;
+ 
+ 	in = kvzalloc(inlen, GFP_KERNEL);
+ 	if (!in)
+ 		return -ENOMEM;
+ 
+ 	if (MLX5_CAP_GEN(mdev, ece_support))
+ 		MLX5_SET(create_qp_in, in, ece, ucmd->ece_options);
+ 	qpc = MLX5_ADDR_OF(create_qp_in, in, qpc);
+ 
+ 	MLX5_SET(qpc, qpc, st, MLX5_QP_ST_XRC);
+ 	MLX5_SET(qpc, qpc, pm_state, MLX5_QP_PM_MIGRATED);
+ 	MLX5_SET(qpc, qpc, pd, to_mpd(devr->p0)->pdn);
+ 
+ 	if (qp->flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK)
+ 		MLX5_SET(qpc, qpc, block_lb_mc, 1);
+ 	if (qp->flags & IB_QP_CREATE_CROSS_CHANNEL)
+ 		MLX5_SET(qpc, qpc, cd_master, 1);
+ 	if (qp->flags & IB_QP_CREATE_MANAGED_SEND)
+ 		MLX5_SET(qpc, qpc, cd_slave_send, 1);
+ 	if (qp->flags & IB_QP_CREATE_MANAGED_RECV)
+ 		MLX5_SET(qpc, qpc, cd_slave_receive, 1);
+ 
+ 	MLX5_SET(qpc, qpc, rq_type, MLX5_SRQ_RQ);
+ 	MLX5_SET(qpc, qpc, no_sq, 1);
+ 	MLX5_SET(qpc, qpc, cqn_rcv, to_mcq(devr->c0)->mcq.cqn);
+ 	MLX5_SET(qpc, qpc, cqn_snd, to_mcq(devr->c0)->mcq.cqn);
+ 	MLX5_SET(qpc, qpc, srqn_rmpn_xrqn, to_msrq(devr->s0)->msrq.srqn);
+ 	MLX5_SET(qpc, qpc, xrcd, to_mxrcd(attr->xrcd)->xrcdn);
+ 	MLX5_SET64(qpc, qpc, dbr_addr, qp->db.dma);
+ 
+ 	/* 0xffffff means we ask to work with cqe version 0 */
+ 	if (MLX5_CAP_GEN(mdev, cqe_version) == MLX5_CQE_VERSION_V1)
+ 		MLX5_SET(qpc, qpc, user_index, uidx);
+ 
+ 	if (qp->flags & IB_QP_CREATE_PCI_WRITE_END_PADDING) {
+ 		MLX5_SET(qpc, qpc, end_padding_mode,
+ 			 MLX5_WQ_END_PAD_MODE_ALIGN);
+ 		/* Special case to clean flag */
+ 		qp->flags &= ~IB_QP_CREATE_PCI_WRITE_END_PADDING;
+ 	}
+ 
+ 	base = &qp->trans_qp.base;
+ 	err = mlx5_qpc_create_qp(dev, &base->mqp, in, inlen, out);
+ 	kvfree(in);
+ 	if (err)
+ 		return err;
+ 
+ 	base->container_mibqp = qp;
+ 	base->mqp.event = mlx5_ib_qp_event;
+ 	params->resp.ece_options = MLX5_GET(create_qp_out, out, ece);
+ 
+ 	spin_lock_irqsave(&dev->reset_flow_resource_lock, flags);
+ 	list_add_tail(&qp->qps_list, &dev->qp_list);
+ 	spin_unlock_irqrestore(&dev->reset_flow_resource_lock, flags);
+ 
+ 	qp->trans_qp.xrcdn = to_mxrcd(attr->xrcd)->xrcdn;
+ 	return 0;
++>>>>>>> e383085c2425 (RDMA/mlx5: Set ECE options during QP create)
  }
  
 -static int create_user_qp(struct mlx5_ib_dev *dev, struct ib_pd *pd,
 -			  struct mlx5_ib_qp *qp,
 -			  struct mlx5_create_qp_params *params)
 +static int create_qp_common(struct mlx5_ib_dev *dev, struct ib_pd *pd,
 +			    struct ib_qp_init_attr *init_attr,
 +			    struct ib_udata *udata, struct mlx5_ib_qp *qp)
  {
 -	struct ib_qp_init_attr *init_attr = params->attr;
 -	struct mlx5_ib_create_qp *ucmd = params->ucmd;
 -	u32 out[MLX5_ST_SZ_DW(create_qp_out)] = {};
 -	struct ib_udata *udata = params->udata;
 -	u32 uidx = params->uidx;
  	struct mlx5_ib_resources *devr = &dev->devr;
  	int inlen = MLX5_ST_SZ_BYTES(create_qp_in);
  	struct mlx5_core_dev *mdev = dev->mdev;
@@@ -2652,128 -2520,330 +2749,362 @@@ static int set_mlx_qp_type(struct mlx5_
  	return 0;
  }
  
++<<<<<<< HEAD
 +struct ib_qp *mlx5_ib_create_qp(struct ib_pd *pd,
 +				struct ib_qp_init_attr *verbs_init_attr,
 +				struct ib_udata *udata)
++=======
+ static void process_vendor_flag(struct mlx5_ib_dev *dev, int *flags, int flag,
+ 				bool cond, struct mlx5_ib_qp *qp)
+ {
+ 	if (!(*flags & flag))
+ 		return;
+ 
+ 	if (cond) {
+ 		qp->flags_en |= flag;
+ 		*flags &= ~flag;
+ 		return;
+ 	}
+ 
+ 	if (flag == MLX5_QP_FLAG_SCATTER_CQE) {
+ 		/*
+ 		 * We don't return error if this flag was provided,
+ 		 * and mlx5 doesn't have right capability.
+ 		 */
+ 		*flags &= ~MLX5_QP_FLAG_SCATTER_CQE;
+ 		return;
+ 	}
+ 	mlx5_ib_dbg(dev, "Vendor create QP flag 0x%X is not supported\n", flag);
+ }
+ 
+ static int process_vendor_flags(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
+ 				void *ucmd, struct ib_qp_init_attr *attr)
+ {
+ 	struct mlx5_core_dev *mdev = dev->mdev;
+ 	bool cond;
+ 	int flags;
+ 
+ 	if (attr->rwq_ind_tbl)
+ 		flags = ((struct mlx5_ib_create_qp_rss *)ucmd)->flags;
+ 	else
+ 		flags = ((struct mlx5_ib_create_qp *)ucmd)->flags;
+ 
+ 	switch (flags & (MLX5_QP_FLAG_TYPE_DCT | MLX5_QP_FLAG_TYPE_DCI)) {
+ 	case MLX5_QP_FLAG_TYPE_DCI:
+ 		qp->type = MLX5_IB_QPT_DCI;
+ 		break;
+ 	case MLX5_QP_FLAG_TYPE_DCT:
+ 		qp->type = MLX5_IB_QPT_DCT;
+ 		break;
+ 	default:
+ 		if (qp->type != IB_QPT_DRIVER)
+ 			break;
+ 		/*
+ 		 * It is IB_QPT_DRIVER and or no subtype or
+ 		 * wrong subtype were provided.
+ 		 */
+ 		return -EINVAL;
+ 	}
+ 
+ 	process_vendor_flag(dev, &flags, MLX5_QP_FLAG_TYPE_DCI, true, qp);
+ 	process_vendor_flag(dev, &flags, MLX5_QP_FLAG_TYPE_DCT, true, qp);
+ 
+ 	process_vendor_flag(dev, &flags, MLX5_QP_FLAG_SIGNATURE, true, qp);
+ 	process_vendor_flag(dev, &flags, MLX5_QP_FLAG_SCATTER_CQE,
+ 			    MLX5_CAP_GEN(mdev, sctr_data_cqe), qp);
+ 
+ 	if (qp->type == IB_QPT_RAW_PACKET) {
+ 		cond = MLX5_CAP_ETH(mdev, tunnel_stateless_vxlan) ||
+ 		       MLX5_CAP_ETH(mdev, tunnel_stateless_gre) ||
+ 		       MLX5_CAP_ETH(mdev, tunnel_stateless_geneve_rx);
+ 		process_vendor_flag(dev, &flags, MLX5_QP_FLAG_TUNNEL_OFFLOADS,
+ 				    cond, qp);
+ 		process_vendor_flag(dev, &flags,
+ 				    MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_UC, true,
+ 				    qp);
+ 		process_vendor_flag(dev, &flags,
+ 				    MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_MC, true,
+ 				    qp);
+ 	}
+ 
+ 	if (qp->type == IB_QPT_RC)
+ 		process_vendor_flag(dev, &flags,
+ 				    MLX5_QP_FLAG_PACKET_BASED_CREDIT_MODE,
+ 				    MLX5_CAP_GEN(mdev, qp_packet_based), qp);
+ 
+ 	process_vendor_flag(dev, &flags, MLX5_QP_FLAG_BFREG_INDEX, true, qp);
+ 	process_vendor_flag(dev, &flags, MLX5_QP_FLAG_UAR_PAGE_INDEX, true, qp);
+ 
+ 	cond = qp->flags_en & ~(MLX5_QP_FLAG_TUNNEL_OFFLOADS |
+ 				MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_UC |
+ 				MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_MC);
+ 	if (attr->rwq_ind_tbl && cond) {
+ 		mlx5_ib_dbg(dev, "RSS RAW QP has unsupported flags 0x%X\n",
+ 			    cond);
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (flags)
+ 		mlx5_ib_dbg(dev, "udata has unsupported flags 0x%X\n", flags);
+ 
+ 	return (flags) ? -EINVAL : 0;
+ 	}
+ 
+ static void process_create_flag(struct mlx5_ib_dev *dev, int *flags, int flag,
+ 				bool cond, struct mlx5_ib_qp *qp)
+ {
+ 	if (!(*flags & flag))
+ 		return;
+ 
+ 	if (cond) {
+ 		qp->flags |= flag;
+ 		*flags &= ~flag;
+ 		return;
+ 	}
+ 
+ 	if (flag == MLX5_IB_QP_CREATE_WC_TEST) {
+ 		/*
+ 		 * Special case, if condition didn't meet, it won't be error,
+ 		 * just different in-kernel flow.
+ 		 */
+ 		*flags &= ~MLX5_IB_QP_CREATE_WC_TEST;
+ 		return;
+ 	}
+ 	mlx5_ib_dbg(dev, "Verbs create QP flag 0x%X is not supported\n", flag);
+ }
+ 
+ static int process_create_flags(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
+ 				struct ib_qp_init_attr *attr)
+ {
+ 	enum ib_qp_type qp_type = qp->type;
+ 	struct mlx5_core_dev *mdev = dev->mdev;
+ 	int create_flags = attr->create_flags;
+ 	bool cond;
+ 
+ 	if (qp->type == IB_QPT_UD && dev->profile == &raw_eth_profile)
+ 		if (create_flags & ~MLX5_IB_QP_CREATE_WC_TEST)
+ 			return -EINVAL;
+ 
+ 	if (qp_type == MLX5_IB_QPT_DCT)
+ 		return (create_flags) ? -EINVAL : 0;
+ 
+ 	if (qp_type == IB_QPT_RAW_PACKET && attr->rwq_ind_tbl)
+ 		return (create_flags) ? -EINVAL : 0;
+ 
+ 	process_create_flag(dev, &create_flags,
+ 			    IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK,
+ 			    MLX5_CAP_GEN(mdev, block_lb_mc), qp);
+ 	process_create_flag(dev, &create_flags, IB_QP_CREATE_CROSS_CHANNEL,
+ 			    MLX5_CAP_GEN(mdev, cd), qp);
+ 	process_create_flag(dev, &create_flags, IB_QP_CREATE_MANAGED_SEND,
+ 			    MLX5_CAP_GEN(mdev, cd), qp);
+ 	process_create_flag(dev, &create_flags, IB_QP_CREATE_MANAGED_RECV,
+ 			    MLX5_CAP_GEN(mdev, cd), qp);
+ 
+ 	if (qp_type == IB_QPT_UD) {
+ 		process_create_flag(dev, &create_flags,
+ 				    IB_QP_CREATE_IPOIB_UD_LSO,
+ 				    MLX5_CAP_GEN(mdev, ipoib_basic_offloads),
+ 				    qp);
+ 		cond = MLX5_CAP_GEN(mdev, port_type) == MLX5_CAP_PORT_TYPE_IB;
+ 		process_create_flag(dev, &create_flags, IB_QP_CREATE_SOURCE_QPN,
+ 				    cond, qp);
+ 	}
+ 
+ 	if (qp_type == IB_QPT_RAW_PACKET) {
+ 		cond = MLX5_CAP_GEN(mdev, eth_net_offloads) &&
+ 		       MLX5_CAP_ETH(mdev, scatter_fcs);
+ 		process_create_flag(dev, &create_flags,
+ 				    IB_QP_CREATE_SCATTER_FCS, cond, qp);
+ 
+ 		cond = MLX5_CAP_GEN(mdev, eth_net_offloads) &&
+ 		       MLX5_CAP_ETH(mdev, vlan_cap);
+ 		process_create_flag(dev, &create_flags,
+ 				    IB_QP_CREATE_CVLAN_STRIPPING, cond, qp);
+ 	}
+ 
+ 	process_create_flag(dev, &create_flags,
+ 			    IB_QP_CREATE_PCI_WRITE_END_PADDING,
+ 			    MLX5_CAP_GEN(mdev, end_pad), qp);
+ 
+ 	process_create_flag(dev, &create_flags, MLX5_IB_QP_CREATE_WC_TEST,
+ 			    qp_type != MLX5_IB_QPT_REG_UMR, qp);
+ 	process_create_flag(dev, &create_flags, MLX5_IB_QP_CREATE_SQPN_QP1,
+ 			    true, qp);
+ 
+ 	if (create_flags)
+ 		mlx5_ib_dbg(dev, "Create QP has unsupported flags 0x%X\n",
+ 			    create_flags);
+ 
+ 	return (create_flags) ? -EINVAL : 0;
+ }
+ 
+ static int process_udata_size(struct mlx5_ib_dev *dev,
+ 			      struct mlx5_create_qp_params *params)
+ {
+ 	size_t ucmd = sizeof(struct mlx5_ib_create_qp);
+ 	struct ib_udata *udata = params->udata;
+ 	size_t outlen = udata->outlen;
+ 	size_t inlen = udata->inlen;
+ 
+ 	params->outlen = min(outlen, sizeof(struct mlx5_ib_create_qp_resp));
+ 	params->ucmd_size = ucmd;
+ 	if (!params->is_rss_raw) {
+ 		/* User has old rdma-core, which doesn't support ECE */
+ 		size_t min_inlen =
+ 			offsetof(struct mlx5_ib_create_qp, ece_options);
+ 
+ 		/*
+ 		 * We will check in check_ucmd_data() that user
+ 		 * cleared everything after inlen.
+ 		 */
+ 		params->inlen = (inlen < min_inlen) ? 0 : min(inlen, ucmd);
+ 		goto out;
+ 	}
+ 
+ 	/* RSS RAW QP */
+ 	if (inlen < offsetofend(struct mlx5_ib_create_qp_rss, flags))
+ 		return -EINVAL;
+ 
+ 	if (outlen < offsetofend(struct mlx5_ib_create_qp_resp, bfreg_index))
+ 		return -EINVAL;
+ 
+ 	ucmd = sizeof(struct mlx5_ib_create_qp_rss);
+ 	params->ucmd_size = ucmd;
+ 	if (inlen > ucmd && !ib_is_udata_cleared(udata, ucmd, inlen - ucmd))
+ 		return -EINVAL;
+ 
+ 	params->inlen = min(ucmd, inlen);
+ out:
+ 	if (!params->inlen)
+ 		mlx5_ib_dbg(dev, "udata is too small\n");
+ 
+ 	return (params->inlen) ? 0 : -EINVAL;
+ }
+ 
+ static int create_qp(struct mlx5_ib_dev *dev, struct ib_pd *pd,
+ 		     struct mlx5_ib_qp *qp,
+ 		     struct mlx5_create_qp_params *params)
++>>>>>>> e383085c2425 (RDMA/mlx5: Set ECE options during QP create)
  {
 +	struct mlx5_ib_dev *dev;
 +	struct mlx5_ib_qp *qp;
 +	u16 xrcdn = 0;
  	int err;
 +	struct ib_qp_init_attr mlx_init_attr;
 +	struct ib_qp_init_attr *init_attr = verbs_init_attr;
 +	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
 +		udata, struct mlx5_ib_ucontext, ibucontext);
  
 -	if (params->is_rss_raw) {
 -		err = create_rss_raw_qp_tir(dev, pd, qp, params);
 -		goto out;
 -	}
 +	if (pd) {
 +		dev = to_mdev(pd->device);
  
 -	if (qp->type == MLX5_IB_QPT_DCT) {
 -		err = create_dct(pd, qp, params);
 -		goto out;
 +		if (init_attr->qp_type == IB_QPT_RAW_PACKET) {
 +			if (!ucontext) {
 +				mlx5_ib_dbg(dev, "Raw Packet QP is not supported for kernel consumers\n");
 +				return ERR_PTR(-EINVAL);
 +			} else if (!ucontext->cqe_version) {
 +				mlx5_ib_dbg(dev, "Raw Packet QP is only supported for CQE version > 0\n");
 +				return ERR_PTR(-EINVAL);
 +			}
 +		}
 +	} else {
 +		/* being cautious here */
 +		if (init_attr->qp_type != IB_QPT_XRC_TGT &&
 +		    init_attr->qp_type != MLX5_IB_QPT_REG_UMR) {
 +			pr_warn("%s: no PD for transport %s\n", __func__,
 +				ib_qp_type_str(init_attr->qp_type));
 +			return ERR_PTR(-EINVAL);
 +		}
 +		dev = to_mdev(to_mxrcd(init_attr->xrcd)->ibxrcd.device);
  	}
  
 -	if (qp->type == IB_QPT_XRC_TGT) {
 -		err = create_xrc_tgt_qp(dev, qp, params);
 -		goto out;
 -	}
 +	if (init_attr->qp_type == IB_QPT_DRIVER) {
 +		struct mlx5_ib_create_qp ucmd;
  
 -	if (params->udata)
 -		err = create_user_qp(dev, pd, qp, params);
 -	else
 -		err = create_kernel_qp(dev, pd, qp, params);
 +		init_attr = &mlx_init_attr;
 +		memcpy(init_attr, verbs_init_attr, sizeof(*verbs_init_attr));
 +		err = set_mlx_qp_type(dev, init_attr, &ucmd, udata);
 +		if (err)
 +			return ERR_PTR(err);
  
 -out:
 -	if (err) {
 -		mlx5_ib_err(dev, "Create QP type %d failed\n", qp->type);
 -		return err;
 +		if (init_attr->qp_type == MLX5_IB_QPT_DCI) {
 +			if (init_attr->cap.max_recv_wr ||
 +			    init_attr->cap.max_recv_sge) {
 +				mlx5_ib_dbg(dev, "DCI QP requires zero size receive queue\n");
 +				return ERR_PTR(-EINVAL);
 +			}
 +		} else {
 +			return mlx5_ib_create_dct(pd, init_attr, &ucmd, udata);
 +		}
  	}
  
 -	if (is_qp0(qp->type))
 -		qp->ibqp.qp_num = 0;
 -	else if (is_qp1(qp->type))
 -		qp->ibqp.qp_num = 1;
 -	else
 -		qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
 +	switch (init_attr->qp_type) {
 +	case IB_QPT_XRC_TGT:
 +	case IB_QPT_XRC_INI:
 +		if (!MLX5_CAP_GEN(dev->mdev, xrc)) {
 +			mlx5_ib_dbg(dev, "XRC not supported\n");
 +			return ERR_PTR(-ENOSYS);
 +		}
 +		init_attr->recv_cq = NULL;
 +		if (init_attr->qp_type == IB_QPT_XRC_TGT) {
 +			xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
 +			init_attr->send_cq = NULL;
 +		}
 +
 +		/* fall through */
 +	case IB_QPT_RAW_PACKET:
 +	case IB_QPT_RC:
 +	case IB_QPT_UC:
 +	case IB_QPT_UD:
 +	case IB_QPT_SMI:
 +	case MLX5_IB_QPT_HW_GSI:
 +	case MLX5_IB_QPT_REG_UMR:
 +	case MLX5_IB_QPT_DCI:
 +		qp = kzalloc(sizeof(*qp), GFP_KERNEL);
 +		if (!qp)
 +			return ERR_PTR(-ENOMEM);
 +
 +		err = create_qp_common(dev, pd, init_attr, udata, qp);
 +		if (err) {
 +			mlx5_ib_dbg(dev, "create_qp_common failed\n");
 +			kfree(qp);
 +			return ERR_PTR(err);
 +		}
  
 -	mlx5_ib_dbg(dev,
 -		"QP type %d, ib qpn 0x%X, mlx qpn 0x%x, rcqn 0x%x, scqn 0x%x, ece 0x%x\n",
 -		qp->type, qp->ibqp.qp_num, qp->trans_qp.base.mqp.qpn,
 -		params->attr->recv_cq ? to_mcq(params->attr->recv_cq)->mcq.cqn :
 -					-1,
 -		params->attr->send_cq ? to_mcq(params->attr->send_cq)->mcq.cqn :
 -					-1,
 -		params->resp.ece_options);
 +		if (is_qp0(init_attr->qp_type))
 +			qp->ibqp.qp_num = 0;
 +		else if (is_qp1(init_attr->qp_type))
 +			qp->ibqp.qp_num = 1;
 +		else
 +			qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
  
 -	return 0;
 -}
 +		mlx5_ib_dbg(dev, "ib qpnum 0x%x, mlx qpn 0x%x, rcqn 0x%x, scqn 0x%x\n",
 +			    qp->ibqp.qp_num, qp->trans_qp.base.mqp.qpn,
 +			    init_attr->recv_cq ? to_mcq(init_attr->recv_cq)->mcq.cqn : -1,
 +			    init_attr->send_cq ? to_mcq(init_attr->send_cq)->mcq.cqn : -1);
  
 -static int check_qp_attr(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
 -			 struct ib_qp_init_attr *attr)
 -{
 -	int ret = 0;
 +		qp->trans_qp.xrcdn = xrcdn;
  
 -	switch (qp->type) {
 -	case MLX5_IB_QPT_DCT:
 -		ret = (!attr->srq || !attr->recv_cq) ? -EINVAL : 0;
  		break;
 -	case MLX5_IB_QPT_DCI:
 -		ret = (attr->cap.max_recv_wr || attr->cap.max_recv_sge) ?
 -			      -EINVAL :
 -			      0;
 -		break;
 -	case IB_QPT_RAW_PACKET:
 -		ret = (attr->rwq_ind_tbl && attr->send_cq) ? -EINVAL : 0;
 -		break;
 -	default:
 -		break;
 -	}
 -
 -	if (ret)
 -		mlx5_ib_dbg(dev, "QP type %d has wrong attributes\n", qp->type);
  
 -	return ret;
 -}
 +	case IB_QPT_GSI:
 +		return mlx5_ib_gsi_create_qp(pd, init_attr);
  
 -static int get_qp_uidx(struct mlx5_ib_qp *qp,
 -		       struct mlx5_create_qp_params *params)
 -{
 -	struct mlx5_ib_create_qp *ucmd = params->ucmd;
 -	struct ib_udata *udata = params->udata;
 -	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
 -		udata, struct mlx5_ib_ucontext, ibucontext);
 +	case IB_QPT_RAW_IPV6:
 +	case IB_QPT_RAW_ETHERTYPE:
 +	case IB_QPT_MAX:
 +	default:
 +		mlx5_ib_dbg(dev, "unsupported qp type %d\n",
 +			    init_attr->qp_type);
 +		/* Don't support raw QPs */
 +		return ERR_PTR(-EINVAL);
 +	}
  
 -	if (params->is_rss_raw)
 -		return 0;
 +	if (verbs_init_attr->qp_type == IB_QPT_DRIVER)
 +		qp->qp_sub_type = init_attr->qp_type;
  
 -	return get_qp_user_index(ucontext, ucmd, sizeof(*ucmd), &params->uidx);
 +	return &qp->ibqp;
  }
  
  static int mlx5_ib_destroy_dct(struct mlx5_ib_qp *mqp)
@@@ -2795,6 -2865,151 +3126,154 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int check_ucmd_data(struct mlx5_ib_dev *dev,
+ 			   struct mlx5_create_qp_params *params)
+ {
+ 	struct ib_qp_init_attr *attr = params->attr;
+ 	struct ib_udata *udata = params->udata;
+ 	size_t size, last;
+ 	int ret;
+ 
+ 	if (params->is_rss_raw)
+ 		/*
+ 		 * These QPs don't have "reserved" field in their
+ 		 * create_qp input struct, so their data is always valid.
+ 		 */
+ 		last = sizeof(struct mlx5_ib_create_qp_rss);
+ 	else
+ 		/* IB_QPT_RAW_PACKET and IB_QPT_DRIVER don't have ECE data */
+ 		switch (attr->qp_type) {
+ 		case IB_QPT_DRIVER:
+ 		case IB_QPT_RAW_PACKET:
+ 			last = offsetof(struct mlx5_ib_create_qp, ece_options);
+ 			break;
+ 		default:
+ 			last = offsetof(struct mlx5_ib_create_qp, reserved);
+ 		}
+ 
+ 	if (udata->inlen <= last)
+ 		return 0;
+ 
+ 	/*
+ 	 * User provides different create_qp structures based on the
+ 	 * flow and we need to know if he cleared memory after our
+ 	 * struct create_qp ends.
+ 	 */
+ 	size = udata->inlen - last;
+ 	ret = ib_is_udata_cleared(params->udata, last, size);
+ 	if (!ret)
+ 		mlx5_ib_dbg(
+ 			dev,
+ 			"udata is not cleared, inlen = %lu, ucmd = %lu, last = %lu, size = %lu\n",
+ 			udata->inlen, params->ucmd_size, last, size);
+ 	return ret ? 0 : -EINVAL;
+ }
+ 
+ struct ib_qp *mlx5_ib_create_qp(struct ib_pd *pd, struct ib_qp_init_attr *attr,
+ 				struct ib_udata *udata)
+ {
+ 	struct mlx5_create_qp_params params = {};
+ 	struct mlx5_ib_dev *dev;
+ 	struct mlx5_ib_qp *qp;
+ 	enum ib_qp_type type;
+ 	int err;
+ 
+ 	dev = pd ? to_mdev(pd->device) :
+ 		   to_mdev(to_mxrcd(attr->xrcd)->ibxrcd.device);
+ 
+ 	err = check_qp_type(dev, attr, &type);
+ 	if (err)
+ 		return ERR_PTR(err);
+ 
+ 	err = check_valid_flow(dev, pd, attr, udata);
+ 	if (err)
+ 		return ERR_PTR(err);
+ 
+ 	if (attr->qp_type == IB_QPT_GSI)
+ 		return mlx5_ib_gsi_create_qp(pd, attr);
+ 
+ 	params.udata = udata;
+ 	params.uidx = MLX5_IB_DEFAULT_UIDX;
+ 	params.attr = attr;
+ 	params.is_rss_raw = !!attr->rwq_ind_tbl;
+ 
+ 	if (udata) {
+ 		err = process_udata_size(dev, &params);
+ 		if (err)
+ 			return ERR_PTR(err);
+ 
+ 		err = check_ucmd_data(dev, &params);
+ 		if (err)
+ 			return ERR_PTR(err);
+ 
+ 		params.ucmd = kzalloc(params.ucmd_size, GFP_KERNEL);
+ 		if (!params.ucmd)
+ 			return ERR_PTR(-ENOMEM);
+ 
+ 		err = ib_copy_from_udata(params.ucmd, udata, params.inlen);
+ 		if (err)
+ 			goto free_ucmd;
+ 	}
+ 
+ 	qp = kzalloc(sizeof(*qp), GFP_KERNEL);
+ 	if (!qp) {
+ 		err = -ENOMEM;
+ 		goto free_ucmd;
+ 	}
+ 
+ 	qp->type = type;
+ 	if (udata) {
+ 		err = process_vendor_flags(dev, qp, params.ucmd, attr);
+ 		if (err)
+ 			goto free_qp;
+ 
+ 		err = get_qp_uidx(qp, &params);
+ 		if (err)
+ 			goto free_qp;
+ 	}
+ 	err = process_create_flags(dev, qp, attr);
+ 	if (err)
+ 		goto free_qp;
+ 
+ 	err = check_qp_attr(dev, qp, attr);
+ 	if (err)
+ 		goto free_qp;
+ 
+ 	err = create_qp(dev, pd, qp, &params);
+ 	if (err)
+ 		goto free_qp;
+ 
+ 	kfree(params.ucmd);
+ 	params.ucmd = NULL;
+ 
+ 	if (udata)
+ 		/*
+ 		 * It is safe to copy response for all user create QP flows,
+ 		 * including MLX5_IB_QPT_DCT, which doesn't need it.
+ 		 * In that case, resp will be filled with zeros.
+ 		 */
+ 		err = ib_copy_to_udata(udata, &params.resp, params.outlen);
+ 	if (err)
+ 		goto destroy_qp;
+ 
+ 	return &qp->ibqp;
+ 
+ destroy_qp:
+ 	if (qp->type == MLX5_IB_QPT_DCT)
+ 		mlx5_ib_destroy_dct(qp);
+ 	else
+ 		destroy_qp_common(dev, qp, udata);
+ 	qp = NULL;
+ free_qp:
+ 	kfree(qp);
+ free_ucmd:
+ 	kfree(params.ucmd);
+ 	return ERR_PTR(err);
+ }
+ 
++>>>>>>> e383085c2425 (RDMA/mlx5: Set ECE options during QP create)
  int mlx5_ib_destroy_qp(struct ib_qp *qp, struct ib_udata *udata)
  {
  	struct mlx5_ib_dev *dev = to_mdev(qp->device);
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
diff --git a/include/uapi/rdma/mlx5-abi.h b/include/uapi/rdma/mlx5-abi.h
index a65d60b44829..0a02d6fac631 100644
--- a/include/uapi/rdma/mlx5-abi.h
+++ b/include/uapi/rdma/mlx5-abi.h
@@ -321,6 +321,8 @@ struct mlx5_ib_create_qp {
 		__aligned_u64 sq_buf_addr;
 		__aligned_u64 access_key;
 	};
+	__u32  ece_options;
+	__u32  reserved;
 };
 
 /* RX Hash function flags */
