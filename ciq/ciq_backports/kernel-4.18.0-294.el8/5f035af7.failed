net:qos: police action offloading parameter 'burst' change to the original value

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [net] qos: police action offloading parameter 'burst' change to the original value (Ivan Vecera) [1874071]
Rebuild_FUZZ: 97.44%
commit-author Po Liu <po.liu@nxp.com>
commit 5f035af76e51cd622abc6564d5512ffeb9e06917
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5f035af7.failed

Since 'tcfp_burst' with TICK factor, driver side always need to recover
it to the original value, this patch moves the generic calculation and
recover to the 'burst' original value before offloading to device driver.

	Signed-off-by: Po Liu <po.liu@nxp.com>
	Acked-by: Vladimir Oltean <vladimir.oltean@nxp.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5f035af76e51cd622abc6564d5512ffeb9e06917)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/dsa/ocelot/felix.c
#	drivers/net/dsa/sja1105/sja1105_flower.c
#	drivers/net/dsa/sja1105/sja1105_main.c
#	drivers/net/ethernet/freescale/enetc/enetc_qos.c
#	drivers/net/ethernet/mscc/ocelot_flower.c
#	drivers/net/ethernet/mscc/ocelot_net.c
#	include/net/dsa.h
diff --cc include/net/dsa.h
index 42b76aedf6cf,4046ccd1945d..000000000000
--- a/include/net/dsa.h
+++ b/include/net/dsa.h
@@@ -158,6 -142,12 +158,15 @@@ struct dsa_mall_mirror_tc_entry 
  	bool ingress;
  };
  
++<<<<<<< HEAD
++=======
+ /* TC port policer entry */
+ struct dsa_mall_policer_tc_entry {
+ 	u32 burst;
+ 	u64 rate_bytes_per_sec;
+ };
+ 
++>>>>>>> 5f035af76e51 (net:qos: police action offloading parameter 'burst' change to the original value)
  /* TC matchall entry */
  struct dsa_mall_tc_entry {
  	struct list_head list;
* Unmerged path drivers/net/dsa/ocelot/felix.c
* Unmerged path drivers/net/dsa/sja1105/sja1105_flower.c
* Unmerged path drivers/net/dsa/sja1105/sja1105_main.c
* Unmerged path drivers/net/ethernet/freescale/enetc/enetc_qos.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_flower.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_net.c
* Unmerged path drivers/net/dsa/ocelot/felix.c
* Unmerged path drivers/net/dsa/sja1105/sja1105_flower.c
* Unmerged path drivers/net/dsa/sja1105/sja1105_main.c
* Unmerged path drivers/net/ethernet/freescale/enetc/enetc_qos.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_flower.c
* Unmerged path drivers/net/ethernet/mscc/ocelot_net.c
diff --git a/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c b/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
index d18a830e4264..d31f918e5b35 100644
--- a/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/qos_conf.c
@@ -69,7 +69,8 @@ nfp_flower_install_rate_limiter(struct nfp_app *app, struct net_device *netdev,
 	struct nfp_repr *repr;
 	struct sk_buff *skb;
 	u32 netdev_port_id;
-	u64 burst, rate;
+	u32 burst;
+	u64 rate;
 
 	if (!nfp_netdev_is_nfp_repr(netdev)) {
 		NL_SET_ERR_MSG_MOD(extack, "unsupported offload: qos rate limit offload not supported on higher level port");
@@ -104,8 +105,7 @@ nfp_flower_install_rate_limiter(struct nfp_app *app, struct net_device *netdev,
 	}
 
 	rate = action->police.rate_bytes_ps;
-	burst = div_u64(rate * PSCHED_NS2TICKS(action->police.burst),
-			PSCHED_TICKS_PER_SEC);
+	burst = action->police.burst;
 	netdev_port_id = nfp_repr_get_port_id(netdev);
 
 	skb = nfp_flower_cmsg_alloc(repr->app, sizeof(struct nfp_police_config),
* Unmerged path include/net/dsa.h
diff --git a/include/net/flow_offload.h b/include/net/flow_offload.h
index 25f5ebd13aa2..02773b34dd99 100644
--- a/include/net/flow_offload.h
+++ b/include/net/flow_offload.h
@@ -232,7 +232,7 @@ struct flow_action_entry {
 		} sample;
 		struct {				/* FLOW_ACTION_POLICE */
 			u32			index;
-			s64			burst;
+			u32			burst;
 			u64			rate_bytes_ps;
 			u32			mtu;
 		} police;
diff --git a/include/net/tc_act/tc_police.h b/include/net/tc_act/tc_police.h
index cd973b10ae8c..6d1e26b709b5 100644
--- a/include/net/tc_act/tc_police.h
+++ b/include/net/tc_act/tc_police.h
@@ -59,14 +59,42 @@ static inline u64 tcf_police_rate_bytes_ps(const struct tc_action *act)
 	return params->rate.rate_bytes_ps;
 }
 
-static inline s64 tcf_police_tcfp_burst(const struct tc_action *act)
+static inline u32 tcf_police_burst(const struct tc_action *act)
 {
 	struct tcf_police *police = to_police(act);
 	struct tcf_police_params *params;
+	u32 burst;
 
 	params = rcu_dereference_protected(police->params,
 					   lockdep_is_held(&police->tcf_lock));
-	return params->tcfp_burst;
+
+	/*
+	 *  "rate" bytes   "burst" nanoseconds
+	 *  ------------ * -------------------
+	 *    1 second          2^6 ticks
+	 *
+	 * ------------------------------------
+	 *        NSEC_PER_SEC nanoseconds
+	 *        ------------------------
+	 *              2^6 ticks
+	 *
+	 *    "rate" bytes   "burst" nanoseconds            2^6 ticks
+	 *  = ------------ * ------------------- * ------------------------
+	 *      1 second          2^6 ticks        NSEC_PER_SEC nanoseconds
+	 *
+	 *   "rate" * "burst"
+	 * = ---------------- bytes/nanosecond
+	 *    NSEC_PER_SEC^2
+	 *
+	 *
+	 *   "rate" * "burst"
+	 * = ---------------- bytes/second
+	 *     NSEC_PER_SEC
+	 */
+	burst = div_u64(params->tcfp_burst * params->rate.rate_bytes_ps,
+			NSEC_PER_SEC);
+
+	return burst;
 }
 
 static inline u32 tcf_police_tcfp_mtu(const struct tc_action *act)
diff --git a/net/sched/cls_api.c b/net/sched/cls_api.c
index 1fbbb362271f..c593bb1ad31b 100644
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@ -3663,7 +3663,7 @@ int tc_setup_flow_action(struct flow_action *flow_action,
 			tcf_sample_get_group(entry, act);
 		} else if (is_tcf_police(act)) {
 			entry->id = FLOW_ACTION_POLICE;
-			entry->police.burst = tcf_police_tcfp_burst(act);
+			entry->police.burst = tcf_police_burst(act);
 			entry->police.rate_bytes_ps =
 				tcf_police_rate_bytes_ps(act);
 			entry->police.mtu = tcf_police_tcfp_mtu(act);
