mac80211: improve AQL aggregation estimation for low data rates

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Felix Fietkau <nbd@nbd.name>
commit f01cfbaf9b2971126f094acfbda2589bd2394f4d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f01cfbaf.failed

Links with low data rates use much smaller aggregates and are much more
sensitive to latency added by bufferbloat.
Tune the assumed aggregation length based on the tx rate duration.

	Signed-off-by: Felix Fietkau <nbd@nbd.name>
	Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
Link: https://lore.kernel.org/r/20200821163045.62140-3-nbd@nbd.name
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit f01cfbaf9b2971126f094acfbda2589bd2394f4d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/airtime.c
diff --cc net/mac80211/airtime.c
index 9fc2968856c0,314973033d03..000000000000
--- a/net/mac80211/airtime.c
+++ b/net/mac80211/airtime.c
@@@ -572,10 -647,41 +572,48 @@@ u32 ieee80211_calc_expected_tx_airtime(
  	if (pubsta) {
  		struct sta_info *sta = container_of(pubsta, struct sta_info,
  						    sta);
++<<<<<<< HEAD
 +
 +		return ieee80211_calc_tx_airtime_rate(hw,
 +						      &sta->tx_stats.last_rate,
 +						      band, len);
++=======
+ 		struct ieee80211_rx_status stat;
+ 		struct ieee80211_tx_rate *rate = &sta->tx_stats.last_rate;
+ 		struct rate_info *ri = &sta->tx_stats.last_rate_info;
+ 		u32 duration, overhead;
+ 		u8 agg_shift;
+ 
+ 		if (ieee80211_fill_rx_status(&stat, hw, rate, ri, band, len))
+ 			return 0;
+ 
+ 		if (stat.encoding == RX_ENC_LEGACY || !ampdu)
+ 			return ieee80211_calc_rx_airtime(hw, &stat, len);
+ 
+ 		duration = ieee80211_get_rate_duration(hw, &stat, &overhead);
+ 		/*
+ 		 * Assume that HT/VHT transmission on any AC except VO will
+ 		 * use aggregation. Since we don't have reliable reporting
+ 		 * of aggregation length, assume an average size based on the
+ 		 * tx rate.
+ 		 * This will not be very accurate, but much better than simply
+ 		 * assuming un-aggregated tx in all cases.
+ 		 */
+ 		if (duration > 400) /* <= VHT20 MCS2 1S */
+ 			agg_shift = 1;
+ 		else if (duration > 250) /* <= VHT20 MCS3 1S or MCS1 2S */
+ 			agg_shift = 2;
+ 		else if (duration > 150) /* <= VHT20 MCS5 1S or MCS3 2S */
+ 			agg_shift = 3;
+ 		else
+ 			agg_shift = 4;
+ 
+ 		duration *= len;
+ 		duration /= AVG_PKT_SIZE;
+ 		duration /= 1024;
+ 
+ 		return duration + (overhead >> agg_shift);
++>>>>>>> f01cfbaf9b29 (mac80211: improve AQL aggregation estimation for low data rates)
  	}
  
  	if (!conf)
* Unmerged path net/mac80211/airtime.c
