powerpc/smp: Stop updating cpu_core_mask

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Srikar Dronamraju <srikar@linux.vnet.ibm.com>
commit 4ca234a9cbd7c3a656b34dd98c8b156f70ed7849
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/4ca234a9.failed

Anton Blanchard reported that his 4096 vcpu KVM guest took around 30
minutes to boot. He also analyzed it to the time taken to iterate while
setting the cpu_core_mask.

Further analysis shows that cpu_core_mask and cpu_cpu_mask for any CPU
would be equal on Power. However updating cpu_core_mask took forever to
update as its a per cpu cpumask variable. Instead cpu_cpu_mask was a per
NODE /per DIE cpumask that was shared by all the respective CPUs.

Also cpu_cpu_mask is needed from a scheduler perspective. However
cpu_core_map is an exported symbol. Hence stop updating cpu_core_map
and make it point to cpu_cpu_mask.

	Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Tested-by: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200921095653.9701-3-srikar@linux.vnet.ibm.com
(cherry picked from commit 4ca234a9cbd7c3a656b34dd98c8b156f70ed7849)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/smp.c
diff --cc arch/powerpc/kernel/smp.c
index 9a229965995a,bf6d4192adda..000000000000
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@@ -929,8 -964,10 +935,7 @@@ void __init smp_prepare_cpus(unsigned i
  	/* Init the cpumasks so the boot CPU is related to itself */
  	cpumask_set_cpu(boot_cpuid, cpu_sibling_mask(boot_cpuid));
  	cpumask_set_cpu(boot_cpuid, cpu_l2_cache_mask(boot_cpuid));
- 	cpumask_set_cpu(boot_cpuid, cpu_core_mask(boot_cpuid));
  
 -	if (has_coregroup_support())
 -		cpumask_set_cpu(boot_cpuid, cpu_coregroup_mask(boot_cpuid));
 -
  	init_big_cores();
  	if (has_big_cores) {
  		cpumask_set_cpu(boot_cpuid,
@@@ -1296,25 -1330,19 +1297,41 @@@ static void add_cpu_to_masks(int cpu
  	add_cpu_to_smallcore_masks(cpu);
  	update_mask_by_l2(cpu, cpu_l2_cache_mask);
  
++<<<<<<< HEAD
 +	if (pkg_id == -1) {
 +		struct cpumask *(*mask)(int) = cpu_sibling_mask;
 +
 +		/*
 +		 * Copy the sibling mask into core sibling mask and
 +		 * mark any CPUs on the same chip as this CPU.
 +		 */
 +		if (shared_caches)
 +			mask = cpu_l2_cache_mask;
 +
 +		for_each_cpu(i, mask(cpu))
 +			set_cpus_related(cpu, i, cpu_core_mask);
 +
 +		return;
 +	}
 +
 +	for_each_cpu(i, cpu_online_mask)
 +		if (get_physical_package_id(i) == pkg_id)
 +			set_cpus_related(cpu, i, cpu_core_mask);
++=======
+ 	if (has_coregroup_support()) {
+ 		int coregroup_id = cpu_to_coregroup_id(cpu);
+ 
+ 		cpumask_set_cpu(cpu, cpu_coregroup_mask(cpu));
+ 		for_each_cpu_and(i, cpu_online_mask, cpu_cpu_mask(cpu)) {
+ 			int fcpu = cpu_first_thread_sibling(i);
+ 
+ 			if (fcpu == first_thread)
+ 				set_cpus_related(cpu, i, cpu_coregroup_mask);
+ 			else if (coregroup_id == cpu_to_coregroup_id(i))
+ 				set_cpus_related(cpu, i, cpu_coregroup_mask);
+ 		}
+ 	}
++>>>>>>> 4ca234a9cbd7 (powerpc/smp: Stop updating cpu_core_mask)
  }
  
  /* Activate a secondary processor. */
diff --git a/arch/powerpc/include/asm/smp.h b/arch/powerpc/include/asm/smp.h
index 0fa3b4fb75b4..23c21cbe6ea0 100644
--- a/arch/powerpc/include/asm/smp.h
+++ b/arch/powerpc/include/asm/smp.h
@@ -108,11 +108,6 @@ static inline struct cpumask *cpu_sibling_mask(int cpu)
 	return per_cpu(cpu_sibling_map, cpu);
 }
 
-static inline struct cpumask *cpu_core_mask(int cpu)
-{
-	return per_cpu(cpu_core_map, cpu);
-}
-
 static inline struct cpumask *cpu_l2_cache_mask(int cpu)
 {
 	return per_cpu(cpu_l2_cache_map, cpu);
* Unmerged path arch/powerpc/kernel/smp.c
