qed: add support for Forward Error Correction

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Alexander Lobakin <alobakin@marvell.com>
commit ae7e69379fd5a87141fd8c7f2efab8e73f2a9f7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ae7e6937.failed

Add all necessary routines for reading supported FEC modes from NVM and
querying FEC control to the MFW (if the running version supports it).

	Signed-off-by: Alexander Lobakin <alobakin@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ae7e69379fd5a87141fd8c7f2efab8e73f2a9f7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qed/qed_hsi.h
#	drivers/net/ethernet/qlogic/qed/qed_mcp.h
#	include/linux/qed/qed_if.h
diff --cc drivers/net/ethernet/qlogic/qed/qed_hsi.h
index ebc25b34e491,7c1d4efffbff..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_hsi.h
+++ b/drivers/net/ethernet/qlogic/qed/qed_hsi.h
@@@ -11559,14 -11560,21 +11559,21 @@@ struct eth_phy_cfg 
  #define EEE_CFG_TX_LPI				BIT(1)
  #define EEE_CFG_ADV_SPEED_1G			BIT(2)
  #define EEE_CFG_ADV_SPEED_10G			BIT(3)
 -#define EEE_TX_TIMER_USEC_MASK			0xfffffff0
 +#define EEE_TX_TIMER_USEC_MASK			(0xfffffff0)
  #define EEE_TX_TIMER_USEC_OFFSET		4
 -#define EEE_TX_TIMER_USEC_BALANCED_TIME		0xa00
 -#define EEE_TX_TIMER_USEC_AGGRESSIVE_TIME	0x100
 -#define EEE_TX_TIMER_USEC_LATENCY_TIME		0x6000
 +#define EEE_TX_TIMER_USEC_BALANCED_TIME		(0xa00)
 +#define EEE_TX_TIMER_USEC_AGGRESSIVE_TIME	(0x100)
 +#define EEE_TX_TIMER_USEC_LATENCY_TIME		(0x6000)
  
- 	u32 feature_config_flags;
- #define ETH_EEE_MODE_ADV_LPI		(1 << 0)
+ 	u32					deprecated;
+ 
+ 	u32					fec_mode;
+ #define FEC_FORCE_MODE_MASK			0x000000ff
+ #define FEC_FORCE_MODE_OFFSET			0
+ #define FEC_FORCE_MODE_NONE			0x00
+ #define FEC_FORCE_MODE_FIRECODE			0x01
+ #define FEC_FORCE_MODE_RS			0x02
+ #define FEC_FORCE_MODE_AUTO			0x07
  };
  
  struct port_mf_cfg {
@@@ -12630,49 -12639,50 +12643,57 @@@ struct public_drv_mb 
  
  #define FW_MSG_CODE_MDUMP_INVALID_CMD		0x00030000
  
 -	u32						fw_mb_param;
 -#define FW_MB_PARAM_RESOURCE_ALLOC_VERSION_MAJOR_MASK	0xffff0000
 +	u32 fw_mb_param;
 +#define FW_MB_PARAM_RESOURCE_ALLOC_VERSION_MAJOR_MASK	0xFFFF0000
  #define FW_MB_PARAM_RESOURCE_ALLOC_VERSION_MAJOR_SHIFT	16
 -#define FW_MB_PARAM_RESOURCE_ALLOC_VERSION_MINOR_MASK	0x0000ffff
 +#define FW_MB_PARAM_RESOURCE_ALLOC_VERSION_MINOR_MASK	0x0000FFFF
  #define FW_MB_PARAM_RESOURCE_ALLOC_VERSION_MINOR_SHIFT	0
  
 -	/* Get PF RDMA protocol command response */
 -#define FW_MB_PARAM_GET_PF_RDMA_NONE			0x0
 -#define FW_MB_PARAM_GET_PF_RDMA_ROCE			0x1
 -#define FW_MB_PARAM_GET_PF_RDMA_IWARP			0x2
 -#define FW_MB_PARAM_GET_PF_RDMA_BOTH			0x3
 -
 +	/* get pf rdma protocol command responce */
 +#define FW_MB_PARAM_GET_PF_RDMA_NONE		0x0
 +#define FW_MB_PARAM_GET_PF_RDMA_ROCE		0x1
 +#define FW_MB_PARAM_GET_PF_RDMA_IWARP		0x2
 +#define FW_MB_PARAM_GET_PF_RDMA_BOTH		0x3
 +
++<<<<<<< HEAD
 +/* get MFW feature support response */
 +#define FW_MB_PARAM_FEATURE_SUPPORT_SMARTLINQ	0x00000001
 +#define FW_MB_PARAM_FEATURE_SUPPORT_EEE		0x00000002
 +#define FW_MB_PARAM_FEATURE_SUPPORT_VLINK	0x00010000
++=======
+ 	/* Get MFW feature support response */
+ #define FW_MB_PARAM_FEATURE_SUPPORT_SMARTLINQ		0x00000001
+ #define FW_MB_PARAM_FEATURE_SUPPORT_EEE			0x00000002
+ #define FW_MB_PARAM_FEATURE_SUPPORT_FEC_CONTROL		0x00000020
+ #define FW_MB_PARAM_FEATURE_SUPPORT_VLINK		0x00010000
++>>>>>>> ae7e69379fd5 (qed: add support for Forward Error Correction)
  
 -#define FW_MB_PARAM_LOAD_DONE_DID_EFUSE_ERROR		BIT(0)
 +#define FW_MB_PARAM_LOAD_DONE_DID_EFUSE_ERROR	(1 << 0)
  
 -#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALID_MASK	0x00000001
 -#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALID_SHIFT	0
 -#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALUE_MASK	0x00000002
 -#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALUE_SHIFT	1
 -#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALID_MASK		0x00000004
 -#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALID_SHIFT	2
 -#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALUE_MASK		0x00000008
 -#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALUE_SHIFT	3
 +#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALID_MASK   0x00000001
 +#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALID_SHIFT 0
 +#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALUE_MASK   0x00000002
 +#define FW_MB_PARAM_ENG_CFG_FIR_AFFIN_VALUE_SHIFT 1
 +#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALID_MASK    0x00000004
 +#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALID_SHIFT  2
 +#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALUE_MASK    0x00000008
 +#define FW_MB_PARAM_ENG_CFG_L2_AFFIN_VALUE_SHIFT  3
  
 -#define FW_MB_PARAM_PPFID_BITMAP_MASK			0xff
 -#define FW_MB_PARAM_PPFID_BITMAP_SHIFT			0
 +#define FW_MB_PARAM_PPFID_BITMAP_MASK	0xFF
 +#define FW_MB_PARAM_PPFID_BITMAP_SHIFT	0
  
 -	u32						drv_pulse_mb;
 -#define DRV_PULSE_SEQ_MASK				0x00007fff
 -#define DRV_PULSE_SYSTEM_TIME_MASK			0xffff0000
 -#define DRV_PULSE_ALWAYS_ALIVE				0x00008000
 +	u32 drv_pulse_mb;
 +#define DRV_PULSE_SEQ_MASK			0x00007fff
 +#define DRV_PULSE_SYSTEM_TIME_MASK		0xffff0000
 +#define DRV_PULSE_ALWAYS_ALIVE			0x00008000
  
 -	u32						mcp_pulse_mb;
 -#define MCP_PULSE_SEQ_MASK				0x00007fff
 -#define MCP_PULSE_ALWAYS_ALIVE				0x00008000
 -#define MCP_EVENT_MASK					0xffff0000
 -#define MCP_EVENT_OTHER_DRIVER_RESET_REQ		0x00010000
 +	u32 mcp_pulse_mb;
 +#define MCP_PULSE_SEQ_MASK			0x00007fff
 +#define MCP_PULSE_ALWAYS_ALIVE			0x00008000
 +#define MCP_EVENT_MASK				0xffff0000
 +#define MCP_EVENT_OTHER_DRIVER_RESET_REQ	0x00010000
  
 -	union drv_union_data				union_data;
 +	union drv_union_data union_data;
  };
  
  #define FW_MB_PARAM_NVM_PUT_FILE_REQ_OFFSET_MASK	0x00ffffff
@@@ -13091,12 -13105,19 +13112,21 @@@ struct nvm_cfg1_port 
  #define NVM_CFG1_PORT_DRV_FLOW_CONTROL_AUTONEG			0x1
  #define NVM_CFG1_PORT_DRV_FLOW_CONTROL_RX			0x2
  #define NVM_CFG1_PORT_DRV_FLOW_CONTROL_TX			0x4
++<<<<<<< HEAD
 +	u32 phy_cfg;
 +	u32 mgmt_traffic;
++=======
+ #define NVM_CFG1_PORT_FEC_FORCE_MODE_MASK			0x000e0000
+ #define NVM_CFG1_PORT_FEC_FORCE_MODE_OFFSET			17
+ #define NVM_CFG1_PORT_FEC_FORCE_MODE_NONE			0x0
+ #define NVM_CFG1_PORT_FEC_FORCE_MODE_FIRECODE			0x1
+ #define NVM_CFG1_PORT_FEC_FORCE_MODE_RS				0x2
+ #define NVM_CFG1_PORT_FEC_FORCE_MODE_AUTO			0x7
++>>>>>>> ae7e69379fd5 (qed: add support for Forward Error Correction)
  
 -	u32							phy_cfg;
 -	u32							mgmt_traffic;
 -
 -	u32							ext_phy;
 +	u32 ext_phy;
  	/* EEE power saving mode */
 -#define NVM_CFG1_PORT_EEE_POWER_SAVING_MODE_MASK		0x00ff0000
 +#define NVM_CFG1_PORT_EEE_POWER_SAVING_MODE_MASK		0x00FF0000
  #define NVM_CFG1_PORT_EEE_POWER_SAVING_MODE_OFFSET		16
  #define NVM_CFG1_PORT_EEE_POWER_SAVING_MODE_DISABLED		0x0
  #define NVM_CFG1_PORT_EEE_POWER_SAVING_MODE_BALANCED		0x1
diff --cc drivers/net/ethernet/qlogic/qed/qed_mcp.h
index 63a22a615e94,5e50405854e6..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_mcp.h
+++ b/drivers/net/ethernet/qlogic/qed/qed_mcp.h
@@@ -34,18 -34,20 +34,35 @@@ enum qed_mcp_eee_mode 
  };
  
  struct qed_mcp_link_params {
++<<<<<<< HEAD
 +	struct qed_mcp_link_speed_params speed;
 +	struct qed_mcp_link_pause_params pause;
 +	u32 loopback_mode;
 +	struct qed_link_eee_params eee;
 +};
 +
 +struct qed_mcp_link_capabilities {
 +	u32 speed_capabilities;
 +	bool default_speed_autoneg;
 +	enum qed_mcp_eee_mode default_eee;
 +	u32 eee_lpi_timer;
 +	u8 eee_speed_caps;
++=======
+ 	struct qed_mcp_link_speed_params	speed;
+ 	struct qed_mcp_link_pause_params	pause;
+ 	u32					loopback_mode;
+ 	struct qed_link_eee_params		eee;
+ 	u32					fec;
+ };
+ 
+ struct qed_mcp_link_capabilities {
+ 	u32					speed_capabilities;
+ 	bool					default_speed_autoneg;
+ 	u32					fec_default;
+ 	enum qed_mcp_eee_mode			default_eee;
+ 	u32					eee_lpi_timer;
+ 	u8					eee_speed_caps;
++>>>>>>> ae7e69379fd5 (qed: add support for Forward Error Correction)
  };
  
  struct qed_mcp_link_state {
@@@ -59,36 -60,38 +76,45 @@@
  	/* PF max speed in Mb/s, deduced from line_speed
  	 * according to PF max bandwidth configuration.
  	 */
 -	u32					speed;
 -
 -	bool					full_duplex;
 -	bool					an;
 -	bool					an_complete;
 -	bool					parallel_detection;
 -	bool					pfc_enabled;
 -
 -	u32					partner_adv_speed;
 -#define QED_LINK_PARTNER_SPEED_1G_HD		BIT(0)
 -#define QED_LINK_PARTNER_SPEED_1G_FD		BIT(1)
 -#define QED_LINK_PARTNER_SPEED_10G		BIT(2)
 -#define QED_LINK_PARTNER_SPEED_20G		BIT(3)
 -#define QED_LINK_PARTNER_SPEED_25G		BIT(4)
 -#define QED_LINK_PARTNER_SPEED_40G		BIT(5)
 -#define QED_LINK_PARTNER_SPEED_50G		BIT(6)
 -#define QED_LINK_PARTNER_SPEED_100G		BIT(7)
 -
 -	bool					partner_tx_flow_ctrl_en;
 -	bool					partner_rx_flow_ctrl_en;
 -
 -	u8					partner_adv_pause;
 -#define QED_LINK_PARTNER_SYMMETRIC_PAUSE	0x1
 -#define QED_LINK_PARTNER_ASYMMETRIC_PAUSE	0x2
 -#define QED_LINK_PARTNER_BOTH_PAUSE		0x3
 -
 +	u32     speed;
 +	bool    full_duplex;
 +
 +	bool    an;
 +	bool    an_complete;
 +	bool    parallel_detection;
 +	bool    pfc_enabled;
 +
 +#define QED_LINK_PARTNER_SPEED_1G_HD    BIT(0)
 +#define QED_LINK_PARTNER_SPEED_1G_FD    BIT(1)
 +#define QED_LINK_PARTNER_SPEED_10G      BIT(2)
 +#define QED_LINK_PARTNER_SPEED_20G      BIT(3)
 +#define QED_LINK_PARTNER_SPEED_25G      BIT(4)
 +#define QED_LINK_PARTNER_SPEED_40G      BIT(5)
 +#define QED_LINK_PARTNER_SPEED_50G      BIT(6)
 +#define QED_LINK_PARTNER_SPEED_100G     BIT(7)
 +	u32     partner_adv_speed;
 +
 +	bool    partner_tx_flow_ctrl_en;
 +	bool    partner_rx_flow_ctrl_en;
 +
 +#define QED_LINK_PARTNER_SYMMETRIC_PAUSE (1)
 +#define QED_LINK_PARTNER_ASYMMETRIC_PAUSE (2)
 +#define QED_LINK_PARTNER_BOTH_PAUSE (3)
 +	u8      partner_adv_pause;
 +
++<<<<<<< HEAD
 +	bool    sfp_tx_fault;
 +	bool    eee_active;
 +	u8      eee_adv_caps;
 +	u8      eee_lp_adv_caps;
++=======
+ 	bool					sfp_tx_fault;
+ 	bool					eee_active;
+ 	u8					eee_adv_caps;
+ 	u8					eee_lp_adv_caps;
+ 
+ 	u32					fec_active;
++>>>>>>> ae7e69379fd5 (qed: add support for Forward Error Correction)
  };
  
  struct qed_mcp_function_info {
diff --cc include/linux/qed/qed_if.h
index f82db1b92d45,f0b4cdc79299..000000000000
--- a/include/linux/qed/qed_if.h
+++ b/include/linux/qed/qed_if.h
@@@ -661,32 -661,44 +661,68 @@@ enum qed_protocol 
  	QED_PROTOCOL_FCOE,
  };
  
+ enum qed_fec_mode {
+ 	QED_FEC_MODE_NONE			= BIT(0),
+ 	QED_FEC_MODE_FIRECODE			= BIT(1),
+ 	QED_FEC_MODE_RS				= BIT(2),
+ 	QED_FEC_MODE_AUTO			= BIT(3),
+ 	QED_FEC_MODE_UNSUPPORTED		= BIT(4),
+ };
+ 
  struct qed_link_params {
 -	bool					link_up;
 -
 +	bool	link_up;
 +
++<<<<<<< HEAD
 +#define QED_LINK_OVERRIDE_SPEED_AUTONEG         BIT(0)
 +#define QED_LINK_OVERRIDE_SPEED_ADV_SPEEDS      BIT(1)
 +#define QED_LINK_OVERRIDE_SPEED_FORCED_SPEED    BIT(2)
 +#define QED_LINK_OVERRIDE_PAUSE_CONFIG          BIT(3)
 +#define QED_LINK_OVERRIDE_LOOPBACK_MODE         BIT(4)
 +#define QED_LINK_OVERRIDE_EEE_CONFIG            BIT(5)
 +	u32	override_flags;
 +	bool	autoneg;
++=======
+ 	u32					override_flags;
+ #define QED_LINK_OVERRIDE_SPEED_AUTONEG		BIT(0)
+ #define QED_LINK_OVERRIDE_SPEED_ADV_SPEEDS	BIT(1)
+ #define QED_LINK_OVERRIDE_SPEED_FORCED_SPEED	BIT(2)
+ #define QED_LINK_OVERRIDE_PAUSE_CONFIG		BIT(3)
+ #define QED_LINK_OVERRIDE_LOOPBACK_MODE		BIT(4)
+ #define QED_LINK_OVERRIDE_EEE_CONFIG		BIT(5)
+ #define QED_LINK_OVERRIDE_FEC_CONFIG		BIT(6)
++>>>>>>> ae7e69379fd5 (qed: add support for Forward Error Correction)
  
 -	bool					autoneg;
  	__ETHTOOL_DECLARE_LINK_MODE_MASK(adv_speeds);
 -	u32					forced_speed;
  
++<<<<<<< HEAD
 +	u32	forced_speed;
 +#define QED_LINK_PAUSE_AUTONEG_ENABLE           BIT(0)
 +#define QED_LINK_PAUSE_RX_ENABLE                BIT(1)
 +#define QED_LINK_PAUSE_TX_ENABLE                BIT(2)
 +	u32	pause_config;
 +#define QED_LINK_LOOPBACK_NONE                  BIT(0)
 +#define QED_LINK_LOOPBACK_INT_PHY               BIT(1)
 +#define QED_LINK_LOOPBACK_EXT_PHY               BIT(2)
 +#define QED_LINK_LOOPBACK_EXT                   BIT(3)
 +#define QED_LINK_LOOPBACK_MAC                   BIT(4)
 +	u32	loopback_mode;
 +	struct qed_link_eee_params eee;
++=======
+ 	u32					pause_config;
+ #define QED_LINK_PAUSE_AUTONEG_ENABLE		BIT(0)
+ #define QED_LINK_PAUSE_RX_ENABLE		BIT(1)
+ #define QED_LINK_PAUSE_TX_ENABLE		BIT(2)
+ 
+ 	u32					loopback_mode;
+ #define QED_LINK_LOOPBACK_NONE			BIT(0)
+ #define QED_LINK_LOOPBACK_INT_PHY		BIT(1)
+ #define QED_LINK_LOOPBACK_EXT_PHY		BIT(2)
+ #define QED_LINK_LOOPBACK_EXT			BIT(3)
+ #define QED_LINK_LOOPBACK_MAC			BIT(4)
+ 
+ 	struct qed_link_eee_params		eee;
+ 	u32					fec;
++>>>>>>> ae7e69379fd5 (qed: add support for Forward Error Correction)
  };
  
  struct qed_link_output {
@@@ -696,17 -708,20 +732,27 @@@
  	__ETHTOOL_DECLARE_LINK_MODE_MASK(advertised_caps);
  	__ETHTOOL_DECLARE_LINK_MODE_MASK(lp_caps);
  
 -	u32					speed;	   /* In Mb/s */
 -	u8					duplex;	   /* In DUPLEX defs */
 -	u8					port;	   /* In PORT defs */
 -	bool					autoneg;
 -	u32					pause_config;
 +	u32	speed;                  /* In Mb/s */
 +	u8	duplex;                 /* In DUPLEX defs */
 +	u8	port;                   /* In PORT defs */
 +	bool	autoneg;
 +	u32	pause_config;
  
  	/* EEE - capability & param */
++<<<<<<< HEAD
 +	bool eee_supported;
 +	bool eee_active;
 +	u8 sup_caps;
 +	struct qed_link_eee_params eee;
++=======
+ 	bool					eee_supported;
+ 	bool					eee_active;
+ 	u8					sup_caps;
+ 	struct qed_link_eee_params		eee;
+ 
+ 	u32					sup_fec;
+ 	u32					active_fec;
++>>>>>>> ae7e69379fd5 (qed: add support for Forward Error Correction)
  };
  
  struct qed_probe_params {
diff --git a/drivers/net/ethernet/qlogic/qed/qed_dev.c b/drivers/net/ethernet/qlogic/qed/qed_dev.c
index 491a6dbb5d73..d929556247a5 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_dev.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_dev.c
@@ -3968,7 +3968,7 @@ static int qed_hw_get_resc(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
 
 static int qed_hw_get_nvm_info(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
 {
-	u32 port_cfg_addr, link_temp, nvm_cfg_addr, device_capabilities;
+	u32 port_cfg_addr, link_temp, nvm_cfg_addr, device_capabilities, fc;
 	u32 nvm_cfg1_offset, mf_mode, addr, generic_cont0, core_cfg;
 	struct qed_mcp_link_capabilities *p_caps;
 	struct qed_mcp_link_params *link;
@@ -4081,16 +4081,38 @@ static int qed_hw_get_nvm_info(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
 	p_hwfn->mcp_info->link_capabilities.default_speed_autoneg =
 		link->speed.autoneg;
 
-	link_temp &= NVM_CFG1_PORT_DRV_FLOW_CONTROL_MASK;
-	link_temp >>= NVM_CFG1_PORT_DRV_FLOW_CONTROL_OFFSET;
-	link->pause.autoneg = !!(link_temp &
-				 NVM_CFG1_PORT_DRV_FLOW_CONTROL_AUTONEG);
-	link->pause.forced_rx = !!(link_temp &
-				   NVM_CFG1_PORT_DRV_FLOW_CONTROL_RX);
-	link->pause.forced_tx = !!(link_temp &
-				   NVM_CFG1_PORT_DRV_FLOW_CONTROL_TX);
+	fc = GET_MFW_FIELD(link_temp, NVM_CFG1_PORT_DRV_FLOW_CONTROL);
+	link->pause.autoneg = !!(fc & NVM_CFG1_PORT_DRV_FLOW_CONTROL_AUTONEG);
+	link->pause.forced_rx = !!(fc & NVM_CFG1_PORT_DRV_FLOW_CONTROL_RX);
+	link->pause.forced_tx = !!(fc & NVM_CFG1_PORT_DRV_FLOW_CONTROL_TX);
 	link->loopback_mode = 0;
 
+	if (p_hwfn->mcp_info->capabilities &
+	    FW_MB_PARAM_FEATURE_SUPPORT_FEC_CONTROL) {
+		switch (GET_MFW_FIELD(link_temp,
+				      NVM_CFG1_PORT_FEC_FORCE_MODE)) {
+		case NVM_CFG1_PORT_FEC_FORCE_MODE_NONE:
+			p_caps->fec_default |= QED_FEC_MODE_NONE;
+			break;
+		case NVM_CFG1_PORT_FEC_FORCE_MODE_FIRECODE:
+			p_caps->fec_default |= QED_FEC_MODE_FIRECODE;
+			break;
+		case NVM_CFG1_PORT_FEC_FORCE_MODE_RS:
+			p_caps->fec_default |= QED_FEC_MODE_RS;
+			break;
+		case NVM_CFG1_PORT_FEC_FORCE_MODE_AUTO:
+			p_caps->fec_default |= QED_FEC_MODE_AUTO;
+			break;
+		default:
+			DP_VERBOSE(p_hwfn, NETIF_MSG_LINK,
+				   "unknown FEC mode in 0x%08x\n", link_temp);
+		}
+	} else {
+		p_caps->fec_default = QED_FEC_MODE_UNSUPPORTED;
+	}
+
+	link->fec = p_caps->fec_default;
+
 	if (p_hwfn->mcp_info->capabilities & FW_MB_PARAM_FEATURE_SUPPORT_EEE) {
 		link_temp = qed_rd(p_hwfn, p_ptt, port_cfg_addr +
 				   offsetof(struct nvm_cfg1_port, ext_phy));
@@ -4122,14 +4144,12 @@ static int qed_hw_get_nvm_info(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
 		p_caps->default_eee = QED_MCP_EEE_UNSUPPORTED;
 	}
 
-	DP_VERBOSE(p_hwfn,
-		   NETIF_MSG_LINK,
-		   "Read default link: Speed 0x%08x, Adv. Speed 0x%08x, AN: 0x%02x, PAUSE AN: 0x%02x EEE: %02x [%08x usec]\n",
-		   link->speed.forced_speed,
-		   link->speed.advertised_speeds,
-		   link->speed.autoneg,
-		   link->pause.autoneg,
-		   p_caps->default_eee, p_caps->eee_lpi_timer);
+	DP_VERBOSE(p_hwfn, NETIF_MSG_LINK,
+		   "Read default link: Speed 0x%08x, Adv. Speed 0x%08x, AN: 0x%02x, PAUSE AN: 0x%02x, EEE: 0x%02x [0x%08x usec], FEC: 0x%02x\n",
+		   link->speed.forced_speed, link->speed.advertised_speeds,
+		   link->speed.autoneg, link->pause.autoneg,
+		   p_caps->default_eee, p_caps->eee_lpi_timer,
+		   p_caps->fec_default);
 
 	if (IS_LEAD_HWFN(p_hwfn)) {
 		struct qed_dev *cdev = p_hwfn->cdev;
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_hsi.h
diff --git a/drivers/net/ethernet/qlogic/qed/qed_main.c b/drivers/net/ethernet/qlogic/qed/qed_main.c
index 2be9ed39c450..91e7cfc544f0 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_main.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_main.c
@@ -1597,6 +1597,9 @@ static int qed_set_link(struct qed_dev *cdev, struct qed_link_params *params)
 		memcpy(&link_params->eee, &params->eee,
 		       sizeof(link_params->eee));
 
+	if (params->override_flags & QED_LINK_OVERRIDE_FEC_CONFIG)
+		link_params->fec = params->fec;
+
 	rc = qed_mcp_set_link(hwfn, ptt, params->link_up);
 
 	qed_ptt_release(hwfn, ptt);
@@ -1938,6 +1941,9 @@ static void qed_fill_link(struct qed_hwfn *hwfn,
 	else
 		phylink_clear(if_link->advertised_caps, Autoneg);
 
+	if_link->sup_fec = link_caps.fec_default;
+	if_link->active_fec = params.fec;
+
 	/* Fill link advertised capability */
 	qed_fill_link_capability(hwfn, ptt, params.speed.advertised_speeds,
 				 if_link->advertised_caps);
diff --git a/drivers/net/ethernet/qlogic/qed/qed_mcp.c b/drivers/net/ethernet/qlogic/qed/qed_mcp.c
index b10a92488630..78c0d3a2d164 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_mcp.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_mcp.c
@@ -1446,6 +1446,25 @@ static void qed_mcp_handle_link_change(struct qed_hwfn *p_hwfn,
 	if (p_hwfn->mcp_info->capabilities & FW_MB_PARAM_FEATURE_SUPPORT_EEE)
 		qed_mcp_read_eee_config(p_hwfn, p_ptt, p_link);
 
+	if (p_hwfn->mcp_info->capabilities &
+	    FW_MB_PARAM_FEATURE_SUPPORT_FEC_CONTROL) {
+		switch (status & LINK_STATUS_FEC_MODE_MASK) {
+		case LINK_STATUS_FEC_MODE_NONE:
+			p_link->fec_active = QED_FEC_MODE_NONE;
+			break;
+		case LINK_STATUS_FEC_MODE_FIRECODE_CL74:
+			p_link->fec_active = QED_FEC_MODE_FIRECODE;
+			break;
+		case LINK_STATUS_FEC_MODE_RS_CL91:
+			p_link->fec_active = QED_FEC_MODE_RS;
+			break;
+		default:
+			p_link->fec_active = QED_FEC_MODE_AUTO;
+		}
+	} else {
+		p_link->fec_active = QED_FEC_MODE_UNSUPPORTED;
+	}
+
 	qed_link_update(p_hwfn, p_ptt);
 out:
 	spin_unlock_bh(&p_hwfn->mcp_info->link_lock);
@@ -1456,8 +1475,8 @@ int qed_mcp_set_link(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt, bool b_up)
 	struct qed_mcp_link_params *params = &p_hwfn->mcp_info->link_input;
 	struct qed_mcp_mb_params mb_params;
 	struct eth_phy_cfg phy_cfg;
+	u32 cmd, fec_bit = 0;
 	int rc = 0;
-	u32 cmd;
 
 	/* Set the shmem configuration according to params */
 	memset(&phy_cfg, 0, sizeof(phy_cfg));
@@ -1489,16 +1508,27 @@ int qed_mcp_set_link(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt, bool b_up)
 				   EEE_TX_TIMER_USEC_MASK;
 	}
 
+	if (p_hwfn->mcp_info->capabilities &
+	    FW_MB_PARAM_FEATURE_SUPPORT_FEC_CONTROL) {
+		if (params->fec & QED_FEC_MODE_NONE)
+			fec_bit |= FEC_FORCE_MODE_NONE;
+		else if (params->fec & QED_FEC_MODE_FIRECODE)
+			fec_bit |= FEC_FORCE_MODE_FIRECODE;
+		else if (params->fec & QED_FEC_MODE_RS)
+			fec_bit |= FEC_FORCE_MODE_RS;
+		else if (params->fec & QED_FEC_MODE_AUTO)
+			fec_bit |= FEC_FORCE_MODE_AUTO;
+
+		SET_MFW_FIELD(phy_cfg.fec_mode, FEC_FORCE_MODE, fec_bit);
+	}
+
 	p_hwfn->b_drv_link_init = b_up;
 
 	if (b_up) {
 		DP_VERBOSE(p_hwfn, NETIF_MSG_LINK,
-			   "Configuring Link: Speed 0x%08x, Pause 0x%08x, adv_speed 0x%08x, loopback 0x%08x, features 0x%08x\n",
-			   phy_cfg.speed,
-			   phy_cfg.pause,
-			   phy_cfg.adv_speed,
-			   phy_cfg.loopback_mode,
-			   phy_cfg.feature_config_flags);
+			   "Configuring Link: Speed 0x%08x, Pause 0x%08x, adv_speed 0x%08x, loopback 0x%08x, FEC 0x%08x\n",
+			   phy_cfg.speed, phy_cfg.pause, phy_cfg.adv_speed,
+			   phy_cfg.loopback_mode, phy_cfg.fec_mode);
 	} else {
 		DP_VERBOSE(p_hwfn, NETIF_MSG_LINK,
 			   "Resetting link\n");
@@ -3805,7 +3835,8 @@ int qed_mcp_set_capabilities(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt)
 	u32 mcp_resp, mcp_param, features;
 
 	features = DRV_MB_PARAM_FEATURE_SUPPORT_PORT_EEE |
-		   DRV_MB_PARAM_FEATURE_SUPPORT_FUNC_VLINK;
+		   DRV_MB_PARAM_FEATURE_SUPPORT_FUNC_VLINK |
+		   DRV_MB_PARAM_FEATURE_SUPPORT_PORT_FEC_CONTROL;
 
 	return qed_mcp_cmd(p_hwfn, p_ptt, DRV_MSG_CODE_FEATURE_SUPPORT,
 			   features, &mcp_resp, &mcp_param);
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_mcp.h
* Unmerged path include/linux/qed/qed_if.h
