powerpc/ppc-opcode: Move ppc instruction encoding from test_emulate_step

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Balamuruhan S <bala24@linux.ibm.com>
commit 1d33dd84080f4a430bde2fc363d9b70f0a010c19
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1d33dd84.failed

Few ppc instructions are encoded in test_emulate_step.c, consolidate
them and use it from ppc-opcode.h

	Signed-off-by: Balamuruhan S <bala24@linux.ibm.com>
	Tested-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Acked-by: Sandipan Das <sandipan@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200624113038.908074-3-bala24@linux.ibm.com
(cherry picked from commit 1d33dd84080f4a430bde2fc363d9b70f0a010c19)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/lib/test_emulate_step.c
diff --cc arch/powerpc/lib/test_emulate_step.c
index 48fb314ea3c8,988c734e7370..000000000000
--- a/arch/powerpc/lib/test_emulate_step.c
+++ b/arch/powerpc/lib/test_emulate_step.c
@@@ -16,50 -11,8 +16,53 @@@
  #include <asm/sstep.h>
  #include <asm/ppc-opcode.h>
  #include <asm/code-patching.h>
 -#include <asm/inst.h>
  
++<<<<<<< HEAD
 +#define IMM_L(i)		((uintptr_t)(i) & 0xffff)
 +#define IMM_DS(i)		((uintptr_t)(i) & 0xfffc)
 +
 +/*
 + * Defined with TEST_ prefix so it does not conflict with other
 + * definitions.
 + */
 +#define TEST_LD(r, base, i)	(PPC_INST_LD | ___PPC_RT(r) |		\
 +					___PPC_RA(base) | IMM_DS(i))
 +#define TEST_LWZ(r, base, i)	(PPC_INST_LWZ | ___PPC_RT(r) |		\
 +					___PPC_RA(base) | IMM_L(i))
 +#define TEST_LWZX(t, a, b)	(PPC_INST_LWZX | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_STD(r, base, i)	(PPC_INST_STD | ___PPC_RS(r) |		\
 +					___PPC_RA(base) | IMM_DS(i))
 +#define TEST_LDARX(t, a, b, eh)	(PPC_INST_LDARX | ___PPC_RT(t) |	\
 +					___PPC_RA(a) | ___PPC_RB(b) |	\
 +					__PPC_EH(eh))
 +#define TEST_STDCX(s, a, b)	(PPC_INST_STDCX | ___PPC_RS(s) |	\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_LFSX(t, a, b)	(PPC_INST_LFSX | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_STFSX(s, a, b)	(PPC_INST_STFSX | ___PPC_RS(s) |	\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_LFDX(t, a, b)	(PPC_INST_LFDX | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_STFDX(s, a, b)	(PPC_INST_STFDX | ___PPC_RS(s) |	\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_LVX(t, a, b)	(PPC_INST_LVX | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_STVX(s, a, b)	(PPC_INST_STVX | ___PPC_RS(s) |		\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_LXVD2X(s, a, b)	(PPC_INST_LXVD2X | VSX_XX1((s), R##a, R##b))
 +#define TEST_STXVD2X(s, a, b)	(PPC_INST_STXVD2X | VSX_XX1((s), R##a, R##b))
 +#define TEST_ADD(t, a, b)	(PPC_INST_ADD | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_ADD_DOT(t, a, b)	(PPC_INST_ADD | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 +#define TEST_ADDC(t, a, b)	(PPC_INST_ADDC | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b))
 +#define TEST_ADDC_DOT(t, a, b)	(PPC_INST_ADDC | ___PPC_RT(t) |		\
 +					___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 +
++=======
++>>>>>>> 1d33dd84080f (powerpc/ppc-opcode: Move ppc instruction encoding from test_emulate_step)
  #define MAX_SUBTESTS	16
  
  #define IGNORE_GPR(n)	(0x1UL << (n))
diff --git a/arch/powerpc/include/asm/ppc-opcode.h b/arch/powerpc/include/asm/ppc-opcode.h
index f6932931565b..09f7476ea2e3 100644
--- a/arch/powerpc/include/asm/ppc-opcode.h
+++ b/arch/powerpc/include/asm/ppc-opcode.h
@@ -81,6 +81,9 @@
 #define	__REGA0_R30	30
 #define	__REGA0_R31	31
 
+#define IMM_L(i)               ((uintptr_t)(i) & 0xffff)
+#define IMM_DS(i)              ((uintptr_t)(i) & 0xfffc)
+
 /* opcode and xopcode for instructions */
 #define OP_TRAP 3
 #define OP_TRAP_64 2
@@ -510,6 +513,21 @@
 	(PPC_INST_VCMPEQUD | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
 #define PPC_RAW_VCMPEQUB_RC(vrt, vra, vrb) \
 	(PPC_INST_VCMPEQUB | ___PPC_RT(vrt) | ___PPC_RA(vra) | ___PPC_RB(vrb) | __PPC_RC21)
+#define PPC_RAW_LD(r, base, i)		(PPC_INST_LD | ___PPC_RT(r) | ___PPC_RA(base) | IMM_DS(i))
+#define PPC_RAW_LWZ(r, base, i)		(PPC_INST_LWZ | ___PPC_RT(r) | ___PPC_RA(base) | IMM_L(i))
+#define PPC_RAW_LWZX(t, a, b)		(PPC_INST_LWZX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_STD(r, base, i)		(PPC_INST_STD | ___PPC_RS(r) | ___PPC_RA(base) | IMM_DS(i))
+#define PPC_RAW_STDCX(s, a, b)		(PPC_INST_STDCX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_LFSX(t, a, b)		(PPC_INST_LFSX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_STFSX(s, a, b)		(PPC_INST_STFSX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_LFDX(t, a, b)		(PPC_INST_LFDX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_STFDX(s, a, b)		(PPC_INST_STFDX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_LVX(t, a, b)		(PPC_INST_LVX | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_STVX(s, a, b)		(PPC_INST_STVX | ___PPC_RS(s) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_ADD(t, a, b)		(PPC_INST_ADD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_ADD_DOT(t, a, b)	(PPC_INST_ADD | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
+#define PPC_RAW_ADDC(t, a, b)		(PPC_INST_ADDC | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b))
+#define PPC_RAW_ADDC_DOT(t, a, b)	(PPC_INST_ADDC | ___PPC_RT(t) | ___PPC_RA(a) | ___PPC_RB(b) | 0x1)
 
 /* Deal with instructions that older assemblers aren't aware of */
 #define	PPC_BCCTR_FLUSH		stringify_in_c(.long PPC_INST_BCCTR_FLUSH)
* Unmerged path arch/powerpc/lib/test_emulate_step.c
