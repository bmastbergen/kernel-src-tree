PCI/IOV: Mark VFs as not implementing PCI_COMMAND_MEMORY

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Matthew Rosato <mjrosato@linux.ibm.com>
commit 12856e7acde4702b7c3238c15fcba86ff6aa507f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/12856e7a.failed

For VFs, the Memory Space Enable bit in the Command Register is
hard-wired to 0.

Add a new bit to signify devices where the Command Register Memory
Space Enable bit does not control the device's response to MMIO
accesses.

Fixes: abafbc551fdd ("vfio-pci: Invalidate mmaps and block MMIO access on disabled memory")
	Signed-off-by: Matthew Rosato <mjrosato@linux.ibm.com>
	Acked-by: Bjorn Helgaas <bhelgaas@google.com>
	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit 12856e7acde4702b7c3238c15fcba86ff6aa507f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pci.h
diff --cc include/linux/pci.h
index a6da4fd619d9,3ff723124ca7..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -431,17 -431,21 +431,35 @@@ struct pci_dev 
  	 * that. When an IOMMU is enabled they should be getting full
  	 * mappings to make sure they cannot access arbitrary memory.
  	 */
++<<<<<<< HEAD
 +	RH_KABI_FILL_HOLE(unsigned int	untrusted:1)
 +	RH_KABI_FILL_HOLE(unsigned int	no_vf_scan:1)  /* Don't scan for VFs after IOV enablement */
 +	RH_KABI_FILL_HOLE(unsigned int	io_window:1)	/* Bridge has I/O window */
 +	RH_KABI_FILL_HOLE(unsigned int	pref_window:1)	/* Bridge has pref mem window */
 +	RH_KABI_FILL_HOLE(unsigned int	pref_64_window:1)/* Pref mem window is 64-bit */
 +#ifdef CONFIG_PCI_PRI
 +	RH_KABI_FILL_HOLE(unsigned int  pasid_required:1) /* PRG Response PASID Required */
 +#endif
 +#ifdef CONFIG_PCIE_DPC
 +	RH_KABI_FILL_HOLE(unsigned int	dpc_rp_extensions:1)
 +#endif
++=======
+ 	unsigned int	untrusted:1;
+ 	/*
+ 	 * Info from the platform, e.g., ACPI or device tree, may mark a
+ 	 * device as "external-facing".  An external-facing device is
+ 	 * itself internal but devices downstream from it are external.
+ 	 */
+ 	unsigned int	external_facing:1;
+ 	unsigned int	broken_intx_masking:1;	/* INTx masking can't be used */
+ 	unsigned int	io_window_1k:1;		/* Intel bridge 1K I/O windows */
+ 	unsigned int	irq_managed:1;
+ 	unsigned int	non_compliant_bars:1;	/* Broken BARs; ignore them */
+ 	unsigned int	is_probed:1;		/* Device probing in progress */
+ 	unsigned int	link_active_reporting:1;/* Device capable of reporting link active */
+ 	unsigned int	no_vf_scan:1;		/* Don't scan for VFs after IOV enablement */
+ 	unsigned int	no_command_memory:1;	/* No PCI_COMMAND_MEMORY */
++>>>>>>> 12856e7acde4 (PCI/IOV: Mark VFs as not implementing PCI_COMMAND_MEMORY)
  	pci_dev_flags_t dev_flags;
  	atomic_t	enable_cnt;	/* pci_enable_device has been called */
  
diff --git a/drivers/pci/iov.c b/drivers/pci/iov.c
index ee6fbe688498..600473ca3ccd 100644
--- a/drivers/pci/iov.c
+++ b/drivers/pci/iov.c
@@ -180,6 +180,7 @@ int pci_iov_add_virtfn(struct pci_dev *dev, int id)
 	virtfn->device = iov->vf_device;
 	virtfn->is_virtfn = 1;
 	virtfn->physfn = pci_dev_get(dev);
+	virtfn->no_command_memory = 1;
 
 	if (id == 0)
 		pci_read_vf_config_common(virtfn);
* Unmerged path include/linux/pci.h
