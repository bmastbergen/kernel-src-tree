powerpc/64s: handle ISA v3.1 local copy-paste context switches

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [powerpc] 64s: handle ISA v3.1 local copy-paste context switches (Greg Kurz) [1882796]
Rebuild_FUZZ: 93.10%
commit-author Nicholas Piggin <npiggin@gmail.com>
commit dc462267d2d7aacffc3c1d99b02d7a7c59db7c66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/dc462267.failed

The ISA v3.1 the copy-paste facility has a new memory move functionality
which allows the copy buffer to be pasted to domestic memory (RAM) as
opposed to foreign memory (accelerator).

This means the POWER9 trick of avoiding the cp_abort on context switch if
the process had not mapped foreign memory does not work on POWER10. Do the
cp_abort unconditionally there.

KVM must also cp_abort on guest exit to prevent copy buffer state leaking
between contexts.

	Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
	Acked-by: Paul Mackerras <paulus@ozlabs.org>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200825075535.224536-1-npiggin@gmail.com
(cherry picked from commit dc462267d2d7aacffc3c1d99b02d7a7c59db7c66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/process.c
diff --cc arch/powerpc/kernel/process.c
index c1b7ced42cc1,2a6fadde58b4..000000000000
--- a/arch/powerpc/kernel/process.c
+++ b/arch/powerpc/kernel/process.c
@@@ -1223,19 -1246,21 +1223,26 @@@ struct task_struct *__switch_to(struct 
  		batch->active = 1;
  	}
  
 -	if (current->thread.regs) {
 -		restore_math(current->thread.regs);
 +	if (current_thread_info()->task->thread.regs) {
 +		restore_math(current_thread_info()->task->thread.regs);
  
  		/*
- 		 * The copy-paste buffer can only store into foreign real
- 		 * addresses, so unprivileged processes can not see the
- 		 * data or use it in any way unless they have foreign real
- 		 * mappings. If the new process has the foreign real address
- 		 * mappings, we must issue a cp_abort to clear any state and
- 		 * prevent snooping, corruption or a covert channel.
+ 		 * On POWER9 the copy-paste buffer can only paste into
+ 		 * foreign real addresses, so unprivileged processes can not
+ 		 * see the data or use it in any way unless they have
+ 		 * foreign real mappings. If the new process has the foreign
+ 		 * real address mappings, we must issue a cp_abort to clear
+ 		 * any state and prevent snooping, corruption or a covert
+ 		 * channel. ISA v3.1 supports paste into local memory.
  		 */
++<<<<<<< HEAD
 +		if (current_thread_info()->task->mm &&
 +		atomic_read(&current_thread_info()->task->mm->vas_windows))
++=======
+ 		if (current->mm &&
+ 			(cpu_has_feature(CPU_FTR_ARCH_31) ||
+ 			atomic_read(&current->mm->context.vas_windows)))
++>>>>>>> dc462267d2d7 (powerpc/64s: handle ISA v3.1 local copy-paste context switches)
  			asm volatile(PPC_CP_ABORT);
  	}
  #endif /* CONFIG_PPC_BOOK3S_64 */
* Unmerged path arch/powerpc/kernel/process.c
diff --git a/arch/powerpc/kvm/book3s_hv.c b/arch/powerpc/kvm/book3s_hv.c
index 84bc2b002945..e341b773f34c 100644
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@ -3535,6 +3535,13 @@ static int kvmhv_load_hv_regs_and_go(struct kvm_vcpu *vcpu, u64 time_limit,
 	 */
 	asm volatile("eieio; tlbsync; ptesync");
 
+	/*
+	 * cp_abort is required if the processor supports local copy-paste
+	 * to clear the copy buffer that was under control of the guest.
+	 */
+	if (cpu_has_feature(CPU_FTR_ARCH_31))
+		asm volatile(PPC_CP_ABORT);
+
 	mtspr(SPRN_LPID, vcpu->kvm->arch.host_lpid);	/* restore host LPID */
 	isync();
 
diff --git a/arch/powerpc/kvm/book3s_hv_rmhandlers.S b/arch/powerpc/kvm/book3s_hv_rmhandlers.S
index 64da6cdf4018..6d9cce1148ea 100644
--- a/arch/powerpc/kvm/book3s_hv_rmhandlers.S
+++ b/arch/powerpc/kvm/book3s_hv_rmhandlers.S
@@ -1838,6 +1838,14 @@ END_FTR_SECTION_IFSET(CPU_FTR_P9_RADIX_PREFETCH_BUG)
 2:
 #endif /* CONFIG_PPC_RADIX_MMU */
 
+	/*
+	 * cp_abort is required if the processor supports local copy-paste
+	 * to clear the copy buffer that was under control of the guest.
+	 */
+BEGIN_FTR_SECTION
+	PPC_CP_ABORT
+END_FTR_SECTION_IFSET(CPU_FTR_ARCH_31)
+
 	/*
 	 * POWER7/POWER8 guest -> host partition switch code.
 	 * We don't have to lock against tlbies but we do
