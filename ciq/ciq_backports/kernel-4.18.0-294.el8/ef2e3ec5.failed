scsi: qla2xxx: Set NVMe status code for failed NVMe FCP request

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Daniel Wagner <dwagner@suse.de>
commit ef2e3ec520a8c20661ca4e7d17a5c7110d3a7828
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ef2e3ec5.failed

The qla2xxx driver knows when request was processed successfully or
not. But it always sets the NVMe status code to 0/NVME_SC_SUCCESS. The
upper layer needs to figure out from the rcv_rsplen and transferred_length
variables if the request was transferred successfully. This is not always
possible, e.g. when the request data length is 0, the transferred_length is
also set 0 which is interpreted as success in nvme_fc_fcpio_done(). Let's
inform the upper layer (nvme_fc_fcpio_done()) when something went wrong.

nvme_fc_fcpio_done() maps all non-NVME_SC_SUCCESS status codes to
NVME_SC_HOST_PATH_ERROR. There isn't any benefit to map the QLA status code
to the NVMe status code. Therefore, use NVME_SC_INTERNAL to indicate an
error which aligns it with the lpfc driver.

Link: https://lore.kernel.org/r/20200604100745.89250-1-dwagner@suse.de
	Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Daniel Wagner <dwagner@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit ef2e3ec520a8c20661ca4e7d17a5c7110d3a7828)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_nvme.c
diff --cc drivers/scsi/qla2xxx/qla_nvme.c
index b2be9c40e3cd,fa695a4007f8..000000000000
--- a/drivers/scsi/qla2xxx/qla_nvme.c
+++ b/drivers/scsi/qla2xxx/qla_nvme.c
@@@ -138,7 -138,8 +138,12 @@@ static void qla_nvme_release_fcp_cmd_kr
  	priv->sp = NULL;
  	sp->priv = NULL;
  	if (priv->comp_status == QLA_SUCCESS) {
++<<<<<<< HEAD
 +		fd->rcv_rsplen = nvme->u.nvme.rsp_pyld_len;
++=======
+ 		fd->rcv_rsplen = le16_to_cpu(nvme->u.nvme.rsp_pyld_len);
+ 		fd->status = NVME_SC_SUCCESS;
++>>>>>>> ef2e3ec520a8 (scsi: qla2xxx: Set NVMe status code for failed NVMe FCP request)
  	} else {
  		fd->rcv_rsplen = 0;
  		fd->transferred_length = 0;
* Unmerged path drivers/scsi/qla2xxx/qla_nvme.c
