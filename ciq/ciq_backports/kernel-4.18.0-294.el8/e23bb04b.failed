bpf: Fix sysfs export of empty BTF section

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Tony Ambardar <tony.ambardar@gmail.com>
commit e23bb04b0c938588eae41b7f4712b722290ed2b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e23bb04b.failed

If BTF data is missing or removed from the ELF section it is still exported
via sysfs as a zero-length file:

  root@OpenWrt:/# ls -l /sys/kernel/btf/vmlinux
  -r--r--r--    1 root    root    0 Jul 18 02:59 /sys/kernel/btf/vmlinux

Moreover, reads from this file succeed and leak kernel data:

  root@OpenWrt:/# hexdump -C /sys/kernel/btf/vmlinux|head -10
  000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
  *
  000cc0 00 00 00 00 00 00 00 00 00 00 00 00 80 83 b0 80 |................|
  000cd0 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
  000ce0 00 00 00 00 00 00 00 00 00 00 00 00 57 ac 6e 9d |............W.n.|
  000cf0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|
  *
  002650 00 00 00 00 00 00 00 10 00 00 00 01 00 00 00 01 |................|
  002660 80 82 9a c4 80 85 97 80 81 a9 51 68 00 00 00 02 |..........Qh....|
  002670 80 25 44 dc 80 85 97 80 81 a9 50 24 81 ab c4 60 |.%D.......P$...`|

This situation was first observed with kernel 5.4.x, cross-compiled for a
MIPS target system. Fix by adding a sanity-check for export of zero-length
data sections.

Fixes: 341dfcf8d78e ("btf: expose BTF info through sysfs")
	Signed-off-by: Tony Ambardar <Tony.Ambardar@gmail.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/b38db205a66238f70823039a8c531535864eaac5.1600417359.git.Tony.Ambardar@gmail.com
(cherry picked from commit e23bb04b0c938588eae41b7f4712b722290ed2b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/sysfs_btf.c
diff --cc kernel/bpf/sysfs_btf.c
index 7ae5dddd1fe6,11b3380887fa..000000000000
--- a/kernel/bpf/sysfs_btf.c
+++ b/kernel/bpf/sysfs_btf.c
@@@ -30,16 -30,15 +30,25 @@@ static struct kobject *btf_kobj
  
  static int __init btf_vmlinux_init(void)
  {
++<<<<<<< HEAD
 +	if (!_binary__btf_vmlinux_bin_start)
++=======
+ 	bin_attr_btf_vmlinux.size = __stop_BTF - __start_BTF;
+ 
+ 	if (!__start_BTF || bin_attr_btf_vmlinux.size == 0)
++>>>>>>> e23bb04b0c93 (bpf: Fix sysfs export of empty BTF section)
  		return 0;
  
  	btf_kobj = kobject_create_and_add("btf", kernel_kobj);
  	if (!btf_kobj)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	bin_attr_btf_vmlinux.size = _binary__btf_vmlinux_bin_end -
 +				    _binary__btf_vmlinux_bin_start;
 +
++=======
++>>>>>>> e23bb04b0c93 (bpf: Fix sysfs export of empty BTF section)
  	return sysfs_create_bin_file(btf_kobj, &bin_attr_btf_vmlinux);
  }
  
* Unmerged path kernel/bpf/sysfs_btf.c
