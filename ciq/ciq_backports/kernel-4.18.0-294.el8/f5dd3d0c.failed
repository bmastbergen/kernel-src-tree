net: introduce SO_BINDTOIFINDEX sockopt

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [net] introduce SO_BINDTOIFINDEX sockopt (Jiri Benc) [1882708]
Rebuild_FUZZ: 93.15%
commit-author David Herrmann <dh.herrmann@gmail.com>
commit f5dd3d0c9638a9d9a02b5964c4ad636f06cf7e2c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f5dd3d0c.failed

This introduces a new generic SOL_SOCKET-level socket option called
SO_BINDTOIFINDEX. It behaves similar to SO_BINDTODEVICE, but takes a
network interface index as argument, rather than the network interface
name.

User-space often refers to network-interfaces via their index, but has
to temporarily resolve it to a name for a call into SO_BINDTODEVICE.
This might pose problems when the network-device is renamed
asynchronously by other parts of the system. When this happens, the
SO_BINDTODEVICE might either fail, or worse, it might bind to the wrong
device.

In most cases user-space only ever operates on devices which they
either manage themselves, or otherwise have a guarantee that the device
name will not change (e.g., devices that are UP cannot be renamed).
However, particularly in libraries this guarantee is non-obvious and it
would be nice if that race-condition would simply not exist. It would
make it easier for those libraries to operate even in situations where
the device-name might change under the hood.

A real use-case that we recently hit is trying to start the network
stack early in the initrd but make it survive into the real system.
Existing distributions rename network-interfaces during the transition
from initrd into the real system. This, obviously, cannot affect
devices that are up and running (unless you also consider moving them
between network-namespaces). However, the network manager now has to
make sure its management engine for dormant devices will not run in
parallel to these renames. Particularly, when you offload operations
like DHCP into separate processes, these might setup their sockets
early, and thus have to resolve the device-name possibly running into
this race-condition.

By avoiding a call to resolve the device-name, we no longer depend on
the name and can run network setup of dormant devices in parallel to
the transition off the initrd. The SO_BINDTOIFINDEX ioctl plugs this
race.

	Reviewed-by: Tom Gundersen <teg@jklm.no>
	Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
	Acked-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f5dd3d0c9638a9d9a02b5964c4ad636f06cf7e2c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/asm-generic/socket.h
#	net/core/sock.c
#	tools/include/uapi/asm-generic/socket.h
diff --cc include/uapi/asm-generic/socket.h
index 4bb20b351a05,3066ab3853a8..000000000000
--- a/include/uapi/asm-generic/socket.h
+++ b/include/uapi/asm-generic/socket.h
@@@ -110,6 -110,6 +110,10 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD
 +#define SO_DETACH_REUSEPORT_BPF 68
++=======
+ #define SO_BINDTOIFINDEX	62
++>>>>>>> f5dd3d0c9638 (net: introduce SO_BINDTOIFINDEX sockopt)
  
  #endif /* __ASM_GENERIC_SOCKET_H */
diff --cc net/core/sock.c
index d5f0115da4aa,b53764ebb973..000000000000
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@@ -612,12 -589,9 +635,14 @@@ static int sock_setbindtodevice(struct 
  	}
  
  	lock_sock(sk);
++<<<<<<< HEAD
 +	sk->sk_bound_dev_if = index;
 +	sk_dst_reset(sk);
++=======
+ 	ret = sock_setbindtodevice_locked(sk, index);
++>>>>>>> f5dd3d0c9638 (net: introduce SO_BINDTOIFINDEX sockopt)
  	release_sock(sk);
  
- 	ret = 0;
- 
  out:
  #endif
  
diff --cc tools/include/uapi/asm-generic/socket.h
index 4bb20b351a05,49c971587087..000000000000
--- a/tools/include/uapi/asm-generic/socket.h
+++ b/tools/include/uapi/asm-generic/socket.h
@@@ -110,6 -114,6 +110,12 @@@
  #define SO_TXTIME		61
  #define SCM_TXTIME		SO_TXTIME
  
++<<<<<<< HEAD:tools/include/uapi/asm-generic/socket.h
 +#define SO_DETACH_REUSEPORT_BPF 68
 +
 +#endif /* __ASM_GENERIC_SOCKET_H */
++=======
+ #define SO_BINDTOIFINDEX	62
+ 
+ #endif /* _ASM_SOCKET_H */
++>>>>>>> f5dd3d0c9638 (net: introduce SO_BINDTOIFINDEX sockopt):arch/s390/include/uapi/asm/socket.h
diff --git a/arch/alpha/include/uapi/asm/socket.h b/arch/alpha/include/uapi/asm/socket.h
index 065fb372e355..b1c9b542c021 100644
--- a/arch/alpha/include/uapi/asm/socket.h
+++ b/arch/alpha/include/uapi/asm/socket.h
@@ -115,4 +115,6 @@
 #define SO_TXTIME		61
 #define SCM_TXTIME		SO_TXTIME
 
+#define SO_BINDTOIFINDEX	62
+
 #endif /* _UAPI_ASM_SOCKET_H */
diff --git a/arch/ia64/include/uapi/asm/socket.h b/arch/ia64/include/uapi/asm/socket.h
index c872c4e6bafb..ba0d245f9576 100644
--- a/arch/ia64/include/uapi/asm/socket.h
+++ b/arch/ia64/include/uapi/asm/socket.h
@@ -117,4 +117,6 @@
 #define SO_TXTIME		61
 #define SCM_TXTIME		SO_TXTIME
 
+#define SO_BINDTOIFINDEX	62
+
 #endif /* _ASM_IA64_SOCKET_H */
diff --git a/arch/mips/include/uapi/asm/socket.h b/arch/mips/include/uapi/asm/socket.h
index 71370fb3ceef..73e25e35d803 100644
--- a/arch/mips/include/uapi/asm/socket.h
+++ b/arch/mips/include/uapi/asm/socket.h
@@ -126,4 +126,6 @@
 #define SO_TXTIME		61
 #define SCM_TXTIME		SO_TXTIME
 
+#define SO_BINDTOIFINDEX	62
+
 #endif /* _UAPI_ASM_SOCKET_H */
diff --git a/arch/parisc/include/uapi/asm/socket.h b/arch/parisc/include/uapi/asm/socket.h
index 061b9cf2a779..52bed5976cbe 100644
--- a/arch/parisc/include/uapi/asm/socket.h
+++ b/arch/parisc/include/uapi/asm/socket.h
@@ -107,4 +107,6 @@
 #define SO_TXTIME		0x4036
 #define SCM_TXTIME		SO_TXTIME
 
+#define SO_BINDTOIFINDEX	0x4037
+
 #endif /* _UAPI_ASM_SOCKET_H */
diff --git a/arch/sparc/include/uapi/asm/socket.h b/arch/sparc/include/uapi/asm/socket.h
index 7ea35e5601b6..bbdb81594dd4 100644
--- a/arch/sparc/include/uapi/asm/socket.h
+++ b/arch/sparc/include/uapi/asm/socket.h
@@ -104,6 +104,8 @@
 #define SO_TXTIME		0x003f
 #define SCM_TXTIME		SO_TXTIME
 
+#define SO_BINDTOIFINDEX	0x0041
+
 /* Security levels - as per NRL IPv6 - don't actually do anything */
 #define SO_SECURITY_AUTHENTICATION		0x5001
 #define SO_SECURITY_ENCRYPTION_TRANSPORT	0x5002
diff --git a/arch/xtensa/include/uapi/asm/socket.h b/arch/xtensa/include/uapi/asm/socket.h
index 1de07a7f7680..b434217783d0 100644
--- a/arch/xtensa/include/uapi/asm/socket.h
+++ b/arch/xtensa/include/uapi/asm/socket.h
@@ -119,4 +119,6 @@
 #define SO_TXTIME		61
 #define SCM_TXTIME		SO_TXTIME
 
+#define SO_BINDTOIFINDEX	62
+
 #endif	/* _XTENSA_SOCKET_H */
* Unmerged path include/uapi/asm-generic/socket.h
* Unmerged path net/core/sock.c
* Unmerged path tools/include/uapi/asm-generic/socket.h
