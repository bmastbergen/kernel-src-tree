locking/seqlock, headers: Untangle the spaghetti monster

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 0cd39f4600ed4de859383018eb10f0f724900e1b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0cd39f46.failed

By using lockdep_assert_*() from seqlock.h, the spaghetti monster
attacked.

Attack back by reducing seqlock.h dependencies from two key high level headers:

 - <linux/seqlock.h>:               -Remove <linux/ww_mutex.h>
 - <linux/time.h>:                  -Remove <linux/seqlock.h>
 - <linux/sched.h>:                 +Add    <linux/seqlock.h>

The price was to add it to sched.h ...

Core header fallout, we add direct header dependencies instead of gaining them
parasitically from higher level headers:

 - <linux/dynamic_queue_limits.h>:  +Add <asm/bug.h>
 - <linux/hrtimer.h>:               +Add <linux/seqlock.h>
 - <linux/ktime.h>:                 +Add <asm/bug.h>
 - <linux/lockdep.h>:               +Add <linux/smp.h>
 - <linux/sched.h>:                 +Add <linux/seqlock.h>
 - <linux/videodev2.h>:             +Add <linux/kernel.h>

Arch headers fallout:

 - PARISC: <asm/timex.h>:           +Add <asm/special_insns.h>
 - SH:     <asm/io.h>:              +Add <asm/page.h>
 - SPARC:  <asm/timer_64.h>:        +Add <uapi/asm/asi.h>
 - SPARC:  <asm/vvar.h>:            +Add <asm/processor.h>, <asm/barrier.h>
                                    -Remove <linux/seqlock.h>
 - X86:    <asm/fixmap.h>:          +Add <asm/pgtable_types.h>
                                    -Remove <asm/acpi.h>

There's also a bunch of parasitic header dependency fallout in .c files, not listed
separately.

[ mingo: Extended the changelog, split up & fixed the original patch. ]

Co-developed-by: Ingo Molnar <mingo@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lore.kernel.org/r/20200804133438.GK2674@hirez.programming.kicks-ass.net
(cherry picked from commit 0cd39f4600ed4de859383018eb10f0f724900e1b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/sh/include/asm/io.h
#	arch/x86/kernel/apic/apic_noop.c
#	arch/x86/kernel/apic/probe_64.c
#	arch/x86/kernel/cpu/hygon.c
#	arch/x86/kernel/cpu/intel.c
#	arch/x86/kernel/jailhouse.c
#	arch/x86/kernel/tsc_msr.c
#	arch/x86/mm/init_32.c
#	include/linux/lockdep.h
#	include/linux/sched.h
#	include/linux/seqlock.h
diff --cc arch/sh/include/asm/io.h
index afe54dd838d4,ec587b583822..000000000000
--- a/arch/sh/include/asm/io.h
+++ b/arch/sh/include/asm/io.h
@@@ -17,7 -17,8 +17,12 @@@
  #include <asm/cache.h>
  #include <asm/addrspace.h>
  #include <asm/machvec.h>
++<<<<<<< HEAD
 +#include <asm/pgtable.h>
++=======
+ #include <asm/page.h>
+ #include <linux/pgtable.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  #include <asm-generic/iomap.h>
  
  #ifdef __KERNEL__
diff --cc arch/x86/kernel/apic/apic_noop.c
index 5078b5ce63a7,780c702969b7..000000000000
--- a/arch/x86/kernel/apic/apic_noop.c
+++ b/arch/x86/kernel/apic/apic_noop.c
@@@ -9,25 -9,10 +9,30 @@@
   * to not uglify the caller's code and allow to call (some) apic routines
   * like self-ipi, etc...
   */
++<<<<<<< HEAD
++=======
+ #include <linux/cpumask.h>
+ #include <linux/thread_info.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  
 +#include <linux/threads.h>
 +#include <linux/cpumask.h>
 +#include <linux/string.h>
 +#include <linux/kernel.h>
 +#include <linux/ctype.h>
 +#include <linux/errno.h>
 +#include <asm/fixmap.h>
 +#include <asm/mpspec.h>
 +#include <asm/apicdef.h>
  #include <asm/apic.h>
 +#include <asm/setup.h>
 +
 +#include <linux/smp.h>
 +#include <asm/ipi.h>
 +
 +#include <linux/interrupt.h>
 +#include <asm/acpi.h>
 +#include <asm/e820/api.h>
  
  static void noop_init_apic_ldr(void) { }
  static void noop_send_IPI(int cpu, int vector) { }
diff --cc arch/x86/kernel/apic/probe_64.c
index c303054b90b5,bd3835d6b535..000000000000
--- a/arch/x86/kernel/apic/probe_64.c
+++ b/arch/x86/kernel/apic/probe_64.c
@@@ -8,19 -8,10 +8,24 @@@
   * Martin Bligh, Andi Kleen, James Bottomley, John Stultz, and
   * James Cleverdon.
   */
++<<<<<<< HEAD
 +#include <linux/threads.h>
 +#include <linux/cpumask.h>
 +#include <linux/string.h>
 +#include <linux/init.h>
 +#include <linux/kernel.h>
 +#include <linux/ctype.h>
 +#include <linux/hardirq.h>
 +#include <linux/dmar.h>
++=======
+ #include <linux/thread_info.h>
+ #include <asm/apic.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  
 -#include "local.h"
 +#include <asm/smp.h>
 +#include <asm/apic.h>
 +#include <asm/ipi.h>
 +#include <asm/setup.h>
  
  /*
   * Check the APIC IDs in bios_cpu_apicid and choose the APIC mode.
diff --cc arch/x86/kernel/cpu/intel.c
index 18eb4bce2c94,6eb42d7a3dfd..000000000000
--- a/arch/x86/kernel/cpu/intel.c
+++ b/arch/x86/kernel/cpu/intel.c
@@@ -22,7 -22,8 +22,12 @@@
  #include <asm/cpu_device_id.h>
  #include <asm/cmdline.h>
  #include <asm/traps.h>
++<<<<<<< HEAD
 +#include <asm/kdebug.h>
++=======
+ #include <asm/resctrl.h>
+ #include <asm/numa.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  
  #ifdef CONFIG_X86_64
  #include <linux/topology.h>
diff --cc arch/x86/kernel/jailhouse.c
index 8311815a58fa,4eb8f2d19a87..000000000000
--- a/arch/x86/kernel/jailhouse.c
+++ b/arch/x86/kernel/jailhouse.c
@@@ -11,7 -11,10 +11,12 @@@
  #include <linux/acpi_pmtmr.h>
  #include <linux/kernel.h>
  #include <linux/reboot.h>
 -#include <linux/serial_8250.h>
  #include <asm/apic.h>
++<<<<<<< HEAD
++=======
+ #include <asm/io_apic.h>
+ #include <asm/acpi.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  #include <asm/cpu.h>
  #include <asm/hypervisor.h>
  #include <asm/i8259.h>
diff --cc arch/x86/kernel/tsc_msr.c
index 7381ace7e909,46c72f2ec32f..000000000000
--- a/arch/x86/kernel/tsc_msr.c
+++ b/arch/x86/kernel/tsc_msr.c
@@@ -8,12 -7,38 +8,17 @@@
   */
  
  #include <linux/kernel.h>
++<<<<<<< HEAD
 +#include <asm/processor.h>
 +#include <asm/setup.h>
++=======
+ #include <linux/thread_info.h>
+ 
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  #include <asm/apic.h>
 -#include <asm/cpu_device_id.h>
 -#include <asm/intel-family.h>
 -#include <asm/msr.h>
  #include <asm/param.h>
 -#include <asm/tsc.h>
 -
 -#define MAX_NUM_FREQS	16 /* 4 bits to select the frequency */
 -
 -/*
 - * The frequency numbers in the SDM are e.g. 83.3 MHz, which does not contain a
 - * lot of accuracy which leads to clock drift. As far as we know Bay Trail SoCs
 - * use a 25 MHz crystal and Cherry Trail uses a 19.2 MHz crystal, the crystal
 - * is the source clk for a root PLL which outputs 1600 and 100 MHz. It is
 - * unclear if the root PLL outputs are used directly by the CPU clock PLL or
 - * if there is another PLL in between.
 - * This does not matter though, we can model the chain of PLLs as a single PLL
 - * with a quotient equal to the quotients of all PLLs in the chain multiplied.
 - * So we can create a simplified model of the CPU clock setup using a reference
 - * clock of 100 MHz plus a quotient which gets us as close to the frequency
 - * from the SDM as possible.
 - * For the 83.3 MHz example from above this would give us 100 MHz * 5 / 6 =
 - * 83 and 1/3 MHz, which matches exactly what has been measured on actual hw.
 - */
 -#define TSC_REFERENCE_KHZ 100000
  
 -struct muldiv {
 -	u32 multiplier;
 -	u32 divider;
 -};
 +#define MAX_NUM_FREQS	9
  
  /*
   * If MSR_PERF_STAT[31] is set, the maximum resolved bus ratio can be
diff --cc arch/x86/mm/init_32.c
index a97fb2a9390b,d46a5cf6ccb0..000000000000
--- a/arch/x86/mm/init_32.c
+++ b/arch/x86/mm/init_32.c
@@@ -51,6 -51,8 +51,11 @@@
  #include <asm/page_types.h>
  #include <asm/cpu_entry_area.h>
  #include <asm/init.h>
++<<<<<<< HEAD
++=======
+ #include <asm/pgtable_areas.h>
+ #include <asm/numa.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  
  #include "mm_internal.h"
  
diff --cc include/linux/lockdep.h
index 15a6e20d4aa2,62a382d1845b..000000000000
--- a/include/linux/lockdep.h
+++ b/include/linux/lockdep.h
@@@ -11,6 -11,8 +11,11 @@@
  #define __LINUX_LOCKDEP_H
  
  #include <linux/lockdep_types.h>
++<<<<<<< HEAD
++=======
+ #include <linux/smp.h>
+ #include <asm/percpu.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  
  struct task_struct;
  
diff --cc include/linux/sched.h
index ca715b06dfc3,7c7a9499d7bc..000000000000
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@@ -31,7 -31,8 +31,12 @@@
  #include <linux/task_io_accounting.h>
  #include <linux/posix-timers.h>
  #include <linux/rseq.h>
++<<<<<<< HEAD
 +#include <linux/rh_kabi.h>
++=======
+ #include <linux/seqlock.h>
+ #include <linux/kcsan.h>
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  
  /* task_struct member predeclarations (sorted alphabetically): */
  struct audit_context;
diff --cc include/linux/seqlock.h
index 362623ec6c41,962d9768945f..000000000000
--- a/include/linux/seqlock.h
+++ b/include/linux/seqlock.h
@@@ -1,43 -1,25 +1,47 @@@
  /* SPDX-License-Identifier: GPL-2.0 */
  #ifndef __LINUX_SEQLOCK_H
  #define __LINUX_SEQLOCK_H
 -
  /*
 - * seqcount_t / seqlock_t - a reader-writer consistency mechanism with
 - * lockless readers (read-only retry loops), and no writer starvation.
 + * Reader/writer consistent mechanism without starving writers. This type of
 + * lock for data where the reader wants a consistent set of information
 + * and is willing to retry if the information changes. There are two types
 + * of readers:
 + * 1. Sequence readers which never block a writer but they may have to retry
 + *    if a writer is in progress by detecting change in sequence number.
 + *    Writers do not wait for a sequence reader.
 + * 2. Locking readers which will wait if a writer or another locking reader
 + *    is in progress. A locking reader in progress will also block a writer
 + *    from going forward. Unlike the regular rwlock, the read lock here is
 + *    exclusive so that only one locking reader can get it.
 + *
 + * This is not as cache friendly as brlock. Also, this may not work well
 + * for data that contains pointers, because any writer could
 + * invalidate a pointer that a reader was following.
 + *
 + * Expected non-blocking reader usage:
 + * 	do {
 + *	    seq = read_seqbegin(&foo);
 + * 	...
 + *      } while (read_seqretry(&foo, seq));
   *
 - * See Documentation/locking/seqlock.rst
   *
 - * Copyrights:
 - * - Based on x86_64 vsyscall gettimeofday: Keith Owens, Andrea Arcangeli
 - * - Sequence counters with associated locks, (C) 2020 Linutronix GmbH
 + * On non-SMP the spin locks disappear but the writer still needs
 + * to increment the sequence variables because an interrupt routine could
 + * change the state of the data.
 + *
 + * Based on x86_64 vsyscall gettimeofday 
 + * by Keith Owens and Andrea Arcangeli
   */
  
 -#include <linux/compiler.h>
 -#include <linux/kcsan-checks.h>
 -#include <linux/lockdep.h>
 -#include <linux/mutex.h>
 -#include <linux/preempt.h>
  #include <linux/spinlock.h>
++<<<<<<< HEAD
 +#include <linux/preempt.h>
 +#include <linux/lockdep.h>
 +#include <linux/compiler.h>
 +#include <linux/kcsan.h>
++=======
+ 
++>>>>>>> 0cd39f4600ed (locking/seqlock, headers: Untangle the spaghetti monster)
  #include <asm/processor.h>
  
  /*
* Unmerged path arch/x86/kernel/cpu/hygon.c
* Unmerged path arch/sh/include/asm/io.h
diff --git a/arch/sh/kernel/machvec.c b/arch/sh/kernel/machvec.c
index ec05f491c347..10a0508bd7f3 100644
--- a/arch/sh/kernel/machvec.c
+++ b/arch/sh/kernel/machvec.c
@@ -18,6 +18,7 @@
 #include <asm/setup.h>
 #include <asm/io.h>
 #include <asm/irq.h>
+#include <asm/processor.h>
 
 #define MV_NAME_SIZE 32
 
diff --git a/arch/sparc/include/asm/timer_64.h b/arch/sparc/include/asm/timer_64.h
index c7e4fb601a57..dcfad4613e18 100644
--- a/arch/sparc/include/asm/timer_64.h
+++ b/arch/sparc/include/asm/timer_64.h
@@ -7,6 +7,7 @@
 #ifndef _SPARC64_TIMER_H
 #define _SPARC64_TIMER_H
 
+#include <uapi/asm/asi.h>
 #include <linux/types.h>
 #include <linux/init.h>
 
diff --git a/arch/sparc/include/asm/vvar.h b/arch/sparc/include/asm/vvar.h
index 0289503d1cb0..6eaf5cfcaae1 100644
--- a/arch/sparc/include/asm/vvar.h
+++ b/arch/sparc/include/asm/vvar.h
@@ -6,7 +6,8 @@
 #define _ASM_SPARC_VVAR_DATA_H
 
 #include <asm/clocksource.h>
-#include <linux/seqlock.h>
+#include <asm/processor.h>
+#include <asm/barrier.h>
 #include <linux/time.h>
 #include <linux/types.h>
 
diff --git a/arch/sparc/kernel/vdso.c b/arch/sparc/kernel/vdso.c
index 58880662b271..0e27437eb97b 100644
--- a/arch/sparc/kernel/vdso.c
+++ b/arch/sparc/kernel/vdso.c
@@ -7,7 +7,6 @@
  *  a different vsyscall implementation for Linux/IA32 and for the name.
  */
 
-#include <linux/seqlock.h>
 #include <linux/time.h>
 #include <linux/timekeeper_internal.h>
 
diff --git a/arch/x86/include/asm/fixmap.h b/arch/x86/include/asm/fixmap.h
index 6390bd8c141b..a03272781a53 100644
--- a/arch/x86/include/asm/fixmap.h
+++ b/arch/x86/include/asm/fixmap.h
@@ -26,9 +26,9 @@
 
 #ifndef __ASSEMBLY__
 #include <linux/kernel.h>
-#include <asm/acpi.h>
 #include <asm/apicdef.h>
 #include <asm/page.h>
+#include <asm/pgtable_types.h>
 #ifdef CONFIG_X86_32
 #include <linux/threads.h>
 #include <asm/kmap_types.h>
* Unmerged path arch/x86/kernel/apic/apic_noop.c
diff --git a/arch/x86/kernel/apic/hw_nmi.c b/arch/x86/kernel/apic/hw_nmi.c
index d1fc62a67320..34a992e275ef 100644
--- a/arch/x86/kernel/apic/hw_nmi.c
+++ b/arch/x86/kernel/apic/hw_nmi.c
@@ -9,6 +9,7 @@
  *  Bits copied from original nmi.c file
  *
  */
+#include <linux/thread_info.h>
 #include <asm/apic.h>
 #include <asm/nmi.h>
 
* Unmerged path arch/x86/kernel/apic/probe_64.c
diff --git a/arch/x86/kernel/cpu/amd.c b/arch/x86/kernel/cpu/amd.c
index bdcf958b4de8..8f3ee18e475b 100644
--- a/arch/x86/kernel/cpu/amd.c
+++ b/arch/x86/kernel/cpu/amd.c
@@ -14,6 +14,7 @@
 #include <asm/cpu.h>
 #include <asm/spec-ctrl.h>
 #include <asm/smp.h>
+#include <asm/numa.h>
 #include <asm/pci-direct.h>
 #include <asm/delay.h>
 
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index 41ac3035c19a..a8d929c37fe9 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -42,6 +42,7 @@
 #include <asm/mtrr.h>
 #include <asm/hwcap2.h>
 #include <linux/numa.h>
+#include <asm/numa.h>
 #include <asm/asm.h>
 #include <asm/bugs.h>
 #include <asm/cpu.h>
* Unmerged path arch/x86/kernel/cpu/hygon.c
* Unmerged path arch/x86/kernel/cpu/intel.c
* Unmerged path arch/x86/kernel/jailhouse.c
* Unmerged path arch/x86/kernel/tsc_msr.c
* Unmerged path arch/x86/mm/init_32.c
diff --git a/arch/x86/xen/apic.c b/arch/x86/xen/apic.c
index 5e53bfbe5823..984a26d7ffd7 100644
--- a/arch/x86/xen/apic.c
+++ b/arch/x86/xen/apic.c
@@ -1,5 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/init.h>
+#include <linux/thread_info.h>
 
 #include <asm/x86_init.h>
 #include <asm/apic.h>
diff --git a/arch/x86/xen/smp_hvm.c b/arch/x86/xen/smp_hvm.c
index f8d39440b292..f5e7db4f82ab 100644
--- a/arch/x86/xen/smp_hvm.c
+++ b/arch/x86/xen/smp_hvm.c
@@ -1,4 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
+#include <linux/thread_info.h>
 #include <asm/smp.h>
 
 #include <xen/events.h>
diff --git a/arch/x86/xen/suspend_pv.c b/arch/x86/xen/suspend_pv.c
index a2e0f110af56..b52bef1728b5 100644
--- a/arch/x86/xen/suspend_pv.c
+++ b/arch/x86/xen/suspend_pv.c
@@ -1,11 +1,11 @@
 // SPDX-License-Identifier: GPL-2.0
 #include <linux/types.h>
 
-#include <asm/fixmap.h>
-
 #include <asm/xen/hypercall.h>
 #include <asm/xen/page.h>
 
+#include <asm/fixmap.h>
+
 #include "xen-ops.h"
 
 void xen_pv_pre_suspend(void)
diff --git a/include/linux/dynamic_queue_limits.h b/include/linux/dynamic_queue_limits.h
index 99fc06f0afc1..407c2f281b64 100644
--- a/include/linux/dynamic_queue_limits.h
+++ b/include/linux/dynamic_queue_limits.h
@@ -38,6 +38,8 @@
 
 #ifdef __KERNEL__
 
+#include <asm/bug.h>
+
 struct dql {
 	/* Fields accessed in enqueue path (dql_queued) */
 	unsigned int	num_queued;		/* Total ever queued */
diff --git a/include/linux/hrtimer.h b/include/linux/hrtimer.h
index 503608e5fd84..0f265af3eb03 100644
--- a/include/linux/hrtimer.h
+++ b/include/linux/hrtimer.h
@@ -20,6 +20,7 @@
 #include <linux/init.h>
 #include <linux/list.h>
 #include <linux/percpu.h>
+#include <linux/seqlock.h>
 #include <linux/timer.h>
 #include <linux/timerqueue.h>
 #include <linux/rh_kabi.h>
diff --git a/include/linux/ktime.h b/include/linux/ktime.h
index 5b9fddbaac41..e60b726fcbab 100644
--- a/include/linux/ktime.h
+++ b/include/linux/ktime.h
@@ -23,6 +23,7 @@
 
 #include <linux/time.h>
 #include <linux/jiffies.h>
+#include <asm/bug.h>
 
 /* Nanosecond scalar representation for kernel time values */
 typedef s64	ktime_t;
* Unmerged path include/linux/lockdep.h
diff --git a/include/linux/mutex.h b/include/linux/mutex.h
index 457168e1bc27..8164e0cb7f25 100644
--- a/include/linux/mutex.h
+++ b/include/linux/mutex.h
@@ -65,6 +65,17 @@ struct mutex {
 #endif
 };
 
+struct ww_class;
+struct ww_acquire_ctx;
+
+struct ww_mutex {
+	struct mutex base;
+	struct ww_acquire_ctx *ctx;
+#ifdef CONFIG_DEBUG_MUTEXES
+	struct ww_class *ww_class;
+#endif
+};
+
 /*
  * This is the control structure for tasks blocked on mutex,
  * which resides on the blocked task's kernel stack:
* Unmerged path include/linux/sched.h
* Unmerged path include/linux/seqlock.h
diff --git a/include/linux/time.h b/include/linux/time.h
index 25a10316de5d..7e3d3f08fd3d 100644
--- a/include/linux/time.h
+++ b/include/linux/time.h
@@ -3,7 +3,6 @@
 #define _LINUX_TIME_H
 
 # include <linux/cache.h>
-# include <linux/seqlock.h>
 # include <linux/math64.h>
 # include <linux/time64.h>
 
diff --git a/include/linux/videodev2.h b/include/linux/videodev2.h
index 16c0ed6c50a7..219037f4c08d 100644
--- a/include/linux/videodev2.h
+++ b/include/linux/videodev2.h
@@ -57,6 +57,7 @@
 #define __LINUX_VIDEODEV2_H
 
 #include <linux/time.h>     /* need struct timeval */
+#include <linux/kernel.h>
 #include <uapi/linux/videodev2.h>
 
 #endif /* __LINUX_VIDEODEV2_H */
diff --git a/include/linux/ww_mutex.h b/include/linux/ww_mutex.h
index d7554252404c..850424e5d030 100644
--- a/include/linux/ww_mutex.h
+++ b/include/linux/ww_mutex.h
@@ -48,14 +48,6 @@ struct ww_acquire_ctx {
 #endif
 };
 
-struct ww_mutex {
-	struct mutex base;
-	struct ww_acquire_ctx *ctx;
-#ifdef CONFIG_DEBUG_MUTEXES
-	struct ww_class *ww_class;
-#endif
-};
-
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 # define __WW_CLASS_MUTEX_INITIALIZER(lockname, class) \
 		, .ww_class = class
