RDMA/mlx5: Delete one-time used functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 1e2b5a90ded2852017e327e93861346ee70c5384
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1e2b5a90.failed

Merge them into their callers, usually the only thing the caller did was
to call the one function, so this is clearer.

Link: https://lore.kernel.org/r/20200702081809.423482-7-leon@kernel.org
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 1e2b5a90ded2852017e327e93861346ee70c5384)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index cbcf9d2e948c,b730297b4d69..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -4999,9 -3044,11 +4868,8 @@@ static int mlx5_ib_dev_res_init(struct 
  	int port;
  	int ret = 0;
  
- 	dev = container_of(devr, struct mlx5_ib_dev, devr);
  	ibdev = &dev->ib_dev;
  
 -	if (!MLX5_CAP_GEN(dev->mdev, xrc))
 -		return -EOPNOTSUPP;
 -
  	mutex_init(&devr->mutex);
  
  	devr->p0 = rdma_zalloc_drv_obj(ibdev, ib_pd);
@@@ -5129,8 -3159,9 +4997,12 @@@ error0
  	return ret;
  }
  
- static void destroy_dev_resources(struct mlx5_ib_resources *devr)
+ static void mlx5_ib_dev_res_cleanup(struct mlx5_ib_dev *dev)
  {
++<<<<<<< HEAD
++=======
+ 	struct mlx5_ib_resources *devr = &dev->devr;
++>>>>>>> 1e2b5a90ded2 (RDMA/mlx5: Delete one-time used functions)
  	int port;
  
  	mlx5_ib_destroy_srq(devr->s1, NULL);
@@@ -6937,53 -4335,6 +6732,56 @@@ static void mlx5_ib_roce_cleanup(struc
  	}
  }
  
++<<<<<<< HEAD
 +static int mlx5_ib_stage_dev_res_init(struct mlx5_ib_dev *dev)
 +{
 +	return create_dev_resources(&dev->devr);
 +}
 +
 +static void mlx5_ib_stage_dev_res_cleanup(struct mlx5_ib_dev *dev)
 +{
 +	destroy_dev_resources(&dev->devr);
 +}
 +
 +static int mlx5_ib_stage_odp_init(struct mlx5_ib_dev *dev)
 +{
 +	return mlx5_ib_odp_init_one(dev);
 +}
 +
 +static const struct ib_device_ops mlx5_ib_dev_hw_stats_ops = {
 +	.alloc_hw_stats = mlx5_ib_alloc_hw_stats,
 +	.get_hw_stats = mlx5_ib_get_hw_stats,
 +	.counter_bind_qp = mlx5_ib_counter_bind_qp,
 +	.counter_unbind_qp = mlx5_ib_counter_unbind_qp,
 +	.counter_dealloc = mlx5_ib_counter_dealloc,
 +	.counter_alloc_stats = mlx5_ib_counter_alloc_stats,
 +	.counter_update_stats = mlx5_ib_counter_update_stats,
 +};
 +
 +static void mlx5_ib_stage_odp_cleanup(struct mlx5_ib_dev *dev)
 +{
 +	mlx5_ib_odp_cleanup_one(dev);
 +}
 +
 +static int mlx5_ib_stage_counters_init(struct mlx5_ib_dev *dev)
 +{
 +	if (MLX5_CAP_GEN(dev->mdev, max_qp_cnt)) {
 +		ib_set_device_ops(&dev->ib_dev, &mlx5_ib_dev_hw_stats_ops);
 +
 +		return mlx5_ib_alloc_counters(dev);
 +	}
 +
 +	return 0;
 +}
 +
 +static void mlx5_ib_stage_counters_cleanup(struct mlx5_ib_dev *dev)
 +{
 +	if (MLX5_CAP_GEN(dev->mdev, max_qp_cnt))
 +		mlx5_ib_dealloc_counters(dev);
 +}
 +
++=======
++>>>>>>> 1e2b5a90ded2 (RDMA/mlx5: Delete one-time used functions)
  static int mlx5_ib_stage_cong_debugfs_init(struct mlx5_ib_dev *dev)
  {
  	mlx5_ib_init_cong_debugfs(dev,
@@@ -7172,11 -4655,11 +7122,11 @@@ static const struct mlx5_ib_profile pf_
  		     mlx5_ib_stage_dev_notifier_init,
  		     mlx5_ib_stage_dev_notifier_cleanup),
  	STAGE_CREATE(MLX5_IB_STAGE_ODP,
- 		     mlx5_ib_stage_odp_init,
- 		     mlx5_ib_stage_odp_cleanup),
+ 		     mlx5_ib_odp_init_one,
+ 		     mlx5_ib_odp_cleanup_one),
  	STAGE_CREATE(MLX5_IB_STAGE_COUNTERS,
 -		     mlx5_ib_counters_init,
 -		     mlx5_ib_counters_cleanup),
 +		     mlx5_ib_stage_counters_init,
 +		     mlx5_ib_stage_counters_cleanup),
  	STAGE_CREATE(MLX5_IB_STAGE_CONG_DEBUGFS,
  		     mlx5_ib_stage_cong_debugfs_init,
  		     mlx5_ib_stage_cong_debugfs_cleanup),
* Unmerged path drivers/infiniband/hw/mlx5/main.c
