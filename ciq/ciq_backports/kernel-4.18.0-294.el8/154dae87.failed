ASoC: soc-pcm: add dpcm_create/remove_debugfs_state()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: soc-pcm: add dpcm_create/remove_debugfs_state() (Jaroslav Kysela) [1869536]
Rebuild_FUZZ: 94.64%
commit-author Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
commit 154dae87e73faa6d56265f22cae16dcdcea3dbb0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/154dae87.failed

soc-pcm.c has implementation which depends on CONFIG_DEBUG_FS.
But, we don't want to have random #ifdef.
This patch adds dpcm_create/remove_debugfs_state() and care it.

	Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Link: https://lore.kernel.org/r/877e0jjc9b.wl-kuninori.morimoto.gx@renesas.com
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 154dae87e73faa6d56265f22cae16dcdcea3dbb0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-pcm.c
diff --cc sound/soc/soc-pcm.c
index f3af956b9680,c5cfd88720c2..000000000000
--- a/sound/soc/soc-pcm.c
+++ b/sound/soc/soc-pcm.c
@@@ -28,6 -28,174 +28,177 @@@
  
  #define DPCM_MAX_BE_USERS	8
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_DEBUG_FS
+ static const char *dpcm_state_string(enum snd_soc_dpcm_state state)
+ {
+ 	switch (state) {
+ 	case SND_SOC_DPCM_STATE_NEW:
+ 		return "new";
+ 	case SND_SOC_DPCM_STATE_OPEN:
+ 		return "open";
+ 	case SND_SOC_DPCM_STATE_HW_PARAMS:
+ 		return "hw_params";
+ 	case SND_SOC_DPCM_STATE_PREPARE:
+ 		return "prepare";
+ 	case SND_SOC_DPCM_STATE_START:
+ 		return "start";
+ 	case SND_SOC_DPCM_STATE_STOP:
+ 		return "stop";
+ 	case SND_SOC_DPCM_STATE_SUSPEND:
+ 		return "suspend";
+ 	case SND_SOC_DPCM_STATE_PAUSED:
+ 		return "paused";
+ 	case SND_SOC_DPCM_STATE_HW_FREE:
+ 		return "hw_free";
+ 	case SND_SOC_DPCM_STATE_CLOSE:
+ 		return "close";
+ 	}
+ 
+ 	return "unknown";
+ }
+ 
+ static ssize_t dpcm_show_state(struct snd_soc_pcm_runtime *fe,
+ 			       int stream, char *buf, size_t size)
+ {
+ 	struct snd_pcm_hw_params *params = &fe->dpcm[stream].hw_params;
+ 	struct snd_soc_dpcm *dpcm;
+ 	ssize_t offset = 0;
+ 	unsigned long flags;
+ 
+ 	/* FE state */
+ 	offset += snprintf(buf + offset, size - offset,
+ 			   "[%s - %s]\n", fe->dai_link->name,
+ 			   stream ? "Capture" : "Playback");
+ 
+ 	offset += snprintf(buf + offset, size - offset, "State: %s\n",
+ 			   dpcm_state_string(fe->dpcm[stream].state));
+ 
+ 	if ((fe->dpcm[stream].state >= SND_SOC_DPCM_STATE_HW_PARAMS) &&
+ 	    (fe->dpcm[stream].state <= SND_SOC_DPCM_STATE_STOP))
+ 		offset += snprintf(buf + offset, size - offset,
+ 				   "Hardware Params: "
+ 				   "Format = %s, Channels = %d, Rate = %d\n",
+ 				   snd_pcm_format_name(params_format(params)),
+ 				   params_channels(params),
+ 				   params_rate(params));
+ 
+ 	/* BEs state */
+ 	offset += snprintf(buf + offset, size - offset, "Backends:\n");
+ 
+ 	if (list_empty(&fe->dpcm[stream].be_clients)) {
+ 		offset += snprintf(buf + offset, size - offset,
+ 				   " No active DSP links\n");
+ 		goto out;
+ 	}
+ 
+ 	spin_lock_irqsave(&fe->card->dpcm_lock, flags);
+ 	for_each_dpcm_be(fe, stream, dpcm) {
+ 		struct snd_soc_pcm_runtime *be = dpcm->be;
+ 		params = &dpcm->hw_params;
+ 
+ 		offset += snprintf(buf + offset, size - offset,
+ 				   "- %s\n", be->dai_link->name);
+ 
+ 		offset += snprintf(buf + offset, size - offset,
+ 				   "   State: %s\n",
+ 				   dpcm_state_string(be->dpcm[stream].state));
+ 
+ 		if ((be->dpcm[stream].state >= SND_SOC_DPCM_STATE_HW_PARAMS) &&
+ 		    (be->dpcm[stream].state <= SND_SOC_DPCM_STATE_STOP))
+ 			offset += snprintf(buf + offset, size - offset,
+ 					   "   Hardware Params: "
+ 					   "Format = %s, Channels = %d, Rate = %d\n",
+ 					   snd_pcm_format_name(params_format(params)),
+ 					   params_channels(params),
+ 					   params_rate(params));
+ 	}
+ 	spin_unlock_irqrestore(&fe->card->dpcm_lock, flags);
+ out:
+ 	return offset;
+ }
+ 
+ static ssize_t dpcm_state_read_file(struct file *file, char __user *user_buf,
+ 				    size_t count, loff_t *ppos)
+ {
+ 	struct snd_soc_pcm_runtime *fe = file->private_data;
+ 	ssize_t out_count = PAGE_SIZE, offset = 0, ret = 0;
+ 	int stream;
+ 	char *buf;
+ 
+ 	buf = kmalloc(out_count, GFP_KERNEL);
+ 	if (!buf)
+ 		return -ENOMEM;
+ 
+ 	for_each_pcm_streams(stream)
+ 		if (snd_soc_dai_stream_valid(fe->cpu_dai, stream))
+ 			offset += dpcm_show_state(fe, stream,
+ 						  buf + offset,
+ 						  out_count - offset);
+ 
+ 	ret = simple_read_from_buffer(user_buf, count, ppos, buf, offset);
+ 
+ 	kfree(buf);
+ 	return ret;
+ }
+ 
+ static const struct file_operations dpcm_state_fops = {
+ 	.open = simple_open,
+ 	.read = dpcm_state_read_file,
+ 	.llseek = default_llseek,
+ };
+ 
+ void soc_dpcm_debugfs_add(struct snd_soc_pcm_runtime *rtd)
+ {
+ 	if (!rtd->dai_link)
+ 		return;
+ 
+ 	if (!rtd->dai_link->dynamic)
+ 		return;
+ 
+ 	if (!rtd->card->debugfs_card_root)
+ 		return;
+ 
+ 	rtd->debugfs_dpcm_root = debugfs_create_dir(rtd->dai_link->name,
+ 						    rtd->card->debugfs_card_root);
+ 
+ 	debugfs_create_file("state", 0444, rtd->debugfs_dpcm_root,
+ 			    rtd, &dpcm_state_fops);
+ }
+ 
+ static void dpcm_create_debugfs_state(struct snd_soc_dpcm *dpcm, int stream)
+ {
+ 	char *name;
+ 
+ 	name = kasprintf(GFP_KERNEL, "%s:%s", dpcm->be->dai_link->name,
+ 			 stream ? "capture" : "playback");
+ 	if (name) {
+ 		dpcm->debugfs_state = debugfs_create_dir(
+ 			name, dpcm->fe->debugfs_dpcm_root);
+ 		debugfs_create_u32("state", 0644, dpcm->debugfs_state,
+ 				   &dpcm->state);
+ 		kfree(name);
+ 	}
+ }
+ 
+ static void dpcm_remove_debugfs_state(struct snd_soc_dpcm *dpcm)
+ {
+ 	debugfs_remove_recursive(dpcm->debugfs_state);
+ }
+ 
+ #else
+ static inline void dpcm_create_debugfs_state(struct snd_soc_dpcm *dpcm,
+ 					     int stream)
+ {
+ }
+ 
+ static inline void dpcm_remove_debugfs_state(struct snd_soc_dpcm *dpcm)
+ {
+ }
+ #endif
+ 
++>>>>>>> 154dae87e73f (ASoC: soc-pcm: add dpcm_create/remove_debugfs_state())
  static int soc_rtd_startup(struct snd_soc_pcm_runtime *rtd,
  			   struct snd_pcm_substream *substream)
  {
@@@ -1092,21 -1308,8 +1260,26 @@@ static int dpcm_be_connect(struct snd_s
  			stream ? "capture" : "playback",  fe->dai_link->name,
  			stream ? "<-" : "->", be->dai_link->name);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_DEBUG_FS
 +	if (fe->debugfs_dpcm_root) {
 +		name = kasprintf(GFP_KERNEL, "%s:%s", be->dai_link->name,
 +				 stream ? "capture" : "playback");
 +		if (name) {
 +			dpcm->debugfs_state = debugfs_create_dir(name,
 +								 fe->debugfs_dpcm_root);
 +			if (dpcm->debugfs_state) {
 +				debugfs_create_u32("state", 0644, dpcm->debugfs_state,
 +						   &dpcm->state);
 +			}
 +			kfree(name);
 +		}
 +	}
 +#endif
++=======
+ 	dpcm_create_debugfs_state(dpcm, stream);
+ 
++>>>>>>> 154dae87e73f (ASoC: soc-pcm: add dpcm_create/remove_debugfs_state())
  	return 1;
  }
  
@@@ -1159,9 -1362,8 +1332,14 @@@ void dpcm_be_disconnect(struct snd_soc_
  		/* BEs still alive need new FE */
  		dpcm_be_reparent(fe, dpcm->be, stream);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_DEBUG_FS
 +		debugfs_remove(dpcm->debugfs_state);
 +#endif
++=======
+ 		dpcm_remove_debugfs_state(dpcm);
+ 
++>>>>>>> 154dae87e73f (ASoC: soc-pcm: add dpcm_create/remove_debugfs_state())
  		spin_lock_irqsave(&fe->card->dpcm_lock, flags);
  		list_del(&dpcm->list_be);
  		list_del(&dpcm->list_fe);
* Unmerged path sound/soc/soc-pcm.c
