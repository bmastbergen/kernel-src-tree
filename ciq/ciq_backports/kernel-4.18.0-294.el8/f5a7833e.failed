net_sched: add a tracepoint for qdisc creation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [net] sched: add a tracepoint for qdisc creation (Ivan Vecera) [1874071]
Rebuild_FUZZ: 95.45%
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit f5a7833e83628f18c1ee94e6ffcb1d232f029be9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f5a7833e.failed

With this tracepoint, we could know when qdisc's are created,
especially those default qdisc's.

Sample output:

  tc-736   [001] ...1    56.230107: qdisc_create: dev=ens3 kind=pfifo parent=1:0
  tc-736   [001] ...1    56.230113: qdisc_create: dev=ens3 kind=hfsc parent=ffff:ffff
  tc-738   [001] ...1    56.256816: qdisc_create: dev=ens3 kind=pfifo parent=1:100
  tc-739   [001] ...1    56.267584: qdisc_create: dev=ens3 kind=pfifo parent=1:200
  tc-740   [001] ...1    56.279649: qdisc_create: dev=ens3 kind=fq_codel parent=1:100
  tc-741   [001] ...1    56.289996: qdisc_create: dev=ens3 kind=pfifo_fast parent=1:200
  tc-745   [000] .N.1   111.687483: qdisc_create: dev=ens3 kind=ingress parent=ffff:fff1

	Cc: Jamal Hadi Salim <jhs@mojatatu.com>
	Cc: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f5a7833e83628f18c1ee94e6ffcb1d232f029be9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/trace/events/qdisc.h
diff --cc include/trace/events/qdisc.h
index 60d0d8bd336d,330d32d84485..000000000000
--- a/include/trace/events/qdisc.h
+++ b/include/trace/events/qdisc.h
@@@ -44,7 -46,80 +44,84 @@@ TRACE_EVENT(qdisc_dequeue
  		  __entry->txq_state, __entry->packets, __entry->skbaddr )
  );
  
++<<<<<<< HEAD
 +#endif /* _TRACE_QDISC_H_ */
++=======
+ TRACE_EVENT(qdisc_reset,
+ 
+ 	TP_PROTO(struct Qdisc *q),
+ 
+ 	TP_ARGS(q),
+ 
+ 	TP_STRUCT__entry(
+ 		__string(	dev,		qdisc_dev(q)	)
+ 		__string(	kind,		q->ops->id	)
+ 		__field(	u32,		parent		)
+ 		__field(	u32,		handle		)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__assign_str(dev, qdisc_dev(q));
+ 		__assign_str(kind, q->ops->id);
+ 		__entry->parent = q->parent;
+ 		__entry->handle = q->handle;
+ 	),
+ 
+ 	TP_printk("dev=%s kind=%s parent=%x:%x handle=%x:%x", __get_str(dev),
+ 		  __get_str(kind), TC_H_MAJ(__entry->parent) >> 16, TC_H_MIN(__entry->parent),
+ 		  TC_H_MAJ(__entry->handle) >> 16, TC_H_MIN(__entry->handle))
+ );
+ 
+ TRACE_EVENT(qdisc_destroy,
+ 
+ 	TP_PROTO(struct Qdisc *q),
+ 
+ 	TP_ARGS(q),
+ 
+ 	TP_STRUCT__entry(
+ 		__string(	dev,		qdisc_dev(q)	)
+ 		__string(	kind,		q->ops->id	)
+ 		__field(	u32,		parent		)
+ 		__field(	u32,		handle		)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__assign_str(dev, qdisc_dev(q));
+ 		__assign_str(kind, q->ops->id);
+ 		__entry->parent = q->parent;
+ 		__entry->handle = q->handle;
+ 	),
+ 
+ 	TP_printk("dev=%s kind=%s parent=%x:%x handle=%x:%x", __get_str(dev),
+ 		  __get_str(kind), TC_H_MAJ(__entry->parent) >> 16, TC_H_MIN(__entry->parent),
+ 		  TC_H_MAJ(__entry->handle) >> 16, TC_H_MIN(__entry->handle))
+ );
+ 
+ TRACE_EVENT(qdisc_create,
+ 
+ 	TP_PROTO(const struct Qdisc_ops *ops, struct net_device *dev, u32 parent),
+ 
+ 	TP_ARGS(ops, dev, parent),
+ 
+ 	TP_STRUCT__entry(
+ 		__string(	dev,		dev->name	)
+ 		__string(	kind,		ops->id		)
+ 		__field(	u32,		parent		)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__assign_str(dev, dev->name);
+ 		__assign_str(kind, ops->id);
+ 		__entry->parent = parent;
+ 	),
+ 
+ 	TP_printk("dev=%s kind=%s parent=%x:%x",
+ 		  __get_str(dev), __get_str(kind),
+ 		  TC_H_MAJ(__entry->parent) >> 16, TC_H_MIN(__entry->parent))
+ );
+ 
+ #endif /* _TRACE_QDISC_H */
++>>>>>>> f5a7833e8362 (net_sched: add a tracepoint for qdisc creation)
  
  /* This part must be outside protection */
  #include <trace/define_trace.h>
* Unmerged path include/trace/events/qdisc.h
diff --git a/net/sched/sch_api.c b/net/sched/sch_api.c
index a342a9633825..22e35f60b6db 100644
--- a/net/sched/sch_api.c
+++ b/net/sched/sch_api.c
@@ -36,6 +36,8 @@
 #include <net/pkt_sched.h>
 #include <net/pkt_cls.h>
 
+#include <trace/events/qdisc.h>
+
 /*
 
    Short review.
@@ -1287,6 +1289,7 @@ static struct Qdisc *qdisc_create(struct net_device *dev,
 	}
 
 	qdisc_hash_add(sch, false);
+	trace_qdisc_create(ops, dev, parent);
 
 	return sch;
 
diff --git a/net/sched/sch_generic.c b/net/sched/sch_generic.c
index 6655107e7cf9..302f07f813f4 100644
--- a/net/sched/sch_generic.c
+++ b/net/sched/sch_generic.c
@@ -895,8 +895,10 @@ struct Qdisc *qdisc_create_dflt(struct netdev_queue *dev_queue,
 	}
 	sch->parent = parentid;
 
-	if (!ops->init || ops->init(sch, NULL, extack) == 0)
+	if (!ops->init || ops->init(sch, NULL, extack) == 0) {
+		trace_qdisc_create(ops, dev_queue->dev, parentid);
 		return sch;
+	}
 
 	qdisc_put(sch);
 	return NULL;
