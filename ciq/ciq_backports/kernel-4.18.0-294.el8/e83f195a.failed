RDMA/cm: Pull duplicated code into cm_queue_work_unlock()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jason Gunthorpe <jgg@ziepe.ca>
commit e83f195aa45c1ffd73b3a950a887e41c260cf194
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e83f195a.failed

While unlocking a spinlock held by the caller is a disturbing pattern,
this extensively duplicated code is even worse. Pull all the duplicates
into a function and explain the purpose of the algorithm.

The on creation side call in cm_req_handler() which is different has been
micro-optimized on the basis that the work_count == -1 during creation,
remove that and just use the normal function.

Link: https://lore.kernel.org/r/20200506074701.9775-5-leon@kernel.org
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit e83f195aa45c1ffd73b3a950a887e41c260cf194)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cm.c
diff --cc drivers/infiniband/core/cm.c
index 8849f64f391e,f56494de3c77..000000000000
--- a/drivers/infiniband/core/cm.c
+++ b/drivers/infiniband/core/cm.c
@@@ -81,8 -81,11 +81,15 @@@ const char *__attribute_const__ ibcm_re
  EXPORT_SYMBOL(ibcm_reject_msg);
  
  struct cm_id_private;
++<<<<<<< HEAD
 +static void cm_add_one(struct ib_device *device);
++=======
+ struct cm_work;
+ static int cm_add_one(struct ib_device *device);
++>>>>>>> e83f195aa45c (RDMA/cm: Pull duplicated code into cm_queue_work_unlock())
  static void cm_remove_one(struct ib_device *device, void *client_data);
+ static void cm_process_work(struct cm_id_private *cm_id_priv,
+ 			    struct cm_work *work);
  static int cm_send_sidr_rep_locked(struct cm_id_private *cm_id_priv,
  				   struct ib_cm_sidr_rep_param *param);
  static int cm_send_dreq_locked(struct cm_id_private *cm_id_priv,
* Unmerged path drivers/infiniband/core/cm.c
