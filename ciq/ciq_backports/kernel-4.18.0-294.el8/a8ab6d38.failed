fs/ext4: Update ext4_should_use_dax()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ira Weiny <ira.weiny@intel.com>
commit a8ab6d3885ef5e2300d683b79a9e1999403eefd9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a8ab6d38.failed

S_DAX should only be enabled when the underlying block device supports
dax.

Cache the underlying support for DAX in the super block and modify
ext4_should_use_dax() to check for device support prior to the over
riding mount option.

While we are at it change the function to ext4_should_enable_dax() as
this better reflects the ask as well as matches xfs.

	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Ira Weiny <ira.weiny@intel.com>

Link: https://lore.kernel.org/r/20200528150003.828793-5-ira.weiny@intel.com
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit a8ab6d3885ef5e2300d683b79a9e1999403eefd9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
#	fs/ext4/super.c
diff --cc fs/ext4/inode.c
index 8e7de233296c,6532870f6a0b..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -4724,10 -4398,10 +4724,15 @@@ int ext4_get_inode_loc(struct inode *in
  		!ext4_test_inode_state(inode, EXT4_STATE_XATTR));
  }
  
- static bool ext4_should_use_dax(struct inode *inode)
+ static bool ext4_should_enable_dax(struct inode *inode)
  {
++<<<<<<< HEAD
 +	if (!test_opt(inode->i_sb, DAX))
 +		return false;
++=======
+ 	struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
+ 
++>>>>>>> a8ab6d3885ef (fs/ext4: Update ext4_should_use_dax())
  	if (!S_ISREG(inode->i_mode))
  		return false;
  	if (ext4_should_journal_data(inode))
@@@ -4736,7 -4410,14 +4741,18 @@@
  		return false;
  	if (ext4_test_inode_flag(inode, EXT4_INODE_ENCRYPT))
  		return false;
++<<<<<<< HEAD
 +	return true;
++=======
+ 	if (ext4_test_inode_flag(inode, EXT4_INODE_VERITY))
+ 		return false;
+ 	if (!test_bit(EXT4_FLAGS_BDEV_IS_DAX, &sbi->s_ext4_flags))
+ 		return false;
+ 	if (test_opt(inode->i_sb, DAX_ALWAYS))
+ 		return true;
+ 
+ 	return false;
++>>>>>>> a8ab6d3885ef (fs/ext4: Update ext4_should_use_dax())
  }
  
  void ext4_set_inode_flags(struct inode *inode)
diff --cc fs/ext4/super.c
index 45de20b6730f,f7d76dcaedfe..000000000000
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@@ -4016,8 -4092,10 +4016,15 @@@ static int ext4_fill_super(struct super
  		goto failed_mount;
  	}
  
++<<<<<<< HEAD
 +	if (sbi->s_mount_opt & EXT4_MOUNT_DAX) {
 +		static bool printed = false;
++=======
+ 	if (bdev_dax_supported(sb->s_bdev, blocksize))
+ 		set_bit(EXT4_FLAGS_BDEV_IS_DAX, &sbi->s_ext4_flags);
+ 
+ 	if (sbi->s_mount_opt & EXT4_MOUNT_DAX_ALWAYS) {
++>>>>>>> a8ab6d3885ef (fs/ext4: Update ext4_should_use_dax())
  		if (ext4_has_feature_inline_data(sb)) {
  			ext4_msg(sb, KERN_ERR, "Cannot use DAX on a filesystem"
  					" that may contain inline data");
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 3fa62516bbdb..8ffd1ae636ac 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -1895,6 +1895,7 @@ static inline bool ext4_has_incompat_features(struct super_block *sb)
  */
 #define EXT4_FLAGS_RESIZING	0
 #define EXT4_FLAGS_SHUTDOWN	1
+#define EXT4_FLAGS_BDEV_IS_DAX	2
 
 static inline int ext4_forced_shutdown(struct ext4_sb_info *sbi)
 {
* Unmerged path fs/ext4/inode.c
* Unmerged path fs/ext4/super.c
