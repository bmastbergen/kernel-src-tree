tcp: switch tcp_internal_pacing() to tcp_wstamp_ns

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Eric Dumazet <edumazet@google.com>
commit c092dd5f4a7f4e4dbbcc8cf2e50b516bf07e432f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c092dd5f.failed

Now TCP keeps track of tcp_wstamp_ns, recording the earliest
departure time of next packet, we can remove duplicate code
from tcp_internal_pacing()

This removes one ktime_get_tai_ns() call, and a divide.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c092dd5f4a7f4e4dbbcc8cf2e50b516bf07e432f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_output.c
diff --cc net/ipv4/tcp_output.c
index 18b0cf43ad92,fe7855b090e4..000000000000
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@@ -1079,9 -1003,24 +1070,25 @@@ static void tcp_internal_pacing(struct 
  	sock_hold(sk);
  }
  
 -static void tcp_update_skb_after_send(struct sock *sk, struct sk_buff *skb)
 +static void tcp_update_skb_after_send(struct tcp_sock *tp, struct sk_buff *skb)
  {
 -	struct tcp_sock *tp = tcp_sk(sk);
 -
  	skb->skb_mstamp_ns = tp->tcp_wstamp_ns;
++<<<<<<< HEAD
++=======
+ 	if (sk->sk_pacing_status != SK_PACING_NONE) {
+ 		u32 rate = sk->sk_pacing_rate;
+ 
+ 		/* Original sch_fq does not pace first 10 MSS
+ 		 * Note that tp->data_segs_out overflows after 2^32 packets,
+ 		 * this is a minor annoyance.
+ 		 */
+ 		if (rate != ~0U && rate && tp->data_segs_out >= 10) {
+ 			tp->tcp_wstamp_ns += div_u64((u64)skb->len * NSEC_PER_SEC, rate);
+ 
+ 			tcp_internal_pacing(sk);
+ 		}
+ 	}
++>>>>>>> c092dd5f4a7f (tcp: switch tcp_internal_pacing() to tcp_wstamp_ns)
  	list_move_tail(&skb->tcp_tsorted_anchor, &tp->tsorted_sent_queue);
  }
  
* Unmerged path net/ipv4/tcp_output.c
