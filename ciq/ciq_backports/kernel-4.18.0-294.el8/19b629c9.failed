mm: memcg/slab: fix racy access to page->mem_cgroup in mem_cgroup_from_obj()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Roman Gushchin <guro@fb.com>
commit 19b629c9795bfe67bf77be8fb611b84424b56d91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/19b629c9.failed

mem_cgroup_from_obj() checks the lowest bit of the page->mem_cgroup
pointer to determine if the page has an attached obj_cgroup vector instead
of a regular memcg pointer.  If it's not set, it simple returns the
page->mem_cgroup value as a struct mem_cgroup pointer.

The commit 10befea91b61 ("mm: memcg/slab: use a single set of kmem_caches
for all allocations") changed the moment when this bit is set: if
previously it was set on the allocation of the slab page, now it can be
set well after, when the first accounted object is allocated on this page.

It opened a race: if page->mem_cgroup is set concurrently after the first
page_has_obj_cgroups(page) check, a pointer to the obj_cgroups array can
be returned as a memory cgroup pointer.

A simple check for page->mem_cgroup pointer for NULL before the
page_has_obj_cgroups() check fixes the race.  Indeed, if the pointer is
not NULL, it's either a simple mem_cgroup pointer or a pointer to
obj_cgroup vector.  The pointer can be asynchronously changed from NULL to
(obj_cgroup_vec | 0x1UL), but can't be changed from a valid memcg pointer
to objcg vector or back.

If the object passed to mem_cgroup_from_obj() is a slab object and
page->mem_cgroup is NULL, it means that the object is not accounted, so
the function must return NULL.

I've discovered the race looking at the code, so far I haven't seen it in
the wild.

Fixes: 10befea91b61 ("mm: memcg/slab: use a single set of kmem_caches for all allocations")
	Signed-off-by: Roman Gushchin <guro@fb.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Vlastimil Babka <vbabka@suse.cz>
Link: https://lkml.kernel.org/r/20200910022435.2773735-1-guro@fb.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 19b629c9795bfe67bf77be8fb611b84424b56d91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/memcontrol.c
diff --cc mm/memcontrol.c
index 406972ba9675,ba9f5404b8cf..000000000000
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@@ -2807,12 -2888,32 +2807,29 @@@ struct mem_cgroup *mem_cgroup_from_obj(
  	page = virt_to_head_page(p);
  
  	/*
++<<<<<<< HEAD
 +	 * Slab pages don't have page->mem_cgroup set because corresponding
 +	 * kmem caches can be reparented during the lifetime. That's why
 +	 * memcg_from_slab_page() should be used instead.
++=======
+ 	 * If page->mem_cgroup is set, it's either a simple mem_cgroup pointer
+ 	 * or a pointer to obj_cgroup vector. In the latter case the lowest
+ 	 * bit of the pointer is set.
+ 	 * The page->mem_cgroup pointer can be asynchronously changed
+ 	 * from NULL to (obj_cgroup_vec | 0x1UL), but can't be changed
+ 	 * from a valid memcg pointer to objcg vector or back.
+ 	 */
+ 	if (!page->mem_cgroup)
+ 		return NULL;
+ 
+ 	/*
+ 	 * Slab objects are accounted individually, not per-page.
+ 	 * Memcg membership data for each individual object is saved in
+ 	 * the page->obj_cgroups.
++>>>>>>> 19b629c9795b (mm: memcg/slab: fix racy access to page->mem_cgroup in mem_cgroup_from_obj())
  	 */
 -	if (page_has_obj_cgroups(page)) {
 -		struct obj_cgroup *objcg;
 -		unsigned int off;
 -
 -		off = obj_to_index(page->slab_cache, page, p);
 -		objcg = page_obj_cgroups(page)[off];
 -		if (objcg)
 -			return obj_cgroup_memcg(objcg);
 -
 -		return NULL;
 -	}
 +	if (PageSlab(page))
 +		return memcg_from_slab_page(page);
  
  	/* All other pages use page->mem_cgroup */
  	return page->mem_cgroup;
* Unmerged path mm/memcontrol.c
