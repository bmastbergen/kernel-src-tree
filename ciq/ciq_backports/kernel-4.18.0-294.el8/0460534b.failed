powerpc/papr_scm: Limit the readability of 'perf_stats' sysfs attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vaibhav Jain <vaibhav@linux.ibm.com>
commit 0460534b532e5518c657c7d6492b9337d975eaa3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0460534b.failed

The newly introduced 'perf_stats' attribute uses the default access
mode of 0444, allowing non-root users to access performance stats of
an nvdimm and potentially force the kernel into issuing a large number
of expensive hypercalls. Since the information exposed by this
attribute cannot be cached it is better to ward off access to this
attribute from users who don't need to access to these performance
statistics.

Hence update the access mode of 'perf_stats' attribute to be only
readable by root users.

Fixes: 2d02bf835e57 ("powerpc/papr_scm: Fetch nvdimm performance stats from PHYP")
	Reported-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
	Signed-off-by: Vaibhav Jain <vaibhav@linux.ibm.com>
	Reviewed-by: Ira Weiny <ira.weiny@intel.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200907110540.21349-1-vaibhav@linux.ibm.com
(cherry picked from commit 0460534b532e5518c657c7d6492b9337d975eaa3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/pseries/papr_scm.c
diff --cc arch/powerpc/platforms/pseries/papr_scm.c
index 319e67e3932f,a88a707a608a..000000000000
--- a/arch/powerpc/platforms/pseries/papr_scm.c
+++ b/arch/powerpc/platforms/pseries/papr_scm.c
@@@ -678,24 -782,47 +678,28 @@@ int papr_scm_ndctl(struct nvdimm_bus_de
  	return 0;
  }
  
 -static ssize_t perf_stats_show(struct device *dev,
 -			       struct device_attribute *attr, char *buf)
 +static inline int papr_scm_node(int node)
  {
 -	int index, rc;
 -	struct seq_buf s;
 -	struct papr_scm_perf_stat *stat;
 -	struct papr_scm_perf_stats *stats;
 -	struct nvdimm *dimm = to_nvdimm(dev);
 -	struct papr_scm_priv *p = nvdimm_provider_data(dimm);
 -
 -	if (!p->stat_buffer_len)
 -		return -ENOENT;
 -
 -	/* Allocate the buffer for phyp where stats are written */
 -	stats = kzalloc(p->stat_buffer_len, GFP_KERNEL);
 -	if (!stats)
 -		return -ENOMEM;
 -
 -	/* Ask phyp to return all dimm perf stats */
 -	rc = drc_pmem_query_stats(p, stats, 0);
 -	if (rc)
 -		goto free_stats;
 -	/*
 -	 * Go through the returned output buffer and print stats and
 -	 * values. Since stat_id is essentially a char string of
 -	 * 8 bytes, simply use the string format specifier to print it.
 -	 */
 -	seq_buf_init(&s, buf, PAGE_SIZE);
 -	for (index = 0, stat = stats->scm_statistic;
 -	     index < be32_to_cpu(stats->num_statistics);
 -	     ++index, ++stat) {
 -		seq_buf_printf(&s, "%.8s = 0x%016llX\n",
 -			       stat->stat_id,
 -			       be64_to_cpu(stat->stat_val));
 +	int min_dist = INT_MAX, dist;
 +	int nid, min_node;
 +
 +	if ((node == NUMA_NO_NODE) || node_online(node))
 +		return node;
 +
 +	min_node = first_online_node;
 +	for_each_online_node(nid) {
 +		dist = node_distance(node, nid);
 +		if (dist < min_dist) {
 +			min_dist = dist;
 +			min_node = nid;
 +		}
  	}
 -
 -free_stats:
 -	kfree(stats);
 -	return rc ? rc : seq_buf_used(&s);
 +	return min_node;
  }
++<<<<<<< HEAD
++=======
+ DEVICE_ATTR_ADMIN_RO(perf_stats);
++>>>>>>> 0460534b532e (powerpc/papr_scm: Limit the readability of 'perf_stats' sysfs attribute)
  
  static ssize_t flags_show(struct device *dev,
  			  struct device_attribute *attr, char *buf)
* Unmerged path arch/powerpc/platforms/pseries/papr_scm.c
