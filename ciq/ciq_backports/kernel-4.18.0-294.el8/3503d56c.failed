arm64/vdso: Add time namespace page

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrei Vagin <avagin@gmail.com>
commit 3503d56cc7233ced602e38a4c13caa64f00ab2aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3503d56c.failed

Allocate the time namespace page among VVAR pages.  Provide
__arch_get_timens_vdso_data() helper for VDSO code to get the
code-relative position of VVARs on that special page.

If a task belongs to a time namespace then the VVAR page which contains
the system wide VDSO data is replaced with a namespace specific page
which has the same layout as the VVAR page. That page has vdso_data->seq
set to 1 to enforce the slow path and vdso_data->clock_mode set to
VCLOCK_TIMENS to enforce the time namespace handling path.

The extra check in the case that vdso_data->seq is odd, e.g. a concurrent
update of the VDSO data is in progress, is not really affecting regular
tasks which are not part of a time namespace as the task is spin waiting
for the update to finish and vdso_data->seq to become even again.

If a time namespace task hits that code path, it invokes the corresponding
time getter function which retrieves the real VVAR page, reads host time
and then adds the offset for the requested clock which is stored in the
special VVAR page.

The time-namespace page isn't allocated on !CONFIG_TIME_NAMESPACE, but
vma is the same size, which simplifies criu/vdso migration between
different kernel configs.

	Signed-off-by: Andrei Vagin <avagin@gmail.com>
	Reviewed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Reviewed-by: Dmitry Safonov <dima@arista.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
Link: https://lore.kernel.org/r/20200624083321.144975-4-avagin@gmail.com
	Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 3503d56cc7233ced602e38a4c13caa64f00ab2aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/vdso/gettimeofday.h
#	arch/arm64/kernel/vdso.c
diff --cc arch/arm64/kernel/vdso.c
index 1800c0d56b1e,fcb559726920..000000000000
--- a/arch/arm64/kernel/vdso.c
+++ b/arch/arm64/kernel/vdso.c
@@@ -179,11 -181,14 +190,13 @@@ static int __setup_additional_pages(enu
  				    int uses_interp)
  {
  	unsigned long vdso_base, vdso_text_len, vdso_mapping_len;
 -	unsigned long gp_flags = 0;
  	void *ret;
  
+ 	BUILD_BUG_ON(VVAR_NR_PAGES != __VVAR_PAGES);
+ 
  	vdso_text_len = vdso_info[abi].vdso_pages << PAGE_SHIFT;
  	/* Be sure to map the data page */
- 	vdso_mapping_len = vdso_text_len + PAGE_SIZE;
+ 	vdso_mapping_len = vdso_text_len + VVAR_NR_PAGES * PAGE_SIZE;
  
  	vdso_base = get_unmapped_area(NULL, 0, vdso_mapping_len, 0, 0);
  	if (IS_ERR_VALUE(vdso_base)) {
@@@ -197,10 -202,13 +210,17 @@@
  	if (IS_ERR(ret))
  		goto up_fail;
  
++<<<<<<< HEAD
 +	vdso_base += PAGE_SIZE;
++=======
+ 	if (IS_ENABLED(CONFIG_ARM64_BTI_KERNEL) && system_supports_bti())
+ 		gp_flags = VM_ARM64_BTI;
+ 
+ 	vdso_base += VVAR_NR_PAGES * PAGE_SIZE;
++>>>>>>> 3503d56cc723 (arm64/vdso: Add time namespace page)
  	mm->context.vdso = (void *)vdso_base;
  	ret = _install_special_mapping(mm, vdso_base, vdso_text_len,
 -				       VM_READ|VM_EXEC|gp_flags|
 +				       VM_READ|VM_EXEC|
  				       VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC,
  				       vdso_info[abi].cm);
  	if (IS_ERR(ret))
* Unmerged path arch/arm64/include/asm/vdso/gettimeofday.h
diff --git a/arch/arm64/include/asm/vdso.h b/arch/arm64/include/asm/vdso.h
index 9b197e5ea759..c56633339bfc 100644
--- a/arch/arm64/include/asm/vdso.h
+++ b/arch/arm64/include/asm/vdso.h
@@ -25,6 +25,8 @@
  */
 #define VDSO_LBASE	0x0
 
+#define __VVAR_PAGES    2
+
 #ifndef __ASSEMBLY__
 
 #include <generated/vdso-offsets.h>
diff --git a/arch/arm64/include/asm/vdso/compat_gettimeofday.h b/arch/arm64/include/asm/vdso/compat_gettimeofday.h
index 98f683023222..77e3099896c6 100644
--- a/arch/arm64/include/asm/vdso/compat_gettimeofday.h
+++ b/arch/arm64/include/asm/vdso/compat_gettimeofday.h
@@ -153,6 +153,18 @@ static __always_inline const struct vdso_data *__arch_get_vdso_data(void)
 	return ret;
 }
 
+#ifdef CONFIG_TIME_NS
+static __always_inline const struct vdso_data *__arch_get_timens_vdso_data(void)
+{
+	const struct vdso_data *ret;
+
+	/* See __arch_get_vdso_data(). */
+	asm volatile("mov %0, %1" : "=r"(ret) : "r"(_timens_data));
+
+	return ret;
+}
+#endif
+
 #endif /* !__ASSEMBLY__ */
 
 #endif /* __ASM_VDSO_GETTIMEOFDAY_H */
* Unmerged path arch/arm64/include/asm/vdso/gettimeofday.h
* Unmerged path arch/arm64/kernel/vdso.c
diff --git a/arch/arm64/kernel/vdso/vdso.lds.S b/arch/arm64/kernel/vdso/vdso.lds.S
index beca249bc2f3..02b09518053b 100644
--- a/arch/arm64/kernel/vdso/vdso.lds.S
+++ b/arch/arm64/kernel/vdso/vdso.lds.S
@@ -28,7 +28,10 @@ OUTPUT_ARCH(aarch64)
 
 SECTIONS
 {
-	PROVIDE(_vdso_data = . - PAGE_SIZE);
+	PROVIDE(_vdso_data = . - __VVAR_PAGES * PAGE_SIZE);
+#ifdef CONFIG_TIME_NS
+	PROVIDE(_timens_data = _vdso_data + PAGE_SIZE);
+#endif
 	. = VDSO_LBASE + SIZEOF_HEADERS;
 
 	.hash		: { *(.hash) }			:text
diff --git a/arch/arm64/kernel/vdso32/vdso.lds.S b/arch/arm64/kernel/vdso32/vdso.lds.S
index a3944927eaeb..06cc60a9630f 100644
--- a/arch/arm64/kernel/vdso32/vdso.lds.S
+++ b/arch/arm64/kernel/vdso32/vdso.lds.S
@@ -17,7 +17,10 @@ OUTPUT_ARCH(arm)
 
 SECTIONS
 {
-	PROVIDE_HIDDEN(_vdso_data = . - PAGE_SIZE);
+	PROVIDE_HIDDEN(_vdso_data = . - __VVAR_PAGES * PAGE_SIZE);
+#ifdef CONFIG_TIME_NS
+	PROVIDE_HIDDEN(_timens_data = _vdso_data + PAGE_SIZE);
+#endif
 	. = VDSO_LBASE + SIZEOF_HEADERS;
 
 	.hash		: { *(.hash) }			:text
diff --git a/include/vdso/datapage.h b/include/vdso/datapage.h
index 2e302c0f41f7..33df8c41e782 100644
--- a/include/vdso/datapage.h
+++ b/include/vdso/datapage.h
@@ -83,6 +83,7 @@ struct vdso_data {
  * relocation, and this is what we need.
  */
 extern struct vdso_data _vdso_data[CS_BASES] __attribute__((visibility("hidden")));
+extern struct vdso_data _timens_data[CS_BASES] __attribute__((visibility("hidden")));
 
 #endif /* !__ASSEMBLY__ */
 
