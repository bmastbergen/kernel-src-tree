dm: simplify __process_abnormal_io()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mike Snitzer <snitzer@redhat.com>
commit 9679b5a7ec400f18f1812339b59c94750db48a76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9679b5a7.failed

Only call bio_op() once in switch statement.  Also remove the
excessive factoring out to one line functions.

	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 9679b5a7ec400f18f1812339b59c94750db48a76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index de413f6656b0,f7184b3dca66..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1434,37 -1474,8 +1434,40 @@@ static int __clone_and_map_data_bio(str
  	return 0;
  }
  
++<<<<<<< HEAD
 +typedef unsigned (*get_num_bios_fn)(struct dm_target *ti);
 +
 +static unsigned get_num_discard_bios(struct dm_target *ti)
 +{
 +	return ti->num_discard_bios;
 +}
 +
 +static unsigned get_num_secure_erase_bios(struct dm_target *ti)
 +{
 +	return ti->num_secure_erase_bios;
 +}
 +
 +static unsigned get_num_write_same_bios(struct dm_target *ti)
 +{
 +	return ti->num_write_same_bios;
 +}
 +
 +static unsigned get_num_write_zeroes_bios(struct dm_target *ti)
 +{
 +	return ti->num_write_zeroes_bios;
 +}
 +
 +typedef bool (*is_split_required_fn)(struct dm_target *ti);
 +
 +static bool is_split_required_for_discard(struct dm_target *ti)
 +{
 +	return ti->split_discard_bios;
 +}
 +
++=======
++>>>>>>> 9679b5a7ec40 (dm: simplify __process_abnormal_io())
  static int __send_changing_extent_only(struct clone_info *ci, struct dm_target *ti,
 -				       unsigned num_bios)
 +				       unsigned num_bios, bool is_split_required)
  {
  	unsigned len;
  
@@@ -1490,27 -1499,6 +1493,30 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int __send_discard(struct clone_info *ci, struct dm_target *ti)
 +{
 +	return __send_changing_extent_only(ci, ti, get_num_discard_bios(ti),
 +					   is_split_required_for_discard(ti));
 +}
 +
 +static int __send_secure_erase(struct clone_info *ci, struct dm_target *ti)
 +{
 +	return __send_changing_extent_only(ci, ti, get_num_secure_erase_bios(ti), false);
 +}
 +
 +static int __send_write_same(struct clone_info *ci, struct dm_target *ti)
 +{
 +	return __send_changing_extent_only(ci, ti, get_num_write_same_bios(ti), false);
 +}
 +
 +static int __send_write_zeroes(struct clone_info *ci, struct dm_target *ti)
 +{
 +	return __send_changing_extent_only(ci, ti, get_num_write_zeroes_bios(ti), false);
 +}
 +
++=======
++>>>>>>> 9679b5a7ec40 (dm: simplify __process_abnormal_io())
  static bool is_abnormal_io(struct bio *bio)
  {
  	bool r = false;
* Unmerged path drivers/md/dm.c
