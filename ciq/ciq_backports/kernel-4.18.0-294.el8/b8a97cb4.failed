powerpc/smp: Move coregroup mask updation to a new function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Srikar Dronamraju <srikar@linux.vnet.ibm.com>
commit b8a97cb4599cda28bd3b3bc13042f5803b42ad65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b8a97cb4.failed

Move the logic for updating the coregroup mask of a CPU to its own
function. This will help in reworking the updation of coregroup mask in
subsequent patch.

	Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200921095653.9701-11-srikar@linux.vnet.ibm.com
(cherry picked from commit b8a97cb4599cda28bd3b3bc13042f5803b42ad65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/smp.c
diff --cc arch/powerpc/kernel/smp.c
index ac60a5ed6f13,45619433c43a..000000000000
--- a/arch/powerpc/kernel/smp.c
+++ b/arch/powerpc/kernel/smp.c
@@@ -1314,25 -1372,8 +1331,30 @@@ static void add_cpu_to_masks(int cpu
  	add_cpu_to_smallcore_masks(cpu);
  	update_mask_by_l2(cpu);
  
++<<<<<<< HEAD
 +	if (pkg_id == -1) {
 +		struct cpumask *(*mask)(int) = cpu_sibling_mask;
 +
 +		/*
 +		 * Copy the sibling mask into core sibling mask and
 +		 * mark any CPUs on the same chip as this CPU.
 +		 */
 +		if (shared_caches)
 +			mask = cpu_l2_cache_mask;
 +
 +		for_each_cpu(i, mask(cpu))
 +			set_cpus_related(cpu, i, cpu_core_mask);
 +
 +		return;
 +	}
 +
 +	for_each_cpu(i, cpu_online_mask)
 +		if (get_physical_package_id(i) == pkg_id)
 +			set_cpus_related(cpu, i, cpu_core_mask);
++=======
+ 	if (has_coregroup_support())
+ 		update_coregroup_mask(cpu);
++>>>>>>> b8a97cb4599c (powerpc/smp: Move coregroup mask updation to a new function)
  }
  
  /* Activate a secondary processor. */
* Unmerged path arch/powerpc/kernel/smp.c
