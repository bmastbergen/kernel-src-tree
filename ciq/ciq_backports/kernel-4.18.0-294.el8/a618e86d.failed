net : phy: marvell: Speedup TDR data retrieval by only changing page once

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrew Lunn <andrew@lunn.ch>
commit a618e86da91d259374caff065cc557899dc181ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a618e86d.failed

Getting the TDR data requires a large number of MDIO bus
transactions. The number can however be reduced if the page is only
changed once. Add the needed locking to allow this, and make use of
unlocked read/write methods where needed.

	Signed-off-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a618e86da91d259374caff065cc557899dc181ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/marvell.c
diff --cc drivers/net/phy/marvell.c
index e597bee2e966,e9deedea5f19..000000000000
--- a/drivers/net/phy/marvell.c
+++ b/drivers/net/phy/marvell.c
@@@ -1787,16 -1789,21 +1784,15 @@@ static u32 marvell_vct5_distance2cm(in
  	return distance * 805 / 10;
  }
  
 -static u32 marvell_vct5_cm2distance(int cm)
 -{
 -	return cm * 10 / 805;
 -}
 -
  static int marvell_vct5_amplitude_distance(struct phy_device *phydev,
 -					   int distance, int pair)
 +					   int distance)
  {
 +	int mV_pair0, mV_pair1, mV_pair2, mV_pair3;
  	u16 reg;
  	int err;
 -	int mV;
 -	int i;
  
- 	err = phy_write_paged(phydev, MII_MARVELL_VCT5_PAGE,
- 			      MII_VCT5_SAMPLE_POINT_DISTANCE,
- 			      distance);
+ 	err = __phy_write(phydev, MII_VCT5_SAMPLE_POINT_DISTANCE,
+ 			  distance);
  	if (err)
  		return err;
  
@@@ -1829,7 -1833,9 +1824,8 @@@
  
  static int marvell_vct5_amplitude_graph(struct phy_device *phydev)
  {
 -	struct marvell_priv *priv = phydev->priv;
  	int distance;
+ 	int page;
  	int err;
  	u16 reg;
  
@@@ -1843,13 -1849,27 +1839,32 @@@
  	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	for (distance = 0; distance <= 100; distance++) {
 +		err = marvell_vct5_amplitude_distance(phydev, distance);
++=======
+ 	/* Reading the TDR data is very MDIO heavy. We need to optimize
+ 	 * access to keep the time to a minimum. So lock the bus once,
+ 	 * and don't release it until complete. We can then avoid having
+ 	 * to change the page for every access, greatly speeding things
+ 	 * up.
+ 	 */
+ 	page = phy_select_page(phydev, MII_MARVELL_VCT5_PAGE);
+ 	if (page < 0)
+ 		return page;
+ 
+ 	for (distance = priv->first;
+ 	     distance <= priv->last;
+ 	     distance += priv->step) {
+ 		err = marvell_vct5_amplitude_distance(phydev, distance,
+ 						      priv->pair);
++>>>>>>> a618e86da91d (net : phy: marvell: Speedup TDR data retrieval by only changing page once)
  		if (err)
- 			return err;
+ 			goto restore_page;
  	}
  
- 	return 0;
+ restore_page:
+ 	return phy_restore_page(phydev, page, err);
  }
  
  static int marvell_cable_test_start_common(struct phy_device *phydev)
* Unmerged path drivers/net/phy/marvell.c
