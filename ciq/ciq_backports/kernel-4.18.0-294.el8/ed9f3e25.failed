scsi: scsi_debug: Implement PRE-FETCH commands

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Douglas Gilbert <dgilbert@interlog.com>
commit ed9f3e2513f91553cc7197e8739a38a9bdea5303
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ed9f3e25.failed

Many disks implement the SCSI PRE-FETCH commands. One use case might be a
disk-to-disk compare, say between disks A and B. Then this sequence of
commands might be used: PRE-FETCH(from B, IMMED), READ(from A), VERIFY
(BYTCHK=1 on B with data returned from READ).  The PRE-FETCH (which returns
quickly due to the IMMED) fetches the data from the media into B's cache
which should speed the trailing VERIFY command. The next chunk of the
compare might be done in parallel, with A and B reversed.

The implementation tries to bring the specified range in main memory into
the cache(s) associated with this machine's CPU(s) using the
prefetch_range() function.

Link: https://lore.kernel.org/r/20200421151424.32668-7-dgilbert@interlog.com
	Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit ed9f3e2513f91553cc7197e8739a38a9bdea5303)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_debug.c
diff --cc drivers/scsi/scsi_debug.c
index bf9881fbdd10,153f38aa4f54..000000000000
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@@ -43,6 -38,10 +43,13 @@@
  #include <linux/hrtimer.h>
  #include <linux/uuid.h>
  #include <linux/t10-pi.h>
++<<<<<<< HEAD
++=======
+ #include <linux/msdos_partition.h>
+ #include <linux/random.h>
+ #include <linux/xarray.h>
+ #include <linux/prefetch.h>
++>>>>>>> ed9f3e2513f9 (scsi: scsi_debug: Implement PRE-FETCH commands)
  
  #include <net/checksum.h>
  
@@@ -386,8 -399,9 +394,14 @@@ static const unsigned char opcode_ind_a
  	0, SDEB_I_VARIABLE_LEN,
  /* 0x80; 0x80->0x9f: 16 byte cdbs */
  	0, 0, 0, 0, 0, SDEB_I_ATA_PT, 0, 0,
++<<<<<<< HEAD
 +	SDEB_I_READ, SDEB_I_COMP_WRITE, SDEB_I_WRITE, 0, 0, 0, 0, 0,
 +	0, SDEB_I_SYNC_CACHE, 0, SDEB_I_WRITE_SAME, 0, 0, 0, 0,
++=======
+ 	SDEB_I_READ, SDEB_I_COMP_WRITE, SDEB_I_WRITE, 0,
+ 	0, 0, 0, SDEB_I_VERIFY,
+ 	SDEB_I_PRE_FETCH, SDEB_I_SYNC_CACHE, 0, SDEB_I_WRITE_SAME, 0, 0, 0, 0,
++>>>>>>> ed9f3e2513f9 (scsi: scsi_debug: Implement PRE-FETCH commands)
  	0, 0, 0, 0, 0, 0, SDEB_I_SERV_ACT_IN_16, SDEB_I_SERV_ACT_OUT_16,
  /* 0xa0; 0xa0->0xbf: 12 byte cdbs */
  	SDEB_I_REPORT_LUNS, SDEB_I_ATA_PT, 0, SDEB_I_MAINT_IN,
@@@ -433,7 -448,15 +447,8 @@@ static int resp_write_same_16(struct sc
  static int resp_comp_write(struct scsi_cmnd *, struct sdebug_dev_info *);
  static int resp_write_buffer(struct scsi_cmnd *, struct sdebug_dev_info *);
  static int resp_sync_cache(struct scsi_cmnd *, struct sdebug_dev_info *);
+ static int resp_pre_fetch(struct scsi_cmnd *, struct sdebug_dev_info *);
  
 -static int sdebug_do_add_host(bool mk_new_store);
 -static int sdebug_add_host_helper(int per_host_idx);
 -static void sdebug_do_remove_host(bool the_end);
 -static int sdebug_add_store(void);
 -static void sdebug_erase_store(int idx, struct sdeb_store_info *sip);
 -static void sdebug_erase_all_stores(bool apart_from_first);
 -
  /*
   * The following are overflow arrays for cdbs that "hit" the same index in
   * the opcode_info_arr array. The most time sensitive (or commonly used) cdb
* Unmerged path drivers/scsi/scsi_debug.c
