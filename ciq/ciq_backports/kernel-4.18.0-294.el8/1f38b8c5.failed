mac80211: extend AQL aggregation estimation to HE and fix unit mismatch

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Felix Fietkau <nbd@nbd.name>
commit 1f38b8c564b8c24132428f6a4d04e05366fa10f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1f38b8c5.failed

The unit of the return value of ieee80211_get_rate_duration is nanoseconds, not
microseconds. Adjust the duration checks to account for that.
For higher data rates, allow larger estimated aggregation sizes, and add some
values for HE as well, which can use much larger aggregates.
Since small packets with high data rates can now lead to duration values too
small for info->tx_time_est, return a minimum of 4us.

Fixes: f01cfbaf9b29 ("mac80211: improve AQL aggregation estimation for low data rates")
	Signed-off-by: Felix Fietkau <nbd@nbd.name>
	Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
Link: https://lore.kernel.org/r/20200915085945.3782-1-nbd@nbd.name
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 1f38b8c564b8c24132428f6a4d04e05366fa10f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mac80211/airtime.c
diff --cc net/mac80211/airtime.c
index 9fc2968856c0,45140e535151..000000000000
--- a/net/mac80211/airtime.c
+++ b/net/mac80211/airtime.c
@@@ -572,10 -647,47 +572,48 @@@ u32 ieee80211_calc_expected_tx_airtime(
  	if (pubsta) {
  		struct sta_info *sta = container_of(pubsta, struct sta_info,
  						    sta);
 -		struct ieee80211_rx_status stat;
 -		struct ieee80211_tx_rate *rate = &sta->tx_stats.last_rate;
 -		struct rate_info *ri = &sta->tx_stats.last_rate_info;
 -		u32 duration, overhead;
 -		u8 agg_shift;
  
++<<<<<<< HEAD
 +		return ieee80211_calc_tx_airtime_rate(hw,
 +						      &sta->tx_stats.last_rate,
 +						      band, len);
++=======
+ 		if (ieee80211_fill_rx_status(&stat, hw, rate, ri, band, len))
+ 			return 0;
+ 
+ 		if (stat.encoding == RX_ENC_LEGACY || !ampdu)
+ 			return ieee80211_calc_rx_airtime(hw, &stat, len);
+ 
+ 		duration = ieee80211_get_rate_duration(hw, &stat, &overhead);
+ 		/*
+ 		 * Assume that HT/VHT transmission on any AC except VO will
+ 		 * use aggregation. Since we don't have reliable reporting
+ 		 * of aggregation length, assume an average size based on the
+ 		 * tx rate.
+ 		 * This will not be very accurate, but much better than simply
+ 		 * assuming un-aggregated tx in all cases.
+ 		 */
+ 		if (duration > 400 * 1024) /* <= VHT20 MCS2 1S */
+ 			agg_shift = 1;
+ 		else if (duration > 250 * 1024) /* <= VHT20 MCS3 1S or MCS1 2S */
+ 			agg_shift = 2;
+ 		else if (duration > 150 * 1024) /* <= VHT20 MCS5 1S or MCS2 2S */
+ 			agg_shift = 3;
+ 		else if (duration > 70 * 1024) /* <= VHT20 MCS5 2S */
+ 			agg_shift = 4;
+ 		else if (stat.encoding != RX_ENC_HE ||
+ 			 duration > 20 * 1024) /* <= HE40 MCS6 2S */
+ 			agg_shift = 5;
+ 		else
+ 			agg_shift = 6;
+ 
+ 		duration *= len;
+ 		duration /= AVG_PKT_SIZE;
+ 		duration /= 1024;
+ 		duration += (overhead >> agg_shift);
+ 
+ 		return max_t(u32, duration, 4);
++>>>>>>> 1f38b8c564b8 (mac80211: extend AQL aggregation estimation to HE and fix unit mismatch)
  	}
  
  	if (!conf)
* Unmerged path net/mac80211/airtime.c
