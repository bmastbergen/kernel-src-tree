x86/head/64: Don't call verify_cpu() on starting APs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] head/64: Don't call verify_cpu() on starting APs (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 96.00%
commit-author Joerg Roedel <jroedel@suse.de>
commit 3ecacdbd23956a549d93023f86adc87b4a9d6520
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3ecacdbd.failed

The APs are not ready to handle exceptions when verify_cpu() is called
in secondary_startup_64().

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Kees Cook <keescook@chromium.org>
Link: https://lkml.kernel.org/r/20200907131613.12703-69-joro@8bytes.org
(cherry picked from commit 3ecacdbd23956a549d93023f86adc87b4a9d6520)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/realmode/init.c
diff --cc arch/x86/realmode/init.c
index 262f83cad355,22fda7d99159..000000000000
--- a/arch/x86/realmode/init.c
+++ b/arch/x86/realmode/init.c
@@@ -38,6 -39,25 +38,28 @@@ void __init reserve_real_mode(void
  	crash_reserve_low_1M();
  }
  
++<<<<<<< HEAD
++=======
+ static void sme_sev_setup_real_mode(struct trampoline_header *th)
+ {
+ #ifdef CONFIG_AMD_MEM_ENCRYPT
+ 	if (sme_active())
+ 		th->flags |= TH_FLAGS_SME_ACTIVE;
+ 
+ 	if (sev_es_active()) {
+ 		/*
+ 		 * Skip the call to verify_cpu() in secondary_startup_64 as it
+ 		 * will cause #VC exceptions when the AP can't handle them yet.
+ 		 */
+ 		th->start = (u64) secondary_startup_64_no_verify;
+ 
+ 		if (sev_es_setup_ap_jump_table(real_mode_header))
+ 			panic("Failed to get/update SEV-ES AP Jump Table");
+ 	}
+ #endif
+ }
+ 
++>>>>>>> 3ecacdbd2395 (x86/head/64: Don't call verify_cpu() on starting APs)
  static void __init setup_real_mode(void)
  {
  	u16 real_mode_seg;
diff --git a/arch/x86/include/asm/realmode.h b/arch/x86/include/asm/realmode.h
index c53682303c9c..fcbef404549b 100644
--- a/arch/x86/include/asm/realmode.h
+++ b/arch/x86/include/asm/realmode.h
@@ -67,6 +67,7 @@ extern unsigned char startup_32_smp[];
 extern unsigned char boot_gdt[];
 #else
 extern unsigned char secondary_startup_64[];
+extern unsigned char secondary_startup_64_no_verify[];
 #endif
 
 static inline size_t real_mode_size_needed(void)
diff --git a/arch/x86/kernel/head_64.S b/arch/x86/kernel/head_64.S
index f62d1d12a0aa..4a81de2174d4 100644
--- a/arch/x86/kernel/head_64.S
+++ b/arch/x86/kernel/head_64.S
@@ -111,6 +111,18 @@ ENTRY(secondary_startup_64)
 	/* Sanitize CPU configuration */
 	call verify_cpu
 
+	/*
+	 * The secondary_startup_64_no_verify entry point is only used by
+	 * SEV-ES guests. In those guests the call to verify_cpu() would cause
+	 * #VC exceptions which can not be handled at this stage of secondary
+	 * CPU bringup.
+	 *
+	 * All non SEV-ES systems, especially Intel systems, need to execute
+	 * verify_cpu() above to make sure NX is enabled.
+	 */
+SYM_INNER_LABEL(secondary_startup_64_no_verify, SYM_L_GLOBAL)
+	UNWIND_HINT_EMPTY
+
 	/*
 	 * Retrieve the modifier (SME encryption mask if SME is active) to be
 	 * added to the initial pgdir entry that will be programmed into CR3.
* Unmerged path arch/x86/realmode/init.c
