scsi: lpfc: Use __printf() format notation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Lee Jones <lee.jones@linaro.org>
commit 7fa03c77cd54e1ff8fc58bb85f787ff67910ec48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7fa03c77.failed

Fixes the following W=1 kernel build warning(s):

 drivers/scsi/lpfc/lpfc_init.c: In function ‘lpfc_dbg_print’:
 drivers/scsi/lpfc/lpfc_init.c:14212:6: warning: function ‘lpfc_dbg_print’ might be a candidate for ‘gnu_printf’ format attribute [-Wsuggest-attribute=format]
 14212 | sizeof(phba->dbg_log[idx].log), fmt, args);
 | ^~~~~~

Link: https://lore.kernel.org/r/20200723122446.1329773-16-lee.jones@linaro.org
	Cc: James Smart <james.smart@broadcom.com>
	Cc: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: Lee Jones <lee.jones@linaro.org>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 7fa03c77cd54e1ff8fc58bb85f787ff67910ec48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_init.c
diff --cc drivers/scsi/lpfc/lpfc_init.c
index 5e4be6802261,50721dbc0268..000000000000
--- a/drivers/scsi/lpfc/lpfc_init.c
+++ b/drivers/scsi/lpfc/lpfc_init.c
@@@ -13962,6 -14136,85 +13962,88 @@@ cpuhp_failure
  	return error;
  }
  
++<<<<<<< HEAD
++=======
+ void lpfc_dmp_dbg(struct lpfc_hba *phba)
+ {
+ 	unsigned int start_idx;
+ 	unsigned int dbg_cnt;
+ 	unsigned int temp_idx;
+ 	int i;
+ 	int j = 0;
+ 	unsigned long rem_nsec;
+ 
+ 	if (phba->cfg_log_verbose)
+ 		return;
+ 
+ 	if (atomic_cmpxchg(&phba->dbg_log_dmping, 0, 1) != 0)
+ 		return;
+ 
+ 	start_idx = (unsigned int)atomic_read(&phba->dbg_log_idx) % DBG_LOG_SZ;
+ 	dbg_cnt = (unsigned int)atomic_read(&phba->dbg_log_cnt);
+ 	temp_idx = start_idx;
+ 	if (dbg_cnt >= DBG_LOG_SZ) {
+ 		dbg_cnt = DBG_LOG_SZ;
+ 		temp_idx -= 1;
+ 	} else {
+ 		if ((start_idx + dbg_cnt) > (DBG_LOG_SZ - 1)) {
+ 			temp_idx = (start_idx + dbg_cnt) % DBG_LOG_SZ;
+ 		} else {
+ 			if (start_idx < dbg_cnt)
+ 				start_idx = DBG_LOG_SZ - (dbg_cnt - start_idx);
+ 			else
+ 				start_idx -= dbg_cnt;
+ 		}
+ 	}
+ 	dev_info(&phba->pcidev->dev, "start %d end %d cnt %d\n",
+ 		 start_idx, temp_idx, dbg_cnt);
+ 
+ 	for (i = 0; i < dbg_cnt; i++) {
+ 		if ((start_idx + i) < DBG_LOG_SZ)
+ 			temp_idx = (start_idx + i) % DBG_LOG_SZ;
+ 		else
+ 			temp_idx = j++;
+ 		rem_nsec = do_div(phba->dbg_log[temp_idx].t_ns, NSEC_PER_SEC);
+ 		dev_info(&phba->pcidev->dev, "%d: [%5lu.%06lu] %s",
+ 			 temp_idx,
+ 			 (unsigned long)phba->dbg_log[temp_idx].t_ns,
+ 			 rem_nsec / 1000,
+ 			 phba->dbg_log[temp_idx].log);
+ 	}
+ 	atomic_set(&phba->dbg_log_cnt, 0);
+ 	atomic_set(&phba->dbg_log_dmping, 0);
+ }
+ 
+ __printf(2, 3)
+ void lpfc_dbg_print(struct lpfc_hba *phba, const char *fmt, ...)
+ {
+ 	unsigned int idx;
+ 	va_list args;
+ 	int dbg_dmping = atomic_read(&phba->dbg_log_dmping);
+ 	struct va_format vaf;
+ 
+ 
+ 	va_start(args, fmt);
+ 	if (unlikely(dbg_dmping)) {
+ 		vaf.fmt = fmt;
+ 		vaf.va = &args;
+ 		dev_info(&phba->pcidev->dev, "%pV", &vaf);
+ 		va_end(args);
+ 		return;
+ 	}
+ 	idx = (unsigned int)atomic_fetch_add(1, &phba->dbg_log_idx) %
+ 		DBG_LOG_SZ;
+ 
+ 	atomic_inc(&phba->dbg_log_cnt);
+ 
+ 	vscnprintf(phba->dbg_log[idx].log,
+ 		   sizeof(phba->dbg_log[idx].log), fmt, args);
+ 	va_end(args);
+ 
+ 	phba->dbg_log[idx].t_ns = local_clock();
+ }
+ 
++>>>>>>> 7fa03c77cd54 (scsi: lpfc: Use __printf() format notation)
  /**
   * lpfc_exit - lpfc module removal routine
   *
* Unmerged path drivers/scsi/lpfc/lpfc_init.c
