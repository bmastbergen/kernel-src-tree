scsi: scsi_debug: Implement VERIFY(10), add VERIFY(16)

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Douglas Gilbert <dgilbert@interlog.com>
commit c3e2fe9222d428f115baeba2f6b3637b3aa444cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c3e2fe92.failed

With the addition of the per_host_store option, the ability to check
whether two different ramdisk images are the same or not becomes
practical. Prior to this patch VERIFY(10) always returned true (i.e.  the
SCSI GOOD status) without checking. This option adds support for BYTCHK
equal to 0, 1 and 3. If the comparison fails, then a sense key of
MISCOMPARE is returned as per the T10 standards. Also add support for the
VERIFY(16) command.

Link: https://lore.kernel.org/r/20200421151424.32668-4-dgilbert@interlog.com
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit c3e2fe9222d428f115baeba2f6b3637b3aa444cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_debug.c
diff --cc drivers/scsi/scsi_debug.c
index bf9881fbdd10,da9b5ccf6621..000000000000
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@@ -2520,10 -2571,24 +2529,15 @@@ static int do_device_access(struct scsi
  	return ret;
  }
  
 -/* Returns number of bytes copied or -1 if error. */
 -static int do_dout_fetch(struct scsi_cmnd *scp, u32 num, u8 *doutp)
 -{
 -	struct scsi_data_buffer *sdb = &scp->sdb;
 -
 -	if (!sdb->length)
 -		return 0;
 -	if (scp->sc_data_direction != DMA_TO_DEVICE)
 -		return -1;
 -	return sg_copy_buffer(sdb->table.sgl, sdb->table.nents, doutp,
 -			      num * sdebug_sector_size, 0, true);
 -}
 -
 -/* If sip->storep+lba compares equal to arr(num), then copy top half of
 - * arr into sip->storep+lba and return true. If comparison fails then
 +/* If lba2fake_store(lba,num) compares equal to arr(num), then copy top half of
 + * arr into lba2fake_store(lba,num) and return true. If comparison fails then
   * return false. */
++<<<<<<< HEAD
 +static bool comp_write_worker(u64 lba, u32 num, const u8 *arr)
++=======
+ static bool comp_write_worker(struct sdeb_store_info *sip, u64 lba, u32 num,
+ 			      const u8 *arr, bool compare_only)
++>>>>>>> c3e2fe9222d4 (scsi: scsi_debug: Implement VERIFY(10), add VERIFY(16))
  {
  	bool res;
  	u64 block, rest = 0;
@@@ -2543,11 -2608,12 +2557,13 @@@
  			     rest * lb_size);
  	if (!res)
  		return res;
+ 	if (compare_only)
+ 		return true;
  	arr += num * lb_size;
 -	memcpy(fsp + (block * lb_size), arr, (num - rest) * lb_size);
 +	memcpy(fake_storep + (block * lb_size), arr, (num - rest) * lb_size);
  	if (rest)
 -		memcpy(fsp, arr + ((num - rest) * lb_size), rest * lb_size);
 +		memcpy(fake_storep, arr + ((num - rest) * lb_size),
 +		       rest * lb_size);
  	return res;
  }
  
@@@ -3453,7 -3535,7 +3469,11 @@@ static int resp_comp_write(struct scsi_
  		sdev_printk(KERN_INFO, scp->device, "%s: compare_write: cdb "
  			    "indicated=%u, IO sent=%d bytes\n", my_name,
  			    dnum * lb_size, ret);
++<<<<<<< HEAD
 +	if (!comp_write_worker(lba, num, arr)) {
++=======
+ 	if (!comp_write_worker(sip, lba, num, arr, false)) {
++>>>>>>> c3e2fe9222d4 (scsi: scsi_debug: Implement VERIFY(10), add VERIFY(16))
  		mk_sense_buffer(scp, MISCOMPARE, MISCOMPARE_VERIFY_ASC, 0);
  		retval = check_condition_result;
  		goto cleanup;
* Unmerged path drivers/scsi/scsi_debug.c
