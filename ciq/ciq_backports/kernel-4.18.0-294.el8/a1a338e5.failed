x86/entry/32: Unwind the ESPFIX stack earlier on exception entry

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andy Lutomirski <luto@kernel.org>
commit a1a338e5b6fe9e0a39c57c232dc96c198bb53e47
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a1a338e5.failed

Right now, we do some fancy parts of the exception entry path while SS
might have a nonzero base: we fill in regs->ss and regs->sp, and we
consider switching to the kernel stack. This results in regs->ss and
regs->sp referring to a non-flat stack and it may result in
overflowing the entry stack. The former issue means that we can try to
call iret_exc on a non-flat stack, which doesn't work.

Tested with selftests/x86/sigreturn_32.

Fixes: 45d7b255747c ("x86/entry/32: Enter the kernel via trampoline stack")
	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: stable@kernel.org
(cherry picked from commit a1a338e5b6fe9e0a39c57c232dc96c198bb53e47)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/entry/entry_32.S
diff --cc arch/x86/entry/entry_32.S
index 4f10311117f0,647e2a272d08..000000000000
--- a/arch/x86/entry/entry_32.S
+++ b/arch/x86/entry/entry_32.S
@@@ -1442,15 -1457,37 +1446,41 @@@ BUILD_INTERRUPT3(hv_stimer0_callback_ve
  ENTRY(page_fault)
  	ASM_CLAC
  	pushl	$do_page_fault
 -	jmp	common_exception_read_cr2
 +	ALIGN
 +	jmp common_exception
  END(page_fault)
  
++<<<<<<< HEAD
++=======
+ common_exception_read_cr2:
+ 	/* the function address is in %gs's slot on the stack */
+ 	SAVE_ALL switch_stacks=1 skip_gs=1 unwind_espfix=1
+ 
+ 	ENCODE_FRAME_POINTER
+ 
+ 	/* fixup %gs */
+ 	GS_TO_REG %ecx
+ 	movl	PT_GS(%esp), %edi
+ 	REG_TO_PTGS %ecx
+ 	SET_KERNEL_GS %ecx
+ 
+ 	GET_CR2_INTO(%ecx)			# might clobber %eax
+ 
+ 	/* fixup orig %eax */
+ 	movl	PT_ORIG_EAX(%esp), %edx		# get the error code
+ 	movl	$-1, PT_ORIG_EAX(%esp)		# no syscall to restart
+ 
+ 	TRACE_IRQS_OFF
+ 	movl	%esp, %eax			# pt_regs pointer
+ 	CALL_NOSPEC %edi
+ 	jmp	ret_from_exception
+ END(common_exception_read_cr2)
+ 
++>>>>>>> a1a338e5b6fe (x86/entry/32: Unwind the ESPFIX stack earlier on exception entry)
  common_exception:
  	/* the function address is in %gs's slot on the stack */
- 	SAVE_ALL switch_stacks=1 skip_gs=1
+ 	SAVE_ALL switch_stacks=1 skip_gs=1 unwind_espfix=1
  	ENCODE_FRAME_POINTER
- 	UNWIND_ESPFIX_STACK
  
  	/* fixup %gs */
  	GS_TO_REG %ecx
* Unmerged path arch/x86/entry/entry_32.S
