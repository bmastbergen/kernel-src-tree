kasan: turn off asan-stack for clang-8 and earlier

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Arnd Bergmann <arnd@arndb.de>
commit 6baec880d7a53cbc2841123e56ee31e830df9b49
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/6baec880.failed

Building an arm64 allmodconfig kernel with clang results in over 140
warnings about overly large stack frames, the worst ones being:

  drivers/gpu/drm/panel/panel-sitronix-st7789v.c:196:12: error: stack frame size of 20224 bytes in function 'st7789v_prepare'
  drivers/video/fbdev/omap2/omapfb/displays/panel-tpo-td028ttec1.c:196:12: error: stack frame size of 13120 bytes in function 'td028ttec1_panel_enable'
  drivers/usb/host/max3421-hcd.c:1395:1: error: stack frame size of 10048 bytes in function 'max3421_spi_thread'
  drivers/net/wan/slic_ds26522.c:209:12: error: stack frame size of 9664 bytes in function 'slic_ds26522_probe'
  drivers/crypto/ccp/ccp-ops.c:2434:5: error: stack frame size of 8832 bytes in function 'ccp_run_cmd'
  drivers/media/dvb-frontends/stv0367.c:1005:12: error: stack frame size of 7840 bytes in function 'stv0367ter_algo'

None of these happen with gcc today, and almost all of these are the
result of a single known issue in llvm.  Hopefully it will eventually
get fixed with the clang-9 release.

In the meantime, the best idea I have is to turn off asan-stack for
clang-8 and earlier, so we can produce a kernel that is safe to run.

I have posted three patches that address the frame overflow warnings
that are not addressed by turning off asan-stack, so in combination with
this change, we get much closer to a clean allmodconfig build, which in
turn is necessary to do meaningful build regression testing.

It is still possible to turn on the CONFIG_ASAN_STACK option on all
versions of clang, and it's always enabled for gcc, but when
CONFIG_COMPILE_TEST is set, the option remains invisible, so
allmodconfig and randconfig builds (which are normally done with a
forced CONFIG_COMPILE_TEST) will still result in a mostly clean build.

Link: http://lkml.kernel.org/r/20190222222950.3997333-1-arnd@arndb.de
Link: https://bugs.llvm.org/show_bug.cgi?id=38809
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Reviewed-by: Qian Cai <cai@lca.pw>
	Reviewed-by: Mark Brown <broonie@kernel.org>
	Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Nick Desaulniers <ndesaulniers@google.com>
	Cc: Kostya Serebryany <kcc@google.com>
	Cc: Andrey Konovalov <andreyknvl@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6baec880d7a53cbc2841123e56ee31e830df9b49)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	scripts/Makefile.kasan
diff --cc scripts/Makefile.kasan
index 69552a39951d,6deabedc67fc..000000000000
--- a/scripts/Makefile.kasan
+++ b/scripts/Makefile.kasan
@@@ -24,18 -19,16 +24,31 @@@ els
  			$(call cc-option, -fsanitize=kernel-address \
  			-mllvm -asan-mapping-offset=$(KASAN_SHADOW_OFFSET)))
  
++<<<<<<< HEAD
 +   ifeq ($(strip $(CFLAGS_KASAN_SHADOW)),)
 +      CFLAGS_KASAN := $(CFLAGS_KASAN_MINIMAL)
 +   else
 +      # Now add all the compiler specific options that are valid standalone
 +      CFLAGS_KASAN := $(CFLAGS_KASAN_SHADOW) \
 +	$(call cc-param,asan-globals=1) \
 +	$(call cc-param,asan-instrumentation-with-call-threshold=$(call_threshold)) \
 +	$(call cc-param,asan-stack=1) \
 +	$(call cc-param,asan-use-after-scope=1) \
 +	$(call cc-param,asan-instrument-allocas=1)
 +   endif
 +
++=======
+ ifeq ($(strip $(CFLAGS_KASAN_SHADOW)),)
+ 	CFLAGS_KASAN := $(CFLAGS_KASAN_MINIMAL)
+ else
+ 	# Now add all the compiler specific options that are valid standalone
+ 	CFLAGS_KASAN := $(CFLAGS_KASAN_SHADOW) \
+ 	 $(call cc-param,asan-globals=1) \
+ 	 $(call cc-param,asan-instrumentation-with-call-threshold=$(call_threshold)) \
+ 	 $(call cc-param,asan-stack=$(CONFIG_KASAN_STACK)) \
+ 	 $(call cc-param,asan-use-after-scope=1) \
+ 	 $(call cc-param,asan-instrument-allocas=1)
++>>>>>>> 6baec880d7a5 (kasan: turn off asan-stack for clang-8 and earlier)
  endif
  
  ifdef CONFIG_KASAN_EXTRA
diff --git a/lib/Kconfig.kasan b/lib/Kconfig.kasan
index d0bad1bd9a2b..dfa1b6d6ca0e 100644
--- a/lib/Kconfig.kasan
+++ b/lib/Kconfig.kasan
@@ -57,6 +57,28 @@ config KASAN_INLINE
 
 endchoice
 
+config KASAN_STACK_ENABLE
+	bool "Enable stack instrumentation (unsafe)" if CC_IS_CLANG && !COMPILE_TEST
+	default !(CLANG_VERSION < 90000)
+	depends on KASAN
+	help
+	  The LLVM stack address sanitizer has a know problem that
+	  causes excessive stack usage in a lot of functions, see
+	  https://bugs.llvm.org/show_bug.cgi?id=38809
+	  Disabling asan-stack makes it safe to run kernels build
+	  with clang-8 with KASAN enabled, though it loses some of
+	  the functionality.
+	  This feature is always disabled when compile-testing with clang-8
+	  or earlier to avoid cluttering the output in stack overflow
+	  warnings, but clang-8 users can still enable it for builds without
+	  CONFIG_COMPILE_TEST.  On gcc and later clang versions it is
+	  assumed to always be safe to use and enabled by default.
+
+config KASAN_STACK
+	int
+	default 1 if KASAN_STACK_ENABLE || CC_IS_GCC
+	default 0
+
 config KASAN_S390_4_LEVEL_PAGING
 	bool "KASan: use 4-level paging"
 	depends on KASAN && S390
* Unmerged path scripts/Makefile.kasan
