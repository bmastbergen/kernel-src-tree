mm: vmscan: harmonize writeback congestion tracking for nodes & memcgs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Johannes Weiner <hannes@cmpxchg.org>
commit 1b05117df78e035afb5f66ef50bf8750d976ef08
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1b05117d.failed

The current writeback congestion tracking has separate flags for kswapd
reclaim (node level) and cgroup limit reclaim (memcg-node level).  This is
unnecessarily complicated: the lruvec is an existing abstraction layer for
that node-memcg intersection.

Introduce lruvec->flags and LRUVEC_CONGESTED.  Then track that at the
reclaim root level, which is either the NUMA node for global reclaim, or
the cgroup-node intersection for cgroup reclaim.

Link: http://lkml.kernel.org/r/20191022144803.302233-9-hannes@cmpxchg.org
	Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
	Reviewed-by: Roman Gushchin <guro@fb.com>
	Reviewed-by: Shakeel Butt <shakeelb@google.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1b05117df78e035afb5f66ef50bf8750d976ef08)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmscan.c
diff --cc mm/vmscan.c
index fdc405f00cf6,39589e561c8f..000000000000
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@@ -269,36 -267,22 +269,13 @@@ static bool sane_reclaim(struct scan_co
  #endif
  	return false;
  }
- 
- static void set_memcg_congestion(pg_data_t *pgdat,
- 				struct mem_cgroup *memcg,
- 				bool congested)
- {
- 	struct mem_cgroup_per_node *mn;
- 
- 	if (!memcg)
- 		return;
- 
- 	mn = mem_cgroup_nodeinfo(memcg, pgdat->node_id);
- 	WRITE_ONCE(mn->congested, congested);
- }
- 
- static bool memcg_congested(pg_data_t *pgdat,
- 			struct mem_cgroup *memcg)
- {
- 	struct mem_cgroup_per_node *mn;
- 
- 	mn = mem_cgroup_nodeinfo(memcg, pgdat->node_id);
- 	return READ_ONCE(mn->congested);
- 
- }
  #else
 -static int prealloc_memcg_shrinker(struct shrinker *shrinker)
 +static bool global_reclaim(struct scan_control *sc)
  {
 -	return 0;
 -}
 -
 -static void unregister_memcg_shrinker(struct shrinker *shrinker)
 -{
 -}
 -
 -static bool cgroup_reclaim(struct scan_control *sc)
 -{
 -	return false;
 +	return true;
  }
  
 -static bool writeback_throttling_sane(struct scan_control *sc)
 +static bool sane_reclaim(struct scan_control *sc)
  {
  	return true;
  }
@@@ -2756,153 -2681,156 +2721,263 @@@ static inline bool should_continue_recl
  	return inactive_lru_pages > pages_for_compaction;
  }
  
++<<<<<<< HEAD
 +static bool pgdat_memcg_congested(pg_data_t *pgdat, struct mem_cgroup *memcg)
 +{
 +	return test_bit(PGDAT_CONGESTED, &pgdat->flags) ||
 +		(memcg && memcg_congested(pgdat, memcg));
++=======
+ static void shrink_node_memcgs(pg_data_t *pgdat, struct scan_control *sc)
+ {
+ 	struct mem_cgroup *target_memcg = sc->target_mem_cgroup;
+ 	struct mem_cgroup *memcg;
+ 
+ 	memcg = mem_cgroup_iter(target_memcg, NULL, NULL);
+ 	do {
+ 		struct lruvec *lruvec = mem_cgroup_lruvec(memcg, pgdat);
+ 		unsigned long reclaimed;
+ 		unsigned long scanned;
+ 
+ 		switch (mem_cgroup_protected(target_memcg, memcg)) {
+ 		case MEMCG_PROT_MIN:
+ 			/*
+ 			 * Hard protection.
+ 			 * If there is no reclaimable memory, OOM.
+ 			 */
+ 			continue;
+ 		case MEMCG_PROT_LOW:
+ 			/*
+ 			 * Soft protection.
+ 			 * Respect the protection only as long as
+ 			 * there is an unprotected supply
+ 			 * of reclaimable memory from other cgroups.
+ 			 */
+ 			if (!sc->memcg_low_reclaim) {
+ 				sc->memcg_low_skipped = 1;
+ 				continue;
+ 			}
+ 			memcg_memory_event(memcg, MEMCG_LOW);
+ 			break;
+ 		case MEMCG_PROT_NONE:
+ 			/*
+ 			 * All protection thresholds breached. We may
+ 			 * still choose to vary the scan pressure
+ 			 * applied based on by how much the cgroup in
+ 			 * question has exceeded its protection
+ 			 * thresholds (see get_scan_count).
+ 			 */
+ 			break;
+ 		}
+ 
+ 		reclaimed = sc->nr_reclaimed;
+ 		scanned = sc->nr_scanned;
+ 
+ 		shrink_lruvec(lruvec, sc);
+ 
+ 		shrink_slab(sc->gfp_mask, pgdat->node_id, memcg,
+ 			    sc->priority);
+ 
+ 		/* Record the group's reclaim efficiency */
+ 		vmpressure(sc->gfp_mask, memcg, false,
+ 			   sc->nr_scanned - scanned,
+ 			   sc->nr_reclaimed - reclaimed);
+ 
+ 	} while ((memcg = mem_cgroup_iter(target_memcg, memcg, NULL)));
++>>>>>>> 1b05117df78e (mm: vmscan: harmonize writeback congestion tracking for nodes & memcgs)
  }
  
  static bool shrink_node(pg_data_t *pgdat, struct scan_control *sc)
  {
  	struct reclaim_state *reclaim_state = current->reclaim_state;
  	unsigned long nr_reclaimed, nr_scanned;
+ 	struct lruvec *target_lruvec;
  	bool reclaimable = false;
  
++<<<<<<< HEAD
 +	do {
 +		struct mem_cgroup *root = sc->target_mem_cgroup;
 +		struct mem_cgroup *memcg;
++=======
+ 	target_lruvec = mem_cgroup_lruvec(sc->target_mem_cgroup, pgdat);
+ 
+ again:
+ 	memset(&sc->nr, 0, sizeof(sc->nr));
++>>>>>>> 1b05117df78e (mm: vmscan: harmonize writeback congestion tracking for nodes & memcgs)
  
 -	nr_reclaimed = sc->nr_reclaimed;
 -	nr_scanned = sc->nr_scanned;
 +		memset(&sc->nr, 0, sizeof(sc->nr));
  
 -	shrink_node_memcgs(pgdat, sc);
 +		nr_reclaimed = sc->nr_reclaimed;
 +		nr_scanned = sc->nr_scanned;
  
 -	if (reclaim_state) {
 -		sc->nr_reclaimed += reclaim_state->reclaimed_slab;
 -		reclaim_state->reclaimed_slab = 0;
 -	}
 +		memcg = mem_cgroup_iter(root, NULL, NULL);
 +		do {
 +			unsigned long reclaimed;
 +			unsigned long scanned;
  
++<<<<<<< HEAD
 +			switch (mem_cgroup_protected(root, memcg)) {
 +			case MEMCG_PROT_MIN:
 +				/*
 +				 * Hard protection.
 +				 * If there is no reclaimable memory, OOM.
 +				 */
 +				continue;
 +			case MEMCG_PROT_LOW:
 +				/*
 +				 * Soft protection.
 +				 * Respect the protection only as long as
 +				 * there is an unprotected supply
 +				 * of reclaimable memory from other cgroups.
 +				 */
 +				if (!sc->memcg_low_reclaim) {
 +					sc->memcg_low_skipped = 1;
 +					continue;
 +				}
 +				memcg_memory_event(memcg, MEMCG_LOW);
 +				break;
 +			case MEMCG_PROT_NONE:
 +				/*
 +				 * All protection thresholds breached. We may
 +				 * still choose to vary the scan pressure
 +				 * applied based on by how much the cgroup in
 +				 * question has exceeded its protection
 +				 * thresholds (see get_scan_count).
 +				 */
 +				break;
 +			}
++=======
+ 	/* Record the subtree's reclaim efficiency */
+ 	vmpressure(sc->gfp_mask, sc->target_mem_cgroup, true,
+ 		   sc->nr_scanned - nr_scanned,
+ 		   sc->nr_reclaimed - nr_reclaimed);
++>>>>>>> 1b05117df78e (mm: vmscan: harmonize writeback congestion tracking for nodes & memcgs)
 +
 +			reclaimed = sc->nr_reclaimed;
 +			scanned = sc->nr_scanned;
 +			shrink_node_memcg(pgdat, memcg, sc);
 +
 +			shrink_slab(sc->gfp_mask, pgdat->node_id, memcg,
 +					sc->priority);
 +
 +			/* Record the group's reclaim efficiency */
 +			vmpressure(sc->gfp_mask, memcg, false,
 +				   sc->nr_scanned - scanned,
 +				   sc->nr_reclaimed - reclaimed);
 +
 +		} while ((memcg = mem_cgroup_iter(root, memcg, NULL)));
 +
 +		if (reclaim_state) {
 +			sc->nr_reclaimed += reclaim_state->reclaimed_slab;
 +			reclaim_state->reclaimed_slab = 0;
 +		}
  
 -	if (sc->nr_reclaimed - nr_reclaimed)
 -		reclaimable = true;
 +		/* Record the subtree's reclaim efficiency */
 +		vmpressure(sc->gfp_mask, sc->target_mem_cgroup, true,
 +			   sc->nr_scanned - nr_scanned,
 +			   sc->nr_reclaimed - nr_reclaimed);
  
 -	if (current_is_kswapd()) {
 +		if (sc->nr_reclaimed - nr_reclaimed)
 +			reclaimable = true;
 +
 +		if (current_is_kswapd()) {
 +			/*
 +			 * If reclaim is isolating dirty pages under writeback,
 +			 * it implies that the long-lived page allocation rate
 +			 * is exceeding the page laundering rate. Either the
 +			 * global limits are not being effective at throttling
 +			 * processes due to the page distribution throughout
 +			 * zones or there is heavy usage of a slow backing
 +			 * device. The only option is to throttle from reclaim
 +			 * context which is not ideal as there is no guarantee
 +			 * the dirtying process is throttled in the same way
 +			 * balance_dirty_pages() manages.
 +			 *
 +			 * Once a node is flagged PGDAT_WRITEBACK, kswapd will
 +			 * count the number of pages under pages flagged for
 +			 * immediate reclaim and stall if any are encountered
 +			 * in the nr_immediate check below.
 +			 */
 +			if (sc->nr.writeback && sc->nr.writeback == sc->nr.taken)
 +				set_bit(PGDAT_WRITEBACK, &pgdat->flags);
 +
 +			/*
 +			 * Tag a node as congested if all the dirty pages
 +			 * scanned were backed by a congested BDI and
 +			 * wait_iff_congested will stall.
 +			 */
 +			if (sc->nr.dirty && sc->nr.dirty == sc->nr.congested)
 +				set_bit(PGDAT_CONGESTED, &pgdat->flags);
 +
 +			/* Allow kswapd to start writing pages during reclaim.*/
 +			if (sc->nr.unqueued_dirty == sc->nr.file_taken)
 +				set_bit(PGDAT_DIRTY, &pgdat->flags);
 +
 +			/*
 +			 * If kswapd scans pages marked marked for immediate
 +			 * reclaim and under writeback (nr_immediate), it
 +			 * implies that pages are cycling through the LRU
 +			 * faster than they are written so also forcibly stall.
 +			 */
 +			if (sc->nr.immediate)
 +				congestion_wait(BLK_RW_ASYNC, HZ/10);
 +		}
 +
++<<<<<<< HEAD
  		/*
 -		 * If reclaim is isolating dirty pages under writeback,
 -		 * it implies that the long-lived page allocation rate
 -		 * is exceeding the page laundering rate. Either the
 -		 * global limits are not being effective at throttling
 -		 * processes due to the page distribution throughout
 -		 * zones or there is heavy usage of a slow backing
 -		 * device. The only option is to throttle from reclaim
 -		 * context which is not ideal as there is no guarantee
 -		 * the dirtying process is throttled in the same way
 -		 * balance_dirty_pages() manages.
 -		 *
 -		 * Once a node is flagged PGDAT_WRITEBACK, kswapd will
 -		 * count the number of pages under pages flagged for
 -		 * immediate reclaim and stall if any are encountered
 -		 * in the nr_immediate check below.
 +		 * Legacy memcg will stall in page writeback so avoid forcibly
 +		 * stalling in wait_iff_congested().
  		 */
 -		if (sc->nr.writeback && sc->nr.writeback == sc->nr.taken)
 -			set_bit(PGDAT_WRITEBACK, &pgdat->flags);
 -
 +		if (!global_reclaim(sc) && sane_reclaim(sc) &&
 +		    sc->nr.dirty && sc->nr.dirty == sc->nr.congested)
 +			set_memcg_congestion(pgdat, root, true);
++=======
+ 		/* Allow kswapd to start writing pages during reclaim.*/
+ 		if (sc->nr.unqueued_dirty == sc->nr.file_taken)
+ 			set_bit(PGDAT_DIRTY, &pgdat->flags);
++>>>>>>> 1b05117df78e (mm: vmscan: harmonize writeback congestion tracking for nodes & memcgs)
  
  		/*
 -		 * If kswapd scans pages marked marked for immediate
 -		 * reclaim and under writeback (nr_immediate), it
 -		 * implies that pages are cycling through the LRU
 -		 * faster than they are written so also forcibly stall.
 +		 * Stall direct reclaim for IO completions if underlying BDIs
 +		 * and node is congested. Allow kswapd to continue until it
 +		 * starts encountering unqueued dirty pages or cycling through
 +		 * the LRU too quickly.
  		 */
 -		if (sc->nr.immediate)
 -			congestion_wait(BLK_RW_ASYNC, HZ/10);
 -	}
 -
 +		if (!sc->hibernation_mode && !current_is_kswapd() &&
 +		   current_may_throttle() && pgdat_memcg_congested(pgdat, root))
 +			wait_iff_congested(BLK_RW_ASYNC, HZ/10);
 +
++<<<<<<< HEAD
 +	} while (should_continue_reclaim(pgdat, sc->nr_reclaimed - nr_reclaimed,
 +					 sc));
++=======
+ 	/*
+ 	 * Tag a node/memcg as congested if all the dirty pages
+ 	 * scanned were backed by a congested BDI and
+ 	 * wait_iff_congested will stall.
+ 	 *
+ 	 * Legacy memcg will stall in page writeback so avoid forcibly
+ 	 * stalling in wait_iff_congested().
+ 	 */
+ 	if ((current_is_kswapd() ||
+ 	     (cgroup_reclaim(sc) && writeback_throttling_sane(sc))) &&
+ 	    sc->nr.dirty && sc->nr.dirty == sc->nr.congested)
+ 		set_bit(LRUVEC_CONGESTED, &target_lruvec->flags);
+ 
+ 	/*
+ 	 * Stall direct reclaim for IO completions if underlying BDIs
+ 	 * and node is congested. Allow kswapd to continue until it
+ 	 * starts encountering unqueued dirty pages or cycling through
+ 	 * the LRU too quickly.
+ 	 */
+ 	if (!current_is_kswapd() && current_may_throttle() &&
+ 	    !sc->hibernation_mode &&
+ 	    test_bit(LRUVEC_CONGESTED, &target_lruvec->flags))
+ 		wait_iff_congested(BLK_RW_ASYNC, HZ/10);
+ 
+ 	if (should_continue_reclaim(pgdat, sc->nr_reclaimed - nr_reclaimed,
+ 				    sc))
+ 		goto again;
++>>>>>>> 1b05117df78e (mm: vmscan: harmonize writeback congestion tracking for nodes & memcgs)
  
  	/*
  	 * Kswapd gives up on balancing particular nodes after too
diff --git a/include/linux/memcontrol.h b/include/linux/memcontrol.h
index b3eb17a7bec8..f96f585e5e42 100644
--- a/include/linux/memcontrol.h
+++ b/include/linux/memcontrol.h
@@ -140,9 +140,6 @@ struct mem_cgroup_per_node {
 	unsigned long		usage_in_excess;/* Set to the value by which */
 						/* the soft limit is exceeded*/
 	bool			on_tree;
-	bool			congested;	/* memcg has many dirty pages */
-						/* backed by a congested BDI */
-
 	struct mem_cgroup	*memcg;		/* Back pointer, we cannot */
 						/* use container_of	   */
 	/*
@@ -414,6 +411,9 @@ static inline struct lruvec *mem_cgroup_lruvec(struct mem_cgroup *memcg,
 		goto out;
 	}
 
+	if (!memcg)
+		memcg = root_mem_cgroup;
+
 	mz = mem_cgroup_nodeinfo(memcg, pgdat->node_id);
 	lruvec = &mz->lruvec;
 out:
diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index c7d5827d7de4..cd45a845f8a4 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -316,6 +316,12 @@ struct zone_reclaim_stat {
 	unsigned long		recent_scanned[2];
 };
 
+enum lruvec_flags {
+	LRUVEC_CONGESTED,		/* lruvec has many dirty pages
+					 * backed by a congested BDI
+					 */
+};
+
 struct lruvec {
 	struct list_head		lists[NR_LRU_LISTS];
 	struct zone_reclaim_stat	reclaim_stat;
@@ -323,6 +329,8 @@ struct lruvec {
 	atomic_long_t			inactive_age;
 	/* Refaults at the time of last reclaim cycle */
 	unsigned long			refaults;
+	/* Various lruvec state flags (enum lruvec_flags) */
+	unsigned long			flags;
 #ifdef CONFIG_MEMCG
 	struct pglist_data *pgdat;
 #endif
@@ -593,9 +601,6 @@ struct zone {
 } ____cacheline_internodealigned_in_smp;
 
 enum pgdat_flags {
-	PGDAT_CONGESTED,		/* pgdat has many dirty pages backed by
-					 * a congested BDI
-					 */
 	PGDAT_DIRTY,			/* reclaim scanning has recently found
 					 * many dirty file pages at the tail
 					 * of the LRU.
* Unmerged path mm/vmscan.c
