net: atlantic: A2: phy loopback support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Dmitry Bogdanov <dbogdanov@marvell.com>
commit ecab78703f3b87b3e21160719b08819c7cc0f4e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ecab7870.failed

This patch adds the phy loopback support on A2.

	Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ecab78703f3b87b3e21160719b08819c7cc0f4e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
index a64230722f5c,e53ba7bfaf61..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
@@@ -583,6 -824,46 +583,49 @@@ static void aq_set_msg_level(struct net
  	aq_nic->msg_enable = data;
  }
  
++<<<<<<< HEAD
++=======
+ static u32 aq_ethtool_get_priv_flags(struct net_device *ndev)
+ {
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 
+ 	return aq_nic->aq_nic_cfg.priv_flags;
+ }
+ 
+ static int aq_ethtool_set_priv_flags(struct net_device *ndev, u32 flags)
+ {
+ 	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+ 	struct aq_nic_cfg_s *cfg;
+ 	u32 priv_flags;
+ 	int ret = 0;
+ 
+ 	cfg = aq_nic_get_cfg(aq_nic);
+ 	priv_flags = cfg->priv_flags;
+ 
+ 	if (flags & ~AQ_PRIV_FLAGS_MASK)
+ 		return -EOPNOTSUPP;
+ 
+ 	if (hweight32((flags | priv_flags) & AQ_HW_LOOPBACK_MASK) > 1) {
+ 		netdev_info(ndev, "Can't enable more than one loopback simultaneously\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	cfg->priv_flags = flags;
+ 
+ 	if ((priv_flags ^ flags) & BIT(AQ_HW_LOOPBACK_DMA_NET)) {
+ 		if (netif_running(ndev)) {
+ 			dev_close(ndev);
+ 
+ 			dev_open(ndev, NULL);
+ 		}
+ 	} else if ((priv_flags ^ flags) & AQ_HW_LOOPBACK_MASK) {
+ 		ret = aq_nic_set_loopback(aq_nic);
+ 	}
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> ecab78703f3b (net: atlantic: A2: phy loopback support)
  const struct ethtool_ops aq_ethtool_ops = {
  	.supported_coalesce_params = ETHTOOL_COALESCE_USECS |
  				     ETHTOOL_COALESCE_MAX_FRAMES,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index b7e5ce0d7af5,b023c3324a59..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -1114,6 -1556,31 +1114,34 @@@ static int hw_atl_b0_hw_vlan_ctrl(struc
  	return aq_hw_err_from_flags(self);
  }
  
++<<<<<<< HEAD
++=======
+ int hw_atl_b0_set_loopback(struct aq_hw_s *self, u32 mode, bool enable)
+ {
+ 	switch (mode) {
+ 	case AQ_HW_LOOPBACK_DMA_SYS:
+ 		hw_atl_tpb_tx_dma_sys_lbk_en_set(self, enable);
+ 		hw_atl_rpb_dma_sys_lbk_set(self, enable);
+ 		break;
+ 	case AQ_HW_LOOPBACK_PKT_SYS:
+ 		hw_atl_tpo_tx_pkt_sys_lbk_en_set(self, enable);
+ 		hw_atl_rpf_tpo_to_rpf_sys_lbk_set(self, enable);
+ 		break;
+ 	case AQ_HW_LOOPBACK_DMA_NET:
+ 		hw_atl_rpf_vlan_prom_mode_en_set(self, enable);
+ 		hw_atl_rpfl2promiscuous_mode_en_set(self, enable);
+ 		hw_atl_tpb_tx_tx_clk_gate_en_set(self, !enable);
+ 		hw_atl_tpb_tx_dma_net_lbk_en_set(self, enable);
+ 		hw_atl_rpb_dma_net_lbk_set(self, enable);
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> ecab78703f3b (net: atlantic: A2: phy loopback support)
  const struct aq_hw_ops hw_atl_ops_b0 = {
  	.hw_soft_reset        = hw_atl_utils_soft_reset,
  	.hw_prepare           = hw_atl_utils_initfw,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
index b1c0b6850e60,66d158900141..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
@@@ -36,4 -34,44 +36,47 @@@ extern const struct aq_hw_ops hw_atl_op
  
  #define hw_atl_ops_b1 hw_atl_ops_b0
  
++<<<<<<< HEAD
++=======
+ int hw_atl_b0_hw_rss_hash_set(struct aq_hw_s *self,
+ 			      struct aq_rss_parameters *rss_params);
+ int hw_atl_b0_hw_offload_set(struct aq_hw_s *self,
+ 			     struct aq_nic_cfg_s *aq_nic_cfg);
+ 
+ int hw_atl_b0_hw_ring_tx_start(struct aq_hw_s *self, struct aq_ring_s *ring);
+ int hw_atl_b0_hw_ring_rx_start(struct aq_hw_s *self, struct aq_ring_s *ring);
+ 
+ int hw_atl_b0_hw_ring_rx_init(struct aq_hw_s *self, struct aq_ring_s *aq_ring,
+ 			      struct aq_ring_param_s *aq_ring_param);
+ int hw_atl_b0_hw_ring_rx_fill(struct aq_hw_s *self, struct aq_ring_s *ring,
+ 			      unsigned int sw_tail_old);
+ int hw_atl_b0_hw_ring_rx_receive(struct aq_hw_s *self, struct aq_ring_s *ring);
+ 
+ int hw_atl_b0_hw_ring_tx_init(struct aq_hw_s *self, struct aq_ring_s *aq_ring,
+ 			      struct aq_ring_param_s *aq_ring_param);
+ int hw_atl_b0_hw_ring_tx_xmit(struct aq_hw_s *self, struct aq_ring_s *ring,
+ 			      unsigned int frags);
+ int hw_atl_b0_hw_ring_tx_head_update(struct aq_hw_s *self,
+ 				     struct aq_ring_s *ring);
+ 
+ int hw_atl_b0_hw_ring_tx_stop(struct aq_hw_s *self, struct aq_ring_s *ring);
+ int hw_atl_b0_hw_ring_rx_stop(struct aq_hw_s *self, struct aq_ring_s *ring);
+ 
+ void hw_atl_b0_hw_init_rx_rss_ctrl1(struct aq_hw_s *self);
+ 
+ int hw_atl_b0_hw_mac_addr_set(struct aq_hw_s *self, u8 *mac_addr);
+ 
+ int hw_atl_b0_set_fc(struct aq_hw_s *self, u32 fc, u32 tc);
+ int hw_atl_b0_set_loopback(struct aq_hw_s *self, u32 mode, bool enable);
+ 
+ int hw_atl_b0_hw_start(struct aq_hw_s *self);
+ 
+ int hw_atl_b0_hw_irq_enable(struct aq_hw_s *self, u64 mask);
+ int hw_atl_b0_hw_irq_disable(struct aq_hw_s *self, u64 mask);
+ int hw_atl_b0_hw_irq_read(struct aq_hw_s *self, u64 *mask);
+ 
+ int hw_atl_b0_hw_packet_filter_set(struct aq_hw_s *self,
+ 				   unsigned int packet_filter);
+ 
++>>>>>>> ecab78703f3b (net: atlantic: A2: phy loopback support)
  #endif /* HW_ATL_B0_H */
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
