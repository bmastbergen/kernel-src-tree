fs/ext4: Make DAX mount option a tri-state

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ira Weiny <ira.weiny@intel.com>
commit 9cb20f94afcd2964944f9468e38da736ee855b19
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9cb20f94.failed

We add 'always', 'never', and 'inode' (default).  '-o dax' continues to
operate the same which is equivalent to 'always'.  This new
functionality is limited to ext4 only.

Specifically we introduce a 2nd DAX mount flag EXT4_MOUNT2_DAX_NEVER and set
it and EXT4_MOUNT_DAX_ALWAYS appropriately for the mode.

We also force EXT4_MOUNT2_DAX_NEVER if !CONFIG_FS_DAX.

Finally, EXT4_MOUNT2_DAX_INODE is used solely to detect if the user
specified that option for printing.

	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Ira Weiny <ira.weiny@intel.com>

Link: https://lore.kernel.org/r/20200528150003.828793-7-ira.weiny@intel.com
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 9cb20f94afcd2964944f9468e38da736ee855b19)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
#	fs/ext4/super.c
diff --cc fs/ext4/inode.c
index 8e7de233296c,68fac9289109..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -4724,9 -4398,11 +4724,15 @@@ int ext4_get_inode_loc(struct inode *in
  		!ext4_test_inode_state(inode, EXT4_STATE_XATTR));
  }
  
 -static bool ext4_should_enable_dax(struct inode *inode)
 +static bool ext4_should_use_dax(struct inode *inode)
  {
++<<<<<<< HEAD
 +	if (!test_opt(inode->i_sb, DAX))
++=======
+ 	struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
+ 
+ 	if (test_opt2(inode->i_sb, DAX_NEVER))
++>>>>>>> 9cb20f94afcd (fs/ext4: Make DAX mount option a tri-state)
  		return false;
  	if (!S_ISREG(inode->i_mode))
  		return false;
diff --cc fs/ext4/super.c
index 45de20b6730f,5e056aa20ce9..000000000000
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@@ -1769,7 -1780,13 +1774,17 @@@ static const struct mount_opts 
  	{Opt_min_batch_time, 0, MOPT_GTE0},
  	{Opt_inode_readahead_blks, 0, MOPT_GTE0},
  	{Opt_init_itable, 0, MOPT_GTE0},
++<<<<<<< HEAD
 +	{Opt_dax, EXT4_MOUNT_DAX, MOPT_SET},
++=======
+ 	{Opt_dax, EXT4_MOUNT_DAX_ALWAYS, MOPT_SET | MOPT_SKIP},
+ 	{Opt_dax_always, EXT4_MOUNT_DAX_ALWAYS,
+ 		MOPT_EXT4_ONLY | MOPT_SET | MOPT_SKIP},
+ 	{Opt_dax_inode, EXT4_MOUNT2_DAX_INODE,
+ 		MOPT_EXT4_ONLY | MOPT_SET | MOPT_SKIP},
+ 	{Opt_dax_never, EXT4_MOUNT2_DAX_NEVER,
+ 		MOPT_EXT4_ONLY | MOPT_SET | MOPT_SKIP},
++>>>>>>> 9cb20f94afcd (fs/ext4: Make DAX mount option a tri-state)
  	{Opt_stripe, 0, MOPT_GTE0},
  	{Opt_resuid, 0, MOPT_GTE0},
  	{Opt_resgid, 0, MOPT_GTE0},
@@@ -5350,10 -5477,16 +5395,23 @@@ static int ext4_remount(struct super_bl
  		goto restore_opts;
  	}
  
++<<<<<<< HEAD
 +	if ((sbi->s_mount_opt ^ old_opts.s_mount_opt) & EXT4_MOUNT_DAX) {
 +		ext4_msg(sb, KERN_WARNING, "warning: refusing change of "
 +			"dax flag with busy inodes while remounting");
 +		sbi->s_mount_opt ^= EXT4_MOUNT_DAX;
++=======
+ 	if ((sbi->s_mount_opt ^ old_opts.s_mount_opt) & EXT4_MOUNT_DAX_ALWAYS ||
+ 	    (sbi->s_mount_opt2 ^ old_opts.s_mount_opt2) & EXT4_MOUNT2_DAX_NEVER ||
+ 	    (sbi->s_mount_opt2 ^ old_opts.s_mount_opt2) & EXT4_MOUNT2_DAX_INODE) {
+ 		ext4_msg(sb, KERN_WARNING, "warning: refusing change of "
+ 			"dax mount option with busy inodes while remounting");
+ 		sbi->s_mount_opt &= ~EXT4_MOUNT_DAX_ALWAYS;
+ 		sbi->s_mount_opt |= old_opts.s_mount_opt & EXT4_MOUNT_DAX_ALWAYS;
+ 		sbi->s_mount_opt2 &= ~(EXT4_MOUNT2_DAX_NEVER | EXT4_MOUNT2_DAX_INODE);
+ 		sbi->s_mount_opt2 |= old_opts.s_mount_opt2 &
+ 				     (EXT4_MOUNT2_DAX_NEVER | EXT4_MOUNT2_DAX_INODE);
++>>>>>>> 9cb20f94afcd (fs/ext4: Make DAX mount option a tri-state)
  	}
  
  	if (sbi->s_mount_flags & EXT4_MF_FS_ABORTED)
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 3fa62516bbdb..6bf2763046b1 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -1151,6 +1151,8 @@ struct ext4_inode_info {
 						      blocks */
 #define EXT4_MOUNT2_HURD_COMPAT		0x00000004 /* Support HURD-castrated
 						      file systems */
+#define EXT4_MOUNT2_DAX_NEVER		0x00000008 /* Do not allow Direct Access */
+#define EXT4_MOUNT2_DAX_INODE		0x00000010 /* For printing options only */
 
 #define EXT4_MOUNT2_EXPLICIT_JOURNAL_CHECKSUM	0x00000008 /* User explicitly
 						specified journal checksum */
* Unmerged path fs/ext4/inode.c
* Unmerged path fs/ext4/super.c
