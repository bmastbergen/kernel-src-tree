powerpc/xmon: Move insertion of breakpoint for xol'ing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jordan Niethe <jniethe5@gmail.com>
commit 7fccfcfba04f9cb46438f368755d368f6c57f3a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7fccfcfb.failed

When a new breakpoint is created, the second instruction of that
breakpoint is patched with a trap instruction. This assumes the length
of the instruction is always the same. In preparation for prefixed
instructions, remove this assumption. Insert the trap instruction at the
same time the first instruction is inserted.

	Signed-off-by: Jordan Niethe <jniethe5@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Reviewed-by: Alistair Popple <alistair@popple.id.au>
Link: https://lore.kernel.org/r/20200506034050.24806-20-jniethe5@gmail.com
(cherry picked from commit 7fccfcfba04f9cb46438f368755d368f6c57f3a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/xmon/xmon.c
diff --cc arch/powerpc/xmon/xmon.c
index 3ba3f8df7d8d,00b24f357c2b..000000000000
--- a/arch/powerpc/xmon/xmon.c
+++ b/arch/powerpc/xmon/xmon.c
@@@ -820,8 -877,7 +820,12 @@@ static struct bpt *new_breakpoint(unsig
  	for (bp = bpts; bp < &bpts[NBPTS]; ++bp) {
  		if (!bp->enabled && atomic_read(&bp->ref_count) == 0) {
  			bp->address = a;
++<<<<<<< HEAD
 +			bp->instr = bpt_table + ((bp - bpts) * BPT_WORDS);
 +			patch_instruction(bp->instr + 1, bpinstr);
++=======
+ 			bp->instr = (void *)(bpt_table + ((bp - bpts) * BPT_WORDS));
++>>>>>>> 7fccfcfba04f (powerpc/xmon: Move insertion of breakpoint for xol'ing)
  			return bp;
  		}
  	}
@@@ -853,10 -909,12 +857,12 @@@ static void insert_bpts(void
  			continue;
  		}
  		patch_instruction(bp->instr, instr);
+ 		patch_instruction((void *)bp->instr + ppc_inst_len(instr),
+ 				  ppc_inst(bpinstr));
  		if (bp->enabled & BP_CIABR)
  			continue;
 -		if (patch_instruction((struct ppc_inst *)bp->address,
 -				      ppc_inst(bpinstr)) != 0) {
 +		if (patch_instruction((unsigned int *)bp->address,
 +							bpinstr) != 0) {
  			printf("Couldn't write instruction at %lx, "
  			       "disabling breakpoint there\n", bp->address);
  			bp->enabled &= ~BP_TRAP;
* Unmerged path arch/powerpc/xmon/xmon.c
