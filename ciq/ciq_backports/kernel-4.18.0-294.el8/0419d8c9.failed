net/mlx5e: kTLS, Add kTLS RX resync support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 0419d8c9d8f8d825576a41b2bb1e6043f34d1ae0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0419d8c9.failed

Implement the RX resync procedure, using the TLS async resync API.

The HW offload of TLS decryption in RX side might get out-of-sync
due to out-of-order reception of packets.
This requires SW intervention to update the HW context and get it
back in-sync.

Performance:
CPU: Intel(R) Xeon(R) CPU E5-2687W v4 @ 3.00GHz, 24 cores, HT off
NIC: ConnectX-6 Dx 100GbE dual port

Goodput (app-layer throughput) comparison:
+---------------+-------+-------+---------+
| # connections |   1   |   4   |    8    |
+---------------+-------+-------+---------+
| SW (Gbps)     |  7.26 | 24.70 |   50.30 |
+---------------+-------+-------+---------+
| HW (Gbps)     | 18.50 | 64.30 |   92.90 |
+---------------+-------+-------+---------+
| Speedup       | 2.55x | 2.56x | 1.85x * |
+---------------+-------+-------+---------+

* After linerate is reached, diff is observed in CPU util.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 0419d8c9d8f8d825576a41b2bb1e6043f34d1ae0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_utils.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
index 5bd77669337b,e9d4a61b6bbb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
@@@ -8,6 -8,16 +8,19 @@@
  
  #define INL_HDR_START_SZ (sizeof(((struct mlx5_wqe_eth_seg *)NULL)->inline_hdr.start))
  
++<<<<<<< HEAD
++=======
+ enum mlx5e_icosq_wqe_type {
+ 	MLX5E_ICOSQ_WQE_NOP,
+ 	MLX5E_ICOSQ_WQE_UMR_RX,
+ #ifdef CONFIG_MLX5_EN_TLS
+ 	MLX5E_ICOSQ_WQE_UMR_TLS,
+ 	MLX5E_ICOSQ_WQE_SET_PSV_TLS,
+ 	MLX5E_ICOSQ_WQE_GET_PSV_TLS,
+ #endif
+ };
+ 
++>>>>>>> 0419d8c9d8f8 (net/mlx5e: kTLS, Add kTLS RX resync support)
  static inline bool
  mlx5e_wqc_has_room_for(struct mlx5_wq_cyc *wq, u16 cc, u16 pc, u16 n)
  {
@@@ -109,6 -119,14 +122,17 @@@ struct mlx5e_icosq_wqe_info 
  		struct {
  			struct mlx5e_rq *rq;
  		} umr;
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_MLX5_EN_TLS
+ 		struct {
+ 			struct mlx5e_ktls_offload_context_rx *priv_rx;
+ 		} tls_set_params;
+ 		struct {
+ 			struct mlx5e_ktls_rx_resync_buf *buf;
+ 		} tls_get_params;
+ #endif
++>>>>>>> 0419d8c9d8f8 (net/mlx5e: kTLS, Add kTLS RX resync support)
  	};
  };
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
index 8970ea68d005,deec17af5a69..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
@@@ -29,10 -30,21 +29,22 @@@ static void mlx5e_ktls_del(struct net_d
  			   struct tls_context *tls_ctx,
  			   enum tls_offload_ctx_dir direction)
  {
 -	if (direction == TLS_OFFLOAD_CTX_DIR_TX)
 -		mlx5e_ktls_del_tx(netdev, tls_ctx);
 -	else
 -		mlx5e_ktls_del_rx(netdev, tls_ctx);
 -}
 +	if (direction != TLS_OFFLOAD_CTX_DIR_TX)
 +		return;
  
++<<<<<<< HEAD
 +	mlx5e_ktls_del_tx(netdev, tls_ctx);
++=======
+ static int mlx5e_ktls_resync(struct net_device *netdev,
+ 			     struct sock *sk, u32 seq, u8 *rcd_sn,
+ 			     enum tls_offload_ctx_dir direction)
+ {
+ 	if (unlikely(direction != TLS_OFFLOAD_CTX_DIR_RX))
+ 		return -EOPNOTSUPP;
+ 
+ 	mlx5e_ktls_rx_resync(netdev, sk, seq, rcd_sn);
+ 	return 0;
++>>>>>>> 0419d8c9d8f8 (net/mlx5e: kTLS, Add kTLS RX resync support)
  }
  
  static const struct tlsdev_ops mlx5e_ktls_ops = {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
index 7ce6b1c41d9b,ff4c740af10b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
@@@ -19,6 -19,12 +19,15 @@@ u16 mlx5e_ktls_get_stop_room(struct mlx
  bool mlx5e_ktls_handle_tx_skb(struct tls_context *tls_ctx, struct mlx5e_txqsq *sq,
  			      struct sk_buff *skb, int datalen,
  			      struct mlx5e_accel_tx_tls_state *state);
++<<<<<<< HEAD
++=======
+ void mlx5e_ktls_handle_rx_skb(struct mlx5e_rq *rq, struct sk_buff *skb,
+ 			      struct mlx5_cqe64 *cqe, u32 *cqe_bcnt);
+ 
+ void mlx5e_ktls_handle_ctx_completion(struct mlx5e_icosq_wqe_info *wi);
+ void mlx5e_ktls_handle_get_psv_completion(struct mlx5e_icosq_wqe_info *wi,
+ 					  struct mlx5e_icosq *sq);
++>>>>>>> 0419d8c9d8f8 (net/mlx5e: kTLS, Add kTLS RX resync support)
  
  void mlx5e_ktls_tx_handle_resync_dump_comp(struct mlx5e_txqsq *sq,
  					   struct mlx5e_tx_wqe_info *wi,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_utils.h
index d1d747cb2dcb,e5c180f2403b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_utils.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_utils.h
@@@ -23,6 -23,10 +23,13 @@@ enum 
  int mlx5e_ktls_add_tx(struct net_device *netdev, struct sock *sk,
  		      struct tls_crypto_info *crypto_info, u32 start_offload_tcp_sn);
  void mlx5e_ktls_del_tx(struct net_device *netdev, struct tls_context *tls_ctx);
++<<<<<<< HEAD
++=======
+ int mlx5e_ktls_add_rx(struct net_device *netdev, struct sock *sk,
+ 		      struct tls_crypto_info *crypto_info, u32 start_offload_tcp_sn);
+ void mlx5e_ktls_del_rx(struct net_device *netdev, struct tls_context *tls_ctx);
+ void mlx5e_ktls_rx_resync(struct net_device *netdev, struct sock *sk, u32 seq, u8 *rcd_sn);
++>>>>>>> 0419d8c9d8f8 (net/mlx5e: kTLS, Add kTLS RX resync support)
  
  struct mlx5e_set_tls_static_params_wqe {
  	struct mlx5_wqe_ctrl_seg ctrl;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 81cdab92765f,4b7c119c8946..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -572,6 -578,33 +572,36 @@@ bool mlx5e_post_rx_wqes(struct mlx5e_r
  	return !!err;
  }
  
++<<<<<<< HEAD
++=======
+ void mlx5e_free_icosq_descs(struct mlx5e_icosq *sq)
+ {
+ 	u16 sqcc;
+ 
+ 	sqcc = sq->cc;
+ 
+ 	while (sqcc != sq->pc) {
+ 		struct mlx5e_icosq_wqe_info *wi;
+ 		u16 ci;
+ 
+ 		ci = mlx5_wq_cyc_ctr2ix(&sq->wq, sqcc);
+ 		wi = &sq->db.wqe_info[ci];
+ 		sqcc += wi->num_wqebbs;
+ #ifdef CONFIG_MLX5_EN_TLS
+ 		switch (wi->wqe_type) {
+ 		case MLX5E_ICOSQ_WQE_SET_PSV_TLS:
+ 			mlx5e_ktls_handle_ctx_completion(wi);
+ 			break;
+ 		case MLX5E_ICOSQ_WQE_GET_PSV_TLS:
+ 			mlx5e_ktls_handle_get_psv_completion(wi, sq);
+ 			break;
+ 		}
+ #endif
+ 	}
+ 	sq->cc = sqcc;
+ }
+ 
++>>>>>>> 0419d8c9d8f8 (net/mlx5e: kTLS, Add kTLS RX resync support)
  int mlx5e_poll_ico_cq(struct mlx5e_cq *cq)
  {
  	struct mlx5e_icosq *sq = container_of(cq, struct mlx5e_icosq, cq);
@@@ -621,15 -654,28 +651,32 @@@
  				break;
  			}
  
 -			switch (wi->wqe_type) {
 -			case MLX5E_ICOSQ_WQE_UMR_RX:
 +			if (likely(wi->opcode == MLX5_OPCODE_UMR))
  				wi->umr.rq->mpwqe.umr_completed++;
++<<<<<<< HEAD
 +			else if (unlikely(wi->opcode != MLX5_OPCODE_NOP))
++=======
+ 				break;
+ 			case MLX5E_ICOSQ_WQE_NOP:
+ 				break;
+ #ifdef CONFIG_MLX5_EN_TLS
+ 			case MLX5E_ICOSQ_WQE_UMR_TLS:
+ 				break;
+ 			case MLX5E_ICOSQ_WQE_SET_PSV_TLS:
+ 				mlx5e_ktls_handle_ctx_completion(wi);
+ 				break;
+ 			case MLX5E_ICOSQ_WQE_GET_PSV_TLS:
+ 				mlx5e_ktls_handle_get_psv_completion(wi, sq);
+ 				break;
+ #endif
+ 			default:
++>>>>>>> 0419d8c9d8f8 (net/mlx5e: kTLS, Add kTLS RX resync support)
  				netdev_WARN_ONCE(cq->channel->netdev,
 -						 "Bad WQE type in ICOSQ WQE info: 0x%x\n",
 -						 wi->wqe_type);
 -			}
 +						 "Bad OPCODE in ICOSQ WQE info: 0x%x\n",
 +						 wi->opcode);
 +
  		} while (!last_wqe);
 +
  	} while ((++i < MLX5E_TX_CQ_POLL_BUDGET) && (cqe = mlx5_cqwq_get_cqe(&cq->wq)));
  
  	sq->cc = sqcc;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_rx.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
index bbaca257afda..c82dfd9d8268 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_tx.c
@@ -171,7 +171,7 @@ post_static_params(struct mlx5e_txqsq *sq,
 	pi = mlx5e_txqsq_get_next_pi(sq, num_wqebbs);
 	wqe = MLX5E_TLS_FETCH_SET_STATIC_PARAMS_WQE(sq, pi);
 	mlx5e_ktls_build_static_params(wqe, sq->pc, sq->sqn, &priv_tx->crypto_info,
-				       priv_tx->tisn, priv_tx->key_id, fence,
+				       priv_tx->tisn, priv_tx->key_id, 0, fence,
 				       TLS_OFFLOAD_CTX_DIR_TX);
 	tx_fill_wi(sq, pi, num_wqebbs, 0, NULL);
 	sq->pc += num_wqebbs;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.c
index edf404eaa275..206b67266949 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.c
@@ -22,7 +22,7 @@ enum {
 static void
 fill_static_params(struct mlx5_wqe_tls_static_params_seg *params,
 		   struct tls12_crypto_info_aes_gcm_128 *info,
-		   u32 key_id)
+		   u32 key_id, u32 resync_tcp_sn)
 {
 	char *initial_rn, *gcm_iv;
 	u16 salt_sz, rec_seq_sz;
@@ -47,6 +47,7 @@ fill_static_params(struct mlx5_wqe_tls_static_params_seg *params,
 	MLX5_SET(tls_static_params, ctx, const_2, 2);
 	MLX5_SET(tls_static_params, ctx, encryption_standard,
 		 MLX5E_ENCRYPTION_STANDARD_TLS);
+	MLX5_SET(tls_static_params, ctx, resync_tcp_sn, resync_tcp_sn);
 	MLX5_SET(tls_static_params, ctx, dek_index, key_id);
 }
 
@@ -54,7 +55,7 @@ void
 mlx5e_ktls_build_static_params(struct mlx5e_set_tls_static_params_wqe *wqe,
 			       u16 pc, u32 sqn,
 			       struct tls12_crypto_info_aes_gcm_128 *info,
-			       u32 tis_tir_num, u32 key_id,
+			       u32 tis_tir_num, u32 key_id, u32 resync_tcp_sn,
 			       bool fence, enum tls_offload_ctx_dir direction)
 {
 	struct mlx5_wqe_umr_ctrl_seg *ucseg = &wqe->uctrl;
@@ -72,7 +73,7 @@ mlx5e_ktls_build_static_params(struct mlx5e_set_tls_static_params_wqe *wqe,
 	ucseg->flags = MLX5_UMR_INLINE;
 	ucseg->bsf_octowords = cpu_to_be16(MLX5_ST_SZ_BYTES(tls_static_params) / 16);
 
-	fill_static_params(&wqe->params, info, key_id);
+	fill_static_params(&wqe->params, info, key_id, resync_tcp_sn);
 }
 
 static void
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_txrx.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_accel/ktls_utils.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
