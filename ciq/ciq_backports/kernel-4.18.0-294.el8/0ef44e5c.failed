net: phy: add support for a common probe between shared PHYs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Antoine Tenart <antoine.tenart@bootlin.com>
commit 0ef44e5cab8dbf0a0327871b48fe7c8425d0d885
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0ef44e5c.failed

Shared PHYs (PHYs in the same hardware package) may have shared
registers and their drivers would usually need to share information.
There is currently a way to have a shared (part of the) init, by using
phy_package_init_once(). This patch extends the logic to share parts of
the probe to allow sharing the initialization of locks or resources
retrieval.

	Signed-off-by: Antoine Tenart <antoine.tenart@bootlin.com>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0ef44e5cab8dbf0a0327871b48fe7c8425d0d885)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/phy.h
diff --cc include/linux/phy.h
index 8aeac466a2a8,6fb8f302978d..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -231,6 -224,29 +231,32 @@@ struct mdio_bus_stats 
  	struct u64_stats_sync syncp;
  };
  
++<<<<<<< HEAD
++=======
+ /* Represents a shared structure between different phydev's in the same
+  * package, for example a quad PHY. See phy_package_join() and
+  * phy_package_leave().
+  */
+ struct phy_package_shared {
+ 	int addr;
+ 	refcount_t refcnt;
+ 	unsigned long flags;
+ 	size_t priv_size;
+ 
+ 	/* private data pointer */
+ 	/* note that this pointer is shared between different phydevs and
+ 	 * the user has to take care of appropriate locking. It is allocated
+ 	 * and freed automatically by phy_package_join() and
+ 	 * phy_package_leave().
+ 	 */
+ 	void *priv;
+ };
+ 
+ /* used as bit number in atomic bitops */
+ #define PHY_SHARED_F_INIT_DONE  0
+ #define PHY_SHARED_F_PROBE_DONE 1
+ 
++>>>>>>> 0ef44e5cab8d (net: phy: add support for a common probe between shared PHYs)
  /*
   * The Bus class for PHYs.  Devices which provide access to
   * PHYs should register using this structure
@@@ -1493,6 -1525,69 +1519,72 @@@ static inline int phy_ethtool_get_stats
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static inline int phy_package_read(struct phy_device *phydev, u32 regnum)
+ {
+ 	struct phy_package_shared *shared = phydev->shared;
+ 
+ 	if (!shared)
+ 		return -EIO;
+ 
+ 	return mdiobus_read(phydev->mdio.bus, shared->addr, regnum);
+ }
+ 
+ static inline int __phy_package_read(struct phy_device *phydev, u32 regnum)
+ {
+ 	struct phy_package_shared *shared = phydev->shared;
+ 
+ 	if (!shared)
+ 		return -EIO;
+ 
+ 	return __mdiobus_read(phydev->mdio.bus, shared->addr, regnum);
+ }
+ 
+ static inline int phy_package_write(struct phy_device *phydev,
+ 				    u32 regnum, u16 val)
+ {
+ 	struct phy_package_shared *shared = phydev->shared;
+ 
+ 	if (!shared)
+ 		return -EIO;
+ 
+ 	return mdiobus_write(phydev->mdio.bus, shared->addr, regnum, val);
+ }
+ 
+ static inline int __phy_package_write(struct phy_device *phydev,
+ 				      u32 regnum, u16 val)
+ {
+ 	struct phy_package_shared *shared = phydev->shared;
+ 
+ 	if (!shared)
+ 		return -EIO;
+ 
+ 	return __mdiobus_write(phydev->mdio.bus, shared->addr, regnum, val);
+ }
+ 
+ static inline bool __phy_package_set_once(struct phy_device *phydev,
+ 					  unsigned int b)
+ {
+ 	struct phy_package_shared *shared = phydev->shared;
+ 
+ 	if (!shared)
+ 		return false;
+ 
+ 	return !test_and_set_bit(b, &shared->flags);
+ }
+ 
+ static inline bool phy_package_init_once(struct phy_device *phydev)
+ {
+ 	return __phy_package_set_once(phydev, PHY_SHARED_F_INIT_DONE);
+ }
+ 
+ static inline bool phy_package_probe_once(struct phy_device *phydev)
+ {
+ 	return __phy_package_set_once(phydev, PHY_SHARED_F_PROBE_DONE);
+ }
+ 
++>>>>>>> 0ef44e5cab8d (net: phy: add support for a common probe between shared PHYs)
  extern struct bus_type mdio_bus_type;
  
  struct mdio_board_info {
* Unmerged path include/linux/phy.h
