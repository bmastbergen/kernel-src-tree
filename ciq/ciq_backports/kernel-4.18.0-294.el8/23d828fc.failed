gfs2: rename variable error to ret in gfs2_evict_inode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Bob Peterson <rpeterso@redhat.com>
commit 23d828fc3f1e309bbc23bab817e6b5c40b06d9b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/23d828fc.failed

Function gfs2_evict_inode is too big and unreadable. This patch is just
a baby step toward improving that. This first step just renames variable
error to ret. This will help make future patches more readable.

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 23d828fc3f1e309bbc23bab817e6b5c40b06d9b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/super.c
diff --cc fs/gfs2/super.c
index 7ef6d48f35a7,ab08b9a1102c..000000000000
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@@ -1392,12 -1397,10 +1392,12 @@@ out_delete
  		}
  	}
  
 +	/* Case 1 starts here */
 +
  	if (S_ISDIR(inode->i_mode) &&
  	    (ip->i_diskflags & GFS2_DIF_EXHASH)) {
- 		error = gfs2_dir_exhash_dealloc(ip);
- 		if (error)
+ 		ret = gfs2_dir_exhash_dealloc(ip);
+ 		if (ret)
  			goto out_unlock;
  	}
  
@@@ -1433,9 -1436,8 +1433,14 @@@ out_truncate
  	write_inode_now(inode, 1);
  	gfs2_ail_flush(ip->i_gl, 0);
  
++<<<<<<< HEAD
 +	/* Case 2 starts here */
 +	error = gfs2_trans_begin(sdp, 0, sdp->sd_jdesc->jd_blocks);
 +	if (error)
++=======
+ 	ret = gfs2_trans_begin(sdp, 0, sdp->sd_jdesc->jd_blocks);
+ 	if (ret)
++>>>>>>> 23d828fc3f1e (gfs2: rename variable error to ret in gfs2_evict_inode)
  		goto out_unlock;
  	/* Needs to be done before glock release & also in a transaction */
  	truncate_inode_pages(&inode->i_data, 0);
@@@ -1451,10 -1452,9 +1456,10 @@@ out_unlock
  		glock_clear_object(ip->i_gl, ip);
  		gfs2_glock_dq_uninit(&gh);
  	}
- 	if (error && error != GLR_TRYFAILED && error != -EROFS)
- 		fs_warn(sdp, "gfs2_evict_inode: %d\n", error);
+ 	if (ret && ret != GLR_TRYFAILED && ret != -EROFS)
+ 		fs_warn(sdp, "gfs2_evict_inode: %d\n", ret);
  out:
 +	/* Case 3 starts here */
  	truncate_inode_pages_final(&inode->i_data);
  	if (ip->i_qadata)
  		gfs2_assert_warn(sdp, ip->i_qadata->qa_ref == 0);
* Unmerged path fs/gfs2/super.c
