x86/irq/64: Remove stack overflow debug code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 117ed45485413b1977bfc638c32bf5b01d53c62b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/117ed454.failed

All stack types on x86 64-bit have guard pages now.

So there is no point in executing probabilistic overflow checks as the
guard pages are a accurate and reliable overflow prevention.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Nicolai Stange <nstange@suse.de>
	Cc: Sean Christopherson <sean.j.christopherson@intel.com>
	Cc: x86-ml <x86@kernel.org>
Link: https://lkml.kernel.org/r/20190414160146.466354762@linutronix.de
(cherry picked from commit 117ed45485413b1977bfc638c32bf5b01d53c62b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	arch/x86/kernel/irq_64.c
diff --cc arch/x86/Kconfig
index 45bca1b0716d,fd06614b09a7..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -14,8 -14,7 +14,12 @@@ config X86_3
  	select ARCH_WANT_IPC_PARSE_VERSION
  	select CLKSRC_I8253
  	select CLONE_BACKWARDS
++<<<<<<< HEAD
 +	select HAVE_AOUT
 +	select HAVE_GENERIC_DMA_COHERENT
++=======
+ 	select HAVE_DEBUG_STACKOVERFLOW
++>>>>>>> 117ed4548541 (x86/irq/64: Remove stack overflow debug code)
  	select MODULES_USE_ELF_REL
  	select OLD_SIGACTION
  
diff --cc arch/x86/kernel/irq_64.c
index 326ee25a4005,6bf6517a05bb..000000000000
--- a/arch/x86/kernel/irq_64.c
+++ b/arch/x86/kernel/irq_64.c
@@@ -24,65 -26,8 +24,66 @@@
  DEFINE_PER_CPU_PAGE_ALIGNED(struct irq_stack, irq_stack_backing_store) __visible;
  DECLARE_INIT_PER_CPU(irq_stack_backing_store);
  
++<<<<<<< HEAD
 +int sysctl_panic_on_stackoverflow;
 +
 +/*
 + * Probabilistic stack overflow check:
 + *
 + * Regular device interrupts can enter on the following stacks:
 + *
 + * - User stack
 + *
 + * - Kernel task stack
 + *
 + * - Interrupt stack if a device driver reenables interrupts
 + *   which should only happen in really old drivers.
 + *
 + * - Debug IST stack
 + *
 + * All other contexts are invalid.
 + */
 +static inline void stack_overflow_check(struct pt_regs *regs)
 +{
 +#ifdef CONFIG_DEBUG_STACKOVERFLOW
 +#define STACK_MARGIN	128
 +	struct orig_ist *oist;
 +	u64 irq_stack_top, irq_stack_bottom;
 +	u64 estack_top, estack_bottom;
 +	u64 curbase = (u64)task_stack_page(current);
 +
 +	if (user_mode(regs))
 +		return;
 +
 +	if (regs->sp >= curbase + sizeof(struct pt_regs) + STACK_MARGIN &&
 +	    regs->sp <= curbase + THREAD_SIZE)
 +		return;
 +
 +	irq_stack_top = (u64)__this_cpu_read(hardirq_stack_ptr);
 +	irq_stack_bottom = irq_stack_top - IRQ_STACK_SIZE + STACK_MARGIN;
 +	if (regs->sp >= irq_stack_bottom && regs->sp <= irq_stack_top)
 +		return;
 +
 +	oist = this_cpu_ptr(&orig_ist);
 +	estack_top = (u64)oist->ist[DEBUG_STACK];
 +	estack_bottom = estack_top - DEBUG_STKSZ + STACK_MARGIN;
 +	if (regs->sp >= estack_bottom && regs->sp <= estack_top)
 +		return;
 +
 +	WARN_ONCE(1, "do_IRQ(): %s has overflown the kernel stack (cur:%Lx,sp:%lx, irq stack:%Lx-%Lx, exception stack: %Lx-%Lx, ip:%pF)\n",
 +		current->comm, curbase, regs->sp,
 +		irq_stack_bottom, irq_stack_top,
 +		estack_bottom, estack_top, (void *)regs->ip);
 +
 +	if (sysctl_panic_on_stackoverflow)
 +		panic("low stack detected by irq handler - check messages\n");
 +#endif
 +}
 +
++=======
++>>>>>>> 117ed4548541 (x86/irq/64: Remove stack overflow debug code)
  bool handle_irq(struct irq_desc *desc, struct pt_regs *regs)
  {
- 	stack_overflow_check(regs);
- 
  	if (IS_ERR_OR_NULL(desc))
  		return false;
  
* Unmerged path arch/x86/Kconfig
* Unmerged path arch/x86/kernel/irq_64.c
