tcp_bbr: update comments to reflect pacing_margin_percent

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Neal Cardwell <ncardwell@google.com>
commit 1106a5ade15fa2effdbfb3b3a1ba560a536dbcfe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1106a5ad.failed

Recently, in commit ab408b6dc744 ("tcp: switch tcp and sch_fq to new
earliest departure time model"), the TCP BBR code switched to a new
approach of using an explicit bbr_pacing_margin_percent for shaving a
pacing rate "haircut", rather than the previous implict
approach. Update an old comment to reflect the new approach.

	Signed-off-by: Neal Cardwell <ncardwell@google.com>
	Signed-off-by: Yuchung Cheng <ycheng@google.com>
	Signed-off-by: Soheil Hassas Yeganeh <soheil@google.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1106a5ade15fa2effdbfb3b3a1ba560a536dbcfe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp_bbr.c
diff --cc net/ipv4/tcp_bbr.c
index c75c19bf9668,0f497fc49c3f..000000000000
--- a/net/ipv4/tcp_bbr.c
+++ b/net/ipv4/tcp_bbr.c
@@@ -128,6 -128,14 +128,17 @@@ static const u32 bbr_probe_rtt_mode_ms 
  /* Skip TSO below the following bandwidth (bits/sec): */
  static const int bbr_min_tso_rate = 1200000;
  
++<<<<<<< HEAD
++=======
+ /* Pace at ~1% below estimated bw, on average, to reduce queue at bottleneck.
+  * In order to help drive the network toward lower queues and low latency while
+  * maintaining high utilization, the average pacing rate aims to be slightly
+  * lower than the estimated bandwidth. This is an important aspect of the
+  * design.
+  */
+ static const int bbr_pacing_margin_percent = 1;
+ 
++>>>>>>> 1106a5ade15f (tcp_bbr: update comments to reflect pacing_margin_percent)
  /* We use a high_gain value of 2/ln(2) because it's the smallest pacing gain
   * that will allow a smoothly increasing pacing rate that will double each RTT
   * and send the same number of packets per RTT that an un-paced, slow-starting
* Unmerged path net/ipv4/tcp_bbr.c
