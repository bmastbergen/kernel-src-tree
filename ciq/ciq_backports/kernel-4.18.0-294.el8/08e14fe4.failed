net_sched: sch_fq: ensure maxrate fq parameter applies to EDT flows

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 08e14fe429a07475ee9f29a283945d602e4a6d92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/08e14fe4.failed

When EDT conversion happened, fq lost the ability to enfore a maxrate
for all flows. It kept it for non EDT flows.

This commit restores the functionality.

Tested:

tc qd replace dev eth0 root fq maxrate 500Mbit
netperf -P0 -H host -- -O THROUGHPUT
489.75

Fixes: ab408b6dc744 ("tcp: switch tcp and sch_fq to new earliest departure time model")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 08e14fe429a07475ee9f29a283945d602e4a6d92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/sch_fq.c
diff --cc net/sched/sch_fq.c
index 520fc183e0d7,25a7cf6d380f..000000000000
--- a/net/sched/sch_fq.c
+++ b/net/sched/sch_fq.c
@@@ -479,28 -469,31 +479,38 @@@ begin
  		goto begin;
  	}
  	prefetch(&skb->end);
- 	f->credit -= qdisc_pkt_len(skb);
+ 	plen = qdisc_pkt_len(skb);
+ 	f->credit -= plen;
  
  	if (!q->rate_enable)
++<<<<<<< HEAD
 +		goto out;
 +
 +	/* Do not pace locally generated ack packets */
 +	if (skb_is_tcp_pure_ack(skb))
++=======
++>>>>>>> 08e14fe429a0 (net_sched: sch_fq: ensure maxrate fq parameter applies to EDT flows)
  		goto out;
  
  	rate = q->flow_max_rate;
- 	if (skb->sk)
- 		rate = min(skb->sk->sk_pacing_rate, rate);
- 
- 	if (rate <= q->low_rate_threshold) {
- 		f->credit = 0;
- 		plen = qdisc_pkt_len(skb);
- 	} else {
- 		plen = max(qdisc_pkt_len(skb), q->quantum);
- 		if (f->credit > 0)
- 			goto out;
+ 
+ 	/* If EDT time was provided for this skb, we need to
+ 	 * update f->time_next_packet only if this qdisc enforces
+ 	 * a flow max rate.
+ 	 */
+ 	if (!skb->tstamp) {
+ 		if (skb->sk)
+ 			rate = min(skb->sk->sk_pacing_rate, rate);
+ 
+ 		if (rate <= q->low_rate_threshold) {
+ 			f->credit = 0;
+ 		} else {
+ 			plen = max(plen, q->quantum);
+ 			if (f->credit > 0)
+ 				goto out;
+ 		}
  	}
 -	if (rate != ~0UL) {
 +	if (rate != ~0U) {
  		u64 len = (u64)plen * NSEC_PER_SEC;
  
  		if (likely(rate))
* Unmerged path net/sched/sch_fq.c
