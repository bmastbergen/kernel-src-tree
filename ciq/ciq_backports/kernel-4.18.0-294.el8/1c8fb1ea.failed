IB/uverbs: Expose UAPI to query ucontext

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit 1c8fb1ea5a1dbd2159e78fa580aaffb001794cfa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1c8fb1ea.failed

Expose UAPI to query ucontext, this will let user space application that
didn't allocate the ucontext but has access to by owning the matching
command FD to retrieve the ucontext information.

Link: https://lore.kernel.org/r/20200630093916.332097-4-leon@kernel.org
	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
(cherry picked from commit 1c8fb1ea5a1dbd2159e78fa580aaffb001794cfa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_std_types_device.c
#	include/uapi/rdma/ib_user_ioctl_cmds.h
diff --cc drivers/infiniband/core/uverbs_std_types_device.c
index 2a3f2f01028d,8e58605a17be..000000000000
--- a/drivers/infiniband/core/uverbs_std_types_device.c
+++ b/drivers/infiniband/core/uverbs_std_types_device.c
@@@ -200,6 -200,81 +200,84 @@@ static int UVERBS_HANDLER(UVERBS_METHOD
  					     &resp, sizeof(resp));
  }
  
++<<<<<<< HEAD
++=======
+ static int UVERBS_HANDLER(UVERBS_METHOD_GET_CONTEXT)(
+ 	struct uverbs_attr_bundle *attrs)
+ {
+ 	u32 num_comp = attrs->ufile->device->num_comp_vectors;
+ 	u64 core_support = IB_UVERBS_CORE_SUPPORT_OPTIONAL_MR_ACCESS;
+ 	int ret;
+ 
+ 	ret = uverbs_copy_to(attrs, UVERBS_ATTR_GET_CONTEXT_NUM_COMP_VECTORS,
+ 			     &num_comp, sizeof(num_comp));
+ 	if (IS_UVERBS_COPY_ERR(ret))
+ 		return ret;
+ 
+ 	ret = uverbs_copy_to(attrs, UVERBS_ATTR_GET_CONTEXT_CORE_SUPPORT,
+ 			     &core_support, sizeof(core_support));
+ 	if (IS_UVERBS_COPY_ERR(ret))
+ 		return ret;
+ 
+ 	ret = ib_alloc_ucontext(attrs);
+ 	if (ret)
+ 		return ret;
+ 	ret = ib_init_ucontext(attrs);
+ 	if (ret) {
+ 		kfree(attrs->context);
+ 		attrs->context = NULL;
+ 		return ret;
+ 	}
+ 	return 0;
+ }
+ 
+ static int UVERBS_HANDLER(UVERBS_METHOD_QUERY_CONTEXT)(
+ 	struct uverbs_attr_bundle *attrs)
+ {
+ 	u64 core_support = IB_UVERBS_CORE_SUPPORT_OPTIONAL_MR_ACCESS;
+ 	struct ib_ucontext *ucontext;
+ 	struct ib_device *ib_dev;
+ 	u32 num_comp;
+ 	int ret;
+ 
+ 	ucontext = ib_uverbs_get_ucontext(attrs);
+ 	if (IS_ERR(ucontext))
+ 		return PTR_ERR(ucontext);
+ 	ib_dev = ucontext->device;
+ 
+ 	if (!ib_dev->ops.query_ucontext)
+ 		return -EOPNOTSUPP;
+ 
+ 	num_comp = attrs->ufile->device->num_comp_vectors;
+ 	ret = uverbs_copy_to(attrs, UVERBS_ATTR_QUERY_CONTEXT_NUM_COMP_VECTORS,
+ 			     &num_comp, sizeof(num_comp));
+ 	if (IS_UVERBS_COPY_ERR(ret))
+ 		return ret;
+ 
+ 	ret = uverbs_copy_to(attrs, UVERBS_ATTR_QUERY_CONTEXT_CORE_SUPPORT,
+ 			     &core_support, sizeof(core_support));
+ 	if (IS_UVERBS_COPY_ERR(ret))
+ 		return ret;
+ 
+ 	return ucontext->device->ops.query_ucontext(ucontext, attrs);
+ }
+ 
+ DECLARE_UVERBS_NAMED_METHOD(
+ 	UVERBS_METHOD_GET_CONTEXT,
+ 	UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_GET_CONTEXT_NUM_COMP_VECTORS,
+ 			    UVERBS_ATTR_TYPE(u32), UA_OPTIONAL),
+ 	UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_GET_CONTEXT_CORE_SUPPORT,
+ 			    UVERBS_ATTR_TYPE(u64), UA_OPTIONAL),
+ 	UVERBS_ATTR_UHW());
+ 
++>>>>>>> 1c8fb1ea5a1d (IB/uverbs: Expose UAPI to query ucontext)
+ DECLARE_UVERBS_NAMED_METHOD(
+ 	UVERBS_METHOD_QUERY_CONTEXT,
+ 	UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_QUERY_CONTEXT_NUM_COMP_VECTORS,
+ 			    UVERBS_ATTR_TYPE(u32), UA_OPTIONAL),
+ 	UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_QUERY_CONTEXT_CORE_SUPPORT,
+ 			    UVERBS_ATTR_TYPE(u64), UA_OPTIONAL));
+ 
  DECLARE_UVERBS_NAMED_METHOD(
  	UVERBS_METHOD_INFO_HANDLES,
  	/* Also includes any device specific object ids */
@@@ -220,9 -295,11 +298,10 @@@ DECLARE_UVERBS_NAMED_METHOD
  		UA_MANDATORY));
  
  DECLARE_UVERBS_GLOBAL_METHODS(UVERBS_OBJECT_DEVICE,
 -			      &UVERBS_METHOD(UVERBS_METHOD_GET_CONTEXT),
  			      &UVERBS_METHOD(UVERBS_METHOD_INVOKE_WRITE),
  			      &UVERBS_METHOD(UVERBS_METHOD_INFO_HANDLES),
- 			      &UVERBS_METHOD(UVERBS_METHOD_QUERY_PORT));
+ 			      &UVERBS_METHOD(UVERBS_METHOD_QUERY_PORT),
+ 			      &UVERBS_METHOD(UVERBS_METHOD_QUERY_CONTEXT));
  
  const struct uapi_definition uverbs_def_obj_device[] = {
  	UAPI_DEF_CHAIN_OBJ_TREE_NAMED(UVERBS_OBJECT_DEVICE),
diff --cc include/uapi/rdma/ib_user_ioctl_cmds.h
index 8bab57a48945,83b6e71ea216..000000000000
--- a/include/uapi/rdma/ib_user_ioctl_cmds.h
+++ b/include/uapi/rdma/ib_user_ioctl_cmds.h
@@@ -68,6 -68,8 +68,11 @@@ enum uverbs_methods_device 
  	UVERBS_METHOD_INVOKE_WRITE,
  	UVERBS_METHOD_INFO_HANDLES,
  	UVERBS_METHOD_QUERY_PORT,
++<<<<<<< HEAD
++=======
+ 	UVERBS_METHOD_GET_CONTEXT,
+ 	UVERBS_METHOD_QUERY_CONTEXT,
++>>>>>>> 1c8fb1ea5a1d (IB/uverbs: Expose UAPI to query ucontext)
  };
  
  enum uverbs_attrs_invoke_write_cmd_attr_ids {
@@@ -81,6 -83,16 +86,19 @@@ enum uverbs_attrs_query_port_cmd_attr_i
  	UVERBS_ATTR_QUERY_PORT_RESP,
  };
  
++<<<<<<< HEAD
++=======
+ enum uverbs_attrs_get_context_attr_ids {
+ 	UVERBS_ATTR_GET_CONTEXT_NUM_COMP_VECTORS,
+ 	UVERBS_ATTR_GET_CONTEXT_CORE_SUPPORT,
+ };
+ 
+ enum uverbs_attrs_query_context_attr_ids {
+ 	UVERBS_ATTR_QUERY_CONTEXT_NUM_COMP_VECTORS,
+ 	UVERBS_ATTR_QUERY_CONTEXT_CORE_SUPPORT,
+ };
+ 
++>>>>>>> 1c8fb1ea5a1d (IB/uverbs: Expose UAPI to query ucontext)
  enum uverbs_attrs_create_cq_cmd_attr_ids {
  	UVERBS_ATTR_CREATE_CQ_HANDLE,
  	UVERBS_ATTR_CREATE_CQ_CQE,
diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index b42a75cfb9e2..f377536f5924 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -2659,6 +2659,7 @@ void ib_set_device_ops(struct ib_device *dev, const struct ib_device_ops *ops)
 	SET_DEVICE_OP(dev_ops, query_port);
 	SET_DEVICE_OP(dev_ops, query_qp);
 	SET_DEVICE_OP(dev_ops, query_srq);
+	SET_DEVICE_OP(dev_ops, query_ucontext);
 	SET_DEVICE_OP(dev_ops, rdma_netdev_get_params);
 	SET_DEVICE_OP(dev_ops, read_counters);
 	SET_DEVICE_OP(dev_ops, reg_dm_mr);
* Unmerged path drivers/infiniband/core/uverbs_std_types_device.c
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index ccbff86c4c19..439539ee0b9d 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -2648,6 +2648,10 @@ struct ib_device_ops {
 	 */
 	int (*fill_stat_mr_entry)(struct sk_buff *msg, struct ib_mr *ibmr);
 
+	/* query driver for its ucontext properties */
+	int (*query_ucontext)(struct ib_ucontext *context,
+			      struct uverbs_attr_bundle *attrs);
+
 	DECLARE_RDMA_OBJ_SIZE(ib_ah);
 	DECLARE_RDMA_OBJ_SIZE(ib_cq);
 	DECLARE_RDMA_OBJ_SIZE(ib_pd);
* Unmerged path include/uapi/rdma/ib_user_ioctl_cmds.h
