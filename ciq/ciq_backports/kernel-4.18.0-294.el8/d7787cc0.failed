drm/nouveau/kms/nv50-: Fix clock checking algorithm in nv50_dp_mode_valid()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Lyude Paul <lyude@redhat.com>
commit d7787cc04e0a1f2043264d1550465081096bd065
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d7787cc0.failed

While I thought I had this correct (since it actually did reject modes
like I expected during testing), Ville Syrjala from Intel pointed out
that the logic here isn't correct. max_clock refers to the max data rate
supported by the DP encoder. So, limiting it to the output of ds_clock (which
refers to the maximum dotclock of the downstream DP device) doesn't make any
sense. Additionally, since we're using the connector's bpc as the canonical BPC
we should use this in mode_valid until we support dynamically setting the bpp
based on bandwidth constraints.

https://lists.freedesktop.org/archives/dri-devel/2020-September/280276.html

For more info.

So, let's rewrite this using Ville's advice.

v2:
* Ville pointed out I mixed up the dotclock and the link rate. So fix that...
* ...and also rename all the variables in this function to be more appropriately
  labeled so I stop mixing them up.
* Reuse the bpp from the connector for now until we have dynamic bpp selection.
* Use use DIV_ROUND_UP for calculating the mode rate like i915 does, which we
  should also have been doing from the start

	Signed-off-by: Lyude Paul <lyude@redhat.com>
Fixes: 409d38139b42 ("drm/nouveau/kms/nv50-: Use downstream DP clock limits for mode validation")
	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Cc: Lyude Paul <lyude@redhat.com>
	Cc: Ben Skeggs <bskeggs@redhat.com>
	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit d7787cc04e0a1f2043264d1550465081096bd065)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nouveau_dp.c
diff --cc drivers/gpu/drm/nouveau/nouveau_dp.c
index 8a0f7994e1ae,040ed88d362d..000000000000
--- a/drivers/gpu/drm/nouveau/nouveau_dp.c
+++ b/drivers/gpu/drm/nouveau/nouveau_dp.c
@@@ -113,19 -231,30 +113,42 @@@ nv50_dp_mode_valid(struct drm_connecto
  		   const struct drm_display_mode *mode,
  		   unsigned *out_clock)
  {
++<<<<<<< HEAD
 +	const unsigned min_clock = 25000;
 +	unsigned max_clock, clock;
 +	enum drm_mode_status ret;
++=======
+ 	const unsigned int min_clock = 25000;
+ 	unsigned int max_rate, mode_rate, ds_max_dotclock, clock = mode->clock;
+ 	const u8 bpp = connector->display_info.bpc * 3;
++>>>>>>> d7787cc04e0a (drm/nouveau/kms/nv50-: Fix clock checking algorithm in nv50_dp_mode_valid())
  
  	if (mode->flags & DRM_MODE_FLAG_INTERLACE && !outp->caps.dp_interlace)
  		return MODE_NO_INTERLACE;
  
++<<<<<<< HEAD
 +	max_clock = outp->dp.link_nr * outp->dp.link_bw;
 +	clock = mode->clock * (connector->display_info.bpc * 3) / 10;
++=======
+ 	if ((mode->flags & DRM_MODE_FLAG_3D_MASK) == DRM_MODE_FLAG_3D_FRAME_PACKING)
+ 		clock *= 2;
+ 
+ 	max_rate = outp->dp.link_nr * outp->dp.link_bw;
+ 	mode_rate = DIV_ROUND_UP(clock * bpp, 8);
+ 	if (mode_rate > max_rate)
+ 		return MODE_CLOCK_HIGH;
+ 
+ 	ds_max_dotclock = drm_dp_downstream_max_dotclock(outp->dp.dpcd, outp->dp.downstream_ports);
+ 	if (ds_max_dotclock && clock > ds_max_dotclock)
+ 		return MODE_CLOCK_HIGH;
+ 
+ 	if (clock < min_clock)
+ 		return MODE_CLOCK_LOW;
++>>>>>>> d7787cc04e0a (drm/nouveau/kms/nv50-: Fix clock checking algorithm in nv50_dp_mode_valid())
  
 +	ret = nouveau_conn_mode_clock_valid(mode, min_clock, max_clock,
 +					    &clock);
  	if (out_clock)
  		*out_clock = clock;
 -
 -	return MODE_OK;
 +	return ret;
  }
* Unmerged path drivers/gpu/drm/nouveau/nouveau_dp.c
