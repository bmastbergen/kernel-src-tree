libceph: drop ceph_auth_{create,update}_authorizer()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [net] libceph: drop ceph_auth_{create, update}_authorizer() (Jeff Layton) [1893177]
Rebuild_FUZZ: 99.05%
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 2f0df6cfa325d7106b8a65bc0e02db1086e3f73b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/2f0df6cf.failed

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 2f0df6cfa325d7106b8a65bc0e02db1086e3f73b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ceph/auth.h
#	net/ceph/auth.c
diff --cc include/linux/ceph/auth.h
index 5f64f66309fa,71b5d481c653..000000000000
--- a/include/linux/ceph/auth.h
+++ b/include/linux/ceph/auth.h
@@@ -116,15 -120,13 +116,19 @@@ int ceph_auth_entity_name_encode(const 
  
  extern int ceph_build_auth(struct ceph_auth_client *ac,
  		    void *msg_buf, size_t msg_len);
 -extern int ceph_auth_is_authenticated(struct ceph_auth_client *ac);
  
++<<<<<<< HEAD
 +extern int ceph_auth_is_authenticated(struct ceph_auth_client *ac);
 +extern int ceph_auth_create_authorizer(struct ceph_auth_client *ac,
 +				       int peer_type,
 +				       struct ceph_auth_handshake *auth);
++=======
+ int __ceph_auth_get_authorizer(struct ceph_auth_client *ac,
+ 			       struct ceph_auth_handshake *auth,
+ 			       int peer_type, bool force_new,
+ 			       int *proto, int *pref_mode, int *fallb_mode);
++>>>>>>> 2f0df6cfa325 (libceph: drop ceph_auth_{create,update}_authorizer())
  void ceph_auth_destroy_authorizer(struct ceph_authorizer *a);
- extern int ceph_auth_update_authorizer(struct ceph_auth_client *ac,
- 				       int peer_type,
- 				       struct ceph_auth_handshake *a);
  int ceph_auth_add_authorizer_challenge(struct ceph_auth_client *ac,
  				       struct ceph_authorizer *a,
  				       void *challenge_buf,
diff --cc net/ceph/auth.c
index deaf267f8942,eb261aa5fe18..000000000000
--- a/net/ceph/auth.c
+++ b/net/ceph/auth.c
@@@ -289,39 -293,44 +289,60 @@@ int ceph_auth_is_authenticated(struct c
  }
  EXPORT_SYMBOL(ceph_auth_is_authenticated);
  
++<<<<<<< HEAD
 +int ceph_auth_create_authorizer(struct ceph_auth_client *ac,
 +				int peer_type,
 +				struct ceph_auth_handshake *auth)
 +{
 +	int ret = 0;
 +
 +	mutex_lock(&ac->mutex);
 +	if (ac->ops && ac->ops->create_authorizer)
 +		ret = ac->ops->create_authorizer(ac, peer_type, auth);
 +	mutex_unlock(&ac->mutex);
 +	return ret;
 +}
 +EXPORT_SYMBOL(ceph_auth_create_authorizer);
- 
- void ceph_auth_destroy_authorizer(struct ceph_authorizer *a)
- {
- 	a->destroy(a);
- }
- EXPORT_SYMBOL(ceph_auth_destroy_authorizer);
- 
- int ceph_auth_update_authorizer(struct ceph_auth_client *ac,
- 				int peer_type,
- 				struct ceph_auth_handshake *a)
++=======
+ int __ceph_auth_get_authorizer(struct ceph_auth_client *ac,
+ 			       struct ceph_auth_handshake *auth,
+ 			       int peer_type, bool force_new,
+ 			       int *proto, int *pref_mode, int *fallb_mode)
  {
- 	int ret = 0;
+ 	int ret;
  
  	mutex_lock(&ac->mutex);
- 	if (ac->ops && ac->ops->update_authorizer)
- 		ret = ac->ops->update_authorizer(ac, peer_type, a);
+ 	if (force_new && auth->authorizer) {
+ 		ceph_auth_destroy_authorizer(auth->authorizer);
+ 		auth->authorizer = NULL;
+ 	}
+ 	if (!auth->authorizer)
+ 		ret = ac->ops->create_authorizer(ac, peer_type, auth);
+ 	else if (ac->ops->update_authorizer)
+ 		ret = ac->ops->update_authorizer(ac, peer_type, auth);
+ 	else
+ 		ret = 0;
+ 	if (ret)
+ 		goto out;
+ 
+ 	*proto = ac->protocol;
+ 	if (pref_mode && fallb_mode) {
+ 		*pref_mode = ac->preferred_mode;
+ 		*fallb_mode = ac->fallback_mode;
+ 	}
+ 
+ out:
  	mutex_unlock(&ac->mutex);
  	return ret;
  }
- EXPORT_SYMBOL(ceph_auth_update_authorizer);
+ EXPORT_SYMBOL(__ceph_auth_get_authorizer);
++>>>>>>> 2f0df6cfa325 (libceph: drop ceph_auth_{create,update}_authorizer())
+ 
+ void ceph_auth_destroy_authorizer(struct ceph_authorizer *a)
+ {
+ 	a->destroy(a);
+ }
+ EXPORT_SYMBOL(ceph_auth_destroy_authorizer);
  
  int ceph_auth_add_authorizer_challenge(struct ceph_auth_client *ac,
  				       struct ceph_authorizer *a,
* Unmerged path include/linux/ceph/auth.h
* Unmerged path net/ceph/auth.c
