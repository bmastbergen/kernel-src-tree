net: ethtool: Add generic parts of cable test TDR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrew Lunn <andrew@lunn.ch>
commit 1a644de29f712771c2ec00e52caa391544eb6141
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1a644de2.failed

Add the generic parts of the code used to trigger a cable test and
return raw TDR data. Any PHY driver which support this must implement
the new driver op.

	Signed-off-by: Andrew Lunn <andrew@lunn.ch>

v2
Update nxp-tja11xx for API change.

	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1a644de29f712771c2ec00e52caa391544eb6141)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy.c
#	include/linux/ethtool_netlink.h
#	net/ethtool/cabletest.c
#	net/ethtool/netlink.c
#	net/ethtool/netlink.h
diff --cc drivers/net/phy/phy.c
index bcf0682c8b7f,495d9ba3d5bf..000000000000
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@@ -510,13 -519,19 +510,20 @@@ int phy_start_cable_test(struct phy_dev
  		goto out;
  	}
  
++<<<<<<< HEAD
++=======
+ 	err = ethnl_cable_test_alloc(phydev, ETHTOOL_MSG_CABLE_TEST_NTF);
+ 	if (err)
+ 		goto out;
+ 
++>>>>>>> 1a644de29f71 (net: ethtool: Add generic parts of cable test TDR)
  	/* Mark the carrier down until the test is complete */
 -	phy_link_down(phydev);
 +	phy_link_down(phydev, true);
  
 -	netif_testing_on(dev);
  	err = phydev->drv->cable_test_start(phydev);
  	if (err) {
 -		netif_testing_off(dev);
  		phy_link_up(phydev);
 -		goto out_free;
 +		goto out;
  	}
  
  	phydev->state = PHY_CABLETEST;
* Unmerged path include/linux/ethtool_netlink.h
* Unmerged path net/ethtool/cabletest.c
* Unmerged path net/ethtool/netlink.c
* Unmerged path net/ethtool/netlink.h
diff --git a/drivers/net/phy/nxp-tja11xx.c b/drivers/net/phy/nxp-tja11xx.c
index 1e79c30ca81a..a72fa0d2e7c7 100644
--- a/drivers/net/phy/nxp-tja11xx.c
+++ b/drivers/net/phy/nxp-tja11xx.c
@@ -194,7 +194,7 @@ static int tja11xx_config_aneg_cable_test(struct phy_device *phydev)
 	    !phydev->drv->cable_test_get_status)
 		return 0;
 
-	ret = ethnl_cable_test_alloc(phydev);
+	ret = ethnl_cable_test_alloc(phydev, ETHTOOL_MSG_CABLE_TEST_NTF);
 	if (ret)
 		return ret;
 
* Unmerged path drivers/net/phy/phy.c
* Unmerged path include/linux/ethtool_netlink.h
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 2350f3f655e9..a5d80d23eb77 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -711,6 +711,10 @@ struct phy_driver {
 
 	/* Start a cable test */
 	int (*cable_test_start)(struct phy_device *dev);
+
+	/* Start a raw TDR cable test */
+	int (*cable_test_tdr_start)(struct phy_device *dev);
+
 	/* Once per second, or on interrupt, request the status of the
 	 * test.
 	 */
@@ -1257,6 +1261,8 @@ int phy_reset_after_clk_enable(struct phy_device *phydev);
 #if IS_ENABLED(CONFIG_PHYLIB)
 int phy_start_cable_test(struct phy_device *phydev,
 			 struct netlink_ext_ack *extack);
+int phy_start_cable_test_tdr(struct phy_device *phydev,
+			     struct netlink_ext_ack *extack);
 #else
 static inline
 int phy_start_cable_test(struct phy_device *phydev,
@@ -1265,6 +1271,13 @@ int phy_start_cable_test(struct phy_device *phydev,
 	NL_SET_ERR_MSG(extack, "Kernel not compiled with PHYLIB support");
 	return -EOPNOTSUPP;
 }
+static inline
+int phy_start_cable_test_tdr(struct phy_device *phydev,
+			     struct netlink_ext_ack *extack)
+{
+	NL_SET_ERR_MSG(extack, "Kernel not compiled with PHYLIB support");
+	return -EOPNOTSUPP;
+}
 #endif
 
 static inline void phy_device_reset(struct phy_device *phydev, int value)
* Unmerged path net/ethtool/cabletest.c
* Unmerged path net/ethtool/netlink.c
* Unmerged path net/ethtool/netlink.h
