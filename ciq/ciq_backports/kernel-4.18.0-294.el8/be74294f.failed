net: get rid of lockdep_set_class_and_subclass()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [net] get rid of lockdep_set_class_and_subclass() (Ivan Vecera) [1867961]
Rebuild_FUZZ: 94.51%
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit be74294ffa24f5fbc0d6643842e3e095447e17a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/be74294f.failed

lockdep_set_class_and_subclass() is meant to reduce
the _nested() annotations by assigning a default subclass.
For addr_list_lock, we have to compute the subclass at
run-time as the netdevice topology changes after creation.

So, we should just get rid of these
lockdep_set_class_and_subclass() and stick with our _nested()
annotations.

Fixes: 845e0ebb4408 ("net: change addr_list_lock back to static key")
	Suggested-by: Taehee Yoo <ap420073@gmail.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit be74294ffa24f5fbc0d6643842e3e095447e17a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/macsec.c
#	drivers/net/macvlan.c
#	net/8021q/vlan_dev.c
diff --cc drivers/net/macsec.c
index 708209d5dd26,9159846b8b93..000000000000
--- a/drivers/net/macsec.c
+++ b/drivers/net/macsec.c
@@@ -3261,6 -4051,10 +3261,13 @@@ static int macsec_newlink(struct net *n
  	if (err < 0)
  		return err;
  
++<<<<<<< HEAD
++=======
+ 	netdev_lockdep_set_classes(dev);
+ 	lockdep_set_class(&dev->addr_list_lock,
+ 			  &macsec_netdev_addr_lock_key);
+ 
++>>>>>>> be74294ffa24 (net: get rid of lockdep_set_class_and_subclass())
  	err = netdev_upper_dev_link(real_dev, dev, extack);
  	if (err < 0)
  		goto unregister;
diff --cc drivers/net/macvlan.c
index f4843edefca4,4942f6112e51..000000000000
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@@ -874,6 -877,13 +874,16 @@@ static int macvlan_do_ioctl(struct net_
  #define MACVLAN_STATE_MASK \
  	((1<<__LINK_STATE_NOCARRIER) | (1<<__LINK_STATE_DORMANT))
  
++<<<<<<< HEAD
++=======
+ static void macvlan_set_lockdep_class(struct net_device *dev)
+ {
+ 	netdev_lockdep_set_classes(dev);
+ 	lockdep_set_class(&dev->addr_list_lock,
+ 			  &macvlan_netdev_addr_lock_key);
+ }
+ 
++>>>>>>> be74294ffa24 (net: get rid of lockdep_set_class_and_subclass())
  static int macvlan_init(struct net_device *dev)
  {
  	struct macvlan_dev *vlan = netdev_priv(dev);
diff --cc net/8021q/vlan_dev.c
index 84928dc428e5,3dd7c972677b..000000000000
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@@ -491,6 -488,28 +491,31 @@@ static void vlan_dev_set_rx_mode(struc
  	dev_uc_sync(vlan_dev_priv(vlan_dev)->real_dev, vlan_dev);
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * vlan network devices have devices nesting below it, and are a special
+  * "super class" of normal network devices; split their locks off into a
+  * separate class since they always nest.
+  */
+ static struct lock_class_key vlan_netdev_xmit_lock_key;
+ static struct lock_class_key vlan_netdev_addr_lock_key;
+ 
+ static void vlan_dev_set_lockdep_one(struct net_device *dev,
+ 				     struct netdev_queue *txq,
+ 				     void *unused)
+ {
+ 	lockdep_set_class(&txq->_xmit_lock, &vlan_netdev_xmit_lock_key);
+ }
+ 
+ static void vlan_dev_set_lockdep_class(struct net_device *dev)
+ {
+ 	lockdep_set_class(&dev->addr_list_lock,
+ 			  &vlan_netdev_addr_lock_key);
+ 	netdev_for_each_tx_queue(dev, vlan_dev_set_lockdep_one, NULL);
+ }
+ 
++>>>>>>> be74294ffa24 (net: get rid of lockdep_set_class_and_subclass())
  static const struct header_ops vlan_header_ops = {
  	.create	 = vlan_dev_hard_header,
  	.parse	 = eth_header_parse,
@@@ -578,8 -600,10 +603,15 @@@ static int vlan_dev_init(struct net_dev
  
  	SET_NETDEV_DEVTYPE(dev, &vlan_type);
  
++<<<<<<< HEAD
 +	vlan_dev_priv(dev)->vlan_pcpu_stats = netdev_alloc_pcpu_stats(struct vlan_pcpu_stats);
 +	if (!vlan_dev_priv(dev)->vlan_pcpu_stats)
++=======
+ 	vlan_dev_set_lockdep_class(dev);
+ 
+ 	vlan->vlan_pcpu_stats = netdev_alloc_pcpu_stats(struct vlan_pcpu_stats);
+ 	if (!vlan->vlan_pcpu_stats)
++>>>>>>> be74294ffa24 (net: get rid of lockdep_set_class_and_subclass())
  		return -ENOMEM;
  
  	return 0;
* Unmerged path drivers/net/macsec.c
* Unmerged path drivers/net/macvlan.c
* Unmerged path net/8021q/vlan_dev.c
