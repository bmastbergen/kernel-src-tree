bpf: Fix swapped arguments in calls to check_buffer_access

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Colin Ian King <colin.king@canonical.com>
commit f6dfbe31e8fa5cbd5bc89df9d7f0fa0af7e69981
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f6dfbe31.failed

There are a couple of arguments of the boolean flag zero_size_allowed and
the char pointer buf_info when calling to function check_buffer_access that
are swapped by mistake. Fix these by swapping them to correct the argument
ordering.

Fixes: afbf21dce668 ("bpf: Support readonly/readwrite buffers in verifier")
Addresses-Coverity: ("Array compared to 0")
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20200727175411.155179-1-colin.king@canonical.com
(cherry picked from commit f6dfbe31e8fa5cbd5bc89df9d7f0fa0af7e69981)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index b8aec186e303,88bb25d08bf8..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -3331,6 -3468,26 +3331,29 @@@ static int check_mem_access(struct bpf_
  	} else if (reg->type == PTR_TO_BTF_ID) {
  		err = check_ptr_to_btf_access(env, regs, regno, off, size, t,
  					      value_regno);
++<<<<<<< HEAD
++=======
+ 	} else if (reg->type == CONST_PTR_TO_MAP) {
+ 		err = check_ptr_to_map_access(env, regs, regno, off, size, t,
+ 					      value_regno);
+ 	} else if (reg->type == PTR_TO_RDONLY_BUF) {
+ 		if (t == BPF_WRITE) {
+ 			verbose(env, "R%d cannot write into %s\n",
+ 				regno, reg_type_str[reg->type]);
+ 			return -EACCES;
+ 		}
+ 		err = check_buffer_access(env, reg, regno, off, size, false,
+ 					  "rdonly",
+ 					  &env->prog->aux->max_rdonly_access);
+ 		if (!err && value_regno >= 0)
+ 			mark_reg_unknown(env, regs, value_regno);
+ 	} else if (reg->type == PTR_TO_RDWR_BUF) {
+ 		err = check_buffer_access(env, reg, regno, off, size, false,
+ 					  "rdwr",
+ 					  &env->prog->aux->max_rdwr_access);
+ 		if (!err && t == BPF_READ && value_regno >= 0)
+ 			mark_reg_unknown(env, regs, value_regno);
++>>>>>>> f6dfbe31e8fa (bpf: Fix swapped arguments in calls to check_buffer_access)
  	} else {
  		verbose(env, "R%d invalid mem access '%s'\n", regno,
  			reg_type_str[reg->type]);
* Unmerged path kernel/bpf/verifier.c
