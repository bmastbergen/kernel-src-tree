libbpf: Add support for BPF XDP link

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit dc8698cac7aada9b61a612cb819341d84591163e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/dc8698ca.failed

Sync UAPI header and add support for using bpf_link-based XDP attachment.
Make xdp/ prog type set expected attach type. Kernel didn't enforce
attach_type for XDP programs before, so there is no backwards compatiblity
issues there.

Also fix section_names selftest to recognize that xdp prog types now have
expected attach type.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200722064603.3350758-8-andriin@fb.com
(cherry picked from commit dc8698cac7aada9b61a612cb819341d84591163e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/include/uapi/linux/bpf.h
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
#	tools/lib/bpf/libbpf.map
diff --cc tools/include/uapi/linux/bpf.h
index 9f6d3977ecf3,e1ba4ae6a916..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -217,6 -221,16 +217,19 @@@ enum bpf_attach_type 
  	BPF_TRACE_FEXIT,
  	BPF_MODIFY_RETURN,
  	BPF_LSM_MAC,
++<<<<<<< HEAD
++=======
+ 	BPF_TRACE_ITER,
+ 	BPF_CGROUP_INET4_GETPEERNAME,
+ 	BPF_CGROUP_INET6_GETPEERNAME,
+ 	BPF_CGROUP_INET4_GETSOCKNAME,
+ 	BPF_CGROUP_INET6_GETSOCKNAME,
+ 	BPF_XDP_DEVMAP,
+ 	BPF_CGROUP_INET_SOCK_RELEASE,
+ 	BPF_XDP_CPUMAP,
+ 	BPF_SK_LOOKUP,
+ 	BPF_XDP,
++>>>>>>> dc8698cac7aa (libbpf: Add support for BPF XDP link)
  	__MAX_BPF_ATTACH_TYPE
  };
  
@@@ -227,6 -241,9 +240,12 @@@ enum bpf_link_type 
  	BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
  	BPF_LINK_TYPE_TRACING = 2,
  	BPF_LINK_TYPE_CGROUP = 3,
++<<<<<<< HEAD
++=======
+ 	BPF_LINK_TYPE_ITER = 4,
+ 	BPF_LINK_TYPE_NETNS = 5,
+ 	BPF_LINK_TYPE_XDP = 6,
++>>>>>>> dc8698cac7aa (libbpf: Add support for BPF XDP link)
  
  	MAX_BPF_LINK_TYPE,
  };
@@@ -3717,6 -4065,13 +3739,16 @@@ struct bpf_link_info 
  			__u64 cgroup_id;
  			__u32 attach_type;
  		} cgroup;
++<<<<<<< HEAD
++=======
+ 		struct  {
+ 			__u32 netns_ino;
+ 			__u32 attach_type;
+ 		} netns;
+ 		struct {
+ 			__u32 ifindex;
+ 		} xdp;
++>>>>>>> dc8698cac7aa (libbpf: Add support for BPF XDP link)
  	};
  } __attribute__((aligned(8)));
  
diff --cc tools/lib/bpf/libbpf.c
index 5ea41372390a,54830d603fee..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -6857,7 -6907,16 +6857,20 @@@ static const struct bpf_sec_def section
  		.is_attach_btf = true,
  		.expected_attach_type = BPF_LSM_MAC,
  		.attach_fn = attach_lsm),
++<<<<<<< HEAD
 +	BPF_PROG_SEC("xdp",			BPF_PROG_TYPE_XDP),
++=======
+ 	SEC_DEF("iter/", TRACING,
+ 		.expected_attach_type = BPF_TRACE_ITER,
+ 		.is_attach_btf = true,
+ 		.attach_fn = attach_iter),
+ 	BPF_EAPROG_SEC("xdp_devmap/",		BPF_PROG_TYPE_XDP,
+ 						BPF_XDP_DEVMAP),
+ 	BPF_EAPROG_SEC("xdp_cpumap/",		BPF_PROG_TYPE_XDP,
+ 						BPF_XDP_CPUMAP),
+ 	BPF_EAPROG_SEC("xdp",			BPF_PROG_TYPE_XDP,
+ 						BPF_XDP),
++>>>>>>> dc8698cac7aa (libbpf: Add support for BPF XDP link)
  	BPF_PROG_SEC("perf_event",		BPF_PROG_TYPE_PERF_EVENT),
  	BPF_PROG_SEC("lwt_in",			BPF_PROG_TYPE_LWT_IN),
  	BPF_PROG_SEC("lwt_out",			BPF_PROG_TYPE_LWT_OUT),
@@@ -8112,7 -8261,69 +8125,73 @@@ bpf_program__attach_cgroup(struct bpf_p
  	if (link_fd < 0) {
  		link_fd = -errno;
  		free(link);
++<<<<<<< HEAD
 +		pr_warn("program '%s': failed to attach to cgroup: %s\n",
++=======
+ 		pr_warn("program '%s': failed to attach to %s: %s\n",
+ 			bpf_program__title(prog, false), target_name,
+ 			libbpf_strerror_r(link_fd, errmsg, sizeof(errmsg)));
+ 		return ERR_PTR(link_fd);
+ 	}
+ 	link->fd = link_fd;
+ 	return link;
+ }
+ 
+ struct bpf_link *
+ bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd)
+ {
+ 	return bpf_program__attach_fd(prog, cgroup_fd, "cgroup");
+ }
+ 
+ struct bpf_link *
+ bpf_program__attach_netns(struct bpf_program *prog, int netns_fd)
+ {
+ 	return bpf_program__attach_fd(prog, netns_fd, "netns");
+ }
+ 
+ struct bpf_link *bpf_program__attach_xdp(struct bpf_program *prog, int ifindex)
+ {
+ 	/* target_fd/target_ifindex use the same field in LINK_CREATE */
+ 	return bpf_program__attach_fd(prog, ifindex, "xdp");
+ }
+ 
+ struct bpf_link *
+ bpf_program__attach_iter(struct bpf_program *prog,
+ 			 const struct bpf_iter_attach_opts *opts)
+ {
+ 	DECLARE_LIBBPF_OPTS(bpf_link_create_opts, link_create_opts);
+ 	char errmsg[STRERR_BUFSIZE];
+ 	struct bpf_link *link;
+ 	int prog_fd, link_fd;
+ 	__u32 target_fd = 0;
+ 
+ 	if (!OPTS_VALID(opts, bpf_iter_attach_opts))
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	if (OPTS_HAS(opts, map_fd)) {
+ 		target_fd = opts->map_fd;
+ 		link_create_opts.flags = BPF_ITER_LINK_MAP_FD;
+ 	}
+ 
+ 	prog_fd = bpf_program__fd(prog);
+ 	if (prog_fd < 0) {
+ 		pr_warn("program '%s': can't attach before loaded\n",
+ 			bpf_program__title(prog, false));
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	link = calloc(1, sizeof(*link));
+ 	if (!link)
+ 		return ERR_PTR(-ENOMEM);
+ 	link->detach = &bpf_link__detach_fd;
+ 
+ 	link_fd = bpf_link_create(prog_fd, target_fd, BPF_TRACE_ITER,
+ 				  &link_create_opts);
+ 	if (link_fd < 0) {
+ 		link_fd = -errno;
+ 		free(link);
+ 		pr_warn("program '%s': failed to attach to iterator: %s\n",
++>>>>>>> dc8698cac7aa (libbpf: Add support for BPF XDP link)
  			bpf_program__title(prog, false),
  			libbpf_strerror_r(link_fd, errmsg, sizeof(errmsg)));
  		return ERR_PTR(link_fd);
diff --cc tools/lib/bpf/libbpf.h
index 02e427ddd9d9,9924385462ab..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -267,6 -255,10 +267,13 @@@ LIBBPF_API struct bpf_link 
  bpf_program__attach_lsm(struct bpf_program *prog);
  LIBBPF_API struct bpf_link *
  bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd);
++<<<<<<< HEAD
++=======
+ LIBBPF_API struct bpf_link *
+ bpf_program__attach_netns(struct bpf_program *prog, int netns_fd);
+ LIBBPF_API struct bpf_link *
+ bpf_program__attach_xdp(struct bpf_program *prog, int ifindex);
++>>>>>>> dc8698cac7aa (libbpf: Add support for BPF XDP link)
  
  struct bpf_map;
  
diff --cc tools/lib/bpf/libbpf.map
index 69599528ddbe,ca49a6a7e5b2..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -286,3 -254,42 +286,45 @@@ LIBBPF_0.0.8 
  		bpf_program__set_lsm;
  		bpf_set_link_xdp_fd_opts;
  } LIBBPF_0.0.7;
++<<<<<<< HEAD
++=======
+ 
+ LIBBPF_0.0.9 {
+ 	global:
+ 		bpf_enable_stats;
+ 		bpf_iter_create;
+ 		bpf_link_get_fd_by_id;
+ 		bpf_link_get_next_id;
+ 		bpf_program__attach_iter;
+ 		bpf_program__attach_netns;
+ 		perf_buffer__consume;
+ 		ring_buffer__add;
+ 		ring_buffer__consume;
+ 		ring_buffer__free;
+ 		ring_buffer__new;
+ 		ring_buffer__poll;
+ } LIBBPF_0.0.8;
+ 
+ LIBBPF_0.1.0 {
+ 	global:
+ 		bpf_map__ifindex;
+ 		bpf_map__key_size;
+ 		bpf_map__map_flags;
+ 		bpf_map__max_entries;
+ 		bpf_map__numa_node;
+ 		bpf_map__set_key_size;
+ 		bpf_map__set_map_flags;
+ 		bpf_map__set_max_entries;
+ 		bpf_map__set_numa_node;
+ 		bpf_map__set_type;
+ 		bpf_map__set_value_size;
+ 		bpf_map__type;
+ 		bpf_map__value_size;
+ 		bpf_program__attach_xdp;
+ 		bpf_program__autoload;
+ 		bpf_program__is_sk_lookup;
+ 		bpf_program__set_autoload;
+ 		bpf_program__set_sk_lookup;
+ 		btf__set_fd;
+ } LIBBPF_0.0.9;
++>>>>>>> dc8698cac7aa (libbpf: Add support for BPF XDP link)
* Unmerged path tools/include/uapi/linux/bpf.h
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
* Unmerged path tools/lib/bpf/libbpf.map
diff --git a/tools/testing/selftests/bpf/prog_tests/section_names.c b/tools/testing/selftests/bpf/prog_tests/section_names.c
index 713167449c98..8b571890c57e 100644
--- a/tools/testing/selftests/bpf/prog_tests/section_names.c
+++ b/tools/testing/selftests/bpf/prog_tests/section_names.c
@@ -35,7 +35,7 @@ static struct sec_name_test tests[] = {
 		{-EINVAL, 0},
 	},
 	{"raw_tp/", {0, BPF_PROG_TYPE_RAW_TRACEPOINT, 0}, {-EINVAL, 0} },
-	{"xdp", {0, BPF_PROG_TYPE_XDP, 0}, {-EINVAL, 0} },
+	{"xdp", {0, BPF_PROG_TYPE_XDP, BPF_XDP}, {0, BPF_XDP} },
 	{"perf_event", {0, BPF_PROG_TYPE_PERF_EVENT, 0}, {-EINVAL, 0} },
 	{"lwt_in", {0, BPF_PROG_TYPE_LWT_IN, 0}, {-EINVAL, 0} },
 	{"lwt_out", {0, BPF_PROG_TYPE_LWT_OUT, 0}, {-EINVAL, 0} },
