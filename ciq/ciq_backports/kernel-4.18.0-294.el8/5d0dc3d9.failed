RDMA/mlx5: Initial separation of RAW_PACKET QP from common flow

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 5d0dc3d96c7b3bc6bc175754abcb132a1c94d02b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5d0dc3d9.failed

Create initial function for IB_QPT_RAW_PACKET flow.

Link: https://lore.kernel.org/r/20200427154636.381474-13-leon@kernel.org
	Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 5d0dc3d96c7b3bc6bc175754abcb132a1c94d02b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 745e3ea1cb8f,a514b4eca06e..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -1997,14 -1996,6 +1997,17 @@@ static int create_qp_common(struct mlx5
  	if (mlx5_st < 0)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (init_attr->rwq_ind_tbl) {
 +		if (!udata)
 +			return -ENOSYS;
 +
 +		err = create_rss_raw_qp_tir(dev, qp, pd, init_attr, udata);
 +		return err;
 +	}
 +
++=======
++>>>>>>> 5d0dc3d96c7b (RDMA/mlx5: Initial separation of RAW_PACKET QP from common flow)
  	if (init_attr->create_flags & IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK) {
  		if (!MLX5_CAP_GEN(mdev, block_lb_mc)) {
  			mlx5_ib_dbg(dev, "block multicast loopback isn't supported\n");
@@@ -2774,16 -2586,223 +2777,229 @@@ struct ib_qp *mlx5_ib_create_qp(struct 
  	case IB_QPT_RAW_ETHERTYPE:
  	case IB_QPT_MAX:
  	default:
++<<<<<<< HEAD
 +		mlx5_ib_dbg(dev, "unsupported qp type %d\n",
++=======
+ 		goto out;
+ 	}
+ 
+ 	return 0;
+ 
+ out:
+ 	mlx5_ib_dbg(dev, "Unsupported QP type %d\n", attr->qp_type);
+ 	return -EOPNOTSUPP;
+ }
+ 
+ static int check_valid_flow(struct mlx5_ib_dev *dev, struct ib_pd *pd,
+ 			    struct ib_qp_init_attr *attr,
+ 			    struct ib_udata *udata)
+ {
+ 	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
+ 		udata, struct mlx5_ib_ucontext, ibucontext);
+ 
+ 	if (!udata) {
+ 		/* Kernel create_qp callers */
+ 		if (attr->rwq_ind_tbl)
+ 			return -EOPNOTSUPP;
+ 
+ 		switch (attr->qp_type) {
+ 		case IB_QPT_RAW_PACKET:
+ 		case IB_QPT_DRIVER:
+ 			return -EOPNOTSUPP;
+ 		default:
+ 			return 0;
+ 		}
+ 	}
+ 
+ 	/* Userspace create_qp callers */
+ 	if (attr->qp_type == IB_QPT_RAW_PACKET && !ucontext->cqe_version) {
+ 		mlx5_ib_dbg(dev,
+ 			"Raw Packet QP is only supported for CQE version > 0\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (attr->qp_type != IB_QPT_RAW_PACKET && attr->rwq_ind_tbl) {
+ 		mlx5_ib_dbg(dev,
+ 			    "Wrong QP type %d for the RWQ indirect table\n",
+ 			    attr->qp_type);
+ 		return -EINVAL;
+ 	}
+ 
+ 	switch (attr->qp_type) {
+ 	case IB_QPT_SMI:
+ 	case MLX5_IB_QPT_HW_GSI:
+ 	case MLX5_IB_QPT_REG_UMR:
+ 	case IB_QPT_GSI:
+ 		mlx5_ib_dbg(dev, "Kernel doesn't support QP type %d\n",
+ 			    attr->qp_type);
+ 		return -EINVAL;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	/*
+ 	 * We don't need to see this warning, it means that kernel code
+ 	 * missing ib_pd. Placed here to catch developer's mistakes.
+ 	 */
+ 	WARN_ONCE(!pd && attr->qp_type != IB_QPT_XRC_TGT,
+ 		  "There is a missing PD pointer assignment\n");
+ 	return 0;
+ }
+ 
+ static int process_vendor_flags(struct mlx5_ib_qp *qp,
+ 				struct ib_qp_init_attr *attr,
+ 				struct mlx5_ib_create_qp *ucmd)
+ {
+ 	switch (ucmd->flags & (MLX5_QP_FLAG_TYPE_DCT | MLX5_QP_FLAG_TYPE_DCI)) {
+ 	case MLX5_QP_FLAG_TYPE_DCI:
+ 		qp->qp_sub_type = MLX5_IB_QPT_DCI;
+ 		break;
+ 	case MLX5_QP_FLAG_TYPE_DCT:
+ 		qp->qp_sub_type = MLX5_IB_QPT_DCT;
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int create_driver_qp(struct ib_pd *pd, struct mlx5_ib_qp *qp,
+ 			    struct ib_qp_init_attr *attr,
+ 			    struct mlx5_ib_create_qp *ucmd,
+ 			    struct ib_udata *udata)
+ {
+ 	struct mlx5_ib_dev *mdev = to_mdev(pd->device);
+ 	int ret = -EINVAL;
+ 
+ 	switch (qp->qp_sub_type) {
+ 	case MLX5_IB_QPT_DCT:
+ 		if (!attr->srq || !attr->recv_cq)
+ 			goto out;
+ 
+ 		ret = create_dct(pd, qp, attr, ucmd, udata);
+ 		break;
+ 	case MLX5_IB_QPT_DCI:
+ 		if (attr->cap.max_recv_wr || attr->cap.max_recv_sge)
+ 			goto out;
+ 
+ 		ret = create_qp_common(mdev, pd, attr, ucmd, udata, qp);
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ out:	return ret;
+ }
+ 
+ static size_t process_udata_size(struct ib_qp_init_attr *attr,
+ 				 struct ib_udata *udata)
+ {
+ 	size_t ucmd = sizeof(struct mlx5_ib_create_qp);
+ 
+ 	if (attr->qp_type == IB_QPT_DRIVER)
+ 		return (udata->inlen < ucmd) ? 0 : ucmd;
+ 
+ 	return ucmd;
+ }
+ 
+ static int create_raw_qp(struct ib_pd *pd, struct mlx5_ib_qp *qp,
+ 			 struct ib_qp_init_attr *attr,
+ 			 struct mlx5_ib_create_qp *ucmd, struct ib_udata *udata)
+ {
+ 	struct mlx5_ib_dev *dev = to_mdev(pd->device);
+ 
+ 	if (attr->rwq_ind_tbl)
+ 		return create_rss_raw_qp_tir(pd, qp, attr, udata);
+ 
+ 	return create_qp_common(dev, pd, attr, ucmd, udata, qp);
+ }
+ 
+ struct ib_qp *mlx5_ib_create_qp(struct ib_pd *pd,
+ 				struct ib_qp_init_attr *init_attr,
+ 				struct ib_udata *udata)
+ {
+ 	struct mlx5_ib_create_qp ucmd = {};
+ 	struct mlx5_ib_dev *dev;
+ 	struct mlx5_ib_qp *qp;
+ 	u16 xrcdn = 0;
+ 	int err;
+ 
+ 	dev = pd ? to_mdev(pd->device) :
+ 		   to_mdev(to_mxrcd(init_attr->xrcd)->ibxrcd.device);
+ 
+ 	err = check_qp_type(dev, init_attr);
+ 	if (err) {
+ 		mlx5_ib_dbg(dev, "Unsupported QP type %d\n",
++>>>>>>> 5d0dc3d96c7b (RDMA/mlx5: Initial separation of RAW_PACKET QP from common flow)
  			    init_attr->qp_type);
 -		return ERR_PTR(err);
 +		/* Don't support raw QPs */
 +		return ERR_PTR(-EINVAL);
  	}
  
++<<<<<<< HEAD
 +	if (verbs_init_attr->qp_type == IB_QPT_DRIVER)
 +		qp->qp_sub_type = init_attr->qp_type;
++=======
+ 	err = check_valid_flow(dev, pd, init_attr, udata);
+ 	if (err)
+ 		return ERR_PTR(err);
+ 
+ 	if (init_attr->qp_type == IB_QPT_GSI)
+ 		return mlx5_ib_gsi_create_qp(pd, init_attr);
+ 
+ 	if (udata && !init_attr->rwq_ind_tbl) {
+ 		size_t inlen =
+ 			process_udata_size(init_attr, udata);
+ 
+ 		if (!inlen)
+ 			return ERR_PTR(-EINVAL);
+ 
+ 		err = ib_copy_from_udata(&ucmd, udata, inlen);
+ 		if (err)
+ 			return ERR_PTR(err);
+ 	}
+ 
+ 	qp = kzalloc(sizeof(*qp), GFP_KERNEL);
+ 	if (!qp)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	if (init_attr->qp_type == IB_QPT_DRIVER) {
+ 		err = process_vendor_flags(qp, init_attr, &ucmd);
+ 		if (err)
+ 			goto free_qp;
+ 	}
+ 
+ 	if (init_attr->qp_type == IB_QPT_XRC_TGT)
+ 		xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
+ 
+ 	switch (init_attr->qp_type) {
+ 	case IB_QPT_DRIVER:
+ 		err = create_driver_qp(pd, qp, init_attr, &ucmd, udata);
+ 		break;
+ 	case IB_QPT_RAW_PACKET:
+ 		err = create_raw_qp(pd, qp, init_attr, &ucmd, udata);
+ 		break;
+ 	default:
+ 		err = create_qp_common(dev, pd, init_attr,
+ 				       (udata) ? &ucmd : NULL, udata, qp);
+ 	}
+ 	if (err) {
+ 		mlx5_ib_dbg(dev, "create_qp_common failed\n");
+ 		goto free_qp;
+ 	}
+ 
+ 	if (is_qp0(init_attr->qp_type))
+ 		qp->ibqp.qp_num = 0;
+ 	else if (is_qp1(init_attr->qp_type))
+ 		qp->ibqp.qp_num = 1;
+ 	else
+ 		qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
+ 
+ 	qp->trans_qp.xrcdn = xrcdn;
++>>>>>>> 5d0dc3d96c7b (RDMA/mlx5: Initial separation of RAW_PACKET QP from common flow)
  
  	return &qp->ibqp;
 -
 -free_qp:
 -	kfree(qp);
 -	return ERR_PTR(err);
  }
  
  static int mlx5_ib_destroy_dct(struct mlx5_ib_qp *mqp)
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
