vfs: only allow FSSETXATTR to set DAX flag on files and dirs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit dbc77f31e58b2902a5e7643761c04bf69f57a32a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/dbc77f31.failed

The DAX flag only applies to files and directories, so don't let it get
set for other types of files.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
(cherry picked from commit dbc77f31e58b2902a5e7643761c04bf69f57a32a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/inode.c
diff --cc fs/inode.c
index ad98bee52a46,446d05e25f39..000000000000
--- a/fs/inode.c
+++ b/fs/inode.c
@@@ -2214,6 -2167,92 +2214,95 @@@ struct timespec64 current_time(struct i
  		return now;
  	}
  
 -	return timespec64_trunc(now, inode->i_sb->s_time_gran);
 +	return timestamp_truncate(now, inode);
  }
  EXPORT_SYMBOL(current_time);
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * Generic function to check FS_IOC_SETFLAGS values and reject any invalid
+  * configurations.
+  *
+  * Note: the caller should be holding i_mutex, or else be sure that they have
+  * exclusive access to the inode structure.
+  */
+ int vfs_ioc_setflags_prepare(struct inode *inode, unsigned int oldflags,
+ 			     unsigned int flags)
+ {
+ 	/*
+ 	 * The IMMUTABLE and APPEND_ONLY flags can only be changed by
+ 	 * the relevant capability.
+ 	 *
+ 	 * This test looks nicer. Thanks to Pauline Middelink
+ 	 */
+ 	if ((flags ^ oldflags) & (FS_APPEND_FL | FS_IMMUTABLE_FL) &&
+ 	    !capable(CAP_LINUX_IMMUTABLE))
+ 		return -EPERM;
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL(vfs_ioc_setflags_prepare);
+ 
+ /*
+  * Generic function to check FS_IOC_FSSETXATTR values and reject any invalid
+  * configurations.
+  *
+  * Note: the caller should be holding i_mutex, or else be sure that they have
+  * exclusive access to the inode structure.
+  */
+ int vfs_ioc_fssetxattr_check(struct inode *inode, const struct fsxattr *old_fa,
+ 			     struct fsxattr *fa)
+ {
+ 	/*
+ 	 * Can't modify an immutable/append-only file unless we have
+ 	 * appropriate permission.
+ 	 */
+ 	if ((old_fa->fsx_xflags ^ fa->fsx_xflags) &
+ 			(FS_XFLAG_IMMUTABLE | FS_XFLAG_APPEND) &&
+ 	    !capable(CAP_LINUX_IMMUTABLE))
+ 		return -EPERM;
+ 
+ 	/*
+ 	 * Project Quota ID state is only allowed to change from within the init
+ 	 * namespace. Enforce that restriction only if we are trying to change
+ 	 * the quota ID state. Everything else is allowed in user namespaces.
+ 	 */
+ 	if (current_user_ns() != &init_user_ns) {
+ 		if (old_fa->fsx_projid != fa->fsx_projid)
+ 			return -EINVAL;
+ 		if ((old_fa->fsx_xflags ^ fa->fsx_xflags) &
+ 				FS_XFLAG_PROJINHERIT)
+ 			return -EINVAL;
+ 	}
+ 
+ 	/* Check extent size hints. */
+ 	if ((fa->fsx_xflags & FS_XFLAG_EXTSIZE) && !S_ISREG(inode->i_mode))
+ 		return -EINVAL;
+ 
+ 	if ((fa->fsx_xflags & FS_XFLAG_EXTSZINHERIT) &&
+ 			!S_ISDIR(inode->i_mode))
+ 		return -EINVAL;
+ 
+ 	if ((fa->fsx_xflags & FS_XFLAG_COWEXTSIZE) &&
+ 	    !S_ISREG(inode->i_mode) && !S_ISDIR(inode->i_mode))
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * It is only valid to set the DAX flag on regular files and
+ 	 * directories on filesystems.
+ 	 */
+ 	if ((fa->fsx_xflags & FS_XFLAG_DAX) &&
+ 	    !(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode)))
+ 		return -EINVAL;
+ 
+ 	/* Extent size hints of zero turn off the flags. */
+ 	if (fa->fsx_extsize == 0)
+ 		fa->fsx_xflags &= ~(FS_XFLAG_EXTSIZE | FS_XFLAG_EXTSZINHERIT);
+ 	if (fa->fsx_cowextsize == 0)
+ 		fa->fsx_xflags &= ~FS_XFLAG_COWEXTSIZE;
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL(vfs_ioc_fssetxattr_check);
++>>>>>>> dbc77f31e58b (vfs: only allow FSSETXATTR to set DAX flag on files and dirs)
* Unmerged path fs/inode.c
