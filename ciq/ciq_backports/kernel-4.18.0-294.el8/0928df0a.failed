iwlwifi: mvm: tell firmware about required LTR delay

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Johannes Berg <johannes.berg@intel.com>
commit 0928df0a868c010c1dfb5269a23ffa2f9adc876b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0928df0a.failed

Some (integrated) devices need a longer LTR delay than the firmware
would typically apply, tell it about that.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
Link: https://lore.kernel.org/r/iwlwifi.20200418110539.24276ae2ad61.I8831a538f75893d5cee47b4a81f4b9b7fd0e8bea@changeid
(cherry picked from commit 0928df0a868c010c1dfb5269a23ffa2f9adc876b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/cfg/22000.c
#	drivers/net/wireless/intel/iwlwifi/fw/api/soc.h
#	drivers/net/wireless/intel/iwlwifi/iwl-config.h
#	drivers/net/wireless/intel/iwlwifi/mvm/fw.c
diff --cc drivers/net/wireless/intel/iwlwifi/cfg/22000.c
index 14efe07b7a3b,1f30d8fdf35d..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
+++ b/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
@@@ -240,6 -234,40 +240,43 @@@ static const struct iwl_ht_params iwl_2
  		},							\
  	}
  
++<<<<<<< HEAD
++=======
+ const struct iwl_cfg_trans_params iwl_qu_trans_cfg = {
+ 	.mq_rx_supported = true,
+ 	.use_tfh = true,
+ 	.rf_id = true,
+ 	.gen2 = true,
+ 	.device_family = IWL_DEVICE_FAMILY_22000,
+ 	.base_params = &iwl_22000_base_params,
+ 	.integrated = true,
+ 	.xtal_latency = 5000,
+ 	.ltr_delay = IWL_CFG_TRANS_LTR_DELAY_200US,
+ };
+ 
+ const struct iwl_cfg_trans_params iwl_qu_long_latency_trans_cfg = {
+ 	.mq_rx_supported = true,
+ 	.use_tfh = true,
+ 	.rf_id = true,
+ 	.gen2 = true,
+ 	.device_family = IWL_DEVICE_FAMILY_22000,
+ 	.base_params = &iwl_22000_base_params,
+ 	.integrated = true,
+ 	.xtal_latency = 12000,
+ 	.low_latency_xtal = true,
+ 	.ltr_delay = IWL_CFG_TRANS_LTR_DELAY_2500US,
+ };
+ 
+ const struct iwl_cfg_trans_params iwl_qnj_trans_cfg = {
+ 	.mq_rx_supported = true,
+ 	.use_tfh = true,
+ 	.rf_id = true,
+ 	.gen2 = true,
+ 	.device_family = IWL_DEVICE_FAMILY_22000,
+ 	.base_params = &iwl_22000_base_params,
+ };
+ 
++>>>>>>> 0928df0a868c (iwlwifi: mvm: tell firmware about required LTR delay)
  /*
   * If the device doesn't support HE, no need to have that many buffers.
   * 22000 devices can split multiple frames into a single RB, so fewer are
diff --cc drivers/net/wireless/intel/iwlwifi/fw/api/soc.h
index 5d1fb98fe667,0c6d7b3e1324..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/fw/api/soc.h
+++ b/drivers/net/wireless/intel/iwlwifi/fw/api/soc.h
@@@ -5,9 -5,9 +5,12 @@@
   *
   * GPL LICENSE SUMMARY
   *
-  * Copyright(c) 2012 - 2014 Intel Corporation. All rights reserved.
   * Copyright(c) 2013 - 2015 Intel Mobile Communications GmbH
   * Copyright(c) 2016 - 2017 Intel Deutschland GmbH
++<<<<<<< HEAD
++=======
+  * Copyright(c) 2012 - 2014, 2019 - 2020 Intel Corporation
++>>>>>>> 0928df0a868c (iwlwifi: mvm: tell firmware about required LTR delay)
   *
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of version 2 of the GNU General Public License as
@@@ -27,9 -27,9 +30,12 @@@
   *
   * BSD LICENSE
   *
-  * Copyright(c) 2012 - 2014 Intel Corporation. All rights reserved.
   * Copyright(c) 2013 - 2015 Intel Mobile Communications GmbH
   * Copyright(c) 2016 - 2017 Intel Deutschland GmbH
++<<<<<<< HEAD
++=======
+  * Copyright(c) 2012 - 2014, 2019 - 2020 Intel Corporation
++>>>>>>> 0928df0a868c (iwlwifi: mvm: tell firmware about required LTR delay)
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
@@@ -63,12 -63,15 +69,18 @@@
  #ifndef __iwl_fw_api_soc_h__
  #define __iwl_fw_api_soc_h__
  
 -#define SOC_CONFIG_CMD_FLAGS_DISCRETE		BIT(0)
 -#define SOC_CONFIG_CMD_FLAGS_LOW_LATENCY	BIT(1)
 +/* type of devices for defining SOC latency */
 +enum iwl_soc_device_types {
 +	SOC_CONFIG_CMD_INTEGRATED   = 0x0,
 +	SOC_CONFIG_CMD_DISCRETE     = 0x1,
 +};
  
+ #define SOC_FLAGS_LTR_APPLY_DELAY_MASK		0xc
+ #define SOC_FLAGS_LTR_APPLY_DELAY_NONE		0
+ #define SOC_FLAGS_LTR_APPLY_DELAY_200		1
+ #define SOC_FLAGS_LTR_APPLY_DELAY_2500		2
+ #define SOC_FLAGS_LTR_APPLY_DELAY_1820		3
+ 
  /**
   * struct iwl_soc_configuration_cmd - Set device stabilization latency
   *
diff --cc drivers/net/wireless/intel/iwlwifi/iwl-config.h
index 3c037661f3b0,9b31fcc37ace..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/iwl-config.h
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-config.h
@@@ -299,6 -307,9 +304,12 @@@ enum iwl_cfg_trans_ltr_delay 
   * @use_tfh: use TFH
   * @gen2: 22000 and on transport operation
   * @mq_rx_supported: multi-queue rx support
++<<<<<<< HEAD
++=======
+  * @integrated: discrete or integrated
+  * @low_latency_xtal: use the low latency xtal if supported
+  * @ltr_delay: LTR delay parameter, &enum iwl_cfg_trans_ltr_delay.
++>>>>>>> 0928df0a868c (iwlwifi: mvm: tell firmware about required LTR delay)
   */
  struct iwl_cfg_trans_params {
  	const struct iwl_base_params *base_params;
@@@ -308,7 -321,10 +319,14 @@@
  	    use_tfh:1,
  	    gen2:1,
  	    mq_rx_supported:1,
++<<<<<<< HEAD
 +	    bisr_workaround:1;
++=======
+ 	    integrated:1,
+ 	    low_latency_xtal:1,
+ 	    bisr_workaround:1,
+ 	    ltr_delay:2;
++>>>>>>> 0928df0a868c (iwlwifi: mvm: tell firmware about required LTR delay)
  };
  
  /**
diff --cc drivers/net/wireless/intel/iwlwifi/mvm/fw.c
index d53c2c147ef6,d6598339c55c..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/mvm/fw.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/fw.c
@@@ -90,13 -90,38 +90,45 @@@ struct iwl_mvm_alive_data 
  /* set device type and latency */
  static int iwl_set_soc_latency(struct iwl_mvm *mvm)
  {
 -	struct iwl_soc_configuration_cmd cmd = {};
 +	struct iwl_soc_configuration_cmd cmd;
  	int ret;
  
++<<<<<<< HEAD
 +	cmd.device_type = (mvm->trans->cfg->integrated) ?
 +		cpu_to_le32(SOC_CONFIG_CMD_INTEGRATED) :
 +		cpu_to_le32(SOC_CONFIG_CMD_DISCRETE);
 +	cmd.soc_latency = cpu_to_le32(mvm->trans->cfg->soc_latency);
++=======
+ 	/*
+ 	 * In VER_1 of this command, the discrete value is considered
+ 	 * an integer; In VER_2, it's a bitmask.  Since we have only 2
+ 	 * values in VER_1, this is backwards-compatible with VER_2,
+ 	 * as long as we don't set any other bits.
+ 	 */
+ 	if (!mvm->trans->trans_cfg->integrated)
+ 		cmd.flags = cpu_to_le32(SOC_CONFIG_CMD_FLAGS_DISCRETE);
+ 
+ 	BUILD_BUG_ON(IWL_CFG_TRANS_LTR_DELAY_NONE !=
+ 		     SOC_FLAGS_LTR_APPLY_DELAY_NONE);
+ 	BUILD_BUG_ON(IWL_CFG_TRANS_LTR_DELAY_200US !=
+ 		     SOC_FLAGS_LTR_APPLY_DELAY_200);
+ 	BUILD_BUG_ON(IWL_CFG_TRANS_LTR_DELAY_2500US !=
+ 		     SOC_FLAGS_LTR_APPLY_DELAY_2500);
+ 	BUILD_BUG_ON(IWL_CFG_TRANS_LTR_DELAY_1820US !=
+ 		     SOC_FLAGS_LTR_APPLY_DELAY_1820);
+ 
+ 	if (mvm->trans->trans_cfg->ltr_delay != IWL_CFG_TRANS_LTR_DELAY_NONE &&
+ 	    !WARN_ON(!mvm->trans->trans_cfg->integrated))
+ 		cmd.flags |= le32_encode_bits(mvm->trans->trans_cfg->ltr_delay,
+ 					      SOC_FLAGS_LTR_APPLY_DELAY_MASK);
+ 
+ 	if (iwl_fw_lookup_cmd_ver(mvm->fw, IWL_ALWAYS_LONG_GROUP,
+ 				  SCAN_REQ_UMAC) >= 2 &&
+ 	    mvm->trans->trans_cfg->low_latency_xtal)
+ 		cmd.flags |= cpu_to_le32(SOC_CONFIG_CMD_FLAGS_LOW_LATENCY);
+ 
+ 	cmd.latency = cpu_to_le32(mvm->trans->trans_cfg->xtal_latency);
++>>>>>>> 0928df0a868c (iwlwifi: mvm: tell firmware about required LTR delay)
  
  	ret = iwl_mvm_send_cmd_pdu(mvm, iwl_cmd_id(SOC_CONFIGURATION_CMD,
  						   SYSTEM_GROUP, 0), 0,
* Unmerged path drivers/net/wireless/intel/iwlwifi/cfg/22000.c
* Unmerged path drivers/net/wireless/intel/iwlwifi/fw/api/soc.h
* Unmerged path drivers/net/wireless/intel/iwlwifi/iwl-config.h
* Unmerged path drivers/net/wireless/intel/iwlwifi/mvm/fw.c
