iwlwifi: remove unnecessary cfg mangling for Qu C and QuZ with Jf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Luca Coelho <luciano.coelho@intel.com>
commit 68ceba3ff484d31d13a8e5ccc49b2c655aa7b83a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/68ceba3f.failed

Now that we identify the correct cfgs with the new tables for Qu step
C and QuZ with Jf, we can remove the mangling we do later on.

Change-Id: Ic01ce67db147e897ad2424f0e05a70a00d2c620e
	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
(cherry picked from commit 68ceba3ff484d31d13a8e5ccc49b2c655aa7b83a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/cfg/22000.c
#	drivers/net/wireless/intel/iwlwifi/iwl-config.h
#	drivers/net/wireless/intel/iwlwifi/pcie/drv.c
diff --cc drivers/net/wireless/intel/iwlwifi/cfg/22000.c
index 355af47c5f73,66f5df74a321..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
+++ b/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
@@@ -246,6 -266,64 +246,67 @@@ static const struct iwl_ht_params iwl_2
  #define IWL_NUM_RBDS_22000_HE		2048
  #define IWL_NUM_RBDS_AX210_HE		4096
  
++<<<<<<< HEAD
++=======
+ /*
+  * All JF radio modules are part of the 9000 series, but the MAC part
+  * looks more like 22000.  That's why this device is here, but called
+  * 9560 nevertheless.
+  */
+ const struct iwl_cfg iwl9560_qu_b0_jf_b0_cfg = {
+ 	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
+ 	IWL_DEVICE_22500,
+ 	.num_rbds = IWL_NUM_RBDS_NON_HE,
+ };
+ 
+ const struct iwl_cfg iwl9560_qu_c0_jf_b0_cfg = {
+ 	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
+ 	IWL_DEVICE_22500,
+ 	.num_rbds = IWL_NUM_RBDS_NON_HE,
+ };
+ 
+ const struct iwl_cfg iwl9560_quz_a0_jf_b0_cfg = {
+ 	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
+ 	IWL_DEVICE_22500,
+ 	/*
+ 	 * This device doesn't support receiving BlockAck with a large bitmap
+ 	 * so we need to restrict the size of transmitted aggregation to the
+ 	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
+ 	 */
+ 	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
+ 	.num_rbds = IWL_NUM_RBDS_NON_HE,
+ };
+ 
+ const struct iwl_cfg iwl9560_qnj_b0_jf_b0_cfg = {
+ 	.fw_name_pre = IWL_QNJ_B_JF_B_FW_PRE,
+ 	IWL_DEVICE_22500,
+ 	/*
+ 	 * This device doesn't support receiving BlockAck with a large bitmap
+ 	 * so we need to restrict the size of transmitted aggregation to the
+ 	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
+ 	 */
+ 	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
+ 	.num_rbds = IWL_NUM_RBDS_NON_HE,
+ };
+ 
+ const struct iwl_cfg_trans_params iwl_ax200_trans_cfg = {
+ 	.device_family = IWL_DEVICE_FAMILY_22000,
+ 	.base_params = &iwl_22000_base_params,
+ 	.mq_rx_supported = true,
+ 	.use_tfh = true,
+ 	.rf_id = true,
+ 	.gen2 = true,
+ 	.bisr_workaround = 1,
+ };
+ 
+ const char iwl_ax200_name[] = "Intel(R) Wi-Fi 6 AX200 160MHz";
+ 
+ const char iwl_ax200_killer_1650w_name[] =
+ 	"Killer(R) Wi-Fi 6 AX1650w 160MHz Wireless Network Adapter (200D2W)";
+ const char iwl_ax200_killer_1650x_name[] =
+ 	"Killer(R) Wi-Fi 6 AX1650x 160MHz Wireless Network Adapter (200NGW)";
+ 
++>>>>>>> 68ceba3ff484 (iwlwifi: remove unnecessary cfg mangling for Qu C and QuZ with Jf)
  const struct iwl_cfg iwl_ax101_cfg_qu_hr = {
  	.name = "Intel(R) Wi-Fi 6 AX101",
  	.fw_name_pre = IWL_22000_QU_B_HR_B_FW_PRE,
@@@ -367,212 -441,6 +428,215 @@@ const struct iwl_cfg iwl_ax200_cfg_cc 
  	.num_rbds = IWL_NUM_RBDS_22000_HE,
  };
  
 +const struct iwl_cfg killer1650x_2ax_cfg = {
 +	.name = "Killer(R) Wi-Fi 6 AX1650x 160MHz Wireless Network Adapter (200NGW)",
 +	.fw_name_pre = IWL_CC_A_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.trans.bisr_workaround = 1,
 +	.num_rbds = IWL_NUM_RBDS_22000_HE,
 +};
 +
 +const struct iwl_cfg killer1650w_2ax_cfg = {
 +	.name = "Killer(R) Wi-Fi 6 AX1650w 160MHz Wireless Network Adapter (200D2W)",
 +	.fw_name_pre = IWL_CC_A_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.trans.bisr_workaround = 1,
 +	.num_rbds = IWL_NUM_RBDS_22000_HE,
 +};
 +
++<<<<<<< HEAD
 +/*
 + * All JF radio modules are part of the 9000 series, but the MAC part
 + * looks more like 22000.  That's why this device is here, but called
 + * 9560 nevertheless.
 + */
 +const struct iwl_cfg iwl9461_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9461",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9462_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9462",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_160_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9461_2ac_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9461",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9462_2ac_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9462",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_160_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_qnj_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QNJ_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_160_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9461_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Dual Band Wireless AC 9461",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9462_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Dual Band Wireless AC 9462",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_killer_s_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Killer (R) Wireless-AC 1550s Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_killer_i_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Killer (R) Wireless-AC 1550i Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg killer1550i_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Killer (R) Wireless-AC 1550i Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg killer1550s_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Killer (R) Wireless-AC 1550s Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
++=======
++>>>>>>> 68ceba3ff484 (iwlwifi: remove unnecessary cfg mangling for Qu C and QuZ with Jf)
  const struct iwl_cfg killer1650s_2ax_cfg_qu_b0_hr_b0 = {
  	.name = "Killer(R) Wi-Fi 6 AX1650i 160MHz Wireless Network Adapter (201NGW)",
  	.fw_name_pre = IWL_22000_QU_B_HR_B_FW_PRE,
diff --cc drivers/net/wireless/intel/iwlwifi/iwl-config.h
index d95b1b513768,8549e8a39705..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/iwl-config.h
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-config.h
@@@ -541,34 -592,12 +541,41 @@@ extern const struct iwl_cfg iwl8260_2ac
  extern const struct iwl_cfg iwl8265_2ac_cfg;
  extern const struct iwl_cfg iwl8275_2ac_cfg;
  extern const struct iwl_cfg iwl4165_2ac_cfg;
 +extern const struct iwl_cfg iwl9160_2ac_cfg;
  extern const struct iwl_cfg iwl9260_2ac_cfg;
++<<<<<<< HEAD
 +extern const struct iwl_cfg iwl9260_2ac_160_cfg;
 +extern const struct iwl_cfg iwl9260_killer_2ac_cfg;
 +extern const struct iwl_cfg iwl9270_2ac_cfg;
 +extern const struct iwl_cfg iwl9460_2ac_cfg;
 +extern const struct iwl_cfg iwl9560_2ac_cfg;
 +extern const struct iwl_cfg iwl9560_2ac_cfg_quz_a0_jf_b0_soc;
 +extern const struct iwl_cfg iwl9560_2ac_160_cfg;
 +extern const struct iwl_cfg iwl9560_2ac_160_cfg_quz_a0_jf_b0_soc;
 +extern const struct iwl_cfg iwl9460_2ac_cfg_soc;
 +extern const struct iwl_cfg iwl9461_2ac_cfg_soc;
 +extern const struct iwl_cfg iwl9461_2ac_cfg_quz_a0_jf_b0_soc;
 +extern const struct iwl_cfg iwl9462_2ac_cfg_soc;
 +extern const struct iwl_cfg iwl9462_2ac_cfg_quz_a0_jf_b0_soc;
++=======
+ extern const struct iwl_cfg iwl9560_qu_b0_jf_b0_cfg;
+ extern const struct iwl_cfg iwl9560_qu_c0_jf_b0_cfg;
+ extern const struct iwl_cfg iwl9560_quz_a0_jf_b0_cfg;
+ extern const struct iwl_cfg iwl9560_qnj_b0_jf_b0_cfg;
++>>>>>>> 68ceba3ff484 (iwlwifi: remove unnecessary cfg mangling for Qu C and QuZ with Jf)
  extern const struct iwl_cfg iwl9560_2ac_cfg_soc;
 +extern const struct iwl_cfg iwl9560_2ac_160_cfg_soc;
 +extern const struct iwl_cfg iwl9560_killer_2ac_cfg_soc;
 +extern const struct iwl_cfg iwl9560_killer_s_2ac_cfg_soc;
 +extern const struct iwl_cfg iwl9560_killer_i_2ac_cfg_quz_a0_jf_b0_soc;
 +extern const struct iwl_cfg iwl9560_killer_s_2ac_cfg_quz_a0_jf_b0_soc;
 +extern const struct iwl_cfg iwl9460_2ac_cfg_shared_clk;
 +extern const struct iwl_cfg iwl9461_2ac_cfg_shared_clk;
 +extern const struct iwl_cfg iwl9462_2ac_cfg_shared_clk;
 +extern const struct iwl_cfg iwl9560_2ac_cfg_shared_clk;
 +extern const struct iwl_cfg iwl9560_2ac_160_cfg_shared_clk;
 +extern const struct iwl_cfg iwl9560_killer_2ac_cfg_shared_clk;
 +extern const struct iwl_cfg iwl9560_killer_s_2ac_cfg_shared_clk;
  extern const struct iwl_cfg iwl_ax101_cfg_qu_hr;
  extern const struct iwl_cfg iwl_ax101_cfg_qu_c0_hr_b0;
  extern const struct iwl_cfg iwl_ax101_cfg_quz_hr;
@@@ -586,17 -614,6 +593,20 @@@ extern const struct iwl_cfg killer1650s
  extern const struct iwl_cfg killer1650i_2ax_cfg_qu_c0_hr_b0;
  extern const struct iwl_cfg killer1650x_2ax_cfg;
  extern const struct iwl_cfg killer1650w_2ax_cfg;
++<<<<<<< HEAD
 +extern const struct iwl_cfg iwl9461_2ac_cfg_qu_b0_jf_b0;
 +extern const struct iwl_cfg iwl9462_2ac_cfg_qu_b0_jf_b0;
 +extern const struct iwl_cfg iwl9560_2ac_cfg_qu_b0_jf_b0;
 +extern const struct iwl_cfg iwl9560_2ac_160_cfg_qu_b0_jf_b0;
 +extern const struct iwl_cfg iwl9461_2ac_cfg_qu_c0_jf_b0;
 +extern const struct iwl_cfg iwl9462_2ac_cfg_qu_c0_jf_b0;
 +extern const struct iwl_cfg iwl9560_2ac_cfg_qu_c0_jf_b0;
 +extern const struct iwl_cfg iwl9560_2ac_160_cfg_qu_c0_jf_b0;
 +extern const struct iwl_cfg killer1550i_2ac_cfg_qu_b0_jf_b0;
 +extern const struct iwl_cfg killer1550s_2ac_cfg_qu_b0_jf_b0;
 +extern const struct iwl_cfg iwl22000_2ax_cfg_jf;
++=======
++>>>>>>> 68ceba3ff484 (iwlwifi: remove unnecessary cfg mangling for Qu C and QuZ with Jf)
  extern const struct iwl_cfg iwl22000_2ax_cfg_qnj_hr_a0_f0;
  extern const struct iwl_cfg iwl22000_2ax_cfg_qnj_hr_b0_f0;
  extern const struct iwl_cfg iwl22000_2ax_cfg_qnj_hr_b0;
diff --cc drivers/net/wireless/intel/iwlwifi/pcie/drv.c
index 5f336e51b685,ba4773e07bf2..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/pcie/drv.c
+++ b/drivers/net/wireless/intel/iwlwifi/pcie/drv.c
@@@ -1116,47 -1082,27 +1113,58 @@@ static int iwl_pci_probe(struct pci_de
  
  	/*
  	 * This is a hack to switch from Qu B0 to Qu C0.  We need to
- 	 * do this for all cfgs that use Qu B0.  All this code is in
- 	 * urgent need for a refactor, but for now this is the easiest
- 	 * thing to do to support Qu C-step.
+ 	 * do this for all cfgs that use Qu B0, except for those using
+ 	 * Jf, which have already been moved to the new table.  The
+ 	 * rest must be removed once we convert Qu with Hr as well.
  	 */
  	if (iwl_trans->hw_rev == CSR_HW_REV_TYPE_QU_C0) {
 -		if (iwl_trans->cfg == &iwl_ax101_cfg_qu_hr)
 +		if (cfg == &iwl_ax101_cfg_qu_hr)
  			iwl_trans->cfg = &iwl_ax101_cfg_qu_c0_hr_b0;
 -		else if (iwl_trans->cfg == &iwl_ax201_cfg_qu_hr)
 +		else if (cfg == &iwl_ax201_cfg_qu_hr)
  			iwl_trans->cfg = &iwl_ax201_cfg_qu_c0_hr_b0;
++<<<<<<< HEAD
 +		else if (cfg == &iwl9461_2ac_cfg_qu_b0_jf_b0)
 +			iwl_trans->cfg = &iwl9461_2ac_cfg_qu_c0_jf_b0;
 +		else if (cfg == &iwl9462_2ac_cfg_qu_b0_jf_b0)
 +			iwl_trans->cfg = &iwl9462_2ac_cfg_qu_c0_jf_b0;
 +		else if (cfg == &iwl9560_2ac_cfg_qu_b0_jf_b0)
 +			iwl_trans->cfg = &iwl9560_2ac_cfg_qu_c0_jf_b0;
 +		else if (cfg == &iwl9560_2ac_160_cfg_qu_b0_jf_b0)
 +			iwl_trans->cfg = &iwl9560_2ac_160_cfg_qu_c0_jf_b0;
 +		else if (cfg == &killer1650s_2ax_cfg_qu_b0_hr_b0)
++=======
+ 		else if (iwl_trans->cfg == &killer1650s_2ax_cfg_qu_b0_hr_b0)
++>>>>>>> 68ceba3ff484 (iwlwifi: remove unnecessary cfg mangling for Qu C and QuZ with Jf)
  			iwl_trans->cfg = &killer1650s_2ax_cfg_qu_c0_hr_b0;
 -		else if (iwl_trans->cfg == &killer1650i_2ax_cfg_qu_b0_hr_b0)
 +		else if (cfg == &killer1650i_2ax_cfg_qu_b0_hr_b0)
  			iwl_trans->cfg = &killer1650i_2ax_cfg_qu_c0_hr_b0;
  	}
  
  	/* same thing for QuZ... */
  	if (iwl_trans->hw_rev == CSR_HW_REV_TYPE_QUZ) {
++<<<<<<< HEAD
 +		if (cfg == &iwl_ax101_cfg_qu_hr)
 +			cfg = &iwl_ax101_cfg_quz_hr;
 +		else if (cfg == &iwl_ax201_cfg_qu_hr)
 +			cfg = &iwl_ax201_cfg_quz_hr;
 +		else if (iwl_trans->cfg == &killer1650s_2ax_cfg_qu_b0_hr_b0)
 +			iwl_trans->cfg = &iwl_ax1650s_cfg_quz_hr;
 +		else if (iwl_trans->cfg == &killer1650i_2ax_cfg_qu_b0_hr_b0)
 +			iwl_trans->cfg = &iwl_ax1650i_cfg_quz_hr;
 +		else if (cfg == &iwl9461_2ac_cfg_qu_b0_jf_b0)
 +			cfg = &iwl9461_2ac_cfg_quz_a0_jf_b0_soc;
 +		else if (cfg == &iwl9462_2ac_cfg_qu_b0_jf_b0)
 +			cfg = &iwl9462_2ac_cfg_quz_a0_jf_b0_soc;
 +		else if (cfg == &iwl9560_2ac_cfg_qu_b0_jf_b0)
 +			cfg = &iwl9560_2ac_cfg_quz_a0_jf_b0_soc;
 +		else if (cfg == &iwl9560_2ac_160_cfg_qu_b0_jf_b0)
 +			cfg = &iwl9560_2ac_160_cfg_quz_a0_jf_b0_soc;
++=======
+ 		if (iwl_trans->cfg == &iwl_ax101_cfg_qu_hr)
+ 			iwl_trans->cfg = &iwl_ax101_cfg_quz_hr;
+ 		else if (iwl_trans->cfg == &iwl_ax201_cfg_qu_hr)
+ 			iwl_trans->cfg = &iwl_ax201_cfg_quz_hr;
++>>>>>>> 68ceba3ff484 (iwlwifi: remove unnecessary cfg mangling for Qu C and QuZ with Jf)
  	}
  
  #endif
* Unmerged path drivers/net/wireless/intel/iwlwifi/cfg/22000.c
* Unmerged path drivers/net/wireless/intel/iwlwifi/iwl-config.h
* Unmerged path drivers/net/wireless/intel/iwlwifi/pcie/drv.c
