mm, page_alloc: always use a captured page regardless of compaction result

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mel Gorman <mgorman@techsingularity.net>
commit ee8ab0eeb49bd3982090c8f14dc9cc65bcd13c5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ee8ab0ee.failed

During the development of commit 5e1f0f098b46 ("mm, compaction: capture
a page under direct compaction"), a paranoid check was added to ensure
that if a captured page was available after compaction that it was
consistent with the final state of compaction.  The intent was to catch
serious programming bugs such as using a stale page pointer and causing
corruption problems.

However, it is possible to get a captured page even if compaction was
unsuccessful if an interrupt triggered and happened to free pages in
interrupt context that got merged into a suitable high-order page.  It's
highly unlikely but Li Wang did report the following warning on s390
occuring when testing OOM handling.  Note that the warning is slightly
edited for clarity.

  WARNING: CPU: 0 PID: 9783 at mm/page_alloc.c:3777 __alloc_pages_direct_compact+0x182/0x190
  Modules linked in: rpcsec_gss_krb5 auth_rpcgss nfsv4 dns_resolver nfs
    lockd grace fscache sunrpc pkey ghash_s390 prng xts aes_s390
    des_s390 des_generic sha512_s390 zcrypt_cex4 zcrypt vmur binfmt_misc
    ip_tables xfs libcrc32c dasd_fba_mod qeth_l2 dasd_eckd_mod dasd_mod
    qeth qdio lcs ctcm ccwgroup fsm dm_mirror dm_region_hash dm_log
    dm_mod
  CPU: 0 PID: 9783 Comm: copy.sh Kdump: loaded Not tainted 5.1.0-rc 5 #1

This patch simply removes the check entirely instead of trying to be
clever about pages freed from interrupt context.  If a serious
programming error was introduced, it is highly likely to be caught by
prep_new_page() instead.

Link: http://lkml.kernel.org/r/20190419085133.GH18914@techsingularity.net
Fixes: 5e1f0f098b46 ("mm, compaction: capture a page under direct compaction")
	Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
	Reported-by: Li Wang <liwang@redhat.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ee8ab0eeb49bd3982090c8f14dc9cc65bcd13c5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index 2e8629750b09,d167c48d913c..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -3660,9 -3786,6 +3660,12 @@@ __alloc_pages_direct_compact(gfp_t gfp_
  	memalloc_noreclaim_restore(noreclaim_flag);
  	psi_memstall_leave(&pflags);
  
++<<<<<<< HEAD
 +	if (*compact_result <= COMPACT_INACTIVE)
 +		return NULL;
 +
++=======
++>>>>>>> ee8ab0eeb49b (mm, page_alloc: always use a captured page regardless of compaction result)
  	/*
  	 * At least in one zone compaction wasn't deferred or skipped, so let's
  	 * count a compaction stall
* Unmerged path mm/page_alloc.c
