bpf: Make cgroup storages shared between programs on the same cgroup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author YiFei Zhu <zhuyifei@google.com>
commit 7d9c3427894fe70d1347b4820476bf37736d2ff0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7d9c3427.failed

This change comes in several parts:

One, the restriction that the CGROUP_STORAGE map can only be used
by one program is removed. This results in the removal of the field
'aux' in struct bpf_cgroup_storage_map, and removal of relevant
code associated with the field, and removal of now-noop functions
bpf_free_cgroup_storage and bpf_cgroup_storage_release.

Second, we permit a key of type u64 as the key to the map.
Providing such a key type indicates that the map should ignore
attach type when comparing map keys. However, for simplicity newly
linked storage will still have the attach type at link time in
its key struct. cgroup_storage_check_btf is adapted to accept
u64 as the type of the key.

Third, because the storages are now shared, the storages cannot
be unconditionally freed on program detach. There could be two
ways to solve this issue:
* A. Reference count the usage of the storages, and free when the
     last program is detached.
* B. Free only when the storage is impossible to be referred to
     again, i.e. when either the cgroup_bpf it is attached to, or
     the map itself, is freed.
Option A has the side effect that, when the user detach and
reattach a program, whether the program gets a fresh storage
depends on whether there is another program attached using that
storage. This could trigger races if the user is multi-threaded,
and since nondeterminism in data races is evil, go with option B.

The both the map and the cgroup_bpf now tracks their associated
storages, and the storage unlink and free are removed from
cgroup_bpf_detach and added to cgroup_bpf_release and
cgroup_storage_map_free. The latter also new holds the cgroup_mutex
to prevent any races with the former.

Fourth, on attach, we reuse the old storage if the key already
exists in the map, via cgroup_storage_lookup. If the storage
does not exist yet, we create a new one, and publish it at the
last step in the attach process. This does not create a race
condition because for the whole attach the cgroup_mutex is held.
We keep track of an array of new storages that was allocated
and if the process fails only the new storages would get freed.

	Signed-off-by: YiFei Zhu <zhuyifei@google.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/d5401c6106728a00890401190db40020a1f84ff1.1595565795.git.zhuyifei@google.com
(cherry picked from commit 7d9c3427894fe70d1347b4820476bf37736d2ff0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/core.c
#	kernel/bpf/local_storage.c
diff --cc kernel/bpf/core.c
index 807b973cb465,bde93344164d..000000000000
--- a/kernel/bpf/core.c
+++ b/kernel/bpf/core.c
@@@ -2047,18 -2097,6 +2047,21 @@@ int bpf_prog_array_copy_info(struct bpf
  								     : 0;
  }
  
++<<<<<<< HEAD
 +static void bpf_free_cgroup_storage(struct bpf_prog_aux *aux)
 +{
 +	enum bpf_cgroup_storage_type stype;
 +
 +	for_each_cgroup_storage_type(stype) {
 +		if (!aux->cgroup_storage[stype])
 +			continue;
 +		bpf_cgroup_storage_release(aux,
 +					   aux->cgroup_storage[stype]);
 +	}
 +}
 +
++=======
++>>>>>>> 7d9c3427894f (bpf: Make cgroup storages shared between programs on the same cgroup)
  void __bpf_free_used_maps(struct bpf_prog_aux *aux,
  			  struct bpf_map **used_maps, u32 len)
  {
diff --cc kernel/bpf/local_storage.c
index 25fda792fa51,3b2c70197d78..000000000000
--- a/kernel/bpf/local_storage.c
+++ b/kernel/bpf/local_storage.c
@@@ -335,40 -362,55 +362,74 @@@ static int cgroup_storage_check_btf(con
  				    const struct btf_type *key_type,
  				    const struct btf_type *value_type)
  {
- 	struct btf_member *m;
- 	u32 offset, size;
- 
- 	/* Key is expected to be of struct bpf_cgroup_storage_key type,
- 	 * which is:
- 	 * struct bpf_cgroup_storage_key {
- 	 *	__u64	cgroup_inode_id;
- 	 *	__u32	attach_type;
- 	 * };
- 	 */
- 
- 	/*
- 	 * Key_type must be a structure with two fields.
- 	 */
- 	if (BTF_INFO_KIND(key_type->info) != BTF_KIND_STRUCT ||
- 	    BTF_INFO_VLEN(key_type->info) != 2)
- 		return -EINVAL;
- 
+ 	if (attach_type_isolated(map)) {
+ 		struct btf_member *m;
+ 		u32 offset, size;
+ 
+ 		/* Key is expected to be of struct bpf_cgroup_storage_key type,
+ 		 * which is:
+ 		 * struct bpf_cgroup_storage_key {
+ 		 *	__u64	cgroup_inode_id;
+ 		 *	__u32	attach_type;
+ 		 * };
+ 		 */
+ 
+ 		/*
+ 		 * Key_type must be a structure with two fields.
+ 		 */
+ 		if (BTF_INFO_KIND(key_type->info) != BTF_KIND_STRUCT ||
+ 		    BTF_INFO_VLEN(key_type->info) != 2)
+ 			return -EINVAL;
+ 
++<<<<<<< HEAD
 +	/*
 +	 * The first field must be a 64 bit integer at 0 offset.
 +	 */
 +	m = (struct btf_member *)(key_type + 1);
 +	size = FIELD_SIZEOF(struct bpf_cgroup_storage_key, cgroup_inode_id);
 +	if (!btf_member_is_reg_int(btf, key_type, m, 0, size))
 +		return -EINVAL;
 +
 +	/*
 +	 * The second field must be a 32 bit integer at 64 bit offset.
 +	 */
 +	m++;
 +	offset = offsetof(struct bpf_cgroup_storage_key, attach_type);
 +	size = FIELD_SIZEOF(struct bpf_cgroup_storage_key, attach_type);
 +	if (!btf_member_is_reg_int(btf, key_type, m, offset, size))
 +		return -EINVAL;
++=======
+ 		/*
+ 		 * The first field must be a 64 bit integer at 0 offset.
+ 		 */
+ 		m = (struct btf_member *)(key_type + 1);
+ 		size = sizeof_field(struct bpf_cgroup_storage_key, cgroup_inode_id);
+ 		if (!btf_member_is_reg_int(btf, key_type, m, 0, size))
+ 			return -EINVAL;
+ 
+ 		/*
+ 		 * The second field must be a 32 bit integer at 64 bit offset.
+ 		 */
+ 		m++;
+ 		offset = offsetof(struct bpf_cgroup_storage_key, attach_type);
+ 		size = sizeof_field(struct bpf_cgroup_storage_key, attach_type);
+ 		if (!btf_member_is_reg_int(btf, key_type, m, offset, size))
+ 			return -EINVAL;
+ 	} else {
+ 		u32 int_data;
+ 
+ 		/*
+ 		 * Key is expected to be u64, which stores the cgroup_inode_id
+ 		 */
+ 
+ 		if (BTF_INFO_KIND(key_type->info) != BTF_KIND_INT)
+ 			return -EINVAL;
+ 
+ 		int_data = *(u32 *)(key_type + 1);
+ 		if (BTF_INT_BITS(int_data) != 64 || BTF_INT_OFFSET(int_data))
+ 			return -EINVAL;
+ 	}
++>>>>>>> 7d9c3427894f (bpf: Make cgroup storages shared between programs on the same cgroup)
  
  	return 0;
  }
diff --git a/include/linux/bpf-cgroup.h b/include/linux/bpf-cgroup.h
index b7b6e86ffbd8..7eb2fb18f5fd 100644
--- a/include/linux/bpf-cgroup.h
+++ b/include/linux/bpf-cgroup.h
@@ -48,7 +48,8 @@ struct bpf_cgroup_storage {
 	};
 	struct bpf_cgroup_storage_map *map;
 	struct bpf_cgroup_storage_key key;
-	struct list_head list;
+	struct list_head list_map;
+	struct list_head list_cg;
 	struct rb_node node;
 	struct rcu_head rcu;
 };
@@ -96,6 +97,9 @@ struct cgroup_bpf {
 		u32 flags[RH_MAX_BPF_ATTACH_TYPE]
 	)
 
+	/* list of cgroup shared storages */
+	struct list_head storages;
+
 	/* temp storage for effective prog array used by prog_attach/detach */
 	struct bpf_prog_array *inactive;
 
@@ -194,6 +198,9 @@ static inline void bpf_cgroup_storage_set(struct bpf_cgroup_storage
 		this_cpu_write(bpf_cgroup_storage[stype], storage[stype]);
 }
 
+struct bpf_cgroup_storage *
+cgroup_storage_lookup(struct bpf_cgroup_storage_map *map,
+		      void *key, bool locked);
 struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *prog,
 					enum bpf_cgroup_storage_type stype);
 void bpf_cgroup_storage_free(struct bpf_cgroup_storage *storage);
@@ -202,7 +209,6 @@ void bpf_cgroup_storage_link(struct bpf_cgroup_storage *storage,
 			     enum bpf_attach_type type);
 void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *storage);
 int bpf_cgroup_storage_assign(struct bpf_prog_aux *aux, struct bpf_map *map);
-void bpf_cgroup_storage_release(struct bpf_prog_aux *aux, struct bpf_map *map);
 
 int bpf_percpu_cgroup_storage_copy(struct bpf_map *map, void *key, void *value);
 int bpf_percpu_cgroup_storage_update(struct bpf_map *map, void *key,
@@ -413,8 +419,6 @@ static inline void bpf_cgroup_storage_set(
 	struct bpf_cgroup_storage *storage[MAX_BPF_CGROUP_STORAGE_TYPE]) {}
 static inline int bpf_cgroup_storage_assign(struct bpf_prog_aux *aux,
 					    struct bpf_map *map) { return 0; }
-static inline void bpf_cgroup_storage_release(struct bpf_prog_aux *aux,
-					      struct bpf_map *map) {}
 static inline struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(
 	struct bpf_prog *prog, enum bpf_cgroup_storage_type stype) { return NULL; }
 static inline void bpf_cgroup_storage_free(
diff --git a/kernel/bpf/cgroup.c b/kernel/bpf/cgroup.c
index b705a035c637..d9067e554aad 100644
--- a/kernel/bpf/cgroup.c
+++ b/kernel/bpf/cgroup.c
@@ -40,17 +40,34 @@ static void bpf_cgroup_storages_free(struct bpf_cgroup_storage *storages[])
 }
 
 static int bpf_cgroup_storages_alloc(struct bpf_cgroup_storage *storages[],
-				     struct bpf_prog *prog)
+				     struct bpf_cgroup_storage *new_storages[],
+				     enum bpf_attach_type type,
+				     struct bpf_prog *prog,
+				     struct cgroup *cgrp)
 {
 	enum bpf_cgroup_storage_type stype;
+	struct bpf_cgroup_storage_key key;
+	struct bpf_map *map;
+
+	key.cgroup_inode_id = cgroup_id(cgrp);
+	key.attach_type = type;
 
 	for_each_cgroup_storage_type(stype) {
+		map = prog->aux->cgroup_storage[stype];
+		if (!map)
+			continue;
+
+		storages[stype] = cgroup_storage_lookup((void *)map, &key, false);
+		if (storages[stype])
+			continue;
+
 		storages[stype] = bpf_cgroup_storage_alloc(prog, stype);
 		if (IS_ERR(storages[stype])) {
-			storages[stype] = NULL;
-			bpf_cgroup_storages_free(storages);
+			bpf_cgroup_storages_free(new_storages);
 			return -ENOMEM;
 		}
+
+		new_storages[stype] = storages[stype];
 	}
 
 	return 0;
@@ -66,7 +83,7 @@ static void bpf_cgroup_storages_assign(struct bpf_cgroup_storage *dst[],
 }
 
 static void bpf_cgroup_storages_link(struct bpf_cgroup_storage *storages[],
-				     struct cgroup* cgrp,
+				     struct cgroup *cgrp,
 				     enum bpf_attach_type attach_type)
 {
 	enum bpf_cgroup_storage_type stype;
@@ -75,14 +92,6 @@ static void bpf_cgroup_storages_link(struct bpf_cgroup_storage *storages[],
 		bpf_cgroup_storage_link(storages[stype], cgrp, attach_type);
 }
 
-static void bpf_cgroup_storages_unlink(struct bpf_cgroup_storage *storages[])
-{
-	enum bpf_cgroup_storage_type stype;
-
-	for_each_cgroup_storage_type(stype)
-		bpf_cgroup_storage_unlink(storages[stype]);
-}
-
 /* Called when bpf_cgroup_link is auto-detached from dying cgroup.
  * It drops cgroup and bpf_prog refcounts, and marks bpf_link as defunct. It
  * doesn't free link memory, which will eventually be done by bpf_link's
@@ -104,22 +113,23 @@ static void cgroup_bpf_release(struct work_struct *work)
 	struct cgroup *p, *cgrp = container_of(work, struct cgroup,
 					       bpf.release_work);
 	struct bpf_prog_array *old_array;
+	struct list_head *storages = &cgrp->bpf.storages;
+	struct bpf_cgroup_storage *storage, *stmp;
+
 	unsigned int type;
 
 	mutex_lock(&cgroup_mutex);
 
 	for (type = 0; type < ARRAY_SIZE(cgrp->bpf.progs); type++) {
 		struct list_head *progs = &cgrp->bpf.progs[type];
-		struct bpf_prog_list *pl, *tmp;
+		struct bpf_prog_list *pl, *pltmp;
 
-		list_for_each_entry_safe(pl, tmp, progs, node) {
+		list_for_each_entry_safe(pl, pltmp, progs, node) {
 			list_del(&pl->node);
 			if (pl->prog)
 				bpf_prog_put(pl->prog);
 			if (pl->link)
 				bpf_cgroup_link_auto_detach(pl->link);
-			bpf_cgroup_storages_unlink(pl->storage);
-			bpf_cgroup_storages_free(pl->storage);
 			kfree(pl);
 			static_branch_dec(&cgroup_bpf_enabled_key);
 		}
@@ -129,6 +139,11 @@ static void cgroup_bpf_release(struct work_struct *work)
 		bpf_prog_array_free(old_array);
 	}
 
+	list_for_each_entry_safe(storage, stmp, storages, list_cg) {
+		bpf_cgroup_storage_unlink(storage);
+		bpf_cgroup_storage_free(storage);
+	}
+
 	mutex_unlock(&cgroup_mutex);
 
 	for (p = cgroup_parent(cgrp); p; p = cgroup_parent(p))
@@ -293,6 +308,8 @@ int cgroup_bpf_inherit(struct cgroup *cgrp)
 	for (i = 0; i < NR; i++)
 		INIT_LIST_HEAD(&cgrp->bpf.progs[i]);
 
+	INIT_LIST_HEAD(&cgrp->bpf.storages);
+
 	for (i = 0; i < NR; i++)
 		if (compute_effective_progs(cgrp, i, &arrays[i]))
 			goto cleanup;
@@ -425,7 +442,7 @@ int __cgroup_bpf_attach(struct cgroup *cgrp,
 	struct list_head *progs = &cgrp->bpf.progs[type];
 	struct bpf_prog *old_prog = NULL;
 	struct bpf_cgroup_storage *storage[MAX_BPF_CGROUP_STORAGE_TYPE] = {};
-	struct bpf_cgroup_storage *old_storage[MAX_BPF_CGROUP_STORAGE_TYPE] = {};
+	struct bpf_cgroup_storage *new_storage[MAX_BPF_CGROUP_STORAGE_TYPE] = {};
 	struct bpf_prog_list *pl;
 	int err;
 
@@ -459,17 +476,16 @@ int __cgroup_bpf_attach(struct cgroup *cgrp,
 	if (IS_ERR(pl))
 		return PTR_ERR(pl);
 
-	if (bpf_cgroup_storages_alloc(storage, prog ? : link->link.prog))
+	if (bpf_cgroup_storages_alloc(storage, new_storage, type,
+				      prog ? : link->link.prog, cgrp))
 		return -ENOMEM;
 
 	if (pl) {
 		old_prog = pl->prog;
-		bpf_cgroup_storages_unlink(pl->storage);
-		bpf_cgroup_storages_assign(old_storage, pl->storage);
 	} else {
 		pl = kmalloc(sizeof(*pl), GFP_KERNEL);
 		if (!pl) {
-			bpf_cgroup_storages_free(storage);
+			bpf_cgroup_storages_free(new_storage);
 			return -ENOMEM;
 		}
 		list_add_tail(&pl->node, progs);
@@ -484,12 +500,11 @@ int __cgroup_bpf_attach(struct cgroup *cgrp,
 	if (err)
 		goto cleanup;
 
-	bpf_cgroup_storages_free(old_storage);
 	if (old_prog)
 		bpf_prog_put(old_prog);
 	else
 		static_branch_inc(&cgroup_bpf_enabled_key);
-	bpf_cgroup_storages_link(pl->storage, cgrp, type);
+	bpf_cgroup_storages_link(new_storage, cgrp, type);
 	return 0;
 
 cleanup:
@@ -497,9 +512,7 @@ int __cgroup_bpf_attach(struct cgroup *cgrp,
 		pl->prog = old_prog;
 		pl->link = NULL;
 	}
-	bpf_cgroup_storages_free(pl->storage);
-	bpf_cgroup_storages_assign(pl->storage, old_storage);
-	bpf_cgroup_storages_link(pl->storage, cgrp, type);
+	bpf_cgroup_storages_free(new_storage);
 	if (!old_prog) {
 		list_del(&pl->node);
 		kfree(pl);
@@ -683,8 +696,6 @@ int __cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
 
 	/* now can actually delete it from this cgroup list */
 	list_del(&pl->node);
-	bpf_cgroup_storages_unlink(pl->storage);
-	bpf_cgroup_storages_free(pl->storage);
 	kfree(pl);
 	if (list_empty(progs))
 		/* last program was detached, reset flags to zero */
* Unmerged path kernel/bpf/core.c
* Unmerged path kernel/bpf/local_storage.c
