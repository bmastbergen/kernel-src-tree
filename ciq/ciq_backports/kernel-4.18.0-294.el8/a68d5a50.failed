SUNRPC: Refresh the show_rqstp_flags() macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit a68d5a502bbacfbd31f98371f777d574b3a91baf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a68d5a50.failed

Ensure that show_rqstp_flags() can recognize and display the
RQ_AUTHERR flag, added in commit 83dd59a0b9af ("SUNRPC/nfs: Fix
return value for nfs4_callback_compound()") and the RQ_DATA flag,
added in commit ff3ac5c3dc23 ("SUNRPC: Add a server side
per-connection limit").

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit a68d5a502bbacfbd31f98371f777d574b3a91baf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/trace/events/sunrpc.h
diff --cc include/trace/events/sunrpc.h
index 075368198769,65d7dfbbc9cd..000000000000
--- a/include/trace/events/sunrpc.h
+++ b/include/trace/events/sunrpc.h
@@@ -1231,15 -1202,82 +1231,85 @@@ TRACE_EVENT(xs_stream_read_request
  			__entry->copied, __entry->reclen, __entry->offset)
  );
  
++<<<<<<< HEAD
++=======
+ 
+ DECLARE_EVENT_CLASS(svc_xdr_buf_class,
+ 	TP_PROTO(
+ 		const struct svc_rqst *rqst,
+ 		const struct xdr_buf *xdr
+ 	),
+ 
+ 	TP_ARGS(rqst, xdr),
+ 
+ 	TP_STRUCT__entry(
+ 		__field(u32, xid)
+ 		__field(const void *, head_base)
+ 		__field(size_t, head_len)
+ 		__field(const void *, tail_base)
+ 		__field(size_t, tail_len)
+ 		__field(unsigned int, page_len)
+ 		__field(unsigned int, msg_len)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__entry->xid = be32_to_cpu(rqst->rq_xid);
+ 		__entry->head_base = xdr->head[0].iov_base;
+ 		__entry->head_len = xdr->head[0].iov_len;
+ 		__entry->tail_base = xdr->tail[0].iov_base;
+ 		__entry->tail_len = xdr->tail[0].iov_len;
+ 		__entry->page_len = xdr->page_len;
+ 		__entry->msg_len = xdr->len;
+ 	),
+ 
+ 	TP_printk("xid=0x%08x head=[%p,%zu] page=%u tail=[%p,%zu] len=%u",
+ 		__entry->xid,
+ 		__entry->head_base, __entry->head_len, __entry->page_len,
+ 		__entry->tail_base, __entry->tail_len, __entry->msg_len
+ 	)
+ );
+ 
+ #define DEFINE_SVCXDRBUF_EVENT(name)					\
+ 		DEFINE_EVENT(svc_xdr_buf_class,				\
+ 				svc_xdr_##name,				\
+ 				TP_PROTO(				\
+ 					const struct svc_rqst *rqst,	\
+ 					const struct xdr_buf *xdr	\
+ 				),					\
+ 				TP_ARGS(rqst, xdr))
+ 
+ DEFINE_SVCXDRBUF_EVENT(recvfrom);
+ DEFINE_SVCXDRBUF_EVENT(sendto);
+ 
+ /*
+  * from include/linux/sunrpc/svc.h
+  */
+ #define SVC_RQST_FLAG_LIST						\
+ 	svc_rqst_flag(SECURE)						\
+ 	svc_rqst_flag(LOCAL)						\
+ 	svc_rqst_flag(USEDEFERRAL)					\
+ 	svc_rqst_flag(DROPME)						\
+ 	svc_rqst_flag(SPLICE_OK)					\
+ 	svc_rqst_flag(VICTIM)						\
+ 	svc_rqst_flag(BUSY)						\
+ 	svc_rqst_flag(DATA)						\
+ 	svc_rqst_flag_end(AUTHERR)
+ 
+ #undef svc_rqst_flag
+ #undef svc_rqst_flag_end
+ #define svc_rqst_flag(x)	TRACE_DEFINE_ENUM(RQ_##x);
+ #define svc_rqst_flag_end(x)	TRACE_DEFINE_ENUM(RQ_##x);
+ 
+ SVC_RQST_FLAG_LIST
+ 
+ #undef svc_rqst_flag
+ #undef svc_rqst_flag_end
+ #define svc_rqst_flag(x)	{ BIT(RQ_##x), #x },
+ #define svc_rqst_flag_end(x)	{ BIT(RQ_##x), #x }
+ 
++>>>>>>> a68d5a502bba (SUNRPC: Refresh the show_rqstp_flags() macro)
  #define show_rqstp_flags(flags)						\
- 	__print_flags(flags, "|",					\
- 		{ (1UL << RQ_SECURE),		"RQ_SECURE"},		\
- 		{ (1UL << RQ_LOCAL),		"RQ_LOCAL"},		\
- 		{ (1UL << RQ_USEDEFERRAL),	"RQ_USEDEFERRAL"},	\
- 		{ (1UL << RQ_DROPME),		"RQ_DROPME"},		\
- 		{ (1UL << RQ_SPLICE_OK),	"RQ_SPLICE_OK"},	\
- 		{ (1UL << RQ_VICTIM),		"RQ_VICTIM"},		\
- 		{ (1UL << RQ_BUSY),		"RQ_BUSY"})
+ 		__print_flags(flags, "|", SVC_RQST_FLAG_LIST)
  
  TRACE_EVENT(svc_recv,
  	TP_PROTO(struct svc_rqst *rqst, int len),
* Unmerged path include/trace/events/sunrpc.h
