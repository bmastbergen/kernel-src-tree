nvme: define constants for identification values

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Keith Busch <kbusch@kernel.org>
commit 92decf118f1da4c866515f80387f9cf4d48611d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/92decf11.failed

Improve code readability by defining the specification's constants that
the driver is using when decoding identification payloads.

	Signed-off-by: Keith Busch <kbusch@kernel.org>
	Reviewed-by: Bart van Assche <bvanassche@acm.org>
	Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
	Acked-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 92decf118f1da4c866515f80387f9cf4d48611d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/multipath.c
diff --cc drivers/nvme/host/multipath.c
index 8b9db3d66ae9,da78e499947a..000000000000
--- a/drivers/nvme/host/multipath.c
+++ b/drivers/nvme/host/multipath.c
@@@ -377,14 -372,12 +377,14 @@@ int nvme_mpath_alloc_disk(struct nvme_c
  	 * We also do this for private namespaces as the namespace sharing data could
  	 * change after a rescan.
  	 */
- 	if (!(ctrl->subsys->cmic & (1 << 1)) || !multipath)
+ 	if (!(ctrl->subsys->cmic & NVME_CTRL_CMIC_MULTI_CTRL) || !multipath)
  		return 0;
  
 -	q = blk_alloc_queue(nvme_ns_head_make_request, ctrl->numa_node);
 +	q = blk_alloc_queue_node(GFP_KERNEL, ctrl->numa_node);
  	if (!q)
  		goto out;
 +	q->queuedata = head;
 +	blk_queue_make_request(q, nvme_ns_head_make_request);
  	blk_queue_flag_set(QUEUE_FLAG_NONROT, q);
  	/* set to a default value for 512 until disk is validated */
  	blk_queue_logical_block_size(q, 512);
@@@ -701,7 -694,8 +701,12 @@@ int nvme_mpath_init(struct nvme_ctrl *c
  	int error;
  
  	/* check if multipath is enabled and we have the capability */
++<<<<<<< HEAD
 +	if (!ctrl->subsys || !(ctrl->subsys->cmic & (1 << 3)))
++=======
+ 	if (!multipath || !ctrl->subsys ||
+ 	    !(ctrl->subsys->cmic & NVME_CTRL_CMIC_ANA))
++>>>>>>> 92decf118f1d (nvme: define constants for identification values)
  		return 0;
  
  	ctrl->anacap = id->anacap;
diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index 2df400cb129d..f7b43e0abd1b 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -1910,13 +1910,13 @@ static void nvme_update_disk_info(struct gendisk *disk,
 		 * and whether it should be used instead of AWUPF. If NAWUPF ==
 		 * 0 then AWUPF must be used instead.
 		 */
-		if (id->nsfeat & (1 << 1) && id->nawupf)
+		if (id->nsfeat & NVME_NS_FEAT_ATOMICS && id->nawupf)
 			atomic_bs = (1 + le16_to_cpu(id->nawupf)) * bs;
 		else
 			atomic_bs = (1 + ns->ctrl->subsys->awupf) * bs;
 	}
 
-	if (id->nsfeat & (1 << 4)) {
+	if (id->nsfeat & NVME_NS_FEAT_IO_OPT) {
 		/* NPWG = Namespace Preferred Write Granularity */
 		phys_bs = bs * (1 + le16_to_cpu(id->npwg));
 		/* NOWS = Namespace Optimal Write Size */
@@ -1945,7 +1945,7 @@ static void nvme_update_disk_info(struct gendisk *disk,
 	nvme_config_discard(disk, ns);
 	nvme_config_write_zeroes(disk, ns);
 
-	if (id->nsattr & (1 << 0))
+	if (id->nsattr & NVME_NS_ATTR_RO)
 		set_disk_ro(disk, true);
 	else
 		set_disk_ro(disk, false);
@@ -2750,7 +2750,7 @@ static bool nvme_validate_cntlid(struct nvme_subsystem *subsys,
 			return false;
 		}
 
-		if ((id->cmic & (1 << 1)) ||
+		if ((id->cmic & NVME_CTRL_CMIC_MULTI_CTRL) ||
 		    (ctrl->opts && ctrl->opts->discovery_nqn))
 			continue;
 
@@ -3562,7 +3562,7 @@ static int nvme_init_ns_head(struct nvme_ns *ns, unsigned nsid,
 		struct nvme_id_ns *id)
 {
 	struct nvme_ctrl *ctrl = ns->ctrl;
-	bool is_shared = id->nmic & (1 << 0);
+	bool is_shared = id->nmic & NVME_NS_NMIC_SHARED;
 	struct nvme_ns_head *head = NULL;
 	struct nvme_ns_ids ids;
 	int ret = 0;
* Unmerged path drivers/nvme/host/multipath.c
diff --git a/include/linux/nvme.h b/include/linux/nvme.h
index b692cf3fd6f0..4ff1ff2f0541 100644
--- a/include/linux/nvme.h
+++ b/include/linux/nvme.h
@@ -307,6 +307,8 @@ struct nvme_id_ctrl {
 };
 
 enum {
+	NVME_CTRL_CMIC_MULTI_CTRL		= 1 << 1,
+	NVME_CTRL_CMIC_ANA			= 1 << 3,
 	NVME_CTRL_ONCS_COMPARE			= 1 << 0,
 	NVME_CTRL_ONCS_WRITE_UNCORRECTABLE	= 1 << 1,
 	NVME_CTRL_ONCS_DSM			= 1 << 2,
@@ -402,8 +404,12 @@ enum {
 
 enum {
 	NVME_NS_FEAT_THIN	= 1 << 0,
+	NVME_NS_FEAT_ATOMICS	= 1 << 1,
+	NVME_NS_FEAT_IO_OPT	= 1 << 4,
+	NVME_NS_ATTR_RO		= 1 << 0,
 	NVME_NS_FLBAS_LBA_MASK	= 0xf,
 	NVME_NS_FLBAS_META_EXT	= 0x10,
+	NVME_NS_NMIC_SHARED	= 1 << 0,
 	NVME_LBAF_RP_BEST	= 0,
 	NVME_LBAF_RP_BETTER	= 1,
 	NVME_LBAF_RP_GOOD	= 2,
