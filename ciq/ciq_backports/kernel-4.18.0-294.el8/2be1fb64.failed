usb: roles: intel: Enable static DRD mode for role switch

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Saranya Gopal <saranya.gopal@intel.com>
commit 2be1fb64dfeb2b1753328a5c4ac2259e16e53efd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/2be1fb64.failed

Enable static DRD mode in Intel platforms which guarantees
successful role switch all the time. This fixes issues like
software role switch failure after cold boot and issue with
role switch when USB 3.0 cable is used. But, do not enable
static DRD mode for Cherrytrail devices which rely on firmware
for role switch.

	Signed-off-by: Saranya Gopal <saranya.gopal@intel.com>
	Signed-off-by: Balaji Manoharan <m.balaji@intel.com>
	Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Reviewed-by: Hans de Goede <hdegoede@redhat.com>
	Tested-by: Hans de Goede <hdegoede@redhat.com>
Link: https://lore.kernel.org/r/1567079760-24822-2-git-send-email-saranya.gopal@intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2be1fb64dfeb2b1753328a5c4ac2259e16e53efd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/roles/intel-xhci-usb-role-switch.c
diff --cc drivers/usb/roles/intel-xhci-usb-role-switch.c
index 7325a84dd1c8,88d041601c51..000000000000
--- a/drivers/usb/roles/intel-xhci-usb-role-switch.c
+++ b/drivers/usb/roles/intel-xhci-usb-role-switch.c
@@@ -37,12 -44,9 +44,13 @@@
  struct intel_xhci_usb_data {
  	struct usb_role_switch *role_sw;
  	void __iomem *base;
+ 	bool enable_sw_switch;
  };
  
 +static const struct software_node intel_xhci_usb_node = {
 +	"intel-xhci-usb-sw",
 +};
 +
  static int intel_xhci_usb_set_role(struct device *dev, enum usb_role role)
  {
  	struct intel_xhci_usb_data *data = dev_get_drvdata(dev);
@@@ -147,20 -167,12 +167,25 @@@ static int intel_xhci_usb_probe(struct 
  
  	platform_set_drvdata(pdev, data);
  
++<<<<<<< HEAD
 +	ret = software_node_register(&intel_xhci_usb_node);
 +	if (ret)
 +		return ret;
 +
 +	sw_desc.set = intel_xhci_usb_set_role,
 +	sw_desc.get = intel_xhci_usb_get_role,
 +	sw_desc.allow_userspace_control = true,
 +	sw_desc.fwnode = software_node_fwnode(&intel_xhci_usb_node);
++=======
+ 	data->enable_sw_switch = !device_property_read_bool(dev,
+ 						"sw_switch_disable");
++>>>>>>> 2be1fb64dfeb (usb: roles: intel: Enable static DRD mode for role switch)
  
  	data->role_sw = usb_role_switch_register(dev, &sw_desc);
 -	if (IS_ERR(data->role_sw))
 +	if (IS_ERR(data->role_sw)) {
 +		fwnode_handle_put(sw_desc.fwnode);
  		return PTR_ERR(data->role_sw);
 +	}
  
  	pm_runtime_set_active(dev);
  	pm_runtime_enable(dev);
* Unmerged path drivers/usb/roles/intel-xhci-usb-role-switch.c
