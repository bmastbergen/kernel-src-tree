intel_idle: Fold intel_idle_probe() into intel_idle_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit a6c86e336282c67a0b04f64b3b5574794249e3e1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a6c86e33.failed

There is no particular reason why intel_idle_probe() needs to be
a separate function and folding it into intel_idle_init() causes
the code to be somewhat easier to follow, so do just that.

No intentional functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit a6c86e336282c67a0b04f64b3b5574794249e3e1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/idle/intel_idle.c
diff --cc drivers/idle/intel_idle.c
index df389f7941d4,690309c78dfb..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -1315,58 -1297,6 +1315,61 @@@ static inline bool intel_idle_off_by_de
  #endif /* !CONFIG_ACPI_PROCESSOR_CSTATE */
  
  /*
++<<<<<<< HEAD
 + * intel_idle_probe()
 + */
 +static int __init intel_idle_probe(void)
 +{
 +	unsigned int eax, ebx, ecx;
 +	const struct x86_cpu_id *id;
 +
 +	if (max_cstate == 0) {
 +		pr_debug("disabled\n");
 +		return -EPERM;
 +	}
 +
 +	id = x86_match_cpu(intel_idle_ids);
 +	if (id) {
 +		if (!boot_cpu_has(X86_FEATURE_MWAIT)) {
 +			pr_debug("Please enable MWAIT in BIOS SETUP\n");
 +			return -ENODEV;
 +		}
 +	} else {
 +		id = x86_match_cpu(intel_mwait_ids);
 +		if (!id)
 +			return -ENODEV;
 +	}
 +
 +	if (boot_cpu_data.cpuid_level < CPUID_MWAIT_LEAF)
 +		return -ENODEV;
 +
 +	cpuid(CPUID_MWAIT_LEAF, &eax, &ebx, &ecx, &mwait_substates);
 +
 +	if (!(ecx & CPUID5_ECX_EXTENSIONS_SUPPORTED) ||
 +	    !(ecx & CPUID5_ECX_INTERRUPT_BREAK) ||
 +	    !mwait_substates)
 +			return -ENODEV;
 +
 +	pr_debug("MWAIT substates: 0x%x\n", mwait_substates);
 +
 +	icpu = (const struct idle_cpu *)id->driver_data;
 +	if (icpu) {
 +		cpuidle_state_table = icpu->state_table;
 +		if (icpu->use_acpi && force_use_acpi)
 +			intel_idle_acpi_cst_extract();
 +	} else if (!intel_idle_acpi_cst_extract()) {
 +		return -ENODEV;
 +	}
 +
 +	pr_debug("v" INTEL_IDLE_VERSION " model 0x%X\n",
 +		 boot_cpu_data.x86_model);
 +
 +	return 0;
 +}
 +
 +/*
++=======
++>>>>>>> a6c86e336282 (intel_idle: Fold intel_idle_probe() into intel_idle_init())
   * intel_idle_cpuidle_devices_uninit()
   * Unregisters the cpuidle devices.
   */
* Unmerged path drivers/idle/intel_idle.c
