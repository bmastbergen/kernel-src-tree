block: fix a warning when blkdev.h is included for !CONFIG_BLOCK builds

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Christoph Hellwig <hch@lst.de>
commit dc35ada4251f183137ee3a524543c9329d7a4fa2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/dc35ada4.failed

disk_start_io_acct and disk_end_io_acct need at least a struct gendisk
forward declaration, but for weird historic reasons much of blkdev.h
is stubbed out for CONFIG_BLOCK=n.  Fix this by stubbing more out for
now, but eventually this header will need a massive cleanup.

Fixes: 956d510ee78 ("block: add disk/bio-based accounting helpers")
	Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit dc35ada4251f183137ee3a524543c9329d7a4fa2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/blkdev.h
diff --cc include/linux/blkdev.h
index 43b1486e0588,8fd900998b4e..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -1884,15 -1892,32 +1884,31 @@@ static inline void blk_wake_io_task(str
  		wake_up_process(waiter);
  }
  
++<<<<<<< HEAD
 +static inline void blk_io_schedule(void)
++=======
+ #ifdef CONFIG_BLOCK
+ unsigned long disk_start_io_acct(struct gendisk *disk, unsigned int sectors,
+ 		unsigned int op);
+ void disk_end_io_acct(struct gendisk *disk, unsigned int op,
+ 		unsigned long start_time);
+ 
+ /**
+  * bio_start_io_acct - start I/O accounting for bio based drivers
+  * @bio:	bio to start account for
+  *
+  * Returns the start time that should be passed back to bio_end_io_acct().
+  */
+ static inline unsigned long bio_start_io_acct(struct bio *bio)
++>>>>>>> dc35ada4251f (block: fix a warning when blkdev.h is included for !CONFIG_BLOCK builds)
  {
 -	return disk_start_io_acct(bio->bi_disk, bio_sectors(bio), bio_op(bio));
 -}
 +	/* Prevent hang_check timer from firing at us during very long I/O */
 +	unsigned long timeout = sysctl_hung_task_timeout_secs * HZ / 2;
  
 -/**
 - * bio_end_io_acct - end I/O accounting for bio based drivers
 - * @bio:	bio to end account for
 - * @start:	start time returned by bio_start_io_acct()
 - */
 -static inline void bio_end_io_acct(struct bio *bio, unsigned long start_time)
 -{
 -	return disk_end_io_acct(bio->bi_disk, bio_op(bio), start_time);
 +	if (timeout)
 +		io_schedule_timeout(timeout);
 +	else
 +		io_schedule();
  }
 -#endif /* CONFIG_BLOCK */
  
  #endif
* Unmerged path include/linux/blkdev.h
