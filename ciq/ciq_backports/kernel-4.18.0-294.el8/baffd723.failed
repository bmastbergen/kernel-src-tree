lockdep: Revert "lockdep: Use raw_cpu_*() for per-cpu variables"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit baffd723e44dc3d7f84f0b8f1fe1ece00ddd2710
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/baffd723.failed

The thinking in commit:

  fddf9055a60d ("lockdep: Use raw_cpu_*() for per-cpu variables")

is flawed. While it is true that when we're migratable both CPUs will
have a 0 value, it doesn't hold that when we do get migrated in the
middle of a raw_cpu_op(), the old CPU will still have 0 by the time we
get around to reading it on the new CPU.

Luckily, the reason for that commit (s390 using preempt_disable()
instead of preempt_disable_notrace() in their percpu code), has since
been fixed by commit:

  1196f12a2c96 ("s390: don't trace preemption in percpu macros")

An audit of arch/*/include/asm/percpu*.h shows there are no other
architectures affected by this particular issue.

Fixes: fddf9055a60d ("lockdep: Use raw_cpu_*() for per-cpu variables")
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lkml.kernel.org/r/20201005095958.GJ2651@hirez.programming.kicks-ass.net
(cherry picked from commit baffd723e44dc3d7f84f0b8f1fe1ece00ddd2710)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/lockdep.h
diff --cc include/linux/lockdep.h
index 15a6e20d4aa2,1130f271de66..000000000000
--- a/include/linux/lockdep.h
+++ b/include/linux/lockdep.h
@@@ -532,23 -532,26 +532,42 @@@ do {									
  	lock_release(&(lock)->dep_map, _THIS_IP_);			\
  } while (0)
  
 -DECLARE_PER_CPU(int, hardirqs_enabled);
 -DECLARE_PER_CPU(int, hardirq_context);
 -DECLARE_PER_CPU(unsigned int, lockdep_recursion);
 +#define lockdep_assert_irqs_enabled()	do {				\
 +		WARN_ONCE(debug_locks && !current->lockdep_recursion &&	\
 +			  !current->hardirqs_enabled,			\
 +			  "IRQs not enabled as expected\n");		\
 +	} while (0)
 +
++<<<<<<< HEAD
 +#define lockdep_assert_irqs_disabled()	do {				\
 +		WARN_ONCE(debug_locks && !current->lockdep_recursion &&	\
 +			  current->hardirqs_enabled,			\
 +			  "IRQs not disabled as expected\n");		\
 +	} while (0)
  
 +#define lockdep_assert_in_irq() do {					\
 +		WARN_ONCE(debug_locks && !current->lockdep_recursion &&	\
 +			  !current->hardirq_context,			\
 +			  "Not in hardirq as expected\n");		\
 +	} while (0)
++=======
+ #define __lockdep_enabled	(debug_locks && !this_cpu_read(lockdep_recursion))
+ 
+ #define lockdep_assert_irqs_enabled()					\
+ do {									\
+ 	WARN_ON_ONCE(__lockdep_enabled && !this_cpu_read(hardirqs_enabled)); \
+ } while (0)
+ 
+ #define lockdep_assert_irqs_disabled()					\
+ do {									\
+ 	WARN_ON_ONCE(__lockdep_enabled && this_cpu_read(hardirqs_enabled)); \
+ } while (0)
+ 
+ #define lockdep_assert_in_irq()						\
+ do {									\
+ 	WARN_ON_ONCE(__lockdep_enabled && !this_cpu_read(hardirq_context)); \
+ } while (0)
++>>>>>>> baffd723e44d (lockdep: Revert "lockdep: Use raw_cpu_*() for per-cpu variables")
  
  #define lockdep_assert_preemption_enabled()				\
  do {									\
* Unmerged path include/linux/lockdep.h
