lib/vdso/32: Provide legacy syscall fallbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit c60a32ea4f459f99b98d383cad3b1ac7cfb3f4be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c60a32ea.failed

To address the regression which causes seccomp to deny applications the
access to clock_gettime64() and clock_getres64() syscalls because they
are not enabled in the existing filters.

That trips over the fact that 32bit VDSOs use the new clock_gettime64() and
clock_getres64() syscalls in the fallback path.

Add a conditional to invoke the 32bit legacy fallback syscalls instead of
the new 64bit variants. The conditional can go away once all architectures
are converted.

Fixes: 00b26474c2f1 ("lib/vdso: Provide generic VDSO implementation")
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Tested-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
Link: https://lkml.kernel.org/r/alpine.DEB.2.21.1907301134470.1738@nanos.tec.linutronix.de

(cherry picked from commit c60a32ea4f459f99b98d383cad3b1ac7cfb3f4be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/vdso/gettimeofday.c
diff --cc lib/vdso/gettimeofday.c
index 227d592db5c8,e630e7ff57f1..000000000000
--- a/lib/vdso/gettimeofday.c
+++ b/lib/vdso/gettimeofday.c
@@@ -104,9 -123,17 +104,21 @@@ __cvdso_clock_gettime32(clockid_t clock
  	struct __kernel_timespec ts;
  	int ret;
  
 -	ret = __cvdso_clock_gettime_common(clock, &ts);
 +	ret = __cvdso_clock_gettime(clock, &ts);
  
++<<<<<<< HEAD
 +	if (ret == 0) {
++=======
+ #ifdef VDSO_HAS_32BIT_FALLBACK
+ 	if (unlikely(ret))
+ 		return clock_gettime32_fallback(clock, res);
+ #else
+ 	if (unlikely(ret))
+ 		ret = clock_gettime_fallback(clock, &ts);
+ #endif
+ 
+ 	if (likely(!ret)) {
++>>>>>>> c60a32ea4f45 (lib/vdso/32: Provide legacy syscall fallbacks)
  		res->tv_sec = ts.tv_sec;
  		res->tv_nsec = ts.tv_nsec;
  	}
@@@ -202,9 -235,17 +213,21 @@@ __cvdso_clock_getres_time32(clockid_t c
  	struct __kernel_timespec ts;
  	int ret;
  
++<<<<<<< HEAD
 +	ret = __cvdso_clock_getres(clock, &ts);
++=======
+ 	ret = __cvdso_clock_getres_common(clock, &ts);
+ 
+ #ifdef VDSO_HAS_32BIT_FALLBACK
+ 	if (unlikely(ret))
+ 		return clock_getres32_fallback(clock, res);
+ #else
+ 	if (unlikely(ret))
+ 		ret = clock_getres_fallback(clock, &ts);
+ #endif
++>>>>>>> c60a32ea4f45 (lib/vdso/32: Provide legacy syscall fallbacks)
  
 -	if (likely(!ret)) {
 +	if (ret == 0) {
  		res->tv_sec = ts.tv_sec;
  		res->tv_nsec = ts.tv_nsec;
  	}
* Unmerged path lib/vdso/gettimeofday.c
