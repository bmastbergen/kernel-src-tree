y2038: add 64-bit time_t syscalls to all 32-bit architectures

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Arnd Bergmann <arnd@arndb.de>
commit 48166e6ea47d23984f0b481ca199250e1ce0730a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/48166e6e.failed

This adds 21 new system calls on each ABI that has 32-bit time_t
today. All of these have the exact same semantics as their existing
counterparts, and the new ones all have macro names that end in 'time64'
for clarification.

This gets us to the point of being able to safely use a C library
that has 64-bit time_t in user space. There are still a couple of
loose ends to tie up in various areas of the code, but this is the
big one, and should be entirely uncontroversial at this point.

In particular, there are four system calls (getitimer, setitimer,
waitid, and getrusage) that don't have a 64-bit counterpart yet,
but these can all be safely implemented in the C library by wrapping
around the existing system calls because the 32-bit time_t they
pass only counts elapsed time, not time since the epoch. They
will be dealt with later.

	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
(cherry picked from commit 48166e6ea47d23984f0b481ca199250e1ce0730a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/alpha/kernel/syscalls/syscall.tbl
#	arch/arm/tools/syscall.tbl
#	arch/arm64/include/asm/unistd32.h
#	arch/ia64/kernel/syscalls/syscall.tbl
#	arch/m68k/kernel/syscalls/syscall.tbl
#	arch/microblaze/kernel/syscalls/syscall.tbl
#	arch/mips/kernel/syscalls/syscall_n32.tbl
#	arch/mips/kernel/syscalls/syscall_n64.tbl
#	arch/mips/kernel/syscalls/syscall_o32.tbl
#	arch/parisc/kernel/syscalls/syscall.tbl
#	arch/powerpc/kernel/syscalls/syscall.tbl
#	arch/s390/kernel/syscalls/syscall.tbl
#	arch/sh/kernel/syscalls/syscall.tbl
#	arch/sparc/kernel/syscalls/syscall.tbl
#	arch/x86/entry/syscalls/syscall_32.tbl
#	arch/xtensa/kernel/syscalls/syscall.tbl
#	include/uapi/asm-generic/unistd.h
diff --cc arch/arm/tools/syscall.tbl
index 508d447bf60d,9016f4081bb9..000000000000
--- a/arch/arm/tools/syscall.tbl
+++ b/arch/arm/tools/syscall.tbl
@@@ -413,6 -413,27 +413,33 @@@
  396	common	pkey_free		sys_pkey_free
  397	common	statx			sys_statx
  398	common	rseq			sys_rseq
++<<<<<<< HEAD
 +425	common	io_uring_setup		sys_io_uring_setup
 +426	common	io_uring_enter		sys_io_uring_enter
- 427	common	io_uring_register	sys_io_uring_register
++427	common	io_uring_register	sys_io_uring_register
++=======
+ 399	common	io_pgetevents		sys_io_pgetevents_time32
+ 400	common	migrate_pages		sys_migrate_pages
+ 401	common	kexec_file_load		sys_kexec_file_load
+ # 402 is unused
+ 403	common	clock_gettime64			sys_clock_gettime
+ 404	common	clock_settime64			sys_clock_settime
+ 405	common	clock_adjtime64			sys_clock_adjtime
+ 406	common	clock_getres_time64		sys_clock_getres
+ 407	common	clock_nanosleep_time64		sys_clock_nanosleep
+ 408	common	timer_gettime64			sys_timer_gettime
+ 409	common	timer_settime64			sys_timer_settime
+ 410	common	timerfd_gettime64		sys_timerfd_gettime
+ 411	common	timerfd_settime64		sys_timerfd_settime
+ 412	common	utimensat_time64		sys_utimensat
+ 413	common	pselect6_time64			sys_pselect6
+ 414	common	ppoll_time64			sys_ppoll
+ 416	common	io_pgetevents_time64		sys_io_pgetevents
+ 417	common	recvmmsg_time64			sys_recvmmsg
+ 418	common	mq_timedsend_time64		sys_mq_timedsend
+ 419	common	mq_timedreceive_time64		sys_mq_timedreceive
+ 420	common	semtimedop_time64		sys_semtimedop
+ 421	common	rt_sigtimedwait_time64		sys_rt_sigtimedwait
+ 422	common	futex_time64			sys_futex
+ 423	common	sched_rr_get_interval_time64	sys_sched_rr_get_interval
++>>>>>>> 48166e6ea47d (y2038: add 64-bit time_t syscalls to all 32-bit architectures)
diff --cc arch/arm64/include/asm/unistd32.h
index 3e40028c7f81,5590f2623690..000000000000
--- a/arch/arm64/include/asm/unistd32.h
+++ b/arch/arm64/include/asm/unistd32.h
@@@ -819,12 -819,53 +819,62 @@@ __SYSCALL(__NR_pkey_free, sys_pkey_free
  __SYSCALL(__NR_statx, sys_statx)
  #define __NR_rseq 398
  __SYSCALL(__NR_rseq, sys_rseq)
++<<<<<<< HEAD
 +#define __NR_io_uring_setup 425
 +__SYSCALL(__NR_io_uring_setup, sys_io_uring_setup)
 +#define __NR_io_uring_enter 426
 +__SYSCALL(__NR_io_uring_enter, sys_io_uring_enter)
 +#define __NR_io_uring_register 427
 +__SYSCALL(__NR_io_uring_register, sys_io_uring_register)
++=======
+ #define __NR_io_pgetevents 399
+ __SYSCALL(__NR_io_pgetevents, compat_sys_io_pgetevents)
+ #define __NR_migrate_pages 400
+ __SYSCALL(__NR_migrate_pages, compat_sys_migrate_pages)
+ #define __NR_kexec_file_load 401
+ __SYSCALL(__NR_kexec_file_load, sys_kexec_file_load)
+ /* 402 is unused */
+ #define __NR_clock_gettime64 403
+ __SYSCALL(__NR_clock_gettime64, sys_clock_gettime)
+ #define __NR_clock_settime64 404
+ __SYSCALL(__NR_clock_settime64, sys_clock_settime)
+ #define __NR_clock_adjtime64 405
+ __SYSCALL(__NR_clock_adjtime64, sys_clock_adjtime)
+ #define __NR_clock_getres_time64 406
+ __SYSCALL(__NR_clock_getres_time64, sys_clock_getres)
+ #define __NR_clock_nanosleep_time64 407
+ __SYSCALL(__NR_clock_nanosleep_time64, sys_clock_nanosleep)
+ #define __NR_timer_gettime64 408
+ __SYSCALL(__NR_timer_gettime64, sys_timer_gettime)
+ #define __NR_timer_settime64 409
+ __SYSCALL(__NR_timer_settime64, sys_timer_settime)
+ #define __NR_timerfd_gettime64 410
+ __SYSCALL(__NR_timerfd_gettime64, sys_timerfd_gettime)
+ #define __NR_timerfd_settime64 411
+ __SYSCALL(__NR_timerfd_settime64, sys_timerfd_settime)
+ #define __NR_utimensat_time64 412
+ __SYSCALL(__NR_utimensat_time64, sys_utimensat)
+ #define __NR_pselect6_time64 413
+ __SYSCALL(__NR_pselect6_time64, compat_sys_pselect6_time64)
+ #define __NR_ppoll_time64 414
+ __SYSCALL(__NR_ppoll_time64, compat_sys_ppoll_time64)
+ #define __NR_io_pgetevents_time64 416
+ __SYSCALL(__NR_io_pgetevents_time64, sys_io_pgetevents)
+ #define __NR_recvmmsg_time64 417
+ __SYSCALL(__NR_recvmmsg_time64, compat_sys_recvmmsg_time64)
+ #define __NR_mq_timedsend_time64 418
+ __SYSCALL(__NR_mq_timedsend_time64, sys_mq_timedsend)
+ #define __NR_mq_timedreceive_time64 419
+ __SYSCALL(__NR_mq_timedreceive_time64, sys_mq_timedreceive)
+ #define __NR_semtimedop_time64 420
+ __SYSCALL(__NR_semtimedop_time64, sys_semtimedop)
+ #define __NR_rt_sigtimedwait_time64 421
+ __SYSCALL(__NR_rt_sigtimedwait_time64, compat_sys_rt_sigtimedwait_time64)
+ #define __NR_futex_time64 422
+ __SYSCALL(__NR_futex_time64, sys_futex)
+ #define __NR_sched_rr_get_interval_time64 423
+ __SYSCALL(__NR_sched_rr_get_interval_time64, sys_sched_rr_get_interval)
++>>>>>>> 48166e6ea47d (y2038: add 64-bit time_t syscalls to all 32-bit architectures)
  
  /*
   * Please add new compat syscalls above this comment and update
diff --cc arch/s390/kernel/syscalls/syscall.tbl
index c67da38d5e42,02579f95f391..000000000000
--- a/arch/s390/kernel/syscalls/syscall.tbl
+++ b/arch/s390/kernel/syscalls/syscall.tbl
@@@ -381,16 -381,48 +381,55 @@@
  371  common	recvfrom		sys_recvfrom			compat_sys_recvfrom
  372  common	recvmsg			sys_recvmsg			compat_sys_recvmsg
  373  common	shutdown		sys_shutdown			sys_shutdown
 -374  common	mlock2			sys_mlock2			sys_mlock2
 -375  common	copy_file_range		sys_copy_file_range		sys_copy_file_range
 +374  common	mlock2			sys_mlock2			compat_sys_mlock2
 +375  common	copy_file_range		sys_copy_file_range		compat_sys_copy_file_range
  376  common	preadv2			sys_preadv2			compat_sys_preadv2
  377  common	pwritev2		sys_pwritev2			compat_sys_pwritev2
 -378  common	s390_guarded_storage	sys_s390_guarded_storage	sys_s390_guarded_storage
 -379  common	statx			sys_statx			sys_statx
 -380  common	s390_sthyi		sys_s390_sthyi			sys_s390_sthyi
 -381  common	kexec_file_load		sys_kexec_file_load		sys_kexec_file_load
 +378  common	s390_guarded_storage	sys_s390_guarded_storage	compat_sys_s390_guarded_storage
 +379  common	statx			sys_statx			compat_sys_statx
 +380  common	s390_sthyi		sys_s390_sthyi			compat_sys_s390_sthyi
 +381  common	kexec_file_load		sys_kexec_file_load		compat_sys_kexec_file_load
  382  common	io_pgetevents		sys_io_pgetevents		compat_sys_io_pgetevents
++<<<<<<< HEAD
 +383  common	rseq			sys_rseq			compat_sys_rseq
 +425  common	io_uring_setup		sys_io_uring_setup		sys_io_uring_setup
 +426  common	io_uring_enter		sys_io_uring_enter		sys_io_uring_enter
 +427  common	io_uring_register	sys_io_uring_register		sys_io_uring_register
++=======
+ 383  common	rseq			sys_rseq			sys_rseq
+ 384  common	pkey_mprotect		sys_pkey_mprotect		sys_pkey_mprotect
+ 385  common	pkey_alloc		sys_pkey_alloc			sys_pkey_alloc
+ 386  common	pkey_free		sys_pkey_free			sys_pkey_free
+ # room for arch specific syscalls
+ 392	64	semtimedop		sys_semtimedop			-
+ 393  common	semget			sys_semget			sys_semget
+ 394  common	semctl			sys_semctl			compat_sys_semctl
+ 395  common	shmget			sys_shmget			sys_shmget
+ 396  common	shmctl			sys_shmctl			compat_sys_shmctl
+ 397  common	shmat			sys_shmat			compat_sys_shmat
+ 398  common	shmdt			sys_shmdt 			sys_shmdt
+ 399  common	msgget			sys_msgget			sys_msgget
+ 400  common	msgsnd			sys_msgsnd			compat_sys_msgsnd
+ 401  common	msgrcv			sys_msgrcv			compat_sys_msgrcv
+ 402  common	msgctl			sys_msgctl			compat_sys_msgctl
+ 403	32	clock_gettime64		-				sys_clock_gettime
+ 404	32	clock_settime64		-				sys_clock_settime
+ 405	32	clock_adjtime64		-				sys_clock_adjtime
+ 406	32	clock_getres_time64	-				sys_clock_getres
+ 407	32	clock_nanosleep_time64	-				sys_clock_nanosleep
+ 408	32	timer_gettime64		-				sys_timer_gettime
+ 409	32	timer_settime64		-				sys_timer_settime
+ 410	32	timerfd_gettime64	-				sys_timerfd_gettime
+ 411	32	timerfd_settime64	-				sys_timerfd_settime
+ 412	32	utimensat_time64	-				sys_utimensat
+ 413	32	pselect6_time64		-				compat_sys_pselect6_time64
+ 414	32	ppoll_time64		-				compat_sys_ppoll_time64
+ 416	32	io_pgetevents_time64	-				sys_io_pgetevents
+ 417	32	recvmmsg_time64		-				compat_sys_recvmmsg_time64
+ 418	32	mq_timedsend_time64	-				sys_mq_timedsend
+ 419	32	mq_timedreceive_time64	-				sys_mq_timedreceive
+ 420	32	semtimedop_time64	-				sys_semtimedop
+ 421	32	rt_sigtimedwait_time64	-				compat_sys_rt_sigtimedwait_time64
+ 422	32	futex_time64		-				sys_futex
+ 423	32	sched_rr_get_interval_time64	-			sys_sched_rr_get_interval
++>>>>>>> 48166e6ea47d (y2038: add 64-bit time_t syscalls to all 32-bit architectures)
diff --cc arch/x86/entry/syscalls/syscall_32.tbl
index 2eefd2a7c1ce,955ab6a3b61f..000000000000
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@@ -396,8 -396,36 +396,42 @@@
  382	i386	pkey_free		sys_pkey_free			__ia32_sys_pkey_free
  383	i386	statx			sys_statx			__ia32_sys_statx
  384	i386	arch_prctl		sys_arch_prctl			__ia32_compat_sys_arch_prctl
 -385	i386	io_pgetevents		sys_io_pgetevents_time32	__ia32_compat_sys_io_pgetevents
 +385	i386	io_pgetevents		sys_io_pgetevents		__ia32_compat_sys_io_pgetevents
  386	i386	rseq			sys_rseq			__ia32_sys_rseq
++<<<<<<< HEAD
 +425	i386	io_uring_setup		sys_io_uring_setup		__ia32_sys_io_uring_setup
 +426	i386	io_uring_enter		sys_io_uring_enter		__ia32_sys_io_uring_enter
 +427	i386	io_uring_register	sys_io_uring_register		__ia32_sys_io_uring_register
++=======
+ # don't use numbers 387 through 392, add new calls at the end
+ 393	i386	semget			sys_semget    			__ia32_sys_semget
+ 394	i386	semctl			sys_semctl    			__ia32_compat_sys_semctl
+ 395	i386	shmget			sys_shmget    			__ia32_sys_shmget
+ 396	i386	shmctl			sys_shmctl    			__ia32_compat_sys_shmctl
+ 397	i386	shmat			sys_shmat     			__ia32_compat_sys_shmat
+ 398	i386	shmdt			sys_shmdt     			__ia32_sys_shmdt
+ 399	i386	msgget			sys_msgget    			__ia32_sys_msgget
+ 400	i386	msgsnd			sys_msgsnd    			__ia32_compat_sys_msgsnd
+ 401	i386	msgrcv			sys_msgrcv    			__ia32_compat_sys_msgrcv
+ 402	i386	msgctl			sys_msgctl    			__ia32_compat_sys_msgctl
+ 403	i386	clock_gettime64		sys_clock_gettime		__ia32_sys_clock_gettime
+ 404	i386	clock_settime64		sys_clock_settime		__ia32_sys_clock_settime
+ 405	i386	clock_adjtime64		sys_clock_adjtime		__ia32_sys_clock_adjtime
+ 406	i386	clock_getres_time64	sys_clock_getres		__ia32_sys_clock_getres
+ 407	i386	clock_nanosleep_time64	sys_clock_nanosleep		__ia32_sys_clock_nanosleep
+ 408	i386	timer_gettime64		sys_timer_gettime		__ia32_sys_timer_gettime
+ 409	i386	timer_settime64		sys_timer_settime		__ia32_sys_timer_settime
+ 410	i386	timerfd_gettime64	sys_timerfd_gettime		__ia32_sys_timerfd_gettime
+ 411	i386	timerfd_settime64	sys_timerfd_settime		__ia32_sys_timerfd_settime
+ 412	i386	utimensat_time64	sys_utimensat			__ia32_sys_utimensat
+ 413	i386	pselect6_time64		sys_pselect6			__ia32_compat_sys_pselect6_time64
+ 414	i386	ppoll_time64		sys_ppoll			__ia32_compat_sys_ppoll_time64
+ 416	i386	io_pgetevents_time64	sys_io_pgetevents		__ia32_sys_io_pgetevents
+ 417	i386	recvmmsg_time64		sys_recvmmsg			__ia32_compat_sys_recvmmsg_time64
+ 418	i386	mq_timedsend_time64	sys_mq_timedsend		__ia32_sys_mq_timedsend
+ 419	i386	mq_timedreceive_time64	sys_mq_timedreceive		__ia32_sys_mq_timedreceive
+ 420	i386	semtimedop_time64	sys_semtimedop			__ia32_sys_semtimedop
+ 421	i386	rt_sigtimedwait_time64	sys_rt_sigtimedwait		__ia32_compat_sys_rt_sigtimedwait_time64
+ 422	i386	futex_time64		sys_futex			__ia32_sys_futex
+ 423	i386	sched_rr_get_interval_time64	sys_sched_rr_get_interval	__ia32_sys_sched_rr_get_interval
++>>>>>>> 48166e6ea47d (y2038: add 64-bit time_t syscalls to all 32-bit architectures)
diff --cc include/uapi/asm-generic/unistd.h
index c43f1d09c45e,acf9a07ab2ff..000000000000
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@@ -738,15 -740,52 +738,64 @@@ __SC_COMP(__NR_io_pgetevents, sys_io_pg
  __SYSCALL(__NR_rseq, sys_rseq)
  #define __NR_kexec_file_load 294
  __SYSCALL(__NR_kexec_file_load,     sys_kexec_file_load)
++<<<<<<< HEAD
 +#define __NR_io_uring_setup 425
 +__SYSCALL(__NR_io_uring_setup, sys_io_uring_setup)
 +#define __NR_io_uring_enter 426
 +__SYSCALL(__NR_io_uring_enter, sys_io_uring_enter)
 +#define __NR_io_uring_register 427
 +__SYSCALL(__NR_io_uring_register, sys_io_uring_register)
 +
 +#undef __NR_syscalls
 +#define __NR_syscalls 428
++=======
+ /* 295 through 402 are unassigned to sync up with generic numbers, don't use */
+ #if __BITS_PER_LONG == 32
+ #define __NR_clock_gettime64 403
+ __SYSCALL(__NR_clock_gettime64, sys_clock_gettime)
+ #define __NR_clock_settime64 404
+ __SYSCALL(__NR_clock_settime64, sys_clock_settime)
+ #define __NR_clock_adjtime64 405
+ __SYSCALL(__NR_clock_adjtime64, sys_clock_adjtime)
+ #define __NR_clock_getres_time64 406
+ __SYSCALL(__NR_clock_getres_time64, sys_clock_getres)
+ #define __NR_clock_nanosleep_time64 407
+ __SYSCALL(__NR_clock_nanosleep_time64, sys_clock_nanosleep)
+ #define __NR_timer_gettime64 408
+ __SYSCALL(__NR_timer_gettime64, sys_timer_gettime)
+ #define __NR_timer_settime64 409
+ __SYSCALL(__NR_timer_settime64, sys_timer_settime)
+ #define __NR_timerfd_gettime64 410
+ __SYSCALL(__NR_timerfd_gettime64, sys_timerfd_gettime)
+ #define __NR_timerfd_settime64 411
+ __SYSCALL(__NR_timerfd_settime64, sys_timerfd_settime)
+ #define __NR_utimensat_time64 412
+ __SYSCALL(__NR_utimensat_time64, sys_utimensat)
+ #define __NR_pselect6_time64 413
+ __SC_COMP(__NR_pselect6_time64, sys_pselect6, compat_sys_pselect6_time64)
+ #define __NR_ppoll_time64 414
+ __SC_COMP(__NR_ppoll_time64, sys_ppoll, compat_sys_ppoll_time64)
+ #define __NR_io_pgetevents_time64 416
+ __SYSCALL(__NR_io_pgetevents_time64, sys_io_pgetevents)
+ #define __NR_recvmmsg_time64 417
+ __SC_COMP(__NR_recvmmsg_time64, sys_recvmmsg, compat_sys_recvmmsg_time64)
+ #define __NR_mq_timedsend_time64 418
+ __SYSCALL(__NR_mq_timedsend_time64, sys_mq_timedsend)
+ #define __NR_mq_timedreceive_time64 419
+ __SYSCALL(__NR_mq_timedreceive_time64, sys_mq_timedreceive)
+ #define __NR_semtimedop_time64 420
+ __SYSCALL(__NR_semtimedop_time64, sys_semtimedop)
+ #define __NR_rt_sigtimedwait_time64 421
+ __SC_COMP(__NR_rt_sigtimedwait_time64, sys_rt_sigtimedwait, compat_sys_rt_sigtimedwait_time64)
+ #define __NR_futex_time64 422
+ __SYSCALL(__NR_futex_time64, sys_futex)
+ #define __NR_sched_rr_get_interval_time64 423
+ __SYSCALL(__NR_sched_rr_get_interval_time64, sys_sched_rr_get_interval)
+ #endif
+ 
+ #undef __NR_syscalls
+ #define __NR_syscalls 424
++>>>>>>> 48166e6ea47d (y2038: add 64-bit time_t syscalls to all 32-bit architectures)
  
  /*
   * 32 bit systems traditionally used different
* Unmerged path arch/alpha/kernel/syscalls/syscall.tbl
* Unmerged path arch/ia64/kernel/syscalls/syscall.tbl
* Unmerged path arch/m68k/kernel/syscalls/syscall.tbl
* Unmerged path arch/microblaze/kernel/syscalls/syscall.tbl
* Unmerged path arch/mips/kernel/syscalls/syscall_n32.tbl
* Unmerged path arch/mips/kernel/syscalls/syscall_n64.tbl
* Unmerged path arch/mips/kernel/syscalls/syscall_o32.tbl
* Unmerged path arch/parisc/kernel/syscalls/syscall.tbl
* Unmerged path arch/powerpc/kernel/syscalls/syscall.tbl
* Unmerged path arch/sh/kernel/syscalls/syscall.tbl
* Unmerged path arch/sparc/kernel/syscalls/syscall.tbl
* Unmerged path arch/xtensa/kernel/syscalls/syscall.tbl
* Unmerged path arch/alpha/kernel/syscalls/syscall.tbl
* Unmerged path arch/arm/tools/syscall.tbl
diff --git a/arch/arm64/include/asm/unistd.h b/arch/arm64/include/asm/unistd.h
index 1ef36cf49885..ee0e156952cd 100644
--- a/arch/arm64/include/asm/unistd.h
+++ b/arch/arm64/include/asm/unistd.h
@@ -43,7 +43,7 @@
 #define __ARM_NR_compat_cacheflush	(__ARM_NR_COMPAT_BASE+2)
 #define __ARM_NR_compat_set_tls		(__ARM_NR_COMPAT_BASE+5)
 
-#define __NR_compat_syscalls		402
+#define __NR_compat_syscalls		424
 #endif
 
 #define __ARCH_WANT_SYS_CLONE
* Unmerged path arch/arm64/include/asm/unistd32.h
* Unmerged path arch/ia64/kernel/syscalls/syscall.tbl
* Unmerged path arch/m68k/kernel/syscalls/syscall.tbl
* Unmerged path arch/microblaze/kernel/syscalls/syscall.tbl
* Unmerged path arch/mips/kernel/syscalls/syscall_n32.tbl
* Unmerged path arch/mips/kernel/syscalls/syscall_n64.tbl
* Unmerged path arch/mips/kernel/syscalls/syscall_o32.tbl
* Unmerged path arch/parisc/kernel/syscalls/syscall.tbl
* Unmerged path arch/powerpc/kernel/syscalls/syscall.tbl
* Unmerged path arch/s390/kernel/syscalls/syscall.tbl
* Unmerged path arch/sh/kernel/syscalls/syscall.tbl
* Unmerged path arch/sparc/kernel/syscalls/syscall.tbl
* Unmerged path arch/x86/entry/syscalls/syscall_32.tbl
* Unmerged path arch/xtensa/kernel/syscalls/syscall.tbl
* Unmerged path include/uapi/asm-generic/unistd.h
diff --git a/scripts/checksyscalls.sh b/scripts/checksyscalls.sh
index ee3dfb5be6cd..b7f01867bf7e 100755
--- a/scripts/checksyscalls.sh
+++ b/scripts/checksyscalls.sh
@@ -84,6 +84,26 @@ cat << EOF
 #define __IGNORE_statfs64
 #define __IGNORE_llseek
 #define __IGNORE_mmap2
+#define __IGNORE_clock_gettime64
+#define __IGNORE_clock_settime64
+#define __IGNORE_clock_adjtime64
+#define __IGNORE_clock_getres_time64
+#define __IGNORE_clock_nanosleep_time64
+#define __IGNORE_timer_gettime64
+#define __IGNORE_timer_settime64
+#define __IGNORE_timerfd_gettime64
+#define __IGNORE_timerfd_settime64
+#define __IGNORE_utimensat_time64
+#define __IGNORE_pselect6_time64
+#define __IGNORE_ppoll_time64
+#define __IGNORE_io_pgetevents_time64
+#define __IGNORE_recvmmsg_time64
+#define __IGNORE_mq_timedsend_time64
+#define __IGNORE_mq_timedreceive_time64
+#define __IGNORE_semtimedop_time64
+#define __IGNORE_rt_sigtimedwait_time64
+#define __IGNORE_futex_time64
+#define __IGNORE_sched_rr_get_interval_time64
 #else
 #define __IGNORE_sendfile
 #define __IGNORE_ftruncate
@@ -98,6 +118,26 @@ cat << EOF
 #define __IGNORE_statfs
 #define __IGNORE_lseek
 #define __IGNORE_mmap
+#define __IGNORE_clock_gettime
+#define __IGNORE_clock_settime
+#define __IGNORE_clock_adjtime
+#define __IGNORE_clock_getres
+#define __IGNORE_clock_nanosleep
+#define __IGNORE_timer_gettime
+#define __IGNORE_timer_settime
+#define __IGNORE_timerfd_gettime
+#define __IGNORE_timerfd_settime
+#define __IGNORE_utimensat
+#define __IGNORE_pselect6
+#define __IGNORE_ppoll
+#define __IGNORE_io_pgetevents
+#define __IGNORE_recvmmsg
+#define __IGNORE_mq_timedsend
+#define __IGNORE_mq_timedreceiv
+#define __IGNORE_semtimedop
+#define __IGNORE_rt_sigtimedwait
+#define __IGNORE_futex
+#define __IGNORE_sched_rr_get_interval
 #endif
 
 /* i386-specific or historical system calls */
