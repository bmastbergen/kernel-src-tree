RDMA/mlx5: Move DRIVER QP flags check into separate function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 2fdddbd5c966c1ff7e35b0e4d1fa4b951d0f5542
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/2fdddbd5.failed

Perform validation of DRIVER QP in relevant function.

Link: https://lore.kernel.org/r/20200427154636.381474-11-leon@kernel.org
	Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 2fdddbd5c966c1ff7e35b0e4d1fa4b951d0f5542)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 745e3ea1cb8f,5e4c73c4a7b4..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -2618,120 -2567,20 +2618,124 @@@ static struct ib_qp *mlx5_ib_create_dct
  
  	qp->state = IB_QPS_RESET;
  
 +	return &qp->ibqp;
 +err_free:
 +	kfree(qp);
 +	return ERR_PTR(err);
 +}
 +
++<<<<<<< HEAD
 +static int set_mlx_qp_type(struct mlx5_ib_dev *dev,
 +			   struct ib_qp_init_attr *init_attr,
 +			   struct mlx5_ib_create_qp *ucmd,
 +			   struct ib_udata *udata)
 +{
 +	enum { MLX_QP_FLAGS = MLX5_QP_FLAG_TYPE_DCT | MLX5_QP_FLAG_TYPE_DCI };
 +	int err;
 +
 +	if (!udata)
 +		return -EINVAL;
 +
 +	if (udata->inlen < sizeof(*ucmd)) {
 +		mlx5_ib_dbg(dev, "create_qp user command is smaller than expected\n");
 +		return -EINVAL;
 +	}
 +	err = ib_copy_from_udata(ucmd, udata, sizeof(*ucmd));
 +	if (err)
 +		return err;
 +
 +	if ((ucmd->flags & MLX_QP_FLAGS) == MLX5_QP_FLAG_TYPE_DCI) {
 +		init_attr->qp_type = MLX5_IB_QPT_DCI;
 +	} else {
 +		if ((ucmd->flags & MLX_QP_FLAGS) == MLX5_QP_FLAG_TYPE_DCT) {
 +			init_attr->qp_type = MLX5_IB_QPT_DCT;
 +		} else {
 +			mlx5_ib_dbg(dev, "Invalid QP flags\n");
 +			return -EINVAL;
 +		}
 +	}
 +
 +	if (!MLX5_CAP_GEN(dev->mdev, dct)) {
 +		mlx5_ib_dbg(dev, "DC transport is not supported\n");
 +		return -EOPNOTSUPP;
 +	}
 +
  	return 0;
  }
  
 +struct ib_qp *mlx5_ib_create_qp(struct ib_pd *pd,
 +				struct ib_qp_init_attr *verbs_init_attr,
 +				struct ib_udata *udata)
++=======
+ static int check_qp_type(struct mlx5_ib_dev *dev, struct ib_qp_init_attr *attr)
++>>>>>>> 2fdddbd5c966 (RDMA/mlx5: Move DRIVER QP flags check into separate function)
  {
 -	if (attr->qp_type == IB_QPT_DRIVER && !MLX5_CAP_GEN(dev->mdev, dct))
 -		goto out;
 +	struct mlx5_ib_dev *dev;
 +	struct mlx5_ib_qp *qp;
 +	u16 xrcdn = 0;
 +	int err;
 +	struct ib_qp_init_attr mlx_init_attr;
 +	struct ib_qp_init_attr *init_attr = verbs_init_attr;
 +	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
 +		udata, struct mlx5_ib_ucontext, ibucontext);
  
 -	switch (attr->qp_type) {
 +	if (pd) {
 +		dev = to_mdev(pd->device);
 +
 +		if (init_attr->qp_type == IB_QPT_RAW_PACKET) {
 +			if (!ucontext) {
 +				mlx5_ib_dbg(dev, "Raw Packet QP is not supported for kernel consumers\n");
 +				return ERR_PTR(-EINVAL);
 +			} else if (!ucontext->cqe_version) {
 +				mlx5_ib_dbg(dev, "Raw Packet QP is only supported for CQE version > 0\n");
 +				return ERR_PTR(-EINVAL);
 +			}
 +		}
 +	} else {
 +		/* being cautious here */
 +		if (init_attr->qp_type != IB_QPT_XRC_TGT &&
 +		    init_attr->qp_type != MLX5_IB_QPT_REG_UMR) {
 +			pr_warn("%s: no PD for transport %s\n", __func__,
 +				ib_qp_type_str(init_attr->qp_type));
 +			return ERR_PTR(-EINVAL);
 +		}
 +		dev = to_mdev(to_mxrcd(init_attr->xrcd)->ibxrcd.device);
 +	}
 +
 +	if (init_attr->qp_type == IB_QPT_DRIVER) {
 +		struct mlx5_ib_create_qp ucmd;
 +
 +		init_attr = &mlx_init_attr;
 +		memcpy(init_attr, verbs_init_attr, sizeof(*verbs_init_attr));
 +		err = set_mlx_qp_type(dev, init_attr, &ucmd, udata);
 +		if (err)
 +			return ERR_PTR(err);
 +
 +		if (init_attr->qp_type == MLX5_IB_QPT_DCI) {
 +			if (init_attr->cap.max_recv_wr ||
 +			    init_attr->cap.max_recv_sge) {
 +				mlx5_ib_dbg(dev, "DCI QP requires zero size receive queue\n");
 +				return ERR_PTR(-EINVAL);
 +			}
 +		} else {
 +			return mlx5_ib_create_dct(pd, init_attr, &ucmd, udata);
 +		}
 +	}
 +
 +	switch (init_attr->qp_type) {
  	case IB_QPT_XRC_TGT:
  	case IB_QPT_XRC_INI:
 -		if (!MLX5_CAP_GEN(dev->mdev, xrc))
 -			goto out;
 -		fallthrough;
 +		if (!MLX5_CAP_GEN(dev->mdev, xrc)) {
 +			mlx5_ib_dbg(dev, "XRC not supported\n");
 +			return ERR_PTR(-ENOSYS);
 +		}
 +		init_attr->recv_cq = NULL;
 +		if (init_attr->qp_type == IB_QPT_XRC_TGT) {
 +			xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
 +			init_attr->send_cq = NULL;
 +		}
 +
 +		/* fall through */
  	case IB_QPT_RAW_PACKET:
  	case IB_QPT_RC:
  	case IB_QPT_UC:
@@@ -2774,16 -2595,204 +2778,210 @@@
  	case IB_QPT_RAW_ETHERTYPE:
  	case IB_QPT_MAX:
  	default:
++<<<<<<< HEAD
 +		mlx5_ib_dbg(dev, "unsupported qp type %d\n",
++=======
+ 		goto out;
+ 	}
+ 
+ 	return 0;
+ 
+ out:
+ 	mlx5_ib_dbg(dev, "Unsupported QP type %d\n", attr->qp_type);
+ 	return -EOPNOTSUPP;
+ }
+ 
+ static int check_valid_flow(struct mlx5_ib_dev *dev, struct ib_pd *pd,
+ 			    struct ib_qp_init_attr *attr,
+ 			    struct ib_udata *udata)
+ {
+ 	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
+ 		udata, struct mlx5_ib_ucontext, ibucontext);
+ 
+ 	if (!udata) {
+ 		/* Kernel create_qp callers */
+ 		if (attr->rwq_ind_tbl)
+ 			return -EOPNOTSUPP;
+ 
+ 		switch (attr->qp_type) {
+ 		case IB_QPT_RAW_PACKET:
+ 		case IB_QPT_DRIVER:
+ 			return -EOPNOTSUPP;
+ 		default:
+ 			return 0;
+ 		}
+ 	}
+ 
+ 	/* Userspace create_qp callers */
+ 	if (attr->qp_type == IB_QPT_RAW_PACKET && !ucontext->cqe_version) {
+ 		mlx5_ib_dbg(dev,
+ 			"Raw Packet QP is only supported for CQE version > 0\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (attr->qp_type != IB_QPT_RAW_PACKET && attr->rwq_ind_tbl) {
+ 		mlx5_ib_dbg(dev,
+ 			    "Wrong QP type %d for the RWQ indirect table\n",
+ 			    attr->qp_type);
+ 		return -EINVAL;
+ 	}
+ 
+ 	switch (attr->qp_type) {
+ 	case IB_QPT_SMI:
+ 	case MLX5_IB_QPT_HW_GSI:
+ 	case MLX5_IB_QPT_REG_UMR:
+ 	case IB_QPT_GSI:
+ 		mlx5_ib_dbg(dev, "Kernel doesn't support QP type %d\n",
+ 			    attr->qp_type);
+ 		return -EINVAL;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	/*
+ 	 * We don't need to see this warning, it means that kernel code
+ 	 * missing ib_pd. Placed here to catch developer's mistakes.
+ 	 */
+ 	WARN_ONCE(!pd && attr->qp_type != IB_QPT_XRC_TGT,
+ 		  "There is a missing PD pointer assignment\n");
+ 	return 0;
+ }
+ 
+ static int process_vendor_flags(struct mlx5_ib_qp *qp,
+ 				struct ib_qp_init_attr *attr,
+ 				struct mlx5_ib_create_qp *ucmd)
+ {
+ 	switch (ucmd->flags & (MLX5_QP_FLAG_TYPE_DCT | MLX5_QP_FLAG_TYPE_DCI)) {
+ 	case MLX5_QP_FLAG_TYPE_DCI:
+ 		qp->qp_sub_type = MLX5_IB_QPT_DCI;
+ 		break;
+ 	case MLX5_QP_FLAG_TYPE_DCT:
+ 		qp->qp_sub_type = MLX5_IB_QPT_DCT;
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static int create_driver_qp(struct ib_pd *pd, struct mlx5_ib_qp *qp,
+ 			    struct ib_qp_init_attr *attr,
+ 			    struct mlx5_ib_create_qp *ucmd,
+ 			    struct ib_udata *udata)
+ {
+ 	struct mlx5_ib_dev *mdev = to_mdev(pd->device);
+ 	int ret = -EINVAL;
+ 
+ 	switch (qp->qp_sub_type) {
+ 	case MLX5_IB_QPT_DCT:
+ 		if (!attr->srq || !attr->recv_cq)
+ 			goto out;
+ 
+ 		ret = create_dct(pd, qp, attr, ucmd, udata);
+ 		break;
+ 	case MLX5_IB_QPT_DCI:
+ 		if (attr->cap.max_recv_wr || attr->cap.max_recv_sge)
+ 			goto out;
+ 
+ 		ret = create_qp_common(mdev, pd, attr, udata, qp);
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ out:	return ret;
+ }
+ 
+ static size_t process_udata_size(struct ib_qp_init_attr *attr,
+ 				 struct ib_udata *udata)
+ {
+ 	size_t ucmd = sizeof(struct mlx5_ib_create_qp);
+ 
+ 	return (udata->inlen < ucmd) ? 0 : ucmd;
+ }
+ 
+ struct ib_qp *mlx5_ib_create_qp(struct ib_pd *pd,
+ 				struct ib_qp_init_attr *init_attr,
+ 				struct ib_udata *udata)
+ {
+ 	struct mlx5_ib_create_qp ucmd = {};
+ 	struct mlx5_ib_dev *dev;
+ 	struct mlx5_ib_qp *qp;
+ 	u16 xrcdn = 0;
+ 	int err;
+ 
+ 	dev = pd ? to_mdev(pd->device) :
+ 		   to_mdev(to_mxrcd(init_attr->xrcd)->ibxrcd.device);
+ 
+ 	err = check_qp_type(dev, init_attr);
+ 	if (err) {
+ 		mlx5_ib_dbg(dev, "Unsupported QP type %d\n",
++>>>>>>> 2fdddbd5c966 (RDMA/mlx5: Move DRIVER QP flags check into separate function)
  			    init_attr->qp_type);
 -		return ERR_PTR(err);
 +		/* Don't support raw QPs */
 +		return ERR_PTR(-EINVAL);
  	}
  
++<<<<<<< HEAD
 +	if (verbs_init_attr->qp_type == IB_QPT_DRIVER)
 +		qp->qp_sub_type = init_attr->qp_type;
++=======
+ 	err = check_valid_flow(dev, pd, init_attr, udata);
+ 	if (err)
+ 		return ERR_PTR(err);
+ 
+ 	if (init_attr->qp_type == IB_QPT_GSI)
+ 		return mlx5_ib_gsi_create_qp(pd, init_attr);
+ 
+ 	if (udata && init_attr->qp_type == IB_QPT_DRIVER) {
+ 		size_t inlen =
+ 			process_udata_size(init_attr, udata);
+ 
+ 		if (!inlen)
+ 			return ERR_PTR(-EINVAL);
+ 
+ 		err = ib_copy_from_udata(&ucmd, udata, inlen);
+ 		if (err)
+ 			return ERR_PTR(err);
+ 	}
+ 
+ 	qp = kzalloc(sizeof(*qp), GFP_KERNEL);
+ 	if (!qp)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	if (init_attr->qp_type == IB_QPT_DRIVER) {
+ 		err = process_vendor_flags(qp, init_attr, &ucmd);
+ 		if (err)
+ 			goto free_qp;
+ 	}
+ 
+ 	if (init_attr->qp_type == IB_QPT_XRC_TGT)
+ 		xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
+ 
+ 	switch (init_attr->qp_type) {
+ 	case IB_QPT_DRIVER:
+ 		err = create_driver_qp(pd, qp, init_attr, &ucmd, udata);
+ 		break;
+ 	default:
+ 		err = create_qp_common(dev, pd, init_attr, udata, qp);
+ 	}
+ 	if (err) {
+ 		mlx5_ib_dbg(dev, "create_qp_common failed\n");
+ 		goto free_qp;
+ 	}
+ 
+ 	if (is_qp0(init_attr->qp_type))
+ 		qp->ibqp.qp_num = 0;
+ 	else if (is_qp1(init_attr->qp_type))
+ 		qp->ibqp.qp_num = 1;
+ 	else
+ 		qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
+ 
+ 	qp->trans_qp.xrcdn = xrcdn;
++>>>>>>> 2fdddbd5c966 (RDMA/mlx5: Move DRIVER QP flags check into separate function)
  
  	return &qp->ibqp;
 -
 -free_qp:
 -	kfree(qp);
 -	return ERR_PTR(err);
  }
  
  static int mlx5_ib_destroy_dct(struct mlx5_ib_qp *mqp)
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
