KVM: arm64: Move __smccc_workaround_1_smc to .rodata

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author David Brazdil <dbrazdil@google.com>
commit 7b2399ea5640b2e5f576af08b91091a26f240ea4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7b2399ea.failed

This snippet of assembly is used by cpu_errata.c to overwrite parts of KVM hyp
vector. Move it to its own source file and change its ELF section to .rodata.

	Signed-off-by: David Brazdil <dbrazdil@google.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
Link: https://lore.kernel.org/r/20200625131420.71444-3-dbrazdil@google.com
(cherry picked from commit 7b2399ea5640b2e5f576af08b91091a26f240ea4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kvm/hyp/hyp-entry.S
diff --cc arch/arm64/kvm/hyp/hyp-entry.S
index 93c38d0cb3dd,d362fad97cc8..000000000000
--- a/arch/arm64/kvm/hyp/hyp-entry.S
+++ b/arch/arm64/kvm/hyp/hyp-entry.S
@@@ -329,18 -318,4 +329,21 @@@ SYM_CODE_START(__bp_harden_hyp_vecs
  1:	.org __bp_harden_hyp_vecs + __BP_HARDEN_HYP_VECS_SZ
  	.org 1b
  SYM_CODE_END(__bp_harden_hyp_vecs)
++<<<<<<< HEAD
 +
 +	.popsection
 +
 +ENTRY(__smccc_workaround_1_smc_start)
 +	esb
 +	sub	sp, sp, #(8 * 4)
 +	stp	x2, x3, [sp, #(8 * 0)]
 +	stp	x0, x1, [sp, #(8 * 2)]
 +	mov	w0, #ARM_SMCCC_ARCH_WORKAROUND_1
 +	smc	#0
 +	ldp	x2, x3, [sp, #(8 * 0)]
 +	ldp	x0, x1, [sp, #(8 * 2)]
 +	add	sp, sp, #(8 * 4)
 +ENTRY(__smccc_workaround_1_smc_end)
++=======
++>>>>>>> 7b2399ea5640 (KVM: arm64: Move __smccc_workaround_1_smc to .rodata)
  #endif
diff --git a/arch/arm64/kvm/hyp/Makefile b/arch/arm64/kvm/hyp/Makefile
index 9e1beab1b440..55dbdb5afb11 100644
--- a/arch/arm64/kvm/hyp/Makefile
+++ b/arch/arm64/kvm/hyp/Makefile
@@ -6,6 +6,7 @@
 ccflags-y += -fno-stack-protector -DDISABLE_BRANCH_PROFILING
 
 obj-$(CONFIG_KVM) += hyp.o
+obj-$(CONFIG_KVM_INDIRECT_VECTORS) += smccc_wa.o
 
 hyp-y := vgic-v3-sr.o timer-sr.o aarch32.o vgic-v2-cpuif-proxy.o sysreg-sr.o \
 	 debug-sr.o entry.o switch.o fpsimd.o tlb.o hyp-entry.o
* Unmerged path arch/arm64/kvm/hyp/hyp-entry.S
diff --git a/arch/arm64/kvm/hyp/smccc_wa.S b/arch/arm64/kvm/hyp/smccc_wa.S
new file mode 100644
index 000000000000..b0441dbdf68b
--- /dev/null
+++ b/arch/arm64/kvm/hyp/smccc_wa.S
@@ -0,0 +1,32 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Copyright (C) 2015-2018 - ARM Ltd
+ * Author: Marc Zyngier <marc.zyngier@arm.com>
+ */
+
+#include <linux/arm-smccc.h>
+#include <linux/linkage.h>
+
+#include <asm/kvm_asm.h>
+#include <asm/kvm_mmu.h>
+
+	/*
+	 * This is not executed directly and is instead copied into the vectors
+	 * by install_bp_hardening_cb().
+	 */
+	.data
+	.pushsection	.rodata
+	.global		__smccc_workaround_1_smc
+SYM_DATA_START(__smccc_workaround_1_smc)
+	esb
+	sub	sp, sp, #(8 * 4)
+	stp	x2, x3, [sp, #(8 * 0)]
+	stp	x0, x1, [sp, #(8 * 2)]
+	mov	w0, #ARM_SMCCC_ARCH_WORKAROUND_1
+	smc	#0
+	ldp	x2, x3, [sp, #(8 * 0)]
+	ldp	x0, x1, [sp, #(8 * 2)]
+	add	sp, sp, #(8 * 4)
+1:	.org __smccc_workaround_1_smc + __SMCCC_WORKAROUND_1_SMC_SZ
+	.org 1b
+SYM_DATA_END(__smccc_workaround_1_smc)
