powerpc: Make test_translate_branch() independent of instruction length

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jordan Niethe <jniethe5@gmail.com>
commit 0b582db5490a1f250ef63337dd46d5c7599dae80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0b582db5.failed

test_translate_branch() uses two pointers to instructions within a
buffer, p and q, to test patch_branch(). The pointer arithmetic done on
them assumes a size of 4. This will not work if the instruction length
changes. Instead do the arithmetic relative to the void * to the buffer.

	Signed-off-by: Jordan Niethe <jniethe5@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Reviewed-by: Alistair Popple <alistair@popple.id.au>
Link: https://lore.kernel.org/r/20200506034050.24806-21-jniethe5@gmail.com
(cherry picked from commit 0b582db5490a1f250ef63337dd46d5c7599dae80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/lib/code-patching.c
diff --cc arch/powerpc/lib/code-patching.c
index 42fdadac6587,d946f7d6bb32..000000000000
--- a/arch/powerpc/lib/code-patching.c
+++ b/arch/powerpc/lib/code-patching.c
@@@ -566,7 -572,8 +566,12 @@@ static void __init test_branch_bform(vo
  static void __init test_translate_branch(void)
  {
  	unsigned long addr;
++<<<<<<< HEAD
 +	unsigned int *p, *q;
++=======
+ 	void *p, *q;
+ 	struct ppc_inst instr;
++>>>>>>> 0b582db5490a (powerpc: Make test_translate_branch() independent of instruction length)
  	void *buf;
  
  	buf = vmalloc(PAGE_ALIGN(0x2000000 + 1));
@@@ -579,8 -586,9 +584,14 @@@
  	addr = (unsigned long)p;
  	patch_branch(p, addr, 0);
  	check(instr_is_branch_to_addr(p, addr));
++<<<<<<< HEAD
 +	q = p + 1;
 +	patch_instruction(q, translate_branch(q, p));
++=======
+ 	q = p + 4;
+ 	translate_branch(&instr, q, p);
+ 	patch_instruction(q, instr);
++>>>>>>> 0b582db5490a (powerpc: Make test_translate_branch() independent of instruction length)
  	check(instr_is_branch_to_addr(q, addr));
  
  	/* Maximum negative case, move b . to addr + 32 MB */
@@@ -627,10 -639,12 +638,16 @@@
  	/* Simple case, branch to self moved a little */
  	p = buf;
  	addr = (unsigned long)p;
 -	create_cond_branch(&instr, p, addr, 0);
 -	patch_instruction(p, instr);
 +	patch_instruction(p, create_cond_branch(p, addr, 0));
  	check(instr_is_branch_to_addr(p, addr));
++<<<<<<< HEAD
 +	q = p + 1;
 +	patch_instruction(q, translate_branch(q, p));
++=======
+ 	q = buf + 4;
+ 	translate_branch(&instr, q, p);
+ 	patch_instruction(q, instr);
++>>>>>>> 0b582db5490a (powerpc: Make test_translate_branch() independent of instruction length)
  	check(instr_is_branch_to_addr(q, addr));
  
  	/* Maximum negative case, move b . to addr + 32 KB */
* Unmerged path arch/powerpc/lib/code-patching.c
