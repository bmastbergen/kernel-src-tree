scsi: zfcp: move scsi_eh & non-ERP timeout defines owned by and local to zfcp_fsf.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Steffen Maier <maier@linux.ibm.com>
commit a0e86d95558435670ce0616d031ba18aff6e4cd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a0e86d95.failed

Also clarify namespace prefix for the timeout used for FSF requests on
behalf of SCSI error recovery: It is zfcp_fsf_ not zfcp_scsi_.

	Signed-off-by: Steffen Maier <maier@linux.ibm.com>
	Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit a0e86d95558435670ce0616d031ba18aff6e4cd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/scsi/zfcp_def.h
diff --cc drivers/s390/scsi/zfcp_def.h
index 24e4058c94be,87a1fef5568e..000000000000
--- a/drivers/s390/scsi/zfcp_def.h
+++ b/drivers/s390/scsi/zfcp_def.h
@@@ -41,11 -41,6 +41,14 @@@
  #include "zfcp_fc.h"
  #include "zfcp_qdio.h"
  
++<<<<<<< HEAD
 +struct zfcp_reqlist;
 +
 +/********************* SCSI SPECIFIC DEFINES *********************************/
 +#define ZFCP_SCSI_ER_TIMEOUT                    (10*HZ)
 +
++=======
++>>>>>>> a0e86d955584 (scsi: zfcp: move scsi_eh & non-ERP timeout defines owned by and local to zfcp_fsf.c)
  /********************* FSF SPECIFIC DEFINES *********************************/
  
  /* ATTENTION: value must not be used by hardware */
* Unmerged path drivers/s390/scsi/zfcp_def.h
diff --git a/drivers/s390/scsi/zfcp_fsf.c b/drivers/s390/scsi/zfcp_fsf.c
index 394bf1953e55..a5408cfa62e2 100644
--- a/drivers/s390/scsi/zfcp_fsf.c
+++ b/drivers/s390/scsi/zfcp_fsf.c
@@ -21,6 +21,11 @@
 #include "zfcp_reqlist.h"
 #include "zfcp_diag.h"
 
+/* timeout for FSF requests sent during scsi_eh: abort or FCP TMF */
+#define ZFCP_FSF_SCSI_ER_TIMEOUT (10*HZ)
+/* timeout for: exchange config/port data outside ERP, or open/close WKA port */
+#define ZFCP_FSF_REQUEST_TIMEOUT (60*HZ)
+
 struct kmem_cache *zfcp_fsf_qtcb_cache;
 
 static bool ber_stop = true;
@@ -1027,7 +1032,7 @@ struct zfcp_fsf_req *zfcp_fsf_abort_fcp_cmnd(struct scsi_cmnd *scmnd)
 	req->qtcb->header.port_handle = zfcp_sdev->port->handle;
 	req->qtcb->bottom.support.req_handle = (u64) old_req_id;
 
-	zfcp_fsf_start_timer(req, ZFCP_SCSI_ER_TIMEOUT);
+	zfcp_fsf_start_timer(req, ZFCP_FSF_SCSI_ER_TIMEOUT);
 	if (!zfcp_fsf_req_send(req))
 		goto out;
 
@@ -2650,7 +2655,7 @@ struct zfcp_fsf_req *zfcp_fsf_fcp_task_mgmt(struct scsi_device *sdev,
 	fcp_cmnd = &req->qtcb->bottom.io.fcp_cmnd.iu;
 	zfcp_fc_fcp_tm(fcp_cmnd, sdev, tm_flags);
 
-	zfcp_fsf_start_timer(req, ZFCP_SCSI_ER_TIMEOUT);
+	zfcp_fsf_start_timer(req, ZFCP_FSF_SCSI_ER_TIMEOUT);
 	if (!zfcp_fsf_req_send(req))
 		goto out;
 
