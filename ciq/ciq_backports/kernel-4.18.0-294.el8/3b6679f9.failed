dmaengine: dmatest: move test data alloc & free into functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Alexandru Ardelean <alexandru.ardelean@analog.com>
commit 3b6679f91e6f7772b7bfa3417b637f09e5998357
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3b6679f9.failed

This patch starts to take advantage of the `dmatest_data` struct by moving
the common allocation & free-ing bits into functions.

	Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 3b6679f91e6f7772b7bfa3417b637f09e5998357)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/dmatest.c
diff --cc drivers/dma/dmatest.c
index 6511928b4cdf,50221d467d86..000000000000
--- a/drivers/dma/dmatest.c
+++ b/drivers/dma/dmatest.c
@@@ -573,63 -628,26 +620,71 @@@ static int dmatest_func(void *data
  		goto err_free_coefs;
  	}
  
 -	buf_size = params->buf_size;
 -	if (1 << align > buf_size) {
 +	if (1 << align > params->buf_size) {
  		pr_err("%u-byte buffer too small for %d-byte alignment\n",
 -		       buf_size, 1 << align);
 +		       params->buf_size, 1 << align);
 +		goto err_free_coefs;
 +	}
 +
++<<<<<<< HEAD
 +	thread->srcs = kcalloc(src_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->srcs)
  		goto err_free_coefs;
 +
 +	thread->usrcs = kcalloc(src_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->usrcs)
 +		goto err_usrcs;
 +
 +	for (i = 0; i < src_cnt; i++) {
 +		thread->usrcs[i] = kmalloc(params->buf_size + align,
 +					   GFP_KERNEL);
 +		if (!thread->usrcs[i])
 +			goto err_srcbuf;
 +
 +		/* align srcs to alignment restriction */
 +		if (align)
 +			thread->srcs[i] = PTR_ALIGN(thread->usrcs[i], align);
 +		else
 +			thread->srcs[i] = thread->usrcs[i];
  	}
 +	thread->srcs[i] = NULL;
 +
 +	thread->dsts = kcalloc(dst_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->dsts)
 +		goto err_dsts;
 +
 +	thread->udsts = kcalloc(dst_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->udsts)
 +		goto err_udsts;
  
 +	for (i = 0; i < dst_cnt; i++) {
 +		thread->udsts[i] = kmalloc(params->buf_size + align,
 +					   GFP_KERNEL);
 +		if (!thread->udsts[i])
 +			goto err_dstbuf;
 +
 +		/* align dsts to alignment restriction */
 +		if (align)
 +			thread->dsts[i] = PTR_ALIGN(thread->udsts[i], align);
 +		else
 +			thread->dsts[i] = thread->udsts[i];
 +	}
 +	thread->dsts[i] = NULL;
++=======
+ 	if (dmatest_alloc_test_data(src, buf_size, align) < 0)
+ 		goto err_free_coefs;
+ 
+ 	if (dmatest_alloc_test_data(dst, buf_size, align) < 0)
+ 		goto err_src;
++>>>>>>> 3b6679f91e6f (dmaengine: dmatest: move test data alloc & free into functions)
  
  	set_user_nice(current, 10);
  
 -	srcs = kcalloc(src->cnt, sizeof(dma_addr_t), GFP_KERNEL);
 +	srcs = kcalloc(src_cnt, sizeof(dma_addr_t), GFP_KERNEL);
  	if (!srcs)
- 		goto err_dstbuf;
+ 		goto err_dst;
  
 -	dma_pq = kcalloc(dst->cnt, sizeof(dma_addr_t), GFP_KERNEL);
 +	dma_pq = kcalloc(dst_cnt, sizeof(dma_addr_t), GFP_KERNEL);
  	if (!dma_pq)
  		goto err_srcs_array;
  
@@@ -852,19 -874,10 +907,26 @@@ error_unmap_continue
  	kfree(dma_pq);
  err_srcs_array:
  	kfree(srcs);
++<<<<<<< HEAD
 +err_dstbuf:
 +	for (i = 0; thread->udsts[i]; i++)
 +		kfree(thread->udsts[i]);
 +	kfree(thread->udsts);
 +err_udsts:
 +	kfree(thread->dsts);
 +err_dsts:
 +err_srcbuf:
 +	for (i = 0; thread->usrcs[i]; i++)
 +		kfree(thread->usrcs[i]);
 +	kfree(thread->usrcs);
 +err_usrcs:
 +	kfree(thread->srcs);
++=======
+ err_dst:
+ 	dmatest_free_test_data(dst);
+ err_src:
+ 	dmatest_free_test_data(src);
++>>>>>>> 3b6679f91e6f (dmaengine: dmatest: move test data alloc & free into functions)
  err_free_coefs:
  	kfree(pq_coefs);
  err_thread_type:
* Unmerged path drivers/dma/dmatest.c
