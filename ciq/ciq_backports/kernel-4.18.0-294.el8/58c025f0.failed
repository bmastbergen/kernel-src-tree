cgroup1: switch to use of errorfc() et.al.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [kernel] cgroup1: switch to use of errorfc() et.al (Scott Mayhew) [1622041]
Rebuild_FUZZ: 98.80%
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 58c025f0e803a45453bb5ada957cbf98163d3048
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/58c025f0.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 58c025f0e803a45453bb5ada957cbf98163d3048)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/cgroup/cgroup-v1.c
diff --cc kernel/cgroup/cgroup-v1.c
index dd94e2a4c22e,be1a1c83cdd1..000000000000
--- a/kernel/cgroup/cgroup-v1.c
+++ b/kernel/cgroup/cgroup-v1.c
@@@ -873,142 -874,159 +873,253 @@@ static int cgroup1_show_options(struct 
  	return 0;
  }
  
 -enum cgroup1_param {
 -	Opt_all,
 -	Opt_clone_children,
 -	Opt_cpuset_v2_mode,
 -	Opt_name,
 -	Opt_none,
 -	Opt_noprefix,
 -	Opt_release_agent,
 -	Opt_xattr,
 -};
 -
 -const struct fs_parameter_spec cgroup1_fs_parameters[] = {
 -	fsparam_flag  ("all",		Opt_all),
 -	fsparam_flag  ("clone_children", Opt_clone_children),
 -	fsparam_flag  ("cpuset_v2_mode", Opt_cpuset_v2_mode),
 -	fsparam_string("name",		Opt_name),
 -	fsparam_flag  ("none",		Opt_none),
 -	fsparam_flag  ("noprefix",	Opt_noprefix),
 -	fsparam_string("release_agent",	Opt_release_agent),
 -	fsparam_flag  ("xattr",		Opt_xattr),
 -	{}
 -};
 -
 -int cgroup1_parse_param(struct fs_context *fc, struct fs_parameter *param)
 +static int parse_cgroupfs_options(char *data, struct cgroup_sb_opts *opts)
  {
++<<<<<<< HEAD
 +	char *token, *o = data;
 +	bool all_ss = false, one_ss = false;
++=======
+ 	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
+ 	struct cgroup_subsys *ss;
+ 	struct fs_parse_result result;
+ 	int opt, i;
+ 
+ 	opt = fs_parse(fc, cgroup1_fs_parameters, param, &result);
+ 	if (opt == -ENOPARAM) {
+ 		if (strcmp(param->key, "source") == 0) {
+ 			fc->source = param->string;
+ 			param->string = NULL;
+ 			return 0;
+ 		}
+ 		for_each_subsys(ss, i) {
+ 			if (strcmp(param->key, ss->legacy_name))
+ 				continue;
+ 			ctx->subsys_mask |= (1 << i);
+ 			return 0;
+ 		}
+ 		return invalfc(fc, "Unknown subsys name '%s'", param->key);
+ 	}
+ 	if (opt < 0)
+ 		return opt;
+ 
+ 	switch (opt) {
+ 	case Opt_none:
+ 		/* Explicitly have no subsystems */
+ 		ctx->none = true;
+ 		break;
+ 	case Opt_all:
+ 		ctx->all_ss = true;
+ 		break;
+ 	case Opt_noprefix:
+ 		ctx->flags |= CGRP_ROOT_NOPREFIX;
+ 		break;
+ 	case Opt_clone_children:
+ 		ctx->cpuset_clone_children = true;
+ 		break;
+ 	case Opt_cpuset_v2_mode:
+ 		ctx->flags |= CGRP_ROOT_CPUSET_V2_MODE;
+ 		break;
+ 	case Opt_xattr:
+ 		ctx->flags |= CGRP_ROOT_XATTR;
+ 		break;
+ 	case Opt_release_agent:
+ 		/* Specifying two release agents is forbidden */
+ 		if (ctx->release_agent)
+ 			return invalfc(fc, "release_agent respecified");
+ 		ctx->release_agent = param->string;
+ 		param->string = NULL;
+ 		break;
+ 	case Opt_name:
+ 		/* blocked by boot param? */
+ 		if (cgroup_no_v1_named)
+ 			return -ENOENT;
+ 		/* Can't specify an empty name */
+ 		if (!param->size)
+ 			return invalfc(fc, "Empty name");
+ 		if (param->size > MAX_CGROUP_ROOT_NAMELEN - 1)
+ 			return invalfc(fc, "Name too long");
+ 		/* Must match [\w.-]+ */
+ 		for (i = 0; i < param->size; i++) {
+ 			char c = param->string[i];
+ 			if (isalnum(c))
+ 				continue;
+ 			if ((c == '.') || (c == '-') || (c == '_'))
+ 				continue;
+ 			return invalfc(fc, "Invalid name");
+ 		}
+ 		/* Specifying two names is forbidden */
+ 		if (ctx->name)
+ 			return invalfc(fc, "name respecified");
+ 		ctx->name = param->string;
+ 		param->string = NULL;
+ 		break;
+ 	}
+ 	return 0;
+ }
+ 
+ static int check_cgroupfs_options(struct fs_context *fc)
+ {
+ 	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
++>>>>>>> 58c025f0e803 (cgroup1: switch to use of errorfc() et.al.)
  	u16 mask = U16_MAX;
 -	u16 enabled = 0;
  	struct cgroup_subsys *ss;
 +	int nr_opts = 0;
  	int i;
  
  #ifdef CONFIG_CPUSETS
  	mask = ~((u16)1 << cpuset_cgrp_id);
  #endif
 -	for_each_subsys(ss, i)
 -		if (cgroup_ssid_enabled(i) && !cgroup1_ssid_disabled(i))
 -			enabled |= 1 << i;
  
 -	ctx->subsys_mask &= enabled;
 +	memset(opts, 0, sizeof(*opts));
 +
 +	while ((token = strsep(&o, ",")) != NULL) {
 +		nr_opts++;
 +
 +		if (!*token)
 +			return -EINVAL;
 +		if (!strcmp(token, "none")) {
 +			/* Explicitly have no subsystems */
 +			opts->none = true;
 +			continue;
 +		}
 +		if (!strcmp(token, "all")) {
 +			/* Mutually exclusive option 'all' + subsystem name */
 +			if (one_ss)
 +				return -EINVAL;
 +			all_ss = true;
 +			continue;
 +		}
 +		if (!strcmp(token, "noprefix")) {
 +			opts->flags |= CGRP_ROOT_NOPREFIX;
 +			continue;
 +		}
 +		if (!strcmp(token, "clone_children")) {
 +			opts->cpuset_clone_children = true;
 +			continue;
 +		}
 +		if (!strcmp(token, "cpuset_v2_mode")) {
 +			opts->flags |= CGRP_ROOT_CPUSET_V2_MODE;
 +			continue;
 +		}
 +		if (!strcmp(token, "xattr")) {
 +			opts->flags |= CGRP_ROOT_XATTR;
 +			continue;
 +		}
 +		if (!strncmp(token, "release_agent=", 14)) {
 +			/* Specifying two release agents is forbidden */
 +			if (opts->release_agent)
 +				return -EINVAL;
 +			opts->release_agent =
 +				kstrndup(token + 14, PATH_MAX - 1, GFP_KERNEL);
 +			if (!opts->release_agent)
 +				return -ENOMEM;
 +			continue;
 +		}
 +		if (!strncmp(token, "name=", 5)) {
 +			const char *name = token + 5;
 +
 +			/* blocked by boot param? */
 +			if (cgroup_no_v1_named)
 +				return -ENOENT;
 +			/* Can't specify an empty name */
 +			if (!strlen(name))
 +				return -EINVAL;
 +			/* Must match [\w.-]+ */
 +			for (i = 0; i < strlen(name); i++) {
 +				char c = name[i];
 +				if (isalnum(c))
 +					continue;
 +				if ((c == '.') || (c == '-') || (c == '_'))
 +					continue;
 +				return -EINVAL;
 +			}
 +			/* Specifying two names is forbidden */
 +			if (opts->name)
 +				return -EINVAL;
 +			opts->name = kstrndup(name,
 +					      MAX_CGROUP_ROOT_NAMELEN - 1,
 +					      GFP_KERNEL);
 +			if (!opts->name)
 +				return -ENOMEM;
 +
 +			continue;
 +		}
 +
 +		for_each_subsys(ss, i) {
 +			if (strcmp(token, ss->legacy_name))
 +				continue;
 +			if (!cgroup_ssid_enabled(i))
 +				continue;
 +			if (cgroup1_ssid_disabled(i))
 +				continue;
 +
 +			/* Mutually exclusive option 'all' + subsystem name */
 +			if (all_ss)
 +				return -EINVAL;
 +			opts->subsys_mask |= (1 << i);
 +			one_ss = true;
 +
 +			break;
 +		}
 +		if (i == CGROUP_SUBSYS_COUNT)
 +			return -ENOENT;
 +	}
  
  	/*
 -	 * In absense of 'none', 'name=' or subsystem name options,
 -	 * let's default to 'all'.
 +	 * If the 'all' option was specified select all the subsystems,
 +	 * otherwise if 'none', 'name=' and a subsystem name options were
 +	 * not specified, let's default to 'all'
  	 */
++<<<<<<< HEAD
 +	if (all_ss || (!one_ss && !opts->none && !opts->name))
 +		for_each_subsys(ss, i)
 +			if (cgroup_ssid_enabled(i) && !cgroup1_ssid_disabled(i))
 +				opts->subsys_mask |= (1 << i);
++=======
+ 	if (!ctx->subsys_mask && !ctx->none && !ctx->name)
+ 		ctx->all_ss = true;
+ 
+ 	if (ctx->all_ss) {
+ 		/* Mutually exclusive option 'all' + subsystem name */
+ 		if (ctx->subsys_mask)
+ 			return invalfc(fc, "subsys name conflicts with all");
+ 		/* 'all' => select all the subsystems */
+ 		ctx->subsys_mask = enabled;
+ 	}
++>>>>>>> 58c025f0e803 (cgroup1: switch to use of errorfc() et.al.)
  
  	/*
  	 * We either have to specify by name or by subsystems. (So all
  	 * empty hierarchies must have a name).
  	 */
++<<<<<<< HEAD
 +	if (!opts->subsys_mask && !opts->name)
 +		return -EINVAL;
++=======
+ 	if (!ctx->subsys_mask && !ctx->name)
+ 		return invalfc(fc, "Need name or subsystem set");
++>>>>>>> 58c025f0e803 (cgroup1: switch to use of errorfc() et.al.)
  
  	/*
  	 * Option noprefix was introduced just for backward compatibility
  	 * with the old cpuset, so we allow noprefix only if mounting just
  	 * the cpuset subsystem.
  	 */
++<<<<<<< HEAD
 +	if ((opts->flags & CGRP_ROOT_NOPREFIX) && (opts->subsys_mask & mask))
 +		return -EINVAL;
 +
 +	/* Can't specify "none" and some subsystems */
 +	if (opts->subsys_mask && opts->none)
 +		return -EINVAL;
++=======
+ 	if ((ctx->flags & CGRP_ROOT_NOPREFIX) && (ctx->subsys_mask & mask))
+ 		return invalfc(fc, "noprefix used incorrectly");
+ 
+ 	/* Can't specify "none" and some subsystems */
+ 	if (ctx->subsys_mask && ctx->none)
+ 		return invalfc(fc, "none used incorrectly");
++>>>>>>> 58c025f0e803 (cgroup1: switch to use of errorfc() et.al.)
  
  	return 0;
  }
@@@ -1031,14 -1050,14 +1142,21 @@@ static int cgroup1_remount(struct kernf
  		pr_warn("option changes via remount are deprecated (pid=%d comm=%s)\n",
  			task_tgid_nr(current), current->comm);
  
 -	added_mask = ctx->subsys_mask & ~root->subsys_mask;
 -	removed_mask = root->subsys_mask & ~ctx->subsys_mask;
 +	added_mask = opts.subsys_mask & ~root->subsys_mask;
 +	removed_mask = root->subsys_mask & ~opts.subsys_mask;
  
  	/* Don't allow flags or name to change at remount */
++<<<<<<< HEAD
 +	if ((opts.flags ^ root->flags) ||
 +	    (opts.name && strcmp(opts.name, root->name))) {
 +		pr_err("option or name mismatch, new: 0x%x \"%s\", old: 0x%x \"%s\"\n",
 +		       opts.flags, opts.name ?: "", root->flags, root->name);
++=======
+ 	if ((ctx->flags ^ root->flags) ||
+ 	    (ctx->name && strcmp(ctx->name, root->name))) {
+ 		errorfc(fc, "option or name mismatch, new: 0x%x \"%s\", old: 0x%x \"%s\"",
+ 		       ctx->flags, ctx->name ?: "", root->flags, root->name);
++>>>>>>> 58c025f0e803 (cgroup1: switch to use of errorfc() et.al.)
  		ret = -EINVAL;
  		goto out_unlock;
  	}
@@@ -1158,55 -1172,58 +1276,60 @@@ struct dentry *cgroup1_mount(struct fil
  	 * specification is allowed for already existing hierarchies but we
  	 * can't create new one without subsys specification.
  	 */
++<<<<<<< HEAD
 +	if (!opts.subsys_mask && !opts.none) {
 +		ret = -EINVAL;
 +		goto out_unlock;
 +	}
++=======
+ 	if (!ctx->subsys_mask && !ctx->none)
+ 		return invalfc(fc, "No subsys list or none specified");
++>>>>>>> 58c025f0e803 (cgroup1: switch to use of errorfc() et.al.)
  
  	/* Hierarchies may only be created in the initial cgroup namespace. */
 -	if (ctx->ns != &init_cgroup_ns)
 -		return -EPERM;
 +	if (ns != &init_cgroup_ns) {
 +		ret = -EPERM;
 +		goto out_unlock;
 +	}
  
  	root = kzalloc(sizeof(*root), GFP_KERNEL);
 -	if (!root)
 -		return -ENOMEM;
 +	if (!root) {
 +		ret = -ENOMEM;
 +		goto out_unlock;
 +	}
  
 -	ctx->root = root;
 -	init_cgroup_root(ctx);
 +	init_cgroup_root(root, &opts);
  
 -	ret = cgroup_setup_root(root, ctx->subsys_mask);
 +	ret = cgroup_setup_root(root, opts.subsys_mask);
  	if (ret)
  		cgroup_free_root(root);
 -	return ret;
 -}
 -
 -int cgroup1_get_tree(struct fs_context *fc)
 -{
 -	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
 -	int ret;
 -
 -	/* Check if the caller has permission to mount. */
 -	if (!ns_capable(ctx->ns->user_ns, CAP_SYS_ADMIN))
 -		return -EPERM;
 -
 -	cgroup_lock_and_drain_offline(&cgrp_dfl_root.cgrp);
 -
 -	ret = cgroup1_root_to_use(fc);
 -	if (!ret && !percpu_ref_tryget_live(&ctx->root->cgrp.self.refcnt))
 -		ret = 1;	/* restart */
  
 +out_unlock:
 +	if (!ret && !percpu_ref_tryget_live(&root->cgrp.self.refcnt)) {
 +		mutex_unlock(&cgroup_mutex);
 +		msleep(10);
 +		ret = restart_syscall();
 +		goto out_free;
 +	}
  	mutex_unlock(&cgroup_mutex);
 +out_free:
 +	kfree(opts.release_agent);
 +	kfree(opts.name);
  
 -	if (!ret)
 -		ret = cgroup_do_get_tree(fc);
 +	if (ret)
 +		return ERR_PTR(ret);
  
 -	if (!ret && percpu_ref_is_dying(&ctx->root->cgrp.self.refcnt)) {
 -		struct super_block *sb = fc->root->d_sb;
 -		dput(fc->root);
 -		deactivate_locked_super(sb);
 -		ret = 1;
 -	}
 +	dentry = cgroup_do_mount(&cgroup_fs_type, flags, root,
 +				 CGROUP_SUPER_MAGIC, ns);
  
 -	if (unlikely(ret > 0)) {
 +	if (!IS_ERR(dentry) && percpu_ref_is_dying(&root->cgrp.self.refcnt)) {
 +		struct super_block *sb = dentry->d_sb;
 +		dput(dentry);
 +		deactivate_locked_super(sb);
  		msleep(10);
 -		return restart_syscall();
 +		dentry = ERR_PTR(restart_syscall());
  	}
 -	return ret;
 +	return dentry;
  }
  
  static int __init cgroup1_wq_init(void)
* Unmerged path kernel/cgroup/cgroup-v1.c
