arm64/mm: enable HugeTLB migration for contiguous bit HugeTLB pages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Anshuman Khandual <anshuman.khandual@arm.com>
commit 5480280d3f2d11d47f9be59d49b20a8d7d1b33e8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5480280d.failed

Let arm64 subscribe to the previously added framework in which
architecture can inform whether a given huge page size is supported for
migration.  This just overrides the default function
arch_hugetlb_migration_supported() and enables migration for all
possible HugeTLB page sizes on arm64.

With this, HugeTLB migration support on arm64 now covers all possible
HugeTLB options.

          CONT PTE    PMD    CONT PMD    PUD
          --------    ---    --------    ---
  4K:        64K      2M        32M      1G
  16K:        2M     32M         1G
  64K:        2M    512M        16G

Link: http://lkml.kernel.org/r/1545121450-1663-6-git-send-email-anshuman.khandual@arm.com
	Signed-off-by: Anshuman Khandual <anshuman.khandual@arm.com>
	Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Reviewed-by: Steve Capper <steve.capper@arm.com>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 5480280d3f2d11d47f9be59d49b20a8d7d1b33e8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/hugetlb.h
diff --cc arch/arm64/include/asm/hugetlb.h
index 3fca598b667d,c6a07a3b433e..000000000000
--- a/arch/arm64/include/asm/hugetlb.h
+++ b/arch/arm64/include/asm/hugetlb.h
@@@ -20,6 -20,12 +20,15 @@@
  
  #include <asm/page.h>
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION
+ #define arch_hugetlb_migration_supported arch_hugetlb_migration_supported
+ extern bool arch_hugetlb_migration_supported(struct hstate *h);
+ #endif
+ 
+ #define __HAVE_ARCH_HUGE_PTEP_GET
++>>>>>>> 5480280d3f2d (arm64/mm: enable HugeTLB migration for contiguous bit HugeTLB pages)
  static inline pte_t huge_ptep_get(pte_t *ptep)
  {
  	return READ_ONCE(*ptep);
* Unmerged path arch/arm64/include/asm/hugetlb.h
diff --git a/arch/arm64/mm/hugetlbpage.c b/arch/arm64/mm/hugetlbpage.c
index c77aa4a69e35..41724e0b159a 100644
--- a/arch/arm64/mm/hugetlbpage.c
+++ b/arch/arm64/mm/hugetlbpage.c
@@ -27,6 +27,26 @@
 #include <asm/tlbflush.h>
 #include <asm/pgalloc.h>
 
+#ifdef CONFIG_ARCH_ENABLE_HUGEPAGE_MIGRATION
+bool arch_hugetlb_migration_supported(struct hstate *h)
+{
+	size_t pagesize = huge_page_size(h);
+
+	switch (pagesize) {
+#ifdef CONFIG_ARM64_4K_PAGES
+	case PUD_SIZE:
+#endif
+	case PMD_SIZE:
+	case CONT_PMD_SIZE:
+	case CONT_PTE_SIZE:
+		return true;
+	}
+	pr_warn("%s: unrecognized huge page size 0x%lx\n",
+			__func__, pagesize);
+	return false;
+}
+#endif
+
 int pmd_huge(pmd_t pmd)
 {
 	return pmd_val(pmd) && !(pmd_val(pmd) & PMD_TABLE_BIT);
