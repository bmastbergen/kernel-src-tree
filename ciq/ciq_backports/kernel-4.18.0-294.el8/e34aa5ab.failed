iwlwifi: pcie: remove occurrences of 22000 in the FW name defines

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Luca Coelho <luciano.coelho@intel.com>
commit e34aa5abfcf56502b79a4fdbe5fd9e94f70aa279
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e34aa5ab.failed

We don't use the number 22000 for our devices anymore, so remove all
occurrences of it in the FW name macros.

While at it, add IWL_QU_B_HR_B to the list of firmwares used by the
driver, which was missing.

	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
Link: https://lore.kernel.org/r/iwlwifi.20200424194456.93cc41bdbb4d.Ib7599901888a2d050f851bd878a875f593f2e8e5@changeid
(cherry picked from commit e34aa5abfcf56502b79a4fdbe5fd9e94f70aa279)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/cfg/22000.c
diff --cc drivers/net/wireless/intel/iwlwifi/cfg/22000.c
index a76b1ce4aa9a,b9d13e38f12b..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
+++ b/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
@@@ -73,13 -73,8 +73,18 @@@
  #define IWL_22000_SMEM_OFFSET		0x400000
  #define IWL_22000_SMEM_LEN		0xD0000
  
++<<<<<<< HEAD
 +#define IWL_22000_JF_FW_PRE		"iwlwifi-Qu-a0-jf-b0-"
 +#define IWL_22000_HR_FW_PRE		"iwlwifi-Qu-a0-hr-a0-"
 +#define IWL_22000_HR_CDB_FW_PRE		"iwlwifi-QuIcp-z0-hrcdb-a0-"
 +#define IWL_22000_HR_A_F0_FW_PRE	"iwlwifi-QuQnj-f0-hr-a0-"
 +#define IWL_22000_QU_B_HR_B_FW_PRE	"iwlwifi-Qu-b0-hr-b0-"
 +#define IWL_22000_HR_B_FW_PRE		"iwlwifi-QuQnj-b0-hr-b0-"
 +#define IWL_22000_HR_A0_FW_PRE		"iwlwifi-QuQnj-a0-hr-a0-"
++=======
+ #define IWL_QU_B_HR_B_FW_PRE		"iwlwifi-Qu-b0-hr-b0-"
+ #define IWL_QNJ_B_HR_B_FW_PRE		"iwlwifi-QuQnj-b0-hr-b0-"
++>>>>>>> e34aa5abfcf5 (iwlwifi: pcie: remove occurrences of 22000 in the FW name defines)
  #define IWL_QU_C_HR_B_FW_PRE		"iwlwifi-Qu-c0-hr-b0-"
  #define IWL_QU_B_JF_B_FW_PRE		"iwlwifi-Qu-b0-jf-b0-"
  #define IWL_QU_C_JF_B_FW_PRE		"iwlwifi-Qu-c0-jf-b0-"
@@@ -95,18 -90,10 +100,25 @@@
  #define IWL_SNJ_A_GF4_A_FW_PRE		"iwlwifi-SoSnj-a0-gf4-a0-"
  #define IWL_SNJ_A_GF_A_FW_PRE		"iwlwifi-SoSnj-a0-gf-a0-"
  
++<<<<<<< HEAD
 +#define IWL_22000_HR_MODULE_FIRMWARE(api) \
 +	IWL_22000_HR_FW_PRE __stringify(api) ".ucode"
 +#define IWL_22000_JF_MODULE_FIRMWARE(api) \
 +	IWL_22000_JF_FW_PRE __stringify(api) ".ucode"
 +#define IWL_22000_HR_A_F0_QNJ_MODULE_FIRMWARE(api) \
 +	IWL_22000_HR_A_F0_FW_PRE __stringify(api) ".ucode"
 +#define IWL_22000_QU_B_HR_B_MODULE_FIRMWARE(api) \
 +	IWL_22000_QU_B_HR_B_FW_PRE __stringify(api) ".ucode"
 +#define IWL_22000_HR_B_QNJ_MODULE_FIRMWARE(api)	\
 +	IWL_22000_HR_B_FW_PRE __stringify(api) ".ucode"
 +#define IWL_22000_HR_A0_QNJ_MODULE_FIRMWARE(api) \
 +	IWL_22000_HR_A0_FW_PRE __stringify(api) ".ucode"
++=======
+ #define IWL_QU_B_HR_B_MODULE_FIRMWARE(api) \
+ 	IWL_QU_B_HR_B_FW_PRE __stringify(api) ".ucode"
+ #define IWL_QNJ_B_HR_B_MODULE_FIRMWARE(api)	\
+ 	IWL_QNJ_B_HR_B_FW_PRE __stringify(api) ".ucode"
++>>>>>>> e34aa5abfcf5 (iwlwifi: pcie: remove occurrences of 22000 in the FW name defines)
  #define IWL_QUZ_A_HR_B_MODULE_FIRMWARE(api) \
  	IWL_QUZ_A_HR_B_FW_PRE __stringify(api) ".ucode"
  #define IWL_QUZ_A_JF_B_MODULE_FIRMWARE(api) \
@@@ -251,9 -284,68 +263,9 @@@ static const struct iwl_ht_params iwl_2
  #define IWL_NUM_RBDS_22000_HE		2048
  #define IWL_NUM_RBDS_AX210_HE		4096
  
 -/*
 - * All JF radio modules are part of the 9000 series, but the MAC part
 - * looks more like 22000.  That's why this device is here, but called
 - * 9560 nevertheless.
 - */
 -const struct iwl_cfg iwl9560_qu_b0_jf_b0_cfg = {
 -	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 -	IWL_DEVICE_22500,
 -	.num_rbds = IWL_NUM_RBDS_NON_HE,
 -};
 -
 -const struct iwl_cfg iwl9560_qu_c0_jf_b0_cfg = {
 -	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 -	IWL_DEVICE_22500,
 -	.num_rbds = IWL_NUM_RBDS_NON_HE,
 -};
 -
 -const struct iwl_cfg iwl9560_quz_a0_jf_b0_cfg = {
 -	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 -	IWL_DEVICE_22500,
 -	/*
 -	 * This device doesn't support receiving BlockAck with a large bitmap
 -	 * so we need to restrict the size of transmitted aggregation to the
 -	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 -	 */
 -	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 -	.num_rbds = IWL_NUM_RBDS_NON_HE,
 -};
 -
 -const struct iwl_cfg iwl9560_qnj_b0_jf_b0_cfg = {
 -	.fw_name_pre = IWL_QNJ_B_JF_B_FW_PRE,
 -	IWL_DEVICE_22500,
 -	/*
 -	 * This device doesn't support receiving BlockAck with a large bitmap
 -	 * so we need to restrict the size of transmitted aggregation to the
 -	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 -	 */
 -	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 -	.num_rbds = IWL_NUM_RBDS_NON_HE,
 -};
 -
 -const struct iwl_cfg_trans_params iwl_ax200_trans_cfg = {
 -	.device_family = IWL_DEVICE_FAMILY_22000,
 -	.base_params = &iwl_22000_base_params,
 -	.mq_rx_supported = true,
 -	.use_tfh = true,
 -	.rf_id = true,
 -	.gen2 = true,
 -	.bisr_workaround = 1,
 -};
 -
 -const char iwl_ax200_name[] = "Intel(R) Wi-Fi 6 AX200 160MHz";
 -const char iwl_ax201_name[] = "Intel(R) Wi-Fi 6 AX201 160MHz";
 -
 -const char iwl_ax200_killer_1650w_name[] =
 -	"Killer(R) Wi-Fi 6 AX1650w 160MHz Wireless Network Adapter (200D2W)";
 -const char iwl_ax200_killer_1650x_name[] =
 -	"Killer(R) Wi-Fi 6 AX1650x 160MHz Wireless Network Adapter (200NGW)";
 -
  const struct iwl_cfg iwl_ax101_cfg_qu_hr = {
  	.name = "Intel(R) Wi-Fi 6 AX101",
- 	.fw_name_pre = IWL_22000_QU_B_HR_B_FW_PRE,
+ 	.fw_name_pre = IWL_QU_B_HR_B_FW_PRE,
  	IWL_DEVICE_22500,
  	/*
  	 * This device doesn't support receiving BlockAck with a large bitmap
@@@ -372,215 -462,9 +384,215 @@@ const struct iwl_cfg iwl_ax200_cfg_cc 
  	.num_rbds = IWL_NUM_RBDS_22000_HE,
  };
  
 +const struct iwl_cfg killer1650x_2ax_cfg = {
 +	.name = "Killer(R) Wi-Fi 6 AX1650x 160MHz Wireless Network Adapter (200NGW)",
 +	.fw_name_pre = IWL_CC_A_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.trans.bisr_workaround = 1,
 +	.num_rbds = IWL_NUM_RBDS_22000_HE,
 +};
 +
 +const struct iwl_cfg killer1650w_2ax_cfg = {
 +	.name = "Killer(R) Wi-Fi 6 AX1650w 160MHz Wireless Network Adapter (200D2W)",
 +	.fw_name_pre = IWL_CC_A_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.trans.bisr_workaround = 1,
 +	.num_rbds = IWL_NUM_RBDS_22000_HE,
 +};
 +
 +/*
 + * All JF radio modules are part of the 9000 series, but the MAC part
 + * looks more like 22000.  That's why this device is here, but called
 + * 9560 nevertheless.
 + */
 +const struct iwl_cfg iwl9461_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9461",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9462_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9462",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_160_cfg_qu_b0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9461_2ac_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9461",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9462_2ac_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9462",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_160_cfg_qu_c0_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QU_C_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_qnj_jf_b0 = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QNJ_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_2ac_160_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Wireless-AC 9560 160MHz",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9461_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Dual Band Wireless AC 9461",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9462_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Intel(R) Dual Band Wireless AC 9462",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_killer_s_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Killer (R) Wireless-AC 1550s Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg iwl9560_killer_i_2ac_cfg_quz_a0_jf_b0_soc = {
 +	.name = "Killer (R) Wireless-AC 1550i Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QUZ_A_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	/*
 +	 * This device doesn't support receiving BlockAck with a large bitmap
 +	 * so we need to restrict the size of transmitted aggregation to the
 +	 * HT size; mac80211 would otherwise pick the HE max (256) by default.
 +	 */
 +	.max_tx_agg_size = IEEE80211_MAX_AMPDU_BUF_HT,
 +	.integrated = true,
 +	.soc_latency = 5000,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg killer1550i_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Killer (R) Wireless-AC 1550i Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
 +const struct iwl_cfg killer1550s_2ac_cfg_qu_b0_jf_b0 = {
 +	.name = "Killer (R) Wireless-AC 1550s Wireless Network Adapter (9560NGW)",
 +	.fw_name_pre = IWL_QU_B_JF_B_FW_PRE,
 +	IWL_DEVICE_22500,
 +	.num_rbds = IWL_NUM_RBDS_NON_HE,
 +};
 +
  const struct iwl_cfg killer1650s_2ax_cfg_qu_b0_hr_b0 = {
  	.name = "Killer(R) Wi-Fi 6 AX1650i 160MHz Wireless Network Adapter (201NGW)",
- 	.fw_name_pre = IWL_22000_QU_B_HR_B_FW_PRE,
+ 	.fw_name_pre = IWL_QU_B_HR_B_FW_PRE,
  	IWL_DEVICE_22500,
  	/*
  	 * This device doesn't support receiving BlockAck with a large bitmap
@@@ -756,11 -600,8 +768,16 @@@ const struct iwl_cfg iwlax211_cfg_snj_g
  	.num_rbds = IWL_NUM_RBDS_AX210_HE,
  };
  
++<<<<<<< HEAD
 +MODULE_FIRMWARE(IWL_22000_HR_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
 +MODULE_FIRMWARE(IWL_22000_JF_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
 +MODULE_FIRMWARE(IWL_22000_HR_A_F0_QNJ_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
 +MODULE_FIRMWARE(IWL_22000_HR_B_QNJ_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
 +MODULE_FIRMWARE(IWL_22000_HR_A0_QNJ_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
++=======
+ MODULE_FIRMWARE(IWL_QU_B_HR_B_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
+ MODULE_FIRMWARE(IWL_QNJ_B_HR_B_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
++>>>>>>> e34aa5abfcf5 (iwlwifi: pcie: remove occurrences of 22000 in the FW name defines)
  MODULE_FIRMWARE(IWL_QU_C_HR_B_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
  MODULE_FIRMWARE(IWL_QU_B_JF_B_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
  MODULE_FIRMWARE(IWL_QUZ_A_HR_B_MODULE_FIRMWARE(IWL_22000_UCODE_API_MAX));
* Unmerged path drivers/net/wireless/intel/iwlwifi/cfg/22000.c
