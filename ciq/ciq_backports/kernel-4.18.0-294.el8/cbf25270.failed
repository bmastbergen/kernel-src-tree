cpupower: Fix NULL but dereferenced coccicheck errors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Shuah Khan <skhan@linuxfoundation.org>
commit cbf25270933742c4a6d8671bba5c79a4e879cff3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/cbf25270.failed

Fix NULL but dereferenced coccicheck errors found by:

make coccicheck MODE=report M=tools/power/cpupower

tools/power/cpupower/lib/cpufreq.c:384:19-23: ERROR: first is NULL but dereferenced.
tools/power/cpupower/lib/cpufreq.c:440:19-23: ERROR: first is NULL but dereferenced.
tools/power/cpupower/lib/cpufreq.c:308:19-23: ERROR: first is NULL but dereferenced.
tools/power/cpupower/lib/cpufreq.c:753:19-23: ERROR: first is NULL but dereferenced.

	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit cbf25270933742c4a6d8671bba5c79a4e879cff3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/cpupower/lib/cpufreq.c
diff --cc tools/power/cpupower/lib/cpufreq.c
index 245e5941f605,c3b56db8b921..000000000000
--- a/tools/power/cpupower/lib/cpufreq.c
+++ b/tools/power/cpupower/lib/cpufreq.c
@@@ -388,8 -388,64 +388,69 @@@ struct cpufreq_available_frequencie
  	return NULL;
  }
  
++<<<<<<< HEAD
 +void cpufreq_put_available_frequencies(struct cpufreq_available_frequencies
 +				*any) {
++=======
+ struct cpufreq_available_frequencies
+ *cpufreq_get_boost_frequencies(unsigned int cpu)
+ {
+ 	struct cpufreq_available_frequencies *first = NULL;
+ 	struct cpufreq_available_frequencies *current = NULL;
+ 	char one_value[SYSFS_PATH_MAX];
+ 	char linebuf[MAX_LINE_LEN];
+ 	unsigned int pos, i;
+ 	unsigned int len;
+ 
+ 	len = sysfs_cpufreq_read_file(cpu, "scaling_boost_frequencies",
+ 				      linebuf, sizeof(linebuf));
+ 	if (len == 0)
+ 		return NULL;
+ 
+ 	pos = 0;
+ 	for (i = 0; i < len; i++) {
+ 		if (linebuf[i] == ' ' || linebuf[i] == '\n') {
+ 			if (i - pos < 2)
+ 				continue;
+ 			if (i - pos >= SYSFS_PATH_MAX)
+ 				goto error_out;
+ 			if (current) {
+ 				current->next = malloc(sizeof(*current));
+ 				if (!current->next)
+ 					goto error_out;
+ 				current = current->next;
+ 			} else {
+ 				first = malloc(sizeof(*first));
+ 				if (!first)
+ 					return NULL;
+ 				current = first;
+ 			}
+ 			current->first = first;
+ 			current->next = NULL;
+ 
+ 			memcpy(one_value, linebuf + pos, i - pos);
+ 			one_value[i - pos] = '\0';
+ 			if (sscanf(one_value, "%lu", &current->frequency) != 1)
+ 				goto error_out;
+ 
+ 			pos = i + 1;
+ 		}
+ 	}
+ 
+ 	return first;
+ 
+  error_out:
+ 	while (first) {
+ 		current = first->next;
+ 		free(first);
+ 		first = current;
+ 	}
+ 	return NULL;
+ }
+ 
+ void cpufreq_put_available_frequencies(struct cpufreq_available_frequencies *any)
+ {
++>>>>>>> cbf252709337 (cpupower: Fix NULL but dereferenced coccicheck errors)
  	struct cpufreq_available_frequencies *tmp, *next;
  
  	if (!any)
* Unmerged path tools/power/cpupower/lib/cpufreq.c
