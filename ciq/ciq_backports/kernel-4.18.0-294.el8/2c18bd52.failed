x86/resctrl: Fix memory bandwidth counter width for AMD

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Babu Moger <babu.moger@amd.com>
commit 2c18bd525c47f882f033b0a813ecd09c93e1ecdf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/2c18bd52.failed

Memory bandwidth is calculated reading the monitoring counter
at two intervals and calculating the delta. It is the softwareâ€™s
responsibility to read the count often enough to avoid having
the count roll over _twice_ between reads.

The current code hardcodes the bandwidth monitoring counter's width
to 24 bits for AMD. This is due to default base counter width which
is 24. Currently, AMD does not implement the CPUID 0xF.[ECX=1]:EAX
to adjust the counter width. But, the AMD hardware supports much
wider bandwidth counter with the default width of 44 bits.

Kernel reads these monitoring counters every 1 second and adjusts the
counter value for overflow. With 24 bits and scale value of 64 for AMD,
it can only measure up to 1GB/s without overflowing. For the rates
above 1GB/s this will fail to measure the bandwidth.

Fix the issue setting the default width to 44 bits by adjusting the
offset.

AMD future products will implement CPUID 0xF.[ECX=1]:EAX.

 [ bp: Let the line stick out and drop {}-brackets around a single
   statement. ]

Fixes: 4d05bf71f157 ("x86/resctrl: Introduce AMD QOS feature")
	Signed-off-by: Babu Moger <babu.moger@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/159129975546.62538.5656031125604254041.stgit@naples-babu.amd.com
(cherry picked from commit 2c18bd525c47f882f033b0a813ecd09c93e1ecdf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/resctrl/core.c
diff --cc arch/x86/kernel/cpu/resctrl/core.c
index ff244480fe94,6a9df71c1b9e..000000000000
--- a/arch/x86/kernel/cpu/resctrl/core.c
+++ b/arch/x86/kernel/cpu/resctrl/core.c
@@@ -966,6 -958,36 +966,39 @@@ static __init void rdt_init_res_defs(vo
  
  static enum cpuhp_state rdt_online;
  
++<<<<<<< HEAD
++=======
+ /* Runs once on the BSP during boot. */
+ void resctrl_cpu_detect(struct cpuinfo_x86 *c)
+ {
+ 	if (!cpu_has(c, X86_FEATURE_CQM_LLC)) {
+ 		c->x86_cache_max_rmid  = -1;
+ 		c->x86_cache_occ_scale = -1;
+ 		c->x86_cache_mbm_width_offset = -1;
+ 		return;
+ 	}
+ 
+ 	/* will be overridden if occupancy monitoring exists */
+ 	c->x86_cache_max_rmid = cpuid_ebx(0xf);
+ 
+ 	if (cpu_has(c, X86_FEATURE_CQM_OCCUP_LLC) ||
+ 	    cpu_has(c, X86_FEATURE_CQM_MBM_TOTAL) ||
+ 	    cpu_has(c, X86_FEATURE_CQM_MBM_LOCAL)) {
+ 		u32 eax, ebx, ecx, edx;
+ 
+ 		/* QoS sub-leaf, EAX=0Fh, ECX=1 */
+ 		cpuid_count(0xf, 1, &eax, &ebx, &ecx, &edx);
+ 
+ 		c->x86_cache_max_rmid  = ecx;
+ 		c->x86_cache_occ_scale = ebx;
+ 		c->x86_cache_mbm_width_offset = eax & 0xff;
+ 
+ 		if (c->x86_vendor == X86_VENDOR_AMD && !c->x86_cache_mbm_width_offset)
+ 			c->x86_cache_mbm_width_offset = MBM_CNTR_WIDTH_OFFSET_AMD;
+ 	}
+ }
+ 
++>>>>>>> 2c18bd525c47 (x86/resctrl: Fix memory bandwidth counter width for AMD)
  static int __init resctrl_late_init(void)
  {
  	struct rdt_resource *r;
* Unmerged path arch/x86/kernel/cpu/resctrl/core.c
diff --git a/arch/x86/kernel/cpu/resctrl/internal.h b/arch/x86/kernel/cpu/resctrl/internal.h
index 099666d036e7..727a0a2ded75 100644
--- a/arch/x86/kernel/cpu/resctrl/internal.h
+++ b/arch/x86/kernel/cpu/resctrl/internal.h
@@ -36,6 +36,7 @@
 #define MBA_IS_LINEAR			0x4
 #define MBA_MAX_MBPS			U32_MAX
 #define MAX_MBA_BW_AMD			0x800
+#define MBM_CNTR_WIDTH_OFFSET_AMD	20
 
 #define RMID_VAL_ERROR			BIT_ULL(63)
 #define RMID_VAL_UNAVAIL		BIT_ULL(62)
