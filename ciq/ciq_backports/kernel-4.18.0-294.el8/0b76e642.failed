phylink: <linux/phylink.h>: fix function prototype kernel-doc warning

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Randy Dunlap <rdunlap@infradead.org>
commit 0b76e642f9ad2471e899e2dd71b9543b7e85e9f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0b76e642.failed

Fix a kernel-doc warning for the pcs_config() function prototype:

../include/linux/phylink.h:406: warning: Excess function parameter 'permit_pause_to_mac' description in 'pcs_config'

Fixes: 7137e18f6f88 ("net: phylink: add struct phylink_pcs")
	Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
	Cc: Russell King <linux@armlinux.org.uk>
	Cc: David S. Miller <davem@davemloft.net>
	Cc: netdev@vger.kernel.org
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0b76e642f9ad2471e899e2dd71b9543b7e85e9f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/phylink.h
diff --cc include/linux/phylink.h
index 230e0d96c14c,c36fb41a7d90..000000000000
--- a/include/linux/phylink.h
+++ b/include/linux/phylink.h
@@@ -240,9 -320,115 +240,121 @@@ void mac_link_down(struct phylink_confi
   * phy_init_eee() and perform appropriate MAC configuration for EEE.
   * Interface type selection must be done in mac_config().
   */
++<<<<<<< HEAD
 +void mac_link_up(struct phylink_config *config, unsigned int mode,
 +		 phy_interface_t interface,
 +		 struct phy_device *phy);
++=======
+ void mac_link_up(struct phylink_config *config, struct phy_device *phy,
+ 		 unsigned int mode, phy_interface_t interface,
+ 		 int speed, int duplex, bool tx_pause, bool rx_pause);
+ #endif
+ 
+ struct phylink_pcs_ops;
+ 
+ /**
+  * struct phylink_pcs - PHYLINK PCS instance
+  * @ops: a pointer to the &struct phylink_pcs_ops structure
+  * @poll: poll the PCS for link changes
+  *
+  * This structure is designed to be embedded within the PCS private data,
+  * and will be passed between phylink and the PCS.
+  */
+ struct phylink_pcs {
+ 	const struct phylink_pcs_ops *ops;
+ 	bool poll;
+ };
+ 
+ /**
+  * struct phylink_pcs_ops - MAC PCS operations structure.
+  * @pcs_get_state: read the current MAC PCS link state from the hardware.
+  * @pcs_config: configure the MAC PCS for the selected mode and state.
+  * @pcs_an_restart: restart 802.3z BaseX autonegotiation.
+  * @pcs_link_up: program the PCS for the resolved link configuration
+  *               (where necessary).
+  */
+ struct phylink_pcs_ops {
+ 	void (*pcs_get_state)(struct phylink_pcs *pcs,
+ 			      struct phylink_link_state *state);
+ 	int (*pcs_config)(struct phylink_pcs *pcs, unsigned int mode,
+ 			  phy_interface_t interface,
+ 			  const unsigned long *advertising,
+ 			  bool permit_pause_to_mac);
+ 	void (*pcs_an_restart)(struct phylink_pcs *pcs);
+ 	void (*pcs_link_up)(struct phylink_pcs *pcs, unsigned int mode,
+ 			    phy_interface_t interface, int speed, int duplex);
+ };
+ 
+ #if 0 /* For kernel-doc purposes only. */
+ /**
+  * pcs_get_state() - Read the current inband link state from the hardware
+  * @pcs: a pointer to a &struct phylink_pcs.
+  * @state: a pointer to a &struct phylink_link_state.
+  *
+  * Read the current inband link state from the MAC PCS, reporting the
+  * current speed in @state->speed, duplex mode in @state->duplex, pause
+  * mode in @state->pause using the %MLO_PAUSE_RX and %MLO_PAUSE_TX bits,
+  * negotiation completion state in @state->an_complete, and link up state
+  * in @state->link. If possible, @state->lp_advertising should also be
+  * populated.
+  *
+  * When present, this overrides mac_pcs_get_state() in &struct
+  * phylink_mac_ops.
+  */
+ void pcs_get_state(struct phylink_pcs *pcs,
+ 		   struct phylink_link_state *state);
+ 
+ /**
+  * pcs_config() - Configure the PCS mode and advertisement
+  * @pcs: a pointer to a &struct phylink_pcs.
+  * @mode: one of %MLO_AN_FIXED, %MLO_AN_PHY, %MLO_AN_INBAND.
+  * @interface: interface mode to be used
+  * @advertising: adertisement ethtool link mode mask
+  * @permit_pause_to_mac: permit forwarding pause resolution to MAC
+  *
+  * Configure the PCS for the operating mode, the interface mode, and set
+  * the advertisement mask. @permit_pause_to_mac indicates whether the
+  * hardware may forward the pause mode resolution to the MAC.
+  *
+  * When operating in %MLO_AN_INBAND, inband should always be enabled,
+  * otherwise inband should be disabled.
+  *
+  * For SGMII, there is no advertisement from the MAC side, the PCS should
+  * be programmed to acknowledge the inband word from the PHY.
+  *
+  * For 1000BASE-X, the advertisement should be programmed into the PCS.
+  *
+  * For most 10GBASE-R, there is no advertisement.
+  */
+ int pcs_config(struct phylink_pcs *pcs, unsigned int mode,
+ 	       phy_interface_t interface, const unsigned long *advertising,
+ 	       bool permit_pause_to_mac);
+ 
+ /**
+  * pcs_an_restart() - restart 802.3z BaseX autonegotiation
+  * @pcs: a pointer to a &struct phylink_pcs.
+  *
+  * When PCS ops are present, this overrides mac_an_restart() in &struct
+  * phylink_mac_ops.
+  */
+ void pcs_an_restart(struct phylink_pcs *pcs);
+ 
+ /**
+  * pcs_link_up() - program the PCS for the resolved link configuration
+  * @pcs: a pointer to a &struct phylink_pcs.
+  * @mode: link autonegotiation mode
+  * @interface: link &typedef phy_interface_t mode
+  * @speed: link speed
+  * @duplex: link duplex
+  *
+  * This call will be made just before mac_link_up() to inform the PCS of
+  * the resolved link parameters. For example, a PCS operating in SGMII
+  * mode without in-band AN needs to be manually configured for the link
+  * and duplex setting. Otherwise, this should be a no-op.
+  */
+ void pcs_link_up(struct phylink_pcs *pcs, unsigned int mode,
+ 		 phy_interface_t interface, int speed, int duplex);
++>>>>>>> 0b76e642f9ad (phylink: <linux/phylink.h>: fix function prototype kernel-doc warning)
  #endif
  
  struct phylink *phylink_create(struct phylink_config *, struct fwnode_handle *,
* Unmerged path include/linux/phylink.h
