RDMA/mlx5: Separate create QP flows to be based on type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 47c806121a515bfee3180cced40af25cbf2ac10c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/47c80612.failed

Move driver QP creation flow to separate functions to simplify
the create_qp() and allow future separation of create_qp_common()
to subtypes.

Link: https://lore.kernel.org/r/20200427154636.381474-8-leon@kernel.org
	Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 47c806121a515bfee3180cced40af25cbf2ac10c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 9f87b08d533e,ae336c1eed74..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -2563,43 -2557,9 +2563,49 @@@ static void destroy_qp_common(struct ml
  		destroy_qp_user(dev, &get_pd(qp)->ibpd, qp, base, udata);
  }
  
++<<<<<<< HEAD
 +static const char *ib_qp_type_str(enum ib_qp_type type)
 +{
 +	switch (type) {
 +	case IB_QPT_SMI:
 +		return "IB_QPT_SMI";
 +	case IB_QPT_GSI:
 +		return "IB_QPT_GSI";
 +	case IB_QPT_RC:
 +		return "IB_QPT_RC";
 +	case IB_QPT_UC:
 +		return "IB_QPT_UC";
 +	case IB_QPT_UD:
 +		return "IB_QPT_UD";
 +	case IB_QPT_RAW_IPV6:
 +		return "IB_QPT_RAW_IPV6";
 +	case IB_QPT_RAW_ETHERTYPE:
 +		return "IB_QPT_RAW_ETHERTYPE";
 +	case IB_QPT_XRC_INI:
 +		return "IB_QPT_XRC_INI";
 +	case IB_QPT_XRC_TGT:
 +		return "IB_QPT_XRC_TGT";
 +	case IB_QPT_RAW_PACKET:
 +		return "IB_QPT_RAW_PACKET";
 +	case MLX5_IB_QPT_REG_UMR:
 +		return "MLX5_IB_QPT_REG_UMR";
 +	case IB_QPT_DRIVER:
 +		return "IB_QPT_DRIVER";
 +	case IB_QPT_MAX:
 +	default:
 +		return "Invalid QP type";
 +	}
 +}
 +
 +static struct ib_qp *mlx5_ib_create_dct(struct ib_pd *pd,
 +					struct ib_qp_init_attr *attr,
 +					struct mlx5_ib_create_qp *ucmd,
 +					struct ib_udata *udata)
++=======
+ static int create_dct(struct ib_pd *pd, struct mlx5_ib_qp *qp,
+ 		      struct ib_qp_init_attr *attr,
+ 		      struct mlx5_ib_create_qp *ucmd, struct ib_udata *udata)
++>>>>>>> 47c806121a51 (RDMA/mlx5: Separate create QP flows to be based on type)
  {
  	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
  		udata, struct mlx5_ib_ucontext, ibucontext);
@@@ -2608,22 -2567,13 +2614,25 @@@
  	u32 uidx = MLX5_IB_DEFAULT_UIDX;
  	void *dctc;
  
- 	if (!attr->srq || !attr->recv_cq)
- 		return ERR_PTR(-EINVAL);
- 
  	err = get_qp_user_index(ucontext, ucmd, sizeof(*ucmd), &uidx);
  	if (err)
- 		return ERR_PTR(err);
+ 		return err;
  
++<<<<<<< HEAD
 +	qp = kzalloc(sizeof(*qp), GFP_KERNEL);
 +	if (!qp)
 +		return ERR_PTR(-ENOMEM);
++=======
+ 	qp->dct.in = kzalloc(MLX5_ST_SZ_BYTES(create_dct_in), GFP_KERNEL);
+ 	if (!qp->dct.in)
+ 		return -ENOMEM;
++>>>>>>> 47c806121a51 (RDMA/mlx5: Separate create QP flows to be based on type)
 +
 +	qp->dct.in = kzalloc(MLX5_ST_SZ_BYTES(create_dct_in), GFP_KERNEL);
 +	if (!qp->dct.in) {
 +		err = -ENOMEM;
 +		goto err_free;
 +	}
  
  	MLX5_SET(create_dct_in, qp->dct.in, uid, to_mpd(pd)->uid);
  	dctc = MLX5_ADDR_OF(create_dct_in, qp->dct.in, dct_context_entry);
@@@ -2639,10 -2588,7 +2648,14 @@@
  
  	qp->state = IB_QPS_RESET;
  
++<<<<<<< HEAD
 +	return &qp->ibqp;
 +err_free:
 +	kfree(qp);
 +	return ERR_PTR(err);
++=======
+ 	return 0;
++>>>>>>> 47c806121a51 (RDMA/mlx5: Separate create QP flows to be based on type)
  }
  
  static int set_mlx_qp_type(struct mlx5_ib_dev *dev,
@@@ -2693,35 -2748,29 +2732,33 @@@ struct ib_qp *mlx5_ib_create_qp(struct 
  	int err;
  	struct ib_qp_init_attr mlx_init_attr;
  	struct ib_qp_init_attr *init_attr = verbs_init_attr;
 +	struct mlx5_ib_ucontext *ucontext = rdma_udata_to_drv_context(
 +		udata, struct mlx5_ib_ucontext, ibucontext);
  
 -	dev = pd ? to_mdev(pd->device) :
 -		   to_mdev(to_mxrcd(init_attr->xrcd)->ibxrcd.device);
 -
 -	err = check_qp_type(dev, init_attr);
 -	if (err) {
 -		mlx5_ib_dbg(dev, "Unsupported QP type %d\n",
 -			    init_attr->qp_type);
 -		return ERR_PTR(err);
 +	if (pd) {
 +		dev = to_mdev(pd->device);
 +
 +		if (init_attr->qp_type == IB_QPT_RAW_PACKET) {
 +			if (!ucontext) {
 +				mlx5_ib_dbg(dev, "Raw Packet QP is not supported for kernel consumers\n");
 +				return ERR_PTR(-EINVAL);
 +			} else if (!ucontext->cqe_version) {
 +				mlx5_ib_dbg(dev, "Raw Packet QP is only supported for CQE version > 0\n");
 +				return ERR_PTR(-EINVAL);
 +			}
 +		}
 +	} else {
 +		/* being cautious here */
 +		if (init_attr->qp_type != IB_QPT_XRC_TGT &&
 +		    init_attr->qp_type != MLX5_IB_QPT_REG_UMR) {
 +			pr_warn("%s: no PD for transport %s\n", __func__,
 +				ib_qp_type_str(init_attr->qp_type));
 +			return ERR_PTR(-EINVAL);
 +		}
 +		dev = to_mdev(to_mxrcd(init_attr->xrcd)->ibxrcd.device);
  	}
  
 -	err = check_valid_flow(dev, pd, init_attr, udata);
 -	if (err)
 -		return ERR_PTR(err);
 -
 -	if (init_attr->qp_type == IB_QPT_GSI)
 -		return mlx5_ib_gsi_create_qp(pd, init_attr);
 -
 -	qp = kzalloc(sizeof(*qp), GFP_KERNEL);
 -	if (!qp)
 -		return ERR_PTR(-ENOMEM);
 -
  	if (init_attr->qp_type == IB_QPT_DRIVER) {
- 		struct mlx5_ib_create_qp ucmd;
- 
  		init_attr = &mlx_init_attr;
  		memcpy(init_attr, verbs_init_attr, sizeof(*verbs_init_attr));
  		err = set_mlx_qp_type(dev, init_attr, &ucmd, udata);
@@@ -2732,79 -2781,44 +2769,96 @@@
  			if (init_attr->cap.max_recv_wr ||
  			    init_attr->cap.max_recv_sge) {
  				mlx5_ib_dbg(dev, "DCI QP requires zero size receive queue\n");
 -				err = -EINVAL;
 -				goto free_qp;
 +				return ERR_PTR(-EINVAL);
  			}
 -			qp->qp_sub_type = MLX5_IB_QPT_DCI;
  		} else {
++<<<<<<< HEAD
 +			return mlx5_ib_create_dct(pd, init_attr, &ucmd, udata);
++=======
+ 			qp->qp_sub_type = MLX5_IB_QPT_DCT;
++>>>>>>> 47c806121a51 (RDMA/mlx5: Separate create QP flows to be based on type)
  		}
  	}
  
 -	if (init_attr->qp_type == IB_QPT_XRC_TGT)
 -		xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
 +	switch (init_attr->qp_type) {
 +	case IB_QPT_XRC_TGT:
 +	case IB_QPT_XRC_INI:
 +		if (!MLX5_CAP_GEN(dev->mdev, xrc)) {
 +			mlx5_ib_dbg(dev, "XRC not supported\n");
 +			return ERR_PTR(-ENOSYS);
 +		}
 +		init_attr->recv_cq = NULL;
 +		if (init_attr->qp_type == IB_QPT_XRC_TGT) {
 +			xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
 +			init_attr->send_cq = NULL;
 +		}
 +
++<<<<<<< HEAD
 +		/* fall through */
 +	case IB_QPT_RAW_PACKET:
 +	case IB_QPT_RC:
 +	case IB_QPT_UC:
 +	case IB_QPT_UD:
 +	case IB_QPT_SMI:
 +	case MLX5_IB_QPT_HW_GSI:
 +	case MLX5_IB_QPT_REG_UMR:
 +	case MLX5_IB_QPT_DCI:
 +		qp = kzalloc(sizeof(*qp), GFP_KERNEL);
 +		if (!qp)
 +			return ERR_PTR(-ENOMEM);
 +
 +		err = create_qp_common(dev, pd, init_attr, udata, qp);
 +		if (err) {
 +			mlx5_ib_dbg(dev, "create_qp_common failed\n");
 +			kfree(qp);
 +			return ERR_PTR(err);
 +		}
 +
 +		if (is_qp0(init_attr->qp_type))
 +			qp->ibqp.qp_num = 0;
 +		else if (is_qp1(init_attr->qp_type))
 +			qp->ibqp.qp_num = 1;
 +		else
 +			qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
 +
 +		mlx5_ib_dbg(dev, "ib qpnum 0x%x, mlx qpn 0x%x, rcqn 0x%x, scqn 0x%x\n",
 +			    qp->ibqp.qp_num, qp->trans_qp.base.mqp.qpn,
 +			    init_attr->recv_cq ? to_mcq(init_attr->recv_cq)->mcq.cqn : -1,
 +			    init_attr->send_cq ? to_mcq(init_attr->send_cq)->mcq.cqn : -1);
 +
 +		qp->trans_qp.xrcdn = xrcdn;
 +
 +		break;
  
 +	case IB_QPT_GSI:
 +		return mlx5_ib_gsi_create_qp(pd, init_attr);
 +
 +	case IB_QPT_RAW_IPV6:
 +	case IB_QPT_RAW_ETHERTYPE:
 +	case IB_QPT_MAX:
 +	default:
 +		mlx5_ib_dbg(dev, "unsupported qp type %d\n",
 +			    init_attr->qp_type);
 +		/* Don't support raw QPs */
 +		return ERR_PTR(-EINVAL);
++=======
+ 	switch (init_attr->qp_type) {
+ 	case IB_QPT_DRIVER:
+ 		err = create_driver_qp(pd, qp, init_attr, &ucmd, udata);
+ 		break;
+ 	default:
+ 		err = create_qp_common(dev, pd, init_attr, udata, qp);
+ 	}
+ 	if (err) {
+ 		mlx5_ib_dbg(dev, "create_qp_common failed\n");
+ 		goto free_qp;
++>>>>>>> 47c806121a51 (RDMA/mlx5: Separate create QP flows to be based on type)
  	}
  
 -	if (is_qp0(init_attr->qp_type))
 -		qp->ibqp.qp_num = 0;
 -	else if (is_qp1(init_attr->qp_type))
 -		qp->ibqp.qp_num = 1;
 -	else
 -		qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
 -
 -	qp->trans_qp.xrcdn = xrcdn;
 +	if (verbs_init_attr->qp_type == IB_QPT_DRIVER)
 +		qp->qp_sub_type = init_attr->qp_type;
  
  	return &qp->ibqp;
 -
 -free_qp:
 -	kfree(qp);
 -	return ERR_PTR(err);
  }
  
  static int mlx5_ib_destroy_dct(struct mlx5_ib_qp *mqp)
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
