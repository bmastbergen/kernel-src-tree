NFSD: Add tracepoints to the NFSD state management code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit dd5e3fbc1f472951afd7e7643ace5d1672b31358
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/dd5e3fbc.failed

Capture obvious events and replace dprintk() call sites. Introduce
infrastructure so that adding more tracepoints in this code later
is simplified.

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit dd5e3fbc1f472951afd7e7643ace5d1672b31358)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/nfs4state.c
#	fs/nfsd/state.h
#	fs/nfsd/trace.h
diff --cc fs/nfsd/nfs4state.c
index bc0ac32b143c,04d80f9e2f91..000000000000
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@@ -50,6 -50,8 +50,11 @@@
  
  #include "netns.h"
  #include "pnfs.h"
++<<<<<<< HEAD
++=======
+ #include "filecache.h"
+ #include "trace.h"
++>>>>>>> dd5e3fbc1f47 (NFSD: Add tracepoints to the NFSD state management code)
  
  #define NFSDDBG_FACILITY                NFSDDBG_PROC
  
@@@ -5185,9 -5183,8 +5180,14 @@@ nfsd4_renew(struct svc_rqst *rqstp, str
  	__be32 status;
  	struct nfsd_net *nn = net_generic(SVC_NET(rqstp), nfsd_net_id);
  
++<<<<<<< HEAD
 +	dprintk("process_renew(%08x/%08x): starting\n", 
 +			clid->cl_boot, clid->cl_id);
 +	status = lookup_clientid(clid, cstate, nn);
++=======
+ 	trace_nfsd_clid_renew(clid);
+ 	status = lookup_clientid(clid, cstate, nn, false);
++>>>>>>> dd5e3fbc1f47 (NFSD: Add tracepoints to the NFSD state management code)
  	if (status)
  		goto out;
  	clp = cstate->clp;
@@@ -5268,16 -5266,26 +5269,13 @@@ nfs4_laundromat(struct nfsd_net *nn
  	struct list_head *pos, *next, reaplist;
  	time64_t cutoff = ktime_get_boottime_seconds() - nn->nfsd4_lease;
  	time64_t t, new_timeo = nn->nfsd4_lease;
 -	struct nfs4_cpntf_state *cps;
 -	copy_stateid_t *cps_t;
 -	int i;
  
- 	dprintk("NFSD: laundromat service - starting\n");
- 
  	if (clients_still_reclaiming(nn)) {
  		new_timeo = 0;
  		goto out;
  	}
- 	dprintk("NFSD: end of grace period\n");
  	nfsd4_end_grace(nn);
  	INIT_LIST_HEAD(&reaplist);
 -
 -	spin_lock(&nn->s2s_cp_lock);
 -	idr_for_each_entry(&nn->s2s_cp_stateids, cps_t, i) {
 -		cps = container_of(cps_t, struct nfs4_cpntf_state, cp_stateid);
 -		if (cps->cp_stateid.sc_type == NFS4_COPYNOTIFY_STID &&
 -				cps->cpntf_time > cutoff)
 -			_free_cpntf_state_locked(nn, cps);
 -	}
 -	spin_unlock(&nn->s2s_cp_lock);
 -
  	spin_lock(&nn->client_lock);
  	list_for_each_safe(pos, next, &nn->client_lru) {
  		clp = list_entry(pos, struct nfs4_client, cl_lru);
diff --cc fs/nfsd/state.h
index e5511ebc8b5c,3b408532a5dc..000000000000
--- a/fs/nfsd/state.h
+++ b/fs/nfsd/state.h
@@@ -56,12 -56,13 +56,22 @@@ typedef struct 
  	stateid_opaque_t        si_opaque;
  } stateid_t;
  
++<<<<<<< HEAD
 +#define STATEID_FMT	"(%08x/%08x/%08x/%08x)"
 +#define STATEID_VAL(s) \
 +	(s)->si_opaque.so_clid.cl_boot, \
 +	(s)->si_opaque.so_clid.cl_id, \
 +	(s)->si_opaque.so_id, \
 +	(s)->si_generation
++=======
+ typedef struct {
+ 	stateid_t		stid;
+ #define NFS4_COPY_STID 1
+ #define NFS4_COPYNOTIFY_STID 2
+ 	unsigned char		sc_type;
+ 	refcount_t		sc_count;
+ } copy_stateid_t;
++>>>>>>> dd5e3fbc1f47 (NFSD: Add tracepoints to the NFSD state management code)
  
  struct nfsd4_callback {
  	struct nfs4_client *cb_clp;
diff --cc fs/nfsd/trace.h
index 33a4a6d6f79e,7237fe2f3de9..000000000000
--- a/fs/nfsd/trace.h
+++ b/fs/nfsd/trace.h
@@@ -286,6 -289,341 +287,344 @@@ DEFINE_STATEID_EVENT(layout_recall_done
  DEFINE_STATEID_EVENT(layout_recall_fail);
  DEFINE_STATEID_EVENT(layout_recall_release);
  
++<<<<<<< HEAD
++=======
+ DEFINE_STATEID_EVENT(deleg_open);
+ DEFINE_STATEID_EVENT(deleg_none);
+ DEFINE_STATEID_EVENT(deleg_break);
+ DEFINE_STATEID_EVENT(deleg_recall);
+ 
+ DECLARE_EVENT_CLASS(nfsd_stateseqid_class,
+ 	TP_PROTO(u32 seqid, const stateid_t *stp),
+ 	TP_ARGS(seqid, stp),
+ 	TP_STRUCT__entry(
+ 		__field(u32, seqid)
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__field(u32, si_id)
+ 		__field(u32, si_generation)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->seqid = seqid;
+ 		__entry->cl_boot = stp->si_opaque.so_clid.cl_boot;
+ 		__entry->cl_id = stp->si_opaque.so_clid.cl_id;
+ 		__entry->si_id = stp->si_opaque.so_id;
+ 		__entry->si_generation = stp->si_generation;
+ 	),
+ 	TP_printk("seqid=%u client %08x:%08x stateid %08x:%08x",
+ 		__entry->seqid, __entry->cl_boot, __entry->cl_id,
+ 		__entry->si_id, __entry->si_generation)
+ )
+ 
+ #define DEFINE_STATESEQID_EVENT(name) \
+ DEFINE_EVENT(nfsd_stateseqid_class, nfsd_##name, \
+ 	TP_PROTO(u32 seqid, const stateid_t *stp), \
+ 	TP_ARGS(seqid, stp))
+ 
+ DEFINE_STATESEQID_EVENT(preprocess);
+ DEFINE_STATESEQID_EVENT(open_confirm);
+ 
+ DECLARE_EVENT_CLASS(nfsd_clientid_class,
+ 	TP_PROTO(const clientid_t *clid),
+ 	TP_ARGS(clid),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clid->cl_boot;
+ 		__entry->cl_id = clid->cl_id;
+ 	),
+ 	TP_printk("client %08x:%08x", __entry->cl_boot, __entry->cl_id)
+ )
+ 
+ #define DEFINE_CLIENTID_EVENT(name) \
+ DEFINE_EVENT(nfsd_clientid_class, nfsd_clid_##name, \
+ 	TP_PROTO(const clientid_t *clid), \
+ 	TP_ARGS(clid))
+ 
+ DEFINE_CLIENTID_EVENT(expired);
+ DEFINE_CLIENTID_EVENT(purged);
+ DEFINE_CLIENTID_EVENT(renew);
+ DEFINE_CLIENTID_EVENT(stale);
+ 
+ DECLARE_EVENT_CLASS(nfsd_net_class,
+ 	TP_PROTO(const struct nfsd_net *nn),
+ 	TP_ARGS(nn),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 	),
+ 	TP_printk("boot_time=%16llx", __entry->boot_time)
+ )
+ 
+ #define DEFINE_NET_EVENT(name) \
+ DEFINE_EVENT(nfsd_net_class, nfsd_##name, \
+ 	TP_PROTO(const struct nfsd_net *nn), \
+ 	TP_ARGS(nn))
+ 
+ DEFINE_NET_EVENT(grace_start);
+ DEFINE_NET_EVENT(grace_complete);
+ 
+ DECLARE_EVENT_CLASS(nfsd_clid_class,
+ 	TP_PROTO(const struct nfsd_net *nn,
+ 		 unsigned int namelen,
+ 		 const unsigned char *namedata),
+ 	TP_ARGS(nn, namelen, namedata),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(unsigned int, namelen)
+ 		__dynamic_array(unsigned char,  name, namelen)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->namelen = namelen;
+ 		memcpy(__get_dynamic_array(name), namedata, namelen);
+ 	),
+ 	TP_printk("boot_time=%16llx nfs4_clientid=%.*s",
+ 		__entry->boot_time, __entry->namelen, __get_str(name))
+ )
+ 
+ #define DEFINE_CLID_EVENT(name) \
+ DEFINE_EVENT(nfsd_clid_class, nfsd_clid_##name, \
+ 	TP_PROTO(const struct nfsd_net *nn, \
+ 		 unsigned int namelen, \
+ 		 const unsigned char *namedata), \
+ 	TP_ARGS(nn, namelen, namedata))
+ 
+ DEFINE_CLID_EVENT(find);
+ DEFINE_CLID_EVENT(reclaim);
+ 
+ TRACE_EVENT(nfsd_clid_inuse_err,
+ 	TP_PROTO(const struct nfs4_client *clp),
+ 	TP_ARGS(clp),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__array(unsigned char, addr, sizeof(struct sockaddr_in6))
+ 		__field(unsigned int, namelen)
+ 		__dynamic_array(unsigned char, name, clp->cl_name.len)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 		memcpy(__entry->addr, &clp->cl_addr,
+ 			sizeof(struct sockaddr_in6));
+ 		__entry->namelen = clp->cl_name.len;
+ 		memcpy(__get_dynamic_array(name), clp->cl_name.data,
+ 			clp->cl_name.len);
+ 	),
+ 	TP_printk("nfs4_clientid %.*s already in use by %pISpc, client %08x:%08x",
+ 		__entry->namelen, __get_str(name), __entry->addr,
+ 		__entry->cl_boot, __entry->cl_id)
+ )
+ 
+ TRACE_DEFINE_ENUM(NFSD_FILE_HASHED);
+ TRACE_DEFINE_ENUM(NFSD_FILE_PENDING);
+ TRACE_DEFINE_ENUM(NFSD_FILE_BREAK_READ);
+ TRACE_DEFINE_ENUM(NFSD_FILE_BREAK_WRITE);
+ TRACE_DEFINE_ENUM(NFSD_FILE_REFERENCED);
+ 
+ #define show_nf_flags(val)						\
+ 	__print_flags(val, "|",						\
+ 		{ 1 << NFSD_FILE_HASHED,	"HASHED" },		\
+ 		{ 1 << NFSD_FILE_PENDING,	"PENDING" },		\
+ 		{ 1 << NFSD_FILE_BREAK_READ,	"BREAK_READ" },		\
+ 		{ 1 << NFSD_FILE_BREAK_WRITE,	"BREAK_WRITE" },	\
+ 		{ 1 << NFSD_FILE_REFERENCED,	"REFERENCED"})
+ 
+ /* FIXME: This should probably be fleshed out in the future. */
+ #define show_nf_may(val)						\
+ 	__print_flags(val, "|",						\
+ 		{ NFSD_MAY_READ,		"READ" },		\
+ 		{ NFSD_MAY_WRITE,		"WRITE" },		\
+ 		{ NFSD_MAY_NOT_BREAK_LEASE,	"NOT_BREAK_LEASE" })
+ 
+ DECLARE_EVENT_CLASS(nfsd_file_class,
+ 	TP_PROTO(struct nfsd_file *nf),
+ 	TP_ARGS(nf),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned int, nf_hashval)
+ 		__field(void *, nf_inode)
+ 		__field(int, nf_ref)
+ 		__field(unsigned long, nf_flags)
+ 		__field(unsigned char, nf_may)
+ 		__field(struct file *, nf_file)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->nf_hashval = nf->nf_hashval;
+ 		__entry->nf_inode = nf->nf_inode;
+ 		__entry->nf_ref = refcount_read(&nf->nf_ref);
+ 		__entry->nf_flags = nf->nf_flags;
+ 		__entry->nf_may = nf->nf_may;
+ 		__entry->nf_file = nf->nf_file;
+ 	),
+ 	TP_printk("hash=0x%x inode=0x%p ref=%d flags=%s may=%s file=%p",
+ 		__entry->nf_hashval,
+ 		__entry->nf_inode,
+ 		__entry->nf_ref,
+ 		show_nf_flags(__entry->nf_flags),
+ 		show_nf_may(__entry->nf_may),
+ 		__entry->nf_file)
+ )
+ 
+ #define DEFINE_NFSD_FILE_EVENT(name) \
+ DEFINE_EVENT(nfsd_file_class, name, \
+ 	TP_PROTO(struct nfsd_file *nf), \
+ 	TP_ARGS(nf))
+ 
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_alloc);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_put_final);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_unhash);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_put);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_unhash_and_release_locked);
+ 
+ TRACE_EVENT(nfsd_file_acquire,
+ 	TP_PROTO(struct svc_rqst *rqstp, unsigned int hash,
+ 		 struct inode *inode, unsigned int may_flags,
+ 		 struct nfsd_file *nf, __be32 status),
+ 
+ 	TP_ARGS(rqstp, hash, inode, may_flags, nf, status),
+ 
+ 	TP_STRUCT__entry(
+ 		__field(u32, xid)
+ 		__field(unsigned int, hash)
+ 		__field(void *, inode)
+ 		__field(unsigned int, may_flags)
+ 		__field(int, nf_ref)
+ 		__field(unsigned long, nf_flags)
+ 		__field(unsigned char, nf_may)
+ 		__field(struct file *, nf_file)
+ 		__field(u32, status)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__entry->xid = be32_to_cpu(rqstp->rq_xid);
+ 		__entry->hash = hash;
+ 		__entry->inode = inode;
+ 		__entry->may_flags = may_flags;
+ 		__entry->nf_ref = nf ? refcount_read(&nf->nf_ref) : 0;
+ 		__entry->nf_flags = nf ? nf->nf_flags : 0;
+ 		__entry->nf_may = nf ? nf->nf_may : 0;
+ 		__entry->nf_file = nf ? nf->nf_file : NULL;
+ 		__entry->status = be32_to_cpu(status);
+ 	),
+ 
+ 	TP_printk("xid=0x%x hash=0x%x inode=0x%p may_flags=%s ref=%d nf_flags=%s nf_may=%s nf_file=0x%p status=%u",
+ 			__entry->xid, __entry->hash, __entry->inode,
+ 			show_nf_may(__entry->may_flags), __entry->nf_ref,
+ 			show_nf_flags(__entry->nf_flags),
+ 			show_nf_may(__entry->nf_may), __entry->nf_file,
+ 			__entry->status)
+ );
+ 
+ DECLARE_EVENT_CLASS(nfsd_file_search_class,
+ 	TP_PROTO(struct inode *inode, unsigned int hash, int found),
+ 	TP_ARGS(inode, hash, found),
+ 	TP_STRUCT__entry(
+ 		__field(struct inode *, inode)
+ 		__field(unsigned int, hash)
+ 		__field(int, found)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->inode = inode;
+ 		__entry->hash = hash;
+ 		__entry->found = found;
+ 	),
+ 	TP_printk("hash=0x%x inode=0x%p found=%d", __entry->hash,
+ 			__entry->inode, __entry->found)
+ );
+ 
+ #define DEFINE_NFSD_FILE_SEARCH_EVENT(name)				\
+ DEFINE_EVENT(nfsd_file_search_class, name,				\
+ 	TP_PROTO(struct inode *inode, unsigned int hash, int found),	\
+ 	TP_ARGS(inode, hash, found))
+ 
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_close_inode_sync);
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_close_inode);
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_is_cached);
+ 
+ TRACE_EVENT(nfsd_file_fsnotify_handle_event,
+ 	TP_PROTO(struct inode *inode, u32 mask),
+ 	TP_ARGS(inode, mask),
+ 	TP_STRUCT__entry(
+ 		__field(struct inode *, inode)
+ 		__field(unsigned int, nlink)
+ 		__field(umode_t, mode)
+ 		__field(u32, mask)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->inode = inode;
+ 		__entry->nlink = inode->i_nlink;
+ 		__entry->mode = inode->i_mode;
+ 		__entry->mask = mask;
+ 	),
+ 	TP_printk("inode=0x%p nlink=%u mode=0%ho mask=0x%x", __entry->inode,
+ 			__entry->nlink, __entry->mode, __entry->mask)
+ );
+ 
+ #include "cache.h"
+ 
+ TRACE_DEFINE_ENUM(RC_DROPIT);
+ TRACE_DEFINE_ENUM(RC_REPLY);
+ TRACE_DEFINE_ENUM(RC_DOIT);
+ 
+ #define show_drc_retval(x)						\
+ 	__print_symbolic(x,						\
+ 		{ RC_DROPIT, "DROPIT" },				\
+ 		{ RC_REPLY, "REPLY" },					\
+ 		{ RC_DOIT, "DOIT" })
+ 
+ TRACE_EVENT(nfsd_drc_found,
+ 	TP_PROTO(
+ 		const struct nfsd_net *nn,
+ 		const struct svc_rqst *rqstp,
+ 		int result
+ 	),
+ 	TP_ARGS(nn, rqstp, result),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(unsigned long, result)
+ 		__field(u32, xid)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->result = result;
+ 		__entry->xid = be32_to_cpu(rqstp->rq_xid);
+ 	),
+ 	TP_printk("boot_time=%16llx xid=0x%08x result=%s",
+ 		__entry->boot_time, __entry->xid,
+ 		show_drc_retval(__entry->result))
+ 
+ );
+ 
+ TRACE_EVENT(nfsd_drc_mismatch,
+ 	TP_PROTO(
+ 		const struct nfsd_net *nn,
+ 		const struct svc_cacherep *key,
+ 		const struct svc_cacherep *rp
+ 	),
+ 	TP_ARGS(nn, key, rp),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(u32, xid)
+ 		__field(u32, cached)
+ 		__field(u32, ingress)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->xid = be32_to_cpu(key->c_key.k_xid);
+ 		__entry->cached = (__force u32)key->c_key.k_csum;
+ 		__entry->ingress = (__force u32)rp->c_key.k_csum;
+ 	),
+ 	TP_printk("boot_time=%16llx xid=0x%08x cached-csum=0x%08x ingress-csum=0x%08x",
+ 		__entry->boot_time, __entry->xid, __entry->cached,
+ 		__entry->ingress)
+ );
+ 
++>>>>>>> dd5e3fbc1f47 (NFSD: Add tracepoints to the NFSD state management code)
  #endif /* _NFSD_TRACE_H */
  
  #undef TRACE_INCLUDE_PATH
* Unmerged path fs/nfsd/nfs4state.c
* Unmerged path fs/nfsd/state.h
* Unmerged path fs/nfsd/trace.h
