x86/{cpufeatures,msr}: Add Intel SGX Launch Control hardware bits

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] x86/{cpufeatures, msr}: Add Intel SGX Launch Control hardware bits (Vladis Dronov) [1660337]
Rebuild_FUZZ: 99.24%
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit d205e0f1426e0f99e2b4f387c49f2d8b66e129dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d205e0f1.failed

The SGX Launch Control hardware helps restrict which enclaves the
hardware will run.  Launch control is intended to restrict what software
can run with enclave protections, which helps protect the overall system
from bad enclaves.

For the kernel's purposes, there are effectively two modes in which the
launch control hardware can operate: rigid and flexible. In its rigid
mode, an entity other than the kernel has ultimate authority over which
enclaves can be run (firmware, Intel, etc...). In its flexible mode, the
kernel has ultimate authority over which enclaves can run.

Enable X86_FEATURE_SGX_LC to enumerate when the CPU supports SGX Launch
Control in general.

Add MSR_IA32_SGXLEPUBKEYHASH{0, 1, 2, 3}, which when combined contain a
SHA256 hash of a 3072-bit RSA public key. The hardware allows SGX enclaves
signed with this public key to initialize and run [*]. Enclaves not signed
with this key can not initialize and run.

Add FEAT_CTL_SGX_LC_ENABLED, which informs whether the SGXLEPUBKEYHASH MSRs
can be written by the kernel.

If the MSRs do not exist or are read-only, the launch control hardware is
operating in rigid mode. Linux does not and will not support creating
enclaves when hardware is configured in rigid mode because it takes away
the authority for launch decisions from the kernel. Note, this does not
preclude KVM from virtualizing/exposing SGX to a KVM guest when launch
control hardware is operating in rigid mode.

[*] Intel SDM: 38.1.4 Intel SGX Launch Control Configuration

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
Co-developed-by: Jarkko Sakkinen <jarkko@kernel.org>
	Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Acked-by: Jethro Beekman <jethro@fortanix.com>
Link: https://lkml.kernel.org/r/20201112220135.165028-5-jarkko@kernel.org
(cherry picked from commit d205e0f1426e0f99e2b4f387c49f2d8b66e129dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/cpufeatures.h
#	arch/x86/include/asm/msr-index.h
diff --cc arch/x86/include/asm/cpufeatures.h
index 911415242d01,f5ef2d5b9231..000000000000
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -350,6 -356,8 +350,11 @@@
  #define X86_FEATURE_CLDEMOTE		(16*32+25) /* CLDEMOTE instruction */
  #define X86_FEATURE_MOVDIRI		(16*32+27) /* MOVDIRI instruction */
  #define X86_FEATURE_MOVDIR64B		(16*32+28) /* MOVDIR64B instruction */
++<<<<<<< HEAD
++=======
+ #define X86_FEATURE_ENQCMD		(16*32+29) /* ENQCMD and ENQCMDS instructions */
+ #define X86_FEATURE_SGX_LC		(16*32+30) /* Software Guard Extensions Launch Control */
++>>>>>>> d205e0f1426e (x86/{cpufeatures,msr}: Add Intel SGX Launch Control hardware bits)
  
  /* AMD-defined CPU features, CPUID level 0x80000007 (EBX), word 17 */
  #define X86_FEATURE_OVERFLOW_RECOV	(17*32+ 0) /* MCA overflow recovery support */
diff --cc arch/x86/include/asm/msr-index.h
index 4a4d50806008,d0c6cfff5b55..000000000000
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@@ -601,6 -609,8 +601,11 @@@
  #define FEAT_CTL_LOCKED				BIT(0)
  #define FEAT_CTL_VMX_ENABLED_INSIDE_SMX		BIT(1)
  #define FEAT_CTL_VMX_ENABLED_OUTSIDE_SMX	BIT(2)
++<<<<<<< HEAD
++=======
+ #define FEAT_CTL_SGX_LC_ENABLED			BIT(17)
+ #define FEAT_CTL_SGX_ENABLED			BIT(18)
++>>>>>>> d205e0f1426e (x86/{cpufeatures,msr}: Add Intel SGX Launch Control hardware bits)
  #define FEAT_CTL_LMCE_ENABLED			BIT(20)
  
  #define MSR_IA32_TSC_ADJUST             0x0000003b
* Unmerged path arch/x86/include/asm/cpufeatures.h
* Unmerged path arch/x86/include/asm/msr-index.h
