scsi: zfcp: use enum zfcp_erp_steps for struct zfcp_erp_action.step

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Steffen Maier <maier@linux.ibm.com>
commit 0023beece0c73bc11c1e2827c3de5bbbb66b4542
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0023beec.failed

Use the already defined enum for this purpose to get at least some build
checking (even though an enum is type equivalent to an int in C).  v2.6.27
commit 287ac01acf22 ("[SCSI] zfcp: Cleanup code in zfcp_erp.c") introduced
the enum which was cpp defines previously.

Since struct zfcp_erp_action type is embedded into other structures living
in zfcp_def.h, we have to move enum zfcp_erp_act_type from its private
definition in zfcp_erp.c to the zfcp-global zfcp_def.h

Silence some false -Wswitch compiler warning cases with individual NOP
cases. When adding more enum values and building with W=1 we would get
compiler warnings about missed new cases.

Add missing break statements in some of the above switch cases.  No
functional change, but making it future-proof.  I think all of these should
have had a break statement ever since, even if these switch cases happened
to be the last ones in the switch statement body.

"Fall through" in the context of switch case usually means not to have a
break and fall through to the subsequent switch case. However, I think this
old comment meant that here we do not have an _early return_ in the switch
case but the code path continues after the switch case body.

	Signed-off-by: Steffen Maier <maier@linux.ibm.com>
	Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 0023beece0c73bc11c1e2827c3de5bbbb66b4542)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/scsi/zfcp_def.h
#	drivers/s390/scsi/zfcp_erp.c
diff --cc drivers/s390/scsi/zfcp_def.h
index e1ef4d5682cc,87d2f47a6990..000000000000
--- a/drivers/s390/scsi/zfcp_def.h
+++ b/drivers/s390/scsi/zfcp_def.h
@@@ -98,9 -89,41 +98,44 @@@ struct zfcp_reqlist
  
  /************************* STRUCTURE DEFINITIONS *****************************/
  
++<<<<<<< HEAD
++=======
+ /**
+  * enum zfcp_erp_act_type - Type of ERP action object.
+  * @ZFCP_ERP_ACTION_REOPEN_LUN: LUN recovery.
+  * @ZFCP_ERP_ACTION_REOPEN_PORT: Port recovery.
+  * @ZFCP_ERP_ACTION_REOPEN_PORT_FORCED: Forced port recovery.
+  * @ZFCP_ERP_ACTION_REOPEN_ADAPTER: Adapter recovery.
+  *
+  * Values must fit into u8 because of code dependencies:
+  * zfcp_dbf_rec_trig(), &zfcp_dbf_rec_trigger.want, &zfcp_dbf_rec_trigger.need;
+  * zfcp_dbf_rec_run_lvl(), zfcp_dbf_rec_run(), &zfcp_dbf_rec_running.rec_action.
+  */
+ enum zfcp_erp_act_type {
+ 	ZFCP_ERP_ACTION_REOPEN_LUN	   = 1,
+ 	ZFCP_ERP_ACTION_REOPEN_PORT	   = 2,
+ 	ZFCP_ERP_ACTION_REOPEN_PORT_FORCED = 3,
+ 	ZFCP_ERP_ACTION_REOPEN_ADAPTER	   = 4,
+ };
+ 
+ /*
+  * Values must fit into u16 because of code dependencies:
+  * zfcp_dbf_rec_run_lvl(), zfcp_dbf_rec_run(), zfcp_dbf_rec_run_wka(),
+  * &zfcp_dbf_rec_running.rec_step.
+  */
+ enum zfcp_erp_steps {
+ 	ZFCP_ERP_STEP_UNINITIALIZED	= 0x0000,
+ 	ZFCP_ERP_STEP_PHYS_PORT_CLOSING	= 0x0010,
+ 	ZFCP_ERP_STEP_PORT_CLOSING	= 0x0100,
+ 	ZFCP_ERP_STEP_PORT_OPENING	= 0x0800,
+ 	ZFCP_ERP_STEP_LUN_CLOSING	= 0x1000,
+ 	ZFCP_ERP_STEP_LUN_OPENING	= 0x2000,
+ };
+ 
++>>>>>>> 0023beece0c7 (scsi: zfcp: use enum zfcp_erp_steps for struct zfcp_erp_action.step)
  struct zfcp_erp_action {
  	struct list_head list;
 -	enum zfcp_erp_act_type type;  /* requested action code */
 +	int action;	              /* requested action code */
  	struct zfcp_adapter *adapter; /* device which should be recovered */
  	struct zfcp_port *port;
  	struct scsi_device *sdev;
diff --cc drivers/s390/scsi/zfcp_erp.c
index dee8c2740a50,3da870e55ab5..000000000000
--- a/drivers/s390/scsi/zfcp_erp.c
+++ b/drivers/s390/scsi/zfcp_erp.c
@@@ -25,38 -24,18 +25,45 @@@ enum zfcp_erp_act_flags 
  	ZFCP_STATUS_ERP_NO_REF		= 0x00800000,
  };
  
++<<<<<<< HEAD
 +enum zfcp_erp_steps {
 +	ZFCP_ERP_STEP_UNINITIALIZED	= 0x0000,
 +	ZFCP_ERP_STEP_PHYS_PORT_CLOSING	= 0x0010,
 +	ZFCP_ERP_STEP_PORT_CLOSING	= 0x0100,
 +	ZFCP_ERP_STEP_PORT_OPENING	= 0x0800,
 +	ZFCP_ERP_STEP_LUN_CLOSING	= 0x1000,
 +	ZFCP_ERP_STEP_LUN_OPENING	= 0x2000,
 +};
 +
 +/**
 + * enum zfcp_erp_act_type - Type of ERP action object.
 + * @ZFCP_ERP_ACTION_REOPEN_LUN: LUN recovery.
 + * @ZFCP_ERP_ACTION_REOPEN_PORT: Port recovery.
 + * @ZFCP_ERP_ACTION_REOPEN_PORT_FORCED: Forced port recovery.
 + * @ZFCP_ERP_ACTION_REOPEN_ADAPTER: Adapter recovery.
 + * @ZFCP_ERP_ACTION_NONE: Eyecatcher pseudo flag to bitwise or-combine with
 + *			  either of the first four enum values.
 + *			  Used to indicate that an ERP action could not be
 + *			  set up despite a detected need for some recovery.
 + * @ZFCP_ERP_ACTION_FAILED: Eyecatcher pseudo flag to bitwise or-combine with
 + *			    either of the first four enum values.
 + *			    Used to indicate that ERP not needed because
 + *			    the object has ZFCP_STATUS_COMMON_ERP_FAILED.
++=======
+ /*
+  * Eyecatcher pseudo flag to bitwise or-combine with enum zfcp_erp_act_type.
+  * Used to indicate that an ERP action could not be set up despite a detected
+  * need for some recovery.
++>>>>>>> 0023beece0c7 (scsi: zfcp: use enum zfcp_erp_steps for struct zfcp_erp_action.step)
   */
 -#define ZFCP_ERP_ACTION_NONE		0xc0
 -/*
 - * Eyecatcher pseudo flag to bitwise or-combine with enum zfcp_erp_act_type.
 - * Used to indicate that ERP not needed because the object has
 - * ZFCP_STATUS_COMMON_ERP_FAILED.
 - */
 -#define ZFCP_ERP_ACTION_FAILED		0xe0
 +enum zfcp_erp_act_type {
 +	ZFCP_ERP_ACTION_REOPEN_LUN         = 1,
 +	ZFCP_ERP_ACTION_REOPEN_PORT	   = 2,
 +	ZFCP_ERP_ACTION_REOPEN_PORT_FORCED = 3,
 +	ZFCP_ERP_ACTION_REOPEN_ADAPTER     = 4,
 +	ZFCP_ERP_ACTION_NONE		   = 0xc0,
 +	ZFCP_ERP_ACTION_FAILED		   = 0xe0,
 +};
  
  enum zfcp_erp_act_result {
  	ZFCP_ERP_SUCCEEDED = 0,
* Unmerged path drivers/s390/scsi/zfcp_def.h
* Unmerged path drivers/s390/scsi/zfcp_erp.c
