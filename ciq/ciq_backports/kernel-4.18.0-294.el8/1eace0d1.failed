NFSD: Add tracepoints for monitoring NFSD callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Chuck Lever <chuck.lever@oracle.com>
commit 1eace0d1e9d0db393be87572f79f6a07405461e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1eace0d1.failed

	Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
(cherry picked from commit 1eace0d1e9d0db393be87572f79f6a07405461e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfsd/trace.h
diff --cc fs/nfsd/trace.h
index 33a4a6d6f79e,1861db1bdc67..000000000000
--- a/fs/nfsd/trace.h
+++ b/fs/nfsd/trace.h
@@@ -286,6 -289,494 +286,497 @@@ DEFINE_STATEID_EVENT(layout_recall_done
  DEFINE_STATEID_EVENT(layout_recall_fail);
  DEFINE_STATEID_EVENT(layout_recall_release);
  
++<<<<<<< HEAD
++=======
+ DEFINE_STATEID_EVENT(deleg_open);
+ DEFINE_STATEID_EVENT(deleg_none);
+ DEFINE_STATEID_EVENT(deleg_break);
+ DEFINE_STATEID_EVENT(deleg_recall);
+ 
+ DECLARE_EVENT_CLASS(nfsd_stateseqid_class,
+ 	TP_PROTO(u32 seqid, const stateid_t *stp),
+ 	TP_ARGS(seqid, stp),
+ 	TP_STRUCT__entry(
+ 		__field(u32, seqid)
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__field(u32, si_id)
+ 		__field(u32, si_generation)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->seqid = seqid;
+ 		__entry->cl_boot = stp->si_opaque.so_clid.cl_boot;
+ 		__entry->cl_id = stp->si_opaque.so_clid.cl_id;
+ 		__entry->si_id = stp->si_opaque.so_id;
+ 		__entry->si_generation = stp->si_generation;
+ 	),
+ 	TP_printk("seqid=%u client %08x:%08x stateid %08x:%08x",
+ 		__entry->seqid, __entry->cl_boot, __entry->cl_id,
+ 		__entry->si_id, __entry->si_generation)
+ )
+ 
+ #define DEFINE_STATESEQID_EVENT(name) \
+ DEFINE_EVENT(nfsd_stateseqid_class, nfsd_##name, \
+ 	TP_PROTO(u32 seqid, const stateid_t *stp), \
+ 	TP_ARGS(seqid, stp))
+ 
+ DEFINE_STATESEQID_EVENT(preprocess);
+ DEFINE_STATESEQID_EVENT(open_confirm);
+ 
+ DECLARE_EVENT_CLASS(nfsd_clientid_class,
+ 	TP_PROTO(const clientid_t *clid),
+ 	TP_ARGS(clid),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clid->cl_boot;
+ 		__entry->cl_id = clid->cl_id;
+ 	),
+ 	TP_printk("client %08x:%08x", __entry->cl_boot, __entry->cl_id)
+ )
+ 
+ #define DEFINE_CLIENTID_EVENT(name) \
+ DEFINE_EVENT(nfsd_clientid_class, nfsd_clid_##name, \
+ 	TP_PROTO(const clientid_t *clid), \
+ 	TP_ARGS(clid))
+ 
+ DEFINE_CLIENTID_EVENT(expired);
+ DEFINE_CLIENTID_EVENT(purged);
+ DEFINE_CLIENTID_EVENT(renew);
+ DEFINE_CLIENTID_EVENT(stale);
+ 
+ DECLARE_EVENT_CLASS(nfsd_net_class,
+ 	TP_PROTO(const struct nfsd_net *nn),
+ 	TP_ARGS(nn),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 	),
+ 	TP_printk("boot_time=%16llx", __entry->boot_time)
+ )
+ 
+ #define DEFINE_NET_EVENT(name) \
+ DEFINE_EVENT(nfsd_net_class, nfsd_##name, \
+ 	TP_PROTO(const struct nfsd_net *nn), \
+ 	TP_ARGS(nn))
+ 
+ DEFINE_NET_EVENT(grace_start);
+ DEFINE_NET_EVENT(grace_complete);
+ 
+ DECLARE_EVENT_CLASS(nfsd_clid_class,
+ 	TP_PROTO(const struct nfsd_net *nn,
+ 		 unsigned int namelen,
+ 		 const unsigned char *namedata),
+ 	TP_ARGS(nn, namelen, namedata),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(unsigned int, namelen)
+ 		__dynamic_array(unsigned char,  name, namelen)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->namelen = namelen;
+ 		memcpy(__get_dynamic_array(name), namedata, namelen);
+ 	),
+ 	TP_printk("boot_time=%16llx nfs4_clientid=%.*s",
+ 		__entry->boot_time, __entry->namelen, __get_str(name))
+ )
+ 
+ #define DEFINE_CLID_EVENT(name) \
+ DEFINE_EVENT(nfsd_clid_class, nfsd_clid_##name, \
+ 	TP_PROTO(const struct nfsd_net *nn, \
+ 		 unsigned int namelen, \
+ 		 const unsigned char *namedata), \
+ 	TP_ARGS(nn, namelen, namedata))
+ 
+ DEFINE_CLID_EVENT(find);
+ DEFINE_CLID_EVENT(reclaim);
+ 
+ TRACE_EVENT(nfsd_clid_inuse_err,
+ 	TP_PROTO(const struct nfs4_client *clp),
+ 	TP_ARGS(clp),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__array(unsigned char, addr, sizeof(struct sockaddr_in6))
+ 		__field(unsigned int, namelen)
+ 		__dynamic_array(unsigned char, name, clp->cl_name.len)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 		memcpy(__entry->addr, &clp->cl_addr,
+ 			sizeof(struct sockaddr_in6));
+ 		__entry->namelen = clp->cl_name.len;
+ 		memcpy(__get_dynamic_array(name), clp->cl_name.data,
+ 			clp->cl_name.len);
+ 	),
+ 	TP_printk("nfs4_clientid %.*s already in use by %pISpc, client %08x:%08x",
+ 		__entry->namelen, __get_str(name), __entry->addr,
+ 		__entry->cl_boot, __entry->cl_id)
+ )
+ 
+ TRACE_DEFINE_ENUM(NFSD_FILE_HASHED);
+ TRACE_DEFINE_ENUM(NFSD_FILE_PENDING);
+ TRACE_DEFINE_ENUM(NFSD_FILE_BREAK_READ);
+ TRACE_DEFINE_ENUM(NFSD_FILE_BREAK_WRITE);
+ TRACE_DEFINE_ENUM(NFSD_FILE_REFERENCED);
+ 
+ #define show_nf_flags(val)						\
+ 	__print_flags(val, "|",						\
+ 		{ 1 << NFSD_FILE_HASHED,	"HASHED" },		\
+ 		{ 1 << NFSD_FILE_PENDING,	"PENDING" },		\
+ 		{ 1 << NFSD_FILE_BREAK_READ,	"BREAK_READ" },		\
+ 		{ 1 << NFSD_FILE_BREAK_WRITE,	"BREAK_WRITE" },	\
+ 		{ 1 << NFSD_FILE_REFERENCED,	"REFERENCED"})
+ 
+ /* FIXME: This should probably be fleshed out in the future. */
+ #define show_nf_may(val)						\
+ 	__print_flags(val, "|",						\
+ 		{ NFSD_MAY_READ,		"READ" },		\
+ 		{ NFSD_MAY_WRITE,		"WRITE" },		\
+ 		{ NFSD_MAY_NOT_BREAK_LEASE,	"NOT_BREAK_LEASE" })
+ 
+ DECLARE_EVENT_CLASS(nfsd_file_class,
+ 	TP_PROTO(struct nfsd_file *nf),
+ 	TP_ARGS(nf),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned int, nf_hashval)
+ 		__field(void *, nf_inode)
+ 		__field(int, nf_ref)
+ 		__field(unsigned long, nf_flags)
+ 		__field(unsigned char, nf_may)
+ 		__field(struct file *, nf_file)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->nf_hashval = nf->nf_hashval;
+ 		__entry->nf_inode = nf->nf_inode;
+ 		__entry->nf_ref = refcount_read(&nf->nf_ref);
+ 		__entry->nf_flags = nf->nf_flags;
+ 		__entry->nf_may = nf->nf_may;
+ 		__entry->nf_file = nf->nf_file;
+ 	),
+ 	TP_printk("hash=0x%x inode=0x%p ref=%d flags=%s may=%s file=%p",
+ 		__entry->nf_hashval,
+ 		__entry->nf_inode,
+ 		__entry->nf_ref,
+ 		show_nf_flags(__entry->nf_flags),
+ 		show_nf_may(__entry->nf_may),
+ 		__entry->nf_file)
+ )
+ 
+ #define DEFINE_NFSD_FILE_EVENT(name) \
+ DEFINE_EVENT(nfsd_file_class, name, \
+ 	TP_PROTO(struct nfsd_file *nf), \
+ 	TP_ARGS(nf))
+ 
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_alloc);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_put_final);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_unhash);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_put);
+ DEFINE_NFSD_FILE_EVENT(nfsd_file_unhash_and_release_locked);
+ 
+ TRACE_EVENT(nfsd_file_acquire,
+ 	TP_PROTO(struct svc_rqst *rqstp, unsigned int hash,
+ 		 struct inode *inode, unsigned int may_flags,
+ 		 struct nfsd_file *nf, __be32 status),
+ 
+ 	TP_ARGS(rqstp, hash, inode, may_flags, nf, status),
+ 
+ 	TP_STRUCT__entry(
+ 		__field(u32, xid)
+ 		__field(unsigned int, hash)
+ 		__field(void *, inode)
+ 		__field(unsigned int, may_flags)
+ 		__field(int, nf_ref)
+ 		__field(unsigned long, nf_flags)
+ 		__field(unsigned char, nf_may)
+ 		__field(struct file *, nf_file)
+ 		__field(u32, status)
+ 	),
+ 
+ 	TP_fast_assign(
+ 		__entry->xid = be32_to_cpu(rqstp->rq_xid);
+ 		__entry->hash = hash;
+ 		__entry->inode = inode;
+ 		__entry->may_flags = may_flags;
+ 		__entry->nf_ref = nf ? refcount_read(&nf->nf_ref) : 0;
+ 		__entry->nf_flags = nf ? nf->nf_flags : 0;
+ 		__entry->nf_may = nf ? nf->nf_may : 0;
+ 		__entry->nf_file = nf ? nf->nf_file : NULL;
+ 		__entry->status = be32_to_cpu(status);
+ 	),
+ 
+ 	TP_printk("xid=0x%x hash=0x%x inode=0x%p may_flags=%s ref=%d nf_flags=%s nf_may=%s nf_file=0x%p status=%u",
+ 			__entry->xid, __entry->hash, __entry->inode,
+ 			show_nf_may(__entry->may_flags), __entry->nf_ref,
+ 			show_nf_flags(__entry->nf_flags),
+ 			show_nf_may(__entry->nf_may), __entry->nf_file,
+ 			__entry->status)
+ );
+ 
+ DECLARE_EVENT_CLASS(nfsd_file_search_class,
+ 	TP_PROTO(struct inode *inode, unsigned int hash, int found),
+ 	TP_ARGS(inode, hash, found),
+ 	TP_STRUCT__entry(
+ 		__field(struct inode *, inode)
+ 		__field(unsigned int, hash)
+ 		__field(int, found)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->inode = inode;
+ 		__entry->hash = hash;
+ 		__entry->found = found;
+ 	),
+ 	TP_printk("hash=0x%x inode=0x%p found=%d", __entry->hash,
+ 			__entry->inode, __entry->found)
+ );
+ 
+ #define DEFINE_NFSD_FILE_SEARCH_EVENT(name)				\
+ DEFINE_EVENT(nfsd_file_search_class, name,				\
+ 	TP_PROTO(struct inode *inode, unsigned int hash, int found),	\
+ 	TP_ARGS(inode, hash, found))
+ 
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_close_inode_sync);
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_close_inode);
+ DEFINE_NFSD_FILE_SEARCH_EVENT(nfsd_file_is_cached);
+ 
+ TRACE_EVENT(nfsd_file_fsnotify_handle_event,
+ 	TP_PROTO(struct inode *inode, u32 mask),
+ 	TP_ARGS(inode, mask),
+ 	TP_STRUCT__entry(
+ 		__field(struct inode *, inode)
+ 		__field(unsigned int, nlink)
+ 		__field(umode_t, mode)
+ 		__field(u32, mask)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->inode = inode;
+ 		__entry->nlink = inode->i_nlink;
+ 		__entry->mode = inode->i_mode;
+ 		__entry->mask = mask;
+ 	),
+ 	TP_printk("inode=0x%p nlink=%u mode=0%ho mask=0x%x", __entry->inode,
+ 			__entry->nlink, __entry->mode, __entry->mask)
+ );
+ 
+ #include "cache.h"
+ 
+ TRACE_DEFINE_ENUM(RC_DROPIT);
+ TRACE_DEFINE_ENUM(RC_REPLY);
+ TRACE_DEFINE_ENUM(RC_DOIT);
+ 
+ #define show_drc_retval(x)						\
+ 	__print_symbolic(x,						\
+ 		{ RC_DROPIT, "DROPIT" },				\
+ 		{ RC_REPLY, "REPLY" },					\
+ 		{ RC_DOIT, "DOIT" })
+ 
+ TRACE_EVENT(nfsd_drc_found,
+ 	TP_PROTO(
+ 		const struct nfsd_net *nn,
+ 		const struct svc_rqst *rqstp,
+ 		int result
+ 	),
+ 	TP_ARGS(nn, rqstp, result),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(unsigned long, result)
+ 		__field(u32, xid)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->result = result;
+ 		__entry->xid = be32_to_cpu(rqstp->rq_xid);
+ 	),
+ 	TP_printk("boot_time=%16llx xid=0x%08x result=%s",
+ 		__entry->boot_time, __entry->xid,
+ 		show_drc_retval(__entry->result))
+ 
+ );
+ 
+ TRACE_EVENT(nfsd_drc_mismatch,
+ 	TP_PROTO(
+ 		const struct nfsd_net *nn,
+ 		const struct svc_cacherep *key,
+ 		const struct svc_cacherep *rp
+ 	),
+ 	TP_ARGS(nn, key, rp),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long long, boot_time)
+ 		__field(u32, xid)
+ 		__field(u32, cached)
+ 		__field(u32, ingress)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->boot_time = nn->boot_time;
+ 		__entry->xid = be32_to_cpu(key->c_key.k_xid);
+ 		__entry->cached = (__force u32)key->c_key.k_csum;
+ 		__entry->ingress = (__force u32)rp->c_key.k_csum;
+ 	),
+ 	TP_printk("boot_time=%16llx xid=0x%08x cached-csum=0x%08x ingress-csum=0x%08x",
+ 		__entry->boot_time, __entry->xid, __entry->cached,
+ 		__entry->ingress)
+ );
+ 
+ TRACE_EVENT(nfsd_cb_args,
+ 	TP_PROTO(
+ 		const struct nfs4_client *clp,
+ 		const struct nfs4_cb_conn *conn
+ 	),
+ 	TP_ARGS(clp, conn),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__field(u32, prog)
+ 		__field(u32, ident)
+ 		__array(unsigned char, addr, sizeof(struct sockaddr_in6))
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 		__entry->prog = conn->cb_prog;
+ 		__entry->ident = conn->cb_ident;
+ 		memcpy(__entry->addr, &conn->cb_addr,
+ 			sizeof(struct sockaddr_in6));
+ 	),
+ 	TP_printk("client %08x:%08x callback addr=%pISpc prog=%u ident=%u",
+ 		__entry->cl_boot, __entry->cl_id,
+ 		__entry->addr, __entry->prog, __entry->ident)
+ );
+ 
+ TRACE_EVENT(nfsd_cb_nodelegs,
+ 	TP_PROTO(const struct nfs4_client *clp),
+ 	TP_ARGS(clp),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 	),
+ 	TP_printk("client %08x:%08x", __entry->cl_boot, __entry->cl_id)
+ )
+ 
+ TRACE_DEFINE_ENUM(NFSD4_CB_UP);
+ TRACE_DEFINE_ENUM(NFSD4_CB_UNKNOWN);
+ TRACE_DEFINE_ENUM(NFSD4_CB_DOWN);
+ TRACE_DEFINE_ENUM(NFSD4_CB_FAULT);
+ 
+ #define show_cb_state(val)						\
+ 	__print_symbolic(val,						\
+ 		{ NFSD4_CB_UP,		"UP" },				\
+ 		{ NFSD4_CB_UNKNOWN,	"UNKNOWN" },			\
+ 		{ NFSD4_CB_DOWN,	"DOWN" },			\
+ 		{ NFSD4_CB_FAULT,	"FAULT"})
+ 
+ DECLARE_EVENT_CLASS(nfsd_cb_class,
+ 	TP_PROTO(const struct nfs4_client *clp),
+ 	TP_ARGS(clp),
+ 	TP_STRUCT__entry(
+ 		__field(unsigned long, state)
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__array(unsigned char, addr, sizeof(struct sockaddr_in6))
+ 	),
+ 	TP_fast_assign(
+ 		__entry->state = clp->cl_cb_state;
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 		memcpy(__entry->addr, &clp->cl_cb_conn.cb_addr,
+ 			sizeof(struct sockaddr_in6));
+ 	),
+ 	TP_printk("addr=%pISpc client %08x:%08x state=%s",
+ 		__entry->addr, __entry->cl_boot, __entry->cl_id,
+ 		show_cb_state(__entry->state))
+ );
+ 
+ #define DEFINE_NFSD_CB_EVENT(name)			\
+ DEFINE_EVENT(nfsd_cb_class, nfsd_cb_##name,		\
+ 	TP_PROTO(const struct nfs4_client *clp),	\
+ 	TP_ARGS(clp))
+ 
+ DEFINE_NFSD_CB_EVENT(setup);
+ DEFINE_NFSD_CB_EVENT(state);
+ DEFINE_NFSD_CB_EVENT(shutdown);
+ 
+ TRACE_EVENT(nfsd_cb_setup_err,
+ 	TP_PROTO(
+ 		const struct nfs4_client *clp,
+ 		long error
+ 	),
+ 	TP_ARGS(clp, error),
+ 	TP_STRUCT__entry(
+ 		__field(long, error)
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__array(unsigned char, addr, sizeof(struct sockaddr_in6))
+ 	),
+ 	TP_fast_assign(
+ 		__entry->error = error;
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 		memcpy(__entry->addr, &clp->cl_cb_conn.cb_addr,
+ 			sizeof(struct sockaddr_in6));
+ 	),
+ 	TP_printk("addr=%pISpc client %08x:%08x error=%ld",
+ 		__entry->addr, __entry->cl_boot, __entry->cl_id, __entry->error)
+ );
+ 
+ TRACE_EVENT(nfsd_cb_work,
+ 	TP_PROTO(
+ 		const struct nfs4_client *clp,
+ 		const char *procedure
+ 	),
+ 	TP_ARGS(clp, procedure),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__string(procedure, procedure)
+ 		__array(unsigned char, addr, sizeof(struct sockaddr_in6))
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 		__assign_str(procedure, procedure)
+ 		memcpy(__entry->addr, &clp->cl_cb_conn.cb_addr,
+ 			sizeof(struct sockaddr_in6));
+ 	),
+ 	TP_printk("addr=%pISpc client %08x:%08x procedure=%s",
+ 		__entry->addr, __entry->cl_boot, __entry->cl_id,
+ 		__get_str(procedure))
+ );
+ 
+ TRACE_EVENT(nfsd_cb_done,
+ 	TP_PROTO(
+ 		const struct nfs4_client *clp,
+ 		int status
+ 	),
+ 	TP_ARGS(clp, status),
+ 	TP_STRUCT__entry(
+ 		__field(u32, cl_boot)
+ 		__field(u32, cl_id)
+ 		__field(int, status)
+ 		__array(unsigned char, addr, sizeof(struct sockaddr_in6))
+ 	),
+ 	TP_fast_assign(
+ 		__entry->cl_boot = clp->cl_clientid.cl_boot;
+ 		__entry->cl_id = clp->cl_clientid.cl_id;
+ 		__entry->status = status;
+ 		memcpy(__entry->addr, &clp->cl_cb_conn.cb_addr,
+ 			sizeof(struct sockaddr_in6));
+ 	),
+ 	TP_printk("addr=%pISpc client %08x:%08x status=%d",
+ 		__entry->addr, __entry->cl_boot, __entry->cl_id,
+ 		__entry->status)
+ );
+ 
++>>>>>>> 1eace0d1e9d0 (NFSD: Add tracepoints for monitoring NFSD callbacks)
  #endif /* _NFSD_TRACE_H */
  
  #undef TRACE_INCLUDE_PATH
diff --git a/fs/nfsd/nfs4callback.c b/fs/nfsd/nfs4callback.c
index 5cf91322de0f..966ca75418c8 100644
--- a/fs/nfsd/nfs4callback.c
+++ b/fs/nfsd/nfs4callback.c
@@ -38,6 +38,7 @@
 #include "nfsd.h"
 #include "state.h"
 #include "netns.h"
+#include "trace.h"
 #include "xdr4cb.h"
 #include "xdr4.h"
 
@@ -904,16 +905,20 @@ static int setup_callback_client(struct nfs4_client *clp, struct nfs4_cb_conn *c
 
 	if (clp->cl_minorversion == 0) {
 		if (!clp->cl_cred.cr_principal &&
-				(clp->cl_cred.cr_flavor >= RPC_AUTH_GSS_KRB5))
+		    (clp->cl_cred.cr_flavor >= RPC_AUTH_GSS_KRB5)) {
+			trace_nfsd_cb_setup_err(clp, -EINVAL);
 			return -EINVAL;
+		}
 		args.client_name = clp->cl_cred.cr_principal;
 		args.prognumber	= conn->cb_prog;
 		args.protocol = XPRT_TRANSPORT_TCP;
 		args.authflavor = clp->cl_cred.cr_flavor;
 		clp->cl_cb_ident = conn->cb_ident;
 	} else {
-		if (!conn->cb_xprt)
+		if (!conn->cb_xprt) {
+			trace_nfsd_cb_setup_err(clp, -EINVAL);
 			return -EINVAL;
+		}
 		clp->cl_cb_conn.cb_xprt = conn->cb_xprt;
 		clp->cl_cb_session = ses;
 		args.bc_xprt = conn->cb_xprt;
@@ -925,32 +930,27 @@ static int setup_callback_client(struct nfs4_client *clp, struct nfs4_cb_conn *c
 	/* Create RPC client */
 	client = rpc_create(&args);
 	if (IS_ERR(client)) {
-		dprintk("NFSD: couldn't create callback client: %ld\n",
-			PTR_ERR(client));
+		trace_nfsd_cb_setup_err(clp, PTR_ERR(client));
 		return PTR_ERR(client);
 	}
 	cred = get_backchannel_cred(clp, client, ses);
 	if (!cred) {
+		trace_nfsd_cb_setup_err(clp, -ENOMEM);
 		rpc_shutdown_client(client);
 		return -ENOMEM;
 	}
 	clp->cl_cb_client = client;
 	clp->cl_cb_cred = cred;
+	trace_nfsd_cb_setup(clp);
 	return 0;
 }
 
-static void warn_no_callback_path(struct nfs4_client *clp, int reason)
-{
-	dprintk("NFSD: warning: no callback path to client %.*s: error %d\n",
-		(int)clp->cl_name.len, clp->cl_name.data, reason);
-}
-
 static void nfsd4_mark_cb_down(struct nfs4_client *clp, int reason)
 {
 	if (test_bit(NFSD4_CLIENT_CB_UPDATE, &clp->cl_flags))
 		return;
 	clp->cl_cb_state = NFSD4_CB_DOWN;
-	warn_no_callback_path(clp, reason);
+	trace_nfsd_cb_state(clp);
 }
 
 static void nfsd4_mark_cb_fault(struct nfs4_client *clp, int reason)
@@ -958,17 +958,20 @@ static void nfsd4_mark_cb_fault(struct nfs4_client *clp, int reason)
 	if (test_bit(NFSD4_CLIENT_CB_UPDATE, &clp->cl_flags))
 		return;
 	clp->cl_cb_state = NFSD4_CB_FAULT;
-	warn_no_callback_path(clp, reason);
+	trace_nfsd_cb_state(clp);
 }
 
 static void nfsd4_cb_probe_done(struct rpc_task *task, void *calldata)
 {
 	struct nfs4_client *clp = container_of(calldata, struct nfs4_client, cl_cb_null);
 
+	trace_nfsd_cb_done(clp, task->tk_status);
 	if (task->tk_status)
 		nfsd4_mark_cb_down(clp, task->tk_status);
-	else
+	else {
 		clp->cl_cb_state = NFSD4_CB_UP;
+		trace_nfsd_cb_state(clp);
+	}
 }
 
 static void nfsd4_cb_probe_release(void *calldata)
@@ -993,6 +996,7 @@ static const struct rpc_call_ops nfsd4_cb_probe_ops = {
 void nfsd4_probe_callback(struct nfs4_client *clp)
 {
 	clp->cl_cb_state = NFSD4_CB_UNKNOWN;
+	trace_nfsd_cb_state(clp);
 	set_bit(NFSD4_CLIENT_CB_UPDATE, &clp->cl_flags);
 	nfsd4_run_cb(&clp->cl_cb_null);
 }
@@ -1009,6 +1013,7 @@ void nfsd4_change_callback(struct nfs4_client *clp, struct nfs4_cb_conn *conn)
 	spin_lock(&clp->cl_lock);
 	memcpy(&clp->cl_cb_conn, conn, sizeof(struct nfs4_cb_conn));
 	spin_unlock(&clp->cl_lock);
+	trace_nfsd_cb_state(clp);
 }
 
 /*
@@ -1165,8 +1170,7 @@ static void nfsd4_cb_done(struct rpc_task *task, void *calldata)
 	struct nfsd4_callback *cb = calldata;
 	struct nfs4_client *clp = cb->cb_clp;
 
-	dprintk("%s: minorversion=%d\n", __func__,
-		clp->cl_minorversion);
+	trace_nfsd_cb_done(clp, task->tk_status);
 
 	if (!nfsd4_cb_sequence_done(task, cb))
 		return;
@@ -1271,6 +1275,7 @@ static void nfsd4_process_cb_update(struct nfsd4_callback *cb)
 	 * kill the old client:
 	 */
 	if (clp->cl_cb_client) {
+		trace_nfsd_cb_shutdown(clp);
 		rpc_shutdown_client(clp->cl_cb_client);
 		clp->cl_cb_client = NULL;
 		put_cred(clp->cl_cb_cred);
@@ -1314,6 +1319,8 @@ nfsd4_run_cb_work(struct work_struct *work)
 	struct rpc_clnt *clnt;
 	int flags;
 
+	trace_nfsd_cb_work(clp, cb->cb_msg.rpc_proc->p_name);
+
 	if (cb->cb_need_restart) {
 		cb->cb_need_restart = false;
 	} else {
diff --git a/fs/nfsd/nfs4state.c b/fs/nfsd/nfs4state.c
index bc0ac32b143c..35f54c70c859 100644
--- a/fs/nfsd/nfs4state.c
+++ b/fs/nfsd/nfs4state.c
@@ -2809,14 +2809,12 @@ gen_callback(struct nfs4_client *clp, struct nfsd4_setclientid *se, struct svc_r
 	conn->cb_prog = se->se_callback_prog;
 	conn->cb_ident = se->se_callback_ident;
 	memcpy(&conn->cb_saddr, &rqstp->rq_daddr, rqstp->rq_daddrlen);
+	trace_nfsd_cb_args(clp, conn);
 	return;
 out_err:
 	conn->cb_addr.ss_family = AF_UNSPEC;
 	conn->cb_addrlen = 0;
-	dprintk("NFSD: this client (clientid %08x/%08x) "
-		"will not receive delegations\n",
-		clp->cl_clientid.cl_boot, clp->cl_clientid.cl_id);
-
+	trace_nfsd_cb_nodelegs(clp);
 	return;
 }
 
* Unmerged path fs/nfsd/trace.h
