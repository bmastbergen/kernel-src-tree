net: atlantic: update firmware interface

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Nikita Danilov <ndanilov@marvell.com>
commit d993e14bd872e1e30e2028cbaa0302acf2661579
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d993e14b.failed

Here we improve FW interface structures layout
and prepare these for the wake phy feature implementation.

	Signed-off-by: Nikita Danilov <ndanilov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d993e14bd872e1e30e2028cbaa0302acf2661579)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
index 48278e333462,c6708f0d5d3e..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
@@@ -171,16 -113,65 +108,60 @@@ struct __packed hw_atl_utils_mbox_heade
  	u32 error;
  };
  
++<<<<<<< HEAD
++=======
+ struct __packed hw_aq_ptp_offset {
+ 	u16 ingress_100;
+ 	u16 egress_100;
+ 	u16 ingress_1000;
+ 	u16 egress_1000;
+ 	u16 ingress_2500;
+ 	u16 egress_2500;
+ 	u16 ingress_5000;
+ 	u16 egress_5000;
+ 	u16 ingress_10000;
+ 	u16 egress_10000;
+ };
+ 
+ struct __packed hw_atl_cable_diag {
+ 	u8 fault;
+ 	u8 distance;
+ 	u8 far_distance;
+ 	u8 reserved;
+ };
+ 
+ enum gpio_pin_function {
+ 	GPIO_PIN_FUNCTION_NC,
+ 	GPIO_PIN_FUNCTION_VAUX_ENABLE,
+ 	GPIO_PIN_FUNCTION_EFUSE_BURN_ENABLE,
+ 	GPIO_PIN_FUNCTION_SFP_PLUS_DETECT,
+ 	GPIO_PIN_FUNCTION_TX_DISABLE,
+ 	GPIO_PIN_FUNCTION_RATE_SEL_0,
+ 	GPIO_PIN_FUNCTION_RATE_SEL_1,
+ 	GPIO_PIN_FUNCTION_TX_FAULT,
+ 	GPIO_PIN_FUNCTION_PTP0,
+ 	GPIO_PIN_FUNCTION_PTP1,
+ 	GPIO_PIN_FUNCTION_PTP2,
+ 	GPIO_PIN_FUNCTION_SIZE
+ };
+ 
++>>>>>>> d993e14bd872 (net: atlantic: update firmware interface)
  struct __packed hw_aq_info {
  	u8 reserved[6];
  	u16 phy_fault_code;
  	u16 phy_temperature;
  	u8 cable_len;
  	u8 reserved1;
++<<<<<<< HEAD
 +	u32 cable_diag_data[4];
 +	u8 reserved2[32];
++=======
+ 	struct hw_atl_cable_diag cable_diag_data[4];
+ 	struct hw_aq_ptp_offset ptp_offset;
+ 	u8 reserved2[12];
++>>>>>>> d993e14bd872 (net: atlantic: update firmware interface)
  	u32 caps_lo;
  	u32 caps_hi;
 -	u32 reserved_datapath;
 -	u32 reserved3[7];
 -	u32 reserved_simpleresp[3];
 -	u32 reserved_linkstat[7];
 -	u32 reserved_wakes_count;
 -	u32 reserved_eee_stat[12];
 -	u32 tx_stuck_cnt;
 -	u32 setting_address;
 -	u32 setting_length;
 -	u32 caps_ex;
 -	enum gpio_pin_function gpio_pin[3];
 -	u32 pcie_aer_dump[18];
 -	u16 snr_margin[4];
  };
  
  struct __packed hw_atl_utils_mbox {
@@@ -240,6 -228,55 +218,58 @@@ struct __packed offload_info 
  	u8 buf[0];
  };
  
++<<<<<<< HEAD
++=======
+ struct __packed hw_atl_utils_fw_rpc {
+ 	u32 msg_id;
+ 
+ 	union {
+ 		/* fw1x structures */
+ 		struct drv_msg_wol_add msg_wol_add;
+ 		struct drv_msg_wol_remove msg_wol_remove;
+ 		struct drv_msg_enable_wakeup msg_enable_wakeup;
+ 		/* fw2x structures */
+ 		struct offload_info fw2x_offloads;
+ 	};
+ };
+ 
+ /* Mailbox FW Request interface */
+ struct __packed hw_fw_request_ptp_gpio_ctrl {
+ 	u32 index;
+ 	u32 period;
+ 	u64 start;
+ };
+ 
+ struct __packed hw_fw_request_ptp_adj_freq {
+ 	u32 ns_mac;
+ 	u32 fns_mac;
+ 	u32 ns_phy;
+ 	u32 fns_phy;
+ 	u32 mac_ns_adj;
+ 	u32 mac_fns_adj;
+ };
+ 
+ struct __packed hw_fw_request_ptp_adj_clock {
+ 	u32 ns;
+ 	u32 sec;
+ 	int sign;
+ };
+ 
+ #define HW_AQ_FW_REQUEST_PTP_GPIO_CTRL	         0x11
+ #define HW_AQ_FW_REQUEST_PTP_ADJ_FREQ	         0x12
+ #define HW_AQ_FW_REQUEST_PTP_ADJ_CLOCK	         0x13
+ 
+ struct __packed hw_fw_request_iface {
+ 	u32 msg_id;
+ 	union {
+ 		/* PTP FW Request */
+ 		struct hw_fw_request_ptp_gpio_ctrl ptp_gpio_ctrl;
+ 		struct hw_fw_request_ptp_adj_freq ptp_adj_freq;
+ 		struct hw_fw_request_ptp_adj_clock ptp_adj_clock;
+ 	};
+ };
+ 
++>>>>>>> d993e14bd872 (net: atlantic: update firmware interface)
  enum hw_atl_rx_action_with_traffic {
  	HW_ATL_RX_DISCARD,
  	HW_ATL_RX_HOST,
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
index 3fc41da39a0a..8e5dfbdf0168 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
@@ -862,22 +862,26 @@ static int aq_fw1x_set_wol(struct aq_hw_s *self, bool wol_enabled, u8 *mac)
 	memset(prpc, 0, sizeof(*prpc));
 
 	if (wol_enabled) {
-		rpc_size = sizeof(prpc->msg_id) + sizeof(prpc->msg_wol);
+		rpc_size = offsetof(struct hw_atl_utils_fw_rpc, msg_wol_add) +
+			   sizeof(prpc->msg_wol_add);
+
 
 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_WOL_ADD;
-		prpc->msg_wol.priority =
+		prpc->msg_wol_add.priority =
 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PRIOR;
-		prpc->msg_wol.pattern_id =
+		prpc->msg_wol_add.pattern_id =
 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PATTERN;
-		prpc->msg_wol.wol_packet_type =
+		prpc->msg_wol_add.packet_type =
 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_MAG_PKT;
 
-		ether_addr_copy((u8 *)&prpc->msg_wol.wol_pattern, mac);
+		ether_addr_copy((u8 *)&prpc->msg_wol_add.magic_packet_pattern,
+				mac);
 	} else {
-		rpc_size = sizeof(prpc->msg_id) + sizeof(prpc->msg_del_id);
+		rpc_size = sizeof(prpc->msg_wol_remove) +
+			   offsetof(struct hw_atl_utils_fw_rpc, msg_wol_remove);
 
 		prpc->msg_id = HAL_ATLANTIC_UTILS_FW_MSG_WOL_DEL;
-		prpc->msg_wol.pattern_id =
+		prpc->msg_wol_add.pattern_id =
 				HAL_ATLANTIC_UTILS_FW_MSG_WOL_PATTERN;
 	}
 
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
