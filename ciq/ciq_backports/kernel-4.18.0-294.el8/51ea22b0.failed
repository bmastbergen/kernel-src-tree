ethtool: provide WoL settings with WOL_GET request

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Michal Kubecek <mkubecek@suse.cz>
commit 51ea22b04ea0c210f9ce87b8a600965dbe476bc2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/51ea22b0.failed

Implement WOL_GET request to get wake-on-lan settings for a device,
traditionally available via ETHTOOL_GWOL ioctl request.

As part of the implementation, provide symbolic names for wake-on-line
modes as ETH_SS_WOL_MODES string set.

	Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
	Reviewed-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 51ea22b04ea0c210f9ce87b8a600965dbe476bc2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/networking/ethtool-netlink.rst
#	include/uapi/linux/ethtool.h
#	include/uapi/linux/ethtool_netlink.h
#	net/ethtool/Makefile
#	net/ethtool/common.c
#	net/ethtool/common.h
#	net/ethtool/netlink.c
#	net/ethtool/netlink.h
#	net/ethtool/strset.c
diff --cc include/uapi/linux/ethtool.h
index 30dc4eb925a3,4295ebfa2f91..000000000000
--- a/include/uapi/linux/ethtool.h
+++ b/include/uapi/linux/ethtool.h
@@@ -598,6 -594,8 +598,11 @@@ struct ethtool_pauseparam 
   * @ETH_SS_PHY_STATS: Statistic names, for use with %ETHTOOL_GPHYSTATS
   * @ETH_SS_PHY_TUNABLES: PHY tunable names
   * @ETH_SS_LINK_MODES: link mode names
++<<<<<<< HEAD
++=======
+  * @ETH_SS_MSG_CLASSES: debug message class names
+  * @ETH_SS_WOL_MODES: wake-on-lan modes
++>>>>>>> 51ea22b04ea0 (ethtool: provide WoL settings with WOL_GET request)
   */
  enum ethtool_stringset {
  	ETH_SS_TEST		= 0,
@@@ -610,6 -608,11 +615,14 @@@
  	ETH_SS_PHY_STATS,
  	ETH_SS_PHY_TUNABLES,
  	ETH_SS_LINK_MODES,
++<<<<<<< HEAD
++=======
+ 	ETH_SS_MSG_CLASSES,
+ 	ETH_SS_WOL_MODES,
+ 
+ 	/* add new constants above here */
+ 	ETH_SS_COUNT
++>>>>>>> 51ea22b04ea0 (ethtool: provide WoL settings with WOL_GET request)
  };
  
  /**
diff --cc net/ethtool/Makefile
index f68387618973,424545a4aaec..000000000000
--- a/net/ethtool/Makefile
+++ b/net/ethtool/Makefile
@@@ -1,3 -1,8 +1,12 @@@
  # SPDX-License-Identifier: GPL-2.0-only
  
++<<<<<<< HEAD
 +obj-y		+= ioctl.o common.o
++=======
+ obj-y				+= ioctl.o common.o
+ 
+ obj-$(CONFIG_ETHTOOL_NETLINK)	+= ethtool_nl.o
+ 
+ ethtool_nl-y	:= netlink.o bitset.o strset.o linkinfo.o linkmodes.o \
+ 		   linkstate.o debug.o wol.o
++>>>>>>> 51ea22b04ea0 (ethtool: provide WoL settings with WOL_GET request)
diff --cc net/ethtool/common.c
index 0a8728565356,636ec6d5110e..000000000000
--- a/net/ethtool/common.c
+++ b/net/ethtool/common.c
@@@ -169,3 -170,90 +169,93 @@@ const char link_mode_names[][ETH_GSTRIN
  	__DEFINE_LINK_MODE_NAME(400000, CR8, Full),
  };
  static_assert(ARRAY_SIZE(link_mode_names) == __ETHTOOL_LINK_MODE_MASK_NBITS);
++<<<<<<< HEAD
++=======
+ 
+ const char netif_msg_class_names[][ETH_GSTRING_LEN] = {
+ 	[NETIF_MSG_DRV_BIT]		= "drv",
+ 	[NETIF_MSG_PROBE_BIT]		= "probe",
+ 	[NETIF_MSG_LINK_BIT]		= "link",
+ 	[NETIF_MSG_TIMER_BIT]		= "timer",
+ 	[NETIF_MSG_IFDOWN_BIT]		= "ifdown",
+ 	[NETIF_MSG_IFUP_BIT]		= "ifup",
+ 	[NETIF_MSG_RX_ERR_BIT]		= "rx_err",
+ 	[NETIF_MSG_TX_ERR_BIT]		= "tx_err",
+ 	[NETIF_MSG_TX_QUEUED_BIT]	= "tx_queued",
+ 	[NETIF_MSG_INTR_BIT]		= "intr",
+ 	[NETIF_MSG_TX_DONE_BIT]		= "tx_done",
+ 	[NETIF_MSG_RX_STATUS_BIT]	= "rx_status",
+ 	[NETIF_MSG_PKTDATA_BIT]		= "pktdata",
+ 	[NETIF_MSG_HW_BIT]		= "hw",
+ 	[NETIF_MSG_WOL_BIT]		= "wol",
+ };
+ static_assert(ARRAY_SIZE(netif_msg_class_names) == NETIF_MSG_CLASS_COUNT);
+ 
+ const char wol_mode_names[][ETH_GSTRING_LEN] = {
+ 	[const_ilog2(WAKE_PHY)]		= "phy",
+ 	[const_ilog2(WAKE_UCAST)]	= "ucast",
+ 	[const_ilog2(WAKE_MCAST)]	= "mcast",
+ 	[const_ilog2(WAKE_BCAST)]	= "bcast",
+ 	[const_ilog2(WAKE_ARP)]		= "arp",
+ 	[const_ilog2(WAKE_MAGIC)]	= "magic",
+ 	[const_ilog2(WAKE_MAGICSECURE)]	= "magicsecure",
+ 	[const_ilog2(WAKE_FILTER)]	= "filter",
+ };
+ static_assert(ARRAY_SIZE(wol_mode_names) == WOL_MODE_COUNT);
+ 
+ /* return false if legacy contained non-0 deprecated fields
+  * maxtxpkt/maxrxpkt. rest of ksettings always updated
+  */
+ bool
+ convert_legacy_settings_to_link_ksettings(
+ 	struct ethtool_link_ksettings *link_ksettings,
+ 	const struct ethtool_cmd *legacy_settings)
+ {
+ 	bool retval = true;
+ 
+ 	memset(link_ksettings, 0, sizeof(*link_ksettings));
+ 
+ 	/* This is used to tell users that driver is still using these
+ 	 * deprecated legacy fields, and they should not use
+ 	 * %ETHTOOL_GLINKSETTINGS/%ETHTOOL_SLINKSETTINGS
+ 	 */
+ 	if (legacy_settings->maxtxpkt ||
+ 	    legacy_settings->maxrxpkt)
+ 		retval = false;
+ 
+ 	ethtool_convert_legacy_u32_to_link_mode(
+ 		link_ksettings->link_modes.supported,
+ 		legacy_settings->supported);
+ 	ethtool_convert_legacy_u32_to_link_mode(
+ 		link_ksettings->link_modes.advertising,
+ 		legacy_settings->advertising);
+ 	ethtool_convert_legacy_u32_to_link_mode(
+ 		link_ksettings->link_modes.lp_advertising,
+ 		legacy_settings->lp_advertising);
+ 	link_ksettings->base.speed
+ 		= ethtool_cmd_speed(legacy_settings);
+ 	link_ksettings->base.duplex
+ 		= legacy_settings->duplex;
+ 	link_ksettings->base.port
+ 		= legacy_settings->port;
+ 	link_ksettings->base.phy_address
+ 		= legacy_settings->phy_address;
+ 	link_ksettings->base.autoneg
+ 		= legacy_settings->autoneg;
+ 	link_ksettings->base.mdio_support
+ 		= legacy_settings->mdio_support;
+ 	link_ksettings->base.eth_tp_mdix
+ 		= legacy_settings->eth_tp_mdix;
+ 	link_ksettings->base.eth_tp_mdix_ctrl
+ 		= legacy_settings->eth_tp_mdix_ctrl;
+ 	return retval;
+ }
+ 
+ int __ethtool_get_link(struct net_device *dev)
+ {
+ 	if (!dev->ethtool_ops->get_link)
+ 		return -EOPNOTSUPP;
+ 
+ 	return netif_running(dev) && dev->ethtool_ops->get_link(dev);
+ }
++>>>>>>> 51ea22b04ea0 (ethtool: provide WoL settings with WOL_GET request)
diff --cc net/ethtool/common.h
index bbb788908cb1,40ba74e0b9bb..000000000000
--- a/net/ethtool/common.h
+++ b/net/ethtool/common.h
@@@ -18,5 -19,13 +18,16 @@@ tunable_strings[__ETHTOOL_TUNABLE_COUNT
  extern const char
  phy_tunable_strings[__ETHTOOL_PHY_TUNABLE_COUNT][ETH_GSTRING_LEN];
  extern const char link_mode_names[][ETH_GSTRING_LEN];
++<<<<<<< HEAD
++=======
+ extern const char netif_msg_class_names[][ETH_GSTRING_LEN];
+ extern const char wol_mode_names[][ETH_GSTRING_LEN];
+ 
+ int __ethtool_get_link(struct net_device *dev);
+ 
+ bool convert_legacy_settings_to_link_ksettings(
+ 	struct ethtool_link_ksettings *link_ksettings,
+ 	const struct ethtool_cmd *legacy_settings);
++>>>>>>> 51ea22b04ea0 (ethtool: provide WoL settings with WOL_GET request)
  
  #endif /* _ETHTOOL_COMMON_H */
* Unmerged path Documentation/networking/ethtool-netlink.rst
* Unmerged path include/uapi/linux/ethtool_netlink.h
* Unmerged path net/ethtool/netlink.c
* Unmerged path net/ethtool/netlink.h
* Unmerged path net/ethtool/strset.c
* Unmerged path Documentation/networking/ethtool-netlink.rst
* Unmerged path include/uapi/linux/ethtool.h
* Unmerged path include/uapi/linux/ethtool_netlink.h
* Unmerged path net/ethtool/Makefile
* Unmerged path net/ethtool/common.c
* Unmerged path net/ethtool/common.h
* Unmerged path net/ethtool/netlink.c
* Unmerged path net/ethtool/netlink.h
* Unmerged path net/ethtool/strset.c
diff --git a/net/ethtool/wol.c b/net/ethtool/wol.c
new file mode 100644
index 000000000000..7c9a1ef622ce
--- /dev/null
+++ b/net/ethtool/wol.c
@@ -0,0 +1,99 @@
+// SPDX-License-Identifier: GPL-2.0-only
+
+#include "netlink.h"
+#include "common.h"
+#include "bitset.h"
+
+struct wol_req_info {
+	struct ethnl_req_info		base;
+};
+
+struct wol_reply_data {
+	struct ethnl_reply_data		base;
+	struct ethtool_wolinfo		wol;
+	bool				show_sopass;
+};
+
+#define WOL_REPDATA(__reply_base) \
+	container_of(__reply_base, struct wol_reply_data, base)
+
+static const struct nla_policy
+wol_get_policy[ETHTOOL_A_WOL_MAX + 1] = {
+	[ETHTOOL_A_WOL_UNSPEC]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_WOL_HEADER]		= { .type = NLA_NESTED },
+	[ETHTOOL_A_WOL_MODES]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_WOL_SOPASS]		= { .type = NLA_REJECT },
+};
+
+static int wol_prepare_data(const struct ethnl_req_info *req_base,
+			    struct ethnl_reply_data *reply_base,
+			    struct genl_info *info)
+{
+	struct wol_reply_data *data = WOL_REPDATA(reply_base);
+	struct net_device *dev = reply_base->dev;
+	int ret;
+
+	if (!dev->ethtool_ops->get_wol)
+		return -EOPNOTSUPP;
+
+	ret = ethnl_ops_begin(dev);
+	if (ret < 0)
+		return ret;
+	dev->ethtool_ops->get_wol(dev, &data->wol);
+	ethnl_ops_complete(dev);
+	data->show_sopass = data->wol.supported & WAKE_MAGICSECURE;
+
+	return 0;
+}
+
+static int wol_reply_size(const struct ethnl_req_info *req_base,
+			  const struct ethnl_reply_data *reply_base)
+{
+	bool compact = req_base->flags & ETHTOOL_FLAG_COMPACT_BITSETS;
+	const struct wol_reply_data *data = WOL_REPDATA(reply_base);
+	int len;
+
+	len = ethnl_bitset32_size(&data->wol.wolopts, &data->wol.supported,
+				  WOL_MODE_COUNT, wol_mode_names, compact);
+	if (len < 0)
+		return len;
+	if (data->show_sopass)
+		len += nla_total_size(sizeof(data->wol.sopass));
+
+	return len;
+}
+
+static int wol_fill_reply(struct sk_buff *skb,
+			  const struct ethnl_req_info *req_base,
+			  const struct ethnl_reply_data *reply_base)
+{
+	bool compact = req_base->flags & ETHTOOL_FLAG_COMPACT_BITSETS;
+	const struct wol_reply_data *data = WOL_REPDATA(reply_base);
+	int ret;
+
+	ret = ethnl_put_bitset32(skb, ETHTOOL_A_WOL_MODES, &data->wol.wolopts,
+				 &data->wol.supported, WOL_MODE_COUNT,
+				 wol_mode_names, compact);
+	if (ret < 0)
+		return ret;
+	if (data->show_sopass &&
+	    nla_put(skb, ETHTOOL_A_WOL_SOPASS, sizeof(data->wol.sopass),
+		    data->wol.sopass))
+		return -EMSGSIZE;
+
+	return 0;
+}
+
+const struct ethnl_request_ops ethnl_wol_request_ops = {
+	.request_cmd		= ETHTOOL_MSG_WOL_GET,
+	.reply_cmd		= ETHTOOL_MSG_WOL_GET_REPLY,
+	.hdr_attr		= ETHTOOL_A_WOL_HEADER,
+	.max_attr		= ETHTOOL_A_WOL_MAX,
+	.req_info_size		= sizeof(struct wol_req_info),
+	.reply_data_size	= sizeof(struct wol_reply_data),
+	.request_policy		= wol_get_policy,
+
+	.prepare_data		= wol_prepare_data,
+	.reply_size		= wol_reply_size,
+	.fill_reply		= wol_fill_reply,
+};
