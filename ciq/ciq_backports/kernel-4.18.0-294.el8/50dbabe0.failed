powerpc/powernv/mce: Print additional information about MCE error.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [powerpc] powerpc/powernv/mce: Print additional information about MCE error (Diego Domingos) [1822675]
Rebuild_FUZZ: 99.24%
commit-author Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
commit 50dbabe06a6e1c35980154ea1fac2ed6ad28652b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/50dbabe0.failed

Print more information about MCE error whether it is an hardware or
software error.

Some of the MCE errors can be easily categorized as hardware or
software errors e.g. UEs are due to hardware error, where as error
triggered due to invalid usage of tlbie is a pure software bug. But
not all the MCE errors can be easily categorize into either software
or hardware. There are errors like multihit errors which are usually
result of a software bug, but in some rare cases a hardware failure
can cause a multihit error. In past, we have seen case where after
replacing faulty chip, multihit errors stopped occurring. Same with
parity errors, which are usually due to faulty hardware but there are
chances where multihit can also cause an parity error. Such errors are
difficult to determine what really caused it. Hence this patch
classifies MCE errors into following four categorize:

  1. Hardware error:
  	UE and Link timeout failure errors.
  2. Probable hardware error (some chance of software cause)
  	SLB/ERAT/TLB Parity errors.
  3. Software error
  	Invalid tlbie form.
  4. Probable software error (some chance of hardware cause)
  	SLB/ERAT/TLB Multihit errors.

Sample output:

  MCE: CPU80: machine check (Warning) Guest SLB Multihit DAR: 000001001b6e0320 [Recovered]
  MCE: CPU80: PID: 24765 Comm: qemu-system-ppc Guest NIP: [00007fffa309dc60]
  MCE: CPU80: Probable Software error (some chance of hardware cause)

	Signed-off-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 50dbabe06a6e1c35980154ea1fac2ed6ad28652b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/mce.h
#	arch/powerpc/kernel/mce.c
#	arch/powerpc/kernel/mce_power.c
diff --cc arch/powerpc/include/asm/mce.h
index 95ec50eadb94,23247a132ce8..000000000000
--- a/arch/powerpc/include/asm/mce.h
+++ b/arch/powerpc/include/asm/mce.h
@@@ -110,26 -118,27 +118,42 @@@ enum MCE_LinkErrorType 
  };
  
  struct machine_check_event {
++<<<<<<< HEAD
 +	enum MCE_Version	version:8;	/* 0x00 */
 +	uint8_t			in_use;		/* 0x01 */
 +	enum MCE_Severity	severity:8;	/* 0x02 */
 +	enum MCE_Initiator	initiator:8;	/* 0x03 */
 +	enum MCE_ErrorType	error_type:8;	/* 0x04 */
 +	enum MCE_Disposition	disposition:8;	/* 0x05 */
 +	uint16_t		cpu;		/* 0x06 */
 +	uint64_t		gpr3;		/* 0x08 */
 +	uint64_t		srr0;		/* 0x10 */
 +	uint64_t		srr1;		/* 0x18 */
 +	union {					/* 0x20 */
++=======
+ 	enum MCE_Version	version:8;
+ 	u8			in_use;
+ 	enum MCE_Severity	severity:8;
+ 	enum MCE_Initiator	initiator:8;
+ 	enum MCE_ErrorType	error_type:8;
+ 	enum MCE_ErrorClass	error_class:8;
+ 	enum MCE_Disposition	disposition:8;
+ 	bool			sync_error;
+ 	u16			cpu;
+ 	u64			gpr3;
+ 	u64			srr0;
+ 	u64			srr1;
+ 	union {
++>>>>>>> 50dbabe06a6e (powerpc/powernv/mce: Print additional information about MCE error.)
  		struct {
  			enum MCE_UeErrorType ue_error_type:8;
 -			u8		effective_address_provided;
 -			u8		physical_address_provided;
 -			u8		reserved_1[5];
 -			u64		effective_address;
 -			u64		physical_address;
 -			u8		reserved_2[8];
 +			uint8_t		effective_address_provided;
 +			uint8_t		physical_address_provided;
 +			uint8_t		ignore_event;
 +			uint8_t		reserved_1[4];
 +			uint64_t	effective_address;
 +			uint64_t	physical_address;
 +			uint8_t		reserved_2[8];
  		} ue_error;
  
  		struct {
@@@ -195,7 -204,8 +219,12 @@@ struct mce_error_info 
  	} u;
  	enum MCE_Severity	severity:8;
  	enum MCE_Initiator	initiator:8;
++<<<<<<< HEAD
 +	bool			ignore_event;
++=======
+ 	enum MCE_ErrorClass	error_class:8;
+ 	bool			sync_error;
++>>>>>>> 50dbabe06a6e (powerpc/powernv/mce: Print additional information about MCE error.)
  };
  
  #define MAX_MC_EVT	100
diff --cc arch/powerpc/kernel/mce.c
index b4119ae43b3c,4581377cfc98..000000000000
--- a/arch/powerpc/kernel/mce.c
+++ b/arch/powerpc/kernel/mce.c
@@@ -126,6 -122,8 +126,11 @@@ void save_mce_event(struct pt_regs *reg
  
  	mce->initiator = mce_err->initiator;
  	mce->severity = mce_err->severity;
++<<<<<<< HEAD
++=======
+ 	mce->sync_error = mce_err->sync_error;
+ 	mce->error_class = mce_err->error_class;
++>>>>>>> 50dbabe06a6e (powerpc/powernv/mce: Print additional information about MCE error.)
  
  	/*
  	 * Populate the mce error_type and type-specific error_type.
diff --cc arch/powerpc/kernel/mce_power.c
index e15100ace981,b5e876efe864..000000000000
--- a/arch/powerpc/kernel/mce_power.c
+++ b/arch/powerpc/kernel/mce_power.c
@@@ -140,215 -131,234 +140,424 @@@ struct mce_ierror_table 
  	bool nip_valid; /* nip is a valid indicator of faulting address */
  	unsigned int error_type;
  	unsigned int error_subtype;
+ 	unsigned int error_class;
  	unsigned int initiator;
  	unsigned int severity;
 -	bool sync_error;
  };
  
  static const struct mce_ierror_table mce_p7_ierror_table[] = {
  { 0x00000000001c0000, 0x0000000000040000, true,
++<<<<<<< HEAD
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000001c0000, 0x0000000000080000, true,
 +  MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_PARITY,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000001c0000, 0x00000000000c0000, true,
 +  MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000001c0000, 0x0000000000100000, true,
 +  MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_INDETERMINATE, /* BOTH */
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000001c0000, 0x0000000000140000, true,
 +  MCE_ERROR_TYPE_TLB, MCE_TLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000001c0000, 0x0000000000180000, true,
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_PAGE_TABLE_WALK_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000001c0000, 0x00000000001c0000, true,
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0, 0, 0, 0, 0, 0 } };
 +
 +static const struct mce_ierror_table mce_p8_ierror_table[] = {
 +{ 0x00000000081c0000, 0x0000000000040000, true,
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000080000, true,
 +  MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_PARITY,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x00000000000c0000, true,
 +  MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000100000, true,
 +  MCE_ERROR_TYPE_ERAT,MCE_ERAT_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000140000, true,
 +  MCE_ERROR_TYPE_TLB, MCE_TLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000180000, true,
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_PAGE_TABLE_WALK_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x00000000001c0000, true,
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000008000000, true,
 +  MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_IFETCH_TIMEOUT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000008040000, true,
 +  MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_PAGE_TABLE_WALK_IFETCH_TIMEOUT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0, 0, 0, 0, 0, 0 } };
 +
 +static const struct mce_ierror_table mce_p9_ierror_table[] = {
 +{ 0x00000000081c0000, 0x0000000000040000, true,
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000080000, true,
 +  MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_PARITY,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x00000000000c0000, true,
 +  MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000100000, true,
 +  MCE_ERROR_TYPE_ERAT,MCE_ERAT_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000140000, true,
 +  MCE_ERROR_TYPE_TLB, MCE_TLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000000180000, true,
 +  MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_PAGE_TABLE_WALK_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x00000000001c0000, true,
 +  MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_IFETCH_FOREIGN,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000008000000, true,
 +  MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_IFETCH_TIMEOUT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000008040000, true,
 +  MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_PAGE_TABLE_WALK_IFETCH_TIMEOUT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x00000000080c0000, true,
 +  MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000008100000, true,
 +  MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_PAGE_TABLE_WALK_IFETCH,
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0x00000000081c0000, 0x0000000008140000, false,
 +  MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_STORE,
 +  MCE_INITIATOR_CPU,  MCE_SEV_FATAL, }, /* ASYNC is fatal */
 +{ 0x00000000081c0000, 0x0000000008180000, false,
 +  MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_STORE_TIMEOUT,
 +  MCE_INITIATOR_CPU,  MCE_SEV_FATAL, }, /* ASYNC is fatal */
 +{ 0x00000000081c0000, 0x00000000081c0000, true,
++=======
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000001c0000, 0x0000000000080000, true,
+   MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_PARITY, MCE_ECLASS_HARD_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000001c0000, 0x00000000000c0000, true,
+   MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000001c0000, 0x0000000000100000, true,
+   MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_INDETERMINATE, /* BOTH */
+   MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000001c0000, 0x0000000000140000, true,
+   MCE_ERROR_TYPE_TLB, MCE_TLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000001c0000, 0x0000000000180000, true,
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_PAGE_TABLE_WALK_IFETCH, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000001c0000, 0x00000000001c0000, true,
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0, 0, 0, 0, 0, 0, 0 } };
+ 
+ static const struct mce_ierror_table mce_p8_ierror_table[] = {
+ { 0x00000000081c0000, 0x0000000000040000, true,
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000000080000, true,
+   MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_PARITY, MCE_ECLASS_HARD_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x00000000000c0000, true,
+   MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000081c0000, 0x0000000000100000, true,
+   MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000081c0000, 0x0000000000140000, true,
+   MCE_ERROR_TYPE_TLB, MCE_TLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000081c0000, 0x0000000000180000, true,
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_PAGE_TABLE_WALK_IFETCH,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x00000000001c0000, true,
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000008000000, true,
+   MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_IFETCH_TIMEOUT, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000008040000, true,
+   MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_PAGE_TABLE_WALK_IFETCH_TIMEOUT,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0, 0, 0, 0, 0, 0, 0 } };
+ 
+ static const struct mce_ierror_table mce_p9_ierror_table[] = {
+ { 0x00000000081c0000, 0x0000000000040000, true,
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_IFETCH, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000000080000, true,
+   MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_PARITY, MCE_ECLASS_HARD_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x00000000000c0000, true,
+   MCE_ERROR_TYPE_SLB, MCE_SLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000081c0000, 0x0000000000100000, true,
+   MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000081c0000, 0x0000000000140000, true,
+   MCE_ERROR_TYPE_TLB, MCE_TLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,  MCE_SEV_WARNING, true },
+ { 0x00000000081c0000, 0x0000000000180000, true,
+   MCE_ERROR_TYPE_UE,  MCE_UE_ERROR_PAGE_TABLE_WALK_IFETCH, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x00000000001c0000, true,
+   MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_IFETCH_FOREIGN, MCE_ECLASS_SOFTWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000008000000, true,
+   MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_IFETCH_TIMEOUT, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000008040000, true,
+   MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_PAGE_TABLE_WALK_IFETCH_TIMEOUT,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x00000000080c0000, true,
+   MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_IFETCH, MCE_ECLASS_SOFTWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000008100000, true,
+   MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_PAGE_TABLE_WALK_IFETCH, MCE_ECLASS_SOFTWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
+ { 0x00000000081c0000, 0x0000000008140000, false,
+   MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_STORE, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,  MCE_SEV_FATAL, false }, /* ASYNC is fatal */
+ { 0x00000000081c0000, 0x0000000008180000, false,
+   MCE_ERROR_TYPE_LINK,MCE_LINK_ERROR_STORE_TIMEOUT,
+   MCE_INITIATOR_CPU,  MCE_SEV_FATAL, false }, /* ASYNC is fatal */
+ { 0x00000000081c0000, 0x00000000081c0000, true, MCE_ECLASS_HARDWARE,
++>>>>>>> 50dbabe06a6e (powerpc/powernv/mce: Print additional information about MCE error.)
    MCE_ERROR_TYPE_RA,  MCE_RA_ERROR_PAGE_TABLE_WALK_IFETCH_FOREIGN,
 -  MCE_INITIATOR_CPU,  MCE_SEV_SEVERE, true },
 -{ 0, 0, 0, 0, 0, 0, 0 } };
 +  MCE_INITIATOR_CPU,  MCE_SEV_ERROR_SYNC, },
 +{ 0, 0, 0, 0, 0, 0 } };
  
  struct mce_derror_table {
  	unsigned long dsisr_value;
  	bool dar_valid; /* dar is a valid indicator of faulting address */
  	unsigned int error_type;
  	unsigned int error_subtype;
+ 	unsigned int error_class;
  	unsigned int initiator;
  	unsigned int severity;
 -	bool sync_error;
  };
  
  static const struct mce_derror_table mce_p7_derror_table[] = {
  { 0x00008000, false,
++<<<<<<< HEAD
 +  MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_LOAD_STORE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00004000, true,
 +  MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000800, true,
 +  MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000400, true,
 +  MCE_ERROR_TYPE_TLB,  MCE_TLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000080, true,
 +  MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_MULTIHIT,	/* Before PARITY */
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000100, true,
 +  MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_PARITY,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000040, true,
 +  MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_INDETERMINATE, /* BOTH */
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0, false, 0, 0, 0, 0 } };
 +
 +static const struct mce_derror_table mce_p8_derror_table[] = {
 +{ 0x00008000, false,
 +  MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_LOAD_STORE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00004000, true,
 +  MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00002000, true,
 +  MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_LOAD_TIMEOUT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00001000, true,
 +  MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_PAGE_TABLE_WALK_LOAD_STORE_TIMEOUT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000800, true,
 +  MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000400, true,
 +  MCE_ERROR_TYPE_TLB,  MCE_TLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000200, true,
 +  MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT, /* SECONDARY ERAT */
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000080, true,
 +  MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_MULTIHIT,	/* Before PARITY */
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000100, true,
 +  MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_PARITY,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0, false, 0, 0, 0, 0 } };
 +
 +static const struct mce_derror_table mce_p9_derror_table[] = {
 +{ 0x00008000, false,
 +  MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_LOAD_STORE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00004000, true,
 +  MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00002000, true,
 +  MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_LOAD_TIMEOUT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00001000, true,
 +  MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_PAGE_TABLE_WALK_LOAD_STORE_TIMEOUT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000800, true,
 +  MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000400, true,
 +  MCE_ERROR_TYPE_TLB,  MCE_TLB_ERROR_MULTIHIT,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000200, false,
 +  MCE_ERROR_TYPE_USER, MCE_USER_ERROR_TLBIE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000080, true,
 +  MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_MULTIHIT,	/* Before PARITY */
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000100, true,
 +  MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_PARITY,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000040, true,
 +  MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_LOAD,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000020, false,
 +  MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000010, false,
 +  MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_PAGE_TABLE_WALK_LOAD_STORE_FOREIGN,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0x00000008, false,
 +  MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_LOAD_STORE_FOREIGN,
 +  MCE_INITIATOR_CPU,   MCE_SEV_ERROR_SYNC, },
 +{ 0, false, 0, 0, 0, 0 } };
++=======
+   MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_LOAD_STORE, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00004000, true,
+   MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000800, true,
+   MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000400, true,
+   MCE_ERROR_TYPE_TLB,  MCE_TLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000080, true,
+   MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000100, true,
+   MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_PARITY, MCE_ECLASS_HARD_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000040, true,
+   MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_INDETERMINATE, /* BOTH */
+   MCE_ECLASS_HARD_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0, false, 0, 0, 0, 0, 0 } };
+ 
+ static const struct mce_derror_table mce_p8_derror_table[] = {
+ { 0x00008000, false,
+   MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_LOAD_STORE, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00004000, true,
+   MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00002000, true,
+   MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_LOAD_TIMEOUT, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00001000, true,
+   MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_PAGE_TABLE_WALK_LOAD_STORE_TIMEOUT,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000800, true,
+   MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000400, true,
+   MCE_ERROR_TYPE_TLB,  MCE_TLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000200, true,
+   MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT, /* SECONDARY ERAT */
+   MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000080, true,
+   MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_MULTIHIT,	/* Before PARITY */
+   MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000100, true,
+   MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_PARITY, MCE_ECLASS_HARD_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0, false, 0, 0, 0, 0, 0 } };
+ 
+ static const struct mce_derror_table mce_p9_derror_table[] = {
+ { 0x00008000, false,
+   MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_LOAD_STORE, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00004000, true,
+   MCE_ERROR_TYPE_UE,   MCE_UE_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00002000, true,
+   MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_LOAD_TIMEOUT, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00001000, true,
+   MCE_ERROR_TYPE_LINK, MCE_LINK_ERROR_PAGE_TABLE_WALK_LOAD_STORE_TIMEOUT,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000800, true,
+   MCE_ERROR_TYPE_ERAT, MCE_ERAT_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000400, true,
+   MCE_ERROR_TYPE_TLB,  MCE_TLB_ERROR_MULTIHIT, MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000200, false,
+   MCE_ERROR_TYPE_USER, MCE_USER_ERROR_TLBIE, MCE_ECLASS_SOFTWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000080, true,
+   MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_MULTIHIT,	/* Before PARITY */
+   MCE_ECLASS_SOFT_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_WARNING, true },
+ { 0x00000100, true,
+   MCE_ERROR_TYPE_SLB,  MCE_SLB_ERROR_PARITY, MCE_ECLASS_HARD_INDETERMINATE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000040, true,
+   MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_LOAD, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000020, false,
+   MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_PAGE_TABLE_WALK_LOAD_STORE,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000010, false,
+   MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_PAGE_TABLE_WALK_LOAD_STORE_FOREIGN,
+   MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0x00000008, false,
+   MCE_ERROR_TYPE_RA,   MCE_RA_ERROR_LOAD_STORE_FOREIGN, MCE_ECLASS_HARDWARE,
+   MCE_INITIATOR_CPU,   MCE_SEV_SEVERE, true },
+ { 0, false, 0, 0, 0, 0, 0 } };
++>>>>>>> 50dbabe06a6e (powerpc/powernv/mce: Print additional information about MCE error.)
  
 -static int mce_find_instr_ea_and_pfn(struct pt_regs *regs, uint64_t *addr,
 +static int mce_find_instr_ea_and_phys(struct pt_regs *regs, uint64_t *addr,
  					uint64_t *phys_addr)
  {
  	/*
@@@ -457,8 -469,10 +667,13 @@@ static int mce_handle_ierror(struct pt_
  	}
  
  	mce_err->error_type = MCE_ERROR_TYPE_UNKNOWN;
++<<<<<<< HEAD
 +	mce_err->severity = MCE_SEV_ERROR_SYNC;
++=======
+ 	mce_err->error_class = MCE_ECLASS_UNKNOWN;
+ 	mce_err->severity = MCE_SEV_SEVERE;
++>>>>>>> 50dbabe06a6e (powerpc/powernv/mce: Print additional information about MCE error.)
  	mce_err->initiator = MCE_INITIATOR_CPU;
 -	mce_err->sync_error = true;
  
  	return 0;
  }
@@@ -549,8 -564,10 +765,13 @@@ static int mce_handle_derror(struct pt_
  		return handled;
  
  	mce_err->error_type = MCE_ERROR_TYPE_UNKNOWN;
++<<<<<<< HEAD
 +	mce_err->severity = MCE_SEV_ERROR_SYNC;
++=======
+ 	mce_err->error_class = MCE_ECLASS_UNKNOWN;
+ 	mce_err->severity = MCE_SEV_SEVERE;
++>>>>>>> 50dbabe06a6e (powerpc/powernv/mce: Print additional information about MCE error.)
  	mce_err->initiator = MCE_INITIATOR_CPU;
 -	mce_err->sync_error = true;
  
  	return 0;
  }
* Unmerged path arch/powerpc/include/asm/mce.h
* Unmerged path arch/powerpc/kernel/mce.c
* Unmerged path arch/powerpc/kernel/mce_power.c
