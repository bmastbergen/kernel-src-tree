kasan, arm64: enable top byte ignore for the kernel

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrey Konovalov <andreyknvl@google.com>
commit 21696c1613244f2ad4e9216c4f6e7804831a992c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/21696c16.failed

Tag-based KASAN uses the Top Byte Ignore feature of arm64 CPUs to store a
pointer tag in the top byte of each pointer.  This commit enables the
TCR_TBI1 bit, which enables Top Byte Ignore for the kernel, when tag-based
KASAN is used.

Link: http://lkml.kernel.org/r/f51eca084c8cdb2f3a55195fe342dc8953b7aead.1544099024.git.andreyknvl@google.com
	Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
	Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
	Acked-by: Will Deacon <will.deacon@arm.com>
	Cc: Christoph Lameter <cl@linux.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 21696c1613244f2ad4e9216c4f6e7804831a992c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/mm/proc.S
diff --cc arch/arm64/mm/proc.S
index 5dc1b5269402,73886a5f1f30..000000000000
--- a/arch/arm64/mm/proc.S
+++ b/arch/arm64/mm/proc.S
@@@ -47,8 -47,25 +47,14 @@@
  /* PTWs cacheable, inner/outer WBWA */
  #define TCR_CACHE_FLAGS	TCR_IRGN_WBWA | TCR_ORGN_WBWA
  
+ #ifdef CONFIG_KASAN_SW_TAGS
+ #define TCR_KASAN_FLAGS TCR_TBI1
+ #else
+ #define TCR_KASAN_FLAGS 0
+ #endif
+ 
  #define MAIR(attr, mt)	((attr) << ((mt) * 8))
  
 -/*
 - *	cpu_do_idle()
 - *
 - *	Idle the processor (wait for interrupt).
 - */
 -ENTRY(cpu_do_idle)
 -	dsb	sy				// WFI may enter a low-power mode
 -	wfi
 -	ret
 -ENDPROC(cpu_do_idle)
 -
  #ifdef CONFIG_CPU_PM
  /**
   * cpu_do_suspend - save CPU registers context
@@@ -438,8 -455,7 +444,12 @@@ ENTRY(__cpu_setup
  	 */
  	ldr	x10, =TCR_TxSZ(VA_BITS) | TCR_CACHE_FLAGS | TCR_SMP_FLAGS | \
  			TCR_TG_FLAGS | TCR_KASLR_FLAGS | TCR_ASID16 | \
++<<<<<<< HEAD
 +			TCR_TBI0 | TCR_A1
 +	tcr_clear_errata_bits x10, x9, x5
++=======
+ 			TCR_TBI0 | TCR_A1 | TCR_KASAN_FLAGS
++>>>>>>> 21696c161324 (kasan, arm64: enable top byte ignore for the kernel)
  
  #ifdef CONFIG_ARM64_USER_VA_BITS_52
  	ldr_l		x9, vabits_user
diff --git a/arch/arm64/include/asm/pgtable-hwdef.h b/arch/arm64/include/asm/pgtable-hwdef.h
index 83a0a7b1059d..a69259cc1f16 100644
--- a/arch/arm64/include/asm/pgtable-hwdef.h
+++ b/arch/arm64/include/asm/pgtable-hwdef.h
@@ -299,6 +299,7 @@
 #define TCR_A1			(UL(1) << 22)
 #define TCR_ASID16		(UL(1) << 36)
 #define TCR_TBI0		(UL(1) << 37)
+#define TCR_TBI1		(UL(1) << 38)
 #define TCR_HA			(UL(1) << 39)
 #define TCR_HD			(UL(1) << 40)
 #define TCR_NFD0		(UL(1) << 53)
* Unmerged path arch/arm64/mm/proc.S
