tcp: annotate tp->write_seq lockless reads

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 0f31746452e6793ad6271337438af8f4defb8940
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0f317464.failed

There are few places where we fetch tp->write_seq while
this field can change from IRQ or other cpu.

We need to add READ_ONCE() annotations, and also make
sure write sides use corresponding WRITE_ONCE() to avoid
store-tearing.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0f31746452e6793ad6271337438af8f4defb8940)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/tcp.c
#	net/ipv4/tcp_diag.c
diff --cc net/ipv4/tcp.c
index 89d316396e71,96dd65cbeb85..000000000000
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@@ -1034,10 -1032,10 +1034,10 @@@ new_segment
  		skb->len += copy;
  		skb->data_len += copy;
  		skb->truesize += copy;
 -		sk->sk_wmem_queued += copy;
 +		sk_wmem_queued_add(sk, copy);
  		sk_mem_charge(sk, copy);
  		skb->ip_summed = CHECKSUM_PARTIAL;
- 		tp->write_seq += copy;
+ 		WRITE_ONCE(tp->write_seq, tp->write_seq + copy);
  		TCP_SKB_CB(skb)->end_seq += copy;
  		tcp_skb_pcount_set(skb, 0);
  
@@@ -2562,8 -2561,8 +2562,9 @@@ int tcp_disconnect(struct sock *sk, in
  	struct inet_sock *inet = inet_sk(sk);
  	struct inet_connection_sock *icsk = inet_csk(sk);
  	struct tcp_sock *tp = tcp_sk(sk);
 +	int err = 0;
  	int old_state = sk->sk_state;
+ 	u32 seq;
  
  	if (old_state != TCP_CLOSE)
  		tcp_set_state(sk, TCP_CLOSE);
@@@ -2600,19 -2603,23 +2601,31 @@@
  	sk->sk_shutdown = 0;
  	sock_reset_flag(sk, SOCK_DONE);
  	tp->srtt_us = 0;
++<<<<<<< HEAD
 +	tp->write_seq += tp->max_window + 2;
 +	if (tp->write_seq == 0)
 +		tp->write_seq = 1;
++=======
+ 	tp->mdev_us = jiffies_to_usecs(TCP_TIMEOUT_INIT);
+ 	tp->rcv_rtt_last_tsecr = 0;
+ 
+ 	seq = tp->write_seq + tp->max_window + 2;
+ 	if (!seq)
+ 		seq = 1;
+ 	WRITE_ONCE(tp->write_seq, seq);
+ 
+ 	icsk->icsk_backoff = 0;
++>>>>>>> 0f31746452e6 (tcp: annotate tp->write_seq lockless reads)
  	tp->snd_cwnd = 2;
  	icsk->icsk_probes_out = 0;
 -	icsk->icsk_rto = TCP_TIMEOUT_INIT;
  	tp->snd_ssthresh = TCP_INFINITE_SSTHRESH;
 -	tp->snd_cwnd = TCP_INIT_CWND;
  	tp->snd_cwnd_cnt = 0;
  	tp->window_clamp = 0;
 +	tp->delivered = 0;
  	tp->delivered_ce = 0;
 +	if (icsk->icsk_ca_ops->release)
 +		icsk->icsk_ca_ops->release(sk);
 +	memset(icsk->icsk_ca_priv, 0, sizeof(icsk->icsk_ca_priv));
  	tcp_set_ca_state(sk, TCP_CA_Open);
  	tp->is_sack_reneg = 0;
  	tcp_clear_retrans(tp);
@@@ -2892,11 -2937,9 +2905,17 @@@ static int do_tcp_setsockopt(struct soc
  		if (sk->sk_state != TCP_CLOSE)
  			err = -EPERM;
  		else if (tp->repair_queue == TCP_SEND_QUEUE)
++<<<<<<< HEAD
 +			tp->write_seq = val;
 +		else if (tp->repair_queue == TCP_RECV_QUEUE) {
 +			tp->rcv_nxt = val;
 +			tp->copied_seq = val;
 +		}
++=======
+ 			WRITE_ONCE(tp->write_seq, val);
+ 		else if (tp->repair_queue == TCP_RECV_QUEUE)
+ 			WRITE_ONCE(tp->rcv_nxt, val);
++>>>>>>> 0f31746452e6 (tcp: annotate tp->write_seq lockless reads)
  		else
  			err = -EINVAL;
  		break;
diff --cc net/ipv4/tcp_diag.c
index 59e5bc4f6e53,549506162dde..000000000000
--- a/net/ipv4/tcp_diag.c
+++ b/net/ipv4/tcp_diag.c
@@@ -30,8 -26,9 +30,14 @@@ static void tcp_diag_get_info(struct so
  	} else if (sk->sk_type == SOCK_STREAM) {
  		const struct tcp_sock *tp = tcp_sk(sk);
  
++<<<<<<< HEAD
 +		r->idiag_rqueue = max_t(int, tp->rcv_nxt - tp->copied_seq, 0);
 +		r->idiag_wqueue = tp->write_seq - tp->snd_una;
++=======
+ 		r->idiag_rqueue = max_t(int, READ_ONCE(tp->rcv_nxt) -
+ 					     READ_ONCE(tp->copied_seq), 0);
+ 		r->idiag_wqueue = READ_ONCE(tp->write_seq) - tp->snd_una;
++>>>>>>> 0f31746452e6 (tcp: annotate tp->write_seq lockless reads)
  	}
  	if (info)
  		tcp_get_info(sk, info);
diff --git a/include/net/tcp.h b/include/net/tcp.h
index eae45c2b29be..662f6337e95f 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -1909,7 +1909,7 @@ static inline u32 tcp_notsent_lowat(const struct tcp_sock *tp)
 static inline bool tcp_stream_memory_free(const struct sock *sk, int wake)
 {
 	const struct tcp_sock *tp = tcp_sk(sk);
-	u32 notsent_bytes = tp->write_seq - tp->snd_nxt;
+	u32 notsent_bytes = READ_ONCE(tp->write_seq) - tp->snd_nxt;
 
 	return (notsent_bytes << wake) < tcp_notsent_lowat(tp);
 }
* Unmerged path net/ipv4/tcp.c
* Unmerged path net/ipv4/tcp_diag.c
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 6d045fe0871a..6dff9d2b52bd 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -169,9 +169,11 @@ int tcp_twsk_unique(struct sock *sk, struct sock *sktw, void *twp)
 		 * without appearing to create any others.
 		 */
 		if (likely(!tp->repair)) {
-			tp->write_seq = tcptw->tw_snd_nxt + 65535 + 2;
-			if (tp->write_seq == 0)
-				tp->write_seq = 1;
+			u32 seq = tcptw->tw_snd_nxt + 65535 + 2;
+
+			if (!seq)
+				seq = 1;
+			WRITE_ONCE(tp->write_seq, seq);
 			tp->rx_opt.ts_recent	   = tcptw->tw_ts_recent;
 			tp->rx_opt.ts_recent_stamp = tcptw->tw_ts_recent_stamp;
 		}
@@ -258,7 +260,7 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 		tp->rx_opt.ts_recent	   = 0;
 		tp->rx_opt.ts_recent_stamp = 0;
 		if (likely(!tp->repair))
-			tp->write_seq	   = 0;
+			WRITE_ONCE(tp->write_seq, 0);
 	}
 
 	inet->inet_dport = usin->sin_port;
@@ -296,10 +298,11 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 
 	if (likely(!tp->repair)) {
 		if (!tp->write_seq)
-			tp->write_seq = secure_tcp_seq(inet->inet_saddr,
-						       inet->inet_daddr,
-						       inet->inet_sport,
-						       usin->sin_port);
+			WRITE_ONCE(tp->write_seq,
+				   secure_tcp_seq(inet->inet_saddr,
+						  inet->inet_daddr,
+						  inet->inet_sport,
+						  usin->sin_port));
 		tp->tsoffset = secure_tcp_ts_off(sock_net(sk),
 						 inet->inet_saddr,
 						 inet->inet_daddr);
@@ -2484,7 +2487,7 @@ static void get_tcp4_sock(struct sock *sk, struct seq_file *f, int i)
 	seq_printf(f, "%4d: %08X:%04X %08X:%04X %02X %08X:%08X %02X:%08lX "
 			"%08X %5u %8d %lu %d %pK %lu %lu %u %u %d",
 		i, src, srcp, dest, destp, state,
-		tp->write_seq - tp->snd_una,
+		READ_ONCE(tp->write_seq) - tp->snd_una,
 		rx_queue,
 		timer_active,
 		jiffies_delta_to_clock_t(timer_expires - jiffies),
diff --git a/net/ipv4/tcp_minisocks.c b/net/ipv4/tcp_minisocks.c
index 2f67bb0f74d0..243143365f51 100644
--- a/net/ipv4/tcp_minisocks.c
+++ b/net/ipv4/tcp_minisocks.c
@@ -507,7 +507,7 @@ struct sock *tcp_create_openreq_child(const struct sock *sk,
 	newtp->app_limited = ~0U;
 
 	tcp_init_xmit_timers(newsk);
-	newtp->write_seq = newtp->pushed_seq = treq->snt_isn + 1;
+	WRITE_ONCE(newtp->write_seq, newtp->pushed_seq = treq->snt_isn + 1);
 
 	newtp->rx_opt.saw_tstamp = 0;
 
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index 356a9acdc58b..cc2d7473e53e 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -1257,7 +1257,7 @@ static void tcp_queue_skb(struct sock *sk, struct sk_buff *skb)
 	struct tcp_sock *tp = tcp_sk(sk);
 
 	/* Advance write_seq and place onto the write_queue. */
-	tp->write_seq = TCP_SKB_CB(skb)->end_seq;
+	WRITE_ONCE(tp->write_seq, TCP_SKB_CB(skb)->end_seq);
 	__skb_header_release(skb);
 	tcp_add_write_queue_tail(sk, skb);
 	sk_wmem_queued_add(sk, skb->truesize);
@@ -3488,7 +3488,7 @@ static void tcp_connect_queue_skb(struct sock *sk, struct sk_buff *skb)
 	__skb_header_release(skb);
 	sk_wmem_queued_add(sk, skb->truesize);
 	sk_mem_charge(sk, skb->truesize);
-	tp->write_seq = tcb->end_seq;
+	WRITE_ONCE(tp->write_seq, tcb->end_seq);
 	tp->packets_out += tcp_skb_pcount(skb);
 }
 
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index f6c6f74cd9bc..c6575b06034b 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -207,7 +207,7 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 	    !ipv6_addr_equal(&sk->sk_v6_daddr, &usin->sin6_addr)) {
 		tp->rx_opt.ts_recent = 0;
 		tp->rx_opt.ts_recent_stamp = 0;
-		tp->write_seq = 0;
+		WRITE_ONCE(tp->write_seq, 0);
 	}
 
 	sk->sk_v6_daddr = usin->sin6_addr;
@@ -309,10 +309,11 @@ static int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
 
 	if (likely(!tp->repair)) {
 		if (!tp->write_seq)
-			tp->write_seq = secure_tcpv6_seq(np->saddr.s6_addr32,
-							 sk->sk_v6_daddr.s6_addr32,
-							 inet->inet_sport,
-							 inet->inet_dport);
+			WRITE_ONCE(tp->write_seq,
+				   secure_tcpv6_seq(np->saddr.s6_addr32,
+						    sk->sk_v6_daddr.s6_addr32,
+						    inet->inet_sport,
+						    inet->inet_dport));
 		tp->tsoffset = secure_tcpv6_ts_off(sock_net(sk),
 						   np->saddr.s6_addr32,
 						   sk->sk_v6_daddr.s6_addr32);
@@ -1882,7 +1883,7 @@ static void get_tcp6_sock(struct seq_file *seq, struct sock *sp, int i)
 		   dest->s6_addr32[0], dest->s6_addr32[1],
 		   dest->s6_addr32[2], dest->s6_addr32[3], destp,
 		   state,
-		   tp->write_seq - tp->snd_una,
+		   READ_ONCE(tp->write_seq) - tp->snd_una,
 		   rx_queue,
 		   timer_active,
 		   jiffies_delta_to_clock_t(timer_expires - jiffies),
