mm, compaction: remove unnecessary zone parameter in some instances

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mel Gorman <mgorman@techsingularity.net>
commit 40cacbcb324036233a927418441323459d28d19b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/40cacbcb.failed

A zone parameter is passed into a number of top-level compaction
functions despite the fact that it's already in compact_control.  This
is harmless but it did need an audit to check if zone actually ever
changes meaningfully.  This patches removes the parameter in a number of
top-level functions.  The change could be much deeper but this was
enough to briefly clarify the flow.

No functional change.

Link: http://lkml.kernel.org/r/20190118175136.31341-5-mgorman@techsingularity.net
	Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Dan Carpenter <dan.carpenter@oracle.com>
	Cc: David Rientjes <rientjes@google.com>
	Cc: YueHaibing <yuehaibing@huawei.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 40cacbcb324036233a927418441323459d28d19b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/compaction.c
diff --cc mm/compaction.c
index 07f6d32874f6,163841e1b167..000000000000
--- a/mm/compaction.c
+++ b/mm/compaction.c
@@@ -1532,19 -1530,8 +1530,19 @@@ static enum compact_result compact_zone
  	unsigned long last_migrated_pfn;
  	const bool sync = cc->mode != MIGRATE_ASYNC;
  
 +	/*
 +	 * These counters track activities during zone compaction.  Initialize
 +	 * them before compacting a new zone.
 +	 */
 +	cc->total_migrate_scanned = 0;
 +	cc->total_free_scanned = 0;
 +	cc->nr_migratepages = 0;
 +	cc->nr_freepages = 0;
 +	INIT_LIST_HEAD(&cc->freepages);
 +	INIT_LIST_HEAD(&cc->migratepages);
 +
  	cc->migratetype = gfpflags_to_migratetype(cc->gfp_mask);
- 	ret = compaction_suitable(zone, cc->order, cc->alloc_flags,
+ 	ret = compaction_suitable(cc->zone, cc->order, cc->alloc_flags,
  							cc->classzone_idx);
  	/* Compaction is likely to fail */
  	if (ret == COMPACT_SUCCESS || ret == COMPACT_SKIPPED)
@@@ -1720,8 -1711,10 +1718,8 @@@ static enum compact_result compact_zone
  		.ignore_skip_hint = (prio == MIN_COMPACT_PRIORITY),
  		.ignore_block_suitable = (prio == MIN_COMPACT_PRIORITY)
  	};
 -	INIT_LIST_HEAD(&cc.freepages);
 -	INIT_LIST_HEAD(&cc.migratepages);
  
- 	ret = compact_zone(zone, &cc);
+ 	ret = compact_zone(&cc);
  
  	VM_BUG_ON(!list_empty(&cc.freepages));
  	VM_BUG_ON(!list_empty(&cc.migratepages));
@@@ -1831,9 -1826,13 +1829,9 @@@ static void compact_node(int nid
  		if (!populated_zone(zone))
  			continue;
  
 -		cc.nr_freepages = 0;
 -		cc.nr_migratepages = 0;
  		cc.zone = zone;
 -		INIT_LIST_HEAD(&cc.freepages);
 -		INIT_LIST_HEAD(&cc.migratepages);
  
- 		compact_zone(zone, &cc);
+ 		compact_zone(&cc);
  
  		VM_BUG_ON(!list_empty(&cc.freepages));
  		VM_BUG_ON(!list_empty(&cc.migratepages));
@@@ -1955,11 -1956,17 +1953,15 @@@ static void kcompactd_do_work(pg_data_
  							COMPACT_CONTINUE)
  			continue;
  
 -		cc.nr_freepages = 0;
 -		cc.nr_migratepages = 0;
 -		cc.total_migrate_scanned = 0;
 -		cc.total_free_scanned = 0;
 -		cc.zone = zone;
 -		INIT_LIST_HEAD(&cc.freepages);
 -		INIT_LIST_HEAD(&cc.migratepages);
 -
  		if (kthread_should_stop())
  			return;
++<<<<<<< HEAD
 +
 +		cc.zone = zone;
 +		status = compact_zone(zone, &cc);
++=======
+ 		status = compact_zone(&cc);
++>>>>>>> 40cacbcb3240 (mm, compaction: remove unnecessary zone parameter in some instances)
  
  		if (status == COMPACT_SUCCESS) {
  			compaction_defer_reset(zone, cc.order, false);
* Unmerged path mm/compaction.c
