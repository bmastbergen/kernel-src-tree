net/mlx5e: Slave representors sharing unique metadata for match

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vu Pham <vuhuong@mellanox.com>
commit 88e96e533cfa11e996c59a44bbb6b0e0b9891970
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/88e96e53.failed

Bonded slave representors' vports must share a unique metadata
for match.

On enslaving event of slave representor to lag device, allocate
new unique "bond_metadata" for match if this is the first slave.
The subsequent enslaved representors will share the same unique
"bond_metadata".

On unslaving event of slave representor, reset the slave
representor's vport to use its own default metadata.

Replace ingress acl and rx rules of the slave representors' vports
using new vport->bond_metadata.

	Signed-off-by: Vu Pham <vuhuong@mellanox.com>
	Reviewed-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 88e96e533cfa11e996c59a44bbb6b0e0b9891970)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/rep/bond.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 2053796e8e01,af89a4803c7d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -917,10 -936,7 +935,14 @@@ err_close_drop_rq
  
  static void mlx5e_cleanup_rep_rx(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 +
 +	mlx5e_ethtool_cleanup_steering(priv);
 +	mlx5_del_flow_rules(rpriv->vport_rx_rule);
++=======
+ 	rep_vport_rx_rule_destroy(priv);
++>>>>>>> 88e96e533cfa (net/mlx5e: Slave representors sharing unique metadata for match)
  	mlx5e_destroy_rep_root_ft(priv);
  	mlx5e_destroy_ttc_table(priv, &priv->fs.ttc);
  	mlx5e_destroy_direct_tirs(priv, priv->direct_tir);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
index 1f74a4b54f5f,da9f1686d525..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
@@@ -190,6 -215,15 +190,18 @@@ struct mlx5e_rep_sq 
  
  void mlx5e_rep_register_vport_reps(struct mlx5_core_dev *mdev);
  void mlx5e_rep_unregister_vport_reps(struct mlx5_core_dev *mdev);
++<<<<<<< HEAD
++=======
+ int mlx5e_rep_bond_init(struct mlx5e_rep_priv *rpriv);
+ void mlx5e_rep_bond_cleanup(struct mlx5e_rep_priv *rpriv);
+ int mlx5e_rep_bond_enslave(struct mlx5_eswitch *esw, struct net_device *netdev,
+ 			   struct net_device *lag_dev);
+ void mlx5e_rep_bond_unslave(struct mlx5_eswitch *esw,
+ 			    const struct net_device *netdev,
+ 			    const struct net_device *lag_dev);
+ int mlx5e_rep_bond_update(struct mlx5e_priv *priv, bool cleanup);
+ 
++>>>>>>> 88e96e533cfa (net/mlx5e: Slave representors sharing unique metadata for match)
  bool mlx5e_is_uplink_rep(struct mlx5e_priv *priv);
  int mlx5e_add_sqs_fwd_rules(struct mlx5e_priv *priv);
  void mlx5e_remove_sqs_fwd_rules(struct mlx5e_priv *priv);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/bond.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/bond.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
