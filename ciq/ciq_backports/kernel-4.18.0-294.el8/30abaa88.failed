KVM: SVM: Change intercept_dr to generic intercepts

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Babu Moger <babu.moger@amd.com>
commit 30abaa88382ce078cfc2ecebb61d9e0540fef24d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/30abaa88.failed

Modify intercept_dr to generic intercepts in vmcb_control_area. Use
the generic vmcb_set_intercept, vmcb_clr_intercept and vmcb_is_intercept
to set/clear/test the intercept_dr bits.

	Signed-off-by: Babu Moger <babu.moger@amd.com>
	Reviewed-by: Jim Mattson <jmattson@google.com>
Message-Id: <159985249255.11252.10000868032136333355.stgit@bmoger-ubuntu>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 30abaa88382ce078cfc2ecebb61d9e0540fef24d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/svm.h
#	arch/x86/kvm/svm/nested.c
#	arch/x86/kvm/svm/svm.c
diff --cc arch/x86/include/asm/svm.h
index acac55d6f941,80a4db25e424..000000000000
--- a/arch/x86/include/asm/svm.h
+++ b/arch/x86/include/asm/svm.h
@@@ -4,6 -4,45 +4,48 @@@
  
  #include <uapi/asm/svm.h>
  
++<<<<<<< HEAD
++=======
+ /*
+  * 32-bit intercept words in the VMCB Control Area, starting
+  * at Byte offset 000h.
+  */
+ 
+ enum intercept_words {
+ 	INTERCEPT_CR = 0,
+ 	INTERCEPT_DR,
+ 	MAX_INTERCEPT,
+ };
+ 
+ enum {
+ 	/* Byte offset 000h (word 0) */
+ 	INTERCEPT_CR0_READ = 0,
+ 	INTERCEPT_CR3_READ = 3,
+ 	INTERCEPT_CR4_READ = 4,
+ 	INTERCEPT_CR8_READ = 8,
+ 	INTERCEPT_CR0_WRITE = 16,
+ 	INTERCEPT_CR3_WRITE = 16 + 3,
+ 	INTERCEPT_CR4_WRITE = 16 + 4,
+ 	INTERCEPT_CR8_WRITE = 16 + 8,
+ 	/* Byte offset 004h (word 1) */
+ 	INTERCEPT_DR0_READ = 32,
+ 	INTERCEPT_DR1_READ,
+ 	INTERCEPT_DR2_READ,
+ 	INTERCEPT_DR3_READ,
+ 	INTERCEPT_DR4_READ,
+ 	INTERCEPT_DR5_READ,
+ 	INTERCEPT_DR6_READ,
+ 	INTERCEPT_DR7_READ,
+ 	INTERCEPT_DR0_WRITE = 48,
+ 	INTERCEPT_DR1_WRITE,
+ 	INTERCEPT_DR2_WRITE,
+ 	INTERCEPT_DR3_WRITE,
+ 	INTERCEPT_DR4_WRITE,
+ 	INTERCEPT_DR5_WRITE,
+ 	INTERCEPT_DR6_WRITE,
+ 	INTERCEPT_DR7_WRITE,
+ };
++>>>>>>> 30abaa88382c (KVM: SVM: Change intercept_dr to generic intercepts)
  
  enum {
  	INTERCEPT_INTR,
@@@ -57,8 -96,7 +99,12 @@@
  
  
  struct __attribute__ ((__packed__)) vmcb_control_area {
++<<<<<<< HEAD
 +	u32 intercept_cr;
 +	u32 intercept_dr;
++=======
+ 	u32 intercepts[MAX_INTERCEPT];
++>>>>>>> 30abaa88382c (KVM: SVM: Change intercept_dr to generic intercepts)
  	u32 intercept_exceptions;
  	u64 intercept;
  	u8 reserved_1[40];
@@@ -287,32 -325,6 +333,35 @@@ struct __attribute__ ((__packed__)) vmc
  #define SVM_SELECTOR_READ_MASK SVM_SELECTOR_WRITE_MASK
  #define SVM_SELECTOR_CODE_MASK (1 << 3)
  
++<<<<<<< HEAD
 +#define INTERCEPT_CR0_READ	0
 +#define INTERCEPT_CR3_READ	3
 +#define INTERCEPT_CR4_READ	4
 +#define INTERCEPT_CR8_READ	8
 +#define INTERCEPT_CR0_WRITE	(16 + 0)
 +#define INTERCEPT_CR3_WRITE	(16 + 3)
 +#define INTERCEPT_CR4_WRITE	(16 + 4)
 +#define INTERCEPT_CR8_WRITE	(16 + 8)
 +
 +#define INTERCEPT_DR0_READ	0
 +#define INTERCEPT_DR1_READ	1
 +#define INTERCEPT_DR2_READ	2
 +#define INTERCEPT_DR3_READ	3
 +#define INTERCEPT_DR4_READ	4
 +#define INTERCEPT_DR5_READ	5
 +#define INTERCEPT_DR6_READ	6
 +#define INTERCEPT_DR7_READ	7
 +#define INTERCEPT_DR0_WRITE	(16 + 0)
 +#define INTERCEPT_DR1_WRITE	(16 + 1)
 +#define INTERCEPT_DR2_WRITE	(16 + 2)
 +#define INTERCEPT_DR3_WRITE	(16 + 3)
 +#define INTERCEPT_DR4_WRITE	(16 + 4)
 +#define INTERCEPT_DR5_WRITE	(16 + 5)
 +#define INTERCEPT_DR6_WRITE	(16 + 6)
 +#define INTERCEPT_DR7_WRITE	(16 + 7)
 +
++=======
++>>>>>>> 30abaa88382c (KVM: SVM: Change intercept_dr to generic intercepts)
  #define SVM_EVTINJ_VEC_MASK 0xff
  
  #define SVM_EVTINJ_TYPE_SHIFT 8
diff --cc arch/x86/kvm/svm/nested.c
index 3a222ac541d6,012ab2255b3c..000000000000
--- a/arch/x86/kvm/svm/nested.c
+++ b/arch/x86/kvm/svm/nested.c
@@@ -108,10 -109,9 +108,13 @@@ void recalc_intercepts(struct vcpu_svm 
  	h = &svm->nested.hsave->control;
  	g = &svm->nested.ctl;
  
 -	for (i = 0; i < MAX_INTERCEPT; i++)
 -		c->intercepts[i] = h->intercepts[i];
 +	svm->nested.host_intercept_exceptions = h->intercept_exceptions;
  
++<<<<<<< HEAD
 +	c->intercept_cr = h->intercept_cr;
 +	c->intercept_dr = h->intercept_dr;
++=======
++>>>>>>> 30abaa88382c (KVM: SVM: Change intercept_dr to generic intercepts)
  	c->intercept_exceptions = h->intercept_exceptions;
  	c->intercept = h->intercept;
  
@@@ -131,8 -131,9 +134,14 @@@
  	/* We don't want to see VMMCALLs from a nested guest */
  	c->intercept &= ~(1ULL << INTERCEPT_VMMCALL);
  
++<<<<<<< HEAD
 +	c->intercept_cr |= g->intercept_cr;
 +	c->intercept_dr |= g->intercept_dr;
++=======
+ 	for (i = 0; i < MAX_INTERCEPT; i++)
+ 		c->intercepts[i] |= g->intercepts[i];
+ 
++>>>>>>> 30abaa88382c (KVM: SVM: Change intercept_dr to generic intercepts)
  	c->intercept_exceptions |= g->intercept_exceptions;
  	c->intercept |= g->intercept;
  }
@@@ -140,8 -141,11 +149,16 @@@
  static void copy_vmcb_control_area(struct vmcb_control_area *dst,
  				   struct vmcb_control_area *from)
  {
++<<<<<<< HEAD
 +	dst->intercept_cr         = from->intercept_cr;
 +	dst->intercept_dr         = from->intercept_dr;
++=======
+ 	unsigned int i;
+ 
+ 	for (i = 0; i < MAX_INTERCEPT; i++)
+ 		dst->intercepts[i] = from->intercepts[i];
+ 
++>>>>>>> 30abaa88382c (KVM: SVM: Change intercept_dr to generic intercepts)
  	dst->intercept_exceptions = from->intercept_exceptions;
  	dst->intercept            = from->intercept;
  	dst->iopm_base_pa         = from->iopm_base_pa;
diff --cc arch/x86/kvm/svm/svm.c
index ffcc287ce9b5,07a0804d4fe7..000000000000
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@@ -2806,10 -2812,10 +2806,17 @@@ static void dump_vmcb(struct kvm_vcpu *
  	}
  
  	pr_err("VMCB Control Area:\n");
++<<<<<<< HEAD
 +	pr_err("%-20s%04x\n", "cr_read:", control->intercept_cr & 0xffff);
 +	pr_err("%-20s%04x\n", "cr_write:", control->intercept_cr >> 16);
 +	pr_err("%-20s%04x\n", "dr_read:", control->intercept_dr & 0xffff);
 +	pr_err("%-20s%04x\n", "dr_write:", control->intercept_dr >> 16);
++=======
+ 	pr_err("%-20s%04x\n", "cr_read:", control->intercepts[INTERCEPT_CR] & 0xffff);
+ 	pr_err("%-20s%04x\n", "cr_write:", control->intercepts[INTERCEPT_CR] >> 16);
+ 	pr_err("%-20s%04x\n", "dr_read:", control->intercepts[INTERCEPT_DR] & 0xffff);
+ 	pr_err("%-20s%04x\n", "dr_write:", control->intercepts[INTERCEPT_DR] >> 16);
++>>>>>>> 30abaa88382c (KVM: SVM: Change intercept_dr to generic intercepts)
  	pr_err("%-20s%08x\n", "exceptions:", control->intercept_exceptions);
  	pr_err("%-20s%016llx\n", "intercepts:", control->intercept);
  	pr_err("%-20s%d\n", "pause filter count:", control->pause_filter_count);
* Unmerged path arch/x86/include/asm/svm.h
* Unmerged path arch/x86/kvm/svm/nested.c
* Unmerged path arch/x86/kvm/svm/svm.c
diff --git a/arch/x86/kvm/svm/svm.h b/arch/x86/kvm/svm/svm.h
index 7e2440454c08..68320a088a1d 100644
--- a/arch/x86/kvm/svm/svm.h
+++ b/arch/x86/kvm/svm/svm.h
@@ -246,22 +246,22 @@ static inline void set_dr_intercepts(struct vcpu_svm *svm)
 {
 	struct vmcb *vmcb = get_host_vmcb(svm);
 
-	vmcb->control.intercept_dr = (1 << INTERCEPT_DR0_READ)
-		| (1 << INTERCEPT_DR1_READ)
-		| (1 << INTERCEPT_DR2_READ)
-		| (1 << INTERCEPT_DR3_READ)
-		| (1 << INTERCEPT_DR4_READ)
-		| (1 << INTERCEPT_DR5_READ)
-		| (1 << INTERCEPT_DR6_READ)
-		| (1 << INTERCEPT_DR7_READ)
-		| (1 << INTERCEPT_DR0_WRITE)
-		| (1 << INTERCEPT_DR1_WRITE)
-		| (1 << INTERCEPT_DR2_WRITE)
-		| (1 << INTERCEPT_DR3_WRITE)
-		| (1 << INTERCEPT_DR4_WRITE)
-		| (1 << INTERCEPT_DR5_WRITE)
-		| (1 << INTERCEPT_DR6_WRITE)
-		| (1 << INTERCEPT_DR7_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR0_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR1_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR2_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR3_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR4_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR5_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR6_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR7_READ);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR0_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR1_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR2_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR3_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR4_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR5_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR6_WRITE);
+	vmcb_set_intercept(&vmcb->control, INTERCEPT_DR7_WRITE);
 
 	recalc_intercepts(svm);
 }
@@ -270,7 +270,7 @@ static inline void clr_dr_intercepts(struct vcpu_svm *svm)
 {
 	struct vmcb *vmcb = get_host_vmcb(svm);
 
-	vmcb->control.intercept_dr = 0;
+	vmcb->control.intercepts[INTERCEPT_DR] = 0;
 
 	recalc_intercepts(svm);
 }
