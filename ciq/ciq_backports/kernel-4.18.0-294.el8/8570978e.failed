x86/boot/compressed/64: Don't pre-map memory in KASLR code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] boot/compressed/64: Don't pre-map memory in KASLR code (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 96.43%
commit-author Joerg Roedel <jroedel@suse.de>
commit 8570978ea030757839747aa9944ea576708be3d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/8570978e.failed

With the page-fault handler in place, he identity mapping can be built
on-demand. So remove the code which manually creates the mappings and
unexport/remove the functions used for it.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Kees Cook <keescook@chromium.org>
Link: https://lkml.kernel.org/r/20200907131613.12703-18-joro@8bytes.org
(cherry picked from commit 8570978ea030757839747aa9944ea576708be3d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/kaslr.c
#	arch/x86/boot/compressed/kaslr_64.c
diff --cc arch/x86/boot/compressed/kaslr.c
index d375b8f0f703,b59547ce5b19..000000000000
--- a/arch/x86/boot/compressed/kaslr.c
+++ b/arch/x86/boot/compressed/kaslr.c
@@@ -396,16 -408,13 +394,24 @@@ static void mem_avoid_init(unsigned lon
  	/* No need to set mapping for initrd, it will be handled in VO. */
  
  	/* Avoid kernel command line. */
 -	cmd_line = get_cmd_line_ptr();
 +	cmd_line  = (u64)boot_params->ext_cmd_line_ptr << 32;
 +	cmd_line |= boot_params->hdr.cmd_line_ptr;
  	/* Calculate size of cmd_line. */
++<<<<<<< HEAD
 +	ptr = (char *)(unsigned long)cmd_line;
 +	for (cmd_line_size = 0; ptr[cmd_line_size++];)
 +		;
 +	mem_avoid[MEM_AVOID_CMDLINE].start = cmd_line;
 +	mem_avoid[MEM_AVOID_CMDLINE].size = cmd_line_size;
 +	add_identity_map(mem_avoid[MEM_AVOID_CMDLINE].start,
 +			 mem_avoid[MEM_AVOID_CMDLINE].size);
++=======
+ 	if (cmd_line) {
+ 		cmd_line_size = strnlen((char *)cmd_line, COMMAND_LINE_SIZE-1) + 1;
+ 		mem_avoid[MEM_AVOID_CMDLINE].start = cmd_line;
+ 		mem_avoid[MEM_AVOID_CMDLINE].size = cmd_line_size;
+ 	}
++>>>>>>> 8570978ea030 (x86/boot/compressed/64: Don't pre-map memory in KASLR code)
  
  	/* Avoid boot parameters. */
  	mem_avoid[MEM_AVOID_BOOTPARAMS].start = (unsigned long)boot_params;
diff --cc arch/x86/boot/compressed/kaslr_64.c
index 9557c5a15b91,c63257bf8373..000000000000
--- a/arch/x86/boot/compressed/kaslr_64.c
+++ b/arch/x86/boot/compressed/kaslr_64.c
@@@ -74,6 -86,24 +74,27 @@@ phys_addr_t physical_mask = (1ULL << __
   */
  static struct x86_mapping_info mapping_info;
  
++<<<<<<< HEAD:arch/x86/boot/compressed/kaslr_64.c
++=======
+ /*
+  * Adds the specified range to the identity mappings.
+  */
+ static void add_identity_map(unsigned long start, unsigned long size)
+ {
+ 	unsigned long end = start + size;
+ 
+ 	/* Align boundary to 2M. */
+ 	start = round_down(start, PMD_SIZE);
+ 	end = round_up(end, PMD_SIZE);
+ 	if (start >= end)
+ 		return;
+ 
+ 	/* Build the mapping. */
+ 	kernel_ident_mapping_init(&mapping_info, (pgd_t *)top_level_pgt,
+ 				  start, end);
+ }
+ 
++>>>>>>> 8570978ea030 (x86/boot/compressed/64: Don't pre-map memory in KASLR code):arch/x86/boot/compressed/ident_map_64.c
  /* Locates and clears a region for a new top level page table. */
  void initialize_identity_maps(void)
  {
* Unmerged path arch/x86/boot/compressed/kaslr.c
* Unmerged path arch/x86/boot/compressed/kaslr_64.c
diff --git a/arch/x86/boot/compressed/misc.h b/arch/x86/boot/compressed/misc.h
index d55a1ca4f95b..235afd5679bb 100644
--- a/arch/x86/boot/compressed/misc.h
+++ b/arch/x86/boot/compressed/misc.h
@@ -94,17 +94,7 @@ static inline void choose_random_location(unsigned long input,
 #endif
 
 #ifdef CONFIG_X86_64
-void initialize_identity_maps(void);
-void add_identity_map(unsigned long start, unsigned long size);
-void finalize_identity_maps(void);
 extern unsigned char _pgtable[];
-#else
-static inline void initialize_identity_maps(void)
-{ }
-static inline void add_identity_map(unsigned long start, unsigned long size)
-{ }
-static inline void finalize_identity_maps(void)
-{ }
 #endif
 
 #ifdef CONFIG_EARLY_PRINTK
