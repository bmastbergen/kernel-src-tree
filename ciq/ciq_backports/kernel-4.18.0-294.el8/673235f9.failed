scsi: core: Fix race between handling STS_RESOURCE and completion

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 673235f915318ced5d7ec4b2bfd8cb909e6a4a55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/673235f9.failed

When queuing I/O request to LLD, STS_RESOURCE may be returned because:

 - Host is in recovery or blocked

 - Target queue throttling or target is blocked

 - LLD rejection

In these scenarios BLK_STS_DEV_RESOURCE is returned to the block layer to
avoid an unnecessary re-run of the queue. However, all of the requests
queued to this SCSI device may complete immediately after reading
'sdev->device_busy' and BLK_STS_DEV_RESOURCE is returned to block layer. In
that case the current I/O won't get a chance to get queued since it is
invisible at that time for both scsi_run_queue_async() and blk-mq's
RESTART.

Fix the issue by not returning BLK_STS_DEV_RESOURCE in this situation.

Link: https://lore.kernel.org/r/20201202100419.525144-1-ming.lei@redhat.com
Fixes: 86ff7c2a80cd ("blk-mq: introduce BLK_STS_DEV_RESOURCE")
	Cc: Hannes Reinecke <hare@suse.com>
	Cc: Sumit Saxena <sumit.saxena@broadcom.com>
	Cc: Kashyap Desai <kashyap.desai@broadcom.com>
	Cc: Bart Van Assche <bvanassche@acm.org>
	Cc: Ewan Milne <emilne@redhat.com>
	Cc: Long Li <longli@microsoft.com>
	Reported-by: John Garry <john.garry@huawei.com>
	Tested-by: "chenxiang (M)" <chenxiang66@hisilicon.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 673235f915318ced5d7ec4b2bfd8cb909e6a4a55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_lib.c
diff --cc drivers/scsi/scsi_lib.c
index 8e06bc7fa5a6,03c6d0620bfd..000000000000
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@@ -1749,15 -1702,10 +1749,20 @@@ out_put_budget
  	case BLK_STS_OK:
  		break;
  	case BLK_STS_RESOURCE:
++<<<<<<< HEAD
 +		if (atomic_read(&sdev->device_busy) ||
 +		    scsi_device_blocked(sdev))
++=======
+ 	case BLK_STS_ZONE_RESOURCE:
+ 		if (scsi_device_blocked(sdev))
++>>>>>>> 673235f91531 (scsi: core: Fix race between handling STS_RESOURCE and completion)
  			ret = BLK_STS_DEV_RESOURCE;
  		break;
 +	case BLK_STS_AGAIN:
 +		scsi_req(req)->result = DID_BUS_BUSY << 16;
 +		if (req->rq_flags & RQF_DONTPREP)
 +			scsi_mq_uninit_cmd(cmd);
 +		break;
  	default:
  		if (unlikely(!scsi_device_online(sdev)))
  			scsi_req(req)->result = DID_NO_CONNECT << 16;
* Unmerged path drivers/scsi/scsi_lib.c
