net: ena: Change WARN_ON expression in ena_del_napi_in_range()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Shay Agroskin <shayagr@amazon.com>
commit 8b147f6f3e7de4e51113e3e9ec44aa2debc02c58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/8b147f6f.failed

The ena_del_napi_in_range() function unregisters the napi handler for
rings in a given range.
This function had the following WARN_ON macro:

    WARN_ON(ENA_IS_XDP_INDEX(adapter, i) &&
	    adapter->ena_napi[i].xdp_ring);

This macro prints the call stack if the expression inside of it is
true [1], but the expression inside of it is the wanted situation.
The expression checks whether the ring has an XDP queue and its index
corresponds to a XDP one.

This patch changes the expression to
    !ENA_IS_XDP_INDEX(adapter, i) && adapter->ena_napi[i].xdp_ring
which indicates an unwanted situation.

Also, change the structure of the function. The napi handler is
unregistered for all rings, and so there's no need to check whether the
index is an XDP index or not. By removing this check the code becomes
much more readable.

Fixes: 548c4940b9f1 ("net: ena: Implement XDP_TX action")
	Signed-off-by: Shay Agroskin <shayagr@amazon.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8b147f6f3e7de4e51113e3e9ec44aa2debc02c58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amazon/ena/ena_netdev.c
diff --cc drivers/net/ethernet/amazon/ena/ena_netdev.c
index ce0a5ac17da5,233db15c970d..000000000000
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.c
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.c
@@@ -1704,24 -2179,33 +1704,33 @@@ static void ena_del_napi(struct ena_ada
  {
  	int i;
  
++<<<<<<< HEAD
 +	for (i = 0; i < adapter->num_io_queues; i++)
 +		netif_napi_del(&adapter->ena_napi[i].napi);
++=======
+ 	for (i = first_index; i < first_index + count; i++) {
+ 		netif_napi_del(&adapter->ena_napi[i].napi);
+ 
+ 		WARN_ON(!ENA_IS_XDP_INDEX(adapter, i) &&
+ 			adapter->ena_napi[i].xdp_ring);
+ 	}
++>>>>>>> 8b147f6f3e7d (net: ena: Change WARN_ON expression in ena_del_napi_in_range())
  }
  
 -static void ena_init_napi_in_range(struct ena_adapter *adapter,
 -				   int first_index, int count)
 +static void ena_init_napi(struct ena_adapter *adapter)
  {
 +	struct ena_napi *napi;
  	int i;
  
 -	for (i = first_index; i < first_index + count; i++) {
 -		struct ena_napi *napi = &adapter->ena_napi[i];
 +	for (i = 0; i < adapter->num_io_queues; i++) {
 +		napi = &adapter->ena_napi[i];
  
  		netif_napi_add(adapter->netdev,
 -			       &napi->napi,
 -			       ENA_IS_XDP_INDEX(adapter, i) ? ena_xdp_io_poll : ena_io_poll,
 +			       &adapter->ena_napi[i].napi,
 +			       ena_io_poll,
  			       ENA_NAPI_BUDGET);
 -
 -		if (!ENA_IS_XDP_INDEX(adapter, i)) {
 -			napi->rx_ring = &adapter->rx_ring[i];
 -			napi->tx_ring = &adapter->tx_ring[i];
 -		} else {
 -			napi->xdp_ring = &adapter->tx_ring[i];
 -		}
 +		napi->rx_ring = &adapter->rx_ring[i];
 +		napi->tx_ring = &adapter->tx_ring[i];
  		napi->qid = i;
  	}
  }
* Unmerged path drivers/net/ethernet/amazon/ena/ena_netdev.c
