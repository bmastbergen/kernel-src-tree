x86/smpboot: Load TSS and getcpu GDT entry before loading IDT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] smpboot: Load TSS and getcpu GDT entry before loading IDT (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 96.61%
commit-author Joerg Roedel <jroedel@suse.de>
commit 520d030852b4c9babfce9a79d8b5320b6b5545e6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/520d0308.failed

The IDT on 64-bit contains vectors which use paranoid_entry() and/or IST
stacks. To make these vectors work, the TSS and the getcpu GDT entry need
to be set up before the IDT is loaded.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20200907131613.12703-68-joro@8bytes.org
(cherry picked from commit 520d030852b4c9babfce9a79d8b5320b6b5545e6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/processor.h
diff --cc arch/x86/include/asm/processor.h
index bb72d1a49158,615dd440bed8..000000000000
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@@ -749,6 -696,8 +749,11 @@@ extern void load_direct_gdt(int)
  extern void load_fixmap_gdt(int);
  extern void load_percpu_segment(int);
  extern void cpu_init(void);
++<<<<<<< HEAD
++=======
+ extern void cpu_init_exception_handling(void);
+ extern void cr4_init(void);
++>>>>>>> 520d030852b4 (x86/smpboot: Load TSS and getcpu GDT entry before loading IDT)
  
  static inline unsigned long get_debugctlmsr(void)
  {
* Unmerged path arch/x86/include/asm/processor.h
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index d6857fdc914b..bcca14bf5c7d 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -1775,6 +1775,29 @@ static void setup_getcpu(int cpu)
 }
 #endif
 
+/*
+ * Setup everything needed to handle exceptions from the IDT, including the IST
+ * exceptions which use paranoid_entry().
+ */
+void cpu_init_exception_handling(void)
+{
+	struct tss_struct *tss = this_cpu_ptr(&cpu_tss_rw);
+	int cpu = raw_smp_processor_id();
+
+	/* paranoid_entry() gets the CPU number from the GDT */
+	setup_getcpu(cpu);
+
+	/* IST vectors need TSS to be set up. */
+	tss_setup_ist(tss);
+	tss_setup_io_bitmap(tss);
+	set_tss_desc(cpu, &get_cpu_entry_area(cpu)->tss.x86_tss);
+
+	load_TR_desc();
+
+	/* Finally load the IDT */
+	load_current_idt();
+}
+
 /*
  * cpu_init() initializes state that is per-CPU. Some data is already
  * initialized (naturally) in the bootstrap process, such as the GDT
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 7da39dc1a09e..44f463be7c1d 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -238,7 +238,7 @@ static void notrace start_secondary(void *unused)
 	cr4_init_shadow();
 	__flush_tlb_all();
 #endif
-	load_current_idt();
+	cpu_init_exception_handling();
 	cpu_init();
 	x86_cpuinit.early_percpu_clock_init();
 	preempt_disable();
