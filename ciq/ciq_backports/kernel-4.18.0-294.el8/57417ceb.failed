XArray: add xa_get_order

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Matthew Wilcox (Oracle) <willy@infradead.org>
commit 57417cebc96b57122a2207fc84a6077d20c84b4b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/57417ceb.failed

Patch series "Fix read-only THP for non-tmpfs filesystems".

As described more verbosely in the [3/3] changelog, we can inadvertently
put an order-0 page in the page cache which occupies 512 consecutive
entries.  Users are running into this if they enable the
READ_ONLY_THP_FOR_FS config option; see
https://bugzilla.kernel.org/show_bug.cgi?id=206569 and Qian Cai has also
reported it here:
https://lore.kernel.org/lkml/20200616013309.GB815@lca.pw/

This is a rather intrusive way of fixing the problem, but has the
advantage that I've actually been testing it with the THP patches, which
means that it sees far more use than it does upstream -- indeed, Song has
been entirely unable to reproduce it.  It also has the advantage that it
removes a few patches from my gargantuan backlog of THP patches.

This patch (of 3):

This function returns the order of the entry at the index.  We need this
because there isn't space in the shadow entry to encode its order.

[akpm@linux-foundation.org: export xa_get_order to modules]

	Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Cc: "Kirill A . Shutemov" <kirill@shutemov.name>
	Cc: Qian Cai <cai@lca.pw>
	Cc: Song Liu <songliubraving@fb.com>
Link: https://lkml.kernel.org/r/20200903183029.14930-1-willy@infradead.org
Link: https://lkml.kernel.org/r/20200903183029.14930-2-willy@infradead.org
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 57417cebc96b57122a2207fc84a6077d20c84b4b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/test_xarray.c
diff --cc lib/test_xarray.c
index 1f5e2e126a1f,bdd4d7995f79..000000000000
--- a/lib/test_xarray.c
+++ b/lib/test_xarray.c
@@@ -1460,39 -1555,6 +1460,40 @@@ static noinline void check_align(struc
  	check_align_2(xa, name);
  }
  
 +/*
 + * Check that the pointer / value / sibling entries are accounted the
 + * way we expect them to be.
 + */
 +static noinline void check_account(struct xarray *xa)
 +{
 +#ifdef CONFIG_XARRAY_MULTI
 +	unsigned int order;
 +
 +	for (order = 1; order < 12; order++) {
 +		XA_STATE(xas, xa, 1 << order);
 +
 +		xa_store_order(xa, 0, order, xa, GFP_KERNEL);
 +		rcu_read_lock();
 +		xas_load(&xas);
 +		XA_BUG_ON(xa, xas.xa_node->count == 0);
 +		XA_BUG_ON(xa, xas.xa_node->count > (1 << order));
 +		XA_BUG_ON(xa, xas.xa_node->nr_values != 0);
 +		rcu_read_unlock();
 +
 +		xa_store_order(xa, 1 << order, order, xa_mk_index(1UL << order),
 +				GFP_KERNEL);
 +		XA_BUG_ON(xa, xas.xa_node->count != xas.xa_node->nr_values * 2);
 +
 +		xa_erase(xa, 1 << order);
 +		XA_BUG_ON(xa, xas.xa_node->nr_values != 0);
 +
 +		xa_erase(xa, 0);
 +		XA_BUG_ON(xa, !xa_empty(xa));
 +	}
 +#endif
 +}
 +
++<<<<<<< HEAD
  static LIST_HEAD(shadow_nodes);
  
  static void test_update_node(struct xa_node *node)
@@@ -1549,6 -1616,59 +1550,28 @@@ static noinline void check_workingset(s
  	XA_BUG_ON(xa, !xa_empty(xa));
  }
  
 -/*
 - * Check that the pointer / value / sibling entries are accounted the
 - * way we expect them to be.
 - */
 -static noinline void check_account(struct xarray *xa)
 -{
 -#ifdef CONFIG_XARRAY_MULTI
 -	unsigned int order;
 -
 -	for (order = 1; order < 12; order++) {
 -		XA_STATE(xas, xa, 1 << order);
 -
 -		xa_store_order(xa, 0, order, xa, GFP_KERNEL);
 -		rcu_read_lock();
 -		xas_load(&xas);
 -		XA_BUG_ON(xa, xas.xa_node->count == 0);
 -		XA_BUG_ON(xa, xas.xa_node->count > (1 << order));
 -		XA_BUG_ON(xa, xas.xa_node->nr_values != 0);
 -		rcu_read_unlock();
 -
 -		xa_store_order(xa, 1 << order, order, xa_mk_index(1UL << order),
 -				GFP_KERNEL);
 -		XA_BUG_ON(xa, xas.xa_node->count != xas.xa_node->nr_values * 2);
 -
 -		xa_erase(xa, 1 << order);
 -		XA_BUG_ON(xa, xas.xa_node->nr_values != 0);
 -
 -		xa_erase(xa, 0);
 -		XA_BUG_ON(xa, !xa_empty(xa));
 -	}
 -#endif
 -}
 -
++=======
+ static noinline void check_get_order(struct xarray *xa)
+ {
+ 	unsigned int max_order = IS_ENABLED(CONFIG_XARRAY_MULTI) ? 20 : 1;
+ 	unsigned int order;
+ 	unsigned long i, j;
+ 
+ 	for (i = 0; i < 3; i++)
+ 		XA_BUG_ON(xa, xa_get_order(xa, i) != 0);
+ 
+ 	for (order = 0; order < max_order; order++) {
+ 		for (i = 0; i < 10; i++) {
+ 			xa_store_order(xa, i << order, order,
+ 					xa_mk_index(i << order), GFP_KERNEL);
+ 			for (j = i << order; j < (i + 1) << order; j++)
+ 				XA_BUG_ON(xa, xa_get_order(xa, j) != order);
+ 			xa_erase(xa, i << order);
+ 		}
+ 	}
+ }
+ 
++>>>>>>> 57417cebc96b (XArray: add xa_get_order)
  static noinline void check_destroy(struct xarray *xa)
  {
  	unsigned long index;
@@@ -1597,8 -1717,10 +1620,9 @@@ static int xarray_checks(void
  	check_reserve(&array);
  	check_reserve(&xa0);
  	check_multi_store(&array);
+ 	check_get_order(&array);
  	check_xa_alloc();
  	check_find(&array);
 -	check_find_entry(&array);
  	check_pause(&array);
  	check_account(&array);
  	check_destroy(&array);
diff --git a/include/linux/xarray.h b/include/linux/xarray.h
index ea5f4dc9496e..1aa59b9e0117 100644
--- a/include/linux/xarray.h
+++ b/include/linux/xarray.h
@@ -1543,6 +1543,15 @@ void xas_pause(struct xa_state *);
 
 void xas_create_range(struct xa_state *);
 
+#ifdef CONFIG_XARRAY_MULTI
+int xa_get_order(struct xarray *, unsigned long index);
+#else
+static inline int xa_get_order(struct xarray *xa, unsigned long index)
+{
+	return 0;
+}
+#endif
+
 /**
  * xas_reload() - Refetch an entry from the xarray.
  * @xas: XArray operation state.
* Unmerged path lib/test_xarray.c
diff --git a/lib/xarray.c b/lib/xarray.c
index 3ce64edadf21..1f4756dd13a9 100644
--- a/lib/xarray.c
+++ b/lib/xarray.c
@@ -1603,6 +1603,46 @@ void *xa_store_range(struct xarray *xa, unsigned long first,
 	return xas_result(&xas, NULL);
 }
 EXPORT_SYMBOL(xa_store_range);
+
+/**
+ * xa_get_order() - Get the order of an entry.
+ * @xa: XArray.
+ * @index: Index of the entry.
+ *
+ * Return: A number between 0 and 63 indicating the order of the entry.
+ */
+int xa_get_order(struct xarray *xa, unsigned long index)
+{
+	XA_STATE(xas, xa, index);
+	void *entry;
+	int order = 0;
+
+	rcu_read_lock();
+	entry = xas_load(&xas);
+
+	if (!entry)
+		goto unlock;
+
+	if (!xas.xa_node)
+		goto unlock;
+
+	for (;;) {
+		unsigned int slot = xas.xa_offset + (1 << order);
+
+		if (slot >= XA_CHUNK_SIZE)
+			break;
+		if (!xa_is_sibling(xas.xa_node->slots[slot]))
+			break;
+		order++;
+	}
+
+	order += xas.xa_node->shift;
+unlock:
+	rcu_read_unlock();
+
+	return order;
+}
+EXPORT_SYMBOL(xa_get_order);
 #endif /* CONFIG_XARRAY_MULTI */
 
 /**
