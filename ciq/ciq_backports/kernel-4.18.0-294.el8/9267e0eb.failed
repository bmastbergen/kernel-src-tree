scsi: scsi_debug: Add ZBC module parameter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Douglas Gilbert <dgilbert@interlog.com>
commit 9267e0eb41fedc2d4b930a90aca17051fa1ef21a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9267e0eb.failed

Add the zbc module parameter to take either:
    0: none         (probably a conventional disk)
    1: host-aware
    2: host-managed

These values are chosen to match 'enum blk_zoned_model' found in
include/linux/blkdev.h . Instead of "none", "no" or "0" can be given.
Instead of "host-aware", "aware or "1" can be given. Instead of
"host-managed", "managed" or "2" can be given.

Note: the zbc parameter can only be given at driver/module load time; it
cannot be changed via sysfs thereafter.

At this time there is no ZBC "host-aware" implementation so that string (or
the value '1') results in a modprobe error.

Link: https://lore.kernel.org/r/20200422104221.378203-4-damien.lemoal@wdc.com
	Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 9267e0eb41fedc2d4b930a90aca17051fa1ef21a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_debug.c
diff --cc drivers/scsi/scsi_debug.c
index 8a8e70143123,d0ac1f584205..000000000000
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@@ -109,9 -113,12 +109,11 @@@ static const char *sdebug_version_date 
  #define DEF_ATO 1
  #define DEF_CDB_LEN 10
  #define DEF_JDELAY   1		/* if > 0 unit is a jiffy */
+ #define DEF_DEV_SIZE_PRE_INIT   0
  #define DEF_DEV_SIZE_MB   8
+ #define DEF_ZBC_DEV_SIZE_MB   128
  #define DEF_DIF 0
  #define DEF_DIX 0
 -#define DEF_PER_HOST_STORE false
  #define DEF_D_SENSE   0
  #define DEF_EVERY_NTH   0
  #define DEF_FAKE_RW	0
@@@ -5341,6 -6534,40 +5388,43 @@@ static int __init scsi_debug_init(void
  	for (k = 0; k < submit_queues; ++k)
  		spin_lock_init(&sdebug_q_arr[k].qc_lock);
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * check for host managed zoned block device specified with
+ 	 * ptype=0x14 or zbc=XXX.
+ 	 */
+ 	if (sdebug_ptype == TYPE_ZBC) {
+ 		sdeb_zbc_model = BLK_ZONED_HM;
+ 	} else if (sdeb_zbc_model_s && *sdeb_zbc_model_s) {
+ 		k = sdeb_zbc_model_str(sdeb_zbc_model_s);
+ 		if (k < 0) {
+ 			ret = k;
+ 			goto free_vm;
+ 		}
+ 		sdeb_zbc_model = k;
+ 		switch (sdeb_zbc_model) {
+ 		case BLK_ZONED_NONE:
+ 			sdebug_ptype = TYPE_DISK;
+ 			break;
+ 		case BLK_ZONED_HM:
+ 			sdebug_ptype = TYPE_ZBC;
+ 			break;
+ 		case BLK_ZONED_HA:
+ 		default:
+ 			pr_err("Invalid ZBC model\n");
+ 			return -EINVAL;
+ 		}
+ 	}
+ 	if (sdeb_zbc_model != BLK_ZONED_NONE) {
+ 		sdeb_zbc_in_use = true;
+ 		if (sdebug_dev_size_mb == DEF_DEV_SIZE_PRE_INIT)
+ 			sdebug_dev_size_mb = DEF_ZBC_DEV_SIZE_MB;
+ 	}
+ 
+ 	if (sdebug_dev_size_mb == DEF_DEV_SIZE_PRE_INIT)
+ 		sdebug_dev_size_mb = DEF_DEV_SIZE_MB;
++>>>>>>> 9267e0eb41fe (scsi: scsi_debug: Add ZBC module parameter)
  	if (sdebug_dev_size_mb < 1)
  		sdebug_dev_size_mb = 1;  /* force minimum 1 MB ramdisk */
  	sz = (unsigned long)sdebug_dev_size_mb * 1048576;
* Unmerged path drivers/scsi/scsi_debug.c
