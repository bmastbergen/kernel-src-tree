bpf: cpumap: Implement XDP_REDIRECT for eBPF programs attached to map entries

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 28b1520ebf81ced970141640d90279ac7b9f1f9a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/28b1520e.failed

Introduce XDP_REDIRECT support for eBPF programs attached to cpumap
entries.
This patch has been tested on Marvell ESPRESSObin using a modified
version of xdp_redirect_cpu sample in order to attach a XDP program
to CPUMAP entries to perform a redirect on the mvneta interface.
In particular the following scenario has been tested:

rq (cpu0) --> mvneta - XDP_REDIRECT (cpu0) --> CPUMAP - XDP_REDIRECT (cpu1) --> mvneta

$./xdp_redirect_cpu -p xdp_cpu_map0 -d eth0 -c 1 -e xdp_redirect \
	-f xdp_redirect_kern.o -m tx_port -r eth0

tx: 285.2 Kpps rx: 285.2 Kpps

Attaching a simple XDP program on eth0 to perform XDP_TX gives
comparable results:

tx: 288.4 Kpps rx: 288.4 Kpps

Co-developed-by: Jesper Dangaard Brouer <brouer@redhat.com>
	Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
Link: https://lore.kernel.org/bpf/2cf8373a731867af302b00c4ff16c122630c4980.1594734381.git.lorenzo@kernel.org
(cherry picked from commit 28b1520ebf81ced970141640d90279ac7b9f1f9a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/xdp.h
#	include/trace/events/xdp.h
#	kernel/bpf/cpumap.c
diff --cc include/net/xdp.h
index 6368152dc76c,5be0d4d65b94..000000000000
--- a/include/net/xdp.h
+++ b/include/net/xdp.h
@@@ -101,6 -98,12 +101,15 @@@ struct xdp_frame 
  	struct net_device *dev_rx; /* used by cpumap */
  };
  
++<<<<<<< HEAD
++=======
+ struct xdp_cpumap_stats {
+ 	unsigned int redirect;
+ 	unsigned int pass;
+ 	unsigned int drop;
+ };
+ 
++>>>>>>> 28b1520ebf81 (bpf: cpumap: Implement XDP_REDIRECT for eBPF programs attached to map entries)
  /* Clear kernel pointers in xdp_frame */
  static inline void xdp_scrub_frame(struct xdp_frame *frame)
  {
diff --cc include/trace/events/xdp.h
index b95d65e8c628,cd24e8a59529..000000000000
--- a/include/trace/events/xdp.h
+++ b/include/trace/events/xdp.h
@@@ -188,6 -188,9 +188,12 @@@ TRACE_EVENT(xdp_cpumap_kthread
  		__field(unsigned int, drops)
  		__field(unsigned int, processed)
  		__field(int, sched)
++<<<<<<< HEAD
++=======
+ 		__field(unsigned int, xdp_pass)
+ 		__field(unsigned int, xdp_drop)
+ 		__field(unsigned int, xdp_redirect)
++>>>>>>> 28b1520ebf81 (bpf: cpumap: Implement XDP_REDIRECT for eBPF programs attached to map entries)
  	),
  
  	TP_fast_assign(
@@@ -197,16 -200,21 +203,32 @@@
  		__entry->drops		= drops;
  		__entry->processed	= processed;
  		__entry->sched	= sched;
++<<<<<<< HEAD
++=======
+ 		__entry->xdp_pass	= xdp_stats->pass;
+ 		__entry->xdp_drop	= xdp_stats->drop;
+ 		__entry->xdp_redirect	= xdp_stats->redirect;
++>>>>>>> 28b1520ebf81 (bpf: cpumap: Implement XDP_REDIRECT for eBPF programs attached to map entries)
  	),
  
  	TP_printk("kthread"
  		  " cpu=%d map_id=%d action=%s"
  		  " processed=%u drops=%u"
++<<<<<<< HEAD
 +		  " sched=%d",
 +		  __entry->cpu, __entry->map_id,
 +		  __print_symbolic(__entry->act, __XDP_ACT_SYM_TAB),
 +		  __entry->processed, __entry->drops,
 +		  __entry->sched)
++=======
+ 		  " sched=%d"
+ 		  " xdp_pass=%u xdp_drop=%u xdp_redirect=%u",
+ 		  __entry->cpu, __entry->map_id,
+ 		  __print_symbolic(__entry->act, __XDP_ACT_SYM_TAB),
+ 		  __entry->processed, __entry->drops,
+ 		  __entry->sched,
+ 		  __entry->xdp_pass, __entry->xdp_drop, __entry->xdp_redirect)
++>>>>>>> 28b1520ebf81 (bpf: cpumap: Implement XDP_REDIRECT for eBPF programs attached to map entries)
  );
  
  TRACE_EVENT(xdp_cpumap_enqueue,
diff --cc kernel/bpf/cpumap.c
index c30199490cad,4c95d0615ca2..000000000000
--- a/kernel/bpf/cpumap.c
+++ b/kernel/bpf/cpumap.c
@@@ -222,6 -228,75 +222,78 @@@ static void put_cpu_map_entry(struct bp
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static int cpu_map_bpf_prog_run_xdp(struct bpf_cpu_map_entry *rcpu,
+ 				    void **frames, int n,
+ 				    struct xdp_cpumap_stats *stats)
+ {
+ 	struct xdp_rxq_info rxq;
+ 	struct xdp_buff xdp;
+ 	int i, nframes = 0;
+ 
+ 	if (!rcpu->prog)
+ 		return n;
+ 
+ 	rcu_read_lock_bh();
+ 
+ 	xdp_set_return_frame_no_direct();
+ 	xdp.rxq = &rxq;
+ 
+ 	for (i = 0; i < n; i++) {
+ 		struct xdp_frame *xdpf = frames[i];
+ 		u32 act;
+ 		int err;
+ 
+ 		rxq.dev = xdpf->dev_rx;
+ 		rxq.mem = xdpf->mem;
+ 		/* TODO: report queue_index to xdp_rxq_info */
+ 
+ 		xdp_convert_frame_to_buff(xdpf, &xdp);
+ 
+ 		act = bpf_prog_run_xdp(rcpu->prog, &xdp);
+ 		switch (act) {
+ 		case XDP_PASS:
+ 			err = xdp_update_frame_from_buff(&xdp, xdpf);
+ 			if (err < 0) {
+ 				xdp_return_frame(xdpf);
+ 				stats->drop++;
+ 			} else {
+ 				frames[nframes++] = xdpf;
+ 				stats->pass++;
+ 			}
+ 			break;
+ 		case XDP_REDIRECT:
+ 			err = xdp_do_redirect(xdpf->dev_rx, &xdp,
+ 					      rcpu->prog);
+ 			if (unlikely(err)) {
+ 				xdp_return_frame(xdpf);
+ 				stats->drop++;
+ 			} else {
+ 				stats->redirect++;
+ 			}
+ 			break;
+ 		default:
+ 			bpf_warn_invalid_xdp_action(act);
+ 			/* fallthrough */
+ 		case XDP_DROP:
+ 			xdp_return_frame(xdpf);
+ 			stats->drop++;
+ 			break;
+ 		}
+ 	}
+ 
+ 	if (stats->redirect)
+ 		xdp_do_flush_map();
+ 
+ 	xdp_clear_return_frame_no_direct();
+ 
+ 	rcu_read_unlock_bh(); /* resched point, may call do_softirq() */
+ 
+ 	return nframes;
+ }
+ 
++>>>>>>> 28b1520ebf81 (bpf: cpumap: Implement XDP_REDIRECT for eBPF programs attached to map entries)
  #define CPUMAP_BATCH 8
  
  static int cpu_map_kthread_run(void *data)
* Unmerged path include/net/xdp.h
* Unmerged path include/trace/events/xdp.h
* Unmerged path kernel/bpf/cpumap.c
