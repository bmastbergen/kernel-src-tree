mm/compaction.c: fix an undefined behaviour

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Qian Cai <cai@lca.pw>
commit dd7ef7bd14640f11763b54f55131000165f48321
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/dd7ef7bd.failed

In a low-memory situation, cc->fast_search_fail can keep increasing as it
is unable to find an available page to isolate in
fast_isolate_freepages().  As the result, it could trigger an error below,
so just compare with the maximum bits can be shifted first.

UBSAN: Undefined behaviour in mm/compaction.c:1160:30
shift exponent 64 is too large for 64-bit type 'unsigned long'
CPU: 131 PID: 1308 Comm: kcompactd1 Kdump: loaded Tainted: G
W    L    5.0.0+ #17
Call trace:
 dump_backtrace+0x0/0x450
 show_stack+0x20/0x2c
 dump_stack+0xc8/0x14c
 __ubsan_handle_shift_out_of_bounds+0x7e8/0x8c4
 compaction_alloc+0x2344/0x2484
 unmap_and_move+0xdc/0x1dbc
 migrate_pages+0x274/0x1310
 compact_zone+0x26ec/0x43bc
 kcompactd+0x15b8/0x1a24
 kthread+0x374/0x390
 ret_from_fork+0x10/0x18

[akpm@linux-foundation.org: code cleanup]
Link: http://lkml.kernel.org/r/20190320203338.53367-1-cai@lca.pw
Fixes: 70b44595eafe ("mm, compaction: use free lists to quickly locate a migration source")
	Signed-off-by: Qian Cai <cai@lca.pw>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Acked-by: Mel Gorman <mgorman@techsingularity.net>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit dd7ef7bd14640f11763b54f55131000165f48321)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/compaction.c
diff --cc mm/compaction.c
index 79db11f23bf2,6cc4bea33dcb..000000000000
--- a/mm/compaction.c
+++ b/mm/compaction.c
@@@ -1043,6 -1161,14 +1043,17 @@@ static bool suitable_migration_target(s
  	return false;
  }
  
++<<<<<<< HEAD
++=======
+ static inline unsigned int
+ freelist_scan_limit(struct compact_control *cc)
+ {
+ 	unsigned short shift = BITS_PER_LONG - 1;
+ 
+ 	return (COMPACT_CLUSTER_MAX >> min(shift, cc->fast_search_fail)) + 1;
+ }
+ 
++>>>>>>> dd7ef7bd1464 (mm/compaction.c: fix an undefined behaviour)
  /*
   * Test whether the free scanner has reached the same or lower pageblock than
   * the migration scanner, and compaction should thus terminate.
* Unmerged path mm/compaction.c
