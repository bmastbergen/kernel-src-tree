PCI/ACPI: Add Ampere Altra SOC MCFG quirk

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Tuan Phan <tuanphan@os.amperecomputing.com>
commit 877c1a5f79c6984bbe3f2924234c08e2f4f1acd5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/877c1a5f.failed

Ampere Altra SOC supports only 32-bit ECAM reads.  Add an MCFG quirk for
the platform.

Link: https://lore.kernel.org/r/1596751055-12316-1-git-send-email-tuanphan@os.amperecomputing.com
	Signed-off-by: Tuan Phan <tuanphan@os.amperecomputing.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit 877c1a5f79c6984bbe3f2924234c08e2f4f1acd5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/pci_mcfg.c
#	include/linux/pci-ecam.h
diff --cc drivers/acpi/pci_mcfg.c
index 7abbaefdbab9,7ddd57abadd1..000000000000
--- a/drivers/acpi/pci_mcfg.c
+++ b/drivers/acpi/pci_mcfg.c
@@@ -154,10 -143,25 +154,32 @@@ static struct mcfg_fixup mcfg_quirks[] 
  	XGENE_V2_ECAM_MCFG(4, 1),
  	XGENE_V2_ECAM_MCFG(4, 2),
  
++<<<<<<< HEAD
 +#define BCM_ECAM_MCFG(rev, seg) \
 +	{"BRCM  ", "BRCM-SRX", rev, seg, MCFG_BUS_ANY, \
 +		&iproc_pcie_paxcv2_ecam_ops }
 +	BCM_ECAM_MCFG(1, 8),
++=======
+ #define ALTRA_ECAM_QUIRK(rev, seg) \
+ 	{ "Ampere", "Altra   ", rev, seg, MCFG_BUS_ANY, &pci_32b_read_ops }
+ 
+ 	ALTRA_ECAM_QUIRK(1, 0),
+ 	ALTRA_ECAM_QUIRK(1, 1),
+ 	ALTRA_ECAM_QUIRK(1, 2),
+ 	ALTRA_ECAM_QUIRK(1, 3),
+ 	ALTRA_ECAM_QUIRK(1, 4),
+ 	ALTRA_ECAM_QUIRK(1, 5),
+ 	ALTRA_ECAM_QUIRK(1, 6),
+ 	ALTRA_ECAM_QUIRK(1, 7),
+ 	ALTRA_ECAM_QUIRK(1, 8),
+ 	ALTRA_ECAM_QUIRK(1, 9),
+ 	ALTRA_ECAM_QUIRK(1, 10),
+ 	ALTRA_ECAM_QUIRK(1, 11),
+ 	ALTRA_ECAM_QUIRK(1, 12),
+ 	ALTRA_ECAM_QUIRK(1, 13),
+ 	ALTRA_ECAM_QUIRK(1, 14),
+ 	ALTRA_ECAM_QUIRK(1, 15),
++>>>>>>> 877c1a5f79c6 (PCI/ACPI: Add Ampere Altra SOC MCFG quirk)
  };
  
  static char mcfg_oem_id[ACPI_OEM_ID_SIZE];
diff --cc include/linux/pci-ecam.h
index 060042b5b105,033ce74f02e8..000000000000
--- a/include/linux/pci-ecam.h
+++ b/include/linux/pci-ecam.h
@@@ -47,23 -47,22 +47,34 @@@ void pci_ecam_free(struct pci_config_wi
  void __iomem *pci_ecam_map_bus(struct pci_bus *bus, unsigned int devfn,
  			       int where);
  /* default ECAM ops */
 -extern const struct pci_ecam_ops pci_generic_ecam_ops;
 +extern struct pci_ecam_ops pci_generic_ecam_ops;
  
  #if defined(CONFIG_ACPI) && defined(CONFIG_PCI_QUIRKS)
++<<<<<<< HEAD
 +extern struct pci_ecam_ops pci_32b_ops;		/* 32-bit accesses only */
 +extern struct pci_ecam_ops hisi_pcie_ops;	/* HiSilicon */
 +extern struct pci_ecam_ops thunder_pem_ecam_ops; /* Cavium ThunderX 1.x & 2.x */
 +extern struct pci_ecam_ops pci_thunder_ecam_ops; /* Cavium ThunderX 1.x */
 +extern struct pci_ecam_ops xgene_v1_pcie_ecam_ops; /* APM X-Gene PCIe v1 */
 +extern struct pci_ecam_ops xgene_v2_pcie_ecam_ops; /* APM X-Gene PCIe v2.x */
 +extern struct pci_ecam_ops al_pcie_ops; /* Amazon Annapurna Labs PCIe */
 +extern struct pci_ecam_ops iproc_pcie_paxcv2_ecam_ops; /* iProc PAXCv2 */
++=======
+ extern const struct pci_ecam_ops pci_32b_ops;	/* 32-bit accesses only */
+ extern const struct pci_ecam_ops pci_32b_read_ops; /* 32-bit read only */
+ extern const struct pci_ecam_ops hisi_pcie_ops;	/* HiSilicon */
+ extern const struct pci_ecam_ops thunder_pem_ecam_ops; /* Cavium ThunderX 1.x & 2.x */
+ extern const struct pci_ecam_ops pci_thunder_ecam_ops; /* Cavium ThunderX 1.x */
+ extern const struct pci_ecam_ops xgene_v1_pcie_ecam_ops; /* APM X-Gene PCIe v1 */
+ extern const struct pci_ecam_ops xgene_v2_pcie_ecam_ops; /* APM X-Gene PCIe v2.x */
+ extern const struct pci_ecam_ops al_pcie_ops;	/* Amazon Annapurna Labs PCIe */
++>>>>>>> 877c1a5f79c6 (PCI/ACPI: Add Ampere Altra SOC MCFG quirk)
  #endif
  
 -#if IS_ENABLED(CONFIG_PCI_HOST_COMMON)
 +#ifdef CONFIG_PCI_HOST_COMMON
  /* for DT-based PCI controllers that support ECAM */
 -int pci_host_common_probe(struct platform_device *pdev);
 +int pci_host_common_probe(struct platform_device *pdev,
 +			  struct pci_ecam_ops *ops);
  int pci_host_common_remove(struct platform_device *pdev);
  #endif
  #endif
* Unmerged path drivers/acpi/pci_mcfg.c
diff --git a/drivers/pci/ecam.c b/drivers/pci/ecam.c
index 1a81af0ba961..59d388560a6f 100644
--- a/drivers/pci/ecam.c
+++ b/drivers/pci/ecam.c
@@ -164,4 +164,14 @@ struct pci_ecam_ops pci_32b_ops = {
 		.write		= pci_generic_config_write32,
 	}
 };
+
+/* ECAM ops for 32-bit read only (non-compliant) */
+const struct pci_ecam_ops pci_32b_read_ops = {
+	.bus_shift	= 20,
+	.pci_ops	= {
+		.map_bus	= pci_ecam_map_bus,
+		.read		= pci_generic_config_read32,
+		.write		= pci_generic_config_write,
+	}
+};
 #endif
* Unmerged path include/linux/pci-ecam.h
