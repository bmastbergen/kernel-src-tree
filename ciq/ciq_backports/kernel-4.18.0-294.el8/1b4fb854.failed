x86/fpu: Move xgetbv()/xsetbv() into a separate header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [x86] fpu: Move xgetbv()/xsetbv() into a separate header (Vitaly Kuznetsov) [1868080]
Rebuild_FUZZ: 96.15%
commit-author Joerg Roedel <jroedel@suse.de>
commit 1b4fb8545f2b00f2844c4b7619d64d98440a477c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1b4fb854.failed

The xgetbv() function is needed in the pre-decompression boot code,
but asm/fpu/internal.h can't be included there directly. Doing so
opens the door to include-hell due to various include-magic in
boot/compressed/misc.h.

Avoid that by moving xgetbv()/xsetbv() to a separate header file and
include it instead.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20200907131613.12703-27-joro@8bytes.org
(cherry picked from commit 1b4fb8545f2b00f2844c4b7619d64d98440a477c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/fpu/internal.h
diff --cc arch/x86/include/asm/fpu/internal.h
index 5b53121601db,ceeba9f63172..000000000000
--- a/arch/x86/include/asm/fpu/internal.h
+++ b/arch/x86/include/asm/fpu/internal.h
@@@ -644,28 -586,4 +645,31 @@@ static inline void switch_fpu_finish(st
  	__write_pkru(pkru_val);
  }
  
++<<<<<<< HEAD
 +/*
 + * MXCSR and XCR definitions:
 + */
 +
 +extern unsigned int mxcsr_feature_mask;
 +
 +#define XCR_XFEATURE_ENABLED_MASK	0x00000000
 +
 +static inline u64 xgetbv(u32 index)
 +{
 +	u32 eax, edx;
 +
 +	asm volatile("xgetbv" : "=a" (eax), "=d" (edx) : "c" (index));
 +	return eax + ((u64)edx << 32);
 +}
 +
 +static inline void xsetbv(u32 index, u64 value)
 +{
 +	u32 eax = value;
 +	u32 edx = value >> 32;
 +
 +	asm volatile("xsetbv" :: "a" (eax), "d" (edx), "c" (index));
 +}
 +
++=======
++>>>>>>> 1b4fb8545f2b (x86/fpu: Move xgetbv()/xsetbv() into a separate header)
  #endif /* _ASM_X86_FPU_INTERNAL_H */
* Unmerged path arch/x86/include/asm/fpu/internal.h
diff --git a/arch/x86/include/asm/fpu/xcr.h b/arch/x86/include/asm/fpu/xcr.h
new file mode 100644
index 000000000000..1c7ab8d95da5
--- /dev/null
+++ b/arch/x86/include/asm/fpu/xcr.h
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_X86_FPU_XCR_H
+#define _ASM_X86_FPU_XCR_H
+
+/*
+ * MXCSR and XCR definitions:
+ */
+
+static inline void ldmxcsr(u32 mxcsr)
+{
+	asm volatile("ldmxcsr %0" :: "m" (mxcsr));
+}
+
+extern unsigned int mxcsr_feature_mask;
+
+#define XCR_XFEATURE_ENABLED_MASK	0x00000000
+
+static inline u64 xgetbv(u32 index)
+{
+	u32 eax, edx;
+
+	asm volatile("xgetbv" : "=a" (eax), "=d" (edx) : "c" (index));
+	return eax + ((u64)edx << 32);
+}
+
+static inline void xsetbv(u32 index, u64 value)
+{
+	u32 eax = value;
+	u32 edx = value >> 32;
+
+	asm volatile("xsetbv" :: "a" (eax), "d" (edx), "c" (index));
+}
+
+#endif /* _ASM_X86_FPU_XCR_H */
