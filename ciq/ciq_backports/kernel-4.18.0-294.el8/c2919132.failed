powerpc/watchpoint: Get watchpoint count dynamically while disabling them

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ravi Bangoria <ravi.bangoria@linux.ibm.com>
commit c2919132734f29a7a33e1339bef8a67b11f322eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c2919132.failed

Instead of disabling only one watchpoint, get num of available
watchpoints dynamically and disable all of them.

	Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Reviewed-by: Michael Neuling <mikey@neuling.org>
Link: https://lore.kernel.org/r/20200514111741.97993-8-ravi.bangoria@linux.ibm.com
(cherry picked from commit c2919132734f29a7a33e1339bef8a67b11f322eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/hw_breakpoint.h
diff --cc arch/powerpc/include/asm/hw_breakpoint.h
index 27d6e3c8fde9,d472b2eb757e..000000000000
--- a/arch/powerpc/include/asm/hw_breakpoint.h
+++ b/arch/powerpc/include/asm/hw_breakpoint.h
@@@ -78,13 -78,14 +78,22 @@@ extern void ptrace_triggered(struct per
  			struct perf_sample_data *data, struct pt_regs *regs);
  static inline void hw_breakpoint_disable(void)
  {
- 	struct arch_hw_breakpoint brk;
+ 	int i;
+ 	struct arch_hw_breakpoint null_brk = {0};
  
++<<<<<<< HEAD
 +	brk.address = 0;
 +	brk.type = 0;
 +	brk.len = 0;
 +	if (ppc_breakpoint_available())
 +		__set_breakpoint(&brk);
++=======
+ 	if (!ppc_breakpoint_available())
+ 		return;
+ 
+ 	for (i = 0; i < nr_wp_slots(); i++)
+ 		__set_breakpoint(i, &null_brk);
++>>>>>>> c2919132734f (powerpc/watchpoint: Get watchpoint count dynamically while disabling them)
  }
  extern void thread_change_pc(struct task_struct *tsk, struct pt_regs *regs);
  int hw_breakpoint_handler(struct die_args *args);
* Unmerged path arch/powerpc/include/asm/hw_breakpoint.h
