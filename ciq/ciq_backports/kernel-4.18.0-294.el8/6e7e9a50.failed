gfs2: factor evict_unlinked_inode out of gfs2_evict_inode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Bob Peterson <rpeterso@redhat.com>
commit 6e7e9a505571db3edc926f4bc972c7ed3da29a9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/6e7e9a50.failed

Function gfs2_evict_inode is way too big, complex and unreadable. This
is a baby step toward breaking it apart to be more readable. It factors
out the portion that deletes the online bits for a dinode that is
unlinked and needs to be deleted. A future patch will factor out more.
(If I factor out too much, the patch itself becomes unreadable).

	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
(cherry picked from commit 6e7e9a505571db3edc926f4bc972c7ed3da29a9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/super.c
diff --cc fs/gfs2/super.c
index 7ef6d48f35a7,b5279a1d9cb0..000000000000
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@@ -1391,35 -1435,7 +1430,39 @@@ out_delete
  			goto out_truncate;
  		}
  	}
++<<<<<<< HEAD
 +
 +	/* Case 1 starts here */
 +
 +	if (S_ISDIR(inode->i_mode) &&
 +	    (ip->i_diskflags & GFS2_DIF_EXHASH)) {
 +		error = gfs2_dir_exhash_dealloc(ip);
 +		if (error)
 +			goto out_unlock;
 +	}
 +
 +	if (ip->i_eattr) {
 +		error = gfs2_ea_dealloc(ip);
 +		if (error)
 +			goto out_unlock;
 +	}
 +
 +	if (!gfs2_is_stuffed(ip)) {
 +		error = gfs2_file_dealloc(ip);
 +		if (error)
 +			goto out_unlock;
 +	}
 +
 +	/* We're about to clear the bitmap for the dinode, but as soon as we
 +	   do, gfs2_create_inode can create another inode at the same block
 +	   location and try to set gl_object again. We clear gl_object here so
 +	   that subsequent inode creates don't see an old gl_object. */
 +	glock_clear_object(ip->i_gl, ip);
 +	error = gfs2_dinode_dealloc(ip);
 +	gfs2_inode_remember_delete(ip->i_gl, ip->i_no_formal_ino);
++=======
+ 	ret = evict_unlinked_inode(inode);
++>>>>>>> 6e7e9a505571 (gfs2: factor evict_unlinked_inode out of gfs2_evict_inode)
  	goto out_unlock;
  
  out_truncate:
* Unmerged path fs/gfs2/super.c
