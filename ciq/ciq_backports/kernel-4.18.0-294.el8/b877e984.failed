KVM: arm64: Build hyp-entry.S separately for VHE/nVHE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author David Brazdil <dbrazdil@google.com>
commit b877e9849d41e7d2100d2933e0a3971d0ddec011
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b877e984.failed

hyp-entry.S contains implementation of KVM hyp vectors. This code is mostly
shared between VHE/nVHE, therefore compile it under both VHE and nVHE build
rules. nVHE-specific host HVC handler is hidden behind __KVM_NVHE_HYPERVISOR__.

Adjust code which selects which KVM hyp vecs to install to choose the correct
VHE/nVHE symbol.

	Signed-off-by: David Brazdil <dbrazdil@google.com>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
Link: https://lore.kernel.org/r/20200625131420.71444-7-dbrazdil@google.com
(cherry picked from commit b877e9849d41e7d2100d2933e0a3971d0ddec011)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/kvm_asm.h
#	arch/arm64/kernel/image-vars.h
#	arch/arm64/kvm/hyp/Makefile
#	arch/arm64/kvm/hyp/nvhe/Makefile
#	arch/arm64/kvm/hyp/vhe/Makefile
diff --cc arch/arm64/include/asm/kvm_asm.h
index d8855ef14df1,6026cbd204ae..000000000000
--- a/arch/arm64/include/asm/kvm_asm.h
+++ b/arch/arm64/include/asm/kvm_asm.h
@@@ -51,14 -42,38 +51,42 @@@
  
  #include <linux/mm.h>
  
++<<<<<<< HEAD
 +/* Translate a kernel address of @sym into its equivalent linear mapping */
 +#define kvm_ksym_ref(sym)						\
++=======
+ /*
+  * Translate name of a symbol defined in nVHE hyp to the name seen
+  * by kernel proper. All nVHE symbols are prefixed by the build system
+  * to avoid clashes with the VHE variants.
+  */
+ #define kvm_nvhe_sym(sym)	__kvm_nvhe_##sym
+ 
+ #define DECLARE_KVM_VHE_SYM(sym)	extern char sym[]
+ #define DECLARE_KVM_NVHE_SYM(sym)	extern char kvm_nvhe_sym(sym)[]
+ 
+ /*
+  * Define a pair of symbols sharing the same name but one defined in
+  * VHE and the other in nVHE hyp implementations.
+  */
+ #define DECLARE_KVM_HYP_SYM(sym)		\
+ 	DECLARE_KVM_VHE_SYM(sym);		\
+ 	DECLARE_KVM_NVHE_SYM(sym)
+ 
+ #define CHOOSE_VHE_SYM(sym)	sym
+ #define CHOOSE_NVHE_SYM(sym)	kvm_nvhe_sym(sym)
+ #define CHOOSE_HYP_SYM(sym)	(has_vhe() ? CHOOSE_VHE_SYM(sym) \
+ 					   : CHOOSE_NVHE_SYM(sym))
+ 
+ /* Translate a kernel address @ptr into its equivalent linear mapping */
+ #define kvm_ksym_ref(ptr)						\
++>>>>>>> b877e9849d41 (KVM: arm64: Build hyp-entry.S separately for VHE/nVHE)
  	({								\
- 		void *val = &sym;					\
+ 		void *val = (ptr);					\
  		if (!is_kernel_in_hyp_mode())				\
- 			val = lm_alias(&sym);				\
+ 			val = lm_alias((ptr));				\
  		val;							\
  	 })
 -#define kvm_ksym_ref_nvhe(sym)	kvm_ksym_ref(kvm_nvhe_sym(sym))
  
  struct kvm;
  struct kvm_vcpu;
diff --cc arch/arm64/kernel/image-vars.h
index 25a2a9b479c2,f28da486b75a..000000000000
--- a/arch/arm64/kernel/image-vars.h
+++ b/arch/arm64/kernel/image-vars.h
@@@ -48,4 -50,69 +48,71 @@@ __efistub_screen_info		= screen_info
  
  #endif
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_KVM
+ 
+ /*
+  * KVM nVHE code has its own symbol namespace prefixed with __kvm_nvhe_, to
+  * separate it from the kernel proper. The following symbols are legally
+  * accessed by it, therefore provide aliases to make them linkable.
+  * Do not include symbols which may not be safely accessed under hypervisor
+  * memory mappings.
+  */
+ 
+ #define KVM_NVHE_ALIAS(sym) __kvm_nvhe_##sym = sym;
+ 
+ /* Symbols defined in debug-sr.c (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__kvm_get_mdcr_el2);
+ 
+ /* Symbols defined in entry.S (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__guest_exit);
+ KVM_NVHE_ALIAS(abort_guest_exit_end);
+ KVM_NVHE_ALIAS(abort_guest_exit_start);
+ 
+ /* Symbols defined in hyp-init.S (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__kvm_handle_stub_hvc);
+ 
+ /* Symbols defined in switch.c (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__kvm_vcpu_run_nvhe);
+ KVM_NVHE_ALIAS(hyp_panic);
+ 
+ /* Symbols defined in sysreg-sr.c (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__kvm_enable_ssbs);
+ 
+ /* Symbols defined in timer-sr.c (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__kvm_timer_set_cntvoff);
+ 
+ /* Symbols defined in tlb.c (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__kvm_flush_vm_context);
+ KVM_NVHE_ALIAS(__kvm_tlb_flush_local_vmid);
+ KVM_NVHE_ALIAS(__kvm_tlb_flush_vmid);
+ KVM_NVHE_ALIAS(__kvm_tlb_flush_vmid_ipa);
+ 
+ /* Symbols defined in vgic-v3-sr.c (not yet compiled with nVHE build rules). */
+ KVM_NVHE_ALIAS(__vgic_v3_get_ich_vtr_el2);
+ KVM_NVHE_ALIAS(__vgic_v3_init_lrs);
+ KVM_NVHE_ALIAS(__vgic_v3_read_vmcr);
+ KVM_NVHE_ALIAS(__vgic_v3_restore_aprs);
+ KVM_NVHE_ALIAS(__vgic_v3_save_aprs);
+ KVM_NVHE_ALIAS(__vgic_v3_write_vmcr);
+ 
+ /* Alternative callbacks for init-time patching of nVHE hyp code. */
+ KVM_NVHE_ALIAS(arm64_enable_wa2_handling);
+ KVM_NVHE_ALIAS(kvm_patch_vector_branch);
+ KVM_NVHE_ALIAS(kvm_update_va_mask);
+ 
+ /* Global kernel state accessed by nVHE hyp code. */
+ KVM_NVHE_ALIAS(arm64_ssbd_callback_required);
+ KVM_NVHE_ALIAS(kvm_host_data);
+ 
+ /* Kernel constant needed to compute idmap addresses. */
+ KVM_NVHE_ALIAS(kimage_voffset);
+ 
+ /* Kernel symbols used to call panic() from nVHE hyp code (via ERET). */
+ KVM_NVHE_ALIAS(panic);
+ 
+ #endif /* CONFIG_KVM */
+ 
++>>>>>>> b877e9849d41 (KVM: arm64: Build hyp-entry.S separately for VHE/nVHE)
  #endif /* __ARM64_KERNEL_IMAGE_VARS_H */
diff --cc arch/arm64/kvm/hyp/Makefile
index 9e1beab1b440,8b0cf85080b5..000000000000
--- a/arch/arm64/kvm/hyp/Makefile
+++ b/arch/arm64/kvm/hyp/Makefile
@@@ -3,12 -3,18 +3,17 @@@
  # Makefile for Kernel-based Virtual Machine module, HYP part
  #
  
 -incdir := $(srctree)/$(src)/include
 -subdir-asflags-y := -I$(incdir)
 -subdir-ccflags-y := -I$(incdir)				\
 -		    -fno-stack-protector		\
 -		    -DDISABLE_BRANCH_PROFILING		\
 -		    $(DISABLE_STACKLEAK_PLUGIN)
 +ccflags-y += -fno-stack-protector -DDISABLE_BRANCH_PROFILING
  
++<<<<<<< HEAD
 +obj-$(CONFIG_KVM) += hyp.o
++=======
+ obj-$(CONFIG_KVM) += hyp.o vhe/ nvhe/
+ obj-$(CONFIG_KVM_INDIRECT_VECTORS) += smccc_wa.o
++>>>>>>> b877e9849d41 (KVM: arm64: Build hyp-entry.S separately for VHE/nVHE)
  
  hyp-y := vgic-v3-sr.o timer-sr.o aarch32.o vgic-v2-cpuif-proxy.o sysreg-sr.o \
- 	 debug-sr.o entry.o switch.o fpsimd.o tlb.o hyp-entry.o
+ 	 debug-sr.o entry.o switch.o fpsimd.o tlb.o
  
  # KVM code is run at a different exception code with a different map, so
  # compiler instrumentation that inserts callbacks or checks into the code may
* Unmerged path arch/arm64/kvm/hyp/nvhe/Makefile
* Unmerged path arch/arm64/kvm/hyp/vhe/Makefile
* Unmerged path arch/arm64/include/asm/kvm_asm.h
diff --git a/arch/arm64/include/asm/mmu.h b/arch/arm64/include/asm/mmu.h
index 899a433604ce..75692f0d859b 100644
--- a/arch/arm64/include/asm/mmu.h
+++ b/arch/arm64/include/asm/mmu.h
@@ -98,13 +98,6 @@ struct bp_hardening_data {
 	bp_hardening_cb_t	fn;
 };
 
-#if (defined(CONFIG_HARDEN_BRANCH_PREDICTOR) ||	\
-     defined(CONFIG_HARDEN_EL2_VECTORS))
-
-extern char __bp_harden_hyp_vecs[];
-extern atomic_t arm64_el2_vector_last_slot;
-#endif  /* CONFIG_HARDEN_BRANCH_PREDICTOR || CONFIG_HARDEN_EL2_VECTORS */
-
 #ifdef CONFIG_HARDEN_BRANCH_PREDICTOR
 DECLARE_PER_CPU_READ_MOSTLY(struct bp_hardening_data, bp_hardening_data);
 
* Unmerged path arch/arm64/kernel/image-vars.h
diff --git a/arch/arm64/kvm/arm.c b/arch/arm64/kvm/arm.c
index 8f41036b7acc..7938676f8993 100644
--- a/arch/arm64/kvm/arm.c
+++ b/arch/arm64/kvm/arm.c
@@ -1296,7 +1296,7 @@ static void cpu_init_hyp_mode(void)
 	 * so that we can use adr_l to access per-cpu variables in EL2.
 	 */
 	tpidr_el2 = ((unsigned long)this_cpu_ptr(&kvm_host_data) -
-		     (unsigned long)kvm_ksym_ref(kvm_host_data));
+		     (unsigned long)kvm_ksym_ref(&kvm_host_data));
 
 	pgd_ptr = kvm_mmu_get_httbr();
 	hyp_stack_ptr = __this_cpu_read(kvm_arm_hyp_stack_page) + PAGE_SIZE;
* Unmerged path arch/arm64/kvm/hyp/Makefile
diff --git a/arch/arm64/kvm/hyp/hyp-entry.S b/arch/arm64/kvm/hyp/hyp-entry.S
index 93c38d0cb3dd..48f52c32555b 100644
--- a/arch/arm64/kvm/hyp/hyp-entry.S
+++ b/arch/arm64/kvm/hyp/hyp-entry.S
@@ -51,6 +51,7 @@ el1_sync:				// Guest trapped into EL2
 	ccmp	x0, #ESR_ELx_EC_HVC32, #4, ne
 	b.ne	el1_trap
 
+#ifdef __KVM_NVHE_HYPERVISOR__
 	mrs	x1, vttbr_el2		// If vttbr is valid, the guest
 	cbnz	x1, el1_hvc_guest	// called HVC
 
@@ -85,6 +86,7 @@ el1_sync:				// Guest trapped into EL2
 
 	eret
 	sb
+#endif /* __KVM_NVHE_HYPERVISOR__ */
 
 el1_hvc_guest:
 	/*
* Unmerged path arch/arm64/kvm/hyp/nvhe/Makefile
* Unmerged path arch/arm64/kvm/hyp/vhe/Makefile
