ibmvnic: Ensure that SCRQ entry reads are correctly ordered

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Thomas Falcon <tlfalcon@linux.ibm.com>
commit b71ec952234610b4f90ef17a2fdcb124d5320070
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b71ec952.failed

Ensure that received Subordinate Command-Response Queue (SCRQ)
entries are properly read in order by the driver. These queues
are used in the ibmvnic device to process RX buffer and TX completion
descriptors. dma_rmb barriers have been added after checking for a
pending descriptor to ensure the correct descriptor entry is checked
and after reading the SCRQ descriptor to ensure the entire
descriptor is read before processing.

Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
	Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b71ec952234610b4f90ef17a2fdcb124d5320070)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/ibm/ibmvnic.c
diff --cc drivers/net/ethernet/ibm/ibmvnic.c
index 621acb49006a,0e34c36c3e86..000000000000
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@@ -2510,9 -2402,15 +2510,19 @@@ restart_poll
  			return frames_processed;
  		}
  
 -		if (!pending_scrq(adapter, adapter->rx_scrq[scrq_num]))
 +		if (!pending_scrq(adapter, rx_scrq))
  			break;
++<<<<<<< HEAD
 +		next = ibmvnic_next_scrq(adapter, rx_scrq);
++=======
+ 		/* The queue entry at the current index is peeked at above
+ 		 * to determine that there is a valid descriptor awaiting
+ 		 * processing. We want to be sure that the current slot
+ 		 * holds a valid descriptor before reading its contents.
+ 		 */
+ 		dma_rmb();
+ 		next = ibmvnic_next_scrq(adapter, adapter->rx_scrq[scrq_num]);
++>>>>>>> b71ec9522346 (ibmvnic: Ensure that SCRQ entry reads are correctly ordered)
  		rx_buff =
  		    (struct ibmvnic_rx_buff *)be64_to_cpu(next->
  							  rx_comp.correlator);
@@@ -3238,9 -3118,14 +3248,16 @@@ restart_loop
  	while (pending_scrq(adapter, scrq)) {
  		unsigned int pool = scrq->pool_index;
  		int num_entries = 0;
 +		int total_bytes = 0;
 +		int num_packets = 0;
  
+ 		/* The queue entry at the current index is peeked at above
+ 		 * to determine that there is a valid descriptor awaiting
+ 		 * processing. We want to be sure that the current slot
+ 		 * holds a valid descriptor before reading its contents.
+ 		 */
+ 		dma_rmb();
+ 
  		next = ibmvnic_next_scrq(adapter, scrq);
  		for (i = 0; i < next->tx_comp.num_comps; i++) {
  			if (next->tx_comp.rcs[i]) {
* Unmerged path drivers/net/ethernet/ibm/ibmvnic.c
