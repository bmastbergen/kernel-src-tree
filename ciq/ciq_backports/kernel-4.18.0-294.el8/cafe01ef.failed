block: release disk reference in hd_struct_free_work

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit cafe01ef8fcb248583038e1be071383530fe355a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/cafe01ef.failed

Commit e8c7d14ac6c3 ("block: revert back to synchronous request_queue removal")
stops to release request queue from wq context because that commit
supposed all blk_put_queue() is called in context which is allowed
to sleep. However, this assumption isn't true because we release disk's
reference in partition's percpu_ref's ->release() which doesn't allow
to sleep, because the ->release() is run via call_rcu().

Fixes this issue by moving put disk reference into hd_struct_free_work()

Fixes: e8c7d14ac6c3 ("block: revert back to synchronous request_queue removal")
	Reported-by: Ilya Dryomov <idryomov@gmail.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Tested-by: Ilya Dryomov <idryomov@gmail.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Cc: Luis Chamberlain <mcgrof@kernel.org>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Bart Van Assche <bvanassche@acm.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit cafe01ef8fcb248583038e1be071383530fe355a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/partition-generic.c
diff --cc block/partition-generic.c
index 01048013a19c,5a18c8edabbc..000000000000
--- a/block/partition-generic.c
+++ b/block/partition-generic.c
@@@ -231,10 -274,19 +231,24 @@@ struct device_type part_type = 
  	.uevent		= part_uevent,
  };
  
 -static void hd_struct_free_work(struct work_struct *work)
 +static void delete_partition_work_fn(struct work_struct *work)
  {
++<<<<<<< HEAD:block/partition-generic.c
 +	struct hd_struct *part = container_of(to_rcu_work(work), struct hd_struct,
 +					rcu_work);
++=======
+ 	struct hd_struct *part =
+ 		container_of(to_rcu_work(work), struct hd_struct, rcu_work);
+ 	struct gendisk *disk = part_to_disk(part);
+ 
+ 	/*
+ 	 * Release the disk reference acquired in delete_partition here.
+ 	 * We can't release it in hd_struct_free because the final put_device
+ 	 * needs process context and thus can't be run directly from a
+ 	 * percpu_ref ->release handler.
+ 	 */
+ 	put_device(disk_to_dev(disk));
++>>>>>>> cafe01ef8fcb (block: release disk reference in hd_struct_free_work):block/partitions/core.c
  
  	part->start_sect = 0;
  	part->nr_sects = 0;
@@@ -250,8 -302,8 +264,13 @@@ void __delete_partition(struct percpu_r
  		rcu_dereference_protected(disk->part_tbl, 1);
  
  	rcu_assign_pointer(ptbl->last_lookup, NULL);
++<<<<<<< HEAD:block/partition-generic.c
 +	put_device(disk_to_dev(disk));
 +	INIT_RCU_WORK(&part->rcu_work, delete_partition_work_fn);
++=======
+ 
+ 	INIT_RCU_WORK(&part->rcu_work, hd_struct_free_work);
++>>>>>>> cafe01ef8fcb (block: release disk reference in hd_struct_free_work):block/partitions/core.c
  	queue_rcu_work(system_wq, &part->rcu_work);
  }
  
* Unmerged path block/partition-generic.c
