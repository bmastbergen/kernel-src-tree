tools, bpftool: Define prog_type_name array only once

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Tobias Klauser <tklauser@distanz.ch>
commit 9023497d8746d355bac8ddbc65797a4f553726fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9023497d.failed

Define prog_type_name in prog.c instead of main.h so it is only defined
once. This leads to a slight decrease in the binary size of bpftool.

Before:

   text	   data	    bss	    dec	    hex	filename
 401032	  11936	1573160	1986128	 1e4e50	bpftool

After:

   text	   data	    bss	    dec	    hex	filename
 399024	  11168	1573160	1983352	 1e4378	bpftool

	Signed-off-by: Tobias Klauser <tklauser@distanz.ch>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Quentin Monnet <quentin@isovalent.com>
Link: https://lore.kernel.org/bpf/20200624143124.12914-1-tklauser@distanz.ch
(cherry picked from commit 9023497d8746d355bac8ddbc65797a4f553726fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/bpf/bpftool/main.h
diff --cc tools/bpf/bpftool/main.h
index c2e6d912670d,269f1cb6aef5..000000000000
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@@ -56,37 -56,8 +56,42 @@@
  #define HELP_SPEC_LINK							\
  	"LINK := { id LINK_ID | pinned FILE }"
  
++<<<<<<< HEAD
 +static const char * const prog_type_name[] = {
 +	[BPF_PROG_TYPE_UNSPEC]			= "unspec",
 +	[BPF_PROG_TYPE_SOCKET_FILTER]		= "socket_filter",
 +	[BPF_PROG_TYPE_KPROBE]			= "kprobe",
 +	[BPF_PROG_TYPE_SCHED_CLS]		= "sched_cls",
 +	[BPF_PROG_TYPE_SCHED_ACT]		= "sched_act",
 +	[BPF_PROG_TYPE_TRACEPOINT]		= "tracepoint",
 +	[BPF_PROG_TYPE_XDP]			= "xdp",
 +	[BPF_PROG_TYPE_PERF_EVENT]		= "perf_event",
 +	[BPF_PROG_TYPE_CGROUP_SKB]		= "cgroup_skb",
 +	[BPF_PROG_TYPE_CGROUP_SOCK]		= "cgroup_sock",
 +	[BPF_PROG_TYPE_LWT_IN]			= "lwt_in",
 +	[BPF_PROG_TYPE_LWT_OUT]			= "lwt_out",
 +	[BPF_PROG_TYPE_LWT_XMIT]		= "lwt_xmit",
 +	[BPF_PROG_TYPE_SOCK_OPS]		= "sock_ops",
 +	[BPF_PROG_TYPE_SK_SKB]			= "sk_skb",
 +	[BPF_PROG_TYPE_CGROUP_DEVICE]		= "cgroup_device",
 +	[BPF_PROG_TYPE_SK_MSG]			= "sk_msg",
 +	[BPF_PROG_TYPE_RAW_TRACEPOINT]		= "raw_tracepoint",
 +	[BPF_PROG_TYPE_CGROUP_SOCK_ADDR]	= "cgroup_sock_addr",
 +	[BPF_PROG_TYPE_LWT_SEG6LOCAL]		= "lwt_seg6local",
 +	[BPF_PROG_TYPE_LIRC_MODE2]		= "lirc_mode2",
 +	[BPF_PROG_TYPE_SK_REUSEPORT]		= "sk_reuseport",
 +	[BPF_PROG_TYPE_FLOW_DISSECTOR]		= "flow_dissector",
 +	[BPF_PROG_TYPE_CGROUP_SYSCTL]		= "cgroup_sysctl",
 +	[BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE] = "raw_tracepoint_writable",
 +	[BPF_PROG_TYPE_CGROUP_SOCKOPT]		= "cgroup_sockopt",
 +	[BPF_PROG_TYPE_TRACING]                 = "tracing",
 +	[BPF_PROG_TYPE_STRUCT_OPS]              = "struct_ops",
 +	[BPF_PROG_TYPE_EXT]                     = "ext",
 +};
++=======
+ extern const char * const prog_type_name[];
+ extern const size_t prog_type_name_size;
++>>>>>>> 9023497d8746 (tools, bpftool: Define prog_type_name array only once)
  
  static const char * const attach_type_name[__MAX_BPF_ATTACH_TYPE] = {
  	[BPF_CGROUP_INET_INGRESS] = "ingress",
diff --git a/tools/bpf/bpftool/feature.c b/tools/bpf/bpftool/feature.c
index 768bf77df886..1cd75807673e 100644
--- a/tools/bpf/bpftool/feature.c
+++ b/tools/bpf/bpftool/feature.c
@@ -695,7 +695,7 @@ section_program_types(bool *supported_types, const char *define_prefix,
 			    "/*** eBPF program types ***/",
 			    define_prefix);
 
-	for (i = BPF_PROG_TYPE_UNSPEC + 1; i < ARRAY_SIZE(prog_type_name); i++)
+	for (i = BPF_PROG_TYPE_UNSPEC + 1; i < prog_type_name_size; i++)
 		probe_prog_type(i, supported_types, define_prefix, ifindex);
 
 	print_end_section();
@@ -741,7 +741,7 @@ section_helpers(bool *supported_types, const char *define_prefix, __u32 ifindex)
 		       "	%sBPF__PROG_TYPE_ ## prog_type ## __HELPER_ ## helper\n",
 		       define_prefix, define_prefix, define_prefix,
 		       define_prefix);
-	for (i = BPF_PROG_TYPE_UNSPEC + 1; i < ARRAY_SIZE(prog_type_name); i++)
+	for (i = BPF_PROG_TYPE_UNSPEC + 1; i < prog_type_name_size; i++)
 		probe_helpers_for_progtype(i, supported_types[i], define_prefix,
 					   ifindex);
 
diff --git a/tools/bpf/bpftool/link.c b/tools/bpf/bpftool/link.c
index 7329f3134283..326b8fdf0243 100644
--- a/tools/bpf/bpftool/link.c
+++ b/tools/bpf/bpftool/link.c
@@ -108,7 +108,7 @@ static int show_link_close_json(int fd, struct bpf_link_info *info)
 		if (err)
 			return err;
 
-		if (prog_info.type < ARRAY_SIZE(prog_type_name))
+		if (prog_info.type < prog_type_name_size)
 			jsonw_string_field(json_wtr, "prog_type",
 					   prog_type_name[prog_info.type]);
 		else
@@ -187,7 +187,7 @@ static int show_link_close_plain(int fd, struct bpf_link_info *info)
 		if (err)
 			return err;
 
-		if (prog_info.type < ARRAY_SIZE(prog_type_name))
+		if (prog_info.type < prog_type_name_size)
 			printf("\n\tprog_type %s  ",
 			       prog_type_name[prog_info.type]);
 		else
* Unmerged path tools/bpf/bpftool/main.h
diff --git a/tools/bpf/bpftool/map.c b/tools/bpf/bpftool/map.c
index 614786a949c4..3a27d31a1856 100644
--- a/tools/bpf/bpftool/map.c
+++ b/tools/bpf/bpftool/map.c
@@ -473,7 +473,7 @@ static int show_map_close_json(int fd, struct bpf_map_info *info)
 		if (owner_prog_type) {
 			unsigned int prog_type = atoi(owner_prog_type);
 
-			if (prog_type < ARRAY_SIZE(prog_type_name))
+			if (prog_type < prog_type_name_size)
 				jsonw_string_field(json_wtr, "owner_prog_type",
 						   prog_type_name[prog_type]);
 			else
@@ -558,7 +558,7 @@ static int show_map_close_plain(int fd, struct bpf_map_info *info)
 		if (owner_prog_type) {
 			unsigned int prog_type = atoi(owner_prog_type);
 
-			if (prog_type < ARRAY_SIZE(prog_type_name))
+			if (prog_type < prog_type_name_size)
 				printf("owner_prog_type %s  ",
 				       prog_type_name[prog_type]);
 			else
diff --git a/tools/bpf/bpftool/prog.c b/tools/bpf/bpftool/prog.c
index 888bad69ace3..2f2f764b15d4 100644
--- a/tools/bpf/bpftool/prog.c
+++ b/tools/bpf/bpftool/prog.c
@@ -29,6 +29,40 @@
 #include "main.h"
 #include "xlated_dumper.h"
 
+const char * const prog_type_name[] = {
+	[BPF_PROG_TYPE_UNSPEC]			= "unspec",
+	[BPF_PROG_TYPE_SOCKET_FILTER]		= "socket_filter",
+	[BPF_PROG_TYPE_KPROBE]			= "kprobe",
+	[BPF_PROG_TYPE_SCHED_CLS]		= "sched_cls",
+	[BPF_PROG_TYPE_SCHED_ACT]		= "sched_act",
+	[BPF_PROG_TYPE_TRACEPOINT]		= "tracepoint",
+	[BPF_PROG_TYPE_XDP]			= "xdp",
+	[BPF_PROG_TYPE_PERF_EVENT]		= "perf_event",
+	[BPF_PROG_TYPE_CGROUP_SKB]		= "cgroup_skb",
+	[BPF_PROG_TYPE_CGROUP_SOCK]		= "cgroup_sock",
+	[BPF_PROG_TYPE_LWT_IN]			= "lwt_in",
+	[BPF_PROG_TYPE_LWT_OUT]			= "lwt_out",
+	[BPF_PROG_TYPE_LWT_XMIT]		= "lwt_xmit",
+	[BPF_PROG_TYPE_SOCK_OPS]		= "sock_ops",
+	[BPF_PROG_TYPE_SK_SKB]			= "sk_skb",
+	[BPF_PROG_TYPE_CGROUP_DEVICE]		= "cgroup_device",
+	[BPF_PROG_TYPE_SK_MSG]			= "sk_msg",
+	[BPF_PROG_TYPE_RAW_TRACEPOINT]		= "raw_tracepoint",
+	[BPF_PROG_TYPE_CGROUP_SOCK_ADDR]	= "cgroup_sock_addr",
+	[BPF_PROG_TYPE_LWT_SEG6LOCAL]		= "lwt_seg6local",
+	[BPF_PROG_TYPE_LIRC_MODE2]		= "lirc_mode2",
+	[BPF_PROG_TYPE_SK_REUSEPORT]		= "sk_reuseport",
+	[BPF_PROG_TYPE_FLOW_DISSECTOR]		= "flow_dissector",
+	[BPF_PROG_TYPE_CGROUP_SYSCTL]		= "cgroup_sysctl",
+	[BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE]	= "raw_tracepoint_writable",
+	[BPF_PROG_TYPE_CGROUP_SOCKOPT]		= "cgroup_sockopt",
+	[BPF_PROG_TYPE_TRACING]			= "tracing",
+	[BPF_PROG_TYPE_STRUCT_OPS]		= "struct_ops",
+	[BPF_PROG_TYPE_EXT]			= "ext",
+};
+
+const size_t prog_type_name_size = ARRAY_SIZE(prog_type_name);
+
 enum dump_mode {
 	DUMP_JITED,
 	DUMP_XLATED,
