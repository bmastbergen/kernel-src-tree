net: ipv6: fib: flush exceptions when purging route

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [net] ipv6: fib: flush exceptions when purging route (Hangbin Liu) [1916084]
Rebuild_FUZZ: 94.85%
commit-author Sean Tranchetti <stranche@codeaurora.org>
commit d8f5c29653c3f6995e8979be5623d263e92f6b86
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d8f5c296.failed

Route removal is handled by two code paths. The main removal path is via
fib6_del_route() which will handle purging any PMTU exceptions from the
cache, removing all per-cpu copies of the DST entry used by the route, and
releasing the fib6_info struct.

The second removal location is during fib6_add_rt2node() during a route
replacement operation. This path also calls fib6_purge_rt() to handle
cleaning up the per-cpu copies of the DST entries and releasing the
fib6_info associated with the older route, but it does not flush any PMTU
exceptions that the older route had. Since the older route is removed from
the tree during the replacement, we lose any way of accessing it again.

As these lingering DSTs and the fib6_info struct are holding references to
the underlying netdevice struct as well, unregistering that device from the
kernel can never complete.

Fixes: 2b760fcf5cfb3 ("ipv6: hook up exception table to store dst cache")
	Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
	Reviewed-by: David Ahern <dsahern@kernel.org>
Link: https://lore.kernel.org/r/1609892546-11389-1-git-send-email-stranche@quicinc.com
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit d8f5c29653c3f6995e8979be5623d263e92f6b86)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_fib.c
diff --cc net/ipv6/ip6_fib.c
index 8d1e1d1602f1,f43e27555725..000000000000
--- a/net/ipv6/ip6_fib.c
+++ b/net/ipv6/ip6_fib.c
@@@ -1011,10 -1025,14 +1011,16 @@@ static void fib6_purge_rt(struct fib6_i
  {
  	struct fib6_table *table = rt->fib6_table;
  
++<<<<<<< HEAD
 +	if (rt->rt6i_pcpu)
 +		fib6_drop_pcpu_from(rt, table);
++=======
+ 	/* Flush all cached dst in exception table */
+ 	rt6_flush_exceptions(rt);
+ 	fib6_drop_pcpu_from(rt, table);
++>>>>>>> d8f5c29653c3 (net: ipv6: fib: flush exceptions when purging route)
  
 -	if (rt->nh && !list_empty(&rt->nh_list))
 -		list_del_init(&rt->nh_list);
 -
 -	if (refcount_read(&rt->fib6_ref) != 1) {
 +	if (atomic_read(&rt->fib6_ref) != 1) {
  		/* This route is used as dummy address holder in some split
  		 * nodes. It is not leaked, but it still holds other resources,
  		 * which must be released in time. So, scan ascendant nodes
* Unmerged path net/ipv6/ip6_fib.c
