x86/irq/64: Use cpu entry area instead of orig_ist

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit bf5882abab773afd1277415e2f826b21de28f30d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/bf5882ab.failed

The orig_ist[] array is a shadow copy of the IST array in the TSS. The
reason why it exists is that older kernels used two TSS variants with
different pointers into the debug stack. orig_ist[] contains the real
starting points.

There is no point anymore to do so because the same information can be
retrieved using the base address of the cpu entry area mapping and the
offsets of the various exception stacks.

No functional change. Preparation for removing orig_ist.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Nicolai Stange <nstange@suse.de>
	Cc: Sean Christopherson <sean.j.christopherson@intel.com>
	Cc: x86-ml <x86@kernel.org>
Link: https://lkml.kernel.org/r/20190414160144.885741626@linutronix.de
(cherry picked from commit bf5882abab773afd1277415e2f826b21de28f30d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/irq_64.c
diff --cc arch/x86/kernel/irq_64.c
index cf200466d5c8,7eb6f8d11bfd..000000000000
--- a/arch/x86/kernel/irq_64.c
+++ b/arch/x86/kernel/irq_64.c
@@@ -60,9 -61,9 +61,15 @@@ static inline void stack_overflow_check
  	if (regs->sp >= irq_stack_bottom && regs->sp <= irq_stack_top)
  		return;
  
++<<<<<<< HEAD
 +	oist = this_cpu_ptr(&orig_ist);
 +	estack_top = (u64)oist->ist[DEBUG_STACK];
 +	estack_bottom = estack_top - DEBUG_STKSZ + STACK_MARGIN;
++=======
+ 	estacks = __this_cpu_read(cea_exception_stacks);
+ 	estack_top = CEA_ESTACK_TOP(estacks, DB);
+ 	estack_bottom = CEA_ESTACK_BOT(estacks, DB) + STACK_MARGIN;
++>>>>>>> bf5882abab77 (x86/irq/64: Use cpu entry area instead of orig_ist)
  	if (regs->sp >= estack_bottom && regs->sp <= estack_top)
  		return;
  
* Unmerged path arch/x86/kernel/irq_64.c
