powerpc/xmon: Don't allow breakpoints on suffixes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jordan Niethe <jniethe5@gmail.com>
commit c9c831aebd8663d0129bbcee4d76be889f0627fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c9c831ae.failed

Do not allow placing xmon breakpoints on the suffix of a prefix
instruction.

	Signed-off-by: Jordan Niethe <jniethe5@gmail.com>
[mpe: Don't split printf strings across lines]
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200506034050.24806-27-jniethe5@gmail.com
(cherry picked from commit c9c831aebd8663d0129bbcee4d76be889f0627fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/xmon/xmon.c
diff --cc arch/powerpc/xmon/xmon.c
index 3ba3f8df7d8d,d1a79f9e0566..000000000000
--- a/arch/powerpc/xmon/xmon.c
+++ b/arch/powerpc/xmon/xmon.c
@@@ -833,8 -889,8 +833,13 @@@ static struct bpt *new_breakpoint(unsig
  static void insert_bpts(void)
  {
  	int i;
++<<<<<<< HEAD
 +	unsigned int instr;
 +	struct bpt *bp;
++=======
+ 	struct ppc_inst instr, instr2;
+ 	struct bpt *bp, *bp2;
++>>>>>>> c9c831aebd86 (powerpc/xmon: Don't allow breakpoints on suffixes)
  
  	bp = bpts;
  	for (i = 0; i < NBPTS; ++i, ++bp) {
@@@ -852,11 -908,36 +857,34 @@@
  			bp->enabled = 0;
  			continue;
  		}
+ 		/*
+ 		 * Check the address is not a suffix by looking for a prefix in
+ 		 * front of it.
+ 		 */
+ 		if (mread_instr(bp->address - 4, &instr2) == 8) {
+ 			printf("Breakpoint at %lx is on the second word of a prefixed instruction, disabling it\n",
+ 			       bp->address);
+ 			bp->enabled = 0;
+ 			continue;
+ 		}
+ 		/*
+ 		 * We might still be a suffix - if the prefix has already been
+ 		 * replaced by a breakpoint we won't catch it with the above
+ 		 * test.
+ 		 */
+ 		bp2 = at_breakpoint(bp->address - 4);
+ 		if (bp2 && ppc_inst_prefixed(ppc_inst_read(bp2->instr))) {
+ 			printf("Breakpoint at %lx is on the second word of a prefixed instruction, disabling it\n",
+ 			       bp->address);
+ 			bp->enabled = 0;
+ 			continue;
+ 		}
+ 
  		patch_instruction(bp->instr, instr);
 -		patch_instruction((void *)bp->instr + ppc_inst_len(instr),
 -				  ppc_inst(bpinstr));
  		if (bp->enabled & BP_CIABR)
  			continue;
 -		if (patch_instruction((struct ppc_inst *)bp->address,
 -				      ppc_inst(bpinstr)) != 0) {
 +		if (patch_instruction((unsigned int *)bp->address,
 +							bpinstr) != 0) {
  			printf("Couldn't write instruction at %lx, "
  			       "disabling breakpoint there\n", bp->address);
  			bp->enabled &= ~BP_TRAP;
* Unmerged path arch/powerpc/xmon/xmon.c
