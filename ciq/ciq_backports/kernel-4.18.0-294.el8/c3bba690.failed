kunit: subtests should be indented 4 spaces according to TAP

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Alan Maguire <alan.maguire@oracle.com>
commit c3bba690a2643245f59a4d5d66e6b687459696d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c3bba690.failed

Introduce KUNIT_SUBTEST_INDENT macro which corresponds to 4-space
indentation and KUNIT_SUBSUBTEST_INDENT macro which corresponds to
8-space indentation in line with TAP spec (e.g. see "Subtests"
section of https://node-tap.org/tap-protocol/).

Use these macros in place of one or two tabs in strings to clarify
why we are indenting.

	Suggested-by: Frank Rowand <frowand.list@gmail.com>
	Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
	Reviewed-by: Frank Rowand <frank.rowand@sony.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit c3bba690a2643245f59a4d5d66e6b687459696d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/kunit/test.h
#	lib/kunit/test.c
diff --cc include/kunit/test.h
index dba48304b3bd,9b0c46a6ca1f..000000000000
--- a/include/kunit/test.h
+++ b/include/kunit/test.h
@@@ -80,6 -81,17 +80,20 @@@ struct kunit_resource 
  
  struct kunit;
  
++<<<<<<< HEAD
++=======
+ /* Size of log associated with test. */
+ #define KUNIT_LOG_SIZE	512
+ 
+ /*
+  * TAP specifies subtest stream indentation of 4 spaces, 8 spaces for a
+  * sub-subtest.  See the "Subtests" section in
+  * https://node-tap.org/tap-protocol/
+  */
+ #define KUNIT_SUBTEST_INDENT		"    "
+ #define KUNIT_SUBSUBTEST_INDENT		"        "
+ 
++>>>>>>> c3bba690a264 (kunit: subtests should be indented 4 spaces according to TAP)
  /**
   * struct kunit_case - represents an individual test case.
   *
@@@ -339,8 -389,22 +353,27 @@@ static inline void *kunit_kzalloc(struc
  
  void kunit_cleanup(struct kunit *test);
  
++<<<<<<< HEAD
 +#define kunit_printk(lvl, test, fmt, ...) \
 +	printk(lvl "\t# %s: " fmt, (test)->name, ##__VA_ARGS__)
++=======
+ void kunit_log_append(char *log, const char *fmt, ...);
+ 
+ /*
+  * printk and log to per-test or per-suite log buffer.  Logging only done
+  * if CONFIG_KUNIT_DEBUGFS is 'y'; if it is 'n', no log is allocated/used.
+  */
+ #define kunit_log(lvl, test_or_suite, fmt, ...)				\
+ 	do {								\
+ 		printk(lvl fmt, ##__VA_ARGS__);				\
+ 		kunit_log_append((test_or_suite)->log,	fmt "\n",	\
+ 				 ##__VA_ARGS__);			\
+ 	} while (0)
+ 
+ #define kunit_printk(lvl, test, fmt, ...)				\
+ 	kunit_log(lvl, test, KUNIT_SUBTEST_INDENT "# %s: " fmt,		\
+ 		  (test)->name,	##__VA_ARGS__)
++>>>>>>> c3bba690a264 (kunit: subtests should be indented 4 spaces according to TAP)
  
  /**
   * kunit_info() - Prints an INFO level message associated with @test.
diff --cc lib/kunit/test.c
index 58a6227bb12c,7a6430a7fca0..000000000000
--- a/lib/kunit/test.c
+++ b/lib/kunit/test.c
@@@ -42,31 -69,40 +42,44 @@@ static size_t kunit_test_cases_len(stru
  static void kunit_print_subtest_start(struct kunit_suite *suite)
  {
  	kunit_print_tap_version();
++<<<<<<< HEAD
 +	pr_info("\t# Subtest: %s\n", suite->name);
 +	pr_info("\t1..%zd\n", kunit_test_cases_len(suite->test_cases));
++=======
+ 	kunit_log(KERN_INFO, suite, KUNIT_SUBTEST_INDENT "# Subtest: %s",
+ 		  suite->name);
+ 	kunit_log(KERN_INFO, suite, KUNIT_SUBTEST_INDENT "1..%zd",
+ 		  kunit_suite_num_test_cases(suite));
++>>>>>>> c3bba690a264 (kunit: subtests should be indented 4 spaces according to TAP)
  }
  
 -static void kunit_print_ok_not_ok(void *test_or_suite,
 -				  bool is_test,
 +static void kunit_print_ok_not_ok(bool should_indent,
  				  bool is_ok,
  				  size_t test_number,
  				  const char *description)
  {
 -	struct kunit_suite *suite = is_test ? NULL : test_or_suite;
 -	struct kunit *test = is_test ? test_or_suite : NULL;
 +	const char *indent, *ok_not_ok;
  
 -	/*
 -	 * We do not log the test suite results as doing so would
 -	 * mean debugfs display would consist of the test suite
 -	 * description and status prior to individual test results.
 -	 * Hence directly printk the suite status, and we will
 -	 * separately seq_printf() the suite status for the debugfs
 -	 * representation.
 -	 */
 -	if (suite)
 -		pr_info("%s %zd - %s",
 -			kunit_status_to_string(is_ok),
 -			test_number, description);
 +	if (should_indent)
 +		indent = "\t";
 +	else
++<<<<<<< HEAD
 +		indent = "";
 +
 +	if (is_ok)
 +		ok_not_ok = "ok";
  	else
 +		ok_not_ok = "not ok";
 +
 +	pr_info("%s%s %zd - %s\n", indent, ok_not_ok, test_number, description);
++=======
+ 		kunit_log(KERN_INFO, test, KUNIT_SUBTEST_INDENT "%s %zd - %s",
+ 			  kunit_status_to_string(is_ok),
+ 			  test_number, description);
++>>>>>>> c3bba690a264 (kunit: subtests should be indented 4 spaces according to TAP)
  }
  
 -bool kunit_suite_has_succeeded(struct kunit_suite *suite)
 +static bool kunit_suite_has_succeeded(struct kunit_suite *suite)
  {
  	const struct kunit_case *test_case;
  
* Unmerged path include/kunit/test.h
diff --git a/lib/kunit/assert.c b/lib/kunit/assert.c
index 2860a8137d04..4d1df7f5bb46 100644
--- a/lib/kunit/assert.c
+++ b/lib/kunit/assert.c
@@ -6,6 +6,7 @@
  * Author: Brendan Higgins <brendanhiggins@google.com>
  */
 #include <kunit/assert.h>
+#include <kunit/test.h>
 
 #include "string-stream.h"
 
@@ -50,12 +51,12 @@ void kunit_unary_assert_format(const struct kunit_assert *assert,
 	kunit_base_assert_format(assert, stream);
 	if (unary_assert->expected_true)
 		string_stream_add(stream,
-				 "\tExpected %s to be true, but is false\n",
-				 unary_assert->condition);
+				  KUNIT_SUBTEST_INDENT "Expected %s to be true, but is false\n",
+				  unary_assert->condition);
 	else
 		string_stream_add(stream,
-				 "\tExpected %s to be false, but is true\n",
-				 unary_assert->condition);
+				  KUNIT_SUBTEST_INDENT "Expected %s to be false, but is true\n",
+				  unary_assert->condition);
 	kunit_assert_print_msg(assert, stream);
 }
 
@@ -68,13 +69,13 @@ void kunit_ptr_not_err_assert_format(const struct kunit_assert *assert,
 	kunit_base_assert_format(assert, stream);
 	if (!ptr_assert->value) {
 		string_stream_add(stream,
-				 "\tExpected %s is not null, but is\n",
-				 ptr_assert->text);
+				  KUNIT_SUBTEST_INDENT "Expected %s is not null, but is\n",
+				  ptr_assert->text);
 	} else if (IS_ERR(ptr_assert->value)) {
 		string_stream_add(stream,
-				 "\tExpected %s is not error, but is: %ld\n",
-				 ptr_assert->text,
-				 PTR_ERR(ptr_assert->value));
+				  KUNIT_SUBTEST_INDENT "Expected %s is not error, but is: %ld\n",
+				  ptr_assert->text,
+				  PTR_ERR(ptr_assert->value));
 	}
 	kunit_assert_print_msg(assert, stream);
 }
@@ -87,16 +88,16 @@ void kunit_binary_assert_format(const struct kunit_assert *assert,
 
 	kunit_base_assert_format(assert, stream);
 	string_stream_add(stream,
-			 "\tExpected %s %s %s, but\n",
-			 binary_assert->left_text,
-			 binary_assert->operation,
-			 binary_assert->right_text);
-	string_stream_add(stream, "\t\t%s == %lld\n",
-			 binary_assert->left_text,
-			 binary_assert->left_value);
-	string_stream_add(stream, "\t\t%s == %lld",
-			 binary_assert->right_text,
-			 binary_assert->right_value);
+			  KUNIT_SUBTEST_INDENT "Expected %s %s %s, but\n",
+			  binary_assert->left_text,
+			  binary_assert->operation,
+			  binary_assert->right_text);
+	string_stream_add(stream, KUNIT_SUBSUBTEST_INDENT "%s == %lld\n",
+			  binary_assert->left_text,
+			  binary_assert->left_value);
+	string_stream_add(stream, KUNIT_SUBSUBTEST_INDENT "%s == %lld",
+			  binary_assert->right_text,
+			  binary_assert->right_value);
 	kunit_assert_print_msg(assert, stream);
 }
 
@@ -108,16 +109,16 @@ void kunit_binary_ptr_assert_format(const struct kunit_assert *assert,
 
 	kunit_base_assert_format(assert, stream);
 	string_stream_add(stream,
-			 "\tExpected %s %s %s, but\n",
-			 binary_assert->left_text,
-			 binary_assert->operation,
-			 binary_assert->right_text);
-	string_stream_add(stream, "\t\t%s == %px\n",
-			 binary_assert->left_text,
-			 binary_assert->left_value);
-	string_stream_add(stream, "\t\t%s == %px",
-			 binary_assert->right_text,
-			 binary_assert->right_value);
+			  KUNIT_SUBTEST_INDENT "Expected %s %s %s, but\n",
+			  binary_assert->left_text,
+			  binary_assert->operation,
+			  binary_assert->right_text);
+	string_stream_add(stream, KUNIT_SUBSUBTEST_INDENT "%s == %px\n",
+			  binary_assert->left_text,
+			  binary_assert->left_value);
+	string_stream_add(stream, KUNIT_SUBSUBTEST_INDENT "%s == %px",
+			  binary_assert->right_text,
+			  binary_assert->right_value);
 	kunit_assert_print_msg(assert, stream);
 }
 
@@ -129,15 +130,15 @@ void kunit_binary_str_assert_format(const struct kunit_assert *assert,
 
 	kunit_base_assert_format(assert, stream);
 	string_stream_add(stream,
-			 "\tExpected %s %s %s, but\n",
-			 binary_assert->left_text,
-			 binary_assert->operation,
-			 binary_assert->right_text);
-	string_stream_add(stream, "\t\t%s == %s\n",
-			 binary_assert->left_text,
-			 binary_assert->left_value);
-	string_stream_add(stream, "\t\t%s == %s",
-			 binary_assert->right_text,
-			 binary_assert->right_value);
+			  KUNIT_SUBTEST_INDENT "Expected %s %s %s, but\n",
+			  binary_assert->left_text,
+			  binary_assert->operation,
+			  binary_assert->right_text);
+	string_stream_add(stream, KUNIT_SUBSUBTEST_INDENT "%s == %s\n",
+			  binary_assert->left_text,
+			  binary_assert->left_value);
+	string_stream_add(stream, KUNIT_SUBSUBTEST_INDENT "%s == %s",
+			  binary_assert->right_text,
+			  binary_assert->right_value);
 	kunit_assert_print_msg(assert, stream);
 }
* Unmerged path lib/kunit/test.c
diff --git a/tools/testing/kunit/kunit_parser.py b/tools/testing/kunit/kunit_parser.py
index 02815062d5a6..64aac9dcd431 100644
--- a/tools/testing/kunit/kunit_parser.py
+++ b/tools/testing/kunit/kunit_parser.py
@@ -94,7 +94,7 @@ def print_log(log):
 	for m in log:
 		print_with_timestamp(m)
 
-TAP_ENTRIES = re.compile(r'^(TAP|\t?ok|\t?not ok|\t?[0-9]+\.\.[0-9]+|\t?#).*$')
+TAP_ENTRIES = re.compile(r'^(TAP|[\s]*ok|[\s]*not ok|[\s]*[0-9]+\.\.[0-9]+|[\s]*#).*$')
 
 def consume_non_diagnositic(lines: List[str]) -> None:
 	while lines and not TAP_ENTRIES.match(lines[0]):
@@ -107,7 +107,7 @@ def save_non_diagnositic(lines: List[str], test_case: TestCase) -> None:
 
 OkNotOkResult = namedtuple('OkNotOkResult', ['is_ok','description', 'text'])
 
-OK_NOT_OK_SUBTEST = re.compile(r'^\t(ok|not ok) [0-9]+ - (.*)$')
+OK_NOT_OK_SUBTEST = re.compile(r'^[\s]+(ok|not ok) [0-9]+ - (.*)$')
 
 OK_NOT_OK_MODULE = re.compile(r'^(ok|not ok) [0-9]+ - (.*)$')
 
@@ -134,7 +134,7 @@ def parse_ok_not_ok_test_case(lines: List[str], test_case: TestCase) -> bool:
 	else:
 		return False
 
-SUBTEST_DIAGNOSTIC = re.compile(r'^\t# .*?: (.*)$')
+SUBTEST_DIAGNOSTIC = re.compile(r'^[\s]+# .*?: (.*)$')
 DIAGNOSTIC_CRASH_MESSAGE = 'kunit test case crashed!'
 
 def parse_diagnostic(lines: List[str], test_case: TestCase) -> bool:
@@ -161,7 +161,7 @@ def parse_test_case(lines: List[str]) -> TestCase:
 	else:
 		return None
 
-SUBTEST_HEADER = re.compile(r'^\t# Subtest: (.*)$')
+SUBTEST_HEADER = re.compile(r'^[\s]+# Subtest: (.*)$')
 
 def parse_subtest_header(lines: List[str]) -> str:
 	consume_non_diagnositic(lines)
@@ -174,7 +174,7 @@ def parse_subtest_header(lines: List[str]) -> str:
 	else:
 		return None
 
-SUBTEST_PLAN = re.compile(r'\t[0-9]+\.\.([0-9]+)')
+SUBTEST_PLAN = re.compile(r'[\s]+[0-9]+\.\.([0-9]+)')
 
 def parse_subtest_plan(lines: List[str]) -> int:
 	consume_non_diagnositic(lines)
