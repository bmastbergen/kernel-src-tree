net, xsk: Avoid taking multiple skbuff references

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Björn Töpel <bjorn.topel@intel.com>
commit 36ccdf85829a7dd6936dba5d02fa50138471f0d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/36ccdf85.failed

Commit 642e450b6b59 ("xsk: Do not discard packet when NETDEV_TX_BUSY")
addressed the problem that packets were discarded from the Tx AF_XDP
ring, when the driver returned NETDEV_TX_BUSY. Part of the fix was
bumping the skbuff reference count, so that the buffer would not be
freed by dev_direct_xmit(). A reference count larger than one means
that the skbuff is "shared", which is not the case.

If the "shared" skbuff is sent to the generic XDP receive path,
netif_receive_generic_xdp(), and pskb_expand_head() is entered the
BUG_ON(skb_shared(skb)) will trigger.

This patch adds a variant to dev_direct_xmit(), __dev_direct_xmit(),
where a user can select the skbuff free policy. This allows AF_XDP to
avoid bumping the reference count, but still keep the NETDEV_TX_BUSY
behavior.

Fixes: 642e450b6b59 ("xsk: Do not discard packet when NETDEV_TX_BUSY")
	Reported-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Björn Töpel <bjorn.topel@intel.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20201123175600.146255-1-bjorn.topel@gmail.com
(cherry picked from commit 36ccdf85829a7dd6936dba5d02fa50138471f0d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
diff --cc include/linux/netdevice.h
index 9bd71ddf715b,76775abf259d..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -2853,14 -2810,24 +2853,30 @@@ void dev_close_many(struct list_head *h
  void dev_disable_lro(struct net_device *dev);
  int dev_loopback_xmit(struct net *net, struct sock *sk, struct sk_buff *newskb);
  u16 dev_pick_tx_zero(struct net_device *dev, struct sk_buff *skb,
 -		     struct net_device *sb_dev);
 +		     struct net_device *sb_dev,
 +		     select_queue_fallback_t fallback);
  u16 dev_pick_tx_cpu_id(struct net_device *dev, struct sk_buff *skb,
++<<<<<<< HEAD
 +		       struct net_device *sb_dev,
 +		       select_queue_fallback_t fallback);
++=======
+ 		       struct net_device *sb_dev);
+ 
++>>>>>>> 36ccdf85829a (net, xsk: Avoid taking multiple skbuff references)
  int dev_queue_xmit(struct sk_buff *skb);
  int dev_queue_xmit_accel(struct sk_buff *skb, struct net_device *sb_dev);
- int dev_direct_xmit(struct sk_buff *skb, u16 queue_id);
+ int __dev_direct_xmit(struct sk_buff *skb, u16 queue_id);
+ 
+ static inline int dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
+ {
+ 	int ret;
+ 
+ 	ret = __dev_direct_xmit(skb, queue_id);
+ 	if (!dev_xmit_complete(ret))
+ 		kfree_skb(skb);
+ 	return ret;
+ }
+ 
  int register_netdevice(struct net_device *dev);
  void unregister_netdevice_queue(struct net_device *dev, struct list_head *head);
  void unregister_netdevice_many(struct list_head *head);
* Unmerged path include/linux/netdevice.h
diff --git a/net/core/dev.c b/net/core/dev.c
index 2b8d3ed7a4a2..80ec98644316 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3978,7 +3978,7 @@ int dev_queue_xmit_accel(struct sk_buff *skb, struct net_device *sb_dev)
 }
 EXPORT_SYMBOL(dev_queue_xmit_accel);
 
-int dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
+int __dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
 {
 	struct net_device *dev = skb->dev;
 	struct sk_buff *orig_skb = skb;
@@ -4007,17 +4007,13 @@ int dev_direct_xmit(struct sk_buff *skb, u16 queue_id)
 	dev_xmit_recursion_dec();
 
 	local_bh_enable();
-
-	if (!dev_xmit_complete(ret))
-		kfree_skb(skb);
-
 	return ret;
 drop:
 	atomic_long_inc(&dev->tx_dropped);
 	kfree_skb_list(skb);
 	return NET_XMIT_DROP;
 }
-EXPORT_SYMBOL(dev_direct_xmit);
+EXPORT_SYMBOL(__dev_direct_xmit);
 
 /*************************************************************************
  *			Receiver routines
diff --git a/net/xdp/xsk.c b/net/xdp/xsk.c
index 3b7e6fdbfd03..c9008a4d1ecf 100644
--- a/net/xdp/xsk.c
+++ b/net/xdp/xsk.c
@@ -422,11 +422,7 @@ static int xsk_generic_xmit(struct sock *sk)
 		skb_shinfo(skb)->destructor_arg = (void *)(long)desc.addr;
 		skb->destructor = xsk_destruct_skb;
 
-		/* Hinder dev_direct_xmit from freeing the packet and
-		 * therefore completing it in the destructor
-		 */
-		refcount_inc(&skb->users);
-		err = dev_direct_xmit(skb, xs->queue_id);
+		err = __dev_direct_xmit(skb, xs->queue_id);
 		if  (err == NETDEV_TX_BUSY) {
 			/* Tell user-space to retry the send */
 			skb->destructor = sock_wfree;
@@ -440,12 +436,10 @@ static int xsk_generic_xmit(struct sock *sk)
 		/* Ignore NET_XMIT_CN as packet might have been sent */
 		if (err == NET_XMIT_DROP) {
 			/* SKB completed but not sent */
-			kfree_skb(skb);
 			err = -EBUSY;
 			goto out;
 		}
 
-		consume_skb(skb);
 		sent_frame = true;
 	}
 
