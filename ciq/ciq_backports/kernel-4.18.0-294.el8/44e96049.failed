driver core: Fix handling of SYNC_STATE_ONLY + STATELESS device links

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Saravana Kannan <saravanak@google.com>
commit 44e960490ddf868fc9135151c4a658936e771dc2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/44e96049.failed

Commit 21c27f06587d ("driver core: Fix SYNC_STATE_ONLY device link
implementation") didn't completely fix STATELESS + SYNC_STATE_ONLY
handling.

What looks like an optimization in that commit is actually a bug that
causes an if condition to always take the else path. This prevents
reordering of devices in the dpm_list when a DL_FLAG_STATELESS device
link is create on top of an existing DL_FLAG_SYNC_STATE_ONLY device
link.

Fixes: 21c27f06587d ("driver core: Fix SYNC_STATE_ONLY device link implementation")
	Signed-off-by: Saravana Kannan <saravanak@google.com>
	Cc: stable <stable@vger.kernel.org>
	Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Link: https://lore.kernel.org/r/20200520043626.181820-1-saravanak@google.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 44e960490ddf868fc9135151c4a658936e771dc2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index a7a93bf98225,0cad34f1eede..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -348,6 -365,7 +348,10 @@@ struct device_link *device_link_add(str
  				link->flags |= DL_FLAG_STATELESS;
  				goto reorder;
  			} else {
++<<<<<<< HEAD
++=======
+ 				link->flags |= DL_FLAG_STATELESS;
++>>>>>>> 44e960490ddf (driver core: Fix handling of SYNC_STATE_ONLY + STATELESS device links)
  				goto out;
  			}
  		}
* Unmerged path drivers/base/core.c
