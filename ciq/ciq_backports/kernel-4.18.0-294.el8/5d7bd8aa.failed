thermal: Simplify or eliminate unnecessary set_mode() methods

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrzej Pietrasiewicz <andrzej.p@collabora.com>
commit 5d7bd8aa7c35873f448d60ffbd996cfa151d2a11
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5d7bd8aa.failed

Setting polling_delay is now done at thermal_core level (by not polling
DISABLED devices), so no need to repeat this code.

int340x: Checking for an impossible enum value is unnecessary.
acpi/thermal: It only prints debug messages.

	Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@collabora.com>
[for acerhdf]
	Acked-by: Peter Kaestle <peter@piie.net>
	Reviewed-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
	Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
	Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
Link: https://lore.kernel.org/r/20200629122925.21729-11-andrzej.p@collabora.com
(cherry picked from commit 5d7bd8aa7c35873f448d60ffbd996cfa151d2a11)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/thermal.c
#	drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
#	drivers/platform/x86/acerhdf.c
#	drivers/thermal/intel/int340x_thermal/int3400_thermal.c
#	drivers/thermal/of-thermal.c
diff --cc drivers/acpi/thermal.c
index c7f63ddabf88,29a2b73fe035..000000000000
--- a/drivers/acpi/thermal.c
+++ b/drivers/acpi/thermal.c
@@@ -539,34 -525,6 +539,37 @@@ static int thermal_get_temp(struct ther
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int thermal_set_mode(struct thermal_zone_device *thermal,
 +				enum thermal_device_mode mode)
 +{
 +	struct acpi_thermal *tz = thermal->devdata;
 +
 +	if (!tz)
 +		return -EINVAL;
 +
 +	if (mode != THERMAL_DEVICE_DISABLED &&
 +	    mode != THERMAL_DEVICE_ENABLED)
 +		return -EINVAL;
 +	/*
 +	 * enable/disable thermal management from ACPI thermal driver
 +	 */
 +	if (mode == THERMAL_DEVICE_DISABLED)
 +		pr_warn("thermal zone will be disabled\n");
 +
 +	if (mode != tz->thermal_zone->mode) {
 +		tz->thermal_zone->mode = mode;
 +		ACPI_DEBUG_PRINT((ACPI_DB_INFO,
 +			"%s kernel ACPI thermal control\n",
 +			tz->thermal_zone->mode == THERMAL_DEVICE_ENABLED ?
 +			"Enable" : "Disable"));
 +		acpi_thermal_check(tz);
 +	}
 +	return 0;
 +}
 +
++=======
++>>>>>>> 5d7bd8aa7c35 (thermal: Simplify or eliminate unnecessary set_mode() methods)
  static int thermal_get_trip_type(struct thermal_zone_device *thermal,
  				 int trip, enum thermal_trip_type *type)
  {
diff --cc drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
index 6e26678ac312,8fa286ccdd6b..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
@@@ -275,26 -275,6 +275,29 @@@ static int mlxsw_thermal_unbind(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int mlxsw_thermal_set_mode(struct thermal_zone_device *tzdev,
 +				  enum thermal_device_mode mode)
 +{
 +	struct mlxsw_thermal *thermal = tzdev->devdata;
 +
 +	mutex_lock(&tzdev->lock);
 +
 +	if (mode == THERMAL_DEVICE_ENABLED)
 +		tzdev->polling_delay = thermal->polling_delay;
 +	else
 +		tzdev->polling_delay = 0;
 +
 +	tzdev->mode = mode;
 +	mutex_unlock(&tzdev->lock);
 +
 +	thermal_zone_device_update(tzdev, THERMAL_EVENT_UNSPECIFIED);
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 5d7bd8aa7c35 (thermal: Simplify or eliminate unnecessary set_mode() methods)
  static int mlxsw_thermal_get_temp(struct thermal_zone_device *tzdev,
  				  int *p_temp)
  {
@@@ -453,28 -431,6 +455,31 @@@ static int mlxsw_thermal_module_unbind(
  	return err;
  }
  
++<<<<<<< HEAD
 +static int mlxsw_thermal_module_mode_set(struct thermal_zone_device *tzdev,
 +					 enum thermal_device_mode mode)
 +{
 +	struct mlxsw_thermal_module *tz = tzdev->devdata;
 +	struct mlxsw_thermal *thermal = tz->parent;
 +
 +	mutex_lock(&tzdev->lock);
 +
 +	if (mode == THERMAL_DEVICE_ENABLED)
 +		tzdev->polling_delay = thermal->polling_delay;
 +	else
 +		tzdev->polling_delay = 0;
 +
 +	tzdev->mode = mode;
 +
 +	mutex_unlock(&tzdev->lock);
 +
 +	thermal_zone_device_update(tzdev, THERMAL_EVENT_UNSPECIFIED);
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 5d7bd8aa7c35 (thermal: Simplify or eliminate unnecessary set_mode() methods)
  static int mlxsw_thermal_module_temp_get(struct thermal_zone_device *tzdev,
  					 int *p_temp)
  {
diff --cc drivers/platform/x86/acerhdf.c
index d9c67de8991c,76323855c80c..000000000000
--- a/drivers/platform/x86/acerhdf.c
+++ b/drivers/platform/x86/acerhdf.c
@@@ -396,19 -397,13 +396,26 @@@ static inline void acerhdf_revert_to_bi
  {
  	acerhdf_change_fanstate(ACERHDF_FAN_AUTO);
  	kernelmode = 0;
++<<<<<<< HEAD
 +	if (thz_dev) {
 +		thz_dev->mode = THERMAL_DEVICE_DISABLED;
 +		thz_dev->polling_delay = 0;
 +	}
++=======
+ 
++>>>>>>> 5d7bd8aa7c35 (thermal: Simplify or eliminate unnecessary set_mode() methods)
  	pr_notice("kernel mode fan control OFF\n");
  }
  static inline void acerhdf_enable_kernelmode(void)
  {
  	kernelmode = 1;
 +	thz_dev->mode = THERMAL_DEVICE_ENABLED;
  
++<<<<<<< HEAD
 +	thz_dev->polling_delay = interval*1000;
 +	thermal_zone_device_update(thz_dev, THERMAL_EVENT_UNSPECIFIED);
++=======
++>>>>>>> 5d7bd8aa7c35 (thermal: Simplify or eliminate unnecessary set_mode() methods)
  	pr_notice("kernel mode fan control ON\n");
  }
  
diff --cc drivers/thermal/intel/int340x_thermal/int3400_thermal.c
index 186ee9a79d55,ce49d3b100d5..000000000000
--- a/drivers/thermal/intel/int340x_thermal/int3400_thermal.c
+++ b/drivers/thermal/intel/int340x_thermal/int3400_thermal.c
@@@ -395,12 -386,7 +395,16 @@@ static int int3400_thermal_set_mode(str
  	if (!priv)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (mode != THERMAL_DEVICE_ENABLED &&
 +	    mode != THERMAL_DEVICE_DISABLED)
 +		return -EINVAL;
 +
 +	if (mode != thermal->mode) {
 +		thermal->mode = mode;
++=======
+ 	if (mode != thermal->mode)
++>>>>>>> 5d7bd8aa7c35 (thermal: Simplify or eliminate unnecessary set_mode() methods)
  		result = int3400_thermal_run_osc(priv->adev->handle,
  						priv->current_uuid_index,
  						mode == THERMAL_DEVICE_ENABLED);
diff --cc drivers/thermal/of-thermal.c
index bcd6a66fdc52,69ef12f852b7..000000000000
--- a/drivers/thermal/of-thermal.c
+++ b/drivers/thermal/of-thermal.c
@@@ -241,29 -267,6 +241,32 @@@ static int of_thermal_unbind(struct the
  	return 0;
  }
  
++<<<<<<< HEAD:drivers/thermal/of-thermal.c
 +static int of_thermal_set_mode(struct thermal_zone_device *tz,
 +			       enum thermal_device_mode mode)
 +{
 +	struct __thermal_zone *data = tz->devdata;
 +
 +	mutex_lock(&tz->lock);
 +
 +	if (mode == THERMAL_DEVICE_ENABLED) {
 +		tz->polling_delay = data->polling_delay;
 +		tz->passive_delay = data->passive_delay;
 +	} else {
 +		tz->polling_delay = 0;
 +		tz->passive_delay = 0;
 +	}
 +
 +	mutex_unlock(&tz->lock);
 +
 +	tz->mode = mode;
 +	thermal_zone_device_update(tz, THERMAL_EVENT_UNSPECIFIED);
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 5d7bd8aa7c35 (thermal: Simplify or eliminate unnecessary set_mode() methods):drivers/thermal/thermal_of.c
  static int of_thermal_get_trip_type(struct thermal_zone_device *tz, int trip,
  				    enum thermal_trip_type *type)
  {
* Unmerged path drivers/acpi/thermal.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/core_thermal.c
* Unmerged path drivers/platform/x86/acerhdf.c
diff --git a/drivers/thermal/imx_thermal.c b/drivers/thermal/imx_thermal.c
index cad9a511faad..5f2c1b1bc561 100644
--- a/drivers/thermal/imx_thermal.c
+++ b/drivers/thermal/imx_thermal.c
@@ -344,9 +344,6 @@ static int imx_set_mode(struct thermal_zone_device *tz,
 	const struct thermal_soc_data *soc_data = data->socdata;
 
 	if (mode == THERMAL_DEVICE_ENABLED) {
-		tz->polling_delay = IMX_POLLING_DELAY;
-		tz->passive_delay = IMX_PASSIVE_DELAY;
-
 		regmap_write(map, soc_data->sensor_ctrl + REG_CLR,
 			     soc_data->power_down_mask);
 		regmap_write(map, soc_data->sensor_ctrl + REG_SET,
@@ -362,9 +359,6 @@ static int imx_set_mode(struct thermal_zone_device *tz,
 		regmap_write(map, soc_data->sensor_ctrl + REG_SET,
 			     soc_data->power_down_mask);
 
-		tz->polling_delay = 0;
-		tz->passive_delay = 0;
-
 		if (data->irq_enabled) {
 			disable_irq(data->irq);
 			data->irq_enabled = false;
* Unmerged path drivers/thermal/intel/int340x_thermal/int3400_thermal.c
* Unmerged path drivers/thermal/of-thermal.c
