dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Alexandru Ardelean <alexandru.ardelean@analog.com>
commit 41d00bb7a60fadbae76e1826bd27a320e18c769f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/41d00bb7.failed

This is just a cosmetic change, since this variable gets used quite a bit
inside the dmatest_func() routine.

	Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
	Signed-off-by: Vinod Koul <vkoul@kernel.org>
(cherry picked from commit 41d00bb7a60fadbae76e1826bd27a320e18c769f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/dmatest.c
diff --cc drivers/dma/dmatest.c
index 6511928b4cdf,3b148c2647f8..000000000000
--- a/drivers/dma/dmatest.c
+++ b/drivers/dma/dmatest.c
@@@ -511,8 -516,9 +511,14 @@@ static int dmatest_func(void *data
  	enum dma_ctrl_flags 	flags;
  	u8			*pq_coefs = NULL;
  	int			ret;
++<<<<<<< HEAD
 +	int			src_cnt;
 +	int			dst_cnt;
++=======
+ 	unsigned int 		buf_size;
+ 	struct dmatest_data	*src;
+ 	struct dmatest_data	*dst;
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  	int			i;
  	ktime_t			ktime, start, diff;
  	ktime_t			filltime = 0;
@@@ -579,40 -588,40 +586,50 @@@
  		goto err_free_coefs;
  	}
  
 -	src->aligned = kcalloc(src->cnt + 1, sizeof(u8 *), GFP_KERNEL);
 -	if (!src->aligned)
 +	thread->srcs = kcalloc(src_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->srcs)
  		goto err_free_coefs;
  
 -	src->raw = kcalloc(src->cnt + 1, sizeof(u8 *), GFP_KERNEL);
 -	if (!src->raw)
 +	thread->usrcs = kcalloc(src_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->usrcs)
  		goto err_usrcs;
  
++<<<<<<< HEAD
 +	for (i = 0; i < src_cnt; i++) {
 +		thread->usrcs[i] = kmalloc(params->buf_size + align,
++=======
+ 	for (i = 0; i < src->cnt; i++) {
+ 		src->raw[i] = kmalloc(buf_size + align,
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  					   GFP_KERNEL);
 -		if (!src->raw[i])
 +		if (!thread->usrcs[i])
  			goto err_srcbuf;
  
  		/* align srcs to alignment restriction */
  		if (align)
 -			src->aligned[i] = PTR_ALIGN(src->raw[i], align);
 +			thread->srcs[i] = PTR_ALIGN(thread->usrcs[i], align);
  		else
 -			src->aligned[i] = src->raw[i];
 +			thread->srcs[i] = thread->usrcs[i];
  	}
 -	src->aligned[i] = NULL;
 +	thread->srcs[i] = NULL;
  
 -	dst->aligned = kcalloc(dst->cnt + 1, sizeof(u8 *), GFP_KERNEL);
 -	if (!dst->aligned)
 +	thread->dsts = kcalloc(dst_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->dsts)
  		goto err_dsts;
  
 -	dst->raw = kcalloc(dst->cnt + 1, sizeof(u8 *), GFP_KERNEL);
 -	if (!dst->raw)
 +	thread->udsts = kcalloc(dst_cnt + 1, sizeof(u8 *), GFP_KERNEL);
 +	if (!thread->udsts)
  		goto err_udsts;
  
++<<<<<<< HEAD
 +	for (i = 0; i < dst_cnt; i++) {
 +		thread->udsts[i] = kmalloc(params->buf_size + align,
++=======
+ 	for (i = 0; i < dst->cnt; i++) {
+ 		dst->raw[i] = kmalloc(buf_size + align,
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  					   GFP_KERNEL);
 -		if (!dst->raw[i])
 +		if (!thread->udsts[i])
  			goto err_dstbuf;
  
  		/* align dsts to alignment restriction */
@@@ -670,22 -679,22 +687,34 @@@
  		total_len += len;
  
  		if (params->norandom) {
 -			src->off = 0;
 -			dst->off = 0;
 +			src_off = 0;
 +			dst_off = 0;
  		} else {
++<<<<<<< HEAD
 +			src_off = dmatest_random() % (params->buf_size - len + 1);
 +			dst_off = dmatest_random() % (params->buf_size - len + 1);
++=======
+ 			src->off = dmatest_random() % (buf_size - len + 1);
+ 			dst->off = dmatest_random() % (buf_size - len + 1);
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  
 -			src->off = (src->off >> align) << align;
 -			dst->off = (dst->off >> align) << align;
 +			src_off = (src_off >> align) << align;
 +			dst_off = (dst_off >> align) << align;
  		}
  
  		if (!params->noverify) {
  			start = ktime_get();
++<<<<<<< HEAD
 +			dmatest_init_srcs(thread->srcs, src_off, len,
 +					  params->buf_size, is_memset);
 +			dmatest_init_dsts(thread->dsts, dst_off, len,
 +					  params->buf_size, is_memset);
++=======
+ 			dmatest_init_srcs(src->aligned, src->off, len,
+ 					  buf_size, is_memset);
+ 			dmatest_init_dsts(dst->aligned, dst->off, len,
+ 					  buf_size, is_memset);
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  
  			diff = ktime_sub(ktime_get(), start);
  			filltime = ktime_add(filltime, diff);
@@@ -700,9 -709,9 +729,15 @@@
  			continue;
  		}
  
++<<<<<<< HEAD
 +		um->len = params->buf_size;
 +		for (i = 0; i < src_cnt; i++) {
 +			void *buf = thread->srcs[i];
++=======
+ 		um->len = buf_size;
+ 		for (i = 0; i < src->cnt; i++) {
+ 			void *buf = src->aligned[i];
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  			struct page *pg = virt_to_page(buf);
  			unsigned long pg_off = offset_in_page(buf);
  
@@@ -804,25 -823,25 +839,35 @@@
  
  		start = ktime_get();
  		pr_debug("%s: verifying source buffer...\n", current->comm);
 -		error_count = dmatest_verify(src->aligned, 0, src->off,
 +		error_count = dmatest_verify(thread->srcs, 0, src_off,
  				0, PATTERN_SRC, true, is_memset);
 -		error_count += dmatest_verify(src->aligned, src->off,
 -				src->off + len, src->off,
 +		error_count += dmatest_verify(thread->srcs, src_off,
 +				src_off + len, src_off,
  				PATTERN_SRC | PATTERN_COPY, true, is_memset);
++<<<<<<< HEAD
 +		error_count += dmatest_verify(thread->srcs, src_off + len,
 +				params->buf_size, src_off + len,
++=======
+ 		error_count += dmatest_verify(src->aligned, src->off + len,
+ 				buf_size, src->off + len,
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  				PATTERN_SRC, true, is_memset);
  
  		pr_debug("%s: verifying dest buffer...\n", current->comm);
 -		error_count += dmatest_verify(dst->aligned, 0, dst->off,
 +		error_count += dmatest_verify(thread->dsts, 0, dst_off,
  				0, PATTERN_DST, false, is_memset);
  
 -		error_count += dmatest_verify(dst->aligned, dst->off,
 -				dst->off + len, src->off,
 +		error_count += dmatest_verify(thread->dsts, dst_off,
 +				dst_off + len, src_off,
  				PATTERN_SRC | PATTERN_COPY, false, is_memset);
  
++<<<<<<< HEAD
 +		error_count += dmatest_verify(thread->dsts, dst_off + len,
 +				params->buf_size, dst_off + len,
++=======
+ 		error_count += dmatest_verify(dst->aligned, dst->off + len,
+ 				buf_size, dst->off + len,
++>>>>>>> 41d00bb7a60f (dmaengine: dmatest: add short-hand `buf_size` var in dmatest_func())
  				PATTERN_DST, false, is_memset);
  
  		diff = ktime_sub(ktime_get(), start);
* Unmerged path drivers/dma/dmatest.c
