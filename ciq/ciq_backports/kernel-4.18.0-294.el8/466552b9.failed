scsi: core: add scsi_host_complete_all_commands() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Hannes Reinecke <hare@suse.de>
commit 466552b9f3730f06fee75776a208f5fa9c06c6a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/466552b9.failed

Add a helper scsi_host_complete_all_commands() to terminate all outstanding
commands on a SCSI host.

Link: https://lore.kernel.org/r/20200228075318.91255-3-hare@suse.de
	Signed-off-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 466552b9f3730f06fee75776a208f5fa9c06c6a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/scsi/scsi_host.h
diff --cc include/scsi/scsi_host.h
index 511ce2463613,25bef781cbe1..000000000000
--- a/include/scsi/scsi_host.h
+++ b/include/scsi/scsi_host.h
@@@ -777,7 -732,8 +777,12 @@@ extern int scsi_host_busy(struct Scsi_H
  extern void scsi_host_put(struct Scsi_Host *t);
  extern struct Scsi_Host *scsi_host_lookup(unsigned short);
  extern const char *scsi_host_state_name(enum scsi_host_state);
++<<<<<<< HEAD
 +extern void scsi_cmd_get_serial(struct Scsi_Host *, struct scsi_cmnd *);
++=======
+ extern void scsi_host_complete_all_commands(struct Scsi_Host *shost,
+ 					    int status);
++>>>>>>> 466552b9f373 (scsi: core: add scsi_host_complete_all_commands() helper)
  
  static inline int __must_check scsi_add_host(struct Scsi_Host *host,
  					     struct device *dev)
diff --git a/drivers/scsi/hosts.c b/drivers/scsi/hosts.c
index bd989d33dffb..e664f44f18a0 100644
--- a/drivers/scsi/hosts.c
+++ b/drivers/scsi/hosts.c
@@ -643,3 +643,31 @@ void scsi_flush_work(struct Scsi_Host *shost)
 	flush_workqueue(shost->work_q);
 }
 EXPORT_SYMBOL_GPL(scsi_flush_work);
+
+static bool complete_all_cmds_iter(struct request *rq, void *data, bool rsvd)
+{
+	struct scsi_cmnd *scmd = blk_mq_rq_to_pdu(rq);
+	int status = *(int *)data;
+
+	scsi_dma_unmap(scmd);
+	scmd->result = status << 16;
+	scmd->scsi_done(scmd);
+	return true;
+}
+
+/**
+ * scsi_host_complete_all_commands - Terminate all running commands
+ * @shost:	Scsi Host on which commands should be terminated
+ * @status:	Status to be set for the terminated commands
+ *
+ * There is no protection against modification of the number
+ * of outstanding commands. It is the responsibility of the
+ * caller to ensure that concurrent I/O submission and/or
+ * completion is stopped when calling this function.
+ */
+void scsi_host_complete_all_commands(struct Scsi_Host *shost, int status)
+{
+	blk_mq_tagset_busy_iter(&shost->tag_set, complete_all_cmds_iter,
+				&status);
+}
+EXPORT_SYMBOL_GPL(scsi_host_complete_all_commands);
* Unmerged path include/scsi/scsi_host.h
