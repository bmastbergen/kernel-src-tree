scsi: ibmvfc: Set and track hw queue in ibmvfc_event struct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Tyrel Datwyler <tyreld@linux.ibm.com>
commit cb72477be7290ce81ad81838039e106c194ab16f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/cb72477b.failed

Extract the hwq id from a SCSI command and store it in the ibmvfc_event
structure to identify which Sub-CRQ to send the command down when channels
are being utilized.

Link: https://lore.kernel.org/r/20210114203148.246656-15-tyreld@linux.ibm.com
	Reviewed-by: Brian King <brking@linux.vnet.ibm.com>
	Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit cb72477be7290ce81ad81838039e106c194ab16f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/ibmvscsi/ibmvfc.c
diff --cc drivers/scsi/ibmvscsi/ibmvfc.c
index 54859df4d95f,dd117ca8fef6..000000000000
--- a/drivers/scsi/ibmvscsi/ibmvfc.c
+++ b/drivers/scsi/ibmvscsi/ibmvfc.c
@@@ -1878,7 -1867,9 +1881,13 @@@ static int ibmvfc_queuecommand(struct S
  		iu->pri_task_attr = IBMVFC_SIMPLE_TASK;
  	}
  
++<<<<<<< HEAD
 +	vfc_cmd->correlation = cpu_to_be64((u64)evt);
++=======
+ 	vfc_cmd->correlation = cpu_to_be64(evt);
+ 	if (vhost->using_channels)
+ 		evt->hwq = hwq % vhost->scsi_scrqs.active_queues;
++>>>>>>> cb72477be729 (scsi: ibmvfc: Set and track hw queue in ibmvfc_event struct)
  
  	if (likely(!(rc = ibmvfc_map_sg_data(cmnd, evt, vfc_cmd, vhost->dev))))
  		return ibmvfc_send_event(evt, vhost, 0);
* Unmerged path drivers/scsi/ibmvscsi/ibmvfc.c
diff --git a/drivers/scsi/ibmvscsi/ibmvfc.h b/drivers/scsi/ibmvscsi/ibmvfc.h
index 4f220ff289d7..8cbab3239d7e 100644
--- a/drivers/scsi/ibmvscsi/ibmvfc.h
+++ b/drivers/scsi/ibmvscsi/ibmvfc.h
@@ -767,6 +767,7 @@ struct ibmvfc_event {
 	struct completion comp;
 	struct completion *eh_comp;
 	struct timer_list timer;
+	u16 hwq;
 };
 
 /* a pool of event structs for use */
