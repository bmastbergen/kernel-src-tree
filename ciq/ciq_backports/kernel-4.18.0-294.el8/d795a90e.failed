mm/swapfile.c: move inode_lock out of claim_swapfile

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Naohiro Aota <naohiro.aota@wdc.com>
commit d795a90e2ba024dbf2f22107ae89c210b98b08b8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d795a90e.failed

claim_swapfile() currently keeps the inode locked when it is successful,
or the file is already swapfile (with -EBUSY).  And, on the other error
cases, it does not lock the inode.

This inconsistency of the lock state and return value is quite confusing
and actually causing a bad unlock balance as below in the "bad_swap"
section of __do_sys_swapon().

This commit fixes this issue by moving the inode_lock() and IS_SWAPFILE
check out of claim_swapfile().  The inode is unlocked in
"bad_swap_unlock_inode" section, so that the inode is ensured to be
unlocked at "bad_swap".  Thus, error handling codes after the locking now
jumps to "bad_swap_unlock_inode" instead of "bad_swap".

    =====================================
    WARNING: bad unlock balance detected!
    5.5.0-rc7+ #176 Not tainted
    -------------------------------------
    swapon/4294 is trying to release lock (&sb->s_type->i_mutex_key) at: __do_sys_swapon+0x94b/0x3550
    but there are no more locks to release!

    other info that might help us debug this:
    no locks held by swapon/4294.

    stack backtrace:
    CPU: 5 PID: 4294 Comm: swapon Not tainted 5.5.0-rc7-BTRFS-ZNS+ #176
    Hardware name: ASUS All Series/H87-PRO, BIOS 2102 07/29/2014
    Call Trace:
     dump_stack+0xa1/0xea
     print_unlock_imbalance_bug.cold+0x114/0x123
     lock_release+0x562/0xed0
     up_write+0x2d/0x490
     __do_sys_swapon+0x94b/0x3550
     __x64_sys_swapon+0x54/0x80
     do_syscall_64+0xa4/0x4b0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7f15da0a0dc7

Fixes: 1638045c3677 ("mm: set S_SWAPFILE on blockdev swap devices")
	Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Tested-by: Qais Youef <qais.yousef@arm.com>
	Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Cc: Christoph Hellwig <hch@infradead.org>
	Cc: <stable@vger.kernel.org>
Link: http://lkml.kernel.org/r/20200206090132.154869-1-naohiro.aota@wdc.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d795a90e2ba024dbf2f22107ae89c210b98b08b8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swapfile.c
diff --cc mm/swapfile.c
index 843f8ced36cf,be33e6176cd9..000000000000
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@@ -3265,7 -3153,6 +3261,10 @@@ SYSCALL_DEFINE2(swapon, const char __us
  	mapping = swap_file->f_mapping;
  	inode = mapping->host;
  
++<<<<<<< HEAD
 +	/* If S_ISREG(inode->i_mode) will do inode_lock(inode); */
++=======
++>>>>>>> d795a90e2ba0 (mm/swapfile.c: move inode_lock out of claim_swapfile)
  	error = claim_swapfile(p, inode);
  	if (unlikely(error))
  		goto bad_swap;
@@@ -3388,8 -3281,19 +3393,22 @@@
  
  	error = init_swap_address_space(p->type, maxpages);
  	if (error)
- 		goto bad_swap;
+ 		goto bad_swap_unlock_inode;
+ 
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Flush any pending IO and dirty mappings before we start using this
+ 	 * swap device.
+ 	 */
+ 	inode->i_flags |= S_SWAPFILE;
+ 	error = inode_drain_writes(inode);
+ 	if (error) {
+ 		inode->i_flags &= ~S_SWAPFILE;
+ 		goto bad_swap_unlock_inode;
+ 	}
  
++>>>>>>> d795a90e2ba0 (mm/swapfile.c: move inode_lock out of claim_swapfile)
  	mutex_lock(&swapon_mutex);
  	prio = -1;
  	if (swap_flags & SWAP_FLAG_PREFER)
@@@ -3410,9 -3314,10 +3429,11 @@@
  	atomic_inc(&proc_poll_event);
  	wake_up_interruptible(&proc_poll_wait);
  
 +	inode->i_flags |= S_SWAPFILE;
  	error = 0;
  	goto out;
+ bad_swap_unlock_inode:
+ 	inode_unlock(inode);
  bad_swap:
  	free_percpu(p->percpu_cluster);
  	p->percpu_cluster = NULL;
* Unmerged path mm/swapfile.c
