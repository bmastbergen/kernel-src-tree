net: phy: Allow mdio buses to auto-probe c45 devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jeremy Linton <jeremy.linton@arm.com>
commit 0cc8fecf041d3e5285380da62cc6662bdc942d8c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0cc8fecf.failed

The mdiobus_scan logic is currently hardcoded to only
work with c22 devices. This works fairly well in most
cases, but its possible that a c45 device doesn't respond
despite being a standard phy. If the parent hardware
is capable, it makes sense to scan for c22 devices before
falling back to c45.

As we want this to reflect the capabilities of the STA,
lets add a field to the mii_bus structure to represent
the capability. That way devices can opt into the extended
scanning. Existing users should continue to default to c22
only scanning as long as they are zero'ing the structure
before use.

	Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
	Signed-off-by: Calvin Johnson <calvin.johnson@oss.nxp.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0cc8fecf041d3e5285380da62cc6662bdc942d8c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/phy.h
diff --cc include/linux/phy.h
index 8aeac466a2a8,7860d56c6bf5..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -282,6 -297,20 +282,23 @@@ struct mii_bus 
  	int reset_delay_us;
  	/* RESET GPIO descriptor pointer */
  	struct gpio_desc *reset_gpiod;
++<<<<<<< HEAD
++=======
+ 
+ 	/* bus capabilities, used for probing */
+ 	enum {
+ 		MDIOBUS_NO_CAP = 0,
+ 		MDIOBUS_C22,
+ 		MDIOBUS_C45,
+ 		MDIOBUS_C22_C45,
+ 	} probe_capabilities;
+ 
+ 	/* protect access to the shared element */
+ 	struct mutex shared_lock;
+ 
+ 	/* shared state across different PHYs */
+ 	struct phy_package_shared *shared[PHY_MAX_ADDR];
++>>>>>>> 0cc8fecf041d (net: phy: Allow mdio buses to auto-probe c45 devices)
  };
  #define to_mii_bus(d) container_of(d, struct mii_bus, dev)
  
diff --git a/drivers/net/phy/mdio_bus.c b/drivers/net/phy/mdio_bus.c
index af068227f4ab..b65a7f095637 100644
--- a/drivers/net/phy/mdio_bus.c
+++ b/drivers/net/phy/mdio_bus.c
@@ -721,10 +721,24 @@ EXPORT_SYMBOL(mdiobus_free);
  */
 struct phy_device *mdiobus_scan(struct mii_bus *bus, int addr)
 {
-	struct phy_device *phydev;
+	struct phy_device *phydev = ERR_PTR(-ENODEV);
 	int err;
 
-	phydev = get_phy_device(bus, addr, false);
+	switch (bus->probe_capabilities) {
+	case MDIOBUS_NO_CAP:
+	case MDIOBUS_C22:
+		phydev = get_phy_device(bus, addr, false);
+		break;
+	case MDIOBUS_C45:
+		phydev = get_phy_device(bus, addr, true);
+		break;
+	case MDIOBUS_C22_C45:
+		phydev = get_phy_device(bus, addr, false);
+		if (IS_ERR(phydev))
+			phydev = get_phy_device(bus, addr, true);
+		break;
+	}
+
 	if (IS_ERR(phydev))
 		return phydev;
 
* Unmerged path include/linux/phy.h
