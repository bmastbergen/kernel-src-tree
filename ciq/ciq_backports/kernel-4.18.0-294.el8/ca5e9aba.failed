time: Add time_types.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Deepa Dinamani <deepa.kernel@gmail.com>
commit ca5e9aba753ed15d173c7a7b88e4d402b7ca8121
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ca5e9aba.failed

sys/time.h is the mandated include for many time related
defines. However, linux/time.h overlaps sys/time.h
significantly and this makes including both from userspace
or one from the other impossible.

This also means that userspace can get away with including
sys/time.h whenever it needs linux/time.h and this is what's
been happening in the user world usually.

But, we have new data types that we plan to use in the uapi time
interfaces also defined in the linux/time.h. But, we are unable
to use these types when sys/time.h is included.

Hence, move the new types to a new header, time_types.h.
We intend to eventually have all the uapi defines that the kernel
uses defined in this header.
Note that the plan is to replace uapi interfaces with timeval to
use __kernel_old_timeval, timespec to use __kernel_old_timespec etc.

	Reported-by: Ran Rozenstein <ranro@mellanox.com>
Fixes: 9718475e6908 ("socket: Add SO_TIMESTAMPING_NEW")
	Signed-off-by: Deepa Dinamani <deepa.kernel@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ca5e9aba753ed15d173c7a7b88e4d402b7ca8121)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/time.h
diff --cc include/uapi/linux/time.h
index ca7b696c271b,958932effc5e..000000000000
--- a/include/uapi/linux/time.h
+++ b/include/uapi/linux/time.h
@@@ -42,37 -41,6 +41,40 @@@ struct itimerval 
  	struct timeval it_value;	/* current value */
  };
  
++<<<<<<< HEAD
 +#ifndef __kernel_timespec
 +struct __kernel_timespec {
 +	__kernel_time64_t       tv_sec;                 /* seconds */
 +	long long               tv_nsec;                /* nanoseconds */
 +};
 +#endif
 +
 +#ifndef __kernel_itimerspec
 +struct __kernel_itimerspec {
 +	struct __kernel_timespec it_interval;    /* timer period */
 +	struct __kernel_timespec it_value;       /* timer expiration */
 +};
 +#endif
 +
 +/*
 + * legacy timeval structure, only embedded in structures that
 + * traditionally used 'timeval' to pass time intervals (not absolute
 + * times). Do not add new users. If user space fails to compile
 + * here, this is probably because it is not y2038 safe and needs to
 + * be changed to use another interface.
 + */
 +struct __kernel_old_timeval {
 +	__kernel_long_t tv_sec;
 +	__kernel_long_t tv_usec;
 +};
 +
 +struct __kernel_sock_timeval {
 +	__s64 tv_sec;
 +	__s64 tv_usec;
 +};
 +
++=======
++>>>>>>> ca5e9aba753e (time: Add time_types.h)
  /*
   * The IDs of the various system clocks (for POSIX.1b interval timers):
   */
* Unmerged path include/uapi/linux/time.h
diff --git a/include/uapi/linux/time_types.h b/include/uapi/linux/time_types.h
new file mode 100644
index 000000000000..459070c61d47
--- /dev/null
+++ b/include/uapi/linux/time_types.h
@@ -0,0 +1,40 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _UAPI_LINUX_TIME_TYPES_H
+#define _UAPI_LINUX_TIME_TYPES_H
+
+#include <linux/types.h>
+
+#ifndef __kernel_timespec
+struct __kernel_timespec {
+	__kernel_time64_t       tv_sec;                 /* seconds */
+	long long               tv_nsec;                /* nanoseconds */
+};
+#endif
+
+#ifndef __kernel_itimerspec
+struct __kernel_itimerspec {
+	struct __kernel_timespec it_interval;    /* timer period */
+	struct __kernel_timespec it_value;       /* timer expiration */
+};
+#endif
+
+/*
+ * legacy timeval structure, only embedded in structures that
+ * traditionally used 'timeval' to pass time intervals (not absolute
+ * times). Do not add new users. If user space fails to compile
+ * here, this is probably because it is not y2038 safe and needs to
+ * be changed to use another interface.
+ */
+#ifndef __kernel_old_timeval
+struct __kernel_old_timeval {
+	__kernel_long_t tv_sec;
+	__kernel_long_t tv_usec;
+};
+#endif
+
+struct __kernel_sock_timeval {
+	__s64 tv_sec;
+	__s64 tv_usec;
+};
+
+#endif /* _UAPI_LINUX_TIME_TYPES_H */
