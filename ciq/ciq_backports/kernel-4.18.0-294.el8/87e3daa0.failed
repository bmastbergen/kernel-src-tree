usb: typec: Give the mux drivers all the details regarding the port state

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit 87e3daa005cfba19433b5429bfbca9b848925507
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/87e3daa0.failed

Passing all the details that the alternate mode drivers
provide to the mux drivers during mode changes.

The mux drivers will in practice need to be able to make
decisions on their own. It is not enough that they get only
the requested port state. With the Thunderbolt 3 alternate
mode for example the mux driver will need to consider also
the capabilities of the cable before configuring the mux.

	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Link: https://lore.kernel.org/r/20191230142611.24921-13-heikki.krogerus@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 87e3daa005cfba19433b5429bfbca9b848925507)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/usb/typec_mux.h
diff --cc include/linux/usb/typec_mux.h
index 43f40685e53c,be7292c0be5e..000000000000
--- a/include/linux/usb/typec_mux.h
+++ b/include/linux/usb/typec_mux.h
@@@ -7,46 -6,45 +7,74 @@@
  #include <linux/usb/typec.h>
  
  struct device;
++<<<<<<< HEAD
++=======
+ struct typec_mux;
+ struct typec_switch;
+ struct typec_altmode;
+ struct fwnode_handle;
++>>>>>>> 87e3daa005cf (usb: typec: Give the mux drivers all the details regarding the port state)
  
 -typedef int (*typec_switch_set_fn_t)(struct typec_switch *sw,
 -				     enum typec_orientation orientation);
 +/**
 + * struct typec_switch - USB Type-C cable orientation switch
 + * @dev: Switch device
 + * @entry: List entry
 + * @set: Callback to the driver for setting the orientation
 + *
 + * USB Type-C pin flipper switch routing the correct data pairs from the
 + * connector to the USB controller depending on the orientation of the cable
 + * plug.
 + */
 +struct typec_switch {
 +	struct device *dev;
 +	struct list_head entry;
  
 -struct typec_switch_desc {
 -	struct fwnode_handle *fwnode;
 -	typec_switch_set_fn_t set;
 -	void *drvdata;
 +	int (*set)(struct typec_switch *sw, enum typec_orientation orientation);
 +};
 +
 +/**
 + * struct typec_switch - USB Type-C connector pin mux
 + * @dev: Mux device
 + * @entry: List entry
 + * @set: Callback to the driver for setting the state of the mux
 + *
 + * Pin Multiplexer/DeMultiplexer switch routing the USB Type-C connector pins to
 + * different components depending on the requested mode of operation. Used with
 + * Accessory/Alternate modes.
 + */
 +struct typec_mux {
 +	struct device *dev;
 +	struct list_head entry;
 +
 +	int (*set)(struct typec_mux *mux, int state);
  };
  
  struct typec_switch *typec_switch_get(struct device *dev);
  void typec_switch_put(struct typec_switch *sw);
 -struct typec_switch *
 -typec_switch_register(struct device *parent,
 -		      const struct typec_switch_desc *desc);
 +int typec_switch_register(struct typec_switch *sw);
  void typec_switch_unregister(struct typec_switch *sw);
  
++<<<<<<< HEAD
++=======
+ void typec_switch_set_drvdata(struct typec_switch *sw, void *data);
+ void *typec_switch_get_drvdata(struct typec_switch *sw);
+ 
+ struct typec_mux_state {
+ 	struct typec_altmode *alt;
+ 	unsigned long mode;
+ 	void *data;
+ };
+ 
+ typedef int (*typec_mux_set_fn_t)(struct typec_mux *mux,
+ 				  struct typec_mux_state *state);
+ 
+ struct typec_mux_desc {
+ 	struct fwnode_handle *fwnode;
+ 	typec_mux_set_fn_t set;
+ 	void *drvdata;
+ };
+ 
++>>>>>>> 87e3daa005cf (usb: typec: Give the mux drivers all the details regarding the port state)
  struct typec_mux *
  typec_mux_get(struct device *dev, const struct typec_altmode_desc *desc);
  void typec_mux_put(struct typec_mux *mux);
diff --git a/drivers/usb/typec/bus.c b/drivers/usb/typec/bus.c
index e78c8a68c745..2e45eb479386 100644
--- a/drivers/usb/typec/bus.c
+++ b/drivers/usb/typec/bus.c
@@ -10,12 +10,23 @@
 
 #include "bus.h"
 
-static inline int typec_altmode_set_mux(struct altmode *alt, u8 state)
+static inline int
+typec_altmode_set_mux(struct altmode *alt, unsigned long conf, void *data)
 {
-	return alt->mux ? alt->mux->set(alt->mux, state) : 0;
+	struct typec_mux_state state;
+
+	if (!alt->mux)
+		return 0;
+
+	state.alt = &alt->adev;
+	state.mode = conf;
+	state.data = data;
+
+	return alt->mux->set(alt->mux, &state);
 }
 
-static int typec_altmode_set_state(struct typec_altmode *adev, int state)
+static int typec_altmode_set_state(struct typec_altmode *adev,
+				   unsigned long conf, void *data)
 {
 	bool is_port = is_typec_port(adev->dev.parent);
 	struct altmode *port_altmode;
@@ -23,11 +34,11 @@ static int typec_altmode_set_state(struct typec_altmode *adev, int state)
 
 	port_altmode = is_port ? to_altmode(adev) : to_altmode(adev)->partner;
 
-	ret = typec_altmode_set_mux(port_altmode, state);
+	ret = typec_altmode_set_mux(port_altmode, conf, data);
 	if (ret)
 		return ret;
 
-	blocking_notifier_call_chain(&port_altmode->nh, state, NULL);
+	blocking_notifier_call_chain(&port_altmode->nh, conf, NULL);
 
 	return 0;
 }
@@ -67,7 +78,7 @@ int typec_altmode_notify(struct typec_altmode *adev,
 	is_port = is_typec_port(adev->dev.parent);
 	partner = altmode->partner;
 
-	ret = typec_altmode_set_mux(is_port ? altmode : partner, (u8)conf);
+	ret = typec_altmode_set_mux(is_port ? altmode : partner, conf, data);
 	if (ret)
 		return ret;
 
@@ -107,7 +118,7 @@ int typec_altmode_enter(struct typec_altmode *adev, u32 *vdo)
 		return -EPERM;
 
 	/* Moving to USB Safe State */
-	ret = typec_altmode_set_state(adev, TYPEC_STATE_SAFE);
+	ret = typec_altmode_set_state(adev, TYPEC_STATE_SAFE, NULL);
 	if (ret)
 		return ret;
 
@@ -135,7 +146,7 @@ int typec_altmode_exit(struct typec_altmode *adev)
 		return -EOPNOTSUPP;
 
 	/* Moving to USB Safe State */
-	ret = typec_altmode_set_state(adev, TYPEC_STATE_SAFE);
+	ret = typec_altmode_set_state(adev, TYPEC_STATE_SAFE, NULL);
 	if (ret)
 		return ret;
 
@@ -388,7 +399,7 @@ static int typec_remove(struct device *dev)
 		drv->remove(to_typec_altmode(dev));
 
 	if (adev->active) {
-		WARN_ON(typec_altmode_set_state(adev, TYPEC_STATE_SAFE));
+		WARN_ON(typec_altmode_set_state(adev, TYPEC_STATE_SAFE, NULL));
 		typec_altmode_update_active(adev, false);
 	}
 
diff --git a/drivers/usb/typec/class.c b/drivers/usb/typec/class.c
index f82d520dc7c8..05d58bd3819c 100644
--- a/drivers/usb/typec/class.c
+++ b/drivers/usb/typec/class.c
@@ -1535,7 +1535,11 @@ EXPORT_SYMBOL_GPL(typec_get_orientation);
  */
 int typec_set_mode(struct typec_port *port, int mode)
 {
-	return port->mux ? port->mux->set(port->mux, mode) : 0;
+	struct typec_mux_state state = { };
+
+	state.mode = mode;
+
+	return port->mux ? port->mux->set(port->mux, &state) : 0;
 }
 EXPORT_SYMBOL_GPL(typec_set_mode);
 
diff --git a/drivers/usb/typec/mux/pi3usb30532.c b/drivers/usb/typec/mux/pi3usb30532.c
index 9294e85fd34b..f2c14c972d56 100644
--- a/drivers/usb/typec/mux/pi3usb30532.c
+++ b/drivers/usb/typec/mux/pi3usb30532.c
@@ -73,7 +73,8 @@ static int pi3usb30532_sw_set(struct typec_switch *sw,
 	return ret;
 }
 
-static int pi3usb30532_mux_set(struct typec_mux *mux, int state)
+static int
+pi3usb30532_mux_set(struct typec_mux *mux, struct typec_mux_state *state)
 {
 	struct pi3usb30532 *pi = container_of(mux, struct pi3usb30532, mux);
 	u8 new_conf;
@@ -82,7 +83,7 @@ static int pi3usb30532_mux_set(struct typec_mux *mux, int state)
 	mutex_lock(&pi->lock);
 	new_conf = pi->conf;
 
-	switch (state) {
+	switch (state->mode) {
 	case TYPEC_STATE_SAFE:
 		new_conf = (new_conf & PI3USB30532_CONF_SWAP) |
 			   PI3USB30532_CONF_OPEN;
* Unmerged path include/linux/usb/typec_mux.h
