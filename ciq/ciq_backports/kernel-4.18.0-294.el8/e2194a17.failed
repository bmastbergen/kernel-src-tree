net/mlx5: CT: Fix incorrect removal of tuple_nat_node from nat rhashtable

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Paul Blakey <paulb@nvidia.com>
commit e2194a1744e8594e82a861687808c1adca419b85
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e2194a17.failed

If a non nat tuple entry is inserted just to the regular tuples
rhashtable (ct_tuples_ht) and not to natted tuples rhashtable
(ct_nat_tuples_ht). Commit bc562be9674b ("net/mlx5e: CT: Save ct entries
tuples in hashtables") mixed up the return labels and names sot that on
cleanup or failure we still try to remove for the natted tuples rhashtable.

Fix that by correctly checking if a natted tuples insertion
before removing it. While here make it more readable.

Fixes: bc562be9674b ("net/mlx5e: CT: Save ct entries tuples in hashtables")
	Reviewed-by: Roi Dayan <roid@nvidia.com>
	Signed-off-by: Paul Blakey <paulb@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit e2194a1744e8594e82a861687808c1adca419b85)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
index 62f559874dff,6bc6b48a56dc..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
@@@ -157,16 -167,10 +157,23 @@@ static const struct rhashtable_params t
  	.min_size = 16 * 1024,
  };
  
++<<<<<<< HEAD
 +static struct mlx5_tc_ct_priv *
 +mlx5_tc_ct_get_ct_priv(struct mlx5e_priv *priv)
 +{
 +	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 +	struct mlx5_rep_uplink_priv *uplink_priv;
 +	struct mlx5e_rep_priv *uplink_rpriv;
 +
 +	uplink_rpriv = mlx5_eswitch_get_uplink_priv(esw, REP_ETH);
 +	uplink_priv = &uplink_rpriv->uplink_priv;
 +	return uplink_priv->ct_priv;
++=======
+ static bool
+ mlx5_tc_ct_entry_has_nat(struct mlx5_ct_entry *entry)
+ {
+ 	return !!(entry->tuple_nat_node.next);
++>>>>>>> e2194a1744e8 (net/mlx5: CT: Fix incorrect removal of tuple_nat_node from nat rhashtable)
  }
  
  static int
@@@ -827,7 -937,8 +834,12 @@@ mlx5_tc_ct_del_ft_entry(struct mlx5_tc_
  			struct mlx5_ct_entry *entry)
  {
  	mlx5_tc_ct_entry_del_rules(ct_priv, entry);
++<<<<<<< HEAD
 +	if (entry->tuple_node.next)
++=======
+ 	mutex_lock(&ct_priv->shared_counter_lock);
+ 	if (mlx5_tc_ct_entry_has_nat(entry))
++>>>>>>> e2194a1744e8 (net/mlx5: CT: Fix incorrect removal of tuple_nat_node from nat rhashtable)
  		rhashtable_remove_fast(&ct_priv->ct_tuples_nat_ht,
  				       &entry->tuple_nat_node,
  				       tuples_nat_ht_params);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc_ct.c
