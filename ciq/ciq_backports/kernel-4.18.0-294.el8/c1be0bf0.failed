net: atlantic: common functions needed for basic A2 init/deinit hw_ops

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Dmitry Bogdanov <dbogdanov@marvell.com>
commit c1be0bf092bd292ee617622c116f5981a34cce96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c1be0bf0.failed

This patch adds common functions (mostly FW-related), which are
needed for basic A2 HW initialization / deinitialization.

	Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
Co-developed-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c1be0bf092bd292ee617622c116f5981a34cce96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/Makefile
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
diff --cc drivers/net/ethernet/aquantia/atlantic/Makefile
index 131cab855be7,130a105d03f3..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/Makefile
+++ b/drivers/net/ethernet/aquantia/atlantic/Makefile
@@@ -28,4 -24,13 +28,17 @@@ atlantic-objs := aq_main.o 
  	hw_atl/hw_atl_b0.o \
  	hw_atl/hw_atl_utils.o \
  	hw_atl/hw_atl_utils_fw2x.o \
++<<<<<<< HEAD
 +	hw_atl/hw_atl_llh.o
++=======
+ 	hw_atl/hw_atl_llh.o \
+ 	hw_atl2/hw_atl2.o \
+ 	hw_atl2/hw_atl2_utils.o \
+ 	hw_atl2/hw_atl2_utils_fw.o \
+ 	hw_atl2/hw_atl2_llh.o \
+ 	macsec/macsec_api.o
+ 
+ atlantic-$(CONFIG_MACSEC) += aq_macsec.o
+ 
 -atlantic-$(CONFIG_PTP_1588_CLOCK) += aq_ptp.o
++atlantic-$(CONFIG_PTP_1588_CLOCK) += aq_ptp.o
++>>>>>>> c1be0bf092bd (net: atlantic: common functions needed for basic A2 init/deinit hw_ops)
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
index 38915aa0fd19,1100d40a0302..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
@@@ -51,7 -48,11 +51,15 @@@
  
  #define FORCE_FLASHLESS 0
  
++<<<<<<< HEAD
 +static int hw_atl_utils_ver_match(u32 ver_expected, u32 ver_actual);
++=======
+ enum mcp_area {
+ 	MCP_AREA_CONFIG = 0x80000000,
+ 	MCP_AREA_SETTINGS = 0x20000000,
+ };
+ 
++>>>>>>> c1be0bf092bd (net: atlantic: common functions needed for basic A2 init/deinit hw_ops)
  static int hw_atl_utils_mpi_set_state(struct aq_hw_s *self,
  				      enum hal_atl_utils_fw_state_e state);
  static u32 hw_atl_utils_get_mpi_mbox_tid(struct aq_hw_s *self);
@@@ -375,11 -420,24 +383,28 @@@ err_exit
  	return err;
  }
  
++<<<<<<< HEAD
 +static int hw_atl_utils_ver_match(u32 ver_expected, u32 ver_actual)
++=======
+ int hw_atl_write_fwcfg_dwords(struct aq_hw_s *self, u32 *p, u32 cnt)
+ {
+ 	return hw_atl_utils_fw_upload_dwords(self, self->rpc_addr, p,
+ 					     cnt, MCP_AREA_CONFIG);
+ }
+ 
+ int hw_atl_write_fwsettings_dwords(struct aq_hw_s *self, u32 offset, u32 *p,
+ 				   u32 cnt)
+ {
+ 	return hw_atl_utils_fw_upload_dwords(self, self->settings_addr + offset,
+ 					     p, cnt, MCP_AREA_SETTINGS);
+ }
+ 
+ int hw_atl_utils_ver_match(u32 ver_expected, u32 ver_actual)
++>>>>>>> c1be0bf092bd (net: atlantic: common functions needed for basic A2 init/deinit hw_ops)
  {
 +	int err = 0;
  	const u32 dw_major_mask = 0xff000000U;
  	const u32 dw_minor_mask = 0x00ffffffU;
 -	int err = 0;
  
  	err = (dw_major_mask & (ver_expected ^ ver_actual)) ? -EOPNOTSUPP : 0;
  	if (err < 0)
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.h
index 7d4ac65440c9,2317dd8459d0..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.h
@@@ -590,4 -592,15 +592,18 @@@ struct fw_interface_out 
  #define  AQ_HOST_MODE_LOW_POWER    3U
  #define  AQ_HOST_MODE_SHUTDOWN     4U
  
++<<<<<<< HEAD
++=======
+ int hw_atl2_utils_initfw(struct aq_hw_s *self, const struct aq_fw_ops **fw_ops);
+ 
+ int hw_atl2_utils_soft_reset(struct aq_hw_s *self);
+ 
+ u32 hw_atl2_utils_get_fw_version(struct aq_hw_s *self);
+ 
+ int hw_atl2_utils_get_action_resolve_table_caps(struct aq_hw_s *self,
+ 						u8 *base_index, u8 *count);
+ 
+ extern const struct aq_fw_ops aq_a2_fw_ops;
+ 
++>>>>>>> c1be0bf092bd (net: atlantic: common functions needed for basic A2 init/deinit hw_ops)
  #endif /* HW_ATL2_UTILS_H */
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/Makefile
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
index 7b58f16ebe72..29329e7ed9d0 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
@@ -485,6 +485,8 @@ int hw_atl_utils_fw_rpc_call(struct aq_hw_s *self, unsigned int rpc_size);
 int hw_atl_utils_fw_rpc_wait(struct aq_hw_s *self,
 			     struct hw_atl_utils_fw_rpc **rpc);
 
+int hw_atl_utils_ver_match(u32 ver_expected, u32 ver_actual);
+
 extern const struct aq_fw_ops aq_fw_1x_ops;
 extern const struct aq_fw_ops aq_fw_2x_ops;
 
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.c
new file mode 100644
index 000000000000..85ccc9a011a0
--- /dev/null
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.c
@@ -0,0 +1,139 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* Atlantic Network Driver
+ * Copyright (C) 2020 Marvell International Ltd.
+ */
+
+#include <linux/iopoll.h>
+
+#include "aq_hw_utils.h"
+#include "hw_atl/hw_atl_utils.h"
+#include "hw_atl2_utils.h"
+#include "hw_atl2_llh.h"
+#include "hw_atl2_llh_internal.h"
+
+#define HW_ATL2_FW_VER_1X          0x01000000U
+
+#define AQ_A2_BOOT_STARTED         BIT(0x18)
+#define AQ_A2_CRASH_INIT           BIT(0x1B)
+#define AQ_A2_BOOT_CODE_FAILED     BIT(0x1C)
+#define AQ_A2_FW_INIT_FAILED       BIT(0x1D)
+#define AQ_A2_FW_INIT_COMP_SUCCESS BIT(0x1F)
+
+#define AQ_A2_FW_BOOT_FAILED_MASK (AQ_A2_CRASH_INIT | \
+				   AQ_A2_BOOT_CODE_FAILED | \
+				   AQ_A2_FW_INIT_FAILED)
+#define AQ_A2_FW_BOOT_COMPLETE_MASK (AQ_A2_FW_BOOT_FAILED_MASK | \
+				     AQ_A2_FW_INIT_COMP_SUCCESS)
+
+#define AQ_A2_FW_BOOT_REQ_REBOOT        BIT(0x0)
+#define AQ_A2_FW_BOOT_REQ_HOST_BOOT     BIT(0x8)
+#define AQ_A2_FW_BOOT_REQ_MAC_FAST_BOOT BIT(0xA)
+#define AQ_A2_FW_BOOT_REQ_PHY_FAST_BOOT BIT(0xB)
+
+int hw_atl2_utils_initfw(struct aq_hw_s *self, const struct aq_fw_ops **fw_ops)
+{
+	int err;
+
+	self->fw_ver_actual = hw_atl2_utils_get_fw_version(self);
+
+	if (hw_atl_utils_ver_match(HW_ATL2_FW_VER_1X,
+				   self->fw_ver_actual) == 0) {
+		*fw_ops = &aq_a2_fw_ops;
+	} else {
+		aq_pr_err("Bad FW version detected: %x, but continue\n",
+			  self->fw_ver_actual);
+		*fw_ops = &aq_a2_fw_ops;
+	}
+	aq_pr_trace("Detect ATL2FW %x\n", self->fw_ver_actual);
+	self->aq_fw_ops = *fw_ops;
+	err = self->aq_fw_ops->init(self);
+
+	self->chip_features |= ATL_HW_CHIP_ANTIGUA;
+
+	return err;
+}
+
+static bool hw_atl2_mcp_boot_complete(struct aq_hw_s *self)
+{
+	u32 rbl_status;
+
+	rbl_status = hw_atl2_mif_mcp_boot_reg_get(self);
+	if (rbl_status & AQ_A2_FW_BOOT_COMPLETE_MASK)
+		return true;
+
+	/* Host boot requested */
+	if (hw_atl2_mif_host_req_int_get(self) & HW_ATL2_MCP_HOST_REQ_INT_READY)
+		return true;
+
+	return false;
+}
+
+int hw_atl2_utils_soft_reset(struct aq_hw_s *self)
+{
+	bool rbl_complete = false;
+	u32 rbl_status = 0;
+	u32 rbl_request;
+	int err;
+
+	err = readx_poll_timeout_atomic(hw_atl2_mif_mcp_boot_reg_get, self,
+				rbl_status,
+				((rbl_status & AQ_A2_BOOT_STARTED) &&
+				 (rbl_status != 0xFFFFFFFFu)),
+				10, 500000);
+	if (err)
+		aq_pr_trace("Boot code probably hanged, reboot anyway");
+
+	hw_atl2_mif_host_req_int_clr(self, 0x01);
+	rbl_request = AQ_A2_FW_BOOT_REQ_REBOOT;
+#ifdef AQ_CFG_FAST_START
+	rbl_request |= AQ_A2_FW_BOOT_REQ_MAC_FAST_BOOT;
+#endif
+	hw_atl2_mif_mcp_boot_reg_set(self, rbl_request);
+
+	/* Wait for RBL boot */
+	err = readx_poll_timeout_atomic(hw_atl2_mif_mcp_boot_reg_get, self,
+				rbl_status,
+				((rbl_status & AQ_A2_BOOT_STARTED) &&
+				 (rbl_status != 0xFFFFFFFFu)),
+				10, 200000);
+	if (err) {
+		aq_pr_err("Boot code hanged");
+		goto err_exit;
+	}
+
+	err = readx_poll_timeout_atomic(hw_atl2_mcp_boot_complete, self,
+					rbl_complete,
+					rbl_complete,
+					10, 2000000);
+
+	if (err) {
+		aq_pr_err("FW Restart timed out");
+		goto err_exit;
+	}
+
+	rbl_status = hw_atl2_mif_mcp_boot_reg_get(self);
+
+	if (rbl_status & AQ_A2_FW_BOOT_FAILED_MASK) {
+		err = -EIO;
+		aq_pr_err("FW Restart failed");
+		goto err_exit;
+	}
+
+	if (hw_atl2_mif_host_req_int_get(self) &
+	    HW_ATL2_MCP_HOST_REQ_INT_READY) {
+		err = -EIO;
+		aq_pr_err("No FW detected. Dynamic FW load not implemented");
+		goto err_exit;
+	}
+
+	if (self->aq_fw_ops) {
+		err = self->aq_fw_ops->init(self);
+		if (err) {
+			aq_pr_err("FW Init failed");
+			goto err_exit;
+		}
+	}
+
+err_exit:
+	return err;
+}
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
