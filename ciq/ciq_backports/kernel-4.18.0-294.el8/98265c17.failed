x86/fpu/xstate: Preserve supervisor states for the slow path in __fpu__restore_sig()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Yu-cheng Yu <yu-cheng.yu@intel.com>
commit 98265c17efa9f2279c59262cd27679aca12e0bb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/98265c17.failed

The signal return code is responsible for taking an XSAVE buffer
present in user memory and loading it into the hardware registers. This
operation only affects user XSAVE state and never affects supervisor
state.

The fast path through this code simply points XRSTOR directly at the
user buffer. However, since user memory is not guaranteed to be always
mapped, this XRSTOR can fail. If it fails, the signal return code falls
back to a slow path which can tolerate page faults.

That slow path copies the xfeatures one by one out of the user buffer
into the task's fpu state area. However, by being in a context where it
can handle page faults, the code can also schedule.

The lazy-fpu-load code would think it has an up-to-date fpstate and
would fail to save the supervisor state when scheduling the task out.
When scheduling back in, it would likely restore stale supervisor state.

To fix that, preserve supervisor state before the slow path.  Modify
copy_user_to_fpregs_zeroing() so that if it fails, fpregs are not zeroed,
and there is no need for fpregs_deactivate() and supervisor states are
preserved.

Move set_thread_flag(TIF_NEED_FPU_LOAD) to the slow path.  Without doing
this, the fast path also needs supervisor states to be saved first.

	Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lkml.kernel.org/r/20200512145444.15483-10-yu-cheng.yu@intel.com
(cherry picked from commit 98265c17efa9f2279c59262cd27679aca12e0bb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/fpu/signal.c
diff --cc arch/x86/kernel/fpu/signal.c
index ae77c2653921,6184fe70a9e1..000000000000
--- a/arch/x86/kernel/fpu/signal.c
+++ b/arch/x86/kernel/fpu/signal.c
@@@ -252,16 -261,24 +252,35 @@@ sanitize_restored_xstate(union fpregs_s
   */
  static int copy_user_to_fpregs_zeroing(void __user *buf, u64 xbv, int fx_only)
  {
++<<<<<<< HEAD
 +	if (use_xsave()) {
 +		if (fx_only) {
 +			u64 init_bv = xfeatures_mask & ~XFEATURE_MASK_FPSSE;
 +			copy_kernel_to_xregs(&init_fpstate.xsave, init_bv);
 +			return copy_user_to_fxregs(buf);
 +		} else {
 +			u64 init_bv = xfeatures_mask & ~xbv;
 +			if (unlikely(init_bv))
++=======
+ 	u64 init_bv;
+ 	int r;
+ 
+ 	if (use_xsave()) {
+ 		if (fx_only) {
+ 			init_bv = xfeatures_mask_user() & ~XFEATURE_MASK_FPSSE;
+ 
+ 			r = copy_user_to_fxregs(buf);
+ 			if (!r)
  				copy_kernel_to_xregs(&init_fpstate.xsave, init_bv);
- 			return copy_user_to_xregs(buf, xbv);
+ 			return r;
+ 		} else {
+ 			init_bv = xfeatures_mask_user() & ~xbv;
+ 
+ 			r = copy_user_to_xregs(buf, xbv);
+ 			if (!r && unlikely(init_bv))
++>>>>>>> 98265c17efa9 (x86/fpu/xstate: Preserve supervisor states for the slow path in __fpu__restore_sig())
+ 				copy_kernel_to_xregs(&init_fpstate.xsave, init_bv);
+ 			return r;
  		}
  	} else if (use_fxsr()) {
  		return copy_user_to_fxregs(buf);
@@@ -353,11 -352,29 +354,29 @@@ static int __fpu__restore_sig(void __us
  			return 0;
  		}
  		fpregs_unlock();
+ 	} else {
+ 		/*
+ 		 * For 32-bit frames with fxstate, copy the fxstate so it can
+ 		 * be reconstructed later.
+ 		 */
+ 		ret = __copy_from_user(&env, buf, sizeof(env));
+ 		if (ret)
+ 			goto err_out;
+ 		envp = &env;
  	}
  
+ 	/*
+ 	 * The current state of the FPU registers does not matter. By setting
+ 	 * TIF_NEED_FPU_LOAD unconditionally it is ensured that the our xstate
+ 	 * is not modified on context switch and that the xstate is considered
+ 	 * to be loaded again on return to userland (overriding last_cpu avoids
+ 	 * the optimisation).
+ 	 */
+ 	set_thread_flag(TIF_NEED_FPU_LOAD);
+ 	__fpu_invalidate_fpregs_state(fpu);
  
  	if (use_xsave() && !fx_only) {
 -		u64 init_bv = xfeatures_mask_user() & ~user_xfeatures;
 +		u64 init_bv = xfeatures_mask & ~xfeatures;
  
  		if (using_compacted_format()) {
  			ret = copy_user_to_xstate(&fpu->state.xsave, buf_fx);
* Unmerged path arch/x86/kernel/fpu/signal.c
