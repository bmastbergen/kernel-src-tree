powerpc: Add a probe_user_read_inst() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jordan Niethe <jniethe5@gmail.com>
commit 7ba68b2172c19031fdc2a2caf37328edd146e299
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7ba68b21.failed

Introduce a probe_user_read_inst() function to use in cases where
probe_user_read() is used for getting an instruction. This will be
more useful for prefixed instructions.

	Signed-off-by: Jordan Niethe <jniethe5@gmail.com>
	Reviewed-by: Alistair Popple <alistair@popple.id.au>
[mpe: Don't write to *inst on error, fold in __user annotations]
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200506034050.24806-14-jniethe5@gmail.com
(cherry picked from commit 7ba68b2172c19031fdc2a2caf37328edd146e299)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/inst.h
#	arch/powerpc/lib/Makefile
diff --cc arch/powerpc/lib/Makefile
index 9142e3fd6e1f,546591848219..000000000000
--- a/arch/powerpc/lib/Makefile
+++ b/arch/powerpc/lib/Makefile
@@@ -10,7 -8,20 +10,24 @@@ ccflags-$(CONFIG_PPC64)	:= $(NO_MINIMAL
  CFLAGS_REMOVE_code-patching.o = $(CC_FLAGS_FTRACE)
  CFLAGS_REMOVE_feature-fixups.o = $(CC_FLAGS_FTRACE)
  
++<<<<<<< HEAD
 +obj-y += string.o alloc.o code-patching.o feature-fixups.o
++=======
+ KASAN_SANITIZE_code-patching.o := n
+ KASAN_SANITIZE_feature-fixups.o := n
+ 
+ ifdef CONFIG_KASAN
+ CFLAGS_code-patching.o += -DDISABLE_BRANCH_PROFILING
+ CFLAGS_feature-fixups.o += -DDISABLE_BRANCH_PROFILING
+ endif
+ 
+ obj-y += alloc.o code-patching.o feature-fixups.o pmem.o inst.o
+ 
+ ifndef CONFIG_KASAN
+ obj-y	+=	string.o memcmp_$(BITS).o
+ obj-$(CONFIG_PPC32)	+= strlen_32.o
+ endif
++>>>>>>> 7ba68b2172c1 (powerpc: Add a probe_user_read_inst() function)
  
  obj-$(CONFIG_PPC32)	+= div64.o copy_32.o crtsavres.o
  
* Unmerged path arch/powerpc/include/asm/inst.h
* Unmerged path arch/powerpc/include/asm/inst.h
* Unmerged path arch/powerpc/lib/Makefile
diff --git a/arch/powerpc/lib/inst.c b/arch/powerpc/lib/inst.c
new file mode 100644
index 000000000000..605220dbb6ba
--- /dev/null
+++ b/arch/powerpc/lib/inst.c
@@ -0,0 +1,20 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ *  Copyright 2020, IBM Corporation.
+ */
+
+#include <linux/uaccess.h>
+#include <asm/inst.h>
+
+int probe_user_read_inst(struct ppc_inst *inst,
+			 struct ppc_inst __user *nip)
+{
+	unsigned int val;
+	int err;
+
+	err = probe_user_read(&val, nip, sizeof(val));
+	if (!err)
+		*inst = ppc_inst(val);
+
+	return err;
+}
diff --git a/arch/powerpc/mm/fault.c b/arch/powerpc/mm/fault.c
index e1833a2622c5..584ec40ef6df 100644
--- a/arch/powerpc/mm/fault.c
+++ b/arch/powerpc/mm/fault.c
@@ -280,7 +280,7 @@ static bool bad_stack_expansion(struct pt_regs *regs, unsigned long address,
 	 * expand to 1MB without further checks.
 	 */
 	if (address + 0x100000 < vma->vm_end) {
-		unsigned int __user *nip = (unsigned int __user *)regs->nip;
+		struct ppc_inst __user *nip = (struct ppc_inst __user *)regs->nip;
 		/* get user regs even if this fault is in kernel mode */
 		struct pt_regs *uregs = current->thread.regs;
 		if (uregs == NULL)
@@ -305,7 +305,7 @@ static bool bad_stack_expansion(struct pt_regs *regs, unsigned long address,
 		    access_ok(nip, sizeof(*nip))) {
 			unsigned int inst;
 
-			if (!probe_user_read(&inst, nip, sizeof(inst)))
+			if (!probe_user_read_inst(&inst, nip))
 				return !store_updates_sp(inst);
 			*must_retry = true;
 		}
