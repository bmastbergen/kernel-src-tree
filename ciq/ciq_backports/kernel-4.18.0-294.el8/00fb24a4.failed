mm/kasan: fix false positive invalid-free reports with CONFIG_KASAN_SW_TAGS=y

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Andrey Ryabinin <aryabinin@virtuozzo.com>
commit 00fb24a42a68b1ee0f6495993fe1be7124433dfb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/00fb24a4.failed

The code like this:

	ptr = kmalloc(size, GFP_KERNEL);
	page = virt_to_page(ptr);
	offset = offset_in_page(ptr);
	kfree(page_address(page) + offset);

may produce false-positive invalid-free reports on the kernel with
CONFIG_KASAN_SW_TAGS=y.

In the example above we lose the original tag assigned to 'ptr', so
kfree() gets the pointer with 0xFF tag.  In kfree() we check that 0xFF
tag is different from the tag in shadow hence print false report.

Instead of just comparing tags, do the following:

1) Check that shadow doesn't contain KASAN_TAG_INVALID.  Otherwise it's
   double-free and it doesn't matter what tag the pointer have.

2) If pointer tag is different from 0xFF, make sure that tag in the
   shadow is the same as in the pointer.

Link: http://lkml.kernel.org/r/20190819172540.19581-1-aryabinin@virtuozzo.com
Fixes: 7f94ffbc4c6a ("kasan: add hooks implementation for tag-based mode")
	Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Reported-by: Walter Wu <walter-zh.wu@mediatek.com>
	Reported-by: Mark Rutland <mark.rutland@arm.com>
	Reviewed-by: Andrey Konovalov <andreyknvl@google.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 00fb24a42a68b1ee0f6495993fe1be7124433dfb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/kasan.c
diff --cc mm/kasan/kasan.c
index d79269dd4b58,95d16a42db6b..000000000000
--- a/mm/kasan/kasan.c
+++ b/mm/kasan/kasan.c
@@@ -485,10 -398,23 +485,24 @@@ void * __must_check kasan_init_slab_obj
  	return (void *)object;
  }
  
 -static inline bool shadow_invalid(u8 tag, s8 shadow_byte)
 +void * __must_check kasan_slab_alloc(struct kmem_cache *cache, void *object,
 +					gfp_t flags)
  {
++<<<<<<< HEAD:mm/kasan/kasan.c
 +	return kasan_kmalloc(cache, object, cache->object_size, flags);
++=======
+ 	if (IS_ENABLED(CONFIG_KASAN_GENERIC))
+ 		return shadow_byte < 0 ||
+ 			shadow_byte >= KASAN_SHADOW_SCALE_SIZE;
+ 
+ 	/* else CONFIG_KASAN_SW_TAGS: */
+ 	if ((u8)shadow_byte == KASAN_TAG_INVALID)
+ 		return true;
+ 	if ((tag != KASAN_TAG_KERNEL) && (tag != (u8)shadow_byte))
+ 		return true;
+ 
+ 	return false;
++>>>>>>> 00fb24a42a68 (mm/kasan: fix false positive invalid-free reports with CONFIG_KASAN_SW_TAGS=y):mm/kasan/common.c
  }
  
  static bool __kasan_slab_free(struct kmem_cache *cache, void *object,
* Unmerged path mm/kasan/kasan.c
