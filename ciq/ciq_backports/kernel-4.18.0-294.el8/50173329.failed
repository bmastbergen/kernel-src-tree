vfio/pci: Add QAT devices to denylist

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Giovanni Cabiddu <giovanni.cabiddu@intel.com>
commit 50173329c8cc0c892eaa7a9d0f0692ac39cd7b04
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/50173329.failed

The current generation of Intel® QuickAssist Technology devices
are not designed to run in an untrusted environment because of the
following issues reported in the document "Intel® QuickAssist Technology
(Intel® QAT) Software for Linux" (document number 336211-014):

QATE-39220 - GEN - Intel® QAT API submissions with bad addresses that
             trigger DMA to invalid or unmapped addresses can cause a
             platform hang
QATE-7495  - GEN - An incorrectly formatted request to Intel® QAT can
             hang the entire Intel® QAT Endpoint

The document is downloadable from https://01.org/intel-quickassist-technology
at the following link:
https://01.org/sites/default/files/downloads/336211-014-qatforlinux-releasenotes-hwv1.7_0.pdf

This patch adds the following QAT devices to the denylist: DH895XCC,
C3XXX and C62X.

	Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Reviewed-by: Fiona Trahe <fiona.trahe@intel.com>
	Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit 50173329c8cc0c892eaa7a9d0f0692ac39cd7b04)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/pci/vfio_pci.c
diff --cc drivers/vfio/pci/vfio_pci.c
index 00cc893e8bdd,620465c2a1da..000000000000
--- a/drivers/vfio/pci/vfio_pci.c
+++ b/drivers/vfio/pci/vfio_pci.c
@@@ -66,6 -73,44 +66,47 @@@ static inline bool vfio_vga_disabled(vo
  #endif
  }
  
++<<<<<<< HEAD
++=======
+ static bool vfio_pci_dev_in_denylist(struct pci_dev *pdev)
+ {
+ 	switch (pdev->vendor) {
+ 	case PCI_VENDOR_ID_INTEL:
+ 		switch (pdev->device) {
+ 		case PCI_DEVICE_ID_INTEL_QAT_C3XXX:
+ 		case PCI_DEVICE_ID_INTEL_QAT_C3XXX_VF:
+ 		case PCI_DEVICE_ID_INTEL_QAT_C62X:
+ 		case PCI_DEVICE_ID_INTEL_QAT_C62X_VF:
+ 		case PCI_DEVICE_ID_INTEL_QAT_DH895XCC:
+ 		case PCI_DEVICE_ID_INTEL_QAT_DH895XCC_VF:
+ 			return true;
+ 		default:
+ 			return false;
+ 		}
+ 	}
+ 
+ 	return false;
+ }
+ 
+ static bool vfio_pci_is_denylisted(struct pci_dev *pdev)
+ {
+ 	if (!vfio_pci_dev_in_denylist(pdev))
+ 		return false;
+ 
+ 	if (disable_denylist) {
+ 		pci_warn(pdev,
+ 			 "device denylist disabled - allowing device %04x:%04x.\n",
+ 			 pdev->vendor, pdev->device);
+ 		return false;
+ 	}
+ 
+ 	pci_warn(pdev, "%04x:%04x exists in vfio-pci device denylist, driver probing disallowed.\n",
+ 		 pdev->vendor, pdev->device);
+ 
+ 	return true;
+ }
+ 
++>>>>>>> 50173329c8cc (vfio/pci: Add QAT devices to denylist)
  /*
   * Our VGA arbiter participation is limited since we don't know anything
   * about the device itself.  However, if the device is the only VGA device
* Unmerged path drivers/vfio/pci/vfio_pci.c
