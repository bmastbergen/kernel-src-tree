powercap/intel_rapl_msr: Convert rapl_msr_priv into pointer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Victor Ding <victording@google.com>
commit a2c32fa736a590a7ab6e9601066a6772ae09869b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a2c32fa7.failed

Changes the static struct rapl_msr_priv to a pointer to allow using
a different RAPL MSR interface, preparing for supporting AMD's RAPL
MSR interface.

No functional changes.

	Signed-off-by: Victor Ding <victording@google.com>
	Acked-by: Kim Phillips <kim.phillips@amd.com>
[ rjw: Changelog edits ]
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit a2c32fa736a590a7ab6e9601066a6772ae09869b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/powercap/intel_rapl_msr.c
diff --cc drivers/powercap/intel_rapl_msr.c
index 809d567a374b,a819b3b89b2f..000000000000
--- a/drivers/powercap/intel_rapl_msr.c
+++ b/drivers/powercap/intel_rapl_msr.c
@@@ -28,9 -28,12 +28,11 @@@
  
  /* Local defines */
  #define MSR_PLATFORM_POWER_LIMIT	0x0000065C
 -#define MSR_VR_CURRENT_CONFIG		0x00000601
  
  /* private data for RAPL MSR Interface */
- static struct rapl_if_priv rapl_msr_priv = {
+ static struct rapl_if_priv *rapl_msr_priv;
+ 
+ static struct rapl_if_priv rapl_msr_priv_intel = {
  	.reg_unit = MSR_RAPL_POWER_UNIT,
  	.regs[RAPL_DOMAIN_PACKAGE] = {
  		MSR_PKG_POWER_LIMIT, MSR_PKG_ENERGY_STATUS, MSR_PKG_PERF_STATUS, 0, MSR_PKG_POWER_INFO },
@@@ -124,17 -127,32 +126,30 @@@ static int rapl_msr_write_raw(int cpu, 
  	return ra->err;
  }
  
 -/* List of verified CPUs. */
 -static const struct x86_cpu_id pl4_support_ids[] = {
 -	{ X86_VENDOR_INTEL, 6, INTEL_FAM6_TIGERLAKE_L, X86_FEATURE_ANY },
 -	{}
 -};
 -
  static int rapl_msr_probe(struct platform_device *pdev)
  {
 -	const struct x86_cpu_id *id = x86_match_cpu(pl4_support_ids);
  	int ret;
  
- 	rapl_msr_priv.read_raw = rapl_msr_read_raw;
- 	rapl_msr_priv.write_raw = rapl_msr_write_raw;
+ 	rapl_msr_priv = &rapl_msr_priv_intel;
+ 	rapl_msr_priv->read_raw = rapl_msr_read_raw;
+ 	rapl_msr_priv->write_raw = rapl_msr_write_raw;
  
++<<<<<<< HEAD
 +	rapl_msr_priv.control_type = powercap_register_control_type(NULL, "intel-rapl", NULL);
 +	if (IS_ERR(rapl_msr_priv.control_type)) {
++=======
+ 	if (id) {
+ 		rapl_msr_priv->limits[RAPL_DOMAIN_PACKAGE] = 3;
+ 		rapl_msr_priv->regs[RAPL_DOMAIN_PACKAGE][RAPL_DOMAIN_REG_PL4] =
+ 			MSR_VR_CURRENT_CONFIG;
+ 		pr_info("PL4 support detected.\n");
+ 	}
+ 
+ 	rapl_msr_priv->control_type = powercap_register_control_type(NULL, "intel-rapl", NULL);
+ 	if (IS_ERR(rapl_msr_priv->control_type)) {
++>>>>>>> a2c32fa736a5 (powercap/intel_rapl_msr: Convert rapl_msr_priv into pointer)
  		pr_debug("failed to register powercap control_type.\n");
- 		return PTR_ERR(rapl_msr_priv.control_type);
+ 		return PTR_ERR(rapl_msr_priv->control_type);
  	}
  
  	ret = cpuhp_setup_state(CPUHP_AP_ONLINE_DYN, "powercap/rapl:online",
* Unmerged path drivers/powercap/intel_rapl_msr.c
