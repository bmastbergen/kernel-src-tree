libbpf: Add support for freplace attachment in bpf_link_create

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Toke Høiland-Jørgensen <toke@redhat.com>
commit a535909142bf2a6f3a95cabbb8b38ce3860c4807
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/a5359091.failed

This adds support for supplying a target btf ID for the bpf_link_create()
operation, and adds a new bpf_program__attach_freplace() high-level API for
attaching freplace functions with a target.

	Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/160138355387.48470.18026176785351166890.stgit@toke.dk
(cherry picked from commit a535909142bf2a6f3a95cabbb8b38ce3860c4807)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/bpf.c
#	tools/lib/bpf/bpf.h
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/bpf.c
index da45889fc732,d27e34133973..000000000000
--- a/tools/lib/bpf/bpf.c
+++ b/tools/lib/bpf/bpf.c
@@@ -598,6 -602,15 +605,18 @@@ int bpf_link_create(int prog_fd, int ta
  	attr.link_create.prog_fd = prog_fd;
  	attr.link_create.target_fd = target_fd;
  	attr.link_create.attach_type = attach_type;
++<<<<<<< HEAD
++=======
+ 	attr.link_create.flags = OPTS_GET(opts, flags, 0);
+ 
+ 	if (iter_info_len) {
+ 		attr.link_create.iter_info =
+ 			ptr_to_u64(OPTS_GET(opts, iter_info, (void *)0));
+ 		attr.link_create.iter_info_len = iter_info_len;
+ 	} else if (target_btf_id) {
+ 		attr.link_create.target_btf_id = target_btf_id;
+ 	}
++>>>>>>> a535909142bf (libbpf: Add support for freplace attachment in bpf_link_create)
  
  	return sys_bpf(BPF_LINK_CREATE, &attr, sizeof(attr));
  }
diff --cc tools/lib/bpf/bpf.h
index f8c9bd418cb7,875dde20d56e..000000000000
--- a/tools/lib/bpf/bpf.h
+++ b/tools/lib/bpf/bpf.h
@@@ -168,10 -168,15 +168,19 @@@ LIBBPF_API int bpf_prog_detach(int atta
  LIBBPF_API int bpf_prog_detach2(int prog_fd, int attachable_fd,
  				enum bpf_attach_type type);
  
 -union bpf_iter_link_info; /* defined in up-to-date linux/bpf.h */
  struct bpf_link_create_opts {
  	size_t sz; /* size of this struct for forward/backward compatibility */
++<<<<<<< HEAD
 +};
 +#define bpf_link_create_opts__last_field sz
++=======
+ 	__u32 flags;
+ 	union bpf_iter_link_info *iter_info;
+ 	__u32 iter_info_len;
+ 	__u32 target_btf_id;
+ };
+ #define bpf_link_create_opts__last_field target_btf_id
++>>>>>>> a535909142bf (libbpf: Add support for freplace attachment in bpf_link_create)
  
  LIBBPF_API int bpf_link_create(int prog_fd, int target_fd,
  			       enum bpf_attach_type attach_type,
diff --cc tools/lib/bpf/libbpf.c
index 3a6c874656cb,a4f55f8a460d..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -8155,9 -9383,18 +8155,23 @@@ static struct bpf_link *attach_lsm(cons
  	return bpf_program__attach_lsm(prog);
  }
  
++<<<<<<< HEAD
 +struct bpf_link *
 +bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd)
++=======
+ static struct bpf_link *attach_iter(const struct bpf_sec_def *sec,
+ 				    struct bpf_program *prog)
  {
+ 	return bpf_program__attach_iter(prog, NULL);
+ }
+ 
+ static struct bpf_link *
+ bpf_program__attach_fd(struct bpf_program *prog, int target_fd, int btf_id,
+ 		       const char *target_name)
++>>>>>>> a535909142bf (libbpf: Add support for freplace attachment in bpf_link_create)
+ {
+ 	DECLARE_LIBBPF_OPTS(bpf_link_create_opts, opts,
+ 			    .target_btf_id = btf_id);
  	enum bpf_attach_type attach_type;
  	char errmsg[STRERR_BUFSIZE];
  	struct bpf_link *link;
@@@ -8176,7 -9412,7 +8190,11 @@@
  	link->detach = &bpf_link__detach_fd;
  
  	attach_type = bpf_program__get_expected_attach_type(prog);
++<<<<<<< HEAD
 +	link_fd = bpf_link_create(prog_fd, cgroup_fd, attach_type, NULL);
++=======
+ 	link_fd = bpf_link_create(prog_fd, target_fd, attach_type, &opts);
++>>>>>>> a535909142bf (libbpf: Add support for freplace attachment in bpf_link_create)
  	if (link_fd < 0) {
  		link_fd = -errno;
  		free(link);
@@@ -8189,6 -9425,96 +8207,99 @@@
  	return link;
  }
  
++<<<<<<< HEAD
++=======
+ struct bpf_link *
+ bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd)
+ {
+ 	return bpf_program__attach_fd(prog, cgroup_fd, 0, "cgroup");
+ }
+ 
+ struct bpf_link *
+ bpf_program__attach_netns(struct bpf_program *prog, int netns_fd)
+ {
+ 	return bpf_program__attach_fd(prog, netns_fd, 0, "netns");
+ }
+ 
+ struct bpf_link *bpf_program__attach_xdp(struct bpf_program *prog, int ifindex)
+ {
+ 	/* target_fd/target_ifindex use the same field in LINK_CREATE */
+ 	return bpf_program__attach_fd(prog, ifindex, 0, "xdp");
+ }
+ 
+ struct bpf_link *bpf_program__attach_freplace(struct bpf_program *prog,
+ 					      int target_fd,
+ 					      const char *attach_func_name)
+ {
+ 	int btf_id;
+ 
+ 	if (!!target_fd != !!attach_func_name) {
+ 		pr_warn("prog '%s': supply none or both of target_fd and attach_func_name\n",
+ 			prog->name);
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	if (prog->type != BPF_PROG_TYPE_EXT) {
+ 		pr_warn("prog '%s': only BPF_PROG_TYPE_EXT can attach as freplace",
+ 			prog->name);
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	if (target_fd) {
+ 		btf_id = libbpf_find_prog_btf_id(attach_func_name, target_fd);
+ 		if (btf_id < 0)
+ 			return ERR_PTR(btf_id);
+ 
+ 		return bpf_program__attach_fd(prog, target_fd, btf_id, "freplace");
+ 	} else {
+ 		/* no target, so use raw_tracepoint_open for compatibility
+ 		 * with old kernels
+ 		 */
+ 		return bpf_program__attach_trace(prog);
+ 	}
+ }
+ 
+ struct bpf_link *
+ bpf_program__attach_iter(struct bpf_program *prog,
+ 			 const struct bpf_iter_attach_opts *opts)
+ {
+ 	DECLARE_LIBBPF_OPTS(bpf_link_create_opts, link_create_opts);
+ 	char errmsg[STRERR_BUFSIZE];
+ 	struct bpf_link *link;
+ 	int prog_fd, link_fd;
+ 	__u32 target_fd = 0;
+ 
+ 	if (!OPTS_VALID(opts, bpf_iter_attach_opts))
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	link_create_opts.iter_info = OPTS_GET(opts, link_info, (void *)0);
+ 	link_create_opts.iter_info_len = OPTS_GET(opts, link_info_len, 0);
+ 
+ 	prog_fd = bpf_program__fd(prog);
+ 	if (prog_fd < 0) {
+ 		pr_warn("prog '%s': can't attach before loaded\n", prog->name);
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	link = calloc(1, sizeof(*link));
+ 	if (!link)
+ 		return ERR_PTR(-ENOMEM);
+ 	link->detach = &bpf_link__detach_fd;
+ 
+ 	link_fd = bpf_link_create(prog_fd, target_fd, BPF_TRACE_ITER,
+ 				  &link_create_opts);
+ 	if (link_fd < 0) {
+ 		link_fd = -errno;
+ 		free(link);
+ 		pr_warn("prog '%s': failed to attach to iterator: %s\n",
+ 			prog->name, libbpf_strerror_r(link_fd, errmsg, sizeof(errmsg)));
+ 		return ERR_PTR(link_fd);
+ 	}
+ 	link->fd = link_fd;
+ 	return link;
+ }
+ 
++>>>>>>> a535909142bf (libbpf: Add support for freplace attachment in bpf_link_create)
  struct bpf_link *bpf_program__attach(struct bpf_program *prog)
  {
  	const struct bpf_sec_def *sec_def;
diff --cc tools/lib/bpf/libbpf.h
index 02e427ddd9d9,6909ee81113a..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -267,6 -257,13 +267,16 @@@ LIBBPF_API struct bpf_link 
  bpf_program__attach_lsm(struct bpf_program *prog);
  LIBBPF_API struct bpf_link *
  bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd);
++<<<<<<< HEAD
++=======
+ LIBBPF_API struct bpf_link *
+ bpf_program__attach_netns(struct bpf_program *prog, int netns_fd);
+ LIBBPF_API struct bpf_link *
+ bpf_program__attach_xdp(struct bpf_program *prog, int ifindex);
+ LIBBPF_API struct bpf_link *
+ bpf_program__attach_freplace(struct bpf_program *prog,
+ 			     int target_fd, const char *attach_func_name);
++>>>>>>> a535909142bf (libbpf: Add support for freplace attachment in bpf_link_create)
  
  struct bpf_map;
  
diff --cc tools/lib/bpf/libbpf.map
index 69599528ddbe,4ebfadf45b47..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -286,3 -254,86 +286,89 @@@ LIBBPF_0.0.8 
  		bpf_program__set_lsm;
  		bpf_set_link_xdp_fd_opts;
  } LIBBPF_0.0.7;
++<<<<<<< HEAD
++=======
+ 
+ LIBBPF_0.0.9 {
+ 	global:
+ 		bpf_enable_stats;
+ 		bpf_iter_create;
+ 		bpf_link_get_fd_by_id;
+ 		bpf_link_get_next_id;
+ 		bpf_program__attach_iter;
+ 		bpf_program__attach_netns;
+ 		perf_buffer__consume;
+ 		ring_buffer__add;
+ 		ring_buffer__consume;
+ 		ring_buffer__free;
+ 		ring_buffer__new;
+ 		ring_buffer__poll;
+ } LIBBPF_0.0.8;
+ 
+ LIBBPF_0.1.0 {
+ 	global:
+ 		bpf_link__detach;
+ 		bpf_link_detach;
+ 		bpf_map__ifindex;
+ 		bpf_map__key_size;
+ 		bpf_map__map_flags;
+ 		bpf_map__max_entries;
+ 		bpf_map__numa_node;
+ 		bpf_map__set_key_size;
+ 		bpf_map__set_map_flags;
+ 		bpf_map__set_max_entries;
+ 		bpf_map__set_numa_node;
+ 		bpf_map__set_type;
+ 		bpf_map__set_value_size;
+ 		bpf_map__type;
+ 		bpf_map__value_size;
+ 		bpf_program__attach_xdp;
+ 		bpf_program__autoload;
+ 		bpf_program__is_sk_lookup;
+ 		bpf_program__set_autoload;
+ 		bpf_program__set_sk_lookup;
+ 		btf__parse;
+ 		btf__parse_raw;
+ 		btf__pointer_size;
+ 		btf__set_fd;
+ 		btf__set_pointer_size;
+ } LIBBPF_0.0.9;
+ 
+ LIBBPF_0.2.0 {
+ 	global:
+ 		bpf_prog_bind_map;
+ 		bpf_prog_test_run_opts;
+ 		bpf_program__attach_freplace;
+ 		bpf_program__section_name;
+ 		btf__add_array;
+ 		btf__add_const;
+ 		btf__add_enum;
+ 		btf__add_enum_value;
+ 		btf__add_datasec;
+ 		btf__add_datasec_var_info;
+ 		btf__add_field;
+ 		btf__add_func;
+ 		btf__add_func_param;
+ 		btf__add_func_proto;
+ 		btf__add_fwd;
+ 		btf__add_int;
+ 		btf__add_ptr;
+ 		btf__add_restrict;
+ 		btf__add_str;
+ 		btf__add_struct;
+ 		btf__add_typedef;
+ 		btf__add_union;
+ 		btf__add_var;
+ 		btf__add_volatile;
+ 		btf__endianness;
+ 		btf__find_str;
+ 		btf__new_empty;
+ 		btf__set_endianness;
+ 		btf__str_by_offset;
+ 		perf_buffer__buffer_cnt;
+ 		perf_buffer__buffer_fd;
+ 		perf_buffer__epoll_fd;
+ 		perf_buffer__consume_buffer;
+ 		xsk_socket__create_shared;
+ } LIBBPF_0.1.0;
++>>>>>>> a535909142bf (libbpf: Add support for freplace attachment in bpf_link_create)
* Unmerged path tools/lib/bpf/bpf.c
* Unmerged path tools/lib/bpf/bpf.h
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
* Unmerged path tools/lib/bpf/libbpf.map
