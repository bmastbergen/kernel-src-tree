kasan: update required compiler versions in documentation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Marco Elver <elver@google.com>
commit ac4766be5e2d103ebf5d3f2ff676f866f6a56d44
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ac4766be.failed

Updates the recently changed compiler requirements for KASAN.  In
particular, we require GCC >= 8.3.0, and add a note that Clang 11 supports
OOB detection of globals.

Fixes: 7b861a53e46b ("kasan: Bump required compiler version")
Fixes: acf7b0bf7dcf ("kasan: Fix required compiler version")
	Signed-off-by: Marco Elver <elver@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Andrey Konovalov <andreyknvl@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Nick Desaulniers <ndesaulniers@google.com>
	Cc: Walter Wu <walter-zh.wu@mediatek.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Daniel Axtens <dja@axtens.net>
Link: http://lkml.kernel.org/r/20200629104157.3242503-2-elver@google.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ac4766be5e2d103ebf5d3f2ff676f866f6a56d44)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/Kconfig.kasan
diff --cc lib/Kconfig.kasan
index d0bad1bd9a2b,047b53dbfd58..000000000000
--- a/lib/Kconfig.kasan
+++ b/lib/Kconfig.kasan
@@@ -1,36 -1,98 +1,96 @@@
  config HAVE_ARCH_KASAN
  	bool
  
 -config HAVE_ARCH_KASAN_SW_TAGS
 -	bool
 -
 -config	HAVE_ARCH_KASAN_VMALLOC
 -	bool
 -
 -config CC_HAS_KASAN_GENERIC
 -	def_bool $(cc-option, -fsanitize=kernel-address)
 -
 -config CC_HAS_KASAN_SW_TAGS
 -	def_bool $(cc-option, -fsanitize=kernel-hwaddress)
 -
 -config CC_HAS_WORKING_NOSANITIZE_ADDRESS
 -	def_bool !CC_IS_GCC || GCC_VERSION >= 80300
 +if HAVE_ARCH_KASAN
  
 -menuconfig KASAN
 -	bool "KASAN: runtime memory debugger"
 -	depends on (HAVE_ARCH_KASAN && CC_HAS_KASAN_GENERIC) || \
 -		   (HAVE_ARCH_KASAN_SW_TAGS && CC_HAS_KASAN_SW_TAGS)
 +config KASAN
 +	bool "KASan: runtime memory debugger"
  	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
 -	depends on CC_HAS_WORKING_NOSANITIZE_ADDRESS
 +	select SLUB_DEBUG if SLUB
 +	select CONSTRUCTORS
 +	select STACKDEPOT
  	help
 -	  Enables KASAN (KernelAddressSANitizer) - runtime memory debugger,
 +	  Enables kernel address sanitizer - runtime memory debugger,
  	  designed to find out-of-bounds accesses and use-after-free bugs.
++<<<<<<< HEAD
 +	  This is strictly a debugging feature and it requires a gcc version
 +	  of 4.9.2 or later. Detection of out of bounds accesses to stack or
 +	  global variables requires gcc 5.0 or later.
 +	  This feature consumes about 1/8 of available memory and brings about
 +	  ~x3 performance slowdown.
 +	  For better error detection enable CONFIG_STACKTRACE.
 +	  Currently CONFIG_KASAN doesn't work with CONFIG_DEBUG_SLAB
++=======
+ 	  See Documentation/dev-tools/kasan.rst for details.
+ 
+ if KASAN
+ 
+ choice
+ 	prompt "KASAN mode"
+ 	default KASAN_GENERIC
+ 	help
+ 	  KASAN has two modes: generic KASAN (similar to userspace ASan,
+ 	  x86_64/arm64/xtensa, enabled with CONFIG_KASAN_GENERIC) and
+ 	  software tag-based KASAN (a version based on software memory
+ 	  tagging, arm64 only, similar to userspace HWASan, enabled with
+ 	  CONFIG_KASAN_SW_TAGS).
+ 
+ 	  Both generic and tag-based KASAN are strictly debugging features.
+ 
+ config KASAN_GENERIC
+ 	bool "Generic mode"
+ 	depends on HAVE_ARCH_KASAN && CC_HAS_KASAN_GENERIC
+ 	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
+ 	select SLUB_DEBUG if SLUB
+ 	select CONSTRUCTORS
+ 	select STACKDEPOT
+ 	help
+ 	  Enables generic KASAN mode.
+ 
+ 	  This mode is supported in both GCC and Clang. With GCC it requires
+ 	  version 8.3.0 or later. With Clang it requires version 7.0.0 or
+ 	  later, but detection of out-of-bounds accesses for global variables
+ 	  is supported only since Clang 11.
+ 
+ 	  This mode consumes about 1/8th of available memory at kernel start
+ 	  and introduces an overhead of ~x1.5 for the rest of the allocations.
+ 	  The performance slowdown is ~x3.
+ 
+ 	  For better error detection enable CONFIG_STACKTRACE.
+ 
+ 	  Currently CONFIG_KASAN_GENERIC doesn't work with CONFIG_DEBUG_SLAB
++>>>>>>> ac4766be5e2d (kasan: update required compiler versions in documentation)
  	  (the resulting kernel does not boot).
  
 -config KASAN_SW_TAGS
 -	bool "Software tag-based mode"
 -	depends on HAVE_ARCH_KASAN_SW_TAGS && CC_HAS_KASAN_SW_TAGS
 -	depends on (SLUB && SYSFS) || (SLAB && !DEBUG_SLAB)
 -	select SLUB_DEBUG if SLUB
 -	select CONSTRUCTORS
 -	select STACKDEPOT
 +config KASAN_EXTRA
 +	bool "KAsan: extra checks"
 +	depends on KASAN && DEBUG_KERNEL && !COMPILE_TEST
  	help
++<<<<<<< HEAD
 +	  This enables further checks in the kernel address sanitizer, for now
 +	  it only includes the address-use-after-scope check that can lead
 +	  to excessive kernel stack usage, frame size warnings and longer
 +	  compile time.
 +	  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=81715 has more
++=======
+ 	  Enables software tag-based KASAN mode.
+ 
+ 	  This mode requires Top Byte Ignore support by the CPU and therefore
+ 	  is only supported for arm64. This mode requires Clang version 7.0.0
+ 	  or later.
+ 
+ 	  This mode consumes about 1/16th of available memory at kernel start
+ 	  and introduces an overhead of ~20% for the rest of the allocations.
+ 	  This mode may potentially introduce problems relating to pointer
+ 	  casting and comparison, as it embeds tags into the top byte of each
+ 	  pointer.
+ 
+ 	  For better error detection enable CONFIG_STACKTRACE.
+ 
+ 	  Currently CONFIG_KASAN_SW_TAGS doesn't work with CONFIG_DEBUG_SLAB
+ 	  (the resulting kernel does not boot).
++>>>>>>> ac4766be5e2d (kasan: update required compiler versions in documentation)
  
 -endchoice
  
  choice
  	prompt "Instrumentation type"
@@@ -53,7 -114,6 +113,10 @@@ config KASAN_INLIN
  	  memory accesses. This is faster than outline (in some workloads
  	  it gives about x2 boost over outline instrumentation), but
  	  make kernel's .text size much bigger.
++<<<<<<< HEAD
 +	  This requires a gcc version of 5.0 or later.
++=======
++>>>>>>> ac4766be5e2d (kasan: update required compiler versions in documentation)
  
  endchoice
  
diff --git a/Documentation/dev-tools/kasan.rst b/Documentation/dev-tools/kasan.rst
index 6816c15732ca..d2e949972968 100644
--- a/Documentation/dev-tools/kasan.rst
+++ b/Documentation/dev-tools/kasan.rst
@@ -13,11 +13,8 @@ KASAN uses compile-time instrumentation to insert validity checks before every
 memory access, and therefore requires a compiler version that supports that.
 
 Generic KASAN is supported in both GCC and Clang. With GCC it requires version
-4.9.2 or later for basic support and version 5.0 or later for detection of
-out-of-bounds accesses for stack and global variables and for inline
-instrumentation mode (see the Usage section). With Clang it requires version
-7.0.0 or later and it doesn't support detection of out-of-bounds accesses for
-global variables yet.
+8.3.0 or later. With Clang it requires version 7.0.0 or later, but detection of
+out-of-bounds accesses for global variables is only supported since Clang 11.
 
 Tag-based KASAN is only supported in Clang and requires version 7.0.0 or later.
 
* Unmerged path lib/Kconfig.kasan
