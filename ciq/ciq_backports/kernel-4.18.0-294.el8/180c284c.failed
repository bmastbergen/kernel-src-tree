device connection: Remove device_connection_find()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit 180c284ce4d66d2fb386b81bea59f01bc7be150a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/180c284c.failed

There are no users for that function.

	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Link: https://lore.kernel.org/r/20200904125123.83725-2-heikki.krogerus@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 180c284ce4d66d2fb386b81bea59f01bc7be150a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/devcon.c
diff --cc drivers/base/devcon.c
index 5bf9537bd738,51ad546303dd..000000000000
--- a/drivers/base/devcon.c
+++ b/drivers/base/devcon.c
@@@ -133,85 -133,6 +133,88 @@@ void *device_connection_find_match(stru
  }
  EXPORT_SYMBOL_GPL(device_connection_find_match);
  
++<<<<<<< HEAD
 +extern struct bus_type platform_bus_type;
 +extern struct bus_type pci_bus_type;
 +extern struct bus_type i2c_bus_type;
 +extern struct bus_type spi_bus_type;
 +
 +static struct bus_type *generic_match_buses[] = {
 +	&platform_bus_type,
 +#ifdef CONFIG_PCI
 +	&pci_bus_type,
 +#endif
 +#ifdef CONFIG_I2C
 +	&i2c_bus_type,
 +#endif
 +#ifdef CONFIG_SPI_MASTER
 +	&spi_bus_type,
 +#endif
 +	NULL,
 +};
 +
 +static int device_fwnode_match(struct device *dev, void *fwnode)
 +{
 +	return dev_fwnode(dev) == fwnode;
 +}
 +
 +static void *device_connection_fwnode_match(struct device_connection *con)
 +{
 +	struct bus_type *bus;
 +	struct device *dev;
 +
 +	for (bus = generic_match_buses[0]; bus; bus++) {
 +		dev = bus_find_device(bus, NULL, (void *)con->fwnode,
 +				      device_fwnode_match);
 +		if (dev && !strncmp(dev_name(dev), con->id, strlen(con->id)))
 +			return dev;
 +
 +		put_device(dev);
 +	}
 +	return NULL;
 +}
 +
 +/* This tries to find the device from the most common bus types by name. */
 +static void *generic_match(struct device_connection *con, int ep, void *data)
 +{
 +	struct bus_type *bus;
 +	struct device *dev;
 +
 +	if (con->fwnode)
 +		return device_connection_fwnode_match(con);
 +
 +	for (bus = generic_match_buses[0]; bus; bus++) {
 +		dev = bus_find_device_by_name(bus, NULL, con->endpoint[ep]);
 +		if (dev)
 +			return dev;
 +	}
 +
 +	/*
 +	 * We only get called if a connection was found, tell the caller to
 +	 * wait for the other device to show up.
 +	 */
 +	return ERR_PTR(-EPROBE_DEFER);
 +}
 +
 +/**
 + * device_connection_find - Find two devices connected together
 + * @dev: Device with the connection
 + * @con_id: Identifier for the connection
 + *
 + * Find a connection with unique identifier @con_id between @dev and
 + * another device. On success returns handle to the device that is connected
 + * to @dev, with the reference count for the found device incremented. Returns
 + * NULL if no matching connection was found, or ERR_PTR(-EPROBE_DEFER) when a
 + * connection was found but the other device has not been enumerated yet.
 + */
 +struct device *device_connection_find(struct device *dev, const char *con_id)
 +{
 +	return device_connection_find_match(dev, con_id, NULL, generic_match);
 +}
 +EXPORT_SYMBOL_GPL(device_connection_find);
 +
++=======
++>>>>>>> 180c284ce4d6 (device connection: Remove device_connection_find())
  /**
   * device_connection_add - Register a connection description
   * @con: The connection description to be registered
* Unmerged path drivers/base/devcon.c
diff --git a/include/linux/device.h b/include/linux/device.h
index 00d8e9c254e7..0fab4a1d2146 100644
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@ -947,8 +947,6 @@ void *fwnode_connection_find_match(struct fwnode_handle *fwnode,
 void *device_connection_find_match(struct device *dev, const char *con_id,
 				   void *data, devcon_match_fn_t match);
 
-struct device *device_connection_find(struct device *dev, const char *con_id);
-
 void device_connection_add(struct device_connection *con);
 void device_connection_remove(struct device_connection *con);
 
