net/mlx5e: Move exposure of datapath function to txrx header

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Tariq Toukan <tariqt@mellanox.com>
commit b307f7f163e351833cf6aa41585be8f5a1617901
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b307f7f1.failed

Move them from the generic header file "en.h", to the
datapath header file "txrx.h".

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Reviewed-by: Maxim Mikityanskiy <maximmi@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit b307f7f163e351833cf6aa41585be8f5a1617901)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index de4ff7465a5f,0fb30fe93207..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -842,49 -844,10 +842,55 @@@ struct mlx5e_profile 
  
  void mlx5e_build_ptys2ethtool_map(void);
  
++<<<<<<< HEAD
 +u16 mlx5e_select_queue(struct net_device *dev, struct sk_buff *skb,
 +		       struct net_device *sb_dev,
 +		       select_queue_fallback_t fallback);
 +netdev_tx_t mlx5e_xmit(struct sk_buff *skb, struct net_device *dev);
 +void mlx5e_sq_xmit(struct mlx5e_txqsq *sq, struct sk_buff *skb,
 +		   struct mlx5e_tx_wqe *wqe, u16 pi, bool xmit_more);
 +
 +void mlx5e_trigger_irq(struct mlx5e_icosq *sq);
 +void mlx5e_completion_event(struct mlx5_core_cq *mcq, struct mlx5_eqe *eqe);
 +void mlx5e_cq_error_event(struct mlx5_core_cq *mcq, enum mlx5_event event);
 +int mlx5e_napi_poll(struct napi_struct *napi, int budget);
 +bool mlx5e_poll_tx_cq(struct mlx5e_cq *cq, int napi_budget);
 +int mlx5e_poll_rx_cq(struct mlx5e_cq *cq, int budget);
 +void mlx5e_free_txqsq_descs(struct mlx5e_txqsq *sq);
 +
++=======
++>>>>>>> b307f7f163e3 (net/mlx5e: Move exposure of datapath function to txrx header)
  bool mlx5e_check_fragmented_striding_rq_cap(struct mlx5_core_dev *mdev);
  bool mlx5e_striding_rq_possible(struct mlx5_core_dev *mdev,
  				struct mlx5e_params *params);
  
++<<<<<<< HEAD
 +void mlx5e_page_dma_unmap(struct mlx5e_rq *rq, struct mlx5e_dma_info *dma_info);
 +void mlx5e_page_release_dynamic(struct mlx5e_rq *rq,
 +				struct mlx5e_dma_info *dma_info,
 +				bool recycle);
 +void mlx5e_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
 +void mlx5e_handle_rx_cqe_mpwrq(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
 +bool mlx5e_post_rx_wqes(struct mlx5e_rq *rq);
 +int mlx5e_poll_ico_cq(struct mlx5e_cq *cq);
 +bool mlx5e_post_rx_mpwqes(struct mlx5e_rq *rq);
 +void mlx5e_dealloc_rx_wqe(struct mlx5e_rq *rq, u16 ix);
 +void mlx5e_dealloc_rx_mpwqe(struct mlx5e_rq *rq, u16 ix);
 +struct sk_buff *
 +mlx5e_skb_from_cqe_mpwrq_linear(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi,
 +				u16 cqe_bcnt, u32 head_offset, u32 page_idx);
 +struct sk_buff *
 +mlx5e_skb_from_cqe_mpwrq_nonlinear(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi,
 +				   u16 cqe_bcnt, u32 head_offset, u32 page_idx);
 +struct sk_buff *
 +mlx5e_skb_from_cqe_linear(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 +			  struct mlx5e_wqe_frag_info *wi, u32 cqe_bcnt);
 +struct sk_buff *
 +mlx5e_skb_from_cqe_nonlinear(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 +			     struct mlx5e_wqe_frag_info *wi, u32 cqe_bcnt);
 +
++=======
++>>>>>>> b307f7f163e3 (net/mlx5e: Move exposure of datapath function to txrx header)
  void mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats);
  void mlx5e_fold_sw_stats64(struct mlx5e_priv *priv, struct rtnl_link_stats64 *s);
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
index 3019e522646c,b25e4ec75228..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
@@@ -8,6 -8,43 +8,46 @@@
  
  #define INL_HDR_START_SZ (sizeof(((struct mlx5_wqe_eth_seg *)NULL)->inline_hdr.start))
  
++<<<<<<< HEAD
++=======
+ enum mlx5e_icosq_wqe_type {
+ 	MLX5E_ICOSQ_WQE_NOP,
+ 	MLX5E_ICOSQ_WQE_UMR_RX,
+ #ifdef CONFIG_MLX5_EN_TLS
+ 	MLX5E_ICOSQ_WQE_UMR_TLS,
+ 	MLX5E_ICOSQ_WQE_SET_PSV_TLS,
+ 	MLX5E_ICOSQ_WQE_GET_PSV_TLS,
+ #endif
+ };
+ 
+ /* General */
+ void mlx5e_trigger_irq(struct mlx5e_icosq *sq);
+ void mlx5e_completion_event(struct mlx5_core_cq *mcq, struct mlx5_eqe *eqe);
+ void mlx5e_cq_error_event(struct mlx5_core_cq *mcq, enum mlx5_event event);
+ int mlx5e_napi_poll(struct napi_struct *napi, int budget);
+ int mlx5e_poll_ico_cq(struct mlx5e_cq *cq);
+ 
+ /* RX */
+ void mlx5e_page_dma_unmap(struct mlx5e_rq *rq, struct mlx5e_dma_info *dma_info);
+ void mlx5e_page_release_dynamic(struct mlx5e_rq *rq,
+ 				struct mlx5e_dma_info *dma_info,
+ 				bool recycle);
+ bool mlx5e_post_rx_wqes(struct mlx5e_rq *rq);
+ bool mlx5e_post_rx_mpwqes(struct mlx5e_rq *rq);
+ int mlx5e_poll_rx_cq(struct mlx5e_cq *cq, int budget);
+ void mlx5e_free_rx_descs(struct mlx5e_rq *rq);
+ void mlx5e_free_rx_in_progress_descs(struct mlx5e_rq *rq);
+ 
+ /* TX */
+ u16 mlx5e_select_queue(struct net_device *dev, struct sk_buff *skb,
+ 		       struct net_device *sb_dev);
+ netdev_tx_t mlx5e_xmit(struct sk_buff *skb, struct net_device *dev);
+ void mlx5e_sq_xmit(struct mlx5e_txqsq *sq, struct sk_buff *skb,
+ 		   struct mlx5e_tx_wqe *wqe, u16 pi, bool xmit_more);
+ bool mlx5e_poll_tx_cq(struct mlx5e_cq *cq, int napi_budget);
+ void mlx5e_free_txqsq_descs(struct mlx5e_txqsq *sq);
+ 
++>>>>>>> b307f7f163e3 (net/mlx5e: Move exposure of datapath function to txrx header)
  static inline bool
  mlx5e_wqc_has_room_for(struct mlx5_wq_cyc *wq, u16 cc, u16 pc, u16 n)
  {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/xsk/setup.c b/drivers/net/ethernet/mellanox/mlx5/core/en/xsk/setup.c
index cc46414773b5..dd9df519d383 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xsk/setup.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xsk/setup.c
@@ -3,6 +3,7 @@
 
 #include "setup.h"
 #include "en/params.h"
+#include "en/txrx.h"
 
 /* It matches XDP_UMEM_MIN_CHUNK_SIZE, but as this constant is private and may
  * change unexpectedly, and mlx5e has a minimum valid stride size for striding
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 2053796e8e01..5732fd2d4e9c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -42,6 +42,7 @@
 #include "esw/chains.h"
 #include "en.h"
 #include "en_rep.h"
+#include "en/txrx.h"
 #include "en_tc.h"
 #include "en/rep/tc.h"
 #include "en/rep/neigh.h"
