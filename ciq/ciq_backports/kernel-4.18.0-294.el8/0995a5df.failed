tracing: Provide lockdep less trace_hardirqs_on/off() variants

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 0995a5dfbe49badff78e78761fb66f46579f2f9a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/0995a5df.failed

trace_hardirqs_on/off() is only partially safe vs. RCU idle. The tracer
core itself is safe, but the resulting tracepoints can be utilized by
e.g. BPF which is unsafe.

Provide variants which do not contain the lockdep invocation so the lockdep
and tracer invocations can be split at the call site and placed
properly. This is required because lockdep needs to be aware of the state
before switching away from RCU idle and after switching to RCU idle because
these transitions can take locks.

As these code pathes are going to be non-instrumentable the tracer can be
invoked after RCU is turned on and before the switch to RCU idle. So for
these new variants there is no need to invoke the rcuidle aware tracer
functions.

Name them so they match the lockdep counterparts.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
Link: https://lkml.kernel.org/r/20200505134100.270771162@linutronix.de


(cherry picked from commit 0995a5dfbe49badff78e78761fb66f46579f2f9a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/irqflags.h
#	kernel/trace/trace_preemptirq.c
diff --cc include/linux/irqflags.h
index b53a9f136087,f150e69ab81d..000000000000
--- a/include/linux/irqflags.h
+++ b/include/linux/irqflags.h
@@@ -15,16 -15,29 +15,21 @@@
  #include <linux/typecheck.h>
  #include <asm/irqflags.h>
  
 -/* Currently lockdep_softirqs_on/off is used only by lockdep */
 -#ifdef CONFIG_PROVE_LOCKING
 -  extern void lockdep_softirqs_on(unsigned long ip);
 -  extern void lockdep_softirqs_off(unsigned long ip);
 -  extern void lockdep_hardirqs_on(unsigned long ip);
 -  extern void lockdep_hardirqs_off(unsigned long ip);
 -#else
 -  static inline void lockdep_softirqs_on(unsigned long ip) { }
 -  static inline void lockdep_softirqs_off(unsigned long ip) { }
 -  static inline void lockdep_hardirqs_on(unsigned long ip) { }
 -  static inline void lockdep_hardirqs_off(unsigned long ip) { }
 -#endif
 -
  #ifdef CONFIG_TRACE_IRQFLAGS
++<<<<<<< HEAD
 +  extern void trace_softirqs_on(unsigned long ip);
 +  extern void trace_softirqs_off(unsigned long ip);
++=======
+   extern void trace_hardirqs_on_prepare(void);
+   extern void trace_hardirqs_off_prepare(void);
++>>>>>>> 0995a5dfbe49 (tracing: Provide lockdep less trace_hardirqs_on/off() variants)
    extern void trace_hardirqs_on(void);
    extern void trace_hardirqs_off(void);
 -# define lockdep_hardirq_context(p)	((p)->hardirq_context)
 -# define lockdep_softirq_context(p)	((p)->softirq_context)
 -# define lockdep_hardirqs_enabled(p)	((p)->hardirqs_enabled)
 -# define lockdep_softirqs_enabled(p)	((p)->softirqs_enabled)
 -# define lockdep_hardirq_enter()		\
 +# define trace_hardirq_context(p)	((p)->hardirq_context)
 +# define trace_softirq_context(p)	((p)->softirq_context)
 +# define trace_hardirqs_enabled(p)	((p)->hardirqs_enabled)
 +# define trace_softirqs_enabled(p)	((p)->softirqs_enabled)
 +# define trace_hardirq_enter()			\
  do {						\
  	if (!current->hardirq_context++)	\
  		current->hardirq_threaded = 0;	\
@@@ -85,17 -98,17 +90,19 @@@ do {						
  	  } while (0)
  
  #else
+ # define trace_hardirqs_on_prepare()		do { } while (0)
+ # define trace_hardirqs_off_prepare()		do { } while (0)
  # define trace_hardirqs_on()		do { } while (0)
  # define trace_hardirqs_off()		do { } while (0)
 -# define lockdep_hardirq_context(p)	0
 -# define lockdep_softirq_context(p)	0
 -# define lockdep_hardirqs_enabled(p)	0
 -# define lockdep_softirqs_enabled(p)	0
 -# define lockdep_hardirq_enter()	do { } while (0)
 -# define lockdep_hardirq_threaded()	do { } while (0)
 -# define lockdep_hardirq_exit()		do { } while (0)
 +# define trace_softirqs_on(ip)		do { } while (0)
 +# define trace_softirqs_off(ip)		do { } while (0)
 +# define trace_hardirq_context(p)	0
 +# define trace_softirq_context(p)	0
 +# define trace_hardirqs_enabled(p)	0
 +# define trace_softirqs_enabled(p)	0
 +# define trace_hardirq_enter()		do { } while (0)
 +# define trace_hardirq_threaded()	do { } while (0)
 +# define trace_hardirq_exit()		do { } while (0)
  # define lockdep_softirq_enter()	do { } while (0)
  # define lockdep_softirq_exit()		do { } while (0)
  # define lockdep_hrtimer_enter(__hrtimer)	false
* Unmerged path kernel/trace/trace_preemptirq.c
* Unmerged path include/linux/irqflags.h
* Unmerged path kernel/trace/trace_preemptirq.c
