nvmet-rdma: use new shared CQ mechanism

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Yamin Friedman <yaminf@mellanox.com>
commit ca0f1a8055be2a04073af435dc68419334481638
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ca0f1a80.failed

Has the driver use shared CQs providing ~10%-20% improvement when
multiple disks are used. Instead of opening a CQ for each QP per
controller, a CQ for each core will be provided by the RDMA core driver
that will be shared between the QPs on that core reducing interrupt
overhead.

	Signed-off-by: Yamin Friedman <yaminf@mellanox.com>
	Signed-off-by: Max Gurtovoy <maxg@mellanox.com>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit ca0f1a8055be2a04073af435dc68419334481638)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/target/rdma.c
diff --cc drivers/nvme/target/rdma.c
index 16359fae3927,3ccb59260b4a..000000000000
--- a/drivers/nvme/target/rdma.c
+++ b/drivers/nvme/target/rdma.c
@@@ -1180,9 -1258,8 +1180,14 @@@ static int nvmet_rdma_create_queue_ib(s
  	 */
  	nr_cqe = queue->recv_queue_size + 2 * queue->send_queue_size;
  
++<<<<<<< HEAD
 +	queue->cq = ib_alloc_cq(ndev->device, queue,
 +			nr_cqe + 1, comp_vector,
 +			IB_POLL_WORKQUEUE);
++=======
+ 	queue->cq = ib_cq_pool_get(ndev->device, nr_cqe + 1,
+ 				   queue->comp_vector, IB_POLL_WORKQUEUE);
++>>>>>>> ca0f1a8055be (nvmet-rdma: use new shared CQ mechanism)
  	if (IS_ERR(queue->cq)) {
  		ret = PTR_ERR(queue->cq);
  		pr_err("failed to create CQ cqe= %d ret= %d\n",
@@@ -1239,8 -1318,10 +1244,8 @@@
  out:
  	return ret;
  
 -err_destroy_qp:
 -	rdma_destroy_qp(queue->cm_id);
  err_destroy_cq:
- 	ib_free_cq(queue->cq);
+ 	ib_cq_pool_put(queue->cq, nr_cqe + 1);
  	goto out;
  }
  
* Unmerged path drivers/nvme/target/rdma.c
