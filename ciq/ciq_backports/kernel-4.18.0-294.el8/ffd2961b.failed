powerpc/powernv/idle: add a basic stop 0-3 driver for POWER10

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Nicholas Piggin <npiggin@gmail.com>
commit ffd2961bb41f797eb00b58e019b707555197275e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ffd2961b.failed

This driver does not restore stop > 3 state, so it limits itself
to states which do not lose full state or TB.

The POWER10 SPRs are sufficiently different from P9 that it seems
easier to split out the P10 code. The POWER10 deep sleep code
(e.g., the BHRB restore) has been taken out, but it can be re-added
when stop > 3 support is added.

	Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
	Tested-by: Pratik Rajesh Sampat<psampat@linux.ibm.com>
	Tested-by: Vaidyanathan Srinivasan <svaidy@linux.ibm.com>
	Reviewed-by: Pratik Rajesh Sampat<psampat@linux.ibm.com>
	Reviewed-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200819094700.493399-1-npiggin@gmail.com
(cherry picked from commit ffd2961bb41f797eb00b58e019b707555197275e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/idle.c
diff --cc arch/powerpc/platforms/powernv/idle.c
index b8b496469770,1ed7c5286487..000000000000
--- a/arch/powerpc/platforms/powernv/idle.c
+++ b/arch/powerpc/platforms/powernv/idle.c
@@@ -663,21 -659,7 +663,25 @@@ static unsigned long power9_idle_stop(u
  		mmcr0		= mfspr(SPRN_MMCR0);
  	}
  
++<<<<<<< HEAD
 +	if (cpu_has_feature(CPU_FTR_ARCH_31)) {
 +		/*
 +		 * POWER10 uses MMCRA (BHRBRD) as BHRB disable bit.
 +		 * If the user hasn't asked for the BHRB to be
 +		 * written, the value of MMCRA[BHRBRD] is 1.
 +		 * On wakeup from stop, MMCRA[BHRBD] will be 0,
 +		 * since it is previleged resource and will be lost.
 +		 * Thus, if we do not save and restore the MMCRA[BHRBD],
 +		 * hardware will be needlessly writing to the BHRB
 +		 * in problem mode.
 +		 */
 +		mmcra		= mfspr(SPRN_MMCRA);
 +	}
 +
 +	if ((psscr & PSSCR_RL_MASK) >= pnv_first_spr_loss_level) {
++=======
+ 	if ((psscr & PSSCR_RL_MASK) >= deep_spr_loss_state) {
++>>>>>>> ffd2961bb41f (powerpc/powernv/idle: add a basic stop 0-3 driver for POWER10)
  		sprs.lpcr	= mfspr(SPRN_LPCR);
  		sprs.hfscr	= mfspr(SPRN_HFSCR);
  		sprs.fscr	= mfspr(SPRN_FSCR);
diff --git a/arch/powerpc/include/asm/machdep.h b/arch/powerpc/include/asm/machdep.h
index 2f0ca6560e47..463737ced639 100644
--- a/arch/powerpc/include/asm/machdep.h
+++ b/arch/powerpc/include/asm/machdep.h
@@ -232,8 +232,6 @@ struct machdep_calls {
 
 extern void e500_idle(void);
 extern void power4_idle(void);
-extern void power7_idle(void);
-extern void power9_idle(void);
 extern void ppc6xx_idle(void);
 extern void book3e_idle(void);
 
diff --git a/arch/powerpc/include/asm/processor.h b/arch/powerpc/include/asm/processor.h
index f28e70d21dde..d585c7abad58 100644
--- a/arch/powerpc/include/asm/processor.h
+++ b/arch/powerpc/include/asm/processor.h
@@ -429,7 +429,7 @@ enum idle_boot_override {IDLE_NO_OVERRIDE = 0, IDLE_POWERSAVE_OFF};
 extern int powersave_nap;	/* set if nap mode can be used in idle loop */
 
 extern void power7_idle_type(unsigned long type);
-extern void power9_idle_type(unsigned long stop_psscr_val,
+extern void arch300_idle_type(unsigned long stop_psscr_val,
 			      unsigned long stop_psscr_mask);
 
 extern void flush_instruction_cache(void);
diff --git a/arch/powerpc/include/asm/reg.h b/arch/powerpc/include/asm/reg.h
index 5ba65d3cfe9a..710fdf58bce1 100644
--- a/arch/powerpc/include/asm/reg.h
+++ b/arch/powerpc/include/asm/reg.h
@@ -1340,6 +1340,7 @@
 #define PVR_POWER8NVL	0x004C
 #define PVR_POWER8	0x004D
 #define PVR_POWER9	0x004E
+#define PVR_POWER10	0x0080
 #define PVR_BE		0x0070
 #define PVR_PA6T	0x0090
 
* Unmerged path arch/powerpc/platforms/powernv/idle.c
diff --git a/drivers/cpuidle/cpuidle-powernv.c b/drivers/cpuidle/cpuidle-powernv.c
index addaa6e6718b..c32c600b3cf8 100644
--- a/drivers/cpuidle/cpuidle-powernv.c
+++ b/drivers/cpuidle/cpuidle-powernv.c
@@ -141,7 +141,7 @@ static int stop_loop(struct cpuidle_device *dev,
 		     struct cpuidle_driver *drv,
 		     int index)
 {
-	power9_idle_type(stop_psscr_table[index].val,
+	arch300_idle_type(stop_psscr_table[index].val,
 			 stop_psscr_table[index].mask);
 	return index;
 }
