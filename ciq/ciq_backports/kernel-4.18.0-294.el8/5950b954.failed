iommu/io-pgtable-arm-v7s: Add paddr_to_iopte and iopte_to_paddr helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Yong Wu <yong.wu@mediatek.com>
commit 5950b9541b509037aeb9e7b95f88a692bf3f46a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5950b954.failed

Add two helper functions: paddr_to_iopte and iopte_to_paddr.

	Signed-off-by: Yong Wu <yong.wu@mediatek.com>
	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
	Reviewed-by: Evan Green <evgreen@chromium.org>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 5950b9541b509037aeb9e7b95f88a692bf3f46a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/io-pgtable-arm-v7s.c
diff --cc drivers/iommu/io-pgtable-arm-v7s.c
index eabeaa1ad468,72f1880e0c9d..000000000000
--- a/drivers/iommu/io-pgtable-arm-v7s.c
+++ b/drivers/iommu/io-pgtable-arm-v7s.c
@@@ -593,11 -603,12 +614,16 @@@ static size_t arm_v7s_split_blk_unmap(s
  		if (!ARM_V7S_PTE_IS_TABLE(pte, 1))
  			return 0;
  
++<<<<<<< HEAD
 +		tablep = iopte_deref(pte, 1);
 +		return __arm_v7s_unmap(data, gather, iova, size, 2, tablep);
++=======
+ 		tablep = iopte_deref(pte, 1, data);
+ 		return __arm_v7s_unmap(data, iova, size, 2, tablep);
++>>>>>>> 5950b9541b50 (iommu/io-pgtable-arm-v7s: Add paddr_to_iopte and iopte_to_paddr helpers)
  	}
  
 -	io_pgtable_tlb_add_flush(&data->iop, iova, size, size, true);
 -	io_pgtable_tlb_sync(&data->iop);
 +	io_pgtable_tlb_add_page(&data->iop, gather, iova, size);
  	return size;
  }
  
@@@ -649,9 -659,10 +675,16 @@@ static size_t __arm_v7s_unmap(struct ar
  		for (i = 0; i < num_entries; i++) {
  			if (ARM_V7S_PTE_IS_TABLE(pte[i], lvl)) {
  				/* Also flush any partial walks */
++<<<<<<< HEAD
 +				io_pgtable_tlb_flush_walk(iop, iova, blk_size,
 +						ARM_V7S_BLOCK_SIZE(lvl + 1));
 +				ptep = iopte_deref(pte[i], lvl);
++=======
+ 				io_pgtable_tlb_add_flush(iop, iova, blk_size,
+ 					ARM_V7S_BLOCK_SIZE(lvl + 1), false);
+ 				io_pgtable_tlb_sync(iop);
+ 				ptep = iopte_deref(pte[i], lvl, data);
++>>>>>>> 5950b9541b50 (iommu/io-pgtable-arm-v7s: Add paddr_to_iopte and iopte_to_paddr helpers)
  				__arm_v7s_free_table(ptep, lvl + 1, data);
  			} else if (iop->cfg.quirks & IO_PGTABLE_QUIRK_NON_STRICT) {
  				/*
@@@ -676,8 -687,8 +709,13 @@@
  	}
  
  	/* Keep on walkin' */
++<<<<<<< HEAD
 +	ptep = iopte_deref(pte[0], lvl);
 +	return __arm_v7s_unmap(data, gather, iova, size, lvl + 1, ptep);
++=======
+ 	ptep = iopte_deref(pte[0], lvl, data);
+ 	return __arm_v7s_unmap(data, iova, size, lvl + 1, ptep);
++>>>>>>> 5950b9541b50 (iommu/io-pgtable-arm-v7s: Add paddr_to_iopte and iopte_to_paddr helpers)
  }
  
  static size_t arm_v7s_unmap(struct io_pgtable_ops *ops, unsigned long iova,
* Unmerged path drivers/iommu/io-pgtable-arm-v7s.c
