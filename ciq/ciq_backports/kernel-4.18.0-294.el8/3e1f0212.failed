NFSv4.2: add client side XDR handling for extended attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Frank van der Linden <fllinden@amazon.com>
commit 3e1f02123fba086d32dfd5729e6f4e2b54654acc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3e1f0212.failed

Define the argument and response structures that will be used for
RFC 8276 extended attribute RPC calls, and implement the necessary
functions to encode/decode the extended attribute operations.

	Signed-off-by: Frank van der Linden <fllinden@amazon.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 3e1f02123fba086d32dfd5729e6f4e2b54654acc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs42xdr.c
diff --cc fs/nfs/nfs42xdr.c
index aed865a84629,cc50085e151c..000000000000
--- a/fs/nfs/nfs42xdr.c
+++ b/fs/nfs/nfs42xdr.c
@@@ -150,6 -169,78 +150,81 @@@
  					 decode_clone_maxsz + \
  					 decode_getattr_maxsz)
  
++<<<<<<< HEAD
++=======
+ /* Not limited by NFS itself, limited by the generic xattr code */
+ #define nfs4_xattr_name_maxsz   XDR_QUADLEN(XATTR_NAME_MAX)
+ 
+ #define encode_getxattr_maxsz   (op_encode_hdr_maxsz + 1 + \
+ 				 nfs4_xattr_name_maxsz)
+ #define decode_getxattr_maxsz   (op_decode_hdr_maxsz + 1 + 1)
+ #define encode_setxattr_maxsz   (op_encode_hdr_maxsz + \
+ 				 1 + nfs4_xattr_name_maxsz + 1)
+ #define decode_setxattr_maxsz   (op_decode_hdr_maxsz + decode_change_info_maxsz)
+ #define encode_listxattrs_maxsz  (op_encode_hdr_maxsz + 2 + 1)
+ #define decode_listxattrs_maxsz  (op_decode_hdr_maxsz + 2 + 1 + 1)
+ #define encode_removexattr_maxsz (op_encode_hdr_maxsz + 1 + \
+ 				  nfs4_xattr_name_maxsz)
+ #define decode_removexattr_maxsz (op_decode_hdr_maxsz + \
+ 				  decode_change_info_maxsz)
+ 
+ #define NFS4_enc_getxattr_sz	(compound_encode_hdr_maxsz + \
+ 				encode_sequence_maxsz + \
+ 				encode_putfh_maxsz + \
+ 				encode_getxattr_maxsz)
+ #define NFS4_dec_getxattr_sz	(compound_decode_hdr_maxsz + \
+ 				decode_sequence_maxsz + \
+ 				decode_putfh_maxsz + \
+ 				decode_getxattr_maxsz)
+ #define NFS4_enc_setxattr_sz	(compound_encode_hdr_maxsz + \
+ 				encode_sequence_maxsz + \
+ 				encode_putfh_maxsz + \
+ 				encode_setxattr_maxsz)
+ #define NFS4_dec_setxattr_sz	(compound_decode_hdr_maxsz + \
+ 				decode_sequence_maxsz + \
+ 				decode_putfh_maxsz + \
+ 				decode_setxattr_maxsz)
+ #define NFS4_enc_listxattrs_sz	(compound_encode_hdr_maxsz + \
+ 				encode_sequence_maxsz + \
+ 				encode_putfh_maxsz + \
+ 				encode_listxattrs_maxsz)
+ #define NFS4_dec_listxattrs_sz	(compound_decode_hdr_maxsz + \
+ 				decode_sequence_maxsz + \
+ 				decode_putfh_maxsz + \
+ 				decode_listxattrs_maxsz)
+ #define NFS4_enc_removexattr_sz	(compound_encode_hdr_maxsz + \
+ 				encode_sequence_maxsz + \
+ 				encode_putfh_maxsz + \
+ 				encode_removexattr_maxsz)
+ #define NFS4_dec_removexattr_sz	(compound_decode_hdr_maxsz + \
+ 				decode_sequence_maxsz + \
+ 				decode_putfh_maxsz + \
+ 				decode_removexattr_maxsz)
+ 
+ /*
+  * These values specify the maximum amount of data that is not
+  * associated with the extended attribute name or extended
+  * attribute list in the SETXATTR, GETXATTR and LISTXATTR
+  * respectively.
+  */
+ const u32 nfs42_maxsetxattr_overhead = ((RPC_MAX_HEADER_WITH_AUTH +
+ 					compound_encode_hdr_maxsz +
+ 					encode_sequence_maxsz +
+ 					encode_putfh_maxsz + 1 +
+ 					nfs4_xattr_name_maxsz)
+ 					* XDR_UNIT);
+ 
+ const u32 nfs42_maxgetxattr_overhead = ((RPC_MAX_HEADER_WITH_AUTH +
+ 					compound_decode_hdr_maxsz +
+ 					decode_sequence_maxsz +
+ 					decode_putfh_maxsz + 1) * XDR_UNIT);
+ 
+ const u32 nfs42_maxlistxattrs_overhead = ((RPC_MAX_HEADER_WITH_AUTH +
+ 					compound_decode_hdr_maxsz +
+ 					decode_sequence_maxsz +
+ 					decode_putfh_maxsz + 3) * XDR_UNIT);
+ 
++>>>>>>> 3e1f02123fba (NFSv4.2: add client side XDR handling for extended attributes)
  static void encode_fallocate(struct xdr_stream *xdr,
  			     const struct nfs42_falloc_args *args)
  {
* Unmerged path fs/nfs/nfs42xdr.c
diff --git a/fs/nfs/nfs4xdr.c b/fs/nfs/nfs4xdr.c
index f96377691326..74ba18c48469 100644
--- a/fs/nfs/nfs4xdr.c
+++ b/fs/nfs/nfs4xdr.c
@@ -7460,6 +7460,8 @@ static struct {
 	{ NFS4ERR_SYMLINK,	-ELOOP		},
 	{ NFS4ERR_OP_ILLEGAL,	-EOPNOTSUPP	},
 	{ NFS4ERR_DEADLOCK,	-EDEADLK	},
+	{ NFS4ERR_NOXATTR,	-ENODATA	},
+	{ NFS4ERR_XATTR2BIG,	-E2BIG		},
 	{ -1,			-EIO		}
 };
 
@@ -7587,6 +7589,10 @@ const struct rpc_procinfo nfs4_procedures[] = {
 	PROC42(OFFLOAD_CANCEL,	enc_offload_cancel,	dec_offload_cancel),
 	PROC(LOOKUPP,		enc_lookupp,		dec_lookupp),
 	PROC42(LAYOUTERROR,	enc_layouterror,	dec_layouterror),
+	PROC42(GETXATTR,	enc_getxattr,		dec_getxattr),
+	PROC42(SETXATTR,	enc_setxattr,		dec_setxattr),
+	PROC42(LISTXATTRS,	enc_listxattrs,		dec_listxattrs),
+	PROC42(REMOVEXATTR,	enc_removexattr,	dec_removexattr),
 };
 
 static unsigned int nfs_version4_counts[ARRAY_SIZE(nfs4_procedures)];
diff --git a/include/linux/nfs_xdr.h b/include/linux/nfs_xdr.h
index d33860bd0e9e..ca47b8d0e441 100644
--- a/include/linux/nfs_xdr.h
+++ b/include/linux/nfs_xdr.h
@@ -1470,7 +1470,64 @@ struct nfs42_seek_res {
 	u32	sr_eof;
 	u64	sr_offset;
 };
-#endif
+
+struct nfs42_setxattrargs {
+	struct nfs4_sequence_args	seq_args;
+	struct nfs_fh			*fh;
+	const char			*xattr_name;
+	u32				xattr_flags;
+	size_t				xattr_len;
+	struct page			**xattr_pages;
+};
+
+struct nfs42_setxattrres {
+	struct nfs4_sequence_res	seq_res;
+	struct nfs4_change_info		cinfo;
+};
+
+struct nfs42_getxattrargs {
+	struct nfs4_sequence_args	seq_args;
+	struct nfs_fh			*fh;
+	const char			*xattr_name;
+	size_t				xattr_len;
+	struct page			**xattr_pages;
+};
+
+struct nfs42_getxattrres {
+	struct nfs4_sequence_res	seq_res;
+	size_t				xattr_len;
+};
+
+struct nfs42_listxattrsargs {
+	struct nfs4_sequence_args	seq_args;
+	struct nfs_fh			*fh;
+	u32				count;
+	u64				cookie;
+	struct page			**xattr_pages;
+};
+
+struct nfs42_listxattrsres {
+	struct nfs4_sequence_res	seq_res;
+	struct page			*scratch;
+	void				*xattr_buf;
+	size_t				xattr_len;
+	u64				cookie;
+	bool				eof;
+	size_t				copied;
+};
+
+struct nfs42_removexattrargs {
+	struct nfs4_sequence_args	seq_args;
+	struct nfs_fh			*fh;
+	const char			*xattr_name;
+};
+
+struct nfs42_removexattrres {
+	struct nfs4_sequence_res	seq_res;
+	struct nfs4_change_info		cinfo;
+};
+
+#endif /* CONFIG_NFS_V4_2 */
 
 struct nfs_page;
 
