x86/mm: use helper fault_signal_pending()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Peter Xu <peterx@redhat.com>
commit 39678191cd8988c811813baf4c97b43bf46094e4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/39678191.failed

Let's move the fatal signal check even earlier so that we can directly use
the new fault_signal_pending() in x86 mm code.

	Signed-off-by: Peter Xu <peterx@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Tested-by: Brian Geffon <bgeffon@google.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Bobby Powers <bobbypowers@gmail.com>
	Cc: David Hildenbrand <david@redhat.com>
	Cc: Denis Plotnikov <dplotnikov@virtuozzo.com>
	Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Jerome Glisse <jglisse@redhat.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: "Kirill A . Shutemov" <kirill@shutemov.name>
	Cc: Martin Cracauer <cracauer@cons.org>
	Cc: Marty McFadden <mcfadden8@llnl.gov>
	Cc: Matthew Wilcox <willy@infradead.org>
	Cc: Maya Gokhale <gokhale2@llnl.gov>
	Cc: Mel Gorman <mgorman@suse.de>
	Cc: Mike Kravetz <mike.kravetz@oracle.com>
	Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
	Cc: Pavel Emelyanov <xemul@openvz.org>
Link: http://lkml.kernel.org/r/20200220155353.8676-5-peterx@redhat.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 39678191cd8988c811813baf4c97b43bf46094e4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/fault.c
diff --cc arch/x86/mm/fault.c
index 387b6dbf768c,552770b6af9a..000000000000
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@@ -1397,22 -1477,12 +1405,29 @@@ good_area
  	 * and if there is a fatal signal pending there is no guarantee
  	 * that we made any progress. Handle this case first.
  	 */
- 	if (unlikely(fault & VM_FAULT_RETRY)) {
+ 	if (unlikely((fault & VM_FAULT_RETRY) &&
+ 		     (flags & FAULT_FLAG_ALLOW_RETRY))) {
  		/* Retry at most once */
++<<<<<<< HEAD
 +		if (flags & FAULT_FLAG_ALLOW_RETRY) {
 +			flags &= ~FAULT_FLAG_ALLOW_RETRY;
 +			flags |= FAULT_FLAG_TRIED;
 +			if (!fatal_signal_pending(tsk))
 +				goto retry;
 +		}
 +
 +		/* User mode? Just return to handle the fatal exception */
 +		if (flags & FAULT_FLAG_USER)
 +			return;
 +
 +		/* Not returning to user mode? Handle exceptions or die: */
 +		no_context(regs, sw_error_code, address, SIGBUS, BUS_ADRERR);
 +		return;
++=======
+ 		flags &= ~FAULT_FLAG_ALLOW_RETRY;
+ 		flags |= FAULT_FLAG_TRIED;
+ 		goto retry;
++>>>>>>> 39678191cd89 (x86/mm: use helper fault_signal_pending())
  	}
  
  	up_read(&mm->mmap_sem);
* Unmerged path arch/x86/mm/fault.c
