net/mlx5e: Rename xmit-related structs to generalize them

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Maxim Mikityanskiy <maximmi@mellanox.com>
commit b39fe61edc50aff03a7188c1ad925c61af5ea882
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b39fe61e.failed

As preparation for the upcoming TX MPWQE support for SKBs, rename struct
mlx5e_xdp_mpwqe to mlx5e_tx_mpwqe and move it above struct mlx5e_txqsq.
This structure will be reused in the regular SQ and in the regular TX
data path. Also rename mlx5e_xdp_xmit_data to mlx5e_xmit_data - it will
be used in the upcoming TX MPWQE flow.

	Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit b39fe61edc50aff03a7188c1ad925c61af5ea882)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/xsk/tx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
index 5bd77669337b,06dbfd6cd82a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
@@@ -215,6 -277,13 +215,16 @@@ mlx5e_tx_dma_unmap(struct device *pdev
  	}
  }
  
++<<<<<<< HEAD
++=======
+ void mlx5e_sq_xmit_simple(struct mlx5e_txqsq *sq, struct sk_buff *skb, bool xmit_more);
+ 
+ static inline bool mlx5e_tx_mpwqe_is_full(struct mlx5e_tx_mpwqe *session)
+ {
+ 	return session->ds_count == MLX5E_TX_MPW_MAX_NUM_DS;
+ }
+ 
++>>>>>>> b39fe61edc50 (net/mlx5e: Rename xmit-related structs to generalize them)
  static inline void mlx5e_rqwq_reset(struct mlx5e_rq *rq)
  {
  	if (rq->wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ) {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
index 367a398562d2,f0a102763de6..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
@@@ -210,18 -194,21 +210,27 @@@ static u16 mlx5e_xdpsq_get_next_pi(stru
  
  static void mlx5e_xdp_mpwqe_session_start(struct mlx5e_xdpsq *sq)
  {
- 	struct mlx5e_xdp_mpwqe *session = &sq->mpwqe;
+ 	struct mlx5e_tx_mpwqe *session = &sq->mpwqe;
  	struct mlx5e_xdpsq_stats *stats = sq->stats;
 -	struct mlx5e_tx_wqe *wqe;
  	u16 pi;
  
 -	pi = mlx5e_xdpsq_get_next_pi(sq, MLX5E_TX_MPW_MAX_WQEBBS);
 -	wqe = MLX5E_TX_FETCH_WQE(sq, pi);
 -	net_prefetchw(wqe->data);
 +	pi = mlx5e_xdpsq_get_next_pi(sq, MLX5E_XDP_MPW_MAX_WQEBBS);
 +	session->wqe = MLX5E_TX_FETCH_WQE(sq, pi);
  
++<<<<<<< HEAD
 +	prefetchw(session->wqe->data);
 +	session->ds_count  = MLX5E_XDP_TX_EMPTY_DS_COUNT;
 +	session->pkt_count = 0;
 +
 +	mlx5e_xdp_update_inline_state(sq);
++=======
+ 	*session = (struct mlx5e_tx_mpwqe) {
+ 		.wqe = wqe,
+ 		.ds_count = MLX5E_TX_WQE_EMPTY_DS_COUNT,
+ 		.pkt_count = 0,
+ 		.inline_on = mlx5e_xdp_get_inline_state(sq, session->inline_on),
+ 	};
++>>>>>>> b39fe61edc50 (net/mlx5e: Rename xmit-related structs to generalize them)
  
  	stats->mpwqe++;
  }
@@@ -273,12 -260,11 +282,18 @@@ static int mlx5e_xmit_xdp_frame_check_m
  	return MLX5E_XDP_CHECK_OK;
  }
  
++<<<<<<< HEAD
 +static bool mlx5e_xmit_xdp_frame_mpwqe(struct mlx5e_xdpsq *sq,
 +				       struct mlx5e_xdp_xmit_data *xdptxd,
 +				       struct mlx5e_xdp_info *xdpi,
 +				       int check_result)
++=======
+ INDIRECT_CALLABLE_SCOPE bool
+ mlx5e_xmit_xdp_frame_mpwqe(struct mlx5e_xdpsq *sq, struct mlx5e_xmit_data *xdptxd,
+ 			   struct mlx5e_xdp_info *xdpi, int check_result)
++>>>>>>> b39fe61edc50 (net/mlx5e: Rename xmit-related structs to generalize them)
  {
- 	struct mlx5e_xdp_mpwqe *session = &sq->mpwqe;
+ 	struct mlx5e_tx_mpwqe *session = &sq->mpwqe;
  	struct mlx5e_xdpsq_stats *stats = sq->stats;
  
  	if (unlikely(xdptxd->len > sq->hw_mtu)) {
@@@ -321,10 -307,9 +336,16 @@@ static int mlx5e_xmit_xdp_frame_check(s
  	return MLX5E_XDP_CHECK_OK;
  }
  
++<<<<<<< HEAD
 +static bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq,
 +				 struct mlx5e_xdp_xmit_data *xdptxd,
 +				 struct mlx5e_xdp_info *xdpi,
 +				 int check_result)
++=======
+ INDIRECT_CALLABLE_SCOPE bool
+ mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xmit_data *xdptxd,
+ 		     struct mlx5e_xdp_info *xdpi, int check_result)
++>>>>>>> b39fe61edc50 (net/mlx5e: Rename xmit-related structs to generalize them)
  {
  	struct mlx5_wq_cyc       *wq   = &sq->wq;
  	u16                       pi   = mlx5_wq_cyc_ctr2ix(wq, sq->pc);
@@@ -520,8 -505,9 +541,8 @@@ int mlx5e_xdp_xmit(struct net_device *d
  
  	for (i = 0; i < n; i++) {
  		struct xdp_frame *xdpf = frames[i];
- 		struct mlx5e_xdp_xmit_data xdptxd;
+ 		struct mlx5e_xmit_data xdptxd;
  		struct mlx5e_xdp_info xdpi;
 -		bool ret;
  
  		xdptxd.data = xdpf->data;
  		xdptxd.len = xdpf->len;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
index b7a97dc7cba2,4bd8af478a4a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
@@@ -71,6 -57,17 +71,20 @@@ void mlx5e_xdp_rx_poll_complete(struct 
  int mlx5e_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames,
  		   u32 flags);
  
++<<<<<<< HEAD
++=======
+ INDIRECT_CALLABLE_DECLARE(bool mlx5e_xmit_xdp_frame_mpwqe(struct mlx5e_xdpsq *sq,
+ 							  struct mlx5e_xmit_data *xdptxd,
+ 							  struct mlx5e_xdp_info *xdpi,
+ 							  int check_result));
+ INDIRECT_CALLABLE_DECLARE(bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq,
+ 						    struct mlx5e_xmit_data *xdptxd,
+ 						    struct mlx5e_xdp_info *xdpi,
+ 						    int check_result));
+ INDIRECT_CALLABLE_DECLARE(int mlx5e_xmit_xdp_frame_check_mpwqe(struct mlx5e_xdpsq *sq));
+ INDIRECT_CALLABLE_DECLARE(int mlx5e_xmit_xdp_frame_check(struct mlx5e_xdpsq *sq));
+ 
++>>>>>>> b39fe61edc50 (net/mlx5e: Rename xmit-related structs to generalize them)
  static inline void mlx5e_xdp_tx_enable(struct mlx5e_priv *priv)
  {
  	set_bit(MLX5E_STATE_XDP_TX_ENABLED, &priv->state);
@@@ -118,18 -114,16 +132,18 @@@ static inline void mlx5e_xdp_update_inl
  #define MLX5E_XDP_INLINE_WATERMARK_LOW	10
  #define MLX5E_XDP_INLINE_WATERMARK_HIGH 128
  
 -	if (cur && outstanding <= MLX5E_XDP_INLINE_WATERMARK_LOW)
 -		return false;
 -
 -	if (!cur && outstanding >= MLX5E_XDP_INLINE_WATERMARK_HIGH)
 -		return true;
 +	if (session->inline_on) {
 +		if (outstanding <= MLX5E_XDP_INLINE_WATERMARK_LOW)
 +			session->inline_on = 0;
 +		return;
 +	}
  
 -	return cur;
 +	/* inline is false */
 +	if (outstanding >= MLX5E_XDP_INLINE_WATERMARK_HIGH)
 +		session->inline_on = 1;
  }
  
- static inline bool mlx5e_xdp_mpqwe_is_full(struct mlx5e_xdp_mpwqe *session)
+ static inline bool mlx5e_xdp_mpqwe_is_full(struct mlx5e_tx_mpwqe *session)
  {
  	if (session->inline_on)
  		return session->ds_count + MLX5E_XDP_INLINE_WQE_MAX_DS_CNT >
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/xsk/tx.c
index 11085a861787,fb671a457129..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xsk/tx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xsk/tx.c
@@@ -66,9 -66,9 +66,13 @@@ static void mlx5e_xsk_tx_post_err(struc
  
  bool mlx5e_xsk_tx(struct mlx5e_xdpsq *sq, unsigned int budget)
  {
++<<<<<<< HEAD
 +	struct xdp_umem *umem = sq->umem;
++=======
+ 	struct xsk_buff_pool *pool = sq->xsk_pool;
+ 	struct mlx5e_xmit_data xdptxd;
++>>>>>>> b39fe61edc50 (net/mlx5e: Rename xmit-related structs to generalize them)
  	struct mlx5e_xdp_info xdpi;
- 	struct mlx5e_xdp_xmit_data xdptxd;
  	bool work_done = true;
  	bool flush = false;
  
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 7220dce1dd10..8d52f1ec7e4e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -316,6 +316,14 @@ enum {
 	MLX5E_SQ_STATE_PENDING_XSK_TX,
 };
 
+struct mlx5e_tx_mpwqe {
+	/* Current MPWQE session */
+	struct mlx5e_tx_wqe *wqe;
+	u8 ds_count;
+	u8 pkt_count;
+	u8 inline_on;
+};
+
 struct mlx5e_txqsq {
 	/* data path */
 
@@ -405,7 +413,7 @@ struct mlx5e_xdp_info {
 	};
 };
 
-struct mlx5e_xdp_xmit_data {
+struct mlx5e_xmit_data {
 	dma_addr_t  dma_addr;
 	void       *data;
 	u32         len;
@@ -418,18 +426,10 @@ struct mlx5e_xdp_info_fifo {
 	u32 mask;
 };
 
-struct mlx5e_xdp_mpwqe {
-	/* Current MPWQE session */
-	struct mlx5e_tx_wqe *wqe;
-	u8                   ds_count;
-	u8                   pkt_count;
-	u8                   inline_on;
-};
-
 struct mlx5e_xdpsq;
 typedef int (*mlx5e_fp_xmit_xdp_frame_check)(struct mlx5e_xdpsq *);
 typedef bool (*mlx5e_fp_xmit_xdp_frame)(struct mlx5e_xdpsq *,
-					struct mlx5e_xdp_xmit_data *,
+					struct mlx5e_xmit_data *,
 					struct mlx5e_xdp_info *,
 					int);
 
@@ -444,7 +444,7 @@ struct mlx5e_xdpsq {
 	u32                        xdpi_fifo_pc ____cacheline_aligned_in_smp;
 	u16                        pc;
 	struct mlx5_wqe_ctrl_seg   *doorbell_cseg;
-	struct mlx5e_xdp_mpwqe     mpwqe;
+	struct mlx5e_tx_mpwqe      mpwqe;
 
 	struct mlx5e_cq            cq;
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/txrx.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xsk/tx.c
