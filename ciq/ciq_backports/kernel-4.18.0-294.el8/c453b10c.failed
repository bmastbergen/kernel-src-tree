Bluetooth: btusb: Configure Intel debug feature based on available support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Chethan T N <chethan.tumkur.narayan@intel.com>
commit c453b10c2b28580849e382565c2e8a18ecc8bc24
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c453b10c.failed

This patch shall enable the Intel telemetry exception format
based on the supported features

	Signed-off-by: Chethan T N <chethan.tumkur.narayan@intel.com>
	Signed-off-by: Ps AyappadasX <AyappadasX.Ps@intel.com>
	Signed-off-by: Kiran K <kiran.k@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit c453b10c2b28580849e382565c2e8a18ecc8bc24)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btintel.c
#	drivers/bluetooth/btintel.h
#	drivers/bluetooth/btusb.c
diff --cc drivers/bluetooth/btintel.c
index e866dcb89de6,5fa5be3c5598..000000000000
--- a/drivers/bluetooth/btintel.c
+++ b/drivers/bluetooth/btintel.c
@@@ -769,6 -754,65 +769,68 @@@ void btintel_reset_to_bootloader(struc
  }
  EXPORT_SYMBOL_GPL(btintel_reset_to_bootloader);
  
++<<<<<<< HEAD
++=======
+ int btintel_read_debug_features(struct hci_dev *hdev,
+ 				struct intel_debug_features *features)
+ {
+ 	struct sk_buff *skb;
+ 	u8 page_no = 1;
+ 
+ 	/* Intel controller supports two pages, each page is of 128-bit
+ 	 * feature bit mask. And each bit defines specific feature support
+ 	 */
+ 	skb = __hci_cmd_sync(hdev, 0xfca6, sizeof(page_no), &page_no,
+ 			     HCI_INIT_TIMEOUT);
+ 	if (IS_ERR(skb)) {
+ 		bt_dev_err(hdev, "Reading supported features failed (%ld)",
+ 			   PTR_ERR(skb));
+ 		return PTR_ERR(skb);
+ 	}
+ 
+ 	if (skb->len != (sizeof(features->page1) + 3)) {
+ 		bt_dev_err(hdev, "Supported features event size mismatch");
+ 		kfree_skb(skb);
+ 		return -EILSEQ;
+ 	}
+ 
+ 	memcpy(features->page1, skb->data + 3, sizeof(features->page1));
+ 
+ 	/* Read the supported features page2 if required in future.
+ 	 */
+ 	kfree_skb(skb);
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(btintel_read_debug_features);
+ 
+ int btintel_set_debug_features(struct hci_dev *hdev,
+ 			       const struct intel_debug_features *features)
+ {
+ 	u8 mask[11] = { 0x0a, 0x92, 0x02, 0x07, 0x00, 0x00, 0x00, 0x00,
+ 			0x00, 0x00, 0x00 };
+ 	struct sk_buff *skb;
+ 
+ 	if (!features)
+ 		return -EINVAL;
+ 
+ 	if (!(features->page1[0] & 0x3f)) {
+ 		bt_dev_info(hdev, "Telemetry exception format not supported");
+ 		return 0;
+ 	}
+ 
+ 	skb = __hci_cmd_sync(hdev, 0xfc8b, 11, mask, HCI_INIT_TIMEOUT);
+ 	if (IS_ERR(skb)) {
+ 		bt_dev_err(hdev, "Setting Intel telemetry ddc write event mask failed (%ld)",
+ 			   PTR_ERR(skb));
+ 		return PTR_ERR(skb);
+ 	}
+ 
+ 	kfree_skb(skb);
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(btintel_set_debug_features);
+ 
++>>>>>>> c453b10c2b28 (Bluetooth: btusb: Configure Intel debug feature based on available support)
  MODULE_AUTHOR("Marcel Holtmann <marcel@holtmann.org>");
  MODULE_DESCRIPTION("Bluetooth support for Intel devices ver " VERSION);
  MODULE_VERSION(VERSION);
diff --cc drivers/bluetooth/btintel.h
index 4265441bf728,08e20606fb58..000000000000
--- a/drivers/bluetooth/btintel.h
+++ b/drivers/bluetooth/btintel.h
@@@ -103,6 -92,10 +103,13 @@@ int btintel_read_boot_params(struct hci
  int btintel_download_firmware(struct hci_dev *dev, const struct firmware *fw,
  			      u32 *boot_param);
  void btintel_reset_to_bootloader(struct hci_dev *hdev);
++<<<<<<< HEAD
++=======
+ int btintel_read_debug_features(struct hci_dev *hdev,
+ 				struct intel_debug_features *features);
+ int btintel_set_debug_features(struct hci_dev *hdev,
+ 			       const struct intel_debug_features *features);
++>>>>>>> c453b10c2b28 (Bluetooth: btusb: Configure Intel debug feature based on available support)
  #else
  
  static inline int btintel_check_bdaddr(struct hci_dev *hdev)
@@@ -201,4 -194,17 +208,20 @@@ static inline int btintel_download_firm
  static inline void btintel_reset_to_bootloader(struct hci_dev *hdev)
  {
  }
++<<<<<<< HEAD
++=======
+ 
+ static inline int btintel_read_debug_features(struct hci_dev *hdev,
+ 					      struct intel_debug_features *features)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ 
+ static inline int btintel_set_debug_features(struct hci_dev *hdev,
+ 					     const struct intel_debug_features *features)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ 
++>>>>>>> c453b10c2b28 (Bluetooth: btusb: Configure Intel debug feature based on available support)
  #endif
diff --cc drivers/bluetooth/btusb.c
index 597b1987a454,c7cc8e594166..000000000000
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@@ -2467,6 -2543,31 +2467,34 @@@ done
  	 */
  	btintel_load_ddc_config(hdev, fwname);
  
++<<<<<<< HEAD
++=======
+ 	/* Read the Intel supported features and if new exception formats
+ 	 * supported, need to load the additional DDC config to enable.
+ 	 */
+ 	btintel_read_debug_features(hdev, &features);
+ 
+ 	/* Set DDC mask for available debug features */
+ 	btintel_set_debug_features(hdev, &features);
+ 
+ 	/* Read the Intel version information after loading the FW  */
+ 	err = btintel_read_version(hdev, &ver);
+ 	if (err)
+ 		return err;
+ 
+ 	btintel_version_info(hdev, &ver);
+ 
+ finish:
+ 	/* All Intel controllers that support the Microsoft vendor
+ 	 * extension are using 0xFC1E for VsMsftOpCode.
+ 	 */
+ 	switch (ver.hw_variant) {
+ 	case 0x12:	/* ThP */
+ 		hci_set_msft_opcode(hdev, 0xFC1E);
+ 		break;
+ 	}
+ 
++>>>>>>> c453b10c2b28 (Bluetooth: btusb: Configure Intel debug feature based on available support)
  	/* Set the event mask for Intel specific vendor events. This enables
  	 * a few extra events that are useful during general operation. It
  	 * does not enable any debugging related events.
* Unmerged path drivers/bluetooth/btintel.c
* Unmerged path drivers/bluetooth/btintel.h
* Unmerged path drivers/bluetooth/btusb.c
