x86/traps: Use cpu_entry_area instead of orig_ist

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Thomas Gleixner <tglx@linutronix.de>
commit d876b67343a648f3613506c7dbfed088fa0c875b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d876b673.failed

The orig_ist[] array is a shadow copy of the IST array in the TSS. The
reason why it exists is that older kernels used two TSS variants with
different pointers into the debug stack. orig_ist[] contains the real
starting points.

There is no point anymore to do so because the same information can be
retrieved using the base address of the cpu entry area mapping and the
offsets of the various exception stacks.

No functional change. Preparation for removing orig_ist.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Sean Christopherson <sean.j.christopherson@intel.com>
	Cc: x86-ml <x86@kernel.org>
Link: https://lkml.kernel.org/r/20190414160144.784487230@linutronix.de
(cherry picked from commit d876b67343a648f3613506c7dbfed088fa0c875b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/fault.c
diff --cc arch/x86/mm/fault.c
index 387b6dbf768c,06c089513d39..000000000000
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@@ -27,6 -27,8 +27,11 @@@
  #include <asm/vm86.h>			/* struct vm86			*/
  #include <asm/mmu_context.h>		/* vma_pkey()			*/
  #include <asm/efi.h>			/* efi_recover_from_page_fault()*/
++<<<<<<< HEAD
++=======
+ #include <asm/desc.h>			/* store_idt(), ...		*/
+ #include <asm/cpu_entry_area.h>		/* exception stack		*/
++>>>>>>> d876b67343a6 (x86/traps: Use cpu_entry_area instead of orig_ist)
  
  #define CREATE_TRACE_POINTS
  #include <asm/trace/exceptions.h>
@@@ -702,7 -794,7 +707,11 @@@ no_context(struct pt_regs *regs, unsign
  	if (is_vmalloc_addr((void *)address) &&
  	    (((unsigned long)tsk->stack - 1 - address < PAGE_SIZE) ||
  	     address - ((unsigned long)tsk->stack + THREAD_SIZE) < PAGE_SIZE)) {
++<<<<<<< HEAD
 +		unsigned long stack = this_cpu_read(orig_ist.ist[DOUBLEFAULT_STACK]) - sizeof(void *);
++=======
+ 		unsigned long stack = __this_cpu_ist_top_va(DF) - sizeof(void *);
++>>>>>>> d876b67343a6 (x86/traps: Use cpu_entry_area instead of orig_ist)
  		/*
  		 * We're likely to be running with very little stack space
  		 * left.  It's plausible that we'd hit this condition but
* Unmerged path arch/x86/mm/fault.c
