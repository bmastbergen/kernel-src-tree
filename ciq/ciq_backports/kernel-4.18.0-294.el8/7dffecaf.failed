KVM: x86: report negative values from wrmsr emulation to userspace

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Maxim Levitsky <mlevitsk@redhat.com>
commit 7dffecaf4eabb700e7aef3cc6da333517cfc242a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7dffecaf.failed

This will allow the KVM to report such errors (e.g -ENOMEM)
to the userspace.

	Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
Message-Id: <20201001112954.6258-3-mlevitsk@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 7dffecaf4eabb700e7aef3cc6da333517cfc242a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/emulate.c
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/emulate.c
index c664cb02f921,0d917eb70319..000000000000
--- a/arch/x86/kvm/emulate.c
+++ b/arch/x86/kvm/emulate.c
@@@ -3704,10 -3706,16 +3704,19 @@@ static int em_wrmsr(struct x86_emulate_
  
  	msr_data = (u32)reg_read(ctxt, VCPU_REGS_RAX)
  		| ((u64)reg_read(ctxt, VCPU_REGS_RDX) << 32);
++<<<<<<< HEAD
 +	if (ctxt->ops->set_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), msr_data))
++=======
+ 	r = ctxt->ops->set_msr(ctxt, msr_index, msr_data);
+ 
+ 	if (r == X86EMUL_IO_NEEDED)
+ 		return r;
+ 
+ 	if (r > 0)
++>>>>>>> 7dffecaf4eab (KVM: x86: report negative values from wrmsr emulation to userspace)
  		return emulate_gp(ctxt, 0);
  
- 	return X86EMUL_CONTINUE;
+ 	return r < 0 ? X86EMUL_UNHANDLEABLE : X86EMUL_CONTINUE;
  }
  
  static int em_rdmsr(struct x86_emulate_ctxt *ctxt)
diff --cc arch/x86/kvm/x86.c
index 6339ddb4d45f,ecdeab8fa0b1..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -1609,8 -1732,21 +1609,24 @@@ int kvm_emulate_wrmsr(struct kvm_vcpu *
  {
  	u32 ecx = kvm_rcx_read(vcpu);
  	u64 data = kvm_read_edx_eax(vcpu);
 -	int r;
  
++<<<<<<< HEAD
 +	if (kvm_set_msr(vcpu, ecx, data)) {
++=======
+ 	r = kvm_set_msr(vcpu, ecx, data);
+ 
+ 	/* MSR write failed? See if we should ask user space */
+ 	if (r && kvm_set_msr_user_space(vcpu, ecx, data, r))
+ 		/* Bounce to user space */
+ 		return 0;
+ 
+ 	/* Signal all other negative errors to userspace */
+ 	if (r < 0)
+ 		return r;
+ 
+ 	/* MSR write failed? Inject a #GP */
+ 	if (r > 0) {
++>>>>>>> 7dffecaf4eab (KVM: x86: report negative values from wrmsr emulation to userspace)
  		trace_kvm_msr_write_ex(ecx, data);
  		kvm_inject_gp(vcpu, 0);
  		return 1;
* Unmerged path arch/x86/kvm/emulate.c
* Unmerged path arch/x86/kvm/x86.c
