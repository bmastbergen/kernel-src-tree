mptcp: introduce mptcp_schedule_work

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit ba8f48f7a4d79352b764ace585b5f602ef940be0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ba8f48f7.failed

remove some of code duplications an allow preventing
rescheduling on close.

	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit ba8f48f7a4d79352b764ace585b5f602ef940be0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/pm.c
#	net/mptcp/protocol.c
diff --cc net/mptcp/pm.c
index a78fc80f9b51,f9c88e2abb8e..000000000000
--- a/net/mptcp/pm.c
+++ b/net/mptcp/pm.c
@@@ -80,8 -89,7 +80,12 @@@ static bool mptcp_pm_schedule_work(stru
  		return false;
  
  	msk->pm.status |= BIT(new_status);
++<<<<<<< HEAD
 +	if (queue_work(pm_wq, &msk->pm.work))
 +		sock_hold((struct sock *)msk);
++=======
+ 	mptcp_schedule_work((struct sock *)msk);
++>>>>>>> ba8f48f7a4d7 (mptcp: introduce mptcp_schedule_work)
  	return true;
  }
  
diff --cc net/mptcp/protocol.c
index 832286dada3b,0e725f18af24..000000000000
--- a/net/mptcp/protocol.c
+++ b/net/mptcp/protocol.c
@@@ -439,8 -611,18 +439,21 @@@ static bool move_skbs_to_msk(struct mpt
  		return false;
  
  	/* must re-check after taking the lock */
 -	if (!READ_ONCE(sk->sk_lock.owned)) {
 +	if (!READ_ONCE(sk->sk_lock.owned))
  		__mptcp_move_skbs_from_subflow(msk, ssk, &moved);
++<<<<<<< HEAD
++=======
+ 		mptcp_ofo_queue(msk);
+ 
+ 		/* If the moves have caught up with the DATA_FIN sequence number
+ 		 * it's time to ack the DATA_FIN and change socket state, but
+ 		 * this is not a good place to change state. Let the workqueue
+ 		 * do it.
+ 		 */
+ 		if (mptcp_pending_data_fin(sk, NULL))
+ 			mptcp_schedule_work(sk);
+ 	}
++>>>>>>> ba8f48f7a4d7 (mptcp: introduce mptcp_schedule_work)
  
  	spin_unlock_bh(&sk->sk_lock.slock);
  
* Unmerged path net/mptcp/pm.c
* Unmerged path net/mptcp/protocol.c
diff --git a/net/mptcp/protocol.h b/net/mptcp/protocol.h
index 35072e9204c8..f2c67f3be4b9 100644
--- a/net/mptcp/protocol.h
+++ b/net/mptcp/protocol.h
@@ -391,6 +391,7 @@ static inline bool mptcp_is_fully_established(struct sock *sk)
 void mptcp_rcv_space_init(struct mptcp_sock *msk, const struct sock *ssk);
 void mptcp_data_ready(struct sock *sk, struct sock *ssk);
 bool mptcp_finish_join(struct sock *sk);
+bool mptcp_schedule_work(struct sock *sk);
 void mptcp_data_acked(struct sock *sk);
 void mptcp_subflow_eof(struct sock *sk);
 bool mptcp_update_rcv_data_fin(struct mptcp_sock *msk, u64 data_fin_seq, bool use_64bit);
