cgroup2: switch to option-by-option parsing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit e34a98d5b226b84a3ed6da93e7a92e65cc1c81ba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e34a98d5.failed

[again, carved out of patch by dhowells]
[NB: we probably want to handle "source" in parse_param here]

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit e34a98d5b226b84a3ed6da93e7a92e65cc1c81ba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/cgroup/cgroup.c
diff --cc kernel/cgroup/cgroup.c
index 9e08519ae6db,d0cddfbdf5cf..000000000000
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@@ -2050,45 -2074,79 +2062,107 @@@ struct dentry *cgroup_do_mount(struct f
  	return dentry;
  }
  
++<<<<<<< HEAD
 +static struct dentry *cgroup_mount(struct file_system_type *fs_type,
 +			 int flags, const char *unused_dev_name,
 +			 void *data)
++=======
+ /*
+  * Destroy a cgroup filesystem context.
+  */
+ static void cgroup_fs_context_free(struct fs_context *fc)
+ {
+ 	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
+ 
+ 	kfree(ctx->name);
+ 	kfree(ctx->release_agent);
+ 	kfree(ctx);
+ }
+ 
+ static int cgroup_get_tree(struct fs_context *fc)
++>>>>>>> e34a98d5b226 (cgroup2: switch to option-by-option parsing)
  {
  	struct cgroup_namespace *ns = current->nsproxy->cgroup_ns;
 -	struct cgroup_fs_context *ctx = cgroup_fc2context(fc);
 -	struct dentry *root;
 +	struct dentry *dentry;
 +	int ret;
 +
 +	get_cgroup_ns(ns);
  
  	/* Check if the caller has permission to mount. */
 -	if (!ns_capable(ns->user_ns, CAP_SYS_ADMIN))
 -		return -EPERM;
 +	if (!ns_capable(ns->user_ns, CAP_SYS_ADMIN)) {
 +		put_cgroup_ns(ns);
 +		return ERR_PTR(-EPERM);
 +	}
 +
 +	if (fs_type == &cgroup2_fs_type) {
 +		unsigned int root_flags;
  
 -	cgrp_dfl_visible = true;
 -	cgroup_get_live(&cgrp_dfl_root.cgrp);
 +		ret = parse_cgroup_root_flags(data, &root_flags);
 +		if (ret) {
 +			put_cgroup_ns(ns);
 +			return ERR_PTR(ret);
 +		}
 +
 +		cgrp_dfl_visible = true;
 +		cgroup_get_live(&cgrp_dfl_root.cgrp);
  
 -	root = cgroup_do_mount(&cgroup2_fs_type, fc->sb_flags, &cgrp_dfl_root,
 +		dentry = cgroup_do_mount(&cgroup2_fs_type, flags, &cgrp_dfl_root,
  					 CGROUP2_SUPER_MAGIC, ns);
 -	if (IS_ERR(root))
 -		return PTR_ERR(root);
 +		if (!IS_ERR(dentry))
 +			apply_cgroup_root_flags(root_flags);
 +	} else {
 +		dentry = cgroup1_mount(&cgroup_fs_type, flags, data,
 +				       CGROUP_SUPER_MAGIC, ns);
 +	}
  
++<<<<<<< HEAD
 +	put_cgroup_ns(ns);
 +	return dentry;
++=======
+ 	apply_cgroup_root_flags(ctx->flags);
+ 	fc->root = root;
+ 	return 0;
+ }
+ 
+ static const struct fs_context_operations cgroup_fs_context_ops = {
+ 	.free		= cgroup_fs_context_free,
+ 	.parse_param	= cgroup2_parse_param,
+ 	.get_tree	= cgroup_get_tree,
+ 	.reconfigure	= cgroup_reconfigure,
+ };
+ 
+ static const struct fs_context_operations cgroup1_fs_context_ops = {
+ 	.free		= cgroup_fs_context_free,
+ 	.parse_param	= cgroup1_parse_param,
+ 	.get_tree	= cgroup1_get_tree,
+ 	.reconfigure	= cgroup1_reconfigure,
+ };
+ 
+ /*
+  * Initialise the cgroup filesystem creation/reconfiguration context.
+  */
+ static int cgroup_init_fs_context(struct fs_context *fc)
+ {
+ 	struct cgroup_fs_context *ctx;
+ 
+ 	ctx = kzalloc(sizeof(struct cgroup_fs_context), GFP_KERNEL);
+ 	if (!ctx)
+ 		return -ENOMEM;
+ 
+ 	/*
+ 	 * The first time anyone tries to mount a cgroup, enable the list
+ 	 * linking each css_set to its tasks and fix up all existing tasks.
+ 	 */
+ 	if (!use_task_css_set_links)
+ 		cgroup_enable_task_cg_lists();
+ 
+ 	fc->fs_private = ctx;
+ 	if (fc->fs_type == &cgroup2_fs_type)
+ 		fc->ops = &cgroup_fs_context_ops;
+ 	else
+ 		fc->ops = &cgroup1_fs_context_ops;
+ 	return 0;
++>>>>>>> e34a98d5b226 (cgroup2: switch to option-by-option parsing)
  }
  
  static void cgroup_kill_sb(struct super_block *sb)
@@@ -2118,10 -2177,11 +2192,18 @@@ struct file_system_type cgroup_fs_type 
  };
  
  static struct file_system_type cgroup2_fs_type = {
++<<<<<<< HEAD
 +	.name = "cgroup2",
 +	.mount = cgroup_mount,
 +	.kill_sb = cgroup_kill_sb,
 +	.fs_flags = FS_USERNS_MOUNT,
++=======
+ 	.name			= "cgroup2",
+ 	.init_fs_context	= cgroup_init_fs_context,
+ 	.parameters		= &cgroup2_fs_parameters,
+ 	.kill_sb		= cgroup_kill_sb,
+ 	.fs_flags		= FS_USERNS_MOUNT,
++>>>>>>> e34a98d5b226 (cgroup2: switch to option-by-option parsing)
  };
  
  int cgroup_path_ns_locked(struct cgroup *cgrp, char *buf, size_t buflen,
* Unmerged path kernel/cgroup/cgroup.c
