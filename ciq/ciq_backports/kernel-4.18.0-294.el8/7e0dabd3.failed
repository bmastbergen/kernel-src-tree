x86/mm/pageattr: Introduce helper function to unmap EFI boot services

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
commit 7e0dabd3010d6041ee0a952c1146b2150a11f1be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7e0dabd3.failed

Ideally, after kernel assumes control of the platform, firmware
shouldn't access EFI boot services code/data regions. But, it's noticed
that this is not so true in many x86 platforms. Hence, during boot,
kernel reserves EFI boot services code/data regions [1] and maps [2]
them to efi_pgd so that call to set_virtual_address_map() doesn't fail.
After returning from set_virtual_address_map(), kernel frees the
reserved regions [3] but they still remain mapped. Hence, introduce
kernel_unmap_pages_in_pgd() which will later be used to unmap EFI boot
services code/data regions.

While at it modify kernel_map_pages_in_pgd() by:

1. Adding __init modifier because it's always used *only* during boot.
2. Add a warning if it's used after SMP is initialized because it uses
   __flush_tlb_all() which flushes mappings only on current CPU.

Unmapping EFI boot services code/data regions will result in clearing
PAGE_PRESENT bit and it shouldn't bother L1TF cases because it's already
handled by protnone_mask() at arch/x86/include/asm/pgtable-invert.h.

[1] efi_reserve_boot_services()
[2] efi_map_region() -> __map_region() -> kernel_map_pages_in_pgd()
[3] efi_free_boot_services()

	Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arend van Spriel <arend.vanspriel@broadcom.com>
	Cc: Bhupesh Sharma <bhsharma@redhat.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Eric Snowberg <eric.snowberg@oracle.com>
	Cc: Hans de Goede <hdegoede@redhat.com>
	Cc: Joe Perches <joe@perches.com>
	Cc: Jon Hunter <jonathanh@nvidia.com>
	Cc: Julien Thierry <julien.thierry@arm.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Marc Zyngier <marc.zyngier@arm.com>
	Cc: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Nathan Chancellor <natechancellor@gmail.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Sedat Dilek <sedat.dilek@gmail.com>
	Cc: YiFei Zhu <zhuyifei1999@gmail.com>
	Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/20181129171230.18699-5-ard.biesheuvel@linaro.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 7e0dabd3010d6041ee0a952c1146b2150a11f1be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/pageattr.c
diff --cc arch/x86/mm/pageattr.c
index 10cb9826292d,bac35001d896..000000000000
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@@ -2338,10 -2333,13 +2338,17 @@@ bool kernel_page_present(struct page *p
  	pte = lookup_address((unsigned long)page_address(page), &level);
  	return (pte_val(*pte) & _PAGE_PRESENT);
  }
 -
  #endif /* CONFIG_HIBERNATION */
  
++<<<<<<< HEAD
 +int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
 +			    unsigned numpages, unsigned long page_flags)
++=======
+ #endif /* CONFIG_DEBUG_PAGEALLOC */
+ 
+ int __init kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
+ 				   unsigned numpages, unsigned long page_flags)
++>>>>>>> 7e0dabd3010d (x86/mm/pageattr: Introduce helper function to unmap EFI boot services)
  {
  	int retval = -EINVAL;
  
diff --git a/arch/x86/include/asm/pgtable_types.h b/arch/x86/include/asm/pgtable_types.h
index de229ccde804..78dae97660f9 100644
--- a/arch/x86/include/asm/pgtable_types.h
+++ b/arch/x86/include/asm/pgtable_types.h
@@ -544,8 +544,12 @@ extern pte_t *lookup_address_in_mm(struct mm_struct *mm, unsigned long address,
 				   unsigned int *level);
 extern pmd_t *lookup_pmd_address(unsigned long address);
 extern phys_addr_t slow_virt_to_phys(void *__address);
-extern int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
-				   unsigned numpages, unsigned long page_flags);
+extern int __init kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn,
+					  unsigned long address,
+					  unsigned numpages,
+					  unsigned long page_flags);
+extern int __init kernel_unmap_pages_in_pgd(pgd_t *pgd, unsigned long address,
+					    unsigned long numpages);
 #endif	/* !__ASSEMBLY__ */
 
 #endif /* _ASM_X86_PGTABLE_DEFS_H */
* Unmerged path arch/x86/mm/pageattr.c
