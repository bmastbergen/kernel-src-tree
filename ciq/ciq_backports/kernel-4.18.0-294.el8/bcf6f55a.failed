kasan: fix kasan_check_read/write definitions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Arnd Bergmann <arnd@arndb.de>
commit bcf6f55a0d05eedd8ebb6ecc60ae3f93205ad833
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/bcf6f55a.failed

Building little-endian allmodconfig kernels on arm64 started failing
with the generated atomic.h implementation, since we now try to call
kasan helpers from the EFI stub:

  aarch64-linux-gnu-ld: drivers/firmware/efi/libstub/arm-stub.stub.o: in function `atomic_set':
  include/generated/atomic-instrumented.h:44: undefined reference to `__efistub_kasan_check_write'

I suspect that we get similar problems in other files that explicitly
disable KASAN for some reason but call atomic_t based helper functions.

We can fix this by checking the predefined __SANITIZE_ADDRESS__ macro
that the compiler sets instead of checking CONFIG_KASAN, but this in
turn requires a small hack in mm/kasan/common.c so we do see the extern
declaration there instead of the inline function.

Link: http://lkml.kernel.org/r/20181211133453.2835077-1-arnd@arndb.de
Fixes: b1864b828644 ("locking/atomics: build atomic headers as required")
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Reported-by: Anders Roxell <anders.roxell@linaro.org>
	Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Andrey Konovalov <andreyknvl@google.com>
	Cc: Stephen Rothwell <sfr@canb.auug.org.au>,
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit bcf6f55a0d05eedd8ebb6ecc60ae3f93205ad833)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/kasan/kasan.c
diff --cc mm/kasan/kasan.c
index d79269dd4b58,80bbe62b16cd..000000000000
--- a/mm/kasan/kasan.c
+++ b/mm/kasan/kasan.c
@@@ -13,8 -14,7 +13,12 @@@
   *
   */
  
++<<<<<<< HEAD:mm/kasan/kasan.c
 +#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 +#define DISABLE_BRANCH_PROFILING
++=======
+ #define __KASAN_INTERNAL
++>>>>>>> bcf6f55a0d05 (kasan: fix kasan_check_read/write definitions):mm/kasan/common.c
  
  #include <linux/export.h>
  #include <linux/interrupt.h>
diff --git a/include/linux/kasan-checks.h b/include/linux/kasan-checks.h
index d314150658a4..a61dc075e2ce 100644
--- a/include/linux/kasan-checks.h
+++ b/include/linux/kasan-checks.h
@@ -2,7 +2,7 @@
 #ifndef _LINUX_KASAN_CHECKS_H
 #define _LINUX_KASAN_CHECKS_H
 
-#ifdef CONFIG_KASAN
+#if defined(__SANITIZE_ADDRESS__) || defined(__KASAN_INTERNAL)
 void kasan_check_read(const volatile void *p, unsigned int size);
 void kasan_check_write(const volatile void *p, unsigned int size);
 #else
* Unmerged path mm/kasan/kasan.c
