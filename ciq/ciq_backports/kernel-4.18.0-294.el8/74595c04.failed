scsi: scsi_debug: Fix in_use bitmap corruption

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Douglas Gilbert <dgilbert@interlog.com>
commit 74595c044cb56cb073370c09fefc23eb8ed6d835
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/74595c04.failed

Heavy testing indicates the irqsave() spinlock around the __set_bit() is
insufficient to stop following clear_bit() calls being rarely applied
out-of-order. Also the nearby failed kzalloc() path leading to
SCSI_MLQUEUE_HOST_BUSY does not properly undo the in_use bitmap and
num_in_q, fix.

Link: https://lore.kernel.org/r/20200702145355.522283-1-dgilbert@interlog.com
	Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 74595c044cb56cb073370c09fefc23eb8ed6d835)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_debug.c
diff --cc drivers/scsi/scsi_debug.c
index 8a8e70143123,4692f5b6ad13..000000000000
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@@ -4367,17 -5439,24 +4367,26 @@@ static int schedule_resp(struct scsi_cm
  	spin_unlock_irqrestore(&sqp->qc_lock, iflags);
  	if (unlikely(sdebug_every_nth && sdebug_any_injecting_opt))
  		setup_inject(sqp, sqcp);
- 	if (sd_dp == NULL) {
+ 	if (!sd_dp) {
  		sd_dp = kzalloc(sizeof(*sd_dp), GFP_ATOMIC);
- 		if (sd_dp == NULL)
+ 		if (!sd_dp) {
+ 			atomic_dec(&devip->num_in_q);
+ 			clear_bit(k, sqp->in_use_bm);
  			return SCSI_MLQUEUE_HOST_BUSY;
++<<<<<<< HEAD
++=======
+ 		}
+ 		new_sd_dp = true;
+ 	} else {
+ 		new_sd_dp = false;
++>>>>>>> 74595c044cb5 (scsi: scsi_debug: Fix in_use bitmap corruption)
  	}
  
 -	if (ndelay > 0 && ndelay < INCLUSIVE_TIMING_MAX_NS)
 -		ns_from_boot = ktime_get_boottime_ns();
 -
 -	/* one of the resp_*() response functions is called here */
  	cmnd->result = pfp != NULL ? pfp(cmnd, devip) : 0;
  	if (cmnd->result & SDEG_RES_IMMED_MASK) {
 +		/*
 +		 * This is the F_DELAY_OVERR case. No delay.
 +		 */
  		cmnd->result &= ~SDEG_RES_IMMED_MASK;
  		delta_jiff = ndelay = 0;
  	}
* Unmerged path drivers/scsi/scsi_debug.c
