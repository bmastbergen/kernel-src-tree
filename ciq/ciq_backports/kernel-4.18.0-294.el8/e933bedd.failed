software node: remove separate handling of references

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Dmitry Torokhov <dmitry.torokhov@gmail.com>
commit e933bedd45099dce1165104138bb703a6e31df82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/e933bedd.failed

Now that all users of references have moved to reference properties,
we can remove separate handling of references.

	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit e933bedd45099dce1165104138bb703a6e31df82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/swnode.c
diff --cc drivers/base/swnode.c
index d8d0dc0ca5ac,0b081dee1e95..000000000000
--- a/drivers/base/swnode.c
+++ b/drivers/base/swnode.c
@@@ -483,22 -479,38 +483,51 @@@ software_node_get_reference_args(const 
  				 struct fwnode_reference_args *args)
  {
  	struct swnode *swnode = to_swnode(fwnode);
++<<<<<<< HEAD
 +	const struct software_node_reference *ref;
++=======
+ 	const struct software_node_ref_args *ref_array;
+ 	const struct software_node_ref_args *ref;
++>>>>>>> e933bedd4509 (software node: remove separate handling of references)
  	const struct property_entry *prop;
  	struct fwnode_handle *refnode;
 -	u32 nargs_prop_val;
 -	int error;
  	int i;
  
 -	if (!swnode)
 +	if (!swnode || !swnode->node->references)
 +		return -ENOENT;
 +
++<<<<<<< HEAD
 +	for (ref = swnode->node->references; ref->name; ref++)
 +		if (!strcmp(ref->name, propname))
 +			break;
 +
 +	if (!ref->name || index > (ref->nrefs - 1))
  		return -ENOENT;
  
 +	refnode = software_node_fwnode(ref->refs[index].node);
++=======
+ 	prop = property_entry_get(swnode->node->properties, propname);
+ 	if (!prop)
+ 		return -ENOENT;
+ 
+ 	if (prop->type != DEV_PROP_REF)
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * We expect that references are never stored inline, even
+ 	 * single ones, as they are too big.
+ 	 */
+ 	if (prop->is_inline)
+ 		return -EINVAL;
+ 
+ 	if (index * sizeof(*ref) >= prop->length)
+ 		return -ENOENT;
+ 
+ 	ref_array = prop->pointer;
+ 	ref = &ref_array[index];
+ 
+ 	refnode = software_node_fwnode(ref->node);
++>>>>>>> e933bedd4509 (software node: remove separate handling of references)
  	if (!refnode)
  		return -ENOENT;
  
@@@ -517,7 -531,7 +546,11 @@@
  	args->nargs = nargs;
  
  	for (i = 0; i < nargs; i++)
++<<<<<<< HEAD
 +		args->args[i] = ref->refs[index].args[i];
++=======
+ 		args->args[i] = ref->args[i];
++>>>>>>> e933bedd4509 (software node: remove separate handling of references)
  
  	return 0;
  }
* Unmerged path drivers/base/swnode.c
diff --git a/include/linux/property.h b/include/linux/property.h
index b1dbe0ba27b1..f5714f32b981 100644
--- a/include/linux/property.h
+++ b/include/linux/property.h
@@ -403,30 +403,16 @@ struct software_node_ref_args {
 	u64 args[NR_FWNODE_REFERENCE_ARGS];
 };
 
-/**
- * struct software_node_reference - Named software node reference property
- * @name: Name of the property
- * @nrefs: Number of elements in @refs array
- * @refs: Array of references with optional arguments
- */
-struct software_node_reference {
-	const char *name;
-	unsigned int nrefs;
-	const struct software_node_ref_args *refs;
-};
-
 /**
  * struct software_node - Software node description
  * @name: Name of the software node
  * @parent: Parent of the software node
  * @properties: Array of device properties
- * @references: Array of software node reference properties
  */
 struct software_node {
 	const char *name;
 	const struct software_node *parent;
 	const struct property_entry *properties;
-	const struct software_node_reference *references;
 };
 
 bool is_software_node(const struct fwnode_handle *fwnode);
