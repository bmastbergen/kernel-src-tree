net: atlantic: A2: half duplex support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Igor Russkikh <irusskikh@marvell.com>
commit 071a02046c262f633ef8d9064cf36fd6def6d0a5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/071a0204.failed

This patch adds support for 10M/100M/1G half duplex rates, which are
supported by A2 in additional to full duplex rates supported by A1.

	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 071a02046c262f633ef8d9064cf36fd6def6d0a5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_common.h
#	drivers/net/ethernet/aquantia/atlantic/aq_hw.h
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_common.h
index ce5211d234bb,1587528ca3f6..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_common.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_common.h
@@@ -54,16 -51,21 +54,35 @@@
  #define AQ_HWREV_1	1
  #define AQ_HWREV_2	2
  
++<<<<<<< HEAD
 +#define AQ_NIC_RATE_10G        BIT(0)
 +#define AQ_NIC_RATE_5G         BIT(1)
 +#define AQ_NIC_RATE_5GSR       BIT(2)
 +#define AQ_NIC_RATE_2GS        BIT(3)
 +#define AQ_NIC_RATE_1G         BIT(4)
 +#define AQ_NIC_RATE_100M       BIT(5)
 +
 +#define AQ_NIC_RATE_EEE_10G	BIT(6)
 +#define AQ_NIC_RATE_EEE_5G	BIT(7)
 +#define AQ_NIC_RATE_EEE_2GS	BIT(8)
 +#define AQ_NIC_RATE_EEE_1G	BIT(9)
++=======
+ #define AQ_NIC_RATE_10G		BIT(0)
+ #define AQ_NIC_RATE_5G		BIT(1)
+ #define AQ_NIC_RATE_5GSR	BIT(2)
+ #define AQ_NIC_RATE_2G5		BIT(3)
+ #define AQ_NIC_RATE_1G		BIT(4)
+ #define AQ_NIC_RATE_100M	BIT(5)
+ #define AQ_NIC_RATE_10M		BIT(6)
+ #define AQ_NIC_RATE_1G_HALF	BIT(7)
+ #define AQ_NIC_RATE_100M_HALF	BIT(8)
+ #define AQ_NIC_RATE_10M_HALF	BIT(9)
+ 
+ #define AQ_NIC_RATE_EEE_10G	BIT(10)
+ #define AQ_NIC_RATE_EEE_5G	BIT(11)
+ #define AQ_NIC_RATE_EEE_2G5	BIT(12)
+ #define AQ_NIC_RATE_EEE_1G	BIT(13)
+ #define AQ_NIC_RATE_EEE_100M	BIT(14)
++>>>>>>> 071a02046c26 (net: atlantic: A2: half duplex support)
  
  #endif /* AQ_COMMON_H */
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_hw.h
index 46eaf70c5ccb,1408a522eff1..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
@@@ -1,10 -1,8 +1,18 @@@
++<<<<<<< HEAD
 +/*
 + * aQuantia Corporation Network Driver
 + * Copyright (C) 2014-2017 aQuantia Corporation. All rights reserved
 + *
 + * This program is free software; you can redistribute it and/or modify it
 + * under the terms and conditions of the GNU General Public License,
 + * version 2, as published by the Free Software Foundation.
++=======
+ /* SPDX-License-Identifier: GPL-2.0-only */
+ /* Atlantic Network Driver
+  *
+  * Copyright (C) 2014-2019 aQuantia Corporation
+  * Copyright (C) 2019-2020 Marvell International Ltd.
++>>>>>>> 071a02046c26 (net: atlantic: A2: half duplex support)
   */
  
  /* File aq_hw.h: Declaration of abstract interface for NIC hardware specific
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index ed7d344e3ed7,49528fcdc947..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@@ -818,9 -972,24 +825,25 @@@ void aq_nic_get_link_ksettings(struct a
  		ethtool_link_ksettings_add_link_mode(cmd, supported,
  						     100baseT_Full);
  
++<<<<<<< HEAD
 +	if (self->aq_nic_cfg.aq_hw_caps->flow_control)
++=======
+ 	if (self->aq_nic_cfg.aq_hw_caps->link_speed_msk & AQ_NIC_RATE_100M_HALF)
+ 		ethtool_link_ksettings_add_link_mode(cmd, supported,
+ 						     100baseT_Half);
+ 
+ 	if (self->aq_nic_cfg.aq_hw_caps->link_speed_msk & AQ_NIC_RATE_10M)
+ 		ethtool_link_ksettings_add_link_mode(cmd, supported,
+ 						     10baseT_Full);
+ 
+ 	if (self->aq_nic_cfg.aq_hw_caps->link_speed_msk & AQ_NIC_RATE_10M_HALF)
+ 		ethtool_link_ksettings_add_link_mode(cmd, supported,
+ 						     10baseT_Half);
+ 
+ 	if (self->aq_nic_cfg.aq_hw_caps->flow_control) {
++>>>>>>> 071a02046c26 (net: atlantic: A2: half duplex support)
  		ethtool_link_ksettings_add_link_mode(cmd, supported,
  						     Pause);
 -		ethtool_link_ksettings_add_link_mode(cmd, supported,
 -						     Asym_Pause);
 -	}
  
  	ethtool_link_ksettings_add_link_mode(cmd, supported, Autoneg);
  
@@@ -842,7 -1011,7 +865,11 @@@
  		ethtool_link_ksettings_add_link_mode(cmd, advertising,
  						     5000baseT_Full);
  
++<<<<<<< HEAD
 +	if (self->aq_nic_cfg.link_speed_msk  & AQ_NIC_RATE_2GS)
++=======
+ 	if (self->aq_nic_cfg.link_speed_msk & AQ_NIC_RATE_2G5)
++>>>>>>> 071a02046c26 (net: atlantic: A2: half duplex support)
  		ethtool_link_ksettings_add_link_mode(cmd, advertising,
  						     2500baseT_Full);
  
@@@ -854,7 -1027,19 +885,23 @@@
  		ethtool_link_ksettings_add_link_mode(cmd, advertising,
  						     100baseT_Full);
  
++<<<<<<< HEAD
 +	if (self->aq_nic_cfg.flow_control & AQ_NIC_FC_RX)
++=======
+ 	if (self->aq_nic_cfg.link_speed_msk & AQ_NIC_RATE_100M_HALF)
+ 		ethtool_link_ksettings_add_link_mode(cmd, advertising,
+ 						     100baseT_Half);
+ 
+ 	if (self->aq_nic_cfg.link_speed_msk & AQ_NIC_RATE_10M)
+ 		ethtool_link_ksettings_add_link_mode(cmd, advertising,
+ 						     10baseT_Full);
+ 
+ 	if (self->aq_nic_cfg.link_speed_msk & AQ_NIC_RATE_10M_HALF)
+ 		ethtool_link_ksettings_add_link_mode(cmd, advertising,
+ 						     10baseT_Half);
+ 
+ 	if (self->aq_nic_cfg.fc.cur & AQ_NIC_FC_RX)
++>>>>>>> 071a02046c26 (net: atlantic: A2: half duplex support)
  		ethtool_link_ksettings_add_link_mode(cmd, advertising,
  						     Pause);
  
@@@ -881,11 -1072,14 +934,17 @@@ int aq_nic_set_link_ksettings(struct aq
  		rate = self->aq_nic_cfg.aq_hw_caps->link_speed_msk;
  		self->aq_nic_cfg.is_autoneg = true;
  	} else {
- 		speed = cmd->base.speed;
- 
  		switch (speed) {
++<<<<<<< HEAD
++=======
+ 		case SPEED_10:
+ 			rate = fduplex ? AQ_NIC_RATE_10M : AQ_NIC_RATE_10M_HALF;
+ 			break;
+ 
++>>>>>>> 071a02046c26 (net: atlantic: A2: half duplex support)
  		case SPEED_100:
- 			rate = AQ_NIC_RATE_100M;
+ 			rate = fduplex ? AQ_NIC_RATE_100M
+ 				       : AQ_NIC_RATE_100M_HALF;
  			break;
  
  		case SPEED_1000:
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_common.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_hw.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
index 38915aa0fd19..4cd27fdc4f3c 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
@@ -641,6 +641,7 @@ int hw_atl_utils_mpi_get_link_status(struct aq_hw_s *self)
 			return -EBUSY;
 		}
 	}
+	link_status->full_duplex = true;
 
 	return 0;
 }
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
index 103608a7664f..e9bfbc5a3c55 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
@@ -241,6 +241,7 @@ static int aq_fw2x_update_link_status(struct aq_hw_s *self)
 	} else {
 		link_status->mbps = 0;
 	}
+	link_status->full_duplex = true;
 
 	return 0;
 }
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_utils_fw.c
