mptcp: zero token hash at creation time.

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 6ab301c98f174a8c25d5351b977a1113e2f1fb91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/6ab301c9.failed

Otherwise the 'chain_len' filed will carry random values,
some token creation calls will fail due to excessive chain
length, causing unexpected fallback to TCP.

Fixes: 2c5ebd001d4f ("mptcp: refactor token container")
	Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
	Tested-by: Christoph Paasch <cpaasch@apple.com>
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6ab301c98f174a8c25d5351b977a1113e2f1fb91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/token.c
diff --cc net/mptcp/token.c
index 9e1312968673,97cfc45bcc4f..000000000000
--- a/net/mptcp/token.c
+++ b/net/mptcp/token.c
@@@ -196,15 -338,46 +196,52 @@@ void mptcp_token_destroy_request(u32 to
  
  /**
   * mptcp_token_destroy - remove mptcp connection/token
 - * @msk: mptcp connection dropping the token
 + * @token: token of mptcp connection to remove
   *
 - * Remove the token associated to @msk
 + * Remove the connection identified by @token.
   */
 -void mptcp_token_destroy(struct mptcp_sock *msk)
 +void mptcp_token_destroy(u32 token)
  {
++<<<<<<< HEAD
 +	spin_lock_bh(&token_tree_lock);
 +	radix_tree_delete(&token_tree, token);
 +	spin_unlock_bh(&token_tree_lock);
++=======
+ 	struct token_bucket *bucket;
+ 	struct mptcp_sock *pos;
+ 
+ 	if (sk_unhashed((struct sock *)msk))
+ 		return;
+ 
+ 	bucket = token_bucket(msk->token);
+ 	spin_lock_bh(&bucket->lock);
+ 	pos = __token_lookup_msk(bucket, msk->token);
+ 	if (!WARN_ON_ONCE(pos != msk)) {
+ 		__sk_nulls_del_node_init_rcu((struct sock *)pos);
+ 		bucket->chain_len--;
+ 	}
+ 	spin_unlock_bh(&bucket->lock);
+ }
+ 
+ void __init mptcp_token_init(void)
+ {
+ 	int i;
+ 
+ 	token_hash = alloc_large_system_hash("MPTCP token",
+ 					     sizeof(struct token_bucket),
+ 					     0,
+ 					     20,/* one slot per 1MB of memory */
+ 					     HASH_ZERO,
+ 					     NULL,
+ 					     &token_mask,
+ 					     0,
+ 					     64 * 1024);
+ 	for (i = 0; i < token_mask + 1; ++i) {
+ 		INIT_HLIST_NULLS_HEAD(&token_hash[i].req_chain, i);
+ 		INIT_HLIST_NULLS_HEAD(&token_hash[i].msk_chain, i);
+ 		spin_lock_init(&token_hash[i].lock);
+ 	}
++>>>>>>> 6ab301c98f17 (mptcp: zero token hash at creation time.)
  }
  
  #if IS_MODULE(CONFIG_MPTCP_KUNIT_TESTS)
* Unmerged path net/mptcp/token.c
