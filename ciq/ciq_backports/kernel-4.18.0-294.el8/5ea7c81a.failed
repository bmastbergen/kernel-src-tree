Bluetooth: btusb: Refactor of firmware download flow for Intel conrollers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Kiran K <kiran.k@intel.com>
commit 5ea7c81a4f34e4dbb9c7bfd0fe18e5fba8a7f8f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/5ea7c81a.failed

Address the scalability to support new generation Intel controller with
respect to readability and enhancement to new firmware download sequence

	Signed-off-by: Kiran K <kiran.k@intel.com>
	Reviewed-by: Chethan T N <chethan.tumkur.narayan@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 5ea7c81a4f34e4dbb9c7bfd0fe18e5fba8a7f8f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btusb.c
diff --cc drivers/bluetooth/btusb.c
index 16b4132259d9,f8a71fdabb3d..000000000000
--- a/drivers/bluetooth/btusb.c
+++ b/drivers/bluetooth/btusb.c
@@@ -2187,11 -2277,10 +2186,16 @@@ static bool btusb_setup_intel_new_get_f
  	return true;
  }
  
- static int btusb_setup_intel_new(struct hci_dev *hdev)
+ static int btusb_intel_download_firmware(struct hci_dev *hdev,
+ 					 struct intel_version *ver,
+ 					 struct intel_boot_params *params)
  {
++<<<<<<< HEAD
 +	struct btusb_data *data = hci_get_drvdata(hdev);
 +	struct intel_version ver;
 +	struct intel_boot_params params;
++=======
++>>>>>>> 5ea7c81a4f34 (Bluetooth: btusb: Refactor of firmware download flow for Intel conrollers)
  	const struct firmware *fw;
  	u32 boot_param;
  	char fwname[64];
@@@ -2459,14 -2559,29 +2474,21 @@@ static int btusb_setup_intel_new(struc
  
  	clear_bit(BTUSB_BOOTLOADER, &data->flags);
  
- 	/* Once the device is running in operational mode, it needs to apply
- 	 * the device configuration (DDC) parameters.
- 	 *
- 	 * The device can work without DDC parameters, so even if it fails
- 	 * to load the file, no need to fail the setup.
- 	 */
- 	btintel_load_ddc_config(hdev, fwname);
+ 	err = btusb_setup_intel_new_get_fw_name(&ver, &params, ddcname,
+ 						sizeof(ddcname), "ddc");
+ 
+ 	if (!err) {
+ 		bt_dev_err(hdev, "Unsupported Intel firmware naming");
+ 	} else {
+ 		/* Once the device is running in operational mode, it needs to
+ 		 * apply the device configuration (DDC) parameters.
+ 		 *
+ 		 * The device can work without DDC parameters, so even if it
+ 		 * fails to load the file, no need to fail the setup.
+ 		 */
+ 		btintel_load_ddc_config(hdev, ddcname);
+ 	}
  
 -	/* Read the Intel supported features and if new exception formats
 -	 * supported, need to load the additional DDC config to enable.
 -	 */
 -	btintel_read_debug_features(hdev, &features);
 -
 -	/* Set DDC mask for available debug features */
 -	btintel_set_debug_features(hdev, &features);
 -
  	/* Read the Intel version information after loading the FW  */
  	err = btintel_read_version(hdev, &ver);
  	if (err)
* Unmerged path drivers/bluetooth/btusb.c
