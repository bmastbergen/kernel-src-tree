net: ethernet: stmmac: demote warnings about missing optional clocks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ahmad Fatoum <a.fatoum@pengutronix.de>
commit 07cc79efb1e53967444766f9e3abf9f0af362b93
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/07cc79ef.failed

The specification of a "eth-ck" and a "ptp_ref" clock is optional per
the binding and the driver handles them gracefully.
Demote the output to an info message accordingly.

	Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 07cc79efb1e53967444766f9e3abf9f0af362b93)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/stmicro/stmmac/dwmac-stm32.c
diff --cc drivers/net/ethernet/stmicro/stmmac/dwmac-stm32.c
index 7e2e79dedebf,dc84e5066bf8..000000000000
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-stm32.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-stm32.c
@@@ -232,18 -290,22 +232,30 @@@ static int stm32_dwmac_parse_data(struc
  static int stm32mp1_parse_data(struct stm32_dwmac *dwmac,
  			       struct device *dev)
  {
 -	struct platform_device *pdev = to_platform_device(dev);
  	struct device_node *np = dev->of_node;
 -	int err = 0;
  
 -	/* Gigabit Ethernet 125MHz clock selection. */
 -	dwmac->eth_clk_sel_reg = of_property_read_bool(np, "st,eth-clk-sel");
 +	dwmac->int_phyclk = of_property_read_bool(np, "st,int-phyclk");
  
++<<<<<<< HEAD
 +	/* Check if internal clk from RCC selected */
 +	if (dwmac->int_phyclk) {
 +		/*  Get ETH_CLK clocks */
 +		dwmac->clk_eth_ck = devm_clk_get(dev, "eth-ck");
 +		if (IS_ERR(dwmac->clk_eth_ck)) {
 +			dev_err(dev, "No ETH CK clock provided...\n");
 +			return PTR_ERR(dwmac->clk_eth_ck);
 +		}
++=======
+ 	/* Ethernet 50Mhz RMII clock selection */
+ 	dwmac->eth_ref_clk_sel_reg =
+ 		of_property_read_bool(np, "st,eth-ref-clk-sel");
+ 
+ 	/*  Get ETH_CLK clocks */
+ 	dwmac->clk_eth_ck = devm_clk_get(dev, "eth-ck");
+ 	if (IS_ERR(dwmac->clk_eth_ck)) {
+ 		dev_info(dev, "No phy clock provided...\n");
+ 		dwmac->clk_eth_ck = NULL;
++>>>>>>> 07cc79efb1e5 (net: ethernet: stmmac: demote warnings about missing optional clocks)
  	}
  
  	/*  Clock used for low power mode */
* Unmerged path drivers/net/ethernet/stmicro/stmmac/dwmac-stm32.c
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
index 7d991de2c498..76305cb3ac83 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_platform.c
@@ -586,7 +586,7 @@ stmmac_probe_config_dt(struct platform_device *pdev, const char **mac)
 	if (IS_ERR(plat->clk_ptp_ref)) {
 		plat->clk_ptp_rate = clk_get_rate(plat->stmmac_clk);
 		plat->clk_ptp_ref = NULL;
-		dev_warn(&pdev->dev, "PTP uses main clock\n");
+		dev_info(&pdev->dev, "PTP uses main clock\n");
 	} else {
 		plat->clk_ptp_rate = clk_get_rate(plat->clk_ptp_ref);
 		dev_dbg(&pdev->dev, "PTP rate %d\n", plat->clk_ptp_rate);
