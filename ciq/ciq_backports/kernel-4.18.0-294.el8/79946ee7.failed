iwlwifi: fw: move assert descriptor parser to common code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mordechay Goodstein <mordechay.goodstein@intel.com>
commit 79946ee774286c12722a3dc52de18482dc6c9c09
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/79946ee7.failed

Move this parser to a common place, instead of having it in code that
is specific to mvm.

	Signed-off-by: Mordechay Goodstein <mordechay.goodstein@intel.com>
	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
Link: https://lore.kernel.org/r/iwlwifi.20200911204056.45b270b0bf2f.I4561138cd5be9f44fa42cfce10258de0607be40f@changeid
	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
(cherry picked from commit 79946ee774286c12722a3dc52de18482dc6c9c09)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
#	drivers/net/wireless/intel/iwlwifi/fw/img.h
diff --cc drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
index 6f75985eea66,a4cbfc8f030f..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
+++ b/drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
@@@ -5,7 -5,7 +5,11 @@@
   *
   * GPL LICENSE SUMMARY
   *
++<<<<<<< HEAD:drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
 + * Copyright(c) 2017 Intel Deutschland GmbH
++=======
+  * Copyright(c) 2019 - 2020 Intel Corporation
++>>>>>>> 79946ee77428 (iwlwifi: fw: move assert descriptor parser to common code):drivers/net/wireless/intel/iwlwifi/fw/img.c
   *
   * This program is free software; you can redistribute it and/or modify
   * it under the terms of version 2 of the GNU General Public License as
@@@ -25,7 -25,7 +29,11 @@@
   *
   * BSD LICENSE
   *
++<<<<<<< HEAD:drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
 + * Copyright(c) 2017 Intel Deutschland GmbH
++=======
+  * Copyright(c) 2019 - 2020 Intel Corporation
++>>>>>>> 79946ee77428 (iwlwifi: fw: move assert descriptor parser to common code):drivers/net/wireless/intel/iwlwifi/fw/img.c
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
@@@ -53,36 -53,87 +61,80 @@@
   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 + *
   *****************************************************************************/
 +#include "iwl-drv.h"
 +#include "runtime.h"
 +#include "fw/api/commands.h"
 +#include "fw/api/alive.h"
  
 -#include "img.h"
 -
 -u8 iwl_fw_lookup_cmd_ver(const struct iwl_fw *fw, u8 grp, u8 cmd)
 +static void iwl_fwrt_fseq_ver_mismatch(struct iwl_fw_runtime *fwrt,
 +				       struct iwl_rx_cmd_buffer *rxb)
  {
 -	const struct iwl_fw_cmd_version *entry;
 -	unsigned int i;
 +	struct iwl_rx_packet *pkt = rxb_addr(rxb);
 +	struct iwl_fseq_ver_mismatch_ntf *fseq = (void *)pkt->data;
  
 -	if (!fw->ucode_capa.cmd_versions ||
 -	    !fw->ucode_capa.n_cmd_versions)
 -		return IWL_FW_CMD_VER_UNKNOWN;
 -
 -	entry = fw->ucode_capa.cmd_versions;
 -	for (i = 0; i < fw->ucode_capa.n_cmd_versions; i++, entry++) {
 -		if (entry->group == grp && entry->cmd == cmd)
 -			return entry->cmd_ver;
 -	}
 -
 -	return IWL_FW_CMD_VER_UNKNOWN;
 +	IWL_ERR(fwrt, "FSEQ version mismatch (aux: %d, wifi: %d)\n",
 +		__le32_to_cpu(fseq->aux_read_fseq_ver),
 +		__le32_to_cpu(fseq->wifi_fseq_ver));
  }
 -EXPORT_SYMBOL_GPL(iwl_fw_lookup_cmd_ver);
  
 -u8 iwl_fw_lookup_notif_ver(const struct iwl_fw *fw, u8 grp, u8 cmd, u8 def)
 +void iwl_fwrt_handle_notification(struct iwl_fw_runtime *fwrt,
 +				  struct iwl_rx_cmd_buffer *rxb)
  {
 -	const struct iwl_fw_cmd_version *entry;
 -	unsigned int i;
 -
 -	if (!fw->ucode_capa.cmd_versions ||
 -	    !fw->ucode_capa.n_cmd_versions)
 -		return def;
 +	struct iwl_rx_packet *pkt = rxb_addr(rxb);
 +	u32 cmd = WIDE_ID(pkt->hdr.group_id, pkt->hdr.cmd);
  
 -	entry = fw->ucode_capa.cmd_versions;
 -	for (i = 0; i < fw->ucode_capa.n_cmd_versions; i++, entry++) {
 -		if (entry->group == grp && entry->cmd == cmd) {
 -			if (entry->notif_ver == IWL_FW_CMD_VER_UNKNOWN)
 -				return def;
 -			return entry->notif_ver;
 -		}
 +	switch (cmd) {
 +	case WIDE_ID(SYSTEM_GROUP, FSEQ_VER_MISMATCH_NTF):
 +		iwl_fwrt_fseq_ver_mismatch(fwrt, rxb);
 +		break;
 +	default:
 +		break;
  	}
 -
 -	return def;
  }
++<<<<<<< HEAD:drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
 +IWL_EXPORT_SYMBOL(iwl_fwrt_handle_notification);
++=======
+ EXPORT_SYMBOL_GPL(iwl_fw_lookup_notif_ver);
+ 
+ #define FW_SYSASSERT_CPU_MASK 0xf0000000
+ static const struct {
+ 	const char *name;
+ 	u8 num;
+ } advanced_lookup[] = {
+ 	{ "NMI_INTERRUPT_WDG", 0x34 },
+ 	{ "SYSASSERT", 0x35 },
+ 	{ "UCODE_VERSION_MISMATCH", 0x37 },
+ 	{ "BAD_COMMAND", 0x38 },
+ 	{ "BAD_COMMAND", 0x39 },
+ 	{ "NMI_INTERRUPT_DATA_ACTION_PT", 0x3C },
+ 	{ "FATAL_ERROR", 0x3D },
+ 	{ "NMI_TRM_HW_ERR", 0x46 },
+ 	{ "NMI_INTERRUPT_TRM", 0x4C },
+ 	{ "NMI_INTERRUPT_BREAK_POINT", 0x54 },
+ 	{ "NMI_INTERRUPT_WDG_RXF_FULL", 0x5C },
+ 	{ "NMI_INTERRUPT_WDG_NO_RBD_RXF_FULL", 0x64 },
+ 	{ "NMI_INTERRUPT_HOST", 0x66 },
+ 	{ "NMI_INTERRUPT_LMAC_FATAL", 0x70 },
+ 	{ "NMI_INTERRUPT_UMAC_FATAL", 0x71 },
+ 	{ "NMI_INTERRUPT_OTHER_LMAC_FATAL", 0x73 },
+ 	{ "NMI_INTERRUPT_ACTION_PT", 0x7C },
+ 	{ "NMI_INTERRUPT_UNKNOWN", 0x84 },
+ 	{ "NMI_INTERRUPT_INST_ACTION_PT", 0x86 },
+ 	{ "ADVANCED_SYSASSERT", 0 },
+ };
+ 
+ const char *iwl_fw_lookup_assert_desc(u32 num)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(advanced_lookup) - 1; i++)
+ 		if (advanced_lookup[i].num == (num & ~FW_SYSASSERT_CPU_MASK))
+ 			return advanced_lookup[i].name;
+ 
+ 	/* No entry matches 'num', so it is the last: ADVANCED_SYSASSERT */
+ 	return advanced_lookup[i].name;
+ }
+ EXPORT_SYMBOL_GPL(iwl_fw_lookup_assert_desc);
++>>>>>>> 79946ee77428 (iwlwifi: fw: move assert descriptor parser to common code):drivers/net/wireless/intel/iwlwifi/fw/img.c
diff --cc drivers/net/wireless/intel/iwlwifi/fw/img.h
index 90ca5f929cf9,50672414356a..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/fw/img.h
+++ b/drivers/net/wireless/intel/iwlwifi/fw/img.h
@@@ -313,22 -312,8 +312,27 @@@ iwl_get_ucode_image(const struct iwl_f
  	return &fw->img[ucode_type];
  }
  
 -u8 iwl_fw_lookup_cmd_ver(const struct iwl_fw *fw, u8 grp, u8 cmd);
 +static inline u8 iwl_mvm_lookup_cmd_ver(const struct iwl_fw *fw, u8 grp, u8 cmd)
 +{
 +	const struct iwl_fw_cmd_version *entry;
 +	unsigned int i;
 +
 +	if (!fw->ucode_capa.cmd_versions ||
 +	    !fw->ucode_capa.n_cmd_versions)
 +		return IWL_FW_CMD_VER_UNKNOWN;
 +
 +	entry = fw->ucode_capa.cmd_versions;
 +	for (i = 0; i < fw->ucode_capa.n_cmd_versions; i++, entry++) {
 +		if (entry->group == grp && entry->cmd == cmd)
 +			return entry->cmd_ver;
 +	}
 +
 +	return IWL_FW_CMD_VER_UNKNOWN;
 +}
  
++<<<<<<< HEAD
++=======
+ u8 iwl_fw_lookup_notif_ver(const struct iwl_fw *fw, u8 grp, u8 cmd, u8 def);
+ const char *iwl_fw_lookup_assert_desc(u32 num);
++>>>>>>> 79946ee77428 (iwlwifi: fw: move assert descriptor parser to common code)
  #endif  /* __iwl_fw_img_h__ */
* Unmerged path drivers/net/wireless/intel/iwlwifi/fw/common_rx.c
* Unmerged path drivers/net/wireless/intel/iwlwifi/fw/img.h
diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/utils.c b/drivers/net/wireless/intel/iwlwifi/mvm/utils.c
index eac930777f2f..bb3b50533a2d 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/utils.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/utils.c
@@ -67,6 +67,7 @@
 #include "iwl-csr.h"
 #include "mvm.h"
 #include "fw/api/rs.h"
+#include "fw/img.h"
 
 /*
  * Will return 0 even if the cmd failed when RFKILL is asserted unless
@@ -289,45 +290,6 @@ u8 iwl_mvm_next_antenna(struct iwl_mvm *mvm, u8 valid, u8 last_idx)
 	return last_idx;
 }
 
-#define FW_SYSASSERT_CPU_MASK 0xf0000000
-static const struct {
-	const char *name;
-	u8 num;
-} advanced_lookup[] = {
-	{ "NMI_INTERRUPT_WDG", 0x34 },
-	{ "SYSASSERT", 0x35 },
-	{ "UCODE_VERSION_MISMATCH", 0x37 },
-	{ "BAD_COMMAND", 0x38 },
-	{ "BAD_COMMAND", 0x39 },
-	{ "NMI_INTERRUPT_DATA_ACTION_PT", 0x3C },
-	{ "FATAL_ERROR", 0x3D },
-	{ "NMI_TRM_HW_ERR", 0x46 },
-	{ "NMI_INTERRUPT_TRM", 0x4C },
-	{ "NMI_INTERRUPT_BREAK_POINT", 0x54 },
-	{ "NMI_INTERRUPT_WDG_RXF_FULL", 0x5C },
-	{ "NMI_INTERRUPT_WDG_NO_RBD_RXF_FULL", 0x64 },
-	{ "NMI_INTERRUPT_HOST", 0x66 },
-	{ "NMI_INTERRUPT_LMAC_FATAL", 0x70 },
-	{ "NMI_INTERRUPT_UMAC_FATAL", 0x71 },
-	{ "NMI_INTERRUPT_OTHER_LMAC_FATAL", 0x73 },
-	{ "NMI_INTERRUPT_ACTION_PT", 0x7C },
-	{ "NMI_INTERRUPT_UNKNOWN", 0x84 },
-	{ "NMI_INTERRUPT_INST_ACTION_PT", 0x86 },
-	{ "ADVANCED_SYSASSERT", 0 },
-};
-
-static const char *desc_lookup(u32 num)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(advanced_lookup) - 1; i++)
-		if (advanced_lookup[i].num == (num & ~FW_SYSASSERT_CPU_MASK))
-			return advanced_lookup[i].name;
-
-	/* No entry matches 'num', so it is the last: ADVANCED_SYSASSERT */
-	return advanced_lookup[i].name;
-}
-
 /*
  * Note: This structure is read from the device with IO accesses,
  * and the reading already does the endian conversion. As it is
@@ -480,7 +442,7 @@ static void iwl_mvm_dump_umac_error_log(struct iwl_mvm *mvm)
 	}
 
 	IWL_ERR(mvm, "0x%08X | %s\n", table.error_id,
-		desc_lookup(table.error_id));
+		iwl_fw_lookup_assert_desc(table.error_id));
 	IWL_ERR(mvm, "0x%08X | umac branchlink1\n", table.blink1);
 	IWL_ERR(mvm, "0x%08X | umac branchlink2\n", table.blink2);
 	IWL_ERR(mvm, "0x%08X | umac interruptlink1\n", table.ilink1);
@@ -550,7 +512,7 @@ static void iwl_mvm_dump_lmac_error_log(struct iwl_mvm *mvm, u8 lmac_num)
 	IWL_ERR(mvm, "Loaded firmware version: %s\n", mvm->fw->fw_version);
 
 	IWL_ERR(mvm, "0x%08X | %-28s\n", table.error_id,
-		desc_lookup(table.error_id));
+		iwl_fw_lookup_assert_desc(table.error_id));
 	IWL_ERR(mvm, "0x%08X | trm_hw_status0\n", table.trm_hw_status0);
 	IWL_ERR(mvm, "0x%08X | trm_hw_status1\n", table.trm_hw_status1);
 	IWL_ERR(mvm, "0x%08X | branchlink2\n", table.blink2);
