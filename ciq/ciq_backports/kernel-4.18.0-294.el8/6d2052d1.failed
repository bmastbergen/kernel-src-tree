augmented rbtree: rework the RB_DECLARE_CALLBACKS macro definition

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Michel Lespinasse <walken@google.com>
commit 6d2052d188d962ffb7ad3d413e6ffd5f276aec94
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/6d2052d1.failed

Change the definition of the RBCOMPUTE function.  The propagate callback
repeatedly calls RBCOMPUTE as it moves from leaf to root.  it wants to
stop recomputing once the augmented subtree information doesn't change.
This was previously checked using the == operator, but that only works
when the augmented subtree information is a scalar field.  This commit
modifies the RBCOMPUTE function so that it now sets the augmented subtree
information instead of returning it, and returns a boolean value
indicating if the propagate callback should stop.

The motivation for this change is that I want to introduce augmented
rbtree uses where the augmented data for the subtree is a struct instead
of a scalar.

Link: http://lkml.kernel.org/r/20190703040156.56953-4-walken@google.com
	Signed-off-by: Michel Lespinasse <walken@google.com>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: David Howells <dhowells@redhat.com>
	Cc: Davidlohr Bueso <dbueso@suse.de>
	Cc: Uladzislau Rezki <urezki@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6d2052d188d962ffb7ad3d413e6ffd5f276aec94)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/rbtree_augmented.h
#	tools/include/linux/rbtree_augmented.h
diff --cc include/linux/rbtree_augmented.h
index 04bf34884f90,fdd421b8d9ae..000000000000
--- a/include/linux/rbtree_augmented.h
+++ b/include/linux/rbtree_augmented.h
@@@ -119,6 -104,43 +116,46 @@@ RBSTATIC const struct rb_augment_callba
  	.rotate = RBNAME ## _rotate					\
  };
  
++<<<<<<< HEAD
++=======
+ /*
+  * Template for declaring augmented rbtree callbacks,
+  * computing RBAUGMENTED scalar as max(RBCOMPUTE(node)) for all subtree nodes.
+  *
+  * RBSTATIC:    'static' or empty
+  * RBNAME:      name of the rb_augment_callbacks structure
+  * RBSTRUCT:    struct type of the tree nodes
+  * RBFIELD:     name of struct rb_node field within RBSTRUCT
+  * RBTYPE:      type of the RBAUGMENTED field
+  * RBAUGMENTED: name of RBTYPE field within RBSTRUCT holding data for subtree
+  * RBCOMPUTE:   name of function that returns the per-node RBTYPE scalar
+  */
+ 
+ #define RB_DECLARE_CALLBACKS_MAX(RBSTATIC, RBNAME, RBSTRUCT, RBFIELD,	      \
+ 				 RBTYPE, RBAUGMENTED, RBCOMPUTE)	      \
+ static inline bool RBNAME ## _compute_max(RBSTRUCT *node, bool exit)	      \
+ {									      \
+ 	RBSTRUCT *child;						      \
+ 	RBTYPE max = RBCOMPUTE(node);					      \
+ 	if (node->RBFIELD.rb_left) {					      \
+ 		child = rb_entry(node->RBFIELD.rb_left, RBSTRUCT, RBFIELD);   \
+ 		if (child->RBAUGMENTED > max)				      \
+ 			max = child->RBAUGMENTED;			      \
+ 	}								      \
+ 	if (node->RBFIELD.rb_right) {					      \
+ 		child = rb_entry(node->RBFIELD.rb_right, RBSTRUCT, RBFIELD);  \
+ 		if (child->RBAUGMENTED > max)				      \
+ 			max = child->RBAUGMENTED;			      \
+ 	}								      \
+ 	if (exit && node->RBAUGMENTED == max)				      \
+ 		return true;						      \
+ 	node->RBAUGMENTED = max;					      \
+ 	return false;							      \
+ }									      \
+ RB_DECLARE_CALLBACKS(RBSTATIC, RBNAME,					      \
+ 		     RBSTRUCT, RBFIELD, RBAUGMENTED, RBNAME ## _compute_max)
+ 
++>>>>>>> 6d2052d188d9 (augmented rbtree: rework the RB_DECLARE_CALLBACKS macro definition)
  
  #define	RB_RED		0
  #define	RB_BLACK	1
diff --cc tools/include/linux/rbtree_augmented.h
index f46c1bf91f64,381aa948610d..000000000000
--- a/tools/include/linux/rbtree_augmented.h
+++ b/tools/include/linux/rbtree_augmented.h
@@@ -121,6 -106,43 +118,46 @@@ RBSTATIC const struct rb_augment_callba
  	.rotate = RBNAME ## _rotate					\
  };
  
++<<<<<<< HEAD
++=======
+ /*
+  * Template for declaring augmented rbtree callbacks,
+  * computing RBAUGMENTED scalar as max(RBCOMPUTE(node)) for all subtree nodes.
+  *
+  * RBSTATIC:    'static' or empty
+  * RBNAME:      name of the rb_augment_callbacks structure
+  * RBSTRUCT:    struct type of the tree nodes
+  * RBFIELD:     name of struct rb_node field within RBSTRUCT
+  * RBTYPE:      type of the RBAUGMENTED field
+  * RBAUGMENTED: name of RBTYPE field within RBSTRUCT holding data for subtree
+  * RBCOMPUTE:   name of function that returns the per-node RBTYPE scalar
+  */
+ 
+ #define RB_DECLARE_CALLBACKS_MAX(RBSTATIC, RBNAME, RBSTRUCT, RBFIELD,	      \
+ 				 RBTYPE, RBAUGMENTED, RBCOMPUTE)	      \
+ static inline bool RBNAME ## _compute_max(RBSTRUCT *node, bool exit)	      \
+ {									      \
+ 	RBSTRUCT *child;						      \
+ 	RBTYPE max = RBCOMPUTE(node);					      \
+ 	if (node->RBFIELD.rb_left) {					      \
+ 		child = rb_entry(node->RBFIELD.rb_left, RBSTRUCT, RBFIELD);   \
+ 		if (child->RBAUGMENTED > max)				      \
+ 			max = child->RBAUGMENTED;			      \
+ 	}								      \
+ 	if (node->RBFIELD.rb_right) {					      \
+ 		child = rb_entry(node->RBFIELD.rb_right, RBSTRUCT, RBFIELD);  \
+ 		if (child->RBAUGMENTED > max)				      \
+ 			max = child->RBAUGMENTED;			      \
+ 	}								      \
+ 	if (exit && node->RBAUGMENTED == max)				      \
+ 		return true;						      \
+ 	node->RBAUGMENTED = max;					      \
+ 	return false;							      \
+ }									      \
+ RB_DECLARE_CALLBACKS(RBSTATIC, RBNAME,					      \
+ 		     RBSTRUCT, RBFIELD, RBAUGMENTED, RBNAME ## _compute_max)
+ 
++>>>>>>> 6d2052d188d9 (augmented rbtree: rework the RB_DECLARE_CALLBACKS macro definition)
  
  #define	RB_RED		0
  #define	RB_BLACK	1
* Unmerged path include/linux/rbtree_augmented.h
* Unmerged path tools/include/linux/rbtree_augmented.h
