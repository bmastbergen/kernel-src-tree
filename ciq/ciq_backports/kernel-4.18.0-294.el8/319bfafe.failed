net: phylink: rearrange resolve mac_config() call

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Russell King <rmk+kernel@armlinux.org.uk>
commit 319bfafe3494b6fd6cdf48dcdc9d17cf2a77d405
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/319bfafe.failed

Use a boolean to indicate whether mac_config() should be called during
a resolution. This allows resolution to have a single location where
mac_config() will be called, which will allow us to make decisions
about how and what we do.

	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 319bfafe3494b6fd6cdf48dcdc9d17cf2a77d405)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phylink.c
diff --cc drivers/net/phy/phylink.c
index 8ae109f323a0,8ffe5df5c296..000000000000
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@@ -416,26 -418,41 +416,30 @@@ static void phylink_mac_config(struct p
  		    __ETHTOOL_LINK_MODE_MASK_NBITS, state->advertising,
  		    state->pause, state->link, state->an_enabled);
  
 -	pl->mac_ops->mac_config(pl->config, pl->cur_link_an_mode, state);
 +	pl->ops->mac_config(pl->config, pl->cur_link_an_mode, state);
  }
  
 -static void phylink_mac_pcs_an_restart(struct phylink *pl)
++<<<<<<< HEAD
 +static void phylink_mac_config_up(struct phylink *pl,
 +				  const struct phylink_link_state *state)
  {
 -	if (pl->link_config.an_enabled &&
 -	    phy_interface_mode_is_8023z(pl->link_config.interface) &&
 -	    phylink_autoneg_inband(pl->cur_link_an_mode)) {
 -		if (pl->pcs_ops)
 -			pl->pcs_ops->pcs_an_restart(pl->config);
 -		else
 -			pl->mac_ops->mac_an_restart(pl->config);
 -	}
 +	if (state->link)
 +		phylink_mac_config(pl, state);
  }
  
 -static void phylink_pcs_config(struct phylink *pl, bool force_restart,
 -			       const struct phylink_link_state *state)
 +static void phylink_mac_an_restart(struct phylink *pl)
++=======
++static void phylink_mac_pcs_an_restart(struct phylink *pl)
++>>>>>>> 319bfafe3494 (net: phylink: rearrange resolve mac_config() call)
  {
 -	bool restart = force_restart;
 -
 -	if (pl->pcs_ops && pl->pcs_ops->pcs_config(pl->config,
 -						   pl->cur_link_an_mode,
 -						   state->interface,
 -						   state->advertising))
 -		restart = true;
 -
 -	phylink_mac_config(pl, state);
 -
 -	if (restart)
 -		phylink_mac_pcs_an_restart(pl);
 +	if (pl->link_config.an_enabled &&
 +	    phy_interface_mode_is_8023z(pl->link_config.interface))
 +		pl->ops->mac_an_restart(pl->config);
  }
  
 -static void phylink_mac_pcs_get_state(struct phylink *pl,
 -				      struct phylink_link_state *state)
 +static int phylink_get_mac_state(struct phylink *pl, struct phylink_link_state *state)
  {
 +
  	linkmode_copy(state->advertising, pl->link_config.advertising);
  	linkmode_zero(state->lp_advertising);
  	state->interface = pl->link_config.interface;
@@@ -583,9 -613,9 +588,14 @@@ static void phylink_resolve(struct work
  				/* If we have a PHY, we need to update with
  				 * the PHY flow control bits. */
  				link_state.pause = pl->phy_state.pause;
++<<<<<<< HEAD
 +				phylink_apply_manual_flow(pl, &link_state);
 +				phylink_mac_config(pl, &link_state);
++=======
+ 				mac_config = true;
++>>>>>>> 319bfafe3494 (net: phylink: rearrange resolve mac_config() call)
  			}
+ 			phylink_apply_manual_flow(pl, &link_state);
  			break;
  		}
  	}
* Unmerged path drivers/net/phy/phylink.c
