gpio: add driver for Mellanox BlueField 2 GPIO controller

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Asmaa Mnebhi <Asmaa@mellanox.com>
commit bc0ae0e737f5167348579612493e2754e2122dfb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/bc0ae0e7.failed

This patch adds support for the GPIO controller used by
Mellanox BlueField 2 SOCs.

	Signed-off-by: Asmaa Mnebhi <Asmaa@mellanox.com>
Link: https://lore.kernel.org/r/1680de9eb6d2b8855228dde9a2dd065f0dcbe1fb.1583182325.git.Asmaa@mellanox.com
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit bc0ae0e737f5167348579612493e2754e2122dfb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/Kconfig
#	drivers/gpio/Makefile
diff --cc drivers/gpio/Kconfig
index 71c0ab46f216,6234ccc90e7e..000000000000
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@@ -1245,6 -1392,20 +1245,23 @@@ config GPIO_MERRIFIEL
  	help
  	  Say Y here to support Intel Merrifield GPIO.
  
++<<<<<<< HEAD
++=======
+ config GPIO_MLXBF
+ 	tristate "Mellanox BlueField SoC GPIO"
+ 	depends on (MELLANOX_PLATFORM && ARM64 && ACPI) || (64BIT && COMPILE_TEST)
+ 	select GPIO_GENERIC
+ 	help
+ 	  Say Y here if you want GPIO support on Mellanox BlueField SoC.
+ 
+ config GPIO_MLXBF2
+ 	tristate "Mellanox BlueField 2 SoC GPIO"
+ 	depends on (MELLANOX_PLATFORM && ARM64 && ACPI) || (64BIT && COMPILE_TEST)
+ 	select GPIO_GENERIC
+ 	help
+ 	  Say Y here if you want GPIO support on Mellanox BlueField 2 SoC.
+ 
++>>>>>>> bc0ae0e737f5 (gpio: add driver for Mellanox BlueField 2 GPIO controller)
  config GPIO_ML_IOH
  	tristate "OKI SEMICONDUCTOR ML7213 IOH GPIO support"
  	depends on X86 || COMPILE_TEST
diff --cc drivers/gpio/Makefile
index 4684a89c1b84,b2cfc21a97f3..000000000000
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@@ -17,143 -17,162 +17,245 @@@ obj-$(CONFIG_GPIO_GENERIC)	+= gpio-gene
  # directly supported by gpio-generic
  gpio-generic-$(CONFIG_GPIO_GENERIC)	+= gpio-mmio.o
  
++<<<<<<< HEAD
 +obj-$(CONFIG_GPIO_104_DIO_48E)	+= gpio-104-dio-48e.o
 +obj-$(CONFIG_GPIO_104_IDIO_16)	+= gpio-104-idio-16.o
 +obj-$(CONFIG_GPIO_104_IDI_48)	+= gpio-104-idi-48.o
 +obj-$(CONFIG_GPIO_74X164)	+= gpio-74x164.o
 +obj-$(CONFIG_GPIO_74XX_MMIO)	+= gpio-74xx-mmio.o
 +obj-$(CONFIG_GPIO_ADNP)		+= gpio-adnp.o
 +obj-$(CONFIG_GPIO_ADP5520)	+= gpio-adp5520.o
 +obj-$(CONFIG_GPIO_ADP5588)	+= gpio-adp5588.o
 +obj-$(CONFIG_GPIO_ALTERA)  	+= gpio-altera.o
 +obj-$(CONFIG_GPIO_ALTERA_A10SR)	+= gpio-altera-a10sr.o
 +obj-$(CONFIG_GPIO_AMD8111)	+= gpio-amd8111.o
 +obj-$(CONFIG_GPIO_AMDPT)	+= gpio-amdpt.o
 +obj-$(CONFIG_GPIO_ARIZONA)	+= gpio-arizona.o
 +obj-$(CONFIG_GPIO_ATH79)	+= gpio-ath79.o
 +obj-$(CONFIG_GPIO_ASPEED)	+= gpio-aspeed.o
++=======
+ obj-$(CONFIG_GPIO_104_DIO_48E)		+= gpio-104-dio-48e.o
+ obj-$(CONFIG_GPIO_104_IDI_48)		+= gpio-104-idi-48.o
+ obj-$(CONFIG_GPIO_104_IDIO_16)		+= gpio-104-idio-16.o
+ obj-$(CONFIG_GPIO_74X164)		+= gpio-74x164.o
+ obj-$(CONFIG_GPIO_74XX_MMIO)		+= gpio-74xx-mmio.o
+ obj-$(CONFIG_GPIO_ADNP)			+= gpio-adnp.o
+ obj-$(CONFIG_GPIO_ADP5520)		+= gpio-adp5520.o
+ obj-$(CONFIG_GPIO_ADP5588)		+= gpio-adp5588.o
+ obj-$(CONFIG_GPIO_ALTERA_A10SR)		+= gpio-altera-a10sr.o
+ obj-$(CONFIG_GPIO_ALTERA)  		+= gpio-altera.o
+ obj-$(CONFIG_GPIO_AMD8111)		+= gpio-amd8111.o
+ obj-$(CONFIG_GPIO_AMD_FCH)		+= gpio-amd-fch.o
+ obj-$(CONFIG_GPIO_AMDPT)		+= gpio-amdpt.o
+ obj-$(CONFIG_GPIO_ARIZONA)		+= gpio-arizona.o
+ obj-$(CONFIG_GPIO_ASPEED)		+= gpio-aspeed.o
+ obj-$(CONFIG_GPIO_ASPEED_SGPIO)		+= gpio-aspeed-sgpio.o
+ obj-$(CONFIG_GPIO_ATH79)		+= gpio-ath79.o
+ obj-$(CONFIG_GPIO_BCM_KONA)		+= gpio-bcm-kona.o
+ obj-$(CONFIG_GPIO_BCM_XGS_IPROC)	+= gpio-xgs-iproc.o
+ obj-$(CONFIG_GPIO_BD70528)		+= gpio-bd70528.o
+ obj-$(CONFIG_GPIO_BD71828)		+= gpio-bd71828.o
+ obj-$(CONFIG_GPIO_BD9571MWV)		+= gpio-bd9571mwv.o
+ obj-$(CONFIG_GPIO_BRCMSTB)		+= gpio-brcmstb.o
+ obj-$(CONFIG_GPIO_BT8XX)		+= gpio-bt8xx.o
+ obj-$(CONFIG_GPIO_CADENCE)		+= gpio-cadence.o
+ obj-$(CONFIG_GPIO_CLPS711X)		+= gpio-clps711x.o
+ obj-$(CONFIG_GPIO_SNPS_CREG)		+= gpio-creg-snps.o
+ obj-$(CONFIG_GPIO_CRYSTAL_COVE)		+= gpio-crystalcove.o
+ obj-$(CONFIG_GPIO_CS5535)		+= gpio-cs5535.o
+ obj-$(CONFIG_GPIO_DA9052)		+= gpio-da9052.o
+ obj-$(CONFIG_GPIO_DA9055)		+= gpio-da9055.o
+ obj-$(CONFIG_GPIO_DAVINCI)		+= gpio-davinci.o
+ obj-$(CONFIG_GPIO_DLN2)			+= gpio-dln2.o
+ obj-$(CONFIG_GPIO_DWAPB)		+= gpio-dwapb.o
+ obj-$(CONFIG_GPIO_EIC_SPRD)		+= gpio-eic-sprd.o
+ obj-$(CONFIG_GPIO_EM)			+= gpio-em.o
+ obj-$(CONFIG_GPIO_EP93XX)		+= gpio-ep93xx.o
+ obj-$(CONFIG_GPIO_EXAR)			+= gpio-exar.o
+ obj-$(CONFIG_GPIO_F7188X)		+= gpio-f7188x.o
+ obj-$(CONFIG_GPIO_FTGPIO010)		+= gpio-ftgpio010.o
+ obj-$(CONFIG_GPIO_GE_FPGA)		+= gpio-ge.o
+ obj-$(CONFIG_GPIO_GPIO_MM)		+= gpio-gpio-mm.o
+ obj-$(CONFIG_GPIO_GRGPIO)		+= gpio-grgpio.o
+ obj-$(CONFIG_GPIO_GW_PLD)		+= gpio-gw-pld.o
+ obj-$(CONFIG_GPIO_HLWD)			+= gpio-hlwd.o
+ obj-$(CONFIG_HTC_EGPIO)			+= gpio-htc-egpio.o
+ obj-$(CONFIG_GPIO_ICH)			+= gpio-ich.o
+ obj-$(CONFIG_GPIO_INTEL_MID)		+= gpio-intel-mid.o
+ obj-$(CONFIG_GPIO_IOP)			+= gpio-iop.o
+ obj-$(CONFIG_GPIO_IT87)			+= gpio-it87.o
+ obj-$(CONFIG_GPIO_IXP4XX)		+= gpio-ixp4xx.o
+ obj-$(CONFIG_GPIO_JANZ_TTL)		+= gpio-janz-ttl.o
+ obj-$(CONFIG_GPIO_KEMPLD)		+= gpio-kempld.o
+ obj-$(CONFIG_GPIO_LOGICVC)		+= gpio-logicvc.o
+ obj-$(CONFIG_GPIO_LOONGSON1)		+= gpio-loongson1.o
+ obj-$(CONFIG_GPIO_LOONGSON)		+= gpio-loongson.o
+ obj-$(CONFIG_GPIO_LP3943)		+= gpio-lp3943.o
+ obj-$(CONFIG_GPIO_LP873X)		+= gpio-lp873x.o
+ obj-$(CONFIG_GPIO_LP87565)		+= gpio-lp87565.o
+ obj-$(CONFIG_GPIO_LPC18XX)		+= gpio-lpc18xx.o
+ obj-$(CONFIG_GPIO_LPC32XX)		+= gpio-lpc32xx.o
+ obj-$(CONFIG_GPIO_MADERA)		+= gpio-madera.o
+ obj-$(CONFIG_GPIO_MAX3191X)		+= gpio-max3191x.o
+ obj-$(CONFIG_GPIO_MAX7300)		+= gpio-max7300.o
+ obj-$(CONFIG_GPIO_MAX7301)		+= gpio-max7301.o
+ obj-$(CONFIG_GPIO_MAX730X)		+= gpio-max730x.o
+ obj-$(CONFIG_GPIO_MAX732X)		+= gpio-max732x.o
+ obj-$(CONFIG_GPIO_MAX77620)		+= gpio-max77620.o
+ obj-$(CONFIG_GPIO_MAX77650)		+= gpio-max77650.o
+ obj-$(CONFIG_GPIO_MB86S7X)		+= gpio-mb86s7x.o
+ obj-$(CONFIG_GPIO_MC33880)		+= gpio-mc33880.o
+ obj-$(CONFIG_GPIO_MC9S08DZ60)		+= gpio-mc9s08dz60.o
+ obj-$(CONFIG_GPIO_MENZ127)		+= gpio-menz127.o
+ obj-$(CONFIG_GPIO_MERRIFIELD)		+= gpio-merrifield.o
+ obj-$(CONFIG_GPIO_ML_IOH)		+= gpio-ml-ioh.o
+ obj-$(CONFIG_GPIO_MLXBF)		+= gpio-mlxbf.o
+ obj-$(CONFIG_GPIO_MLXBF2)		+= gpio-mlxbf2.o
+ obj-$(CONFIG_GPIO_MM_LANTIQ)		+= gpio-mm-lantiq.o
+ obj-$(CONFIG_GPIO_MOCKUP)		+= gpio-mockup.o
+ obj-$(CONFIG_GPIO_MOXTET)		+= gpio-moxtet.o
+ obj-$(CONFIG_GPIO_MPC5200)		+= gpio-mpc5200.o
+ obj-$(CONFIG_GPIO_MPC8XXX)		+= gpio-mpc8xxx.o
+ obj-$(CONFIG_GPIO_MSIC)			+= gpio-msic.o
+ obj-$(CONFIG_GPIO_MT7621)		+= gpio-mt7621.o
+ obj-$(CONFIG_GPIO_MVEBU)		+= gpio-mvebu.o
+ obj-$(CONFIG_GPIO_MXC)			+= gpio-mxc.o
+ obj-$(CONFIG_GPIO_MXS)			+= gpio-mxs.o
+ obj-$(CONFIG_GPIO_OCTEON)		+= gpio-octeon.o
+ obj-$(CONFIG_GPIO_OMAP)			+= gpio-omap.o
+ obj-$(CONFIG_GPIO_PALMAS)		+= gpio-palmas.o
+ obj-$(CONFIG_GPIO_PCA953X)		+= gpio-pca953x.o
+ obj-$(CONFIG_GPIO_PCF857X)		+= gpio-pcf857x.o
+ obj-$(CONFIG_GPIO_PCH)			+= gpio-pch.o
+ obj-$(CONFIG_GPIO_PCIE_IDIO_24)		+= gpio-pcie-idio-24.o
+ obj-$(CONFIG_GPIO_PCI_IDIO_16)		+= gpio-pci-idio-16.o
+ obj-$(CONFIG_GPIO_PISOSR)		+= gpio-pisosr.o
+ obj-$(CONFIG_GPIO_PL061)		+= gpio-pl061.o
+ obj-$(CONFIG_GPIO_PMIC_EIC_SPRD)	+= gpio-pmic-eic-sprd.o
+ obj-$(CONFIG_GPIO_PXA)			+= gpio-pxa.o
++>>>>>>> bc0ae0e737f5 (gpio: add driver for Mellanox BlueField 2 GPIO controller)
  obj-$(CONFIG_GPIO_RASPBERRYPI_EXP)	+= gpio-raspberrypi-exp.o
 -obj-$(CONFIG_GPIO_RC5T583)		+= gpio-rc5t583.o
 -obj-$(CONFIG_GPIO_RCAR)			+= gpio-rcar.o
 -obj-$(CONFIG_GPIO_RDA)			+= gpio-rda.o
 -obj-$(CONFIG_GPIO_RDC321X)		+= gpio-rdc321x.o
 -obj-$(CONFIG_GPIO_REG)			+= gpio-reg.o
 -obj-$(CONFIG_ARCH_SA1100)		+= gpio-sa1100.o
 -obj-$(CONFIG_GPIO_SAMA5D2_PIOBU)	+= gpio-sama5d2-piobu.o
 -obj-$(CONFIG_GPIO_SCH311X)		+= gpio-sch311x.o
 -obj-$(CONFIG_GPIO_SCH)			+= gpio-sch.o
 -obj-$(CONFIG_GPIO_SIFIVE)		+= gpio-sifive.o
 -obj-$(CONFIG_GPIO_SIOX)			+= gpio-siox.o
 -obj-$(CONFIG_GPIO_SODAVILLE)		+= gpio-sodaville.o
 -obj-$(CONFIG_GPIO_SPEAR_SPICS)		+= gpio-spear-spics.o
 -obj-$(CONFIG_GPIO_SPRD)			+= gpio-sprd.o
 -obj-$(CONFIG_GPIO_STA2X11)		+= gpio-sta2x11.o
 -obj-$(CONFIG_GPIO_STMPE)		+= gpio-stmpe.o
 -obj-$(CONFIG_GPIO_STP_XWAY)		+= gpio-stp-xway.o
 -obj-$(CONFIG_GPIO_SYSCON)		+= gpio-syscon.o
 -obj-$(CONFIG_GPIO_TB10X)		+= gpio-tb10x.o
 -obj-$(CONFIG_GPIO_TC3589X)		+= gpio-tc3589x.o
 -obj-$(CONFIG_GPIO_TEGRA186)		+= gpio-tegra186.o
 -obj-$(CONFIG_GPIO_TEGRA)		+= gpio-tegra.o
 -obj-$(CONFIG_GPIO_THUNDERX)		+= gpio-thunderx.o
 -obj-$(CONFIG_GPIO_TIMBERDALE)		+= gpio-timberdale.o
 -obj-$(CONFIG_GPIO_TPIC2810)		+= gpio-tpic2810.o
 -obj-$(CONFIG_GPIO_TPS65086)		+= gpio-tps65086.o
 -obj-$(CONFIG_GPIO_TPS65218)		+= gpio-tps65218.o
 -obj-$(CONFIG_GPIO_TPS6586X)		+= gpio-tps6586x.o
 -obj-$(CONFIG_GPIO_TPS65910)		+= gpio-tps65910.o
 -obj-$(CONFIG_GPIO_TPS65912)		+= gpio-tps65912.o
 -obj-$(CONFIG_GPIO_TPS68470)		+= gpio-tps68470.o
 -obj-$(CONFIG_GPIO_TQMX86)		+= gpio-tqmx86.o
 -obj-$(CONFIG_GPIO_TS4800)		+= gpio-ts4800.o
 -obj-$(CONFIG_GPIO_TS4900)		+= gpio-ts4900.o
 -obj-$(CONFIG_GPIO_TS5500)		+= gpio-ts5500.o
 -obj-$(CONFIG_GPIO_TWL4030)		+= gpio-twl4030.o
 -obj-$(CONFIG_GPIO_TWL6040)		+= gpio-twl6040.o
 -obj-$(CONFIG_GPIO_UCB1400)		+= gpio-ucb1400.o
 -obj-$(CONFIG_GPIO_UNIPHIER)		+= gpio-uniphier.o
 -obj-$(CONFIG_GPIO_VF610)		+= gpio-vf610.o
 -obj-$(CONFIG_GPIO_VIPERBOARD)		+= gpio-viperboard.o
 -obj-$(CONFIG_GPIO_VR41XX)		+= gpio-vr41xx.o
 -obj-$(CONFIG_GPIO_VX855)		+= gpio-vx855.o
 -obj-$(CONFIG_GPIO_WCD934X)		+= gpio-wcd934x.o
 -obj-$(CONFIG_GPIO_WHISKEY_COVE)		+= gpio-wcove.o
 -obj-$(CONFIG_GPIO_WINBOND)		+= gpio-winbond.o
 -obj-$(CONFIG_GPIO_WM831X)		+= gpio-wm831x.o
 -obj-$(CONFIG_GPIO_WM8350)		+= gpio-wm8350.o
 -obj-$(CONFIG_GPIO_WM8994)		+= gpio-wm8994.o
 -obj-$(CONFIG_GPIO_WS16C48)		+= gpio-ws16c48.o
 -obj-$(CONFIG_GPIO_XGENE)		+= gpio-xgene.o
 -obj-$(CONFIG_GPIO_XGENE_SB)		+= gpio-xgene-sb.o
 -obj-$(CONFIG_GPIO_XILINX)		+= gpio-xilinx.o
 -obj-$(CONFIG_GPIO_XLP)			+= gpio-xlp.o
 -obj-$(CONFIG_GPIO_XRA1403)		+= gpio-xra1403.o
 -obj-$(CONFIG_GPIO_XTENSA)		+= gpio-xtensa.o
 -obj-$(CONFIG_GPIO_ZEVIO)		+= gpio-zevio.o
 -obj-$(CONFIG_GPIO_ZX)			+= gpio-zx.o
 -obj-$(CONFIG_GPIO_ZYNQ)			+= gpio-zynq.o
 +obj-$(CONFIG_GPIO_BCM_KONA)	+= gpio-bcm-kona.o
 +obj-$(CONFIG_GPIO_BD9571MWV)	+= gpio-bd9571mwv.o
 +obj-$(CONFIG_GPIO_BRCMSTB)	+= gpio-brcmstb.o
 +obj-$(CONFIG_GPIO_BT8XX)	+= gpio-bt8xx.o
 +obj-$(CONFIG_GPIO_CLPS711X)	+= gpio-clps711x.o
 +obj-$(CONFIG_GPIO_CS5535)	+= gpio-cs5535.o
 +obj-$(CONFIG_GPIO_CRYSTAL_COVE)	+= gpio-crystalcove.o
 +obj-$(CONFIG_GPIO_DA9052)	+= gpio-da9052.o
 +obj-$(CONFIG_GPIO_DA9055)	+= gpio-da9055.o
 +obj-$(CONFIG_GPIO_DAVINCI)	+= gpio-davinci.o
 +obj-$(CONFIG_GPIO_DLN2)		+= gpio-dln2.o
 +obj-$(CONFIG_GPIO_DWAPB)	+= gpio-dwapb.o
 +obj-$(CONFIG_GPIO_EIC_SPRD)	+= gpio-eic-sprd.o
 +obj-$(CONFIG_GPIO_EM)		+= gpio-em.o
 +obj-$(CONFIG_GPIO_EP93XX)	+= gpio-ep93xx.o
 +obj-$(CONFIG_GPIO_EXAR)		+= gpio-exar.o
 +obj-$(CONFIG_GPIO_F7188X)	+= gpio-f7188x.o
 +obj-$(CONFIG_GPIO_FTGPIO010)	+= gpio-ftgpio010.o
 +obj-$(CONFIG_GPIO_GE_FPGA)	+= gpio-ge.o
 +obj-$(CONFIG_GPIO_GPIO_MM)	+= gpio-gpio-mm.o
 +obj-$(CONFIG_GPIO_GRGPIO)	+= gpio-grgpio.o
 +obj-$(CONFIG_GPIO_HLWD)		+= gpio-hlwd.o
 +obj-$(CONFIG_HTC_EGPIO)		+= gpio-htc-egpio.o
 +obj-$(CONFIG_GPIO_ICH)		+= gpio-ich.o
 +obj-$(CONFIG_GPIO_INGENIC)	+= gpio-ingenic.o
 +obj-$(CONFIG_GPIO_IOP)		+= gpio-iop.o
 +obj-$(CONFIG_GPIO_IT87)		+= gpio-it87.o
 +obj-$(CONFIG_GPIO_JANZ_TTL)	+= gpio-janz-ttl.o
 +obj-$(CONFIG_GPIO_KEMPLD)	+= gpio-kempld.o
 +obj-$(CONFIG_ARCH_KS8695)	+= gpio-ks8695.o
 +obj-$(CONFIG_GPIO_INTEL_MID)	+= gpio-intel-mid.o
 +obj-$(CONFIG_GPIO_LOONGSON)	+= gpio-loongson.o
 +obj-$(CONFIG_GPIO_LP3943)	+= gpio-lp3943.o
 +obj-$(CONFIG_GPIO_LPC18XX)	+= gpio-lpc18xx.o
 +obj-$(CONFIG_ARCH_LPC32XX)	+= gpio-lpc32xx.o
 +obj-$(CONFIG_GPIO_LP873X)	+= gpio-lp873x.o
 +obj-$(CONFIG_GPIO_LP87565)	+= gpio-lp87565.o
 +obj-$(CONFIG_GPIO_LYNXPOINT)	+= gpio-lynxpoint.o
 +obj-$(CONFIG_GPIO_MAX3191X)	+= gpio-max3191x.o
 +obj-$(CONFIG_GPIO_MAX730X)	+= gpio-max730x.o
 +obj-$(CONFIG_GPIO_MAX7300)	+= gpio-max7300.o
 +obj-$(CONFIG_GPIO_MAX7301)	+= gpio-max7301.o
 +obj-$(CONFIG_GPIO_MAX732X)	+= gpio-max732x.o
 +obj-$(CONFIG_GPIO_MAX77620)	+= gpio-max77620.o
 +obj-$(CONFIG_GPIO_MB86S7X)	+= gpio-mb86s7x.o
 +obj-$(CONFIG_GPIO_MENZ127)	+= gpio-menz127.o
 +obj-$(CONFIG_GPIO_MERRIFIELD)	+= gpio-merrifield.o
 +obj-$(CONFIG_GPIO_MC33880)	+= gpio-mc33880.o
 +obj-$(CONFIG_GPIO_MC9S08DZ60)	+= gpio-mc9s08dz60.o
 +obj-$(CONFIG_GPIO_ML_IOH)	+= gpio-ml-ioh.o
 +obj-$(CONFIG_GPIO_MM_LANTIQ)	+= gpio-mm-lantiq.o
 +obj-$(CONFIG_GPIO_MOCKUP)      += gpio-mockup.o
 +obj-$(CONFIG_GPIO_MPC5200)	+= gpio-mpc5200.o
 +obj-$(CONFIG_GPIO_MPC8XXX)	+= gpio-mpc8xxx.o
 +obj-$(CONFIG_GPIO_MSIC)		+= gpio-msic.o
 +obj-$(CONFIG_GPIO_MVEBU)        += gpio-mvebu.o
 +obj-$(CONFIG_GPIO_MXC)		+= gpio-mxc.o
 +obj-$(CONFIG_GPIO_MXS)		+= gpio-mxs.o
 +obj-$(CONFIG_GPIO_OCTEON)	+= gpio-octeon.o
 +obj-$(CONFIG_GPIO_OMAP)		+= gpio-omap.o
 +obj-$(CONFIG_GPIO_PCA953X)	+= gpio-pca953x.o
 +obj-$(CONFIG_GPIO_PCF857X)	+= gpio-pcf857x.o
 +obj-$(CONFIG_GPIO_PCH)		+= gpio-pch.o
 +obj-$(CONFIG_GPIO_PCI_IDIO_16)	+= gpio-pci-idio-16.o
 +obj-$(CONFIG_GPIO_PCIE_IDIO_24)	+= gpio-pcie-idio-24.o
 +obj-$(CONFIG_GPIO_PISOSR)	+= gpio-pisosr.o
 +obj-$(CONFIG_GPIO_PL061)	+= gpio-pl061.o
 +obj-$(CONFIG_GPIO_PMIC_EIC_SPRD)	+= gpio-pmic-eic-sprd.o
 +obj-$(CONFIG_GPIO_PXA)		+= gpio-pxa.o
 +obj-$(CONFIG_GPIO_RC5T583)	+= gpio-rc5t583.o
 +obj-$(CONFIG_GPIO_RDC321X)	+= gpio-rdc321x.o
 +obj-$(CONFIG_GPIO_RCAR)		+= gpio-rcar.o
 +obj-$(CONFIG_GPIO_REG)		+= gpio-reg.o
 +obj-$(CONFIG_ARCH_SA1100)	+= gpio-sa1100.o
 +obj-$(CONFIG_GPIO_SCH)		+= gpio-sch.o
 +obj-$(CONFIG_GPIO_SCH311X)	+= gpio-sch311x.o
 +obj-$(CONFIG_GPIO_SODAVILLE)	+= gpio-sodaville.o
 +obj-$(CONFIG_GPIO_SPEAR_SPICS)	+= gpio-spear-spics.o
 +obj-$(CONFIG_GPIO_SPRD)		+= gpio-sprd.o
 +obj-$(CONFIG_GPIO_STA2X11)	+= gpio-sta2x11.o
 +obj-$(CONFIG_GPIO_STMPE)	+= gpio-stmpe.o
 +obj-$(CONFIG_GPIO_STP_XWAY)	+= gpio-stp-xway.o
 +obj-$(CONFIG_GPIO_SYSCON)	+= gpio-syscon.o
 +obj-$(CONFIG_GPIO_TB10X)	+= gpio-tb10x.o
 +obj-$(CONFIG_GPIO_TC3589X)	+= gpio-tc3589x.o
 +obj-$(CONFIG_GPIO_TEGRA)	+= gpio-tegra.o
 +obj-$(CONFIG_GPIO_TEGRA186)	+= gpio-tegra186.o
 +obj-$(CONFIG_GPIO_THUNDERX)	+= gpio-thunderx.o
 +obj-$(CONFIG_GPIO_TIMBERDALE)	+= gpio-timberdale.o
 +obj-$(CONFIG_GPIO_PALMAS)	+= gpio-palmas.o
 +obj-$(CONFIG_GPIO_TPIC2810)	+= gpio-tpic2810.o
 +obj-$(CONFIG_GPIO_TPS65086)	+= gpio-tps65086.o
 +obj-$(CONFIG_GPIO_TPS65218)	+= gpio-tps65218.o
 +obj-$(CONFIG_GPIO_TPS6586X)	+= gpio-tps6586x.o
 +obj-$(CONFIG_GPIO_TPS65910)	+= gpio-tps65910.o
 +obj-$(CONFIG_GPIO_TPS65912)	+= gpio-tps65912.o
 +obj-$(CONFIG_GPIO_TPS68470)	+= gpio-tps68470.o
 +obj-$(CONFIG_GPIO_TS4800)	+= gpio-ts4800.o
 +obj-$(CONFIG_GPIO_TS4900)	+= gpio-ts4900.o
 +obj-$(CONFIG_GPIO_TS5500)	+= gpio-ts5500.o
 +obj-$(CONFIG_GPIO_TWL4030)	+= gpio-twl4030.o
 +obj-$(CONFIG_GPIO_TWL6040)	+= gpio-twl6040.o
 +obj-$(CONFIG_GPIO_UCB1400)	+= gpio-ucb1400.o
 +obj-$(CONFIG_GPIO_UNIPHIER)	+= gpio-uniphier.o
 +obj-$(CONFIG_GPIO_VF610)	+= gpio-vf610.o
 +obj-$(CONFIG_GPIO_VIPERBOARD)	+= gpio-viperboard.o
 +obj-$(CONFIG_GPIO_VR41XX)	+= gpio-vr41xx.o
 +obj-$(CONFIG_GPIO_VX855)	+= gpio-vx855.o
 +obj-$(CONFIG_GPIO_WHISKEY_COVE)	+= gpio-wcove.o
 +obj-$(CONFIG_GPIO_WINBOND)	+= gpio-winbond.o
 +obj-$(CONFIG_GPIO_WM831X)	+= gpio-wm831x.o
 +obj-$(CONFIG_GPIO_WM8350)	+= gpio-wm8350.o
 +obj-$(CONFIG_GPIO_WM8994)	+= gpio-wm8994.o
 +obj-$(CONFIG_GPIO_WS16C48)	+= gpio-ws16c48.o
 +obj-$(CONFIG_GPIO_XGENE)	+= gpio-xgene.o
 +obj-$(CONFIG_GPIO_XGENE_SB)	+= gpio-xgene-sb.o
 +obj-$(CONFIG_GPIO_XILINX)	+= gpio-xilinx.o
 +obj-$(CONFIG_GPIO_XLP)		+= gpio-xlp.o
 +obj-$(CONFIG_GPIO_XRA1403)	+= gpio-xra1403.o
 +obj-$(CONFIG_GPIO_XTENSA)	+= gpio-xtensa.o
 +obj-$(CONFIG_GPIO_ZEVIO)	+= gpio-zevio.o
 +obj-$(CONFIG_GPIO_ZYNQ)		+= gpio-zynq.o
 +obj-$(CONFIG_GPIO_ZX)		+= gpio-zx.o
 +obj-$(CONFIG_GPIO_LOONGSON1)	+= gpio-loongson1.o
* Unmerged path drivers/gpio/Kconfig
* Unmerged path drivers/gpio/Makefile
diff --git a/drivers/gpio/gpio-mlxbf2.c b/drivers/gpio/gpio-mlxbf2.c
new file mode 100644
index 000000000000..7b7085050219
--- /dev/null
+++ b/drivers/gpio/gpio-mlxbf2.c
@@ -0,0 +1,335 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <linux/acpi.h>
+#include <linux/bitfield.h>
+#include <linux/bitops.h>
+#include <linux/device.h>
+#include <linux/gpio/driver.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/pm.h>
+#include <linux/resource.h>
+#include <linux/spinlock.h>
+#include <linux/types.h>
+#include <linux/version.h>
+
+/*
+ * There are 3 YU GPIO blocks:
+ * gpio[0]: HOST_GPIO0->HOST_GPIO31
+ * gpio[1]: HOST_GPIO32->HOST_GPIO63
+ * gpio[2]: HOST_GPIO64->HOST_GPIO69
+ */
+#define MLXBF2_GPIO_MAX_PINS_PER_BLOCK 32
+
+/*
+ * arm_gpio_lock register:
+ * bit[31]	lock status: active if set
+ * bit[15:0]	set lock
+ * The lock is enabled only if 0xd42f is written to this field
+ */
+#define YU_ARM_GPIO_LOCK_ADDR		0x2801088
+#define YU_ARM_GPIO_LOCK_SIZE		0x8
+#define YU_LOCK_ACTIVE_BIT(val)		(val >> 31)
+#define YU_ARM_GPIO_LOCK_ACQUIRE	0xd42f
+#define YU_ARM_GPIO_LOCK_RELEASE	0x0
+
+/*
+ * gpio[x] block registers and their offset
+ */
+#define YU_GPIO_DATAIN			0x04
+#define YU_GPIO_MODE1			0x08
+#define YU_GPIO_MODE0			0x0c
+#define YU_GPIO_DATASET			0x14
+#define YU_GPIO_DATACLEAR		0x18
+#define YU_GPIO_MODE1_CLEAR		0x50
+#define YU_GPIO_MODE0_SET		0x54
+#define YU_GPIO_MODE0_CLEAR		0x58
+
+#ifdef CONFIG_PM
+struct mlxbf2_gpio_context_save_regs {
+	u32 gpio_mode0;
+	u32 gpio_mode1;
+};
+#endif
+
+/* BlueField-2 gpio block context structure. */
+struct mlxbf2_gpio_context {
+	struct gpio_chip gc;
+
+	/* YU GPIO blocks address */
+	void __iomem *gpio_io;
+
+#ifdef CONFIG_PM
+	struct mlxbf2_gpio_context_save_regs *csave_regs;
+#endif
+};
+
+/* BlueField-2 gpio shared structure. */
+struct mlxbf2_gpio_param {
+	void __iomem *io;
+	struct resource *res;
+	struct mutex *lock;
+};
+
+static struct resource yu_arm_gpio_lock_res = {
+	.start = YU_ARM_GPIO_LOCK_ADDR,
+	.end   = YU_ARM_GPIO_LOCK_ADDR + YU_ARM_GPIO_LOCK_SIZE - 1,
+	.name  = "YU_ARM_GPIO_LOCK",
+};
+
+static DEFINE_MUTEX(yu_arm_gpio_lock_mutex);
+
+static struct mlxbf2_gpio_param yu_arm_gpio_lock_param = {
+	.res = &yu_arm_gpio_lock_res,
+	.lock = &yu_arm_gpio_lock_mutex,
+};
+
+/* Request memory region and map yu_arm_gpio_lock resource */
+static int mlxbf2_gpio_get_lock_res(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct resource *res;
+	resource_size_t size;
+	int ret = 0;
+
+	mutex_lock(yu_arm_gpio_lock_param.lock);
+
+	/* Check if the memory map already exists */
+	if (yu_arm_gpio_lock_param.io)
+		goto exit;
+
+	res = yu_arm_gpio_lock_param.res;
+	size = resource_size(res);
+
+	if (!devm_request_mem_region(dev, res->start, size, res->name)) {
+		ret = -EFAULT;
+		goto exit;
+	}
+
+	yu_arm_gpio_lock_param.io = devm_ioremap(dev, res->start, size);
+	if (IS_ERR(yu_arm_gpio_lock_param.io))
+		ret = PTR_ERR(yu_arm_gpio_lock_param.io);
+
+exit:
+	mutex_unlock(yu_arm_gpio_lock_param.lock);
+
+	return ret;
+}
+
+/*
+ * Acquire the YU arm_gpio_lock to be able to change the direction
+ * mode. If the lock_active bit is already set, return an error.
+ */
+static int mlxbf2_gpio_lock_acquire(struct mlxbf2_gpio_context *gs)
+{
+	u32 arm_gpio_lock_val;
+
+	spin_lock(&gs->gc.bgpio_lock);
+	mutex_lock(yu_arm_gpio_lock_param.lock);
+
+	arm_gpio_lock_val = readl(yu_arm_gpio_lock_param.io);
+
+	/*
+	 * When lock active bit[31] is set, ModeX is write enabled
+	 */
+	if (YU_LOCK_ACTIVE_BIT(arm_gpio_lock_val)) {
+		mutex_unlock(yu_arm_gpio_lock_param.lock);
+		spin_unlock(&gs->gc.bgpio_lock);
+		return -EINVAL;
+	}
+
+	writel(YU_ARM_GPIO_LOCK_ACQUIRE, yu_arm_gpio_lock_param.io);
+
+	return 0;
+}
+
+/*
+ * Release the YU arm_gpio_lock after changing the direction mode.
+ */
+static void mlxbf2_gpio_lock_release(struct mlxbf2_gpio_context *gs)
+{
+	writel(YU_ARM_GPIO_LOCK_RELEASE, yu_arm_gpio_lock_param.io);
+	mutex_unlock(yu_arm_gpio_lock_param.lock);
+	spin_unlock(&gs->gc.bgpio_lock);
+}
+
+/*
+ * mode0 and mode1 are both locked by the gpio_lock field.
+ *
+ * Together, mode0 and mode1 define the gpio Mode dependeing also
+ * on Reg_DataOut.
+ *
+ * {mode1,mode0}:{Reg_DataOut=0,Reg_DataOut=1}->{DataOut=0,DataOut=1}
+ *
+ * {0,0}:Reg_DataOut{0,1}->{Z,Z} Input PAD
+ * {0,1}:Reg_DataOut{0,1}->{0,1} Full drive Output PAD
+ * {1,0}:Reg_DataOut{0,1}->{0,Z} 0-set PAD to low, 1-float
+ * {1,1}:Reg_DataOut{0,1}->{Z,1} 0-float, 1-set PAD to high
+ */
+
+/*
+ * Set input direction:
+ * {mode1,mode0} = {0,0}
+ */
+static int mlxbf2_gpio_direction_input(struct gpio_chip *chip,
+				       unsigned int offset)
+{
+	struct mlxbf2_gpio_context *gs = gpiochip_get_data(chip);
+	int ret;
+
+	/*
+	 * Although the arm_gpio_lock was set in the probe function, check again
+	 * if it is still enabled to be able to write to the ModeX registers.
+	 */
+	ret = mlxbf2_gpio_lock_acquire(gs);
+	if (ret < 0)
+		return ret;
+
+	writel(BIT(offset), gs->gpio_io + YU_GPIO_MODE0_CLEAR);
+	writel(BIT(offset), gs->gpio_io + YU_GPIO_MODE1_CLEAR);
+
+	mlxbf2_gpio_lock_release(gs);
+
+	return ret;
+}
+
+/*
+ * Set output direction:
+ * {mode1,mode0} = {0,1}
+ */
+static int mlxbf2_gpio_direction_output(struct gpio_chip *chip,
+					unsigned int offset,
+					int value)
+{
+	struct mlxbf2_gpio_context *gs = gpiochip_get_data(chip);
+	int ret = 0;
+
+	/*
+	 * Although the arm_gpio_lock was set in the probe function,
+	 * check again it is still enabled to be able to write to the
+	 * ModeX registers.
+	 */
+	ret = mlxbf2_gpio_lock_acquire(gs);
+	if (ret < 0)
+		return ret;
+
+	writel(BIT(offset), gs->gpio_io + YU_GPIO_MODE1_CLEAR);
+	writel(BIT(offset), gs->gpio_io + YU_GPIO_MODE0_SET);
+
+	mlxbf2_gpio_lock_release(gs);
+
+	return ret;
+}
+
+/* BlueField-2 GPIO driver initialization routine. */
+static int
+mlxbf2_gpio_probe(struct platform_device *pdev)
+{
+	struct mlxbf2_gpio_context *gs;
+	struct device *dev = &pdev->dev;
+	struct gpio_chip *gc;
+	struct resource *res;
+	unsigned int npins;
+	int ret;
+
+	gs = devm_kzalloc(dev, sizeof(*gs), GFP_KERNEL);
+	if (!gs)
+		return -ENOMEM;
+
+	/* YU GPIO block address */
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -ENODEV;
+
+	gs->gpio_io = devm_ioremap(dev, res->start, resource_size(res));
+	if (!gs->gpio_io)
+		return -ENOMEM;
+
+	ret = mlxbf2_gpio_get_lock_res(pdev);
+	if (ret) {
+		dev_err(dev, "Failed to get yu_arm_gpio_lock resource\n");
+		return ret;
+	}
+
+	if (device_property_read_u32(dev, "npins", &npins))
+		npins = MLXBF2_GPIO_MAX_PINS_PER_BLOCK;
+
+	gc = &gs->gc;
+
+	ret = bgpio_init(gc, dev, 4,
+			gs->gpio_io + YU_GPIO_DATAIN,
+			gs->gpio_io + YU_GPIO_DATASET,
+			gs->gpio_io + YU_GPIO_DATACLEAR,
+			NULL,
+			NULL,
+			0);
+
+	gc->direction_input = mlxbf2_gpio_direction_input;
+	gc->direction_output = mlxbf2_gpio_direction_output;
+	gc->ngpio = npins;
+	gc->owner = THIS_MODULE;
+
+	platform_set_drvdata(pdev, gs);
+
+	ret = devm_gpiochip_add_data(dev, &gs->gc, gs);
+	if (ret) {
+		dev_err(dev, "Failed adding memory mapped gpiochip\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int mlxbf2_gpio_suspend(struct platform_device *pdev,
+				pm_message_t state)
+{
+	struct mlxbf2_gpio_context *gs = platform_get_drvdata(pdev);
+
+	gs->csave_regs->gpio_mode0 = readl(gs->gpio_io +
+		YU_GPIO_MODE0);
+	gs->csave_regs->gpio_mode1 = readl(gs->gpio_io +
+		YU_GPIO_MODE1);
+
+	return 0;
+}
+
+static int mlxbf2_gpio_resume(struct platform_device *pdev)
+{
+	struct mlxbf2_gpio_context *gs = platform_get_drvdata(pdev);
+
+	writel(gs->csave_regs->gpio_mode0, gs->gpio_io +
+		YU_GPIO_MODE0);
+	writel(gs->csave_regs->gpio_mode1, gs->gpio_io +
+		YU_GPIO_MODE1);
+
+	return 0;
+}
+#endif
+
+static const struct acpi_device_id mlxbf2_gpio_acpi_match[] = {
+	{ "MLNXBF22", 0 },
+	{},
+};
+MODULE_DEVICE_TABLE(acpi, mlxbf2_gpio_acpi_match);
+
+static struct platform_driver mlxbf2_gpio_driver = {
+	.driver = {
+		.name = "mlxbf2_gpio",
+		.acpi_match_table = ACPI_PTR(mlxbf2_gpio_acpi_match),
+	},
+	.probe    = mlxbf2_gpio_probe,
+#ifdef CONFIG_PM
+	.suspend  = mlxbf2_gpio_suspend,
+	.resume   = mlxbf2_gpio_resume,
+#endif
+};
+
+module_platform_driver(mlxbf2_gpio_driver);
+
+MODULE_DESCRIPTION("Mellanox BlueField-2 GPIO Driver");
+MODULE_AUTHOR("Mellanox Technologies");
+MODULE_LICENSE("GPL v2");
