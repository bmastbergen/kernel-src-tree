udp: Don't discard reuseport selection when group has connections

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jakub Sitnicki <jakub@cloudflare.com>
commit c8a2983c4df06c4cd11bea6abfa7e2947bd3113b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c8a2983c.failed

When BPF socket lookup prog selects a socket that belongs to a reuseport
group, and the reuseport group has connected sockets in it, the socket
selected by reuseport will be discarded, and socket returned by BPF socket
lookup will be used instead.

Modify this behavior so that the socket selected by reuseport running after
BPF socket lookup always gets used. Ignore the fact that the reuseport
group might have connections because it is only relevant when scoring
sockets during regular hashtable-based lookup.

Fixes: 72f7e9440e9b ("udp: Run SK_LOOKUP BPF program on socket lookup")
Fixes: 6d4201b1386b ("udp6: Run SK_LOOKUP BPF program on socket lookup")
	Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Kuniyuki Iwashima <kuniyu@amazon.co.jp>
Link: https://lore.kernel.org/bpf/20200722161720.940831-2-jakub@cloudflare.com
(cherry picked from commit c8a2983c4df06c4cd11bea6abfa7e2947bd3113b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/udp.c
diff --cc net/ipv6/udp.c
index 0440ef92cf70,c394e674f486..000000000000
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@@ -144,6 -141,24 +144,27 @@@ static int compute_score(struct sock *s
  	return score;
  }
  
++<<<<<<< HEAD
++=======
+ static struct sock *lookup_reuseport(struct net *net, struct sock *sk,
+ 				     struct sk_buff *skb,
+ 				     const struct in6_addr *saddr,
+ 				     __be16 sport,
+ 				     const struct in6_addr *daddr,
+ 				     unsigned int hnum)
+ {
+ 	struct sock *reuse_sk = NULL;
+ 	u32 hash;
+ 
+ 	if (sk->sk_reuseport && sk->sk_state != TCP_ESTABLISHED) {
+ 		hash = udp6_ehashfn(net, daddr, hnum, saddr, sport);
+ 		reuse_sk = reuseport_select_sock(sk, hash, skb,
+ 						 sizeof(struct udphdr));
+ 	}
+ 	return reuse_sk;
+ }
+ 
++>>>>>>> c8a2983c4df0 (udp: Don't discard reuseport selection when group has connections)
  /* called with rcu_read_lock() */
  static struct sock *udp6_lib_lookup2(struct net *net,
  		const struct in6_addr *saddr, __be16 sport,
* Unmerged path net/ipv6/udp.c
