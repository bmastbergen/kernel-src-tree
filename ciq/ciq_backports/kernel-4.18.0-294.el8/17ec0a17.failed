sparc: Use fallthrough pseudo-keyword

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [netdrv] sfc: Use fallthrough pseudo-keyword (Jarod Wilson) [1856681]
Rebuild_FUZZ: 94.44%
commit-author Gustavo A. R. Silva <gustavoars@kernel.org>
commit 17ec0a17e90f4b761025a6b80c8d458b9d5f9ddd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/17ec0a17.failed

Replace the existing /* fall through */ comments and its variants with
the new pseudo-keyword macro fallthrough[1]. Also, remove unnecessary
fall-through markings when it is the case.

[1] https://www.kernel.org/doc/html/latest/process/deprecated.html?highlight=fallthrough#implicit-switch-case-fall-through

	Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 17ec0a17e90f4b761025a6b80c8d458b9d5f9ddd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/sparc/kernel/kgdb_32.c
#	arch/sparc/kernel/kgdb_64.c
#	arch/sparc/kernel/signal32.c
#	arch/sparc/kernel/signal_32.c
#	arch/sparc/kernel/signal_64.c
diff --cc arch/sparc/kernel/kgdb_32.c
index 5868fc333ea8,58ad3f7de1fb..000000000000
--- a/arch/sparc/kernel/kgdb_32.c
+++ b/arch/sparc/kernel/kgdb_32.c
@@@ -122,7 -122,7 +122,11 @@@ int kgdb_arch_handle_exception(int e_ve
  			linux_regs->pc = addr;
  			linux_regs->npc = addr + 4;
  		}
++<<<<<<< HEAD
 +		/* fallthru */
++=======
+ 		fallthrough;
++>>>>>>> 17ec0a17e90f (sparc: Use fallthrough pseudo-keyword)
  
  	case 'D':
  	case 'k':
diff --cc arch/sparc/kernel/kgdb_64.c
index d5f7dc6323d5,177746ae2c81..000000000000
--- a/arch/sparc/kernel/kgdb_64.c
+++ b/arch/sparc/kernel/kgdb_64.c
@@@ -148,7 -148,7 +148,11 @@@ int kgdb_arch_handle_exception(int e_ve
  			linux_regs->tpc = addr;
  			linux_regs->tnpc = addr + 4;
  		}
++<<<<<<< HEAD
 +		/* fallthru */
++=======
+ 		fallthrough;
++>>>>>>> 17ec0a17e90f (sparc: Use fallthrough pseudo-keyword)
  
  	case 'D':
  	case 'k':
diff --cc arch/sparc/kernel/signal32.c
index 44d379db3f64,e9695a06492f..000000000000
--- a/arch/sparc/kernel/signal32.c
+++ b/arch/sparc/kernel/signal32.c
@@@ -675,6 -686,7 +675,10 @@@ void do_signal32(struct pt_regs * regs
  				regs->tpc -= 4;
  				regs->tnpc -= 4;
  				pt_regs_clear_syscall(regs);
++<<<<<<< HEAD
++=======
+ 				fallthrough;
++>>>>>>> 17ec0a17e90f (sparc: Use fallthrough pseudo-keyword)
  			case ERESTART_RESTARTBLOCK:
  				regs->u_regs[UREG_G1] = __NR_restart_syscall;
  				regs->tpc -= 4;
diff --cc arch/sparc/kernel/signal_32.c
index 5665261cee37,e08d294d63e4..000000000000
--- a/arch/sparc/kernel/signal_32.c
+++ b/arch/sparc/kernel/signal_32.c
@@@ -508,6 -507,7 +508,10 @@@ static void do_signal(struct pt_regs *r
  				regs->pc -= 4;
  				regs->npc -= 4;
  				pt_regs_clear_syscall(regs);
++<<<<<<< HEAD
++=======
+ 				fallthrough;
++>>>>>>> 17ec0a17e90f (sparc: Use fallthrough pseudo-keyword)
  			case ERESTART_RESTARTBLOCK:
  				regs->u_regs[UREG_G1] = __NR_restart_syscall;
  				regs->pc -= 4;
diff --cc arch/sparc/kernel/signal_64.c
index 48366e5eb5b2,255264bcb46a..000000000000
--- a/arch/sparc/kernel/signal_64.c
+++ b/arch/sparc/kernel/signal_64.c
@@@ -529,6 -532,7 +529,10 @@@ static void do_signal(struct pt_regs *r
  				regs->tpc -= 4;
  				regs->tnpc -= 4;
  				pt_regs_clear_syscall(regs);
++<<<<<<< HEAD
++=======
+ 				fallthrough;
++>>>>>>> 17ec0a17e90f (sparc: Use fallthrough pseudo-keyword)
  			case ERESTART_RESTARTBLOCK:
  				regs->u_regs[UREG_G1] = __NR_restart_syscall;
  				regs->tpc -= 4;
diff --git a/arch/sparc/kernel/auxio_64.c b/arch/sparc/kernel/auxio_64.c
index 4e8f56c3793c..91a3f101ea3c 100644
--- a/arch/sparc/kernel/auxio_64.c
+++ b/arch/sparc/kernel/auxio_64.c
@@ -87,7 +87,6 @@ void auxio_set_lte(int on)
 		__auxio_sbus_set_lte(on);
 		break;
 	case AUXIO_TYPE_EBUS:
-		/* FALL-THROUGH */
 	default:
 		break;
 	}
diff --git a/arch/sparc/kernel/central.c b/arch/sparc/kernel/central.c
index 38ae4fdc9eb4..1ad55e6da048 100644
--- a/arch/sparc/kernel/central.c
+++ b/arch/sparc/kernel/central.c
@@ -55,7 +55,7 @@ static int clock_board_calc_nslots(struct clock_board *p)
 			else
 				return 5;
 		}
-		/* Fallthrough */
+		fallthrough;
 	default:
 		return 4;
 	}
* Unmerged path arch/sparc/kernel/kgdb_32.c
* Unmerged path arch/sparc/kernel/kgdb_64.c
diff --git a/arch/sparc/kernel/pcr.c b/arch/sparc/kernel/pcr.c
index eb978c77c76a..46c8ee50c2f5 100644
--- a/arch/sparc/kernel/pcr.c
+++ b/arch/sparc/kernel/pcr.c
@@ -358,7 +358,7 @@ int __init pcr_arch_init(void)
 		 * counter overflow interrupt so we can't make use of
 		 * their hardware currently.
 		 */
-		/* fallthrough */
+		fallthrough;
 	default:
 		err = -ENODEV;
 		goto out_unregister;
diff --git a/arch/sparc/kernel/prom_32.c b/arch/sparc/kernel/prom_32.c
index d41e2a749c5d..18fd51070de8 100644
--- a/arch/sparc/kernel/prom_32.c
+++ b/arch/sparc/kernel/prom_32.c
@@ -232,7 +232,7 @@ void __init of_console_init(void)
 
 		case PROMDEV_TTYB:
 			skip = 1;
-			/* FALLTHRU */
+			fallthrough;
 
 		case PROMDEV_TTYA:
 			type = "serial";
* Unmerged path arch/sparc/kernel/signal32.c
* Unmerged path arch/sparc/kernel/signal_32.c
* Unmerged path arch/sparc/kernel/signal_64.c
diff --git a/arch/sparc/math-emu/math_32.c b/arch/sparc/math-emu/math_32.c
index 72e560ef4a09..d5beec856146 100644
--- a/arch/sparc/math-emu/math_32.c
+++ b/arch/sparc/math-emu/math_32.c
@@ -359,7 +359,7 @@ static int do_one_mathemu(u32 insn, unsigned long *pfsr, unsigned long *fregs)
 			*pfsr |= (6 << 14);
 			return 0;			/* simulate invalid_fp_register exception */
 		}
-	/* fall through */
+		fallthrough;
 	case 2:
 		if (freg & 1) {				/* doublewords must have bit 5 zeroed */
 			*pfsr |= (6 << 14);
@@ -380,7 +380,7 @@ static int do_one_mathemu(u32 insn, unsigned long *pfsr, unsigned long *fregs)
 			*pfsr |= (6 << 14);
 			return 0;			/* simulate invalid_fp_register exception */
 		}
-	/* fall through */
+		fallthrough;
 	case 2:
 		if (freg & 1) {				/* doublewords must have bit 5 zeroed */
 			*pfsr |= (6 << 14);
@@ -408,13 +408,13 @@ static int do_one_mathemu(u32 insn, unsigned long *pfsr, unsigned long *fregs)
 			*pfsr |= (6 << 14);
 			return 0;			/* simulate invalid_fp_register exception */
 		}
-	/* fall through */
+		fallthrough;
 	case 2:
 		if (freg & 1) {				/* doublewords must have bit 5 zeroed */
 			*pfsr |= (6 << 14);
 			return 0;
 		}
-	/* fall through */
+		fallthrough;
 	case 1:
 		rd = (void *)&fregs[freg];
 		break;
