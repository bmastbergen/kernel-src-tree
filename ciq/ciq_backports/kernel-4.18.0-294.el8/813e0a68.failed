mptcp: try to push pending data on snd una updates

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Paolo Abeni <pabeni@redhat.com>
commit 813e0a683d4cacb668622bc9a1693cb82b5f8ff8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/813e0a68.failed

After the previous patch we may end-up with unsent data
in the write buffer. If such buffer is full, the writer
will block for unlimited time.

We need to trigger the MPTCP xmit path even for the
subflow rx path, on MPTCP snd_una updates.

Keep things simple and just schedule the work queue if
needed.

	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit 813e0a683d4cacb668622bc9a1693cb82b5f8ff8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/mptcp/protocol.c
diff --cc net/mptcp/protocol.c
index d41791292d73,821daa922ca3..000000000000
--- a/net/mptcp/protocol.c
+++ b/net/mptcp/protocol.c
@@@ -507,9 -725,9 +507,15 @@@ void mptcp_data_acked(struct sock *sk
  	mptcp_reset_timer(sk);
  
  	if ((!test_bit(MPTCP_SEND_SPACE, &mptcp_sk(sk)->flags) ||
++<<<<<<< HEAD
 +	     (inet_sk_state_load(sk) != TCP_ESTABLISHED)) &&
 +	    schedule_work(&mptcp_sk(sk)->work))
 +		sock_hold(sk);
++=======
+ 	     mptcp_send_head(sk) ||
+ 	     (inet_sk_state_load(sk) != TCP_ESTABLISHED)))
+ 		mptcp_schedule_work(sk);
++>>>>>>> 813e0a683d4c (mptcp: try to push pending data on snd una updates)
  }
  
  void mptcp_subflow_eof(struct sock *sk)
@@@ -1439,8 -1832,21 +1445,10 @@@ static void mptcp_worker(struct work_st
  	mptcp_clean_una_wakeup(sk);
  	mptcp_check_data_fin_ack(sk);
  	__mptcp_flush_join_list(msk);
 -	if (test_and_clear_bit(MPTCP_WORK_CLOSE_SUBFLOW, &msk->flags))
 -		__mptcp_close_subflow(msk);
 -
  	__mptcp_move_skbs(msk);
+ 	if (mptcp_send_head(sk))
+ 		mptcp_push_pending(sk, 0);
  
 -	if (msk->pm.status)
 -		pm_work(msk);
 -
  	if (test_and_clear_bit(MPTCP_WORK_EOF, &msk->flags))
  		mptcp_check_for_eof(msk);
  
* Unmerged path net/mptcp/protocol.c
