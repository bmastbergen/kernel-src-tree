usb: typec: mux: Add helpers for setting the mux state

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit 774a9df6aeac236282dc0ec711b73865b64ef6a1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/774a9df6.failed

Adding helpers typec_switch_set() and typec_mux_set() that
simply call the ->set callback function of the mux. These
functions make it possible to set the mux states also from
outside the class code.

	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Link: https://lore.kernel.org/r/20200302135353.56659-3-heikki.krogerus@linux.intel.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 774a9df6aeac236282dc0ec711b73865b64ef6a1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/class.c
#	drivers/usb/typec/mux.c
#	include/linux/usb/typec_mux.h
diff --cc drivers/usb/typec/class.c
index 4dc137b08899,2a33ff159d04..000000000000
--- a/drivers/usb/typec/class.c
+++ b/drivers/usb/typec/class.c
@@@ -1617,7 -1544,11 +1615,15 @@@ EXPORT_SYMBOL_GPL(typec_get_orientation
   */
  int typec_set_mode(struct typec_port *port, int mode)
  {
++<<<<<<< HEAD
 +	return port->mux ? port->mux->set(port->mux, mode) : 0;
++=======
+ 	struct typec_mux_state state = { };
+ 
+ 	state.mode = mode;
+ 
+ 	return typec_mux_set(port->mux, &state);
++>>>>>>> 774a9df6aeac (usb: typec: mux: Add helpers for setting the mux state)
  }
  EXPORT_SYMBOL_GPL(typec_set_mode);
  
diff --cc drivers/usb/typec/mux.c
index 405d14dbac99,800c140d7853..000000000000
--- a/drivers/usb/typec/mux.c
+++ b/drivers/usb/typec/mux.c
@@@ -230,9 -279,29 +240,31 @@@ void typec_mux_put(struct typec_mux *mu
  }
  EXPORT_SYMBOL_GPL(typec_mux_put);
  
++<<<<<<< HEAD
++=======
+ int typec_mux_set(struct typec_mux *mux, struct typec_mux_state *state)
+ {
+ 	if (IS_ERR_OR_NULL(mux))
+ 		return 0;
+ 
+ 	return mux->set(mux, state);
+ }
+ EXPORT_SYMBOL_GPL(typec_mux_set);
+ 
+ static void typec_mux_release(struct device *dev)
+ {
+ 	kfree(to_typec_mux(dev));
+ }
+ 
+ static const struct device_type typec_mux_dev_type = {
+ 	.name = "mode_switch",
+ 	.release = typec_mux_release,
+ };
+ 
++>>>>>>> 774a9df6aeac (usb: typec: mux: Add helpers for setting the mux state)
  /**
   * typec_mux_register - Register Multiplexer routing USB Type-C pins
 - * @parent: Parent device
 - * @desc: Multiplexer description
 + * @mux: USB Type-C Connector Multiplexer/DeMultiplexer
   *
   * USB Type-C connectors can be used for alternate modes of operation besides
   * USB when Accessory/Alternate Modes are supported. With some of those modes,
diff --cc include/linux/usb/typec_mux.h
index 43f40685e53c,4991c93df5d0..000000000000
--- a/include/linux/usb/typec_mux.h
+++ b/include/linux/usb/typec_mux.h
@@@ -44,13 -23,43 +44,29 @@@ struct typec_mux 
  
  struct typec_switch *typec_switch_get(struct device *dev);
  void typec_switch_put(struct typec_switch *sw);
++<<<<<<< HEAD
 +int typec_switch_register(struct typec_switch *sw);
++=======
+ int typec_switch_set(struct typec_switch *sw,
+ 		     enum typec_orientation orientation);
+ 
+ struct typec_switch *
+ typec_switch_register(struct device *parent,
+ 		      const struct typec_switch_desc *desc);
++>>>>>>> 774a9df6aeac (usb: typec: mux: Add helpers for setting the mux state)
  void typec_switch_unregister(struct typec_switch *sw);
  
 -void typec_switch_set_drvdata(struct typec_switch *sw, void *data);
 -void *typec_switch_get_drvdata(struct typec_switch *sw);
 -
 -struct typec_mux_state {
 -	struct typec_altmode *alt;
 -	unsigned long mode;
 -	void *data;
 -};
 -
 -typedef int (*typec_mux_set_fn_t)(struct typec_mux *mux,
 -				  struct typec_mux_state *state);
 -
 -struct typec_mux_desc {
 -	struct fwnode_handle *fwnode;
 -	typec_mux_set_fn_t set;
 -	const char *name;
 -	void *drvdata;
 -};
 -
  struct typec_mux *
  typec_mux_get(struct device *dev, const struct typec_altmode_desc *desc);
  void typec_mux_put(struct typec_mux *mux);
++<<<<<<< HEAD
 +int typec_mux_register(struct typec_mux *mux);
++=======
+ int typec_mux_set(struct typec_mux *mux, struct typec_mux_state *state);
+ 
+ struct typec_mux *
+ typec_mux_register(struct device *parent, const struct typec_mux_desc *desc);
++>>>>>>> 774a9df6aeac (usb: typec: mux: Add helpers for setting the mux state)
  void typec_mux_unregister(struct typec_mux *mux);
  
 -void typec_mux_set_drvdata(struct typec_mux *mux, void *data);
 -void *typec_mux_get_drvdata(struct typec_mux *mux);
 -
  #endif /* __USB_TYPEC_MUX */
* Unmerged path drivers/usb/typec/class.c
* Unmerged path drivers/usb/typec/mux.c
* Unmerged path include/linux/usb/typec_mux.h
