lib/vdso: Allow to add architecture-specific vdso data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Sven Schnelle <svens@linux.ibm.com>
commit d60d7de3e16d7cea998bad17d87366a359625894
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d60d7de3.failed

The initial assumption that all VDSO related data can be completely generic
does not hold. S390 needs architecture specific storage to access the clock
steering information.

Add struct arch_vdso_data to the vdso data struct. For architectures which
do not need extra data this defaults to an empty struct. Architectures
which require it, enable CONFIG_ARCH_HAS_VDSO_DATA and provide their
specific struct in asm/vdso/data.h.

	Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20200804150124.41692-2-svens@linux.ibm.com

(cherry picked from commit d60d7de3e16d7cea998bad17d87366a359625894)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/Kconfig
diff --cc arch/Kconfig
index c2142afcf45f,b44dd6b9e2bd..000000000000
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@@ -1007,4 -953,33 +1007,18 @@@ config LOCK_EVENT_COUNT
  config ARCH_HAS_MEM_ENCRYPT
  	bool
  
++<<<<<<< HEAD
++=======
+ config HAVE_SPARSE_SYSCALL_NR
+        bool
+        help
+           An architecture should select this if its syscall numbering is sparse
+ 	  to save space. For example, MIPS architecture has a syscall array with
+ 	  entries at 4000, 5000 and 6000 locations. This option turns on syscall
+ 	  related optimizations for a given architecture.
+ 
+ config ARCH_HAS_VDSO_DATA
+ 	bool
+ 
++>>>>>>> d60d7de3e16d (lib/vdso: Allow to add architecture-specific vdso data)
  source "kernel/gcov/Kconfig"
 -
 -source "scripts/gcc-plugins/Kconfig"
 -
 -endmenu
* Unmerged path arch/Kconfig
diff --git a/include/vdso/datapage.h b/include/vdso/datapage.h
index 2e302c0f41f7..2767d0dfdc02 100644
--- a/include/vdso/datapage.h
+++ b/include/vdso/datapage.h
@@ -8,6 +8,12 @@
 #include <linux/time.h>
 #include <linux/types.h>
 
+#ifdef CONFIG_ARCH_HAS_VDSO_DATA
+#include <asm/vdso/data.h>
+#else
+struct arch_vdso_data {};
+#endif
+
 #define VDSO_BASES	(CLOCK_TAI + 1)
 #define VDSO_HRES	(BIT(CLOCK_REALTIME)		| \
 			 BIT(CLOCK_MONOTONIC)		| \
@@ -52,6 +58,8 @@ struct vdso_timestamp {
  * @tz_dsttime:		type of DST correction
  * @hrtimer_res:	hrtimer resolution
  * @__unused:		unused
+ * @arch_data:		architecture specific data (optional, defaults
+ *			to an empty struct)
  *
  * vdso_data will be accessed by 64 bit and compat code at the same time
  * so we should be careful before modifying this structure.
@@ -71,6 +79,8 @@ struct vdso_data {
 	s32			tz_dsttime;
 	u32			hrtimer_res;
 	u32			__unused;
+
+	struct arch_vdso_data	arch_data;
 };
 
 /*
