cifs: do not fail __smb_send_rqst if non-fatal signals are pending

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ronnie Sahlberg <lsahlber@redhat.com>
commit 214a5ea081e77346e4963dd6d20c5539ff8b6ae6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/214a5ea0.failed

RHBZ 1848178

The original intent of returning an error in this function
in the patch:
  "CIFS: Mask off signals when sending SMB packets"
was to avoid interrupting packet send in the middle of
sending the data (and thus breaking an SMB connection),
but we also don't want to fail the request for non-fatal
signals even before we have had a chance to try to
send it (the reported problem could be reproduced e.g.
by exiting a child process when the parent process was in
the midst of calling futimens to update a file's timestamps).

In addition, since the signal may remain pending when we enter the
sending loop, we may end up not sending the whole packet before
TCP buffers become full. In this case the code returns -EINTR
but what we need here is to return -ERESTARTSYS instead to
allow system calls to be restarted.

Fixes: b30c74c73c78 ("CIFS: Mask off signals when sending SMB packets")
	Cc: stable@vger.kernel.org # v5.1+
	Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
	Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
	Signed-off-by: Steve French <stfrench@microsoft.com>
(cherry picked from commit 214a5ea081e77346e4963dd6d20c5539ff8b6ae6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/transport.c
diff --cc fs/cifs/transport.c
index c42bda5a5008,95ef26b555b9..000000000000
--- a/fs/cifs/transport.c
+++ b/fs/cifs/transport.c
@@@ -339,9 -338,9 +339,15 @@@ __smb_send_rqst(struct TCP_Server_Info 
  	if (ssocket == NULL)
  		return -EAGAIN;
  
++<<<<<<< HEAD
 +	if (signal_pending(current)) {
 +		cifs_dbg(FYI, "signal is pending before sending any data\n");
 +		return -EINTR;
++=======
+ 	if (fatal_signal_pending(current)) {
+ 		cifs_dbg(FYI, "signal pending before send request\n");
+ 		return -ERESTARTSYS;
++>>>>>>> 214a5ea081e7 (cifs: do not fail __smb_send_rqst if non-fatal signals are pending)
  	}
  
  	/* cork the socket */
* Unmerged path fs/cifs/transport.c
