fbcon: Only defer console takeover if the current console driver is the dummycon

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit bedb38fc917527e7a6a7e5a0ecedd44690fab167
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/bedb38fc.failed

We rely on dummycon's output notifier mechanism to defer the takeover.

If say vgacon is the current console driver then dummycon will never get
used so its output notifier will also never get called and fbcon never
takes over. This commit fixes this by only deferring the console takeover
if the current console driver is the dummycon driver.

This commit also moves the entirety of fbcon_start under the console_lock,
since the conswitchp which fbcon_start now checks is protected by it.

This commit also inlines fbcon_register_output_notifier, since we now
need a #ifdef CONFIG_FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER in fbcon_start
anyways because of the write access to the deferred_takeover variable,
this has the added advantage that it puts the
dummycon_register_output_notifier() call directly after the "conswitchp !=
&dummy_con" comparison making it clear why that check is there.

Note the arch setup code will set conswitchp to either dummy_con or
vga_con, in the cases where it gets set to vga_con even though their is
no vga_con present we rely on vga_con_startup() to set conswitchp to
dummy_con. vga_con_startup() is guaranteed to happen before
fb_console_init() as it gets called as a console_initcall where as
fb_console_init() gets called as a subsys_initcall.

	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
(cherry picked from commit bedb38fc917527e7a6a7e5a0ecedd44690fab167)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/core/fbcon.c
diff --cc drivers/video/fbdev/core/fbcon.c
index d22b1f1246e3,ef8b2d0b7071..000000000000
--- a/drivers/video/fbdev/core/fbcon.c
+++ b/drivers/video/fbdev/core/fbcon.c
@@@ -3539,18 -3591,50 +3539,65 @@@ static int fbcon_init_device(void
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void fbcon_start(void)
 +{
 +	if (num_registered_fb) {
 +		int i;
 +
 +		console_lock();
 +
 +		for (i = 0; i < FB_MAX; i++) {
 +			if (registered_fb[i] != NULL) {
 +				info_idx = i;
 +				break;
 +			}
++=======
+ #ifdef CONFIG_FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER
+ static struct notifier_block fbcon_output_nb;
+ 
+ static int fbcon_output_notifier(struct notifier_block *nb,
+ 				 unsigned long action, void *data)
+ {
+ 	int i;
+ 
+ 	WARN_CONSOLE_UNLOCKED();
+ 
+ 	pr_info("fbcon: Taking over console\n");
+ 
+ 	dummycon_unregister_output_notifier(&fbcon_output_nb);
+ 	deferred_takeover = false;
+ 	logo_shown = FBCON_LOGO_DONTSHOW;
+ 
+ 	for_each_registered_fb(i)
+ 		fbcon_fb_registered(registered_fb[i]);
+ 
+ 	return NOTIFY_OK;
+ }
+ #endif
+ 
+ static void fbcon_start(void)
+ {
+ 	WARN_CONSOLE_UNLOCKED();
+ 
+ #ifdef CONFIG_FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER
+ 	if (conswitchp != &dummy_con)
+ 		deferred_takeover = false;
+ 
+ 	if (deferred_takeover) {
+ 		fbcon_output_nb.notifier_call = fbcon_output_notifier;
+ 		dummycon_register_output_notifier(&fbcon_output_nb);
+ 		return;
+ 	}
+ #endif
+ 
+ 	if (num_registered_fb) {
+ 		int i;
+ 
+ 		for_each_registered_fb(i) {
+ 			info_idx = i;
+ 			break;
++>>>>>>> bedb38fc9175 (fbcon: Only defer console takeover if the current console driver is the dummycon)
  		}
  
  		do_fbcon_takeover(0);
* Unmerged path drivers/video/fbdev/core/fbcon.c
