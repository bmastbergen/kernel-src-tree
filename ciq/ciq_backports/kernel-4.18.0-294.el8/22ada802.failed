block: use lcm_not_zero() when stacking chunk_sectors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mike Snitzer <snitzer@redhat.com>
commit 22ada802ede89829dd010a317d9b812b7df7111a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/22ada802.failed

Like 'io_opt', blk_stack_limits() should stack 'chunk_sectors' using
lcm_not_zero() rather than min_not_zero() -- otherwise the final
'chunk_sectors' could result in sub-optimal alignment of IO to
component devices in the IO stack.

Also, if 'chunk_sectors' isn't a multiple of 'physical_block_size'
then it is a bug in the driver and the device should be flagged as
'misaligned'.

	Reviewed-by: Ming Lei <ming.lei@redhat.com>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 22ada802ede89829dd010a317d9b812b7df7111a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-settings.c
diff --cc block/blk-settings.c
index 9ba1680afaff,b2e1a929a6db..000000000000
--- a/block/blk-settings.c
+++ b/block/blk-settings.c
@@@ -546,9 -534,8 +546,10 @@@ int blk_stack_limits(struct queue_limit
  
  	t->io_min = max(t->io_min, b->io_min);
  	t->io_opt = lcm_not_zero(t->io_opt, b->io_opt);
+ 	t->chunk_sectors = lcm_not_zero(t->chunk_sectors, b->chunk_sectors);
  
 +	t->cluster &= b->cluster;
 +
  	/* Physical block size a multiple of the logical block size? */
  	if (t->physical_block_size & (t->logical_block_size - 1)) {
  		t->physical_block_size = t->logical_block_size;
@@@ -608,10 -602,7 +616,14 @@@
  			t->discard_granularity;
  	}
  
++<<<<<<< HEAD
 +	if (b->chunk_sectors)
 +		t->chunk_sectors = min_not_zero(t->chunk_sectors,
 +						b->chunk_sectors);
 +
++=======
+ 	t->zoned = max(t->zoned, b->zoned);
++>>>>>>> 22ada802ede8 (block: use lcm_not_zero() when stacking chunk_sectors)
  	return ret;
  }
  EXPORT_SYMBOL(blk_stack_limits);
* Unmerged path block/blk-settings.c
