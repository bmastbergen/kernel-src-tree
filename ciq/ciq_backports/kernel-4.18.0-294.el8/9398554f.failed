block: remove the error_sector argument to blkdev_issue_flush

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 9398554fb3979852512ff4f1405e759889b45c16
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9398554f.failed

The argument isn't used by any caller, and drivers don't fill out
bi_sector for flush requests either.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 9398554fb3979852512ff4f1405e759889b45c16)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-zoned-metadata.c
#	fs/ext4/fsync.c
#	fs/fat/file.c
#	fs/zonefs/super.c
#	include/linux/blkdev.h
diff --cc drivers/md/dm-zoned-metadata.c
index 8e82bc8b5b5b,bf2245370305..000000000000
--- a/drivers/md/dm-zoned-metadata.c
+++ b/drivers/md/dm-zoned-metadata.c
@@@ -724,8 -772,8 +724,13 @@@ int dmz_flush_metadata(struct dmz_metad
  
  	/* If there are no dirty metadata blocks, just flush the device cache */
  	if (list_empty(&write_list)) {
++<<<<<<< HEAD
 +		ret = blkdev_issue_flush(zmd->dev->bdev, GFP_NOIO, NULL);
 +		goto out;
++=======
+ 		ret = blkdev_issue_flush(zmd->dev->bdev, GFP_NOIO);
+ 		goto err;
++>>>>>>> 9398554fb397 (block: remove the error_sector argument to blkdev_issue_flush)
  	}
  
  	/*
diff --cc fs/ext4/fsync.c
index 8a28d47bd502,35ff9a56db67..000000000000
--- a/fs/ext4/fsync.c
+++ b/fs/ext4/fsync.c
@@@ -140,19 -168,15 +140,23 @@@ int ext4_sync_file(struct file *file, l
  	 *  (they were dirtied by commit).  But that's OK - the blocks are
  	 *  safe in-journal, which is all fsync() needs to ensure.
  	 */
 -	if (!sbi->s_journal)
 -		ret = ext4_fsync_nojournal(inode, datasync, &needs_barrier);
 -	else if (ext4_should_journal_data(inode))
 +	if (ext4_should_journal_data(inode)) {
  		ret = ext4_force_commit(inode->i_sb);
 -	else
 -		ret = ext4_fsync_journal(inode, datasync, &needs_barrier);
 +		goto out;
 +	}
  
 +	commit_tid = datasync ? ei->i_datasync_tid : ei->i_sync_tid;
 +	if (journal->j_flags & JBD2_BARRIER &&
 +	    !jbd2_trans_will_send_data_barrier(journal, commit_tid))
 +		needs_barrier = true;
 +	ret = jbd2_complete_transaction(journal, commit_tid);
  	if (needs_barrier) {
++<<<<<<< HEAD
 +	issue_flush:
 +		err = blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL, NULL);
++=======
+ 		err = blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL);
++>>>>>>> 9398554fb397 (block: remove the error_sector argument to blkdev_issue_flush)
  		if (!ret)
  			ret = err;
  	}
diff --cc fs/fat/file.c
index 257d26eb9ffa,42134c58c87e..000000000000
--- a/fs/fat/file.c
+++ b/fs/fat/file.c
@@@ -151,12 -185,17 +151,16 @@@ static int fat_file_release(struct inod
  int fat_file_fsync(struct file *filp, loff_t start, loff_t end, int datasync)
  {
  	struct inode *inode = filp->f_mapping->host;
 -	int err;
 -
 -	err = __generic_file_fsync(filp, start, end, datasync);
 -	if (err)
 -		return err;
 +	int res, err;
  
 +	res = generic_file_fsync(filp, start, end, datasync);
  	err = sync_mapping_buffers(MSDOS_SB(inode->i_sb)->fat_inode->i_mapping);
 -	if (err)
 -		return err;
  
++<<<<<<< HEAD
 +	return res ? res : err;
++=======
+ 	return blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL);
++>>>>>>> 9398554fb397 (block: remove the error_sector argument to blkdev_issue_flush)
  }
  
  
diff --cc include/linux/blkdev.h
index 43b1486e0588,7d10f4e63232..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -1244,7 -1231,9 +1244,13 @@@ static inline bool blk_needs_flush_plug
  		 !list_empty(&plug->cb_list));
  }
  
++<<<<<<< HEAD
 +extern int blkdev_issue_flush(struct block_device *, gfp_t, sector_t *);
++=======
+ extern void blk_io_schedule(void);
+ 
+ int blkdev_issue_flush(struct block_device *, gfp_t);
++>>>>>>> 9398554fb397 (block: remove the error_sector argument to blkdev_issue_flush)
  extern int blkdev_issue_write_same(struct block_device *bdev, sector_t sector,
  		sector_t nr_sects, gfp_t gfp_mask, struct page *page);
  
* Unmerged path fs/zonefs/super.c
diff --git a/block/blk-flush.c b/block/blk-flush.c
index b044d71bb91b..b8b5febb2853 100644
--- a/block/blk-flush.c
+++ b/block/blk-flush.c
@@ -420,15 +420,11 @@ void blk_insert_flush(struct request *rq)
  * blkdev_issue_flush - queue a flush
  * @bdev:	blockdev to issue flush for
  * @gfp_mask:	memory allocation flags (for bio_alloc)
- * @error_sector:	error sector
  *
  * Description:
- *    Issue a flush for the block device in question. Caller can supply
- *    room for storing the error offset in case of a flush error, if they
- *    wish to.
+ *    Issue a flush for the block device in question.
  */
-int blkdev_issue_flush(struct block_device *bdev, gfp_t gfp_mask,
-		sector_t *error_sector)
+int blkdev_issue_flush(struct block_device *bdev, gfp_t gfp_mask)
 {
 	struct request_queue *q;
 	struct bio *bio;
@@ -446,15 +442,6 @@ int blkdev_issue_flush(struct block_device *bdev, gfp_t gfp_mask,
 	bio->bi_opf = REQ_OP_WRITE | REQ_PREFLUSH;
 
 	ret = submit_bio_wait(bio);
-
-	/*
-	 * The driver must store the error location in ->bi_sector, if
-	 * it supports it. For non-stacked drivers, this should be
-	 * copied from blk_rq_pos(rq).
-	 */
-	if (error_sector)
-		*error_sector = bio->bi_iter.bi_sector;
-
 	bio_put(bio);
 	return ret;
 }
diff --git a/drivers/md/dm-integrity.c b/drivers/md/dm-integrity.c
index 6ebd6c9158e5..581ea21d578d 100644
--- a/drivers/md/dm-integrity.c
+++ b/drivers/md/dm-integrity.c
@@ -2661,7 +2661,7 @@ static void bitmap_flush_work(struct work_struct *work)
 
 	dm_integrity_flush_buffers(ic);
 	if (ic->meta_dev)
-		blkdev_issue_flush(ic->dev->bdev, GFP_NOIO, NULL);
+		blkdev_issue_flush(ic->dev->bdev, GFP_NOIO);
 
 	limit = ic->provided_data_sectors;
 	if (ic->sb->flags & cpu_to_le32(SB_FLAG_RECALCULATING)) {
* Unmerged path drivers/md/dm-zoned-metadata.c
diff --git a/drivers/md/raid5-ppl.c b/drivers/md/raid5-ppl.c
index 17e9e7d51097..b351195330db 100644
--- a/drivers/md/raid5-ppl.c
+++ b/drivers/md/raid5-ppl.c
@@ -1045,7 +1045,7 @@ static int ppl_recover(struct ppl_log *log, struct ppl_header *pplhdr,
 	}
 
 	/* flush the disk cache after recovery if necessary */
-	ret = blkdev_issue_flush(rdev->bdev, GFP_KERNEL, NULL);
+	ret = blkdev_issue_flush(rdev->bdev, GFP_KERNEL);
 out:
 	__free_page(page);
 	return ret;
diff --git a/drivers/nvme/target/io-cmd-bdev.c b/drivers/nvme/target/io-cmd-bdev.c
index 143e89583152..ff3409f54e73 100644
--- a/drivers/nvme/target/io-cmd-bdev.c
+++ b/drivers/nvme/target/io-cmd-bdev.c
@@ -234,7 +234,7 @@ static void nvmet_bdev_execute_flush(struct nvmet_req *req)
 
 u16 nvmet_bdev_flush(struct nvmet_req *req)
 {
-	if (blkdev_issue_flush(req->ns->bdev, GFP_KERNEL, NULL))
+	if (blkdev_issue_flush(req->ns->bdev, GFP_KERNEL))
 		return NVME_SC_INTERNAL | NVME_SC_DNR;
 	return 0;
 }
diff --git a/fs/block_dev.c b/fs/block_dev.c
index 821133e8ae5e..761bde4d6d17 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -684,7 +684,7 @@ int blkdev_fsync(struct file *filp, loff_t start, loff_t end, int datasync)
 	 * i_mutex and doing so causes performance issues with concurrent
 	 * O_SYNC writers to a block device.
 	 */
-	error = blkdev_issue_flush(bdev, GFP_KERNEL, NULL);
+	error = blkdev_issue_flush(bdev, GFP_KERNEL);
 	if (error == -EOPNOTSUPP)
 		error = 0;
 
* Unmerged path fs/ext4/fsync.c
diff --git a/fs/ext4/ialloc.c b/fs/ext4/ialloc.c
index e451ffb37ca1..9d999857e0f3 100644
--- a/fs/ext4/ialloc.c
+++ b/fs/ext4/ialloc.c
@@ -1444,7 +1444,7 @@ int ext4_init_inode_table(struct super_block *sb, ext4_group_t group,
 	if (ret < 0)
 		goto err_out;
 	if (barrier)
-		blkdev_issue_flush(sb->s_bdev, GFP_NOFS, NULL);
+		blkdev_issue_flush(sb->s_bdev, GFP_NOFS);
 
 skip_zeroout:
 	ext4_lock_group(sb, group);
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index 45de20b6730f..848c50e7f61c 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -5173,7 +5173,7 @@ static int ext4_sync_fs(struct super_block *sb, int wait)
 		needs_barrier = true;
 	if (needs_barrier) {
 		int err;
-		err = blkdev_issue_flush(sb->s_bdev, GFP_KERNEL, NULL);
+		err = blkdev_issue_flush(sb->s_bdev, GFP_KERNEL);
 		if (!ret)
 			ret = err;
 	}
* Unmerged path fs/fat/file.c
diff --git a/fs/hfsplus/inode.c b/fs/hfsplus/inode.c
index c824f702feec..3513d973e4a4 100644
--- a/fs/hfsplus/inode.c
+++ b/fs/hfsplus/inode.c
@@ -326,7 +326,7 @@ int hfsplus_file_fsync(struct file *file, loff_t start, loff_t end,
 	}
 
 	if (!test_bit(HFSPLUS_SB_NOBARRIER, &sbi->flags))
-		blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL, NULL);
+		blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL);
 
 	inode_unlock(inode);
 
diff --git a/fs/hfsplus/super.c b/fs/hfsplus/super.c
index a6c0f54c48c3..15b6b37284d7 100644
--- a/fs/hfsplus/super.c
+++ b/fs/hfsplus/super.c
@@ -238,7 +238,7 @@ static int hfsplus_sync_fs(struct super_block *sb, int wait)
 	mutex_unlock(&sbi->vh_mutex);
 
 	if (!test_bit(HFSPLUS_SB_NOBARRIER, &sbi->flags))
-		blkdev_issue_flush(sb->s_bdev, GFP_KERNEL, NULL);
+		blkdev_issue_flush(sb->s_bdev, GFP_KERNEL);
 
 	return error;
 }
diff --git a/fs/jbd2/checkpoint.c b/fs/jbd2/checkpoint.c
index 96bf33986d03..263f02ad8ebf 100644
--- a/fs/jbd2/checkpoint.c
+++ b/fs/jbd2/checkpoint.c
@@ -414,7 +414,7 @@ int jbd2_cleanup_journal_tail(journal_t *journal)
 	 * jbd2_cleanup_journal_tail() doesn't get called all that often.
 	 */
 	if (journal->j_flags & JBD2_BARRIER)
-		blkdev_issue_flush(journal->j_fs_dev, GFP_NOFS, NULL);
+		blkdev_issue_flush(journal->j_fs_dev, GFP_NOFS);
 
 	return __jbd2_update_log_tail(journal, first_tid, blocknr);
 }
diff --git a/fs/jbd2/commit.c b/fs/jbd2/commit.c
index 6dda25a2ac1f..7600d975b071 100644
--- a/fs/jbd2/commit.c
+++ b/fs/jbd2/commit.c
@@ -775,7 +775,7 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 	if (commit_transaction->t_need_data_flush &&
 	    (journal->j_fs_dev != journal->j_dev) &&
 	    (journal->j_flags & JBD2_BARRIER))
-		blkdev_issue_flush(journal->j_fs_dev, GFP_NOFS, NULL);
+		blkdev_issue_flush(journal->j_fs_dev, GFP_NOFS);
 
 	/* Done it all: now write the commit record asynchronously. */
 	if (jbd2_has_feature_async_commit(journal)) {
@@ -882,7 +882,7 @@ void jbd2_journal_commit_transaction(journal_t *journal)
 	stats.run.rs_blocks_logged++;
 	if (jbd2_has_feature_async_commit(journal) &&
 	    journal->j_flags & JBD2_BARRIER) {
-		blkdev_issue_flush(journal->j_dev, GFP_NOFS, NULL);
+		blkdev_issue_flush(journal->j_dev, GFP_NOFS);
 	}
 
 	if (err)
diff --git a/fs/jbd2/recovery.c b/fs/jbd2/recovery.c
index a4967b27ffb6..2ed278f0dced 100644
--- a/fs/jbd2/recovery.c
+++ b/fs/jbd2/recovery.c
@@ -286,7 +286,7 @@ int jbd2_journal_recover(journal_t *journal)
 		err = err2;
 	/* Make sure all replayed data is on permanent storage */
 	if (journal->j_flags & JBD2_BARRIER) {
-		err2 = blkdev_issue_flush(journal->j_fs_dev, GFP_KERNEL, NULL);
+		err2 = blkdev_issue_flush(journal->j_fs_dev, GFP_KERNEL);
 		if (!err)
 			err = err2;
 	}
diff --git a/fs/libfs.c b/fs/libfs.c
index df5499c95c24..923d2e9025aa 100644
--- a/fs/libfs.c
+++ b/fs/libfs.c
@@ -1070,7 +1070,7 @@ int generic_file_fsync(struct file *file, loff_t start, loff_t end,
 	err = __generic_file_fsync(file, start, end, datasync);
 	if (err)
 		return err;
-	return blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL, NULL);
+	return blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL);
 }
 EXPORT_SYMBOL(generic_file_fsync);
 
diff --git a/fs/nilfs2/the_nilfs.h b/fs/nilfs2/the_nilfs.h
index 36da1779f976..1e4da0f52c60 100644
--- a/fs/nilfs2/the_nilfs.h
+++ b/fs/nilfs2/the_nilfs.h
@@ -384,7 +384,7 @@ static inline int nilfs_flush_device(struct the_nilfs *nilfs)
 	 */
 	smp_wmb();
 
-	err = blkdev_issue_flush(nilfs->ns_bdev, GFP_KERNEL, NULL);
+	err = blkdev_issue_flush(nilfs->ns_bdev, GFP_KERNEL);
 	if (err != -EIO)
 		err = 0;
 	return err;
diff --git a/fs/ocfs2/file.c b/fs/ocfs2/file.c
index fbaeafe44b5f..ad2e2e816d94 100644
--- a/fs/ocfs2/file.c
+++ b/fs/ocfs2/file.c
@@ -208,7 +208,7 @@ static int ocfs2_sync_file(struct file *file, loff_t start, loff_t end,
 		needs_barrier = true;
 	err = jbd2_complete_transaction(journal, commit_tid);
 	if (needs_barrier) {
-		ret = blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL, NULL);
+		ret = blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL);
 		if (!err)
 			err = ret;
 	}
diff --git a/fs/reiserfs/file.c b/fs/reiserfs/file.c
index 843aadcc123c..3f57c091ae2b 100644
--- a/fs/reiserfs/file.c
+++ b/fs/reiserfs/file.c
@@ -165,7 +165,7 @@ static int reiserfs_sync_file(struct file *filp, loff_t start, loff_t end,
 	barrier_done = reiserfs_commit_for_inode(inode);
 	reiserfs_write_unlock(inode->i_sb);
 	if (barrier_done != 1 && reiserfs_barrier_flush(inode->i_sb))
-		blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL, NULL);
+		blkdev_issue_flush(inode->i_sb->s_bdev, GFP_KERNEL);
 	inode_unlock(inode);
 	if (barrier_done < 0)
 		return barrier_done;
diff --git a/fs/xfs/xfs_super.c b/fs/xfs/xfs_super.c
index 474101c23a81..9e8006c74bdc 100644
--- a/fs/xfs/xfs_super.c
+++ b/fs/xfs/xfs_super.c
@@ -594,7 +594,7 @@ void
 xfs_blkdev_issue_flush(
 	xfs_buftarg_t		*buftarg)
 {
-	blkdev_issue_flush(buftarg->bt_bdev, GFP_NOFS, NULL);
+	blkdev_issue_flush(buftarg->bt_bdev, GFP_NOFS);
 }
 
 STATIC void
* Unmerged path fs/zonefs/super.c
* Unmerged path include/linux/blkdev.h
