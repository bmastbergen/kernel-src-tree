xfs: allow individual quota grace period extension

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Eric Sandeen <sandeen@redhat.com>
commit df42ce64dc3eb7f01f8b601abd3881c6dddfbbaa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/df42ce64.failed

The only grace period which can be set in the kernel today is for id 0,
i.e. the default grace period for all users.  However, setting an
individual grace period is useful; for example:

 Alice has a soft quota of 100 inodes, and a hard quota of 200 inodes
 Alice uses 150 inodes, and enters a short grace period
 Alice really needs to use those 150 inodes past the grace period
 The administrator extends Alice's grace period until next Monday

vfs quota users such as ext4 can do this today, with setquota -T

To enable this for XFS, we simply move the timelimit assignment out
from under the (id == 0) test.  Default setting remains under (id == 0).
Note that this now is consistent with how we set warnings.

(Userspace requires updates to enable this as well; xfs_quota needs to
parse new options, and setquota needs to set appropriate field flags.)

	Signed-off-by: Eric Sandeen <sandeen@redhat.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit df42ce64dc3eb7f01f8b601abd3881c6dddfbbaa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_qm_syscalls.c
diff --cc fs/xfs/xfs_qm_syscalls.c
index 13196d07c84e,362ccec2da99..000000000000
--- a/fs/xfs/xfs_qm_syscalls.c
+++ b/fs/xfs/xfs_qm_syscalls.c
@@@ -555,32 -555,40 +555,67 @@@ xfs_qm_scall_setqlim
  		ddq->d_rtbwarns = cpu_to_be16(newlim->d_rt_spc_warns);
  
  	if (id == 0) {
++<<<<<<< HEAD
 +		/*
 +		 * Timelimits for the super user set the relative time
 +		 * the other users can be over quota for this file system.
 +		 * If it is zero a default is used.  Ditto for the default
 +		 * soft and hard limit values (already done, above), and
 +		 * for warnings.
 +		 */
 +		if (newlim->d_fieldmask & QC_SPC_TIMER) {
 +			q->qi_btimelimit = newlim->d_spc_timer;
 +			ddq->d_btimer = cpu_to_be32(newlim->d_spc_timer);
 +		}
 +		if (newlim->d_fieldmask & QC_INO_TIMER) {
 +			q->qi_itimelimit = newlim->d_ino_timer;
 +			ddq->d_itimer = cpu_to_be32(newlim->d_ino_timer);
 +		}
 +		if (newlim->d_fieldmask & QC_RT_SPC_TIMER) {
 +			q->qi_rtbtimelimit = newlim->d_rt_spc_timer;
 +			ddq->d_rtbtimer = cpu_to_be32(newlim->d_rt_spc_timer);
 +		}
++=======
++>>>>>>> df42ce64dc3e (xfs: allow individual quota grace period extension)
  		if (newlim->d_fieldmask & QC_SPC_WARNS)
 -			defq->bwarnlimit = newlim->d_spc_warns;
 +			q->qi_bwarnlimit = newlim->d_spc_warns;
  		if (newlim->d_fieldmask & QC_INO_WARNS)
 -			defq->iwarnlimit = newlim->d_ino_warns;
 +			q->qi_iwarnlimit = newlim->d_ino_warns;
  		if (newlim->d_fieldmask & QC_RT_SPC_WARNS)
++<<<<<<< HEAD
 +			q->qi_rtbwarnlimit = newlim->d_rt_spc_warns;
 +	} else {
++=======
+ 			defq->rtbwarnlimit = newlim->d_rt_spc_warns;
+ 	}
+ 
+ 	/*
+ 	 * Timelimits for the super user set the relative time the other users
+ 	 * can be over quota for this file system. If it is zero a default is
+ 	 * used.  Ditto for the default soft and hard limit values (already
+ 	 * done, above), and for warnings.
+ 	 *
+ 	 * For other IDs, userspace can bump out the grace period if over
+ 	 * the soft limit.
+ 	 */
+ 	if (newlim->d_fieldmask & QC_SPC_TIMER)
+ 		ddq->d_btimer = cpu_to_be32(newlim->d_spc_timer);
+ 	if (newlim->d_fieldmask & QC_INO_TIMER)
+ 		ddq->d_itimer = cpu_to_be32(newlim->d_ino_timer);
+ 	if (newlim->d_fieldmask & QC_RT_SPC_TIMER)
+ 		ddq->d_rtbtimer = cpu_to_be32(newlim->d_rt_spc_timer);
+ 
+ 	if (id == 0) {
+ 		if (newlim->d_fieldmask & QC_SPC_TIMER)
+ 			defq->btimelimit = newlim->d_spc_timer;
+ 		if (newlim->d_fieldmask & QC_INO_TIMER)
+ 			defq->itimelimit = newlim->d_ino_timer;
+ 		if (newlim->d_fieldmask & QC_RT_SPC_TIMER)
+ 			defq->rtbtimelimit = newlim->d_rt_spc_timer;
+ 	}
+ 
+ 	if (id != 0) {
++>>>>>>> df42ce64dc3e (xfs: allow individual quota grace period extension)
  		/*
  		 * If the user is now over quota, start the timelimit.
  		 * The user will not be 'warned'.
* Unmerged path fs/xfs/xfs_qm_syscalls.c
