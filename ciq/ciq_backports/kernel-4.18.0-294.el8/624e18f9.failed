KVM: VMX: Add VMX_FEATURE_USR_WAIT_PAUSE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Xiaoyao Li <xiaoyao.li@intel.com>
commit 624e18f92f2ec449c2b3a6d388c0dccc45e4c4d7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/624e18f9.failed

Commit 159348784ff0 ("x86/vmx: Introduce VMX_FEATURES_*") missed
bit 26 (enable user wait and pause) of Secondary Processor-based
VM-Execution Controls.

Add VMX_FEATURE_USR_WAIT_PAUSE flag so that it shows up in /proc/cpuinfo,
and use it to define SECONDARY_EXEC_ENABLE_USR_WAIT_PAUSE to make them
uniform.

	Signed-off-by: Xiaoyao Li <xiaoyao.li@intel.com>
	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 624e18f92f2ec449c2b3a6d388c0dccc45e4c4d7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/vmx.h
diff --cc arch/x86/include/asm/vmx.h
index 49064c29e721,8521af3fef27..000000000000
--- a/arch/x86/include/asm/vmx.h
+++ b/arch/x86/include/asm/vmx.h
@@@ -59,36 -49,36 +59,63 @@@
  /*
   * Definitions of Secondary Processor-Based VM-Execution Controls.
   */
++<<<<<<< HEAD
 +#define SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES 0x00000001
 +#define SECONDARY_EXEC_ENABLE_EPT               0x00000002
 +#define SECONDARY_EXEC_DESC			0x00000004
 +#define SECONDARY_EXEC_RDTSCP			0x00000008
 +#define SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE   0x00000010
 +#define SECONDARY_EXEC_ENABLE_VPID              0x00000020
 +#define SECONDARY_EXEC_WBINVD_EXITING		0x00000040
 +#define SECONDARY_EXEC_UNRESTRICTED_GUEST	0x00000080
 +#define SECONDARY_EXEC_APIC_REGISTER_VIRT       0x00000100
 +#define SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY    0x00000200
 +#define SECONDARY_EXEC_PAUSE_LOOP_EXITING	0x00000400
 +#define SECONDARY_EXEC_RDRAND_EXITING		0x00000800
 +#define SECONDARY_EXEC_ENABLE_INVPCID		0x00001000
 +#define SECONDARY_EXEC_ENABLE_VMFUNC            0x00002000
 +#define SECONDARY_EXEC_SHADOW_VMCS              0x00004000
 +#define SECONDARY_EXEC_ENCLS_EXITING		0x00008000
 +#define SECONDARY_EXEC_RDSEED_EXITING		0x00010000
 +#define SECONDARY_EXEC_ENABLE_PML               0x00020000
 +#define SECONDARY_EXEC_PT_CONCEAL_VMX		0x00080000
 +#define SECONDARY_EXEC_XSAVES			0x00100000
 +#define SECONDARY_EXEC_PT_USE_GPA		0x01000000
 +#define SECONDARY_EXEC_MODE_BASED_EPT_EXEC	0x00400000
 +#define SECONDARY_EXEC_TSC_SCALING              0x02000000
 +#define SECONDARY_EXEC_ENABLE_USR_WAIT_PAUSE	0x04000000
++=======
+ #define SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES VMCS_CONTROL_BIT(VIRT_APIC_ACCESSES)
+ #define SECONDARY_EXEC_ENABLE_EPT               VMCS_CONTROL_BIT(EPT)
+ #define SECONDARY_EXEC_DESC			VMCS_CONTROL_BIT(DESC_EXITING)
+ #define SECONDARY_EXEC_RDTSCP			VMCS_CONTROL_BIT(RDTSCP)
+ #define SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE   VMCS_CONTROL_BIT(VIRTUAL_X2APIC)
+ #define SECONDARY_EXEC_ENABLE_VPID              VMCS_CONTROL_BIT(VPID)
+ #define SECONDARY_EXEC_WBINVD_EXITING		VMCS_CONTROL_BIT(WBINVD_EXITING)
+ #define SECONDARY_EXEC_UNRESTRICTED_GUEST	VMCS_CONTROL_BIT(UNRESTRICTED_GUEST)
+ #define SECONDARY_EXEC_APIC_REGISTER_VIRT       VMCS_CONTROL_BIT(APIC_REGISTER_VIRT)
+ #define SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY    VMCS_CONTROL_BIT(VIRT_INTR_DELIVERY)
+ #define SECONDARY_EXEC_PAUSE_LOOP_EXITING	VMCS_CONTROL_BIT(PAUSE_LOOP_EXITING)
+ #define SECONDARY_EXEC_RDRAND_EXITING		VMCS_CONTROL_BIT(RDRAND_EXITING)
+ #define SECONDARY_EXEC_ENABLE_INVPCID		VMCS_CONTROL_BIT(INVPCID)
+ #define SECONDARY_EXEC_ENABLE_VMFUNC            VMCS_CONTROL_BIT(VMFUNC)
+ #define SECONDARY_EXEC_SHADOW_VMCS              VMCS_CONTROL_BIT(SHADOW_VMCS)
+ #define SECONDARY_EXEC_ENCLS_EXITING		VMCS_CONTROL_BIT(ENCLS_EXITING)
+ #define SECONDARY_EXEC_RDSEED_EXITING		VMCS_CONTROL_BIT(RDSEED_EXITING)
+ #define SECONDARY_EXEC_ENABLE_PML               VMCS_CONTROL_BIT(PAGE_MOD_LOGGING)
+ #define SECONDARY_EXEC_PT_CONCEAL_VMX		VMCS_CONTROL_BIT(PT_CONCEAL_VMX)
+ #define SECONDARY_EXEC_XSAVES			VMCS_CONTROL_BIT(XSAVES)
+ #define SECONDARY_EXEC_MODE_BASED_EPT_EXEC	VMCS_CONTROL_BIT(MODE_BASED_EPT_EXEC)
+ #define SECONDARY_EXEC_PT_USE_GPA		VMCS_CONTROL_BIT(PT_USE_GPA)
+ #define SECONDARY_EXEC_TSC_SCALING              VMCS_CONTROL_BIT(TSC_SCALING)
+ #define SECONDARY_EXEC_ENABLE_USR_WAIT_PAUSE	VMCS_CONTROL_BIT(USR_WAIT_PAUSE)
++>>>>>>> 624e18f92f2e (KVM: VMX: Add VMX_FEATURE_USR_WAIT_PAUSE)
  
 -#define PIN_BASED_EXT_INTR_MASK                 VMCS_CONTROL_BIT(INTR_EXITING)
 -#define PIN_BASED_NMI_EXITING                   VMCS_CONTROL_BIT(NMI_EXITING)
 -#define PIN_BASED_VIRTUAL_NMIS                  VMCS_CONTROL_BIT(VIRTUAL_NMIS)
 -#define PIN_BASED_VMX_PREEMPTION_TIMER          VMCS_CONTROL_BIT(PREEMPTION_TIMER)
 -#define PIN_BASED_POSTED_INTR                   VMCS_CONTROL_BIT(POSTED_INTR)
 +#define PIN_BASED_EXT_INTR_MASK                 0x00000001
 +#define PIN_BASED_NMI_EXITING                   0x00000008
 +#define PIN_BASED_VIRTUAL_NMIS                  0x00000020
 +#define PIN_BASED_VMX_PREEMPTION_TIMER          0x00000040
 +#define PIN_BASED_POSTED_INTR                   0x00000080
  
  #define PIN_BASED_ALWAYSON_WITHOUT_TRUE_MSR	0x00000016
  
* Unmerged path arch/x86/include/asm/vmx.h
diff --git a/arch/x86/include/asm/vmxfeatures.h b/arch/x86/include/asm/vmxfeatures.h
index 0d04d8bf15a5..851856b0bc15 100644
--- a/arch/x86/include/asm/vmxfeatures.h
+++ b/arch/x86/include/asm/vmxfeatures.h
@@ -81,6 +81,7 @@
 #define VMX_FEATURE_MODE_BASED_EPT_EXEC	( 2*32+ 22) /* "ept_mode_based_exec" Enable separate EPT EXEC bits for supervisor vs. user */
 #define VMX_FEATURE_PT_USE_GPA		( 2*32+ 24) /* "" Processor Trace logs GPAs */
 #define VMX_FEATURE_TSC_SCALING		( 2*32+ 25) /* Scale hardware TSC when read in guest */
+#define VMX_FEATURE_USR_WAIT_PAUSE	( 2*32+ 26) /* Enable TPAUSE, UMONITOR, UMWAIT in guest */
 #define VMX_FEATURE_ENCLV_EXITING	( 2*32+ 28) /* "" VM-Exit on ENCLV (leaf dependent) */
 
 #endif /* _ASM_X86_VMXFEATURES_H */
