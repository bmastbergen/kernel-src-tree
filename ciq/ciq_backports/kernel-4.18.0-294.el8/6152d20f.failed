scsi: qla2xxx: Add rport fields in debugfs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Arun Easi <aeasi@marvell.com>
commit 6152d20fa6703cf364253efc4eab31151558cb01
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/6152d20f.failed

This patch adds rport fields in debugfs.

Link: https://lore.kernel.org/r/20200904045128.23631-11-njavali@marvell.com
	Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
	Signed-off-by: Arun Easi <aeasi@marvell.com>
	Signed-off-by: Nilesh Javali <njavali@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 6152d20fa6703cf364253efc4eab31151558cb01)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_dfs.c
diff --cc drivers/scsi/qla2xxx/qla_dfs.c
index 941c0cd26dfb,118f2b223531..000000000000
--- a/drivers/scsi/qla2xxx/qla_dfs.c
+++ b/drivers/scsi/qla2xxx/qla_dfs.c
@@@ -12,6 -12,140 +12,143 @@@
  static struct dentry *qla2x00_dfs_root;
  static atomic_t qla2x00_dfs_root_count;
  
++<<<<<<< HEAD
++=======
+ #define QLA_DFS_RPORT_DEVLOSS_TMO	1
+ 
+ static int
+ qla_dfs_rport_get(struct fc_port *fp, int attr_id, u64 *val)
+ {
+ 	switch (attr_id) {
+ 	case QLA_DFS_RPORT_DEVLOSS_TMO:
+ 		/* Only supported for FC-NVMe devices that are registered. */
+ 		if (!(fp->nvme_flag & NVME_FLAG_REGISTERED))
+ 			return -EIO;
+ 		*val = fp->nvme_remote_port->dev_loss_tmo;
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 	return 0;
+ }
+ 
+ static int
+ qla_dfs_rport_set(struct fc_port *fp, int attr_id, u64 val)
+ {
+ 	switch (attr_id) {
+ 	case QLA_DFS_RPORT_DEVLOSS_TMO:
+ 		/* Only supported for FC-NVMe devices that are registered. */
+ 		if (!(fp->nvme_flag & NVME_FLAG_REGISTERED))
+ 			return -EIO;
+ #if (IS_ENABLED(CONFIG_NVME_FC))
+ 		return nvme_fc_set_remoteport_devloss(fp->nvme_remote_port,
+ 						      val);
+ #else /* CONFIG_NVME_FC */
+ 		return -EINVAL;
+ #endif /* CONFIG_NVME_FC */
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 	return 0;
+ }
+ 
+ #define DEFINE_QLA_DFS_RPORT_RW_ATTR(_attr_id, _attr)		\
+ static int qla_dfs_rport_##_attr##_get(void *data, u64 *val)	\
+ {								\
+ 	struct fc_port *fp = data;				\
+ 	return qla_dfs_rport_get(fp, _attr_id, val);		\
+ }								\
+ static int qla_dfs_rport_##_attr##_set(void *data, u64 val)	\
+ {								\
+ 	struct fc_port *fp = data;				\
+ 	return qla_dfs_rport_set(fp, _attr_id, val);		\
+ }								\
+ DEFINE_DEBUGFS_ATTRIBUTE(qla_dfs_rport_##_attr##_fops,		\
+ 		qla_dfs_rport_##_attr##_get,			\
+ 		qla_dfs_rport_##_attr##_set, "%llu\n")
+ 
+ /*
+  * Wrapper for getting fc_port fields.
+  *
+  * _attr    : Attribute name.
+  * _get_val : Accessor macro to retrieve the value.
+  */
+ #define DEFINE_QLA_DFS_RPORT_FIELD_GET(_attr, _get_val)			\
+ static int qla_dfs_rport_field_##_attr##_get(void *data, u64 *val)	\
+ {									\
+ 	struct fc_port *fp = data;					\
+ 	*val = _get_val;						\
+ 	return 0;							\
+ }									\
+ DEFINE_DEBUGFS_ATTRIBUTE(qla_dfs_rport_field_##_attr##_fops,		\
+ 		qla_dfs_rport_field_##_attr##_get,			\
+ 		NULL, "%llu\n")
+ 
+ #define DEFINE_QLA_DFS_RPORT_ACCESS(_attr, _get_val) \
+ 	DEFINE_QLA_DFS_RPORT_FIELD_GET(_attr, _get_val)
+ 
+ #define DEFINE_QLA_DFS_RPORT_FIELD(_attr) \
+ 	DEFINE_QLA_DFS_RPORT_FIELD_GET(_attr, fp->_attr)
+ 
+ DEFINE_QLA_DFS_RPORT_RW_ATTR(QLA_DFS_RPORT_DEVLOSS_TMO, dev_loss_tmo);
+ 
+ DEFINE_QLA_DFS_RPORT_FIELD(disc_state);
+ DEFINE_QLA_DFS_RPORT_FIELD(scan_state);
+ DEFINE_QLA_DFS_RPORT_FIELD(fw_login_state);
+ DEFINE_QLA_DFS_RPORT_FIELD(login_pause);
+ DEFINE_QLA_DFS_RPORT_FIELD(flags);
+ DEFINE_QLA_DFS_RPORT_FIELD(nvme_flag);
+ DEFINE_QLA_DFS_RPORT_FIELD(last_rscn_gen);
+ DEFINE_QLA_DFS_RPORT_FIELD(rscn_gen);
+ DEFINE_QLA_DFS_RPORT_FIELD(login_gen);
+ DEFINE_QLA_DFS_RPORT_FIELD(loop_id);
+ DEFINE_QLA_DFS_RPORT_FIELD_GET(port_id, fp->d_id.b24);
+ DEFINE_QLA_DFS_RPORT_FIELD_GET(sess_kref, kref_read(&fp->sess_kref));
+ 
+ void
+ qla2x00_dfs_create_rport(scsi_qla_host_t *vha, struct fc_port *fp)
+ {
+ 	char wwn[32];
+ 
+ #define QLA_CREATE_RPORT_FIELD_ATTR(_attr)			\
+ 	debugfs_create_file(#_attr, 0400, fp->dfs_rport_dir,	\
+ 		fp, &qla_dfs_rport_field_##_attr##_fops)
+ 
+ 	if (!vha->dfs_rport_root || fp->dfs_rport_dir)
+ 		return;
+ 
+ 	sprintf(wwn, "pn-%016llx", wwn_to_u64(fp->port_name));
+ 	fp->dfs_rport_dir = debugfs_create_dir(wwn, vha->dfs_rport_root);
+ 	if (!fp->dfs_rport_dir)
+ 		return;
+ 	if (NVME_TARGET(vha->hw, fp))
+ 		debugfs_create_file("dev_loss_tmo", 0600, fp->dfs_rport_dir,
+ 				    fp, &qla_dfs_rport_dev_loss_tmo_fops);
+ 
+ 	QLA_CREATE_RPORT_FIELD_ATTR(disc_state);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(scan_state);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(fw_login_state);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(login_pause);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(flags);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(nvme_flag);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(last_rscn_gen);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(rscn_gen);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(login_gen);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(loop_id);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(port_id);
+ 	QLA_CREATE_RPORT_FIELD_ATTR(sess_kref);
+ }
+ 
+ void
+ qla2x00_dfs_remove_rport(scsi_qla_host_t *vha, struct fc_port *fp)
+ {
+ 	if (!vha->dfs_rport_root || !fp->dfs_rport_dir)
+ 		return;
+ 	debugfs_remove_recursive(fp->dfs_rport_dir);
+ 	fp->dfs_rport_dir = NULL;
+ }
+ 
++>>>>>>> 6152d20fa670 (scsi: qla2xxx: Add rport fields in debugfs)
  static int
  qla2x00_dfs_tgt_sess_show(struct seq_file *s, void *unused)
  {
* Unmerged path drivers/scsi/qla2xxx/qla_dfs.c
