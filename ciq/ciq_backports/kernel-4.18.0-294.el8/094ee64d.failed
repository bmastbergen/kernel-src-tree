dm: push md->immutable_target optimization down to __process_bio()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mike Snitzer <snitzer@redhat.com>
commit 094ee64d7de8ab72b495ff9c03d86a60272da56d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/094ee64d.failed

Also, update associated stale comment in __bind().

	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 094ee64d7de8ab72b495ff9c03d86a60272da56d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index 65fa96ff67f7,e1cb3b9fd207..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1711,18 -1736,12 +1716,10 @@@ static blk_qc_t dm_process_bio(struct m
  		return ret;
  	}
  
- 	if (!ti) {
- 		ti = dm_table_find_target(map, bio->bi_iter.bi_sector);
- 		if (unlikely(!ti)) {
- 			bio_io_error(bio);
- 			return ret;
- 		}
- 	}
- 
  	/*
 -	 * If in ->submit_bio we need to use blk_queue_split(), otherwise
 +	 * If in ->make_request_fn we need to use blk_queue_split(), otherwise
  	 * queue_limits for abnormal requests (e.g. discard, writesame, etc)
  	 * won't be imposed.
 -	 * If called from dm_wq_work() for deferred bio processing, bio
 -	 * was already handled by following code with previous ->submit_bio.
  	 */
  	if (current->bio_list) {
  		if (is_abnormal_io(bio))
@@@ -1732,14 -1750,13 +1729,19 @@@
  	}
  
  	if (dm_get_md_type(md) == DM_TYPE_NVME_BIO_BASED)
++<<<<<<< HEAD
 +		return __process_bio(md, map, bio, ti);
 +	else
 +		return __split_and_process_bio(md, map, bio);
++=======
+ 		return __process_bio(md, map, bio);
+ 	return __split_and_process_bio(md, map, bio);
++>>>>>>> 094ee64d7de8 (dm: push md->immutable_target optimization down to __process_bio())
  }
  
 -static blk_qc_t dm_submit_bio(struct bio *bio)
 +static blk_qc_t dm_make_request(struct request_queue *q, struct bio *bio)
  {
 -	struct mapped_device *md = bio->bi_disk->private_data;
 +	struct mapped_device *md = q->queuedata;
  	blk_qc_t ret = BLK_QC_T_NONE;
  	int srcu_idx;
  	struct dm_table *map;
* Unmerged path drivers/md/dm.c
