mm: memcontrol: fix warning when allocating the root cgroup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Johannes Weiner <hannes@cmpxchg.org>
commit 9f457179244a1c0316546b1760f8993d0d718861
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9f457179.failed

Commit 3e38e0aaca9e ("mm: memcg: charge memcg percpu memory to the
parent cgroup") adds memory tracking to the memcg kernel structures
themselves to make cgroups liable for the memory they are consuming
through the allocation of child groups (which can be significant).

This code is a bit awkward as it's spread out through several functions:
The outermost function does memalloc_use_memcg(parent) to set up
current->active_memcg, which designates which cgroup to charge, and the
inner functions pass GFP_ACCOUNT to request charging for specific
allocations.  To make sure this dependency is satisfied at all times -
to make sure we don't randomly charge whoever is calling the functions -
the inner functions warn on !current->active_memcg.

However, this triggers a false warning when the root memcg itself is
allocated.  No parent exists in this case, and so current->active_memcg
is rightfully NULL.  It's a false positive, not indicative of a bug.

Delete the warnings for now, we can revisit this later.

Fixes: 3e38e0aaca9e ("mm: memcg: charge memcg percpu memory to the parent cgroup")
	Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
	Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Acked-by: Roman Gushchin <guro@fb.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9f457179244a1c0316546b1760f8993d0d718861)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/memcontrol.c
diff --cc mm/memcontrol.c
index 406972ba9675,9d87082e64aa..000000000000
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@@ -4892,7 -5137,8 +4892,12 @@@ static int alloc_mem_cgroup_per_node_in
  	if (!pn)
  		return 1;
  
++<<<<<<< HEAD
 +	pn->lruvec_stat_local = alloc_percpu(struct lruvec_stat);
++=======
+ 	pn->lruvec_stat_local = alloc_percpu_gfp(struct lruvec_stat,
+ 						 GFP_KERNEL_ACCOUNT);
++>>>>>>> 9f457179244a (mm: memcontrol: fix warning when allocating the root cgroup)
  	if (!pn->lruvec_stat_local) {
  		kfree(pn);
  		return 1;
@@@ -4965,10 -5214,13 +4970,15 @@@ static struct mem_cgroup *mem_cgroup_al
  	memcg->id.id = idr_alloc(&mem_cgroup_idr, NULL,
  				 1, MEM_CGROUP_ID_MAX,
  				 GFP_KERNEL);
 -	if (memcg->id.id < 0) {
 -		error = memcg->id.id;
 +	if (memcg->id.id < 0)
  		goto fail;
 -	}
  
++<<<<<<< HEAD
 +	memcg->vmstats_local = alloc_percpu(struct memcg_vmstats_percpu);
++=======
+ 	memcg->vmstats_local = alloc_percpu_gfp(struct memcg_vmstats_percpu,
+ 						GFP_KERNEL_ACCOUNT);
++>>>>>>> 9f457179244a (mm: memcontrol: fix warning when allocating the root cgroup)
  	if (!memcg->vmstats_local)
  		goto fail;
  
* Unmerged path mm/memcontrol.c
