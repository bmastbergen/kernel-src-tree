net: atlantic: use simple assignment in _get_stats and _get_sw_stats

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mark Starovoytov <mstarovoitov@marvell.com>
commit 3624aa3c2582e4b9097e7648f6f03c82e474ceb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3624aa3c.failed

This patch replaces addition assignment operator with a simple assignment
in aq_vec_get_stats() and aq_vec_get_sw_stats(), because it is
sufficient in both cases and this change simplifies the introduction of
u64_stats_update_* in these functions.

	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3624aa3c2582e4b9097e7648f6f03c82e474ceb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_vec.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_vec.c
index e9e3905626ba,2acdaee18ba0..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
@@@ -1,10 -1,8 +1,18 @@@
++<<<<<<< HEAD
 +/*
 + * aQuantia Corporation Network Driver
 + * Copyright (C) 2014-2017 aQuantia Corporation. All rights reserved
 + *
 + * This program is free software; you can redistribute it and/or modify it
 + * under the terms and conditions of the GNU General Public License,
 + * version 2, as published by the Free Software Foundation.
++=======
+ // SPDX-License-Identifier: GPL-2.0-only
+ /* Atlantic Network Driver
+  *
+  * Copyright (C) 2014-2019 aQuantia Corporation
+  * Copyright (C) 2019-2020 Marvell International Ltd.
++>>>>>>> 3624aa3c2582 (net: atlantic: use simple assignment in _get_stats and _get_sw_stats)
   */
  
  /* File aq_vec.c: Definition of common structure for vector of Rx and Tx rings.
@@@ -334,31 -350,33 +342,53 @@@ cpumask_t *aq_vec_get_affinity_mask(str
  	return &self->aq_ring_param.affinity_mask;
  }
  
++<<<<<<< HEAD
 +void aq_vec_add_stats(struct aq_vec_s *self,
 +		      struct aq_ring_stats_rx_s *stats_rx,
 +		      struct aq_ring_stats_tx_s *stats_tx)
++=======
+ static void aq_vec_get_stats(struct aq_vec_s *self,
+ 			     const unsigned int tc,
+ 			     struct aq_ring_stats_rx_s *stats_rx,
+ 			     struct aq_ring_stats_tx_s *stats_tx)
++>>>>>>> 3624aa3c2582 (net: atlantic: use simple assignment in _get_stats and _get_sw_stats)
  {
 -	struct aq_ring_s *ring = self->ring[tc];
 +	struct aq_ring_s *ring = NULL;
 +	unsigned int r = 0U;
  
 -	if (tc < self->rx_rings) {
 +	for (r = 0U, ring = self->ring[0];
 +		self->tx_rings > r; ++r, ring = self->ring[r]) {
 +		struct aq_ring_stats_tx_s *tx = &ring[AQ_VEC_TX_ID].stats.tx;
  		struct aq_ring_stats_rx_s *rx = &ring[AQ_VEC_RX_ID].stats.rx;
  
++<<<<<<< HEAD
 +		stats_rx->packets += rx->packets;
 +		stats_rx->bytes += rx->bytes;
 +		stats_rx->errors += rx->errors;
 +		stats_rx->jumbo_packets += rx->jumbo_packets;
 +		stats_rx->lro_packets += rx->lro_packets;
 +		stats_rx->pg_losts += rx->pg_losts;
 +		stats_rx->pg_flips += rx->pg_flips;
 +		stats_rx->pg_reuses += rx->pg_reuses;
++=======
+ 		stats_rx->packets = rx->packets;
+ 		stats_rx->bytes = rx->bytes;
+ 		stats_rx->errors = rx->errors;
+ 		stats_rx->jumbo_packets = rx->jumbo_packets;
+ 		stats_rx->lro_packets = rx->lro_packets;
+ 		stats_rx->pg_losts = rx->pg_losts;
+ 		stats_rx->pg_flips = rx->pg_flips;
+ 		stats_rx->pg_reuses = rx->pg_reuses;
+ 	}
  
- 		stats_tx->packets += tx->packets;
- 		stats_tx->bytes += tx->bytes;
- 		stats_tx->errors += tx->errors;
- 		stats_tx->queue_restarts += tx->queue_restarts;
+ 	if (tc < self->tx_rings) {
+ 		struct aq_ring_stats_tx_s *tx = &ring[AQ_VEC_TX_ID].stats.tx;
++>>>>>>> 3624aa3c2582 (net: atlantic: use simple assignment in _get_stats and _get_sw_stats)
+ 
+ 		stats_tx->packets = tx->packets;
+ 		stats_tx->bytes = tx->bytes;
+ 		stats_tx->errors = tx->errors;
+ 		stats_tx->queue_restarts = tx->queue_restarts;
  	}
  }
  
@@@ -370,7 -388,9 +400,12 @@@ int aq_vec_get_sw_stats(struct aq_vec_
  
  	memset(&stats_rx, 0U, sizeof(struct aq_ring_stats_rx_s));
  	memset(&stats_tx, 0U, sizeof(struct aq_ring_stats_tx_s));
++<<<<<<< HEAD
 +	aq_vec_add_stats(self, &stats_rx, &stats_tx);
++=======
+ 
+ 	aq_vec_get_stats(self, tc, &stats_rx, &stats_tx);
++>>>>>>> 3624aa3c2582 (net: atlantic: use simple assignment in _get_stats and _get_sw_stats)
  
  	/* This data should mimic aq_ethtool_queue_stat_names structure
  	 */
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_vec.c
