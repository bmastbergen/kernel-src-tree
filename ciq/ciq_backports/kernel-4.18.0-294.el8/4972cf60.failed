libceph, ceph: disambiguate ceph_connection_operations handlers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 4972cf605f8a10784bb9ec9bdf3465892fb547c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/4972cf60.failed

Since a few years, kernel addresses are no longer included in oops
dumps, at least on x86.  All we get is a symbol name with offset and
size.

This is a problem for ceph_connection_operations handlers, especially
con->ops->dispatch().  All three handlers have the same name and there
is little context to disambiguate between e.g. monitor and OSD clients
because almost everything is inlined.  gdb sneakily stops at the first
matching symbol, so one has to resort to nm and addr2line.

Some of these are already prefixed with mon_, osd_ or mds_.  Let's do
the same for all others.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
	Acked-by: Jeff Layton <jlayton@kernel.org>
(cherry picked from commit 4972cf605f8a10784bb9ec9bdf3465892fb547c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/mon_client.c
#	net/ceph/osd_client.c
diff --cc net/ceph/mon_client.c
index 686b4ecff175,195ceb8afb06..000000000000
--- a/net/ceph/mon_client.c
+++ b/net/ceph/mon_client.c
@@@ -1445,9 -1575,13 +1445,16 @@@ static void mon_put_con(struct ceph_con
  }
  
  static const struct ceph_connection_operations mon_con_ops = {
- 	.get = con_get,
- 	.put = con_put,
- 	.dispatch = dispatch,
- 	.fault = mon_fault,
+ 	.get = mon_get_con,
+ 	.put = mon_put_con,
  	.alloc_msg = mon_alloc_msg,
++<<<<<<< HEAD
++=======
+ 	.dispatch = mon_dispatch,
+ 	.fault = mon_fault,
+ 	.get_auth_request = mon_get_auth_request,
+ 	.handle_auth_reply_more = mon_handle_auth_reply_more,
+ 	.handle_auth_done = mon_handle_auth_done,
+ 	.handle_auth_bad_method = mon_handle_auth_bad_method,
++>>>>>>> 4972cf605f8a (libceph, ceph: disambiguate ceph_connection_operations handlers)
  };
diff --cc net/ceph/osd_client.c
index b35b80e5b097,ff8624a7c964..000000000000
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@@ -5654,16 -5731,20 +5654,24 @@@ static int osd_check_message_signature(
  }
  
  static const struct ceph_connection_operations osd_con_ops = {
- 	.get = get_osd_con,
- 	.put = put_osd_con,
- 	.dispatch = dispatch,
- 	.get_authorizer = get_authorizer,
- 	.add_authorizer_challenge = add_authorizer_challenge,
- 	.verify_authorizer_reply = verify_authorizer_reply,
- 	.invalidate_authorizer = invalidate_authorizer,
- 	.alloc_msg = alloc_msg,
+ 	.get = osd_get_con,
+ 	.put = osd_put_con,
+ 	.alloc_msg = osd_alloc_msg,
+ 	.dispatch = osd_dispatch,
+ 	.fault = osd_fault,
  	.reencode_message = osd_reencode_message,
+ 	.get_authorizer = osd_get_authorizer,
+ 	.add_authorizer_challenge = osd_add_authorizer_challenge,
+ 	.verify_authorizer_reply = osd_verify_authorizer_reply,
+ 	.invalidate_authorizer = osd_invalidate_authorizer,
  	.sign_message = osd_sign_message,
  	.check_message_signature = osd_check_message_signature,
++<<<<<<< HEAD
 +	.fault = osd_fault,
++=======
+ 	.get_auth_request = osd_get_auth_request,
+ 	.handle_auth_reply_more = osd_handle_auth_reply_more,
+ 	.handle_auth_done = osd_handle_auth_done,
+ 	.handle_auth_bad_method = osd_handle_auth_bad_method,
++>>>>>>> 4972cf605f8a (libceph, ceph: disambiguate ceph_connection_operations handlers)
  };
diff --git a/fs/ceph/mds_client.c b/fs/ceph/mds_client.c
index a7a2522baf9c..e6c5de245941 100644
--- a/fs/ceph/mds_client.c
+++ b/fs/ceph/mds_client.c
@@ -5042,7 +5042,7 @@ void ceph_mdsc_handle_mdsmap(struct ceph_mds_client *mdsc, struct ceph_msg *msg)
 	return;
 }
 
-static struct ceph_connection *con_get(struct ceph_connection *con)
+static struct ceph_connection *mds_get_con(struct ceph_connection *con)
 {
 	struct ceph_mds_session *s = con->private;
 
@@ -5051,7 +5051,7 @@ static struct ceph_connection *con_get(struct ceph_connection *con)
 	return NULL;
 }
 
-static void con_put(struct ceph_connection *con)
+static void mds_put_con(struct ceph_connection *con)
 {
 	struct ceph_mds_session *s = con->private;
 
@@ -5062,7 +5062,7 @@ static void con_put(struct ceph_connection *con)
  * if the client is unresponsive for long enough, the mds will kill
  * the session entirely.
  */
-static void peer_reset(struct ceph_connection *con)
+static void mds_peer_reset(struct ceph_connection *con)
 {
 	struct ceph_mds_session *s = con->private;
 	struct ceph_mds_client *mdsc = s->s_mdsc;
@@ -5071,7 +5071,7 @@ static void peer_reset(struct ceph_connection *con)
 	send_mds_reconnect(mdsc, s);
 }
 
-static void dispatch(struct ceph_connection *con, struct ceph_msg *msg)
+static void mds_dispatch(struct ceph_connection *con, struct ceph_msg *msg)
 {
 	struct ceph_mds_session *s = con->private;
 	struct ceph_mds_client *mdsc = s->s_mdsc;
@@ -5129,8 +5129,8 @@ static void dispatch(struct ceph_connection *con, struct ceph_msg *msg)
  * Note: returned pointer is the address of a structure that's
  * managed separately.  Caller must *not* attempt to free it.
  */
-static struct ceph_auth_handshake *get_authorizer(struct ceph_connection *con,
-					int *proto, int force_new)
+static struct ceph_auth_handshake *
+mds_get_authorizer(struct ceph_connection *con, int *proto, int force_new)
 {
 	struct ceph_mds_session *s = con->private;
 	struct ceph_mds_client *mdsc = s->s_mdsc;
@@ -5146,7 +5146,7 @@ static struct ceph_auth_handshake *get_authorizer(struct ceph_connection *con,
 	return auth;
 }
 
-static int add_authorizer_challenge(struct ceph_connection *con,
+static int mds_add_authorizer_challenge(struct ceph_connection *con,
 				    void *challenge_buf, int challenge_buf_len)
 {
 	struct ceph_mds_session *s = con->private;
@@ -5157,7 +5157,7 @@ static int add_authorizer_challenge(struct ceph_connection *con,
 					    challenge_buf, challenge_buf_len);
 }
 
-static int verify_authorizer_reply(struct ceph_connection *con)
+static int mds_verify_authorizer_reply(struct ceph_connection *con)
 {
 	struct ceph_mds_session *s = con->private;
 	struct ceph_mds_client *mdsc = s->s_mdsc;
@@ -5169,7 +5169,7 @@ static int verify_authorizer_reply(struct ceph_connection *con)
 		NULL, NULL, NULL, NULL);
 }
 
-static int invalidate_authorizer(struct ceph_connection *con)
+static int mds_invalidate_authorizer(struct ceph_connection *con)
 {
 	struct ceph_mds_session *s = con->private;
 	struct ceph_mds_client *mdsc = s->s_mdsc;
@@ -5218,15 +5218,15 @@ static int mds_check_message_signature(struct ceph_msg *msg)
 }
 
 static const struct ceph_connection_operations mds_con_ops = {
-	.get = con_get,
-	.put = con_put,
-	.dispatch = dispatch,
-	.get_authorizer = get_authorizer,
-	.add_authorizer_challenge = add_authorizer_challenge,
-	.verify_authorizer_reply = verify_authorizer_reply,
-	.invalidate_authorizer = invalidate_authorizer,
-	.peer_reset = peer_reset,
+	.get = mds_get_con,
+	.put = mds_put_con,
 	.alloc_msg = mds_alloc_msg,
+	.dispatch = mds_dispatch,
+	.peer_reset = mds_peer_reset,
+	.get_authorizer = mds_get_authorizer,
+	.add_authorizer_challenge = mds_add_authorizer_challenge,
+	.verify_authorizer_reply = mds_verify_authorizer_reply,
+	.invalidate_authorizer = mds_invalidate_authorizer,
 	.sign_message = mds_sign_message,
 	.check_message_signature = mds_check_message_signature,
 };
* Unmerged path net/ceph/mon_client.c
* Unmerged path net/ceph/osd_client.c
