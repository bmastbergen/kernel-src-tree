powerpc/pseries/cmm: Simulation mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author David Hildenbrand <david@redhat.com>
commit b1713975c31ae20ecc40fd00191ee3fa51445d4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b1713975.failed

Let's allow to test the implementation without needing HW support.
When "simulate=1" is specified when loading the module, we bypass all
HW checks and HW calls. The sysfs file "simulate_loan_target_kb" can
be used to simulate HW requests.

The simualtion mode can be activated using:
  modprobe cmm debug=1 simulate=1

And the requested loan target can be changed using:
  echo X > /sys/devices/system/cmm/cmm0/simulate_loan_target_kb

	Signed-off-by: David Hildenbrand <david@redhat.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20191031142933.10779-11-david@redhat.com
(cherry picked from commit b1713975c31ae20ecc40fd00191ee3fa51445d4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/pseries/cmm.c
diff --cc arch/powerpc/platforms/pseries/cmm.c
index 317181692fcb,91571841df8a..000000000000
--- a/arch/powerpc/platforms/pseries/cmm.c
+++ b/arch/powerpc/platforms/pseries/cmm.c
@@@ -88,18 -76,12 +90,20 @@@ MODULE_PARM_DESC(min_mem_mb, "Minimum a
  module_param_named(debug, cmm_debug, uint, 0644);
  MODULE_PARM_DESC(debug, "Enable module debugging logging. Set to 1 to enable. "
  		 "[Default=" __stringify(CMM_DEBUG) "]");
+ module_param_named(simulate, simulate, bool, 0444);
+ MODULE_PARM_DESC(simulate, "Enable simulation mode (no communication with hw).");
  
 +#define CMM_NR_PAGES ((PAGE_SIZE - sizeof(void *) - sizeof(unsigned long)) / sizeof(unsigned long))
 +
  #define cmm_dbg(...) if (cmm_debug) { printk(KERN_INFO "cmm: "__VA_ARGS__); }
  
 -static atomic_long_t loaned_pages;
 +struct cmm_page_array {
 +	struct cmm_page_array *next;
 +	unsigned long index;
 +	unsigned long page[CMM_NR_PAGES];
 +};
 +
 +static unsigned long loaned_pages;
  static unsigned long loaned_pages_target;
  static unsigned long oom_freed_pages;
  
@@@ -291,16 -240,21 +301,30 @@@ static void cmm_get_mpp(void
  	int rc;
  	struct hvcall_mpp_data mpp_data;
  	signed long active_pages_target, page_loan_request, target;
 +	signed long total_pages = totalram_pages + loaned_pages;
  	signed long min_mem_pages = (min_mem_mb * 1024 * 1024) / PAGE_SIZE;
  
++<<<<<<< HEAD
 +	rc = h_get_mpp(&mpp_data);
 +
 +	if (rc != H_SUCCESS)
 +		return;
 +
 +	page_loan_request = div_s64((s64)mpp_data.loan_request, PAGE_SIZE);
 +	target = page_loan_request + (signed long)loaned_pages;
++=======
+ 	if (likely(!simulate)) {
+ 		rc = h_get_mpp(&mpp_data);
+ 		if (rc != H_SUCCESS)
+ 			return;
+ 		page_loan_request = div_s64((s64)mpp_data.loan_request,
+ 					    PAGE_SIZE);
+ 		target = page_loan_request + __loaned_pages;
+ 	} else {
+ 		target = KB2PAGES(simulate_loan_target_kb);
+ 		page_loan_request = target - __loaned_pages;
+ 	}
++>>>>>>> b1713975c31a (powerpc/pseries/cmm: Simulation mode)
  
  	if (target < 0 || total_pages < min_mem_pages)
  		target = 0;
@@@ -685,12 -612,17 +717,12 @@@ static int cmm_init(void
  {
  	int rc;
  
- 	if (!firmware_has_feature(FW_FEATURE_CMO))
+ 	if (!firmware_has_feature(FW_FEATURE_CMO) && !simulate)
  		return -EOPNOTSUPP;
  
 -	rc = cmm_balloon_compaction_init();
 -	if (rc)
 +	if ((rc = register_oom_notifier(&cmm_oom_nb)) < 0)
  		return rc;
  
 -	rc = register_oom_notifier(&cmm_oom_nb);
 -	if (rc < 0)
 -		goto out_balloon_compaction;
 -
  	if ((rc = register_reboot_notifier(&cmm_reboot_nb)))
  		goto out_oom_notifier;
  
* Unmerged path arch/powerpc/platforms/pseries/cmm.c
