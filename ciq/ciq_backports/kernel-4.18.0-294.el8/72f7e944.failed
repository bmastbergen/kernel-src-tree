udp: Run SK_LOOKUP BPF program on socket lookup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jakub Sitnicki <jakub@cloudflare.com>
commit 72f7e9440e9bd06f855b21eba09c1017395f430a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/72f7e944.failed

Following INET/TCP socket lookup changes, modify UDP socket lookup to let
BPF program select a receiving socket before searching for a socket by
destination address and port as usual.

Lookup of connected sockets that match packet 4-tuple is unaffected by this
change. BPF program runs, and potentially overrides the lookup result, only
if a 4-tuple match was not found.

	Suggested-by: Marek Majkowski <marek@cloudflare.com>
	Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20200717103536.397595-9-jakub@cloudflare.com
(cherry picked from commit 72f7e9440e9bd06f855b21eba09c1017395f430a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/udp.c
diff --cc net/ipv4/udp.c
index cfc98bf6ef18,b738c63d7a77..000000000000
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@@ -468,16 -499,33 +492,37 @@@ struct sock *__udp4_lib_lookup(struct n
  	result = udp4_lib_lookup2(net, saddr, sport,
  				  daddr, hnum, dif, sdif,
  				  hslot2, skb);
- 	if (!result) {
- 		hash2 = ipv4_portaddr_hash(net, htonl(INADDR_ANY), hnum);
- 		slot2 = hash2 & udptable->mask;
- 		hslot2 = &udptable->hash2[slot2];
- 
- 		result = udp4_lib_lookup2(net, saddr, sport,
- 					  htonl(INADDR_ANY), hnum, dif, sdif,
- 					  hslot2, skb);
+ 	if (!IS_ERR_OR_NULL(result) && result->sk_state == TCP_ESTABLISHED)
+ 		goto done;
+ 
+ 	/* Lookup redirect from BPF */
+ 	if (static_branch_unlikely(&bpf_sk_lookup_enabled)) {
+ 		sk = udp4_lookup_run_bpf(net, udptable, skb,
+ 					 saddr, sport, daddr, hnum);
+ 		if (sk) {
+ 			result = sk;
+ 			goto done;
+ 		}
  	}
++<<<<<<< HEAD
 +	if (unlikely(IS_ERR(result)))
++=======
+ 
+ 	/* Got non-wildcard socket or error on first lookup */
+ 	if (result)
+ 		goto done;
+ 
+ 	/* Lookup wildcard sockets */
+ 	hash2 = ipv4_portaddr_hash(net, htonl(INADDR_ANY), hnum);
+ 	slot2 = hash2 & udptable->mask;
+ 	hslot2 = &udptable->hash2[slot2];
+ 
+ 	result = udp4_lib_lookup2(net, saddr, sport,
+ 				  htonl(INADDR_ANY), hnum, dif, sdif,
+ 				  hslot2, skb);
+ done:
+ 	if (IS_ERR(result))
++>>>>>>> 72f7e9440e9b (udp: Run SK_LOOKUP BPF program on socket lookup)
  		return NULL;
  	return result;
  }
* Unmerged path net/ipv4/udp.c
