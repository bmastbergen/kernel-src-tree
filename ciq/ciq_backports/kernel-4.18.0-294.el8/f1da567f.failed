driver core: platform: Add platform_get_irq_byname_optional()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Hans de Goede <hdegoede@redhat.com>
commit f1da567f1dc1b55d178b8f2d0cfe8353858aac19
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/f1da567f.failed

Some drivers (e.g dwc3) first try to get an IRQ byname and then fall
back to the one at index 0. In this case we do not want the error(s)
printed by platform_get_irq_byname(). This commit adds a new
platform_get_irq_byname_optional(), which does not print errors, for this.

While at it also improve the kdoc text for platform_get_irq_byname() a bit.

BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=205037
	Signed-off-by: Hans de Goede <hdegoede@redhat.com>
	Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Link: https://lore.kernel.org/r/20191005210449.3926-2-hdegoede@redhat.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit f1da567f1dc1b55d178b8f2d0cfe8353858aac19)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/platform.c
diff --cc drivers/base/platform.c
index 65c19d3d9c1d,b230beb6ccb4..000000000000
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@@ -237,7 -255,30 +233,34 @@@ static int __platform_get_irq_byname(st
  	}
  
  	r = platform_get_resource_byname(dev, IORESOURCE_IRQ, name);
++<<<<<<< HEAD
 +	return r ? r->start : -ENXIO;
++=======
+ 	if (r)
+ 		return r->start;
+ 
+ 	return -ENXIO;
++>>>>>>> f1da567f1dc1 (driver core: platform: Add platform_get_irq_byname_optional())
+ }
+ 
+ /**
+  * platform_get_irq_byname - get an IRQ for a device by name
+  * @dev: platform device
+  * @name: IRQ name
+  *
+  * Get an IRQ like platform_get_irq(), but then by name rather then by index.
+  *
+  * Return: IRQ number on success, negative error number on failure.
+  */
+ int platform_get_irq_byname(struct platform_device *dev, const char *name)
+ {
+ 	int ret;
+ 
+ 	ret = __platform_get_irq_byname(dev, name);
+ 	if (ret < 0 && ret != -EPROBE_DEFER)
+ 		dev_err(&dev->dev, "IRQ %s not found\n", name);
+ 
+ 	return ret;
  }
  EXPORT_SYMBOL_GPL(platform_get_irq_byname);
  
* Unmerged path drivers/base/platform.c
diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index aad20a9031a0..a59e8e68e080 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -62,6 +62,8 @@ extern struct resource *platform_get_resource_byname(struct platform_device *,
 						     unsigned int,
 						     const char *);
 extern int platform_get_irq_byname(struct platform_device *, const char *);
+extern int platform_get_irq_byname_optional(struct platform_device *dev,
+					    const char *name);
 extern int platform_add_devices(struct platform_device **, int);
 
 struct platform_device_info {
