efi/libstub: Extend native protocol definitions with mixed_mode aliases

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ard Biesheuvel <ardb@kernel.org>
commit 1786e83011644e18732ed006413339d5323766e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1786e830.failed

In preparation of moving to a native vs. mixed mode split rather than a
32 vs. 64 bit split when it comes to invoking EFI firmware services,
update all the native protocol definitions and redefine them as unions
containing an anonymous struct for the native view and a struct called
'mixed_mode' describing the 32-bit view of the protocol when called from
64-bit code.

While at it, flesh out some PCI I/O member definitions that we will be
needing shortly.

	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
	Cc: Arvind Sankar <nivedita@alum.mit.edu>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: James Morse <james.morse@arm.com>
	Cc: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-efi@vger.kernel.org
Link: https://lkml.kernel.org/r/20191224151025.32482-9-ardb@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 1786e83011644e18732ed006413339d5323766e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/efi.h
diff --cc include/linux/efi.h
index 2452f36aa11e,5a220af263b1..000000000000
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@@ -900,29 -1019,64 +1007,72 @@@ typedef struct 
  	u64 flush;
  } efi_file_handle_64_t;
  
- typedef struct _efi_file_handle {
- 	u64 revision;
- 	efi_status_t (*open)(struct _efi_file_handle *,
- 			     struct _efi_file_handle **,
- 			     efi_char16_t *, u64, u64);
- 	efi_status_t (*close)(struct _efi_file_handle *);
- 	void *delete;
- 	efi_status_t (*read)(struct _efi_file_handle *, unsigned long *,
- 			     void *);
- 	void *write;
- 	void *get_position;
- 	void *set_position;
- 	efi_status_t (*get_info)(struct _efi_file_handle *, efi_guid_t *,
- 			unsigned long *, void *);
- 	void *set_info;
- 	void *flush;
- } efi_file_handle_t;
+ typedef union efi_file_handle efi_file_handle_t;
+ 
+ union efi_file_handle {
+ 	struct {
+ 		u64 revision;
+ 		efi_status_t (*open)(efi_file_handle_t *,
+ 				     efi_file_handle_t **,
+ 				     efi_char16_t *, u64, u64);
+ 		efi_status_t (*close)(efi_file_handle_t *);
+ 		void *delete;
+ 		efi_status_t (*read)(efi_file_handle_t *, unsigned long *,
+ 				     void *);
+ 		void *write;
+ 		void *get_position;
+ 		void *set_position;
+ 		efi_status_t (*get_info)(efi_file_handle_t *, efi_guid_t *,
+ 				unsigned long *, void *);
+ 		void *set_info;
+ 		void *flush;
+ 	};
+ 	struct {
+ 		u64 revision;
+ 		u32 open;
+ 		u32 close;
+ 		u32 delete;
+ 		u32 read;
+ 		u32 write;
+ 		u32 get_position;
+ 		u32 set_position;
+ 		u32 get_info;
+ 		u32 set_info;
+ 		u32 flush;
+ 	} mixed_mode;
+ };
  
++<<<<<<< HEAD
 +typedef struct _efi_file_io_interface {
 +	u64 revision;
 +	int (*open_volume)(struct _efi_file_io_interface *,
 +			   efi_file_handle_t **);
 +} efi_file_io_interface_t;
++=======
+ typedef struct {
+ 	u64 revision;
+ 	u32 open_volume;
+ } efi_file_io_interface_32_t;
+ 
+ typedef struct {
+ 	u64 revision;
+ 	u64 open_volume;
+ } efi_file_io_interface_64_t;
+ 
+ typedef union efi_file_io_interface efi_file_io_interface_t;
+ 
+ union efi_file_io_interface {
+ 	struct {
+ 		u64 revision;
+ 		int (*open_volume)(efi_file_io_interface_t *,
+ 				   efi_file_handle_t **);
+ 	};
+ 	struct {
+ 		u64 revision;
+ 		u32 open_volume;
+ 	} mixed_mode;
+ } ;
++>>>>>>> 1786e8301164 (efi/libstub: Extend native protocol definitions with mixed_mode aliases)
  
  #define EFI_FILE_MODE_READ	0x0000000000000001
  #define EFI_FILE_MODE_WRITE	0x0000000000000002
diff --git a/arch/x86/boot/compressed/eboot.h b/arch/x86/boot/compressed/eboot.h
index 8297387c4676..26f1f2635f64 100644
--- a/arch/x86/boot/compressed/eboot.h
+++ b/arch/x86/boot/compressed/eboot.h
@@ -24,10 +24,17 @@ typedef struct {
 	u64 blt;
 } efi_uga_draw_protocol_64_t;
 
-typedef struct {
-	void *get_mode;
-	void *set_mode;
-	void *blt;
+typedef union {
+	struct {
+		void *get_mode;
+		void *set_mode;
+		void *blt;
+	};
+	struct {
+		u32 get_mode;
+		u32 set_mode;
+		u32 blt;
+	} mixed_mode;
 } efi_uga_draw_protocol_t;
 
 #endif /* BOOT_COMPRESSED_EBOOT_H */
diff --git a/drivers/firmware/efi/libstub/arm-stub.c b/drivers/firmware/efi/libstub/arm-stub.c
index 1acf0fe72546..54b8b917cc39 100644
--- a/drivers/firmware/efi/libstub/arm-stub.c
+++ b/drivers/firmware/efi/libstub/arm-stub.c
@@ -68,9 +68,9 @@ efi_status_t efi_open_volume(efi_system_table_t *sys_table_arg,
 void efi_char16_printk(efi_system_table_t *sys_table_arg,
 			      efi_char16_t *str)
 {
-	struct efi_simple_text_output_protocol *out;
+	efi_simple_text_output_protocol_t *out;
 
-	out = (struct efi_simple_text_output_protocol *)sys_table_arg->con_out;
+	out = (efi_simple_text_output_protocol_t *)sys_table_arg->con_out;
 	out->output_string(out, str);
 }
 
diff --git a/drivers/firmware/efi/libstub/random.c b/drivers/firmware/efi/libstub/random.c
index e03cd6eb7a04..1b0cadf3d279 100644
--- a/drivers/firmware/efi/libstub/random.c
+++ b/drivers/firmware/efi/libstub/random.c
@@ -13,7 +13,7 @@
 
 #include "efistub.h"
 
-typedef struct efi_rng_protocol efi_rng_protocol_t;
+typedef union efi_rng_protocol efi_rng_protocol_t;
 
 typedef struct {
 	u32 get_info;
@@ -25,11 +25,17 @@ typedef struct {
 	u64 get_rng;
 } efi_rng_protocol_64_t;
 
-struct efi_rng_protocol {
-	efi_status_t (*get_info)(struct efi_rng_protocol *,
-				 unsigned long *, efi_guid_t *);
-	efi_status_t (*get_rng)(struct efi_rng_protocol *,
-				efi_guid_t *, unsigned long, u8 *out);
+union efi_rng_protocol {
+	struct {
+		efi_status_t (*get_info)(efi_rng_protocol_t *,
+					 unsigned long *, efi_guid_t *);
+		efi_status_t (*get_rng)(efi_rng_protocol_t *,
+					efi_guid_t *, unsigned long, u8 *out);
+	};
+	struct {
+		u32 get_info;
+		u32 get_rng;
+	} mixed_mode;
 };
 
 efi_status_t efi_get_random_bytes(efi_system_table_t *sys_table_arg,
@@ -37,7 +43,7 @@ efi_status_t efi_get_random_bytes(efi_system_table_t *sys_table_arg,
 {
 	efi_guid_t rng_proto = EFI_RNG_PROTOCOL_GUID;
 	efi_status_t status;
-	struct efi_rng_protocol *rng = NULL;
+	efi_rng_protocol_t *rng = NULL;
 
 	status = efi_call_early(locate_protocol, &rng_proto, NULL,
 				(void **)&rng);
@@ -162,7 +168,7 @@ efi_status_t efi_random_get_seed(efi_system_table_t *sys_table_arg)
 	efi_guid_t rng_proto = EFI_RNG_PROTOCOL_GUID;
 	efi_guid_t rng_algo_raw = EFI_RNG_ALGORITHM_RAW;
 	efi_guid_t rng_table_guid = LINUX_EFI_RANDOM_SEED_TABLE_GUID;
-	struct efi_rng_protocol *rng = NULL;
+	efi_rng_protocol_t *rng = NULL;
 	struct linux_efi_random_seed *seed = NULL;
 	efi_status_t status;
 
* Unmerged path include/linux/efi.h
