net: atlantic: loopback tests via private flags

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Igor Russkikh <irusskikh@marvell.com>
commit ea4b4d7fc1065165874c27b8add252e04d104137
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ea4b4d7f.failed

Here we add a number of ethtool private flags
to allow enabling various loopbacks on HW.

Thats useful for verification and bringup works.

	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ea4b4d7fc1065165874c27b8add252e04d104137)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/networking/device_drivers/aquantia/atlantic.txt
#	drivers/net/ethernet/aquantia/atlantic/aq_hw.h
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_hw.h
index 5c8995ae94b5,cc70c606b6ef..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
@@@ -113,11 -114,28 +113,25 @@@ struct aq_stats_s 
  #define AQ_HW_MEDIA_TYPE_TP    1U
  #define AQ_HW_MEDIA_TYPE_FIBRE 2U
  
 -#define AQ_HW_TXD_MULTIPLE 8U
 -#define AQ_HW_RXD_MULTIPLE 8U
 -
  #define AQ_HW_MULTICAST_ADDRESS_MAX     32U
  
 -#define AQ_HW_LED_BLINK    0x2U
 -#define AQ_HW_LED_DEFAULT  0x0U
 +#define AQ_HW_TXD_MULTIPLE 8U
 +#define AQ_HW_RXD_MULTIPLE 8U
  
+ enum aq_priv_flags {
+ 	AQ_HW_LOOPBACK_DMA_SYS,
+ 	AQ_HW_LOOPBACK_PKT_SYS,
+ 	AQ_HW_LOOPBACK_DMA_NET,
+ 	AQ_HW_LOOPBACK_PHYINT_SYS,
+ 	AQ_HW_LOOPBACK_PHYEXT_SYS,
+ };
+ 
+ #define AQ_HW_LOOPBACK_MASK	(BIT(AQ_HW_LOOPBACK_DMA_SYS) |\
+ 				 BIT(AQ_HW_LOOPBACK_PKT_SYS) |\
+ 				 BIT(AQ_HW_LOOPBACK_DMA_NET) |\
+ 				 BIT(AQ_HW_LOOPBACK_PHYINT_SYS) |\
+ 				 BIT(AQ_HW_LOOPBACK_PHYEXT_SYS))
+ 
  struct aq_hw_s {
  	atomic_t flags;
  	u8 rbl_enabled:1;
@@@ -238,7 -259,43 +252,9 @@@ struct aq_hw_ops 
  	int (*hw_set_offload)(struct aq_hw_s *self,
  			      struct aq_nic_cfg_s *aq_nic_cfg);
  
 -	int (*hw_tx_tc_mode_get)(struct aq_hw_s *self, u32 *tc_mode);
 -
 -	int (*hw_rx_tc_mode_get)(struct aq_hw_s *self, u32 *tc_mode);
 -
 -	int (*hw_ring_hwts_rx_fill)(struct aq_hw_s *self,
 -				    struct aq_ring_s *aq_ring);
 -
 -	int (*hw_ring_hwts_rx_receive)(struct aq_hw_s *self,
 -				       struct aq_ring_s *ring);
 -
 -	void (*hw_get_ptp_ts)(struct aq_hw_s *self, u64 *stamp);
 -
 -	int (*hw_adj_clock_freq)(struct aq_hw_s *self, s32 delta);
 -
 -	int (*hw_adj_sys_clock)(struct aq_hw_s *self, s64 delta);
 -
 -	int (*hw_set_sys_clock)(struct aq_hw_s *self, u64 time, u64 ts);
 -
 -	int (*hw_ts_to_sys_clock)(struct aq_hw_s *self, u64 ts, u64 *time);
 -
 -	int (*hw_gpio_pulse)(struct aq_hw_s *self, u32 index, u64 start,
 -			     u32 period);
 -
 -	int (*hw_extts_gpio_enable)(struct aq_hw_s *self, u32 index,
 -				    u32 enable);
 -
 -	int (*hw_get_sync_ts)(struct aq_hw_s *self, u64 *ts);
 -
 -	u16 (*rx_extract_ts)(struct aq_hw_s *self, u8 *p, unsigned int len,
 -			     u64 *timestamp);
 -
 -	int (*extract_hwts)(struct aq_hw_s *self, u8 *p, unsigned int len,
 -			    u64 *timestamp);
 -
  	int (*hw_set_fc)(struct aq_hw_s *self, u32 fc, u32 tc);
+ 
+ 	int (*hw_set_loopback)(struct aq_hw_s *self, u32 mode, bool enable);
  };
  
  struct aq_fw_ops {
@@@ -267,6 -324,10 +283,13 @@@
  
  	int (*set_flow_control)(struct aq_hw_s *self);
  
++<<<<<<< HEAD
++=======
+ 	int (*led_control)(struct aq_hw_s *self, u32 mode);
+ 
+ 	int (*set_phyloopback)(struct aq_hw_s *self, u32 mode, bool enable);
+ 
++>>>>>>> ea4b4d7fc106 (net: atlantic: loopback tests via private flags)
  	int (*set_power)(struct aq_hw_s *self, unsigned int power_state,
  			 u8 *mac);
  
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.h
index f6d04351e098,bb4957a31498..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
@@@ -147,8 -159,10 +148,12 @@@ int aq_nic_set_link_ksettings(struct aq
  			      const struct ethtool_link_ksettings *cmd);
  struct aq_nic_cfg_s *aq_nic_get_cfg(struct aq_nic_s *self);
  u32 aq_nic_get_fw_version(struct aq_nic_s *self);
++<<<<<<< HEAD
 +int aq_nic_change_pm_state(struct aq_nic_s *self, pm_message_t *pm_msg);
++=======
+ int aq_nic_set_loopback(struct aq_nic_s *self);
++>>>>>>> ea4b4d7fc106 (net: atlantic: loopback tests via private flags)
  int aq_nic_update_interrupt_moderation_settings(struct aq_nic_s *self);
  void aq_nic_shutdown(struct aq_nic_s *self);
 -u8 aq_nic_reserve_filter(struct aq_nic_s *self, enum aq_rx_filter_type type);
 -void aq_nic_release_filter(struct aq_nic_s *self, enum aq_rx_filter_type type,
 -			   u32 location);
 +
  #endif /* AQ_NIC_H */
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index 42fdeb412b12,1165689af37d..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -1150,6 -1487,27 +1174,32 @@@ const struct aq_hw_ops hw_atl_ops_b0 = 
  	.hw_get_regs                 = hw_atl_utils_hw_get_regs,
  	.hw_get_hw_stats             = hw_atl_utils_get_hw_stats,
  	.hw_get_fw_version           = hw_atl_utils_get_fw_version,
++<<<<<<< HEAD
 +	.hw_set_offload              = hw_atl_b0_hw_offload_set,
 +	.hw_set_fc                   = hw_atl_b0_set_fc,
++=======
+ 
+ 	.hw_tx_tc_mode_get       = hw_atl_b0_tx_tc_mode_get,
+ 	.hw_rx_tc_mode_get       = hw_atl_b0_rx_tc_mode_get,
+ 
+ 	.hw_ring_hwts_rx_fill        = hw_atl_b0_hw_ring_hwts_rx_fill,
+ 	.hw_ring_hwts_rx_receive     = hw_atl_b0_hw_ring_hwts_rx_receive,
+ 
+ 	.hw_get_ptp_ts           = hw_atl_b0_get_ptp_ts,
+ 	.hw_adj_sys_clock        = hw_atl_b0_adj_sys_clock,
+ 	.hw_set_sys_clock        = hw_atl_b0_set_sys_clock,
+ 	.hw_ts_to_sys_clock      = hw_atl_b0_ts_to_sys_clock,
+ 	.hw_adj_clock_freq       = hw_atl_b0_adj_clock_freq,
+ 	.hw_gpio_pulse           = hw_atl_b0_gpio_pulse,
+ 	.hw_extts_gpio_enable    = hw_atl_b0_extts_gpio_enable,
+ 	.hw_get_sync_ts          = hw_atl_b0_get_sync_ts,
+ 	.rx_extract_ts           = hw_atl_b0_rx_extract_ts,
+ 	.extract_hwts            = hw_atl_b0_extract_hwts,
+ 	.hw_set_offload          = hw_atl_b0_hw_offload_set,
+ 	.hw_get_hw_stats         = hw_atl_utils_get_hw_stats,
+ 	.hw_get_fw_version       = hw_atl_utils_get_fw_version,
+ 	.hw_set_offload          = hw_atl_b0_hw_offload_set,
+ 	.hw_set_loopback         = hw_atl_b0_set_loopback,
+ 	.hw_set_fc               = hw_atl_b0_set_fc,
++>>>>>>> ea4b4d7fc106 (net: atlantic: loopback tests via private flags)
  };
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
index 103608a7664f,feef2b0177b2..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
@@@ -50,6 -55,9 +53,12 @@@
  #define HAL_ATLANTIC_WOL_FILTERS_COUNT   8
  #define HAL_ATLANTIC_UTILS_FW2X_MSG_WOL  0x0E
  
++<<<<<<< HEAD
++=======
+ #define HW_ATL_FW_VER_LED                0x03010026U
+ #define HW_ATL_FW_VER_MEDIA_CONTROL      0x0301005aU
+ 
++>>>>>>> ea4b4d7fc106 (net: atlantic: loopback tests via private flags)
  struct __packed fw2x_msg_wol_pattern {
  	u8 mask[16];
  	u32 crc;
@@@ -537,19 -599,23 +573,33 @@@ static u32 aq_fw2x_state2_get(struct aq
  }
  
  const struct aq_fw_ops aq_fw_2x_ops = {
 -	.init               = aq_fw2x_init,
 -	.deinit             = aq_fw2x_deinit,
 -	.reset              = NULL,
 -	.renegotiate        = aq_fw2x_renegotiate,
 -	.get_mac_permanent  = aq_fw2x_get_mac_permanent,
 -	.set_link_speed     = aq_fw2x_set_link_speed,
 -	.set_state          = aq_fw2x_set_state,
 +	.init = aq_fw2x_init,
 +	.deinit = aq_fw2x_deinit,
 +	.reset = NULL,
 +	.renegotiate = aq_fw2x_renegotiate,
 +	.get_mac_permanent = aq_fw2x_get_mac_permanent,
 +	.set_link_speed = aq_fw2x_set_link_speed,
 +	.set_state = aq_fw2x_set_state,
  	.update_link_status = aq_fw2x_update_link_status,
++<<<<<<< HEAD
 +	.update_stats = aq_fw2x_update_stats,
 +	.get_phy_temp = aq_fw2x_get_phy_temp,
 +	.set_power = aq_fw2x_set_power,
 +	.set_eee_rate = aq_fw2x_set_eee_rate,
 +	.get_eee_rate = aq_fw2x_get_eee_rate,
 +	.set_flow_control = aq_fw2x_set_flow_control,
 +	.get_flow_control = aq_fw2x_get_flow_control
++=======
+ 	.update_stats       = aq_fw2x_update_stats,
+ 	.get_phy_temp       = aq_fw2x_get_phy_temp,
+ 	.set_power          = aq_fw2x_set_power,
+ 	.set_eee_rate       = aq_fw2x_set_eee_rate,
+ 	.get_eee_rate       = aq_fw2x_get_eee_rate,
+ 	.set_flow_control   = aq_fw2x_set_flow_control,
+ 	.get_flow_control   = aq_fw2x_get_flow_control,
+ 	.send_fw_request    = aq_fw2x_send_fw_request,
+ 	.enable_ptp         = aq_fw3x_enable_ptp,
+ 	.led_control        = aq_fw2x_led_control,
+ 	.set_phyloopback    = aq_fw2x_set_phyloopback,
++>>>>>>> ea4b4d7fc106 (net: atlantic: loopback tests via private flags)
  };
* Unmerged path Documentation/networking/device_drivers/aquantia/atlantic.txt
* Unmerged path Documentation/networking/device_drivers/aquantia/atlantic.txt
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
index 3b9a73191efa..ee5d73660731 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
@@ -92,6 +92,14 @@ static const char aq_ethtool_queue_stat_names[][ETH_GSTRING_LEN] = {
 	"Queue[%d] InErrors",
 };
 
+static const char aq_ethtool_priv_flag_names[][ETH_GSTRING_LEN] = {
+	"DMASystemLoopback",
+	"PKTSystemLoopback",
+	"DMANetworkLoopback",
+	"PHYInternalLoopback",
+	"PHYExternalLoopback",
+};
+
 static void aq_ethtool_stats(struct net_device *ndev,
 			     struct ethtool_stats *stats, u64 *data)
 {
@@ -137,7 +145,8 @@ static void aq_ethtool_get_strings(struct net_device *ndev,
 	struct aq_nic_cfg_s *cfg = aq_nic_get_cfg(aq_nic);
 	u8 *p = data;
 
-	if (stringset == ETH_SS_STATS) {
+	switch (stringset) {
+	case ETH_SS_STATS:
 		memcpy(p, aq_ethtool_stat_names,
 		       sizeof(aq_ethtool_stat_names));
 		p = p + sizeof(aq_ethtool_stat_names);
@@ -150,6 +159,11 @@ static void aq_ethtool_get_strings(struct net_device *ndev,
 				p += ETH_GSTRING_LEN;
 			}
 		}
+		break;
+	case ETH_SS_PRIV_FLAGS:
+		memcpy(p, aq_ethtool_priv_flag_names,
+		       sizeof(aq_ethtool_priv_flag_names));
+		break;
 	}
 }
 
@@ -164,6 +178,9 @@ static int aq_ethtool_get_sset_count(struct net_device *ndev, int stringset)
 		ret = ARRAY_SIZE(aq_ethtool_stat_names) +
 			cfg->vecs * ARRAY_SIZE(aq_ethtool_queue_stat_names);
 		break;
+	case ETH_SS_PRIV_FLAGS:
+		ret = ARRAY_SIZE(aq_ethtool_priv_flag_names);
+		break;
 	default:
 		ret = -EOPNOTSUPP;
 	}
@@ -594,6 +611,40 @@ static void aq_set_msg_level(struct net_device *ndev, u32 data)
 	aq_nic->msg_enable = data;
 }
 
+u32 aq_ethtool_get_priv_flags(struct net_device *ndev)
+{
+	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+
+	return aq_nic->aq_nic_cfg.priv_flags;
+}
+
+int aq_ethtool_set_priv_flags(struct net_device *ndev, u32 flags)
+{
+	struct aq_nic_s *aq_nic = netdev_priv(ndev);
+	struct aq_nic_cfg_s *cfg;
+	u32 priv_flags;
+
+	cfg = aq_nic_get_cfg(aq_nic);
+	priv_flags = cfg->priv_flags;
+
+	if (flags & ~AQ_PRIV_FLAGS_MASK)
+		return -EOPNOTSUPP;
+
+	cfg->priv_flags = flags;
+
+	if ((priv_flags ^ flags) & BIT(AQ_HW_LOOPBACK_DMA_NET)) {
+		if (netif_running(ndev)) {
+			dev_close(ndev);
+
+			dev_open(ndev, NULL);
+		}
+	} else if ((priv_flags ^ flags) & AQ_HW_LOOPBACK_MASK) {
+		aq_nic_set_loopback(aq_nic);
+	}
+
+	return 0;
+}
+
 const struct ethtool_ops aq_ethtool_ops = {
 	.get_link            = aq_ethtool_get_link,
 	.get_regs_len        = aq_ethtool_get_regs_len,
@@ -619,6 +670,8 @@ const struct ethtool_ops aq_ethtool_ops = {
 	.set_msglevel        = aq_set_msg_level,
 	.get_sset_count      = aq_ethtool_get_sset_count,
 	.get_ethtool_stats   = aq_ethtool_stats,
+	.get_priv_flags      = aq_ethtool_get_priv_flags,
+	.set_priv_flags      = aq_ethtool_set_priv_flags,
 	.get_link_ksettings  = aq_ethtool_get_link_ksettings,
 	.set_link_ksettings  = aq_ethtool_set_link_ksettings,
 	.get_coalesce	     = aq_ethtool_get_coalesce,
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.h b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.h
index 21c126eeb5eb..a69d608718e0 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.h
@@ -15,5 +15,6 @@
 #include "aq_common.h"
 
 extern const struct ethtool_ops aq_ethtool_ops;
+#define AQ_PRIV_FLAGS_MASK   (AQ_HW_LOOPBACK_MASK)
 
 #endif /* AQ_ETHTOOL_H */
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_hw.h
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index a0d4f402867f..7208a4c8a664 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@ -372,6 +372,8 @@ int aq_nic_start(struct aq_nic_s *self)
 
 	INIT_WORK(&self->service_task, aq_nic_service_task);
 
+	aq_nic_set_loopback(self);
+
 	timer_setup(&self->service_timer, aq_nic_service_timer_cb, 0);
 	aq_nic_service_timer_cb(&self->service_timer);
 
@@ -577,6 +579,11 @@ int aq_nic_xmit(struct aq_nic_s *self, struct sk_buff *skb)
 
 	aq_ring_update_queue_state(ring);
 
+	if (self->aq_nic_cfg.priv_flags & BIT(AQ_HW_LOOPBACK_DMA_NET)) {
+		err = NETDEV_TX_BUSY;
+		goto err_exit;
+	}
+
 	/* Above status update may stop the queue. Check this. */
 	if (__netif_subqueue_stopped(self->ndev, ring->idx)) {
 		err = NETDEV_TX_BUSY;
@@ -925,6 +932,44 @@ u32 aq_nic_get_fw_version(struct aq_nic_s *self)
 	return fw_version;
 }
 
+int aq_nic_set_loopback(struct aq_nic_s *self)
+{
+	struct aq_nic_cfg_s *cfg = &self->aq_nic_cfg;
+
+	if (!self->aq_hw_ops->hw_set_loopback ||
+	    !self->aq_fw_ops->set_phyloopback)
+		return -ENOTSUPP;
+
+	mutex_lock(&self->fwreq_mutex);
+	self->aq_hw_ops->hw_set_loopback(self->aq_hw,
+					 AQ_HW_LOOPBACK_DMA_SYS,
+					 !!(cfg->priv_flags &
+					    BIT(AQ_HW_LOOPBACK_DMA_SYS)));
+
+	self->aq_hw_ops->hw_set_loopback(self->aq_hw,
+					 AQ_HW_LOOPBACK_PKT_SYS,
+					 !!(cfg->priv_flags &
+					    BIT(AQ_HW_LOOPBACK_PKT_SYS)));
+
+	self->aq_hw_ops->hw_set_loopback(self->aq_hw,
+					 AQ_HW_LOOPBACK_DMA_NET,
+					 !!(cfg->priv_flags &
+					    BIT(AQ_HW_LOOPBACK_DMA_NET)));
+
+	self->aq_fw_ops->set_phyloopback(self->aq_hw,
+					 AQ_HW_LOOPBACK_PHYINT_SYS,
+					 !!(cfg->priv_flags &
+					    BIT(AQ_HW_LOOPBACK_PHYINT_SYS)));
+
+	self->aq_fw_ops->set_phyloopback(self->aq_hw,
+					 AQ_HW_LOOPBACK_PHYEXT_SYS,
+					 !!(cfg->priv_flags &
+					    BIT(AQ_HW_LOOPBACK_PHYEXT_SYS)));
+	mutex_unlock(&self->fwreq_mutex);
+
+	return 0;
+}
+
 int aq_nic_stop(struct aq_nic_s *self)
 {
 	struct aq_vec_s *aq_vec = NULL;
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c
index 961b9b69649f..50d2644bdcb6 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c
@@ -566,6 +566,13 @@ void hw_atl_rpb_dma_sys_lbk_set(struct aq_hw_s *aq_hw, u32 dma_sys_lbk)
 			    HW_ATL_RPB_DMA_SYS_LBK_SHIFT, dma_sys_lbk);
 }
 
+void hw_atl_rpb_dma_net_lbk_set(struct aq_hw_s *aq_hw, u32 dma_net_lbk)
+{
+	aq_hw_write_reg_bit(aq_hw, HW_ATL_RPB_DMA_NET_LBK_ADR,
+			    HW_ATL_RPB_DMA_NET_LBK_MSK,
+			    HW_ATL_RPB_DMA_NET_LBK_SHIFT, dma_net_lbk);
+}
+
 void hw_atl_rpb_rpf_rx_traf_class_mode_set(struct aq_hw_s *aq_hw,
 					   u32 rx_traf_class_mode)
 {
@@ -1330,7 +1337,26 @@ void hw_atl_tpb_tx_dma_sys_lbk_en_set(struct aq_hw_s *aq_hw, u32 tx_dma_sys_lbk_
 			    tx_dma_sys_lbk_en);
 }
 
+void hw_atl_tpb_tx_dma_net_lbk_en_set(struct aq_hw_s *aq_hw,
+				      u32 tx_dma_net_lbk_en)
+{
+	aq_hw_write_reg_bit(aq_hw, HW_ATL_TPB_DMA_NET_LBK_ADR,
+			    HW_ATL_TPB_DMA_NET_LBK_MSK,
+			    HW_ATL_TPB_DMA_NET_LBK_SHIFT,
+			    tx_dma_net_lbk_en);
+}
+
+void hw_atl_tpb_tx_tx_clk_gate_en_set(struct aq_hw_s *aq_hw,
+				      u32 tx_clk_gate_en)
+{
+	aq_hw_write_reg_bit(aq_hw, HW_ATL_TPB_TX_CLK_GATE_EN_ADR,
+			    HW_ATL_TPB_TX_CLK_GATE_EN_MSK,
+			    HW_ATL_TPB_TX_CLK_GATE_EN_SHIFT,
+			    tx_clk_gate_en);
+}
+
 void hw_atl_tpb_tx_pkt_buff_size_per_tc_set(struct aq_hw_s *aq_hw,
+
 					    u32 tx_pkt_buff_size_per_tc, u32 buffer)
 {
 	aq_hw_write_reg_bit(aq_hw, HW_ATL_TPB_TXBBUF_SIZE_ADR(buffer),
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h
index 1dc201492ec7..e307de9903de 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h
@@ -291,6 +291,9 @@ void hw_atl_reg_glb_cpu_scratch_scp_set(struct aq_hw_s *aq_hw,
 /* set dma system loopback */
 void hw_atl_rpb_dma_sys_lbk_set(struct aq_hw_s *aq_hw, u32 dma_sys_lbk);
 
+/* set dma network loopback */
+void hw_atl_rpb_dma_net_lbk_set(struct aq_hw_s *aq_hw, u32 dma_net_lbk);
+
 /* set rx traffic class mode */
 void hw_atl_rpb_rpf_rx_traf_class_mode_set(struct aq_hw_s *aq_hw,
 					   u32 rx_traf_class_mode);
@@ -626,6 +629,14 @@ void hw_atl_tpb_tx_buff_lo_threshold_per_tc_set(struct aq_hw_s *aq_hw,
 /* set tx dma system loopback enable */
 void hw_atl_tpb_tx_dma_sys_lbk_en_set(struct aq_hw_s *aq_hw, u32 tx_dma_sys_lbk_en);
 
+/* set tx dma network loopback enable */
+void hw_atl_tpb_tx_dma_net_lbk_en_set(struct aq_hw_s *aq_hw,
+				      u32 tx_dma_net_lbk_en);
+
+/* set tx clock gating enable */
+void hw_atl_tpb_tx_tx_clk_gate_en_set(struct aq_hw_s *aq_hw,
+				      u32 tx_clk_gate_en);
+
 /* set tx packet buffer size (per tc) */
 void hw_atl_tpb_tx_pkt_buff_size_per_tc_set(struct aq_hw_s *aq_hw,
 					    u32 tx_pkt_buff_size_per_tc,
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh_internal.h b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh_internal.h
index 5ddaed96cf74..9bbcf69549a1 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh_internal.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh_internal.h
@@ -557,6 +557,24 @@
 /* default value of bitfield dma_sys_loopback */
 #define HW_ATL_RPB_DMA_SYS_LBK_DEFAULT 0x0
 
+/* rx dma_net_loopback bitfield definitions
+ * preprocessor definitions for the bitfield "dma_net_loopback".
+ * port="pif_rpb_dma_net_lbk_i"
+ */
+
+/* register address for bitfield dma_net_loopback */
+#define HW_ATL_RPB_DMA_NET_LBK_ADR 0x00005000
+/* bitmask for bitfield dma_net_loopback */
+#define HW_ATL_RPB_DMA_NET_LBK_MSK 0x00000010
+/* inverted bitmask for bitfield dma_net_loopback */
+#define HW_ATL_RPB_DMA_NET_LBK_MSKN 0xffffffef
+/* lower bit position of bitfield dma_net_loopback */
+#define HW_ATL_RPB_DMA_NET_LBK_SHIFT 4
+/* width of bitfield dma_net_loopback */
+#define HW_ATL_RPB_DMA_NET_LBK_WIDTH 1
+/* default value of bitfield dma_net_loopback */
+#define HW_ATL_RPB_DMA_NET_LBK_DEFAULT 0x0
+
 /* rx rx_tc_mode bitfield definitions
  * preprocessor definitions for the bitfield "rx_tc_mode".
  * port="pif_rpb_rx_tc_mode_i,pif_rpf_rx_tc_mode_i"
@@ -2064,6 +2082,24 @@
 /* default value of bitfield dma_sys_loopback */
 #define HW_ATL_TPB_DMA_SYS_LBK_DEFAULT 0x0
 
+/* tx dma_net_loopback bitfield definitions
+ * preprocessor definitions for the bitfield "dma_net_loopback".
+ * port="pif_tpb_dma_net_lbk_i"
+ */
+
+/* register address for bitfield dma_net_loopback */
+#define HW_ATL_TPB_DMA_NET_LBK_ADR 0x00007000
+/* bitmask for bitfield dma_net_loopback */
+#define HW_ATL_TPB_DMA_NET_LBK_MSK 0x00000010
+/* inverted bitmask for bitfield dma_net_loopback */
+#define HW_ATL_TPB_DMA_NET_LBK_MSKN 0xffffffef
+/* lower bit position of bitfield dma_net_loopback */
+#define HW_ATL_TPB_DMA_NET_LBK_SHIFT 4
+/* width of bitfield dma_net_loopback */
+#define HW_ATL_TPB_DMA_NET_LBK_WIDTH 1
+/* default value of bitfield dma_net_loopback */
+#define HW_ATL_TPB_DMA_NET_LBK_DEFAULT 0x0
+
 /* tx tx{b}_buf_size[7:0] bitfield definitions
  * preprocessor definitions for the bitfield "tx{b}_buf_size[7:0]".
  * parameter: buffer {b} | stride size 0x10 | range [0, 7]
@@ -2101,6 +2137,24 @@
 /* default value of bitfield tx_scp_ins_en */
 #define HW_ATL_TPB_TX_SCP_INS_EN_DEFAULT 0x0
 
+/* tx tx_clk_gate_en bitfield definitions
+ * preprocessor definitions for the bitfield "tx_clk_gate_en".
+ * port="pif_tpb_clk_gate_en_i"
+ */
+
+/* register address for bitfield tx_clk_gate_en */
+#define HW_ATL_TPB_TX_CLK_GATE_EN_ADR 0x00007900
+/* bitmask for bitfield tx_clk_gate_en */
+#define HW_ATL_TPB_TX_CLK_GATE_EN_MSK 0x00000010
+/* inverted bitmask for bitfield tx_clk_gate_en */
+#define HW_ATL_TPB_TX_CLK_GATE_EN_MSKN 0xffffffef
+/* lower bit position of bitfield tx_clk_gate_en */
+#define HW_ATL_TPB_TX_CLK_GATE_EN_SHIFT 4
+/* width of bitfield tx_clk_gate_en */
+#define HW_ATL_TPB_TX_CLK_GATE_EN_WIDTH 1
+/* default value of bitfield tx_clk_gate_en */
+#define HW_ATL_TPB_TX_CLK_GATE_EN_DEFAULT 0x1
+
 /* tx ipv4_chk_en bitfield definitions
  * preprocessor definitions for the bitfield "ipv4_chk_en".
  * port="pif_tpo_ipv4_chk_en_i"
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils_fw2x.c
