nvme-rdma: avoid repeated request completion

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Sagi Grimberg <sagi@grimberg.me>
commit fdf58e02adecbef4c7cbb2073d8ea225e6fd5f26
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/fdf58e02.failed

The request may be executed asynchronously, and rq->state may be
changed to IDLE. To avoid repeated request completion, only
MQ_RQ_COMPLETE of rq->state is checked in nvme_rdma_complete_timed_out.
It is not safe, so need adding check IDLE for rq->state.

	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Chao Leng <lengchao@huawei.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit fdf58e02adecbef4c7cbb2073d8ea225e6fd5f26)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/rdma.c
diff --cc drivers/nvme/host/rdma.c
index b3e2b13b46fe,75d071d34319..000000000000
--- a/drivers/nvme/host/rdma.c
+++ b/drivers/nvme/host/rdma.c
@@@ -1969,6 -1969,18 +1969,21 @@@ static int nvme_rdma_cm_handler(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void nvme_rdma_complete_timed_out(struct request *rq)
+ {
+ 	struct nvme_rdma_request *req = blk_mq_rq_to_pdu(rq);
+ 	struct nvme_rdma_queue *queue = req->queue;
+ 
+ 	nvme_rdma_stop_queue(queue);
+ 	if (blk_mq_request_started(rq) && !blk_mq_request_completed(rq)) {
+ 		nvme_req(rq)->status = NVME_SC_HOST_ABORTED_CMD;
+ 		blk_mq_complete_request(rq);
+ 	}
+ }
+ 
++>>>>>>> fdf58e02adec (nvme-rdma: avoid repeated request completion)
  static enum blk_eh_timer_return
  nvme_rdma_timeout(struct request *rq, bool reserved)
  {
* Unmerged path drivers/nvme/host/rdma.c
