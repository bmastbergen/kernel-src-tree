net: atlantic: A2 ingress / egress hw configuration

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Igor Russkikh <irusskikh@marvell.com>
commit 43c670c8e48a1817ae4b64683d7d65cad5bb0502
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/43c670c8.failed

Chip generations are mostly compatible register-wise, but there are still
some differences. Therefore we've made some of first generation (A1) code
non-static to re-use it where possible.

Some pieces are A2 specific, in which case we redefine/extend such APIs.

	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 43c670c8e48a1817ae4b64683d7d65cad5bb0502)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_internal.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh_internal.h
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index b7e5ce0d7af5,cbb7a00d61b4..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -248,7 -268,10 +247,14 @@@ int hw_atl_b0_hw_offload_set(struct aq_
  	/* LSO offloads*/
  	hw_atl_tdm_large_send_offload_en_set(self, 0xFFFFFFFFU);
  
++<<<<<<< HEAD
 +/* LRO offloads */
++=======
+ 	/* Outer VLAN tag offload */
+ 	hw_atl_rpo_outer_vlan_tag_mode_set(self, 1U);
+ 
+ 	/* LRO offloads */
++>>>>>>> 43c670c8e48a (net: atlantic: A2 ingress / egress hw configuration)
  	{
  		unsigned int val = (8U < HW_ATL_B0_LRO_RXD_MAX) ? 0x3U :
  			((4U < HW_ATL_B0_LRO_RXD_MAX) ? 0x2U :
@@@ -359,11 -383,11 +365,11 @@@ static int hw_atl_b0_hw_init_rx_path(st
  	return aq_hw_err_from_flags(self);
  }
  
- static int hw_atl_b0_hw_mac_addr_set(struct aq_hw_s *self, u8 *mac_addr)
+ int hw_atl_b0_hw_mac_addr_set(struct aq_hw_s *self, u8 *mac_addr)
  {
 +	int err = 0;
  	unsigned int h = 0U;
  	unsigned int l = 0U;
 -	int err = 0;
  
  	if (!mac_addr) {
  		err = -EINVAL;
@@@ -453,17 -478,17 +459,15 @@@ err_exit
  	return err;
  }
  
- static int hw_atl_b0_hw_ring_tx_start(struct aq_hw_s *self,
- 				      struct aq_ring_s *ring)
+ int hw_atl_b0_hw_ring_tx_start(struct aq_hw_s *self, struct aq_ring_s *ring)
  {
  	hw_atl_tdm_tx_desc_en_set(self, 1, ring->idx);
 -
  	return aq_hw_err_from_flags(self);
  }
  
- static int hw_atl_b0_hw_ring_rx_start(struct aq_hw_s *self,
- 				      struct aq_ring_s *ring)
+ int hw_atl_b0_hw_ring_rx_start(struct aq_hw_s *self, struct aq_ring_s *ring)
  {
  	hw_atl_rdm_rx_desc_en_set(self, 1, ring->idx);
 -
  	return aq_hw_err_from_flags(self);
  }
  
@@@ -556,12 -595,13 +559,11 @@@ int hw_atl_b0_hw_ring_tx_xmit(struct aq
  	return aq_hw_err_from_flags(self);
  }
  
- static int hw_atl_b0_hw_ring_rx_init(struct aq_hw_s *self,
- 				     struct aq_ring_s *aq_ring,
- 				     struct aq_ring_param_s *aq_ring_param)
+ int hw_atl_b0_hw_ring_rx_init(struct aq_hw_s *self, struct aq_ring_s *aq_ring,
+ 			      struct aq_ring_param_s *aq_ring_param)
  {
 -	u32 dma_desc_addr_msw = (u32)(((u64)aq_ring->dx_ring_pa) >> 32);
 -	u32 vlan_rx_stripping = self->aq_nic_cfg->is_vlan_rx_strip;
  	u32 dma_desc_addr_lsw = (u32)aq_ring->dx_ring_pa;
 +	u32 dma_desc_addr_msw = (u32)(((u64)aq_ring->dx_ring_pa) >> 32);
  
  	hw_atl_rdm_rx_desc_en_set(self, false, aq_ring->idx);
  
@@@ -597,12 -638,11 +599,11 @@@
  	return aq_hw_err_from_flags(self);
  }
  
- static int hw_atl_b0_hw_ring_tx_init(struct aq_hw_s *self,
- 				     struct aq_ring_s *aq_ring,
- 				     struct aq_ring_param_s *aq_ring_param)
+ int hw_atl_b0_hw_ring_tx_init(struct aq_hw_s *self, struct aq_ring_s *aq_ring,
+ 			      struct aq_ring_param_s *aq_ring_param)
  {
 -	u32 dma_desc_msw_addr = (u32)(((u64)aq_ring->dx_ring_pa) >> 32);
  	u32 dma_desc_lsw_addr = (u32)aq_ring->dx_ring_pa;
 +	u32 dma_desc_msw_addr = (u32)(((u64)aq_ring->dx_ring_pa) >> 32);
  
  	hw_atl_reg_tx_dma_desc_base_addresslswset(self, dma_desc_lsw_addr,
  						  aq_ring->idx);
@@@ -648,11 -687,53 +648,56 @@@ int hw_atl_b0_hw_ring_rx_fill(struct aq
  	return aq_hw_err_from_flags(self);
  }
  
++<<<<<<< HEAD
 +static int hw_atl_b0_hw_ring_tx_head_update(struct aq_hw_s *self,
 +					    struct aq_ring_s *ring)
++=======
+ static int hw_atl_b0_hw_ring_hwts_rx_fill(struct aq_hw_s *self,
+ 					  struct aq_ring_s *ring)
+ {
+ 	unsigned int i;
+ 
+ 	for (i = aq_ring_avail_dx(ring); i--;
+ 			ring->sw_tail = aq_ring_next_dx(ring, ring->sw_tail)) {
+ 		struct hw_atl_rxd_s *rxd =
+ 			(struct hw_atl_rxd_s *)
+ 			&ring->dx_ring[ring->sw_tail * HW_ATL_B0_RXD_SIZE];
+ 
+ 		rxd->buf_addr = ring->dx_ring_pa + ring->size * ring->dx_size;
+ 		rxd->hdr_addr = 0U;
+ 	}
+ 	/* Make sure descriptors are updated before bump tail*/
+ 	wmb();
+ 
+ 	hw_atl_reg_rx_dma_desc_tail_ptr_set(self, ring->sw_tail, ring->idx);
+ 
+ 	return aq_hw_err_from_flags(self);
+ }
+ 
+ static int hw_atl_b0_hw_ring_hwts_rx_receive(struct aq_hw_s *self,
+ 					     struct aq_ring_s *ring)
+ {
+ 	while (ring->hw_head != ring->sw_tail) {
+ 		struct hw_atl_rxd_hwts_wb_s *hwts_wb =
+ 			(struct hw_atl_rxd_hwts_wb_s *)
+ 			(ring->dx_ring + (ring->hw_head * HW_ATL_B0_RXD_SIZE));
+ 
+ 		/* RxD is not done */
+ 		if (!(hwts_wb->sec_lw0 & 0x1U))
+ 			break;
+ 
+ 		ring->hw_head = aq_ring_next_dx(ring, ring->hw_head);
+ 	}
+ 
+ 	return aq_hw_err_from_flags(self);
+ }
+ 
+ int hw_atl_b0_hw_ring_tx_head_update(struct aq_hw_s *self,
+ 				     struct aq_ring_s *ring)
++>>>>>>> 43c670c8e48a (net: atlantic: A2 ingress / egress hw configuration)
  {
 -	unsigned int hw_head_;
  	int err = 0;
 -
 -	hw_head_ = hw_atl_tdm_tx_desc_head_ptr_get(self, ring->idx);
 +	unsigned int hw_head_ = hw_atl_tdm_tx_desc_head_ptr_get(self, ring->idx);
  
  	if (aq_utils_obj_test(&self->flags, AQ_HW_FLAG_ERR_UNPLUG)) {
  		err = -ENXIO;
@@@ -964,17 -1063,17 +1008,15 @@@ err_exit
  	return err;
  }
  
- static int hw_atl_b0_hw_ring_tx_stop(struct aq_hw_s *self,
- 				     struct aq_ring_s *ring)
+ int hw_atl_b0_hw_ring_tx_stop(struct aq_hw_s *self, struct aq_ring_s *ring)
  {
  	hw_atl_tdm_tx_desc_en_set(self, 0U, ring->idx);
 -
  	return aq_hw_err_from_flags(self);
  }
  
- static int hw_atl_b0_hw_ring_rx_stop(struct aq_hw_s *self,
- 				     struct aq_ring_s *ring)
+ int hw_atl_b0_hw_ring_rx_stop(struct aq_hw_s *self, struct aq_ring_s *ring)
  {
  	hw_atl_rdm_rx_desc_en_set(self, 0U, ring->idx);
 -
  	return aq_hw_err_from_flags(self);
  }
  
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
index b1c0b6850e60,f5091d79ab43..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
@@@ -36,4 -33,41 +36,44 @@@ extern const struct aq_hw_ops hw_atl_op
  
  #define hw_atl_ops_b1 hw_atl_ops_b0
  
++<<<<<<< HEAD
++=======
+ int hw_atl_b0_hw_rss_hash_set(struct aq_hw_s *self,
+ 			      struct aq_rss_parameters *rss_params);
+ int hw_atl_b0_hw_rss_set(struct aq_hw_s *self,
+ 			 struct aq_rss_parameters *rss_params);
+ int hw_atl_b0_hw_offload_set(struct aq_hw_s *self,
+ 			     struct aq_nic_cfg_s *aq_nic_cfg);
+ 
+ int hw_atl_b0_hw_ring_tx_start(struct aq_hw_s *self, struct aq_ring_s *ring);
+ int hw_atl_b0_hw_ring_rx_start(struct aq_hw_s *self, struct aq_ring_s *ring);
+ 
+ int hw_atl_b0_hw_ring_rx_init(struct aq_hw_s *self, struct aq_ring_s *aq_ring,
+ 			      struct aq_ring_param_s *aq_ring_param);
+ int hw_atl_b0_hw_ring_rx_fill(struct aq_hw_s *self, struct aq_ring_s *ring,
+ 			      unsigned int sw_tail_old);
+ int hw_atl_b0_hw_ring_rx_receive(struct aq_hw_s *self, struct aq_ring_s *ring);
+ 
+ int hw_atl_b0_hw_ring_tx_init(struct aq_hw_s *self, struct aq_ring_s *aq_ring,
+ 			      struct aq_ring_param_s *aq_ring_param);
+ int hw_atl_b0_hw_ring_tx_xmit(struct aq_hw_s *self, struct aq_ring_s *ring,
+ 			      unsigned int frags);
+ int hw_atl_b0_hw_ring_tx_head_update(struct aq_hw_s *self,
+ 				     struct aq_ring_s *ring);
+ 
+ int hw_atl_b0_hw_ring_tx_stop(struct aq_hw_s *self, struct aq_ring_s *ring);
+ int hw_atl_b0_hw_ring_rx_stop(struct aq_hw_s *self, struct aq_ring_s *ring);
+ 
+ int hw_atl_b0_hw_mac_addr_set(struct aq_hw_s *self, u8 *mac_addr);
+ 
+ int hw_atl_b0_hw_start(struct aq_hw_s *self);
+ 
+ int hw_atl_b0_hw_irq_enable(struct aq_hw_s *self, u64 mask);
+ int hw_atl_b0_hw_irq_disable(struct aq_hw_s *self, u64 mask);
+ int hw_atl_b0_hw_irq_read(struct aq_hw_s *self, u64 *mask);
+ 
+ int hw_atl_b0_hw_packet_filter_set(struct aq_hw_s *self,
+ 				   unsigned int packet_filter);
+ 
++>>>>>>> 43c670c8e48a (net: atlantic: A2 ingress / egress hw configuration)
  #endif /* HW_ATL_B0_H */
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_internal.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh_internal.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_internal.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh_internal.h
