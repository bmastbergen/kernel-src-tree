iommu/arm-smmu: Support SMMU module probing from the IORT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ard Biesheuvel <ardb@kernel.org>
commit d3daf66621b9dd5749d4661ace74afb84d3d465e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d3daf666.failed

Add support for SMMU drivers built as modules to the ACPI/IORT device
probing path, by deferring the probe of the master if the SMMU driver is
known to exist but has not been loaded yet. Given that the IORT code
registers a platform device for each SMMU that it discovers, we can
easily trigger the udev based autoloading of the SMMU drivers by making
the platform device identifier part of the module alias.

	Reviewed-by: Robin Murphy <robin.murphy@arm.com>
	Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
	Tested-by: John Garry <john.garry@huawei.com> # only manual smmu ko loading
	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
	Signed-off-by: Will Deacon <will@kernel.org>
	Tested-by: John Garry <john.garry@huawei.com> # smmu v3
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit d3daf66621b9dd5749d4661ace74afb84d3d465e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/arm-smmu-v3.c
#	drivers/iommu/arm-smmu.c
diff --cc drivers/iommu/arm-smmu-v3.c
index 66cb258636b4,da9474a02668..000000000000
--- a/drivers/iommu/arm-smmu-v3.c
+++ b/drivers/iommu/arm-smmu-v3.c
@@@ -3721,13 -3721,18 +3721,20 @@@ static const struct of_device_id arm_sm
  
  static struct platform_driver arm_smmu_driver = {
  	.driver	= {
 -		.name			= "arm-smmu-v3",
 -		.of_match_table		= of_match_ptr(arm_smmu_of_match),
 -		.suppress_bind_attrs	= true,
 +		.name		= "arm-smmu-v3",
 +		.of_match_table	= of_match_ptr(arm_smmu_of_match),
 +		.suppress_bind_attrs = true,
  	},
  	.probe	= arm_smmu_device_probe,
 -	.remove	= arm_smmu_device_remove,
  	.shutdown = arm_smmu_device_shutdown,
  };
 -module_platform_driver(arm_smmu_driver);
  
++<<<<<<< HEAD
 +IOMMU_OF_DECLARE(arm_smmuv3, "arm,smmu-v3");
 +builtin_platform_driver(arm_smmu_driver);
++=======
+ MODULE_DESCRIPTION("IOMMU API for ARM architected SMMUv3 implementations");
+ MODULE_AUTHOR("Will Deacon <will.deacon@arm.com>");
+ MODULE_ALIAS("platform:arm-smmu-v3");
+ MODULE_LICENSE("GPL v2");
++>>>>>>> d3daf66621b9 (iommu/arm-smmu: Support SMMU module probing from the IORT)
diff --cc drivers/iommu/arm-smmu.c
index ab9a0239376c,5d2f60bb9e50..000000000000
--- a/drivers/iommu/arm-smmu.c
+++ b/drivers/iommu/arm-smmu.c
@@@ -2479,16 -2271,15 +2479,23 @@@ static struct platform_driver arm_smmu_
  		.name			= "arm-smmu",
  		.of_match_table		= of_match_ptr(arm_smmu_of_match),
  		.pm			= &arm_smmu_pm_ops,
 -		.suppress_bind_attrs    = true,
 +		.suppress_bind_attrs	= true,
  	},
  	.probe	= arm_smmu_device_probe,
 -	.remove	= arm_smmu_device_remove,
  	.shutdown = arm_smmu_device_shutdown,
  };
 -module_platform_driver(arm_smmu_driver);
  
++<<<<<<< HEAD
 +IOMMU_OF_DECLARE(arm_smmuv1, "arm,smmu-v1");
 +IOMMU_OF_DECLARE(arm_smmuv2, "arm,smmu-v2");
 +IOMMU_OF_DECLARE(arm_mmu400, "arm,mmu-400");
 +IOMMU_OF_DECLARE(arm_mmu401, "arm,mmu-401");
 +IOMMU_OF_DECLARE(arm_mmu500, "arm,mmu-500");
 +IOMMU_OF_DECLARE(cavium_smmuv2, "cavium,smmu-v2");
 +builtin_platform_driver(arm_smmu_driver);
++=======
+ MODULE_DESCRIPTION("IOMMU API for ARM architected SMMU implementations");
+ MODULE_AUTHOR("Will Deacon <will.deacon@arm.com>");
+ MODULE_ALIAS("platform:arm-smmu");
+ MODULE_LICENSE("GPL v2");
++>>>>>>> d3daf66621b9 (iommu/arm-smmu: Support SMMU module probing from the IORT)
diff --git a/drivers/acpi/arm64/iort.c b/drivers/acpi/arm64/iort.c
index aba5dec10d17..2ef0f95a4076 100644
--- a/drivers/acpi/arm64/iort.c
+++ b/drivers/acpi/arm64/iort.c
@@ -898,9 +898,9 @@ static inline bool iort_iommu_driver_enabled(u8 type)
 {
 	switch (type) {
 	case ACPI_IORT_NODE_SMMU_V3:
-		return IS_BUILTIN(CONFIG_ARM_SMMU_V3);
+		return IS_ENABLED(CONFIG_ARM_SMMU_V3);
 	case ACPI_IORT_NODE_SMMU:
-		return IS_BUILTIN(CONFIG_ARM_SMMU);
+		return IS_ENABLED(CONFIG_ARM_SMMU);
 	default:
 		pr_warn("IORT node type %u does not describe an SMMU\n", type);
 		return false;
* Unmerged path drivers/iommu/arm-smmu-v3.c
* Unmerged path drivers/iommu/arm-smmu.c
