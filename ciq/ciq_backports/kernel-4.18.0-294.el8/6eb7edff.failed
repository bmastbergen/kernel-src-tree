RDMA/mlx5: Organize QP types checks in one place

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 6eb7edffb28558aaa3a3e625ac9dcd40fc603bc6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/6eb7edff.failed

Perform check if QP type is supported in one place at the beginning of
the create_qp function instead of current implementation with checks
buried inside of the code.

Link: https://lore.kernel.org/r/20200427154636.381474-2-leon@kernel.org
	Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 6eb7edffb28558aaa3a3e625ac9dcd40fc603bc6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 9f87b08d533e,fdab5b6db1e5..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -2739,68 -2778,38 +2776,49 @@@ struct ib_qp *mlx5_ib_create_qp(struct 
  		}
  	}
  
- 	switch (init_attr->qp_type) {
- 	case IB_QPT_XRC_TGT:
- 	case IB_QPT_XRC_INI:
- 		if (!MLX5_CAP_GEN(dev->mdev, xrc)) {
- 			mlx5_ib_dbg(dev, "XRC not supported\n");
- 			return ERR_PTR(-ENOSYS);
- 		}
- 		init_attr->recv_cq = NULL;
- 		if (init_attr->qp_type == IB_QPT_XRC_TGT) {
- 			xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
- 			init_attr->send_cq = NULL;
- 		}
- 
- 		/* fall through */
- 	case IB_QPT_RAW_PACKET:
- 	case IB_QPT_RC:
- 	case IB_QPT_UC:
- 	case IB_QPT_UD:
- 	case IB_QPT_SMI:
- 	case MLX5_IB_QPT_HW_GSI:
- 	case MLX5_IB_QPT_REG_UMR:
- 	case MLX5_IB_QPT_DCI:
- 		qp = kzalloc(sizeof(*qp), GFP_KERNEL);
- 		if (!qp)
- 			return ERR_PTR(-ENOMEM);
- 
- 		err = create_qp_common(dev, pd, init_attr, udata, qp);
- 		if (err) {
- 			mlx5_ib_dbg(dev, "create_qp_common failed\n");
- 			kfree(qp);
- 			return ERR_PTR(err);
- 		}
- 
- 		if (is_qp0(init_attr->qp_type))
- 			qp->ibqp.qp_num = 0;
- 		else if (is_qp1(init_attr->qp_type))
- 			qp->ibqp.qp_num = 1;
- 		else
- 			qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
- 
- 		mlx5_ib_dbg(dev, "ib qpnum 0x%x, mlx qpn 0x%x, rcqn 0x%x, scqn 0x%x\n",
- 			    qp->ibqp.qp_num, qp->trans_qp.base.mqp.qpn,
- 			    init_attr->recv_cq ? to_mcq(init_attr->recv_cq)->mcq.cqn : -1,
- 			    init_attr->send_cq ? to_mcq(init_attr->send_cq)->mcq.cqn : -1);
- 
- 		qp->trans_qp.xrcdn = xrcdn;
- 
- 		break;
- 
- 	case IB_QPT_GSI:
+ 	if (init_attr->qp_type == IB_QPT_GSI)
  		return mlx5_ib_gsi_create_qp(pd, init_attr);
  
++<<<<<<< HEAD
 +	case IB_QPT_RAW_IPV6:
 +	case IB_QPT_RAW_ETHERTYPE:
 +	case IB_QPT_MAX:
 +	default:
 +		mlx5_ib_dbg(dev, "unsupported qp type %d\n",
 +			    init_attr->qp_type);
 +		/* Don't support raw QPs */
 +		return ERR_PTR(-EINVAL);
++=======
+ 	if (init_attr->qp_type == IB_QPT_XRC_TGT) {
+ 		init_attr->recv_cq = NULL;
+ 		xrcdn = to_mxrcd(init_attr->xrcd)->xrcdn;
+ 		init_attr->send_cq = NULL;
++>>>>>>> 6eb7edffb285 (RDMA/mlx5: Organize QP types checks in one place)
  	}
  
+ 	if (init_attr->qp_type == IB_QPT_XRC_INI)
+ 		init_attr->recv_cq = NULL;
+ 
+ 	qp = kzalloc(sizeof(*qp), GFP_KERNEL);
+ 	if (!qp)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	err = create_qp_common(dev, pd, init_attr, udata, qp);
+ 	if (err) {
+ 		mlx5_ib_dbg(dev, "create_qp_common failed\n");
+ 		kfree(qp);
+ 		return ERR_PTR(err);
+ 	}
+ 
+ 	if (is_qp0(init_attr->qp_type))
+ 		qp->ibqp.qp_num = 0;
+ 	else if (is_qp1(init_attr->qp_type))
+ 		qp->ibqp.qp_num = 1;
+ 	else
+ 		qp->ibqp.qp_num = qp->trans_qp.base.mqp.qpn;
+ 
+ 	qp->trans_qp.xrcdn = xrcdn;
+ 
  	if (verbs_init_attr->qp_type == IB_QPT_DRIVER)
  		qp->qp_sub_type = init_attr->qp_type;
  
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
