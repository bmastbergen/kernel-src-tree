net: atlantic: change the order of arguments for TC weight/credit setters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Mark Starovoytov <mstarovoitov@marvell.com>
commit b64f2ac9955bcd3547329c30d8f7a55f84297df8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/b64f2ac9.failed

This patch changes the order of arguments for TC weight/credit setter
functions.
Having the "value to be set" on the right is slightly more robust in
a sense that it's more natural for the humans, so it's a bit more
error-proof this way.

	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b64f2ac9955bcd3547329c30d8f7a55f84297df8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.h
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index b7e5ce0d7af5,2448a09ef7b9..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -122,46 -153,45 +122,52 @@@ static int hw_atl_b0_hw_qos_set(struct 
  	hw_atl_tps_tx_pkt_shed_desc_vm_arb_mode_set(self, 0U);
  
  	/* TPS TC credits init */
 +	hw_atl_tps_tx_pkt_shed_desc_tc_arb_mode_set(self, 0U);
  	hw_atl_tps_tx_pkt_shed_data_arb_mode_set(self, 0U);
  
 -	tx_buff_size /= cfg->tcs;
 -	rx_buff_size /= cfg->tcs;
 -	for (tc = 0; tc < cfg->tcs; tc++) {
 -		u32 threshold = 0U;
 +	hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(self, 0xFFF, 0U);
 +	hw_atl_tps_tx_pkt_shed_tc_data_weight_set(self, 0x64, 0U);
 +	hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(self, 0x50, 0U);
 +	hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(self, 0x1E, 0U);
  
++<<<<<<< HEAD
 +	/* Tx buf size */
 +	buff_size = HW_ATL_B0_TXBUF_MAX;
++=======
+ 		/* TX Packet Scheduler Data TC0 */
+ 		hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(self, tc, 0xFFF);
+ 		hw_atl_tps_tx_pkt_shed_tc_data_weight_set(self, tc, 0x64);
 -
 -		/* Tx buf size TC0 */
 -		hw_atl_tpb_tx_pkt_buff_size_per_tc_set(self, tx_buff_size, tc);
 -
 -		threshold = (tx_buff_size * (1024 / 32U) * 66U) / 100U;
 -		hw_atl_tpb_tx_buff_hi_threshold_per_tc_set(self, threshold, tc);
 -
 -		threshold = (tx_buff_size * (1024 / 32U) * 50U) / 100U;
 -		hw_atl_tpb_tx_buff_lo_threshold_per_tc_set(self, threshold, tc);
 -
 -		/* QoS Rx buf size per TC */
 -		hw_atl_rpb_rx_pkt_buff_size_per_tc_set(self, rx_buff_size, tc);
 -
 -		threshold = (rx_buff_size * (1024U / 32U) * 66U) / 100U;
 -		hw_atl_rpb_rx_buff_hi_threshold_per_tc_set(self, threshold, tc);
 -
 -		threshold = (rx_buff_size * (1024U / 32U) * 50U) / 100U;
 -		hw_atl_rpb_rx_buff_lo_threshold_per_tc_set(self, threshold, tc);
 -
 -		hw_atl_b0_set_fc(self, self->aq_nic_cfg->fc.req, tc);
 -	}
 -
 -	if (cfg->is_ptp)
 -		hw_atl_b0_tc_ptp_set(self);
++>>>>>>> b64f2ac9955b (net: atlantic: change the order of arguments for TC weight/credit setters)
 +
 +	hw_atl_tpb_tx_pkt_buff_size_per_tc_set(self, buff_size, tc);
 +	hw_atl_tpb_tx_buff_hi_threshold_per_tc_set(self,
 +						   (buff_size *
 +						   (1024 / 32U) * 66U) /
 +						   100U, tc);
 +	hw_atl_tpb_tx_buff_lo_threshold_per_tc_set(self,
 +						   (buff_size *
 +						   (1024 / 32U) * 50U) /
 +						   100U, tc);
 +
 +	/* QoS Rx buf size per TC */
 +	tc = 0;
 +	buff_size = HW_ATL_B0_RXBUF_MAX;
 +
 +	hw_atl_rpb_rx_pkt_buff_size_per_tc_set(self, buff_size, tc);
 +	hw_atl_rpb_rx_buff_hi_threshold_per_tc_set(self,
 +						   (buff_size *
 +						   (1024U / 32U) * 66U) /
 +						   100U, tc);
 +	hw_atl_rpb_rx_buff_lo_threshold_per_tc_set(self,
 +						   (buff_size *
 +						   (1024U / 32U) * 50U) /
 +						   100U, tc);
 +
 +	hw_atl_b0_set_fc(self, self->aq_nic_cfg->flow_control, tc);
  
  	/* QoS 802.1p priority -> TC mapping */
 -	for (prio = 0; prio < 8; ++prio)
 -		hw_atl_rpf_rpb_user_priority_tc_map_set(self, prio,
 -							cfg->prio_tc_map[prio]);
 +	for (i_priority = 8U; i_priority--;)
 +		hw_atl_rpf_rpb_user_priority_tc_map_set(self, i_priority, 0U);
  
  	return aq_hw_err_from_flags(self);
  }
@@@ -283,6 -315,56 +289,59 @@@ static int hw_atl_b0_hw_offload_set(str
  
  		hw_atl_itr_rsc_delay_set(self, 1U);
  	}
++<<<<<<< HEAD
++=======
+ 
+ 	return aq_hw_err_from_flags(self);
+ }
+ 
+ int hw_atl_b0_hw_init_tx_tc_rate_limit(struct aq_hw_s *self)
+ {
+ 	/* Scale factor is based on the number of bits in fractional portion */
+ 	static const u32 scale = BIT(HW_ATL_TPS_DESC_RATE_Y_WIDTH);
+ 	static const u32 frac_msk = HW_ATL_TPS_DESC_RATE_Y_MSK >>
+ 				    HW_ATL_TPS_DESC_RATE_Y_SHIFT;
+ 	struct aq_nic_cfg_s *nic_cfg = self->aq_nic_cfg;
+ 	int tc;
+ 
+ 	hw_atl_tps_tx_pkt_shed_desc_tc_arb_mode_set(self, 0U);
+ 	hw_atl_tps_tx_desc_rate_mode_set(self, nic_cfg->is_qos ? 1U : 0U);
+ 	for (tc = 0; tc != nic_cfg->tcs; tc++) {
+ 		const u32 en = (nic_cfg->tc_max_rate[tc] != 0) ? 1U : 0U;
+ 		const u32 desc = AQ_NIC_CFG_TCVEC2RING(nic_cfg, tc, 0);
+ 
+ 		hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(self, tc, 0x50);
+ 		hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(self, tc, 0x1E);
+ 
+ 		hw_atl_tps_tx_desc_rate_en_set(self, desc, en);
+ 
+ 		if (en) {
+ 			/* Nominal rate is always 10G */
+ 			const u32 rate = 10000U * scale /
+ 					 nic_cfg->tc_max_rate[tc];
+ 			const u32 rate_int = rate >>
+ 					     HW_ATL_TPS_DESC_RATE_Y_WIDTH;
+ 			const u32 rate_frac = rate & frac_msk;
+ 
+ 			hw_atl_tps_tx_desc_rate_x_set(self, desc, rate_int);
+ 			hw_atl_tps_tx_desc_rate_y_set(self, desc, rate_frac);
+ 		} else {
+ 			/* A value of 1 indicates the queue is not
+ 			 * rate controlled.
+ 			 */
+ 			hw_atl_tps_tx_desc_rate_x_set(self, desc, 1U);
+ 			hw_atl_tps_tx_desc_rate_y_set(self, desc, 0U);
+ 		}
+ 	}
+ 	for (tc = nic_cfg->tcs; tc != AQ_CFG_TCS_MAX; tc++) {
+ 		const u32 desc = AQ_NIC_CFG_TCVEC2RING(nic_cfg, tc, 0);
+ 
+ 		hw_atl_tps_tx_desc_rate_en_set(self, desc, 0U);
+ 		hw_atl_tps_tx_desc_rate_x_set(self, desc, 1U);
+ 		hw_atl_tps_tx_desc_rate_y_set(self, desc, 0U);
+ 	}
+ 
++>>>>>>> b64f2ac9955b (net: atlantic: change the order of arguments for TC weight/credit setters)
  	return aq_hw_err_from_flags(self);
  }
  
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.h
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
index ec4ee92db31b..42e9759dd0a4 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
@@ -138,10 +138,10 @@ static int hw_atl_a0_hw_qos_set(struct aq_hw_s *self)
 	hw_atl_tps_tx_pkt_shed_desc_tc_arb_mode_set(self, 0U);
 	hw_atl_tps_tx_pkt_shed_data_arb_mode_set(self, 0U);
 
-	hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(self, 0xFFF, 0U);
-	hw_atl_tps_tx_pkt_shed_tc_data_weight_set(self, 0x64, 0U);
-	hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(self, 0x50, 0U);
-	hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(self, 0x1E, 0U);
+	hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(self, 0U, 0xFFF);
+	hw_atl_tps_tx_pkt_shed_tc_data_weight_set(self, 0U, 0x64);
+	hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(self, 0U, 0x50);
+	hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(self, 0U, 0x1E);
 
 	/* Tx buf size */
 	buff_size = HW_ATL_A0_TXBUF_MAX;
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c
index 961b9b69649f..824ef37cdd70 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.c
@@ -1413,8 +1413,8 @@ void hw_atl_tps_tx_pkt_shed_desc_tc_arb_mode_set(struct aq_hw_s *aq_hw,
 }
 
 void hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(struct aq_hw_s *aq_hw,
-						   u32 max_credit,
-						   u32 tc)
+						   const u32 tc,
+						   const u32 max_credit)
 {
 	aq_hw_write_reg_bit(aq_hw, HW_ATL_TPS_DESC_TCTCREDIT_MAX_ADR(tc),
 			    HW_ATL_TPS_DESC_TCTCREDIT_MAX_MSK,
@@ -1423,13 +1423,13 @@ void hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(struct aq_hw_s *aq_hw,
 }
 
 void hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(struct aq_hw_s *aq_hw,
-					       u32 tx_pkt_shed_desc_tc_weight,
-					       u32 tc)
+					       const u32 tc,
+					       const u32 weight)
 {
 	aq_hw_write_reg_bit(aq_hw, HW_ATL_TPS_DESC_TCTWEIGHT_ADR(tc),
 			    HW_ATL_TPS_DESC_TCTWEIGHT_MSK,
 			    HW_ATL_TPS_DESC_TCTWEIGHT_SHIFT,
-			    tx_pkt_shed_desc_tc_weight);
+			    weight);
 }
 
 void hw_atl_tps_tx_pkt_shed_desc_vm_arb_mode_set(struct aq_hw_s *aq_hw,
@@ -1442,8 +1442,8 @@ void hw_atl_tps_tx_pkt_shed_desc_vm_arb_mode_set(struct aq_hw_s *aq_hw,
 }
 
 void hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(struct aq_hw_s *aq_hw,
-						   u32 max_credit,
-						   u32 tc)
+						   const u32 tc,
+						   const u32 max_credit)
 {
 	aq_hw_write_reg_bit(aq_hw, HW_ATL_TPS_DATA_TCTCREDIT_MAX_ADR(tc),
 			    HW_ATL_TPS_DATA_TCTCREDIT_MAX_MSK,
@@ -1452,13 +1452,13 @@ void hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(struct aq_hw_s *aq_hw,
 }
 
 void hw_atl_tps_tx_pkt_shed_tc_data_weight_set(struct aq_hw_s *aq_hw,
-					       u32 tx_pkt_shed_tc_data_weight,
-					       u32 tc)
+					       const u32 tc,
+					       const u32 weight)
 {
 	aq_hw_write_reg_bit(aq_hw, HW_ATL_TPS_DATA_TCTWEIGHT_ADR(tc),
 			    HW_ATL_TPS_DATA_TCTWEIGHT_MSK,
 			    HW_ATL_TPS_DATA_TCTWEIGHT_SHIFT,
-			    tx_pkt_shed_tc_data_weight);
+			    weight);
 }
 
 /* tx */
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h
index 1dc201492ec7..304a6ddaf686 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_llh.h
@@ -668,13 +668,13 @@ void hw_atl_tps_tx_pkt_shed_desc_tc_arb_mode_set(struct aq_hw_s *aq_hw,
 
 /* set tx packet scheduler descriptor tc max credit */
 void hw_atl_tps_tx_pkt_shed_desc_tc_max_credit_set(struct aq_hw_s *aq_hw,
-						   u32 max_credit,
-					    u32 tc);
+						   const u32 tc,
+						   const u32 max_credit);
 
 /* set tx packet scheduler descriptor tc weight */
 void hw_atl_tps_tx_pkt_shed_desc_tc_weight_set(struct aq_hw_s *aq_hw,
-					       u32 tx_pkt_shed_desc_tc_weight,
-					u32 tc);
+					       const u32 tc,
+					       const u32 weight);
 
 /* set tx packet scheduler descriptor vm arbitration mode */
 void hw_atl_tps_tx_pkt_shed_desc_vm_arb_mode_set(struct aq_hw_s *aq_hw,
@@ -682,13 +682,13 @@ void hw_atl_tps_tx_pkt_shed_desc_vm_arb_mode_set(struct aq_hw_s *aq_hw,
 
 /* set tx packet scheduler tc data max credit */
 void hw_atl_tps_tx_pkt_shed_tc_data_max_credit_set(struct aq_hw_s *aq_hw,
-						   u32 max_credit,
-					    u32 tc);
+						   const u32 tc,
+						   const u32 max_credit);
 
 /* set tx packet scheduler tc data weight */
 void hw_atl_tps_tx_pkt_shed_tc_data_weight_set(struct aq_hw_s *aq_hw,
-					       u32 tx_pkt_shed_tc_data_weight,
-					u32 tc);
+					       const u32 tc,
+					       const u32 weight);
 
 /* tx */
 
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl2/hw_atl2_llh.h
