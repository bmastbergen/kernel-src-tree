s390/qeth: extract helpers for next-hop lookup

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Julian Wiedmann <jwi@linux.ibm.com>
commit 1d38c2e4941e1add2a89ef7abb22c918bbb3c103
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/1d38c2e4.failed

These will be used in a subsequent patch.

	Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1d38c2e4941e1add2a89ef7abb22c918bbb3c103)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/net/qeth_core.h
diff --cc drivers/s390/net/qeth_core.h
index 37711dff7476,6b0d37d2c638..000000000000
--- a/drivers/s390/net/qeth_core.h
+++ b/drivers/s390/net/qeth_core.h
@@@ -939,16 -941,23 +935,36 @@@ static inline struct dst_entry *qeth_ds
  	return dst;
  }
  
++<<<<<<< HEAD
 +static inline void qeth_rx_csum(struct qeth_card *card, struct sk_buff *skb,
 +				u8 flags)
 +{
 +	if ((card->dev->features & NETIF_F_RXCSUM) &&
 +	    (flags & QETH_HDR_EXT_CSUM_TRANSP_REQ)) {
 +		skb->ip_summed = CHECKSUM_UNNECESSARY;
 +		QETH_CARD_STAT_INC(card, rx_skb_csum);
 +	} else {
 +		skb->ip_summed = CHECKSUM_NONE;
 +	}
++=======
+ static inline __be32 qeth_next_hop_v4_rcu(struct sk_buff *skb,
+ 					  struct dst_entry *dst)
+ {
+ 	struct rtable *rt = (struct rtable *) dst;
+ 
+ 	return (rt) ? rt_nexthop(rt, ip_hdr(skb)->daddr) : ip_hdr(skb)->daddr;
+ }
+ 
+ static inline struct in6_addr *qeth_next_hop_v6_rcu(struct sk_buff *skb,
+ 						    struct dst_entry *dst)
+ {
+ 	struct rt6_info *rt = (struct rt6_info *) dst;
+ 
+ 	if (rt && !ipv6_addr_any(&rt->rt6i_gateway))
+ 		return &rt->rt6i_gateway;
+ 	else
+ 		return &ipv6_hdr(skb)->daddr;
++>>>>>>> 1d38c2e4941e (s390/qeth: extract helpers for next-hop lookup)
  }
  
  static inline void qeth_tx_csum(struct sk_buff *skb, u8 *flags, int ipv)
* Unmerged path drivers/s390/net/qeth_core.h
diff --git a/drivers/s390/net/qeth_l3_main.c b/drivers/s390/net/qeth_l3_main.c
index 347e3d16e9ff..5a6fcc80dbdf 100644
--- a/drivers/s390/net/qeth_l3_main.c
+++ b/drivers/s390/net/qeth_l3_main.c
@@ -1790,8 +1790,8 @@ static void qeth_l3_fill_header(struct qeth_qdio_out_q *queue,
 
 		if (skb->protocol == htons(ETH_P_AF_IUCV)) {
 			l3_hdr->flags = QETH_HDR_IPV6 | QETH_CAST_UNICAST;
-			l3_hdr->next_hop.ipv6_addr.s6_addr16[0] = htons(0xfe80);
-			memcpy(&l3_hdr->next_hop.ipv6_addr.s6_addr32[2],
+			l3_hdr->next_hop.addr.s6_addr16[0] = htons(0xfe80);
+			memcpy(&l3_hdr->next_hop.addr.s6_addr32[2],
 			       iucv_trans_hdr(skb)->destUserID, 8);
 			return;
 		}
@@ -1825,18 +1825,10 @@ static void qeth_l3_fill_header(struct qeth_qdio_out_q *queue,
 	l3_hdr->flags |= qeth_l3_cast_type_to_flag(cast_type);
 
 	if (ipv == 4) {
-		struct rtable *rt = (struct rtable *) dst;
-
-		*((__be32 *) &hdr->hdr.l3.next_hop.ipv4.addr) = (rt) ?
-				rt_nexthop(rt, ip_hdr(skb)->daddr) :
-				ip_hdr(skb)->daddr;
+		l3_hdr->next_hop.addr.s6_addr32[3] =
+					qeth_next_hop_v4_rcu(skb, dst);
 	} else if (ipv == 6) {
-		struct rt6_info *rt = (struct rt6_info *) dst;
-
-		if (rt && !ipv6_addr_any(&rt->rt6i_gateway))
-			l3_hdr->next_hop.ipv6_addr = rt->rt6i_gateway;
-		else
-			l3_hdr->next_hop.ipv6_addr = ipv6_hdr(skb)->daddr;
+		l3_hdr->next_hop.addr = *qeth_next_hop_v6_rcu(skb, dst);
 
 		hdr->hdr.l3.flags |= QETH_HDR_IPV6;
 		if (!IS_IQD(card))
