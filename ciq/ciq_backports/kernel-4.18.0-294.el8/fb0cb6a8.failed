KVM: selftests: update hyperv_cpuid with SynDBG tests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vitaly Kuznetsov <vkuznets@redhat.com>
commit fb0cb6a8211cfe00178614ae72a0b426bd1ff016
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/fb0cb6a8.failed

Update tests to reflect new CPUID capabilities with SYNDBG.
Check that we get the right number of entries and that
0x40000000.EAX always returns the correct max leaf.

	Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Jon Doron <arilou@gmail.com>
Message-Id: <20200529134543.1127440-7-arilou@gmail.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit fb0cb6a8211cfe00178614ae72a0b426bd1ff016)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/x86_64/hyperv_cpuid.c
diff --cc tools/testing/selftests/kvm/x86_64/hyperv_cpuid.c
index a5f091036196,4a7967cca281..000000000000
--- a/tools/testing/selftests/kvm/x86_64/hyperv_cpuid.c
+++ b/tools/testing/selftests/kvm/x86_64/hyperv_cpuid.c
@@@ -145,37 -159,31 +159,46 @@@ int main(int argc, char *argv[]
  		exit(KSFT_SKIP);
  	}
  
- 	/* Create VM */
- 	vm = vm_create_default(VCPU_ID, 0, guest_code);
- 
- 	test_hv_cpuid_e2big(vm);
+ 	for (stage = 0; stage < 3; stage++) {
+ 		evmcs_enabled = false;
+ 
+ 		vm = vm_create_default(VCPU_ID, 0, guest_code);
+ 		switch (stage) {
+ 		case 0:
+ 			test_hv_cpuid_e2big(vm);
+ 			continue;
+ 		case 1:
+ 			break;
+ 		case 2:
+ 			if (!kvm_check_cap(KVM_CAP_HYPERV_ENLIGHTENED_VMCS)) {
+ 				print_skip("Enlightened VMCS is unsupported");
+ 				continue;
+ 			}
+ 			vcpu_enable_evmcs(vm, VCPU_ID);
+ 			evmcs_enabled = true;
+ 			break;
+ 		}
  
++<<<<<<< HEAD
 +	hv_cpuid_entries = kvm_get_supported_hv_cpuid(vm);
 +	if (!hv_cpuid_entries)
 +		return 1;
 +
 +	test_hv_cpuid(hv_cpuid_entries, 0);
 +
 +	free(hv_cpuid_entries);
 +
 +	if (!nested_vmx_supported() ||
 +	    !kvm_check_cap(KVM_CAP_HYPERV_ENLIGHTENED_VMCS)) {
 +		print_skip("Enlightened VMCS is unsupported");
 +		goto vm_free;
++=======
+ 		hv_cpuid_entries = kvm_get_supported_hv_cpuid(vm);
+ 		test_hv_cpuid(hv_cpuid_entries, evmcs_enabled);
+ 		free(hv_cpuid_entries);
+ 		kvm_vm_free(vm);
++>>>>>>> fb0cb6a8211c (KVM: selftests: update hyperv_cpuid with SynDBG tests)
  	}
  
- 	vcpu_enable_evmcs(vm, VCPU_ID);
- 
- 	hv_cpuid_entries = kvm_get_supported_hv_cpuid(vm);
- 	if (!hv_cpuid_entries)
- 		return 1;
- 
- 	test_hv_cpuid(hv_cpuid_entries, 1);
- 
- 	free(hv_cpuid_entries);
- 
- vm_free:
- 	kvm_vm_free(vm);
- 
  	return 0;
  }
* Unmerged path tools/testing/selftests/kvm/x86_64/hyperv_cpuid.c
