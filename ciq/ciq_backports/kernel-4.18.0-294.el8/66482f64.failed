driver: core: Fix list corruption after device_del()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Takashi Iwai <tiwai@suse.de>
commit 66482f640755b31cb94371ff6cef17400cda6db5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/66482f64.failed

The device_links_purge() function (called from device_del()) tries to
remove the links.needs_suppliers list entry, but it's using
list_del(), hence it doesn't initialize after the removal.  This is OK
for normal cases where device_del() is called via device_destroy().
However, it's not guaranteed that the device object will be really
deleted soon after device_del().  In a minor case like HD-audio codec
reconfiguration that re-initializes the device after device_del(), it
may lead to a crash by the corrupted list entry.

As a simple fix, replace list_del() with list_del_init() in order to
make the list intact after the device_del() call.

Fixes: e2ae9bcc4aaa ("driver core: Add support for linking devices during device addition")
	Cc: <stable@vger.kernel.org>
	Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
Link: https://lore.kernel.org/r/20201208190326.27531-1-tiwai@suse.de
	Cc: Saravana Kannan <saravanak@google.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 66482f640755b31cb94371ff6cef17400cda6db5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
diff --cc drivers/base/core.c
index 457e51a70c58,ba5a3cac6571..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -882,6 -1380,13 +882,16 @@@ static void device_links_purge(struct d
  {
  	struct device_link *link, *ln;
  
++<<<<<<< HEAD
++=======
+ 	if (dev->class == &devlink_class)
+ 		return;
+ 
+ 	mutex_lock(&wfs_lock);
+ 	list_del_init(&dev->links.needs_suppliers);
+ 	mutex_unlock(&wfs_lock);
+ 
++>>>>>>> 66482f640755 (driver: core: Fix list corruption after device_del())
  	/*
  	 * Delete all of the remaining links from this device to any other
  	 * devices (either consumers or suppliers).
* Unmerged path drivers/base/core.c
