net/udpgso_bench_tx: options to exercise TX CMSG

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Fred Klassen <fklassen@appneta.com>
commit 79ebc3c26010eba3b6eaaad0efdf1f8ec19aaf9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/79ebc3c2.failed

This enhancement adds options that facilitate load testing with
additional TX CMSG options, and to optionally print results of
various send CMSG operations.

These options are especially useful in isolating situations
where error-queue messages are lost when combined with other
CMSG operations (e.g. SO_ZEROCOPY).

New options:
    -a - count all CMSG messages and match to sent messages
    -T - add TX CMSG that requests TX software timestamps
    -H - similar to -T except request TX hardware timestamps
    -P - call poll() before reading error queue
    -v - print detailed results

v2: Enhancements as per Willem de Bruijn <willemb@google.com>
    - Updated control and buffer parameters for recvmsg
    - poll() parameter cleanup
    - fail on bad audit results
    - remove TOS options
    - improved reporting

v3: Enhancements as per Willem de Bruijn <willemb@google.com>
    - add SOF_TIMESTAMPING_OPT_TSONLY to eliminate MSG_TRUNC
    - general code cleanup

	Signed-off-by: Fred Klassen <fklassen@appneta.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 79ebc3c26010eba3b6eaaad0efdf1f8ec19aaf9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/net/udpgso_bench_tx.c
diff --cc tools/testing/selftests/net/udpgso_bench_tx.c
index 23dfb20d8e85,dfa83ad57206..000000000000
--- a/tools/testing/selftests/net/udpgso_bench_tx.c
+++ b/tools/testing/selftests/net/udpgso_bench_tx.c
@@@ -51,7 -59,20 +59,23 @@@ static bool	cfg_poll
  static bool	cfg_segment;
  static bool	cfg_sendmmsg;
  static bool	cfg_tcp;
+ static uint32_t	cfg_tx_ts = SOF_TIMESTAMPING_TX_SOFTWARE;
+ static bool	cfg_tx_tstamp;
+ static bool	cfg_audit;
+ static bool	cfg_verbose;
  static bool	cfg_zerocopy;
++<<<<<<< HEAD
++=======
+ static int	cfg_msg_nr;
+ static uint16_t	cfg_gso_size;
+ static unsigned long total_num_msgs;
+ static unsigned long total_num_sends;
+ static unsigned long stat_tx_ts;
+ static unsigned long stat_tx_ts_errors;
+ static unsigned long tstart;
+ static unsigned long tend;
+ static unsigned long stat_zcopies;
++>>>>>>> 79ebc3c26010 (net/udpgso_bench_tx: options to exercise TX CMSG)
  
  static socklen_t cfg_alen;
  static struct sockaddr_storage cfg_dst_addr;
@@@ -212,9 -366,12 +369,16 @@@ static void send_udp_segment_cmsg(struc
  
  static int send_udp_segment(int fd, char *data)
  {
++<<<<<<< HEAD
 +	char control[CMSG_SPACE(sizeof(cfg_mss))] = {0};
++=======
+ 	char control[CMSG_SPACE(sizeof(cfg_gso_size)) +
+ 		     CMSG_SPACE(sizeof(cfg_tx_ts))] = {0};
++>>>>>>> 79ebc3c26010 (net/udpgso_bench_tx: options to exercise TX CMSG)
  	struct msghdr msg = {0};
  	struct iovec iov = {0};
+ 	size_t msg_controllen;
+ 	struct cmsghdr *cmsg;
  	int ret;
  
  	iov.iov_base = data;
@@@ -242,7 -406,7 +414,11 @@@
  
  static void usage(const char *filepath)
  {
++<<<<<<< HEAD
 +	error(1, 0, "Usage: %s [-46cmStuz] [-C cpu] [-D dst ip] [-l secs] [-p port] [-s sendsize]",
++=======
+ 	error(1, 0, "Usage: %s [-46acmHPtTuvz] [-C cpu] [-D dst ip] [-l secs] [-M messagenr] [-p port] [-s sendsize] [-S gsosize]",
++>>>>>>> 79ebc3c26010 (net/udpgso_bench_tx: options to exercise TX CMSG)
  		    filepath);
  }
  
@@@ -251,7 -415,7 +427,11 @@@ static void parse_opts(int argc, char *
  	int max_len, hdrlen;
  	int c;
  
++<<<<<<< HEAD
 +	while ((c = getopt(argc, argv, "46cC:D:l:mp:s:Stuz")) != -1) {
++=======
+ 	while ((c = getopt(argc, argv, "46acC:D:Hl:mM:p:s:PS:tTuvz")) != -1) {
++>>>>>>> 79ebc3c26010 (net/udpgso_bench_tx: options to exercise TX CMSG)
  		switch (c) {
  		case '4':
  			if (cfg_family != PF_UNSPEC)
@@@ -287,8 -460,13 +473,12 @@@
  			cfg_payload_len = strtoul(optarg, NULL, 0);
  			break;
  		case 'S':
 -			cfg_gso_size = strtoul(optarg, NULL, 0);
  			cfg_segment = true;
  			break;
+ 		case 'H':
+ 			cfg_tx_ts = SOF_TIMESTAMPING_TX_HARDWARE;
+ 			cfg_tx_tstamp = true;
+ 			break;
  		case 't':
  			cfg_tcp = true;
  			break;
@@@ -393,17 -655,15 +665,18 @@@ int main(int argc, char **argv
  		else
  			num_sends += send_udp(fd, buf[i]);
  		num_msgs++;
++<<<<<<< HEAD
 +
 +		if (cfg_zerocopy && ((num_msgs & 0xF) == 0))
 +			flush_zerocopy(fd);
++=======
+ 		if ((cfg_zerocopy && ((num_msgs & 0xF) == 0)) || cfg_tx_tstamp)
+ 			flush_errqueue(fd, cfg_poll);
 -
 -		if (cfg_msg_nr && num_msgs >= cfg_msg_nr)
 -			break;
++>>>>>>> 79ebc3c26010 (net/udpgso_bench_tx: options to exercise TX CMSG)
  
  		tnow = gettimeofday_ms();
- 		if (tnow > treport) {
- 			fprintf(stderr,
- 				"%s tx: %6lu MB/s %8lu calls/s %6lu msg/s\n",
- 				cfg_tcp ? "tcp" : "udp",
- 				(num_msgs * cfg_payload_len) >> 20,
- 				num_sends, num_msgs);
+ 		if (tnow >= treport) {
+ 			print_report(num_msgs, num_sends);
  			num_msgs = num_sends = 0;
  			treport = tnow + 1000;
  		}
* Unmerged path tools/testing/selftests/net/udpgso_bench_tx.c
