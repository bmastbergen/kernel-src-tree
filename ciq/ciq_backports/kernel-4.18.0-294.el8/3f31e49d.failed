powerpc/watchpoint: Remove 512 byte boundary

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ravi Bangoria <ravi.bangoria@linux.ibm.com>
commit 3f31e49dc4588d396023028791e36c23235e1334
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3f31e49d.failed

Power10 has removed 512 bytes boundary from match criteria i.e. the watch
range can cross 512 bytes boundary.

Note: ISA 3.1 Book III 9.4 match criteria includes 512 byte limit but that
is a documentation mistake and hopefully will be fixed in the next version
of ISA. Though, ISA 3.1 change log mentions about removal of 512B boundary:

  Multiple DEAW:
  Added a second Data Address Watchpoint. [H]DAR is
  set to the first byte of overlap. 512B boundary is
  removed.

	Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200723090813.303838-11-ravi.bangoria@linux.ibm.com
(cherry picked from commit 3f31e49dc4588d396023028791e36c23235e1334)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/hw_breakpoint.c
diff --cc arch/powerpc/kernel/hw_breakpoint.c
index 90c5c77a5704,1f4a1efa0074..000000000000
--- a/arch/powerpc/kernel/hw_breakpoint.c
+++ b/arch/powerpc/kernel/hw_breakpoint.c
@@@ -363,6 -388,53 +363,56 @@@ int arch_bp_generic_fields(int type, in
  }
  
  /*
++<<<<<<< HEAD
++=======
+  * Watchpoint match range is always doubleword(8 bytes) aligned on
+  * powerpc. If the given range is crossing doubleword boundary, we
+  * need to increase the length such that next doubleword also get
+  * covered. Ex,
+  *
+  *          address   len = 6 bytes
+  *                |=========.
+  *   |------------v--|------v--------|
+  *   | | | | | | | | | | | | | | | | |
+  *   |---------------|---------------|
+  *    <---8 bytes--->
+  *
+  * In this case, we should configure hw as:
+  *   start_addr = address & ~(HW_BREAKPOINT_SIZE - 1)
+  *   len = 16 bytes
+  *
+  * @start_addr is inclusive but @end_addr is exclusive.
+  */
+ static int hw_breakpoint_validate_len(struct arch_hw_breakpoint *hw)
+ {
+ 	u16 max_len = DABR_MAX_LEN;
+ 	u16 hw_len;
+ 	unsigned long start_addr, end_addr;
+ 
+ 	start_addr = ALIGN_DOWN(hw->address, HW_BREAKPOINT_SIZE);
+ 	end_addr = ALIGN(hw->address + hw->len, HW_BREAKPOINT_SIZE);
+ 	hw_len = end_addr - start_addr;
+ 
+ 	if (dawr_enabled()) {
+ 		max_len = DAWR_MAX_LEN;
+ 		/* DAWR region can't cross 512 bytes boundary on p10 predecessors */
+ 		if (!cpu_has_feature(CPU_FTR_ARCH_31) &&
+ 		    (ALIGN_DOWN(start_addr, SZ_512) != ALIGN_DOWN(end_addr - 1, SZ_512)))
+ 			return -EINVAL;
+ 	} else if (IS_ENABLED(CONFIG_PPC_8xx)) {
+ 		/* 8xx can setup a range without limitation */
+ 		max_len = U16_MAX;
+ 	}
+ 
+ 	if (hw_len > max_len)
+ 		return -EINVAL;
+ 
+ 	hw->hw_len = hw_len;
+ 	return 0;
+ }
+ 
+ /*
++>>>>>>> 3f31e49dc458 (powerpc/watchpoint: Remove 512 byte boundary)
   * Validate the arch-specific HW Breakpoint register settings
   */
  int hw_breakpoint_arch_parse(struct perf_event *bp,
* Unmerged path arch/powerpc/kernel/hw_breakpoint.c
