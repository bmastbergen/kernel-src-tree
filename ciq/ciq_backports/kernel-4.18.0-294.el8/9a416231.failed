linux/time32.h: Extract common header for vDSO

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vincenzo Frascino <vincenzo.frascino@arm.com>
commit 9a4162316965818ea73701b611915deca97afece
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/9a416231.failed

The vDSO library should only include the necessary headers required for
a userspace library (UAPI and a minimal set of kernel headers). To make
this possible it is necessary to isolate from the kernel headers the
common parts that are strictly necessary to build the library.

Split time32.h into linux and common headers to make the latter suitable
for inclusion in the vDSO library.

	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20200320145351.32292-12-vincenzo.frascino@arm.com

(cherry picked from commit 9a4162316965818ea73701b611915deca97afece)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/time32.h
diff --cc include/linux/time32.h
index d1ae43c13e25,0933f28214c0..000000000000
--- a/include/linux/time32.h
+++ b/include/linux/time32.h
@@@ -10,8 -10,58 +10,61 @@@
   */
  
  #include <linux/time64.h>
 -#include <linux/timex.h>
  
++<<<<<<< HEAD
 +#define TIME_T_MAX	(time_t)((1UL << ((sizeof(time_t) << 3) - 1)) - 1)
++=======
+ #include <vdso/time32.h>
+ 
+ #define TIME_T_MAX	(__kernel_old_time_t)((1UL << ((sizeof(__kernel_old_time_t) << 3) - 1)) - 1)
+ 
+ struct old_itimerspec32 {
+ 	struct old_timespec32 it_interval;
+ 	struct old_timespec32 it_value;
+ };
+ 
+ struct old_utimbuf32 {
+ 	old_time32_t	actime;
+ 	old_time32_t	modtime;
+ };
+ 
+ struct old_timex32 {
+ 	u32 modes;
+ 	s32 offset;
+ 	s32 freq;
+ 	s32 maxerror;
+ 	s32 esterror;
+ 	s32 status;
+ 	s32 constant;
+ 	s32 precision;
+ 	s32 tolerance;
+ 	struct old_timeval32 time;
+ 	s32 tick;
+ 	s32 ppsfreq;
+ 	s32 jitter;
+ 	s32 shift;
+ 	s32 stabil;
+ 	s32 jitcnt;
+ 	s32 calcnt;
+ 	s32 errcnt;
+ 	s32 stbcnt;
+ 	s32 tai;
+ 
+ 	s32:32; s32:32; s32:32; s32:32;
+ 	s32:32; s32:32; s32:32; s32:32;
+ 	s32:32; s32:32; s32:32;
+ };
+ 
+ extern int get_old_timespec32(struct timespec64 *, const void __user *);
+ extern int put_old_timespec32(const struct timespec64 *, void __user *);
+ extern int get_old_itimerspec32(struct itimerspec64 *its,
+ 			const struct old_itimerspec32 __user *uits);
+ extern int put_old_itimerspec32(const struct itimerspec64 *its,
+ 			struct old_itimerspec32 __user *uits);
+ struct __kernel_timex;
+ int get_old_timex32(struct __kernel_timex *, const struct old_timex32 __user *);
+ int put_old_timex32(struct old_timex32 __user *, const struct __kernel_timex *);
++>>>>>>> 9a4162316965 (linux/time32.h: Extract common header for vDSO)
  
  #if __BITS_PER_LONG == 64
  
* Unmerged path include/linux/time32.h
diff --git a/include/vdso/time32.h b/include/vdso/time32.h
new file mode 100644
index 000000000000..fdf56f932f67
--- /dev/null
+++ b/include/vdso/time32.h
@@ -0,0 +1,17 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __VDSO_TIME32_H
+#define __VDSO_TIME32_H
+
+typedef s32		old_time32_t;
+
+struct old_timespec32 {
+	old_time32_t	tv_sec;
+	s32		tv_nsec;
+};
+
+struct old_timeval32 {
+	old_time32_t	tv_sec;
+	s32		tv_usec;
+};
+
+#endif /* __VDSO_TIME32_H */
