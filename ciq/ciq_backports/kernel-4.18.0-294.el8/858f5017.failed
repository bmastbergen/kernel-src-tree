tcp: do not recycle cloned skbs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 858f5017446764e8bca0b29589a3b164186ae471
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/858f5017.failed

It is illegal to change arbitrary fields in skb_shared_info if the
skb is cloned.

Before calling skb_zcopy_clear() we need to ensure this rule,
therefore we need to move the test from sk_stream_alloc_skb()
to sk_wmem_free_skb()

Fixes: 4f661542a402 ("tcp: fix zerocopy and notsent_lowat issues")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
Diagnosed-by: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 858f5017446764e8bca0b29589a3b164186ae471)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sock.h
#	net/ipv4/tcp.c
diff --cc include/net/sock.h
index 50c624432ded,0680fa988497..000000000000
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@@ -1538,8 -1470,14 +1538,16 @@@ static inline void sk_mem_uncharge(stru
  
  static inline void sk_wmem_free_skb(struct sock *sk, struct sk_buff *skb)
  {
 -	sock_set_flag(sk, SOCK_QUEUE_SHRUNK);
 -	sk->sk_wmem_queued -= skb->truesize;
 +	sk_wmem_queued_add(sk, -skb->truesize);
  	sk_mem_uncharge(sk, skb->truesize);
++<<<<<<< HEAD
++=======
+ 	if (!sk->sk_tx_skb_cache && !skb_cloned(skb)) {
+ 		skb_zcopy_clear(skb, true);
+ 		sk->sk_tx_skb_cache = skb;
+ 		return;
+ 	}
++>>>>>>> 858f50174467 (tcp: do not recycle cloned skbs)
  	__kfree_skb(skb);
  }
  
diff --cc net/ipv4/tcp.c
index 93a220a78f1b,53d61ca3ac4b..000000000000
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@@ -867,6 -853,18 +867,21 @@@ struct sk_buff *sk_stream_alloc_skb(str
  {
  	struct sk_buff *skb;
  
++<<<<<<< HEAD
++=======
+ 	if (likely(!size)) {
+ 		skb = sk->sk_tx_skb_cache;
+ 		if (skb) {
+ 			skb->truesize = SKB_TRUESIZE(skb_end_offset(skb));
+ 			sk->sk_tx_skb_cache = NULL;
+ 			pskb_trim(skb, 0);
+ 			INIT_LIST_HEAD(&skb->tcp_tsorted_anchor);
+ 			skb_shinfo(skb)->tx_flags = 0;
+ 			memset(TCP_SKB_CB(skb), 0, sizeof(struct tcp_skb_cb));
+ 			return skb;
+ 		}
+ 	}
++>>>>>>> 858f50174467 (tcp: do not recycle cloned skbs)
  	/* The TCP header must be at least 32-bit aligned.  */
  	size = ALIGN(size, 4);
  
* Unmerged path include/net/sock.h
* Unmerged path net/ipv4/tcp.c
