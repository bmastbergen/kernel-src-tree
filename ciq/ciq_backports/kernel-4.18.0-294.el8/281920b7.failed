bpf: Devmap adjust uapi for attach bpf program

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jesper Dangaard Brouer <brouer@redhat.com>
commit 281920b7e0b31e0a7706433ff58e7d52ac97c327
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/281920b7.failed

V2:
- Defer changing BPF-syscall to start at file-descriptor 1
- Use {} to zero initialise struct.

The recent commit fbee97feed9b ("bpf: Add support to attach bpf program to a
devmap entry"), introduced ability to attach (and run) a separate XDP
bpf_prog for each devmap entry. A bpf_prog is added via a file-descriptor.
As zero were a valid FD, not using the feature requires using value minus-1.
The UAPI is extended via tail-extending struct bpf_devmap_val and using
map->value_size to determine the feature set.

This will break older userspace applications not using the bpf_prog feature.
Consider an old userspace app that is compiled against newer kernel
uapi/bpf.h, it will not know that it need to initialise the member
bpf_prog.fd to minus-1. Thus, users will be forced to update source code to
get program running on newer kernels.

This patch remove the minus-1 checks, and have zero mean feature isn't used.

Followup patches either for kernel or libbpf should handle and avoid
returning file-descriptor zero in the first place.

Fixes: fbee97feed9b ("bpf: Add support to attach bpf program to a devmap entry")
	Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/159170950687.2102545.7235914718298050113.stgit@firesoul
(cherry picked from commit 281920b7e0b31e0a7706433ff58e7d52ac97c327)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/devmap.c
diff --cc kernel/bpf/devmap.c
index 2c33953067b1,0cbb72cdaf63..000000000000
--- a/kernel/bpf/devmap.c
+++ b/kernel/bpf/devmap.c
@@@ -68,11 -60,6 +68,14 @@@ struct xdp_dev_bulk_queue 
  	unsigned int count;
  };
  
++<<<<<<< HEAD
 +/* DEVMAP values */
 +struct bpf_devmap_val {
 +	u32 ifindex;   /* device index */
 +};
 +
++=======
++>>>>>>> 281920b7e0b3 (bpf: Devmap adjust uapi for attach bpf program)
  struct bpf_dtab_netdev {
  	struct net_device *dev; /* must be first member, due to tracepoint */
  	struct hlist_node index_hlist;
@@@ -568,8 -610,24 +571,20 @@@ static struct bpf_dtab_netdev *__dev_ma
  	if (!dev->dev)
  		goto err_out;
  
++<<<<<<< HEAD
++=======
+ 	if (val->bpf_prog.fd > 0) {
+ 		prog = bpf_prog_get_type_dev(val->bpf_prog.fd,
+ 					     BPF_PROG_TYPE_XDP, false);
+ 		if (IS_ERR(prog))
+ 			goto err_put_dev;
+ 		if (prog->expected_attach_type != BPF_XDP_DEVMAP)
+ 			goto err_put_prog;
+ 	}
+ 
++>>>>>>> 281920b7e0b3 (bpf: Devmap adjust uapi for attach bpf program)
  	dev->idx = idx;
  	dev->dtab = dtab;
 -	if (prog) {
 -		dev->xdp_prog = prog;
 -		dev->val.bpf_prog.id = prog->aux->id;
 -	} else {
 -		dev->xdp_prog = NULL;
 -		dev->val.bpf_prog.id = 0;
 -	}
  	dev->val.ifindex = val->ifindex;
  
  	return dev;
@@@ -583,7 -645,7 +598,11 @@@ static int __dev_map_update_elem(struc
  {
  	struct bpf_dtab *dtab = container_of(map, struct bpf_dtab, map);
  	struct bpf_dtab_netdev *dev, *old_dev;
++<<<<<<< HEAD
 +	struct bpf_devmap_val val = { };
++=======
+ 	struct bpf_devmap_val val = {};
++>>>>>>> 281920b7e0b3 (bpf: Devmap adjust uapi for attach bpf program)
  	u32 i = *(u32 *)key;
  
  	if (unlikely(map_flags > BPF_EXIST))
@@@ -598,6 -660,9 +617,12 @@@
  
  	if (!val.ifindex) {
  		dev = NULL;
++<<<<<<< HEAD
++=======
+ 		/* can not specify fd if ifindex is 0 */
+ 		if (val.bpf_prog.fd > 0)
+ 			return -EINVAL;
++>>>>>>> 281920b7e0b3 (bpf: Devmap adjust uapi for attach bpf program)
  	} else {
  		dev = __dev_map_alloc_node(net, dtab, &val, i);
  		if (IS_ERR(dev))
@@@ -627,7 -692,7 +652,11 @@@ static int __dev_map_hash_update_elem(s
  {
  	struct bpf_dtab *dtab = container_of(map, struct bpf_dtab, map);
  	struct bpf_dtab_netdev *dev, *old_dev;
++<<<<<<< HEAD
 +	struct bpf_devmap_val val = { };
++=======
+ 	struct bpf_devmap_val val = {};
++>>>>>>> 281920b7e0b3 (bpf: Devmap adjust uapi for attach bpf program)
  	u32 idx = *(u32 *)key;
  	unsigned long flags;
  	int err = -EEXIST;
diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 7ccb96ed0b1f..9b67370525f5 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3595,6 +3595,19 @@ struct xdp_md {
 	__u32 rx_queue_index;  /* rxq->queue_index  */
 };
 
+/* DEVMAP map-value layout
+ *
+ * The struct data-layout of map-value is a configuration interface.
+ * New members can only be added to the end of this structure.
+ */
+struct bpf_devmap_val {
+	__u32 ifindex;   /* device index */
+	union {
+		int   fd;  /* prog fd on map write */
+		__u32 id;  /* prog id on map read */
+	} bpf_prog;
+};
+
 enum sk_action {
 	SK_DROP = 0,
 	SK_PASS,
* Unmerged path kernel/bpf/devmap.c
