net: atlantic: additional per-queue stats

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Dmitry Bogdanov <dbogdanov@marvell.com>
commit aa7e17a3e35a6e3fbf4ab2055a64097efcd09310
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/aa7e17a3.failed

This patch adds additional per-queue stats, these could
be useful for debugging and diagnostics.

	Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
	Signed-off-by: Mark Starovoytov <mstarovoitov@marvell.com>
	Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit aa7e17a3e35a6e3fbf4ab2055a64097efcd09310)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
#	drivers/net/ethernet/aquantia/atlantic/aq_ring.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
index a64230722f5c,9e18d30d2e44..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
@@@ -83,15 -89,109 +83,26 @@@ static const char aq_ethtool_stat_names
  	"InDroppedDma",
  };
  
++<<<<<<< HEAD
 +static const char aq_ethtool_queue_stat_names[][ETH_GSTRING_LEN] = {
 +	"Queue[%d] InPackets",
 +	"Queue[%d] OutPackets",
 +	"Queue[%d] Restarts",
 +	"Queue[%d] InJumboPackets",
 +	"Queue[%d] InLroPackets",
 +	"Queue[%d] InErrors",
++=======
+ static const char * const aq_ethtool_queue_rx_stat_names[] = {
+ 	"%sQueue[%d] InPackets",
+ 	"%sQueue[%d] InJumboPackets",
+ 	"%sQueue[%d] InLroPackets",
+ 	"%sQueue[%d] InErrors",
+ 	"%sQueue[%d] AllocFails",
+ 	"%sQueue[%d] SkbAllocFails",
+ 	"%sQueue[%d] Polls",
++>>>>>>> aa7e17a3e35a (net: atlantic: additional per-queue stats)
  };
  
 -static const char * const aq_ethtool_queue_tx_stat_names[] = {
 -	"%sQueue[%d] OutPackets",
 -	"%sQueue[%d] Restarts",
 -};
 -
 -#if IS_ENABLED(CONFIG_MACSEC)
 -static const char aq_macsec_stat_names[][ETH_GSTRING_LEN] = {
 -	"MACSec InCtlPackets",
 -	"MACSec InTaggedMissPackets",
 -	"MACSec InUntaggedMissPackets",
 -	"MACSec InNotagPackets",
 -	"MACSec InUntaggedPackets",
 -	"MACSec InBadTagPackets",
 -	"MACSec InNoSciPackets",
 -	"MACSec InUnknownSciPackets",
 -	"MACSec InCtrlPortPassPackets",
 -	"MACSec InUnctrlPortPassPackets",
 -	"MACSec InCtrlPortFailPackets",
 -	"MACSec InUnctrlPortFailPackets",
 -	"MACSec InTooLongPackets",
 -	"MACSec InIgpocCtlPackets",
 -	"MACSec InEccErrorPackets",
 -	"MACSec InUnctrlHitDropRedir",
 -	"MACSec OutCtlPackets",
 -	"MACSec OutUnknownSaPackets",
 -	"MACSec OutUntaggedPackets",
 -	"MACSec OutTooLong",
 -	"MACSec OutEccErrorPackets",
 -	"MACSec OutUnctrlHitDropRedir",
 -};
 -
 -static const char * const aq_macsec_txsc_stat_names[] = {
 -	"MACSecTXSC%d ProtectedPkts",
 -	"MACSecTXSC%d EncryptedPkts",
 -	"MACSecTXSC%d ProtectedOctets",
 -	"MACSecTXSC%d EncryptedOctets",
 -};
 -
 -static const char * const aq_macsec_txsa_stat_names[] = {
 -	"MACSecTXSC%dSA%d HitDropRedirect",
 -	"MACSecTXSC%dSA%d Protected2Pkts",
 -	"MACSecTXSC%dSA%d ProtectedPkts",
 -	"MACSecTXSC%dSA%d EncryptedPkts",
 -};
 -
 -static const char * const aq_macsec_rxsa_stat_names[] = {
 -	"MACSecRXSC%dSA%d UntaggedHitPkts",
 -	"MACSecRXSC%dSA%d CtrlHitDrpRedir",
 -	"MACSecRXSC%dSA%d NotUsingSa",
 -	"MACSecRXSC%dSA%d UnusedSa",
 -	"MACSecRXSC%dSA%d NotValidPkts",
 -	"MACSecRXSC%dSA%d InvalidPkts",
 -	"MACSecRXSC%dSA%d OkPkts",
 -	"MACSecRXSC%dSA%d LatePkts",
 -	"MACSecRXSC%dSA%d DelayedPkts",
 -	"MACSecRXSC%dSA%d UncheckedPkts",
 -	"MACSecRXSC%dSA%d ValidatedOctets",
 -	"MACSecRXSC%dSA%d DecryptedOctets",
 -};
 -#endif
 -
 -static const char aq_ethtool_priv_flag_names[][ETH_GSTRING_LEN] = {
 -	"DMASystemLoopback",
 -	"PKTSystemLoopback",
 -	"DMANetworkLoopback",
 -	"PHYInternalLoopback",
 -	"PHYExternalLoopback",
 -};
 -
 -static u32 aq_ethtool_n_stats(struct net_device *ndev)
 -{
 -	const int rx_stat_cnt = ARRAY_SIZE(aq_ethtool_queue_rx_stat_names);
 -	const int tx_stat_cnt = ARRAY_SIZE(aq_ethtool_queue_tx_stat_names);
 -	struct aq_nic_s *nic = netdev_priv(ndev);
 -	struct aq_nic_cfg_s *cfg = aq_nic_get_cfg(nic);
 -	u32 n_stats = ARRAY_SIZE(aq_ethtool_stat_names) +
 -		      (rx_stat_cnt + tx_stat_cnt) * cfg->vecs * cfg->tcs;
 -
 -#if IS_ENABLED(CONFIG_MACSEC)
 -	if (nic->macsec_cfg) {
 -		n_stats += ARRAY_SIZE(aq_macsec_stat_names) +
 -			   ARRAY_SIZE(aq_macsec_txsc_stat_names) *
 -				   aq_macsec_tx_sc_cnt(nic) +
 -			   ARRAY_SIZE(aq_macsec_txsa_stat_names) *
 -				   aq_macsec_tx_sa_cnt(nic) +
 -			   ARRAY_SIZE(aq_macsec_rxsa_stat_names) *
 -				   aq_macsec_rx_sa_cnt(nic);
 -	}
 -#endif
 -
 -	return n_stats;
 -}
 -
  static void aq_ethtool_stats(struct net_device *ndev,
  			     struct ethtool_stats *stats, u64 *data)
  {
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_ring.c
index 26476a262015,4f913658eea4..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ring.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ring.c
@@@ -492,6 -594,35 +503,40 @@@ void aq_ring_free(struct aq_ring_s *sel
  		dma_free_coherent(aq_nic_get_dev(self->aq_nic),
  				  self->size * self->dx_size, self->dx_ring,
  				  self->dx_ring_pa);
++<<<<<<< HEAD
 +
 +err_exit:;
++=======
+ }
+ 
+ unsigned int aq_ring_fill_stats_data(struct aq_ring_s *self, u64 *data)
+ {
+ 	unsigned int count;
+ 	unsigned int start;
+ 
+ 	if (self->ring_type == ATL_RING_RX) {
+ 		/* This data should mimic aq_ethtool_queue_rx_stat_names structure */
+ 		do {
+ 			count = 0;
+ 			start = u64_stats_fetch_begin_irq(&self->stats.rx.syncp);
+ 			data[count] = self->stats.rx.packets;
+ 			data[++count] = self->stats.rx.jumbo_packets;
+ 			data[++count] = self->stats.rx.lro_packets;
+ 			data[++count] = self->stats.rx.errors;
+ 			data[++count] = self->stats.rx.alloc_fails;
+ 			data[++count] = self->stats.rx.skb_alloc_fails;
+ 			data[++count] = self->stats.rx.polls;
+ 		} while (u64_stats_fetch_retry_irq(&self->stats.rx.syncp, start));
+ 	} else {
+ 		/* This data should mimic aq_ethtool_queue_tx_stat_names structure */
+ 		do {
+ 			count = 0;
+ 			start = u64_stats_fetch_begin_irq(&self->stats.tx.syncp);
+ 			data[count] = self->stats.tx.packets;
+ 			data[++count] = self->stats.tx.queue_restarts;
+ 		} while (u64_stats_fetch_retry_irq(&self->stats.tx.syncp, start));
+ 	}
+ 
+ 	return ++count;
++>>>>>>> aa7e17a3e35a (net: atlantic: additional per-queue stats)
  }
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_ethtool.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_ring.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_ring.h b/drivers/net/ethernet/aquantia/atlantic/aq_ring.h
index cfffc301e746..91cd90629a0d 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_ring.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_ring.h
@@ -91,6 +91,9 @@ struct aq_ring_stats_rx_s {
 	u64 bytes;
 	u64 lro_packets;
 	u64 jumbo_packets;
+	u64 alloc_fails;
+	u64 skb_alloc_fails;
+	u64 polls;
 	u64 pg_losts;
 	u64 pg_flips;
 	u64 pg_reuses;
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_vec.c b/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
index e9e3905626ba..250793074384 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_vec.c
@@ -47,6 +47,9 @@ static int aq_vec_poll(struct napi_struct *napi, int budget)
 	} else {
 		for (i = 0U, ring = self->ring[0];
 			self->tx_rings > i; ++i, ring = self->ring[i]) {
+			u64_stats_update_begin(&ring[AQ_VEC_RX_ID].stats.rx.syncp);
+			ring[AQ_VEC_RX_ID].stats.rx.polls++;
+			u64_stats_update_end(&ring[AQ_VEC_RX_ID].stats.rx.syncp);
 			if (self->aq_hw_ops->hw_ring_tx_head_update) {
 				err = self->aq_hw_ops->hw_ring_tx_head_update(
 							self->aq_hw,
