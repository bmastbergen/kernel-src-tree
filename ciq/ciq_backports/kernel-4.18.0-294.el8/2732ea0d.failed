efi/libstub: Use a helper to iterate over a EFI handle array

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Ard Biesheuvel <ardb@kernel.org>
commit 2732ea0d5c0a67ec86bfbde2bd68b6152e23ec4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/2732ea0d.failed

Iterating over a EFI handle array is a bit finicky, since we have
to take mixed mode into account, where handles are only 32-bit
while the native efi_handle_t type is 64-bit.

So introduce a helper, and replace the various occurrences of
this pattern.

	Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
	Cc: Arvind Sankar <nivedita@alum.mit.edu>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: James Morse <james.morse@arm.com>
	Cc: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-efi@vger.kernel.org
Link: https://lkml.kernel.org/r/20191224151025.32482-8-ardb@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 2732ea0d5c0a67ec86bfbde2bd68b6152e23ec4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/eboot.c
diff --cc arch/x86/boot/compressed/eboot.c
index 10bf056d4aae,959bcdd8c1fe..000000000000
--- a/arch/x86/boot/compressed/eboot.c
+++ b/arch/x86/boot/compressed/eboot.c
@@@ -286,6 -133,10 +286,13 @@@ static void setup_efi_pci(struct boot_p
  	void **pci_handle = NULL;
  	efi_guid_t pci_proto = EFI_PCI_IO_PROTOCOL_GUID;
  	unsigned long size = 0;
++<<<<<<< HEAD
++=======
+ 	unsigned long nr_pci;
+ 	struct setup_data *data;
+ 	efi_handle_t h;
+ 	int i;
++>>>>>>> 2732ea0d5c0a (efi/libstub: Use a helper to iterate over a EFI handle array)
  
  	status = efi_call_early(locate_handle,
  				EFI_LOCATE_BY_PROTOCOL,
@@@ -309,10 -160,31 +316,38 @@@
  	if (status != EFI_SUCCESS)
  		goto free_handle;
  
++<<<<<<< HEAD
 +	if (efi_early->is64)
 +		setup_efi_pci64(params, pci_handle, size);
 +	else
 +		setup_efi_pci32(params, pci_handle, size);
++=======
+ 	data = (struct setup_data *)(unsigned long)params->hdr.setup_data;
+ 
+ 	while (data && data->next)
+ 		data = (struct setup_data *)(unsigned long)data->next;
+ 
+ 	for_each_efi_handle(h, pci_handle, size, i) {
+ 		efi_pci_io_protocol_t *pci = NULL;
+ 		struct pci_setup_rom *rom;
+ 
+ 		status = efi_call_early(handle_protocol, h,
+ 					&pci_proto, (void **)&pci);
+ 		if (status != EFI_SUCCESS || !pci)
+ 			continue;
+ 
+ 		status = preserve_pci_rom_image(pci, &rom);
+ 		if (status != EFI_SUCCESS)
+ 			continue;
+ 
+ 		if (data)
+ 			data->next = (unsigned long)rom;
+ 		else
+ 			params->hdr.setup_data = (unsigned long)rom;
+ 
+ 		data = (struct setup_data *)rom;
+ 	}
++>>>>>>> 2732ea0d5c0a (efi/libstub: Use a helper to iterate over a EFI handle array)
  
  free_handle:
  	efi_call_early(free_pool, pci_handle);
* Unmerged path arch/x86/boot/compressed/eboot.c
diff --git a/drivers/firmware/efi/libstub/gop.c b/drivers/firmware/efi/libstub/gop.c
index 5e52a4ea93b8..6e173fbe5f48 100644
--- a/drivers/firmware/efi/libstub/gop.c
+++ b/drivers/firmware/efi/libstub/gop.c
@@ -93,7 +93,6 @@ setup_gop(efi_system_table_t *sys_table_arg, struct screen_info *si,
 	  efi_guid_t *proto, unsigned long size, void **handles)
 {
 	efi_graphics_output_protocol_t *gop, *first_gop;
-	unsigned long nr_gops;
 	u16 width, height;
 	u32 pixels_per_scan_line;
 	u32 ext_lfb_base;
@@ -101,22 +100,18 @@ setup_gop(efi_system_table_t *sys_table_arg, struct screen_info *si,
 	efi_pixel_bitmask_t pixel_info;
 	int pixel_format;
 	efi_status_t status;
+	efi_handle_t h;
 	int i;
-	bool is64 = efi_is_64bit();
 
 	first_gop = NULL;
 	gop = NULL;
 
-	nr_gops = size / (is64 ? sizeof(u64) : sizeof(u32));
-	for (i = 0; i < nr_gops; i++) {
+	for_each_efi_handle(h, handles, size, i) {
 		efi_graphics_output_protocol_mode_t *mode;
 		efi_graphics_output_mode_info_t *info = NULL;
 		efi_guid_t conout_proto = EFI_CONSOLE_OUT_DEVICE_GUID;
 		bool conout_found = false;
 		void *dummy = NULL;
-		efi_handle_t h = (efi_handle_t)(unsigned long)
-				 (is64 ? ((u64 *)handles)[i]
-				       : ((u32 *)handles)[i]);
 		efi_physical_addr_t current_fb_base;
 
 		status = efi_call_early(handle_protocol, h,
diff --git a/include/linux/efi.h b/include/linux/efi.h
index 2452f36aa11e..73b719e320c5 100644
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@ -48,6 +48,19 @@ typedef u16 efi_char16_t;		/* UNICODE character */
 typedef u64 efi_physical_addr_t;
 typedef void *efi_handle_t;
 
+#define efi_get_handle_at(array, idx)					\
+	(efi_is_64bit() ? (efi_handle_t)(unsigned long)((u64 *)(array))[idx] \
+		: (efi_handle_t)(unsigned long)((u32 *)(array))[idx])
+
+#define efi_get_handle_num(size)					\
+	((size) / (efi_is_64bit() ? sizeof(u64) : sizeof(u32)))
+
+#define for_each_efi_handle(handle, array, size, i)			\
+	for (i = 0;							\
+	     i < efi_get_handle_num(size) &&				\
+		((handle = efi_get_handle_at((array), i)) || true);	\
+	     i++)
+
 /*
  * The UEFI spec and EDK2 reference implementation both define EFI_GUID as
  * struct { u32 a; u16; b; u16 c; u8 d[8]; }; and so the implied alignment
