bpf: Add link-based BPF program attachment to network namespace

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jakub Sitnicki <jakub@cloudflare.com>
commit 7f045a49fee04b5662cbdeaf0838f9322ae8c63a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/7f045a49.failed

Extend bpf() syscall subcommands that operate on bpf_link, that is
LINK_CREATE, LINK_UPDATE, OBJ_GET_INFO, to accept attach types tied to
network namespaces (only flow dissector at the moment).

Link-based and prog-based attachment can be used interchangeably, but only
one can exist at a time. Attempts to attach a link when a prog is already
attached directly, and the other way around, will be met with -EEXIST.
Attempts to detach a program when link exists result in -EINVAL.

Attachment of multiple links of same attach type to one netns is not
supported with the intention to lift the restriction when a use-case
presents itself. Because of that link create returns -E2BIG when trying to
create another netns link, when one already exists.

Link-based attachments to netns don't keep a netns alive by holding a ref
to it. Instead links get auto-detached from netns when the latter is being
destroyed, using a pernet pre_exit callback.

When auto-detached, link lives in defunct state as long there are open FDs
for it. -ENOLINK is returned if a user tries to update a defunct link.

Because bpf_link to netns doesn't hold a ref to struct net, special care is
taken when releasing, updating, or filling link info. The netns might be
getting torn down when any of these link operations are in progress. That
is why auto-detach and update/release/fill_info are synchronized by the
same mutex. Also, link ops have to always check if auto-detach has not
happened yet and if netns is still alive (refcnt > 0).

	Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200531082846.2117903-5-jakub@cloudflare.com
(cherry picked from commit 7f045a49fee04b5662cbdeaf0838f9322ae8c63a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf-netns.h
#	include/linux/bpf_types.h
#	include/net/netns/bpf.h
#	include/uapi/linux/bpf.h
#	kernel/bpf/net_namespace.c
#	kernel/bpf/syscall.c
#	tools/include/uapi/linux/bpf.h
diff --cc include/linux/bpf_types.h
index 8345cdf553b8,a18ae82a298a..000000000000
--- a/include/linux/bpf_types.h
+++ b/include/linux/bpf_types.h
@@@ -124,3 -125,7 +124,10 @@@ BPF_LINK_TYPE(BPF_LINK_TYPE_TRACING, tr
  #ifdef CONFIG_CGROUP_BPF
  BPF_LINK_TYPE(BPF_LINK_TYPE_CGROUP, cgroup)
  #endif
++<<<<<<< HEAD
++=======
+ BPF_LINK_TYPE(BPF_LINK_TYPE_ITER, iter)
+ #ifdef CONFIG_NET
+ BPF_LINK_TYPE(BPF_LINK_TYPE_NETNS, netns)
+ #endif
++>>>>>>> 7f045a49fee0 (bpf: Add link-based BPF program attachment to network namespace)
diff --cc include/uapi/linux/bpf.h
index af3754a78dbd,b9ed9f14f2a2..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -233,6 -236,8 +233,11 @@@ enum bpf_link_type 
  	BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
  	BPF_LINK_TYPE_TRACING = 2,
  	BPF_LINK_TYPE_CGROUP = 3,
++<<<<<<< HEAD
++=======
+ 	BPF_LINK_TYPE_ITER = 4,
+ 	BPF_LINK_TYPE_NETNS = 5,
++>>>>>>> 7f045a49fee0 (bpf: Add link-based BPF program attachment to network namespace)
  
  	MAX_BPF_LINK_TYPE,
  };
diff --cc kernel/bpf/syscall.c
index 9186e511feb3,e14a842d7e0d..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -3830,6 -3884,12 +3830,15 @@@ static int link_create(union bpf_attr *
  	case BPF_PROG_TYPE_CGROUP_SOCKOPT:
  		ret = cgroup_bpf_link_attach(attr, prog);
  		break;
++<<<<<<< HEAD
++=======
+ 	case BPF_PROG_TYPE_TRACING:
+ 		ret = tracing_bpf_link_attach(attr, prog);
+ 		break;
+ 	case BPF_PROG_TYPE_FLOW_DISSECTOR:
+ 		ret = netns_bpf_link_create(attr, prog);
+ 		break;
++>>>>>>> 7f045a49fee0 (bpf: Add link-based BPF program attachment to network namespace)
  	default:
  		ret = -EINVAL;
  	}
diff --cc tools/include/uapi/linux/bpf.h
index fc883a643880,b9ed9f14f2a2..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -227,6 -236,8 +227,11 @@@ enum bpf_link_type 
  	BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
  	BPF_LINK_TYPE_TRACING = 2,
  	BPF_LINK_TYPE_CGROUP = 3,
++<<<<<<< HEAD
++=======
+ 	BPF_LINK_TYPE_ITER = 4,
+ 	BPF_LINK_TYPE_NETNS = 5,
++>>>>>>> 7f045a49fee0 (bpf: Add link-based BPF program attachment to network namespace)
  
  	MAX_BPF_LINK_TYPE,
  };
* Unmerged path include/linux/bpf-netns.h
* Unmerged path include/net/netns/bpf.h
* Unmerged path kernel/bpf/net_namespace.c
* Unmerged path include/linux/bpf-netns.h
* Unmerged path include/linux/bpf_types.h
* Unmerged path include/net/netns/bpf.h
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path kernel/bpf/net_namespace.c
* Unmerged path kernel/bpf/syscall.c
* Unmerged path tools/include/uapi/linux/bpf.h
