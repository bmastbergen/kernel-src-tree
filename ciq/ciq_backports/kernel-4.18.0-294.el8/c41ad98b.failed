nvme: skip noiob for zoned devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Keith Busch <kbusch@kernel.org>
commit c41ad98bebb8f4f0335b3c50dbb7583a6149dce4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c41ad98b.failed

Zoned block devices reuse the chunk_sectors queue limit to define zone
boundaries. If a such a device happens to also report an optimal
boundary, do not use that to define the chunk_sectors as that may
intermittently interfere with io splitting and zone size queries.

	Signed-off-by: Keith Busch <kbusch@kernel.org>
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit c41ad98bebb8f4f0335b3c50dbb7583a6149dce4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index f58cc90f5be8,6c0d175f2ffa..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1998,7 -2052,30 +1998,34 @@@ static void __nvme_revalidate_disk(stru
  	else
  		ns->pi_type = 0;
  
++<<<<<<< HEAD
 +	if (iob)
++=======
+ 	if (ns->ms) {
+ 		/*
+ 		 * For PCIe only the separate metadata pointer is supported,
+ 		 * as the block layer supplies metadata in a separate bio_vec
+ 		 * chain. For Fabrics, only metadata as part of extended data
+ 		 * LBA is supported on the wire per the Fabrics specification,
+ 		 * but the HBA/HCA will do the remapping from the separate
+ 		 * metadata buffers for us.
+ 		 */
+ 		if (id->flbas & NVME_NS_FLBAS_META_EXT) {
+ 			ns->features |= NVME_NS_EXT_LBAS;
+ 			if ((ctrl->ops->flags & NVME_F_FABRICS) &&
+ 			    (ctrl->ops->flags & NVME_F_METADATA_SUPPORTED) &&
+ 			    ctrl->max_integrity_segments)
+ 				ns->features |= NVME_NS_METADATA_SUPPORTED;
+ 		} else {
+ 			if (WARN_ON_ONCE(ctrl->ops->flags & NVME_F_FABRICS))
+ 				return -EINVAL;
+ 			if (ctrl->ops->flags & NVME_F_METADATA_SUPPORTED)
+ 				ns->features |= NVME_NS_METADATA_SUPPORTED;
+ 		}
+ 	}
+ 
+ 	if (iob && !blk_queue_is_zoned(ns->queue))
++>>>>>>> c41ad98bebb8 (nvme: skip noiob for zoned devices)
  		blk_queue_chunk_sectors(ns->queue, rounddown_pow_of_two(iob));
  	nvme_update_disk_info(disk, ns, id);
  #ifdef CONFIG_NVME_MULTIPATH
* Unmerged path drivers/nvme/host/core.c
