libbpf: Add support for bpf_link-based netns attachment

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jakub Sitnicki <jakub@cloudflare.com>
commit d60d81acc2c180e33244857e35ef60072573b000
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/d60d81ac.failed

Add bpf_program__attach_nets(), which uses LINK_CREATE subcommand to create
an FD-based kernel bpf_link, for attach types tied to network namespace,
that is BPF_FLOW_DISSECTOR for the moment.

	Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200531082846.2117903-7-jakub@cloudflare.com
(cherry picked from commit d60d81acc2c180e33244857e35ef60072573b000)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/libbpf.c
index 4ef192460aad,7f01be2b88b8..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -7875,8 -7890,15 +7875,20 @@@ static struct bpf_link *attach_lsm(cons
  	return bpf_program__attach_lsm(prog);
  }
  
++<<<<<<< HEAD
 +struct bpf_link *
 +bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd)
++=======
+ static struct bpf_link *attach_iter(const struct bpf_sec_def *sec,
+ 				    struct bpf_program *prog)
+ {
+ 	return bpf_program__attach_iter(prog, NULL);
+ }
+ 
+ static struct bpf_link *
+ bpf_program__attach_fd(struct bpf_program *prog, int target_fd,
+ 		       const char *target_name)
++>>>>>>> d60d81acc2c1 (libbpf: Add support for bpf_link-based netns attachment)
  {
  	enum bpf_attach_type attach_type;
  	char errmsg[STRERR_BUFSIZE];
@@@ -7896,7 -7918,55 +7908,57 @@@
  	link->detach = &bpf_link__detach_fd;
  
  	attach_type = bpf_program__get_expected_attach_type(prog);
- 	link_fd = bpf_link_create(prog_fd, cgroup_fd, attach_type, NULL);
+ 	link_fd = bpf_link_create(prog_fd, target_fd, attach_type, NULL);
+ 	if (link_fd < 0) {
+ 		link_fd = -errno;
+ 		free(link);
+ 		pr_warn("program '%s': failed to attach to %s: %s\n",
+ 			bpf_program__title(prog, false), target_name,
+ 			libbpf_strerror_r(link_fd, errmsg, sizeof(errmsg)));
+ 		return ERR_PTR(link_fd);
+ 	}
+ 	link->fd = link_fd;
+ 	return link;
+ }
+ 
++<<<<<<< HEAD
++=======
+ struct bpf_link *
+ bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd)
+ {
+ 	return bpf_program__attach_fd(prog, cgroup_fd, "cgroup");
+ }
+ 
+ struct bpf_link *
+ bpf_program__attach_netns(struct bpf_program *prog, int netns_fd)
+ {
+ 	return bpf_program__attach_fd(prog, netns_fd, "netns");
+ }
+ 
+ struct bpf_link *
+ bpf_program__attach_iter(struct bpf_program *prog,
+ 			 const struct bpf_iter_attach_opts *opts)
+ {
+ 	char errmsg[STRERR_BUFSIZE];
+ 	struct bpf_link *link;
+ 	int prog_fd, link_fd;
+ 
+ 	if (!OPTS_VALID(opts, bpf_iter_attach_opts))
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	prog_fd = bpf_program__fd(prog);
+ 	if (prog_fd < 0) {
+ 		pr_warn("program '%s': can't attach before loaded\n",
+ 			bpf_program__title(prog, false));
+ 		return ERR_PTR(-EINVAL);
+ 	}
+ 
+ 	link = calloc(1, sizeof(*link));
+ 	if (!link)
+ 		return ERR_PTR(-ENOMEM);
+ 	link->detach = &bpf_link__detach_fd;
+ 
+ 	link_fd = bpf_link_create(prog_fd, 0, BPF_TRACE_ITER, NULL);
  	if (link_fd < 0) {
  		link_fd = -errno;
  		free(link);
@@@ -7909,6 -7979,6 +7971,7 @@@
  	return link;
  }
  
++>>>>>>> d60d81acc2c1 (libbpf: Add support for bpf_link-based netns attachment)
  struct bpf_link *bpf_program__attach(struct bpf_program *prog)
  {
  	const struct bpf_sec_def *sec_def;
diff --cc tools/lib/bpf/libbpf.map
index 69599528ddbe,f732c77b7ed0..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -286,3 -254,19 +286,22 @@@ LIBBPF_0.0.8 
  		bpf_program__set_lsm;
  		bpf_set_link_xdp_fd_opts;
  } LIBBPF_0.0.7;
++<<<<<<< HEAD
++=======
+ 
+ LIBBPF_0.0.9 {
+ 	global:
+ 		bpf_enable_stats;
+ 		bpf_iter_create;
+ 		bpf_link_get_fd_by_id;
+ 		bpf_link_get_next_id;
+ 		bpf_program__attach_iter;
+ 		bpf_program__attach_netns;
+ 		perf_buffer__consume;
+ 		ring_buffer__add;
+ 		ring_buffer__consume;
+ 		ring_buffer__free;
+ 		ring_buffer__new;
+ 		ring_buffer__poll;
+ } LIBBPF_0.0.8;
++>>>>>>> d60d81acc2c1 (libbpf: Add support for bpf_link-based netns attachment)
* Unmerged path tools/lib/bpf/libbpf.c
diff --git a/tools/lib/bpf/libbpf.h b/tools/lib/bpf/libbpf.h
index 02e427ddd9d9..140eb16542a5 100644
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@ -267,6 +267,8 @@ LIBBPF_API struct bpf_link *
 bpf_program__attach_lsm(struct bpf_program *prog);
 LIBBPF_API struct bpf_link *
 bpf_program__attach_cgroup(struct bpf_program *prog, int cgroup_fd);
+LIBBPF_API struct bpf_link *
+bpf_program__attach_netns(struct bpf_program *prog, int netns_fd);
 
 struct bpf_map;
 
* Unmerged path tools/lib/bpf/libbpf.map
