powerpc/watchpoint: Rename current DAWR macros

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
Rebuild_CHGLOG: - [powerpc] watchpoint: Rename current DAWR macros (Greg Kurz) [1882796]
Rebuild_FUZZ: 90.48%
commit-author Ravi Bangoria <ravi.bangoria@linux.ibm.com>
commit 09f82b063aa9c248a3ef919aeec361054e7b044a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/09f82b06.failed

Power10 is introducing second DAWR. Use real register names from ISA
for current macros:
  s/SPRN_DAWR/SPRN_DAWR0/
  s/SPRN_DAWRX/SPRN_DAWRX0/

	Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
	Reviewed-by: Michael Neuling <mikey@neuling.org>
Link: https://lore.kernel.org/r/20200514111741.97993-2-ravi.bangoria@linux.ibm.com
(cherry picked from commit 09f82b063aa9c248a3ef919aeec361054e7b044a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/kernel/dawr.c
#	arch/powerpc/kvm/book3s_hv.c
#	arch/powerpc/kvm/book3s_hv_rmhandlers.S
diff --cc arch/powerpc/kvm/book3s_hv.c
index 577e2a31a94f,db07199f0977..000000000000
--- a/arch/powerpc/kvm/book3s_hv.c
+++ b/arch/powerpc/kvm/book3s_hv.c
@@@ -3471,9 -3421,9 +3471,15 @@@ static int kvmhv_load_hv_regs_and_go(st
  	mtspr(SPRN_PURR, vcpu->arch.purr);
  	mtspr(SPRN_SPURR, vcpu->arch.spurr);
  
++<<<<<<< HEAD
 +	if (cpu_has_feature(CPU_FTR_DAWR)) {
 +		mtspr(SPRN_DAWR, vcpu->arch.dawr);
 +		mtspr(SPRN_DAWRX, vcpu->arch.dawrx);
++=======
+ 	if (dawr_enabled()) {
+ 		mtspr(SPRN_DAWR0, vcpu->arch.dawr);
+ 		mtspr(SPRN_DAWRX0, vcpu->arch.dawrx);
++>>>>>>> 09f82b063aa9 (powerpc/watchpoint: Rename current DAWR macros)
  	}
  	mtspr(SPRN_CIABR, vcpu->arch.ciabr);
  	mtspr(SPRN_IC, vcpu->arch.ic);
diff --cc arch/powerpc/kvm/book3s_hv_rmhandlers.S
index 64da6cdf4018,70de3325d0e9..000000000000
--- a/arch/powerpc/kvm/book3s_hv_rmhandlers.S
+++ b/arch/powerpc/kvm/book3s_hv_rmhandlers.S
@@@ -806,10 -797,17 +806,24 @@@ END_FTR_SECTION_IFCLR(CPU_FTR_ARCH_207S
  	 * Handle broken DAWR case by not writing it. This means we
  	 * can still store the DAWR register for migration.
  	 */
++<<<<<<< HEAD
 +BEGIN_FTR_SECTION
 +	mtspr	SPRN_DAWR, r5
 +	mtspr	SPRN_DAWRX, r6
 +END_FTR_SECTION_IFSET(CPU_FTR_DAWR)
++=======
+ 	LOAD_REG_ADDR(r5, dawr_force_enable)
+ 	lbz	r5, 0(r5)
+ 	cmpdi	r5, 0
+ 	beq	1f
+ 	ld	r5, VCPU_DAWR(r4)
+ 	ld	r6, VCPU_DAWRX(r4)
+ 	mtspr	SPRN_DAWR0, r5
+ 	mtspr	SPRN_DAWRX0, r6
+ 1:
+ 	ld	r7, VCPU_CIABR(r4)
+ 	ld	r8, VCPU_TAR(r4)
++>>>>>>> 09f82b063aa9 (powerpc/watchpoint: Rename current DAWR macros)
  	mtspr	SPRN_CIABR, r7
  	mtspr	SPRN_TAR, r8
  	ld	r5, VCPU_IC(r4)
* Unmerged path arch/powerpc/kernel/dawr.c
diff --git a/arch/powerpc/include/asm/reg.h b/arch/powerpc/include/asm/reg.h
index 6d9337b1b465..3548419d0fb7 100644
--- a/arch/powerpc/include/asm/reg.h
+++ b/arch/powerpc/include/asm/reg.h
@@ -278,14 +278,14 @@
 #define   CTRL_CT1	0x40000000	/* thread 1 */
 #define   CTRL_TE	0x00c00000	/* thread enable */
 #define   CTRL_RUNLATCH	0x1
-#define SPRN_DAWR	0xB4
+#define SPRN_DAWR0	0xB4
 #define SPRN_RPR	0xBA	/* Relative Priority Register */
 #define SPRN_CIABR	0xBB
 #define   CIABR_PRIV		0x3
 #define   CIABR_PRIV_USER	1
 #define   CIABR_PRIV_SUPER	2
 #define   CIABR_PRIV_HYPER	3
-#define SPRN_DAWRX	0xBC
+#define SPRN_DAWRX0	0xBC
 #define   DAWRX_USER	__MASK(0)
 #define   DAWRX_KERNEL	__MASK(1)
 #define   DAWRX_HYP	__MASK(2)
* Unmerged path arch/powerpc/kernel/dawr.c
* Unmerged path arch/powerpc/kvm/book3s_hv.c
* Unmerged path arch/powerpc/kvm/book3s_hv_rmhandlers.S
diff --git a/arch/powerpc/xmon/xmon.c b/arch/powerpc/xmon/xmon.c
index 3ba3f8df7d8d..08e4014e49fb 100644
--- a/arch/powerpc/xmon/xmon.c
+++ b/arch/powerpc/xmon/xmon.c
@@ -1849,7 +1849,7 @@ static void dump_207_sprs(void)
 	printf("hfscr  = %.16lx  dhdes = %.16lx rpr    = %.16lx\n",
 		mfspr(SPRN_HFSCR), mfspr(SPRN_DHDES), mfspr(SPRN_RPR));
 	printf("dawr   = %.16lx  dawrx = %.16lx ciabr  = %.16lx\n",
-		mfspr(SPRN_DAWR), mfspr(SPRN_DAWRX), mfspr(SPRN_CIABR));
+		mfspr(SPRN_DAWR0), mfspr(SPRN_DAWRX0), mfspr(SPRN_CIABR));
 #endif
 }
 
