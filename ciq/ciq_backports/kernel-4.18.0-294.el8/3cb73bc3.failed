hyperv_fb: Update screen_info after removing old framebuffer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Kairui Song <kasong@redhat.com>
commit 3cb73bc3fa2a3cb80b88aa63b48409939e0d996b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3cb73bc3.failed

On gen2 HyperV VM, hyperv_fb will remove the old framebuffer, and the
new allocated framebuffer address could be at a differnt location,
and it might be no longer a VGA framebuffer.

Update screen_info so that after kexec the kernel won't try to reuse
the old invalid/stale framebuffer address as VGA, corrupting memory.

[ mingo: Tidied up the changelog. ]

	Signed-off-by: Kairui Song <kasong@redhat.com>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Cc: Dexuan Cui <decui@microsoft.com>
	Cc: Jake Oshins <jakeo@microsoft.com>
	Cc: Wei Hu <weh@microsoft.com>
	Cc: "K. Y. Srinivasan" <kys@microsoft.com>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Cc: Stephen Hemminger <sthemmin@microsoft.com>
Link: https://lore.kernel.org/r/20201014092429.1415040-3-kasong@redhat.com
(cherry picked from commit 3cb73bc3fa2a3cb80b88aa63b48409939e0d996b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/video/fbdev/hyperv_fb.c
diff --cc drivers/video/fbdev/hyperv_fb.c
index 5d63e439979f,e36fb1a0ecdb..000000000000
--- a/drivers/video/fbdev/hyperv_fb.c
+++ b/drivers/video/fbdev/hyperv_fb.c
@@@ -854,27 -1096,34 +854,43 @@@ static int hvfb_getmem(struct hv_devic
  	if (!fb_virt)
  		goto err2;
  
 -	/* Allocate memory for deferred IO */
 -	par->dio_vp = vzalloc(round_up(dio_fb_size, PAGE_SIZE));
 -	if (par->dio_vp == NULL)
 +	info->apertures = alloc_apertures(1);
 +	if (!info->apertures)
  		goto err3;
  
 -	/* Physical address of FB device */
 -	par->mmio_pp = par->mem->start;
 -	/* Virtual address of FB device */
 -	par->mmio_vp = (unsigned char *) fb_virt;
 +	if (gen2vm) {
 +		info->apertures->ranges[0].base = screen_info.lfb_base;
 +		info->apertures->ranges[0].size = screen_info.lfb_size;
 +		remove_conflicting_framebuffers(info->apertures,
 +						KBUILD_MODNAME, false);
 +	} else {
 +		info->apertures->ranges[0].base = pci_resource_start(pdev, 0);
 +		info->apertures->ranges[0].size = pci_resource_len(pdev, 0);
 +	}
  
  	info->fix.smem_start = par->mem->start;
 -	info->fix.smem_len = dio_fb_size;
 -	info->screen_base = par->dio_vp;
 -	info->screen_size = dio_fb_size;
 +	info->fix.smem_len = screen_fb_size;
 +	info->screen_base = fb_virt;
 +	info->screen_size = screen_fb_size;
  
++<<<<<<< HEAD
 +	if (!gen2vm)
 +		pci_dev_put(pdev);
++=======
+ getmem_done:
+ 	remove_conflicting_framebuffers(info->apertures,
+ 					KBUILD_MODNAME, false);
+ 
+ 	if (gen2vm) {
+ 		/* framebuffer is reallocated, clear screen_info to avoid misuse from kexec */
+ 		screen_info.lfb_size = 0;
+ 		screen_info.lfb_base = 0;
+ 		screen_info.orig_video_isVGA = 0;
+ 	} else {
+ 		pci_dev_put(pdev);
+ 	}
+ 	kfree(info->apertures);
++>>>>>>> 3cb73bc3fa2a (hyperv_fb: Update screen_info after removing old framebuffer)
  
  	return 0;
  
* Unmerged path drivers/video/fbdev/hyperv_fb.c
