x86/efi: Remove unused EFI_UV1_MEMMAP code

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author steve.wahl@hpe.com <steve.wahl@hpe.com>
commit 3bcf25a40b018e632d70bb866d75746748953fbc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/3bcf25a4.failed

With UV1 support removed, EFI_UV1_MEMMAP is no longer used.

	Signed-off-by: Steve Wahl <steve.wahl@hpe.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
Link: https://lkml.kernel.org/r/20200713212956.019149227@hpe.com

(cherry picked from commit 3bcf25a40b018e632d70bb866d75746748953fbc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/efi.h
diff --cc arch/x86/include/asm/efi.h
index e676caad5ea2,b9c2667ac46c..000000000000
--- a/arch/x86/include/asm/efi.h
+++ b/arch/x86/include/asm/efi.h
@@@ -18,14 -22,7 +18,18 @@@
   *
   * This is the main reason why we're doing stable VA mappings for RT
   * services.
++<<<<<<< HEAD
 + *
 + * This flag is used in conjunction with a chicken bit called
 + * "efi=old_map" which can be used as a fallback to the old runtime
 + * services mapping method in case there's some b0rkage with a
 + * particular EFI implementation (haha, it is hard to hold up the
 + * sarcasm here...).
 + */
 +#define EFI_OLD_MEMMAP		EFI_ARCH_1
++=======
+  */
++>>>>>>> 3bcf25a40b01 (x86/efi: Remove unused EFI_UV1_MEMMAP code)
  
  #define EFI32_LOADER_SIGNATURE	"EL32"
  #define EFI64_LOADER_SIGNATURE	"EL64"
@@@ -80,12 -110,9 +84,16 @@@ struct efi_scratch 
  #define arch_efi_call_virt_setup()					\
  ({									\
  	efi_sync_low_kernel_mappings();					\
 -	kernel_fpu_begin();						\
 +	preempt_disable();						\
 +	__kernel_fpu_begin();						\
  	firmware_restrict_branch_speculation_start();			\
++<<<<<<< HEAD
 +									\
 +	if (!efi_enabled(EFI_OLD_MEMMAP))				\
 +		efi_switch_mm(&efi_mm);					\
++=======
+ 	efi_switch_mm(&efi_mm);						\
++>>>>>>> 3bcf25a40b01 (x86/efi: Remove unused EFI_UV1_MEMMAP code)
  })
  
  #define arch_efi_call_virt(p, f, args...)				\
@@@ -93,12 -120,9 +101,16 @@@
  
  #define arch_efi_call_virt_teardown()					\
  ({									\
++<<<<<<< HEAD
 +	if (!efi_enabled(EFI_OLD_MEMMAP))				\
 +		efi_switch_mm(efi_scratch.prev_mm);			\
 +									\
++=======
+ 	efi_switch_mm(efi_scratch.prev_mm);				\
++>>>>>>> 3bcf25a40b01 (x86/efi: Remove unused EFI_UV1_MEMMAP code)
  	firmware_restrict_branch_speculation_end();			\
 -	kernel_fpu_end();						\
 +	__kernel_fpu_end();						\
 +	preempt_enable();						\
  })
  
  extern void __iomem *__init efi_ioremap(unsigned long addr, unsigned long size,
@@@ -138,11 -162,11 +150,14 @@@ extern void efi_delete_dummy_variable(v
  extern void efi_switch_mm(struct mm_struct *mm);
  extern void efi_recover_from_page_fault(unsigned long phys_addr);
  extern void efi_free_boot_services(void);
++<<<<<<< HEAD
 +extern void efi_reserve_boot_services(void);
++=======
++>>>>>>> 3bcf25a40b01 (x86/efi: Remove unused EFI_UV1_MEMMAP code)
  
 -/* kexec external ABI */
  struct efi_setup_data {
  	u64 fw_vendor;
 -	u64 __unused;
 +	u64 runtime;
  	u64 tables;
  	u64 smbios;
  	u64 reserved[8];
* Unmerged path arch/x86/include/asm/efi.h
