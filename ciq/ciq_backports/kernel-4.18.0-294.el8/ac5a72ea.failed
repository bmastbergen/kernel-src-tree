bpf: Use dedicated bpf_trace_printk event instead of trace_printk()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Alan Maguire <alan.maguire@oracle.com>
commit ac5a72ea5c8989871e61f6bb0852e0f91de51ebe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/ac5a72ea.failed

The bpf helper bpf_trace_printk() uses trace_printk() under the hood.
This leads to an alarming warning message originating from trace
buffer allocation which occurs the first time a program using
bpf_trace_printk() is loaded.

We can instead create a trace event for bpf_trace_printk() and enable
it in-kernel when/if we encounter a program using the
bpf_trace_printk() helper.  With this approach, trace_printk()
is not used directly and no warning message appears.

This work was started by Steven (see Link) and finished by Alan; added
Steven's Signed-off-by with his permission.

	Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
	Signed-off-by: Alan Maguire <alan.maguire@oracle.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/r/20200628194334.6238b933@oasis.local.home
Link: https://lore.kernel.org/bpf/1594641154-18897-2-git-send-email-alan.maguire@oracle.com
(cherry picked from commit ac5a72ea5c8989871e61f6bb0852e0f91de51ebe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/Makefile
#	kernel/trace/bpf_trace.c
diff --cc kernel/trace/Makefile
index e2538c7638d4,aeba5ee7325a..000000000000
--- a/kernel/trace/Makefile
+++ b/kernel/trace/Makefile
@@@ -18,6 -26,13 +18,16 @@@ ifdef CONFIG_TRACING_BRANCHE
  KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING
  endif
  
++<<<<<<< HEAD
++=======
+ # for GCOV coverage profiling
+ ifdef CONFIG_GCOV_PROFILE_FTRACE
+ GCOV_PROFILE := y
+ endif
+ 
+ CFLAGS_bpf_trace.o := -I$(src)
+ 
++>>>>>>> ac5a72ea5c89 (bpf: Use dedicated bpf_trace_printk event instead of trace_printk())
  CFLAGS_trace_benchmark.o := -I$(src)
  CFLAGS_trace_events_filter.o := -I$(src)
  
diff --cc kernel/trace/bpf_trace.c
index ba868d951c55,3cc0dcb60ca2..000000000000
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@@ -14,8 -11,10 +14,9 @@@
  #include <linux/uaccess.h>
  #include <linux/ctype.h>
  #include <linux/kprobes.h>
+ #include <linux/spinlock.h>
  #include <linux/syscalls.h>
  #include <linux/error-injection.h>
 -#include <linux/btf_ids.h>
  
  #include <asm/tlb.h>
  
@@@ -318,6 -354,55 +322,58 @@@ static const struct bpf_func_proto *bpf
  	return &bpf_probe_write_user_proto;
  }
  
++<<<<<<< HEAD
++=======
+ static void bpf_trace_copy_string(char *buf, void *unsafe_ptr, char fmt_ptype,
+ 		size_t bufsz)
+ {
+ 	void __user *user_ptr = (__force void __user *)unsafe_ptr;
+ 
+ 	buf[0] = 0;
+ 
+ 	switch (fmt_ptype) {
+ 	case 's':
+ #ifdef CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE
+ 		if ((unsigned long)unsafe_ptr < TASK_SIZE) {
+ 			strncpy_from_user_nofault(buf, user_ptr, bufsz);
+ 			break;
+ 		}
+ 		fallthrough;
+ #endif
+ 	case 'k':
+ 		strncpy_from_kernel_nofault(buf, unsafe_ptr, bufsz);
+ 		break;
+ 	case 'u':
+ 		strncpy_from_user_nofault(buf, user_ptr, bufsz);
+ 		break;
+ 	}
+ }
+ 
+ static DEFINE_RAW_SPINLOCK(trace_printk_lock);
+ 
+ #define BPF_TRACE_PRINTK_SIZE   1024
+ 
+ static inline __printf(1, 0) int bpf_do_trace_printk(const char *fmt, ...)
+ {
+ 	static char buf[BPF_TRACE_PRINTK_SIZE];
+ 	unsigned long flags;
+ 	va_list ap;
+ 	int ret;
+ 
+ 	raw_spin_lock_irqsave(&trace_printk_lock, flags);
+ 	va_start(ap, fmt);
+ 	ret = vsnprintf(buf, sizeof(buf), fmt, ap);
+ 	va_end(ap);
+ 	/* vsnprintf() will not append null for zero-length strings */
+ 	if (ret == 0)
+ 		buf[0] = '\0';
+ 	trace_bpf_trace_printk(buf);
+ 	raw_spin_unlock_irqrestore(&trace_printk_lock, flags);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> ac5a72ea5c89 (bpf: Use dedicated bpf_trace_printk event instead of trace_printk())
  /*
   * Only limited trace_printk() conversion specifiers allowed:
   * %d %i %u %x %ld %li %lu %lx %lld %lli %llu %llx %p %pB %pks %pus %s
* Unmerged path kernel/trace/Makefile
* Unmerged path kernel/trace/bpf_trace.c
diff --git a/kernel/trace/bpf_trace.h b/kernel/trace/bpf_trace.h
new file mode 100644
index 000000000000..9acbc11ac7bb
--- /dev/null
+++ b/kernel/trace/bpf_trace.h
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM bpf_trace
+
+#if !defined(_TRACE_BPF_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+
+#define _TRACE_BPF_TRACE_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(bpf_trace_printk,
+
+	TP_PROTO(const char *bpf_string),
+
+	TP_ARGS(bpf_string),
+
+	TP_STRUCT__entry(
+		__string(bpf_string, bpf_string)
+	),
+
+	TP_fast_assign(
+		__assign_str(bpf_string, bpf_string);
+	),
+
+	TP_printk("%s", __get_str(bpf_string))
+);
+
+#endif /* _TRACE_BPF_TRACE_H */
+
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+#define TRACE_INCLUDE_FILE bpf_trace
+
+#include <trace/define_trace.h>
