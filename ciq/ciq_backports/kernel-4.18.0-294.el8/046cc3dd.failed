bpf: Fix build without CONFIG_STACKTRACE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Song Liu <songliubraving@fb.com>
commit 046cc3dd9a2507b8e111714807ab8bf15ea5bb70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/046cc3dd.failed

Without CONFIG_STACKTRACE stack_trace_save_tsk() is not defined. Let
get_callchain_entry_for_task() to always return NULL in such cases.

Fixes: fa28dcb82a38 ("bpf: Introduce helper bpf_get_task_stack()")
	Reported-by: kernel test robot <lkp@intel.com>
	Signed-off-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200703024537.79971-1-songliubraving@fb.com
(cherry picked from commit 046cc3dd9a2507b8e111714807ab8bf15ea5bb70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/stackmap.c
diff --cc kernel/bpf/stackmap.c
index 4153fd4ee538,a6c361ed7937..000000000000
--- a/kernel/bpf/stackmap.c
+++ b/kernel/bpf/stackmap.c
@@@ -358,6 -348,44 +358,47 @@@ static void stack_map_get_build_id_offs
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static struct perf_callchain_entry *
+ get_callchain_entry_for_task(struct task_struct *task, u32 init_nr)
+ {
+ #ifdef CONFIG_STACKTRACE
+ 	struct perf_callchain_entry *entry;
+ 	int rctx;
+ 
+ 	entry = get_callchain_entry(&rctx);
+ 
+ 	if (!entry)
+ 		return NULL;
+ 
+ 	entry->nr = init_nr +
+ 		stack_trace_save_tsk(task, (unsigned long *)(entry->ip + init_nr),
+ 				     sysctl_perf_event_max_stack - init_nr, 0);
+ 
+ 	/* stack_trace_save_tsk() works on unsigned long array, while
+ 	 * perf_callchain_entry uses u64 array. For 32-bit systems, it is
+ 	 * necessary to fix this mismatch.
+ 	 */
+ 	if (__BITS_PER_LONG != 64) {
+ 		unsigned long *from = (unsigned long *) entry->ip;
+ 		u64 *to = entry->ip;
+ 		int i;
+ 
+ 		/* copy data from the end to avoid using extra buffer */
+ 		for (i = entry->nr - 1; i >= (int)init_nr; i--)
+ 			to[i] = (u64)(from[i]);
+ 	}
+ 
+ 	put_callchain_entry(rctx);
+ 
+ 	return entry;
+ #else /* CONFIG_STACKTRACE */
+ 	return NULL;
+ #endif
+ }
+ 
++>>>>>>> 046cc3dd9a25 (bpf: Fix build without CONFIG_STACKTRACE)
  BPF_CALL_3(bpf_get_stackid, struct pt_regs *, regs, struct bpf_map *, map,
  	   u64, flags)
  {
* Unmerged path kernel/bpf/stackmap.c
