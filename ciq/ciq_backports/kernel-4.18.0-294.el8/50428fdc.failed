powerpc: Add a ppc_inst_as_str() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Jordan Niethe <jniethe5@gmail.com>
commit 50428fdc53ba48f6936b10dfdc0d644972403908
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/50428fdc.failed

There are quite a few places where instructions are printed, this is
done using a '%x' format specifier. With the introduction of prefixed
instructions, this does not work well. Currently in these places,
ppc_inst_val() is used for the value for %x so only the first word of
prefixed instructions are printed.

When the instructions are word instructions, only a single word should
be printed. For prefixed instructions both the prefix and suffix should
be printed. To accommodate both of these situations, instead of a '%x'
specifier use '%s' and introduce a helper, __ppc_inst_as_str() which
returns a char *. The char * __ppc_inst_as_str() returns is buffer that
is passed to it by the caller.

It is cumbersome to require every caller of __ppc_inst_as_str() to now
declare a buffer. To make it more convenient to use __ppc_inst_as_str(),
wrap it in a macro that uses a compound statement to allocate a buffer
on the caller's stack before calling it.

	Signed-off-by: Jordan Niethe <jniethe5@gmail.com>
	Reviewed-by: Joel Stanley <joel@jms.id.au>
	Acked-by: Segher Boessenkool <segher@kernel.crashing.org>
[mpe: Drop 0x prefix to match most existings uses, especially xmon]
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20200602052728.18227-1-jniethe5@gmail.com
(cherry picked from commit 50428fdc53ba48f6936b10dfdc0d644972403908)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/inst.h
#	arch/powerpc/kernel/kprobes.c
#	arch/powerpc/kernel/trace/ftrace.c
#	arch/powerpc/lib/test_emulate_step.c
#	arch/powerpc/xmon/xmon.c
diff --cc arch/powerpc/kernel/kprobes.c
index e4c5bf33970b,6ab9b4d037c3..000000000000
--- a/arch/powerpc/kernel/kprobes.c
+++ b/arch/powerpc/kernel/kprobes.c
@@@ -246,7 -244,7 +246,11 @@@ static int try_to_emulate(struct kprob
  		 * So, we should never get here... but, its still
  		 * good to catch them, just in case...
  		 */
++<<<<<<< HEAD
 +		printk("Can't step on instruction %x\n", insn);
++=======
+ 		printk("Can't step on instruction %s\n", ppc_inst_as_str(insn));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		BUG();
  	} else {
  		/*
diff --cc arch/powerpc/kernel/trace/ftrace.c
index 4bf051d3e21e,42761ebec9f7..000000000000
--- a/arch/powerpc/kernel/trace/ftrace.c
+++ b/arch/powerpc/kernel/trace/ftrace.c
@@@ -71,9 -72,9 +71,15 @@@ ftrace_modify_code(unsigned long ip, un
  		return -EFAULT;
  
  	/* Make sure it is what we expect it to be */
++<<<<<<< HEAD
 +	if (replaced != old) {
 +		pr_err("%p: replaced (%#x) != old (%#x)",
 +		(void *)ip, replaced, old);
++=======
+ 	if (!ppc_inst_equal(replaced, old)) {
+ 		pr_err("%p: replaced (%s) != old (%s)",
+ 		(void *)ip, ppc_inst_as_str(replaced), ppc_inst_as_str(old));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
@@@ -135,7 -137,7 +141,11 @@@ __ftrace_make_nop(struct module *mod
  
  	/* Make sure that that this is still a 24bit jump */
  	if (!is_bl_op(op)) {
++<<<<<<< HEAD
 +		pr_err("Not expected bl: opcode is %x\n", op);
++=======
+ 		pr_err("Not expected bl: opcode is %s\n", ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
@@@ -168,8 -170,10 +178,15 @@@
  	}
  
  	/* We expect either a mflr r0, or a std r0, LRSAVE(r1) */
++<<<<<<< HEAD
 +	if (op != PPC_INST_MFLR && op != PPC_INST_STD_LR) {
 +		pr_err("Unexpected instruction %08x around bl _mcount\n", op);
++=======
+ 	if (!ppc_inst_equal(op, ppc_inst(PPC_INST_MFLR)) &&
+ 	    !ppc_inst_equal(op, ppc_inst(PPC_INST_STD_LR))) {
+ 		pr_err("Unexpected instruction %s around bl _mcount\n",
+ 		       ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  #else
@@@ -198,8 -202,8 +215,13 @@@
  		return -EFAULT;
  	}
  
++<<<<<<< HEAD
 +	if (op != PPC_INST_LD_TOC) {
 +		pr_err("Expected %08x found %08x\n", PPC_INST_LD_TOC, op);
++=======
+ 	if (!ppc_inst_equal(op,  ppc_inst(PPC_INST_LD_TOC))) {
+ 		pr_err("Expected %08x found %s\n", PPC_INST_LD_TOC, ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  #endif /* CONFIG_MPROFILE_KERNEL */
@@@ -227,7 -231,7 +249,11 @@@ __ftrace_make_nop(struct module *mod
  
  	/* Make sure that that this is still a 24bit jump */
  	if (!is_bl_op(op)) {
++<<<<<<< HEAD
 +		pr_err("Not expected bl: opcode is %x\n", op);
++=======
+ 		pr_err("Not expected bl: opcode is %s\n", ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
@@@ -398,7 -406,7 +424,11 @@@ static int __ftrace_make_nop_kernel(str
  
  	/* Make sure that that this is still a 24bit jump */
  	if (!is_bl_op(op)) {
++<<<<<<< HEAD
 +		pr_err("Not expected bl: opcode is %x\n", op);
++=======
+ 		pr_err("Not expected bl: opcode is %s\n", ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
@@@ -520,8 -533,8 +550,13 @@@ __ftrace_make_call(struct dyn_ftrace *r
  		return -EFAULT;
  
  	if (!expected_nop_sequence(ip, op[0], op[1])) {
++<<<<<<< HEAD
 +		pr_err("Unexpected call sequence at %p: %x %x\n",
 +		ip, op[0], op[1]);
++=======
+ 		pr_err("Unexpected call sequence at %p: %s %s\n",
+ 		ip, ppc_inst_as_str(op[0]), ppc_inst_as_str(op[1]));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
@@@ -582,8 -596,8 +617,13 @@@ __ftrace_make_call(struct dyn_ftrace *r
  		return -EFAULT;
  
  	/* It should be pointing to a nop */
++<<<<<<< HEAD
 +	if (op != PPC_INST_NOP) {
 +		pr_err("Expected NOP but have %x\n", op);
++=======
+ 	if (!ppc_inst_equal(op,  ppc_inst(PPC_INST_NOP))) {
+ 		pr_err("Expected NOP but have %s\n", ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
@@@ -639,8 -653,8 +679,13 @@@ static int __ftrace_make_call_kernel(st
  		return -EFAULT;
  	}
  
++<<<<<<< HEAD
 +	if (op != PPC_INST_NOP) {
 +		pr_err("Unexpected call sequence at %p: %x\n", ip, op);
++=======
+ 	if (!ppc_inst_equal(op, ppc_inst(PPC_INST_NOP))) {
+ 		pr_err("Unexpected call sequence at %p: %s\n", ip, ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
@@@ -719,7 -733,7 +764,11 @@@ __ftrace_modify_call(struct dyn_ftrace 
  
  	/* Make sure that that this is still a 24bit jump */
  	if (!is_bl_op(op)) {
++<<<<<<< HEAD
 +		pr_err("Not expected bl: opcode is %x\n", op);
++=======
+ 		pr_err("Not expected bl: opcode is %s\n", ppc_inst_as_str(op));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EINVAL;
  	}
  
diff --cc arch/powerpc/lib/test_emulate_step.c
index 36931d06bd76,e25e92750416..000000000000
--- a/arch/powerpc/lib/test_emulate_step.c
+++ b/arch/powerpc/lib/test_emulate_step.c
@@@ -859,7 -1147,7 +859,11 @@@ static int __init emulate_compute_instr
  
  	if (analyse_instr(&op, regs, instr) != 1 ||
  	    GETTYPE(op.type) != COMPUTE) {
++<<<<<<< HEAD
 +		pr_info("emulation failed, instruction = 0x%08x\n", instr);
++=======
+ 		pr_info("execution failed, instruction = %s\n", ppc_inst_as_str(instr));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EFAULT;
  	}
  
@@@ -879,7 -1167,7 +883,11 @@@ static int __init execute_compute_instr
  	/* Patch the NOP with the actual instruction */
  	patch_instruction_site(&patch__exec_instr, instr);
  	if (exec_instr(regs)) {
++<<<<<<< HEAD
 +		pr_info("execution failed, instruction = 0x%08x\n", instr);
++=======
+ 		pr_info("execution failed, instruction = %s\n", ppc_inst_as_str(instr));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		return -EFAULT;
  	}
  
diff --cc arch/powerpc/xmon/xmon.c
index 3ba3f8df7d8d,8df83a744528..000000000000
--- a/arch/powerpc/xmon/xmon.c
+++ b/arch/powerpc/xmon/xmon.c
@@@ -2763,9 -2977,9 +2763,13 @@@ generic_inst_dump(unsigned long adr, lo
  		dotted = 0;
  		last_inst = inst;
  		if (praddr)
++<<<<<<< HEAD
 +			printf(REG"  %.8x", adr, inst);
++=======
+ 			printf(REG"  %s", adr, ppc_inst_as_str(inst));
++>>>>>>> 50428fdc53ba (powerpc: Add a ppc_inst_as_str() helper)
  		printf("\t");
 -		dump_func(ppc_inst_val(inst), adr);
 +		dump_func(inst, adr);
  		printf("\n");
  	}
  	return adr - first_adr;
* Unmerged path arch/powerpc/include/asm/inst.h
* Unmerged path arch/powerpc/include/asm/inst.h
* Unmerged path arch/powerpc/kernel/kprobes.c
* Unmerged path arch/powerpc/kernel/trace/ftrace.c
* Unmerged path arch/powerpc/lib/test_emulate_step.c
* Unmerged path arch/powerpc/xmon/xmon.c
