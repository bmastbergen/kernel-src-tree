mm/swapfile.c: fix potential memory leak in sys_swapon

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Miaohe Lin <linmiaohe@huawei.com>
commit 822bca52ee7eb279acfba261a423ed7ac47d6f73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/822bca52.failed

If we failed to drain inode, we would forget to free the swap address
space allocated by init_swap_address_space() above.

Fixes: dc617f29dbe5 ("vfs: don't allow writes to swap files")
	Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
Link: https://lkml.kernel.org/r/20200930101803.53884-1-linmiaohe@huawei.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 822bca52ee7eb279acfba261a423ed7ac47d6f73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swapfile.c
diff --cc mm/swapfile.c
index b77fb155eaf4,c4a613688a17..000000000000
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@@ -3459,7 -3332,18 +3459,22 @@@ SYSCALL_DEFINE2(swapon, const char __us
  
  	error = init_swap_address_space(p->type, maxpages);
  	if (error)
++<<<<<<< HEAD
 +		goto bad_swap;
++=======
+ 		goto bad_swap_unlock_inode;
+ 
+ 	/*
+ 	 * Flush any pending IO and dirty mappings before we start using this
+ 	 * swap device.
+ 	 */
+ 	inode->i_flags |= S_SWAPFILE;
+ 	error = inode_drain_writes(inode);
+ 	if (error) {
+ 		inode->i_flags &= ~S_SWAPFILE;
+ 		goto free_swap_address_space;
+ 	}
++>>>>>>> 822bca52ee7e (mm/swapfile.c: fix potential memory leak in sys_swapon)
  
  	mutex_lock(&swapon_mutex);
  	prio = -1;
@@@ -3481,9 -3365,12 +3496,16 @@@
  	atomic_inc(&proc_poll_event);
  	wake_up_interruptible(&proc_poll_wait);
  
 +	inode->i_flags |= S_SWAPFILE;
  	error = 0;
  	goto out;
++<<<<<<< HEAD
++=======
+ free_swap_address_space:
+ 	exit_swap_address_space(p->type);
+ bad_swap_unlock_inode:
+ 	inode_unlock(inode);
++>>>>>>> 822bca52ee7e (mm/swapfile.c: fix potential memory leak in sys_swapon)
  bad_swap:
  	free_percpu(p->percpu_cluster);
  	p->percpu_cluster = NULL;
* Unmerged path mm/swapfile.c
