mmc: sdhci: Add LTR support for some Intel BYT based controllers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 46f4a69ec8ed6ab9f6a6172afe50df792c8bc1b6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/46f4a69e.failed

Some Intel BYT based host controllers support the setting of latency
tolerance.  Accordingly, implement the PM QoS ->set_latency_tolerance()
callback.  The raw register values are also exposed via debugfs.

Intel EHL controllers require this support.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
Fixes: cb3a7d4a0aec4e ("mmc: sdhci-pci: Add support for Intel EHL")
	Cc: stable@vger.kernel.org
Link: https://lore.kernel.org/r/20200818104508.7149-1-adrian.hunter@intel.com
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 46f4a69ec8ed6ab9f6a6172afe50df792c8bc1b6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-pci-core.c
diff --cc drivers/mmc/host/sdhci-pci-core.c
index e7147652ff3e,d0c8d39d5dbd..000000000000
--- a/drivers/mmc/host/sdhci-pci-core.c
+++ b/drivers/mmc/host/sdhci-pci-core.c
@@@ -24,8 -21,11 +24,10 @@@
  #include <linux/mmc/mmc.h>
  #include <linux/scatterlist.h>
  #include <linux/io.h>
 -#include <linux/iopoll.h>
  #include <linux/gpio.h>
  #include <linux/pm_runtime.h>
+ #include <linux/pm_qos.h>
+ #include <linux/debugfs.h>
  #include <linux/mmc/slot-gpio.h>
  #include <linux/mmc/sdhci-pci-data.h>
  #include <linux/acpi.h>
@@@ -462,6 -515,11 +464,14 @@@ struct intel_host 
  	u32	dsm_fns;
  	int	drv_strength;
  	bool	d3_retune;
++<<<<<<< HEAD
++=======
+ 	bool	rpm_retune_ok;
+ 	u32	glk_rx_ctrl1;
+ 	u32	glk_tun_val;
+ 	u32	active_ltr;
+ 	u32	idle_ltr;
++>>>>>>> 46f4a69ec8ed (mmc: sdhci: Add LTR support for some Intel BYT based controllers)
  };
  
  static const guid_t intel_dsm_guid =
@@@ -863,10 -1145,41 +1014,17 @@@ static int byt_sd_probe_slot(struct sdh
  	return 0;
  }
  
 -#ifdef CONFIG_PM_SLEEP
 -
 -static int byt_resume(struct sdhci_pci_chip *chip)
 -{
 -	byt_ocp_setting(chip->pdev);
 -
 -	return sdhci_pci_resume_host(chip);
 -}
 -
 -#endif
 -
 -#ifdef CONFIG_PM
 -
 -static int byt_runtime_resume(struct sdhci_pci_chip *chip)
 -{
 -	byt_ocp_setting(chip->pdev);
 -
 -	return sdhci_pci_runtime_resume_host(chip);
 -}
 -
 -#endif
 -
  static const struct sdhci_pci_fixes sdhci_intel_byt_emmc = {
 -#ifdef CONFIG_PM_SLEEP
 -	.resume		= byt_resume,
 -#endif
 -#ifdef CONFIG_PM
 -	.runtime_resume	= byt_runtime_resume,
 -#endif
  	.allow_runtime_pm = true,
  	.probe_slot	= byt_emmc_probe_slot,
++<<<<<<< HEAD
 +	.quirks		= SDHCI_QUIRK_NO_ENDATTR_IN_NOPDESC,
++=======
+ 	.add_host	= byt_add_host,
+ 	.remove_slot	= byt_remove_slot,
+ 	.quirks		= SDHCI_QUIRK_NO_ENDATTR_IN_NOPDESC |
+ 			  SDHCI_QUIRK_NO_LED,
++>>>>>>> 46f4a69ec8ed (mmc: sdhci: Add LTR support for some Intel BYT based controllers)
  	.quirks2	= SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
  			  SDHCI_QUIRK2_CAPS_BIT63_FOR_HS400 |
  			  SDHCI_QUIRK2_STOP_WITH_TC,
* Unmerged path drivers/mmc/host/sdhci-pci-core.c
