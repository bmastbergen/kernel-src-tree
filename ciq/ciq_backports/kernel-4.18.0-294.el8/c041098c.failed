mm/vmalloc.c: fix kasan shadow poisoning size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-294.el8
commit-author Vincenzo Frascino <vincenzo.frascino@arm.com>
commit c041098c690fe53cea5d20c62f128a4f7a5c19fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-294.el8/c041098c.failed

The size of vm area can be affected by the presence or not of the guard
page.  In particular when VM_NO_GUARD is present, the actual accessible
size has to be considered like the real size minus the guard page.

Currently kasan does not keep into account this information during the
poison operation and in particular tries to poison the guard page as well.

This approach, even if incorrect, does not cause an issue because the tags
for the guard page are written in the shadow memory.  With the future
introduction of the Tag-Based KASAN, being the guard page inaccessible by
nature, the write tag operation on this page triggers a fault.

Fix kasan shadow poisoning size invoking get_vm_area_size() instead of
accessing directly the field in the data structure to detect the correct
value.

Link: https://lkml.kernel.org/r/20201027160213.32904-1-vincenzo.frascino@arm.com
Fixes: d98c9e83b5e7c ("kasan: fix crashes on access to memory mapped by vm_map_ram()")
	Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
	Cc: Andrey Konovalov <andreyknvl@google.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Marco Elver <elver@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c041098c690fe53cea5d20c62f128a4f7a5c19fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/vmalloc.c
diff --cc mm/vmalloc.c
index 092ee1392927,4d88fe5a277a..000000000000
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@@ -1594,6 -2272,8 +1594,11 @@@ static void __vunmap(const void *addr, 
  	debug_check_no_locks_freed(area->addr, get_vm_area_size(area));
  	debug_check_no_obj_freed(area->addr, get_vm_area_size(area));
  
++<<<<<<< HEAD
++=======
+ 	kasan_poison_vmalloc(area->addr, get_vm_area_size(area));
+ 
++>>>>>>> c041098c690f (mm/vmalloc.c: fix kasan shadow poisoning size)
  	vm_remove_mappings(area, deallocate_pages);
  
  	if (deallocate_pages) {
* Unmerged path mm/vmalloc.c
