drm/i915/dp: Program source OUI on eDP panels

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-301.1.el8
commit-author Lyude Paul <lyude@redhat.com>
commit f12110afee058a2e6e816e315d3291765625cc87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-301.1.el8/f12110af.failed

Since we're about to start adding support for Intel's magic HDR
backlight interface over DPCD, we need to ensure we're properly
programming this field so that Intel specific sink services are exposed.
Otherwise, 0x300-0x3ff will just read zeroes.

We also take care not to reprogram the source OUI if it already matches
what we expect. This is just to be careful so that we don't accidentally
take the panel out of any backlight control modes we found it in.

v2:
* Add careful parameter to intel_edp_init_source_oui() to avoid
  re-writing the source OUI if it's already been set during driver
  initialization

	Signed-off-by: Lyude Paul <lyude@redhat.com>
	Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Cc: thaytan@noraisin.net
	Cc: Vasily Khoruzhick <anarsoul@gmail.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20201204223603.249878-2-lyude@redhat.com
(cherry picked from commit f12110afee058a2e6e816e315d3291765625cc87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dp.c
diff --cc drivers/gpu/drm/i915/display/intel_dp.c
index d6295eb20b63,02d927955a5d..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dp.c
+++ b/drivers/gpu/drm/i915/display/intel_dp.c
@@@ -3392,10 -3591,34 +3392,38 @@@ void intel_dp_sink_set_decompression_st
  			    enable ? "enable" : "disable");
  }
  
++<<<<<<< HEAD
 +/* If the sink supports it, try to set the power state appropriately */
 +void intel_dp_sink_dpms(struct intel_dp *intel_dp, int mode)
++=======
+ static void
+ intel_edp_init_source_oui(struct intel_dp *intel_dp, bool careful)
+ {
+ 	struct drm_i915_private *i915 = dp_to_i915(intel_dp);
+ 	u8 oui[] = { 0x00, 0xaa, 0x01 };
+ 	u8 buf[3] = { 0 };
+ 
+ 	/*
+ 	 * During driver init, we want to be careful and avoid changing the source OUI if it's
+ 	 * already set to what we want, so as to avoid clearing any state by accident
+ 	 */
+ 	if (careful) {
+ 		if (drm_dp_dpcd_read(&intel_dp->aux, DP_SOURCE_OUI, buf, sizeof(buf)) < 0)
+ 			drm_err(&i915->drm, "Failed to read source OUI\n");
+ 
+ 		if (memcmp(oui, buf, sizeof(oui)) == 0)
+ 			return;
+ 	}
+ 
+ 	if (drm_dp_dpcd_write(&intel_dp->aux, DP_SOURCE_OUI, oui, sizeof(oui)) < 0)
+ 		drm_err(&i915->drm, "Failed to write source OUI\n");
+ }
+ 
+ /* If the device supports it, try to set the power state appropriately */
+ void intel_dp_set_power(struct intel_dp *intel_dp, u8 mode)
++>>>>>>> f12110afee05 (drm/i915/dp: Program source OUI on eDP panels)
  {
 -	struct intel_encoder *encoder = &dp_to_dig_port(intel_dp)->base;
 -	struct drm_i915_private *i915 = to_i915(encoder->base.dev);
 +	struct drm_i915_private *i915 = dp_to_i915(intel_dp);
  	int ret, i;
  
  	/* Should have a valid DPCD by this point */
@@@ -3411,6 -3633,12 +3439,15 @@@
  	} else {
  		struct intel_lspcon *lspcon = dp_to_lspcon(intel_dp);
  
++<<<<<<< HEAD
++=======
+ 		lspcon_resume(dp_to_dig_port(intel_dp));
+ 
+ 		/* Write the source OUI as early as possible */
+ 		if (intel_dp_is_edp(intel_dp))
+ 			intel_edp_init_source_oui(intel_dp, false);
+ 
++>>>>>>> f12110afee05 (drm/i915/dp: Program source OUI on eDP panels)
  		/*
  		 * When turning on, we need to retry for 1ms to give the sink
  		 * time to wake up.
* Unmerged path drivers/gpu/drm/i915/display/intel_dp.c
