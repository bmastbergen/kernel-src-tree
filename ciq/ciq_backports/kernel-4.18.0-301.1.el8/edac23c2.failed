net/mlx5: Disable devlink reload for lag devices

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-301.1.el8
commit-author Shay Drory <shayd@nvidia.com>
commit edac23c2b3d3ac64cfcd351087295893671adbf5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-301.1.el8/edac23c2.failed

Devlink reload can't be allowed on lag devices since reloading one lag
device will cause traffic on the bond to get stucked.
Users who wish to reload a lag device, need to remove the device from
the bond, and only then reload it.

Fixes: 4383cfcc65e7 ("net/mlx5: Add devlink reload")
	Signed-off-by: Shay Drory <shayd@nvidia.com>
	Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
	Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
(cherry picked from commit edac23c2b3d3ac64cfcd351087295893671adbf5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/devlink.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/devlink.c
index 4ede5916ca6a,41474e42a819..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/devlink.c
@@@ -93,11 -128,28 +93,32 @@@ static int mlx5_devlink_reload_down(str
  {
  	struct mlx5_core_dev *dev = devlink_priv(devlink);
  
++<<<<<<< HEAD
 +	mlx5_unload_one(dev, false);
 +	return 0;
++=======
+ 	if (mlx5_lag_is_active(dev)) {
+ 		NL_SET_ERR_MSG_MOD(extack, "reload is unsupported in Lag mode\n");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	switch (action) {
+ 	case DEVLINK_RELOAD_ACTION_DRIVER_REINIT:
+ 		mlx5_unload_one(dev, false);
+ 		return 0;
+ 	case DEVLINK_RELOAD_ACTION_FW_ACTIVATE:
+ 		if (limit == DEVLINK_RELOAD_LIMIT_NO_RESET)
+ 			return mlx5_devlink_trigger_fw_live_patch(devlink, extack);
+ 		return mlx5_devlink_reload_fw_activate(devlink, extack);
+ 	default:
+ 		/* Unsupported action should not get to this function */
+ 		WARN_ON(1);
+ 		return -EOPNOTSUPP;
+ 	}
++>>>>>>> edac23c2b3d3 (net/mlx5: Disable devlink reload for lag devices)
  }
  
 -static int mlx5_devlink_reload_up(struct devlink *devlink, enum devlink_reload_action action,
 -				  enum devlink_reload_limit limit, u32 *actions_performed,
 +static int mlx5_devlink_reload_up(struct devlink *devlink,
  				  struct netlink_ext_ack *extack)
  {
  	struct mlx5_core_dev *dev = devlink_priv(devlink);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/devlink.c
