drm/i915/dp: Allow forcing specific interfaces through enable_dpcd_backlight

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-301.1.el8
commit-author Lyude Paul <lyude@redhat.com>
commit 2227816e647ae9f55935719f0ef05453eaf3fac7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-301.1.el8/2227816e.failed

Since we now support controlling panel backlights through DPCD using
both the standard VESA interface, and Intel's proprietary HDR backlight
interface, we should allow the user to be able to explicitly choose
between one or the other in the event that we're wrong about panels
reliably reporting support for the Intel HDR interface.

So, this commit adds support for this by introducing two new
enable_dpcd_backlight options: 2 which forces i915 to only probe for the
VESA interface, and 3 which forces i915 to only probe for the Intel
backlight interface (might be useful if we find panels in the wild that
report the VESA interface in their VBT, but actually only support the
Intel backlight interface).

v3:
* Rebase

	Signed-off-by: Lyude Paul <lyude@redhat.com>
	Reviewed-by: Jani Nikula <jani.nikula@intel.com>
	Cc: thaytan@noraisin.net
	Cc: Vasily Khoruzhick <anarsoul@gmail.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20210114221709.2261452-5-lyude@redhat.com
(cherry picked from commit 2227816e647ae9f55935719f0ef05453eaf3fac7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
diff --cc drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
index de764dae1e66,31a478f63d52..000000000000
--- a/drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
+++ b/drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
@@@ -413,36 -612,73 +413,97 @@@ static const struct intel_panel_bl_func
  	.get = intel_dp_aux_vesa_get_backlight,
  };
  
++<<<<<<< HEAD
 +int intel_dp_aux_init_backlight_funcs(struct intel_connector *intel_connector)
++=======
+ enum intel_dp_aux_backlight_modparam {
+ 	INTEL_DP_AUX_BACKLIGHT_AUTO = -1,
+ 	INTEL_DP_AUX_BACKLIGHT_OFF = 0,
+ 	INTEL_DP_AUX_BACKLIGHT_ON = 1,
+ 	INTEL_DP_AUX_BACKLIGHT_FORCE_VESA = 2,
+ 	INTEL_DP_AUX_BACKLIGHT_FORCE_INTEL = 3,
+ };
+ 
+ int intel_dp_aux_init_backlight_funcs(struct intel_connector *connector)
++>>>>>>> 2227816e647a (drm/i915/dp: Allow forcing specific interfaces through enable_dpcd_backlight)
  {
 -	struct drm_device *dev = connector->base.dev;
 -	struct intel_panel *panel = &connector->panel;
 -	struct intel_dp *intel_dp = enc_to_intel_dp(connector->encoder);
 +	struct intel_panel *panel = &intel_connector->panel;
 +	struct intel_dp *intel_dp = enc_to_intel_dp(intel_connector->encoder);
  	struct drm_i915_private *i915 = dp_to_i915(intel_dp);
+ 	bool try_intel_interface = false, try_vesa_interface = false;
  
++<<<<<<< HEAD
 +	if (i915->params.enable_dpcd_backlight == 0 ||
 +	    !intel_dp_aux_supports_vesa_backlight(intel_connector))
++=======
+ 	/* Check the VBT and user's module parameters to figure out which
+ 	 * interfaces to probe
+ 	 */
+ 	switch (i915->params.enable_dpcd_backlight) {
+ 	case INTEL_DP_AUX_BACKLIGHT_OFF:
++>>>>>>> 2227816e647a (drm/i915/dp: Allow forcing specific interfaces through enable_dpcd_backlight)
  		return -ENODEV;
+ 	case INTEL_DP_AUX_BACKLIGHT_AUTO:
+ 		switch (i915->vbt.backlight.type) {
+ 		case INTEL_BACKLIGHT_VESA_EDP_AUX_INTERFACE:
+ 			try_vesa_interface = true;
+ 			break;
+ 		case INTEL_BACKLIGHT_DISPLAY_DDI:
+ 			try_intel_interface = true;
+ 			try_vesa_interface = true;
+ 			break;
+ 		default:
+ 			return -ENODEV;
+ 		}
+ 		break;
+ 	case INTEL_DP_AUX_BACKLIGHT_ON:
+ 		if (i915->vbt.backlight.type != INTEL_BACKLIGHT_VESA_EDP_AUX_INTERFACE)
+ 			try_intel_interface = true;
+ 
+ 		try_vesa_interface = true;
+ 		break;
+ 	case INTEL_DP_AUX_BACKLIGHT_FORCE_VESA:
+ 		try_vesa_interface = true;
+ 		break;
+ 	case INTEL_DP_AUX_BACKLIGHT_FORCE_INTEL:
+ 		try_intel_interface = true;
+ 		break;
+ 	}
  
  	/*
 -	 * A lot of eDP panels in the wild will report supporting both the
 -	 * Intel proprietary backlight control interface, and the VESA
 -	 * backlight control interface. Many of these panels are liars though,
 -	 * and will only work with the Intel interface. So, always probe for
 -	 * that first.
 +	 * There are a lot of machines that don't advertise the backlight
 +	 * control interface to use properly in their VBIOS, :\
  	 */
++<<<<<<< HEAD
 +	if (i915->vbt.backlight.type !=
 +	    INTEL_BACKLIGHT_VESA_EDP_AUX_INTERFACE &&
 +	    i915->params.enable_dpcd_backlight != 1 &&
 +	    !drm_dp_has_quirk(&intel_dp->desc, intel_dp->edid_quirks,
 +			      DP_QUIRK_FORCE_DPCD_BACKLIGHT)) {
 +		drm_info(&i915->drm,
 +			 "Panel advertises DPCD backlight support, but "
 +			 "VBT disagrees. If your backlight controls "
 +			 "don't work try booting with "
 +			 "i915.enable_dpcd_backlight=1. If your machine "
 +			 "needs this, please file a _new_ bug report on "
 +			 "drm/i915, see " FDO_BUG_URL " for details.\n");
 +		return -ENODEV;
 +	}
 +
 +	panel->backlight.funcs = &intel_dp_vesa_bl_funcs;
++=======
+ 	if (try_intel_interface && intel_dp_aux_supports_hdr_backlight(connector)) {
+ 		drm_dbg_kms(dev, "Using Intel proprietary eDP backlight controls\n");
+ 		panel->backlight.funcs = &intel_dp_hdr_bl_funcs;
+ 		return 0;
+ 	}
+ 
+ 	if (try_vesa_interface && intel_dp_aux_supports_vesa_backlight(connector)) {
+ 		drm_dbg_kms(dev, "Using VESA eDP backlight controls\n");
+ 		panel->backlight.funcs = &intel_dp_vesa_bl_funcs;
+ 		return 0;
+ 	}
++>>>>>>> 2227816e647a (drm/i915/dp: Allow forcing specific interfaces through enable_dpcd_backlight)
  
 -	return -ENODEV;
 +	return 0;
  }
* Unmerged path drivers/gpu/drm/i915/display/intel_dp_aux_backlight.c
diff --git a/drivers/gpu/drm/i915/i915_params.c b/drivers/gpu/drm/i915/i915_params.c
index 8d8db9ff0a48..4420c86bc228 100644
--- a/drivers/gpu/drm/i915/i915_params.c
+++ b/drivers/gpu/drm/i915/i915_params.c
@@ -180,7 +180,7 @@ i915_param_named_unsafe(inject_probe_failure, uint, 0400,
 
 i915_param_named(enable_dpcd_backlight, int, 0400,
 	"Enable support for DPCD backlight control"
-	"(-1=use per-VBT LFP backlight type setting [default], 0=disabled, 1=enabled)");
+	"(-1=use per-VBT LFP backlight type setting [default], 0=disabled, 1=enable, 2=force VESA interface, 3=force Intel interface)");
 
 #if IS_ENABLED(CONFIG_DRM_I915_GVT)
 i915_param_named(enable_gvt, bool, 0400,
