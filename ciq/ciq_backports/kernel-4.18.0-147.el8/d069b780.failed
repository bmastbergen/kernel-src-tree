tls: Fix tls_device receive

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Boris Pismenny <borisp@mellanox.com>
commit d069b780e367149a42d92be85ab21ac8c0281aad
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d069b780.failed

Currently, the receive function fails to handle records already
decrypted by the device due to the commit mentioned below.

This commit advances the TLS record sequence number and prepares the context
to handle the next record.

Fixes: fedf201e1296 ("net: tls: Refactor control message handling on recv")
	Signed-off-by: Boris Pismenny <borisp@mellanox.com>
	Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d069b780e367149a42d92be85ab21ac8c0281aad)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/tls/tls_sw.c
diff --cc net/tls/tls_sw.c
index 3f443983a6b3,425351ac2a9b..000000000000
--- a/net/tls/tls_sw.c
+++ b/net/tls/tls_sw.c
@@@ -1229,19 -1465,33 +1229,42 @@@ static int decrypt_skb_update(struct so
  	struct strp_msg *rxm = strp_msg(skb);
  	int err = 0;
  
- #ifdef CONFIG_TLS_DEVICE
- 	err = tls_device_decrypted(sk, skb);
- 	if (err < 0)
- 		return err;
- #endif
  	if (!ctx->decrypted) {
++<<<<<<< HEAD
 +		err = decrypt_internal(sk, skb, dest, NULL, chunk, zc);
 +		if (err < 0) {
 +			if (err == -EINPROGRESS)
 +				tls_advance_record_sn(sk, &tls_ctx->rx);
 +
++=======
+ #ifdef CONFIG_TLS_DEVICE
+ 		err = tls_device_decrypted(sk, skb);
+ 		if (err < 0)
++>>>>>>> d069b780e367 (tls: Fix tls_device receive)
  			return err;
+ #endif
+ 		/* Still not decrypted after tls_device */
+ 		if (!ctx->decrypted) {
+ 			err = decrypt_internal(sk, skb, dest, NULL, chunk, zc,
+ 					       async);
+ 			if (err < 0) {
+ 				if (err == -EINPROGRESS)
+ 					tls_advance_record_sn(sk, &tls_ctx->rx,
+ 							      version);
+ 
+ 				return err;
+ 			}
  		}
++<<<<<<< HEAD
++=======
+ 
+ 		rxm->full_len -= padding_length(ctx, tls_ctx, skb);
+ 		rxm->offset += prot->prepend_size;
+ 		rxm->full_len -= prot->overhead_size;
+ 		tls_advance_record_sn(sk, &tls_ctx->rx, version);
+ 		ctx->decrypted = true;
+ 		ctx->saved_data_ready(sk);
++>>>>>>> d069b780e367 (tls: Fix tls_device receive)
  	} else {
  		*zc = false;
  	}
* Unmerged path net/tls/tls_sw.c
