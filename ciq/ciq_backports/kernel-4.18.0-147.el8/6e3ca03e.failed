nvme: support traffic based keep-alive

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Sagi Grimberg <sagi@grimberg.me>
commit 6e3ca03ee934572d5de4fb2224c01e12c4d422c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/6e3ca03e.failed

If the controller supports traffic based keep alive, we restart the keep
alive timer if any admin or io commands was completed during the kato
period.  This prevents a possible starvation of keep alive commands in
the presence of heavy traffic as in such case, we already have a health
indication from the host perspective.

Only set a comp_seen indicator in case the controller supports keep
alive to minimize the overhead for pci controllers.

	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 6e3ca03ee934572d5de4fb2224c01e12c4d422c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 49d67447cdcc,48ffb1d685c2..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -841,13 -842,8 +844,18 @@@ static void nvme_keep_alive_end_io(stru
  		return;
  	}
  
++<<<<<<< HEAD
 +	spin_lock_irqsave(&ctrl->lock, flags);
 +	if (ctrl->state == NVME_CTRL_LIVE ||
 +	    ctrl->state == NVME_CTRL_CONNECTING)
 +		startka = true;
 +	spin_unlock_irqrestore(&ctrl->lock, flags);
 +	if (startka)
 +		schedule_delayed_work(&ctrl->ka_work, ctrl->kato * HZ);
++=======
+ 	ctrl->comp_seen = false;
+ 	schedule_delayed_work(&ctrl->ka_work, ctrl->kato * HZ);
++>>>>>>> 6e3ca03ee934 (nvme: support traffic based keep-alive)
  }
  
  static int nvme_keep_alive(struct nvme_ctrl *ctrl)
* Unmerged path drivers/nvme/host/core.c
diff --git a/drivers/nvme/host/nvme.h b/drivers/nvme/host/nvme.h
index 5e9fbf4bca79..ce9a24d8cad6 100644
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@ -145,6 +145,7 @@ enum nvme_ctrl_state {
 };
 
 struct nvme_ctrl {
+	bool comp_seen;
 	enum nvme_ctrl_state state;
 	bool identified;
 	spinlock_t lock;
diff --git a/include/linux/nvme.h b/include/linux/nvme.h
index 2d219996c348..4b4d7b3328aa 100644
--- a/include/linux/nvme.h
+++ b/include/linux/nvme.h
@@ -200,6 +200,7 @@ enum {
 
 enum nvme_ctrl_attr {
 	NVME_CTRL_ATTR_HID_128_BIT	= (1 << 0),
+	NVME_CTRL_ATTR_TBKAS		= (1 << 6),
 };
 
 struct nvme_id_ctrl {
