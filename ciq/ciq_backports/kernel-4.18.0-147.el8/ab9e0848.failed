libbpf: Per-symbol visibility for DSO

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Andrey Ignatov <rdna@fb.com>
commit ab9e084821221b2eda57a512535fe35b49e672d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/ab9e0848.failed

Make global symbols in libbpf DSO hidden by default with
-fvisibility=hidden and export symbols that are part of ABI explicitly
with __attribute__((visibility("default"))).

This is common practice that should prevent from accidentally exporting
a symbol, that is not supposed to be a part of ABI what, in turn,
improves both libbpf developer- and user-experiences. See [1] for more
details.

Export control becomes more important since more and more projects use
libbpf.

The patch doesn't export a bunch of netlink related functions since as
agreed in [2] they'll be reworked. That doesn't break bpftool since
bpftool links libbpf statically.

[1] https://www.akkadia.org/drepper/dsohowto.pdf (2.2 Export Control)
[2] https://www.mail-archive.com/netdev@vger.kernel.org/msg251434.html

	Signed-off-by: Andrey Ignatov <rdna@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit ab9e084821221b2eda57a512535fe35b49e672d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/bpf.h
#	tools/lib/bpf/btf.h
#	tools/lib/bpf/libbpf.h
diff --cc tools/lib/bpf/bpf.h
index 28596a493fb2,258c3c178333..000000000000
--- a/tools/lib/bpf/bpf.h
+++ b/tools/lib/bpf/bpf.h
@@@ -74,44 -81,49 +81,79 @@@ struct bpf_load_program_attr 
  
  /* Recommend log buffer size */
  #define BPF_LOG_BUF_SIZE (256 * 1024)
- int bpf_load_program_xattr(const struct bpf_load_program_attr *load_attr,
- 			   char *log_buf, size_t log_buf_sz);
- int bpf_load_program(enum bpf_prog_type type, const struct bpf_insn *insns,
- 		     size_t insns_cnt, const char *license,
- 		     __u32 kern_version, char *log_buf,
- 		     size_t log_buf_sz);
- int bpf_verify_program(enum bpf_prog_type type, const struct bpf_insn *insns,
- 		       size_t insns_cnt, int strict_alignment,
- 		       const char *license, __u32 kern_version,
- 		       char *log_buf, size_t log_buf_sz, int log_level);
+ LIBBPF_API int
+ bpf_load_program_xattr(const struct bpf_load_program_attr *load_attr,
+ 		       char *log_buf, size_t log_buf_sz);
+ LIBBPF_API int bpf_load_program(enum bpf_prog_type type,
+ 				const struct bpf_insn *insns, size_t insns_cnt,
+ 				const char *license, __u32 kern_version,
+ 				char *log_buf, size_t log_buf_sz);
+ LIBBPF_API int bpf_verify_program(enum bpf_prog_type type,
+ 				  const struct bpf_insn *insns,
+ 				  size_t insns_cnt, int strict_alignment,
+ 				  const char *license, __u32 kern_version,
+ 				  char *log_buf, size_t log_buf_sz,
+ 				  int log_level);
  
- int bpf_map_update_elem(int fd, const void *key, const void *value,
- 			__u64 flags);
+ LIBBPF_API int bpf_map_update_elem(int fd, const void *key, const void *value,
+ 				   __u64 flags);
  
++<<<<<<< HEAD
 +int bpf_map_lookup_elem(int fd, const void *key, void *value);
 +int bpf_map_delete_elem(int fd, const void *key);
 +int bpf_map_get_next_key(int fd, const void *key, void *next_key);
 +int bpf_obj_pin(int fd, const char *pathname);
 +int bpf_obj_get(const char *pathname);
 +int bpf_prog_attach(int prog_fd, int attachable_fd, enum bpf_attach_type type,
 +		    unsigned int flags);
 +int bpf_prog_detach(int attachable_fd, enum bpf_attach_type type);
 +int bpf_prog_detach2(int prog_fd, int attachable_fd, enum bpf_attach_type type);
 +int bpf_prog_test_run(int prog_fd, int repeat, void *data, __u32 size,
 +		      void *data_out, __u32 *size_out, __u32 *retval,
 +		      __u32 *duration);
 +int bpf_prog_get_next_id(__u32 start_id, __u32 *next_id);
 +int bpf_map_get_next_id(__u32 start_id, __u32 *next_id);
 +int bpf_prog_get_fd_by_id(__u32 id);
 +int bpf_map_get_fd_by_id(__u32 id);
 +int bpf_btf_get_fd_by_id(__u32 id);
 +int bpf_obj_get_info_by_fd(int prog_fd, void *info, __u32 *info_len);
 +int bpf_prog_query(int target_fd, enum bpf_attach_type type, __u32 query_flags,
 +		   __u32 *attach_flags, __u32 *prog_ids, __u32 *prog_cnt);
 +int bpf_raw_tracepoint_open(const char *name, int prog_fd);
 +int bpf_load_btf(void *btf, __u32 btf_size, char *log_buf, __u32 log_buf_size,
 +		 bool do_log);
 +int bpf_task_fd_query(int pid, int fd, __u32 flags, char *buf, __u32 *buf_len,
 +		      __u32 *prog_id, __u32 *fd_type, __u64 *probe_offset,
 +		      __u64 *probe_addr);
 +#endif
++=======
+ LIBBPF_API int bpf_map_lookup_elem(int fd, const void *key, void *value);
+ LIBBPF_API int bpf_map_delete_elem(int fd, const void *key);
+ LIBBPF_API int bpf_map_get_next_key(int fd, const void *key, void *next_key);
+ LIBBPF_API int bpf_obj_pin(int fd, const char *pathname);
+ LIBBPF_API int bpf_obj_get(const char *pathname);
+ LIBBPF_API int bpf_prog_attach(int prog_fd, int attachable_fd,
+ 			       enum bpf_attach_type type, unsigned int flags);
+ LIBBPF_API int bpf_prog_detach(int attachable_fd, enum bpf_attach_type type);
+ LIBBPF_API int bpf_prog_detach2(int prog_fd, int attachable_fd,
+ 				enum bpf_attach_type type);
+ LIBBPF_API int bpf_prog_test_run(int prog_fd, int repeat, void *data,
+ 				 __u32 size, void *data_out, __u32 *size_out,
+ 				 __u32 *retval, __u32 *duration);
+ LIBBPF_API int bpf_prog_get_next_id(__u32 start_id, __u32 *next_id);
+ LIBBPF_API int bpf_map_get_next_id(__u32 start_id, __u32 *next_id);
+ LIBBPF_API int bpf_prog_get_fd_by_id(__u32 id);
+ LIBBPF_API int bpf_map_get_fd_by_id(__u32 id);
+ LIBBPF_API int bpf_btf_get_fd_by_id(__u32 id);
+ LIBBPF_API int bpf_obj_get_info_by_fd(int prog_fd, void *info, __u32 *info_len);
+ LIBBPF_API int bpf_prog_query(int target_fd, enum bpf_attach_type type,
+ 			      __u32 query_flags, __u32 *attach_flags,
+ 			      __u32 *prog_ids, __u32 *prog_cnt);
+ LIBBPF_API int bpf_raw_tracepoint_open(const char *name, int prog_fd);
+ LIBBPF_API int bpf_load_btf(void *btf, __u32 btf_size, char *log_buf,
+ 			    __u32 log_buf_size, bool do_log);
+ LIBBPF_API int bpf_task_fd_query(int pid, int fd, __u32 flags, char *buf,
+ 				 __u32 *buf_len, __u32 *prog_id, __u32 *fd_type,
+ 				 __u64 *probe_offset, __u64 *probe_addr);
+ #endif /* __LIBBPF_BPF_H */
++>>>>>>> ab9e08482122 (libbpf: Per-symbol visibility for DSO)
diff --cc tools/lib/bpf/btf.h
index caac3a404dc5,b77e7080f7e7..000000000000
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@@ -14,11 -18,15 +18,24 @@@ struct btf_type
  typedef int (*btf_print_fn_t)(const char *, ...)
  	__attribute__((format(printf, 1, 2)));
  
++<<<<<<< HEAD
 +void btf__free(struct btf *btf);
 +struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 +__s32 btf__find_by_name(const struct btf *btf, const char *type_name);
 +const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 id);
 +__s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 +int btf__fd(const struct btf *btf);
++=======
+ LIBBPF_API void btf__free(struct btf *btf);
+ LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
+ LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
+ 				   const char *type_name);
+ LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
+ 						  __u32 id);
+ LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
+ LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
+ LIBBPF_API int btf__fd(const struct btf *btf);
+ LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
++>>>>>>> ab9e08482122 (libbpf: Per-symbol visibility for DSO)
  
 -#endif /* __LIBBPF_BTF_H */
 +#endif
diff --cc tools/lib/bpf/libbpf.h
index c8c168c73302,1354cc9f8cba..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -300,8 -299,21 +311,29 @@@ enum bpf_perf_event_ret 
  
  typedef enum bpf_perf_event_ret (*bpf_perf_event_print_t)(void *event,
  							  void *priv);
++<<<<<<< HEAD
 +int bpf_perf_event_read_simple(void *mem, unsigned long size,
 +			       unsigned long page_size,
 +			       void **buf, size_t *buf_len,
 +			       bpf_perf_event_print_t fn, void *priv);
 +#endif
++=======
+ LIBBPF_API int bpf_perf_event_read_simple(void *mem, unsigned long size,
+ 					  unsigned long page_size,
+ 					  void **buf, size_t *buf_len,
+ 					  bpf_perf_event_print_t fn,
+ 					  void *priv);
+ 
+ struct nlattr;
+ typedef int (*libbpf_dump_nlmsg_t)(void *cookie, void *msg, struct nlattr **tb);
+ int libbpf_netlink_open(unsigned int *nl_pid);
+ int libbpf_nl_get_link(int sock, unsigned int nl_pid,
+ 		       libbpf_dump_nlmsg_t dump_link_nlmsg, void *cookie);
+ int libbpf_nl_get_class(int sock, unsigned int nl_pid, int ifindex,
+ 			libbpf_dump_nlmsg_t dump_class_nlmsg, void *cookie);
+ int libbpf_nl_get_qdisc(int sock, unsigned int nl_pid, int ifindex,
+ 			libbpf_dump_nlmsg_t dump_qdisc_nlmsg, void *cookie);
+ int libbpf_nl_get_filter(int sock, unsigned int nl_pid, int ifindex, int handle,
+ 			 libbpf_dump_nlmsg_t dump_filter_nlmsg, void *cookie);
+ #endif /* __LIBBPF_LIBBPF_H */
++>>>>>>> ab9e08482122 (libbpf: Per-symbol visibility for DSO)
diff --git a/tools/lib/bpf/Makefile b/tools/lib/bpf/Makefile
index 9bc7b2565c85..c42061fd80a9 100644
--- a/tools/lib/bpf/Makefile
+++ b/tools/lib/bpf/Makefile
@@ -125,6 +125,7 @@ override CFLAGS += $(EXTRA_WARNINGS)
 override CFLAGS += -Werror -Wall
 override CFLAGS += -fPIC
 override CFLAGS += $(INCLUDES)
+override CFLAGS += -fvisibility=hidden
 
 ifeq ($(VERBOSE),1)
   Q =
* Unmerged path tools/lib/bpf/bpf.h
* Unmerged path tools/lib/bpf/btf.h
* Unmerged path tools/lib/bpf/libbpf.h
