net/mlx5: Add monitor commands layout and event data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Eyal Davidovich <eyald@mellanox.com>
commit fd4572b3ff3ff57ca7fa612f9ea42b90afdd8bff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/fd4572b3.failed

Will be used in downstream patch to monitor counter changes
by the HCA and report it to the driver by an event.
The driver will update its counters cached data accordingly.

	Signed-off-by: Eyal Davidovich <eyald@mellanox.com>
	Reviewed-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit fd4572b3ff3ff57ca7fa612f9ea42b90afdd8bff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/eq.c
#	drivers/net/ethernet/mellanox/mlx5/core/events.c
#	include/linux/mlx5/mlx5_ifc.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eq.c
index a997f6ba7cac,ee04aab65a9f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@@ -833,12 -524,35 +833,41 @@@ int mlx5_start_eqs(struct mlx5_core_de
  	if (MLX5_CAP_GEN(dev, temp_warn_event))
  		async_event_mask |= (1ull << MLX5_EVENT_TYPE_TEMP_WARN_EVENT);
  
++<<<<<<< HEAD
 +	err = mlx5_create_map_eq(dev, &table->cmd_eq, MLX5_EQ_VEC_CMD,
 +				 MLX5_NUM_CMD_EQE, 1ull << MLX5_EVENT_TYPE_CMD,
 +				 "mlx5_cmd_eq", MLX5_EQ_TYPE_ASYNC);
++=======
+ 	if (MLX5_CAP_MCAM_REG(dev, tracer_registers))
+ 		async_event_mask |= (1ull << MLX5_EVENT_TYPE_DEVICE_TRACER);
+ 
+ 	if (MLX5_CAP_GEN(dev, max_num_of_monitor_counters))
+ 		async_event_mask |= (1ull << MLX5_EVENT_TYPE_MONITOR_COUNTER);
+ 
+ 	return async_event_mask;
+ }
+ 
+ static int create_async_eqs(struct mlx5_core_dev *dev)
+ {
+ 	struct mlx5_eq_table *table = dev->priv.eq_table;
+ 	struct mlx5_eq_param param = {};
+ 	int err;
+ 
+ 	MLX5_NB_INIT(&table->cq_err_nb, cq_err_event_notifier, CQ_ERROR);
+ 	mlx5_eq_notifier_register(dev, &table->cq_err_nb);
+ 
+ 	param = (struct mlx5_eq_param) {
+ 		.index = MLX5_EQ_CMD_IDX,
+ 		.mask = 1ull << MLX5_EVENT_TYPE_CMD,
+ 		.nent = MLX5_NUM_CMD_EQE,
+ 		.context = &table->cmd_eq,
+ 		.handler = mlx5_eq_async_int,
+ 	};
+ 	err = create_async_eq(dev, "mlx5_cmd_eq", &table->cmd_eq, &param);
++>>>>>>> fd4572b3ff3f (net/mlx5: Add monitor commands layout and event data)
  	if (err) {
  		mlx5_core_warn(dev, "failed to create cmd EQ %d\n", err);
 -		goto err0;
 +		return err;
  	}
  
  	mlx5_cmd_use_events(dev);
diff --cc include/linux/mlx5/mlx5_ifc.h
index bc410f62a151,9f7cc26bfb3b..000000000000
--- a/include/linux/mlx5/mlx5_ifc.h
+++ b/include/linux/mlx5/mlx5_ifc.h
@@@ -1177,7 -1200,19 +1179,23 @@@ struct mlx5_ifc_cmd_hca_cap_bits 
  	u8	   num_vhca_ports[0x8];
  	u8	   reserved_at_618[0x6];
  	u8	   sw_owner_id[0x1];
++<<<<<<< HEAD
 +	u8	   reserved_at_61f[0x1e1];
++=======
+ 	u8         reserved_at_61f[0x1];
+ 
+ 	u8         max_num_of_monitor_counters[0x10];
+ 	u8         num_ppcnt_monitor_counters[0x10];
+ 
+ 	u8         reserved_at_640[0x10];
+ 	u8         num_q_monitor_counters[0x10];
+ 
+ 	u8         reserved_at_660[0x40];
+ 
+ 	u8         uctx_cap[0x20];
+ 
+ 	u8	   reserved_at_6c0[0x140];
++>>>>>>> fd4572b3ff3f (net/mlx5: Add monitor commands layout and event data)
  };
  
  enum mlx5_flow_destination_type {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/events.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
index e8bb3b4dbc2b..ff1461302271 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
@@ -365,6 +365,8 @@ static int mlx5_internal_err_ret_value(struct mlx5_core_dev *dev, u16 op,
 	case MLX5_CMD_OP_QUERY_VPORT_COUNTER:
 	case MLX5_CMD_OP_ALLOC_Q_COUNTER:
 	case MLX5_CMD_OP_QUERY_Q_COUNTER:
+	case MLX5_CMD_OP_SET_MONITOR_COUNTER:
+	case MLX5_CMD_OP_ARM_MONITOR_COUNTER:
 	case MLX5_CMD_OP_SET_PP_RATE_LIMIT:
 	case MLX5_CMD_OP_QUERY_RATE_LIMIT:
 	case MLX5_CMD_OP_CREATE_SCHEDULING_ELEMENT:
@@ -510,6 +512,8 @@ const char *mlx5_command_str(int command)
 	MLX5_COMMAND_STR_CASE(ALLOC_Q_COUNTER);
 	MLX5_COMMAND_STR_CASE(DEALLOC_Q_COUNTER);
 	MLX5_COMMAND_STR_CASE(QUERY_Q_COUNTER);
+	MLX5_COMMAND_STR_CASE(SET_MONITOR_COUNTER);
+	MLX5_COMMAND_STR_CASE(ARM_MONITOR_COUNTER);
 	MLX5_COMMAND_STR_CASE(SET_PP_RATE_LIMIT);
 	MLX5_COMMAND_STR_CASE(QUERY_RATE_LIMIT);
 	MLX5_COMMAND_STR_CASE(CREATE_SCHEDULING_ELEMENT);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eq.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/events.c
diff --git a/include/linux/mlx5/device.h b/include/linux/mlx5/device.h
index 142dacf6f5ff..89faef5bb21c 100644
--- a/include/linux/mlx5/device.h
+++ b/include/linux/mlx5/device.h
@@ -324,6 +324,7 @@ enum mlx5_event {
 	MLX5_EVENT_TYPE_TEMP_WARN_EVENT    = 0x17,
 	MLX5_EVENT_TYPE_REMOTE_CONFIG	   = 0x19,
 	MLX5_EVENT_TYPE_GENERAL_EVENT	   = 0x22,
+	MLX5_EVENT_TYPE_MONITOR_COUNTER    = 0x24,
 	MLX5_EVENT_TYPE_PPS_EVENT          = 0x25,
 
 	MLX5_EVENT_TYPE_DB_BF_CONGESTION   = 0x1a,
* Unmerged path include/linux/mlx5/mlx5_ifc.h
