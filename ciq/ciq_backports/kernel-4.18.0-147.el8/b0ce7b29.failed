regulator/gpio: Allow nonexclusive GPIO access

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [regulator] ALSA: regulator/gpio: Allow nonexclusive GPIO access (Jaroslav Kysela) [1683051]
Rebuild_FUZZ: 93.88%
commit-author Linus Walleij <linus.walleij@linaro.org>
commit b0ce7b29bfcd090ddba476f45a75ec0a797b048a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/b0ce7b29.failed

This allows nonexclusive (simultaneous) access to a single
GPIO line for the fixed regulator enable line. This happens
when several regulators use the same GPIO for enabling and
disabling a regulator, and all need a handle on their GPIO
descriptor.

This solution with a special flag is not entirely elegant
and should ideally be replaced by something more careful as
this makes it possible for several consumers to
enable/disable the same GPIO line to the left and right
without any consistency. The current use inside the regulator
core should however be fine as it takes special care to
handle this.

For the state of the GPIO backend, this is still the
lesser evil compared to going back to global GPIO
numbers.

	Cc: Marek Szyprowski <m.szyprowski@samsung.com>
	Cc: Jon Hunter <jonathanh@nvidia.com>
Fixes: efdfeb079cc3 ("regulator: fixed: Convert to use GPIO descriptor only")
	Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
	Tested-by: Jon Hunter <jonathanh@nvidia.com>
	Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit b0ce7b29bfcd090ddba476f45a75ec0a797b048a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/regulator/fixed.c
diff --cc drivers/regulator/fixed.c
index d68ff65a5adc,ccc29038f19a..000000000000
--- a/drivers/regulator/fixed.c
+++ b/drivers/regulator/fixed.c
@@@ -163,17 -154,38 +163,43 @@@ static int reg_fixed_voltage_probe(stru
  	cfg.ena_gpio_invert = !config->enable_high;
  	if (config->enabled_at_boot) {
  		if (config->enable_high)
 -			gflags = GPIOD_OUT_HIGH;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_HIGH;
  		else
 -			gflags = GPIOD_OUT_LOW;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_LOW;
  	} else {
  		if (config->enable_high)
 -			gflags = GPIOD_OUT_LOW;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_LOW;
  		else
 -			gflags = GPIOD_OUT_HIGH;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_HIGH;
  	}
++<<<<<<< HEAD
 +	if (config->gpio_is_open_drain)
 +		cfg.ena_gpio_flags |= GPIOF_OPEN_DRAIN;
++=======
+ 	if (config->gpio_is_open_drain) {
+ 		if (gflags == GPIOD_OUT_HIGH)
+ 			gflags = GPIOD_OUT_HIGH_OPEN_DRAIN;
+ 		else
+ 			gflags = GPIOD_OUT_LOW_OPEN_DRAIN;
+ 	}
+ 
+ 	/*
+ 	 * Some fixed regulators share the enable line between two
+ 	 * regulators which makes it necessary to get a handle on the
+ 	 * same descriptor for two different consumers. This will get
+ 	 * the GPIO descriptor, but only the first call will initialize
+ 	 * it so any flags such as inversion or open drain will only
+ 	 * be set up by the first caller and assumed identical on the
+ 	 * next caller.
+ 	 *
+ 	 * FIXME: find a better way to deal with this.
+ 	 */
+ 	gflags |= GPIOD_FLAGS_BIT_NONEXCLUSIVE;
+ 
+ 	cfg.ena_gpiod = devm_gpiod_get_optional(&pdev->dev, NULL, gflags);
+ 	if (IS_ERR(cfg.ena_gpiod))
+ 		return PTR_ERR(cfg.ena_gpiod);
++>>>>>>> b0ce7b29bfcd (regulator/gpio: Allow nonexclusive GPIO access)
  
  	cfg.dev = &pdev->dev;
  	cfg.init_data = config->init_data;
diff --git a/drivers/gpio/gpiolib.c b/drivers/gpio/gpiolib.c
index c6f77e806cb8..ceee8edd1847 100644
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@ -3887,8 +3887,23 @@ struct gpio_desc *__must_check gpiod_get_index(struct device *dev,
 	 * the device name as label
 	 */
 	status = gpiod_request(desc, con_id ? con_id : devname);
-	if (status < 0)
-		return ERR_PTR(status);
+	if (status < 0) {
+		if (status == -EBUSY && flags & GPIOD_FLAGS_BIT_NONEXCLUSIVE) {
+			/*
+			 * This happens when there are several consumers for
+			 * the same GPIO line: we just return here without
+			 * further initialization. It is a bit if a hack.
+			 * This is necessary to support fixed regulators.
+			 *
+			 * FIXME: Make this more sane and safe.
+			 */
+			dev_info(dev, "nonexclusive access to GPIO for %s\n",
+				 con_id ? con_id : devname);
+			return desc;
+		} else {
+			return ERR_PTR(status);
+		}
+	}
 
 	status = gpiod_configure_flags(desc, con_id, lookupflags, flags);
 	if (status < 0) {
* Unmerged path drivers/regulator/fixed.c
diff --git a/include/linux/gpio/consumer.h b/include/linux/gpio/consumer.h
index e8aaf34dd65d..ffd1777424c5 100644
--- a/include/linux/gpio/consumer.h
+++ b/include/linux/gpio/consumer.h
@@ -30,6 +30,7 @@ struct gpio_descs {
 #define GPIOD_FLAGS_BIT_DIR_OUT		BIT(1)
 #define GPIOD_FLAGS_BIT_DIR_VAL		BIT(2)
 #define GPIOD_FLAGS_BIT_OPEN_DRAIN	BIT(3)
+#define GPIOD_FLAGS_BIT_NONEXCLUSIVE	BIT(4)
 
 /**
  * Optional flags that can be passed to one of gpiod_* to configure direction
