IB/core: Introduce UVERBS_IDR_ANY_OBJECT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit 4d7e8cc57429e1874658acbff98d3877c81cd0a4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/4d7e8cc5.failed

Introduce the UVERBS_IDR_ANY_OBJECT type to match any IDR object.

Once used, the infrastructure skips checking for the IDR type, it
becomes the driver handler responsibility.

This enables drivers to get in a given method an object from various of
types.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 4d7e8cc57429e1874658acbff98d3877c81cd0a4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/rdma_core.c
#	drivers/infiniband/core/rdma_core.h
#	drivers/infiniband/core/uverbs_uapi.c
#	include/rdma/uverbs_ioctl.h
diff --cc drivers/infiniband/core/rdma_core.c
index 7abca5514e4d,7d2f1ef75025..000000000000
--- a/drivers/infiniband/core/rdma_core.c
+++ b/drivers/infiniband/core/rdma_core.c
@@@ -275,25 -398,43 +275,49 @@@ struct ib_uobject *rdma_lookup_get_uobj
  	struct ib_uobject *uobj;
  	int ret;
  
++<<<<<<< HEAD
 +	uobj = type->type_class->lookup_get(type, ucontext, id, exclusive);
 +	if (IS_ERR(uobj))
 +		return uobj;
 +
 +	if (uobj->type != type) {
 +		ret = -EINVAL;
 +		goto free;
++=======
+ 	if (IS_ERR(obj) && PTR_ERR(obj) == -ENOMSG) {
+ 		/* must be UVERBS_IDR_ANY_OBJECT, see uapi_get_object() */
+ 		uobj = lookup_get_idr_uobject(NULL, ufile, id, mode);
+ 		if (IS_ERR(uobj))
+ 			return uobj;
+ 	} else {
+ 		if (IS_ERR(obj))
+ 			return ERR_PTR(-EINVAL);
+ 
+ 		uobj = obj->type_class->lookup_get(obj, ufile, id, mode);
+ 		if (IS_ERR(uobj))
+ 			return uobj;
+ 
+ 		if (uobj->uapi_object != obj) {
+ 			ret = -EINVAL;
+ 			goto free;
+ 		}
++>>>>>>> 4d7e8cc57429 (IB/core: Introduce UVERBS_IDR_ANY_OBJECT)
  	}
  
 -	/*
 -	 * If we have been disassociated block every command except for
 -	 * DESTROY based commands.
 -	 */
 -	if (mode != UVERBS_LOOKUP_DESTROY &&
 -	    !srcu_dereference(ufile->device->ib_dev,
 -			      &ufile->device->disassociate_srcu)) {
 -		ret = -EIO;
 +	ret = uverbs_try_lock_object(uobj, exclusive);
 +	if (ret) {
 +		WARN(ucontext->cleanup_reason,
 +		     "ib_uverbs: Trying to lookup_get while cleanup context\n");
  		goto free;
  	}
  
 -	ret = uverbs_try_lock_object(uobj, mode);
 -	if (ret)
 -		goto free;
 -
  	return uobj;
  free:
++<<<<<<< HEAD
 +	uobj->type->type_class->lookup_put(uobj, exclusive);
++=======
+ 	uobj->uapi_object->type_class->lookup_put(uobj, mode);
++>>>>>>> 4d7e8cc57429 (IB/core: Introduce UVERBS_IDR_ANY_OBJECT)
  	uverbs_uobject_put(uobj);
  	return ERR_PTR(ret);
  }
@@@ -366,18 -493,46 +390,40 @@@ static struct ib_uobject *alloc_begin_f
  	return uobj;
  }
  
 -struct ib_uobject *rdma_alloc_begin_uobject(const struct uverbs_api_object *obj,
 -					    struct ib_uverbs_file *ufile)
 +struct ib_uobject *rdma_alloc_begin_uobject(const struct uverbs_obj_type *type,
 +					    struct ib_ucontext *ucontext)
  {
++<<<<<<< HEAD
 +	return type->type_class->alloc_begin(type, ucontext);
++=======
+ 	struct ib_uobject *ret;
+ 
+ 	if (IS_ERR(obj))
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	/*
+ 	 * The hw_destroy_rwsem is held across the entire object creation and
+ 	 * released during rdma_alloc_commit_uobject or
+ 	 * rdma_alloc_abort_uobject
+ 	 */
+ 	if (!down_read_trylock(&ufile->hw_destroy_rwsem))
+ 		return ERR_PTR(-EIO);
+ 
+ 	ret = obj->type_class->alloc_begin(obj, ufile);
+ 	if (IS_ERR(ret)) {
+ 		up_read(&ufile->hw_destroy_rwsem);
+ 		return ret;
+ 	}
+ 	return ret;
++>>>>>>> 4d7e8cc57429 (IB/core: Introduce UVERBS_IDR_ANY_OBJECT)
  }
  
 -static void alloc_abort_idr_uobject(struct ib_uobject *uobj)
 -{
 -	ib_rdmacg_uncharge(&uobj->cg_obj, uobj->context->device,
 -			   RDMACG_RESOURCE_HCA_OBJECT);
 -
 -	spin_lock(&uobj->ufile->idr_lock);
 -	idr_remove(&uobj->ufile->idr, uobj->id);
 -	spin_unlock(&uobj->ufile->idr_lock);
 -}
 -
 -static int __must_check destroy_hw_idr_uobject(struct ib_uobject *uobj,
 -					       enum rdma_remove_reason why)
 +static int __must_check remove_commit_idr_uobject(struct ib_uobject *uobj,
 +						  enum rdma_remove_reason why)
  {
  	const struct uverbs_obj_idr_type *idr_type =
 -		container_of(uobj->uapi_object->type_attrs,
 -			     struct uverbs_obj_idr_type, type);
 +		container_of(uobj->type, struct uverbs_obj_idr_type,
 +			     type);
  	int ret = idr_type->destroy_object(uobj, why);
  
  	/*
diff --cc drivers/infiniband/core/rdma_core.h
index a243cc2a59f7,8aec28037c48..000000000000
--- a/drivers/infiniband/core/rdma_core.h
+++ b/drivers/infiniband/core/rdma_core.h
@@@ -113,4 -106,117 +113,120 @@@ int uverbs_finalize_object(struct ib_uo
  			   enum uverbs_obj_access access,
  			   bool commit);
  
++<<<<<<< HEAD
++=======
+ void setup_ufile_idr_uobject(struct ib_uverbs_file *ufile);
+ void release_ufile_idr_uobject(struct ib_uverbs_file *ufile);
+ 
+ /*
+  * This is the runtime description of the uverbs API, used by the syscall
+  * machinery to validate and dispatch calls.
+  */
+ 
+ /*
+  * Depending on ID the slot pointer in the radix tree points at one of these
+  * structs.
+  */
+ struct uverbs_api_object {
+ 	const struct uverbs_obj_type *type_attrs;
+ 	const struct uverbs_obj_type_class *type_class;
+ 	u8 disabled:1;
+ };
+ 
+ struct uverbs_api_ioctl_method {
+ 	int(__rcu *handler)(struct uverbs_attr_bundle *attrs);
+ 	DECLARE_BITMAP(attr_mandatory, UVERBS_API_ATTR_BKEY_LEN);
+ 	u16 bundle_size;
+ 	u8 use_stack:1;
+ 	u8 driver_method:1;
+ 	u8 disabled:1;
+ 	u8 has_udata:1;
+ 	u8 key_bitmap_len;
+ 	u8 destroy_bkey;
+ };
+ 
+ struct uverbs_api_write_method {
+ 	int (*handler)(struct uverbs_attr_bundle *attrs);
+ 	u8 disabled:1;
+ 	u8 is_ex:1;
+ 	u8 has_udata:1;
+ 	u8 has_resp:1;
+ 	u8 req_size;
+ 	u8 resp_size;
+ };
+ 
+ struct uverbs_api_attr {
+ 	struct uverbs_attr_spec spec;
+ };
+ 
+ struct uverbs_api {
+ 	/* radix tree contains struct uverbs_api_* pointers */
+ 	struct radix_tree_root radix;
+ 	enum rdma_driver_id driver_id;
+ 
+ 	unsigned int num_write;
+ 	unsigned int num_write_ex;
+ 	struct uverbs_api_write_method notsupp_method;
+ 	const struct uverbs_api_write_method **write_methods;
+ 	const struct uverbs_api_write_method **write_ex_methods;
+ };
+ 
+ /*
+  * Get an uverbs_api_object that corresponds to the given object_id.
+  * Note:
+  * -ENOMSG means that any object is allowed to match during lookup.
+  */
+ static inline const struct uverbs_api_object *
+ uapi_get_object(struct uverbs_api *uapi, u16 object_id)
+ {
+ 	const struct uverbs_api_object *res;
+ 
+ 	if (object_id == UVERBS_IDR_ANY_OBJECT)
+ 		return ERR_PTR(-ENOMSG);
+ 
+ 	res = radix_tree_lookup(&uapi->radix, uapi_key_obj(object_id));
+ 	if (!res)
+ 		return ERR_PTR(-ENOENT);
+ 
+ 	return res;
+ }
+ 
+ char *uapi_key_format(char *S, unsigned int key);
+ struct uverbs_api *uverbs_alloc_api(struct ib_device *ibdev);
+ void uverbs_disassociate_api_pre(struct ib_uverbs_device *uverbs_dev);
+ void uverbs_disassociate_api(struct uverbs_api *uapi);
+ void uverbs_destroy_api(struct uverbs_api *uapi);
+ void uapi_compute_bundle_size(struct uverbs_api_ioctl_method *method_elm,
+ 			      unsigned int num_attrs);
+ void uverbs_user_mmap_disassociate(struct ib_uverbs_file *ufile);
+ 
+ extern const struct uapi_definition uverbs_def_obj_counters[];
+ extern const struct uapi_definition uverbs_def_obj_cq[];
+ extern const struct uapi_definition uverbs_def_obj_dm[];
+ extern const struct uapi_definition uverbs_def_obj_flow_action[];
+ extern const struct uapi_definition uverbs_def_obj_intf[];
+ extern const struct uapi_definition uverbs_def_obj_mr[];
+ extern const struct uapi_definition uverbs_def_write_intf[];
+ 
+ static inline const struct uverbs_api_write_method *
+ uapi_get_method(const struct uverbs_api *uapi, u32 command)
+ {
+ 	u32 cmd_idx = command & IB_USER_VERBS_CMD_COMMAND_MASK;
+ 
+ 	if (command & ~(u32)(IB_USER_VERBS_CMD_FLAG_EXTENDED |
+ 			     IB_USER_VERBS_CMD_COMMAND_MASK))
+ 		return ERR_PTR(-EINVAL);
+ 
+ 	if (command & IB_USER_VERBS_CMD_FLAG_EXTENDED) {
+ 		if (cmd_idx >= uapi->num_write_ex)
+ 			return ERR_PTR(-EOPNOTSUPP);
+ 		return uapi->write_ex_methods[cmd_idx];
+ 	}
+ 
+ 	if (cmd_idx >= uapi->num_write)
+ 		return ERR_PTR(-EOPNOTSUPP);
+ 	return uapi->write_methods[cmd_idx];
+ }
+ 
++>>>>>>> 4d7e8cc57429 (IB/core: Introduce UVERBS_IDR_ANY_OBJECT)
  #endif /* RDMA_CORE_H */
diff --cc include/rdma/uverbs_ioctl.h
index 90a4947ff548,2f56844fb7da..000000000000
--- a/include/rdma/uverbs_ioctl.h
+++ b/include/rdma/uverbs_ioctl.h
@@@ -191,137 -339,275 +191,213 @@@ struct uverbs_object_def 
  	const struct uverbs_method_def * const (*methods)[];
  };
  
 -enum uapi_definition_kind {
 -	UAPI_DEF_END = 0,
 -	UAPI_DEF_OBJECT_START,
 -	UAPI_DEF_WRITE,
 -	UAPI_DEF_CHAIN_OBJ_TREE,
 -	UAPI_DEF_CHAIN,
 -	UAPI_DEF_IS_SUPPORTED_FUNC,
 -	UAPI_DEF_IS_SUPPORTED_DEV_FN,
 -};
 -
 -enum uapi_definition_scope {
 -	UAPI_SCOPE_OBJECT = 1,
 -	UAPI_SCOPE_METHOD = 2,
 +struct uverbs_object_tree_def {
 +	size_t					 num_objects;
 +	const struct uverbs_object_def * const (*objects)[];
  };
  
 -struct uapi_definition {
 -	u8 kind;
 -	u8 scope;
 -	union {
 -		struct {
 -			u16 object_id;
 -		} object_start;
 -		struct {
 -			u16 command_num;
 -			u8 is_ex:1;
 -			u8 has_udata:1;
 -			u8 has_resp:1;
 -			u8 req_size;
 -			u8 resp_size;
 -		} write;
 -	};
 -
 -	union {
 -		bool (*func_is_supported)(struct ib_device *device);
 -		int (*func_write)(struct uverbs_attr_bundle *attrs);
 -		const struct uapi_definition *chain;
 -		const struct uverbs_object_def *chain_obj_tree;
 -		size_t needs_fn_offset;
 -	};
 -};
 -
 -/* Define things connected to object_id */
 -#define DECLARE_UVERBS_OBJECT(_object_id, ...)                                 \
 -	{                                                                      \
 -		.kind = UAPI_DEF_OBJECT_START,                                 \
 -		.object_start = { .object_id = _object_id },                   \
 -	},                                                                     \
 -		##__VA_ARGS__
 -
 -/* Use in a var_args of DECLARE_UVERBS_OBJECT */
 -#define DECLARE_UVERBS_WRITE(_command_num, _func, _cmd_desc, ...)              \
 -	{                                                                      \
 -		.kind = UAPI_DEF_WRITE,                                        \
 -		.scope = UAPI_SCOPE_OBJECT,                                    \
 -		.write = { .is_ex = 0, .command_num = _command_num },          \
 -		.func_write = _func,                                           \
 -		_cmd_desc,                                                     \
 -	},                                                                     \
 -		##__VA_ARGS__
 -
 -/* Use in a var_args of DECLARE_UVERBS_OBJECT */
 -#define DECLARE_UVERBS_WRITE_EX(_command_num, _func, _cmd_desc, ...)           \
 -	{                                                                      \
 -		.kind = UAPI_DEF_WRITE,                                        \
 -		.scope = UAPI_SCOPE_OBJECT,                                    \
 -		.write = { .is_ex = 1, .command_num = _command_num },          \
 -		.func_write = _func,                                           \
 -		_cmd_desc,                                                     \
 -	},                                                                     \
 -		##__VA_ARGS__
 +#define UA_FLAGS(_flags)  .flags = _flags
 +#define __UVERBS_ATTR0(_id, _type, _fld, _attr, ...)              \
 +	((const struct uverbs_attr_def)				  \
 +	 {.id = _id, .attr = {{._fld = {.type = _type, _attr, .flags = 0, } }, } })
 +#define __UVERBS_ATTR1(_id, _type, _fld, _attr, _extra1, ...)      \
 +	((const struct uverbs_attr_def)				  \
 +	 {.id = _id, .attr = {{._fld = {.type = _type, _attr, _extra1 } },} })
 +#define __UVERBS_ATTR2(_id, _type, _fld, _attr, _extra1, _extra2)    \
 +	((const struct uverbs_attr_def)				  \
 +	 {.id = _id, .attr = {{._fld = {.type = _type, _attr, _extra1, _extra2 } },} })
 +#define __UVERBS_ATTR(_id, _type, _fld, _attr, _extra1, _extra2, _n, ...)	\
 +	__UVERBS_ATTR##_n(_id, _type, _fld, _attr, _extra1, _extra2)
  
 -/*
 - * Object is only supported if the function pointer named ibdev_fn in struct
 - * ib_device is not NULL.
 - */
 -#define UAPI_DEF_OBJ_NEEDS_FN(ibdev_fn)                                        \
 -	{                                                                      \
 -		.kind = UAPI_DEF_IS_SUPPORTED_DEV_FN,                          \
 -		.scope = UAPI_SCOPE_OBJECT,                                    \
 -		.needs_fn_offset =                                             \
 -			offsetof(struct ib_device, ibdev_fn) +                 \
 -			BUILD_BUG_ON_ZERO(                                     \
 -				sizeof(((struct ib_device *)0)->ibdev_fn) !=   \
 -				sizeof(void *)),                               \
 -	}
 -
 -/*
 - * Method is only supported if the function pointer named ibdev_fn in struct
 - * ib_device is not NULL.
 - */
 -#define UAPI_DEF_METHOD_NEEDS_FN(ibdev_fn)                                     \
 -	{                                                                      \
 -		.kind = UAPI_DEF_IS_SUPPORTED_DEV_FN,                          \
 -		.scope = UAPI_SCOPE_METHOD,                                    \
 -		.needs_fn_offset =                                             \
 -			offsetof(struct ib_device, ibdev_fn) +                 \
 -			BUILD_BUG_ON_ZERO(                                     \
 -				sizeof(((struct ib_device *)0)->ibdev_fn) !=   \
 -				sizeof(void *)),                               \
 -	}
 -
 -/* Call a function to determine if the entire object is supported or not */
 -#define UAPI_DEF_IS_OBJ_SUPPORTED(_func)                                       \
 -	{                                                                      \
 -		.kind = UAPI_DEF_IS_SUPPORTED_FUNC,                            \
 -		.scope = UAPI_SCOPE_OBJECT, .func_is_supported = _func,        \
 -	}
 -
 -/* Include another struct uapi_definition in this one */
 -#define UAPI_DEF_CHAIN(_def_var)                                               \
 -	{                                                                      \
 -		.kind = UAPI_DEF_CHAIN, .chain = _def_var,                     \
 -	}
 -
 -/* Temporary until the tree base description is replaced */
 -#define UAPI_DEF_CHAIN_OBJ_TREE(_object_enum, _object_ptr)                     \
 -	{                                                                      \
 -		.kind = UAPI_DEF_CHAIN_OBJ_TREE,                               \
 -		.object_start = { .object_id = _object_enum },                 \
 -		.chain_obj_tree = _object_ptr,                                 \
 -	}
 -#define UAPI_DEF_CHAIN_OBJ_TREE_NAMED(_object_enum, ...)                       \
 -	UAPI_DEF_CHAIN_OBJ_TREE(_object_enum, &UVERBS_OBJECT(_object_enum)),   \
 -		##__VA_ARGS__
 -
 -/*
 - * =======================================
 - *	Attribute Specifications
 - * =======================================
 - */
 -
 -#define UVERBS_ATTR_SIZE(_min_len, _len)			\
 -	.u.ptr.min_len = _min_len, .u.ptr.len = _len
 -
 -#define UVERBS_ATTR_NO_DATA() UVERBS_ATTR_SIZE(0, 0)
 -
 -/*
 - * Specifies a uapi structure that cannot be extended. The user must always
 - * supply the whole structure and nothing more. The structure must be declared
 - * in a header under include/uapi/rdma.
 - */
  #define UVERBS_ATTR_TYPE(_type)					\
 -	.u.ptr.min_len = sizeof(_type), .u.ptr.len = sizeof(_type)
 -/*
 - * Specifies a uapi structure where the user must provide at least up to
 - * member 'last'.  Anything after last and up until the end of the structure
 - * can be non-zero, anything longer than the end of the structure must be
 - * zero. The structure must be declared in a header under include/uapi/rdma.
 - */
 -#define UVERBS_ATTR_STRUCT(_type, _last)                                       \
 -	.zero_trailing = 1,                                                    \
 -	UVERBS_ATTR_SIZE(((uintptr_t)(&((_type *)0)->_last + 1)),              \
 -			 sizeof(_type))
 -/*
 - * Specifies at least min_len bytes must be passed in, but the amount can be
 - * larger, up to the protocol maximum size. No check for zeroing is done.
 - */
 -#define UVERBS_ATTR_MIN_SIZE(_min_len) UVERBS_ATTR_SIZE(_min_len, USHRT_MAX)
 -
 -/* Must be used in the '...' of any UVERBS_ATTR */
 -#define UA_ALLOC_AND_COPY .alloc_and_copy = 1
 -#define UA_MANDATORY .mandatory = 1
 -#define UA_OPTIONAL .mandatory = 0
 +	.min_len = sizeof(_type), .len = sizeof(_type)
 +#define UVERBS_ATTR_STRUCT(_type, _last)			\
 +	.min_len = ((uintptr_t)(&((_type *)0)->_last + 1)), .len = sizeof(_type)
 +#define UVERBS_ATTR_SIZE(_min_len, _len)			\
 +	.min_len = _min_len, .len = _len
 +#define UVERBS_ATTR_MIN_SIZE(_min_len)				\
 +	UVERBS_ATTR_SIZE(_min_len, USHRT_MAX)
  
  /*
 - * min_len must be bigger than 0 and _max_len must be smaller than 4095.  Only
 - * READ\WRITE accesses are supported.
 + * In new compiler, UVERBS_ATTR could be simplified by declaring it as
 + * [_id] = {.type = _type, .len = _len, ##__VA_ARGS__}
 + * But since we support older compilers too, we need the more complex code.
   */
++<<<<<<< HEAD
 +#define UVERBS_ATTR(_id, _type, _fld, _attr, ...)			\
 +	__UVERBS_ATTR(_id, _type, _fld, _attr, ##__VA_ARGS__, 2, 1, 0)
 +#define UVERBS_ATTR_PTR_IN_SZ(_id, _len, ...)				\
 +	UVERBS_ATTR(_id, UVERBS_ATTR_TYPE_PTR_IN, ptr, _len, ##__VA_ARGS__)
 +/* If sizeof(_type) <= sizeof(u64), this will be inlined rather than a pointer */
 +#define UVERBS_ATTR_PTR_IN(_id, _type, ...)				\
 +	UVERBS_ATTR_PTR_IN_SZ(_id, _type, ##__VA_ARGS__)
 +#define UVERBS_ATTR_PTR_OUT_SZ(_id, _len, ...)				\
 +	UVERBS_ATTR(_id, UVERBS_ATTR_TYPE_PTR_OUT, ptr, _len, ##__VA_ARGS__)
 +#define UVERBS_ATTR_PTR_OUT(_id, _type, ...)				\
 +	UVERBS_ATTR_PTR_OUT_SZ(_id, _type, ##__VA_ARGS__)
 +#define UVERBS_ATTR_ENUM_IN(_id, _enum_arr, ...)			\
 +	UVERBS_ATTR(_id, UVERBS_ATTR_TYPE_ENUM_IN, enum_def,		\
 +		    .ids = (_enum_arr),					\
 +		    .num_elems = ARRAY_SIZE(_enum_arr), ##__VA_ARGS__)
++=======
+ #define UVERBS_ATTR_IDRS_ARR(_attr_id, _idr_type, _access, _min_len, _max_len, \
+ 			     ...)                                              \
+ 	(&(const struct uverbs_attr_def){                                      \
+ 		.id = (_attr_id) +                                             \
+ 		      BUILD_BUG_ON_ZERO((_min_len) == 0 ||                     \
+ 					(_max_len) >                           \
+ 						PAGE_SIZE / sizeof(void *) ||  \
+ 					(_min_len) > (_max_len) ||             \
+ 					(_access) == UVERBS_ACCESS_NEW ||      \
+ 					(_access) == UVERBS_ACCESS_DESTROY),   \
+ 		.attr = { .type = UVERBS_ATTR_TYPE_IDRS_ARRAY,                 \
+ 			  .u2.objs_arr.obj_type = _idr_type,                   \
+ 			  .u2.objs_arr.access = _access,                       \
+ 			  .u2.objs_arr.min_len = _min_len,                     \
+ 			  .u2.objs_arr.max_len = _max_len,                     \
+ 			  __VA_ARGS__ } })
+ 
+ /*
+  * Only for use with UVERBS_ATTR_IDR, allows any uobject type to be accepted,
+  * the user must validate the type of the uobject instead.
+  */
+ #define UVERBS_IDR_ANY_OBJECT 0xFFFF
+ 
+ #define UVERBS_ATTR_IDR(_attr_id, _idr_type, _access, ...)                     \
+ 	(&(const struct uverbs_attr_def){                                      \
+ 		.id = _attr_id,                                                \
+ 		.attr = { .type = UVERBS_ATTR_TYPE_IDR,                        \
+ 			  .u.obj.obj_type = _idr_type,                         \
+ 			  .u.obj.access = _access,                             \
+ 			  __VA_ARGS__ } })
+ 
+ #define UVERBS_ATTR_FD(_attr_id, _fd_type, _access, ...)                       \
+ 	(&(const struct uverbs_attr_def){                                      \
+ 		.id = (_attr_id) +                                             \
+ 		      BUILD_BUG_ON_ZERO((_access) != UVERBS_ACCESS_NEW &&      \
+ 					(_access) != UVERBS_ACCESS_READ),      \
+ 		.attr = { .type = UVERBS_ATTR_TYPE_FD,                         \
+ 			  .u.obj.obj_type = _fd_type,                          \
+ 			  .u.obj.access = _access,                             \
+ 			  __VA_ARGS__ } })
+ 
+ #define UVERBS_ATTR_PTR_IN(_attr_id, _type, ...)                               \
+ 	(&(const struct uverbs_attr_def){                                      \
+ 		.id = _attr_id,                                                \
+ 		.attr = { .type = UVERBS_ATTR_TYPE_PTR_IN,                     \
+ 			  _type,                                               \
+ 			  __VA_ARGS__ } })
+ 
+ #define UVERBS_ATTR_PTR_OUT(_attr_id, _type, ...)                              \
+ 	(&(const struct uverbs_attr_def){                                      \
+ 		.id = _attr_id,                                                \
+ 		.attr = { .type = UVERBS_ATTR_TYPE_PTR_OUT,                    \
+ 			  _type,                                               \
+ 			  __VA_ARGS__ } })
+ 
+ /* _enum_arry should be a 'static const union uverbs_attr_spec[]' */
+ #define UVERBS_ATTR_ENUM_IN(_attr_id, _enum_arr, ...)                          \
+ 	(&(const struct uverbs_attr_def){                                      \
+ 		.id = _attr_id,                                                \
+ 		.attr = { .type = UVERBS_ATTR_TYPE_ENUM_IN,                    \
+ 			  .u2.enum_def.ids = _enum_arr,                        \
+ 			  .u.enum_def.num_elems = ARRAY_SIZE(_enum_arr),       \
+ 			  __VA_ARGS__ },                                       \
+ 	})
+ 
+ /* An input value that is a member in the enum _enum_type. */
+ #define UVERBS_ATTR_CONST_IN(_attr_id, _enum_type, ...)                        \
+ 	UVERBS_ATTR_PTR_IN(                                                    \
+ 		_attr_id,                                                      \
+ 		UVERBS_ATTR_SIZE(                                              \
+ 			sizeof(u64) + BUILD_BUG_ON_ZERO(!sizeof(_enum_type)),  \
+ 			sizeof(u64)),                                          \
+ 		__VA_ARGS__)
++>>>>>>> 4d7e8cc57429 (IB/core: Introduce UVERBS_IDR_ANY_OBJECT)
  
  /*
 - * An input value that is a bitwise combination of values of _enum_type.
 - * This permits the flag value to be passed as either a u32 or u64, it must
 - * be retrieved via uverbs_get_flag().
 - */
 -#define UVERBS_ATTR_FLAGS_IN(_attr_id, _enum_type, ...)                        \
 -	UVERBS_ATTR_PTR_IN(                                                    \
 -		_attr_id,                                                      \
 -		UVERBS_ATTR_SIZE(sizeof(u32) + BUILD_BUG_ON_ZERO(              \
 -						       !sizeof(_enum_type *)), \
 -				 sizeof(u64)),                                 \
 -		__VA_ARGS__)
 -
 -/*
 - * This spec is used in order to pass information to the hardware driver in a
 - * legacy way. Every verb that could get driver specific data should get this
 - * spec.
 + * In new compiler, UVERBS_ATTR_IDR (and FD) could be simplified by declaring
 + * it as
 + * {.id = _id,								\
 + *  .attr {.type = __obj_class,						\
 + *         .obj = {.obj_type = _idr_type,				\
 + *                       .access = _access                              \
 + *                }, ##__VA_ARGS__ } }
 + * But since we support older compilers too, we need the more complex code.
   */
 -#define UVERBS_ATTR_UHW()                                                      \
 -	UVERBS_ATTR_PTR_IN(UVERBS_ATTR_UHW_IN,                                 \
 -			   UVERBS_ATTR_MIN_SIZE(0),			       \
 -			   UA_OPTIONAL,                                        \
 -			   .is_udata = 1),				       \
 -	UVERBS_ATTR_PTR_OUT(UVERBS_ATTR_UHW_OUT,                               \
 -			    UVERBS_ATTR_MIN_SIZE(0),			       \
 -			    UA_OPTIONAL,                                       \
 -			    .is_udata = 1)
 +#define ___UVERBS_ATTR_OBJ0(_id, _obj_class, _obj_type, _access, ...)\
 +	((const struct uverbs_attr_def)					\
 +	{.id = _id,							\
 +	 .attr = { {.obj = {.type = _obj_class, .obj_type = _obj_type,	\
 +			    .access = _access, .flags = 0 } }, } })
 +#define ___UVERBS_ATTR_OBJ1(_id, _obj_class, _obj_type, _access, _flags)\
 +	((const struct uverbs_attr_def)					\
 +	{.id = _id,							\
 +	.attr = { {.obj = {.type = _obj_class, .obj_type = _obj_type,	\
 +			   .access = _access, _flags} }, } })
 +#define ___UVERBS_ATTR_OBJ(_id, _obj_class, _obj_type, _access, _flags, \
 +			   _n, ...)					\
 +	___UVERBS_ATTR_OBJ##_n(_id, _obj_class, _obj_type, _access, _flags)
 +#define __UVERBS_ATTR_OBJ(_id, _obj_class, _obj_type, _access, ...)	\
 +	___UVERBS_ATTR_OBJ(_id, _obj_class, _obj_type, _access,		\
 +			   ##__VA_ARGS__, 1, 0)
 +#define UVERBS_ATTR_IDR(_id, _idr_type, _access, ...)			 \
 +	__UVERBS_ATTR_OBJ(_id, UVERBS_ATTR_TYPE_IDR, _idr_type, _access,\
 +			  ##__VA_ARGS__)
 +#define UVERBS_ATTR_FD(_id, _fd_type, _access, ...)			\
 +	__UVERBS_ATTR_OBJ(_id, UVERBS_ATTR_TYPE_FD, _fd_type,		\
 +			  (_access) + BUILD_BUG_ON_ZERO(		\
 +				(_access) != UVERBS_ACCESS_NEW &&	\
 +				(_access) != UVERBS_ACCESS_READ),	\
 +			  ##__VA_ARGS__)
 +#define DECLARE_UVERBS_ATTR_SPEC(_name, ...)				\
 +	const struct uverbs_attr_def _name = __VA_ARGS__
 +
 +#define DECLARE_UVERBS_ENUM(_name, ...)					\
 +	const struct uverbs_enum_spec _name = {				\
 +		.len = ARRAY_SIZE(((struct uverbs_attr_spec[]){__VA_ARGS__})),\
 +		.ids = {__VA_ARGS__},					\
 +	}
 +#define _UVERBS_METHOD_ATTRS_SZ(...)					\
 +	(sizeof((const struct uverbs_attr_def * const []){__VA_ARGS__}) /\
 +	 sizeof(const struct uverbs_attr_def *))
 +#define _UVERBS_METHOD(_id, _handler, _flags, ...)			\
 +	((const struct uverbs_method_def) {				\
 +	 .id = _id,							\
 +	 .flags = _flags,						\
 +	 .handler = _handler,						\
 +	 .num_attrs = _UVERBS_METHOD_ATTRS_SZ(__VA_ARGS__),		\
 +	 .attrs = &(const struct uverbs_attr_def * const []){__VA_ARGS__} })
 +#define DECLARE_UVERBS_METHOD(_name, _id, _handler, ...)		\
 +	const struct uverbs_method_def _name =				\
 +		_UVERBS_METHOD(_id, _handler, 0, ##__VA_ARGS__)
 +#define DECLARE_UVERBS_CTX_METHOD(_name, _id, _handler, _flags, ...)	\
 +	const struct uverbs_method_def _name =				\
 +		_UVERBS_METHOD(_id, _handler,				\
 +			       UVERBS_ACTION_FLAG_CREATE_ROOT,		\
 +			       ##__VA_ARGS__)
 +#define _UVERBS_OBJECT_METHODS_SZ(...)					\
 +	(sizeof((const struct uverbs_method_def * const []){__VA_ARGS__}) / \
 +	 sizeof(const struct uverbs_method_def *))
 +#define _UVERBS_OBJECT(_id, _type_attrs, ...)				\
 +	((const struct uverbs_object_def) {				\
 +	 .id = _id,							\
 +	 .type_attrs = _type_attrs,					\
 +	 .num_methods = _UVERBS_OBJECT_METHODS_SZ(__VA_ARGS__),		\
 +	 .methods = &(const struct uverbs_method_def * const []){__VA_ARGS__} })
 +#define DECLARE_UVERBS_OBJECT(_name, _id, _type_attrs, ...)		\
 +	const struct uverbs_object_def _name =				\
 +		_UVERBS_OBJECT(_id, _type_attrs, ##__VA_ARGS__)
 +#define _UVERBS_TREE_OBJECTS_SZ(...)					\
 +	(sizeof((const struct uverbs_object_def * const []){__VA_ARGS__}) / \
 +	 sizeof(const struct uverbs_object_def *))
 +#define _UVERBS_OBJECT_TREE(...)					\
 +	((const struct uverbs_object_tree_def) {			\
 +	 .num_objects = _UVERBS_TREE_OBJECTS_SZ(__VA_ARGS__),		\
 +	 .objects = &(const struct uverbs_object_def * const []){__VA_ARGS__} })
 +#define DECLARE_UVERBS_OBJECT_TREE(_name, ...)				\
 +	const struct uverbs_object_tree_def _name =			\
 +		_UVERBS_OBJECT_TREE(__VA_ARGS__)
  
  /* =================================================
   *              Parsing infrastructure
* Unmerged path drivers/infiniband/core/uverbs_uapi.c
* Unmerged path drivers/infiniband/core/rdma_core.c
* Unmerged path drivers/infiniband/core/rdma_core.h
* Unmerged path drivers/infiniband/core/uverbs_uapi.c
* Unmerged path include/rdma/uverbs_ioctl.h
