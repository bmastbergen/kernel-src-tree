net: phy: Convert u32 phydev->lp_advertising to linkmode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [netdrv] phy: Convert u32 phydev->lp_advertising to linkmode (Petr Oros) [1691676]
Rebuild_FUZZ: 95.33%
commit-author Andrew Lunn <andrew@lunn.ch>
commit c0ec3c2736774c69bf5c641aea7712132c0f0eba
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c0ec3c27.failed

Convert phy drivers to report the link partner advertised modes using
a linkmode bitmap. This allows them to report the higher speeds which
don't fit in a u32.

	Signed-off-by: Andrew Lunn <andrew@lunn.ch>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c0ec3c2736774c69bf5c641aea7712132c0f0eba)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy-core.c
#	drivers/net/phy/phy.c
#	drivers/net/phy/phy_device.c
#	include/linux/mii.h
#	include/linux/phy.h
diff --cc drivers/net/phy/phy-core.c
index c7da4cbb1103,2c3a13d1c421..000000000000
--- a/drivers/net/phy/phy-core.c
+++ b/drivers/net/phy/phy-core.c
@@@ -199,27 -198,35 +199,35 @@@ size_t phy_speeds(unsigned int *speeds
   */
  void phy_resolve_aneg_linkmode(struct phy_device *phydev)
  {
++<<<<<<< HEAD
 +	u32 common = phydev->lp_advertising & phydev->advertising;
 +
 +	if (common & ADVERTISED_10000baseT_Full) {
++=======
+ 	__ETHTOOL_DECLARE_LINK_MODE_MASK(common);
+ 
+ 	linkmode_and(common, phydev->lp_advertising, phydev->advertising);
+ 
+ 	if (linkmode_test_bit(ETHTOOL_LINK_MODE_10000baseT_Full_BIT, common)) {
++>>>>>>> c0ec3c273677 (net: phy: Convert u32 phydev->lp_advertising to linkmode)
  		phydev->speed = SPEED_10000;
  		phydev->duplex = DUPLEX_FULL;
 -	} else if (linkmode_test_bit(ETHTOOL_LINK_MODE_1000baseT_Full_BIT,
 -				     common)) {
 +	} else if (common & ADVERTISED_1000baseT_Full) {
  		phydev->speed = SPEED_1000;
  		phydev->duplex = DUPLEX_FULL;
 -	} else if (linkmode_test_bit(ETHTOOL_LINK_MODE_1000baseT_Half_BIT,
 -				     common)) {
 +	} else if (common & ADVERTISED_1000baseT_Half) {
  		phydev->speed = SPEED_1000;
  		phydev->duplex = DUPLEX_HALF;
 -	} else if (linkmode_test_bit(ETHTOOL_LINK_MODE_100baseT_Full_BIT,
 -				     common)) {
 +	} else if (common & ADVERTISED_100baseT_Full) {
  		phydev->speed = SPEED_100;
  		phydev->duplex = DUPLEX_FULL;
 -	} else if (linkmode_test_bit(ETHTOOL_LINK_MODE_100baseT_Half_BIT,
 -				     common)) {
 +	} else if (common & ADVERTISED_100baseT_Half) {
  		phydev->speed = SPEED_100;
  		phydev->duplex = DUPLEX_HALF;
 -	} else if (linkmode_test_bit(ETHTOOL_LINK_MODE_10baseT_Full_BIT,
 -				     common)) {
 +	} else if (common & ADVERTISED_10baseT_Full) {
  		phydev->speed = SPEED_10;
  		phydev->duplex = DUPLEX_FULL;
 -	} else if (linkmode_test_bit(ETHTOOL_LINK_MODE_10baseT_Half_BIT,
 -				     common)) {
 +	} else if (common & ADVERTISED_10baseT_Half) {
  		phydev->speed = SPEED_10;
  		phydev->duplex = DUPLEX_HALF;
  	}
diff --cc drivers/net/phy/phy.c
index 914fe8e6ac86,d73873334e47..000000000000
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@@ -358,14 -366,9 +358,20 @@@ EXPORT_SYMBOL(phy_ethtool_ksettings_set
  void phy_ethtool_ksettings_get(struct phy_device *phydev,
  			       struct ethtool_link_ksettings *cmd)
  {
++<<<<<<< HEAD
 +	ethtool_convert_legacy_u32_to_link_mode(cmd->link_modes.supported,
 +						phydev->supported);
 +
 +	ethtool_convert_legacy_u32_to_link_mode(cmd->link_modes.advertising,
 +						phydev->advertising);
 +
 +	ethtool_convert_legacy_u32_to_link_mode(cmd->link_modes.lp_advertising,
 +						phydev->lp_advertising);
++=======
+ 	linkmode_copy(cmd->link_modes.supported, phydev->supported);
+ 	linkmode_copy(cmd->link_modes.advertising, phydev->advertising);
+ 	linkmode_copy(cmd->link_modes.lp_advertising, phydev->lp_advertising);
++>>>>>>> c0ec3c273677 (net: phy: Convert u32 phydev->lp_advertising to linkmode)
  
  	cmd->base.speed = phydev->speed;
  	cmd->base.duplex = phydev->duplex;
@@@ -589,13 -607,31 +595,19 @@@ int phy_speed_down(struct phy_device *p
  	if (phydev->autoneg != AUTONEG_ENABLE)
  		return 0;
  
++<<<<<<< HEAD
 +	if (adv & PHY_10BT_FEATURES)
 +		phydev->advertising &= ~(PHY_100BT_FEATURES |
 +					 PHY_1000BT_FEATURES);
 +	else if (adv & PHY_100BT_FEATURES)
 +		phydev->advertising &= ~PHY_1000BT_FEATURES;
++=======
+ 	linkmode_copy(adv_old, phydev->advertising);
+ 	linkmode_copy(adv, phydev->lp_advertising);
+ 	linkmode_and(adv, adv, phydev->supported);
++>>>>>>> c0ec3c273677 (net: phy: Convert u32 phydev->lp_advertising to linkmode)
  
 -	if (linkmode_test_bit(ETHTOOL_LINK_MODE_10baseT_Half_BIT, adv) ||
 -	    linkmode_test_bit(ETHTOOL_LINK_MODE_10baseT_Full_BIT, adv)) {
 -		linkmode_clear_bit(ETHTOOL_LINK_MODE_100baseT_Half_BIT,
 -				   phydev->advertising);
 -		linkmode_clear_bit(ETHTOOL_LINK_MODE_100baseT_Full_BIT,
 -				   phydev->advertising);
 -		linkmode_clear_bit(ETHTOOL_LINK_MODE_1000baseT_Half_BIT,
 -				   phydev->advertising);
 -		linkmode_clear_bit(ETHTOOL_LINK_MODE_1000baseT_Full_BIT,
 -				   phydev->advertising);
 -	} else if (linkmode_test_bit(ETHTOOL_LINK_MODE_100baseT_Half_BIT,
 -				     adv) ||
 -		   linkmode_test_bit(ETHTOOL_LINK_MODE_100baseT_Full_BIT,
 -				     adv)) {
 -		linkmode_clear_bit(ETHTOOL_LINK_MODE_1000baseT_Half_BIT,
 -				   phydev->advertising);
 -		linkmode_clear_bit(ETHTOOL_LINK_MODE_1000baseT_Full_BIT,
 -				   phydev->advertising);
 -	}
 -
 -	if (linkmode_equal(phydev->advertising, adv_old))
 +	if (phydev->advertising == adv_old)
  		return 0;
  
  	ret = phy_config_aneg(phydev);
diff --cc drivers/net/phy/phy_device.c
index e0d479da7531,55202a0ac476..000000000000
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@@ -1686,11 -1702,13 +1686,11 @@@ int genphy_read_status(struct phy_devic
  	if (err)
  		return err;
  
- 	phydev->lp_advertising = 0;
+ 	linkmode_zero(phydev->lp_advertising);
  
  	if (AUTONEG_ENABLE == phydev->autoneg) {
 -		if (linkmode_test_bit(ETHTOOL_LINK_MODE_1000baseT_Half_BIT,
 -				      phydev->supported) ||
 -		    linkmode_test_bit(ETHTOOL_LINK_MODE_1000baseT_Full_BIT,
 -				      phydev->supported)) {
 +		if (phydev->supported & (SUPPORTED_1000baseT_Half
 +					| SUPPORTED_1000baseT_Full)) {
  			lpagb = phy_read(phydev, MII_STAT1000);
  			if (lpagb < 0)
  				return lpagb;
@@@ -1699,8 -1717,16 +1699,21 @@@
  			if (adv < 0)
  				return adv;
  
++<<<<<<< HEAD
 +			phydev->lp_advertising =
 +				mii_stat1000_to_ethtool_lpa_t(lpagb);
++=======
+ 			if (lpagb & LPA_1000MSFAIL) {
+ 				if (adv & CTL1000_ENABLE_MASTER)
+ 					phydev_err(phydev, "Master/Slave resolution failed, maybe conflicting manual settings?\n");
+ 				else
+ 					phydev_err(phydev, "Master/Slave resolution failed\n");
+ 				return -ENOLINK;
+ 			}
+ 
+ 			mii_stat1000_to_linkmode_lpa_t(phydev->lp_advertising,
+ 						       lpagb);
++>>>>>>> c0ec3c273677 (net: phy: Convert u32 phydev->lp_advertising to linkmode)
  			common_adv_gb = lpagb & adv << 2;
  		}
  
diff --cc include/linux/mii.h
index 2da85b02e1c0,e7112e878bb0..000000000000
--- a/include/linux/mii.h
+++ b/include/linux/mii.h
@@@ -385,13 -404,30 +404,35 @@@ static inline void mii_adv_to_linkmode_
  }
  
  /**
++<<<<<<< HEAD
 + * ethtool_adv_to_lcl_adv_t
 + * @advertising:pointer to ethtool advertising
++=======
+  * mii_lpa_to_linkmode_lpa_t
+  * @adv: value of the MII_LPA register
+  *
+  * A small helper function that translates MII_LPA bits, when in
+  * 1000Base-T mode, to linkmode LP advertisement settings.
+  */
+ static inline void mii_lpa_to_linkmode_lpa_t(unsigned long *lp_advertising,
+ 					     u32 lpa)
+ {
+ 	if (lpa & LPA_LPACK)
+ 		linkmode_set_bit(ETHTOOL_LINK_MODE_Autoneg_BIT,
+ 				 lp_advertising);
+ 
+ 	mii_adv_to_linkmode_adv_t(lp_advertising, lpa);
+ }
+ 
+ /**
+  * linkmode_adv_to_lcl_adv_t
+  * @advertising:pointer to linkmode advertising
++>>>>>>> c0ec3c273677 (net: phy: Convert u32 phydev->lp_advertising to linkmode)
   *
 - * A small helper function that translates linkmode advertising to LVL
 + * A small helper function that translates ethtool advertising to LVL
   * pause capabilities.
   */
 -static inline u32 linkmode_adv_to_lcl_adv_t(unsigned long *advertising)
 +static inline u32 ethtool_adv_to_lcl_adv_t(u32 advertising)
  {
  	u32 lcl_adv = 0;
  
diff --cc include/linux/phy.h
index 05df62b195fe,8f927246acdb..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -442,14 -410,11 +442,22 @@@ struct phy_device 
  	int pause;
  	int asym_pause;
  
++<<<<<<< HEAD
 +	/* Enabled Interrupts */
 +	u32 interrupts;
 +
 +	/* Union of PHY and Attached devices' supported modes */
 +	/* See mii.h for more info */
 +	u32 supported;
 +	u32 advertising;
 +	u32 lp_advertising;
++=======
+ 	/* Union of PHY and Attached devices' supported link modes */
+ 	/* See ethtool.h for more info */
+ 	__ETHTOOL_DECLARE_LINK_MODE_MASK(supported);
+ 	__ETHTOOL_DECLARE_LINK_MODE_MASK(advertising);
+ 	__ETHTOOL_DECLARE_LINK_MODE_MASK(lp_advertising);
++>>>>>>> c0ec3c273677 (net: phy: Convert u32 phydev->lp_advertising to linkmode)
  
  	/* Energy efficient ethernet modes which should be prohibited */
  	u32 eee_broken_modes;
diff --git a/drivers/net/phy/lxt.c b/drivers/net/phy/lxt.c
index c14b254b2879..6fecf94f27d0 100644
--- a/drivers/net/phy/lxt.c
+++ b/drivers/net/phy/lxt.c
@@ -177,7 +177,7 @@ static int lxt973a2_read_status(struct phy_device *phydev)
 			*/
 		} while (lpa == adv && retry--);
 
-		phydev->lp_advertising = mii_lpa_to_ethtool_lpa_t(lpa);
+		mii_lpa_to_linkmode_lpa_t(phydev->lp_advertising, lpa);
 
 		lpa &= adv;
 
@@ -218,7 +218,7 @@ static int lxt973a2_read_status(struct phy_device *phydev)
 			phydev->speed = SPEED_10;
 
 		phydev->pause = phydev->asym_pause = 0;
-		phydev->lp_advertising = 0;
+		linkmode_zero(phydev->lp_advertising);
 	}
 
 	return 0;
diff --git a/drivers/net/phy/marvell.c b/drivers/net/phy/marvell.c
index f46f1b5bde0c..5e9b983f66d3 100644
--- a/drivers/net/phy/marvell.c
+++ b/drivers/net/phy/marvell.c
@@ -1064,22 +1064,21 @@ static int m88e1145_config_init(struct phy_device *phydev)
 }
 
 /**
- * fiber_lpa_to_ethtool_lpa_t
+ * fiber_lpa_to_linkmode_lpa_t
+ * @advertising: the linkmode advertisement settings
  * @lpa: value of the MII_LPA register for fiber link
  *
  * A small helper function that translates MII_LPA
- * bits to ethtool LP advertisement settings.
+ * bits to linkmode LP advertisement settings.
  */
-static u32 fiber_lpa_to_ethtool_lpa_t(u32 lpa)
+static void fiber_lpa_to_linkmode_lpa_t(unsigned long *advertising, u32 lpa)
 {
-	u32 result = 0;
-
 	if (lpa & LPA_FIBER_1000HALF)
-		result |= ADVERTISED_1000baseT_Half;
+		linkmode_set_bit(ETHTOOL_LINK_MODE_1000baseT_Half_BIT,
+				 advertising);
 	if (lpa & LPA_FIBER_1000FULL)
-		result |= ADVERTISED_1000baseT_Full;
-
-	return result;
+		linkmode_set_bit(ETHTOOL_LINK_MODE_1000baseT_Full_BIT,
+				 advertising);
 }
 
 /**
@@ -1155,9 +1154,8 @@ static int marvell_read_status_page_an(struct phy_device *phydev,
 	}
 
 	if (!fiber) {
-		phydev->lp_advertising =
-			mii_stat1000_to_ethtool_lpa_t(lpagb) |
-			mii_lpa_to_ethtool_lpa_t(lpa);
+		mii_lpa_to_linkmode_lpa_t(phydev->lp_advertising, lpa);
+		mii_stat1000_to_linkmode_lpa_t(phydev->lp_advertising, lpagb);
 
 		if (phydev->duplex == DUPLEX_FULL) {
 			phydev->pause = lpa & LPA_PAUSE_CAP ? 1 : 0;
@@ -1165,7 +1163,7 @@ static int marvell_read_status_page_an(struct phy_device *phydev,
 		}
 	} else {
 		/* The fiber link is only 1000M capable */
-		phydev->lp_advertising = fiber_lpa_to_ethtool_lpa_t(lpa);
+		fiber_lpa_to_linkmode_lpa_t(phydev->lp_advertising, lpa);
 
 		if (phydev->duplex == DUPLEX_FULL) {
 			if (!(lpa & LPA_PAUSE_FIBER)) {
@@ -1204,7 +1202,7 @@ static int marvell_read_status_page_fixed(struct phy_device *phydev)
 
 	phydev->pause = 0;
 	phydev->asym_pause = 0;
-	phydev->lp_advertising = 0;
+	linkmode_zero(phydev->lp_advertising);
 
 	return 0;
 }
diff --git a/drivers/net/phy/marvell10g.c b/drivers/net/phy/marvell10g.c
index 1c9d039eec63..d9a7996832ca 100644
--- a/drivers/net/phy/marvell10g.c
+++ b/drivers/net/phy/marvell10g.c
@@ -458,7 +458,7 @@ static int mv3310_read_status(struct phy_device *phydev)
 
 	phydev->speed = SPEED_UNKNOWN;
 	phydev->duplex = DUPLEX_UNKNOWN;
-	phydev->lp_advertising = 0;
+	linkmode_zero(phydev->lp_advertising);
 	phydev->link = 0;
 	phydev->pause = 0;
 	phydev->asym_pause = 0;
@@ -491,7 +491,7 @@ static int mv3310_read_status(struct phy_device *phydev)
 		if (val < 0)
 			return val;
 
-		phydev->lp_advertising |= mii_stat1000_to_ethtool_lpa_t(val);
+		mii_stat1000_to_linkmode_lpa_t(phydev->lp_advertising, val);
 
 		if (phydev->autoneg == AUTONEG_ENABLE)
 			phy_resolve_aneg_linkmode(phydev);
diff --git a/drivers/net/phy/phy-c45.c b/drivers/net/phy/phy-c45.c
index d7636ff03bc7..10bbf8d015d4 100644
--- a/drivers/net/phy/phy-c45.c
+++ b/drivers/net/phy/phy-c45.c
@@ -181,7 +181,7 @@ int genphy_c45_read_lpa(struct phy_device *phydev)
 	if (val < 0)
 		return val;
 
-	phydev->lp_advertising = mii_lpa_to_ethtool_lpa_t(val);
+	mii_lpa_to_linkmode_lpa_t(phydev->lp_advertising, val);
 	phydev->pause = val & LPA_PAUSE_CAP ? 1 : 0;
 	phydev->asym_pause = val & LPA_PAUSE_ASYM ? 1 : 0;
 
@@ -191,7 +191,8 @@ int genphy_c45_read_lpa(struct phy_device *phydev)
 		return val;
 
 	if (val & MDIO_AN_10GBT_STAT_LP10G)
-		phydev->lp_advertising |= ADVERTISED_10000baseT_Full;
+		linkmode_set_bit(ETHTOOL_LINK_MODE_10000baseT_Full_BIT,
+				 phydev->lp_advertising);
 
 	return 0;
 }
* Unmerged path drivers/net/phy/phy-core.c
* Unmerged path drivers/net/phy/phy.c
* Unmerged path drivers/net/phy/phy_device.c
diff --git a/drivers/net/phy/uPD60620.c b/drivers/net/phy/uPD60620.c
index 55f48ee3595a..1e4fc42e4629 100644
--- a/drivers/net/phy/uPD60620.c
+++ b/drivers/net/phy/uPD60620.c
@@ -47,7 +47,7 @@ static int upd60620_read_status(struct phy_device *phydev)
 		return phy_state;
 
 	phydev->link = 0;
-	phydev->lp_advertising = 0;
+	linkmode_zero(phydev->lp_advertising);
 	phydev->pause = 0;
 	phydev->asym_pause = 0;
 
@@ -70,8 +70,8 @@ static int upd60620_read_status(struct phy_device *phydev)
 			if (phy_state < 0)
 				return phy_state;
 
-			phydev->lp_advertising
-				= mii_lpa_to_ethtool_lpa_t(phy_state);
+			mii_lpa_to_linkmode_lpa_t(phydev->lp_advertising,
+						  phy_state);
 
 			if (phydev->duplex == DUPLEX_FULL) {
 				if (phy_state & LPA_PAUSE_CAP)
* Unmerged path include/linux/mii.h
* Unmerged path include/linux/phy.h
