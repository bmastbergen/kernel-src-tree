bpf: bpftool: Fix newline and p_err issue

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 10a5ce98539948affbdc28dc0f39a1b6b2307f9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/10a5ce98.failed

This patch fixes a few newline issues and also
replaces p_err with p_info in prog.c

Fixes: b053b439b72a ("bpf: libbpf: bpftool: Print bpf_line_info during prog dump")
	Cc: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 10a5ce98539948affbdc28dc0f39a1b6b2307f9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/bpf/bpftool/Documentation/bpftool-prog.rst
#	tools/bpf/bpftool/main.h
#	tools/bpf/bpftool/prog.c
diff --cc tools/bpf/bpftool/Documentation/bpftool-prog.rst
index 5524b6dccd85,bb1aeb98b6da..000000000000
--- a/tools/bpf/bpftool/Documentation/bpftool-prog.rst
+++ b/tools/bpf/bpftool/Documentation/bpftool-prog.rst
@@@ -69,13 -69,23 +69,30 @@@ DESCRIPTIO
  		  built instead, and eBPF instructions will be presented with
  		  CFG in DOT format, on standard output.
  
++<<<<<<< HEAD
 +	**bpftool prog dump jited**  *PROG* [{ **file** *FILE* | **opcodes** }]
++=======
+ 		  If the prog has line_info available, the source line will
+ 		  be displayed by default.  If **linum** is specified,
+ 		  the filename, line number and line column will also be
+ 		  displayed on top of the source line.
+ 
+ 	**bpftool prog dump jited**  *PROG* [{ **file** *FILE* | **opcodes** | **linum** }]
++>>>>>>> 10a5ce985399 (bpf: bpftool: Fix newline and p_err issue)
  		  Dump jited image (host machine code) of the program.
  		  If *FILE* is specified image will be written to a file,
  		  otherwise it will be disassembled and printed to stdout.
  
  		  **opcodes** controls if raw opcodes will be printed.
  
++<<<<<<< HEAD
++=======
+ 		  If the prog has line_info available, the source line will
+ 		  be displayed by default.  If **linum** is specified,
+ 		  the filename, line number and line column will also be
+ 		  displayed on top of the source line.
+ 
++>>>>>>> 10a5ce985399 (bpf: bpftool: Fix newline and p_err issue)
  	**bpftool prog pin** *PROG* *FILE*
  		  Pin program *PROG* as *FILE*.
  
diff --cc tools/bpf/bpftool/main.h
index 0be0dd8f467f,0b37599f8cda..000000000000
--- a/tools/bpf/bpftool/main.h
+++ b/tools/bpf/bpftool/main.h
@@@ -181,7 -189,11 +181,15 @@@ int disasm_init(void)
  #else
  static inline
  void disasm_print_insn(unsigned char *image, ssize_t len, int opcodes,
++<<<<<<< HEAD
 +		       const char *arch, const char *disassembler_options)
++=======
+ 		       const char *arch, const char *disassembler_options,
+ 		       const struct btf *btf,
+ 		       const struct bpf_prog_linfo *prog_linfo,
+ 		       __u64 func_ksym, unsigned int func_idx,
+ 		       bool linum)
++>>>>>>> 10a5ce985399 (bpf: bpftool: Fix newline and p_err issue)
  {
  }
  static inline int disasm_init(void)
diff --cc tools/bpf/bpftool/prog.c
index e60f0d85d6d8,9a78ebbcea1d..000000000000
--- a/tools/bpf/bpftool/prog.c
+++ b/tools/bpf/bpftool/prog.c
@@@ -555,6 -585,12 +555,15 @@@ static int do_dump(int argc, char **arg
  	info.func_info_cnt = finfo_cnt;
  	info.func_info_rec_size = finfo_rec_size;
  	info.func_info = ptr_to_u64(func_info);
++<<<<<<< HEAD
++=======
+ 	info.line_info_cnt = linfo_cnt;
+ 	info.line_info_rec_size = linfo_rec_size;
+ 	info.line_info = ptr_to_u64(linfo);
+ 	info.jited_line_info_cnt = jited_linfo_cnt;
+ 	info.jited_line_info_rec_size = jited_linfo_rec_size;
+ 	info.jited_line_info = ptr_to_u64(jited_linfo);
++>>>>>>> 10a5ce985399 (bpf: bpftool: Fix newline and p_err issue)
  
  	err = bpf_obj_get_info_by_fd(fd, &info, &len);
  	close(fd);
@@@ -603,6 -670,12 +612,15 @@@
  		goto err_free;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (linfo_cnt) {
+ 		prog_linfo = bpf_prog_linfo__new(&info);
+ 		if (!prog_linfo)
+ 			p_info("error in processing bpf_line_info.  continue without it.");
+ 	}
+ 
++>>>>>>> 10a5ce985399 (bpf: bpftool: Fix newline and p_err issue)
  	if (filepath) {
  		fd = open(filepath, O_WRONLY | O_CREAT | O_TRUNC, 0600);
  		if (fd < 0) {
* Unmerged path tools/bpf/bpftool/Documentation/bpftool-prog.rst
* Unmerged path tools/bpf/bpftool/main.h
* Unmerged path tools/bpf/bpftool/prog.c
