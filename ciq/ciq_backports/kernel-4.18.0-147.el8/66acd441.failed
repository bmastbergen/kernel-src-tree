drm/amd/display: Link train only when link is DP and backend is enabled

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Samson Tam <Samson.Tam@amd.com>
commit 66acd4418d7de131ef3831e52a8af3d2480e5b15
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/66acd441.failed

[Why]
In certain cases we do link training when we don't have a backend.

[How]
In dc_link_set_preferred_link_settings(), store preferred link settings
first and then verify that the link is DP and the link stream's backend is
enabled.  If either is false, then we will not do any link retraining.

	Signed-off-by: Samson Tam <Samson.Tam@amd.com>
	Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
	Acked-by: Anthony Koo <Anthony.Koo@amd.com>
	Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit 66acd4418d7de131ef3831e52a8af3d2480e5b15)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/display/dc/core/dc.c
diff --cc drivers/gpu/drm/amd/display/dc/core/dc.c
index 644b2187507b,699e1ee75035..000000000000
--- a/drivers/gpu/drm/amd/display/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/display/dc/core/dc.c
@@@ -368,6 -484,106 +368,109 @@@ void dc_stream_set_static_screen_events
  	dc->hwss.set_static_screen_control(pipes_affected, num_pipes_affected, events);
  }
  
++<<<<<<< HEAD
++=======
+ void dc_link_set_drive_settings(struct dc *dc,
+ 				struct link_training_settings *lt_settings,
+ 				const struct dc_link *link)
+ {
+ 
+ 	int i;
+ 
+ 	for (i = 0; i < dc->link_count; i++) {
+ 		if (dc->links[i] == link)
+ 			break;
+ 	}
+ 
+ 	if (i >= dc->link_count)
+ 		ASSERT_CRITICAL(false);
+ 
+ 	dc_link_dp_set_drive_settings(dc->links[i], lt_settings);
+ }
+ 
+ void dc_link_perform_link_training(struct dc *dc,
+ 				   struct dc_link_settings *link_setting,
+ 				   bool skip_video_pattern)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < dc->link_count; i++)
+ 		dc_link_dp_perform_link_training(
+ 			dc->links[i],
+ 			link_setting,
+ 			skip_video_pattern);
+ }
+ 
+ void dc_link_set_preferred_link_settings(struct dc *dc,
+ 					 struct dc_link_settings *link_setting,
+ 					 struct dc_link *link)
+ {
+ 	int i;
+ 	struct pipe_ctx *pipe;
+ 	struct dc_stream_state *link_stream;
+ 	struct dc_link_settings store_settings = *link_setting;
+ 
+ 	link->preferred_link_setting = store_settings;
+ 
+ 	/* Retrain with preferred link settings only relevant for
+ 	 * DP signal type
+ 	 */
+ 	if (!dc_is_dp_signal(link->connector_signal))
+ 		return;
+ 
+ 	for (i = 0; i < MAX_PIPES; i++) {
+ 		pipe = &dc->current_state->res_ctx.pipe_ctx[i];
+ 		if (pipe->stream && pipe->stream->link) {
+ 			if (pipe->stream->link == link)
+ 				break;
+ 		}
+ 	}
+ 
+ 	/* Stream not found */
+ 	if (i == MAX_PIPES)
+ 		return;
+ 
+ 	link_stream = link->dc->current_state->res_ctx.pipe_ctx[i].stream;
+ 
+ 	/* Cannot retrain link if backend is off */
+ 	if (link_stream->dpms_off)
+ 		return;
+ 
+ 	if (link_stream)
+ 		decide_link_settings(link_stream, &store_settings);
+ 
+ 	if ((store_settings.lane_count != LANE_COUNT_UNKNOWN) &&
+ 		(store_settings.link_rate != LINK_RATE_UNKNOWN))
+ 		dp_retrain_link_dp_test(link, &store_settings, false);
+ }
+ 
+ void dc_link_enable_hpd(const struct dc_link *link)
+ {
+ 	dc_link_dp_enable_hpd(link);
+ }
+ 
+ void dc_link_disable_hpd(const struct dc_link *link)
+ {
+ 	dc_link_dp_disable_hpd(link);
+ }
+ 
+ 
+ void dc_link_set_test_pattern(struct dc_link *link,
+ 			      enum dp_test_pattern test_pattern,
+ 			      const struct link_training_settings *p_link_settings,
+ 			      const unsigned char *p_custom_pattern,
+ 			      unsigned int cust_pattern_size)
+ {
+ 	if (link != NULL)
+ 		dc_link_dp_set_test_pattern(
+ 			link,
+ 			test_pattern,
+ 			p_link_settings,
+ 			p_custom_pattern,
+ 			cust_pattern_size);
+ }
+ 
++>>>>>>> 66acd4418d7d (drm/amd/display: Link train only when link is DP and backend is enabled)
  static void destruct(struct dc *dc)
  {
  	dc_release_state(dc->current_state);
* Unmerged path drivers/gpu/drm/amd/display/dc/core/dc.c
