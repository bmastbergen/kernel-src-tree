s390/ipl: Fix detection of has_secure attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Philipp Rudo <prudo@linux.ibm.com>
commit 1b2be2071aca9aab22e3f902bcb0fca46a1d3b00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/1b2be207.failed

Use the correct bit for detection of the machine capability associated
with the has_secure attribute. It is expected that the underlying
platform (including hypervisors) unsets the bit when they don't provide
secure ipl for their guests.

Fixes: c9896acc7851 ("s390/ipl: Provide has_secure sysfs attribute")
	Cc: stable@vger.kernel.org # 5.2
	Signed-off-by: Philipp Rudo <prudo@linux.ibm.com>
	Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
	Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
	Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
(cherry picked from commit 1b2be2071aca9aab22e3f902bcb0fca46a1d3b00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/sclp.h
#	arch/s390/kernel/ipl.c
#	drivers/s390/char/sclp_early.c
diff --cc arch/s390/include/asm/sclp.h
index 0cd4bda85eb1,c563f8368b19..000000000000
--- a/arch/s390/include/asm/sclp.h
+++ b/arch/s390/include/asm/sclp.h
@@@ -78,6 -78,9 +78,12 @@@ struct sclp_info 
  	unsigned char has_skey : 1;
  	unsigned char has_kss : 1;
  	unsigned char has_gisaf : 1;
++<<<<<<< HEAD
++=======
+ 	unsigned char has_diag318 : 1;
+ 	unsigned char has_sipl : 1;
+ 	unsigned char has_dirq : 1;
++>>>>>>> 1b2be2071aca (s390/ipl: Fix detection of has_secure attribute)
  	unsigned int ibc;
  	unsigned int mtid;
  	unsigned int mtid_cp;
diff --cc arch/s390/kernel/ipl.c
index b2b944085114,2c0a515428d6..000000000000
--- a/arch/s390/kernel/ipl.c
+++ b/arch/s390/kernel/ipl.c
@@@ -264,6 -274,24 +264,27 @@@ static ssize_t ipl_type_show(struct kob
  
  static struct kobj_attribute sys_ipl_type_attr = __ATTR_RO(ipl_type);
  
++<<<<<<< HEAD
++=======
+ static ssize_t ipl_secure_show(struct kobject *kobj,
+ 			       struct kobj_attribute *attr, char *page)
+ {
+ 	return sprintf(page, "%i\n", !!ipl_secure_flag);
+ }
+ 
+ static struct kobj_attribute sys_ipl_secure_attr =
+ 	__ATTR(secure, 0444, ipl_secure_show, NULL);
+ 
+ static ssize_t ipl_has_secure_show(struct kobject *kobj,
+ 				   struct kobj_attribute *attr, char *page)
+ {
+ 	return sprintf(page, "%i\n", !!sclp.has_sipl);
+ }
+ 
+ static struct kobj_attribute sys_ipl_has_secure_attr =
+ 	__ATTR(has_secure, 0444, ipl_has_secure_show, NULL);
+ 
++>>>>>>> 1b2be2071aca (s390/ipl: Fix detection of has_secure attribute)
  static ssize_t ipl_vm_parm_show(struct kobject *kobj,
  				struct kobj_attribute *attr, char *page)
  {
diff --cc drivers/s390/char/sclp_early.c
index e792cee3b51c,e71992a3c55f..000000000000
--- a/drivers/s390/char/sclp_early.c
+++ b/drivers/s390/char/sclp_early.c
@@@ -40,6 -40,7 +40,10 @@@ static void __init sclp_early_facilitie
  	sclp.has_gisaf = !!(sccb->fac118 & 0x08);
  	sclp.has_hvs = !!(sccb->fac119 & 0x80);
  	sclp.has_kss = !!(sccb->fac98 & 0x01);
++<<<<<<< HEAD
++=======
+ 	sclp.has_sipl = !!(sccb->cbl & 0x02);
++>>>>>>> 1b2be2071aca (s390/ipl: Fix detection of has_secure attribute)
  	if (sccb->fac85 & 0x02)
  		S390_lowcore.machine_flags |= MACHINE_FLAG_ESOP;
  	if (sccb->fac91 & 0x40)
* Unmerged path arch/s390/include/asm/sclp.h
* Unmerged path arch/s390/kernel/ipl.c
* Unmerged path drivers/s390/char/sclp_early.c
