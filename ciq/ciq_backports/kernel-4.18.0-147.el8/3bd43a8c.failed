bpf: Sync bpf.h uapi to tools/

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 3bd43a8c91cba0493e507ed7baefa9b5613c28a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/3bd43a8c.failed

This patch sync include/uapi/linux/bpf.h to
tools/include/uapi/linux/

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 3bd43a8c91cba0493e507ed7baefa9b5613c28a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/include/uapi/linux/bpf.h
diff --cc tools/include/uapi/linux/bpf.h
index b7db3261c62d,3102a2a23c31..000000000000
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@@ -120,6 -125,8 +120,11 @@@ enum bpf_map_type 
  	BPF_MAP_TYPE_CPUMAP,
  	BPF_MAP_TYPE_XSKMAP,
  	BPF_MAP_TYPE_SOCKHASH,
++<<<<<<< HEAD
++=======
+ 	BPF_MAP_TYPE_CGROUP_STORAGE,
+ 	BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
++>>>>>>> 3bd43a8c91cb (bpf: Sync bpf.h uapi to tools/)
  };
  
  enum bpf_prog_type {
@@@ -2077,6 -2097,32 +2083,35 @@@ union bpf_attr 
   * 	Return
   * 		A 64-bit integer containing the current cgroup id based
   * 		on the cgroup within which the current task is running.
++<<<<<<< HEAD
++=======
+  *
+  * void* get_local_storage(void *map, u64 flags)
+  *	Description
+  *		Get the pointer to the local storage area.
+  *		The type and the size of the local storage is defined
+  *		by the *map* argument.
+  *		The *flags* meaning is specific for each map type,
+  *		and has to be 0 for cgroup local storage.
+  *
+  *		Depending on the bpf program type, a local storage area
+  *		can be shared between multiple instances of the bpf program,
+  *		running simultaneously.
+  *
+  *		A user should care about the synchronization by himself.
+  *		For example, by using the BPF_STX_XADD instruction to alter
+  *		the shared data.
+  *	Return
+  *		Pointer to the local storage area.
+  *
+  * int bpf_sk_select_reuseport(struct sk_reuseport_md *reuse, struct bpf_map *map, void *key, u64 flags)
+  *	Description
+  *		Select a SO_REUSEPORT sk from a	BPF_MAP_TYPE_REUSEPORT_ARRAY map
+  *		It checks the selected sk is matching the incoming
+  *		request in the skb.
+  *	Return
+  *		0 on success, or a negative error in case of failure.
++>>>>>>> 3bd43a8c91cb (bpf: Sync bpf.h uapi to tools/)
   */
  #define __BPF_FUNC_MAPPER(FN)		\
  	FN(unspec),			\
@@@ -2159,7 -2205,9 +2194,13 @@@
  	FN(rc_repeat),			\
  	FN(rc_keydown),			\
  	FN(skb_cgroup_id),		\
++<<<<<<< HEAD
 +	FN(get_current_cgroup_id),
++=======
+ 	FN(get_current_cgroup_id),	\
+ 	FN(get_local_storage),		\
+ 	FN(sk_select_reuseport),
++>>>>>>> 3bd43a8c91cb (bpf: Sync bpf.h uapi to tools/)
  
  /* integer value in 'imm' field of BPF_CALL instruction selects which helper
   * function eBPF program intends to call
* Unmerged path tools/include/uapi/linux/bpf.h
