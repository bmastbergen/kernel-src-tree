bpf: fix direct packet write into pop/peek helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 80b0d86a176cab6201719b8dfd806902b0c6e046
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/80b0d86a.failed

Commit f1a2e44a3aec ("bpf: add queue and stack maps") probably just
copy-pasted .pkt_access for bpf_map_{pop,peek}_elem() helpers, but
this is buggy in this context since it would allow writes into cloned
skbs which is invalid. Therefore, disable .pkt_access for the two.

Fixes: f1a2e44a3aec ("bpf: add queue and stack maps")
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Cc: Mauricio Vasquez B <mauricio.vasquez@polito.it>
	Acked-by: Mauricio Vasquez B<mauricio.vasquez@polito.it>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 80b0d86a176cab6201719b8dfd806902b0c6e046)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/helpers.c
diff --cc kernel/bpf/helpers.c
index 6502115e8f55,a74972b07e74..000000000000
--- a/kernel/bpf/helpers.c
+++ b/kernel/bpf/helpers.c
@@@ -76,6 -76,47 +76,50 @@@ const struct bpf_func_proto bpf_map_del
  	.arg2_type	= ARG_PTR_TO_MAP_KEY,
  };
  
++<<<<<<< HEAD
++=======
+ BPF_CALL_3(bpf_map_push_elem, struct bpf_map *, map, void *, value, u64, flags)
+ {
+ 	return map->ops->map_push_elem(map, value, flags);
+ }
+ 
+ const struct bpf_func_proto bpf_map_push_elem_proto = {
+ 	.func		= bpf_map_push_elem,
+ 	.gpl_only	= false,
+ 	.pkt_access	= true,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_CONST_MAP_PTR,
+ 	.arg2_type	= ARG_PTR_TO_MAP_VALUE,
+ 	.arg3_type	= ARG_ANYTHING,
+ };
+ 
+ BPF_CALL_2(bpf_map_pop_elem, struct bpf_map *, map, void *, value)
+ {
+ 	return map->ops->map_pop_elem(map, value);
+ }
+ 
+ const struct bpf_func_proto bpf_map_pop_elem_proto = {
+ 	.func		= bpf_map_pop_elem,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_CONST_MAP_PTR,
+ 	.arg2_type	= ARG_PTR_TO_UNINIT_MAP_VALUE,
+ };
+ 
+ BPF_CALL_2(bpf_map_peek_elem, struct bpf_map *, map, void *, value)
+ {
+ 	return map->ops->map_peek_elem(map, value);
+ }
+ 
+ const struct bpf_func_proto bpf_map_peek_elem_proto = {
+ 	.func		= bpf_map_pop_elem,
+ 	.gpl_only	= false,
+ 	.ret_type	= RET_INTEGER,
+ 	.arg1_type	= ARG_CONST_MAP_PTR,
+ 	.arg2_type	= ARG_PTR_TO_UNINIT_MAP_VALUE,
+ };
+ 
++>>>>>>> 80b0d86a176c (bpf: fix direct packet write into pop/peek helpers)
  const struct bpf_func_proto bpf_get_prandom_u32_proto = {
  	.func		= bpf_user_rnd_u32,
  	.gpl_only	= false,
* Unmerged path kernel/bpf/helpers.c
