KVM: arm64: Update age handlers to support PUD hugepages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Punit Agrawal <punit.agrawal@arm.com>
commit 35a63966194dd994f44150f07398c62f8dca011e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/35a63966.failed

In preparation for creating larger hugepages at Stage 2, add support
to the age handling notifiers for PUD hugepages when encountered.

Provide trivial helpers for arm32 to allow sharing code.

	Signed-off-by: Punit Agrawal <punit.agrawal@arm.com>
	Reviewed-by: Christoffer Dall <christoffer.dall@arm.com>
	Cc: Russell King <linux@armlinux.org.uk>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Will Deacon <will.deacon@arm.com>
[ Replaced BUG() => WARN_ON(1) for arm32 PUD helpers ]
	Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
(cherry picked from commit 35a63966194dd994f44150f07398c62f8dca011e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/include/asm/kvm_mmu.h
#	arch/arm64/include/asm/kvm_mmu.h
#	arch/arm64/include/asm/pgtable.h
diff --cc arch/arm/include/asm/kvm_mmu.h
index aa04390ce4a5,4b4b2146e6a0..000000000000
--- a/arch/arm/include/asm/kvm_mmu.h
+++ b/arch/arm/include/asm/kvm_mmu.h
@@@ -82,6 -82,47 +82,50 @@@ void kvm_clear_hyp_idmap(void)
  #define kvm_mk_pud(pmdp)	__pud(__pa(pmdp) | PMD_TYPE_TABLE)
  #define kvm_mk_pgd(pudp)	({ BUILD_BUG(); 0; })
  
++<<<<<<< HEAD
++=======
+ #define kvm_pfn_pte(pfn, prot)	pfn_pte(pfn, prot)
+ #define kvm_pfn_pmd(pfn, prot)	pfn_pmd(pfn, prot)
+ 
+ #define kvm_pud_pfn(pud)	({ WARN_ON(1); 0; })
+ 
+ 
+ #define kvm_pmd_mkhuge(pmd)	pmd_mkhuge(pmd)
+ 
+ /*
+  * The following kvm_*pud*() functions are provided strictly to allow
+  * sharing code with arm64. They should never be called in practice.
+  */
+ static inline void kvm_set_s2pud_readonly(pud_t *pud)
+ {
+ 	WARN_ON(1);
+ }
+ 
+ static inline bool kvm_s2pud_readonly(pud_t *pud)
+ {
+ 	WARN_ON(1);
+ 	return false;
+ }
+ 
+ static inline bool kvm_s2pud_exec(pud_t *pud)
+ {
+ 	WARN_ON(1);
+ 	return false;
+ }
+ 
+ static inline pud_t kvm_s2pud_mkyoung(pud_t pud)
+ {
+ 	BUG();
+ 	return pud;
+ }
+ 
+ static inline bool kvm_s2pud_young(pud_t pud)
+ {
+ 	WARN_ON(1);
+ 	return false;
+ }
+ 
++>>>>>>> 35a63966194d (KVM: arm64: Update age handlers to support PUD hugepages)
  static inline pte_t kvm_s2pte_mkwrite(pte_t pte)
  {
  	pte_val(pte) |= L_PTE_S2_RDWR;
diff --cc arch/arm64/include/asm/kvm_mmu.h
index 94acbfa0650c,9f941f70775c..000000000000
--- a/arch/arm64/include/asm/kvm_mmu.h
+++ b/arch/arm64/include/asm/kvm_mmu.h
@@@ -246,6 -253,31 +246,34 @@@ static inline bool kvm_s2pmd_exec(pmd_
  	return !(READ_ONCE(pmd_val(*pmdp)) & PMD_S2_XN);
  }
  
++<<<<<<< HEAD
++=======
+ static inline void kvm_set_s2pud_readonly(pud_t *pudp)
+ {
+ 	kvm_set_s2pte_readonly((pte_t *)pudp);
+ }
+ 
+ static inline bool kvm_s2pud_readonly(pud_t *pudp)
+ {
+ 	return kvm_s2pte_readonly((pte_t *)pudp);
+ }
+ 
+ static inline bool kvm_s2pud_exec(pud_t *pudp)
+ {
+ 	return !(READ_ONCE(pud_val(*pudp)) & PUD_S2_XN);
+ }
+ 
+ static inline pud_t kvm_s2pud_mkyoung(pud_t pud)
+ {
+ 	return pud_mkyoung(pud);
+ }
+ 
+ static inline bool kvm_s2pud_young(pud_t pud)
+ {
+ 	return pud_young(pud);
+ }
+ 
++>>>>>>> 35a63966194d (KVM: arm64: Update age handlers to support PUD hugepages)
  #define hyp_pte_table_empty(ptep) kvm_page_empty(ptep)
  
  #ifdef __PAGETABLE_PMD_FOLDED
diff --cc arch/arm64/include/asm/pgtable.h
index 7ab3f4580bbc,bb0f3f17a7a9..000000000000
--- a/arch/arm64/include/asm/pgtable.h
+++ b/arch/arm64/include/asm/pgtable.h
@@@ -381,6 -386,8 +381,11 @@@ static inline int pmd_protnone(pmd_t pm
  #define pfn_pmd(pfn,prot)	__pmd(__phys_to_pmd_val((phys_addr_t)(pfn) << PAGE_SHIFT) | pgprot_val(prot))
  #define mk_pmd(page,prot)	pfn_pmd(page_to_pfn(page),prot)
  
++<<<<<<< HEAD
++=======
+ #define pud_young(pud)		pte_young(pud_pte(pud))
+ #define pud_mkyoung(pud)	pte_pud(pte_mkyoung(pud_pte(pud)))
++>>>>>>> 35a63966194d (KVM: arm64: Update age handlers to support PUD hugepages)
  #define pud_write(pud)		pte_write(pud_pte(pud))
  
  #define __pud_to_phys(pud)	__pte_to_phys(pud_pte(pud))
* Unmerged path arch/arm/include/asm/kvm_mmu.h
* Unmerged path arch/arm64/include/asm/kvm_mmu.h
* Unmerged path arch/arm64/include/asm/pgtable.h
diff --git a/virt/kvm/arm/mmu.c b/virt/kvm/arm/mmu.c
index 22e88cffe24c..70e3193d517d 100644
--- a/virt/kvm/arm/mmu.c
+++ b/virt/kvm/arm/mmu.c
@@ -1178,6 +1178,11 @@ static int stage2_pmdp_test_and_clear_young(pmd_t *pmd)
 	return stage2_ptep_test_and_clear_young((pte_t *)pmd);
 }
 
+static int stage2_pudp_test_and_clear_young(pud_t *pud)
+{
+	return stage2_ptep_test_and_clear_young((pte_t *)pud);
+}
+
 /**
  * kvm_phys_addr_ioremap - map a device range to guest IPA
  *
@@ -1916,42 +1921,38 @@ void kvm_set_spte_hva(struct kvm *kvm, unsigned long hva, pte_t pte)
 
 static int kvm_age_hva_handler(struct kvm *kvm, gpa_t gpa, u64 size, void *data)
 {
+	pud_t *pud;
 	pmd_t *pmd;
 	pte_t *pte;
 
-	WARN_ON(size != PAGE_SIZE && size != PMD_SIZE);
-	pmd = stage2_get_pmd(kvm, NULL, gpa);
-	if (!pmd || pmd_none(*pmd))	/* Nothing there */
+	WARN_ON(size != PAGE_SIZE && size != PMD_SIZE && size != PUD_SIZE);
+	if (!stage2_get_leaf_entry(kvm, gpa, &pud, &pmd, &pte))
 		return 0;
 
-	if (pmd_thp_or_huge(*pmd))	/* THP, HugeTLB */
+	if (pud)
+		return stage2_pudp_test_and_clear_young(pud);
+	else if (pmd)
 		return stage2_pmdp_test_and_clear_young(pmd);
-
-	pte = pte_offset_kernel(pmd, gpa);
-	if (pte_none(*pte))
-		return 0;
-
-	return stage2_ptep_test_and_clear_young(pte);
+	else
+		return stage2_ptep_test_and_clear_young(pte);
 }
 
 static int kvm_test_age_hva_handler(struct kvm *kvm, gpa_t gpa, u64 size, void *data)
 {
+	pud_t *pud;
 	pmd_t *pmd;
 	pte_t *pte;
 
-	WARN_ON(size != PAGE_SIZE && size != PMD_SIZE);
-	pmd = stage2_get_pmd(kvm, NULL, gpa);
-	if (!pmd || pmd_none(*pmd))	/* Nothing there */
+	WARN_ON(size != PAGE_SIZE && size != PMD_SIZE && size != PUD_SIZE);
+	if (!stage2_get_leaf_entry(kvm, gpa, &pud, &pmd, &pte))
 		return 0;
 
-	if (pmd_thp_or_huge(*pmd))		/* THP, HugeTLB */
+	if (pud)
+		return kvm_s2pud_young(*pud);
+	else if (pmd)
 		return pmd_young(*pmd);
-
-	pte = pte_offset_kernel(pmd, gpa);
-	if (!pte_none(*pte))		/* Just a page... */
+	else
 		return pte_young(*pte);
-
-	return 0;
 }
 
 int kvm_age_hva(struct kvm *kvm, unsigned long start, unsigned long end)
