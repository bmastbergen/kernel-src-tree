Revert "x86/refcount: Work around GCC inlining bug"

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Ingo Molnar <mingo@kernel.org>
commit ac180540b04d7ffaf8ba6f13bf628c4f50dc9820
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/ac180540.failed

This reverts commit 9e1725b410594911cc5981b6c7b4cea4ec054ca8.

See this commit for details about the revert:

  e769742d3584 ("Revert "x86/jump-labels: Macrofy inline assembly code to work around GCC inlining bugs"")

The conflict resolution for interaction with:

  288e4521f0f6: ("x86/asm: 'Simplify' GEN_*_RMWcc() macros")

was provided by Masahiro Yamada.

 Conflicts:
	arch/x86/include/asm/refcount.h

	Reported-by: Masahiro Yamada <yamada.masahiro@socionext.com>
	Reviewed-by: Borislav Petkov <bp@alien8.de>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Juergen Gross <jgross@suse.com>
	Cc: Richard Biener <rguenther@suse.de>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Segher Boessenkool <segher@kernel.crashing.org>
	Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Nadav Amit <namit@vmware.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: linux-kernel@vger.kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit ac180540b04d7ffaf8ba6f13bf628c4f50dc9820)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/refcount.h
#	arch/x86/kernel/macros.S
diff --cc arch/x86/include/asm/refcount.h
index 19b90521954c,dbaed55c1c24..000000000000
--- a/arch/x86/include/asm/refcount.h
+++ b/arch/x86/include/asm/refcount.h
@@@ -17,7 -17,7 +17,11 @@@
   */
  #define _REFCOUNT_EXCEPTION				\
  	".pushsection .text..refcount\n"		\
++<<<<<<< HEAD
 +	"111:\tlea %[counter], %%" _ASM_CX "\n"		\
++=======
+ 	"111:\tlea %[var], %%" _ASM_CX "\n"		\
++>>>>>>> ac180540b04d (Revert "x86/refcount: Work around GCC inlining bug")
  	"112:\t" ASM_UD2 "\n"				\
  	ASM_UNREACHABLE					\
  	".popsection\n"					\
@@@ -43,7 -43,7 +47,11 @@@ static __always_inline void refcount_ad
  {
  	asm volatile(LOCK_PREFIX "addl %1,%0\n\t"
  		REFCOUNT_CHECK_LT_ZERO
++<<<<<<< HEAD
 +		: [counter] "+m" (r->refs.counter)
++=======
+ 		: [var] "+m" (r->refs.counter)
++>>>>>>> ac180540b04d (Revert "x86/refcount: Work around GCC inlining bug")
  		: "ir" (i)
  		: "cc", "cx");
  }
@@@ -52,7 -52,7 +60,11 @@@ static __always_inline void refcount_in
  {
  	asm volatile(LOCK_PREFIX "incl %0\n\t"
  		REFCOUNT_CHECK_LT_ZERO
++<<<<<<< HEAD
 +		: [counter] "+m" (r->refs.counter)
++=======
+ 		: [var] "+m" (r->refs.counter)
++>>>>>>> ac180540b04d (Revert "x86/refcount: Work around GCC inlining bug")
  		: : "cc", "cx");
  }
  
@@@ -60,21 -60,23 +72,37 @@@ static __always_inline void refcount_de
  {
  	asm volatile(LOCK_PREFIX "decl %0\n\t"
  		REFCOUNT_CHECK_LE_ZERO
++<<<<<<< HEAD
 +		: [counter] "+m" (r->refs.counter)
++=======
+ 		: [var] "+m" (r->refs.counter)
++>>>>>>> ac180540b04d (Revert "x86/refcount: Work around GCC inlining bug")
  		: : "cc", "cx");
  }
  
  static __always_inline __must_check
  bool refcount_sub_and_test(unsigned int i, refcount_t *r)
  {
++<<<<<<< HEAD
 +	GEN_BINARY_SUFFIXED_RMWcc(LOCK_PREFIX "subl", REFCOUNT_CHECK_LT_ZERO,
 +				  r->refs.counter, "er", i, "%0", e, "cx");
++=======
+ 	return GEN_BINARY_SUFFIXED_RMWcc(LOCK_PREFIX "subl",
+ 					 REFCOUNT_CHECK_LT_ZERO,
+ 					 r->refs.counter, e, "er", i, "cx");
++>>>>>>> ac180540b04d (Revert "x86/refcount: Work around GCC inlining bug")
  }
  
  static __always_inline __must_check bool refcount_dec_and_test(refcount_t *r)
  {
++<<<<<<< HEAD
 +	GEN_UNARY_SUFFIXED_RMWcc(LOCK_PREFIX "decl", REFCOUNT_CHECK_LT_ZERO,
 +				 r->refs.counter, "%0", e, "cx");
++=======
+ 	return GEN_UNARY_SUFFIXED_RMWcc(LOCK_PREFIX "decl",
+ 					REFCOUNT_CHECK_LT_ZERO,
+ 					r->refs.counter, e, "cx");
++>>>>>>> ac180540b04d (Revert "x86/refcount: Work around GCC inlining bug")
  }
  
  static __always_inline __must_check
@@@ -92,7 -94,7 +120,11 @@@ bool refcount_add_not_zero(unsigned in
  		/* Did we try to increment from/to an undesirable state? */
  		if (unlikely(c < 0 || c == INT_MAX || result < c)) {
  			asm volatile(REFCOUNT_ERROR
++<<<<<<< HEAD
 +				     : : [counter] "m" (r->refs.counter)
++=======
+ 				     : : [var] "m" (r->refs.counter)
++>>>>>>> ac180540b04d (Revert "x86/refcount: Work around GCC inlining bug")
  				     : "cc", "cx");
  			break;
  		}
* Unmerged path arch/x86/kernel/macros.S
* Unmerged path arch/x86/include/asm/refcount.h
* Unmerged path arch/x86/kernel/macros.S
