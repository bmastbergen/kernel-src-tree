selinux: Make selinux_kernfs_init_security static

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author YueHaibing <yuehaibing@huawei.com>
commit c72c4cde8095aa0e4336cb337dac25d6e347240d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c72c4cde.failed

Fix sparse warning:

security/selinux/hooks.c:3389:5: warning:
 symbol 'selinux_kernfs_init_security' was not declared. Should it be static?

	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
	Acked-by: Ondrej Mosnacek <omosnace@redhat.com>
	Signed-off-by: Paul Moore <paul@paul-moore.com>
(cherry picked from commit c72c4cde8095aa0e4336cb337dac25d6e347240d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/selinux/hooks.c
diff --cc security/selinux/hooks.c
index d1c6a482b68b,b6e61524d68d..000000000000
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@@ -3567,6 -3384,68 +3567,71 @@@ static int selinux_inode_copy_up_xattr(
  	return -EOPNOTSUPP;
  }
  
++<<<<<<< HEAD
++=======
+ /* kernfs node operations */
+ 
+ static int selinux_kernfs_init_security(struct kernfs_node *kn_dir,
+ 					struct kernfs_node *kn)
+ {
+ 	const struct task_security_struct *tsec = current_security();
+ 	u32 parent_sid, newsid, clen;
+ 	int rc;
+ 	char *context;
+ 
+ 	rc = kernfs_security_xattr_get(kn_dir, XATTR_SELINUX_SUFFIX, NULL, 0);
+ 	if (rc == -ENODATA)
+ 		return 0;
+ 	else if (rc < 0)
+ 		return rc;
+ 
+ 	clen = (u32)rc;
+ 	context = kmalloc(clen, GFP_KERNEL);
+ 	if (!context)
+ 		return -ENOMEM;
+ 
+ 	rc = kernfs_security_xattr_get(kn_dir, XATTR_SELINUX_SUFFIX, context,
+ 				       clen);
+ 	if (rc < 0) {
+ 		kfree(context);
+ 		return rc;
+ 	}
+ 
+ 	rc = security_context_to_sid(&selinux_state, context, clen, &parent_sid,
+ 				     GFP_KERNEL);
+ 	kfree(context);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (tsec->create_sid) {
+ 		newsid = tsec->create_sid;
+ 	} else {
+ 		u16 secclass = inode_mode_to_security_class(kn->mode);
+ 		struct qstr q;
+ 
+ 		q.name = kn->name;
+ 		q.hash_len = hashlen_string(kn_dir, kn->name);
+ 
+ 		rc = security_transition_sid(&selinux_state, tsec->sid,
+ 					     parent_sid, secclass, &q,
+ 					     &newsid);
+ 		if (rc)
+ 			return rc;
+ 	}
+ 
+ 	rc = security_sid_to_context_force(&selinux_state, newsid,
+ 					   &context, &clen);
+ 	if (rc)
+ 		return rc;
+ 
+ 	rc = kernfs_security_xattr_set(kn, XATTR_SELINUX_SUFFIX, context, clen,
+ 				       XATTR_CREATE);
+ 	kfree(context);
+ 	return rc;
+ }
+ 
+ 
++>>>>>>> c72c4cde8095 (selinux: Make selinux_kernfs_init_security static)
  /* file security operations */
  
  static int selinux_revalidate_file_permission(struct file *file, int mask)
* Unmerged path security/selinux/hooks.c
