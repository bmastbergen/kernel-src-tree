dma: Introduce dma_max_mapping_size()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Joerg Roedel <jroedel@suse.de>
commit 133d624b1cee16906134e92d5befb843b58bcf31
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/133d624b.failed

The function returns the maximum size that can be mapped
using DMA-API functions. The patch also adds the
implementation for direct DMA and a new dma_map_ops pointer
so that other implementations can expose their limit.

	Cc: stable@vger.kernel.org
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit 133d624b1cee16906134e92d5befb843b58bcf31)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/dma-mapping.h
diff --cc include/linux/dma-mapping.h
index d3bd73fe4750,5b21f14802e1..000000000000
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@@ -139,7 -130,7 +139,11 @@@ struct dma_map_ops 
  			enum dma_data_direction direction);
  	int (*dma_supported)(struct device *dev, u64 mask);
  	u64 (*get_required_mask)(struct device *dev);
++<<<<<<< HEAD
 +	RH_KABI_SIZE_AND_EXTEND(dma_map_ops_extended)
++=======
+ 	size_t (*max_mapping_size)(struct device *dev);
++>>>>>>> 133d624b1cee (dma: Introduce dma_max_mapping_size())
  };
  
  #define DMA_MAPPING_ERROR		(~(dma_addr_t)0)
diff --git a/Documentation/DMA-API.txt b/Documentation/DMA-API.txt
index dca5f271db7f..4f0f1a98c320 100644
--- a/Documentation/DMA-API.txt
+++ b/Documentation/DMA-API.txt
@@ -195,6 +195,14 @@ Requesting the required mask does not alter the current mask.  If you
 wish to take advantage of it, you should issue a dma_set_mask()
 call to set the mask to the value returned.
 
+::
+
+	size_t
+	dma_direct_max_mapping_size(struct device *dev);
+
+Returns the maximum size of a mapping for the device. The size parameter
+of the mapping functions like dma_map_single(), dma_map_page() and
+others should not be larger than the returned value.
 
 Part Id - Streaming DMA mappings
 --------------------------------
* Unmerged path include/linux/dma-mapping.h
diff --git a/kernel/dma/direct.c b/kernel/dma/direct.c
index 2b043bf6231c..1b67aca3b89f 100644
--- a/kernel/dma/direct.c
+++ b/kernel/dma/direct.c
@@ -380,3 +380,14 @@ int dma_direct_supported(struct device *dev, u64 mask)
 	 */
 	return mask >= __phys_to_dma(dev, min_mask);
 }
+
+size_t dma_direct_max_mapping_size(struct device *dev)
+{
+	size_t size = SIZE_MAX;
+
+	/* If SWIOTLB is active, use its maximum mapping size */
+	if (is_swiotlb_active())
+		size = swiotlb_max_mapping_size(dev);
+
+	return size;
+}
diff --git a/kernel/dma/mapping.c b/kernel/dma/mapping.c
index 120b469daa39..7e53819251f9 100644
--- a/kernel/dma/mapping.c
+++ b/kernel/dma/mapping.c
@@ -357,3 +357,17 @@ void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 		ops->cache_sync(dev, vaddr, size, dir);
 }
 EXPORT_SYMBOL(dma_cache_sync);
+
+size_t dma_max_mapping_size(struct device *dev)
+{
+	const struct dma_map_ops *ops = get_dma_ops(dev);
+	size_t size = SIZE_MAX;
+
+	if (dma_is_direct(ops))
+		size = dma_direct_max_mapping_size(dev);
+	else if (ops && ops->max_mapping_size)
+		size = ops->max_mapping_size(dev);
+
+	return size;
+}
+EXPORT_SYMBOL_GPL(dma_max_mapping_size);
