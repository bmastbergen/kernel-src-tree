net/mlx5: Remove references to local mlx5_core functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit c23f88cb575fe4a0b49603d7f9e5c3782886269f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c23f88cb.failed

As a preparation to move SRQ functionality to RDMA, drop all references
to mlx5_core logic and make SRQ be dependent on shared code only.

Most of the time, we are interested to know if events are working/not
working and it is possible with previous commit ("net/mlx5: Debug print
for forwarded async events").

	Reviewed-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit c23f88cb575fe4a0b49603d7f9e5c3782886269f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/srq.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/srq.c
index 28c1c0ebd02e,690815234838..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/srq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/srq.c
@@@ -9,13 -9,24 +9,32 @@@
  #include <linux/mlx5/cmd.h>
  #include <linux/mlx5/srq.h>
  #include <rdma/ib_verbs.h>
++<<<<<<< HEAD
 +#include "mlx5_core.h"
++=======
++>>>>>>> c23f88cb575f (net/mlx5: Remove references to local mlx5_core functions)
  #include <linux/mlx5/transobj.h>
  
 -static int srq_event_notifier(struct notifier_block *nb,
 -			      unsigned long type, void *data)
 +void mlx5_srq_event(struct mlx5_core_dev *dev, u32 srqn, int event_type)
  {
++<<<<<<< HEAD
 +	struct mlx5_srq_table *table = &dev->priv.srq_table;
 +	struct mlx5_core_srq *srq;
++=======
+ 	struct mlx5_srq_table *table;
+ 	struct mlx5_core_srq *srq;
+ 	struct mlx5_eqe *eqe;
+ 	u32 srqn;
+ 
+ 	if (type != MLX5_EVENT_TYPE_SRQ_CATAS_ERROR &&
+ 	    type != MLX5_EVENT_TYPE_SRQ_RQ_LIMIT)
+ 		return NOTIFY_DONE;
+ 
+ 	table = container_of(nb, struct mlx5_srq_table, nb);
+ 
+ 	eqe = data;
+ 	srqn = be32_to_cpu(eqe->data.qp_srq.qp_srq_n) & 0xffffff;
++>>>>>>> c23f88cb575f (net/mlx5: Remove references to local mlx5_core functions)
  
  	spin_lock(&table->lock);
  
@@@ -25,12 -36,10 +44,17 @@@
  
  	spin_unlock(&table->lock);
  
++<<<<<<< HEAD
 +	if (!srq) {
 +		mlx5_core_warn(dev, "Async event for bogus SRQ 0x%08x\n", srqn);
 +		return;
 +	}
++=======
+ 	if (!srq)
+ 		return NOTIFY_OK;
++>>>>>>> c23f88cb575f (net/mlx5: Remove references to local mlx5_core functions)
  
 -	srq->event(srq, eqe->type);
 +	srq->event(srq, event_type);
  
  	if (atomic_dec_and_test(&srq->refcount))
  		complete(&srq->free);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/srq.c
