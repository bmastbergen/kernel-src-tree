drm/i915: Include "ignore lines" in skl+ wm state

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit 2ed8e1f560e517baca4763204edbf76255c8e54e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/2ed8e1f5.failed

We'll need to poke at the "ignore lines" bit in the skl+
watermark registers for a w/a. Include that bit in the wm
state.

	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20190213165424.22904-2-ville.syrjala@linux.intel.com
	Reviewed-by: Clint Taylor <Clinton.A.Taylor@intel.com>
(cherry picked from commit 2ed8e1f560e517baca4763204edbf76255c8e54e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_drv.h
#	drivers/gpu/drm/i915/intel_pm.c
diff --cc drivers/gpu/drm/i915/i915_drv.h
index 13092094d7ec,5c8d0489a1cd..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -1210,9 -1122,11 +1210,13 @@@ struct skl_ddb_values 
  };
  
  struct skl_wm_level {
 -	u16 min_ddb_alloc;
 -	u16 plane_res_b;
 -	u8 plane_res_l;
  	bool plane_en;
++<<<<<<< HEAD
 +	uint16_t plane_res_b;
 +	uint8_t plane_res_l;
++=======
+ 	bool ignore_lines;
++>>>>>>> 2ed8e1f560e5 (drm/i915: Include "ignore lines" in skl+ wm state)
  };
  
  /* Stores plane specific WM parameters */
diff --cc drivers/gpu/drm/i915/intel_pm.c
index 53aaaa3e6886,9485645a41b0..000000000000
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@@ -4946,27 -5051,31 +4946,28 @@@ static void skl_write_wm_level(struct d
  			       i915_reg_t reg,
  			       const struct skl_wm_level *level)
  {
 -	u32 val = 0;
 +	uint32_t val = 0;
  
- 	if (level->plane_en) {
+ 	if (level->plane_en)
  		val |= PLANE_WM_EN;
- 		val |= level->plane_res_b;
- 		val |= level->plane_res_l << PLANE_WM_LINES_SHIFT;
- 	}
+ 	if (level->ignore_lines)
+ 		val |= PLANE_WM_IGNORE_LINES;
+ 	val |= level->plane_res_b;
+ 	val |= level->plane_res_l << PLANE_WM_LINES_SHIFT;
  
 -	I915_WRITE_FW(reg, val);
 +	I915_WRITE(reg, val);
  }
  
 -void skl_write_plane_wm(struct intel_plane *plane,
 -			const struct intel_crtc_state *crtc_state)
 +static void skl_write_plane_wm(struct intel_crtc *intel_crtc,
 +			       const struct skl_plane_wm *wm,
 +			       const struct skl_ddb_allocation *ddb,
 +			       enum plane_id plane_id)
  {
 -	struct drm_i915_private *dev_priv = to_i915(plane->base.dev);
 +	struct drm_crtc *crtc = &intel_crtc->base;
 +	struct drm_device *dev = crtc->dev;
 +	struct drm_i915_private *dev_priv = to_i915(dev);
  	int level, max_level = ilk_wm_max_level(dev_priv);
 -	enum plane_id plane_id = plane->id;
 -	enum pipe pipe = plane->pipe;
 -	const struct skl_plane_wm *wm =
 -		&crtc_state->wm.skl.optimal.planes[plane_id];
 -	const struct skl_ddb_entry *ddb_y =
 -		&crtc_state->wm.skl.plane_ddb_y[plane_id];
 -	const struct skl_ddb_entry *ddb_uv =
 -		&crtc_state->wm.skl.plane_ddb_uv[plane_id];
 +	enum pipe pipe = intel_crtc->pipe;
  
  	for (level = 0; level <= max_level; level++) {
  		skl_write_wm_level(dev_priv, PLANE_WM(pipe, plane_id, level),
@@@ -5017,15 -5123,42 +5018,23 @@@ static void skl_write_cursor_wm(struct 
  bool skl_wm_level_equals(const struct skl_wm_level *l1,
  			 const struct skl_wm_level *l2)
  {
++<<<<<<< HEAD
 +	if (l1->plane_en != l2->plane_en)
 +		return false;
++=======
+ 	return l1->plane_en == l2->plane_en &&
+ 		l1->ignore_lines == l2->ignore_lines &&
+ 		l1->plane_res_l == l2->plane_res_l &&
+ 		l1->plane_res_b == l2->plane_res_b;
+ }
++>>>>>>> 2ed8e1f560e5 (drm/i915: Include "ignore lines" in skl+ wm state)
  
 -static bool skl_plane_wm_equals(struct drm_i915_private *dev_priv,
 -				const struct skl_plane_wm *wm1,
 -				const struct skl_plane_wm *wm2)
 -{
 -	int level, max_level = ilk_wm_max_level(dev_priv);
 -
 -	for (level = 0; level <= max_level; level++) {
 -		if (!skl_wm_level_equals(&wm1->wm[level], &wm2->wm[level]) ||
 -		    !skl_wm_level_equals(&wm1->uv_wm[level], &wm2->uv_wm[level]))
 -			return false;
 -	}
 -
 -	return skl_wm_level_equals(&wm1->trans_wm, &wm2->trans_wm);
 -}
 -
 -static bool skl_pipe_wm_equals(struct intel_crtc *crtc,
 -			       const struct skl_pipe_wm *wm1,
 -			       const struct skl_pipe_wm *wm2)
 -{
 -	struct drm_i915_private *dev_priv = to_i915(crtc->base.dev);
 -	enum plane_id plane_id;
 -
 -	for_each_plane_id_on_crtc(crtc, plane_id) {
 -		if (!skl_plane_wm_equals(dev_priv,
 -					 &wm1->planes[plane_id],
 -					 &wm2->planes[plane_id]))
 -			return false;
 -	}
 +	/* If both planes aren't enabled, the rest shouldn't matter */
 +	if (!l1->plane_en)
 +		return true;
  
 -	return wm1->linetime == wm2->linetime;
 +	return (l1->plane_res_l == l2->plane_res_l &&
 +		l1->plane_res_b == l2->plane_res_b);
  }
  
  static inline bool skl_ddb_entries_overlap(const struct skl_ddb_entry *a,
@@@ -5180,11 -5303,86 +5189,94 @@@ skl_print_wm_changes(const struct drm_a
  			if (skl_ddb_entry_equal(old, new))
  				continue;
  
++<<<<<<< HEAD
 +			DRM_DEBUG_ATOMIC("[PLANE:%d:%s] ddb (%d - %d) -> (%d - %d)\n",
 +					 intel_plane->base.base.id,
 +					 intel_plane->base.name,
 +					 old->start, old->end,
 +					 new->start, new->end);
++=======
+ 			DRM_DEBUG_KMS("[PLANE:%d:%s] ddb (%4d - %4d) -> (%4d - %4d), size %4d -> %4d\n",
+ 				      plane->base.base.id, plane->base.name,
+ 				      old->start, old->end, new->start, new->end,
+ 				      skl_ddb_entry_size(old), skl_ddb_entry_size(new));
+ 		}
+ 
+ 		for_each_intel_plane_on_crtc(&dev_priv->drm, crtc, plane) {
+ 			enum plane_id plane_id = plane->id;
+ 			const struct skl_plane_wm *old_wm, *new_wm;
+ 
+ 			old_wm = &old_pipe_wm->planes[plane_id];
+ 			new_wm = &new_pipe_wm->planes[plane_id];
+ 
+ 			if (skl_plane_wm_equals(dev_priv, old_wm, new_wm))
+ 				continue;
+ 
+ 			DRM_DEBUG_KMS("[PLANE:%d:%s]   level %cwm0,%cwm1,%cwm2,%cwm3,%cwm4,%cwm5,%cwm6,%cwm7,%ctwm"
+ 				      " -> %cwm0,%cwm1,%cwm2,%cwm3,%cwm4,%cwm5,%cwm6,%cwm7,%ctwm\n",
+ 				      plane->base.base.id, plane->base.name,
+ 				      enast(old_wm->wm[0].plane_en), enast(old_wm->wm[1].plane_en),
+ 				      enast(old_wm->wm[2].plane_en), enast(old_wm->wm[3].plane_en),
+ 				      enast(old_wm->wm[4].plane_en), enast(old_wm->wm[5].plane_en),
+ 				      enast(old_wm->wm[6].plane_en), enast(old_wm->wm[7].plane_en),
+ 				      enast(old_wm->trans_wm.plane_en),
+ 				      enast(new_wm->wm[0].plane_en), enast(new_wm->wm[1].plane_en),
+ 				      enast(new_wm->wm[2].plane_en), enast(new_wm->wm[3].plane_en),
+ 				      enast(new_wm->wm[4].plane_en), enast(new_wm->wm[5].plane_en),
+ 				      enast(new_wm->wm[6].plane_en), enast(new_wm->wm[7].plane_en),
+ 				      enast(new_wm->trans_wm.plane_en));
+ 
+ 			DRM_DEBUG_KMS("[PLANE:%d:%s]   lines %c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d"
+ 				      " -> %c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d,%c%3d\n",
+ 				      plane->base.base.id, plane->base.name,
+ 				      enast(old_wm->wm[0].ignore_lines), old_wm->wm[0].plane_res_l,
+ 				      enast(old_wm->wm[1].ignore_lines), old_wm->wm[1].plane_res_l,
+ 				      enast(old_wm->wm[2].ignore_lines), old_wm->wm[2].plane_res_l,
+ 				      enast(old_wm->wm[3].ignore_lines), old_wm->wm[3].plane_res_l,
+ 				      enast(old_wm->wm[4].ignore_lines), old_wm->wm[4].plane_res_l,
+ 				      enast(old_wm->wm[5].ignore_lines), old_wm->wm[5].plane_res_l,
+ 				      enast(old_wm->wm[6].ignore_lines), old_wm->wm[6].plane_res_l,
+ 				      enast(old_wm->wm[7].ignore_lines), old_wm->wm[7].plane_res_l,
+ 				      enast(old_wm->trans_wm.ignore_lines), old_wm->trans_wm.plane_res_l,
+ 
+ 				      enast(new_wm->wm[0].ignore_lines), new_wm->wm[0].plane_res_l,
+ 				      enast(new_wm->wm[1].ignore_lines), new_wm->wm[1].plane_res_l,
+ 				      enast(new_wm->wm[2].ignore_lines), new_wm->wm[2].plane_res_l,
+ 				      enast(new_wm->wm[3].ignore_lines), new_wm->wm[3].plane_res_l,
+ 				      enast(new_wm->wm[4].ignore_lines), new_wm->wm[4].plane_res_l,
+ 				      enast(new_wm->wm[5].ignore_lines), new_wm->wm[5].plane_res_l,
+ 				      enast(new_wm->wm[6].ignore_lines), new_wm->wm[6].plane_res_l,
+ 				      enast(new_wm->wm[7].ignore_lines), new_wm->wm[7].plane_res_l,
+ 				      enast(new_wm->trans_wm.ignore_lines), new_wm->trans_wm.plane_res_l);
+ 
+ 			DRM_DEBUG_KMS("[PLANE:%d:%s]  blocks %4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d"
+ 				      " -> %4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d\n",
+ 				      plane->base.base.id, plane->base.name,
+ 				      old_wm->wm[0].plane_res_b, old_wm->wm[1].plane_res_b,
+ 				      old_wm->wm[2].plane_res_b, old_wm->wm[3].plane_res_b,
+ 				      old_wm->wm[4].plane_res_b, old_wm->wm[5].plane_res_b,
+ 				      old_wm->wm[6].plane_res_b, old_wm->wm[7].plane_res_b,
+ 				      old_wm->trans_wm.plane_res_b,
+ 				      new_wm->wm[0].plane_res_b, new_wm->wm[1].plane_res_b,
+ 				      new_wm->wm[2].plane_res_b, new_wm->wm[3].plane_res_b,
+ 				      new_wm->wm[4].plane_res_b, new_wm->wm[5].plane_res_b,
+ 				      new_wm->wm[6].plane_res_b, new_wm->wm[7].plane_res_b,
+ 				      new_wm->trans_wm.plane_res_b);
+ 
+ 			DRM_DEBUG_KMS("[PLANE:%d:%s] min_ddb %4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d"
+ 				      " -> %4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d\n",
+ 				      plane->base.base.id, plane->base.name,
+ 				      old_wm->wm[0].min_ddb_alloc, old_wm->wm[1].min_ddb_alloc,
+ 				      old_wm->wm[2].min_ddb_alloc, old_wm->wm[3].min_ddb_alloc,
+ 				      old_wm->wm[4].min_ddb_alloc, old_wm->wm[5].min_ddb_alloc,
+ 				      old_wm->wm[6].min_ddb_alloc, old_wm->wm[7].min_ddb_alloc,
+ 				      old_wm->trans_wm.min_ddb_alloc,
+ 				      new_wm->wm[0].min_ddb_alloc, new_wm->wm[1].min_ddb_alloc,
+ 				      new_wm->wm[2].min_ddb_alloc, new_wm->wm[3].min_ddb_alloc,
+ 				      new_wm->wm[4].min_ddb_alloc, new_wm->wm[5].min_ddb_alloc,
+ 				      new_wm->wm[6].min_ddb_alloc, new_wm->wm[7].min_ddb_alloc,
+ 				      new_wm->trans_wm.min_ddb_alloc);
++>>>>>>> 2ed8e1f560e5 (drm/i915: Include "ignore lines" in skl+ wm state)
  		}
  	}
  }
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index a78c6ef1f608..b84769bbad4a 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -5795,6 +5795,7 @@ enum {
 #define _CUR_WM_TRANS_A_0	0x70168
 #define _CUR_WM_TRANS_B_0	0x71168
 #define   PLANE_WM_EN		(1 << 31)
+#define   PLANE_WM_IGNORE_LINES	(1 << 30)
 #define   PLANE_WM_LINES_SHIFT	14
 #define   PLANE_WM_LINES_MASK	0x1f
 #define   PLANE_WM_BLOCKS_MASK	0x3ff
* Unmerged path drivers/gpu/drm/i915/intel_pm.c
