netlink: Add answer_flags to netlink_callback

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author David Ahern <dsahern@gmail.com>
commit 22e6c58b8c2843337ec4e8464b1ce6e869ca5bf4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/22e6c58b.failed

With dump filtering we need a way to ensure the NLM_F_DUMP_FILTERED
flag is set on a message back to the user if the data returned is
influenced by some input attributes. Normally this can be done as
messages are added to the skb, but if the filter results in no data
being returned, the user could be confused as to why.

This patch adds answer_flags to the netlink_callback allowing dump
handlers to set the NLM_F_DUMP_FILTERED at a minimum in the
NLMSG_DONE message ensuring the flag gets back to the user.

The netlink_callback space is initialized to 0 via a memset in
__netlink_dump_start, so init of the new answer_flags is covered.

	Signed-off-by: David Ahern <dsahern@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 22e6c58b8c2843337ec4e8464b1ce6e869ca5bf4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netlink.h
diff --cc include/linux/netlink.h
index 98edd94cef82,4da90a6ab536..000000000000
--- a/include/linux/netlink.h
+++ b/include/linux/netlink.h
@@@ -180,6 -179,8 +180,11 @@@ struct netlink_callback 
  	struct netlink_ext_ack	*extack;
  	u16			family;
  	u16			min_dump_alloc;
++<<<<<<< HEAD
++=======
+ 	bool			strict_check;
+ 	u16			answer_flags;
++>>>>>>> 22e6c58b8c28 (netlink: Add answer_flags to netlink_callback)
  	unsigned int		prev_seq, seq;
  	long			args[6];
  };
* Unmerged path include/linux/netlink.h
diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index 9d031663425d..e617754e44e1 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -2248,7 +2248,8 @@ static int netlink_dump(struct sock *sk)
 	}
 
 	nlh = nlmsg_put_answer(skb, cb, NLMSG_DONE,
-			       sizeof(nlk->dump_done_errno), NLM_F_MULTI);
+			       sizeof(nlk->dump_done_errno),
+			       NLM_F_MULTI | cb->answer_flags);
 	if (WARN_ON(!nlh))
 		goto errout_skb;
 
