libbpf: Verify versioned symbols

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Andrey Ignatov <rdna@fb.com>
commit 306b267cb3c4c2a3d12138041fed10478804da82
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/306b267c.failed

Since ABI versioning info is kept separately from the code it's easy to
forget to update it while adding a new API.

Add simple verification that all global symbols exported with LIBBPF_API
are versioned in libbpf.map version script.

The idea is to check that number of global symbols in libbpf-in.o, that
is the input to the linker, matches with number of unique versioned
symbols in libbpf.so, that is the output of the linker. If these numbers
don't match, it may mean some symbol was not versioned and make will
fail.

"Unique" means that if a symbol is present in more than one version of
ABI due to ABI changes, it'll be counted once.

Another option to calculate number of global symbols in the "input"
could be to count number of LIBBPF_ABI entries in C headers but it seems
to be fragile.

Example of output when a symbol is missing in version script:

    ...
    LD       libbpf-in.o
    LINK     libbpf.a
    LINK     libbpf.so
  Warning: Num of global symbols in libbpf-in.o (115) does NOT match
  with num of versioned symbols in libbpf.so (114). Please make sure all
  LIBBPF_API symbols are versioned in libbpf.map.
  make: *** [check_abi] Error 1

	Signed-off-by: Andrey Ignatov <rdna@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 306b267cb3c4c2a3d12138041fed10478804da82)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/Makefile
diff --cc tools/lib/bpf/Makefile
index 45c6eeeb9d6f,34d9c3619c96..000000000000
--- a/tools/lib/bpf/Makefile
+++ b/tools/lib/bpf/Makefile
@@@ -146,8 -147,19 +146,13 @@@ BPF_IN    := $(OUTPUT)libbpf-in.
  LIB_FILE := $(addprefix $(OUTPUT),$(LIB_FILE))
  VERSION_SCRIPT := libbpf.map
  
+ GLOBAL_SYM_COUNT = $(shell readelf -s $(BPF_IN) | \
+ 			   awk '/GLOBAL/ && /DEFAULT/ && !/UND/ {s++} END{print s}')
+ VERSIONED_SYM_COUNT = $(shell readelf -s $(OUTPUT)libbpf.so | \
+ 			      grep -Eo '[^ ]+@LIBBPF_' | cut -d@ -f1 | sort -u | wc -l)
+ 
  CMD_TARGETS = $(LIB_FILE)
  
 -CXX_TEST_TARGET = $(OUTPUT)test_libbpf
 -
 -ifeq ($(feature-cxx), 1)
 -	CMD_TARGETS += $(CXX_TEST_TARGET)
 -endif
 -
  TARGETS = $(CMD_TARGETS)
  
  all: fixdep all_cmd
@@@ -176,6 -188,21 +181,24 @@@ $(OUTPUT)libbpf.so: $(BPF_IN
  $(OUTPUT)libbpf.a: $(BPF_IN)
  	$(QUIET_LINK)$(RM) $@; $(AR) rcs $@ $^
  
++<<<<<<< HEAD
++=======
+ $(OUTPUT)test_libbpf: test_libbpf.cpp $(OUTPUT)libbpf.a
+ 	$(QUIET_LINK)$(CXX) $^ -lelf -o $@
+ 
+ check: check_abi
+ 
+ check_abi: $(OUTPUT)libbpf.so
+ 	@if [ "$(GLOBAL_SYM_COUNT)" != "$(VERSIONED_SYM_COUNT)" ]; then	 \
+ 		echo "Warning: Num of global symbols in $(BPF_IN)"	 \
+ 		     "($(GLOBAL_SYM_COUNT)) does NOT match with num of"	 \
+ 		     "versioned symbols in $^ ($(VERSIONED_SYM_COUNT))." \
+ 		     "Please make sure all LIBBPF_API symbols are"	 \
+ 		     "versioned in $(VERSION_SCRIPT)." >&2;		 \
+ 		exit 1;							 \
+ 	fi
+ 
++>>>>>>> 306b267cb3c4 (libbpf: Verify versioned symbols)
  define do_install
  	if [ ! -d '$(DESTDIR_SQ)$2' ]; then		\
  		$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$2';	\
* Unmerged path tools/lib/bpf/Makefile
