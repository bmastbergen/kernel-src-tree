psi: cgroup support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Johannes Weiner <hannes@cmpxchg.org>
commit 2ce7135adc9ad081aa3c49744144376ac74fea60
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/2ce7135a.failed

On a system that executes multiple cgrouped jobs and independent
workloads, we don't just care about the health of the overall system, but
also that of individual jobs, so that we can ensure individual job health,
fairness between jobs, or prioritize some jobs over others.

This patch implements pressure stall tracking for cgroups.  In kernels
with CONFIG_PSI=y, cgroup2 groups will have cpu.pressure, memory.pressure,
and io.pressure files that track aggregate pressure stall times for only
the tasks inside the cgroup.

Link: http://lkml.kernel.org/r/20180828172258.3185-10-hannes@cmpxchg.org
	Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
	Acked-by: Tejun Heo <tj@kernel.org>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Tested-by: Daniel Drake <drake@endlessm.com>
	Tested-by: Suren Baghdasaryan <surenb@google.com>
	Cc: Christopher Lameter <cl@linux.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Johannes Weiner <jweiner@fb.com>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Peter Enderborg <peter.enderborg@sony.com>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Cc: Shakeel Butt <shakeelb@google.com>
	Cc: Vinayak Menon <vinmenon@codeaurora.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 2ce7135adc9ad081aa3c49744144376ac74fea60)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/accounting/psi.txt
#	include/linux/psi.h
#	init/Kconfig
#	kernel/cgroup/cgroup.c
#	kernel/sched/psi.c
diff --cc init/Kconfig
index 4e3ceb921310,a4112e95724a..000000000000
--- a/init/Kconfig
+++ b/init/Kconfig
@@@ -473,6 -490,25 +473,28 @@@ config TASK_IO_ACCOUNTIN
  
  	  Say N if unsure.
  
++<<<<<<< HEAD
++=======
+ config PSI
+ 	bool "Pressure stall information tracking"
+ 	help
+ 	  Collect metrics that indicate how overcommitted the CPU, memory,
+ 	  and IO capacity are in the system.
+ 
+ 	  If you say Y here, the kernel will create /proc/pressure/ with the
+ 	  pressure statistics files cpu, memory, and io. These will indicate
+ 	  the share of walltime in which some or all tasks in the system are
+ 	  delayed due to contention of the respective resource.
+ 
+ 	  In kernels with cgroup support, cgroups (cgroup2 only) will
+ 	  have cpu.pressure, memory.pressure, and io.pressure files,
+ 	  which aggregate pressure stalls for the grouped tasks only.
+ 
+ 	  For more details see Documentation/accounting/psi.txt.
+ 
+ 	  Say N if unsure.
+ 
++>>>>>>> 2ce7135adc9a (psi: cgroup support)
  endmenu # "CPU/Task time and stats accounting"
  
  config CPU_ISOLATION
diff --cc kernel/cgroup/cgroup.c
index a73ca9f49f35,8b79318810ad..000000000000
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@@ -4939,7 -4931,10 +4974,14 @@@ static struct cgroup *cgroup_create(str
  	if (ret)
  		goto out_idr_free;
  
++<<<<<<< HEAD
 +	spin_lock_irq(&css_set_lock);
++=======
+ 	ret = cgroup_bpf_inherit(cgrp);
+ 	if (ret)
+ 		goto out_psi_free;
+ 
++>>>>>>> 2ce7135adc9a (psi: cgroup support)
  	for (tcgrp = cgrp; tcgrp; tcgrp = cgroup_parent(tcgrp)) {
  		cgrp->ancestor_ids[tcgrp->level] = tcgrp->id;
  
* Unmerged path Documentation/accounting/psi.txt
* Unmerged path include/linux/psi.h
* Unmerged path kernel/sched/psi.c
* Unmerged path Documentation/accounting/psi.txt
diff --git a/Documentation/admin-guide/cgroup-v2.rst b/Documentation/admin-guide/cgroup-v2.rst
index 677dc11da671..da41f68b9ea4 100644
--- a/Documentation/admin-guide/cgroup-v2.rst
+++ b/Documentation/admin-guide/cgroup-v2.rst
@@ -995,6 +995,12 @@ All time durations are in microseconds.
 	$PERIOD duration.  "max" for $MAX indicates no limit.  If only
 	one number is written, $MAX is updated.
 
+  cpu.pressure
+	A read-only nested-key file which exists on non-root cgroups.
+
+	Shows pressure stall information for CPU. See
+	Documentation/accounting/psi.txt for details.
+
 
 Memory
 ------
@@ -1282,6 +1288,12 @@ PAGE_SIZE multiple when read back.
 	higher than the limit for an extended period of time.  This
 	reduces the impact on the workload and memory management.
 
+  memory.pressure
+	A read-only nested-key file which exists on non-root cgroups.
+
+	Shows pressure stall information for memory. See
+	Documentation/accounting/psi.txt for details.
+
 
 Usage Guidelines
 ~~~~~~~~~~~~~~~~
@@ -1419,6 +1431,12 @@ IO Interface Files
 
 	  8:16 rbps=2097152 wbps=max riops=max wiops=max
 
+  io.pressure
+	A read-only nested-key file which exists on non-root cgroups.
+
+	Shows pressure stall information for IO. See
+	Documentation/accounting/psi.txt for details.
+
 
 Writeback
 ~~~~~~~~~
diff --git a/include/linux/cgroup-defs.h b/include/linux/cgroup-defs.h
index 2b1030ebe262..03355d7008ff 100644
--- a/include/linux/cgroup-defs.h
+++ b/include/linux/cgroup-defs.h
@@ -20,6 +20,7 @@
 #include <linux/u64_stats_sync.h>
 #include <linux/workqueue.h>
 #include <linux/bpf-cgroup.h>
+#include <linux/psi_types.h>
 
 #ifdef CONFIG_CGROUPS
 
@@ -442,6 +443,9 @@ struct cgroup {
 	/* used to schedule release agent */
 	struct work_struct release_agent_work;
 
+	/* used to track pressure stalls */
+	struct psi_group psi;
+
 	/* used to store eBPF programs */
 	struct cgroup_bpf bpf;
 
diff --git a/include/linux/cgroup.h b/include/linux/cgroup.h
index 0c4d56acfdca..4ab8a43afefe 100644
--- a/include/linux/cgroup.h
+++ b/include/linux/cgroup.h
@@ -629,6 +629,11 @@ static inline void pr_cont_cgroup_path(struct cgroup *cgrp)
 	pr_cont_kernfs_path(cgrp->kn);
 }
 
+static inline struct psi_group *cgroup_psi(struct cgroup *cgrp)
+{
+	return &cgrp->psi;
+}
+
 static inline void cgroup_init_kthreadd(void)
 {
 	/*
@@ -682,6 +687,16 @@ static inline union kernfs_node_id *cgroup_get_kernfs_id(struct cgroup *cgrp)
 	return NULL;
 }
 
+static inline struct cgroup *cgroup_parent(struct cgroup *cgrp)
+{
+	return NULL;
+}
+
+static inline struct psi_group *cgroup_psi(struct cgroup *cgrp)
+{
+	return NULL;
+}
+
 static inline bool task_under_cgroup_hierarchy(struct task_struct *task,
 					       struct cgroup *ancestor)
 {
* Unmerged path include/linux/psi.h
* Unmerged path init/Kconfig
* Unmerged path kernel/cgroup/cgroup.c
* Unmerged path kernel/sched/psi.c
