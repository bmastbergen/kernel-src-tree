PCI: Fix Switchtec DMA aliasing quirk dmesg noise

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Logan Gunthorpe <logang@deltatee.com>
commit 742bbe1ee35b5699c092541f97c7cec326556bb1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/742bbe1e.failed

Currently the Switchtec quirk runs on all endpoints in the switch,
including all the upstream and downstream ports.  These other functions do
not contain BARs, so the quirk fails when trying to map the BAR and prints
the error "Cannot iomap Switchtec device".  The user will see a few of
these useless and scary errors, one for each port in the switch.

At most, the quirk should only run on either a management endpoint
(PCI_CLASS_MEMORY_OTHER) or an NTB endpoint (PCI_CLASS_BRIDGE_OTHER).
However, the quirk is useless except in NTB applications, so we will
only run it when the class is PCI_CLASS_BRIDGE_OTHER.

Switch to using DECLARE_PCI_FIXUP_CLASS_FINAL and only match
PCI_CLASS_BRIDGE_OTHER.

	Reported-by: Stephen Bates <sbates@raithlin.com>
Fixes: ad281ecf1c7d ("PCI: Add DMA alias quirk for Microsemi Switchtec NTB")
	Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
[bhelgaas: split SWITCHTEC_QUIRK() introduction to separate patch]
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Cc: Doug Meyer <dmeyer@gigaio.com>
	Cc: Kurt Schwemmer <kurt.schwemmer@microsemi.com>
(cherry picked from commit 742bbe1ee35b5699c092541f97c7cec326556bb1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/quirks.c
diff --cc drivers/pci/quirks.c
index 06bbddc47908,4700d24e5d55..000000000000
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@@ -4972,124 -5059,37 +4972,130 @@@ static void quirk_switchtec_ntb_dma_ali
  	pci_iounmap(pdev, mmio);
  	pci_disable_device(pdev);
  }
++<<<<<<< HEAD
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8531,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8532,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8533,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8534,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8535,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8536,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8543,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8544,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8545,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8546,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8551,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8552,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8553,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8554,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8555,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8556,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8561,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8562,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8563,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8564,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8565,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8566,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8571,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8572,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8573,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8574,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8575,
 +			quirk_switchtec_ntb_dma_alias);
 +DECLARE_PCI_FIXUP_FINAL(PCI_VENDOR_ID_MICROSEMI, 0x8576,
 +			quirk_switchtec_ntb_dma_alias);
++=======
+ #define SWITCHTEC_QUIRK(vid) \
+ 	DECLARE_PCI_FIXUP_CLASS_FINAL(PCI_VENDOR_ID_MICROSEMI, vid, \
+ 		PCI_CLASS_BRIDGE_OTHER, 8, quirk_switchtec_ntb_dma_alias)
++>>>>>>> 742bbe1ee35b (PCI: Fix Switchtec DMA aliasing quirk dmesg noise)
 +
 +/*
 + * On certain Lenovo Thinkpad P50 SKUs, specifically those with a Nvidia
 + * Quadro M1000M, the BIOS will occasionally make the mistake of not resetting
 + * the nvidia GPU between reboots if the system is configured to use hybrid
 + * graphics mode. This results in the GPU being left in whatever state it was
 + * in during the previous boot which causes spurious interrupts from the GPU,
 + * which in turn cause us to disable the wrong IRQs and end up breaking the
 + * touchpad. Unsurprisingly, this also completely breaks nouveau.
 + *
 + * Luckily, it seems a simple reset of the PCI device for the nvidia GPU
 + * manages to bring the GPU back into a clean state and fix all of these
 + * issues. Additionally since the GPU will report NoReset+ when the machine is
 + * configured in Dedicated display mode, we don't need to worry about
 + * accidentally resetting the GPU when it's supposed to already be
 + * initialized.
 + */
 +static void
 +quirk_lenovo_thinkpad_p50_nvgpu_survives_reboot(struct pci_dev *pdev)
 +{
 +	void __iomem *map;
 +	int ret;
 +
 +	if (pdev->subsystem_vendor != PCI_VENDOR_ID_LENOVO ||
 +	    pdev->subsystem_device != 0x222e ||
 +	    !pdev->reset_fn)
 +		return;
 +
 +	/*
 +	 * If we can't enable the device's mmio space, it's probably not even
 +	 * initialized. This is fine, and means we can just skip the quirk
 +	 * entirely.
 +	 */
 +	if (pci_enable_device_mem(pdev)) {
 +		pci_dbg(pdev, "Can't enable device mem, no reset needed\n");
 +		return;
 +	}
 +
 +	/* Taken from drivers/gpu/drm/nouveau/engine/device/base.c */
 +	map = ioremap(pci_resource_start(pdev, 0), 0x102000);
 +	if (!map) {
 +		pci_err(pdev, "Can't map MMIO space, this is probably very bad\n");
 +		goto out_disable;
 +	}
 +
 +	/*
 +	 * Be extra careful, and make sure that the GPU firmware is posted
 +	 * before trying a reset
 +	 */
 +	if (ioread32(map + 0x2240c) & 0x2) {
 +		pci_info(pdev,
 +			 FW_BUG "GPU left initialized by EFI, resetting\n");
 +		ret = pci_reset_function(pdev);
 +		if (ret < 0)
 +			pci_err(pdev, "Failed to reset GPU: %d\n", ret);
 +	}
 +
 +	iounmap(map);
 +out_disable:
 +	pci_disable_device(pdev);
 +}
  
 -SWITCHTEC_QUIRK(0x8531);  /* PFX 24xG3 */
 -SWITCHTEC_QUIRK(0x8532);  /* PFX 32xG3 */
 -SWITCHTEC_QUIRK(0x8533);  /* PFX 48xG3 */
 -SWITCHTEC_QUIRK(0x8534);  /* PFX 64xG3 */
 -SWITCHTEC_QUIRK(0x8535);  /* PFX 80xG3 */
 -SWITCHTEC_QUIRK(0x8536);  /* PFX 96xG3 */
 -SWITCHTEC_QUIRK(0x8541);  /* PSX 24xG3 */
 -SWITCHTEC_QUIRK(0x8542);  /* PSX 32xG3 */
 -SWITCHTEC_QUIRK(0x8543);  /* PSX 48xG3 */
 -SWITCHTEC_QUIRK(0x8544);  /* PSX 64xG3 */
 -SWITCHTEC_QUIRK(0x8545);  /* PSX 80xG3 */
 -SWITCHTEC_QUIRK(0x8546);  /* PSX 96xG3 */
 -SWITCHTEC_QUIRK(0x8551);  /* PAX 24XG3 */
 -SWITCHTEC_QUIRK(0x8552);  /* PAX 32XG3 */
 -SWITCHTEC_QUIRK(0x8553);  /* PAX 48XG3 */
 -SWITCHTEC_QUIRK(0x8554);  /* PAX 64XG3 */
 -SWITCHTEC_QUIRK(0x8555);  /* PAX 80XG3 */
 -SWITCHTEC_QUIRK(0x8556);  /* PAX 96XG3 */
 -SWITCHTEC_QUIRK(0x8561);  /* PFXL 24XG3 */
 -SWITCHTEC_QUIRK(0x8562);  /* PFXL 32XG3 */
 -SWITCHTEC_QUIRK(0x8563);  /* PFXL 48XG3 */
 -SWITCHTEC_QUIRK(0x8564);  /* PFXL 64XG3 */
 -SWITCHTEC_QUIRK(0x8565);  /* PFXL 80XG3 */
 -SWITCHTEC_QUIRK(0x8566);  /* PFXL 96XG3 */
 -SWITCHTEC_QUIRK(0x8571);  /* PFXI 24XG3 */
 -SWITCHTEC_QUIRK(0x8572);  /* PFXI 32XG3 */
 -SWITCHTEC_QUIRK(0x8573);  /* PFXI 48XG3 */
 -SWITCHTEC_QUIRK(0x8574);  /* PFXI 64XG3 */
 -SWITCHTEC_QUIRK(0x8575);  /* PFXI 80XG3 */
 -SWITCHTEC_QUIRK(0x8576);  /* PFXI 96XG3 */
 +DECLARE_PCI_FIXUP_CLASS_FINAL(PCI_VENDOR_ID_NVIDIA, 0x13b1,
 +			      PCI_CLASS_DISPLAY_VGA, 8,
 +			      quirk_lenovo_thinkpad_p50_nvgpu_survives_reboot);
* Unmerged path drivers/pci/quirks.c
