net: hns3: fix netif_napi_del() not do problem when unloading

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Huazhong Tan <tanhuazhong@huawei.com>
commit e215278548f9ea412e2be794efa1c84c6817c657
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/e2152785.failed

When the driver is unloading, if a global reset occurs,
unmap_ring_from_vector() in the hns3_nic_uninit_vector_data() will
fail, and hns3_nic_uninit_vector_data() just return. There may be
some netif_napi_del() not be done.

Since hardware will unmap all ring while resetting, so
hns3_nic_uninit_vector_data() should ignore this error, and do the
rest uninitialization.

Fixes: 76ad4f0ee747 ("net: hns3: Add support of HNS3 Ethernet Driver for hip08 SoC")
	Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
	Signed-off-by: Peng Li <lipeng321@huawei.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e215278548f9ea412e2be794efa1c84c6817c657)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
diff --cc drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
index df37179cf65a,c546b874d659..000000000000
--- a/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
@@@ -2813,15 -3193,13 +2813,20 @@@ static void hns3_nic_uninit_vector_data
  	for (i = 0; i < priv->vector_num; i++) {
  		tqp_vector = &priv->tqp_vector[i];
  
++<<<<<<< HEAD
 +		ret = hns3_get_vector_ring_chain(tqp_vector,
 +						 &vector_ring_chain);
 +		if (ret)
 +			return ret;
++=======
+ 		if (!tqp_vector->rx_group.ring && !tqp_vector->tx_group.ring)
+ 			continue;
+ 
+ 		hns3_get_vector_ring_chain(tqp_vector, &vector_ring_chain);
++>>>>>>> e215278548f9 (net: hns3: fix netif_napi_del() not do problem when unloading)
  
- 		ret = h->ae_algo->ops->unmap_ring_from_vector(h,
+ 		h->ae_algo->ops->unmap_ring_from_vector(h,
  			tqp_vector->vector_irq, &vector_ring_chain);
- 		if (ret)
- 			return ret;
  
  		hns3_free_vector_ring_chain(tqp_vector, &vector_ring_chain);
  
@@@ -3240,8 -3680,11 +3243,8 @@@ static int hns3_client_init(struct hnae
  	return ret;
  
  out_reg_netdev_fail:
 -	hns3_uninit_phy(netdev);
 -out_init_phy:
 -	hns3_uninit_all_ring(priv);
  out_init_ring_data:
- 	(void)hns3_nic_uninit_vector_data(priv);
+ 	hns3_nic_uninit_vector_data(priv);
  out_init_vector_data:
  	hns3_nic_dealloc_vector_data(priv);
  out_alloc_vector_data:
@@@ -3261,11 -3704,22 +3264,17 @@@ static void hns3_client_uninit(struct h
  	if (netdev->reg_state != NETREG_UNINITIALIZED)
  		unregister_netdev(netdev);
  
 -	if (!test_and_clear_bit(HNS3_NIC_STATE_INITED, &priv->state)) {
 -		netdev_warn(netdev, "already uninitialized\n");
 -		goto out_netdev_free;
 -	}
 -
 -	hns3_del_all_fd_rules(netdev, true);
 -
  	hns3_force_clear_all_rx_ring(handle);
  
++<<<<<<< HEAD
 +	ret = hns3_nic_uninit_vector_data(priv);
 +	if (ret)
 +		netdev_err(netdev, "uninit vector error\n");
++=======
+ 	hns3_uninit_phy(netdev);
+ 
+ 	hns3_nic_uninit_vector_data(priv);
++>>>>>>> e215278548f9 (net: hns3: fix netif_napi_del() not do problem when unloading)
  
  	ret = hns3_nic_dealloc_vector_data(priv);
  	if (ret)
@@@ -3588,13 -4105,14 +3597,9 @@@ static int hns3_reset_notify_uninit_ene
  	struct hns3_nic_priv *priv = netdev_priv(netdev);
  	int ret;
  
 -	if (!test_bit(HNS3_NIC_STATE_INITED, &priv->state)) {
 -		netdev_warn(netdev, "already uninitialized\n");
 -		return 0;
 -	}
 -
  	hns3_force_clear_all_rx_ring(handle);
  
- 	ret = hns3_nic_uninit_vector_data(priv);
- 	if (ret) {
- 		netdev_err(netdev, "uninit vector error\n");
- 		return ret;
- 	}
+ 	hns3_nic_uninit_vector_data(priv);
  
  	hns3_store_coal(priv);
  
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3_enet.c
