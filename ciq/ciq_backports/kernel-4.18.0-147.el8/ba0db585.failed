ice: Add more validation in ice_vc_cfg_irq_map_msg

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Michal Swiatkowski <michal.swiatkowski@intel.com>
commit ba0db585bdb696d28bd6ec3ae9908d45c0bdeb37
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/ba0db585.failed

Add few checks to validate msg from iavf driver.

Test if we have got enough q_vectors allocated in VSI connected with VF.
Add masks for itr_indx and msix_indx to avoid writing to reserved fieldi
of QINT. Clear q_vector->num_ring_rx/tx, without it we can increment this
value every time we send irq map msg from VF. So after second call this
value will be incorrect.

Decrement num_vectors from msg, because last vector in iavf msg is misc
vector (we don't set map for it).

	Signed-off-by: Michal Swiatkowski <michal.swiatkowski@intel.com>
	Signed-off-by: Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit ba0db585bdb696d28bd6ec3ae9908d45c0bdeb37)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
#	drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index 3e0e04a561d0,caa00e8873ec..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -1827,13 -1885,13 +1829,19 @@@ void ice_vsi_cfg_msix(struct ice_vsi *v
  			u32 val;
  
  			if (vsi->type == ICE_VSI_VF)
- 				val = QINT_TQCTL_CAUSE_ENA_M |
- 				      (itr_idx << QINT_TQCTL_ITR_INDX_S)  |
- 				      ((i + 1) << QINT_TQCTL_MSIX_INDX_S);
+ 				val = QINT_TQCTL_CAUSE_ENA_M | itr_idx |
+ 				      (((i + 1) << QINT_TQCTL_MSIX_INDX_S) &
+ 				       QINT_TQCTL_MSIX_INDX_M);
  			else
++<<<<<<< HEAD
 +				val = QINT_TQCTL_CAUSE_ENA_M |
 +				      (itr_idx << QINT_TQCTL_ITR_INDX_S)  |
 +				      (vector << QINT_TQCTL_MSIX_INDX_S);
++=======
+ 				val = QINT_TQCTL_CAUSE_ENA_M | itr_idx |
+ 				      ((reg_idx << QINT_TQCTL_MSIX_INDX_S) &
+ 				       QINT_TQCTL_MSIX_INDX_M);
++>>>>>>> ba0db585bdb6 (ice: Add more validation in ice_vc_cfg_irq_map_msg)
  			wr32(hw, QINT_TQCTL(vsi->txq_map[txq]), val);
  			txq++;
  		}
@@@ -1843,13 -1903,13 +1853,19 @@@
  			u32 val;
  
  			if (vsi->type == ICE_VSI_VF)
- 				val = QINT_RQCTL_CAUSE_ENA_M |
- 				      (itr_idx << QINT_RQCTL_ITR_INDX_S)  |
- 				      ((i + 1) << QINT_RQCTL_MSIX_INDX_S);
+ 				val = QINT_RQCTL_CAUSE_ENA_M | itr_idx |
+ 					(((i + 1) << QINT_RQCTL_MSIX_INDX_S) &
+ 					 QINT_RQCTL_MSIX_INDX_M);
  			else
++<<<<<<< HEAD
 +				val = QINT_RQCTL_CAUSE_ENA_M |
 +				      (itr_idx << QINT_RQCTL_ITR_INDX_S)  |
 +				      (vector << QINT_RQCTL_MSIX_INDX_S);
++=======
+ 				val = QINT_RQCTL_CAUSE_ENA_M | itr_idx |
+ 					((reg_idx << QINT_RQCTL_MSIX_INDX_S) &
+ 					 QINT_RQCTL_MSIX_INDX_M);
++>>>>>>> ba0db585bdb6 (ice: Add more validation in ice_vc_cfg_irq_map_msg)
  			wr32(hw, QINT_RQCTL(vsi->rxq_map[rxq]), val);
  			rxq++;
  		}
diff --cc drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index 1a8c205aca82,a805cbdd69be..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@@ -1712,12 -1813,17 +1712,23 @@@ static int ice_vc_cfg_irq_map_msg(struc
  	struct virtchnl_vector_map *map;
  	struct ice_vsi *vsi = NULL;
  	struct ice_pf *pf = vf->pf;
 +	enum ice_status aq_ret = 0;
  	unsigned long qmap;
+ 	u16 num_q_vectors;
  	int i;
  
++<<<<<<< HEAD
 +	if (!test_bit(ICE_VF_STATE_ACTIVE, vf->vf_states)) {
 +		aq_ret = ICE_ERR_PARAM;
++=======
+ 	num_q_vectors = irqmap_info->num_vectors - ICE_NONQ_VECS_VF;
+ 	vsi = pf->vsi[vf->lan_vsi_idx];
+ 
+ 	if (!test_bit(ICE_VF_STATE_ACTIVE, vf->vf_states) ||
+ 	    !vsi || vsi->num_q_vectors < num_q_vectors ||
+ 	    irqmap_info->num_vectors == 0) {
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
++>>>>>>> ba0db585bdb6 (ice: Add more validation in ice_vc_cfg_irq_map_msg)
  		goto error_param;
  	}
  
@@@ -1733,36 -1841,26 +1746,35 @@@
  			goto error_param;
  		}
  
++<<<<<<< HEAD
 +		vsi = ice_find_vsi_from_id(vf->pf, vsi_id);
 +		if (!vsi) {
 +			aq_ret = ICE_ERR_PARAM;
 +			goto error_param;
 +		}
 +
++=======
++>>>>>>> ba0db585bdb6 (ice: Add more validation in ice_vc_cfg_irq_map_msg)
  		/* lookout for the invalid queue index */
  		qmap = map->rxq_map;
+ 		q_vector->num_ring_rx = 0;
  		for_each_set_bit(vsi_q_id, &qmap, ICE_MAX_BASE_QS_PER_VF) {
- 			struct ice_q_vector *q_vector;
- 
  			if (!ice_vc_isvalid_q_id(vf, vsi_id, vsi_q_id)) {
 -				v_ret = VIRTCHNL_STATUS_ERR_PARAM;
 +				aq_ret = ICE_ERR_PARAM;
  				goto error_param;
  			}
- 			q_vector = vsi->q_vectors[i];
  			q_vector->num_ring_rx++;
  			q_vector->rx.itr_idx = map->rxitr_idx;
  			vsi->rx_rings[vsi_q_id]->q_vector = q_vector;
  		}
  
  		qmap = map->txq_map;
+ 		q_vector->num_ring_tx = 0;
  		for_each_set_bit(vsi_q_id, &qmap, ICE_MAX_BASE_QS_PER_VF) {
- 			struct ice_q_vector *q_vector;
- 
  			if (!ice_vc_isvalid_q_id(vf, vsi_id, vsi_q_id)) {
 -				v_ret = VIRTCHNL_STATUS_ERR_PARAM;
 +				aq_ret = ICE_ERR_PARAM;
  				goto error_param;
  			}
- 			q_vector = vsi->q_vectors[i];
  			q_vector->num_ring_tx++;
  			q_vector->tx.itr_idx = map->txitr_idx;
  			vsi->tx_rings[vsi_q_id]->q_vector = q_vector;
diff --git a/drivers/net/ethernet/intel/ice/ice.h b/drivers/net/ethernet/intel/ice/ice.h
index 109d42df49ad..ce37da599b73 100644
--- a/drivers/net/ethernet/intel/ice/ice.h
+++ b/drivers/net/ethernet/intel/ice/ice.h
@@ -83,6 +83,8 @@ extern const char ice_drv_ver[];
 #define ICE_MAX_QS_PER_VF		256
 #define ICE_MIN_QS_PER_VF		1
 #define ICE_DFLT_QS_PER_VF		4
+#define ICE_NONQ_VECS_VF		1
+#define ICE_MAX_SCATTER_QS_PER_VF	16
 #define ICE_MAX_BASE_QS_PER_VF		16
 #define ICE_MAX_INTR_PER_VF		65
 #define ICE_MIN_INTR_PER_VF		(ICE_MIN_QS_PER_VF + 1)
diff --git a/drivers/net/ethernet/intel/ice/ice_hw_autogen.h b/drivers/net/ethernet/intel/ice/ice_hw_autogen.h
index 24ec3f5f0d2b..c3ecbc704534 100644
--- a/drivers/net/ethernet/intel/ice/ice_hw_autogen.h
+++ b/drivers/net/ethernet/intel/ice/ice_hw_autogen.h
@@ -152,11 +152,15 @@
 #define PFINT_OICR_ENA				0x0016C900
 #define QINT_RQCTL(_QRX)			(0x00150000 + ((_QRX) * 4))
 #define QINT_RQCTL_MSIX_INDX_S			0
+#define QINT_RQCTL_MSIX_INDX_M			ICE_M(0x7FF, 0)
 #define QINT_RQCTL_ITR_INDX_S			11
+#define QINT_RQCTL_ITR_INDX_M			ICE_M(0x3, 11)
 #define QINT_RQCTL_CAUSE_ENA_M			BIT(30)
 #define QINT_TQCTL(_DBQM)			(0x00140000 + ((_DBQM) * 4))
 #define QINT_TQCTL_MSIX_INDX_S			0
+#define QINT_TQCTL_MSIX_INDX_M			ICE_M(0x7FF, 0)
 #define QINT_TQCTL_ITR_INDX_S			11
+#define QINT_TQCTL_ITR_INDX_M			ICE_M(0x3, 11)
 #define QINT_TQCTL_CAUSE_ENA_M			BIT(30)
 #define VPINT_ALLOC(_VF)			(0x001D1000 + ((_VF) * 4))
 #define VPINT_ALLOC_FIRST_S			0
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
