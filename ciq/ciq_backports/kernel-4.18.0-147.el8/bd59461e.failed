RDMA/qedr: Initialize ib_device_ops struct

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Kamal Heib <kamalheib1@gmail.com>
commit bd59461e57b4163dbba8aaa131a6c2a61e1bdaab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/bd59461e.failed

Initialize ib_device_ops with the supported operations using
ib_set_device_ops().

	Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit bd59461e57b4163dbba8aaa131a6c2a61e1bdaab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/qedr/main.c
diff --cc drivers/infiniband/hw/qedr/main.c
index ad22b32bbd9c,75940e2a8791..000000000000
--- a/drivers/infiniband/hw/qedr/main.c
+++ b/drivers/infiniband/hw/qedr/main.c
@@@ -133,6 -133,38 +133,41 @@@ static int qedr_iw_port_immutable(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /* QEDR sysfs interface */
+ static ssize_t hw_rev_show(struct device *device, struct device_attribute *attr,
+ 			   char *buf)
+ {
+ 	struct qedr_dev *dev = dev_get_drvdata(device);
+ 
+ 	return scnprintf(buf, PAGE_SIZE, "0x%x\n", dev->pdev->vendor);
+ }
+ static DEVICE_ATTR_RO(hw_rev);
+ 
+ static ssize_t hca_type_show(struct device *device,
+ 			     struct device_attribute *attr, char *buf)
+ {
+ 	return scnprintf(buf, PAGE_SIZE, "%s\n", "HCA_TYPE_TO_SET");
+ }
+ static DEVICE_ATTR_RO(hca_type);
+ 
+ static struct attribute *qedr_attributes[] = {
+ 	&dev_attr_hw_rev.attr,
+ 	&dev_attr_hca_type.attr,
+ 	NULL
+ };
+ 
+ static const struct attribute_group qedr_attr_group = {
+ 	.attrs = qedr_attributes,
+ };
+ 
+ static const struct ib_device_ops qedr_iw_dev_ops = {
+ 	.get_port_immutable = qedr_iw_port_immutable,
+ 	.query_gid = qedr_iw_query_gid,
+ };
+ 
++>>>>>>> bd59461e57b4 (RDMA/qedr: Initialize ib_device_ops struct)
  static int qedr_iw_register_device(struct qedr_dev *dev)
  {
  	dev->ibdev.node_type = RDMA_NODE_RNIC;
@@@ -207,54 -284,13 +284,61 @@@ static int qedr_register_device(struct 
  
  	dev->ibdev.phys_port_cnt = 1;
  	dev->ibdev.num_comp_vectors = dev->num_cnq;
++<<<<<<< HEAD
 +
 +	dev->ibdev.query_device = qedr_query_device;
 +	dev->ibdev.query_port = qedr_query_port;
 +	dev->ibdev.modify_port = qedr_modify_port;
 +
 +	dev->ibdev.alloc_ucontext = qedr_alloc_ucontext;
 +	dev->ibdev.dealloc_ucontext = qedr_dealloc_ucontext;
 +	dev->ibdev.mmap = qedr_mmap;
 +
 +	dev->ibdev.alloc_pd = qedr_alloc_pd;
 +	dev->ibdev.dealloc_pd = qedr_dealloc_pd;
 +
 +	dev->ibdev.create_cq = qedr_create_cq;
 +	dev->ibdev.destroy_cq = qedr_destroy_cq;
 +	dev->ibdev.resize_cq = qedr_resize_cq;
 +	dev->ibdev.req_notify_cq = qedr_arm_cq;
 +
 +	dev->ibdev.create_qp = qedr_create_qp;
 +	dev->ibdev.modify_qp = qedr_modify_qp;
 +	dev->ibdev.query_qp = qedr_query_qp;
 +	dev->ibdev.destroy_qp = qedr_destroy_qp;
 +
 +	dev->ibdev.query_pkey = qedr_query_pkey;
 +
 +	dev->ibdev.create_ah = qedr_create_ah;
 +	dev->ibdev.destroy_ah = qedr_destroy_ah;
 +
 +	dev->ibdev.get_dma_mr = qedr_get_dma_mr;
 +	dev->ibdev.dereg_mr = qedr_dereg_mr;
 +	dev->ibdev.reg_user_mr = qedr_reg_user_mr;
 +	dev->ibdev.alloc_mr = qedr_alloc_mr;
 +	dev->ibdev.map_mr_sg = qedr_map_mr_sg;
 +
 +	dev->ibdev.poll_cq = qedr_poll_cq;
 +	dev->ibdev.post_send = qedr_post_send;
 +	dev->ibdev.post_recv = qedr_post_recv;
 +
 +	dev->ibdev.process_mad = qedr_process_mad;
 +
 +	dev->ibdev.get_netdev = qedr_get_netdev;
 +
 +	dev->ibdev.dev.parent = &dev->pdev->dev;
 +
 +	dev->ibdev.get_link_layer = qedr_link_layer;
 +	dev->ibdev.get_dev_fw_str = qedr_get_dev_fw_str;
++=======
+ 	dev->ibdev.dev.parent = &dev->pdev->dev;
+ 
+ 	rdma_set_device_sysfs_group(&dev->ibdev, &qedr_attr_group);
+ 	ib_set_device_ops(&dev->ibdev, &qedr_dev_ops);
++>>>>>>> bd59461e57b4 (RDMA/qedr: Initialize ib_device_ops struct)
  
  	dev->ibdev.driver_id = RDMA_DRIVER_QEDR;
 -	return ib_register_device(&dev->ibdev, "qedr%d", NULL);
 +	return ib_register_device(&dev->ibdev, NULL);
  }
  
  /* This function allocates fast-path status block memory */
* Unmerged path drivers/infiniband/hw/qedr/main.c
