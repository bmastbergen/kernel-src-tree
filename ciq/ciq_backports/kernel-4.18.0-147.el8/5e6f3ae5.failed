regulator: fixed: Let core handle GPIO descriptor

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [regulator] ALSA: regulator: fixed: Let core handle GPIO descriptor (Jaroslav Kysela) [1683051]
Rebuild_FUZZ: 94.23%
commit-author Linus Walleij <linus.walleij@linaro.org>
commit 5e6f3ae5c13b12ecd440da2f511fc5fd3c8de520
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/5e6f3ae5.failed

Use the gpiod_get() rather than the devm_* version so that the
regulator core can handle the lifecycle of these descriptors.

Fixes: efdfeb079cc3 ("regulator: fixed: Convert to use GPIO descriptor only")
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
	Reviewed-by: Marek Szyprowski <m.szyprowski@samsung.com>
	Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
	Reviewed-by: Charles Keepax <ckeepax@opensource.cirrus.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 5e6f3ae5c13b12ecd440da2f511fc5fd3c8de520)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/regulator/fixed.c
diff --cc drivers/regulator/fixed.c
index d68ff65a5adc,9abdb9130766..000000000000
--- a/drivers/regulator/fixed.c
+++ b/drivers/regulator/fixed.c
@@@ -163,17 -154,42 +163,47 @@@ static int reg_fixed_voltage_probe(stru
  	cfg.ena_gpio_invert = !config->enable_high;
  	if (config->enabled_at_boot) {
  		if (config->enable_high)
 -			gflags = GPIOD_OUT_HIGH;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_HIGH;
  		else
 -			gflags = GPIOD_OUT_LOW;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_LOW;
  	} else {
  		if (config->enable_high)
 -			gflags = GPIOD_OUT_LOW;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_LOW;
  		else
 -			gflags = GPIOD_OUT_HIGH;
 +			cfg.ena_gpio_flags |= GPIOF_OUT_INIT_HIGH;
  	}
++<<<<<<< HEAD
 +	if (config->gpio_is_open_drain)
 +		cfg.ena_gpio_flags |= GPIOF_OPEN_DRAIN;
++=======
+ 	if (config->gpio_is_open_drain) {
+ 		if (gflags == GPIOD_OUT_HIGH)
+ 			gflags = GPIOD_OUT_HIGH_OPEN_DRAIN;
+ 		else
+ 			gflags = GPIOD_OUT_LOW_OPEN_DRAIN;
+ 	}
+ 
+ 	/*
+ 	 * Some fixed regulators share the enable line between two
+ 	 * regulators which makes it necessary to get a handle on the
+ 	 * same descriptor for two different consumers. This will get
+ 	 * the GPIO descriptor, but only the first call will initialize
+ 	 * it so any flags such as inversion or open drain will only
+ 	 * be set up by the first caller and assumed identical on the
+ 	 * next caller.
+ 	 *
+ 	 * FIXME: find a better way to deal with this.
+ 	 */
+ 	gflags |= GPIOD_FLAGS_BIT_NONEXCLUSIVE;
+ 
+ 	/*
+ 	 * Do not use devm* here: the regulator core takes over the
+ 	 * lifecycle management of the GPIO descriptor.
+ 	 */
+ 	cfg.ena_gpiod = gpiod_get_optional(&pdev->dev, NULL, gflags);
+ 	if (IS_ERR(cfg.ena_gpiod))
+ 		return PTR_ERR(cfg.ena_gpiod);
++>>>>>>> 5e6f3ae5c13b (regulator: fixed: Let core handle GPIO descriptor)
  
  	cfg.dev = &pdev->dev;
  	cfg.init_data = config->init_data;
* Unmerged path drivers/regulator/fixed.c
