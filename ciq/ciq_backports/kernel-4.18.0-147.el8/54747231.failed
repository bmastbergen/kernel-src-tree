RDMA: Introduce and use rdma_device_to_ibdev()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Parav Pandit <parav@mellanox.com>
commit 54747231150f0dddf68f2ee29ec2970fcc433909
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/54747231.failed

Introduce and use rdma_device_to_ibdev() API for those drivers which are
registering one sysfs group and also use in ib_core.

In subsequent patch, device->provider_ibdev one-to-one mapping is no
longer holds true during accessing sysfs entries.
Therefore, introduce an API rdma_device_to_ibdev() that provides such
information.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 54747231150f0dddf68f2ee29ec2970fcc433909)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/bnxt_re/main.c
#	drivers/infiniband/hw/ocrdma/ocrdma_main.c
#	drivers/infiniband/hw/qedr/main.c
#	include/rdma/ib_verbs.h
diff --cc drivers/infiniband/hw/bnxt_re/main.c
index 66b9f73ffb1d,16eecfa5882c..000000000000
--- a/drivers/infiniband/hw/bnxt_re/main.c
+++ b/drivers/infiniband/hw/bnxt_re/main.c
@@@ -559,6 -535,36 +559,39 @@@ static struct bnxt_en_dev *bnxt_re_dev_
  	return en_dev;
  }
  
++<<<<<<< HEAD
++=======
+ static ssize_t hw_rev_show(struct device *device, struct device_attribute *attr,
+ 			   char *buf)
+ {
+ 	struct bnxt_re_dev *rdev =
+ 		rdma_device_to_drv_device(device, struct bnxt_re_dev, ibdev);
+ 
+ 	return scnprintf(buf, PAGE_SIZE, "0x%x\n", rdev->en_dev->pdev->vendor);
+ }
+ static DEVICE_ATTR_RO(hw_rev);
+ 
+ static ssize_t hca_type_show(struct device *device,
+ 			     struct device_attribute *attr, char *buf)
+ {
+ 	struct bnxt_re_dev *rdev =
+ 		rdma_device_to_drv_device(device, struct bnxt_re_dev, ibdev);
+ 
+ 	return scnprintf(buf, PAGE_SIZE, "%s\n", rdev->ibdev.node_desc);
+ }
+ static DEVICE_ATTR_RO(hca_type);
+ 
+ static struct attribute *bnxt_re_attributes[] = {
+ 	&dev_attr_hw_rev.attr,
+ 	&dev_attr_hca_type.attr,
+ 	NULL
+ };
+ 
+ static const struct attribute_group bnxt_re_dev_attr_group = {
+ 	.attrs = bnxt_re_attributes,
+ };
+ 
++>>>>>>> 54747231150f (RDMA: Introduce and use rdma_device_to_ibdev())
  static void bnxt_re_unregister_ib(struct bnxt_re_dev *rdev)
  {
  	ib_unregister_device(&rdev->ibdev);
diff --cc drivers/infiniband/hw/ocrdma/ocrdma_main.c
index 00d18c507dda,b0491b9ecfe4..000000000000
--- a/drivers/infiniband/hw/ocrdma/ocrdma_main.c
+++ b/drivers/infiniband/hw/ocrdma/ocrdma_main.c
@@@ -114,9 -114,83 +114,87 @@@ static void get_dev_fw_str(struct ib_de
  	snprintf(str, IB_FW_VERSION_NAME_MAX, "%s", &dev->attr.fw_ver[0]);
  }
  
++<<<<<<< HEAD
++=======
+ /* OCRDMA sysfs interface */
+ static ssize_t hw_rev_show(struct device *device,
+ 			   struct device_attribute *attr, char *buf)
+ {
+ 	struct ocrdma_dev *dev =
+ 		rdma_device_to_drv_device(device, struct ocrdma_dev, ibdev);
+ 
+ 	return scnprintf(buf, PAGE_SIZE, "0x%x\n", dev->nic_info.pdev->vendor);
+ }
+ static DEVICE_ATTR_RO(hw_rev);
+ 
+ static ssize_t hca_type_show(struct device *device,
+ 			     struct device_attribute *attr, char *buf)
+ {
+ 	struct ocrdma_dev *dev =
+ 		rdma_device_to_drv_device(device, struct ocrdma_dev, ibdev);
+ 
+ 	return scnprintf(buf, PAGE_SIZE, "%s\n", &dev->model_number[0]);
+ }
+ static DEVICE_ATTR_RO(hca_type);
+ 
+ static struct attribute *ocrdma_attributes[] = {
+ 	&dev_attr_hw_rev.attr,
+ 	&dev_attr_hca_type.attr,
+ 	NULL
+ };
+ 
+ static const struct attribute_group ocrdma_attr_group = {
+ 	.attrs = ocrdma_attributes,
+ };
+ 
+ static const struct ib_device_ops ocrdma_dev_ops = {
+ 	.alloc_mr = ocrdma_alloc_mr,
+ 	.alloc_pd = ocrdma_alloc_pd,
+ 	.alloc_ucontext = ocrdma_alloc_ucontext,
+ 	.create_ah = ocrdma_create_ah,
+ 	.create_cq = ocrdma_create_cq,
+ 	.create_qp = ocrdma_create_qp,
+ 	.dealloc_pd = ocrdma_dealloc_pd,
+ 	.dealloc_ucontext = ocrdma_dealloc_ucontext,
+ 	.dereg_mr = ocrdma_dereg_mr,
+ 	.destroy_ah = ocrdma_destroy_ah,
+ 	.destroy_cq = ocrdma_destroy_cq,
+ 	.destroy_qp = ocrdma_destroy_qp,
+ 	.get_dev_fw_str = get_dev_fw_str,
+ 	.get_dma_mr = ocrdma_get_dma_mr,
+ 	.get_link_layer = ocrdma_link_layer,
+ 	.get_netdev = ocrdma_get_netdev,
+ 	.get_port_immutable = ocrdma_port_immutable,
+ 	.map_mr_sg = ocrdma_map_mr_sg,
+ 	.mmap = ocrdma_mmap,
+ 	.modify_port = ocrdma_modify_port,
+ 	.modify_qp = ocrdma_modify_qp,
+ 	.poll_cq = ocrdma_poll_cq,
+ 	.post_recv = ocrdma_post_recv,
+ 	.post_send = ocrdma_post_send,
+ 	.process_mad = ocrdma_process_mad,
+ 	.query_ah = ocrdma_query_ah,
+ 	.query_device = ocrdma_query_device,
+ 	.query_pkey = ocrdma_query_pkey,
+ 	.query_port = ocrdma_query_port,
+ 	.query_qp = ocrdma_query_qp,
+ 	.reg_user_mr = ocrdma_reg_user_mr,
+ 	.req_notify_cq = ocrdma_arm_cq,
+ 	.resize_cq = ocrdma_resize_cq,
+ };
+ 
+ static const struct ib_device_ops ocrdma_dev_srq_ops = {
+ 	.create_srq = ocrdma_create_srq,
+ 	.destroy_srq = ocrdma_destroy_srq,
+ 	.modify_srq = ocrdma_modify_srq,
+ 	.post_srq_recv = ocrdma_post_srq_recv,
+ 	.query_srq = ocrdma_query_srq,
+ };
+ 
++>>>>>>> 54747231150f (RDMA: Introduce and use rdma_device_to_ibdev())
  static int ocrdma_register_device(struct ocrdma_dev *dev)
  {
 +	strlcpy(dev->ibdev.name, "ocrdma%d", IB_DEVICE_NAME_MAX);
  	ocrdma_get_guid(dev, (u8 *)&dev->ibdev.node_guid);
  	BUILD_BUG_ON(sizeof(OCRDMA_NODE_DESC) > IB_DEVICE_NODE_DESC_MAX);
  	memcpy(dev->ibdev.node_desc, OCRDMA_NODE_DESC,
diff --cc drivers/infiniband/hw/qedr/main.c
index d1fc9ba8e85c,f85e72b65a10..000000000000
--- a/drivers/infiniband/hw/qedr/main.c
+++ b/drivers/infiniband/hw/qedr/main.c
@@@ -133,6 -133,39 +133,42 @@@ static int qedr_iw_port_immutable(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /* QEDR sysfs interface */
+ static ssize_t hw_rev_show(struct device *device, struct device_attribute *attr,
+ 			   char *buf)
+ {
+ 	struct qedr_dev *dev =
+ 		rdma_device_to_drv_device(device, struct qedr_dev, ibdev);
+ 
+ 	return scnprintf(buf, PAGE_SIZE, "0x%x\n", dev->pdev->vendor);
+ }
+ static DEVICE_ATTR_RO(hw_rev);
+ 
+ static ssize_t hca_type_show(struct device *device,
+ 			     struct device_attribute *attr, char *buf)
+ {
+ 	return scnprintf(buf, PAGE_SIZE, "%s\n", "HCA_TYPE_TO_SET");
+ }
+ static DEVICE_ATTR_RO(hca_type);
+ 
+ static struct attribute *qedr_attributes[] = {
+ 	&dev_attr_hw_rev.attr,
+ 	&dev_attr_hca_type.attr,
+ 	NULL
+ };
+ 
+ static const struct attribute_group qedr_attr_group = {
+ 	.attrs = qedr_attributes,
+ };
+ 
+ static const struct ib_device_ops qedr_iw_dev_ops = {
+ 	.get_port_immutable = qedr_iw_port_immutable,
+ 	.query_gid = qedr_iw_query_gid,
+ };
+ 
++>>>>>>> 54747231150f (RDMA: Introduce and use rdma_device_to_ibdev())
  static int qedr_iw_register_device(struct qedr_dev *dev)
  {
  	dev->ibdev.node_type = RDMA_NODE_RNIC;
diff --cc include/rdma/ib_verbs.h
index 7d63f1ad4c1e,94b6e1dd4dab..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -4437,4 -4219,49 +4437,52 @@@ int rdma_init_netdev(struct ib_device *
  		     void (*setup)(struct net_device *),
  		     struct net_device *netdev);
  
++<<<<<<< HEAD
++=======
+ /**
+  * rdma_set_device_sysfs_group - Set device attributes group to have
+  *				 driver specific sysfs entries at
+  *				 for infiniband class.
+  *
+  * @device:	device pointer for which attributes to be created
+  * @group:	Pointer to group which should be added when device
+  *		is registered with sysfs.
+  * rdma_set_device_sysfs_group() allows existing drivers to expose one
+  * group per device to have sysfs attributes.
+  *
+  * NOTE: New drivers should not make use of this API; instead new device
+  * parameter should be exposed via netlink command. This API and mechanism
+  * exist only for existing drivers.
+  */
+ static inline void
+ rdma_set_device_sysfs_group(struct ib_device *dev,
+ 			    const struct attribute_group *group)
+ {
+ 	dev->groups[1] = group;
+ }
+ 
+ /**
+  * rdma_device_to_ibdev - Get ib_device pointer from device pointer
+  *
+  * @device:	device pointer for which ib_device pointer to retrieve
+  *
+  * rdma_device_to_ibdev() retrieves ib_device pointer from device.
+  *
+  */
+ static inline struct ib_device *rdma_device_to_ibdev(struct device *device)
+ {
+ 	return container_of(device, struct ib_device, dev);
+ }
+ 
+ /**
+  * rdma_device_to_drv_device - Helper macro to reach back to driver's
+  *			       ib_device holder structure from device pointer.
+  *
+  * NOTE: New drivers should not make use of this API; This API is only for
+  * existing drivers who have exposed sysfs entries using
+  * rdma_set_device_sysfs_group().
+  */
+ #define rdma_device_to_drv_device(dev, drv_dev_struct, ibdev_member)           \
+ 	container_of(rdma_device_to_ibdev(dev), drv_dev_struct, ibdev_member)
++>>>>>>> 54747231150f (RDMA: Introduce and use rdma_device_to_ibdev())
  #endif /* IB_VERBS_H */
diff --git a/drivers/infiniband/core/device.c b/drivers/infiniband/core/device.c
index 47f3eaabe6fa..10c5d99a4fc8 100644
--- a/drivers/infiniband/core/device.c
+++ b/drivers/infiniband/core/device.c
@@ -282,8 +282,6 @@ struct ib_device *_ib_alloc_device(size_t size)
 	device->dev.class = &ib_class;
 	device_initialize(&device->dev);
 
-	dev_set_drvdata(&device->dev, device);
-
 	INIT_LIST_HEAD(&device->event_handler_list);
 	spin_lock_init(&device->event_handler_lock);
 	rwlock_init(&device->client_data_lock);
diff --git a/drivers/infiniband/core/sysfs.c b/drivers/infiniband/core/sysfs.c
index 721c1f623a2f..b59e29401124 100644
--- a/drivers/infiniband/core/sysfs.c
+++ b/drivers/infiniband/core/sysfs.c
@@ -1189,7 +1189,7 @@ static int add_port(struct ib_device *device, int port_num,
 static ssize_t show_node_type(struct device *device,
 			      struct device_attribute *attr, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = rdma_device_to_ibdev(device);
 
 	switch (dev->node_type) {
 	case RDMA_NODE_IB_CA:	  return sprintf(buf, "%d: CA\n", dev->node_type);
@@ -1205,7 +1205,7 @@ static ssize_t show_node_type(struct device *device,
 static ssize_t show_sys_image_guid(struct device *device,
 				   struct device_attribute *dev_attr, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = rdma_device_to_ibdev(device);
 
 	return sprintf(buf, "%04x:%04x:%04x:%04x\n",
 		       be16_to_cpu(((__be16 *) &dev->attrs.sys_image_guid)[0]),
@@ -1217,7 +1217,7 @@ static ssize_t show_sys_image_guid(struct device *device,
 static ssize_t show_node_guid(struct device *device,
 			      struct device_attribute *attr, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = rdma_device_to_ibdev(device);
 
 	return sprintf(buf, "%04x:%04x:%04x:%04x\n",
 		       be16_to_cpu(((__be16 *) &dev->node_guid)[0]),
@@ -1229,7 +1229,7 @@ static ssize_t show_node_guid(struct device *device,
 static ssize_t show_node_desc(struct device *device,
 			      struct device_attribute *attr, char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = rdma_device_to_ibdev(device);
 
 	return sprintf(buf, "%.64s\n", dev->node_desc);
 }
@@ -1238,7 +1238,7 @@ static ssize_t set_node_desc(struct device *device,
 			     struct device_attribute *attr,
 			     const char *buf, size_t count)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = rdma_device_to_ibdev(device);
 	struct ib_device_modify desc = {};
 	int ret;
 
@@ -1256,7 +1256,7 @@ static ssize_t set_node_desc(struct device *device,
 static ssize_t show_fw_ver(struct device *device, struct device_attribute *attr,
 			   char *buf)
 {
-	struct ib_device *dev = container_of(device, struct ib_device, dev);
+	struct ib_device *dev = rdma_device_to_ibdev(device);
 
 	ib_get_device_fw_str(dev, buf);
 	strlcat(buf, "\n", IB_FW_VERSION_NAME_MAX);
* Unmerged path drivers/infiniband/hw/bnxt_re/main.c
diff --git a/drivers/infiniband/hw/cxgb3/iwch_provider.c b/drivers/infiniband/hw/cxgb3/iwch_provider.c
index 68bc2f9a532f..68455097a24e 100644
--- a/drivers/infiniband/hw/cxgb3/iwch_provider.c
+++ b/drivers/infiniband/hw/cxgb3/iwch_provider.c
@@ -1166,8 +1166,9 @@ static int iwch_query_port(struct ib_device *ibdev,
 static ssize_t show_rev(struct device *dev, struct device_attribute *attr,
 			char *buf)
 {
-	struct iwch_dev *iwch_dev = container_of(dev, struct iwch_dev,
-						 ibdev.dev);
+	struct iwch_dev *iwch_dev =
+			rdma_device_to_drv_device(dev, struct iwch_dev, ibdev);
+
 	pr_debug("%s dev 0x%p\n", __func__, dev);
 	return sprintf(buf, "%d\n", iwch_dev->rdev.t3cdev_p->type);
 }
@@ -1175,8 +1176,8 @@ static ssize_t show_rev(struct device *dev, struct device_attribute *attr,
 static ssize_t show_hca(struct device *dev, struct device_attribute *attr,
 			char *buf)
 {
-	struct iwch_dev *iwch_dev = container_of(dev, struct iwch_dev,
-						 ibdev.dev);
+	struct iwch_dev *iwch_dev =
+			rdma_device_to_drv_device(dev, struct iwch_dev, ibdev);
 	struct ethtool_drvinfo info;
 	struct net_device *lldev = iwch_dev->rdev.t3cdev_p->lldev;
 
@@ -1188,8 +1189,9 @@ static ssize_t show_hca(struct device *dev, struct device_attribute *attr,
 static ssize_t show_board(struct device *dev, struct device_attribute *attr,
 			  char *buf)
 {
-	struct iwch_dev *iwch_dev = container_of(dev, struct iwch_dev,
-						 ibdev.dev);
+	struct iwch_dev *iwch_dev =
+			rdma_device_to_drv_device(dev, struct iwch_dev, ibdev);
+
 	pr_debug("%s dev 0x%p\n", __func__, dev);
 	return sprintf(buf, "%x.%x\n", iwch_dev->rdev.rnic_info.pdev->vendor,
 		       iwch_dev->rdev.rnic_info.pdev->device);
diff --git a/drivers/infiniband/hw/cxgb4/provider.c b/drivers/infiniband/hw/cxgb4/provider.c
index 61b8bdb9423d..149cf0d4eeff 100644
--- a/drivers/infiniband/hw/cxgb4/provider.c
+++ b/drivers/infiniband/hw/cxgb4/provider.c
@@ -408,8 +408,9 @@ static int c4iw_query_port(struct ib_device *ibdev, u8 port,
 static ssize_t show_rev(struct device *dev, struct device_attribute *attr,
 			char *buf)
 {
-	struct c4iw_dev *c4iw_dev = container_of(dev, struct c4iw_dev,
-						 ibdev.dev);
+	struct c4iw_dev *c4iw_dev =
+			rdma_device_to_drv_device(dev, struct c4iw_dev, ibdev);
+
 	pr_debug("dev 0x%p\n", dev);
 	return sprintf(buf, "%d\n",
 		       CHELSIO_CHIP_RELEASE(c4iw_dev->rdev.lldi.adapter_type));
@@ -418,8 +419,8 @@ static ssize_t show_rev(struct device *dev, struct device_attribute *attr,
 static ssize_t show_hca(struct device *dev, struct device_attribute *attr,
 			char *buf)
 {
-	struct c4iw_dev *c4iw_dev = container_of(dev, struct c4iw_dev,
-						 ibdev.dev);
+	struct c4iw_dev *c4iw_dev =
+			rdma_device_to_drv_device(dev, struct c4iw_dev, ibdev);
 	struct ethtool_drvinfo info;
 	struct net_device *lldev = c4iw_dev->rdev.lldi.ports[0];
 
@@ -431,8 +432,9 @@ static ssize_t show_hca(struct device *dev, struct device_attribute *attr,
 static ssize_t show_board(struct device *dev, struct device_attribute *attr,
 			  char *buf)
 {
-	struct c4iw_dev *c4iw_dev = container_of(dev, struct c4iw_dev,
-						 ibdev.dev);
+	struct c4iw_dev *c4iw_dev =
+			rdma_device_to_drv_device(dev, struct c4iw_dev, ibdev);
+
 	pr_debug("dev 0x%p\n", dev);
 	return sprintf(buf, "%x.%x\n", c4iw_dev->rdev.lldi.pdev->vendor,
 		       c4iw_dev->rdev.lldi.pdev->device);
diff --git a/drivers/infiniband/hw/hfi1/sysfs.c b/drivers/infiniband/hw/hfi1/sysfs.c
index 25e867393463..067da9bee595 100644
--- a/drivers/infiniband/hw/hfi1/sysfs.c
+++ b/drivers/infiniband/hw/hfi1/sysfs.c
@@ -498,7 +498,7 @@ static ssize_t show_rev(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 
 	return sprintf(buf, "%x\n", dd_from_dev(dev)->minrev);
 }
@@ -507,7 +507,7 @@ static ssize_t show_hfi(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 	struct hfi1_devdata *dd = dd_from_dev(dev);
 	int ret;
 
@@ -522,7 +522,7 @@ static ssize_t show_boardversion(struct device *device,
 				 struct device_attribute *attr, char *buf)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 	struct hfi1_devdata *dd = dd_from_dev(dev);
 
 	/* The string printed here is already newline-terminated. */
@@ -533,7 +533,7 @@ static ssize_t show_nctxts(struct device *device,
 			   struct device_attribute *attr, char *buf)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 	struct hfi1_devdata *dd = dd_from_dev(dev);
 
 	/*
@@ -551,7 +551,7 @@ static ssize_t show_nfreectxts(struct device *device,
 			       struct device_attribute *attr, char *buf)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 	struct hfi1_devdata *dd = dd_from_dev(dev);
 
 	/* Return the number of free user ports (contexts) available. */
@@ -562,7 +562,7 @@ static ssize_t show_serial(struct device *device,
 			   struct device_attribute *attr, char *buf)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 	struct hfi1_devdata *dd = dd_from_dev(dev);
 
 	return scnprintf(buf, PAGE_SIZE, "%s", dd->serial);
@@ -573,7 +573,7 @@ static ssize_t store_chip_reset(struct device *device,
 				size_t count)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 	struct hfi1_devdata *dd = dd_from_dev(dev);
 	int ret;
 
@@ -602,7 +602,7 @@ static ssize_t show_tempsense(struct device *device,
 			      struct device_attribute *attr, char *buf)
 {
 	struct hfi1_ibdev *dev =
-		container_of(device, struct hfi1_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct hfi1_ibdev, rdi.ibdev);
 	struct hfi1_devdata *dd = dd_from_dev(dev);
 	struct hfi1_temp temp;
 	int ret;
diff --git a/drivers/infiniband/hw/i40iw/i40iw_verbs.c b/drivers/infiniband/hw/i40iw/i40iw_verbs.c
index 7de5e9f6a0a6..e733b466a182 100644
--- a/drivers/infiniband/hw/i40iw/i40iw_verbs.c
+++ b/drivers/infiniband/hw/i40iw/i40iw_verbs.c
@@ -2140,9 +2140,8 @@ static int i40iw_dereg_mr(struct ib_mr *ib_mr)
 static ssize_t i40iw_show_rev(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
-	struct i40iw_ib_device *iwibdev = container_of(dev,
-						       struct i40iw_ib_device,
-						       ibdev.dev);
+	struct i40iw_ib_device *iwibdev =
+		rdma_device_to_drv_device(dev, struct i40iw_ib_device, ibdev);
 	u32 hw_rev = iwibdev->iwdev->sc_dev.hw_rev;
 
 	return sprintf(buf, "%x\n", hw_rev);
diff --git a/drivers/infiniband/hw/mlx4/main.c b/drivers/infiniband/hw/mlx4/main.c
index 53903a414da7..1a08849ef8b6 100644
--- a/drivers/infiniband/hw/mlx4/main.c
+++ b/drivers/infiniband/hw/mlx4/main.c
@@ -2043,7 +2043,7 @@ static ssize_t show_hca(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct mlx4_ib_dev *dev =
-		container_of(device, struct mlx4_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx4_ib_dev, ib_dev);
 	return sprintf(buf, "MT%d\n", dev->dev->persist->pdev->device);
 }
 
@@ -2051,7 +2051,7 @@ static ssize_t show_rev(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct mlx4_ib_dev *dev =
-		container_of(device, struct mlx4_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx4_ib_dev, ib_dev);
 	return sprintf(buf, "%x\n", dev->dev->rev_id);
 }
 
@@ -2059,7 +2059,8 @@ static ssize_t show_board(struct device *device, struct device_attribute *attr,
 			  char *buf)
 {
 	struct mlx4_ib_dev *dev =
-		container_of(device, struct mlx4_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx4_ib_dev, ib_dev);
+
 	return sprintf(buf, "%.*s\n", MLX4_BOARD_ID_LEN,
 		       dev->dev->board_id);
 }
diff --git a/drivers/infiniband/hw/mlx5/main.c b/drivers/infiniband/hw/mlx5/main.c
index e98f870fc19d..42105f49110a 100644
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@ -3819,7 +3819,7 @@ static ssize_t show_fw_pages(struct device *device, struct device_attribute *att
 			     char *buf)
 {
 	struct mlx5_ib_dev *dev =
-		container_of(device, struct mlx5_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx5_ib_dev, ib_dev);
 
 	return sprintf(buf, "%d\n", dev->mdev->priv.fw_pages);
 }
@@ -3828,7 +3828,7 @@ static ssize_t show_reg_pages(struct device *device,
 			      struct device_attribute *attr, char *buf)
 {
 	struct mlx5_ib_dev *dev =
-		container_of(device, struct mlx5_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx5_ib_dev, ib_dev);
 
 	return sprintf(buf, "%d\n", atomic_read(&dev->mdev->priv.reg_pages));
 }
@@ -3837,7 +3837,8 @@ static ssize_t show_hca(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct mlx5_ib_dev *dev =
-		container_of(device, struct mlx5_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx5_ib_dev, ib_dev);
+
 	return sprintf(buf, "MT%d\n", dev->mdev->pdev->device);
 }
 
@@ -3845,7 +3846,8 @@ static ssize_t show_rev(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct mlx5_ib_dev *dev =
-		container_of(device, struct mlx5_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx5_ib_dev, ib_dev);
+
 	return sprintf(buf, "%x\n", dev->mdev->rev_id);
 }
 
@@ -3853,7 +3855,8 @@ static ssize_t show_board(struct device *device, struct device_attribute *attr,
 			  char *buf)
 {
 	struct mlx5_ib_dev *dev =
-		container_of(device, struct mlx5_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mlx5_ib_dev, ib_dev);
+
 	return sprintf(buf, "%.*s\n", MLX5_BOARD_ID_LEN,
 		       dev->mdev->board_id);
 }
diff --git a/drivers/infiniband/hw/mthca/mthca_provider.c b/drivers/infiniband/hw/mthca/mthca_provider.c
index d45a5381165a..4176dbd17fd4 100644
--- a/drivers/infiniband/hw/mthca/mthca_provider.c
+++ b/drivers/infiniband/hw/mthca/mthca_provider.c
@@ -1080,7 +1080,8 @@ static ssize_t show_rev(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct mthca_dev *dev =
-		container_of(device, struct mthca_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mthca_dev, ib_dev);
+
 	return sprintf(buf, "%x\n", dev->rev_id);
 }
 
@@ -1088,7 +1089,8 @@ static ssize_t show_hca(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct mthca_dev *dev =
-		container_of(device, struct mthca_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mthca_dev, ib_dev);
+
 	switch (dev->pdev->device) {
 	case PCI_DEVICE_ID_MELLANOX_TAVOR:
 		return sprintf(buf, "MT23108\n");
@@ -1108,7 +1110,8 @@ static ssize_t show_board(struct device *device, struct device_attribute *attr,
 			  char *buf)
 {
 	struct mthca_dev *dev =
-		container_of(device, struct mthca_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct mthca_dev, ib_dev);
+
 	return sprintf(buf, "%.*s\n", MTHCA_BOARD_ID_LEN, dev->board_id);
 }
 
diff --git a/drivers/infiniband/hw/nes/nes_verbs.c b/drivers/infiniband/hw/nes/nes_verbs.c
index 10635ebe19fe..0b7eef260873 100644
--- a/drivers/infiniband/hw/nes/nes_verbs.c
+++ b/drivers/infiniband/hw/nes/nes_verbs.c
@@ -2580,7 +2580,7 @@ static ssize_t show_rev(struct device *dev, struct device_attribute *attr,
 			char *buf)
 {
 	struct nes_ib_device *nesibdev =
-			container_of(dev, struct nes_ib_device, ibdev.dev);
+		rdma_device_to_drv_device(dev, struct nes_ib_device, ibdev);
 	struct nes_vnic *nesvnic = nesibdev->nesvnic;
 
 	nes_debug(NES_DBG_INIT, "\n");
* Unmerged path drivers/infiniband/hw/ocrdma/ocrdma_main.c
* Unmerged path drivers/infiniband/hw/qedr/main.c
diff --git a/drivers/infiniband/hw/qib/qib_sysfs.c b/drivers/infiniband/hw/qib/qib_sysfs.c
index ca2638d8f35e..0bfd64e7cf7b 100644
--- a/drivers/infiniband/hw/qib/qib_sysfs.c
+++ b/drivers/infiniband/hw/qib/qib_sysfs.c
@@ -555,7 +555,7 @@ static ssize_t show_rev(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 
 	return sprintf(buf, "%x\n", dd_from_dev(dev)->minrev);
 }
@@ -564,7 +564,7 @@ static ssize_t show_hca(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 	int ret;
 
@@ -586,7 +586,7 @@ static ssize_t show_boardversion(struct device *device,
 				 struct device_attribute *attr, char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 
 	/* The string printed here is already newline-terminated. */
@@ -598,7 +598,7 @@ static ssize_t show_localbus_info(struct device *device,
 				  struct device_attribute *attr, char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 
 	/* The string printed here is already newline-terminated. */
@@ -610,7 +610,7 @@ static ssize_t show_nctxts(struct device *device,
 			   struct device_attribute *attr, char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 
 	/* Return the number of user ports (contexts) available. */
@@ -625,7 +625,7 @@ static ssize_t show_nfreectxts(struct device *device,
 			   struct device_attribute *attr, char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 
 	/* Return the number of free user ports (contexts) available. */
@@ -636,7 +636,7 @@ static ssize_t show_serial(struct device *device,
 			   struct device_attribute *attr, char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 
 	buf[sizeof(dd->serial)] = '\0';
@@ -650,7 +650,7 @@ static ssize_t store_chip_reset(struct device *device,
 				size_t count)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 	int ret;
 
@@ -671,7 +671,7 @@ static ssize_t show_tempsense(struct device *device,
 			      struct device_attribute *attr, char *buf)
 {
 	struct qib_ibdev *dev =
-		container_of(device, struct qib_ibdev, rdi.ibdev.dev);
+		rdma_device_to_drv_device(device, struct qib_ibdev, rdi.ibdev);
 	struct qib_devdata *dd = dd_from_dev(dev);
 	int ret;
 	int idx;
diff --git a/drivers/infiniband/hw/usnic/usnic_ib_sysfs.c b/drivers/infiniband/hw/usnic/usnic_ib_sysfs.c
index fab4cb780122..28d8b7be13b3 100644
--- a/drivers/infiniband/hw/usnic/usnic_ib_sysfs.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_sysfs.c
@@ -51,7 +51,7 @@ static ssize_t usnic_ib_show_board(struct device *device,
 					char *buf)
 {
 	struct usnic_ib_dev *us_ibdev =
-		container_of(device, struct usnic_ib_dev, ib_dev.dev);
+		rdma_device_to_drv_device(device, struct usnic_ib_dev, ib_dev);
 	unsigned short subsystem_device_id;
 
 	mutex_lock(&us_ibdev->usdev_lock);
@@ -68,14 +68,13 @@ static ssize_t
 usnic_ib_show_config(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
-	struct usnic_ib_dev *us_ibdev;
+	struct usnic_ib_dev *us_ibdev =
+		rdma_device_to_drv_device(device, struct usnic_ib_dev, ib_dev);
 	char *ptr;
 	unsigned left;
 	unsigned n;
 	enum usnic_vnic_res_type res_type;
 
-	us_ibdev = container_of(device, struct usnic_ib_dev, ib_dev.dev);
-
 	/* Buffer space limit is 1 page */
 	ptr = buf;
 	left = PAGE_SIZE;
@@ -131,9 +130,8 @@ static ssize_t
 usnic_ib_show_iface(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
-	struct usnic_ib_dev *us_ibdev;
-
-	us_ibdev = container_of(device, struct usnic_ib_dev, ib_dev.dev);
+	struct usnic_ib_dev *us_ibdev =
+		rdma_device_to_drv_device(device, struct usnic_ib_dev, ib_dev);
 
 	return scnprintf(buf, PAGE_SIZE, "%s\n",
 			netdev_name(us_ibdev->netdev));
@@ -143,9 +141,8 @@ static ssize_t
 usnic_ib_show_max_vf(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
-	struct usnic_ib_dev *us_ibdev;
-
-	us_ibdev = container_of(device, struct usnic_ib_dev, ib_dev.dev);
+	struct usnic_ib_dev *us_ibdev =
+		rdma_device_to_drv_device(device, struct usnic_ib_dev, ib_dev);
 
 	return scnprintf(buf, PAGE_SIZE, "%u\n",
 			kref_read(&us_ibdev->vf_cnt));
@@ -155,10 +152,10 @@ static ssize_t
 usnic_ib_show_qp_per_vf(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
-	struct usnic_ib_dev *us_ibdev;
+	struct usnic_ib_dev *us_ibdev =
+		rdma_device_to_drv_device(device, struct usnic_ib_dev, ib_dev);
 	int qp_per_vf;
 
-	us_ibdev = container_of(device, struct usnic_ib_dev, ib_dev.dev);
 	qp_per_vf = max(us_ibdev->vf_res_cnt[USNIC_VNIC_RES_TYPE_WQ],
 			us_ibdev->vf_res_cnt[USNIC_VNIC_RES_TYPE_RQ]);
 
@@ -170,9 +167,8 @@ static ssize_t
 usnic_ib_show_cq_per_vf(struct device *device, struct device_attribute *attr,
 			char *buf)
 {
-	struct usnic_ib_dev *us_ibdev;
-
-	us_ibdev = container_of(device, struct usnic_ib_dev, ib_dev.dev);
+	struct usnic_ib_dev *us_ibdev =
+		rdma_device_to_drv_device(device, struct usnic_ib_dev, ib_dev);
 
 	return scnprintf(buf, PAGE_SIZE, "%d\n",
 			us_ibdev->vf_res_cnt[USNIC_VNIC_RES_TYPE_CQ]);
diff --git a/drivers/infiniband/sw/rxe/rxe_verbs.c b/drivers/infiniband/sw/rxe/rxe_verbs.c
index e4887381271b..70b460d7db70 100644
--- a/drivers/infiniband/sw/rxe/rxe_verbs.c
+++ b/drivers/infiniband/sw/rxe/rxe_verbs.c
@@ -1128,8 +1128,8 @@ static int rxe_detach_mcast(struct ib_qp *ibqp, union ib_gid *mgid, u16 mlid)
 static ssize_t parent_show(struct device *device,
 			   struct device_attribute *attr, char *buf)
 {
-	struct rxe_dev *rxe = container_of(device, struct rxe_dev,
-					   ib_dev.dev);
+	struct rxe_dev *rxe =
+		rdma_device_to_drv_device(device, struct rxe_dev, ib_dev);
 
 	return snprintf(buf, 16, "%s\n", rxe_parent_name(rxe, 1));
 }
* Unmerged path include/rdma/ib_verbs.h
