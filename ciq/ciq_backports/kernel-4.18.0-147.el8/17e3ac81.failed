bpf: fix bpffs bitfield pretty print

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yonghong Song <yhs@fb.com>
commit 17e3ac812541f73224299d8958ddb420c2d5bbd8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/17e3ac81.failed

Commit 9d5f9f701b18 ("bpf: btf: fix struct/union/fwd types
with kind_flag") introduced kind_flag and used bitfield_size
in the btf_member to directly pretty print member values.

The commit contained a bug where the incorrect parameters could be
passed to function btf_bitfield_seq_show(). The bits_offset
parameter in the function expects a value less than 8.
Instead, the member offset in the structure is passed.

The below is btf_bitfield_seq_show() func signature:
  void btf_bitfield_seq_show(void *data, u8 bits_offset,
                             u8 nr_bits, struct seq_file *m)
both bits_offset and nr_bits are u8 type. If the bitfield
member offset is greater than 256, incorrect value will
be printed.

This patch fixed the issue by calculating correct proper
data offset and bits_offset similar to non kind_flag case.

Fixes: 9d5f9f701b18 ("bpf: btf: fix struct/union/fwd types with kind_flag")
	Acked-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 17e3ac812541f73224299d8958ddb420c2d5bbd8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/btf.c
diff --cc kernel/bpf/btf.c
index 0357a9e2e51e,a2f53642592b..000000000000
--- a/kernel/bpf/btf.c
+++ b/kernel/bpf/btf.c
@@@ -1767,9 -1999,18 +1767,24 @@@ static void btf_struct_seq_show(const s
  		if (i)
  			seq_puts(m, seq);
  
++<<<<<<< HEAD
 +		ops = btf_type_ops(member_type);
 +		ops->seq_show(btf, member_type, member->type,
 +			      data + bytes_offset, bits8_offset, m);
++=======
+ 		member_offset = btf_member_bit_offset(t, member);
+ 		bitfield_size = btf_member_bitfield_size(t, member);
+ 		bytes_offset = BITS_ROUNDDOWN_BYTES(member_offset);
+ 		bits8_offset = BITS_PER_BYTE_MASKED(member_offset);
+ 		if (bitfield_size) {
+ 			btf_bitfield_seq_show(data + bytes_offset, bits8_offset,
+ 					      bitfield_size, m);
+ 		} else {
+ 			ops = btf_type_ops(member_type);
+ 			ops->seq_show(btf, member_type, member->type,
+ 				      data + bytes_offset, bits8_offset, m);
+ 		}
++>>>>>>> 17e3ac812541 (bpf: fix bpffs bitfield pretty print)
  	}
  	seq_puts(m, "}");
  }
* Unmerged path kernel/bpf/btf.c
