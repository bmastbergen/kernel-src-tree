bpf: fix wrong helper enablement in cgroup local storage

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit d8fd9e106fbc291167ebb675ad69234597d0fd98
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d8fd9e10.failed

Commit cd3394317653 ("bpf: introduce the bpf_get_local_storage()
helper function") enabled the bpf_get_local_storage() helper also
for BPF program types where it does not make sense to use them.

They have been added both in sk_skb_func_proto() and sk_msg_func_proto()
even though both program types are not invoked in combination with
cgroups, and neither through BPF_PROG_RUN_ARRAY(). In the latter the
bpf_cgroup_storage_set() is set shortly before BPF program invocation.

Later, the helper bpf_get_local_storage() retrieves this prior set
up per-cpu pointer and hands the buffer to the BPF program. The map
argument in there solely retrieves the enum bpf_cgroup_storage_type
from a local storage map associated with the program and based on the
type returns either the global or per-cpu storage. However, there
is no specific association between the program's map and the actual
content in bpf_cgroup_storage[].

Meaning, any BPF program that would have been properly run from the
cgroup side through BPF_PROG_RUN_ARRAY() where bpf_cgroup_storage_set()
was performed, and that is later unloaded such that prog / maps are
teared down will cause a use after free if that pointer is retrieved
from programs that are not run through BPF_PROG_RUN_ARRAY() but have
the cgroup local storage helper enabled in their func proto.

Lets just remove it from the two sock_map program types to fix it.
Auditing through the types where this helper is enabled, it appears
that these are the only ones where it was mistakenly allowed.

Fixes: cd3394317653 ("bpf: introduce the bpf_get_local_storage() helper function")
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Roman Gushchin <guro@fb.com>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Acked-by: Roman Gushchin <guro@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit d8fd9e106fbc291167ebb675ad69234597d0fd98)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/filter.c
diff --cc net/core/filter.c
index ed8de8b22015,e521c5ebc7d1..000000000000
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@@ -5031,8 -5262,8 +5031,13 @@@ sk_msg_func_proto(enum bpf_func_id func
  		return &bpf_msg_cork_bytes_proto;
  	case BPF_FUNC_msg_pull_data:
  		return &bpf_msg_pull_data_proto;
++<<<<<<< HEAD
 +	case BPF_FUNC_get_local_storage:
 +		return &bpf_get_local_storage_proto;
++=======
+ 	case BPF_FUNC_msg_push_data:
+ 		return &bpf_msg_push_data_proto;
++>>>>>>> d8fd9e106fbc (bpf: fix wrong helper enablement in cgroup local storage)
  	default:
  		return bpf_base_func_proto(func_id);
  	}
@@@ -5060,8 -5294,25 +5065,30 @@@ sk_skb_func_proto(enum bpf_func_id func
  		return &bpf_sk_redirect_map_proto;
  	case BPF_FUNC_sk_redirect_hash:
  		return &bpf_sk_redirect_hash_proto;
++<<<<<<< HEAD
 +	case BPF_FUNC_get_local_storage:
 +		return &bpf_get_local_storage_proto;
++=======
+ #ifdef CONFIG_INET
+ 	case BPF_FUNC_sk_lookup_tcp:
+ 		return &bpf_sk_lookup_tcp_proto;
+ 	case BPF_FUNC_sk_lookup_udp:
+ 		return &bpf_sk_lookup_udp_proto;
+ 	case BPF_FUNC_sk_release:
+ 		return &bpf_sk_release_proto;
+ #endif
+ 	default:
+ 		return bpf_base_func_proto(func_id);
+ 	}
+ }
+ 
+ static const struct bpf_func_proto *
+ flow_dissector_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
+ {
+ 	switch (func_id) {
+ 	case BPF_FUNC_skb_load_bytes:
+ 		return &bpf_skb_load_bytes_proto;
++>>>>>>> d8fd9e106fbc (bpf: fix wrong helper enablement in cgroup local storage)
  	default:
  		return bpf_base_func_proto(func_id);
  	}
* Unmerged path net/core/filter.c
