net/ipv6: Put target net when address dump fails due to bad attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [net] ipv6: Put target net when address dump fails due to bad attributes (Petr Oros) [1700306]
Rebuild_FUZZ: 97.06%
commit-author David Ahern <dsahern@gmail.com>
commit 242afaa6968cde96824247ab984c24c466ca29f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/242afaa6.failed

If tgt_net is set based on IFA_TARGET_NETNSID attribute in the dump
request, make sure all error paths call put_net.

Fixes: 6371a71f3a3b ("net/ipv6: Add support for dumping addresses for a specific device")
Fixes: ed6eff11790a ("net/ipv6: Update inet6_dump_addr for strict data checking")
	Signed-off-by: David Ahern <dsahern@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 242afaa6968cde96824247ab984c24c466ca29f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/addrconf.c
diff --cc net/ipv6/addrconf.c
index ff031adf9e83,7eb09c86fa13..000000000000
--- a/net/ipv6/addrconf.c
+++ b/net/ipv6/addrconf.c
@@@ -5035,16 -5093,27 +5036,38 @@@ static int inet6_dump_addr(struct sk_bu
  
  	s_h = cb->args[0];
  	s_idx = idx = cb->args[1];
 -	s_ip_idx = cb->args[2];
 -
 +	s_ip_idx = ip_idx = cb->args[2];
 +
++<<<<<<< HEAD
 +	if (nlmsg_parse(cb->nlh, sizeof(struct ifaddrmsg), tb, IFA_MAX,
 +			ifa_ipv6_policy, NULL) >= 0) {
 +		if (tb[IFA_TARGET_NETNSID]) {
 +			netnsid = nla_get_s32(tb[IFA_TARGET_NETNSID]);
 +
 +			tgt_net = rtnl_get_net_ns_capable(skb->sk, netnsid);
 +			if (IS_ERR(tgt_net))
 +				return PTR_ERR(tgt_net);
++=======
+ 	if (cb->strict_check) {
+ 		err = inet6_valid_dump_ifaddr_req(nlh, &fillargs, &tgt_net,
+ 						  skb->sk, cb);
+ 		if (err < 0)
+ 			goto put_tgt_net;
+ 
+ 		err = 0;
+ 		if (fillargs.ifindex) {
+ 			dev = __dev_get_by_index(tgt_net, fillargs.ifindex);
+ 			if (!dev) {
+ 				err = -ENODEV;
+ 				goto put_tgt_net;
+ 			}
+ 			idev = __in6_dev_get(dev);
+ 			if (idev) {
+ 				err = in6_dump_addrs(idev, skb, cb, s_ip_idx,
+ 						     &fillargs);
+ 			}
+ 			goto put_tgt_net;
++>>>>>>> 242afaa6968c (net/ipv6: Put target net when address dump fails due to bad attributes)
  		}
  	}
  
@@@ -5074,11 -5142,11 +5097,11 @@@ done
  	rcu_read_unlock();
  	cb->args[0] = h;
  	cb->args[1] = idx;
 -put_tgt_net:
 -	if (fillargs.netnsid >= 0)
 +	cb->args[2] = ip_idx;
 +	if (netnsid >= 0)
  		put_net(tgt_net);
  
- 	return skb->len;
+ 	return err < 0 ? err : skb->len;
  }
  
  static int inet6_dump_ifaddr(struct sk_buff *skb, struct netlink_callback *cb)
* Unmerged path net/ipv6/addrconf.c
