tools/bpf: expose functions btf_ext__* as API functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yonghong Song <yhs@fb.com>
commit b8dcf8d149db5999d3db937822d3e374eca68b9f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/b8dcf8d1.failed

The following set of functions, which manipulates .BTF.ext
section, are exposed as API functions:
  . btf_ext__new
  . btf_ext__free
  . btf_ext__reloc_func_info
  . btf_ext__reloc_line_info
  . btf_ext__func_info_rec_size
  . btf_ext__line_info_rec_size

These functions are useful for JIT based bpf codegen, e.g.,
bcc, to manipulate in-memory .BTF.ext sections.

The signature of function btf_ext__reloc_func_info()
is also changed to be the same as its definition in btf.c.

	Acked-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit b8dcf8d149db5999d3db937822d3e374eca68b9f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/btf.h
#	tools/lib/bpf/libbpf.map
diff --cc tools/lib/bpf/btf.h
index caac3a404dc5,418389e2a662..000000000000
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@@ -6,19 -6,82 +6,49 @@@
  
  #include <linux/types.h>
  
 -#ifdef __cplusplus
 -extern "C" {
 -#endif
 -
 -#ifndef LIBBPF_API
 -#define LIBBPF_API __attribute__((visibility("default")))
 -#endif
 -
  #define BTF_ELF_SEC ".BTF"
 -#define BTF_EXT_ELF_SEC ".BTF.ext"
  
  struct btf;
 -struct btf_ext;
  struct btf_type;
  
 -/*
 - * The .BTF.ext ELF section layout defined as
 - *   struct btf_ext_header
 - *   func_info subsection
 - *
 - * The func_info subsection layout:
 - *   record size for struct bpf_func_info in the func_info subsection
 - *   struct btf_sec_func_info for section #1
 - *   a list of bpf_func_info records for section #1
 - *     where struct bpf_func_info mimics one in include/uapi/linux/bpf.h
 - *     but may not be identical
 - *   struct btf_sec_func_info for section #2
 - *   a list of bpf_func_info records for section #2
 - *   ......
 - *
 - * Note that the bpf_func_info record size in .BTF.ext may not
 - * be the same as the one defined in include/uapi/linux/bpf.h.
 - * The loader should ensure that record_size meets minimum
 - * requirement and pass the record as is to the kernel. The
 - * kernel will handle the func_info properly based on its contents.
 - */
 -struct btf_ext_header {
 -	__u16	magic;
 -	__u8	version;
 -	__u8	flags;
 -	__u32	hdr_len;
 +typedef int (*btf_print_fn_t)(const char *, ...)
 +	__attribute__((format(printf, 1, 2)));
  
 -	/* All offsets are in bytes relative to the end of this header */
 -	__u32	func_info_off;
 -	__u32	func_info_len;
 -	__u32	line_info_off;
 -	__u32	line_info_len;
 -};
 +void btf__free(struct btf *btf);
 +struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 +__s32 btf__find_by_name(const struct btf *btf, const char *type_name);
 +const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 id);
 +__s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
 +int btf__fd(const struct btf *btf);
  
++<<<<<<< HEAD
++=======
+ LIBBPF_API void btf__free(struct btf *btf);
+ LIBBPF_API struct btf *btf__new(__u8 *data, __u32 size);
+ LIBBPF_API __s32 btf__find_by_name(const struct btf *btf,
+ 				   const char *type_name);
+ LIBBPF_API const struct btf_type *btf__type_by_id(const struct btf *btf,
+ 						  __u32 id);
+ LIBBPF_API __s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
+ LIBBPF_API int btf__resolve_type(const struct btf *btf, __u32 type_id);
+ LIBBPF_API int btf__fd(const struct btf *btf);
+ LIBBPF_API const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
+ LIBBPF_API int btf__get_from_id(__u32 id, struct btf **btf);
+ 
+ LIBBPF_API struct btf_ext *btf_ext__new(__u8 *data, __u32 size);
+ LIBBPF_API void btf_ext__free(struct btf_ext *btf_ext);
+ LIBBPF_API int btf_ext__reloc_func_info(const struct btf *btf,
+ 					const struct btf_ext *btf_ext,
+ 					const char *sec_name, __u32 insns_cnt,
+ 					void **func_info, __u32 *cnt);
+ LIBBPF_API int btf_ext__reloc_line_info(const struct btf *btf,
+ 					const struct btf_ext *btf_ext,
+ 					const char *sec_name, __u32 insns_cnt,
+ 					void **line_info, __u32 *cnt);
+ LIBBPF_API __u32 btf_ext__func_info_rec_size(const struct btf_ext *btf_ext);
+ LIBBPF_API __u32 btf_ext__line_info_rec_size(const struct btf_ext *btf_ext);
+ 
+ #ifdef __cplusplus
+ } /* extern "C" */
++>>>>>>> b8dcf8d149db (tools/bpf: expose functions btf_ext__* as API functions)
  #endif
 -
 -#endif /* __LIBBPF_BTF_H */
diff --cc tools/lib/bpf/libbpf.map
index 4fb29f6d7a80,46441c5f030b..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -119,3 -124,19 +119,22 @@@ LIBBPF_0.0.1 
  	local:
  		*;
  };
++<<<<<<< HEAD
++=======
+ 
+ LIBBPF_0.0.2 {
+ 	global:
+ 		bpf_probe_helper;
+ 		bpf_probe_map_type;
+ 		bpf_probe_prog_type;
+ 		bpf_map_lookup_elem_flags;
+ 		bpf_object__find_map_fd_by_name;
+ 		bpf_get_link_xdp_id;
+ 		btf_ext__free;
+ 		btf_ext__func_info_rec_size;
+ 		btf_ext__line_info_rec_size;
+ 		btf_ext__new;
+ 		btf_ext__reloc_func_info;
+ 		btf_ext__reloc_line_info;
+ } LIBBPF_0.0.1;
++>>>>>>> b8dcf8d149db (tools/bpf: expose functions btf_ext__* as API functions)
* Unmerged path tools/lib/bpf/btf.h
* Unmerged path tools/lib/bpf/libbpf.map
