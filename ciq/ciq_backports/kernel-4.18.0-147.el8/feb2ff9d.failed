net/mlx5e: XDP, Change the XDP SQ redirect indication

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Tariq Toukan <tariqt@mellanox.com>
commit feb2ff9d74f76a174e284255b7e537b6c090c13c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/feb2ff9d.failed

Do not maintain an SQ state bit to indicate whether an
XDP SQ serves redirect operations.

Instead, rely on the fact that such an XDP SQ doesn't reside
in an RQ instance, while the others do.
This info is not known to the XDP SQ functions themselves,
and they rely on their callers to distinguish between the cases.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit feb2ff9d74f76a174e284255b7e537b6c090c13c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
index 5fb323256d41,4961b8fea111..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
@@@ -168,7 -168,7 +168,11 @@@ bool mlx5e_poll_xdpsq_cq(struct mlx5e_c
  {
  	struct mlx5e_xdpsq *sq;
  	struct mlx5_cqe64 *cqe;
++<<<<<<< HEAD
 +	struct mlx5e_rq *rq;
++=======
+ 	bool is_redirect;
++>>>>>>> feb2ff9d74f7 (net/mlx5e: XDP, Change the XDP SQ redirect indication)
  	u16 sqcc;
  	int i;
  
@@@ -181,7 -181,7 +185,11 @@@
  	if (!cqe)
  		return false;
  
++<<<<<<< HEAD
 +	rq = container_of(sq, struct mlx5e_rq, xdpsq);
++=======
+ 	is_redirect = !rq;
++>>>>>>> feb2ff9d74f7 (net/mlx5e: XDP, Change the XDP SQ redirect indication)
  
  	/* sq->cc must be updated only after mlx5_cqwq_update_db_record(),
  	 * otherwise a cq overrun may occur
@@@ -223,18 -226,91 +231,22 @@@
  	return (i == MLX5E_TX_CQ_POLL_BUDGET);
  }
  
- void mlx5e_free_xdpsq_descs(struct mlx5e_xdpsq *sq)
+ void mlx5e_free_xdpsq_descs(struct mlx5e_xdpsq *sq, struct mlx5e_rq *rq)
  {
++<<<<<<< HEAD
 +	struct mlx5e_rq *rq = container_of(sq, struct mlx5e_rq, xdpsq);
 +	struct mlx5e_xdp_info *xdpi;
 +	u16 ci;
++=======
+ 	bool is_redirect = !rq;
++>>>>>>> feb2ff9d74f7 (net/mlx5e: XDP, Change the XDP SQ redirect indication)
  
  	while (sq->cc != sq->pc) {
 -		u16 ci = mlx5_wq_cyc_ctr2ix(&sq->wq, sq->cc);
 -		struct mlx5e_xdp_info *xdpi = &sq->db.xdpi[ci];
 -
 +		ci = mlx5_wq_cyc_ctr2ix(&sq->wq, sq->cc);
 +		xdpi = &sq->db.xdpi[ci];
  		sq->cc++;
  
 -		if (is_redirect) {
 -			xdp_return_frame(xdpi->xdpf);
 -			dma_unmap_single(sq->pdev, xdpi->dma_addr,
 -					 xdpi->xdpf->len, DMA_TO_DEVICE);
 -		} else {
 -			/* Recycle RX page */
 -			mlx5e_page_release(rq, &xdpi->di, false);
 -		}
 -	}
 -}
 -
 -int mlx5e_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames,
 -		   u32 flags)
 -{
 -	struct mlx5e_priv *priv = netdev_priv(dev);
 -	struct mlx5e_xdpsq *sq;
 -	int drops = 0;
 -	int sq_num;
 -	int i;
 -
 -	if (unlikely(!test_bit(MLX5E_STATE_OPENED, &priv->state)))
 -		return -ENETDOWN;
 -
 -	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK))
 -		return -EINVAL;
 -
 -	sq_num = smp_processor_id();
 -
 -	if (unlikely(sq_num >= priv->channels.num))
 -		return -ENXIO;
 -
 -	sq = &priv->channels.c[sq_num]->xdpsq;
 -
 -	if (unlikely(!test_bit(MLX5E_SQ_STATE_ENABLED, &sq->state)))
 -		return -ENETDOWN;
 -
 -	for (i = 0; i < n; i++) {
 -		struct xdp_frame *xdpf = frames[i];
 -		struct mlx5e_xdp_info xdpi;
 -
 -		xdpi.dma_addr = dma_map_single(sq->pdev, xdpf->data, xdpf->len,
 -					       DMA_TO_DEVICE);
 -		if (unlikely(dma_mapping_error(sq->pdev, xdpi.dma_addr))) {
 -			xdp_return_frame_rx_napi(xdpf);
 -			drops++;
 -			continue;
 -		}
 -
 -		xdpi.xdpf = xdpf;
 -
 -		if (unlikely(!mlx5e_xmit_xdp_frame(sq, &xdpi))) {
 -			dma_unmap_single(sq->pdev, xdpi.dma_addr,
 -					 xdpf->len, DMA_TO_DEVICE);
 -			xdp_return_frame_rx_napi(xdpf);
 -			drops++;
 -		}
 +		mlx5e_page_release(rq, &xdpi->di, false);
  	}
 -
 -	if (flags & XDP_XMIT_FLUSH)
 -		mlx5e_xmit_xdp_doorbell(sq);
 -
 -	return n - drops;
  }
  
 -void mlx5e_xdp_rx_poll_complete(struct mlx5e_rq *rq)
 -{
 -	struct mlx5e_xdpsq *xdpsq = &rq->xdpsq;
 -
 -	if (xdpsq->doorbell) {
 -		mlx5e_xmit_xdp_doorbell(xdpsq);
 -		xdpsq->doorbell = false;
 -	}
 -
 -	if (xdpsq->redirect_flush) {
 -		xdp_do_flush_map();
 -		xdpsq->redirect_flush = false;
 -	}
 -}
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
index 81739aad0188,37fcb17e7f27..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
@@@ -42,10 -42,12 +42,16 @@@
  
  bool mlx5e_xdp_handle(struct mlx5e_rq *rq, struct mlx5e_dma_info *di,
  		      void *va, u16 *rx_headroom, u32 *len);
++<<<<<<< HEAD
 +bool mlx5e_poll_xdpsq_cq(struct mlx5e_cq *cq);
 +void mlx5e_free_xdpsq_descs(struct mlx5e_xdpsq *sq);
 +
++=======
+ bool mlx5e_poll_xdpsq_cq(struct mlx5e_cq *cq, struct mlx5e_rq *rq);
+ void mlx5e_free_xdpsq_descs(struct mlx5e_xdpsq *sq, struct mlx5e_rq *rq);
+ void mlx5e_xdp_rx_poll_complete(struct mlx5e_rq *rq);
++>>>>>>> feb2ff9d74f7 (net/mlx5e: XDP, Change the XDP SQ redirect indication)
  bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi);
 -int mlx5e_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames,
 -		   u32 flags);
  
  static inline void mlx5e_xmit_xdp_doorbell(struct mlx5e_xdpsq *sq)
  {
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index b4f6c14ea722,8a19f451fb7a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -1988,9 -1996,17 +1988,9 @@@ static int mlx5e_open_channel(struct ml
  	*cp = c;
  
  	return 0;
 -
 -err_close_rq:
 -	mlx5e_close_rq(&c->rq);
 -
  err_close_xdp_sq:
  	if (c->xdp)
- 		mlx5e_close_xdpsq(&c->rq.xdpsq);
+ 		mlx5e_close_xdpsq(&c->rq.xdpsq, &c->rq);
  
  err_close_sqs:
  	mlx5e_close_sqs(c);
@@@ -2040,9 -2059,10 +2040,13 @@@ static void mlx5e_deactivate_channel(st
  
  static void mlx5e_close_channel(struct mlx5e_channel *c)
  {
++<<<<<<< HEAD
++=======
+ 	mlx5e_close_xdpsq(&c->xdpsq, NULL);
++>>>>>>> feb2ff9d74f7 (net/mlx5e: XDP, Change the XDP SQ redirect indication)
  	mlx5e_close_rq(&c->rq);
  	if (c->xdp)
- 		mlx5e_close_xdpsq(&c->rq.xdpsq);
+ 		mlx5e_close_xdpsq(&c->rq.xdpsq, &c->rq);
  	mlx5e_close_sqs(c);
  	mlx5e_close_icosq(&c->icosq);
  	napi_disable(&c->napi);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
index f31bbbe1bdb1,b4af5e19f6ac..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
@@@ -85,11 -86,13 +86,16 @@@ int mlx5e_napi_poll(struct napi_struct 
  	for (i = 0; i < c->num_tc; i++)
  		busy |= mlx5e_poll_tx_cq(&c->sq[i].cq, budget);
  
++<<<<<<< HEAD
++=======
+ 	busy |= mlx5e_poll_xdpsq_cq(&c->xdpsq.cq, NULL);
+ 
++>>>>>>> feb2ff9d74f7 (net/mlx5e: XDP, Change the XDP SQ redirect indication)
  	if (c->xdp)
- 		busy |= mlx5e_poll_xdpsq_cq(&c->rq.xdpsq.cq);
+ 		busy |= mlx5e_poll_xdpsq_cq(&rq->xdpsq.cq, rq);
  
  	if (likely(budget)) { /* budget=0 means: don't poll rx rings */
- 		work_done = mlx5e_poll_rx_cq(&c->rq.cq, budget);
+ 		work_done = mlx5e_poll_rx_cq(&rq->cq, budget);
  		busy |= work_done == budget;
  	}
  
@@@ -113,10 -116,11 +119,10 @@@
  		mlx5e_cq_arm(&c->sq[i].cq);
  	}
  
- 	mlx5e_handle_rx_dim(&c->rq);
+ 	mlx5e_handle_rx_dim(rq);
  
- 	mlx5e_cq_arm(&c->rq.cq);
+ 	mlx5e_cq_arm(&rq->cq);
  	mlx5e_cq_arm(&c->icosq.cq);
 -	mlx5e_cq_arm(&c->xdpsq.cq);
  
  	return work_done;
  }
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
