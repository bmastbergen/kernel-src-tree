nfp: flower: remove unused index from nfp_fl_pedit()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit c0bc5d8e2badeebe14b4005da794a8705b69320e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c0bc5d8e.failed

Static checker warning complains on uninitialized variable:

        drivers/net/ethernet/netronome/nfp/flower/action.c:618 nfp_fl_pedit()
        error: uninitialized symbol 'idx'.

Which is actually never used from the functions that take it as
parameter. Remove it.

Fixes: 738678817573 ("drivers: net: use flow action infrastructure")
	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
	Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c0bc5d8e2badeebe14b4005da794a8705b69320e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/flower/action.c
diff --cc drivers/net/ethernet/netronome/nfp/flower/action.c
index 7b217d7285c7,eeda4ed98333..000000000000
--- a/drivers/net/ethernet/netronome/nfp/flower/action.c
+++ b/drivers/net/ethernet/netronome/nfp/flower/action.c
@@@ -344,7 -345,7 +344,11 @@@ static void nfp_fl_set_helper32(u32 val
  }
  
  static int
++<<<<<<< HEAD
 +nfp_fl_set_eth(const struct tc_action *action, int idx, u32 off,
++=======
+ nfp_fl_set_eth(const struct flow_action_entry *act, u32 off,
++>>>>>>> c0bc5d8e2bad (nfp: flower: remove unused index from nfp_fl_pedit())
  	       struct nfp_fl_set_eth *set_eth)
  {
  	u32 exact, mask;
@@@ -375,7 -376,7 +379,11 @@@ struct ipv4_ttl_word 
  };
  
  static int
++<<<<<<< HEAD
 +nfp_fl_set_ip4(const struct tc_action *action, int idx, u32 off,
++=======
+ nfp_fl_set_ip4(const struct flow_action_entry *act, u32 off,
++>>>>>>> c0bc5d8e2bad (nfp: flower: remove unused index from nfp_fl_pedit())
  	       struct nfp_fl_set_ip4_addrs *set_ip_addr,
  	       struct nfp_fl_set_ip4_ttl_tos *set_ip_ttl_tos)
  {
@@@ -504,7 -505,7 +512,11 @@@ nfp_fl_set_ip6_hop_limit_flow_label(u3
  }
  
  static int
++<<<<<<< HEAD
 +nfp_fl_set_ip6(const struct tc_action *action, int idx, u32 off,
++=======
+ nfp_fl_set_ip6(const struct flow_action_entry *act, u32 off,
++>>>>>>> c0bc5d8e2bad (nfp: flower: remove unused index from nfp_fl_pedit())
  	       struct nfp_fl_set_ipv6_addr *ip_dst,
  	       struct nfp_fl_set_ipv6_addr *ip_src,
  	       struct nfp_fl_set_ipv6_tc_hl_fl *ip_hl_fl)
@@@ -540,7 -541,7 +552,11 @@@
  }
  
  static int
++<<<<<<< HEAD
 +nfp_fl_set_tport(const struct tc_action *action, int idx, u32 off,
++=======
+ nfp_fl_set_tport(const struct flow_action_entry *act, u32 off,
++>>>>>>> c0bc5d8e2bad (nfp: flower: remove unused index from nfp_fl_pedit())
  		 struct nfp_fl_set_tport *set_tport, int opcode)
  {
  	u32 exact, mask;
@@@ -590,13 -593,13 +606,18 @@@ nfp_fl_pedit(const struct tc_action *ac
  	struct nfp_fl_set_ipv6_tc_hl_fl set_ip6_tc_hl_fl;
  	struct nfp_fl_set_ip4_ttl_tos set_ip_ttl_tos;
  	struct nfp_fl_set_ip4_addrs set_ip_addr;
 -	enum flow_action_mangle_base htype;
  	struct nfp_fl_set_tport set_tport;
  	struct nfp_fl_set_eth set_eth;
 +	enum pedit_header_type htype;
 +	int idx, nkeys, err;
  	size_t act_size = 0;
 +	u32 offset, cmd;
  	u8 ip_proto = 0;
++<<<<<<< HEAD
++=======
+ 	u32 offset;
+ 	int err;
++>>>>>>> c0bc5d8e2bad (nfp: flower: remove unused index from nfp_fl_pedit())
  
  	memset(&set_ip6_tc_hl_fl, 0, sizeof(set_ip6_tc_hl_fl));
  	memset(&set_ip_ttl_tos, 0, sizeof(set_ip_ttl_tos));
@@@ -605,50 -608,41 +626,75 @@@
  	memset(&set_ip_addr, 0, sizeof(set_ip_addr));
  	memset(&set_tport, 0, sizeof(set_tport));
  	memset(&set_eth, 0, sizeof(set_eth));
 +	nkeys = tcf_pedit_nkeys(action);
  
 -	htype = act->mangle.htype;
 -	offset = act->mangle.offset;
 +	for (idx = 0; idx < nkeys; idx++) {
 +		cmd = tcf_pedit_cmd(action, idx);
 +		htype = tcf_pedit_htype(action, idx);
 +		offset = tcf_pedit_offset(action, idx);
  
++<<<<<<< HEAD
 +		if (cmd != TCA_PEDIT_KEY_EX_CMD_SET)
 +			return -EOPNOTSUPP;
 +
 +		switch (htype) {
 +		case TCA_PEDIT_KEY_EX_HDR_TYPE_ETH:
 +			err = nfp_fl_set_eth(action, idx, offset, &set_eth);
 +			break;
 +		case TCA_PEDIT_KEY_EX_HDR_TYPE_IP4:
 +			err = nfp_fl_set_ip4(action, idx, offset, &set_ip_addr,
 +					     &set_ip_ttl_tos);
 +			break;
 +		case TCA_PEDIT_KEY_EX_HDR_TYPE_IP6:
 +			err = nfp_fl_set_ip6(action, idx, offset, &set_ip6_dst,
 +					     &set_ip6_src, &set_ip6_tc_hl_fl);
 +			break;
 +		case TCA_PEDIT_KEY_EX_HDR_TYPE_TCP:
 +			err = nfp_fl_set_tport(action, idx, offset, &set_tport,
 +					       NFP_FL_ACTION_OPCODE_SET_TCP);
 +			break;
 +		case TCA_PEDIT_KEY_EX_HDR_TYPE_UDP:
 +			err = nfp_fl_set_tport(action, idx, offset, &set_tport,
 +					       NFP_FL_ACTION_OPCODE_SET_UDP);
 +			break;
 +		default:
 +			return -EOPNOTSUPP;
 +		}
 +		if (err)
 +			return err;
++=======
+ 	switch (htype) {
+ 	case TCA_PEDIT_KEY_EX_HDR_TYPE_ETH:
+ 		err = nfp_fl_set_eth(act, offset, &set_eth);
+ 		break;
+ 	case TCA_PEDIT_KEY_EX_HDR_TYPE_IP4:
+ 		err = nfp_fl_set_ip4(act, offset, &set_ip_addr,
+ 				     &set_ip_ttl_tos);
+ 		break;
+ 	case TCA_PEDIT_KEY_EX_HDR_TYPE_IP6:
+ 		err = nfp_fl_set_ip6(act, offset, &set_ip6_dst,
+ 				     &set_ip6_src, &set_ip6_tc_hl_fl);
+ 		break;
+ 	case TCA_PEDIT_KEY_EX_HDR_TYPE_TCP:
+ 		err = nfp_fl_set_tport(act, offset, &set_tport,
+ 				       NFP_FL_ACTION_OPCODE_SET_TCP);
+ 		break;
+ 	case TCA_PEDIT_KEY_EX_HDR_TYPE_UDP:
+ 		err = nfp_fl_set_tport(act, offset, &set_tport,
+ 				       NFP_FL_ACTION_OPCODE_SET_UDP);
+ 		break;
+ 	default:
+ 		return -EOPNOTSUPP;
++>>>>>>> c0bc5d8e2bad (nfp: flower: remove unused index from nfp_fl_pedit())
  	}
 -	if (err)
 -		return err;
  
 -	if (flow_rule_match_key(rule, FLOW_DISSECTOR_KEY_BASIC)) {
 -		struct flow_match_basic match;
 +	if (dissector_uses_key(flow->dissector, FLOW_DISSECTOR_KEY_BASIC)) {
 +		struct flow_dissector_key_basic *basic;
  
 -		flow_rule_match_basic(rule, &match);
 -		ip_proto = match.key->ip_proto;
 +		basic = skb_flow_dissector_target(flow->dissector,
 +						  FLOW_DISSECTOR_KEY_BASIC,
 +						  flow->key);
 +		ip_proto = basic->ip_proto;
  	}
  
  	if (set_eth.head.len_lw) {
* Unmerged path drivers/net/ethernet/netronome/nfp/flower/action.c
