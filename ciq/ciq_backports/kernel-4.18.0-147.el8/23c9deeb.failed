fanotify: deprecate uapi FAN_ALL_* constants

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Amir Goldstein <amir73il@gmail.com>
commit 23c9deeb3285d34fd243abb3d6b9f07db60c3cf4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/23c9deeb.failed

We do not want to add new bits to the FAN_ALL_* uapi constants
because they have been exposed to userspace.  If there are programs
out there using these constants, those programs could break if
re-compiled with modified FAN_ALL_* constants and run on an old kernel.

We deprecate the uapi constants FAN_ALL_* and define new FANOTIFY_*
constants for internal use to replace them. New feature bits will be
added only to the new constants.

	Cc: <linux-api@vger.kernel.org>
	Signed-off-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
(cherry picked from commit 23c9deeb3285d34fd243abb3d6b9f07db60c3cf4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/notify/fanotify/fanotify_user.c
#	include/uapi/linux/fanotify.h
diff --cc fs/notify/fanotify/fanotify_user.c
index 5c361e628c83,530e5e486105..000000000000
--- a/fs/notify/fanotify/fanotify_user.c
+++ b/fs/notify/fanotify/fanotify_user.c
@@@ -831,7 -803,8 +831,12 @@@ static int do_fanotify_mark(int fanotif
  	struct fsnotify_group *group;
  	struct fd f;
  	struct path path;
++<<<<<<< HEAD
 +	u32 valid_mask = FAN_ALL_EVENTS | FAN_EVENT_ON_CHILD;
++=======
+ 	u32 valid_mask = FANOTIFY_EVENTS | FAN_EVENT_ON_CHILD | FAN_ONDIR;
+ 	unsigned int mark_type = flags & FANOTIFY_MARK_TYPE_BITS;
++>>>>>>> 23c9deeb3285 (fanotify: deprecate uapi FAN_ALL_* constants)
  	int ret;
  
  	pr_debug("%s: fanotify_fd=%d flags=%x dfd=%d pathname=%p mask=%llx\n",
@@@ -841,8 -814,18 +846,8 @@@
  	if (mask & ((__u64)0xffffffff << 32))
  		return -EINVAL;
  
- 	if (flags & ~FAN_ALL_MARK_FLAGS)
+ 	if (flags & ~FANOTIFY_MARK_FLAGS)
  		return -EINVAL;
 -
 -	switch (mark_type) {
 -	case FAN_MARK_INODE:
 -	case FAN_MARK_MOUNT:
 -	case FAN_MARK_FILESYSTEM:
 -		break;
 -	default:
 -		return -EINVAL;
 -	}
 -
  	switch (flags & (FAN_MARK_ADD | FAN_MARK_REMOVE | FAN_MARK_FLUSH)) {
  	case FAN_MARK_ADD:		/* fallthrough */
  	case FAN_MARK_REMOVE:
@@@ -850,20 -833,15 +855,24 @@@
  			return -EINVAL;
  		break;
  	case FAN_MARK_FLUSH:
++<<<<<<< HEAD
 +		if (flags & ~(FAN_MARK_MOUNT | FAN_MARK_FLUSH))
++=======
+ 		if (flags & ~(FANOTIFY_MARK_TYPE_BITS | FAN_MARK_FLUSH))
++>>>>>>> 23c9deeb3285 (fanotify: deprecate uapi FAN_ALL_* constants)
  			return -EINVAL;
  		break;
  	default:
  		return -EINVAL;
  	}
  
 +	if (mask & FAN_ONDIR) {
 +		flags |= FAN_MARK_ONDIR;
 +		mask &= ~FAN_ONDIR;
 +	}
 +
  	if (IS_ENABLED(CONFIG_FANOTIFY_ACCESS_PERMISSIONS))
- 		valid_mask |= FAN_ALL_PERM_EVENTS;
+ 		valid_mask |= FANOTIFY_PERM_EVENTS;
  
  	if (mask & ~valid_mask)
  		return -EINVAL;
diff --cc include/uapi/linux/fanotify.h
index 74247917de04,d0c05de670ef..000000000000
--- a/include/uapi/linux/fanotify.h
+++ b/include/uapi/linux/fanotify.h
@@@ -51,7 -54,14 +54,17 @@@
  #define FAN_MARK_IGNORED_MASK	0x00000020
  #define FAN_MARK_IGNORED_SURV_MODIFY	0x00000040
  #define FAN_MARK_FLUSH		0x00000080
++<<<<<<< HEAD
++=======
+ /* FAN_MARK_FILESYSTEM is	0x00000100 */
+ 
+ /* These are NOT bitwise flags.  Both bits can be used togther.  */
+ #define FAN_MARK_INODE		0x00000000
+ #define FAN_MARK_MOUNT		0x00000010
+ #define FAN_MARK_FILESYSTEM	0x00000100
++>>>>>>> 23c9deeb3285 (fanotify: deprecate uapi FAN_ALL_* constants)
  
+ /* Deprecated - do not use this in programs and do not add new flags here! */
  #define FAN_ALL_MARK_FLAGS	(FAN_MARK_ADD |\
  				 FAN_MARK_REMOVE |\
  				 FAN_MARK_DONT_FOLLOW |\
diff --git a/fs/notify/fanotify/fanotify.c b/fs/notify/fanotify/fanotify.c
index cdce46db0d71..51ad5aa6ce7a 100644
--- a/fs/notify/fanotify/fanotify.c
+++ b/fs/notify/fanotify/fanotify.c
@@ -130,8 +130,8 @@ static bool fanotify_should_send_event(struct fsnotify_iter_info *iter_info,
 	    !(marks_mask & FS_ISDIR & ~marks_ignored_mask))
 		return false;
 
-	if (event_mask & FAN_ALL_OUTGOING_EVENTS & marks_mask &
-				 ~marks_ignored_mask)
+	if (event_mask & FANOTIFY_OUTGOING_EVENTS &
+	    marks_mask & ~marks_ignored_mask)
 		return true;
 
 	return false;
@@ -230,7 +230,7 @@ static int fanotify_handle_event(struct fsnotify_group *group,
 	ret = fsnotify_add_event(group, fsn_event, fanotify_merge);
 	if (ret) {
 		/* Permission events shouldn't be merged */
-		BUG_ON(ret == 1 && mask & FAN_ALL_PERM_EVENTS);
+		BUG_ON(ret == 1 && mask & FANOTIFY_PERM_EVENTS);
 		/* Our event wasn't used in the end. Free it. */
 		fsnotify_destroy_event(group, fsn_event);
 
diff --git a/fs/notify/fanotify/fanotify.h b/fs/notify/fanotify/fanotify.h
index 8609ba06f474..88a8290a61cb 100644
--- a/fs/notify/fanotify/fanotify.h
+++ b/fs/notify/fanotify/fanotify.h
@@ -44,7 +44,7 @@ FANOTIFY_PE(struct fsnotify_event *fse)
 static inline bool fanotify_is_perm_event(u32 mask)
 {
 	return IS_ENABLED(CONFIG_FANOTIFY_ACCESS_PERMISSIONS) &&
-		mask & FAN_ALL_PERM_EVENTS;
+		mask & FANOTIFY_PERM_EVENTS;
 }
 
 static inline struct fanotify_event_info *FANOTIFY_E(struct fsnotify_event *fse)
* Unmerged path fs/notify/fanotify/fanotify_user.c
diff --git a/include/linux/fanotify.h b/include/linux/fanotify.h
index e70fccc3757e..f47ca2995aef 100644
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@ -10,4 +10,51 @@
 #define FAN_GROUP_FLAG(group, flag) \
 	((group)->fanotify_data.flags & (flag))
 
+/*
+ * Flags allowed to be passed from/to userspace.
+ *
+ * We intentionally do not add new bits to the old FAN_ALL_* constants, because
+ * they are uapi exposed constants. If there are programs out there using
+ * these constant, the programs may break if re-compiled with new uapi headers
+ * and then run on an old kernel.
+ */
+#define FANOTIFY_CLASS_BITS	(FAN_CLASS_NOTIF | FAN_CLASS_CONTENT | \
+				 FAN_CLASS_PRE_CONTENT)
+
+#define FANOTIFY_INIT_FLAGS	(FANOTIFY_CLASS_BITS | \
+				 FAN_CLOEXEC | FAN_NONBLOCK | \
+				 FAN_UNLIMITED_QUEUE | FAN_UNLIMITED_MARKS)
+
+#define FANOTIFY_MARK_TYPE_BITS	(FAN_MARK_INODE | FAN_MARK_MOUNT | \
+				 FAN_MARK_FILESYSTEM)
+
+#define FANOTIFY_MARK_FLAGS	(FANOTIFY_MARK_TYPE_BITS | \
+				 FAN_MARK_ADD | \
+				 FAN_MARK_REMOVE | \
+				 FAN_MARK_DONT_FOLLOW | \
+				 FAN_MARK_ONLYDIR | \
+				 FAN_MARK_IGNORED_MASK | \
+				 FAN_MARK_IGNORED_SURV_MODIFY | \
+				 FAN_MARK_FLUSH)
+
+/* Events that user can request to be notified on */
+#define FANOTIFY_EVENTS		(FAN_ACCESS | FAN_MODIFY | \
+				 FAN_CLOSE | FAN_OPEN)
+
+/* Events that require a permission response from user */
+#define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM)
+
+/* Events that may be reported to user */
+#define FANOTIFY_OUTGOING_EVENTS	(FANOTIFY_EVENTS | \
+					 FANOTIFY_PERM_EVENTS | \
+					 FAN_Q_OVERFLOW)
+
+/* Do not use these old uapi constants internally */
+#undef FAN_ALL_CLASS_BITS
+#undef FAN_ALL_INIT_FLAGS
+#undef FAN_ALL_MARK_FLAGS
+#undef FAN_ALL_EVENTS
+#undef FAN_ALL_PERM_EVENTS
+#undef FAN_ALL_OUTGOING_EVENTS
+
 #endif /* _LINUX_FANOTIFY_H */
* Unmerged path include/uapi/linux/fanotify.h
