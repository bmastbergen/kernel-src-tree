drm/i915: Save the old CDCLK atomic state

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Imre Deak <imre.deak@intel.com>
commit 48d9f87ddd2108663fd866b254e05d422243cc56
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/48d9f87d.failed

The old state will be needed by an upcoming patch to determine if the
commit increases or decreases CDCLK, so move the old state to the atomic
state (while keeping the new one in dev_priv). cdclk.logical and
cdclk.actual in the atomic state isn't used atm anywhere after the
atomic check phase, so this should be safe.

v2:
- Use swap() instead of opencoding it. (Ville)

	Suggested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Signed-off-by: Imre Deak <imre.deak@intel.com>
	Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20190320135439.12201-2-imre.deak@intel.com
(cherry picked from commit 48d9f87ddd2108663fd866b254e05d422243cc56)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_display.c
diff --cc drivers/gpu/drm/i915/intel_display.c
index e393e09c8760,702d28459bee..000000000000
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@@ -12748,8 -13683,10 +12748,15 @@@ static int intel_atomic_commit(struct d
  		       intel_state->min_voltage_level,
  		       sizeof(intel_state->min_voltage_level));
  		dev_priv->active_crtcs = intel_state->active_crtcs;
++<<<<<<< HEAD
 +		dev_priv->cdclk.logical = intel_state->cdclk.logical;
 +		dev_priv->cdclk.actual = intel_state->cdclk.actual;
++=======
+ 		dev_priv->cdclk.force_min_cdclk =
+ 			intel_state->cdclk.force_min_cdclk;
+ 
+ 		intel_cdclk_swap_state(intel_state);
++>>>>>>> 48d9f87ddd21 (drm/i915: Save the old CDCLK atomic state)
  	}
  
  	drm_atomic_state_get(state);
diff --git a/drivers/gpu/drm/i915/intel_cdclk.c b/drivers/gpu/drm/i915/intel_cdclk.c
index 877eb96785d2..7e7ea23c25e4 100644
--- a/drivers/gpu/drm/i915/intel_cdclk.c
+++ b/drivers/gpu/drm/i915/intel_cdclk.c
@@ -2048,6 +2048,26 @@ bool intel_cdclk_changed(const struct intel_cdclk_state *a,
 		a->voltage_level != b->voltage_level;
 }
 
+/**
+ * intel_cdclk_swap_state - make atomic CDCLK configuration effective
+ * @state: atomic state
+ *
+ * This is the CDCLK version of drm_atomic_helper_swap_state() since the
+ * helper does not handle driver-specific global state.
+ *
+ * Similarly to the atomic helpers this function does a complete swap,
+ * i.e. it also puts the old state into @state. This is used by the commit
+ * code to determine how CDCLK has changed (for instance did it increase or
+ * decrease).
+ */
+void intel_cdclk_swap_state(struct intel_atomic_state *state)
+{
+	struct drm_i915_private *dev_priv = to_i915(state->base.dev);
+
+	swap(state->cdclk.logical, dev_priv->cdclk.logical);
+	swap(state->cdclk.actual, dev_priv->cdclk.actual);
+}
+
 void intel_dump_cdclk_state(const struct intel_cdclk_state *cdclk_state,
 			    const char *context)
 {
* Unmerged path drivers/gpu/drm/i915/intel_display.c
diff --git a/drivers/gpu/drm/i915/intel_drv.h b/drivers/gpu/drm/i915/intel_drv.h
index b8eefbffc77d..2e5334c4be4f 100644
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@ -1449,6 +1449,7 @@ bool intel_cdclk_needs_modeset(const struct intel_cdclk_state *a,
 			       const struct intel_cdclk_state *b);
 bool intel_cdclk_changed(const struct intel_cdclk_state *a,
 			 const struct intel_cdclk_state *b);
+void intel_cdclk_swap_state(struct intel_atomic_state *state);
 void intel_set_cdclk(struct drm_i915_private *dev_priv,
 		     const struct intel_cdclk_state *cdclk_state);
 void intel_dump_cdclk_state(const struct intel_cdclk_state *cdclk_state,
