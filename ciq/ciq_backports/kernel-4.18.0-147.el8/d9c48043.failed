XArray: Handle NULL pointers differently for allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Matthew Wilcox <willy@infradead.org>
commit d9c480435add8257f9069941f0e6196647f6d746
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d9c48043.failed

For allocating XArrays, it makes sense to distinguish beteen erasing an
entry and storing NULL.  Storing NULL keeps the index allocated with a
NULL pointer associated with it while xa_erase() frees the index.  Some
existing IDR users rely on this ability.

	Signed-off-by: Matthew Wilcox <willy@infradead.org>
(cherry picked from commit d9c480435add8257f9069941f0e6196647f6d746)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/core-api/xarray.rst
#	lib/xarray.c
diff --cc Documentation/core-api/xarray.rst
index 4b101b4f3aa1,616ac406bf86..000000000000
--- a/Documentation/core-api/xarray.rst
+++ b/Documentation/core-api/xarray.rst
@@@ -103,6 -119,28 +103,31 @@@ Finally, you can remove all entries fro
  to free the entries first.  You can do this by iterating over all present
  entries in the XArray using the :c:func:`xa_for_each` iterator.
  
++<<<<<<< HEAD
++=======
+ Allocating XArrays
+ ------------------
+ 
+ If you use :c:func:`DEFINE_XARRAY_ALLOC` to define the XArray, or
+ initialise it by passing ``XA_FLAGS_ALLOC`` to :c:func:`xa_init_flags`,
+ the XArray changes to track whether entries are in use or not.
+ 
+ You can call :c:func:`xa_alloc` to store the entry at any unused index
+ in the XArray.  If you need to modify the array from interrupt context,
+ you can use :c:func:`xa_alloc_bh` or :c:func:`xa_alloc_irq` to disable
+ interrupts while allocating the ID.
+ 
+ Using :c:func:`xa_store`, :c:func:`xa_cmpxchg` or :c:func:`xa_insert`
+ will mark the entry as being allocated.  Unlike a normal XArray, storing
+ ``NULL`` will mark the entry as being in use, like :c:func:`xa_reserve`.
+ To free an entry, use :c:func:`xa_erase` (or :c:func:`xa_release` if
+ you only want to free the entry if it's ``NULL``).
+ 
+ You cannot use ``XA_MARK_0`` with an allocating XArray as this mark
+ is used to track whether an entry is free or not.  The other marks are
+ available for your use.
+ 
++>>>>>>> d9c480435add (XArray: Handle NULL pointers differently for allocation)
  Memory allocation
  -----------------
  
@@@ -293,6 -343,13 +318,16 @@@ to :c:func:`xas_retry`, and retry the o
         of this RCU period.  You should restart the lookup from the head
         of the array.
  
++<<<<<<< HEAD
++=======
+    * - Zero
+      - :c:func:`xa_is_zero`
+      - Zero entries appear as ``NULL`` through the Normal API, but occupy
+        an entry in the XArray which can be used to reserve the index for
+        future use.  This is used by allocating XArrays for allocated entries
+        which are ``NULL``.
+ 
++>>>>>>> d9c480435add (XArray: Handle NULL pointers differently for allocation)
  Other internal entries may be added in the future.  As far as possible, they
  will be handled by :c:func:`xas_retry`.
  
* Unmerged path lib/xarray.c
* Unmerged path Documentation/core-api/xarray.rst
* Unmerged path lib/xarray.c
