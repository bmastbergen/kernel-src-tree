IB/mlx5: Enable driver uapi commands for flow steering

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit cb80fb189270e7b2c32fa470d40e951852614eb2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/cb80fb18.failed

Expose the mlx5 flow steering parsing trees, exposing the functionality to
user space.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit cb80fb189270e7b2c32fa470d40e951852614eb2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/flow.c
#	drivers/infiniband/hw/mlx5/main.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
diff --cc drivers/infiniband/hw/mlx5/main.c
index 6d899fc16add,a26ab69f3741..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -5303,22 -5516,26 +5303,26 @@@ static void mlx5_ib_cleanup_multiport_m
  	mlx5_nic_vport_disable_roce(dev->mdev);
  }
  
 -ADD_UVERBS_ATTRIBUTES_SIMPLE(
 -	mlx5_ib_dm,
 -	UVERBS_OBJECT_DM,
 -	UVERBS_METHOD_DM_ALLOC,
 -	UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_START_OFFSET,
 -			    UVERBS_ATTR_TYPE(u64),
 -			    UA_MANDATORY),
 -	UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_PAGE_INDEX,
 -			    UVERBS_ATTR_TYPE(u16),
 -			    UA_MANDATORY));
 -
 -ADD_UVERBS_ATTRIBUTES_SIMPLE(
 -	mlx5_ib_flow_action,
 -	UVERBS_OBJECT_FLOW_ACTION,
 -	UVERBS_METHOD_FLOW_ACTION_ESP_CREATE,
 -	UVERBS_ATTR_PTR_IN(MLX5_IB_ATTR_CREATE_FLOW_ACTION_FLAGS,
 -			   UVERBS_ATTR_TYPE(u64),
 -			   UA_MANDATORY));
 -
 +ADD_UVERBS_ATTRIBUTES_SIMPLE(mlx5_ib_dm, UVERBS_OBJECT_DM,
 +			     UVERBS_METHOD_DM_ALLOC,
 +			     &UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_START_OFFSET,
 +						  UVERBS_ATTR_TYPE(u64),
 +						  UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
 +			     &UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_PAGE_INDEX,
 +						  UVERBS_ATTR_TYPE(u16),
 +						  UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)));
 +
 +ADD_UVERBS_ATTRIBUTES_SIMPLE(mlx5_ib_flow_action, UVERBS_OBJECT_FLOW_ACTION,
 +			     UVERBS_METHOD_FLOW_ACTION_ESP_CREATE,
 +			     &UVERBS_ATTR_PTR_IN(MLX5_IB_ATTR_CREATE_FLOW_ACTION_FLAGS,
 +						 UVERBS_ATTR_TYPE(u64),
 +						 UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)));
 +
++<<<<<<< HEAD
 +#define NUM_TREES	2
++=======
+ #define NUM_TREES	5
++>>>>>>> cb80fb189270 (IB/mlx5: Enable driver uapi commands for flow steering)
  static int populate_specs_root(struct mlx5_ib_dev *dev)
  {
  	const struct uverbs_object_tree_def *default_root[NUM_TREES + 1] = {
@@@ -5333,10 -5550,17 +5337,21 @@@
  	    !WARN_ON(num_trees >= ARRAY_SIZE(default_root)))
  		default_root[num_trees++] = &mlx5_ib_dm;
  
++<<<<<<< HEAD
 +	dev->ib_dev.specs_root =
++=======
+ 	if (MLX5_CAP_GEN_64(dev->mdev, general_obj_types) &
+ 			    MLX5_GENERAL_OBJ_TYPES_CAP_UCTX &&
+ 	    !WARN_ON(num_trees >= ARRAY_SIZE(default_root)))
+ 		default_root[num_trees++] = mlx5_ib_get_devx_tree();
+ 
+ 	num_trees += mlx5_ib_get_flow_trees(default_root + num_trees);
+ 
+ 	dev->ib_dev.driver_specs_root =
++>>>>>>> cb80fb189270 (IB/mlx5: Enable driver uapi commands for flow steering)
  		uverbs_alloc_spec_tree(num_trees, default_root);
  
 -	return PTR_ERR_OR_ZERO(dev->ib_dev.driver_specs_root);
 +	return PTR_ERR_OR_ZERO(dev->ib_dev.specs_root);
  }
  
  static void depopulate_specs_root(struct mlx5_ib_dev *dev)
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index dc133aa987e9,462505c8fa25..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -1216,12 -1231,30 +1216,36 @@@ int mlx5_ib_devx_create(struct mlx5_ib_
  			struct mlx5_ib_ucontext *context);
  void mlx5_ib_devx_destroy(struct mlx5_ib_dev *dev,
  			  struct mlx5_ib_ucontext *context);
++<<<<<<< HEAD
++=======
+ const struct uverbs_object_tree_def *mlx5_ib_get_devx_tree(void);
+ struct mlx5_ib_flow_handler *mlx5_ib_raw_fs_rule_add(
+ 	struct mlx5_ib_dev *dev, struct mlx5_ib_flow_matcher *fs_matcher,
+ 	void *cmd_in, int inlen, int dest_id, int dest_type);
+ bool mlx5_ib_devx_is_flow_dest(void *obj, int *dest_id, int *dest_type);
+ int mlx5_ib_get_flow_trees(const struct uverbs_object_tree_def **root);
++>>>>>>> cb80fb189270 (IB/mlx5: Enable driver uapi commands for flow steering)
  #else
  static inline int
  mlx5_ib_devx_create(struct mlx5_ib_dev *dev,
  		    struct mlx5_ib_ucontext *context) { return -EOPNOTSUPP; };
  static inline void mlx5_ib_devx_destroy(struct mlx5_ib_dev *dev,
  					struct mlx5_ib_ucontext *context) {}
++<<<<<<< HEAD
++=======
+ static inline const struct uverbs_object_tree_def *
+ mlx5_ib_get_devx_tree(void) { return NULL; }
+ static inline bool mlx5_ib_devx_is_flow_dest(void *obj, int *dest_id,
+ 					     int *dest_type)
+ {
+ 	return false;
+ }
+ static inline int
+ mlx5_ib_get_flow_trees(const struct uverbs_object_tree_def **root)
+ {
+ 	return 0;
+ }
++>>>>>>> cb80fb189270 (IB/mlx5: Enable driver uapi commands for flow steering)
  #endif
  static inline void init_query_mad(struct ib_smp *mad)
  {
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path drivers/infiniband/hw/mlx5/main.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
