net/ipv4: Put target net when address dump fails due to bad attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [net] ipv4: Put target net when address dump fails due to bad attributes (Petr Oros) [1700306]
Rebuild_FUZZ: 97.06%
commit-author David Ahern <dsahern@gmail.com>
commit d7e38611b81e6d7e14969c361f2b9fc07403a6c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d7e38611.failed

If tgt_net is set based on IFA_TARGET_NETNSID attribute in the dump
request, make sure all error paths call put_net.

Fixes: 5fcd266a9f64 ("net/ipv4: Add support for dumping addresses for a specific device")
Fixes: c33078e3dfb1 ("net/ipv4: Update inet_dump_ifaddr for strict data checking")
	Reported-by: Li RongQing <lirongqing@baidu.com>
	Signed-off-by: David Ahern <dsahern@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d7e38611b81e6d7e14969c361f2b9fc07403a6c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/devinet.c
diff --cc net/ipv4/devinet.c
index 6c015dfe13b4,9250b309c742..000000000000
--- a/net/ipv4/devinet.c
+++ b/net/ipv4/devinet.c
@@@ -1673,25 -1757,36 +1673,52 @@@ static int inet_dump_ifaddr(struct sk_b
  	struct net *tgt_net = net;
  	int h, s_h;
  	int idx, s_idx;
 -	int s_ip_idx;
 +	int ip_idx, s_ip_idx;
  	struct net_device *dev;
  	struct in_device *in_dev;
 +	struct in_ifaddr *ifa;
  	struct hlist_head *head;
++<<<<<<< HEAD
++=======
+ 	int err = 0;
++>>>>>>> d7e38611b81e (net/ipv4: Put target net when address dump fails due to bad attributes)
  
  	s_h = cb->args[0];
  	s_idx = idx = cb->args[1];
 -	s_ip_idx = cb->args[2];
 -
 +	s_ip_idx = ip_idx = cb->args[2];
 +
++<<<<<<< HEAD
 +	if (nlmsg_parse(cb->nlh, sizeof(struct ifaddrmsg), tb, IFA_MAX,
 +			ifa_ipv4_policy, NULL) >= 0) {
 +		if (tb[IFA_TARGET_NETNSID]) {
 +			fillargs.netnsid = nla_get_s32(tb[IFA_TARGET_NETNSID]);
 +
 +			tgt_net = rtnl_get_net_ns_capable(skb->sk,
 +							  fillargs.netnsid);
 +			if (IS_ERR(tgt_net))
 +				return PTR_ERR(tgt_net);
++=======
+ 	if (cb->strict_check) {
+ 		err = inet_valid_dump_ifaddr_req(nlh, &fillargs, &tgt_net,
+ 						 skb->sk, cb);
+ 		if (err < 0)
+ 			goto put_tgt_net;
+ 
+ 		err = 0;
+ 		if (fillargs.ifindex) {
+ 			dev = __dev_get_by_index(tgt_net, fillargs.ifindex);
+ 			if (!dev) {
+ 				err = -ENODEV;
+ 				goto put_tgt_net;
+ 			}
+ 
+ 			in_dev = __in_dev_get_rtnl(dev);
+ 			if (in_dev) {
+ 				err = in_dev_dump_addr(in_dev, skb, cb, s_ip_idx,
+ 						       &fillargs);
+ 			}
+ 			goto put_tgt_net;
++>>>>>>> d7e38611b81e (net/ipv4: Put target net when address dump fails due to bad attributes)
  		}
  	}
  
* Unmerged path net/ipv4/devinet.c
