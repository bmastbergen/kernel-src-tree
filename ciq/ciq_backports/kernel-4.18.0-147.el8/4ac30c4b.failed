bpf: udp: ipv6: Avoid running reuseport's bpf_prog from __udp6_lib_err

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 4ac30c4b3659efac031818c418beb51e630d512d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/4ac30c4b.failed

__udp6_lib_err() may be called when handling icmpv6 message. For example,
the icmpv6 toobig(type=2).  __udp6_lib_lookup() is then called
which may call reuseport_select_sock().  reuseport_select_sock() will
call into a bpf_prog (if there is one).

reuseport_select_sock() is expecting the skb->data pointing to the
transport header (udphdr in this case).  For example, run_bpf_filter()
is pulling the transport header.

However, in the __udp6_lib_err() path, the skb->data is pointing to the
ipv6hdr instead of the udphdr.

One option is to pull and push the ipv6hdr in __udp6_lib_err().
Instead of doing this, this patch follows how the original
commit 538950a1b752 ("soreuseport: setsockopt SO_ATTACH_REUSEPORT_[CE]BPF")
was done in IPv4, which has passed a NULL skb pointer to
reuseport_select_sock().

Fixes: 538950a1b752 ("soreuseport: setsockopt SO_ATTACH_REUSEPORT_[CE]BPF")
	Cc: Craig Gallek <kraig@google.com>
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Song Liu <songliubraving@fb.com>
	Acked-by: Craig Gallek <kraig@google.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 4ac30c4b3659efac031818c418beb51e630d512d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/udp.c
diff --cc net/ipv6/udp.c
index 79e656b8476a,133e6370f89c..000000000000
--- a/net/ipv6/udp.c
+++ b/net/ipv6/udp.c
@@@ -474,11 -515,25 +474,15 @@@ void __udp6_lib_err(struct sk_buff *skb
  	struct net *net = dev_net(skb->dev);
  
  	sk = __udp6_lib_lookup(net, daddr, uh->dest, saddr, uh->source,
++<<<<<<< HEAD
 +			       inet6_iif(skb), 0, udptable, skb);
++=======
+ 			       inet6_iif(skb), inet6_sdif(skb), udptable, NULL);
++>>>>>>> 4ac30c4b3659 (bpf: udp: ipv6: Avoid running reuseport's bpf_prog from __udp6_lib_err)
  	if (!sk) {
 -		/* No socket for error: try tunnels before discarding */
 -		sk = ERR_PTR(-ENOENT);
 -		if (static_branch_unlikely(&udpv6_encap_needed_key)) {
 -			sk = __udp6_lib_err_encap(net, hdr, offset, uh,
 -						  udptable, skb,
 -						  opt, type, code, info);
 -			if (!sk)
 -				return 0;
 -		}
 -
 -		if (IS_ERR(sk)) {
 -			__ICMP6_INC_STATS(net, __in6_dev_get(skb->dev),
 -					  ICMP6_MIB_INERRORS);
 -			return PTR_ERR(sk);
 -		}
 -
 -		tunnel = true;
 +		__ICMP6_INC_STATS(net, __in6_dev_get(skb->dev),
 +				  ICMP6_MIB_INERRORS);
 +		return;
  	}
  
  	harderr = icmpv6_err_convert(type, code, &err);
* Unmerged path net/ipv6/udp.c
