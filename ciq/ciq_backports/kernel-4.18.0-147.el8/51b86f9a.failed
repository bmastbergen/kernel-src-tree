dm: make sure to obey max_io_len_target_boundary

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Michael Lass <bevan@bi-co.net>
commit 51b86f9a8d1c4bb4e3862ee4b4c5f46072f7520d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/51b86f9a.failed

Commit 61697a6abd24 ("dm: eliminate 'split_discard_bios' flag from DM
target interface") incorrectly removed code from
__send_changing_extent_only() that is required to impose a per-target IO
boundary on IO that exceeds max_io_len_target_boundary().  Otherwise
"special" IO (e.g. DISCARD, WRITE SAME, WRITE ZEROES) can write beyond
where allowed.

Fix this by restoring the max_io_len_target_boundary() limit in
__send_changing_extent_only()

Fixes: 61697a6abd24 ("dm: eliminate 'split_discard_bios' flag from DM target interface")
	Cc: stable@vger.kernel.org # 5.1+
	Signed-off-by: Michael Lass <bevan@bi-co.net>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 51b86f9a8d1c4bb4e3862ee4b4c5f46072f7520d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
diff --cc drivers/md/dm.c
index 079ce39c4b66,997385c1ca54..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1479,16 -1466,9 +1479,19 @@@ static unsigned get_num_write_zeroes_bi
  	return ti->num_write_zeroes_bios;
  }
  
 +typedef bool (*is_split_required_fn)(struct dm_target *ti);
 +
 +static bool is_split_required_for_discard(struct dm_target *ti)
 +{
++<<<<<<< HEAD
 +	return ti->split_discard_bios;
 +}
 +
  static int __send_changing_extent_only(struct clone_info *ci, struct dm_target *ti,
 -				       unsigned num_bios)
 +				       unsigned num_bios, bool is_split_required)
  {
++=======
++>>>>>>> 51b86f9a8d1c (dm: make sure to obey max_io_len_target_boundary)
  	unsigned len;
  
  	/*
@@@ -1500,10 -1480,7 +1503,14 @@@
  	if (!num_bios)
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	if (!is_split_required)
 +		len = min((sector_t)ci->sector_count, max_io_len_target_boundary(ci->sector, ti));
 +	else
 +		len = min((sector_t)ci->sector_count, max_io_len(ci->sector, ti));
++=======
+ 	len = min((sector_t)ci->sector_count, max_io_len_target_boundary(ci->sector, ti));
++>>>>>>> 51b86f9a8d1c (dm: make sure to obey max_io_len_target_boundary)
  
  	__send_duplicate_bios(ci, ti, num_bios, &len);
  
* Unmerged path drivers/md/dm.c
