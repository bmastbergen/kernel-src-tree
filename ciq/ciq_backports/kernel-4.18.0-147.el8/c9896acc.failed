s390/ipl: Provide has_secure sysfs attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Philipp Rudo <prudo@linux.ibm.com>
commit c9896acc7851109d4e84c1e3a54cb1b9794dea6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c9896acc.failed

Provide an interface for userspace so it can find out if a machine is
capeable of doing secure boot. The interface is, for example, needed for
zipl so it can find out which file format it can/should write to disk.

	Signed-off-by: Philipp Rudo <prudo@linux.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit c9896acc7851109d4e84c1e3a54cb1b9794dea6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/sclp.h
#	arch/s390/kernel/ipl.c
#	drivers/s390/char/sclp.h
diff --cc arch/s390/include/asm/sclp.h
index 0cd4bda85eb1,ef5d8fa92122..000000000000
--- a/arch/s390/include/asm/sclp.h
+++ b/arch/s390/include/asm/sclp.h
@@@ -78,6 -78,9 +78,12 @@@ struct sclp_info 
  	unsigned char has_skey : 1;
  	unsigned char has_kss : 1;
  	unsigned char has_gisaf : 1;
++<<<<<<< HEAD
++=======
+ 	unsigned char has_diag318 : 1;
+ 	unsigned char has_sipl : 1;
+ 	unsigned char has_sipl_g2 : 1;
++>>>>>>> c9896acc7851 (s390/ipl: Provide has_secure sysfs attribute)
  	unsigned int ibc;
  	unsigned int mtid;
  	unsigned int mtid_cp;
diff --cc arch/s390/kernel/ipl.c
index b2b944085114,e123c0df83f1..000000000000
--- a/arch/s390/kernel/ipl.c
+++ b/arch/s390/kernel/ipl.c
@@@ -264,6 -274,29 +264,32 @@@ static ssize_t ipl_type_show(struct kob
  
  static struct kobj_attribute sys_ipl_type_attr = __ATTR_RO(ipl_type);
  
++<<<<<<< HEAD
++=======
+ static ssize_t ipl_secure_show(struct kobject *kobj,
+ 			       struct kobj_attribute *attr, char *page)
+ {
+ 	return sprintf(page, "%i\n", !!ipl_secure_flag);
+ }
+ 
+ static struct kobj_attribute sys_ipl_secure_attr =
+ 	__ATTR(secure, 0444, ipl_secure_show, NULL);
+ 
+ static ssize_t ipl_has_secure_show(struct kobject *kobj,
+ 				   struct kobj_attribute *attr, char *page)
+ {
+ 	if (MACHINE_IS_LPAR)
+ 		return sprintf(page, "%i\n", !!sclp.has_sipl);
+ 	else if (MACHINE_IS_VM)
+ 		return sprintf(page, "%i\n", !!sclp.has_sipl_g2);
+ 	else
+ 		return sprintf(page, "%i\n", 0);
+ }
+ 
+ static struct kobj_attribute sys_ipl_has_secure_attr =
+ 	__ATTR(has_secure, 0444, ipl_has_secure_show, NULL);
+ 
++>>>>>>> c9896acc7851 (s390/ipl: Provide has_secure sysfs attribute)
  static ssize_t ipl_vm_parm_show(struct kobject *kobj,
  				struct kobj_attribute *attr, char *page)
  {
@@@ -359,6 -392,8 +385,11 @@@ static struct attribute *ipl_fcp_attrs[
  	&sys_ipl_fcp_bootprog_attr.attr,
  	&sys_ipl_fcp_br_lba_attr.attr,
  	&sys_ipl_ccw_loadparm_attr.attr,
++<<<<<<< HEAD
++=======
+ 	&sys_ipl_secure_attr.attr,
+ 	&sys_ipl_has_secure_attr.attr,
++>>>>>>> c9896acc7851 (s390/ipl: Provide has_secure sysfs attribute)
  	NULL,
  };
  
@@@ -374,6 -409,8 +405,11 @@@ static struct attribute *ipl_ccw_attrs_
  	&sys_ipl_device_attr.attr,
  	&sys_ipl_ccw_loadparm_attr.attr,
  	&sys_ipl_vm_parm_attr.attr,
++<<<<<<< HEAD
++=======
+ 	&sys_ipl_secure_attr.attr,
+ 	&sys_ipl_has_secure_attr.attr,
++>>>>>>> c9896acc7851 (s390/ipl: Provide has_secure sysfs attribute)
  	NULL,
  };
  
@@@ -381,6 -418,8 +417,11 @@@ static struct attribute *ipl_ccw_attrs_
  	&sys_ipl_type_attr.attr,
  	&sys_ipl_device_attr.attr,
  	&sys_ipl_ccw_loadparm_attr.attr,
++<<<<<<< HEAD
++=======
+ 	&sys_ipl_secure_attr.attr,
+ 	&sys_ipl_has_secure_attr.attr,
++>>>>>>> c9896acc7851 (s390/ipl: Provide has_secure sysfs attribute)
  	NULL,
  };
  
diff --cc drivers/s390/char/sclp.h
index b3fcc24b1182,287382dc21c5..000000000000
--- a/drivers/s390/char/sclp.h
+++ b/drivers/s390/char/sclp.h
@@@ -195,7 -195,11 +195,15 @@@ struct read_info_sccb 
  	u16	hcpua;			/* 120-121 */
  	u8	_pad_122[124 - 122];	/* 122-123 */
  	u32	hmfai;			/* 124-127 */
++<<<<<<< HEAD
 +	u8	_pad_128[4096 - 128];	/* 128-4095 */
++=======
+ 	u8	_pad_128[134 - 128];	/* 128-133 */
+ 	u8	byte_134;			/* 134 */
+ 	u8	_pad_135;		/* 135 */
+ 	u16	cbl;			/* 136-137 */
+ 	u8	_pad_138[4096 - 138];	/* 138-4095 */
++>>>>>>> c9896acc7851 (s390/ipl: Provide has_secure sysfs attribute)
  } __packed __aligned(PAGE_SIZE);
  
  struct read_storage_sccb {
* Unmerged path arch/s390/include/asm/sclp.h
* Unmerged path arch/s390/kernel/ipl.c
* Unmerged path drivers/s390/char/sclp.h
diff --git a/drivers/s390/char/sclp_early.c b/drivers/s390/char/sclp_early.c
index e792cee3b51c..7331f11e9cf9 100644
--- a/drivers/s390/char/sclp_early.c
+++ b/drivers/s390/char/sclp_early.c
@@ -40,6 +40,8 @@ static void __init sclp_early_facilities_detect(struct read_info_sccb *sccb)
 	sclp.has_gisaf = !!(sccb->fac118 & 0x08);
 	sclp.has_hvs = !!(sccb->fac119 & 0x80);
 	sclp.has_kss = !!(sccb->fac98 & 0x01);
+	sclp.has_sipl = !!(sccb->cbl & 0x02);
+	sclp.has_sipl_g2 = !!(sccb->cbl & 0x04);
 	if (sccb->fac85 & 0x02)
 		S390_lowcore.machine_flags |= MACHINE_FLAG_ESOP;
 	if (sccb->fac91 & 0x40)
