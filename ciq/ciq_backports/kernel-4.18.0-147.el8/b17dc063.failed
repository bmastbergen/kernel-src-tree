iwlwifi: fix AX201 killer sku loading firmware issue

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Matt Chen <matt.chen@intel.com>
commit b17dc0632a17fbfe66b34ee7c24e1cc10cfc503e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/b17dc063.failed

When try to bring up the AX201 2 killer sku, we
run into:
[81261.392463] iwlwifi 0000:01:00.0: loaded firmware version 46.8c20f243.0 op_mode iwlmvm
[81261.407407] iwlwifi 0000:01:00.0: Detected Intel(R) Dual Band Wireless AX 22000, REV=0x340
[81262.424778] iwlwifi 0000:01:00.0: Collecting data: trigger 16 fired.
[81262.673359] iwlwifi 0000:01:00.0: Start IWL Error Log Dump:
[81262.673365] iwlwifi 0000:01:00.0: Status: 0x00000000, count: -906373681
[81262.673368] iwlwifi 0000:01:00.0: Loaded firmware version: 46.8c20f243.0
[81262.673371] iwlwifi 0000:01:00.0: 0x507C015D | ADVANCED_SYSASSERT

Fix this issue by adding 2 more cfg to avoid modifying the
original cfg configuration.

	Signed-off-by: Matt Chen <matt.chen@intel.com>
	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
	Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
(cherry picked from commit b17dc0632a17fbfe66b34ee7c24e1cc10cfc503e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/pcie/trans.c
diff --cc drivers/net/wireless/intel/iwlwifi/pcie/trans.c
index a2a98087eb41,dfa1bed124aa..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/pcie/trans.c
+++ b/drivers/net/wireless/intel/iwlwifi/pcie/trans.c
@@@ -3349,7 -3560,48 +3349,52 @@@ struct iwl_trans *iwl_trans_pcie_alloc(
  
  #if IS_ENABLED(CONFIG_IWLMVM)
  	trans->hw_rf_id = iwl_read32(trans, CSR_HW_RF_ID);
++<<<<<<< HEAD
 +	if (trans->hw_rf_id == CSR_HW_RF_ID_TYPE_HR) {
++=======
+ 
+ 	if (cfg == &iwlax210_2ax_cfg_so_hr_a0) {
+ 		if (trans->hw_rev == CSR_HW_REV_TYPE_TY) {
+ 			trans->cfg = &iwlax210_2ax_cfg_ty_gf_a0;
+ 		} else if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 			   CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_JF)) {
+ 			trans->cfg = &iwlax210_2ax_cfg_so_jf_a0;
+ 		} else if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 			   CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_GF)) {
+ 			trans->cfg = &iwlax210_2ax_cfg_so_gf_a0;
+ 		} else if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 			   CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_GF4)) {
+ 			trans->cfg = &iwlax210_2ax_cfg_so_gf4_a0;
+ 		}
+ 	} else if (cfg == &iwl_ax101_cfg_qu_hr) {
+ 		if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 		    CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_HR) &&
+ 		    trans->hw_rev == CSR_HW_REV_TYPE_QNJ_B0) {
+ 			trans->cfg = &iwl22000_2ax_cfg_qnj_hr_b0;
+ 		} else if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 		    CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_HR)) {
+ 			trans->cfg = &iwl_ax101_cfg_qu_hr;
+ 		} else if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 			   CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_JF)) {
+ 			trans->cfg = &iwl22000_2ax_cfg_jf;
+ 		} else if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 			   CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_HRCDB)) {
+ 			IWL_ERR(trans, "RF ID HRCDB is not supported\n");
+ 			ret = -EINVAL;
+ 			goto out_no_pci;
+ 		} else {
+ 			IWL_ERR(trans, "Unrecognized RF ID 0x%08x\n",
+ 				CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id));
+ 			ret = -EINVAL;
+ 			goto out_no_pci;
+ 		}
+ 	} else if (CSR_HW_RF_ID_TYPE_CHIP_ID(trans->hw_rf_id) ==
+ 		   CSR_HW_RF_ID_TYPE_CHIP_ID(CSR_HW_RF_ID_TYPE_HR) &&
+ 		   ((trans->cfg != &iwl_ax200_cfg_cc &&
+ 		    trans->cfg != &killer1650x_2ax_cfg &&
+ 		    trans->cfg != &killer1650w_2ax_cfg) ||
+ 		    trans->hw_rev == CSR_HW_REV_TYPE_QNJ_B0)) {
++>>>>>>> b17dc0632a17 (iwlwifi: fix AX201 killer sku loading firmware issue)
  		u32 hw_status;
  
  		hw_status = iwl_read_prph(trans, UMAG_GEN_HW_STATUS);
* Unmerged path drivers/net/wireless/intel/iwlwifi/pcie/trans.c
