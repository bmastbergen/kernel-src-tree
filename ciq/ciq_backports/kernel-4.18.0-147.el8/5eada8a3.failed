powerpc/iommu_api: Move IOMMU groups setup to a single place

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Alexey Kardashevskiy <aik@ozlabs.ru>
commit 5eada8a3f087df74af1c2797770a3e2249374fe1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/5eada8a3.failed

Registering new IOMMU groups and adding devices to them are separated in
code and the latter is dug in the DMA setup code which it does not
really belong to.

This moved IOMMU groups setup to a separate helper which registers a group
and adds devices as before. This does not make a difference as IOMMU
groups are not used anyway; the only dependency here is that
iommu_add_device() requires a valid pointer to an iommu_table
(set by set_iommu_table_base()).

To keep the old behaviour, this does not add new IOMMU groups for PEs
with no DMA weight and also skips NVLink bridges which do not have
pci_controller_ops::setup_bridge (the normal way of adding PEs).

	Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
	Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 5eada8a3f087df74af1c2797770a3e2249374fe1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/pci-ioda.c
diff --cc arch/powerpc/platforms/powernv/pci-ioda.c
index 3f41331e99e8,59db3b0f23d3..000000000000
--- a/arch/powerpc/platforms/powernv/pci-ioda.c
+++ b/arch/powerpc/platforms/powernv/pci-ioda.c
@@@ -1933,12 -1938,9 +1937,14 @@@ static void pnv_ioda_setup_bus_dma(stru
  	list_for_each_entry(dev, &bus->devices, bus_list) {
  		set_iommu_table_base(&dev->dev, pe->table_group.tables[0]);
  		set_dma_offset(&dev->dev, pe->tce_bypass_base);
++<<<<<<< HEAD
 +		if (add_to_group)
 +			iommu_add_device(&dev->dev);
++=======
++>>>>>>> 5eada8a3f087 (powerpc/iommu_api: Move IOMMU groups setup to a single place)
  
  		if ((pe->flags & PNV_IODA_PE_BUS_ALL) && dev->subordinate)
- 			pnv_ioda_setup_bus_dma(pe, dev->subordinate,
- 					add_to_group);
+ 			pnv_ioda_setup_bus_dma(pe, dev->subordinate);
  	}
  }
  
@@@ -2836,10 -2873,9 +2895,10 @@@ static void pnv_pci_ioda2_setup_dma_pe(
  		return;
  
  	if (pe->flags & (PNV_IODA_PE_BUS | PNV_IODA_PE_BUS_ALL))
- 		pnv_ioda_setup_bus_dma(pe, pe->pbus, true);
+ 		pnv_ioda_setup_bus_dma(pe, pe->pbus);
  }
  
 +#ifdef CONFIG_PCI_MSI
  int64_t pnv_opal_pci_msi_eoi(struct irq_chip *chip, unsigned int hw_irq)
  {
  	struct pnv_phb *phb = container_of(chip, struct pnv_phb,
* Unmerged path arch/powerpc/platforms/powernv/pci-ioda.c
