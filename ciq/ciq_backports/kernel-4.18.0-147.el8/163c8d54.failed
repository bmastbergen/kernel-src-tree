compiler: remove __no_sanitize_address_or_inline again

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Martin Schwidefsky <schwidefsky@de.ibm.com>
commit 163c8d54a997153ee1a1e07fcac087492ad85b37
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/163c8d54.failed

The __no_sanitize_address_or_inline and __no_kasan_or_inline defines
are almost identical. The only difference is that __no_kasan_or_inline
does not have the 'notrace' attribute.

To be able to replace __no_sanitize_address_or_inline with the older
definition, add 'notrace' to __no_kasan_or_inline and change to two
users of __no_sanitize_address_or_inline in the s390 code.

The 'notrace' option is necessary for e.g. the __load_psw_mask function
in arch/s390/include/asm/processor.h. Without the option it is possible
to trace __load_psw_mask which leads to kernel stack overflow.

	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Pointed-out-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 163c8d54a997153ee1a1e07fcac087492ad85b37)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/processor.h
#	include/linux/compiler-gcc.h
diff --cc arch/s390/include/asm/processor.h
index bfe6147cf39c,81038ab357ce..000000000000
--- a/arch/s390/include/asm/processor.h
+++ b/arch/s390/include/asm/processor.h
@@@ -250,7 -236,7 +250,11 @@@ static inline unsigned long current_sta
  	return sp;
  }
  
++<<<<<<< HEAD
 +static inline unsigned short stap(void)
++=======
+ static __no_kasan_or_inline unsigned short stap(void)
++>>>>>>> 163c8d54a997 (compiler: remove __no_sanitize_address_or_inline again)
  {
  	unsigned short cpu_address;
  
@@@ -295,7 -330,7 +299,11 @@@ static inline void __load_psw(psw_t psw
   * Set PSW mask to specified value, while leaving the
   * PSW addr pointing to the next instruction.
   */
++<<<<<<< HEAD
 +static inline void __load_psw_mask(unsigned long mask)
++=======
+ static __no_kasan_or_inline void __load_psw_mask(unsigned long mask)
++>>>>>>> 163c8d54a997 (compiler: remove __no_sanitize_address_or_inline again)
  {
  	unsigned long addr;
  	psw_t psw;
diff --cc include/linux/compiler-gcc.h
index a211828a4ef4,2010493e1040..000000000000
--- a/include/linux/compiler-gcc.h
+++ b/include/linux/compiler-gcc.h
@@@ -326,46 -143,6 +326,49 @@@
  #define KASAN_ABI_VERSION 3
  #endif
  
++<<<<<<< HEAD
 +#if GCC_VERSION >= 40902
 +/*
 + * Tell the compiler that address safety instrumentation (KASAN)
 + * should not be applied to that function.
 + * Conflicts with inlining: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67368
 + */
 +#define __no_sanitize_address __attribute__((no_sanitize_address))
 +#ifdef CONFIG_KASAN
 +#define __no_sanitize_address_or_inline					\
 +	__no_sanitize_address __maybe_unused notrace
 +#else
 +#define __no_sanitize_address_or_inline inline
 +#endif
 +#endif
 +
 +#if GCC_VERSION >= 50100
 +/*
 + * Mark structures as requiring designated initializers.
 + * https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html
 + */
 +#define __designated_init __attribute__((designated_init))
 +#endif
 +
 +#endif	/* gcc version >= 40000 specific checks */
 +
 +#if !defined(__noclone)
 +#define __noclone	/* not needed */
 +#endif
 +
 +#if !defined(__no_sanitize_address)
 +#define __no_sanitize_address
 +#define __no_sanitize_address_or_inline inline
 +#endif
 +
 +/*
 + * A trick to suppress uninitialized variable warning without generating any
 + * code
 + */
 +#define uninitialized_var(x) x = x
 +
++=======
++>>>>>>> 163c8d54a997 (compiler: remove __no_sanitize_address_or_inline again)
  #if GCC_VERSION >= 50100
  #define COMPILER_HAS_GENERIC_BUILTIN_OVERFLOW 1
  #endif
* Unmerged path arch/s390/include/asm/processor.h
* Unmerged path include/linux/compiler-gcc.h
diff --git a/include/linux/compiler.h b/include/linux/compiler.h
index 42506e4d1f53..10862a289df3 100644
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -195,7 +195,7 @@ void __read_once_size(const volatile void *p, void *res, int size)
  * 	https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67368
  * '__maybe_unused' allows us to avoid defined-but-not-used warnings.
  */
-# define __no_kasan_or_inline __no_sanitize_address __maybe_unused
+# define __no_kasan_or_inline __no_sanitize_address notrace __maybe_unused
 #else
 # define __no_kasan_or_inline __always_inline
 #endif
