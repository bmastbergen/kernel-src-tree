arm64: add sysfs vulnerability show for spectre-v2

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Jeremy Linton <jeremy.linton@arm.com>
commit d2532e27b5638bb2e2dd52b80b7ea2ec65135377
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d2532e27.failed

Track whether all the cores in the machine are vulnerable to Spectre-v2,
and whether all the vulnerable cores have been mitigated. We then expose
this information to userspace via sysfs.

	Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
	Reviewed-by: Andre Przywara <andre.przywara@arm.com>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit d2532e27b5638bb2e2dd52b80b7ea2ec65135377)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/cpu_errata.c
diff --cc arch/arm64/kernel/cpu_errata.c
index fde6f87a8b7e,d2bbafa04b3c..000000000000
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@@ -454,58 -512,67 +454,112 @@@ static bool has_ssbd_mitigation(const s
  	.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,			\
  	CAP_MIDR_RANGE_LIST(midr_list)
  
+ /* Track overall mitigation state. We are only mitigated if all cores are ok */
+ static bool __hardenbp_enab = true;
+ static bool __spectrev2_safe = true;
+ 
  /*
 - * List of CPUs that do not need any Spectre-v2 mitigation at all.
 + * Generic helper for handling capabilties with multiple (match,enable) pairs
 + * of call backs, sharing the same capability bit.
 + * Iterate over each entry to see if at least one matches.
   */
 -static const struct midr_range spectre_v2_safe_list[] = {
 -	MIDR_ALL_VERSIONS(MIDR_CORTEX_A35),
 -	MIDR_ALL_VERSIONS(MIDR_CORTEX_A53),
 -	MIDR_ALL_VERSIONS(MIDR_CORTEX_A55),
 -	{ /* sentinel */ }
 +static bool __maybe_unused
 +multi_entry_cap_matches(const struct arm64_cpu_capabilities *entry, int scope)
 +{
 +	const struct arm64_cpu_capabilities *caps;
 +
 +	for (caps = entry->match_list; caps->matches; caps++)
 +		if (caps->matches(caps, scope))
 +			return true;
 +
 +	return false;
 +}
 +
 +/*
 + * Take appropriate action for all matching entries in the shared capability
 + * entry.
 + */
 +static void __maybe_unused
 +multi_entry_cap_cpu_enable(const struct arm64_cpu_capabilities *entry)
 +{
 +	const struct arm64_cpu_capabilities *caps;
 +
 +	for (caps = entry->match_list; caps->matches; caps++)
 +		if (caps->matches(caps, SCOPE_LOCAL_CPU) &&
 +		    caps->cpu_enable)
 +			caps->cpu_enable(caps);
 +}
 +
 +#ifdef CONFIG_HARDEN_BRANCH_PREDICTOR
 +
 +/*
 + * List of CPUs where we need to issue a psci call to
 + * harden the branch predictor.
 + */
 +static const struct midr_range arm64_bp_harden_smccc_cpus[] = {
 +	MIDR_ALL_VERSIONS(MIDR_CORTEX_A57),
 +	MIDR_ALL_VERSIONS(MIDR_CORTEX_A72),
 +	MIDR_ALL_VERSIONS(MIDR_CORTEX_A73),
 +	MIDR_ALL_VERSIONS(MIDR_CORTEX_A75),
 +	MIDR_ALL_VERSIONS(MIDR_BRCM_VULCAN),
 +	MIDR_ALL_VERSIONS(MIDR_CAVIUM_THUNDERX2),
 +	MIDR_ALL_VERSIONS(MIDR_QCOM_FALKOR_V1),
 +	MIDR_ALL_VERSIONS(MIDR_QCOM_FALKOR),
 +	MIDR_ALL_VERSIONS(MIDR_NVIDIA_DENVER),
 +	{},
  };
  
++<<<<<<< HEAD
 +#endif
++=======
+ /*
+  * Track overall bp hardening for all heterogeneous cores in the machine.
+  * We are only considered "safe" if all booted cores are known safe.
+  */
+ static bool __maybe_unused
+ check_branch_predictor(const struct arm64_cpu_capabilities *entry, int scope)
+ {
+ 	int need_wa;
+ 
+ 	WARN_ON(scope != SCOPE_LOCAL_CPU || preemptible());
+ 
+ 	/* If the CPU has CSV2 set, we're safe */
+ 	if (cpuid_feature_extract_unsigned_field(read_cpuid(ID_AA64PFR0_EL1),
+ 						 ID_AA64PFR0_CSV2_SHIFT))
+ 		return false;
+ 
+ 	/* Alternatively, we have a list of unaffected CPUs */
+ 	if (is_midr_in_range_list(read_cpuid_id(), spectre_v2_safe_list))
+ 		return false;
+ 
+ 	/* Fallback to firmware detection */
+ 	need_wa = detect_harden_bp_fw();
+ 	if (!need_wa)
+ 		return false;
+ 
+ 	__spectrev2_safe = false;
+ 
+ 	if (!IS_ENABLED(CONFIG_HARDEN_BRANCH_PREDICTOR)) {
+ 		pr_warn_once("spectrev2 mitigation disabled by kernel configuration\n");
+ 		__hardenbp_enab = false;
+ 		return false;
+ 	}
+ 
+ 	/* forced off */
+ 	if (__nospectre_v2) {
+ 		pr_info_once("spectrev2 mitigation disabled by command line option\n");
+ 		__hardenbp_enab = false;
+ 		return false;
+ 	}
+ 
+ 	if (need_wa < 0) {
+ 		pr_warn_once("ARM_SMCCC_ARCH_WORKAROUND_1 missing from firmware\n");
+ 		__hardenbp_enab = false;
+ 	}
+ 
+ 	return (need_wa > 0);
+ }
++>>>>>>> d2532e27b563 (arm64: add sysfs vulnerability show for spectre-v2)
  
  #ifdef CONFIG_HARDEN_EL2_VECTORS
  
* Unmerged path arch/arm64/kernel/cpu_errata.c
