ASoC: wcd9335: remove some unnecessary NULL checks

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [sound] ALSA: ASoC: wcd9335: remove some unnecessary NULL checks (Jaroslav Kysela) [1683051]
Rebuild_FUZZ: 94.34%
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit d22b4117538d42f3dcf7e28210f07f968e46222e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d22b4117.failed

These are arrays, not pointers, and they can't be NULL.

	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit d22b4117538d42f3dcf7e28210f07f968e46222e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/codecs/wcd9335.c
diff --cc sound/soc/codecs/wcd9335.c
index 06c73699f16f,981f88a5f615..000000000000
--- a/sound/soc/codecs/wcd9335.c
+++ b/sound/soc/codecs/wcd9335.c
@@@ -517,14 -3339,267 +517,21 @@@ static int wcd9335_set_channel_map(stru
  		return -EINVAL;
  	}
  
- 	if (wcd->rx_chs) {
- 		wcd->num_rx_port = rx_num;
- 		for (i = 0; i < rx_num; i++) {
- 			wcd->rx_chs[i].ch_num = rx_slot[i];
- 			INIT_LIST_HEAD(&wcd->rx_chs[i].list);
- 		}
 -	switch (event) {
 -	case SND_SOC_DAPM_PRE_PMU:
 -		/* Reset if needed */
 -		wcd9335_codec_enable_prim_interpolator(comp, reg, event);
 -		break;
 -	case SND_SOC_DAPM_POST_PMU:
 -		wcd9335_config_compander(comp, w->shift, event);
 -		val = snd_soc_component_read32(comp, gain_reg);
 -		val += offset_val;
 -		snd_soc_component_write(comp, gain_reg, val);
 -		break;
 -	case SND_SOC_DAPM_POST_PMD:
 -		wcd9335_config_compander(comp, w->shift, event);
 -		wcd9335_codec_enable_prim_interpolator(comp, reg, event);
 -		break;
 -	};
 -
 -	return 0;
 -}
 -
 -static void wcd9335_codec_hph_mode_gain_opt(struct snd_soc_component *component,
 -					    u8 gain)
 -{
 -	struct wcd9335_codec *wcd = dev_get_drvdata(component->dev);
 -	u8 hph_l_en, hph_r_en;
 -	u8 l_val, r_val;
 -	u8 hph_pa_status;
 -	bool is_hphl_pa, is_hphr_pa;
 -
 -	hph_pa_status = snd_soc_component_read32(component, WCD9335_ANA_HPH);
 -	is_hphl_pa = hph_pa_status >> 7;
 -	is_hphr_pa = (hph_pa_status & 0x40) >> 6;
 -
 -	hph_l_en = snd_soc_component_read32(component, WCD9335_HPH_L_EN);
 -	hph_r_en = snd_soc_component_read32(component, WCD9335_HPH_R_EN);
 -
 -	l_val = (hph_l_en & 0xC0) | 0x20 | gain;
 -	r_val = (hph_r_en & 0xC0) | 0x20 | gain;
 -
 -	/*
 -	 * Set HPH_L & HPH_R gain source selection to REGISTER
 -	 * for better click and pop only if corresponding PAs are
 -	 * not enabled. Also cache the values of the HPHL/R
 -	 * PA gains to be applied after PAs are enabled
 -	 */
 -	if ((l_val != hph_l_en) && !is_hphl_pa) {
 -		snd_soc_component_write(component, WCD9335_HPH_L_EN, l_val);
 -		wcd->hph_l_gain = hph_l_en & 0x1F;
 -	}
 -
 -	if ((r_val != hph_r_en) && !is_hphr_pa) {
 -		snd_soc_component_write(component, WCD9335_HPH_R_EN, r_val);
 -		wcd->hph_r_gain = hph_r_en & 0x1F;
 -	}
 -}
 -
 -static void wcd9335_codec_hph_lohifi_config(struct snd_soc_component *comp,
 -					  int event)
 -{
 -	if (SND_SOC_DAPM_EVENT_ON(event)) {
 -		snd_soc_component_update_bits(comp, WCD9335_RX_BIAS_HPH_PA,
 -					WCD9335_RX_BIAS_HPH_PA_AMP_5_UA_MASK,
 -					0x06);
 -		snd_soc_component_update_bits(comp,
 -					WCD9335_RX_BIAS_HPH_RDACBUFF_CNP2,
 -					0xF0, 0x40);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_CNP_WG_CTL,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_MASK,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_RATIO_1000);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -				WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_MASK,
 -				WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_ENABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL1,
 -				WCD9335_HPH_PA_GM3_IB_SCALE_MASK,
 -				0x0C);
 -		wcd9335_codec_hph_mode_gain_opt(comp, 0x11);
 -	}
 -
 -	if (SND_SOC_DAPM_EVENT_OFF(event)) {
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -			WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_MASK,
 -			WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_DISABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_CNP_WG_CTL,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_MASK,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_RATIO_500);
 -		snd_soc_component_write(comp, WCD9335_RX_BIAS_HPH_RDACBUFF_CNP2,
 -					0x8A);
 -		snd_soc_component_update_bits(comp, WCD9335_RX_BIAS_HPH_PA,
 -					WCD9335_RX_BIAS_HPH_PA_AMP_5_UA_MASK,
 -					0x0A);
 -	}
 -}
 -
 -static void wcd9335_codec_hph_lp_config(struct snd_soc_component *comp,
 -				      int event)
 -{
 -	if (SND_SOC_DAPM_EVENT_ON(event)) {
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL1,
 -				WCD9335_HPH_PA_GM3_IB_SCALE_MASK,
 -				0x0C);
 -		wcd9335_codec_hph_mode_gain_opt(comp, 0x10);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_CNP_WG_CTL,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_MASK,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_RATIO_1000);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -			WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_MASK,
 -			WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_ENABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -				WCD9335_HPH_PA_CTL2_FORCE_PSRREH_MASK,
 -				WCD9335_HPH_PA_CTL2_FORCE_PSRREH_ENABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -				WCD9335_HPH_PA_CTL2_HPH_PSRR_ENH_MASK,
 -				WCD9335_HPH_PA_CTL2_HPH_PSRR_ENABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_RDAC_LDO_CTL,
 -				WCD9335_HPH_RDAC_N1P65_LD_OUTCTL_MASK,
 -				WCD9335_HPH_RDAC_N1P65_LD_OUTCTL_V_N1P60);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_RDAC_LDO_CTL,
 -				WCD9335_HPH_RDAC_1P65_LD_OUTCTL_MASK,
 -				WCD9335_HPH_RDAC_1P65_LD_OUTCTL_V_N1P60);
 -		snd_soc_component_update_bits(comp,
 -				WCD9335_RX_BIAS_HPH_RDAC_LDO, 0x0F, 0x01);
 -		snd_soc_component_update_bits(comp,
 -				WCD9335_RX_BIAS_HPH_RDAC_LDO, 0xF0, 0x10);
 -	}
 -
 -	if (SND_SOC_DAPM_EVENT_OFF(event)) {
 -		snd_soc_component_write(comp, WCD9335_RX_BIAS_HPH_RDAC_LDO,
 -					0x88);
 -		snd_soc_component_write(comp, WCD9335_HPH_RDAC_LDO_CTL,
 -					0x33);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -				WCD9335_HPH_PA_CTL2_HPH_PSRR_ENH_MASK,
 -				WCD9335_HPH_PA_CTL2_HPH_PSRR_DISABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -				WCD9335_HPH_PA_CTL2_FORCE_PSRREH_MASK,
 -				WCD9335_HPH_PA_CTL2_FORCE_PSRREH_DISABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -				WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_MASK,
 -				WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_DISABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_CNP_WG_CTL,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_MASK,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_RATIO_500);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_R_EN,
 -				WCD9335_HPH_CONST_SEL_L_MASK,
 -				WCD9335_HPH_CONST_SEL_L_HQ_PATH);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_L_EN,
 -				WCD9335_HPH_CONST_SEL_L_MASK,
 -				WCD9335_HPH_CONST_SEL_L_HQ_PATH);
 -	}
 -}
 -
 -static void wcd9335_codec_hph_hifi_config(struct snd_soc_component *comp,
 -					int event)
 -{
 -	if (SND_SOC_DAPM_EVENT_ON(event)) {
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_CNP_WG_CTL,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_MASK,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_RATIO_1000);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -				WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_MASK,
 -				WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_ENABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL1,
 -				WCD9335_HPH_PA_GM3_IB_SCALE_MASK,
 -				0x0C);
 -		wcd9335_codec_hph_mode_gain_opt(comp, 0x11);
 -	}
 -
 -	if (SND_SOC_DAPM_EVENT_OFF(event)) {
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_PA_CTL2,
 -			WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_MASK,
 -			WCD9335_HPH_PA_CTL2_FORCE_IQCTRL_DISABLE);
 -		snd_soc_component_update_bits(comp, WCD9335_HPH_CNP_WG_CTL,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_MASK,
 -				WCD9335_HPH_CNP_WG_CTL_CURR_LDIV_RATIO_500);
 -	}
 -}
 -
 -static void wcd9335_codec_hph_mode_config(struct snd_soc_component *component,
 -					  int event, int mode)
 -{
 -	switch (mode) {
 -	case CLS_H_LP:
 -		wcd9335_codec_hph_lp_config(component, event);
 -		break;
 -	case CLS_H_LOHIFI:
 -		wcd9335_codec_hph_lohifi_config(component, event);
 -		break;
 -	case CLS_H_HIFI:
 -		wcd9335_codec_hph_hifi_config(component, event);
 -		break;
++	wcd->num_rx_port = rx_num;
++	for (i = 0; i < rx_num; i++) {
++		wcd->rx_chs[i].ch_num = rx_slot[i];
++		INIT_LIST_HEAD(&wcd->rx_chs[i].list);
+ 	}
 -}
 -
 -static int wcd9335_codec_hphl_dac_event(struct snd_soc_dapm_widget *w,
 -					struct snd_kcontrol *kc,
 -					int event)
 -{
 -	struct snd_soc_component *comp = snd_soc_dapm_to_component(w->dapm);
 -	struct wcd9335_codec *wcd = dev_get_drvdata(comp->dev);
 -	int hph_mode = wcd->hph_mode;
 -	u8 dem_inp;
 -	int ret = 0;
 -
 -	switch (event) {
 -	case SND_SOC_DAPM_PRE_PMU:
 -		/* Read DEM INP Select */
 -		dem_inp = snd_soc_component_read32(comp,
 -				WCD9335_CDC_RX1_RX_PATH_SEC0) & 0x03;
 -		if (((hph_mode == CLS_H_HIFI) || (hph_mode == CLS_H_LOHIFI) ||
 -				(hph_mode == CLS_H_LP)) && (dem_inp != 0x01)) {
 -			dev_err(comp->dev, "Incorrect DEM Input\n");
 -			return -EINVAL;
 -		}
 -		wcd_clsh_ctrl_set_state(wcd->clsh_ctrl, WCD_CLSH_EVENT_PRE_DAC,
 -					WCD_CLSH_STATE_HPHL,
 -					((hph_mode == CLS_H_LOHIFI) ?
 -					 CLS_H_HIFI : hph_mode));
 -
 -		wcd9335_codec_hph_mode_config(comp, event, hph_mode);
 -
 -		break;
 -	case SND_SOC_DAPM_POST_PMU:
 -		usleep_range(1000, 1100);
 -		break;
 -	case SND_SOC_DAPM_PRE_PMD:
 -		break;
 -	case SND_SOC_DAPM_POST_PMD:
 -		/* 1000us required as per HW requirement */
 -		usleep_range(1000, 1100);
 -
 -		if (!(wcd_clsh_ctrl_get_state(wcd->clsh_ctrl) &
 -				WCD_CLSH_STATE_HPHR))
 -			wcd9335_codec_hph_mode_config(comp, event, hph_mode);
 -
 -		wcd_clsh_ctrl_set_state(wcd->clsh_ctrl, WCD_CLSH_EVENT_POST_PA,
 -				WCD_CLSH_STATE_HPHL,
 -				((hph_mode == CLS_H_LOHIFI) ?
 -				 CLS_H_HIFI : hph_mode));
 -		break;
 -	};
 -
 -	return ret;
 -}
+ 
 -static int wcd9335_codec_lineout_dac_event(struct snd_soc_dapm_widget *w,
 -					   struct snd_kcontrol *kc, int event)
 -{
 -	struct snd_soc_component *comp = snd_soc_dapm_to_component(w->dapm);
 -	struct wcd9335_codec *wcd = dev_get_drvdata(comp->dev);
 -
 -	switch (event) {
 -	case SND_SOC_DAPM_PRE_PMU:
 -		wcd_clsh_ctrl_set_state(wcd->clsh_ctrl, WCD_CLSH_EVENT_PRE_DAC,
 -					WCD_CLSH_STATE_LO, CLS_AB);
 -		break;
 -	case SND_SOC_DAPM_POST_PMD:
 -		wcd_clsh_ctrl_set_state(wcd->clsh_ctrl, WCD_CLSH_EVENT_POST_PA,
 -					WCD_CLSH_STATE_LO, CLS_AB);
 -		break;
++<<<<<<< HEAD
++=======
++	wcd->num_tx_port = tx_num;
++	for (i = 0; i < tx_num; i++) {
++		wcd->tx_chs[i].ch_num = tx_slot[i];
++		INIT_LIST_HEAD(&wcd->tx_chs[i].list);
  	}
  
++>>>>>>> d22b4117538d (ASoC: wcd9335: remove some unnecessary NULL checks)
  	return 0;
  }
  
* Unmerged path sound/soc/codecs/wcd9335.c
