mm/cma: add PF flag to force non cma alloc

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
commit d7fefcc8de9147cc37d0c00df12e7ea4f77999b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d7fefcc8.failed

Patch series "mm/kvm/vfio/ppc64: Migrate compound pages out of CMA
region", v8.

ppc64 uses the CMA area for the allocation of guest page table (hash
page table).  We won't be able to start guest if we fail to allocate
hash page table.  We have observed hash table allocation failure because
we failed to migrate pages out of CMA region because they were pinned.
This happen when we are using VFIO.  VFIO on ppc64 pins the entire guest
RAM.  If the guest RAM pages get allocated out of CMA region, we won't
be able to migrate those pages.  The pages are also pinned for the
lifetime of the guest.

Currently we support migration of non-compound pages.  With THP and with
the addition of hugetlb migration we can end up allocating compound
pages from CMA region.  This patch series add support for migrating
compound pages.

This patch (of 4):

Add PF_MEMALLOC_NOCMA which make sure any allocation in that context is
marked non-movable and hence cannot be satisfied by CMA region.

This is useful with get_user_pages_longterm where we want to take a page
pin by migrating pages from CMA region.  Marking the section
PF_MEMALLOC_NOCMA ensures that we avoid unnecessary page migration
later.

Link: http://lkml.kernel.org/r/20190114095438.32470-2-aneesh.kumar@linux.ibm.com
	Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
	Suggested-by: Andrea Arcangeli <aarcange@redhat.com>
	Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Alexey Kardashevskiy <aik@ozlabs.ru>
	Cc: David Gibson <david@gibson.dropbear.id.au>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Mel Gorman <mgorman@techsingularity.net>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d7fefcc8de9147cc37d0c00df12e7ea4f77999b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sched/mm.h
diff --cc include/linux/sched/mm.h
index aebb370a0006,0cd9f10423fb..000000000000
--- a/include/linux/sched/mm.h
+++ b/include/linux/sched/mm.h
@@@ -151,14 -152,21 +152,32 @@@ static inline bool in_vfork(struct task
   */
  static inline gfp_t current_gfp_context(gfp_t flags)
  {
++<<<<<<< HEAD
 +	/*
 +	 * NOIO implies both NOIO and NOFS and it is a weaker context
 +	 * so always make sure it makes precendence
 +	 */
 +	if (unlikely(current->flags & PF_MEMALLOC_NOIO))
 +		flags &= ~(__GFP_IO | __GFP_FS);
 +	else if (unlikely(current->flags & PF_MEMALLOC_NOFS))
 +		flags &= ~__GFP_FS;
++=======
+ 	if (unlikely(current->flags &
+ 		     (PF_MEMALLOC_NOIO | PF_MEMALLOC_NOFS | PF_MEMALLOC_NOCMA))) {
+ 		/*
+ 		 * NOIO implies both NOIO and NOFS and it is a weaker context
+ 		 * so always make sure it makes precedence
+ 		 */
+ 		if (current->flags & PF_MEMALLOC_NOIO)
+ 			flags &= ~(__GFP_IO | __GFP_FS);
+ 		else if (current->flags & PF_MEMALLOC_NOFS)
+ 			flags &= ~__GFP_FS;
+ #ifdef CONFIG_CMA
+ 		if (current->flags & PF_MEMALLOC_NOCMA)
+ 			flags &= ~__GFP_MOVABLE;
+ #endif
+ 	}
++>>>>>>> d7fefcc8de91 (mm/cma: add PF flag to force non cma alloc)
  	return flags;
  }
  
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 76718c7b1770..6d8d7ccc5a42 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1399,6 +1399,7 @@ extern struct pid *cad_pid;
 #define PF_SWAPWRITE		0x00800000	/* Allowed to write to swap */
 #define PF_NO_SETAFFINITY	0x04000000	/* Userland is not allowed to meddle with cpus_allowed */
 #define PF_MCE_EARLY		0x08000000      /* Early kill for mce process policy */
+#define PF_MEMALLOC_NOCMA	0x10000000	/* All allocation request will have _GFP_MOVABLE cleared */
 #define PF_MUTEX_TESTER		0x20000000	/* Thread belongs to the rt mutex tester */
 #define PF_FREEZER_SKIP		0x40000000	/* Freezer should not count it as freezable */
 #define PF_SUSPEND_TASK		0x80000000      /* This thread called freeze_processes() and should not be frozen */
* Unmerged path include/linux/sched/mm.h
