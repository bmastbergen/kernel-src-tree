nvmet: fix comparison of a u16 with -1

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Colin Ian King <colin.king@canonical.com>
commit 66c6afbd7321983be4c4160aff4d79e52af84a60
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/66c6afbd.failed

Currently the u16 req->error_loc is being compared to -1 which
will always be false.  Fix this by casting -1 to u16 to fix this.

Detected by clang:
  warning: result of comparison of constant -1 with expression of
  type 'u16' (aka 'unsigned short') is always false
  [-Wtautological-constant-out-of-range-compare]

Fixes: 76574f37bf4c ("nvmet: add interface to update error-log page")
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 66c6afbd7321983be4c4160aff4d79e52af84a60)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/target/core.c
diff --cc drivers/nvme/target/core.c
index 628b8f0276bd,b9c219c931eb..000000000000
--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@@ -561,6 -655,35 +561,38 @@@ static void nvmet_update_sq_head(struc
  	req->rsp->sq_head = cpu_to_le16(req->sq->sqhd & 0x0000FFFF);
  }
  
++<<<<<<< HEAD
++=======
+ static void nvmet_set_error(struct nvmet_req *req, u16 status)
+ {
+ 	struct nvmet_ctrl *ctrl = req->sq->ctrl;
+ 	struct nvme_error_slot *new_error_slot;
+ 	unsigned long flags;
+ 
+ 	req->rsp->status = cpu_to_le16(status << 1);
+ 
+ 	if (!ctrl || req->error_loc == (u16)-1)
+ 		return;
+ 
+ 	spin_lock_irqsave(&ctrl->error_lock, flags);
+ 	ctrl->err_counter++;
+ 	new_error_slot =
+ 		&ctrl->slots[ctrl->err_counter % NVMET_ERROR_LOG_SLOTS];
+ 
+ 	new_error_slot->error_count = cpu_to_le64(ctrl->err_counter);
+ 	new_error_slot->sqid = cpu_to_le16(req->sq->qid);
+ 	new_error_slot->cmdid = cpu_to_le16(req->cmd->common.command_id);
+ 	new_error_slot->status_field = cpu_to_le16(status << 1);
+ 	new_error_slot->param_error_location = cpu_to_le16(req->error_loc);
+ 	new_error_slot->lba = cpu_to_le64(req->error_slba);
+ 	new_error_slot->nsid = req->cmd->common.nsid;
+ 	spin_unlock_irqrestore(&ctrl->error_lock, flags);
+ 
+ 	/* set the more bit for this request */
+ 	req->rsp->status |= cpu_to_le16(1 << 14);
+ }
+ 
++>>>>>>> 66c6afbd7321 (nvmet: fix comparison of a u16 with -1)
  static void __nvmet_req_complete(struct nvmet_req *req, u16 status)
  {
  	if (!req->sq->sqhd_disabled)
* Unmerged path drivers/nvme/target/core.c
