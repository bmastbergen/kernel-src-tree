nvmet-fc: remove the IN_ISR deferred scheduling options

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author James Smart <jsmart2021@gmail.com>
commit 6e2e312ea7ff73acfafaa5c9851e151e9483c761
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/6e2e312e.failed

All target lldd's call the cmd receive and op completions in non-isr
thread contexts. As such the IN_ISR options are not necessary.
Remove the functionality and flags, which also removes cpu assignments
to queues.

	Signed-off-by: James Smart <jsmart2021@gmail.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 6e2e312ea7ff73acfafaa5c9851e151e9483c761)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/target/fc.c
diff --cc drivers/nvme/target/fc.c
index 029e28aa80f4,f98f5c5bea26..000000000000
--- a/drivers/nvme/target/fc.c
+++ b/drivers/nvme/target/fc.c
@@@ -645,8 -619,6 +611,11 @@@ nvmet_fc_alloc_target_queue(struct nvme
  	queue->qid = qid;
  	queue->sqsize = sqsize;
  	queue->assoc = assoc;
++<<<<<<< HEAD
 +	queue->port = assoc->tgtport->port;
 +	queue->cpu = nvmet_fc_queue_to_cpu(assoc->tgtport, qid);
++=======
++>>>>>>> 6e2e312ea7ff (nvmet-fc: remove the IN_ISR deferred scheduling options)
  	INIT_LIST_HEAD(&queue->fod_list);
  	INIT_LIST_HEAD(&queue->avail_defer_list);
  	INIT_LIST_HEAD(&queue->pending_cmd_list);
* Unmerged path drivers/nvme/target/fc.c
diff --git a/include/linux/nvme-fc-driver.h b/include/linux/nvme-fc-driver.h
index b0e2e11b2687..2bb349035431 100644
--- a/include/linux/nvme-fc-driver.h
+++ b/include/linux/nvme-fc-driver.h
@@ -640,22 +640,6 @@ enum {
 		 * sequence in one LLDD operation. Errors during Data
 		 * sequence transmit must not allow RSP sequence to be sent.
 		 */
-	NVMET_FCTGTFEAT_CMD_IN_ISR = (1 << 1),
-		/* Bit 2: When 0, the LLDD is calling the cmd rcv handler
-		 * in a non-isr context, allowing the transport to finish
-		 * op completion in the calling context. When 1, the LLDD
-		 * is calling the cmd rcv handler in an ISR context,
-		 * requiring the transport to transition to a workqueue
-		 * for op completion.
-		 */
-	NVMET_FCTGTFEAT_OPDONE_IN_ISR = (1 << 2),
-		/* Bit 3: When 0, the LLDD is calling the op done handler
-		 * in a non-isr context, allowing the transport to finish
-		 * op completion in the calling context. When 1, the LLDD
-		 * is calling the op done handler in an ISR context,
-		 * requiring the transport to transition to a workqueue
-		 * for op completion.
-		 */
 };
 
 
