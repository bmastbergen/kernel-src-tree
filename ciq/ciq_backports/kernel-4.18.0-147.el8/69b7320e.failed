net: switchdev: Add extack argument to switchdev_port_obj_add()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [net] switchdev: Add extack argument to switchdev_port_obj_add() (Ivan Vecera) [1690125]
Rebuild_FUZZ: 95.87%
commit-author Petr Machata <petrm@mellanox.com>
commit 69b7320e14e6e8c7a77fa5803cecc86434a1162d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/69b7320e.failed

After the previous patch, bridge driver has extack argument available to
pass to switchdev. Therefore extend switchdev_port_obj_add() with this
argument, updating all callers, and passing the argument through to
switchdev_port_obj_notify().

	Signed-off-by: Petr Machata <petrm@mellanox.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Acked-by: Ivan Vecera <ivecera@redhat.com>
	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 69b7320e14e6e8c7a77fa5803cecc86434a1162d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/switchdev/switchdev.c
diff --cc net/switchdev/switchdev.c
index 099434ec7996,cb20669bf6ce..000000000000
--- a/net/switchdev/switchdev.c
+++ b/net/switchdev/switchdev.c
@@@ -353,30 -353,30 +353,38 @@@ static size_t switchdev_obj_size(const 
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int __switchdev_port_obj_add(struct net_device *dev,
 +				    const struct switchdev_obj *obj,
 +				    struct switchdev_trans *trans)
++=======
+ static int switchdev_port_obj_notify(enum switchdev_notifier_type nt,
+ 				     struct net_device *dev,
+ 				     const struct switchdev_obj *obj,
+ 				     struct switchdev_trans *trans,
+ 				     struct netlink_ext_ack *extack)
++>>>>>>> 69b7320e14e6 (net: switchdev: Add extack argument to switchdev_port_obj_add())
  {
 -	int rc;
 -	int err;
 +	const struct switchdev_ops *ops = dev->switchdev_ops;
 +	struct net_device *lower_dev;
 +	struct list_head *iter;
 +	int err = -EOPNOTSUPP;
  
 -	struct switchdev_notifier_port_obj_info obj_info = {
 -		.obj = obj,
 -		.trans = trans,
 -		.handled = false,
 -	};
 +	if (ops && ops->switchdev_port_obj_add)
 +		return ops->switchdev_port_obj_add(dev, obj, trans);
  
 -	rc = call_switchdev_blocking_notifiers(nt, dev, &obj_info.info);
 -	err = notifier_to_errno(rc);
 -	if (err) {
 -		WARN_ON(!obj_info.handled);
 -		return err;
 +	/* Switch device port(s) may be stacked under
 +	 * bond/team/vlan dev, so recurse down to add object on
 +	 * each port.
 +	 */
 +
 +	netdev_for_each_lower_dev(dev, lower_dev, iter) {
 +		err = __switchdev_port_obj_add(lower_dev, obj, trans);
 +		if (err)
 +			break;
  	}
 -	if (!obj_info.handled)
 -		return -EOPNOTSUPP;
 -	return 0;
 +
 +	return err;
  }
  
  static int switchdev_port_obj_add_now(struct net_device *dev,
@@@ -397,7 -398,8 +406,12 @@@
  	 */
  
  	trans.ph_prepare = true;
++<<<<<<< HEAD
 +	err = __switchdev_port_obj_add(dev, obj, &trans);
++=======
+ 	err = switchdev_port_obj_notify(SWITCHDEV_PORT_OBJ_ADD,
+ 					dev, obj, &trans, extack);
++>>>>>>> 69b7320e14e6 (net: switchdev: Add extack argument to switchdev_port_obj_add())
  	if (err) {
  		/* Prepare phase failed: abort the transaction.  Any
  		 * resources reserved in the prepare phase are
@@@ -416,7 -418,8 +430,12 @@@
  	 */
  
  	trans.ph_prepare = false;
++<<<<<<< HEAD
 +	err = __switchdev_port_obj_add(dev, obj, &trans);
++=======
+ 	err = switchdev_port_obj_notify(SWITCHDEV_PORT_OBJ_ADD,
+ 					dev, obj, &trans, extack);
++>>>>>>> 69b7320e14e6 (net: switchdev: Add extack argument to switchdev_port_obj_add())
  	WARN(err, "%s: Commit of object (id=%d) failed.\n", dev->name, obj->id);
  	switchdev_trans_items_warn_destroy(dev, &trans);
  
@@@ -471,26 -475,8 +491,31 @@@ EXPORT_SYMBOL_GPL(switchdev_port_obj_ad
  static int switchdev_port_obj_del_now(struct net_device *dev,
  				      const struct switchdev_obj *obj)
  {
++<<<<<<< HEAD
 +	const struct switchdev_ops *ops = dev->switchdev_ops;
 +	struct net_device *lower_dev;
 +	struct list_head *iter;
 +	int err = -EOPNOTSUPP;
 +
 +	if (ops && ops->switchdev_port_obj_del)
 +		return ops->switchdev_port_obj_del(dev, obj);
 +
 +	/* Switch device port(s) may be stacked under
 +	 * bond/team/vlan dev, so recurse down to delete object on
 +	 * each port.
 +	 */
 +
 +	netdev_for_each_lower_dev(dev, lower_dev, iter) {
 +		err = switchdev_port_obj_del_now(lower_dev, obj);
 +		if (err)
 +			break;
 +	}
 +
 +	return err;
++=======
+ 	return switchdev_port_obj_notify(SWITCHDEV_PORT_OBJ_DEL,
+ 					 dev, obj, NULL, NULL);
++>>>>>>> 69b7320e14e6 (net: switchdev: Add extack argument to switchdev_port_obj_add())
  }
  
  static void switchdev_port_obj_del_deferred(struct net_device *dev,
diff --git a/include/net/switchdev.h b/include/net/switchdev.h
index 62f9c343de20..f418716c37de 100644
--- a/include/net/switchdev.h
+++ b/include/net/switchdev.h
@@ -208,7 +208,8 @@ int switchdev_port_attr_get(struct net_device *dev,
 int switchdev_port_attr_set(struct net_device *dev,
 			    const struct switchdev_attr *attr);
 int switchdev_port_obj_add(struct net_device *dev,
-			   const struct switchdev_obj *obj);
+			   const struct switchdev_obj *obj,
+			   struct netlink_ext_ack *extack);
 int switchdev_port_obj_del(struct net_device *dev,
 			   const struct switchdev_obj *obj);
 
@@ -261,7 +262,8 @@ static inline int switchdev_port_attr_set(struct net_device *dev,
 }
 
 static inline int switchdev_port_obj_add(struct net_device *dev,
-					 const struct switchdev_obj *obj)
+					 const struct switchdev_obj *obj,
+					 struct netlink_ext_ack *extack)
 {
 	return -EOPNOTSUPP;
 }
diff --git a/net/bridge/br_mdb.c b/net/bridge/br_mdb.c
index 6d9f48bd374a..1adb3b2ec1bb 100644
--- a/net/bridge/br_mdb.c
+++ b/net/bridge/br_mdb.c
@@ -314,7 +314,7 @@ static void br_mdb_switchdev_host_port(struct net_device *dev,
 	mdb.obj.orig_dev = dev;
 	switch (type) {
 	case RTM_NEWMDB:
-		switchdev_port_obj_add(lower_dev, &mdb.obj);
+		switchdev_port_obj_add(lower_dev, &mdb.obj, NULL);
 		break;
 	case RTM_DELMDB:
 		switchdev_port_obj_del(lower_dev, &mdb.obj);
@@ -364,7 +364,7 @@ static void __br_mdb_notify(struct net_device *dev, struct net_bridge_port *p,
 			__mdb_entry_to_br_ip(entry, &complete_info->ip);
 			mdb.obj.complete_priv = complete_info;
 			mdb.obj.complete = br_mdb_complete;
-			if (switchdev_port_obj_add(port_dev, &mdb.obj))
+			if (switchdev_port_obj_add(port_dev, &mdb.obj, NULL))
 				kfree(complete_info);
 		}
 	} else if (p && port_dev && type == RTM_DELMDB) {
diff --git a/net/bridge/br_switchdev.c b/net/bridge/br_switchdev.c
index 99ba32177b31..035ff59d9cbd 100644
--- a/net/bridge/br_switchdev.c
+++ b/net/bridge/br_switchdev.c
@@ -151,7 +151,7 @@ int br_switchdev_port_vlan_add(struct net_device *dev, u16 vid, u16 flags,
 		.vid_end = vid,
 	};
 
-	return switchdev_port_obj_add(dev, &v.obj);
+	return switchdev_port_obj_add(dev, &v.obj, extack);
 }
 
 int br_switchdev_port_vlan_del(struct net_device *dev, u16 vid)
* Unmerged path net/switchdev/switchdev.c
