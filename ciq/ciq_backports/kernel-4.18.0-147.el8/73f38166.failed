arm64: Advertise mitigation of Spectre-v2, or lack thereof

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Marc Zyngier <marc.zyngier@arm.com>
commit 73f38166095947f3b86b02fbed6bd592223a7ac8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/73f38166.failed

We currently have a list of CPUs affected by Spectre-v2, for which
we check that the firmware implements ARCH_WORKAROUND_1. It turns
out that not all firmwares do implement the required mitigation,
and that we fail to let the user know about it.

Instead, let's slightly revamp our checks, and rely on a whitelist
of cores that are known to be non-vulnerable, and let the user know
the status of the mitigation in the kernel log.

	Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
	Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
	Reviewed-by: Andre Przywara <andre.przywara@arm.com>
	Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit 73f38166095947f3b86b02fbed6bd592223a7ac8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/cpu_errata.c
diff --cc arch/arm64/kernel/cpu_errata.c
index fde6f87a8b7e,032f1a4dbea2..000000000000
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@@ -103,12 -128,12 +103,12 @@@ static void __copy_hyp_vect_bpi(int slo
  	for (i = 0; i < SZ_2K; i += 0x80)
  		memcpy(dst + i, hyp_vecs_start, hyp_vecs_end - hyp_vecs_start);
  
 -	__flush_icache_range((uintptr_t)dst, (uintptr_t)dst + SZ_2K);
 +	flush_icache_range((uintptr_t)dst, (uintptr_t)dst + SZ_2K);
  }
  
- static void __install_bp_hardening_cb(bp_hardening_cb_t fn,
- 				      const char *hyp_vecs_start,
- 				      const char *hyp_vecs_end)
+ static void install_bp_hardening_cb(bp_hardening_cb_t fn,
+ 				    const char *hyp_vecs_start,
+ 				    const char *hyp_vecs_end)
  {
  	static DEFINE_RAW_SPINLOCK(bp_lock);
  	int cpu, slot = -1;
@@@ -195,19 -203,28 +178,39 @@@ static void qcom_link_stack_sanitizatio
  		     : "=&r" (tmp));
  }
  
++<<<<<<< HEAD
 +static void
 +enable_smccc_arch_workaround_1(const struct arm64_cpu_capabilities *entry)
++=======
+ static bool __nospectre_v2;
+ static int __init parse_nospectre_v2(char *str)
+ {
+ 	__nospectre_v2 = true;
+ 	return 0;
+ }
+ early_param("nospectre_v2", parse_nospectre_v2);
+ 
+ /*
+  * -1: No workaround
+  *  0: No workaround required
+  *  1: Workaround installed
+  */
+ static int detect_harden_bp_fw(void)
++>>>>>>> 73f381660959 (arm64: Advertise mitigation of Spectre-v2, or lack thereof)
  {
  	bp_hardening_cb_t cb;
  	void *smccc_start, *smccc_end;
  	struct arm_smccc_res res;
  	u32 midr = read_cpuid_id();
  
++<<<<<<< HEAD
 +	if (!entry->matches(entry, SCOPE_LOCAL_CPU))
 +		return;
 +
++=======
++>>>>>>> 73f381660959 (arm64: Advertise mitigation of Spectre-v2, or lack thereof)
  	if (psci_ops.smccc_version == SMCCC_VERSION_1_0)
- 		return;
+ 		return -1;
  
  	switch (psci_ops.conduit) {
  	case PSCI_CONDUIT_HVC:
@@@ -454,57 -499,49 +457,81 @@@ static bool has_ssbd_mitigation(const s
  	.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,			\
  	CAP_MIDR_RANGE_LIST(midr_list)
  
 +/*
 + * Generic helper for handling capabilties with multiple (match,enable) pairs
 + * of call backs, sharing the same capability bit.
 + * Iterate over each entry to see if at least one matches.
 + */
 +static bool __maybe_unused
 +multi_entry_cap_matches(const struct arm64_cpu_capabilities *entry, int scope)
 +{
 +	const struct arm64_cpu_capabilities *caps;
 +
 +	for (caps = entry->match_list; caps->matches; caps++)
 +		if (caps->matches(caps, scope))
 +			return true;
 +
 +	return false;
 +}
 +
 +/*
 + * Take appropriate action for all matching entries in the shared capability
 + * entry.
 + */
 +static void __maybe_unused
 +multi_entry_cap_cpu_enable(const struct arm64_cpu_capabilities *entry)
 +{
 +	const struct arm64_cpu_capabilities *caps;
 +
 +	for (caps = entry->match_list; caps->matches; caps++)
 +		if (caps->matches(caps, SCOPE_LOCAL_CPU) &&
 +		    caps->cpu_enable)
 +			caps->cpu_enable(caps);
 +}
 +
  #ifdef CONFIG_HARDEN_BRANCH_PREDICTOR
- 
  /*
-  * List of CPUs where we need to issue a psci call to
-  * harden the branch predictor.
+  * List of CPUs that do not need any Spectre-v2 mitigation at all.
   */
- static const struct midr_range arm64_bp_harden_smccc_cpus[] = {
- 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A57),
- 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A72),
- 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A73),
- 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A75),
- 	MIDR_ALL_VERSIONS(MIDR_BRCM_VULCAN),
- 	MIDR_ALL_VERSIONS(MIDR_CAVIUM_THUNDERX2),
- 	MIDR_ALL_VERSIONS(MIDR_QCOM_FALKOR_V1),
- 	MIDR_ALL_VERSIONS(MIDR_QCOM_FALKOR),
- 	MIDR_ALL_VERSIONS(MIDR_NVIDIA_DENVER),
- 	{},
+ static const struct midr_range spectre_v2_safe_list[] = {
+ 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A35),
+ 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A53),
+ 	MIDR_ALL_VERSIONS(MIDR_CORTEX_A55),
+ 	{ /* sentinel */ }
  };
  
+ static bool __maybe_unused
+ check_branch_predictor(const struct arm64_cpu_capabilities *entry, int scope)
+ {
+ 	int need_wa;
+ 
+ 	WARN_ON(scope != SCOPE_LOCAL_CPU || preemptible());
+ 
+ 	/* If the CPU has CSV2 set, we're safe */
+ 	if (cpuid_feature_extract_unsigned_field(read_cpuid(ID_AA64PFR0_EL1),
+ 						 ID_AA64PFR0_CSV2_SHIFT))
+ 		return false;
+ 
+ 	/* Alternatively, we have a list of unaffected CPUs */
+ 	if (is_midr_in_range_list(read_cpuid_id(), spectre_v2_safe_list))
+ 		return false;
+ 
+ 	/* Fallback to firmware detection */
+ 	need_wa = detect_harden_bp_fw();
+ 	if (!need_wa)
+ 		return false;
+ 
+ 	/* forced off */
+ 	if (__nospectre_v2) {
+ 		pr_info_once("spectrev2 mitigation disabled by command line option\n");
+ 		return false;
+ 	}
+ 
+ 	if (need_wa < 0)
+ 		pr_warn_once("ARM_SMCCC_ARCH_WORKAROUND_1 missing from firmware\n");
+ 
+ 	return (need_wa > 0);
+ }
  #endif
  
  #ifdef CONFIG_HARDEN_EL2_VECTORS
@@@ -663,8 -721,7 +690,12 @@@ const struct arm64_cpu_capabilities arm
  	{
  		.capability = ARM64_HARDEN_BRANCH_PREDICTOR,
  		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
++<<<<<<< HEAD
 +		.cpu_enable = enable_smccc_arch_workaround_1,
 +		ERRATA_MIDR_RANGE_LIST(arm64_bp_harden_smccc_cpus),
++=======
+ 		.matches = check_branch_predictor,
++>>>>>>> 73f381660959 (arm64: Advertise mitigation of Spectre-v2, or lack thereof)
  	},
  #endif
  #ifdef CONFIG_HARDEN_EL2_VECTORS
* Unmerged path arch/arm64/kernel/cpu_errata.c
