bpf: Improve the info.func_info and info.func_info_rec_size behavior

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 7337224fc150b3b762190425399ac0e8dee380d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/7337224f.failed

1) When bpf_dump_raw_ok() == false and the kernel can provide >=1
   func_info to the userspace, the current behavior is setting
   the info.func_info_cnt to 0 instead of setting info.func_info
   to 0.

   It is different from the behavior in jited_func_lens/nr_jited_func_lens,
   jited_ksyms/nr_jited_ksyms...etc.

   This patch fixes it. (i.e. set func_info to 0 instead of
   func_info_cnt to 0 when bpf_dump_raw_ok() == false).

2) When the userspace passed in info.func_info_cnt == 0, the kernel
   will set the expected func_info size back to the
   info.func_info_rec_size.  It is a way for the userspace to learn
   the kernel expected func_info_rec_size introduced in
   commit 838e96904ff3 ("bpf: Introduce bpf_func_info").

   An exception is the kernel expected size is not set when
   func_info is not available for a bpf_prog.  This makes the
   returned info.func_info_rec_size has different values
   depending on the returned value of info.func_info_cnt.

   This patch sets the kernel expected size to info.func_info_rec_size
   independent of the info.func_info_cnt.

3) The current logic only rejects invalid func_info_rec_size if
   func_info_cnt is non zero.  This patch also rejects invalid
   nonzero info.func_info_rec_size and not equal to the kernel
   expected size.

4) Set info.btf_id as long as prog->aux->btf != NULL.  That will
   setup the later copy_to_user() codes look the same as others
   which then easier to understand and maintain.

   prog->aux->btf is not NULL only if prog->aux->func_info_cnt > 0.

   Breaking up info.btf_id from prog->aux->func_info_cnt is needed
   for the later line info patch anyway.

   A similar change is made to bpf_get_prog_name().

Fixes: 838e96904ff3 ("bpf: Introduce bpf_func_info")
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 7337224fc150b3b762190425399ac0e8dee380d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/core.c
#	kernel/bpf/syscall.c
diff --cc kernel/bpf/core.c
index b3f0a11b622a,628b3970a49b..000000000000
--- a/kernel/bpf/core.c
+++ b/kernel/bpf/core.c
@@@ -403,6 -408,16 +403,19 @@@ static void bpf_get_prog_name(const str
  
  	sym += snprintf(sym, KSYM_NAME_LEN, "bpf_prog_");
  	sym  = bin2hex(sym, prog->tag, sizeof(prog->tag));
++<<<<<<< HEAD
++=======
+ 
+ 	/* prog->aux->name will be ignored if full btf name is available */
+ 	if (prog->aux->func_info_cnt) {
+ 		type = btf_type_by_id(prog->aux->btf,
+ 				      prog->aux->func_info[prog->aux->func_idx].type_id);
+ 		func_name = btf_name_by_offset(prog->aux->btf, type->name_off);
+ 		snprintf(sym, (size_t)(end - sym), "_%s", func_name);
+ 		return;
+ 	}
+ 
++>>>>>>> 7337224fc150 (bpf: Improve the info.func_info and info.func_info_rec_size behavior)
  	if (prog->aux->name[0])
  		snprintf(sym, (size_t)(end - sym), "_%s", prog->aux->name);
  	else
diff --cc kernel/bpf/syscall.c
index 09834e3d61d8,aa05aa38f4a8..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -2229,6 -2232,25 +2235,28 @@@ static int bpf_prog_get_info_by_fd(stru
  		}
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (prog->aux->btf)
+ 		info.btf_id = btf_id(prog->aux->btf);
+ 
+ 	ulen = info.func_info_cnt;
+ 	info.func_info_cnt = prog->aux->func_info_cnt;
+ 	if (info.func_info_cnt && ulen) {
+ 		if (bpf_dump_raw_ok()) {
+ 			char __user *user_finfo;
+ 
+ 			user_finfo = u64_to_user_ptr(info.func_info);
+ 			ulen = min_t(u32, info.func_info_cnt, ulen);
+ 			if (copy_to_user(user_finfo, prog->aux->func_info,
+ 					 info.func_info_rec_size * ulen))
+ 				return -EFAULT;
+ 		} else {
+ 			info.func_info = 0;
+ 		}
+ 	}
+ 
++>>>>>>> 7337224fc150 (bpf: Improve the info.func_info and info.func_info_rec_size behavior)
  done:
  	if (copy_to_user(uinfo, &info, info_len) ||
  	    put_user(info_len, &uattr->info.info_len))
* Unmerged path kernel/bpf/core.c
* Unmerged path kernel/bpf/syscall.c
