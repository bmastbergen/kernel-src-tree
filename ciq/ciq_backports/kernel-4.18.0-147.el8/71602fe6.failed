swiotlb: add debugfs to track swiotlb buffer usage

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Dongli Zhang <dongli.zhang@oracle.com>
commit 71602fe6d4e9291af105adfef8e893b57c735906
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/71602fe6.failed

The device driver will not be able to do dma operations once swiotlb buffer
is full, either because the driver is using so many IO TLB blocks inflight,
or because there is memory leak issue in device driver. To export the
swiotlb buffer usage via debugfs would help the user estimate the size of
swiotlb buffer to pre-allocate or analyze device driver memory leak issue.

	Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit 71602fe6d4e9291af105adfef8e893b57c735906)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/dma/swiotlb.c
diff --cc kernel/dma/swiotlb.c
index 9f0669f23fd7,bedc9f945836..000000000000
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@@ -663,16 -674,35 +674,51 @@@ swiotlb_dma_supported(struct device *hw
  	return __phys_to_dma(hwdev, io_tlb_end - 1) <= mask;
  }
  
++<<<<<<< HEAD
 +size_t swiotlb_max_mapping_size(struct device *dev)
 +{
 +	return ((size_t)1 << IO_TLB_SHIFT) * IO_TLB_SEGSIZE;
 +}
 +
 +bool is_swiotlb_active(void)
 +{
 +	/*
 +	 * When SWIOTLB is initialized, even if io_tlb_start points to physical
 +	 * address zero, io_tlb_end surely doesn't.
 +	 */
 +	return io_tlb_end != 0;
 +}
++=======
+ #ifdef CONFIG_DEBUG_FS
+ 
+ static int __init swiotlb_create_debugfs(void)
+ {
+ 	static struct dentry *d_swiotlb_usage;
+ 	struct dentry *ent;
+ 
+ 	d_swiotlb_usage = debugfs_create_dir("swiotlb", NULL);
+ 
+ 	if (!d_swiotlb_usage)
+ 		return -ENOMEM;
+ 
+ 	ent = debugfs_create_ulong("io_tlb_nslabs", 0400,
+ 				   d_swiotlb_usage, &io_tlb_nslabs);
+ 	if (!ent)
+ 		goto fail;
+ 
+ 	ent = debugfs_create_ulong("io_tlb_used", 0400,
+ 				   d_swiotlb_usage, &io_tlb_used);
+ 	if (!ent)
+ 		goto fail;
+ 
+ 	return 0;
+ 
+ fail:
+ 	debugfs_remove_recursive(d_swiotlb_usage);
+ 	return -ENOMEM;
+ }
+ 
+ late_initcall(swiotlb_create_debugfs);
+ 
+ #endif
++>>>>>>> 71602fe6d4e9 (swiotlb: add debugfs to track swiotlb buffer usage)
* Unmerged path kernel/dma/swiotlb.c
