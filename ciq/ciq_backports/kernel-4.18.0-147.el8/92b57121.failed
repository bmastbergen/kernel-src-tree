bpf: btf: export btf types and name by offset from lib

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Okash Khawaja <osk@fb.com>
commit 92b57121ca79b286bef4f304e887272f3f2d86bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/92b57121.failed

This patch introduces btf__resolve_type() function and exports two
existing functions from libbpf. btf__resolve_type follows modifier
types like const and typedef until it hits a type which actually takes
up memory, and then returns it. This function follows similar pattern
to btf__resolve_size but instead of computing size, it just returns
the type.

These  functions will be used in the followig patch which parses
information inside array of `struct btf_type *`. btf_name_by_offset is
used for printing variable names.

	Signed-off-by: Okash Khawaja <osk@fb.com>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Song Liu <songliubraving@fb.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 92b57121ca79b286bef4f304e887272f3f2d86bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/btf.c
#	tools/lib/bpf/btf.h
diff --cc tools/lib/bpf/btf.c
index c36a3a76986a,03161be094b4..000000000000
--- a/tools/lib/bpf/btf.c
+++ b/tools/lib/bpf/btf.c
@@@ -32,14 -38,6 +37,17 @@@ struct btf 
  	int fd;
  };
  
++<<<<<<< HEAD
 +static const char *btf_name_by_offset(const struct btf *btf, __u32 offset)
 +{
 +	if (offset < btf->hdr->str_len)
 +		return &btf->strings[offset];
 +	else
 +		return NULL;
 +}
 +
++=======
++>>>>>>> 92b57121ca79 (bpf: btf: export btf types and name by offset from lib)
  static int btf_add_type(struct btf *btf, struct btf_type *t)
  {
  	if (btf->types_size - btf->nr_types < 2) {
@@@ -189,14 -187,6 +197,17 @@@ static int btf_parse_type_sec(struct bt
  	return 0;
  }
  
++<<<<<<< HEAD
 +const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 type_id)
 +{
 +	if (type_id > btf->nr_types)
 +		return NULL;
 +
 +	return btf->types[type_id];
 +}
 +
++=======
++>>>>>>> 92b57121ca79 (bpf: btf: export btf types and name by offset from lib)
  static bool btf_type_is_void(const struct btf_type *t)
  {
  	return t == &btf_void || BTF_INFO_KIND(t->info) == BTF_KIND_FWD;
@@@ -269,9 -259,29 +280,33 @@@ __s64 btf__resolve_size(const struct bt
  	return nelems * size;
  }
  
++<<<<<<< HEAD
 +__s32 btf__find_by_name(const struct btf *btf, const char *type_name)
++=======
+ int btf__resolve_type(const struct btf *btf, __u32 type_id)
+ {
+ 	const struct btf_type *t;
+ 	int depth = 0;
+ 
+ 	t = btf__type_by_id(btf, type_id);
+ 	while (depth < MAX_RESOLVE_DEPTH &&
+ 	       !btf_type_is_void_or_null(t) &&
+ 	       IS_MODIFIER(BTF_INFO_KIND(t->info))) {
+ 		type_id = t->type;
+ 		t = btf__type_by_id(btf, type_id);
+ 		depth++;
+ 	}
+ 
+ 	if (depth == MAX_RESOLVE_DEPTH || btf_type_is_void_or_null(t))
+ 		return -EINVAL;
+ 
+ 	return type_id;
+ }
+ 
+ int32_t btf__find_by_name(const struct btf *btf, const char *type_name)
++>>>>>>> 92b57121ca79 (bpf: btf: export btf types and name by offset from lib)
  {
 -	uint32_t i;
 +	__u32 i;
  
  	if (!strcmp(type_name, "void"))
  		return 0;
diff --cc tools/lib/bpf/btf.h
index caac3a404dc5,24f361d99a5e..000000000000
--- a/tools/lib/bpf/btf.h
+++ b/tools/lib/bpf/btf.h
@@@ -15,10 -14,12 +15,19 @@@ typedef int (*btf_print_fn_t)(const cha
  	__attribute__((format(printf, 1, 2)));
  
  void btf__free(struct btf *btf);
++<<<<<<< HEAD
 +struct btf *btf__new(__u8 *data, __u32 size, btf_print_fn_t err_log);
 +__s32 btf__find_by_name(const struct btf *btf, const char *type_name);
 +const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 id);
 +__s64 btf__resolve_size(const struct btf *btf, __u32 type_id);
++=======
+ struct btf *btf__new(uint8_t *data, uint32_t size, btf_print_fn_t err_log);
+ int32_t btf__find_by_name(const struct btf *btf, const char *type_name);
+ int64_t btf__resolve_size(const struct btf *btf, uint32_t type_id);
+ int btf__resolve_type(const struct btf *btf, __u32 type_id);
++>>>>>>> 92b57121ca79 (bpf: btf: export btf types and name by offset from lib)
  int btf__fd(const struct btf *btf);
+ const char *btf__name_by_offset(const struct btf *btf, __u32 offset);
+ const struct btf_type *btf__type_by_id(const struct btf *btf, __u32 type_id);
  
  #endif
* Unmerged path tools/lib/bpf/btf.c
* Unmerged path tools/lib/bpf/btf.h
