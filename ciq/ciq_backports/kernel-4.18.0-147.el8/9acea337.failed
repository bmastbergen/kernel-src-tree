selftests/bpf: skip verifier tests for unsupported map types

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Stanislav Fomichev <sdf@google.com>
commit 9acea337ef570faa14f13232d1b2fa6615aaf569
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/9acea337.failed

Use recently introduced bpf_probe_map_type() to skip tests in the
test_verifier if map creation (create_map) fails. It's handled
explicitly for each fixup, i.e. if bpf_create_map returns negative fd,
we probe the kernel for the appropriate map support and skip the
test is map type is not supported.

	Signed-off-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 9acea337ef570faa14f13232d1b2fa6615aaf569)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_verifier.c
diff --cc tools/testing/selftests/bpf/test_verifier.c
index d15dd9766750,97188dbe80bd..000000000000
--- a/tools/testing/selftests/bpf/test_verifier.c
+++ b/tools/testing/selftests/bpf/test_verifier.c
@@@ -15733,13 -572,41 +15756,18 @@@ out
  static void do_test_single(struct bpf_test *test, bool unpriv,
  			   int *passes, int *errors)
  {
 -	int fd_prog, expected_ret, alignment_prevented_execution;
 +	int fd_prog, expected_ret, reject_from_alignment;
  	int prog_len, prog_type = test->prog_type;
  	struct bpf_insn *prog = test->insns;
 -	int run_errs, run_successes;
  	int map_fds[MAX_NR_MAPS];
  	const char *expected_err;
++<<<<<<< HEAD
 +	uint32_t expected_val;
 +	uint32_t retval;
++=======
+ 	int fixup_skips;
+ 	__u32 pflags;
++>>>>>>> 9acea337ef57 (selftests/bpf: skip verifier tests for unsupported map types)
  	int i, err;
  
  	for (i = 0; i < MAX_NR_MAPS; i++)
@@@ -15747,11 -614,21 +15775,17 @@@
  
  	if (!prog_type)
  		prog_type = BPF_PROG_TYPE_SOCKET_FILTER;
+ 	fixup_skips = skips;
  	do_test_fixup(test, prog_type, prog, map_fds);
+ 	/* If there were some map skips during fixup due to missing bpf
+ 	 * features, skip this test.
+ 	 */
+ 	if (fixup_skips != skips)
+ 		return;
  	prog_len = probe_filter_length(prog);
  
 -	pflags = 0;
 -	if (test->flags & F_LOAD_WITH_STRICT_ALIGNMENT)
 -		pflags |= BPF_F_STRICT_ALIGNMENT;
 -	if (test->flags & F_NEEDS_EFFICIENT_UNALIGNED_ACCESS)
 -		pflags |= BPF_F_ANY_ALIGNMENT;
 -	fd_prog = bpf_verify_program(prog_type, prog, prog_len, pflags,
 +	fd_prog = bpf_verify_program(prog_type, prog, prog_len,
 +				     test->flags & F_LOAD_WITH_STRICT_ALIGNMENT,
  				     "GPL", 0, bpf_vlog, sizeof(bpf_vlog), 1);
  	if (fd_prog < 0 && !bpf_probe_prog_type(prog_type, 0)) {
  		printf("SKIP (unsupported program type %d)\n", prog_type);
* Unmerged path tools/testing/selftests/bpf/test_verifier.c
