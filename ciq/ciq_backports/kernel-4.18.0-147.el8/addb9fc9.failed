bpf: adding support for map in map in libbpf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Nikita V. Shirokov <tehnerd@tehnerd.com>
commit addb9fc90f13898e7779da54f471792e3dfb0d55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/addb9fc9.failed

idea is pretty simple. for specified map (pointed by struct bpf_map)
we would provide descriptor of already loaded map, which is going to be
used as a prototype for inner map. proposed workflow:
1) open bpf's object (bpf_object__open)
2) create bpf's map which is going to be used as a prototype
3) find (by name) map-in-map which you want to load and update w/
descriptor of inner map w/ a new helper from this patch
4) load bpf program w/ bpf_object__load

	Signed-off-by: Nikita V. Shirokov <tehnerd@tehnerd.com>
	Acked-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit addb9fc90f13898e7779da54f471792e3dfb0d55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
diff --cc tools/lib/bpf/libbpf.c
index 9ac238289908,0f14f7c074c2..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -2286,10 -2695,24 +2300,29 @@@ void bpf_map__set_ifindex(struct bpf_ma
  	map->map_ifindex = ifindex;
  }
  
++<<<<<<< HEAD
 +struct bpf_map *
 +bpf_map__next(struct bpf_map *prev, struct bpf_object *obj)
++=======
+ int bpf_map__set_inner_map_fd(struct bpf_map *map, int fd)
+ {
+ 	if (!bpf_map_type__is_map_in_map(map->def.type)) {
+ 		pr_warning("error: unsupported map type\n");
+ 		return -EINVAL;
+ 	}
+ 	if (map->inner_map_fd != -1) {
+ 		pr_warning("error: inner_map_fd already specified\n");
+ 		return -EINVAL;
+ 	}
+ 	map->inner_map_fd = fd;
+ 	return 0;
+ }
+ 
+ static struct bpf_map *
+ __bpf_map__iter(struct bpf_map *m, struct bpf_object *obj, int i)
++>>>>>>> addb9fc90f13 (bpf: adding support for map in map in libbpf)
  {
 -	ssize_t idx;
 +	size_t idx;
  	struct bpf_map *s, *e;
  
  	if (!obj || !obj->maps)
diff --cc tools/lib/bpf/libbpf.h
index c8c168c73302,f30c3d07bb7d..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -261,22 -278,28 +261,28 @@@ bpf_map__next(struct bpf_map *map, stru
  	     (pos) != NULL;				\
  	     (pos) = bpf_map__next((pos), (obj)))
  
 -LIBBPF_API struct bpf_map *
 -bpf_map__prev(struct bpf_map *map, struct bpf_object *obj);
 -
 -LIBBPF_API int bpf_map__fd(struct bpf_map *map);
 -LIBBPF_API const struct bpf_map_def *bpf_map__def(struct bpf_map *map);
 -LIBBPF_API const char *bpf_map__name(struct bpf_map *map);
 -LIBBPF_API __u32 bpf_map__btf_key_type_id(const struct bpf_map *map);
 -LIBBPF_API __u32 bpf_map__btf_value_type_id(const struct bpf_map *map);
 +int bpf_map__fd(struct bpf_map *map);
 +const struct bpf_map_def *bpf_map__def(struct bpf_map *map);
 +const char *bpf_map__name(struct bpf_map *map);
 +__u32 bpf_map__btf_key_type_id(const struct bpf_map *map);
 +__u32 bpf_map__btf_value_type_id(const struct bpf_map *map);
  
  typedef void (*bpf_map_clear_priv_t)(struct bpf_map *, void *);
 -LIBBPF_API int bpf_map__set_priv(struct bpf_map *map, void *priv,
 -				 bpf_map_clear_priv_t clear_priv);
 -LIBBPF_API void *bpf_map__priv(struct bpf_map *map);
 -LIBBPF_API int bpf_map__reuse_fd(struct bpf_map *map, int fd);
 -LIBBPF_API bool bpf_map__is_offload_neutral(struct bpf_map *map);
 -LIBBPF_API void bpf_map__set_ifindex(struct bpf_map *map, __u32 ifindex);
 -LIBBPF_API int bpf_map__pin(struct bpf_map *map, const char *path);
 -LIBBPF_API int bpf_map__unpin(struct bpf_map *map, const char *path);
 -
 +int bpf_map__set_priv(struct bpf_map *map, void *priv,
 +		      bpf_map_clear_priv_t clear_priv);
 +void *bpf_map__priv(struct bpf_map *map);
 +int bpf_map__reuse_fd(struct bpf_map *map, int fd);
 +bool bpf_map__is_offload_neutral(struct bpf_map *map);
 +void bpf_map__set_ifindex(struct bpf_map *map, __u32 ifindex);
 +int bpf_map__pin(struct bpf_map *map, const char *path);
 +
++<<<<<<< HEAD
 +long libbpf_get_error(const void *ptr);
++=======
+ LIBBPF_API int bpf_map__set_inner_map_fd(struct bpf_map *map, int fd);
+ 
+ LIBBPF_API long libbpf_get_error(const void *ptr);
++>>>>>>> addb9fc90f13 (bpf: adding support for map in map in libbpf)
  
  struct bpf_prog_load_attr {
  	const char *file;
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
