bpf: libbpf: Fix bpf_program__next() API

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit a83d6e76a67424ebbbbed643f51e97934ffc2bc2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/a83d6e76.failed

This patch restores the behavior in
commit eac7d84519a3 ("tools: libbpf: don't return '.text' as a program for multi-function programs")
such that bpf_program__next() does not return pseudo programs in ".text".

Fixes: 0c19a9fbc9cd ("libbpf: cleanup after partial failure in bpf_object__pin")
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit a83d6e76a67424ebbbbed643f51e97934ffc2bc2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index f064c910a99d,a01eb9584e52..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -1931,23 -2193,26 +1931,44 @@@ void *bpf_object__priv(struct bpf_objec
  }
  
  static struct bpf_program *
++<<<<<<< HEAD
 +__bpf_program__next(struct bpf_program *prev, struct bpf_object *obj)
 +{
 +	size_t idx;
++=======
+ __bpf_program__iter(struct bpf_program *p, struct bpf_object *obj, bool forward)
+ {
+ 	size_t nr_programs = obj->nr_programs;
+ 	ssize_t idx;
++>>>>>>> a83d6e76a674 (bpf: libbpf: Fix bpf_program__next() API)
  
- 	if (!obj->programs)
+ 	if (!nr_programs)
  		return NULL;
 +	/* First handler */
 +	if (prev == NULL)
 +		return &obj->programs[0];
  
++<<<<<<< HEAD
 +	if (prev->obj != obj) {
++=======
+ 	if (!p)
+ 		/* Iter from the beginning */
+ 		return forward ? &obj->programs[0] :
+ 			&obj->programs[nr_programs - 1];
+ 
+ 	if (p->obj != obj) {
++>>>>>>> a83d6e76a674 (bpf: libbpf: Fix bpf_program__next() API)
  		pr_warning("error: program handler doesn't match object\n");
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	idx = (prev - obj->programs) + 1;
 +	if (idx >= obj->nr_programs)
++=======
+ 	idx = (p - obj->programs) + (forward ? 1 : -1);
+ 	if (idx >= obj->nr_programs || idx < 0)
++>>>>>>> a83d6e76a674 (bpf: libbpf: Fix bpf_program__next() API)
  		return NULL;
  	return &obj->programs[idx];
  }
@@@ -1958,7 -2223,19 +1979,23 @@@ bpf_program__next(struct bpf_program *p
  	struct bpf_program *prog = prev;
  
  	do {
++<<<<<<< HEAD
 +		prog = __bpf_program__next(prog, obj);
++=======
+ 		prog = __bpf_program__iter(prog, obj, true);
+ 	} while (prog && bpf_program__is_function_storage(prog, obj));
+ 
+ 	return prog;
+ }
+ 
+ struct bpf_program *
+ bpf_program__prev(struct bpf_program *next, struct bpf_object *obj)
+ {
+ 	struct bpf_program *prog = next;
+ 
+ 	do {
+ 		prog = __bpf_program__iter(prog, obj, false);
++>>>>>>> a83d6e76a674 (bpf: libbpf: Fix bpf_program__next() API)
  	} while (prog && bpf_program__is_function_storage(prog, obj));
  
  	return prog;
* Unmerged path tools/lib/bpf/libbpf.c
