drm/i915/ringbuffer: EMIT_INVALIDATE *before* switch context

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit 928f8f42310f244501a7c70daac82c196112c190
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/928f8f42.failed

Despite what I think the prm recommends, commit f2253bd9859b
("drm/i915/ringbuffer: EMIT_INVALIDATE after switch context") turned out
to be a huge mistake when enabling Ironlake contexts as the GPU would
hang on either a MI_FLUSH or PIPE_CONTROL immediately following the
MI_SET_CONTEXT of an active mesa context (more vanilla contexts, e.g.
simple rendercopies with igt, do not suffer).

Ville found the following clue,

  "[DevCTG+]: For the invalidate operation of the pipe control, the
   following pointers are affected. The
   invalidate operation affects the restore of these packets. If the pipe
   control invalidate operation is completed
   before the context save, the indirect pointers will not be restored from
   memory.
   1. Pipeline State Pointer
   2. Media State Pointer
   3. Constant Buffer Packet"

which suggests by us emitting the INVALIDATE prior to the MI_SET_CONTEXT,
we prevent the context-restore from chasing the dangling pointers within
the image, and explains why this likely prevents the GPU hang.

	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20190419111749.3910-1-chris@chris-wilson.co.uk
(cherry picked from commit 928f8f42310f244501a7c70daac82c196112c190)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_ringbuffer.c
diff --cc drivers/gpu/drm/i915/intel_ringbuffer.c
index 8f19349a6055,1418ed0c4875..000000000000
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@@ -1588,7 -1886,8 +1588,12 @@@ static int ring_request_alloc(struct i9
  	 */
  	request->reserved_space += LEGACY_REQUEST_SIZE;
  
++<<<<<<< HEAD:drivers/gpu/drm/i915/intel_ringbuffer.c
 +	ret = intel_ring_wait_for_space(request->ring, request->reserved_space);
++=======
+ 	/* Unconditionally invalidate GPU caches and TLBs. */
+ 	ret = request->engine->emit_flush(request, EMIT_INVALIDATE);
++>>>>>>> 928f8f42310f (drm/i915/ringbuffer: EMIT_INVALIDATE *before* switch context):drivers/gpu/drm/i915/gt/intel_ringbuffer.c
  	if (ret)
  		return ret;
  
* Unmerged path drivers/gpu/drm/i915/intel_ringbuffer.c
