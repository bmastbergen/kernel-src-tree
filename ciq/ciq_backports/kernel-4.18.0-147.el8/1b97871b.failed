blk-mq: move cancel of hctx->run_work into blk_mq_hw_sysfs_release

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 1b97871b501f1bac0fd39a073c4c8473ee457a55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/1b97871b.failed

hctx is always released after requeue is freed.

With holding queue's kobject refcount, it is safe for driver to run queue,
so one run queue might be scheduled after blk_sync_queue() is done.

So moving the cancel of hctx->run_work into blk_mq_hw_sysfs_release()
for avoiding run released queue.

	Cc: Dongli Zhang <dongli.zhang@oracle.com>
	Cc: James Smart <james.smart@broadcom.com>
	Cc: Bart Van Assche <bart.vanassche@wdc.com>
	Cc: linux-scsi@vger.kernel.org,
	Cc: Martin K . Petersen <martin.petersen@oracle.com>,
	Cc: Christoph Hellwig <hch@lst.de>,
	Cc: James E . J . Bottomley <jejb@linux.vnet.ibm.com>,
	Reviewed-by: Bart Van Assche <bvanassche@acm.org>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Tested-by: James Smart <james.smart@broadcom.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 1b97871b501f1bac0fd39a073c4c8473ee457a55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-sysfs.c
diff --cc block/blk-mq-sysfs.c
index 3f9c3f4ac44c,2280d3cca965..000000000000
--- a/block/blk-mq-sysfs.c
+++ b/block/blk-mq-sysfs.c
@@@ -33,6 -35,13 +33,16 @@@ static void blk_mq_hw_sysfs_release(str
  {
  	struct blk_mq_hw_ctx *hctx = container_of(kobj, struct blk_mq_hw_ctx,
  						  kobj);
++<<<<<<< HEAD
++=======
+ 
+ 	cancel_delayed_work_sync(&hctx->run_work);
+ 
+ 	if (hctx->flags & BLK_MQ_F_BLOCKING)
+ 		cleanup_srcu_struct(hctx->srcu);
+ 	blk_free_flush_queue(hctx->fq);
+ 	sbitmap_free(&hctx->ctx_map);
++>>>>>>> 1b97871b501f (blk-mq: move cancel of hctx->run_work into blk_mq_hw_sysfs_release)
  	free_cpumask_var(hctx->cpumask);
  	kfree(hctx->ctxs);
  	kfree(hctx);
diff --git a/block/blk-core.c b/block/blk-core.c
index defb6af41e90..80184bc46025 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -232,14 +232,6 @@ void blk_sync_queue(struct request_queue *q)
 {
 	del_timer_sync(&q->timeout);
 	cancel_work_sync(&q->timeout_work);
-
-	if (queue_is_mq(q)) {
-		struct blk_mq_hw_ctx *hctx;
-		int i;
-
-		queue_for_each_hw_ctx(q, hctx, i)
-			cancel_delayed_work_sync(&hctx->run_work);
-	}
 }
 EXPORT_SYMBOL(blk_sync_queue);
 
* Unmerged path block/blk-mq-sysfs.c
