s390/kasan: reipl and kexec support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Vasily Gorbik <gor@linux.ibm.com>
commit ac1256f82619724357242eb514f162c40d5b64d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/ac1256f8.failed

Some functions from both arch/s390/kernel/ipl.c and
arch/s390/kernel/machine_kexec.c are called without DAT enabled
(or with and without DAT enabled code paths). There is no easy way
to partially disable kasan for those files without a substantial
rework. Disable kasan for both files for now.

To avoid disabling kasan for arch/s390/kernel/diag.c DAT flag is
enabled in diag308 call. pcpu_delegate which disables DAT is marked
with __no_sanitize_address to disable instrumentation for that one
function.

	Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit ac1256f82619724357242eb514f162c40d5b64d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/smp.c
diff --cc arch/s390/kernel/smp.c
index e5735ab30488,1b3188f57b58..000000000000
--- a/arch/s390/kernel/smp.c
+++ b/arch/s390/kernel/smp.c
@@@ -303,8 -308,14 +303,19 @@@ static void pcpu_start_fn(struct pcpu *
  /*
   * Call function via PSW restart on pcpu and stop the current cpu.
   */
++<<<<<<< HEAD
 +static void pcpu_delegate(struct pcpu *pcpu, void (*func)(void *),
 +			  void *data, unsigned long stack)
++=======
+ static void __pcpu_delegate(void (*func)(void*), void *data)
+ {
+ 	func(data);	/* should not return */
+ }
+ 
+ static void __no_sanitize_address pcpu_delegate(struct pcpu *pcpu,
+ 						void (*func)(void *),
+ 						void *data, unsigned long stack)
++>>>>>>> ac1256f82619 (s390/kasan: reipl and kexec support)
  {
  	struct lowcore *lc = lowcore_ptr[pcpu - pcpu_devices];
  	unsigned long source_cpu = stap();
diff --git a/arch/s390/include/asm/processor.h b/arch/s390/include/asm/processor.h
index bfe6147cf39c..c6a1d2aa090a 100644
--- a/arch/s390/include/asm/processor.h
+++ b/arch/s390/include/asm/processor.h
@@ -250,7 +250,7 @@ static inline unsigned long current_stack_pointer(void)
 	return sp;
 }
 
-static inline unsigned short stap(void)
+static __no_sanitize_address_or_inline unsigned short stap(void)
 {
 	unsigned short cpu_address;
 
diff --git a/arch/s390/kernel/Makefile b/arch/s390/kernel/Makefile
index 1f9c98f7d9e2..386b1abb217b 100644
--- a/arch/s390/kernel/Makefile
+++ b/arch/s390/kernel/Makefile
@@ -24,6 +24,8 @@ UBSAN_SANITIZE_early.o		:= n
 UBSAN_SANITIZE_early_nobss.o	:= n
 
 KASAN_SANITIZE_early_nobss.o	:= n
+KASAN_SANITIZE_ipl.o		:= n
+KASAN_SANITIZE_machine_kexec.o	:= n
 
 #
 # Passing null pointers is ok for smp code, since we access the lowcore here.
diff --git a/arch/s390/kernel/ipl.c b/arch/s390/kernel/ipl.c
index f1d69f78bb1d..18a5d6317acc 100644
--- a/arch/s390/kernel/ipl.c
+++ b/arch/s390/kernel/ipl.c
@@ -156,6 +156,8 @@ static inline int __diag308(unsigned long subcode, void *addr)
 
 int diag308(unsigned long subcode, void *addr)
 {
+	if (IS_ENABLED(CONFIG_KASAN))
+		__arch_local_irq_stosm(0x04); /* enable DAT */
 	diag_stat_inc(DIAG_STAT_X308);
 	return __diag308(subcode, addr);
 }
* Unmerged path arch/s390/kernel/smp.c
