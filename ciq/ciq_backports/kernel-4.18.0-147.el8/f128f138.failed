net/mlx5e: Add ethtool control of ring params to VF representors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Gavi Teitz <gavi@mellanox.com>
commit f128f138cc4003c66053a5583378da90b4b3a25a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/f128f138.failed

Added ethtool control to the representors for setting and querying
the ring params.

	Signed-off-by: Gavi Teitz <gavi@mellanox.com>
(cherry picked from commit f128f138cc4003c66053a5583378da90b4b3a25a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index ed2450e3bde5,9264c3332aa6..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -180,12 -180,108 +180,114 @@@ static int mlx5e_rep_get_sset_count(str
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void mlx5e_rep_get_ringparam(struct net_device *dev,
+ 				struct ethtool_ringparam *param)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(dev);
+ 
+ 	mlx5e_ethtool_get_ringparam(priv, param);
+ }
+ 
+ static int mlx5e_rep_set_ringparam(struct net_device *dev,
+ 			       struct ethtool_ringparam *param)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(dev);
+ 
+ 	return mlx5e_ethtool_set_ringparam(priv, param);
+ }
+ 
+ static int mlx5e_replace_rep_vport_rx_rule(struct mlx5e_priv *priv,
+ 					   struct mlx5_flow_destination *dest)
+ {
+ 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+ 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+ 	struct mlx5_eswitch_rep *rep = rpriv->rep;
+ 	struct mlx5_flow_handle *flow_rule;
+ 
+ 	flow_rule = mlx5_eswitch_create_vport_rx_rule(esw,
+ 						      rep->vport,
+ 						      dest);
+ 	if (IS_ERR(flow_rule))
+ 		return PTR_ERR(flow_rule);
+ 
+ 	mlx5_del_flow_rules(rpriv->vport_rx_rule);
+ 	rpriv->vport_rx_rule = flow_rule;
+ 	return 0;
+ }
+ 
+ static void mlx5e_rep_get_channels(struct net_device *dev,
+ 				   struct ethtool_channels *ch)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(dev);
+ 
+ 	mlx5e_ethtool_get_channels(priv, ch);
+ }
+ 
+ static int mlx5e_rep_set_channels(struct net_device *dev,
+ 				  struct ethtool_channels *ch)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(dev);
+ 	u16 curr_channels_amount = priv->channels.params.num_channels;
+ 	u32 new_channels_amount = ch->combined_count;
+ 	struct mlx5_flow_destination new_dest;
+ 	int err = 0;
+ 
+ 	err = mlx5e_ethtool_set_channels(priv, ch);
+ 	if (err)
+ 		return err;
+ 
+ 	if (curr_channels_amount == 1 && new_channels_amount > 1) {
+ 		new_dest.type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE;
+ 		new_dest.ft = priv->fs.ttc.ft.t;
+ 	} else if (new_channels_amount == 1 && curr_channels_amount > 1) {
+ 		new_dest.type = MLX5_FLOW_DESTINATION_TYPE_TIR;
+ 		new_dest.tir_num = priv->direct_tir[0].tirn;
+ 	} else {
+ 		return 0;
+ 	}
+ 
+ 	err = mlx5e_replace_rep_vport_rx_rule(priv, &new_dest);
+ 	if (err) {
+ 		netdev_warn(priv->netdev, "Failed to update vport rx rule, when going from (%d) channels to (%d) channels\n",
+ 			    curr_channels_amount, new_channels_amount);
+ 		return err;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static u32 mlx5e_rep_get_rxfh_key_size(struct net_device *netdev)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(netdev);
+ 
+ 	return mlx5e_ethtool_get_rxfh_key_size(priv);
+ }
+ 
+ static u32 mlx5e_rep_get_rxfh_indir_size(struct net_device *netdev)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(netdev);
+ 
+ 	return mlx5e_ethtool_get_rxfh_indir_size(priv);
+ }
+ 
++>>>>>>> f128f138cc40 (net/mlx5e: Add ethtool control of ring params to VF representors)
  static const struct ethtool_ops mlx5e_rep_ethtool_ops = {
  	.get_drvinfo	   = mlx5e_rep_get_drvinfo,
  	.get_link	   = ethtool_op_get_link,
  	.get_strings       = mlx5e_rep_get_strings,
  	.get_sset_count    = mlx5e_rep_get_sset_count,
  	.get_ethtool_stats = mlx5e_rep_get_ethtool_stats,
++<<<<<<< HEAD
++=======
+ 	.get_ringparam     = mlx5e_rep_get_ringparam,
+ 	.set_ringparam     = mlx5e_rep_set_ringparam,
+ 	.get_channels      = mlx5e_rep_get_channels,
+ 	.set_channels      = mlx5e_rep_set_channels,
+ 	.get_rxfh_key_size   = mlx5e_rep_get_rxfh_key_size,
+ 	.get_rxfh_indir_size = mlx5e_rep_get_rxfh_indir_size,
++>>>>>>> f128f138cc40 (net/mlx5e: Add ethtool control of ring params to VF representors)
  };
  
  int mlx5e_attr_get(struct net_device *dev, struct switchdev_attr *attr)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
