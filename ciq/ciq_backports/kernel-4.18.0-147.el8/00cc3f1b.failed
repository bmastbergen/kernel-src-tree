ice: Add code to process LLDP MIB change events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
commit 00cc3f1b3a3011b5fee9711244ffcec418b519f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/00cc3f1b.failed

This patch adds support to process LLDP MIB change notifications sent
by the firmware.

	Signed-off-by: Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 00cc3f1b3a3011b5fee9711244ffcec418b519f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_dcb.h
#	drivers/net/ethernet/intel/ice/ice_dcb_lib.h
diff --cc drivers/net/ethernet/intel/ice/ice_dcb.h
index c2c2692990e8,39fb20c7900b..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_dcb.h
+++ b/drivers/net/ethernet/intel/ice/ice_dcb.h
@@@ -108,7 -121,14 +108,13 @@@ struct ice_cee_app_prio 
  } __packed;
  
  u8 ice_get_dcbx_status(struct ice_hw *hw);
++<<<<<<< HEAD
++=======
+ enum ice_status ice_lldp_to_dcb_cfg(u8 *lldpmib, struct ice_dcbx_cfg *dcbcfg);
+ enum ice_status ice_get_dcb_cfg(struct ice_port_info *pi);
+ enum ice_status ice_set_dcb_cfg(struct ice_port_info *pi);
++>>>>>>> 00cc3f1b3a30 (ice: Add code to process LLDP MIB change events)
  enum ice_status ice_init_dcb(struct ice_hw *hw);
 -enum ice_status
 -ice_query_port_ets(struct ice_port_info *pi,
 -		   struct ice_aqc_port_ets_elem *buf, u16 buf_size,
 -		   struct ice_sq_cd *cmd_details);
  #ifdef CONFIG_DCB
  enum ice_status ice_aq_start_lldp(struct ice_hw *hw, struct ice_sq_cd *cd);
  enum ice_status
diff --cc drivers/net/ethernet/intel/ice/ice_dcb_lib.h
index d67c769a9fb5,3a2ffc98f292..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_dcb_lib.h
+++ b/drivers/net/ethernet/intel/ice/ice_dcb_lib.h
@@@ -8,12 -8,29 +8,20 @@@
  #include "ice_lib.h"
  
  #ifdef CONFIG_DCB
 -u8 ice_dcb_get_ena_tc(struct ice_dcbx_cfg *dcbcfg);
 -u8 ice_dcb_get_num_tc(struct ice_dcbx_cfg *dcbcfg);
  int ice_init_pf_dcb(struct ice_pf *pf);
+ void
+ ice_dcb_process_lldp_set_mib_change(struct ice_pf *pf,
+ 				    struct ice_rq_event_info *event);
  #else
 -static inline u8 ice_dcb_get_ena_tc(struct ice_dcbx_cfg __always_unused *dcbcfg)
 -{
 -	return ICE_DFLT_TRAFFIC_CLASS;
 -}
 -
 -static inline u8 ice_dcb_get_num_tc(struct ice_dcbx_cfg __always_unused *dcbcfg)
 -{
 -	return 1;
 -}
 -
  static inline int ice_init_pf_dcb(struct ice_pf *pf)
  {
  	dev_dbg(&pf->pdev->dev, "DCB not supported\n");
  	return -EOPNOTSUPP;
  }
++<<<<<<< HEAD
++=======
+ 
+ #define ice_dcb_process_lldp_set_mib_change(pf, event) do {} while (0)
++>>>>>>> 00cc3f1b3a30 (ice: Add code to process LLDP MIB change events)
  #endif /* CONFIG_DCB */
  #endif /* _ICE_DCB_LIB_H_ */
diff --git a/drivers/net/ethernet/intel/ice/ice_dcb.c b/drivers/net/ethernet/intel/ice/ice_dcb.c
index 6f0c6f323c60..9802963dd79e 100644
--- a/drivers/net/ethernet/intel/ice/ice_dcb.c
+++ b/drivers/net/ethernet/intel/ice/ice_dcb.c
@@ -555,8 +555,7 @@ ice_parse_org_tlv(struct ice_lldp_org_tlv *tlv, struct ice_dcbx_cfg *dcbcfg)
  *
  * Parse DCB configuration from the LLDPDU
  */
-static enum ice_status
-ice_lldp_to_dcb_cfg(u8 *lldpmib, struct ice_dcbx_cfg *dcbcfg)
+enum ice_status ice_lldp_to_dcb_cfg(u8 *lldpmib, struct ice_dcbx_cfg *dcbcfg)
 {
 	struct ice_lldp_org_tlv *tlv;
 	enum ice_status ret = 0;
@@ -838,7 +837,7 @@ ice_get_ieee_or_cee_dcb_cfg(struct ice_port_info *pi, u8 dcbx_mode)
  *
  * Get DCB configuration from the Firmware
  */
-static enum ice_status ice_get_dcb_cfg(struct ice_port_info *pi)
+enum ice_status ice_get_dcb_cfg(struct ice_port_info *pi)
 {
 	struct ice_aqc_get_cee_dcb_cfg_resp cee_cfg;
 	struct ice_dcbx_cfg *dcbx_cfg;
* Unmerged path drivers/net/ethernet/intel/ice/ice_dcb.h
diff --git a/drivers/net/ethernet/intel/ice/ice_dcb_lib.c b/drivers/net/ethernet/intel/ice/ice_dcb_lib.c
index f2dd41408652..091d1111ed76 100644
--- a/drivers/net/ethernet/intel/ice/ice_dcb_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_dcb_lib.c
@@ -40,3 +40,39 @@ int ice_init_pf_dcb(struct ice_pf *pf)
 
 	return ice_init_dcb(hw);
 }
+
+/**
+ * ice_dcb_process_lldp_set_mib_change - Process MIB change
+ * @pf: ptr to ice_pf
+ * @event: pointer to the admin queue receive event
+ */
+void
+ice_dcb_process_lldp_set_mib_change(struct ice_pf *pf,
+				    struct ice_rq_event_info *event)
+{
+	if (pf->dcbx_cap & DCB_CAP_DCBX_LLD_MANAGED) {
+		struct ice_dcbx_cfg *dcbcfg, *prev_cfg;
+		int err;
+
+		prev_cfg = &pf->hw.port_info->local_dcbx_cfg;
+		dcbcfg = devm_kmemdup(&pf->pdev->dev, prev_cfg,
+				      sizeof(*dcbcfg), GFP_KERNEL);
+		if (!dcbcfg)
+			return;
+
+		err = ice_lldp_to_dcb_cfg(event->msg_buf, dcbcfg);
+		if (!err)
+			ice_pf_dcb_cfg(pf, dcbcfg);
+
+		devm_kfree(&pf->pdev->dev, dcbcfg);
+
+		/* Get updated DCBx data from firmware */
+		err = ice_get_dcb_cfg(pf->hw.port_info);
+		if (err)
+			dev_err(&pf->pdev->dev,
+				"Failed to get DCB config\n");
+	} else {
+		dev_dbg(&pf->pdev->dev,
+			"MIB Change Event in HOST mode\n");
+	}
+}
* Unmerged path drivers/net/ethernet/intel/ice/ice_dcb_lib.h
diff --git a/drivers/net/ethernet/intel/ice/ice_main.c b/drivers/net/ethernet/intel/ice/ice_main.c
index 7fbfa22e64eb..730bb4e59aaa 100644
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@ -831,6 +831,9 @@ static int __ice_clean_ctrlq(struct ice_pf *pf, enum ice_ctl_q q_type)
 		case ice_aqc_opc_fw_logging:
 			ice_output_fw_log(hw, &event.desc, event.msg_buf);
 			break;
+		case ice_aqc_opc_lldp_set_mib_change:
+			ice_dcb_process_lldp_set_mib_change(pf, &event);
+			break;
 		default:
 			dev_dbg(&pf->pdev->dev,
 				"%s Receive Queue unknown event 0x%04x ignored\n",
