net/mlx5e: Allow IPv4 ttl & IPv6 hop_limit rewrite for all L4 protocols

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Dmytro Linkin <dmitrolin@mellanox.com>
commit 8998576bd9c695ef1297540a50d7b3abbc69286b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/8998576b.failed

For some protocols we are not allowing IP header rewrite offload, since
the HW is not capable to properly adjust the l4 checksum. However, TTL
& HOPLIMIT modification can be done for all IP protocols, because they
are not part of the pseudo header taken into account for checksum.

Fixes: 738678817573 ("drivers: net: use flow action infrastructure")
	Signed-off-by: Dmytro Linkin <dmitrolin@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 8998576bd9c695ef1297540a50d7b3abbc69286b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 0898ea0b9f0c,2b85f93a1c52..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -1948,17 -2158,69 +1948,72 @@@ static bool csum_offload_supported(stru
  	return true;
  }
  
+ struct ip_ttl_word {
+ 	__u8	ttl;
+ 	__u8	protocol;
+ 	__sum16	check;
+ };
+ 
+ struct ipv6_hoplimit_word {
+ 	__be16	payload_len;
+ 	__u8	nexthdr;
+ 	__u8	hop_limit;
+ };
+ 
+ static bool is_action_keys_supported(const struct flow_action_entry *act)
+ {
+ 	u32 mask, offset;
+ 	u8 htype;
+ 
+ 	htype = act->mangle.htype;
+ 	offset = act->mangle.offset;
+ 	mask = ~act->mangle.mask;
+ 	/* For IPv4 & IPv6 header check 4 byte word,
+ 	 * to determine that modified fields
+ 	 * are NOT ttl & hop_limit only.
+ 	 */
+ 	if (htype == FLOW_ACT_MANGLE_HDR_TYPE_IP4) {
+ 		struct ip_ttl_word *ttl_word =
+ 			(struct ip_ttl_word *)&mask;
+ 
+ 		if (offset != offsetof(struct iphdr, ttl) ||
+ 		    ttl_word->protocol ||
+ 		    ttl_word->check) {
+ 			return true;
+ 		}
+ 	} else if (htype == FLOW_ACT_MANGLE_HDR_TYPE_IP6) {
+ 		struct ipv6_hoplimit_word *hoplimit_word =
+ 			(struct ipv6_hoplimit_word *)&mask;
+ 
+ 		if (offset != offsetof(struct ipv6hdr, payload_len) ||
+ 		    hoplimit_word->payload_len ||
+ 		    hoplimit_word->nexthdr) {
+ 			return true;
+ 		}
+ 	}
+ 	return false;
+ }
+ 
  static bool modify_header_match_supported(struct mlx5_flow_spec *spec,
 -					  struct flow_action *flow_action,
 -					  u32 actions,
 -					  struct netlink_ext_ack *extack)
 +					  struct tcf_exts *exts)
  {
 -	const struct flow_action_entry *act;
 +	const struct tc_action *a;
  	bool modify_ip_header;
- 	u8 htype, ip_proto;
  	void *headers_v;
  	u16 ethertype;
++<<<<<<< HEAD
 +	int nkeys, i;
++=======
+ 	u8 ip_proto;
+ 	int i;
+ 
+ 	if (actions & MLX5_FLOW_CONTEXT_ACTION_DECAP)
+ 		headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, inner_headers);
+ 	else
+ 		headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, outer_headers);
++>>>>>>> 8998576bd9c6 (net/mlx5e: Allow IPv4 ttl & IPv6 hop_limit rewrite for all L4 protocols)
  
 +	headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, outer_headers);
  	ethertype = MLX5_GET(fte_match_set_lyr_2_4, headers_v, ethertype);
  
  	/* for non-IP we only re-write MACs, so we're okay */
@@@ -1966,20 -2228,14 +2021,26 @@@
  		goto out_ok;
  
  	modify_ip_header = false;
 -	flow_action_for_each(i, act, flow_action) {
 -		if (act->id != FLOW_ACTION_MANGLE &&
 -		    act->id != FLOW_ACTION_ADD)
 +	tcf_exts_for_each_action(i, a, exts) {
 +		int k;
 +
 +		if (!is_tcf_pedit(a))
  			continue;
  
++<<<<<<< HEAD
 +		nkeys = tcf_pedit_nkeys(a);
 +		for (k = 0; k < nkeys; k++) {
 +			htype = tcf_pedit_htype(a, k);
 +			if (htype == TCA_PEDIT_KEY_EX_HDR_TYPE_IP4 ||
 +			    htype == TCA_PEDIT_KEY_EX_HDR_TYPE_IP6) {
 +				modify_ip_header = true;
 +				break;
 +			}
++=======
+ 		if (is_action_keys_supported(act)) {
+ 			modify_ip_header = true;
+ 			break;
++>>>>>>> 8998576bd9c6 (net/mlx5e: Allow IPv4 ttl & IPv6 hop_limit rewrite for all L4 protocols)
  		}
  	}
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
