net: devlink: turn devlink into a built-in

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [net] devlink: turn devlink into a built-in (Petr Oros) [1717458]
Rebuild_FUZZ: 93.67%
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit f4b6bcc7002f0e3a3428bac33cf1945abff95450
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/f4b6bcc7.failed

Being able to build devlink as a module causes growing pains.
First all drivers had to add a meta dependency to make sure
they are not built in when devlink is built as a module.  Now
we are struggling to invoke ethtool compat code reliably.

Make devlink code built-in, users can still not build it at
all but the dynamically loadable module option is removed.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f4b6bcc7002f0e3a3428bac33cf1945abff95450)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cavium/Kconfig
#	include/net/devlink.h
diff --cc drivers/net/ethernet/cavium/Kconfig
index 92d88c5f76fb,6650e2a5f171..000000000000
--- a/drivers/net/ethernet/cavium/Kconfig
+++ b/drivers/net/ethernet/cavium/Kconfig
@@@ -66,7 -64,7 +66,11 @@@ config CAVIUM_PT
  config LIQUIDIO
  	tristate "Cavium LiquidIO support"
  	depends on 64BIT && PCI
++<<<<<<< HEAD
 +	depends on MAY_USE_DEVLINK
++=======
+ 	depends on PCI
++>>>>>>> f4b6bcc7002f (net: devlink: turn devlink into a built-in)
  	imply PTP_1588_CLOCK
  	select FW_LOADER
  	select LIBCRC32C
diff --cc include/net/devlink.h
index 897208d8a17d,f9f7fe974652..000000000000
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@@ -650,6 -694,23 +650,26 @@@ int devlink_fmsg_string_pair_put(struc
  int devlink_fmsg_binary_pair_put(struct devlink_fmsg *fmsg, const char *name,
  				 const void *value, u16 value_len);
  
++<<<<<<< HEAD
++=======
+ struct devlink_health_reporter *
+ devlink_health_reporter_create(struct devlink *devlink,
+ 			       const struct devlink_health_reporter_ops *ops,
+ 			       u64 graceful_period, bool auto_recover,
+ 			       void *priv);
+ void
+ devlink_health_reporter_destroy(struct devlink_health_reporter *reporter);
+ 
+ void *
+ devlink_health_reporter_priv(struct devlink_health_reporter *reporter);
+ int devlink_health_report(struct devlink_health_reporter *reporter,
+ 			  const char *msg, void *priv_ctx);
+ 
+ void devlink_compat_running_version(struct net_device *dev,
+ 				    char *buf, size_t len);
+ int devlink_compat_flash_update(struct net_device *dev, const char *file_name);
+ 
++>>>>>>> f4b6bcc7002f (net: devlink: turn devlink into a built-in)
  #else
  
  static inline struct devlink *devlink_alloc(const struct devlink_ops *ops,
@@@ -1098,13 -1167,34 +1118,38 @@@ devlink_fmsg_binary_pair_put(struct dev
  {
  	return 0;
  }
++<<<<<<< HEAD
 +#endif
++=======
+ 
+ static inline struct devlink_health_reporter *
+ devlink_health_reporter_create(struct devlink *devlink,
+ 			       const struct devlink_health_reporter_ops *ops,
+ 			       u64 graceful_period, bool auto_recover,
+ 			       void *priv)
+ {
+ 	return NULL;
+ }
+ 
+ static inline void
+ devlink_health_reporter_destroy(struct devlink_health_reporter *reporter)
+ {
+ }
+ 
+ static inline void *
+ devlink_health_reporter_priv(struct devlink_health_reporter *reporter)
+ {
+ 	return NULL;
+ }
+ 
+ static inline int
+ devlink_health_report(struct devlink_health_reporter *reporter,
+ 		      const char *msg, void *priv_ctx)
+ {
+ 	return 0;
+ }
++>>>>>>> f4b6bcc7002f (net: devlink: turn devlink into a built-in)
  
- #if IS_REACHABLE(CONFIG_NET_DEVLINK)
- void devlink_compat_running_version(struct net_device *dev,
- 				    char *buf, size_t len);
- int devlink_compat_flash_update(struct net_device *dev, const char *file_name);
- #else
  static inline void
  devlink_compat_running_version(struct net_device *dev, char *buf, size_t len)
  {
diff --git a/drivers/infiniband/hw/bnxt_re/Kconfig b/drivers/infiniband/hw/bnxt_re/Kconfig
index 18f5ed082f41..19982a4a9bba 100644
--- a/drivers/infiniband/hw/bnxt_re/Kconfig
+++ b/drivers/infiniband/hw/bnxt_re/Kconfig
@@ -1,7 +1,6 @@
 config INFINIBAND_BNXT_RE
     tristate "Broadcom Netxtreme HCA support"
     depends on ETHERNET && NETDEVICES && PCI && INET && DCB
-    depends on MAY_USE_DEVLINK
     select NET_VENDOR_BROADCOM
     select BNXT
     ---help---
diff --git a/drivers/infiniband/hw/mlx4/Kconfig b/drivers/infiniband/hw/mlx4/Kconfig
index d1de3285fd88..4e9936731867 100644
--- a/drivers/infiniband/hw/mlx4/Kconfig
+++ b/drivers/infiniband/hw/mlx4/Kconfig
@@ -2,7 +2,6 @@ config MLX4_INFINIBAND
 	tristate "Mellanox ConnectX HCA support"
 	depends on NETDEVICES && ETHERNET && PCI && INET
 	depends on INFINIBAND_USER_ACCESS || !INFINIBAND_USER_ACCESS
-	depends on MAY_USE_DEVLINK
 	select NET_VENDOR_MELLANOX
 	select MLX4_CORE
 	---help---
diff --git a/drivers/net/Kconfig b/drivers/net/Kconfig
index d03775100f7d..0054689207dc 100644
--- a/drivers/net/Kconfig
+++ b/drivers/net/Kconfig
@@ -502,7 +502,6 @@ source "drivers/net/hyperv/Kconfig"
 config NETDEVSIM
 	tristate "Simulated networking device"
 	depends on DEBUG_FS
-	depends on MAY_USE_DEVLINK
 	help
 	  This driver is a developer testing tool and software model that can
 	  be used to test various control path networking APIs, especially
diff --git a/drivers/net/ethernet/broadcom/Kconfig b/drivers/net/ethernet/broadcom/Kconfig
index 6735729d6e86..468621e8a3f2 100644
--- a/drivers/net/ethernet/broadcom/Kconfig
+++ b/drivers/net/ethernet/broadcom/Kconfig
@@ -194,7 +194,6 @@ config SYSTEMPORT
 config BNXT
 	tristate "Broadcom NetXtreme-C/E support"
 	depends on PCI
-	depends on MAY_USE_DEVLINK
 	select FW_LOADER
 	select LIBCRC32C
 	---help---
* Unmerged path drivers/net/ethernet/cavium/Kconfig
diff --git a/drivers/net/ethernet/mellanox/mlx4/Kconfig b/drivers/net/ethernet/mellanox/mlx4/Kconfig
index f200b8c420d5..ff8057ed97ee 100644
--- a/drivers/net/ethernet/mellanox/mlx4/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx4/Kconfig
@@ -4,7 +4,6 @@
 
 config MLX4_EN
 	tristate "Mellanox Technologies 1/10/40Gbit Ethernet support"
-	depends on MAY_USE_DEVLINK
 	depends on PCI && NETDEVICES && ETHERNET && INET
 	select MLX4_CORE
 	imply PTP_1588_CLOCK
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/Kconfig b/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
index 37a551436e4a..6debffb8336b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
@@ -4,7 +4,6 @@
 
 config MLX5_CORE
 	tristate "Mellanox 5th generation network adapters (ConnectX series) core driver"
-	depends on MAY_USE_DEVLINK
 	depends on PCI
 	imply PTP_1588_CLOCK
 	imply VXLAN
diff --git a/drivers/net/ethernet/mellanox/mlxsw/Kconfig b/drivers/net/ethernet/mellanox/mlxsw/Kconfig
index 82827a8d3d67..9b7988e0c81b 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlxsw/Kconfig
@@ -4,7 +4,6 @@
 
 config MLXSW_CORE
 	tristate "Mellanox Technologies Switch ASICs support"
-	depends on MAY_USE_DEVLINK
 	---help---
 	  This driver supports Mellanox Technologies Switch ASICs family.
 
diff --git a/drivers/net/ethernet/netronome/Kconfig b/drivers/net/ethernet/netronome/Kconfig
index 66f15b05b65e..549898d5d450 100644
--- a/drivers/net/ethernet/netronome/Kconfig
+++ b/drivers/net/ethernet/netronome/Kconfig
@@ -19,7 +19,6 @@ config NFP
 	tristate "Netronome(R) NFP4000/NFP6000 NIC driver"
 	depends on PCI && PCI_MSI
 	depends on VXLAN || VXLAN=n
-	depends on MAY_USE_DEVLINK
 	---help---
 	  This driver supports the Netronome(R) NFP4000/NFP6000 based
 	  cards working as a advanced Ethernet NIC.  It works with both
* Unmerged path include/net/devlink.h
diff --git a/net/Kconfig b/net/Kconfig
index f738a6f27665..cf4895361115 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -414,21 +414,12 @@ config SOCK_VALIDATE_XMIT
 	bool
 
 config NET_DEVLINK
-	tristate "Network physical/parent device Netlink interface"
+	bool "Network physical/parent device Netlink interface"
 	help
 	  Network physical/parent device Netlink interface provides
 	  infrastructure to support access to physical chip-wide config and
 	  monitoring.
 
-config MAY_USE_DEVLINK
-	tristate
-	default m if NET_DEVLINK=m
-	default y if NET_DEVLINK=y || NET_DEVLINK=n
-	help
-	  Drivers using the devlink infrastructure should have a dependency
-	  on MAY_USE_DEVLINK to ensure they do not cause link errors when
-	  devlink is a loadable module and the driver using it is built-in.
-
 config PAGE_POOL
        bool
 
diff --git a/net/core/devlink.c b/net/core/devlink.c
index dff98721dbf9..5c49bf50eeec 100644
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@ -5876,20 +5876,9 @@ int devlink_compat_flash_update(struct net_device *dev, const char *file_name)
 	return -EOPNOTSUPP;
 }
 
-static int __init devlink_module_init(void)
+static int __init devlink_init(void)
 {
 	return genl_register_family(&devlink_nl_family);
 }
 
-static void __exit devlink_module_exit(void)
-{
-	genl_unregister_family(&devlink_nl_family);
-}
-
-module_init(devlink_module_init);
-module_exit(devlink_module_exit);
-
-MODULE_LICENSE("GPL v2");
-MODULE_AUTHOR("Jiri Pirko <jiri@mellanox.com>");
-MODULE_DESCRIPTION("Network physical device Netlink interface");
-MODULE_ALIAS_GENL_FAMILY(DEVLINK_GENL_NAME);
+subsys_initcall(devlink_init);
diff --git a/net/dsa/Kconfig b/net/dsa/Kconfig
index 4183e4ba27a5..1d05a4b63872 100644
--- a/net/dsa/Kconfig
+++ b/net/dsa/Kconfig
@@ -6,7 +6,7 @@ config HAVE_NET_DSA
 
 config NET_DSA
 	tristate "Distributed Switch Architecture"
-	depends on HAVE_NET_DSA && MAY_USE_DEVLINK
+	depends on HAVE_NET_DSA
 	depends on BRIDGE || BRIDGE=n
 	select NET_SWITCHDEV
 	select PHYLINK
