libbpf: Add a support for getting xdp prog id on ifindex

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Maciej Fijalkowski <maciejromanfijalkowski@gmail.com>
commit 50db9f0731889b9f3839cab5f44163733eb44f04
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/50db9f07.failed

Since we have a dedicated netlink attributes for xdp setup on a
particular interface, it is now possible to retrieve the program id that
is currently attached to the interface. The use case is targeted for
sample xdp programs, which will store the program id just after loading
bpf program onto iface. On shutdown, the sample will make sure that it
can unload the program by querying again the iface and verifying that
both program id's matches.

	Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 50db9f0731889b9f3839cab5f44163733eb44f04)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.h
#	tools/lib/bpf/libbpf.map
#	tools/lib/bpf/netlink.c
diff --cc tools/lib/bpf/libbpf.h
index c8c168c73302,43c77e98df6f..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -285,12 -311,13 +285,17 @@@ struct bpf_prog_load_attr 
  	int ifindex;
  };
  
 -LIBBPF_API int bpf_prog_load_xattr(const struct bpf_prog_load_attr *attr,
 -				   struct bpf_object **pobj, int *prog_fd);
 -LIBBPF_API int bpf_prog_load(const char *file, enum bpf_prog_type type,
 -			     struct bpf_object **pobj, int *prog_fd);
 +int bpf_prog_load_xattr(const struct bpf_prog_load_attr *attr,
 +			struct bpf_object **pobj, int *prog_fd);
 +int bpf_prog_load(const char *file, enum bpf_prog_type type,
 +		  struct bpf_object **pobj, int *prog_fd);
  
++<<<<<<< HEAD
 +int bpf_set_link_xdp_fd(int ifindex, int fd, __u32 flags);
++=======
+ LIBBPF_API int bpf_set_link_xdp_fd(int ifindex, int fd, __u32 flags);
+ LIBBPF_API int bpf_get_link_xdp_id(int ifindex, __u32 *prog_id, __u32 flags);
++>>>>>>> 50db9f073188 (libbpf: Add a support for getting xdp prog id on ifindex)
  
  enum bpf_perf_event_ret {
  	LIBBPF_PERF_EVENT_DONE	= 0,
diff --cc tools/lib/bpf/libbpf.map
index 4fb29f6d7a80,62c680fb13d1..000000000000
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@@ -119,3 -124,13 +119,16 @@@ LIBBPF_0.0.1 
  	local:
  		*;
  };
++<<<<<<< HEAD
++=======
+ 
+ LIBBPF_0.0.2 {
+ 	global:
+ 		bpf_probe_helper;
+ 		bpf_probe_map_type;
+ 		bpf_probe_prog_type;
+ 		bpf_map_lookup_elem_flags;
+ 		bpf_object__find_map_fd_by_name;
+ 		bpf_get_link_xdp_id;
+ } LIBBPF_0.0.1;
++>>>>>>> 50db9f073188 (libbpf: Add a support for getting xdp prog id on ifindex)
* Unmerged path tools/lib/bpf/netlink.c
* Unmerged path tools/lib/bpf/libbpf.h
* Unmerged path tools/lib/bpf/libbpf.map
* Unmerged path tools/lib/bpf/netlink.c
