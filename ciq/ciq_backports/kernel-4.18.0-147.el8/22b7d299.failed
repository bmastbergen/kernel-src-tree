net: ethernet: Add helper to determine if pause configuration is supported

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [netdrv] ethernet: Add helper to determine if pause configuration is supported (Petr Oros) [1691720]
Rebuild_FUZZ: 96.50%
commit-author Andrew Lunn <andrew@lunn.ch>
commit 22b7d29926b577ff4f480611380d03268545b787
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/22b7d299.failed

Rather than have MAC drivers open code the test, add a helper in
phylib. This will help when we change the type of phydev->supported.

	Signed-off-by: Andrew Lunn <andrew@lunn.ch>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 22b7d29926b577ff4f480611380d03268545b787)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phy_device.c
#	include/linux/phy.h
diff --cc drivers/net/phy/phy_device.c
index b9f5f40a7ac1,af64a9320fb0..000000000000
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@@ -1757,6 -1765,124 +1757,127 @@@ int phy_set_max_speed(struct phy_devic
  }
  EXPORT_SYMBOL(phy_set_max_speed);
  
++<<<<<<< HEAD
++=======
+ /**
+  * phy_remove_link_mode - Remove a supported link mode
+  * @phydev: phy_device structure to remove link mode from
+  * @link_mode: Link mode to be removed
+  *
+  * Description: Some MACs don't support all link modes which the PHY
+  * does.  e.g. a 1G MAC often does not support 1000Half. Add a helper
+  * to remove a link mode.
+  */
+ void phy_remove_link_mode(struct phy_device *phydev, u32 link_mode)
+ {
+ 	WARN_ON(link_mode > 31);
+ 
+ 	phydev->supported &= ~BIT(link_mode);
+ 	phydev->advertising = phydev->supported;
+ }
+ EXPORT_SYMBOL(phy_remove_link_mode);
+ 
+ /**
+  * phy_support_sym_pause - Enable support of symmetrical pause
+  * @phydev: target phy_device struct
+  *
+  * Description: Called by the MAC to indicate is supports symmetrical
+  * Pause, but not asym pause.
+  */
+ void phy_support_sym_pause(struct phy_device *phydev)
+ {
+ 	phydev->supported |= SUPPORTED_Pause;
+ 	phydev->advertising = phydev->supported;
+ }
+ EXPORT_SYMBOL(phy_support_sym_pause);
+ 
+ /**
+  * phy_support_asym_pause - Enable support of asym pause
+  * @phydev: target phy_device struct
+  *
+  * Description: Called by the MAC to indicate is supports Asym Pause.
+  */
+ void phy_support_asym_pause(struct phy_device *phydev)
+ {
+ 	phydev->supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
+ 	phydev->advertising = phydev->supported;
+ }
+ EXPORT_SYMBOL(phy_support_asym_pause);
+ 
+ /**
+  * phy_set_sym_pause - Configure symmetric Pause
+  * @phydev: target phy_device struct
+  * @rx: Receiver Pause is supported
+  * @tx: Transmit Pause is supported
+  * @autoneg: Auto neg should be used
+  *
+  * Description: Configure advertised Pause support depending on if
+  * receiver pause and pause auto neg is supported. Generally called
+  * from the set_pauseparam .ndo.
+  */
+ void phy_set_sym_pause(struct phy_device *phydev, bool rx, bool tx,
+ 		       bool autoneg)
+ {
+ 	phydev->supported &= ~SUPPORTED_Pause;
+ 
+ 	if (rx && tx && autoneg)
+ 		phydev->supported |= SUPPORTED_Pause;
+ 
+ 	phydev->advertising = phydev->supported;
+ }
+ EXPORT_SYMBOL(phy_set_sym_pause);
+ 
+ /**
+  * phy_set_asym_pause - Configure Pause and Asym Pause
+  * @phydev: target phy_device struct
+  * @rx: Receiver Pause is supported
+  * @tx: Transmit Pause is supported
+  *
+  * Description: Configure advertised Pause support depending on if
+  * transmit and receiver pause is supported. If there has been a
+  * change in adverting, trigger a new autoneg. Generally called from
+  * the set_pauseparam .ndo.
+  */
+ void phy_set_asym_pause(struct phy_device *phydev, bool rx, bool tx)
+ {
+ 	u16 oldadv = phydev->advertising;
+ 	u16 newadv = oldadv &= ~(SUPPORTED_Pause | SUPPORTED_Asym_Pause);
+ 
+ 	if (rx)
+ 		newadv |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
+ 	if (tx)
+ 		newadv ^= SUPPORTED_Asym_Pause;
+ 
+ 	if (oldadv != newadv) {
+ 		phydev->advertising = newadv;
+ 
+ 		if (phydev->autoneg)
+ 			phy_start_aneg(phydev);
+ 	}
+ }
+ EXPORT_SYMBOL(phy_set_asym_pause);
+ 
+ /**
+  * phy_validate_pause - Test if the PHY/MAC support the pause configuration
+  * @phydev: phy_device struct
+  * @pp: requested pause configuration
+  *
+  * Description: Test if the PHY/MAC combination supports the Pause
+  * configuration the user is requesting. Returns True if it is
+  * supported, false otherwise.
+  */
+ bool phy_validate_pause(struct phy_device *phydev,
+ 			struct ethtool_pauseparam *pp)
+ {
+ 	if (!(phydev->supported & SUPPORTED_Pause) ||
+ 	    (!(phydev->supported & SUPPORTED_Asym_Pause) &&
+ 	     pp->rx_pause != pp->tx_pause))
+ 		return false;
+ 	return true;
+ }
+ EXPORT_SYMBOL(phy_validate_pause);
+ 
++>>>>>>> 22b7d29926b5 (net: ethernet: Add helper to determine if pause configuration is supported)
  static void of_set_phy_supported(struct phy_device *phydev)
  {
  	struct device_node *node = phydev->mdio.dev.of_node;
diff --cc include/linux/phy.h
index 075c2f770d3e,192a1fa0c73b..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -1039,6 -1049,14 +1039,17 @@@ int phy_mii_ioctl(struct phy_device *ph
  int phy_start_interrupts(struct phy_device *phydev);
  void phy_print_status(struct phy_device *phydev);
  int phy_set_max_speed(struct phy_device *phydev, u32 max_speed);
++<<<<<<< HEAD
++=======
+ void phy_remove_link_mode(struct phy_device *phydev, u32 link_mode);
+ void phy_support_sym_pause(struct phy_device *phydev);
+ void phy_support_asym_pause(struct phy_device *phydev);
+ void phy_set_sym_pause(struct phy_device *phydev, bool rx, bool tx,
+ 		       bool autoneg);
+ void phy_set_asym_pause(struct phy_device *phydev, bool rx, bool tx);
+ bool phy_validate_pause(struct phy_device *phydev,
+ 			struct ethtool_pauseparam *pp);
++>>>>>>> 22b7d29926b5 (net: ethernet: Add helper to determine if pause configuration is supported)
  
  int phy_register_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask,
  		       int (*run)(struct phy_device *));
diff --git a/drivers/net/ethernet/apm/xgene/xgene_enet_ethtool.c b/drivers/net/ethernet/apm/xgene/xgene_enet_ethtool.c
index 4f50f11718f4..dc9666ec7ffb 100644
--- a/drivers/net/ethernet/apm/xgene/xgene_enet_ethtool.c
+++ b/drivers/net/ethernet/apm/xgene/xgene_enet_ethtool.c
@@ -313,9 +313,7 @@ static int xgene_set_pauseparam(struct net_device *ndev,
 		if (!phydev)
 			return -EINVAL;
 
-		if (!(phydev->supported & SUPPORTED_Pause) ||
-		    (!(phydev->supported & SUPPORTED_Asym_Pause) &&
-		     pp->rx_pause != pp->tx_pause))
+		if (!phy_validate_pause(phydev, pp))
 			return -EINVAL;
 
 		pdata->pause_autoneg = pp->autoneg;
diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index c03296c204c2..90e40e8b5b05 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -12494,9 +12494,7 @@ static int tg3_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam
 
 		phydev = mdiobus_get_phy(tp->mdio_bus, tp->phy_addr);
 
-		if (!(phydev->supported & SUPPORTED_Pause) ||
-		    (!(phydev->supported & SUPPORTED_Asym_Pause) &&
-		     (epause->rx_pause != epause->tx_pause)))
+		if (!phy_validate_pause(phydev, epause))
 			return -EINVAL;
 
 		tp->link_config.flowctrl = 0;
diff --git a/drivers/net/ethernet/freescale/dpaa/dpaa_ethtool.c b/drivers/net/ethernet/freescale/dpaa/dpaa_ethtool.c
index 2f933b6b2f4e..54e6732e86bc 100644
--- a/drivers/net/ethernet/freescale/dpaa/dpaa_ethtool.c
+++ b/drivers/net/ethernet/freescale/dpaa/dpaa_ethtool.c
@@ -191,9 +191,7 @@ static int dpaa_set_pauseparam(struct net_device *net_dev,
 		return -ENODEV;
 	}
 
-	if (!(phydev->supported & SUPPORTED_Pause) ||
-	    (!(phydev->supported & SUPPORTED_Asym_Pause) &&
-	    (epause->rx_pause != epause->tx_pause)))
+	if (!phy_validate_pause(phydev, epause))
 		return -EINVAL;
 
 	/* The MAC should know how to handle PAUSE frame autonegotiation before
diff --git a/drivers/net/ethernet/freescale/gianfar_ethtool.c b/drivers/net/ethernet/freescale/gianfar_ethtool.c
index 8cb98cae0a6f..aaae51e2fa70 100644
--- a/drivers/net/ethernet/freescale/gianfar_ethtool.c
+++ b/drivers/net/ethernet/freescale/gianfar_ethtool.c
@@ -508,9 +508,7 @@ static int gfar_spauseparam(struct net_device *dev,
 	if (!phydev)
 		return -ENODEV;
 
-	if (!(phydev->supported & SUPPORTED_Pause) ||
-	    (!(phydev->supported & SUPPORTED_Asym_Pause) &&
-	     (epause->rx_pause != epause->tx_pause)))
+	if (!phy_validate_pause(phydev, epause))
 		return -EINVAL;
 
 	priv->rx_pause_en = priv->tx_pause_en = 0;
* Unmerged path drivers/net/phy/phy_device.c
* Unmerged path include/linux/phy.h
