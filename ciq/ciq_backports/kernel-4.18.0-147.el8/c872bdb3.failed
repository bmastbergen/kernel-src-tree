bpf: include sub program tags in bpf_prog_info

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Song Liu <songliubraving@fb.com>
commit c872bdb38febb4c31ece3599c52cf1f833b89f4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c872bdb3.failed

Changes v2 -> v3:
1. remove check for bpf_dump_raw_ok().

Changes v1 -> v2:
1. Fix error path as Martin suggested.

This patch adds nr_prog_tags and prog_tags to bpf_prog_info. This is a
reliable way for user space to get tags of all sub programs. Before this
patch, user space need to find sub program tags via kallsyms.

This feature will be used in BPF introspection, where user space queries
information about BPF programs via sys_bpf.

	Signed-off-by: Song Liu <songliubraving@fb.com>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit c872bdb38febb4c31ece3599c52cf1f833b89f4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/bpf.h
#	kernel/bpf/syscall.c
diff --cc include/uapi/linux/bpf.h
index 3ec7fe43b907,e7d57e89f25f..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -2445,6 -2707,18 +2445,21 @@@ struct bpf_prog_info 
  	__u32 nr_jited_func_lens;
  	__aligned_u64 jited_ksyms;
  	__aligned_u64 jited_func_lens;
++<<<<<<< HEAD
++=======
+ 	__u32 btf_id;
+ 	__u32 func_info_rec_size;
+ 	__aligned_u64 func_info;
+ 	__u32 nr_func_info;
+ 	__u32 nr_line_info;
+ 	__aligned_u64 line_info;
+ 	__aligned_u64 jited_line_info;
+ 	__u32 nr_jited_line_info;
+ 	__u32 line_info_rec_size;
+ 	__u32 jited_line_info_rec_size;
+ 	__u32 nr_prog_tags;
+ 	__aligned_u64 prog_tags;
++>>>>>>> c872bdb38feb (bpf: include sub program tags in bpf_prog_info)
  } __attribute__((aligned(8)));
  
  struct bpf_map_info {
diff --cc kernel/bpf/syscall.c
index 3cd7e2d75b5a,7f1410d6fbe9..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -2230,6 -2266,77 +2230,80 @@@ static int bpf_prog_get_info_by_fd(stru
  		}
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (prog->aux->btf)
+ 		info.btf_id = btf_id(prog->aux->btf);
+ 
+ 	ulen = info.nr_func_info;
+ 	info.nr_func_info = prog->aux->func_info_cnt;
+ 	if (info.nr_func_info && ulen) {
+ 		char __user *user_finfo;
+ 
+ 		user_finfo = u64_to_user_ptr(info.func_info);
+ 		ulen = min_t(u32, info.nr_func_info, ulen);
+ 		if (copy_to_user(user_finfo, prog->aux->func_info,
+ 				 info.func_info_rec_size * ulen))
+ 			return -EFAULT;
+ 	}
+ 
+ 	ulen = info.nr_line_info;
+ 	info.nr_line_info = prog->aux->nr_linfo;
+ 	if (info.nr_line_info && ulen) {
+ 		__u8 __user *user_linfo;
+ 
+ 		user_linfo = u64_to_user_ptr(info.line_info);
+ 		ulen = min_t(u32, info.nr_line_info, ulen);
+ 		if (copy_to_user(user_linfo, prog->aux->linfo,
+ 				 info.line_info_rec_size * ulen))
+ 			return -EFAULT;
+ 	}
+ 
+ 	ulen = info.nr_jited_line_info;
+ 	if (prog->aux->jited_linfo)
+ 		info.nr_jited_line_info = prog->aux->nr_linfo;
+ 	else
+ 		info.nr_jited_line_info = 0;
+ 	if (info.nr_jited_line_info && ulen) {
+ 		if (bpf_dump_raw_ok()) {
+ 			__u64 __user *user_linfo;
+ 			u32 i;
+ 
+ 			user_linfo = u64_to_user_ptr(info.jited_line_info);
+ 			ulen = min_t(u32, info.nr_jited_line_info, ulen);
+ 			for (i = 0; i < ulen; i++) {
+ 				if (put_user((__u64)(long)prog->aux->jited_linfo[i],
+ 					     &user_linfo[i]))
+ 					return -EFAULT;
+ 			}
+ 		} else {
+ 			info.jited_line_info = 0;
+ 		}
+ 	}
+ 
+ 	ulen = info.nr_prog_tags;
+ 	info.nr_prog_tags = prog->aux->func_cnt ? : 1;
+ 	if (ulen) {
+ 		__u8 __user (*user_prog_tags)[BPF_TAG_SIZE];
+ 		u32 i;
+ 
+ 		user_prog_tags = u64_to_user_ptr(info.prog_tags);
+ 		ulen = min_t(u32, info.nr_prog_tags, ulen);
+ 		if (prog->aux->func_cnt) {
+ 			for (i = 0; i < ulen; i++) {
+ 				if (copy_to_user(user_prog_tags[i],
+ 						 prog->aux->func[i]->tag,
+ 						 BPF_TAG_SIZE))
+ 					return -EFAULT;
+ 			}
+ 		} else {
+ 			if (copy_to_user(user_prog_tags[0],
+ 					 prog->tag, BPF_TAG_SIZE))
+ 				return -EFAULT;
+ 		}
+ 	}
+ 
++>>>>>>> c872bdb38feb (bpf: include sub program tags in bpf_prog_info)
  done:
  	if (copy_to_user(uinfo, &info, info_len) ||
  	    put_user(info_len, &uattr->info.info_len))
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path kernel/bpf/syscall.c
