ipmi: Don't initialize anything in the core until something uses it

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Corey Minyard <cminyard@mvista.com>
commit 913a89f009d98c85a902d718cd54bb32ab11d167
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/913a89f0.failed

The IPMI driver was recently modified to use SRCU, but it turns out
this uses a chunk of percpu memory, even if IPMI is never used.

So modify thing to on initialize on the first use.  There was already
code to sort of handle this for handling init races, so piggy back
on top of that, and simplify it in the process.

	Signed-off-by: Corey Minyard <cminyard@mvista.com>
	Reported-by: Tejun Heo <tj@kernel.org>
	Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Reviewed-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Cc: stable@vger.kernel.org # 4.18
(cherry picked from commit 913a89f009d98c85a902d718cd54bb32ab11d167)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/ipmi/ipmi_msghandler.c
diff --cc drivers/char/ipmi/ipmi_msghandler.c
index c570b0dcc586,c518659b4d9f..000000000000
--- a/drivers/char/ipmi/ipmi_msghandler.c
+++ b/drivers/char/ipmi/ipmi_msghandler.c
@@@ -5061,22 -5068,15 +5069,34 @@@ out
  
  static int __init ipmi_init_msghandler_mod(void)
  {
++<<<<<<< HEAD
 +#ifdef CONFIG_ARM64
 +	/* RHEL-only
 +	 * If this is ARM-based HPE m400, return now, because that platform
 +	 * reports the host-side ipmi address as intel port-io space, which
 +	 * does not exist in the ARM architecture.
 +	 */
 +	const char *dmistr = dmi_get_system_info(DMI_PRODUCT_NAME);
 +
 +	if (dmistr && (strcmp("ProLiant m400 Server", dmistr) == 0)) {
 +		pr_debug("%s does not support host ipmi\n", dmistr);
 +		return -ENOSYS;
 +	}
 +	/* END RHEL-only */
 +#endif
 +	ipmi_init_msghandler();
 +	return 0;
++=======
+ 	int rv;
+ 
+ 	pr_info("version " IPMI_DRIVER_VERSION "\n");
+ 
+ 	mutex_lock(&ipmi_interfaces_mutex);
+ 	rv = ipmi_register_driver();
+ 	mutex_unlock(&ipmi_interfaces_mutex);
+ 
+ 	return rv;
++>>>>>>> 913a89f009d9 (ipmi: Don't initialize anything in the core until something uses it)
  }
  
  static void __exit cleanup_ipmi(void)
* Unmerged path drivers/char/ipmi/ipmi_msghandler.c
