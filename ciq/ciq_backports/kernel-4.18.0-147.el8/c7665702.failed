bpf: Adjust F_NEEDS_EFFICIENT_UNALIGNED_ACCESS handling in test_verifier.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author David Miller <davem@davemloft.net>
commit c7665702d3208b77b8e00f0699b6b88241b04360
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c7665702.failed

Make it set the flag argument to bpf_verify_program() which will relax
the alignment restrictions.

Now all such test cases will go properly through the verifier even on
inefficient unaligned access architectures.

On inefficient unaligned access architectures do not try to run such
programs, instead mark the test case as passing but annotate the
result similarly to how it is done now in the presence of this flag.

So, we get complete full coverage for all REJECT test cases, and at
least verifier level coverage for ACCEPT test cases.

	Signed-off-by: David S. Miller <davem@davemloft.net>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit c7665702d3208b77b8e00f0699b6b88241b04360)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_verifier.c
diff --cc tools/testing/selftests/bpf/test_verifier.c
index 0254c6a3fb82,1d1775faaf14..000000000000
--- a/tools/testing/selftests/bpf/test_verifier.c
+++ b/tools/testing/selftests/bpf/test_verifier.c
@@@ -14245,8 -14275,12 +14246,17 @@@ static void do_test_single(struct bpf_t
  	do_test_fixup(test, prog_type, prog, map_fds);
  	prog_len = probe_filter_length(prog);
  
++<<<<<<< HEAD
 +	fd_prog = bpf_verify_program(prog_type, prog, prog_len,
 +				     test->flags & F_LOAD_WITH_STRICT_ALIGNMENT,
++=======
+ 	pflags = 0;
+ 	if (test->flags & F_LOAD_WITH_STRICT_ALIGNMENT)
+ 		pflags |= BPF_F_STRICT_ALIGNMENT;
+ 	if (test->flags & F_NEEDS_EFFICIENT_UNALIGNED_ACCESS)
+ 		pflags |= BPF_F_ANY_ALIGNMENT;
+ 	fd_prog = bpf_verify_program(prog_type, prog, prog_len, pflags,
++>>>>>>> c7665702d320 (bpf: Adjust F_NEEDS_EFFICIENT_UNALIGNED_ACCESS handling in test_verifier.c)
  				     "GPL", 0, bpf_vlog, sizeof(bpf_vlog), 1);
  
  	expected_ret = unpriv && test->result_unpriv != UNDEF ?
* Unmerged path tools/testing/selftests/bpf/test_verifier.c
