crypto: des_generic - Forbid 2-key in 3DES and add helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit d7198ce46d10712b6fdd66e35237d7d0d51afcd6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d7198ce4.failed

This patch adds a requirement to the generic 3DES implementation
such that 2-key 3DES (K1 == K3) is no longer allowed in FIPS mode.

We will also provide helpers that may be used by drivers that
implement 3DES to make the same check.

	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit d7198ce46d10712b6fdd66e35237d7d0d51afcd6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/des_generic.c
diff --cc crypto/des_generic.c
index a71720544d11,ebec1fb08c45..000000000000
--- a/crypto/des_generic.c
+++ b/crypto/des_generic.c
@@@ -862,14 -862,11 +862,20 @@@ static void des_decrypt(struct crypto_t
  int __des3_ede_setkey(u32 *expkey, u32 *flags, const u8 *key,
  		      unsigned int keylen)
  {
- 	const u32 *K = (const u32 *)key;
+ 	int err;
  
++<<<<<<< HEAD
 +	if (unlikely(!((K[0] ^ K[2]) | (K[1] ^ K[3])) ||
 +		     !((K[2] ^ K[4]) | (K[3] ^ K[5]))) &&
 +		     (*flags & CRYPTO_TFM_REQ_WEAK_KEY)) {
 +		*flags |= CRYPTO_TFM_RES_WEAK_KEY;
 +		return -EINVAL;
 +	}
++=======
+ 	err = __des3_verify_key(flags, key);
+ 	if (unlikely(err))
+ 		return err;
++>>>>>>> d7198ce46d10 (crypto: des_generic - Forbid 2-key in 3DES and add helpers)
  
  	des_ekey(expkey, key); expkey += DES_EXPKEY_WORDS; key += DES_KEY_SIZE;
  	dkey(expkey, key); expkey += DES_EXPKEY_WORDS; key += DES_KEY_SIZE;
* Unmerged path crypto/des_generic.c
diff --git a/include/crypto/des.h b/include/crypto/des.h
index d4094d58ac54..72c7c8e5a5a7 100644
--- a/include/crypto/des.h
+++ b/include/crypto/des.h
@@ -6,6 +6,11 @@
 #ifndef __CRYPTO_DES_H
 #define __CRYPTO_DES_H
 
+#include <crypto/skcipher.h>
+#include <linux/compiler.h>
+#include <linux/fips.h>
+#include <linux/string.h>
+
 #define DES_KEY_SIZE		8
 #define DES_EXPKEY_WORDS	32
 #define DES_BLOCK_SIZE		8
@@ -14,6 +19,44 @@
 #define DES3_EDE_EXPKEY_WORDS	(3 * DES_EXPKEY_WORDS)
 #define DES3_EDE_BLOCK_SIZE	DES_BLOCK_SIZE
 
+static inline int __des3_verify_key(u32 *flags, const u8 *key)
+{
+	int err = -EINVAL;
+	u32 K[6];
+
+	memcpy(K, key, DES3_EDE_KEY_SIZE);
+
+	if (unlikely(!((K[0] ^ K[2]) | (K[1] ^ K[3])) ||
+		     !((K[2] ^ K[4]) | (K[3] ^ K[5]))) &&
+		     (fips_enabled ||
+		      (*flags & CRYPTO_TFM_REQ_FORBID_WEAK_KEYS)))
+		goto bad;
+
+	if (unlikely(!((K[0] ^ K[4]) | (K[1] ^ K[5]))) && fips_enabled)
+		goto bad;
+
+	err = 0;
+
+out:
+	memzero_explicit(K, DES3_EDE_KEY_SIZE);
+
+	return err;
+
+bad:
+	*flags |= CRYPTO_TFM_RES_WEAK_KEY;
+	goto out;
+}
+
+static inline int des3_verify_key(struct crypto_skcipher *tfm, const u8 *key)
+{
+	u32 flags;
+	int err;
+
+	flags = crypto_skcipher_get_flags(tfm);
+	err = __des3_verify_key(&flags, key);
+	crypto_skcipher_set_flags(tfm, flags);
+	return err;
+}
 
 extern unsigned long des_ekey(u32 *pe, const u8 *k);
 
