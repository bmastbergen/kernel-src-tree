dma-mapping: remove dma_max_pfn

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 79a986721decf428ba539e6e2c941c987acce655
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/79a98672.failed

These days, the DMA mapping code must bounce buffers for any unsupported
address. If the driver needs to optimize for natively supported ranges,
then it should use dma_get_required_mask.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Acked-by: Marc Gonzalez <marc.w.gonzalez@free.fr>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 79a986721decf428ba539e6e2c941c987acce655)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/include/asm/dma-mapping.h
#	include/linux/dma-mapping.h
diff --cc arch/arm/include/asm/dma-mapping.h
index 8436f6ade57d,7e0486ad1318..000000000000
--- a/arch/arm/include/asm/dma-mapping.h
+++ b/arch/arm/include/asm/dma-mapping.h
@@@ -89,20 -89,6 +89,23 @@@ static inline dma_addr_t virt_to_dma(st
  }
  #endif
  
++<<<<<<< HEAD
 +/* The ARM override for dma_max_pfn() */
 +static inline unsigned long dma_max_pfn(struct device *dev)
 +{
 +	return dma_to_pfn(dev, *dev->dma_mask);
 +}
 +#define dma_max_pfn(dev) dma_max_pfn(dev)
 +
 +#define arch_setup_dma_ops arch_setup_dma_ops
 +extern void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,
 +			       const struct iommu_ops *iommu, bool coherent);
 +
 +#define arch_teardown_dma_ops arch_teardown_dma_ops
 +extern void arch_teardown_dma_ops(struct device *dev);
 +
++=======
++>>>>>>> 79a986721dec (dma-mapping: remove dma_max_pfn)
  /* do not use this function in a driver */
  static inline bool is_device_dma_coherent(struct device *dev)
  {
diff --cc include/linux/dma-mapping.h
index 5f446033278a,8d13e28a8e07..000000000000
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@@ -720,22 -729,6 +720,25 @@@ static inline int dma_set_seg_boundary(
  	return -EIO;
  }
  
++<<<<<<< HEAD
 +#ifndef dma_max_pfn
 +static inline unsigned long dma_max_pfn(struct device *dev)
 +{
 +	return (*dev->dma_mask >> PAGE_SHIFT) + dev->dma_pfn_offset;
 +}
 +#endif
 +
 +/*
 + * Please always use dma_alloc_coherent instead as it already zeroes the memory!
 + */
 +static inline void *dma_zalloc_coherent(struct device *dev, size_t size,
 +					dma_addr_t *dma_handle, gfp_t flag)
 +{
 +	return dma_alloc_coherent(dev, size, dma_handle, flag);
 +}
 +
++=======
++>>>>>>> 79a986721dec (dma-mapping: remove dma_max_pfn)
  static inline int dma_get_cache_alignment(void)
  {
  #ifdef ARCH_DMA_MINALIGN
* Unmerged path arch/arm/include/asm/dma-mapping.h
* Unmerged path include/linux/dma-mapping.h
