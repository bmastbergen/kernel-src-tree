IB/uverbs: Have the core code create the uverbs_root_spec

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Jason Gunthorpe <jgg@ziepe.ca>
commit 7d96c9b17636b6148534617ddf95dead18617776
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/7d96c9b1.failed

There is no reason for drivers to do this, the core code should take of
everything. The drivers will provide their information from rodata to
describe their modifications to the core's base uapi specification.

The core uses this to build up the runtime uapi for each device.

	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
	Reviewed-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
	Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit 7d96c9b17636b6148534617ddf95dead18617776)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_main.c
#	drivers/infiniband/hw/mlx5/main.c
#	include/rdma/ib_verbs.h
diff --cc drivers/infiniband/core/uverbs_main.c
index f24a6ab4cbde,20003594b5d6..000000000000
--- a/drivers/infiniband/core/uverbs_main.c
+++ b/drivers/infiniband/core/uverbs_main.c
@@@ -1066,18 -1088,6 +1099,21 @@@ static void ib_uverbs_add_one(struct ib
  	if (device_create_file(uverbs_dev->dev, &dev_attr_abi_version))
  		goto err_class;
  
++<<<<<<< HEAD
 +	if (!device->specs_root) {
 +		const struct uverbs_object_tree_def *default_root[] = {
 +			uverbs_default_get_objects()};
 +
 +		uverbs_dev->specs_root = uverbs_alloc_spec_tree(1,
 +								default_root);
 +		if (IS_ERR(uverbs_dev->specs_root))
 +			goto err_class;
 +
 +		device->specs_root = uverbs_dev->specs_root;
 +	}
 +
++=======
++>>>>>>> 7d96c9b17636 (IB/uverbs: Have the core code create the uverbs_root_spec)
  	ib_set_client_data(device, &uverbs_client, uverbs_dev);
  
  	return;
diff --cc drivers/infiniband/hw/mlx5/main.c
index 1177d9389ab8,f86d831ee27c..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -5213,45 -5505,47 +5213,60 @@@ static void mlx5_ib_cleanup_multiport_m
  	mlx5_nic_vport_disable_roce(dev->mdev);
  }
  
 -ADD_UVERBS_ATTRIBUTES_SIMPLE(
 -	mlx5_ib_dm,
 -	UVERBS_OBJECT_DM,
 -	UVERBS_METHOD_DM_ALLOC,
 -	UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_START_OFFSET,
 -			    UVERBS_ATTR_TYPE(u64),
 -			    UA_MANDATORY),
 -	UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_PAGE_INDEX,
 -			    UVERBS_ATTR_TYPE(u16),
 -			    UA_MANDATORY));
 -
 -ADD_UVERBS_ATTRIBUTES_SIMPLE(
 -	mlx5_ib_flow_action,
 -	UVERBS_OBJECT_FLOW_ACTION,
 -	UVERBS_METHOD_FLOW_ACTION_ESP_CREATE,
 -	UVERBS_ATTR_FLAGS_IN(MLX5_IB_ATTR_CREATE_FLOW_ACTION_FLAGS,
 -			     enum mlx5_ib_uapi_flow_action_flags));
 -
 +ADD_UVERBS_ATTRIBUTES_SIMPLE(mlx5_ib_dm, UVERBS_OBJECT_DM,
 +			     UVERBS_METHOD_DM_ALLOC,
 +			     &UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_START_OFFSET,
 +						  UVERBS_ATTR_TYPE(u64),
 +						  UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)),
 +			     &UVERBS_ATTR_PTR_OUT(MLX5_IB_ATTR_ALLOC_DM_RESP_PAGE_INDEX,
 +						  UVERBS_ATTR_TYPE(u16),
 +						  UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)));
 +
 +ADD_UVERBS_ATTRIBUTES_SIMPLE(mlx5_ib_flow_action, UVERBS_OBJECT_FLOW_ACTION,
 +			     UVERBS_METHOD_FLOW_ACTION_ESP_CREATE,
 +			     &UVERBS_ATTR_PTR_IN(MLX5_IB_ATTR_CREATE_FLOW_ACTION_FLAGS,
 +						 UVERBS_ATTR_TYPE(u64),
 +						 UA_FLAGS(UVERBS_ATTR_SPEC_F_MANDATORY)));
 +
++<<<<<<< HEAD
 +#define NUM_TREES	2
++=======
++>>>>>>> 7d96c9b17636 (IB/uverbs: Have the core code create the uverbs_root_spec)
  static int populate_specs_root(struct mlx5_ib_dev *dev)
  {
- 	const struct uverbs_object_tree_def *default_root[NUM_TREES + 1] = {
- 		uverbs_default_get_objects()};
- 	size_t num_trees = 1;
+ 	const struct uverbs_object_tree_def **trees = dev->driver_trees;
+ 	size_t num_trees = 0;
  
- 	if (mlx5_accel_ipsec_device_caps(dev->mdev) & MLX5_ACCEL_IPSEC_CAP_DEVICE &&
- 	    !WARN_ON(num_trees >= ARRAY_SIZE(default_root)))
- 		default_root[num_trees++] = &mlx5_ib_flow_action;
+ 	if (mlx5_accel_ipsec_device_caps(dev->mdev) &
+ 	    MLX5_ACCEL_IPSEC_CAP_DEVICE)
+ 		trees[num_trees++] = &mlx5_ib_flow_action;
  
- 	if (MLX5_CAP_DEV_MEM(dev->mdev, memic) &&
- 	    !WARN_ON(num_trees >= ARRAY_SIZE(default_root)))
- 		default_root[num_trees++] = &mlx5_ib_dm;
+ 	if (MLX5_CAP_DEV_MEM(dev->mdev, memic))
+ 		trees[num_trees++] = &mlx5_ib_dm;
  
++<<<<<<< HEAD
 +	dev->ib_dev.specs_root =
 +		uverbs_alloc_spec_tree(num_trees, default_root);
 +
 +	return PTR_ERR_OR_ZERO(dev->ib_dev.specs_root);
 +}
 +
 +static void depopulate_specs_root(struct mlx5_ib_dev *dev)
 +{
 +	uverbs_free_spec_tree(dev->ib_dev.specs_root);
++=======
+ 	if (MLX5_CAP_GEN_64(dev->mdev, general_obj_types) &
+ 	    MLX5_GENERAL_OBJ_TYPES_CAP_UCTX)
+ 		trees[num_trees++] = mlx5_ib_get_devx_tree();
+ 
+ 	num_trees += mlx5_ib_get_flow_trees(trees + num_trees);
+ 
+ 	WARN_ON(num_trees >= ARRAY_SIZE(dev->driver_trees));
+ 	trees[num_trees] = NULL;
+ 	dev->ib_dev.driver_specs = trees;
+ 
+ 	return 0;
++>>>>>>> 7d96c9b17636 (IB/uverbs: Have the core code create the uverbs_root_spec)
  }
  
  static int mlx5_ib_read_counters(struct ib_counters *counters,
diff --cc include/rdma/ib_verbs.h
index 98a9e3a75253,3b07201b9a80..000000000000
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@@ -2594,7 -2580,7 +2594,11 @@@ struct ib_device 
  	const struct cpumask *(*get_vector_affinity)(struct ib_device *ibdev,
  						     int comp_vector);
  
++<<<<<<< HEAD
 +	struct uverbs_root_spec		*specs_root;
++=======
+ 	const struct uverbs_object_tree_def *const *driver_specs;
++>>>>>>> 7d96c9b17636 (IB/uverbs: Have the core code create the uverbs_root_spec)
  	enum rdma_driver_id		driver_id;
  };
  
diff --git a/drivers/infiniband/core/uverbs_ioctl_merge.c b/drivers/infiniband/core/uverbs_ioctl_merge.c
index 6ceb672c4d46..7c014bea5dbc 100644
--- a/drivers/infiniband/core/uverbs_ioctl_merge.c
+++ b/drivers/infiniband/core/uverbs_ioctl_merge.c
@@ -556,7 +556,6 @@ void uverbs_free_spec_tree(struct uverbs_root_spec *root)
 
 	kfree(root);
 }
-EXPORT_SYMBOL(uverbs_free_spec_tree);
 
 struct uverbs_root_spec *uverbs_alloc_spec_tree(unsigned int num_trees,
 						const struct uverbs_object_tree_def **trees)
@@ -661,4 +660,3 @@ struct uverbs_root_spec *uverbs_alloc_spec_tree(unsigned int num_trees,
 	uverbs_free_spec_tree(root_spec);
 	return ERR_PTR(res);
 }
-EXPORT_SYMBOL(uverbs_alloc_spec_tree);
* Unmerged path drivers/infiniband/core/uverbs_main.c
diff --git a/drivers/infiniband/core/uverbs_std_types.c b/drivers/infiniband/core/uverbs_std_types.c
index 06085446ffc0..677309d4743f 100644
--- a/drivers/infiniband/core/uverbs_std_types.c
+++ b/drivers/infiniband/core/uverbs_std_types.c
@@ -313,4 +313,3 @@ const struct uverbs_object_tree_def *uverbs_default_get_objects(void)
 {
 	return &uverbs_default_objects;
 }
-EXPORT_SYMBOL_GPL(uverbs_default_get_objects);
* Unmerged path drivers/infiniband/hw/mlx5/main.c
diff --git a/drivers/infiniband/hw/mlx5/mlx5_ib.h b/drivers/infiniband/hw/mlx5/mlx5_ib.h
index 92fb9ab90446..bedfc3e694bd 100644
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@ -851,6 +851,7 @@ to_mcounters(struct ib_counters *ibcntrs)
 
 struct mlx5_ib_dev {
 	struct ib_device		ib_dev;
+	const struct uverbs_object_tree_def *driver_trees[6];
 	struct mlx5_core_dev		*mdev;
 	struct mlx5_roce		roce[MLX5_MAX_PORTS];
 	int				num_ports;
* Unmerged path include/rdma/ib_verbs.h
