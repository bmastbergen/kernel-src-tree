ice: use virt channel status codes

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Mitch Williams <mitch.a.williams@intel.com>
commit cf6c6e01bf5debe1d144bab6c8c903b926fa8882
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/cf6c6e01.failed

When communicating with the AVF driver, we need to use the status codes
from virtchnl.h, not our own ice-specific codes. Without this, when an
error occurs, the VF will report nonsensical results.

NOTE: this depends on changes made to include/linux/avf/virtchnl.h by
commit bb58fd7eeffc ("i40e: Update status codes")

	Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
	Signed-off-by: Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit cf6c6e01bf5debe1d144bab6c8c903b926fa8882)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index 73b468dd2eda,de3d268dcf57..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@@ -1229,8 -1320,9 +1262,14 @@@ static void ice_vc_dis_vf(struct ice_v
   *
   * send msg to VF
   */
++<<<<<<< HEAD
 +static int ice_vc_send_msg_to_vf(struct ice_vf *vf, u32 v_opcode,
 +				 enum ice_status v_retval, u8 *msg, u16 msglen)
++=======
+ static int
+ ice_vc_send_msg_to_vf(struct ice_vf *vf, u32 v_opcode,
+ 		      enum virtchnl_status_code v_retval, u8 *msg, u16 msglen)
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  {
  	enum ice_status aq_ret;
  	struct ice_pf *pf;
@@@ -1333,6 -1425,11 +1372,14 @@@ static int ice_vc_get_vf_res_msg(struc
  
  	vfres->vf_cap_flags = VIRTCHNL_VF_OFFLOAD_L2;
  	vsi = pf->vsi[vf->lan_vsi_idx];
++<<<<<<< HEAD
++=======
+ 	if (!vsi) {
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
+ 		goto err;
+ 	}
+ 
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  	if (!vsi->info.pvid)
  		vfres->vf_cap_flags |= VIRTCHNL_VF_OFFLOAD_VLAN;
  
@@@ -1463,14 -1560,14 +1510,20 @@@ static bool ice_vc_isvalid_q_id(struct 
   */
  static int ice_vc_config_rss_key(struct ice_vf *vf, u8 *msg)
  {
+ 	enum virtchnl_status_code v_ret = VIRTCHNL_STATUS_SUCCESS;
  	struct virtchnl_rss_key *vrk =
  		(struct virtchnl_rss_key *)msg;
++<<<<<<< HEAD
 +	struct ice_vsi *vsi = NULL;
 +	enum ice_status aq_ret;
 +	int ret;
++=======
+ 	struct ice_pf *pf = vf->pf;
+ 	struct ice_vsi *vsi = NULL;
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  
  	if (!test_bit(ICE_VF_STATE_ACTIVE, vf->vf_states)) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1479,9 -1576,9 +1532,9 @@@
  		goto error_param;
  	}
  
 -	vsi = pf->vsi[vf->lan_vsi_idx];
 +	vsi = ice_find_vsi_from_id(vf->pf, vrk->vsi_id);
  	if (!vsi) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1512,12 -1609,12 +1565,18 @@@ error_param
  static int ice_vc_config_rss_lut(struct ice_vf *vf, u8 *msg)
  {
  	struct virtchnl_rss_lut *vrl = (struct virtchnl_rss_lut *)msg;
++<<<<<<< HEAD
 +	struct ice_vsi *vsi = NULL;
 +	enum ice_status aq_ret;
 +	int ret;
++=======
+ 	enum virtchnl_status_code v_ret = VIRTCHNL_STATUS_SUCCESS;
+ 	struct ice_pf *pf = vf->pf;
+ 	struct ice_vsi *vsi = NULL;
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  
  	if (!test_bit(ICE_VF_STATE_ACTIVE, vf->vf_states)) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1526,9 -1623,9 +1585,9 @@@
  		goto error_param;
  	}
  
 -	vsi = pf->vsi[vf->lan_vsi_idx];
 +	vsi = ice_find_vsi_from_id(vf->pf, vrl->vsi_id);
  	if (!vsi) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1558,9 -1655,10 +1617,14 @@@ error_param
   */
  static int ice_vc_get_stats_msg(struct ice_vf *vf, u8 *msg)
  {
+ 	enum virtchnl_status_code v_ret = VIRTCHNL_STATUS_SUCCESS;
  	struct virtchnl_queue_select *vqs =
  		(struct virtchnl_queue_select *)msg;
++<<<<<<< HEAD
 +	enum ice_status aq_ret = 0;
++=======
+ 	struct ice_pf *pf = vf->pf;
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  	struct ice_eth_stats stats;
  	struct ice_vsi *vsi;
  
@@@ -1574,9 -1672,9 +1638,9 @@@
  		goto error_param;
  	}
  
 -	vsi = pf->vsi[vf->lan_vsi_idx];
 +	vsi = ice_find_vsi_from_id(vf->pf, vqs->vsi_id);
  	if (!vsi) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1600,9 -1698,10 +1664,14 @@@ error_param
   */
  static int ice_vc_ena_qs_msg(struct ice_vf *vf, u8 *msg)
  {
+ 	enum virtchnl_status_code v_ret = VIRTCHNL_STATUS_SUCCESS;
  	struct virtchnl_queue_select *vqs =
  	    (struct virtchnl_queue_select *)msg;
++<<<<<<< HEAD
 +	enum ice_status aq_ret = 0;
++=======
+ 	struct ice_pf *pf = vf->pf;
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  	struct ice_vsi *vsi;
  
  	if (!test_bit(ICE_VF_STATE_ACTIVE, vf->vf_states)) {
@@@ -1620,9 -1719,9 +1689,9 @@@
  		goto error_param;
  	}
  
 -	vsi = pf->vsi[vf->lan_vsi_idx];
 +	vsi = ice_find_vsi_from_id(vf->pf, vqs->vsi_id);
  	if (!vsi) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1653,9 -1752,10 +1722,14 @@@ error_param
   */
  static int ice_vc_dis_qs_msg(struct ice_vf *vf, u8 *msg)
  {
+ 	enum virtchnl_status_code v_ret = VIRTCHNL_STATUS_SUCCESS;
  	struct virtchnl_queue_select *vqs =
  	    (struct virtchnl_queue_select *)msg;
++<<<<<<< HEAD
 +	enum ice_status aq_ret = 0;
++=======
+ 	struct ice_pf *pf = vf->pf;
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  	struct ice_vsi *vsi;
  
  	if (!test_bit(ICE_VF_STATE_ACTIVE, vf->vf_states) &&
@@@ -1674,9 -1774,9 +1748,9 @@@
  		goto error_param;
  	}
  
 -	vsi = pf->vsi[vf->lan_vsi_idx];
 +	vsi = ice_find_vsi_from_id(vf->pf, vqs->vsi_id);
  	if (!vsi) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1740,9 -1840,9 +1814,9 @@@ static int ice_vc_cfg_irq_map_msg(struc
  			goto error_param;
  		}
  
 -		vsi = pf->vsi[vf->lan_vsi_idx];
 +		vsi = ice_find_vsi_from_id(vf->pf, vsi_id);
  		if (!vsi) {
- 			aq_ret = ICE_ERR_PARAM;
+ 			v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  			goto error_param;
  		}
  
@@@ -1811,9 -1911,8 +1885,8 @@@ static int ice_vc_cfg_qs_msg(struct ice
  		goto error_param;
  	}
  
 -	vsi = pf->vsi[vf->lan_vsi_idx];
 +	vsi = ice_find_vsi_from_id(vf->pf, qci->vsi_id);
  	if (!vsi) {
- 		aq_ret = ICE_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -1915,7 -2013,6 +1987,10 @@@ ice_vc_handle_mac_addr_msg(struct ice_v
  	    (struct virtchnl_ether_addr_list *)msg;
  	struct ice_pf *pf = vf->pf;
  	enum virtchnl_ops vc_op;
++<<<<<<< HEAD
 +	enum ice_status ret;
++=======
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  	LIST_HEAD(mac_list);
  	struct ice_vsi *vsi;
  	int mac_count = 0;
@@@ -1935,12 -2032,20 +2010,28 @@@
  	if (set && !ice_is_vf_trusted(vf) &&
  	    (vf->num_mac + al->num_elements) > ICE_MAX_MACADDR_PER_VF) {
  		dev_err(&pf->pdev->dev,
++<<<<<<< HEAD
 +			"Can't add more MAC addresses, because VF is not trusted, switch the VF to trusted mode in order to add more functionalities\n");
 +		ret = ICE_ERR_PARAM;
++=======
+ 			"Can't add more MAC addresses, because VF-%d is not trusted, switch the VF to trusted mode in order to add more functionalities\n",
+ 			vf->vf_id);
+ 		/* There is no need to let VF know about not being trusted
+ 		 * to add more MAC addr, so we can just return success message.
+ 		 */
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  		goto handle_mac_exit;
  	}
  
  	vsi = pf->vsi[vf->lan_vsi_idx];
++<<<<<<< HEAD
++=======
+ 	if (!vsi) {
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
+ 		goto handle_mac_exit;
+ 	}
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  
  	for (i = 0; i < al->num_elements; i++) {
  		u8 *maddr = al->list[i].addr;
@@@ -2192,11 -2297,15 +2283,11 @@@ error_set_pvid
   */
  static int ice_vc_process_vlan_msg(struct ice_vf *vf, u8 *msg, bool add_v)
  {
+ 	enum virtchnl_status_code v_ret = VIRTCHNL_STATUS_SUCCESS;
  	struct virtchnl_vlan_filter_list *vfl =
  	    (struct virtchnl_vlan_filter_list *)msg;
- 	enum ice_status aq_ret = 0;
  	struct ice_pf *pf = vf->pf;
 -	bool vlan_promisc = false;
  	struct ice_vsi *vsi;
 -	struct ice_hw *hw;
 -	int status = 0;
 -	u8 promisc_m;
  	int i;
  
  	if (!test_bit(ICE_VF_STATE_ACTIVE, vf->vf_states)) {
@@@ -2212,8 -2321,12 +2303,17 @@@
  	if (add_v && !ice_is_vf_trusted(vf) &&
  	    vf->num_vlan >= ICE_MAX_VLAN_PER_VF) {
  		dev_info(&pf->pdev->dev,
++<<<<<<< HEAD
 +			 "VF is not trusted, switch the VF to trusted mode, in order to add more VLAN addresses\n");
 +		aq_ret = ICE_ERR_PARAM;
++=======
+ 			 "VF-%d is not trusted, switch the VF to trusted mode, in order to add more VLAN addresses\n",
+ 			 vf->vf_id);
+ 		/* There is no need to let VF know about being not trusted,
+ 		 * so we can just return success message here
+ 		 */
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  		goto error_param;
  	}
  
@@@ -2226,9 -2339,10 +2326,9 @@@
  		}
  	}
  
 -	hw = &pf->hw;
 -	vsi = pf->vsi[vf->lan_vsi_idx];
 +	vsi = ice_find_vsi_from_id(vf->pf, vfl->vsi_id);
  	if (!vsi) {
- 		aq_ret = ICE_ERR_PARAM;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  		goto error_param;
  	}
  
@@@ -2249,15 -2367,35 +2349,47 @@@
  		for (i = 0; i < vfl->num_elements; i++) {
  			u16 vid = vfl->vlan_id[i];
  
++<<<<<<< HEAD
 +			if (!ice_vsi_add_vlan(vsi, vid)) {
 +				vf->num_vlan++;
 +
 +				/* Enable VLAN pruning when VLAN 0 is added */
 +				if (unlikely(!vid))
 +					if (ice_cfg_vlan_pruning(vsi, true))
 +						aq_ret = ICE_ERR_PARAM;
 +			} else {
 +				aq_ret = ICE_ERR_PARAM;
++=======
+ 			if (ice_vsi_add_vlan(vsi, vid)) {
+ 				v_ret = VIRTCHNL_STATUS_ERR_PARAM;
+ 				goto error_param;
+ 			}
+ 
+ 			vf->num_vlan++;
+ 			/* Enable VLAN pruning when VLAN is added */
+ 			if (!vlan_promisc) {
+ 				status = ice_cfg_vlan_pruning(vsi, true, false);
+ 				if (status) {
+ 					v_ret = VIRTCHNL_STATUS_ERR_PARAM;
+ 					dev_err(&pf->pdev->dev,
+ 						"Enable VLAN pruning on VLAN ID: %d failed error-%d\n",
+ 						vid, status);
+ 					goto error_param;
+ 				}
+ 			} else {
+ 				/* Enable Ucast/Mcast VLAN promiscuous mode */
+ 				promisc_m = ICE_PROMISC_VLAN_TX |
+ 					    ICE_PROMISC_VLAN_RX;
+ 
+ 				status = ice_set_vsi_promisc(hw, vsi->idx,
+ 							     promisc_m, vid);
+ 				if (status) {
+ 					v_ret = VIRTCHNL_STATUS_ERR_PARAM;
+ 					dev_err(&pf->pdev->dev,
+ 						"Enable Unicast/multicast promiscuous mode on VLAN ID:%d failed error-%d\n",
+ 						vid, status);
+ 				}
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  			}
  		}
  	} else {
@@@ -2267,12 -2405,22 +2399,19 @@@
  			/* Make sure ice_vsi_kill_vlan is successful before
  			 * updating VLAN information
  			 */
++<<<<<<< HEAD
 +			if (!ice_vsi_kill_vlan(vsi, vid)) {
 +				vf->num_vlan--;
++=======
+ 			if (ice_vsi_kill_vlan(vsi, vid)) {
+ 				v_ret = VIRTCHNL_STATUS_ERR_PARAM;
+ 				goto error_param;
+ 			}
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  
 -			vf->num_vlan--;
 -			/* Disable VLAN pruning when removing VLAN */
 -			ice_cfg_vlan_pruning(vsi, false, false);
 -
 -			/* Disable Unicast/Multicast VLAN promiscuous mode */
 -			if (vlan_promisc) {
 -				promisc_m = ICE_PROMISC_VLAN_TX |
 -					    ICE_PROMISC_VLAN_RX;
 -
 -				ice_clear_vsi_promisc(hw, vsi->idx,
 -						      promisc_m, vid);
 +				/* Disable VLAN pruning when removing VLAN 0 */
 +				if (unlikely(!vid))
 +					ice_cfg_vlan_pruning(vsi, false);
  			}
  		}
  	}
@@@ -2355,8 -2503,13 +2494,16 @@@ static int ice_vc_dis_vlan_stripping(st
  	}
  
  	vsi = pf->vsi[vf->lan_vsi_idx];
++<<<<<<< HEAD
++=======
+ 	if (!vsi) {
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
+ 		goto error_param;
+ 	}
+ 
++>>>>>>> cf6c6e01bf5d (ice: use virt channel status codes)
  	if (ice_vsi_manage_vlan_stripping(vsi, false))
- 		aq_ret = ICE_ERR_AQ_ERROR;
+ 		v_ret = VIRTCHNL_STATUS_ERR_PARAM;
  
  error_param:
  	return ice_vc_send_msg_to_vf(vf, VIRTCHNL_OP_DISABLE_VLAN_STRIPPING,
* Unmerged path drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
