net/mlx5e: Add ndo_set_feature for uplink representor

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Chris Mi <chrism@mellanox.com>
commit d3cbd4254df881777e2efb68ee10ede0d9dc0647
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d3cbd425.failed

After we have a dedicated uplink representor, the new netdev ops
doesn't support ndo_set_feature. Because of that, we can't change
some features, eg. rxvlan. Now add it back.

In this patch, I also do a cleanup for the features flag handling,
eg. remove duplicate NETIF_F_HW_TC flag setting.

Fixes: aec002f6f82c ("net/mlx5e: Uninstantiate esw manager vport netdev on switchdev mode")
	Signed-off-by: Chris Mi <chrism@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Reviewed-by: Vlad Buslov <vladbu@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit d3cbd4254df881777e2efb68ee10ede0d9dc0647)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 007808f3e87f,ab027f57725c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -995,4 -1106,17 +995,20 @@@ void mlx5e_build_rss_params(struct mlx5
  u8 mlx5e_params_calculate_tx_min_inline(struct mlx5_core_dev *mdev);
  void mlx5e_rx_dim_work(struct work_struct *work);
  void mlx5e_tx_dim_work(struct work_struct *work);
++<<<<<<< HEAD
++=======
+ 
+ void mlx5e_add_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti);
+ void mlx5e_del_vxlan_port(struct net_device *netdev, struct udp_tunnel_info *ti);
+ netdev_features_t mlx5e_features_check(struct sk_buff *skb,
+ 				       struct net_device *netdev,
+ 				       netdev_features_t features);
+ int mlx5e_set_features(struct net_device *netdev, netdev_features_t features);
+ #ifdef CONFIG_MLX5_ESWITCH
+ int mlx5e_set_vf_mac(struct net_device *dev, int vf, u8 *mac);
+ int mlx5e_set_vf_rate(struct net_device *dev, int vf, int min_tx_rate, int max_tx_rate);
+ int mlx5e_get_vf_config(struct net_device *dev, int vf, struct ifla_vf_info *ivi);
+ int mlx5e_get_vf_stats(struct net_device *dev, int vf, struct ifla_vf_stats *vf_stats);
+ #endif
++>>>>>>> d3cbd4254df8 (net/mlx5e: Add ndo_set_feature for uplink representor)
  #endif /* __MLX5_EN_H__ */
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 48489728eca3,2f406b161bcf..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -1097,15 -1324,53 +1097,42 @@@ static const struct net_device_ops mlx5
  	.ndo_start_xmit          = mlx5e_xmit,
  	.ndo_get_phys_port_name  = mlx5e_rep_get_phys_port_name,
  	.ndo_setup_tc            = mlx5e_rep_setup_tc,
 -	.ndo_get_stats64         = mlx5e_vf_rep_get_stats,
 -	.ndo_has_offload_stats	 = mlx5e_rep_has_offload_stats,
 -	.ndo_get_offload_stats	 = mlx5e_rep_get_offload_stats,
 -	.ndo_change_mtu          = mlx5e_vf_rep_change_mtu,
 -	.ndo_get_port_parent_id	 = mlx5e_rep_get_port_parent_id,
 +	.ndo_get_stats64         = mlx5e_rep_get_stats,
 +	.ndo_has_offload_stats	 = mlx5e_has_offload_stats,
 +	.ndo_get_offload_stats	 = mlx5e_get_offload_stats,
 +	.ndo_change_mtu          = mlx5e_change_rep_mtu,
  };
  
++<<<<<<< HEAD
 +static void mlx5e_build_rep_params(struct mlx5_core_dev *mdev,
 +				   struct mlx5e_params *params, u16 mtu)
++=======
+ static const struct net_device_ops mlx5e_netdev_ops_uplink_rep = {
+ 	.ndo_open                = mlx5e_open,
+ 	.ndo_stop                = mlx5e_close,
+ 	.ndo_start_xmit          = mlx5e_xmit,
+ 	.ndo_set_mac_address     = mlx5e_uplink_rep_set_mac,
+ 	.ndo_get_phys_port_name  = mlx5e_rep_get_phys_port_name,
+ 	.ndo_setup_tc            = mlx5e_rep_setup_tc,
+ 	.ndo_get_stats64         = mlx5e_get_stats,
+ 	.ndo_has_offload_stats	 = mlx5e_rep_has_offload_stats,
+ 	.ndo_get_offload_stats	 = mlx5e_rep_get_offload_stats,
+ 	.ndo_change_mtu          = mlx5e_uplink_rep_change_mtu,
+ 	.ndo_udp_tunnel_add      = mlx5e_add_vxlan_port,
+ 	.ndo_udp_tunnel_del      = mlx5e_del_vxlan_port,
+ 	.ndo_features_check      = mlx5e_features_check,
+ 	.ndo_set_vf_mac          = mlx5e_set_vf_mac,
+ 	.ndo_set_vf_rate         = mlx5e_set_vf_rate,
+ 	.ndo_get_vf_config       = mlx5e_get_vf_config,
+ 	.ndo_get_vf_stats        = mlx5e_get_vf_stats,
+ 	.ndo_set_vf_vlan         = mlx5e_uplink_rep_set_vf_vlan,
+ 	.ndo_get_port_parent_id	 = mlx5e_rep_get_port_parent_id,
+ 	.ndo_set_features        = mlx5e_set_features,
+ };
+ 
+ bool mlx5e_eswitch_rep(struct net_device *netdev)
++>>>>>>> d3cbd4254df8 (net/mlx5e: Add ndo_set_feature for uplink representor)
  {
 -	if (netdev->netdev_ops == &mlx5e_netdev_ops_vf_rep ||
 -	    netdev->netdev_ops == &mlx5e_netdev_ops_uplink_rep)
 -		return true;
 -
 -	return false;
 -}
 -
 -static void mlx5e_build_rep_params(struct net_device *netdev)
 -{
 -	struct mlx5e_priv *priv = netdev_priv(netdev);
 -	struct mlx5e_rep_priv *rpriv = priv->ppriv;
 -	struct mlx5_eswitch_rep *rep = rpriv->rep;
 -	struct mlx5_core_dev *mdev = priv->mdev;
 -	struct mlx5e_params *params;
 -
  	u8 cq_period_mode = MLX5_CAP_GEN(mdev, cq_period_start_from_cqe) ?
  					 MLX5_CQ_PERIOD_MODE_START_FROM_CQE :
  					 MLX5_CQ_PERIOD_MODE_START_FROM_EQE;
@@@ -1136,13 -1426,9 +1163,15 @@@ static void mlx5e_build_rep_netdev(stru
  
  	netdev->watchdog_timeo    = 15 * HZ;
  
++<<<<<<< HEAD
 +	netdev->ethtool_ops	  = &mlx5e_rep_ethtool_ops;
 +
 +	netdev->switchdev_ops = &mlx5e_rep_switchdev_ops;
++=======
+ 	netdev->features       |= NETIF_F_NETNS_LOCAL;
++>>>>>>> d3cbd4254df8 (net/mlx5e: Add ndo_set_feature for uplink representor)
  
- 	netdev->features	 |= NETIF_F_HW_TC | NETIF_F_NETNS_LOCAL;
- 	netdev->hw_features      |= NETIF_F_HW_TC;
- 
+ 	netdev->hw_features    |= NETIF_F_HW_TC;
  	netdev->hw_features    |= NETIF_F_SG;
  	netdev->hw_features    |= NETIF_F_IP_CSUM;
  	netdev->hw_features    |= NETIF_F_IPV6_CSUM;
@@@ -1151,7 -1437,9 +1180,13 @@@
  	netdev->hw_features    |= NETIF_F_TSO6;
  	netdev->hw_features    |= NETIF_F_RXCSUM;
  
++<<<<<<< HEAD
 +	if (rep->vport != FDB_UPLINK_VPORT)
++=======
+ 	if (rep->vport == MLX5_VPORT_UPLINK)
+ 		netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_RX;
+ 	else
++>>>>>>> d3cbd4254df8 (net/mlx5e: Add ndo_set_feature for uplink representor)
  		netdev->features |= NETIF_F_VLAN_CHALLENGED;
  
  	netdev->features |= netdev->hw_features;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 77a982eaec03..4e9315b3caff 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -3662,8 +3662,7 @@ static int mlx5e_handle_feature(struct net_device *netdev,
 	return 0;
 }
 
-static int mlx5e_set_features(struct net_device *netdev,
-			      netdev_features_t features)
+int mlx5e_set_features(struct net_device *netdev, netdev_features_t features)
 {
 	netdev_features_t oper_features = netdev->features;
 	int err = 0;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
