tipc: fix link established but not in session

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Tuong Lien <tuong.t.lien@dektech.com.au>
commit f7a937801b9f8788519a23b12cb4d6c2c84d84be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/f7a93780.failed

According to the link FSM, when a link endpoint got RESET_MSG (- a
traditional one without the stopping bit) from its peer, it moves to
PEER_RESET state and raises a LINK_DOWN event which then resets the
link itself. Its state will become ESTABLISHING after the reset event
and the link will be re-established soon after this endpoint starts to
send ACTIVATE_MSG to the peer.

There is no problem with this mechanism, however the link resetting has
cleared the link 'in_session' flag (along with the other important link
data such as: the link 'mtu') that was correctly set up at the 1st step
(i.e. when this endpoint received the peer RESET_MSG). As a result, the
link will become ESTABLISHED, but the 'in_session' flag is not set, and
all STATE_MSG from its peer will be dropped at the link_validate_msg().
It means the link not synced and will sooner or later face a failure.

Since the link reset action is obviously needed for a new link session
(this is also true in the other situations), the problem here is that
the link is re-established a bit too early when the link endpoints are
not really in-sync yet. The commit forces a resync as already done in
the previous commit 91986ee166cf ("tipc: fix link session and
re-establish issues") by simply varying the link 'peer_session' value
at the link_reset().

	Acked-by: Jon Maloy <jon.maloy@ericsson.com>
	Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f7a937801b9f8788519a23b12cb4d6c2c84d84be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/tipc/link.c
diff --cc net/tipc/link.c
index 8043d0e17ef3,131aa2f0fd27..000000000000
--- a/net/tipc/link.c
+++ b/net/tipc/link.c
@@@ -853,7 -868,9 +853,13 @@@ void tipc_link_reset(struct tipc_link *
  
  	__skb_queue_head_init(&list);
  
++<<<<<<< HEAD
 +	l->peer_session = ANY_SESSION;
++=======
+ 	l->in_session = false;
+ 	/* Force re-synch of peer session number before establishing */
+ 	l->peer_session--;
++>>>>>>> f7a937801b9f (tipc: fix link established but not in session)
  	l->session++;
  	l->mtu = l->advertised_mtu;
  
* Unmerged path net/tipc/link.c
