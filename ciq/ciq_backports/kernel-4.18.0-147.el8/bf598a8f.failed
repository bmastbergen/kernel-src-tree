bpftool: Improve handling of ENOENT on map dumps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author David Ahern <dsahern@gmail.com>
commit bf598a8f0f771302d4ecb0ef0003c54732221597
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/bf598a8f.failed

bpftool output is not user friendly when dumping a map with only a few
populated entries:

    $ bpftool map
    1: devmap  name tx_devmap  flags 0x0
            key 4B  value 4B  max_entries 64  memlock 4096B
    2: array  name tx_idxmap  flags 0x0
            key 4B  value 4B  max_entries 64  memlock 4096B

    $ bpftool map dump id 1
    key:
    00 00 00 00
    value:
    No such file or directory
    key:
    01 00 00 00
    value:
    No such file or directory
    key:
    02 00 00 00
    value:
    No such file or directory
    key: 03 00 00 00  value: 03 00 00 00

Handle ENOENT by keeping the line format sane and dumping
"<no entry>" for the value

    $ bpftool map dump id 1
    key: 00 00 00 00  value: <no entry>
    key: 01 00 00 00  value: <no entry>
    key: 02 00 00 00  value: <no entry>
    key: 03 00 00 00  value: 03 00 00 00
    ...

	Signed-off-by: David Ahern <dsahern@gmail.com>
	Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit bf598a8f0f771302d4ecb0ef0003c54732221597)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/bpf/bpftool/map.c
diff --cc tools/bpf/bpftool/map.c
index 59eedcf578f5,dc9a8967ab8c..000000000000
--- a/tools/bpf/bpftool/map.c
+++ b/tools/bpf/bpftool/map.c
@@@ -527,12 -695,66 +533,67 @@@ static int do_show(int argc, char **arg
  	return errno == ENOENT ? 0 : -1;
  }
  
++<<<<<<< HEAD
++=======
+ static int dump_map_elem(int fd, void *key, void *value,
+ 			 struct bpf_map_info *map_info, struct btf *btf,
+ 			 json_writer_t *btf_wtr)
+ {
+ 	int num_elems = 0;
+ 	int lookup_errno;
+ 
+ 	if (!bpf_map_lookup_elem(fd, key, value)) {
+ 		if (json_output) {
+ 			print_entry_json(map_info, key, value, btf);
+ 		} else {
+ 			if (btf) {
+ 				struct btf_dumper d = {
+ 					.btf = btf,
+ 					.jw = btf_wtr,
+ 					.is_plain_text = true,
+ 				};
+ 
+ 				do_dump_btf(&d, map_info, key, value);
+ 			} else {
+ 				print_entry_plain(map_info, key, value);
+ 			}
+ 			num_elems++;
+ 		}
+ 		return num_elems;
+ 	}
+ 
+ 	/* lookup error handling */
+ 	lookup_errno = errno;
+ 
+ 	if (map_is_map_of_maps(map_info->type) ||
+ 	    map_is_map_of_progs(map_info->type))
+ 		return 0;
+ 
+ 	if (json_output) {
+ 		jsonw_name(json_wtr, "key");
+ 		print_hex_data_json(key, map_info->key_size);
+ 		jsonw_name(json_wtr, "value");
+ 		jsonw_start_object(json_wtr);
+ 		jsonw_string_field(json_wtr, "error", strerror(lookup_errno));
+ 		jsonw_end_object(json_wtr);
+ 	} else {
+ 		if (errno == ENOENT)
+ 			print_entry_plain(map_info, key, NULL);
+ 		else
+ 			print_entry_error(map_info, key,
+ 					  strerror(lookup_errno));
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> bf598a8f0f77 (bpftool: Improve handling of ENOENT on map dumps)
  static int do_dump(int argc, char **argv)
  {
 -	struct bpf_map_info info = {};
  	void *key, *value, *prev_key;
  	unsigned int num_elems = 0;
 +	struct bpf_map_info info = {};
  	__u32 len = sizeof(info);
 -	json_writer_t *btf_wtr;
 -	struct btf *btf = NULL;
  	int err;
  	int fd;
  
* Unmerged path tools/bpf/bpftool/map.c
