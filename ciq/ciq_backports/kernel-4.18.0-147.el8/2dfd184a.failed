flow_dissector: fix build failure without CONFIG_NET

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Willem de Bruijn <willemb@google.com>
commit 2dfd184abd38fd72d80715fa8b00c9de78490200
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/2dfd184a.failed

If boolean CONFIG_BPF_SYSCALL is enabled, kernel/bpf/syscall.c will
call flow_dissector functions from net/core/flow_dissector.c.

This causes this build failure if CONFIG_NET is disabled:

    kernel/bpf/syscall.o: In function `__x64_sys_bpf':
    syscall.c:(.text+0x3278): undefined reference to
    `skb_flow_dissector_bpf_prog_attach'
    syscall.c:(.text+0x3310): undefined reference to
    `skb_flow_dissector_bpf_prog_detach'
    kernel/bpf/syscall.o:(.rodata+0x3f0): undefined reference to
    `flow_dissector_prog_ops'
    kernel/bpf/verifier.o:(.rodata+0x250): undefined reference to
    `flow_dissector_verifier_ops'

Analogous to other optional BPF program types in syscall.c, add stubs
if the relevant functions are not compiled and move the BPF_PROG_TYPE
definition in the #ifdef CONFIG_NET block.

Fixes: d58e468b1112 ("flow_dissector: implements flow dissector BPF hook")
	Reported-by: Randy Dunlap <rdunlap@infradead.org>
	Signed-off-by: Willem de Bruijn <willemb@google.com>
	Acked-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
	Acked-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 2dfd184abd38fd72d80715fa8b00c9de78490200)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf_types.h
#	include/linux/skbuff.h
diff --cc include/linux/bpf_types.h
index 14fd6c02d258,c9bd6fb765b0..000000000000
--- a/include/linux/bpf_types.h
+++ b/include/linux/bpf_types.h
@@@ -29,6 -30,9 +30,12 @@@ BPF_PROG_TYPE(BPF_PROG_TYPE_CGROUP_DEVI
  #ifdef CONFIG_BPF_LIRC_MODE2
  BPF_PROG_TYPE(BPF_PROG_TYPE_LIRC_MODE2, lirc_mode2)
  #endif
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_INET
+ BPF_PROG_TYPE(BPF_PROG_TYPE_SK_REUSEPORT, sk_reuseport)
+ #endif
++>>>>>>> 2dfd184abd38 (flow_dissector: fix build failure without CONFIG_NET)
  
  BPF_MAP_TYPE(BPF_MAP_TYPE_ARRAY, array_map_ops)
  BPF_MAP_TYPE(BPF_MAP_TYPE_PERCPU_ARRAY, percpu_array_map_ops)
diff --cc include/linux/skbuff.h
index f089b9ca4a66,76be85ea392a..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -1213,6 -1194,24 +1213,27 @@@ void skb_flow_dissector_init(struct flo
  			     const struct flow_dissector_key *key,
  			     unsigned int key_count);
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NET
+ int skb_flow_dissector_bpf_prog_attach(const union bpf_attr *attr,
+ 				       struct bpf_prog *prog);
+ 
+ int skb_flow_dissector_bpf_prog_detach(const union bpf_attr *attr);
+ #else
+ static inline int skb_flow_dissector_bpf_prog_attach(const union bpf_attr *attr,
+ 						     struct bpf_prog *prog)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ 
+ static inline int skb_flow_dissector_bpf_prog_detach(const union bpf_attr *attr)
+ {
+ 	return -EOPNOTSUPP;
+ }
+ #endif
+ 
++>>>>>>> 2dfd184abd38 (flow_dissector: fix build failure without CONFIG_NET)
  bool __skb_flow_dissect(const struct sk_buff *skb,
  			struct flow_dissector *flow_dissector,
  			void *target_container,
* Unmerged path include/linux/bpf_types.h
* Unmerged path include/linux/skbuff.h
