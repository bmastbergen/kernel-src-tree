RDMA/mlx5: Add flow actions support to raw create flow

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Mark Bloch <markb@mellanox.com>
commit fa76d24ee0aa24fff3fa9ba71fc2179fb88fef6a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/fa76d24e.failed

Support attaching flow actions to a flow rule via raw create flow.
For now only NIC RX path is supported. This change requires to export
flow resources management functions so we can maintain proper bookkeeping
of flow actions.

	Signed-off-by: Mark Bloch <markb@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit fa76d24ee0aa24fff3fa9ba71fc2179fb88fef6a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_cmd.c
#	drivers/infiniband/hw/mlx5/flow.c
#	include/rdma/uverbs_std_types.h
#	include/uapi/rdma/mlx5_user_ioctl_cmds.h
diff --cc drivers/infiniband/core/uverbs_cmd.c
index 300532a4cde8,9c87c98a0f19..000000000000
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@@ -2803,16 -2747,7 +2803,20 @@@ out_put
  	return ret ? ret : in_len;
  }
  
++<<<<<<< HEAD
 +struct ib_uflow_resources {
 +	size_t			max;
 +	size_t			num;
 +	size_t			collection_num;
 +	size_t			counters_num;
 +	struct ib_counters	**counters;
 +	struct ib_flow_action	**collection;
 +};
 +
 +static struct ib_uflow_resources *flow_resources_alloc(size_t num_specs)
++=======
+ struct ib_uflow_resources *flow_resources_alloc(size_t num_specs)
++>>>>>>> fa76d24ee0aa (RDMA/mlx5: Add flow actions support to raw create flow)
  {
  	struct ib_uflow_resources *resources;
  
@@@ -2884,8 -2821,9 +2890,9 @@@ void flow_resources_add(struct ib_uflow
  
  	uflow_res->num++;
  }
+ EXPORT_SYMBOL(flow_resources_add);
  
 -static int kern_spec_to_ib_spec_action(struct ib_uverbs_file *ufile,
 +static int kern_spec_to_ib_spec_action(struct ib_ucontext *ucontext,
  				       struct ib_uverbs_flow_spec *kern_spec,
  				       union ib_flow_spec *ib_spec,
  				       struct ib_uflow_resources *uflow_res)
diff --cc include/rdma/uverbs_std_types.h
index 27c24453fc12,3db2802fbc68..000000000000
--- a/include/rdma/uverbs_std_types.h
+++ b/include/rdma/uverbs_std_types.h
@@@ -104,14 -126,70 +104,70 @@@ static inline void uobj_alloc_abort(str
  	rdma_alloc_abort_uobject(uobj);
  }
  
 -static inline struct ib_uobject *
 -__uobj_alloc(const struct uverbs_api_object *obj, struct ib_uverbs_file *ufile,
 -	     struct ib_device **ib_dev)
 +static inline struct ib_uobject *__uobj_alloc(const struct uverbs_obj_type *type,
 +					      struct ib_ucontext *ucontext)
  {
 -	struct ib_uobject *uobj = rdma_alloc_begin_uobject(obj, ufile);
 -
 -	if (!IS_ERR(uobj))
 -		*ib_dev = uobj->context->device;
 -	return uobj;
 +	return rdma_alloc_begin_uobject(type, ucontext);
  }
  
++<<<<<<< HEAD
 +#define uobj_alloc(_type, ucontext)	\
 +	__uobj_alloc(uobj_get_type(_type), ucontext)
++=======
+ #define uobj_alloc(_type, _ufile, _ib_dev)                                     \
+ 	__uobj_alloc(uobj_get_type(_ufile, _type), _ufile, _ib_dev)
+ 
+ static inline void uverbs_flow_action_fill_action(struct ib_flow_action *action,
+ 						  struct ib_uobject *uobj,
+ 						  struct ib_device *ib_dev,
+ 						  enum ib_flow_action_type type)
+ {
+ 	atomic_set(&action->usecnt, 0);
+ 	action->device = ib_dev;
+ 	action->type = type;
+ 	action->uobject = uobj;
+ 	uobj->object = action;
+ }
+ 
+ struct ib_uflow_resources {
+ 	size_t			max;
+ 	size_t			num;
+ 	size_t			collection_num;
+ 	size_t			counters_num;
+ 	struct ib_counters	**counters;
+ 	struct ib_flow_action	**collection;
+ };
+ 
+ struct ib_uflow_object {
+ 	struct ib_uobject		uobject;
+ 	struct ib_uflow_resources	*resources;
+ };
+ 
+ struct ib_uflow_resources *flow_resources_alloc(size_t num_specs);
+ void flow_resources_add(struct ib_uflow_resources *uflow_res,
+ 			enum ib_flow_spec_type type,
+ 			void *ibobj);
+ void ib_uverbs_flow_resources_free(struct ib_uflow_resources *uflow_res);
+ 
+ static inline void ib_set_flow(struct ib_uobject *uobj, struct ib_flow *ibflow,
+ 			       struct ib_qp *qp, struct ib_device *device,
+ 			       struct ib_uflow_resources *uflow_res)
+ {
+ 	struct ib_uflow_object *uflow;
+ 
+ 	uobj->object = ibflow;
+ 	ibflow->uobject = uobj;
+ 
+ 	if (qp) {
+ 		atomic_inc(&qp->usecnt);
+ 		ibflow->qp = qp;
+ 	}
+ 
+ 	ibflow->device = device;
+ 	uflow = container_of(uobj, typeof(*uflow), uobject);
+ 	uflow->resources = uflow_res;
+ }
++>>>>>>> fa76d24ee0aa (RDMA/mlx5: Add flow actions support to raw create flow)
  
  #endif
  
diff --cc include/uapi/rdma/mlx5_user_ioctl_cmds.h
index 8d285f4555cd,91c3d42ebd0f..000000000000
--- a/include/uapi/rdma/mlx5_user_ioctl_cmds.h
+++ b/include/uapi/rdma/mlx5_user_ioctl_cmds.h
@@@ -67,11 -75,114 +67,81 @@@ enum mlx5_ib_devx_obj_destroy_attrs 
  enum mlx5_ib_devx_obj_methods {
  	MLX5_IB_METHOD_DEVX_OBJ_CREATE = (1U << UVERBS_ID_NS_SHIFT),
  	MLX5_IB_METHOD_DEVX_OBJ_DESTROY,
 -	MLX5_IB_METHOD_DEVX_OBJ_MODIFY,
 -	MLX5_IB_METHOD_DEVX_OBJ_QUERY,
 -};
 -
 -enum mlx5_ib_devx_umem_reg_attrs {
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_ADDR,
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_LEN,
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_ACCESS,
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_OUT_ID,
 -};
 -
 -enum mlx5_ib_devx_umem_dereg_attrs {
 -	MLX5_IB_ATTR_DEVX_UMEM_DEREG_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
 -};
 -
 -enum mlx5_ib_devx_umem_methods {
 -	MLX5_IB_METHOD_DEVX_UMEM_REG = (1U << UVERBS_ID_NS_SHIFT),
 -	MLX5_IB_METHOD_DEVX_UMEM_DEREG,
  };
  
 -enum mlx5_ib_objects {
 +enum mlx5_ib_devx_objects {
  	MLX5_IB_OBJECT_DEVX = (1U << UVERBS_ID_NS_SHIFT),
  	MLX5_IB_OBJECT_DEVX_OBJ,
++<<<<<<< HEAD
++=======
+ 	MLX5_IB_OBJECT_DEVX_UMEM,
+ 	MLX5_IB_OBJECT_FLOW_MATCHER,
+ };
+ 
+ enum mlx5_ib_flow_matcher_create_attrs {
+ 	MLX5_IB_ATTR_FLOW_MATCHER_CREATE_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_FLOW_MATCHER_MATCH_MASK,
+ 	MLX5_IB_ATTR_FLOW_MATCHER_FLOW_TYPE,
+ 	MLX5_IB_ATTR_FLOW_MATCHER_MATCH_CRITERIA,
+ };
+ 
+ enum mlx5_ib_flow_matcher_destroy_attrs {
+ 	MLX5_IB_ATTR_FLOW_MATCHER_DESTROY_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ };
+ 
+ enum mlx5_ib_flow_matcher_methods {
+ 	MLX5_IB_METHOD_FLOW_MATCHER_CREATE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_METHOD_FLOW_MATCHER_DESTROY,
+ };
+ 
+ #define MLX5_IB_DW_MATCH_PARAM 0x80
+ 
+ struct mlx5_ib_match_params {
+ 	__u32	match_params[MLX5_IB_DW_MATCH_PARAM];
+ };
+ 
+ enum mlx5_ib_flow_type {
+ 	MLX5_IB_FLOW_TYPE_NORMAL,
+ 	MLX5_IB_FLOW_TYPE_SNIFFER,
+ 	MLX5_IB_FLOW_TYPE_ALL_DEFAULT,
+ 	MLX5_IB_FLOW_TYPE_MC_DEFAULT,
+ };
+ 
+ enum mlx5_ib_create_flow_attrs {
+ 	MLX5_IB_ATTR_CREATE_FLOW_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_CREATE_FLOW_MATCH_VALUE,
+ 	MLX5_IB_ATTR_CREATE_FLOW_DEST_QP,
+ 	MLX5_IB_ATTR_CREATE_FLOW_DEST_DEVX,
+ 	MLX5_IB_ATTR_CREATE_FLOW_MATCHER,
+ 	MLX5_IB_ATTR_CREATE_FLOW_ARR_FLOW_ACTIONS,
+ };
+ 
+ enum mlx5_ib_destoy_flow_attrs {
+ 	MLX5_IB_ATTR_DESTROY_FLOW_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ };
+ 
+ enum mlx5_ib_flow_methods {
+ 	MLX5_IB_METHOD_CREATE_FLOW = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_METHOD_DESTROY_FLOW,
+ };
+ 
+ enum mlx5_ib_flow_action_methods {
+ 	MLX5_IB_METHOD_FLOW_ACTION_CREATE_MODIFY_HEADER = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_METHOD_FLOW_ACTION_CREATE_PACKET_REFORMAT,
+ };
+ 
+ enum mlx5_ib_create_flow_action_create_modify_header_attrs {
+ 	MLX5_IB_ATTR_CREATE_MODIFY_HEADER_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_CREATE_MODIFY_HEADER_ACTIONS_PRM,
+ 	MLX5_IB_ATTR_CREATE_MODIFY_HEADER_FT_TYPE,
+ };
+ 
+ enum mlx5_ib_create_flow_action_create_packet_reformat_attrs {
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_TYPE,
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_FT_TYPE,
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_DATA_BUF,
++>>>>>>> fa76d24ee0aa (RDMA/mlx5: Add flow actions support to raw create flow)
  };
  
  #endif
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path drivers/infiniband/core/uverbs_cmd.c
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path include/rdma/uverbs_std_types.h
* Unmerged path include/uapi/rdma/mlx5_user_ioctl_cmds.h
