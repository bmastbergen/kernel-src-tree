cls_flower: don't expose TC actions to drivers anymore

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Pablo Neira Ayuso <pablo@netfilter.org>
commit 2cd173e6d542f8e96369608db849b71135d65afb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/2cd173e6.failed

Now that drivers have been converted to use the flow action
infrastructure, remove this field from the tc_cls_flower_offload
structure.

	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2cd173e6d542f8e96369608db849b71135d65afb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/pkt_cls.h
#	net/sched/cls_flower.c
diff --cc include/net/pkt_cls.h
index 5d4723c92a1b,cb8be396a11f..000000000000
--- a/include/net/pkt_cls.h
+++ b/include/net/pkt_cls.h
@@@ -764,10 -764,8 +764,15 @@@ struct tc_cls_flower_offload 
  	struct tc_cls_common_offload common;
  	enum tc_fl_command command;
  	unsigned long cookie;
++<<<<<<< HEAD
 +	struct flow_dissector *dissector;
 +	struct fl_flow_key *mask;
 +	struct fl_flow_key *key;
 +	struct tcf_exts *exts;
++=======
+ 	struct flow_rule *rule;
+ 	struct flow_stats stats;
++>>>>>>> 2cd173e6d542 (cls_flower: don't expose TC actions to drivers anymore)
  	u32 classid;
  };
  
diff --cc net/sched/cls_flower.c
index 85ed1ab8a32e,c5d1db3a3db7..000000000000
--- a/net/sched/cls_flower.c
+++ b/net/sched/cls_flower.c
@@@ -384,13 -384,24 +384,19 @@@ static int fl_hw_replace_filter(struct 
  	tc_cls_common_offload_init(&cls_flower.common, tp, f->flags, extack);
  	cls_flower.command = TC_CLSFLOWER_REPLACE;
  	cls_flower.cookie = (unsigned long) f;
++<<<<<<< HEAD
 +	cls_flower.dissector = &f->mask->dissector;
 +	cls_flower.mask = &f->mask->key;
 +	cls_flower.key = &f->mkey;
 +	cls_flower.exts = &f->exts;
++=======
+ 	cls_flower.rule->match.dissector = &f->mask->dissector;
+ 	cls_flower.rule->match.mask = &f->mask->key;
+ 	cls_flower.rule->match.key = &f->mkey;
++>>>>>>> 2cd173e6d542 (cls_flower: don't expose TC actions to drivers anymore)
  	cls_flower.classid = f->res.classid;
  
 -	err = tc_setup_flow_action(&cls_flower.rule->action, &f->exts);
 -	if (err) {
 -		kfree(cls_flower.rule);
 -		return err;
 -	}
 -
  	err = tc_setup_cb_call(block, TC_SETUP_CLSFLOWER, &cls_flower, skip_sw);
 -	kfree(cls_flower.rule);
 -
  	if (err < 0) {
  		fl_hw_destroy_filter(tp, f, NULL);
  		return err;
@@@ -1471,10 -1487,17 +1476,24 @@@ static int fl_reoffload(struct tcf_prot
  			cls_flower.command = add ?
  				TC_CLSFLOWER_REPLACE : TC_CLSFLOWER_DESTROY;
  			cls_flower.cookie = (unsigned long)f;
++<<<<<<< HEAD
 +			cls_flower.dissector = &mask->dissector;
 +			cls_flower.mask = &mask->key;
 +			cls_flower.key = &f->mkey;
 +			cls_flower.exts = &f->exts;
++=======
+ 			cls_flower.rule->match.dissector = &mask->dissector;
+ 			cls_flower.rule->match.mask = &mask->key;
+ 			cls_flower.rule->match.key = &f->mkey;
+ 
+ 			err = tc_setup_flow_action(&cls_flower.rule->action,
+ 						   &f->exts);
+ 			if (err) {
+ 				kfree(cls_flower.rule);
+ 				return err;
+ 			}
+ 
++>>>>>>> 2cd173e6d542 (cls_flower: don't expose TC actions to drivers anymore)
  			cls_flower.classid = f->res.classid;
  
  			err = cb(TC_SETUP_CLSFLOWER, &cls_flower, cb_priv);
@@@ -1497,15 -1522,17 +1516,20 @@@ static void fl_hw_create_tmplt(struct t
  {
  	struct tc_cls_flower_offload cls_flower = {};
  	struct tcf_block *block = chain->block;
- 	struct tcf_exts dummy_exts = { 0, };
  
 -	cls_flower.rule = flow_rule_alloc(0);
 -	if (!cls_flower.rule)
 -		return -ENOMEM;
 -
  	cls_flower.common.chain_index = chain->index;
  	cls_flower.command = TC_CLSFLOWER_TMPLT_CREATE;
  	cls_flower.cookie = (unsigned long) tmplt;
++<<<<<<< HEAD
 +	cls_flower.dissector = &tmplt->dissector;
 +	cls_flower.mask = &tmplt->mask;
 +	cls_flower.key = &tmplt->dummy_key;
 +	cls_flower.exts = &dummy_exts;
++=======
+ 	cls_flower.rule->match.dissector = &tmplt->dissector;
+ 	cls_flower.rule->match.mask = &tmplt->mask;
+ 	cls_flower.rule->match.key = &tmplt->dummy_key;
++>>>>>>> 2cd173e6d542 (cls_flower: don't expose TC actions to drivers anymore)
  
  	/* We don't care if driver (any of them) fails to handle this
  	 * call. It serves just as a hint for it.
* Unmerged path include/net/pkt_cls.h
* Unmerged path net/sched/cls_flower.c
