drm/vmwgfx: Fix compat mode shader operation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Thomas Hellstrom <thellstrom@vmware.com>
commit e41c20cf50a8a7d0dfa337a7530590aacef4193b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/e41c20cf.failed

In compat mode, we allowed host-backed user-space with guest-backed
kernel / device. In this mode, set shader commands was broken since
no relocations were emitted. Fix this.

	Cc: <stable@vger.kernel.org>
Fixes: e8c66efbfe3a ("drm/vmwgfx: Make user resource lookups reference-free during validation")
	Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com>
	Reviewed-by: Brian Paul <brianp@vmware.com>
(cherry picked from commit e41c20cf50a8a7d0dfa337a7530590aacef4193b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c
diff --cc drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c
index c9d5cc237124,315f9efce765..000000000000
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c
@@@ -2287,17 -2010,26 +2287,35 @@@ static int vmw_cmd_set_shader(struct vm
  		return 0;
  
  	if (cmd->body.shid != SVGA3D_INVALID_ID) {
++<<<<<<< HEAD
 +		res = vmw_shader_lookup(vmw_context_res_man(ctx_node->res),
 +					cmd->body.shid,
 +					cmd->body.type);
 +
++=======
+ 		/*
+ 		 * This is the compat shader path - Per device guest-backed
+ 		 * shaders, but user-space thinks it's per context host-
+ 		 * backed shaders.
+ 		 */
+ 		res = vmw_shader_lookup(vmw_context_res_man(ctx),
+ 					cmd->body.shid, cmd->body.type);
++>>>>>>> e41c20cf50a8 (drm/vmwgfx: Fix compat mode shader operation)
  		if (!IS_ERR(res)) {
 -			ret = vmw_execbuf_res_noctx_val_add(sw_context, res,
 -							    VMW_RES_DIRTY_NONE);
 +			ret = vmw_cmd_res_reloc_add(dev_priv, sw_context,
 +						    &cmd->body.shid, res,
 +						    &res_node);
 +			vmw_resource_unreference(&res);
  			if (unlikely(ret != 0))
  				return ret;
+ 
+ 			ret = vmw_resource_relocation_add
+ 				(sw_context, res,
+ 				 vmw_ptr_diff(sw_context->buf_start,
+ 					      &cmd->body.shid),
+ 				 vmw_res_rel_normal);
+ 			if (unlikely(ret != 0))
+ 				return ret;
  		}
  	}
  
* Unmerged path drivers/gpu/drm/vmwgfx/vmwgfx_execbuf.c
