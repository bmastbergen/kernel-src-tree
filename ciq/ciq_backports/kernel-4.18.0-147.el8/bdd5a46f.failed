fanotify: add BUILD_BUG_ON() to count the bits of fanotify constants

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Amir Goldstein <amir73il@gmail.com>
commit bdd5a46fe30653cb4d26c7c787a22159bf79eed9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/bdd5a46f.failed

Also define the FANOTIFY_EVENT_FLAGS consisting of the extra flags
FAN_ONDIR and FAN_ON_CHILD.

	Signed-off-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
(cherry picked from commit bdd5a46fe30653cb4d26c7c787a22159bf79eed9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/notify/fanotify/fanotify_user.c
#	include/linux/fanotify.h
diff --cc fs/notify/fanotify/fanotify_user.c
index 5c361e628c83,14594e491d2b..000000000000
--- a/fs/notify/fanotify/fanotify_user.c
+++ b/fs/notify/fanotify/fanotify_user.c
@@@ -831,7 -803,8 +831,12 @@@ static int do_fanotify_mark(int fanotif
  	struct fsnotify_group *group;
  	struct fd f;
  	struct path path;
++<<<<<<< HEAD
 +	u32 valid_mask = FAN_ALL_EVENTS | FAN_EVENT_ON_CHILD;
++=======
+ 	u32 valid_mask = FANOTIFY_EVENTS | FANOTIFY_EVENT_FLAGS;
+ 	unsigned int mark_type = flags & FANOTIFY_MARK_TYPE_BITS;
++>>>>>>> bdd5a46fe306 (fanotify: add BUILD_BUG_ON() to count the bits of fanotify constants)
  	int ret;
  
  	pr_debug("%s: fanotify_fd=%d flags=%x dfd=%d pathname=%p mask=%llx\n",
@@@ -960,7 -944,11 +965,15 @@@ COMPAT_SYSCALL_DEFINE6(fanotify_mark
   */
  static int __init fanotify_user_setup(void)
  {
++<<<<<<< HEAD
 +	fanotify_mark_cache = KMEM_CACHE(fsnotify_mark, SLAB_PANIC);
++=======
+ 	BUILD_BUG_ON(HWEIGHT32(FANOTIFY_INIT_FLAGS) != 6);
+ 	BUILD_BUG_ON(HWEIGHT32(FANOTIFY_MARK_FLAGS) != 9);
+ 
+ 	fanotify_mark_cache = KMEM_CACHE(fsnotify_mark,
+ 					 SLAB_PANIC|SLAB_ACCOUNT);
++>>>>>>> bdd5a46fe306 (fanotify: add BUILD_BUG_ON() to count the bits of fanotify constants)
  	fanotify_event_cachep = KMEM_CACHE(fanotify_event_info, SLAB_PANIC);
  	if (IS_ENABLED(CONFIG_FANOTIFY_ACCESS_PERMISSIONS)) {
  		fanotify_perm_event_cachep =
diff --cc include/linux/fanotify.h
index e70fccc3757e,caf55c67fc6c..000000000000
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@@ -10,4 -7,57 +10,60 @@@
  #define FAN_GROUP_FLAG(group, flag) \
  	((group)->fanotify_data.flags & (flag))
  
++<<<<<<< HEAD
++=======
+ /*
+  * Flags allowed to be passed from/to userspace.
+  *
+  * We intentionally do not add new bits to the old FAN_ALL_* constants, because
+  * they are uapi exposed constants. If there are programs out there using
+  * these constant, the programs may break if re-compiled with new uapi headers
+  * and then run on an old kernel.
+  */
+ #define FANOTIFY_CLASS_BITS	(FAN_CLASS_NOTIF | FAN_CLASS_CONTENT | \
+ 				 FAN_CLASS_PRE_CONTENT)
+ 
+ #define FANOTIFY_INIT_FLAGS	(FANOTIFY_CLASS_BITS | \
+ 				 FAN_CLOEXEC | FAN_NONBLOCK | \
+ 				 FAN_UNLIMITED_QUEUE | FAN_UNLIMITED_MARKS)
+ 
+ #define FANOTIFY_MARK_TYPE_BITS	(FAN_MARK_INODE | FAN_MARK_MOUNT | \
+ 				 FAN_MARK_FILESYSTEM)
+ 
+ #define FANOTIFY_MARK_FLAGS	(FANOTIFY_MARK_TYPE_BITS | \
+ 				 FAN_MARK_ADD | \
+ 				 FAN_MARK_REMOVE | \
+ 				 FAN_MARK_DONT_FOLLOW | \
+ 				 FAN_MARK_ONLYDIR | \
+ 				 FAN_MARK_IGNORED_MASK | \
+ 				 FAN_MARK_IGNORED_SURV_MODIFY | \
+ 				 FAN_MARK_FLUSH)
+ 
+ /* Events that user can request to be notified on */
+ #define FANOTIFY_EVENTS		(FAN_ACCESS | FAN_MODIFY | \
+ 				 FAN_CLOSE | FAN_OPEN)
+ 
+ /* Events that require a permission response from user */
+ #define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM)
+ 
+ /* Extra flags that may be reported with event or control handling of events */
+ #define FANOTIFY_EVENT_FLAGS	(FAN_EVENT_ON_CHILD | FAN_ONDIR)
+ 
+ /* Events that may be reported to user */
+ #define FANOTIFY_OUTGOING_EVENTS	(FANOTIFY_EVENTS | \
+ 					 FANOTIFY_PERM_EVENTS | \
+ 					 FAN_Q_OVERFLOW)
+ 
+ #define ALL_FANOTIFY_EVENT_BITS		(FANOTIFY_OUTGOING_EVENTS | \
+ 					 FANOTIFY_EVENT_FLAGS)
+ 
+ /* Do not use these old uapi constants internally */
+ #undef FAN_ALL_CLASS_BITS
+ #undef FAN_ALL_INIT_FLAGS
+ #undef FAN_ALL_MARK_FLAGS
+ #undef FAN_ALL_EVENTS
+ #undef FAN_ALL_PERM_EVENTS
+ #undef FAN_ALL_OUTGOING_EVENTS
+ 
++>>>>>>> bdd5a46fe306 (fanotify: add BUILD_BUG_ON() to count the bits of fanotify constants)
  #endif /* _LINUX_FANOTIFY_H */
diff --git a/fs/notify/fanotify/fanotify.c b/fs/notify/fanotify/fanotify.c
index cdce46db0d71..91ca27822f1f 100644
--- a/fs/notify/fanotify/fanotify.c
+++ b/fs/notify/fanotify/fanotify.c
@@ -199,6 +199,8 @@ static int fanotify_handle_event(struct fsnotify_group *group,
 	BUILD_BUG_ON(FAN_ACCESS_PERM != FS_ACCESS_PERM);
 	BUILD_BUG_ON(FAN_ONDIR != FS_ISDIR);
 
+	BUILD_BUG_ON(HWEIGHT32(ALL_FANOTIFY_EVENT_BITS) != 10);
+
 	if (!fanotify_should_send_event(iter_info, mask, data, data_type))
 		return 0;
 
* Unmerged path fs/notify/fanotify/fanotify_user.c
* Unmerged path include/linux/fanotify.h
