tools/bpf: bpftool, print strerror when map lookup error occurs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
commit 8ec92dc22e0e3460cfd29263731c6214d283ea28
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/8ec92dc2.failed

Since map lookup error can be ENOENT or EOPNOTSUPP, let's print
strerror() as error message in normal and JSON output.

This patch adds helper function print_entry_error() to print
entry from lookup error occurs

Example: Following example dumps a map which does not support lookup.

Output before:
root# bpftool map -jp dump id 40
[
    "key": ["0x0a","0x00","0x00","0x00"
    ],
    "value": {
        "error": "can\'t lookup element"
    },
    "key": ["0x0b","0x00","0x00","0x00"
    ],
    "value": {
        "error": "can\'t lookup element"
    }
]

root# bpftool map dump id 40
can't lookup element with key:
0a 00 00 00
can't lookup element with key:
0b 00 00 00
Found 0 elements

Output after changes:
root# bpftool map dump -jp  id 45
[
    "key": ["0x0a","0x00","0x00","0x00"
    ],
    "value": {
        "error": "Operation not supported"
    },
    "key": ["0x0b","0x00","0x00","0x00"
    ],
    "value": {
        "error": "Operation not supported"
    }
]

root# bpftool map dump id 45
key:
0a 00 00 00
value:
Operation not supported
key:
0b 00 00 00
value:
Operation not supported
Found 0 elements

	Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
	Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 8ec92dc22e0e3460cfd29263731c6214d283ea28)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/bpf/bpftool/map.c
diff --cc tools/bpf/bpftool/map.c
index 4cd01a866163,9f5de48f8a99..000000000000
--- a/tools/bpf/bpftool/map.c
+++ b/tools/bpf/bpftool/map.c
@@@ -515,12 -677,62 +534,63 @@@ static int do_show(int argc, char **arg
  	return errno == ENOENT ? 0 : -1;
  }
  
++<<<<<<< HEAD
++=======
+ static int dump_map_elem(int fd, void *key, void *value,
+ 			 struct bpf_map_info *map_info, struct btf *btf,
+ 			 json_writer_t *btf_wtr)
+ {
+ 	int num_elems = 0;
+ 	int lookup_errno;
+ 
+ 	if (!bpf_map_lookup_elem(fd, key, value)) {
+ 		if (json_output) {
+ 			print_entry_json(map_info, key, value, btf);
+ 		} else {
+ 			if (btf) {
+ 				struct btf_dumper d = {
+ 					.btf = btf,
+ 					.jw = btf_wtr,
+ 					.is_plain_text = true,
+ 				};
+ 
+ 				do_dump_btf(&d, map_info, key, value);
+ 			} else {
+ 				print_entry_plain(map_info, key, value);
+ 			}
+ 			num_elems++;
+ 		}
+ 		return num_elems;
+ 	}
+ 
+ 	/* lookup error handling */
+ 	lookup_errno = errno;
+ 
+ 	if (map_is_map_of_maps(map_info->type) ||
+ 	    map_is_map_of_progs(map_info->type))
+ 		return 0;
+ 
+ 	if (json_output) {
+ 		jsonw_name(json_wtr, "key");
+ 		print_hex_data_json(key, map_info->key_size);
+ 		jsonw_name(json_wtr, "value");
+ 		jsonw_start_object(json_wtr);
+ 		jsonw_string_field(json_wtr, "error", strerror(lookup_errno));
+ 		jsonw_end_object(json_wtr);
+ 	} else {
+ 		print_entry_error(map_info, key, strerror(lookup_errno));
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 8ec92dc22e0e (tools/bpf: bpftool, print strerror when map lookup error occurs)
  static int do_dump(int argc, char **argv)
  {
 -	struct bpf_map_info info = {};
  	void *key, *value, *prev_key;
  	unsigned int num_elems = 0;
 +	struct bpf_map_info info = {};
  	__u32 len = sizeof(info);
 -	json_writer_t *btf_wtr;
 -	struct btf *btf = NULL;
  	int err;
  	int fd;
  
* Unmerged path tools/bpf/bpftool/map.c
