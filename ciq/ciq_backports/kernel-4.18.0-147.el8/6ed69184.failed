xfrm: Reset secpath in xfrm failure

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Myungho Jung <mhjungk@gmail.com>
commit 6ed69184ed9c43873b8a1ee721e3bf3c08c2c6be
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/6ed69184.failed

In esp4_gro_receive() and esp6_gro_receive(), secpath can be allocated
without adding xfrm state to xvec. Then, sp->xvec[sp->len - 1] would
fail and result in dereferencing invalid pointer in esp4_gso_segment()
and esp6_gso_segment(). Reset secpath if xfrm function returns error.

Fixes: 7785bba299a8 ("esp: Add a software GRO codepath")
	Reported-by: syzbot+b69368fd933c6c592f4c@syzkaller.appspotmail.com
	Signed-off-by: Myungho Jung <mhjungk@gmail.com>
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
(cherry picked from commit 6ed69184ed9c43873b8a1ee721e3bf3c08c2c6be)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/esp4_offload.c
#	net/ipv6/esp6_offload.c
diff --cc net/ipv4/esp4_offload.c
index 7cf755ef9efb,d3170a8001b2..000000000000
--- a/net/ipv4/esp4_offload.c
+++ b/net/ipv4/esp4_offload.c
@@@ -46,21 -46,22 +46,26 @@@ static struct sk_buff **esp4_gro_receiv
  
  	xo = xfrm_offload(skb);
  	if (!xo || !(xo->flags & CRYPTO_DONE)) {
 -		struct sec_path *sp = secpath_set(skb);
 -
 -		if (!sp)
 +		err = secpath_set(skb);
 +		if (err)
  			goto out;
  
++<<<<<<< HEAD
 +		if (skb->sp->len == XFRM_MAX_DEPTH)
 +			goto out;
++=======
+ 		if (sp->len == XFRM_MAX_DEPTH)
+ 			goto out_reset;
++>>>>>>> 6ed69184ed9c (xfrm: Reset secpath in xfrm failure)
  
  		x = xfrm_state_lookup(dev_net(skb->dev), skb->mark,
  				      (xfrm_address_t *)&ip_hdr(skb)->daddr,
  				      spi, IPPROTO_ESP, AF_INET);
  		if (!x)
- 			goto out;
+ 			goto out_reset;
  
 -		sp->xvec[sp->len++] = x;
 -		sp->olen++;
 +		skb->sp->xvec[skb->sp->len++] = x;
 +		skb->sp->olen++;
  
  		xo = xfrm_offload(skb);
  		if (!xo) {
diff --cc net/ipv6/esp6_offload.c
index 27f59b61f70f,cb99f6fb79b7..000000000000
--- a/net/ipv6/esp6_offload.c
+++ b/net/ipv6/esp6_offload.c
@@@ -68,21 -68,22 +68,26 @@@ static struct sk_buff **esp6_gro_receiv
  
  	xo = xfrm_offload(skb);
  	if (!xo || !(xo->flags & CRYPTO_DONE)) {
 -		struct sec_path *sp = secpath_set(skb);
 -
 -		if (!sp)
 +		err = secpath_set(skb);
 +		if (err)
  			goto out;
  
++<<<<<<< HEAD
 +		if (skb->sp->len == XFRM_MAX_DEPTH)
 +			goto out;
++=======
+ 		if (sp->len == XFRM_MAX_DEPTH)
+ 			goto out_reset;
++>>>>>>> 6ed69184ed9c (xfrm: Reset secpath in xfrm failure)
  
  		x = xfrm_state_lookup(dev_net(skb->dev), skb->mark,
  				      (xfrm_address_t *)&ipv6_hdr(skb)->daddr,
  				      spi, IPPROTO_ESP, AF_INET6);
  		if (!x)
- 			goto out;
+ 			goto out_reset;
  
 -		sp->xvec[sp->len++] = x;
 -		sp->olen++;
 +		skb->sp->xvec[skb->sp->len++] = x;
 +		skb->sp->olen++;
  
  		xo = xfrm_offload(skb);
  		if (!xo) {
* Unmerged path net/ipv4/esp4_offload.c
* Unmerged path net/ipv6/esp6_offload.c
