x86/headers: Fix -Wmissing-prototypes warning

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yi Wang <wang.yi59@zte.com.cn>
commit 89f579ce99f7e028e81885d3965f973c0f787611
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/89f579ce.failed

When building the kernel with W=1 we get a lot of -Wmissing-prototypes
warnings, which are trivial in nature and easy to fix - and which may
mask some real future bugs if the prototypes get out of sync with
the function definition.

This patch fixes most of -Wmissing-prototypes warnings which
are in the root directory of arch/x86/kernel, not including
the subdirectories.

These are the warnings fixed in this patch:

  arch/x86/kernel/signal.c:865:17: warning: no previous prototype for ‘sys32_x32_rt_sigreturn’ [-Wmissing-prototypes]
  arch/x86/kernel/signal_compat.c:164:6: warning: no previous prototype for ‘sigaction_compat_abi’ [-Wmissing-prototypes]
  arch/x86/kernel/traps.c:625:46: warning: no previous prototype for ‘sync_regs’ [-Wmissing-prototypes]
  arch/x86/kernel/traps.c:640:24: warning: no previous prototype for ‘fixup_bad_iret’ [-Wmissing-prototypes]
  arch/x86/kernel/traps.c:929:13: warning: no previous prototype for ‘trap_init’ [-Wmissing-prototypes]
  arch/x86/kernel/irq.c:270:28: warning: no previous prototype for ‘smp_x86_platform_ipi’ [-Wmissing-prototypes]
  arch/x86/kernel/irq.c:301:16: warning: no previous prototype for ‘smp_kvm_posted_intr_ipi’ [-Wmissing-prototypes]
  arch/x86/kernel/irq.c:314:16: warning: no previous prototype for ‘smp_kvm_posted_intr_wakeup_ipi’ [-Wmissing-prototypes]
  arch/x86/kernel/irq.c:328:16: warning: no previous prototype for ‘smp_kvm_posted_intr_nested_ipi’ [-Wmissing-prototypes]
  arch/x86/kernel/irq_work.c:16:28: warning: no previous prototype for ‘smp_irq_work_interrupt’ [-Wmissing-prototypes]
  arch/x86/kernel/irqinit.c:79:13: warning: no previous prototype for ‘init_IRQ’ [-Wmissing-prototypes]
  arch/x86/kernel/quirks.c:672:13: warning: no previous prototype for ‘early_platform_quirks’ [-Wmissing-prototypes]
  arch/x86/kernel/tsc.c:1499:15: warning: no previous prototype for ‘calibrate_delay_is_known’ [-Wmissing-prototypes]
  arch/x86/kernel/process.c:653:13: warning: no previous prototype for ‘arch_post_acpi_subsys_init’ [-Wmissing-prototypes]
  arch/x86/kernel/process.c:717:15: warning: no previous prototype for ‘arch_randomize_brk’ [-Wmissing-prototypes]
  arch/x86/kernel/process.c:784:6: warning: no previous prototype for ‘do_arch_prctl_common’ [-Wmissing-prototypes]
  arch/x86/kernel/reboot.c:869:6: warning: no previous prototype for ‘nmi_panic_self_stop’ [-Wmissing-prototypes]
  arch/x86/kernel/smp.c:176:27: warning: no previous prototype for ‘smp_reboot_interrupt’ [-Wmissing-prototypes]
  arch/x86/kernel/smp.c:260:28: warning: no previous prototype for ‘smp_reschedule_interrupt’ [-Wmissing-prototypes]
  arch/x86/kernel/smp.c:281:28: warning: no previous prototype for ‘smp_call_function_interrupt’ [-Wmissing-prototypes]
  arch/x86/kernel/smp.c:291:28: warning: no previous prototype for ‘smp_call_function_single_interrupt’ [-Wmissing-prototypes]
  arch/x86/kernel/ftrace.c:840:6: warning: no previous prototype for ‘arch_ftrace_update_trampoline’ [-Wmissing-prototypes]
  arch/x86/kernel/ftrace.c:934:7: warning: no previous prototype for ‘arch_ftrace_trampoline_func’ [-Wmissing-prototypes]
  arch/x86/kernel/ftrace.c:946:6: warning: no previous prototype for ‘arch_ftrace_trampoline_free’ [-Wmissing-prototypes]
  arch/x86/kernel/crash.c:114:6: warning: no previous prototype for ‘crash_smp_send_stop’ [-Wmissing-prototypes]
  arch/x86/kernel/crash.c:351:5: warning: no previous prototype for ‘crash_setup_memmap_entries’ [-Wmissing-prototypes]
  arch/x86/kernel/crash.c:424:5: warning: no previous prototype for ‘crash_load_segments’ [-Wmissing-prototypes]
  arch/x86/kernel/machine_kexec_64.c:372:7: warning: no previous prototype for ‘arch_kexec_kernel_image_load’ [-Wmissing-prototypes]
  arch/x86/kernel/paravirt-spinlocks.c:12:16: warning: no previous prototype for ‘__native_queued_spin_unlock’ [-Wmissing-prototypes]
  arch/x86/kernel/paravirt-spinlocks.c:18:6: warning: no previous prototype for ‘pv_is_native_spin_unlock’ [-Wmissing-prototypes]
  arch/x86/kernel/paravirt-spinlocks.c:24:16: warning: no previous prototype for ‘__native_vcpu_is_preempted’ [-Wmissing-prototypes]
  arch/x86/kernel/paravirt-spinlocks.c:30:6: warning: no previous prototype for ‘pv_is_native_vcpu_is_preempted’ [-Wmissing-prototypes]
  arch/x86/kernel/kvm.c:258:1: warning: no previous prototype for ‘do_async_page_fault’ [-Wmissing-prototypes]
  arch/x86/kernel/jailhouse.c:200:6: warning: no previous prototype for ‘jailhouse_paravirt’ [-Wmissing-prototypes]
  arch/x86/kernel/check.c:91:13: warning: no previous prototype for ‘setup_bios_corruption_check’ [-Wmissing-prototypes]
  arch/x86/kernel/check.c:139:6: warning: no previous prototype for ‘check_for_bios_corruption’ [-Wmissing-prototypes]
  arch/x86/kernel/devicetree.c:32:13: warning: no previous prototype for ‘early_init_dt_scan_chosen_arch’ [-Wmissing-prototypes]
  arch/x86/kernel/devicetree.c:42:13: warning: no previous prototype for ‘add_dtb’ [-Wmissing-prototypes]
  arch/x86/kernel/devicetree.c:108:6: warning: no previous prototype for ‘x86_of_pci_init’ [-Wmissing-prototypes]
  arch/x86/kernel/devicetree.c:314:13: warning: no previous prototype for ‘x86_dtb_init’ [-Wmissing-prototypes]
  arch/x86/kernel/tracepoint.c:16:5: warning: no previous prototype for ‘trace_pagefault_reg’ [-Wmissing-prototypes]
  arch/x86/kernel/tracepoint.c:22:6: warning: no previous prototype for ‘trace_pagefault_unreg’ [-Wmissing-prototypes]
  arch/x86/kernel/head64.c:113:22: warning: no previous prototype for ‘__startup_64’ [-Wmissing-prototypes]
  arch/x86/kernel/head64.c:262:15: warning: no previous prototype for ‘__startup_secondary_64’ [-Wmissing-prototypes]
  arch/x86/kernel/head64.c:350:12: warning: no previous prototype for ‘early_make_pgtable’ [-Wmissing-prototypes]

[ mingo: rewrote the changelog, fixed build errors. ]

	Signed-off-by: Yi Wang <wang.yi59@zte.com.cn>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: akataria@vmware.com
	Cc: akpm@linux-foundation.org
	Cc: andy.shevchenko@gmail.com
	Cc: anton@enomsg.org
	Cc: ard.biesheuvel@linaro.org
	Cc: bhe@redhat.com
	Cc: bhelgaas@google.com
	Cc: bp@alien8.de
	Cc: ccross@android.com
	Cc: devicetree@vger.kernel.org
	Cc: douly.fnst@cn.fujitsu.com
	Cc: dwmw@amazon.co.uk
	Cc: dyoung@redhat.com
	Cc: ebiederm@xmission.com
	Cc: frank.rowand@sony.com
	Cc: frowand.list@gmail.com
	Cc: ivan.gorinov@intel.com
	Cc: jailhouse-dev@googlegroups.com
	Cc: jan.kiszka@siemens.com
	Cc: jgross@suse.com
	Cc: jroedel@suse.de
	Cc: keescook@chromium.org
	Cc: kexec@lists.infradead.org
	Cc: konrad.wilk@oracle.com
	Cc: kvm@vger.kernel.org
	Cc: linux-efi@vger.kernel.org
	Cc: linux-pci@vger.kernel.org
	Cc: luto@kernel.org
	Cc: m.mizuma@jp.fujitsu.com
	Cc: namit@vmware.com
	Cc: oleg@redhat.com
	Cc: pasha.tatashin@oracle.com
	Cc: pbonzini@redhat.com
	Cc: prarit@redhat.com
	Cc: pravin.shedge4linux@gmail.com
	Cc: rajvi.jingar@intel.com
	Cc: rkrcmar@redhat.com
	Cc: robh+dt@kernel.org
	Cc: robh@kernel.org
	Cc: rostedt@goodmis.org
	Cc: takahiro.akashi@linaro.org
	Cc: thomas.lendacky@amd.com
	Cc: tony.luck@intel.com
	Cc: up2wing@gmail.com
	Cc: virtualization@lists.linux-foundation.org
	Cc: zhe.he@windriver.com
	Cc: zhong.weidong@zte.com.cn
Link: http://lkml.kernel.org/r/1542852249-19820-1-git-send-email-wang.yi59@zte.com.cn
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 89f579ce99f7e028e81885d3965f973c0f787611)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/paravirt.h
#	arch/x86/include/asm/traps.h
#	arch/x86/kernel/process.c
diff --cc arch/x86/include/asm/paravirt.h
index e375d4266b53,a97f28d914d5..000000000000
--- a/arch/x86/include/asm/paravirt.h
+++ b/arch/x86/include/asm/paravirt.h
@@@ -17,9 -17,71 +17,74 @@@
  #include <linux/cpumask.h>
  #include <asm/frame.h>
  
++<<<<<<< HEAD
++=======
+ static inline unsigned long long paravirt_sched_clock(void)
+ {
+ 	return PVOP_CALL0(unsigned long long, time.sched_clock);
+ }
+ 
+ struct static_key;
+ extern struct static_key paravirt_steal_enabled;
+ extern struct static_key paravirt_steal_rq_enabled;
+ 
+ __visible void __native_queued_spin_unlock(struct qspinlock *lock);
+ bool pv_is_native_spin_unlock(void);
+ __visible bool __native_vcpu_is_preempted(long cpu);
+ bool pv_is_native_vcpu_is_preempted(void);
+ 
+ static inline u64 paravirt_steal_clock(int cpu)
+ {
+ 	return PVOP_CALL1(u64, time.steal_clock, cpu);
+ }
+ 
+ /* The paravirtualized I/O functions */
+ static inline void slow_down_io(void)
+ {
+ 	pv_ops.cpu.io_delay();
+ #ifdef REALLY_SLOW_IO
+ 	pv_ops.cpu.io_delay();
+ 	pv_ops.cpu.io_delay();
+ 	pv_ops.cpu.io_delay();
+ #endif
+ }
+ 
+ static inline void __flush_tlb(void)
+ {
+ 	PVOP_VCALL0(mmu.flush_tlb_user);
+ }
+ 
+ static inline void __flush_tlb_global(void)
+ {
+ 	PVOP_VCALL0(mmu.flush_tlb_kernel);
+ }
+ 
+ static inline void __flush_tlb_one_user(unsigned long addr)
+ {
+ 	PVOP_VCALL1(mmu.flush_tlb_one_user, addr);
+ }
+ 
+ static inline void flush_tlb_others(const struct cpumask *cpumask,
+ 				    const struct flush_tlb_info *info)
+ {
+ 	PVOP_VCALL2(mmu.flush_tlb_others, cpumask, info);
+ }
+ 
+ static inline void paravirt_tlb_remove_table(struct mmu_gather *tlb, void *table)
+ {
+ 	PVOP_VCALL2(mmu.tlb_remove_table, tlb, table);
+ }
+ 
+ static inline void paravirt_arch_exit_mmap(struct mm_struct *mm)
+ {
+ 	PVOP_VCALL1(mmu.exit_mmap, mm);
+ }
+ 
+ #ifdef CONFIG_PARAVIRT_XXL
++>>>>>>> 89f579ce99f7 (x86/headers: Fix -Wmissing-prototypes warning)
  static inline void load_sp0(unsigned long sp0)
  {
 -	PVOP_VCALL1(cpu.load_sp0, sp0);
 +	PVOP_VCALL1(pv_cpu_ops.load_sp0, sp0);
  }
  
  /* The paravirtualized CPUID instruction. */
diff --cc arch/x86/include/asm/traps.h
index afbc87206886,5fcdf5687406..000000000000
--- a/arch/x86/include/asm/traps.h
+++ b/arch/x86/include/asm/traps.h
@@@ -61,34 -61,38 +61,42 @@@ asmlinkage void xen_machine_check(void)
  asmlinkage void xen_simd_coprocessor_error(void);
  #endif
  
 -dotraplinkage void do_divide_error(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_debug(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_nmi(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_int3(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_overflow(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_bounds(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_invalid_op(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_device_not_available(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_coprocessor_segment_overrun(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_invalid_TSS(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_segment_not_present(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_stack_segment(struct pt_regs *regs, long error_code);
 +dotraplinkage void do_divide_error(struct pt_regs *, long);
 +dotraplinkage void do_debug(struct pt_regs *, long);
 +dotraplinkage void do_nmi(struct pt_regs *, long);
 +dotraplinkage void do_int3(struct pt_regs *, long);
 +dotraplinkage void do_overflow(struct pt_regs *, long);
 +dotraplinkage void do_bounds(struct pt_regs *, long);
 +dotraplinkage void do_invalid_op(struct pt_regs *, long);
 +dotraplinkage void do_device_not_available(struct pt_regs *, long);
 +dotraplinkage void do_coprocessor_segment_overrun(struct pt_regs *, long);
 +dotraplinkage void do_invalid_TSS(struct pt_regs *, long);
 +dotraplinkage void do_segment_not_present(struct pt_regs *, long);
 +dotraplinkage void do_stack_segment(struct pt_regs *, long);
  #ifdef CONFIG_X86_64
++<<<<<<< HEAD
 +dotraplinkage void do_double_fault(struct pt_regs *, long);
++=======
+ dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code);
+ asmlinkage __visible notrace struct pt_regs *sync_regs(struct pt_regs *eregs);
+ asmlinkage __visible notrace
+ struct bad_iret_stack *fixup_bad_iret(struct bad_iret_stack *s);
+ void __init trap_init(void);
++>>>>>>> 89f579ce99f7 (x86/headers: Fix -Wmissing-prototypes warning)
  #endif
 -dotraplinkage void do_general_protection(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_page_fault(struct pt_regs *regs, unsigned long error_code);
 -dotraplinkage void do_spurious_interrupt_bug(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_coprocessor_error(struct pt_regs *regs, long error_code);
 -dotraplinkage void do_alignment_check(struct pt_regs *regs, long error_code);
 +dotraplinkage void do_general_protection(struct pt_regs *, long);
 +dotraplinkage void do_page_fault(struct pt_regs *, unsigned long);
 +dotraplinkage void do_spurious_interrupt_bug(struct pt_regs *, long);
 +dotraplinkage void do_coprocessor_error(struct pt_regs *, long);
 +dotraplinkage void do_alignment_check(struct pt_regs *, long);
  #ifdef CONFIG_X86_MCE
 -dotraplinkage void do_machine_check(struct pt_regs *regs, long error_code);
 +dotraplinkage void do_machine_check(struct pt_regs *, long);
  #endif
 -dotraplinkage void do_simd_coprocessor_error(struct pt_regs *regs, long error_code);
 +dotraplinkage void do_simd_coprocessor_error(struct pt_regs *, long);
  #ifdef CONFIG_X86_32
 -dotraplinkage void do_iret_error(struct pt_regs *regs, long error_code);
 +dotraplinkage void do_iret_error(struct pt_regs *, long);
  #endif
 -dotraplinkage void do_mce(struct pt_regs *regs, long error_code);
 +dotraplinkage void do_mce(struct pt_regs *, long);
  
  static inline int get_si_code(unsigned long condition)
  {
diff --cc arch/x86/kernel/process.c
index 44bbb2f2179b,b7cb5348f37f..000000000000
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@@ -39,9 -41,7 +41,13 @@@
  #include <asm/desc.h>
  #include <asm/prctl.h>
  #include <asm/spec-ctrl.h>
++<<<<<<< HEAD
 +#include <asm/spec_ctrl.h>
 +
 +#include "process.h"
++=======
+ #include <asm/proto.h>
++>>>>>>> 89f579ce99f7 (x86/headers: Fix -Wmissing-prototypes warning)
  
  /*
   * per-CPU TSS segments. Threads are completely 'soft' on Linux,
diff --git a/arch/x86/include/asm/crash.h b/arch/x86/include/asm/crash.h
index a7adb2bfbf0b..0acf5ee45a21 100644
--- a/arch/x86/include/asm/crash.h
+++ b/arch/x86/include/asm/crash.h
@@ -6,5 +6,6 @@ int crash_load_segments(struct kimage *image);
 int crash_copy_backup_region(struct kimage *image);
 int crash_setup_memmap_entries(struct kimage *image,
 		struct boot_params *params);
+void crash_smp_send_stop(void);
 
 #endif /* _ASM_X86_CRASH_H */
diff --git a/arch/x86/include/asm/irq.h b/arch/x86/include/asm/irq.h
index 2395bb794c7b..fbb16e6b6c18 100644
--- a/arch/x86/include/asm/irq.h
+++ b/arch/x86/include/asm/irq.h
@@ -30,6 +30,9 @@ extern void fixup_irqs(void);
 
 #ifdef CONFIG_HAVE_KVM
 extern void kvm_set_posted_intr_wakeup_handler(void (*handler)(void));
+extern __visible void smp_kvm_posted_intr_ipi(struct pt_regs *regs);
+extern __visible void smp_kvm_posted_intr_wakeup_ipi(struct pt_regs *regs);
+extern __visible void smp_kvm_posted_intr_nested_ipi(struct pt_regs *regs);
 #endif
 
 extern void (*x86_platform_ipi_callback)(void);
@@ -41,9 +44,13 @@ extern __visible unsigned int do_IRQ(struct pt_regs *regs);
 
 extern void init_ISA_irqs(void);
 
+extern void __init init_IRQ(void);
+
 #ifdef CONFIG_X86_LOCAL_APIC
 void arch_trigger_cpumask_backtrace(const struct cpumask *mask,
 				    bool exclude_self);
+
+extern __visible void smp_x86_platform_ipi(struct pt_regs *regs);
 #define arch_trigger_cpumask_backtrace arch_trigger_cpumask_backtrace
 #endif
 
diff --git a/arch/x86/include/asm/irq_work.h b/arch/x86/include/asm/irq_work.h
index 800ffce0db29..80b35e3adf03 100644
--- a/arch/x86/include/asm/irq_work.h
+++ b/arch/x86/include/asm/irq_work.h
@@ -10,6 +10,7 @@ static inline bool arch_irq_work_has_interrupt(void)
 	return boot_cpu_has(X86_FEATURE_APIC);
 }
 extern void arch_irq_work_raise(void);
+extern __visible void smp_irq_work_interrupt(struct pt_regs *regs);
 #else
 static inline bool arch_irq_work_has_interrupt(void)
 {
diff --git a/arch/x86/include/asm/kvm_para.h b/arch/x86/include/asm/kvm_para.h
index 4c723632c036..5ed3cf1c3934 100644
--- a/arch/x86/include/asm/kvm_para.h
+++ b/arch/x86/include/asm/kvm_para.h
@@ -92,6 +92,7 @@ void kvm_async_pf_task_wait(u32 token, int interrupt_kernel);
 void kvm_async_pf_task_wake(u32 token);
 u32 kvm_read_and_reset_pf_reason(void);
 extern void kvm_disable_steal_time(void);
+void do_async_page_fault(struct pt_regs *regs, unsigned long error_code);
 
 #ifdef CONFIG_PARAVIRT_SPINLOCKS
 void __init kvm_spinlock_init(void);
* Unmerged path arch/x86/include/asm/paravirt.h
diff --git a/arch/x86/include/asm/reboot.h b/arch/x86/include/asm/reboot.h
index a671a1145906..04c17be9b5fd 100644
--- a/arch/x86/include/asm/reboot.h
+++ b/arch/x86/include/asm/reboot.h
@@ -26,6 +26,7 @@ void __noreturn machine_real_restart(unsigned int type);
 #define MRR_APM		1
 
 typedef void (*nmi_shootdown_cb)(int, struct pt_regs*);
+void nmi_panic_self_stop(struct pt_regs *regs);
 void nmi_shootdown_cpus(nmi_shootdown_cb callback);
 void run_crash_ipi_callback(struct pt_regs *regs);
 
diff --git a/arch/x86/include/asm/sighandling.h b/arch/x86/include/asm/sighandling.h
index bd26834724e5..2fcbd6f33ef7 100644
--- a/arch/x86/include/asm/sighandling.h
+++ b/arch/x86/include/asm/sighandling.h
@@ -17,4 +17,9 @@ void signal_fault(struct pt_regs *regs, void __user *frame, char *where);
 int setup_sigcontext(struct sigcontext __user *sc, void __user *fpstate,
 		     struct pt_regs *regs, unsigned long mask);
 
+
+#ifdef CONFIG_X86_X32_ABI
+asmlinkage long sys32_x32_rt_sigreturn(void);
+#endif
+
 #endif /* _ASM_X86_SIGHANDLING_H */
diff --git a/arch/x86/include/asm/smp.h b/arch/x86/include/asm/smp.h
index 547c4fe50711..2e95b6c1bca3 100644
--- a/arch/x86/include/asm/smp.h
+++ b/arch/x86/include/asm/smp.h
@@ -148,6 +148,12 @@ void x86_idle_thread_init(unsigned int cpu, struct task_struct *idle);
 
 void smp_store_boot_cpu_info(void);
 void smp_store_cpu_info(int id);
+
+asmlinkage __visible void smp_reboot_interrupt(void);
+__visible void smp_reschedule_interrupt(struct pt_regs *regs);
+__visible void smp_call_function_interrupt(struct pt_regs *regs);
+__visible void smp_call_function_single_interrupt(struct pt_regs *r);
+
 #define cpu_physical_id(cpu)	per_cpu(x86_cpu_to_apicid, cpu)
 #define cpu_acpi_id(cpu)	per_cpu(x86_cpu_to_acpiid, cpu)
 
* Unmerged path arch/x86/include/asm/traps.h
diff --git a/arch/x86/include/asm/tsc.h b/arch/x86/include/asm/tsc.h
index 2701d221583a..905f1156206b 100644
--- a/arch/x86/include/asm/tsc.h
+++ b/arch/x86/include/asm/tsc.h
@@ -35,6 +35,7 @@ extern struct system_counterval_t convert_art_ns_to_tsc(u64 art_ns);
 
 extern void tsc_early_delay_calibrate(void);
 extern void tsc_init(void);
+extern unsigned long calibrate_delay_is_known(void);
 extern void mark_tsc_unstable(char *reason);
 extern int unsynchronized_tsc(void);
 extern int check_tsc_unstable(void);
diff --git a/arch/x86/kernel/check.c b/arch/x86/kernel/check.c
index cc8258a5378b..0d056bd1383e 100644
--- a/arch/x86/kernel/check.c
+++ b/arch/x86/kernel/check.c
@@ -6,6 +6,7 @@
 #include <linux/memblock.h>
 
 #include <asm/proto.h>
+#include <asm/setup.h>
 
 /*
  * Some BIOSes seem to corrupt the low 64k of memory during events
@@ -132,7 +133,7 @@ void __init setup_bios_corruption_check(void)
 }
 
 
-void check_for_bios_corruption(void)
+static void check_for_bios_corruption(void)
 {
 	int i;
 	int corruption = 0;
diff --git a/arch/x86/kernel/crash.c b/arch/x86/kernel/crash.c
index 6b7890c7889b..17ffc869cab8 100644
--- a/arch/x86/kernel/crash.c
+++ b/arch/x86/kernel/crash.c
@@ -37,6 +37,7 @@
 #include <asm/reboot.h>
 #include <asm/virtext.h>
 #include <asm/intel_pt.h>
+#include <asm/crash.h>
 
 /* Used while preparing memory map entries for second kernel */
 struct crash_memmap_data {
diff --git a/arch/x86/kernel/devicetree.c b/arch/x86/kernel/devicetree.c
index f39f3a06c26f..4f433f780608 100644
--- a/arch/x86/kernel/devicetree.c
+++ b/arch/x86/kernel/devicetree.c
@@ -23,6 +23,7 @@
 #include <asm/pci_x86.h>
 #include <asm/setup.h>
 #include <asm/i8259.h>
+#include <asm/prom.h>
 
 __initdata u64 initial_dtb;
 char __initdata cmd_line[COMMAND_LINE_SIZE];
diff --git a/arch/x86/kernel/jailhouse.c b/arch/x86/kernel/jailhouse.c
index 108c48d0d40e..1b2ee55a2dfb 100644
--- a/arch/x86/kernel/jailhouse.c
+++ b/arch/x86/kernel/jailhouse.c
@@ -19,6 +19,7 @@
 #include <asm/pci_x86.h>
 #include <asm/reboot.h>
 #include <asm/setup.h>
+#include <asm/jailhouse_para.h>
 
 static __initdata struct jailhouse_setup_data setup_data;
 static unsigned int precalibrated_tsc_khz;
* Unmerged path arch/x86/kernel/process.c
diff --git a/arch/x86/kernel/quirks.c b/arch/x86/kernel/quirks.c
index 736348ead421..8451f38ad399 100644
--- a/arch/x86/kernel/quirks.c
+++ b/arch/x86/kernel/quirks.c
@@ -7,6 +7,7 @@
 #include <linux/irq.h>
 
 #include <asm/hpet.h>
+#include <asm/setup.h>
 
 #if defined(CONFIG_X86_IO_APIC) && defined(CONFIG_SMP) && defined(CONFIG_PCI)
 
diff --git a/arch/x86/kernel/tracepoint.c b/arch/x86/kernel/tracepoint.c
index 5bd30c442794..2e85f4dcf77b 100644
--- a/arch/x86/kernel/tracepoint.c
+++ b/arch/x86/kernel/tracepoint.c
@@ -10,6 +10,7 @@
 
 #include <asm/hw_irq.h>
 #include <asm/desc.h>
+#include <asm/trace/exceptions.h>
 
 DEFINE_STATIC_KEY_FALSE(trace_pagefault_key);
 
diff --git a/include/linux/ftrace.h b/include/linux/ftrace.h
index ebb77674be90..a9cda73ba17c 100644
--- a/include/linux/ftrace.h
+++ b/include/linux/ftrace.h
@@ -426,6 +426,9 @@ enum {
 };
 
 void arch_ftrace_update_code(int command);
+void arch_ftrace_update_trampoline(struct ftrace_ops *ops);
+void *arch_ftrace_trampoline_func(struct ftrace_ops *ops, struct dyn_ftrace *rec);
+void arch_ftrace_trampoline_free(struct ftrace_ops *ops);
 
 struct ftrace_rec_iter;
 
diff --git a/include/linux/kexec.h b/include/linux/kexec.h
index d58d1f2fab10..b9b1bc5f9669 100644
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@ -183,6 +183,7 @@ int kexec_purgatory_get_set_symbol(struct kimage *image, const char *name,
 				   bool get_value);
 void *kexec_purgatory_get_symbol_addr(struct kimage *image, const char *name);
 
+void * __weak arch_kexec_kernel_image_load(struct kimage *image);
 int __weak arch_kexec_apply_relocations_add(struct purgatory_info *pi,
 					    Elf_Shdr *section,
 					    const Elf_Shdr *relsec,
diff --git a/include/linux/of_fdt.h b/include/linux/of_fdt.h
index b9cd9ebdf9b9..a713e5d156d8 100644
--- a/include/linux/of_fdt.h
+++ b/include/linux/of_fdt.h
@@ -76,6 +76,7 @@ extern int early_init_dt_scan_memory(unsigned long node, const char *uname,
 extern int early_init_dt_scan_chosen_stdout(void);
 extern void early_init_fdt_scan_reserved_mem(void);
 extern void early_init_fdt_reserve_self(void);
+extern void __init early_init_dt_scan_chosen_arch(unsigned long node);
 extern void early_init_dt_add_memory_arch(u64 base, u64 size);
 extern int early_init_dt_mark_hotplug_memory_arch(u64 base, u64 size);
 extern int early_init_dt_reserve_memory_arch(phys_addr_t base, phys_addr_t size,
diff --git a/include/linux/ptrace.h b/include/linux/ptrace.h
index de20ede2c5c8..edb9b040c94c 100644
--- a/include/linux/ptrace.h
+++ b/include/linux/ptrace.h
@@ -411,4 +411,5 @@ extern int task_current_syscall(struct task_struct *target, long *callno,
 				unsigned long args[6], unsigned int maxargs,
 				unsigned long *sp, unsigned long *pc);
 
+extern void sigaction_compat_abi(struct k_sigaction *act, struct k_sigaction *oact);
 #endif
