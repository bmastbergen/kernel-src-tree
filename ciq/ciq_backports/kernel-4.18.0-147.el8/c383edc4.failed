rtnetlink: add rtnl_get_net_ns_capable()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Christian Brauner <christian@brauner.io>
commit c383edc42403b0bca31cbaabafd44dd58afb202f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/c383edc4.failed

get_target_net() will be used in follow-up patches in ipv{4,6} codepaths to
retrieve network namespaces based on network namespace identifiers. So
remove the static declaration and export in the rtnetlink header. Also,
rename it to rtnl_get_net_ns_capable() to make it obvious what this
function is doing.
Export rtnl_get_net_ns_capable() so it can be used when ipv6 is built as
a module.

	Signed-off-by: Christian Brauner <christian@brauner.io>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c383edc42403b0bca31cbaabafd44dd58afb202f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/rtnetlink.c
diff --cc net/core/rtnetlink.c
index 1caa8a15a5a7,c49097237c30..000000000000
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@@ -1908,9 -1906,11 +1917,17 @@@ static int rtnl_dump_ifinfo(struct sk_b
  			ifla_policy, NULL) >= 0) {
  		if (tb[IFLA_IF_NETNSID]) {
  			netnsid = nla_get_s32(tb[IFLA_IF_NETNSID]);
++<<<<<<< HEAD
 +			tgt_net = get_target_net(skb->sk, netnsid);
 +			if (IS_ERR(tgt_net))
 +				return PTR_ERR(tgt_net);
++=======
+ 			tgt_net = rtnl_get_net_ns_capable(skb->sk, netnsid);
+ 			if (IS_ERR(tgt_net)) {
+ 				tgt_net = net;
+ 				netnsid = -1;
+ 			}
++>>>>>>> c383edc42403 (rtnetlink: add rtnl_get_net_ns_capable())
  		}
  
  		if (tb[IFLA_EXT_MASK])
diff --git a/include/net/rtnetlink.h b/include/net/rtnetlink.h
index 44bf618cd631..c05d2a224694 100644
--- a/include/net/rtnetlink.h
+++ b/include/net/rtnetlink.h
@@ -187,6 +187,7 @@ int rtnl_configure_link(struct net_device *dev, const struct ifinfomsg *ifm);
 
 int rtnl_nla_parse_ifla(struct nlattr **tb, const struct nlattr *head, int len,
 			struct netlink_ext_ack *exterr);
+struct net *rtnl_get_net_ns_capable(struct sock *sk, int netnsid);
 
 #define MODULE_ALIAS_RTNL_LINK(kind) MODULE_ALIAS("rtnl-link-" kind)
 
* Unmerged path net/core/rtnetlink.c
