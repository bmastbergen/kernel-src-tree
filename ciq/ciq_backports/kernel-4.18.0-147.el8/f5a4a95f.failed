IB/hfi1: Allow for extra entries in QP's s_ack_queue

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Kaike Wan <kaike.wan@intel.com>
commit f5a4a95f4dd8a09d28936c2e1e357e4c8dcca6c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/f5a4a95f.failed

The TID RDMA WRITE protocol differs from normal IB RDMA WRITE
in that TID RDMA WRITE requests do require responses, not just
ACKs.

Therefore, TID RDMA WRITE requests need to be treated as RDMA
READ requests from the point of view of the QPs' s_ack_queue.
In other words, the QPs' need to allow for TID RDMA WRITE
requests to be stored in their s_ack_queue.

However, because the user does not know anything about the TID
RDMA capability and/or protocols, these extra entries in the
queue cannot be advertized to the user.

	Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
	Signed-off-by: Mitko Haralanov <mitko.haralanov@intel.com>
	Signed-off-by: Kaike Wan <kaike.wan@intel.com>
	Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit f5a4a95f4dd8a09d28936c2e1e357e4c8dcca6c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/hfi1/verbs.c
diff --cc drivers/infiniband/hw/hfi1/verbs.c
index 13951cae3bc4,7b87b77582bd..000000000000
--- a/drivers/infiniband/hw/hfi1/verbs.c
+++ b/drivers/infiniband/hw/hfi1/verbs.c
@@@ -2103,6 -1884,11 +2103,14 @@@ int hfi1_register_ib_device(struct hfi1
  	dd->verbs_dev.rdi.dparms.lkey_table_size = hfi1_lkey_table_size;
  	dd->verbs_dev.rdi.dparms.nports = dd->num_pports;
  	dd->verbs_dev.rdi.dparms.npkeys = hfi1_get_npkeys(dd);
++<<<<<<< HEAD
++=======
+ 	dd->verbs_dev.rdi.dparms.sge_copy_mode = sge_copy_mode;
+ 	dd->verbs_dev.rdi.dparms.wss_threshold = wss_threshold;
+ 	dd->verbs_dev.rdi.dparms.wss_clean_period = wss_clean_period;
+ 	dd->verbs_dev.rdi.dparms.reserved_operations = 1;
+ 	dd->verbs_dev.rdi.dparms.extra_rdma_atomic = HFI1_TID_RDMA_WRITE_CNT;
++>>>>>>> f5a4a95f4dd8 (IB/hfi1: Allow for extra entries in QP's s_ack_queue)
  
  	/* post send table */
  	dd->verbs_dev.rdi.post_parms = hfi1_post_parms;
diff --git a/drivers/infiniband/hw/hfi1/tid_rdma.h b/drivers/infiniband/hw/hfi1/tid_rdma.h
index 18c6d4333f1e..bbfc68efa8dc 100644
--- a/drivers/infiniband/hw/hfi1/tid_rdma.h
+++ b/drivers/infiniband/hw/hfi1/tid_rdma.h
@@ -8,6 +8,17 @@
 
 #define TID_RDMA_MAX_SEGMENT_SIZE       BIT(18)   /* 256 KiB (for now) */
 
+/*
+ * Unlike regular IB RDMA VERBS, which do not require an entry
+ * in the s_ack_queue, TID RDMA WRITE requests do because they
+ * generate responses.
+ * Therefore, the s_ack_queue needs to be extended by a certain
+ * amount. The key point is that the queue needs to be extended
+ * without letting the "user" know so they user doesn't end up
+ * using these extra entries.
+ */
+#define HFI1_TID_RDMA_WRITE_CNT 8
+
 struct tid_rdma_params {
 	struct rcu_head rcu_head;
 	u32 qp;
* Unmerged path drivers/infiniband/hw/hfi1/verbs.c
