x86/entry/64: Use JMP instead of JMPQ

jira LE-1907
cve CVE-2019-1125
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 64dbc122b20f75183d8822618c24f85144a5a94d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/64dbc122.failed

Somehow the swapgs mitigation entry code patch ended up with a JMPQ
instruction instead of JMP, where only the short jump is needed.  Some
assembler versions apparently fail to optimize JMPQ into a two-byte JMP
when possible, instead always using a 7-byte JMP with relocation.  For
some reason that makes the entry code explode with a #GP during boot.

Change it back to "JMP" as originally intended.

Fixes: 18ec54fdd6d1 ("x86/speculation: Prepare entry code for Spectre v1 swapgs mitigations")
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 64dbc122b20f75183d8822618c24f85144a5a94d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/entry/entry_64.S
diff --cc arch/x86/entry/entry_64.S
index 3f0b37b3dbfd,b043c754d978..000000000000
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@@ -541,8 -549,10 +541,12 @@@ ENTRY(interrupt_entry
  	UNWIND_HINT_FUNC
  
  	movq	(%rdi), %rdi
++<<<<<<< HEAD
++=======
+ 	jmp	2f
++>>>>>>> 64dbc122b20f (x86/entry/64: Use JMP instead of JMPQ)
  1:
 -	FENCE_SWAPGS_KERNEL_ENTRY
 -2:
 +
  	PUSH_AND_CLEAR_REGS save_ret=1
  	ENCODE_FRAME_POINTER 8
  
* Unmerged path arch/x86/entry/entry_64.S
