net/mlx5e: XDP, Replace boolean doorbell indication with segment pointer

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Tariq Toukan <tariqt@mellanox.com>
commit b8180392edd97cd5bfdf12270315a72fe601cf7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/b8180392.failed

Instead of calculating the control segment to be used upon an
XDP xmit doorbell, save it in SQ structure.
Nullify when no pending doorbell.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit b8180392edd97cd5bfdf12270315a72fe601cf7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
index 60fd47414ccc,fb1cdf729efb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
@@@ -243,3 -249,67 +240,70 @@@ void mlx5e_free_xdpsq_descs(struct mlx5
  	}
  }
  
++<<<<<<< HEAD
++=======
+ int mlx5e_xdp_xmit(struct net_device *dev, int n, struct xdp_frame **frames,
+ 		   u32 flags)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(dev);
+ 	struct mlx5e_xdpsq *sq;
+ 	int drops = 0;
+ 	int sq_num;
+ 	int i;
+ 
+ 	if (unlikely(!test_bit(MLX5E_STATE_OPENED, &priv->state)))
+ 		return -ENETDOWN;
+ 
+ 	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK))
+ 		return -EINVAL;
+ 
+ 	sq_num = smp_processor_id();
+ 
+ 	if (unlikely(sq_num >= priv->channels.num))
+ 		return -ENXIO;
+ 
+ 	sq = &priv->channels.c[sq_num]->xdpsq;
+ 
+ 	if (unlikely(!test_bit(MLX5E_SQ_STATE_ENABLED, &sq->state)))
+ 		return -ENETDOWN;
+ 
+ 	for (i = 0; i < n; i++) {
+ 		struct xdp_frame *xdpf = frames[i];
+ 		struct mlx5e_xdp_info xdpi;
+ 
+ 		xdpi.dma_addr = dma_map_single(sq->pdev, xdpf->data, xdpf->len,
+ 					       DMA_TO_DEVICE);
+ 		if (unlikely(dma_mapping_error(sq->pdev, xdpi.dma_addr))) {
+ 			xdp_return_frame_rx_napi(xdpf);
+ 			drops++;
+ 			continue;
+ 		}
+ 
+ 		xdpi.xdpf = xdpf;
+ 
+ 		if (unlikely(!mlx5e_xmit_xdp_frame(sq, &xdpi))) {
+ 			dma_unmap_single(sq->pdev, xdpi.dma_addr,
+ 					 xdpf->len, DMA_TO_DEVICE);
+ 			xdp_return_frame_rx_napi(xdpf);
+ 			drops++;
+ 		}
+ 	}
+ 
+ 	if (flags & XDP_XMIT_FLUSH)
+ 		mlx5e_xmit_xdp_doorbell(sq);
+ 
+ 	return n - drops;
+ }
+ 
+ void mlx5e_xdp_rx_poll_complete(struct mlx5e_rq *rq)
+ {
+ 	struct mlx5e_xdpsq *xdpsq = &rq->xdpsq;
+ 
+ 	mlx5e_xmit_xdp_doorbell(xdpsq);
+ 
+ 	if (xdpsq->redirect_flush) {
+ 		xdp_do_flush_map();
+ 		xdpsq->redirect_flush = false;
+ 	}
+ }
++>>>>>>> b8180392edd9 (net/mlx5e: XDP, Replace boolean doorbell indication with segment pointer)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 007808f3e87f..154d538a9643 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -417,7 +417,7 @@ struct mlx5e_xdpsq {
 
 	/* dirtied @xmit */
 	u16                        pc ____cacheline_aligned_in_smp;
-	bool                       doorbell;
+	struct mlx5_wqe_ctrl_seg   *doorbell_cseg;
 
 	struct mlx5e_cq            cq;
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/xdp.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
index 81739aad0188..6476028dbe65 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/xdp.h
@@ -49,13 +49,10 @@ bool mlx5e_xmit_xdp_frame(struct mlx5e_xdpsq *sq, struct mlx5e_xdp_info *xdpi);
 
 static inline void mlx5e_xmit_xdp_doorbell(struct mlx5e_xdpsq *sq)
 {
-	struct mlx5_wq_cyc *wq = &sq->wq;
-	struct mlx5e_tx_wqe *wqe;
-	u16 pi = mlx5_wq_cyc_ctr2ix(wq, sq->pc - 1); /* last pi */
-
-	wqe  = mlx5_wq_cyc_get_wqe(wq, pi);
-
-	mlx5e_notify_hw(wq, sq->pc, sq->uar_map, &wqe->ctrl);
+	if (sq->doorbell_cseg) {
+		mlx5e_notify_hw(&sq->wq, sq->pc, sq->uar_map, sq->doorbell_cseg);
+		sq->doorbell_cseg = NULL;
+	}
 }
 
 #endif
