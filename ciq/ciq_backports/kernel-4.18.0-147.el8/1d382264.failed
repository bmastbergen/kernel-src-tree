bpf, libbpf: fix version info and add it to shared object

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 1d382264d911d91a8be5dbed1f0e053eb3245d81
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/1d382264.failed

Even though libbpf's versioning script for the linker (libbpf.map)
is pointing to 0.0.2, the BPF_EXTRAVERSION in the Makefile has
not been updated along with it and is therefore still on 0.0.1.

While fixing up, I also noticed that the generated shared object
versioning information is missing, typical convention is to have
a linker name (libbpf.so), soname (libbpf.so.0) and real name
(libbpf.so.0.0.2) for library management. This is based upon the
LIBBPF_VERSION as well.

The build will then produce the following bpf libraries:

  # ll libbpf*
  libbpf.a
  libbpf.so -> libbpf.so.0.0.2
  libbpf.so.0 -> libbpf.so.0.0.2
  libbpf.so.0.0.2

  # readelf -d libbpf.so.0.0.2 | grep SONAME
  0x000000000000000e (SONAME)             Library soname: [libbpf.so.0]

And install them accordingly:

  # rm -rf /tmp/bld; mkdir /tmp/bld; make -j$(nproc) O=/tmp/bld install

  Auto-detecting system features:
  ...                        libelf: [ on  ]
  ...                           bpf: [ on  ]

    CC       /tmp/bld/libbpf.o
    CC       /tmp/bld/bpf.o
    CC       /tmp/bld/nlattr.o
    CC       /tmp/bld/btf.o
    CC       /tmp/bld/libbpf_errno.o
    CC       /tmp/bld/str_error.o
    CC       /tmp/bld/netlink.o
    CC       /tmp/bld/bpf_prog_linfo.o
    CC       /tmp/bld/libbpf_probes.o
    CC       /tmp/bld/xsk.o
    LD       /tmp/bld/libbpf-in.o
    LINK     /tmp/bld/libbpf.a
    LINK     /tmp/bld/libbpf.so.0.0.2
    LINK     /tmp/bld/test_libbpf
    INSTALL  /tmp/bld/libbpf.a
    INSTALL  /tmp/bld/libbpf.so.0.0.2

  # ll /usr/local/lib64/libbpf.*
  /usr/local/lib64/libbpf.a
  /usr/local/lib64/libbpf.so -> libbpf.so.0.0.2
  /usr/local/lib64/libbpf.so.0 -> libbpf.so.0.0.2
  /usr/local/lib64/libbpf.so.0.0.2

Fixes: 1bf4b05810fe ("tools: bpftool: add probes for eBPF program types")
Fixes: 1b76c13e4b36 ("bpf tools: Introduce 'bpf' library and add bpf feature check")
	Reported-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 1d382264d911d91a8be5dbed1f0e053eb3245d81)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/Makefile
diff --cc tools/lib/bpf/Makefile
index 45c6eeeb9d6f,5bf8e52c41fc..000000000000
--- a/tools/lib/bpf/Makefile
+++ b/tools/lib/bpf/Makefile
@@@ -142,11 -129,24 +143,22 @@@ all
  export srctree OUTPUT CC LD CFLAGS V
  include $(srctree)/tools/build/Makefile.include
  
- BPF_IN    := $(OUTPUT)libbpf-in.o
- LIB_FILE := $(addprefix $(OUTPUT),$(LIB_FILE))
- VERSION_SCRIPT := libbpf.map
+ BPF_IN		:= $(OUTPUT)libbpf-in.o
+ VERSION_SCRIPT	:= libbpf.map
  
+ LIB_TARGET	:= $(addprefix $(OUTPUT),$(LIB_TARGET))
+ LIB_FILE	:= $(addprefix $(OUTPUT),$(LIB_FILE))
+ 
++<<<<<<< HEAD
 +CMD_TARGETS = $(LIB_FILE)
++=======
+ GLOBAL_SYM_COUNT = $(shell readelf -s --wide $(BPF_IN) | \
+ 			   awk '/GLOBAL/ && /DEFAULT/ && !/UND/ {s++} END{print s}')
+ VERSIONED_SYM_COUNT = $(shell readelf -s --wide $(OUTPUT)libbpf.so | \
+ 			      grep -Eo '[^ ]+@LIBBPF_' | cut -d@ -f1 | sort -u | wc -l)
+ 
+ CMD_TARGETS = $(LIB_TARGET)
 -
 -CXX_TEST_TARGET = $(OUTPUT)test_libbpf
 -
 -ifeq ($(feature-cxx), 1)
 -	CMD_TARGETS += $(CXX_TEST_TARGET)
 -endif
++>>>>>>> 1d382264d911 (bpf, libbpf: fix version info and add it to shared object)
  
  TARGETS = $(CMD_TARGETS)
  
@@@ -167,15 -168,43 +179,43 @@@ $(BPF_IN): force elfdep bpfde
  	@(test -f ../../include/uapi/linux/if_link.h -a -f ../../../include/uapi/linux/if_link.h && ( \
  	(diff -B ../../include/uapi/linux/if_link.h ../../../include/uapi/linux/if_link.h >/dev/null) || \
  	echo "Warning: Kernel ABI header at 'tools/include/uapi/linux/if_link.h' differs from latest version at 'include/uapi/linux/if_link.h'" >&2 )) || true
 -	@(test -f ../../include/uapi/linux/if_xdp.h -a -f ../../../include/uapi/linux/if_xdp.h && ( \
 -	(diff -B ../../include/uapi/linux/if_xdp.h ../../../include/uapi/linux/if_xdp.h >/dev/null) || \
 -	echo "Warning: Kernel ABI header at 'tools/include/uapi/linux/if_xdp.h' differs from latest version at 'include/uapi/linux/if_xdp.h'" >&2 )) || true
  	$(Q)$(MAKE) $(build)=libbpf
  
- $(OUTPUT)libbpf.so: $(BPF_IN)
- 	$(QUIET_LINK)$(CC) --shared -Wl,--version-script=$(VERSION_SCRIPT) \
- 		$^ -o $@
+ $(OUTPUT)libbpf.so: $(OUTPUT)libbpf.so.$(LIBBPF_VERSION)
+ 
+ $(OUTPUT)libbpf.so.$(LIBBPF_VERSION): $(BPF_IN)
+ 	$(QUIET_LINK)$(CC) --shared -Wl,-soname,libbpf.so.$(VERSION) \
+ 				    -Wl,--version-script=$(VERSION_SCRIPT) $^ -o $@
+ 	@ln -sf $(@F) $(OUTPUT)libbpf.so
+ 	@ln -sf $(@F) $(OUTPUT)libbpf.so.$(VERSION)
  
  $(OUTPUT)libbpf.a: $(BPF_IN)
  	$(QUIET_LINK)$(RM) $@; $(AR) rcs $@ $^
  
++<<<<<<< HEAD
++=======
+ $(OUTPUT)test_libbpf: test_libbpf.cpp $(OUTPUT)libbpf.a
+ 	$(QUIET_LINK)$(CXX) $(INCLUDES) $^ -lelf -o $@
+ 
+ check: check_abi
+ 
+ check_abi: $(OUTPUT)libbpf.so
+ 	@if [ "$(GLOBAL_SYM_COUNT)" != "$(VERSIONED_SYM_COUNT)" ]; then	 \
+ 		echo "Warning: Num of global symbols in $(BPF_IN)"	 \
+ 		     "($(GLOBAL_SYM_COUNT)) does NOT match with num of"	 \
+ 		     "versioned symbols in $^ ($(VERSIONED_SYM_COUNT))." \
+ 		     "Please make sure all LIBBPF_API symbols are"	 \
+ 		     "versioned in $(VERSION_SCRIPT)." >&2;		 \
+ 		exit 1;							 \
+ 	fi
+ 
+ define do_install_mkdir
+ 	if [ ! -d '$(DESTDIR_SQ)$1' ]; then		\
+ 		$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$1';	\
+ 	fi
+ endef
+ 
++>>>>>>> 1d382264d911 (bpf, libbpf: fix version info and add it to shared object)
  define do_install
  	if [ ! -d '$(DESTDIR_SQ)$2' ]; then		\
  		$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$2';	\
@@@ -202,8 -232,8 +243,13 @@@ config-clean
  	$(Q)$(MAKE) -C $(srctree)/tools/build/feature/ clean >/dev/null
  
  clean:
++<<<<<<< HEAD
 +	$(call QUIET_CLEAN, libbpf) $(RM) *.o *~ $(TARGETS) *.a *.so .*.d .*.cmd \
 +		$(RM) LIBBPF-CFLAGS
++=======
+ 	$(call QUIET_CLEAN, libbpf) $(RM) $(TARGETS) $(CXX_TEST_TARGET) \
+ 		*.o *~ *.a *.so *.so.$(VERSION) .*.d .*.cmd LIBBPF-CFLAGS
++>>>>>>> 1d382264d911 (bpf, libbpf: fix version info and add it to shared object)
  	$(call QUIET_CLEAN, core-gen) $(RM) $(OUTPUT)FEATURE-DUMP.libbpf
  
  
* Unmerged path tools/lib/bpf/Makefile
