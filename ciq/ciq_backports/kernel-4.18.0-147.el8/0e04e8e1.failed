ice: fix issue where host reboots on unload when iommu=on

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Brett Creeley <brett.creeley@intel.com>
commit 0e04e8e14b558c84a7c7a64d3e94655f5071eef5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/0e04e8e1.failed

Currently if the kernel has the intel_iommu=on parameter set, on some
platforms removing the driver causes a system reboot. In initialization
we associate the control queue interrupts with the pf->hw_oicr_idx and
enable the interrupts by setting the CAUSE_ENA bit. The problem comes
on teardown because we are not clearing the CAUSE_ENA bit for the
control queues, but the vector at pf->hw_oicr_idx (miscellaneous
interrupt vector) gets disabled.

Fix this by clearing the CAUSE_ENA bit in the appropriate control queue
registers on when freeing the miscellaneous interrupt vector. Also,
move the call to ice_free_irq_msix_misc() to after ice_deinit_sw() in
ice_remove() because ice_deinit_sw() makes an AQ call, but
ice_free_irq_msix_misc() disables the miscellaneous vector and it's
associated interrupts.

Also, create two small helper functions to enable and disable the
control queue interrupts respectively.

	Signed-off-by: Brett Creeley <brett.creeley@intel.com>
	Signed-off-by: Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 0e04e8e14b558c84a7c7a64d3e94655f5071eef5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_main.c
diff --cc drivers/net/ethernet/intel/ice/ice_main.c
index 819d3d680fbc,fb04a5ebdc0b..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@@ -1389,8 -1440,6 +1440,11 @@@ static int ice_req_irq_msix_misc(struc
  {
  	struct ice_hw *hw = &pf->hw;
  	int oicr_idx, err = 0;
++<<<<<<< HEAD
 +	u8 itr_gran;
 +	u32 val;
++=======
++>>>>>>> 0e04e8e14b55 (ice: fix issue where host reboots on unload when iommu=on)
  
  	if (!pf->int_name[0])
  		snprintf(pf->int_name, sizeof(pf->int_name) - 1, "%s-%s:misc",
@@@ -1439,24 -1488,9 +1493,28 @@@
  skip_req_irq:
  	ice_ena_misc_vector(pf);
  
++<<<<<<< HEAD
 +	val = ((pf->hw_oicr_idx & PFINT_OICR_CTL_MSIX_INDX_M) |
 +	       PFINT_OICR_CTL_CAUSE_ENA_M);
 +	wr32(hw, PFINT_OICR_CTL, val);
 +
 +	/* This enables Admin queue Interrupt causes */
 +	val = ((pf->hw_oicr_idx & PFINT_FW_CTL_MSIX_INDX_M) |
 +	       PFINT_FW_CTL_CAUSE_ENA_M);
 +	wr32(hw, PFINT_FW_CTL, val);
 +
 +	/* This enables Mailbox queue Interrupt causes */
 +	val = ((pf->hw_oicr_idx & PFINT_MBX_CTL_MSIX_INDX_M) |
 +	       PFINT_MBX_CTL_CAUSE_ENA_M);
 +	wr32(hw, PFINT_MBX_CTL, val);
 +
 +	itr_gran = hw->itr_gran;
 +
++=======
+ 	ice_ena_ctrlq_interrupts(hw, pf->hw_oicr_idx);
++>>>>>>> 0e04e8e14b55 (ice: fix issue where host reboots on unload when iommu=on)
  	wr32(hw, GLINT_ITR(ICE_RX_ITR, pf->hw_oicr_idx),
 -	     ITR_REG_ALIGN(ICE_ITR_8K) >> ICE_ITR_GRAN_S);
 +	     ITR_TO_REG(ICE_ITR_8K, itr_gran));
  
  	ice_flush(hw);
  	ice_irq_dynamic_ena(hw, NULL, NULL);
* Unmerged path drivers/net/ethernet/intel/ice/ice_main.c
