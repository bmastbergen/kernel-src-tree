ice: configure GLINT_ITR to always have an ITR gran of 2

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Brett Creeley <brett.creeley@intel.com>
commit 70457520bab82bd758307837964ef7bbd5dd9dc8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/70457520.failed

Instead of hoping that our ITR granularity will be 2 usec program the
GLINT_CTL register to make sure the ITR granularity is always 2 usecs.

Now that we know what the ITR granularity will be get rid of the check
in ice_probe() to verify our previous assumption.

	Signed-off-by: Brett Creeley <brett.creeley@intel.com>
	Signed-off-by: Anirudh Venkataramanan <anirudh.venkataramanan@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 70457520bab82bd758307837964ef7bbd5dd9dc8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_lib.c
#	drivers/net/ethernet/intel/ice/ice_txrx.h
diff --cc drivers/net/ethernet/intel/ice/ice_lib.c
index fbe81bf4ec8e,c6572f6fb488..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_lib.c
+++ b/drivers/net/ethernet/intel/ice/ice_lib.c
@@@ -1725,7 -1756,7 +1756,11 @@@ static void ice_cfg_itr_gran(struct ice
  static void
  ice_cfg_itr(struct ice_hw *hw, struct ice_q_vector *q_vector, u16 vector)
  {
++<<<<<<< HEAD
 +	u8 itr_gran = hw->itr_gran;
++=======
+ 	ice_cfg_itr_gran(hw);
++>>>>>>> 70457520bab8 (ice: configure GLINT_ITR to always have an ITR gran of 2)
  
  	if (q_vector->num_ring_rx) {
  		struct ice_ring_container *rc = &q_vector->rx;
diff --cc drivers/net/ethernet/intel/ice/ice_txrx.h
index 75d0eaf6c9dd,b7ff0ff82517..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_txrx.h
+++ b/drivers/net/ethernet/intel/ice/ice_txrx.h
@@@ -116,16 -116,18 +116,29 @@@ enum ice_rx_dtype 
  /* indices into GLINT_ITR registers */
  #define ICE_RX_ITR	ICE_IDX_ITR0
  #define ICE_TX_ITR	ICE_IDX_ITR1
 -#define ICE_ITR_8K	124
 +#define ICE_ITR_DYNAMIC	0x8000  /* use top bit as a flag */
 +#define ICE_ITR_8K	125
  #define ICE_ITR_20K	50
++<<<<<<< HEAD
 +#define ICE_DFLT_TX_ITR	ICE_ITR_20K
 +#define ICE_DFLT_RX_ITR	ICE_ITR_20K
 +/* apply ITR granularity translation to program the register. itr_gran is either
 + * 2 or 4 usecs so we need to divide by 2 first then shift by that value
 + */
 +#define ITR_TO_REG(val, itr_gran) (((val) & ~ICE_ITR_DYNAMIC) >> \
 +				   ((itr_gran) / 2))
++=======
+ #define ICE_ITR_MAX	8160
+ #define ICE_DFLT_TX_ITR	(ICE_ITR_20K | ICE_ITR_DYNAMIC)
+ #define ICE_DFLT_RX_ITR	(ICE_ITR_20K | ICE_ITR_DYNAMIC)
+ #define ICE_ITR_DYNAMIC	0x8000  /* used as flag for itr_setting */
+ #define ITR_IS_DYNAMIC(setting) (!!((setting) & ICE_ITR_DYNAMIC))
+ #define ITR_TO_REG(setting)	((setting) & ~ICE_ITR_DYNAMIC)
+ #define ICE_ITR_GRAN_S		1	/* Assume ITR granularity is 2us */
+ #define ICE_ITR_GRAN_US		BIT(ICE_ITR_GRAN_S)
+ #define ICE_ITR_MASK		0x1FFE	/* ITR register value alignment mask */
+ #define ITR_REG_ALIGN(setting)	__ALIGN_MASK(setting, ~ICE_ITR_MASK)
++>>>>>>> 70457520bab8 (ice: configure GLINT_ITR to always have an ITR gran of 2)
  
  #define ICE_DFLT_INTRL	0
  
diff --git a/drivers/net/ethernet/intel/ice/ice_hw_autogen.h b/drivers/net/ethernet/intel/ice/ice_hw_autogen.h
index 3cbfae93da15..69c9dbbfd509 100644
--- a/drivers/net/ethernet/intel/ice/ice_hw_autogen.h
+++ b/drivers/net/ethernet/intel/ice/ice_hw_autogen.h
@@ -106,6 +106,16 @@
 #define VPGEN_VFRTRIG_VFSWR_M			BIT(0)
 #define PFHMC_ERRORDATA				0x00520500
 #define PFHMC_ERRORINFO				0x00520400
+#define GLINT_CTL				0x0016CC54
+#define GLINT_CTL_DIS_AUTOMASK_M		BIT(0)
+#define GLINT_CTL_ITR_GRAN_200_S		16
+#define GLINT_CTL_ITR_GRAN_200_M		ICE_M(0xF, 16)
+#define GLINT_CTL_ITR_GRAN_100_S		20
+#define GLINT_CTL_ITR_GRAN_100_M		ICE_M(0xF, 20)
+#define GLINT_CTL_ITR_GRAN_50_S			24
+#define GLINT_CTL_ITR_GRAN_50_M			ICE_M(0xF, 24)
+#define GLINT_CTL_ITR_GRAN_25_S			28
+#define GLINT_CTL_ITR_GRAN_25_M			ICE_M(0xF, 28)
 #define GLINT_DYN_CTL(_INT)			(0x00160000 + ((_INT) * 4))
 #define GLINT_DYN_CTL_INTENA_M			BIT(0)
 #define GLINT_DYN_CTL_CLEARPBA_M		BIT(1)
* Unmerged path drivers/net/ethernet/intel/ice/ice_lib.c
* Unmerged path drivers/net/ethernet/intel/ice/ice_txrx.h
