libbpf: handle BTF parsing and loading properly

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit f38a1f0a5a5710b14c0e899628c815522c6111cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/f38a1f0a.failed

This patch splits and cleans up error handling logic for loading BTF data.
Previously, if BTF data was parsed successfully, but failed to load into
kernel, we'd report nonsensical error code, instead of error returned from
btf__load(). Now btf__new() and btf__load() are handled separately with proper
cleanup and warning reporting.

Fixes: d29d87f7e612 ("btf: separate btf creation and loading")
	Reported-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit f38a1f0a5a5710b14c0e899628c815522c6111cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 0b70ceb786a6,5e977d2688da..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -792,15 -834,23 +792,26 @@@ static int bpf_object__elf_collect(stru
  		else if (strcmp(name, "maps") == 0)
  			obj->efile.maps_shndx = idx;
  		else if (strcmp(name, BTF_ELF_SEC) == 0) {
++<<<<<<< HEAD
 +			obj->btf = btf__new(data->d_buf, data->d_size,
 +					    __pr_debug);
++=======
+ 			obj->btf = btf__new(data->d_buf, data->d_size);
++>>>>>>> f38a1f0a5a57 (libbpf: handle BTF parsing and loading properly)
  			if (IS_ERR(obj->btf)) {
  				pr_warning("Error loading ELF section %s: %ld. Ignored and continue.\n",
  					   BTF_ELF_SEC, PTR_ERR(obj->btf));
- 				if (!IS_ERR(obj->btf))
- 					btf__free(obj->btf);
  				obj->btf = NULL;
+ 				continue;
+ 			}
+ 			err = btf__load(obj->btf);
+ 			if (err) {
+ 				pr_warning("Error loading %s into kernel: %d. Ignored and continue.\n",
+ 					   BTF_ELF_SEC, err);
+ 				btf__free(obj->btf);
+ 				obj->btf = NULL;
+ 				err = 0;
  			}
 -		} else if (strcmp(name, BTF_EXT_ELF_SEC) == 0) {
 -			btf_ext_data = data;
  		} else if (sh.sh_type == SHT_SYMTAB) {
  			if (obj->efile.symbols) {
  				pr_warning("bpf: multiple SYMTAB in %s\n",
* Unmerged path tools/lib/bpf/libbpf.c
