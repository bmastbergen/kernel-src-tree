IB/mlx5: Set uid as part of TIR commands

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit 443c1cf9d6c845d0dc389469b78cefec842d5868
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/443c1cf9.failed

Set uid as part of TIR commands so that the firmware can manage the
TIR object in a secured way.

That will enable using a TIR that was created by verbs application to
be used by the DEVX flow in case the uid is equal.

	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 443c1cf9d6c845d0dc389469b78cefec842d5868)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 4dea26d4e488,2b2d26fa071d..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -1255,9 -1260,21 +1256,24 @@@ static bool tunnel_offload_supported(st
  		 MLX5_CAP_ETH(dev, tunnel_stateless_geneve_rx));
  }
  
++<<<<<<< HEAD
++=======
+ static void destroy_raw_packet_qp_tir(struct mlx5_ib_dev *dev,
+ 				      struct mlx5_ib_rq *rq,
+ 				      u32 qp_flags_en,
+ 				      struct ib_pd *pd)
+ {
+ 	if (qp_flags_en & (MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_UC |
+ 			   MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_MC))
+ 		mlx5_ib_disable_lb(dev, false, true);
+ 	mlx5_cmd_destroy_tir(dev->mdev, rq->tirn, to_mpd(pd)->uid);
+ }
+ 
++>>>>>>> 443c1cf9d6c8 (IB/mlx5: Set uid as part of TIR commands)
  static int create_raw_packet_qp_tir(struct mlx5_ib_dev *dev,
  				    struct mlx5_ib_rq *rq, u32 tdn,
- 				    u32 *qp_flags_en)
+ 				    u32 *qp_flags_en,
+ 				    struct ib_pd *pd)
  {
  	u8 lb_flag = 0;
  	u32 *in;
@@@ -1292,6 -1310,12 +1309,15 @@@
  
  	err = mlx5_core_create_tir(dev->mdev, in, inlen, &rq->tirn);
  
++<<<<<<< HEAD
++=======
+ 	if (!err && MLX5_GET(tirc, tirc, self_lb_block)) {
+ 		err = mlx5_ib_enable_lb(dev, false, true);
+ 
+ 		if (err)
+ 			destroy_raw_packet_qp_tir(dev, rq, 0, pd);
+ 	}
++>>>>>>> 443c1cf9d6c8 (IB/mlx5: Set uid as part of TIR commands)
  	kvfree(in);
  
  	return err;
@@@ -1371,7 -1388,7 +1396,11 @@@ static void destroy_raw_packet_qp(struc
  	struct mlx5_ib_rq *rq = &raw_packet_qp->rq;
  
  	if (qp->rq.wqe_cnt) {
++<<<<<<< HEAD
 +		destroy_raw_packet_qp_tir(dev, rq);
++=======
+ 		destroy_raw_packet_qp_tir(dev, rq, qp->flags_en, qp->ibqp.pd);
++>>>>>>> 443c1cf9d6c8 (IB/mlx5: Set uid as part of TIR commands)
  		destroy_raw_packet_qp_rq(dev, rq);
  	}
  
@@@ -1395,7 -1412,11 +1424,15 @@@ static void raw_packet_qp_copy_info(str
  
  static void destroy_rss_raw_qp_tir(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp)
  {
++<<<<<<< HEAD
 +	mlx5_core_destroy_tir(dev->mdev, qp->rss_qp.tirn);
++=======
+ 	if (qp->flags_en & (MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_UC |
+ 			    MLX5_QP_FLAG_TIR_ALLOW_SELF_LB_MC))
+ 		mlx5_ib_disable_lb(dev, false, true);
+ 	mlx5_cmd_destroy_tir(dev->mdev, qp->rss_qp.tirn,
+ 			     to_mpd(qp->ibqp.pd)->uid);
++>>>>>>> 443c1cf9d6c8 (IB/mlx5: Set uid as part of TIR commands)
  }
  
  static int create_rss_raw_qp_tir(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
@@@ -1605,6 -1627,14 +1643,17 @@@
  create_tir:
  	err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn);
  
++<<<<<<< HEAD
++=======
+ 	if (!err && MLX5_GET(tirc, tirc, self_lb_block)) {
+ 		err = mlx5_ib_enable_lb(dev, false, true);
+ 
+ 		if (err)
+ 			mlx5_cmd_destroy_tir(dev->mdev, qp->rss_qp.tirn,
+ 					     to_mpd(pd)->uid);
+ 	}
+ 
++>>>>>>> 443c1cf9d6c8 (IB/mlx5: Set uid as part of TIR commands)
  	if (err)
  		goto err;
  
diff --git a/drivers/infiniband/hw/mlx5/cmd.c b/drivers/infiniband/hw/mlx5/cmd.c
index 91cfc2856bc4..9834cd4d1e45 100644
--- a/drivers/infiniband/hw/mlx5/cmd.c
+++ b/drivers/infiniband/hw/mlx5/cmd.c
@@ -198,6 +198,17 @@ int mlx5_cmd_query_ext_ppcnt_counters(struct mlx5_core_dev *dev, void *out)
 				     0, 0);
 }
 
+void mlx5_cmd_destroy_tir(struct mlx5_core_dev *dev, u32 tirn, u16 uid)
+{
+	u32 in[MLX5_ST_SZ_DW(destroy_tir_in)]   = {};
+	u32 out[MLX5_ST_SZ_DW(destroy_tir_out)] = {};
+
+	MLX5_SET(destroy_tir_in, in, opcode, MLX5_CMD_OP_DESTROY_TIR);
+	MLX5_SET(destroy_tir_in, in, tirn, tirn);
+	MLX5_SET(destroy_tir_in, in, uid, uid);
+	mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
+}
+
 void mlx5_cmd_dealloc_pd(struct mlx5_core_dev *dev, u32 pdn, u16 uid)
 {
 	u32 out[MLX5_ST_SZ_DW(dealloc_pd_out)] = {};
diff --git a/drivers/infiniband/hw/mlx5/cmd.h b/drivers/infiniband/hw/mlx5/cmd.h
index 24175b3d5965..feab7682bfbd 100644
--- a/drivers/infiniband/hw/mlx5/cmd.h
+++ b/drivers/infiniband/hw/mlx5/cmd.h
@@ -48,6 +48,7 @@ int mlx5_cmd_alloc_memic(struct mlx5_memic *memic, phys_addr_t *addr,
 			 u64 length, u32 alignment);
 int mlx5_cmd_dealloc_memic(struct mlx5_memic *memic, u64 addr, u64 length);
 void mlx5_cmd_dealloc_pd(struct mlx5_core_dev *dev, u32 pdn, u16 uid);
+void mlx5_cmd_destroy_tir(struct mlx5_core_dev *dev, u32 tirn, u16 uid);
 int mlx5_cmd_attach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid,
 			u32 qpn, u16 uid);
 int mlx5_cmd_detach_mcg(struct mlx5_core_dev *dev, union ib_gid *mgid,
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
