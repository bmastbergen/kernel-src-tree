tipc: use standard write_lock & unlock functions when creating node

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Jon Maloy <jon.maloy@ericsson.com>
commit 909620ff72c8fcf95b6ef1dca850b24bf016dd27
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/909620ff.failed

In the function tipc_node_create() we protect the peer capability field
by using the node rw_lock. However, we access the lock directly instead
of using the dedicated functions for this, as we do everywhere else in
node.c. This cosmetic spot is fixed here.

Fixes: 40999f11ce67 ("tipc: make link capability update thread safe")
	Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 909620ff72c8fcf95b6ef1dca850b24bf016dd27)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/tipc/node.c
diff --cc net/tipc/node.c
index 5adcf66d6d90,7478e2d4ec02..000000000000
--- a/net/tipc/node.c
+++ b/net/tipc/node.c
@@@ -382,7 -382,13 +382,17 @@@ static struct tipc_node *tipc_node_crea
  			if (l)
  				tipc_link_update_caps(l, capabilities);
  		}
++<<<<<<< HEAD
 +		write_unlock_bh(&n->lock);
++=======
+ 		tipc_node_write_unlock_fast(n);
+ 
+ 		/* Calculate cluster capabilities */
+ 		tn->capabilities = TIPC_NODE_CAPABILITIES;
+ 		list_for_each_entry_rcu(temp_node, &tn->node_list, list) {
+ 			tn->capabilities &= temp_node->capabilities;
+ 		}
++>>>>>>> 909620ff72c8 (tipc: use standard write_lock & unlock functions when creating node)
  		goto exit;
  	}
  	n = kzalloc(sizeof(*n), GFP_ATOMIC);
* Unmerged path net/tipc/node.c
