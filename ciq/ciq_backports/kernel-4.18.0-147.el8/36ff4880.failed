RDMA/mlx5: Unfold modify RMP function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Leon Romanovsky <leon@kernel.org>
commit 36ff48805ae457d79886147913ad07056780dca0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/36ff4880.failed

There is no need to perform modify_rmp in two separate function,
while one of them uses stack as a placeholder for data while other
allocates it dynamically. Combine those two functions to one call
instead of two.

	Reviewed-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit 36ff48805ae457d79886147913ad07056780dca0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/srq.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/srq.c
index 28c1c0ebd02e,7aaaffbd4afa..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/srq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/srq.c
@@@ -327,10 -298,11 +327,14 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/srq.c
 +static int create_rmp_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq,
++=======
+ static int create_rmp_cmd(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
++>>>>>>> 36ff48805ae4 (RDMA/mlx5: Unfold modify RMP function):drivers/infiniband/hw/mlx5/srq_cmd.c
  			  struct mlx5_srq_attr *in)
  {
 -	void *create_out = NULL;
 -	void *create_in = NULL;
 +	void *create_in;
  	void *rmpc;
  	void *wq;
  	int pas_size;
@@@ -368,14 -349,14 +372,15 @@@ static int destroy_rmp_cmd(struct mlx5_
  	MLX5_SET(destroy_rmp_in, in, opcode, MLX5_CMD_OP_DESTROY_RMP);
  	MLX5_SET(destroy_rmp_in, in, rmpn, srq->srqn);
  	MLX5_SET(destroy_rmp_in, in, uid, srq->uid);
 -	return mlx5_cmd_exec(dev->mdev, in, sizeof(in), out, sizeof(out));
 +	return mlx5_cmd_exec(dev, in, sizeof(in), out, sizeof(out));
  }
  
 -static int arm_rmp_cmd(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
 +static int arm_rmp_cmd(struct mlx5_core_dev *dev,
 +		       struct mlx5_core_srq *srq,
  		       u16 lwm)
  {
- 	void *in;
+ 	void *out = NULL;
+ 	void *in = NULL;
  	void *rmpc;
  	void *wq;
  	void *bitmask;
@@@ -402,18 -394,29 +418,29 @@@ out
  	return err;
  }
  
 -static int query_rmp_cmd(struct mlx5_ib_dev *dev, struct mlx5_core_srq *srq,
 +static int query_rmp_cmd(struct mlx5_core_dev *dev, struct mlx5_core_srq *srq,
  			 struct mlx5_srq_attr *out)
  {
- 	u32 *rmp_out;
+ 	u32 *rmp_out = NULL;
+ 	u32 *rmp_in = NULL;
  	void *rmpc;
+ 	int outlen;
+ 	int inlen;
  	int err;
  
- 	rmp_out =  kvzalloc(MLX5_ST_SZ_BYTES(query_rmp_out), GFP_KERNEL);
- 	if (!rmp_out)
- 		return -ENOMEM;
+ 	outlen = MLX5_ST_SZ_BYTES(query_rmp_out);
+ 	inlen = MLX5_ST_SZ_BYTES(query_rmp_in);
+ 
+ 	rmp_out = kvzalloc(outlen, GFP_KERNEL);
+ 	rmp_in = kvzalloc(inlen, GFP_KERNEL);
+ 	if (!rmp_out || !rmp_in) {
+ 		err = -ENOMEM;
+ 		goto out;
+ 	}
  
- 	err = mlx5_core_query_rmp(dev, srq->srqn, rmp_out);
+ 	MLX5_SET(query_rmp_in, rmp_in, opcode, MLX5_CMD_OP_QUERY_RMP);
+ 	MLX5_SET(query_rmp_in, rmp_in, rmpn,   srq->srqn);
+ 	err = mlx5_cmd_exec(dev->mdev, rmp_in, inlen, rmp_out, outlen);
  	if (err)
  		goto out;
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/srq.c
