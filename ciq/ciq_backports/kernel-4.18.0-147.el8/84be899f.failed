net/mlx5e: Correctly use the namespace type when allocating pedit action

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Tonghao Zhang <xiangxia.m.yue@gmail.com>
commit 84be899f6fd233ff2aeaf14cc43e6457425122b2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/84be899f.failed

The capacity of FDB offloading and NIC offloading table are
different, and when allocating the pedit actions, we should
use the correct namespace type.

Fixes: c500c86b0c75d ("net/mlx5e: support for two independent packet edit actions")
	Cc: Pablo Neira Ayuso <pablo@netfilter.org>
	Signed-off-by: Tonghao Zhang <xiangxia.m.yue@gmail.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 84be899f6fd233ff2aeaf14cc43e6457425122b2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 0898ea0b9f0c,5fb5cab36bf6..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -2690,38 -2665,46 +2690,47 @@@ static int parse_tc_fdb_actions(struct 
  				encap = true;
  			else
  				return -EOPNOTSUPP;
 +			attr->mirror_count = attr->out_count;
 +			continue;
 +		}
  
 -			break;
 -		case FLOW_ACTION_VLAN_PUSH:
 -		case FLOW_ACTION_VLAN_POP:
 -			err = parse_tc_vlan_action(priv, act, attr, &action);
 -			if (err)
 -				return err;
 -
 -			attr->split_count = attr->out_count;
 -			break;
 -		case FLOW_ACTION_TUNNEL_DECAP:
 -			action |= MLX5_FLOW_CONTEXT_ACTION_DECAP;
 -			break;
 -		case FLOW_ACTION_GOTO: {
 -			u32 dest_chain = act->chain_index;
 -			u32 max_chain = mlx5_eswitch_get_chain_range(esw);
 -
 -			if (dest_chain <= attr->chain) {
 -				NL_SET_ERR_MSG(extack, "Goto earlier chain isn't supported");
 -				return -EOPNOTSUPP;
 -			}
 -			if (dest_chain > max_chain) {
 -				NL_SET_ERR_MSG(extack, "Requested destination chain is out of supported range");
++<<<<<<< HEAD
 +		if (is_tcf_vlan(a)) {
 +			if (tcf_vlan_action(a) == TCA_VLAN_ACT_POP) {
 +				action |= MLX5_FLOW_CONTEXT_ACTION_VLAN_POP;
 +			} else if (tcf_vlan_action(a) == TCA_VLAN_ACT_PUSH) {
 +				action |= MLX5_FLOW_CONTEXT_ACTION_VLAN_PUSH;
 +				attr->vlan_vid = tcf_vlan_push_vid(a);
 +				if (mlx5_eswitch_vlan_actions_supported(priv->mdev)) {
 +					attr->vlan_prio = tcf_vlan_push_prio(a);
 +					attr->vlan_proto = tcf_vlan_push_proto(a);
 +					if (!attr->vlan_proto)
 +						attr->vlan_proto = htons(ETH_P_8021Q);
 +				} else if (tcf_vlan_push_proto(a) != htons(ETH_P_8021Q) ||
 +					   tcf_vlan_push_prio(a)) {
 +					return -EOPNOTSUPP;
 +				}
 +			} else { /* action is TCA_VLAN_ACT_MODIFY */
  				return -EOPNOTSUPP;
  			}
 -			action |= MLX5_FLOW_CONTEXT_ACTION_COUNT;
 -			attr->dest_chain = dest_chain;
 -			break;
 -			}
 -		default:
 -			return -EINVAL;
 +			attr->mirror_count = attr->out_count;
 +			continue;
  		}
 -	}
  
 +		if (is_tcf_tunnel_release(a)) {
 +			action |= MLX5_FLOW_CONTEXT_ACTION_DECAP;
 +			continue;
 +		}
 +
 +		return -EINVAL;
++=======
+ 	if (hdrs[TCA_PEDIT_KEY_EX_CMD_SET].pedits ||
+ 	    hdrs[TCA_PEDIT_KEY_EX_CMD_ADD].pedits) {
+ 		err = alloc_tc_pedit_action(priv, MLX5_FLOW_NAMESPACE_FDB,
+ 					    parse_attr, hdrs, extack);
+ 		if (err)
+ 			return err;
++>>>>>>> 84be899f6fd2 (net/mlx5e: Correctly use the namespace type when allocating pedit action)
  	}
  
  	attr->action = action;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
