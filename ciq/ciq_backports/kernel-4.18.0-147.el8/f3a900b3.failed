signal/arm64: Add and use arm64_force_sig_ptrace_errno_trap

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit f3a900b34101bb8df10b83f326b3af796c101a05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/f3a900b3.failed

Add arm64_force_sig_ptrace_errno_trap for consistency with
arm64_force_sig_fault and use it where appropriate.

This adds the show_signal logic to the force_sig_errno_trap case,
where it was apparently overlooked earlier.

	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Tested-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit f3a900b34101bb8df10b83f326b3af796c101a05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/include/asm/traps.h
diff --cc arch/arm64/include/asm/traps.h
index 08e99901edbc,f9c1aa6167d2..000000000000
--- a/arch/arm64/include/asm/traps.h
+++ b/arch/arm64/include/asm/traps.h
@@@ -38,7 -38,8 +38,12 @@@ void unregister_undef_hook(struct undef
  void force_signal_inject(int signal, int code, unsigned long address);
  void arm64_notify_segfault(unsigned long addr);
  void arm64_force_sig_fault(int signo, int code, void __user *addr, const char *str);
++<<<<<<< HEAD
 +void arm64_force_sig_info(struct siginfo *info, const char *str);
++=======
+ void arm64_force_sig_mceerr(int code, void __user *addr, short lsb, const char *str);
+ void arm64_force_sig_ptrace_errno_trap(int errno, void __user *addr, const char *str);
++>>>>>>> f3a900b34101 (signal/arm64: Add and use arm64_force_sig_ptrace_errno_trap)
  
  /*
   * Move regs->pc to next instruction and do necessary setup before it
* Unmerged path arch/arm64/include/asm/traps.h
diff --git a/arch/arm64/kernel/ptrace.c b/arch/arm64/kernel/ptrace.c
index a01e48252191..3bf54c642470 100644
--- a/arch/arm64/kernel/ptrace.c
+++ b/arch/arm64/kernel/ptrace.c
@@ -202,7 +202,9 @@ static void ptrace_hbptriggered(struct perf_event *bp,
 				break;
 			}
 		}
-		force_sig_ptrace_errno_trap(si_errno, (void __user *)bkpt->trigger);
+		arm64_force_sig_ptrace_errno_trap(si_errno,
+						  (void __user *)bkpt->trigger,
+						  desc);
 	}
 #endif
 	arm64_force_sig_fault(SIGTRAP, TRAP_HWBKPT,
diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c
index 4efd47b623f4..295653662b81 100644
--- a/arch/arm64/kernel/traps.c
+++ b/arch/arm64/kernel/traps.c
@@ -261,6 +261,13 @@ void arm64_force_sig_info(struct siginfo *info, const char *str)
 	force_sig_info(info->si_signo, info, current);
 }
 
+void arm64_force_sig_ptrace_errno_trap(int errno, void __user *addr,
+				       const char *str)
+{
+	arm64_show_signal(SIGTRAP, str);
+	force_sig_ptrace_errno_trap(errno, addr);
+}
+
 void arm64_notify_die(const char *str, struct pt_regs *regs,
 		      int signo, int sicode, void __user *addr,
 		      int err)
