KVM: Documentation: rename the capability of KVM_CAP_ARM_SET_SERROR_ESR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Dongjiu Geng <gengdongjiu@huawei.com>
commit 688e0581dbe0fa851188dd4fef887ea0c55aab13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/688e0581.failed

In the documentation description, this capability's name is
KVM_CAP_ARM_SET_SERROR_ESR, but in the header file this
capability's name is KVM_CAP_ARM_INJECT_SERROR_ESR, so change
the documentation description to make it same.

	Signed-off-by: Dongjiu Geng <gengdongjiu@huawei.com>
	Reported-by: Andrew Jones <drjones@redhat.com>
	Reviewed-by: Andrew Jones <drjones@redhat.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 688e0581dbe0fa851188dd4fef887ea0c55aab13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/virtual/kvm/api.txt
diff --cc Documentation/virtual/kvm/api.txt
index 6a9ffc956cf5,c664064f76fb..000000000000
--- a/Documentation/virtual/kvm/api.txt
+++ b/Documentation/virtual/kvm/api.txt
@@@ -938,6 -907,18 +938,21 @@@ SError is pending, the architecture's '
  be followed. (2.5.3 of DDI0587.a "ARM Reliability, Availability, and
  Serviceability (RAS) Specification").
  
++<<<<<<< HEAD
++=======
+ SError exceptions always have an ESR value. Some CPUs have the ability to
+ specify what the virtual SError's ESR value should be. These systems will
+ advertise KVM_CAP_ARM_INJECT_SERROR_ESR. In this case exception.has_esr will
+ always have a non-zero value when read, and the agent making an SError pending
+ should specify the ISS field in the lower 24 bits of exception.serror_esr. If
+ the system supports KVM_CAP_ARM_INJECT_SERROR_ESR, but user-space sets the events
+ with exception.has_esr as zero, KVM will choose an ESR.
+ 
+ Specifying exception.has_esr on a system that does not support it will return
+ -EINVAL. Setting anything other than the lower 24bits of exception.serror_esr
+ will return -EINVAL.
+ 
++>>>>>>> 688e0581dbe0 (KVM: Documentation: rename the capability of KVM_CAP_ARM_SET_SERROR_ESR)
  struct kvm_vcpu_events {
  	struct {
  		__u8 serror_pending;
@@@ -4796,3 -4748,17 +4811,20 @@@ This capability indicates that KVM supp
  hypercalls:
  HvFlushVirtualAddressSpace, HvFlushVirtualAddressSpaceEx,
  HvFlushVirtualAddressList, HvFlushVirtualAddressListEx.
++<<<<<<< HEAD
++=======
+ 
+ 8.19 KVM_CAP_ARM_INJECT_SERROR_ESR
+ 
+ Architectures: arm, arm64
+ 
+ This capability indicates that userspace can specify (via the
+ KVM_SET_VCPU_EVENTS ioctl) the syndrome value reported to the guest when it
+ takes a virtual SError interrupt exception.
+ If KVM advertises this capability, userspace can only specify the ISS field for
+ the ESR syndrome. Other parts of the ESR, such as the EC are generated by the
+ CPU when the exception is taken. If this virtual SError is taken to EL1 using
+ AArch64, this value will be reported in the ISS field of ESR_ELx.
+ 
+ See KVM_CAP_VCPU_EVENTS for more details.
++>>>>>>> 688e0581dbe0 (KVM: Documentation: rename the capability of KVM_CAP_ARM_SET_SERROR_ESR)
* Unmerged path Documentation/virtual/kvm/api.txt
