RDMA/cma: Constify path record, ib_cm_event, listen_id pointers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Parav Pandit <parav@mellanox.com>
commit e7ff98aefc9e532a2067d5a2112a23902726e9a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/e7ff98ae.failed

Constify several pointers such as path_rec, ib_cm_event and listen_id
pointers in several functions.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit e7ff98aefc9e532a2067d5a2112a23902726e9a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/cma.c
#	drivers/infiniband/ulp/ipoib/ipoib_cm.c
diff --cc drivers/infiniband/core/cma.c
index 1f1ad4ef56bb,5571f8d52302..000000000000
--- a/drivers/infiniband/core/cma.c
+++ b/drivers/infiniband/core/cma.c
@@@ -1781,10 -1780,11 +1782,11 @@@ static void cma_set_rep_event_data(stru
  	event->param.conn.qp_num = rep_data->remote_qpn;
  }
  
- static int cma_ib_handler(struct ib_cm_id *cm_id, struct ib_cm_event *ib_event)
+ static int cma_ib_handler(struct ib_cm_id *cm_id,
+ 			  const struct ib_cm_event *ib_event)
  {
  	struct rdma_id_private *id_priv = cm_id->context;
 -	struct rdma_cm_event event;
 +	struct rdma_cm_event event = {};
  	int ret = 0;
  
  	mutex_lock(&id_priv->handler_mutex);
@@@ -1992,10 -1996,11 +1997,11 @@@ static int cma_check_req_qp_type(const 
  		(!id->qp_type));
  }
  
- static int cma_req_handler(struct ib_cm_id *cm_id, struct ib_cm_event *ib_event)
+ static int cma_req_handler(struct ib_cm_id *cm_id,
+ 			   const struct ib_cm_event *ib_event)
  {
  	struct rdma_id_private *listen_id, *conn_id = NULL;
 -	struct rdma_cm_event event;
 +	struct rdma_cm_event event = {};
  	struct net_device *net_dev;
  	u8 offset;
  	int ret;
@@@ -3476,11 -3485,12 +3482,17 @@@ static int cma_format_hdr(void *hdr, st
  }
  
  static int cma_sidr_rep_handler(struct ib_cm_id *cm_id,
- 				struct ib_cm_event *ib_event)
+ 				const struct ib_cm_event *ib_event)
  {
  	struct rdma_id_private *id_priv = cm_id->context;
++<<<<<<< HEAD
 +	struct rdma_cm_event event = {};
 +	struct ib_cm_sidr_rep_event_param *rep = &ib_event->param.sidr_rep_rcvd;
++=======
+ 	struct rdma_cm_event event;
+ 	const struct ib_cm_sidr_rep_event_param *rep =
+ 				&ib_event->param.sidr_rep_rcvd;
++>>>>>>> e7ff98aefc9e (RDMA/cma: Constify path record, ib_cm_event, listen_id pointers)
  	int ret = 0;
  
  	mutex_lock(&id_priv->handler_mutex);
diff --cc drivers/infiniband/ulp/ipoib/ipoib_cm.c
index 37c418b7be3d,518313a1b0c9..000000000000
--- a/drivers/infiniband/ulp/ipoib/ipoib_cm.c
+++ b/drivers/infiniband/ulp/ipoib/ipoib_cm.c
@@@ -418,8 -418,9 +418,14 @@@ err_free_1
  }
  
  static int ipoib_cm_send_rep(struct net_device *dev, struct ib_cm_id *cm_id,
++<<<<<<< HEAD
 +			     struct ib_qp *qp, struct ib_cm_req_event_param *req,
 +			     unsigned psn)
++=======
+ 			     struct ib_qp *qp,
+ 			     const struct ib_cm_req_event_param *req,
+ 			     unsigned int psn)
++>>>>>>> e7ff98aefc9e (RDMA/cma: Constify path record, ib_cm_event, listen_id pointers)
  {
  	struct ipoib_dev_priv *priv = ipoib_priv(dev);
  	struct ipoib_cm_data data = {};
* Unmerged path drivers/infiniband/core/cma.c
* Unmerged path drivers/infiniband/ulp/ipoib/ipoib_cm.c
diff --git a/drivers/infiniband/ulp/srp/ib_srp.c b/drivers/infiniband/ulp/srp/ib_srp.c
index 78dc206f1ae8..6eaa6501b41a 100644
--- a/drivers/infiniband/ulp/srp/ib_srp.c
+++ b/drivers/infiniband/ulp/srp/ib_srp.c
@@ -145,7 +145,8 @@ static void srp_remove_one(struct ib_device *device, void *client_data);
 static void srp_recv_done(struct ib_cq *cq, struct ib_wc *wc);
 static void srp_handle_qp_err(struct ib_cq *cq, struct ib_wc *wc,
 		const char *opname);
-static int srp_ib_cm_handler(struct ib_cm_id *cm_id, struct ib_cm_event *event);
+static int srp_ib_cm_handler(struct ib_cm_id *cm_id,
+			     const struct ib_cm_event *event);
 static int srp_rdma_cm_handler(struct rdma_cm_id *cm_id,
 			       struct rdma_cm_event *event);
 
@@ -2547,7 +2548,7 @@ static void srp_cm_rep_handler(struct ib_cm_id *cm_id,
 }
 
 static void srp_ib_cm_rej_handler(struct ib_cm_id *cm_id,
-				  struct ib_cm_event *event,
+				  const struct ib_cm_event *event,
 				  struct srp_rdma_ch *ch)
 {
 	struct srp_target_port *target = ch->target;
@@ -2632,7 +2633,8 @@ static void srp_ib_cm_rej_handler(struct ib_cm_id *cm_id,
 	}
 }
 
-static int srp_ib_cm_handler(struct ib_cm_id *cm_id, struct ib_cm_event *event)
+static int srp_ib_cm_handler(struct ib_cm_id *cm_id,
+			     const struct ib_cm_event *event)
 {
 	struct srp_rdma_ch *ch = cm_id->context;
 	struct srp_target_port *target = ch->target;
diff --git a/drivers/infiniband/ulp/srpt/ib_srpt.c b/drivers/infiniband/ulp/srpt/ib_srpt.c
index b1158d657cd6..36d20f9f593d 100644
--- a/drivers/infiniband/ulp/srpt/ib_srpt.c
+++ b/drivers/infiniband/ulp/srpt/ib_srpt.c
@@ -2402,7 +2402,7 @@ static int srpt_cm_req_recv(struct srpt_device *const sdev,
 }
 
 static int srpt_ib_cm_req_recv(struct ib_cm_id *cm_id,
-			       struct ib_cm_req_event_param *param,
+			       const struct ib_cm_req_event_param *param,
 			       void *private_data)
 {
 	char sguid[40];
@@ -2514,7 +2514,8 @@ static void srpt_cm_rtu_recv(struct srpt_rdma_ch *ch)
  * a non-zero value in any other case will trigger a race with the
  * ib_destroy_cm_id() call in srpt_release_channel().
  */
-static int srpt_cm_handler(struct ib_cm_id *cm_id, struct ib_cm_event *event)
+static int srpt_cm_handler(struct ib_cm_id *cm_id,
+			   const struct ib_cm_event *event)
 {
 	struct srpt_rdma_ch *ch = cm_id->context;
 	int ret;
diff --git a/include/rdma/ib_cm.h b/include/rdma/ib_cm.h
index 568708a87239..c10f4b5ea8ab 100644
--- a/include/rdma/ib_cm.h
+++ b/include/rdma/ib_cm.h
@@ -311,7 +311,7 @@ struct ib_cm_event {
  * destroy the @cm_id after the callback completes.
  */
 typedef int (*ib_cm_handler)(struct ib_cm_id *cm_id,
-			     struct ib_cm_event *event);
+			     const struct ib_cm_event *event);
 
 struct ib_cm_id {
 	ib_cm_handler		cm_handler;
