IB/mlx5: Fix bad flow upon DEVX mkey creation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yishai Hadas <yishaih@mellanox.com>
commit 0da4d48d99dfdb2a69172079f6a56e22689d16ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/0da4d48d.failed

Fix bad flow upon DEVX mkey creation to prevent deleting the indirect mkey
from the radix tree in case there was a previous failure to insert it.

Fixes: 534fd7aac56a ("IB/mlx5: Manage indirection mkey upon DEVX flow for ODP")
	Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
	Reviewed-by: Artemy Kovalyov <artemyko@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 0da4d48d99dfdb2a69172079f6a56e22689d16ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/devx.c
diff --cc drivers/infiniband/hw/mlx5/devx.c
index c7f8859c08ee,8e6d23d6859f..000000000000
--- a/drivers/infiniband/hw/mlx5/devx.c
+++ b/drivers/infiniband/hw/mlx5/devx.c
@@@ -395,34 -1175,45 +395,46 @@@ static int UVERBS_HANDLER(MLX5_IB_METHO
  	if (!obj)
  		return -ENOMEM;
  
 -	MLX5_SET(general_obj_in_cmd_hdr, cmd_in, uid, uid);
 -	if (opcode == MLX5_CMD_OP_CREATE_MKEY) {
 -		err = devx_handle_mkey_create(dev, obj, cmd_in, cmd_in_len);
 -		if (err)
 -			goto obj_free;
 -	} else {
 -		devx_set_umem_valid(cmd_in);
 +	cmd_out = kvzalloc(cmd_out_len, GFP_KERNEL);
 +	if (!cmd_out) {
 +		err = -ENOMEM;
 +		goto obj_free;
  	}
  
 +	MLX5_SET(general_obj_in_cmd_hdr, cmd_in, uid, c->devx_uid);
  	err = mlx5_cmd_exec(dev->mdev, cmd_in,
 -			    cmd_in_len,
 +			    uverbs_attr_get_len(attrs, MLX5_IB_ATTR_DEVX_OBJ_CREATE_CMD_IN),
  			    cmd_out, cmd_out_len);
  	if (err)
 -		goto obj_free;
 +		goto cmd_free;
  
 +	uobj = uverbs_attr_get_uobject(attrs, MLX5_IB_ATTR_DEVX_OBJ_CREATE_HANDLE);
  	uobj->object = obj;
  	obj->mdev = dev->mdev;
 -	devx_obj_build_destroy_cmd(cmd_in, cmd_out, obj->dinbox, &obj->dinlen,
 -				   &obj_id);
 +	devx_obj_build_destroy_cmd(cmd_in, cmd_out, obj->dinbox, &obj->dinlen, &obj->obj_id);
  	WARN_ON(obj->dinlen > MLX5_MAX_DESTROY_INBOX_SIZE_DW * sizeof(u32));
  
 -	if (obj->flags & DEVX_OBJ_FLAGS_INDIRECT_MKEY) {
 -		err = devx_handle_mkey_indirect(obj, dev, cmd_in, cmd_out);
 -		if (err)
 -			goto obj_destroy;
 -	}
 -
  	err = uverbs_copy_to(attrs, MLX5_IB_ATTR_DEVX_OBJ_CREATE_CMD_OUT, cmd_out, cmd_out_len);
  	if (err)
++<<<<<<< HEAD
 +		goto cmd_free;
++=======
+ 		goto err_copy;
++>>>>>>> 0da4d48d99df (IB/mlx5: Fix bad flow upon DEVX mkey creation)
  
 -	obj->obj_id = get_enc_obj_id(opcode, obj_id);
 +	kvfree(cmd_out);
  	return 0;
  
++<<<<<<< HEAD
 +cmd_free:
 +	kvfree(cmd_out);
++=======
+ err_copy:
+ 	if (obj->flags & DEVX_OBJ_FLAGS_INDIRECT_MKEY)
+ 		devx_cleanup_mkey(obj);
+ obj_destroy:
+ 	mlx5_cmd_exec(obj->mdev, obj->dinbox, obj->dinlen, out, sizeof(out));
++>>>>>>> 0da4d48d99df (IB/mlx5: Fix bad flow upon DEVX mkey creation)
  obj_free:
  	kfree(obj);
  	return err;
* Unmerged path drivers/infiniband/hw/mlx5/devx.c
