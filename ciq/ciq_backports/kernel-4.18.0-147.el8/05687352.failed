bpf: Refactor and bug fix in test_func_type in test_btf.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 05687352c600930058ca4c68048302502e07a572
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/05687352.failed

1) bpf_load_program_xattr() is absorbing the EBIG error
   which makes testing this case impossible.  It is replaced
   with a direct syscall(__NR_bpf, BPF_PROG_LOAD,...).
2) The test_func_type() is renamed to test_info_raw() to
   prepare for the new line_info test in the next patch.
3) The bpf_obj_get_info_by_fd() testing for func_info
   is refactored to test_get_finfo().  A new
   test_get_linfo() will be added in the next patch
   for testing line_info purpose.
4) The test->func_info_cnt is checked instead of
   a static value "2".
5) Remove unnecessary "\n" in error message.
6) Adding back info_raw_test_num to the cmd arg such
   that a specific test case can be tested, like
   all other existing tests.

7) Fix a bug in handling expected_prog_load_failure.
   A test could pass even if prog_fd != -1 while
   expected_prog_load_failure is true.
8) The min rec_size check should be < 8 instead of < 4.

Fixes: 4798c4ba3ba9 ("tools/bpf: extends test_btf to test load/retrieve func_type info")
	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 05687352c600930058ca4c68048302502e07a572)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_btf.c
diff --cc tools/testing/selftests/bpf/test_btf.c
index 42aad55cbe88,8d5777c89620..000000000000
--- a/tools/testing/selftests/bpf/test_btf.c
+++ b/tools/testing/selftests/bpf/test_btf.c
@@@ -3613,69 -3334,17 +3695,56 @@@ static int do_test_info_raw(unsigned in
  		goto done;
  	}
  
- 	/* get necessary lens */
- 	info_len = sizeof(struct bpf_prog_info);
- 	err = bpf_obj_get_info_by_fd(prog_fd, &info, &info_len);
- 	if (CHECK(err == -1, "invalid get info (1st) errno:%d", errno)) {
- 		fprintf(stderr, "%s\n", btf_log_buf);
- 		err = -1;
+ 	if (prog_fd == -1)
  		goto done;
- 	}
- 	if (CHECK(info.func_info_cnt != 2,
- 		  "incorrect info.func_info_cnt (1st) %d\n",
- 		  info.func_info_cnt)) {
- 		err = -1;
- 		goto done;
- 	}
- 	rec_size = info.func_info_rec_size;
- 	if (CHECK(rec_size < 4,
- 		  "incorrect info.func_info_rec_size (1st) %d\n", rec_size)) {
- 		err = -1;
- 		goto done;
- 	}
  
- 	func_info = malloc(info.func_info_cnt * rec_size);
- 	if (CHECK(!func_info, "out of memory")) {
- 		err = -1;
+ 	err = test_get_finfo(test, prog_fd);
+ 	if (err)
  		goto done;
++<<<<<<< HEAD
 +	}
 +
 +	/* reset info to only retrieve func_info related data */
 +	memset(&info, 0, sizeof(info));
 +	info.func_info_cnt = 2;
 +	info.func_info_rec_size = rec_size;
 +	info.func_info = ptr_to_u64(func_info);
 +	err = bpf_obj_get_info_by_fd(prog_fd, &info, &info_len);
 +	if (CHECK(err == -1, "invalid get info (2nd) errno:%d", errno)) {
 +		fprintf(stderr, "%s\n", btf_log_buf);
 +		err = -1;
 +		goto done;
 +	}
 +	if (CHECK(info.func_info_cnt != 2,
 +		  "incorrect info.func_info_cnt (2nd) %d\n",
 +		  info.func_info_cnt)) {
 +		err = -1;
 +		goto done;
 +	}
 +	if (CHECK(info.func_info_rec_size != rec_size,
 +		  "incorrect info.func_info_rec_size (2nd) %d\n",
 +		  info.func_info_rec_size)) {
 +		err = -1;
 +		goto done;
 +	}
 +
 +	finfo = func_info;
 +	for (i = 0; i < 2; i++) {
 +		if (CHECK(finfo->type_id != test->func_info[i][1],
 +			  "incorrect func_type %u expected %u",
 +			  finfo->type_id, test->func_info[i][1])) {
 +			err = -1;
 +			goto done;
 +		}
 +		finfo = (void *)finfo + rec_size;
 +	}
++=======
++>>>>>>> 05687352c600 (bpf: Refactor and bug fix in test_func_type in test_btf.c)
  
  done:
+ 	if (!err)
+ 		fprintf(stderr, "OK");
+ 
  	if (*btf_log_buf && (err || args.always_log))
  		fprintf(stderr, "\n%s", btf_log_buf);
  
* Unmerged path tools/testing/selftests/bpf/test_btf.c
