drm/amd/display: Increase Backlight Gain Step Size

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Eryk Brol <eryk.brol@amd.com>
commit e25228b02e4833e5b0fdd262801a2ae6cc72b39d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/e25228b0.failed

[Why]
Some backlight tests fail due to backlight settling
taking too long. This happens because the step
size used to change backlight levels is too small.

[How]
1. Change the size of the backlight gain step size
2. Change how DMCU firmware gets the step size value
   so that it is passed in by driver during DMCU initn

	Signed-off-by: Eryk Brol <eryk.brol@amd.com>
	Reviewed-by: Jun Lei <Jun.Lei@amd.com>
	Acked-by: Leo Li <sunpeng.li@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit e25228b02e4833e5b0fdd262801a2ae6cc72b39d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.c
diff --cc drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.c
index a576b8bbb3cd,c2bc36f9f6c7..000000000000
--- a/drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.c
+++ b/drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.c
@@@ -391,51 -367,69 +391,59 @@@ static void dcn10_get_dmcu_version(stru
  static bool dcn10_dmcu_init(struct dmcu *dmcu)
  {
  	struct dce_dmcu *dmcu_dce = TO_DCE_DMCU(dmcu);
 -	const struct dc_config *config = &dmcu->ctx->dc->config;
 -	bool status = false;
  
 -	/*  Definition of DC_DMCU_SCRATCH
 -	 *  0 : firmare not loaded
 -	 *  1 : PSP load DMCU FW but not initialized
 -	 *  2 : Firmware already initialized
 -	 */
 -	dmcu->dmcu_state = REG_READ(DC_DMCU_SCRATCH);
 +	/* DMCU FW should populate the scratch register if running */
 +	if (REG_READ(DC_DMCU_SCRATCH) == 0)
 +		return false;
  
 -	switch (dmcu->dmcu_state) {
 -	case DMCU_UNLOADED:
 -		status = false;
 -		break;
 -	case DMCU_LOADED_UNINITIALIZED:
 -		/* Wait until microcontroller is ready to process interrupt */
 -		REG_WAIT(MASTER_COMM_CNTL_REG, MASTER_COMM_INTERRUPT, 0, 100, 800);
 +	/* Check state is uninitialized */
 +	dcn10_get_dmcu_state(dmcu);
 +
 +	/* If microcontroller is already initialized, do nothing */
 +	if (dmcu->dmcu_state == DMCU_RUNNING)
 +		return true;
 +
++<<<<<<< HEAD
 +	/* Retrieve and cache the DMCU firmware version. */
 +	dcn10_get_dmcu_version(dmcu);
 +
 +	/* Check interface version to confirm firmware is loaded and running */
 +	if (dmcu->dmcu_version.interface_version == 0)
 +		return false;
  
 -		/* Set initialized ramping boundary value */
 -		REG_WRITE(MASTER_COMM_DATA_REG1, 0xFFFF);
 +	/* Wait until microcontroller is ready to process interrupt */
 +	REG_WAIT(MASTER_COMM_CNTL_REG, MASTER_COMM_INTERRUPT, 0, 100, 800);
 +
 +	/* Set initialized ramping boundary value */
 +	REG_WRITE(MASTER_COMM_DATA_REG1, 0xFFFF);
  
 +	/* Set command to initialize microcontroller */
 +	REG_UPDATE(MASTER_COMM_CMD_REG, MASTER_COMM_CMD_REG_BYTE0,
++=======
+ 		/* Set backlight ramping stepsize */
+ 		REG_WRITE(MASTER_COMM_DATA_REG2, abm_gain_stepsize);
+ 
+ 		/* Set command to initialize microcontroller */
+ 		REG_UPDATE(MASTER_COMM_CMD_REG, MASTER_COMM_CMD_REG_BYTE0,
++>>>>>>> e25228b02e48 (drm/amd/display: Increase Backlight Gain Step Size)
  			MCP_INIT_DMCU);
  
 -		/* Notify microcontroller of new command */
 -		REG_UPDATE(MASTER_COMM_CNTL_REG, MASTER_COMM_INTERRUPT, 1);
 -
 -		/* Ensure command has been executed before continuing */
 -		REG_WAIT(MASTER_COMM_CNTL_REG, MASTER_COMM_INTERRUPT, 0, 100, 800);
 -
 -		// Check state is initialized
 -		dmcu->dmcu_state = REG_READ(DC_DMCU_SCRATCH);
 +	/* Notify microcontroller of new command */
 +	REG_UPDATE(MASTER_COMM_CNTL_REG, MASTER_COMM_INTERRUPT, 1);
  
 -		// If microcontroller is not in running state, fail
 -		if (dmcu->dmcu_state == DMCU_RUNNING) {
 -			/* Retrieve and cache the DMCU firmware version. */
 -			dcn10_get_dmcu_version(dmcu);
 +	/* Ensure command has been executed before continuing */
 +	REG_WAIT(MASTER_COMM_CNTL_REG, MASTER_COMM_INTERRUPT, 0, 100, 800);
  
 -			/* Initialize DMCU to use fractional PWM or not */
 -			dcn10_dmcu_enable_fractional_pwm(dmcu,
 -				(config->disable_fractional_pwm == false) ? 1 : 0);
 -			status = true;
 -		} else {
 -			status = false;
 -		}
 +	// Check state is initialized
 +	dcn10_get_dmcu_state(dmcu);
  
 -		break;
 -	case DMCU_RUNNING:
 -		status = true;
 -		break;
 -	default:
 -		status = false;
 -		break;
 -	}
 +	// If microcontroller is not in running state, fail
 +	if (dmcu->dmcu_state != DMCU_RUNNING)
 +		return false;
  
 -	return status;
 +	return true;
  }
  
 -
  static bool dcn10_dmcu_load_iram(struct dmcu *dmcu,
  		unsigned int start_offset,
  		const char *src,
* Unmerged path drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.c
diff --git a/drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.h b/drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.h
index c24c0e5ea44e..249a3c23b607 100644
--- a/drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.h
+++ b/drivers/gpu/drm/amd/display/dc/dce/dce_dmcu.h
@@ -263,4 +263,6 @@ struct dmcu *dcn10_dmcu_create(
 
 void dce_dmcu_destroy(struct dmcu **dmcu);
 
+static const uint32_t abm_gain_stepsize = 0x0060;
+
 #endif /* _DCE_ABM_H_ */
