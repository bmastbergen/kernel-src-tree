IB/{hfi1,qib}: Cleanup open coded sge sizing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Michael J. Ruhl <michael.j.ruhl@intel.com>
commit 87fc34b575fdb90994c6063541d79cd18b31b14d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/87fc34b5.failed

Sge sizing is done in several places using an open coded method.

This can cause maintenance issues.  The open coded method is
encapsulated in a helper routine.  The helper was introduced with
commit:

1198fcea8a78 ("IB/hfi1, rdmavt: Move SGE state helper routines into
rdmavt")

Update all call sites that have the open coded path with the helper
routine.

	Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
	Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
	Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 87fc34b575fdb90994c6063541d79cd18b31b14d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/qib/qib_ud.c
#	drivers/infiniband/hw/qib/qib_verbs.c
diff --cc drivers/infiniband/hw/qib/qib_ud.c
index bce2b5cd3c7b,6668bbf4e96d..000000000000
--- a/drivers/infiniband/hw/qib/qib_ud.c
+++ b/drivers/infiniband/hw/qib/qib_ud.c
@@@ -172,14 -172,9 +172,18 @@@ static void qib_ud_loopback(struct rvt_
  	ssge.num_sge = swqe->wr.num_sge;
  	sge = &ssge.sge;
  	while (length) {
- 		u32 len = sge->length;
+ 		u32 len = rvt_get_sge_length(sge, length);
  
++<<<<<<< HEAD
 +		if (len > length)
 +			len = length;
 +		if (len > sge->sge_length)
 +			len = sge->sge_length;
 +		BUG_ON(len == 0);
 +		qib_copy_sge(&qp->r_sge, sge->vaddr, len, 1);
++=======
+ 		rvt_copy_sge(qp, &qp->r_sge, sge->vaddr, len, true, false);
++>>>>>>> 87fc34b575fd (IB/{hfi1,qib}: Cleanup open coded sge sizing)
  		sge->vaddr += len;
  		sge->length -= len;
  		sge->sge_length -= len;
diff --cc drivers/infiniband/hw/qib/qib_verbs.c
index d362f94094d5,5ff32d32c61c..000000000000
--- a/drivers/infiniband/hw/qib/qib_verbs.c
+++ b/drivers/infiniband/hw/qib/qib_verbs.c
@@@ -165,13 -144,8 +165,16 @@@ static u32 qib_count_sge(struct rvt_sge
  	u32 ndesc = 1;  /* count the header */
  
  	while (length) {
- 		u32 len = sge.length;
+ 		u32 len = rvt_get_sge_length(&sge, length);
  
++<<<<<<< HEAD
 +		if (len > length)
 +			len = length;
 +		if (len > sge.sge_length)
 +			len = sge.sge_length;
 +		BUG_ON(len == 0);
++=======
++>>>>>>> 87fc34b575fd (IB/{hfi1,qib}: Cleanup open coded sge sizing)
  		if (((long) sge.vaddr & (sizeof(u32) - 1)) ||
  		    (len != length && (len & (sizeof(u32) - 1)))) {
  			ndesc = 0;
@@@ -208,13 -182,8 +211,16 @@@ static void qib_copy_from_sge(void *dat
  	struct rvt_sge *sge = &ss->sge;
  
  	while (length) {
- 		u32 len = sge->length;
+ 		u32 len = rvt_get_sge_length(sge, length);
  
++<<<<<<< HEAD
 +		if (len > length)
 +			len = length;
 +		if (len > sge->sge_length)
 +			len = sge->sge_length;
 +		BUG_ON(len == 0);
++=======
++>>>>>>> 87fc34b575fd (IB/{hfi1,qib}: Cleanup open coded sge sizing)
  		memcpy(data, sge->vaddr, len);
  		sge->vaddr += len;
  		sge->length -= len;
@@@ -463,14 -432,9 +469,17 @@@ static void copy_io(u32 __iomem *piobuf
  	u32 last;
  
  	while (1) {
- 		u32 len = ss->sge.length;
+ 		u32 len = rvt_get_sge_length(&ss->sge, length);
  		u32 off;
  
++<<<<<<< HEAD
 +		if (len > length)
 +			len = length;
 +		if (len > ss->sge.sge_length)
 +			len = ss->sge.sge_length;
 +		BUG_ON(len == 0);
++=======
++>>>>>>> 87fc34b575fd (IB/{hfi1,qib}: Cleanup open coded sge sizing)
  		/* If the source address is not aligned, try to align it. */
  		off = (unsigned long)ss->sge.vaddr & (sizeof(u32) - 1);
  		if (off) {
diff --git a/drivers/infiniband/hw/hfi1/verbs.c b/drivers/infiniband/hw/hfi1/verbs.c
index 1a8add5b44c9..87d0a23de521 100644
--- a/drivers/infiniband/hw/hfi1/verbs.c
+++ b/drivers/infiniband/hw/hfi1/verbs.c
@@ -774,11 +774,7 @@ static noinline int build_verbs_ulp_payload(
 	int ret = 0;
 
 	while (length) {
-		len = ss->sge.length;
-		if (len > length)
-			len = length;
-		if (len > ss->sge.sge_length)
-			len = ss->sge.sge_length;
+		len = rvt_get_sge_length(&ss->sge, length);
 		WARN_ON_ONCE(len == 0);
 		ret = sdma_txadd_kvaddr(
 			sde->dd,
@@ -1135,12 +1131,8 @@ int hfi1_verbs_send_pio(struct rvt_qp *qp, struct hfi1_pkt_state *ps,
 		if (ss) {
 			while (len) {
 				void *addr = ss->sge.vaddr;
-				u32 slen = ss->sge.length;
+				u32 slen = rvt_get_sge_length(&ss->sge, len);
 
-				if (slen > len)
-					slen = len;
-				if (slen > ss->sge.sge_length)
-					slen = ss->sge.sge_length;
 				rvt_update_sge(ss, slen, false);
 				seg_pio_copy_mid(pbuf, addr, slen);
 				len -= slen;
* Unmerged path drivers/infiniband/hw/qib/qib_ud.c
* Unmerged path drivers/infiniband/hw/qib/qib_verbs.c
