kvm: selftests: dirty_log_test: reset guest test phys offset

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Andrew Jones <drjones@redhat.com>
commit fd3f6f813976620553e951eb10d3a11b673a8131
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/fd3f6f81.failed

We need to reset the offset for each mode as it will change
depending on the number of guest physical address bits.

	Signed-off-by: Andrew Jones <drjones@redhat.com>
	Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
(cherry picked from commit fd3f6f813976620553e951eb10d3a11b673a8131)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/dirty_log_test.c
diff --cc tools/testing/selftests/kvm/dirty_log_test.c
index a2e86fdacc19,44c04f26b86b..000000000000
--- a/tools/testing/selftests/kvm/dirty_log_test.c
+++ b/tools/testing/selftests/kvm/dirty_log_test.c
@@@ -225,7 -231,7 +225,11 @@@ static struct kvm_vm *create_vm(enum vm
  }
  
  static void run_test(enum vm_guest_mode mode, unsigned long iterations,
++<<<<<<< HEAD
 +		     unsigned long interval, bool top_offset)
++=======
+ 		     unsigned long interval, uint64_t phys_offset)
++>>>>>>> fd3f6f813976 (kvm: selftests: dirty_log_test: reset guest test phys offset)
  {
  	unsigned int guest_pa_bits, guest_page_shift;
  	pthread_t vcpu_thread;
@@@ -273,9 -279,11 +277,15 @@@
  	host_num_pages = (guest_num_pages * guest_page_size) / host_page_size +
  			 !!((guest_num_pages * guest_page_size) % host_page_size);
  
++<<<<<<< HEAD
 +	if (top_offset) {
++=======
+ 	if (!phys_offset) {
++>>>>>>> fd3f6f813976 (kvm: selftests: dirty_log_test: reset guest test phys offset)
  		guest_test_phys_mem = (max_gfn - guest_num_pages) * guest_page_size;
  		guest_test_phys_mem &= ~(host_page_size - 1);
+ 	} else {
+ 		guest_test_phys_mem = phys_offset;
  	}
  
  	DEBUG("guest physical test memory offset: 0x%lx\n", guest_test_phys_mem);
@@@ -398,7 -416,7 +408,11 @@@ int main(int argc, char *argv[]
  	unsigned long iterations = TEST_HOST_LOOP_N;
  	unsigned long interval = TEST_HOST_LOOP_INTERVAL;
  	bool mode_selected = false;
++<<<<<<< HEAD
 +	bool top_offset = false;
++=======
+ 	uint64_t phys_offset = 0;
++>>>>>>> fd3f6f813976 (kvm: selftests: dirty_log_test: reset guest test phys offset)
  	unsigned int mode;
  	int opt, i;
  
@@@ -410,11 -435,8 +424,16 @@@
  		case 'I':
  			interval = strtol(optarg, NULL, 10);
  			break;
++<<<<<<< HEAD
 +		case 'o':
 +			guest_test_phys_mem = strtoull(optarg, NULL, 0);
++=======
+ 		case 'p':
+ 			phys_offset = strtoull(optarg, NULL, 0);
++>>>>>>> fd3f6f813976 (kvm: selftests: dirty_log_test: reset guest test phys offset)
 +			break;
 +		case 't':
 +			top_offset = true;
  			break;
  		case 'm':
  			if (!mode_selected) {
@@@ -451,7 -471,7 +470,11 @@@
  			    "Guest mode ID %d (%s) not supported.",
  			    vm_guest_modes[i].mode,
  			    vm_guest_mode_string(vm_guest_modes[i].mode));
++<<<<<<< HEAD
 +		run_test(vm_guest_modes[i].mode, iterations, interval, top_offset);
++=======
+ 		run_test(vm_guest_modes[i].mode, iterations, interval, phys_offset);
++>>>>>>> fd3f6f813976 (kvm: selftests: dirty_log_test: reset guest test phys offset)
  	}
  
  	return 0;
* Unmerged path tools/testing/selftests/kvm/dirty_log_test.c
