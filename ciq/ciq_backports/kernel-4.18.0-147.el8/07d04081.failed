tracing: Avoid calling cc-option -mrecord-mcount for every Makefile

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Vasily Gorbik <gor@linux.ibm.com>
commit 07d0408120216b60625c9a5b8012d1c3a907984d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/07d04081.failed

Currently if CONFIG_FTRACE_MCOUNT_RECORD is enabled -mrecord-mcount
compiler flag support is tested for every Makefile.

Top 4 cc-option usages:
    511 -mrecord-mcount
     11  -fno-stack-protector
      9 -Wno-override-init
      2 -fsched-pressure

To address that move cc-option from scripts/Makefile.build to top Makefile
and export CC_USING_RECORD_MCOUNT to be used in original place.

While doing that also add -mrecord-mcount to CC_FLAGS_FTRACE (if gcc
actually supports it).

Link: http://lkml.kernel.org/r/patch-2.thread-aa7b8d.git-de935bace15a.your-ad-here.call-01533557518-ext-9465@work.hours

	Acked-by: Andi Kleen <ak@linux.intel.com>
	Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
	Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
(cherry picked from commit 07d0408120216b60625c9a5b8012d1c3a907984d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Makefile
diff --cc Makefile
index 725a44a958d9,2c92ebf59a34..000000000000
--- a/Makefile
+++ b/Makefile
@@@ -762,12 -743,22 +762,28 @@@ ifdef CONFIG_FUNCTION_TRACE
  ifndef CC_FLAGS_FTRACE
  CC_FLAGS_FTRACE := -pg
  endif
++<<<<<<< HEAD
++=======
+ ifdef CONFIG_FTRACE_MCOUNT_RECORD
+   # gcc 5 supports generating the mcount tables directly
+   ifeq ($(call cc-option-yn,-mrecord-mcount),y)
+     CC_FLAGS_FTRACE	+= -mrecord-mcount
+     export CC_USING_RECORD_MCOUNT := 1
+   endif
+ endif
+ ifdef CONFIG_HAVE_FENTRY
+   ifeq ($(call cc-option-yn, -mfentry),y)
+     CC_FLAGS_FTRACE	+= -mfentry
+     CC_FLAGS_USING	+= -DCC_USING_FENTRY
+   endif
+ endif
++>>>>>>> 07d040812021 (tracing: Avoid calling cc-option -mrecord-mcount for every Makefile)
  export CC_FLAGS_FTRACE
 -KBUILD_CFLAGS	+= $(CC_FLAGS_FTRACE) $(CC_FLAGS_USING)
 -KBUILD_AFLAGS	+= $(CC_FLAGS_USING)
 +ifdef CONFIG_HAVE_FENTRY
 +CC_USING_FENTRY	:= $(call cc-option, -mfentry -DCC_USING_FENTRY)
 +endif
 +KBUILD_CFLAGS	+= $(CC_FLAGS_FTRACE) $(CC_USING_FENTRY)
 +KBUILD_AFLAGS	+= $(CC_USING_FENTRY)
  ifdef CONFIG_DYNAMIC_FTRACE
  	ifdef CONFIG_HAVE_C_RECORDMCOUNT
  		BUILD_C_RECORDMCOUNT := y
* Unmerged path Makefile
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index 96e86e0b533c..723ea41d2cac 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -206,11 +206,8 @@ cmd_modversions_c =								\
 endif
 
 ifdef CONFIG_FTRACE_MCOUNT_RECORD
-# gcc 5 supports generating the mcount tables directly
-ifneq ($(call cc-option,-mrecord-mcount,y),y)
-KBUILD_CFLAGS += -mrecord-mcount
-else
-# else do it all manually
+ifndef CC_USING_RECORD_MCOUNT
+# compiler will not generate __mcount_loc use recordmcount or recordmcount.pl
 ifdef BUILD_C_RECORDMCOUNT
 ifeq ("$(origin RECORDMCOUNT_WARN)", "command line")
   RECORDMCOUNT_FLAGS = -w
@@ -239,7 +236,7 @@ cmd_record_mcount =						\
 	     "$(CC_FLAGS_FTRACE)" ]; then			\
 		$(sub_cmd_record_mcount)			\
 	fi;
-endif # -record-mcount
+endif # CC_USING_RECORD_MCOUNT
 endif # CONFIG_FTRACE_MCOUNT_RECORD
 
 ifdef CONFIG_STACK_VALIDATION
