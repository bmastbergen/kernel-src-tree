drm/i915: Make MG PHY macros semantically consistent

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Aditya Swarup <aditya.swarup@intel.com>
commit 58106b7d816e1ddd7828df4f48a3ffc3df12d615
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/58106b7d.failed

Organize MG PHY macro definitions semantically based on dword, lane and
port (in this order).

	Cc: Clint Taylor <clinton.a.taylor@intel.com>
	Cc: Imre Deak <imre.deak@intel.com>
	Cc: Jani Nikula <jani.nikula@linux.intel.com>
	Signed-off-by: Aditya Swarup <aditya.swarup@intel.com>
	Reviewed-by: Manasi navare <manasi.d.navare@intel.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20190128220012.13122-3-aditya.swarup@intel.com
(cherry picked from commit 58106b7d816e1ddd7828df4f48a3ffc3df12d615)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_reg.h
#	drivers/gpu/drm/i915/intel_ddi.c
diff --cc drivers/gpu/drm/i915/i915_reg.h
index a78c6ef1f608,9b4c5a6d0d44..000000000000
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@@ -1827,121 -1925,200 +1827,318 @@@ enum i915_power_well_id 
  #define   N_SCALAR(x)			((x) << 24)
  #define   N_SCALAR_MASK			(0x7F << 24)
  
++<<<<<<< HEAD
 +#define _ICL_MG_PHY_PORT_LN(port, ln, ln0p1, ln0p2, ln1p1) \
 +	_MMIO(_PORT((port) - PORT_C, ln0p1, ln0p2) + (ln) * ((ln1p1) - (ln0p1)))
 +
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN0_PORT1		0x16812C
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN1_PORT1		0x16852C
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN0_PORT2		0x16912C
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN1_PORT2		0x16952C
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN0_PORT3		0x16A12C
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN1_PORT3		0x16A52C
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN0_PORT4		0x16B12C
 +#define _ICL_MG_TX_LINK_PARAMS_TX1LN1_PORT4		0x16B52C
 +#define ICL_PORT_MG_TX1_LINK_PARAMS(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_LINK_PARAMS_TX1LN0_PORT1, \
 +				      _ICL_MG_TX_LINK_PARAMS_TX1LN0_PORT2, \
 +				      _ICL_MG_TX_LINK_PARAMS_TX1LN1_PORT1)
 +
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN0_PORT1		0x1680AC
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN1_PORT1		0x1684AC
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN0_PORT2		0x1690AC
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN1_PORT2		0x1694AC
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN0_PORT3		0x16A0AC
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN1_PORT3		0x16A4AC
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN0_PORT4		0x16B0AC
 +#define _ICL_MG_TX_LINK_PARAMS_TX2LN1_PORT4		0x16B4AC
 +#define ICL_PORT_MG_TX2_LINK_PARAMS(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_LINK_PARAMS_TX2LN0_PORT1, \
 +				      _ICL_MG_TX_LINK_PARAMS_TX2LN0_PORT2, \
 +				      _ICL_MG_TX_LINK_PARAMS_TX2LN1_PORT1)
 +#define CRI_USE_FS32			(1 << 5)
 +
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN0_PORT1		0x16814C
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN1_PORT1		0x16854C
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN0_PORT2		0x16914C
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN1_PORT2		0x16954C
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN0_PORT3		0x16A14C
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN1_PORT3		0x16A54C
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN0_PORT4		0x16B14C
 +#define _ICL_MG_TX_PISO_READLOAD_TX1LN1_PORT4		0x16B54C
 +#define ICL_PORT_MG_TX1_PISO_READLOAD(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_PISO_READLOAD_TX1LN0_PORT1, \
 +				      _ICL_MG_TX_PISO_READLOAD_TX1LN0_PORT2, \
 +				      _ICL_MG_TX_PISO_READLOAD_TX1LN1_PORT1)
 +
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN0_PORT1		0x1680CC
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN1_PORT1		0x1684CC
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN0_PORT2		0x1690CC
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN1_PORT2		0x1694CC
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN0_PORT3		0x16A0CC
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN1_PORT3		0x16A4CC
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN0_PORT4		0x16B0CC
 +#define _ICL_MG_TX_PISO_READLOAD_TX2LN1_PORT4		0x16B4CC
 +#define ICL_PORT_MG_TX2_PISO_READLOAD(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_PISO_READLOAD_TX2LN0_PORT1, \
 +				      _ICL_MG_TX_PISO_READLOAD_TX2LN0_PORT2, \
 +				      _ICL_MG_TX_PISO_READLOAD_TX2LN1_PORT1)
 +#define CRI_CALCINIT					(1 << 1)
 +
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN0_PORT1		0x168148
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN1_PORT1		0x168548
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN0_PORT2		0x169148
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN1_PORT2		0x169548
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN0_PORT3		0x16A148
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN1_PORT3		0x16A548
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN0_PORT4		0x16B148
 +#define _ICL_MG_TX_SWINGCTRL_TX1LN1_PORT4		0x16B548
 +#define ICL_PORT_MG_TX1_SWINGCTRL(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_SWINGCTRL_TX1LN0_PORT1, \
 +				      _ICL_MG_TX_SWINGCTRL_TX1LN0_PORT2, \
 +				      _ICL_MG_TX_SWINGCTRL_TX1LN1_PORT1)
 +
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN0_PORT1		0x1680C8
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN1_PORT1		0x1684C8
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN0_PORT2		0x1690C8
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN1_PORT2		0x1694C8
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN0_PORT3		0x16A0C8
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN1_PORT3		0x16A4C8
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN0_PORT4		0x16B0C8
 +#define _ICL_MG_TX_SWINGCTRL_TX2LN1_PORT4		0x16B4C8
 +#define ICL_PORT_MG_TX2_SWINGCTRL(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_SWINGCTRL_TX2LN0_PORT1, \
 +				      _ICL_MG_TX_SWINGCTRL_TX2LN0_PORT2, \
 +				      _ICL_MG_TX_SWINGCTRL_TX2LN1_PORT1)
 +#define CRI_TXDEEMPH_OVERRIDE_17_12(x)			((x) << 0)
 +#define CRI_TXDEEMPH_OVERRIDE_17_12_MASK		(0x3F << 0)
 +
 +#define _ICL_MG_TX_DRVCTRL_TX1LN0_PORT1			0x168144
 +#define _ICL_MG_TX_DRVCTRL_TX1LN1_PORT1			0x168544
 +#define _ICL_MG_TX_DRVCTRL_TX1LN0_PORT2			0x169144
 +#define _ICL_MG_TX_DRVCTRL_TX1LN1_PORT2			0x169544
 +#define _ICL_MG_TX_DRVCTRL_TX1LN0_PORT3			0x16A144
 +#define _ICL_MG_TX_DRVCTRL_TX1LN1_PORT3			0x16A544
 +#define _ICL_MG_TX_DRVCTRL_TX1LN0_PORT4			0x16B144
 +#define _ICL_MG_TX_DRVCTRL_TX1LN1_PORT4			0x16B544
 +#define ICL_PORT_MG_TX1_DRVCTRL(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_DRVCTRL_TX1LN0_PORT1, \
 +				      _ICL_MG_TX_DRVCTRL_TX1LN0_PORT2, \
 +				      _ICL_MG_TX_DRVCTRL_TX1LN1_PORT1)
 +
 +#define _ICL_MG_TX_DRVCTRL_TX2LN0_PORT1			0x1680C4
 +#define _ICL_MG_TX_DRVCTRL_TX2LN1_PORT1			0x1684C4
 +#define _ICL_MG_TX_DRVCTRL_TX2LN0_PORT2			0x1690C4
 +#define _ICL_MG_TX_DRVCTRL_TX2LN1_PORT2			0x1694C4
 +#define _ICL_MG_TX_DRVCTRL_TX2LN0_PORT3			0x16A0C4
 +#define _ICL_MG_TX_DRVCTRL_TX2LN1_PORT3			0x16A4C4
 +#define _ICL_MG_TX_DRVCTRL_TX2LN0_PORT4			0x16B0C4
 +#define _ICL_MG_TX_DRVCTRL_TX2LN1_PORT4			0x16B4C4
 +#define ICL_PORT_MG_TX2_DRVCTRL(port, ln) \
 +	_ICL_MG_PHY_PORT_LN(port, ln, _ICL_MG_TX_DRVCTRL_TX2LN0_PORT1, \
 +				      _ICL_MG_TX_DRVCTRL_TX2LN0_PORT2, \
 +				      _ICL_MG_TX_DRVCTRL_TX2LN1_PORT1)
 +#define CRI_TXDEEMPH_OVERRIDE_11_6(x)			((x) << 24)
 +#define CRI_TXDEEMPH_OVERRIDE_11_6_MASK			(0x3F << 24)
 +#define CRI_TXDEEMPH_OVERRIDE_EN			(1 << 22)
 +#define CRI_TXDEEMPH_OVERRIDE_5_0(x)			((x) << 16)
 +#define CRI_TXDEEMPH_OVERRIDE_5_0_MASK			(0x3F << 16)
++=======
+ #define MG_PHY_PORT_LN(ln, port, ln0p1, ln0p2, ln1p1) \
+ 	_MMIO(_PORT((port) - PORT_C, ln0p1, ln0p2) + (ln) * ((ln1p1) - (ln0p1)))
+ 
+ #define MG_TX_LINK_PARAMS_TX1LN0_PORT1		0x16812C
+ #define MG_TX_LINK_PARAMS_TX1LN1_PORT1		0x16852C
+ #define MG_TX_LINK_PARAMS_TX1LN0_PORT2		0x16912C
+ #define MG_TX_LINK_PARAMS_TX1LN1_PORT2		0x16952C
+ #define MG_TX_LINK_PARAMS_TX1LN0_PORT3		0x16A12C
+ #define MG_TX_LINK_PARAMS_TX1LN1_PORT3		0x16A52C
+ #define MG_TX_LINK_PARAMS_TX1LN0_PORT4		0x16B12C
+ #define MG_TX_LINK_PARAMS_TX1LN1_PORT4		0x16B52C
+ #define MG_TX1_LINK_PARAMS(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_LINK_PARAMS_TX1LN0_PORT1, \
+ 				 MG_TX_LINK_PARAMS_TX1LN0_PORT2, \
+ 				 MG_TX_LINK_PARAMS_TX1LN1_PORT1)
+ 
+ #define MG_TX_LINK_PARAMS_TX2LN0_PORT1		0x1680AC
+ #define MG_TX_LINK_PARAMS_TX2LN1_PORT1		0x1684AC
+ #define MG_TX_LINK_PARAMS_TX2LN0_PORT2		0x1690AC
+ #define MG_TX_LINK_PARAMS_TX2LN1_PORT2		0x1694AC
+ #define MG_TX_LINK_PARAMS_TX2LN0_PORT3		0x16A0AC
+ #define MG_TX_LINK_PARAMS_TX2LN1_PORT3		0x16A4AC
+ #define MG_TX_LINK_PARAMS_TX2LN0_PORT4		0x16B0AC
+ #define MG_TX_LINK_PARAMS_TX2LN1_PORT4		0x16B4AC
+ #define MG_TX2_LINK_PARAMS(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_LINK_PARAMS_TX2LN0_PORT1, \
+ 				 MG_TX_LINK_PARAMS_TX2LN0_PORT2, \
+ 				 MG_TX_LINK_PARAMS_TX2LN1_PORT1)
+ #define   CRI_USE_FS32			(1 << 5)
+ 
+ #define MG_TX_PISO_READLOAD_TX1LN0_PORT1		0x16814C
+ #define MG_TX_PISO_READLOAD_TX1LN1_PORT1		0x16854C
+ #define MG_TX_PISO_READLOAD_TX1LN0_PORT2		0x16914C
+ #define MG_TX_PISO_READLOAD_TX1LN1_PORT2		0x16954C
+ #define MG_TX_PISO_READLOAD_TX1LN0_PORT3		0x16A14C
+ #define MG_TX_PISO_READLOAD_TX1LN1_PORT3		0x16A54C
+ #define MG_TX_PISO_READLOAD_TX1LN0_PORT4		0x16B14C
+ #define MG_TX_PISO_READLOAD_TX1LN1_PORT4		0x16B54C
+ #define MG_TX1_PISO_READLOAD(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_PISO_READLOAD_TX1LN0_PORT1, \
+ 				 MG_TX_PISO_READLOAD_TX1LN0_PORT2, \
+ 				 MG_TX_PISO_READLOAD_TX1LN1_PORT1)
+ 
+ #define MG_TX_PISO_READLOAD_TX2LN0_PORT1		0x1680CC
+ #define MG_TX_PISO_READLOAD_TX2LN1_PORT1		0x1684CC
+ #define MG_TX_PISO_READLOAD_TX2LN0_PORT2		0x1690CC
+ #define MG_TX_PISO_READLOAD_TX2LN1_PORT2		0x1694CC
+ #define MG_TX_PISO_READLOAD_TX2LN0_PORT3		0x16A0CC
+ #define MG_TX_PISO_READLOAD_TX2LN1_PORT3		0x16A4CC
+ #define MG_TX_PISO_READLOAD_TX2LN0_PORT4		0x16B0CC
+ #define MG_TX_PISO_READLOAD_TX2LN1_PORT4		0x16B4CC
+ #define MG_TX2_PISO_READLOAD(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_PISO_READLOAD_TX2LN0_PORT1, \
+ 				 MG_TX_PISO_READLOAD_TX2LN0_PORT2, \
+ 				 MG_TX_PISO_READLOAD_TX2LN1_PORT1)
+ #define   CRI_CALCINIT					(1 << 1)
+ 
+ #define MG_TX_SWINGCTRL_TX1LN0_PORT1		0x168148
+ #define MG_TX_SWINGCTRL_TX1LN1_PORT1		0x168548
+ #define MG_TX_SWINGCTRL_TX1LN0_PORT2		0x169148
+ #define MG_TX_SWINGCTRL_TX1LN1_PORT2		0x169548
+ #define MG_TX_SWINGCTRL_TX1LN0_PORT3		0x16A148
+ #define MG_TX_SWINGCTRL_TX1LN1_PORT3		0x16A548
+ #define MG_TX_SWINGCTRL_TX1LN0_PORT4		0x16B148
+ #define MG_TX_SWINGCTRL_TX1LN1_PORT4		0x16B548
+ #define MG_TX1_SWINGCTRL(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_SWINGCTRL_TX1LN0_PORT1, \
+ 				 MG_TX_SWINGCTRL_TX1LN0_PORT2, \
+ 				 MG_TX_SWINGCTRL_TX1LN1_PORT1)
+ 
+ #define MG_TX_SWINGCTRL_TX2LN0_PORT1		0x1680C8
+ #define MG_TX_SWINGCTRL_TX2LN1_PORT1		0x1684C8
+ #define MG_TX_SWINGCTRL_TX2LN0_PORT2		0x1690C8
+ #define MG_TX_SWINGCTRL_TX2LN1_PORT2		0x1694C8
+ #define MG_TX_SWINGCTRL_TX2LN0_PORT3		0x16A0C8
+ #define MG_TX_SWINGCTRL_TX2LN1_PORT3		0x16A4C8
+ #define MG_TX_SWINGCTRL_TX2LN0_PORT4		0x16B0C8
+ #define MG_TX_SWINGCTRL_TX2LN1_PORT4		0x16B4C8
+ #define MG_TX2_SWINGCTRL(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_SWINGCTRL_TX2LN0_PORT1, \
+ 				 MG_TX_SWINGCTRL_TX2LN0_PORT2, \
+ 				 MG_TX_SWINGCTRL_TX2LN1_PORT1)
+ #define   CRI_TXDEEMPH_OVERRIDE_17_12(x)		((x) << 0)
+ #define   CRI_TXDEEMPH_OVERRIDE_17_12_MASK		(0x3F << 0)
+ 
+ #define MG_TX_DRVCTRL_TX1LN0_TXPORT1			0x168144
+ #define MG_TX_DRVCTRL_TX1LN1_TXPORT1			0x168544
+ #define MG_TX_DRVCTRL_TX1LN0_TXPORT2			0x169144
+ #define MG_TX_DRVCTRL_TX1LN1_TXPORT2			0x169544
+ #define MG_TX_DRVCTRL_TX1LN0_TXPORT3			0x16A144
+ #define MG_TX_DRVCTRL_TX1LN1_TXPORT3			0x16A544
+ #define MG_TX_DRVCTRL_TX1LN0_TXPORT4			0x16B144
+ #define MG_TX_DRVCTRL_TX1LN1_TXPORT4			0x16B544
+ #define MG_TX1_DRVCTRL(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_DRVCTRL_TX1LN0_TXPORT1, \
+ 				 MG_TX_DRVCTRL_TX1LN0_TXPORT2, \
+ 				 MG_TX_DRVCTRL_TX1LN1_TXPORT1)
+ 
+ #define MG_TX_DRVCTRL_TX2LN0_PORT1			0x1680C4
+ #define MG_TX_DRVCTRL_TX2LN1_PORT1			0x1684C4
+ #define MG_TX_DRVCTRL_TX2LN0_PORT2			0x1690C4
+ #define MG_TX_DRVCTRL_TX2LN1_PORT2			0x1694C4
+ #define MG_TX_DRVCTRL_TX2LN0_PORT3			0x16A0C4
+ #define MG_TX_DRVCTRL_TX2LN1_PORT3			0x16A4C4
+ #define MG_TX_DRVCTRL_TX2LN0_PORT4			0x16B0C4
+ #define MG_TX_DRVCTRL_TX2LN1_PORT4			0x16B4C4
+ #define MG_TX2_DRVCTRL(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_DRVCTRL_TX2LN0_PORT1, \
+ 				 MG_TX_DRVCTRL_TX2LN0_PORT2, \
+ 				 MG_TX_DRVCTRL_TX2LN1_PORT1)
+ #define   CRI_TXDEEMPH_OVERRIDE_11_6(x)			((x) << 24)
+ #define   CRI_TXDEEMPH_OVERRIDE_11_6_MASK		(0x3F << 24)
+ #define   CRI_TXDEEMPH_OVERRIDE_EN			(1 << 22)
+ #define   CRI_TXDEEMPH_OVERRIDE_5_0(x)			((x) << 16)
+ #define   CRI_TXDEEMPH_OVERRIDE_5_0_MASK		(0x3F << 16)
+ #define   CRI_LOADGEN_SEL(x)				((x) << 12)
+ #define   CRI_LOADGEN_SEL_MASK				(0x3 << 12)
+ 
+ #define MG_CLKHUB_LN0_PORT1			0x16839C
+ #define MG_CLKHUB_LN1_PORT1			0x16879C
+ #define MG_CLKHUB_LN0_PORT2			0x16939C
+ #define MG_CLKHUB_LN1_PORT2			0x16979C
+ #define MG_CLKHUB_LN0_PORT3			0x16A39C
+ #define MG_CLKHUB_LN1_PORT3			0x16A79C
+ #define MG_CLKHUB_LN0_PORT4			0x16B39C
+ #define MG_CLKHUB_LN1_PORT4			0x16B79C
+ #define MG_CLKHUB(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_CLKHUB_LN0_PORT1, \
+ 				 MG_CLKHUB_LN0_PORT2, \
+ 				 MG_CLKHUB_LN1_PORT1)
+ #define   CFG_LOW_RATE_LKREN_EN				(1 << 11)
+ 
+ #define MG_TX_DCC_TX1LN0_PORT1			0x168110
+ #define MG_TX_DCC_TX1LN1_PORT1			0x168510
+ #define MG_TX_DCC_TX1LN0_PORT2			0x169110
+ #define MG_TX_DCC_TX1LN1_PORT2			0x169510
+ #define MG_TX_DCC_TX1LN0_PORT3			0x16A110
+ #define MG_TX_DCC_TX1LN1_PORT3			0x16A510
+ #define MG_TX_DCC_TX1LN0_PORT4			0x16B110
+ #define MG_TX_DCC_TX1LN1_PORT4			0x16B510
+ #define MG_TX1_DCC(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_DCC_TX1LN0_PORT1, \
+ 				 MG_TX_DCC_TX1LN0_PORT2, \
+ 				 MG_TX_DCC_TX1LN1_PORT1)
+ #define MG_TX_DCC_TX2LN0_PORT1			0x168090
+ #define MG_TX_DCC_TX2LN1_PORT1			0x168490
+ #define MG_TX_DCC_TX2LN0_PORT2			0x169090
+ #define MG_TX_DCC_TX2LN1_PORT2			0x169490
+ #define MG_TX_DCC_TX2LN0_PORT3			0x16A090
+ #define MG_TX_DCC_TX2LN1_PORT3			0x16A490
+ #define MG_TX_DCC_TX2LN0_PORT4			0x16B090
+ #define MG_TX_DCC_TX2LN1_PORT4			0x16B490
+ #define MG_TX2_DCC(ln, port) \
+ 	MG_PHY_PORT_LN(ln, port, MG_TX_DCC_TX2LN0_PORT1, \
+ 				 MG_TX_DCC_TX2LN0_PORT2, \
+ 				 MG_TX_DCC_TX2LN1_PORT1)
+ #define   CFG_AMI_CK_DIV_OVERRIDE_VAL(x)	((x) << 25)
+ #define   CFG_AMI_CK_DIV_OVERRIDE_VAL_MASK	(0x3 << 25)
+ #define   CFG_AMI_CK_DIV_OVERRIDE_EN		(1 << 24)
+ 
+ #define MG_DP_MODE_LN0_ACU_PORT1			0x1683A0
+ #define MG_DP_MODE_LN1_ACU_PORT1			0x1687A0
+ #define MG_DP_MODE_LN0_ACU_PORT2			0x1693A0
+ #define MG_DP_MODE_LN1_ACU_PORT2			0x1697A0
+ #define MG_DP_MODE_LN0_ACU_PORT3			0x16A3A0
+ #define MG_DP_MODE_LN1_ACU_PORT3			0x16A7A0
+ #define MG_DP_MODE_LN0_ACU_PORT4			0x16B3A0
+ #define MG_DP_MODE_LN1_ACU_PORT4			0x16B7A0
+ #define MG_DP_MODE(ln, port)	\
+ 	MG_PHY_PORT_LN(ln, port, MG_DP_MODE_LN0_ACU_PORT1, \
+ 				 MG_DP_MODE_LN0_ACU_PORT2, \
+ 				 MG_DP_MODE_LN1_ACU_PORT1)
+ #define   MG_DP_MODE_CFG_DP_X2_MODE			(1 << 7)
+ #define   MG_DP_MODE_CFG_DP_X1_MODE			(1 << 6)
+ #define   MG_DP_MODE_CFG_TR2PWR_GATING			(1 << 5)
+ #define   MG_DP_MODE_CFG_TRPWR_GATING			(1 << 4)
+ #define   MG_DP_MODE_CFG_CLNPWR_GATING			(1 << 3)
+ #define   MG_DP_MODE_CFG_DIGPWR_GATING			(1 << 2)
+ #define   MG_DP_MODE_CFG_GAONPWR_GATING			(1 << 1)
+ 
+ #define MG_MISC_SUS0_PORT1				0x168814
+ #define MG_MISC_SUS0_PORT2				0x169814
+ #define MG_MISC_SUS0_PORT3				0x16A814
+ #define MG_MISC_SUS0_PORT4				0x16B814
+ #define MG_MISC_SUS0(tc_port) \
+ 	_MMIO(_PORT(tc_port, MG_MISC_SUS0_PORT1, MG_MISC_SUS0_PORT2))
+ #define   MG_MISC_SUS0_SUSCLK_DYNCLKGATE_MODE_MASK	(3 << 14)
+ #define   MG_MISC_SUS0_SUSCLK_DYNCLKGATE_MODE(x)	((x) << 14)
+ #define   MG_MISC_SUS0_CFG_TR2PWR_GATING		(1 << 12)
+ #define   MG_MISC_SUS0_CFG_CL2PWR_GATING		(1 << 11)
+ #define   MG_MISC_SUS0_CFG_GAONPWR_GATING		(1 << 10)
+ #define   MG_MISC_SUS0_CFG_TRPWR_GATING			(1 << 7)
+ #define   MG_MISC_SUS0_CFG_CL1PWR_GATING		(1 << 6)
+ #define   MG_MISC_SUS0_CFG_DGPWR_GATING			(1 << 5)
++>>>>>>> 58106b7d816e (drm/i915: Make MG PHY macros semantically consistent)
  
  /* The spec defines this only for BXT PHY0, but lets assume that this
   * would exist for PHY1 too if it had a second channel.
diff --cc drivers/gpu/drm/i915/intel_ddi.c
index fed26d6e4e27,ea83071a22c4..000000000000
--- a/drivers/gpu/drm/i915/intel_ddi.c
+++ b/drivers/gpu/drm/i915/intel_ddi.c
@@@ -2383,19 -2534,140 +2383,144 @@@ static void icl_combo_phy_ddi_vswing_se
  	I915_WRITE(ICL_PORT_TX_DW5_GRP(port), val);
  }
  
++<<<<<<< HEAD
 +static void icl_ddi_vswing_sequence(struct intel_encoder *encoder, u32 level,
++=======
+ static void icl_mg_phy_ddi_vswing_sequence(struct intel_encoder *encoder,
+ 					   int link_clock,
+ 					   u32 level)
+ {
+ 	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
+ 	enum port port = encoder->port;
+ 	const struct icl_mg_phy_ddi_buf_trans *ddi_translations;
+ 	u32 n_entries, val;
+ 	int ln;
+ 
+ 	n_entries = ARRAY_SIZE(icl_mg_phy_ddi_translations);
+ 	ddi_translations = icl_mg_phy_ddi_translations;
+ 	/* The table does not have values for level 3 and level 9. */
+ 	if (level >= n_entries || level == 3 || level == 9) {
+ 		DRM_DEBUG_KMS("DDI translation not found for level %d. Using %d instead.",
+ 			      level, n_entries - 2);
+ 		level = n_entries - 2;
+ 	}
+ 
+ 	/* Set MG_TX_LINK_PARAMS cri_use_fs32 to 0. */
+ 	for (ln = 0; ln < 2; ln++) {
+ 		val = I915_READ(MG_TX1_LINK_PARAMS(ln, port));
+ 		val &= ~CRI_USE_FS32;
+ 		I915_WRITE(MG_TX1_LINK_PARAMS(ln, port), val);
+ 
+ 		val = I915_READ(MG_TX2_LINK_PARAMS(ln, port));
+ 		val &= ~CRI_USE_FS32;
+ 		I915_WRITE(MG_TX2_LINK_PARAMS(ln, port), val);
+ 	}
+ 
+ 	/* Program MG_TX_SWINGCTRL with values from vswing table */
+ 	for (ln = 0; ln < 2; ln++) {
+ 		val = I915_READ(MG_TX1_SWINGCTRL(ln, port));
+ 		val &= ~CRI_TXDEEMPH_OVERRIDE_17_12_MASK;
+ 		val |= CRI_TXDEEMPH_OVERRIDE_17_12(
+ 			ddi_translations[level].cri_txdeemph_override_17_12);
+ 		I915_WRITE(MG_TX1_SWINGCTRL(ln, port), val);
+ 
+ 		val = I915_READ(MG_TX2_SWINGCTRL(ln, port));
+ 		val &= ~CRI_TXDEEMPH_OVERRIDE_17_12_MASK;
+ 		val |= CRI_TXDEEMPH_OVERRIDE_17_12(
+ 			ddi_translations[level].cri_txdeemph_override_17_12);
+ 		I915_WRITE(MG_TX2_SWINGCTRL(ln, port), val);
+ 	}
+ 
+ 	/* Program MG_TX_DRVCTRL with values from vswing table */
+ 	for (ln = 0; ln < 2; ln++) {
+ 		val = I915_READ(MG_TX1_DRVCTRL(ln, port));
+ 		val &= ~(CRI_TXDEEMPH_OVERRIDE_11_6_MASK |
+ 			 CRI_TXDEEMPH_OVERRIDE_5_0_MASK);
+ 		val |= CRI_TXDEEMPH_OVERRIDE_5_0(
+ 			ddi_translations[level].cri_txdeemph_override_5_0) |
+ 			CRI_TXDEEMPH_OVERRIDE_11_6(
+ 				ddi_translations[level].cri_txdeemph_override_11_6) |
+ 			CRI_TXDEEMPH_OVERRIDE_EN;
+ 		I915_WRITE(MG_TX1_DRVCTRL(ln, port), val);
+ 
+ 		val = I915_READ(MG_TX2_DRVCTRL(ln, port));
+ 		val &= ~(CRI_TXDEEMPH_OVERRIDE_11_6_MASK |
+ 			 CRI_TXDEEMPH_OVERRIDE_5_0_MASK);
+ 		val |= CRI_TXDEEMPH_OVERRIDE_5_0(
+ 			ddi_translations[level].cri_txdeemph_override_5_0) |
+ 			CRI_TXDEEMPH_OVERRIDE_11_6(
+ 				ddi_translations[level].cri_txdeemph_override_11_6) |
+ 			CRI_TXDEEMPH_OVERRIDE_EN;
+ 		I915_WRITE(MG_TX2_DRVCTRL(ln, port), val);
+ 
+ 		/* FIXME: Program CRI_LOADGEN_SEL after the spec is updated */
+ 	}
+ 
+ 	/*
+ 	 * Program MG_CLKHUB<LN, port being used> with value from frequency table
+ 	 * In case of Legacy mode on MG PHY, both TX1 and TX2 enabled so use the
+ 	 * values from table for which TX1 and TX2 enabled.
+ 	 */
+ 	for (ln = 0; ln < 2; ln++) {
+ 		val = I915_READ(MG_CLKHUB(ln, port));
+ 		if (link_clock < 300000)
+ 			val |= CFG_LOW_RATE_LKREN_EN;
+ 		else
+ 			val &= ~CFG_LOW_RATE_LKREN_EN;
+ 		I915_WRITE(MG_CLKHUB(ln, port), val);
+ 	}
+ 
+ 	/* Program the MG_TX_DCC<LN, port being used> based on the link frequency */
+ 	for (ln = 0; ln < 2; ln++) {
+ 		val = I915_READ(MG_TX1_DCC(ln, port));
+ 		val &= ~CFG_AMI_CK_DIV_OVERRIDE_VAL_MASK;
+ 		if (link_clock <= 500000) {
+ 			val &= ~CFG_AMI_CK_DIV_OVERRIDE_EN;
+ 		} else {
+ 			val |= CFG_AMI_CK_DIV_OVERRIDE_EN |
+ 				CFG_AMI_CK_DIV_OVERRIDE_VAL(1);
+ 		}
+ 		I915_WRITE(MG_TX1_DCC(ln, port), val);
+ 
+ 		val = I915_READ(MG_TX2_DCC(ln, port));
+ 		val &= ~CFG_AMI_CK_DIV_OVERRIDE_VAL_MASK;
+ 		if (link_clock <= 500000) {
+ 			val &= ~CFG_AMI_CK_DIV_OVERRIDE_EN;
+ 		} else {
+ 			val |= CFG_AMI_CK_DIV_OVERRIDE_EN |
+ 				CFG_AMI_CK_DIV_OVERRIDE_VAL(1);
+ 		}
+ 		I915_WRITE(MG_TX2_DCC(ln, port), val);
+ 	}
+ 
+ 	/* Program MG_TX_PISO_READLOAD with values from vswing table */
+ 	for (ln = 0; ln < 2; ln++) {
+ 		val = I915_READ(MG_TX1_PISO_READLOAD(ln, port));
+ 		val |= CRI_CALCINIT;
+ 		I915_WRITE(MG_TX1_PISO_READLOAD(ln, port), val);
+ 
+ 		val = I915_READ(MG_TX2_PISO_READLOAD(ln, port));
+ 		val |= CRI_CALCINIT;
+ 		I915_WRITE(MG_TX2_PISO_READLOAD(ln, port), val);
+ 	}
+ }
+ 
+ static void icl_ddi_vswing_sequence(struct intel_encoder *encoder,
+ 				    int link_clock,
+ 				    u32 level,
++>>>>>>> 58106b7d816e (drm/i915: Make MG PHY macros semantically consistent)
  				    enum intel_output_type type)
  {
 -	struct drm_i915_private *dev_priv = to_i915(encoder->base.dev);
  	enum port port = encoder->port;
  
 -	if (intel_port_is_combophy(dev_priv, port))
 +	if (port == PORT_A || port == PORT_B)
  		icl_combo_phy_ddi_vswing_sequence(encoder, level, type);
  	else
 -		icl_mg_phy_ddi_vswing_sequence(encoder, link_clock, level);
 +		/* Not Implemented Yet */
 +		WARN_ON(1);
  }
  
 -static u32 translate_signal_level(int signal_levels)
 +static uint32_t translate_signal_level(int signal_levels)
  {
  	int i;
  
* Unmerged path drivers/gpu/drm/i915/i915_reg.h
* Unmerged path drivers/gpu/drm/i915/intel_ddi.c
