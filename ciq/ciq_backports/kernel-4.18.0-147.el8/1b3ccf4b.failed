arm64: add sysfs vulnerability show for meltdown

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Jeremy Linton <jeremy.linton@arm.com>
commit 1b3ccf4be0e7be8c4bd8522066b6cbc92591e912
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/1b3ccf4b.failed

We implement page table isolation as a mitigation for meltdown.
Report this to userspace via sysfs.

	Signed-off-by: Jeremy Linton <jeremy.linton@arm.com>
	Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Reviewed-by: Andre Przywara <andre.przywara@arm.com>
	Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
	Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
(cherry picked from commit 1b3ccf4be0e7be8c4bd8522066b6cbc92591e912)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/kernel/cpufeature.c
diff --cc arch/arm64/kernel/cpufeature.c
index b12c81308403,703ee8564fbd..000000000000
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@@ -1794,8 -2120,14 +1812,21 @@@ static int __init enable_mrs_emulation(
  
  core_initcall(enable_mrs_emulation);
  
++<<<<<<< HEAD
 +void cpu_clear_disr(const struct arm64_cpu_capabilities *__unused)
 +{
 +	/* Firmware may have left a deferred SError in this register. */
 +	write_sysreg_s(0, SYS_DISR_EL1);
++=======
+ ssize_t cpu_show_meltdown(struct device *dev, struct device_attribute *attr,
+ 			  char *buf)
+ {
+ 	if (__meltdown_safe)
+ 		return sprintf(buf, "Not affected\n");
+ 
+ 	if (arm64_kernel_unmapped_at_el0())
+ 		return sprintf(buf, "Mitigation: PTI\n");
+ 
+ 	return sprintf(buf, "Vulnerable\n");
++>>>>>>> 1b3ccf4be0e7 (arm64: add sysfs vulnerability show for meltdown)
  }
* Unmerged path arch/arm64/kernel/cpufeature.c
