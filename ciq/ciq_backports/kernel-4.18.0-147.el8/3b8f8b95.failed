iw_cxgb4: Make function read_tcb() static

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Wei Yongjun <weiyongjun1@huawei.com>
commit 3b8f8b95d9d3c73637bd33a644952a7cfa8e2c2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/3b8f8b95.failed

Fixes the following sparse warning:

drivers/infiniband/hw/cxgb4/cm.c:658:6: warning:
 symbol 'read_tcb' was not declared. Should it be static?

Fixes: 11a27e2121a5 ("iw_cxgb4: complete the cached SRQ buffers")
	Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
	Acked-by: Raju Rangoju <rajur@chelsio.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 3b8f8b95d9d3c73637bd33a644952a7cfa8e2c2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/cxgb4/cm.c
diff --cc drivers/infiniband/hw/cxgb4/cm.c
index 08797da90e53,4d232bdf9e97..000000000000
--- a/drivers/infiniband/hw/cxgb4/cm.c
+++ b/drivers/infiniband/hw/cxgb4/cm.c
@@@ -656,7 -655,33 +656,37 @@@ static int send_halfclose(struct c4iw_e
  	return c4iw_l2t_send(&ep->com.dev->rdev, skb, ep->l2t);
  }
  
++<<<<<<< HEAD
 +static int send_abort(struct c4iw_ep *ep)
++=======
+ static void read_tcb(struct c4iw_ep *ep)
+ {
+ 	struct sk_buff *skb;
+ 	struct cpl_get_tcb *req;
+ 	int wrlen = roundup(sizeof(*req), 16);
+ 
+ 	skb = get_skb(NULL, sizeof(*req), GFP_KERNEL);
+ 	if (WARN_ON(!skb))
+ 		return;
+ 
+ 	set_wr_txq(skb, CPL_PRIORITY_CONTROL, ep->ctrlq_idx);
+ 	req = (struct cpl_get_tcb *) skb_put(skb, wrlen);
+ 	memset(req, 0, wrlen);
+ 	INIT_TP_WR(req, ep->hwtid);
+ 	OPCODE_TID(req) = cpu_to_be32(MK_OPCODE_TID(CPL_GET_TCB, ep->hwtid));
+ 	req->reply_ctrl = htons(REPLY_CHAN_V(0) | QUEUENO_V(ep->rss_qid));
+ 
+ 	/*
+ 	 * keep a ref on the ep so the tcb is not unlocked before this
+ 	 * cpl completes. The ref is released in read_tcb_rpl().
+ 	 */
+ 	c4iw_get_ep(&ep->com);
+ 	if (WARN_ON(c4iw_ofld_send(&ep->com.dev->rdev, skb)))
+ 		c4iw_put_ep(&ep->com);
+ }
+ 
+ static int send_abort_req(struct c4iw_ep *ep)
++>>>>>>> 3b8f8b95d9d3 (iw_cxgb4: Make function read_tcb() static)
  {
  	u32 wrlen = roundup(sizeof(struct cpl_abort_req), 16);
  	struct sk_buff *req_skb = skb_dequeue(&ep->com.ep_skb_list);
* Unmerged path drivers/infiniband/hw/cxgb4/cm.c
