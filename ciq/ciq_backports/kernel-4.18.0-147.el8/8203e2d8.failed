net: clear skb->tstamp in forwarding paths

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [net] clear skb->tstamp in forwarding paths (Stefano Brivio) [1718503]
Rebuild_FUZZ: 93.67%
commit-author Eric Dumazet <edumazet@google.com>
commit 8203e2d844d34af247a151d8ebd68553a6e91785
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/8203e2d8.failed

Sergey reported that forwarding was no longer working
if fq packet scheduler was used.

This is caused by the recent switch to EDT model, since incoming
packets might have been timestamped by __net_timestamp()

__net_timestamp() uses ktime_get_real(), while fq expects packets
using CLOCK_MONOTONIC base.

The fix is to clear skb->tstamp in forwarding paths.

Fixes: 80b14dee2bea ("net: Add a new socket option for a future transmit time.")
Fixes: fb420d5d91c1 ("tcp/fq: move back to CLOCK_MONOTONIC")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: Sergey Matyukevich <geomatsi@gmail.com>
	Tested-by: Sergey Matyukevich <geomatsi@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8203e2d844d34af247a151d8ebd68553a6e91785)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_output.c
diff --cc net/ipv6/ip6_output.c
index 0c143a5077dc,4591ca4bdbe8..000000000000
--- a/net/ipv6/ip6_output.c
+++ b/net/ipv6/ip6_output.c
@@@ -378,13 -378,7 +378,17 @@@ static inline int ip6_forward_finish(st
  	__IP6_INC_STATS(net, ip6_dst_idev(dst), IPSTATS_MIB_OUTFORWDATAGRAMS);
  	__IP6_ADD_STATS(net, ip6_dst_idev(dst), IPSTATS_MIB_OUTOCTETS, skb->len);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_NET_SWITCHDEV
 +	if (skb->offload_l3_fwd_mark) {
 +		consume_skb(skb);
 +		return 0;
 +	}
 +#endif
 +
++=======
+ 	skb->tstamp = 0;
++>>>>>>> 8203e2d844d3 (net: clear skb->tstamp in forwarding paths)
  	return dst_output(net, sk, skb);
  }
  
diff --git a/net/ipv4/ip_forward.c b/net/ipv4/ip_forward.c
index 06ee4696703c..00ec819f949b 100644
--- a/net/ipv4/ip_forward.c
+++ b/net/ipv4/ip_forward.c
@@ -79,6 +79,7 @@ static int ip_forward_finish(struct net *net, struct sock *sk, struct sk_buff *s
 	if (unlikely(opt->optlen))
 		ip_forward_options(skb);
 
+	skb->tstamp = 0;
 	return dst_output(net, sk, skb);
 }
 
* Unmerged path net/ipv6/ip6_output.c
