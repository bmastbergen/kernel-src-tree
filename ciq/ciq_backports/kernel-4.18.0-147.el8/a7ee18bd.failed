RDMA/mlx5: Allow creating a matcher for a NIC TX flow table

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Mark Bloch <markb@mellanox.com>
commit a7ee18bdee837e4703f01588993504b72074ffc6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/a7ee18bd.failed

Currently a matcher can only be created and attached to a NIC RX flow
table. Extend it to allow it on NIC TX flow tables as well.

In order to achieve that, we:

1) Expose a new attribute: MLX5_IB_ATTR_FLOW_MATCHER_FLOW_FLAGS.
   enum ib_flow_flags is used as valid flags. Only
   IB_FLOW_ATTR_FLAGS_EGRESS is supported.

2) Remove the requirement to have a DEVX or QP destination when creating a
   flow. A flow added to NIC TX flow table will forward the packet outside
   of the vport (Wire or E-Switch in the SR-iOV case).

	Signed-off-by: Mark Bloch <markb@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit a7ee18bdee837e4703f01588993504b72074ffc6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/flow.c
#	drivers/infiniband/hw/mlx5/main.c
#	include/uapi/rdma/mlx5_user_ioctl_cmds.h
diff --cc drivers/infiniband/hw/mlx5/main.c
index 9a6f3991a7ec,2be6a4377558..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -3688,6 -3719,213 +3688,216 @@@ free_ucmd
  	return ERR_PTR(err);
  }
  
++<<<<<<< HEAD
++=======
+ static struct mlx5_ib_flow_prio *
+ _get_flow_table(struct mlx5_ib_dev *dev,
+ 		struct mlx5_ib_flow_matcher *fs_matcher,
+ 		bool mcast)
+ {
+ 	struct mlx5_flow_namespace *ns = NULL;
+ 	struct mlx5_ib_flow_prio *prio;
+ 	int max_table_size;
+ 	u32 flags = 0;
+ 	int priority;
+ 
+ 	if (fs_matcher->ns_type == MLX5_FLOW_NAMESPACE_BYPASS) {
+ 		max_table_size = BIT(MLX5_CAP_FLOWTABLE_NIC_RX(dev->mdev,
+ 					log_max_ft_size));
+ 		if (MLX5_CAP_FLOWTABLE_NIC_RX(dev->mdev, decap))
+ 			flags |= MLX5_FLOW_TABLE_TUNNEL_EN_DECAP;
+ 		if (MLX5_CAP_FLOWTABLE_NIC_RX(dev->mdev,
+ 					      reformat_l3_tunnel_to_l2))
+ 			flags |= MLX5_FLOW_TABLE_TUNNEL_EN_REFORMAT;
+ 	} else { /* Can only be MLX5_FLOW_NAMESPACE_EGRESS */
+ 		max_table_size = BIT(MLX5_CAP_FLOWTABLE_NIC_TX(dev->mdev,
+ 					log_max_ft_size));
+ 		if (MLX5_CAP_FLOWTABLE_NIC_TX(dev->mdev, reformat))
+ 			flags |= MLX5_FLOW_TABLE_TUNNEL_EN_REFORMAT;
+ 	}
+ 
+ 	if (max_table_size < MLX5_FS_MAX_ENTRIES)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	if (mcast)
+ 		priority = MLX5_IB_FLOW_MCAST_PRIO;
+ 	else
+ 		priority = ib_prio_to_core_prio(fs_matcher->priority, false);
+ 
+ 	ns = mlx5_get_flow_namespace(dev->mdev, fs_matcher->ns_type);
+ 	if (!ns)
+ 		return ERR_PTR(-ENOTSUPP);
+ 
+ 	if (fs_matcher->ns_type == MLX5_FLOW_NAMESPACE_BYPASS)
+ 		prio = &dev->flow_db->prios[priority];
+ 	else
+ 		prio = &dev->flow_db->egress_prios[priority];
+ 
+ 	if (prio->flow_table)
+ 		return prio;
+ 
+ 	return _get_prio(ns, prio, priority, MLX5_FS_MAX_ENTRIES,
+ 			 MLX5_FS_MAX_TYPES, flags);
+ }
+ 
+ static struct mlx5_ib_flow_handler *
+ _create_raw_flow_rule(struct mlx5_ib_dev *dev,
+ 		      struct mlx5_ib_flow_prio *ft_prio,
+ 		      struct mlx5_flow_destination *dst,
+ 		      struct mlx5_ib_flow_matcher  *fs_matcher,
+ 		      struct mlx5_flow_act *flow_act,
+ 		      void *cmd_in, int inlen)
+ {
+ 	struct mlx5_ib_flow_handler *handler;
+ 	struct mlx5_flow_spec *spec;
+ 	struct mlx5_flow_table *ft = ft_prio->flow_table;
+ 	int err = 0;
+ 
+ 	spec = kvzalloc(sizeof(*spec), GFP_KERNEL);
+ 	handler = kzalloc(sizeof(*handler), GFP_KERNEL);
+ 	if (!handler || !spec) {
+ 		err = -ENOMEM;
+ 		goto free;
+ 	}
+ 
+ 	INIT_LIST_HEAD(&handler->list);
+ 
+ 	memcpy(spec->match_value, cmd_in, inlen);
+ 	memcpy(spec->match_criteria, fs_matcher->matcher_mask.match_params,
+ 	       fs_matcher->mask_len);
+ 	spec->match_criteria_enable = fs_matcher->match_criteria_enable;
+ 
+ 	handler->rule = mlx5_add_flow_rules(ft, spec,
+ 					    flow_act, dst, 1);
+ 
+ 	if (IS_ERR(handler->rule)) {
+ 		err = PTR_ERR(handler->rule);
+ 		goto free;
+ 	}
+ 
+ 	ft_prio->refcount++;
+ 	handler->prio = ft_prio;
+ 	handler->dev = dev;
+ 	ft_prio->flow_table = ft;
+ 
+ free:
+ 	if (err)
+ 		kfree(handler);
+ 	kvfree(spec);
+ 	return err ? ERR_PTR(err) : handler;
+ }
+ 
+ static bool raw_fs_is_multicast(struct mlx5_ib_flow_matcher *fs_matcher,
+ 				void *match_v)
+ {
+ 	void *match_c;
+ 	void *match_v_set_lyr_2_4, *match_c_set_lyr_2_4;
+ 	void *dmac, *dmac_mask;
+ 	void *ipv4, *ipv4_mask;
+ 
+ 	if (!(fs_matcher->match_criteria_enable &
+ 	      (1 << MATCH_CRITERIA_ENABLE_OUTER_BIT)))
+ 		return false;
+ 
+ 	match_c = fs_matcher->matcher_mask.match_params;
+ 	match_v_set_lyr_2_4 = MLX5_ADDR_OF(fte_match_param, match_v,
+ 					   outer_headers);
+ 	match_c_set_lyr_2_4 = MLX5_ADDR_OF(fte_match_param, match_c,
+ 					   outer_headers);
+ 
+ 	dmac = MLX5_ADDR_OF(fte_match_set_lyr_2_4, match_v_set_lyr_2_4,
+ 			    dmac_47_16);
+ 	dmac_mask = MLX5_ADDR_OF(fte_match_set_lyr_2_4, match_c_set_lyr_2_4,
+ 				 dmac_47_16);
+ 
+ 	if (is_multicast_ether_addr(dmac) &&
+ 	    is_multicast_ether_addr(dmac_mask))
+ 		return true;
+ 
+ 	ipv4 = MLX5_ADDR_OF(fte_match_set_lyr_2_4, match_v_set_lyr_2_4,
+ 			    dst_ipv4_dst_ipv6.ipv4_layout.ipv4);
+ 
+ 	ipv4_mask = MLX5_ADDR_OF(fte_match_set_lyr_2_4, match_c_set_lyr_2_4,
+ 				 dst_ipv4_dst_ipv6.ipv4_layout.ipv4);
+ 
+ 	if (ipv4_is_multicast(*(__be32 *)(ipv4)) &&
+ 	    ipv4_is_multicast(*(__be32 *)(ipv4_mask)))
+ 		return true;
+ 
+ 	return false;
+ }
+ 
+ struct mlx5_ib_flow_handler *
+ mlx5_ib_raw_fs_rule_add(struct mlx5_ib_dev *dev,
+ 			struct mlx5_ib_flow_matcher *fs_matcher,
+ 			struct mlx5_flow_act *flow_act,
+ 			void *cmd_in, int inlen, int dest_id,
+ 			int dest_type)
+ {
+ 	struct mlx5_flow_destination *dst;
+ 	struct mlx5_ib_flow_prio *ft_prio;
+ 	struct mlx5_ib_flow_handler *handler;
+ 	bool mcast;
+ 	int err;
+ 
+ 	if (fs_matcher->flow_type != MLX5_IB_FLOW_TYPE_NORMAL)
+ 		return ERR_PTR(-EOPNOTSUPP);
+ 
+ 	if (fs_matcher->priority > MLX5_IB_FLOW_LAST_PRIO)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	dst = kzalloc(sizeof(*dst), GFP_KERNEL);
+ 	if (!dst)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	mcast = raw_fs_is_multicast(fs_matcher, cmd_in);
+ 	mutex_lock(&dev->flow_db->lock);
+ 
+ 	ft_prio = _get_flow_table(dev, fs_matcher, mcast);
+ 	if (IS_ERR(ft_prio)) {
+ 		err = PTR_ERR(ft_prio);
+ 		goto unlock;
+ 	}
+ 
+ 	if (dest_type == MLX5_FLOW_DESTINATION_TYPE_TIR) {
+ 		dst->type = dest_type;
+ 		dst->tir_num = dest_id;
+ 		flow_act->action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
+ 	} else if (dest_type == MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE) {
+ 		dst->type = MLX5_FLOW_DESTINATION_TYPE_FLOW_TABLE_NUM;
+ 		dst->ft_num = dest_id;
+ 		flow_act->action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
+ 	} else {
+ 		dst->type = MLX5_FLOW_DESTINATION_TYPE_PORT;
+ 		flow_act->action |= MLX5_FLOW_CONTEXT_ACTION_ALLOW;
+ 	}
+ 
+ 	handler = _create_raw_flow_rule(dev, ft_prio, dst, fs_matcher, flow_act,
+ 					cmd_in, inlen);
+ 
+ 	if (IS_ERR(handler)) {
+ 		err = PTR_ERR(handler);
+ 		goto destroy_ft;
+ 	}
+ 
+ 	mutex_unlock(&dev->flow_db->lock);
+ 	atomic_inc(&fs_matcher->usecnt);
+ 	handler->flow_matcher = fs_matcher;
+ 
+ 	kfree(dst);
+ 
+ 	return handler;
+ 
+ destroy_ft:
+ 	put_flow_table(dev, ft_prio, false);
+ unlock:
+ 	mutex_unlock(&dev->flow_db->lock);
+ 	kfree(dst);
+ 
+ 	return ERR_PTR(err);
+ }
+ 
++>>>>>>> a7ee18bdee83 (RDMA/mlx5: Allow creating a matcher for a NIC TX flow table)
  static u32 mlx5_ib_flow_action_flags_to_accel_xfrm_flags(u32 mlx5_flags)
  {
  	u32 flags = 0;
diff --cc include/uapi/rdma/mlx5_user_ioctl_cmds.h
index 8d285f4555cd,fb4a8b17cca8..000000000000
--- a/include/uapi/rdma/mlx5_user_ioctl_cmds.h
+++ b/include/uapi/rdma/mlx5_user_ioctl_cmds.h
@@@ -67,11 -75,115 +67,82 @@@ enum mlx5_ib_devx_obj_destroy_attrs 
  enum mlx5_ib_devx_obj_methods {
  	MLX5_IB_METHOD_DEVX_OBJ_CREATE = (1U << UVERBS_ID_NS_SHIFT),
  	MLX5_IB_METHOD_DEVX_OBJ_DESTROY,
 -	MLX5_IB_METHOD_DEVX_OBJ_MODIFY,
 -	MLX5_IB_METHOD_DEVX_OBJ_QUERY,
 -};
 -
 -enum mlx5_ib_devx_umem_reg_attrs {
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_ADDR,
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_LEN,
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_ACCESS,
 -	MLX5_IB_ATTR_DEVX_UMEM_REG_OUT_ID,
 -};
 -
 -enum mlx5_ib_devx_umem_dereg_attrs {
 -	MLX5_IB_ATTR_DEVX_UMEM_DEREG_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
 -};
 -
 -enum mlx5_ib_devx_umem_methods {
 -	MLX5_IB_METHOD_DEVX_UMEM_REG = (1U << UVERBS_ID_NS_SHIFT),
 -	MLX5_IB_METHOD_DEVX_UMEM_DEREG,
  };
  
 -enum mlx5_ib_objects {
 +enum mlx5_ib_devx_objects {
  	MLX5_IB_OBJECT_DEVX = (1U << UVERBS_ID_NS_SHIFT),
  	MLX5_IB_OBJECT_DEVX_OBJ,
++<<<<<<< HEAD
++=======
+ 	MLX5_IB_OBJECT_DEVX_UMEM,
+ 	MLX5_IB_OBJECT_FLOW_MATCHER,
+ };
+ 
+ enum mlx5_ib_flow_matcher_create_attrs {
+ 	MLX5_IB_ATTR_FLOW_MATCHER_CREATE_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_FLOW_MATCHER_MATCH_MASK,
+ 	MLX5_IB_ATTR_FLOW_MATCHER_FLOW_TYPE,
+ 	MLX5_IB_ATTR_FLOW_MATCHER_MATCH_CRITERIA,
+ 	MLX5_IB_ATTR_FLOW_MATCHER_FLOW_FLAGS,
+ };
+ 
+ enum mlx5_ib_flow_matcher_destroy_attrs {
+ 	MLX5_IB_ATTR_FLOW_MATCHER_DESTROY_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ };
+ 
+ enum mlx5_ib_flow_matcher_methods {
+ 	MLX5_IB_METHOD_FLOW_MATCHER_CREATE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_METHOD_FLOW_MATCHER_DESTROY,
+ };
+ 
+ #define MLX5_IB_DW_MATCH_PARAM 0x80
+ 
+ struct mlx5_ib_match_params {
+ 	__u32	match_params[MLX5_IB_DW_MATCH_PARAM];
+ };
+ 
+ enum mlx5_ib_flow_type {
+ 	MLX5_IB_FLOW_TYPE_NORMAL,
+ 	MLX5_IB_FLOW_TYPE_SNIFFER,
+ 	MLX5_IB_FLOW_TYPE_ALL_DEFAULT,
+ 	MLX5_IB_FLOW_TYPE_MC_DEFAULT,
+ };
+ 
+ enum mlx5_ib_create_flow_attrs {
+ 	MLX5_IB_ATTR_CREATE_FLOW_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_CREATE_FLOW_MATCH_VALUE,
+ 	MLX5_IB_ATTR_CREATE_FLOW_DEST_QP,
+ 	MLX5_IB_ATTR_CREATE_FLOW_DEST_DEVX,
+ 	MLX5_IB_ATTR_CREATE_FLOW_MATCHER,
+ 	MLX5_IB_ATTR_CREATE_FLOW_ARR_FLOW_ACTIONS,
+ };
+ 
+ enum mlx5_ib_destoy_flow_attrs {
+ 	MLX5_IB_ATTR_DESTROY_FLOW_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ };
+ 
+ enum mlx5_ib_flow_methods {
+ 	MLX5_IB_METHOD_CREATE_FLOW = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_METHOD_DESTROY_FLOW,
+ };
+ 
+ enum mlx5_ib_flow_action_methods {
+ 	MLX5_IB_METHOD_FLOW_ACTION_CREATE_MODIFY_HEADER = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_METHOD_FLOW_ACTION_CREATE_PACKET_REFORMAT,
+ };
+ 
+ enum mlx5_ib_create_flow_action_create_modify_header_attrs {
+ 	MLX5_IB_ATTR_CREATE_MODIFY_HEADER_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_CREATE_MODIFY_HEADER_ACTIONS_PRM,
+ 	MLX5_IB_ATTR_CREATE_MODIFY_HEADER_FT_TYPE,
+ };
+ 
+ enum mlx5_ib_create_flow_action_create_packet_reformat_attrs {
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_HANDLE = (1U << UVERBS_ID_NS_SHIFT),
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_TYPE,
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_FT_TYPE,
+ 	MLX5_IB_ATTR_CREATE_PACKET_REFORMAT_DATA_BUF,
++>>>>>>> a7ee18bdee83 (RDMA/mlx5: Allow creating a matcher for a NIC TX flow table)
  };
  
  #endif
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path drivers/infiniband/hw/mlx5/flow.c
* Unmerged path drivers/infiniband/hw/mlx5/main.c
* Unmerged path include/uapi/rdma/mlx5_user_ioctl_cmds.h
