x86/kvmclock: set offset for kvm unstable clock

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Pavel Tatashin <pasha.tatashin@soleen.com>
commit b5179ec4187251a751832193693d6e474d3445ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/b5179ec4.failed

VMs may show incorrect uptime and dmesg printk offsets on hypervisors with
unstable clock. The problem is produced when VM is rebooted without exiting
from qemu.

The fix is to calculate clock offset not only for stable clock but for
unstable clock as well, and use kvm_sched_clock_read() which substracts
the offset for both clocks.

This is safe, because pvclock_clocksource_read() does the right thing and
makes sure that clock always goes forward, so once offset is calculated
with unstable clock, we won't get new reads that are smaller than offset,
and thus won't get negative results.

Thank you Jon DeVree for helping to reproduce this issue.

Fixes: 857baa87b642 ("sched/clock: Enable sched clock early")
	Cc: stable@vger.kernel.org
	Reported-by: Dominique Martinet <asmadeus@codewreck.org>
	Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit b5179ec4187251a751832193693d6e474d3445ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/kvmclock.c
diff --cc arch/x86/kernel/kvmclock.c
index 67408ae96148,d908a37bf3f3..000000000000
--- a/arch/x86/kernel/kvmclock.c
+++ b/arch/x86/kernel/kvmclock.c
@@@ -91,14 -104,10 +91,15 @@@ static u64 kvm_sched_clock_read(void
  
  static inline void kvm_sched_clock_init(bool stable)
  {
++<<<<<<< HEAD
 +	if (!stable) {
 +		pv_time_ops.sched_clock = kvm_clock_read;
++=======
+ 	if (!stable)
++>>>>>>> b5179ec41872 (x86/kvmclock: set offset for kvm unstable clock)
  		clear_sched_clock_stable();
- 		return;
- 	}
- 
  	kvm_sched_clock_offset = kvm_clock_read();
 -	pv_ops.time.sched_clock = kvm_sched_clock_read;
 +	pv_time_ops.sched_clock = kvm_sched_clock_read;
  
  	pr_info("kvm-clock: using sched offset of %llu cycles",
  		kvm_sched_clock_offset);
* Unmerged path arch/x86/kernel/kvmclock.c
