net: ethernet: Add helper for MACs which support asym pause

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
Rebuild_CHGLOG: - [netdrv] ethernet: Add helper for MACs which support asym pause (Petr Oros) [1691720]
Rebuild_FUZZ: 95.58%
commit-author Andrew Lunn <andrew@lunn.ch>
commit af8d9bb2f2f405ad541794b46f9d7bc70f13e5cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/af8d9bb2.failed

Rather than have the MAC drivers manipulate phydev members to indicate
they support Asym Pause, add a helper function.

	Signed-off-by: Andrew Lunn <andrew@lunn.ch>
	Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit af8d9bb2f2f405ad541794b46f9d7bc70f13e5cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/apm/xgene/xgene_enet_hw.c
#	drivers/net/ethernet/broadcom/sb1250-mac.c
#	drivers/net/ethernet/broadcom/tg3.c
#	drivers/net/ethernet/cortina/gemini.c
#	drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c
#	drivers/net/ethernet/mediatek/mtk_eth_soc.c
#	drivers/net/ethernet/smsc/smsc911x.c
#	drivers/net/ethernet/smsc/smsc9420.c
#	drivers/net/ethernet/socionext/sni_ave.c
#	drivers/net/phy/phy_device.c
#	include/linux/phy.h
diff --cc drivers/net/ethernet/apm/xgene/xgene_enet_hw.c
index 3188f553da35,e3560311711a..000000000000
--- a/drivers/net/ethernet/apm/xgene/xgene_enet_hw.c
+++ b/drivers/net/ethernet/apm/xgene/xgene_enet_hw.c
@@@ -895,12 -895,10 +895,19 @@@ int xgene_enet_phy_connect(struct net_d
  	}
  
  	pdata->phy_speed = SPEED_UNKNOWN;
++<<<<<<< HEAD
 +	phy_dev->supported &= ~SUPPORTED_10baseT_Half &
 +			      ~SUPPORTED_100baseT_Half &
 +			      ~SUPPORTED_1000baseT_Half;
 +	phy_dev->supported |= SUPPORTED_Pause |
 +			      SUPPORTED_Asym_Pause;
 +	phy_dev->advertising = phy_dev->supported;
++=======
+ 	phy_remove_link_mode(phy_dev, ETHTOOL_LINK_MODE_10baseT_Half_BIT);
+ 	phy_remove_link_mode(phy_dev, ETHTOOL_LINK_MODE_100baseT_Half_BIT);
+ 	phy_remove_link_mode(phy_dev, ETHTOOL_LINK_MODE_1000baseT_Half_BIT);
+ 	phy_support_asym_pause(phy_dev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  	return 0;
  }
diff --cc drivers/net/ethernet/broadcom/sb1250-mac.c
index ef4a0c326736,53acbbb36637..000000000000
--- a/drivers/net/ethernet/broadcom/sb1250-mac.c
+++ b/drivers/net/ethernet/broadcom/sb1250-mac.c
@@@ -2357,16 -2357,8 +2357,21 @@@ static int sbmac_mii_probe(struct net_d
  	}
  
  	/* Remove any features not supported by the controller */
++<<<<<<< HEAD
 +	phy_dev->supported &= SUPPORTED_10baseT_Half |
 +			      SUPPORTED_10baseT_Full |
 +			      SUPPORTED_100baseT_Half |
 +			      SUPPORTED_100baseT_Full |
 +			      SUPPORTED_1000baseT_Half |
 +			      SUPPORTED_1000baseT_Full |
 +			      SUPPORTED_Autoneg |
 +			      SUPPORTED_MII |
 +			      SUPPORTED_Pause |
 +			      SUPPORTED_Asym_Pause;
++=======
+ 	phy_set_max_speed(phy_dev, SPEED_1000);
+ 	phy_support_asym_pause(phy_dev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  	phy_attached_info(phy_dev);
  
diff --cc drivers/net/ethernet/broadcom/tg3.c
index c03296c204c2,193e990fac7a..000000000000
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@@ -2119,16 -2122,14 +2119,26 @@@ static int tg3_phy_init(struct tg3 *tp
  	case PHY_INTERFACE_MODE_GMII:
  	case PHY_INTERFACE_MODE_RGMII:
  		if (!(tp->phy_flags & TG3_PHYFLG_10_100_ONLY)) {
++<<<<<<< HEAD
 +			phydev->supported &= (PHY_GBIT_FEATURES |
 +					      SUPPORTED_Pause |
 +					      SUPPORTED_Asym_Pause);
++=======
+ 			phy_set_max_speed(phydev, SPEED_1000);
+ 			phy_support_asym_pause(phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  			break;
  		}
  		/* fallthru */
  	case PHY_INTERFACE_MODE_MII:
++<<<<<<< HEAD
 +		phydev->supported &= (PHY_BASIC_FEATURES |
 +				      SUPPORTED_Pause |
 +				      SUPPORTED_Asym_Pause);
++=======
+ 		phy_set_max_speed(phydev, SPEED_100);
+ 		phy_support_asym_pause(phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  		break;
  	default:
  		phy_disconnect(mdiobus_get_phy(tp->mdio_bus, tp->phy_addr));
diff --cc drivers/net/ethernet/cortina/gemini.c
index 6d7404f66f84,ceec467f590d..000000000000
--- a/drivers/net/ethernet/cortina/gemini.c
+++ b/drivers/net/ethernet/cortina/gemini.c
@@@ -363,15 -372,8 +363,20 @@@ static int gmac_setup_phy(struct net_de
  		return -ENODEV;
  	netdev->phydev = phy;
  
++<<<<<<< HEAD
 +	netdev_info(netdev, "connected to PHY \"%s\"\n",
 +		    phydev_name(phy));
 +	phy_attached_print(phy, "phy_id=0x%.8lx, phy_mode=%s\n",
 +			   (unsigned long)phy->phy_id,
 +			   phy_modes(phy->interface));
 +
 +	phy->supported &= PHY_GBIT_FEATURES;
 +	phy->supported |= SUPPORTED_Asym_Pause | SUPPORTED_Pause;
 +	phy->advertising = phy->supported;
++=======
+ 	phy_set_max_speed(phy, SPEED_1000);
+ 	phy_support_asym_pause(phy);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  	/* set PHY interface type */
  	switch (phy->interface) {
diff --cc drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c
index 436771cd9695,24b1f2a0c32a..000000000000
--- a/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c
+++ b/drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c
@@@ -219,7 -211,7 +219,11 @@@ int hclge_mac_connect_phy(struct hclge_
  	}
  
  	phydev->supported &= HCLGE_PHY_SUPPORTED_FEATURES;
++<<<<<<< HEAD
 +	phydev->advertising = phydev->supported;
++=======
+ 	phy_support_asym_pause(phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  	return 0;
  }
diff --cc drivers/net/ethernet/mediatek/mtk_eth_soc.c
index d8ebf0a05e0c,cc1e9a96a43b..000000000000
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@@ -355,12 -355,8 +355,17 @@@ static int mtk_phy_connect(struct net_d
  	dev->phydev->speed = 0;
  	dev->phydev->duplex = 0;
  
++<<<<<<< HEAD
 +	if (of_phy_is_fixed_link(mac->of_node))
 +		dev->phydev->supported |=
 +		SUPPORTED_Pause | SUPPORTED_Asym_Pause;
 +
 +	dev->phydev->supported &= PHY_GBIT_FEATURES | SUPPORTED_Pause |
 +				   SUPPORTED_Asym_Pause;
++=======
+ 	phy_set_max_speed(dev->phydev, SPEED_1000);
+ 	phy_support_asym_pause(dev->phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  	dev->phydev->advertising = dev->phydev->supported |
  				    ADVERTISED_Autoneg;
  	phy_start_aneg(dev->phydev);
diff --cc drivers/net/ethernet/smsc/smsc911x.c
index f0afb88d7bc2,c009407618d9..000000000000
--- a/drivers/net/ethernet/smsc/smsc911x.c
+++ b/drivers/net/ethernet/smsc/smsc911x.c
@@@ -1048,10 -1048,10 +1048,14 @@@ static int smsc911x_mii_probe(struct ne
  
  	phy_attached_info(phydev);
  
 -	phy_set_max_speed(phydev, SPEED_100);
 -
  	/* mask with MAC supported features */
++<<<<<<< HEAD
 +	phydev->supported &= (PHY_BASIC_FEATURES | SUPPORTED_Pause |
 +			      SUPPORTED_Asym_Pause);
 +	phydev->advertising = phydev->supported;
++=======
+ 	phy_support_asym_pause(phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  	pdata->last_duplex = -1;
  	pdata->last_carrier = -1;
diff --cc drivers/net/ethernet/smsc/smsc9420.c
index 2fa3c1d03abc,9b6366b20110..000000000000
--- a/drivers/net/ethernet/smsc/smsc9420.c
+++ b/drivers/net/ethernet/smsc/smsc9420.c
@@@ -1135,10 -1135,10 +1135,14 @@@ static int smsc9420_mii_probe(struct ne
  		return PTR_ERR(phydev);
  	}
  
 -	phy_set_max_speed(phydev, SPEED_100);
 -
  	/* mask with MAC supported features */
++<<<<<<< HEAD
 +	phydev->supported &= (PHY_BASIC_FEATURES | SUPPORTED_Pause |
 +			      SUPPORTED_Asym_Pause);
 +	phydev->advertising = phydev->supported;
++=======
+ 	phy_support_asym_pause(phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  	phy_attached_info(phydev);
  
diff --cc drivers/net/ethernet/socionext/sni_ave.c
index f7ecceeb1e28,a50720ec109c..000000000000
--- a/drivers/net/ethernet/socionext/sni_ave.c
+++ b/drivers/net/ethernet/socionext/sni_ave.c
@@@ -1223,11 -1223,10 +1223,18 @@@ static int ave_init(struct net_device *
  	phy_ethtool_get_wol(phydev, &wol);
  	device_set_wakeup_capable(&ndev->dev, !!wol.supported);
  
++<<<<<<< HEAD
 +	if (!phy_interface_is_rgmii(phydev)) {
 +		phydev->supported &= ~PHY_GBIT_FEATURES;
 +		phydev->supported |= PHY_BASIC_FEATURES;
 +	}
 +	phydev->supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
++=======
+ 	if (!phy_interface_is_rgmii(phydev))
+ 		phy_set_max_speed(phydev, SPEED_100);
+ 
+ 	phy_support_asym_pause(phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  	phy_attached_info(phydev);
  
diff --cc drivers/net/phy/phy_device.c
index b9f5f40a7ac1,a0646a66f005..000000000000
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@@ -1757,6 -1765,37 +1757,40 @@@ int phy_set_max_speed(struct phy_devic
  }
  EXPORT_SYMBOL(phy_set_max_speed);
  
++<<<<<<< HEAD
++=======
+ /**
+  * phy_remove_link_mode - Remove a supported link mode
+  * @phydev: phy_device structure to remove link mode from
+  * @link_mode: Link mode to be removed
+  *
+  * Description: Some MACs don't support all link modes which the PHY
+  * does.  e.g. a 1G MAC often does not support 1000Half. Add a helper
+  * to remove a link mode.
+  */
+ void phy_remove_link_mode(struct phy_device *phydev, u32 link_mode)
+ {
+ 	WARN_ON(link_mode > 31);
+ 
+ 	phydev->supported &= ~BIT(link_mode);
+ 	phydev->advertising = phydev->supported;
+ }
+ EXPORT_SYMBOL(phy_remove_link_mode);
+ 
+ /**
+  * phy_support_asym_pause - Enable support of asym pause
+  * @phydev: target phy_device struct
+  *
+  * Description: Called by the MAC to indicate is supports Asym Pause.
+  */
+ void phy_support_asym_pause(struct phy_device *phydev)
+ {
+ 	phydev->supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
+ 	phydev->advertising = phydev->supported;
+ }
+ EXPORT_SYMBOL(phy_support_asym_pause);
+ 
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  static void of_set_phy_supported(struct phy_device *phydev)
  {
  	struct device_node *node = phydev->mdio.dev.of_node;
diff --cc include/linux/phy.h
index 075c2f770d3e,e2db819807c1..000000000000
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@@ -1039,6 -1049,8 +1039,11 @@@ int phy_mii_ioctl(struct phy_device *ph
  int phy_start_interrupts(struct phy_device *phydev);
  void phy_print_status(struct phy_device *phydev);
  int phy_set_max_speed(struct phy_device *phydev, u32 max_speed);
++<<<<<<< HEAD
++=======
+ void phy_remove_link_mode(struct phy_device *phydev, u32 link_mode);
+ void phy_support_asym_pause(struct phy_device *phydev);
++>>>>>>> af8d9bb2f2f4 (net: ethernet: Add helper for MACs which support asym pause)
  
  int phy_register_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask,
  		       int (*run)(struct phy_device *));
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c b/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c
index 3ceb4f95ca7c..289129011b9f 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c
@@ -879,8 +879,8 @@ static bool xgbe_phy_finisar_phy_quirks(struct xgbe_prv_data *pdata)
 	phy_write(phy_data->phydev, 0x00, 0x9140);
 
 	phy_data->phydev->supported = PHY_GBIT_FEATURES;
-	phy_data->phydev->supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
 	phy_data->phydev->advertising = phy_data->phydev->supported;
+	phy_support_asym_pause(phy_data->phydev);
 
 	netif_dbg(pdata, drv, pdata->netdev,
 		  "Finisar PHY quirk in place\n");
@@ -951,8 +951,8 @@ static bool xgbe_phy_belfuse_phy_quirks(struct xgbe_prv_data *pdata)
 	phy_write(phy_data->phydev, 0x00, reg & ~0x00800);
 
 	phy_data->phydev->supported = PHY_GBIT_FEATURES;
-	phy_data->phydev->supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
 	phy_data->phydev->advertising = phy_data->phydev->supported;
+	phy_support_asym_pause(phy_data->phydev);
 
 	netif_dbg(pdata, drv, pdata->netdev,
 		  "BelFuse PHY quirk in place\n");
* Unmerged path drivers/net/ethernet/apm/xgene/xgene_enet_hw.c
* Unmerged path drivers/net/ethernet/broadcom/sb1250-mac.c
* Unmerged path drivers/net/ethernet/broadcom/tg3.c
* Unmerged path drivers/net/ethernet/cortina/gemini.c
diff --git a/drivers/net/ethernet/dnet.c b/drivers/net/ethernet/dnet.c
index 5a847941c46b..70c0f2cab3dc 100644
--- a/drivers/net/ethernet/dnet.c
+++ b/drivers/net/ethernet/dnet.c
@@ -288,9 +288,7 @@ static int dnet_mii_probe(struct net_device *dev)
 	else
 		phydev->supported &= PHY_BASIC_FEATURES;
 
-	phydev->supported |= SUPPORTED_Asym_Pause | SUPPORTED_Pause;
-
-	phydev->advertising = phydev->supported;
+	phy_support_asym_pause(phydev);
 
 	bp->link = 0;
 	bp->speed = 0;
diff --git a/drivers/net/ethernet/faraday/ftgmac100.c b/drivers/net/ethernet/faraday/ftgmac100.c
index ed6c76d20b45..3f319ee66ab4 100644
--- a/drivers/net/ethernet/faraday/ftgmac100.c
+++ b/drivers/net/ethernet/faraday/ftgmac100.c
@@ -1079,8 +1079,7 @@ static int ftgmac100_mii_probe(struct ftgmac100 *priv, phy_interface_t intf)
 	/* Indicate that we support PAUSE frames (see comment in
 	 * Documentation/networking/phy.txt)
 	 */
-	phydev->supported |= SUPPORTED_Pause | SUPPORTED_Asym_Pause;
-	phydev->advertising = phydev->supported;
+	phy_support_asym_pause(phydev);
 
 	/* Display what we found */
 	phy_attached_info(phydev);
diff --git a/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c b/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
index ab02057ac730..023c1e10edcc 100644
--- a/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
@@ -2462,8 +2462,7 @@ static int dpaa_phy_init(struct net_device *net_dev)
 
 	/* Remove any features not supported by the controller */
 	phy_dev->supported &= mac_dev->if_support;
-	phy_dev->supported |= (SUPPORTED_Pause | SUPPORTED_Asym_Pause);
-	phy_dev->advertising = phy_dev->supported;
+	phy_support_asym_pause(phy_dev);
 
 	mac_dev->phy_dev = phy_dev;
 	net_dev->phydev = phy_dev;
diff --git a/drivers/net/ethernet/freescale/gianfar.c b/drivers/net/ethernet/freescale/gianfar.c
index f27f9bae1a4a..40a1a87cd338 100644
--- a/drivers/net/ethernet/freescale/gianfar.c
+++ b/drivers/net/ethernet/freescale/gianfar.c
@@ -1814,8 +1814,8 @@ static int init_phy(struct net_device *dev)
 	phydev->supported &= (GFAR_SUPPORTED | gigabit_support);
 	phydev->advertising = phydev->supported;
 
-	/* Add support for flow control, but don't advertise it by default */
-	phydev->supported |= (SUPPORTED_Pause | SUPPORTED_Asym_Pause);
+	/* Add support for flow control */
+	phy_support_asym_pause(phydev);
 
 	/* disable EEE autoneg, EEE not supported by eTSEC */
 	memset(&edata, 0, sizeof(struct ethtool_eee));
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3pf/hclge_mdio.c
* Unmerged path drivers/net/ethernet/mediatek/mtk_eth_soc.c
diff --git a/drivers/net/ethernet/microchip/lan743x_main.c b/drivers/net/ethernet/microchip/lan743x_main.c
index dd947e4dd3ce..72d7e5e2cfe7 100644
--- a/drivers/net/ethernet/microchip/lan743x_main.c
+++ b/drivers/net/ethernet/microchip/lan743x_main.c
@@ -992,7 +992,6 @@ static int lan743x_phy_open(struct lan743x_adapter *adapter)
 	struct phy_device *phydev;
 	struct net_device *netdev;
 	int ret = -EIO;
-	u32 mii_adv;
 
 	netdev = adapter->netdev;
 	phydev = phy_find_first(adapter->mdiobus);
@@ -1009,10 +1008,8 @@ static int lan743x_phy_open(struct lan743x_adapter *adapter)
 	phydev->supported &= ~SUPPORTED_1000baseT_Half;
 
 	/* support both flow controls */
+	phy_support_asym_pause(phydev);
 	phy->fc_request_control = (FLOW_CTRL_RX | FLOW_CTRL_TX);
-	phydev->advertising &= ~(ADVERTISED_Pause | ADVERTISED_Asym_Pause);
-	mii_adv = (u32)mii_advertise_flowctrl(phy->fc_request_control);
-	phydev->advertising |= mii_adv_to_ethtool_adv_t(mii_adv);
 	phy->fc_autoneg = phydev->autoneg;
 
 	phy_start(phydev);
* Unmerged path drivers/net/ethernet/smsc/smsc911x.c
* Unmerged path drivers/net/ethernet/smsc/smsc9420.c
* Unmerged path drivers/net/ethernet/socionext/sni_ave.c
* Unmerged path drivers/net/phy/phy_device.c
* Unmerged path include/linux/phy.h
