net: Remove SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Florian Fainelli <f.fainelli@gmail.com>
commit cc0c207a5d18333fbfecc964a47ddb182fbcb720
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/cc0c207a.failed

Now that we have converted the bridge code and the drivers to check for
bridge port(s) flags at the time we try to set them, there is no need
for a get() -> set() sequence anymore and
SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT therefore becomes unused.

	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cc0c207a5d18333fbfecc964a47ddb182fbcb720)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/fsl-dpaa2/ethsw/ethsw.c
#	net/dsa/slave.c
diff --cc drivers/staging/fsl-dpaa2/ethsw/ethsw.c
index 1986d15ef513,de4dcabbc29a..000000000000
--- a/drivers/staging/fsl-dpaa2/ethsw/ethsw.c
+++ b/drivers/staging/fsl-dpaa2/ethsw/ethsw.c
@@@ -631,26 -643,7 +631,30 @@@ static void ethsw_teardown_irqs(struct 
  static int swdev_port_attr_get(struct net_device *netdev,
  			       struct switchdev_attr *attr)
  {
++<<<<<<< HEAD
 +	struct ethsw_port_priv *port_priv = netdev_priv(netdev);
 +
 +	switch (attr->id) {
 +	case SWITCHDEV_ATTR_ID_PORT_PARENT_ID:
 +		attr->u.ppid.id_len = 1;
 +		attr->u.ppid.id[0] = port_priv->ethsw_data->dev_id;
 +		break;
 +	case SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS:
 +		attr->u.brport_flags =
 +			(port_priv->ethsw_data->learning ? BR_LEARNING : 0) |
 +			(port_priv->flood ? BR_FLOOD : 0);
 +		break;
 +	case SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT:
 +		attr->u.brport_flags_support = BR_LEARNING | BR_FLOOD;
 +		break;
 +	default:
 +		return -EOPNOTSUPP;
 +	}
 +
 +	return 0;
++=======
+ 	return -EOPNOTSUPP;
++>>>>>>> cc0c207a5d18 (net: Remove SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT)
  }
  
  static int port_attr_stp_state_set(struct net_device *netdev,
diff --cc net/dsa/slave.c
index ee559da90c50,db0a2651070f..000000000000
--- a/net/dsa/slave.c
+++ b/net/dsa/slave.c
@@@ -362,26 -372,23 +362,30 @@@ static int dsa_slave_port_obj_del(struc
  	return err;
  }
  
 -static int dsa_slave_get_port_parent_id(struct net_device *dev,
 -					struct netdev_phys_item_id *ppid)
 +static int dsa_slave_port_attr_get(struct net_device *dev,
 +				   struct switchdev_attr *attr)
  {
++<<<<<<< HEAD
  	struct dsa_port *dp = dsa_slave_to_port(dev);
  	struct dsa_switch *ds = dp->ds;
  	struct dsa_switch_tree *dst = ds->dst;
  
 -	ppid->id_len = sizeof(dst->index);
 -	memcpy(&ppid->id, &dst->index, ppid->id_len);
 +	switch (attr->id) {
 +	case SWITCHDEV_ATTR_ID_PORT_PARENT_ID:
 +		attr->u.ppid.id_len = sizeof(dst->index);
 +		memcpy(&attr->u.ppid.id, &dst->index, attr->u.ppid.id_len);
 +		break;
 +	case SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT:
 +		attr->u.brport_flags_support = 0;
 +		break;
 +	default:
 +		return -EOPNOTSUPP;
 +	}
  
  	return 0;
 -}
 -
 -static int dsa_slave_port_attr_get(struct net_device *dev,
 -				   struct switchdev_attr *attr)
 -{
++=======
+ 	return -EOPNOTSUPP;
++>>>>>>> cc0c207a5d18 (net: Remove SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT)
  }
  
  static inline netdev_tx_t dsa_slave_netpoll_send_skb(struct net_device *dev,
diff --git a/Documentation/networking/switchdev.txt b/Documentation/networking/switchdev.txt
index 82236a17b5e6..deaa9d0cccaa 100644
--- a/Documentation/networking/switchdev.txt
+++ b/Documentation/networking/switchdev.txt
@@ -232,10 +232,8 @@ Learning_sync attribute enables syncing of the learned/forgotten FDB entry to
 the bridge's FDB.  It's possible, but not optimal, to enable learning on the
 device port and on the bridge port, and disable learning_sync.
 
-To support learning and learning_sync port attributes, the driver implements
-switchdev op switchdev_port_attr_get/set for
-SWITCHDEV_ATTR_PORT_ID_BRIDGE_FLAGS. The driver should initialize the attributes
-to the hardware defaults.
+To support learning, the driver implements switchdev op
+switchdev_port_attr_get/set for SWITCHDEV_ATTR_PORT_ID_BRIDGE_FLAGS.
 
 FDB Ageing
 ^^^^^^^^^^
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_switchdev.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum_switchdev.c
index 4940d94bd752..1cc676bf9c2a 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_switchdev.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_switchdev.c
@@ -434,16 +434,7 @@ static void mlxsw_sp_bridge_vlan_put(struct mlxsw_sp_bridge_vlan *bridge_vlan)
 static int mlxsw_sp_port_attr_get(struct net_device *dev,
 				  struct switchdev_attr *attr)
 {
-	switch (attr->id) {
-	case SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT:
-		attr->u.brport_flags_support = BR_LEARNING | BR_FLOOD |
-					       BR_MCAST_FLOOD;
-		break;
-	default:
-		return -EOPNOTSUPP;
-	}
-
-	return 0;
+	return -EOPNOTSUPP;
 }
 
 static int
diff --git a/drivers/net/ethernet/rocker/rocker_main.c b/drivers/net/ethernet/rocker/rocker_main.c
index ebf1c50eee12..6a72356b846c 100644
--- a/drivers/net/ethernet/rocker/rocker_main.c
+++ b/drivers/net/ethernet/rocker/rocker_main.c
@@ -2069,19 +2069,7 @@ static const struct net_device_ops rocker_port_netdev_ops = {
 static int rocker_port_attr_get(struct net_device *dev,
 				struct switchdev_attr *attr)
 {
-	const struct rocker_port *rocker_port = netdev_priv(dev);
-	int err = 0;
-
-	switch (attr->id) {
-	case SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT:
-		err = rocker_world_port_attr_bridge_flags_support_get(rocker_port,
-								      &attr->u.brport_flags_support);
-		break;
-	default:
-		return -EOPNOTSUPP;
-	}
-
-	return err;
+	return -EOPNOTSUPP;
 }
 
 static int rocker_port_attr_set(struct net_device *dev,
* Unmerged path drivers/staging/fsl-dpaa2/ethsw/ethsw.c
diff --git a/include/net/switchdev.h b/include/net/switchdev.h
index d384ebe8e73d..00aac39e5955 100644
--- a/include/net/switchdev.h
+++ b/include/net/switchdev.h
@@ -48,7 +48,6 @@ enum switchdev_attr_id {
 	SWITCHDEV_ATTR_ID_PORT_PARENT_ID,
 	SWITCHDEV_ATTR_ID_PORT_STP_STATE,
 	SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS,
-	SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS_SUPPORT,
 	SWITCHDEV_ATTR_ID_PORT_PRE_BRIDGE_FLAGS,
 	SWITCHDEV_ATTR_ID_PORT_MROUTER,
 	SWITCHDEV_ATTR_ID_BRIDGE_AGEING_TIME,
@@ -67,7 +66,6 @@ struct switchdev_attr {
 		struct netdev_phys_item_id ppid;	/* PORT_PARENT_ID */
 		u8 stp_state;				/* PORT_STP_STATE */
 		unsigned long brport_flags;		/* PORT_{PRE}_BRIDGE_FLAGS */
-		unsigned long brport_flags_support;	/* PORT_BRIDGE_FLAGS_SUPPORT */
 		bool mrouter;				/* PORT_MROUTER */
 		clock_t ageing_time;			/* BRIDGE_AGEING_TIME */
 		bool vlan_filtering;			/* BRIDGE_VLAN_FILTERING */
* Unmerged path net/dsa/slave.c
