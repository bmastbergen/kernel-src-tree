drm/i915: introduce REG_BIT() and REG_GENMASK() to define register contents

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Jani Nikula <jani.nikula@intel.com>
commit 09b434d4f6d22e14500569e7e3f951e0eec4d496
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/09b434d4.failed

Introduce REG_BIT(n) to define register bits and REG_GENMASK(h, l) to
define register bitfield masks.

We define the above as wrappers to BIT() and GENMASK() respectively to
force u32 type to go with our register size, and to add compile time
checks on the bit numbers.

The intention is that these are easier to get right and review against
the spec than hand rolled masks.

Convert power sequencer registers as an example.

v4:
- rebase

v3:
- rename macros to REG_BIT() and REG_GENMASK() to avoid underscore
  prefix and to be in line with kernel macros (Chris)
- add compile time checks (Mika)

v2:
- rename macros to just _BIT() and _MASK() to reduce verbosity

	Cc: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
	Cc: Michal Wajdeczko <michal.wajdeczko@intel.com>
	Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
	Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
	Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
	Acked-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Signed-off-by: Jani Nikula <jani.nikula@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/787307c0ba9bc23471e5ff1e454b8af35771fa37.1552657998.git.jani.nikula@intel.com
(cherry picked from commit 09b434d4f6d22e14500569e7e3f951e0eec4d496)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_reg.h
diff --cc drivers/gpu/drm/i915/i915_reg.h
index a78c6ef1f608,4a025e3c49c4..000000000000
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@@ -116,8 -116,36 +116,36 @@@
   *  #define GEN8_BAR                    _MMIO(0xb888)
   */
  
+ /**
+  * REG_BIT() - Prepare a u32 bit value
+  * @__n: 0-based bit number
+  *
+  * Local wrapper for BIT() to force u32, with compile time checks.
+  *
+  * @return: Value with bit @__n set.
+  */
+ #define REG_BIT(__n)							\
+ 	((u32)(BIT(__n) +						\
+ 	       BUILD_BUG_ON_ZERO(__builtin_constant_p(__n) &&		\
+ 				 ((__n) < 0 || (__n) > 31))))
+ 
+ /**
+  * REG_GENMASK() - Prepare a continuous u32 bitmask
+  * @__high: 0-based high bit
+  * @__low: 0-based low bit
+  *
+  * Local wrapper for GENMASK() to force u32, with compile time checks.
+  *
+  * @return: Continuous bitmask from @__high to @__low, inclusive.
+  */
+ #define REG_GENMASK(__high, __low)					\
+ 	((u32)(GENMASK(__high, __low) +					\
+ 	       BUILD_BUG_ON_ZERO(__builtin_constant_p(__high) &&	\
+ 				 __builtin_constant_p(__low) &&		\
+ 				 ((__low) < 0 || (__high) > 31 || (__low) > (__high)))))
+ 
  typedef struct {
 -	u32 reg;
 +	uint32_t reg;
  } i915_reg_t;
  
  #define _MMIO(r) ((const i915_reg_t){ .reg = (r) })
@@@ -4482,7 -4720,18 +4510,22 @@@ enum 
  
  #define _PP_STATUS			0x61200
  #define PP_STATUS(pps_idx)		_MMIO_PPS(pps_idx, _PP_STATUS)
++<<<<<<< HEAD
 +#define   PP_ON				(1 << 31)
++=======
+ #define   PP_ON				REG_BIT(31)
+ 
+ #define _PP_CONTROL_1			0xc7204
+ #define _PP_CONTROL_2			0xc7304
+ #define ICP_PP_CONTROL(x)		_MMIO(((x) == 1) ? _PP_CONTROL_1 : \
+ 					      _PP_CONTROL_2)
+ #define  POWER_CYCLE_DELAY_MASK		REG_GENMASK(8, 4)
+ #define  POWER_CYCLE_DELAY_SHIFT	4
+ #define  VDD_OVERRIDE_FORCE		REG_BIT(3)
+ #define  BACKLIGHT_ENABLE		REG_BIT(2)
+ #define  PWR_DOWN_ON_RESET		REG_BIT(1)
+ #define  PWR_STATE_TARGET		REG_BIT(0)
++>>>>>>> 09b434d4f6d2 (drm/i915: introduce REG_BIT() and REG_GENMASK() to define register contents)
  /*
   * Indicates that all dependencies of the panel are on:
   *
@@@ -4510,15 -4759,14 +4553,22 @@@
  
  #define _PP_CONTROL			0x61204
  #define PP_CONTROL(pps_idx)		_MMIO_PPS(pps_idx, _PP_CONTROL)
+ #define  PANEL_UNLOCK_MASK		REG_GENMASK(31, 16)
  #define  PANEL_UNLOCK_REGS		(0xabcd << 16)
- #define  PANEL_UNLOCK_MASK		(0xffff << 16)
- #define  BXT_POWER_CYCLE_DELAY_MASK	0x1f0
+ #define  BXT_POWER_CYCLE_DELAY_MASK	REG_GENMASK(8, 4)
  #define  BXT_POWER_CYCLE_DELAY_SHIFT	4
++<<<<<<< HEAD
 +#define  EDP_FORCE_VDD			(1 << 3)
 +#define  EDP_BLC_ENABLE			(1 << 2)
 +#define  PANEL_POWER_RESET		(1 << 1)
 +#define  PANEL_POWER_OFF		(0 << 0)
 +#define  PANEL_POWER_ON			(1 << 0)
++=======
+ #define  EDP_FORCE_VDD			REG_BIT(3)
+ #define  EDP_BLC_ENABLE			REG_BIT(2)
+ #define  PANEL_POWER_RESET		REG_BIT(1)
+ #define  PANEL_POWER_ON			REG_BIT(0)
++>>>>>>> 09b434d4f6d2 (drm/i915: introduce REG_BIT() and REG_GENMASK() to define register contents)
  
  #define _PP_ON_DELAYS			0x61208
  #define PP_ON_DELAYS(pps_idx)		_MMIO_PPS(pps_idx, _PP_ON_DELAYS)
* Unmerged path drivers/gpu/drm/i915/i915_reg.h
