drm/i915: Shuffle stride checking code around

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Ville Syrj채l채 <ville.syrjala@linux.intel.com>
commit a88c40ebb8811c28c39e7cab8ba9c33c86f1fcfd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/a88c40eb.failed

Reorganize some fb stride checking code a bit to prepare for
gtt remapping. And do a bit of s/pitch/stride/ renaming in the
process for a bit more uniformity (apart from the whole
fb->pitches[] thing).

	Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
	Signed-off-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20190509122159.24376-5-ville.syrjala@linux.intel.com
	Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
	Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
(cherry picked from commit a88c40ebb8811c28c39e7cab8ba9c33c86f1fcfd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_display.c
diff --cc drivers/gpu/drm/i915/intel_display.c
index 98867581a27e,2a1079f3a522..000000000000
--- a/drivers/gpu/drm/i915/intel_display.c
+++ b/drivers/gpu/drm/i915/intel_display.c
@@@ -2515,6 -2503,39 +2515,42 @@@ intel_get_format_info(const struct drm_
  	}
  }
  
++<<<<<<< HEAD
++=======
+ bool is_ccs_modifier(u64 modifier)
+ {
+ 	return modifier == I915_FORMAT_MOD_Y_TILED_CCS ||
+ 	       modifier == I915_FORMAT_MOD_Yf_TILED_CCS;
+ }
+ 
+ static
+ u32 intel_fb_max_stride(struct drm_i915_private *dev_priv,
+ 			u32 pixel_format, u64 modifier)
+ {
+ 	struct intel_crtc *crtc;
+ 	struct intel_plane *plane;
+ 
+ 	/*
+ 	 * We assume the primary plane for pipe A has
+ 	 * the highest stride limits of them all.
+ 	 */
+ 	crtc = intel_get_crtc_for_pipe(dev_priv, PIPE_A);
+ 	plane = to_intel_plane(crtc->base.primary);
+ 
+ 	return plane->max_stride(plane, pixel_format, modifier,
+ 				 DRM_MODE_ROTATE_0);
+ }
+ 
+ static u32
+ intel_fb_stride_alignment(const struct drm_framebuffer *fb, int color_plane)
+ {
+ 	if (fb->modifier == DRM_FORMAT_MOD_LINEAR)
+ 		return 64;
+ 	else
+ 		return intel_tile_width_bytes(fb, color_plane);
+ }
+ 
++>>>>>>> a88c40ebb881 (drm/i915: Shuffle stride checking code around)
  static int
  intel_fill_fb_info(struct drm_i915_private *dev_priv,
  		   struct drm_framebuffer *fb)
@@@ -3454,15 -3613,6 +3490,18 @@@ static bool i9xx_plane_get_hw_state(str
  	return ret;
  }
  
++<<<<<<< HEAD
 +static u32
 +intel_fb_stride_alignment(const struct drm_framebuffer *fb, int plane)
 +{
 +	if (fb->modifier == DRM_FORMAT_MOD_LINEAR)
 +		return 64;
 +	else
 +		return intel_tile_width_bytes(fb, plane);
 +}
 +
++=======
++>>>>>>> a88c40ebb881 (drm/i915: Shuffle stride checking code around)
  static void skl_detach_scaler(struct intel_crtc *intel_crtc, int id)
  {
  	struct drm_device *dev = intel_crtc->base.dev;
@@@ -14172,45 -14983,13 +14211,52 @@@ static const struct drm_framebuffer_fun
  	.dirty = intel_user_framebuffer_dirty,
  };
  
++<<<<<<< HEAD
 +static
 +u32 intel_fb_pitch_limit(struct drm_i915_private *dev_priv,
 +			 uint64_t fb_modifier, uint32_t pixel_format)
 +{
 +	u32 gen = INTEL_GEN(dev_priv);
 +
 +	if (gen >= 9) {
 +		int cpp = drm_format_plane_cpp(pixel_format, 0);
 +
 +		/* "The stride in bytes must not exceed the of the size of 8K
 +		 *  pixels and 32K bytes."
 +		 */
 +		return min(8192 * cpp, 32768);
 +	} else if (gen >= 5 && !HAS_GMCH_DISPLAY(dev_priv)) {
 +		return 32*1024;
 +	} else if (gen >= 4) {
 +		if (fb_modifier == I915_FORMAT_MOD_X_TILED)
 +			return 16*1024;
 +		else
 +			return 32*1024;
 +	} else if (gen >= 3) {
 +		if (fb_modifier == I915_FORMAT_MOD_X_TILED)
 +			return 8*1024;
 +		else
 +			return 16*1024;
 +	} else {
 +		/* XXX DSPC is limited to 4k tiled */
 +		return 8*1024;
 +	}
 +}
 +
++=======
++>>>>>>> a88c40ebb881 (drm/i915: Shuffle stride checking code around)
  static int intel_framebuffer_init(struct intel_framebuffer *intel_fb,
  				  struct drm_i915_gem_object *obj,
  				  struct drm_mode_fb_cmd2 *mode_cmd)
  {
  	struct drm_i915_private *dev_priv = to_i915(obj->base.dev);
  	struct drm_framebuffer *fb = &intel_fb->base;
++<<<<<<< HEAD
 +	struct drm_format_name_buf format_name;
 +	u32 pitch_limit;
++=======
+ 	u32 max_stride;
++>>>>>>> a88c40ebb881 (drm/i915: Shuffle stride checking code around)
  	unsigned int tiling, stride;
  	int ret = -EINVAL;
  	int i;
@@@ -14281,9 -15041,9 +14327,15 @@@
  		goto err;
  	}
  
++<<<<<<< HEAD
 +	pitch_limit = intel_fb_pitch_limit(dev_priv, mode_cmd->modifier[0],
 +					   mode_cmd->pixel_format);
 +	if (mode_cmd->pitches[0] > pitch_limit) {
++=======
+ 	max_stride = intel_fb_max_stride(dev_priv, mode_cmd->pixel_format,
+ 					 mode_cmd->modifier[0]);
+ 	if (mode_cmd->pitches[0] > max_stride) {
++>>>>>>> a88c40ebb881 (drm/i915: Shuffle stride checking code around)
  		DRM_DEBUG_KMS("%s pitch (%u) must be at most %d\n",
  			      mode_cmd->modifier[0] != DRM_FORMAT_MOD_LINEAR ?
  			      "tiled" : "linear",
* Unmerged path drivers/gpu/drm/i915/intel_display.c
