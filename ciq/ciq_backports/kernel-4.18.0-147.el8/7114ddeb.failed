nvmet: change aen mask functions to use bit numbers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Jay Sternberg <jay.e.sternberg@intel.com>
commit 7114ddeb40c0ccc584d86df598da4054ca4cd79f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/7114ddeb.failed

Functions nvmet_aen_disabled and nvmet_clear_aen were using
values not bit numbers ie 1 << 9 not 9 for bit function clear_bit
and test_and_set_bit.

	Signed-off-by: Jay Sternberg <jay.e.sternberg@intel.com>
	Reviewed-by: Phil Cayton <phil.cayton@intel.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 7114ddeb40c0ccc584d86df598da4054ca4cd79f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/target/admin-cmd.c
#	drivers/nvme/target/core.c
diff --cc drivers/nvme/target/admin-cmd.c
index ede200e06c9d,2e89f4e3364b..000000000000
--- a/drivers/nvme/target/admin-cmd.c
+++ b/drivers/nvme/target/admin-cmd.c
@@@ -176,12 -176,80 +176,87 @@@ static void nvmet_execute_get_log_chang
  	if (!status)
  		status = nvmet_zero_sgl(req, len, req->data_len - len);
  	ctrl->nr_changed_ns = 0;
++<<<<<<< HEAD
 +	clear_bit(NVME_AEN_CFG_NS_ATTR, &ctrl->aen_masked);
++=======
+ 	nvmet_clear_aen_bit(req, NVME_AEN_BIT_NS_ATTR);
++>>>>>>> 7114ddeb40c0 (nvmet: change aen mask functions to use bit numbers)
  	mutex_unlock(&ctrl->lock);
  out:
  	nvmet_req_complete(req, status);
  }
  
++<<<<<<< HEAD
++=======
+ static u32 nvmet_format_ana_group(struct nvmet_req *req, u32 grpid,
+ 		struct nvme_ana_group_desc *desc)
+ {
+ 	struct nvmet_ctrl *ctrl = req->sq->ctrl;
+ 	struct nvmet_ns *ns;
+ 	u32 count = 0;
+ 
+ 	if (!(req->cmd->get_log_page.lsp & NVME_ANA_LOG_RGO)) {
+ 		rcu_read_lock();
+ 		list_for_each_entry_rcu(ns, &ctrl->subsys->namespaces, dev_link)
+ 			if (ns->anagrpid == grpid)
+ 				desc->nsids[count++] = cpu_to_le32(ns->nsid);
+ 		rcu_read_unlock();
+ 	}
+ 
+ 	desc->grpid = cpu_to_le32(grpid);
+ 	desc->nnsids = cpu_to_le32(count);
+ 	desc->chgcnt = cpu_to_le64(nvmet_ana_chgcnt);
+ 	desc->state = req->port->ana_state[grpid];
+ 	memset(desc->rsvd17, 0, sizeof(desc->rsvd17));
+ 	return sizeof(struct nvme_ana_group_desc) + count * sizeof(__le32);
+ }
+ 
+ static void nvmet_execute_get_log_page_ana(struct nvmet_req *req)
+ {
+ 	struct nvme_ana_rsp_hdr hdr = { 0, };
+ 	struct nvme_ana_group_desc *desc;
+ 	size_t offset = sizeof(struct nvme_ana_rsp_hdr); /* start beyond hdr */
+ 	size_t len;
+ 	u32 grpid;
+ 	u16 ngrps = 0;
+ 	u16 status;
+ 
+ 	status = NVME_SC_INTERNAL;
+ 	desc = kmalloc(sizeof(struct nvme_ana_group_desc) +
+ 			NVMET_MAX_NAMESPACES * sizeof(__le32), GFP_KERNEL);
+ 	if (!desc)
+ 		goto out;
+ 
+ 	down_read(&nvmet_ana_sem);
+ 	for (grpid = 1; grpid <= NVMET_MAX_ANAGRPS; grpid++) {
+ 		if (!nvmet_ana_group_enabled[grpid])
+ 			continue;
+ 		len = nvmet_format_ana_group(req, grpid, desc);
+ 		status = nvmet_copy_to_sgl(req, offset, desc, len);
+ 		if (status)
+ 			break;
+ 		offset += len;
+ 		ngrps++;
+ 	}
+ 	for ( ; grpid <= NVMET_MAX_ANAGRPS; grpid++) {
+ 		if (nvmet_ana_group_enabled[grpid])
+ 			ngrps++;
+ 	}
+ 
+ 	hdr.chgcnt = cpu_to_le64(nvmet_ana_chgcnt);
+ 	hdr.ngrps = cpu_to_le16(ngrps);
+ 	nvmet_clear_aen_bit(req, NVME_AEN_BIT_ANA_CHANGE);
+ 	up_read(&nvmet_ana_sem);
+ 
+ 	kfree(desc);
+ 
+ 	/* copy the header last once we know the number of groups */
+ 	status = nvmet_copy_to_sgl(req, 0, &hdr, sizeof(hdr));
+ out:
+ 	nvmet_req_complete(req, status);
+ }
+ 
++>>>>>>> 7114ddeb40c0 (nvmet: change aen mask functions to use bit numbers)
  static void nvmet_execute_identify_ctrl(struct nvmet_req *req)
  {
  	struct nvmet_ctrl *ctrl = req->sq->ctrl;
diff --cc drivers/nvme/target/core.c
index c1630daee6f0,f42a105ef17f..000000000000
--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@@ -183,6 -188,33 +183,36 @@@ static void nvmet_ns_changed(struct nvm
  	}
  }
  
++<<<<<<< HEAD
++=======
+ void nvmet_send_ana_event(struct nvmet_subsys *subsys,
+ 		struct nvmet_port *port)
+ {
+ 	struct nvmet_ctrl *ctrl;
+ 
+ 	mutex_lock(&subsys->lock);
+ 	list_for_each_entry(ctrl, &subsys->ctrls, subsys_entry) {
+ 		if (port && ctrl->port != port)
+ 			continue;
+ 		if (nvmet_aen_bit_disabled(ctrl, NVME_AEN_BIT_ANA_CHANGE))
+ 			continue;
+ 		nvmet_add_async_event(ctrl, NVME_AER_TYPE_NOTICE,
+ 				NVME_AER_NOTICE_ANA, NVME_LOG_ANA);
+ 	}
+ 	mutex_unlock(&subsys->lock);
+ }
+ 
+ void nvmet_port_send_ana_event(struct nvmet_port *port)
+ {
+ 	struct nvmet_subsys_link *p;
+ 
+ 	down_read(&nvmet_config_sem);
+ 	list_for_each_entry(p, &port->subsystems, entry)
+ 		nvmet_send_ana_event(p->subsys, port);
+ 	up_read(&nvmet_config_sem);
+ }
+ 
++>>>>>>> 7114ddeb40c0 (nvmet: change aen mask functions to use bit numbers)
  int nvmet_register_transport(const struct nvmet_fabrics_ops *ops)
  {
  	int ret = 0;
* Unmerged path drivers/nvme/target/admin-cmd.c
* Unmerged path drivers/nvme/target/core.c
diff --git a/drivers/nvme/target/nvmet.h b/drivers/nvme/target/nvmet.h
index 8dc4ba424a82..99eb5facac79 100644
--- a/drivers/nvme/target/nvmet.h
+++ b/drivers/nvme/target/nvmet.h
@@ -313,19 +313,19 @@ struct nvmet_async_event {
 	u8			log_page;
 };
 
-static inline void nvmet_clear_aen(struct nvmet_req *req, u32 aen_bit)
+static inline void nvmet_clear_aen_bit(struct nvmet_req *req, u32 bn)
 {
 	int rae = le32_to_cpu(req->cmd->common.cdw10[0]) & 1 << 15;
 
 	if (!rae)
-		clear_bit(aen_bit, &req->sq->ctrl->aen_masked);
+		clear_bit(bn, &req->sq->ctrl->aen_masked);
 }
 
-static inline bool nvmet_aen_disabled(struct nvmet_ctrl *ctrl, u32 aen)
+static inline bool nvmet_aen_bit_disabled(struct nvmet_ctrl *ctrl, u32 bn)
 {
-	if (!(READ_ONCE(ctrl->aen_enabled) & aen))
+	if (!(READ_ONCE(ctrl->aen_enabled) & (1 << bn)))
 		return true;
-	return test_and_set_bit(aen, &ctrl->aen_masked);
+	return test_and_set_bit(bn, &ctrl->aen_masked);
 }
 
 u16 nvmet_parse_connect_cmd(struct nvmet_req *req);
diff --git a/include/linux/nvme.h b/include/linux/nvme.h
index 2d219996c348..d729e58d7808 100644
--- a/include/linux/nvme.h
+++ b/include/linux/nvme.h
@@ -488,9 +488,15 @@ enum {
 };
 
 enum {
-	NVME_AEN_CFG_NS_ATTR		= 1 << 8,
-	NVME_AEN_CFG_FW_ACT		= 1 << 9,
-	NVME_AEN_CFG_ANA_CHANGE		= 1 << 11,
+	NVME_AEN_BIT_NS_ATTR		= 8,
+	NVME_AEN_BIT_FW_ACT		= 9,
+	NVME_AEN_BIT_ANA_CHANGE		= 11,
+};
+
+enum {
+	NVME_AEN_CFG_NS_ATTR		= 1 << NVME_AEN_BIT_NS_ATTR,
+	NVME_AEN_CFG_FW_ACT		= 1 << NVME_AEN_BIT_FW_ACT,
+	NVME_AEN_CFG_ANA_CHANGE		= 1 << NVME_AEN_BIT_ANA_CHANGE,
 };
 
 struct nvme_lba_range_type {
