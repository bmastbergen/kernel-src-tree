net/mlx5e: Enable multi-queue and RSS for VF representors

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Gavi Teitz <gavi@mellanox.com>
commit 84a0973386c5b6739627372c3725f5826c71f70c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/84a09733.failed

Increased the amount of channels the representors can open to be the
amount of CPUs. The default amount opened remains one.

Used the standard NIC netdev functions to:
* Set RSS params when building the representors' params.
* Setup an indirect TIR and RQT for the representors upon
  initialization.
* Create a TTC flow table for the representors' indirect TIR (when
  creating the TTC table, mlx5e_set_ttc_basic_params() is not called,
  in order to avoid setting the inner_ttc param, which is not needed).

Added ethtool control to the representors for setting and querying
the amount of open channels. Additionally, included logic in the
representors' ethtool set channels handler which controls a
representor's vport rx rule, so that if there is one open channel
the rx rule steers traffic to the representor's direct TIR, whereas
if there is more than one channel, the rx rule steers traffic to the
new TTC flow table.

	Signed-off-by: Gavi Teitz <gavi@mellanox.com>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 84a0973386c5b6739627372c3725f5826c71f70c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index ed2450e3bde5,be435e76d316..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -978,35 -1060,52 +1059,63 @@@ static void mlx5e_build_rep_netdev(stru
  	netdev->max_mtu = MLX5E_HW2SW_MTU(&priv->channels.params, max_mtu);
  }
  
 -static void mlx5e_init_rep(struct mlx5_core_dev *mdev,
 -			   struct net_device *netdev,
 -			   const struct mlx5e_profile *profile,
 -			   void *ppriv)
 +static int mlx5e_init_rep(struct mlx5_core_dev *mdev,
 +			  struct net_device *netdev,
 +			  const struct mlx5e_profile *profile,
 +			  void *ppriv)
  {
  	struct mlx5e_priv *priv = netdev_priv(netdev);
 +	int err;
  
 -	priv->mdev                         = mdev;
 -	priv->netdev                       = netdev;
 -	priv->profile                      = profile;
 -	priv->ppriv                        = ppriv;
 +	err = mlx5e_netdev_init(netdev, priv, mdev, profile, ppriv);
 +	if (err)
 +		return err;
  
 -	mutex_init(&priv->state_lock);
  
++<<<<<<< HEAD
 +	priv->channels.params.num_channels =
 +				mlx5e_get_netdev_max_channels(netdev);
++=======
+ 	INIT_DELAYED_WORK(&priv->update_stats_work, mlx5e_update_stats_work);
+ 
+ 	priv->channels.params.num_channels = 1;
++>>>>>>> 84a0973386c5 (net/mlx5e: Enable multi-queue and RSS for VF representors)
  
  	mlx5e_build_rep_params(mdev, &priv->channels.params, netdev->mtu);
  	mlx5e_build_rep_netdev(netdev);
  
  	mlx5e_timestamp_init(priv);
 +
 +	return 0;
 +}
 +
 +static void mlx5e_cleanup_rep(struct mlx5e_priv *priv)
 +{
 +	mlx5e_netdev_cleanup(priv->netdev, priv);
  }
  
+ static int mlx5e_create_rep_ttc_table(struct mlx5e_priv *priv)
+ {
+ 	struct ttc_params ttc_params = {};
+ 	int tt, err;
+ 
+ 	priv->fs.ns = mlx5_get_flow_namespace(priv->mdev,
+ 					      MLX5_FLOW_NAMESPACE_KERNEL);
+ 
+ 	/* The inner_ttc in the ttc params is intentionally not set */
+ 	ttc_params.any_tt_tirn = priv->direct_tir[0].tirn;
+ 	mlx5e_set_ttc_ft_params(&ttc_params);
+ 	for (tt = 0; tt < MLX5E_NUM_INDIR_TIRS; tt++)
+ 		ttc_params.indir_tirn[tt] = priv->indir_tir[tt].tirn;
+ 
+ 	err = mlx5e_create_ttc_table(priv, &ttc_params, &priv->fs.ttc);
+ 	if (err) {
+ 		netdev_err(priv->netdev, "Failed to create rep ttc table, err=%d\n", err);
+ 		return err;
+ 	}
+ 	return 0;
+ }
+ 
  static int mlx5e_create_rep_vport_rx_rule(struct mlx5e_priv *priv)
  {
  	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
@@@ -1092,6 -1211,7 +1222,10 @@@ static const struct mlx5e_profile mlx5e
  	.init_tx		= mlx5e_init_rep_tx,
  	.cleanup_tx		= mlx5e_cleanup_nic_tx,
  	.update_stats           = mlx5e_rep_update_hw_counters,
++<<<<<<< HEAD
++=======
+ 	.max_nch		= mlx5e_get_max_num_channels,
++>>>>>>> 84a0973386c5 (net/mlx5e: Enable multi-queue and RSS for VF representors)
  	.update_carrier		= NULL,
  	.rx_handlers.handle_rx_cqe       = mlx5e_handle_rx_cqe_rep,
  	.rx_handlers.handle_rx_cqe_mpwqe = mlx5e_handle_rx_cqe_mpwrq,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
