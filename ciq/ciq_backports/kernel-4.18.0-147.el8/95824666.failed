net/mlx5: Handle LAG FW commands failure gracefully

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Aviv Heller <avivh@mellanox.com>
commit 9582466640432c86fb060a4fa4d9d3c48e708ca6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/95824666.failed

When create_lag or destroy_lag FW commands fail, display an appropriate
error message, and try to recover, if possible.

	Signed-off-by: Aviv Heller <avivh@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Reviewed-by: Yevgeny Kliteynik <kliteyn@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 9582466640432c86fb060a4fa4d9d3c48e708ca6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/lag.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/lag.c
index db5ef7023371,5187dc7a72a3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/lag.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lag.c
@@@ -228,25 -241,52 +228,60 @@@ static int mlx5_create_lag(struct mlx5_
  	return err;
  }
  
++<<<<<<< HEAD
 +static void mlx5_activate_lag(struct mlx5_lag *ldev,
 +			      struct lag_tracker *tracker)
 +{
 +	ldev->flags |= MLX5_LAG_FLAG_BONDED;
 +	mlx5_create_lag(ldev, tracker);
++=======
+ static int mlx5_activate_lag(struct mlx5_lag *ldev,
+ 			     struct lag_tracker *tracker,
+ 			     u8 flags)
+ {
+ 	bool roce_lag = !!(flags & MLX5_LAG_FLAG_ROCE);
+ 	struct mlx5_core_dev *dev0 = ldev->pf[0].dev;
+ 	int err;
+ 
+ 	err = mlx5_create_lag(ldev, tracker);
+ 	if (err) {
+ 		if (roce_lag) {
+ 			mlx5_core_err(dev0,
+ 				      "Failed to activate RoCE LAG\n");
+ 		} else {
+ 			mlx5_core_err(dev0,
+ 				      "Failed to activate VF LAG\n"
+ 				      "Make sure all VFs are unbound prior to VF LAG activation or deactivation\n");
+ 		}
+ 		return err;
+ 	}
+ 
+ 	ldev->flags |= flags;
+ 	return 0;
++>>>>>>> 958246664043 (net/mlx5: Handle LAG FW commands failure gracefully)
  }
  
- static void mlx5_deactivate_lag(struct mlx5_lag *ldev)
+ static int mlx5_deactivate_lag(struct mlx5_lag *ldev)
  {
  	struct mlx5_core_dev *dev0 = ldev->pf[0].dev;
+ 	bool roce_lag = __mlx5_lag_is_roce(ldev);
  	int err;
  
 -	ldev->flags &= ~MLX5_LAG_MODE_FLAGS;
 +	ldev->flags &= ~MLX5_LAG_FLAG_BONDED;
  
  	err = mlx5_cmd_destroy_lag(dev0);
- 	if (err)
- 		mlx5_core_err(dev0,
- 			      "Failed to destroy LAG (%d)\n",
- 			      err);
+ 	if (err) {
+ 		if (roce_lag) {
+ 			mlx5_core_err(dev0,
+ 				      "Failed to deactivate RoCE LAG; driver restart required\n");
+ 		} else {
+ 			mlx5_core_err(dev0,
+ 				      "Failed to deactivate VF LAG; driver restart required\n"
+ 				      "Make sure all VFs are unbound prior to VF LAG activation or deactivation\n");
+ 		}
+ 	}
+ 
+ 	return err;
  }
  
  static bool mlx5_lag_check_prereq(struct mlx5_lag *ldev)
@@@ -263,9 -323,9 +318,14 @@@ static void mlx5_do_bond(struct mlx5_la
  {
  	struct mlx5_core_dev *dev0 = ldev->pf[0].dev;
  	struct mlx5_core_dev *dev1 = ldev->pf[1].dev;
 +	bool do_bond, sriov_enabled;
  	struct lag_tracker tracker;
++<<<<<<< HEAD
 +	int i;
++=======
+ 	bool do_bond, roce_lag;
+ 	int err;
++>>>>>>> 958246664043 (net/mlx5: Handle LAG FW commands failure gracefully)
  
  	if (!dev0 || !dev1)
  		return;
@@@ -279,14 -337,23 +339,32 @@@
  	do_bond = tracker.is_bonded && mlx5_lag_check_prereq(ldev);
  
  	if (do_bond && !__mlx5_lag_is_active(ldev)) {
++<<<<<<< HEAD
 +		if (!sriov_enabled)
 +			for (i = 0; i < MLX5_MAX_PORTS; i++)
 +				mlx5_remove_dev_by_protocol(ldev->pf[i].dev,
 +							    MLX5_INTERFACE_PROTOCOL_IB);
 +
 +		mlx5_activate_lag(ldev, &tracker);
++=======
+ 		roce_lag = !mlx5_sriov_is_enabled(dev0) &&
+ 			   !mlx5_sriov_is_enabled(dev1);
+ 
+ 		if (roce_lag)
+ 			mlx5_lag_remove_ib_devices(ldev);
+ 
+ 		err = mlx5_activate_lag(ldev, &tracker,
+ 					roce_lag ? MLX5_LAG_FLAG_ROCE :
+ 					MLX5_LAG_FLAG_SRIOV);
+ 		if (err) {
+ 			if (roce_lag)
+ 				mlx5_lag_add_ib_devices(ldev);
+ 
+ 			return;
+ 		}
++>>>>>>> 958246664043 (net/mlx5: Handle LAG FW commands failure gracefully)
  
 -		if (roce_lag) {
 +		if (!sriov_enabled) {
  			mlx5_add_dev_by_protocol(dev0, MLX5_INTERFACE_PROTOCOL_IB);
  			mlx5_nic_vport_enable_roce(dev1);
  		}
@@@ -298,13 -367,12 +376,20 @@@
  			mlx5_nic_vport_disable_roce(dev1);
  		}
  
- 		mlx5_deactivate_lag(ldev);
+ 		err = mlx5_deactivate_lag(ldev);
+ 		if (err)
+ 			return;
  
++<<<<<<< HEAD
 +		if (!sriov_enabled)
 +			for (i = 0; i < MLX5_MAX_PORTS; i++)
 +				if (ldev->pf[i].dev)
 +					mlx5_add_dev_by_protocol(ldev->pf[i].dev,
 +								 MLX5_INTERFACE_PROTOCOL_IB);
++=======
+ 		if (roce_lag)
+ 			mlx5_lag_add_ib_devices(ldev);
++>>>>>>> 958246664043 (net/mlx5: Handle LAG FW commands failure gracefully)
  	}
  }
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/lag.c
