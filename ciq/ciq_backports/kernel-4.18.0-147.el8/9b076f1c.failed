fanotify: introduce new event mask FAN_OPEN_EXEC

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Matthew Bobrowski <mbobrowski@mbobrowski.org>
commit 9b076f1c0f4869b838a1b7aa0edb5664d47ec8aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/9b076f1c.failed

A new event mask FAN_OPEN_EXEC has been defined so that users have the
ability to receive events specifically when a file has been opened with
the intent to be executed. Events of FAN_OPEN_EXEC type will be
generated when a file has been opened using either execve(), execveat()
or uselib() system calls.

The feature is implemented within fsnotify_open() by generating the
FAN_OPEN_EXEC event type if __FMODE_EXEC is set within file->f_flags.

	Signed-off-by: Matthew Bobrowski <mbobrowski@mbobrowski.org>
	Reviewed-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
(cherry picked from commit 9b076f1c0f4869b838a1b7aa0edb5664d47ec8aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/notify/fanotify/fanotify.c
#	include/linux/fanotify.h
diff --cc fs/notify/fanotify/fanotify.c
index cdce46db0d71,5a1a15f646ba..000000000000
--- a/fs/notify/fanotify/fanotify.c
+++ b/fs/notify/fanotify/fanotify.c
@@@ -198,8 -210,12 +198,16 @@@ static int fanotify_handle_event(struc
  	BUILD_BUG_ON(FAN_OPEN_PERM != FS_OPEN_PERM);
  	BUILD_BUG_ON(FAN_ACCESS_PERM != FS_ACCESS_PERM);
  	BUILD_BUG_ON(FAN_ONDIR != FS_ISDIR);
+ 	BUILD_BUG_ON(FAN_OPEN_EXEC != FS_OPEN_EXEC);
  
++<<<<<<< HEAD
 +	if (!fanotify_should_send_event(iter_info, mask, data, data_type))
++=======
+ 	BUILD_BUG_ON(HWEIGHT32(ALL_FANOTIFY_EVENT_BITS) != 11);
+ 
+ 	mask = fanotify_group_event_mask(iter_info, mask, data, data_type);
+ 	if (!mask)
++>>>>>>> 9b076f1c0f48 (fanotify: introduce new event mask FAN_OPEN_EXEC)
  		return 0;
  
  	pr_debug("%s: group=%p inode=%p mask=%x\n", __func__, group, inode,
diff --cc include/linux/fanotify.h
index e70fccc3757e,c521e4264f2b..000000000000
--- a/include/linux/fanotify.h
+++ b/include/linux/fanotify.h
@@@ -10,4 -7,58 +10,61 @@@
  #define FAN_GROUP_FLAG(group, flag) \
  	((group)->fanotify_data.flags & (flag))
  
++<<<<<<< HEAD
++=======
+ /*
+  * Flags allowed to be passed from/to userspace.
+  *
+  * We intentionally do not add new bits to the old FAN_ALL_* constants, because
+  * they are uapi exposed constants. If there are programs out there using
+  * these constant, the programs may break if re-compiled with new uapi headers
+  * and then run on an old kernel.
+  */
+ #define FANOTIFY_CLASS_BITS	(FAN_CLASS_NOTIF | FAN_CLASS_CONTENT | \
+ 				 FAN_CLASS_PRE_CONTENT)
+ 
+ #define FANOTIFY_INIT_FLAGS	(FANOTIFY_CLASS_BITS | \
+ 				 FAN_REPORT_TID | \
+ 				 FAN_CLOEXEC | FAN_NONBLOCK | \
+ 				 FAN_UNLIMITED_QUEUE | FAN_UNLIMITED_MARKS)
+ 
+ #define FANOTIFY_MARK_TYPE_BITS	(FAN_MARK_INODE | FAN_MARK_MOUNT | \
+ 				 FAN_MARK_FILESYSTEM)
+ 
+ #define FANOTIFY_MARK_FLAGS	(FANOTIFY_MARK_TYPE_BITS | \
+ 				 FAN_MARK_ADD | \
+ 				 FAN_MARK_REMOVE | \
+ 				 FAN_MARK_DONT_FOLLOW | \
+ 				 FAN_MARK_ONLYDIR | \
+ 				 FAN_MARK_IGNORED_MASK | \
+ 				 FAN_MARK_IGNORED_SURV_MODIFY | \
+ 				 FAN_MARK_FLUSH)
+ 
+ /* Events that user can request to be notified on */
+ #define FANOTIFY_EVENTS		(FAN_ACCESS | FAN_MODIFY | \
+ 				 FAN_CLOSE | FAN_OPEN | FAN_OPEN_EXEC)
+ 
+ /* Events that require a permission response from user */
+ #define FANOTIFY_PERM_EVENTS	(FAN_OPEN_PERM | FAN_ACCESS_PERM)
+ 
+ /* Extra flags that may be reported with event or control handling of events */
+ #define FANOTIFY_EVENT_FLAGS	(FAN_EVENT_ON_CHILD | FAN_ONDIR)
+ 
+ /* Events that may be reported to user */
+ #define FANOTIFY_OUTGOING_EVENTS	(FANOTIFY_EVENTS | \
+ 					 FANOTIFY_PERM_EVENTS | \
+ 					 FAN_Q_OVERFLOW)
+ 
+ #define ALL_FANOTIFY_EVENT_BITS		(FANOTIFY_OUTGOING_EVENTS | \
+ 					 FANOTIFY_EVENT_FLAGS)
+ 
+ /* Do not use these old uapi constants internally */
+ #undef FAN_ALL_CLASS_BITS
+ #undef FAN_ALL_INIT_FLAGS
+ #undef FAN_ALL_MARK_FLAGS
+ #undef FAN_ALL_EVENTS
+ #undef FAN_ALL_PERM_EVENTS
+ #undef FAN_ALL_OUTGOING_EVENTS
+ 
++>>>>>>> 9b076f1c0f48 (fanotify: introduce new event mask FAN_OPEN_EXEC)
  #endif /* _LINUX_FANOTIFY_H */
* Unmerged path fs/notify/fanotify/fanotify.c
diff --git a/fs/notify/fsnotify.c b/fs/notify/fsnotify.c
index dff7a35ba887..07c1d17209a9 100644
--- a/fs/notify/fsnotify.c
+++ b/fs/notify/fsnotify.c
@@ -392,7 +392,7 @@ static __init int fsnotify_init(void)
 {
 	int ret;
 
-	BUILD_BUG_ON(HWEIGHT32(ALL_FSNOTIFY_BITS) != 23);
+	BUILD_BUG_ON(HWEIGHT32(ALL_FSNOTIFY_BITS) != 24);
 
 	ret = init_srcu_struct(&fsnotify_mark_srcu);
 	if (ret)
* Unmerged path include/linux/fanotify.h
diff --git a/include/linux/fsnotify.h b/include/linux/fsnotify.h
index fd1ce10553bf..1fe5ac93b252 100644
--- a/include/linux/fsnotify.h
+++ b/include/linux/fsnotify.h
@@ -215,6 +215,8 @@ static inline void fsnotify_open(struct file *file)
 
 	if (S_ISDIR(inode->i_mode))
 		mask |= FS_ISDIR;
+	if (file->f_flags & __FMODE_EXEC)
+		mask |= FS_OPEN_EXEC;
 
 	fsnotify_parent(path, NULL, mask);
 	fsnotify(inode, mask, path, FSNOTIFY_EVENT_PATH, NULL, 0);
diff --git a/include/linux/fsnotify_backend.h b/include/linux/fsnotify_backend.h
index 7780a1a2c141..ac4d516b9deb 100644
--- a/include/linux/fsnotify_backend.h
+++ b/include/linux/fsnotify_backend.h
@@ -38,6 +38,7 @@
 #define FS_DELETE		0x00000200	/* Subfile was deleted */
 #define FS_DELETE_SELF		0x00000400	/* Self was deleted */
 #define FS_MOVE_SELF		0x00000800	/* Self was moved */
+#define FS_OPEN_EXEC		0x00001000	/* File was opened for exec */
 
 #define FS_UNMOUNT		0x00002000	/* inode on umount fs */
 #define FS_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
@@ -62,7 +63,8 @@
 #define FS_EVENTS_POSS_ON_CHILD   (FS_ACCESS | FS_MODIFY | FS_ATTRIB |\
 				   FS_CLOSE_WRITE | FS_CLOSE_NOWRITE | FS_OPEN |\
 				   FS_MOVED_FROM | FS_MOVED_TO | FS_CREATE |\
-				   FS_DELETE | FS_OPEN_PERM | FS_ACCESS_PERM)
+				   FS_DELETE | FS_OPEN_PERM | FS_ACCESS_PERM | \
+				   FS_OPEN_EXEC)
 
 #define FS_MOVE			(FS_MOVED_FROM | FS_MOVED_TO)
 
@@ -74,7 +76,8 @@
 			     FS_MOVED_FROM | FS_MOVED_TO | FS_CREATE | \
 			     FS_DELETE | FS_DELETE_SELF | FS_MOVE_SELF | \
 			     FS_UNMOUNT | FS_Q_OVERFLOW | FS_IN_IGNORED | \
-			     FS_OPEN_PERM | FS_ACCESS_PERM | FS_DN_RENAME)
+			     FS_OPEN_PERM | FS_ACCESS_PERM | FS_DN_RENAME | \
+			     FS_OPEN_EXEC)
 
 /* Extra flags that may be reported with event or control handling of events */
 #define ALL_FSNOTIFY_FLAGS  (FS_EXCL_UNLINK | FS_ISDIR | FS_IN_ONESHOT | \
diff --git a/include/uapi/linux/fanotify.h b/include/uapi/linux/fanotify.h
index 74247917de04..2680bac12f60 100644
--- a/include/uapi/linux/fanotify.h
+++ b/include/uapi/linux/fanotify.h
@@ -10,6 +10,7 @@
 #define FAN_CLOSE_WRITE		0x00000008	/* Writtable file closed */
 #define FAN_CLOSE_NOWRITE	0x00000010	/* Unwrittable file closed */
 #define FAN_OPEN		0x00000020	/* File was opened */
+#define FAN_OPEN_EXEC		0x00001000	/* File was opened for exec */
 
 #define FAN_Q_OVERFLOW		0x00004000	/* Event queued overflowed */
 
