scsi: megaraid_sas: optimize raid context access in IO path

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
commit 9e77018eefafbf2d480e5868de11a7e49c9b1858
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/9e77018e.failed

No functional change.  Use local variables when accessing raid context in
IO path.  Improves code readability.

	Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 9e77018eefafbf2d480e5868de11a7e49c9b1858)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_fusion.c
diff --cc drivers/scsi/megaraid/megaraid_sas_fusion.c
index 45da1bd279f5,7df7e2c8d4b3..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@@ -2728,9 -2729,7 +2730,13 @@@ megasas_build_ldio_fusion(struct megasa
  	cmd->request_desc->SCSIIO.MSIxIndex =
  		instance->reply_map[raw_smp_processor_id()];
  
++<<<<<<< HEAD
 +	praid_context = &io_request->RaidContext;
 +
 +	if (instance->adapter_type >= VENTURA_SERIES) {
++=======
+ 	if (instance->adapter_type == VENTURA_SERIES) {
++>>>>>>> 9e77018eefaf (scsi: megaraid_sas: optimize raid context access in IO path)
  		/* FP for Optimal raid level 1.
  		 * All large RAID-1 writes (> 32 KiB, both WT and WB modes)
  		 * are built by the driver as LD I/Os.
@@@ -2793,20 -2791,16 +2798,26 @@@
  				cmd->request_desc->SCSIIO.RequestFlags =
  					(MEGASAS_REQ_DESCRIPT_FLAGS_NO_LOCK <<
  					MEGASAS_REQ_DESCRIPT_FLAGS_TYPE_SHIFT);
- 			io_request->RaidContext.raid_context.type
- 				= MPI2_TYPE_CUDA;
- 			io_request->RaidContext.raid_context.nseg = 0x1;
+ 			rctx->type = MPI2_TYPE_CUDA;
+ 			rctx->nseg = 0x1;
  			io_request->IoFlags |= cpu_to_le16(MPI25_SAS_DEVICE0_FLAGS_ENABLED_FAST_PATH);
- 			io_request->RaidContext.raid_context.reg_lock_flags |=
+ 			rctx->reg_lock_flags |=
  			  (MR_RL_FLAGS_GRANT_DESTINATION_CUDA |
  			   MR_RL_FLAGS_SEQ_NUM_ENABLE);
++<<<<<<< HEAD
 +		} else if (instance->adapter_type >= VENTURA_SERIES) {
 +			io_request->RaidContext.raid_context_g35.nseg_type |=
 +						(1 << RAID_CONTEXT_NSEG_SHIFT);
 +			io_request->RaidContext.raid_context_g35.nseg_type |=
 +						(MPI2_TYPE_CUDA << RAID_CONTEXT_TYPE_SHIFT);
 +			io_request->RaidContext.raid_context_g35.routing_flags |=
 +						(1 << MR_RAID_CTX_ROUTINGFLAGS_SQN_SHIFT);
++=======
+ 		} else if (instance->adapter_type == VENTURA_SERIES) {
+ 			rctx_g35->nseg_type |= (1 << RAID_CONTEXT_NSEG_SHIFT);
+ 			rctx_g35->nseg_type |= (MPI2_TYPE_CUDA << RAID_CONTEXT_TYPE_SHIFT);
+ 			rctx_g35->routing_flags |= (1 << MR_RAID_CTX_ROUTINGFLAGS_SQN_SHIFT);
++>>>>>>> 9e77018eefaf (scsi: megaraid_sas: optimize raid context access in IO path)
  			io_request->IoFlags |=
  				cpu_to_le16(MPI25_SAS_DEVICE0_FLAGS_ENABLED_FAST_PATH);
  		}
@@@ -2819,12 -2813,10 +2830,16 @@@
  					&io_info, local_map_ptr);
  			scp->SCp.Status |= MEGASAS_LOAD_BALANCE_FLAG;
  			cmd->pd_r1_lb = io_info.pd_after_lb;
++<<<<<<< HEAD
 +			if (instance->adapter_type >= VENTURA_SERIES)
 +				io_request->RaidContext.raid_context_g35.span_arm
 +					= io_info.span_arm;
++=======
+ 			if (instance->adapter_type == VENTURA_SERIES)
+ 				rctx_g35->span_arm = io_info.span_arm;
++>>>>>>> 9e77018eefaf (scsi: megaraid_sas: optimize raid context access in IO path)
  			else
- 				io_request->RaidContext.raid_context.span_arm
- 					= io_info.span_arm;
+ 				rctx->span_arm = io_info.span_arm;
  
  		} else
  			scp->SCp.Status &= ~MEGASAS_LOAD_BALANCE_FLAG;
@@@ -2859,19 -2850,15 +2873,27 @@@
  				cmd->request_desc->SCSIIO.RequestFlags =
  					(MEGASAS_REQ_DESCRIPT_FLAGS_NO_LOCK <<
  					MEGASAS_REQ_DESCRIPT_FLAGS_TYPE_SHIFT);
- 			io_request->RaidContext.raid_context.type
- 				= MPI2_TYPE_CUDA;
- 			io_request->RaidContext.raid_context.reg_lock_flags |=
+ 			rctx->type = MPI2_TYPE_CUDA;
+ 			rctx->reg_lock_flags |=
  				(MR_RL_FLAGS_GRANT_DESTINATION_CPU0 |
++<<<<<<< HEAD
 +				 MR_RL_FLAGS_SEQ_NUM_ENABLE);
 +			io_request->RaidContext.raid_context.nseg = 0x1;
 +		} else if (instance->adapter_type >= VENTURA_SERIES) {
 +			io_request->RaidContext.raid_context_g35.routing_flags |=
 +					(1 << MR_RAID_CTX_ROUTINGFLAGS_SQN_SHIFT);
 +			io_request->RaidContext.raid_context_g35.nseg_type |=
 +					(1 << RAID_CONTEXT_NSEG_SHIFT);
 +			io_request->RaidContext.raid_context_g35.nseg_type |=
 +					(MPI2_TYPE_CUDA << RAID_CONTEXT_TYPE_SHIFT);
++=======
+ 					MR_RL_FLAGS_SEQ_NUM_ENABLE);
+ 			rctx->nseg = 0x1;
+ 		} else if (instance->adapter_type == VENTURA_SERIES) {
+ 			rctx_g35->routing_flags |= (1 << MR_RAID_CTX_ROUTINGFLAGS_SQN_SHIFT);
+ 			rctx_g35->nseg_type |= (1 << RAID_CONTEXT_NSEG_SHIFT);
+ 			rctx_g35->nseg_type |= (MPI2_TYPE_CUDA << RAID_CONTEXT_TYPE_SHIFT);
++>>>>>>> 9e77018eefaf (scsi: megaraid_sas: optimize raid context access in IO path)
  		}
  		io_request->Function = MEGASAS_MPI2_FUNCTION_LD_IO_REQUEST;
  		io_request->DevHandle = cpu_to_le16(device_id);
* Unmerged path drivers/scsi/megaraid/megaraid_sas_fusion.c
