bpf: don't set id on after map lookup with ptr_to_map_val return

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 4d31f30148cea6e97e42616231eed55295117fe7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/4d31f301.failed

In the verifier there is no such semantics where registers with
PTR_TO_MAP_VALUE type have an id assigned to them. This is only
used in PTR_TO_MAP_VALUE_OR_NULL and later on nullified once the
test against NULL has been pattern matched and type transformed
into PTR_TO_MAP_VALUE.

Fixes: 3e6a4b3e0289 ("bpf/verifier: introduce BPF_PTR_TO_MAP_VALUE")
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Cc: Roman Gushchin <guro@fb.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 4d31f30148cea6e97e42616231eed55295117fe7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
diff --cc kernel/bpf/verifier.c
index 5a80f28cb000,1971ca325fb4..000000000000
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@@ -2533,7 -2864,19 +2529,23 @@@ static int check_helper_call(struct bpf
  			return -EINVAL;
  		}
  		regs[BPF_REG_0].map_ptr = meta.map_ptr;
++<<<<<<< HEAD
 +		regs[BPF_REG_0].id = ++env->id_gen;
++=======
+ 		if (fn->ret_type == RET_PTR_TO_MAP_VALUE) {
+ 			regs[BPF_REG_0].type = PTR_TO_MAP_VALUE;
+ 		} else {
+ 			regs[BPF_REG_0].type = PTR_TO_MAP_VALUE_OR_NULL;
+ 			regs[BPF_REG_0].id = ++env->id_gen;
+ 		}
+ 	} else if (fn->ret_type == RET_PTR_TO_SOCKET_OR_NULL) {
+ 		int id = acquire_reference_state(env, insn_idx);
+ 		if (id < 0)
+ 			return id;
+ 		mark_reg_known_zero(env, regs, BPF_REG_0);
+ 		regs[BPF_REG_0].type = PTR_TO_SOCKET_OR_NULL;
+ 		regs[BPF_REG_0].id = id;
++>>>>>>> 4d31f30148ce (bpf: don't set id on after map lookup with ptr_to_map_val return)
  	} else {
  		verbose(env, "unknown return type %d of func %s#%d\n",
  			fn->ret_type, func_id_name(func_id), func_id);
* Unmerged path kernel/bpf/verifier.c
