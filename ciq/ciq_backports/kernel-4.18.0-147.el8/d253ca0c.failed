x86/mm/cpa: Add set_direct_map_*() functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Rick Edgecombe <rick.p.edgecombe@intel.com>
commit d253ca0c3865a8d9a8c01143cf20425e0be4d0ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/d253ca0c.failed

Add two new functions set_direct_map_default_noflush() and
set_direct_map_invalid_noflush() for setting the direct map alias for the
page to its default valid permissions and to an invalid state that cannot
be cached in a TLB, respectively. These functions do not flush the TLB.

Note, __kernel_map_pages() does something similar but flushes the TLB and
doesn't reset the permission bits to default on all architectures.

Also add an ARCH config ARCH_HAS_SET_DIRECT_MAP for specifying whether
these have an actual implementation or a default empty one.

	Signed-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: <akpm@linux-foundation.org>
	Cc: <ard.biesheuvel@linaro.org>
	Cc: <deneen.t.dock@intel.com>
	Cc: <kernel-hardening@lists.openwall.com>
	Cc: <kristen@linux.intel.com>
	Cc: <linux_dti@icloud.com>
	Cc: <will.deacon@arm.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Nadav Amit <nadav.amit@gmail.com>
	Cc: Rik van Riel <riel@surriel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20190426001143.4983-15-namit@vmware.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d253ca0c3865a8d9a8c01143cf20425e0be4d0ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	include/linux/set_memory.h
diff --cc arch/x86/Kconfig
index 9e4d0be6f50c,cee3f22ce8d1..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -65,7 -65,7 +65,11 @@@ config X8
  	select ARCH_HAS_UACCESS_FLUSHCACHE	if X86_64
  	select ARCH_HAS_UACCESS_MCSAFE		if X86_64 && X86_MCE
  	select ARCH_HAS_SET_MEMORY
++<<<<<<< HEAD
 +	select ARCH_HAS_SG_CHAIN
++=======
+ 	select ARCH_HAS_SET_DIRECT_MAP
++>>>>>>> d253ca0c3865 (x86/mm/cpa: Add set_direct_map_*() functions)
  	select ARCH_HAS_STRICT_KERNEL_RWX
  	select ARCH_HAS_STRICT_MODULE_RWX
  	select ARCH_HAS_SYNC_CORE_BEFORE_USERMODE
diff --cc include/linux/set_memory.h
index da5178216da5,b5071497b8cb..000000000000
--- a/include/linux/set_memory.h
+++ b/include/linux/set_memory.h
@@@ -17,6 -17,31 +17,34 @@@ static inline int set_memory_x(unsigne
  static inline int set_memory_nx(unsigned long addr, int numpages) { return 0; }
  #endif
  
++<<<<<<< HEAD
++=======
+ #ifndef CONFIG_ARCH_HAS_SET_DIRECT_MAP
+ static inline int set_direct_map_invalid_noflush(struct page *page)
+ {
+ 	return 0;
+ }
+ static inline int set_direct_map_default_noflush(struct page *page)
+ {
+ 	return 0;
+ }
+ #endif
+ 
+ #ifndef set_mce_nospec
+ static inline int set_mce_nospec(unsigned long pfn)
+ {
+ 	return 0;
+ }
+ #endif
+ 
+ #ifndef clear_mce_nospec
+ static inline int clear_mce_nospec(unsigned long pfn)
+ {
+ 	return 0;
+ }
+ #endif
+ 
++>>>>>>> d253ca0c3865 (x86/mm/cpa: Add set_direct_map_*() functions)
  #ifndef CONFIG_ARCH_HAS_MEM_ENCRYPT
  static inline int set_memory_encrypted(unsigned long addr, int numpages)
  {
diff --git a/arch/Kconfig b/arch/Kconfig
index f03b72644902..f2a2d1c6fee4 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -240,6 +240,10 @@ config ARCH_HAS_FORTIFY_SOURCE
 config ARCH_HAS_SET_MEMORY
 	bool
 
+# Select if arch has all set_direct_map_invalid/default() functions
+config ARCH_HAS_SET_DIRECT_MAP
+	bool
+
 # Select if arch init_task must go in the __init_task_data section
 config ARCH_TASK_STRUCT_ON_STACK
        bool
* Unmerged path arch/x86/Kconfig
diff --git a/arch/x86/include/asm/set_memory.h b/arch/x86/include/asm/set_memory.h
index bd090367236c..9abd49698129 100644
--- a/arch/x86/include/asm/set_memory.h
+++ b/arch/x86/include/asm/set_memory.h
@@ -84,6 +84,9 @@ int set_pages_nx(struct page *page, int numpages);
 int set_pages_ro(struct page *page, int numpages);
 int set_pages_rw(struct page *page, int numpages);
 
+int set_direct_map_invalid_noflush(struct page *page);
+int set_direct_map_default_noflush(struct page *page);
+
 extern int kernel_set_to_readonly;
 void set_kernel_text_rw(void);
 void set_kernel_text_ro(void);
diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index 4020d9779795..921f641ade5e 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -2012,8 +2012,6 @@ int set_pages_rw(struct page *page, int numpages)
 	return set_memory_rw(addr, numpages);
 }
 
-#ifdef CONFIG_DEBUG_PAGEALLOC
-
 static int __set_pages_p(struct page *page, int numpages)
 {
 	unsigned long tempaddr = (unsigned long) page_address(page);
@@ -2052,6 +2050,17 @@ static int __set_pages_np(struct page *page, int numpages)
 	return __change_page_attr_set_clr(&cpa, 0);
 }
 
+int set_direct_map_invalid_noflush(struct page *page)
+{
+	return __set_pages_np(page, 1);
+}
+
+int set_direct_map_default_noflush(struct page *page)
+{
+	return __set_pages_p(page, 1);
+}
+
+#ifdef CONFIG_DEBUG_PAGEALLOC
 void __kernel_map_pages(struct page *page, int numpages, int enable)
 {
 	if (PageHighMem(page))
@@ -2085,7 +2094,6 @@ void __kernel_map_pages(struct page *page, int numpages, int enable)
 }
 
 #ifdef CONFIG_HIBERNATION
-
 bool kernel_page_present(struct page *page)
 {
 	unsigned int level;
* Unmerged path include/linux/set_memory.h
