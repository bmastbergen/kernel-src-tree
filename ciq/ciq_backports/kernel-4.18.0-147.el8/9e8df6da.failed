s390/smp: kasan stack instrumentation support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Vasily Gorbik <gor@linux.ibm.com>
commit 9e8df6daed9e59153624e52aa4832ddaf39f1ae8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/9e8df6da.failed

smp_start_secondary function is called without DAT enabled. To avoid
disabling kasan instrumentation for entire arch/s390/kernel/smp.c
smp_start_secondary has been split in 2 parts. smp_start_secondary has
instrumentation disabled, it does minimal setup and enables DAT. Then
instrumentated __smp_start_secondary is called to do the rest.

__load_psw_mask function instrumentation has been disabled as well
to be able to call it from smp_start_secondary.

	Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
	Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 9e8df6daed9e59153624e52aa4832ddaf39f1ae8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/smp.c
diff --cc arch/s390/kernel/smp.c
index e5735ab30488,c98059faee46..000000000000
--- a/arch/s390/kernel/smp.c
+++ b/arch/s390/kernel/smp.c
@@@ -791,35 -800,40 +791,62 @@@ void __init smp_detect_cpus(void
  	memblock_free_early((unsigned long)info, sizeof(*info));
  }
  
++<<<<<<< HEAD
++=======
+ static void smp_init_secondary(void)
+ {
+ 	int cpu = smp_processor_id();
+ 
+ 	S390_lowcore.last_update_clock = get_tod_clock();
+ 	restore_access_regs(S390_lowcore.access_regs_save_area);
+ 	cpu_init();
+ 	preempt_disable();
+ 	init_cpu_timer();
+ 	vtime_init();
+ 	pfault_init();
+ 	notify_cpu_starting(smp_processor_id());
+ 	if (topology_cpu_dedicated(cpu))
+ 		set_cpu_flag(CIF_DEDICATED_CPU);
+ 	else
+ 		clear_cpu_flag(CIF_DEDICATED_CPU);
+ 	set_cpu_online(smp_processor_id(), true);
+ 	inc_irq_stat(CPU_RST);
+ 	local_irq_enable();
+ 	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
+ }
+ 
++>>>>>>> 9e8df6daed9e (s390/smp: kasan stack instrumentation support)
  /*
   *	Activate a secondary processor.
   */
- static void smp_start_secondary(void *cpuvoid)
+ static void __no_sanitize_address smp_start_secondary(void *cpuvoid)
  {
++<<<<<<< HEAD
 +	int cpu = smp_processor_id();
 +
 +	S390_lowcore.last_update_clock = get_tod_clock();
++=======
++>>>>>>> 9e8df6daed9e (s390/smp: kasan stack instrumentation support)
  	S390_lowcore.restart_stack = (unsigned long) restart_stack;
  	S390_lowcore.restart_fn = (unsigned long) do_restart;
  	S390_lowcore.restart_data = 0;
  	S390_lowcore.restart_source = -1UL;
- 	restore_access_regs(S390_lowcore.access_regs_save_area);
  	__ctl_load(S390_lowcore.cregs_save_area, 0, 15);
  	__load_psw_mask(PSW_KERNEL_BITS | PSW_MASK_DAT);
 -	CALL_ON_STACK(smp_init_secondary, S390_lowcore.kernel_stack, 0);
 +	cpu_init();
 +	preempt_disable();
 +	init_cpu_timer();
 +	vtime_init();
 +	pfault_init();
 +	notify_cpu_starting(cpu);
 +	if (topology_cpu_dedicated(cpu))
 +		set_cpu_flag(CIF_DEDICATED_CPU);
 +	else
 +		clear_cpu_flag(CIF_DEDICATED_CPU);
 +	set_cpu_online(cpu, true);
 +	inc_irq_stat(CPU_RST);
 +	local_irq_enable();
 +	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
  }
  
  /* Upping and downing of CPUs */
diff --git a/arch/s390/include/asm/processor.h b/arch/s390/include/asm/processor.h
index bfe6147cf39c..60d7b9c2bd75 100644
--- a/arch/s390/include/asm/processor.h
+++ b/arch/s390/include/asm/processor.h
@@ -295,7 +295,7 @@ static inline void __load_psw(psw_t psw)
  * Set PSW mask to specified value, while leaving the
  * PSW addr pointing to the next instruction.
  */
-static inline void __load_psw_mask(unsigned long mask)
+static __no_sanitize_address_or_inline void __load_psw_mask(unsigned long mask)
 {
 	unsigned long addr;
 	psw_t psw;
* Unmerged path arch/s390/kernel/smp.c
