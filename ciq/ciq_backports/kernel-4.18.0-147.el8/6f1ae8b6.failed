tools/bpf: simplify libbpf API function libbpf_set_print()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yonghong Song <yhs@fb.com>
commit 6f1ae8b6628b9e054d3a8c959cf472234944a578
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/6f1ae8b6.failed

Currently, the libbpf API function libbpf_set_print()
takes three function pointer parameters for warning, info
and debug printout respectively.

This patch changes the API to have just one function pointer
parameter and the function pointer has one additional
parameter "debugging level". So if in the future, if
the debug level is increased, the function signature
won't change.

	Signed-off-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 6f1ae8b6628b9e054d3a8c959cf472234944a578)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf.h
#	tools/lib/bpf/test_libbpf.cpp
diff --cc tools/lib/bpf/libbpf.c
index 0b70ceb786a6,ce209ab9a1a2..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -77,29 -69,26 +80,45 @@@ static int __base_pr(enum libbpf_print_
  	return err;
  }
  
- static __printf(1, 2) libbpf_print_fn_t __pr_warning = __base_pr;
- static __printf(1, 2) libbpf_print_fn_t __pr_info = __base_pr;
- static __printf(1, 2) libbpf_print_fn_t __pr_debug;
+ static __printf(2, 3) libbpf_print_fn_t __libbpf_pr = __base_pr;
  
++<<<<<<< HEAD
 +#define __pr(func, fmt, ...)	\
 +do {				\
 +	if ((func))		\
 +		(func)("libbpf: " fmt, ##__VA_ARGS__); \
 +} while (0)
 +
 +#define pr_warning(fmt, ...)	__pr(__pr_warning, fmt, ##__VA_ARGS__)
 +#define pr_info(fmt, ...)	__pr(__pr_info, fmt, ##__VA_ARGS__)
 +#define pr_debug(fmt, ...)	__pr(__pr_debug, fmt, ##__VA_ARGS__)
 +
 +void libbpf_set_print(libbpf_print_fn_t warn,
 +		      libbpf_print_fn_t info,
 +		      libbpf_print_fn_t debug)
++=======
+ void libbpf_set_print(libbpf_print_fn_t fn)
++>>>>>>> 6f1ae8b6628b (tools/bpf: simplify libbpf API function libbpf_set_print())
  {
- 	__pr_warning = warn;
- 	__pr_info = info;
- 	__pr_debug = debug;
+ 	__libbpf_pr = fn;
+ }
+ 
++<<<<<<< HEAD
++=======
+ __printf(2, 3)
+ void libbpf_print(enum libbpf_print_level level, const char *format, ...)
+ {
+ 	va_list args;
+ 
+ 	if (!__libbpf_pr)
+ 		return;
+ 
+ 	va_start(args, format);
+ 	__libbpf_pr(level, format, args);
+ 	va_end(args);
  }
  
++>>>>>>> 6f1ae8b6628b (tools/bpf: simplify libbpf API function libbpf_set_print())
  #define STRERR_BUFSIZE  128
  
  #define CHECK_ERR(action, err, out) do {	\
diff --cc tools/lib/bpf/libbpf.h
index c8c168c73302,19dbc1bed960..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -49,19 -44,20 +49,19 @@@ enum libbpf_errno 
  	__LIBBPF_ERRNO__END,
  };
  
 -LIBBPF_API int libbpf_strerror(int err, char *buf, size_t size);
 -
 -enum libbpf_print_level {
 -        LIBBPF_WARN,
 -        LIBBPF_INFO,
 -        LIBBPF_DEBUG,
 -};
 +int libbpf_strerror(int err, char *buf, size_t size);
  
- /*
-  * __printf is defined in include/linux/compiler-gcc.h. However,
-  * it would be better if libbpf.h didn't depend on Linux header files.
-  * So instead of __printf, here we use gcc attribute directly.
-  */
- typedef int (*libbpf_print_fn_t)(const char *, ...)
- 	__attribute__((format(printf, 1, 2)));
+ typedef int (*libbpf_print_fn_t)(enum libbpf_print_level level,
+ 				 const char *, ...)
+ 	__attribute__((format(printf, 2, 3)));
  
++<<<<<<< HEAD
 +void libbpf_set_print(libbpf_print_fn_t warn,
 +		      libbpf_print_fn_t info,
 +		      libbpf_print_fn_t debug);
++=======
+ LIBBPF_API void libbpf_set_print(libbpf_print_fn_t fn);
++>>>>>>> 6f1ae8b6628b (tools/bpf: simplify libbpf API function libbpf_set_print())
  
  /* Hide internal to user */
  struct bpf_object;
* Unmerged path tools/lib/bpf/test_libbpf.cpp
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf.h
* Unmerged path tools/lib/bpf/test_libbpf.cpp
diff --git a/tools/perf/util/bpf-loader.c b/tools/perf/util/bpf-loader.c
index f9ae1a993806..1884337bd85a 100644
--- a/tools/perf/util/bpf-loader.c
+++ b/tools/perf/util/bpf-loader.c
@@ -24,21 +24,17 @@
 #include "llvm-utils.h"
 #include "c++/clang-c.h"
 
-#define DEFINE_PRINT_FN(name, level) \
-static int libbpf_##name(const char *fmt, ...)	\
-{						\
-	va_list args;				\
-	int ret;				\
-						\
-	va_start(args, fmt);			\
-	ret = veprintf(level, verbose, pr_fmt(fmt), args);\
-	va_end(args);				\
-	return ret;				\
-}
+static int libbpf_perf_print(enum libbpf_print_level level __attribute__((unused)),
+			      const char *fmt, ...)
+{
+	va_list args;
+	int ret;
 
-DEFINE_PRINT_FN(warning, 1)
-DEFINE_PRINT_FN(info, 1)
-DEFINE_PRINT_FN(debug, 1)
+	va_start(args, fmt);
+	ret = veprintf(1, verbose, pr_fmt(fmt), args);
+	va_end(args);
+	return ret;
+}
 
 struct bpf_prog_priv {
 	bool is_tp;
@@ -59,9 +55,7 @@ bpf__prepare_load_buffer(void *obj_buf, size_t obj_buf_sz, const char *name)
 	struct bpf_object *obj;
 
 	if (!libbpf_initialized) {
-		libbpf_set_print(libbpf_warning,
-				 libbpf_info,
-				 libbpf_debug);
+		libbpf_set_print(libbpf_perf_print);
 		libbpf_initialized = true;
 	}
 
@@ -79,9 +73,7 @@ struct bpf_object *bpf__prepare_load(const char *filename, bool source)
 	struct bpf_object *obj;
 
 	if (!libbpf_initialized) {
-		libbpf_set_print(libbpf_warning,
-				 libbpf_info,
-				 libbpf_debug);
+		libbpf_set_print(libbpf_perf_print);
 		libbpf_initialized = true;
 	}
 
diff --git a/tools/testing/selftests/bpf/test_btf.c b/tools/testing/selftests/bpf/test_btf.c
index 0a92808bc0e9..40ae5248924e 100644
--- a/tools/testing/selftests/bpf/test_btf.c
+++ b/tools/testing/selftests/bpf/test_btf.c
@@ -52,8 +52,9 @@ static int count_result(int err)
 
 #define __printf(a, b)	__attribute__((format(printf, a, b)))
 
-__printf(1, 2)
-static int __base_pr(const char *format, ...)
+__printf(2, 3)
+static int __base_pr(enum libbpf_print_level level __attribute__((unused)),
+		     const char *format, ...)
 {
 	va_list args;
 	int err;
@@ -4428,7 +4429,7 @@ int main(int argc, char **argv)
 		return err;
 
 	if (args.always_log)
-		libbpf_set_print(__base_pr, __base_pr, __base_pr);
+		libbpf_set_print(__base_pr);
 
 	if (args.raw_test)
 		err |= test_raw();
diff --git a/tools/testing/selftests/bpf/test_libbpf_open.c b/tools/testing/selftests/bpf/test_libbpf_open.c
index 8fcd1c076add..b9ff3bf76544 100644
--- a/tools/testing/selftests/bpf/test_libbpf_open.c
+++ b/tools/testing/selftests/bpf/test_libbpf_open.c
@@ -34,23 +34,22 @@ static void usage(char *argv[])
 	printf("\n");
 }
 
-#define DEFINE_PRINT_FN(name, enabled) \
-static int libbpf_##name(const char *fmt, ...)  	\
-{							\
-        va_list args;					\
-        int ret;					\
-							\
-        va_start(args, fmt);				\
-	if (enabled) {					\
-		fprintf(stderr, "[" #name "] ");	\
-		ret = vfprintf(stderr, fmt, args);	\
-	}						\
-        va_end(args);					\
-        return ret;					\
+static bool debug = 0;
+static int libbpf_debug_print(enum libbpf_print_level level,
+			      const char *fmt, ...)
+{
+	va_list args;
+	int ret;
+
+	if (level == LIBBPF_DEBUG && !debug)
+		return 0;
+
+	va_start(args, fmt);
+	fprintf(stderr, "[%d] ", level);
+	ret = vfprintf(stderr, fmt, args);
+	va_end(args);
+	return ret;
 }
-DEFINE_PRINT_FN(warning, 1)
-DEFINE_PRINT_FN(info, 1)
-DEFINE_PRINT_FN(debug, 1)
 
 #define EXIT_FAIL_LIBBPF EXIT_FAILURE
 #define EXIT_FAIL_OPTION 2
@@ -120,15 +119,14 @@ int main(int argc, char **argv)
 	int longindex = 0;
 	int opt;
 
-	libbpf_set_print(libbpf_warning, libbpf_info, NULL);
+	libbpf_set_print(libbpf_debug_print);
 
 	/* Parse commands line args */
 	while ((opt = getopt_long(argc, argv, "hDq",
 				  long_options, &longindex)) != -1) {
 		switch (opt) {
 		case 'D':
-			libbpf_set_print(libbpf_warning, libbpf_info,
-					 libbpf_debug);
+			debug = 1;
 			break;
 		case 'q': /* Use in scripting mode */
 			verbose = 0;
diff --git a/tools/testing/selftests/bpf/test_progs.c b/tools/testing/selftests/bpf/test_progs.c
index 50acaea2cfd4..a83dd6d7043d 100644
--- a/tools/testing/selftests/bpf/test_progs.c
+++ b/tools/testing/selftests/bpf/test_progs.c
@@ -10,6 +10,7 @@
 #include <string.h>
 #include <assert.h>
 #include <stdlib.h>
+#include <stdarg.h>
 #include <time.h>
 
 #include <linux/types.h>
@@ -1780,6 +1781,21 @@ static void test_task_fd_query_tp(void)
 				   "sys_enter_read");
 }
 
+static int libbpf_debug_print(enum libbpf_print_level level,
+			      const char *format, ...)
+{
+	va_list args;
+	int ret;
+
+	if (level == LIBBPF_DEBUG)
+		return 0;
+
+	va_start(args, format);
+	ret = vfprintf(stderr, format, args);
+	va_end(args);
+	return ret;
+}
+
 static void test_reference_tracking()
 {
 	const char *file = "./test_sk_lookup_kern.o";
@@ -1806,9 +1822,9 @@ static void test_reference_tracking()
 
 		/* Expect verifier failure if test name has 'fail' */
 		if (strstr(title, "fail") != NULL) {
-			libbpf_set_print(NULL, NULL, NULL);
+			libbpf_set_print(NULL);
 			err = !bpf_program__load(prog, "GPL", 0);
-			libbpf_set_print(printf, printf, NULL);
+			libbpf_set_print(libbpf_debug_print);
 		} else {
 			err = bpf_program__load(prog, "GPL", 0);
 		}
