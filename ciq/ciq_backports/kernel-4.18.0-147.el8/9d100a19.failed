tools/bpf: print out btf log at LIBBPF_WARN level

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-147.el8
commit-author Yonghong Song <yhs@fb.com>
commit 9d100a19ffa519b17a0e998918337da5386e47fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-147.el8/9d100a19.failed

Currently, the btf log is allocated and printed out in case
of error at LIBBPF_DEBUG level.
Such logs from kernel are very important for debugging.
For example, bpf syscall BPF_PROG_LOAD command can get
verifier logs back to user space. In function load_program()
of libbpf.c, the log buffer is allocated unconditionally
and printed out at pr_warning() level.

Let us do the similar thing here for btf. Allocate buffer
unconditionally and print out error logs at pr_warning() level.
This can reduce one global function and
optimize for common situations where pr_warning()
is activated either by default or by user supplied
debug output function.

	Signed-off-by: Yonghong Song <yhs@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit 9d100a19ffa519b17a0e998918337da5386e47fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/btf.c
#	tools/lib/bpf/libbpf.c
#	tools/lib/bpf/libbpf_util.h
diff --cc tools/lib/bpf/btf.c
index ad19a43e946a,51a0db05bf80..000000000000
--- a/tools/lib/bpf/btf.c
+++ b/tools/lib/bpf/btf.c
@@@ -317,16 -377,15 +317,26 @@@ struct btf *btf__new(__u8 *data, __u32 
  
  	btf->fd = -1;
  
++<<<<<<< HEAD
 +	if (err_log) {
 +		log_buf = malloc(BPF_LOG_BUF_SIZE);
 +		if (!log_buf) {
 +			err = -ENOMEM;
 +			goto done;
 +		}
 +		*log_buf = 0;
 +		log_buf_size = BPF_LOG_BUF_SIZE;
++=======
+ 	log_buf = malloc(BPF_LOG_BUF_SIZE);
+ 	if (!log_buf) {
+ 		err = -ENOMEM;
+ 		goto done;
++>>>>>>> 9d100a19ffa5 (tools/bpf: print out btf log at LIBBPF_WARN level)
  	}
  
+ 	*log_buf = 0;
+ 	log_buf_size = BPF_LOG_BUF_SIZE;
+ 
  	btf->data = malloc(size);
  	if (!btf->data) {
  		err = -ENOMEM;
@@@ -341,9 -400,9 +351,15 @@@
  
  	if (btf->fd == -1) {
  		err = -errno;
++<<<<<<< HEAD
 +		elog("Error loading BTF: %s(%d)\n", strerror(errno), errno);
 +		if (log_buf && *log_buf)
 +			elog("%s\n", log_buf);
++=======
+ 		pr_warning("Error loading BTF: %s(%d)\n", strerror(errno), errno);
+ 		if (log_buf && *log_buf)
+ 			pr_warning("%s\n", log_buf);
++>>>>>>> 9d100a19ffa5 (tools/bpf: print out btf log at LIBBPF_WARN level)
  		goto done;
  	}
  
diff --cc tools/lib/bpf/libbpf.c
index 38df8e0ed95d,0354af03b038..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -100,6 -79,25 +100,28 @@@ void libbpf_set_print(libbpf_print_fn_
  	__pr_debug = debug;
  }
  
++<<<<<<< HEAD
++=======
+ __printf(2, 3)
+ void libbpf_print(enum libbpf_print_level level, const char *format, ...)
+ {
+ 	va_list args;
+ 
+ 	va_start(args, format);
+ 	if (level == LIBBPF_WARN) {
+ 		if (__pr_warning)
+ 			__pr_warning(format, args);
+ 	} else if (level == LIBBPF_INFO) {
+ 		if (__pr_info)
+ 			__pr_info(format, args);
+ 	} else {
+ 		if (__pr_debug)
+ 			__pr_debug(format, args);
+ 	}
+ 	va_end(args);
+ }
+ 
++>>>>>>> 9d100a19ffa5 (tools/bpf: print out btf log at LIBBPF_WARN level)
  #define STRERR_BUFSIZE  128
  
  #define CHECK_ERR(action, err, out) do {	\
* Unmerged path tools/lib/bpf/libbpf_util.h
* Unmerged path tools/lib/bpf/btf.c
* Unmerged path tools/lib/bpf/libbpf.c
* Unmerged path tools/lib/bpf/libbpf_util.h
