buffer: eliminate the need to call free_more_memory() in __getblk_slow()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.59.1.el7
commit-author Jens Axboe <axboe@kernel.dk>
commit bc48f001de12225b6430a243504aa60b5ae8a91a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.59.1.el7/bc48f001.failed

Since the previous commit removed any case where grow_buffers()
would return failure due to memory allocations, we can safely
remove the case where we have to call free_more_memory() in
this function.

Since this is also the last user of free_more_memory(), kill
it off completely.

	Reviewed-by: Nikolay Borisov <nborisov@suse.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit bc48f001de12225b6430a243504aa60b5ae8a91a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/buffer.c
diff --cc fs/buffer.c
index bac977976c53,bff571dc7bc3..000000000000
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@@ -254,27 -253,6 +254,30 @@@ out
  }
  
  /*
++<<<<<<< HEAD
 + * Kick the writeback threads then try to free up some ZONE_NORMAL memory.
 + */
 +static void free_more_memory(void)
 +{
 +	struct zone *zone;
 +	int nid;
 +
 +	wakeup_flusher_threads(1024, WB_REASON_FREE_MORE_MEM);
 +	yield();
 +
 +	for_each_online_node(nid) {
 +		(void)first_zones_zonelist(node_zonelist(nid, GFP_NOFS),
 +						gfp_zone(GFP_NOFS), NULL,
 +						&zone);
 +		if (zone)
 +			try_to_free_pages(node_zonelist(nid, GFP_NOFS), 0,
 +						GFP_NOFS, NULL);
 +	}
 +}
 +
 +/*
++=======
++>>>>>>> bc48f001de12 (buffer: eliminate the need to call free_more_memory() in __getblk_slow())
   * I/O completion handler for block_read_full_page() - pages
   * which come unlocked at the end of I/O.
   */
@@@ -1050,11 -1062,9 +1053,9 @@@ __getblk_slow(struct block_device *bdev
  		if (bh)
  			return bh;
  
 -		ret = grow_buffers(bdev, block, size, gfp);
 +		ret = grow_buffers(bdev, block, size);
  		if (ret < 0)
  			return NULL;
- 		if (ret == 0)
- 			free_more_memory();
  	}
  }
  
* Unmerged path fs/buffer.c
