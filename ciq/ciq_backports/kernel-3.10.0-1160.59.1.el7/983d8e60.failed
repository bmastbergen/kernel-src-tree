xfs: map unwritten blocks in XFS_IOC_{ALLOC,FREE}SP just like fallocate

jira LE-1907
cve {CVE-2021-4155
cve [2034857]
cve Maiolino)
cve (Carlos
cve fallocate
cve like
cve just
cve ALLOC,FREESP
Rebuild_History Non-Buildable kernel-3.10.0-1160.59.1.el7
commit-author Darrick J. Wong <djwong@kernel.org>
commit 983d8e60f50806f90534cc5373d0ce867e5aaf79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.59.1.el7/983d8e60.failed

The old ALLOCSP/FREESP ioctls in XFS can be used to preallocate space at
the end of files, just like fallocate and RESVSP.  Make the behavior
consistent with the other ioctls.

	Reported-by: Kirill Tkhai <ktkhai@virtuozzo.com>
	Signed-off-by: Darrick J. Wong <djwong@kernel.org>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Dave Chinner <dchinner@redhat.com>
	Reviewed-by: Eric Sandeen <sandeen@redhat.com>
(cherry picked from commit 983d8e60f50806f90534cc5373d0ce867e5aaf79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_ioctl.c
diff --cc fs/xfs/xfs_ioctl.c
index 722396680482,bc85e045845d..000000000000
--- a/fs/xfs/xfs_ioctl.c
+++ b/fs/xfs/xfs_ioctl.c
@@@ -726,68 -685,18 +726,75 @@@ xfs_ioc_space
  		goto out_unlock;
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * Must wait for all AIO to complete before we continue as AIO can
 +	 * change the file size on completion without holding any locks we
 +	 * currently hold. We must do this first because AIO can update both
 +	 * the on disk and in memory inode size, and the operations that follow
 +	 * require the in-memory size to be fully up-to-date.
 +	 */
 +	inode_dio_wait(inode);
 +
 +	/*
 +	 * Now that AIO and DIO has drained we can flush and (if necessary)
 +	 * invalidate the cached range over the first operation we are about to
 +	 * run. We include zero range here because it starts with a hole punch
 +	 * over the target range.
 +	 */
 +	switch (cmd) {
 +	case XFS_IOC_ZERO_RANGE:
 +	case XFS_IOC_UNRESVSP:
 +	case XFS_IOC_UNRESVSP64:
 +		error = xfs_flush_unmap_range(ip, bf->l_start, bf->l_len);
++=======
+ 	if (bf->l_start > XFS_ISIZE(ip)) {
+ 		error = xfs_alloc_file_space(ip, XFS_ISIZE(ip),
+ 				bf->l_start - XFS_ISIZE(ip),
+ 				XFS_BMAPI_PREALLOC);
++>>>>>>> 983d8e60f508 (xfs: map unwritten blocks in XFS_IOC_{ALLOC,FREE}SP just like fallocate)
  		if (error)
  			goto out_unlock;
 +		break;
 +	}
 +
 +	switch (cmd) {
 +	case XFS_IOC_ZERO_RANGE:
 +		flags |= XFS_PREALLOC_SET;
 +		error = xfs_zero_file_space(ip, bf->l_start, bf->l_len);
 +		break;
 +	case XFS_IOC_RESVSP:
 +	case XFS_IOC_RESVSP64:
 +		flags |= XFS_PREALLOC_SET;
 +		error = xfs_alloc_file_space(ip, bf->l_start, bf->l_len,
 +						XFS_BMAPI_PREALLOC);
 +		break;
 +	case XFS_IOC_UNRESVSP:
 +	case XFS_IOC_UNRESVSP64:
 +		error = xfs_free_file_space(ip, bf->l_start, bf->l_len);
 +		break;
 +	case XFS_IOC_ALLOCSP:
 +	case XFS_IOC_ALLOCSP64:
 +	case XFS_IOC_FREESP:
 +	case XFS_IOC_FREESP64:
 +		flags |= XFS_PREALLOC_CLEAR;
 +		if (bf->l_start > XFS_ISIZE(ip)) {
 +			error = xfs_alloc_file_space(ip, XFS_ISIZE(ip),
 +					bf->l_start - XFS_ISIZE(ip), 0);
 +			if (error)
 +				goto out_unlock;
 +		}
 +
 +		iattr.ia_valid = ATTR_SIZE;
 +		iattr.ia_size = bf->l_start;
 +
 +		error = xfs_vn_setattr_size(file_dentry(filp), &iattr);
 +		break;
 +	default:
 +		ASSERT(0);
 +		error = -EINVAL;
  	}
  
 -	iattr.ia_valid = ATTR_SIZE;
 -	iattr.ia_size = bf->l_start;
 -	error = xfs_vn_setattr_size(file_mnt_user_ns(filp), file_dentry(filp),
 -				    &iattr);
  	if (error)
  		goto out_unlock;
  
* Unmerged path fs/xfs/xfs_ioctl.c
