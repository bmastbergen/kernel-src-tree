i2c: i801: add support of Host Notify

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [i2c] i801: add support of Host Notify (Benjamin Tissoires) [1554926]
Rebuild_FUZZ: 92.75%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit 7b0ed334b8468dccd3340778bd04c0a8be46b81d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/7b0ed334.failed

The i801 chip can handle the Host Notify feature since ICH 3 as mentioned
in http://www.intel.com/content/dam/doc/datasheet/82801ca-io-controller-hub-3-datasheet.pdf

Enable the functionality unconditionally and propagate the alert
on each notification.

With a T440s and a Synaptics touchpad that implements Host Notify, the
payload data is always 0x0000, so I am not sure if the device actually
sends the payload or if there is a problem regarding the implementation.

	Tested-by: Andrew Duggan <aduggan@synaptics.com>
	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit 7b0ed334b8468dccd3340778bd04c0a8be46b81d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-i801.c
diff --cc drivers/i2c/busses/i2c-i801.c
index cb34b050a17d,68cec6128ac0..000000000000
--- a/drivers/i2c/busses/i2c-i801.c
+++ b/drivers/i2c/busses/i2c-i801.c
@@@ -257,9 -268,10 +269,14 @@@ struct i801_priv 
  	 */
  	bool acpi_reserved;
  	struct mutex acpi_lock;
+ 	struct smbus_host_notify *host_notify;
  };
  
++<<<<<<< HEAD
 +static struct pci_driver i801_driver;
++=======
+ #define SMBHSTNTFY_SIZE		8
++>>>>>>> 7b0ed334b846 (i2c: i801: add support of Host Notify)
  
  #define FEATURE_SMBUS_PEC	(1 << 0)
  #define FEATURE_BLOCK_BUFFER	(1 << 1)
@@@ -543,10 -620,13 +580,16 @@@ static irqreturn_t i801_isr(int irq, vo
  	if (!(pcists & SMBPCISTS_INTS))
  		return IRQ_NONE;
  
+ 	if (priv->features & FEATURE_HOST_NOTIFY) {
+ 		status = inb_p(SMBSLVSTS(priv));
+ 		if (status & SMBSLVSTS_HST_NTFY_STS)
+ 			return i801_host_notify_isr(priv);
+ 	}
+ 
  	status = inb_p(SMBHSTSTS(priv));
 +	if (status != 0x42)
 +		dev_dbg(&priv->pci_dev->dev, "irq: status = %02x\n", status);
 +
  	if (status & SMBHSTSTS_BYTE_DONE)
  		i801_isr_byte_done(priv);
  
@@@ -1518,9 -1618,18 +1585,18 @@@ static int i801_probe(struct pci_dev *d
  	if (err) {
  		dev_err(&dev->dev, "Failed to add SMBus adapter\n");
  		i801_acpi_remove(priv);
 -		return err;
 +		goto exit_free_irq;
  	}
  
+ 	/*
+ 	 * Enable Host Notify for chips that supports it.
+ 	 * It is done after i2c_add_adapter() so that we are sure the work queue
+ 	 * is not used if i2c_add_adapter() fails.
+ 	 */
+ 	err = i801_enable_host_notify(&priv->adapter);
+ 	if (err && err != -ENOTSUPP)
+ 		dev_warn(&dev->dev, "Unable to enable SMBus Host Notify\n");
+ 
  	i801_probe_optional_slaves(priv);
  	/* We ignore errors - multiplexing is optional */
  	i801_add_mux(priv);
@@@ -1579,17 -1674,23 +1655,29 @@@ static int i801_suspend(struct pci_dev 
  	return 0;
  }
  
 -static int i801_resume(struct device *dev)
 +static int i801_resume(struct pci_dev *dev)
  {
++<<<<<<< HEAD
 +	pci_set_power_state(dev, PCI_D0);
 +	pci_restore_state(dev);
 +	return pci_enable_device(dev);
++=======
+ 	struct pci_dev *pci_dev = to_pci_dev(dev);
+ 	struct i801_priv *priv = pci_get_drvdata(pci_dev);
+ 	int err;
+ 
+ 	err = i801_enable_host_notify(&priv->adapter);
+ 	if (err && err != -ENOTSUPP)
+ 		dev_warn(dev, "Unable to enable SMBus Host Notify\n");
+ 
+ 	return 0;
++>>>>>>> 7b0ed334b846 (i2c: i801: add support of Host Notify)
  }
 +#else
 +#define i801_suspend NULL
 +#define i801_resume NULL
  #endif
  
 -static UNIVERSAL_DEV_PM_OPS(i801_pm_ops, i801_suspend,
 -			    i801_resume, NULL);
 -
  static struct pci_driver i801_driver = {
  	.name		= "i801_smbus",
  	.id_table	= i801_ids,
diff --git a/drivers/i2c/busses/Kconfig b/drivers/i2c/busses/Kconfig
index 75f290f36f73..5f52352390a3 100644
--- a/drivers/i2c/busses/Kconfig
+++ b/drivers/i2c/busses/Kconfig
@@ -81,6 +81,7 @@ config I2C_I801
 	tristate "Intel 82801 (ICH/PCH)"
 	depends on PCI
 	select CHECK_SIGNATURE if X86 && DMI
+	select I2C_SMBUS
 	help
 	  If you say yes to this option, support will be included for the Intel
 	  801 family of mainboard I2C interfaces.  Specifically, the following
* Unmerged path drivers/i2c/busses/i2c-i801.c
