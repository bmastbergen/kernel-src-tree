mmc: sdhci-pci: Don't re-tune with runtime pm for some Intel devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mmc] sdhci-pci: Don't re-tune with runtime pm for some Intel devices (Gopal Tiwari) [1456570]
Rebuild_FUZZ: 96.18%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit c959a6b00ff589c652373e27bced5a700bd450f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c959a6b0.failed

Make use  of an Intel ACPI _DSM that indicates if re-tuning is needed after
D3.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Tested-by: Ludovic Desroches <ludovic.desroches@microchip.com>
(cherry picked from commit c959a6b00ff589c652373e27bced5a700bd450f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-pci-core.c
diff --cc drivers/mmc/host/sdhci-pci-core.c
index 649bde4708b7,3564327c9c7b..000000000000
--- a/drivers/mmc/host/sdhci-pci-core.c
+++ b/drivers/mmc/host/sdhci-pci-core.c
@@@ -363,64 -430,19 +434,78 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
 +#define SDHCI_INTEL_PWR_TIMEOUT_CNT	20
 +#define SDHCI_INTEL_PWR_TIMEOUT_UDELAY	100
 +
 +static void sdhci_intel_set_power(struct sdhci_host *host, unsigned char mode,
 +				  unsigned short vdd)
 +{
 +	int cntr;
 +	u8 reg;
 +
 +	sdhci_set_power(host, mode, vdd);
 +
 +	if (mode == MMC_POWER_OFF)
 +		return;
 +
 +	/*
 +	 * Bus power might not enable after D3 -> D0 transition due to the
 +	 * present state not yet having propagated. Retry for up to 2ms.
 +	 */
 +	for (cntr = 0; cntr < SDHCI_INTEL_PWR_TIMEOUT_CNT; cntr++) {
 +		reg = sdhci_readb(host, SDHCI_POWER_CONTROL);
 +		if (reg & SDHCI_POWER_ON)
 +			break;
 +		udelay(SDHCI_INTEL_PWR_TIMEOUT_UDELAY);
 +		reg |= SDHCI_POWER_ON;
 +		sdhci_writeb(host, reg, SDHCI_POWER_CONTROL);
 +	}
 +}
 +
 +#define INTEL_HS400_ES_REG 0x78
 +#define INTEL_HS400_ES_BIT BIT(0)
 +
 +static void intel_hs400_enhanced_strobe(struct mmc_host *mmc,
 +					struct mmc_ios *ios)
 +{
 +	struct sdhci_host *host = mmc_priv(mmc);
 +	u32 val;
 +
 +	val = sdhci_readl(host, INTEL_HS400_ES_REG);
 +	if (ios->enhanced_strobe)
 +		val |= INTEL_HS400_ES_BIT;
 +	else
 +		val &= ~INTEL_HS400_ES_BIT;
 +	sdhci_writel(host, val, INTEL_HS400_ES_REG);
 +}
 +
 +static const struct sdhci_ops sdhci_intel_byt_ops = {
 +	.set_clock		= sdhci_set_clock,
 +	.set_power		= sdhci_intel_set_power,
 +	.enable_dma		= sdhci_pci_enable_dma,
 +	.set_bus_width		= sdhci_pci_set_bus_width,
 +	.reset			= sdhci_reset,
 +	.set_uhs_signaling	= sdhci_set_uhs_signaling,
 +	.hw_reset		= sdhci_pci_hw_reset,
 +	.select_drive_strength	= sdhci_pci_select_drive_strength,
 +};
 +
++=======
+ static void byt_read_dsm(struct sdhci_pci_slot *slot)
+ {
+ 	struct intel_host *intel_host = sdhci_pci_priv(slot);
+ 	struct device *dev = &slot->chip->pdev->dev;
+ 	struct mmc_host *mmc = slot->host->mmc;
+ 
+ 	intel_dsm_init(intel_host, dev, mmc);
+ 	slot->chip->rpm_retune = intel_host->d3_retune;
+ }
+ 
++>>>>>>> c959a6b00ff5 (mmc: sdhci-pci: Don't re-tune with runtime pm for some Intel devices)
  static int byt_emmc_probe_slot(struct sdhci_pci_slot *slot)
  {
+ 	byt_read_dsm(slot);
  	slot->host->mmc->caps |= MMC_CAP_8_BIT_DATA | MMC_CAP_NONREMOVABLE |
  				 MMC_CAP_HW_RESET | MMC_CAP_1_8V_DDR |
  				 MMC_CAP_CMD_DURING_TFR |
@@@ -518,18 -574,9 +607,19 @@@ static const struct sdhci_pci_fixes sdh
  			  SDHCI_QUIRK2_CAPS_BIT63_FOR_HS400 |
  			  SDHCI_QUIRK2_STOP_WITH_TC,
  	.ops		= &sdhci_intel_byt_ops,
+ 	.priv_size	= sizeof(struct intel_host),
  };
  
 +static const struct sdhci_pci_fixes sdhci_intel_glk_emmc = {
 +	.allow_runtime_pm	= true,
 +	.probe_slot		= glk_emmc_probe_slot,
 +	.quirks			= SDHCI_QUIRK_NO_ENDATTR_IN_NOPDESC,
 +	.quirks2		= SDHCI_QUIRK2_PRESET_VALUE_BROKEN |
 +				  SDHCI_QUIRK2_CAPS_BIT63_FOR_HS400 |
 +				  SDHCI_QUIRK2_STOP_WITH_TC,
 +	.ops			= &sdhci_intel_byt_ops,
 +};
 +
  static const struct sdhci_pci_fixes sdhci_ni_byt_sdio = {
  	.quirks		= SDHCI_QUIRK_NO_ENDATTR_IN_NOPDESC,
  	.quirks2	= SDHCI_QUIRK2_HOST_OFF_CARD_ON |
* Unmerged path drivers/mmc/host/sdhci-pci-core.c
