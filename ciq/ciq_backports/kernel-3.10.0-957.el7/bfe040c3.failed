i40e: move I40E_FLAG_FILTER_SYNC to a state bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit bfe040c3851ad09e0944de7b0973a71323610e23
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/bfe040c3.failed

The I40E_FLAG_FILTER_SYNC flag is modified during run time possibly when
the RTNL lock is not held. Thus, it should not be part of pf->flags, and
instead should be using atomic bit operations in the pf->state field.

Create a __I40E_MACVLAN_SYNC_PENDING state bit, and use it instead of
the old I40E_FLAG_FILTER_SYNC flag.

This is part of a larger effort to remove the need for cmpxchg64 in
i40e_set_priv_flags().

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit bfe040c3851ad09e0944de7b0973a71323610e23)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e.h
diff --cc drivers/net/ethernet/intel/i40e/i40e.h
index 1d5305235e57,52f99142244b..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@@ -461,37 -511,40 +462,74 @@@ struct i40e_pf 
  #define I40E_HW_RESTART_AUTONEG			BIT(18)
  #define I40E_HW_STOPPABLE_FW_LLDP		BIT(19)
  
++<<<<<<< HEAD
 +	u32 flags;
 +#define I40E_FLAG_RX_CSUM_ENABLED		BIT(0)
 +#define I40E_FLAG_MSI_ENABLED			BIT(1)
 +#define I40E_FLAG_MSIX_ENABLED			BIT(2)
 +#define I40E_FLAG_RSS_ENABLED			BIT(3)
 +#define I40E_FLAG_VMDQ_ENABLED			BIT(4)
 +#define I40E_FLAG_FILTER_SYNC			BIT(5)
 +#define I40E_FLAG_SRIOV_ENABLED			BIT(6)
 +#define I40E_FLAG_DCB_CAPABLE			BIT(7)
 +#define I40E_FLAG_DCB_ENABLED			BIT(8)
 +#define I40E_FLAG_FD_SB_ENABLED			BIT(9)
 +#define I40E_FLAG_FD_ATR_ENABLED		BIT(10)
 +#define I40E_FLAG_FD_SB_AUTO_DISABLED		BIT(11)
 +#define I40E_FLAG_FD_ATR_AUTO_DISABLED		BIT(12)
 +#define I40E_FLAG_MFP_ENABLED			BIT(13)
 +#define I40E_FLAG_UDP_FILTER_SYNC		BIT(14)
 +#define I40E_FLAG_HW_ATR_EVICT_ENABLED		BIT(15)
 +#define I40E_FLAG_VEB_MODE_ENABLED		BIT(16)
 +#define I40E_FLAG_VEB_STATS_ENABLED		BIT(17)
 +#define I40E_FLAG_LINK_POLLING_ENABLED		BIT(18)
 +#define I40E_FLAG_TRUE_PROMISC_SUPPORT		BIT(19)
 +#define I40E_FLAG_TEMP_LINK_POLLING		BIT(20)
 +#define I40E_FLAG_LEGACY_RX			BIT(21)
 +#define I40E_FLAG_PTP				BIT(22)
 +#define I40E_FLAG_IWARP_ENABLED			BIT(23)
 +#define I40E_FLAG_SERVICE_CLIENT_REQUESTED	BIT(24)
 +#define I40E_FLAG_CLIENT_L2_CHANGE		BIT(25)
 +#define I40E_FLAG_CLIENT_RESET			BIT(26)
 +#define I40E_FLAG_LINK_DOWN_ON_CLOSE_ENABLED	BIT(27)
 +#define I40E_FLAG_SOURCE_PRUNING_DISABLED	BIT(28)
 +#define I40E_FLAG_TC_MQPRIO			BIT(29)
++=======
+ 	u64 flags;
+ #define I40E_FLAG_RX_CSUM_ENABLED		BIT_ULL(0)
+ #define I40E_FLAG_MSI_ENABLED			BIT_ULL(1)
+ #define I40E_FLAG_MSIX_ENABLED			BIT_ULL(2)
+ #define I40E_FLAG_RSS_ENABLED			BIT_ULL(3)
+ #define I40E_FLAG_VMDQ_ENABLED			BIT_ULL(4)
+ /* Gap for BIT_ULL(5) */
+ #define I40E_FLAG_SRIOV_ENABLED			BIT_ULL(6)
+ #define I40E_FLAG_DCB_CAPABLE			BIT_ULL(7)
+ #define I40E_FLAG_DCB_ENABLED			BIT_ULL(8)
+ #define I40E_FLAG_FD_SB_ENABLED			BIT_ULL(9)
+ #define I40E_FLAG_FD_ATR_ENABLED		BIT_ULL(10)
+ #define I40E_FLAG_FD_SB_AUTO_DISABLED		BIT_ULL(11)
+ #define I40E_FLAG_FD_ATR_AUTO_DISABLED		BIT_ULL(12)
+ #define I40E_FLAG_MFP_ENABLED			BIT_ULL(13)
+ #define I40E_FLAG_UDP_FILTER_SYNC		BIT_ULL(14)
+ #define I40E_FLAG_HW_ATR_EVICT_ENABLED		BIT_ULL(15)
+ #define I40E_FLAG_VEB_MODE_ENABLED		BIT_ULL(16)
+ #define I40E_FLAG_VEB_STATS_ENABLED		BIT_ULL(17)
+ #define I40E_FLAG_LINK_POLLING_ENABLED		BIT_ULL(18)
+ #define I40E_FLAG_TRUE_PROMISC_SUPPORT		BIT_ULL(19)
+ #define I40E_FLAG_TEMP_LINK_POLLING		BIT_ULL(20)
+ #define I40E_FLAG_LEGACY_RX			BIT_ULL(21)
+ #define I40E_FLAG_PTP				BIT_ULL(22)
+ #define I40E_FLAG_IWARP_ENABLED			BIT_ULL(23)
+ #define I40E_FLAG_SERVICE_CLIENT_REQUESTED	BIT_ULL(24)
+ #define I40E_FLAG_CLIENT_L2_CHANGE		BIT_ULL(25)
+ #define I40E_FLAG_CLIENT_RESET			BIT_ULL(26)
+ #define I40E_FLAG_LINK_DOWN_ON_CLOSE_ENABLED	BIT_ULL(27)
+ #define I40E_FLAG_SOURCE_PRUNING_DISABLED	BIT_ULL(28)
+ #define I40E_FLAG_TC_MQPRIO			BIT_ULL(29)
+ #define I40E_FLAG_FD_SB_INACTIVE		BIT_ULL(30)
+ #define I40E_FLAG_FD_SB_TO_CLOUD_FILTER		BIT_ULL(31)
+ #define I40E_FLAG_DISABLE_FW_LLDP		BIT_ULL(32)
++>>>>>>> bfe040c3851a (i40e: move I40E_FLAG_FILTER_SYNC to a state bit)
  
  	struct i40e_client_instance *cinst;
  	bool stat_offsets_loaded;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e.h
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 9299aa15ffea..b2bfa435edf5 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -1361,7 +1361,7 @@ struct i40e_mac_filter *i40e_add_filter(struct i40e_vsi *vsi,
 		hash_add(vsi->mac_filter_hash, &f->hlist, key);
 
 		vsi->flags |= I40E_VSI_FLAG_FILTER_CHANGED;
-		vsi->back->flags |= I40E_FLAG_FILTER_SYNC;
+		set_bit(__I40E_MACVLAN_SYNC_PENDING, vsi->back->state);
 	}
 
 	/* If we're asked to add a filter that has been marked for removal, it
@@ -1411,7 +1411,7 @@ void __i40e_del_filter(struct i40e_vsi *vsi, struct i40e_mac_filter *f)
 	}
 
 	vsi->flags |= I40E_VSI_FLAG_FILTER_CHANGED;
-	vsi->back->flags |= I40E_FLAG_FILTER_SYNC;
+	set_bit(__I40E_MACVLAN_SYNC_PENDING, vsi->state);
 }
 
 /**
@@ -1934,7 +1934,7 @@ static void i40e_set_rx_mode(struct net_device *netdev)
 	/* check for other flag changes */
 	if (vsi->current_netdev_flags != vsi->netdev->flags) {
 		vsi->flags |= I40E_VSI_FLAG_FILTER_CHANGED;
-		vsi->back->flags |= I40E_FLAG_FILTER_SYNC;
+		set_bit(__I40E_MACVLAN_SYNC_PENDING, vsi->back->state);
 	}
 }
 
@@ -2556,9 +2556,10 @@ static void i40e_sync_filters_subtask(struct i40e_pf *pf)
 {
 	int v;
 
-	if (!pf || !(pf->flags & I40E_FLAG_FILTER_SYNC))
+	if (!pf)
+		return;
+	if (!test_and_clear_bit(__I40E_MACVLAN_SYNC_PENDING, pf->state))
 		return;
-	pf->flags &= ~I40E_FLAG_FILTER_SYNC;
 
 	for (v = 0; v < pf->num_alloc_vsi; v++) {
 		if (pf->vsi[v] &&
@@ -2567,7 +2568,8 @@ static void i40e_sync_filters_subtask(struct i40e_pf *pf)
 
 			if (ret) {
 				/* come back and try again later */
-				pf->flags |= I40E_FLAG_FILTER_SYNC;
+				set_bit(__I40E_MACVLAN_SYNC_PENDING,
+					pf->state);
 				break;
 			}
 		}
@@ -11305,7 +11307,7 @@ static int i40e_add_vsi(struct i40e_vsi *vsi)
 
 	if (f_count) {
 		vsi->flags |= I40E_VSI_FLAG_FILTER_CHANGED;
-		pf->flags |= I40E_FLAG_FILTER_SYNC;
+		set_bit(__I40E_MACVLAN_SYNC_PENDING, pf->state);
 	}
 
 	/* Update VSI BW information */
