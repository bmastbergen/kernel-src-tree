watchdog: Add a device managed API for watchdog_register_device()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [watchdog] Add a device managed API for watchdog_register_device() (David Arcari) [1576173]
Rebuild_FUZZ: 91.67%
commit-author Neil Armstrong <narmstrong@baylibre.com>
commit 83fbae5a148cc1cd53e5be1a28edb3b6701b7af2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/83fbae5a.failed

This helps in reducing code in .remove callbacks and sometimes
dropping .remove callbacks entirely.

	Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
(cherry picked from commit 83fbae5a148cc1cd53e5be1a28edb3b6701b7af2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/driver-model/devres.txt
diff --cc Documentation/driver-model/devres.txt
index 74e282453485,589296bdc133..000000000000
--- a/Documentation/driver-model/devres.txt
+++ b/Documentation/driver-model/devres.txt
@@@ -298,11 -346,17 +298,22 @@@ PW
    devm_pwm_get()
    devm_pwm_put()
  
 -REGULATOR
 -  devm_regulator_bulk_get()
 -  devm_regulator_get()
 -  devm_regulator_put()
 -  devm_regulator_register()
 +PHY
 +  devm_usb_get_phy()
 +  devm_usb_put_phy()
  
++<<<<<<< HEAD
 +MDIO
 +  devm_mdiobus_alloc()
 +  devm_mdiobus_alloc_size()
 +  devm_mdiobus_free()
++=======
+ SLAVE DMA ENGINE
+   devm_acpi_dma_controller_register()
+ 
+ SPI
+   devm_spi_register_master()
+ 
+ WATCHDOG
+   devm_watchdog_register_device()
++>>>>>>> 83fbae5a148c (watchdog: Add a device managed API for watchdog_register_device())
* Unmerged path Documentation/driver-model/devres.txt
diff --git a/drivers/watchdog/watchdog_core.c b/drivers/watchdog/watchdog_core.c
index 66ee5b903650..de350201a86c 100644
--- a/drivers/watchdog/watchdog_core.c
+++ b/drivers/watchdog/watchdog_core.c
@@ -267,6 +267,43 @@ void watchdog_unregister_device(struct watchdog_device *wdd)
 
 EXPORT_SYMBOL_GPL(watchdog_unregister_device);
 
+static void devm_watchdog_unregister_device(struct device *dev, void *res)
+{
+	watchdog_unregister_device(*(struct watchdog_device **)res);
+}
+
+/**
+ * devm_watchdog_register_device() - resource managed watchdog_register_device()
+ * @dev: device that is registering this watchdog device
+ * @wdd: watchdog device
+ *
+ * Managed watchdog_register_device(). For watchdog device registered by this
+ * function,  watchdog_unregister_device() is automatically called on driver
+ * detach. See watchdog_register_device() for more information.
+ */
+int devm_watchdog_register_device(struct device *dev,
+				struct watchdog_device *wdd)
+{
+	struct watchdog_device **rcwdd;
+	int ret;
+
+	rcwdd = devres_alloc(devm_watchdog_unregister_device, sizeof(*wdd),
+			     GFP_KERNEL);
+	if (!rcwdd)
+		return -ENOMEM;
+
+	ret = watchdog_register_device(wdd);
+	if (!ret) {
+		*rcwdd = wdd;
+		devres_add(dev, rcwdd);
+	} else {
+		devres_free(rcwdd);
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(devm_watchdog_register_device);
+
 static int __init watchdog_deferred_registration(void)
 {
 	mutex_lock(&wtd_deferred_reg_mutex);
diff --git a/include/linux/watchdog.h b/include/linux/watchdog.h
index e90e3ea5ebeb..c846465cb7c6 100644
--- a/include/linux/watchdog.h
+++ b/include/linux/watchdog.h
@@ -147,4 +147,7 @@ extern int watchdog_init_timeout(struct watchdog_device *wdd,
 extern int watchdog_register_device(struct watchdog_device *);
 extern void watchdog_unregister_device(struct watchdog_device *);
 
+/* devres register variant */
+int devm_watchdog_register_device(struct device *dev, struct watchdog_device *);
+
 #endif  /* ifndef _LINUX_WATCHDOG_H */
