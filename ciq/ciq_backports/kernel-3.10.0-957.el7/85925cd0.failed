i40e: Fix incorrect return types

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Doug Dziggel <douglas.a.dziggel@intel.com>
commit 85925cd0b84eb16cf2dfd730758c3266a243569c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/85925cd0.failed

Fix return types from i40e_status to enum i40e_status_code.

	Signed-off-by: Doug Dziggel <douglas.a.dziggel@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 85925cd0b84eb16cf2dfd730758c3266a243569c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_common.c
#	drivers/net/ethernet/intel/i40e/i40e_prototype.h
diff --cc drivers/net/ethernet/intel/i40e/i40e_common.c
index 4708990f4bb6,a40b8f37d48f..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_common.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_common.c
@@@ -5458,10 -5495,199 +5458,202 @@@ i40e_add_pinfo_to_list(struct i40e_hw *
  					     sec->section.offset);
  	pinfo->track_id = track_id;
  	pinfo->version = profile->version;
 -	pinfo->op = I40E_DDP_ADD_TRACKID;
 -	memcpy(pinfo->name, profile->name, I40E_DDP_NAME_SIZE);
 +	pinfo->op = I40E_PPP_ADD_TRACKID;
 +	memcpy(pinfo->name, profile->name, I40E_PPP_NAME_SIZE);
  
 -	status = i40e_aq_write_ddp(hw, (void *)sec, sec->data_end,
 +	status = i40e_aq_write_ppp(hw, (void *)sec, sec->data_end,
  				   track_id, &offset, &info, NULL);
++<<<<<<< HEAD
++=======
+ 
+ 	return status;
+ }
+ 
+ /**
+  * i40e_aq_add_cloud_filters
+  * @hw: pointer to the hardware structure
+  * @seid: VSI seid to add cloud filters from
+  * @filters: Buffer which contains the filters to be added
+  * @filter_count: number of filters contained in the buffer
+  *
+  * Set the cloud filters for a given VSI.  The contents of the
+  * i40e_aqc_cloud_filters_element_data are filled in by the caller
+  * of the function.
+  *
+  **/
+ enum i40e_status_code
+ i40e_aq_add_cloud_filters(struct i40e_hw *hw, u16 seid,
+ 			  struct i40e_aqc_cloud_filters_element_data *filters,
+ 			  u8 filter_count)
+ {
+ 	struct i40e_aq_desc desc;
+ 	struct i40e_aqc_add_remove_cloud_filters *cmd =
+ 	(struct i40e_aqc_add_remove_cloud_filters *)&desc.params.raw;
+ 	enum i40e_status_code status;
+ 	u16 buff_len;
+ 
+ 	i40e_fill_default_direct_cmd_desc(&desc,
+ 					  i40e_aqc_opc_add_cloud_filters);
+ 
+ 	buff_len = filter_count * sizeof(*filters);
+ 	desc.datalen = cpu_to_le16(buff_len);
+ 	desc.flags |= cpu_to_le16((u16)(I40E_AQ_FLAG_BUF | I40E_AQ_FLAG_RD));
+ 	cmd->num_filters = filter_count;
+ 	cmd->seid = cpu_to_le16(seid);
+ 
+ 	status = i40e_asq_send_command(hw, &desc, filters, buff_len, NULL);
+ 
+ 	return status;
+ }
+ 
+ /**
+  * i40e_aq_add_cloud_filters_bb
+  * @hw: pointer to the hardware structure
+  * @seid: VSI seid to add cloud filters from
+  * @filters: Buffer which contains the filters in big buffer to be added
+  * @filter_count: number of filters contained in the buffer
+  *
+  * Set the big buffer cloud filters for a given VSI.  The contents of the
+  * i40e_aqc_cloud_filters_element_bb are filled in by the caller of the
+  * function.
+  *
+  **/
+ enum i40e_status_code
+ i40e_aq_add_cloud_filters_bb(struct i40e_hw *hw, u16 seid,
+ 			     struct i40e_aqc_cloud_filters_element_bb *filters,
+ 			     u8 filter_count)
+ {
+ 	struct i40e_aq_desc desc;
+ 	struct i40e_aqc_add_remove_cloud_filters *cmd =
+ 	(struct i40e_aqc_add_remove_cloud_filters *)&desc.params.raw;
+ 	i40e_status status;
+ 	u16 buff_len;
+ 	int i;
+ 
+ 	i40e_fill_default_direct_cmd_desc(&desc,
+ 					  i40e_aqc_opc_add_cloud_filters);
+ 
+ 	buff_len = filter_count * sizeof(*filters);
+ 	desc.datalen = cpu_to_le16(buff_len);
+ 	desc.flags |= cpu_to_le16((u16)(I40E_AQ_FLAG_BUF | I40E_AQ_FLAG_RD));
+ 	cmd->num_filters = filter_count;
+ 	cmd->seid = cpu_to_le16(seid);
+ 	cmd->big_buffer_flag = I40E_AQC_ADD_CLOUD_CMD_BB;
+ 
+ 	for (i = 0; i < filter_count; i++) {
+ 		u16 tnl_type;
+ 		u32 ti;
+ 
+ 		tnl_type = (le16_to_cpu(filters[i].element.flags) &
+ 			   I40E_AQC_ADD_CLOUD_TNL_TYPE_MASK) >>
+ 			   I40E_AQC_ADD_CLOUD_TNL_TYPE_SHIFT;
+ 
+ 		/* Due to hardware eccentricities, the VNI for Geneve is shifted
+ 		 * one more byte further than normally used for Tenant ID in
+ 		 * other tunnel types.
+ 		 */
+ 		if (tnl_type == I40E_AQC_ADD_CLOUD_TNL_TYPE_GENEVE) {
+ 			ti = le32_to_cpu(filters[i].element.tenant_id);
+ 			filters[i].element.tenant_id = cpu_to_le32(ti << 8);
+ 		}
+ 	}
+ 
+ 	status = i40e_asq_send_command(hw, &desc, filters, buff_len, NULL);
+ 
+ 	return status;
+ }
+ 
+ /**
+  * i40e_aq_rem_cloud_filters
+  * @hw: pointer to the hardware structure
+  * @seid: VSI seid to remove cloud filters from
+  * @filters: Buffer which contains the filters to be removed
+  * @filter_count: number of filters contained in the buffer
+  *
+  * Remove the cloud filters for a given VSI.  The contents of the
+  * i40e_aqc_cloud_filters_element_data are filled in by the caller
+  * of the function.
+  *
+  **/
+ enum i40e_status_code
+ i40e_aq_rem_cloud_filters(struct i40e_hw *hw, u16 seid,
+ 			  struct i40e_aqc_cloud_filters_element_data *filters,
+ 			  u8 filter_count)
+ {
+ 	struct i40e_aq_desc desc;
+ 	struct i40e_aqc_add_remove_cloud_filters *cmd =
+ 	(struct i40e_aqc_add_remove_cloud_filters *)&desc.params.raw;
+ 	enum i40e_status_code status;
+ 	u16 buff_len;
+ 
+ 	i40e_fill_default_direct_cmd_desc(&desc,
+ 					  i40e_aqc_opc_remove_cloud_filters);
+ 
+ 	buff_len = filter_count * sizeof(*filters);
+ 	desc.datalen = cpu_to_le16(buff_len);
+ 	desc.flags |= cpu_to_le16((u16)(I40E_AQ_FLAG_BUF | I40E_AQ_FLAG_RD));
+ 	cmd->num_filters = filter_count;
+ 	cmd->seid = cpu_to_le16(seid);
+ 
+ 	status = i40e_asq_send_command(hw, &desc, filters, buff_len, NULL);
+ 
+ 	return status;
+ }
+ 
+ /**
+  * i40e_aq_rem_cloud_filters_bb
+  * @hw: pointer to the hardware structure
+  * @seid: VSI seid to remove cloud filters from
+  * @filters: Buffer which contains the filters in big buffer to be removed
+  * @filter_count: number of filters contained in the buffer
+  *
+  * Remove the big buffer cloud filters for a given VSI.  The contents of the
+  * i40e_aqc_cloud_filters_element_bb are filled in by the caller of the
+  * function.
+  *
+  **/
+ enum i40e_status_code
+ i40e_aq_rem_cloud_filters_bb(struct i40e_hw *hw, u16 seid,
+ 			     struct i40e_aqc_cloud_filters_element_bb *filters,
+ 			     u8 filter_count)
+ {
+ 	struct i40e_aq_desc desc;
+ 	struct i40e_aqc_add_remove_cloud_filters *cmd =
+ 	(struct i40e_aqc_add_remove_cloud_filters *)&desc.params.raw;
+ 	i40e_status status;
+ 	u16 buff_len;
+ 	int i;
+ 
+ 	i40e_fill_default_direct_cmd_desc(&desc,
+ 					  i40e_aqc_opc_remove_cloud_filters);
+ 
+ 	buff_len = filter_count * sizeof(*filters);
+ 	desc.datalen = cpu_to_le16(buff_len);
+ 	desc.flags |= cpu_to_le16((u16)(I40E_AQ_FLAG_BUF | I40E_AQ_FLAG_RD));
+ 	cmd->num_filters = filter_count;
+ 	cmd->seid = cpu_to_le16(seid);
+ 	cmd->big_buffer_flag = I40E_AQC_ADD_CLOUD_CMD_BB;
+ 
+ 	for (i = 0; i < filter_count; i++) {
+ 		u16 tnl_type;
+ 		u32 ti;
+ 
+ 		tnl_type = (le16_to_cpu(filters[i].element.flags) &
+ 			   I40E_AQC_ADD_CLOUD_TNL_TYPE_MASK) >>
+ 			   I40E_AQC_ADD_CLOUD_TNL_TYPE_SHIFT;
+ 
+ 		/* Due to hardware eccentricities, the VNI for Geneve is shifted
+ 		 * one more byte further than normally used for Tenant ID in
+ 		 * other tunnel types.
+ 		 */
+ 		if (tnl_type == I40E_AQC_ADD_CLOUD_TNL_TYPE_GENEVE) {
+ 			ti = le32_to_cpu(filters[i].element.tenant_id);
+ 			filters[i].element.tenant_id = cpu_to_le32(ti << 8);
+ 		}
+ 	}
+ 
+ 	status = i40e_asq_send_command(hw, &desc, filters, buff_len, NULL);
+ 
++>>>>>>> 85925cd0b84e (i40e: Fix incorrect return types)
  	return status;
  }
diff --cc drivers/net/ethernet/intel/i40e/i40e_prototype.h
index ef721081870d,eabb636f6a19..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_prototype.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_prototype.h
@@@ -283,6 -287,22 +283,25 @@@ i40e_status i40e_aq_query_switch_comp_b
  		struct i40e_asq_cmd_details *cmd_details);
  i40e_status i40e_aq_resume_port_tx(struct i40e_hw *hw,
  				   struct i40e_asq_cmd_details *cmd_details);
++<<<<<<< HEAD
++=======
+ enum i40e_status_code
+ i40e_aq_add_cloud_filters_bb(struct i40e_hw *hw, u16 seid,
+ 			     struct i40e_aqc_cloud_filters_element_bb *filters,
+ 			     u8 filter_count);
+ enum i40e_status_code
+ i40e_aq_add_cloud_filters(struct i40e_hw *hw, u16 vsi,
+ 			  struct i40e_aqc_cloud_filters_element_data *filters,
+ 			  u8 filter_count);
+ enum i40e_status_code
+ i40e_aq_rem_cloud_filters(struct i40e_hw *hw, u16 vsi,
+ 			  struct i40e_aqc_cloud_filters_element_data *filters,
+ 			  u8 filter_count);
+ enum i40e_status_code
+ i40e_aq_rem_cloud_filters_bb(struct i40e_hw *hw, u16 seid,
+ 			     struct i40e_aqc_cloud_filters_element_bb *filters,
+ 			     u8 filter_count);
++>>>>>>> 85925cd0b84e (i40e: Fix incorrect return types)
  i40e_status i40e_read_lldp_cfg(struct i40e_hw *hw,
  			       struct i40e_lldp_variables *lldp_cfg);
  /* i40e_common */
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_common.c
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_prototype.h
