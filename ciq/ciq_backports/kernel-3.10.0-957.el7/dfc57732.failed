iio:core: mounting matrix support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] core: mounting matrix support (Tony Camuso) [1559170]
Rebuild_FUZZ: 93.55%
commit-author Gregor Boirie <gregor.boirie@parrot.com>
commit dfc57732ad38f93ae6232a3b4e64fd077383a0f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/dfc57732.failed

Expose a rotation matrix to indicate userspace the chip placement with
respect to the overall hardware system. This is needed to adjust
coordinates sampled from a sensor chip when its position deviates from the
main hardware system.

Final coordinates computation is delegated to userspace since:
* computation may involve floating point arithmetics ;
* it allows an application to combine adjustments with arbitrary
  transformations.

This 3 dimentional space rotation matrix is expressed as 3x3 array of
strings to support floating point numbers. It may be retrieved from a
"[<dir>_][<type>_]mount_matrix" sysfs attribute file. It is declared into a
device / driver specific DTS property or platform data.

	Signed-off-by: Gregor Boirie <gregor.boirie@parrot.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit dfc57732ad38f93ae6232a3b4e64fd077383a0f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/sysfs-bus-iio
diff --cc Documentation/ABI/testing/sysfs-bus-iio
index c393cb207af8,ba8df69d40b0..000000000000
--- a/Documentation/ABI/testing/sysfs-bus-iio
+++ b/Documentation/ABI/testing/sysfs-bus-iio
@@@ -938,13 -1190,376 +938,385 @@@ Description
  		This attribute is used to read the amount of quadrature error
  		present in the device at a given time.
  
 -What:		/sys/.../iio:deviceX/in_accelX_power_mode
 -KernelVersion:	3.11
 +What:		/sys/bus/iio/devices/iio:device*/buffer/hwfifo_timeout
 +KernelVersion:	4.12
  Contact:	linux-iio@vger.kernel.org
  Description:
++<<<<<<< HEAD
 +		A read/write property to provide capability to delay reporting of
 +		samples till a timeout is reached. This allows host processors to
 +		sleep, while the sensor is storing samples in its internal fifo.
 +		The maximum timeout in seconds can be specified by setting
 +		hwfifo_timeout.The current delay can be read by reading
 +		hwfifo_timeout. A value of 0 means that there is no timeout.
++=======
+ 		Specifies the chip power mode.
+ 		low_noise: reduce noise level from ADC,
+ 		low_power: enable low current consumption.
+ 		For a list of available output power modes read
+ 		in_accel_power_mode_available.
+ 
+ What:		/sys/.../iio:deviceX/in_energy_input
+ What:		/sys/.../iio:deviceX/in_energy_raw
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the energy value reported by the
+ 		device (e.g.: human activity sensors report energy burnt by the
+ 		user). Units after application of scale are Joules.
+ 
+ What:		/sys/.../iio:deviceX/in_distance_input
+ What:		/sys/.../iio:deviceX/in_distance_raw
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the distance covered by the user
+ 		since the last reboot while activated. Units after application
+ 		of scale are meters.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/store_eeprom
+ KernelVersion:	3.4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Writing '1' stores the current device configuration into
+ 		on-chip EEPROM. After power-up or chip reset the device will
+ 		automatically load the saved configuration.
+ 
+ What:		/sys/.../iio:deviceX/in_proximity_raw
+ What:		/sys/.../iio:deviceX/in_proximity_input
+ What:		/sys/.../iio:deviceX/in_proximityY_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Proximity measurement indicating that some
+ 		object is near the sensor, usually by observing
+ 		reflectivity of infrared or ultrasound emitted.
+ 		Often these sensors are unit less and as such conversion
+ 		to SI units is not possible. Higher proximity measurements
+ 		indicate closer objects, and vice versa.
+ 
+ What:		/sys/.../iio:deviceX/in_illuminance_input
+ What:		/sys/.../iio:deviceX/in_illuminance_raw
+ What:		/sys/.../iio:deviceX/in_illuminanceY_input
+ What:		/sys/.../iio:deviceX/in_illuminanceY_raw
+ What:		/sys/.../iio:deviceX/in_illuminanceY_mean_raw
+ What:		/sys/.../iio:deviceX/in_illuminance_ir_raw
+ What:		/sys/.../iio:deviceX/in_illuminance_clear_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Illuminance measurement, units after application of scale
+ 		and offset are lux.
+ 
+ What:		/sys/.../iio:deviceX/in_intensityY_raw
+ What:		/sys/.../iio:deviceX/in_intensityY_ir_raw
+ What:		/sys/.../iio:deviceX/in_intensityY_both_raw
+ What:		/sys/.../iio:deviceX/in_intensityY_uv_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Unit-less light intensity. Modifiers both and ir indicate
+ 		that measurements contains visible and infrared light
+ 		components or just infrared light, respectively. Modifier uv indicates
+ 		that measurements contain ultraviolet light components.
+ 
+ What:		/sys/.../iio:deviceX/in_uvindex_input
+ KernelVersion:	4.6
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		UV light intensity index measuring the human skin's response to
+ 		different wavelength of sunlight weighted according to the
+ 		standardised CIE Erythemal Action Spectrum. UV index values range
+ 		from 0 (low) to >=11 (extreme).
+ 
+ What:		/sys/.../iio:deviceX/in_intensity_red_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_green_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_blue_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_clear_integration_time
+ What:		/sys/.../iio:deviceX/in_illuminance_integration_time
+ KernelVersion:	3.12
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to get/set the integration time in
+ 		seconds.
+ 
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_integration_time
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Number of seconds in which to compute speed.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_quaternion_raw
+ KernelVersion:	3.15
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw value of quaternion components using a format
+ 		x y z w. Here x, y, and z component represents the axis about
+ 		which a rotation will occur and w component represents the
+ 		amount of rotation.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_magnetic_tilt_comp_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_true_tilt_comp_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_magnetic_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_true_raw
+ KernelVersion:	3.15
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw value of rotation from true/magnetic north measured with
+ 		or without compensation from tilt sensors.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_currentX_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_currentX_i_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_currentX_q_raw
+ KernelVersion:	3.18
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw current measurement from channel X. Units are in milliamps
+ 		after application of scale and offset. If no offset or scale is
+ 		present, output should be considered as processed with the
+ 		unit in milliamps.
+ 
+ 		Channels with 'i' and 'q' modifiers always exist in pairs and both
+ 		channels refer to the same signal. The 'i' channel contains the in-phase
+ 		component of the signal while the 'q' channel contains the quadrature
+ 		component.
+ 
+ What:		/sys/.../iio:deviceX/in_energy_en
+ What:		/sys/.../iio:deviceX/in_distance_en
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_en
+ What:		/sys/.../iio:deviceX/in_steps_en
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Activates a device feature that runs in firmware/hardware.
+ 		E.g. for steps: the pedometer saves power while not used;
+ 		when activated, it will count the steps taken by the user in
+ 		firmware and export them through in_steps_input.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_input
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the number of steps taken by the user
+ 		since the last reboot while activated.
+ 
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_input
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_raw
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the current speed value of the
+ 		user (which is the norm or magnitude of the velocity vector).
+ 		Units after application of scale are m/s.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_debounce_count
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Specifies the number of steps that must occur within
+ 		in_steps_filter_debounce_time for the pedometer to decide the
+ 		consumer is making steps.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_debounce_time
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Specifies number of seconds in which we compute the steps
+ 		that occur in order to decide if the consumer is making steps.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/watermark
+ KernelVersion:	4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		A single positive integer specifying the maximum number of scan
+ 		elements to wait for.
+ 		Poll will block until the watermark is reached.
+ 		Blocking read will wait until the minimum between the requested
+ 		read amount or the low water mark is available.
+ 		Non-blocking read will retrieve the available samples from the
+ 		buffer even if there are less samples then watermark level. This
+ 		allows the application to block on poll with a timeout and read
+ 		the available samples after the timeout expires and thus have a
+ 		maximum delay guarantee.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_enabled
+ KernelVersion: 4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		A read-only boolean value that indicates if the hardware fifo is
+ 		currently enabled or disabled. If the device does not have a
+ 		hardware fifo this entry is not present.
+ 		The hardware fifo is enabled when the buffer is enabled if the
+ 		current hardware fifo watermark level is set and other current
+ 		device settings allows it (e.g. if a trigger is set that samples
+ 		data differently that the hardware fifo does then hardware fifo
+ 		will not enabled).
+ 		If the hardware fifo is enabled and the level of the hardware
+ 		fifo reaches the hardware fifo watermark level the device will
+ 		flush its hardware fifo to the device buffer. Doing a non
+ 		blocking read on the device when no samples are present in the
+ 		device buffer will also force a flush.
+ 		When the hardware fifo is enabled there is no need to use a
+ 		trigger to use buffer mode since the watermark settings
+ 		guarantees that the hardware fifo is flushed to the device
+ 		buffer.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark
+ KernelVersion: 4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Read-only entry that contains a single integer specifying the
+ 		current watermark level for the hardware fifo. If the device
+ 		does not have a hardware fifo this entry is not present.
+ 		The watermark level for the hardware fifo is set by the driver
+ 		based on the value set by the user in buffer/watermark but
+ 		taking into account hardware limitations (e.g. most hardware
+ 		buffers are limited to 32-64 samples, some hardware buffers
+ 		watermarks are fixed or have minimum levels).  A value of 0
+ 		means that the hardware watermark is unset.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark_min
+ KernelVersion: 4.2
+ Contact:       linux-iio@vger.kernel.org
+ Description:
+ 		A single positive integer specifying the minimum watermark level
+ 		for the hardware fifo of this device. If the device does not
+ 		have a hardware fifo this entry is not present.
+ 		If the user sets buffer/watermark to a value less than this one,
+ 		then the hardware watermark will remain unset.
+ 
+ What:	       /sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark_max
+ KernelVersion: 4.2
+ Contact:       linux-iio@vger.kernel.org
+ Description:
+ 		A single positive integer specifying the maximum watermark level
+ 		for the hardware fifo of this device. If the device does not
+ 		have a hardware fifo this entry is not present.
+ 		If the user sets buffer/watermark to a value greater than this
+ 		one, then the hardware watermark will be capped at this value.
+ 
+ What:	       /sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark_available
+ KernelVersion: 4.2
+ Contact:       linux-iio@vger.kernel.org
+ Description:
+ 		A list of positive integers specifying the available watermark
+ 		levels for the hardware fifo. This entry is optional and if it
+ 		is not present it means that all the values between
+ 		hwfifo_watermark_min and hwfifo_watermark_max are supported.
+ 		If the user sets buffer/watermark to a value greater than
+ 		hwfifo_watermak_min but not equal to any of the values in this
+ 		list, the driver will chose an appropriate value for the
+ 		hardware fifo watermark level.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_temp_calibemissivity
+ What:		/sys/bus/iio/devices/iio:deviceX/in_tempX_calibemissivity
+ What:		/sys/bus/iio/devices/iio:deviceX/in_temp_object_calibemissivity
+ What:		/sys/bus/iio/devices/iio:deviceX/in_tempX_object_calibemissivity
+ KernelVersion:	4.1
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		The emissivity ratio of the surface in the field of view of the
+ 		contactless temperature sensor.  Emissivity varies from 0 to 1,
+ 		with 1 being the emissivity of a black body.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_magn_x_oversampling_ratio
+ What:		/sys/bus/iio/devices/iio:deviceX/in_magn_y_oversampling_ratio
+ What:		/sys/bus/iio/devices/iio:deviceX/in_magn_z_oversampling_ratio
+ KernelVersion:	4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Hardware applied number of measurements for acquiring one
+ 		data point. The HW will do <type>[_name]_oversampling_ratio
+ 		measurements and return the average value as output data. Each
+ 		value resulted from <type>[_name]_oversampling_ratio measurements
+ 		is considered as one sample for <type>[_name]_sampling_frequency.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentration_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentrationX_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentration_co2_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentrationX_co2_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentration_voc_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentrationX_voc_raw
+ KernelVersion:	4.3
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw (unscaled no offset etc.) percentage reading of a substance.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_resistance_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_resistanceX_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/out_resistance_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/out_resistanceX_raw
+ KernelVersion:	4.3
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw (unscaled no offset etc.) resistance reading that can be processed
+ 		into an ohm value.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/heater_enable
+ KernelVersion:	4.1.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		'1' (enable) or '0' (disable) specifying the enable
+ 		of heater function. Same reading values apply
+ 		This ABI is especially applicable for humidity sensors
+ 		to heatup the device and get rid of any condensation
+ 		in some humidity environment
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_ph_raw
+ KernelVersion:	4.5
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw (unscaled no offset etc.) pH reading of a substance as a negative
+ 		base-10 logarithm of hydrodium ions in a litre of water.
+ 
+ What:           /sys/bus/iio/devices/iio:deviceX/mount_matrix
+ What:           /sys/bus/iio/devices/iio:deviceX/in_mount_matrix
+ What:           /sys/bus/iio/devices/iio:deviceX/out_mount_matrix
+ KernelVersion:  4.6
+ Contact:        linux-iio@vger.kernel.org
+ Description:
+ 		Mounting matrix for IIO sensors. This is a rotation matrix which
+ 		informs userspace about sensor chip's placement relative to the
+ 		main hardware it is mounted on.
+ 		Main hardware placement is defined according to the local
+ 		reference frame related to the physical quantity the sensor
+ 		measures.
+ 		Given that the rotation matrix is defined in a board specific
+ 		way (platform data and / or device-tree), the main hardware
+ 		reference frame definition is left to the implementor's choice
+ 		(see below for a magnetometer example).
+ 		Applications should apply this rotation matrix to samples so
+ 		that when main hardware reference frame is aligned onto local
+ 		reference frame, then sensor chip reference frame is also
+ 		perfectly aligned with it.
+ 		Matrix is a 3x3 unitary matrix and typically looks like
+ 		[0, 1, 0; 1, 0, 0; 0, 0, -1]. Identity matrix
+ 		[1, 0, 0; 0, 1, 0; 0, 0, 1] means sensor chip and main hardware
+ 		are perfectly aligned with each other.
+ 
+ 		For example, a mounting matrix for a magnetometer sensor informs
+ 		userspace about sensor chip's ORIENTATION relative to the main
+ 		hardware.
+ 		More specifically, main hardware orientation is defined with
+ 		respect to the LOCAL EARTH GEOMAGNETIC REFERENCE FRAME where :
+ 		* Y is in the ground plane and positive towards magnetic North ;
+ 		* X is in the ground plane, perpendicular to the North axis and
+ 		  positive towards the East ;
+ 		* Z is perpendicular to the ground plane and positive upwards.
+ 
+ 		An implementor might consider that for a hand-held device, a
+ 		'natural' orientation would be 'front facing camera at the top'.
+ 		The main hardware reference frame could then be described as :
+ 		* Y is in the plane of the screen and is positive towards the
+ 		  top of the screen ;
+ 		* X is in the plane of the screen, perpendicular to Y axis, and
+ 		  positive towards the right hand side of the screen ;
+ 		* Z is perpendicular to the screen plane and positive out of the
+ 		  screen.
+ 		Another example for a quadrotor UAV might be :
+ 		* Y is in the plane of the propellers and positive towards the
+ 		  front-view camera;
+ 		* X is in the plane of the propellers, perpendicular to Y axis,
+ 		  and positive towards the starboard side of the UAV ;
+ 		* Z is perpendicular to propellers plane and positive upwards.
++>>>>>>> dfc57732ad38 (iio:core: mounting matrix support)
* Unmerged path Documentation/ABI/testing/sysfs-bus-iio
diff --git a/drivers/iio/industrialio-core.c b/drivers/iio/industrialio-core.c
index 87201424abaf..925e4679323a 100644
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@ -383,6 +383,88 @@ ssize_t iio_enum_write(struct iio_dev *indio_dev,
 }
 EXPORT_SYMBOL_GPL(iio_enum_write);
 
+static const struct iio_mount_matrix iio_mount_idmatrix = {
+	.rotation = {
+		"1", "0", "0",
+		"0", "1", "0",
+		"0", "0", "1"
+	}
+};
+
+static int iio_setup_mount_idmatrix(const struct device *dev,
+				    struct iio_mount_matrix *matrix)
+{
+	*matrix = iio_mount_idmatrix;
+	dev_info(dev, "mounting matrix not found: using identity...\n");
+	return 0;
+}
+
+ssize_t iio_show_mount_matrix(struct iio_dev *indio_dev, uintptr_t priv,
+			      const struct iio_chan_spec *chan, char *buf)
+{
+	const struct iio_mount_matrix *mtx = ((iio_get_mount_matrix_t *)
+					      priv)(indio_dev, chan);
+
+	if (IS_ERR(mtx))
+		return PTR_ERR(mtx);
+
+	if (!mtx)
+		mtx = &iio_mount_idmatrix;
+
+	return snprintf(buf, PAGE_SIZE, "%s, %s, %s; %s, %s, %s; %s, %s, %s\n",
+			mtx->rotation[0], mtx->rotation[1], mtx->rotation[2],
+			mtx->rotation[3], mtx->rotation[4], mtx->rotation[5],
+			mtx->rotation[6], mtx->rotation[7], mtx->rotation[8]);
+}
+EXPORT_SYMBOL_GPL(iio_show_mount_matrix);
+
+/**
+ * of_iio_read_mount_matrix() - retrieve iio device mounting matrix from
+ *                              device-tree "mount-matrix" property
+ * @dev:	device the mounting matrix property is assigned to
+ * @propname:	device specific mounting matrix property name
+ * @matrix:	where to store retrieved matrix
+ *
+ * If device is assigned no mounting matrix property, a default 3x3 identity
+ * matrix will be filled in.
+ *
+ * Return: 0 if success, or a negative error code on failure.
+ */
+#ifdef CONFIG_OF
+int of_iio_read_mount_matrix(const struct device *dev,
+			     const char *propname,
+			     struct iio_mount_matrix *matrix)
+{
+	if (dev->of_node) {
+		int err = of_property_read_string_array(dev->of_node,
+				propname, matrix->rotation,
+				ARRAY_SIZE(iio_mount_idmatrix.rotation));
+
+		if (err == ARRAY_SIZE(iio_mount_idmatrix.rotation))
+			return 0;
+
+		if (err >= 0)
+			/* Invalid number of matrix entries. */
+			return -EINVAL;
+
+		if (err != -EINVAL)
+			/* Invalid matrix declaration format. */
+			return err;
+	}
+
+	/* Matrix was not declared at all: fallback to identity. */
+	return iio_setup_mount_idmatrix(dev, matrix);
+}
+#else
+int of_iio_read_mount_matrix(const struct device *dev,
+			     const char *propname,
+			     struct iio_mount_matrix *matrix)
+{
+	return iio_setup_mount_idmatrix(dev, matrix);
+}
+#endif
+EXPORT_SYMBOL(of_iio_read_mount_matrix);
+
 /**
  * iio_format_value() - Formats a IIO value into its string representation
  * @buf: The buffer to which the formated value gets written
diff --git a/include/linux/iio/iio.h b/include/linux/iio/iio.h
index 95115dd384d0..d215bd56b891 100644
--- a/include/linux/iio/iio.h
+++ b/include/linux/iio/iio.h
@@ -132,6 +132,37 @@ ssize_t iio_enum_write(struct iio_dev *indio_dev,
 	.private = (uintptr_t)(_e), \
 }
 
+/**
+ * struct iio_mount_matrix - iio mounting matrix
+ * @rotation: 3 dimensional space rotation matrix defining sensor alignment with
+ *            main hardware
+ */
+struct iio_mount_matrix {
+	const char *rotation[9];
+};
+
+ssize_t iio_show_mount_matrix(struct iio_dev *indio_dev, uintptr_t priv,
+			      const struct iio_chan_spec *chan, char *buf);
+int of_iio_read_mount_matrix(const struct device *dev, const char *propname,
+			     struct iio_mount_matrix *matrix);
+
+typedef const struct iio_mount_matrix *
+	(iio_get_mount_matrix_t)(const struct iio_dev *indio_dev,
+				 const struct iio_chan_spec *chan);
+
+/**
+ * IIO_MOUNT_MATRIX() - Initialize mount matrix extended channel attribute
+ * @_shared:	Whether the attribute is shared between all channels
+ * @_get:	Pointer to an iio_get_mount_matrix_t accessor
+ */
+#define IIO_MOUNT_MATRIX(_shared, _get) \
+{ \
+	.name = "mount_matrix", \
+	.shared = (_shared), \
+	.read = iio_show_mount_matrix, \
+	.private = (uintptr_t)(_get), \
+}
+
 /**
  * struct iio_event_spec - specification for a channel event
  * @type:		    Type of the event
