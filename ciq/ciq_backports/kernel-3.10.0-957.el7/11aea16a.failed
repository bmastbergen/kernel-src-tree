scsi: qla2xxx: Add ability to send PRLO

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Add ability to send PRLO (Himanshu Madhani) [1547714]
Rebuild_FUZZ: 91.67%
commit-author Quinn Tran <quinn.tran@cavium.com>
commit 11aea16ab3f5404895146e7aa722e2e9b5bc3b76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/11aea16a.failed

Add ability to send Implicit PRLO to flush IOs
from FW back to driver.

	Signed-off-by: Quinn Tran <quinn.tran@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 11aea16ab3f5404895146e7aa722e2e9b5bc3b76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_def.h
#	drivers/scsi/qla2xxx/qla_gbl.h
#	drivers/scsi/qla2xxx/qla_init.c
#	drivers/scsi/qla2xxx/qla_iocb.c
diff --cc drivers/scsi/qla2xxx/qla_def.h
index 65a064ba1a4b,7a42aad55ec3..000000000000
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@@ -446,6 -503,11 +446,14 @@@ struct srb_iocb 
  #define SRB_NACK_PLOGI	16
  #define SRB_NACK_PRLI	17
  #define SRB_NACK_LOGO	18
++<<<<<<< HEAD
++=======
+ #define SRB_NVME_CMD	19
+ #define SRB_NVME_LS	20
+ #define SRB_PRLI_CMD	21
+ #define SRB_CTRL_VP	22
+ #define SRB_PRLO_CMD	23
++>>>>>>> 11aea16ab3f5 (scsi: qla2xxx: Add ability to send PRLO)
  
  enum {
  	TYPE_SRB,
@@@ -3066,6 -3140,9 +3074,12 @@@ enum qla_work_type 
  	QLA_EVT_UPD_FCPORT,
  	QLA_EVT_GNL,
  	QLA_EVT_NACK,
++<<<<<<< HEAD
++=======
+ 	QLA_EVT_RELOGIN,
+ 	QLA_EVT_ASYNC_PRLO,
+ 	QLA_EVT_ASYNC_PRLO_DONE,
++>>>>>>> 11aea16ab3f5 (scsi: qla2xxx: Add ability to send PRLO)
  };
  
  
diff --cc drivers/scsi/qla2xxx/qla_gbl.h
index 547baeb17bb1,7b61c96502e4..000000000000
--- a/drivers/scsi/qla2xxx/qla_gbl.h
+++ b/drivers/scsi/qla2xxx/qla_gbl.h
@@@ -105,6 -109,13 +106,16 @@@ int qla24xx_post_newsess_work(struct sc
      void *);
  int qla24xx_fcport_handle_login(struct scsi_qla_host *, fc_port_t *);
  int qla24xx_detect_sfp(scsi_qla_host_t *vha);
++<<<<<<< HEAD
++=======
+ int qla24xx_post_gpdb_work(struct scsi_qla_host *, fc_port_t *, u8);
+ void qla2x00_async_prlo_done(struct scsi_qla_host *, fc_port_t *,
+     uint16_t *);
+ extern int qla2x00_post_async_prlo_work(struct scsi_qla_host *, fc_port_t *,
+     uint16_t *);
+ extern int qla2x00_post_async_prlo_done_work(struct scsi_qla_host *,
+     fc_port_t *, uint16_t *);
++>>>>>>> 11aea16ab3f5 (scsi: qla2xxx: Add ability to send PRLO)
  
  /*
   * Global Data in qla_os.c source file.
diff --cc drivers/scsi/qla2xxx/qla_init.c
index 83ad7d90d14e,56bff7856cf8..000000000000
--- a/drivers/scsi/qla2xxx/qla_init.c
+++ b/drivers/scsi/qla2xxx/qla_init.c
@@@ -270,6 -278,70 +270,73 @@@ done
  	fcport->flags &= ~FCF_ASYNC_SENT;
  	return rval;
  }
++<<<<<<< HEAD
++=======
+ 
+ void
+ qla2x00_async_prlo_done(struct scsi_qla_host *vha, fc_port_t *fcport,
+     uint16_t *data)
+ {
+ 	/* Don't re-login in target mode */
+ 	if (!fcport->tgt_session)
+ 		qla2x00_mark_device_lost(vha, fcport, 1, 0);
+ 	qlt_logo_completion_handler(fcport, data[0]);
+ }
+ 
+ static void
+ qla2x00_async_prlo_sp_done(void *s, int res)
+ {
+ 	srb_t *sp = (srb_t *)s;
+ 	struct srb_iocb *lio = &sp->u.iocb_cmd;
+ 	struct scsi_qla_host *vha = sp->vha;
+ 
+ 	if (!test_bit(UNLOADING, &vha->dpc_flags))
+ 		qla2x00_post_async_prlo_done_work(sp->fcport->vha, sp->fcport,
+ 		    lio->u.logio.data);
+ 	sp->free(sp);
+ }
+ 
+ int
+ qla2x00_async_prlo(struct scsi_qla_host *vha, fc_port_t *fcport)
+ {
+ 	srb_t *sp;
+ 	struct srb_iocb *lio;
+ 	int rval;
+ 
+ 	rval = QLA_FUNCTION_FAILED;
+ 	sp = qla2x00_get_sp(vha, fcport, GFP_KERNEL);
+ 	if (!sp)
+ 		goto done;
+ 
+ 	sp->type = SRB_PRLO_CMD;
+ 	sp->name = "prlo";
+ 	qla2x00_init_timer(sp, qla2x00_get_async_timeout(vha) + 2);
+ 
+ 	lio = &sp->u.iocb_cmd;
+ 	lio->timeout = qla2x00_async_iocb_timeout;
+ 	sp->done = qla2x00_async_prlo_sp_done;
+ 	rval = qla2x00_start_sp(sp);
+ 	if (rval != QLA_SUCCESS)
+ 		goto done_free_sp;
+ 
+ 	ql_dbg(ql_dbg_disc, vha, 0x2070,
+ 	    "Async-prlo - hdl=%x loop-id=%x portid=%02x%02x%02x.\n",
+ 	    sp->handle, fcport->loop_id, fcport->d_id.b.domain,
+ 	    fcport->d_id.b.area, fcport->d_id.b.al_pa);
+ 	return rval;
+ 
+ done_free_sp:
+ 	sp->free(sp);
+ done:
+ 	return rval;
+ }
+ 
+ static
+ void qla24xx_handle_adisc_event(scsi_qla_host_t *vha, struct event_arg *ea)
+ {
+ 	qla24xx_handle_gpdb_event(vha, ea);
+ }
++>>>>>>> 11aea16ab3f5 (scsi: qla2xxx: Add ability to send PRLO)
  
  static void
  qla2x00_async_adisc_sp_done(void *ptr, int res)
diff --cc drivers/scsi/qla2xxx/qla_iocb.c
index 430b293b4d6f,14a3f6932c9c..000000000000
--- a/drivers/scsi/qla2xxx/qla_iocb.c
+++ b/drivers/scsi/qla2xxx/qla_iocb.c
@@@ -3214,6 -3337,73 +3214,76 @@@ static void qla2x00_send_notify_ack_ioc
  	nack->u.isp24.vp_index = ntfy->u.isp24.vp_index;
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Build NVME LS request
+  */
+ static int
+ qla_nvme_ls(srb_t *sp, struct pt_ls4_request *cmd_pkt)
+ {
+ 	struct srb_iocb *nvme;
+ 	int     rval = QLA_SUCCESS;
+ 
+ 	nvme = &sp->u.iocb_cmd;
+ 	cmd_pkt->entry_type = PT_LS4_REQUEST;
+ 	cmd_pkt->entry_count = 1;
+ 	cmd_pkt->control_flags = CF_LS4_ORIGINATOR << CF_LS4_SHIFT;
+ 
+ 	cmd_pkt->timeout = cpu_to_le16(nvme->u.nvme.timeout_sec);
+ 	cmd_pkt->nport_handle = cpu_to_le16(sp->fcport->loop_id);
+ 	cmd_pkt->vp_index = sp->fcport->vha->vp_idx;
+ 
+ 	cmd_pkt->tx_dseg_count = 1;
+ 	cmd_pkt->tx_byte_count = nvme->u.nvme.cmd_len;
+ 	cmd_pkt->dseg0_len = nvme->u.nvme.cmd_len;
+ 	cmd_pkt->dseg0_address[0] = cpu_to_le32(LSD(nvme->u.nvme.cmd_dma));
+ 	cmd_pkt->dseg0_address[1] = cpu_to_le32(MSD(nvme->u.nvme.cmd_dma));
+ 
+ 	cmd_pkt->rx_dseg_count = 1;
+ 	cmd_pkt->rx_byte_count = nvme->u.nvme.rsp_len;
+ 	cmd_pkt->dseg1_len  = nvme->u.nvme.rsp_len;
+ 	cmd_pkt->dseg1_address[0] =  cpu_to_le32(LSD(nvme->u.nvme.rsp_dma));
+ 	cmd_pkt->dseg1_address[1] =  cpu_to_le32(MSD(nvme->u.nvme.rsp_dma));
+ 
+ 	return rval;
+ }
+ 
+ static void
+ qla25xx_ctrlvp_iocb(srb_t *sp, struct vp_ctrl_entry_24xx *vce)
+ {
+ 	int map, pos;
+ 
+ 	vce->entry_type = VP_CTRL_IOCB_TYPE;
+ 	vce->handle = sp->handle;
+ 	vce->entry_count = 1;
+ 	vce->command = cpu_to_le16(sp->u.iocb_cmd.u.ctrlvp.cmd);
+ 	vce->vp_count = cpu_to_le16(1);
+ 
+ 	/*
+ 	 * index map in firmware starts with 1; decrement index
+ 	 * this is ok as we never use index 0
+ 	 */
+ 	map = (sp->u.iocb_cmd.u.ctrlvp.vp_index - 1) / 8;
+ 	pos = (sp->u.iocb_cmd.u.ctrlvp.vp_index - 1) & 7;
+ 	vce->vp_idx_map[map] |= 1 << pos;
+ }
+ 
+ static void
+ qla24xx_prlo_iocb(srb_t *sp, struct logio_entry_24xx *logio)
+ {
+ 	logio->entry_type = LOGINOUT_PORT_IOCB_TYPE;
+ 	logio->control_flags =
+ 	    cpu_to_le16(LCF_COMMAND_PRLO|LCF_IMPL_PRLO);
+ 
+ 	logio->nport_handle = cpu_to_le16(sp->fcport->loop_id);
+ 	logio->port_id[0] = sp->fcport->d_id.b.al_pa;
+ 	logio->port_id[1] = sp->fcport->d_id.b.area;
+ 	logio->port_id[2] = sp->fcport->d_id.b.domain;
+ 	logio->vp_index = sp->fcport->vha->vp_idx;
+ }
+ 
++>>>>>>> 11aea16ab3f5 (scsi: qla2xxx: Add ability to send PRLO)
  int
  qla2x00_start_sp(srb_t *sp)
  {
@@@ -3286,6 -3482,12 +3356,15 @@@
  	case SRB_NACK_LOGO:
  		qla2x00_send_notify_ack_iocb(sp, pkt);
  		break;
++<<<<<<< HEAD
++=======
+ 	case SRB_CTRL_VP:
+ 		qla25xx_ctrlvp_iocb(sp, pkt);
+ 		break;
+ 	case SRB_PRLO_CMD:
+ 		qla24xx_prlo_iocb(sp, pkt);
+ 		break;
++>>>>>>> 11aea16ab3f5 (scsi: qla2xxx: Add ability to send PRLO)
  	default:
  		break;
  	}
* Unmerged path drivers/scsi/qla2xxx/qla_def.h
* Unmerged path drivers/scsi/qla2xxx/qla_gbl.h
* Unmerged path drivers/scsi/qla2xxx/qla_init.c
* Unmerged path drivers/scsi/qla2xxx/qla_iocb.c
diff --git a/drivers/scsi/qla2xxx/qla_os.c b/drivers/scsi/qla2xxx/qla_os.c
index 75f3e94a56ff..ea6b584568ba 100644
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@ -4673,6 +4673,8 @@ qla2x00_post_async_work(logout, QLA_EVT_ASYNC_LOGOUT);
 qla2x00_post_async_work(logout_done, QLA_EVT_ASYNC_LOGOUT_DONE);
 qla2x00_post_async_work(adisc, QLA_EVT_ASYNC_ADISC);
 qla2x00_post_async_work(adisc_done, QLA_EVT_ASYNC_ADISC_DONE);
+qla2x00_post_async_work(prlo, QLA_EVT_ASYNC_PRLO);
+qla2x00_post_async_work(prlo_done, QLA_EVT_ASYNC_PRLO_DONE);
 
 int
 qla2x00_post_uevent_work(struct scsi_qla_host *vha, u32 code)
@@ -4888,6 +4890,13 @@ qla2x00_do_work(struct scsi_qla_host *vha)
 		case QLA_EVT_NACK:
 			qla24xx_do_nack_work(vha, e);
 			break;
+		case QLA_EVT_ASYNC_PRLO:
+			qla2x00_async_prlo(vha, e->u.logio.fcport);
+			break;
+		case QLA_EVT_ASYNC_PRLO_DONE:
+			qla2x00_async_prlo_done(vha, e->u.logio.fcport,
+			    e->u.logio.data);
+			break;
 		}
 		if (e->flags & QLA_EVT_FLAG_FREE)
 			kfree(e);
