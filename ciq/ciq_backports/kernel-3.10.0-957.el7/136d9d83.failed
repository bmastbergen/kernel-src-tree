x86/ldt: Correct LDT access in single stepping logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] ldt: Correct LDT access in single stepping logic (Gopal Tiwari) [1456572]
Rebuild_FUZZ: 96.00%
commit-author Juergen Gross <jgross@suse.com>
commit 136d9d83c07c5e30ac49fc83b27e8c4842f108fc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/136d9d83.failed

Commit 37868fe113ff ("x86/ldt: Make modify_ldt synchronous")
introduced a new struct ldt_struct anchored at mm->context.ldt.

convert_ip_to_linear() was changed to reflect this, but indexing
into the ldt has to be changed as the pointer is no longer void *.

	Signed-off-by: Juergen Gross <jgross@suse.com>
	Reviewed-by: Andy Lutomirski <luto@kernel.org>
	Cc: <stable@vger.kernel.org> # On top of: 37868fe113ff: x86/ldt: Make modify_ldt synchronous
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: bp@suse.de
Link: http://lkml.kernel.org/r/1438848278-12906-1-git-send-email-jgross@suse.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 136d9d83c07c5e30ac49fc83b27e8c4842f108fc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/step.c
diff --cc arch/x86/kernel/step.c
index 9b4d51d0c0d0,0ccb53a9fcd9..000000000000
--- a/arch/x86/kernel/step.c
+++ b/arch/x86/kernel/step.c
@@@ -27,13 -28,14 +27,18 @@@ unsigned long convert_ip_to_linear(stru
  		struct desc_struct *desc;
  		unsigned long base;
  
- 		seg &= ~7UL;
+ 		seg >>= 3;
  
  		mutex_lock(&child->mm->context.lock);
++<<<<<<< HEAD
 +		if (unlikely((seg >> 3) >= child->mm->context.size))
++=======
+ 		if (unlikely(!child->mm->context.ldt ||
+ 			     seg >= child->mm->context.ldt->size))
++>>>>>>> 136d9d83c07c (x86/ldt: Correct LDT access in single stepping logic)
  			addr = -1L; /* bogus selector, access would fault */
  		else {
 -			desc = &child->mm->context.ldt->entries[seg];
 +			desc = child->mm->context.ldt + seg;
  			base = get_desc_base(desc);
  
  			/* 16-bit code segment? */
* Unmerged path arch/x86/kernel/step.c
