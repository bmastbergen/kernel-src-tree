platform/x86: wmi: Bind the platform device, not the ACPI node

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: wmi: Bind the platform device, not the ACPI node (Jarod Wilson) [1562200]
Rebuild_FUZZ: 92.17%
commit-author Andy Lutomirski <luto@kernel.org>
commit 9599ed919f9bc42ea0bdd49745bc8451019e0447
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9599ed91.failed

We already have the PNP glue to instantiate platform devices for the
ACPI devices that WMI drives. WMI should therefore attach to the
platform device, not the ACPI node.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Mario Limonciello <mario_limonciello@dell.com>
	Cc: Pali Roh√°r <pali.rohar@gmail.com>
	Cc: linux-kernel@vger.kernel.org
	Cc: platform-driver-x86@vger.kernel.org
	Cc: linux-acpi@vger.kernel.org
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
(cherry picked from commit 9599ed919f9bc42ea0bdd49745bc8451019e0447)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/wmi.c
diff --cc drivers/platform/x86/wmi.c
index 84dcc7a04b0a,52452ec5099b..000000000000
--- a/drivers/platform/x86/wmi.c
+++ b/drivers/platform/x86/wmi.c
@@@ -37,8 -37,9 +37,14 @@@
  #include <linux/acpi.h>
  #include <linux/slab.h>
  #include <linux/module.h>
++<<<<<<< HEAD
 +#include <acpi/acpi_bus.h>
 +#include <acpi/acpi_drivers.h>
++=======
+ #include <linux/platform_device.h>
+ #include <linux/wmi.h>
+ #include <linux/uuid.h>
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  
  ACPI_MODULE_NAME("wmi");
  MODULE_AUTHOR("Carlos Corbacho");
@@@ -91,9 -92,8 +97,14 @@@ module_param(debug_dump_wdg, bool, 0444
  MODULE_PARM_DESC(debug_dump_wdg,
  		 "Dump available WMI interfaces [0/1]");
  
++<<<<<<< HEAD
 +static int acpi_wmi_remove(struct acpi_device *device);
 +static int acpi_wmi_add(struct acpi_device *device);
 +static void acpi_wmi_notify(struct acpi_device *device, u32 event);
++=======
+ static int acpi_wmi_remove(struct platform_device *device);
+ static int acpi_wmi_probe(struct platform_device *device);
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  
  static const struct acpi_device_id wmi_device_ids[] = {
  	{"PNP0C14", 0},
@@@ -102,15 -102,13 +113,24 @@@
  };
  MODULE_DEVICE_TABLE(acpi, wmi_device_ids);
  
++<<<<<<< HEAD
 +static struct acpi_driver acpi_wmi_driver = {
 +	.name = "wmi",
 +	.class = ACPI_WMI_CLASS,
 +	.ids = wmi_device_ids,
 +	.ops = {
 +		.add = acpi_wmi_add,
 +		.remove = acpi_wmi_remove,
 +		.notify = acpi_wmi_notify,
++=======
+ static struct platform_driver acpi_wmi_driver = {
+ 	.driver = {
+ 		.name = "acpi-wmi",
+ 		.acpi_match_table = wmi_device_ids,
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  	},
+ 	.probe = acpi_wmi_probe,
+ 	.remove = acpi_wmi_remove,
  };
  
  /*
@@@ -860,35 -1051,82 +880,51 @@@ static void acpi_wmi_notify(struct acpi
  		wblock = list_entry(p, struct wmi_block, list);
  		block = &wblock->gblock;
  
 -		if (wblock->acpi_device->handle == handle &&
 +		if (wblock->acpi_device == device &&
  		    (block->flags & ACPI_WMI_EVENT) &&
 -		    (block->notify_id == event))
 -		{
 -			found_it = true;
 -			break;
 -		}
 -	}
 -
 -	if (!found_it)
 -		return;
 +		    (block->notify_id == event)) {
 +			if (wblock->handler)
 +				wblock->handler(event, wblock->handler_data);
 +			if (debug_event) {
 +				pr_info("DEBUG Event GUID: %pUL\n",
 +					wblock->gblock.guid);
 +			}
  
 -	/* If a driver is bound, then notify the driver. */
 -	if (wblock->dev.dev.driver) {
 -		struct wmi_driver *driver;
 -		struct acpi_object_list input;
 -		union acpi_object params[1];
 -		struct acpi_buffer evdata = { ACPI_ALLOCATE_BUFFER, NULL };
 -		acpi_status status;
 -
 -		driver = container_of(wblock->dev.dev.driver,
 -				      struct wmi_driver, driver);
 -
 -		input.count = 1;
 -		input.pointer = params;
 -		params[0].type = ACPI_TYPE_INTEGER;
 -		params[0].integer.value = event;
 -
 -		status = acpi_evaluate_object(wblock->acpi_device->handle,
 -					      "_WED", &input, &evdata);
 -		if (ACPI_FAILURE(status)) {
 -			dev_warn(&wblock->dev.dev,
 -				 "failed to get event data\n");
 -			return;
 +			acpi_bus_generate_netlink_event(
 +				device->pnp.device_class, dev_name(&device->dev),
 +				event, 0);
 +			break;
  		}
 -
 -		if (driver->notify)
 -			driver->notify(&wblock->dev,
 -				       (union acpi_object *)evdata.pointer);
 -
 -		kfree(evdata.pointer);
 -	} else if (wblock->handler) {
 -		/* Legacy handler */
 -		wblock->handler(event, wblock->handler_data);
  	}
 -
 -	if (debug_event) {
 -		pr_info("DEBUG Event GUID: %pUL\n",
 -			wblock->gblock.guid);
 -	}
 -
 -	acpi_bus_generate_netlink_event(
 -		wblock->acpi_device->pnp.device_class,
 -		dev_name(&wblock->dev.dev),
 -		event, 0);
 -
  }
  
- static int acpi_wmi_remove(struct acpi_device *device)
+ static int acpi_wmi_remove(struct platform_device *device)
  {
++<<<<<<< HEAD
 +	acpi_remove_address_space_handler(device->handle,
 +				ACPI_ADR_SPACE_EC, &acpi_wmi_ec_space_handler);
 +	wmi_free_devices(device);
++=======
+ 	struct acpi_device *acpi_device = ACPI_COMPANION(&device->dev);
+ 
+ 	acpi_remove_notify_handler(acpi_device->handle, ACPI_DEVICE_NOTIFY,
+ 				   acpi_wmi_notify_handler);
+ 	acpi_remove_address_space_handler(acpi_device->handle,
+ 				ACPI_ADR_SPACE_EC, &acpi_wmi_ec_space_handler);
+ 	wmi_free_devices(acpi_device);
+ 	device_unregister((struct device *)dev_get_drvdata(&device->dev));
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  
  	return 0;
  }
  
- static int acpi_wmi_add(struct acpi_device *device)
+ static int acpi_wmi_probe(struct platform_device *device)
  {
++<<<<<<< HEAD
++=======
+ 	struct acpi_device *acpi_device;
+ 	struct device *wmi_bus_dev;
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  	acpi_status status;
  	int error;
  
@@@ -901,18 -1145,63 +943,57 @@@
  		return -ENODEV;
  	}
  
++<<<<<<< HEAD
 +	error = parse_wdg(device);
++=======
+ 	status = acpi_install_notify_handler(acpi_device->handle,
+ 					     ACPI_DEVICE_NOTIFY,
+ 					     acpi_wmi_notify_handler,
+ 					     NULL);
+ 	if (ACPI_FAILURE(status)) {
+ 		dev_err(&device->dev, "Error installing notify handler\n");
+ 		error = -ENODEV;
+ 		goto err_remove_ec_handler;
+ 	}
+ 
+ 	wmi_bus_dev = device_create(&wmi_bus_class, &device->dev, MKDEV(0, 0),
+ 				    NULL, "wmi_bus-%s", dev_name(&device->dev));
+ 	if (IS_ERR(wmi_bus_dev)) {
+ 		error = PTR_ERR(wmi_bus_dev);
+ 		goto err_remove_notify_handler;
+ 	}
+ 	dev_set_drvdata(&device->dev, wmi_bus_dev);
+ 
+ 	error = parse_wdg(wmi_bus_dev, acpi_device);
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  	if (error) {
 +		acpi_remove_address_space_handler(device->handle,
 +						  ACPI_ADR_SPACE_EC,
 +						  &acpi_wmi_ec_space_handler);
  		pr_err("Failed to parse WDG method\n");
 -		goto err_remove_busdev;
 +		return error;
  	}
  
  	return 0;
++<<<<<<< HEAD
++=======
+ 
+ err_remove_busdev:
+ 	device_unregister(wmi_bus_dev);
+ 
+ err_remove_notify_handler:
+ 	acpi_remove_notify_handler(acpi_device->handle, ACPI_DEVICE_NOTIFY,
+ 				   acpi_wmi_notify_handler);
+ 
+ err_remove_ec_handler:
+ 	acpi_remove_address_space_handler(acpi_device->handle,
+ 					  ACPI_ADR_SPACE_EC,
+ 					  &acpi_wmi_ec_space_handler);
+ 
+ 	return error;
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  }
  
 -int __must_check __wmi_driver_register(struct wmi_driver *driver,
 -				       struct module *owner)
 -{
 -	driver->driver.owner = owner;
 -	driver->driver.bus = &wmi_bus_type;
 -
 -	return driver_register(&driver->driver);
 -}
 -EXPORT_SYMBOL(__wmi_driver_register);
 -
 -void wmi_driver_unregister(struct wmi_driver *driver)
 -{
 -	driver_unregister(&driver->driver);
 -}
 -EXPORT_SYMBOL(wmi_driver_unregister);
 -
  static int __init acpi_wmi_init(void)
  {
  	int error;
@@@ -924,11 -1213,14 +1005,19 @@@
  	if (error)
  		return error;
  
++<<<<<<< HEAD
 +	error = acpi_bus_register_driver(&acpi_wmi_driver);
++=======
+ 	error = bus_register(&wmi_bus_type);
+ 	if (error)
+ 		goto err_unreg_class;
+ 
+ 	error = platform_driver_register(&acpi_wmi_driver);
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  	if (error) {
  		pr_err("Error loading mapper\n");
 -		goto err_unreg_bus;
 +		class_unregister(&wmi_class);
 +		return error;
  	}
  
  	return 0;
@@@ -936,8 -1236,9 +1025,14 @@@
  
  static void __exit acpi_wmi_exit(void)
  {
++<<<<<<< HEAD
 +	acpi_bus_unregister_driver(&acpi_wmi_driver);
 +	class_unregister(&wmi_class);
++=======
+ 	platform_driver_unregister(&acpi_wmi_driver);
+ 	class_unregister(&wmi_bus_class);
+ 	bus_unregister(&wmi_bus_type);
++>>>>>>> 9599ed919f9b (platform/x86: wmi: Bind the platform device, not the ACPI node)
  }
  
  subsys_initcall(acpi_wmi_init);
* Unmerged path drivers/platform/x86/wmi.c
