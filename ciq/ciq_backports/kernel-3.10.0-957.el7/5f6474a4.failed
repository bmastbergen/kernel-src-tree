drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 5f6474a4e6ce3291abb1843b279a23a0bb050d37
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5f6474a4.failed

There's also a couple of hardcoded tables for a couple of very specific
configurations that NVGPU's algorithm didn't work for.

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 5f6474a4e6ce3291abb1843b279a23a0bb050d37)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
index 55915c14de5f,53a173e023b4..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
@@@ -123,12 -124,30 +124,13 @@@ void *gf100_gr_dtor(struct nvkm_gr *)
  
  struct gf100_gr_func {
  	void (*dtor)(struct gf100_gr *);
+ 	void (*oneinit_tiles)(struct gf100_gr *);
  	int (*init)(struct gf100_gr *);
  	void (*init_gpc_mmu)(struct gf100_gr *);
 -	void (*init_r405a14)(struct gf100_gr *);
 -	void (*init_bios)(struct gf100_gr *);
 -	void (*init_vsc_stream_master)(struct gf100_gr *);
 -	void (*init_zcull)(struct gf100_gr *);
 -	void (*init_num_active_ltcs)(struct gf100_gr *);
  	void (*init_rop_active_fbps)(struct gf100_gr *);
 -	void (*init_bios_2)(struct gf100_gr *);
 -	void (*init_swdx_pes_mask)(struct gf100_gr *);
 -	void (*init_fecs_exceptions)(struct gf100_gr *);
 -	void (*init_ds_hww_esr_2)(struct gf100_gr *);
 -	void (*init_40601c)(struct gf100_gr *);
 -	void (*init_sked_hww_esr)(struct gf100_gr *);
 -	void (*init_419cc0)(struct gf100_gr *);
 -	void (*init_419eb4)(struct gf100_gr *);
 -	void (*init_419c9c)(struct gf100_gr *);
  	void (*init_ppc_exceptions)(struct gf100_gr *);
 -	void (*init_tex_hww_esr)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_504430)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_shader_exceptions)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_400054)(struct gf100_gr *);
 -	void (*trap_mp)(struct gf100_gr *, int gpc, int tpc);
 +	void (*init_swdx_pes_mask)(struct gf100_gr *);
 +	void (*init_num_active_ltcs)(struct gf100_gr *);
  	void (*set_hww_esr_report_mask)(struct gf100_gr *);
  	const struct gf100_gr_pack *mmio;
  	struct {
@@@ -145,22 -164,49 +147,31 @@@
  	struct nvkm_sclass sclass[];
  };
  
++<<<<<<< HEAD
++=======
+ int gf100_gr_rops(struct gf100_gr *);
+ void gf100_gr_oneinit_tiles(struct gf100_gr *);
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  int gf100_gr_init(struct gf100_gr *);
 -void gf100_gr_init_vsc_stream_master(struct gf100_gr *);
 -void gf100_gr_init_zcull(struct gf100_gr *);
 -void gf100_gr_init_num_active_ltcs(struct gf100_gr *);
 -void gf100_gr_init_fecs_exceptions(struct gf100_gr *);
 -void gf100_gr_init_40601c(struct gf100_gr *);
 -void gf100_gr_init_419cc0(struct gf100_gr *);
 -void gf100_gr_init_419eb4(struct gf100_gr *);
 -void gf100_gr_init_tex_hww_esr(struct gf100_gr *, int, int);
 -void gf100_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -void gf100_gr_init_400054(struct gf100_gr *);
 -
 -void gf117_gr_init_zcull(struct gf100_gr *);
 -
 -void gk104_gr_init_vsc_stream_master(struct gf100_gr *);
 +int gf100_gr_rops(struct gf100_gr *);
 +
 +int gk104_gr_init(struct gf100_gr *);
  void gk104_gr_init_rop_active_fbps(struct gf100_gr *);
  void gk104_gr_init_ppc_exceptions(struct gf100_gr *);
 -void gk104_gr_init_sked_hww_esr(struct gf100_gr *);
 -
 -void gk110_gr_init_419eb4(struct gf100_gr *);
 -
 -void gm107_gr_init_504430(struct gf100_gr *, int, int);
 -void gm107_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -void gm107_gr_init_400054(struct gf100_gr *);
  
  int gk20a_gr_init(struct gf100_gr *);
  
++<<<<<<< HEAD
 +int gm200_gr_init(struct gf100_gr *);
++=======
+ void gm200_gr_oneinit_tiles(struct gf100_gr *);
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  int gm200_gr_rops(struct gf100_gr *);
 -void gm200_gr_init_num_active_ltcs(struct gf100_gr *);
 -void gm200_gr_init_ds_hww_esr_2(struct gf100_gr *);
  
 +int gp100_gr_init(struct gf100_gr *);
  void gp100_gr_init_rop_active_fbps(struct gf100_gr *);
 -void gp100_gr_init_fecs_exceptions(struct gf100_gr *);
 -void gp100_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -
 -void gp102_gr_init_swdx_pes_mask(struct gf100_gr *);
  
  #define gf100_gr_chan(p) container_of((p), struct gf100_gr_chan, object)
 -#include <core/object.h>
  
  struct gf100_gr_chan {
  	struct nvkm_object object;
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
index f9a17b27d5b8,d57fb5ff1fe9..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
@@@ -339,9 -448,22 +339,18 @@@ gk104_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gk104_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gk104_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk104_gr_pack_mmio,
  	.fecs.ucode = &gk104_gr_fecs_ucode,
  	.gpccs.ucode = &gk104_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
index f31b171a4102,41997ebda719..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
@@@ -180,11 -334,38 +180,20 @@@ gk110_gr_gpccs_ucode = 
  	.data.size = sizeof(gk110_grgpc_data),
  };
  
 -void
 -gk110_gr_init_419eb4(struct gf100_gr *gr)
 -{
 -	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	nvkm_mask(device, 0x419eb4, 0x00001000, 0x00001000);
 -	nvkm_mask(device, 0x419eb4, 0x00002000, 0x00002000);
 -	nvkm_mask(device, 0x419eb4, 0x00004000, 0x00004000);
 -	nvkm_mask(device, 0x419eb4, 0x00008000, 0x00008000);
 -	nvkm_mask(device, 0x419eb4, 0x00001000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00002000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00004000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00008000, 0x00000000);
 -}
 -
  static const struct gf100_gr_func
  gk110_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gk110_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk110_gr_pack_mmio,
  	.fecs.ucode = &gk110_gr_fecs_ucode,
  	.gpccs.ucode = &gk110_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
index d76dd178007f,b7a6479c6ec2..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
@@@ -102,9 -102,22 +102,18 @@@ gk110b_gr_pack_mmio[] = 
  
  static const struct gf100_gr_func
  gk110b_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gk110_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk110b_gr_pack_mmio,
  	.fecs.ucode = &gk110_gr_fecs_ucode,
  	.gpccs.ucode = &gk110_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
index 14bbe6ed02a9,5f1e71abe504..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
@@@ -161,9 -161,21 +161,18 @@@ gk208_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gk208_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk208_gr_pack_mmio,
  	.fecs.ucode = &gk208_gr_fecs_ucode,
  	.gpccs.ucode = &gk208_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
index 2c67fac576d1,98f74fe7007d..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
@@@ -441,9 -391,24 +441,19 @@@ gm107_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gm107_gr = {
++<<<<<<< HEAD
 +	.init = gm107_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gm107_gr_init_gpc_mmu,
+ 	.init_bios = gm107_gr_init_bios,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_bios_2 = gm107_gr_init_bios_2,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gm107_gr_init_shader_exceptions,
 -	.init_400054 = gm107_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gm107_gr_pack_mmio,
  	.fecs.ucode = &gm107_gr_fecs_ucode,
  	.gpccs.ucode = &gm107_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
index c5cca4279a00,3e017fdd23ed..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
@@@ -61,113 -77,46 +61,153 @@@ gm200_gr_init_rop_active_fbps(struct gf
  	nvkm_mask(device, 0x408958, 0x0000000f, fbp_count); /* crop */
  }
  
+ static u8
+ gm200_gr_tile_map_6_24[] = {
+ 	0, 1, 2, 3, 4, 5, 3, 4, 5, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 0, 1, 2,
+ };
+ 
+ static u8
+ gm200_gr_tile_map_4_16[] = {
+ 	0, 1, 2, 3, 2, 3, 0, 1, 3, 0, 1, 2, 1, 2, 3, 0,
+ };
+ 
+ static u8
+ gm200_gr_tile_map_2_8[] = {
+ 	0, 1, 1, 0, 0, 1, 1, 0,
+ };
+ 
+ void
+ gm200_gr_oneinit_tiles(struct gf100_gr *gr)
+ {
+ 	/*XXX: Not sure what this is about.  The algorithm from NVGPU
+ 	 *     seems to work for all boards I tried from earlier (and
+ 	 *     later) GPUs except in these specific configurations.
+ 	 *
+ 	 *     Let's just hardcode them for now.
+ 	 */
+ 	if (gr->gpc_nr == 2 && gr->tpc_total == 8) {
+ 		memcpy(gr->tile, gm200_gr_tile_map_2_8, gr->tpc_total);
+ 		gr->screen_tile_row_offset = 1;
+ 	} else
+ 	if (gr->gpc_nr == 4 && gr->tpc_total == 16) {
+ 		memcpy(gr->tile, gm200_gr_tile_map_4_16, gr->tpc_total);
+ 		gr->screen_tile_row_offset = 4;
+ 	} else
+ 	if (gr->gpc_nr == 6 && gr->tpc_total == 24) {
+ 		memcpy(gr->tile, gm200_gr_tile_map_6_24, gr->tpc_total);
+ 		gr->screen_tile_row_offset = 5;
+ 	} else {
+ 		gf100_gr_oneinit_tiles(gr);
+ 	}
+ }
+ 
 +int
 +gm200_gr_init(struct gf100_gr *gr)
 +{
 +	struct nvkm_device *device = gr->base.engine.subdev.device;
 +	const u32 magicgpc918 = DIV_ROUND_UP(0x00800000, gr->tpc_total);
 +	u32 data[TPC_MAX / 8] = {};
 +	u8  tpcnr[GPC_MAX];
 +	int gpc, tpc, rop;
 +	int i;
 +
 +	gr->func->init_gpc_mmu(gr);
 +
 +	gf100_gr_mmio(gr, gr->fuc_sw_nonctx);
 +
 +	gm107_gr_init_bios(gr);
 +
 +	nvkm_wr32(device, GPC_UNIT(0, 0x3018), 0x00000001);
 +
 +	memset(data, 0x00, sizeof(data));
 +	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
 +	for (i = 0, gpc = -1; i < gr->tpc_total; i++) {
 +		do {
 +			gpc = (gpc + 1) % gr->gpc_nr;
 +		} while (!tpcnr[gpc]);
 +		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
 +
 +		data[i / 8] |= tpc << ((i % 8) * 4);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x0980), data[0]);
 +	nvkm_wr32(device, GPC_BCAST(0x0984), data[1]);
 +	nvkm_wr32(device, GPC_BCAST(0x0988), data[2]);
 +	nvkm_wr32(device, GPC_BCAST(0x098c), data[3]);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 +			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 +							 gr->tpc_total);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +	nvkm_wr32(device, GPC_BCAST(0x033c), nvkm_rd32(device, 0x100804));
 +
 +	gr->func->init_rop_active_fbps(gr);
 +
 +	nvkm_wr32(device, 0x400500, 0x00010001);
 +	nvkm_wr32(device, 0x400100, 0xffffffff);
 +	nvkm_wr32(device, 0x40013c, 0xffffffff);
 +	nvkm_wr32(device, 0x400124, 0x00000002);
 +	nvkm_wr32(device, 0x409c24, 0x000e0000);
 +	nvkm_wr32(device, 0x405848, 0xc0000000);
 +	nvkm_wr32(device, 0x40584c, 0x00000001);
 +	nvkm_wr32(device, 0x404000, 0xc0000000);
 +	nvkm_wr32(device, 0x404600, 0xc0000000);
 +	nvkm_wr32(device, 0x408030, 0xc0000000);
 +	nvkm_wr32(device, 0x404490, 0xc0000000);
 +	nvkm_wr32(device, 0x406018, 0xc0000000);
 +	nvkm_wr32(device, 0x407020, 0x40000000);
 +	nvkm_wr32(device, 0x405840, 0xc0000000);
 +	nvkm_wr32(device, 0x405844, 0x00ffffff);
 +	nvkm_mask(device, 0x419cc0, 0x00000008, 0x00000008);
 +
 +	gr->func->init_ppc_exceptions(gr);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0420), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0900), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x1028), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0824), 0xc0000000);
 +		for (tpc = 0; tpc < gr->tpc_nr[gpc]; tpc++) {
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x508), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x50c), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x224), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x48c), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x084), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x430), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x00dffffe);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x00000005);
 +		}
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c90), 0xffffffff);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c94), 0xffffffff);
 +	}
 +
 +	for (rop = 0; rop < gr->rop_nr; rop++) {
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x144), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x070), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x204), 0xffffffff);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x208), 0xffffffff);
 +	}
 +
 +	nvkm_wr32(device, 0x400108, 0xffffffff);
 +	nvkm_wr32(device, 0x400138, 0xffffffff);
 +	nvkm_wr32(device, 0x400118, 0xffffffff);
 +	nvkm_wr32(device, 0x400130, 0xffffffff);
 +	nvkm_wr32(device, 0x40011c, 0xffffffff);
 +	nvkm_wr32(device, 0x400134, 0xffffffff);
 +
 +	nvkm_wr32(device, 0x400054, 0x2c350f63);
 +
 +	gf100_gr_zbc_init(gr);
 +
 +	return gf100_gr_init_ctxctl(gr);
 +}
 +
  int
  gm200_gr_new_(const struct gf100_gr_func *func, struct nvkm_device *device,
  	      int index, struct nvkm_gr **pgr)
@@@ -208,10 -157,24 +248,15 @@@
  
  static const struct gf100_gr_func
  gm200_gr = {
++<<<<<<< HEAD
 +	.init = gm200_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_bios = gm107_gr_init_bios,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gm200_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gm107_gr_init_shader_exceptions,
 -	.init_400054 = gm107_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.rops = gm200_gr_rops,
  	.tpc_nr = 4,
  	.ppc_nr = 2,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
index b87d86575036,70d0aa2c1076..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
@@@ -158,11 -64,23 +158,16 @@@ gp100_gr_init(struct gf100_gr *gr
  
  static const struct gf100_gr_func
  gp100_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419c9c = gp100_gr_init_419c9c,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_num_active_ltcs = gp100_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 6,
  	.tpc_nr = 5,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
index 8d1b09b9c236,71bfe2d8c3f6..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
@@@ -42,12 -42,23 +42,17 @@@ gp102_gr_init_swdx_pes_mask(struct gf10
  
  static const struct gf100_gr_func
  gp102_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 +	.init_num_active_ltcs = gp100_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 6,
  	.tpc_nr = 5,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
index 7ca037eda549,6c5724017c71..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
@@@ -28,12 -28,23 +28,17 @@@
  
  static const struct gf100_gr_func
  gp107_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 +	.init_num_active_ltcs = gp100_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 2,
  	.tpc_nr = 3,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
index 775c4cfdeade,aaaa2844ec20..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
@@@ -25,21 -25,24 +25,26 @@@
  
  #include <nvif/class.h>
  
 +static void
 +gp10b_gr_init_num_active_ltcs(struct gf100_gr *gr)
 +{
 +	struct nvkm_device *device = gr->base.engine.subdev.device;
 +
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +}
 +
  static const struct gf100_gr_func
  gp10b_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.init = gf100_gr_init,
++>>>>>>> 5f6474a4e6ce (drm/nouveau/gr/gf100-: port tile mapping calculations from NVGPU)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_num_active_ltcs = gp10b_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 1,
  	.tpc_nr = 2,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c
index 1c2f5b3c5f8f..6f6f74e87be2 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c
@@ -1119,27 +1119,14 @@ gf100_grctx_generate_rop_mapping(struct gf100_gr *gr)
 {
 	struct nvkm_device *device = gr->base.engine.subdev.device;
 	u32 data[6] = {}, data2[2] = {};
-	u8  tpcnr[GPC_MAX];
 	u8  shift, ntpcv;
-	int gpc, tpc, i;
-
-	/* calculate first set of magics */
-	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
-
-	gpc = -1;
-	for (tpc = 0; tpc < gr->tpc_total; tpc++) {
-		do {
-			gpc = (gpc + 1) % gr->gpc_nr;
-		} while (!tpcnr[gpc]);
-		tpcnr[gpc]--;
-
-		data[tpc / 6] |= gpc << ((tpc % 6) * 5);
-	}
+	int i;
 
-	for (; tpc < 32; tpc++)
-		data[tpc / 6] |= 7 << ((tpc % 6) * 5);
+	/* Pack tile map into register format. */
+	for (i = 0; i < 32; i++)
+		data[i / 6] |= (gr->tile[i] & 0x07) << ((i % 6) * 5);
 
-	/* and the second... */
+	/* Magic. */
 	shift = 0;
 	ntpcv = gr->tpc_total;
 	while (!(ntpcv & (1 << 4))) {
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf117.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf117.c
index e873622b8cfb..6282df085ca6 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf117.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf117.c
@@ -194,27 +194,14 @@ gf117_grctx_generate_rop_mapping(struct gf100_gr *gr)
 {
 	struct nvkm_device *device = gr->base.engine.subdev.device;
 	u32 data[6] = {}, data2[2] = {};
-	u8  tpcnr[GPC_MAX];
 	u8  shift, ntpcv;
-	int gpc, tpc, i;
-
-	/* calculate first set of magics */
-	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
-
-	gpc = -1;
-	for (tpc = 0; tpc < gr->tpc_total; tpc++) {
-		do {
-			gpc = (gpc + 1) % gr->gpc_nr;
-		} while (!tpcnr[gpc]);
-		tpcnr[gpc]--;
-
-		data[tpc / 6] |= gpc << ((tpc % 6) * 5);
-	}
+	int i;
 
-	for (; tpc < 32; tpc++)
-		data[tpc / 6] |= 7 << ((tpc % 6) * 5);
+	/* Pack tile map into register format. */
+	for (i = 0; i < 32; i++)
+		data[i / 6] |= (gr->tile[i] & 0x07) << ((i % 6) * 5);
 
-	/* and the second... */
+	/* Magic. */
 	shift = 0;
 	ntpcv = gr->tpc_total;
 	while (!(ntpcv & (1 << 4))) {
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
index 7601140b0017..8d42251c706d 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
@@ -1645,6 +1645,82 @@ gf100_gr_init_ctxctl(struct gf100_gr *gr)
 	return ret;
 }
 
+void
+gf100_gr_oneinit_tiles(struct gf100_gr *gr)
+{
+	static const u8 primes[] = {
+		3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61
+	};
+	int init_frac[GPC_MAX], init_err[GPC_MAX], run_err[GPC_MAX], i, j;
+	u32 mul_factor, comm_denom;
+	u8  gpc_map[GPC_MAX];
+	bool sorted;
+
+	switch (gr->tpc_total) {
+	case 15: gr->screen_tile_row_offset = 0x06; break;
+	case 14: gr->screen_tile_row_offset = 0x05; break;
+	case 13: gr->screen_tile_row_offset = 0x02; break;
+	case 11: gr->screen_tile_row_offset = 0x07; break;
+	case 10: gr->screen_tile_row_offset = 0x06; break;
+	case  7:
+	case  5: gr->screen_tile_row_offset = 0x01; break;
+	case  3: gr->screen_tile_row_offset = 0x02; break;
+	case  2:
+	case  1: gr->screen_tile_row_offset = 0x01; break;
+	default: gr->screen_tile_row_offset = 0x03;
+		for (i = 0; i < ARRAY_SIZE(primes); i++) {
+			if (gr->tpc_total % primes[i]) {
+				gr->screen_tile_row_offset = primes[i];
+				break;
+			}
+		}
+		break;
+	}
+
+	/* Sort GPCs by TPC count, highest-to-lowest. */
+	for (i = 0; i < gr->gpc_nr; i++)
+		gpc_map[i] = i;
+	sorted = false;
+
+	while (!sorted) {
+		for (sorted = true, i = 0; i < gr->gpc_nr - 1; i++) {
+			if (gr->tpc_nr[gpc_map[i + 1]] >
+			    gr->tpc_nr[gpc_map[i + 0]]) {
+				u8 swap = gpc_map[i];
+				gpc_map[i + 0] = gpc_map[i + 1];
+				gpc_map[i + 1] = swap;
+				sorted = false;
+			}
+		}
+	}
+
+	/* Determine tile->GPC mapping */
+	mul_factor = gr->gpc_nr * gr->tpc_max;
+	if (mul_factor & 1)
+		mul_factor = 2;
+	else
+		mul_factor = 1;
+
+	comm_denom = gr->gpc_nr * gr->tpc_max * mul_factor;
+
+	for (i = 0; i < gr->gpc_nr; i++) {
+		init_frac[i] = gr->tpc_nr[gpc_map[i]] * gr->gpc_nr * mul_factor;
+		 init_err[i] = i * gr->tpc_max * mul_factor - comm_denom/2;
+		  run_err[i] = init_frac[i] + init_err[i];
+	}
+
+	for (i = 0; i < gr->tpc_total;) {
+		for (j = 0; j < gr->gpc_nr; j++) {
+			if ((run_err[j] * 2) >= comm_denom) {
+				gr->tile[i++] = gpc_map[j];
+				run_err[j] += init_frac[j] - comm_denom;
+			} else {
+				run_err[j] += init_frac[j];
+			}
+		}
+	}
+}
+
 static int
 gf100_gr_oneinit(struct nvkm_gr *base)
 {
@@ -1684,45 +1760,8 @@ gf100_gr_oneinit(struct nvkm_gr *base)
 		}
 	}
 
-	/*XXX: these need figuring out... though it might not even matter */
-	switch (device->chipset) {
-	case 0xc0:
-		if (gr->tpc_total == 11) { /* 465, 3/4/4/0, 4 */
-			gr->screen_tile_row_offset = 0x07;
-		} else
-		if (gr->tpc_total == 14) { /* 470, 3/3/4/4, 5 */
-			gr->screen_tile_row_offset = 0x05;
-		} else
-		if (gr->tpc_total == 15) { /* 480, 3/4/4/4, 6 */
-			gr->screen_tile_row_offset = 0x06;
-		}
-		break;
-	case 0xc3: /* 450, 4/0/0/0, 2 */
-		gr->screen_tile_row_offset = 0x03;
-		break;
-	case 0xc4: /* 460, 3/4/0/0, 4 */
-		gr->screen_tile_row_offset = 0x01;
-		break;
-	case 0xc1: /* 2/0/0/0, 1 */
-		gr->screen_tile_row_offset = 0x01;
-		break;
-	case 0xc8: /* 4/4/3/4, 5 */
-		gr->screen_tile_row_offset = 0x06;
-		break;
-	case 0xce: /* 4/4/0/0, 4 */
-		gr->screen_tile_row_offset = 0x03;
-		break;
-	case 0xcf: /* 4/0/0/0, 3 */
-		gr->screen_tile_row_offset = 0x03;
-		break;
-	case 0xd7:
-	case 0xd9: /* 1/0/0/0, 1 */
-	case 0xea: /* gk20a */
-	case 0x12b: /* gm20b */
-		gr->screen_tile_row_offset = 0x01;
-		break;
-	}
-
+	memset(gr->tile, 0xff, sizeof(gr->tile));
+	gr->func->oneinit_tiles(gr);
 	return 0;
 }
 
@@ -2048,6 +2087,7 @@ gf100_gr_gpccs_ucode = {
 
 static const struct gf100_gr_func
 gf100_gr = {
+	.oneinit_tiles = gf100_gr_oneinit_tiles,
 	.init = gf100_gr_init,
 	.mmio = gf100_gr_pack_mmio,
 	.fecs.ucode = &gf100_gr_fecs_ucode,
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
index d736dcd55ea2..715606144af0 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
@@ -114,6 +114,7 @@ gf104_gr_pack_mmio[] = {
 
 static const struct gf100_gr_func
 gf104_gr = {
+	.oneinit_tiles = gf100_gr_oneinit_tiles,
 	.init = gf100_gr_init,
 	.mmio = gf104_gr_pack_mmio,
 	.fecs.ucode = &gf100_gr_fecs_ucode,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
index 2f0d24498427..b5888f391963 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
@@ -105,6 +105,7 @@ gf108_gr_pack_mmio[] = {
 
 static const struct gf100_gr_func
 gf108_gr = {
+	.oneinit_tiles = gf100_gr_oneinit_tiles,
 	.init = gf100_gr_init,
 	.mmio = gf108_gr_pack_mmio,
 	.fecs.ucode = &gf100_gr_fecs_ucode,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
index d1d942eb86af..04a32e1b5005 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
@@ -86,6 +86,7 @@ gf110_gr_pack_mmio[] = {
 
 static const struct gf100_gr_func
 gf110_gr = {
+	.oneinit_tiles = gf100_gr_oneinit_tiles,
 	.init = gf100_gr_init,
 	.mmio = gf110_gr_pack_mmio,
 	.fecs.ucode = &gf100_gr_fecs_ucode,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
index 0124e468086e..a2ef94331926 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
@@ -122,6 +122,7 @@ gf117_gr_gpccs_ucode = {
 
 static const struct gf100_gr_func
 gf117_gr = {
+	.oneinit_tiles = gf100_gr_oneinit_tiles,
 	.init = gf100_gr_init,
 	.mmio = gf117_gr_pack_mmio,
 	.fecs.ucode = &gf117_gr_fecs_ucode,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
index 8d8e4cafe28f..5795ea4d3ccb 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
@@ -177,6 +177,7 @@ gf119_gr_pack_mmio[] = {
 
 static const struct gf100_gr_func
 gf119_gr = {
+	.oneinit_tiles = gf100_gr_oneinit_tiles,
 	.init = gf100_gr_init,
 	.mmio = gf119_gr_pack_mmio,
 	.fecs.ucode = &gf100_gr_fecs_ucode,
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
index de8b806b88fd..9f334d41e2e5 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
@@ -310,6 +310,7 @@ gk20a_gr_init(struct gf100_gr *gr)
 
 static const struct gf100_gr_func
 gk20a_gr = {
+	.oneinit_tiles = gf100_gr_oneinit_tiles,
 	.init = gk20a_gr_init,
 	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 	.set_hww_esr_report_mask = gk20a_gr_set_hww_esr_report_mask,
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
index 69479af1d829..2cbff2f8c3ad 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
@@ -64,6 +64,7 @@ gm20b_gr_set_hww_esr_report_mask(struct gf100_gr *gr)
 
 static const struct gf100_gr_func
 gm20b_gr = {
+	.oneinit_tiles = gm200_gr_oneinit_tiles,
 	.init = gk20a_gr_init,
 	.init_gpc_mmu = gm20b_gr_init_gpc_mmu,
 	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
index 289d8b272b42..86775d374920 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
@@ -26,6 +26,7 @@
 
 static const struct gf100_gr_func
 gp104_gr = {
+	.oneinit_tiles = gm200_gr_oneinit_tiles,
 	.init = gf100_gr_init,
 	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
