net/mlx5e: Switch pme counters to use stats group API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Switch pme counters to use stats group API (Alaa Hleihel) [1520297]
Rebuild_FUZZ: 96.08%
commit-author Kamal Heib <kamalh@mellanox.com>
commit 0e6f01a49d9c006e3ee3104ca5d4ccf722e154db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0e6f01a4.failed

Switch the pme counters to use the new stats group API.

	Signed-off-by: Kamal Heib <kamalh@mellanox.com>
	Reviewed-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 0e6f01a49d9c006e3ee3104ca5d4ccf722e154db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 52759b7e5eaa,6de948819034..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -176,17 -142,15 +176,20 @@@ static bool mlx5e_query_global_pause_co
  
  int mlx5e_ethtool_get_sset_count(struct mlx5e_priv *priv, int sset)
  {
 -	int i, num_stats = 0;
 -
  	switch (sset) {
  	case ETH_SS_STATS:
 -		for (i = 0; i < mlx5e_num_stats_grps; i++)
 -			num_stats += mlx5e_stats_grps[i].get_num_stats(priv);
 -		return num_stats +
 +		return NUM_SW_COUNTERS +
 +		       MLX5E_NUM_Q_CNTRS(priv) +
 +		       NUM_VPORT_COUNTERS + NUM_PPORT_COUNTERS(priv) +
 +		       NUM_PCIE_COUNTERS(priv) +
  		       MLX5E_NUM_RQ_STATS(priv) +
  		       MLX5E_NUM_SQ_STATS(priv) +
++<<<<<<< HEAD
 +		       MLX5E_NUM_PFC_COUNTERS(priv) +
 +		       ARRAY_SIZE(mlx5e_pme_status_desc) +
 +		       ARRAY_SIZE(mlx5e_pme_error_desc) +
++=======
++>>>>>>> 0e6f01a49d9c (net/mlx5e: Switch pme counters to use stats group API)
  		       mlx5e_ipsec_get_count(priv);
  
  	case ETH_SS_PRIV_FLAGS:
@@@ -208,86 -172,11 +211,79 @@@ static int mlx5e_get_sset_count(struct 
  
  static void mlx5e_fill_stats_strings(struct mlx5e_priv *priv, u8 *data)
  {
 -	int i, j, tc, idx = 0;
 +	int i, j, tc, prio, idx = 0;
 +	unsigned long pfc_combined;
 +
 +	/* SW counters */
 +	for (i = 0; i < NUM_SW_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN, sw_stats_desc[i].format);
 +
 +	/* Q counters */
 +	for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN, q_stats_desc[i].format);
 +
 +	/* VPORT counters */
 +	for (i = 0; i < NUM_VPORT_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       vport_stats_desc[i].format);
 +
 +	/* PPORT counters */
 +	for (i = 0; i < NUM_PPORT_802_3_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_802_3_stats_desc[i].format);
  
 -	for (i = 0; i < mlx5e_num_stats_grps; i++)
 -		idx = mlx5e_stats_grps[i].fill_strings(priv, data, idx);
 +	for (i = 0; i < NUM_PPORT_2863_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_2863_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_2819_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_2819_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_phy_statistical_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_ETH_EXT_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_eth_ext_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pcie_perf_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS64(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pcie_perf_stats_desc64[i].format);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_STALL_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pcie_perf_stall_stats_desc[i].format);
 +
 +	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
 +			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 +				pport_per_prio_traffic_stats_desc[i].format, prio);
 +	}
 +
 +	pfc_combined = mlx5e_query_pfc_combined(priv);
 +	for_each_set_bit(prio, &pfc_combined, NUM_PPORT_PRIO) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
 +			char pfc_string[ETH_GSTRING_LEN];
 +
 +			snprintf(pfc_string, sizeof(pfc_string), "prio%d", prio);
 +			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 +				pport_per_prio_pfc_stats_desc[i].format, pfc_string);
 +		}
 +	}
 +
 +	if (mlx5e_query_global_pause_combined(priv)) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
 +			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 +				pport_per_prio_pfc_stats_desc[i].format, "global");
 +		}
 +	}
  
- 	/* port module event counters */
- 	for (i = 0; i < ARRAY_SIZE(mlx5e_pme_status_desc); i++)
- 		strcpy(data + (idx++) * ETH_GSTRING_LEN, mlx5e_pme_status_desc[i].format);
- 
- 	for (i = 0; i < ARRAY_SIZE(mlx5e_pme_error_desc); i++)
- 		strcpy(data + (idx++) * ETH_GSTRING_LEN, mlx5e_pme_error_desc[i].format);
- 
  	/* IPSec counters */
  	idx += mlx5e_ipsec_get_strings(priv, data + idx * ETH_GSTRING_LEN);
  
@@@ -341,9 -230,7 +337,13 @@@ void mlx5e_ethtool_get_ethtool_stats(st
  				     struct ethtool_stats *stats, u64 *data)
  {
  	struct mlx5e_channels *channels;
++<<<<<<< HEAD
 +	struct mlx5_priv *mlx5_priv;
 +	int i, j, tc, prio, idx = 0;
 +	unsigned long pfc_combined;
++=======
+ 	int i, j, tc, idx = 0;
++>>>>>>> 0e6f01a49d9c (net/mlx5e: Switch pme counters to use stats group API)
  
  	if (!data)
  		return;
@@@ -354,81 -241,9 +354,71 @@@
  	channels = &priv->channels;
  	mutex_unlock(&priv->state_lock);
  
 -	for (i = 0; i < mlx5e_num_stats_grps; i++)
 -		idx = mlx5e_stats_grps[i].fill_stats(priv, data, idx);
 +	for (i = 0; i < NUM_SW_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_CPU(&priv->stats.sw,
 +						   sw_stats_desc, i);
 +
 +	for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR32_CPU(&priv->stats.qcnt,
 +						   q_stats_desc, i);
 +
 +	for (i = 0; i < NUM_VPORT_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(priv->stats.vport.query_vport_out,
 +						  vport_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_802_3_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.IEEE_802_3_counters,
 +						  pport_802_3_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_2863_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.RFC_2863_counters,
 +						  pport_2863_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_2819_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.RFC_2819_counters,
 +						  pport_2819_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.phy_statistical_counters,
 +						  pport_phy_statistical_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_ETH_EXT_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.eth_ext_counters,
 +						  pport_eth_ext_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_perf_counters,
 +						  pcie_perf_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS64(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pcie.pcie_perf_counters,
 +						  pcie_perf_stats_desc64, i);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_STALL_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_perf_counters,
 +						  pcie_perf_stall_stats_desc, i);
 +
 +	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
 +			data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.per_prio_counters[prio],
 +						 pport_per_prio_traffic_stats_desc, i);
 +	}
 +
 +	pfc_combined = mlx5e_query_pfc_combined(priv);
 +	for_each_set_bit(prio, &pfc_combined, NUM_PPORT_PRIO) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
 +			data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.per_prio_counters[prio],
 +							  pport_per_prio_pfc_stats_desc, i);
 +		}
 +	}
 +
 +	if (mlx5e_query_global_pause_combined(priv)) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
 +			data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.per_prio_counters[0],
 +							  pport_per_prio_pfc_stats_desc, i);
 +		}
 +	}
  
- 	/* port module event counters */
- 	mlx5_priv =  &priv->mdev->priv;
- 	for (i = 0; i < ARRAY_SIZE(mlx5e_pme_status_desc); i++)
- 		data[idx++] = MLX5E_READ_CTR64_CPU(mlx5_priv->pme_stats.status_counters,
- 						   mlx5e_pme_status_desc, i);
- 
- 	for (i = 0; i < ARRAY_SIZE(mlx5e_pme_error_desc); i++)
- 		data[idx++] = MLX5E_READ_CTR64_CPU(mlx5_priv->pme_stats.error_counters,
- 						   mlx5e_pme_error_desc, i);
- 
  	/* IPSec counters */
  	idx += mlx5e_ipsec_get_stats(priv, data + idx);
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 6008820e81eb,800d72a22d91..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -454,18 -238,18 +454,30 @@@ struct mlx5e_stats 
  	struct mlx5e_qcounter_stats qcnt;
  	struct mlx5e_vport_stats vport;
  	struct mlx5e_pport_stats pport;
 -	struct rtnl_link_stats64 vf_vport;
  	struct mlx5e_pcie_stats pcie;
 +	struct rtnl_link_stats64 vf_vport;
  };
  
++<<<<<<< HEAD
 +static const struct counter_desc mlx5e_pme_status_desc[] = {
 +	{ "module_unplug", 8 },
 +};
 +
 +static const struct counter_desc mlx5e_pme_error_desc[] = {
 +	{ "module_bus_stuck", 16 },       /* bus stuck (I2C or data shorted) */
 +	{ "module_high_temp", 48 },       /* high temperature */
 +	{ "module_bad_shorted", 56 },    /* bad or shorted cable/module */
 +};
++=======
+ struct mlx5e_priv;
+ struct mlx5e_stats_grp {
+ 	int (*get_num_stats)(struct mlx5e_priv *priv);
+ 	int (*fill_strings)(struct mlx5e_priv *priv, u8 *data, int idx);
+ 	int (*fill_stats)(struct mlx5e_priv *priv, u64 *data, int idx);
+ };
+ 
+ extern const struct mlx5e_stats_grp mlx5e_stats_grps[];
+ extern const int mlx5e_num_stats_grps;
++>>>>>>> 0e6f01a49d9c (net/mlx5e: Switch pme counters to use stats group API)
  
  #endif /* __MLX5_EN_STATS_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
