x86/traps: Fix up general protection faults caused by UMIP

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] traps: Fix up general protection faults caused by UMIP (Gopal Tiwari) [1456572]
Rebuild_FUZZ: 96.43%
commit-author Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
commit 6fc9dc81bff0ea461db534e2672acfdaf76f3e4e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6fc9dc81.failed

If the User-Mode Instruction Prevention CPU feature is available and
enabled, a general protection fault will be issued if the instructions
sgdt, sldt, sidt, str or smsw are executed from user-mode context
(CPL > 0). If the fault was caused by any of the instructions protected
by UMIP, fixup_umip_exception() will emulate dummy results for these
instructions as follows: in virtual-8086 and protected modes, sgdt, sidt
and smsw are emulated; str and sldt are not emulated. No emulation is done
for user-space long mode processes.

If emulation is successful, the emulated result is passed to the user space
program and no SIGSEGV signal is emitted.

	Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Chen Yucong <slaoub@gmail.com>
	Cc: Chris Metcalf <cmetcalf@mellanox.com>
	Cc: Dave Hansen <dave.hansen@linux.intel.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Fenghua Yu <fenghua.yu@intel.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Huang Rui <ray.huang@amd.com>
	Cc: Jiri Slaby <jslaby@suse.cz>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Michael S. Tsirkin <mst@redhat.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
	Cc: Shuah Khan <shuah@kernel.org>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: ricardo.neri@intel.com
Link: http://lkml.kernel.org/r/1509935277-22138-11-git-send-email-ricardo.neri-calderon@linux.intel.com
[ Added curly braces. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 6fc9dc81bff0ea461db534e2672acfdaf76f3e4e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/traps.c
diff --cc arch/x86/kernel/traps.c
index 72b09235868b,ab54bf398803..000000000000
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@@ -58,10 -55,12 +58,15 @@@
  #include <asm/mce.h>
  #include <asm/fixmap.h>
  #include <asm/mach_traps.h>
 -#include <asm/alternative.h>
 -#include <asm/fpu/xstate.h>
 +#include <asm/xsave.h>
  #include <asm/trace/mpx.h>
  #include <asm/mpx.h>
++<<<<<<< HEAD
 +#include <asm/alternative.h>
++=======
+ #include <asm/vm86.h>
+ #include <asm/umip.h>
++>>>>>>> 6fc9dc81bff0 (x86/traps: Fix up general protection faults caused by UMIP)
  
  #ifdef CONFIG_X86_64
  #include <asm/x86_init.h>
@@@ -336,18 -510,20 +341,27 @@@ dotraplinkage void __kprobe
  do_general_protection(struct pt_regs *regs, long error_code)
  {
  	struct task_struct *tsk;
 +	enum ctx_state prev_state;
  
 -	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 -	cond_local_irq_enable(regs);
 +	prev_state = exception_enter();
 +	conditional_sti(regs);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_X86_32
 +	if (regs->flags & X86_VM_MASK) {
++=======
+ 	if (static_cpu_has(X86_FEATURE_UMIP)) {
+ 		if (user_mode(regs) && fixup_umip_exception(regs))
+ 			return;
+ 	}
+ 
+ 	if (v8086_mode(regs)) {
++>>>>>>> 6fc9dc81bff0 (x86/traps: Fix up general protection faults caused by UMIP)
  		local_irq_enable();
  		handle_vm86_fault((struct kernel_vm86_regs *) regs, error_code);
 -		return;
 +		goto exit;
  	}
 +#endif
  
  	tsk = current;
  	if (!user_mode(regs)) {
* Unmerged path arch/x86/kernel/traps.c
