tpm: Move Linux RNG connection to hwrng

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jason Gunthorpe <jgg@ziepe.ca>
commit 6e592a065d51d26f9d62b8b7501a5114076af8b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6e592a06.failed

The tpm-rng.c approach is completely inconsistent with how the kernel
handles hotplug. Instead manage a hwrng device for each TPM. This will
cause the kernel to read entropy from the TPM when it is plugged in, and
allow access to the TPM rng via /dev/hwrng.

	Signed-off-by: Jason Gunthorpe <jgg@ziepe.ca>
	Tested-by: PrasannaKumar Muralidharan <prasannatsmkumar@gmail.com>
	Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
(cherry picked from commit 6e592a065d51d26f9d62b8b7501a5114076af8b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/hw_random/Kconfig
#	drivers/char/hw_random/Makefile
#	drivers/char/hw_random/tpm-rng.c
#	drivers/char/tpm/tpm-chip.c
diff --cc drivers/char/hw_random/Kconfig
index 11504205e5f3,88044eda0ac6..000000000000
--- a/drivers/char/hw_random/Kconfig
+++ b/drivers/char/hw_random/Kconfig
@@@ -303,28 -306,119 +303,144 @@@ config HW_RANDOM_POWERN
  
  	  If unsure, say Y.
  
++<<<<<<< HEAD
 +config HW_RANDOM_EXYNOS
 +	tristate "EXYNOS HW random number generator support"
 +	depends on HW_RANDOM && HAS_IOMEM && HAVE_CLK
 +	---help---
 +	  This driver provides kernel-side support for the Random Number
 +	  Generator hardware found on EXYNOS SOCs.
 +
 +	  To compile this driver as a module, choose M here: the
 +	  module will be called exynos-rng.
 +
 +	  If unsure, say Y.
 +
 +config HW_RANDOM_TPM
 +	tristate "TPM HW Random Number Generator support"
 +	depends on HW_RANDOM && TCG_TPM
 +	default HW_RANDOM
 +	---help---
 +	  This driver provides kernel-side support for the Random Number
 +	  Generator in the Trusted Platform Module
 +
 +	  To compile this driver as a module, choose M here: the
 +	  module will be called tpm-rng.
++=======
+ config HW_RANDOM_HISI
+ 	tristate "Hisilicon Random Number Generator support"
+ 	depends on HW_RANDOM && ARCH_HISI
+ 	default HW_RANDOM
+ 	---help---
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on Hisilicon Hip04 and Hip05 SoC.
+ 
+ 	  To compile this driver as a module, choose M here: the
+ 	  module will be called hisi-rng.
+ 
+ 	  If unsure, say Y.
+ 
+ config HW_RANDOM_MSM
+ 	tristate "Qualcomm SoCs Random Number Generator support"
+ 	depends on HW_RANDOM && ARCH_QCOM
+ 	default HW_RANDOM
+ 	---help---
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on Qualcomm SoCs.
+ 
+ 	  To compile this driver as a module, choose M here. the
+ 	  module will be called msm-rng.
+ 
+ 	  If unsure, say Y.
+ 
+ config HW_RANDOM_ST
+ 	tristate "ST Microelectronics HW Random Number Generator support"
+ 	depends on HW_RANDOM && ARCH_STI
+ 	---help---
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on STi series of SoCs.
+ 
+ 	  To compile this driver as a module, choose M here: the
+ 	  module will be called st-rng.
+ 
+ config HW_RANDOM_XGENE
+ 	tristate "APM X-Gene True Random Number Generator (TRNG) support"
+ 	depends on HW_RANDOM && ARCH_XGENE
+ 	default HW_RANDOM
+ 	---help---
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on APM X-Gene SoC.
+ 
+ 	  To compile this driver as a module, choose M here: the
+ 	  module will be called xgene_rng.
+ 
+ 	  If unsure, say Y.
+ 
+ config HW_RANDOM_STM32
+ 	tristate "STMicroelectronics STM32 random number generator"
+ 	depends on HW_RANDOM && (ARCH_STM32 || COMPILE_TEST)
+ 	depends on HAS_IOMEM
+ 	help
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on STM32 microcontrollers.
+ 
+ 	  To compile this driver as a module, choose M here: the
+ 	  module will be called stm32-rng.
+ 
+ 	  If unsure, say N.
+ 
+ config HW_RANDOM_PIC32
+ 	tristate "Microchip PIC32 Random Number Generator support"
+ 	depends on HW_RANDOM && MACH_PIC32
+ 	default y
+ 	---help---
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on a PIC32.
+ 
+ 	  To compile this driver as a module, choose M here. the
+ 	  module will be called pic32-rng.
+ 
+ 	  If unsure, say Y.
+ 
+ config HW_RANDOM_MESON
+ 	tristate "Amlogic Meson Random Number Generator support"
+ 	depends on HW_RANDOM
+ 	depends on ARCH_MESON || COMPILE_TEST
+ 	default y
+ 	---help---
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on Amlogic Meson SoCs.
+ 
+ 	  To compile this driver as a module, choose M here. the
+ 	  module will be called meson-rng.
+ 
+ 	  If unsure, say Y.
+ 
+ config HW_RANDOM_CAVIUM
+        tristate "Cavium ThunderX Random Number Generator support"
+        depends on HW_RANDOM && PCI && (ARM64 || (COMPILE_TEST && 64BIT))
+        default HW_RANDOM
+        ---help---
+          This driver provides kernel-side support for the Random Number
+          Generator hardware found on Cavium SoCs.
+ 
+          To compile this driver as a module, choose M here: the
+          module will be called cavium_rng.
+ 
+          If unsure, say Y.
+ 
+ config HW_RANDOM_MTK
+ 	tristate "Mediatek Random Number Generator support"
+ 	depends on HW_RANDOM
+ 	depends on ARCH_MEDIATEK || COMPILE_TEST
+ 	default y
+ 	---help---
+ 	  This driver provides kernel-side support for the Random Number
+ 	  Generator hardware found on Mediatek SoCs.
+ 
+ 	  To compile this driver as a module, choose M here. the
+ 	  module will be called mtk-rng.
++>>>>>>> 6e592a065d51 (tpm: Move Linux RNG connection to hwrng)
  
  	  If unsure, say Y.
  
diff --cc drivers/char/hw_random/Makefile
index 9462afada2b8,0ef05c61d9c8..000000000000
--- a/drivers/char/hw_random/Makefile
+++ b/drivers/char/hw_random/Makefile
@@@ -19,13 -21,20 +19,17 @@@ obj-$(CONFIG_HW_RANDOM_PASEMI) += pasem
  obj-$(CONFIG_HW_RANDOM_VIRTIO) += virtio-rng.o
  obj-$(CONFIG_HW_RANDOM_TX4939) += tx4939-rng.o
  obj-$(CONFIG_HW_RANDOM_MXC_RNGA) += mxc-rnga.o
 -obj-$(CONFIG_HW_RANDOM_IMX_RNGC) += imx-rngc.o
  obj-$(CONFIG_HW_RANDOM_OCTEON) += octeon-rng.o
  obj-$(CONFIG_HW_RANDOM_NOMADIK) += nomadik-rng.o
 +obj-$(CONFIG_HW_RANDOM_PICOXCELL) += picoxcell-rng.o
 +obj-$(CONFIG_HW_RANDOM_PPC4XX) += ppc4xx-rng.o
  obj-$(CONFIG_HW_RANDOM_PSERIES) += pseries-rng.o
  obj-$(CONFIG_HW_RANDOM_POWERNV) += powernv-rng.o
++<<<<<<< HEAD
 +obj-$(CONFIG_HW_RANDOM_EXYNOS)	+= exynos-rng.o
 +obj-$(CONFIG_HW_RANDOM_TPM) += tpm-rng.o
++=======
+ obj-$(CONFIG_HW_RANDOM_HISI)	+= hisi-rng.o
++>>>>>>> 6e592a065d51 (tpm: Move Linux RNG connection to hwrng)
  obj-$(CONFIG_HW_RANDOM_BCM2835) += bcm2835-rng.o
 -obj-$(CONFIG_HW_RANDOM_IPROC_RNG200) += iproc-rng200.o
 -obj-$(CONFIG_HW_RANDOM_MSM) += msm-rng.o
 -obj-$(CONFIG_HW_RANDOM_ST) += st-rng.o
 -obj-$(CONFIG_HW_RANDOM_XGENE) += xgene-rng.o
 -obj-$(CONFIG_HW_RANDOM_STM32) += stm32-rng.o
 -obj-$(CONFIG_HW_RANDOM_PIC32) += pic32-rng.o
 -obj-$(CONFIG_HW_RANDOM_MESON) += meson-rng.o
 -obj-$(CONFIG_HW_RANDOM_CAVIUM) += cavium-rng.o cavium-rng-vf.o
 -obj-$(CONFIG_HW_RANDOM_MTK)	+= mtk-rng.o
  obj-$(CONFIG_HW_RANDOM_S390) += s390-trng.o
diff --cc drivers/char/tpm/tpm-chip.c
index 20e6c046ee88,0a62c19937b6..000000000000
--- a/drivers/char/tpm/tpm-chip.c
+++ b/drivers/char/tpm/tpm-chip.c
@@@ -26,8 -26,9 +26,13 @@@
  #include <linux/spinlock.h>
  #include <linux/freezer.h>
  #include <linux/major.h>
++<<<<<<< HEAD
++=======
+ #include <linux/tpm_eventlog.h>
+ #include <linux/hw_random.h>
++>>>>>>> 6e592a065d51 (tpm: Move Linux RNG connection to hwrng)
  #include "tpm.h"
 +#include "tpm_eventlog.h"
  
  DEFINE_IDR(dev_nums_idr);
  static DEFINE_MUTEX(idr_lock);
@@@ -475,11 -486,11 +510,13 @@@ EXPORT_SYMBOL_GPL(tpm_chip_register)
  void tpm_chip_unregister(struct tpm_chip *chip)
  {
  	tpm_del_legacy_sysfs(chip);
+ 	if (IS_ENABLED(CONFIG_HW_RANDOM_TPM))
+ 		hwrng_unregister(&chip->hwrng);
  	tpm_bios_log_teardown(chip);
 -	if (chip->flags & TPM_CHIP_FLAG_TPM2)
 -		cdev_device_del(&chip->cdevs, &chip->devs);
 +	if (chip->flags & TPM_CHIP_FLAG_TPM2) {
 +		cdev_del(&chip->cdevs);
 +		device_del(&chip->devs);
 +	}
  	tpm_del_char_device(chip);
  }
  EXPORT_SYMBOL_GPL(tpm_chip_unregister);
* Unmerged path drivers/char/hw_random/tpm-rng.c
* Unmerged path drivers/char/hw_random/Kconfig
* Unmerged path drivers/char/hw_random/Makefile
* Unmerged path drivers/char/hw_random/tpm-rng.c
diff --git a/drivers/char/tpm/Kconfig b/drivers/char/tpm/Kconfig
index 39fd2ced78f5..56c4842b9bd6 100644
--- a/drivers/char/tpm/Kconfig
+++ b/drivers/char/tpm/Kconfig
@@ -26,6 +26,17 @@ menuconfig TCG_TPM
 
 if TCG_TPM
 
+config HW_RANDOM_TPM
+	bool "TPM HW Random Number Generator support"
+	depends on TCG_TPM && HW_RANDOM && !(TCG_TPM=y && HW_RANDOM=m)
+	default y
+	---help---
+	  This setting exposes the TPM's Random Number Generator as a hwrng
+	  device. This allows the kernel to collect randomness from the TPM at
+	  boot, and provides the TPM randomines in /dev/hwrng.
+
+	  If unsure, say Y.
+
 config TCG_TIS_CORE
 	tristate
 	---help---
* Unmerged path drivers/char/tpm/tpm-chip.c
diff --git a/drivers/char/tpm/tpm.h b/drivers/char/tpm/tpm.h
index f79e703602f9..847caebb7ff5 100644
--- a/drivers/char/tpm/tpm.h
+++ b/drivers/char/tpm/tpm.h
@@ -26,6 +26,7 @@
 #include <linux/module.h>
 #include <linux/delay.h>
 #include <linux/fs.h>
+#include <linux/hw_random.h>
 #include <linux/mutex.h>
 #include <linux/sched.h>
 #include <linux/platform_device.h>
@@ -211,6 +212,9 @@ struct tpm_chip {
 	int dev_num;		/* /dev/tpm# */
 	unsigned long is_open;	/* only one allowed */
 
+	char hwrng_name[64];
+	struct hwrng hwrng;
+
 	struct mutex tpm_mutex;	/* tpm is processing */
 
 	unsigned long timeout_a; /* jiffies */
