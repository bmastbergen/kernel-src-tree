s390: Make cpc_name accessible

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [s390] Make cpc_name accessible (Hendrik Brueckner) [1519343]
Rebuild_FUZZ: 88.89%
commit-author Janosch Frank <frankja@linux.vnet.ibm.com>
commit e435dc31398e63b992639cf62024d959219db191
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e435dc31.failed

sclp_ocf.c is the only way to get the cpc name, as it registers the
sole event handler for the ocf event. By creating a new global
function that copies that name, we make it accessible to the world
which longs to retrieve it.

Additionally we now also store the cpc name as EBCDIC, so we don't
have to convert it to and from ASCII if it is requested in native
encoding.

	Signed-off-by: Janosch Frank <frankja@linux.vnet.ibm.com>
	Reviewed-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
	Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit e435dc31398e63b992639cf62024d959219db191)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/sclp.h
diff --cc arch/s390/include/asm/sclp.h
index d0f75d3a8f34,49736a0d4e0e..000000000000
--- a/arch/s390/include/asm/sclp.h
+++ b/arch/s390/include/asm/sclp.h
@@@ -63,14 -94,13 +63,19 @@@ int sclp_chp_configure(struct chp_id ch
  int sclp_chp_deconfigure(struct chp_id chpid);
  int sclp_chp_read_info(struct sclp_chp_info *info);
  void sclp_get_ipl_info(struct sclp_ipl_info *info);
 +bool __init sclp_has_linemode(void);
 +bool __init sclp_has_vt220(void);
  int sclp_pci_configure(u32 fid);
  int sclp_pci_deconfigure(u32 fid);
 -int sclp_pci_report(struct zpci_report_error_header *report, u32 fh, u32 fid);
 -int memcpy_hsa_kernel(void *dest, unsigned long src, size_t count);
 -int memcpy_hsa_user(void __user *dest, unsigned long src, size_t count);
 +int memcpy_hsa(void *dest, unsigned long src, size_t count, int mode);
 +unsigned long sclp_get_hsa_size(void);
  void sclp_early_detect(void);
++<<<<<<< HEAD
 +int sclp_has_siif(void);
 +int sclp_has_sief2(void);
++=======
+ void _sclp_print_early(const char *);
+ void sclp_ocf_cpc_name_copy(char *dst);
++>>>>>>> e435dc31398e (s390: Make cpc_name accessible)
  
  #endif /* _ASM_S390_SCLP_H */
* Unmerged path arch/s390/include/asm/sclp.h
diff --git a/drivers/s390/char/sclp_ocf.c b/drivers/s390/char/sclp_ocf.c
index 2553db0fdb52..f59b71776bbd 100644
--- a/drivers/s390/char/sclp_ocf.c
+++ b/drivers/s390/char/sclp_ocf.c
@@ -26,7 +26,7 @@
 #define OCF_LENGTH_CPC_NAME 8UL
 
 static char hmc_network[OCF_LENGTH_HMC_NETWORK + 1];
-static char cpc_name[OCF_LENGTH_CPC_NAME + 1];
+static char cpc_name[OCF_LENGTH_CPC_NAME]; /* in EBCDIC */
 
 static DEFINE_SPINLOCK(sclp_ocf_lock);
 static struct work_struct sclp_ocf_change_work;
@@ -72,9 +72,8 @@ static void sclp_ocf_handler(struct evbuf_header *evbuf)
 	}
 	if (cpc) {
 		size = min(OCF_LENGTH_CPC_NAME, (size_t) cpc->length);
+		memset(cpc_name, 0, OCF_LENGTH_CPC_NAME);
 		memcpy(cpc_name, cpc + 1, size);
-		EBCASC(cpc_name, size);
-		cpc_name[size] = 0;
 	}
 	spin_unlock(&sclp_ocf_lock);
 	schedule_work(&sclp_ocf_change_work);
@@ -85,15 +84,23 @@ static struct sclp_register sclp_ocf_event = {
 	.receiver_fn = sclp_ocf_handler,
 };
 
+void sclp_ocf_cpc_name_copy(char *dst)
+{
+	spin_lock_irq(&sclp_ocf_lock);
+	memcpy(dst, cpc_name, OCF_LENGTH_CPC_NAME);
+	spin_unlock_irq(&sclp_ocf_lock);
+}
+EXPORT_SYMBOL(sclp_ocf_cpc_name_copy);
+
 static ssize_t cpc_name_show(struct kobject *kobj,
 			     struct kobj_attribute *attr, char *page)
 {
-	int rc;
+	char name[OCF_LENGTH_CPC_NAME + 1];
 
-	spin_lock_irq(&sclp_ocf_lock);
-	rc = snprintf(page, PAGE_SIZE, "%s\n", cpc_name);
-	spin_unlock_irq(&sclp_ocf_lock);
-	return rc;
+	sclp_ocf_cpc_name_copy(name);
+	name[OCF_LENGTH_CPC_NAME] = 0;
+	EBCASC(name, OCF_LENGTH_CPC_NAME);
+	return snprintf(page, PAGE_SIZE, "%s\n", name);
 }
 
 static struct kobj_attribute cpc_name_attr =
