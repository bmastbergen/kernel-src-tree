perf trace beauty clone: Beautify syscall arguments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 33396a3a6a6b16784291ac19708e3a6cf85db6c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/33396a3a.failed

Now, syswide tracing, selected entries:

  # trace -e clone
  24417.203 ( 0.158 ms): bash/11323 clone(flags: CHILD_CLEARTID|CHILD_SETTID|0x11, child_stack: 0, parent_tidptr: 0, child_tidptr: 0x7f0778e5c9d0, tls: 0x7f0778e5c700) = 11325 (bash)
          ? (     ?   ): bash/11325  ... [continued]: clone()) = 0
  24419.355 ( 0.093 ms): bash/10586 clone(flags: CHILD_CLEARTID|CHILD_SETTID|0x11, child_stack: 0, parent_tidptr: 0, child_tidptr: 0x7f0778e5c9d0, tls: 0x7f0778e5c700) = 11326 (bash)
          ? (     ?   ): bash/11326  ... [continued]: clone()) = 0
  24419.744 ( 0.102 ms): bash/11326 clone(flags: CHILD_CLEARTID|CHILD_SETTID|0x11, child_stack: 0, parent_tidptr: 0, child_tidptr: 0x7f0778e5c9d0, tls: 0x7f0778e5c700) = 11327 (bash)
          ? (     ?   ): bash/11327  ... [continued]: clone()) = 0
  24420.138 ( 0.105 ms): bash/11327 clone(flags: CHILD_CLEARTID|CHILD_SETTID|0x11, child_stack: 0, parent_tidptr: 0, child_tidptr: 0x7f0778e5c9d0, tls: 0x7f0778e5c700) = 11328 (bash)
          ? (     ?   ): bash/11328  ... [continued]: clone()) = 0
  35747.722 ( 0.044 ms): gpg-agent/18087 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ff0755f6ff0, parent_tidptr: 0x7ff0755f79d0, child_tidptr: 0x7ff0755f79d0, tls: 0x7ff0755f7700) = 11329 (gpg-agent)
          ? (     ?   ): gpg-agent/11329  ... [continued]: clone()) = 0
  35748.359 ( 0.022 ms): gpg-agent/18087 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ff075df7ff0, parent_tidptr: 0x7ff075df89d0, child_tidptr: 0x7ff075df89d0, tls: 0x7ff075df8700) = 11330 (gpg-agent)
          ? (     ?   ): gpg-agent/11330  ... [continued]: clone()) = 0
  35781.422 ( 0.452 ms): NetworkManager/1112 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7f2f1fffedb0, parent_tidptr: 0x7f2f1ffff9d0, child_tidptr: 0x7f2f1ffff9d0, tls: 0x7f2f1ffff700) = 11331 (NetworkManager)
          ? (     ?   ): NetworkManager/11331  ... [continued]: clone()) = 0

Need to improve the formatting of the second return, to the child, this
cset only focused on the argument formatting.

If we trace just one pid:

  # trace -e clone -p 19863
     0.349 ( 0.025 ms): Chrome_IOThrea/19863 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ffb84eaac70, parent_tidptr: 0x7ffb84eab9d0, child_tidptr: 0x7ffb84eab9d0, tls: 0x7ffb84eab700) = 11637 (Chrome_IOThread)
     0.392 ( 0.013 ms): Chrome_IOThrea/19863 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ffb664b8c70, parent_tidptr: 0x7ffb664b99d0, child_tidptr: 0x7ffb664b99d0, tls: 0x7ffb664b9700) = 11638 (Chrome_IOThread)
     0.573 ( 0.015 ms): Chrome_IOThrea/19863 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ffb6046cc70, parent_tidptr: 0x7ffb6046d9d0, child_tidptr: 0x7ffb6046d9d0, tls: 0x7ffb6046d700) = 11639 (Chrome_IOThread)
     0.617 ( 0.014 ms): Chrome_IOThrea/19863 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ffb730dcc70, parent_tidptr: 0x7ffb730dd9d0, child_tidptr: 0x7ffb730dd9d0, tls: 0x7ffb730dd700) = 11640 (Chrome_IOThread)
     4.350 ( 0.065 ms): Chrome_IOThrea/19863 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ffb720d9c70, parent_tidptr: 0x7ffb720da9d0, child_tidptr: 0x7ffb720da9d0, tls: 0x7ffb720da700) = 11642 (Chrome_IOThread)
     5.642 ( 0.079 ms): Chrome_IOThrea/19863 clone(flags: VM|FS|FILES|SIGHAND|THREAD|SYSVSEM|SETTLS|PARENT_SETTID|CHILD_CLEARTID, child_stack: 0x7ffb718d8c70, parent_tidptr: 0x7ffb718d99d0, child_tidptr: 0x7ffb718d99d0, tls: 0x7ffb718d9700) = 11643 (Chrome_IOThread)
^C#

We'll also have to fix the argument ordering in different arches,
probably having multiple syscall_fmt entries with each possible order
and then use perf_evsel__env_arch() (if dealing with a perf.data file)
or the current system info, for live sessions.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-am068uyubgj83snepolwhbfe@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 33396a3a6a6b16784291ac19708e3a6cf85db6c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
#	tools/perf/trace/beauty/Build
#	tools/perf/trace/beauty/beauty.h
diff --cc tools/perf/builtin-trace.c
index 5114abbd2e32,9e74e675d7cb..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -609,57 -617,46 +609,94 @@@ static struct syscall_fmt 
  	bool	   timeout;
  	bool	   hexret;
  } syscall_fmts[] = {
 -	{ .name	    = "access",
 -	  .arg = { [1] = { .scnprintf = SCA_ACCMODE,  /* mode */ }, }, },
 -	{ .name	    = "arch_prctl", .alias = "prctl", },
 -	{ .name	    = "bpf",
 -	  .arg = { [0] = STRARRAY(cmd, bpf_cmd), }, },
 +	{ .name	    = "access",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_ACCMODE,  /* mode */ }, },
 +	{ .name	    = "arch_prctl", .errmsg = true, .alias = "prctl", },
  	{ .name	    = "brk",	    .hexret = true,
++<<<<<<< HEAD
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* brk */ }, },
 +	{ .name	    = "chdir",	    .errmsg = true, },
 +	{ .name	    = "chmod",	    .errmsg = true, },
 +	{ .name	    = "chroot",	    .errmsg = true, },
 +	{ .name     = "clock_gettime",  .errmsg = true, STRARRAY(0, clk_id, clockid), },
 +	{ .name	    = "clone",	    .errpid = true, },
 +	{ .name	    = "close",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_CLOSE_FD, /* fd */ }, },
 +	{ .name	    = "connect",    .errmsg = true, },
 +	{ .name	    = "creat",	    .errmsg = true, },
 +	{ .name	    = "dup",	    .errmsg = true, },
 +	{ .name	    = "dup2",	    .errmsg = true, },
 +	{ .name	    = "dup3",	    .errmsg = true, },
 +	{ .name	    = "epoll_ctl",  .errmsg = true, STRARRAY(1, op, epoll_ctl_ops), },
 +	{ .name	    = "eventfd2",   .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_EFD_FLAGS, /* flags */ }, },
 +	{ .name	    = "faccessat",  .errmsg = true, },
 +	{ .name	    = "fadvise64",  .errmsg = true, },
 +	{ .name	    = "fallocate",  .errmsg = true, },
 +	{ .name	    = "fchdir",	    .errmsg = true, },
 +	{ .name	    = "fchmod",	    .errmsg = true, },
 +	{ .name	    = "fchmodat",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "fchown",	    .errmsg = true, },
 +	{ .name	    = "fchownat",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "fcntl",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_STRARRAYS, /* cmd */ },
 +	  .arg_parm	 = { [1] = &strarrays__fcntl_cmds_arrays, /* cmd */ }, },
 +	{ .name	    = "fdatasync",  .errmsg = true, },
 +	{ .name	    = "flock",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_FLOCK, /* cmd */ }, },
 +	{ .name	    = "fsetxattr",  .errmsg = true, },
 +	{ .name	    = "fstat",	    .errmsg = true, .alias = "newfstat", },
 +	{ .name	    = "fstatat",    .errmsg = true, .alias = "newfstatat", },
 +	{ .name	    = "fstatfs",    .errmsg = true, },
 +	{ .name	    = "fsync",    .errmsg = true, },
 +	{ .name	    = "ftruncate", .errmsg = true, },
 +	{ .name	    = "futex",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_FUTEX_OP, /* op */ }, },
 +	{ .name	    = "futimesat", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "getdents",   .errmsg = true, },
 +	{ .name	    = "getdents64", .errmsg = true, },
 +	{ .name	    = "getitimer",  .errmsg = true, STRARRAY(0, which, itimers), },
 +	{ .name	    = "getrandom",  .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_GETRANDOM_FLAGS, /* flags */ }, },
++=======
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX, /* brk */ }, }, },
+ 	{ .name     = "clock_gettime",
+ 	  .arg = { [0] = STRARRAY(clk_id, clockid), }, },
+ 	{ .name	    = "clone",	    .errpid = true, .nr_args = 5,
+ 	  .arg = { [0] = { .name = "flags",	    .scnprintf = SCA_CLONE_FLAGS, },
+ 		   [1] = { .name = "child_stack",   .scnprintf = SCA_HEX, },
+ 		   [2] = { .name = "parent_tidptr", .scnprintf = SCA_HEX, },
+ 		   [3] = { .name = "child_tidptr",  .scnprintf = SCA_HEX, },
+ 		   [4] = { .name = "tls",	    .scnprintf = SCA_HEX, }, }, },
+ 	{ .name	    = "close",
+ 	  .arg = { [0] = { .scnprintf = SCA_CLOSE_FD, /* fd */ }, }, },
+ 	{ .name	    = "epoll_ctl",
+ 	  .arg = { [1] = STRARRAY(op, epoll_ctl_ops), }, },
+ 	{ .name	    = "eventfd2",
+ 	  .arg = { [1] = { .scnprintf = SCA_EFD_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "fchmodat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "fchownat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "fcntl",
+ 	  .arg = { [1] = { .scnprintf = SCA_FCNTL_CMD, /* cmd */
+ 			   .parm      = &strarrays__fcntl_cmds_arrays,
+ 			   .show_zero = true, },
+ 		   [2] = { .scnprintf =  SCA_FCNTL_ARG, /* arg */ }, }, },
+ 	{ .name	    = "flock",
+ 	  .arg = { [1] = { .scnprintf = SCA_FLOCK, /* cmd */ }, }, },
+ 	{ .name	    = "fstat", .alias = "newfstat", },
+ 	{ .name	    = "fstatat", .alias = "newfstatat", },
+ 	{ .name	    = "futex",
+ 	  .arg = { [1] = { .scnprintf = SCA_FUTEX_OP, /* op */ }, }, },
+ 	{ .name	    = "futimesat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "getitimer",
+ 	  .arg = { [0] = STRARRAY(which, itimers), }, },
++>>>>>>> 33396a3a6a6b (perf trace beauty clone: Beautify syscall arguments)
  	{ .name	    = "getpid",	    .errpid = true, },
  	{ .name	    = "getpgid",    .errpid = true, },
  	{ .name	    = "getppid",    .errpid = true, },
diff --cc tools/perf/trace/beauty/Build
index 55f4f086ea37,eaa1e8e8e100..000000000000
--- a/tools/perf/trace/beauty/Build
+++ b/tools/perf/trace/beauty/Build
@@@ -1,2 -1,3 +1,8 @@@
++<<<<<<< HEAD
 +# XXX there's no statx syscall in RHEL7
 +#libperf-y += statx.o
++=======
+ libperf-y += clone.o
+ libperf-y += fcntl.o
+ libperf-y += statx.o
++>>>>>>> 33396a3a6a6b (perf trace beauty clone: Beautify syscall arguments)
diff --cc tools/perf/trace/beauty/beauty.h
index d493f9e76cf1,69a5c8a2d420..000000000000
--- a/tools/perf/trace/beauty/beauty.h
+++ b/tools/perf/trace/beauty/beauty.h
@@@ -51,6 -51,33 +51,36 @@@ unsigned long syscall_arg__val(struct s
  size_t syscall_arg__scnprintf_strarrays(char *bf, size_t size, struct syscall_arg *arg);
  #define SCA_STRARRAYS syscall_arg__scnprintf_strarrays
  
++<<<<<<< HEAD
++=======
+ size_t syscall_arg__scnprintf_fd(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_FD syscall_arg__scnprintf_fd
+ 
+ size_t syscall_arg__scnprintf_hex(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_HEX syscall_arg__scnprintf_hex
+ 
+ size_t syscall_arg__scnprintf_int(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_INT syscall_arg__scnprintf_int
+ 
+ size_t syscall_arg__scnprintf_long(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_LONG syscall_arg__scnprintf_long
+ 
+ size_t syscall_arg__scnprintf_pid(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_PID syscall_arg__scnprintf_pid
+ 
+ size_t syscall_arg__scnprintf_clone_flags(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_CLONE_FLAGS syscall_arg__scnprintf_clone_flags
+ 
+ size_t syscall_arg__scnprintf_fcntl_cmd(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_FCNTL_CMD syscall_arg__scnprintf_fcntl_cmd
+ 
+ size_t syscall_arg__scnprintf_fcntl_arg(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_FCNTL_ARG syscall_arg__scnprintf_fcntl_arg
+ 
+ size_t syscall_arg__scnprintf_open_flags(char *bf, size_t size, struct syscall_arg *arg);
+ #define SCA_OPEN_FLAGS syscall_arg__scnprintf_open_flags
+ 
++>>>>>>> 33396a3a6a6b (perf trace beauty clone: Beautify syscall arguments)
  size_t syscall_arg__scnprintf_statx_flags(char *bf, size_t size, struct syscall_arg *arg);
  #define SCA_STATX_FLAGS syscall_arg__scnprintf_statx_flags
  
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/trace/beauty/Build
* Unmerged path tools/perf/trace/beauty/beauty.h
diff --git a/tools/perf/trace/beauty/clone.c b/tools/perf/trace/beauty/clone.c
new file mode 100644
index 000000000000..ab982a7c63bb
--- /dev/null
+++ b/tools/perf/trace/beauty/clone.c
@@ -0,0 +1,58 @@
+/*
+ * trace/beauty/cone.c
+ *
+ *  Copyright (C) 2017, Red Hat Inc, Arnaldo Carvalho de Melo <acme@redhat.com>
+ *
+ * Released under the GPL v2. (and only v2, not any later version)
+ */
+
+#include "trace/beauty/beauty.h"
+#include <linux/kernel.h>
+#include <sys/types.h>
+#include <uapi/linux/sched.h>
+
+static size_t clone__scnprintf_flags(unsigned long flags, char *bf, size_t size)
+{
+	int printed = 0;
+
+#define	P_FLAG(n) \
+	if (flags & CLONE_##n) { \
+		printed += scnprintf(bf + printed, size - printed, "%s%s", printed ? "|" : "", #n); \
+		flags &= ~CLONE_##n; \
+	}
+
+	P_FLAG(VM);
+	P_FLAG(FS);
+	P_FLAG(FILES);
+	P_FLAG(SIGHAND);
+	P_FLAG(PTRACE);
+	P_FLAG(VFORK);
+	P_FLAG(PARENT);
+	P_FLAG(THREAD);
+	P_FLAG(NEWNS);
+	P_FLAG(SYSVSEM);
+	P_FLAG(SETTLS);
+	P_FLAG(PARENT_SETTID);
+	P_FLAG(CHILD_CLEARTID);
+	P_FLAG(DETACHED);
+	P_FLAG(UNTRACED);
+	P_FLAG(CHILD_SETTID);
+	P_FLAG(NEWCGROUP);
+	P_FLAG(NEWUTS);
+	P_FLAG(NEWIPC);
+	P_FLAG(NEWUSER);
+	P_FLAG(NEWPID);
+	P_FLAG(NEWNET);
+	P_FLAG(IO);
+#undef P_FLAG
+
+	if (flags)
+		printed += scnprintf(bf + printed, size - printed, "%s%#x", printed ? "|" : "", flags);
+
+	return printed;
+}
+
+size_t syscall_arg__scnprintf_clone_flags(char *bf, size_t size, struct syscall_arg *arg)
+{
+	return clone__scnprintf_flags(arg->val, bf, size);
+}
