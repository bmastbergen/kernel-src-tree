scsi: megaraid_sas: Do not use 32-bit atomic request descriptor for Ventura controllers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] megaraid_sas: Do not use 32-bit atomic request descriptor for Ventura controllers (Tomas Henzl) [1544697]
Rebuild_FUZZ: 96.43%
commit-author Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
commit 9ff97fa8db94caeab59a3c5401e975df468b4d8e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9ff97fa8.failed

Problem Statement: Sending I/O through 32 bit descriptors to Ventura series of
controller results in IO timeout on certain conditions.

This error only occurs on systems with high I/O activity on Ventura series
controllers.

Changes in this patch will prevent driver from using 32 bit descriptor and use
64 bit Descriptors.

	Cc: <stable@vger.kernel.org>
	Signed-off-by: Kashyap Desai <kashyap.desai@broadcom.com>
	Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Tomas Henzl <thenzl@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 9ff97fa8db94caeab59a3c5401e975df468b4d8e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_fusion.c
diff --cc drivers/scsi/megaraid/megaraid_sas_fusion.c
index ca20398bdaa4,dc8e850fbfd2..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@@ -200,26 -225,21 +199,28 @@@ static voi
  megasas_fire_cmd_fusion(struct megasas_instance *instance,
  		union MEGASAS_REQUEST_DESCRIPTOR_UNION *req_desc)
  {
++<<<<<<< HEAD
 +	if (instance->is_ventura)
 +		writel(le32_to_cpu(req_desc->u.low),
 +			&instance->reg_set->inbound_single_queue_port);
 +	else {
++=======
++>>>>>>> 9ff97fa8db94 (scsi: megaraid_sas: Do not use 32-bit atomic request descriptor for Ventura controllers)
  #if defined(writeq) && defined(CONFIG_64BIT)
- 		u64 req_data = (((u64)le32_to_cpu(req_desc->u.high) << 32) |
- 				le32_to_cpu(req_desc->u.low));
+ 	u64 req_data = (((u64)le32_to_cpu(req_desc->u.high) << 32) |
+ 		le32_to_cpu(req_desc->u.low));
  
- 		writeq(req_data, &instance->reg_set->inbound_low_queue_port);
+ 	writeq(req_data, &instance->reg_set->inbound_low_queue_port);
  #else
- 		unsigned long flags;
- 		spin_lock_irqsave(&instance->hba_lock, flags);
- 		writel(le32_to_cpu(req_desc->u.low),
- 			&instance->reg_set->inbound_low_queue_port);
- 		writel(le32_to_cpu(req_desc->u.high),
- 			&instance->reg_set->inbound_high_queue_port);
- 		mmiowb();
- 		spin_unlock_irqrestore(&instance->hba_lock, flags);
+ 	unsigned long flags;
+ 	spin_lock_irqsave(&instance->hba_lock, flags);
+ 	writel(le32_to_cpu(req_desc->u.low),
+ 		&instance->reg_set->inbound_low_queue_port);
+ 	writel(le32_to_cpu(req_desc->u.high),
+ 		&instance->reg_set->inbound_high_queue_port);
+ 	mmiowb();
+ 	spin_unlock_irqrestore(&instance->hba_lock, flags);
  #endif
- 	}
  }
  
  /**
@@@ -772,8 -976,8 +773,13 @@@ megasas_ioc_init_fusion(struct megasas_
  	const char *sys_info;
  	MFI_CAPABILITIES *drv_ops;
  	u32 scratch_pad_2;
++<<<<<<< HEAD
 +	unsigned long flags;
 +	struct timeval tv;
++=======
+ 	ktime_t time;
+ 	bool cur_fw_64bit_dma_capable;
++>>>>>>> 9ff97fa8db94 (scsi: megaraid_sas: Do not use 32-bit atomic request descriptor for Ventura controllers)
  
  	fusion = instance->ctrl_context;
  
* Unmerged path drivers/scsi/megaraid/megaraid_sas_fusion.c
