mmc: core: Remove unnecessary host claim

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mmc] core: Remove unnecessary host claim (Gopal Tiwari) [1456570]
Rebuild_FUZZ: 93.33%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 9ca28c5cd967e07e708a407eec59894e2e643670
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9ca28c5c.failed

Callers already have the host claimed, so remove the unnecessary
calls to mmc_claim_host() and mmc_release_host().

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 9ca28c5cd967e07e708a407eec59894e2e643670)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/mmc_ops.c
diff --cc drivers/mmc/core/mmc_ops.c
index 408c76011352,a6b0a232f24a..000000000000
--- a/drivers/mmc/core/mmc_ops.c
+++ b/drivers/mmc/core/mmc_ops.c
@@@ -833,3 -898,161 +833,164 @@@ int mmc_can_ext_csd(struct mmc_card *ca
  {
  	return (card && card->csd.mmca_vsn > CSD_SPEC_VER_3);
  }
++<<<<<<< HEAD
++=======
+ 
+ /**
+  *	mmc_stop_bkops - stop ongoing BKOPS
+  *	@card: MMC card to check BKOPS
+  *
+  *	Send HPI command to stop ongoing background operations to
+  *	allow rapid servicing of foreground operations, e.g. read/
+  *	writes. Wait until the card comes out of the programming state
+  *	to avoid errors in servicing read/write requests.
+  */
+ int mmc_stop_bkops(struct mmc_card *card)
+ {
+ 	int err = 0;
+ 
+ 	err = mmc_interrupt_hpi(card);
+ 
+ 	/*
+ 	 * If err is EINVAL, we can't issue an HPI.
+ 	 * It should complete the BKOPS.
+ 	 */
+ 	if (!err || (err == -EINVAL)) {
+ 		mmc_card_clr_doing_bkops(card);
+ 		mmc_retune_release(card->host);
+ 		err = 0;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static int mmc_read_bkops_status(struct mmc_card *card)
+ {
+ 	int err;
+ 	u8 *ext_csd;
+ 
+ 	mmc_claim_host(card->host);
+ 	err = mmc_get_ext_csd(card, &ext_csd);
+ 	mmc_release_host(card->host);
+ 	if (err)
+ 		return err;
+ 
+ 	card->ext_csd.raw_bkops_status = ext_csd[EXT_CSD_BKOPS_STATUS];
+ 	card->ext_csd.raw_exception_status = ext_csd[EXT_CSD_EXP_EVENTS_STATUS];
+ 	kfree(ext_csd);
+ 	return 0;
+ }
+ 
+ /**
+  *	mmc_start_bkops - start BKOPS for supported cards
+  *	@card: MMC card to start BKOPS
+  *	@from_exception: A flag to indicate if this function was
+  *			 called due to an exception raised by the card
+  *
+  *	Start background operations whenever requested.
+  *	When the urgent BKOPS bit is set in a R1 command response
+  *	then background operations should be started immediately.
+ */
+ void mmc_start_bkops(struct mmc_card *card, bool from_exception)
+ {
+ 	int err;
+ 	int timeout;
+ 	bool use_busy_signal;
+ 
+ 	if (!card->ext_csd.man_bkops_en || mmc_card_doing_bkops(card))
+ 		return;
+ 
+ 	err = mmc_read_bkops_status(card);
+ 	if (err) {
+ 		pr_err("%s: Failed to read bkops status: %d\n",
+ 		       mmc_hostname(card->host), err);
+ 		return;
+ 	}
+ 
+ 	if (!card->ext_csd.raw_bkops_status)
+ 		return;
+ 
+ 	if (card->ext_csd.raw_bkops_status < EXT_CSD_BKOPS_LEVEL_2 &&
+ 	    from_exception)
+ 		return;
+ 
+ 	if (card->ext_csd.raw_bkops_status >= EXT_CSD_BKOPS_LEVEL_2) {
+ 		timeout = MMC_OPS_TIMEOUT_MS;
+ 		use_busy_signal = true;
+ 	} else {
+ 		timeout = 0;
+ 		use_busy_signal = false;
+ 	}
+ 
+ 	mmc_retune_hold(card->host);
+ 
+ 	err = __mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,
+ 			EXT_CSD_BKOPS_START, 1, timeout, 0,
+ 			use_busy_signal, true, false);
+ 	if (err) {
+ 		pr_warn("%s: Error %d starting bkops\n",
+ 			mmc_hostname(card->host), err);
+ 		mmc_retune_release(card->host);
+ 		return;
+ 	}
+ 
+ 	/*
+ 	 * For urgent bkops status (LEVEL_2 and more)
+ 	 * bkops executed synchronously, otherwise
+ 	 * the operation is in progress
+ 	 */
+ 	if (!use_busy_signal)
+ 		mmc_card_set_doing_bkops(card);
+ 	else
+ 		mmc_retune_release(card->host);
+ }
+ 
+ /*
+  * Flush the cache to the non-volatile storage.
+  */
+ int mmc_flush_cache(struct mmc_card *card)
+ {
+ 	int err = 0;
+ 
+ 	if (mmc_card_mmc(card) &&
+ 			(card->ext_csd.cache_size > 0) &&
+ 			(card->ext_csd.cache_ctrl & 1)) {
+ 		err = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,
+ 				EXT_CSD_FLUSH_CACHE, 1, 0);
+ 		if (err)
+ 			pr_err("%s: cache flush error %d\n",
+ 					mmc_hostname(card->host), err);
+ 	}
+ 
+ 	return err;
+ }
+ EXPORT_SYMBOL(mmc_flush_cache);
+ 
+ static int mmc_cmdq_switch(struct mmc_card *card, bool enable)
+ {
+ 	u8 val = enable ? EXT_CSD_CMDQ_MODE_ENABLED : 0;
+ 	int err;
+ 
+ 	if (!card->ext_csd.cmdq_support)
+ 		return -EOPNOTSUPP;
+ 
+ 	err = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_CMDQ_MODE_EN,
+ 			 val, card->ext_csd.generic_cmd6_time);
+ 	if (!err)
+ 		card->ext_csd.cmdq_en = enable;
+ 
+ 	return err;
+ }
+ 
+ int mmc_cmdq_enable(struct mmc_card *card)
+ {
+ 	return mmc_cmdq_switch(card, true);
+ }
+ EXPORT_SYMBOL_GPL(mmc_cmdq_enable);
+ 
+ int mmc_cmdq_disable(struct mmc_card *card)
+ {
+ 	return mmc_cmdq_switch(card, false);
+ }
+ EXPORT_SYMBOL_GPL(mmc_cmdq_disable);
++>>>>>>> 9ca28c5cd967 (mmc: core: Remove unnecessary host claim)
* Unmerged path drivers/mmc/core/mmc_ops.c
