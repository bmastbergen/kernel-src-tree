scsi: qla2xxx: Remove session creation redundant code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Remove session creation redundant code (Himanshu Madhani) [1547714]
Rebuild_FUZZ: 94.00%
commit-author Quinn Tran <quinn.tran@cavium.com>
commit fb35265b12bb9ba4946e146e0c7090a446a9b081
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/fb35265b.failed

Current code creates a session when a new port is
discovered, and a PLOGI/PRLI is received. There is
no need to create session when command has arrived.

	Signed-off-by: Quinn Tran <quinn.tran@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit fb35265b12bb9ba4946e146e0c7090a446a9b081)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_target.c
diff --cc drivers/scsi/qla2xxx/qla_target.c
index 7e293149d314,a4783eb11711..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.c
+++ b/drivers/scsi/qla2xxx/qla_target.c
@@@ -4201,87 -4241,6 +4196,90 @@@ static struct qla_tgt_cmd *qlt_get_tag(
  	return cmd;
  }
  
++<<<<<<< HEAD
 +static void qlt_create_sess_from_atio(struct work_struct *work)
 +{
 +	struct qla_tgt_sess_op *op = container_of(work,
 +					struct qla_tgt_sess_op, work);
 +	scsi_qla_host_t *vha = op->vha;
 +	struct qla_hw_data *ha = vha->hw;
 +	struct fc_port *sess;
 +	struct qla_tgt_cmd *cmd;
 +	unsigned long flags;
 +	uint8_t *s_id = op->atio.u.isp24.fcp_hdr.s_id;
 +
 +	spin_lock_irqsave(&vha->cmd_list_lock, flags);
 +	list_del(&op->cmd_list);
 +	spin_unlock_irqrestore(&vha->cmd_list_lock, flags);
 +
 +	if (op->aborted) {
 +		ql_dbg(ql_dbg_tgt_mgt, vha, 0xf083,
 +		    "sess_op with tag %u is aborted\n",
 +		    op->atio.u.isp24.exchange_addr);
 +		goto out_term;
 +	}
 +
 +	ql_dbg(ql_dbg_tgt_mgt, vha, 0xf022,
 +	    "qla_target(%d): Unable to find wwn login"
 +	    " (s_id %x:%x:%x), trying to create it manually\n",
 +	    vha->vp_idx, s_id[0], s_id[1], s_id[2]);
 +
 +	if (op->atio.u.raw.entry_count > 1) {
 +		ql_dbg(ql_dbg_tgt_mgt, vha, 0xf023,
 +		    "Dropping multy entry atio %p\n", &op->atio);
 +		goto out_busy;
 +	}
 +
 +	sess = qlt_make_local_sess(vha, s_id);
 +	/* sess has an extra creation ref. */
 +
 +	if (!sess)
 +		goto out_busy;
 +	/*
 +	 * Now obtain a pre-allocated session tag using the original op->atio
 +	 * packet header, and dispatch into __qlt_do_work() using the existing
 +	 * process context.
 +	 */
 +	cmd = qlt_get_tag(vha, sess, &op->atio);
 +	if (!cmd) {
 +		struct qla_qpair *qpair = ha->base_qpair;
 +
 +		spin_lock_irqsave(qpair->qp_lock_ptr, flags);
 +		qlt_send_busy(qpair, &op->atio, tc_sam_status);
 +		spin_unlock_irqrestore(qpair->qp_lock_ptr, flags);
 +
 +		spin_lock_irqsave(&ha->tgt.sess_lock, flags);
 +		ha->tgt.tgt_ops->put_sess(sess);
 +		spin_unlock_irqrestore(&ha->tgt.sess_lock, flags);
 +		kfree(op);
 +		return;
 +	}
 +
 +	/*
 +	 * __qlt_do_work() will call ha->tgt.tgt_ops->put_sess() to release
 +	 * the extra reference taken above by qlt_make_local_sess()
 +	 */
 +	__qlt_do_work(cmd);
 +	kfree(op);
 +	return;
 +out_term:
 +	qlt_send_term_exchange(vha->hw->base_qpair, NULL, &op->atio, 0, 0);
 +	kfree(op);
 +	return;
 +out_busy:
 +	{
 +		struct qla_qpair *qpair = ha->base_qpair;
 +
 +		spin_lock_irqsave(qpair->qp_lock_ptr, flags);
 +		qlt_send_busy(qpair, &op->atio, qla_sam_status);
 +		spin_unlock_irqrestore(qpair->qp_lock_ptr, flags);
 +		kfree(op);
 +	}
 +	return;
 +}
 +
++=======
++>>>>>>> fb35265b12bb (scsi: qla2xxx: Remove session creation redundant code)
  /* ha->hardware_lock supposed to be held on entry */
  static int qlt_handle_cmd_for_atio(struct scsi_qla_host *vha,
  	struct atio_from_isp *atio)
@@@ -4298,25 -4258,15 +4296,37 @@@
  		return -ENODEV;
  	}
  
++<<<<<<< HEAD
 +	sess = ha->tgt.tgt_ops->find_sess_by_s_id(vha,
 +	    atio->u.isp24.fcp_hdr.s_id);
 +	if (unlikely(!sess)) {
 +		struct qla_tgt_sess_op *op =
 +		    kzalloc(sizeof(struct qla_tgt_sess_op), GFP_ATOMIC);
 +		if (!op)
 +			return -ENOMEM;
 +
 +		memcpy(&op->atio, atio, sizeof(*atio));
 +		op->vha = vha;
 +
 +		spin_lock_irqsave(&vha->cmd_list_lock, flags);
 +		list_add_tail(&op->cmd_list, &vha->qla_sess_op_cmd_list);
 +		spin_unlock_irqrestore(&vha->cmd_list_lock, flags);
 +
 +		INIT_WORK(&op->work, qlt_create_sess_from_atio);
 +		queue_work(qla_tgt_wq, &op->work);
 +		return 0;
 +	}
++=======
+ 	id.b.al_pa = atio->u.isp24.fcp_hdr.s_id[2];
+ 	id.b.area = atio->u.isp24.fcp_hdr.s_id[1];
+ 	id.b.domain = atio->u.isp24.fcp_hdr.s_id[0];
+ 	if (IS_SW_RESV_ADDR(id))
+ 		return -EBUSY;
+ 
+ 	sess = ha->tgt.tgt_ops->find_sess_by_s_id(vha, atio->u.isp24.fcp_hdr.s_id);
+ 	if (unlikely(!sess))
+ 		return -EFAULT;
++>>>>>>> fb35265b12bb (scsi: qla2xxx: Remove session creation redundant code)
  
  	/* Another WWN used to have our s_id. Our PLOGI scheduled its
  	 * session deletion, but it's still in sess_del_work wq */
* Unmerged path drivers/scsi/qla2xxx/qla_target.c
