tools/wmi: add a sample for dell smbios communication over WMI

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [tools] wmi: add a sample for dell smbios communication over WMI (Jarod Wilson) [1517197]
Rebuild_FUZZ: 94.92%
commit-author Mario Limonciello <mario.limonciello@dell.com>
commit 9d64fc08f6fe59a7d71e84f650dd2c0f080254dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9d64fc08.failed

This application uses the character device /dev/wmi/dell-smbios
to perform SMBIOS communications from userspace.

It offers demonstrations of a few simple tasks:
 - Running a class/select command
 - Querying a token value
 - Activating a token

	Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
	Reviewed-by: Edward O'Callaghan <quasisec@google.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
(cherry picked from commit 9d64fc08f6fe59a7d71e84f650dd2c0f080254dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	MAINTAINERS
#	tools/Makefile
diff --cc MAINTAINERS
index 20d5d87b6e53,da1851fc88a5..000000000000
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@@ -2576,6 -3986,19 +2576,22 @@@ L:	platform-driver-x86@vger.kernel.or
  S:	Maintained
  F:	drivers/platform/x86/dell-smbios.*
  
++<<<<<<< HEAD
++=======
+ DELL SMBIOS SMM DRIVER
+ M:	Mario Limonciello <mario.limonciello@dell.com>
+ L:	platform-driver-x86@vger.kernel.org
+ S:	Maintained
+ F:	drivers/platform/x86/dell-smbios-smm.c
+ 
+ DELL SMBIOS WMI DRIVER
+ M:	Mario Limonciello <mario.limonciello@dell.com>
+ L:	platform-driver-x86@vger.kernel.org
+ S:	Maintained
+ F:	drivers/platform/x86/dell-smbios-wmi.c
+ F:	tools/wmi/dell-smbios-example.c
+ 
++>>>>>>> 9d64fc08f6fe (tools/wmi: add a sample for dell smbios communication over WMI)
  DELL LAPTOP DRIVER
  M:	Matthew Garrett <mjg59@srcf.ucam.org>
  M:	Pali Roh√°r <pali.rohar@gmail.com>
diff --cc tools/Makefile
index 0dfa76f0fb1b,9d2fd2606810..000000000000
--- a/tools/Makefile
+++ b/tools/Makefile
@@@ -8,20 -8,29 +8,45 @@@ include scripts/Makefile.includ
  help:
  	@echo 'Possible targets:'
  	@echo ''
++<<<<<<< HEAD
 +	@echo '  cgroup     - cgroup tools'
 +	@echo '  cpupower   - a tool for all things x86 CPU power'
 +	@echo '  firewire   - the userspace part of nosy, an IEEE-1394 traffic sniffer'
 +	@echo '  lguest     - a minimal 32-bit x86 hypervisor'
 +	@echo '  objtool    - an ELF object analysis tool'
 +	@echo '  perf       - Linux performance measurement and analysis tool'
 +	@echo '  selftests  - various kernel selftests'
 +	@echo '  turbostat  - Intel CPU idle stats and freq reporting tool'
 +	@echo '  usb        - USB testing tools'
 +	@echo '  virtio     - vhost test module'
 +	@echo '  net        - misc networking tools'
 +	@echo '  vm         - misc vm tools'
++=======
+ 	@echo '  acpi                   - ACPI tools'
+ 	@echo '  cgroup                 - cgroup tools'
+ 	@echo '  cpupower               - a tool for all things x86 CPU power'
+ 	@echo '  firewire               - the userspace part of nosy, an IEEE-1394 traffic sniffer'
+ 	@echo '  freefall               - laptop accelerometer program for disk protection'
+ 	@echo '  gpio                   - GPIO tools'
+ 	@echo '  hv                     - tools used when in Hyper-V clients'
+ 	@echo '  iio                    - IIO tools'
+ 	@echo '  kvm_stat               - top-like utility for displaying kvm statistics'
+ 	@echo '  leds                   - LEDs  tools'
+ 	@echo '  liblockdep             - user-space wrapper for kernel locking-validator'
+ 	@echo '  net                    - misc networking tools'
+ 	@echo '  perf                   - Linux performance measurement and analysis tool'
+ 	@echo '  selftests              - various kernel selftests'
+ 	@echo '  spi                    - spi tools'
+ 	@echo '  objtool                - an ELF object analysis tool'
+ 	@echo '  tmon                   - thermal monitoring and tuning tool'
+ 	@echo '  turbostat              - Intel CPU idle stats and freq reporting tool'
+ 	@echo '  usb                    - USB testing tools'
+ 	@echo '  virtio                 - vhost test module'
+ 	@echo '  vm                     - misc vm tools'
+ 	@echo '  wmi			- WMI interface examples'
++>>>>>>> 9d64fc08f6fe (tools/wmi: add a sample for dell smbios communication over WMI)
  	@echo '  x86_energy_perf_policy - Intel energy policy tool'
 +	@echo '  tmon       - thermal monitoring and tuning tool'
  	@echo ''
  	@echo 'You can do:'
  	@echo ' $$ make -C tools/ <tool>_install'
@@@ -42,10 -55,16 +67,14 @@@
  cpupower: FORCE
  	$(call descend,power/$@)
  
++<<<<<<< HEAD
 +cgroup firewire guest usb virtio vm net objtool: FORCE
++=======
+ cgroup firewire hv guest spi usb virtio vm net iio gpio objtool leds wmi: FORCE
++>>>>>>> 9d64fc08f6fe (tools/wmi: add a sample for dell smbios communication over WMI)
  	$(call descend,$@)
  
 -liblockdep: FORCE
 -	$(call descend,lib/lockdep)
 -
 -libapi: FORCE
 +libapikfs: FORCE
  	$(call descend,lib/api)
  
  # The perf build does not follow the descend function setup,
@@@ -65,14 -84,31 +94,35 @@@ turbostat x86_energy_perf_policy: FORC
  tmon: FORCE
  	$(call descend,thermal/$@)
  
++<<<<<<< HEAD
 +cpupower_install:
 +	$(call descend,power/$(@:_install=),install)
 +
 +cgroup_install firewire_install lguest_install perf_install usb_install virtio_install vm_install net_install objtool_install:
++=======
+ freefall: FORCE
+ 	$(call descend,laptop/$@)
+ 
+ kvm_stat: FORCE
+ 	$(call descend,kvm/$@)
+ 
+ all: acpi cgroup cpupower gpio hv firewire liblockdep \
+ 		perf selftests spi turbostat usb \
+ 		virtio vm net x86_energy_perf_policy \
+ 		tmon freefall iio objtool kvm_stat wmi
+ 
+ acpi_install:
+ 	$(call descend,power/$(@:_install=),install)
+ 
+ cpupower_install:
+ 	$(call descend,power/$(@:_install=),install)
+ 
+ cgroup_install firewire_install gpio_install hv_install iio_install perf_install spi_install usb_install virtio_install vm_install net_install objtool_install wmi_install:
++>>>>>>> 9d64fc08f6fe (tools/wmi: add a sample for dell smbios communication over WMI)
  	$(call descend,$(@:_install=),install)
  
 -liblockdep_install:
 -	$(call descend,lib/lockdep,install)
 -
  selftests_install:
 -	$(call descend,testing/$(@:_install=),install)
 +	$(call descend,testing/$(@:_clean=),install)
  
  turbostat_install x86_energy_perf_policy_install:
  	$(call descend,power/x86/$(@:_install=),install)
@@@ -80,22 -116,43 +130,34 @@@
  tmon_install:
  	$(call descend,thermal/$(@:_install=),install)
  
 -freefall_install:
 -	$(call descend,laptop/$(@:_install=),install)
 -
 -kvm_stat_install:
 -	$(call descend,kvm/$(@:_install=),install)
 -
 -install: acpi_install cgroup_install cpupower_install gpio_install \
 -		hv_install firewire_install iio_install liblockdep_install \
 +install: cgroup_install cpupower_install firewire_install lguest_install \
  		perf_install selftests_install turbostat_install usb_install \
  		virtio_install vm_install net_install x86_energy_perf_policy_install \
++<<<<<<< HEAD
 +		tmon_install objtool_install
++=======
+ 		tmon_install freefall_install objtool_install kvm_stat_install \
+ 		wmi_install
+ 
+ acpi_clean:
+ 	$(call descend,power/acpi,clean)
++>>>>>>> 9d64fc08f6fe (tools/wmi: add a sample for dell smbios communication over WMI)
  
  cpupower_clean:
  	$(call descend,power/cpupower,clean)
  
++<<<<<<< HEAD
 +cgroup_clean firewire_clean lguest_clean usb_clean virtio_clean vm_clean net_clean objtool_clean:
++=======
+ cgroup_clean hv_clean firewire_clean spi_clean usb_clean virtio_clean vm_clean wmi_clean net_clean iio_clean gpio_clean objtool_clean leds_clean:
++>>>>>>> 9d64fc08f6fe (tools/wmi: add a sample for dell smbios communication over WMI)
  	$(call descend,$(@:_clean=),clean)
  
 -liblockdep_clean:
 -	$(call descend,lib/lockdep,clean)
 -
 -libapi_clean:
 +libapikfs_clean:
  	$(call descend,lib/api,clean)
  
 -libbpf_clean:
 -	$(call descend,lib/bpf,clean)
 -
 -libsubcmd_clean:
 -	$(call descend,lib/subcmd,clean)
 -
 -perf_clean:
 -	$(Q)mkdir -p $(PERF_O) .
 -	$(Q)$(MAKE) --no-print-directory -C perf O=$(PERF_O) subdir= clean
 +perf_clean: libapikfs_clean
 +	$(call descend,$(@:_clean=),clean)
  
  selftests_clean:
  	$(call descend,testing/$(@:_clean=),clean)
@@@ -106,9 -163,16 +168,23 @@@ turbostat_clean x86_energy_perf_policy_
  tmon_clean:
  	$(call descend,thermal/tmon,clean)
  
++<<<<<<< HEAD
 +clean: cgroup_clean cpupower_clean firewire_clean lguest_clean perf_clean \
 +		selftests_clean turbostat_clean usb_clean virtio_clean \
 +		vm_clean net_clean x86_energy_perf_policy_clean tmon_clean \
 +		objtool_clean
++=======
+ freefall_clean:
+ 	$(call descend,laptop/freefall,clean)
+ 
+ build_clean:
+ 	$(call descend,build,clean)
+ 
+ clean: acpi_clean cgroup_clean cpupower_clean hv_clean firewire_clean \
+ 		perf_clean selftests_clean turbostat_clean spi_clean usb_clean virtio_clean \
+ 		vm_clean net_clean iio_clean x86_energy_perf_policy_clean tmon_clean \
+ 		freefall_clean build_clean libbpf_clean libsubcmd_clean liblockdep_clean \
+ 		gpio_clean objtool_clean leds_clean wmi_clean
++>>>>>>> 9d64fc08f6fe (tools/wmi: add a sample for dell smbios communication over WMI)
  
  .PHONY: FORCE
* Unmerged path MAINTAINERS
* Unmerged path tools/Makefile
diff --git a/tools/wmi/Makefile b/tools/wmi/Makefile
new file mode 100644
index 000000000000..e664f1167388
--- /dev/null
+++ b/tools/wmi/Makefile
@@ -0,0 +1,18 @@
+PREFIX ?= /usr
+SBINDIR ?= sbin
+INSTALL ?= install
+CFLAGS += -D__EXPORTED_HEADERS__ -I../../include/uapi -I../../include
+CC = $(CROSS_COMPILE)gcc
+
+TARGET = dell-smbios-example
+
+all: $(TARGET)
+
+%: %.c
+	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $<
+
+clean:
+	$(RM) $(TARGET)
+
+install: dell-smbios-example
+	$(INSTALL) -D -m 755 $(TARGET) $(DESTDIR)$(PREFIX)/$(SBINDIR)/$(TARGET)
diff --git a/tools/wmi/dell-smbios-example.c b/tools/wmi/dell-smbios-example.c
new file mode 100644
index 000000000000..9d3bde081249
--- /dev/null
+++ b/tools/wmi/dell-smbios-example.c
@@ -0,0 +1,210 @@
+/*
+ *  Sample application for SMBIOS communication over WMI interface
+ *  Performs the following:
+ *  - Simple cmd_class/cmd_select lookup for TPM information
+ *  - Simple query of known tokens and their values
+ *  - Simple activation of a token
+ *
+ *  Copyright (C) 2017 Dell, Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+#include <unistd.h>
+
+/* if uapi header isn't installed, this might not yet exist */
+#ifndef __packed
+#define __packed __attribute__((packed))
+#endif
+#include <linux/wmi.h>
+
+/* It would be better to discover these using udev, but for a simple
+ * application they're hardcoded
+ */
+static const char *ioctl_devfs = "/dev/wmi/dell-smbios";
+static const char *token_sysfs =
+			"/sys/bus/platform/devices/dell-smbios.0/tokens";
+
+static void show_buffer(struct dell_wmi_smbios_buffer *buffer)
+{
+	printf("Call: %x/%x [%x,%x,%x,%x]\nResults: [%8x,%8x,%8x,%8x]\n",
+	buffer->std.cmd_class, buffer->std.cmd_select,
+	buffer->std.input[0], buffer->std.input[1],
+	buffer->std.input[2], buffer->std.input[3],
+	buffer->std.output[0], buffer->std.output[1],
+	buffer->std.output[2], buffer->std.output[3]);
+}
+
+static int run_wmi_smbios_cmd(struct dell_wmi_smbios_buffer *buffer)
+{
+	int fd;
+	int ret;
+
+	fd = open(ioctl_devfs, O_NONBLOCK);
+	ret = ioctl(fd, DELL_WMI_SMBIOS_CMD, buffer);
+	close(fd);
+	return ret;
+}
+
+static int find_token(__u16 token, __u16 *location, __u16 *value)
+{
+	char location_sysfs[60];
+	char value_sysfs[57];
+	char buf[4096];
+	FILE *f;
+	int ret;
+
+	ret = sprintf(value_sysfs, "%s/%04x_value", token_sysfs, token);
+	if (ret < 0) {
+		printf("sprintf value failed\n");
+		return 2;
+	}
+	f = fopen(value_sysfs, "rb");
+	if (!f) {
+		printf("failed to open %s\n", value_sysfs);
+		return 2;
+	}
+	fread(buf, 1, 4096, f);
+	fclose(f);
+	*value = (__u16) strtol(buf, NULL, 16);
+
+	ret = sprintf(location_sysfs, "%s/%04x_location", token_sysfs, token);
+	if (ret < 0) {
+		printf("sprintf location failed\n");
+		return 1;
+	}
+	f = fopen(location_sysfs, "rb");
+	if (!f) {
+		printf("failed to open %s\n", location_sysfs);
+		return 2;
+	}
+	fread(buf, 1, 4096, f);
+	fclose(f);
+	*location = (__u16) strtol(buf, NULL, 16);
+
+	if (*location)
+		return 0;
+	return 2;
+}
+
+static int token_is_active(__u16 *location, __u16 *cmpvalue,
+			   struct dell_wmi_smbios_buffer *buffer)
+{
+	int ret;
+
+	buffer->std.cmd_class = CLASS_TOKEN_READ;
+	buffer->std.cmd_select = SELECT_TOKEN_STD;
+	buffer->std.input[0] = *location;
+	ret = run_wmi_smbios_cmd(buffer);
+	if (ret != 0 || buffer->std.output[0] != 0)
+		return ret;
+	ret = (buffer->std.output[1] == *cmpvalue);
+	return ret;
+}
+
+static int query_token(__u16 token, struct dell_wmi_smbios_buffer *buffer)
+{
+	__u16 location;
+	__u16 value;
+	int ret;
+
+	ret = find_token(token, &location, &value);
+	if (ret != 0) {
+		printf("unable to find token %04x\n", token);
+		return 1;
+	}
+	return token_is_active(&location, &value, buffer);
+}
+
+static int activate_token(struct dell_wmi_smbios_buffer *buffer,
+		   __u16 token)
+{
+	__u16 location;
+	__u16 value;
+	int ret;
+
+	ret = find_token(token, &location, &value);
+	if (ret != 0) {
+		printf("unable to find token %04x\n", token);
+		return 1;
+	}
+	buffer->std.cmd_class = CLASS_TOKEN_WRITE;
+	buffer->std.cmd_select = SELECT_TOKEN_STD;
+	buffer->std.input[0] = location;
+	buffer->std.input[1] = 1;
+	ret = run_wmi_smbios_cmd(buffer);
+	return ret;
+}
+
+static int query_buffer_size(__u64 *buffer_size)
+{
+	FILE *f;
+
+	f = fopen(ioctl_devfs, "rb");
+	if (!f)
+		return -EINVAL;
+	fread(buffer_size, sizeof(__u64), 1, f);
+	fclose(f);
+	return EXIT_SUCCESS;
+}
+
+int main(void)
+{
+	struct dell_wmi_smbios_buffer *buffer;
+	int ret;
+	__u64 value = 0;
+
+	ret = query_buffer_size(&value);
+	if (ret == EXIT_FAILURE || !value) {
+		printf("Unable to read buffer size\n");
+		goto out;
+	}
+	printf("Detected required buffer size %lld\n", value);
+
+	buffer = malloc(value);
+	if (buffer == NULL) {
+		printf("failed to alloc memory for ioctl\n");
+		ret = -ENOMEM;
+		goto out;
+	}
+	buffer->length = value;
+
+	/* simple SMBIOS call for looking up TPM info */
+	buffer->std.cmd_class = CLASS_FLASH_INTERFACE;
+	buffer->std.cmd_select = SELECT_FLASH_INTERFACE;
+	buffer->std.input[0] = 2;
+	ret = run_wmi_smbios_cmd(buffer);
+	if (ret) {
+		printf("smbios ioctl failed: %d\n", ret);
+		ret = EXIT_FAILURE;
+		goto out;
+	}
+	show_buffer(buffer);
+
+	/* query some tokens */
+	ret = query_token(CAPSULE_EN_TOKEN, buffer);
+	printf("UEFI Capsule enabled token is: %d\n", ret);
+	ret = query_token(CAPSULE_DIS_TOKEN, buffer);
+	printf("UEFI Capsule disabled token is: %d\n", ret);
+
+	/* activate UEFI capsule token if disabled */
+	if (ret) {
+		printf("Enabling UEFI capsule token");
+		if (activate_token(buffer, CAPSULE_EN_TOKEN)) {
+			printf("activate failed\n");
+			ret = -1;
+			goto out;
+		}
+	}
+	ret = EXIT_SUCCESS;
+out:
+	free(buffer);
+	return ret;
+}
