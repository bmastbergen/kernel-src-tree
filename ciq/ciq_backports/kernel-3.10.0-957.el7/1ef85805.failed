Input: psmouse - create helper for reporting standard buttons/motion

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [input] psmouse - create helper for reporting standard buttons/motion (Benjamin Tissoires) [1554926]
Rebuild_FUZZ: 94.57%
commit-author Dmitry Torokhov <dmitry.torokhov@gmail.com>
commit 1ef8580539d0b9282b726a2c9b7aa25057040cfe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1ef85805.failed

Many protocol driver re-implement code to parse buttons or motion data from
the standard PS/2 protocol. Let's split the parsing into separate
functions and reuse them in protocol drivers.

	Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
(cherry picked from commit 1ef8580539d0b9282b726a2c9b7aa25057040cfe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/input/mouse/alps.c
#	drivers/input/mouse/psmouse-base.c
diff --cc drivers/input/mouse/alps.c
index b6a7a123c52d,f9c7f2452264..000000000000
--- a/drivers/input/mouse/alps.c
+++ b/drivers/input/mouse/alps.c
@@@ -1024,35 -1091,24 +1017,38 @@@ static void alps_process_trackstick_pac
  	struct alps_data *priv = psmouse->private;
  	unsigned char *packet = psmouse->packet;
  	struct input_dev *dev2 = priv->dev2;
- 	int x, y, z, left, right, middle;
+ 	int x, y, z;
  
 -	/* It should be a DualPoint when received trackstick packet */
 -	if (!(priv->flags & ALPS_DUALPOINT)) {
 -		psmouse_warn(psmouse,
 -			     "Rejected trackstick packet from non DualPoint device");
 -		return;
 -	}
 +	/*
 +	 *        b7 b6 b5 b4 b3 b2 b1 b0
 +	 * Byte0   0  1  0  0  1  0  0  0
 +	 * Byte1   1  1  *  *  1  M  R  L
 +	 * Byte2  X7  1 X5 X4 X3 X2 X1 X0
 +	 * Byte3  Z6  1 Y6 X6  1 Y2 Y1 Y0
 +	 * Byte4  Y7  0 Y5 Y4 Y3  1  1  0
 +	 * Byte5 T&P  0 Z5 Z4 Z3 Z2 Z1 Z0
 +	 * M / R / L: Middle / Right / Left button
 +	 */
  
  	x = ((packet[2] & 0xbf)) | ((packet[3] & 0x10) << 2);
  	y = (packet[3] & 0x07) | (packet[4] & 0xb8) |
  	    ((packet[3] & 0x20) << 1);
  	z = (packet[5] & 0x3f) | ((packet[3] & 0x80) >> 1);
  
++<<<<<<< HEAD
 +	left = (packet[1] & 0x01);
 +	right = (packet[1] & 0x02) >> 1;
 +	middle = (packet[1] & 0x04) >> 2;
 +
 +	/* Divide 2 since trackpoint's speed is too fast */
 +	input_report_rel(dev2, REL_X, (char)x / 2);
 +	input_report_rel(dev2, REL_Y, -((char)y / 2));
++=======
+ 	input_report_rel(dev2, REL_X, (char)x);
+ 	input_report_rel(dev2, REL_Y, -((char)y));
++>>>>>>> 1ef8580539d0 (Input: psmouse - create helper for reporting standard buttons/motion)
  
- 	input_report_key(dev2, BTN_LEFT, left);
- 	input_report_key(dev2, BTN_RIGHT, right);
- 	input_report_key(dev2, BTN_MIDDLE, middle);
+ 	psmouse_report_standard_buttons(dev2, packet[1]);
  
  	input_sync(dev2);
  }
@@@ -1094,18 -1468,31 +1090,22 @@@ static void alps_report_bare_ps2_packet
  					bool report_buttons)
  {
  	struct alps_data *priv = psmouse->private;
 -	struct input_dev *dev, *dev2 = NULL;
 -
 -	/* Figure out which device to use to report the bare packet */
 -	if (priv->proto_version == ALPS_PROTO_V2 &&
 -	    (priv->flags & ALPS_DUALPOINT)) {
 -		/* On V2 devices the DualPoint Stick reports bare packets */
 -		dev = priv->dev2;
 -		dev2 = psmouse->dev;
 -	} else if (unlikely(IS_ERR_OR_NULL(priv->dev3))) {
 -		/* Register dev3 mouse if we received PS/2 packet first time */
 -		if (!IS_ERR(priv->dev3))
 -			psmouse_queue_work(psmouse, &priv->dev3_register_work,
 -					   0);
 -		return;
 -	} else {
 -		dev = priv->dev3;
 -	}
 +	struct input_dev *dev2 = priv->dev2;
  
  	if (report_buttons)
 -		alps_report_buttons(dev, dev2,
 +		alps_report_buttons(psmouse, dev2, psmouse->dev,
  				packet[0] & 1, packet[0] & 2, packet[0] & 4);
  
++<<<<<<< HEAD
 +	input_report_rel(dev2, REL_X,
 +		packet[1] ? packet[1] - ((packet[0] << 4) & 0x100) : 0);
 +	input_report_rel(dev2, REL_Y,
 +		packet[2] ? ((packet[0] << 3) & 0x100) - packet[2] : 0);
++=======
+ 	psmouse_report_standard_motion(dev, packet);
++>>>>>>> 1ef8580539d0 (Input: psmouse - create helper for reporting standard buttons/motion)
  
 -	input_sync(dev);
 +	input_sync(dev2);
  }
  
  static psmouse_ret_t alps_handle_interleaved_ps2(struct psmouse *psmouse)
diff --cc drivers/input/mouse/psmouse-base.c
index 11fb31ba0991,58a2cc7d592c..000000000000
--- a/drivers/input/mouse/psmouse-base.c
+++ b/drivers/input/mouse/psmouse-base.c
@@@ -114,17 -116,7 +114,21 @@@ static DEFINE_MUTEX(psmouse_mutex)
  
  static struct workqueue_struct *kpsmoused_wq;
  
++<<<<<<< HEAD
 +struct psmouse_protocol {
 +	enum psmouse_type type;
 +	bool maxproto;
 +	bool ignore_parity; /* Protocol should ignore parity errors from KBC */
 +	const char *name;
 +	const char *alias;
 +	int (*detect)(struct psmouse *, bool);
 +	int (*init)(struct psmouse *);
 +};
 +
 +static void psmouse_report_standard_buttons(struct input_dev *dev, u8 buttons)
++=======
+ void psmouse_report_standard_buttons(struct input_dev *dev, u8 buttons)
++>>>>>>> 1ef8580539d0 (Input: psmouse - create helper for reporting standard buttons/motion)
  {
  	input_report_key(dev, BTN_LEFT,   buttons & BIT(0));
  	input_report_key(dev, BTN_MIDDLE, buttons & BIT(2));
* Unmerged path drivers/input/mouse/alps.c
diff --git a/drivers/input/mouse/elantech.c b/drivers/input/mouse/elantech.c
index 79363b687195..78046dddab4e 100644
--- a/drivers/input/mouse/elantech.c
+++ b/drivers/input/mouse/elantech.c
@@ -283,8 +283,8 @@ static void elantech_report_absolute_v1(struct psmouse *psmouse)
 	input_report_key(dev, BTN_TOOL_FINGER, fingers == 1);
 	input_report_key(dev, BTN_TOOL_DOUBLETAP, fingers == 2);
 	input_report_key(dev, BTN_TOOL_TRIPLETAP, fingers == 3);
-	input_report_key(dev, BTN_LEFT, packet[0] & 0x01);
-	input_report_key(dev, BTN_RIGHT, packet[0] & 0x02);
+
+	psmouse_report_standard_buttons(dev, packet[0]);
 
 	if (etd->fw_version < 0x020000 &&
 	    (etd->capabilities[0] & ETP_CAP_HAS_ROCKER)) {
@@ -394,8 +394,7 @@ static void elantech_report_absolute_v2(struct psmouse *psmouse)
 	input_report_key(dev, BTN_TOOL_DOUBLETAP, fingers == 2);
 	input_report_key(dev, BTN_TOOL_TRIPLETAP, fingers == 3);
 	input_report_key(dev, BTN_TOOL_QUADTAP, fingers == 4);
-	input_report_key(dev, BTN_LEFT, packet[0] & 0x01);
-	input_report_key(dev, BTN_RIGHT, packet[0] & 0x02);
+	psmouse_report_standard_buttons(dev, packet[0]);
 	if (etd->reports_pressure) {
 		input_report_abs(dev, ABS_PRESSURE, pres);
 		input_report_abs(dev, ABS_TOOL_WIDTH, width);
@@ -438,9 +437,7 @@ static void elantech_report_trackpoint(struct psmouse *psmouse,
 		x = packet[4] - (int)((packet[1]^0x80) << 1);
 		y = (int)((packet[2]^0x80) << 1) - packet[5];
 
-		input_report_key(tp_dev, BTN_LEFT, packet[0] & 0x01);
-		input_report_key(tp_dev, BTN_RIGHT, packet[0] & 0x02);
-		input_report_key(tp_dev, BTN_MIDDLE, packet[0] & 0x04);
+		psmouse_report_standard_buttons(tp_dev, packet[0]);
 
 		input_report_rel(tp_dev, REL_X, x);
 		input_report_rel(tp_dev, REL_Y, y);
@@ -530,12 +527,10 @@ static void elantech_report_absolute_v3(struct psmouse *psmouse,
 	input_report_key(dev, BTN_TOOL_TRIPLETAP, fingers == 3);
 
 	/* For clickpads map both buttons to BTN_LEFT */
-	if (etd->fw_version & 0x001000) {
+	if (etd->fw_version & 0x001000)
 		input_report_key(dev, BTN_LEFT, packet[0] & 0x03);
-	} else {
-		input_report_key(dev, BTN_LEFT, packet[0] & 0x01);
-		input_report_key(dev, BTN_RIGHT, packet[0] & 0x02);
-	}
+	else
+		psmouse_report_standard_buttons(dev, packet[0]);
 
 	input_report_abs(dev, ABS_PRESSURE, pres);
 	input_report_abs(dev, ABS_TOOL_WIDTH, width);
@@ -550,13 +545,10 @@ static void elantech_input_sync_v4(struct psmouse *psmouse)
 	unsigned char *packet = psmouse->packet;
 
 	/* For clickpads map both buttons to BTN_LEFT */
-	if (etd->fw_version & 0x001000) {
+	if (etd->fw_version & 0x001000)
 		input_report_key(dev, BTN_LEFT, packet[0] & 0x03);
-	} else {
-		input_report_key(dev, BTN_LEFT, packet[0] & 0x01);
-		input_report_key(dev, BTN_RIGHT, packet[0] & 0x02);
-		input_report_key(dev, BTN_MIDDLE, packet[0] & 0x04);
-	}
+	else
+		psmouse_report_standard_buttons(dev, packet[0]);
 
 	input_mt_report_pointer_emulation(dev, true);
 	input_sync(dev);
diff --git a/drivers/input/mouse/lifebook.c b/drivers/input/mouse/lifebook.c
index 2c4db636de6c..5d83aa1899d0 100644
--- a/drivers/input/mouse/lifebook.c
+++ b/drivers/input/mouse/lifebook.c
@@ -188,14 +188,10 @@ static psmouse_ret_t lifebook_process_byte(struct psmouse *psmouse)
 	}
 
 	if (dev2) {
-		if (relative_packet) {
-			input_report_rel(dev2, REL_X,
-				((packet[0] & 0x10) ? packet[1] - 256 : packet[1]));
-			input_report_rel(dev2, REL_Y,
-				 -(int)((packet[0] & 0x20) ? packet[2] - 256 : packet[2]));
-		}
-		input_report_key(dev2, BTN_LEFT, packet[0] & 0x01);
-		input_report_key(dev2, BTN_RIGHT, packet[0] & 0x02);
+		if (relative_packet)
+			psmouse_report_standard_motion(dev2, packet);
+
+		psmouse_report_standard_buttons(dev2, packet[0]);
 		input_sync(dev2);
 	}
 
diff --git a/drivers/input/mouse/logips2pp.c b/drivers/input/mouse/logips2pp.c
index 84de2fc6acc1..7aa01029cab9 100644
--- a/drivers/input/mouse/logips2pp.c
+++ b/drivers/input/mouse/logips2pp.c
@@ -88,16 +88,14 @@ static psmouse_ret_t ps2pp_process_byte(struct psmouse *psmouse)
 				    (packet[1] >> 4) | (packet[0] & 0x30));
 			break;
 		}
+
+		psmouse_report_standard_buttons(dev, packet[0]);
+
 	} else {
 		/* Standard PS/2 motion data */
-		input_report_rel(dev, REL_X, packet[1] ? (int) packet[1] - (int) ((packet[0] << 4) & 0x100) : 0);
-		input_report_rel(dev, REL_Y, packet[2] ? (int) ((packet[0] << 3) & 0x100) - (int) packet[2] : 0);
+		psmouse_report_standard_packet(dev, packet);
 	}
 
-	input_report_key(dev, BTN_LEFT,    packet[0]       & 1);
-	input_report_key(dev, BTN_MIDDLE, (packet[0] >> 2) & 1);
-	input_report_key(dev, BTN_RIGHT,  (packet[0] >> 1) & 1);
-
 	input_sync(dev);
 
 	return PSMOUSE_FULL_PACKET;
* Unmerged path drivers/input/mouse/psmouse-base.c
diff --git a/drivers/input/mouse/psmouse.h b/drivers/input/mouse/psmouse.h
index c01433fafba8..91c4e0147181 100644
--- a/drivers/input/mouse/psmouse.h
+++ b/drivers/input/mouse/psmouse.h
@@ -116,6 +116,10 @@ int psmouse_activate(struct psmouse *psmouse);
 int psmouse_deactivate(struct psmouse *psmouse);
 bool psmouse_matches_pnp_id(struct psmouse *psmouse, const char * const ids[]);
 
+void psmouse_report_standard_buttons(struct input_dev *, u8 buttons);
+void psmouse_report_standard_motion(struct input_dev *, u8 *packet);
+void psmouse_report_standard_packet(struct input_dev *, u8 *packet);
+
 struct psmouse_attribute {
 	struct device_attribute dattr;
 	void *data;
diff --git a/drivers/input/mouse/sentelic.c b/drivers/input/mouse/sentelic.c
index cc7e0d4a8f93..7aaf913d8e91 100644
--- a/drivers/input/mouse/sentelic.c
+++ b/drivers/input/mouse/sentelic.c
@@ -708,7 +708,6 @@ static psmouse_ret_t fsp_process_byte(struct psmouse *psmouse)
 	unsigned char *packet = psmouse->packet;
 	unsigned char button_status = 0, lscroll = 0, rscroll = 0;
 	unsigned short abs_x, abs_y, fgrs = 0;
-	int rel_x, rel_y;
 
 	if (psmouse->pktcnt < 4)
 		return PSMOUSE_GOOD_DATA;
@@ -838,15 +837,7 @@ static psmouse_ret_t fsp_process_byte(struct psmouse *psmouse)
 		/*
 		 * Standard PS/2 Mouse
 		 */
-		input_report_key(dev, BTN_LEFT, packet[0] & 1);
-		input_report_key(dev, BTN_MIDDLE, (packet[0] >> 2) & 1);
-		input_report_key(dev, BTN_RIGHT, (packet[0] >> 1) & 1);
-
-		rel_x = packet[1] ? (int)packet[1] - (int)((packet[0] << 4) & 0x100) : 0;
-		rel_y = packet[2] ? (int)((packet[0] << 3) & 0x100) - (int)packet[2] : 0;
-
-		input_report_rel(dev, REL_X, rel_x);
-		input_report_rel(dev, REL_Y, rel_y);
+		psmouse_report_standard_packet(dev, packet);
 		break;
 	}
 
