proc: Provide details on speculation flaw mitigations

jira LE-1907
cve CVE-2018-3639
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Kees Cook <keescook@chromium.org>
commit fae1fa0fc6cca8beee3ab8ed71d54f9a78fa3f64
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/fae1fa0f.failed

As done with seccomp and no_new_privs, also show speculation flaw
mitigation state in /proc/$pid/status.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit fae1fa0fc6cca8beee3ab8ed71d54f9a78fa3f64)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/proc/array.c
diff --cc fs/proc/array.c
index d7c97e89352e,303c155f9b04..000000000000
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@@ -79,8 -85,10 +79,9 @@@
  #include <linux/delayacct.h>
  #include <linux/seq_file.h>
  #include <linux/pid_namespace.h>
+ #include <linux/prctl.h>
  #include <linux/ptrace.h>
  #include <linux/tracehook.h>
 -#include <linux/string_helpers.h>
  #include <linux/user_namespace.h>
  #include <linux/fs_struct.h>
  
@@@ -362,9 -332,32 +363,34 @@@ static inline void task_cap(struct seq_
  
  static inline void task_seccomp(struct seq_file *m, struct task_struct *p)
  {
 -	seq_put_decimal_ull(m, "NoNewPrivs:\t", task_no_new_privs(p));
  #ifdef CONFIG_SECCOMP
 -	seq_put_decimal_ull(m, "\nSeccomp:\t", p->seccomp.mode);
 +	seq_printf(m, "Seccomp:\t%d\n", p->seccomp.mode);
  #endif
++<<<<<<< HEAD
++=======
+ 	seq_printf(m, "\nSpeculation Store Bypass:\t");
+ 	switch (arch_prctl_spec_ctrl_get(p, PR_SPEC_STORE_BYPASS)) {
+ 	case -EINVAL:
+ 		seq_printf(m, "unknown");
+ 		break;
+ 	case PR_SPEC_NOT_AFFECTED:
+ 		seq_printf(m, "not vulnerable");
+ 		break;
+ 	case PR_SPEC_PRCTL | PR_SPEC_DISABLE:
+ 		seq_printf(m, "thread mitigated");
+ 		break;
+ 	case PR_SPEC_PRCTL | PR_SPEC_ENABLE:
+ 		seq_printf(m, "thread vulnerable");
+ 		break;
+ 	case PR_SPEC_DISABLE:
+ 		seq_printf(m, "globally mitigated");
+ 		break;
+ 	default:
+ 		seq_printf(m, "vulnerable");
+ 		break;
+ 	}
+ 	seq_putc(m, '\n');
++>>>>>>> fae1fa0fc6cc (proc: Provide details on speculation flaw mitigations)
  }
  
  static inline void task_context_switch_counts(struct seq_file *m,
* Unmerged path fs/proc/array.c
