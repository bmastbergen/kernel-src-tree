uio: fix incorrect memory leak cleanup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [uio] fix incorrect memory leak cleanup (Xiubo Li) [1560418]
Rebuild_FUZZ: 92.96%
commit-author Suman Anna <s-anna@ti.com>
commit 0d83539092ddb1ab79b4d65bccb866bf07ea2ccd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0d835390.failed

Commit 75f0aef6220d ("uio: fix memory leak") has fixed up some
memory leaks during the failure paths of the addition of uio
attributes, but still is not correct entirely. A kobject_uevent()
failure still needs a kobject_put() and the kobject container
structure allocation failure before the kobject_init() doesn't
need a kobject_put(). Fix this properly.

Fixes: 75f0aef6220d ("uio: fix memory leak")
	Signed-off-by: Suman Anna <s-anna@ti.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 0d83539092ddb1ab79b4d65bccb866bf07ea2ccd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/uio/uio.c
diff --cc drivers/uio/uio.c
index aa7760da2fe6,ff04b7f8549f..000000000000
--- a/drivers/uio/uio.c
+++ b/drivers/uio/uio.c
@@@ -267,21 -271,25 +267,28 @@@ static int uio_dev_add_attributes(struc
  			map_found = 1;
  			idev->map_dir = kobject_create_and_add("maps",
  							&idev->dev->kobj);
 -			if (!idev->map_dir) {
 -				ret = -ENOMEM;
 +			if (!idev->map_dir)
  				goto err_map;
 -			}
  		}
  		map = kzalloc(sizeof(*map), GFP_KERNEL);
++<<<<<<< HEAD
 +		if (!map)
 +			goto err_map;
++=======
+ 		if (!map) {
+ 			ret = -ENOMEM;
+ 			goto err_map;
+ 		}
++>>>>>>> 0d83539092dd (uio: fix incorrect memory leak cleanup)
  		kobject_init(&map->kobj, &map_attr_type);
  		map->mem = mem;
  		mem->map = map;
  		ret = kobject_add(&map->kobj, idev->map_dir, "map%d", mi);
  		if (ret)
 -			goto err_map_kobj;
 +			goto err_map;
  		ret = kobject_uevent(&map->kobj, KOBJ_ADD);
  		if (ret)
- 			goto err_map;
+ 			goto err_map_kobj;
  	}
  
  	for (pi = 0; pi < MAX_UIO_PORT_REGIONS; pi++) {
@@@ -292,22 -300,26 +299,29 @@@
  			portio_found = 1;
  			idev->portio_dir = kobject_create_and_add("portio",
  							&idev->dev->kobj);
 -			if (!idev->portio_dir) {
 -				ret = -ENOMEM;
 +			if (!idev->portio_dir)
  				goto err_portio;
 -			}
  		}
  		portio = kzalloc(sizeof(*portio), GFP_KERNEL);
++<<<<<<< HEAD
 +		if (!portio)
 +			goto err_portio;
++=======
+ 		if (!portio) {
+ 			ret = -ENOMEM;
+ 			goto err_portio;
+ 		}
++>>>>>>> 0d83539092dd (uio: fix incorrect memory leak cleanup)
  		kobject_init(&portio->kobj, &portio_attr_type);
  		portio->port = port;
  		port->portio = portio;
  		ret = kobject_add(&portio->kobj, idev->portio_dir,
  							"port%d", pi);
  		if (ret)
 -			goto err_portio_kobj;
 +			goto err_portio;
  		ret = kobject_uevent(&portio->kobj, KOBJ_ADD);
  		if (ret)
- 			goto err_portio;
+ 			goto err_portio_kobj;
  	}
  
  	return 0;
* Unmerged path drivers/uio/uio.c
