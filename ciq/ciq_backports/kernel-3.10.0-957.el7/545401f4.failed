x86/cpu/common: Provide detect_ht_early()

jira LE-1907
cve CVE-2018-3620
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] cpu/common: provide detect_ht_early() (Christoph von Recklinghausen) [1593384] {CVE-2018-3620}
Rebuild_FUZZ: 94.87%
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 545401f4448a807b963ff17b575e0a393e68b523
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/545401f4.failed

To support force disabling of SMT it's required to know the number of
thread siblings early. detect_ht() cannot be called before the APIC driver
is selected, so split out the part which initializes smp_num_siblings.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Acked-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 545401f4448a807b963ff17b575e0a393e68b523)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/common.c
#	arch/x86/kernel/cpu/cpu.h
diff --cc arch/x86/kernel/cpu/common.c
index 49cb90f121df,0768492f4687..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -598,40 -653,41 +598,63 @@@ static void cpu_detect_tlb(struct cpuin
  		tlb_lli_4k[ENTRIES], tlb_lli_2m[ENTRIES],
  		tlb_lli_4m[ENTRIES]);
  
 -	pr_info("Last level dTLB entries: 4KB %d, 2MB %d, 4MB %d, 1GB %d\n",
 +	pr_info("Last level dTLB entries: 4KB %d, 2MB %d, 4MB %d\n",
  		tlb_lld_4k[ENTRIES], tlb_lld_2m[ENTRIES],
 -		tlb_lld_4m[ENTRIES], tlb_lld_1g[ENTRIES]);
 +		tlb_lld_4m[ENTRIES]);
 +
 +	pr_info("tlb_flushall_shift: %d\n", tlb_flushall_shift);
  }
  
- void detect_ht(struct cpuinfo_x86 *c)
+ int detect_ht_early(struct cpuinfo_x86 *c)
  {
 -#ifdef CONFIG_SMP
 +#ifdef CONFIG_X86_HT
  	u32 eax, ebx, ecx, edx;
++<<<<<<< HEAD
 +	int index_msb, core_bits;
 +	static bool printed;
++=======
++>>>>>>> 545401f4448a (x86/cpu/common: Provide detect_ht_early())
  
  	if (!cpu_has(c, X86_FEATURE_HT))
- 		return;
+ 		return -1;
  
  	if (cpu_has(c, X86_FEATURE_CMP_LEGACY))
++<<<<<<< HEAD
 +		goto out;
++=======
+ 		return -1;
++>>>>>>> 545401f4448a (x86/cpu/common: Provide detect_ht_early())
  
  	if (cpu_has(c, X86_FEATURE_XTOPOLOGY))
- 		return;
+ 		return -1;
  
  	cpuid(1, &eax, &ebx, &ecx, &edx);
  
  	smp_num_siblings = (ebx & 0xff0000) >> 16;
++<<<<<<< HEAD
 +
 +	if (smp_num_siblings == 1) {
 +		printk_once(KERN_INFO "CPU0: Hyper-Threading is disabled\n");
 +		goto out;
 +	}
++=======
+ 	if (smp_num_siblings == 1)
+ 		pr_info_once("CPU0: Hyper-Threading is disabled\n");
+ #endif
+ 	return 0;
+ }
+ 
+ void detect_ht(struct cpuinfo_x86 *c)
+ {
+ #ifdef CONFIG_SMP
+ 	int index_msb, core_bits;
+ 
+ 	if (detect_ht_early(c) < 0)
+ 		return;
++>>>>>>> 545401f4448a (x86/cpu/common: Provide detect_ht_early())
 +
 +	if (smp_num_siblings <= 1)
 +		goto out;
  
  	index_msb = get_count_order(smp_num_siblings);
  	c->phys_proc_id = apic->phys_pkg_id(c->initial_apicid, index_msb);
diff --cc arch/x86/kernel/cpu/cpu.h
index 4041c24ae7db,898da0b974e2..000000000000
--- a/arch/x86/kernel/cpu/cpu.h
+++ b/arch/x86/kernel/cpu/cpu.h
@@@ -43,4 -47,20 +43,23 @@@ extern const struct cpu_dev *const __x8
  
  extern void get_cpu_cap(struct cpuinfo_x86 *c);
  extern void cpu_detect_cache_sizes(struct cpuinfo_x86 *c);
++<<<<<<< HEAD
++=======
+ extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
+ extern u32 get_scattered_cpuid_leaf(unsigned int level,
+ 				    unsigned int sub_leaf,
+ 				    enum cpuid_regs_idx reg);
+ extern void init_intel_cacheinfo(struct cpuinfo_x86 *c);
+ extern void init_amd_cacheinfo(struct cpuinfo_x86 *c);
+ 
+ extern void detect_num_cpu_cores(struct cpuinfo_x86 *c);
+ extern int detect_extended_topology(struct cpuinfo_x86 *c);
+ extern int detect_ht_early(struct cpuinfo_x86 *c);
+ extern void detect_ht(struct cpuinfo_x86 *c);
+ 
+ unsigned int aperfmperf_get_khz(int cpu);
+ 
+ extern void x86_spec_ctrl_setup_ap(void);
+ 
++>>>>>>> 545401f4448a (x86/cpu/common: Provide detect_ht_early())
  #endif /* ARCH_X86_CPU_H */
* Unmerged path arch/x86/kernel/cpu/common.c
* Unmerged path arch/x86/kernel/cpu/cpu.h
