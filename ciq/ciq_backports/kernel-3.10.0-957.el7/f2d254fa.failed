liquidio: Added support for trusted VF

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Intiyaz Basha <intiyaz.basha@cavium.com>
commit f2d254fac13cc7c86871ea607c4ab1afa7f13e2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f2d254fa.failed

When a VF is trusted, all promiscuous traffic will only be sent to that VF.
In normal operation promiscuous traffic is sent to the PF. There can be
only one trusted VF per PF

	Signed-off-by: Intiyaz Basha <intiyaz.basha@cavium.com>
	Signed-off-by: Felix Manlunas <felix.manlunas@cavium.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f2d254fac13cc7c86871ea607c4ab1afa7f13e2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cavium/liquidio/lio_main.c
diff --cc drivers/net/ethernet/cavium/liquidio/lio_main.c
index 1c1ed38138cb,21280cb66550..000000000000
--- a/drivers/net/ethernet/cavium/liquidio/lio_main.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_main.c
@@@ -91,18 -91,9 +91,24 @@@ static int octeon_console_debug_enabled
   */
  #define LIO_SYNC_OCTEON_TIME_INTERVAL_MS 60000
  
++<<<<<<< HEAD
 +struct liquidio_if_cfg_context {
 +	int octeon_id;
 +
 +	wait_queue_head_t wc;
 +
 +	int cond;
 +};
 +
 +struct liquidio_if_cfg_resp {
 +	u64 rh;
 +	struct liquidio_if_cfg_info cfg_info;
 +	u64 status;
++=======
+ struct lio_trusted_vf_ctx {
+ 	struct completion complete;
+ 	int status;
++>>>>>>> f2d254fac13c (liquidio: Added support for trusted VF)
  };
  
  struct liquidio_rx_ctl_context {
@@@ -3419,11 -3509,12 +3535,12 @@@ static const struct net_device_ops lion
  	.ndo_do_ioctl		= liquidio_ioctl,
  	.ndo_fix_features	= liquidio_fix_features,
  	.ndo_set_features	= liquidio_set_features,
 -	.ndo_udp_tunnel_add	= liquidio_add_vxlan_port,
 -	.ndo_udp_tunnel_del	= liquidio_del_vxlan_port,
 +	.extended.ndo_udp_tunnel_add	= liquidio_add_vxlan_port,
 +	.extended.ndo_udp_tunnel_del	= liquidio_del_vxlan_port,
  	.ndo_set_vf_mac		= liquidio_set_vf_mac,
 -	.ndo_set_vf_vlan	= liquidio_set_vf_vlan,
 +	.extended.ndo_set_vf_vlan	= liquidio_set_vf_vlan,
  	.ndo_get_vf_config	= liquidio_get_vf_config,
+ 	.ndo_set_vf_trust	= liquidio_set_vf_trust,
  	.ndo_set_vf_link_state  = liquidio_set_vf_link_state,
  };
  
* Unmerged path drivers/net/ethernet/cavium/liquidio/lio_main.c
diff --git a/drivers/net/ethernet/cavium/liquidio/liquidio_common.h b/drivers/net/ethernet/cavium/liquidio/liquidio_common.h
index ae8566c61ee9..1bd8fdccf2d6 100644
--- a/drivers/net/ethernet/cavium/liquidio/liquidio_common.h
+++ b/drivers/net/ethernet/cavium/liquidio/liquidio_common.h
@@ -84,6 +84,7 @@ enum octeon_tag_type {
 #define OPCODE_NIC_IF_CFG              0x09
 #define OPCODE_NIC_VF_DRV_NOTICE       0x0A
 #define OPCODE_NIC_INTRMOD_PARAMS      0x0B
+#define OPCODE_NIC_SET_TRUSTED_VF	0x13
 #define OPCODE_NIC_SYNC_OCTEON_TIME	0x14
 #define VF_DRV_LOADED                  1
 #define VF_DRV_REMOVED                -1
@@ -917,6 +918,12 @@ union oct_nic_if_cfg {
 	} s;
 };
 
+struct lio_trusted_vf {
+	uint64_t active: 1;
+	uint64_t id : 8;
+	uint64_t reserved: 55;
+};
+
 struct lio_time {
 	s64 sec;   /* seconds */
 	s64 nsec;  /* nanoseconds */
diff --git a/drivers/net/ethernet/cavium/liquidio/octeon_device.h b/drivers/net/ethernet/cavium/liquidio/octeon_device.h
index 63b0c758a0a6..91937cc5c1d7 100644
--- a/drivers/net/ethernet/cavium/liquidio/octeon_device.h
+++ b/drivers/net/ethernet/cavium/liquidio/octeon_device.h
@@ -370,6 +370,8 @@ struct octeon_sriov_info {
 
 	u32	sriov_enabled;
 
+	struct lio_trusted_vf	trusted_vf;
+
 	/*lookup table that maps DPI ring number to VF pci_dev struct pointer*/
 	struct pci_dev *dpiring_to_vfpcidev_lut[MAX_POSSIBLE_VFS];
 
