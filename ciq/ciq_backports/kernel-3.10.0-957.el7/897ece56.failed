random32: add prandom_init_once helper for own rngs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 897ece56e714a2cc64e6914cb89a362d7021b36e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/897ece56.failed

Add a prandom_init_once() facility that works on the rnd_state, so that
users that are keeping their own state independent from prandom_u32() can
initialize their taus113 per cpu states.

The motivation here is similar to net_get_random_once(): initialize the
state as late as possible in the hope that enough entropy has been
collected for the seeding. prandom_init_once() makes use of the recently
introduced prandom_seed_full_state() helper and is generic enough so that
it could also be used on fast-paths due to the DO_ONCE().

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 897ece56e714a2cc64e6914cb89a362d7021b36e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/random.h
#	lib/random32.c
diff --cc include/linux/random.h
index 035fb390ade3,a75840c1aa71..000000000000
--- a/include/linux/random.h
+++ b/include/linux/random.h
@@@ -45,7 -46,11 +47,15 @@@ struct rnd_state 
  };
  
  u32 prandom_u32_state(struct rnd_state *state);
++<<<<<<< HEAD
 +void prandom_bytes_state(struct rnd_state *state, void *buf, int nbytes);
++=======
+ void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
+ void prandom_seed_full_state(struct rnd_state __percpu *pcpu_state);
+ 
+ #define prandom_init_once(pcpu_state)			\
+ 	DO_ONCE(prandom_seed_full_state, (pcpu_state))
++>>>>>>> 897ece56e714 (random32: add prandom_init_once helper for own rngs)
  
  /**
   * prandom_u32_max - returns a pseudo-random number in interval [0, ep_ro)
diff --cc lib/random32.c
index fa5da61ce7ad,12111910ccd0..000000000000
--- a/lib/random32.c
+++ b/lib/random32.c
@@@ -234,6 -238,24 +234,27 @@@ static void __init __prandom_start_seed
  	add_timer(&seed_timer);
  }
  
++<<<<<<< HEAD
++=======
+ void prandom_seed_full_state(struct rnd_state __percpu *pcpu_state)
+ {
+ 	int i;
+ 
+ 	for_each_possible_cpu(i) {
+ 		struct rnd_state *state = per_cpu_ptr(pcpu_state, i);
+ 		u32 seeds[4];
+ 
+ 		get_random_bytes(&seeds, sizeof(seeds));
+ 		state->s1 = __seed(seeds[0],   2U);
+ 		state->s2 = __seed(seeds[1],   8U);
+ 		state->s3 = __seed(seeds[2],  16U);
+ 		state->s4 = __seed(seeds[3], 128U);
+ 
+ 		prandom_warmup(state);
+ 	}
+ }
+ 
++>>>>>>> 897ece56e714 (random32: add prandom_init_once helper for own rngs)
  /*
   *	Generate better values after random number generator
   *	is fully initialized.
* Unmerged path include/linux/random.h
* Unmerged path lib/random32.c
