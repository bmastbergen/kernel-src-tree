KVM: s390: Extend diag 204 fields

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Janosch Frank <frankja@linux.vnet.ibm.com>
commit a2d57b35c0226102b1f2ffdc2f719fcc30c99bf5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a2d57b35.failed

The new store hypervisor information instruction, which we are going
to introduce, needs previously unused fields in diag 204 structures.

	Signed-off-by: Janosch Frank <frankja@linux.vnet.ibm.com>
	Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit a2d57b35c0226102b1f2ffdc2f719fcc30c99bf5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/diag.h
diff --cc arch/s390/include/asm/diag.h
index 244335e704b3,f4000cdb6921..000000000000
--- a/arch/s390/include/asm/diag.h
+++ b/arch/s390/include/asm/diag.h
@@@ -51,29 -78,143 +51,136 @@@ struct diag210 
  
  extern int diag210(struct diag210 *addr);
  
 -/* bit is set in flags, when physical cpu info is included in diag 204 data */
 -#define DIAG204_LPAR_PHYS_FLG 0x80
 -#define DIAG204_LPAR_NAME_LEN 8		/* lpar name len in diag 204 data */
 -#define DIAG204_CPU_NAME_LEN 16		/* type name len of cpus in diag224 name table */
 -
 -/* diag 204 subcodes */
 -enum diag204_sc {
 -	DIAG204_SUBC_STIB4 = 4,
 -	DIAG204_SUBC_RSI = 5,
 -	DIAG204_SUBC_STIB6 = 6,
 -	DIAG204_SUBC_STIB7 = 7
 +enum diag26c_sc {
 +	DIAG26C_MAC_SERVICES = 0x00000030
  };
  
 -/* The two available diag 204 data formats */
 -enum diag204_format {
 -	DIAG204_INFO_SIMPLE = 0,
 -	DIAG204_INFO_EXT = 0x00010000
 +enum diag26c_version {
 +	DIAG26C_VERSION2 = 0x00000002	/* z/VM 5.4.0 */
  };
  
++<<<<<<< HEAD
 +#define DIAG26C_GET_MAC	0x0000
 +struct diag26c_mac_req {
 +	u32	resp_buf_len;
 +	u32	resp_version;
 +	u16	op_code;
 +	u16	devno;
 +	u8	res[4];
 +};
++=======
+ enum diag204_cpu_flags {
+ 	DIAG204_CPU_ONLINE = 0x20,
+ 	DIAG204_CPU_CAPPED = 0x40,
+ };
+ 
+ struct diag204_info_blk_hdr {
+ 	__u8  npar;
+ 	__u8  flags;
+ 	__u16 tslice;
+ 	__u16 phys_cpus;
+ 	__u16 this_part;
+ 	__u64 curtod;
+ } __packed;
++>>>>>>> a2d57b35c022 (KVM: s390: Extend diag 204 fields)
  
 -struct diag204_x_info_blk_hdr {
 -	__u8  npar;
 -	__u8  flags;
 -	__u16 tslice;
 -	__u16 phys_cpus;
 -	__u16 this_part;
 -	__u64 curtod1;
 -	__u64 curtod2;
 -	char reserved[40];
 -} __packed;
 +struct diag26c_mac_resp {
 +	u32	version;
 +	u8	mac[ETH_ALEN];
 +	u8	res[2];
 +} __aligned(8);
  
 -struct diag204_part_hdr {
 -	__u8 pn;
 -	__u8 cpus;
 -	char reserved[6];
 -	char part_name[DIAG204_LPAR_NAME_LEN];
 -} __packed;
 +int diag26c(void *req, void *resp, enum diag26c_sc subcode);
  
++<<<<<<< HEAD
++=======
+ struct diag204_x_part_hdr {
+ 	__u8  pn;
+ 	__u8  cpus;
+ 	__u8  rcpus;
+ 	__u8  pflag;
+ 	__u32 mlu;
+ 	char  part_name[DIAG204_LPAR_NAME_LEN];
+ 	char  lpc_name[8];
+ 	char  os_name[8];
+ 	__u64 online_cs;
+ 	__u64 online_es;
+ 	__u8  upid;
+ 	__u8  reserved:3;
+ 	__u8  mtid:5;
+ 	char  reserved1[2];
+ 	__u32 group_mlu;
+ 	char  group_name[8];
+ 	char  hardware_group_name[8];
+ 	char  reserved2[24];
+ } __packed;
+ 
+ struct diag204_cpu_info {
+ 	__u16 cpu_addr;
+ 	char  reserved1[2];
+ 	__u8  ctidx;
+ 	__u8  cflag;
+ 	__u16 weight;
+ 	__u64 acc_time;
+ 	__u64 lp_time;
+ } __packed;
+ 
+ struct diag204_x_cpu_info {
+ 	__u16 cpu_addr;
+ 	char  reserved1[2];
+ 	__u8  ctidx;
+ 	__u8  cflag;
+ 	__u16 weight;
+ 	__u64 acc_time;
+ 	__u64 lp_time;
+ 	__u16 min_weight;
+ 	__u16 cur_weight;
+ 	__u16 max_weight;
+ 	char  reseved2[2];
+ 	__u64 online_time;
+ 	__u64 wait_time;
+ 	__u32 pma_weight;
+ 	__u32 polar_weight;
+ 	__u32 cpu_type_cap;
+ 	__u32 group_cpu_type_cap;
+ 	char  reserved3[32];
+ } __packed;
+ 
+ struct diag204_phys_hdr {
+ 	char reserved1[1];
+ 	__u8 cpus;
+ 	char reserved2[6];
+ 	char mgm_name[8];
+ } __packed;
+ 
+ struct diag204_x_phys_hdr {
+ 	char reserved1[1];
+ 	__u8 cpus;
+ 	char reserved2[6];
+ 	char mgm_name[8];
+ 	char reserved3[80];
+ } __packed;
+ 
+ struct diag204_phys_cpu {
+ 	__u16 cpu_addr;
+ 	char  reserved1[2];
+ 	__u8  ctidx;
+ 	char  reserved2[3];
+ 	__u64 mgm_time;
+ 	char  reserved3[8];
+ } __packed;
+ 
+ struct diag204_x_phys_cpu {
+ 	__u16 cpu_addr;
+ 	char  reserved1[2];
+ 	__u8  ctidx;
+ 	char  reserved2[1];
+ 	__u16 weight;
+ 	__u64 mgm_time;
+ 	char  reserved3[80];
+ } __packed;
+ 
+ int diag204(unsigned long subcode, unsigned long size, void *addr);
+ int diag224(void *ptr);
++>>>>>>> a2d57b35c022 (KVM: s390: Extend diag 204 fields)
  #endif /* _ASM_S390_DIAG_H */
* Unmerged path arch/s390/include/asm/diag.h
