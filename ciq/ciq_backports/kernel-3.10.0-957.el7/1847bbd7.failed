i2c: i2c-smbus: fix i2c_handle_smbus_host_notify documentation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [i2c] i2c-smbus: fix i2c_handle_smbus_host_notify documentation (Benjamin Tissoires) [1554926]
Rebuild_FUZZ: 95.80%
commit-author Jean Delvare <jdelvare@suse.de>
commit 1847bbd709d0f736223cb4762033225cdfafbe5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1847bbd7.failed

The parameter description is from a previous implementation, update
it to describe the actual implementation.

	Signed-off-by: Jean Delvare <jdelvare@suse.de>
	Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit 1847bbd709d0f736223cb4762033225cdfafbe5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/i2c-smbus.c
diff --cc drivers/i2c/i2c-smbus.c
index 4126d4d28e05,b0d2679c60d1..000000000000
--- a/drivers/i2c/i2c-smbus.c
+++ b/drivers/i2c/i2c-smbus.c
@@@ -239,8 -241,110 +239,113 @@@ int i2c_handle_smbus_alert(struct i2c_c
  }
  EXPORT_SYMBOL_GPL(i2c_handle_smbus_alert);
  
++<<<<<<< HEAD
++=======
+ static void smbus_host_notify_work(struct work_struct *work)
+ {
+ 	struct alert_data alert;
+ 	struct i2c_adapter *adapter;
+ 	unsigned long flags;
+ 	u16 payload;
+ 	u8 addr;
+ 	struct smbus_host_notify *data;
+ 
+ 	data = container_of(work, struct smbus_host_notify, work);
+ 
+ 	spin_lock_irqsave(&data->lock, flags);
+ 	payload = data->payload;
+ 	addr = data->addr;
+ 	adapter = data->adapter;
+ 
+ 	/* clear the pending bit and release the spinlock */
+ 	data->pending = false;
+ 	spin_unlock_irqrestore(&data->lock, flags);
+ 
+ 	if (!adapter || !addr)
+ 		return;
+ 
+ 	alert.type = I2C_PROTOCOL_SMBUS_HOST_NOTIFY;
+ 	alert.addr = addr;
+ 	alert.data = payload;
+ 
+ 	device_for_each_child(&adapter->dev, &alert, smbus_do_alert);
+ }
+ 
+ /**
+  * i2c_setup_smbus_host_notify - Allocate a new smbus_host_notify for the given
+  * I2C adapter.
+  * @adapter: the adapter we want to associate a Host Notify function
+  *
+  * Returns a struct smbus_host_notify pointer on success, and NULL on failure.
+  * The resulting smbus_host_notify must not be freed afterwards, it is a
+  * managed resource already.
+  */
+ struct smbus_host_notify *i2c_setup_smbus_host_notify(struct i2c_adapter *adap)
+ {
+ 	struct smbus_host_notify *host_notify;
+ 
+ 	host_notify = devm_kzalloc(&adap->dev, sizeof(struct smbus_host_notify),
+ 				   GFP_KERNEL);
+ 	if (!host_notify)
+ 		return NULL;
+ 
+ 	host_notify->adapter = adap;
+ 
+ 	spin_lock_init(&host_notify->lock);
+ 	INIT_WORK(&host_notify->work, smbus_host_notify_work);
+ 
+ 	return host_notify;
+ }
+ EXPORT_SYMBOL_GPL(i2c_setup_smbus_host_notify);
+ 
+ /**
+  * i2c_handle_smbus_host_notify - Forward a Host Notify event to the correct
+  * I2C client.
+  * @host_notify: the struct host_notify attached to the relevant adapter
+  * @addr: the I2C address of the notifying device
+  * @data: the payload of the notification
+  * Context: can't sleep
+  *
+  * Helper function to be called from an I2C bus driver's interrupt
+  * handler. It will schedule the Host Notify work, in turn calling the
+  * corresponding I2C device driver's alert function.
+  *
+  * host_notify should be a valid pointer previously returned by
+  * i2c_setup_smbus_host_notify().
+  */
+ int i2c_handle_smbus_host_notify(struct smbus_host_notify *host_notify,
+ 				 unsigned short addr, unsigned int data)
+ {
+ 	unsigned long flags;
+ 	struct i2c_adapter *adapter;
+ 
+ 	if (!host_notify || !host_notify->adapter)
+ 		return -EINVAL;
+ 
+ 	adapter = host_notify->adapter;
+ 
+ 	spin_lock_irqsave(&host_notify->lock, flags);
+ 
+ 	if (host_notify->pending) {
+ 		spin_unlock_irqrestore(&host_notify->lock, flags);
+ 		dev_warn(&adapter->dev, "Host Notify already scheduled.\n");
+ 		return -EBUSY;
+ 	}
+ 
+ 	host_notify->payload = data;
+ 	host_notify->addr = addr;
+ 
+ 	/* Mark that there is a pending notification and release the lock */
+ 	host_notify->pending = true;
+ 	spin_unlock_irqrestore(&host_notify->lock, flags);
+ 
+ 	return schedule_work(&host_notify->work);
+ }
+ EXPORT_SYMBOL_GPL(i2c_handle_smbus_host_notify);
+ 
++>>>>>>> 1847bbd709d0 (i2c: i2c-smbus: fix i2c_handle_smbus_host_notify documentation)
  module_i2c_driver(smbalert_driver);
  
 -MODULE_AUTHOR("Jean Delvare <jdelvare@suse.de>");
 +MODULE_AUTHOR("Jean Delvare <khali@linux-fr.org>");
  MODULE_DESCRIPTION("SMBus protocol extensions support");
  MODULE_LICENSE("GPL");
* Unmerged path drivers/i2c/i2c-smbus.c
