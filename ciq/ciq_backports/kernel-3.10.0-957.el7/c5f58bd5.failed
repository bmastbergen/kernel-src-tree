membarrier: Provide GLOBAL_EXPEDITED command

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
commit c5f58bd58f432be5d92df33c5458e0bcbee3aadf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c5f58bd5.failed

Allow expedited membarrier to be used for data shared between processes
through shared memory.

Processes wishing to receive the membarriers register with
MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED. Those which want to issue
membarrier invoke MEMBARRIER_CMD_GLOBAL_EXPEDITED.

This allows extremely simple kernel-level implementation: we have almost
everything we need with the PRIVATE_EXPEDITED barrier code. All we need
to do is to add a flag in the mm_struct that will be used to check
whether we need to send the IPI to the current thread of each CPU.

There is a slight downside to this approach compared to targeting
specific shared memory users: when performing a membarrier operation,
all registered "global" receivers will get the barrier, even if they
don't share a memory mapping with the sender issuing
MEMBARRIER_CMD_GLOBAL_EXPEDITED.

This registration approach seems to fit the requirement of not
disturbing processes that really deeply care about real-time: they
simply should not register with MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED.

In order to align the membarrier command names, the "MEMBARRIER_CMD_SHARED"
command is renamed to "MEMBARRIER_CMD_GLOBAL", keeping an alias of
MEMBARRIER_CMD_SHARED to MEMBARRIER_CMD_GLOBAL for UAPI header backward
compatibility.

	Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
	Acked-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Andrea Parri <parri.andrea@gmail.com>
	Cc: Andrew Hunter <ahh@google.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Avi Kivity <avi@scylladb.com>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Boqun Feng <boqun.feng@gmail.com>
	Cc: Dave Watson <davejwatson@fb.com>
	Cc: David Sehr <sehr@google.com>
	Cc: Greg Hackmann <ghackmann@google.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Maged Michael <maged.michael@gmail.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Cc: Paul Mackerras <paulus@samba.org>
	Cc: Russell King <linux@armlinux.org.uk>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: linux-api@vger.kernel.org
Link: http://lkml.kernel.org/r/20180129202020.8515-5-mathieu.desnoyers@efficios.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit c5f58bd58f432be5d92df33c5458e0bcbee3aadf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/include/asm/membarrier.h
#	include/linux/sched/mm.h
#	include/uapi/linux/membarrier.h
#	kernel/sched/membarrier.c
diff --cc include/linux/sched/mm.h
index a7adba1cd0a9,1c4e40c5efaf..000000000000
--- a/include/linux/sched/mm.h
+++ b/include/linux/sched/mm.h
@@@ -1,6 -1,249 +1,249 @@@
  #ifndef _LINUX_SCHED_MM_H
  #define _LINUX_SCHED_MM_H
  
 -#include <linux/kernel.h>
 -#include <linux/atomic.h>
  #include <linux/sched.h>
++<<<<<<< HEAD
++=======
+ #include <linux/mm_types.h>
+ #include <linux/gfp.h>
+ 
+ /*
+  * Routines for handling mm_structs
+  */
+ extern struct mm_struct * mm_alloc(void);
+ 
+ /**
+  * mmgrab() - Pin a &struct mm_struct.
+  * @mm: The &struct mm_struct to pin.
+  *
+  * Make sure that @mm will not get freed even after the owning task
+  * exits. This doesn't guarantee that the associated address space
+  * will still exist later on and mmget_not_zero() has to be used before
+  * accessing it.
+  *
+  * This is a preferred way to to pin @mm for a longer/unbounded amount
+  * of time.
+  *
+  * Use mmdrop() to release the reference acquired by mmgrab().
+  *
+  * See also <Documentation/vm/active_mm.txt> for an in-depth explanation
+  * of &mm_struct.mm_count vs &mm_struct.mm_users.
+  */
+ static inline void mmgrab(struct mm_struct *mm)
+ {
+ 	atomic_inc(&mm->mm_count);
+ }
+ 
+ /* mmdrop drops the mm and the page tables */
+ extern void __mmdrop(struct mm_struct *);
+ static inline void mmdrop(struct mm_struct *mm)
+ {
+ 	/*
+ 	 * The implicit full barrier implied by atomic_dec_and_test() is
+ 	 * required by the membarrier system call before returning to
+ 	 * user-space, after storing to rq->curr.
+ 	 */
+ 	if (unlikely(atomic_dec_and_test(&mm->mm_count)))
+ 		__mmdrop(mm);
+ }
+ 
+ static inline void mmdrop_async_fn(struct work_struct *work)
+ {
+ 	struct mm_struct *mm = container_of(work, struct mm_struct, async_put_work);
+ 	__mmdrop(mm);
+ }
+ 
+ static inline void mmdrop_async(struct mm_struct *mm)
+ {
+ 	if (unlikely(atomic_dec_and_test(&mm->mm_count))) {
+ 		INIT_WORK(&mm->async_put_work, mmdrop_async_fn);
+ 		schedule_work(&mm->async_put_work);
+ 	}
+ }
+ 
+ /**
+  * mmget() - Pin the address space associated with a &struct mm_struct.
+  * @mm: The address space to pin.
+  *
+  * Make sure that the address space of the given &struct mm_struct doesn't
+  * go away. This does not protect against parts of the address space being
+  * modified or freed, however.
+  *
+  * Never use this function to pin this address space for an
+  * unbounded/indefinite amount of time.
+  *
+  * Use mmput() to release the reference acquired by mmget().
+  *
+  * See also <Documentation/vm/active_mm.txt> for an in-depth explanation
+  * of &mm_struct.mm_count vs &mm_struct.mm_users.
+  */
+ static inline void mmget(struct mm_struct *mm)
+ {
+ 	atomic_inc(&mm->mm_users);
+ }
+ 
+ static inline bool mmget_not_zero(struct mm_struct *mm)
+ {
+ 	return atomic_inc_not_zero(&mm->mm_users);
+ }
+ 
+ /* mmput gets rid of the mappings and all user-space */
+ extern void mmput(struct mm_struct *);
+ #ifdef CONFIG_MMU
+ /* same as above but performs the slow path from the async context. Can
+  * be called from the atomic context as well
+  */
+ void mmput_async(struct mm_struct *);
+ #endif
+ 
+ /* Grab a reference to a task's mm, if it is not already going away */
+ extern struct mm_struct *get_task_mm(struct task_struct *task);
+ /*
+  * Grab a reference to a task's mm, if it is not already going away
+  * and ptrace_may_access with the mode parameter passed to it
+  * succeeds.
+  */
+ extern struct mm_struct *mm_access(struct task_struct *task, unsigned int mode);
+ /* Remove the current tasks stale references to the old mm_struct */
+ extern void mm_release(struct task_struct *, struct mm_struct *);
+ 
+ #ifdef CONFIG_MEMCG
+ extern void mm_update_next_owner(struct mm_struct *mm);
+ #else
+ static inline void mm_update_next_owner(struct mm_struct *mm)
+ {
+ }
+ #endif /* CONFIG_MEMCG */
+ 
+ #ifdef CONFIG_MMU
+ extern void arch_pick_mmap_layout(struct mm_struct *mm);
+ extern unsigned long
+ arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
+ 		       unsigned long, unsigned long);
+ extern unsigned long
+ arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
+ 			  unsigned long len, unsigned long pgoff,
+ 			  unsigned long flags);
+ #else
+ static inline void arch_pick_mmap_layout(struct mm_struct *mm) {}
+ #endif
+ 
+ static inline bool in_vfork(struct task_struct *tsk)
+ {
+ 	bool ret;
+ 
+ 	/*
+ 	 * need RCU to access ->real_parent if CLONE_VM was used along with
+ 	 * CLONE_PARENT.
+ 	 *
+ 	 * We check real_parent->mm == tsk->mm because CLONE_VFORK does not
+ 	 * imply CLONE_VM
+ 	 *
+ 	 * CLONE_VFORK can be used with CLONE_PARENT/CLONE_THREAD and thus
+ 	 * ->real_parent is not necessarily the task doing vfork(), so in
+ 	 * theory we can't rely on task_lock() if we want to dereference it.
+ 	 *
+ 	 * And in this case we can't trust the real_parent->mm == tsk->mm
+ 	 * check, it can be false negative. But we do not care, if init or
+ 	 * another oom-unkillable task does this it should blame itself.
+ 	 */
+ 	rcu_read_lock();
+ 	ret = tsk->vfork_done && tsk->real_parent->mm == tsk->mm;
+ 	rcu_read_unlock();
+ 
+ 	return ret;
+ }
+ 
+ /*
+  * Applies per-task gfp context to the given allocation flags.
+  * PF_MEMALLOC_NOIO implies GFP_NOIO
+  * PF_MEMALLOC_NOFS implies GFP_NOFS
+  */
+ static inline gfp_t current_gfp_context(gfp_t flags)
+ {
+ 	/*
+ 	 * NOIO implies both NOIO and NOFS and it is a weaker context
+ 	 * so always make sure it makes precendence
+ 	 */
+ 	if (unlikely(current->flags & PF_MEMALLOC_NOIO))
+ 		flags &= ~(__GFP_IO | __GFP_FS);
+ 	else if (unlikely(current->flags & PF_MEMALLOC_NOFS))
+ 		flags &= ~__GFP_FS;
+ 	return flags;
+ }
+ 
+ #ifdef CONFIG_LOCKDEP
+ extern void fs_reclaim_acquire(gfp_t gfp_mask);
+ extern void fs_reclaim_release(gfp_t gfp_mask);
+ #else
+ static inline void fs_reclaim_acquire(gfp_t gfp_mask) { }
+ static inline void fs_reclaim_release(gfp_t gfp_mask) { }
+ #endif
+ 
+ static inline unsigned int memalloc_noio_save(void)
+ {
+ 	unsigned int flags = current->flags & PF_MEMALLOC_NOIO;
+ 	current->flags |= PF_MEMALLOC_NOIO;
+ 	return flags;
+ }
+ 
+ static inline void memalloc_noio_restore(unsigned int flags)
+ {
+ 	current->flags = (current->flags & ~PF_MEMALLOC_NOIO) | flags;
+ }
+ 
+ static inline unsigned int memalloc_nofs_save(void)
+ {
+ 	unsigned int flags = current->flags & PF_MEMALLOC_NOFS;
+ 	current->flags |= PF_MEMALLOC_NOFS;
+ 	return flags;
+ }
+ 
+ static inline void memalloc_nofs_restore(unsigned int flags)
+ {
+ 	current->flags = (current->flags & ~PF_MEMALLOC_NOFS) | flags;
+ }
+ 
+ static inline unsigned int memalloc_noreclaim_save(void)
+ {
+ 	unsigned int flags = current->flags & PF_MEMALLOC;
+ 	current->flags |= PF_MEMALLOC;
+ 	return flags;
+ }
+ 
+ static inline void memalloc_noreclaim_restore(unsigned int flags)
+ {
+ 	current->flags = (current->flags & ~PF_MEMALLOC) | flags;
+ }
+ 
+ #ifdef CONFIG_MEMBARRIER
+ enum {
+ 	MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY		= (1U << 0),
+ 	MEMBARRIER_STATE_PRIVATE_EXPEDITED			= (1U << 1),
+ 	MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY			= (1U << 2),
+ 	MEMBARRIER_STATE_GLOBAL_EXPEDITED			= (1U << 3),
+ };
+ 
+ #ifdef CONFIG_ARCH_HAS_MEMBARRIER_CALLBACKS
+ #include <asm/membarrier.h>
+ #endif
+ 
+ static inline void membarrier_execve(struct task_struct *t)
+ {
+ 	atomic_set(&t->mm->membarrier_state, 0);
+ }
+ #else
+ #ifdef CONFIG_ARCH_HAS_MEMBARRIER_CALLBACKS
+ static inline void membarrier_arch_switch_mm(struct mm_struct *prev,
+ 					     struct mm_struct *next,
+ 					     struct task_struct *tsk)
+ {
+ }
+ #endif
+ static inline void membarrier_execve(struct task_struct *t)
+ {
+ }
+ #endif
++>>>>>>> c5f58bd58f43 (membarrier: Provide GLOBAL_EXPEDITED command)
  
  #endif /* _LINUX_SCHED_MM_H */
* Unmerged path arch/powerpc/include/asm/membarrier.h
* Unmerged path include/uapi/linux/membarrier.h
* Unmerged path kernel/sched/membarrier.c
* Unmerged path arch/powerpc/include/asm/membarrier.h
* Unmerged path include/linux/sched/mm.h
* Unmerged path include/uapi/linux/membarrier.h
* Unmerged path kernel/sched/membarrier.c
