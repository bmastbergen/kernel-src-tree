net/dim: Rename *_get_profile() functions to *_get_rx_moderation()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [kernel] dim: Rename *_get_profile() functions to *_get_rx_moderation() (Jonathan Toppins) [1526120]
Rebuild_FUZZ: 96.88%
commit-author Tal Gilboa <talgi@mellanox.com>
commit 026a807c2de37aa826748c2ffa1969fc778406b2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/026a807c.failed

Preparation for introducing adaptive TX to net DIM.

	Signed-off-by: Tal Gilboa <talgi@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 026a807c2de37aa826748c2ffa1969fc778406b2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
#	drivers/net/ethernet/broadcom/bcmsysport.c
#	drivers/net/ethernet/broadcom/genet/bcmgenet.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	include/linux/net_dim.h
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,1b286e1985d2..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -30,33 -30,19 +30,46 @@@
   * SOFTWARE.
   */
  
 -#include <linux/net_dim.h>
 -#include "en.h"
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
 +
 +#include "ipath_kernel.h"
 +
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
 +{
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +	return 0;
 +}
  
 -void mlx5e_rx_dim_work(struct work_struct *work)
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
  {
 +	return 1;
++=======
+ 	struct net_dim *dim = container_of(work, struct net_dim,
+ 					   work);
+ 	struct mlx5e_rq *rq = container_of(dim, struct mlx5e_rq, dim);
+ 	struct net_dim_cq_moder cur_moder =
+ 		net_dim_get_rx_moderation(dim->mode, dim->profile_ix);
+ 
+ 	mlx5_core_modify_cq_moderation(rq->mdev, &rq->cq.mcq,
+ 				       cur_moder.usec, cur_moder.pkts);
+ 
+ 	dim->state = NET_DIM_START_MEASURE;
++>>>>>>> 026a807c2de3 (net/dim: Rename *_get_profile() functions to *_get_rx_moderation()):drivers/net/ethernet/mellanox/mlx5/core/en_dim.c
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index f9f9996c2b9e,a69cc1cc7bfb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -3748,9 -4115,20 +3748,26 @@@ void mlx5e_set_rx_cq_mode_params(struc
  		params->rx_cq_moderation.usec =
  			MLX5E_PARAMS_DEFAULT_RX_CQ_MODERATION_USEC_FROM_CQE;
  
++<<<<<<< HEAD
 +	if (params->rx_am_enabled)
 +		params->rx_cq_moderation =
 +			mlx5e_am_get_def_profile(cq_period_mode);
++=======
+ 	if (params->rx_dim_enabled) {
+ 		switch (cq_period_mode) {
+ 		case MLX5_CQ_PERIOD_MODE_START_FROM_CQE:
+ 			params->rx_cq_moderation =
+ 				net_dim_get_def_rx_moderation(
+ 					NET_DIM_CQ_PERIOD_MODE_START_FROM_CQE);
+ 			break;
+ 		case MLX5_CQ_PERIOD_MODE_START_FROM_EQE:
+ 		default:
+ 			params->rx_cq_moderation =
+ 				net_dim_get_def_rx_moderation(
+ 					NET_DIM_CQ_PERIOD_MODE_START_FROM_EQE);
+ 		}
+ 	}
++>>>>>>> 026a807c2de3 (net/dim: Rename *_get_profile() functions to *_get_rx_moderation())
  
  	MLX5E_SET_PFLAG(params, MLX5E_PFLAG_RX_CQE_BASED_MODER,
  			params->rx_cq_moderation.cq_period_mode ==
* Unmerged path drivers/net/ethernet/broadcom/bcmsysport.c
* Unmerged path drivers/net/ethernet/broadcom/genet/bcmgenet.c
* Unmerged path include/linux/net_dim.h
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
* Unmerged path drivers/net/ethernet/broadcom/bcmsysport.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt_dim.c b/drivers/net/ethernet/broadcom/bnxt/bnxt_dim.c
index 408dd190331e..afa97c8bb081 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_dim.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_dim.c
@@ -21,11 +21,11 @@ void bnxt_dim_work(struct work_struct *work)
 	struct bnxt_napi *bnapi = container_of(cpr,
 					       struct bnxt_napi,
 					       cp_ring);
-	struct net_dim_cq_moder cur_profile = net_dim_get_profile(dim->mode,
-								  dim->profile_ix);
+	struct net_dim_cq_moder cur_moder =
+		net_dim_get_rx_moderation(dim->mode, dim->profile_ix);
 
-	cpr->rx_ring_coal.coal_ticks = cur_profile.usec;
-	cpr->rx_ring_coal.coal_bufs = cur_profile.pkts;
+	cpr->rx_ring_coal.coal_ticks = cur_moder.usec;
+	cpr->rx_ring_coal.coal_bufs = cur_moder.pkts;
 
 	bnxt_hwrm_set_ring_coal(bnapi->bp, bnapi);
 	dim->state = NET_DIM_START_MEASURE;
* Unmerged path drivers/net/ethernet/broadcom/genet/bcmgenet.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path include/linux/net_dim.h
