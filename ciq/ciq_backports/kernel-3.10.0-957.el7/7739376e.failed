USB: of: clean up device-node helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [usb] of: clean up device-node helper (Torez Smith) [1540721]
Rebuild_FUZZ: 92.54%
commit-author Johan Hovold <johan@kernel.org>
commit 7739376eb1ed68593805e5b4ed359123d0718549
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/7739376e.failed

Clean up the USB device-node helper that is used to look up a device
node given a parent hub device and a port number. Also pass in a struct
usb_device as first argument to provide some type checking.

Give the helper the more descriptive name usb_of_get_device_node(),
which matches the new usb_of_get_interface_node() helper that is used to
look up a second type of of child node from a USB device.

Note that the terms "device node" and "interface node" are defined and
used by the OF Recommended Practice for USB.

	Signed-off-by: Johan Hovold <johan@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 7739376eb1ed68593805e5b4ed359123d0718549)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/usb/of.h
diff --cc include/linux/usb/of.h
index c40ad6e1b6cd,dba55ccb9b53..000000000000
--- a/include/linux/usb/of.h
+++ b/include/linux/usb/of.h
@@@ -17,10 -19,14 +17,18 @@@ enum usb_device_speed of_usb_get_maximu
  bool of_usb_host_tpl_support(struct device_node *np);
  int of_usb_update_otg_caps(struct device_node *np,
  			struct usb_otg_caps *otg_caps);
++<<<<<<< HEAD
 +struct device_node *usb_of_get_child_node(struct device_node *parent,
 +			int portnum);
++=======
+ struct device_node *usb_of_get_device_node(struct usb_device *hub, int port1);
+ bool usb_of_has_combined_node(struct usb_device *udev);
+ struct device_node *usb_of_get_interface_node(struct usb_device *udev,
+ 		u8 config, u8 ifnum);
+ struct device *usb_of_get_companion_dev(struct device *dev);
++>>>>>>> 7739376eb1ed (USB: of: clean up device-node helper)
  #else
 -static inline enum usb_dr_mode
 -of_usb_get_dr_mode_by_phy(struct device_node *np, int arg0)
 +static inline enum usb_dr_mode of_usb_get_dr_mode(struct device_node *np)
  {
  	return USB_DR_MODE_UNKNOWN;
  }
diff --git a/drivers/usb/core/ledtrig-usbport.c b/drivers/usb/core/ledtrig-usbport.c
index 456d8d10b370..01a0d8fbe00d 100644
--- a/drivers/usb/core/ledtrig-usbport.c
+++ b/drivers/usb/core/ledtrig-usbport.c
@@ -141,7 +141,7 @@ static bool usbport_trig_port_observed(struct usbport_trig_data *usbport_data,
 	 *
 	 * FIXME: This is really the device node of the connected device
 	 */
-	port_np = usb_of_get_child_node(usb_dev->dev.of_node, port1);
+	port_np = usb_of_get_device_node(usb_dev, port1);
 	if (!port_np)
 		return false;
 
diff --git a/drivers/usb/core/of.c b/drivers/usb/core/of.c
index c30e78b70eb1..34e07f1c7637 100644
--- a/drivers/usb/core/of.c
+++ b/drivers/usb/core/of.c
@@ -9,29 +9,30 @@
 #include <linux/usb/of.h>
 
 /**
- * usb_of_get_child_node - Find the device node match port number
- * @parent: the parent device node
- * @portnum: the port number which device is connecting
+ * usb_of_get_device_node() - get a USB device node
+ * @hub: hub to which device is connected
+ * @port1: one-based index of port
  *
- * Find the node from device tree according to its port number.
+ * Look up the node of a USB device given its parent hub device and one-based
+ * port number.
  *
  * Return: A pointer to the node with incremented refcount if found, or
  * %NULL otherwise.
  */
-struct device_node *usb_of_get_child_node(struct device_node *parent,
-					int portnum)
+struct device_node *usb_of_get_device_node(struct usb_device *hub, int port1)
 {
 	struct device_node *node;
-	u32 port;
+	u32 reg;
 
-	for_each_child_of_node(parent, node) {
-		if (!of_property_read_u32(node, "reg", &port)) {
-			if (port == portnum)
-				return node;
-		}
+	for_each_child_of_node(hub->dev.of_node, node) {
+		if (of_property_read_u32(node, "reg", &reg))
+			continue;
+
+		if (reg == port1)
+			return node;
 	}
 
 	return NULL;
 }
-EXPORT_SYMBOL_GPL(usb_of_get_child_node);
+EXPORT_SYMBOL_GPL(usb_of_get_device_node);
 
diff --git a/drivers/usb/core/usb.c b/drivers/usb/core/usb.c
index cfe51c790ac1..4755476ccf83 100644
--- a/drivers/usb/core/usb.c
+++ b/drivers/usb/core/usb.c
@@ -650,8 +650,7 @@ struct usb_device *usb_alloc_dev(struct usb_device *parent,
 			raw_port = usb_hcd_find_raw_port_number(usb_hcd,
 				port1);
 		}
-		dev->dev.of_node = usb_of_get_child_node(parent->dev.of_node,
-				raw_port);
+		dev->dev.of_node = usb_of_get_device_node(parent, raw_port);
 
 		/* hub driver sets up TT records */
 	}
* Unmerged path include/linux/usb/of.h
