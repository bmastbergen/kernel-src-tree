/proc/module: fix building without kallsyms

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnd Bergmann <arnd@arndb.de>
commit e4a8ca3baa5557fa54557d42b5910ed0d3316922
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e4a8ca3b.failed

As reported by kernelci and other build bots, we now get a link
failure without CONFIG_KALLSYMS:

  module.c:(.text+0xf2c): undefined reference to `kallsyms_show_value'

This adds a dummy helper with the same name that can be used
for compilation. It's not entirely clear to me what this
should return for !CONFIG_KALLSYMS, I picked an unconditional
'false', which leads to the module address being unavailable
to user space.

Link: https://kernelci.org/build/mainline/branch/master/kernel/v4.14-5-g516fb7f2e73d/
Fixes: 516fb7f2e73d ("/proc/module: use the same logic as /proc/kallsyms for address exposure")
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit e4a8ca3baa5557fa54557d42b5910ed0d3316922)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kallsyms.h
diff --cc include/linux/kallsyms.h
index 6883e197acb9,708f337d780b..000000000000
--- a/include/linux/kallsyms.h
+++ b/include/linux/kallsyms.h
@@@ -13,6 -14,12 +13,15 @@@
  #define KSYM_SYMBOL_LEN (sizeof("%s+%#lx/%#lx [%s]") + (KSYM_NAME_LEN - 1) + \
  			 2*(BITS_PER_LONG*3/10) + (MODULE_NAME_LEN - 1) + 1)
  
++<<<<<<< HEAD
++=======
+ #ifndef CONFIG_64BIT
+ # define KALLSYM_FMT "%08lx"
+ #else
+ # define KALLSYM_FMT "%016lx"
+ #endif
+ 
++>>>>>>> e4a8ca3baa55 (/proc/module: fix building without kallsyms)
  struct module;
  
  #ifdef CONFIG_KALLSYMS
* Unmerged path include/linux/kallsyms.h
