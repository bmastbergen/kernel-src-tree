x86/platform/UV: Add kernel parameter to set memory block size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] platform/uv: Add kernel parameter to set memory block size (Frank Ramsay) [1595892]
Rebuild_FUZZ: 96.67%
commit-author mike.travis@hpe.com <mike.travis@hpe.com>
commit d7609f4210cb716c11abfe2bfb5997191095d00b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/d7609f42.failed

Add a kernel parameter that allows setting UV memory block size.  This
is to provide an adjustment for new forms of PMEM and other DIMM memory
that might require alignment restrictions other than scanning the global
address table for the required minimum alignment.  The value set will be
further adjusted by both the GAM range table scan as well as restrictions
imposed by set_memory_block_size_order().

	Signed-off-by: Mike Travis <mike.travis@hpe.com>
	Reviewed-by: Andrew Banman <andrew.banman@hpe.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Dimitri Sivanich <dimitri.sivanich@hpe.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Russ Anderson <russ.anderson@hpe.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: dan.j.williams@intel.com
	Cc: jgross@suse.com
	Cc: kirill.shutemov@linux.intel.com
	Cc: mhocko@suse.com
	Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/lkml/20180524201711.854849120@stormcage.americas.sgi.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d7609f4210cb716c11abfe2bfb5997191095d00b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/apic/x2apic_uv_x.c
diff --cc arch/x86/kernel/apic/x2apic_uv_x.c
index 8e1cf1975fe3,d492752f79e1..000000000000
--- a/arch/x86/kernel/apic/x2apic_uv_x.c
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c
@@@ -384,7 -393,52 +384,56 @@@ extern int uv_hub_info_version(void
  }
  EXPORT_SYMBOL(uv_hub_info_version);
  
++<<<<<<< HEAD
 +/* Build GAM range lookup table */
++=======
+ /* Default UV memory block size is 2GB */
+ static unsigned long mem_block_size = (2UL << 30);
+ 
+ /* Kernel parameter to specify UV mem block size */
+ static int parse_mem_block_size(char *ptr)
+ {
+ 	unsigned long size = memparse(ptr, NULL);
+ 
+ 	/* Size will be rounded down by set_block_size() below */
+ 	mem_block_size = size;
+ 	return 0;
+ }
+ early_param("uv_memblksize", parse_mem_block_size);
+ 
+ static __init int adj_blksize(u32 lgre)
+ {
+ 	unsigned long base = (unsigned long)lgre << UV_GAM_RANGE_SHFT;
+ 	unsigned long size;
+ 
+ 	for (size = mem_block_size; size > MIN_MEMORY_BLOCK_SIZE; size >>= 1)
+ 		if (IS_ALIGNED(base, size))
+ 			break;
+ 
+ 	if (size >= mem_block_size)
+ 		return 0;
+ 
+ 	mem_block_size = size;
+ 	return 1;
+ }
+ 
+ static __init void set_block_size(void)
+ {
+ 	unsigned int order = ffs(mem_block_size);
+ 
+ 	if (order) {
+ 		/* adjust for ffs return of 1..64 */
+ 		set_memory_block_size_order(order - 1);
+ 		pr_info("UV: mem_block_size set to 0x%lx\n", mem_block_size);
+ 	} else {
+ 		/* bad or zero value, default to 1UL << 31 (2GB) */
+ 		pr_err("UV: mem_block_size error with 0x%lx\n", mem_block_size);
+ 		set_memory_block_size_order(31);
+ 	}
+ }
+ 
+ /* Build GAM range lookup table: */
++>>>>>>> d7609f4210cb (x86/platform/UV: Add kernel parameter to set memory block size)
  static __init void build_uv_gr_table(void)
  {
  	struct uv_gam_range_entry *gre = uv_gre_table;
* Unmerged path arch/x86/kernel/apic/x2apic_uv_x.c
