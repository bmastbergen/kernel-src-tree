jump_label: Disable jump labels in __exit code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 578ae447e7e5d78c90ac40a06406c1741f79ba96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/578ae447.failed

With the following commit:

  333522447063 ("jump_label: Explicitly disable jump labels in __init code")

... we explicitly disabled jump labels in __init code, so they could be
detected and not warned about in the following commit:

  dc1dd184c2f0 ("jump_label: Warn on failed jump_label patching attempt")

In-kernel __exit code has the same issue.  It's never used, so it's
freed along with the rest of initmem.  But jump label entries in __exit
code aren't explicitly disabled, so we get the following warning when
enabling pr_debug() in __exit code:

  can't patch jump_label at dmi_sysfs_exit+0x0/0x2d
  WARNING: CPU: 0 PID: 22572 at kernel/jump_label.c:376 __jump_label_update+0x9d/0xb0

Fix the warning by disabling all jump labels in initmem (which includes
both __init and __exit code).

Reported-and-tested-by: Li Wang <liwang@redhat.com>
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Jason Baron <jbaron@akamai.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Fixes: dc1dd184c2f0 ("jump_label: Warn on failed jump_label patching attempt")
Link: http://lkml.kernel.org/r/7121e6e595374f06616c505b6e690e275c0054d1.1521483452.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 578ae447e7e5d78c90ac40a06406c1741f79ba96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/jump_label.h
#	init/main.c
#	kernel/jump_label.c
diff --cc include/linux/jump_label.h
index 20231da4f668,b46b541c67c4..000000000000
--- a/include/linux/jump_label.h
+++ b/include/linux/jump_label.h
@@@ -109,6 -151,7 +109,10 @@@ extern struct jump_entry __start___jump
  extern struct jump_entry __stop___jump_table[];
  
  extern void jump_label_init(void);
++<<<<<<< HEAD
++=======
+ extern void jump_label_invalidate_initmem(void);
++>>>>>>> 578ae447e7e5 (jump_label: Disable jump labels in __exit code)
  extern void jump_label_lock(void);
  extern void jump_label_unlock(void);
  extern void arch_jump_label_transform(struct jump_entry *entry,
@@@ -147,9 -199,11 +151,14 @@@ static __always_inline void jump_label_
  	static_key_initialized = true;
  }
  
++<<<<<<< HEAD
++=======
+ static inline void jump_label_invalidate_initmem(void) {}
+ 
++>>>>>>> 578ae447e7e5 (jump_label: Disable jump labels in __exit code)
  static __always_inline bool static_key_false(struct static_key *key)
  {
 -	if (unlikely(static_key_count(key) > 0))
 +	if (unlikely(atomic_read(&key->enabled)) > 0)
  		return true;
  	return false;
  }
diff --cc init/main.c
index 085c9c599e87,21efbf6ace93..000000000000
--- a/init/main.c
+++ b/init/main.c
@@@ -907,8 -998,12 +907,13 @@@ static int __ref kernel_init(void *unus
  	kernel_init_freeable();
  	/* need to finish all async __init code before freeing the memory */
  	async_synchronize_full();
++<<<<<<< HEAD
++=======
+ 	ftrace_free_init_mem();
+ 	jump_label_invalidate_initmem();
++>>>>>>> 578ae447e7e5 (jump_label: Disable jump labels in __exit code)
  	free_initmem();
 -	mark_readonly();
 +	mark_rodata_ro();
  	system_state = SYSTEM_RUNNING;
  	numa_default_policy();
  
diff --cc kernel/jump_label.c
index e045bd4ec2a0,01ebdf1f9f40..000000000000
--- a/kernel/jump_label.c
+++ b/kernel/jump_label.c
@@@ -15,6 -15,8 +15,11 @@@
  #include <linux/static_key.h>
  #include <linux/jump_label_ratelimit.h>
  #include <linux/bug.h>
++<<<<<<< HEAD
++=======
+ #include <linux/cpu.h>
+ #include <asm/sections.h>
++>>>>>>> 578ae447e7e5 (jump_label: Disable jump labels in __exit code)
  
  #ifdef HAVE_JUMP_LABEL
  
@@@ -246,6 -419,20 +251,23 @@@ void __init jump_label_init(void
  	}
  	static_key_initialized = true;
  	jump_label_unlock();
++<<<<<<< HEAD
++=======
+ 	cpus_read_unlock();
+ }
+ 
+ /* Disable any jump label entries in __init/__exit code */
+ void __init jump_label_invalidate_initmem(void)
+ {
+ 	struct jump_entry *iter_start = __start___jump_table;
+ 	struct jump_entry *iter_stop = __stop___jump_table;
+ 	struct jump_entry *iter;
+ 
+ 	for (iter = iter_start; iter < iter_stop; iter++) {
+ 		if (init_section_contains((void *)(unsigned long)iter->code, 1))
+ 			iter->code = 0;
+ 	}
++>>>>>>> 578ae447e7e5 (jump_label: Disable jump labels in __exit code)
  }
  
  #ifdef CONFIG_MODULES
* Unmerged path include/linux/jump_label.h
* Unmerged path init/main.c
* Unmerged path kernel/jump_label.c
