iio: Add a DMAengine framework based buffer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] Add a DMAengine framework based buffer (Tony Camuso) [1559170]
Rebuild_FUZZ: 93.83%
commit-author Lars-Peter Clausen <lars@metafoo.de>
commit 2d6ca60f328450ff5c7802d0857d12e3711348ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2d6ca60f.failed

Add a generic fully device independent DMA buffer implementation that uses
the DMAegnine framework to perform the DMA transfers. This can be used by
converter drivers that whish to provide a DMA buffer for converters that
are connected to a DMA core that implements the DMAengine API.

Apart from allocating the buffer using iio_dmaengine_buffer_alloc() and
freeing it using iio_dmaengine_buffer_free() no additional converter driver
specific code is required when using this DMA buffer implementation.

	Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 2d6ca60f328450ff5c7802d0857d12e3711348ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/buffer/Kconfig
#	drivers/iio/buffer/Makefile
#	drivers/iio/industrialio-buffer-dmaengine.c
* Unmerged path drivers/iio/buffer/Kconfig
* Unmerged path drivers/iio/buffer/Makefile
* Unmerged path drivers/iio/industrialio-buffer-dmaengine.c
* Unmerged path drivers/iio/buffer/Kconfig
* Unmerged path drivers/iio/buffer/Makefile
* Unmerged path drivers/iio/industrialio-buffer-dmaengine.c
diff --git a/include/linux/iio/buffer-dmaengine.h b/include/linux/iio/buffer-dmaengine.h
new file mode 100644
index 000000000000..5dcddf427bb0
--- /dev/null
+++ b/include/linux/iio/buffer-dmaengine.h
@@ -0,0 +1,18 @@
+/*
+ * Copyright 2014-2015 Analog Devices Inc.
+ *  Author: Lars-Peter Clausen <lars@metafoo.de>
+ *
+ * Licensed under the GPL-2 or later.
+ */
+
+#ifndef __IIO_DMAENGINE_H__
+#define __IIO_DMAENGINE_H__
+
+struct iio_buffer;
+struct device;
+
+struct iio_buffer *iio_dmaengine_buffer_alloc(struct device *dev,
+	const char *channel);
+void iio_dmaengine_buffer_free(struct iio_buffer *buffer);
+
+#endif
