seccomp: Add filter flag to opt-out of SSB mitigation

jira LE-1907
cve CVE-2018-3639
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Kees Cook <keescook@chromium.org>
commit 00a02d0c502a06d15e07b857f8ff921e3e402675
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/00a02d0c.failed

If a seccomp user is not interested in Speculative Store Bypass mitigation
by default, it can set the new SECCOMP_FILTER_FLAG_SPEC_ALLOW flag when
adding filters.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 00a02d0c502a06d15e07b857f8ff921e3e402675)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/seccomp.h
#	include/uapi/linux/seccomp.h
#	kernel/seccomp.c
#	tools/testing/selftests/seccomp/seccomp_bpf.c
diff --cc include/linux/seccomp.h
index 9687691799ff,e5320f6c8654..000000000000
--- a/include/linux/seccomp.h
+++ b/include/linux/seccomp.h
@@@ -3,7 -4,9 +3,13 @@@
  
  #include <uapi/linux/seccomp.h>
  
++<<<<<<< HEAD
 +#define SECCOMP_FILTER_FLAG_MASK	(SECCOMP_FILTER_FLAG_TSYNC)
++=======
+ #define SECCOMP_FILTER_FLAG_MASK	(SECCOMP_FILTER_FLAG_TSYNC	| \
+ 					 SECCOMP_FILTER_FLAG_LOG	| \
+ 					 SECCOMP_FILTER_FLAG_SPEC_ALLOW)
++>>>>>>> 00a02d0c502a (seccomp: Add filter flag to opt-out of SSB mitigation)
  
  #ifdef CONFIG_SECCOMP
  
diff --cc include/uapi/linux/seccomp.h
index 0f238a43ff1e,9efc0e73d50b..000000000000
--- a/include/uapi/linux/seccomp.h
+++ b/include/uapi/linux/seccomp.h
@@@ -11,11 -12,14 +11,17 @@@
  #define SECCOMP_MODE_FILTER	2 /* uses user-supplied filter. */
  
  /* Valid operations for seccomp syscall. */
 -#define SECCOMP_SET_MODE_STRICT		0
 -#define SECCOMP_SET_MODE_FILTER		1
 -#define SECCOMP_GET_ACTION_AVAIL	2
 +#define SECCOMP_SET_MODE_STRICT	0
 +#define SECCOMP_SET_MODE_FILTER	1
  
  /* Valid flags for SECCOMP_SET_MODE_FILTER */
++<<<<<<< HEAD
 +#define SECCOMP_FILTER_FLAG_TSYNC	1
++=======
+ #define SECCOMP_FILTER_FLAG_TSYNC	(1UL << 0)
+ #define SECCOMP_FILTER_FLAG_LOG		(1UL << 1)
+ #define SECCOMP_FILTER_FLAG_SPEC_ALLOW	(1UL << 2)
++>>>>>>> 00a02d0c502a (seccomp: Add filter flag to opt-out of SSB mitigation)
  
  /*
   * All BPF programs must return a 32-bit value.
diff --cc kernel/seccomp.c
index 42e55449c1a5,53eb946120c1..000000000000
--- a/kernel/seccomp.c
+++ b/kernel/seccomp.c
@@@ -236,8 -229,22 +236,9 @@@ static inline bool seccomp_may_assign_m
  	return true;
  }
  
 -/*
 - * If a given speculation mitigation is opt-in (prctl()-controlled),
 - * select it, by disabling speculation (enabling mitigation).
 - */
 -static inline void spec_mitigate(struct task_struct *task,
 -				 unsigned long which)
 -{
 -	int state = arch_prctl_spec_ctrl_get(task, which);
 -
 -	if (state > 0 && (state & PR_SPEC_PRCTL))
 -		arch_prctl_spec_ctrl_set(task, which, PR_SPEC_FORCE_DISABLE);
 -}
 -
  static inline void seccomp_assign_mode(struct task_struct *task,
- 				       unsigned long seccomp_mode)
+ 				       unsigned long seccomp_mode,
+ 				       unsigned long flags)
  {
  	assert_spin_locked(&task->sighand->siglock);
  
@@@ -247,6 -254,9 +248,12 @@@
  	 * filter) is set.
  	 */
  	smp_mb__before_atomic();
++<<<<<<< HEAD
++=======
+ 	/* Assume default seccomp processes want spec flaw mitigation. */
+ 	if ((flags & SECCOMP_FILTER_FLAG_SPEC_ALLOW) == 0)
+ 		spec_mitigate(task, PR_SPEC_STORE_BYPASS);
++>>>>>>> 00a02d0c502a (seccomp: Add filter flag to opt-out of SSB mitigation)
  	set_tsk_thread_flag(task, TIF_SECCOMP);
  }
  
@@@ -344,18 -364,9 +351,24 @@@ static inline void seccomp_sync_threads
  		 * equivalent (see ptrace_may_access), it is safe to
  		 * allow one thread to transition the other.
  		 */
++<<<<<<< HEAD
 +		if (thread->seccomp.mode == SECCOMP_MODE_DISABLED) {
 +			/*
 +			 * Don't let an unprivileged task work around
 +			 * the no_new_privs restriction by creating
 +			 * a thread that sets it up, enters seccomp,
 +			 * then dies.
 +			 */
 +			if (task_no_new_privs(caller))
 +				task_set_no_new_privs(thread);
 +
 +			seccomp_assign_mode(thread, SECCOMP_MODE_FILTER);
 +		}
++=======
+ 		if (thread->seccomp.mode == SECCOMP_MODE_DISABLED)
+ 			seccomp_assign_mode(thread, SECCOMP_MODE_FILTER,
+ 					    flags);
++>>>>>>> 00a02d0c502a (seccomp: Add filter flag to opt-out of SSB mitigation)
  	}
  }
  
* Unmerged path tools/testing/selftests/seccomp/seccomp_bpf.c
* Unmerged path include/linux/seccomp.h
* Unmerged path include/uapi/linux/seccomp.h
* Unmerged path kernel/seccomp.c
* Unmerged path tools/testing/selftests/seccomp/seccomp_bpf.c
