powerpc/pseries: Fix cpu hotplug crash with memoryless nodes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [powerpc] pseries: Fix cpu hotplug crash with memoryless nodes (Serhii Popovych) [1507765]
Rebuild_FUZZ: 92.86%
commit-author Michael Bringmann <mwb@linux.vnet.ibm.com>
commit e67e02a544e9a0d24b99eb383e808bb3433b048d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e67e02a5.failed

On powerpc systems with shared configurations of CPUs and memory and
memoryless nodes at boot, an event ordering problem was observed on a
SLES12 build platforms with the hot-add of CPUs to the memoryless
nodes.

* The most common error occurred when the memory SLAB driver attempted
  to reference the memoryless node to which a CPU was being added
  before the kernel had finished initializing all of the data
  structures for the CPU and exited 'device_online' under
  DLPAR/hot-add.

  Normally the memoryless node would be initialized through the call
  path device_online ... arch_update_cpu_topology ... find_cpu_nid ...
  try_online_node. This patch ensures that the powerpc node will be
  initialized as early as possible, even if it was memoryless and
  CPU-less at the point when we are trying to hot-add a new CPU to it.

	Signed-off-by: Michael Bringmann <mwb@linux.vnet.ibm.com>
	Reviewed-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit e67e02a544e9a0d24b99eb383e808bb3433b048d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/mm/numa.c
#	arch/powerpc/platforms/pseries/hotplug-cpu.c
diff --cc arch/powerpc/mm/numa.c
index 4542d324c7e4,314d19ab9385..000000000000
--- a/arch/powerpc/mm/numa.c
+++ b/arch/powerpc/mm/numa.c
@@@ -1491,6 -1198,42 +1491,45 @@@ static long vphn_get_associativity(unsi
  	return rc;
  }
  
++<<<<<<< HEAD
++=======
+ int find_and_online_cpu_nid(int cpu)
+ {
+ 	__be32 associativity[VPHN_ASSOC_BUFSIZE] = {0};
+ 	int new_nid;
+ 
+ 	/* Use associativity from first thread for all siblings */
+ 	vphn_get_associativity(cpu, associativity);
+ 	new_nid = associativity_to_nid(associativity);
+ 	if (new_nid < 0 || !node_possible(new_nid))
+ 		new_nid = first_online_node;
+ 
+ 	if (NODE_DATA(new_nid) == NULL) {
+ #ifdef CONFIG_MEMORY_HOTPLUG
+ 		/*
+ 		 * Need to ensure that NODE_DATA is initialized for a node from
+ 		 * available memory (see memblock_alloc_try_nid). If unable to
+ 		 * init the node, then default to nearest node that has memory
+ 		 * installed.
+ 		 */
+ 		if (try_online_node(new_nid))
+ 			new_nid = first_online_node;
+ #else
+ 		/*
+ 		 * Default to using the nearest node that has memory installed.
+ 		 * Otherwise, it would be necessary to patch the kernel MM code
+ 		 * to deal with more memoryless-node error conditions.
+ 		 */
+ 		new_nid = first_online_node;
+ #endif
+ 	}
+ 
+ 	pr_debug("%s:%d cpu %d nid %d\n", __FUNCTION__, __LINE__,
+ 		cpu, new_nid);
+ 	return new_nid;
+ }
+ 
++>>>>>>> e67e02a544e9 (powerpc/pseries: Fix cpu hotplug crash with memoryless nodes)
  /*
   * Update the CPU maps and sysfs entries for a single CPU when its NUMA
   * characteristics change. This function doesn't perform any locking and is
diff --cc arch/powerpc/platforms/pseries/hotplug-cpu.c
index e23dfb5cbbc1,dceb51454d8d..000000000000
--- a/arch/powerpc/platforms/pseries/hotplug-cpu.c
+++ b/arch/powerpc/platforms/pseries/hotplug-cpu.c
@@@ -340,7 -340,7 +340,11 @@@ static void pseries_remove_processor(st
  	cpu_maps_update_done();
  }
  
++<<<<<<< HEAD
 +#ifdef CONFIG_ARCH_CPU_PROBE_RELEASE
++=======
+ extern int find_and_online_cpu_nid(int cpu);
++>>>>>>> e67e02a544e9 (powerpc/pseries: Fix cpu hotplug crash with memoryless nodes)
  
  static int dlpar_online_cpu(struct device_node *dn)
  {
@@@ -365,6 -365,8 +369,11 @@@
  			BUG_ON(get_cpu_current_state(cpu)
  					!= CPU_STATE_OFFLINE);
  			cpu_maps_update_done();
++<<<<<<< HEAD
++=======
+ 			timed_topology_update(1);
+ 			find_and_online_cpu_nid(cpu);
++>>>>>>> e67e02a544e9 (powerpc/pseries: Fix cpu hotplug crash with memoryless nodes)
  			rc = device_online(get_cpu_device(cpu));
  			if (rc)
  				goto out;
* Unmerged path arch/powerpc/mm/numa.c
* Unmerged path arch/powerpc/platforms/pseries/hotplug-cpu.c
