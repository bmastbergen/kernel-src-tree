watchdog: core: Fix devres_alloc() allocation size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [watchdog] core: Fix devres_alloc() allocation size (David Arcari) [1576173]
Rebuild_FUZZ: 88.89%
commit-author Guenter Roeck <linux@roeck-us.net>
commit 2e91838bf7ffdedabdb29e091207d6531d04ef4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2e91838b.failed

Coverity reports:

Passing argument 152UL /* sizeof (*wdd) */ to function __devres_alloc_node
and then casting the return value to struct watchdog_device ** is
suspicious.

Allocation size needs to be sizeof(*rcwdd), not sizeof(*wdd).

Fixes: 83fbae5a148c ("watchdog: Add a device managed API for ...")
	Cc: Neil Armstrong <narmstrong@baylibre.com>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Acked-by: Neil Armstrong <narmstrong@baylibre.com>
	Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
(cherry picked from commit 2e91838bf7ffdedabdb29e091207d6531d04ef4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/watchdog/watchdog_core.c
diff --cc drivers/watchdog/watchdog_core.c
index 00a3c625fda8,74265b2f806c..000000000000
--- a/drivers/watchdog/watchdog_core.c
+++ b/drivers/watchdog/watchdog_core.c
@@@ -267,6 -329,43 +267,46 @@@ void watchdog_unregister_device(struct 
  
  EXPORT_SYMBOL_GPL(watchdog_unregister_device);
  
++<<<<<<< HEAD
++=======
+ static void devm_watchdog_unregister_device(struct device *dev, void *res)
+ {
+ 	watchdog_unregister_device(*(struct watchdog_device **)res);
+ }
+ 
+ /**
+  * devm_watchdog_register_device() - resource managed watchdog_register_device()
+  * @dev: device that is registering this watchdog device
+  * @wdd: watchdog device
+  *
+  * Managed watchdog_register_device(). For watchdog device registered by this
+  * function,  watchdog_unregister_device() is automatically called on driver
+  * detach. See watchdog_register_device() for more information.
+  */
+ int devm_watchdog_register_device(struct device *dev,
+ 				struct watchdog_device *wdd)
+ {
+ 	struct watchdog_device **rcwdd;
+ 	int ret;
+ 
+ 	rcwdd = devres_alloc(devm_watchdog_unregister_device, sizeof(*rcwdd),
+ 			     GFP_KERNEL);
+ 	if (!rcwdd)
+ 		return -ENOMEM;
+ 
+ 	ret = watchdog_register_device(wdd);
+ 	if (!ret) {
+ 		*rcwdd = wdd;
+ 		devres_add(dev, rcwdd);
+ 	} else {
+ 		devres_free(rcwdd);
+ 	}
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(devm_watchdog_register_device);
+ 
++>>>>>>> 2e91838bf7ff (watchdog: core: Fix devres_alloc() allocation size)
  static int __init watchdog_deferred_registration(void)
  {
  	mutex_lock(&wtd_deferred_reg_mutex);
* Unmerged path drivers/watchdog/watchdog_core.c
