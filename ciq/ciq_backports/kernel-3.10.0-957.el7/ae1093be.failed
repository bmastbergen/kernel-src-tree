dm snapshot: use mutex instead of rw_semaphore

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mikulas Patocka <mpatocka@redhat.com>
commit ae1093be5a0ef997833e200a0dafb9ed0b1ff4fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ae1093be.failed

The rw_semaphore is acquired for read only in two places, neither is
performance-critical.  So replace it with a mutex -- which is more
efficient.

	Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit ae1093be5a0ef997833e200a0dafb9ed0b1ff4fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-snap.c
diff --cc drivers/md/dm-snap.c
index 2cc2e2ca8766,216035be5661..000000000000
--- a/drivers/md/dm-snap.c
+++ b/drivers/md/dm-snap.c
@@@ -1694,10 -1696,11 +1696,10 @@@ static int snapshot_map(struct dm_targe
  
  	/* FIXME: should only take write lock if we need
  	 * to copy an exception */
- 	down_write(&s->lock);
+ 	mutex_lock(&s->lock);
  
 -	if (!s->valid || (unlikely(s->snapshot_overflowed) &&
 -	    bio_data_dir(bio) == WRITE)) {
 -		r = DM_MAPIO_KILL;
 +	if (!s->valid || (unlikely(s->snapshot_overflowed) && bio_rw(bio) == WRITE)) {
 +		r = -EIO;
  		goto out_unlock;
  	}
  
@@@ -1713,12 -1716,12 +1715,12 @@@
  	 * flags so we should only get this if we are
  	 * writeable.
  	 */
 -	if (bio_data_dir(bio) == WRITE) {
 +	if (bio_rw(bio) == WRITE) {
  		pe = __lookup_pending_exception(s, chunk);
  		if (!pe) {
- 			up_write(&s->lock);
+ 			mutex_unlock(&s->lock);
  			pe = alloc_pending_exception(s);
- 			down_write(&s->lock);
+ 			mutex_lock(&s->lock);
  
  			if (!s->valid || s->snapshot_overflowed) {
  				free_pending_exception(pe);
@@@ -1750,9 -1753,10 +1752,9 @@@
  		r = DM_MAPIO_SUBMITTED;
  
  		if (!pe->started &&
 -		    bio->bi_iter.bi_size ==
 -		    (s->store->chunk_size << SECTOR_SHIFT)) {
 +		    bio->bi_size == (s->store->chunk_size << SECTOR_SHIFT)) {
  			pe->started = 1;
- 			up_write(&s->lock);
+ 			mutex_unlock(&s->lock);
  			start_full_bio(pe, bio);
  			goto out;
  		}
@@@ -1806,9 -1810,9 +1808,9 @@@ static int snapshot_merge_map(struct dm
  		return DM_MAPIO_REMAPPED;
  	}
  
 -	chunk = sector_to_chunk(s->store, bio->bi_iter.bi_sector);
 +	chunk = sector_to_chunk(s->store, bio->bi_sector);
  
- 	down_write(&s->lock);
+ 	mutex_lock(&s->lock);
  
  	/* Full merging snapshots are redirected to the origin */
  	if (!s->valid)
@@@ -1836,10 -1840,10 +1838,15 @@@
  	}
  
  redirect_to_origin:
 -	bio_set_dev(bio, s->origin->bdev);
 +	bio->bi_bdev = s->origin->bdev;
  
++<<<<<<< HEAD
 +	if (bio_rw(bio) == WRITE) {
 +		up_write(&s->lock);
++=======
+ 	if (bio_data_dir(bio) == WRITE) {
+ 		mutex_unlock(&s->lock);
++>>>>>>> ae1093be5a0e (dm snapshot: use mutex instead of rw_semaphore)
  		return do_origin(s->origin, bio);
  	}
  
* Unmerged path drivers/md/dm-snap.c
