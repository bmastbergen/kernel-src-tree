drm/nouveau/gr/gf100-: implement another chunk of bios-provided init

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 0f78acc86bbfc60cdaffd4eb03e4a35b28397cbb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0f78acc8.failed

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 0f78acc86bbfc60cdaffd4eb03e4a35b28397cbb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
index 5d64fed84507,01b903acde4a..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
@@@ -1945,20 -1962,45 +1945,39 @@@ gf100_gr_init(struct gf100_gr *gr
  	nvkm_wr32(device, GPC_BCAST(0x0988), data[2]);
  	nvkm_wr32(device, GPC_BCAST(0x098c), data[3]);
  
 -	nvkm_wr32(device, GPC_BCAST(0x1bd4), magicgpc918);
 -}
 -
 -void
 -gf100_gr_init_vsc_stream_master(struct gf100_gr *gr)
 -{
 -	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	nvkm_mask(device, TPC_UNIT(0, 0, 0x05c), 0x00000001, 0x00000001);
 -}
 -
 -int
 -gf100_gr_init(struct gf100_gr *gr)
 -{
 -	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	int gpc, tpc, rop;
 -
 -	gr->func->init_gpc_mmu(gr);
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 +			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 +							 gr->tpc_total);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 +	}
  
 -	if (gr->fuc_sw_nonctx)
 -		gf100_gr_mmio(gr, gr->fuc_sw_nonctx);
 +	if (device->chipset != 0xd7)
 +		nvkm_wr32(device, GPC_BCAST(0x1bd4), magicgpc918);
  	else
 -		gf100_gr_mmio(gr, gr->func->mmio);
 +		nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
  
++<<<<<<< HEAD
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
++=======
+ 	if (gr->func->init_r405a14)
+ 		gr->func->init_r405a14(gr);
+ 
+ 	if (gr->func->clkgate_pack)
+ 		nvkm_therm_clkgate_init(device->therm, gr->func->clkgate_pack);
+ 
+ 	if (gr->func->init_bios)
+ 		gr->func->init_bios(gr);
+ 
+ 	gr->func->init_vsc_stream_master(gr);
+ 	gr->func->init_zcull(gr);
+ 	gr->func->init_num_active_ltcs(gr);
+ 	if (gr->func->init_rop_active_fbps)
+ 		gr->func->init_rop_active_fbps(gr);
+ 	if (gr->func->init_bios_2)
+ 		gr->func->init_bios_2(gr);
++>>>>>>> 0f78acc86bbf (drm/nouveau/gr/gf100-: implement another chunk of bios-provided init)
  
  	nvkm_wr32(device, 0x400500, 0x00010001);
  
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
index a36e45a4a635..429a2d96e557 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
@@ -123,6 +123,7 @@ struct gf100_gr_func {
 	int (*init)(struct gf100_gr *);
 	void (*init_gpc_mmu)(struct gf100_gr *);
 	void (*init_rop_active_fbps)(struct gf100_gr *);
+	void (*init_bios_2)(struct gf100_gr *);
 	void (*init_ppc_exceptions)(struct gf100_gr *);
 	void (*init_swdx_pes_mask)(struct gf100_gr *);
 	void (*init_num_active_ltcs)(struct gf100_gr *);
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
index 2c67fac576d1..96dfcf82e764 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
@@ -25,6 +25,8 @@
 #include "ctxgf100.h"
 
 #include <subdev/bios.h>
+#include <subdev/bios/bit.h>
+#include <subdev/bios/init.h>
 #include <subdev/bios/P0260.h>
 #include <subdev/fb.h>
 
@@ -279,6 +281,31 @@ gm107_gr_pack_mmio[] = {
  * PGRAPH engine/subdev functions
  ******************************************************************************/
 
+static void
+gm107_gr_init_bios_2(struct gf100_gr *gr)
+{
+	struct nvkm_subdev *subdev = &gr->base.engine.subdev;
+	struct nvkm_device *device = subdev->device;
+	struct nvkm_bios *bios = device->bios;
+	struct bit_entry bit_P;
+	if (!bit_entry(bios, 'P', &bit_P) &&
+	    bit_P.version == 2 && bit_P.length >= 0x2c) {
+		u32 data = nvbios_rd32(bios, bit_P.offset + 0x28);
+		if (data) {
+			u8 ver = nvbios_rd08(bios, data + 0x00);
+			u8 hdr = nvbios_rd08(bios, data + 0x01);
+			if (ver == 0x20 && hdr >= 8) {
+				data = nvbios_rd32(bios, data + 0x04);
+				if (data) {
+					u32 save = nvkm_rd32(device, 0x619444);
+					nvbios_init(subdev, data);
+					nvkm_wr32(device, 0x619444, save);
+				}
+			}
+		}
+	}
+}
+
 void
 gm107_gr_init_bios(struct gf100_gr *gr)
 {
@@ -443,6 +470,7 @@ static const struct gf100_gr_func
 gm107_gr = {
 	.init = gm107_gr_init,
 	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
+	.init_bios_2 = gm107_gr_init_bios_2,
 	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 	.mmio = gm107_gr_pack_mmio,
 	.fecs.ucode = &gm107_gr_fecs_ucode,
