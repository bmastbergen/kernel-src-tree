s390/perf: define common DWARF register string table

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
commit a9fc2db0a8abf51c81122799c5ae4808f2324b6d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a9fc2db0.failed

Instead of defining DWARF register to string table in dwarf-regs-table.h
and dwarf-regs.c, use a common table in dwarf-regs-table.h.

Ensure that the DWARF register table is up-to-date with
http://refspecs.linuxfoundation.org/ELF/zSeries/lzsabi0_s390/x1542.html.

For unwinding with libdw, also ensure to correctly setup the DWARF
register frame according to the register mappings.  Currently, libdw
supports up to 32 registers only.

	Suggested-by: Thomas Richter <tmricht@linux.vnet.ibm.com>
	Signed-off-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
Reviewed-and-tested-by: Thomas Richter <tmricht@linux.vnet.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit a9fc2db0a8abf51c81122799c5ae4808f2324b6d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/s390/include/dwarf-regs-table.h
diff --cc tools/perf/arch/s390/include/dwarf-regs-table.h
index 9da74a933bd6,671553525f41..000000000000
--- a/tools/perf/arch/s390/include/dwarf-regs-table.h
+++ b/tools/perf/arch/s390/include/dwarf-regs-table.h
@@@ -1,8 -1,72 +1,75 @@@
- #ifdef DEFINE_DWARF_REGSTR_TABLE
- /* This is included in perf/util/dwarf-regs.c */
++<<<<<<< HEAD
++=======
+ /* SPDX-License-Identifier: GPL-2.0 */
+ #ifndef S390_DWARF_REGS_TABLE_H
+ #define S390_DWARF_REGS_TABLE_H
  
- static const char * const s390_regstr_tbl[] = {
+ #define REG_DWARFNUM_NAME(reg, idx)	[idx] = "%" #reg
+ 
+ /*
+  * For reference, see DWARF register mapping:
+  * http://refspecs.linuxfoundation.org/ELF/zSeries/lzsabi0_s390/x1542.html
+  */
+ static const char * const s390_dwarf_regs[] = {
  	"%r0", "%r1",  "%r2",  "%r3",  "%r4",  "%r5",  "%r6",  "%r7",
  	"%r8", "%r9", "%r10", "%r11", "%r12", "%r13", "%r14", "%r15",
+ 	REG_DWARFNUM_NAME(f0, 16),
+ 	REG_DWARFNUM_NAME(f1, 20),
+ 	REG_DWARFNUM_NAME(f2, 17),
+ 	REG_DWARFNUM_NAME(f3, 21),
+ 	REG_DWARFNUM_NAME(f4, 18),
+ 	REG_DWARFNUM_NAME(f5, 22),
+ 	REG_DWARFNUM_NAME(f6, 19),
+ 	REG_DWARFNUM_NAME(f7, 23),
+ 	REG_DWARFNUM_NAME(f8, 24),
+ 	REG_DWARFNUM_NAME(f9, 28),
+ 	REG_DWARFNUM_NAME(f10, 25),
+ 	REG_DWARFNUM_NAME(f11, 29),
+ 	REG_DWARFNUM_NAME(f12, 26),
+ 	REG_DWARFNUM_NAME(f13, 30),
+ 	REG_DWARFNUM_NAME(f14, 27),
+ 	REG_DWARFNUM_NAME(f15, 31),
+ 	REG_DWARFNUM_NAME(c0, 32),
+ 	REG_DWARFNUM_NAME(c1, 33),
+ 	REG_DWARFNUM_NAME(c2, 34),
+ 	REG_DWARFNUM_NAME(c3, 35),
+ 	REG_DWARFNUM_NAME(c4, 36),
+ 	REG_DWARFNUM_NAME(c5, 37),
+ 	REG_DWARFNUM_NAME(c6, 38),
+ 	REG_DWARFNUM_NAME(c7, 39),
+ 	REG_DWARFNUM_NAME(c8, 40),
+ 	REG_DWARFNUM_NAME(c9, 41),
+ 	REG_DWARFNUM_NAME(c10, 42),
+ 	REG_DWARFNUM_NAME(c11, 43),
+ 	REG_DWARFNUM_NAME(c12, 44),
+ 	REG_DWARFNUM_NAME(c13, 45),
+ 	REG_DWARFNUM_NAME(c14, 46),
+ 	REG_DWARFNUM_NAME(c15, 47),
+ 	REG_DWARFNUM_NAME(a0, 48),
+ 	REG_DWARFNUM_NAME(a1, 49),
+ 	REG_DWARFNUM_NAME(a2, 50),
+ 	REG_DWARFNUM_NAME(a3, 51),
+ 	REG_DWARFNUM_NAME(a4, 52),
+ 	REG_DWARFNUM_NAME(a5, 53),
+ 	REG_DWARFNUM_NAME(a6, 54),
+ 	REG_DWARFNUM_NAME(a7, 55),
+ 	REG_DWARFNUM_NAME(a8, 56),
+ 	REG_DWARFNUM_NAME(a9, 57),
+ 	REG_DWARFNUM_NAME(a10, 58),
+ 	REG_DWARFNUM_NAME(a11, 59),
+ 	REG_DWARFNUM_NAME(a12, 60),
+ 	REG_DWARFNUM_NAME(a13, 61),
+ 	REG_DWARFNUM_NAME(a14, 62),
+ 	REG_DWARFNUM_NAME(a15, 63),
+ 	REG_DWARFNUM_NAME(pswm, 64),
+ 	REG_DWARFNUM_NAME(pswa, 65),
  };
- #endif
+ 
++>>>>>>> a9fc2db0a8ab (s390/perf: define common DWARF register string table)
+ #ifdef DEFINE_DWARF_REGSTR_TABLE
+ /* This is included in perf/util/dwarf-regs.c */
+ 
+ #define s390_regstr_tbl s390_dwarf_regs
+ 
+ #endif	/* DEFINE_DWARF_REGSTR_TABLE */
+ #endif	/* S390_DWARF_REGS_TABLE_H */
* Unmerged path tools/perf/arch/s390/include/dwarf-regs-table.h
diff --git a/tools/perf/arch/s390/util/dwarf-regs.c b/tools/perf/arch/s390/util/dwarf-regs.c
index 039b75af61f2..ea717330efb8 100644
--- a/tools/perf/arch/s390/util/dwarf-regs.c
+++ b/tools/perf/arch/s390/util/dwarf-regs.c
@@ -8,19 +8,10 @@
 
 #include <stddef.h>
 #include <dwarf-regs.h>
-
-#define NUM_GPRS 16
-
-static const char *gpr_names[NUM_GPRS] = {
-	"%r0", "%r1",  "%r2",  "%r3",  "%r4",  "%r5",  "%r6",  "%r7",
-	"%r8", "%r9", "%r10", "%r11", "%r12", "%r13", "%r14", "%r15",
-};
+#include <linux/kernel.h>
+#include "dwarf-regs-table.h"
 
 const char *get_arch_regstr(unsigned int n)
 {
-	if (n == 64)
-		return "mask";
-	if (n == 65)
-		return "pc";
-	return (n >= NUM_GPRS) ? NULL : gpr_names[n];
+	return (n >= ARRAY_SIZE(s390_dwarf_regs)) ? NULL : s390_dwarf_regs[n];
 }
diff --git a/tools/perf/arch/s390/util/unwind-libdw.c b/tools/perf/arch/s390/util/unwind-libdw.c
index 281bbb82402a..ba8d98b8b09e 100644
--- a/tools/perf/arch/s390/util/unwind-libdw.c
+++ b/tools/perf/arch/s390/util/unwind-libdw.c
@@ -1,21 +1,26 @@
+#include <linux/kernel.h>
 #include <elfutils/libdwfl.h>
 #include "../../util/unwind-libdw.h"
 #include "../../util/perf_regs.h"
 #include "../../util/event.h"
+#include "dwarf-regs-table.h"
 
 
 bool libdw__arch_set_initial_registers(Dwfl_Thread *thread, void *arg)
 {
 	struct unwind_info *ui = arg;
 	struct regs_dump *user_regs = &ui->sample->user_regs;
-	Dwarf_Word dwarf_regs[PERF_REG_S390_MAX];
+	Dwarf_Word dwarf_regs[ARRAY_SIZE(s390_dwarf_regs)];
 
 #define REG(r) ({						\
 	Dwarf_Word val = 0;					\
 	perf_reg_value(&val, user_regs, PERF_REG_S390_##r);	\
 	val;							\
 })
-
+	/*
+	 * For DWARF register mapping details,
+	 * see also perf/arch/s390/include/dwarf-regs-table.h
+	 */
 	dwarf_regs[0]  = REG(R0);
 	dwarf_regs[1]  = REG(R1);
 	dwarf_regs[2]  = REG(R2);
@@ -32,9 +37,9 @@ bool libdw__arch_set_initial_registers(Dwfl_Thread *thread, void *arg)
 	dwarf_regs[13] = REG(R13);
 	dwarf_regs[14] = REG(R14);
 	dwarf_regs[15] = REG(R15);
-	dwarf_regs[16] = REG(MASK);
-	dwarf_regs[17] = REG(PC);
+	dwarf_regs[64] = REG(MASK);
+	dwarf_regs[65] = REG(PC);
 
-	dwfl_thread_state_register_pc(thread, dwarf_regs[17]);
+	dwfl_thread_state_register_pc(thread, dwarf_regs[65]);
 	return dwfl_thread_state_registers(thread, 0, 16, dwarf_regs);
 }
