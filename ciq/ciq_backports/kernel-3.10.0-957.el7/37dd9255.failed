vlan: Pass ethtool get_ts_info queries to real device.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] vlan: Pass ethtool get_ts_info queries to real device (Hangbin Liu) [1520356]
Rebuild_FUZZ: 99.07%
commit-author Richard Cochran <richardcochran@gmail.com>
commit 37dd9255b2f6201195946014600a8d857f846cf4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/37dd9255.failed

Commit a6111d3c "vlan: Pass SIOC[SG]HWTSTAMP ioctls to real device"
intended to enable hardware time stamping on VLAN interfaces, but
passing SIOCSHWTSTAMP is only half of the story. This patch adds
the second half, by letting user space find out the time stamping
capabilities of the device backing a VLAN interface.

	Signed-off-by: Richard Cochran <richardcochran@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 37dd9255b2f6201195946014600a8d857f846cf4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/8021q/vlan_dev.c
diff --cc net/8021q/vlan_dev.c
index 2263629b4910,376805005cc7..000000000000
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@@ -684,41 -670,56 +685,62 @@@ static void vlan_ethtool_get_drvinfo(st
  	strlcpy(info->fw_version, "N/A", sizeof(info->fw_version));
  }
  
++<<<<<<< HEAD
 +static void vlan_dev_get_stats64(struct net_device *dev,
 +				 struct rtnl_link_stats64 *stats)
++=======
+ static int vlan_ethtool_get_ts_info(struct net_device *dev,
+ 				    struct ethtool_ts_info *info)
+ {
+ 	const struct vlan_dev_priv *vlan = vlan_dev_priv(dev);
+ 	const struct ethtool_ops *ops = vlan->real_dev->ethtool_ops;
+ 
+ 	if (ops->get_ts_info) {
+ 		return ops->get_ts_info(vlan->real_dev, info);
+ 	} else {
+ 		info->so_timestamping = SOF_TIMESTAMPING_RX_SOFTWARE |
+ 			SOF_TIMESTAMPING_SOFTWARE;
+ 		info->phc_index = -1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static struct rtnl_link_stats64 *vlan_dev_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 -{
 -	struct vlan_pcpu_stats *p;
 -	u32 rx_errors = 0, tx_dropped = 0;
 -	int i;
 -
 -	for_each_possible_cpu(i) {
 -		u64 rxpackets, rxbytes, rxmulticast, txpackets, txbytes;
 -		unsigned int start;
 -
 -		p = per_cpu_ptr(vlan_dev_priv(dev)->vlan_pcpu_stats, i);
 -		do {
 -			start = u64_stats_fetch_begin_irq(&p->syncp);
 -			rxpackets	= p->rx_packets;
 -			rxbytes		= p->rx_bytes;
 -			rxmulticast	= p->rx_multicast;
 -			txpackets	= p->tx_packets;
 -			txbytes		= p->tx_bytes;
 -		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
 -
 -		stats->rx_packets	+= rxpackets;
 -		stats->rx_bytes		+= rxbytes;
 -		stats->multicast	+= rxmulticast;
 -		stats->tx_packets	+= txpackets;
 -		stats->tx_bytes		+= txbytes;
 -		/* rx_errors & tx_dropped are u32 */
 -		rx_errors	+= p->rx_errors;
 -		tx_dropped	+= p->tx_dropped;
++>>>>>>> 37dd9255b2f6 (vlan: Pass ethtool get_ts_info queries to real device.)
 +{
 +
 +	if (vlan_dev_priv(dev)->vlan_pcpu_stats) {
 +		struct vlan_pcpu_stats *p;
 +		u32 rx_errors = 0, tx_dropped = 0;
 +		int i;
 +
 +		for_each_possible_cpu(i) {
 +			u64 rxpackets, rxbytes, rxmulticast, txpackets, txbytes;
 +			unsigned int start;
 +
 +			p = per_cpu_ptr(vlan_dev_priv(dev)->vlan_pcpu_stats, i);
 +			do {
 +				start = u64_stats_fetch_begin_irq(&p->syncp);
 +				rxpackets	= p->rx_packets;
 +				rxbytes		= p->rx_bytes;
 +				rxmulticast	= p->rx_multicast;
 +				txpackets	= p->tx_packets;
 +				txbytes		= p->tx_bytes;
 +			} while (u64_stats_fetch_retry_irq(&p->syncp, start));
 +
 +			stats->rx_packets	+= rxpackets;
 +			stats->rx_bytes		+= rxbytes;
 +			stats->multicast	+= rxmulticast;
 +			stats->tx_packets	+= txpackets;
 +			stats->tx_bytes		+= txbytes;
 +			/* rx_errors & tx_dropped are u32 */
 +			rx_errors	+= p->rx_errors;
 +			tx_dropped	+= p->tx_dropped;
 +		}
 +		stats->rx_errors  = rx_errors;
 +		stats->tx_dropped = tx_dropped;
  	}
 -	stats->rx_errors  = rx_errors;
 -	stats->tx_dropped = tx_dropped;
 -
 -	return stats;
  }
  
  #ifdef CONFIG_NET_POLL_CONTROLLER
@@@ -766,17 -766,11 +788,18 @@@ static void vlan_dev_netpoll_cleanup(st
  }
  #endif /* CONFIG_NET_POLL_CONTROLLER */
  
 +static int vlan_dev_get_iflink(const struct net_device *dev)
 +{
 +	struct net_device *real_dev = vlan_dev_priv(dev)->real_dev;
 +
 +	return real_dev->ifindex;
 +}
 +
  static const struct ethtool_ops vlan_ethtool_ops = {
 -	.get_settings	        = vlan_ethtool_get_settings,
 +	.get_link_ksettings	= vlan_ethtool_get_link_ksettings,
  	.get_drvinfo	        = vlan_ethtool_get_drvinfo,
  	.get_link		= ethtool_op_get_link,
+ 	.get_ts_info		= vlan_ethtool_get_ts_info,
  };
  
  static const struct net_device_ops vlan_netdev_ops = {
* Unmerged path net/8021q/vlan_dev.c
