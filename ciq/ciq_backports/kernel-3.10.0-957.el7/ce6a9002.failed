platform/x86: Add driver to force WMI Thunderbolt controller power status

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: Add driver to force WMI Thunderbolt controller power status (Jarod Wilson) [1495229]
Rebuild_FUZZ: 93.43%
commit-author Mario Limonciello <mario.limonciello@dell.com>
commit ce6a90027c10f970f872de5db0294f9e3e969f1c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ce6a9002.failed

Current implementations of Intel Thunderbolt controllers will go
into a low power mode when not in use.

Many machines containing these controllers also have a GPIO wired up
that can force the controller awake.  This is offered via a ACPI-WMI
interface intended to be manipulated by a userspace utility.

This mechanism is provided by Intel to OEMs to include in BIOS.
It uses an industry wide GUID that is populated in a separate _WDG
entry with no binary MOF.

This interface allows software such as fwupd to wake up thunderbolt
controllers to query the firmware version or flash new firmware.

	Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
	Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Reviewed-by: Yehezkel Bernat <yehezkel.bernat@intel.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
[andy fixed merge conflicts and bump kernel version for ABI]
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
(cherry picked from commit ce6a90027c10f970f872de5db0294f9e3e969f1c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/thunderbolt.rst
#	MAINTAINERS
#	drivers/platform/x86/Kconfig
#	drivers/platform/x86/Makefile
diff --cc MAINTAINERS
index 28d01d76d545,a6a5746ced9d..000000000000
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@@ -4507,12 -7036,75 +4507,81 @@@ L:	linux-wireless@vger.kernel.or
  S:	Maintained
  F:	Documentation/networking/README.ipw2100
  F:	Documentation/networking/README.ipw2200
++<<<<<<< HEAD
 +F:	drivers/net/wireless/ipw2x00/
++=======
+ F:	drivers/net/wireless/intel/ipw2x00/
+ 
+ INTEL PSTATE DRIVER
+ M:	Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
+ M:	Len Brown <lenb@kernel.org>
+ L:	linux-pm@vger.kernel.org
+ S:	Supported
+ F:	drivers/cpufreq/intel_pstate.c
+ 
+ INTEL RDMA RNIC DRIVER
+ M:	Faisal Latif <faisal.latif@intel.com>
+ M:	Shiraz Saleem <shiraz.saleem@intel.com>
+ L:	linux-rdma@vger.kernel.org
+ S:	Supported
+ F:	drivers/infiniband/hw/i40iw/
+ 
+ INTEL TELEMETRY DRIVER
+ M:	Souvik Kumar Chakravarty <souvik.k.chakravarty@intel.com>
+ L:	platform-driver-x86@vger.kernel.org
+ S:	Maintained
+ F:	arch/x86/include/asm/intel_telemetry.h
+ F:	drivers/platform/x86/intel_telemetry*
+ 
+ INTEL VIRTUAL BUTTON DRIVER
+ M:	AceLan Kao <acelan.kao@canonical.com>
+ L:	platform-driver-x86@vger.kernel.org
+ S:	Maintained
+ F:	drivers/platform/x86/intel-vbtn.c
+ 
+ INTEL WIRELESS 3945ABG/BG, 4965AGN (iwlegacy)
+ M:	Stanislaw Gruszka <sgruszka@redhat.com>
+ L:	linux-wireless@vger.kernel.org
+ S:	Supported
+ F:	drivers/net/wireless/intel/iwlegacy/
+ 
+ INTEL WIRELESS WIFI LINK (iwlwifi)
+ M:	Johannes Berg <johannes.berg@intel.com>
+ M:	Emmanuel Grumbach <emmanuel.grumbach@intel.com>
+ M:	Luca Coelho <luciano.coelho@intel.com>
+ M:	Intel Linux Wireless <linuxwifi@intel.com>
+ L:	linux-wireless@vger.kernel.org
+ W:	http://intellinuxwireless.org
+ T:	git git://git.kernel.org/pub/scm/linux/kernel/git/iwlwifi/iwlwifi.git
+ S:	Supported
+ F:	drivers/net/wireless/intel/iwlwifi/
+ 
+ INTEL WIRELESS WIMAX CONNECTION 2400
+ M:	Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com>
+ M:	linux-wimax@intel.com
+ L:	wimax@linuxwimax.org (subscribers-only)
+ S:	Supported
+ W:	http://linuxwimax.org
+ F:	Documentation/wimax/README.i2400m
+ F:	drivers/net/wimax/i2400m/
+ F:	include/uapi/linux/wimax/i2400m.h
+ 
+ INTEL WMI THUNDERBOLT FORCE POWER DRIVER
+ M:	Mario Limonciello <mario.limonciello@dell.com>
+ S:	Maintained
+ F:	drivers/platform/x86/intel-wmi-thunderbolt.c
+ 
+ INTEL(R) TRACE HUB
+ M:	Alexander Shishkin <alexander.shishkin@linux.intel.com>
+ S:	Supported
+ F:	Documentation/trace/intel_th.txt
+ F:	drivers/hwtracing/intel_th/
++>>>>>>> ce6a90027c10 (platform/x86: Add driver to force WMI Thunderbolt controller power status)
  
  INTEL(R) TRUSTED EXECUTION TECHNOLOGY (TXT)
 -M:	Ning Sun <ning.sun@intel.com>
 +M:	Richard L Maliszewski <richard.l.maliszewski@intel.com>
 +M:	Gang Wei <gang.wei@intel.com>
 +M:	Shane Wang <shane.wang@intel.com>
  L:	tboot-devel@lists.sourceforge.net
  W:	http://tboot.sourceforge.net
  T:	hg http://tboot.hg.sourceforge.net:8000/hgroot/tboot/tboot
diff --cc drivers/platform/x86/Kconfig
index cd2842518f6d,f401ae463e9b..000000000000
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@@ -608,6 -646,31 +608,34 @@@ config ACPI_WM
  	  It is safe to enable this driver even if your DSDT doesn't define
  	  any ACPI-WMI devices.
  
++<<<<<<< HEAD
++=======
+ config WMI_BMOF
+ 	tristate "WMI embedded Binary MOF driver"
+ 	depends on ACPI_WMI
+ 	default ACPI_WMI
+ 	---help---
+ 	  Say Y here if you want to be able to read a firmware-embedded
+ 	  WMI Binary MOF data. Using this requires userspace tools and may be
+ 	  rather tedious.
+ 
+ 	  To compile this driver as a module, choose M here: the module will
+ 	  be called wmi-bmof.
+ 
+ config INTEL_WMI_THUNDERBOLT
+ 	tristate "Intel WMI thunderbolt force power driver"
+ 	depends on ACPI_WMI
+ 	default ACPI_WMI
+ 	---help---
+ 	  Say Y here if you want to be able to use the WMI interface on select
+ 	  systems to force the power control of Intel Thunderbolt controllers.
+ 	  This is useful for updating the firmware when devices are not plugged
+ 	  into the controller.
+ 
+ 	  To compile this driver as a module, choose M here: the module will
+ 	  be called intel-wmi-thunderbolt.
+ 
++>>>>>>> ce6a90027c10 (platform/x86: Add driver to force WMI Thunderbolt controller power status)
  config MSI_WMI
  	tristate "MSI WMI extras"
  	depends on ACPI_WMI
diff --cc drivers/platform/x86/Makefile
index 10e380206af4,2b315d0df3b7..000000000000
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@@ -33,7 -35,11 +33,12 @@@ obj-$(CONFIG_PANASONIC_LAPTOP)	+= panas
  obj-$(CONFIG_INTEL_MENLOW)	+= intel_menlow.o
  obj-$(CONFIG_ACPI_WMI)		+= wmi.o
  obj-$(CONFIG_MSI_WMI)		+= msi-wmi.o
 -obj-$(CONFIG_PEAQ_WMI)		+= peaq-wmi.o
 -obj-$(CONFIG_SURFACE3_WMI)	+= surface3-wmi.o
  obj-$(CONFIG_TOPSTAR_LAPTOP)	+= topstar-laptop.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_WMI_BMOF)		+= wmi-bmof.o
+ obj-$(CONFIG_INTEL_WMI_THUNDERBOLT)	+= intel-wmi-thunderbolt.o
++>>>>>>> ce6a90027c10 (platform/x86: Add driver to force WMI Thunderbolt controller power status)
  
  # toshiba_acpi must link after wmi to ensure that wmi devices are found
  # before toshiba_acpi initializes
* Unmerged path Documentation/admin-guide/thunderbolt.rst
diff --git a/Documentation/ABI/testing/sysfs-platform-intel-wmi-thunderbolt b/Documentation/ABI/testing/sysfs-platform-intel-wmi-thunderbolt
new file mode 100644
index 000000000000..8af65059d519
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-platform-intel-wmi-thunderbolt
@@ -0,0 +1,11 @@
+What:		/sys/devices/platform/<platform>/force_power
+Date:		September 2017
+KernelVersion:	4.15
+Contact:	"Mario Limonciello" <mario.limonciello@dell.com>
+Description:
+		Modify the platform force power state, influencing
+		Thunderbolt controllers to turn on or off when no
+		devices are connected (write-only)
+		There are two available states:
+		    * 0 -> Force power disabled
+		    * 1 -> Force power enabled
* Unmerged path Documentation/admin-guide/thunderbolt.rst
* Unmerged path MAINTAINERS
* Unmerged path drivers/platform/x86/Kconfig
* Unmerged path drivers/platform/x86/Makefile
diff --git a/drivers/platform/x86/intel-wmi-thunderbolt.c b/drivers/platform/x86/intel-wmi-thunderbolt.c
new file mode 100644
index 000000000000..32fb6cc33d72
--- /dev/null
+++ b/drivers/platform/x86/intel-wmi-thunderbolt.c
@@ -0,0 +1,101 @@
+/*
+ * WMI Thunderbolt driver
+ *
+ * Copyright (C) 2017 Dell Inc. All Rights Reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/acpi.h>
+#include <linux/device.h>
+#include <linux/fs.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/string.h>
+#include <linux/sysfs.h>
+#include <linux/types.h>
+#include <linux/wmi.h>
+
+#define INTEL_WMI_THUNDERBOLT_GUID "86CCFD48-205E-4A77-9C48-2021CBEDE341"
+
+static ssize_t force_power_store(struct device *dev,
+				 struct device_attribute *attr,
+				 const char *buf, size_t count)
+{
+	struct acpi_buffer input;
+	acpi_status status;
+	u8 mode;
+
+	input.length = sizeof(u8);
+	input.pointer = &mode;
+	mode = hex_to_bin(buf[0]);
+	if (mode == 0 || mode == 1) {
+		status = wmi_evaluate_method(INTEL_WMI_THUNDERBOLT_GUID, 0, 1,
+					     &input, NULL);
+		if (ACPI_FAILURE(status)) {
+			pr_err("intel-wmi-thunderbolt: failed setting %s\n",
+			       buf);
+			return -ENODEV;
+		}
+	} else {
+		pr_err("intel-wmi-thunderbolt: unsupported mode: %d", mode);
+	}
+	return count;
+}
+
+static DEVICE_ATTR_WO(force_power);
+
+static struct attribute *tbt_attrs[] = {
+	&dev_attr_force_power.attr,
+	NULL
+};
+
+static const struct attribute_group tbt_attribute_group = {
+	.attrs = tbt_attrs,
+};
+
+static int intel_wmi_thunderbolt_probe(struct wmi_device *wdev)
+{
+	int ret;
+
+	ret = sysfs_create_group(&wdev->dev.kobj, &tbt_attribute_group);
+	kobject_uevent(&wdev->dev.kobj, KOBJ_CHANGE);
+	return ret;
+}
+
+static int intel_wmi_thunderbolt_remove(struct wmi_device *wdev)
+{
+	sysfs_remove_group(&wdev->dev.kobj, &tbt_attribute_group);
+	kobject_uevent(&wdev->dev.kobj, KOBJ_CHANGE);
+	return 0;
+}
+
+static const struct wmi_device_id intel_wmi_thunderbolt_id_table[] = {
+	{ .guid_string = INTEL_WMI_THUNDERBOLT_GUID },
+	{ },
+};
+
+static struct wmi_driver intel_wmi_thunderbolt_driver = {
+	.driver = {
+		.name = "intel-wmi-thunderbolt",
+	},
+	.probe = intel_wmi_thunderbolt_probe,
+	.remove = intel_wmi_thunderbolt_remove,
+	.id_table = intel_wmi_thunderbolt_id_table,
+};
+
+module_wmi_driver(intel_wmi_thunderbolt_driver);
+
+MODULE_ALIAS("wmi:" INTEL_WMI_THUNDERBOLT_GUID);
+MODULE_AUTHOR("Mario Limonciello <mario.limonciello@dell.com>");
+MODULE_DESCRIPTION("Intel WMI Thunderbolt force power driver");
+MODULE_LICENSE("GPL");
