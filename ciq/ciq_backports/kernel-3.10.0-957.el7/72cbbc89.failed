tracing: Add kprobe flag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alexei Starovoitov <ast@plumgrid.com>
commit 72cbbc8994242b5b43753738c01bf07bf29cb70d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/72cbbc89.failed

add TRACE_EVENT_FL_KPROBE flag to differentiate kprobe type of
tracepoints, since bpf programs can only be attached to kprobe
type of PERF_TYPE_TRACEPOINT perf events.

	Signed-off-by: Alexei Starovoitov <ast@plumgrid.com>
	Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
	Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Arnaldo Carvalho de Melo <acme@infradead.org>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Daniel Borkmann <daniel@iogearbox.net>
	Cc: David S. Miller <davem@davemloft.net>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/1427312966-8434-3-git-send-email-ast@plumgrid.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 72cbbc8994242b5b43753738c01bf07bf29cb70d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ftrace_event.h
diff --cc include/linux/ftrace_event.h
index 5be378c489c1,77325e1a1816..000000000000
--- a/include/linux/ftrace_event.h
+++ b/include/linux/ftrace_event.h
@@@ -223,6 -250,9 +223,12 @@@ enum 
  	TRACE_EVENT_FL_NO_SET_FILTER_BIT,
  	TRACE_EVENT_FL_IGNORE_ENABLE_BIT,
  	TRACE_EVENT_FL_WAS_ENABLED_BIT,
++<<<<<<< HEAD
++=======
+ 	TRACE_EVENT_FL_USE_CALL_FILTER_BIT,
+ 	TRACE_EVENT_FL_TRACEPOINT_BIT,
+ 	TRACE_EVENT_FL_KPROBE_BIT,
++>>>>>>> 72cbbc899424 (tracing: Add kprobe flag)
  };
  
  /*
@@@ -234,6 -264,9 +240,12 @@@
   *  WAS_ENABLED   - Set and stays set when an event was ever enabled
   *                    (used for module unloading, if a module event is enabled,
   *                     it is best to clear the buffers that used it).
++<<<<<<< HEAD
++=======
+  *  USE_CALL_FILTER - For ftrace internal events, don't use file filter
+  *  TRACEPOINT    - Event is a tracepoint
+  *  KPROBE        - Event is a kprobe
++>>>>>>> 72cbbc899424 (tracing: Add kprobe flag)
   */
  enum {
  	TRACE_EVENT_FL_FILTERED		= (1 << TRACE_EVENT_FL_FILTERED_BIT),
@@@ -241,6 -274,9 +253,12 @@@
  	TRACE_EVENT_FL_NO_SET_FILTER	= (1 << TRACE_EVENT_FL_NO_SET_FILTER_BIT),
  	TRACE_EVENT_FL_IGNORE_ENABLE	= (1 << TRACE_EVENT_FL_IGNORE_ENABLE_BIT),
  	TRACE_EVENT_FL_WAS_ENABLED	= (1 << TRACE_EVENT_FL_WAS_ENABLED_BIT),
++<<<<<<< HEAD
++=======
+ 	TRACE_EVENT_FL_USE_CALL_FILTER	= (1 << TRACE_EVENT_FL_USE_CALL_FILTER_BIT),
+ 	TRACE_EVENT_FL_TRACEPOINT	= (1 << TRACE_EVENT_FL_TRACEPOINT_BIT),
+ 	TRACE_EVENT_FL_KPROBE		= (1 << TRACE_EVENT_FL_KPROBE_BIT),
++>>>>>>> 72cbbc899424 (tracing: Add kprobe flag)
  };
  
  struct ftrace_event_call {
* Unmerged path include/linux/ftrace_event.h
diff --git a/kernel/trace/trace_kprobe.c b/kernel/trace/trace_kprobe.c
index 963be2df4725..19698e723972 100644
--- a/kernel/trace/trace_kprobe.c
+++ b/kernel/trace/trace_kprobe.c
@@ -1473,7 +1473,7 @@ static int register_probe_event(struct trace_probe *tp)
 		kfree(call->print_fmt);
 		return -ENODEV;
 	}
-	call->flags = 0;
+	call->flags = TRACE_EVENT_FL_KPROBE;
 	call->class->reg = kprobe_register;
 	call->data = tp;
 	ret = trace_add_event_call(call);
