usbip: vhci: stop printing kernel pointer addresses in messages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Shuah Khan <shuahkh@osg.samsung.com>
commit 8272d099d05f7ab2776cf56a2ab9f9443be18907
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/8272d099.failed

Remove and/or change debug, info. and error messages to not print
kernel pointer addresses.

	Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
	Cc: stable <stable@vger.kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 8272d099d05f7ab2776cf56a2ab9f9443be18907)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/usbip/vhci_rx.c
diff --cc drivers/usb/usbip/vhci_rx.c
index 754ce0f1abc2,112ebb90d8c9..000000000000
--- a/drivers/usb/usbip/vhci_rx.c
+++ b/drivers/usb/usbip/vhci_rx.c
@@@ -29,9 -29,9 +28,15 @@@ struct urb *pickup_urb_and_free_priv(st
  		case -ENOENT:
  			/* fall through */
  		case -ECONNRESET:
++<<<<<<< HEAD
 +			dev_info(&urb->dev->dev,
 +				 "urb %p was unlinked %ssynchronously.\n", urb,
 +				 status == -ENOENT ? "" : "a");
++=======
+ 			dev_dbg(&urb->dev->dev,
+ 				 "urb seq# %u was unlinked %ssynchronuously\n",
+ 				 seqnum, status == -ENOENT ? "" : "a");
++>>>>>>> 8272d099d05f (usbip: vhci: stop printing kernel pointer addresses in messages)
  			break;
  		case -EINPROGRESS:
  			/* no info output */
diff --git a/drivers/usb/usbip/vhci_hcd.c b/drivers/usb/usbip/vhci_hcd.c
index dbe084f98bb7..00141b6216cf 100644
--- a/drivers/usb/usbip/vhci_hcd.c
+++ b/drivers/usb/usbip/vhci_hcd.c
@@ -511,9 +511,6 @@ static int vhci_urb_enqueue(struct usb_hcd *hcd, struct urb *urb,
 	struct vhci_device *vdev;
 	unsigned long flags;
 
-	usbip_dbg_vhci_hc("enter, usb_hcd %p urb %p mem_flags %d\n",
-			  hcd, urb, mem_flags);
-
 	if (portnum > VHCI_HC_PORTS) {
 		pr_err("invalid port number %d\n", portnum);
 		return -ENODEV;
@@ -677,8 +674,6 @@ static int vhci_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
 	struct vhci_device *vdev;
 	unsigned long flags;
 
-	pr_info("dequeue a urb %p\n", urb);
-
 	spin_lock_irqsave(&vhci->lock, flags);
 
 	priv = urb->hcpriv;
@@ -706,7 +701,6 @@ static int vhci_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
 		/* tcp connection is closed */
 		spin_lock(&vdev->priv_lock);
 
-		pr_info("device %p seems to be disconnected\n", vdev);
 		list_del(&priv->list);
 		kfree(priv);
 		urb->hcpriv = NULL;
@@ -718,8 +712,6 @@ static int vhci_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
 		 * vhci_rx will receive RET_UNLINK and give back the URB.
 		 * Otherwise, we give back it here.
 		 */
-		pr_info("gives back urb %p\n", urb);
-
 		usb_hcd_unlink_urb_from_ep(hcd, urb);
 
 		spin_unlock_irqrestore(&vhci->lock, flags);
@@ -747,8 +739,6 @@ static int vhci_urb_dequeue(struct usb_hcd *hcd, struct urb *urb, int status)
 
 		unlink->unlink_seqnum = priv->seqnum;
 
-		pr_info("device %p seems to be still connected\n", vdev);
-
 		/* send cmd_unlink and try to cancel the pending URB in the
 		 * peer */
 		list_add_tail(&unlink->list, &vdev->unlink_tx);
* Unmerged path drivers/usb/usbip/vhci_rx.c
diff --git a/drivers/usb/usbip/vhci_tx.c b/drivers/usb/usbip/vhci_tx.c
index 79ca69b2e0a3..294d1a0df30f 100644
--- a/drivers/usb/usbip/vhci_tx.c
+++ b/drivers/usb/usbip/vhci_tx.c
@@ -68,7 +68,8 @@ static int vhci_send_cmd_submit(struct vhci_device *vdev)
 		memset(&msg, 0, sizeof(msg));
 		memset(&iov, 0, sizeof(iov));
 
-		usbip_dbg_vhci_tx("setup txdata urb %p\n", urb);
+		usbip_dbg_vhci_tx("setup txdata urb seqnum %lu\n",
+				  priv->seqnum);
 
 		/* 1. setup usbip_header */
 		setup_cmd_submit_pdu(&pdu_header, urb);
