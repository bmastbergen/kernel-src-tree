iio: fix: Keep a reference to the IIO device for open file descriptors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] fix: Keep a reference to the IIO device for open file descriptors (Tony Camuso) [1559170]
Rebuild_FUZZ: 96.30%
commit-author Lars-Peter Clausen <lars@metafoo.de>
commit cadc2125e140f7122bf1b59d42486cfc778c7286
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/cadc2125.failed

Make sure that the IIO device is not freed while we still have file descriptors
for it.

	Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit cadc2125e140f7122bf1b59d42486cfc778c7286)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-event.c
diff --cc drivers/iio/industrialio-event.c
index 02579f7b16a8,6be65ef5faa9..000000000000
--- a/drivers/iio/industrialio-event.c
+++ b/drivers/iio/industrialio-event.c
@@@ -158,8 -163,10 +163,15 @@@ int iio_event_getfd(struct iio_dev *ind
  		return -EBUSY;
  	}
  	spin_unlock_irq(&ev_int->wait.lock);
++<<<<<<< HEAD
 +	fd = anon_inode_getfd("iio:event",
 +				&iio_event_chrdev_fileops, ev_int, O_RDONLY | O_CLOEXEC);
++=======
+ 	iio_device_get(indio_dev);
+ 
+ 	fd = anon_inode_getfd("iio:event", &iio_event_chrdev_fileops,
+ 				indio_dev, O_RDONLY);
++>>>>>>> cadc2125e140 (iio: fix: Keep a reference to the IIO device for open file descriptors)
  	if (fd < 0) {
  		spin_lock_irq(&ev_int->wait.lock);
  		__clear_bit(IIO_BUSY_BIT_POS, &ev_int->flags);
diff --git a/drivers/iio/industrialio-core.c b/drivers/iio/industrialio-core.c
index 97f0297b120f..86fdcf74f724 100644
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@ -970,6 +970,8 @@ static int iio_chrdev_open(struct inode *inode, struct file *filp)
 	if (test_and_set_bit(IIO_BUSY_BIT_POS, &indio_dev->flags))
 		return -EBUSY;
 
+	iio_device_get(indio_dev);
+
 	filp->private_data = indio_dev;
 
 	return 0;
@@ -983,6 +985,8 @@ static int iio_chrdev_release(struct inode *inode, struct file *filp)
 	struct iio_dev *indio_dev = container_of(inode->i_cdev,
 						struct iio_dev, chrdev);
 	clear_bit(IIO_BUSY_BIT_POS, &indio_dev->flags);
+	iio_device_put(indio_dev);
+
 	return 0;
 }
 
* Unmerged path drivers/iio/industrialio-event.c
