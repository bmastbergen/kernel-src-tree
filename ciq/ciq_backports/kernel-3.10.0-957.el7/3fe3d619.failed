tracing/kprobes: Kill probe_enable_lock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Oleg Nesterov <oleg@redhat.com>
commit 3fe3d6193e7cd7b4dd2bde10772f048bdefea4ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/3fe3d619.failed

enable_trace_probe() and disable_trace_probe() should not worry about
serialization, the caller (perf_trace_init or __ftrace_set_clr_event)
holds event_mutex.

They are also called by kprobe_trace_self_tests_init(), but this __init
function can't race with itself or trace_events.c

And note that this code depended on event_mutex even before 41a7dd420c
which introduced probe_enable_lock. In fact it assumes that the caller
kprobe_register() can never race with itself. Otherwise, say, tp->flags
manipulations are racy.

Link: http://lkml.kernel.org/r/20130620173809.GA13158@redhat.com

	Acked-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
(cherry picked from commit 3fe3d6193e7cd7b4dd2bde10772f048bdefea4ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace_kprobe.c
diff --cc kernel/trace/trace_kprobe.c
index 963be2df4725,282f86cfd304..000000000000
--- a/kernel/trace/trace_kprobe.c
+++ b/kernel/trace/trace_kprobe.c
@@@ -448,12 -272,8 +440,10 @@@ trace_probe_file_index(struct trace_pro
  static int
  disable_trace_probe(struct trace_probe *tp, struct ftrace_event_file *file)
  {
 +	struct ftrace_event_file **old = NULL;
 +	int wait = 0;
  	int ret = 0;
  
- 	mutex_lock(&probe_enable_lock);
- 
  	if (file) {
  		struct ftrace_event_file **new, **old;
  		int n = trace_probe_nr_files(tp);
@@@ -492,25 -315,8 +482,29 @@@
  			disable_kretprobe(&tp->rp);
  		else
  			disable_kprobe(&tp->rp.kp);
 +		wait = 1;
 +	}
++<<<<<<< HEAD
 +
 + out_unlock:
 +	mutex_unlock(&probe_enable_lock);
 +
 +	if (wait) {
 +		/*
 +		 * Synchronize with kprobe_trace_func/kretprobe_trace_func
 +		 * to ensure disabled (all running handlers are finished).
 +		 * This is not only for kfree(), but also the caller,
 +		 * trace_remove_event_call() supposes it for releasing
 +		 * event_call related objects, which will be accessed in
 +		 * the kprobe_trace_func/kretprobe_trace_func.
 +		 */
 +		synchronize_sched();
 +		kfree(old);	/* Ignored if link == NULL */
  	}
 +
++=======
+  out:
++>>>>>>> 3fe3d6193e7c (tracing/kprobes: Kill probe_enable_lock)
  	return ret;
  }
  
* Unmerged path kernel/trace/trace_kprobe.c
