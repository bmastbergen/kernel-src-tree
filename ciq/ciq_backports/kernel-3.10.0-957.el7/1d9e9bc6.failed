blk-mq: don't stop queue for quiescing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [blk-mq] don't stop queue for quiescing (Ewan Milne) [1549232]
Rebuild_FUZZ: 88.24%
commit-author Ming Lei <ming.lei@redhat.com>
commit 1d9e9bc6b56e1bb7e33e7e2e1b99d7088356c006
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1d9e9bc6.failed

Queue can be started by other blk-mq APIs and can be used in
different cases, this limits uses of blk_mq_quiesce_queue()
if it is based on stopping queue, and make its usage very
difficult, especially users have to use the stop queue APIs
carefully for avoiding to break blk_mq_quiesce_queue().

We have applied the QUIESCED flag for draining and blocking
dispatch, so it isn't necessary to stop queue any more.

After stopping queue is removed, blk_mq_quiesce_queue() can
be used safely and easily, then users won't worry about queue
restarting during quiescing at all.

	Reviewed-by: Bart Van Assche <Bart.VanAssche@sandisk.com>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 1d9e9bc6b56e1bb7e33e7e2e1b99d7088356c006)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
#	include/linux/blk-mq.h
diff --cc block/blk-mq.c
index af064c8e0d5d,dbae586602f6..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -150,7 -169,7 +150,11 @@@ void blk_mq_quiesce_queue(struct reques
  	unsigned int i;
  	bool rcu = false;
  
++<<<<<<< HEAD
 +	blk_mq_stop_hw_queues(q);
++=======
+ 	blk_mq_quiesce_queue_nowait(q);
++>>>>>>> 1d9e9bc6b56e (blk-mq: don't stop queue for quiescing)
  
  	queue_for_each_hw_ctx(q, hctx, i) {
  		if (hctx->flags & BLK_MQ_F_BLOCKING)
@@@ -172,7 -191,12 +176,16 @@@ EXPORT_SYMBOL_GPL(blk_mq_quiesce_queue)
   */
  void blk_mq_unquiesce_queue(struct request_queue *q)
  {
++<<<<<<< HEAD
 +	blk_mq_start_stopped_hw_queues(q, true);
++=======
+ 	spin_lock_irq(q->queue_lock);
+ 	queue_flag_clear(QUEUE_FLAG_QUIESCED, q);
+ 	spin_unlock_irq(q->queue_lock);
+ 
+ 	/* dispatch requests which are inserted during quiescing */
+ 	blk_mq_run_hw_queues(q, true);
++>>>>>>> 1d9e9bc6b56e (blk-mq: don't stop queue for quiescing)
  }
  EXPORT_SYMBOL_GPL(blk_mq_unquiesce_queue);
  
diff --cc include/linux/blk-mq.h
index 5369c1639875,f1bd13ae8f57..000000000000
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@@ -346,7 -268,9 +346,13 @@@ void blk_mq_update_nr_hw_queues(struct 
   */
  static inline void blk_mq_quiesce_queue_nowait(struct request_queue *q)
  {
++<<<<<<< HEAD
 +	blk_mq_stop_hw_queues(q);
++=======
+ 	spin_lock_irq(q->queue_lock);
+ 	queue_flag_set(QUEUE_FLAG_QUIESCED, q);
+ 	spin_unlock_irq(q->queue_lock);
++>>>>>>> 1d9e9bc6b56e (blk-mq: don't stop queue for quiescing)
  }
  
  /*
* Unmerged path block/blk-mq.c
* Unmerged path include/linux/blk-mq.h
