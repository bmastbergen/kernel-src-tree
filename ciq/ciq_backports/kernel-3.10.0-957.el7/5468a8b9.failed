nfp: bpf: encode indirect commands

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 5468a8b929e6276e139405d525c963a56890b5e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5468a8b9.failed

Add support for emitting commands with field overwrites.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 5468a8b929e6276e139405d525c963a56890b5e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_asm.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_asm.h
index 84fa9577808f,6ff842a15e5d..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_asm.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_asm.h
@@@ -181,26 -188,29 +181,39 @@@ enum alu_dst_ab 
  	ALU_DST_B = 1,
  };
  
 -#define OP_LDF_BASE		0x0c000000000ULL
 -#define OP_LDF_A_SRC		0x000000000ffULL
 -#define OP_LDF_SC		0x00000000300ULL
 -#define OP_LDF_B_SRC		0x0000003fc00ULL
 -#define OP_LDF_I8		0x00000040000ULL
 -#define OP_LDF_SW		0x00000080000ULL
 -#define OP_LDF_ZF		0x00000100000ULL
 -#define OP_LDF_BMASK		0x0000f000000ULL
 -#define OP_LDF_SHF		0x001f0000000ULL
 -#define OP_LDF_WR_AB		0x20000000000ULL
 -#define OP_LDF_SRC_LMEXTN	0x40000000000ULL
 -#define OP_LDF_DST_LMEXTN	0x80000000000ULL
 -
 +#define OP_LDF_BASE	0x0c000000000ULL
 +#define OP_LDF_A_SRC	0x000000000ffULL
 +#define OP_LDF_SC	0x00000000300ULL
 +#define OP_LDF_B_SRC	0x0000003fc00ULL
 +#define OP_LDF_I8	0x00000040000ULL
 +#define OP_LDF_SW	0x00000080000ULL
 +#define OP_LDF_ZF	0x00000100000ULL
 +#define OP_LDF_BMASK	0x0000f000000ULL
 +#define OP_LDF_SHF	0x001f0000000ULL
 +#define OP_LDF_WR_AB	0x20000000000ULL
 +
++<<<<<<< HEAD
 +#define OP_CMD_A_SRC	 0x000000000ffULL
 +#define OP_CMD_CTX	 0x00000000300ULL
 +#define OP_CMD_B_SRC	 0x0000003fc00ULL
 +#define OP_CMD_TOKEN	 0x000000c0000ULL
 +#define OP_CMD_XFER	 0x00001f00000ULL
 +#define OP_CMD_CNT	 0x0000e000000ULL
 +#define OP_CMD_SIG	 0x000f0000000ULL
 +#define OP_CMD_TGT_CMD	 0x07f00000000ULL
 +#define OP_CMD_MODE	0x1c0000000000ULL
++=======
+ #define OP_CMD_A_SRC		0x000000000ffULL
+ #define OP_CMD_CTX		0x00000000300ULL
+ #define OP_CMD_B_SRC		0x0000003fc00ULL
+ #define OP_CMD_TOKEN		0x000000c0000ULL
+ #define OP_CMD_XFER		0x00001f00000ULL
+ #define OP_CMD_CNT		0x0000e000000ULL
+ #define OP_CMD_SIG		0x000f0000000ULL
+ #define OP_CMD_TGT_CMD		0x07f00000000ULL
+ #define OP_CMD_INDIR		0x20000000000ULL
+ #define OP_CMD_MODE	       0x1c0000000000ULL
++>>>>>>> 5468a8b929e6 (nfp: bpf: encode indirect commands)
  
  struct cmd_tgt_act {
  	u8 token;
diff --git a/drivers/net/ethernet/netronome/nfp/bpf/jit.c b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
index 35648b968309..33dc1fc67d9b 100644
--- a/drivers/net/ethernet/netronome/nfp/bpf/jit.c
+++ b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
@@ -113,7 +113,7 @@ nfp_prog_offset_to_index(struct nfp_prog *nfp_prog, unsigned int offset)
 /* --- Emitters --- */
 static void
 __emit_cmd(struct nfp_prog *nfp_prog, enum cmd_tgt_map op,
-	   u8 mode, u8 xfer, u8 areg, u8 breg, u8 size, bool sync)
+	   u8 mode, u8 xfer, u8 areg, u8 breg, u8 size, bool sync, bool indir)
 {
 	enum cmd_ctx_swap ctx;
 	u64 insn;
@@ -131,14 +131,15 @@ __emit_cmd(struct nfp_prog *nfp_prog, enum cmd_tgt_map op,
 		FIELD_PREP(OP_CMD_CNT, size) |
 		FIELD_PREP(OP_CMD_SIG, sync) |
 		FIELD_PREP(OP_CMD_TGT_CMD, cmd_tgt_act[op].tgt_cmd) |
+		FIELD_PREP(OP_CMD_INDIR, indir) |
 		FIELD_PREP(OP_CMD_MODE, mode);
 
 	nfp_prog_push(nfp_prog, insn);
 }
 
 static void
-emit_cmd(struct nfp_prog *nfp_prog, enum cmd_tgt_map op,
-	 u8 mode, u8 xfer, swreg lreg, swreg rreg, u8 size, bool sync)
+emit_cmd_any(struct nfp_prog *nfp_prog, enum cmd_tgt_map op, u8 mode, u8 xfer,
+	     swreg lreg, swreg rreg, u8 size, bool sync, bool indir)
 {
 	struct nfp_insn_re_regs reg;
 	int err;
@@ -154,7 +155,15 @@ emit_cmd(struct nfp_prog *nfp_prog, enum cmd_tgt_map op,
 		return;
 	}
 
-	__emit_cmd(nfp_prog, op, mode, xfer, reg.areg, reg.breg, size, sync);
+	__emit_cmd(nfp_prog, op, mode, xfer, reg.areg, reg.breg, size, sync,
+		   indir);
+}
+
+static void
+emit_cmd(struct nfp_prog *nfp_prog, enum cmd_tgt_map op, u8 mode, u8 xfer,
+	 swreg lreg, swreg rreg, u8 size, bool sync)
+{
+	emit_cmd_any(nfp_prog, op, mode, xfer, lreg, rreg, size, sync, false);
 }
 
 static void
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_asm.h
