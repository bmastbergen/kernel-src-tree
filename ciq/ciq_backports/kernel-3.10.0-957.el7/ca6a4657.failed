x86, libnvdimm, pmem: remove global pmem api

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] libnvdimm, pmem: remove global pmem api (Jeff Moyer) [1515085]
Rebuild_FUZZ: 93.98%
commit-author Dan Williams <dan.j.williams@intel.com>
commit ca6a4657e5420dec727256717e905ebc3c751352
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ca6a4657.failed

Now that all callers of the pmem api have been converted to dax helpers that
call back to the pmem driver, we can remove include/linux/pmem.h and
asm/pmem.h.

	Cc: <x86@kernel.org>
	Cc: Jeff Moyer <jmoyer@redhat.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Toshi Kani <toshi.kani@hpe.com>
	Cc: Oliver O'Halloran <oohall@gmail.com>
	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit ca6a4657e5420dec727256717e905ebc3c751352)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/pmem.h
#	drivers/nvdimm/pmem.h
#	include/linux/pmem.h
diff --cc drivers/nvdimm/pmem.h
index c5917f040fa7,fce248a1fc87..000000000000
--- a/drivers/nvdimm/pmem.h
+++ b/drivers/nvdimm/pmem.h
@@@ -5,6 -5,20 +5,23 @@@
  #include <linux/pfn_t.h>
  #include <linux/fs.h>
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_ARCH_HAS_PMEM_API
+ #define ARCH_MEMREMAP_PMEM MEMREMAP_WB
+ void arch_wb_cache_pmem(void *addr, size_t size);
+ void arch_invalidate_pmem(void *addr, size_t size);
+ #else
+ #define ARCH_MEMREMAP_PMEM MEMREMAP_WT
+ static inline void arch_wb_cache_pmem(void *addr, size_t size)
+ {
+ }
+ static inline void arch_invalidate_pmem(void *addr, size_t size)
+ {
+ }
+ #endif
+ 
++>>>>>>> ca6a4657e542 (x86, libnvdimm, pmem: remove global pmem api)
  /* this definition is in it's own header for tools/testing/nvdimm to consume */
  struct pmem_device {
  	/* One contiguous memory region per device */
* Unmerged path arch/x86/include/asm/pmem.h
* Unmerged path include/linux/pmem.h
diff --git a/MAINTAINERS b/MAINTAINERS
index 20d5d87b6e53..a007de7c94fb 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -5151,9 +5151,7 @@ M:	Ross Zwisler <ross.zwisler@linux.intel.com>
 L:	linux-nvdimm@lists.01.org
 Q:	https://patchwork.kernel.org/project/linux-nvdimm/list/
 S:	Supported
-F:	drivers/nvdimm/pmem.c
-F:	include/linux/pmem.h
-F:	arch/*/include/asm/pmem.h
+F:	drivers/nvdimm/pmem*
 
 LINUX FOR IBM pSERIES (RS/6000)
 M:	Paul Mackerras <paulus@au.ibm.com>
* Unmerged path arch/x86/include/asm/pmem.h
diff --git a/drivers/acpi/nfit/core.c b/drivers/acpi/nfit/core.c
index eceef2ed8bf7..a499fc3e6e95 100644
--- a/drivers/acpi/nfit/core.c
+++ b/drivers/acpi/nfit/core.c
@@ -20,7 +20,6 @@
 #include <linux/list.h>
 #include <linux/acpi.h>
 #include <linux/sort.h>
-#include <linux/pmem.h>
 #include <linux/io.h>
 #include <linux/nd.h>
 #include <asm/cacheflush.h>
@@ -2322,7 +2321,7 @@ static int acpi_nfit_blk_region_enable(struct nvdimm_bus *nvdimm_bus,
 	nfit_blk->bdw_offset = nfit_mem->bdw->offset;
 	mmio = &nfit_blk->mmio[BDW];
 	mmio->addr.base = devm_nvdimm_memremap(dev, nfit_mem->spa_bdw->address,
-                        nfit_mem->spa_bdw->length, ARCH_MEMREMAP_PMEM);
+                        nfit_mem->spa_bdw->length, nd_blk_memremap_flags(ndbr));
 	if (!mmio->addr.base) {
 		dev_dbg(dev, "%s: %s failed to map bdw\n", __func__,
 				nvdimm_name(nvdimm));
diff --git a/drivers/nvdimm/claim.c b/drivers/nvdimm/claim.c
index 26a0fbf56be8..283d011349b6 100644
--- a/drivers/nvdimm/claim.c
+++ b/drivers/nvdimm/claim.c
@@ -12,7 +12,6 @@
  */
 #include <linux/device.h>
 #include <linux/sizes.h>
-#include <linux/pmem.h>
 #include "nd-core.h"
 #include "pfn.h"
 #include "btt.h"
diff --git a/drivers/nvdimm/dimm_devs.c b/drivers/nvdimm/dimm_devs.c
index 498f8f2a8d20..f0d1b7e5de01 100644
--- a/drivers/nvdimm/dimm_devs.c
+++ b/drivers/nvdimm/dimm_devs.c
@@ -20,6 +20,7 @@
 #include <linux/mm.h>
 #include "nd-core.h"
 #include "label.h"
+#include "pmem.h"
 #include "nd.h"
 
 static DEFINE_IDA(dimm_ida);
@@ -235,6 +236,13 @@ struct nvdimm *nd_blk_region_to_dimm(struct nd_blk_region *ndbr)
 }
 EXPORT_SYMBOL_GPL(nd_blk_region_to_dimm);
 
+unsigned long nd_blk_memremap_flags(struct nd_blk_region *ndbr)
+{
+	/* pmem mapping properties are private to libnvdimm */
+	return ARCH_MEMREMAP_PMEM;
+}
+EXPORT_SYMBOL_GPL(nd_blk_memremap_flags);
+
 struct nvdimm_drvdata *to_ndd(struct nd_mapping *nd_mapping)
 {
 	struct nvdimm *nvdimm = nd_mapping->nvdimm;
diff --git a/drivers/nvdimm/namespace_devs.c b/drivers/nvdimm/namespace_devs.c
index d9864bb07887..cf284119b98a 100644
--- a/drivers/nvdimm/namespace_devs.c
+++ b/drivers/nvdimm/namespace_devs.c
@@ -14,10 +14,10 @@
 #include <linux/device.h>
 #include <linux/sort.h>
 #include <linux/slab.h>
-#include <linux/pmem.h>
 #include <linux/list.h>
 #include <linux/nd.h>
 #include "nd-core.h"
+#include "pmem.h"
 #include "nd.h"
 
 static void namespace_io_release(struct device *dev)
@@ -154,11 +154,7 @@ bool pmem_should_map_pages(struct device *dev)
 				== REGION_MIXED)
 		return false;
 
-#ifdef ARCH_MEMREMAP_PMEM
 	return ARCH_MEMREMAP_PMEM == MEMREMAP_WB;
-#else
-	return false;
-#endif
 }
 EXPORT_SYMBOL(pmem_should_map_pages);
 
diff --git a/drivers/nvdimm/pmem.c b/drivers/nvdimm/pmem.c
index 49eeb1950ba6..a023c06c3c4c 100644
--- a/drivers/nvdimm/pmem.c
+++ b/drivers/nvdimm/pmem.c
@@ -27,7 +27,6 @@
 #include <linux/vmalloc.h>
 #include <linux/pfn_t.h>
 #include <linux/slab.h>
-#include <linux/pmem.h>
 #include <linux/uio.h>
 #include <linux/dax.h>
 #include <linux/nd.h>
* Unmerged path drivers/nvdimm/pmem.h
diff --git a/drivers/nvdimm/region_devs.c b/drivers/nvdimm/region_devs.c
index 7a7f86aa6595..afcd0fc3f760 100644
--- a/drivers/nvdimm/region_devs.c
+++ b/drivers/nvdimm/region_devs.c
@@ -15,7 +15,6 @@
 #include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/hash.h>
-#include <linux/pmem.h>
 #include <linux/sort.h>
 #include <linux/io.h>
 #include <linux/nd.h>
diff --git a/fs/dax.c b/fs/dax.c
index 879d2cfa39b7..b4019cb30092 100644
--- a/fs/dax.c
+++ b/fs/dax.c
@@ -25,7 +25,6 @@
 #include <linux/mm.h>
 #include <linux/mutex.h>
 #include <linux/pagevec.h>
-#include <linux/pmem.h>
 #include <linux/sched.h>
 #include <linux/uio.h>
 #include <linux/socket.h>
diff --git a/include/linux/libnvdimm.h b/include/linux/libnvdimm.h
index a17c77f443ef..d3294d338b89 100644
--- a/include/linux/libnvdimm.h
+++ b/include/linux/libnvdimm.h
@@ -167,6 +167,7 @@ void *nd_region_provider_data(struct nd_region *nd_region);
 void *nd_blk_region_provider_data(struct nd_blk_region *ndbr);
 void nd_blk_region_set_provider_data(struct nd_blk_region *ndbr, void *data);
 struct nvdimm *nd_blk_region_to_dimm(struct nd_blk_region *ndbr);
+unsigned long nd_blk_memremap_flags(struct nd_blk_region *ndbr);
 unsigned int nd_region_acquire_lane(struct nd_region *nd_region);
 void nd_region_release_lane(struct nd_region *nd_region, unsigned int lane);
 u64 nd_fletcher64(void *addr, size_t len, bool le);
* Unmerged path include/linux/pmem.h
