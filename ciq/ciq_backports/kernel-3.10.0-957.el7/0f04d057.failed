net: sched: cls_u32: use bitwise & rather than logical && on n->flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] sched: cls_u32: use bitwise & rather than logical && on n->flags (Ivan Vecera) [1572720]
Rebuild_FUZZ: 96.24%
commit-author Colin Ian King <colin.king@canonical.com>
commit 0f04d057515275099c6e4f767b95a278be4681bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0f04d057.failed

Currently n->flags is being operated on by a logical && operator rather
than a bitwise & operator. This looks incorrect as these should be bit
flag operations. Fix this.

Detected by CoverityScan, CID#1460398 ("Logical vs. bitwise operator")

Fixes: 245dc5121a9b ("net: sched: cls_u32: call block callbacks for offload")
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0f04d057515275099c6e4f767b95a278be4681bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_u32.c
diff --cc net/sched/cls_u32.c
index 42766c25ee6a,2737b71854c9..000000000000
--- a/net/sched/cls_u32.c
+++ b/net/sched/cls_u32.c
@@@ -567,13 -564,16 +567,18 @@@ static int u32_replace_hw_knode(struct 
  	if (n->ht_down)
  		cls_u32.knode.link_handle = n->ht_down->handle;
  
 -	err = tc_setup_cb_call(block, NULL, TC_SETUP_CLSU32, &cls_u32, skip_sw);
 -	if (err < 0) {
 -		u32_remove_hw_knode(tp, n->handle);
 -		return err;
 -	} else if (err > 0) {
 +	err = __rh_call_ndo_setup_tc(dev, TC_SETUP_CLSU32, &cls_u32);
 +
++<<<<<<< HEAD
 +	if (!err)
  		n->flags |= TCA_CLS_FLAGS_IN_HW;
 -	}
  
 +	if (tc_skip_sw(flags))
 +		return err;
++=======
+ 	if (skip_sw && !(n->flags & TCA_CLS_FLAGS_IN_HW))
+ 		return -EINVAL;
++>>>>>>> 0f04d0575152 (net: sched: cls_u32: use bitwise & rather than logical && on n->flags)
  
  	return 0;
  }
* Unmerged path net/sched/cls_u32.c
