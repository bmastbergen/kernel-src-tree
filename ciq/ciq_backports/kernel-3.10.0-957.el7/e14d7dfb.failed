x86/speculation/l1tf: Fix up pte->pfn conversion for PAE

jira LE-1907
cve CVE-2018-3620
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] speculation/l1tf: fix up pte->pfn conversion for pae (Christoph von Recklinghausen) [1593384] {CVE-2018-3620}
Rebuild_FUZZ: 96.30%
commit-author Michal Hocko <mhocko@suse.cz>
commit e14d7dfb41f5807a0c1c26a13f2b8ef16af24935
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e14d7dfb.failed

Jan has noticed that pte_pfn and co. resp. pfn_pte are incorrect for
CONFIG_PAE because phys_addr_t is wider than unsigned long and so the
pte_val reps. shift left would get truncated. Fix this up by using proper
types.

Fixes: 6b28baca9b1f ("x86/speculation/l1tf: Protect PROT_NONE PTEs against speculation")
	Reported-by: Jan Beulich <JBeulich@suse.com>
	Signed-off-by: Michal Hocko <mhocko@suse.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
(cherry picked from commit e14d7dfb41f5807a0c1c26a13f2b8ef16af24935)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/pgtable.h
diff --cc arch/x86/include/asm/pgtable.h
index 6a32515b7486,26fd42a91946..000000000000
--- a/arch/x86/include/asm/pgtable.h
+++ b/arch/x86/include/asm/pgtable.h
@@@ -172,19 -185,34 +172,42 @@@ static inline int pte_special(pte_t pte
  	return pte_flags(pte) & _PAGE_SPECIAL;
  }
  
 -/* Entries that were set to PROT_NONE are inverted */
 -
 -static inline u64 protnone_mask(u64 val);
 -
  static inline unsigned long pte_pfn(pte_t pte)
  {
++<<<<<<< HEAD
 +	return (pte_val(pte) & PTE_PFN_MASK) >> PAGE_SHIFT;
++=======
+ 	phys_addr_t pfn = pte_val(pte);
+ 	pfn ^= protnone_mask(pfn);
+ 	return (pfn & PTE_PFN_MASK) >> PAGE_SHIFT;
++>>>>>>> e14d7dfb41f5 (x86/speculation/l1tf: Fix up pte->pfn conversion for PAE)
  }
  
  static inline unsigned long pmd_pfn(pmd_t pmd)
  {
++<<<<<<< HEAD
 +	return (pmd_val(pmd) & pmd_pfn_mask(pmd)) >> PAGE_SHIFT;
++=======
+ 	phys_addr_t pfn = pmd_val(pmd);
+ 	pfn ^= protnone_mask(pfn);
+ 	return (pfn & pmd_pfn_mask(pmd)) >> PAGE_SHIFT;
++>>>>>>> e14d7dfb41f5 (x86/speculation/l1tf: Fix up pte->pfn conversion for PAE)
  }
  
  static inline unsigned long pud_pfn(pud_t pud)
  {
++<<<<<<< HEAD
 +	return (pud_val(pud) & pud_pfn_mask(pud)) >> PAGE_SHIFT;
++=======
+ 	phys_addr_t pfn = pud_val(pud);
+ 	pfn ^= protnone_mask(pfn);
+ 	return (pfn & pud_pfn_mask(pud)) >> PAGE_SHIFT;
+ }
+ 
+ static inline unsigned long p4d_pfn(p4d_t p4d)
+ {
+ 	return (p4d_val(p4d) & p4d_pfn_mask(p4d)) >> PAGE_SHIFT;
++>>>>>>> e14d7dfb41f5 (x86/speculation/l1tf: Fix up pte->pfn conversion for PAE)
  }
  
  static inline unsigned long pgd_pfn(pgd_t pgd)
@@@ -518,27 -536,52 +541,48 @@@ static inline pgprotval_t massage_pgpro
  	return protval;
  }
  
 -static inline pgprotval_t check_pgprot(pgprot_t pgprot)
 -{
 -	pgprotval_t massaged_val = massage_pgprot(pgprot);
 -
 -	/* mmdebug.h can not be included here because of dependencies */
 -#ifdef CONFIG_DEBUG_VM
 -	WARN_ONCE(pgprot_val(pgprot) != massaged_val,
 -		  "attempted to set unsupported pgprot: %016llx "
 -		  "bits: %016llx supported: %016llx\n",
 -		  (u64)pgprot_val(pgprot),
 -		  (u64)pgprot_val(pgprot) ^ massaged_val,
 -		  (u64)__supported_pte_mask);
 -#endif
 -
 -	return massaged_val;
 -}
 -
  static inline pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
  {
++<<<<<<< HEAD
 +	return __pte(((phys_addr_t)page_nr << PAGE_SHIFT) |
 +		     massage_pgprot(pgprot));
++=======
+ 	phys_addr_t pfn = (phys_addr_t)page_nr << PAGE_SHIFT;
+ 	pfn ^= protnone_mask(pgprot_val(pgprot));
+ 	pfn &= PTE_PFN_MASK;
+ 	return __pte(pfn | check_pgprot(pgprot));
++>>>>>>> e14d7dfb41f5 (x86/speculation/l1tf: Fix up pte->pfn conversion for PAE)
  }
  
  static inline pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
  {
++<<<<<<< HEAD
 +	return __pmd(((phys_addr_t)page_nr << PAGE_SHIFT) |
 +		     massage_pgprot(pgprot));
++=======
+ 	phys_addr_t pfn = (phys_addr_t)page_nr << PAGE_SHIFT;
+ 	pfn ^= protnone_mask(pgprot_val(pgprot));
+ 	pfn &= PHYSICAL_PMD_PAGE_MASK;
+ 	return __pmd(pfn | check_pgprot(pgprot));
++>>>>>>> e14d7dfb41f5 (x86/speculation/l1tf: Fix up pte->pfn conversion for PAE)
  }
  
  static inline pud_t pfn_pud(unsigned long page_nr, pgprot_t pgprot)
  {
++<<<<<<< HEAD
 +	return __pud(((phys_addr_t)page_nr << PAGE_SHIFT) |
 +		     massage_pgprot(pgprot));
++=======
+ 	phys_addr_t pfn = (phys_addr_t)page_nr << PAGE_SHIFT;
+ 	pfn ^= protnone_mask(pgprot_val(pgprot));
+ 	pfn &= PHYSICAL_PUD_PAGE_MASK;
+ 	return __pud(pfn | check_pgprot(pgprot));
++>>>>>>> e14d7dfb41f5 (x86/speculation/l1tf: Fix up pte->pfn conversion for PAE)
  }
  
 -static inline u64 flip_protnone_guard(u64 oldval, u64 val, u64 mask);
 -
  static inline pte_t pte_modify(pte_t pte, pgprot_t newprot)
  {
 -	pteval_t val = pte_val(pte), oldval = val;
 +	pteval_t val = pte_val(pte);
  
  	/*
  	 * Chop off the NX bit (if present), and add the NX portion of
* Unmerged path arch/x86/include/asm/pgtable.h
