platform/x86: dell-laptop: Allocate buffer on heap rather than globally

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: dell-laptop: Allocate buffer on heap rather than globally (Jarod Wilson) [1517197]
Rebuild_FUZZ: 93.23%
commit-author Mario Limonciello <mario.limonciello@dell.com>
commit 9862b43624a5450a097cc4122732857b869dbbca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9862b436.failed

There is no longer a need for the buffer to be defined in
first 4GB physical address space.

Furthermore there may be race conditions with multiple different functions
working on a module wide buffer causing incorrect results.

Fixes: 549b4930f057658dc50d8010e66219233119a4d8
	Suggested-by: Pali Rohar <pali.rohar@gmail.com>
	Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
(cherry picked from commit 9862b43624a5450a097cc4122732857b869dbbca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/dell-laptop.c
diff --cc drivers/platform/x86/dell-laptop.c
index 0a437b60caef,a7b141992cb3..000000000000
--- a/drivers/platform/x86/dell-laptop.c
+++ b/drivers/platform/x86/dell-laptop.c
@@@ -330,6 -321,29 +330,32 @@@ static const struct dmi_system_id dell_
  	{ }
  };
  
++<<<<<<< HEAD
++=======
+ static void dell_fill_request(struct calling_interface_buffer *buffer,
+ 			       u32 arg0, u32 arg1, u32 arg2, u32 arg3)
+ {
+ 	memset(buffer, 0, sizeof(struct calling_interface_buffer));
+ 	buffer->input[0] = arg0;
+ 	buffer->input[1] = arg1;
+ 	buffer->input[2] = arg2;
+ 	buffer->input[3] = arg3;
+ }
+ 
+ static int dell_send_request(struct calling_interface_buffer *buffer,
+ 			     u16 class, u16 select)
+ {
+ 	int ret;
+ 
+ 	buffer->cmd_class = class;
+ 	buffer->cmd_select = select;
+ 	ret = dell_smbios_call(buffer);
+ 	if (ret != 0)
+ 		return ret;
+ 	return dell_smbios_error(buffer->output[0]);
+ }
+ 
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  /*
   * Derived from information in smbios-wireless-ctl:
   *
@@@ -460,21 -474,17 +487,35 @@@ static int dell_rfkill_set(void *data, 
  	int status;
  	int ret;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +	status = buffer->output[1];
 +
 +	if (ret != 0)
 +		goto out;
 +
 +	dell_smbios_clear_buffer();
 +
 +	buffer->input[0] = 0x2;
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +	hwswitch = buffer->output[1];
++=======
+ 	dell_fill_request(&buffer, 0, 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	if (ret)
+ 		return ret;
+ 	status = buffer.output[1];
+ 
+ 	dell_fill_request(&buffer, 0x2, 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	if (ret)
+ 		return ret;
+ 	hwswitch = buffer.output[1];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
  	/* If the hardware switch controls this radio, and the hardware
  	   switch is disabled, always disable the radio */
@@@ -482,28 -492,21 +523,41 @@@
  	    (status & BIT(0)) && !(status & BIT(16)))
  		disable = 1;
  
++<<<<<<< HEAD
 +	dell_smbios_clear_buffer();
 +
 +	buffer->input[0] = (1 | (radio<<8) | (disable << 16));
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +
 + out:
 +	dell_smbios_release_buffer();
 +	return dell_smbios_error(ret);
++=======
+ 	dell_fill_request(&buffer, 1 | (radio<<8) | (disable << 16), 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	return ret;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  }
  
 +/* Must be called with the buffer held */
  static void dell_rfkill_update_sw_state(struct rfkill *rfkill, int radio,
 -					int status)
 +					int status,
 +					struct calling_interface_buffer *buffer)
  {
  	if (status & BIT(0)) {
  		/* Has hw-switch, sync sw_state to BIOS */
+ 		struct calling_interface_buffer buffer;
  		int block = rfkill_blocked(rfkill);
++<<<<<<< HEAD
 +		dell_smbios_clear_buffer();
 +		buffer->input[0] = (1 | (radio << 8) | (block << 16));
 +		dell_smbios_send_request(17, 11);
++=======
+ 		dell_fill_request(&buffer,
+ 				   1 | (radio << 8) | (block << 16), 0, 0, 0);
+ 		dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	} else {
  		/* No hw-switch, sync BIOS state to sw_state */
  		rfkill_set_sw_state(rfkill, !!(status & BIT(radio + 16)));
@@@ -519,31 -522,23 +573,44 @@@ static void dell_rfkill_update_hw_state
  
  static void dell_rfkill_query(struct rfkill *rfkill, void *data)
  {
 +	struct calling_interface_buffer *buffer;
  	int radio = ((unsigned long)data & 0xF);
+ 	struct calling_interface_buffer buffer;
  	int hwswitch;
  	int status;
  	int ret;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +	status = buffer->output[1];
++=======
+ 	dell_fill_request(&buffer, 0, 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	status = buffer.output[1];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
  	if (ret != 0 || !(status & BIT(0))) {
 +		dell_smbios_release_buffer();
  		return;
  	}
  
++<<<<<<< HEAD
 +	dell_smbios_clear_buffer();
 +
 +	buffer->input[0] = 0x2;
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +	hwswitch = buffer->output[1];
++=======
+ 	dell_fill_request(&buffer, 0, 0x2, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	hwswitch = buffer.output[1];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
 +
 +	dell_smbios_release_buffer();
  
  	if (ret != 0)
  		return;
@@@ -560,26 -555,23 +627,44 @@@ static struct dentry *dell_laptop_dir
  
  static int dell_debugfs_show(struct seq_file *s, void *data)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	int hwswitch_state;
  	int hwswitch_ret;
  	int status;
  	int ret;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +	status = buffer->output[1];
 +
 +	dell_smbios_clear_buffer();
 +
 +	buffer->input[0] = 0x2;
 +	dell_smbios_send_request(17, 11);
 +	hwswitch_ret = buffer->output[0];
 +	hwswitch_state = buffer->output[1];
++=======
+ 	dell_fill_request(&buffer, 0, 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	if (ret)
+ 		return ret;
+ 	status = buffer.output[1];
+ 
+ 	dell_fill_request(&buffer, 0, 0x2, 0, 0);
+ 	hwswitch_ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	if (hwswitch_ret)
+ 		return hwswitch_ret;
+ 	hwswitch_state = buffer.output[1];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
 +
 +	dell_smbios_release_buffer();
  
  	seq_printf(s, "return:\t%d\n", ret);
  	seq_printf(s, "status:\t0x%X\n", status);
@@@ -660,28 -652,23 +745,43 @@@ static const struct file_operations del
  
  static void dell_update_rfkill(struct work_struct *ignored)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	int hwswitch = 0;
  	int status;
  	int ret;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +	status = buffer->output[1];
++=======
+ 	dell_fill_request(&buffer, 0, 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	status = buffer.output[1];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
  	if (ret != 0)
 -		return;
 +		goto out;
  
++<<<<<<< HEAD
 +	dell_smbios_clear_buffer();
 +
 +	buffer->input[0] = 0x2;
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
++=======
+ 	dell_fill_request(&buffer, 0, 0x2, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
  	if (ret == 0 && (status & BIT(0)))
- 		hwswitch = buffer->output[1];
+ 		hwswitch = buffer.output[1];
  
  	if (wifi_rfkill) {
  		dell_rfkill_update_hw_state(wifi_rfkill, 1, status, hwswitch);
@@@ -743,7 -726,7 +843,11 @@@ static struct notifier_block dell_lapto
  
  static int __init dell_setup_rfkill(void)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	int status, ret, whitelisted;
  	const char *product;
  
@@@ -759,11 -742,9 +863,17 @@@
  	if (!force_rfkill && !whitelisted)
  		return 0;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +	dell_smbios_send_request(17, 11);
 +	ret = buffer->output[0];
 +	status = buffer->output[1];
 +	dell_smbios_release_buffer();
++=======
+ 	dell_fill_request(&buffer, 0, 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_INFO, SELECT_RFKILL);
+ 	status = buffer.output[1];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
  	/* dell wireless info smbios call is not supported */
  	if (ret != 0)
@@@ -916,7 -897,7 +1026,11 @@@ static void dell_cleanup_rfkill(void
  
  static int dell_send_intensity(struct backlight_device *bd)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	struct calling_interface_token *token;
  	int ret;
  
@@@ -924,24 -905,21 +1038,39 @@@
  	if (!token)
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +	buffer->input[0] = token->location;
 +	buffer->input[1] = bd->props.brightness;
++=======
+ 	dell_fill_request(&buffer,
+ 			   token->location, bd->props.brightness, 0, 0);
+ 	if (power_supply_is_system_supplied() > 0)
+ 		ret = dell_send_request(&buffer,
+ 					CLASS_TOKEN_WRITE, SELECT_TOKEN_AC);
+ 	else
+ 		ret = dell_send_request(&buffer,
+ 					CLASS_TOKEN_WRITE, SELECT_TOKEN_BAT);
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
 +	if (power_supply_is_system_supplied() > 0)
 +		dell_smbios_send_request(1, 2);
 +	else
 +		dell_smbios_send_request(1, 1);
 +
 +	ret = dell_smbios_error(buffer->output[0]);
 +
 +	dell_smbios_release_buffer();
  	return ret;
  }
  
  static int dell_get_intensity(struct backlight_device *bd)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	struct calling_interface_token *token;
  	int ret;
  
@@@ -949,20 -927,17 +1078,34 @@@
  	if (!token)
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +	buffer->input[0] = token->location;
 +
 +	if (power_supply_is_system_supplied() > 0)
 +		dell_smbios_send_request(0, 2);
 +	else
 +		dell_smbios_send_request(0, 1);
 +
 +	if (buffer->output[0])
 +		ret = dell_smbios_error(buffer->output[0]);
 +	else
 +		ret = buffer->output[1];
 +
 +	dell_smbios_release_buffer();
++=======
+ 	dell_fill_request(&buffer, token->location, 0, 0, 0);
+ 	if (power_supply_is_system_supplied() > 0)
+ 		ret = dell_send_request(&buffer,
+ 					CLASS_TOKEN_READ, SELECT_TOKEN_AC);
+ 	else
+ 		ret = dell_send_request(&buffer,
+ 					CLASS_TOKEN_READ, SELECT_TOKEN_BAT);
+ 
+ 	if (ret == 0)
+ 		ret = buffer.output[1];
+ 
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	return ret;
  }
  
@@@ -1225,41 -1202,34 +1368,53 @@@ static bool kbd_led_present
  
  static int kbd_get_info(struct kbd_info *info)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
 +	u8 units;
 +	int ret;
 +
 +	buffer = dell_smbios_get_buffer();
 +
 +	buffer->input[0] = 0x0;
 +	dell_smbios_send_request(4, 11);
 +	ret = buffer->output[0];
 +
 +	if (ret) {
 +		ret = dell_smbios_error(ret);
 +		goto out;
 +	}
++=======
+ 	struct calling_interface_buffer buffer;
+ 	u8 units;
+ 	int ret;
  
- 	info->modes = buffer->output[1] & 0xFFFF;
- 	info->type = (buffer->output[1] >> 24) & 0xFF;
- 	info->triggers = buffer->output[2] & 0xFF;
- 	units = (buffer->output[2] >> 8) & 0xFF;
- 	info->levels = (buffer->output[2] >> 16) & 0xFF;
+ 	dell_fill_request(&buffer, 0, 0, 0, 0);
+ 	ret = dell_send_request(&buffer,
+ 				CLASS_KBD_BACKLIGHT, SELECT_KBD_BACKLIGHT);
+ 	if (ret)
+ 		return ret;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
+ 
+ 	info->modes = buffer.output[1] & 0xFFFF;
+ 	info->type = (buffer.output[1] >> 24) & 0xFF;
+ 	info->triggers = buffer.output[2] & 0xFF;
+ 	units = (buffer.output[2] >> 8) & 0xFF;
+ 	info->levels = (buffer.output[2] >> 16) & 0xFF;
  
  	if (quirks && quirks->kbd_led_levels_off_1 && info->levels)
  		info->levels--;
  
  	if (units & BIT(0))
- 		info->seconds = (buffer->output[3] >> 0) & 0xFF;
+ 		info->seconds = (buffer.output[3] >> 0) & 0xFF;
  	if (units & BIT(1))
- 		info->minutes = (buffer->output[3] >> 8) & 0xFF;
+ 		info->minutes = (buffer.output[3] >> 8) & 0xFF;
  	if (units & BIT(2))
- 		info->hours = (buffer->output[3] >> 16) & 0xFF;
+ 		info->hours = (buffer.output[3] >> 16) & 0xFF;
  	if (units & BIT(3))
- 		info->days = (buffer->output[3] >> 24) & 0xFF;
+ 		info->days = (buffer.output[3] >> 24) & 0xFF;
  
 + out:
 +	dell_smbios_release_buffer();
  	return ret;
  }
  
@@@ -1318,58 -1288,51 +1473,87 @@@ static int kbd_set_level(struct kbd_sta
  
  static int kbd_get_state(struct kbd_state *state)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
 +	int ret;
 +
 +	buffer = dell_smbios_get_buffer();
 +
 +	buffer->input[0] = 0x1;
 +	dell_smbios_send_request(4, 11);
 +	ret = buffer->output[0];
 +
 +	if (ret) {
 +		ret = dell_smbios_error(ret);
 +		goto out;
 +	}
++=======
+ 	struct calling_interface_buffer buffer;
+ 	int ret;
  
- 	state->mode_bit = ffs(buffer->output[1] & 0xFFFF);
+ 	dell_fill_request(&buffer, 0, 0, 0, 0);
+ 	ret = dell_send_request(&buffer,
+ 				CLASS_KBD_BACKLIGHT, SELECT_KBD_BACKLIGHT);
+ 	if (ret)
+ 		return ret;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
+ 
+ 	state->mode_bit = ffs(buffer.output[1] & 0xFFFF);
  	if (state->mode_bit != 0)
  		state->mode_bit--;
  
- 	state->triggers = (buffer->output[1] >> 16) & 0xFF;
- 	state->timeout_value = (buffer->output[1] >> 24) & 0x3F;
- 	state->timeout_unit = (buffer->output[1] >> 30) & 0x3;
- 	state->als_setting = buffer->output[2] & 0xFF;
- 	state->als_value = (buffer->output[2] >> 8) & 0xFF;
- 	state->level = (buffer->output[2] >> 16) & 0xFF;
- 	state->timeout_value_ac = (buffer->output[2] >> 24) & 0x3F;
- 	state->timeout_unit_ac = (buffer->output[2] >> 30) & 0x3;
+ 	state->triggers = (buffer.output[1] >> 16) & 0xFF;
+ 	state->timeout_value = (buffer.output[1] >> 24) & 0x3F;
+ 	state->timeout_unit = (buffer.output[1] >> 30) & 0x3;
+ 	state->als_setting = buffer.output[2] & 0xFF;
+ 	state->als_value = (buffer.output[2] >> 8) & 0xFF;
+ 	state->level = (buffer.output[2] >> 16) & 0xFF;
+ 	state->timeout_value_ac = (buffer.output[2] >> 24) & 0x3F;
+ 	state->timeout_unit_ac = (buffer.output[2] >> 30) & 0x3;
  
 + out:
 +	dell_smbios_release_buffer();
  	return ret;
  }
  
  static int kbd_set_state(struct kbd_state *state)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	int ret;
 -	u32 input1;
 -	u32 input2;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +	buffer->input[0] = 0x2;
 +	buffer->input[1] = BIT(state->mode_bit) & 0xFFFF;
 +	buffer->input[1] |= (state->triggers & 0xFF) << 16;
 +	buffer->input[1] |= (state->timeout_value & 0x3F) << 24;
 +	buffer->input[1] |= (state->timeout_unit & 0x3) << 30;
 +	buffer->input[2] = state->als_setting & 0xFF;
 +	buffer->input[2] |= (state->level & 0xFF) << 16;
 +	buffer->input[2] |= (state->timeout_value_ac & 0x3F) << 24;
 +	buffer->input[2] |= (state->timeout_unit_ac & 0x3) << 30;
 +	dell_smbios_send_request(4, 11);
 +	ret = buffer->output[0];
 +	dell_smbios_release_buffer();
++=======
+ 	input1 = BIT(state->mode_bit) & 0xFFFF;
+ 	input1 |= (state->triggers & 0xFF) << 16;
+ 	input1 |= (state->timeout_value & 0x3F) << 24;
+ 	input1 |= (state->timeout_unit & 0x3) << 30;
+ 	input2 = state->als_setting & 0xFF;
+ 	input2 |= (state->level & 0xFF) << 16;
+ 	input2 |= (state->timeout_value_ac & 0x3F) << 24;
+ 	input2 |= (state->timeout_unit_ac & 0x3) << 30;
+ 	dell_fill_request(&buffer, 0x2, input1, input2, 0);
+ 	ret = dell_send_request(&buffer,
+ 				CLASS_KBD_BACKLIGHT, SELECT_KBD_BACKLIGHT);
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
 -	return ret;
 +	return dell_smbios_error(ret);
  }
  
  static int kbd_set_state_safe(struct kbd_state *state, struct kbd_state *old)
@@@ -1394,7 -1357,7 +1578,11 @@@
  
  static int kbd_set_token_bit(u8 bit)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	struct calling_interface_token *token;
  	int ret;
  
@@@ -1405,19 -1368,15 +1593,28 @@@
  	if (!token)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +	buffer->input[0] = token->location;
 +	buffer->input[1] = token->value;
 +	dell_smbios_send_request(1, 0);
 +	ret = buffer->output[0];
 +	dell_smbios_release_buffer();
++=======
+ 	dell_fill_request(&buffer, token->location, token->value, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_TOKEN_WRITE, SELECT_TOKEN_STD);
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
 -	return ret;
 +	return dell_smbios_error(ret);
  }
  
  static int kbd_get_token_bit(u8 bit)
  {
++<<<<<<< HEAD
 +	struct calling_interface_buffer *buffer;
++=======
+ 	struct calling_interface_buffer buffer;
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	struct calling_interface_token *token;
  	int ret;
  	int val;
@@@ -1429,15 -1388,12 +1626,21 @@@
  	if (!token)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	buffer = dell_smbios_get_buffer();
 +	buffer->input[0] = token->location;
 +	dell_smbios_send_request(0, 0);
 +	ret = buffer->output[0];
 +	val = buffer->output[1];
 +	dell_smbios_release_buffer();
++=======
+ 	dell_fill_request(&buffer, token->location, 0, 0, 0);
+ 	ret = dell_send_request(&buffer, CLASS_TOKEN_READ, SELECT_TOKEN_STD);
+ 	val = buffer.output[1];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  
  	if (ret)
 -		return ret;
 +		return dell_smbios_error(ret);
  
  	return (val == token->value);
  }
@@@ -2081,9 -2092,62 +2284,66 @@@ static void kbd_led_exit(void
  	led_classdev_unregister(&kbd_led);
  }
  
++<<<<<<< HEAD
++=======
+ static int dell_laptop_notifier_call(struct notifier_block *nb,
+ 				     unsigned long action, void *data)
+ {
+ 	bool changed = false;
+ 	enum led_brightness new_kbd_led_level;
+ 
+ 	switch (action) {
+ 	case DELL_LAPTOP_KBD_BACKLIGHT_BRIGHTNESS_CHANGED:
+ 		if (!kbd_led_present)
+ 			break;
+ 
+ 		mutex_lock(&kbd_led_mutex);
+ 		new_kbd_led_level = kbd_led_level_get(&kbd_led);
+ 		if (kbd_led_level != new_kbd_led_level) {
+ 			kbd_led_level = new_kbd_led_level;
+ 			changed = true;
+ 		}
+ 		mutex_unlock(&kbd_led_mutex);
+ 
+ 		if (changed)
+ 			led_classdev_notify_brightness_hw_changed(&kbd_led,
+ 								kbd_led_level);
+ 		break;
+ 	}
+ 
+ 	return NOTIFY_OK;
+ }
+ 
+ static struct notifier_block dell_laptop_notifier = {
+ 	.notifier_call = dell_laptop_notifier_call,
+ };
+ 
+ int dell_micmute_led_set(int state)
+ {
+ 	struct calling_interface_buffer buffer;
+ 	struct calling_interface_token *token;
+ 
+ 	if (state == 0)
+ 		token = dell_smbios_find_token(GLOBAL_MIC_MUTE_DISABLE);
+ 	else if (state == 1)
+ 		token = dell_smbios_find_token(GLOBAL_MIC_MUTE_ENABLE);
+ 	else
+ 		return -EINVAL;
+ 
+ 	if (!token)
+ 		return -ENODEV;
+ 
+ 	dell_fill_request(&buffer, token->location, token->value, 0, 0);
+ 	dell_send_request(&buffer, CLASS_TOKEN_WRITE, SELECT_TOKEN_STD);
+ 
+ 	return state;
+ }
+ EXPORT_SYMBOL_GPL(dell_micmute_led_set);
+ 
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  static int __init dell_init(void)
  {
 +	struct calling_interface_buffer *buffer;
  	struct calling_interface_token *token;
  	int max_intensity = 0;
  	int ret;
@@@ -2107,11 -2171,6 +2367,14 @@@
  	if (ret)
  		goto fail_platform_device2;
  
++<<<<<<< HEAD
 +	buffer = kzalloc(sizeof(struct calling_interface_buffer), GFP_KERNEL);
 +	if (!buffer)
 +		goto fail_buffer;
 +
 +
++=======
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	ret = dell_setup_rfkill();
  
  	if (ret) {
@@@ -2139,12 -2195,13 +2402,22 @@@
  
  	token = dell_smbios_find_token(BRIGHTNESS_TOKEN);
  	if (token) {
++<<<<<<< HEAD
 +		buffer = dell_smbios_get_buffer();
 +		buffer->input[0] = token->location;
 +		dell_smbios_send_request(0, 2);
 +		if (buffer->output[0] == 0)
 +			max_intensity = buffer->output[3];
 +		dell_smbios_release_buffer();
++=======
+ 		struct calling_interface_buffer buffer;
+ 
+ 		dell_fill_request(&buffer, token->location, 0, 0, 0);
+ 		ret = dell_send_request(&buffer,
+ 					CLASS_TOKEN_READ, SELECT_TOKEN_AC);
+ 		if (ret)
+ 			max_intensity = buffer.output[3];
++>>>>>>> 9862b43624a5 (platform/x86: dell-laptop: Allocate buffer on heap rather than globally)
  	}
  
  	if (max_intensity) {
* Unmerged path drivers/platform/x86/dell-laptop.c
