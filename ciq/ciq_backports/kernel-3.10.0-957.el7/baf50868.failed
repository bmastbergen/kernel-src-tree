cxgb4: restructure VF mgmt code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ganesh Goudar <ganeshgr@chelsio.com>
commit baf5086840ab1815003e6ece5a51c1a803f81f47
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/baf50868.failed

restructure the code which adds support for configuring
PCIe VF via mgmt netdevice. which was added by
commit 7829451c695e ("cxgb4: Add control net_device for
configuring PCIe VF")

Original work by: Casey Leedom <leedom@chelsio.com>
	Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit baf5086840ab1815003e6ece5a51c1a803f81f47)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index 2f33812ed9d0,11fe5961040a..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@@ -2662,20 -2676,8 +2669,25 @@@ static int cxgb4_mgmt_set_vf_mac(struc
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int cxgb_get_phys_port_id(struct net_device *dev,
 +				 struct netdev_phys_item_id *ppid)
 +{
 +	struct port_info *pi = netdev_priv(dev);
 +	unsigned int phy_port_id;
 +
 +	phy_port_id = pi->adapter->adap_idx * 10 + pi->port_id;
 +	ppid->id_len = sizeof(phy_port_id);
 +	memcpy(ppid->id, &phy_port_id, ppid->id_len);
 +	return 0;
 +}
 +
 +static int cxgb_get_vf_config(struct net_device *dev,
 +			      int vf, struct ifla_vf_info *ivi)
++=======
+ static int cxgb4_mgmt_get_vf_config(struct net_device *dev,
+ 				    int vf, struct ifla_vf_info *ivi)
++>>>>>>> baf5086840ab (cxgb4: restructure VF mgmt code)
  {
  	struct port_info *pi = netdev_priv(dev);
  	struct adapter *adap = pi->adapter;
@@@ -2688,10 -2690,21 +2700,25 @@@
  	ether_addr_copy(ivi->mac, adap->vfinfo[vf].vf_mac_addr);
  	return 0;
  }
++<<<<<<< HEAD
 +#endif
++=======
+ 
+ static int cxgb4_mgmt_get_phys_port_id(struct net_device *dev,
+ 				       struct netdev_phys_item_id *ppid)
+ {
+ 	struct port_info *pi = netdev_priv(dev);
+ 	unsigned int phy_port_id;
+ 
+ 	phy_port_id = pi->adapter->adap_idx * 10 + pi->port_id;
+ 	ppid->id_len = sizeof(phy_port_id);
+ 	memcpy(ppid->id, &phy_port_id, ppid->id_len);
+ 	return 0;
+ }
++>>>>>>> baf5086840ab (cxgb4: restructure VF mgmt code)
  
- static int cxgb_set_vf_rate(struct net_device *dev, int vf, int min_tx_rate,
- 			    int max_tx_rate)
+ static int cxgb4_mgmt_set_vf_rate(struct net_device *dev, int vf,
+ 				  int min_tx_rate, int max_tx_rate)
  {
  	struct port_info *pi = netdev_priv(dev);
  	struct adapter *adap = pi->adapter;
@@@ -4941,40 -4929,9 +4969,43 @@@ static void cxgb4_mgmt_setup(struct net
  	/* Initialize the device structure. */
  	dev->netdev_ops = &cxgb4_mgmt_netdev_ops;
  	dev->ethtool_ops = &cxgb4_mgmt_ethtool_ops;
 -	dev->needs_free_netdev = true;
 +	dev->extended->needs_free_netdev = true;
 +}
 +
++<<<<<<< HEAD
 +static int config_mgmt_dev(struct pci_dev *pdev)
 +{
 +	struct adapter *adap = pci_get_drvdata(pdev);
 +	struct net_device *netdev;
 +	struct port_info *pi;
 +	char name[IFNAMSIZ];
 +	int err;
 +
 +	snprintf(name, IFNAMSIZ, "mgmtpf%d%d", adap->adap_idx, adap->pf);
 +	netdev = alloc_netdev(sizeof(struct port_info), name, dummy_setup);
 +	if (!netdev)
 +		return -ENOMEM;
 +
 +	pi = netdev_priv(netdev);
 +	pi->adapter = adap;
 +	pi->tx_chan = adap->pf % adap->params.nports;
 +	SET_NETDEV_DEV(netdev, &pdev->dev);
 +
 +	adap->port[0] = netdev;
 +	pi->port_id = 0;
 +
 +	err = register_netdev(adap->port[0]);
 +	if (err) {
 +		pr_info("Unable to register VF mgmt netdev %s\n", name);
 +		free_netdev(adap->port[0]);
 +		adap->port[0] = NULL;
 +		return err;
 +	}
 +	return 0;
  }
  
++=======
++>>>>>>> baf5086840ab (cxgb4: restructure VF mgmt code)
  static int cxgb4_iov_configure(struct pci_dev *pdev, int num_vfs)
  {
  	struct adapter *adap = pci_get_drvdata(pdev);
@@@ -5169,11 -5209,7 +5283,15 @@@ static int init_one(struct pci_dev *pde
  
  	spin_lock_init(&adapter->stats_lock);
  	spin_lock_init(&adapter->tid_release_lock);
++<<<<<<< HEAD
 +	spin_lock_init(&adapter->mbox_lock);
 +	spin_lock_init(&adapter->win0_lock);
 +
 +	INIT_LIST_HEAD(&adapter->mlist.list);
++=======
+ 	spin_lock_init(&adapter->win0_lock);
++>>>>>>> baf5086840ab (cxgb4: restructure VF mgmt code)
 +
  
  	INIT_WORK(&adapter->tid_release_task, process_tid_release_list);
  	INIT_WORK(&adapter->db_full_task, process_db_full);
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
index 667efce28115..f0971a835d6e 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h
@@ -312,6 +312,7 @@ struct vpd_params {
 };
 
 struct pci_params {
+	unsigned int vpd_cap_addr;
 	unsigned char speed;
 	unsigned char width;
 };
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
