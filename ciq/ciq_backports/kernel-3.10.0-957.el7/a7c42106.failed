usb: add user selectable option for the whole USB Type-C Support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [usb] add user selectable option for the whole USB Type-C Support (Torez Smith) [1540721]
Rebuild_FUZZ: 95.93%
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit a7c42106ead7041b99662a125b408deb68a3e6aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a7c42106.failed

It is more clear from user perspective to wrap the whole USB
Type-C support under a single option that the user can
select, then it is to always ask the user for every USB
Type-C and USB Power Delivery driver separately.

	Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit a7c42106ead7041b99662a125b408deb68a3e6aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/typec/Kconfig
diff --cc drivers/usb/typec/Kconfig
index 001c78bb2eef,bcb2744c5977..000000000000
--- a/drivers/usb/typec/Kconfig
+++ b/drivers/usb/typec/Kconfig
@@@ -1,9 -1,61 +1,64 @@@
  
- menu "USB Power Delivery and Type-C drivers"
+ menuconfig TYPEC
+ 	tristate "USB Type-C Support"
+ 	help
+ 	  USB Type-C Specification defines a cable and connector for USB where
+ 	  only one type of plug is supported on both ends, i.e. there will not
+ 	  be Type-A plug on one end of the cable and Type-B plug on the other.
+ 	  Determination of the host-to-device relationship happens through a
+ 	  specific Configuration Channel (CC) which goes through the USB Type-C
+ 	  cable. The Configuration Channel may also be used to detect optional
+ 	  Accessory Modes - Analog Audio and Debug - and if USB Power Delivery
+ 	  is supported, the Alternate Modes, where the connector is used for
+ 	  something else then USB communication.
+ 
+ 	  USB Power Delivery Specification defines a protocol that can be used
+ 	  to negotiate the voltage and current levels with the connected
+ 	  partners. USB Power Delivery allows higher voltages then the normal
+ 	  5V, up to 20V, and current up to 5A over the cable. The USB Power
+ 	  Delivery protocol is also used to negotiate the optional Alternate
+ 	  Modes when they are supported. USB Power Delivery does not depend on
+ 	  USB Type-C connector, however it is mostly used together with USB
+ 	  Type-C connectors.
+ 
+ 	  USB Type-C and USB Power Delivery Specifications define a set of state
+ 	  machines that need to be implemented in either software or firmware.
+ 	  Simple USB Type-C PHYs, for example USB Type-C Port Controller
+ 	  Interface Specification compliant "Port Controllers" need the state
+ 	  machines to be handled in the OS, but stand-alone USB Type-C and Power
+ 	  Delivery controllers handle the state machines inside their firmware.
+ 	  The USB Type-C and Power Delivery controllers usually function
+ 	  autonomously, and do not necessarily require drivers.
+ 
+ 	  Enable this configurations option if you have USB Type-C connectors on
+ 	  your system and 1) you know your USB Type-C hardware requires OS
+ 	  control (a driver) to function, or 2) if you need to be able to read
+ 	  the status of the USB Type-C ports in your system, or 3) if you need
+ 	  to be able to swap the power role (decide are you supplying or
+ 	  consuming power over the cable) or data role (host or device) when
+ 	  both roles are supported.
+ 
+ 	  For more information, see the kernel documentation for USB Type-C
+ 	  Connector Class API (Documentation/driver-api/usb/typec.rst)
+ 	  <https://www.kernel.org/doc/html/latest/driver-api/usb/typec.html>
+ 	  and ABI (Documentation/ABI/testing/sysfs-class-typec).
  
- config TYPEC
- 	tristate
+ if TYPEC
  
++<<<<<<< HEAD
++=======
+ config TYPEC_TCPM
+ 	tristate "USB Type-C Port Controller Manager"
+ 	depends on USB
+ 	help
+ 	  The Type-C Port Controller Manager provides a USB PD and USB Type-C
+ 	  state machine for use with Type-C Port Controllers.
+ 
+ if TYPEC_TCPM
+ 
+ source "drivers/usb/typec/fusb302/Kconfig"
+ 
++>>>>>>> a7c42106ead7 (usb: add user selectable option for the whole USB Type-C Support)
  config TYPEC_WCOVE
  	tristate "Intel WhiskeyCove PMIC USB Type-C PHY driver"
  	depends on ACPI
@@@ -19,6 -70,8 +73,11 @@@
  	  To compile this driver as module, choose M here: the module will be
  	  called typec_wcove
  
++<<<<<<< HEAD
++=======
+ endif # TYPEC_TCPM
+ 
++>>>>>>> a7c42106ead7 (usb: add user selectable option for the whole USB Type-C Support)
  source "drivers/usb/typec/ucsi/Kconfig"
  
  config TYPEC_TPS6598X
* Unmerged path drivers/usb/typec/Kconfig
diff --git a/drivers/usb/typec/ucsi/Kconfig b/drivers/usb/typec/ucsi/Kconfig
index d0c31cee4720..e36d6c73c4a4 100644
--- a/drivers/usb/typec/ucsi/Kconfig
+++ b/drivers/usb/typec/ucsi/Kconfig
@@ -1,7 +1,6 @@
 config TYPEC_UCSI
 	tristate "USB Type-C Connector System Software Interface driver"
 	depends on !CPU_BIG_ENDIAN
-	select TYPEC
 	help
 	  USB Type-C Connector System Software Interface (UCSI) is a
 	  specification for an interface that allows the operating system to
