scsi: megaraid_sas: Use zeroing memory allocator than allocator/memset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] megaraid_sas: Use zeroing memory allocator than allocator/memset (Tomas Henzl) [1513838]
Rebuild_FUZZ: 95.52%
commit-author Himanshu Jha <himanshujha199640@gmail.com>
commit 3c6c122cfcbc2264d8414d292ebe2803b7e20215
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/3c6c122c.failed

Use pci_zalloc_consistent for allocating zeroed memory and remove
unnecessary memset function.

Done using Coccinelle.
Generated by: scripts/coccinelle/api/alloc/kzalloc-simple.cocci

	Suggested-by: Luis R. Rodriguez <mcgrof@kernel.org>
	Signed-off-by: Himanshu Jha <himanshujha199640@gmail.com>
	Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 3c6c122cfcbc2264d8414d292ebe2803b7e20215)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_fusion.c
diff --cc drivers/scsi/megaraid/megaraid_sas_fusion.c
index e7751d9bff05,0f4d30359729..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@@ -539,30 -671,41 +539,40 @@@ megasas_alloc_reply_fusion(struct megas
  int
  megasas_alloc_rdpq_fusion(struct megasas_instance *instance)
  {
 -	int i, j, k, msix_count;
 +	int i, j, count;
  	struct fusion_context *fusion;
  	union MPI2_REPLY_DESCRIPTORS_UNION *reply_desc;
 -	union MPI2_REPLY_DESCRIPTORS_UNION *rdpq_chunk_virt[RDPQ_MAX_CHUNK_COUNT];
 -	dma_addr_t rdpq_chunk_phys[RDPQ_MAX_CHUNK_COUNT];
 -	u8 dma_alloc_count, abs_index;
 -	u32 chunk_size, array_size, offset;
  
  	fusion = instance->ctrl_context;
 -	chunk_size = fusion->reply_alloc_sz * RDPQ_MAX_INDEX_IN_ONE_CHUNK;
 -	array_size = sizeof(struct MPI2_IOC_INIT_RDPQ_ARRAY_ENTRY) *
 -		     MAX_MSIX_QUEUES_FUSION;
  
++<<<<<<< HEAD
 +	fusion->rdpq_virt = pci_alloc_consistent(instance->pdev,
 +				sizeof(struct MPI2_IOC_INIT_RDPQ_ARRAY_ENTRY) * MAX_MSIX_QUEUES_FUSION,
 +				&fusion->rdpq_phys);
++=======
+ 	fusion->rdpq_virt = pci_zalloc_consistent(instance->pdev, array_size,
+ 						  &fusion->rdpq_phys);
++>>>>>>> 3c6c122cfcbc (scsi: megaraid_sas: Use zeroing memory allocator than allocator/memset)
  	if (!fusion->rdpq_virt) {
  		dev_err(&instance->pdev->dev,
  			"Failed from %s %d\n",  __func__, __LINE__);
  		return -ENOMEM;
  	}
  
++<<<<<<< HEAD
 +	memset(fusion->rdpq_virt, 0,
 +			sizeof(struct MPI2_IOC_INIT_RDPQ_ARRAY_ENTRY) * MAX_MSIX_QUEUES_FUSION);
 +	count = instance->msix_vectors > 0 ? instance->msix_vectors : 1;
++=======
+ 	msix_count = instance->msix_vectors > 0 ? instance->msix_vectors : 1;
+ 
++>>>>>>> 3c6c122cfcbc (scsi: megaraid_sas: Use zeroing memory allocator than allocator/memset)
  	fusion->reply_frames_desc_pool = dma_pool_create("mr_rdpq",
  							 &instance->pdev->dev,
 -							 chunk_size, 16, 0);
 -	fusion->reply_frames_desc_pool_align =
 -				dma_pool_create("mr_rdpq_align",
 -						&instance->pdev->dev,
 -						chunk_size,
 -						roundup_pow_of_two(chunk_size),
 -						0);
 -
 -	if (!fusion->reply_frames_desc_pool ||
 -	    !fusion->reply_frames_desc_pool_align) {
 +							 fusion->reply_alloc_sz,
 +							 16, 0);
 +
 +	if (!fusion->reply_frames_desc_pool) {
  		dev_err(&instance->pdev->dev,
  			"Failed from %s %d\n",  __func__, __LINE__);
  		return -ENOMEM;
diff --git a/drivers/scsi/megaraid/megaraid_sas_base.c b/drivers/scsi/megaraid/megaraid_sas_base.c
index c999b3ce3835..ac29facfd85a 100644
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@ -2192,9 +2192,9 @@ static int megasas_get_ld_vf_affiliation_111(struct megasas_instance *instance,
 			       sizeof(struct MR_LD_VF_AFFILIATION_111));
 	else {
 		new_affiliation_111 =
-			pci_alloc_consistent(instance->pdev,
-					     sizeof(struct MR_LD_VF_AFFILIATION_111),
-					     &new_affiliation_111_h);
+			pci_zalloc_consistent(instance->pdev,
+					      sizeof(struct MR_LD_VF_AFFILIATION_111),
+					      &new_affiliation_111_h);
 		if (!new_affiliation_111) {
 			dev_printk(KERN_DEBUG, &instance->pdev->dev, "SR-IOV: Couldn't allocate "
 			       "memory for new affiliation for scsi%d\n",
@@ -2202,8 +2202,6 @@ static int megasas_get_ld_vf_affiliation_111(struct megasas_instance *instance,
 			megasas_return_cmd(instance, cmd);
 			return -ENOMEM;
 		}
-		memset(new_affiliation_111, 0,
-		       sizeof(struct MR_LD_VF_AFFILIATION_111));
 	}
 
 	memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE);
@@ -2301,10 +2299,10 @@ static int megasas_get_ld_vf_affiliation_12(struct megasas_instance *instance,
 		       sizeof(struct MR_LD_VF_AFFILIATION));
 	else {
 		new_affiliation =
-			pci_alloc_consistent(instance->pdev,
-					     (MAX_LOGICAL_DRIVES + 1) *
-					     sizeof(struct MR_LD_VF_AFFILIATION),
-					     &new_affiliation_h);
+			pci_zalloc_consistent(instance->pdev,
+					      (MAX_LOGICAL_DRIVES + 1) *
+					      sizeof(struct MR_LD_VF_AFFILIATION),
+					      &new_affiliation_h);
 		if (!new_affiliation) {
 			dev_printk(KERN_DEBUG, &instance->pdev->dev, "SR-IOV: Couldn't allocate "
 			       "memory for new affiliation for scsi%d\n",
@@ -2312,8 +2310,6 @@ static int megasas_get_ld_vf_affiliation_12(struct megasas_instance *instance,
 			megasas_return_cmd(instance, cmd);
 			return -ENOMEM;
 		}
-		memset(new_affiliation, 0, (MAX_LOGICAL_DRIVES + 1) *
-		       sizeof(struct MR_LD_VF_AFFILIATION));
 	}
 
 	memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE);
@@ -5623,16 +5619,15 @@ megasas_get_seq_num(struct megasas_instance *instance,
 	}
 
 	dcmd = &cmd->frame->dcmd;
-	el_info = pci_alloc_consistent(instance->pdev,
-				       sizeof(struct megasas_evt_log_info),
-				       &el_info_h);
+	el_info = pci_zalloc_consistent(instance->pdev,
+					sizeof(struct megasas_evt_log_info),
+					&el_info_h);
 
 	if (!el_info) {
 		megasas_return_cmd(instance, cmd);
 		return -ENOMEM;
 	}
 
-	memset(el_info, 0, sizeof(*el_info));
 	memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE);
 
 	dcmd->cmd = MFI_CMD_DCMD;
* Unmerged path drivers/scsi/megaraid/megaraid_sas_fusion.c
