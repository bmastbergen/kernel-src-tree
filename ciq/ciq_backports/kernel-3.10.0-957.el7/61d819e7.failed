xfs: don't allow bmap on rt files

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit 61d819e7bcb7f33da710bf3f5dcb2bcf1e48203c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/61d819e7.failed

bmap returns a dumb LBA address but not the block device that goes with
that LBA.  Swapfiles don't care about this and will blindly assume that
the data volume is the correct blockdev, which is totally bogus for
files on the rt subvolume.  This results in the swap code doing IOs to
arbitrary locations on the data device(!) if the passed in mapping is a
realtime file, so just turn off bmap for rt files.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 61d819e7bcb7f33da710bf3f5dcb2bcf1e48203c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_aops.c
diff --cc fs/xfs/xfs_aops.c
index 27f979ff685f,716b5eeeed94..000000000000
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@@ -1779,9 -1311,20 +1779,25 @@@ xfs_vm_bmap
  	struct xfs_inode	*ip = XFS_I(inode);
  
  	trace_xfs_vm_bmap(XFS_I(inode));
++<<<<<<< HEAD
 +	xfs_ilock(ip, XFS_IOLOCK_SHARED);
++=======
+ 
+ 	/*
+ 	 * The swap code (ab-)uses ->bmap to get a block mapping and then
+ 	 * bypasseÑ• the file system for actual I/O.  We really can't allow
+ 	 * that on reflinks inodes, so we have to skip out here.  And yes,
+ 	 * 0 is the magic code for a bmap error.
+ 	 *
+ 	 * Since we don't pass back blockdev info, we can't return bmap
+ 	 * information for rt files either.
+ 	 */
+ 	if (xfs_is_reflink_inode(ip) || XFS_IS_REALTIME_INODE(ip))
+ 		return 0;
+ 
++>>>>>>> 61d819e7bcb7 (xfs: don't allow bmap on rt files)
  	filemap_write_and_wait(mapping);
 +	xfs_iunlock(ip, XFS_IOLOCK_SHARED);
  	return generic_block_bmap(mapping, block, xfs_get_blocks);
  }
  
* Unmerged path fs/xfs/xfs_aops.c
