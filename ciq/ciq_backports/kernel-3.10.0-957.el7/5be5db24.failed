HID: hid-sensor-hub: use devm_ functions consistently

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [hid] hid-sensor-hub: use devm_ functions consistently (Tony Camuso) [1559170]
Rebuild_FUZZ: 95.05%
commit-author Himangi Saraogi <himangi774@gmail.com>
commit 5be5db24fc0883d9e38df378c1de9a00f8933999
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5be5db24.failed

Use devm_kzalloc for all calls to kzalloc and not just the first.  Use
devm functions for other allocations as well. The calls to free the
allocated memory in the probe and remove functions are done away with
and a label is removed in the probe function.

The semantic match that finds the inconsistency is as follows:

// <smpl>
@@
@@

*devm_kzalloc(...)
...
*kzalloc(...)
// </smpl>

	Signed-off-by: Himangi Saraogi <himangi774@gmail.com>
	Acked-by: Julia Lawall <julia.lawall@lip6.fr>
	Reviewed-by: Srinivas Pandruvada <srinivas.pandruvada@intel.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 5be5db24fc0883d9e38df378c1de9a00f8933999)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-sensor-hub.c
diff --cc drivers/hid/hid-sensor-hub.c
index 3e67ed86c707,2ac25760a9a9..000000000000
--- a/drivers/hid/hid-sensor-hub.c
+++ b/drivers/hid/hid-sensor-hub.c
@@@ -587,20 -612,37 +587,50 @@@ static int sensor_hub_probe(struct hid_
  			ret = -ENOMEM;
  			goto err_stop_hw;
  	}
++<<<<<<< HEAD
 +	list_for_each_entry(report, &report_enum->report_list, list) {
 +		hid_dbg(hdev, "Report id:%x\n", report->id);
 +		field = report->field[0];
 +		if (report->maxfield && field &&
 +					field->physical) {
 +			name = kasprintf(GFP_KERNEL, "HID-SENSOR-%x",
 +						field->physical);
 +			if (name  == NULL) {
 +				hid_err(hdev, "Failed MFD device name\n");
 +					ret = -ENOMEM;
 +					goto err_free_names;
++=======
+ 
+ 	for (i = 0; i < hdev->maxcollection; ++i) {
+ 		struct hid_collection *collection = &hdev->collection[i];
+ 
+ 		if (collection->type == HID_COLLECTION_PHYSICAL) {
+ 
+ 			hsdev = devm_kzalloc(&hdev->dev, sizeof(*hsdev),
+ 					     GFP_KERNEL);
+ 			if (!hsdev) {
+ 				hid_err(hdev, "cannot allocate hid_sensor_hub_device\n");
+ 				ret = -ENOMEM;
+ 				goto err_stop_hw;
+ 			}
+ 			hsdev->hdev = hdev;
+ 			hsdev->vendor_id = hdev->vendor;
+ 			hsdev->product_id = hdev->product;
+ 			hsdev->start_collection_index = i;
+ 			if (last_hsdev)
+ 				last_hsdev->end_collection_index = i;
+ 			last_hsdev = hsdev;
+ 			name = devm_kasprintf(&hdev->dev, GFP_KERNEL,
+ 					      "HID-SENSOR-%x",
+ 					      collection->usage);
+ 			if (name == NULL) {
+ 				hid_err(hdev, "Failed MFD device name\n");
+ 					ret = -ENOMEM;
+ 					goto err_stop_hw;
++>>>>>>> 5be5db24fc08 (HID: hid-sensor-hub: use devm_ functions consistently)
  			}
  			sd->hid_sensor_hub_client_devs[
 -				sd->hid_sensor_client_cnt].id =
 -							PLATFORM_DEVID_AUTO;
 +				sd->hid_sensor_client_cnt].id = PLATFORM_DEVID_AUTO;
  			sd->hid_sensor_hub_client_devs[
  				sd->hid_sensor_client_cnt].name = name;
  			sd->hid_sensor_hub_client_devs[
@@@ -616,14 -659,13 +646,21 @@@
  	ret = mfd_add_devices(&hdev->dev, 0, sd->hid_sensor_hub_client_devs,
  		sd->hid_sensor_client_cnt, NULL, 0, NULL);
  	if (ret < 0)
++<<<<<<< HEAD
 +		goto err_free_names;
 +
 +	return ret;
 +
 +err_free_names:
 +	for (i = 0; i < sd->hid_sensor_client_cnt ; ++i)
 +		kfree(sd->hid_sensor_hub_client_devs[i].name);
 +	kfree(sd->hid_sensor_hub_client_devs);
++=======
+ 		goto err_stop_hw;
+ 
+ 	return ret;
+ 
++>>>>>>> 5be5db24fc08 (HID: hid-sensor-hub: use devm_ functions consistently)
  err_stop_hw:
  	hid_hw_stop(hdev);
  
@@@ -644,9 -685,6 +680,12 @@@ static void sensor_hub_remove(struct hi
  		complete(&data->pending.ready);
  	spin_unlock_irqrestore(&data->lock, flags);
  	mfd_remove_devices(&hdev->dev);
++<<<<<<< HEAD
 +	for (i = 0; i < data->hid_sensor_client_cnt ; ++i)
 +		kfree(data->hid_sensor_hub_client_devs[i].name);
 +	kfree(data->hid_sensor_hub_client_devs);
++=======
++>>>>>>> 5be5db24fc08 (HID: hid-sensor-hub: use devm_ functions consistently)
  	hid_set_drvdata(hdev, NULL);
  	mutex_destroy(&data->mutex);
  }
* Unmerged path drivers/hid/hid-sensor-hub.c
