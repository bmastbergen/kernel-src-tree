mm/ksm: Remove now-redundant smp_read_barrier_depends()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [infiniband] Remove now-redundant smp_read_barrier_depends() (Alex Estrin) [1501293 1483561]
Rebuild_FUZZ: 92.16%
commit-author Paul E. McKenney <paulmck@linux.vnet.ibm.com>
commit 08df477434754629303c9e2bfa8d67ecb44f9c20
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/08df4774.failed

Because READ_ONCE() now implies smp_read_barrier_depends(), the
smp_read_barrier_depends() in get_ksm_page() is now redundant.
This commit removes it and updates the comments.

	Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com>
	Cc: Claudio Imbrenda <imbrenda@linux.vnet.ibm.com>
	Cc: <linux-mm@kvack.org>
(cherry picked from commit 08df477434754629303c9e2bfa8d67ecb44f9c20)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/ksm.c
diff --cc mm/ksm.c
index 1813339bf866,c406f75957ad..000000000000
--- a/mm/ksm.c
+++ b/mm/ksm.c
@@@ -670,19 -672,12 +670,25 @@@ static struct page *get_ksm_page(struc
  	void *expected_mapping;
  	unsigned long kpfn;
  
 -	expected_mapping = (void *)((unsigned long)stable_node |
 -					PAGE_MAPPING_KSM);
 +	expected_mapping = (void *)stable_node +
 +				(PAGE_MAPPING_ANON | PAGE_MAPPING_KSM);
  again:
++<<<<<<< HEAD
 +	kpfn = ACCESS_ONCE(stable_node->kpfn);
 +	page = pfn_to_page(kpfn);
 +
 +	/*
 +	 * page is computed from kpfn, so on most architectures reading
 +	 * page->mapping is naturally ordered after reading node->kpfn,
 +	 * but on Alpha we need to be more careful.
 +	 */
 +	smp_read_barrier_depends();
 +	if (ACCESS_ONCE(page->mapping) != expected_mapping)
++=======
+ 	kpfn = READ_ONCE(stable_node->kpfn); /* Address dependency. */
+ 	page = pfn_to_page(kpfn);
+ 	if (READ_ONCE(page->mapping) != expected_mapping)
++>>>>>>> 08df47743475 (mm/ksm: Remove now-redundant smp_read_barrier_depends())
  		goto stale;
  
  	/*
* Unmerged path mm/ksm.c
