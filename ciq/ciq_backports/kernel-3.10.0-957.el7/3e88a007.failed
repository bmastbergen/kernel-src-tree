xfs: replace log_badcrc_factor knob with error injection tag

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Brian Foster <bfoster@redhat.com>
commit 3e88a0078ba8ef61816c85d33131827b4a307852
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/3e88a007.failed

Now that error injection tags support dynamic frequency adjustment,
replace the debug mode sysfs knob that controls log record CRC error
injection with an error injection tag.

	Signed-off-by: Brian Foster <bfoster@redhat.com>
	Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 3e88a0078ba8ef61816c85d33131827b4a307852)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/xfs_error.c
#	fs/xfs/xfs_error.h
diff --cc fs/xfs/xfs_error.c
index e2278af6aed1,26c32bc5cd34..000000000000
--- a/fs/xfs/xfs_error.c
+++ b/fs/xfs/xfs_error.c
@@@ -55,6 -55,8 +55,11 @@@ static unsigned int xfs_errortag_random
  	XFS_RANDOM_REFCOUNT_FINISH_ONE,
  	XFS_RANDOM_BMAP_FINISH_ONE,
  	XFS_RANDOM_AG_RESV_CRITICAL,
++<<<<<<< HEAD
++=======
+ 	XFS_RANDOM_DROP_WRITES,
+ 	XFS_RANDOM_LOG_BAD_CRC,
++>>>>>>> 3e88a0078ba8 (xfs: replace log_badcrc_factor knob with error injection tag)
  };
  
  struct xfs_errortag_attr {
@@@ -157,6 -159,8 +162,11 @@@ XFS_ERRORTAG_ATTR_RW(refcount_continue_
  XFS_ERRORTAG_ATTR_RW(refcount_finish_one,	XFS_ERRTAG_REFCOUNT_FINISH_ONE);
  XFS_ERRORTAG_ATTR_RW(bmap_finish_one,	XFS_ERRTAG_BMAP_FINISH_ONE);
  XFS_ERRORTAG_ATTR_RW(ag_resv_critical,	XFS_ERRTAG_AG_RESV_CRITICAL);
++<<<<<<< HEAD
++=======
+ XFS_ERRORTAG_ATTR_RW(drop_writes,	XFS_ERRTAG_DROP_WRITES);
+ XFS_ERRORTAG_ATTR_RW(log_bad_crc,	XFS_ERRTAG_LOG_BAD_CRC);
++>>>>>>> 3e88a0078ba8 (xfs: replace log_badcrc_factor knob with error injection tag)
  
  static struct attribute *xfs_errortag_attrs[] = {
  	XFS_ERRORTAG_ATTR_LIST(noerror),
@@@ -187,6 -191,8 +197,11 @@@
  	XFS_ERRORTAG_ATTR_LIST(refcount_finish_one),
  	XFS_ERRORTAG_ATTR_LIST(bmap_finish_one),
  	XFS_ERRORTAG_ATTR_LIST(ag_resv_critical),
++<<<<<<< HEAD
++=======
+ 	XFS_ERRORTAG_ATTR_LIST(drop_writes),
+ 	XFS_ERRORTAG_ATTR_LIST(log_bad_crc),
++>>>>>>> 3e88a0078ba8 (xfs: replace log_badcrc_factor knob with error injection tag)
  	NULL,
  };
  
diff --cc fs/xfs/xfs_error.h
index 5f48fc573075,7577be5f09bc..000000000000
--- a/fs/xfs/xfs_error.h
+++ b/fs/xfs/xfs_error.h
@@@ -91,7 -91,22 +91,26 @@@ extern void xfs_verifier_error(struct x
  #define XFS_ERRTAG_DIOWRITE_IOERR			20
  #define XFS_ERRTAG_BMAPIFORMAT				21
  #define XFS_ERRTAG_FREE_EXTENT				22
++<<<<<<< HEAD
 +#define XFS_ERRTAG_MAX					23
++=======
+ #define XFS_ERRTAG_RMAP_FINISH_ONE			23
+ #define XFS_ERRTAG_REFCOUNT_CONTINUE_UPDATE		24
+ #define XFS_ERRTAG_REFCOUNT_FINISH_ONE			25
+ #define XFS_ERRTAG_BMAP_FINISH_ONE			26
+ #define XFS_ERRTAG_AG_RESV_CRITICAL			27
+ /*
+  * DEBUG mode instrumentation to test and/or trigger delayed allocation
+  * block killing in the event of failed writes. When enabled, all
+  * buffered writes are silenty dropped and handled as if they failed.
+  * All delalloc blocks in the range of the write (including pre-existing
+  * delalloc blocks!) are tossed as part of the write failure error
+  * handling sequence.
+  */
+ #define XFS_ERRTAG_DROP_WRITES				28
+ #define XFS_ERRTAG_LOG_BAD_CRC				29
+ #define XFS_ERRTAG_MAX					30
++>>>>>>> 3e88a0078ba8 (xfs: replace log_badcrc_factor knob with error injection tag)
  
  /*
   * Random factors for above tags, 1 means always, 2 means 1/2 time, etc.
@@@ -119,6 -134,13 +138,16 @@@
  #define XFS_RANDOM_DIOWRITE_IOERR			(XFS_RANDOM_DEFAULT/10)
  #define	XFS_RANDOM_BMAPIFORMAT				XFS_RANDOM_DEFAULT
  #define XFS_RANDOM_FREE_EXTENT				1
++<<<<<<< HEAD
++=======
+ #define XFS_RANDOM_RMAP_FINISH_ONE			1
+ #define XFS_RANDOM_REFCOUNT_CONTINUE_UPDATE		1
+ #define XFS_RANDOM_REFCOUNT_FINISH_ONE			1
+ #define XFS_RANDOM_BMAP_FINISH_ONE			1
+ #define XFS_RANDOM_AG_RESV_CRITICAL			4
+ #define XFS_RANDOM_DROP_WRITES				1
+ #define XFS_RANDOM_LOG_BAD_CRC				1
++>>>>>>> 3e88a0078ba8 (xfs: replace log_badcrc_factor knob with error injection tag)
  
  #ifdef DEBUG
  extern int xfs_errortag_init(struct xfs_mount *mp);
* Unmerged path fs/xfs/xfs_error.c
* Unmerged path fs/xfs/xfs_error.h
diff --git a/fs/xfs/xfs_log.c b/fs/xfs/xfs_log.c
index e11a8610e0c3..4b36346d1dce 100644
--- a/fs/xfs/xfs_log.c
+++ b/fs/xfs/xfs_log.c
@@ -1864,7 +1864,6 @@ xlog_sync(
 	/* calculcate the checksum */
 	iclog->ic_header.h_crc = xlog_cksum(log, &iclog->ic_header,
 					    iclog->ic_datap, size);
-#ifdef DEBUG
 	/*
 	 * Intentionally corrupt the log record CRC based on the error injection
 	 * frequency, if defined. This facilitates testing log recovery in the
@@ -1872,15 +1871,13 @@ xlog_sync(
 	 * write on I/O completion and shutdown the fs. The subsequent mount
 	 * detects the bad CRC and attempts to recover.
 	 */
-	if (log->l_badcrc_factor &&
-	    (prandom_u32() % log->l_badcrc_factor == 0)) {
+	if (XFS_TEST_ERROR(false, log->l_mp, XFS_ERRTAG_LOG_BAD_CRC)) {
 		iclog->ic_header.h_crc &= cpu_to_le32(0xAAAAAAAA);
 		iclog->ic_state |= XLOG_STATE_IOABORT;
 		xfs_warn(log->l_mp,
 	"Intentionally corrupted log record at LSN 0x%llx. Shutdown imminent.",
 			 be64_to_cpu(iclog->ic_header.h_lsn));
 	}
-#endif
 
 	bp->b_io_length = BTOBB(count);
 	bp->b_fspriv = iclog;
diff --git a/fs/xfs/xfs_sysfs.c b/fs/xfs/xfs_sysfs.c
index ec6e0e2f95d6..5cbc02d4d6ea 100644
--- a/fs/xfs/xfs_sysfs.c
+++ b/fs/xfs/xfs_sysfs.c
@@ -347,47 +347,11 @@ write_grant_head_show(
 }
 XFS_SYSFS_ATTR_RO(write_grant_head);
 
-#ifdef DEBUG
-STATIC ssize_t
-log_badcrc_factor_store(
-	struct kobject	*kobject,
-	const char	*buf,
-	size_t		count)
-{
-	struct xlog	*log = to_xlog(kobject);
-	int		ret;
-	uint32_t	val;
-
-	ret = kstrtouint(buf, 0, &val);
-	if (ret)
-		return ret;
-
-	log->l_badcrc_factor = val;
-
-	return count;
-}
-
-STATIC ssize_t
-log_badcrc_factor_show(
-	struct kobject	*kobject,
-	char		*buf)
-{
-	struct xlog	*log = to_xlog(kobject);
-
-	return snprintf(buf, PAGE_SIZE, "%d\n", log->l_badcrc_factor);
-}
-
-XFS_SYSFS_ATTR_RW(log_badcrc_factor);
-#endif	/* DEBUG */
-
 static struct attribute *xfs_log_attrs[] = {
 	ATTR_LIST(log_head_lsn),
 	ATTR_LIST(log_tail_lsn),
 	ATTR_LIST(reserve_grant_head),
 	ATTR_LIST(write_grant_head),
-#ifdef DEBUG
-	ATTR_LIST(log_badcrc_factor),
-#endif
 	NULL,
 };
 
