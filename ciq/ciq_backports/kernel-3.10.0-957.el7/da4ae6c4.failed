x86/tsc: Future-proof native_calibrate_tsc()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] tsc: Future-proof native_calibrate_tsc() (Prarit Bhargava) [1466058]
Rebuild_FUZZ: 95.24%
commit-author Len Brown <len.brown@intel.com>
commit da4ae6c4a0b8dee5a5377a385545d2250fa8cddb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/da4ae6c4.failed

If the crystal frequency cannot be determined via CPUID(15).crystal_khz or
the built-in table then native_calibrate_tsc() will still set the
X86_FEATURE_TSC_KNOWN_FREQ flag which prevents the refined TSC calibration.

As a consequence such systems use cpu_khz for the TSC frequency which is
incorrect when cpu_khz != tsc_khz resulting in time drift.

Return early when the crystal frequency cannot be retrieved without setting
the X86_FEATURE_TSC_KNOWN_FREQ flag. This ensures that the refined TSC
calibration is invoked.

[ tglx: Steam-blastered changelog. Sigh ]

Fixes: 4ca4df0b7eb0 ("x86/tsc: Mark TSC frequency determined by CPUID as known")
	Signed-off-by: Len Brown <len.brown@intel.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: peterz@infradead.org
	Cc: Bin Gao <bin.gao@intel.com>
	Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/0fe2503aa7d7fc69137141fc705541a78101d2b9.1513920414.git.len.brown@intel.com

(cherry picked from commit da4ae6c4a0b8dee5a5377a385545d2250fa8cddb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/tsc.c
diff --cc arch/x86/kernel/tsc.c
index 3353ff3d243c,ce4b71119c36..000000000000
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@@ -721,6 -612,22 +721,25 @@@ unsigned long native_calibrate_tsc(void
  		}
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (crystal_khz == 0)
+ 		return 0;
+ 	/*
+ 	 * TSC frequency determined by CPUID is a "hardware reported"
+ 	 * frequency and is the most accurate one so far we have. This
+ 	 * is considered a known frequency.
+ 	 */
+ 	setup_force_cpu_cap(X86_FEATURE_TSC_KNOWN_FREQ);
+ 
+ 	/*
+ 	 * For Atom SoCs TSC is the only reliable clocksource.
+ 	 * Mark TSC reliable so no watchdog on it.
+ 	 */
+ 	if (boot_cpu_data.x86_model == INTEL_FAM6_ATOM_GOLDMONT)
+ 		setup_force_cpu_cap(X86_FEATURE_TSC_RELIABLE);
+ 
++>>>>>>> da4ae6c4a0b8 (x86/tsc: Future-proof native_calibrate_tsc())
  	return crystal_khz * ebx_numerator / eax_denominator;
  }
  
* Unmerged path arch/x86/kernel/tsc.c
