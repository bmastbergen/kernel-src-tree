scsi: aacraid: Reschedule host scan in case of failure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] aacraid: Reschedule host scan in case of failure (Raghava Aditya Renukunta) [1519664]
Rebuild_FUZZ: 94.12%
commit-author Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
commit a1367e4adee207fee7f14fdf2166022461fe76c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a1367e4a.failed

If the driver fails to retrieve information from the fw (could happen when
the fw is not fully in its senses), the driver does nothing and change is
not processed correctly by the driver

Schedule host rescan in case of failure. This is only for SAFW, since
the information retrieval failure will happen on SAFW devices.

	Signed-off-by: Raghava Aditya Renukunta <RaghavaAditya.Renukunta@microsemi.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit a1367e4adee207fee7f14fdf2166022461fe76c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/aacraid/aacraid.h
#	drivers/scsi/aacraid/commsup.c
diff --cc drivers/scsi/aacraid/aacraid.h
index 1d7423b9d800,54078bf8ab67..000000000000
--- a/drivers/scsi/aacraid/aacraid.h
+++ b/drivers/scsi/aacraid/aacraid.h
@@@ -2705,6 -2728,23 +2731,26 @@@ int aac_probe_container(struct aac_dev 
  int _aac_rx_init(struct aac_dev *dev);
  int aac_rx_select_comm(struct aac_dev *dev, int comm);
  int aac_rx_deliver_producer(struct fib * fib);
++<<<<<<< HEAD
++=======
+ 
+ static inline int aac_is_src(struct aac_dev *dev)
+ {
+ 	u16 device = dev->pdev->device;
+ 
+ 	if (device == PMC_DEVICE_S6 ||
+ 		device == PMC_DEVICE_S7 ||
+ 		device == PMC_DEVICE_S8)
+ 		return 1;
+ 	return 0;
+ }
+ 
+ static inline int aac_supports_2T(struct aac_dev *dev)
+ {
+ 	return (dev->adapter_info.options & AAC_OPT_NEW_COMM_64);
+ }
+ 
++>>>>>>> a1367e4adee2 (scsi: aacraid: Reschedule host scan in case of failure)
  char * get_container_type(unsigned type);
  extern int numacb;
  extern char aac_driver_version[];
diff --cc drivers/scsi/aacraid/commsup.c
index 4be1a279f46f,d562053f14d7..000000000000
--- a/drivers/scsi/aacraid/commsup.c
+++ b/drivers/scsi/aacraid/commsup.c
@@@ -1935,6 -1964,31 +1935,34 @@@ out
  	return rcode;
  }
  
++<<<<<<< HEAD
++=======
+ static int aac_scan_safw_host(struct aac_dev *dev, int rescan)
+ {
+ 	int rcode = 0;
+ 
+ 	rcode = aac_update_safw_host_devices(dev, rescan);
+ 	if (rcode)
+ 		aac_schedule_safw_scan_worker(dev);
+ 
+ 	return rcode;
+ }
+ 
+ int aac_scan_host(struct aac_dev *dev, int rescan)
+ {
+ 	int rcode = 0;
+ 
+ 	mutex_lock(&dev->scan_mutex);
+ 	if (dev->sa_firmware)
+ 		rcode = aac_scan_safw_host(dev, rescan);
+ 	else
+ 		scsi_scan_host(dev->scsi_host_ptr);
+ 	mutex_unlock(&dev->scan_mutex);
+ 
+ 	return rcode;
+ }
+ 
++>>>>>>> a1367e4adee2 (scsi: aacraid: Reschedule host scan in case of failure)
  /**
   *	aac_handle_sa_aif	Handle a message from the firmware
   *	@dev: Which adapter this fib is from
* Unmerged path drivers/scsi/aacraid/aacraid.h
* Unmerged path drivers/scsi/aacraid/commsup.c
diff --git a/drivers/scsi/aacraid/linit.c b/drivers/scsi/aacraid/linit.c
index 5870838688ad..f3997a021771 100644
--- a/drivers/scsi/aacraid/linit.c
+++ b/drivers/scsi/aacraid/linit.c
@@ -1791,6 +1791,8 @@ static int aac_probe_one(struct pci_dev *pdev, const struct pci_device_id *id)
 
 	mutex_init(&aac->ioctl_mutex);
 	mutex_init(&aac->scan_mutex);
+
+	INIT_DELAYED_WORK(&aac->safw_rescan_work, aac_safw_rescan_worker);
 	/*
 	 *	Map in the registers from the adapter.
 	 */
@@ -1985,6 +1987,7 @@ static int aac_suspend(struct pci_dev *pdev, pm_message_t state)
 	struct aac_dev *aac = (struct aac_dev *)shost->hostdata;
 
 	scsi_block_requests(shost);
+	aac_cancel_safw_rescan_worker(aac);
 	aac_send_shutdown(aac);
 
 	aac_release_resources(aac);
@@ -2043,6 +2046,7 @@ static void aac_remove_one(struct pci_dev *pdev)
 	struct Scsi_Host *shost = pci_get_drvdata(pdev);
 	struct aac_dev *aac = (struct aac_dev *)shost->hostdata;
 
+	aac_cancel_safw_rescan_worker(aac);
 	scsi_remove_host(shost);
 
 	__aac_shutdown(aac);
@@ -2100,6 +2104,7 @@ static pci_ers_result_t aac_pci_error_detected(struct pci_dev *pdev,
 		aac->handle_pci_error = 1;
 
 		scsi_block_requests(aac->scsi_host_ptr);
+		aac_cancel_safw_rescan_worker(aac);
 		aac_flush_ios(aac);
 		aac_release_resources(aac);
 
