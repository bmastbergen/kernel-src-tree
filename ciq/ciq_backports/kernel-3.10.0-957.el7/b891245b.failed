usbip: vhci-hcd: Clean up the code by adding a new macro

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Yuyang Du <yuyang.du@intel.com>
commit b891245bff79583b9c69b14b4429362a5d54096e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b891245b.failed

Each vhci has 2*VHCI_HC_PORTS ports, in which VHCI_HC_PORTS
ports are HighSpeed (or below), and VHCI_HC_PORTS are SuperSpeed.
This new macro VHCI_PORTS reflects this configuration.

	Signed-off-by: Yuyang Du <yuyang.du@intel.com>
	Acked-by: Shuah Khan <shuahkh@osg.samsung.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit b891245bff79583b9c69b14b4429362a5d54096e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/usbip/vhci.h
#	drivers/usb/usbip/vhci_sysfs.c
diff --cc drivers/usb/usbip/vhci.h
index 8a979fc00ac1,5cfb59e98e44..000000000000
--- a/drivers/usb/usbip/vhci.h
+++ b/drivers/usb/usbip/vhci.h
@@@ -140,7 -148,7 +143,11 @@@ static inline __u32 port_to_rhport(__u3
  
  static inline int port_to_pdev_nr(__u32 port)
  {
++<<<<<<< HEAD
 +	return port / VHCI_HC_PORTS;
++=======
+ 	return port / VHCI_PORTS;
++>>>>>>> b891245bff79 (usbip: vhci-hcd: Clean up the code by adding a new macro)
  }
  
  static inline struct vhci_hcd *hcd_to_vhci_hcd(struct usb_hcd *hcd)
diff --cc drivers/usb/usbip/vhci_sysfs.c
index cdbfc7b9f0f7,5778b640ba9c..000000000000
--- a/drivers/usb/usbip/vhci_sysfs.c
+++ b/drivers/usb/usbip/vhci_sysfs.c
@@@ -51,37 -87,21 +51,50 @@@ static ssize_t status_show_vhci(int pde
  
  	spin_lock_irqsave(&vhci->lock, flags);
  
 +	/*
 +	 * output example:
 +	 * port sta spd dev      socket           local_busid
 +	 * 0000 004 000 00000000         c5a7bb80 1-2.3
 +	 * 0001 004 000 00000000         d8cee980 2-3.4
 +	 *
 +	 * IP address can be retrieved from a socket pointer address by looking
 +	 * up /proc/net/{tcp,tcp6}. Also, a userland program may remember a
 +	 * port number and its peer IP address.
 +	 */
  	for (i = 0; i < VHCI_HC_PORTS; i++) {
 -		struct vhci_device *vdev = &vhci->vhci_hcd_hs->vdev[i];
 +		struct vhci_device *vdev = &vhci_hcd->vdev[i];
  
  		spin_lock(&vdev->ud.lock);
++<<<<<<< HEAD
 +		out += sprintf(out, "%04u %03u ",
 +				    (pdev_nr * VHCI_HC_PORTS) + i,
 +				    vdev->ud.status);
++=======
+ 		port_show_vhci(&out, HUB_SPEED_HIGH,
+ 			       pdev_nr * VHCI_PORTS + i, vdev);
+ 		spin_unlock(&vdev->ud.lock);
+ 	}
++>>>>>>> b891245bff79 (usbip: vhci-hcd: Clean up the code by adding a new macro)
  
 -	for (i = 0; i < VHCI_HC_PORTS; i++) {
 -		struct vhci_device *vdev = &vhci->vhci_hcd_ss->vdev[i];
 +		if (vdev->ud.status == VDEV_ST_USED) {
 +			out += sprintf(out, "%03u %08x ",
 +					    vdev->speed, vdev->devid);
 +			out += sprintf(out, "%16p %s",
 +					    vdev->ud.tcp_socket,
 +					    dev_name(&vdev->udev->dev));
 +
++<<<<<<< HEAD
 +		} else {
 +			out += sprintf(out, "000 00000000 ");
 +			out += sprintf(out, "0000000000000000 0-0");
 +		}
  
 +		out += sprintf(out, "\n");
++=======
+ 		spin_lock(&vdev->ud.lock);
+ 		port_show_vhci(&out, HUB_SPEED_SUPER,
+ 			       pdev_nr * VHCI_PORTS + VHCI_HC_PORTS + i, vdev);
++>>>>>>> b891245bff79 (usbip: vhci-hcd: Clean up the code by adding a new macro)
  		spin_unlock(&vdev->ud.lock);
  	}
  
@@@ -96,8 -116,16 +109,21 @@@ static ssize_t status_show_not_ready(in
  	int i = 0;
  
  	for (i = 0; i < VHCI_HC_PORTS; i++) {
++<<<<<<< HEAD
 +		out += sprintf(out, "%04u %03u ",
 +				    (pdev_nr * VHCI_HC_PORTS) + i,
++=======
+ 		out += sprintf(out, "hs  %04u %03u ",
+ 				    (pdev_nr * VHCI_PORTS) + i,
+ 				    VDEV_ST_NOTASSIGNED);
+ 		out += sprintf(out, "000 00000000 0000000000000000 0-0");
+ 		out += sprintf(out, "\n");
+ 	}
+ 
+ 	for (i = 0; i < VHCI_HC_PORTS; i++) {
+ 		out += sprintf(out, "ss  %04u %03u ",
+ 				    (pdev_nr * VHCI_PORTS) + VHCI_HC_PORTS + i,
++>>>>>>> b891245bff79 (usbip: vhci-hcd: Clean up the code by adding a new macro)
  				    VDEV_ST_NOTASSIGNED);
  		out += sprintf(out, "000 00000000 0000000000000000 0-0");
  		out += sprintf(out, "\n");
@@@ -145,7 -173,10 +171,14 @@@ static ssize_t nports_show(struct devic
  {
  	char *s = out;
  
++<<<<<<< HEAD
 +	out += sprintf(out, "%d\n", VHCI_HC_PORTS * vhci_num_controllers);
++=======
+ 	/*
+ 	 * Half the ports are for SPEED_HIGH and half for SPEED_SUPER, thus the * 2.
+ 	 */
+ 	out += sprintf(out, "%d\n", VHCI_PORTS * vhci_num_controllers);
++>>>>>>> b891245bff79 (usbip: vhci-hcd: Clean up the code by adding a new macro)
  	return out - s;
  }
  static DEVICE_ATTR_RO(nports);
* Unmerged path drivers/usb/usbip/vhci.h
* Unmerged path drivers/usb/usbip/vhci_sysfs.c
