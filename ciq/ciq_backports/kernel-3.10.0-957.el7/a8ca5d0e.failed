mm: mlock: add new mlock system call

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mm] mlock: add new mlock2 system call (Rafael Aquini) [1560030]
Rebuild_FUZZ: 92.75%
commit-author Eric B Munson <emunson@akamai.com>
commit a8ca5d0ecbdde5cc3d7accacbd69968b0c98764e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a8ca5d0e.failed

With the refactored mlock code, introduce a new system call for mlock.
The new call will allow the user to specify what lock states are being
added.  mlock2 is trivial at the moment, but a follow on patch will add a
new mlock state making it useful.

	Signed-off-by: Eric B Munson <emunson@akamai.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Acked-by: Vlastimil Babka <vbabka@suse.cz>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: Geert Uytterhoeven <geert@linux-m68k.org>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Stephen Rothwell <sfr@canb.auug.org.au>
	Cc: Guenter Roeck <linux@roeck-us.net>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Michael Kerrisk <mtk.manpages@gmail.com>
	Cc: Ralf Baechle <ralf@linux-mips.org>
	Cc: Shuah Khan <shuahkh@osg.samsung.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a8ca5d0ecbdde5cc3d7accacbd69968b0c98764e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/syscalls/syscall_32.tbl
#	arch/x86/syscalls/syscall_64.tbl
#	include/uapi/asm-generic/unistd.h
#	mm/mlock.c
diff --cc arch/x86/syscalls/syscall_32.tbl
index afdffde73ea5,f17705e1332c..000000000000
--- a/arch/x86/syscalls/syscall_32.tbl
+++ b/arch/x86/syscalls/syscall_32.tbl
@@@ -362,8 -362,24 +362,13 @@@
  354	i386	seccomp			sys_seccomp
  355	i386	getrandom		sys_getrandom
  356	i386	memfd_create		sys_memfd_create
 -357	i386	bpf			sys_bpf
 -358	i386	execveat		sys_execveat			compat_sys_execveat
 -359	i386	socket			sys_socket
 -360	i386	socketpair		sys_socketpair
 -361	i386	bind			sys_bind
 -362	i386	connect			sys_connect
 -363	i386	listen			sys_listen
 -364	i386	accept4			sys_accept4
 -365	i386	getsockopt		sys_getsockopt			compat_sys_getsockopt
 -366	i386	setsockopt		sys_setsockopt			compat_sys_setsockopt
 -367	i386	getsockname		sys_getsockname
 -368	i386	getpeername		sys_getpeername
 -369	i386	sendto			sys_sendto
 -370	i386	sendmsg			sys_sendmsg			compat_sys_sendmsg
 -371	i386	recvfrom		sys_recvfrom			compat_sys_recvfrom
 -372	i386	recvmsg			sys_recvmsg			compat_sys_recvmsg
 -373	i386	shutdown		sys_shutdown
  374	i386	userfaultfd		sys_userfaultfd
++<<<<<<< HEAD:arch/x86/syscalls/syscall_32.tbl
 +377	i386	copy_file_range		sys_copy_file_range
 +380	i386	pkey_mprotect		sys_pkey_mprotect
 +381	i386	pkey_alloc		sys_pkey_alloc
 +382	i386	pkey_free		sys_pkey_free
++=======
+ 375	i386	membarrier		sys_membarrier
+ 376	i386	mlock2			sys_mlock2
++>>>>>>> a8ca5d0ecbdd (mm: mlock: add new mlock system call):arch/x86/entry/syscalls/syscall_32.tbl
diff --cc arch/x86/syscalls/syscall_64.tbl
index ff3b5cfc3e42,314a90bfc09c..000000000000
--- a/arch/x86/syscalls/syscall_64.tbl
+++ b/arch/x86/syscalls/syscall_64.tbl
@@@ -327,11 -327,11 +327,16 @@@
  318	common	getrandom		sys_getrandom
  319	common	memfd_create		sys_memfd_create
  320	common	kexec_file_load		sys_kexec_file_load
 -321	common	bpf			sys_bpf
 -322	64	execveat		stub_execveat
  323	common	userfaultfd		sys_userfaultfd
++<<<<<<< HEAD:arch/x86/syscalls/syscall_64.tbl
 +326	common	copy_file_range		sys_copy_file_range
 +329	common	pkey_mprotect		sys_pkey_mprotect
 +330	common	pkey_alloc		sys_pkey_alloc
 +331	common	pkey_free		sys_pkey_free
++=======
+ 324	common	membarrier		sys_membarrier
+ 325	common	mlock2			sys_mlock2
++>>>>>>> a8ca5d0ecbdd (mm: mlock: add new mlock system call):arch/x86/entry/syscalls/syscall_64.tbl
  
  #
  # x32-specific system call numbers start at 512 to avoid cache impact
diff --cc include/uapi/asm-generic/unistd.h
index 9c016e7ca99e,1324b0292ec2..000000000000
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@@ -696,17 -703,21 +696,35 @@@ __SYSCALL(__NR_finit_module, sys_finit_
  __SYSCALL(__NR_seccomp, sys_seccomp)
  #define __NR_getrandom 278
  __SYSCALL(__NR_getrandom, sys_getrandom)
++<<<<<<< HEAD
 +#define __NR_copy_file_range 285
 +__SYSCALL(__NR_copy_file_range, sys_copy_file_range)
 +#define __NR_pkey_mprotect 288
 +__SYSCALL(__NR_pkey_mprotect, sys_pkey_mprotect)
 +#define __NR_pkey_alloc 289
 +__SYSCALL(__NR_pkey_alloc,    sys_pkey_alloc)
 +#define __NR_pkey_free 290
 +__SYSCALL(__NR_pkey_free,     sys_pkey_free)
 +
 +#undef __NR_syscalls
 +#define __NR_syscalls 291
++=======
+ #define __NR_memfd_create 279
+ __SYSCALL(__NR_memfd_create, sys_memfd_create)
+ #define __NR_bpf 280
+ __SYSCALL(__NR_bpf, sys_bpf)
+ #define __NR_execveat 281
+ __SC_COMP(__NR_execveat, sys_execveat, compat_sys_execveat)
+ #define __NR_userfaultfd 282
+ __SYSCALL(__NR_userfaultfd, sys_userfaultfd)
+ #define __NR_membarrier 283
+ __SYSCALL(__NR_membarrier, sys_membarrier)
+ #define __NR_mlock2 284
+ __SYSCALL(__NR_mlock2, sys_mlock2)
+ 
+ #undef __NR_syscalls
+ #define __NR_syscalls 285
++>>>>>>> a8ca5d0ecbdd (mm: mlock: add new mlock system call)
  
  /*
   * All syscalls below here should go away really,
diff --cc mm/mlock.c
index 51bce8fdbf14,35dcf8fa7195..000000000000
--- a/mm/mlock.c
+++ b/mm/mlock.c
@@@ -721,6 -639,19 +721,22 @@@ SYSCALL_DEFINE2(mlock, unsigned long, s
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ SYSCALL_DEFINE2(mlock, unsigned long, start, size_t, len)
+ {
+ 	return do_mlock(start, len, VM_LOCKED);
+ }
+ 
+ SYSCALL_DEFINE3(mlock2, unsigned long, start, size_t, len, int, flags)
+ {
+ 	if (flags)
+ 		return -EINVAL;
+ 
+ 	return do_mlock(start, len, VM_LOCKED);
+ }
+ 
++>>>>>>> a8ca5d0ecbdd (mm: mlock: add new mlock system call)
  SYSCALL_DEFINE2(munlock, unsigned long, start, size_t, len)
  {
  	int ret;
* Unmerged path arch/x86/syscalls/syscall_32.tbl
* Unmerged path arch/x86/syscalls/syscall_64.tbl
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 14a89f15b559..d1b9057dddca 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -873,4 +873,6 @@ asmlinkage long sys_pkey_mprotect(unsigned long start, size_t len,
 asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
 asmlinkage long sys_pkey_free(int pkey);
 
+asmlinkage long sys_mlock2(unsigned long start, size_t len, int flags);
+
 #endif
* Unmerged path include/uapi/asm-generic/unistd.h
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index 1e320b506dac..7b4c1a60869a 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -173,6 +173,7 @@ cond_syscall(sys_mlock);
 cond_syscall(sys_munlock);
 cond_syscall(sys_mlockall);
 cond_syscall(sys_munlockall);
+cond_syscall(sys_mlock2);
 cond_syscall(sys_mincore);
 cond_syscall(sys_madvise);
 cond_syscall(sys_mremap);
* Unmerged path mm/mlock.c
