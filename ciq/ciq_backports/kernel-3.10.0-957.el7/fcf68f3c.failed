iio: fix sched WARNING "do not call blocking ops when !TASK_RUNNING"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] fix sched WARNING "do not call blocking ops when !TASK_RUNNING" (Tony Camuso) [1559170]
Rebuild_FUZZ: 96.18%
commit-author Brian Norris <briannorris@chromium.org>
commit fcf68f3c0bb2a541aa47a2a38b8939edf84fd529
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/fcf68f3c.failed

When using CONFIG_DEBUG_ATOMIC_SLEEP, the scheduler nicely points out
that we're calling sleeping primitives within the wait_event loop, which
means we might clobber the task state:

[   10.831289] do not call blocking ops when !TASK_RUNNING; state=1 set at [<ffffffc00026b610>]
[   10.845531] ------------[ cut here ]------------
[   10.850161] WARNING: at kernel/sched/core.c:7630
...
[   12.164333] ---[ end trace 45409966a9a76438 ]---
[   12.168942] Call trace:
[   12.171391] [<ffffffc00024ed44>] __might_sleep+0x64/0x90
[   12.176699] [<ffffffc000954774>] mutex_lock_nested+0x50/0x3fc
[   12.182440] [<ffffffc0007b9424>] iio_kfifo_buf_data_available+0x28/0x4c
[   12.189043] [<ffffffc0007b76ac>] iio_buffer_ready+0x60/0xe0
[   12.194608] [<ffffffc0007b7834>] iio_buffer_read_first_n_outer+0x108/0x1a8
[   12.201474] [<ffffffc000370d48>] __vfs_read+0x58/0x114
[   12.206606] [<ffffffc000371740>] vfs_read+0x94/0x118
[   12.211564] [<ffffffc0003720f8>] SyS_read+0x64/0xb4
[   12.216436] [<ffffffc000203cb4>] el0_svc_naked+0x24/0x28

To avoid this, we should (a la https://lwn.net/Articles/628628/) use the
wait_woken() function, which avoids the nested sleeping while still
handling races between waiting / wake-events.

	Signed-off-by: Brian Norris <briannorris@chromium.org>
	Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
	Cc: <Stable@vger.kernel.org> # 3.19+ for introduction of wake_woken
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit fcf68f3c0bb2a541aa47a2a38b8939edf84fd529)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-buffer.c
diff --cc drivers/iio/industrialio-buffer.c
index f0b219d32278,49bf9c59f117..000000000000
--- a/drivers/iio/industrialio-buffer.c
+++ b/drivers/iio/industrialio-buffer.c
@@@ -63,6 -107,9 +63,12 @@@ ssize_t iio_buffer_read_first_n_outer(s
  {
  	struct iio_dev *indio_dev = filp->private_data;
  	struct iio_buffer *rb = indio_dev->buffer;
++<<<<<<< HEAD
++=======
+ 	DEFINE_WAIT_FUNC(wait, woken_wake_function);
+ 	size_t datum_size;
+ 	size_t to_wait;
++>>>>>>> fcf68f3c0bb2 (iio: fix sched WARNING "do not call blocking ops when !TASK_RUNNING")
  	int ret;
  
  	if (!indio_dev->info)
@@@ -71,18 -118,36 +77,51 @@@
  	if (!rb || !rb->access->read_first_n)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	do {
 +		if (!iio_buffer_data_available(rb)) {
 +			if (filp->f_flags & O_NONBLOCK)
 +				return -EAGAIN;
 +
 +			ret = wait_event_interruptible(rb->pollq,
 +					iio_buffer_data_available(rb) ||
 +					indio_dev->info == NULL);
 +			if (ret)
 +				return ret;
 +			if (indio_dev->info == NULL)
 +				return -ENODEV;
++=======
+ 	datum_size = rb->bytes_per_datum;
+ 
+ 	/*
+ 	 * If datum_size is 0 there will never be anything to read from the
+ 	 * buffer, so signal end of file now.
+ 	 */
+ 	if (!datum_size)
+ 		return 0;
+ 
+ 	if (filp->f_flags & O_NONBLOCK)
+ 		to_wait = 0;
+ 	else
+ 		to_wait = min_t(size_t, n / datum_size, rb->watermark);
+ 
+ 	add_wait_queue(&rb->pollq, &wait);
+ 	do {
+ 		if (!indio_dev->info) {
+ 			ret = -ENODEV;
+ 			break;
+ 		}
+ 
+ 		if (!iio_buffer_ready(indio_dev, rb, to_wait, n / datum_size)) {
+ 			if (signal_pending(current)) {
+ 				ret = -ERESTARTSYS;
+ 				break;
+ 			}
+ 
+ 			wait_woken(&wait, TASK_INTERRUPTIBLE,
+ 				   MAX_SCHEDULE_TIMEOUT);
+ 			continue;
++>>>>>>> fcf68f3c0bb2 (iio: fix sched WARNING "do not call blocking ops when !TASK_RUNNING")
  		}
  
  		ret = rb->access->read_first_n(rb, n, buf);
* Unmerged path drivers/iio/industrialio-buffer.c
