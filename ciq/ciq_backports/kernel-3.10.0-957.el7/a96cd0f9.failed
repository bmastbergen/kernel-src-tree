iio: accel: hid-sensor-accel-3d: Add timestamp

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] accel: hid-sensor-accel-3d: Add timestamp (Tony Camuso) [1559170]
Rebuild_FUZZ: 94.25%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit a96cd0f901eecd9589477cc2cd46bdb4f1f3e49a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a96cd0f9.failed

Added timestamp channel. With this change, each sample has a timestamp.
This timestamp can be from the sensor hub when present or local kernel
timestamp. HID sensors can send timestamp with input data using usage id
HID_USAGE_SENSOR_TIME_TIMESTAMP. This timestamp value is converted to
nano seconds before pushing this sample to the iio core.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit a96cd0f901eecd9589477cc2cd46bdb4f1f3e49a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/accel/hid-sensor-accel-3d.c
#	drivers/iio/common/hid-sensors/hid-sensor-attributes.c
#	include/linux/hid-sensor-hub.h
diff --cc drivers/iio/accel/hid-sensor-accel-3d.c
index d762b80979c6,39de79ce8778..000000000000
--- a/drivers/iio/accel/hid-sensor-accel-3d.c
+++ b/drivers/iio/accel/hid-sensor-accel-3d.c
@@@ -42,7 -42,13 +42,17 @@@ struct accel_3d_state 
  	struct hid_sensor_hub_callbacks callbacks;
  	struct hid_sensor_common common_attributes;
  	struct hid_sensor_hub_attribute_info accel[ACCEL_3D_CHANNEL_MAX];
++<<<<<<< HEAD
 +	u32 accel_val[ACCEL_3D_CHANNEL_MAX];
++=======
+ 	/* Reserve for 3 channels + padding + timestamp */
+ 	u32 accel_val[ACCEL_3D_CHANNEL_MAX + 3];
+ 	int scale_pre_decml;
+ 	int scale_post_decml;
+ 	int scale_precision;
+ 	int value_offset;
+ 	int64_t timestamp;
++>>>>>>> a96cd0f901ee (iio: accel: hid-sensor-accel-3d: Add timestamp)
  };
  
  static const u32 accel_3d_addresses[ACCEL_3D_CHANNEL_MAX] = {
@@@ -194,10 -195,11 +205,18 @@@ static const struct iio_info accel_3d_i
  };
  
  /* Function to push data to buffer */
++<<<<<<< HEAD
 +static void hid_sensor_push_data(struct iio_dev *indio_dev, u8 *data, int len)
 +{
 +	dev_dbg(&indio_dev->dev, "hid_sensor_push_data\n");
 +	iio_push_to_buffers(indio_dev, (u8 *)data);
++=======
+ static void hid_sensor_push_data(struct iio_dev *indio_dev, void *data,
+ 				 int len, int64_t timestamp)
+ {
+ 	dev_dbg(&indio_dev->dev, "hid_sensor_push_data\n");
+ 	iio_push_to_buffers_with_timestamp(indio_dev, data, timestamp);
++>>>>>>> a96cd0f901ee (iio: accel: hid-sensor-accel-3d: Add timestamp)
  }
  
  /* Callback handler to send event after all samples are received and captured */
@@@ -209,10 -211,17 +228,22 @@@ static int accel_3d_proc_event(struct h
  	struct accel_3d_state *accel_state = iio_priv(indio_dev);
  
  	dev_dbg(&indio_dev->dev, "accel_3d_proc_event\n");
- 	if (atomic_read(&accel_state->common_attributes.data_ready))
+ 	if (atomic_read(&accel_state->common_attributes.data_ready)) {
+ 		if (!accel_state->timestamp)
+ 			accel_state->timestamp = iio_get_time_ns(indio_dev);
+ 
  		hid_sensor_push_data(indio_dev,
++<<<<<<< HEAD
 +				(u8 *)accel_state->accel_val,
 +				sizeof(accel_state->accel_val));
++=======
+ 				     accel_state->accel_val,
+ 				     sizeof(accel_state->accel_val),
+ 				     accel_state->timestamp);
+ 
+ 		accel_state->timestamp = 0;
+ 	}
++>>>>>>> a96cd0f901ee (iio: accel: hid-sensor-accel-3d: Add timestamp)
  
  	return 0;
  }
diff --cc drivers/iio/common/hid-sensors/hid-sensor-attributes.c
index a2d071819229,7afdac42ed42..000000000000
--- a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
@@@ -26,6 -26,44 +26,47 @@@
  #include <linux/iio/iio.h>
  #include <linux/iio/sysfs.h>
  
++<<<<<<< HEAD
++=======
+ static struct {
+ 	u32 usage_id;
+ 	int unit; /* 0 for default others from HID sensor spec */
+ 	int scale_val0; /* scale, whole number */
+ 	int scale_val1; /* scale, fraction in nanos */
+ } unit_conversion[] = {
+ 	{HID_USAGE_SENSOR_ACCEL_3D, 0, 9, 806650000},
+ 	{HID_USAGE_SENSOR_ACCEL_3D,
+ 		HID_USAGE_SENSOR_UNITS_METERS_PER_SEC_SQRD, 1, 0},
+ 	{HID_USAGE_SENSOR_ACCEL_3D,
+ 		HID_USAGE_SENSOR_UNITS_G, 9, 806650000},
+ 
+ 	{HID_USAGE_SENSOR_GYRO_3D, 0, 0, 17453293},
+ 	{HID_USAGE_SENSOR_GYRO_3D,
+ 		HID_USAGE_SENSOR_UNITS_RADIANS_PER_SECOND, 1, 0},
+ 	{HID_USAGE_SENSOR_GYRO_3D,
+ 		HID_USAGE_SENSOR_UNITS_DEGREES_PER_SECOND, 0, 17453293},
+ 
+ 	{HID_USAGE_SENSOR_COMPASS_3D, 0, 0, 1000000},
+ 	{HID_USAGE_SENSOR_COMPASS_3D, HID_USAGE_SENSOR_UNITS_GAUSS, 1, 0},
+ 
+ 	{HID_USAGE_SENSOR_INCLINOMETER_3D, 0, 0, 17453293},
+ 	{HID_USAGE_SENSOR_INCLINOMETER_3D,
+ 		HID_USAGE_SENSOR_UNITS_DEGREES, 0, 17453293},
+ 	{HID_USAGE_SENSOR_INCLINOMETER_3D,
+ 		HID_USAGE_SENSOR_UNITS_RADIANS, 1, 0},
+ 
+ 	{HID_USAGE_SENSOR_ALS, 0, 1, 0},
+ 	{HID_USAGE_SENSOR_ALS, HID_USAGE_SENSOR_UNITS_LUX, 1, 0},
+ 
+ 	{HID_USAGE_SENSOR_PRESSURE, 0, 100, 0},
+ 	{HID_USAGE_SENSOR_PRESSURE, HID_USAGE_SENSOR_UNITS_PASCAL, 0, 1000000},
+ 
+ 	{HID_USAGE_SENSOR_TIME_TIMESTAMP, 0, 1000000000, 0},
+ 	{HID_USAGE_SENSOR_TIME_TIMESTAMP, HID_USAGE_SENSOR_UNITS_MILLISECOND,
+ 		1000000, 0},
+ };
+ 
++>>>>>>> a96cd0f901ee (iio: accel: hid-sensor-accel-3d: Add timestamp)
  static int pow_10(unsigned power)
  {
  	int i;
@@@ -249,6 -270,94 +290,97 @@@ int hid_sensor_write_raw_hyst_value(str
  }
  EXPORT_SYMBOL(hid_sensor_write_raw_hyst_value);
  
++<<<<<<< HEAD
++=======
+ /*
+  * This fuction applies the unit exponent to the scale.
+  * For example:
+  * 9.806650000 ->exp:2-> val0[980]val1[665000000]
+  * 9.000806000 ->exp:2-> val0[900]val1[80600000]
+  * 0.174535293 ->exp:2-> val0[17]val1[453529300]
+  * 1.001745329 ->exp:0-> val0[1]val1[1745329]
+  * 1.001745329 ->exp:2-> val0[100]val1[174532900]
+  * 1.001745329 ->exp:4-> val0[10017]val1[453290000]
+  * 9.806650000 ->exp:-2-> val0[0]val1[98066500]
+  */
+ static void adjust_exponent_nano(int *val0, int *val1, int scale0,
+ 				  int scale1, int exp)
+ {
+ 	int i;
+ 	int x;
+ 	int res;
+ 	int rem;
+ 
+ 	if (exp > 0) {
+ 		*val0 = scale0 * pow_10(exp);
+ 		res = 0;
+ 		if (exp > 9) {
+ 			*val1 = 0;
+ 			return;
+ 		}
+ 		for (i = 0; i < exp; ++i) {
+ 			x = scale1 / pow_10(8 - i);
+ 			res += (pow_10(exp - 1 - i) * x);
+ 			scale1 = scale1 % pow_10(8 - i);
+ 		}
+ 		*val0 += res;
+ 			*val1 = scale1 * pow_10(exp);
+ 	} else if (exp < 0) {
+ 		exp = abs(exp);
+ 		if (exp > 9) {
+ 			*val0 = *val1 = 0;
+ 			return;
+ 		}
+ 		*val0 = scale0 / pow_10(exp);
+ 		rem = scale0 % pow_10(exp);
+ 		res = 0;
+ 		for (i = 0; i < (9 - exp); ++i) {
+ 			x = scale1 / pow_10(8 - i);
+ 			res += (pow_10(8 - exp - i) * x);
+ 			scale1 = scale1 % pow_10(8 - i);
+ 		}
+ 		*val1 = rem * pow_10(9 - exp) + res;
+ 	} else {
+ 		*val0 = scale0;
+ 		*val1 = scale1;
+ 	}
+ }
+ 
+ int hid_sensor_format_scale(u32 usage_id,
+ 			struct hid_sensor_hub_attribute_info *attr_info,
+ 			int *val0, int *val1)
+ {
+ 	int i;
+ 	int exp;
+ 
+ 	*val0 = 1;
+ 	*val1 = 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(unit_conversion); ++i) {
+ 		if (unit_conversion[i].usage_id == usage_id &&
+ 			unit_conversion[i].unit == attr_info->units) {
+ 			exp  = hid_sensor_convert_exponent(
+ 						attr_info->unit_expo);
+ 			adjust_exponent_nano(val0, val1,
+ 					unit_conversion[i].scale_val0,
+ 					unit_conversion[i].scale_val1, exp);
+ 			break;
+ 		}
+ 	}
+ 
+ 	return IIO_VAL_INT_PLUS_NANO;
+ }
+ EXPORT_SYMBOL(hid_sensor_format_scale);
+ 
+ int64_t hid_sensor_convert_timestamp(struct hid_sensor_common *st,
+ 				     int64_t raw_value)
+ {
+ 	return st->timestamp_ns_scale * raw_value;
+ }
+ EXPORT_SYMBOL(hid_sensor_convert_timestamp);
+ 
+ static
++>>>>>>> a96cd0f901ee (iio: accel: hid-sensor-accel-3d: Add timestamp)
  int hid_sensor_get_reporting_interval(struct hid_sensor_hub_device *hsdev,
  					u32 usage_id,
  					struct hid_sensor_common *st)
@@@ -333,13 -396,26 +466,27 @@@ int hid_sensor_parse_common_attributes(
  			HID_FEATURE_REPORT, usage_id,
  			HID_USAGE_SENSOR_PROP_SENSITIVITY_ABS,
  			 &st->sensitivity);
 +	hid_sensor_get_report_latency_info(hsdev, usage_id, st);
  
- 	hid_dbg(hsdev->hdev, "common attributes: %x:%x, %x:%x, %x:%x %x:%x\n",
- 			st->poll.index, st->poll.report_id,
- 			st->report_state.index, st->report_state.report_id,
- 			st->power_state.index, st->power_state.report_id,
- 			st->sensitivity.index, st->sensitivity.report_id);
+ 	sensor_hub_input_get_attribute_info(hsdev,
+ 					    HID_INPUT_REPORT, usage_id,
+ 					    HID_USAGE_SENSOR_TIME_TIMESTAMP,
+ 					    &timestamp);
+ 	if (timestamp.index >= 0 && timestamp.report_id) {
+ 		int val0, val1;
+ 
+ 		hid_sensor_format_scale(HID_USAGE_SENSOR_TIME_TIMESTAMP,
+ 					&timestamp, &val0, &val1);
+ 		st->timestamp_ns_scale = val0;
+ 	} else
+ 		st->timestamp_ns_scale = 1000000000;
+ 
+ 	hid_dbg(hsdev->hdev, "common attributes: %x:%x, %x:%x, %x:%x %x:%x %x:%x\n",
+ 		st->poll.index, st->poll.report_id,
+ 		st->report_state.index, st->report_state.report_id,
+ 		st->power_state.index, st->power_state.report_id,
+ 		st->sensitivity.index, st->sensitivity.report_id,
+ 		timestamp.index, timestamp.report_id);
  
  	return 0;
  }
diff --cc include/linux/hid-sensor-hub.h
index 8fc2444454a4,7ef111d3ecc5..000000000000
--- a/include/linux/hid-sensor-hub.h
+++ b/include/linux/hid-sensor-hub.h
@@@ -197,10 -231,8 +197,11 @@@ struct hid_sensor_common 
  	unsigned usage_id;
  	atomic_t data_ready;
  	atomic_t user_requested_state;
 +	int poll_interval;
 +	int raw_hystersis;
 +	int latency_ms;
  	struct iio_trigger *trigger;
+ 	int timestamp_ns_scale;
  	struct hid_sensor_hub_attribute_info poll;
  	struct hid_sensor_hub_attribute_info report_state;
  	struct hid_sensor_hub_attribute_info power_state;
@@@ -232,10 -263,16 +233,15 @@@ int hid_sensor_write_samp_freq_value(st
  int hid_sensor_read_samp_freq_value(struct hid_sensor_common *st,
  					int *val1, int *val2);
  
 -int hid_sensor_get_usage_index(struct hid_sensor_hub_device *hsdev,
 -				u32 report_id, int field_index, u32 usage_id);
 -
 -int hid_sensor_format_scale(u32 usage_id,
 -			    struct hid_sensor_hub_attribute_info *attr_info,
 -			    int *val0, int *val1);
 -
  s32 hid_sensor_read_poll_value(struct hid_sensor_common *st);
  
++<<<<<<< HEAD
 +bool hid_sensor_batch_mode_supported(struct hid_sensor_common *st);
 +int hid_sensor_set_report_latency(struct hid_sensor_common *st, int latency);
 +int hid_sensor_get_report_latency(struct hid_sensor_common *st);
++=======
+ int64_t hid_sensor_convert_timestamp(struct hid_sensor_common *st,
+ 				     int64_t raw_value);
++>>>>>>> a96cd0f901ee (iio: accel: hid-sensor-accel-3d: Add timestamp)
  
  #endif
* Unmerged path drivers/iio/accel/hid-sensor-accel-3d.c
* Unmerged path drivers/iio/common/hid-sensors/hid-sensor-attributes.c
* Unmerged path include/linux/hid-sensor-hub.h
diff --git a/include/linux/hid-sensor-ids.h b/include/linux/hid-sensor-ids.h
index 161fd05a869c..fa5513fada36 100644
--- a/include/linux/hid-sensor-ids.h
+++ b/include/linux/hid-sensor-ids.h
@@ -77,6 +77,7 @@
 #define HID_USAGE_SENSOR_TIME_HOUR				0x200525
 #define HID_USAGE_SENSOR_TIME_MINUTE				0x200526
 #define HID_USAGE_SENSOR_TIME_SECOND				0x200527
+#define HID_USAGE_SENSOR_TIME_TIMESTAMP				0x200529
 
 /* Units */
 #define HID_USAGE_SENSOR_UNITS_NOT_SPECIFIED			0x00
