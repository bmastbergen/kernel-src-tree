perf trace beauty: Simplify syscall return formatting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 1f63139c3f8af1d6a09de5dd355c8b5695407c79
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1f63139c.failed

Removing syscall_fmt::err_msg and instead always formatting negative
returns as errno values.

With this we can remove a lot of entries that have no special handling
besides the ones we can do by looking at the tracefs format files, i.e.
the types for the fields (e.g. pid_t), well known names (e.g. fd).

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-rg9u7a3qqdnzo37d212vnz2o@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1f63139c3f8af1d6a09de5dd355c8b5695407c79)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
diff --cc tools/perf/builtin-trace.c
index 5114abbd2e32,1e4c0657b712..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -602,242 -604,202 +602,425 @@@ static size_t syscall_arg__scnprintf_ge
  static struct syscall_fmt {
  	const char *name;
  	const char *alias;
++<<<<<<< HEAD
 +	size_t	   (*arg_scnprintf[6])(char *bf, size_t size, struct syscall_arg *arg);
 +	void	   *arg_parm[6];
 +	bool	   errmsg;
++=======
+ 	struct syscall_arg_fmt arg[6];
++>>>>>>> 1f63139c3f8a (perf trace beauty: Simplify syscall return formatting)
  	bool	   errpid;
  	bool	   timeout;
  	bool	   hexret;
  } syscall_fmts[] = {
++<<<<<<< HEAD
 +	{ .name	    = "access",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_ACCMODE,  /* mode */ }, },
 +	{ .name	    = "arch_prctl", .errmsg = true, .alias = "prctl", },
 +	{ .name	    = "brk",	    .hexret = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* brk */ }, },
 +	{ .name	    = "chdir",	    .errmsg = true, },
 +	{ .name	    = "chmod",	    .errmsg = true, },
 +	{ .name	    = "chroot",	    .errmsg = true, },
 +	{ .name     = "clock_gettime",  .errmsg = true, STRARRAY(0, clk_id, clockid), },
 +	{ .name	    = "clone",	    .errpid = true, },
 +	{ .name	    = "close",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_CLOSE_FD, /* fd */ }, },
 +	{ .name	    = "connect",    .errmsg = true, },
 +	{ .name	    = "creat",	    .errmsg = true, },
 +	{ .name	    = "dup",	    .errmsg = true, },
 +	{ .name	    = "dup2",	    .errmsg = true, },
 +	{ .name	    = "dup3",	    .errmsg = true, },
 +	{ .name	    = "epoll_ctl",  .errmsg = true, STRARRAY(1, op, epoll_ctl_ops), },
 +	{ .name	    = "eventfd2",   .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_EFD_FLAGS, /* flags */ }, },
 +	{ .name	    = "faccessat",  .errmsg = true, },
 +	{ .name	    = "fadvise64",  .errmsg = true, },
 +	{ .name	    = "fallocate",  .errmsg = true, },
 +	{ .name	    = "fchdir",	    .errmsg = true, },
 +	{ .name	    = "fchmod",	    .errmsg = true, },
 +	{ .name	    = "fchmodat",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "fchown",	    .errmsg = true, },
 +	{ .name	    = "fchownat",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "fcntl",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_STRARRAYS, /* cmd */ },
 +	  .arg_parm	 = { [1] = &strarrays__fcntl_cmds_arrays, /* cmd */ }, },
 +	{ .name	    = "fdatasync",  .errmsg = true, },
 +	{ .name	    = "flock",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_FLOCK, /* cmd */ }, },
 +	{ .name	    = "fsetxattr",  .errmsg = true, },
 +	{ .name	    = "fstat",	    .errmsg = true, .alias = "newfstat", },
 +	{ .name	    = "fstatat",    .errmsg = true, .alias = "newfstatat", },
 +	{ .name	    = "fstatfs",    .errmsg = true, },
 +	{ .name	    = "fsync",    .errmsg = true, },
 +	{ .name	    = "ftruncate", .errmsg = true, },
 +	{ .name	    = "futex",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_FUTEX_OP, /* op */ }, },
 +	{ .name	    = "futimesat", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "getdents",   .errmsg = true, },
 +	{ .name	    = "getdents64", .errmsg = true, },
 +	{ .name	    = "getitimer",  .errmsg = true, STRARRAY(0, which, itimers), },
 +	{ .name	    = "getrandom",  .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_GETRANDOM_FLAGS, /* flags */ }, },
 +	{ .name	    = "getpid",	    .errpid = true, },
 +	{ .name	    = "getpgid",    .errpid = true, },
 +	{ .name	    = "getppid",    .errpid = true, },
 +	{ .name	    = "getrlimit",  .errmsg = true, STRARRAY(0, resource, rlimit_resources), },
 +	{ .name	    = "getxattr",   .errmsg = true, },
 +	{ .name	    = "inotify_add_watch",	    .errmsg = true, },
 +	{ .name	    = "ioctl",	    .errmsg = true,
 +	  .arg_scnprintf = {
++=======
+ 	{ .name	    = "access",
+ 	  .arg = { [1] = { .scnprintf = SCA_ACCMODE,  /* mode */ }, }, },
+ 	{ .name	    = "arch_prctl", .alias = "prctl", },
+ 	{ .name	    = "bpf",
+ 	  .arg = { [0] = STRARRAY(cmd, bpf_cmd), }, },
+ 	{ .name	    = "brk",	    .hexret = true,
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX, /* brk */ }, }, },
+ 	{ .name     = "clock_gettime",
+ 	  .arg = { [0] = STRARRAY(clk_id, clockid), }, },
+ 	{ .name	    = "clone",	    .errpid = true, },
+ 	{ .name	    = "close",
+ 	  .arg = { [0] = { .scnprintf = SCA_CLOSE_FD, /* fd */ }, }, },
+ 	{ .name	    = "epoll_ctl",
+ 	  .arg = { [1] = STRARRAY(op, epoll_ctl_ops), }, },
+ 	{ .name	    = "eventfd2",
+ 	  .arg = { [1] = { .scnprintf = SCA_EFD_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "fchmodat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "fchownat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "fcntl",
+ 	  .arg = { [1] = { .scnprintf = SCA_FCNTL_CMD, /* cmd */
+ 			   .parm      = &strarrays__fcntl_cmds_arrays,
+ 			   .show_zero = true, },
+ 		   [2] = { .scnprintf =  SCA_FCNTL_ARG, /* arg */ }, }, },
+ 	{ .name	    = "flock",
+ 	  .arg = { [1] = { .scnprintf = SCA_FLOCK, /* cmd */ }, }, },
+ 	{ .name	    = "fstat", .alias = "newfstat", },
+ 	{ .name	    = "fstatat", .alias = "newfstatat", },
+ 	{ .name	    = "futex",
+ 	  .arg = { [1] = { .scnprintf = SCA_FUTEX_OP, /* op */ }, }, },
+ 	{ .name	    = "futimesat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "getitimer",
+ 	  .arg = { [0] = STRARRAY(which, itimers), }, },
+ 	{ .name	    = "getpid",	    .errpid = true, },
+ 	{ .name	    = "getpgid",    .errpid = true, },
+ 	{ .name	    = "getppid",    .errpid = true, },
+ 	{ .name	    = "getrandom",
+ 	  .arg = { [2] = { .scnprintf = SCA_GETRANDOM_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "getrlimit",
+ 	  .arg = { [0] = STRARRAY(resource, rlimit_resources), }, },
+ 	{ .name	    = "ioctl",
+ 	  .arg = {
++>>>>>>> 1f63139c3f8a (perf trace beauty: Simplify syscall return formatting)
  #if defined(__i386__) || defined(__x86_64__)
  /*
   * FIXME: Make this available to all arches.
   */
 -		   [1] = { .scnprintf = SCA_STRHEXARRAY, /* cmd */
 -			   .parm      = &strarray__tioctls, },
 -		   [2] = { .scnprintf = SCA_HEX, /* arg */ }, }, },
 +			     [1] = SCA_STRHEXARRAY, /* cmd */
 +			     [2] = SCA_HEX, /* arg */ },
 +	  .arg_parm	 = { [1] = &strarray__tioctls, /* cmd */ }, },
  #else
 -		   [2] = { .scnprintf = SCA_HEX, /* arg */ }, }, },
 +			     [2] = SCA_HEX, /* arg */ }, },
  #endif
++<<<<<<< HEAD
 +	{ .name	    = "keyctl",	    .errmsg = true, STRARRAY(0, option, keyctl_options), },
 +	{ .name	    = "kill",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_SIGNUM, /* sig */ }, },
 +	{ .name	    = "lchown",    .errmsg = true, },
 +	{ .name	    = "lgetxattr",  .errmsg = true, },
 +	{ .name	    = "linkat",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "listxattr",  .errmsg = true, },
 +	{ .name	    = "llistxattr", .errmsg = true, },
 +	{ .name	    = "lremovexattr",  .errmsg = true, },
 +	{ .name	    = "lseek",	    .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_STRARRAY, /* whence */ },
 +	  .arg_parm	 = { [2] = &strarray__whences, /* whence */ }, },
 +	{ .name	    = "lsetxattr",  .errmsg = true, },
 +	{ .name	    = "lstat",	    .errmsg = true, .alias = "newlstat", },
 +	{ .name	    = "lsxattr",    .errmsg = true, },
 +	{ .name     = "madvise",    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX,	 /* start */
 +			     [2] = SCA_MADV_BHV, /* behavior */ }, },
 +	{ .name	    = "mkdir",    .errmsg = true, },
 +	{ .name	    = "mkdirat",    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "mknod",      .errmsg = true, },
 +	{ .name	    = "mknodat",    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
 +	{ .name	    = "mlock",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* addr */ }, },
 +	{ .name	    = "mlockall",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* addr */ }, },
++=======
+ 	{ .name	    = "keyctl",
+ 	  .arg = { [0] = STRARRAY(option, keyctl_options), }, },
+ 	{ .name	    = "kill",
+ 	  .arg = { [1] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
+ 	{ .name	    = "linkat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "lseek",
+ 	  .arg = { [2] = STRARRAY(whence, whences), }, },
+ 	{ .name	    = "lstat", .alias = "newlstat", },
+ 	{ .name     = "madvise",
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX,      /* start */ },
+ 		   [2] = { .scnprintf = SCA_MADV_BHV, /* behavior */ }, }, },
+ 	{ .name	    = "mkdirat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "mknodat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
+ 	{ .name	    = "mlock",
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX, /* addr */ }, }, },
+ 	{ .name	    = "mlockall",
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX, /* addr */ }, }, },
++>>>>>>> 1f63139c3f8a (perf trace beauty: Simplify syscall return formatting)
  	{ .name	    = "mmap",	    .hexret = true,
  /* The standard mmap maps to old_mmap on s390x */
  #if defined(__s390x__)
  	.alias = "old_mmap",
  #endif
++<<<<<<< HEAD
 +	  .arg_scnprintf = { [0] = SCA_HEX,	  /* addr */
 +			     [2] = SCA_MMAP_PROT, /* prot */
 +			     [3] = SCA_MMAP_FLAGS, /* flags */ }, },
 +	{ .name	    = "mprotect",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* start */
 +			     [2] = SCA_MMAP_PROT, /* prot */ }, },
 +	{ .name	    = "mq_unlink", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FILENAME, /* u_name */ }, },
 +	{ .name	    = "mremap",	    .hexret = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* addr */
 +			     [3] = SCA_MREMAP_FLAGS, /* flags */
 +			     [4] = SCA_HEX, /* new_addr */ }, },
 +	{ .name	    = "munlock",    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* addr */ }, },
 +	{ .name	    = "munmap",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_HEX, /* addr */ }, },
 +	{ .name	    = "name_to_handle_at", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */ }, },
 +	{ .name	    = "newfstatat", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */ }, },
 +	{ .name	    = "open",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_OPEN_FLAGS, /* flags */ }, },
 +	{ .name	    = "open_by_handle_at", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */
 +			     [2] = SCA_OPEN_FLAGS, /* flags */ }, },
 +	{ .name	    = "openat",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */
 +			     [2] = SCA_OPEN_FLAGS, /* flags */ }, },
 +	{ .name	    = "perf_event_open", .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_INT, /* cpu */
 +			     [3] = SCA_FD,  /* group_fd */
 +			     [4] = SCA_PERF_FLAGS,  /* flags */ }, },
 +	{ .name	    = "pipe2",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_PIPE_FLAGS, /* flags */ }, },
 +	{ .name	    = "poll",	    .errmsg = true, .timeout = true, },
 +	{ .name	    = "ppoll",	    .errmsg = true, .timeout = true, },
 +	{ .name	    = "pread",	    .errmsg = true, .alias = "pread64", },
 +	{ .name	    = "preadv",	    .errmsg = true, .alias = "pread", },
 +	{ .name	    = "prlimit64",  .errmsg = true, STRARRAY(1, resource, rlimit_resources), },
 +	{ .name	    = "pwrite",	    .errmsg = true, .alias = "pwrite64", },
 +	{ .name	    = "pwritev",    .errmsg = true, },
 +	{ .name	    = "read",	    .errmsg = true, },
 +	{ .name	    = "readlink",   .errmsg = true, },
 +	{ .name	    = "readlinkat", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */ }, },
 +	{ .name	    = "readv",	    .errmsg = true, },
 +	{ .name	    = "recvfrom",   .errmsg = true,
 +	  .arg_scnprintf = { [3] = SCA_MSG_FLAGS, /* flags */ }, },
 +	{ .name	    = "recvmmsg",   .errmsg = true,
 +	  .arg_scnprintf = { [3] = SCA_MSG_FLAGS, /* flags */ }, },
 +	{ .name	    = "recvmsg",    .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_MSG_FLAGS, /* flags */ }, },
 +	{ .name	    = "removexattr", .errmsg = true, },
 +	{ .name	    = "renameat",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */ }, },
 +	{ .name	    = "rmdir",    .errmsg = true, },
 +	{ .name	    = "rt_sigaction", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_SIGNUM, /* sig */ }, },
 +	{ .name	    = "rt_sigprocmask",  .errmsg = true, STRARRAY(0, how, sighow), },
 +	{ .name	    = "rt_sigqueueinfo", .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_SIGNUM, /* sig */ }, },
 +	{ .name	    = "rt_tgsigqueueinfo", .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_SIGNUM, /* sig */ }, },
 +	{ .name	    = "sched_getattr",	      .errmsg = true, },
 +	{ .name	    = "sched_setattr",	      .errmsg = true, },
 +	{ .name	    = "sched_setscheduler",   .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_SCHED_POLICY, /* policy */ }, },
 +	{ .name	    = "seccomp", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_SECCOMP_OP, /* op */
 +			     [1] = SCA_SECCOMP_FLAGS, /* flags */ }, },
 +	{ .name	    = "select",	    .errmsg = true, .timeout = true, },
 +	{ .name	    = "sendmmsg",    .errmsg = true,
 +	  .arg_scnprintf = { [3] = SCA_MSG_FLAGS, /* flags */ }, },
 +	{ .name	    = "sendmsg",    .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_MSG_FLAGS, /* flags */ }, },
 +	{ .name	    = "sendto",	    .errmsg = true,
 +	  .arg_scnprintf = { [3] = SCA_MSG_FLAGS, /* flags */ }, },
 +	{ .name	    = "set_tid_address", .errpid = true, },
 +	{ .name	    = "setitimer",  .errmsg = true, STRARRAY(0, which, itimers), },
 +	{ .name	    = "setpgid",    .errmsg = true, },
 +	{ .name	    = "setrlimit",  .errmsg = true, STRARRAY(0, resource, rlimit_resources), },
 +	{ .name     = "setxattr",   .errmsg = true, },
 +	{ .name     = "shutdown",   .errmsg = true, },
 +	{ .name	    = "socket",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_STRARRAY, /* family */
 +			     [1] = SCA_SK_TYPE, /* type */ },
 +	  .arg_parm	 = { [0] = &strarray__socket_families, /* family */ }, },
 +	{ .name	    = "socketpair", .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_STRARRAY, /* family */
 +			     [1] = SCA_SK_TYPE, /* type */ },
 +	  .arg_parm	 = { [0] = &strarray__socket_families, /* family */ }, },
 +	{ .name	    = "stat",	    .errmsg = true, .alias = "newstat", },
 +	{ .name	    = "statfs",	    .errmsg = true, },
 +#if 0
 +	XXX there is no statx syscall in RHEL7
 +
 +	{ .name	    = "statx",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* flags */
 +			     [2] = SCA_STATX_FLAGS, /* flags */
 +			     [3] = SCA_STATX_MASK, /* mask */ }, },
 +#endif
 +	{ .name	    = "swapoff",    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FILENAME, /* specialfile */ }, },
 +	{ .name	    = "swapon",	    .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FILENAME, /* specialfile */ }, },
 +	{ .name	    = "symlinkat",  .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */ }, },
 +	{ .name	    = "tgkill",	    .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_SIGNUM, /* sig */ }, },
 +	{ .name	    = "tkill",	    .errmsg = true,
 +	  .arg_scnprintf = { [1] = SCA_SIGNUM, /* sig */ }, },
 +	{ .name	    = "truncate",   .errmsg = true, },
 +	{ .name	    = "uname",	    .errmsg = true, .alias = "newuname", },
 +	{ .name	    = "unlinkat",   .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */ }, },
 +	{ .name	    = "utime",  .errmsg = true, },
 +	{ .name	    = "utimensat",  .errmsg = true,
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* dirfd */ }, },
 +	{ .name	    = "utimes",  .errmsg = true, },
 +	{ .name	    = "vmsplice",  .errmsg = true, },
++=======
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX,	/* addr */ },
+ 		   [2] = { .scnprintf = SCA_MMAP_PROT,	/* prot */ },
+ 		   [3] = { .scnprintf = SCA_MMAP_FLAGS,	/* flags */ }, }, },
+ 	{ .name	    = "mprotect",
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX,	/* start */ },
+ 		   [2] = { .scnprintf = SCA_MMAP_PROT,	/* prot */ }, }, },
+ 	{ .name	    = "mq_unlink",
+ 	  .arg = { [0] = { .scnprintf = SCA_FILENAME, /* u_name */ }, }, },
+ 	{ .name	    = "mremap",	    .hexret = true,
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX,	  /* addr */ },
+ 		   [3] = { .scnprintf = SCA_MREMAP_FLAGS, /* flags */ },
+ 		   [4] = { .scnprintf = SCA_HEX,	  /* new_addr */ }, }, },
+ 	{ .name	    = "munlock",
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX, /* addr */ }, }, },
+ 	{ .name	    = "munmap",
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX, /* addr */ }, }, },
+ 	{ .name	    = "name_to_handle_at",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dfd */ }, }, },
+ 	{ .name	    = "newfstatat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dfd */ }, }, },
+ 	{ .name	    = "open",
+ 	  .arg = { [1] = { .scnprintf = SCA_OPEN_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "open_by_handle_at",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT,	/* dfd */ },
+ 		   [2] = { .scnprintf = SCA_OPEN_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "openat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT,	/* dfd */ },
+ 		   [2] = { .scnprintf = SCA_OPEN_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "perf_event_open",
+ 	  .arg = { [2] = { .scnprintf = SCA_INT,	/* cpu */ },
+ 		   [3] = { .scnprintf = SCA_FD,		/* group_fd */ },
+ 		   [4] = { .scnprintf = SCA_PERF_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "pipe2",
+ 	  .arg = { [1] = { .scnprintf = SCA_PIPE_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "poll", .timeout = true, },
+ 	{ .name	    = "ppoll", .timeout = true, },
+ 	{ .name	    = "pread", .alias = "pread64", },
+ 	{ .name	    = "preadv", .alias = "pread", },
+ 	{ .name	    = "prlimit64",
+ 	  .arg = { [1] = STRARRAY(resource, rlimit_resources), }, },
+ 	{ .name	    = "pwrite", .alias = "pwrite64", },
+ 	{ .name	    = "readlinkat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dfd */ }, }, },
+ 	{ .name	    = "recvfrom",
+ 	  .arg = { [3] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "recvmmsg",
+ 	  .arg = { [3] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "recvmsg",
+ 	  .arg = { [2] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "renameat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dfd */ }, }, },
+ 	{ .name	    = "rt_sigaction",
+ 	  .arg = { [0] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
+ 	{ .name	    = "rt_sigprocmask",
+ 	  .arg = { [0] = STRARRAY(how, sighow), }, },
+ 	{ .name	    = "rt_sigqueueinfo",
+ 	  .arg = { [1] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
+ 	{ .name	    = "rt_tgsigqueueinfo",
+ 	  .arg = { [2] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
+ 	{ .name	    = "sched_setscheduler",
+ 	  .arg = { [1] = { .scnprintf = SCA_SCHED_POLICY, /* policy */ }, }, },
+ 	{ .name	    = "seccomp",
+ 	  .arg = { [0] = { .scnprintf = SCA_SECCOMP_OP,	   /* op */ },
+ 		   [1] = { .scnprintf = SCA_SECCOMP_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "select", .timeout = true, },
+ 	{ .name	    = "sendmmsg",
+ 	  .arg = { [3] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "sendmsg",
+ 	  .arg = { [2] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "sendto",
+ 	  .arg = { [3] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "set_tid_address", .errpid = true, },
+ 	{ .name	    = "setitimer",
+ 	  .arg = { [0] = STRARRAY(which, itimers), }, },
+ 	{ .name	    = "setrlimit",
+ 	  .arg = { [0] = STRARRAY(resource, rlimit_resources), }, },
+ 	{ .name	    = "socket",
+ 	  .arg = { [0] = STRARRAY(family, socket_families),
+ 		   [1] = { .scnprintf = SCA_SK_TYPE, /* type */ }, }, },
+ 	{ .name	    = "socketpair",
+ 	  .arg = { [0] = STRARRAY(family, socket_families),
+ 		   [1] = { .scnprintf = SCA_SK_TYPE, /* type */ }, }, },
+ 	{ .name	    = "stat", .alias = "newstat", },
+ 	{ .name	    = "statx",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT,	 /* fdat */ },
+ 		   [2] = { .scnprintf = SCA_STATX_FLAGS, /* flags */ } ,
+ 		   [3] = { .scnprintf = SCA_STATX_MASK,	 /* mask */ }, }, },
+ 	{ .name	    = "swapoff",
+ 	  .arg = { [0] = { .scnprintf = SCA_FILENAME, /* specialfile */ }, }, },
+ 	{ .name	    = "swapon",
+ 	  .arg = { [0] = { .scnprintf = SCA_FILENAME, /* specialfile */ }, }, },
+ 	{ .name	    = "symlinkat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dfd */ }, }, },
+ 	{ .name	    = "tgkill",
+ 	  .arg = { [2] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
+ 	{ .name	    = "tkill",
+ 	  .arg = { [1] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
+ 	{ .name	    = "uname", .alias = "newuname", },
+ 	{ .name	    = "unlinkat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dfd */ }, }, },
+ 	{ .name	    = "utimensat",
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dirfd */ }, }, },
++>>>>>>> 1f63139c3f8a (perf trace beauty: Simplify syscall return formatting)
  	{ .name	    = "wait4",	    .errpid = true,
 -	  .arg = { [2] = { .scnprintf = SCA_WAITID_OPTIONS, /* options */ }, }, },
 +	  .arg_scnprintf = { [2] = SCA_WAITID_OPTIONS, /* options */ }, },
  	{ .name	    = "waitid",	    .errpid = true,
++<<<<<<< HEAD
 +	  .arg_scnprintf = { [3] = SCA_WAITID_OPTIONS, /* options */ }, },
 +	{ .name	    = "write",	    .errmsg = true, },
 +	{ .name	    = "writev",	    .errmsg = true, },
++=======
+ 	  .arg = { [3] = { .scnprintf = SCA_WAITID_OPTIONS, /* options */ }, }, },
++>>>>>>> 1f63139c3f8a (perf trace beauty: Simplify syscall return formatting)
  };
  
  static int syscall_fmt__cmp(const void *name, const void *fmtp)
* Unmerged path tools/perf/builtin-trace.c
