bpf: fix states equal logic for varlen access

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Josef Bacik <jbacik@fb.com>
commit e2d2afe15ed452f91797a80dbc0a17838ba03ed4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e2d2afe1.failed

If we have a branch that looks something like this

int foo = map->value;
if (condition) {
  foo += blah;
} else {
  foo = bar;
}
map->array[foo] = baz;

We will incorrectly assume that the !condition branch is equal to the condition
branch as the register for foo will be UNKNOWN_VALUE in both cases.  We need to
adjust this logic to only do this if we didn't do a varlen access after we
processed the !condition branch, otherwise we have different ranges and need to
check the other branch as well.

Fixes: 484611357c19 ("bpf: allow access into map value arrays")
	Reported-by: Jann Horn <jannh@google.com>
	Signed-off-by: Josef Bacik <jbacik@fb.com>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e2d2afe15ed452f91797a80dbc0a17838ba03ed4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/verifier.c
* Unmerged path kernel/bpf/verifier.c
* Unmerged path kernel/bpf/verifier.c
