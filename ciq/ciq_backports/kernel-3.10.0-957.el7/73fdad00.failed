ext4: protect i_disksize update by i_data_sem in direct write path

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Eryu Guan <guaneryu@gmail.com>
commit 73fdad00b208b139cf43f3163fbc0f67e4c6047c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/73fdad00.failed

i_disksize update should be protected by i_data_sem, by either taking
the lock explicitly or by using ext4_update_i_disksize() helper. But the
i_disksize updates in ext4_direct_IO_write() are not protected at all,
which may be racing with i_disksize updates in writeback path in
delalloc buffer write path.

This is found by code inspection, and I didn't hit any i_disksize
corruption due to this bug. Thanks to Jan Kara for catching this bug and
suggesting the fix!

	Reported-by: Jan Kara <jack@suse.cz>
	Suggested-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Eryu Guan <guaneryu@gmail.com>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Cc: stable@vger.kernel.org
(cherry picked from commit 73fdad00b208b139cf43f3163fbc0f67e4c6047c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/inode.c
diff --cc fs/ext4/inode.c
index 83725648daac,bff44b4a0783..000000000000
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@@ -3300,11 -3665,25 +3300,30 @@@ static ssize_t ext4_ext_direct_IO(int r
  	get_block_t *get_block_func = NULL;
  	int dio_flags = 0;
  	loff_t final_size = offset + count;
 -	int orphan = 0;
 -	handle_t *handle;
 +	ext4_io_end_t *io_end = NULL;
  
++<<<<<<< HEAD
 +	/* Use the old path for reads and writes beyond i_size. */
 +	if (rw != WRITE || final_size > inode->i_size)
 +		return ext4_ind_direct_IO(rw, iocb, iov, offset, nr_segs);
++=======
+ 	if (final_size > inode->i_size) {
+ 		/* Credits for sb + inode write */
+ 		handle = ext4_journal_start(inode, EXT4_HT_INODE, 2);
+ 		if (IS_ERR(handle)) {
+ 			ret = PTR_ERR(handle);
+ 			goto out;
+ 		}
+ 		ret = ext4_orphan_add(handle, inode);
+ 		if (ret) {
+ 			ext4_journal_stop(handle);
+ 			goto out;
+ 		}
+ 		orphan = 1;
+ 		ext4_update_i_disksize(inode, inode->i_size);
+ 		ext4_journal_stop(handle);
+ 	}
++>>>>>>> 73fdad00b208 (ext4: protect i_disksize update by i_data_sem in direct write path)
  
  	BUG_ON(iocb->private == NULL);
  
@@@ -3408,13 -3752,60 +3427,65 @@@
  		ext4_clear_inode_state(inode, EXT4_STATE_DIO_UNWRITTEN);
  	}
  
 -	inode_dio_end(inode);
 +retake_lock:
 +	if (rw == WRITE)
 +		inode_dio_end(inode);
  	/* take i_mutex locking again if we do a ovewrite dio */
  	if (overwrite)
 -		inode_lock(inode);
 +		mutex_lock(&inode->i_mutex);
  
++<<<<<<< HEAD
++=======
+ 	if (ret < 0 && final_size > inode->i_size)
+ 		ext4_truncate_failed_write(inode);
+ 
+ 	/* Handle extending of i_size after direct IO write */
+ 	if (orphan) {
+ 		int err;
+ 
+ 		/* Credits for sb + inode write */
+ 		handle = ext4_journal_start(inode, EXT4_HT_INODE, 2);
+ 		if (IS_ERR(handle)) {
+ 			/*
+ 			 * We wrote the data but cannot extend
+ 			 * i_size. Bail out. In async io case, we do
+ 			 * not return error here because we have
+ 			 * already submmitted the corresponding
+ 			 * bio. Returning error here makes the caller
+ 			 * think that this IO is done and failed
+ 			 * resulting in race with bio's completion
+ 			 * handler.
+ 			 */
+ 			if (!ret)
+ 				ret = PTR_ERR(handle);
+ 			if (inode->i_nlink)
+ 				ext4_orphan_del(NULL, inode);
+ 
+ 			goto out;
+ 		}
+ 		if (inode->i_nlink)
+ 			ext4_orphan_del(handle, inode);
+ 		if (ret > 0) {
+ 			loff_t end = offset + ret;
+ 			if (end > inode->i_size) {
+ 				ext4_update_i_disksize(inode, end);
+ 				i_size_write(inode, end);
+ 				/*
+ 				 * We're going to return a positive `ret'
+ 				 * here due to non-zero-length I/O, so there's
+ 				 * no way of reporting error returns from
+ 				 * ext4_mark_inode_dirty() to userspace.  So
+ 				 * ignore it.
+ 				 */
+ 				ext4_mark_inode_dirty(handle, inode);
+ 			}
+ 		}
+ 		err = ext4_journal_stop(handle);
+ 		if (ret == 0)
+ 			ret = err;
+ 	}
+ out:
++>>>>>>> 73fdad00b208 (ext4: protect i_disksize update by i_data_sem in direct write path)
  	return ret;
  }
  
* Unmerged path fs/ext4/inode.c
