netfilter: ipset: Make sure we always return line number on batch

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Sergey Popovich <popovich_sergei@mail.ua>
commit a212e08e8e0a5c689e61dd175b6e99223dda835c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a212e08e.failed

Even if we return with generic IPSET_ERR_PROTOCOL it is good idea
to return line number if we called in batch mode.

Moreover we are not always exiting with IPSET_ERR_PROTOCOL. For
example hash:ip,port,net may return IPSET_ERR_HASH_RANGE_UNSUPPORTED
or IPSET_ERR_INVALID_CIDR.

	Signed-off-by: Sergey Popovich <popovich_sergei@mail.ua>
	Signed-off-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
(cherry picked from commit a212e08e8e0a5c689e61dd175b6e99223dda835c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/ipset/ip_set_bitmap_ip.c
#	net/netfilter/ipset/ip_set_bitmap_ipmac.c
#	net/netfilter/ipset/ip_set_hash_ip.c
#	net/netfilter/ipset/ip_set_hash_ipmark.c
#	net/netfilter/ipset/ip_set_hash_ipport.c
#	net/netfilter/ipset/ip_set_hash_ipportip.c
#	net/netfilter/ipset/ip_set_hash_ipportnet.c
#	net/netfilter/ipset/ip_set_hash_mac.c
#	net/netfilter/ipset/ip_set_hash_net.c
#	net/netfilter/ipset/ip_set_hash_netiface.c
#	net/netfilter/ipset/ip_set_hash_netnet.c
#	net/netfilter/ipset/ip_set_hash_netport.c
#	net/netfilter/ipset/ip_set_hash_netportnet.c
diff --cc net/netfilter/ipset/ip_set_bitmap_ip.c
index faaca51bf3fa,7af99c3e5a4d..000000000000
--- a/net/netfilter/ipset/ip_set_bitmap_ip.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ip.c
@@@ -133,21 -134,21 +133,35 @@@ bitmap_ip_uadt(struct ip_set *set, stru
  	struct bitmap_ip *map = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
  	u32 ip = 0, ip_to = 0;
 -	struct bitmap_ip_adt_elem e = { .id = 0 };
 -	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
 +	struct bitmap_ip_adt_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(map);
  	int ret = 0;
  
++<<<<<<< HEAD
 +	if (unlikely(!tb[IPSET_ATTR_IP] ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
 +		return -IPSET_ERR_PROTOCOL;
 +
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
+ 	if (unlikely(!tb[IPSET_ATTR_IP]))
+ 		return -IPSET_ERR_PROTOCOL;
+ 
+ 	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_bitmap_ipmac.c
index b2a7bea3f7b6,773342292623..000000000000
--- a/net/netfilter/ipset/ip_set_bitmap_ipmac.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ipmac.c
@@@ -250,17 -239,17 +250,31 @@@ bitmap_ipmac_uadt(struct ip_set *set, s
  	u32 ip = 0;
  	int ret = 0;
  
++<<<<<<< HEAD
 +	if (unlikely(!tb[IPSET_ATTR_IP] ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
 +		return -IPSET_ERR_PROTOCOL;
 +
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
+ 	if (unlikely(!tb[IPSET_ATTR_IP]))
+ 		return -IPSET_ERR_PROTOCOL;
+ 
+ 	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_ip.c
index 6e3d06eb397b,2bbadcc96ac5..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ip.c
+++ b/net/netfilter/ipset/ip_set_hash_ip.c
@@@ -122,17 -108,17 +122,31 @@@ hash_ip4_uadt(struct ip_set *set, struc
  	u32 ip = 0, ip_to = 0, hosts;
  	int ret = 0;
  
++<<<<<<< HEAD
 +	if (unlikely(!tb[IPSET_ATTR_IP] ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
 +		return -IPSET_ERR_PROTOCOL;
 +
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
+ 	if (unlikely(!tb[IPSET_ATTR_IP]))
+ 		return -IPSET_ERR_PROTOCOL;
+ 
+ 	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -268,23 -236,29 +282,38 @@@ hash_ip6_uadt(struct ip_set *set, struc
  {
  	const struct hash_ip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
 -	struct hash_ip6_elem e = { { .all = { 0 } } };
 -	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
 +	struct hash_ip6_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
  	int ret;
  
++<<<<<<< HEAD
 +	if (unlikely(!tb[IPSET_ATTR_IP] ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
++=======
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
+ 	if (unlikely(!tb[IPSET_ATTR_IP]))
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  		return -IPSET_ERR_PROTOCOL;
 -	if (unlikely(tb[IPSET_ATTR_IP_TO]))
 -		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
 -	if (unlikely(tb[IPSET_ATTR_CIDR])) {
 -		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
  
 -		if (cidr != HOST_MASK)
 -			return -IPSET_ERR_INVALID_CIDR;
 -	}
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
  
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_ipmark.c
index 50389697a53a,3aafb36484b4..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipmark.c
+++ b/net/netfilter/ipset/ip_set_hash_ipmark.c
@@@ -105,18 -108,18 +105,25 @@@ hash_ipmark4_uadt(struct ip_set *set, s
  	u32 ip, ip_to = 0;
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
 -		     !ip_set_attr_netorder(tb, IPSET_ATTR_MARK)))
 +		     !ip_set_attr_netorder(tb, IPSET_ATTR_MARK) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  
 -	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip);
 -	if (ret)
 -		return ret;
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
  
 -	ret = ip_set_get_extensions(set, tb, &ext);
 +	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
++	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -229,20 -234,22 +236,27 @@@ hash_ipmark6_uadt(struct ip_set *set, s
  	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
 -		     !ip_set_attr_netorder(tb, IPSET_ATTR_MARK)))
 +		     !ip_set_attr_netorder(tb, IPSET_ATTR_MARK) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
  		return -IPSET_ERR_PROTOCOL;
 -	if (unlikely(tb[IPSET_ATTR_IP_TO]))
 -		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
 -	if (unlikely(tb[IPSET_ATTR_CIDR])) {
 -		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
  
 -		if (cidr != HOST_MASK)
 -			return -IPSET_ERR_INVALID_CIDR;
 -	}
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
  
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_ipport.c
index 5e57c86de14d,4db1270f1197..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipport.c
+++ b/net/netfilter/ipset/ip_set_hash_ipport.c
@@@ -140,19 -116,19 +140,26 @@@ hash_ipport4_uadt(struct ip_set *set, s
  	bool with_ports = false;
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  
 -	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip);
 -	if (ret)
 -		return ret;
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
  
 -	ret = ip_set_get_extensions(set, tb, &ext);
 +	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
++	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -328,21 -273,23 +335,28 @@@ hash_ipport6_uadt(struct ip_set *set, s
  	bool with_ports = false;
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
  		return -IPSET_ERR_PROTOCOL;
 -	if (unlikely(tb[IPSET_ATTR_IP_TO]))
 -		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
 -	if (unlikely(tb[IPSET_ATTR_CIDR])) {
 -		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
  
 -		if (cidr != HOST_MASK)
 -			return -IPSET_ERR_INVALID_CIDR;
 -	}
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
  
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_ipportip.c
index 24b9417eb2c5,c01bf68708ec..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipportip.c
+++ b/net/netfilter/ipset/ip_set_hash_ipportip.c
@@@ -146,19 -119,19 +146,30 @@@ hash_ipportip4_uadt(struct ip_set *set
  	bool with_ports = false;
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] || !tb[IPSET_ATTR_IP2] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr4(tb[IPSET_ATTR_IP], &e.ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -345,21 -284,27 +356,32 @@@ hash_ipportip6_uadt(struct ip_set *set
  	bool with_ports = false;
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] || !tb[IPSET_ATTR_IP2] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
  		return -IPSET_ERR_PROTOCOL;
 -	if (unlikely(tb[IPSET_ATTR_IP_TO]))
 -		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
 -	if (unlikely(tb[IPSET_ATTR_CIDR])) {
 -		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
  
 -		if (cidr != HOST_MASK)
 -			return -IPSET_ERR_INVALID_CIDR;
 -	}
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
  
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_ipportnet.c
index bb1a8e8f02c9,e38a029f3002..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipportnet.c
+++ b/net/netfilter/ipset/ip_set_hash_ipportnet.c
@@@ -205,17 -179,14 +208,25 @@@ hash_ipportnet4_uadt(struct ip_set *set
  	if (unlikely(!tb[IPSET_ATTR_IP] || !tb[IPSET_ATTR_IP2] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
  		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -497,12 -430,18 +511,20 @@@ hash_ipportnet6_uadt(struct ip_set *set
  		return -IPSET_ERR_PROTOCOL;
  	if (unlikely(tb[IPSET_ATTR_IP_TO]))
  		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
 -	if (unlikely(tb[IPSET_ATTR_CIDR])) {
 -		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
  
 -		if (cidr != HOST_MASK)
 -			return -IPSET_ERR_INVALID_CIDR;
 -	}
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
  
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_net.c
index 0a64dad156d9,2988ec5c4c4a..000000000000
--- a/net/netfilter/ipset/ip_set_hash_net.c
+++ b/net/netfilter/ipset/ip_set_hash_net.c
@@@ -169,18 -146,18 +169,29 @@@ hash_net4_uadt(struct ip_set *set, stru
  	u32 ip = 0, ip_to = 0, last;
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -357,26 -307,25 +368,37 @@@ static in
  hash_net6_uadt(struct ip_set *set, struct nlattr *tb[],
  	       enum ipset_adt adt, u32 *lineno, u32 flags, bool retried)
  {
 +	const struct hash_net *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
  	struct hash_net6_elem e = { .cidr = HOST_MASK };
 -	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  	if (unlikely(tb[IPSET_ATTR_IP_TO]))
  		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_netiface.c
index aa4929b15a09,c80588c3071c..000000000000
--- a/net/netfilter/ipset/ip_set_hash_netiface.c
+++ b/net/netfilter/ipset/ip_set_hash_netiface.c
@@@ -340,19 -293,19 +340,30 @@@ hash_netiface4_uadt(struct ip_set *set
  	char iface[IFNAMSIZ];
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
  		     !tb[IPSET_ATTR_IFACE] ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -603,21 -523,21 +614,32 @@@ hash_netiface6_uadt(struct ip_set *set
  	char iface[IFNAMSIZ];
  	int ret;
  
+ 	if (tb[IPSET_ATTR_LINENO])
+ 		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+ 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
  		     !tb[IPSET_ATTR_IFACE] ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  	if (unlikely(tb[IPSET_ATTR_IP_TO]))
  		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
diff --cc net/netfilter/ipset/ip_set_hash_netport.c
index d98a685cd916,7a6448cbd8fb..000000000000
--- a/net/netfilter/ipset/ip_set_hash_netport.c
+++ b/net/netfilter/ipset/ip_set_hash_netport.c
@@@ -195,17 -172,14 +198,25 @@@ hash_netport4_uadt(struct ip_set *set, 
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
  		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 -		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS)))
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
  		return -IPSET_ERR_PROTOCOL;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_hostipaddr4(tb[IPSET_ATTR_IP], &ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
@@@ -448,11 -389,11 +462,19 @@@ hash_netport6_uadt(struct ip_set *set, 
  	if (unlikely(tb[IPSET_ATTR_IP_TO]))
  		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
  
++<<<<<<< HEAD
 +	if (tb[IPSET_ATTR_LINENO])
 +		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
 +
 +	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip) ||
 +	      ip_set_get_extensions(set, tb, &ext);
++=======
+ 	ret = ip_set_get_ipaddr6(tb[IPSET_ATTR_IP], &e.ip);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = ip_set_get_extensions(set, tb, &ext);
++>>>>>>> a212e08e8e0a (netfilter: ipset: Make sure we always return line number on batch)
  	if (ret)
  		return ret;
  
* Unmerged path net/netfilter/ipset/ip_set_hash_mac.c
* Unmerged path net/netfilter/ipset/ip_set_hash_netnet.c
* Unmerged path net/netfilter/ipset/ip_set_hash_netportnet.c
* Unmerged path net/netfilter/ipset/ip_set_bitmap_ip.c
* Unmerged path net/netfilter/ipset/ip_set_bitmap_ipmac.c
diff --git a/net/netfilter/ipset/ip_set_bitmap_port.c b/net/netfilter/ipset/ip_set_bitmap_port.c
index 3fcb6e11fac3..29afcfa2dd3f 100644
--- a/net/netfilter/ipset/ip_set_bitmap_port.c
+++ b/net/netfilter/ipset/ip_set_bitmap_port.c
@@ -136,6 +136,9 @@ bitmap_port_uadt(struct ip_set *set, struct nlattr *tb[],
 	u16 port_to;
 	int ret = 0;
 
+	if (tb[IPSET_ATTR_LINENO])
+		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+
 	if (unlikely(!ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
@@ -143,9 +146,6 @@ bitmap_port_uadt(struct ip_set *set, struct nlattr *tb[],
 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
 		return -IPSET_ERR_PROTOCOL;
 
-	if (tb[IPSET_ATTR_LINENO])
-		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
-
 	port = ip_set_get_h16(tb[IPSET_ATTR_PORT]);
 	if (port < map->first_port || port > map->last_port)
 		return -IPSET_ERR_BITMAP_RANGE;
* Unmerged path net/netfilter/ipset/ip_set_hash_ip.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipmark.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipport.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipportip.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipportnet.c
* Unmerged path net/netfilter/ipset/ip_set_hash_mac.c
* Unmerged path net/netfilter/ipset/ip_set_hash_net.c
* Unmerged path net/netfilter/ipset/ip_set_hash_netiface.c
* Unmerged path net/netfilter/ipset/ip_set_hash_netnet.c
* Unmerged path net/netfilter/ipset/ip_set_hash_netport.c
* Unmerged path net/netfilter/ipset/ip_set_hash_netportnet.c
diff --git a/net/netfilter/ipset/ip_set_list_set.c b/net/netfilter/ipset/ip_set_list_set.c
index a9a97c07ecb4..d353f833d900 100644
--- a/net/netfilter/ipset/ip_set_list_set.c
+++ b/net/netfilter/ipset/ip_set_list_set.c
@@ -391,6 +391,9 @@ list_set_uadt(struct ip_set *set, struct nlattr *tb[],
 	struct ip_set *s;
 	int ret = 0;
 
+	if (tb[IPSET_ATTR_LINENO])
+		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
+
 	if (unlikely(!tb[IPSET_ATTR_NAME] ||
 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
@@ -398,9 +401,6 @@ list_set_uadt(struct ip_set *set, struct nlattr *tb[],
 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES)))
 		return -IPSET_ERR_PROTOCOL;
 
-	if (tb[IPSET_ATTR_LINENO])
-		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
-
 	ret = ip_set_get_extensions(set, tb, &ext);
 	if (ret)
 		return ret;
