mm/hwpoison: fix traversal of hugetlbfs pages to avoid printk flood

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mm] hwpoison: fix traversal of hugetlbfs pages to avoid printk flood (Aristeu Rozanski) [1525701]
Rebuild_FUZZ: 97.71%
commit-author Wanpeng Li <liwanp@linux.vnet.ibm.com>
commit 20cb6cab52a21b46e3c0dc7bd23f004f810fb421
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/20cb6cab.failed

madvise_hwpoison won't check if the page is small page or huge page and
traverses in small page granularity against the range unconditionally,
which result in a printk flood "MCE xxx: already hardware poisoned" if
the page is a huge page.

This patch fixes it by using compound_order(compound_head(page)) for
huge page iterator.

Testcase:

#define _GNU_SOURCE
#include <stdlib.h>
#include <stdio.h>
#include <sys/mman.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <errno.h>

#define PAGES_TO_TEST 3
#define PAGE_SIZE	4096 * 512

int main(void)
{
	char *mem;
	int i;

	mem = mmap(NULL, PAGES_TO_TEST * PAGE_SIZE,
			PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_HUGETLB, 0, 0);

	if (madvise(mem, PAGES_TO_TEST * PAGE_SIZE, MADV_HWPOISON) == -1)
		return -1;

	munmap(mem, PAGES_TO_TEST * PAGE_SIZE);

	return 0;
}

	Signed-off-by: Wanpeng Li <liwanp@linux.vnet.ibm.com>
	Reviewed-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Acked-by: Andi Kleen <ak@linux.intel.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 20cb6cab52a21b46e3c0dc7bd23f004f810fb421)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/madvise.c
diff --cc mm/madvise.c
index 897937eb7ed8,539eeb96b323..000000000000
--- a/mm/madvise.c
+++ b/mm/madvise.c
@@@ -385,15 -343,17 +385,26 @@@ static long madvise_remove(struct vm_ar
   */
  static int madvise_hwpoison(int bhv, unsigned long start, unsigned long end)
  {
++<<<<<<< HEAD
 +	int ret = 0;
 +
 +	if (!capable(CAP_SYS_ADMIN))
 +		return -EPERM;
 +	for (; start < end; start += PAGE_SIZE) {
 +		struct page *p;
 +		int ret = get_user_pages_fast(start, 1, 0, &p);
++=======
+ 	struct page *p;
+ 	if (!capable(CAP_SYS_ADMIN))
+ 		return -EPERM;
+ 	for (; start < end; start += PAGE_SIZE <<
+ 				compound_order(compound_head(p))) {
+ 		int ret;
+ 
+ 		ret = get_user_pages_fast(start, 1, 0, &p);
++>>>>>>> 20cb6cab52a2 (mm/hwpoison: fix traversal of hugetlbfs pages to avoid printk flood)
  		if (ret != 1)
  			return ret;
 -
  		if (PageHWPoison(p)) {
  			put_page(p);
  			continue;
* Unmerged path mm/madvise.c
