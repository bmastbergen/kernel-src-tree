perf script: Add 'synth' field for synthesized event payloads

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 47e780848e6229b102e601deeb1ce571dc69a84a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/47e78084.failed

Add a field to display the content the raw_data of a synthesized event.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
Link: http://lkml.kernel.org/r/1495786658-18063-22-git-send-email-adrian.hunter@intel.com
[ Resolved conflict with 106dacd86f04 ("perf script: Support -F brstackoff,dso") ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 47e780848e6229b102e601deeb1ce571dc69a84a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-script.txt
#	tools/perf/builtin-script.c
diff --cc tools/perf/Documentation/perf-script.txt
index 66be2e69d03b,5ee8796be96e..000000000000
--- a/tools/perf/Documentation/perf-script.txt
+++ b/tools/perf/Documentation/perf-script.txt
@@@ -116,7 -116,8 +116,12 @@@ OPTION
  --fields::
          Comma separated list of fields to print. Options are:
          comm, tid, pid, time, cpu, event, trace, ip, sym, dso, addr, symoff,
++<<<<<<< HEAD
 +	srcline, period, iregs, brstack, brstacksym, flags, brstackinsn, insn, insnlen.
++=======
+         srcline, period, iregs, brstack, brstacksym, flags, bpf-output, brstackinsn, brstackoff,
+         callindent, insn, insnlen, synth.
++>>>>>>> 47e780848e62 (perf script: Add 'synth' field for synthesized event payloads)
          Field list can be prepended with the type, trace, sw or hw,
          to indicate to which event type the field list applies.
          e.g., -F sw:comm,tid,time,ip,sym  and -F trace:time,cpu,trace
diff --cc tools/perf/builtin-script.c
index 354967bc5bf0,e87b480bbdd0..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -84,6 -85,8 +84,11 @@@ enum perf_output_field 
  	PERF_OUTPUT_INSN	    = 1U << 21,
  	PERF_OUTPUT_INSNLEN	    = 1U << 22,
  	PERF_OUTPUT_BRSTACKINSN	    = 1U << 23,
++<<<<<<< HEAD
++=======
+ 	PERF_OUTPUT_BRSTACKOFF	    = 1U << 24,
+ 	PERF_OUTPUT_SYNTH           = 1U << 25,
++>>>>>>> 47e780848e62 (perf script: Add 'synth' field for synthesized event payloads)
  };
  
  struct output_option {
@@@ -113,6 -117,8 +118,11 @@@
  	{.str = "insn", .field = PERF_OUTPUT_INSN},
  	{.str = "insnlen", .field = PERF_OUTPUT_INSNLEN},
  	{.str = "brstackinsn", .field = PERF_OUTPUT_BRSTACKINSN},
++<<<<<<< HEAD
++=======
+ 	{.str = "brstackoff", .field = PERF_OUTPUT_BRSTACKOFF},
+ 	{.str = "synth", .field = PERF_OUTPUT_SYNTH},
++>>>>>>> 47e780848e62 (perf script: Add 'synth' field for synthesized event payloads)
  };
  
  enum {
@@@ -1037,6 -1125,93 +1048,96 @@@ static void print_sample_flags(u32 flag
  		printf("  %-11s ", str);
  }
  
++<<<<<<< HEAD
++=======
+ struct printer_data {
+ 	int line_no;
+ 	bool hit_nul;
+ 	bool is_printable;
+ };
+ 
+ static void
+ print_sample_bpf_output_printer(enum binary_printer_ops op,
+ 				unsigned int val,
+ 				void *extra)
+ {
+ 	unsigned char ch = (unsigned char)val;
+ 	struct printer_data *printer_data = extra;
+ 
+ 	switch (op) {
+ 	case BINARY_PRINT_DATA_BEGIN:
+ 		printf("\n");
+ 		break;
+ 	case BINARY_PRINT_LINE_BEGIN:
+ 		printf("%17s", !printer_data->line_no ? "BPF output:" :
+ 						        "           ");
+ 		break;
+ 	case BINARY_PRINT_ADDR:
+ 		printf(" %04x:", val);
+ 		break;
+ 	case BINARY_PRINT_NUM_DATA:
+ 		printf(" %02x", val);
+ 		break;
+ 	case BINARY_PRINT_NUM_PAD:
+ 		printf("   ");
+ 		break;
+ 	case BINARY_PRINT_SEP:
+ 		printf("  ");
+ 		break;
+ 	case BINARY_PRINT_CHAR_DATA:
+ 		if (printer_data->hit_nul && ch)
+ 			printer_data->is_printable = false;
+ 
+ 		if (!isprint(ch)) {
+ 			printf("%c", '.');
+ 
+ 			if (!printer_data->is_printable)
+ 				break;
+ 
+ 			if (ch == '\0')
+ 				printer_data->hit_nul = true;
+ 			else
+ 				printer_data->is_printable = false;
+ 		} else {
+ 			printf("%c", ch);
+ 		}
+ 		break;
+ 	case BINARY_PRINT_CHAR_PAD:
+ 		printf(" ");
+ 		break;
+ 	case BINARY_PRINT_LINE_END:
+ 		printf("\n");
+ 		printer_data->line_no++;
+ 		break;
+ 	case BINARY_PRINT_DATA_END:
+ 	default:
+ 		break;
+ 	}
+ }
+ 
+ static void print_sample_bpf_output(struct perf_sample *sample)
+ {
+ 	unsigned int nr_bytes = sample->raw_size;
+ 	struct printer_data printer_data = {0, false, true};
+ 
+ 	print_binary(sample->raw_data, nr_bytes, 8,
+ 		     print_sample_bpf_output_printer, &printer_data);
+ 
+ 	if (printer_data.is_printable && printer_data.hit_nul)
+ 		printf("%17s \"%s\"\n", "BPF string:",
+ 		       (char *)(sample->raw_data));
+ }
+ 
+ static void print_sample_synth(struct perf_sample *sample __maybe_unused,
+ 			       struct perf_evsel *evsel)
+ {
+ 	switch (evsel->attr.config) {
+ 	default:
+ 		break;
+ 	}
+ }
+ 
++>>>>>>> 47e780848e62 (perf script: Add 'synth' field for synthesized event payloads)
  struct perf_script {
  	struct perf_tool	tool;
  	struct perf_session	*session;
@@@ -2398,7 -2621,7 +2503,11 @@@ int cmd_script(int argc, const char **a
  		     "Valid types: hw,sw,trace,raw,synth. "
  		     "Fields: comm,tid,pid,time,cpu,event,trace,ip,sym,dso,"
  		     "addr,symoff,period,iregs,brstack,brstacksym,flags,"
++<<<<<<< HEAD
 +		     "callindent,insn,insnlen,brstackinsn",
++=======
+ 		     "bpf-output,callindent,insn,insnlen,brstackinsn,synth",
++>>>>>>> 47e780848e62 (perf script: Add 'synth' field for synthesized event payloads)
  		     parse_output_fields),
  	OPT_BOOLEAN('a', "all-cpus", &system_wide,
  		    "system-wide collection from all CPUs"),
* Unmerged path tools/perf/Documentation/perf-script.txt
* Unmerged path tools/perf/builtin-script.c
