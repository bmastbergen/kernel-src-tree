iio: Avoid unnecessary kasprintf

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] Avoid unnecessary kasprintf (Tony Camuso) [1559170]
Rebuild_FUZZ: 91.53%
commit-author Lars-Peter Clausen <lars@metafoo.de>
commit 7bbcf7e13695c70f13b2cae59392016c0fa2e7a6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/7bbcf7e1.failed

name_format already contains the final name and no format characters. So the
code basically reads:

	dev_attr->attr.name = kstrdup(GFP_KERNEL, name_format);
	if (dev_attr->attr.name == NULL)
		...
	kfree(name_format);

Which means we can save one alloc and free pair per attribute name if we
directly assign name_format to dev_attr->attr.name.

The patch also renames name_format to name to denote that this is indeed the
final name and has no format characters in it.

	Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 7bbcf7e13695c70f13b2cae59392016c0fa2e7a6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-core.c
diff --cc drivers/iio/industrialio-core.c
index 0f2422de08e9,ede16aec20fb..000000000000
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@@ -530,10 -537,11 +530,16 @@@ int __iio_device_attr_init(struct devic
  						struct device_attribute *attr,
  						const char *buf,
  						size_t len),
 -			   enum iio_shared_by shared_by)
 +			   bool generic)
  {
++<<<<<<< HEAD
 +	int ret;
 +	char *name_format, *full_postfix;
++=======
+ 	int ret = 0;
+ 	char *name = NULL;
+ 	char *full_postfix;
++>>>>>>> 7bbcf7e13695 (iio: Avoid unnecessary kasprintf)
  	sysfs_attr_init(&dev_attr->attr);
  
  	/* Build up postfix of <extend_name>_<modifier>_postfix */
@@@ -558,55 -566,75 +564,114 @@@
  						 chan->extend_name,
  						 postfix);
  	}
 -	if (full_postfix == NULL)
 -		return -ENOMEM;
 +	if (full_postfix == NULL) {
 +		ret = -ENOMEM;
 +		goto error_ret;
 +	}
  
  	if (chan->differential) { /* Differential can not have modifier */
++<<<<<<< HEAD
 +		if (generic)
 +			name_format
 +				= kasprintf(GFP_KERNEL, "%s_%s-%s_%s",
++=======
+ 		switch (shared_by) {
+ 		case IIO_SHARED_BY_ALL:
+ 			name = kasprintf(GFP_KERNEL, "%s", full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_DIR:
+ 			name = kasprintf(GFP_KERNEL, "%s_%s",
+ 						iio_direction[chan->output],
+ 						full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_TYPE:
+ 			name = kasprintf(GFP_KERNEL, "%s_%s-%s_%s",
++>>>>>>> 7bbcf7e13695 (iio: Avoid unnecessary kasprintf)
  					    iio_direction[chan->output],
  					    iio_chan_type_name_spec[chan->type],
  					    iio_chan_type_name_spec[chan->type],
  					    full_postfix);
++<<<<<<< HEAD
 +		else if (chan->indexed)
 +			name_format
 +				= kasprintf(GFP_KERNEL, "%s_%s%d-%s%d_%s",
++=======
+ 			break;
+ 		case IIO_SEPARATE:
+ 			if (!chan->indexed) {
+ 				WARN_ON("Differential channels must be indexed\n");
+ 				ret = -EINVAL;
+ 				goto error_free_full_postfix;
+ 			}
+ 			name = kasprintf(GFP_KERNEL,
+ 					    "%s_%s%d-%s%d_%s",
++>>>>>>> 7bbcf7e13695 (iio: Avoid unnecessary kasprintf)
  					    iio_direction[chan->output],
  					    iio_chan_type_name_spec[chan->type],
  					    chan->channel,
  					    iio_chan_type_name_spec[chan->type],
  					    chan->channel2,
  					    full_postfix);
 -			break;
 +		else {
 +			WARN_ON("Differential channels must be indexed\n");
 +			ret = -EINVAL;
 +			goto error_free_full_postfix;
  		}
  	} else { /* Single ended */
++<<<<<<< HEAD
 +		if (generic)
 +			name_format
 +				= kasprintf(GFP_KERNEL, "%s_%s_%s",
 +					    iio_direction[chan->output],
 +					    iio_chan_type_name_spec[chan->type],
 +					    full_postfix);
 +		else if (chan->indexed)
 +			name_format
 +				= kasprintf(GFP_KERNEL, "%s_%s%d_%s",
 +					    iio_direction[chan->output],
 +					    iio_chan_type_name_spec[chan->type],
 +					    chan->channel,
 +					    full_postfix);
 +		else
 +			name_format
 +				= kasprintf(GFP_KERNEL, "%s_%s_%s",
 +					    iio_direction[chan->output],
 +					    iio_chan_type_name_spec[chan->type],
 +					    full_postfix);
++=======
+ 		switch (shared_by) {
+ 		case IIO_SHARED_BY_ALL:
+ 			name = kasprintf(GFP_KERNEL, "%s", full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_DIR:
+ 			name = kasprintf(GFP_KERNEL, "%s_%s",
+ 						iio_direction[chan->output],
+ 						full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_TYPE:
+ 			name = kasprintf(GFP_KERNEL, "%s_%s_%s",
+ 					    iio_direction[chan->output],
+ 					    iio_chan_type_name_spec[chan->type],
+ 					    full_postfix);
+ 			break;
+ 
+ 		case IIO_SEPARATE:
+ 			if (chan->indexed)
+ 				name = kasprintf(GFP_KERNEL, "%s_%s%d_%s",
+ 						    iio_direction[chan->output],
+ 						    iio_chan_type_name_spec[chan->type],
+ 						    chan->channel,
+ 						    full_postfix);
+ 			else
+ 				name = kasprintf(GFP_KERNEL, "%s_%s_%s",
+ 						    iio_direction[chan->output],
+ 						    iio_chan_type_name_spec[chan->type],
+ 						    full_postfix);
+ 			break;
+ 		}
++>>>>>>> 7bbcf7e13695 (iio: Avoid unnecessary kasprintf)
  	}
- 	if (name_format == NULL) {
+ 	if (name == NULL) {
  		ret = -ENOMEM;
  		goto error_free_full_postfix;
  	}
@@@ -628,16 -649,10 +686,20 @@@
  		dev_attr->attr.mode |= S_IWUSR;
  		dev_attr->store = writefunc;
  	}
++<<<<<<< HEAD
 +	kfree(name_format);
 +	kfree(full_postfix);
  
 +	return 0;
 +
 +error_free_name_format:
 +	kfree(name_format);
++=======
++
++>>>>>>> 7bbcf7e13695 (iio: Avoid unnecessary kasprintf)
  error_free_full_postfix:
  	kfree(full_postfix);
 -
 +error_ret:
  	return ret;
  }
  
* Unmerged path drivers/iio/industrialio-core.c
