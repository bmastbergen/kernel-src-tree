perf test: Print result for each LLVM subtest

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Wang Nan <wangnan0@huawei.com>
commit e8c6d500447c577e669c24ec04cd4173fe9f9afb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e8c6d500.failed

Currently 'perf test llvm' and 'perf test BPF' have multiple sub-tests,
but the result is provided in only one line:

  # perf test LLVM
  35: Test LLVM searching and compiling                        : Ok

This patch introduces sub-tests support, allowing 'perf test' to report
result for each sub-tests:

  # perf test LLVM
  35: Test LLVM searching and compiling                        :
  35.1: Basic BPF llvm compiling test                          : Ok
  35.2: Test kbuild searching                                  : Ok
  35.3: Compile source for BPF prologue generation test        : Ok

When a failure happens:

  # cat ~/.perfconfig
  [llvm]
       clang-path = "/bin/false"
  # perf test LLVM
  35: Test LLVM searching and compiling                        :
  35.1: Basic BPF llvm compiling test                          : FAILED!
  35.2: Test kbuild searching                                  : Skip
  35.3: Compile source for BPF prologue generation test        : Skip

And:

  # rm ~/.perfconfig
  # ./perf test LLVM
  35: Test LLVM searching and compiling                        :
  35.1: Basic BPF llvm compiling test                          : Skip
  35.2: Test kbuild searching                                  : Skip
  35.3: Compile source for BPF prologue generation test        : Skip

Skip by user:

  # ./perf test -s 1,`seq -s , 3 42`
   1: vmlinux symtab matches kallsyms                          : Skip (user override)
   2: detect openat syscall event                              : Ok
  ...
  35: Test LLVM searching and compiling                        : Skip (user override)
  ...

Suggested-and-Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Signed-off-by: Wang Nan <wangnan0@huawei.com>
	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com>
	Cc: Zefan Li <lizefan@huawei.com>
	Cc: pi3orama@163.com
Link: http://lkml.kernel.org/r/1447749170-175898-4-git-send-email-wangnan0@huawei.com
[ Changed so that func is not on an anonymous union ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit e8c6d500447c577e669c24ec04cd4173fe9f9afb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/builtin-test.c
#	tools/perf/tests/llvm.c
#	tools/perf/tests/tests.h
diff --cc tools/perf/tests/builtin-test.c
index 0164e0678b6e,813660976217..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -173,7 -158,16 +173,20 @@@ static struct test generic_tests[] = 
  		.func = test__thread_map,
  	},
  	{
++<<<<<<< HEAD
 +		.desc = "Session topology",
++=======
+ 		.desc = "Test LLVM searching and compiling",
+ 		.func = test__llvm,
+ 		.subtest = {
+ 			.skip_if_fail	= true,
+ 			.get_nr		= test__llvm_subtest_get_nr,
+ 			.get_desc	= test__llvm_subtest_get_desc,
+ 		},
+ 	},
+ 	{
+ 		.desc = "Test topology in session",
++>>>>>>> e8c6d500447c (perf test: Print result for each LLVM subtest)
  		.func = test_session_topology,
  	},
  	{
diff --cc tools/perf/tests/tests.h
index 1b76acfa89d8,f92af527f080..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -29,7 -29,11 +29,15 @@@ enum 
  struct test {
  	const char *desc;
  	int (*func)(int subtest);
++<<<<<<< HEAD
 +	bool (*is_supported)(void);
++=======
+ 	struct {
+ 		bool skip_if_fail;
+ 		int (*get_nr)(void);
+ 		const char *(*get_desc)(int subtest);
+ 	} subtest;
++>>>>>>> e8c6d500447c (perf test: Print result for each LLVM subtest)
  };
  
  /* Tests */
@@@ -70,24 -72,11 +78,31 @@@ int test__fdarray__filter(int subtest)
  int test__fdarray__add(int subtest);
  int test__kmod_path__parse(int subtest);
  int test__thread_map(int subtest);
++<<<<<<< HEAD
++=======
+ int test__llvm(int subtest);
+ const char *test__llvm_subtest_get_desc(int subtest);
+ int test__llvm_subtest_get_nr(void);
+ int test__bpf(int subtest);
++>>>>>>> e8c6d500447c (perf test: Print result for each LLVM subtest)
  int test_session_topology(int subtest);
 +int test__thread_map_synthesize(int subtest);
 +int test__thread_map_remove(int subtest);
 +int test__cpu_map_synthesize(int subtest);
 +int test__synthesize_stat_config(int subtest);
 +int test__synthesize_stat(int subtest);
 +int test__synthesize_stat_round(int subtest);
 +int test__event_update(int subtest);
 +int test__event_times(int subtest);
 +int test__backward_ring_buffer(int subtest);
 +int test__cpu_map_print(int subtest);
 +int test__sdt_event(int subtest);
 +int test__is_printable_array(int subtest);
 +int test__bitmap_print(int subtest);
 +int test__perf_hooks(int subtest);
 +int test__unit_number__scnprint(int subtest);
 +
 +bool test__bp_signal_is_supported(void);
  
  #if defined(__arm__) || defined(__aarch64__)
  #ifdef HAVE_DWARF_UNWIND_SUPPORT
* Unmerged path tools/perf/tests/llvm.c
* Unmerged path tools/perf/tests/builtin-test.c
* Unmerged path tools/perf/tests/llvm.c
* Unmerged path tools/perf/tests/tests.h
