bnxt_en: Expand bnxt_check_rings() to check all resources.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Expand bnxt_check_rings() to check all resources (Jonathan Toppins) [1526120]
Rebuild_FUZZ: 99.13%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 8f23d638b36b4ff0fe5785cf01f9bdc41afb9c06
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/8f23d638.failed

bnxt_check_rings() is called by ethtool, XDP setup, and ndo_setup_tc()
to see if there are enough resources to support the new configuration.
Expand the call to test all resources if the firmware supports the new
API.  With the more flexible resource allocation scheme, this call must
be made to check that all resources are available before committing to
allocate the resources.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8f23d638b36b4ff0fe5785cf01f9bdc41afb9c06)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index bf9be452e102,b1317eaa3cbf..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -7400,6 -7491,35 +7471,38 @@@ static void bnxt_sp_task(struct work_st
  	clear_bit(BNXT_STATE_IN_SP_TASK, &bp->state);
  }
  
++<<<<<<< HEAD
++=======
+ /* Under rtnl_lock */
+ int bnxt_check_rings(struct bnxt *bp, int tx, int rx, bool sh, int tcs,
+ 		     int tx_xdp)
+ {
+ 	int max_rx, max_tx, tx_sets = 1;
+ 	int tx_rings_needed;
+ 	int rx_rings = rx;
+ 	int cp, rc;
+ 
+ 	if (tcs)
+ 		tx_sets = tcs;
+ 
+ 	rc = bnxt_get_max_rings(bp, &max_rx, &max_tx, sh);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (max_rx < rx)
+ 		return -ENOMEM;
+ 
+ 	tx_rings_needed = tx * tx_sets + tx_xdp;
+ 	if (max_tx < tx_rings_needed)
+ 		return -ENOMEM;
+ 
+ 	if (bp->flags & BNXT_FLAG_AGG_RINGS)
+ 		rx_rings <<= 1;
+ 	cp = sh ? max_t(int, tx_rings_needed, rx) : tx_rings_needed + rx;
+ 	return bnxt_hwrm_check_rings(bp, tx_rings_needed, rx_rings, rx, cp);
+ }
+ 
++>>>>>>> 8f23d638b36b (bnxt_en: Expand bnxt_check_rings() to check all resources.)
  static void bnxt_unmap_bars(struct bnxt *bp, struct pci_dev *pdev)
  {
  	if (bp->bar2) {
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
