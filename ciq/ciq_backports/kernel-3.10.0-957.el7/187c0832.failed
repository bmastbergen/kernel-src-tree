nvme-rdma: Allow DELETING state change failure in error_recovery

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Nitzan Carmi <nitzanc@mellanox.com>
commit 187c0832ee80250036adb386b5ffa8f4bcb0ff1e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/187c0832.failed

While error recovery is ongoing, it is OK to move
ctrl to DELETING state (from concurrent delete_work).
Thus we don't need a warning for that case.

	Signed-off-by: Nitzan Carmi <nitzanc@mellanox.com>
	Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 187c0832ee80250036adb386b5ffa8f4bcb0ff1e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/rdma.c
diff --cc drivers/nvme/host/rdma.c
index 215f7f62fdfb,5e731f2c329c..000000000000
--- a/drivers/nvme/host/rdma.c
+++ b/drivers/nvme/host/rdma.c
@@@ -817,12 -969,12 +817,18 @@@ static void nvme_rdma_error_recovery_wo
  	 * queues are not a live anymore, so restart the queues to fail fast
  	 * new IO
  	 */
 -	blk_mq_unquiesce_queue(ctrl->ctrl.admin_q);
 +	blk_mq_start_stopped_hw_queues(ctrl->ctrl.admin_q, true);
  	nvme_start_queues(&ctrl->ctrl);
  
++<<<<<<< HEAD
 +	if (!nvme_change_ctrl_state(&ctrl->ctrl, NVME_CTRL_RECONNECTING)) {
 +		/* state change failure should never happen */
 +		WARN_ON_ONCE(1);
++=======
+ 	if (!nvme_change_ctrl_state(&ctrl->ctrl, NVME_CTRL_CONNECTING)) {
+ 		/* state change failure is ok if we're in DELETING state */
+ 		WARN_ON_ONCE(ctrl->ctrl.state != NVME_CTRL_DELETING);
++>>>>>>> 187c0832ee80 (nvme-rdma: Allow DELETING state change failure in error_recovery)
  		return;
  	}
  
* Unmerged path drivers/nvme/host/rdma.c
