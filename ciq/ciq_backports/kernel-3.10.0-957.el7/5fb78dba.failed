crypto: chelsio - Update IV before sending request to HW

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [crypto] chelsio - Update IV before sending request to HW (Arjun Vynipadath) [1523191]
Rebuild_FUZZ: 92.31%
commit-author Harsh Jain <harsh@chelsio.com>
commit 5fb78dba1667d63ab5ebed19724477a2f1e08717
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5fb78dba.failed

CBC Decryption requires Last Block as IV. In case src/dst buffer
are same last block will be replaced by plain text. This patch copies
the Last Block before sending request to HW.

	Signed-off-by: Harsh Jain <harsh@chelsio.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 5fb78dba1667d63ab5ebed19724477a2f1e08717)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/chelsio/chcr_algo.c
diff --cc drivers/crypto/chelsio/chcr_algo.c
index 3e036cc4f26b,002e0c298fb5..000000000000
mode 100755,100644..100755
--- a/drivers/crypto/chelsio/chcr_algo.c
+++ b/drivers/crypto/chelsio/chcr_algo.c
@@@ -693,26 -843,25 +693,36 @@@ static struct sk_buff *create_cipher_wr
  		}
  	}
  	phys_cpl = (struct cpl_rx_phys_dsgl *)((u8 *)(chcr_req + 1) + kctx_len);
 -	ulptx = (struct ulptx_sgl *)((u8 *)(phys_cpl + 1) + dst_size);
 -	chcr_add_cipher_src_ent(wrparam->req, ulptx, wrparam);
 -	chcr_add_cipher_dst_ent(wrparam->req, phys_cpl, wrparam, wrparam->qid);
 +	sg_param.nents = reqctx->dst_nents;
 +	sg_param.obsize =  wrparam->bytes;
 +	sg_param.qid = wrparam->qid;
 +	error = map_writesg_phys_cpl(&u_ctx->lldi.pdev->dev, phys_cpl,
 +				       reqctx->dst, &sg_param);
 +	if (error)
 +		goto map_fail1;
  
 +	skb_set_transport_header(skb, transhdr_len);
 +	write_buffer_to_skb(skb, &frags, reqctx->iv, ivsize);
 +	write_sg_to_skb(skb, &frags, wrparam->srcsg, wrparam->bytes);
  	atomic_inc(&adap->chcr_stats.cipher_rqst);
 -	temp = sizeof(struct cpl_rx_phys_dsgl) + dst_size + kctx_len
 -		+(reqctx->imm ? (IV + wrparam->bytes) : 0);
 -	create_wreq(c_ctx(tfm), chcr_req, &(wrparam->req->base), reqctx->imm, 0,
 -		    transhdr_len, temp,
 +	create_wreq(ctx, chcr_req, &(wrparam->req->base), skb, kctx_len, 0, 1,
 +			sizeof(struct cpl_rx_phys_dsgl) + phys_dsgl,
  			ablkctx->ciph_mode == CHCR_SCMD_CIPHER_MODE_AES_CBC);
  	reqctx->skb = skb;
++<<<<<<< HEAD
 +	skb_get(skb);
++=======
+ 
+ 	if (reqctx->op && (ablkctx->ciph_mode ==
+ 			   CHCR_SCMD_CIPHER_MODE_AES_CBC))
+ 		sg_pcopy_to_buffer(wrparam->req->src,
+ 			sg_nents(wrparam->req->src), wrparam->req->info, 16,
+ 			reqctx->processed + wrparam->bytes - AES_BLOCK_SIZE);
+ 
++>>>>>>> 5fb78dba1667 (crypto: chelsio - Update IV before sending request to HW)
  	return skb;
 +map_fail1:
 +	kfree_skb(skb);
  err:
  	return ERR_PTR(error);
  }
* Unmerged path drivers/crypto/chelsio/chcr_algo.c
