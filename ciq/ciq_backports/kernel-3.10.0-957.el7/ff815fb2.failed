ixgbe: There is no need to update num_rx_pools in L2 fwd offload

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alexander Duyck <alexander.h.duyck@intel.com>
commit ff815fb2cf638e0906764c9e0f66bc93703626f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ff815fb2.failed

The num_rx_pools value is overwritten when we reinitialize the queue
configuration. In reality we shouldn't need to be updating the value since
it is redone every time we call into ixgbe_setup_tc so for now just drop
the spots where we were incrementing or decrementing the value.

	Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit ff815fb2cf638e0906764c9e0f66bc93703626f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
index 35c1fe8a4430,56622adc76dc..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
@@@ -689,7 -700,8 +689,12 @@@ static void ixgbe_set_num_queues(struc
  	/* Start with base case */
  	adapter->num_rx_queues = 1;
  	adapter->num_tx_queues = 1;
++<<<<<<< HEAD
 +	adapter->num_rx_pools = adapter->num_rx_queues;
++=======
+ 	adapter->num_xdp_queues = 0;
+ 	adapter->num_rx_pools = 1;
++>>>>>>> ff815fb2cf63 (ixgbe: There is no need to update num_rx_pools in L2 fwd offload)
  	adapter->num_rx_queues_per_pool = 1;
  
  #ifdef CONFIG_IXGBE_DCB
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_lib.c
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 6af8bd8690a7..35011d17a45b 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -9583,7 +9583,6 @@ static void *ixgbe_fwd_add(struct net_device *pdev, struct net_device *vdev)
 		return ERR_PTR(-ENOMEM);
 
 	pool = find_first_zero_bit(&adapter->fwd_bitmask, 32);
-	adapter->num_rx_pools++;
 	set_bit(pool, &adapter->fwd_bitmask);
 
 	/* Enable VMDq flag so device will be set in VM mode */
@@ -9611,7 +9610,6 @@ fwd_add_err:
 	netdev_info(pdev,
 		    "%s: dfwd hardware acceleration failed\n", vdev->name);
 	clear_bit(pool, &adapter->fwd_bitmask);
-	adapter->num_rx_pools--;
 	kfree(fwd_adapter);
 	return ERR_PTR(err);
 }
@@ -9622,7 +9620,6 @@ static void ixgbe_fwd_del(struct net_device *pdev, void *priv)
 	struct ixgbe_adapter *adapter = fwd_adapter->real_adapter;
 
 	clear_bit(fwd_adapter->pool, &adapter->fwd_bitmask);
-	adapter->num_rx_pools--;
 
 	adapter->ring_feature[RING_F_VMDQ].limit = adapter->num_rx_pools;
 	ixgbe_fwd_ring_down(fwd_adapter->netdev, fwd_adapter);
