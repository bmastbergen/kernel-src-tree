sched/debug: Fix SCHED_WARN_ON() to return a value on !CONFIG_SCHED_DEBUG as well

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ingo Molnar <mingo@kernel.org>
commit 6d3aed3d8a0573d0a6eb1160ccd0a0713f4dbc2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6d3aed3d.failed

This definition of SCHED_WARN_ON():

 #define SCHED_WARN_ON(x)        ((void)(x))

is not fully compatible with the 'real' WARN_ON_ONCE() primitive, as it
has no return value, so it cannot be used in conditionals.

Fix it.

	Cc: Daniel Axtens <dja@axtens.net>
	Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: linux-kernel@vger.kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 6d3aed3d8a0573d0a6eb1160ccd0a0713f4dbc2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/sched.h
diff --cc kernel/sched/sched.h
index 98cec6922405,e0329d10bdb8..000000000000
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@@ -16,25 -38,32 +16,41 @@@
  #include "cpudeadline.h"
  #include "cpuacct.h"
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_SCHED_DEBUG
+ # define SCHED_WARN_ON(x)	WARN_ONCE(x, #x)
+ #else
+ # define SCHED_WARN_ON(x)	({ (void)(x), 0; })
+ #endif
+ 
+ struct rq;
+ struct cpuidle_state;
+ 
+ /* task_struct::on_rq states: */
+ #define TASK_ON_RQ_QUEUED	1
+ #define TASK_ON_RQ_MIGRATING	2
+ 
++>>>>>>> 6d3aed3d8a05 (sched/debug: Fix SCHED_WARN_ON() to return a value on !CONFIG_SCHED_DEBUG as well)
  extern __read_mostly int scheduler_running;
  
 -extern unsigned long calc_load_update;
 -extern atomic_long_t calc_load_tasks;
 -
 -extern void calc_global_load_tick(struct rq *this_rq);
 -extern long calc_load_fold_active(struct rq *this_rq, long adjust);
 +/*
 + * Convert user-nice values [ -20 ... 0 ... 19 ]
 + * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],
 + * and back.
 + */
 +#define NICE_TO_PRIO(nice)	(MAX_RT_PRIO + (nice) + 20)
 +#define PRIO_TO_NICE(prio)	((prio) - MAX_RT_PRIO - 20)
 +#define TASK_NICE(p)		PRIO_TO_NICE((p)->static_prio)
  
 -#ifdef CONFIG_SMP
 -extern void cpu_load_update_active(struct rq *this_rq);
 -#else
 -static inline void cpu_load_update_active(struct rq *this_rq) { }
 -#endif
 +/*
 + * 'User priority' is the nice value converted to something we
 + * can work with better when scaling various scheduler parameters,
 + * it's a [ 0 ... 39 ] range.
 + */
 +#define USER_PRIO(p)		((p)-MAX_RT_PRIO)
 +#define TASK_USER_PRIO(p)	USER_PRIO((p)->static_prio)
 +#define MAX_USER_PRIO		(USER_PRIO(MAX_PRIO))
  
  /*
   * Helpers for converting nanosecond timing to jiffy resolution
* Unmerged path kernel/sched/sched.h
