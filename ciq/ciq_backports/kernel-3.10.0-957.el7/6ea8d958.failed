mm/madvise.c: fix madvise() infinite loop under special circumstances

jira LE-1907
cve CVE-2017-18208
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mm] madvise: fix madvise() infinite loop under special circumstances (Rafael Aquini) [1552982] {CVE-2017-18208}
Rebuild_FUZZ: 96.24%
commit-author chenjie <chenjie6@huawei.com>
commit 6ea8d958a2c95a1d514015d4e29ba21a8c0a1a91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6ea8d958.failed

MADVISE_WILLNEED has always been a noop for DAX (formerly XIP) mappings.
Unfortunately madvise_willneed() doesn't communicate this information
properly to the generic madvise syscall implementation.  The calling
convention is quite subtle there.  madvise_vma() is supposed to either
return an error or update &prev otherwise the main loop will never
advance to the next vma and it will keep looping for ever without a way
to get out of the kernel.

It seems this has been broken since introduction.  Nobody has noticed
because nobody seems to be using MADVISE_WILLNEED on these DAX mappings.

[mhocko@suse.com: rewrite changelog]
Link: http://lkml.kernel.org/r/20171127115318.911-1-guoxuenan@huawei.com
Fixes: fe77ba6f4f97 ("[PATCH] xip: madvice/fadvice: execute in place")
	Signed-off-by: chenjie <chenjie6@huawei.com>
	Signed-off-by: guoxuenan <guoxuenan@huawei.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: zhangyi (F) <yi.zhang@huawei.com>
	Cc: Miao Xie <miaoxie@huawei.com>
	Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
	Cc: Shaohua Li <shli@fb.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Mel Gorman <mgorman@techsingularity.net>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Anshuman Khandual <khandual@linux.vnet.ibm.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Carsten Otte <cotte@de.ibm.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6ea8d958a2c95a1d514015d4e29ba21a8c0a1a91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/madvise.c
diff --cc mm/madvise.c
index 896fc122d177,751e97aa2210..000000000000
--- a/mm/madvise.c
+++ b/mm/madvise.c
@@@ -223,20 -276,22 +223,35 @@@ static long madvise_willneed(struct vm_
  {
  	struct file *file = vma->vm_file;
  
+ 	*prev = vma;
  #ifdef CONFIG_SWAP
++<<<<<<< HEAD
 +	if (!file || mapping_cap_swap_backed(file->f_mapping)) {
 +		*prev = vma;
 +		if (!file)
 +			force_swapin_readahead(vma, start, end);
 +		else
 +			force_shm_swapin_readahead(vma, start, end,
 +						file->f_mapping);
++=======
+ 	if (!file) {
+ 		force_swapin_readahead(vma, start, end);
++>>>>>>> 6ea8d958a2c9 (mm/madvise.c: fix madvise() infinite loop under special circumstances)
  		return 0;
  	}
 +#endif
  
++<<<<<<< HEAD
++=======
+ 	if (shmem_mapping(file->f_mapping)) {
+ 		force_shm_swapin_readahead(vma, start, end,
+ 					file->f_mapping);
+ 		return 0;
+ 	}
+ #else
++>>>>>>> 6ea8d958a2c9 (mm/madvise.c: fix madvise() infinite loop under special circumstances)
  	if (!file)
  		return -EBADF;
 -#endif
  
  	if (IS_DAX(file_inode(file))) {
  		/* no bad return value, but ignore advice */
* Unmerged path mm/madvise.c
