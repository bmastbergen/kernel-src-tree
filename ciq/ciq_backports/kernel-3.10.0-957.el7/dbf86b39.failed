nvme: add support for NVMe 1.3 Timestamp Feature

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [nvme] add support for NVMe 1.3 Timestamp Feature (David Milburn) [1519689]
Rebuild_FUZZ: 93.33%
commit-author Jon Derrick <jonathan.derrick@intel.com>
commit dbf86b39005d26b21c52a23720e15fb850d71cdc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/dbf86b39.failed

NVME's Timestamp feature allows controllers to be aware of the epoch
time in milliseconds. This patch adds the set features hook for various
transports through the identify path, so that resets and resumes can
update the controller as necessary.

	Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
[hch: rebased on top of nvme-4.13 error handling changes,
      changed nvme_configure_timestamp to return the status]
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit dbf86b39005d26b21c52a23720e15fb850d71cdc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/nvme.h
diff --cc include/linux/nvme.h
index d91a22a6121a,a12b47073273..000000000000
--- a/include/linux/nvme.h
+++ b/include/linux/nvme.h
@@@ -253,8 -253,12 +253,13 @@@ enum 
  	NVME_CTRL_ONCS_COMPARE			= 1 << 0,
  	NVME_CTRL_ONCS_WRITE_UNCORRECTABLE	= 1 << 1,
  	NVME_CTRL_ONCS_DSM			= 1 << 2,
++<<<<<<< HEAD
++=======
+ 	NVME_CTRL_ONCS_WRITE_ZEROES		= 1 << 3,
+ 	NVME_CTRL_ONCS_TIMESTAMP		= 1 << 6,
++>>>>>>> dbf86b39005d (nvme: add support for NVMe 1.3 Timestamp Feature)
  	NVME_CTRL_VWC_PRESENT			= 1 << 0,
 -	NVME_CTRL_OACS_SEC_SUPP                 = 1 << 0,
 -	NVME_CTRL_OACS_DIRECTIVES		= 1 << 5,
 -	NVME_CTRL_OACS_DBBUF_SUPP		= 1 << 7,
 +	NVME_CTRL_OACS_DBBUF_SUPP		= 1 << 8,
  };
  
  struct nvme_lbaf {
diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index 59cc4fd27db0..e20bf6390d98 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -1366,6 +1366,23 @@ static void nvme_set_queue_limits(struct nvme_ctrl *ctrl,
 	blk_queue_virt_boundary(q, ctrl->page_size - 1);
 }
 
+static int nvme_configure_timestamp(struct nvme_ctrl *ctrl)
+{
+	__le64 ts;
+	int ret;
+
+	if (!(ctrl->oncs & NVME_CTRL_ONCS_TIMESTAMP))
+		return 0;
+
+	ts = cpu_to_le64(ktime_to_ms(ktime_get_real()));
+	ret = nvme_set_features(ctrl, NVME_FEAT_TIMESTAMP, 0, &ts, sizeof(ts),
+			NULL);
+	if (ret)
+		dev_warn_once(ctrl->device,
+			"could not set timestamp (%d)\n", ret);
+	return ret;
+}
+
 static int nvme_configure_apst(struct nvme_ctrl *ctrl)
 {
 	/*
@@ -1722,6 +1739,10 @@ int nvme_init_identify(struct nvme_ctrl *ctrl)
 	ret = nvme_configure_apst(ctrl);
 	if (ret < 0)
 		return ret;
+	
+	ret = nvme_configure_timestamp(ctrl);
+	if (ret < 0)
+		return ret;
 
 	ctrl->identified = true;
 
* Unmerged path include/linux/nvme.h
