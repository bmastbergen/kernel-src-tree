ftrace: Make ftrace_location_range() global

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Michael Ellerman <mpe@ellerman.id.au>
commit 04cf31a759ef575f750a63777cee95500e410994
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/04cf31a7.failed

In order to support live patching on powerpc we would like to call
ftrace_location_range(), so make it global.

	Signed-off-by: Torsten Duwe <duwe@suse.de>
	Signed-off-by: Balbir Singh <bsingharora@gmail.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 04cf31a759ef575f750a63777cee95500e410994)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ftrace.h
diff --cc include/linux/ftrace.h
index 1581f57a307b,3481a8e405f9..000000000000
--- a/include/linux/ftrace.h
+++ b/include/linux/ftrace.h
@@@ -379,6 -455,9 +379,12 @@@ int ftrace_update_record(struct dyn_ftr
  int ftrace_test_record(struct dyn_ftrace *rec, int enable);
  void ftrace_run_stop_machine(int command);
  unsigned long ftrace_location(unsigned long ip);
++<<<<<<< HEAD
++=======
+ unsigned long ftrace_location_range(unsigned long start, unsigned long end);
+ unsigned long ftrace_get_addr_new(struct dyn_ftrace *rec);
+ unsigned long ftrace_get_addr_curr(struct dyn_ftrace *rec);
++>>>>>>> 04cf31a759ef (ftrace: Make ftrace_location_range() global)
  
  extern ftrace_func_t ftrace_trace_function;
  
* Unmerged path include/linux/ftrace.h
diff --git a/kernel/trace/ftrace.c b/kernel/trace/ftrace.c
index c77d05ffc8c9..71b73a0c90c3 100644
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@ -1522,7 +1522,19 @@ static int ftrace_cmp_recs(const void *a, const void *b)
 	return 0;
 }
 
-static unsigned long ftrace_location_range(unsigned long start, unsigned long end)
+/**
+ * ftrace_location_range - return the first address of a traced location
+ *	if it touches the given ip range
+ * @start: start of range to search.
+ * @end: end of range to search (inclusive). @end points to the last byte
+ *	to check.
+ *
+ * Returns rec->ip if the related ftrace location is a least partly within
+ * the given address range. That is, the first address of the instruction
+ * that is either a NOP or call to the function tracer. It checks the ftrace
+ * internal tables to determine if the address belongs or not.
+ */
+unsigned long ftrace_location_range(unsigned long start, unsigned long end)
 {
 	struct ftrace_page *pg;
 	struct dyn_ftrace *rec;
