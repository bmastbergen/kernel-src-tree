x86/platform/UV: Fix GAM Range Table entries less than 1GB

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] platform/uv: Fix GAM Range Table entries less than 1GB (Frank Ramsay) [1549252]
Rebuild_FUZZ: 96.43%
commit-author mike.travis@hpe.com <mike.travis@hpe.com>
commit c25d99d20ba69824a1e2cc118e04b877cd427afc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c25d99d2.failed

The latest UV platforms include the new ApachePass NVDIMMs into the
UV address space.  This has introduced address ranges in the Global
Address Map Table that are less than the previous lowest range, which
was 2GB.  Fix the address calculation so it accommodates address ranges
from bytes to exabytes.

	Signed-off-by: Mike Travis <mike.travis@hpe.com>
	Reviewed-by: Andrew Banman <andrew.banman@hpe.com>
	Reviewed-by: Dimitri Sivanich <dimitri.sivanich@hpe.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Russ Anderson <russ.anderson@hpe.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20180205221503.190219903@stormcage.americas.sgi.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit c25d99d20ba69824a1e2cc118e04b877cd427afc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/apic/x2apic_uv_x.c
diff --cc arch/x86/kernel/apic/x2apic_uv_x.c
index 8e1cf1975fe3,f11910b44638..000000000000
--- a/arch/x86/kernel/apic/x2apic_uv_x.c
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c
@@@ -1231,14 -1176,21 +1231,28 @@@ static void __init decode_gam_rng_tbl(u
  
  	uv_gre_table = gre;
  	for (; gre->type != UV_GAM_RANGE_TYPE_UNUSED; gre++) {
+ 		unsigned long size = ((unsigned long)(gre->limit - lgre)
+ 					<< UV_GAM_RANGE_SHFT);
+ 		int order = 0;
+ 		char suffix[] = " KMGTPE";
+ 
+ 		while (size > 9999 && order < sizeof(suffix)) {
+ 			size /= 1024;
+ 			order++;
+ 		}
+ 
  		if (!index) {
  			pr_info("UV: GAM Range Table...\n");
 -			pr_info("UV:  # %20s %14s %5s %4s %5s %3s %2s\n", "Range", "", "Size", "Type", "NASID", "SID", "PN");
 +			pr_info("UV:  # %20s %14s %5s %4s %5s %3s %2s\n",
 +				"Range", "", "Size", "Type", "NASID",
 +				"SID", "PN");
  		}
++<<<<<<< HEAD
 +		pr_info(
 +		"UV: %2d: 0x%014lx-0x%014lx %5luG %3d   %04x  %02x %02x\n",
++=======
+ 		pr_info("UV: %2d: 0x%014lx-0x%014lx %5lu%c %3d   %04x  %02x %02x\n",
++>>>>>>> c25d99d20ba6 (x86/platform/UV: Fix GAM Range Table entries less than 1GB)
  			index++,
  			(unsigned long)lgre << UV_GAM_RANGE_SHFT,
  			(unsigned long)gre->limit << UV_GAM_RANGE_SHFT,
* Unmerged path arch/x86/kernel/apic/x2apic_uv_x.c
