KVM/VMX: Emulate MSR_IA32_ARCH_CAPABILITIES

jira LE-1907
cve CVE-2018-3639
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author KarimAllah Ahmed <karahmed@amazon.de>
commit 28c1c9fabf48d6ad596273a11c46e0d0da3e14cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/28c1c9fa.failed

Intel processors use MSR_IA32_ARCH_CAPABILITIES MSR to indicate RDCL_NO
(bit 0) and IBRS_ALL (bit 1). This is a read-only MSR. By default the
contents will come directly from the hardware, but user-space can still
override it.

[dwmw2: The bit in kvm_cpuid_7_0_edx_x86_features can be unconditional]

	Signed-off-by: KarimAllah Ahmed <karahmed@amazon.de>
	Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Jim Mattson <jmattson@google.com>
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jun Nakajima <jun.nakajima@intel.com>
	Cc: kvm@vger.kernel.org
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Asit Mallick <asit.k.mallick@intel.com>
	Cc: Arjan Van De Ven <arjan.van.de.ven@intel.com>
	Cc: Greg KH <gregkh@linuxfoundation.org>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Tim Chen <tim.c.chen@linux.intel.com>
	Cc: Ashok Raj <ashok.raj@intel.com>
Link: https://lkml.kernel.org/r/1517522386-18410-4-git-send-email-karahmed@amazon.de

(cherry picked from commit 28c1c9fabf48d6ad596273a11c46e0d0da3e14cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/cpuid.c
#	arch/x86/kvm/vmx.c
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/cpuid.c
index 7bb663af32bb,1909635fe09c..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -383,12 -394,7 +383,16 @@@ static inline int __do_cpuid_ent(struc
  
  	/* cpuid 7.0.edx*/
  	const u32 kvm_cpuid_7_0_edx_x86_features =
++<<<<<<< HEAD
 +		F(AVX512_4VNNIW) | F(AVX512_4FMAPS) |
 +		F(SPEC_CTRL) | F(INTEL_STIBP);
 +
 +	/* cpuid 0x80000008.ebx */
 +	const u32 kvm_cpuid_8000_0008_ebx_x86_features =
 +		F(IBPB) | F(IBRS) | F(STIBP);
++=======
+ 		F(AVX512_4VNNIW) | F(AVX512_4FMAPS) | F(ARCH_CAPABILITIES);
++>>>>>>> 28c1c9fabf48 (KVM/VMX: Emulate MSR_IA32_ARCH_CAPABILITIES)
  
  	/* all calls to cpuid_count() should be made on the same cpu */
  	get_cpu();
diff --cc arch/x86/kvm/vmx.c
index bb5a385ea422,e5f75eb7c459..000000000000
--- a/arch/x86/kvm/vmx.c
+++ b/arch/x86/kvm/vmx.c
@@@ -557,8 -593,9 +557,10 @@@ struct vcpu_vmx 
  	u64 		      msr_host_kernel_gs_base;
  	u64 		      msr_guest_kernel_gs_base;
  #endif
 +	u64		      spec_ctrl;
  
+ 	u64 		      arch_capabilities;
+ 
  	u32 vm_entry_controls_shadow;
  	u32 vm_exit_controls_shadow;
  	u32 secondary_exec_control;
@@@ -2947,13 -3262,11 +2949,21 @@@ static int vmx_get_msr(struct kvm_vcpu 
  	case MSR_IA32_TSC:
  		msr_info->data = guest_read_tsc(vcpu);
  		break;
++<<<<<<< HEAD
 +	case MSR_IA32_SPEC_CTRL:
 +		if (!msr_info->host_initiated &&
 +		    !guest_cpuid_has(vcpu, X86_FEATURE_IBRS) &&
 +		    !guest_cpuid_has(vcpu, X86_FEATURE_SPEC_CTRL))
 +			return 1;
 +
 +		msr_info->data = to_vmx(vcpu)->spec_ctrl;
++=======
+ 	case MSR_IA32_ARCH_CAPABILITIES:
+ 		if (!msr_info->host_initiated &&
+ 		    !guest_cpuid_has(vcpu, X86_FEATURE_ARCH_CAPABILITIES))
+ 			return 1;
+ 		msr_info->data = to_vmx(vcpu)->arch_capabilities;
++>>>>>>> 28c1c9fabf48 (KVM/VMX: Emulate MSR_IA32_ARCH_CAPABILITIES)
  		break;
  	case MSR_IA32_SYSENTER_CS:
  		msr_info->data = vmcs_read32(GUEST_SYSENTER_CS);
diff --cc arch/x86/kvm/x86.c
index 5fb8d1b72511,4ec142e90a34..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -974,7 -1009,7 +974,11 @@@ static u32 msrs_to_save[] = 
  #endif
  	MSR_IA32_TSC, MSR_IA32_CR_PAT, MSR_VM_HSAVE_PA,
  	MSR_IA32_FEATURE_CONTROL, MSR_IA32_BNDCFGS, MSR_TSC_AUX,
++<<<<<<< HEAD
 +	MSR_IA32_SPEC_CTRL,
++=======
+ 	MSR_IA32_ARCH_CAPABILITIES
++>>>>>>> 28c1c9fabf48 (KVM/VMX: Emulate MSR_IA32_ARCH_CAPABILITIES)
  };
  
  static unsigned num_msrs_to_save;
* Unmerged path arch/x86/kvm/cpuid.c
* Unmerged path arch/x86/kvm/vmx.c
* Unmerged path arch/x86/kvm/x86.c
