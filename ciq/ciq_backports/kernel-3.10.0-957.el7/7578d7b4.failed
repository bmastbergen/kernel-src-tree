net: sched: remove unused tcf_exts_get_dev helper and cls_flower->egress_dev

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] sched: remove unused tcf_exts_get_dev helper and cls_flower->egress_dev (Ivan Vecera) [1557539]
Rebuild_FUZZ: 96.60%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 7578d7b45ed870b13a8ace57e32feaed623c2a94
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/7578d7b4.failed

The helper and the struct field ares no longer used by any code,
so remove them.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7578d7b45ed870b13a8ace57e32feaed623c2a94)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_api.c
diff --cc net/sched/cls_api.c
index 3b8cc4dc4e82,2977b8a90851..000000000000
--- a/net/sched/cls_api.c
+++ b/net/sched/cls_api.c
@@@ -1012,27 -1004,42 +1012,66 @@@ int tcf_exts_dump_stats(struct sk_buff 
  }
  EXPORT_SYMBOL(tcf_exts_dump_stats);
  
++<<<<<<< HEAD
 +int tcf_exts_get_dev(struct net_device *dev, struct tcf_exts *exts,
 +		     struct net_device **hw_dev)
 +{
 +#ifdef CONFIG_NET_CLS_ACT
 +	const struct tc_action *a;
 +	LIST_HEAD(actions);
 +
 +	if (!tcf_exts_has_actions(exts))
 +		return -EINVAL;
 +
 +	tcf_exts_to_list(exts, &actions);
 +	list_for_each_entry(a, &actions, list) {
 +		if (a->ops->get_dev)
 +			*hw_dev = a->ops->get_dev(a);
 +	}
 +	if (*hw_dev)
 +		return 0;
 +#endif
 +	return -EOPNOTSUPP;
 +}
 +EXPORT_SYMBOL(tcf_exts_get_dev);
++=======
+ static int tc_exts_setup_cb_egdev_call(struct tcf_exts *exts,
+ 				       enum tc_setup_type type,
+ 				       void *type_data, bool err_stop)
+ {
+ 	int ok_count = 0;
+ #ifdef CONFIG_NET_CLS_ACT
+ 	const struct tc_action *a;
+ 	struct net_device *dev;
+ 	LIST_HEAD(actions);
+ 	int ret;
+ 
+ 	if (!tcf_exts_has_actions(exts))
+ 		return 0;
+ 
+ 	tcf_exts_to_list(exts, &actions);
+ 	list_for_each_entry(a, &actions, list) {
+ 		if (!a->ops->get_dev)
+ 			continue;
+ 		dev = a->ops->get_dev(a);
+ 		if (!dev || !tc_can_offload(dev))
+ 			continue;
+ 		ret = tc_setup_cb_egdev_call(dev, type, type_data, err_stop);
+ 		if (ret < 0)
+ 			return ret;
+ 		ok_count += ret;
+ 	}
+ #endif
+ 	return ok_count;
+ }
+ 
+ int tc_setup_cb_call(struct tcf_exts *exts, enum tc_setup_type type,
+ 		     void *type_data, bool err_stop)
+ {
+ 	return tc_exts_setup_cb_egdev_call(exts, type, type_data, err_stop);
+ }
+ EXPORT_SYMBOL(tc_setup_cb_call);
++>>>>>>> 7578d7b45ed8 (net: sched: remove unused tcf_exts_get_dev helper and cls_flower->egress_dev)
  
  static int __init tc_filter_init(void)
  {
diff --git a/include/net/pkt_cls.h b/include/net/pkt_cls.h
index 065c00671d15..2d8f900ff785 100644
--- a/include/net/pkt_cls.h
+++ b/include/net/pkt_cls.h
@@ -231,8 +231,6 @@ void tcf_exts_destroy(struct tcf_exts *exts);
 void tcf_exts_change(struct tcf_exts *dst, struct tcf_exts *src);
 int tcf_exts_dump(struct sk_buff *skb, struct tcf_exts *exts);
 int tcf_exts_dump_stats(struct sk_buff *skb, struct tcf_exts *exts);
-int tcf_exts_get_dev(struct net_device *dev, struct tcf_exts *exts,
-		     struct net_device **hw_dev);
 
 /**
  * struct tcf_pkt_info - packet information
@@ -543,7 +541,6 @@ struct tc_cls_flower_offload {
 	struct fl_flow_key *mask;
 	struct fl_flow_key *key;
 	struct tcf_exts *exts;
-	bool egress_dev;
 };
 
 enum tc_matchall_command {
* Unmerged path net/sched/cls_api.c
