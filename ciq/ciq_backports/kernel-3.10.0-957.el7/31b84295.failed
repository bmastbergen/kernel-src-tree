sfc: return a better error if filter insertion collides with MC reboot

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Edward Cree <ecree@solarflare.com>
commit 31b842955211f427a099f78a6a63d18a6bbc8d55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/31b84295.failed

If some other operation gets the MCDI lock ahead of us and performs an MC
 reboot, then our attempt to insert the filter will fail with EINVAL,
 because the destination VI (spec->dmaq_id, MC_CMD_FILTER_OP_IN_RX_QUEUE) does
 not exist.  But the caller's request (which might e.g. be an ethtool ntuple
 request from userland) isn't invalid, it just got unlucky; so return EAGAIN.

	Signed-off-by: Edward Cree <ecree@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 31b842955211f427a099f78a6a63d18a6bbc8d55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/ef10.c
diff --cc drivers/net/ethernet/sfc/ef10.c
index 85c02e9c3fe4,9a139c390037..000000000000
--- a/drivers/net/ethernet/sfc/ef10.c
+++ b/drivers/net/ethernet/sfc/ef10.c
@@@ -4236,8 -4300,9 +4236,13 @@@ static s32 efx_ef10_filter_insert(struc
  				  struct efx_filter_spec *spec,
  				  bool replace_equal)
  {
 +	struct efx_ef10_filter_table *table = efx->filter_state;
  	DECLARE_BITMAP(mc_rem_map, EFX_EF10_FILTER_SEARCH_LIMIT);
++<<<<<<< HEAD
++=======
+ 	struct efx_ef10_nic_data *nic_data = efx->nic_data;
+ 	struct efx_ef10_filter_table *table;
++>>>>>>> 31b842955211 (sfc: return a better error if filter insertion collides with MC reboot)
  	struct efx_filter_spec *saved_spec;
  	struct efx_rss_context *ctx = NULL;
  	unsigned int match_pri, hash;
@@@ -4392,8 -4427,14 +4397,14 @@@ found
  	rc = efx_ef10_filter_push(efx, spec, &table->entry[ins_index].handle,
  				  ctx, replacing);
  
+ 	if (rc == -EINVAL && nic_data->must_realloc_vis)
+ 		/* The MC rebooted under us, causing it to reject our filter
+ 		 * insertion as pointing to an invalid VI (spec->dmaq_id).
+ 		 */
+ 		rc = -EAGAIN;
+ 
  	/* Finalise the software table entry */
 +	spin_lock_bh(&efx->filter_lock);
  	if (rc == 0) {
  		if (replacing) {
  			/* Update the fields that may differ */
* Unmerged path drivers/net/ethernet/sfc/ef10.c
