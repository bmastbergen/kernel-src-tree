net/mlx4_en: Obsolete call to generic write_desc in XDP xmit flow

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] mlx4_en: Obsolete call to generic write_desc in XDP xmit flow (Erez Alfasi) [1520295]
Rebuild_FUZZ: 96.83%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit f6f0aa97413a420606aabe8142f8a5c0f15b9246
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f6f0aa97.failed

Function mlx4_en_tx_write_desc() is not optimized to use of XDP xmit.
Use the relevant parts inline instead.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f6f0aa97413a420606aabe8142f8a5c0f15b9246)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx4/en_tx.c
index 0949c7934152,ac7254e3f909..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_tx.c
@@@ -1058,3 -1081,94 +1058,97 @@@ tx_drop
  	return NETDEV_TX_OK;
  }
  
++<<<<<<< HEAD
++=======
+ #define MLX4_EN_XDP_TX_NRTXBB  1
+ #define MLX4_EN_XDP_TX_REAL_SZ (((CTRL_SIZE + MLX4_EN_XDP_TX_NRTXBB * DS_SIZE) \
+ 				 / 16) & 0x3f)
+ 
+ netdev_tx_t mlx4_en_xmit_frame(struct mlx4_en_rx_ring *rx_ring,
+ 			       struct mlx4_en_rx_alloc *frame,
+ 			       struct mlx4_en_priv *priv, unsigned int length,
+ 			       int tx_ind, bool *doorbell_pending)
+ {
+ 	union mlx4_wqe_qpn_vlan qpn_vlan = {
+ 		.fence_size = MLX4_EN_XDP_TX_REAL_SZ,
+ 	};
+ 	struct mlx4_en_tx_desc *tx_desc;
+ 	struct mlx4_en_tx_info *tx_info;
+ 	struct mlx4_wqe_data_seg *data;
+ 	struct mlx4_en_tx_ring *ring;
+ 	dma_addr_t dma;
+ 	__be32 op_own;
+ 	int index;
+ 
+ 	if (unlikely(!priv->port_up))
+ 		goto tx_drop;
+ 
+ 	ring = priv->tx_ring[TX_XDP][tx_ind];
+ 
+ 	if (unlikely(mlx4_en_is_tx_ring_full(ring)))
+ 		goto tx_drop_count;
+ 
+ 	index = ring->prod & ring->size_mask;
+ 	tx_info = &ring->tx_info[index];
+ 
+ 	/* Track current inflight packets for performance analysis */
+ 	AVG_PERF_COUNTER(priv->pstats.inflight_avg,
+ 			 (u32)(ring->prod - READ_ONCE(ring->cons) - 1));
+ 
+ 	tx_desc = ring->buf + (index << LOG_TXBB_SIZE);
+ 	data = &tx_desc->data;
+ 
+ 	dma = frame->dma;
+ 
+ 	tx_info->page = frame->page;
+ 	frame->page = NULL;
+ 	tx_info->map0_dma = dma;
+ 	tx_info->map0_byte_count = PAGE_SIZE;
+ 	tx_info->nr_txbb = MLX4_EN_XDP_TX_NRTXBB;
+ 	tx_info->nr_bytes = max_t(unsigned int, length, ETH_ZLEN);
+ 	tx_info->data_offset = offsetof(struct mlx4_en_tx_desc, data);
+ 	tx_info->ts_requested = 0;
+ 	tx_info->nr_maps = 1;
+ 	tx_info->linear = 1;
+ 	tx_info->inl = 0;
+ 
+ 	dma_sync_single_range_for_device(priv->ddev, dma, frame->page_offset,
+ 					 length, PCI_DMA_TODEVICE);
+ 
+ 	data->addr = cpu_to_be64(dma + frame->page_offset);
+ 	data->lkey = ring->mr_key;
+ 	dma_wmb();
+ 	data->byte_count = cpu_to_be32(length);
+ 
+ 	/* tx completion can avoid cache line miss for common cases */
+ 
+ 	op_own = cpu_to_be32(MLX4_OPCODE_SEND) |
+ 		((ring->prod & ring->size) ?
+ 		 cpu_to_be32(MLX4_EN_BIT_DESC_OWN) : 0);
+ 
+ 	rx_ring->xdp_tx++;
+ 	AVG_PERF_COUNTER(priv->pstats.tx_pktsz_avg, length);
+ 
+ 	ring->prod += MLX4_EN_XDP_TX_NRTXBB;
+ 
+ 	tx_desc->ctrl.qpn_vlan = qpn_vlan;
+ 	tx_desc->ctrl.srcrb_flags = priv->ctrl_flags;
+ 
+ 	/* Ensure new descriptor hits memory
+ 	 * before setting ownership of this descriptor to HW
+ 	 */
+ 	dma_wmb();
+ 	tx_desc->ctrl.owner_opcode = op_own;
+ 	ring->xmit_more++;
+ 
+ 	*doorbell_pending = true;
+ 
+ 	return NETDEV_TX_OK;
+ 
+ tx_drop_count:
+ 	rx_ring->xdp_tx_full++;
+ 	*doorbell_pending = true;
+ tx_drop:
+ 	return NETDEV_TX_BUSY;
+ }
++>>>>>>> f6f0aa97413a (net/mlx4_en: Obsolete call to generic write_desc in XDP xmit flow)
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_tx.c
