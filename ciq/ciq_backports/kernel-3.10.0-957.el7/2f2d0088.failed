usbip: prevent vhci_hcd driver from leaking a socket pointer address

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Shuah Khan <shuahkh@osg.samsung.com>
commit 2f2d0088eb93db5c649d2a5e34a3800a8a935fc5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2f2d0088.failed

When a client has a USB device attached over IP, the vhci_hcd driver is
locally leaking a socket pointer address via the

/sys/devices/platform/vhci_hcd/status file (world-readable) and in debug
output when "usbip --debug port" is run.

Fix it to not leak. The socket pointer address is not used at the moment
and it was made visible as a convenient way to find IP address from socket
pointer address by looking up /proc/net/{tcp,tcp6}.

As this opens a security hole, the fix replaces socket pointer address with
sockfd.

	Reported-by: Secunia Research <vuln@secunia.com>
	Cc: stable <stable@vger.kernel.org>
	Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2f2d0088eb93db5c649d2a5e34a3800a8a935fc5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/usbip/vhci_sysfs.c
#	tools/usb/usbip/libsrc/vhci_driver.c
diff --cc drivers/usb/usbip/vhci_sysfs.c
index 87e53cd8f10d,091f76b7196d..000000000000
--- a/drivers/usb/usbip/vhci_sysfs.c
+++ b/drivers/usb/usbip/vhci_sysfs.c
@@@ -14,6 -15,47 +14,50 @@@
  
  /* TODO: refine locking ?*/
  
++<<<<<<< HEAD
++=======
+ /*
+  * output example:
+  * hub port sta spd dev       sockfd    local_busid
+  * hs  0000 004 000 00000000  3         1-2.3
+  * ................................................
+  * ss  0008 004 000 00000000  4         2-3.4
+  * ................................................
+  *
+  * Output includes socket fd instead of socket pointer address to avoid
+  * leaking kernel memory address in:
+  *	/sys/devices/platform/vhci_hcd.0/status and in debug output.
+  * The socket pointer address is not used at the moment and it was made
+  * visible as a convenient way to find IP address from socket pointer
+  * address by looking up /proc/net/{tcp,tcp6}. As this opens a security
+  * hole, the change is made to use sockfd instead.
+  *
+  */
+ static void port_show_vhci(char **out, int hub, int port, struct vhci_device *vdev)
+ {
+ 	if (hub == HUB_SPEED_HIGH)
+ 		*out += sprintf(*out, "hs  %04u %03u ",
+ 				      port, vdev->ud.status);
+ 	else /* hub == HUB_SPEED_SUPER */
+ 		*out += sprintf(*out, "ss  %04u %03u ",
+ 				      port, vdev->ud.status);
+ 
+ 	if (vdev->ud.status == VDEV_ST_USED) {
+ 		*out += sprintf(*out, "%03u %08x ",
+ 				      vdev->speed, vdev->devid);
+ 		*out += sprintf(*out, "%u %s",
+ 				      vdev->ud.sockfd,
+ 				      dev_name(&vdev->udev->dev));
+ 
+ 	} else {
+ 		*out += sprintf(*out, "000 00000000 ");
+ 		*out += sprintf(*out, "0000000000000000 0-0");
+ 	}
+ 
+ 	*out += sprintf(*out, "\n");
+ }
+ 
++>>>>>>> 2f2d0088eb93 (usbip: prevent vhci_hcd driver from leaking a socket pointer address)
  /* Sysfs entry to show port status */
  static ssize_t status_show_vhci(int pdev_nr, char *out)
  {
@@@ -130,7 -164,11 +174,15 @@@ static ssize_t nports_show(struct devic
  {
  	char *s = out;
  
++<<<<<<< HEAD
 +	out += sprintf(out, "%d\n", VHCI_HC_PORTS * vhci_num_controllers);
++=======
+ 	/*
+ 	 * Half the ports are for SPEED_HIGH and half for SPEED_SUPER,
+ 	 * thus the * 2.
+ 	 */
+ 	out += sprintf(out, "%d\n", VHCI_PORTS * vhci_num_controllers);
++>>>>>>> 2f2d0088eb93 (usbip: prevent vhci_hcd driver from leaking a socket pointer address)
  	return out - s;
  }
  static DEVICE_ATTR_RO(nports);
* Unmerged path tools/usb/usbip/libsrc/vhci_driver.c
diff --git a/drivers/usb/usbip/usbip_common.h b/drivers/usb/usbip/usbip_common.h
index b1970d94202a..6074ef07879b 100644
--- a/drivers/usb/usbip/usbip_common.h
+++ b/drivers/usb/usbip/usbip_common.h
@@ -254,6 +254,7 @@ struct usbip_device {
 	/* lock for status */
 	spinlock_t lock;
 
+	int sockfd;
 	struct socket *tcp_socket;
 
 	struct task_struct *tcp_rx;
* Unmerged path drivers/usb/usbip/vhci_sysfs.c
* Unmerged path tools/usb/usbip/libsrc/vhci_driver.c
