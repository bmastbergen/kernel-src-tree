amd-xgbe: Add support to handle device renaming

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Lendacky, Thomas <Thomas.Lendacky@amd.com>
commit efbaa828330aed8cfa9529451abfea4a465303ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/efbaa828.failed

Many of the names used by the driver are based upon the name of the device
found during device probe.  Move the formatting of the names into the
device open function so that any renaming that occurs before the device is
brought up will be accounted for.  This also means moving the creation of
some named workqueues into the device open path.

Add support to register for net events so that if a device is renamed
the corresponding debugfs directory can be renamed.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit efbaa828330aed8cfa9529451abfea4a465303ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amd/xgbe/xgbe-main.c
#	drivers/net/ethernet/amd/xgbe/xgbe.h
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-main.c
index 9f75f57abbe7,c5ff385d51ae..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-main.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-main.c
@@@ -397,36 -400,8 +398,41 @@@ int xgbe_config_netdev(struct xgbe_prv_
  		return ret;
  	}
  
++<<<<<<< HEAD
 +	/* Create the PHY/ANEG name based on netdev name */
 +	snprintf(pdata->an_name, sizeof(pdata->an_name) - 1, "%s-pcs",
 +		 netdev_name(netdev));
 +
 +	/* Create the ECC name based on netdev name */
 +	snprintf(pdata->ecc_name, sizeof(pdata->ecc_name) - 1, "%s-ecc",
 +		 netdev_name(netdev));
 +
 +	/* Create the I2C name based on netdev name */
 +	snprintf(pdata->i2c_name, sizeof(pdata->i2c_name) - 1, "%s-i2c",
 +		 netdev_name(netdev));
 +
 +	/* Create workqueues */
 +	pdata->dev_workqueue =
 +		create_singlethread_workqueue(netdev_name(netdev));
 +	if (!pdata->dev_workqueue) {
 +		netdev_err(netdev, "device workqueue creation failed\n");
 +		ret = -ENOMEM;
 +		goto err_netdev;
 +	}
 +
 +	pdata->an_workqueue =
 +		create_singlethread_workqueue(pdata->an_name);
 +	if (!pdata->an_workqueue) {
 +		netdev_err(netdev, "phy workqueue creation failed\n");
 +		ret = -ENOMEM;
 +		goto err_wq;
 +	}
 +
 +	xgbe_ptp_register(pdata);
++=======
+ 	if (IS_REACHABLE(CONFIG_PTP_1588_CLOCK))
+ 		xgbe_ptp_register(pdata);
++>>>>>>> efbaa828330a (amd-xgbe: Add support to handle device renaming)
  
  	xgbe_debugfs_init(pdata);
  
diff --cc drivers/net/ethernet/amd/xgbe/xgbe.h
index 0938294f640a,9a80f20adc1c..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe.h
+++ b/drivers/net/ethernet/amd/xgbe/xgbe.h
@@@ -129,6 -129,8 +129,11 @@@
  #include <net/dcbnl.h>
  #include <linux/completion.h>
  #include <linux/cpumask.h>
++<<<<<<< HEAD
++=======
+ #include <linux/interrupt.h>
+ #include <linux/dcache.h>
++>>>>>>> efbaa828330a (amd-xgbe: Add support to handle device renaming)
  
  #define XGBE_DRV_NAME		"amd-xgbe"
  #define XGBE_DRV_VERSION	"1.0.3"
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c b/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c
index 7546b660d6b5..7d128be61310 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-debugfs.c
@@ -527,3 +527,28 @@ void xgbe_debugfs_exit(struct xgbe_prv_data *pdata)
 	debugfs_remove_recursive(pdata->xgbe_debugfs);
 	pdata->xgbe_debugfs = NULL;
 }
+
+void xgbe_debugfs_rename(struct xgbe_prv_data *pdata)
+{
+	struct dentry *pfile;
+	char *buf;
+
+	if (!pdata->xgbe_debugfs)
+		return;
+
+	buf = kasprintf(GFP_KERNEL, "amd-xgbe-%s", pdata->netdev->name);
+	if (!buf)
+		return;
+
+	if (!strcmp(pdata->xgbe_debugfs->d_name.name, buf))
+		goto out;
+
+	pfile = debugfs_rename(pdata->xgbe_debugfs->d_parent,
+			       pdata->xgbe_debugfs,
+			       pdata->xgbe_debugfs->d_parent, buf);
+	if (!pfile)
+		netdev_err(pdata->netdev, "debugfs_rename failed\n");
+
+out:
+	kfree(buf);
+}
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index 1034d65a5a7c..ee6a69b0f063 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@ -892,7 +892,7 @@ static int xgbe_request_irqs(struct xgbe_prv_data *pdata)
 		     (unsigned long)pdata);
 
 	ret = devm_request_irq(pdata->dev, pdata->dev_irq, xgbe_isr, 0,
-			       netdev->name, pdata);
+			       netdev_name(netdev), pdata);
 	if (ret) {
 		netdev_alert(netdev, "error requesting irq %d\n",
 			     pdata->dev_irq);
@@ -1594,16 +1594,42 @@ static int xgbe_open(struct net_device *netdev)
 
 	DBGPR("-->xgbe_open\n");
 
+	/* Create the various names based on netdev name */
+	snprintf(pdata->an_name, sizeof(pdata->an_name) - 1, "%s-pcs",
+		 netdev_name(netdev));
+
+	snprintf(pdata->ecc_name, sizeof(pdata->ecc_name) - 1, "%s-ecc",
+		 netdev_name(netdev));
+
+	snprintf(pdata->i2c_name, sizeof(pdata->i2c_name) - 1, "%s-i2c",
+		 netdev_name(netdev));
+
+	/* Create workqueues */
+	pdata->dev_workqueue =
+		create_singlethread_workqueue(netdev_name(netdev));
+	if (!pdata->dev_workqueue) {
+		netdev_err(netdev, "device workqueue creation failed\n");
+		return -ENOMEM;
+	}
+
+	pdata->an_workqueue =
+		create_singlethread_workqueue(pdata->an_name);
+	if (!pdata->an_workqueue) {
+		netdev_err(netdev, "phy workqueue creation failed\n");
+		ret = -ENOMEM;
+		goto err_dev_wq;
+	}
+
 	/* Reset the phy settings */
 	ret = xgbe_phy_reset(pdata);
 	if (ret)
-		return ret;
+		goto err_an_wq;
 
 	/* Enable the clocks */
 	ret = clk_prepare_enable(pdata->sysclk);
 	if (ret) {
 		netdev_alert(netdev, "dma clk_prepare_enable failed\n");
-		return ret;
+		goto err_an_wq;
 	}
 
 	ret = clk_prepare_enable(pdata->ptpclk);
@@ -1656,6 +1682,12 @@ err_ptpclk:
 err_sysclk:
 	clk_disable_unprepare(pdata->sysclk);
 
+err_an_wq:
+	destroy_workqueue(pdata->an_workqueue);
+
+err_dev_wq:
+	destroy_workqueue(pdata->dev_workqueue);
+
 	return ret;
 }
 
@@ -1679,6 +1711,12 @@ static int xgbe_close(struct net_device *netdev)
 	clk_disable_unprepare(pdata->ptpclk);
 	clk_disable_unprepare(pdata->sysclk);
 
+	flush_workqueue(pdata->an_workqueue);
+	destroy_workqueue(pdata->an_workqueue);
+
+	flush_workqueue(pdata->dev_workqueue);
+	destroy_workqueue(pdata->dev_workqueue);
+
 	set_bit(XGBE_DOWN, &pdata->dev_state);
 
 	DBGPR("<--xgbe_close\n");
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-main.c
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe.h
