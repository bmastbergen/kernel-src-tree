iio: core: Move kernel doc to the right location

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] core: Move kernel doc to the right location (Tony Camuso) [1559170]
Rebuild_FUZZ: 94.51%
commit-author Sachin Kamat <sachin.kamat@linaro.org>
commit a7e57dce02ceb8212f106191fdfbc0fcb61ce9e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a7e57dce.failed

Documentation related to function should be placed above
its implementation. Move it accordingly.

	Signed-off-by: Sachin Kamat <sachin.kamat@linaro.org>
	Cc: Lars-Peter Clausen <lars@metafoo.de>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit a7e57dce02ceb8212f106191fdfbc0fcb61ce9e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-trigger.c
#	include/linux/iio/iio.h
diff --cc drivers/iio/industrialio-trigger.c
index 47769ae3e6d4,8bd092b9327e..000000000000
--- a/drivers/iio/industrialio-trigger.c
+++ b/drivers/iio/industrialio-trigger.c
@@@ -478,6 -489,83 +478,86 @@@ void iio_trigger_free(struct iio_trigge
  }
  EXPORT_SYMBOL(iio_trigger_free);
  
++<<<<<<< HEAD
++=======
+ static void devm_iio_trigger_release(struct device *dev, void *res)
+ {
+ 	iio_trigger_free(*(struct iio_trigger **)res);
+ }
+ 
+ static int devm_iio_trigger_match(struct device *dev, void *res, void *data)
+ {
+ 	struct iio_trigger **r = res;
+ 
+ 	if (!r || !*r) {
+ 		WARN_ON(!r || !*r);
+ 		return 0;
+ 	}
+ 
+ 	return *r == data;
+ }
+ 
+ /**
+  * devm_iio_trigger_alloc - Resource-managed iio_trigger_alloc()
+  * @dev:		Device to allocate iio_trigger for
+  * @fmt:		trigger name format. If it includes format
+  *			specifiers, the additional arguments following
+  *			format are formatted and inserted in the resulting
+  *			string replacing their respective specifiers.
+  *
+  * Managed iio_trigger_alloc.  iio_trigger allocated with this function is
+  * automatically freed on driver detach.
+  *
+  * If an iio_trigger allocated with this function needs to be freed separately,
+  * devm_iio_trigger_free() must be used.
+  *
+  * RETURNS:
+  * Pointer to allocated iio_trigger on success, NULL on failure.
+  */
+ struct iio_trigger *devm_iio_trigger_alloc(struct device *dev,
+ 						const char *fmt, ...)
+ {
+ 	struct iio_trigger **ptr, *trig;
+ 	va_list vargs;
+ 
+ 	ptr = devres_alloc(devm_iio_trigger_release, sizeof(*ptr),
+ 			   GFP_KERNEL);
+ 	if (!ptr)
+ 		return NULL;
+ 
+ 	/* use raw alloc_dr for kmalloc caller tracing */
+ 	va_start(vargs, fmt);
+ 	trig = viio_trigger_alloc(fmt, vargs);
+ 	va_end(vargs);
+ 	if (trig) {
+ 		*ptr = trig;
+ 		devres_add(dev, ptr);
+ 	} else {
+ 		devres_free(ptr);
+ 	}
+ 
+ 	return trig;
+ }
+ EXPORT_SYMBOL_GPL(devm_iio_trigger_alloc);
+ 
+ /**
+  * devm_iio_trigger_free - Resource-managed iio_trigger_free()
+  * @dev:		Device this iio_dev belongs to
+  * @iio_trig:		the iio_trigger associated with the device
+  *
+  * Free iio_trigger allocated with devm_iio_trigger_alloc().
+  */
+ void devm_iio_trigger_free(struct device *dev, struct iio_trigger *iio_trig)
+ {
+ 	int rc;
+ 
+ 	rc = devres_release(dev, devm_iio_trigger_release,
+ 			    devm_iio_trigger_match, iio_trig);
+ 	WARN_ON(rc);
+ }
+ EXPORT_SYMBOL_GPL(devm_iio_trigger_free);
+ 
++>>>>>>> a7e57dce02ce (iio: core: Move kernel doc to the right location)
  void iio_device_register_trigger_consumer(struct iio_dev *indio_dev)
  {
  	indio_dev->groups[indio_dev->groupcounter++] =
diff --cc include/linux/iio/iio.h
index 8e1ef224f91d,5b125fd554e4..000000000000
--- a/include/linux/iio/iio.h
+++ b/include/linux/iio/iio.h
@@@ -474,32 -490,12 +474,22 @@@ struct iio_dev 
  #endif
  };
  
- /**
-  * iio_find_channel_from_si() - get channel from its scan index
-  * @indio_dev:		device
-  * @si:			scan index to match
-  */
  const struct iio_chan_spec
  *iio_find_channel_from_si(struct iio_dev *indio_dev, int si);
- 
- /**
-  * iio_device_register() - register a device with the IIO subsystem
-  * @indio_dev:		Device structure filled by the device driver
-  **/
  int iio_device_register(struct iio_dev *indio_dev);
- 
- /**
-  * iio_device_unregister() - unregister a device from the IIO subsystem
-  * @indio_dev:		Device structure representing the device.
-  **/
  void iio_device_unregister(struct iio_dev *indio_dev);
++<<<<<<< HEAD
 +
 +/**
 + * iio_push_event() - try to add event to the list for userspace reading
 + * @indio_dev:		IIO device structure
 + * @ev_code:		What event
 + * @timestamp:		When the event occurred
 + **/
++=======
+ int devm_iio_device_register(struct device *dev, struct iio_dev *indio_dev);
+ void devm_iio_device_unregister(struct device *dev, struct iio_dev *indio_dev);
++>>>>>>> a7e57dce02ce (iio: core: Move kernel doc to the right location)
  int iio_push_event(struct iio_dev *indio_dev, u64 ev_code, s64 timestamp);
  
  extern struct bus_type iio_bus_type;
@@@ -580,36 -572,12 +566,15 @@@ static inline struct iio_dev *iio_priv_
  				  ALIGN(sizeof(struct iio_dev), IIO_ALIGN));
  }
  
- /**
-  * iio_device_free() - free an iio_dev from a driver
-  * @indio_dev: 		the iio_dev associated with the device
-  **/
  void iio_device_free(struct iio_dev *indio_dev);
- 
- /**
-  * devm_iio_device_alloc - Resource-managed iio_device_alloc()
-  * @dev: 		Device to allocate iio_dev for
-  * @sizeof_priv: 	Space to allocate for private structure.
-  *
-  * Managed iio_device_alloc.  iio_dev allocated with this function is
-  * automatically freed on driver detach.
-  *
-  * If an iio_dev allocated with this function needs to be freed separately,
-  * devm_iio_device_free() must be used.
-  *
-  * RETURNS:
-  * Pointer to allocated iio_dev on success, NULL on failure.
-  */
  struct iio_dev *devm_iio_device_alloc(struct device *dev, int sizeof_priv);
- 
- /**
-  * devm_iio_device_free - Resource-managed iio_device_free()
-  * @dev:		Device this iio_dev belongs to
-  * @indio_dev: 		the iio_dev associated with the device
-  *
-  * Free iio_dev allocated with devm_iio_device_alloc().
-  */
  void devm_iio_device_free(struct device *dev, struct iio_dev *indio_dev);
++<<<<<<< HEAD
++=======
+ struct iio_trigger *devm_iio_trigger_alloc(struct device *dev,
+ 						const char *fmt, ...);
+ void devm_iio_trigger_free(struct device *dev, struct iio_trigger *iio_trig);
++>>>>>>> a7e57dce02ce (iio: core: Move kernel doc to the right location)
  
  /**
   * iio_buffer_enabled() - helper function to test if the buffer is enabled
diff --git a/drivers/iio/industrialio-core.c b/drivers/iio/industrialio-core.c
index d28d58b27c19..19309569397e 100644
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@ -105,6 +105,11 @@ static const char * const iio_chan_info_postfix[] = {
 	[IIO_CHAN_INFO_HYSTERESIS] = "hysteresis",
 };
 
+/**
+ * iio_find_channel_from_si() - get channel from its scan index
+ * @indio_dev:		device
+ * @si:			scan index to match
+ */
 const struct iio_chan_spec
 *iio_find_channel_from_si(struct iio_dev *indio_dev, int si)
 {
@@ -877,6 +882,10 @@ struct device_type iio_device_type = {
 	.release = iio_dev_release,
 };
 
+/**
+ * iio_device_alloc() - allocate an iio_dev from a driver
+ * @sizeof_priv:	Space to allocate for private structure.
+ **/
 struct iio_dev *iio_device_alloc(int sizeof_priv)
 {
 	struct iio_dev *dev;
@@ -917,6 +926,10 @@ struct iio_dev *iio_device_alloc(int sizeof_priv)
 }
 EXPORT_SYMBOL(iio_device_alloc);
 
+/**
+ * iio_device_free() - free an iio_dev from a driver
+ * @dev:		the iio_dev associated with the device
+ **/
 void iio_device_free(struct iio_dev *dev)
 {
 	if (dev)
@@ -939,6 +952,20 @@ static int devm_iio_device_match(struct device *dev, void *res, void *data)
 	return *r == data;
 }
 
+/**
+ * devm_iio_device_alloc - Resource-managed iio_device_alloc()
+ * @dev:		Device to allocate iio_dev for
+ * @sizeof_priv:	Space to allocate for private structure.
+ *
+ * Managed iio_device_alloc. iio_dev allocated with this function is
+ * automatically freed on driver detach.
+ *
+ * If an iio_dev allocated with this function needs to be freed separately,
+ * devm_iio_device_free() must be used.
+ *
+ * RETURNS:
+ * Pointer to allocated iio_dev on success, NULL on failure.
+ */
 struct iio_dev *devm_iio_device_alloc(struct device *dev, int sizeof_priv)
 {
 	struct iio_dev **ptr, *iio_dev;
@@ -961,6 +988,13 @@ struct iio_dev *devm_iio_device_alloc(struct device *dev, int sizeof_priv)
 }
 EXPORT_SYMBOL_GPL(devm_iio_device_alloc);
 
+/**
+ * devm_iio_device_free - Resource-managed iio_device_free()
+ * @dev:		Device this iio_dev belongs to
+ * @iio_dev:		the iio_dev associated with the device
+ *
+ * Free iio_dev allocated with devm_iio_device_alloc().
+ */
 void devm_iio_device_free(struct device *dev, struct iio_dev *iio_dev)
 {
 	int rc;
@@ -1031,6 +1065,10 @@ static const struct file_operations iio_buffer_fileops = {
 
 static const struct iio_buffer_setup_ops noop_ring_setup_ops;
 
+/**
+ * iio_device_register() - register a device with the IIO subsystem
+ * @indio_dev:		Device structure filled by the device driver
+ **/
 int iio_device_register(struct iio_dev *indio_dev)
 {
 	int ret;
@@ -1092,6 +1130,10 @@ error_ret:
 }
 EXPORT_SYMBOL(iio_device_register);
 
+/**
+ * iio_device_unregister() - unregister a device from the IIO subsystem
+ * @indio_dev:		Device structure representing the device.
+ **/
 void iio_device_unregister(struct iio_dev *indio_dev)
 {
 	mutex_lock(&indio_dev->info_exist_lock);
diff --git a/drivers/iio/industrialio-event.c b/drivers/iio/industrialio-event.c
index f27d4aeabaf4..efbe7b694143 100644
--- a/drivers/iio/industrialio-event.c
+++ b/drivers/iio/industrialio-event.c
@@ -42,6 +42,12 @@ struct iio_event_interface {
 	struct attribute_group	group;
 };
 
+/**
+ * iio_push_event() - try to add event to the list for userspace reading
+ * @indio_dev:		IIO device structure
+ * @ev_code:		What event
+ * @timestamp:		When the event occurred
+ **/
 int iio_push_event(struct iio_dev *indio_dev, u64 ev_code, s64 timestamp)
 {
 	struct iio_event_interface *ev_int = indio_dev->event_interface;
* Unmerged path drivers/iio/industrialio-trigger.c
* Unmerged path include/linux/iio/iio.h
