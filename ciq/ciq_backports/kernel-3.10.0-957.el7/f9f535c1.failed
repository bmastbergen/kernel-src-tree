watchdog: Improve description of min_hw_heartbeat_ms

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Guenter Roeck <linux@roeck-us.net>
commit f9f535c1b76128f94dae7a4bb41464aacd4c10ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f9f535c1.failed

The description of min_hw_heartbeat_ms is misleading and needs some
improvements.

	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
(cherry picked from commit f9f535c1b76128f94dae7a4bb41464aacd4c10ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/watchdog/watchdog-kernel-api.txt
#	include/linux/watchdog.h
diff --cc Documentation/watchdog/watchdog-kernel-api.txt
index d8b0d3367706,92700d229bf9..000000000000
--- a/Documentation/watchdog/watchdog-kernel-api.txt
+++ b/Documentation/watchdog/watchdog-kernel-api.txt
@@@ -73,8 -75,29 +73,31 @@@ It contains following fields
    additional information about the watchdog timer itself. (Like it's unique name)
  * ops: a pointer to the list of watchdog operations that the watchdog supports.
  * timeout: the watchdog timer's timeout value (in seconds).
 -  This is the time after which the system will reboot if user space does
 -  not send a heartbeat request if WDOG_ACTIVE is set.
  * min_timeout: the watchdog timer's minimum timeout value (in seconds).
++<<<<<<< HEAD
 +* max_timeout: the watchdog timer's maximum timeout value (in seconds).
++=======
+   If set, the minimum configurable value for 'timeout'.
+ * max_timeout: the watchdog timer's maximum timeout value (in seconds),
+   as seen from userspace. If set, the maximum configurable value for
+   'timeout'. Not used if max_hw_heartbeat_ms is non-zero.
+ * min_hw_heartbeat_ms: Hardware limit for minimum time between heartbeats,
+   in milli-seconds. This value is normally 0; it should only be provided
+   if the hardware can not tolerate lower intervals between heartbeats.
+ * max_hw_heartbeat_ms: Maximum hardware heartbeat, in milli-seconds.
+   If set, the infrastructure will send heartbeats to the watchdog driver
+   if 'timeout' is larger than max_hw_heartbeat_ms, unless WDOG_ACTIVE
+   is set and userspace failed to send a heartbeat for at least 'timeout'
+   seconds. max_hw_heartbeat_ms must be set if a driver does not implement
+   the stop function.
+ * reboot_nb: notifier block that is registered for reboot notifications, for
+   internal use only. If the driver calls watchdog_stop_on_reboot, watchdog core
+   will stop the watchdog on such notifications.
+ * restart_nb: notifier block that is registered for machine restart, for
+   internal use only. If a watchdog is capable of restarting the machine, it
+   should define ops->restart. Priority can be changed through
+   watchdog_set_restart_priority.
++>>>>>>> f9f535c1b761 (watchdog: Improve description of min_hw_heartbeat_ms)
  * bootstatus: status of the device after booting (reported with watchdog
    WDIOF_* status bits).
  * driver_data: a pointer to the drivers private data of a watchdog device.
diff --cc include/linux/watchdog.h
index e90e3ea5ebeb,7047bc7f8106..000000000000
--- a/include/linux/watchdog.h
+++ b/include/linux/watchdog.h
@@@ -59,14 -58,26 +59,32 @@@ struct watchdog_ops 
   * @info:	Pointer to a watchdog_info structure.
   * @ops:	Pointer to the list of watchdog operations.
   * @bootstatus:	Status of the watchdog device at boot.
++<<<<<<< HEAD
 + * @timeout:	The watchdog devices timeout value.
 + * @min_timeout:The watchdog devices minimum timeout value.
 + * @max_timeout:The watchdog devices maximum timeout value.
 + * @driver-data:Pointer to the drivers private data.
 + * @lock:	Lock for watchdog core internal use only.
++=======
+  * @timeout:	The watchdog devices timeout value (in seconds).
+  * @min_timeout:The watchdog devices minimum timeout value (in seconds).
+  * @max_timeout:The watchdog devices maximum timeout value (in seconds)
+  *		as configurable from user space. Only relevant if
+  *		max_hw_heartbeat_ms is not provided.
+  * @min_hw_heartbeat_ms:
+  *		Hardware limit for minimum time between heartbeats,
+  *		in milli-seconds.
+  * @max_hw_heartbeat_ms:
+  *		Hardware limit for maximum timeout, in milli-seconds.
+  *		Replaces max_timeout if specified.
+  * @reboot_nb:	The notifier block to stop watchdog on reboot.
+  * @restart_nb:	The notifier block to register a restart function.
+  * @driver_data:Pointer to the drivers private data.
+  * @wd_data:	Pointer to watchdog core internal data.
++>>>>>>> f9f535c1b761 (watchdog: Improve description of min_hw_heartbeat_ms)
   * @status:	Field that contains the devices internal status bits.
 - * @deferred:	Entry in wtd_deferred_reg_list which is used to
 - *		register early initialized watchdogs.
 + * @deferred: entry in wtd_deferred_reg_list which is used to
 + *			   register early initialized watchdogs.
   *
   * The watchdog_device structure contains all information about a
   * watchdog timer device.
* Unmerged path Documentation/watchdog/watchdog-kernel-api.txt
* Unmerged path include/linux/watchdog.h
