platform/x86: dell-*wmi*: Relay failed initial probe to dependent drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: dell-*wmi*: Relay failed initial probe to dependent drivers (Jarod Wilson) [1526317]
Rebuild_FUZZ: 93.43%
commit-author Mario Limonciello <mario.limonciello@dell.com>
commit 868b8d33f91e431b1961a35baa6b5022639067f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/868b8d33.failed

dell-wmi and dell-smbios-wmi are dependent upon dell-wmi-descriptor
finishing probe successfully to probe themselves.

Currently if dell-wmi-descriptor fails probing in a non-recoverable way
(such as invalid header) dell-wmi and dell-smbios-wmi will continue to
try to redo probing due to deferred probing.

To solve this have the dependent drivers query the dell-wmi-descriptor
driver whether the descriptor has been determined valid. The possible
results are:
-ENODEV: Descriptor GUID missing from WMI bus
-EPROBE_DEFER: Descriptor not yet probed, dependent driver should wait
 and use deferred probing
< 0: Descriptor probed, invalid.  Dependent driver should return an
 error.
0: Successful descriptor probe, dependent driver can continue

Successful descriptor probe still doesn't mean that the descriptor driver
is necessarily bound at the time of initialization of dependent driver.
Userspace can unbind the driver, so all methods used from driver
should still be verified to return success values otherwise deferred
probing be used.

	Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
	Reviewed-by: Pali Roh√°r <pali.rohar@gmail.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
(cherry picked from commit 868b8d33f91e431b1961a35baa6b5022639067f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/dell-smbios-wmi.c
#	drivers/platform/x86/dell-wmi-descriptor.c
#	drivers/platform/x86/dell-wmi-descriptor.h
#	drivers/platform/x86/dell-wmi.c
diff --cc drivers/platform/x86/dell-wmi.c
index fa90558cb1ae,39d2f4518483..000000000000
--- a/drivers/platform/x86/dell-wmi.c
+++ b/drivers/platform/x86/dell-wmi.c
@@@ -714,6 -652,47 +714,50 @@@ static int dell_wmi_events_set_enabled(
  	return dell_smbios_error(ret);
  }
  
++<<<<<<< HEAD
++=======
+ static int dell_wmi_probe(struct wmi_device *wdev)
+ {
+ 	struct dell_wmi_priv *priv;
+ 	int ret;
+ 
+ 	ret = dell_wmi_get_descriptor_valid();
+ 	if (ret)
+ 		return ret;
+ 
+ 	priv = devm_kzalloc(
+ 		&wdev->dev, sizeof(struct dell_wmi_priv), GFP_KERNEL);
+ 	if (!priv)
+ 		return -ENOMEM;
+ 	dev_set_drvdata(&wdev->dev, priv);
+ 
+ 	if (!dell_wmi_get_interface_version(&priv->interface_version))
+ 		return -EPROBE_DEFER;
+ 
+ 	return dell_wmi_input_setup(wdev);
+ }
+ 
+ static int dell_wmi_remove(struct wmi_device *wdev)
+ {
+ 	dell_wmi_input_destroy(wdev);
+ 	return 0;
+ }
+ static const struct wmi_device_id dell_wmi_id_table[] = {
+ 	{ .guid_string = DELL_EVENT_GUID },
+ 	{ },
+ };
+ 
+ static struct wmi_driver dell_wmi_driver = {
+ 	.driver = {
+ 		.name = "dell-wmi",
+ 	},
+ 	.id_table = dell_wmi_id_table,
+ 	.probe = dell_wmi_probe,
+ 	.remove = dell_wmi_remove,
+ 	.notify = dell_wmi_notify,
+ };
+ 
++>>>>>>> 868b8d33f91e (platform/x86: dell-*wmi*: Relay failed initial probe to dependent drivers)
  static int __init dell_wmi_init(void)
  {
  	int err;
* Unmerged path drivers/platform/x86/dell-smbios-wmi.c
* Unmerged path drivers/platform/x86/dell-wmi-descriptor.c
* Unmerged path drivers/platform/x86/dell-wmi-descriptor.h
* Unmerged path drivers/platform/x86/dell-smbios-wmi.c
* Unmerged path drivers/platform/x86/dell-wmi-descriptor.c
* Unmerged path drivers/platform/x86/dell-wmi-descriptor.h
* Unmerged path drivers/platform/x86/dell-wmi.c
