x86/io: Unroll string I/O when SEV is active

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] io: Unroll string I/O when SEV is active (Gary Hook) [1361286]
Rebuild_FUZZ: 95.24%
commit-author Tom Lendacky <thomas.lendacky@amd.com>
commit 606b21d4a6498c23632a4693c81b7b24feedd038
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/606b21d4.failed

Secure Encrypted Virtualization (SEV) does not support string I/O, so
unroll the string I/O operation into a loop operating on one element at
a time.

[ tglx: Gave the static key a real name instead of the obscure __sev ]

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Tested-by: Borislav Petkov <bp@suse.de>
	Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: kvm@vger.kernel.org
	Cc: David Laight <David.Laight@ACULAB.COM>
	Cc: Borislav Petkov <bp@alien8.de>
Link: https://lkml.kernel.org/r/20171020143059.3291-14-brijesh.singh@amd.com

(cherry picked from commit 606b21d4a6498c23632a4693c81b7b24feedd038)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/io.h
#	arch/x86/mm/mem_encrypt.c
diff --cc arch/x86/include/asm/io.h
index 1966c2878c8a,93ae8aee1780..000000000000
--- a/arch/x86/include/asm/io.h
+++ b/arch/x86/include/asm/io.h
@@@ -299,14 -311,34 +314,44 @@@ static inline unsigned type in##bwl##_p
  									\
  static inline void outs##bwl(int port, const void *addr, unsigned long count) \
  {									\
++<<<<<<< HEAD
 +	asm volatile("rep; outs" #bwl					\
 +		     : "+S"(addr), "+c"(count) : "d"(port));		\
++=======
+ 	if (sev_key_active()) {						\
+ 		unsigned type *value = (unsigned type *)addr;		\
+ 		while (count) {						\
+ 			out##bwl(*value, port);				\
+ 			value++;					\
+ 			count--;					\
+ 		}							\
+ 	} else {							\
+ 		asm volatile("rep; outs" #bwl				\
+ 			     : "+S"(addr), "+c"(count)			\
+ 			     : "d"(port) : "memory");			\
+ 	}								\
++>>>>>>> 606b21d4a649 (x86/io: Unroll string I/O when SEV is active)
  }									\
  									\
  static inline void ins##bwl(int port, void *addr, unsigned long count)	\
  {									\
++<<<<<<< HEAD
 +	asm volatile("rep; ins" #bwl					\
 +		     : "+D"(addr), "+c"(count) : "d"(port));		\
++=======
+ 	if (sev_key_active()) {						\
+ 		unsigned type *value = (unsigned type *)addr;		\
+ 		while (count) {						\
+ 			*value = in##bwl(port);				\
+ 			value++;					\
+ 			count--;					\
+ 		}							\
+ 	} else {							\
+ 		asm volatile("rep; ins" #bwl				\
+ 			     : "+D"(addr), "+c"(count)			\
+ 			     : "d"(port) : "memory");			\
+ 	}								\
++>>>>>>> 606b21d4a649 (x86/io: Unroll string I/O when SEV is active)
  }
  
  BUILDIO(b, b, char)
diff --cc arch/x86/mm/mem_encrypt.c
index 0b84076bee0f,d29b7831a053..000000000000
--- a/arch/x86/mm/mem_encrypt.c
+++ b/arch/x86/mm/mem_encrypt.c
@@@ -37,7 -40,9 +37,13 @@@ static char sme_cmdline_off[] __initdat
   * section is later cleared.
   */
  u64 sme_me_mask __section(.data) = 0;
++<<<<<<< HEAD
 +EXPORT_SYMBOL(sme_me_mask);
++=======
+ EXPORT_SYMBOL_GPL(sme_me_mask);
+ DEFINE_STATIC_KEY_FALSE(sev_enable_key);
+ EXPORT_SYMBOL_GPL(sev_enable_key);
++>>>>>>> 606b21d4a649 (x86/io: Unroll string I/O when SEV is active)
  
  static bool sev_enabled __section(.data);
  
@@@ -309,7 -315,15 +315,19 @@@ void __init mem_encrypt_init(void
  	if (sev_active())
  		dma_ops = &sev_dma_ops;
  
++<<<<<<< HEAD
 +	pr_info("AMD Secure Memory Encryption (SME) active\n");
++=======
+ 	/*
+ 	 * With SEV, we need to unroll the rep string I/O instructions.
+ 	 */
+ 	if (sev_active())
+ 		static_branch_enable(&sev_enable_key);
+ 
+ 	pr_info("AMD %s active\n",
+ 		sev_active() ? "Secure Encrypted Virtualization (SEV)"
+ 			     : "Secure Memory Encryption (SME)");
++>>>>>>> 606b21d4a649 (x86/io: Unroll string I/O when SEV is active)
  }
  
  void swiotlb_set_mem_attributes(void *vaddr, unsigned long size)
* Unmerged path arch/x86/include/asm/io.h
* Unmerged path arch/x86/mm/mem_encrypt.c
