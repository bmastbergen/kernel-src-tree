ext4: always check block group bounds in ext4_init_block_bitmap()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit 819b23f1c501b17b9694325471789e6b5cc2d0d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/819b23f1.failed

Regardless of whether the flex_bg feature is set, we should always
check to make sure the bits we are setting in the block bitmap are
within the block group bounds.

https://bugzilla.kernel.org/show_bug.cgi?id=199865

	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Cc: stable@kernel.org
(cherry picked from commit 819b23f1c501b17b9694325471789e6b5cc2d0d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/balloc.c
diff --cc fs/ext4/balloc.c
index 6f6a2290913c,8a2e202ade8a..000000000000
--- a/fs/ext4/balloc.c
+++ b/fs/ext4/balloc.c
@@@ -184,8 -184,6 +184,11 @@@ static int ext4_init_block_bitmap(struc
  	unsigned int bit, bit_max;
  	struct ext4_sb_info *sbi = EXT4_SB(sb);
  	ext4_fsblk_t start, tmp;
++<<<<<<< HEAD
 +	int flex_bg = 0;
 +	struct ext4_group_info *grp;
++=======
++>>>>>>> 819b23f1c501 (ext4: always check block group bounds in ext4_init_block_bitmap())
  
  	J_ASSERT_BH(bh, buffer_locked(bh));
  
@@@ -217,12 -206,9 +220,15 @@@
  
  	start = ext4_group_first_block_no(sb, block_group);
  
++<<<<<<< HEAD
 +	if (EXT4_HAS_INCOMPAT_FEATURE(sb, EXT4_FEATURE_INCOMPAT_FLEX_BG))
 +		flex_bg = 1;
 +
++=======
++>>>>>>> 819b23f1c501 (ext4: always check block group bounds in ext4_init_block_bitmap())
  	/* Set bits for block and inode bitmaps, and inode table */
  	tmp = ext4_block_bitmap(sb, gdp);
- 	if (!flex_bg || ext4_block_in_group(sb, tmp, block_group))
+ 	if (ext4_block_in_group(sb, tmp, block_group))
  		ext4_set_bit(EXT4_B2C(sbi, tmp - start), bh->b_data);
  
  	tmp = ext4_inode_bitmap(sb, gdp);
* Unmerged path fs/ext4/balloc.c
