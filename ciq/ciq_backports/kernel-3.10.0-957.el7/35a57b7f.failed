hv_netvsc: fix locking for rx_mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Stephen Hemminger <stephen@networkplumber.org>
commit 35a57b7fef136fa3d5b735ba773f191b95110fa0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/35a57b7f.failed

The rx_mode operation handler is different than other callbacks
in that is not always called with rtnl held. Therefore use
RCU to ensure that references are valid.

Fixes: bee9d41b37ea ("hv_netvsc: propagate rx filters to VF")
	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 35a57b7fef136fa3d5b735ba773f191b95110fa0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index aaa29cf1fee7,48d9fa7a66c2..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -67,12 -66,43 +67,48 @@@ static int debug = -1
  module_param(debug, int, S_IRUGO);
  MODULE_PARM_DESC(debug, "Debug level (0=none,...,16=all)");
  
 -static void netvsc_change_rx_flags(struct net_device *net, int change)
 +static void netvsc_set_multicast_list(struct net_device *net)
  {
++<<<<<<< HEAD
 +	struct net_device_context *net_device_ctx = netdev_priv(net);
 +	struct netvsc_device *nvdev = rtnl_dereference(net_device_ctx->nvdev);
++=======
+ 	struct net_device_context *ndev_ctx = netdev_priv(net);
+ 	struct net_device *vf_netdev = rtnl_dereference(ndev_ctx->vf_netdev);
+ 	int inc;
+ 
+ 	if (!vf_netdev)
+ 		return;
+ 
+ 	if (change & IFF_PROMISC) {
+ 		inc = (net->flags & IFF_PROMISC) ? 1 : -1;
+ 		dev_set_promiscuity(vf_netdev, inc);
+ 	}
+ 
+ 	if (change & IFF_ALLMULTI) {
+ 		inc = (net->flags & IFF_ALLMULTI) ? 1 : -1;
+ 		dev_set_allmulti(vf_netdev, inc);
+ 	}
+ }
+ 
+ static void netvsc_set_rx_mode(struct net_device *net)
+ {
+ 	struct net_device_context *ndev_ctx = netdev_priv(net);
+ 	struct net_device *vf_netdev;
+ 	struct netvsc_device *nvdev;
+ 
+ 	rcu_read_lock();
+ 	vf_netdev = rcu_dereference(ndev_ctx->vf_netdev);
+ 	if (vf_netdev) {
+ 		dev_uc_sync(vf_netdev, net);
+ 		dev_mc_sync(vf_netdev, net);
+ 	}
++>>>>>>> 35a57b7fef13 (hv_netvsc: fix locking for rx_mode)
  
- 	rndis_filter_update(nvdev);
+ 	nvdev = rcu_dereference(ndev_ctx->nvdev);
+ 	if (nvdev)
+ 		rndis_filter_update(nvdev);
+ 	rcu_read_unlock();
  }
  
  static int netvsc_open(struct net_device *net)
* Unmerged path drivers/net/hyperv/netvsc_drv.c
