ipv4: initialize flowi4_flags before calling fib_lookup()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Lance Richardson <lrichard@redhat.com>
commit 4cfc86f3dae6ca38ed49cdd78f458a03d4d87992
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4cfc86f3.failed

Field fl4.flowi4_flags is not initialized in fib_compute_spec_dst()
before calling fib_lookup(), which means fib_table_lookup() is
using non-deterministic data at this line:

	if (!(flp->flowi4_flags & FLOWI_FLAG_SKIP_NH_OIF)) {

Fix by initializing the entire fl4 structure, which will prevent
similar issues as fields are added in the future by ensuring that
all fields are initialized to zero unless explicitly initialized
to another value.

Fixes: 58189ca7b2741 ("net: Fix vti use case with oif in dst lookups")
	Suggested-by: David Ahern <dsa@cumulusnetworks.com>
	Signed-off-by: Lance Richardson <lrichard@redhat.com>
	Acked-by: David Ahern <dsa@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4cfc86f3dae6ca38ed49cdd78f458a03d4d87992)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/fib_frontend.c
diff --cc net/ipv4/fib_frontend.c
index 82467a4371a5,8a9246deccfe..000000000000
--- a/net/ipv4/fib_frontend.c
+++ b/net/ipv4/fib_frontend.c
@@@ -264,15 -295,14 +263,26 @@@ __be32 fib_compute_spec_dst(struct sk_b
  
  	scope = RT_SCOPE_UNIVERSE;
  	if (!ipv4_is_zeronet(ip_hdr(skb)->saddr)) {
++<<<<<<< HEAD
 +		fl4.flowi4_oif = 0;
 +		fl4.flowi4_iif = LOOPBACK_IFINDEX;
 +		fl4.daddr = ip_hdr(skb)->saddr;
 +		fl4.saddr = 0;
 +		fl4.flowi4_tos = RT_TOS(ip_hdr(skb)->tos);
 +		fl4.flowi4_scope = scope;
 +		fl4.flowi4_mark = IN_DEV_SRC_VMARK(in_dev) ? skb->mark : 0;
 +		flowi4_tun_id_set(&fl4, 0);
 +		if (!fib_lookup(net, &fl4, &res))
++=======
+ 		struct flowi4 fl4 = {
+ 			.flowi4_iif = LOOPBACK_IFINDEX,
+ 			.daddr = ip_hdr(skb)->saddr,
+ 			.flowi4_tos = RT_TOS(ip_hdr(skb)->tos),
+ 			.flowi4_scope = scope,
+ 			.flowi4_mark = IN_DEV_SRC_VMARK(in_dev) ? skb->mark : 0,
+ 		};
+ 		if (!fib_lookup(net, &fl4, &res, 0))
++>>>>>>> 4cfc86f3dae6 (ipv4: initialize flowi4_flags before calling fib_lookup())
  			return FIB_RES_PREFSRC(net, res);
  	} else {
  		scope = RT_SCOPE_LINK;
* Unmerged path net/ipv4/fib_frontend.c
