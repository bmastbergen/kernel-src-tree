ftrace: allow architectures to specify ftrace compile options

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Heiko Carstens <heiko.carstens@de.ibm.com>
commit c0a80c0c27e5e65b180a25e6c4c2f7ef9e386cd3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c0a80c0c.failed

If the kernel is compiled with function tracer support the -pg compile option
is passed to gcc to generate extra code into the prologue of each function.

This patch replaces the "open-coded" -pg compile flag with a CC_FLAGS_FTRACE
makefile variable which architectures can override if a different option
should be used for code generation.

	Acked-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit c0a80c0c27e5e65b180a25e6c4c2f7ef9e386cd3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/Makefile
#	kernel/locking/Makefile
diff --cc kernel/Makefile
index 2fb90fa3b53b,13af308f2460..000000000000
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@@ -15,18 -13,19 +15,23 @@@ obj-y     = fork.o exec_domain.o panic.
  
  ifdef CONFIG_FUNCTION_TRACER
  # Do not trace debug files and internal ftrace files
++<<<<<<< HEAD
 +CFLAGS_REMOVE_lockdep.o = -pg
 +CFLAGS_REMOVE_lockdep_proc.o = -pg
 +CFLAGS_REMOVE_mutex-debug.o = -pg
 +CFLAGS_REMOVE_rtmutex-debug.o = -pg
 +CFLAGS_REMOVE_cgroup-debug.o = -pg
 +CFLAGS_REMOVE_irq_work.o = -pg
++=======
+ CFLAGS_REMOVE_cgroup-debug.o = $(CC_FLAGS_FTRACE)
+ CFLAGS_REMOVE_irq_work.o = $(CC_FLAGS_FTRACE)
++>>>>>>> c0a80c0c27e5 (ftrace: allow architectures to specify ftrace compile options)
  endif
  
 -# cond_syscall is currently not LTO compatible
 -CFLAGS_sys_ni.o = $(DISABLE_LTO)
 -
  obj-y += sched/
 -obj-y += locking/
  obj-y += power/
 -obj-y += printk/
 -obj-y += irq/
 -obj-y += rcu/
 +obj-y += cpu/
 +obj-y += livepatch/
  
  obj-$(CONFIG_CHECKPOINT_RESTORE) += kcmp.o
  obj-$(CONFIG_FREEZER) += freezer.o
* Unmerged path kernel/locking/Makefile
diff --git a/Makefile b/Makefile
index e7d95f3d1020..79a690f102d8 100644
--- a/Makefile
+++ b/Makefile
@@ -682,10 +682,14 @@ KBUILD_CFLAGS 	+= $(call cc-option, -femit-struct-debug-baseonly) \
 endif
 
 ifdef CONFIG_FUNCTION_TRACER
+ifndef CC_FLAGS_FTRACE
+CC_FLAGS_FTRACE := -pg
+endif
+export CC_FLAGS_FTRACE
 ifdef CONFIG_HAVE_FENTRY
 CC_USING_FENTRY	:= $(call cc-option, -mfentry -DCC_USING_FENTRY)
 endif
-KBUILD_CFLAGS	+= -pg $(CC_USING_FENTRY)
+KBUILD_CFLAGS	+= $(CC_FLAGS_FTRACE) $(CC_USING_FENTRY)
 KBUILD_AFLAGS	+= $(CC_USING_FENTRY)
 ifdef CONFIG_DYNAMIC_FTRACE
 	ifdef CONFIG_HAVE_C_RECORDMCOUNT
* Unmerged path kernel/Makefile
diff --git a/kernel/events/Makefile b/kernel/events/Makefile
index 103f5d147b2f..2925188f50ea 100644
--- a/kernel/events/Makefile
+++ b/kernel/events/Makefile
@@ -1,5 +1,5 @@
 ifdef CONFIG_FUNCTION_TRACER
-CFLAGS_REMOVE_core.o = -pg
+CFLAGS_REMOVE_core.o = $(CC_FLAGS_FTRACE)
 endif
 
 obj-y := core.o ring_buffer.o callchain.o
* Unmerged path kernel/locking/Makefile
diff --git a/kernel/sched/Makefile b/kernel/sched/Makefile
index 4e4a2a8c2967..4a2236ad553a 100644
--- a/kernel/sched/Makefile
+++ b/kernel/sched/Makefile
@@ -1,5 +1,5 @@
 ifdef CONFIG_FUNCTION_TRACER
-CFLAGS_REMOVE_clock.o = -pg
+CFLAGS_REMOVE_clock.o = $(CC_FLAGS_FTRACE)
 endif
 
 ifneq ($(CONFIG_SCHED_OMIT_FRAME_POINTER),y)
diff --git a/kernel/trace/Makefile b/kernel/trace/Makefile
index 22bb3758d631..6cbbeac40eba 100644
--- a/kernel/trace/Makefile
+++ b/kernel/trace/Makefile
@@ -3,11 +3,11 @@
 
 ifdef CONFIG_FUNCTION_TRACER
 ORIG_CFLAGS := $(KBUILD_CFLAGS)
-KBUILD_CFLAGS = $(subst -pg,,$(ORIG_CFLAGS))
+KBUILD_CFLAGS = $(subst $(CC_FLAGS_FTRACE),,$(ORIG_CFLAGS))
 
 ifdef CONFIG_FTRACE_SELFTEST
 # selftest needs instrumentation
-CFLAGS_trace_selftest_dynamic.o = -pg
+CFLAGS_trace_selftest_dynamic.o = $(CC_FLAGS_FTRACE)
 obj-y += trace_selftest_dynamic.o
 endif
 endif
diff --git a/lib/Makefile b/lib/Makefile
index 869e524a2268..a29fe8f3d35e 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -4,7 +4,7 @@
 
 ifdef CONFIG_FUNCTION_TRACER
 ORIG_CFLAGS := $(KBUILD_CFLAGS)
-KBUILD_CFLAGS = $(subst -pg,,$(ORIG_CFLAGS))
+KBUILD_CFLAGS = $(subst $(CC_FLAGS_FTRACE),,$(ORIG_CFLAGS))
 endif
 
 lib-y := ctype.o string.o vsprintf.o cmdline.o \
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index 637c3f3f55d3..4dbb70be6be6 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -285,8 +285,9 @@ sub_cmd_record_mcount = set -e ; perl $(srctree)/scripts/recordmcount.pl "$(ARCH
 	"$(if $(part-of-module),1,0)" "$(@)";
 recordmcount_source := $(srctree)/scripts/recordmcount.pl
 endif
-cmd_record_mcount = 						\
-	if [ "$(findstring -pg,$(_c_flags))" = "-pg" ]; then	\
+cmd_record_mcount =						\
+	if [ "$(findstring $(CC_FLAGS_FTRACE),$(_c_flags))" =	\
+	     "$(CC_FLAGS_FTRACE)" ]; then			\
 		$(sub_cmd_record_mcount)			\
 	fi;
 endif
