nvme-pci: Separate IO and admin queue IRQ vectors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Keith Busch <keith.busch@intel.com>
commit 22b5560195bd66bc43359b71821dc78cc9de56c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/22b55601.failed

The admin and first IO queues shared the first irq vector, which has an
affinity mask including cpu0. If a system allows cpu0 to be offlined,
the admin queue may not be usable if no other CPUs in the affinity mask
are online. This is a problem since unlike IO queues, there is only
one admin queue that always needs to be usable.

To fix, this patch allocates one pre_vector for the admin queue that
is assigned all CPUs, so will always be accessible. The IO queues are
assigned the remaining managed vectors.

In case a controller has only one interrupt vector available, the admin
and IO queues will share the pre_vector with all CPUs assigned.

	Cc: Jianchao Wang <jianchao.w.wang@oracle.com>
	Cc: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 22b5560195bd66bc43359b71821dc78cc9de56c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index d8c88b8f2414,fbc71fac6f1e..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -414,7 -415,8 +415,12 @@@ static int nvme_pci_map_queues(struct b
  {
  	struct nvme_dev *dev = set->driver_data;
  
++<<<<<<< HEAD
 +	return blk_mq_pci_map_queues(set, to_pci_dev(dev->dev));
++=======
+ 	return blk_mq_pci_map_queues(set, to_pci_dev(dev->dev),
+ 			dev->num_vecs > 1 ? 1 /* admin queue */ : 0);
++>>>>>>> 22b5560195bd (nvme-pci: Separate IO and admin queue IRQ vectors)
  }
  
  /**
@@@ -1687,7 -1916,11 +1697,15 @@@ static int nvme_setup_io_queues(struct 
  	int result, nr_io_queues;
  	unsigned long size;
  
++<<<<<<< HEAD
 +	nr_io_queues = num_online_cpus();
++=======
+ 	struct irq_affinity affd = {
+ 		.pre_vectors = 1
+ 	};
+ 
+ 	nr_io_queues = num_possible_cpus();
++>>>>>>> 22b5560195bd (nvme-pci: Separate IO and admin queue IRQ vectors)
  	result = nvme_set_queue_count(&dev->ctrl, &nr_io_queues);
  	if (result < 0)
  		return result;
* Unmerged path drivers/nvme/host/pci.c
