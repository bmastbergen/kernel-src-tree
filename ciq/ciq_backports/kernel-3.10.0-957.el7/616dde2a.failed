iio: Remove get_bytes_per_datum() from iio_buffer_access_funcs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] Remove get_bytes_per_datum() from iio_buffer_access_funcs (Tony Camuso) [1559170]
Rebuild_FUZZ: 95.80%
commit-author Lars-Peter Clausen <lars@metafoo.de>
commit 616dde2a1ea3df9398b1fcc7d6d6516c5fab6183
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/616dde2a.failed

There haven't been any users of the get_bytes_per_datum() callback for a
while. The core assumes that the number of bytes per datum can be calculated
based on the enabled channels and the storage size of the channel and
iio_compute_scan_bytes() is used to compute this number. So remove the
callback.

	Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 616dde2a1ea3df9398b1fcc7d6d6516c5fab6183)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/staging/iio/accel/sca3000_ring.c
diff --cc drivers/staging/iio/accel/sca3000_ring.c
index 3e5e860aa38e,aa0e5d85bfe2..000000000000
--- a/drivers/staging/iio/accel/sca3000_ring.c
+++ b/drivers/staging/iio/accel/sca3000_ring.c
@@@ -135,10 -135,9 +135,16 @@@ static int sca3000_ring_get_length(stru
  	return 64;
  }
  
++<<<<<<< HEAD
 +/* only valid if resolution is kept at 11bits */
 +static int sca3000_ring_get_bytes_per_datum(struct iio_buffer *r)
 +{
 +	return 6;
++=======
+ static bool sca3000_ring_buf_data_available(struct iio_buffer *r)
+ {
+ 	return r->stufftoread;
++>>>>>>> 616dde2a1ea3 (iio: Remove get_bytes_per_datum() from iio_buffer_access_funcs)
  }
  
  static IIO_BUFFER_ENABLE_ATTR;
@@@ -273,7 -272,8 +279,12 @@@ static inline void sca3000_rb_free(stru
  static const struct iio_buffer_access_funcs sca3000_ring_access_funcs = {
  	.read_first_n = &sca3000_read_first_n_hw_rb,
  	.get_length = &sca3000_ring_get_length,
++<<<<<<< HEAD
 +	.get_bytes_per_datum = &sca3000_ring_get_bytes_per_datum,
++=======
+ 	.data_available = sca3000_ring_buf_data_available,
+ 	.release = sca3000_ring_release,
++>>>>>>> 616dde2a1ea3 (iio: Remove get_bytes_per_datum() from iio_buffer_access_funcs)
  };
  
  int sca3000_configure_ring(struct iio_dev *indio_dev)
diff --git a/drivers/iio/kfifo_buf.c b/drivers/iio/kfifo_buf.c
index 1bea41bcbdc6..aeea5140b65b 100644
--- a/drivers/iio/kfifo_buf.c
+++ b/drivers/iio/kfifo_buf.c
@@ -61,11 +61,6 @@ static struct attribute_group iio_kfifo_attribute_group = {
 	.name = "buffer",
 };
 
-static int iio_get_bytes_per_datum_kfifo(struct iio_buffer *r)
-{
-	return r->bytes_per_datum;
-}
-
 static int iio_mark_update_needed_kfifo(struct iio_buffer *r)
 {
 	struct iio_kfifo *kf = iio_to_kfifo(r);
@@ -134,7 +129,6 @@ static const struct iio_buffer_access_funcs kfifo_access_funcs = {
 	.store_to = &iio_store_to_kfifo,
 	.read_first_n = &iio_read_first_n_kfifo,
 	.request_update = &iio_request_update_kfifo,
-	.get_bytes_per_datum = &iio_get_bytes_per_datum_kfifo,
 	.set_bytes_per_datum = &iio_set_bytes_per_datum_kfifo,
 	.get_length = &iio_get_length_kfifo,
 	.set_length = &iio_set_length_kfifo,
diff --git a/drivers/staging/iio/Documentation/ring.txt b/drivers/staging/iio/Documentation/ring.txt
index e1da43381d0e..434d63a6123a 100644
--- a/drivers/staging/iio/Documentation/ring.txt
+++ b/drivers/staging/iio/Documentation/ring.txt
@@ -39,8 +39,8 @@ request_update
   If parameters have changed that require reinitialization or configuration of
   the buffer this will trigger it.
 
-get_bytes_per_datum, set_bytes_per_datum
-  Get/set the number of bytes for a complete scan. (All samples + timestamp)
+set_bytes_per_datum
+  Set the number of bytes for a complete scan. (All samples + timestamp)
 
 get_length / set_length
   Get/set the number of complete scans that may be held by the buffer.
* Unmerged path drivers/staging/iio/accel/sca3000_ring.c
diff --git a/include/linux/iio/buffer.h b/include/linux/iio/buffer.h
index 26890e4a025c..8ac608454136 100644
--- a/include/linux/iio/buffer.h
+++ b/include/linux/iio/buffer.h
@@ -24,7 +24,6 @@ struct iio_buffer;
  *			available.
  * @request_update:	if a parameter change has been marked, update underlying
  *			storage.
- * @get_bytes_per_datum:get current bytes per datum
  * @set_bytes_per_datum:set number of bytes per datum
  * @get_length:		get number of datums in buffer
  * @set_length:		set number of datums in buffer
@@ -46,7 +45,6 @@ struct iio_buffer_access_funcs {
 
 	int (*request_update)(struct iio_buffer *buffer);
 
-	int (*get_bytes_per_datum)(struct iio_buffer *buffer);
 	int (*set_bytes_per_datum)(struct iio_buffer *buffer, size_t bpd);
 	int (*get_length)(struct iio_buffer *buffer);
 	int (*set_length)(struct iio_buffer *buffer, int length);
