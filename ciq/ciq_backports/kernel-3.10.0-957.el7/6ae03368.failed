mmc: sdhci-pci: Fix voltage switch for some Intel host controllers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mmc] sdhci-pci: Fix voltage switch for some Intel host controllers (Gopal Tiwari) [1456570]
Rebuild_FUZZ: 96.06%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 6ae033689d7b1a419def78e8e990b0eab8bb6419
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6ae03368.failed

Some Intel host controllers (e.g. CNP) use an ACPI device-specific method
to ensure correct voltage switching. Fix voltage switch for those, by
adding a call to the DSM.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Cc: stable@vger.kernel.org
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit 6ae033689d7b1a419def78e8e990b0eab8bb6419)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-pci-core.c
diff --cc drivers/mmc/host/sdhci-pci-core.c
index 3d673d6a1675,d0ccc6729fd2..000000000000
--- a/drivers/mmc/host/sdhci-pci-core.c
+++ b/drivers/mmc/host/sdhci-pci-core.c
@@@ -261,6 -390,81 +261,84 @@@ static const struct sdhci_pci_fixes sdh
  	.probe_slot	= pch_hc_probe_slot,
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	INTEL_DSM_FNS		=  0,
+ 	INTEL_DSM_V18_SWITCH	=  3,
+ 	INTEL_DSM_DRV_STRENGTH	=  9,
+ 	INTEL_DSM_D3_RETUNE	= 10,
+ };
+ 
+ struct intel_host {
+ 	u32	dsm_fns;
+ 	int	drv_strength;
+ 	bool	d3_retune;
+ };
+ 
+ static const guid_t intel_dsm_guid =
+ 	GUID_INIT(0xF6C13EA5, 0x65CD, 0x461F,
+ 		  0xAB, 0x7A, 0x29, 0xF7, 0xE8, 0xD5, 0xBD, 0x61);
+ 
+ static int __intel_dsm(struct intel_host *intel_host, struct device *dev,
+ 		       unsigned int fn, u32 *result)
+ {
+ 	union acpi_object *obj;
+ 	int err = 0;
+ 	size_t len;
+ 
+ 	obj = acpi_evaluate_dsm(ACPI_HANDLE(dev), &intel_dsm_guid, 0, fn, NULL);
+ 	if (!obj)
+ 		return -EOPNOTSUPP;
+ 
+ 	if (obj->type != ACPI_TYPE_BUFFER || obj->buffer.length < 1) {
+ 		err = -EINVAL;
+ 		goto out;
+ 	}
+ 
+ 	len = min_t(size_t, obj->buffer.length, 4);
+ 
+ 	*result = 0;
+ 	memcpy(result, obj->buffer.pointer, len);
+ out:
+ 	ACPI_FREE(obj);
+ 
+ 	return err;
+ }
+ 
+ static int intel_dsm(struct intel_host *intel_host, struct device *dev,
+ 		     unsigned int fn, u32 *result)
+ {
+ 	if (fn > 31 || !(intel_host->dsm_fns & (1 << fn)))
+ 		return -EOPNOTSUPP;
+ 
+ 	return __intel_dsm(intel_host, dev, fn, result);
+ }
+ 
+ static void intel_dsm_init(struct intel_host *intel_host, struct device *dev,
+ 			   struct mmc_host *mmc)
+ {
+ 	int err;
+ 	u32 val;
+ 
+ 	err = __intel_dsm(intel_host, dev, INTEL_DSM_FNS, &intel_host->dsm_fns);
+ 	if (err) {
+ 		pr_debug("%s: DSM not supported, error %d\n",
+ 			 mmc_hostname(mmc), err);
+ 		return;
+ 	}
+ 
+ 	pr_debug("%s: DSM function mask %#x\n",
+ 		 mmc_hostname(mmc), intel_host->dsm_fns);
+ 
+ 	err = intel_dsm(intel_host, dev, INTEL_DSM_DRV_STRENGTH, &val);
+ 	intel_host->drv_strength = err ? 0 : val;
+ 
+ 	err = intel_dsm(intel_host, dev, INTEL_DSM_D3_RETUNE, &val);
+ 	intel_host->d3_retune = err ? true : !!val;
+ }
+ 
++>>>>>>> 6ae033689d7b (mmc: sdhci-pci: Fix voltage switch for some Intel host controllers)
  static void sdhci_pci_int_hw_reset(struct sdhci_host *host)
  {
  	u8 reg;
@@@ -414,11 -579,22 +505,15 @@@ static const struct sdhci_ops sdhci_int
  	.reset			= sdhci_reset,
  	.set_uhs_signaling	= sdhci_set_uhs_signaling,
  	.hw_reset		= sdhci_pci_hw_reset,
++<<<<<<< HEAD
 +	.select_drive_strength	= sdhci_pci_select_drive_strength,
++=======
+ 	.voltage_switch		= sdhci_intel_voltage_switch,
++>>>>>>> 6ae033689d7b (mmc: sdhci-pci: Fix voltage switch for some Intel host controllers)
  };
  
 -static void byt_read_dsm(struct sdhci_pci_slot *slot)
 -{
 -	struct intel_host *intel_host = sdhci_pci_priv(slot);
 -	struct device *dev = &slot->chip->pdev->dev;
 -	struct mmc_host *mmc = slot->host->mmc;
 -
 -	intel_dsm_init(intel_host, dev, mmc);
 -	slot->chip->rpm_retune = intel_host->d3_retune;
 -}
 -
  static int byt_emmc_probe_slot(struct sdhci_pci_slot *slot)
  {
 -	byt_read_dsm(slot);
  	slot->host->mmc->caps |= MMC_CAP_8_BIT_DATA | MMC_CAP_NONREMOVABLE |
  				 MMC_CAP_HW_RESET | MMC_CAP_1_8V_DDR |
  				 MMC_CAP_CMD_DURING_TFR |
* Unmerged path drivers/mmc/host/sdhci-pci-core.c
