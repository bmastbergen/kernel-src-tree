virtio_net: fix adding vids on big-endian

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Michael S. Tsirkin <mst@redhat.com>
commit d7fad4c840f33a6bd333dd7fbb3006edbcf0017a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/d7fad4c8.failed

Programming vids (adding or removing them) still passes
guest-endian values in the DMA buffer. That's wrong
if guest is big-endian and when virtio 1 is enabled.

Note: this is on top of a previous patch:
	virtio_net: split out ctrl buffer

Fixes: 9465a7a6f ("virtio_net: enable v1.0 support")
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
	Acked-by: Jason Wang <jasowang@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d7fad4c840f33a6bd333dd7fbb3006edbcf0017a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/virtio_net.c
diff --cc drivers/net/virtio_net.c
index 7b0841ddd139,16b0c7db431b..000000000000
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@@ -79,8 -132,30 +79,24 @@@ struct receive_queue 
  	/* RX: fragments + linear part + virtio header */
  	struct scatterlist sg[MAX_SKB_FRAGS + 2];
  
 -	/* Min single buffer size for mergeable buffers case. */
 -	unsigned int min_buf_len;
 -
  	/* Name of this receive queue: input.$index */
  	char name[40];
++<<<<<<< HEAD
++=======
+ 
+ 	struct xdp_rxq_info xdp_rxq;
+ };
+ 
+ /* Control VQ buffers: protected by the rtnl lock */
+ struct control_buf {
+ 	struct virtio_net_ctrl_hdr hdr;
+ 	virtio_net_ctrl_ack status;
+ 	struct virtio_net_ctrl_mq mq;
+ 	u8 promisc;
+ 	u8 allmulti;
+ 	__virtio16 vid;
+ 	u64 offloads;
++>>>>>>> d7fad4c840f3 (virtio_net: fix adding vids on big-endian)
  };
  
  struct virtnet_info {
@@@ -1088,10 -1725,11 +1104,15 @@@ static int virtnet_vlan_rx_add_vid(stru
  	struct virtnet_info *vi = netdev_priv(dev);
  	struct scatterlist sg;
  
++<<<<<<< HEAD
 +	sg_init_one(&sg, &vid, sizeof(vid));
++=======
+ 	vi->ctrl->vid = cpu_to_virtio16(vi->vdev, vid);
+ 	sg_init_one(&sg, &vi->ctrl->vid, sizeof(vi->ctrl->vid));
++>>>>>>> d7fad4c840f3 (virtio_net: fix adding vids on big-endian)
  
  	if (!virtnet_send_command(vi, VIRTIO_NET_CTRL_VLAN,
 -				  VIRTIO_NET_CTRL_VLAN_ADD, &sg))
 +				  VIRTIO_NET_CTRL_VLAN_ADD, &sg, NULL))
  		dev_warn(&dev->dev, "Failed to add VLAN ID %d.\n", vid);
  	return 0;
  }
@@@ -1102,10 -1740,11 +1123,15 @@@ static int virtnet_vlan_rx_kill_vid(str
  	struct virtnet_info *vi = netdev_priv(dev);
  	struct scatterlist sg;
  
++<<<<<<< HEAD
 +	sg_init_one(&sg, &vid, sizeof(vid));
++=======
+ 	vi->ctrl->vid = cpu_to_virtio16(vi->vdev, vid);
+ 	sg_init_one(&sg, &vi->ctrl->vid, sizeof(vi->ctrl->vid));
++>>>>>>> d7fad4c840f3 (virtio_net: fix adding vids on big-endian)
  
  	if (!virtnet_send_command(vi, VIRTIO_NET_CTRL_VLAN,
 -				  VIRTIO_NET_CTRL_VLAN_DEL, &sg))
 +				  VIRTIO_NET_CTRL_VLAN_DEL, &sg, NULL))
  		dev_warn(&dev->dev, "Failed to kill VLAN ID %d.\n", vid);
  	return 0;
  }
* Unmerged path drivers/net/virtio_net.c
