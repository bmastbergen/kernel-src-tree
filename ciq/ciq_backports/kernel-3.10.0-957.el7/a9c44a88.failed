drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit a9c44a88ca2f957c755bcb2ce8b9d2e031d65f64
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a9c44a88.failed

This will be required to support Volta, but also allows us to remove code
that's duplicated for each channel type already.

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit a9c44a88ca2f957c755bcb2ce8b9d2e031d65f64)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.h
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/coregf119.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/coregp102.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/corenv50.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgf119.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgp102.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacnv50.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/piocgf119.c
#	drivers/gpu/drm/nouveau/nvkm/engine/disp/piocnv50.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
index badbd62b90c7,53c3ed6da9ae..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
@@@ -154,6 -155,22 +154,25 @@@ nv50_disp_chan_uevent = 
  	.fini = nv50_disp_chan_uevent_fini,
  };
  
++<<<<<<< HEAD
++=======
+ u64
+ nv50_disp_chan_user(struct nv50_disp_chan *chan, u64 *psize)
+ {
+ 	*psize = 0x1000;
+ 	return 0x640000 + (chan->chid.user * 0x1000);
+ }
+ 
+ void
+ nv50_disp_chan_intr(struct nv50_disp_chan *chan, bool en)
+ {
+ 	struct nvkm_device *device = chan->disp->base.engine.subdev.device;
+ 	const u64 mask = 0x00010001 << chan->chid.user;
+ 	const u64 data = en ? 0x00010000 : 0x00000000;
+ 	nvkm_mask(device, 0x610028, mask, data);
+ }
+ 
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  static int
  nv50_disp_chan_rd32(struct nvkm_object *object, u64 addr, u32 *data)
  {
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.h
index 57ef0de1c7e7,2a48243b00ae..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.h
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.h
@@@ -20,33 -21,40 +20,50 @@@ struct nv50_disp_chan 
  };
  
  struct nv50_disp_chan_func {
 +	void *(*dtor)(struct nv50_disp_chan *);
  	int (*init)(struct nv50_disp_chan *);
  	void (*fini)(struct nv50_disp_chan *);
++<<<<<<< HEAD
 +	int (*child_get)(struct nv50_disp_chan *, int index,
 +			 struct nvkm_oclass *);
 +	int (*child_new)(struct nv50_disp_chan *, const struct nvkm_oclass *,
 +			 void *data, u32 size, struct nvkm_object **);
++=======
+ 	void (*intr)(struct nv50_disp_chan *, bool en);
+ 	u64 (*user)(struct nv50_disp_chan *, u64 *size);
+ 	int (*bind)(struct nv50_disp_chan *, struct nvkm_object *, u32 handle);
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  };
  
 -int nv50_disp_chan_new_(const struct nv50_disp_chan_func *,
 +int nv50_disp_chan_ctor(const struct nv50_disp_chan_func *,
  			const struct nv50_disp_chan_mthd *,
  			struct nv50_disp *, int ctrl, int user, int head,
 -			const struct nvkm_oclass *, struct nvkm_object **);
 -int nv50_disp_dmac_new_(const struct nv50_disp_chan_func *,
 +			const struct nvkm_oclass *, struct nv50_disp_chan *);
 +int nv50_disp_chan_new_(const struct nv50_disp_chan_func *,
  			const struct nv50_disp_chan_mthd *,
 -			struct nv50_disp *, int chid, int head, u64 push,
 +			struct nv50_disp *, int ctrl, int user, int head,
  			const struct nvkm_oclass *, struct nvkm_object **);
  
++<<<<<<< HEAD
 +extern const struct nv50_disp_chan_func nv50_disp_pioc_func;
++=======
+ void nv50_disp_chan_intr(struct nv50_disp_chan *, bool);
+ u64 nv50_disp_chan_user(struct nv50_disp_chan *, u64 *);
+ extern const struct nv50_disp_chan_func nv50_disp_pioc_func;
+ extern const struct nv50_disp_chan_func nv50_disp_dmac_func;
+ int nv50_disp_dmac_bind(struct nv50_disp_chan *, struct nvkm_object *, u32);
+ extern const struct nv50_disp_chan_func nv50_disp_core_func;
+ 
+ void gf119_disp_chan_intr(struct nv50_disp_chan *, bool);
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  extern const struct nv50_disp_chan_func gf119_disp_pioc_func;
 -extern const struct nv50_disp_chan_func gf119_disp_dmac_func;
 -void gf119_disp_dmac_fini(struct nv50_disp_chan *);
 -int gf119_disp_dmac_bind(struct nv50_disp_chan *, struct nvkm_object *, u32);
 -extern const struct nv50_disp_chan_func gf119_disp_core_func;
 -void gf119_disp_core_fini(struct nv50_disp_chan *);
  
 -extern const struct nv50_disp_chan_func gp102_disp_dmac_func;
 +extern const struct nvkm_event_func nv50_disp_chan_uevent;
 +int  nv50_disp_chan_uevent_ctor(struct nvkm_object *, void *, u32,
 +				struct nvkm_notify *);
 +void nv50_disp_chan_uevent_send(struct nv50_disp *, int);
 +
 +extern const struct nvkm_event_func gf119_disp_chan_uevent;
  
  int nv50_disp_curs_new_(const struct nv50_disp_chan_func *,
  			struct nv50_disp *, int ctrl, int user,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/coregf119.c
index 9e48cc3625b5,d162b9cf4eac..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/coregf119.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/coregf119.c
@@@ -186,19 -185,11 +186,12 @@@ gf119_disp_core_fini(struct nv50_disp_d
  }
  
  static int
 -gf119_disp_core_init(struct nv50_disp_chan *chan)
 +gf119_disp_core_init(struct nv50_disp_dmac *chan)
  {
 -	struct nvkm_subdev *subdev = &chan->disp->base.engine.subdev;
 +	struct nv50_disp *disp = chan->base.disp;
 +	struct nvkm_subdev *subdev = &disp->base.engine.subdev;
  	struct nvkm_device *device = subdev->device;
  
- 	/* enable error reporting */
- 	nvkm_mask(device, 0x6100a0, 0x00000001, 0x00000001);
- 
  	/* initialise channel for dma command submission */
  	nvkm_wr32(device, 0x610494, chan->push);
  	nvkm_wr32(device, 0x610498, 0x00010000);
@@@ -224,6 -215,8 +217,11 @@@ const struct nv50_disp_dmac_fun
  gf119_disp_core_func = {
  	.init = gf119_disp_core_init,
  	.fini = gf119_disp_core_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = gf119_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  	.bind = gf119_disp_dmac_bind,
  };
  
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/coregp102.c
index 3ec353e90b3e,5b7f993c73c7..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/coregp102.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/coregp102.c
@@@ -26,15 -26,11 +26,12 @@@
  #include <subdev/timer.h>
  
  static int
 -gp102_disp_core_init(struct nv50_disp_chan *chan)
 +gp102_disp_core_init(struct nv50_disp_dmac *chan)
  {
 -	struct nvkm_subdev *subdev = &chan->disp->base.engine.subdev;
 +	struct nv50_disp *disp = chan->base.disp;
 +	struct nvkm_subdev *subdev = &disp->base.engine.subdev;
  	struct nvkm_device *device = subdev->device;
  
- 	/* enable error reporting */
- 	nvkm_mask(device, 0x6100a0, 0x00000001, 0x00000001);
- 
  	/* initialise channel for dma command submission */
  	nvkm_wr32(device, 0x611494, chan->push);
  	nvkm_wr32(device, 0x611498, 0x00010000);
@@@ -60,6 -56,8 +57,11 @@@ static const struct nv50_disp_dmac_fun
  gp102_disp_core_func = {
  	.init = gp102_disp_core_init,
  	.fini = gf119_disp_core_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = gf119_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  	.bind = gf119_disp_dmac_bind,
  };
  
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/corenv50.c
index 8cdcf5b590e7,55db9a22b4be..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/corenv50.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/corenv50.c
@@@ -183,18 -182,11 +183,12 @@@ nv50_disp_core_fini(struct nv50_disp_dm
  }
  
  static int
 -nv50_disp_core_init(struct nv50_disp_chan *chan)
 +nv50_disp_core_init(struct nv50_disp_dmac *chan)
  {
 -	struct nvkm_subdev *subdev = &chan->disp->base.engine.subdev;
 +	struct nv50_disp *disp = chan->base.disp;
 +	struct nvkm_subdev *subdev = &disp->base.engine.subdev;
  	struct nvkm_device *device = subdev->device;
  
- 	/* enable error reporting */
- 	nvkm_mask(device, 0x610028, 0x00010000, 0x00010000);
- 
  	/* attempt to unstick channel from some unknown state */
  	if ((nvkm_rd32(device, 0x610200) & 0x009f0000) == 0x00020000)
  		nvkm_mask(device, 0x610200, 0x00800000, 0x00800000);
@@@ -226,6 -218,8 +220,11 @@@ const struct nv50_disp_dmac_fun
  nv50_disp_core_func = {
  	.init = nv50_disp_core_init,
  	.fini = nv50_disp_core_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = nv50_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  	.bind = nv50_disp_dmac_bind,
  };
  
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgf119.c
index b73bcc38a259,edf7dd0d931d..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgf119.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgf119.c
@@@ -58,21 -56,13 +58,14 @@@ gf119_disp_dmac_fini(struct nv50_disp_d
  }
  
  static int
 -gf119_disp_dmac_init(struct nv50_disp_chan *chan)
 +gf119_disp_dmac_init(struct nv50_disp_dmac *chan)
  {
 -	struct nvkm_subdev *subdev = &chan->disp->base.engine.subdev;
 +	struct nv50_disp *disp = chan->base.disp;
 +	struct nvkm_subdev *subdev = &disp->base.engine.subdev;
  	struct nvkm_device *device = subdev->device;
 -	int ctrl = chan->chid.ctrl;
 -	int user = chan->chid.user;
 +	int ctrl = chan->base.chid.ctrl;
 +	int user = chan->base.chid.user;
  
- 	/* enable error reporting */
- 	nvkm_mask(device, 0x6100a0, 0x00000001 << user, 0x00000001 << user);
- 
  	/* initialise channel for dma command submission */
  	nvkm_wr32(device, 0x610494 + (ctrl * 0x0010), chan->push);
  	nvkm_wr32(device, 0x610498 + (ctrl * 0x0010), 0x00010000);
@@@ -98,5 -88,7 +91,10 @@@ const struct nv50_disp_dmac_fun
  gf119_disp_dmac_func = {
  	.init = gf119_disp_dmac_init,
  	.fini = gf119_disp_dmac_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = gf119_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  	.bind = gf119_disp_dmac_bind,
  };
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgp102.c
index 62e9b8430791,f21a433199aa..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgp102.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgp102.c
@@@ -27,17 -26,13 +27,14 @@@
  #include <subdev/timer.h>
  
  static int
 -gp102_disp_dmac_init(struct nv50_disp_chan *chan)
 +gp102_disp_dmac_init(struct nv50_disp_dmac *chan)
  {
 -	struct nvkm_subdev *subdev = &chan->disp->base.engine.subdev;
 +	struct nv50_disp *disp = chan->base.disp;
 +	struct nvkm_subdev *subdev = &disp->base.engine.subdev;
  	struct nvkm_device *device = subdev->device;
 -	int ctrl = chan->chid.ctrl;
 -	int user = chan->chid.user;
 +	int ctrl = chan->base.chid.ctrl;
 +	int user = chan->base.chid.user;
  
- 	/* enable error reporting */
- 	nvkm_mask(device, 0x6100a0, 0x00000001 << user, 0x00000001 << user);
- 
  	/* initialise channel for dma command submission */
  	nvkm_wr32(device, 0x611494 + (ctrl * 0x0010), chan->push);
  	nvkm_wr32(device, 0x611498 + (ctrl * 0x0010), 0x00010000);
@@@ -63,5 -58,7 +60,10 @@@ const struct nv50_disp_dmac_fun
  gp102_disp_dmac_func = {
  	.init = gp102_disp_dmac_init,
  	.fini = gf119_disp_dmac_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = gf119_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  	.bind = gf119_disp_dmac_bind,
  };
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacnv50.c
index d081947d0689,981b98def151..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacnv50.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacnv50.c
@@@ -205,20 -99,13 +205,14 @@@ nv50_disp_dmac_fini(struct nv50_disp_dm
  }
  
  static int
 -nv50_disp_dmac_init(struct nv50_disp_chan *chan)
 +nv50_disp_dmac_init(struct nv50_disp_dmac *chan)
  {
 -	struct nvkm_subdev *subdev = &chan->disp->base.engine.subdev;
 +	struct nv50_disp *disp = chan->base.disp;
 +	struct nvkm_subdev *subdev = &disp->base.engine.subdev;
  	struct nvkm_device *device = subdev->device;
 -	int ctrl = chan->chid.ctrl;
 -	int user = chan->chid.user;
 +	int ctrl = chan->base.chid.ctrl;
 +	int user = chan->base.chid.user;
  
- 	/* enable error reporting */
- 	nvkm_mask(device, 0x610028, 0x00010000 << user, 0x00010000 << user);
- 
  	/* initialise channel for dma command submission */
  	nvkm_wr32(device, 0x610204 + (ctrl * 0x0010), chan->push);
  	nvkm_wr32(device, 0x610208 + (ctrl * 0x0010), 0x00010000);
@@@ -244,5 -131,7 +238,10 @@@ const struct nv50_disp_dmac_fun
  nv50_disp_dmac_func = {
  	.init = nv50_disp_dmac_init,
  	.fini = nv50_disp_dmac_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = nv50_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  	.bind = nv50_disp_dmac_bind,
  };
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/piocgf119.c
index 7b1e9bf75abd,5296e7bee813..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/piocgf119.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/piocgf119.c
@@@ -80,4 -73,6 +73,9 @@@ const struct nv50_disp_chan_fun
  gf119_disp_pioc_func = {
  	.init = gf119_disp_pioc_init,
  	.fini = gf119_disp_pioc_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = gf119_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  };
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/disp/piocnv50.c
index 60c20123d84f,4faed6fce682..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/piocnv50.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/piocnv50.c
@@@ -82,4 -82,6 +82,9 @@@ const struct nv50_disp_chan_fun
  nv50_disp_pioc_func = {
  	.init = nv50_disp_pioc_init,
  	.fini = nv50_disp_pioc_fini,
++<<<<<<< HEAD
++=======
+ 	.intr = nv50_disp_chan_intr,
+ 	.user = nv50_disp_chan_user,
++>>>>>>> a9c44a88ca2f (drm/nouveau/disp/nv50-: add channel interfaces to control error interrupts)
  };
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/disp/changf119.c b/drivers/gpu/drm/nouveau/nvkm/engine/disp/changf119.c
index 17a3d835cb42..29e6dd58ac48 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/disp/changf119.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/disp/changf119.c
@@ -47,3 +47,16 @@ gf119_disp_chan_uevent = {
 	.init = gf119_disp_chan_uevent_init,
 	.fini = gf119_disp_chan_uevent_fini,
 };
+
+void
+gf119_disp_chan_intr(struct nv50_disp_chan *chan, bool en)
+{
+	struct nvkm_device *device = chan->disp->base.engine.subdev.device;
+	const u64 mask = 0x00000001 << chan->chid.user;
+	if (!en) {
+		nvkm_mask(device, 0x610090, mask, 0x00000000);
+		nvkm_mask(device, 0x6100a0, mask, 0x00000000);
+	} else {
+		nvkm_mask(device, 0x6100a0, mask, mask);
+	}
+}
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/channv50.h
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/coregf119.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/coregp102.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/corenv50.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgf119.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacgp102.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/dmacnv50.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/piocgf119.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/disp/piocnv50.c
