virtio_blk: print capacity at probe time

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Stefan Hajnoczi <stefanha@redhat.com>
commit daf2a5016983a1a533417bcdc729bd2b19af1b68
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/daf2a501.failed

Print the capacity of the block device when the driver is probed.  Many
users expect this since SCSI disks (sd) do it.  Moreover, kernel dmesg
output is the primary source of troubleshooting information so it's
helpful to include the disk size there.

The capacity is already printed by virtio_blk when a resize event
occurs.  Extract the code and reuse it from virtblk_probe().

This patch also adds the block device name to the message so it can be
correlated with a specific device:

  virtio_blk virtio0: [vda] 20971520 512-byte logical blocks (10.7 GB/10.0 GiB)

	Cc: Rodrigo A B Freire <rfreire@redhat.com>
	Cc: Michael S. Tsirkin <mst@redhat.com>
	Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
	Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
(cherry picked from commit daf2a5016983a1a533417bcdc729bd2b19af1b68)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/virtio_blk.c
diff --cc drivers/block/virtio_blk.c
index 12e2f30eeaac,787cd2a10b0b..000000000000
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@@ -339,10 -379,8 +340,13 @@@ static void virtblk_update_capacity(str
  	struct virtio_device *vdev = vblk->vdev;
  	struct request_queue *q = vblk->disk->queue;
  	char cap_str_2[10], cap_str_10[10];
++<<<<<<< HEAD
 +	char *envp[] = { "RESIZE=1", NULL };
 +	u64 capacity, size;
++=======
+ 	unsigned long long nblocks;
+ 	u64 capacity;
++>>>>>>> daf2a5016983 (virtio_blk: print capacity at probe time)
  
  	/* Host must always specify the capacity. */
  	virtio_cread(vdev, struct virtio_blk_config, capacity, &capacity);
@@@ -354,17 -392,32 +358,36 @@@
  		capacity = (sector_t)-1;
  	}
  
 -	nblocks = DIV_ROUND_UP_ULL(capacity, queue_logical_block_size(q) >> 9);
 -
 -	string_get_size(nblocks, queue_logical_block_size(q),
 -			STRING_UNITS_2, cap_str_2, sizeof(cap_str_2));
 -	string_get_size(nblocks, queue_logical_block_size(q),
 -			STRING_UNITS_10, cap_str_10, sizeof(cap_str_10));
 +	size = capacity * queue_logical_block_size(q);
 +	string_get_size(size, STRING_UNITS_2, cap_str_2, sizeof(cap_str_2));
 +	string_get_size(size, STRING_UNITS_10, cap_str_10, sizeof(cap_str_10));
  
  	dev_notice(&vdev->dev,
++<<<<<<< HEAD
 +		  "new size: %llu %d-byte logical blocks (%s/%s)\n",
 +		  (unsigned long long)capacity,
 +		  queue_logical_block_size(q),
 +		  cap_str_10, cap_str_2);
++=======
+ 		   "[%s] %s%llu %d-byte logical blocks (%s/%s)\n",
+ 		   vblk->disk->disk_name,
+ 		   resize ? "new size: " : "",
+ 		   nblocks,
+ 		   queue_logical_block_size(q),
+ 		   cap_str_10,
+ 		   cap_str_2);
++>>>>>>> daf2a5016983 (virtio_blk: print capacity at probe time)
  
  	set_capacity(vblk->disk, capacity);
+ }
+ 
+ static void virtblk_config_changed_work(struct work_struct *work)
+ {
+ 	struct virtio_blk *vblk =
+ 		container_of(work, struct virtio_blk, config_work);
+ 	char *envp[] = { "RESIZE=1", NULL };
+ 
+ 	virtblk_update_capacity(vblk, true);
  	revalidate_disk(vblk->disk);
  	kobject_uevent_env(&disk_to_dev(vblk->disk)->kobj, KOBJ_CHANGE, envp);
  }
@@@ -728,9 -777,10 +739,10 @@@ static int virtblk_probe(struct virtio_
  	if (!err && opt_io_size)
  		blk_queue_io_opt(q, blk_size * opt_io_size);
  
+ 	virtblk_update_capacity(vblk, false);
  	virtio_device_ready(vdev);
  
 -	device_add_disk(&vdev->dev, vblk->disk);
 +	add_disk(vblk->disk);
  	err = device_create_file(disk_to_dev(vblk->disk), &dev_attr_serial);
  	if (err)
  		goto out_del_disk;
* Unmerged path drivers/block/virtio_blk.c
