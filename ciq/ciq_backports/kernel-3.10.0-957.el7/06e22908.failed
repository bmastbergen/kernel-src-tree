Fix encryption labels and lengths for SMB3.1.1

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Steve French <smfrench@gmail.com>
commit 06e2290844fa408d3295ac03a1647f0798518ebe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/06e22908.failed

SMB3.1.1 is most secure and recent dialect. Fixup labels and lengths
for sMB3.1.1 signing and encryption.

	Signed-off-by: Steve French <smfrench@gmail.com>
CC: Stable <stable@vger.kernel.org>
(cherry picked from commit 06e2290844fa408d3295ac03a1647f0798518ebe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/cifsglob.h
diff --cc fs/cifs/cifsglob.h
index 1683abf3c752,e185b2853eab..000000000000
--- a/fs/cifs/cifsglob.h
+++ b/fs/cifs/cifsglob.h
@@@ -664,13 -659,13 +664,15 @@@ struct TCP_Server_Info 
  	atomic_t in_send; /* requests trying to send */
  	atomic_t num_waiters;   /* blocked waiting to get in sendrecv */
  #endif
 +#ifdef CONFIG_CIFS_SMB2
  	unsigned int	max_read;
  	unsigned int	max_write;
- 	__u8		preauth_hash[512];
+ #ifdef CONFIG_CIFS_SMB311
+ 	__u8	preauth_sha_hash[64]; /* save initital negprot hash */
+ #endif /* 3.1.1 */
  	struct delayed_work reconnect; /* reconnect workqueue job */
  	struct mutex reconnect_mutex; /* prevent simultaneous reconnects */
 +#endif /* CONFIG_CIFS_SMB2 */
  	unsigned long echo_interval;
  };
  
@@@ -857,8 -851,9 +859,14 @@@ struct cifs_ses 
  	__u8 smb3signingkey[SMB3_SIGN_KEY_SIZE];
  	__u8 smb3encryptionkey[SMB3_SIGN_KEY_SIZE];
  	__u8 smb3decryptionkey[SMB3_SIGN_KEY_SIZE];
++<<<<<<< HEAD
 +	__u8 preauth_hash[512];
 +#endif /* CONFIG_CIFS_SMB2 */
++=======
+ #ifdef CONFIG_CIFS_SMB311
+ 	__u8 preauth_sha_hash[64];
+ #endif /* 3.1.1 */
++>>>>>>> 06e2290844fa (Fix encryption labels and lengths for SMB3.1.1)
  };
  
  static inline bool
* Unmerged path fs/cifs/cifsglob.h
diff --git a/fs/cifs/smb2transport.c b/fs/cifs/smb2transport.c
index 193a6c4b7f56..175781bcdc4c 100644
--- a/fs/cifs/smb2transport.c
+++ b/fs/cifs/smb2transport.c
@@ -390,6 +390,7 @@ generate_smb30signingkey(struct cifs_ses *ses)
 	return generate_smb3signingkey(ses, &triplet);
 }
 
+#ifdef CONFIG_CIFS_SMB311
 int
 generate_smb311signingkey(struct cifs_ses *ses)
 
@@ -398,25 +399,26 @@ generate_smb311signingkey(struct cifs_ses *ses)
 	struct derivation *d;
 
 	d = &triplet.signing;
-	d->label.iov_base = "SMB2AESCMAC";
-	d->label.iov_len = 12;
-	d->context.iov_base = "SmbSign";
-	d->context.iov_len = 8;
+	d->label.iov_base = "SMBSigningKey";
+	d->label.iov_len = 14;
+	d->context.iov_base = ses->preauth_sha_hash;
+	d->context.iov_len = 64;
 
 	d = &triplet.encryption;
-	d->label.iov_base = "SMB2AESCCM";
-	d->label.iov_len = 11;
-	d->context.iov_base = "ServerIn ";
-	d->context.iov_len = 10;
+	d->label.iov_base = "SMBC2SCipherKey";
+	d->label.iov_len = 16;
+	d->context.iov_base = ses->preauth_sha_hash;
+	d->context.iov_len = 64;
 
 	d = &triplet.decryption;
-	d->label.iov_base = "SMB2AESCCM";
-	d->label.iov_len = 11;
-	d->context.iov_base = "ServerOut";
-	d->context.iov_len = 10;
+	d->label.iov_base = "SMBS2CCipherKey";
+	d->label.iov_len = 16;
+	d->context.iov_base = ses->preauth_sha_hash;
+	d->context.iov_len = 64;
 
 	return generate_smb3signingkey(ses, &triplet);
 }
+#endif /* 311 */
 
 int
 smb3_calc_signature(struct smb_rqst *rqst, struct TCP_Server_Info *server)
