bpf, verifier: add ARG_PTR_TO_RAW_STACK type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 435faee1aae9c1ac231f89e4faf0437bfe29f425
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/435faee1.failed

When passing buffers from eBPF stack space into a helper function, we have
ARG_PTR_TO_STACK argument type for helpers available. The verifier makes sure
that such buffers are initialized, within boundaries, etc.

However, the downside with this is that we have a couple of helper functions
such as bpf_skb_load_bytes() that fill out the passed buffer in the expected
success case anyway, so zero initializing them prior to the helper call is
unneeded/wasted instructions in the eBPF program that can be avoided.

Therefore, add a new helper function argument type called ARG_PTR_TO_RAW_STACK.
The idea is to skip the STACK_MISC check in check_stack_boundary() and color
the related stack slots as STACK_MISC after we checked all call arguments.

Helper functions using ARG_PTR_TO_RAW_STACK must make sure that every path of
the helper function will fill the provided buffer area, so that we cannot leak
any uninitialized stack memory. This f.e. means that error paths need to
memset() the buffers, but the expected fast-path doesn't have to do this
anymore.

Since there's no such helper needing more than at most one ARG_PTR_TO_RAW_STACK
argument, we can keep it simple and don't need to check for multiple areas.
Should in future such a use-case really appear, we have check_raw_mode() that
will make sure we implement support for it first.

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 435faee1aae9c1ac231f89e4faf0437bfe29f425)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
#	kernel/bpf/verifier.c
diff --cc include/linux/bpf.h
index d4c1f9049ad3,5fb3c610fa96..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -42,40 -51,39 +42,54 @@@ struct bpf_map_type_list 
  	enum bpf_map_type type;
  };
  
 -/* function argument constraints */
 -enum bpf_arg_type {
 -	ARG_DONTCARE = 0,	/* unused argument in helper function */
 +void bpf_register_map_type(struct bpf_map_type_list *tl);
  
 -	/* the following constraints used to prototype
 -	 * bpf_map_lookup/update/delete_elem() functions
 -	 */
 -	ARG_CONST_MAP_PTR,	/* const argument used as pointer to bpf_map */
 -	ARG_PTR_TO_MAP_KEY,	/* pointer to stack used as map key */
 -	ARG_PTR_TO_MAP_VALUE,	/* pointer to stack used as map value */
 +static inline struct bpf_prog *bpf_prog_get(u32 ufd)
 +{
 +	return NULL;
 +}
  
++<<<<<<< HEAD
 +static inline struct bpf_prog *bpf_prog_get_type(u32 ufd, enum bpf_prog_type type)
 +{
 +	return NULL;
 +}
++=======
+ 	/* the following constraints used to prototype bpf_memcmp() and other
+ 	 * functions that access data on eBPF program stack
+ 	 */
+ 	ARG_PTR_TO_STACK,	/* any pointer to eBPF program stack */
+ 	ARG_PTR_TO_RAW_STACK,	/* any pointer to eBPF program stack, area does not
+ 				 * need to be initialized, helper function must fill
+ 				 * all bytes or clear them in error case.
+ 				 */
+ 
+ 	ARG_CONST_STACK_SIZE,	/* number of bytes accessed from stack */
+ 	ARG_CONST_STACK_SIZE_OR_ZERO, /* number of bytes accessed from stack or 0 */
++>>>>>>> 435faee1aae9 (bpf, verifier: add ARG_PTR_TO_RAW_STACK type)
  
 -	ARG_PTR_TO_CTX,		/* pointer to context */
 -	ARG_ANYTHING,		/* any (initialized) argument is ok */
 -};
 +static inline struct bpf_prog *bpf_prog_add(struct bpf_prog *prog, int i)
 +{
 +	return NULL;
 +}
  
 -/* type of values returned from helper functions */
 -enum bpf_return_type {
 -	RET_INTEGER,			/* function returns integer */
 -	RET_VOID,			/* function doesn't return anything */
 -	RET_PTR_TO_MAP_VALUE_OR_NULL,	/* returns a pointer to map elem value or NULL */
 -};
 +static inline struct bpf_prog *bpf_prog_inc(struct bpf_prog *prog)
 +{
 +	return prog;
 +}
 +
 +static inline void bpf_prog_put(struct bpf_prog *prog)
 +{
 +	return;
 +}
 +
 +
 +struct bpf_map *bpf_map_get_with_uref(u32 ufd);
 +struct bpf_map *__bpf_map_get(struct fd f);
 +struct bpf_map *bpf_map_inc(struct bpf_map *map, bool uref);
 +void bpf_map_put_with_uref(struct bpf_map *map);
 +void bpf_map_put(struct bpf_map *map);
 +struct bpf_map *bpf_map_get(struct fd f);
  
  /* eBPF function prototype used by verifier to allow BPF_CALLs from eBPF programs
   * to in-kernel helper functions and for adjusting imm32 field in BPF_CALL
* Unmerged path kernel/bpf/verifier.c
* Unmerged path include/linux/bpf.h
* Unmerged path kernel/bpf/verifier.c
