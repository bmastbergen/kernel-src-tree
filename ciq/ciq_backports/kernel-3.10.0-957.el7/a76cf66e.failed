x86/uaccess: Tell the compiler that uaccess is unlikely to fault

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] uaccess: Tell the compiler that uaccess is unlikely to fault (Josh Poimboeuf) [1572653]
Rebuild_FUZZ: 96.77%
commit-author Andy Lutomirski <luto@kernel.org>
commit a76cf66e948afbaeda8e3ecc861f29c47a026c27
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a76cf66e.failed

GCC doesn't realize that get_user(), put_user(), and their __
variants are unlikely to fail.  Tell it.

I noticed this while playing with the C entry code.

 Before:
       text     data      bss       dec    filename
   21828763  5194760  1277952  28301475    vmlinux.baseline

 After:
      text      data      bss       dec    filename
   21828379  5194760  1277952  28301091    vmlinux.new

The generated code shrunk by 384 bytes.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-kernel@vger.kernel.org
Link: http://lkml.kernel.org/r/dc37bed7024319c3004d950d57151fca6aeacf97.1444091584.git.luto@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a76cf66e948afbaeda8e3ecc861f29c47a026c27)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/uaccess.h
diff --cc arch/x86/include/asm/uaccess.h
index 46d1d9482490,3e911c68876e..000000000000
--- a/arch/x86/include/asm/uaccess.h
+++ b/arch/x86/include/asm/uaccess.h
@@@ -172,15 -175,14 +172,20 @@@ __typeof__(__builtin_choose_expr(sizeof
  #define get_user(x, ptr)						\
  ({									\
  	int __ret_gu;							\
 -	register __inttype(*(ptr)) __val_gu asm("%"_ASM_DX);		\
 +	register __inttype(*(ptr)) __val_gu asm("%edx");		\
 +	register void *__sp asm(_ASM_SP);				\
  	__chk_user_ptr(ptr);						\
  	might_fault();							\
 -	asm volatile("call __get_user_%P3"				\
 -		     : "=a" (__ret_gu), "=r" (__val_gu)			\
 +	asm volatile("call __get_user_%P4"				\
 +		     : "=a" (__ret_gu), "=r" (__val_gu), "+r" (__sp)	\
  		     : "0" (ptr), "i" (sizeof(*(ptr))));		\
++<<<<<<< HEAD
 +	(x) = (__typeof__(*(ptr))) __val_gu;				\
 +	__ret_gu;							\
++=======
+ 	(x) = (__force __typeof__(*(ptr))) __val_gu;			\
+ 	__builtin_expect(__ret_gu, 0);					\
++>>>>>>> a76cf66e948a (x86/uaccess: Tell the compiler that uaccess is unlikely to fault)
  })
  
  #define __put_user_x(size, x, ptr, __ret_pu)			\
* Unmerged path arch/x86/include/asm/uaccess.h
