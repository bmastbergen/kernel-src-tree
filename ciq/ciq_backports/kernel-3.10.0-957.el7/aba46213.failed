{net, IB}/mlx5: Raise fatal IB event when sys error occurs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] net, ib/mlx5: Raise fatal IB event when sys error occurs (Alaa Hleihel) [1520297]
Rebuild_FUZZ: 98.25%
commit-author Daniel Jurgens <danielj@mellanox.com>
commit aba462134634b502d720e15b23154f21cfa277e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/aba46213.failed

All other mlx5_events report the port number as 1 based, which is how FW
reports it in the port event EQE. Reporting 0 for this event causes
mlx5_ib to not raise a fatal event notification to registered clients
due to a seemingly invalid port.

All switch cases in mlx5_ib_event that go through the port check are
supposed to set the port now, so just do it once at variable
declaration.

Fixes: 89d44f0a6c73("net/mlx5_core: Add pci error handlers to mlx5_core driver")
	Reviewed-by: Majd Dibbiny <majd@mellanox.com>
	Signed-off-by: Daniel Jurgens <danielj@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit aba462134634b502d720e15b23154f21cfa277e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index a4d7e9c37555,bab38c6647d7..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -3157,15 -3256,24 +3157,15 @@@ static void delay_drop_handler(struct w
  	mutex_unlock(&delay_drop->lock);
  }
  
 -static void mlx5_ib_handle_event(struct work_struct *_work)
 +static void mlx5_ib_event(struct mlx5_core_dev *dev, void *context,
 +			  enum mlx5_dev_event event, unsigned long param)
  {
 -	struct mlx5_ib_event_work *work =
 -		container_of(_work, struct mlx5_ib_event_work, work);
 -	struct mlx5_ib_dev *ibdev;
 +	struct mlx5_ib_dev *ibdev = (struct mlx5_ib_dev *)context;
  	struct ib_event ibev;
  	bool fatal = false;
- 	u8 port = 0;
+ 	u8 port = (u8)work->param;
  
 -	if (mlx5_core_is_mp_slave(work->dev)) {
 -		ibdev = mlx5_ib_get_ibdev_from_mpi(work->context);
 -		if (!ibdev)
 -			goto out;
 -	} else {
 -		ibdev = work->context;
 -	}
 -
 -	switch (work->event) {
 +	switch (event) {
  	case MLX5_DEV_EVENT_SYS_ERROR:
  		ibev.event = IB_EVENT_DEVICE_FATAL;
  		mlx5_ib_handle_internal_error(ibdev);
@@@ -3175,8 -3283,6 +3175,11 @@@
  	case MLX5_DEV_EVENT_PORT_UP:
  	case MLX5_DEV_EVENT_PORT_DOWN:
  	case MLX5_DEV_EVENT_PORT_INITIALIZED:
++<<<<<<< HEAD
 +		port = (u8)param;
 +
++=======
++>>>>>>> aba462134634 ({net, IB}/mlx5: Raise fatal IB event when sys error occurs)
  		/* In RoCE, port up/down events are handled in
  		 * mlx5_netdev_event().
  		 */
@@@ -3190,24 -3296,19 +3193,36 @@@
  
  	case MLX5_DEV_EVENT_LID_CHANGE:
  		ibev.event = IB_EVENT_LID_CHANGE;
++<<<<<<< HEAD
 +		port = (u8)param;
++=======
++>>>>>>> aba462134634 ({net, IB}/mlx5: Raise fatal IB event when sys error occurs)
  		break;
  
  	case MLX5_DEV_EVENT_PKEY_CHANGE:
  		ibev.event = IB_EVENT_PKEY_CHANGE;
++<<<<<<< HEAD
 +		port = (u8)param;
 +
++=======
++>>>>>>> aba462134634 ({net, IB}/mlx5: Raise fatal IB event when sys error occurs)
  		schedule_work(&ibdev->devr.ports[port - 1].pkey_change_work);
  		break;
  
  	case MLX5_DEV_EVENT_GUID_CHANGE:
  		ibev.event = IB_EVENT_GID_CHANGE;
++<<<<<<< HEAD
 +		port = (u8)param;
++=======
++>>>>>>> aba462134634 ({net, IB}/mlx5: Raise fatal IB event when sys error occurs)
  		break;
  
  	case MLX5_DEV_EVENT_CLIENT_REREG:
  		ibev.event = IB_EVENT_CLIENT_REREGISTER;
++<<<<<<< HEAD
 +		port = (u8)param;
++=======
++>>>>>>> aba462134634 ({net, IB}/mlx5: Raise fatal IB event when sys error occurs)
  		break;
  	case MLX5_DEV_EVENT_DELAY_DROP_TIMEOUT:
  		schedule_work(&ibdev->delay_drop.delay_drop_work);
* Unmerged path drivers/infiniband/hw/mlx5/main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/health.c b/drivers/net/ethernet/mellanox/mlx5/core/health.c
index 1bc0ece6d39c..801d39dbea0d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/health.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/health.c
@@ -124,7 +124,7 @@ void mlx5_enter_error_state(struct mlx5_core_dev *dev)
 		trigger_cmd_completions(dev);
 	}
 
-	mlx5_core_event(dev, MLX5_DEV_EVENT_SYS_ERROR, 0);
+	mlx5_core_event(dev, MLX5_DEV_EVENT_SYS_ERROR, 1);
 	mlx5_core_err(dev, "end\n");
 
 unlock:
