nfp: bpf: use a large constant in unresolved branches

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit e84797fe159c8f849edd96ab72cc21eb890656fe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e84797fe.failed

To make absolute relocated branches (branches which will be completely
rewritten with br_set_offset()) distinguishable in user space dumps
from normal jumps add a large offset to them.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Jiong Wang <jiong.wang@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit e84797fe159c8f849edd96ab72cc21eb890656fe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/bpf/jit.c
diff --cc drivers/net/ethernet/netronome/nfp/bpf/jit.c
index 0a5af8620ac1,b4ed6bca4ea9..000000000000
--- a/drivers/net/ethernet/netronome/nfp/bpf/jit.c
+++ b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
@@@ -571,7 -739,7 +571,11 @@@ construct_data_ind_ld(struct nfp_prog *
  		 imm_a(nfp_prog), ALU_OP_ADD, reg_imm(size));
  	emit_alu(nfp_prog, reg_none(),
  		 plen_reg(nfp_prog), ALU_OP_SUB, imm_a(nfp_prog));
++<<<<<<< HEAD
 +	wrp_br_special(nfp_prog, BR_BLO, OP_BR_GO_ABORT);
++=======
+ 	emit_br_relo(nfp_prog, BR_BLO, BR_OFF_RELO, 0, RELO_BR_GO_ABORT);
++>>>>>>> e84797fe159c (nfp: bpf: use a large constant in unresolved branches)
  
  	/* Load data */
  	return data_ld(nfp_prog, imm_b(nfp_prog), 0, size);
@@@ -584,7 -752,7 +588,11 @@@ static int construct_data_ld(struct nfp
  	/* Check packet length */
  	tmp_reg = ur_load_imm_any(nfp_prog, offset + size, imm_a(nfp_prog));
  	emit_alu(nfp_prog, reg_none(), plen_reg(nfp_prog), ALU_OP_SUB, tmp_reg);
++<<<<<<< HEAD
 +	wrp_br_special(nfp_prog, BR_BLO, OP_BR_GO_ABORT);
++=======
+ 	emit_br_relo(nfp_prog, BR_BLO, BR_OFF_RELO, 0, RELO_BR_GO_ABORT);
++>>>>>>> e84797fe159c (nfp: bpf: use a large constant in unresolved branches)
  
  	/* Load data */
  	tmp_reg = re_load_imm_any(nfp_prog, offset, imm_b(nfp_prog));
@@@ -1690,7 -2026,7 +1698,11 @@@ static int call(struct nfp_prog *nfp_pr
  
  static int goto_out(struct nfp_prog *nfp_prog, struct nfp_insn_meta *meta)
  {
++<<<<<<< HEAD
 +	wrp_br_special(nfp_prog, BR_UNC, OP_BR_GO_OUT);
++=======
+ 	emit_br_relo(nfp_prog, BR_UNC, BR_OFF_RELO, 0, RELO_BR_GO_OUT);
++>>>>>>> e84797fe159c (nfp: bpf: use a large constant in unresolved branches)
  
  	return 0;
  }
@@@ -1938,7 -2175,7 +1950,11 @@@ static void nfp_outro_tc_da(struct nfp_
  	/* Target for aborts */
  	nfp_prog->tgt_abort = nfp_prog_current_offset(nfp_prog);
  
++<<<<<<< HEAD
 +	emit_br_def(nfp_prog, nfp_prog->tgt_done, 2);
++=======
+ 	emit_br_relo(nfp_prog, BR_UNC, BR_OFF_RELO, 2, RELO_BR_NEXT_PKT);
++>>>>>>> e84797fe159c (nfp: bpf: use a large constant in unresolved branches)
  
  	wrp_mov(nfp_prog, reg_a(0), NFP_BPF_ABI_FLAGS);
  	emit_ld_field(nfp_prog, reg_a(0), 0xc, reg_imm(0x11), SHF_SC_L_SHF, 16);
@@@ -1965,7 -2202,7 +1981,11 @@@
  	emit_shf(nfp_prog, reg_b(2),
  		 reg_imm(0xf), SHF_OP_AND, reg_b(3), SHF_SC_R_SHF, 0);
  
++<<<<<<< HEAD
 +	emit_br_def(nfp_prog, nfp_prog->tgt_done, 2);
++=======
+ 	emit_br_relo(nfp_prog, BR_UNC, BR_OFF_RELO, 2, RELO_BR_NEXT_PKT);
++>>>>>>> e84797fe159c (nfp: bpf: use a large constant in unresolved branches)
  
  	emit_shf(nfp_prog, reg_b(2),
  		 reg_a(2), SHF_OP_OR, reg_b(2), SHF_SC_L_SHF, 4);
@@@ -1984,7 -2221,7 +2004,11 @@@ static void nfp_outro_xdp(struct nfp_pr
  	/* Target for aborts */
  	nfp_prog->tgt_abort = nfp_prog_current_offset(nfp_prog);
  
++<<<<<<< HEAD
 +	emit_br_def(nfp_prog, nfp_prog->tgt_done, 2);
++=======
+ 	emit_br_relo(nfp_prog, BR_UNC, BR_OFF_RELO, 2, RELO_BR_NEXT_PKT);
++>>>>>>> e84797fe159c (nfp: bpf: use a large constant in unresolved branches)
  
  	wrp_mov(nfp_prog, reg_a(0), NFP_BPF_ABI_FLAGS);
  	emit_ld_field(nfp_prog, reg_a(0), 0xc, reg_imm(0x82), SHF_SC_L_SHF, 16);
@@@ -2005,7 -2242,7 +2029,11 @@@
  	emit_shf(nfp_prog, reg_b(2),
  		 reg_imm(0xff), SHF_OP_AND, reg_b(2), SHF_SC_R_SHF, 0);
  
++<<<<<<< HEAD
 +	emit_br_def(nfp_prog, nfp_prog->tgt_done, 2);
++=======
+ 	emit_br_relo(nfp_prog, BR_UNC, BR_OFF_RELO, 2, RELO_BR_NEXT_PKT);
++>>>>>>> e84797fe159c (nfp: bpf: use a large constant in unresolved branches)
  
  	wrp_mov(nfp_prog, reg_a(0), NFP_BPF_ABI_FLAGS);
  	emit_ld_field(nfp_prog, reg_a(0), 0xc, reg_b(2), SHF_SC_L_SHF, 16);
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/jit.c
diff --git a/drivers/net/ethernet/netronome/nfp/bpf/main.h b/drivers/net/ethernet/netronome/nfp/bpf/main.h
index 5212b54abaf7..dafcb2faa628 100644
--- a/drivers/net/ethernet/netronome/nfp/bpf/main.h
+++ b/drivers/net/ethernet/netronome/nfp/bpf/main.h
@@ -53,6 +53,12 @@ enum br_special {
 	OP_BR_GO_ABORT,
 };
 
+/* To make absolute relocated branches (branches other than RELO_BR_REL)
+ * distinguishable in user space dumps from normal jumps, add a large offset
+ * to them.
+ */
+#define BR_OFF_RELO		15000
+
 enum static_regs {
 	STATIC_REG_IMM		= 21, /* Bank AB */
 	STATIC_REG_STACK	= 22, /* Bank A */
