netfilter: ipset: Permit CIDR equal to the host address CIDR in IPv6

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Sergey Popovich <popovich_sergei@mail.ua>
commit 2c227f278a92ca3a1515373cdf9cce3766433e40
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2c227f27.failed

Permit userspace to supply CIDR length equal to the host address CIDR
length in netlink message. Prohibit any other CIDR length for IPv6
variant of the set.

Also return -IPSET_ERR_HASH_RANGE_UNSUPPORTED instead of generic
-IPSET_ERR_PROTOCOL in IPv6 variant of hash:ip,port,net when
IPSET_ATTR_IP_TO attribute is given.

	Signed-off-by: Sergey Popovich <popovich_sergei@mail.ua>
	Signed-off-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
(cherry picked from commit 2c227f278a92ca3a1515373cdf9cce3766433e40)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/ipset/ip_set_hash_ip.c
#	net/netfilter/ipset/ip_set_hash_ipmark.c
#	net/netfilter/ipset/ip_set_hash_ipport.c
#	net/netfilter/ipset/ip_set_hash_ipportip.c
#	net/netfilter/ipset/ip_set_hash_ipportnet.c
diff --cc net/netfilter/ipset/ip_set_hash_ip.c
index 6e3d06eb397b,2b08b1bf6e3f..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ip.c
+++ b/net/netfilter/ipset/ip_set_hash_ip.c
@@@ -268,17 -236,20 +268,29 @@@ hash_ip6_uadt(struct ip_set *set, struc
  {
  	const struct hash_ip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
 -	struct hash_ip6_elem e = { { .all = { 0 } } };
 -	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
 +	struct hash_ip6_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
  	int ret;
  
++<<<<<<< HEAD
 +	if (unlikely(!tb[IPSET_ATTR_IP] ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
++=======
+ 	if (unlikely(!tb[IPSET_ATTR_IP]))
++>>>>>>> 2c227f278a92 (netfilter: ipset: Permit CIDR equal to the host address CIDR in IPv6)
  		return -IPSET_ERR_PROTOCOL;
+ 	if (unlikely(tb[IPSET_ATTR_IP_TO]))
+ 		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
+ 	if (unlikely(tb[IPSET_ATTR_CIDR])) {
+ 		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
+ 
+ 		if (cidr != HOST_MASK)
+ 			return -IPSET_ERR_INVALID_CIDR;
+ 	}
  
  	if (tb[IPSET_ATTR_LINENO])
  		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
diff --cc net/netfilter/ipset/ip_set_hash_ipmark.c
index 50389697a53a,68fe40ca4a1f..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipmark.c
+++ b/net/netfilter/ipset/ip_set_hash_ipmark.c
@@@ -230,13 -235,16 +230,25 @@@ hash_ipmark6_uadt(struct ip_set *set, s
  	int ret;
  
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
++<<<<<<< HEAD
 +		     !ip_set_attr_netorder(tb, IPSET_ATTR_MARK) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
++=======
+ 		     !ip_set_attr_netorder(tb, IPSET_ATTR_MARK)))
++>>>>>>> 2c227f278a92 (netfilter: ipset: Permit CIDR equal to the host address CIDR in IPv6)
  		return -IPSET_ERR_PROTOCOL;
+ 	if (unlikely(tb[IPSET_ATTR_IP_TO]))
+ 		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
+ 	if (unlikely(tb[IPSET_ATTR_CIDR])) {
+ 		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
+ 
+ 		if (cidr != HOST_MASK)
+ 			return -IPSET_ERR_INVALID_CIDR;
+ 	}
  
  	if (tb[IPSET_ATTR_LINENO])
  		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
diff --cc net/netfilter/ipset/ip_set_hash_ipport.c
index 5e57c86de14d,9f036393a6e6..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipport.c
+++ b/net/netfilter/ipset/ip_set_hash_ipport.c
@@@ -330,13 -275,16 +330,25 @@@ hash_ipport6_uadt(struct ip_set *set, s
  
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
++<<<<<<< HEAD
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
++=======
+ 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO)))
++>>>>>>> 2c227f278a92 (netfilter: ipset: Permit CIDR equal to the host address CIDR in IPv6)
  		return -IPSET_ERR_PROTOCOL;
+ 	if (unlikely(tb[IPSET_ATTR_IP_TO]))
+ 		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
+ 	if (unlikely(tb[IPSET_ATTR_CIDR])) {
+ 		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
+ 
+ 		if (cidr != HOST_MASK)
+ 			return -IPSET_ERR_INVALID_CIDR;
+ 	}
  
  	if (tb[IPSET_ATTR_LINENO])
  		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
diff --cc net/netfilter/ipset/ip_set_hash_ipportip.c
index 24b9417eb2c5,aa0966b145a9..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipportip.c
+++ b/net/netfilter/ipset/ip_set_hash_ipportip.c
@@@ -347,13 -286,16 +347,25 @@@ hash_ipportip6_uadt(struct ip_set *set
  
  	if (unlikely(!tb[IPSET_ATTR_IP] || !tb[IPSET_ATTR_IP2] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
++<<<<<<< HEAD
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
++=======
+ 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO)))
++>>>>>>> 2c227f278a92 (netfilter: ipset: Permit CIDR equal to the host address CIDR in IPv6)
  		return -IPSET_ERR_PROTOCOL;
+ 	if (unlikely(tb[IPSET_ATTR_IP_TO]))
+ 		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
+ 	if (unlikely(tb[IPSET_ATTR_CIDR])) {
+ 		u8 cidr = nla_get_u8(tb[IPSET_ATTR_CIDR]);
+ 
+ 		if (cidr != HOST_MASK)
+ 			return -IPSET_ERR_INVALID_CIDR;
+ 	}
  
  	if (tb[IPSET_ATTR_LINENO])
  		*lineno = nla_get_u32(tb[IPSET_ATTR_LINENO]);
diff --cc net/netfilter/ipset/ip_set_hash_ipportnet.c
index bb1a8e8f02c9,f3c62565f38c..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipportnet.c
+++ b/net/netfilter/ipset/ip_set_hash_ipportnet.c
@@@ -488,12 -423,7 +488,16 @@@ hash_ipportnet6_uadt(struct ip_set *set
  	if (unlikely(!tb[IPSET_ATTR_IP] || !tb[IPSET_ATTR_IP2] ||
  		     !ip_set_attr_netorder(tb, IPSET_ATTR_PORT) ||
  		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PORT_TO) ||
++<<<<<<< HEAD
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_TIMEOUT) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_PACKETS) ||
 +		     !ip_set_optattr_netorder(tb, IPSET_ATTR_BYTES) ||
 +		     tb[IPSET_ATTR_IP_TO] ||
 +		     tb[IPSET_ATTR_CIDR]))
++=======
+ 		     !ip_set_optattr_netorder(tb, IPSET_ATTR_CADT_FLAGS)))
++>>>>>>> 2c227f278a92 (netfilter: ipset: Permit CIDR equal to the host address CIDR in IPv6)
  		return -IPSET_ERR_PROTOCOL;
  	if (unlikely(tb[IPSET_ATTR_IP_TO]))
  		return -IPSET_ERR_HASH_RANGE_UNSUPPORTED;
* Unmerged path net/netfilter/ipset/ip_set_hash_ip.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipmark.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipport.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipportip.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipportnet.c
