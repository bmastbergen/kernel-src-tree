exec: introduce exec_binprm() for "depth == 0" code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Oleg Nesterov <oleg@redhat.com>
commit 5d1baf3b63bfc8c709dc44df85ff1475c7ef489d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5d1baf3b.failed

task_pid_nr_ns() and trace/ptrace code in the middle of the recursive
search_binary_handler() looks confusing and imho annoying.  We only need
this code if "depth == 0", lets add a simple helper which calls
search_binary_handler() and does trace_sched_process_exec() +
ptrace_event().

The patch also moves the setting of task->did_exec, we need to do this
only once.

Note: we can kill either task->did_exec or PF_FORKNOEXEC.

	Signed-off-by: Oleg Nesterov <oleg@redhat.com>
	Acked-by: Kees Cook <keescook@chromium.org>
	Cc: Al Viro <viro@ZenIV.linux.org.uk>
	Cc: Evgeniy Polyakov <zbr@ioremap.net>
	Cc: Zach Levis <zml@linux.vnet.ibm.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 5d1baf3b63bfc8c709dc44df85ff1475c7ef489d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/exec.c
diff --cc fs/exec.c
index 25871b5322aa,4d95b4709ea0..000000000000
--- a/fs/exec.c
+++ b/fs/exec.c
@@@ -1434,11 -1382,9 +1433,17 @@@ int search_binary_handler(struct linux_
  	if (retval)
  		return retval;
  
++<<<<<<< HEAD
 +	/* Need to fetch pid before load_binary changes it */
 +	old_pid = current->pid;
 +	rcu_read_lock();
 +	old_vpid = task_pid_nr_ns(current, task_active_pid_ns(current->parent));
 +	rcu_read_unlock();
++=======
+ 	retval = audit_bprm(bprm);
+ 	if (retval)
+ 		return retval;
++>>>>>>> 5d1baf3b63bf (exec: introduce exec_binprm() for "depth == 0" code)
  
  	retval = -ENOENT;
  	for (try=0; try<2; try++) {
@@@ -1454,11 -1400,6 +1459,14 @@@
  			retval = fn(bprm);
  			bprm->recursion_depth = depth;
  			if (retval >= 0) {
++<<<<<<< HEAD
 +				audit_bprm(bprm);
 +				if (depth == 0) {
 +					trace_sched_process_exec(current, old_pid, bprm);
 +					ptrace_event(PTRACE_EVENT_EXEC, old_vpid);
 +				}
++=======
++>>>>>>> 5d1baf3b63bf (exec: introduce exec_binprm() for "depth == 0" code)
  				put_binfmt(fmt);
  				allow_write_access(bprm->file);
  				if (bprm->file)
* Unmerged path fs/exec.c
