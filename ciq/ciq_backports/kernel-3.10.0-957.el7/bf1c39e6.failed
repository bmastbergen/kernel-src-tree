i40e: fold prefix strings directly into stat names

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit bf1c39e64016c2c29991f20f29a91a76272b043a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/bf1c39e6.failed

We always prefix these stats with a fixed string, so just fold this
prefix into the stat string definition. This preparatory work will make
it easier to implement a helper function to copy stats and strings into
the supplied buffers in a future patch.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit bf1c39e64016c2c29991f20f29a91a76272b043a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ethtool.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 07042090c395,6b34845d251c..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@@ -105,66 -82,71 +105,67 @@@ static const struct i40e_stats i40e_gst
   * is queried on the base PF netdev, not on the VMDq or FCoE netdev.
   */
  static const struct i40e_stats i40e_gstrings_stats[] = {
- 	I40E_PF_STAT("rx_bytes", stats.eth.rx_bytes),
- 	I40E_PF_STAT("tx_bytes", stats.eth.tx_bytes),
- 	I40E_PF_STAT("rx_unicast", stats.eth.rx_unicast),
- 	I40E_PF_STAT("tx_unicast", stats.eth.tx_unicast),
- 	I40E_PF_STAT("rx_multicast", stats.eth.rx_multicast),
- 	I40E_PF_STAT("tx_multicast", stats.eth.tx_multicast),
- 	I40E_PF_STAT("rx_broadcast", stats.eth.rx_broadcast),
- 	I40E_PF_STAT("tx_broadcast", stats.eth.tx_broadcast),
- 	I40E_PF_STAT("tx_errors", stats.eth.tx_errors),
- 	I40E_PF_STAT("rx_dropped", stats.eth.rx_discards),
- 	I40E_PF_STAT("tx_dropped_link_down", stats.tx_dropped_link_down),
- 	I40E_PF_STAT("rx_crc_errors", stats.crc_errors),
- 	I40E_PF_STAT("illegal_bytes", stats.illegal_bytes),
- 	I40E_PF_STAT("mac_local_faults", stats.mac_local_faults),
- 	I40E_PF_STAT("mac_remote_faults", stats.mac_remote_faults),
- 	I40E_PF_STAT("tx_timeout", tx_timeout_count),
- 	I40E_PF_STAT("rx_csum_bad", hw_csum_rx_error),
- 	I40E_PF_STAT("rx_length_errors", stats.rx_length_errors),
- 	I40E_PF_STAT("link_xon_rx", stats.link_xon_rx),
- 	I40E_PF_STAT("link_xoff_rx", stats.link_xoff_rx),
- 	I40E_PF_STAT("link_xon_tx", stats.link_xon_tx),
- 	I40E_PF_STAT("link_xoff_tx", stats.link_xoff_tx),
- 	I40E_PF_STAT("rx_size_64", stats.rx_size_64),
- 	I40E_PF_STAT("rx_size_127", stats.rx_size_127),
- 	I40E_PF_STAT("rx_size_255", stats.rx_size_255),
- 	I40E_PF_STAT("rx_size_511", stats.rx_size_511),
- 	I40E_PF_STAT("rx_size_1023", stats.rx_size_1023),
- 	I40E_PF_STAT("rx_size_1522", stats.rx_size_1522),
- 	I40E_PF_STAT("rx_size_big", stats.rx_size_big),
- 	I40E_PF_STAT("tx_size_64", stats.tx_size_64),
- 	I40E_PF_STAT("tx_size_127", stats.tx_size_127),
- 	I40E_PF_STAT("tx_size_255", stats.tx_size_255),
- 	I40E_PF_STAT("tx_size_511", stats.tx_size_511),
- 	I40E_PF_STAT("tx_size_1023", stats.tx_size_1023),
- 	I40E_PF_STAT("tx_size_1522", stats.tx_size_1522),
- 	I40E_PF_STAT("tx_size_big", stats.tx_size_big),
- 	I40E_PF_STAT("rx_undersize", stats.rx_undersize),
- 	I40E_PF_STAT("rx_fragments", stats.rx_fragments),
- 	I40E_PF_STAT("rx_oversize", stats.rx_oversize),
- 	I40E_PF_STAT("rx_jabber", stats.rx_jabber),
- 	I40E_PF_STAT("VF_admin_queue_requests", vf_aq_requests),
- 	I40E_PF_STAT("arq_overflows", arq_overflows),
- 	I40E_PF_STAT("rx_hwtstamp_cleared", rx_hwtstamp_cleared),
- 	I40E_PF_STAT("tx_hwtstamp_skipped", tx_hwtstamp_skipped),
- 	I40E_PF_STAT("fdir_flush_cnt", fd_flush_cnt),
- 	I40E_PF_STAT("fdir_atr_match", stats.fd_atr_match),
- 	I40E_PF_STAT("fdir_atr_tunnel_match", stats.fd_atr_tunnel_match),
- 	I40E_PF_STAT("fdir_atr_status", stats.fd_atr_status),
- 	I40E_PF_STAT("fdir_sb_match", stats.fd_sb_match),
- 	I40E_PF_STAT("fdir_sb_status", stats.fd_sb_status),
+ 	I40E_PF_STAT("port.rx_bytes", stats.eth.rx_bytes),
+ 	I40E_PF_STAT("port.tx_bytes", stats.eth.tx_bytes),
+ 	I40E_PF_STAT("port.rx_unicast", stats.eth.rx_unicast),
+ 	I40E_PF_STAT("port.tx_unicast", stats.eth.tx_unicast),
+ 	I40E_PF_STAT("port.rx_multicast", stats.eth.rx_multicast),
+ 	I40E_PF_STAT("port.tx_multicast", stats.eth.tx_multicast),
+ 	I40E_PF_STAT("port.rx_broadcast", stats.eth.rx_broadcast),
+ 	I40E_PF_STAT("port.tx_broadcast", stats.eth.tx_broadcast),
+ 	I40E_PF_STAT("port.tx_errors", stats.eth.tx_errors),
+ 	I40E_PF_STAT("port.rx_dropped", stats.eth.rx_discards),
+ 	I40E_PF_STAT("port.tx_dropped_link_down", stats.tx_dropped_link_down),
+ 	I40E_PF_STAT("port.rx_crc_errors", stats.crc_errors),
+ 	I40E_PF_STAT("port.illegal_bytes", stats.illegal_bytes),
+ 	I40E_PF_STAT("port.mac_local_faults", stats.mac_local_faults),
+ 	I40E_PF_STAT("port.mac_remote_faults", stats.mac_remote_faults),
+ 	I40E_PF_STAT("port.tx_timeout", tx_timeout_count),
+ 	I40E_PF_STAT("port.rx_csum_bad", hw_csum_rx_error),
+ 	I40E_PF_STAT("port.rx_length_errors", stats.rx_length_errors),
+ 	I40E_PF_STAT("port.link_xon_rx", stats.link_xon_rx),
+ 	I40E_PF_STAT("port.link_xoff_rx", stats.link_xoff_rx),
+ 	I40E_PF_STAT("port.link_xon_tx", stats.link_xon_tx),
+ 	I40E_PF_STAT("port.link_xoff_tx", stats.link_xoff_tx),
+ 	I40E_PF_STAT("port.rx_size_64", stats.rx_size_64),
+ 	I40E_PF_STAT("port.rx_size_127", stats.rx_size_127),
+ 	I40E_PF_STAT("port.rx_size_255", stats.rx_size_255),
+ 	I40E_PF_STAT("port.rx_size_511", stats.rx_size_511),
+ 	I40E_PF_STAT("port.rx_size_1023", stats.rx_size_1023),
+ 	I40E_PF_STAT("port.rx_size_1522", stats.rx_size_1522),
+ 	I40E_PF_STAT("port.rx_size_big", stats.rx_size_big),
+ 	I40E_PF_STAT("port.tx_size_64", stats.tx_size_64),
+ 	I40E_PF_STAT("port.tx_size_127", stats.tx_size_127),
+ 	I40E_PF_STAT("port.tx_size_255", stats.tx_size_255),
+ 	I40E_PF_STAT("port.tx_size_511", stats.tx_size_511),
+ 	I40E_PF_STAT("port.tx_size_1023", stats.tx_size_1023),
+ 	I40E_PF_STAT("port.tx_size_1522", stats.tx_size_1522),
+ 	I40E_PF_STAT("port.tx_size_big", stats.tx_size_big),
+ 	I40E_PF_STAT("port.rx_undersize", stats.rx_undersize),
+ 	I40E_PF_STAT("port.rx_fragments", stats.rx_fragments),
+ 	I40E_PF_STAT("port.rx_oversize", stats.rx_oversize),
+ 	I40E_PF_STAT("port.rx_jabber", stats.rx_jabber),
+ 	I40E_PF_STAT("port.VF_admin_queue_requests", vf_aq_requests),
+ 	I40E_PF_STAT("port.arq_overflows", arq_overflows),
+ 	I40E_PF_STAT("port.tx_hwtstamp_timeouts", tx_hwtstamp_timeouts),
+ 	I40E_PF_STAT("port.rx_hwtstamp_cleared", rx_hwtstamp_cleared),
+ 	I40E_PF_STAT("port.tx_hwtstamp_skipped", tx_hwtstamp_skipped),
+ 	I40E_PF_STAT("port.fdir_flush_cnt", fd_flush_cnt),
+ 	I40E_PF_STAT("port.fdir_atr_match", stats.fd_atr_match),
+ 	I40E_PF_STAT("port.fdir_atr_tunnel_match", stats.fd_atr_tunnel_match),
+ 	I40E_PF_STAT("port.fdir_atr_status", stats.fd_atr_status),
+ 	I40E_PF_STAT("port.fdir_sb_match", stats.fd_sb_match),
+ 	I40E_PF_STAT("port.fdir_sb_status", stats.fd_sb_status),
  
  	/* LPI stats */
- 	I40E_PF_STAT("tx_lpi_status", stats.tx_lpi_status),
- 	I40E_PF_STAT("rx_lpi_status", stats.rx_lpi_status),
- 	I40E_PF_STAT("tx_lpi_count", stats.tx_lpi_count),
- 	I40E_PF_STAT("rx_lpi_count", stats.rx_lpi_count),
+ 	I40E_PF_STAT("port.tx_lpi_status", stats.tx_lpi_status),
+ 	I40E_PF_STAT("port.rx_lpi_status", stats.rx_lpi_status),
+ 	I40E_PF_STAT("port.tx_lpi_count", stats.tx_lpi_count),
+ 	I40E_PF_STAT("port.rx_lpi_count", stats.rx_lpi_count),
  };
  
 -/* We use num_tx_queues here as a proxy for the maximum number of queues
 - * available because we always allocate queues symmetrically.
 - */
 -#define I40E_MAX_NUM_QUEUES(n) ((n)->num_tx_queues)
 -#define I40E_QUEUE_STATS_LEN(n)                                              \
 -	   (I40E_MAX_NUM_QUEUES(n)                                           \
 +#define I40E_QUEUE_STATS_LEN(n) \
 +	(((struct i40e_netdev_priv *)netdev_priv((n)))->vsi->num_queue_pairs \
  	    * 2 /* Tx and Rx together */                                     \
  	    * (sizeof(struct i40e_queue_stats) / sizeof(u64)))
  #define I40E_GLOBAL_STATS_LEN	ARRAY_SIZE(i40e_gstrings_stats)
@@@ -1704,8 -1788,89 +1705,94 @@@ static void i40e_get_ethtool_stats(stru
  		data[i++] = pf->stats.priority_xon_2_xoff[j];
  }
  
++<<<<<<< HEAD
 +static void i40e_get_strings(struct net_device *netdev, u32 stringset,
 +			     u8 *data)
++=======
+ static void i40e_get_stat_strings(struct net_device *netdev, u8 *data)
+ {
+ 	struct i40e_netdev_priv *np = netdev_priv(netdev);
+ 	struct i40e_vsi *vsi = np->vsi;
+ 	struct i40e_pf *pf = vsi->back;
+ 	unsigned int i;
+ 	u8 *p = data;
+ 
+ 	for (i = 0; i < I40E_NETDEV_STATS_LEN; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN, "%s",
+ 			 i40e_gstrings_net_stats[i].stat_string);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 	for (i = 0; i < I40E_MISC_STATS_LEN; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN, "%s",
+ 			 i40e_gstrings_misc_stats[i].stat_string);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 	for (i = 0; i < I40E_MAX_NUM_QUEUES(netdev); i++) {
+ 		snprintf(p, ETH_GSTRING_LEN, "tx-%u.tx_packets", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN, "tx-%u.tx_bytes", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN, "rx-%u.rx_packets", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN, "rx-%u.rx_bytes", i);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 	if (vsi != pf->vsi[pf->lan_vsi] || pf->hw.partition_id != 1)
+ 		return;
+ 
+ 	for (i = 0; i < I40E_VEB_STATS_LEN; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN, "%s",
+ 			 i40e_gstrings_veb_stats[i].stat_string);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 	for (i = 0; i < I40E_MAX_TRAFFIC_CLASS; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "veb.tc_%u_tx_packets", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "veb.tc_%u_tx_bytes", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "veb.tc_%u_rx_packets", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "veb.tc_%u_rx_bytes", i);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 
+ 	for (i = 0; i < I40E_GLOBAL_STATS_LEN; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN, "%s",
+ 			 i40e_gstrings_stats[i].stat_string);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 	for (i = 0; i < I40E_MAX_USER_PRIORITY; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "port.tx_priority_%u_xon", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "port.tx_priority_%u_xoff", i);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 	for (i = 0; i < I40E_MAX_USER_PRIORITY; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "port.rx_priority_%u_xon", i);
+ 		p += ETH_GSTRING_LEN;
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "port.rx_priority_%u_xoff", i);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 	for (i = 0; i < I40E_MAX_USER_PRIORITY; i++) {
+ 		snprintf(p, ETH_GSTRING_LEN,
+ 			 "port.rx_priority_%u_xon_2_xoff", i);
+ 		p += ETH_GSTRING_LEN;
+ 	}
+ 
+ 	WARN_ONCE(p - data != i40e_get_stats_count(netdev) * ETH_GSTRING_LEN,
+ 		  "stat strings count mismatch!");
+ }
+ 
+ static void i40e_get_priv_flag_strings(struct net_device *netdev, u8 *data)
++>>>>>>> bf1c39e64016 (i40e: fold prefix strings directly into stat names)
  {
  	struct i40e_netdev_priv *np = netdev_priv(netdev);
  	struct i40e_vsi *vsi = np->vsi;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ethtool.c
