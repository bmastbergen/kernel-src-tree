net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] mii, smsc: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void (Ivan Vecera) [1554965]
Rebuild_FUZZ: 96.47%
commit-author yuval.shaia@oracle.com <yuval.shaia@oracle.com>
commit 82c01a84d5a9bd3b9347bb03eed2f05bbccef933
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/82c01a84.failed

Make return value void since functions never returns meaningfull value.

	Signed-off-by: Yuval Shaia <yuval.shaia@oracle.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 82c01a84d5a9bd3b9347bb03eed2f05bbccef933)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/cris/eth_v10.c
#	drivers/net/ethernet/3com/3c59x.c
#	drivers/net/ethernet/amd/pcnet32.c
#	drivers/net/ethernet/cirrus/ep93xx_eth.c
#	drivers/net/ethernet/dec/tulip/winbond-840.c
#	drivers/net/ethernet/faraday/ftmac100.c
#	drivers/net/ethernet/fealnx.c
#	drivers/net/ethernet/intel/e100.c
#	drivers/net/ethernet/jme.c
#	drivers/net/ethernet/korina.c
#	drivers/net/ethernet/micrel/ks8851.c
#	drivers/net/ethernet/micrel/ks8851_mll.c
#	drivers/net/ethernet/nuvoton/w90p910_ether.c
#	drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_ethtool.c
#	drivers/net/ethernet/realtek/8139cp.c
#	drivers/net/ethernet/sgi/ioc3-eth.c
#	drivers/net/ethernet/sis/sis190.c
#	drivers/net/ethernet/smsc/epic100.c
#	drivers/net/ethernet/smsc/smc911x.c
#	drivers/net/ethernet/smsc/smc91c92_cs.c
#	drivers/net/ethernet/smsc/smc91x.c
#	drivers/net/ethernet/tundra/tsi108_eth.c
#	drivers/net/ethernet/via/via-rhine.c
diff --cc drivers/net/cris/eth_v10.c
index 68c2b25559d7,017f48cdcab9..000000000000
--- a/drivers/net/cris/eth_v10.c
+++ b/drivers/net/cris/eth_v10.c
@@@ -1415,26 -1412,32 +1415,45 @@@ e100_ioctl(struct net_device *dev, stru
  	return rc;
  }
  
 -static int e100_get_link_ksettings(struct net_device *dev,
 -				   struct ethtool_link_ksettings *cmd)
 +static int e100_get_settings(struct net_device *dev,
 +			     struct ethtool_cmd *cmd)
  {
  	struct net_local *np = netdev_priv(dev);
++<<<<<<< HEAD
 +	int err;
 +
 +	spin_lock_irq(&np->lock);
 +	err = mii_ethtool_gset(&np->mii_if, cmd);
 +	spin_unlock_irq(&np->lock);
 +
 +	/* The PHY may support 1000baseT, but the Etrax100 does not.  */
 +	cmd->supported &= ~(SUPPORTED_1000baseT_Half
 +			    | SUPPORTED_1000baseT_Full);
 +	return err;
++=======
+ 	u32 supported;
+ 
+ 	spin_lock_irq(&np->lock);
+ 	mii_ethtool_get_link_ksettings(&np->mii_if, cmd);
+ 	spin_unlock_irq(&np->lock);
+ 
+ 	/* The PHY may support 1000baseT, but the Etrax100 does not.  */
+ 	ethtool_convert_link_mode_to_legacy_u32(&supported,
+ 						cmd->link_modes.supported);
+ 
+ 	supported &= ~(SUPPORTED_1000baseT_Half | SUPPORTED_1000baseT_Full);
+ 
+ 	ethtool_convert_legacy_u32_to_link_mode(cmd->link_modes.supported,
+ 						supported);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int e100_set_link_ksettings(struct net_device *dev,
 -				   const struct ethtool_link_ksettings *ecmd)
 +static int e100_set_settings(struct net_device *dev,
 +			     struct ethtool_cmd *ecmd)
  {
 -	if (ecmd->base.autoneg == AUTONEG_ENABLE) {
 +	if (ecmd->autoneg == AUTONEG_ENABLE) {
  		e100_set_duplex(dev, autoneg);
  		e100_set_speed(dev, 0);
  	} else {
diff --cc drivers/net/ethernet/3com/3c59x.c
index 82bb07ec24a5,14cff6017756..000000000000
--- a/drivers/net/ethernet/3com/3c59x.c
+++ b/drivers/net/ethernet/3com/3c59x.c
@@@ -2861,10 -2912,13 +2861,16 @@@ static int vortex_get_settings(struct n
  {
  	struct vortex_private *vp = netdev_priv(dev);
  
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&vp->mii, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&vp->mii, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int vortex_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int vortex_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct vortex_private *vp = netdev_priv(dev);
  
diff --cc drivers/net/ethernet/amd/pcnet32.c
index b1f1a86a63d6,7f60d17819ce..000000000000
--- a/drivers/net/ethernet/amd/pcnet32.c
+++ b/drivers/net/ethernet/amd/pcnet32.c
@@@ -672,28 -731,75 +672,50 @@@ static int pcnet32_get_settings(struct 
  {
  	struct pcnet32_private *lp = netdev_priv(dev);
  	unsigned long flags;
- 	int r = -EOPNOTSUPP;
  
 -	spin_lock_irqsave(&lp->lock, flags);
  	if (lp->mii) {
++<<<<<<< HEAD
 +		spin_lock_irqsave(&lp->lock, flags);
 +		mii_ethtool_gset(&lp->mii_if, cmd);
 +		spin_unlock_irqrestore(&lp->lock, flags);
 +		r = 0;
 +	}
 +	return r;
++=======
+ 		mii_ethtool_get_link_ksettings(&lp->mii_if, cmd);
+ 	} else if (lp->chip_version == PCNET32_79C970A) {
+ 		if (lp->autoneg) {
+ 			cmd->base.autoneg = AUTONEG_ENABLE;
+ 			if (lp->a->read_bcr(dev->base_addr, 4) == 0xc0)
+ 				cmd->base.port = PORT_AUI;
+ 			else
+ 				cmd->base.port = PORT_TP;
+ 		} else {
+ 			cmd->base.autoneg = AUTONEG_DISABLE;
+ 			cmd->base.port = lp->port_tp ? PORT_TP : PORT_AUI;
+ 		}
+ 		cmd->base.duplex = lp->fdx ? DUPLEX_FULL : DUPLEX_HALF;
+ 		cmd->base.speed = SPEED_10;
+ 		ethtool_convert_legacy_u32_to_link_mode(
+ 						cmd->link_modes.supported,
+ 						SUPPORTED_TP | SUPPORTED_AUI);
+ 	}
+ 	spin_unlock_irqrestore(&lp->lock, flags);
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int pcnet32_set_link_ksettings(struct net_device *dev,
 -				      const struct ethtool_link_ksettings *cmd)
 +static int pcnet32_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct pcnet32_private *lp = netdev_priv(dev);
 -	ulong ioaddr = dev->base_addr;
  	unsigned long flags;
  	int r = -EOPNOTSUPP;
 -	int suspended, bcr2, bcr9, csr15;
  
 -	spin_lock_irqsave(&lp->lock, flags);
  	if (lp->mii) {
 -		r = mii_ethtool_set_link_ksettings(&lp->mii_if, cmd);
 -	} else if (lp->chip_version == PCNET32_79C970A) {
 -		suspended = pcnet32_suspend(dev, &flags, 0);
 -		if (!suspended)
 -			lp->a->write_csr(ioaddr, CSR0, CSR0_STOP);
 -
 -		lp->autoneg = cmd->base.autoneg == AUTONEG_ENABLE;
 -		bcr2 = lp->a->read_bcr(ioaddr, 2);
 -		if (cmd->base.autoneg == AUTONEG_ENABLE) {
 -			lp->a->write_bcr(ioaddr, 2, bcr2 | 0x0002);
 -		} else {
 -			lp->a->write_bcr(ioaddr, 2, bcr2 & ~0x0002);
 -
 -			lp->port_tp = cmd->base.port == PORT_TP;
 -			csr15 = lp->a->read_csr(ioaddr, CSR15) & ~0x0180;
 -			if (cmd->base.port == PORT_TP)
 -				csr15 |= 0x0080;
 -			lp->a->write_csr(ioaddr, CSR15, csr15);
 -			lp->init_block->mode = cpu_to_le16(csr15);
 -
 -			lp->fdx = cmd->base.duplex == DUPLEX_FULL;
 -			bcr9 = lp->a->read_bcr(ioaddr, 9) & ~0x0003;
 -			if (cmd->base.duplex == DUPLEX_FULL)
 -				bcr9 |= 0x0003;
 -			lp->a->write_bcr(ioaddr, 9, bcr9);
 -		}
 -		if (suspended)
 -			pcnet32_clr_suspend(lp, ioaddr);
 -		else if (netif_running(dev))
 -			pcnet32_restart(dev, CSR0_NORMAL);
 -		r = 0;
 +		spin_lock_irqsave(&lp->lock, flags);
 +		r = mii_ethtool_sset(&lp->mii_if, cmd);
 +		spin_unlock_irqrestore(&lp->lock, flags);
  	}
 -	spin_unlock_irqrestore(&lp->lock, flags);
  	return r;
  }
  
diff --cc drivers/net/ethernet/cirrus/ep93xx_eth.c
index 67b0388b6e68,e2a702996db4..000000000000
--- a/drivers/net/ethernet/cirrus/ep93xx_eth.c
+++ b/drivers/net/ethernet/cirrus/ep93xx_eth.c
@@@ -714,16 -698,21 +714,23 @@@ static void ep93xx_get_drvinfo(struct n
  	strlcpy(info->version, DRV_MODULE_VERSION, sizeof(info->version));
  }
  
 -static int ep93xx_get_link_ksettings(struct net_device *dev,
 -				     struct ethtool_link_ksettings *cmd)
 +static int ep93xx_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct ep93xx_priv *ep = netdev_priv(dev);
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&ep->mii, cmd);
++=======
+ 
+ 	mii_ethtool_get_link_ksettings(&ep->mii, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int ep93xx_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int ep93xx_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct ep93xx_priv *ep = netdev_priv(dev);
 -	return mii_ethtool_set_link_ksettings(&ep->mii, cmd);
 +	return mii_ethtool_sset(&ep->mii, cmd);
  }
  
  static int ep93xx_nway_reset(struct net_device *dev)
diff --cc drivers/net/ethernet/dec/tulip/winbond-840.c
index 4fdbdb936e01,32d7229544fa..000000000000
--- a/drivers/net/ethernet/dec/tulip/winbond-840.c
+++ b/drivers/net/ethernet/dec/tulip/winbond-840.c
@@@ -1393,19 -1391,20 +1393,22 @@@ static void netdev_get_drvinfo (struct 
  	strlcpy(info->bus_info, pci_name(np->pci_dev), sizeof(info->bus_info));
  }
  
 -static int netdev_get_link_ksettings(struct net_device *dev,
 -				     struct ethtool_link_ksettings *cmd)
 +static int netdev_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct netdev_private *np = netdev_priv(dev);
- 	int rc;
  
  	spin_lock_irq(&np->lock);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&np->mii_if, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&np->mii_if, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_irq(&np->lock);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int netdev_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int netdev_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct netdev_private *np = netdev_priv(dev);
  	int rc;
diff --cc drivers/net/ethernet/faraday/ftmac100.c
index a6eda8d83138,66928a922824..000000000000
--- a/drivers/net/ethernet/faraday/ftmac100.c
+++ b/drivers/net/ethernet/faraday/ftmac100.c
@@@ -825,16 -825,21 +825,23 @@@ static void ftmac100_get_drvinfo(struc
  	strlcpy(info->bus_info, dev_name(&netdev->dev), sizeof(info->bus_info));
  }
  
 -static int ftmac100_get_link_ksettings(struct net_device *netdev,
 -				       struct ethtool_link_ksettings *cmd)
 +static int ftmac100_get_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
  {
  	struct ftmac100 *priv = netdev_priv(netdev);
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&priv->mii, cmd);
++=======
+ 
+ 	mii_ethtool_get_link_ksettings(&priv->mii, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int ftmac100_set_link_ksettings(struct net_device *netdev,
 -				       const struct ethtool_link_ksettings *cmd)
 +static int ftmac100_set_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
  {
  	struct ftmac100 *priv = netdev_priv(netdev);
 -	return mii_ethtool_set_link_ksettings(&priv->mii, cmd);
 +	return mii_ethtool_sset(&priv->mii, cmd);
  }
  
  static int ftmac100_nway_reset(struct net_device *netdev)
diff --cc drivers/net/ethernet/fealnx.c
index fa65392264ad,610f9c07c21d..000000000000
--- a/drivers/net/ethernet/fealnx.c
+++ b/drivers/net/ethernet/fealnx.c
@@@ -1819,19 -1817,20 +1819,22 @@@ static void netdev_get_drvinfo(struct n
  	strlcpy(info->bus_info, pci_name(np->pci_dev), sizeof(info->bus_info));
  }
  
 -static int netdev_get_link_ksettings(struct net_device *dev,
 -				     struct ethtool_link_ksettings *cmd)
 +static int netdev_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct netdev_private *np = netdev_priv(dev);
- 	int rc;
  
  	spin_lock_irq(&np->lock);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&np->mii, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&np->mii, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_irq(&np->lock);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int netdev_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int netdev_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct netdev_private *np = netdev_priv(dev);
  	int rc;
diff --cc drivers/net/ethernet/intel/e100.c
index a07b7f6b8968,4d10270ddf8f..000000000000
--- a/drivers/net/ethernet/intel/e100.c
+++ b/drivers/net/ethernet/intel/e100.c
@@@ -2435,13 -2426,18 +2435,20 @@@ err_clean_rx
  #define E100_82552_LED_ON       0x000F /* LEDTX and LED_RX both on */
  #define E100_82552_LED_OFF      0x000A /* LEDTX and LED_RX both off */
  
 -static int e100_get_link_ksettings(struct net_device *netdev,
 -				   struct ethtool_link_ksettings *cmd)
 +static int e100_get_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
  {
  	struct nic *nic = netdev_priv(netdev);
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&nic->mii, cmd);
++=======
+ 
+ 	mii_ethtool_get_link_ksettings(&nic->mii, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int e100_set_link_ksettings(struct net_device *netdev,
 -				   const struct ethtool_link_ksettings *cmd)
 +static int e100_set_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
  {
  	struct nic *nic = netdev_priv(netdev);
  	int err;
diff --cc drivers/net/ethernet/jme.c
index dac58884674e,62d848df26ef..000000000000
--- a/drivers/net/ethernet/jme.c
+++ b/drivers/net/ethernet/jme.c
@@@ -2628,16 -2606,15 +2628,19 @@@ jme_set_wol(struct net_device *netdev
  }
  
  static int
 -jme_get_link_ksettings(struct net_device *netdev,
 -		       struct ethtool_link_ksettings *cmd)
 +jme_get_settings(struct net_device *netdev,
 +		     struct ethtool_cmd *ecmd)
  {
  	struct jme_adapter *jme = netdev_priv(netdev);
- 	int rc;
  
  	spin_lock_bh(&jme->phy_lock);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&(jme->mii_if), ecmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&jme->mii_if, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_bh(&jme->phy_lock);
- 	return rc;
+ 	return 0;
  }
  
  static int
diff --cc drivers/net/ethernet/korina.c
index eb393b76c073,3c0a6451273d..000000000000
--- a/drivers/net/ethernet/korina.c
+++ b/drivers/net/ethernet/korina.c
@@@ -700,19 -695,20 +700,22 @@@ static void netdev_get_drvinfo(struct n
  	strlcpy(info->bus_info, lp->dev->name, sizeof(info->bus_info));
  }
  
 -static int netdev_get_link_ksettings(struct net_device *dev,
 -				     struct ethtool_link_ksettings *cmd)
 +static int netdev_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct korina_private *lp = netdev_priv(dev);
- 	int rc;
  
  	spin_lock_irq(&lp->lock);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&lp->mii_if, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&lp->mii_if, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_irq(&lp->lock);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int netdev_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int netdev_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct korina_private *lp = netdev_priv(dev);
  	int rc;
diff --cc drivers/net/ethernet/micrel/ks8851.c
index 727b546a9eb8,2fe96f1f3fe5..000000000000
--- a/drivers/net/ethernet/micrel/ks8851.c
+++ b/drivers/net/ethernet/micrel/ks8851.c
@@@ -1080,16 -1067,21 +1080,23 @@@ static void ks8851_set_msglevel(struct 
  	ks->msg_enable = to;
  }
  
 -static int ks8851_get_link_ksettings(struct net_device *dev,
 -				     struct ethtool_link_ksettings *cmd)
 +static int ks8851_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct ks8851_net *ks = netdev_priv(dev);
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&ks->mii, cmd);
++=======
+ 
+ 	mii_ethtool_get_link_ksettings(&ks->mii, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int ks8851_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int ks8851_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct ks8851_net *ks = netdev_priv(dev);
 -	return mii_ethtool_set_link_ksettings(&ks->mii, cmd);
 +	return mii_ethtool_sset(&ks->mii, cmd);
  }
  
  static u32 ks8851_get_link(struct net_device *dev)
diff --cc drivers/net/ethernet/micrel/ks8851_mll.c
index 8abb187662da,f3e9dd47b56f..000000000000
--- a/drivers/net/ethernet/micrel/ks8851_mll.c
+++ b/drivers/net/ethernet/micrel/ks8851_mll.c
@@@ -1309,16 -1311,21 +1309,23 @@@ static void ks_set_msglevel(struct net_
  	ks->msg_enable = to;
  }
  
 -static int ks_get_link_ksettings(struct net_device *netdev,
 -				 struct ethtool_link_ksettings *cmd)
 +static int ks_get_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
  {
  	struct ks_net *ks = netdev_priv(netdev);
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&ks->mii, cmd);
++=======
+ 
+ 	mii_ethtool_get_link_ksettings(&ks->mii, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int ks_set_link_ksettings(struct net_device *netdev,
 -				 const struct ethtool_link_ksettings *cmd)
 +static int ks_set_settings(struct net_device *netdev, struct ethtool_cmd *cmd)
  {
  	struct ks_net *ks = netdev_priv(netdev);
 -	return mii_ethtool_set_link_ksettings(&ks->mii, cmd);
 +	return mii_ethtool_sset(&ks->mii, cmd);
  }
  
  static u32 ks_get_link(struct net_device *netdev)
diff --cc drivers/net/ethernet/nuvoton/w90p910_ether.c
index 4a7b2077034b,89ab786da25f..000000000000
--- a/drivers/net/ethernet/nuvoton/w90p910_ether.c
+++ b/drivers/net/ethernet/nuvoton/w90p910_ether.c
@@@ -874,16 -864,21 +874,23 @@@ static void w90p910_get_drvinfo(struct 
  	strlcpy(info->version, DRV_MODULE_VERSION, sizeof(info->version));
  }
  
 -static int w90p910_get_link_ksettings(struct net_device *dev,
 -				      struct ethtool_link_ksettings *cmd)
 +static int w90p910_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct w90p910_ether *ether = netdev_priv(dev);
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&ether->mii, cmd);
++=======
+ 
+ 	mii_ethtool_get_link_ksettings(&ether->mii, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int w90p910_set_link_ksettings(struct net_device *dev,
 -				      const struct ethtool_link_ksettings *cmd)
 +static int w90p910_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct w90p910_ether *ether = netdev_priv(dev);
 -	return mii_ethtool_set_link_ksettings(&ether->mii, cmd);
 +	return mii_ethtool_sset(&ether->mii, cmd);
  }
  
  static int w90p910_nway_reset(struct net_device *dev)
diff --cc drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_ethtool.c
index f47f4830f786,731ce1e419e4..000000000000
--- a/drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_ethtool.c
+++ b/drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_ethtool.c
@@@ -81,19 -80,31 +81,43 @@@ static const struct pch_gbe_stats pch_g
   *	0:			Successful.
   *	Negative value:		Failed.
   */
 -static int pch_gbe_get_link_ksettings(struct net_device *netdev,
 -				      struct ethtool_link_ksettings *ecmd)
 +static int pch_gbe_get_settings(struct net_device *netdev,
 +				 struct ethtool_cmd *ecmd)
  {
  	struct pch_gbe_adapter *adapter = netdev_priv(netdev);
++<<<<<<< HEAD
 +	int ret;
 +
 +	ret = mii_ethtool_gset(&adapter->mii, ecmd);
 +	ecmd->supported &= ~(SUPPORTED_TP | SUPPORTED_1000baseT_Half);
 +	ecmd->advertising &= ~(ADVERTISED_TP | ADVERTISED_1000baseT_Half);
 +
 +	if (!netif_carrier_ok(adapter->netdev))
 +		ethtool_cmd_speed_set(ecmd, -1);
 +	return ret;
++=======
+ 	u32 supported, advertising;
+ 
+ 	mii_ethtool_get_link_ksettings(&adapter->mii, ecmd);
+ 
+ 	ethtool_convert_link_mode_to_legacy_u32(&supported,
+ 						ecmd->link_modes.supported);
+ 	ethtool_convert_link_mode_to_legacy_u32(&advertising,
+ 						ecmd->link_modes.advertising);
+ 
+ 	supported &= ~(SUPPORTED_TP | SUPPORTED_1000baseT_Half);
+ 	advertising &= ~(ADVERTISED_TP | ADVERTISED_1000baseT_Half);
+ 
+ 	ethtool_convert_legacy_u32_to_link_mode(ecmd->link_modes.supported,
+ 						supported);
+ 	ethtool_convert_legacy_u32_to_link_mode(ecmd->link_modes.advertising,
+ 						advertising);
+ 
+ 	if (!netif_carrier_ok(adapter->netdev))
+ 		ecmd->base.speed = SPEED_UNKNOWN;
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
  /**
diff --cc drivers/net/ethernet/realtek/8139cp.c
index 77125992b4fd,e7ab23e87de2..000000000000
--- a/drivers/net/ethernet/realtek/8139cp.c
+++ b/drivers/net/ethernet/realtek/8139cp.c
@@@ -1422,20 -1406,21 +1422,23 @@@ static int cp_get_sset_count (struct ne
  	}
  }
  
 -static int cp_get_link_ksettings(struct net_device *dev,
 -				 struct ethtool_link_ksettings *cmd)
 +static int cp_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct cp_private *cp = netdev_priv(dev);
- 	int rc;
  	unsigned long flags;
  
  	spin_lock_irqsave(&cp->lock, flags);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&cp->mii_if, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&cp->mii_if, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_irqrestore(&cp->lock, flags);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int cp_set_link_ksettings(struct net_device *dev,
 -				 const struct ethtool_link_ksettings *cmd)
 +static int cp_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct cp_private *cp = netdev_priv(dev);
  	int rc;
diff --cc drivers/net/ethernet/sgi/ioc3-eth.c
index b26e23d869c2,b607936e1b3e..000000000000
--- a/drivers/net/ethernet/sgi/ioc3-eth.c
+++ b/drivers/net/ethernet/sgi/ioc3-eth.c
@@@ -1570,19 -1558,20 +1570,22 @@@ static void ioc3_get_drvinfo (struct ne
  	strlcpy(info->bus_info, pci_name(ip->pdev), sizeof(info->bus_info));
  }
  
 -static int ioc3_get_link_ksettings(struct net_device *dev,
 -				   struct ethtool_link_ksettings *cmd)
 +static int ioc3_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct ioc3_private *ip = netdev_priv(dev);
- 	int rc;
  
  	spin_lock_irq(&ip->ioc3_lock);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&ip->mii, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&ip->mii, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_irq(&ip->ioc3_lock);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int ioc3_set_link_ksettings(struct net_device *dev,
 -				   const struct ethtool_link_ksettings *cmd)
 +static int ioc3_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct ioc3_private *ip = netdev_priv(dev);
  	int rc;
diff --cc drivers/net/ethernet/sis/sis190.c
index 0232c76f2ba5,445109bd6910..000000000000
--- a/drivers/net/ethernet/sis/sis190.c
+++ b/drivers/net/ethernet/sis/sis190.c
@@@ -1738,10 -1739,13 +1738,16 @@@ static int sis190_get_settings(struct n
  {
  	struct sis190_private *tp = netdev_priv(dev);
  
++<<<<<<< HEAD
 +	return mii_ethtool_gset(&tp->mii_if, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&tp->mii_if, cmd);
+ 
+ 	return 0;
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int sis190_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int sis190_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct sis190_private *tp = netdev_priv(dev);
  
diff --cc drivers/net/ethernet/smsc/epic100.c
index 860402edb477,6a0e1d4b597c..000000000000
--- a/drivers/net/ethernet/smsc/epic100.c
+++ b/drivers/net/ethernet/smsc/epic100.c
@@@ -1413,19 -1387,20 +1413,22 @@@ static void netdev_get_drvinfo (struct 
  	strlcpy(info->bus_info, pci_name(np->pci_dev), sizeof(info->bus_info));
  }
  
 -static int netdev_get_link_ksettings(struct net_device *dev,
 -				     struct ethtool_link_ksettings *cmd)
 +static int netdev_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct epic_private *np = netdev_priv(dev);
- 	int rc;
  
  	spin_lock_irq(&np->lock);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&np->mii, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&np->mii, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_irq(&np->lock);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int netdev_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int netdev_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct epic_private *np = netdev_priv(dev);
  	int rc;
diff --cc drivers/net/ethernet/smsc/smc911x.c
index 7ba080b7cf5e,05157442a980..000000000000
--- a/drivers/net/ethernet/smsc/smc911x.c
+++ b/drivers/net/ethernet/smsc/smc911x.c
@@@ -1453,44 -1446,43 +1453,55 @@@ static int smc911x_close(struct net_dev
   * Ethtool support
   */
  static int
 -smc911x_ethtool_get_link_ksettings(struct net_device *dev,
 -				   struct ethtool_link_ksettings *cmd)
 +smc911x_ethtool_getsettings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct smc911x_local *lp = netdev_priv(dev);
- 	int ret, status;
+ 	int status;
  	unsigned long flags;
 -	u32 supported;
  
 -	DBG(SMC_DEBUG_FUNC, dev, "--> %s\n", __func__);
 +	DBG(SMC_DEBUG_FUNC, "%s: --> %s\n", dev->name, __func__);
 +	cmd->maxtxpkt = 1;
 +	cmd->maxrxpkt = 1;
  
  	if (lp->phy_type != 0) {
  		spin_lock_irqsave(&lp->lock, flags);
++<<<<<<< HEAD
 +		ret = mii_ethtool_gset(&lp->mii, cmd);
++=======
+ 		mii_ethtool_get_link_ksettings(&lp->mii, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  		spin_unlock_irqrestore(&lp->lock, flags);
  	} else {
 -		supported = SUPPORTED_10baseT_Half |
 +		cmd->supported = SUPPORTED_10baseT_Half |
  				SUPPORTED_10baseT_Full |
  				SUPPORTED_TP | SUPPORTED_AUI;
  
  		if (lp->ctl_rspeed == 10)
 -			cmd->base.speed = SPEED_10;
 +			ethtool_cmd_speed_set(cmd, SPEED_10);
  		else if (lp->ctl_rspeed == 100)
 -			cmd->base.speed = SPEED_100;
 -
 -		cmd->base.autoneg = AUTONEG_DISABLE;
 -		cmd->base.port = 0;
 +			ethtool_cmd_speed_set(cmd, SPEED_100);
 +
 +		cmd->autoneg = AUTONEG_DISABLE;
 +		if (lp->mii.phy_id==1)
 +			cmd->transceiver = XCVR_INTERNAL;
 +		else
 +			cmd->transceiver = XCVR_EXTERNAL;
 +		cmd->port = 0;
  		SMC_GET_PHY_SPECIAL(lp, lp->mii.phy_id, status);
 -		cmd->base.duplex =
 +		cmd->duplex =
  			(status & (PHY_SPECIAL_SPD_10FULL_ | PHY_SPECIAL_SPD_100FULL_)) ?
  				DUPLEX_FULL : DUPLEX_HALF;
++<<<<<<< HEAD
 +		ret = 0;
++=======
+ 
+ 		ethtool_convert_legacy_u32_to_link_mode(
+ 			cmd->link_modes.supported, supported);
+ 
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	}
  
- 	return ret;
+ 	return 0;
  }
  
  static int
diff --cc drivers/net/ethernet/smsc/smc91c92_cs.c
index a273cfefaf38,92c927aec66d..000000000000
--- a/drivers/net/ethernet/smsc/smc91c92_cs.c
+++ b/drivers/net/ethernet/smsc/smc91c92_cs.c
@@@ -1849,56 -1843,58 +1849,70 @@@ static int smc_link_ok(struct net_devic
      }
  }
  
++<<<<<<< HEAD
 +static int smc_netdev_get_ecmd(struct net_device *dev, struct ethtool_cmd *ecmd)
++=======
+ static void smc_netdev_get_ecmd(struct net_device *dev,
+ 				struct ethtool_link_ksettings *ecmd)
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  {
 -	u16 tmp;
 -	unsigned int ioaddr = dev->base_addr;
 -	u32 supported;
 +    u16 tmp;
 +    unsigned int ioaddr = dev->base_addr;
  
 -	supported = (SUPPORTED_TP | SUPPORTED_AUI |
 -		     SUPPORTED_10baseT_Half | SUPPORTED_10baseT_Full);
 +    ecmd->supported = (SUPPORTED_TP | SUPPORTED_AUI |
 +	SUPPORTED_10baseT_Half | SUPPORTED_10baseT_Full);
 +		
 +    SMC_SELECT_BANK(1);
 +    tmp = inw(ioaddr + CONFIG);
 +    ecmd->port = (tmp & CFG_AUI_SELECT) ? PORT_AUI : PORT_TP;
 +    ecmd->transceiver = XCVR_INTERNAL;
 +    ethtool_cmd_speed_set(ecmd, SPEED_10);
 +    ecmd->phy_address = ioaddr + MGMT;
  
 -	SMC_SELECT_BANK(1);
 -	tmp = inw(ioaddr + CONFIG);
 -	ecmd->base.port = (tmp & CFG_AUI_SELECT) ? PORT_AUI : PORT_TP;
 -	ecmd->base.speed = SPEED_10;
 -	ecmd->base.phy_address = ioaddr + MGMT;
 +    SMC_SELECT_BANK(0);
 +    tmp = inw(ioaddr + TCR);
 +    ecmd->duplex = (tmp & TCR_FDUPLX) ? DUPLEX_FULL : DUPLEX_HALF;
  
++<<<<<<< HEAD
 +    return 0;
++=======
+ 	SMC_SELECT_BANK(0);
+ 	tmp = inw(ioaddr + TCR);
+ 	ecmd->base.duplex = (tmp & TCR_FDUPLX) ? DUPLEX_FULL : DUPLEX_HALF;
+ 
+ 	ethtool_convert_legacy_u32_to_link_mode(ecmd->link_modes.supported,
+ 						supported);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  }
  
 -static int smc_netdev_set_ecmd(struct net_device *dev,
 -			       const struct ethtool_link_ksettings *ecmd)
 +static int smc_netdev_set_ecmd(struct net_device *dev, struct ethtool_cmd *ecmd)
  {
 -	u16 tmp;
 -	unsigned int ioaddr = dev->base_addr;
 -
 -	if (ecmd->base.speed != SPEED_10)
 -		return -EINVAL;
 -	if (ecmd->base.duplex != DUPLEX_HALF &&
 -	    ecmd->base.duplex != DUPLEX_FULL)
 -		return -EINVAL;
 -	if (ecmd->base.port != PORT_TP && ecmd->base.port != PORT_AUI)
 -		return -EINVAL;
 +    u16 tmp;
 +    unsigned int ioaddr = dev->base_addr;
  
 -	if (ecmd->base.port == PORT_AUI)
 -		smc_set_xcvr(dev, 1);
 -	else
 -		smc_set_xcvr(dev, 0);
 +    if (ethtool_cmd_speed(ecmd) != SPEED_10)
 +	return -EINVAL;
 +    if (ecmd->duplex != DUPLEX_HALF && ecmd->duplex != DUPLEX_FULL)
 +    	return -EINVAL;
 +    if (ecmd->port != PORT_TP && ecmd->port != PORT_AUI)
 +	return -EINVAL;
 +    if (ecmd->transceiver != XCVR_INTERNAL)
 +    	return -EINVAL;
  
 -	SMC_SELECT_BANK(0);
 -	tmp = inw(ioaddr + TCR);
 -	if (ecmd->base.duplex == DUPLEX_FULL)
 -		tmp |= TCR_FDUPLX;
 -	else
 -		tmp &= ~TCR_FDUPLX;
 -	outw(tmp, ioaddr + TCR);
 +    if (ecmd->port == PORT_AUI)
 +	smc_set_xcvr(dev, 1);
 +    else
 +	smc_set_xcvr(dev, 0);
  
 -	return 0;
 +    SMC_SELECT_BANK(0);
 +    tmp = inw(ioaddr + TCR);
 +    if (ecmd->duplex == DUPLEX_FULL)
 +	tmp |= TCR_FDUPLX;
 +    else
 +	tmp &= ~TCR_FDUPLX;
 +    outw(tmp, ioaddr + TCR);
 +	
 +    return 0;
  }
  
  static int check_if_running(struct net_device *dev)
@@@ -1925,15 -1921,16 +1938,19 @@@ static int smc_get_settings(struct net_
  	spin_lock_irqsave(&smc->lock, flags);
  	SMC_SELECT_BANK(3);
  	if (smc->cfg & CFG_MII_SELECT)
++<<<<<<< HEAD
 +		ret = mii_ethtool_gset(&smc->mii_if, ecmd);
++=======
+ 		mii_ethtool_get_link_ksettings(&smc->mii_if, ecmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	else
- 		ret = smc_netdev_get_ecmd(dev, ecmd);
+ 		smc_netdev_get_ecmd(dev, ecmd);
  	SMC_SELECT_BANK(saved_bank);
  	spin_unlock_irqrestore(&smc->lock, flags);
- 	return ret;
+ 	return 0;
  }
  
 -static int smc_set_link_ksettings(struct net_device *dev,
 -				  const struct ethtool_link_ksettings *ecmd)
 +static int smc_set_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
  {
  	struct smc_private *smc = netdev_priv(dev);
  	unsigned int ioaddr = dev->base_addr;
diff --cc drivers/net/ethernet/smsc/smc91x.c
index a467de34f753,0d230b125c6c..000000000000
--- a/drivers/net/ethernet/smsc/smc91x.c
+++ b/drivers/net/ethernet/smsc/smc91x.c
@@@ -1530,37 -1535,35 +1530,50 @@@ static int smc_close(struct net_device 
   * Ethtool support
   */
  static int
 -smc_ethtool_get_link_ksettings(struct net_device *dev,
 -			       struct ethtool_link_ksettings *cmd)
 +smc_ethtool_getsettings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct smc_local *lp = netdev_priv(dev);
- 	int ret;
  
 +	cmd->maxtxpkt = 1;
 +	cmd->maxrxpkt = 1;
 +
  	if (lp->phy_type != 0) {
  		spin_lock_irq(&lp->lock);
++<<<<<<< HEAD
 +		ret = mii_ethtool_gset(&lp->mii, cmd);
++=======
+ 		mii_ethtool_get_link_ksettings(&lp->mii, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  		spin_unlock_irq(&lp->lock);
  	} else {
 -		u32 supported = SUPPORTED_10baseT_Half |
 +		cmd->supported = SUPPORTED_10baseT_Half |
  				 SUPPORTED_10baseT_Full |
  				 SUPPORTED_TP | SUPPORTED_AUI;
  
  		if (lp->ctl_rspeed == 10)
 -			cmd->base.speed = SPEED_10;
 +			ethtool_cmd_speed_set(cmd, SPEED_10);
  		else if (lp->ctl_rspeed == 100)
 -			cmd->base.speed = SPEED_100;
 +			ethtool_cmd_speed_set(cmd, SPEED_100);
 +
++<<<<<<< HEAD
 +		cmd->autoneg = AUTONEG_DISABLE;
 +		cmd->transceiver = XCVR_INTERNAL;
 +		cmd->port = 0;
 +		cmd->duplex = lp->tcr_cur_mode & TCR_SWFDUP ? DUPLEX_FULL : DUPLEX_HALF;
  
 +		ret = 0;
++=======
+ 		cmd->base.autoneg = AUTONEG_DISABLE;
+ 		cmd->base.port = 0;
+ 		cmd->base.duplex = lp->tcr_cur_mode & TCR_SWFDUP ?
+ 			DUPLEX_FULL : DUPLEX_HALF;
+ 
+ 		ethtool_convert_legacy_u32_to_link_mode(
+ 			cmd->link_modes.supported, supported);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	}
  
- 	return ret;
+ 	return 0;
  }
  
  static int
diff --cc drivers/net/ethernet/tundra/tsi108_eth.c
index 3c69a0460832,c2d15d9c0c33..000000000000
--- a/drivers/net/ethernet/tundra/tsi108_eth.c
+++ b/drivers/net/ethernet/tundra/tsi108_eth.c
@@@ -1502,16 -1504,16 +1502,19 @@@ static int tsi108_get_settings(struct n
  {
  	struct tsi108_prv_data *data = netdev_priv(dev);
  	unsigned long flags;
- 	int rc;
  
  	spin_lock_irqsave(&data->txlock, flags);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&data->mii_if, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&data->mii_if, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	spin_unlock_irqrestore(&data->txlock, flags);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int tsi108_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int tsi108_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct tsi108_prv_data *data = netdev_priv(dev);
  	unsigned long flags;
diff --cc drivers/net/ethernet/via/via-rhine.c
index cbedb26130e8,acd29d60174a..000000000000
--- a/drivers/net/ethernet/via/via-rhine.c
+++ b/drivers/net/ethernet/via/via-rhine.c
@@@ -2119,22 -2300,23 +2119,25 @@@ static void netdev_get_drvinfo(struct n
  
  	strlcpy(info->driver, DRV_NAME, sizeof(info->driver));
  	strlcpy(info->version, DRV_VERSION, sizeof(info->version));
 -	strlcpy(info->bus_info, dev_name(hwdev), sizeof(info->bus_info));
 +	strlcpy(info->bus_info, pci_name(rp->pdev), sizeof(info->bus_info));
  }
  
 -static int netdev_get_link_ksettings(struct net_device *dev,
 -				     struct ethtool_link_ksettings *cmd)
 +static int netdev_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct rhine_private *rp = netdev_priv(dev);
- 	int rc;
  
  	mutex_lock(&rp->task_lock);
++<<<<<<< HEAD
 +	rc = mii_ethtool_gset(&rp->mii_if, cmd);
++=======
+ 	mii_ethtool_get_link_ksettings(&rp->mii_if, cmd);
++>>>>>>> 82c01a84d5a9 (net/{mii, smsc}: Make mii_ethtool_get_link_ksettings and smc_netdev_get_ecmd return void)
  	mutex_unlock(&rp->task_lock);
  
- 	return rc;
+ 	return 0;
  }
  
 -static int netdev_set_link_ksettings(struct net_device *dev,
 -				     const struct ethtool_link_ksettings *cmd)
 +static int netdev_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
  {
  	struct rhine_private *rp = netdev_priv(dev);
  	int rc;
* Unmerged path drivers/net/cris/eth_v10.c
* Unmerged path drivers/net/ethernet/3com/3c59x.c
* Unmerged path drivers/net/ethernet/amd/pcnet32.c
* Unmerged path drivers/net/ethernet/cirrus/ep93xx_eth.c
* Unmerged path drivers/net/ethernet/dec/tulip/winbond-840.c
* Unmerged path drivers/net/ethernet/faraday/ftmac100.c
* Unmerged path drivers/net/ethernet/fealnx.c
* Unmerged path drivers/net/ethernet/intel/e100.c
* Unmerged path drivers/net/ethernet/jme.c
* Unmerged path drivers/net/ethernet/korina.c
* Unmerged path drivers/net/ethernet/micrel/ks8851.c
* Unmerged path drivers/net/ethernet/micrel/ks8851_mll.c
* Unmerged path drivers/net/ethernet/nuvoton/w90p910_ether.c
* Unmerged path drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_ethtool.c
* Unmerged path drivers/net/ethernet/realtek/8139cp.c
diff --git a/drivers/net/ethernet/realtek/r8169.c b/drivers/net/ethernet/realtek/r8169.c
index 10fad5cb733b..ddb742d41782 100644
--- a/drivers/net/ethernet/realtek/r8169.c
+++ b/drivers/net/ethernet/realtek/r8169.c
@@ -2148,7 +2148,9 @@ static int rtl8169_get_link_ksettings_xmii(struct net_device *dev,
 {
 	struct rtl8169_private *tp = netdev_priv(dev);
 
-	return mii_ethtool_get_link_ksettings(&tp->mii, cmd);
+	mii_ethtool_get_link_ksettings(&tp->mii, cmd);
+
+	return 0;
 }
 
 static int rtl8169_get_link_ksettings(struct net_device *dev,
* Unmerged path drivers/net/ethernet/sgi/ioc3-eth.c
* Unmerged path drivers/net/ethernet/sis/sis190.c
* Unmerged path drivers/net/ethernet/smsc/epic100.c
* Unmerged path drivers/net/ethernet/smsc/smc911x.c
* Unmerged path drivers/net/ethernet/smsc/smc91c92_cs.c
* Unmerged path drivers/net/ethernet/smsc/smc91x.c
* Unmerged path drivers/net/ethernet/tundra/tsi108_eth.c
* Unmerged path drivers/net/ethernet/via/via-rhine.c
diff --git a/drivers/net/mii.c b/drivers/net/mii.c
index fb6bdafad725..b4ce029a0eb8 100644
--- a/drivers/net/mii.c
+++ b/drivers/net/mii.c
@@ -141,11 +141,9 @@ int mii_ethtool_gset(struct mii_if_info *mii, struct ethtool_cmd *ecmd)
  *
  * The @cmd parameter is expected to have been cleared before calling
  * mii_ethtool_get_link_ksettings().
- *
- * Returns 0 for success, negative on error.
  */
-int mii_ethtool_get_link_ksettings(struct mii_if_info *mii,
-				   struct ethtool_link_ksettings *cmd)
+void mii_ethtool_get_link_ksettings(struct mii_if_info *mii,
+				    struct ethtool_link_ksettings *cmd)
 {
 	struct net_device *dev = mii->dev;
 	u16 bmcr, bmsr, ctrl1000 = 0, stat1000 = 0;
@@ -227,8 +225,6 @@ int mii_ethtool_get_link_ksettings(struct mii_if_info *mii,
 						lp_advertising);
 
 	/* ignore maxtxpkt, maxrxpkt for now */
-
-	return 0;
 }
 
 /**
diff --git a/drivers/net/usb/ax88179_178a.c b/drivers/net/usb/ax88179_178a.c
index d8f06acd0ecd..7e0bbacc8d93 100644
--- a/drivers/net/usb/ax88179_178a.c
+++ b/drivers/net/usb/ax88179_178a.c
@@ -624,7 +624,10 @@ static int ax88179_get_link_ksettings(struct net_device *net,
 				      struct ethtool_link_ksettings *cmd)
 {
 	struct usbnet *dev = netdev_priv(net);
-	return mii_ethtool_get_link_ksettings(&dev->mii, cmd);
+
+	mii_ethtool_get_link_ksettings(&dev->mii, cmd);
+
+	return 0;
 }
 
 static int ax88179_set_link_ksettings(struct net_device *net,
diff --git a/drivers/net/usb/r8152.c b/drivers/net/usb/r8152.c
index 0487dbf453bf..9470d944ad0b 100644
--- a/drivers/net/usb/r8152.c
+++ b/drivers/net/usb/r8152.c
@@ -3920,7 +3920,7 @@ int rtl8152_get_link_ksettings(struct net_device *netdev,
 
 	mutex_lock(&tp->control);
 
-	ret = mii_ethtool_get_link_ksettings(&tp->mii, cmd);
+	mii_ethtool_get_link_ksettings(&tp->mii, cmd);
 
 	mutex_unlock(&tp->control);
 
diff --git a/drivers/net/usb/usbnet.c b/drivers/net/usb/usbnet.c
index b5acde210535..8d3171f18c16 100644
--- a/drivers/net/usb/usbnet.c
+++ b/drivers/net/usb/usbnet.c
@@ -956,7 +956,9 @@ int usbnet_get_link_ksettings(struct net_device *net,
 	if (!dev->mii.mdio_read)
 		return -EOPNOTSUPP;
 
-	return mii_ethtool_get_link_ksettings(&dev->mii, cmd);
+	mii_ethtool_get_link_ksettings(&dev->mii, cmd);
+
+	return 0;
 }
 EXPORT_SYMBOL_GPL(usbnet_get_link_ksettings);
 
diff --git a/include/linux/mii.h b/include/linux/mii.h
index 1629a0c32679..e870bfa6abfe 100644
--- a/include/linux/mii.h
+++ b/include/linux/mii.h
@@ -31,7 +31,7 @@ struct mii_if_info {
 extern int mii_link_ok (struct mii_if_info *mii);
 extern int mii_nway_restart (struct mii_if_info *mii);
 extern int mii_ethtool_gset(struct mii_if_info *mii, struct ethtool_cmd *ecmd);
-extern int mii_ethtool_get_link_ksettings(
+extern void mii_ethtool_get_link_ksettings(
 	struct mii_if_info *mii, struct ethtool_link_ksettings *cmd);
 extern int mii_ethtool_sset(struct mii_if_info *mii, struct ethtool_cmd *ecmd);
 extern int mii_ethtool_set_link_ksettings(
