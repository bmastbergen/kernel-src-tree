scsi: tcmu: use match_int for dev params

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mike Christie <mchristi@redhat.com>
commit b60cb1f80157689d206b09affc43c2dc1cafcbc8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b60cb1f8.failed

Instead of doing strdup and kstrto* just use match_int for dev params.

It will be ok to use int instead of unsigned long in tcmu_set_dev_attrib
because that is only being used for max sectors and block size and the
supported values for them are well under the max possible integer value.

	Signed-off-by: Mike Christie <mchristi@redhat.com>
	Reviewed-by: Xiubo Li <xiubli@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit b60cb1f80157689d206b09affc43c2dc1cafcbc8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_user.c
diff --cc drivers/target/target_core_user.c
index 5534ef1b341c,cfe4f4b8c45c..000000000000
--- a/drivers/target/target_core_user.c
+++ b/drivers/target/target_core_user.c
@@@ -1361,9 -2017,10 +1361,16 @@@ enum 
  static match_table_t tokens = {
  	{Opt_dev_config, "dev_config=%s"},
  	{Opt_dev_size, "dev_size=%u"},
++<<<<<<< HEAD
 +	{Opt_hw_block_size, "hw_block_size=%u"},
 +	{Opt_hw_max_sectors, "hw_max_sectors=%u"},
 +	{Opt_max_data_area_mb, "max_data_area_mb=%u"},
++=======
+ 	{Opt_hw_block_size, "hw_block_size=%d"},
+ 	{Opt_hw_max_sectors, "hw_max_sectors=%d"},
+ 	{Opt_nl_reply_supported, "nl_reply_supported=%d"},
+ 	{Opt_max_data_area_mb, "max_data_area_mb=%d"},
++>>>>>>> b60cb1f80157 (scsi: tcmu: use match_int for dev params)
  	{Opt_err, NULL}
  };
  
@@@ -1438,38 -2126,14 +1441,49 @@@ static ssize_t tcmu_set_configfs_dev_pa
  			ret = tcmu_set_dev_attrib(&args[0],
  					&(dev->dev_attrib.hw_max_sectors));
  			break;
++<<<<<<< HEAD
 +		case Opt_max_data_area_mb:
 +			if (dev->export_count) {
 +				pr_err("Unable to set max_data_area_mb while exports exist\n");
 +				ret = -EINVAL;
 +				break;
 +			}
 +
 +			arg_p = match_strdup(&args[0]);
 +			if (!arg_p) {
 +				ret = -ENOMEM;
 +				break;
 +			}
 +			ret = kstrtoint(arg_p, 0, &tmpval);
 +			kfree(arg_p);
 +			if (ret < 0) {
 +				pr_err("kstrtoint() failed for max_data_area_mb=\n");
 +				break;
 +			}
 +
 +			if (tmpval <= 0) {
 +				pr_err("Invalid max_data_area %d\n", tmpval);
 +				ret = -EINVAL;
 +				break;
 +			}
 +
 +			udev->max_blocks = TCMU_MBS_TO_BLOCKS(tmpval);
 +			if (udev->max_blocks > DATA_BLOCKS_BITS_MAX) {
 +				pr_err("%d is too large. Adjusting max_data_area_mb to global limit of %u\n",
 +				       tmpval,
 +				       TCMU_BLOCKS_TO_MBS(DATA_BLOCKS_BITS_MAX));
 +				udev->max_blocks = DATA_BLOCKS_BITS_MAX;
 +			}
++=======
+ 		case Opt_nl_reply_supported:
+ 			ret = match_int(&args[0], &udev->nl_reply_supported);
+ 			if (ret < 0)
+ 				pr_err("match_int() failed for nl_reply_supported=. Error %d.\n",
+ 				       ret);
+ 			break;
+ 		case Opt_max_data_area_mb:
+ 			ret = tcmu_set_max_blocks_param(udev, &args[0]);
++>>>>>>> b60cb1f80157 (scsi: tcmu: use match_int for dev params)
  			break;
  		default:
  			break;
* Unmerged path drivers/target/target_core_user.c
