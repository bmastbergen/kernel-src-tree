IB/uverbs: Use u64_to_user_ptr() not a union

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jason Gunthorpe <jgg@mellanox.com>
commit 2f36028ce98ef8e9c04809cc20b9dc498cc1a508
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2f36028c.failed

The union approach will get the endianness wrong sometimes if the kernel's
pointer size is 32 bits resulting in EFAULTs when trying to copy to/from
user.

	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit 2f36028ce98ef8e9c04809cc20b9dc498cc1a508)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_std_types.c
diff --cc drivers/infiniband/core/uverbs_std_types.c
index afd8b1cee88c,df1360e6774f..000000000000
--- a/drivers/infiniband/core/uverbs_std_types.c
+++ b/drivers/infiniband/core/uverbs_std_types.c
@@@ -238,17 -234,23 +238,36 @@@ static void create_udata(struct uverbs_
  		uverbs_attr_get(ctx, UVERBS_UHW_OUT);
  
  	if (!IS_ERR(uhw_in)) {
++<<<<<<< HEAD
 +		inbuf = uhw_in->ptr_attr.ptr;
 +		inbuf_len = uhw_in->ptr_attr.len;
 +	}
 +
 +	if (!IS_ERR(uhw_out)) {
 +		outbuf = uhw_out->ptr_attr.ptr;
 +		outbuf_len = uhw_out->ptr_attr.len;
++=======
+ 		udata->inlen = uhw_in->ptr_attr.len;
+ 		if (uverbs_attr_ptr_is_inline(uhw_in))
+ 			udata->inbuf = &uhw_in->uattr->data;
+ 		else
+ 			udata->inbuf = u64_to_user_ptr(uhw_in->ptr_attr.data);
+ 	} else {
+ 		udata->inbuf = NULL;
+ 		udata->inlen = 0;
+ 	}
+ 
+ 	if (!IS_ERR(uhw_out)) {
+ 		udata->outbuf = u64_to_user_ptr(uhw_out->ptr_attr.data);
+ 		udata->outlen = uhw_out->ptr_attr.len;
+ 	} else {
+ 		udata->outbuf = NULL;
+ 		udata->outlen = 0;
++>>>>>>> 2f36028ce98e (IB/uverbs: Use u64_to_user_ptr() not a union)
  	}
 +
 +	ib_uverbs_init_udata_buf_or_null(udata, inbuf, outbuf, inbuf_len,
 +					 outbuf_len);
  }
  
  static int uverbs_create_cq_handler(struct ib_device *ib_dev,
* Unmerged path drivers/infiniband/core/uverbs_std_types.c
diff --git a/include/rdma/uverbs_ioctl.h b/include/rdma/uverbs_ioctl.h
index 32cb14703914..38287d9d23a1 100644
--- a/include/rdma/uverbs_ioctl.h
+++ b/include/rdma/uverbs_ioctl.h
@@ -276,10 +276,7 @@ struct uverbs_object_tree_def {
  */
 
 struct uverbs_ptr_attr {
-	union {
-		u64		data;
-		void	__user *ptr;
-	};
+	u64		data;
 	u16		len;
 	/* Combination of bits from enum UVERBS_ATTR_F_XXXX */
 	u16		flags;
@@ -361,7 +358,7 @@ static inline int uverbs_copy_to(const struct uverbs_attr_bundle *attrs_bundle,
 		return PTR_ERR(attr);
 
 	min_size = min_t(size_t, attr->ptr_attr.len, size);
-	if (copy_to_user(attr->ptr_attr.ptr, from, min_size))
+	if (copy_to_user(u64_to_user_ptr(attr->ptr_attr.data), from, min_size))
 		return -EFAULT;
 
 	flags = attr->ptr_attr.flags | UVERBS_ATTR_F_VALID_OUTPUT;
@@ -396,7 +393,8 @@ static inline int _uverbs_copy_from(void *to,
 
 	if (uverbs_attr_ptr_is_inline(attr))
 		memcpy(to, &attr->ptr_attr.data, attr->ptr_attr.len);
-	else if (copy_from_user(to, attr->ptr_attr.ptr, attr->ptr_attr.len))
+	else if (copy_from_user(to, u64_to_user_ptr(attr->ptr_attr.data),
+				attr->ptr_attr.len))
 		return -EFAULT;
 
 	return 0;
