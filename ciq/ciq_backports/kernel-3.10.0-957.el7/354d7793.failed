sched/autogroup: Fix possible Spectre-v1 indexing for sched_prio_to_weight[]

jira LE-1907
cve CVE-2018-3693
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [kernel] autogroup: Fix possible Spectre-v1 indexing for sched_prio_to_weight (Lauro Ramos Venancio) [1589035] {CVE-2018-3693}
Rebuild_FUZZ: 94.44%
commit-author Peter Zijlstra <peterz@infradead.org>
commit 354d7793070611b4df5a79fbb0f12752d0ed0cc5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/354d7793.failed

> kernel/sched/autogroup.c:230 proc_sched_autogroup_set_nice() warn: potential spectre issue 'sched_prio_to_weight'

Userspace controls @nice, sanitize the array index.

	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: <stable@kernel.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 354d7793070611b4df5a79fbb0f12752d0ed0cc5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/auto_group.c
diff --cc kernel/sched/auto_group.c
index dad8ac08712e,2d4ff5353ded..000000000000
--- a/kernel/sched/auto_group.c
+++ b/kernel/sched/auto_group.c
@@@ -1,15 -1,11 +1,23 @@@
++<<<<<<< HEAD:kernel/sched/auto_group.c
 +#ifdef CONFIG_SCHED_AUTOGROUP
 +
++=======
+ // SPDX-License-Identifier: GPL-2.0
+ /*
+  * Auto-group scheduling implementation:
+  */
+ #include <linux/nospec.h>
++>>>>>>> 354d77930706 (sched/autogroup: Fix possible Spectre-v1 indexing for sched_prio_to_weight[]):kernel/sched/autogroup.c
  #include "sched.h"
  
 -unsigned int __read_mostly sysctl_sched_autogroup_enabled = 1;
 +#include <linux/proc_fs.h>
 +#include <linux/seq_file.h>
 +#include <linux/kallsyms.h>
 +#include <linux/utsname.h>
 +#include <linux/security.h>
 +#include <linux/export.h>
 +
 +unsigned int __read_mostly sysctl_sched_autogroup_enabled = 0;
  static struct autogroup autogroup_default;
  static atomic_t autogroup_seq_nr;
  
@@@ -218,9 -209,10 +226,14 @@@ int proc_sched_autogroup_set_nice(struc
  {
  	static unsigned long next = INITIAL_JIFFIES;
  	struct autogroup *ag;
++<<<<<<< HEAD:kernel/sched/auto_group.c
 +	int err;
++=======
+ 	unsigned long shares;
+ 	int err, idx;
++>>>>>>> 354d77930706 (sched/autogroup: Fix possible Spectre-v1 indexing for sched_prio_to_weight[]):kernel/sched/autogroup.c
  
 -	if (nice < MIN_NICE || nice > MAX_NICE)
 +	if (nice < -20 || nice > 19)
  		return -EINVAL;
  
  	err = security_task_setnice(current, nice);
@@@ -236,9 -228,12 +249,15 @@@
  
  	next = HZ / 10 + jiffies;
  	ag = autogroup_task_get(p);
++<<<<<<< HEAD:kernel/sched/auto_group.c
++=======
+ 
+ 	idx = array_index_nospec(nice + 20, 40);
+ 	shares = scale_load(sched_prio_to_weight[idx]);
++>>>>>>> 354d77930706 (sched/autogroup: Fix possible Spectre-v1 indexing for sched_prio_to_weight[]):kernel/sched/autogroup.c
  
  	down_write(&ag->lock);
 -	err = sched_group_set_shares(ag->tg, shares);
 +	err = sched_group_set_shares(ag->tg, prio_to_weight[nice + 20]);
  	if (!err)
  		ag->nice = nice;
  	up_write(&ag->lock);
* Unmerged path kernel/sched/auto_group.c
