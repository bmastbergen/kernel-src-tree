mmc: block: Factor out data preparation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mmc] block: Factor out data preparation (Gopal Tiwari) [1549495]
Rebuild_FUZZ: 93.15%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit ca5717f7ceef3c0aa76e2f77acb95ec3a93470c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ca5717f7.failed

Factor out data preparation into a separate function mmc_blk_data_prep()
which can be re-used for command queuing.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit ca5717f7ceef3c0aa76e2f77acb95ec3a93470c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/block.c
diff --cc drivers/mmc/core/block.c
index 7e5a07b52184,8273b078686d..000000000000
--- a/drivers/mmc/core/block.c
+++ b/drivers/mmc/core/block.c
@@@ -1554,42 -1603,14 +1594,46 @@@ static void mmc_blk_rw_rq_prep(struct m
  		brq->mrq.sbc = &brq->sbc;
  	}
  
++<<<<<<< HEAD
 +	mmc_set_data_timeout(&brq->data, card);
 +
 +	brq->data.sg = mqrq->sg;
 +	brq->data.sg_len = mmc_queue_map_sg(mq, mqrq);
 +
 +	/*
 +	 * Adjust the sg list so it is the same size as the
 +	 * request.
 +	 */
 +	if (brq->data.blocks != blk_rq_sectors(req)) {
 +		int i, data_size = brq->data.blocks << 9;
 +		struct scatterlist *sg;
 +
 +		for_each_sg(brq->data.sg, sg, brq->data.sg_len, i) {
 +			data_size -= sg->length;
 +			if (data_size <= 0) {
 +				sg->length += data_size;
 +				i++;
 +				break;
 +			}
 +		}
 +		brq->data.sg_len = i;
 +	}
 +
 +	mqrq->mmc_active.mrq = &brq->mrq;
 +	mqrq->mmc_active.err_check = mmc_blk_err_check;
 +
 +	mmc_queue_bounce_pre(mqrq);
++=======
+ 	mqrq->areq.err_check = mmc_blk_err_check;
++>>>>>>> ca5717f7ceef (mmc: block: Factor out data preparation)
  }
  
 -static bool mmc_blk_rw_cmd_err(struct mmc_blk_data *md, struct mmc_card *card,
 -			       struct mmc_blk_request *brq, struct request *req,
 -			       bool old_req_pending)
 +static int mmc_blk_cmd_err(struct mmc_blk_data *md, struct mmc_card *card,
 +			   struct mmc_blk_request *brq, struct request *req,
 +			   int ret)
  {
 -	bool req_pending;
 +	struct mmc_queue_req *mq_rq;
 +	mq_rq = container_of(brq, struct mmc_queue_req, brq);
  
  	/*
  	 * If this is an SD card and we're writing, we can first
* Unmerged path drivers/mmc/core/block.c
