mm: rename deactivate_page to deactivate_file_page

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mm] rename deactivate_page to deactivate_file_page (Rafael Aquini) [1562137]
Rebuild_FUZZ: 95.83%
commit-author Minchan Kim <minchan@kernel.org>
commit cc5993bd7b8cff4a3e37042ee1358d1d5eafa70c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/cc5993bd.failed

"deactivate_page" was created for file invalidation so it has too
specific logic for file-backed pages.  So, let's change the name of the
function and date to a file-specific one and yield the generic name.

	Signed-off-by: Minchan Kim <minchan@kernel.org>
	Cc: Michal Hocko <mhocko@suse.cz>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Mel Gorman <mgorman@suse.de>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Shaohua Li <shli@kernel.org>
	Cc: Wang, Yalin <Yalin.Wang@sonymobile.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit cc5993bd7b8cff4a3e37042ee1358d1d5eafa70c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swap.c
diff --cc mm/swap.c
index 0982a35a295b,e3a4feac9b0e..000000000000
--- a/mm/swap.c
+++ b/mm/swap.c
@@@ -792,11 -836,11 +792,17 @@@ void deactivate_file_page(struct page *
  		return;
  
  	if (likely(get_page_unless_zero(page))) {
- 		struct pagevec *pvec = &get_cpu_var(lru_deactivate_pvecs);
+ 		struct pagevec *pvec = &get_cpu_var(lru_deactivate_file_pvecs);
  
++<<<<<<< HEAD
 +		if (!pagevec_add(pvec, page) || PageCompound(page))
 +			pagevec_lru_move_fn(pvec, lru_deactivate_fn, NULL);
 +		put_cpu_var(lru_deactivate_pvecs);
++=======
+ 		if (!pagevec_add(pvec, page))
+ 			pagevec_lru_move_fn(pvec, lru_deactivate_file_fn, NULL);
+ 		put_cpu_var(lru_deactivate_file_pvecs);
++>>>>>>> cc5993bd7b8c (mm: rename deactivate_page to deactivate_file_page)
  	}
  }
  
@@@ -846,10 -872,10 +852,10 @@@ void lru_add_drain_all(void
  
  		if (pagevec_count(&per_cpu(lru_add_pvec, cpu)) ||
  		    pagevec_count(&per_cpu(lru_rotate_pvecs, cpu)) ||
- 		    pagevec_count(&per_cpu(lru_deactivate_pvecs, cpu)) ||
+ 		    pagevec_count(&per_cpu(lru_deactivate_file_pvecs, cpu)) ||
  		    need_activate_page_drain(cpu)) {
  			INIT_WORK(work, lru_add_drain_per_cpu);
 -			schedule_work_on(cpu, work);
 +			queue_work_on(cpu, lru_add_drain_wq, work);
  			cpumask_set_cpu(cpu, &has_work);
  		}
  	}
diff --git a/include/linux/swap.h b/include/linux/swap.h
index ae5381ca9f30..0ac61eb0d545 100644
--- a/include/linux/swap.h
+++ b/include/linux/swap.h
@@ -345,7 +345,7 @@ extern void lru_add_drain(void);
 extern void lru_add_drain_cpu(int cpu);
 extern void lru_add_drain_all(void);
 extern void rotate_reclaimable_page(struct page *page);
-extern void deactivate_page(struct page *page);
+extern void deactivate_file_page(struct page *page);
 extern void swap_setup(void);
 
 extern void add_page_to_unevictable_list(struct page *page);
* Unmerged path mm/swap.c
diff --git a/mm/truncate.c b/mm/truncate.c
index 467f3f43180f..f53aecf58e60 100644
--- a/mm/truncate.c
+++ b/mm/truncate.c
@@ -589,7 +589,7 @@ unsigned long invalidate_mapping_pages(struct address_space *mapping,
 			 * of interest and try to speed up its reclaim.
 			 */
 			if (!ret)
-				deactivate_page(page);
+				deactivate_file_page(page);
 			count += ret;
 		}
 		pagevec_remove_exceptionals(&pvec);
