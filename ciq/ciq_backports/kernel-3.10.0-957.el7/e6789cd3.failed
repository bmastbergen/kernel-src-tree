uio: Simplify uio error path by using devres functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [uio] Simplify uio error path by using devres functions (Xiubo Li) [1560418]
Rebuild_FUZZ: 95.15%
commit-author Michal Simek <michal.simek@xilinx.com>
commit e6789cd3dfb553077606ccafeb05e0043f072481
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e6789cd3.failed

Using devres functions simplify driver error path.
- Use devm_kzalloc
- Use devm_request_irq

	Signed-off-by: Michal Simek <michal.simek@xilinx.com>
	Reviewed-by: Pavel Machek <pavel@ucw.cz>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit e6789cd3dfb553077606ccafeb05e0043f072481)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/uio/uio_pdrv_genirq.c
diff --cc drivers/uio/uio_pdrv_genirq.c
index c122bca669b6,76669313e9a7..000000000000
--- a/drivers/uio/uio_pdrv_genirq.c
+++ b/drivers/uio/uio_pdrv_genirq.c
@@@ -103,14 -111,12 +103,18 @@@ static int uio_pdrv_genirq_probe(struc
  	int i;
  
  	if (pdev->dev.of_node) {
 +		int irq;
 +
  		/* alloc uioinfo for one device */
- 		uioinfo = kzalloc(sizeof(*uioinfo), GFP_KERNEL);
+ 		uioinfo = devm_kzalloc(&pdev->dev, sizeof(*uioinfo),
+ 				       GFP_KERNEL);
  		if (!uioinfo) {
- 			ret = -ENOMEM;
  			dev_err(&pdev->dev, "unable to kmalloc\n");
++<<<<<<< HEAD
 +			goto bad2;
++=======
+ 			return -ENOMEM;
++>>>>>>> e6789cd3dfb5 (uio: Simplify uio error path by using devres functions)
  		}
  		uioinfo->name = pdev->dev.of_node->name;
  		uioinfo->version = "devicetree";
@@@ -148,12 -147,15 +151,16 @@@
  
  	if (!uioinfo->irq) {
  		ret = platform_get_irq(pdev, 0);
 -		uioinfo->irq = ret;
 -		if (ret == -ENXIO && pdev->dev.of_node)
 -			uioinfo->irq = UIO_IRQ_NONE;
 -		else if (ret < 0) {
 +		if (ret < 0) {
  			dev_err(&pdev->dev, "failed to get IRQ\n");
++<<<<<<< HEAD
 +			goto bad0;
++=======
+ 			return ret;
++>>>>>>> e6789cd3dfb5 (uio: Simplify uio error path by using devres functions)
  		}
 +		uioinfo->irq = ret;
  	}
 -
  	uiomem = &uioinfo->mem[0];
  
  	for (i = 0; i < pdev->num_resources; ++i) {
@@@ -206,20 -208,12 +213,28 @@@
  	ret = uio_register_device(&pdev->dev, priv->uioinfo);
  	if (ret) {
  		dev_err(&pdev->dev, "unable to register uio device\n");
++<<<<<<< HEAD
 +		goto bad1;
++=======
+ 		pm_runtime_disable(&pdev->dev);
+ 		return ret;
++>>>>>>> e6789cd3dfb5 (uio: Simplify uio error path by using devres functions)
  	}
  
  	platform_set_drvdata(pdev, priv);
  	return 0;
++<<<<<<< HEAD
 + bad1:
 +	kfree(priv);
 +	pm_runtime_disable(&pdev->dev);
 + bad0:
 +	/* kfree uioinfo for OF */
 +	if (pdev->dev.of_node)
 +		kfree(uioinfo);
 + bad2:
 +	return ret;
++=======
++>>>>>>> e6789cd3dfb5 (uio: Simplify uio error path by using devres functions)
  }
  
  static int uio_pdrv_genirq_remove(struct platform_device *pdev)
diff --git a/drivers/uio/uio.c b/drivers/uio/uio.c
index 66374682b73b..107ba62d7be7 100644
--- a/drivers/uio/uio.c
+++ b/drivers/uio/uio.c
@@ -808,10 +808,9 @@ int __uio_register_device(struct module *owner,
 
 	info->uio_dev = NULL;
 
-	idev = kzalloc(sizeof(*idev), GFP_KERNEL);
+	idev = devm_kzalloc(parent, sizeof(*idev), GFP_KERNEL);
 	if (!idev) {
-		ret = -ENOMEM;
-		goto err_kzalloc;
+		return -ENOMEM;
 	}
 
 	idev->owner = owner;
@@ -821,7 +820,7 @@ int __uio_register_device(struct module *owner,
 
 	ret = uio_get_minor(idev);
 	if (ret)
-		goto err_get_minor;
+		return ret;
 
 	idev->dev = device_create(&uio_class, parent,
 				  MKDEV(uio_major, idev->minor), idev,
@@ -839,7 +838,7 @@ int __uio_register_device(struct module *owner,
 	info->uio_dev = idev;
 
 	if (info->irq && (info->irq != UIO_IRQ_CUSTOM)) {
-		ret = request_irq(info->irq, uio_interrupt,
+		ret = devm_request_irq(parent, info->irq, uio_interrupt,
 				  info->irq_flags, info->name, idev);
 		if (ret)
 			goto err_request_irq;
@@ -853,9 +852,6 @@ err_uio_dev_add_attributes:
 	device_destroy(&uio_class, MKDEV(uio_major, idev->minor));
 err_device_create:
 	uio_free_minor(idev);
-err_get_minor:
-	kfree(idev);
-err_kzalloc:
 	return ret;
 }
 EXPORT_SYMBOL_GPL(__uio_register_device);
@@ -876,13 +872,9 @@ void uio_unregister_device(struct uio_info *info)
 
 	uio_free_minor(idev);
 
-	if (info->irq && (info->irq != UIO_IRQ_CUSTOM))
-		free_irq(info->irq, idev);
-
 	uio_dev_del_attributes(idev);
 
 	device_destroy(&uio_class, MKDEV(uio_major, idev->minor));
-	kfree(idev);
 
 	return;
 }
* Unmerged path drivers/uio/uio_pdrv_genirq.c
