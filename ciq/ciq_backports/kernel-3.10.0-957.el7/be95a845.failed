bpf: avoid false sharing of map refcount with max_entries

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit be95a845cc4402272994ce290e3ad928aff06cb9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/be95a845.failed

In addition to commit b2157399cc98 ("bpf: prevent out-of-bounds
speculation") also change the layout of struct bpf_map such that
false sharing of fast-path members like max_entries is avoided
when the maps reference counter is altered. Therefore enforce
them to be placed into separate cachelines.

pahole dump after change:

  struct bpf_map {
        const struct bpf_map_ops  * ops;                 /*     0     8 */
        struct bpf_map *           inner_map_meta;       /*     8     8 */
        void *                     security;             /*    16     8 */
        enum bpf_map_type          map_type;             /*    24     4 */
        u32                        key_size;             /*    28     4 */
        u32                        value_size;           /*    32     4 */
        u32                        max_entries;          /*    36     4 */
        u32                        map_flags;            /*    40     4 */
        u32                        pages;                /*    44     4 */
        u32                        id;                   /*    48     4 */
        int                        numa_node;            /*    52     4 */
        bool                       unpriv_array;         /*    56     1 */

        /* XXX 7 bytes hole, try to pack */

        /* --- cacheline 1 boundary (64 bytes) --- */
        struct user_struct *       user;                 /*    64     8 */
        atomic_t                   refcnt;               /*    72     4 */
        atomic_t                   usercnt;              /*    76     4 */
        struct work_struct         work;                 /*    80    32 */
        char                       name[16];             /*   112    16 */
        /* --- cacheline 2 boundary (128 bytes) --- */

        /* size: 128, cachelines: 2, members: 17 */
        /* sum members: 121, holes: 1, sum holes: 7 */
  };

Now all entries in the first cacheline are read only throughout
the life time of the map, set up once during map creation. Overall
struct size and number of cachelines doesn't change from the
reordering. struct bpf_map is usually first member and embedded
in map structs in specific map implementations, so also avoid those
members to sit at the end where it could potentially share the
cacheline with first map values e.g. in the array since remote
CPUs could trigger map updates just as well for those (easily
dirtying members like max_entries intentionally as well) while
having subsequent values in cache.

Quoting from Google's Project Zero blog [1]:

  Additionally, at least on the Intel machine on which this was
  tested, bouncing modified cache lines between cores is slow,
  apparently because the MESI protocol is used for cache coherence
  [8]. Changing the reference counter of an eBPF array on one
  physical CPU core causes the cache line containing the reference
  counter to be bounced over to that CPU core, making reads of the
  reference counter on all other CPU cores slow until the changed
  reference counter has been written back to memory. Because the
  length and the reference counter of an eBPF array are stored in
  the same cache line, this also means that changing the reference
  counter on one physical CPU core causes reads of the eBPF array's
  length to be slow on other physical CPU cores (intentional false
  sharing).

While this doesn't 'control' the out-of-bounds speculation through
masking the index as in commit b2157399cc98, triggering a manipulation
of the map's reference counter is really trivial, so lets not allow
to easily affect max_entries from it.

Splitting to separate cachelines also generally makes sense from
a performance perspective anyway in that fast-path won't have a
cache miss if the map gets pinned, reused in other progs, etc out
of control path, thus also avoids unintentional false sharing.

  [1] https://googleprojectzero.blogspot.ch/2018/01/reading-privileged-memory-with-side.html

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
(cherry picked from commit be95a845cc4402272994ce290e3ad928aff06cb9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
diff --cc include/linux/bpf.h
index d4c1f9049ad3,fe2cb7c398e3..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -32,19 -55,434 +39,37 @@@ struct bpf_map 
  	u32 key_size;
  	u32 value_size;
  	u32 max_entries;
++<<<<<<< HEAD
 +	struct bpf_map_ops *ops;
 +	struct work_struct work;
++=======
+ 	u32 map_flags;
+ 	u32 pages;
+ 	u32 id;
+ 	int numa_node;
+ 	bool unpriv_array;
+ 	/* 7 bytes hole */
+ 
+ 	/* 2nd cacheline with misc members to avoid false sharing
+ 	 * particularly with refcounting.
+ 	 */
+ 	struct user_struct *user ____cacheline_aligned;
+ 	atomic_t refcnt;
+ 	atomic_t usercnt;
+ 	struct work_struct work;
+ 	char name[BPF_OBJ_NAME_LEN];
++>>>>>>> be95a845cc44 (bpf: avoid false sharing of map refcount with max_entries)
  };
  
 -/* function argument constraints */
 -enum bpf_arg_type {
 -	ARG_DONTCARE = 0,	/* unused argument in helper function */
 -
 -	/* the following constraints used to prototype
 -	 * bpf_map_lookup/update/delete_elem() functions
 -	 */
 -	ARG_CONST_MAP_PTR,	/* const argument used as pointer to bpf_map */
 -	ARG_PTR_TO_MAP_KEY,	/* pointer to stack used as map key */
 -	ARG_PTR_TO_MAP_VALUE,	/* pointer to stack used as map value */
 -
 -	/* the following constraints used to prototype bpf_memcmp() and other
 -	 * functions that access data on eBPF program stack
 -	 */
 -	ARG_PTR_TO_MEM,		/* pointer to valid memory (stack, packet, map value) */
 -	ARG_PTR_TO_MEM_OR_NULL, /* pointer to valid memory or NULL */
 -	ARG_PTR_TO_UNINIT_MEM,	/* pointer to memory does not need to be initialized,
 -				 * helper function must fill all bytes or clear
 -				 * them in error case.
 -				 */
 -
 -	ARG_CONST_SIZE,		/* number of bytes accessed from memory */
 -	ARG_CONST_SIZE_OR_ZERO,	/* number of bytes accessed from memory or 0 */
 -
 -	ARG_PTR_TO_CTX,		/* pointer to context */
 -	ARG_ANYTHING,		/* any (initialized) argument is ok */
 -};
 -
 -/* type of values returned from helper functions */
 -enum bpf_return_type {
 -	RET_INTEGER,			/* function returns integer */
 -	RET_VOID,			/* function doesn't return anything */
 -	RET_PTR_TO_MAP_VALUE_OR_NULL,	/* returns a pointer to map elem value or NULL */
 +struct bpf_map_type_list {
 +	struct list_head list_node;
 +	struct bpf_map_ops *ops;
 +	enum bpf_map_type type;
  };
  
 -/* eBPF function prototype used by verifier to allow BPF_CALLs from eBPF programs
 - * to in-kernel helper functions and for adjusting imm32 field in BPF_CALL
 - * instructions after verifying
 - */
 -struct bpf_func_proto {
 -	u64 (*func)(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
 -	bool gpl_only;
 -	bool pkt_access;
 -	enum bpf_return_type ret_type;
 -	enum bpf_arg_type arg1_type;
 -	enum bpf_arg_type arg2_type;
 -	enum bpf_arg_type arg3_type;
 -	enum bpf_arg_type arg4_type;
 -	enum bpf_arg_type arg5_type;
 -};
 -
 -/* bpf_context is intentionally undefined structure. Pointer to bpf_context is
 - * the first argument to eBPF programs.
 - * For socket filters: 'struct bpf_context *' == 'struct sk_buff *'
 - */
 -struct bpf_context;
 -
 -enum bpf_access_type {
 -	BPF_READ = 1,
 -	BPF_WRITE = 2
 -};
 -
 -/* types of values stored in eBPF registers */
 -/* Pointer types represent:
 - * pointer
 - * pointer + imm
 - * pointer + (u16) var
 - * pointer + (u16) var + imm
 - * if (range > 0) then [ptr, ptr + range - off) is safe to access
 - * if (id > 0) means that some 'var' was added
 - * if (off > 0) means that 'imm' was added
 - */
 -enum bpf_reg_type {
 -	NOT_INIT = 0,		 /* nothing was written into register */
 -	SCALAR_VALUE,		 /* reg doesn't contain a valid pointer */
 -	PTR_TO_CTX,		 /* reg points to bpf_context */
 -	CONST_PTR_TO_MAP,	 /* reg points to struct bpf_map */
 -	PTR_TO_MAP_VALUE,	 /* reg points to map element value */
 -	PTR_TO_MAP_VALUE_OR_NULL,/* points to map elem value or NULL */
 -	PTR_TO_STACK,		 /* reg == frame_pointer + offset */
 -	PTR_TO_PACKET_META,	 /* skb->data - meta_len */
 -	PTR_TO_PACKET,		 /* reg points to skb->data */
 -	PTR_TO_PACKET_END,	 /* skb->data + headlen */
 -};
 -
 -/* The information passed from prog-specific *_is_valid_access
 - * back to the verifier.
 - */
 -struct bpf_insn_access_aux {
 -	enum bpf_reg_type reg_type;
 -	int ctx_field_size;
 -};
 -
 -static inline void
 -bpf_ctx_record_field_size(struct bpf_insn_access_aux *aux, u32 size)
 -{
 -	aux->ctx_field_size = size;
 -}
 -
 -struct bpf_prog_ops {
 -	int (*test_run)(struct bpf_prog *prog, const union bpf_attr *kattr,
 -			union bpf_attr __user *uattr);
 -};
 -
 -struct bpf_verifier_ops {
 -	/* return eBPF function prototype for verification */
 -	const struct bpf_func_proto *(*get_func_proto)(enum bpf_func_id func_id);
 -
 -	/* return true if 'size' wide access at offset 'off' within bpf_context
 -	 * with 'type' (read or write) is allowed
 -	 */
 -	bool (*is_valid_access)(int off, int size, enum bpf_access_type type,
 -				struct bpf_insn_access_aux *info);
 -	int (*gen_prologue)(struct bpf_insn *insn, bool direct_write,
 -			    const struct bpf_prog *prog);
 -	u32 (*convert_ctx_access)(enum bpf_access_type type,
 -				  const struct bpf_insn *src,
 -				  struct bpf_insn *dst,
 -				  struct bpf_prog *prog, u32 *target_size);
 -};
 -
 -struct bpf_dev_offload {
 -	struct bpf_prog		*prog;
 -	struct net_device	*netdev;
 -	void			*dev_priv;
 -	struct list_head	offloads;
 -	bool			dev_state;
 -	bool			verifier_running;
 -	wait_queue_head_t	verifier_done;
 -};
 -
 -struct bpf_prog_aux {
 -	atomic_t refcnt;
 -	u32 used_map_cnt;
 -	u32 max_ctx_offset;
 -	u32 stack_depth;
 -	u32 id;
 -	struct latch_tree_node ksym_tnode;
 -	struct list_head ksym_lnode;
 -	const struct bpf_prog_ops *ops;
 -	struct bpf_map **used_maps;
 -	struct bpf_prog *prog;
 -	struct user_struct *user;
 -	u64 load_time; /* ns since boottime */
 -	char name[BPF_OBJ_NAME_LEN];
 -#ifdef CONFIG_SECURITY
 -	void *security;
 -#endif
 -	struct bpf_dev_offload *offload;
 -	union {
 -		struct work_struct work;
 -		struct rcu_head	rcu;
 -	};
 -};
 -
 -struct bpf_array {
 -	struct bpf_map map;
 -	u32 elem_size;
 -	u32 index_mask;
 -	/* 'ownership' of prog_array is claimed by the first program that
 -	 * is going to use this map or by the first program which FD is stored
 -	 * in the map to make sure that all callers and callees have the same
 -	 * prog_type and JITed flag
 -	 */
 -	enum bpf_prog_type owner_prog_type;
 -	bool owner_jited;
 -	union {
 -		char value[0] __aligned(8);
 -		void *ptrs[0] __aligned(8);
 -		void __percpu *pptrs[0] __aligned(8);
 -	};
 -};
 -
 -#define MAX_TAIL_CALL_CNT 32
 -
 -struct bpf_event_entry {
 -	struct perf_event *event;
 -	struct file *perf_file;
 -	struct file *map_file;
 -	struct rcu_head rcu;
 -};
 -
 -bool bpf_prog_array_compatible(struct bpf_array *array, const struct bpf_prog *fp);
 -int bpf_prog_calc_tag(struct bpf_prog *fp);
 -
 -const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
 -
 -typedef unsigned long (*bpf_ctx_copy_t)(void *dst, const void *src,
 -					unsigned long off, unsigned long len);
 -
 -u64 bpf_event_output(struct bpf_map *map, u64 flags, void *meta, u64 meta_size,
 -		     void *ctx, u64 ctx_size, bpf_ctx_copy_t ctx_copy);
 -
 -int bpf_prog_test_run_xdp(struct bpf_prog *prog, const union bpf_attr *kattr,
 -			  union bpf_attr __user *uattr);
 -int bpf_prog_test_run_skb(struct bpf_prog *prog, const union bpf_attr *kattr,
 -			  union bpf_attr __user *uattr);
 -
 -/* an array of programs to be executed under rcu_lock.
 - *
 - * Typical usage:
 - * ret = BPF_PROG_RUN_ARRAY(&bpf_prog_array, ctx, BPF_PROG_RUN);
 - *
 - * the structure returned by bpf_prog_array_alloc() should be populated
 - * with program pointers and the last pointer must be NULL.
 - * The user has to keep refcnt on the program and make sure the program
 - * is removed from the array before bpf_prog_put().
 - * The 'struct bpf_prog_array *' should only be replaced with xchg()
 - * since other cpus are walking the array of pointers in parallel.
 - */
 -struct bpf_prog_array {
 -	struct rcu_head rcu;
 -	struct bpf_prog *progs[0];
 -};
 -
 -struct bpf_prog_array __rcu *bpf_prog_array_alloc(u32 prog_cnt, gfp_t flags);
 -void bpf_prog_array_free(struct bpf_prog_array __rcu *progs);
 -int bpf_prog_array_length(struct bpf_prog_array __rcu *progs);
 -int bpf_prog_array_copy_to_user(struct bpf_prog_array __rcu *progs,
 -				__u32 __user *prog_ids, u32 cnt);
 -
 -void bpf_prog_array_delete_safe(struct bpf_prog_array __rcu *progs,
 -				struct bpf_prog *old_prog);
 -int bpf_prog_array_copy(struct bpf_prog_array __rcu *old_array,
 -			struct bpf_prog *exclude_prog,
 -			struct bpf_prog *include_prog,
 -			struct bpf_prog_array **new_array);
 -
 -#define __BPF_PROG_RUN_ARRAY(array, ctx, func, check_non_null)	\
 -	({						\
 -		struct bpf_prog **_prog, *__prog;	\
 -		struct bpf_prog_array *_array;		\
 -		u32 _ret = 1;				\
 -		rcu_read_lock();			\
 -		_array = rcu_dereference(array);	\
 -		if (unlikely(check_non_null && !_array))\
 -			goto _out;			\
 -		_prog = _array->progs;			\
 -		while ((__prog = READ_ONCE(*_prog))) {	\
 -			_ret &= func(__prog, ctx);	\
 -			_prog++;			\
 -		}					\
 -_out:							\
 -		rcu_read_unlock();			\
 -		_ret;					\
 -	 })
 -
 -#define BPF_PROG_RUN_ARRAY(array, ctx, func)		\
 -	__BPF_PROG_RUN_ARRAY(array, ctx, func, false)
 -
 -#define BPF_PROG_RUN_ARRAY_CHECK(array, ctx, func)	\
 -	__BPF_PROG_RUN_ARRAY(array, ctx, func, true)
 -
 -#ifdef CONFIG_BPF_SYSCALL
 -DECLARE_PER_CPU(int, bpf_prog_active);
 -
 -extern const struct file_operations bpf_map_fops;
 -extern const struct file_operations bpf_prog_fops;
 -
 -#define BPF_PROG_TYPE(_id, _name) \
 -	extern const struct bpf_prog_ops _name ## _prog_ops; \
 -	extern const struct bpf_verifier_ops _name ## _verifier_ops;
 -#define BPF_MAP_TYPE(_id, _ops) \
 -	extern const struct bpf_map_ops _ops;
 -#include <linux/bpf_types.h>
 -#undef BPF_PROG_TYPE
 -#undef BPF_MAP_TYPE
 -
 -extern const struct bpf_prog_ops bpf_offload_prog_ops;
 -extern const struct bpf_verifier_ops tc_cls_act_analyzer_ops;
 -extern const struct bpf_verifier_ops xdp_analyzer_ops;
 -
 -struct bpf_prog *bpf_prog_get(u32 ufd);
 -struct bpf_prog *bpf_prog_get_type_dev(u32 ufd, enum bpf_prog_type type,
 -				       bool attach_drv);
 -struct bpf_prog * __must_check bpf_prog_add(struct bpf_prog *prog, int i);
 -void bpf_prog_sub(struct bpf_prog *prog, int i);
 -struct bpf_prog * __must_check bpf_prog_inc(struct bpf_prog *prog);
 -struct bpf_prog * __must_check bpf_prog_inc_not_zero(struct bpf_prog *prog);
 -void bpf_prog_put(struct bpf_prog *prog);
 -int __bpf_prog_charge(struct user_struct *user, u32 pages);
 -void __bpf_prog_uncharge(struct user_struct *user, u32 pages);
 -
 -struct bpf_map *bpf_map_get_with_uref(u32 ufd);
 -struct bpf_map *__bpf_map_get(struct fd f);
 -struct bpf_map * __must_check bpf_map_inc(struct bpf_map *map, bool uref);
 -void bpf_map_put_with_uref(struct bpf_map *map);
 -void bpf_map_put(struct bpf_map *map);
 -int bpf_map_precharge_memlock(u32 pages);
 -void *bpf_map_area_alloc(size_t size, int numa_node);
 -void bpf_map_area_free(void *base);
 -
 -extern int sysctl_unprivileged_bpf_disabled;
 -
 -int bpf_map_new_fd(struct bpf_map *map, int flags);
 -int bpf_prog_new_fd(struct bpf_prog *prog);
 -
 -int bpf_obj_pin_user(u32 ufd, const char __user *pathname);
 -int bpf_obj_get_user(const char __user *pathname, int flags);
 -
 -int bpf_percpu_hash_copy(struct bpf_map *map, void *key, void *value);
 -int bpf_percpu_array_copy(struct bpf_map *map, void *key, void *value);
 -int bpf_percpu_hash_update(struct bpf_map *map, void *key, void *value,
 -			   u64 flags);
 -int bpf_percpu_array_update(struct bpf_map *map, void *key, void *value,
 -			    u64 flags);
 -
 -int bpf_stackmap_copy(struct bpf_map *map, void *key, void *value);
 -
 -int bpf_fd_array_map_update_elem(struct bpf_map *map, struct file *map_file,
 -				 void *key, void *value, u64 map_flags);
 -int bpf_fd_array_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);
 -void bpf_fd_array_map_clear(struct bpf_map *map);
 -int bpf_fd_htab_map_update_elem(struct bpf_map *map, struct file *map_file,
 -				void *key, void *value, u64 map_flags);
 -int bpf_fd_htab_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);
 +void bpf_register_map_type(struct bpf_map_type_list *tl);
  
 -int bpf_get_file_flag(int flags);
 -
 -/* memcpy that is used with 8-byte aligned pointers, power-of-8 size and
 - * forced to use 'long' read/writes to try to atomically copy long counters.
 - * Best-effort only.  No barriers here, since it _will_ race with concurrent
 - * updates from BPF programs. Called from bpf syscall and mostly used with
 - * size 8 or 16 bytes, so ask compiler to inline it.
 - */
 -static inline void bpf_long_memcpy(void *dst, const void *src, u32 size)
 -{
 -	const long *lsrc = src;
 -	long *ldst = dst;
 -
 -	size /= sizeof(long);
 -	while (size--)
 -		*ldst++ = *lsrc++;
 -}
 -
 -/* verify correctness of eBPF program */
 -int bpf_check(struct bpf_prog **fp, union bpf_attr *attr);
 -
 -/* Map specifics */
 -struct net_device  *__dev_map_lookup_elem(struct bpf_map *map, u32 key);
 -void __dev_map_insert_ctx(struct bpf_map *map, u32 index);
 -void __dev_map_flush(struct bpf_map *map);
 -
 -struct bpf_cpu_map_entry *__cpu_map_lookup_elem(struct bpf_map *map, u32 key);
 -void __cpu_map_insert_ctx(struct bpf_map *map, u32 index);
 -void __cpu_map_flush(struct bpf_map *map);
 -struct xdp_buff;
 -int cpu_map_enqueue(struct bpf_cpu_map_entry *rcpu, struct xdp_buff *xdp,
 -		    struct net_device *dev_rx);
 -
 -/* Return map's numa specified by userspace */
 -static inline int bpf_map_attr_numa_node(const union bpf_attr *attr)
 -{
 -	return (attr->map_flags & BPF_F_NUMA_NODE) ?
 -		attr->numa_node : NUMA_NO_NODE;
 -}
 -
 -#else /* !CONFIG_BPF_SYSCALL */
  static inline struct bpf_prog *bpf_prog_get(u32 ufd)
 -{
 -	return ERR_PTR(-EOPNOTSUPP);
 -}
 -
 -static inline struct bpf_prog *bpf_prog_get_type_dev(u32 ufd,
 -						     enum bpf_prog_type type,
 -						     bool attach_drv)
 -{
 -	return ERR_PTR(-EOPNOTSUPP);
 -}
 -
 -static inline struct bpf_prog * __must_check bpf_prog_add(struct bpf_prog *prog,
 -							  int i)
 -{
 -	return ERR_PTR(-EOPNOTSUPP);
 -}
 -
 -static inline void bpf_prog_sub(struct bpf_prog *prog, int i)
 -{
 -}
 -
 -static inline void bpf_prog_put(struct bpf_prog *prog)
 -{
 -}
 -
 -static inline struct bpf_prog * __must_check bpf_prog_inc(struct bpf_prog *prog)
 -{
 -	return ERR_PTR(-EOPNOTSUPP);
 -}
 -
 -static inline struct bpf_prog *__must_check
 -bpf_prog_inc_not_zero(struct bpf_prog *prog)
 -{
 -	return ERR_PTR(-EOPNOTSUPP);
 -}
 -
 -static inline int __bpf_prog_charge(struct user_struct *user, u32 pages)
 -{
 -	return 0;
 -}
 -
 -static inline void __bpf_prog_uncharge(struct user_struct *user, u32 pages)
 -{
 -}
 -
 -static inline int bpf_obj_get_user(const char __user *pathname, int flags)
 -{
 -	return -EOPNOTSUPP;
 -}
 -
 -static inline struct net_device  *__dev_map_lookup_elem(struct bpf_map *map,
 -						       u32 key)
  {
  	return NULL;
  }
* Unmerged path include/linux/bpf.h
