mmc: core: Export a few functions needed for blkmq support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mmc] core: Export a few functions needed for blkmq support (Gopal Tiwari) [1456570]
Rebuild_FUZZ: 95.50%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit cb39f61e9b1e675c8df86df69d53f08334b34077
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/cb39f61e.failed

The following functions are needed by the mmc block device driver, once it
converts to blkmq, therefore let's export them.

mmc_start_bkops()
mmc_start_request()
mmc_retune_hold_now()
mmc_retune_release()

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
(cherry picked from commit cb39f61e9b1e675c8df86df69d53f08334b34077)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/core/core.h
#	drivers/mmc/core/host.h
#	drivers/mmc/core/mmc_ops.c
diff --cc drivers/mmc/core/core.h
index 35a7b00a282b,51a160762784..000000000000
--- a/drivers/mmc/core/core.h
+++ b/drivers/mmc/core/core.h
@@@ -98,5 -104,51 +98,55 @@@ static inline void mmc_register_pm_noti
  static inline void mmc_unregister_pm_notifier(struct mmc_host *host) { }
  #endif
  
++<<<<<<< HEAD
++=======
+ void mmc_wait_for_req_done(struct mmc_host *host, struct mmc_request *mrq);
+ bool mmc_is_req_done(struct mmc_host *host, struct mmc_request *mrq);
+ 
+ int mmc_start_request(struct mmc_host *host, struct mmc_request *mrq);
+ 
+ struct mmc_async_req;
+ 
+ struct mmc_async_req *mmc_start_areq(struct mmc_host *host,
+ 				     struct mmc_async_req *areq,
+ 				     enum mmc_blk_status *ret_stat);
+ 
+ int mmc_erase(struct mmc_card *card, unsigned int from, unsigned int nr,
+ 		unsigned int arg);
+ int mmc_can_erase(struct mmc_card *card);
+ int mmc_can_trim(struct mmc_card *card);
+ int mmc_can_discard(struct mmc_card *card);
+ int mmc_can_sanitize(struct mmc_card *card);
+ int mmc_can_secure_erase_trim(struct mmc_card *card);
+ int mmc_erase_group_aligned(struct mmc_card *card, unsigned int from,
+ 			unsigned int nr);
+ unsigned int mmc_calc_max_discard(struct mmc_card *card);
+ 
+ int mmc_set_blocklen(struct mmc_card *card, unsigned int blocklen);
+ int mmc_set_blockcount(struct mmc_card *card, unsigned int blockcount,
+ 			bool is_rel_write);
+ 
+ int __mmc_claim_host(struct mmc_host *host, struct mmc_ctx *ctx,
+ 		     atomic_t *abort);
+ void mmc_release_host(struct mmc_host *host);
+ void mmc_get_card(struct mmc_card *card, struct mmc_ctx *ctx);
+ void mmc_put_card(struct mmc_card *card, struct mmc_ctx *ctx);
+ 
+ /**
+  *	mmc_claim_host - exclusively claim a host
+  *	@host: mmc host to claim
+  *
+  *	Claim a host for a set of operations.
+  */
+ static inline void mmc_claim_host(struct mmc_host *host)
+ {
+ 	__mmc_claim_host(host, NULL, NULL);
+ }
+ 
+ int mmc_cqe_start_req(struct mmc_host *host, struct mmc_request *mrq);
+ void mmc_cqe_post_req(struct mmc_host *host, struct mmc_request *mrq);
+ int mmc_cqe_recovery(struct mmc_host *host);
+ 
++>>>>>>> cb39f61e9b1e (mmc: core: Export a few functions needed for blkmq support)
  #endif
 +
diff --cc drivers/mmc/core/host.h
index 5e9a1293091b,fb689a1065ed..000000000000
--- a/drivers/mmc/core/host.h
+++ b/drivers/mmc/core/host.h
@@@ -18,9 -19,61 +18,64 @@@ void mmc_unregister_host_class(void)
  void mmc_retune_enable(struct mmc_host *host);
  void mmc_retune_disable(struct mmc_host *host);
  void mmc_retune_hold(struct mmc_host *host);
- void mmc_retune_hold_now(struct mmc_host *host);
  void mmc_retune_release(struct mmc_host *host);
  int mmc_retune(struct mmc_host *host);
++<<<<<<< HEAD
++=======
+ void mmc_retune_pause(struct mmc_host *host);
+ void mmc_retune_unpause(struct mmc_host *host);
+ 
+ static inline void mmc_retune_hold_now(struct mmc_host *host)
+ {
+ 	host->retune_now = 0;
+ 	host->hold_retune += 1;
+ }
+ 
+ static inline void mmc_retune_recheck(struct mmc_host *host)
+ {
+ 	if (host->hold_retune <= 1)
+ 		host->retune_now = 1;
+ }
+ 
+ static inline int mmc_host_cmd23(struct mmc_host *host)
+ {
+ 	return host->caps & MMC_CAP_CMD23;
+ }
+ 
+ static inline int mmc_boot_partition_access(struct mmc_host *host)
+ {
+ 	return !(host->caps2 & MMC_CAP2_BOOTPART_NOACC);
+ }
+ 
+ static inline int mmc_host_uhs(struct mmc_host *host)
+ {
+ 	return host->caps &
+ 		(MMC_CAP_UHS_SDR12 | MMC_CAP_UHS_SDR25 |
+ 		 MMC_CAP_UHS_SDR50 | MMC_CAP_UHS_SDR104 |
+ 		 MMC_CAP_UHS_DDR50);
+ }
+ 
+ static inline bool mmc_card_hs200(struct mmc_card *card)
+ {
+ 	return card->host->ios.timing == MMC_TIMING_MMC_HS200;
+ }
+ 
+ static inline bool mmc_card_ddr52(struct mmc_card *card)
+ {
+ 	return card->host->ios.timing == MMC_TIMING_MMC_DDR52;
+ }
+ 
+ static inline bool mmc_card_hs400(struct mmc_card *card)
+ {
+ 	return card->host->ios.timing == MMC_TIMING_MMC_HS400;
+ }
+ 
+ static inline bool mmc_card_hs400es(struct mmc_card *card)
+ {
+ 	return card->host->ios.enhanced_strobe;
+ }
+ 
++>>>>>>> cb39f61e9b1e (mmc: core: Export a few functions needed for blkmq support)
  
  #endif
  
diff --cc drivers/mmc/core/mmc_ops.c
index 408c76011352,908e4db03535..000000000000
--- a/drivers/mmc/core/mmc_ops.c
+++ b/drivers/mmc/core/mmc_ops.c
@@@ -833,3 -898,162 +833,165 @@@ int mmc_can_ext_csd(struct mmc_card *ca
  {
  	return (card && card->csd.mmca_vsn > CSD_SPEC_VER_3);
  }
++<<<<<<< HEAD
++=======
+ 
+ /**
+  *	mmc_stop_bkops - stop ongoing BKOPS
+  *	@card: MMC card to check BKOPS
+  *
+  *	Send HPI command to stop ongoing background operations to
+  *	allow rapid servicing of foreground operations, e.g. read/
+  *	writes. Wait until the card comes out of the programming state
+  *	to avoid errors in servicing read/write requests.
+  */
+ int mmc_stop_bkops(struct mmc_card *card)
+ {
+ 	int err = 0;
+ 
+ 	err = mmc_interrupt_hpi(card);
+ 
+ 	/*
+ 	 * If err is EINVAL, we can't issue an HPI.
+ 	 * It should complete the BKOPS.
+ 	 */
+ 	if (!err || (err == -EINVAL)) {
+ 		mmc_card_clr_doing_bkops(card);
+ 		mmc_retune_release(card->host);
+ 		err = 0;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static int mmc_read_bkops_status(struct mmc_card *card)
+ {
+ 	int err;
+ 	u8 *ext_csd;
+ 
+ 	mmc_claim_host(card->host);
+ 	err = mmc_get_ext_csd(card, &ext_csd);
+ 	mmc_release_host(card->host);
+ 	if (err)
+ 		return err;
+ 
+ 	card->ext_csd.raw_bkops_status = ext_csd[EXT_CSD_BKOPS_STATUS];
+ 	card->ext_csd.raw_exception_status = ext_csd[EXT_CSD_EXP_EVENTS_STATUS];
+ 	kfree(ext_csd);
+ 	return 0;
+ }
+ 
+ /**
+  *	mmc_start_bkops - start BKOPS for supported cards
+  *	@card: MMC card to start BKOPS
+  *	@from_exception: A flag to indicate if this function was
+  *			 called due to an exception raised by the card
+  *
+  *	Start background operations whenever requested.
+  *	When the urgent BKOPS bit is set in a R1 command response
+  *	then background operations should be started immediately.
+ */
+ void mmc_start_bkops(struct mmc_card *card, bool from_exception)
+ {
+ 	int err;
+ 	int timeout;
+ 	bool use_busy_signal;
+ 
+ 	if (!card->ext_csd.man_bkops_en || mmc_card_doing_bkops(card))
+ 		return;
+ 
+ 	err = mmc_read_bkops_status(card);
+ 	if (err) {
+ 		pr_err("%s: Failed to read bkops status: %d\n",
+ 		       mmc_hostname(card->host), err);
+ 		return;
+ 	}
+ 
+ 	if (!card->ext_csd.raw_bkops_status)
+ 		return;
+ 
+ 	if (card->ext_csd.raw_bkops_status < EXT_CSD_BKOPS_LEVEL_2 &&
+ 	    from_exception)
+ 		return;
+ 
+ 	if (card->ext_csd.raw_bkops_status >= EXT_CSD_BKOPS_LEVEL_2) {
+ 		timeout = MMC_OPS_TIMEOUT_MS;
+ 		use_busy_signal = true;
+ 	} else {
+ 		timeout = 0;
+ 		use_busy_signal = false;
+ 	}
+ 
+ 	mmc_retune_hold(card->host);
+ 
+ 	err = __mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,
+ 			EXT_CSD_BKOPS_START, 1, timeout, 0,
+ 			use_busy_signal, true, false);
+ 	if (err) {
+ 		pr_warn("%s: Error %d starting bkops\n",
+ 			mmc_hostname(card->host), err);
+ 		mmc_retune_release(card->host);
+ 		return;
+ 	}
+ 
+ 	/*
+ 	 * For urgent bkops status (LEVEL_2 and more)
+ 	 * bkops executed synchronously, otherwise
+ 	 * the operation is in progress
+ 	 */
+ 	if (!use_busy_signal)
+ 		mmc_card_set_doing_bkops(card);
+ 	else
+ 		mmc_retune_release(card->host);
+ }
+ EXPORT_SYMBOL(mmc_start_bkops);
+ 
+ /*
+  * Flush the cache to the non-volatile storage.
+  */
+ int mmc_flush_cache(struct mmc_card *card)
+ {
+ 	int err = 0;
+ 
+ 	if (mmc_card_mmc(card) &&
+ 			(card->ext_csd.cache_size > 0) &&
+ 			(card->ext_csd.cache_ctrl & 1)) {
+ 		err = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,
+ 				EXT_CSD_FLUSH_CACHE, 1, 0);
+ 		if (err)
+ 			pr_err("%s: cache flush error %d\n",
+ 					mmc_hostname(card->host), err);
+ 	}
+ 
+ 	return err;
+ }
+ EXPORT_SYMBOL(mmc_flush_cache);
+ 
+ static int mmc_cmdq_switch(struct mmc_card *card, bool enable)
+ {
+ 	u8 val = enable ? EXT_CSD_CMDQ_MODE_ENABLED : 0;
+ 	int err;
+ 
+ 	if (!card->ext_csd.cmdq_support)
+ 		return -EOPNOTSUPP;
+ 
+ 	err = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_CMDQ_MODE_EN,
+ 			 val, card->ext_csd.generic_cmd6_time);
+ 	if (!err)
+ 		card->ext_csd.cmdq_en = enable;
+ 
+ 	return err;
+ }
+ 
+ int mmc_cmdq_enable(struct mmc_card *card)
+ {
+ 	return mmc_cmdq_switch(card, true);
+ }
+ EXPORT_SYMBOL_GPL(mmc_cmdq_enable);
+ 
+ int mmc_cmdq_disable(struct mmc_card *card)
+ {
+ 	return mmc_cmdq_switch(card, false);
+ }
+ EXPORT_SYMBOL_GPL(mmc_cmdq_disable);
++>>>>>>> cb39f61e9b1e (mmc: core: Export a few functions needed for blkmq support)
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index af8713b5ffe0..91ae58b555b8 100644
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -337,7 +337,7 @@ static int mmc_mrq_prep(struct mmc_host *host, struct mmc_request *mrq)
 	return 0;
 }
 
-static int mmc_start_request(struct mmc_host *host, struct mmc_request *mrq)
+int mmc_start_request(struct mmc_host *host, struct mmc_request *mrq)
 {
 	int err;
 
@@ -359,6 +359,7 @@ static int mmc_start_request(struct mmc_host *host, struct mmc_request *mrq)
 
 	return 0;
 }
+EXPORT_SYMBOL(mmc_start_request);
 
 /**
  *	mmc_start_bkops - start BKOPS for supported cards
* Unmerged path drivers/mmc/core/core.h
diff --git a/drivers/mmc/core/host.c b/drivers/mmc/core/host.c
index d793f9c6e54a..9979438abf0a 100644
--- a/drivers/mmc/core/host.c
+++ b/drivers/mmc/core/host.c
@@ -109,12 +109,6 @@ void mmc_retune_hold(struct mmc_host *host)
 	host->hold_retune += 1;
 }
 
-void mmc_retune_hold_now(struct mmc_host *host)
-{
-	host->retune_now = 0;
-	host->hold_retune += 1;
-}
-
 void mmc_retune_release(struct mmc_host *host)
 {
 	if (host->hold_retune)
@@ -122,6 +116,7 @@ void mmc_retune_release(struct mmc_host *host)
 	else
 		WARN_ON(1);
 }
+EXPORT_SYMBOL(mmc_retune_release);
 
 int mmc_retune(struct mmc_host *host)
 {
* Unmerged path drivers/mmc/core/host.h
* Unmerged path drivers/mmc/core/mmc_ops.c
