md: raid10: retrieve page from preallocated resync page array

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [md] raid10: retrieve page from preallocated resync page array (Nigel Croxon) [1494474]
Rebuild_FUZZ: 96.61%
commit-author Ming Lei <tom.leiming@gmail.com>
commit cdb76be31568604f389f951bd0efadd3f530f2dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/cdb76be3.failed

Now one page array is allocated for each resync bio, and we can
retrieve page from this table directly.

	Signed-off-by: Ming Lei <tom.leiming@gmail.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit cdb76be31568604f389f951bd0efadd3f530f2dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid10.c
diff --cc drivers/md/raid10.c
index e568b64df05f,827bb5bef53c..000000000000
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@@ -2116,8 -2069,9 +2117,14 @@@ static void sync_request_write(struct m
  
  	first = i;
  	fbio = r10_bio->devs[i].bio;
++<<<<<<< HEAD
 +	fbio->bi_size = r10_bio->sectors << 9;
 +	fbio->bi_idx = 0;
++=======
+ 	fbio->bi_iter.bi_size = r10_bio->sectors << 9;
+ 	fbio->bi_iter.bi_idx = 0;
+ 	fpages = get_resync_pages(fbio)->pages;
++>>>>>>> cdb76be31568 (md: raid10: retrieve page from preallocated resync page array)
  
  	vcnt = (r10_bio->sectors + (PAGE_SIZE >> 9) - 1) >> (PAGE_SHIFT - 9);
  	/* now find blocks with errors */
@@@ -2131,9 -2086,11 +2138,11 @@@
  			continue;
  		if (i == first)
  			continue;
+ 
+ 		tpages = get_resync_pages(tbio)->pages;
  		d = r10_bio->devs[i].devnum;
  		rdev = conf->mirrors[d].rdev;
 -		if (!r10_bio->devs[i].bio->bi_error) {
 +		if (test_bit(BIO_UPTODATE, &r10_bio->devs[i].bio->bi_flags)) {
  			/* We know that the bi_io_vec layout is the same for
  			 * both 'first' and 'i', so we just compare them.
  			 * All vec entries are PAGE_SIZE;
@@@ -2265,16 -2215,16 +2275,26 @@@ static void fix_recovery_read_error(str
  		ok = sync_page_io(rdev,
  				  addr,
  				  s << 9,
++<<<<<<< HEAD
 +				  bio->bi_io_vec[idx].bv_page,
 +				  READ, false);
++=======
+ 				  pages[idx],
+ 				  REQ_OP_READ, 0, false);
++>>>>>>> cdb76be31568 (md: raid10: retrieve page from preallocated resync page array)
  		if (ok) {
  			rdev = conf->mirrors[dw].rdev;
  			addr = r10_bio->devs[1].addr + sect;
  			ok = sync_page_io(rdev,
  					  addr,
  					  s << 9,
++<<<<<<< HEAD
 +					  bio->bi_io_vec[idx].bv_page,
 +					  WRITE, false);
++=======
+ 					  pages[idx],
+ 					  REQ_OP_WRITE, 0, false);
++>>>>>>> cdb76be31568 (md: raid10: retrieve page from preallocated resync page array)
  			if (!ok) {
  				set_bit(WriteErrorSeen, &rdev->flags);
  				if (!test_and_set_bit(WantReplacement,
* Unmerged path drivers/md/raid10.c
