net/mlx5e: Switch pcie counters to use stats group API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Switch pcie counters to use stats group API (Alaa Hleihel) [1520297]
Rebuild_FUZZ: 96.15%
commit-author Kamal Heib <kamalh@mellanox.com>
commit 9fd2b5f137f5f723c03f5018acb822dcebfba8f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9fd2b5f1.failed

Switch the pcie counters to use the new stats group API.

	Signed-off-by: Kamal Heib <kamalh@mellanox.com>
	Reviewed-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 9fd2b5f137f5f723c03f5018acb822dcebfba8f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 52759b7e5eaa,8515ae815cbc..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -176,12 -175,14 +176,19 @@@ static bool mlx5e_query_global_pause_co
  
  int mlx5e_ethtool_get_sset_count(struct mlx5e_priv *priv, int sset)
  {
 -	int i, num_stats = 0;
 -
  	switch (sset) {
  	case ETH_SS_STATS:
++<<<<<<< HEAD
 +		return NUM_SW_COUNTERS +
 +		       MLX5E_NUM_Q_CNTRS(priv) +
 +		       NUM_VPORT_COUNTERS + NUM_PPORT_COUNTERS(priv) +
 +		       NUM_PCIE_COUNTERS(priv) +
++=======
+ 		for (i = 0; i < mlx5e_num_stats_grps; i++)
+ 			num_stats += mlx5e_stats_grps[i].get_num_stats(priv);
+ 		return num_stats +
+ 		       NUM_PPORT_COUNTERS(priv) +
++>>>>>>> 9fd2b5f137f5 (net/mlx5e: Switch pcie counters to use stats group API)
  		       MLX5E_NUM_RQ_STATS(priv) +
  		       MLX5E_NUM_SQ_STATS(priv) +
  		       MLX5E_NUM_PFC_COUNTERS(priv) +
@@@ -211,52 -212,9 +218,40 @@@ static void mlx5e_fill_stats_strings(st
  	int i, j, tc, prio, idx = 0;
  	unsigned long pfc_combined;
  
 -	for (i = 0; i < mlx5e_num_stats_grps; i++)
 -		idx = mlx5e_stats_grps[i].fill_strings(priv, data, idx);
 +	/* SW counters */
 +	for (i = 0; i < NUM_SW_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN, sw_stats_desc[i].format);
 +
 +	/* Q counters */
 +	for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN, q_stats_desc[i].format);
 +
 +	/* VPORT counters */
 +	for (i = 0; i < NUM_VPORT_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       vport_stats_desc[i].format);
 +
 +	/* PPORT counters */
 +	for (i = 0; i < NUM_PPORT_802_3_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_802_3_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_2863_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_2863_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_2819_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_2819_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_phy_statistical_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_ETH_EXT_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_eth_ext_stats_desc[i].format);
  
- 	for (i = 0; i < NUM_PCIE_PERF_COUNTERS(priv); i++)
- 		strcpy(data + (idx++) * ETH_GSTRING_LEN,
- 		       pcie_perf_stats_desc[i].format);
- 
- 	for (i = 0; i < NUM_PCIE_PERF_COUNTERS64(priv); i++)
- 		strcpy(data + (idx++) * ETH_GSTRING_LEN,
- 		       pcie_perf_stats_desc64[i].format);
- 
- 	for (i = 0; i < NUM_PCIE_PERF_STALL_COUNTERS(priv); i++)
- 		strcpy(data + (idx++) * ETH_GSTRING_LEN,
- 		       pcie_perf_stall_stats_desc[i].format);
- 
  	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
  		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
  			sprintf(data + (idx++) * ETH_GSTRING_LEN,
@@@ -354,50 -312,9 +349,38 @@@ void mlx5e_ethtool_get_ethtool_stats(st
  	channels = &priv->channels;
  	mutex_unlock(&priv->state_lock);
  
 -	for (i = 0; i < mlx5e_num_stats_grps; i++)
 -		idx = mlx5e_stats_grps[i].fill_stats(priv, data, idx);
 +	for (i = 0; i < NUM_SW_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_CPU(&priv->stats.sw,
 +						   sw_stats_desc, i);
 +
 +	for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR32_CPU(&priv->stats.qcnt,
 +						   q_stats_desc, i);
 +
 +	for (i = 0; i < NUM_VPORT_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(priv->stats.vport.query_vport_out,
 +						  vport_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_802_3_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.IEEE_802_3_counters,
 +						  pport_802_3_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_2863_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.RFC_2863_counters,
 +						  pport_2863_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_2819_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.RFC_2819_counters,
 +						  pport_2819_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.phy_statistical_counters,
 +						  pport_phy_statistical_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_ETH_EXT_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.eth_ext_counters,
 +						  pport_eth_ext_stats_desc, i);
  
- 	for (i = 0; i < NUM_PCIE_PERF_COUNTERS(priv); i++)
- 		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_perf_counters,
- 						  pcie_perf_stats_desc, i);
- 
- 	for (i = 0; i < NUM_PCIE_PERF_COUNTERS64(priv); i++)
- 		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pcie.pcie_perf_counters,
- 						  pcie_perf_stats_desc64, i);
- 
- 	for (i = 0; i < NUM_PCIE_PERF_STALL_COUNTERS(priv); i++)
- 		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_perf_counters,
- 						  pcie_perf_stall_stats_desc, i);
- 
  	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
  		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
  			data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.per_prio_counters[prio],
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 6008820e81eb,8afff1981b25..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -295,12 -151,6 +295,15 @@@ static const struct counter_desc pport_
  	{ "rx_%s_pause_transition", PPORT_PER_PRIO_OFF(rx_pause_transition) },
  };
  
++<<<<<<< HEAD
 +static const struct counter_desc pport_eth_ext_stats_desc[] = {
 +	{ "rx_buffer_passed_thres_phy", PPORT_ETH_EXT_OFF(rx_buffer_almost_full) },
 +};
 +
 +#define PCIE_PERF_OFF(c) \
 +	MLX5_BYTE_OFF(mpcnt_reg, counter_set.pcie_perf_cntrs_grp_data_layout.c)
++=======
++>>>>>>> 9fd2b5f137f5 (net/mlx5e: Switch pcie counters to use stats group API)
  #define PCIE_PERF_GET(pcie_stats, c) \
  	MLX5_GET(mpcnt_reg, (pcie_stats)->pcie_perf_counters, \
  		 counter_set.pcie_perf_cntrs_grp_data_layout.c)
@@@ -411,41 -249,12 +396,49 @@@ static const struct counter_desc sq_sta
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, xmit_more) },
  };
  
++<<<<<<< HEAD
 +#define NUM_SW_COUNTERS			ARRAY_SIZE(sw_stats_desc)
 +#define NUM_Q_COUNTERS			ARRAY_SIZE(q_stats_desc)
 +#define NUM_VPORT_COUNTERS		ARRAY_SIZE(vport_stats_desc)
 +#define NUM_PPORT_802_3_COUNTERS	ARRAY_SIZE(pport_802_3_stats_desc)
 +#define NUM_PPORT_2863_COUNTERS		ARRAY_SIZE(pport_2863_stats_desc)
 +#define NUM_PPORT_2819_COUNTERS		ARRAY_SIZE(pport_2819_stats_desc)
 +#define NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) \
 +	(ARRAY_SIZE(pport_phy_statistical_stats_desc) * \
 +	 MLX5_CAP_PCAM_FEATURE((priv)->mdev, ppcnt_statistical_group))
 +#define NUM_PCIE_PERF_COUNTERS(priv) \
 +	(ARRAY_SIZE(pcie_perf_stats_desc) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, pcie_performance_group))
 +#define NUM_PCIE_PERF_COUNTERS64(priv) \
 +	(ARRAY_SIZE(pcie_perf_stats_desc64) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, tx_overflow_buffer_pkt))
 +#define NUM_PCIE_PERF_STALL_COUNTERS(priv) \
 +	(ARRAY_SIZE(pcie_perf_stall_stats_desc) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, pcie_outbound_stalled))
++=======
++>>>>>>> 9fd2b5f137f5 (net/mlx5e: Switch pcie counters to use stats group API)
  #define NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS \
  	ARRAY_SIZE(pport_per_prio_traffic_stats_desc)
  #define NUM_PPORT_PER_PRIO_PFC_COUNTERS \
  	ARRAY_SIZE(pport_per_prio_pfc_stats_desc)
++<<<<<<< HEAD
 +#define NUM_PPORT_ETH_EXT_COUNTERS(priv) \
 +	(ARRAY_SIZE(pport_eth_ext_stats_desc) * \
 +	 MLX5_CAP_PCAM_FEATURE((priv)->mdev, rx_buffer_fullness_counters))
 +#define NUM_PPORT_COUNTERS(priv)	(NUM_PPORT_802_3_COUNTERS + \
 +					 NUM_PPORT_2863_COUNTERS  + \
 +					 NUM_PPORT_2819_COUNTERS  + \
 +					 NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) + \
 +					 NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS * \
 +					 NUM_PPORT_PRIO + \
 +					 NUM_PPORT_ETH_EXT_COUNTERS(priv))
 +#define NUM_PCIE_COUNTERS(priv)		(NUM_PCIE_PERF_COUNTERS(priv) + \
 +					 NUM_PCIE_PERF_COUNTERS64(priv) +\
 +					 NUM_PCIE_PERF_STALL_COUNTERS(priv))
++=======
+ #define NUM_PPORT_COUNTERS(priv)	(NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS * \
+ 					 NUM_PPORT_PRIO)
++>>>>>>> 9fd2b5f137f5 (net/mlx5e: Switch pcie counters to use stats group API)
  #define NUM_RQ_STATS			ARRAY_SIZE(rq_stats_desc)
  #define NUM_SQ_STATS			ARRAY_SIZE(sq_stats_desc)
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
