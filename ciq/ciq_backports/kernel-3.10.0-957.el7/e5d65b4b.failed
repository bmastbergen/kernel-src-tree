scsi: megaraid_sas: Move controller memory allocations and DMA mask settings from probe to megasas_init_fw

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] megaraid_sas: Move controller memory allocations and DMA mask settings from probe to megasas_init_fw (Tomas Henzl) [1513838]
Rebuild_FUZZ: 97.09%
commit-author Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
commit e5d65b4b81af41e3d6b8e25f7aabc5256f647d87
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e5d65b4b.failed

	Signed-off-by: Kashyap Desai <kashyap.desai@broadcom.com>
	Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit e5d65b4b81af41e3d6b8e25f7aabc5256f647d87)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_base.c
diff --cc drivers/scsi/megaraid/megaraid_sas_base.c
index 3bd6576d3342,79e3e23cd9b7..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@@ -5537,14 -5494,16 +5562,17 @@@ static int megasas_init_fw(struct megas
  
  fail_get_ld_pd_list:
  	instance->instancet->disable_intr(instance);
 -fail_init_adapter:
  	megasas_destroy_irqs(instance);
 -fail_setup_irqs:
 +fail_init_adapter:
  	if (instance->msix_vectors)
 -		pci_free_irq_vectors(instance->pdev);
 +		pci_disable_msix(instance->pdev);
  	instance->msix_vectors = 0;
+ fail_alloc_dma_buf:
+ 	megasas_free_ctrl_dma_buffers(instance);
+ 	megasas_free_ctrl_mem(instance);
  fail_ready_state:
 +	kfree(instance->ctrl_info);
 +	instance->ctrl_info = NULL;
  	iounmap(instance->reg_set);
  
  fail_ioremap:
@@@ -6273,50 -6357,6 +6298,51 @@@ static int megasas_probe_one(struct pci
  	instance = (struct megasas_instance *)host->hostdata;
  	memset(instance, 0, sizeof(*instance));
  	atomic_set(&instance->fw_reset_no_pci_access, 0);
 +	instance->pdev = pdev;
 +
 +	megasas_set_adapter_type(instance);
 +
++<<<<<<< HEAD
 +	if (megasas_alloc_ctrl_mem(instance))
 +		goto fail_alloc_dma_buf;
 +
 +	if (megasas_alloc_ctrl_dma_buffers(instance))
 +		goto fail_alloc_dma_buf;
 +
 +	/* Crash dump feature related initialisation*/
 +	instance->drv_buf_index = 0;
 +	instance->drv_buf_alloc = 0;
 +	instance->crash_dump_fw_support = 0;
 +	instance->crash_dump_app_support = 0;
 +	instance->fw_crash_state = UNAVAILABLE;
 +	spin_lock_init(&instance->crashdump_lock);
 +	instance->crash_dump_buf = NULL;
 +
 +	megasas_poll_wait_aen = 0;
 +	instance->flag_ieee = 0;
 +	instance->ev = NULL;
 +	instance->issuepend_done = 1;
 +	atomic_set(&instance->adprecovery, MEGASAS_HBA_OPERATIONAL);
 +	instance->is_imr = 0;
 +
 +	/*
 +	 * Initialize locks and queues
 +	 */
 +	INIT_LIST_HEAD(&instance->cmd_pool);
 +	INIT_LIST_HEAD(&instance->internal_reset_pending_q);
 +
 +	atomic_set(&instance->fw_outstanding,0);
 +
 +	init_waitqueue_head(&instance->int_cmd_wait_q);
 +	init_waitqueue_head(&instance->abort_cmd_wait_q);
 +
 +	spin_lock_init(&instance->mfi_pool_lock);
 +	spin_lock_init(&instance->hba_lock);
 +	spin_lock_init(&instance->stream_lock);
 +	spin_lock_init(&instance->completion_lock);
 +
 +	mutex_init(&instance->reset_mutex);
 +	mutex_init(&instance->hba_mutex);
  
  	/*
  	 * Initialize PCI related and misc parameters
@@@ -6324,26 -6364,10 +6350,28 @@@
  	instance->host = host;
  	instance->unique_id = pdev->bus->number << 8 | pdev->devfn;
  	instance->init_id = MEGASAS_DEFAULT_INIT_ID;
 +	instance->ctrl_info = NULL;
  
 -	megasas_set_adapter_type(instance);
  
 +	if ((instance->pdev->device == PCI_DEVICE_ID_LSI_SAS0073SKINNY) ||
 +		(instance->pdev->device == PCI_DEVICE_ID_LSI_SAS0071SKINNY))
 +		instance->flag_ieee = 1;
 +
 +	megasas_dbg_lvl = 0;
 +	instance->flag = 0;
 +	instance->unload = 1;
 +	instance->last_time = 0;
 +	instance->disableOnlineCtrlReset = 1;
 +	instance->UnevenSpanSupport = 0;
 +
 +	if (instance->adapter_type != MFI_SERIES) {
 +		INIT_WORK(&instance->work_init, megasas_fusion_ocr_wq);
 +		INIT_WORK(&instance->crash_init, megasas_fusion_crash_dump_wq);
 +	} else
 +		INIT_WORK(&instance->work_init, process_fw_state_change_wq);
 +
++=======
++>>>>>>> e5d65b4b81af (scsi: megaraid_sas: Move controller memory allocations and DMA mask settings from probe to megasas_init_fw)
  	/*
  	 * Initialize MFI Firmware
  	 */
@@@ -6423,11 -6447,8 +6451,8 @@@ fail_io_attach
  	else
  		megasas_release_mfi(instance);
  	if (instance->msix_vectors)
 -		pci_free_irq_vectors(instance->pdev);
 +		pci_disable_msix(instance->pdev);
  fail_init_mfi:
- fail_alloc_dma_buf:
- 	megasas_free_ctrl_dma_buffers(instance);
- 	megasas_free_ctrl_mem(instance);
  	scsi_host_put(host);
  
  fail_alloc_instance:
* Unmerged path drivers/scsi/megaraid/megaraid_sas_base.c
