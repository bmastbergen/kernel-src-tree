nvme-rdma: remove nvme_rdma_remove_ctrl

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Christoph Hellwig <hch@lst.de>
commit e9bc25874c0bde47b65c58ccd01e339a603a7f40
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e9bc2587.failed

It is only used in two places, and some of the work done by it will
be taken into common code soon.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit e9bc25874c0bde47b65c58ccd01e339a603a7f40)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/rdma.c
diff --cc drivers/nvme/host/rdma.c
index fa24ea16798b,a3521b852ea8..000000000000
--- a/drivers/nvme/host/rdma.c
+++ b/drivers/nvme/host/rdma.c
@@@ -1671,78 -1740,28 +1671,88 @@@ static void nvme_rdma_shutdown_ctrl(str
  		nvme_stop_queues(&ctrl->ctrl);
  		blk_mq_tagset_busy_iter(&ctrl->tag_set,
  					nvme_cancel_request, &ctrl->ctrl);
 -		nvme_rdma_destroy_io_queues(ctrl, shutdown);
 +		nvme_rdma_free_io_queues(ctrl);
  	}
  
 -	if (shutdown)
 +	if (test_bit(NVME_RDMA_Q_LIVE, &ctrl->queues[0].flags))
  		nvme_shutdown_ctrl(&ctrl->ctrl);
 -	else
 -		nvme_disable_ctrl(&ctrl->ctrl, ctrl->ctrl.cap);
  
 -	blk_mq_quiesce_queue(ctrl->ctrl.admin_q);
 +	blk_mq_stop_hw_queues(ctrl->ctrl.admin_q);
  	blk_mq_tagset_busy_iter(&ctrl->admin_tag_set,
  				nvme_cancel_request, &ctrl->ctrl);
 -	blk_mq_unquiesce_queue(ctrl->ctrl.admin_q);
 -	nvme_rdma_destroy_admin_queue(ctrl, shutdown);
 +	nvme_rdma_destroy_admin_queue(ctrl);
 +}
 +
++<<<<<<< HEAD
 +static void __nvme_rdma_remove_ctrl(struct nvme_rdma_ctrl *ctrl, bool shutdown)
 +{
 +	nvme_stop_ctrl(&ctrl->ctrl);
 +	nvme_remove_namespaces(&ctrl->ctrl);
 +	if (shutdown)
 +		nvme_rdma_shutdown_ctrl(ctrl);
 +
 +	nvme_uninit_ctrl(&ctrl->ctrl);
 +	if (ctrl->ctrl.tagset) {
 +		blk_cleanup_queue(ctrl->ctrl.connect_q);
 +		blk_mq_free_tag_set(&ctrl->tag_set);
 +		nvme_rdma_dev_put(ctrl->device);
 +	}
 +
 +	nvme_put_ctrl(&ctrl->ctrl);
  }
  
 +static void nvme_rdma_del_ctrl_work(struct work_struct *work)
 +{
 +	struct nvme_rdma_ctrl *ctrl = container_of(work,
 +				struct nvme_rdma_ctrl, delete_work);
 +
 +	__nvme_rdma_remove_ctrl(ctrl, true);
 +}
 +
 +static int __nvme_rdma_del_ctrl(struct nvme_rdma_ctrl *ctrl)
 +{
 +	if (!nvme_change_ctrl_state(&ctrl->ctrl, NVME_CTRL_DELETING))
 +		return -EBUSY;
 +
 +	if (!queue_work(nvme_wq, &ctrl->delete_work))
 +		return -EBUSY;
 +
 +	return 0;
 +}
 +
 +static int nvme_rdma_del_ctrl(struct nvme_ctrl *nctrl)
 +{
 +	struct nvme_rdma_ctrl *ctrl = to_rdma_ctrl(nctrl);
 +	int ret = 0;
 +
 +	/*
 +	 * Keep a reference until all work is flushed since
 +	 * __nvme_rdma_del_ctrl can free the ctrl mem
 +	 */
 +	if (!kref_get_unless_zero(&ctrl->ctrl.kref))
 +		return -EBUSY;
 +	ret = __nvme_rdma_del_ctrl(ctrl);
 +	if (!ret)
 +		flush_work(&ctrl->delete_work);
 +	nvme_put_ctrl(&ctrl->ctrl);
 +	return ret;
 +}
 +
 +static void nvme_rdma_remove_ctrl_work(struct work_struct *work)
 +{
 +	struct nvme_rdma_ctrl *ctrl = container_of(work,
 +				struct nvme_rdma_ctrl, delete_work);
 +
 +	__nvme_rdma_remove_ctrl(ctrl, false);
++=======
+ static void nvme_rdma_delete_ctrl(struct nvme_ctrl *ctrl)
+ {
+ 	nvme_stop_ctrl(ctrl);
+ 	nvme_remove_namespaces(ctrl);
+ 	nvme_rdma_shutdown_ctrl(to_rdma_ctrl(ctrl), true);
+ 	nvme_uninit_ctrl(ctrl);
+ 	nvme_put_ctrl(ctrl);
++>>>>>>> e9bc25874c0b (nvme-rdma: remove nvme_rdma_remove_ctrl)
  }
  
  static void nvme_rdma_reset_ctrl_work(struct work_struct *work)
@@@ -1796,10 -1795,12 +1806,17 @@@
  
  	return;
  
 -out_fail:
 +del_dead_ctrl:
 +	/* Deleting this dead controller... */
  	dev_warn(ctrl->ctrl.device, "Removing after reset failure\n");
++<<<<<<< HEAD
 +	WARN_ON(!queue_work(nvme_wq, &ctrl->delete_work));
++=======
+ 	nvme_remove_namespaces(&ctrl->ctrl);
+ 	nvme_rdma_shutdown_ctrl(ctrl, true);
+ 	nvme_uninit_ctrl(&ctrl->ctrl);
+ 	nvme_put_ctrl(&ctrl->ctrl);
++>>>>>>> e9bc25874c0b (nvme-rdma: remove nvme_rdma_remove_ctrl)
  }
  
  static const struct nvme_ctrl_ops nvme_rdma_ctrl_ops = {
* Unmerged path drivers/nvme/host/rdma.c
