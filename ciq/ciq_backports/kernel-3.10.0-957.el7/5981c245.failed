target/iblock: convert iblock_req.pending from atomic_t to refcount_t

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [target] iblock: convert iblock_req.pending from atomic_t to refcount_t (Maurizio Lombardi) [1585081]
Rebuild_FUZZ: 94.66%
commit-author Elena Reshetova <elena.reshetova@intel.com>
commit 5981c245a890db6a6e16fb6d3838cc9fc9fdf0ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5981c245.failed

refcount_t type and corresponding API should be
used instead of atomic_t when the variable is used as
a reference counter. This allows to avoid accidental
refcounter overflows that might lead to use-after-free
situations.

	Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
	Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: David Windsor <dwindsor@gmail.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 5981c245a890db6a6e16fb6d3838cc9fc9fdf0ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_iblock.h
diff --cc drivers/target/target_core_iblock.h
index 01c2afd81500,f2a5797217d4..000000000000
--- a/drivers/target/target_core_iblock.h
+++ b/drivers/target/target_core_iblock.h
@@@ -1,6 -1,10 +1,13 @@@
  #ifndef TARGET_CORE_IBLOCK_H
  #define TARGET_CORE_IBLOCK_H
  
++<<<<<<< HEAD
++=======
+ #include <linux/atomic.h>
+ #include <linux/refcount.h>
+ #include <target/target_core_base.h>
+ 
++>>>>>>> 5981c245a890 (target/iblock: convert iblock_req.pending from atomic_t to refcount_t)
  #define IBLOCK_VERSION		"4.0"
  
  #define IBLOCK_MAX_CDBS		16
diff --git a/drivers/target/target_core_iblock.c b/drivers/target/target_core_iblock.c
index 5256f5f60ed8..21adae3c0ce3 100644
--- a/drivers/target/target_core_iblock.c
+++ b/drivers/target/target_core_iblock.c
@@ -280,7 +280,7 @@ static void iblock_complete_cmd(struct se_cmd *cmd)
 	struct iblock_req *ibr = cmd->priv;
 	u8 status;
 
-	if (!atomic_dec_and_test(&ibr->pending))
+	if (!refcount_dec_and_test(&ibr->pending))
 		return;
 
 	if (atomic_read(&ibr->ib_bio_err_cnt))
@@ -492,7 +492,7 @@ iblock_execute_write_same(struct se_cmd *cmd)
 	bio_list_init(&list);
 	bio_list_add(&list, bio);
 
-	atomic_set(&ibr->pending, 1);
+	refcount_set(&ibr->pending, 1);
 
 	while (sectors) {
 		while (bio_add_page(bio, sg_page(sg), sg->length, sg->offset)
@@ -502,7 +502,7 @@ iblock_execute_write_same(struct se_cmd *cmd)
 			if (!bio)
 				goto fail_put_bios;
 
-			atomic_inc(&ibr->pending);
+			refcount_inc(&ibr->pending);
 			bio_list_add(&list, bio);
 		}
 
@@ -714,7 +714,7 @@ iblock_execute_rw(struct se_cmd *cmd, struct scatterlist *sgl, u32 sgl_nents,
 	cmd->priv = ibr;
 
 	if (!sgl_nents) {
-		atomic_set(&ibr->pending, 1);
+		refcount_set(&ibr->pending, 1);
 		iblock_complete_cmd(cmd);
 		return 0;
 	}
@@ -727,7 +727,7 @@ iblock_execute_rw(struct se_cmd *cmd, struct scatterlist *sgl, u32 sgl_nents,
 	bio_list_init(&list);
 	bio_list_add(&list, bio);
 
-	atomic_set(&ibr->pending, 2);
+	refcount_set(&ibr->pending, 2);
 	bio_cnt = 1;
 
 	for_each_sg(sgl, sg, sgl_nents, i) {
@@ -747,7 +747,7 @@ iblock_execute_rw(struct se_cmd *cmd, struct scatterlist *sgl, u32 sgl_nents,
 			if (!bio)
 				goto fail_put_bios;
 
-			atomic_inc(&ibr->pending);
+			refcount_inc(&ibr->pending);
 			bio_list_add(&list, bio);
 			bio_cnt++;
 		}
* Unmerged path drivers/target/target_core_iblock.h
