NFS: Fix unstable write completion

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit c4f24df942a181699c5bab01b8e5e82b925f77f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c4f24df9.failed

We do want to respect the FLUSH_SYNC argument to nfs_commit_inode() to
ensure that all outstanding COMMIT requests to the inode in question are
complete. Currently we may exit early from both nfs_commit_inode() and
nfs_write_inode() even if there are COMMIT requests in flight, or unstable
writes on the commit list.

In order to get the right semantics w.r.t. sync_inode(), we don't need
to have nfs_commit_inode() reset the inode dirty flags when called from
nfs_wb_page() and/or nfs_wb_all(). We just need to ensure that
nfs_write_inode() leaves them in the right state if there are outstanding
commits, or stable pages.

	Reported-by: Scott Mayhew <smayhew@redhat.com>
Fixes: dc4fd9ab01ab ("nfs: don't wait on commit in nfs_commit_inode()...")
	Cc: stable@vger.kernel.org # v4.14+
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit c4f24df942a181699c5bab01b8e5e82b925f77f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/write.c
diff --cc fs/nfs/write.c
index 3335ca99f5b8,e7d8ceae8f26..000000000000
--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@@ -1858,11 -1922,11 +1861,18 @@@ int nfs_write_inode(struct inode *inode
  	int flags = FLUSH_SYNC;
  	int ret = 0;
  
++<<<<<<< HEAD
 +	/* no commits means nothing needs to be done */
 +	if (!nfsi->commit_info.ncommit)
 +		return ret;
 +
++=======
++>>>>>>> c4f24df942a1 (NFS: Fix unstable write completion)
  	if (wbc->sync_mode == WB_SYNC_NONE) {
+ 		/* no commits means nothing needs to be done */
+ 		if (!atomic_long_read(&nfsi->commit_info.ncommit))
+ 			goto check_requests_outstanding;
+ 
  		/* Don't commit yet if this is a non-blocking flush and there
  		 * are a lot of outstanding writes for this mapping.
  		 */
* Unmerged path fs/nfs/write.c
