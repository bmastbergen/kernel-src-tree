platform/x86: dell-wmi: don't check length returned

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: dell-wmi: don't check length returned (Jarod Wilson) [1526317]
Rebuild_FUZZ: 90.32%
commit-author Mario Limonciello <mario.limonciello@dell.com>
commit fa9f924c7ff95f9299e11657c4441288d7f01dbd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/fa9f924c.failed

This is intended to be variable and provided by the platform.
Some platforms this year will be adopting a 32k WMI buffer, so don't
complain when encountering those platforms or any other future changes.

	Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
	Reviewed-by: Edward O'Callaghan <quasisec@google.com>
	Reviewed-by: Pali Roh√°r <pali.rohar@gmail.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
(cherry picked from commit fa9f924c7ff95f9299e11657c4441288d7f01dbd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/dell-wmi.c
diff --cc drivers/platform/x86/dell-wmi.c
index fa90558cb1ae,da4f629d0831..000000000000
--- a/drivers/platform/x86/dell-wmi.c
+++ b/drivers/platform/x86/dell-wmi.c
@@@ -623,25 -624,27 +623,25 @@@ static int __init dell_wmi_input_setup(
   * Vendor Signature          0       4    "DELL"
   * Object Signature          4       4    " WMI"
   * WMI Interface Version     8       4    <version>
-  * WMI buffer length        12       4    4096
+  * WMI buffer length        12       4    <length>
   */
 -static int dell_wmi_check_descriptor_buffer(struct wmi_device *wdev)
 +static int __init dell_wmi_check_descriptor_buffer(void)
  {
 -	struct dell_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
 -	union acpi_object *obj = NULL;
 -	struct wmi_device *desc_dev;
 +	struct acpi_buffer out = { ACPI_ALLOCATE_BUFFER, NULL };
 +	union acpi_object *obj;
 +	acpi_status status;
  	u32 *buffer;
 -	int ret;
  
 -	desc_dev = wmidev_get_other_guid(wdev, DELL_DESCRIPTOR_GUID);
 -	if (!desc_dev) {
 -		dev_err(&wdev->dev, "Dell WMI descriptor does not exist\n");
 -		return -ENODEV;
 +	status = wmi_query_block(DELL_DESCRIPTOR_GUID, 0, &out);
 +	if (ACPI_FAILURE(status)) {
 +		pr_err("Cannot read Dell descriptor buffer - %d\n", status);
 +		return status;
  	}
  
 -	obj = wmidev_block_query(desc_dev, 0);
 +	obj = (union acpi_object *)out.pointer;
  	if (!obj) {
 -		dev_err(&wdev->dev, "failed to read Dell WMI descriptor\n");
 -		ret = -EIO;
 -		goto out;
 +		pr_err("Dell descriptor buffer is empty\n");
 +		return -EINVAL;
  	}
  
  	if (obj->type != ACPI_TYPE_BUFFER) {
@@@ -661,25 -663,27 +661,30 @@@
  
  	buffer = (u32 *)obj->buffer.pointer;
  
 -	if (strncmp(obj->string.pointer, "DELL WMI", 8) != 0) {
 -		dev_err(&wdev->dev, "Dell descriptor buffer has invalid signature (%8ph)\n",
 -			buffer);
 -		ret = -EINVAL;
 -		goto out;
 -	}
 +	if (buffer[0] != 0x4C4C4544 && buffer[1] != 0x494D5720)
 +		pr_warn("Dell descriptor buffer has invalid signature (%*ph)\n",
 +			8, buffer);
  
  	if (buffer[2] != 0 && buffer[2] != 1)
 -		dev_warn(&wdev->dev, "Dell descriptor buffer has unknown version (%lu)\n",
 -			(unsigned long) buffer[2]);
 +		pr_warn("Dell descriptor buffer has unknown version (%d)\n",
 +			buffer[2]);
  
++<<<<<<< HEAD
 +	if (buffer[3] != 4096)
 +		pr_warn("Dell descriptor buffer has invalid buffer length (%d)\n",
 +			buffer[3]);
 +
 +	dell_wmi_interface_version = buffer[2];
++=======
+ 	priv->interface_version = buffer[2];
+ 	ret = 0;
++>>>>>>> fa9f924c7ff9 (platform/x86: dell-wmi: don't check length returned)
  
 -	dev_info(&wdev->dev, "Detected Dell WMI interface version %u\n",
 -		priv->interface_version);
 +	pr_info("Detected Dell WMI interface version %u\n",
 +		dell_wmi_interface_version);
  
 -out:
  	kfree(obj);
 -	put_device(&desc_dev->dev);
 -	return ret;
 +	return 0;
  }
  
  /*
* Unmerged path drivers/platform/x86/dell-wmi.c
