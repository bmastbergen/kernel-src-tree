sfc: support separate PTP and general timestamping

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Laurence Evans <levans@solarflare.com>
commit 04796f4c4dc4ac4c4f405c22e20dc9ae1068eea5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/04796f4c.failed

Support MC_CMD_PTP_OUT_GET_TIMESTAMP_CORRECTIONS_V2.  Extract general
 timestamp corrections in addition to PTP corrections.  Apply receive
 timestamp corrections for general datapath receive timestamping, and
 correspondingly for transmit.

	Signed-off-by: Laurence Evans <levans@solarflare.com>
	Signed-off-by: Edward Cree <ecree@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 04796f4c4dc4ac4c4f405c22e20dc9ae1068eea5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/sfc/ptp.c
diff --cc drivers/net/ethernet/sfc/ptp.c
index e8d8b37cae8f,63c2b25f9281..000000000000
--- a/drivers/net/ethernet/sfc/ptp.c
+++ b/drivers/net/ethernet/sfc/ptp.c
@@@ -473,6 -500,62 +482,65 @@@ static ktime_t efx_ptp_s27_to_ktime_cor
  	return efx_ptp_s27_to_ktime(nic_major, nic_minor);
  }
  
++<<<<<<< HEAD
++=======
+ struct efx_channel *efx_ptp_channel(struct efx_nic *efx)
+ {
+ 	return efx->ptp_data ? efx->ptp_data->channel : NULL;
+ }
+ 
+ static u32 last_sync_timestamp_major(struct efx_nic *efx)
+ {
+ 	struct efx_channel *channel = efx_ptp_channel(efx);
+ 	u32 major = 0;
+ 
+ 	if (channel)
+ 		major = channel->sync_timestamp_major;
+ 	return major;
+ }
+ 
+ /* The 8000 series and later can provide the time from the MAC, which is only
+  * 48 bits long and provides meta-information in the top 2 bits.
+  */
+ static ktime_t
+ efx_ptp_mac_s27_to_ktime_correction(struct efx_nic *efx,
+ 				    u32 nic_major, u32 nic_minor,
+ 				    s32 correction)
+ {
+ 	ktime_t kt = { 0 };
+ 
+ 	if (!(nic_major & 0x80000000)) {
+ 		WARN_ON_ONCE(nic_major >> 16);
+ 		/* Use the top bits from the latest sync event. */
+ 		nic_major &= 0xffff;
+ 		nic_major |= (last_sync_timestamp_major(efx) & 0xffff0000);
+ 
+ 		kt = efx_ptp_s27_to_ktime_correction(nic_major, nic_minor,
+ 						     correction);
+ 	}
+ 	return kt;
+ }
+ 
+ ktime_t efx_ptp_nic_to_kernel_time(struct efx_tx_queue *tx_queue)
+ {
+ 	struct efx_nic *efx = tx_queue->efx;
+ 	struct efx_ptp_data *ptp = efx->ptp_data;
+ 	ktime_t kt;
+ 
+ 	if (efx_ptp_use_mac_tx_timestamps(efx))
+ 		kt = efx_ptp_mac_s27_to_ktime_correction(efx,
+ 				tx_queue->completed_timestamp_major,
+ 				tx_queue->completed_timestamp_minor,
+ 				ptp->ts_corrections.general_tx);
+ 	else
+ 		kt = ptp->nic_to_kernel_time(
+ 				tx_queue->completed_timestamp_major,
+ 				tx_queue->completed_timestamp_minor,
+ 				ptp->ts_corrections.general_tx);
+ 	return kt;
+ }
+ 
++>>>>>>> 04796f4c4dc4 (sfc: support separate PTP and general timestamping)
  /* Get PTP attributes and set up time conversions */
  static int efx_ptp_get_attributes(struct efx_nic *efx)
  {
* Unmerged path drivers/net/ethernet/sfc/ptp.c
