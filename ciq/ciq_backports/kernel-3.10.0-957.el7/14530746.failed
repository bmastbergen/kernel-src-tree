devlink: Remove top_hierarchy arg to devlink_resource_register

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author David Ahern <dsahern@gmail.com>
commit 145307460ba9c11489807de7acd3f4c7395f60b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/14530746.failed

top_hierarchy arg can be determined by comparing parent_resource_id to
DEVLINK_RESOURCE_ID_PARENT_TOP so it does not need to be a separate
argument.

	Signed-off-by: David Ahern <dsahern@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 145307460ba9c11489807de7acd3f4c7395f60b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index 6957213219f7,83886a9df206..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -3844,6 -3806,180 +3844,183 @@@ static const struct mlxsw_config_profil
  	.resource_query_enable		= 1,
  };
  
++<<<<<<< HEAD
++=======
+ static u64 mlxsw_sp_resource_kvd_linear_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 
+ 	return mlxsw_sp_kvdl_occ_get(mlxsw_sp);
+ }
+ 
+ static struct devlink_resource_ops mlxsw_sp_resource_kvd_linear_ops = {
+ 	.occ_get = mlxsw_sp_resource_kvd_linear_occ_get,
+ };
+ 
+ static void
+ mlxsw_sp_resource_size_params_prepare(struct mlxsw_core *mlxsw_core,
+ 				      struct devlink_resource_size_params *kvd_size_params,
+ 				      struct devlink_resource_size_params *linear_size_params,
+ 				      struct devlink_resource_size_params *hash_double_size_params,
+ 				      struct devlink_resource_size_params *hash_single_size_params)
+ {
+ 	u32 single_size_min = MLXSW_CORE_RES_GET(mlxsw_core,
+ 						 KVD_SINGLE_MIN_SIZE);
+ 	u32 double_size_min = MLXSW_CORE_RES_GET(mlxsw_core,
+ 						 KVD_DOUBLE_MIN_SIZE);
+ 	u32 kvd_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE);
+ 	u32 linear_size_min = 0;
+ 
+ 	devlink_resource_size_params_init(kvd_size_params, kvd_size, kvd_size,
+ 					  MLXSW_SP_KVD_GRANULARITY,
+ 					  DEVLINK_RESOURCE_UNIT_ENTRY);
+ 	devlink_resource_size_params_init(linear_size_params, linear_size_min,
+ 					  kvd_size - single_size_min -
+ 					  double_size_min,
+ 					  MLXSW_SP_KVD_GRANULARITY,
+ 					  DEVLINK_RESOURCE_UNIT_ENTRY);
+ 	devlink_resource_size_params_init(hash_double_size_params,
+ 					  double_size_min,
+ 					  kvd_size - single_size_min -
+ 					  linear_size_min,
+ 					  MLXSW_SP_KVD_GRANULARITY,
+ 					  DEVLINK_RESOURCE_UNIT_ENTRY);
+ 	devlink_resource_size_params_init(hash_single_size_params,
+ 					  single_size_min,
+ 					  kvd_size - double_size_min -
+ 					  linear_size_min,
+ 					  MLXSW_SP_KVD_GRANULARITY,
+ 					  DEVLINK_RESOURCE_UNIT_ENTRY);
+ }
+ 
+ static int mlxsw_sp_resources_register(struct mlxsw_core *mlxsw_core)
+ {
+ 	struct devlink *devlink = priv_to_devlink(mlxsw_core);
+ 	struct devlink_resource_size_params hash_single_size_params;
+ 	struct devlink_resource_size_params hash_double_size_params;
+ 	struct devlink_resource_size_params linear_size_params;
+ 	struct devlink_resource_size_params kvd_size_params;
+ 	u32 kvd_size, single_size, double_size, linear_size;
+ 	const struct mlxsw_config_profile *profile;
+ 	int err;
+ 
+ 	profile = &mlxsw_sp_config_profile;
+ 	if (!MLXSW_CORE_RES_VALID(mlxsw_core, KVD_SIZE))
+ 		return -EIO;
+ 
+ 	mlxsw_sp_resource_size_params_prepare(mlxsw_core, &kvd_size_params,
+ 					      &linear_size_params,
+ 					      &hash_double_size_params,
+ 					      &hash_single_size_params);
+ 
+ 	kvd_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD,
+ 					kvd_size, MLXSW_SP_RESOURCE_KVD,
+ 					DEVLINK_RESOURCE_ID_PARENT_TOP,
+ 					&kvd_size_params,
+ 					NULL);
+ 	if (err)
+ 		return err;
+ 
+ 	linear_size = profile->kvd_linear_size;
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR,
+ 					linear_size,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					MLXSW_SP_RESOURCE_KVD,
+ 					&linear_size_params,
+ 					&mlxsw_sp_resource_kvd_linear_ops);
+ 	if (err)
+ 		return err;
+ 
+ 	err = mlxsw_sp_kvdl_resources_register(devlink);
+ 	if  (err)
+ 		return err;
+ 
+ 	double_size = kvd_size - linear_size;
+ 	double_size *= profile->kvd_hash_double_parts;
+ 	double_size /= profile->kvd_hash_double_parts +
+ 		       profile->kvd_hash_single_parts;
+ 	double_size = rounddown(double_size, profile->kvd_hash_granularity);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_HASH_DOUBLE,
+ 					double_size,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_DOUBLE,
+ 					MLXSW_SP_RESOURCE_KVD,
+ 					&hash_double_size_params,
+ 					NULL);
+ 	if (err)
+ 		return err;
+ 
+ 	single_size = kvd_size - double_size - linear_size;
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_HASH_SINGLE,
+ 					single_size,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_SINGLE,
+ 					MLXSW_SP_RESOURCE_KVD,
+ 					&hash_single_size_params,
+ 					NULL);
+ 	if (err)
+ 		return err;
+ 
+ 	return 0;
+ }
+ 
+ static int mlxsw_sp_kvd_sizes_get(struct mlxsw_core *mlxsw_core,
+ 				  const struct mlxsw_config_profile *profile,
+ 				  u64 *p_single_size, u64 *p_double_size,
+ 				  u64 *p_linear_size)
+ {
+ 	struct devlink *devlink = priv_to_devlink(mlxsw_core);
+ 	u32 double_size;
+ 	int err;
+ 
+ 	if (!MLXSW_CORE_RES_VALID(mlxsw_core, KVD_SINGLE_MIN_SIZE) ||
+ 	    !MLXSW_CORE_RES_VALID(mlxsw_core, KVD_DOUBLE_MIN_SIZE) ||
+ 	    !profile->used_kvd_split_data)
+ 		return -EIO;
+ 
+ 	/* The hash part is what left of the kvd without the
+ 	 * linear part. It is split to the single size and
+ 	 * double size by the parts ratio from the profile.
+ 	 * Both sizes must be a multiplications of the
+ 	 * granularity from the profile. In case the user
+ 	 * provided the sizes they are obtained via devlink.
+ 	 */
+ 	err = devlink_resource_size_get(devlink,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					p_linear_size);
+ 	if (err)
+ 		*p_linear_size = profile->kvd_linear_size;
+ 
+ 	err = devlink_resource_size_get(devlink,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_DOUBLE,
+ 					p_double_size);
+ 	if (err) {
+ 		double_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) -
+ 			      *p_linear_size;
+ 		double_size *= profile->kvd_hash_double_parts;
+ 		double_size /= profile->kvd_hash_double_parts +
+ 			       profile->kvd_hash_single_parts;
+ 		*p_double_size = rounddown(double_size,
+ 					   profile->kvd_hash_granularity);
+ 	}
+ 
+ 	err = devlink_resource_size_get(devlink,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_SINGLE,
+ 					p_single_size);
+ 	if (err)
+ 		*p_single_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) -
+ 				 *p_double_size - *p_linear_size;
+ 
+ 	/* Check results are legal. */
+ 	if (*p_single_size < MLXSW_CORE_RES_GET(mlxsw_core, KVD_SINGLE_MIN_SIZE) ||
+ 	    *p_double_size < MLXSW_CORE_RES_GET(mlxsw_core, KVD_DOUBLE_MIN_SIZE) ||
+ 	    MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) < *p_linear_size)
+ 		return -EIO;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 145307460ba9 (devlink: Remove top_hierarchy arg to devlink_resource_register)
  static struct mlxsw_driver mlxsw_sp_driver = {
  	.kind				= mlxsw_sp_driver_name,
  	.priv_size			= sizeof(struct mlxsw_sp),
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
index 26c26cd30c3d,85503e93b93f..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
@@@ -48,46 -151,363 +48,221 @@@
  int mlxsw_sp_kvdl_alloc(struct mlxsw_sp *mlxsw_sp, unsigned int entry_count,
  			u32 *p_entry_index)
  {
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	/* Find partition with smallest allocation size satisfying the
 -	 * requested size.
 -	 */
 -	part = mlxsw_sp_kvdl_alloc_size_part(mlxsw_sp->kvdl, entry_count);
 -	if (IS_ERR(part))
 -		return PTR_ERR(part);
 -
 -	return mlxsw_sp_kvdl_part_alloc(part, p_entry_index);
 -}
 -
 -void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp, int entry_index)
 -{
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	part = mlxsw_sp_kvdl_index_part(mlxsw_sp->kvdl, entry_index);
 -	if (IS_ERR(part))
 -		return;
 -	mlxsw_sp_kvdl_part_free(part, entry_index);
 -}
 -
 -int mlxsw_sp_kvdl_alloc_size_query(struct mlxsw_sp *mlxsw_sp,
 -				   unsigned int entry_count,
 -				   unsigned int *p_alloc_size)
 -{
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	part = mlxsw_sp_kvdl_alloc_size_part(mlxsw_sp->kvdl, entry_count);
 -	if (IS_ERR(part))
 -		return PTR_ERR(part);
 +	int entry_index;
 +	int size;
 +	int type_base;
 +	int type_size;
 +	int type_entries;
  
 -	*p_alloc_size = part->info->alloc_size;
 -
 -	return 0;
 -}
 -
 -enum mlxsw_sp_kvdl_part_id {
 -	MLXSW_SP_KVDL_PART_SINGLE,
 -	MLXSW_SP_KVDL_PART_CHUNKS,
 -	MLXSW_SP_KVDL_PART_LARGE_CHUNKS,
 -};
 -
 -static const struct mlxsw_sp_kvdl_part_info kvdl_parts_info[] = {
 -	{
 -		.part_index	= MLXSW_SP_KVDL_PART_SINGLE,
 -		.start_index	= MLXSW_SP_KVDL_SINGLE_BASE,
 -		.end_index	= MLXSW_SP_KVDL_SINGLE_END,
 -		.alloc_size	= 1,
 -	},
 -	{
 -		.part_index	= MLXSW_SP_KVDL_PART_CHUNKS,
 -		.start_index	= MLXSW_SP_KVDL_CHUNKS_BASE,
 -		.end_index	= MLXSW_SP_KVDL_CHUNKS_END,
 -		.alloc_size	= MLXSW_SP_CHUNK_MAX,
 -	},
 -	{
 -		.part_index	= MLXSW_SP_KVDL_PART_LARGE_CHUNKS,
 -		.start_index	= MLXSW_SP_KVDL_LARGE_CHUNKS_BASE,
 -		.end_index	= MLXSW_SP_KVDL_LARGE_CHUNKS_END,
 -		.alloc_size	= MLXSW_SP_LARGE_CHUNK_MAX,
 -	},
 -};
 -
 -static struct mlxsw_sp_kvdl_part *
 -mlxsw_sp_kvdl_part_find(struct mlxsw_sp *mlxsw_sp, unsigned int part_index)
 -{
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	list_for_each_entry(part, &mlxsw_sp->kvdl->parts_list, list) {
 -		if (part->info->part_index == part_index)
 -			return part;
 -	}
 -
 -	return NULL;
 -}
 -
 -static void
 -mlxsw_sp_kvdl_part_update(struct mlxsw_sp *mlxsw_sp,
 -			  struct mlxsw_sp_kvdl_part *part, unsigned int size)
 -{
 -	struct mlxsw_sp_kvdl_part_info *info = part->info;
 -
 -	if (list_is_last(&part->list, &mlxsw_sp->kvdl->parts_list)) {
 -		info->end_index = size - 1;
 -	} else  {
 -		struct mlxsw_sp_kvdl_part *last_part;
 -
 -		last_part = list_next_entry(part, list);
 -		info->start_index = last_part->info->end_index + 1;
 -		info->end_index = info->start_index + size - 1;
 -	}
 -}
 -
 -static int mlxsw_sp_kvdl_part_init(struct mlxsw_sp *mlxsw_sp,
 -				   unsigned int part_index)
 -{
 -	struct devlink *devlink = priv_to_devlink(mlxsw_sp->core);
 -	const struct mlxsw_sp_kvdl_part_info *info;
 -	enum mlxsw_sp_resource_id resource_id;
 -	struct mlxsw_sp_kvdl_part *part;
 -	bool need_update = true;
 -	unsigned int nr_entries;
 -	size_t usage_size;
 -	u64 resource_size;
 -	int err;
 -
 -	info = &kvdl_parts_info[part_index];
 -
 -	switch (part_index) {
 -	case MLXSW_SP_KVDL_PART_SINGLE:
 -		resource_id = MLXSW_SP_RESOURCE_KVD_LINEAR_SINGLE;
 -		break;
 -	case MLXSW_SP_KVDL_PART_CHUNKS:
 -		resource_id = MLXSW_SP_RESOURCE_KVD_LINEAR_CHUNKS;
 -		break;
 -	case MLXSW_SP_KVDL_PART_LARGE_CHUNKS:
 -		resource_id = MLXSW_SP_RESOURCE_KVD_LINEAR_LARGE_CHUNKS;
 -		break;
 -	default:
 +	if (entry_count == 0 || entry_count > MLXSW_SP_CHUNK_MAX) {
  		return -EINVAL;
 +	} else if (entry_count == 1) {
 +		type_base = MLXSW_SP_KVDL_SINGLE_BASE;
 +		type_size = MLXSW_SP_KVDL_SINGLE_SIZE;
 +		type_entries = 1;
 +	} else {
 +		type_base = MLXSW_SP_KVDL_CHUNKS_BASE;
 +		type_size = MLXSW_SP_KVDL_CHUNKS_SIZE;
 +		type_entries = MLXSW_SP_CHUNK_MAX;
  	}
  
 -	err = devlink_resource_size_get(devlink, resource_id, &resource_size);
 -	if (err) {
 -		need_update = false;
 -		resource_size = info->end_index - info->start_index + 1;
 -	}
 -
 -	nr_entries = div_u64(resource_size, info->alloc_size);
 -	usage_size = BITS_TO_LONGS(nr_entries) * sizeof(unsigned long);
 -	part = kzalloc(sizeof(*part) + usage_size, GFP_KERNEL);
 -	if (!part)
 -		return -ENOMEM;
 -
 -	part->info = kmemdup(info, sizeof(*part->info), GFP_KERNEL);
 -	if (!part->info)
 -		goto err_part_info_alloc;
 -
 -	list_add(&part->list, &mlxsw_sp->kvdl->parts_list);
 -	if (need_update)
 -		mlxsw_sp_kvdl_part_update(mlxsw_sp, part, resource_size);
 -	return 0;
 -
 -err_part_info_alloc:
 -	kfree(part);
 -	return -ENOMEM;
 -}
 -
 -static void mlxsw_sp_kvdl_part_fini(struct mlxsw_sp *mlxsw_sp,
 -				    unsigned int part_index)
 -{
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	part = mlxsw_sp_kvdl_part_find(mlxsw_sp, part_index);
 -	if (!part)
 -		return;
 -
 -	list_del(&part->list);
 -	kfree(part->info);
 -	kfree(part);
 -}
 -
 -static int mlxsw_sp_kvdl_parts_init(struct mlxsw_sp *mlxsw_sp)
 -{
 -	int err, i;
 -
 -	INIT_LIST_HEAD(&mlxsw_sp->kvdl->parts_list);
 +	entry_index = type_base;
 +	size = type_base + type_size;
 +	for_each_clear_bit_from(entry_index, mlxsw_sp->kvdl.usage, size) {
 +		int i;
  
 -	for (i = 0; i < ARRAY_SIZE(kvdl_parts_info); i++) {
 -		err = mlxsw_sp_kvdl_part_init(mlxsw_sp, i);
 -		if (err)
 -			goto err_kvdl_part_init;
 +		for (i = 0; i < type_entries; i++)
 +			set_bit(entry_index + i, mlxsw_sp->kvdl.usage);
 +		*p_entry_index = entry_index;
 +		return 0;
  	}
 -
 -	return 0;
 -
 -err_kvdl_part_init:
 -	for (i--; i >= 0; i--)
 -		mlxsw_sp_kvdl_part_fini(mlxsw_sp, i);
 -	return err;
 +	return -ENOBUFS;
  }
  
 -static void mlxsw_sp_kvdl_parts_fini(struct mlxsw_sp *mlxsw_sp)
 +void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp, int entry_index)
  {
 +	int type_entries;
  	int i;
  
++<<<<<<< HEAD
 +	if (entry_index < MLXSW_SP_KVDL_CHUNKS_BASE)
 +		type_entries = 1;
 +	else
 +		type_entries = MLXSW_SP_CHUNK_MAX;
 +	for (i = 0; i < type_entries; i++)
 +		clear_bit(entry_index + i, mlxsw_sp->kvdl.usage);
++=======
+ 	for (i = ARRAY_SIZE(kvdl_parts_info) - 1; i >= 0; i--)
+ 		mlxsw_sp_kvdl_part_fini(mlxsw_sp, i);
+ }
+ 
+ static u64 mlxsw_sp_kvdl_part_occ(struct mlxsw_sp_kvdl_part *part)
+ {
+ 	unsigned int nr_entries;
+ 	int bit = -1;
+ 	u64 occ = 0;
+ 
+ 	nr_entries = (part->info->end_index -
+ 		      part->info->start_index + 1) /
+ 		      part->info->alloc_size;
+ 	while ((bit = find_next_bit(part->usage, nr_entries, bit + 1))
+ 		< nr_entries)
+ 		occ += part->info->alloc_size;
+ 	return occ;
+ }
+ 
+ u64 mlxsw_sp_kvdl_occ_get(const struct mlxsw_sp *mlxsw_sp)
+ {
+ 	struct mlxsw_sp_kvdl_part *part;
+ 	u64 occ = 0;
+ 
+ 	list_for_each_entry(part, &mlxsw_sp->kvdl->parts_list, list)
+ 		occ += mlxsw_sp_kvdl_part_occ(part);
+ 
+ 	return occ;
+ }
+ 
+ static u64 mlxsw_sp_kvdl_single_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 	struct mlxsw_sp_kvdl_part *part;
+ 
+ 	part = mlxsw_sp_kvdl_part_find(mlxsw_sp, MLXSW_SP_KVDL_PART_SINGLE);
+ 	if (!part)
+ 		return -EINVAL;
+ 
+ 	return mlxsw_sp_kvdl_part_occ(part);
+ }
+ 
+ static u64 mlxsw_sp_kvdl_chunks_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 	struct mlxsw_sp_kvdl_part *part;
+ 
+ 	part = mlxsw_sp_kvdl_part_find(mlxsw_sp, MLXSW_SP_KVDL_PART_CHUNKS);
+ 	if (!part)
+ 		return -EINVAL;
+ 
+ 	return mlxsw_sp_kvdl_part_occ(part);
+ }
+ 
+ static u64 mlxsw_sp_kvdl_large_chunks_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 	struct mlxsw_sp_kvdl_part *part;
+ 
+ 	part = mlxsw_sp_kvdl_part_find(mlxsw_sp,
+ 				       MLXSW_SP_KVDL_PART_LARGE_CHUNKS);
+ 	if (!part)
+ 		return -EINVAL;
+ 
+ 	return mlxsw_sp_kvdl_part_occ(part);
+ }
+ 
+ static struct devlink_resource_ops mlxsw_sp_kvdl_single_ops = {
+ 	.occ_get = mlxsw_sp_kvdl_single_occ_get,
+ };
+ 
+ static struct devlink_resource_ops mlxsw_sp_kvdl_chunks_ops = {
+ 	.occ_get = mlxsw_sp_kvdl_chunks_occ_get,
+ };
+ 
+ static struct devlink_resource_ops mlxsw_sp_kvdl_chunks_large_ops = {
+ 	.occ_get = mlxsw_sp_kvdl_large_chunks_occ_get,
+ };
+ 
+ static struct devlink_resource_size_params mlxsw_sp_kvdl_single_size_params = {
+ 	.size_min = 0,
+ 	.size_granularity = 1,
+ 	.unit = DEVLINK_RESOURCE_UNIT_ENTRY,
+ };
+ 
+ static struct devlink_resource_size_params mlxsw_sp_kvdl_chunks_size_params = {
+ 	.size_min = 0,
+ 	.size_granularity = MLXSW_SP_CHUNK_MAX,
+ 	.unit = DEVLINK_RESOURCE_UNIT_ENTRY,
+ };
+ 
+ static struct devlink_resource_size_params mlxsw_sp_kvdl_large_chunks_size_params = {
+ 	.size_min = 0,
+ 	.size_granularity = MLXSW_SP_LARGE_CHUNK_MAX,
+ 	.unit = DEVLINK_RESOURCE_UNIT_ENTRY,
+ };
+ 
+ static void
+ mlxsw_sp_kvdl_resource_size_params_prepare(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	u32 kvdl_max_size;
+ 
+ 	kvdl_max_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) -
+ 			MLXSW_CORE_RES_GET(mlxsw_core, KVD_SINGLE_MIN_SIZE) -
+ 			MLXSW_CORE_RES_GET(mlxsw_core, KVD_DOUBLE_MIN_SIZE);
+ 
+ 	mlxsw_sp_kvdl_single_size_params.size_max = kvdl_max_size;
+ 	mlxsw_sp_kvdl_chunks_size_params.size_max = kvdl_max_size;
+ 	mlxsw_sp_kvdl_large_chunks_size_params.size_max = kvdl_max_size;
+ }
+ 
+ int mlxsw_sp_kvdl_resources_register(struct devlink *devlink)
+ {
+ 	int err;
+ 
+ 	mlxsw_sp_kvdl_resource_size_params_prepare(devlink);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR_SINGLES,
+ 					MLXSW_SP_KVDL_SINGLE_SIZE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR_SINGLE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					&mlxsw_sp_kvdl_single_size_params,
+ 					&mlxsw_sp_kvdl_single_ops);
+ 	if (err)
+ 		return err;
+ 
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR_CHUNKS,
+ 					MLXSW_SP_KVDL_CHUNKS_SIZE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR_CHUNKS,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					&mlxsw_sp_kvdl_chunks_size_params,
+ 					&mlxsw_sp_kvdl_chunks_ops);
+ 	if (err)
+ 		return err;
+ 
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR_LARGE_CHUNKS,
+ 					MLXSW_SP_KVDL_LARGE_CHUNKS_SIZE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR_LARGE_CHUNKS,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					&mlxsw_sp_kvdl_large_chunks_size_params,
+ 					&mlxsw_sp_kvdl_chunks_large_ops);
+ 	return err;
+ }
+ 
+ int mlxsw_sp_kvdl_init(struct mlxsw_sp *mlxsw_sp)
+ {
+ 	struct mlxsw_sp_kvdl *kvdl;
+ 	int err;
+ 
+ 	kvdl = kzalloc(sizeof(*mlxsw_sp->kvdl), GFP_KERNEL);
+ 	if (!kvdl)
+ 		return -ENOMEM;
+ 	mlxsw_sp->kvdl = kvdl;
+ 
+ 	err = mlxsw_sp_kvdl_parts_init(mlxsw_sp);
+ 	if (err)
+ 		goto err_kvdl_parts_init;
+ 
+ 	return 0;
+ 
+ err_kvdl_parts_init:
+ 	kfree(mlxsw_sp->kvdl);
+ 	return err;
+ }
+ 
+ void mlxsw_sp_kvdl_fini(struct mlxsw_sp *mlxsw_sp)
+ {
+ 	mlxsw_sp_kvdl_parts_fini(mlxsw_sp);
+ 	kfree(mlxsw_sp->kvdl);
++>>>>>>> 145307460ba9 (devlink: Remove top_hierarchy arg to devlink_resource_register)
  }
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
diff --git a/include/net/devlink.h b/include/net/devlink.h
index 6545b03e97f7..f9367a3b8981 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -398,7 +398,6 @@ extern struct devlink_dpipe_header devlink_dpipe_header_ipv6;
 
 int devlink_resource_register(struct devlink *devlink,
 			      const char *resource_name,
-			      bool top_hierarchy,
 			      u64 resource_size,
 			      u64 resource_id,
 			      u64 parent_resource_id,
diff --git a/net/core/devlink.c b/net/core/devlink.c
index c6d54c669328..59583d355898 100644
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@ -3173,7 +3173,6 @@ EXPORT_SYMBOL_GPL(devlink_dpipe_table_unregister);
  */
 int devlink_resource_register(struct devlink *devlink,
 			      const char *resource_name,
-			      bool top_hierarchy,
 			      u64 resource_size,
 			      u64 resource_id,
 			      u64 parent_resource_id,
@@ -3182,8 +3181,11 @@ int devlink_resource_register(struct devlink *devlink,
 {
 	struct devlink_resource *resource;
 	struct list_head *resource_list;
+	bool top_hierarchy;
 	int err = 0;
 
+	top_hierarchy = parent_resource_id == DEVLINK_RESOURCE_ID_PARENT_TOP;
+
 	mutex_lock(&devlink->lock);
 	resource = devlink_resource_find(devlink, NULL, resource_id);
 	if (resource) {
