perf/x86/intel: Hide TSX events when RTM is not supported

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Andi Kleen <ak@linux.intel.com>
commit 58ba4d5a25579e5c7e312bd359c95f3a9a0a242c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/58ba4d5a.failed

0day testing reported a perf test regression on Haswell systems without
RTM. Commit a5df70c35 hides the in_tx/in_tx_cp attributes when RTM is not
available, but the TSX events are still available in sysfs. Due to the
missing attributes the event parser fails on those files.

Don't show the TSX events in sysfs when RTM is not available on
Haswell/Broadwell/Skylake.

Fixes: a5df70c354c2 (perf/x86: Only show format attributes when supported)
	Reported-by: kernel test robot <xiaolong.ye@intel.com>
	Tested-by: Jin Yao <yao.jin@linux.intel.com>
	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
	Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/r/20171109000718.14137-1-andi@firstfloor.org
(cherry picked from commit 58ba4d5a25579e5c7e312bd359c95f3a9a0a242c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/events/intel/core.c
diff --cc arch/x86/events/intel/core.c
index 5aafb5e77243,f94855000d4e..000000000000
--- a/arch/x86/events/intel/core.c
+++ b/arch/x86/events/intel/core.c
@@@ -3650,8 -3755,6 +3663,11 @@@ static struct attribute *hsw_tsx_events
  	EVENT_PTR(el_conflict),
  	EVENT_PTR(cycles_t),
  	EVENT_PTR(cycles_ct),
++<<<<<<< HEAD
 +	EVENT_PTR(mem_ld_hsw),
 +	EVENT_PTR(mem_st_hsw),
++=======
++>>>>>>> 58ba4d5a2557 (perf/x86/intel: Hide TSX events when RTM is not supported)
  	NULL
  };
  
@@@ -4031,9 -4193,12 +4054,9 @@@ __init int intel_pmu_init(void
  
  		x86_pmu.hw_config = hsw_hw_config;
  		x86_pmu.get_event_constraints = hsw_get_event_constraints;
- 		x86_pmu.cpu_events = hsw_events_attrs;
+ 		x86_pmu.cpu_events = get_hsw_events_attrs();
  		x86_pmu.lbr_double_abort = true;
 -		extra_attr = boot_cpu_has(X86_FEATURE_RTM) ?
 -			hsw_format_attr : nhm_format_attr;
  		pr_cont("Haswell events, ");
 -		name = "haswell";
  		break;
  
  	case INTEL_FAM6_BROADWELL_CORE:
@@@ -4067,9 -4232,12 +4090,9 @@@
  
  		x86_pmu.hw_config = hsw_hw_config;
  		x86_pmu.get_event_constraints = hsw_get_event_constraints;
- 		x86_pmu.cpu_events = hsw_events_attrs;
+ 		x86_pmu.cpu_events = get_hsw_events_attrs();
  		x86_pmu.limit_period = bdw_limit_period;
 -		extra_attr = boot_cpu_has(X86_FEATURE_RTM) ?
 -			hsw_format_attr : nhm_format_attr;
  		pr_cont("Broadwell events, ");
 -		name = "broadwell";
  		break;
  
  	case INTEL_FAM6_XEON_PHI_KNL:
@@@ -4112,10 -4287,10 +4135,17 @@@
  
  		x86_pmu.hw_config = hsw_hw_config;
  		x86_pmu.get_event_constraints = hsw_get_event_constraints;
++<<<<<<< HEAD
 +		x86_pmu.format_attrs = merge_attr(intel_arch3_formats_attr,
 +						  skl_format_attr);
 +		WARN_ON(!x86_pmu.format_attrs);
 +		x86_pmu.cpu_events = hsw_events_attrs;
++=======
+ 		extra_attr = boot_cpu_has(X86_FEATURE_RTM) ?
+ 			hsw_format_attr : nhm_format_attr;
+ 		extra_attr = merge_attr(extra_attr, skl_format_attr);
+ 		x86_pmu.cpu_events = get_hsw_events_attrs();
++>>>>>>> 58ba4d5a2557 (perf/x86/intel: Hide TSX events when RTM is not supported)
  		intel_pmu_pebs_data_source_skl(
  			boot_cpu_data.x86_model == INTEL_FAM6_SKYLAKE_X);
  		pr_cont("Skylake events, ");
* Unmerged path arch/x86/events/intel/core.c
