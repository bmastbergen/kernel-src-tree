x86/efi: Access EFI MMIO data as unencrypted when SEV is active

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] subject: x86/efi: Access EFI MMIO data as unencrypted when SEV is active (Gary Hook) [1361286]
Rebuild_FUZZ: 93.33%
commit-author Brijesh Singh <brijesh.singh@amd.com>
commit 9b788f32bee6b0b293a4bdfca4ad4bb0206407fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9b788f32.failed

SEV guest fails to update the UEFI runtime variables stored in the
flash.

The following commit:

  1379edd59673 ("x86/efi: Access EFI data as encrypted when SEV is active")

unconditionally maps all the UEFI runtime data as 'encrypted' (C=1).

When SEV is active the UEFI runtime data marked as EFI_MEMORY_MAPPED_IO
should be mapped as 'unencrypted' so that both guest and hypervisor can
access the data.

	Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
	Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Reviewed-by: Tom Lendacky <thomas.lendacky@amd.com>
	Cc: <stable@vger.kernel.org> # 4.15.x
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-efi@vger.kernel.org
Fixes: 1379edd59673 ("x86/efi: Access EFI data as encrypted ...")
Link: http://lkml.kernel.org/r/20180720012846.23560-2-ard.biesheuvel@linaro.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 9b788f32bee6b0b293a4bdfca4ad4bb0206407fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/platform/efi/efi_64.c
diff --cc arch/x86/platform/efi/efi_64.c
index b96ae8aa3c8e,5f2eb3231607..000000000000
--- a/arch/x86/platform/efi/efi_64.c
+++ b/arch/x86/platform/efi/efi_64.c
@@@ -313,6 -417,9 +313,12 @@@ static void __init __map_region(efi_mem
  	if (!(md->attribute & EFI_MEMORY_WB))
  		flags |= _PAGE_PCD;
  
++<<<<<<< HEAD
++=======
+ 	if (sev_active() && md->type != EFI_MEMORY_MAPPED_IO)
+ 		flags |= _PAGE_ENC;
+ 
++>>>>>>> 9b788f32bee6 (x86/efi: Access EFI MMIO data as unencrypted when SEV is active)
  	pfn = md->phys_addr >> PAGE_SHIFT;
  	if (kernel_map_pages_in_pgd(pgd, pfn, va, md->num_pages, flags))
  		pr_warn("Error mapping PA 0x%llx -> VA 0x%llx!\n",
* Unmerged path arch/x86/platform/efi/efi_64.c
