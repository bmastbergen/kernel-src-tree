dax: explain how read(2)/write(2) addresses are validated

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ross Zwisler <ross.zwisler@linux.intel.com>
commit a2e050f5a9a9bd2b632d67bd06d87088e6a02dae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a2e050f5.failed

Add a comment explaining how the user addresses provided to read(2) and
write(2) are validated in the DAX I/O path.

We call dax_copy_from_iter() or copy_to_iter() on these without calling
access_ok() first in the DAX code, and there was a concern that the user
might be able to read/write to arbitrary kernel addresses with this
path.

Link: http://lkml.kernel.org/r/20170816173615.10098-1-ross.zwisler@linux.intel.com
	Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Matthew Wilcox <mawilcox@microsoft.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a2e050f5a9a9bd2b632d67bd06d87088e6a02dae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dax.c
diff --cc fs/dax.c
index 1e9b52eccd08,5b2eac3ef077..000000000000
--- a/fs/dax.c
+++ b/fs/dax.c
@@@ -1090,14 -1004,16 +1090,25 @@@ dax_iomap_actor(int rw, struct inode *i
  		if (map_len > end - pos)
  			map_len = end - pos;
  
++<<<<<<< HEAD
 +		if (rw & WRITE)
 +			map_len = memcpy_fromiovecend_partial_flushcache(
 +					kaddr, iter->iov,
 +					iter->iov_offset, map_len);
++=======
+ 		/*
+ 		 * The userspace address for the memory copy has already been
+ 		 * validated via access_ok() in either vfs_read() or
+ 		 * vfs_write(), depending on which operation we are doing.
+ 		 */
+ 		if (iov_iter_rw(iter) == WRITE)
+ 			map_len = dax_copy_from_iter(dax_dev, pgoff, kaddr,
+ 					map_len, iter);
++>>>>>>> a2e050f5a9a9 (dax: explain how read(2)/write(2) addresses are validated)
  		else
 -			map_len = copy_to_iter(kaddr, map_len, iter);
 +			map_len = memcpy_toiovecend_partial(iter->iov,
 +					kaddr, iter->iov_offset, map_len);
 +
  		if (map_len <= 0) {
  			ret = map_len ? map_len : -EFAULT;
  			break;
* Unmerged path fs/dax.c
