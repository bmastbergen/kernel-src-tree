scsi: lpfc: Fix NVME Target crash in defer rcv logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] lpfc: Fix NVME Target crash in defer rcv logic (Dick Kennedy) [1595381]
Rebuild_FUZZ: 93.88%
commit-author James Smart <jsmart2021@gmail.com>
commit 6871e8144f935a1f08e7fc6269c894861ce494aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6871e814.failed

Kernel occasionally crashed with the following
ops on NVME Target:
  BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
  IP: [<ffffffffa042ee50>] lpfc_nvmet_defer_rcv+0x50/0x70 [lpfc]

Callback routine was called for deferred rcv when it should be treated as a
normal rcv.

Added code in callback routine to detect this condition and log a message,
then bail.

	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <james.smart@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 6871e8144f935a1f08e7fc6269c894861ce494aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_nvmet.c
diff --cc drivers/scsi/lpfc/lpfc_nvmet.c
index 69d59887c201,ff994712f58a..000000000000
--- a/drivers/scsi/lpfc/lpfc_nvmet.c
+++ b/drivers/scsi/lpfc/lpfc_nvmet.c
@@@ -974,13 -1117,20 +975,29 @@@ lpfc_nvmet_defer_rcv(struct nvmet_fc_ta
  	lpfc_nvmeio_data(phba, "NVMET DEFERRCV: xri x%x sz %d CPU %02x\n",
  			 ctxp->oxid, ctxp->size, smp_processor_id());
  
+ 	if (!nvmebuf) {
+ 		lpfc_printf_log(phba, KERN_INFO, LOG_NVME_IOERR,
+ 				"6425 Defer rcv: no buffer xri x%x: "
+ 				"flg %x ste %x\n",
+ 				ctxp->oxid, ctxp->flag, ctxp->state);
+ 		return;
+ 	}
+ 
  	tgtp = phba->targetport->private;
++<<<<<<< HEAD
 +	atomic_inc(&tgtp->rcv_fcp_cmd_defer);
 +	if (ctxp->flag & LPFC_NVMET_DEFER_RCV_REPOST)
 +		lpfc_rq_buf_free(phba, &nvmebuf->hbuf); /* repost */
 +	else
 +		nvmebuf->hrq->rqbp->rqb_free_buffer(phba, nvmebuf);
 +	ctxp->flag &= ~LPFC_NVMET_DEFER_RCV_REPOST;
++=======
+ 	if (tgtp)
+ 		atomic_inc(&tgtp->rcv_fcp_cmd_defer);
+ 
+ 	/* Free the nvmebuf since a new buffer already replaced it */
+ 	nvmebuf->hrq->rqbp->rqb_free_buffer(phba, nvmebuf);
++>>>>>>> 6871e8144f93 (scsi: lpfc: Fix NVME Target crash in defer rcv logic)
  }
  
  static struct nvmet_fc_target_template lpfc_tgttemplate = {
* Unmerged path drivers/scsi/lpfc/lpfc_nvmet.c
