opal: Remove events notifier

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alistair Popple <alistair@popple.id.au>
commit 81f2f7ce4c5bb688ad691cb3ee37e81ca26a8a3b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/81f2f7ce.failed

All users of the old opal events notifier have been converted over to
the irq domain so remove the event notifier functions.

	Signed-off-by: Alistair Popple <alistair@popple.id.au>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 81f2f7ce4c5bb688ad691cb3ee37e81ca26a8a3b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/platforms/powernv/opal-irqchip.c
#	arch/powerpc/platforms/powernv/opal.c
#	arch/powerpc/platforms/powernv/powernv.h
diff --cc arch/powerpc/platforms/powernv/opal.c
index 20dc06f5b2a8,8403307c5362..000000000000
--- a/arch/powerpc/platforms/powernv/opal.c
+++ b/arch/powerpc/platforms/powernv/opal.c
@@@ -53,14 -53,7 +53,14 @@@ static int mc_recoverable_range_len
  
  struct device_node *opal_node;
  static DEFINE_SPINLOCK(opal_write_lock);
++<<<<<<< HEAD
 +extern u64 opal_mc_secondary_handler[];
 +static unsigned int *opal_irqs;
 +static unsigned int opal_irq_count;
 +static ATOMIC_NOTIFIER_HEAD(opal_notifier_head);
++=======
++>>>>>>> 81f2f7ce4c5b (opal: Remove events notifier)
  static struct atomic_notifier_head opal_msg_notifier_head[OPAL_MSG_TYPE_MAX];
- static DEFINE_SPINLOCK(opal_notifier_lock);
- static uint64_t last_notified_mask = 0x0ul;
- static atomic_t opal_notifier_hold = ATOMIC_INIT(0);
  static uint32_t opal_heartbeat;
  
  static void opal_reinit_cores(void)
@@@ -226,83 -219,6 +226,86 @@@ static int __init opal_register_excepti
  }
  machine_early_initcall(powernv, opal_register_exception_handlers);
  
++<<<<<<< HEAD
 +int opal_notifier_register(struct notifier_block *nb)
 +{
 +	if (!nb) {
 +		pr_warning("%s: Invalid argument (%p)\n",
 +			   __func__, nb);
 +		return -EINVAL;
 +	}
 +
 +	atomic_notifier_chain_register(&opal_notifier_head, nb);
 +	return 0;
 +}
 +EXPORT_SYMBOL_GPL(opal_notifier_register);
 +
 +int opal_notifier_unregister(struct notifier_block *nb)
 +{
 +	if (!nb) {
 +		pr_warning("%s: Invalid argument (%p)\n",
 +			   __func__, nb);
 +		return -EINVAL;
 +	}
 +
 +	atomic_notifier_chain_unregister(&opal_notifier_head, nb);
 +	return 0;
 +}
 +EXPORT_SYMBOL_GPL(opal_notifier_unregister);
 +
 +static void opal_do_notifier(uint64_t events)
 +{
 +	unsigned long flags;
 +	uint64_t changed_mask;
 +
 +	if (atomic_read(&opal_notifier_hold))
 +		return;
 +
 +	spin_lock_irqsave(&opal_notifier_lock, flags);
 +	changed_mask = last_notified_mask ^ events;
 +	last_notified_mask = events;
 +	spin_unlock_irqrestore(&opal_notifier_lock, flags);
 +
 +	/*
 +	 * We feed with the event bits and changed bits for
 +	 * enough information to the callback.
 +	 */
 +	atomic_notifier_call_chain(&opal_notifier_head,
 +				   events, (void *)changed_mask);
 +}
 +EXPORT_SYMBOL_GPL(opal_message_notifier_register);
 +
 +void opal_notifier_update_evt(uint64_t evt_mask,
 +			      uint64_t evt_val)
 +{
 +	unsigned long flags;
 +
 +	spin_lock_irqsave(&opal_notifier_lock, flags);
 +	last_notified_mask &= ~evt_mask;
 +	last_notified_mask |= evt_val;
 +	spin_unlock_irqrestore(&opal_notifier_lock, flags);
 +}
 +
 +void opal_notifier_enable(void)
 +{
 +	int64_t rc;
 +	__be64 evt = 0;
 +
 +	atomic_set(&opal_notifier_hold, 0);
 +
 +	/* Process pending events */
 +	rc = opal_poll_events(&evt);
 +	if (rc == OPAL_SUCCESS && evt)
 +		opal_do_notifier(be64_to_cpu(evt));
 +}
 +
 +void opal_notifier_disable(void)
 +{
 +	atomic_set(&opal_notifier_hold, 1);
 +}
 +
++=======
++>>>>>>> 81f2f7ce4c5b (opal: Remove events notifier)
  /*
   * Opal message notifier based on message type. Allow subscribers to get
   * notified for specific messgae type.
@@@ -611,7 -491,7 +614,11 @@@ int opal_handle_hmi_exception(struct pt
  	local_paca->hmi_event_available = 0;
  	rc = opal_poll_events(&evt);
  	if (rc == OPAL_SUCCESS && evt)
++<<<<<<< HEAD
 +		opal_do_notifier(be64_to_cpu(evt));
++=======
+ 		opal_handle_events(be64_to_cpu(evt));
++>>>>>>> 81f2f7ce4c5b (opal: Remove events notifier)
  
  	return 1;
  }
diff --cc arch/powerpc/platforms/powernv/powernv.h
index 1e56962df621,f907f0a494da..000000000000
--- a/arch/powerpc/platforms/powernv/powernv.h
+++ b/arch/powerpc/platforms/powernv/powernv.h
@@@ -27,6 -35,9 +27,12 @@@ extern u32 pnv_get_supported_cpuidle_st
  
  extern void pnv_lpc_init(void);
  
++<<<<<<< HEAD
++=======
+ extern void opal_handle_events(uint64_t events);
+ extern void opal_event_shutdown(void);
+ 
++>>>>>>> 81f2f7ce4c5b (opal: Remove events notifier)
  bool cpu_core_split_required(void);
  
  #endif /* _POWERNV_H */
* Unmerged path arch/powerpc/platforms/powernv/opal-irqchip.c
* Unmerged path arch/powerpc/platforms/powernv/opal-irqchip.c
* Unmerged path arch/powerpc/platforms/powernv/opal.c
* Unmerged path arch/powerpc/platforms/powernv/powernv.h
diff --git a/arch/powerpc/platforms/powernv/setup.c b/arch/powerpc/platforms/powernv/setup.c
index 2371e2aed5dd..0d5c48693691 100644
--- a/arch/powerpc/platforms/powernv/setup.c
+++ b/arch/powerpc/platforms/powernv/setup.c
@@ -200,7 +200,7 @@ static void pnv_prepare_going_down(void)
 	 * Disable all notifiers from OPAL, we can't
 	 * service interrupts anymore anyway
 	 */
-	opal_notifier_disable();
+	opal_event_shutdown();
 
 	/* Soft disable interrupts */
 	local_irq_disable();
