usercopy: remove page-spanning test for now

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Kees Cook <keescook@chromium.org>
commit 8e1f74ea02cf4562404c48c6882214821552c13f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/8e1f74ea.failed

A custom allocator without __GFP_COMP that copies to userspace has been
found in vmw_execbuf_process[1], so this disables the page-span checker
by placing it behind a CONFIG for future work where such things can be
tracked down later.

[1] https://bugzilla.redhat.com/show_bug.cgi?id=1373326

	Reported-by: Vinson Lee <vlee@freedesktop.org>
Fixes: f5509cc18daa ("mm: Hardened usercopy")
	Signed-off-by: Kees Cook <keescook@chromium.org>
(cherry picked from commit 8e1f74ea02cf4562404c48c6882214821552c13f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/usercopy.c
#	security/Kconfig
diff --cc security/Kconfig
index 78bddd1d7f28,2dfc0ce4083e..000000000000
--- a/security/Kconfig
+++ b/security/Kconfig
@@@ -144,6 -118,46 +144,49 @@@ config LSM_MMAP_MIN_ADD
  	  this low address space will need the permission specific to the
  	  systems running LSM.
  
++<<<<<<< HEAD
++=======
+ config HAVE_HARDENED_USERCOPY_ALLOCATOR
+ 	bool
+ 	help
+ 	  The heap allocator implements __check_heap_object() for
+ 	  validating memory ranges against heap object sizes in
+ 	  support of CONFIG_HARDENED_USERCOPY.
+ 
+ config HAVE_ARCH_HARDENED_USERCOPY
+ 	bool
+ 	help
+ 	  The architecture supports CONFIG_HARDENED_USERCOPY by
+ 	  calling check_object_size() just before performing the
+ 	  userspace copies in the low level implementation of
+ 	  copy_to_user() and copy_from_user().
+ 
+ config HARDENED_USERCOPY
+ 	bool "Harden memory copies between kernel and userspace"
+ 	depends on HAVE_ARCH_HARDENED_USERCOPY
+ 	depends on HAVE_HARDENED_USERCOPY_ALLOCATOR
+ 	select BUG
+ 	help
+ 	  This option checks for obviously wrong memory regions when
+ 	  copying memory to/from the kernel (via copy_to_user() and
+ 	  copy_from_user() functions) by rejecting memory ranges that
+ 	  are larger than the specified heap object, span multiple
+ 	  separately allocates pages, are not on the process stack,
+ 	  or are part of the kernel text. This kills entire classes
+ 	  of heap overflow exploits and similar kernel memory exposures.
+ 
+ config HARDENED_USERCOPY_PAGESPAN
+ 	bool "Refuse to copy allocations that span multiple pages"
+ 	depends on HARDENED_USERCOPY
+ 	depends on !COMPILE_TEST
+ 	help
+ 	  When a multi-page allocation is done without __GFP_COMP,
+ 	  hardened usercopy will reject attempts to copy it. There are,
+ 	  however, several cases of this in the kernel that have not all
+ 	  been removed. This config is intended to be used only while
+ 	  trying to find such users.
+ 
++>>>>>>> 8e1f74ea02cf (usercopy: remove page-spanning test for now)
  source security/selinux/Kconfig
  source security/smack/Kconfig
  source security/tomoyo/Kconfig
* Unmerged path mm/usercopy.c
* Unmerged path mm/usercopy.c
* Unmerged path security/Kconfig
