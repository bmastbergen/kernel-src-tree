nfp: bpf: factor out is_mbpf_load & is_mbpf_store

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jiong Wang <jiong.wang@netronome.com>
commit 5e4d6d20939f8e77b7734c0cea6886dff60c99de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5e4d6d20.failed

It is usual that we need to check if one BPF insn is for loading/storeing
data from/to memory.

Therefore, it makes sense to factor out related code to become common
helper functions.

	Signed-off-by: Jiong Wang <jiong.wang@netronome.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 5e4d6d20939f8e77b7734c0cea6886dff60c99de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/bpf/verifier.c
diff --cc drivers/net/ethernet/netronome/nfp/bpf/verifier.c
index 8b981cfbeb65,d2bf29c90226..000000000000
--- a/drivers/net/ethernet/netronome/nfp/bpf/verifier.c
+++ b/drivers/net/ethernet/netronome/nfp/bpf/verifier.c
@@@ -179,13 -178,13 +179,21 @@@ nfp_verify_insn(struct bpf_verifier_en
  	}
  
  	if (meta->insn.code == (BPF_JMP | BPF_EXIT))
 -		return nfp_bpf_check_exit(nfp_prog, env);
 +		return nfp_bpf_check_exit(priv->prog, env);
  
++<<<<<<< HEAD
 +	if ((meta->insn.code & ~BPF_SIZE_MASK) == (BPF_LDX | BPF_MEM))
 +		return nfp_bpf_check_ptr(priv->prog, meta, env,
 +					 meta->insn.src_reg);
 +	if ((meta->insn.code & ~BPF_SIZE_MASK) == (BPF_STX | BPF_MEM))
 +		return nfp_bpf_check_ptr(priv->prog, meta, env,
++=======
+ 	if (is_mbpf_load(meta))
+ 		return nfp_bpf_check_ptr(nfp_prog, meta, env,
+ 					 meta->insn.src_reg);
+ 	if (is_mbpf_store(meta))
+ 		return nfp_bpf_check_ptr(nfp_prog, meta, env,
++>>>>>>> 5e4d6d20939f (nfp: bpf: factor out is_mbpf_load & is_mbpf_store)
  					 meta->insn.dst_reg);
  
  	return 0;
diff --git a/drivers/net/ethernet/netronome/nfp/bpf/main.h b/drivers/net/ethernet/netronome/nfp/bpf/main.h
index 5212b54abaf7..6c548622f1c4 100644
--- a/drivers/net/ethernet/netronome/nfp/bpf/main.h
+++ b/drivers/net/ethernet/netronome/nfp/bpf/main.h
@@ -141,6 +141,16 @@ static inline u8 mbpf_mode(const struct nfp_insn_meta *meta)
 }
 #endif
 
+static inline bool is_mbpf_load(const struct nfp_insn_meta *meta)
+{
+	return (meta->insn.code & ~BPF_SIZE_MASK) == (BPF_LDX | BPF_MEM);
+}
+
+static inline bool is_mbpf_store(const struct nfp_insn_meta *meta)
+{
+	return (meta->insn.code & ~BPF_SIZE_MASK) == (BPF_STX | BPF_MEM);
+}
+
 /**
  * struct nfp_prog - nfp BPF program
  * @prog: machine code
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/verifier.c
