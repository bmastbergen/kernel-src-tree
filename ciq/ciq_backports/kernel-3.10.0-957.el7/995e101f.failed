nfp: bpf: encode extended LM pointer operands

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 995e101ffa71eff6ae5f5d5bf1ca8ec757b4ed21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/995e101f.failed

Most instructions have special fields which allow switching
between base and extended Local Memory pointers.  Introduce
those to register encoding, we will use the extra LM pointers
to access high addresses of the stack.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 995e101ffa71eff6ae5f5d5bf1ca8ec757b4ed21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_asm.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_asm.h
index 27d87d9bf270,40a51a45afd7..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_asm.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_asm.h
@@@ -91,30 -91,33 +91,56 @@@ enum br_ctx_signal_state 
  	BR_CSS_NONE = 2,
  };
  
++<<<<<<< HEAD
 +#define OP_BBYTE_BASE	0x0c800000000ULL
 +#define OP_BB_A_SRC	0x000000000ffULL
 +#define OP_BB_BYTE	0x00000000300ULL
 +#define OP_BB_B_SRC	0x0000003fc00ULL
 +#define OP_BB_I8	0x00000040000ULL
 +#define OP_BB_EQ	0x00000080000ULL
 +#define OP_BB_DEFBR	0x00000300000ULL
 +#define OP_BB_ADDR_LO	0x007ffc00000ULL
 +#define OP_BB_ADDR_HI	0x10000000000ULL
++=======
+ #define OP_BBYTE_BASE		0x0c800000000ULL
+ #define OP_BB_A_SRC		0x000000000ffULL
+ #define OP_BB_BYTE		0x00000000300ULL
+ #define OP_BB_B_SRC		0x0000003fc00ULL
+ #define OP_BB_I8		0x00000040000ULL
+ #define OP_BB_EQ		0x00000080000ULL
+ #define OP_BB_DEFBR		0x00000300000ULL
+ #define OP_BB_ADDR_LO		0x007ffc00000ULL
+ #define OP_BB_ADDR_HI		0x10000000000ULL
+ #define OP_BB_SRC_LMEXTN	0x40000000000ULL
 -
 -#define OP_BALU_BASE		0x0e800000000ULL
 -#define OP_BA_A_SRC		0x000000003ffULL
 -#define OP_BA_B_SRC		0x000000ffc00ULL
 -#define OP_BA_DEFBR		0x00000300000ULL
 -#define OP_BA_ADDR_HI		0x0007fc00000ULL
 -
++>>>>>>> 995e101ffa71 (nfp: bpf: encode extended LM pointer operands)
 +
 +#define OP_BALU_BASE	0x0e800000000ULL
 +#define OP_BA_A_SRC	0x000000003ffULL
 +#define OP_BA_B_SRC	0x000000ffc00ULL
 +#define OP_BA_DEFBR	0x00000300000ULL
 +#define OP_BA_ADDR_HI	0x0007fc00000ULL
 +
++<<<<<<< HEAD
 +#define OP_IMMED_A_SRC	0x000000003ffULL
 +#define OP_IMMED_B_SRC	0x000000ffc00ULL
 +#define OP_IMMED_IMM	0x0000ff00000ULL
 +#define OP_IMMED_WIDTH	0x00060000000ULL
 +#define OP_IMMED_INV	0x00080000000ULL
 +#define OP_IMMED_SHIFT	0x00600000000ULL
 +#define OP_IMMED_BASE	0x0f000000000ULL
 +#define OP_IMMED_WR_AB	0x20000000000ULL
++=======
+ #define OP_IMMED_A_SRC		0x000000003ffULL
+ #define OP_IMMED_B_SRC		0x000000ffc00ULL
+ #define OP_IMMED_IMM		0x0000ff00000ULL
+ #define OP_IMMED_WIDTH		0x00060000000ULL
+ #define OP_IMMED_INV		0x00080000000ULL
+ #define OP_IMMED_SHIFT		0x00600000000ULL
+ #define OP_IMMED_BASE		0x0f000000000ULL
+ #define OP_IMMED_WR_AB		0x20000000000ULL
+ #define OP_IMMED_SRC_LMEXTN	0x40000000000ULL
+ #define OP_IMMED_DST_LMEXTN	0x80000000000ULL
++>>>>>>> 995e101ffa71 (nfp: bpf: encode extended LM pointer operands)
  
  enum immed_width {
  	IMMED_WIDTH_ALL = 0,
@@@ -128,17 -131,19 +154,33 @@@ enum immed_shift 
  	IMMED_SHIFT_2B = 2,
  };
  
++<<<<<<< HEAD
 +#define OP_SHF_BASE	0x08000000000ULL
 +#define OP_SHF_A_SRC	0x000000000ffULL
 +#define OP_SHF_SC	0x00000000300ULL
 +#define OP_SHF_B_SRC	0x0000003fc00ULL
 +#define OP_SHF_I8	0x00000040000ULL
 +#define OP_SHF_SW	0x00000080000ULL
 +#define OP_SHF_DST	0x0000ff00000ULL
 +#define OP_SHF_SHIFT	0x001f0000000ULL
 +#define OP_SHF_OP	0x00e00000000ULL
 +#define OP_SHF_DST_AB	0x01000000000ULL
 +#define OP_SHF_WR_AB	0x20000000000ULL
++=======
+ #define OP_SHF_BASE		0x08000000000ULL
+ #define OP_SHF_A_SRC		0x000000000ffULL
+ #define OP_SHF_SC		0x00000000300ULL
+ #define OP_SHF_B_SRC		0x0000003fc00ULL
+ #define OP_SHF_I8		0x00000040000ULL
+ #define OP_SHF_SW		0x00000080000ULL
+ #define OP_SHF_DST		0x0000ff00000ULL
+ #define OP_SHF_SHIFT		0x001f0000000ULL
+ #define OP_SHF_OP		0x00e00000000ULL
+ #define OP_SHF_DST_AB		0x01000000000ULL
+ #define OP_SHF_WR_AB		0x20000000000ULL
+ #define OP_SHF_SRC_LMEXTN	0x40000000000ULL
+ #define OP_SHF_DST_LMEXTN	0x80000000000ULL
++>>>>>>> 995e101ffa71 (nfp: bpf: encode extended LM pointer operands)
  
  enum shf_op {
  	SHF_OP_NONE = 0,
@@@ -153,14 -158,16 +195,27 @@@ enum shf_sc 
  	SHF_SC_R_DSHF = 3,
  };
  
++<<<<<<< HEAD
 +#define OP_ALU_A_SRC	0x000000003ffULL
 +#define OP_ALU_B_SRC	0x000000ffc00ULL
 +#define OP_ALU_DST	0x0003ff00000ULL
 +#define OP_ALU_SW	0x00040000000ULL
 +#define OP_ALU_OP	0x00f80000000ULL
 +#define OP_ALU_DST_AB	0x01000000000ULL
 +#define OP_ALU_BASE	0x0a000000000ULL
 +#define OP_ALU_WR_AB	0x20000000000ULL
++=======
+ #define OP_ALU_A_SRC		0x000000003ffULL
+ #define OP_ALU_B_SRC		0x000000ffc00ULL
+ #define OP_ALU_DST		0x0003ff00000ULL
+ #define OP_ALU_SW		0x00040000000ULL
+ #define OP_ALU_OP		0x00f80000000ULL
+ #define OP_ALU_DST_AB		0x01000000000ULL
+ #define OP_ALU_BASE		0x0a000000000ULL
+ #define OP_ALU_WR_AB		0x20000000000ULL
+ #define OP_ALU_SRC_LMEXTN	0x40000000000ULL
+ #define OP_ALU_DST_LMEXTN	0x80000000000ULL
++>>>>>>> 995e101ffa71 (nfp: bpf: encode extended LM pointer operands)
  
  enum alu_op {
  	ALU_OP_NONE	= 0x00,
@@@ -179,26 -186,28 +234,41 @@@ enum alu_dst_ab 
  	ALU_DST_B = 1,
  };
  
++<<<<<<< HEAD
 +#define OP_LDF_BASE	0x0c000000000ULL
 +#define OP_LDF_A_SRC	0x000000000ffULL
 +#define OP_LDF_SC	0x00000000300ULL
 +#define OP_LDF_B_SRC	0x0000003fc00ULL
 +#define OP_LDF_I8	0x00000040000ULL
 +#define OP_LDF_SW	0x00000080000ULL
 +#define OP_LDF_ZF	0x00000100000ULL
 +#define OP_LDF_BMASK	0x0000f000000ULL
 +#define OP_LDF_SHF	0x001f0000000ULL
 +#define OP_LDF_WR_AB	0x20000000000ULL
++=======
+ #define OP_LDF_BASE		0x0c000000000ULL
+ #define OP_LDF_A_SRC		0x000000000ffULL
+ #define OP_LDF_SC		0x00000000300ULL
+ #define OP_LDF_B_SRC		0x0000003fc00ULL
+ #define OP_LDF_I8		0x00000040000ULL
+ #define OP_LDF_SW		0x00000080000ULL
+ #define OP_LDF_ZF		0x00000100000ULL
+ #define OP_LDF_BMASK		0x0000f000000ULL
+ #define OP_LDF_SHF		0x001f0000000ULL
+ #define OP_LDF_WR_AB		0x20000000000ULL
+ #define OP_LDF_SRC_LMEXTN	0x40000000000ULL
+ #define OP_LDF_DST_LMEXTN	0x80000000000ULL
 -
 -#define OP_CMD_A_SRC		0x000000000ffULL
 -#define OP_CMD_CTX		0x00000000300ULL
 -#define OP_CMD_B_SRC		0x0000003fc00ULL
 -#define OP_CMD_TOKEN		0x000000c0000ULL
 -#define OP_CMD_XFER		0x00001f00000ULL
 -#define OP_CMD_CNT		0x0000e000000ULL
 -#define OP_CMD_SIG		0x000f0000000ULL
 -#define OP_CMD_TGT_CMD		0x07f00000000ULL
 -#define OP_CMD_MODE	       0x1c0000000000ULL
++>>>>>>> 995e101ffa71 (nfp: bpf: encode extended LM pointer operands)
 +
 +#define OP_CMD_A_SRC	 0x000000000ffULL
 +#define OP_CMD_CTX	 0x00000000300ULL
 +#define OP_CMD_B_SRC	 0x0000003fc00ULL
 +#define OP_CMD_TOKEN	 0x000000c0000ULL
 +#define OP_CMD_XFER	 0x00001f00000ULL
 +#define OP_CMD_CNT	 0x0000e000000ULL
 +#define OP_CMD_SIG	 0x000f0000000ULL
 +#define OP_CMD_TGT_CMD	 0x07f00000000ULL
 +#define OP_CMD_MODE	0x1c0000000000ULL
  
  struct cmd_tgt_act {
  	u8 token;
@@@ -226,11 -235,13 +296,21 @@@ enum cmd_ctx_swap 
  	CMD_CTX_NO_SWAP = 3,
  };
  
++<<<<<<< HEAD
 +#define OP_LCSR_BASE	0x0fc00000000ULL
 +#define OP_LCSR_A_SRC	0x000000003ffULL
 +#define OP_LCSR_B_SRC	0x000000ffc00ULL
 +#define OP_LCSR_WRITE	0x00000200000ULL
 +#define OP_LCSR_ADDR	0x001ffc00000ULL
++=======
+ #define OP_LCSR_BASE		0x0fc00000000ULL
+ #define OP_LCSR_A_SRC		0x000000003ffULL
+ #define OP_LCSR_B_SRC		0x000000ffc00ULL
+ #define OP_LCSR_WRITE		0x00000200000ULL
+ #define OP_LCSR_ADDR		0x001ffc00000ULL
+ #define OP_LCSR_SRC_LMEXTN	0x40000000000ULL
+ #define OP_LCSR_DST_LMEXTN	0x80000000000ULL
++>>>>>>> 995e101ffa71 (nfp: bpf: encode extended LM pointer operands)
  
  enum lcsr_wr_src {
  	LCSR_WR_AREG,
@@@ -241,20 -252,11 +321,22 @@@
  #define OP_CARB_BASE		0x0e000000000ULL
  #define OP_CARB_OR		0x00000010000ULL
  
 +#define NFP_CSR_CTX_PTR		0x20
 +
 +#define NFP_IND_ME_REFL_WR_SIG_INIT	3
 +#define NFP_IND_ME_CTX_PTR_BASE_MASK	GENMASK(9, 0)
 +#define NFP_IND_NUM_CONTEXTS		8
 +
 +static inline u32 nfp_get_ind_csr_ctx_ptr_offs(u32 read_offset)
 +{
 +	return (read_offset & ~NFP_IND_ME_CTX_PTR_BASE_MASK) | NFP_CSR_CTX_PTR;
 +}
 +
  /* Software register representation, independent of operand type */
  #define NN_REG_TYPE	GENMASK(31, 24)
- #define NN_REG_LM_IDX	BIT(22)
+ #define NN_REG_LM_IDX	GENMASK(23, 22)
+ #define NN_REG_LM_IDX_HI	BIT(23)
+ #define NN_REG_LM_IDX_LO	BIT(22)
  #define NN_REG_LM_MOD	GENMASK(21, 20)
  #define NN_REG_VAL	GENMASK(7, 0)
  
diff --git a/drivers/net/ethernet/netronome/nfp/bpf/jit.c b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
index 4fa220f710d2..d7dc19feba8d 100644
--- a/drivers/net/ethernet/netronome/nfp/bpf/jit.c
+++ b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
@@ -153,6 +153,11 @@ emit_cmd(struct nfp_prog *nfp_prog, enum cmd_tgt_map op,
 		nfp_prog->error = -EFAULT;
 		return;
 	}
+	if (reg.dst_lmextn || reg.src_lmextn) {
+		pr_err("cmd can't use LMextn\n");
+		nfp_prog->error = -EFAULT;
+		return;
+	}
 
 	__emit_cmd(nfp_prog, op, mode, xfer, reg.areg, reg.breg, size, sync);
 }
@@ -198,7 +203,7 @@ emit_br(struct nfp_prog *nfp_prog, enum br_mask mask, u16 addr, u8 defer)
 
 static void
 __emit_br_byte(struct nfp_prog *nfp_prog, u8 areg, u8 breg, bool imm8,
-	       u8 byte, bool equal, u16 addr, u8 defer)
+	       u8 byte, bool equal, u16 addr, u8 defer, bool src_lmextn)
 {
 	u16 addr_lo, addr_hi;
 	u64 insn;
@@ -214,32 +219,34 @@ __emit_br_byte(struct nfp_prog *nfp_prog, u8 areg, u8 breg, bool imm8,
 		FIELD_PREP(OP_BB_EQ, equal) |
 		FIELD_PREP(OP_BB_DEFBR, defer) |
 		FIELD_PREP(OP_BB_ADDR_LO, addr_lo) |
-		FIELD_PREP(OP_BB_ADDR_HI, addr_hi);
+		FIELD_PREP(OP_BB_ADDR_HI, addr_hi) |
+		FIELD_PREP(OP_BB_SRC_LMEXTN, src_lmextn);
 
 	nfp_prog_push(nfp_prog, insn);
 }
 
 static void
 emit_br_byte_neq(struct nfp_prog *nfp_prog,
-		 swreg dst, u8 imm, u8 byte, u16 addr, u8 defer)
+		 swreg src, u8 imm, u8 byte, u16 addr, u8 defer)
 {
 	struct nfp_insn_re_regs reg;
 	int err;
 
-	err = swreg_to_restricted(reg_none(), dst, reg_imm(imm), &reg, true);
+	err = swreg_to_restricted(reg_none(), src, reg_imm(imm), &reg, true);
 	if (err) {
 		nfp_prog->error = err;
 		return;
 	}
 
 	__emit_br_byte(nfp_prog, reg.areg, reg.breg, reg.i8, byte, false, addr,
-		       defer);
+		       defer, reg.src_lmextn);
 }
 
 static void
 __emit_immed(struct nfp_prog *nfp_prog, u16 areg, u16 breg, u16 imm_hi,
 	     enum immed_width width, bool invert,
-	     enum immed_shift shift, bool wr_both)
+	     enum immed_shift shift, bool wr_both,
+	     bool dst_lmextn, bool src_lmextn)
 {
 	u64 insn;
 
@@ -250,7 +257,9 @@ __emit_immed(struct nfp_prog *nfp_prog, u16 areg, u16 breg, u16 imm_hi,
 		FIELD_PREP(OP_IMMED_WIDTH, width) |
 		FIELD_PREP(OP_IMMED_INV, invert) |
 		FIELD_PREP(OP_IMMED_SHIFT, shift) |
-		FIELD_PREP(OP_IMMED_WR_AB, wr_both);
+		FIELD_PREP(OP_IMMED_WR_AB, wr_both) |
+		FIELD_PREP(OP_IMMED_SRC_LMEXTN, src_lmextn) |
+		FIELD_PREP(OP_IMMED_DST_LMEXTN, dst_lmextn);
 
 	nfp_prog_push(nfp_prog, insn);
 }
@@ -274,13 +283,15 @@ emit_immed(struct nfp_prog *nfp_prog, swreg dst, u16 imm,
 	}
 
 	__emit_immed(nfp_prog, reg.areg, reg.breg, imm >> 8, width,
-		     invert, shift, reg.wr_both);
+		     invert, shift, reg.wr_both,
+		     reg.dst_lmextn, reg.src_lmextn);
 }
 
 static void
 __emit_shf(struct nfp_prog *nfp_prog, u16 dst, enum alu_dst_ab dst_ab,
 	   enum shf_sc sc, u8 shift,
-	   u16 areg, enum shf_op op, u16 breg, bool i8, bool sw, bool wr_both)
+	   u16 areg, enum shf_op op, u16 breg, bool i8, bool sw, bool wr_both,
+	   bool dst_lmextn, bool src_lmextn)
 {
 	u64 insn;
 
@@ -302,7 +313,9 @@ __emit_shf(struct nfp_prog *nfp_prog, u16 dst, enum alu_dst_ab dst_ab,
 		FIELD_PREP(OP_SHF_SHIFT, shift) |
 		FIELD_PREP(OP_SHF_OP, op) |
 		FIELD_PREP(OP_SHF_DST_AB, dst_ab) |
-		FIELD_PREP(OP_SHF_WR_AB, wr_both);
+		FIELD_PREP(OP_SHF_WR_AB, wr_both) |
+		FIELD_PREP(OP_SHF_SRC_LMEXTN, src_lmextn) |
+		FIELD_PREP(OP_SHF_DST_LMEXTN, dst_lmextn);
 
 	nfp_prog_push(nfp_prog, insn);
 }
@@ -321,12 +334,14 @@ emit_shf(struct nfp_prog *nfp_prog, swreg dst,
 	}
 
 	__emit_shf(nfp_prog, reg.dst, reg.dst_ab, sc, shift,
-		   reg.areg, op, reg.breg, reg.i8, reg.swap, reg.wr_both);
+		   reg.areg, op, reg.breg, reg.i8, reg.swap, reg.wr_both,
+		   reg.dst_lmextn, reg.src_lmextn);
 }
 
 static void
 __emit_alu(struct nfp_prog *nfp_prog, u16 dst, enum alu_dst_ab dst_ab,
-	   u16 areg, enum alu_op op, u16 breg, bool swap, bool wr_both)
+	   u16 areg, enum alu_op op, u16 breg, bool swap, bool wr_both,
+	   bool dst_lmextn, bool src_lmextn)
 {
 	u64 insn;
 
@@ -337,7 +352,9 @@ __emit_alu(struct nfp_prog *nfp_prog, u16 dst, enum alu_dst_ab dst_ab,
 		FIELD_PREP(OP_ALU_SW, swap) |
 		FIELD_PREP(OP_ALU_OP, op) |
 		FIELD_PREP(OP_ALU_DST_AB, dst_ab) |
-		FIELD_PREP(OP_ALU_WR_AB, wr_both);
+		FIELD_PREP(OP_ALU_WR_AB, wr_both) |
+		FIELD_PREP(OP_ALU_SRC_LMEXTN, src_lmextn) |
+		FIELD_PREP(OP_ALU_DST_LMEXTN, dst_lmextn);
 
 	nfp_prog_push(nfp_prog, insn);
 }
@@ -356,13 +373,15 @@ emit_alu(struct nfp_prog *nfp_prog, swreg dst,
 	}
 
 	__emit_alu(nfp_prog, reg.dst, reg.dst_ab,
-		   reg.areg, op, reg.breg, reg.swap, reg.wr_both);
+		   reg.areg, op, reg.breg, reg.swap, reg.wr_both,
+		   reg.dst_lmextn, reg.src_lmextn);
 }
 
 static void
 __emit_ld_field(struct nfp_prog *nfp_prog, enum shf_sc sc,
 		u8 areg, u8 bmask, u8 breg, u8 shift, bool imm8,
-		bool zero, bool swap, bool wr_both)
+		bool zero, bool swap, bool wr_both,
+		bool dst_lmextn, bool src_lmextn)
 {
 	u64 insn;
 
@@ -375,7 +394,9 @@ __emit_ld_field(struct nfp_prog *nfp_prog, enum shf_sc sc,
 		FIELD_PREP(OP_LDF_ZF, zero) |
 		FIELD_PREP(OP_LDF_BMASK, bmask) |
 		FIELD_PREP(OP_LDF_SHF, shift) |
-		FIELD_PREP(OP_LDF_WR_AB, wr_both);
+		FIELD_PREP(OP_LDF_WR_AB, wr_both) |
+		FIELD_PREP(OP_LDF_SRC_LMEXTN, src_lmextn) |
+		FIELD_PREP(OP_LDF_DST_LMEXTN, dst_lmextn);
 
 	nfp_prog_push(nfp_prog, insn);
 }
@@ -394,7 +415,8 @@ emit_ld_field_any(struct nfp_prog *nfp_prog, enum shf_sc sc, u8 shift,
 	}
 
 	__emit_ld_field(nfp_prog, sc, reg.areg, bmask, reg.breg, shift,
-			reg.i8, zero, reg.swap, reg.wr_both);
+			reg.i8, zero, reg.swap, reg.wr_both,
+			reg.dst_lmextn, reg.src_lmextn);
 }
 
 static void
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_asm.c b/drivers/net/ethernet/netronome/nfp/nfp_asm.c
index 4bcab43da16d..1decc638ea6f 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_asm.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_asm.c
@@ -130,6 +130,9 @@ int swreg_to_unrestricted(swreg dst, swreg lreg, swreg rreg,
 		reg->breg = nfp_swreg_to_unreg(rreg, false);
 	}
 
+	reg->dst_lmextn = swreg_lmextn(dst);
+	reg->src_lmextn = swreg_lmextn(lreg) | swreg_lmextn(rreg);
+
 	return 0;
 }
 
@@ -207,5 +210,8 @@ int swreg_to_restricted(swreg dst, swreg lreg, swreg rreg,
 		reg->breg = nfp_swreg_to_rereg(rreg, false, has_imm8, &reg->i8);
 	}
 
+	reg->dst_lmextn = swreg_lmextn(dst);
+	reg->src_lmextn = swreg_lmextn(lreg) | swreg_lmextn(rreg);
+
 	return 0;
 }
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_asm.h
