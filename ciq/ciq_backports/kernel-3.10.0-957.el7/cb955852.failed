iio: Remove support for the legacy event config interface

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] Remove support for the legacy event config interface (Tony Camuso) [1559170]
Rebuild_FUZZ: 95.41%
commit-author Lars-Peter Clausen <lars@metafoo.de>
commit cb955852a48c29ef7bd847ce993102e2b58295d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/cb955852.failed

Now that all drivers have been converted to the new event config interface we
can remove for the legacy event config interface. Also drop the '_new' suffix
for the event config interface callbacks, since those are the only callbacks
now.

	Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit cb955852a48c29ef7bd847ce993102e2b58295d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/light/apds9300.c
#	drivers/iio/light/cm36651.c
#	drivers/iio/light/gp2ap020a00f.c
#	drivers/staging/iio/adc/ad7291.c
#	drivers/staging/iio/adc/ad799x_core.c
#	drivers/staging/iio/light/tsl2x7x_core.c
#	include/linux/iio/iio.h
diff --cc drivers/staging/iio/adc/ad7291.c
index d088c662d5cd,357cef2a6f4c..000000000000
--- a/drivers/staging/iio/adc/ad7291.c
+++ b/drivers/staging/iio/adc/ad7291.c
@@@ -577,7 -456,7 +577,11 @@@ static const struct iio_info ad7291_inf
  	.write_event_config = &ad7291_write_event_config,
  	.read_event_value = &ad7291_read_event_value,
  	.write_event_value = &ad7291_write_event_value,
++<<<<<<< HEAD
 +	.event_attrs = &ad7291_event_attribute_group,
++=======
+ 	.driver_module = THIS_MODULE,
++>>>>>>> cb955852a48c (iio: Remove support for the legacy event config interface)
  };
  
  static int ad7291_probe(struct i2c_client *client,
diff --cc drivers/staging/iio/adc/ad799x_core.c
index 8dc97b36e05a,5ea36410f716..000000000000
--- a/drivers/staging/iio/adc/ad799x_core.c
+++ b/drivers/staging/iio/adc/ad799x_core.c
@@@ -445,18 -374,9 +445,22 @@@ static const struct iio_info ad7991_inf
  	.driver_module = THIS_MODULE,
  };
  
 +static const struct iio_info ad7992_info = {
 +	.read_raw = &ad799x_read_raw,
 +	.event_attrs = &ad7992_event_attrs_group,
 +	.read_event_config = &ad799x_read_event_config,
 +	.read_event_value = &ad799x_read_event_value,
 +	.write_event_value = &ad799x_write_event_value,
 +	.driver_module = THIS_MODULE,
 +};
 +
  static const struct iio_info ad7993_4_7_8_info = {
  	.read_raw = &ad799x_read_raw,
++<<<<<<< HEAD
 +	.event_attrs = &ad7993_4_7_8_event_attrs_group,
++=======
+ 	.event_attrs = &ad799x_event_attrs_group,
++>>>>>>> cb955852a48c (iio: Remove support for the legacy event config interface)
  	.read_event_config = &ad799x_read_event_config,
  	.read_event_value = &ad799x_read_event_value,
  	.write_event_value = &ad799x_write_event_value,
diff --cc drivers/staging/iio/light/tsl2x7x_core.c
index c99f890cc6c6,1e538086d48b..000000000000
--- a/drivers/staging/iio/light/tsl2x7x_core.c
+++ b/drivers/staging/iio/light/tsl2x7x_core.c
@@@ -1723,6 -1720,20 +1723,23 @@@ static const struct iio_info tsl2X7X_de
  		.write_event_value = &tsl2x7x_write_thresh,
  		.read_event_config = &tsl2x7x_read_interrupt_config,
  		.write_event_config = &tsl2x7x_write_interrupt_config,
++<<<<<<< HEAD
++=======
+ 	},
+ };
+ 
+ static const struct iio_event_spec tsl2x7x_events[] = {
+ 	{
+ 		.type = IIO_EV_TYPE_THRESH,
+ 		.dir = IIO_EV_DIR_RISING,
+ 		.mask_separate = BIT(IIO_EV_INFO_VALUE) |
+ 			BIT(IIO_EV_INFO_ENABLE),
+ 	}, {
+ 		.type = IIO_EV_TYPE_THRESH,
+ 		.dir = IIO_EV_DIR_FALLING,
+ 		.mask_separate = BIT(IIO_EV_INFO_VALUE) |
+ 			BIT(IIO_EV_INFO_ENABLE),
++>>>>>>> cb955852a48c (iio: Remove support for the legacy event config interface)
  	},
  };
  
diff --cc include/linux/iio/iio.h
index 8e1ef224f91d,75a8a20c8179..000000000000
--- a/include/linux/iio/iio.h
+++ b/include/linux/iio/iio.h
@@@ -173,7 -181,10 +173,14 @@@ struct iio_event_spec 
   *			this channel.
   * @info_mask_shared_by_type: What information is to be exported that is shared
   *			by all channels of the same type.
++<<<<<<< HEAD
 + * @event_mask:		What events can this channel produce.
++=======
+  * @info_mask_shared_by_dir: What information is to be exported that is shared
+  *			by all channels of the same direction.
+  * @info_mask_shared_by_all: What information is to be exported that is shared
+  *			by all channels.
++>>>>>>> cb955852a48c (iio: Remove support for the legacy event config interface)
   * @event_spec:		Array of events which should be registered for this
   *			channel.
   * @num_event_specs:	Size of the event_spec array.
@@@ -212,7 -223,8 +219,12 @@@ struct iio_chan_spec 
  	} scan_type;
  	long			info_mask_separate;
  	long			info_mask_shared_by_type;
++<<<<<<< HEAD
 +	long			event_mask;
++=======
+ 	long			info_mask_shared_by_dir;
+ 	long			info_mask_shared_by_all;
++>>>>>>> cb955852a48c (iio: Remove support for the legacy event config interface)
  	const struct iio_event_spec *event_spec;
  	unsigned int		num_event_specs;
  	const struct iio_chan_spec_ext_info *ext_info;
* Unmerged path drivers/iio/light/apds9300.c
* Unmerged path drivers/iio/light/cm36651.c
* Unmerged path drivers/iio/light/gp2ap020a00f.c
diff --git a/drivers/iio/industrialio-event.c b/drivers/iio/industrialio-event.c
index f27d4aeabaf4..4bb04313ba31 100644
--- a/drivers/iio/industrialio-event.c
+++ b/drivers/iio/industrialio-event.c
@@ -228,13 +228,9 @@ static ssize_t iio_ev_state_store(struct device *dev,
 	if (ret < 0)
 		return ret;
 
-	if (indio_dev->info->write_event_config)
-		ret = indio_dev->info->write_event_config(indio_dev,
-			this_attr->address, val);
-	else
-		ret = indio_dev->info->write_event_config_new(indio_dev,
-			this_attr->c, iio_ev_attr_type(this_attr),
-			iio_ev_attr_dir(this_attr), val);
+	ret = indio_dev->info->write_event_config(indio_dev,
+		this_attr->c, iio_ev_attr_type(this_attr),
+		iio_ev_attr_dir(this_attr), val);
 
 	return (ret < 0) ? ret : len;
 }
@@ -247,13 +243,9 @@ static ssize_t iio_ev_state_show(struct device *dev,
 	struct iio_dev_attr *this_attr = to_iio_dev_attr(attr);
 	int val;
 
-	if (indio_dev->info->read_event_config)
-		val = indio_dev->info->read_event_config(indio_dev,
-			this_attr->address);
-	else
-		val = indio_dev->info->read_event_config_new(indio_dev,
-			this_attr->c, iio_ev_attr_type(this_attr),
-			iio_ev_attr_dir(this_attr));
+	val = indio_dev->info->read_event_config(indio_dev,
+		this_attr->c, iio_ev_attr_type(this_attr),
+		iio_ev_attr_dir(this_attr));
 	if (val < 0)
 		return val;
 	else
@@ -269,21 +261,13 @@ static ssize_t iio_ev_value_show(struct device *dev,
 	int val, val2;
 	int ret;
 
-	if (indio_dev->info->read_event_value) {
-		ret = indio_dev->info->read_event_value(indio_dev,
-			this_attr->address, &val);
-		if (ret < 0)
-			return ret;
-		return sprintf(buf, "%d\n", val);
-	} else {
-		ret = indio_dev->info->read_event_value_new(indio_dev,
-			this_attr->c, iio_ev_attr_type(this_attr),
-			iio_ev_attr_dir(this_attr), iio_ev_attr_info(this_attr),
-			&val, &val2);
-		if (ret < 0)
-			return ret;
-		return iio_format_value(buf, ret, val, val2);
-	}
+	ret = indio_dev->info->read_event_value(indio_dev,
+		this_attr->c, iio_ev_attr_type(this_attr),
+		iio_ev_attr_dir(this_attr), iio_ev_attr_info(this_attr),
+		&val, &val2);
+	if (ret < 0)
+		return ret;
+	return iio_format_value(buf, ret, val, val2);
 }
 
 static ssize_t iio_ev_value_store(struct device *dev,
@@ -296,25 +280,16 @@ static ssize_t iio_ev_value_store(struct device *dev,
 	int val, val2;
 	int ret;
 
-	if (!indio_dev->info->write_event_value &&
-		!indio_dev->info->write_event_value_new)
+	if (!indio_dev->info->write_event_value)
 		return -EINVAL;
 
-	if (indio_dev->info->write_event_value) {
-		ret = kstrtoint(buf, 10, &val);
-		if (ret)
-			return ret;
-		ret = indio_dev->info->write_event_value(indio_dev,
-			this_attr->address, val);
-	} else {
-		ret = iio_str_to_fixpoint(buf, 100000, &val, &val2);
-		if (ret)
-			return ret;
-		ret = indio_dev->info->write_event_value_new(indio_dev,
-			this_attr->c, iio_ev_attr_type(this_attr),
-			iio_ev_attr_dir(this_attr), iio_ev_attr_info(this_attr),
-			val, val2);
-	}
+	ret = iio_str_to_fixpoint(buf, 100000, &val, &val2);
+	if (ret)
+		return ret;
+	ret = indio_dev->info->write_event_value(indio_dev,
+		this_attr->c, iio_ev_attr_type(this_attr),
+		iio_ev_attr_dir(this_attr), iio_ev_attr_info(this_attr),
+		val, val2);
 	if (ret < 0)
 		return ret;
 
@@ -363,7 +338,7 @@ static int iio_device_add_event(struct iio_dev *indio_dev,
 	return attrcount;
 }
 
-static int iio_device_add_event_sysfs_new(struct iio_dev *indio_dev,
+static int iio_device_add_event_sysfs(struct iio_dev *indio_dev,
 	struct iio_chan_spec const *chan)
 {
 	int ret = 0, i, attrcount = 0;
@@ -406,89 +381,6 @@ error_ret:
 	return ret;
 }
 
-static int iio_device_add_event_sysfs_old(struct iio_dev *indio_dev,
-				      struct iio_chan_spec const *chan)
-{
-	int ret = 0, i, attrcount = 0;
-	u64 mask = 0;
-	char *postfix;
-	if (!chan->event_mask)
-		return 0;
-
-	for_each_set_bit(i, &chan->event_mask, sizeof(chan->event_mask)*8) {
-		postfix = kasprintf(GFP_KERNEL, "%s_%s_en",
-				    iio_ev_type_text[i/IIO_EV_DIR_MAX],
-				    iio_ev_dir_text[i%IIO_EV_DIR_MAX]);
-		if (postfix == NULL) {
-			ret = -ENOMEM;
-			goto error_ret;
-		}
-		if (chan->modified)
-			mask = IIO_MOD_EVENT_CODE(chan->type, 0, chan->channel2,
-						  i/IIO_EV_DIR_MAX,
-						  i%IIO_EV_DIR_MAX);
-		else if (chan->differential)
-			mask = IIO_EVENT_CODE(chan->type,
-					      0, 0,
-					      i%IIO_EV_DIR_MAX,
-					      i/IIO_EV_DIR_MAX,
-					      0,
-					      chan->channel,
-					      chan->channel2);
-		else
-			mask = IIO_UNMOD_EVENT_CODE(chan->type,
-						    chan->channel,
-						    i/IIO_EV_DIR_MAX,
-						    i%IIO_EV_DIR_MAX);
-
-		ret = __iio_add_chan_devattr(postfix,
-					     chan,
-					     &iio_ev_state_show,
-					     iio_ev_state_store,
-					     mask,
-					     0,
-					     &indio_dev->dev,
-					     &indio_dev->event_interface->
-					     dev_attr_list);
-		kfree(postfix);
-		if (ret)
-			goto error_ret;
-		attrcount++;
-		postfix = kasprintf(GFP_KERNEL, "%s_%s_value",
-				    iio_ev_type_text[i/IIO_EV_DIR_MAX],
-				    iio_ev_dir_text[i%IIO_EV_DIR_MAX]);
-		if (postfix == NULL) {
-			ret = -ENOMEM;
-			goto error_ret;
-		}
-		ret = __iio_add_chan_devattr(postfix, chan,
-					     iio_ev_value_show,
-					     iio_ev_value_store,
-					     mask,
-					     0,
-					     &indio_dev->dev,
-					     &indio_dev->event_interface->
-					     dev_attr_list);
-		kfree(postfix);
-		if (ret)
-			goto error_ret;
-		attrcount++;
-	}
-	ret = attrcount;
-error_ret:
-	return ret;
-}
-
-
-static int iio_device_add_event_sysfs(struct iio_dev *indio_dev,
-				      struct iio_chan_spec const *chan)
-{
-	if (chan->event_mask)
-		return iio_device_add_event_sysfs_old(indio_dev, chan);
-	else
-		return iio_device_add_event_sysfs_new(indio_dev, chan);
-}
-
 static inline int __iio_add_event_config_attrs(struct iio_dev *indio_dev)
 {
 	int j, ret, attrcount = 0;
@@ -509,8 +401,6 @@ static bool iio_check_for_dynamic_events(struct iio_dev *indio_dev)
 	int j;
 
 	for (j = 0; j < indio_dev->num_channels; j++) {
-		if (indio_dev->channels[j].event_mask != 0)
-			return true;
 		if (indio_dev->channels[j].num_event_specs != 0)
 			return true;
 	}
* Unmerged path drivers/iio/light/apds9300.c
* Unmerged path drivers/iio/light/cm36651.c
* Unmerged path drivers/iio/light/gp2ap020a00f.c
* Unmerged path drivers/staging/iio/adc/ad7291.c
* Unmerged path drivers/staging/iio/adc/ad799x_core.c
* Unmerged path drivers/staging/iio/light/tsl2x7x_core.c
diff --git a/include/linux/iio/events.h b/include/linux/iio/events.h
index 5dab2c41031f..8bbd7bc1043d 100644
--- a/include/linux/iio/events.h
+++ b/include/linux/iio/events.h
@@ -46,10 +46,6 @@ struct iio_event_data {
 	 ((u16)chan))
 
 
-#define IIO_EV_DIR_MAX 4
-#define IIO_EV_BIT(type, direction)			\
-	(1 << (type*IIO_EV_DIR_MAX + direction))
-
 /**
  * IIO_MOD_EVENT_CODE() - create event identifier for modified channels
  * @chan_type:	Type of the channel. Should be one of enum iio_chan_type.
* Unmerged path include/linux/iio/iio.h
