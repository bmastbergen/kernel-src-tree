perf test: Make 'list' use same filtering code as main 'perf test'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 6d02acc1918094de12f885b35db9477e579b6bd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6d02acc1.failed

Before:

  # perf test Synth
  39: Synthesize thread map  : Ok
  41: Synthesize cpu map     : Ok
  42: Synthesize stat config : Ok
  43: Synthesize stat        : Ok
  44: Synthesize stat round  : Ok
  45: Synthesize attr update : Ok
  # perf test list Synth
  #

After:

  # perf test Synth
  39: Synthesize thread map  : Ok
  41: Synthesize cpu map     : Ok
  42: Synthesize stat config : Ok
  43: Synthesize stat        : Ok
  44: Synthesize stat round  : Ok
  45: Synthesize attr update : Ok
  # perf test list Synth
  39: Synthesize thread map
  41: Synthesize cpu map
  42: Synthesize stat config
  43: Synthesize stat
  44: Synthesize stat round
  45: Synthesize attr update
  #

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Thomas Richter <tmricht@linux.vnet.ibm.com>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-v95tqqzuwawsmds3zn2mosje@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 6d02acc1918094de12f885b35db9477e579b6bd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/builtin-test.c
diff --cc tools/perf/tests/builtin-test.c
index 0164e0678b6e,9ecc44e68990..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -376,6 -591,37 +376,40 @@@ static int __cmd_test(int argc, const c
  		}
  	}
  
++<<<<<<< HEAD
++=======
+ 	return run_shell_tests(argc, argv, i, width);
+ }
+ 
+ static int perf_test__list_shell(int argc, const char **argv, int i)
+ {
+ 	DIR *dir;
+ 	struct dirent *ent;
+ 	char path_dir[PATH_MAX];
+ 	const char *path = shell_tests__dir(path_dir, sizeof(path_dir));
+ 
+ 	if (path == NULL)
+ 		return -1;
+ 
+ 	dir = opendir(path);
+ 	if (!dir)
+ 		return -1;
+ 
+ 	for_each_shell_test(dir, ent) {
+ 		int curr = i++;
+ 		char bf[256];
+ 		struct test t = {
+ 			.desc = shell_test__description(bf, sizeof(bf), path, ent->d_name),
+ 		};
+ 
+ 		if (!perf_test__matches(&t, curr, argc, argv))
+ 			continue;
+ 
+ 		pr_info("%2d: %s\n", i, t.desc);
+ 	}
+ 
+ 	closedir(dir);
++>>>>>>> 6d02acc19180 (perf test: Make 'list' use same filtering code as main 'perf test')
  	return 0;
  }
  
* Unmerged path tools/perf/tests/builtin-test.c
