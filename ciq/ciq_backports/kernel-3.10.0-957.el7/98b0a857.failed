sched/deadline: Remove useless parameter from setup_new_dl_entity()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Juri Lelli <juri.lelli@arm.com>
commit 98b0a857805080db04f50b8c71438c9c369ef0b3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/98b0a857.failed

setup_new_dl_entity() takes two parameters, but it only actually uses
one of them, under a different name, to setup a new dl_entity, after:

  2f9f3fdc928 "sched/deadline: Remove dl_new from struct sched_dl_entity"

as we currently do:

  setup_new_dl_entity(&p->dl, &p->dl)

However, before Luca's change we were doing:

  setup_new_dl_entity(dl_se, pi_se)

in update_dl_entity() for a dl_se->new entity: we were using pi_se's
parameters (the potential PI donor) for setting up a new entity.

This change removes the useless second parameter of setup_new_dl_entity().

While we are at it we also optimize things further calling setup_new_dl_
entity() only for already queued tasks, since (as pointed out by Xunlei)
we already do the very same update at tasks wakeup time anyway. By doing
so, we don't need to worry about a potential PI donor anymore, as
rt_mutex_setprio() takes care of that already for us.

	Signed-off-by: Juri Lelli <juri.lelli@arm.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Luca Abeni <luca.abeni@unitn.it>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Xunlei Pang <xpang@redhat.com>
Link: http://lkml.kernel.org/r/1470409675-20935-1-git-send-email-juri.lelli@arm.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 98b0a857805080db04f50b8c71438c9c369ef0b3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/deadline.c
diff --cc kernel/sched/deadline.c
index 77a5fcf8fde2,d091f4a95416..000000000000
--- a/kernel/sched/deadline.c
+++ b/kernel/sched/deadline.c
@@@ -1813,24 -1723,29 +1813,41 @@@ static void switched_from_dl(struct rq 
   */
  static void switched_to_dl(struct rq *rq, struct task_struct *p)
  {
++<<<<<<< HEAD
 +	int check_resched = 1;
 +
 +	if (dl_time_before(p->dl.deadline, rq_clock(rq)))
 +		setup_new_dl_entity(&p->dl, &p->dl);
 +
 +	if (p->on_rq && rq->curr != p) {
++=======
+ 
+ 	/* If p is not queued we will update its parameters at next wakeup. */
+ 	if (!task_on_rq_queued(p))
+ 		return;
+ 
+ 	/*
+ 	 * If p is boosted we already updated its params in
+ 	 * rt_mutex_setprio()->enqueue_task(..., ENQUEUE_REPLENISH),
+ 	 * p's deadline being now already after rq_clock(rq).
+ 	 */
+ 	if (dl_time_before(p->dl.deadline, rq_clock(rq)))
+ 		setup_new_dl_entity(&p->dl);
+ 
+ 	if (rq->curr != p) {
++>>>>>>> 98b0a8578050 (sched/deadline: Remove useless parameter from setup_new_dl_entity())
  #ifdef CONFIG_SMP
 -		if (tsk_nr_cpus_allowed(p) > 1 && rq->dl.overloaded)
 -			queue_push_tasks(rq);
 -#else
 -		if (dl_task(rq->curr))
 -			check_preempt_curr_dl(rq, p, 0);
 -		else
 -			resched_curr(rq);
 -#endif
 +		if (p->nr_cpus_allowed > 1 && rq->dl.overloaded &&
 +		    push_dl_task(rq) && rq != task_rq(p))
 +			/* Only reschedule if pushing failed */
 +			check_resched = 0;
 +#endif /* CONFIG_SMP */
 +		if (check_resched) {
 +			if (dl_task(rq->curr))
 +				check_preempt_curr_dl(rq, p, 0);
 +			else
 +				resched_curr(rq);
 +		}
  	}
  }
  
* Unmerged path kernel/sched/deadline.c
