nfp: bpf: implement helpers for FW map ops

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit ff3d43f7568c82b335d7df2d40a31447c3fce10c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ff3d43f7.failed

Implement calls for FW map communication.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit ff3d43f7568c82b335d7df2d40a31447c3fce10c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/bpf/cmsg.c
#	drivers/net/ethernet/netronome/nfp/bpf/fw.h
#	drivers/net/ethernet/netronome/nfp/bpf/main.h
diff --cc drivers/net/ethernet/netronome/nfp/bpf/main.h
index 5212b54abaf7,047f253fc581..000000000000
--- a/drivers/net/ethernet/netronome/nfp/bpf/main.h
+++ b/drivers/net/ethernet/netronome/nfp/bpf/main.h
@@@ -183,37 -271,51 +183,57 @@@ struct nfp_prog 
  	struct list_head insns;
  };
  
 -/**
 - * struct nfp_bpf_vnic - per-vNIC BPF priv structure
 - * @tc_prog:	currently loaded cls_bpf program
 - * @start_off:	address of the first instruction in the memory
 - * @tgt_done:	jump target to get the next packet
 - */
 -struct nfp_bpf_vnic {
 -	struct bpf_prog *tc_prog;
 -	unsigned int start_off;
 -	unsigned int tgt_done;
 +struct nfp_bpf_result {
 +	unsigned int n_instr;
 +	bool dense_mode;
  };
  
 -void nfp_bpf_jit_prepare(struct nfp_prog *nfp_prog, unsigned int cnt);
 -int nfp_bpf_jit(struct nfp_prog *prog);
 +int
 +nfp_bpf_jit(struct bpf_prog *filter, void *prog, enum nfp_bpf_action_type act,
 +	    unsigned int prog_start, unsigned int prog_done,
 +	    unsigned int prog_sz, struct nfp_bpf_result *res);
  
 -extern const struct bpf_prog_offload_ops nfp_bpf_analyzer_ops;
 +int nfp_prog_verify(struct nfp_prog *nfp_prog, struct bpf_prog *prog);
  
 -struct netdev_bpf;
 -struct nfp_app;
  struct nfp_net;
 +struct tc_cls_bpf_offload;
  
 -int nfp_ndo_bpf(struct nfp_app *app, struct nfp_net *nn,
 -		struct netdev_bpf *bpf);
 -int nfp_net_bpf_offload(struct nfp_net *nn, struct bpf_prog *prog,
 -			bool old_prog);
 +/**
 + * struct nfp_net_bpf_priv - per-vNIC BPF private data
 + * @rx_filter:		Filter offload statistics - dropped packets/bytes
 + * @rx_filter_prev:	Filter offload statistics - values from previous update
 + * @rx_filter_change:	Jiffies when statistics last changed
 + * @rx_filter_stats_timer:  Timer for polling filter offload statistics
 + * @rx_filter_lock:	Lock protecting timer state changes (teardown)
 + */
 +struct nfp_net_bpf_priv {
 +	struct nfp_stat_pair rx_filter, rx_filter_prev;
 +	unsigned long rx_filter_change;
 +	struct timer_list rx_filter_stats_timer;
 +	spinlock_t rx_filter_lock;
 +};
  
 -struct nfp_insn_meta *
 -nfp_bpf_goto_meta(struct nfp_prog *nfp_prog, struct nfp_insn_meta *meta,
 -		  unsigned int insn_idx, unsigned int n_insns);
 +int nfp_net_bpf_offload(struct nfp_net *nn, struct tc_cls_bpf_offload *cls_bpf);
 +void nfp_net_filter_stats_timer(unsigned long data);
  
++<<<<<<< HEAD
++=======
+ void *nfp_bpf_relo_for_vnic(struct nfp_prog *nfp_prog, struct nfp_bpf_vnic *bv);
+ 
+ long long int
+ nfp_bpf_ctrl_alloc_map(struct nfp_app_bpf *bpf, struct bpf_map *map);
+ void
+ nfp_bpf_ctrl_free_map(struct nfp_app_bpf *bpf, struct nfp_bpf_map *nfp_map);
+ int nfp_bpf_ctrl_getfirst_entry(struct bpf_offloaded_map *offmap,
+ 				void *next_key);
+ int nfp_bpf_ctrl_update_entry(struct bpf_offloaded_map *offmap,
+ 			      void *key, void *value, u64 flags);
+ int nfp_bpf_ctrl_del_entry(struct bpf_offloaded_map *offmap, void *key);
+ int nfp_bpf_ctrl_lookup_entry(struct bpf_offloaded_map *offmap,
+ 			      void *key, void *value);
+ int nfp_bpf_ctrl_getnext_entry(struct bpf_offloaded_map *offmap,
+ 			       void *key, void *next_key);
+ 
+ void nfp_bpf_ctrl_msg_rx(struct nfp_app *app, struct sk_buff *skb);
++>>>>>>> ff3d43f7568c (nfp: bpf: implement helpers for FW map ops)
  #endif
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/cmsg.c
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/fw.h
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/cmsg.c
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/fw.h
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/main.h
