drm/nouveau/gr/gf100-: calculate and use sm mapping table

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 068cae743c2ad08a082d6fef007e6b38f5fb3b16
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/068cae74.failed

There's a number of places that require this data, so let's separate out
the calculations to ensure they remain consistent.

This is incorrect for GM200 and newer, but will produce the same results
as we did before.

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 068cae743c2ad08a082d6fef007e6b38f5fb3b16)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
index 7601140b0017,b2070c87c91c..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
@@@ -1645,6 -1652,97 +1645,100 @@@ gf100_gr_init_ctxctl(struct gf100_gr *g
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ void
+ gf100_gr_oneinit_sm_id(struct gf100_gr *gr)
+ {
+ 	int tpc, gpc;
+ 	for (tpc = 0; tpc < gr->tpc_max; tpc++) {
+ 		for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
+ 			if (tpc < gr->tpc_nr[gpc]) {
+ 				gr->sm[gr->sm_nr].gpc = gpc;
+ 				gr->sm[gr->sm_nr].tpc = tpc;
+ 				gr->sm_nr++;
+ 			}
+ 		}
+ 	}
+ }
+ 
+ void
+ gf100_gr_oneinit_tiles(struct gf100_gr *gr)
+ {
+ 	static const u8 primes[] = {
+ 		3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61
+ 	};
+ 	int init_frac[GPC_MAX], init_err[GPC_MAX], run_err[GPC_MAX], i, j;
+ 	u32 mul_factor, comm_denom;
+ 	u8  gpc_map[GPC_MAX];
+ 	bool sorted;
+ 
+ 	switch (gr->tpc_total) {
+ 	case 15: gr->screen_tile_row_offset = 0x06; break;
+ 	case 14: gr->screen_tile_row_offset = 0x05; break;
+ 	case 13: gr->screen_tile_row_offset = 0x02; break;
+ 	case 11: gr->screen_tile_row_offset = 0x07; break;
+ 	case 10: gr->screen_tile_row_offset = 0x06; break;
+ 	case  7:
+ 	case  5: gr->screen_tile_row_offset = 0x01; break;
+ 	case  3: gr->screen_tile_row_offset = 0x02; break;
+ 	case  2:
+ 	case  1: gr->screen_tile_row_offset = 0x01; break;
+ 	default: gr->screen_tile_row_offset = 0x03;
+ 		for (i = 0; i < ARRAY_SIZE(primes); i++) {
+ 			if (gr->tpc_total % primes[i]) {
+ 				gr->screen_tile_row_offset = primes[i];
+ 				break;
+ 			}
+ 		}
+ 		break;
+ 	}
+ 
+ 	/* Sort GPCs by TPC count, highest-to-lowest. */
+ 	for (i = 0; i < gr->gpc_nr; i++)
+ 		gpc_map[i] = i;
+ 	sorted = false;
+ 
+ 	while (!sorted) {
+ 		for (sorted = true, i = 0; i < gr->gpc_nr - 1; i++) {
+ 			if (gr->tpc_nr[gpc_map[i + 1]] >
+ 			    gr->tpc_nr[gpc_map[i + 0]]) {
+ 				u8 swap = gpc_map[i];
+ 				gpc_map[i + 0] = gpc_map[i + 1];
+ 				gpc_map[i + 1] = swap;
+ 				sorted = false;
+ 			}
+ 		}
+ 	}
+ 
+ 	/* Determine tile->GPC mapping */
+ 	mul_factor = gr->gpc_nr * gr->tpc_max;
+ 	if (mul_factor & 1)
+ 		mul_factor = 2;
+ 	else
+ 		mul_factor = 1;
+ 
+ 	comm_denom = gr->gpc_nr * gr->tpc_max * mul_factor;
+ 
+ 	for (i = 0; i < gr->gpc_nr; i++) {
+ 		init_frac[i] = gr->tpc_nr[gpc_map[i]] * gr->gpc_nr * mul_factor;
+ 		 init_err[i] = i * gr->tpc_max * mul_factor - comm_denom/2;
+ 		  run_err[i] = init_frac[i] + init_err[i];
+ 	}
+ 
+ 	for (i = 0; i < gr->tpc_total;) {
+ 		for (j = 0; j < gr->gpc_nr; j++) {
+ 			if ((run_err[j] * 2) >= comm_denom) {
+ 				gr->tile[i++] = gpc_map[j];
+ 				run_err[j] += init_frac[j] - comm_denom;
+ 			} else {
+ 				run_err[j] += init_frac[j];
+ 			}
+ 		}
+ 	}
+ }
+ 
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  static int
  gf100_gr_oneinit(struct nvkm_gr *base)
  {
@@@ -1684,45 -1782,9 +1778,51 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	/*XXX: these need figuring out... though it might not even matter */
 +	switch (device->chipset) {
 +	case 0xc0:
 +		if (gr->tpc_total == 11) { /* 465, 3/4/4/0, 4 */
 +			gr->screen_tile_row_offset = 0x07;
 +		} else
 +		if (gr->tpc_total == 14) { /* 470, 3/3/4/4, 5 */
 +			gr->screen_tile_row_offset = 0x05;
 +		} else
 +		if (gr->tpc_total == 15) { /* 480, 3/4/4/4, 6 */
 +			gr->screen_tile_row_offset = 0x06;
 +		}
 +		break;
 +	case 0xc3: /* 450, 4/0/0/0, 2 */
 +		gr->screen_tile_row_offset = 0x03;
 +		break;
 +	case 0xc4: /* 460, 3/4/0/0, 4 */
 +		gr->screen_tile_row_offset = 0x01;
 +		break;
 +	case 0xc1: /* 2/0/0/0, 1 */
 +		gr->screen_tile_row_offset = 0x01;
 +		break;
 +	case 0xc8: /* 4/4/3/4, 5 */
 +		gr->screen_tile_row_offset = 0x06;
 +		break;
 +	case 0xce: /* 4/4/0/0, 4 */
 +		gr->screen_tile_row_offset = 0x03;
 +		break;
 +	case 0xcf: /* 4/0/0/0, 3 */
 +		gr->screen_tile_row_offset = 0x03;
 +		break;
 +	case 0xd7:
 +	case 0xd9: /* 1/0/0/0, 1 */
 +	case 0xea: /* gk20a */
 +	case 0x12b: /* gm20b */
 +		gr->screen_tile_row_offset = 0x01;
 +		break;
 +	}
 +
++=======
+ 	memset(gr->tile, 0xff, sizeof(gr->tile));
+ 	gr->func->oneinit_tiles(gr);
+ 	gr->func->oneinit_sm_id(gr);
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	return 0;
  }
  
@@@ -2048,7 -2219,21 +2148,12 @@@ gf100_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gf100_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gf100_gr_init,
 -	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gf100_gr_init_vsc_stream_master,
 -	.init_zcull = gf100_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_40601c = gf100_gr_init_40601c,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gf100_gr_pack_mmio,
  	.fecs.ucode = &gf100_gr_fecs_ucode,
  	.gpccs.ucode = &gf100_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
index 55915c14de5f,55dedd87fc38..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
@@@ -107,6 -107,15 +107,18 @@@ struct gf100_gr 
  	u8 ppc_tpc_nr[GPC_MAX][4];
  	u8 ppc_tpc_min;
  
++<<<<<<< HEAD
++=======
+ 	u8 screen_tile_row_offset;
+ 	u8 tile[TPC_MAX];
+ 
+ 	struct {
+ 		u8 gpc;
+ 		u8 tpc;
+ 	} sm[TPC_MAX];
+ 	u8 sm_nr;
+ 
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	struct gf100_gr_data mmio_data[4];
  	struct gf100_gr_mmio mmio_list[4096/8];
  	u32  size;
@@@ -123,12 -130,31 +135,17 @@@ void *gf100_gr_dtor(struct nvkm_gr *)
  
  struct gf100_gr_func {
  	void (*dtor)(struct gf100_gr *);
++<<<<<<< HEAD
++=======
+ 	void (*oneinit_tiles)(struct gf100_gr *);
+ 	void (*oneinit_sm_id)(struct gf100_gr *);
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	int (*init)(struct gf100_gr *);
  	void (*init_gpc_mmu)(struct gf100_gr *);
 -	void (*init_r405a14)(struct gf100_gr *);
 -	void (*init_bios)(struct gf100_gr *);
 -	void (*init_vsc_stream_master)(struct gf100_gr *);
 -	void (*init_zcull)(struct gf100_gr *);
 -	void (*init_num_active_ltcs)(struct gf100_gr *);
  	void (*init_rop_active_fbps)(struct gf100_gr *);
 -	void (*init_bios_2)(struct gf100_gr *);
 -	void (*init_swdx_pes_mask)(struct gf100_gr *);
 -	void (*init_fecs_exceptions)(struct gf100_gr *);
 -	void (*init_ds_hww_esr_2)(struct gf100_gr *);
 -	void (*init_40601c)(struct gf100_gr *);
 -	void (*init_sked_hww_esr)(struct gf100_gr *);
 -	void (*init_419cc0)(struct gf100_gr *);
 -	void (*init_419eb4)(struct gf100_gr *);
 -	void (*init_419c9c)(struct gf100_gr *);
  	void (*init_ppc_exceptions)(struct gf100_gr *);
 -	void (*init_tex_hww_esr)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_504430)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_shader_exceptions)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_400054)(struct gf100_gr *);
 -	void (*trap_mp)(struct gf100_gr *, int gpc, int tpc);
 +	void (*init_swdx_pes_mask)(struct gf100_gr *);
 +	void (*init_num_active_ltcs)(struct gf100_gr *);
  	void (*set_hww_esr_report_mask)(struct gf100_gr *);
  	const struct gf100_gr_pack *mmio;
  	struct {
@@@ -145,22 -171,51 +162,33 @@@
  	struct nvkm_sclass sclass[];
  };
  
++<<<<<<< HEAD
++=======
+ int gf100_gr_rops(struct gf100_gr *);
+ void gf100_gr_oneinit_tiles(struct gf100_gr *);
+ void gf100_gr_oneinit_sm_id(struct gf100_gr *);
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  int gf100_gr_init(struct gf100_gr *);
 -void gf100_gr_init_vsc_stream_master(struct gf100_gr *);
 -void gf100_gr_init_zcull(struct gf100_gr *);
 -void gf100_gr_init_num_active_ltcs(struct gf100_gr *);
 -void gf100_gr_init_fecs_exceptions(struct gf100_gr *);
 -void gf100_gr_init_40601c(struct gf100_gr *);
 -void gf100_gr_init_419cc0(struct gf100_gr *);
 -void gf100_gr_init_419eb4(struct gf100_gr *);
 -void gf100_gr_init_tex_hww_esr(struct gf100_gr *, int, int);
 -void gf100_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -void gf100_gr_init_400054(struct gf100_gr *);
 -
 -void gf117_gr_init_zcull(struct gf100_gr *);
 -
 -void gk104_gr_init_vsc_stream_master(struct gf100_gr *);
 +int gf100_gr_rops(struct gf100_gr *);
 +
 +int gk104_gr_init(struct gf100_gr *);
  void gk104_gr_init_rop_active_fbps(struct gf100_gr *);
  void gk104_gr_init_ppc_exceptions(struct gf100_gr *);
 -void gk104_gr_init_sked_hww_esr(struct gf100_gr *);
 -
 -void gk110_gr_init_419eb4(struct gf100_gr *);
 -
 -void gm107_gr_init_504430(struct gf100_gr *, int, int);
 -void gm107_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -void gm107_gr_init_400054(struct gf100_gr *);
  
  int gk20a_gr_init(struct gf100_gr *);
  
++<<<<<<< HEAD
 +int gm200_gr_init(struct gf100_gr *);
++=======
+ void gm200_gr_oneinit_tiles(struct gf100_gr *);
+ void gm200_gr_oneinit_sm_id(struct gf100_gr *);
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  int gm200_gr_rops(struct gf100_gr *);
 -void gm200_gr_init_num_active_ltcs(struct gf100_gr *);
 -void gm200_gr_init_ds_hww_esr_2(struct gf100_gr *);
  
 +int gp100_gr_init(struct gf100_gr *);
  void gp100_gr_init_rop_active_fbps(struct gf100_gr *);
 -void gp100_gr_init_fecs_exceptions(struct gf100_gr *);
 -void gp100_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -
 -void gp102_gr_init_swdx_pes_mask(struct gf100_gr *);
  
  #define gf100_gr_chan(p) container_of((p), struct gf100_gr_chan, object)
 -#include <core/object.h>
  
  struct gf100_gr_chan {
  	struct nvkm_object object;
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
index d736dcd55ea2,1d8e16a57136..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
@@@ -114,7 -114,21 +114,12 @@@ gf104_gr_pack_mmio[] = 
  
  static const struct gf100_gr_func
  gf104_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gf100_gr_init,
 -	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gf100_gr_init_vsc_stream_master,
 -	.init_zcull = gf100_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_40601c = gf100_gr_init_40601c,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gf104_gr_pack_mmio,
  	.fecs.ucode = &gf100_gr_fecs_ucode,
  	.gpccs.ucode = &gf100_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
index 2f0d24498427,a5a74df4edff..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
@@@ -103,9 -103,30 +103,14 @@@ gf108_gr_pack_mmio[] = 
   * PGRAPH engine/subdev functions
   ******************************************************************************/
  
 -static void
 -gf108_gr_init_r405a14(struct gf100_gr *gr)
 -{
 -	nvkm_wr32(gr->base.engine.subdev.device, 0x405a14, 0x80000000);
 -}
 -
  static const struct gf100_gr_func
  gf108_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gf100_gr_init,
 -	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
 -	.init_r405a14 = gf108_gr_init_r405a14,
 -	.init_vsc_stream_master = gf100_gr_init_vsc_stream_master,
 -	.init_zcull = gf100_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_40601c = gf100_gr_init_40601c,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gf108_gr_pack_mmio,
  	.fecs.ucode = &gf100_gr_fecs_ucode,
  	.gpccs.ucode = &gf100_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
index d1d942eb86af,45fada099009..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
@@@ -86,7 -86,21 +86,12 @@@ gf110_gr_pack_mmio[] = 
  
  static const struct gf100_gr_func
  gf110_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gf100_gr_init,
 -	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gf100_gr_init_vsc_stream_master,
 -	.init_zcull = gf100_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_40601c = gf100_gr_init_40601c,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gf110_gr_pack_mmio,
  	.fecs.ucode = &gf100_gr_fecs_ucode,
  	.gpccs.ucode = &gf100_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
index 0124e468086e,5ee167d0f5aa..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
@@@ -120,9 -120,51 +120,14 @@@ gf117_gr_gpccs_ucode = 
  	.data.size = sizeof(gf117_grgpc_data),
  };
  
 -void
 -gf117_gr_init_zcull(struct gf100_gr *gr)
 -{
 -	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	const u32 magicgpc918 = DIV_ROUND_UP(0x00800000, gr->tpc_total);
 -	const u8 tile_nr = ALIGN(gr->tpc_total, 32);
 -	u8 bank[GPC_MAX] = {}, gpc, i, j;
 -	u32 data;
 -
 -	for (i = 0; i < tile_nr; i += 8) {
 -		for (data = 0, j = 0; j < 8 && i + j < gr->tpc_total; j++) {
 -			data |= bank[gr->tile[i + j]] << (j * 4);
 -			bank[gr->tile[i + j]]++;
 -		}
 -		nvkm_wr32(device, GPC_BCAST(0x0980 + ((i / 8) * 4)), data);
 -	}
 -
 -	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 -		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 -			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 -		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 -							 gr->tpc_total);
 -		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 -	}
 -
 -	nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
 -}
 -
  static const struct gf100_gr_func
  gf117_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gf100_gr_init,
 -	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gf100_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_40601c = gf100_gr_init_40601c,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gf117_gr_pack_mmio,
  	.fecs.ucode = &gf117_gr_fecs_ucode,
  	.gpccs.ucode = &gf117_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
index 8d8e4cafe28f,2096552fc537..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
@@@ -177,7 -177,21 +177,12 @@@ gf119_gr_pack_mmio[] = 
  
  static const struct gf100_gr_func
  gf119_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gf100_gr_init,
 -	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gf100_gr_init_vsc_stream_master,
 -	.init_zcull = gf100_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_40601c = gf100_gr_init_40601c,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gf119_gr_pack_mmio,
  	.fecs.ucode = &gf100_gr_fecs_ucode,
  	.gpccs.ucode = &gf100_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
index f9a17b27d5b8,cce250a85ba6..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
@@@ -339,9 -448,23 +339,19 @@@ gk104_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gk104_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gk104_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk104_gr_pack_mmio,
  	.fecs.ucode = &gk104_gr_fecs_ucode,
  	.gpccs.ucode = &gk104_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
index f31b171a4102,558b497692ab..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
@@@ -180,11 -334,39 +180,21 @@@ gk110_gr_gpccs_ucode = 
  	.data.size = sizeof(gk110_grgpc_data),
  };
  
 -void
 -gk110_gr_init_419eb4(struct gf100_gr *gr)
 -{
 -	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	nvkm_mask(device, 0x419eb4, 0x00001000, 0x00001000);
 -	nvkm_mask(device, 0x419eb4, 0x00002000, 0x00002000);
 -	nvkm_mask(device, 0x419eb4, 0x00004000, 0x00004000);
 -	nvkm_mask(device, 0x419eb4, 0x00008000, 0x00008000);
 -	nvkm_mask(device, 0x419eb4, 0x00001000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00002000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00004000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00008000, 0x00000000);
 -}
 -
  static const struct gf100_gr_func
  gk110_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gk110_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk110_gr_pack_mmio,
  	.fecs.ucode = &gk110_gr_fecs_ucode,
  	.gpccs.ucode = &gk110_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
index d76dd178007f,c8c48a26f435..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
@@@ -102,9 -102,23 +102,19 @@@ gk110b_gr_pack_mmio[] = 
  
  static const struct gf100_gr_func
  gk110b_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gk110_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk110b_gr_pack_mmio,
  	.fecs.ucode = &gk110_gr_fecs_ucode,
  	.gpccs.ucode = &gk110_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
index 14bbe6ed02a9,477a7dea79f5..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
@@@ -161,9 -161,22 +161,19 @@@ gk208_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gk208_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gk208_gr_pack_mmio,
  	.fecs.ucode = &gk208_gr_fecs_ucode,
  	.gpccs.ucode = &gk208_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
index de8b806b88fd,11a32fa01586..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
@@@ -310,8 -282,12 +310,13 @@@ gk20a_gr_init(struct gf100_gr *gr
  
  static const struct gf100_gr_func
  gk20a_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gk20a_gr_init,
 -	.init_zcull = gf117_gr_init_zcull,
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.trap_mp = gf100_gr_trap_mp,
  	.set_hww_esr_report_mask = gk20a_gr_set_hww_esr_report_mask,
  	.rops = gf100_gr_rops,
  	.ppc_nr = 1,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
index 2c67fac576d1,a6937f8c3cfd..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
@@@ -441,9 -391,25 +441,20 @@@ gm107_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gm107_gr = {
++<<<<<<< HEAD
 +	.init = gm107_gr_init,
++=======
+ 	.oneinit_tiles = gf100_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gf100_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gm107_gr_init_gpc_mmu,
+ 	.init_bios = gm107_gr_init_bios,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_bios_2 = gm107_gr_init_bios_2,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gm107_gr_init_shader_exceptions,
 -	.init_400054 = gm107_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.mmio = gm107_gr_pack_mmio,
  	.fecs.ucode = &gm107_gr_fecs_ucode,
  	.gpccs.ucode = &gm107_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
index c5cca4279a00,8966d2a7235c..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
@@@ -61,111 -77,51 +61,138 @@@ gm200_gr_init_rop_active_fbps(struct gf
  	nvkm_mask(device, 0x408958, 0x0000000f, fbp_count); /* crop */
  }
  
++<<<<<<< HEAD
 +int
 +gm200_gr_init(struct gf100_gr *gr)
++=======
+ static u8
+ gm200_gr_tile_map_6_24[] = {
+ 	0, 1, 2, 3, 4, 5, 3, 4, 5, 0, 1, 2, 0, 1, 2, 3, 4, 5, 3, 4, 5, 0, 1, 2,
+ };
+ 
+ static u8
+ gm200_gr_tile_map_4_16[] = {
+ 	0, 1, 2, 3, 2, 3, 0, 1, 3, 0, 1, 2, 1, 2, 3, 0,
+ };
+ 
+ static u8
+ gm200_gr_tile_map_2_8[] = {
+ 	0, 1, 1, 0, 0, 1, 1, 0,
+ };
+ 
+ void
+ gm200_gr_oneinit_sm_id(struct gf100_gr *gr)
+ {
+ 	/*XXX: There's a different algorithm here I've not yet figured out. */
+ 	gf100_gr_oneinit_sm_id(gr);
+ }
+ 
+ void
+ gm200_gr_oneinit_tiles(struct gf100_gr *gr)
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  {
 -	/*XXX: Not sure what this is about.  The algorithm from NVGPU
 -	 *     seems to work for all boards I tried from earlier (and
 -	 *     later) GPUs except in these specific configurations.
 -	 *
 -	 *     Let's just hardcode them for now.
 -	 */
 -	if (gr->gpc_nr == 2 && gr->tpc_total == 8) {
 -		memcpy(gr->tile, gm200_gr_tile_map_2_8, gr->tpc_total);
 -		gr->screen_tile_row_offset = 1;
 -	} else
 -	if (gr->gpc_nr == 4 && gr->tpc_total == 16) {
 -		memcpy(gr->tile, gm200_gr_tile_map_4_16, gr->tpc_total);
 -		gr->screen_tile_row_offset = 4;
 -	} else
 -	if (gr->gpc_nr == 6 && gr->tpc_total == 24) {
 -		memcpy(gr->tile, gm200_gr_tile_map_6_24, gr->tpc_total);
 -		gr->screen_tile_row_offset = 5;
 -	} else {
 -		gf100_gr_oneinit_tiles(gr);
 +	struct nvkm_device *device = gr->base.engine.subdev.device;
 +	const u32 magicgpc918 = DIV_ROUND_UP(0x00800000, gr->tpc_total);
 +	u32 data[TPC_MAX / 8] = {};
 +	u8  tpcnr[GPC_MAX];
 +	int gpc, tpc, rop;
 +	int i;
 +
 +	gr->func->init_gpc_mmu(gr);
 +
 +	gf100_gr_mmio(gr, gr->fuc_sw_nonctx);
 +
 +	gm107_gr_init_bios(gr);
 +
 +	nvkm_wr32(device, GPC_UNIT(0, 0x3018), 0x00000001);
 +
 +	memset(data, 0x00, sizeof(data));
 +	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
 +	for (i = 0, gpc = -1; i < gr->tpc_total; i++) {
 +		do {
 +			gpc = (gpc + 1) % gr->gpc_nr;
 +		} while (!tpcnr[gpc]);
 +		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
 +
 +		data[i / 8] |= tpc << ((i % 8) * 4);
  	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x0980), data[0]);
 +	nvkm_wr32(device, GPC_BCAST(0x0984), data[1]);
 +	nvkm_wr32(device, GPC_BCAST(0x0988), data[2]);
 +	nvkm_wr32(device, GPC_BCAST(0x098c), data[3]);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 +			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 +							 gr->tpc_total);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +	nvkm_wr32(device, GPC_BCAST(0x033c), nvkm_rd32(device, 0x100804));
 +
 +	gr->func->init_rop_active_fbps(gr);
 +
 +	nvkm_wr32(device, 0x400500, 0x00010001);
 +	nvkm_wr32(device, 0x400100, 0xffffffff);
 +	nvkm_wr32(device, 0x40013c, 0xffffffff);
 +	nvkm_wr32(device, 0x400124, 0x00000002);
 +	nvkm_wr32(device, 0x409c24, 0x000e0000);
 +	nvkm_wr32(device, 0x405848, 0xc0000000);
 +	nvkm_wr32(device, 0x40584c, 0x00000001);
 +	nvkm_wr32(device, 0x404000, 0xc0000000);
 +	nvkm_wr32(device, 0x404600, 0xc0000000);
 +	nvkm_wr32(device, 0x408030, 0xc0000000);
 +	nvkm_wr32(device, 0x404490, 0xc0000000);
 +	nvkm_wr32(device, 0x406018, 0xc0000000);
 +	nvkm_wr32(device, 0x407020, 0x40000000);
 +	nvkm_wr32(device, 0x405840, 0xc0000000);
 +	nvkm_wr32(device, 0x405844, 0x00ffffff);
 +	nvkm_mask(device, 0x419cc0, 0x00000008, 0x00000008);
 +
 +	gr->func->init_ppc_exceptions(gr);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0420), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0900), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x1028), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0824), 0xc0000000);
 +		for (tpc = 0; tpc < gr->tpc_nr[gpc]; tpc++) {
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x508), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x50c), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x224), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x48c), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x084), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x430), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x00dffffe);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x00000005);
 +		}
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c90), 0xffffffff);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c94), 0xffffffff);
 +	}
 +
 +	for (rop = 0; rop < gr->rop_nr; rop++) {
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x144), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x070), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x204), 0xffffffff);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x208), 0xffffffff);
 +	}
 +
 +	nvkm_wr32(device, 0x400108, 0xffffffff);
 +	nvkm_wr32(device, 0x400138, 0xffffffff);
 +	nvkm_wr32(device, 0x400118, 0xffffffff);
 +	nvkm_wr32(device, 0x400130, 0xffffffff);
 +	nvkm_wr32(device, 0x40011c, 0xffffffff);
 +	nvkm_wr32(device, 0x400134, 0xffffffff);
 +
 +	nvkm_wr32(device, 0x400054, 0x2c350f63);
 +
 +	gf100_gr_zbc_init(gr);
 +
 +	return gf100_gr_init_ctxctl(gr);
  }
  
  int
@@@ -208,10 -164,25 +235,16 @@@ gm200_gr_new_(const struct gf100_gr_fun
  
  static const struct gf100_gr_func
  gm200_gr = {
++<<<<<<< HEAD
 +	.init = gm200_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gm200_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_bios = gm107_gr_init_bios,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gm200_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gm107_gr_init_shader_exceptions,
 -	.init_400054 = gm107_gr_init_400054,
 -	.trap_mp = gf100_gr_trap_mp,
  	.rops = gm200_gr_rops,
  	.tpc_nr = 4,
  	.ppc_nr = 2,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
index 69479af1d829,afa1c6e32230..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
@@@ -64,9 -64,13 +64,14 @@@ gm20b_gr_set_hww_esr_report_mask(struc
  
  static const struct gf100_gr_func
  gm20b_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gm200_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gk20a_gr_init,
 -	.init_zcull = gf117_gr_init_zcull,
  	.init_gpc_mmu = gm20b_gr_init_gpc_mmu,
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.trap_mp = gf100_gr_trap_mp,
  	.set_hww_esr_report_mask = gm20b_gr_set_hww_esr_report_mask,
  	.rops = gm200_gr_rops,
  	.ppc_nr = 1,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
index b87d86575036,1d9d8760e13e..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
@@@ -158,11 -64,24 +158,17 @@@ gp100_gr_init(struct gf100_gr *gr
  
  static const struct gf100_gr_func
  gp100_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gm200_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419c9c = gp100_gr_init_419c9c,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_num_active_ltcs = gp100_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 6,
  	.tpc_nr = 5,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
index 8d1b09b9c236,2d9a2c3ec261..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
@@@ -42,12 -42,24 +42,18 @@@ gp102_gr_init_swdx_pes_mask(struct gf10
  
  static const struct gf100_gr_func
  gp102_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gm200_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 +	.init_num_active_ltcs = gp100_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 6,
  	.tpc_nr = 5,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
index 289d8b272b42,e466ae460d3c..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
@@@ -26,6 -26,8 +26,11 @@@
  
  static const struct gf100_gr_func
  gp104_gr = {
++<<<<<<< HEAD
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gm200_gr_oneinit_sm_id,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init = gf100_gr_init,
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
  	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
index 7ca037eda549,2fa046a1da60..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
@@@ -28,12 -28,24 +28,18 @@@
  
  static const struct gf100_gr_func
  gp107_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gm200_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_swdx_pes_mask = gp102_gr_init_swdx_pes_mask,
 +	.init_num_active_ltcs = gp100_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 2,
  	.tpc_nr = 3,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
index 775c4cfdeade,0a01a306da2a..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
@@@ -25,21 -25,25 +25,27 @@@
  
  #include <nvif/class.h>
  
 +static void
 +gp10b_gr_init_num_active_ltcs(struct gf100_gr *gr)
 +{
 +	struct nvkm_device *device = gr->base.engine.subdev.device;
 +
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +}
 +
  static const struct gf100_gr_func
  gp10b_gr = {
++<<<<<<< HEAD
 +	.init = gp100_gr_init,
++=======
+ 	.oneinit_tiles = gm200_gr_oneinit_tiles,
+ 	.oneinit_sm_id = gm200_gr_oneinit_sm_id,
+ 	.init = gf100_gr_init,
++>>>>>>> 068cae743c2a (drm/nouveau/gr/gf100-: calculate and use sm mapping table)
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 -	.trap_mp = gf100_gr_trap_mp,
 +	.init_num_active_ltcs = gp10b_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.gpc_nr = 1,
  	.tpc_nr = 2,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c
index 1c2f5b3c5f8f..f4ee7eceff13 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgf100.c
@@ -1095,23 +1095,18 @@ gf100_grctx_generate_r4060a8(struct gf100_gr *gr)
 	struct nvkm_device *device = gr->base.engine.subdev.device;
 	const u8 gpcmax = nvkm_rd32(device, 0x022430);
 	const u8 tpcmax = nvkm_rd32(device, 0x022434) * gpcmax;
-	u8 tpcnr[GPC_MAX], data[TPC_MAX];
-	int gpc, tpc, i;
-
-	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
-	memset(data, 0x1f, sizeof(data));
+	int i, j, sm = 0;
+	u32 data;
 
-	gpc = -1;
-	for (tpc = 0; tpc < gr->tpc_total; tpc++) {
-		do {
-			gpc = (gpc + 1) % gr->gpc_nr;
-		} while (!tpcnr[gpc]);
-		tpcnr[gpc]--;
-		data[tpc] = gpc;
+	for (i = 0; i < DIV_ROUND_UP(tpcmax, 4); i++) {
+		for (data = 0, j = 0; j < 4; j++) {
+			if (sm < gr->sm_nr)
+				data |= gr->sm[sm++].gpc << (j * 8);
+			else
+				data |= 0x1f << (j * 8);
+		}
+		nvkm_wr32(device, 0x4060a8 + (i * 4), data);
 	}
-
-	for (i = 0; i < DIV_ROUND_UP(tpcmax, 4); i++)
-		nvkm_wr32(device, 0x4060a8 + (i * 4), ((u32 *)data)[i]);
 }
 
 void
@@ -1342,16 +1337,13 @@ gf100_grctx_generate_floorsweep(struct gf100_gr *gr)
 {
 	struct nvkm_device *device = gr->base.engine.subdev.device;
 	const struct gf100_grctx_func *func = gr->func->grctx;
-	int tpc, gpc, sm, i, j;
+	int gpc, sm, i, j;
 	u32 data;
 
-	for (tpc = 0, sm = 0; tpc < gr->tpc_max; tpc++) {
-		for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
-			if (tpc < gr->tpc_nr[gpc])
-				func->sm_id(gr, gpc, tpc, sm++);
-			if (func->tpc_nr)
-				func->tpc_nr(gr, gpc);
-		}
+	for (sm = 0; sm < gr->sm_nr; sm++) {
+		func->sm_id(gr, gr->sm[sm].gpc, gr->sm[sm].tpc, sm);
+		if (func->tpc_nr)
+			func->tpc_nr(gr, gr->sm[sm].gpc);
 	}
 
 	for (gpc = 0, i = 0; i < 4; i++) {
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgm200.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgm200.c
index 7107ec429778..013d05a0f0f6 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgm200.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgm200.c
@@ -49,23 +49,13 @@ gm200_grctx_generate_smid_config(struct gf100_gr *gr)
 	const u32 dist_nr = DIV_ROUND_UP(gr->tpc_total, 4);
 	u32 dist[TPC_MAX / 4] = {};
 	u32 gpcs[GPC_MAX] = {};
-	u8  tpcnr[GPC_MAX];
-	int tpc, gpc, i;
+	u8  sm, i;
 
-	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
-
-	/* won't result in the same distribution as the binary driver where
-	 * some of the gpcs have more tpcs than others, but this shall do
-	 * for the moment.  the code for earlier gpus has this issue too.
-	 */
-	for (gpc = -1, i = 0; i < gr->tpc_total; i++) {
-		do {
-			gpc = (gpc + 1) % gr->gpc_nr;
-		} while(!tpcnr[gpc]);
-		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
-
-		dist[i / 4] |= ((gpc << 4) | tpc) << ((i % 4) * 8);
-		gpcs[gpc] |= i << (tpc * 8);
+	for (sm = 0; sm < gr->sm_nr; sm++) {
+		const u8 gpc = gr->sm[sm].gpc;
+		const u8 tpc = gr->sm[sm].tpc;
+		dist[sm / 4] |= ((gpc << 4) | tpc) << ((sm % 4) * 8);
+		gpcs[gpc] |= sm << (tpc * 8);
 	}
 
 	for (i = 0; i < dist_nr; i++)
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgp100.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgp100.c
index 9c5ad3921790..0c08365b435b 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgp100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/ctxgp100.c
@@ -97,23 +97,13 @@ gp100_grctx_generate_smid_config(struct gf100_gr *gr)
 	struct nvkm_device *device = gr->base.engine.subdev.device;
 	const u32 dist_nr = DIV_ROUND_UP(gr->tpc_total, 4);
 	u32 dist[TPC_MAX / 4] = {}, gpcs[16] = {};
-	u8  tpcnr[GPC_MAX];
-	int tpc, gpc, i;
+	u8  sm, i;
 
-	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
-
-	/* won't result in the same distribution as the binary driver where
-	 * some of the gpcs have more tpcs than others, but this shall do
-	 * for the moment.  the code for earlier gpus has this issue too.
-	 */
-	for (gpc = -1, i = 0; i < gr->tpc_total; i++) {
-		do {
-			gpc = (gpc + 1) % gr->gpc_nr;
-		} while(!tpcnr[gpc]);
-		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
-
-		dist[i / 4] |= ((gpc << 4) | tpc) << ((i % 4) * 8);
-		gpcs[gpc + (gr->func->gpc_nr * (tpc / 4))] |= i << (tpc * 8);
+	for (sm = 0; sm < gr->sm_nr; sm++) {
+		const u8 gpc = gr->sm[sm].gpc;
+		const u8 tpc = gr->sm[sm].tpc;
+		dist[sm / 4] |= ((gpc << 4) | tpc) << ((sm % 4) * 8);
+		gpcs[gpc + (gr->func->gpc_nr * (tpc / 4))] |= sm << ((tpc % 4) * 8);
 	}
 
 	for (i = 0; i < dist_nr; i++)
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf104.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf108.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf110.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf117.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf119.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk20a.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gm20b.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
