blk-mq: remove blk_mq_delay_queue()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ming Lei <ming.lei@redhat.com>
commit 15fe8a90bb45b953ca36f074194fcb519a05fdec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/15fe8a90.failed

No driver uses this interface any more, so remove it.

	Cc: Stefan Haberland <sth@linux.vnet.ibm.com>
	Tested-by: Christian Borntraeger <borntraeger@de.ibm.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 15fe8a90bb45b953ca36f074194fcb519a05fdec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 1eaa154c3ecb,c2c6d276da3a..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -1345,30 -1561,15 +1345,42 @@@ static void blk_mq_run_work_fn(struct w
  
  	hctx = container_of(work, struct blk_mq_hw_ctx, run_work.work);
  
++<<<<<<< HEAD
 +	__blk_mq_run_hw_queue(hctx);
 +}
 +
 +static void blk_mq_delay_work_fn(struct work_struct *work)
 +{
 +	struct blk_mq_hw_ctx *hctx;
 +
 +	hctx = container_of(work, struct blk_mq_hw_ctx, delay_work.work);
 +
 +	if (test_and_clear_bit(BLK_MQ_S_STOPPED, &hctx->state))
 +		__blk_mq_run_hw_queue(hctx);
 +}
 +
 +void blk_mq_delay_queue(struct blk_mq_hw_ctx *hctx, unsigned long msecs)
 +{
 +	if (unlikely(!blk_mq_hw_queue_mapped(hctx)))
 +		return;
 +
 +	blk_mq_stop_hw_queue(hctx);
 +	kblockd_schedule_delayed_work_on(blk_mq_hctx_next_cpu(hctx),
 +			&hctx->delay_work, msecs_to_jiffies(msecs));
 +}
 +EXPORT_SYMBOL(blk_mq_delay_queue);
 +
++=======
+ 	/*
+ 	 * If we are stopped, don't run the queue.
+ 	 */
+ 	if (test_bit(BLK_MQ_S_STOPPED, &hctx->state))
+ 		clear_bit(BLK_MQ_S_STOPPED, &hctx->state);
+ 
+ 	__blk_mq_run_hw_queue(hctx);
+ }
+ 
++>>>>>>> 15fe8a90bb45 (blk-mq: remove blk_mq_delay_queue())
  static inline void __blk_mq_insert_req_list(struct blk_mq_hw_ctx *hctx,
  					    struct request *rq,
  					    bool at_head)
* Unmerged path block/blk-mq.c
diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 43b98fa7e562..988328a1bc57 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -328,7 +328,6 @@ void blk_mq_unquiesce_queue(struct request_queue *q);
 void blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *hctx, unsigned long msecs);
 bool blk_mq_run_hw_queue(struct blk_mq_hw_ctx *hctx, bool async);
 void blk_mq_run_hw_queues(struct request_queue *q, bool async);
-void blk_mq_delay_queue(struct blk_mq_hw_ctx *hctx, unsigned long msecs);
 void blk_mq_tagset_busy_iter(struct blk_mq_tag_set *tagset,
 		busy_tag_iter_fn *fn, void *priv);
 void blk_mq_freeze_queue(struct request_queue *q);
