ipmi_si: Move some platform data into the io structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Corey Minyard <cminyard@mvista.com>
commit 910840f24bb7f9ea80fce4073445329becfdcb58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/910840f2.failed

That's where it belongs, and we are getting ready for moving the
platform handling out of the main ipmi_si_intf.c file.

	Signed-off-by: Corey Minyard <cminyard@mvista.com>
(cherry picked from commit 910840f24bb7f9ea80fce4073445329becfdcb58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/ipmi/ipmi_si_intf.c
diff --cc drivers/char/ipmi/ipmi_si_intf.c
index 72982bfaeaf1,8cc101ea82d9..000000000000
--- a/drivers/char/ipmi/ipmi_si_intf.c
+++ b/drivers/char/ipmi/ipmi_si_intf.c
@@@ -284,19 -278,9 +273,21 @@@ struct smi_info 
  	/* From the get device id response... */
  	struct ipmi_device_id device_id;
  
- 	/* Driver model stuff. */
- 	struct device *dev;
+ 	/* Default driver model device. */
  	struct platform_device *pdev;
  
++<<<<<<< HEAD
 +	/*
 +	 * True if we allocated the device, false if it came from
 +	 * someplace else (like PCI).
 +	 */
 +	int dev_registered;
 +
 +	/* Slave address, could be reported from DMI. */
 +	unsigned char slave_addr;
 +
++=======
++>>>>>>> 910840f24bb7 (ipmi_si: Move some platform data into the io structure)
  	/* Counters and things for the proc filesystem. */
  	atomic_t stats[SI_NUM_STATS];
  
@@@ -2542,8 -2528,9 +2533,8 @@@ static const struct of_device_id of_ipm
  	  .data = (void *)(unsigned long) SI_BT },
  	{},
  };
 -MODULE_DEVICE_TABLE(of, of_ipmi_match);
  
- static int of_ipmi_probe(struct platform_device *dev)
+ static int of_ipmi_probe(struct platform_device *pdev)
  {
  	const struct of_device_id *match;
  	struct smi_info *info;
@@@ -3611,17 -3602,15 +3605,26 @@@ static int try_smi_init(struct smi_inf
  				rv);
  			goto out_err;
  		}
++<<<<<<< HEAD
 +		new_smi->dev_registered = 1;
++=======
++>>>>>>> 910840f24bb7 (ipmi_si: Move some platform data into the io structure)
  	}
  
  	rv = ipmi_register_smi(&handlers,
  			       new_smi,
++<<<<<<< HEAD
 +			       &new_smi->device_id,
 +			       new_smi->dev,
 +			       "bmc",
 +			       new_smi->slave_addr);
++=======
+ 			       new_smi->io.dev,
+ 			       new_smi->io.slave_addr);
++>>>>>>> 910840f24bb7 (ipmi_si: Move some platform data into the io structure)
  	if (rv) {
- 		dev_err(new_smi->dev, "Unable to register device: error %d\n",
+ 		dev_err(new_smi->io.dev,
+ 			"Unable to register device: error %d\n",
  			rv);
  		goto out_err_stop_timer;
  	}
@@@ -3706,9 -3692,8 +3712,12 @@@ out_err
  		new_smi->io_cleanup = NULL;
  	}
  
- 	if (new_smi->dev_registered) {
+ 	if (new_smi->pdev) {
  		platform_device_unregister(new_smi->pdev);
++<<<<<<< HEAD
 +		new_smi->dev_registered = 0;
++=======
++>>>>>>> 910840f24bb7 (ipmi_si: Move some platform data into the io structure)
  		new_smi->pdev = NULL;
  	} else if (new_smi->pdev) {
  		platform_device_put(new_smi->pdev);
* Unmerged path drivers/char/ipmi/ipmi_si_intf.c
diff --git a/drivers/char/ipmi/ipmi_si_sm.h b/drivers/char/ipmi/ipmi_si_sm.h
index a705027c0493..ffbf67f630a9 100644
--- a/drivers/char/ipmi/ipmi_si_sm.h
+++ b/drivers/char/ipmi/ipmi_si_sm.h
@@ -34,12 +34,18 @@
  *  675 Mass Ave, Cambridge, MA 02139, USA.
  */
 
+#include <linux/ipmi.h>
+
 /*
  * This is defined by the state machines themselves, it is an opaque
  * data type for them to use.
  */
 struct si_sm_data;
 
+enum si_type {
+	SI_KCS, SI_SMIC, SI_BT
+};
+
 /*
  * The structure for doing I/O in the state machine.  The state
  * machine doesn't have the actual I/O routines, they are done through
@@ -61,6 +67,14 @@ struct si_sm_io {
 	int  regshift;
 	int addr_type;
 	long addr_data;
+	enum ipmi_addr_src addr_source; /* ACPI, PCI, SMBIOS, hardcode, etc. */
+	void (*addr_source_cleanup)(struct si_sm_io *io);
+	void *addr_source_data;
+
+	int irq;
+	u8 slave_addr;
+	enum si_type si_type;
+	struct device *dev;
 };
 
 /* Results of SMI events. */
