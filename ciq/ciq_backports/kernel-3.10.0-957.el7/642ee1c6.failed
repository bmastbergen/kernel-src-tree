perf script: Print information about per-event-dump files

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 642ee1c6df4c8571d8a6846a2623fb54f925ef92
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/642ee1c6.failed

For a file generated by "perf sched record sleep 50":

  # perf script --per-event-dump
  [ perf script: Wrote 23.121 MB perf.data.sched:sched_switch.dump (206015 samples) ]
  [ perf script: Wrote 0.000 MB perf.data.sched:sched_stat_wait.dump (0 samples) ]
  [ perf script: Wrote 0.000 MB perf.data.sched:sched_stat_sleep.dump (0 samples) ]
  [ perf script: Wrote 0.000 MB perf.data.sched:sched_stat_iowait.dump (0 samples) ]
  [ perf script: Wrote 17.680 MB perf.data.sched:sched_stat_runtime.dump (129342 samples) ]
  [ perf script: Wrote 0.000 MB perf.data.sched:sched_process_fork.dump (24 samples) ]
  [ perf script: Wrote 11.328 MB perf.data.sched:sched_wakeup.dump (106770 samples) ]
  [ perf script: Wrote 0.000 MB perf.data.sched:sched_wakeup_new.dump (24 samples) ]
  [ perf script: Wrote 2.477 MB perf.data.sched:sched_migrate_task.dump (20434 samples) ]
  #

Similar to what is generated by 'perf record'.

Based-on-a-patch-by: yuzhoujian <yuzhoujian@didichuxing.com>
	Suggested-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/r/1508921599-10832-3-git-send-email-yuzhoujian@didichuxing.com
Link: http://lkml.kernel.org/n/tip-xuketkkjuk2c0qz546ypd1u7@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 642ee1c6df4c8571d8a6846a2623fb54f925ef92)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-script.c
diff --cc tools/perf/builtin-script.c
index d3f20cf9a358,4d198f73b29a..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -1089,14 -1484,18 +1134,25 @@@ static void process_event(struct perf_s
  	struct thread *thread = al->thread;
  	struct perf_event_attr *attr = &evsel->attr;
  	unsigned int type = output_type(attr->type);
++<<<<<<< HEAD
++=======
+ 	struct perf_evsel_script *es = evsel->priv;
+ 	FILE *fp = es->fp;
++>>>>>>> 642ee1c6df4c (perf script: Print information about per-event-dump files)
  
  	if (output[type].fields == 0)
  		return;
  
++<<<<<<< HEAD
 +	print_sample_start(sample, thread, evsel);
++=======
+ 	++es->samples;
+ 
+ 	perf_sample__fprintf_start(sample, thread, evsel, fp);
++>>>>>>> 642ee1c6df4c (perf script: Print information about per-event-dump files)
  
  	if (PRINT_FIELD(PERIOD))
 -		fprintf(fp, "%10" PRIu64 " ", sample->period);
 +		printf("%10" PRIu64 " ", sample->period);
  
  	if (PRINT_FIELD(EVNAME)) {
  		const char *evname = perf_evsel__name(evsel);
@@@ -1487,6 -1936,65 +1543,68 @@@ static void sig_handler(int sig __maybe
  	session_done = 1;
  }
  
++<<<<<<< HEAD
++=======
+ static void perf_script__fclose_per_event_dump(struct perf_script *script)
+ {
+ 	struct perf_evlist *evlist = script->session->evlist;
+ 	struct perf_evsel *evsel;
+ 
+ 	evlist__for_each_entry(evlist, evsel) {
+ 		if (!evsel->priv)
+ 			break;
+ 		perf_evsel_script__delete(evsel->priv);
+ 		evsel->priv = NULL;
+ 	}
+ }
+ 
+ static int perf_script__fopen_per_event_dump(struct perf_script *script)
+ {
+ 	struct perf_evsel *evsel;
+ 
+ 	evlist__for_each_entry(script->session->evlist, evsel) {
+ 		evsel->priv = perf_evsel_script__new(evsel, script->session->file);
+ 		if (evsel->priv == NULL)
+ 			goto out_err_fclose;
+ 	}
+ 
+ 	return 0;
+ 
+ out_err_fclose:
+ 	perf_script__fclose_per_event_dump(script);
+ 	return -1;
+ }
+ 
+ static int perf_script__setup_per_event_dump(struct perf_script *script)
+ {
+ 	struct perf_evsel *evsel;
+ 	static struct perf_evsel_script es_stdout;
+ 
+ 	if (script->per_event_dump)
+ 		return perf_script__fopen_per_event_dump(script);
+ 
+ 	es_stdout.fp = stdout;
+ 
+ 	evlist__for_each_entry(script->session->evlist, evsel)
+ 		evsel->priv = &es_stdout;
+ 
+ 	return 0;
+ }
+ 
+ static void perf_script__exit_per_event_dump_stats(struct perf_script *script)
+ {
+ 	struct perf_evsel *evsel;
+ 
+ 	evlist__for_each_entry(script->session->evlist, evsel) {
+ 		struct perf_evsel_script *es = evsel->priv;
+ 
+ 		perf_evsel_script__fprintf(es, stdout);
+ 		perf_evsel_script__delete(es);
+ 		evsel->priv = NULL;
+ 	}
+ }
+ 
++>>>>>>> 642ee1c6df4c (perf script: Print information about per-event-dump files)
  static int __cmd_script(struct perf_script *script)
  {
  	int ret;
@@@ -1508,6 -2016,16 +1626,12 @@@
  
  	ret = perf_session__process_events(script->session);
  
++<<<<<<< HEAD
++=======
+ 	if (script->per_event_dump)
+ 		perf_script__exit_per_event_dump_stats(script);
+ 
++>>>>>>> 642ee1c6df4c (perf script: Print information about per-event-dump files)
  	if (debug_mode)
  		pr_err("Misordered timestamps: %" PRIu64 "\n", nr_unordered);
  
* Unmerged path tools/perf/builtin-script.c
