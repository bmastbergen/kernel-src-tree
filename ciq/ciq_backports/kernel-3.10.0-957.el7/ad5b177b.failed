bpf: Add map_name to bpf_map_info

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Martin KaFai Lau <kafai@fb.com>
commit ad5b177bd73f5107d97c36f56395c4281fb6f089
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ad5b177b.failed

This patch allows userspace to specify a name for a map
during BPF_MAP_CREATE.

The map's name can later be exported to user space
via BPF_OBJ_GET_INFO_BY_FD.

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Acked-by: Alexei Starovoitov <ast@fb.com>
	Acked-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ad5b177bd73f5107d97c36f56395c4281fb6f089)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
#	include/uapi/linux/bpf.h
#	kernel/bpf/syscall.c
diff --cc include/linux/bpf.h
index d4c1f9049ad3,252f4bc9eb25..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -32,50 -47,51 +32,56 @@@ struct bpf_map 
  	u32 key_size;
  	u32 value_size;
  	u32 max_entries;
 -	u32 map_flags;
 -	u32 pages;
 -	u32 id;
 -	int numa_node;
 -	struct user_struct *user;
 -	const struct bpf_map_ops *ops;
 +	struct bpf_map_ops *ops;
  	struct work_struct work;
++<<<<<<< HEAD
++=======
+ 	atomic_t usercnt;
+ 	struct bpf_map *inner_map_meta;
+ 	u8 name[BPF_OBJ_NAME_LEN];
++>>>>>>> ad5b177bd73f (bpf: Add map_name to bpf_map_info)
  };
  
 -/* function argument constraints */
 -enum bpf_arg_type {
 -	ARG_DONTCARE = 0,	/* unused argument in helper function */
 +struct bpf_map_type_list {
 +	struct list_head list_node;
 +	struct bpf_map_ops *ops;
 +	enum bpf_map_type type;
 +};
  
 -	/* the following constraints used to prototype
 -	 * bpf_map_lookup/update/delete_elem() functions
 -	 */
 -	ARG_CONST_MAP_PTR,	/* const argument used as pointer to bpf_map */
 -	ARG_PTR_TO_MAP_KEY,	/* pointer to stack used as map key */
 -	ARG_PTR_TO_MAP_VALUE,	/* pointer to stack used as map value */
 +void bpf_register_map_type(struct bpf_map_type_list *tl);
  
 -	/* the following constraints used to prototype bpf_memcmp() and other
 -	 * functions that access data on eBPF program stack
 -	 */
 -	ARG_PTR_TO_MEM,		/* pointer to valid memory (stack, packet, map value) */
 -	ARG_PTR_TO_UNINIT_MEM,	/* pointer to memory does not need to be initialized,
 -				 * helper function must fill all bytes or clear
 -				 * them in error case.
 -				 */
 +static inline struct bpf_prog *bpf_prog_get(u32 ufd)
 +{
 +	return NULL;
 +}
  
 -	ARG_CONST_SIZE,		/* number of bytes accessed from memory */
 -	ARG_CONST_SIZE_OR_ZERO,	/* number of bytes accessed from memory or 0 */
 +static inline struct bpf_prog *bpf_prog_get_type(u32 ufd, enum bpf_prog_type type)
 +{
 +	return NULL;
 +}
  
 -	ARG_PTR_TO_CTX,		/* pointer to context */
 -	ARG_ANYTHING,		/* any (initialized) argument is ok */
 -};
 +static inline struct bpf_prog *bpf_prog_add(struct bpf_prog *prog, int i)
 +{
 +	return NULL;
 +}
  
 -/* type of values returned from helper functions */
 -enum bpf_return_type {
 -	RET_INTEGER,			/* function returns integer */
 -	RET_VOID,			/* function doesn't return anything */
 -	RET_PTR_TO_MAP_VALUE_OR_NULL,	/* returns a pointer to map elem value or NULL */
 -};
 +static inline struct bpf_prog *bpf_prog_inc(struct bpf_prog *prog)
 +{
 +	return prog;
 +}
 +
 +static inline void bpf_prog_put(struct bpf_prog *prog)
 +{
 +	return;
 +}
 +
 +
 +struct bpf_map *bpf_map_get_with_uref(u32 ufd);
 +struct bpf_map *__bpf_map_get(struct fd f);
 +struct bpf_map *bpf_map_inc(struct bpf_map *map, bool uref);
 +void bpf_map_put_with_uref(struct bpf_map *map);
 +void bpf_map_put(struct bpf_map *map);
 +struct bpf_map *bpf_map_get(struct fd f);
  
  /* eBPF function prototype used by verifier to allow BPF_CALLs from eBPF programs
   * to in-kernel helper functions and for adjusting imm32 field in BPF_CALL
diff --cc include/uapi/linux/bpf.h
index e369860b690e,6d2137b4cf38..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -123,6 -183,14 +123,17 @@@ union bpf_attr 
  		__u32	key_size;	/* size of key in bytes */
  		__u32	value_size;	/* size of value in bytes */
  		__u32	max_entries;	/* max number of entries in a map */
++<<<<<<< HEAD
++=======
+ 		__u32	map_flags;	/* BPF_MAP_CREATE related
+ 					 * flags defined above.
+ 					 */
+ 		__u32	inner_map_fd;	/* fd pointing to the inner map */
+ 		__u32	numa_node;	/* numa node (effective only if
+ 					 * BPF_F_NUMA_NODE is set).
+ 					 */
+ 		__u8	map_name[BPF_OBJ_NAME_LEN];
++>>>>>>> ad5b177bd73f (bpf: Add map_name to bpf_map_info)
  	};
  
  	struct { /* anonymous struct used by BPF_MAP_*_ELEM commands */
@@@ -153,16 -797,92 +164,51 @@@ enum xdp_action 
  struct xdp_md {
  	__u32 data;
  	__u32 data_end;
 -	__u32 data_meta;
  };
  
 -enum sk_action {
 -	SK_ABORTED = 0,
 -	SK_DROP,
 -	SK_REDIRECT,
 -};
 +#define XDP_PACKET_HEADROOM 256
  
++<<<<<<< HEAD
 +/* integer value in 'imm' field of BPF_CALL instruction selects which helper
 + * function eBPF program intends to call
++=======
+ #define BPF_TAG_SIZE	8
+ 
+ struct bpf_prog_info {
+ 	__u32 type;
+ 	__u32 id;
+ 	__u8  tag[BPF_TAG_SIZE];
+ 	__u32 jited_prog_len;
+ 	__u32 xlated_prog_len;
+ 	__aligned_u64 jited_prog_insns;
+ 	__aligned_u64 xlated_prog_insns;
+ 	__u64 load_time;	/* ns since boottime */
+ 	__u32 created_by_uid;
+ 	__u32 nr_map_ids;
+ 	__aligned_u64 map_ids;
+ 	__u8  name[BPF_OBJ_NAME_LEN];
+ } __attribute__((aligned(8)));
+ 
+ struct bpf_map_info {
+ 	__u32 type;
+ 	__u32 id;
+ 	__u32 key_size;
+ 	__u32 value_size;
+ 	__u32 max_entries;
+ 	__u32 map_flags;
+ 	__u8  name[BPF_OBJ_NAME_LEN];
+ } __attribute__((aligned(8)));
+ 
+ /* User bpf_sock_ops struct to access socket values and specify request ops
+  * and their replies.
+  * Some of this fields are in network (bigendian) byte order and may need
+  * to be converted before use (bpf_ntohl() defined in samples/bpf/bpf_endian.h).
+  * New fields can only be added at the end of this structure
++>>>>>>> ad5b177bd73f (bpf: Add map_name to bpf_map_info)
   */
 -struct bpf_sock_ops {
 -	__u32 op;
 -	union {
 -		__u32 reply;
 -		__u32 replylong[4];
 -	};
 -	__u32 family;
 -	__u32 remote_ip4;	/* Stored in network byte order */
 -	__u32 local_ip4;	/* Stored in network byte order */
 -	__u32 remote_ip6[4];	/* Stored in network byte order */
 -	__u32 local_ip6[4];	/* Stored in network byte order */
 -	__u32 remote_port;	/* Stored in network byte order */
 -	__u32 local_port;	/* stored in host byte order */
 -};
 -
 -/* List of known BPF sock_ops operators.
 - * New entries can only be added at the end
 - */
 -enum {
 -	BPF_SOCK_OPS_VOID,
 -	BPF_SOCK_OPS_TIMEOUT_INIT,	/* Should return SYN-RTO value to use or
 -					 * -1 if default value should be used
 -					 */
 -	BPF_SOCK_OPS_RWND_INIT,		/* Should return initial advertized
 -					 * window (in packets) or -1 if default
 -					 * value should be used
 -					 */
 -	BPF_SOCK_OPS_TCP_CONNECT_CB,	/* Calls BPF program right before an
 -					 * active connection is initialized
 -					 */
 -	BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,	/* Calls BPF program when an
 -						 * active connection is
 -						 * established
 -						 */
 -	BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,	/* Calls BPF program when a
 -						 * passive connection is
 -						 * established
 -						 */
 -	BPF_SOCK_OPS_NEEDS_ECN,		/* If connection's congestion control
 -					 * needs ECN
 -					 */
 +enum bpf_func_id {
 +	BPF_FUNC_unspec,
 +	__BPF_FUNC_MAX_ID,
  };
  
 -#define TCP_BPF_IW		1001	/* Set TCP initial congestion window */
 -#define TCP_BPF_SNDCWND_CLAMP	1002	/* Set sndcwnd_clamp */
 -
  #endif /* _UAPI__LINUX_BPF_H__ */
* Unmerged path kernel/bpf/syscall.c
* Unmerged path include/linux/bpf.h
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path kernel/bpf/syscall.c
