x86/apic: Remove the (now) unused disable_IO_APIC() function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] apic: Remove the (now) unused disable_IO_APIC() function (Baoquan He) [1521003]
Rebuild_FUZZ: 96.55%
commit-author Baoquan He <bhe@redhat.com>
commit 50374b96d2d30c03c8d42b3f8846d8938748d454
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/50374b96.failed

No one uses it anymore.

	Signed-off-by: Baoquan He <bhe@redhat.com>
	Reviewed-by: Eric W. Biederman <ebiederm@xmission.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: douly.fnst@cn.fujitsu.com
	Cc: joro@8bytes.org
	Cc: prarit@redhat.com
	Cc: uobergfe@redhat.com
Link: http://lkml.kernel.org/r/20180214054656.3780-5-bhe@redhat.com
[ Rewrote the changelog. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 50374b96d2d30c03c8d42b3f8846d8938748d454)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/io_apic.h
#	arch/x86/kernel/apic/io_apic.c
diff --cc arch/x86/include/asm/io_apic.h
index a1ac5648dd12,8018fc48f18d..000000000000
--- a/arch/x86/include/asm/io_apic.h
+++ b/arch/x86/include/asm/io_apic.h
@@@ -218,19 -190,15 +218,28 @@@ static inline unsigned int io_apic_read
  	return x86_io_apic_ops.read(apic, reg);
  }
  
++<<<<<<< HEAD
 +static inline void io_apic_write(unsigned int apic, unsigned int reg, unsigned int value)
 +{
 +	x86_io_apic_ops.write(apic, reg, value);
 +}
 +static inline void io_apic_modify(unsigned int apic, unsigned int reg, unsigned int value)
 +{
 +	x86_io_apic_ops.modify(apic, reg, value);
 +}
 +
 +extern void io_apic_eoi(unsigned int apic, unsigned int vector);
 +
++=======
+ extern void setup_IO_APIC(void);
+ extern void enable_IO_APIC(void);
+ extern void clear_IO_APIC(void);
+ extern void restore_boot_irq_mode(void);
+ extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin);
+ extern void print_IO_APICs(void);
++>>>>>>> 50374b96d2d3 (x86/apic: Remove the (now) unused disable_IO_APIC() function)
  #else  /* !CONFIG_X86_IO_APIC */
  
 -#define IO_APIC_IRQ(x)		0
  #define io_apic_assign_pci_irqs 0
  #define setup_ioapic_ids_from_mpc x86_init_noop
  static inline void ioapic_insert_resources(void) { }
diff --cc arch/x86/kernel/apic/io_apic.c
index d122dcd2cb76,9d86b10c2121..000000000000
--- a/arch/x86/kernel/apic/io_apic.c
+++ b/arch/x86/kernel/apic/io_apic.c
@@@ -2029,21 -1434,12 +2029,26 @@@ void native_disable_io_apic(void
  		ioapic_write_entry(ioapic_i8259.apic, ioapic_i8259.pin, entry);
  	}
  
 -	if (boot_cpu_has(X86_FEATURE_APIC) || apic_from_smp_config())
 +	if (cpu_has_apic || apic_from_smp_config())
  		disconnect_bsp_APIC(ioapic_i8259.pin != -1);
 +
  }
  
++<<<<<<< HEAD
 +/*
 + * Not an __init, needed by the reboot code
 + */
 +void disable_IO_APIC(void)
 +{
 +	/*
 +	 * Clear the IO-APIC before rebooting:
 +	 */
 +	clear_IO_APIC();
 +
++=======
+ void restore_boot_irq_mode(void)
+ {
++>>>>>>> 50374b96d2d3 (x86/apic: Remove the (now) unused disable_IO_APIC() function)
  	if (!nr_legacy_irqs())
  		return;
  
* Unmerged path arch/x86/include/asm/io_apic.h
* Unmerged path arch/x86/kernel/apic/io_apic.c
diff --git a/arch/x86/kernel/machine_kexec_32.c b/arch/x86/kernel/machine_kexec_32.c
index 72e8e310258d..5bb0fa66ce1e 100644
--- a/arch/x86/kernel/machine_kexec_32.c
+++ b/arch/x86/kernel/machine_kexec_32.c
@@ -206,9 +206,8 @@ void machine_kexec(struct kimage *image)
 		/*
 		 * We need to put APICs in legacy mode so that we can
 		 * get timer interrupts in second kernel. kexec/kdump
-		 * paths already have calls to disable_IO_APIC() in
-		 * one form or other. kexec jump path also need
-		 * one.
+		 * paths already have calls to restore_boot_irq_mode()
+		 * in one form or other. kexec jump path also need one.
 		 */
 		disable_IO_APIC();
 #endif
diff --git a/arch/x86/kernel/machine_kexec_64.c b/arch/x86/kernel/machine_kexec_64.c
index 9e197c3a1cb6..3cb878176893 100644
--- a/arch/x86/kernel/machine_kexec_64.c
+++ b/arch/x86/kernel/machine_kexec_64.c
@@ -273,9 +273,8 @@ void machine_kexec(struct kimage *image)
 		/*
 		 * We need to put APICs in legacy mode so that we can
 		 * get timer interrupts in second kernel. kexec/kdump
-		 * paths already have calls to disable_IO_APIC() in
-		 * one form or other. kexec jump path also need
-		 * one.
+		 * paths already have calls to restore_boot_irq_mode()
+		 * in one form or other. kexec jump path also need one.
 		 */
 		disable_IO_APIC();
 #endif
