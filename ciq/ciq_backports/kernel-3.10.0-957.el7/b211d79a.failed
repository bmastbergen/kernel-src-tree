perf tools: Remove warning()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit b211d79ac1ad43d6d8d82e7f1a5c26055a249135
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b211d79a.failed

Now everything uses pr_warning(), so ditch it.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-hv8r0mgdhk73wtfq3zrhavgx@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit b211d79ac1ad43d6d8d82e7f1a5c26055a249135)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/util.h
diff --cc tools/perf/util/util.h
index d086d6faf42f,3927ab8df5ac..000000000000
--- a/tools/perf/util/util.h
+++ b/tools/perf/util/util.h
@@@ -13,19 -13,10 +13,24 @@@
  #include <linux/compiler.h>
  #include <linux/types.h>
  
 +#ifndef __GNUC__
 +#ifndef __attribute__
 +#define __attribute__(x)
 +#endif
 +#endif
 +
  /* General helper functions */
  void usage(const char *err) __noreturn;
++<<<<<<< HEAD
 +void die(const char *err, ...) __noreturn __attribute__((format (printf, 1, 2)));
 +int error(const char *err, ...) __attribute__((format (printf, 1, 2)));
 +void warning(const char *err, ...) __attribute__((format (printf, 1, 2)));
 +
 +void set_warning_routine(void (*routine)(const char *err, va_list params));
++=======
+ void die(const char *err, ...) __noreturn __printf(1, 2);
+ int error(const char *err, ...) __printf(1, 2);
++>>>>>>> b211d79ac1ad (perf tools: Remove warning())
  
  static inline void *zalloc(size_t size)
  {
diff --git a/tools/perf/tests/parse-events.c b/tools/perf/tests/parse-events.c
index 7fad885491c5..812a053d1941 100644
--- a/tools/perf/tests/parse-events.c
+++ b/tools/perf/tests/parse-events.c
@@ -1810,17 +1810,6 @@ static int test_pmu_events(void)
 	return ret;
 }
 
-static void debug_warn(const char *warn, va_list params)
-{
-	char msg[1024];
-
-	if (verbose <= 0)
-		return;
-
-	vsnprintf(msg, sizeof(msg), warn, params);
-	fprintf(stderr, " Warning: %s\n", msg);
-}
-
 int test__parse_events(int subtest __maybe_unused)
 {
 	int ret1, ret2 = 0;
@@ -1832,8 +1821,6 @@ do {							\
 		ret2 = ret1;				\
 } while (0)
 
-	set_warning_routine(debug_warn);
-
 	TEST_EVENTS(test__events);
 
 	if (test_pmu())
diff --git a/tools/perf/util/usage.c b/tools/perf/util/usage.c
index aacb65e079aa..37225dc72738 100644
--- a/tools/perf/util/usage.c
+++ b/tools/perf/util/usage.c
@@ -33,21 +33,10 @@ static void error_builtin(const char *err, va_list params)
 	report(" Error: ", err, params);
 }
 
-static void warn_builtin(const char *warn, va_list params)
-{
-	report(" Warning: ", warn, params);
-}
-
 /* If we are in a dlopen()ed .so write to a global variable would segfault
  * (ugh), so keep things static. */
 static void (*usage_routine)(const char *err) __noreturn = usage_builtin;
 static void (*error_routine)(const char *err, va_list params) = error_builtin;
-static void (*warn_routine)(const char *err, va_list params) = warn_builtin;
-
-void set_warning_routine(void (*routine)(const char *err, va_list params))
-{
-	warn_routine = routine;
-}
 
 void usage(const char *err)
 {
@@ -72,12 +61,3 @@ int error(const char *err, ...)
 	va_end(params);
 	return -1;
 }
-
-void warning(const char *warn, ...)
-{
-	va_list params;
-
-	va_start(params, warn);
-	warn_routine(warn, params);
-	va_end(params);
-}
* Unmerged path tools/perf/util/util.h
