drm/nouveau/gr/gp102-: setup stencil zbc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 4b2c71edf0d7832ef4d2fe5b17402d1130b415dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4b2c71ed.failed

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 4b2c71edf0d7832ef4d2fe5b17402d1130b415dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
index 6ca9a01b8988,86ae5c706aa0..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
@@@ -737,21 -750,31 +737,49 @@@ gf100_gr_zbc_init(struct gf100_gr *gr
  	const u32 f32_1[] = { 0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000,
  			      0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000 };
  	struct nvkm_ltc *ltc = gr->base.engine.subdev.device->ltc;
++<<<<<<< HEAD
 +	int index;
 +
 +	if (!gr->zbc_color[0].format) {
 +		gf100_gr_zbc_color_get(gr, 1,  & zero[0],   &zero[4]);
 +		gf100_gr_zbc_color_get(gr, 2,  &  one[0],    &one[4]);
 +		gf100_gr_zbc_color_get(gr, 4,  &f32_0[0],  &f32_0[4]);
 +		gf100_gr_zbc_color_get(gr, 4,  &f32_1[0],  &f32_1[4]);
 +		gf100_gr_zbc_depth_get(gr, 1, 0x00000000, 0x00000000);
 +		gf100_gr_zbc_depth_get(gr, 1, 0x3f800000, 0x3f800000);
 +	}
 +
 +	for (index = ltc->zbc_min; index <= ltc->zbc_max; index++)
 +		gf100_gr_zbc_clear_color(gr, index);
 +	for (index = ltc->zbc_min; index <= ltc->zbc_max; index++)
 +		gf100_gr_zbc_clear_depth(gr, index);
++=======
+ 	int index, c = ltc->zbc_min, d = ltc->zbc_min, s = ltc->zbc_min;
+ 
+ 	if (!gr->zbc_color[0].format) {
+ 		gf100_gr_zbc_color_get(gr, 1,  & zero[0],   &zero[4]); c++;
+ 		gf100_gr_zbc_color_get(gr, 2,  &  one[0],    &one[4]); c++;
+ 		gf100_gr_zbc_color_get(gr, 4,  &f32_0[0],  &f32_0[4]); c++;
+ 		gf100_gr_zbc_color_get(gr, 4,  &f32_1[0],  &f32_1[4]); c++;
+ 		gf100_gr_zbc_depth_get(gr, 1, 0x00000000, 0x00000000); d++;
+ 		gf100_gr_zbc_depth_get(gr, 1, 0x3f800000, 0x3f800000); d++;
+ 		if (gr->func->zbc->stencil_get) {
+ 			gr->func->zbc->stencil_get(gr, 1, 0x00, 0x00); s++;
+ 			gr->func->zbc->stencil_get(gr, 1, 0x01, 0x01); s++;
+ 			gr->func->zbc->stencil_get(gr, 1, 0xff, 0xff); s++;
+ 		}
+ 	}
+ 
+ 	for (index = c; index <= ltc->zbc_max; index++)
+ 		gr->func->zbc->clear_color(gr, index);
+ 	for (index = d; index <= ltc->zbc_max; index++)
+ 		gr->func->zbc->clear_depth(gr, index);
+ 
+ 	if (gr->func->zbc->clear_stencil) {
+ 		for (index = s; index <= ltc->zbc_max; index++)
+ 			gr->func->zbc->clear_stencil(gr, index);
+ 	}
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  }
  
  /**
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
index 1031f03e3a1f,edf6edabf6df..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
@@@ -121,14 -136,41 +128,25 @@@ int gf100_gr_new_(const struct gf100_gr
  		  int, struct nvkm_gr **);
  void *gf100_gr_dtor(struct nvkm_gr *);
  
++<<<<<<< HEAD
++=======
+ struct gf100_gr_func_zbc {
+ 	void (*clear_color)(struct gf100_gr *, int zbc);
+ 	void (*clear_depth)(struct gf100_gr *, int zbc);
+ 	int (*stencil_get)(struct gf100_gr *, int format,
+ 			   const u32 ds, const u32 l2);
+ 	void (*clear_stencil)(struct gf100_gr *, int zbc);
+ };
+ 
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  struct gf100_gr_func {
  	void (*dtor)(struct gf100_gr *);
 -	void (*oneinit_tiles)(struct gf100_gr *);
 -	void (*oneinit_sm_id)(struct gf100_gr *);
  	int (*init)(struct gf100_gr *);
  	void (*init_gpc_mmu)(struct gf100_gr *);
 -	void (*init_r405a14)(struct gf100_gr *);
 -	void (*init_bios)(struct gf100_gr *);
 -	void (*init_vsc_stream_master)(struct gf100_gr *);
 -	void (*init_zcull)(struct gf100_gr *);
 -	void (*init_num_active_ltcs)(struct gf100_gr *);
  	void (*init_rop_active_fbps)(struct gf100_gr *);
 -	void (*init_bios_2)(struct gf100_gr *);
 -	void (*init_swdx_pes_mask)(struct gf100_gr *);
 -	void (*init_fecs_exceptions)(struct gf100_gr *);
 -	void (*init_ds_hww_esr_2)(struct gf100_gr *);
 -	void (*init_40601c)(struct gf100_gr *);
 -	void (*init_sked_hww_esr)(struct gf100_gr *);
 -	void (*init_419cc0)(struct gf100_gr *);
 -	void (*init_419eb4)(struct gf100_gr *);
 -	void (*init_419c9c)(struct gf100_gr *);
  	void (*init_ppc_exceptions)(struct gf100_gr *);
 -	void (*init_tex_hww_esr)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_504430)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_shader_exceptions)(struct gf100_gr *, int gpc, int tpc);
 -	void (*init_400054)(struct gf100_gr *);
 -	void (*trap_mp)(struct gf100_gr *, int gpc, int tpc);
 +	void (*init_swdx_pes_mask)(struct gf100_gr *);
 +	void (*init_num_active_ltcs)(struct gf100_gr *);
  	void (*set_hww_esr_report_mask)(struct gf100_gr *);
  	const struct gf100_gr_pack *mmio;
  	struct {
@@@ -154,13 -213,30 +172,23 @@@ void gk104_gr_init_ppc_exceptions(struc
  
  int gk20a_gr_init(struct gf100_gr *);
  
 -void gm200_gr_oneinit_tiles(struct gf100_gr *);
 -void gm200_gr_oneinit_sm_id(struct gf100_gr *);
 +int gm200_gr_init(struct gf100_gr *);
  int gm200_gr_rops(struct gf100_gr *);
 -void gm200_gr_init_num_active_ltcs(struct gf100_gr *);
 -void gm200_gr_init_ds_hww_esr_2(struct gf100_gr *);
  
 +int gp100_gr_init(struct gf100_gr *);
  void gp100_gr_init_rop_active_fbps(struct gf100_gr *);
++<<<<<<< HEAD
++=======
+ void gp100_gr_init_fecs_exceptions(struct gf100_gr *);
+ void gp100_gr_init_shader_exceptions(struct gf100_gr *, int, int);
+ void gp100_gr_zbc_clear_color(struct gf100_gr *, int);
+ void gp100_gr_zbc_clear_depth(struct gf100_gr *, int);
+ 
+ void gp102_gr_init_swdx_pes_mask(struct gf100_gr *);
+ extern const struct gf100_gr_func_zbc gp102_gr_zbc;
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  
  #define gf100_gr_chan(p) container_of((p), struct gf100_gr_chan, object)
 -#include <core/object.h>
  
  struct gf100_gr_chan {
  	struct nvkm_object object;
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
index b87d86575036,9d0521ce309a..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
@@@ -29,6 -29,66 +29,69 @@@
  /*******************************************************************************
   * PGRAPH engine/subdev functions
   ******************************************************************************/
++<<<<<<< HEAD
++=======
+ void
+ gp100_gr_zbc_clear_color(struct gf100_gr *gr, int zbc)
+ {
+ 	struct nvkm_device *device = gr->base.engine.subdev.device;
+ 	const int znum =  zbc - 1;
+ 	const u32 zoff = znum * 4;
+ 
+ 	if (gr->zbc_color[zbc].format) {
+ 		nvkm_wr32(device, 0x418010 + zoff, gr->zbc_color[zbc].ds[0]);
+ 		nvkm_wr32(device, 0x41804c + zoff, gr->zbc_color[zbc].ds[1]);
+ 		nvkm_wr32(device, 0x418088 + zoff, gr->zbc_color[zbc].ds[2]);
+ 		nvkm_wr32(device, 0x4180c4 + zoff, gr->zbc_color[zbc].ds[3]);
+ 	}
+ 
+ 	nvkm_mask(device, 0x418100 + ((znum / 4) * 4),
+ 			  0x0000007f << ((znum % 4) * 7),
+ 			  gr->zbc_color[zbc].format << ((znum % 4) * 7));
+ }
+ 
+ void
+ gp100_gr_zbc_clear_depth(struct gf100_gr *gr, int zbc)
+ {
+ 	struct nvkm_device *device = gr->base.engine.subdev.device;
+ 	const int znum =  zbc - 1;
+ 	const u32 zoff = znum * 4;
+ 
+ 	if (gr->zbc_depth[zbc].format)
+ 		nvkm_wr32(device, 0x418110 + zoff, gr->zbc_depth[zbc].ds);
+ 	nvkm_mask(device, 0x41814c + ((znum / 4) * 4),
+ 			  0x0000007f << ((znum % 4) * 7),
+ 			  gr->zbc_depth[zbc].format << ((znum % 4) * 7));
+ }
+ 
+ static const struct gf100_gr_func_zbc
+ gp100_gr_zbc = {
+ 	.clear_color = gp100_gr_zbc_clear_color,
+ 	.clear_depth = gp100_gr_zbc_clear_depth,
+ };
+ 
+ void
+ gp100_gr_init_shader_exceptions(struct gf100_gr *gr, int gpc, int tpc)
+ {
+ 	struct nvkm_device *device = gr->base.engine.subdev.device;
+ 	nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x00dffffe);
+ 	nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x00000105);
+ }
+ 
+ static void
+ gp100_gr_init_419c9c(struct gf100_gr *gr)
+ {
+ 	struct nvkm_device *device = gr->base.engine.subdev.device;
+ 	nvkm_mask(device, 0x419c9c, 0x00010000, 0x00010000);
+ 	nvkm_mask(device, 0x419c9c, 0x00020000, 0x00020000);
+ }
+ 
+ void
+ gp100_gr_init_fecs_exceptions(struct gf100_gr *gr)
+ {
+ 	nvkm_wr32(gr->base.engine.subdev.device, 0x409c24, 0x000f0002);
+ }
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  
  void
  gp100_gr_init_rop_active_fbps(struct gf100_gr *gr)
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
index 8d1b09b9c236,37f7d739bf80..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
@@@ -53,6 -121,7 +109,10 @@@ gp102_gr = 
  	.tpc_nr = 5,
  	.ppc_nr = 3,
  	.grctx = &gp102_grctx,
++<<<<<<< HEAD
++=======
+ 	.zbc = &gp102_gr_zbc,
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  	.sclass = {
  		{ -1, -1, FERMI_TWOD_A },
  		{ -1, -1, KEPLER_INLINE_TO_MEMORY_B },
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
index 289d8b272b42,4573c914c021..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
@@@ -46,6 -49,7 +46,10 @@@ gp104_gr = 
  	.tpc_nr = 5,
  	.ppc_nr = 3,
  	.grctx = &gp104_grctx,
++<<<<<<< HEAD
++=======
+ 	.zbc = &gp102_gr_zbc,
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  	.sclass = {
  		{ -1, -1, FERMI_TWOD_A },
  		{ -1, -1, KEPLER_INLINE_TO_MEMORY_B },
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
index 7ca037eda549,812aba91653f..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
@@@ -39,6 -51,7 +39,10 @@@ gp107_gr = 
  	.tpc_nr = 3,
  	.ppc_nr = 1,
  	.grctx = &gp107_grctx,
++<<<<<<< HEAD
++=======
+ 	.zbc = &gp102_gr_zbc,
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  	.sclass = {
  		{ -1, -1, FERMI_TWOD_A },
  		{ -1, -1, KEPLER_INLINE_TO_MEMORY_B },
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
index 775c4cfdeade,303dceddd4a8..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
@@@ -45,6 -49,7 +45,10 @@@ gp10b_gr = 
  	.tpc_nr = 2,
  	.ppc_nr = 1,
  	.grctx = &gp102_grctx,
++<<<<<<< HEAD
++=======
+ 	.zbc = &gp102_gr_zbc,
++>>>>>>> 4b2c71edf0d7 (drm/nouveau/gr/gp102-: setup stencil zbc)
  	.sclass = {
  		{ -1, -1, FERMI_TWOD_A },
  		{ -1, -1, KEPLER_INLINE_TO_MEMORY_B },
diff --git a/drivers/gpu/drm/nouveau/include/nvkm/subdev/ltc.h b/drivers/gpu/drm/nouveau/include/nvkm/subdev/ltc.h
index cd755baf9cab..83663efbdf14 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/subdev/ltc.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/subdev/ltc.h
@@ -21,6 +21,7 @@ struct nvkm_ltc {
 	int zbc_max;
 	u32 zbc_color[NVKM_LTC_MAX_ZBC_CNT][4];
 	u32 zbc_depth[NVKM_LTC_MAX_ZBC_CNT];
+	u32 zbc_stencil[NVKM_LTC_MAX_ZBC_CNT];
 };
 
 int nvkm_ltc_tags_alloc(struct nvkm_ltc *, u32 count, struct nvkm_mm_node **);
@@ -29,6 +30,7 @@ void nvkm_ltc_tags_clear(struct nvkm_ltc *, u32 first, u32 count);
 
 int nvkm_ltc_zbc_color_get(struct nvkm_ltc *, int index, const u32[4]);
 int nvkm_ltc_zbc_depth_get(struct nvkm_ltc *, int index, const u32);
+int nvkm_ltc_zbc_stencil_get(struct nvkm_ltc *, int index, const u32);
 
 void nvkm_ltc_invalidate(struct nvkm_ltc *);
 void nvkm_ltc_flush(struct nvkm_ltc *);
@@ -39,4 +41,5 @@ int gk20a_ltc_new(struct nvkm_device *, int, struct nvkm_ltc **);
 int gm107_ltc_new(struct nvkm_device *, int, struct nvkm_ltc **);
 int gm200_ltc_new(struct nvkm_device *, int, struct nvkm_ltc **);
 int gp100_ltc_new(struct nvkm_device *, int, struct nvkm_ltc **);
+int gp102_ltc_new(struct nvkm_device *, int, struct nvkm_ltc **);
 #endif
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/device/base.c b/drivers/gpu/drm/nouveau/nvkm/engine/device/base.c
index 29467fdf3432..054f838cbc2f 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/device/base.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/device/base.c
@@ -2202,7 +2202,7 @@ nv132_chipset = {
 	.i2c = gm200_i2c_new,
 	.ibus = gm200_ibus_new,
 	.imem = nv50_instmem_new,
-	.ltc = gp100_ltc_new,
+	.ltc = gp102_ltc_new,
 	.mc = gp100_mc_new,
 	.mmu = gf100_mmu_new,
 	.secboot = gp102_secboot_new,
@@ -2237,7 +2237,7 @@ nv134_chipset = {
 	.i2c = gm200_i2c_new,
 	.ibus = gm200_ibus_new,
 	.imem = nv50_instmem_new,
-	.ltc = gp100_ltc_new,
+	.ltc = gp102_ltc_new,
 	.mc = gp100_mc_new,
 	.mmu = gf100_mmu_new,
 	.secboot = gp102_secboot_new,
@@ -2272,7 +2272,7 @@ nv136_chipset = {
 	.i2c = gm200_i2c_new,
 	.ibus = gm200_ibus_new,
 	.imem = nv50_instmem_new,
-	.ltc = gp100_ltc_new,
+	.ltc = gp102_ltc_new,
 	.mc = gp100_mc_new,
 	.mmu = gf100_mmu_new,
 	.secboot = gp102_secboot_new,
@@ -2307,7 +2307,7 @@ nv137_chipset = {
 	.i2c = gm200_i2c_new,
 	.ibus = gm200_ibus_new,
 	.imem = nv50_instmem_new,
-	.ltc = gp100_ltc_new,
+	.ltc = gp102_ltc_new,
 	.mc = gp100_mc_new,
 	.mmu = gf100_mmu_new,
 	.secboot = gp102_secboot_new,
@@ -2342,7 +2342,7 @@ nv138_chipset = {
 	.i2c = gm200_i2c_new,
 	.ibus = gm200_ibus_new,
 	.imem = nv50_instmem_new,
-	.ltc = gp100_ltc_new,
+	.ltc = gp102_ltc_new,
 	.mc = gp100_mc_new,
 	.mmu = gf100_mmu_new,
 	.pci = gp100_pci_new,
@@ -2368,7 +2368,7 @@ nv13b_chipset = {
 	.fuse = gm107_fuse_new,
 	.ibus = gp10b_ibus_new,
 	.imem = gk20a_instmem_new,
-	.ltc = gp100_ltc_new,
+	.ltc = gp102_ltc_new,
 	.mc = gp10b_mc_new,
 	.mmu = gf100_mmu_new,
 	.secboot = gp10b_secboot_new,
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp104.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
diff --git a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/Kbuild b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/Kbuild
index 12d6f4f102cb..290ff1c425a9 100644
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/Kbuild
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/Kbuild
@@ -4,3 +4,4 @@ nvkm-y += nvkm/subdev/ltc/gk104.o
 nvkm-y += nvkm/subdev/ltc/gm107.o
 nvkm-y += nvkm/subdev/ltc/gm200.o
 nvkm-y += nvkm/subdev/ltc/gp100.o
+nvkm-y += nvkm/subdev/ltc/gp102.o
diff --git a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/base.c b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/base.c
index 0c7ef250dcaf..79fa52ad4006 100644
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/base.c
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/base.c
@@ -69,6 +69,14 @@ nvkm_ltc_zbc_depth_get(struct nvkm_ltc *ltc, int index, const u32 depth)
 	return index;
 }
 
+int
+nvkm_ltc_zbc_stencil_get(struct nvkm_ltc *ltc, int index, const u32 stencil)
+{
+	ltc->zbc_stencil[index] = stencil;
+	ltc->func->zbc_clear_stencil(ltc, index, stencil);
+	return index;
+}
+
 void
 nvkm_ltc_invalidate(struct nvkm_ltc *ltc)
 {
@@ -106,6 +114,8 @@ nvkm_ltc_init(struct nvkm_subdev *subdev)
 	for (i = ltc->zbc_min; i <= ltc->zbc_max; i++) {
 		ltc->func->zbc_clear_color(ltc, i, ltc->zbc_color[i]);
 		ltc->func->zbc_clear_depth(ltc, i, ltc->zbc_depth[i]);
+		if (ltc->func->zbc_clear_stencil)
+			ltc->func->zbc_clear_stencil(ltc, i, ltc->zbc_stencil[i]);
 	}
 
 	ltc->func->init(ltc);
diff --git a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/gp100.c b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/gp100.c
index 0bdfb2f40266..a05bac9627f4 100644
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/gp100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/gp100.c
@@ -23,7 +23,7 @@
  */
 #include "priv.h"
 
-static void
+void
 gp100_ltc_intr(struct nvkm_ltc *ltc)
 {
 	struct nvkm_device *device = ltc->subdev.device;
@@ -38,7 +38,7 @@ gp100_ltc_intr(struct nvkm_ltc *ltc)
 	}
 }
 
-static int
+int
 gp100_ltc_oneinit(struct nvkm_ltc *ltc)
 {
 	struct nvkm_device *device = ltc->subdev.device;
@@ -48,7 +48,7 @@ gp100_ltc_oneinit(struct nvkm_ltc *ltc)
 	return nvkm_mm_init(&ltc->tags, 0, 0, 1);
 }
 
-static void
+void
 gp100_ltc_init(struct nvkm_ltc *ltc)
 {
 	/*XXX: PMU LS call to setup tagram address */
diff --git a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/gp102.c b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/gp102.c
new file mode 100644
index 000000000000..601747ada655
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/gp102.c
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2018 Red Hat Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ */
+#include "priv.h"
+
+void
+gp102_ltc_zbc_clear_stencil(struct nvkm_ltc *ltc, int i, const u32 stencil)
+{
+	struct nvkm_device *device = ltc->subdev.device;
+	nvkm_mask(device, 0x17e338, 0x0000000f, i);
+	nvkm_wr32(device, 0x17e204, stencil);
+}
+
+static const struct nvkm_ltc_func
+gp102_ltc = {
+	.oneinit = gp100_ltc_oneinit,
+	.init = gp100_ltc_init,
+	.intr = gp100_ltc_intr,
+	.cbc_clear = gm107_ltc_cbc_clear,
+	.cbc_wait = gm107_ltc_cbc_wait,
+	.zbc = 16,
+	.zbc_clear_color = gm107_ltc_zbc_clear_color,
+	.zbc_clear_depth = gm107_ltc_zbc_clear_depth,
+	.zbc_clear_stencil = gp102_ltc_zbc_clear_stencil,
+	.invalidate = gf100_ltc_invalidate,
+	.flush = gf100_ltc_flush,
+};
+
+int
+gp102_ltc_new(struct nvkm_device *device, int index, struct nvkm_ltc **pltc)
+{
+	return nvkm_ltc_new_(&gp102_ltc, device, index, pltc);
+}
diff --git a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/priv.h b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/priv.h
index 8b95f96e3ffa..401688df2d14 100644
--- a/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/priv.h
+++ b/drivers/gpu/drm/nouveau/nvkm/subdev/ltc/priv.h
@@ -18,6 +18,7 @@ struct nvkm_ltc_func {
 	int zbc;
 	void (*zbc_clear_color)(struct nvkm_ltc *, int, const u32[4]);
 	void (*zbc_clear_depth)(struct nvkm_ltc *, int, const u32);
+	void (*zbc_clear_stencil)(struct nvkm_ltc *, int, const u32);
 
 	void (*invalidate)(struct nvkm_ltc *);
 	void (*flush)(struct nvkm_ltc *);
@@ -40,4 +41,8 @@ void gm107_ltc_cbc_clear(struct nvkm_ltc *, u32, u32);
 void gm107_ltc_cbc_wait(struct nvkm_ltc *);
 void gm107_ltc_zbc_clear_color(struct nvkm_ltc *, int, const u32[4]);
 void gm107_ltc_zbc_clear_depth(struct nvkm_ltc *, int, const u32);
+
+int gp100_ltc_oneinit(struct nvkm_ltc *);
+void gp100_ltc_init(struct nvkm_ltc *);
+void gp100_ltc_intr(struct nvkm_ltc *);
 #endif
