bpf: make inode code explicitly non-modular

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Paul Gortmaker <paul.gortmaker@windriver.com>
commit a536a6e13ecd0d6eb0ffc36c5d56555896617282
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a536a6e1.failed

The Kconfig currently controlling compilation of this code is:

init/Kconfig:config BPF_SYSCALL
init/Kconfig:   bool "Enable bpf() system call"

...meaning that it currently is not being built as a module by anyone.

Lets remove the couple traces of modular infrastructure use, so that
when reading the driver there is no doubt it is builtin-only.

Note that MODULE_ALIAS is a no-op for non-modular code.

We replace module.h with init.h since the file does use __init.

	Cc: Alexei Starovoitov <ast@kernel.org>
	Cc: netdev@vger.kernel.org
	Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
	Acked-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a536a6e13ecd0d6eb0ffc36c5d56555896617282)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/inode.c
* Unmerged path kernel/bpf/inode.c
* Unmerged path kernel/bpf/inode.c
