i40e: convert to use generic xdp_frame and xdp_return_frame API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jesper Dangaard Brouer <brouer@redhat.com>
commit b411ef11020d012790839a5414040283d9335386
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b411ef11.failed

Also convert driver i40e, which very recently got XDP_REDIRECT support
in commit d9314c474d4f ("i40e: add support for XDP_REDIRECT").

V7: This patch got added in V7 of this patchset.

	Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b411ef11020d012790839a5414040283d9335386)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_txrx.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_txrx.c
index d6a622ef9c0e,96c54cbfb1f9..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@@ -630,6 -637,9 +630,12 @@@ static void i40e_unmap_and_free_tx_reso
  	if (tx_buffer->skb) {
  		if (tx_buffer->tx_flags & I40E_TX_FLAGS_FD_SB)
  			kfree(tx_buffer->raw_buf);
++<<<<<<< HEAD
++=======
+ 		else if (ring_is_xdp(ring))
+ 			xdp_return_frame(tx_buffer->xdpf->data,
+ 					 &tx_buffer->xdpf->mem);
++>>>>>>> b411ef11020d (i40e: convert to use generic xdp_frame and xdp_return_frame API)
  		else
  			dev_kfree_skb_any(tx_buffer->skb);
  		if (dma_unmap_len(tx_buffer, len))
@@@ -771,8 -840,11 +777,16 @@@ static bool i40e_clean_tx_irq(struct i4
  		total_bytes += tx_buf->bytecount;
  		total_packets += tx_buf->gso_segs;
  
++<<<<<<< HEAD
 +		/* free the skb */
 +		napi_consume_skb(tx_buf->skb, napi_budget);
++=======
+ 		/* free the skb/XDP data */
+ 		if (ring_is_xdp(tx_ring))
+ 			xdp_return_frame(tx_buf->xdpf->data, &tx_buf->xdpf->mem);
+ 		else
+ 			napi_consume_skb(tx_buf->skb, napi_budget);
++>>>>>>> b411ef11020d (i40e: convert to use generic xdp_frame and xdp_return_frame API)
  
  		/* unmap skb header data */
  		dma_unmap_single(tx_ring->dev,
@@@ -3186,6 -3477,66 +3202,69 @@@ dma_error
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * i40e_xmit_xdp_ring - transmits an XDP buffer to an XDP Tx ring
+  * @xdp: data to transmit
+  * @xdp_ring: XDP Tx ring
+  **/
+ static int i40e_xmit_xdp_ring(struct xdp_buff *xdp,
+ 			      struct i40e_ring *xdp_ring)
+ {
+ 	u16 i = xdp_ring->next_to_use;
+ 	struct i40e_tx_buffer *tx_bi;
+ 	struct i40e_tx_desc *tx_desc;
+ 	struct xdp_frame *xdpf;
+ 	dma_addr_t dma;
+ 	u32 size;
+ 
+ 	xdpf = convert_to_xdp_frame(xdp);
+ 	if (unlikely(!xdpf))
+ 		return I40E_XDP_CONSUMED;
+ 
+ 	size = xdpf->len;
+ 
+ 	if (!unlikely(I40E_DESC_UNUSED(xdp_ring))) {
+ 		xdp_ring->tx_stats.tx_busy++;
+ 		return I40E_XDP_CONSUMED;
+ 	}
+ 
+ 	dma = dma_map_single(xdp_ring->dev, xdpf->data, size, DMA_TO_DEVICE);
+ 	if (dma_mapping_error(xdp_ring->dev, dma))
+ 		return I40E_XDP_CONSUMED;
+ 
+ 	tx_bi = &xdp_ring->tx_bi[i];
+ 	tx_bi->bytecount = size;
+ 	tx_bi->gso_segs = 1;
+ 	tx_bi->xdpf = xdpf;
+ 
+ 	/* record length, and DMA address */
+ 	dma_unmap_len_set(tx_bi, len, size);
+ 	dma_unmap_addr_set(tx_bi, dma, dma);
+ 
+ 	tx_desc = I40E_TX_DESC(xdp_ring, i);
+ 	tx_desc->buffer_addr = cpu_to_le64(dma);
+ 	tx_desc->cmd_type_offset_bsz = build_ctob(I40E_TX_DESC_CMD_ICRC
+ 						  | I40E_TXD_CMD,
+ 						  0, size, 0);
+ 
+ 	/* Make certain all of the status bits have been updated
+ 	 * before next_to_watch is written.
+ 	 */
+ 	smp_wmb();
+ 
+ 	i++;
+ 	if (i == xdp_ring->count)
+ 		i = 0;
+ 
+ 	tx_bi->next_to_watch = tx_desc;
+ 	xdp_ring->next_to_use = i;
+ 
+ 	return I40E_XDP_TX;
+ }
+ 
+ /**
++>>>>>>> b411ef11020d (i40e: convert to use generic xdp_frame and xdp_return_frame API)
   * i40e_xmit_frame_ring - Sends buffer on Tx ring
   * @skb:     send buffer
   * @tx_ring: ring to send buffer on
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_txrx.c
diff --git a/drivers/net/ethernet/intel/i40e/i40e_txrx.h b/drivers/net/ethernet/intel/i40e/i40e_txrx.h
index 3eaaa3113384..a6714d2ea15c 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.h
@@ -300,6 +300,7 @@ static inline unsigned int i40e_txd_use_count(unsigned int size)
 struct i40e_tx_buffer {
 	struct i40e_tx_desc *next_to_watch;
 	union {
+		struct xdp_frame *xdpf;
 		struct sk_buff *skb;
 		void *raw_buf;
 	};
