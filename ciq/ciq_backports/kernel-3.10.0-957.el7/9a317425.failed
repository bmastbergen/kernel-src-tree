net/mlx5e: Change Mellanox references in DIM code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Change Mellanox references in DIM code (Alaa Hleihel) [1520297]
Rebuild_FUZZ: 95.74%
commit-author Andy Gospodarek <gospo@broadcom.com>
commit 9a31742531018c0b6ab1bccff97109c8020ad86e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9a317425.failed

Change all appropriate mlx5_am* and MLX5_AM* references to net_dim and
NET_DIM, respectively, in code that handles dynamic interrupt
moderation.  Also change all references from 'am' to 'dim' when used as
local variables and add generic profile references.

	Signed-off-by: Andy Gospodarek <gospo@broadcom.com>
	Acked-by: Tal Gilboa <talgi@mellanox.com>
	Acked-by: Saeed Mahameed <saeedm@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9a31742531018c0b6ab1bccff97109c8020ad86e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_dim.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
diff --cc drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
index 1d7bd82a1fb1,c2612fbf8189..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
+++ b/drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
@@@ -30,33 -30,18 +30,48 @@@
   * SOFTWARE.
   */
  
 -#include "en.h"
 +/*
 + * This file is conditionally built on PowerPC only.  Otherwise weak symbol
 + * versions of the functions exported from here are used.
 + */
 +
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
 +#include "ipath_kernel.h"
  
 +/**
 + * ipath_enable_wc - enable write combining for MMIO writes to the device
 + * @dd: infinipath device
 + *
 + * Nothing to do on PowerPC, so just return without error.
 + */
 +int ipath_enable_wc(struct ipath_devdata *dd)
 +{
 +	return 0;
 +}
 +
 +/**
 + * ipath_unordered_wc - indicate whether write combining is unordered
 + *
 + * Because our performance depends on our ability to do write
 + * combining mmio writes in the most efficient way, we need to
 + * know if we are on a processor that may reorder stores when
 + * write combining.
 + */
 +int ipath_unordered_wc(void)
 +{
 +	return 1;
++=======
+ void mlx5e_rx_dim_work(struct work_struct *work)
+ {
+ 	struct net_dim *dim = container_of(work, struct net_dim,
+ 					   work);
+ 	struct mlx5e_rq *rq = container_of(dim, struct mlx5e_rq, dim);
+ 	struct net_dim_cq_moder cur_profile = net_dim_get_profile(dim->mode,
+ 								  dim->profile_ix);
+ 
+ 	mlx5_core_modify_cq_moderation(rq->mdev, &rq->cq.mcq,
+ 				       cur_profile.usec, cur_profile.pkts);
+ 
+ 	dim->state = NET_DIM_START_MEASURE;
++>>>>>>> 9a3174253101 (net/mlx5e: Change Mellanox references in DIM code):drivers/net/ethernet/mellanox/mlx5/core/en_dim.c
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index d37519e4a065,349918c4ff73..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -488,8 -528,12 +488,8 @@@ struct mlx5e_rq 
  	unsigned long          state;
  	int                    ix;
  
- 	struct mlx5e_rx_am     am; /* Adaptive Moderation */
+ 	struct net_dim         dim; /* Dynamic Interrupt Moderation */
  
 -	/* XDP */
 -	struct bpf_prog       *xdp_prog;
 -	struct mlx5e_xdpsq     xdpsq;
 -
  	/* control */
  	struct mlx5_wq_ctrl    wq_ctrl;
  	__be32                 mkey_be;
@@@ -1017,5 -1079,6 +1017,10 @@@ void mlx5e_destroy_netdev(struct mlx5e_
  void mlx5e_build_nic_params(struct mlx5_core_dev *mdev,
  			    struct mlx5e_params *params,
  			    u16 max_channels);
++<<<<<<< HEAD
 +
++=======
+ u8 mlx5e_params_calculate_tx_min_inline(struct mlx5_core_dev *mdev);
+ void mlx5e_rx_dim_work(struct work_struct *work);
++>>>>>>> 9a3174253101 (net/mlx5e: Change Mellanox references in DIM code)
  #endif /* __MLX5_EN_H__ */
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_dim.h
index a1497bab7154,f0a70cd39a2a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_dim.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_dim.h
@@@ -87,16 -93,16 +93,25 @@@ enum 
  };
  
  enum {
- 	MLX5E_AM_STEPPED,
- 	MLX5E_AM_TOO_TIRED,
- 	MLX5E_AM_ON_EDGE,
+ 	NET_DIM_STEPPED,
+ 	NET_DIM_TOO_TIRED,
+ 	NET_DIM_ON_EDGE,
  };
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/en_dim.h
 +void mlx5e_rx_am(struct mlx5e_rx_am *am,
 +		 u16 event_ctr,
 +		 u64 packets,
 +		 u64 bytes);
 +void mlx5e_rx_am_work(struct work_struct *work);
 +struct mlx5e_cq_moder mlx5e_am_get_def_profile(u8 rx_cq_period_mode);
++=======
+ void net_dim(struct net_dim *dim,
+ 	     u16 event_ctr,
+ 	     u64 packets,
+ 	     u64 bytes);
+ struct net_dim_cq_moder net_dim_get_def_profile(u8 rx_cq_period_mode);
+ struct net_dim_cq_moder net_dim_get_profile(u8 cq_period_mode, int ix);
++>>>>>>> 9a3174253101 (net/mlx5e: Change Mellanox references in DIM code):drivers/net/ethernet/mellanox/mlx5/core/net_dim.h
  
- #endif /* MLX5_AM_H */
+ #endif /* NET_DIM_H */
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
index 337dd6024487,decb3707d134..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
@@@ -32,22 -33,22 +32,30 @@@
  
  #include "en.h"
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
 +/* Adaptive moderation profiles */
 +#define MLX5E_AM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE 256
 +#define MLX5E_RX_AM_DEF_PROFILE_CQE 1
 +#define MLX5E_RX_AM_DEF_PROFILE_EQE 1
 +#define MLX5E_PARAMS_AM_NUM_PROFILES 5
- 
- /* All profiles sizes must be MLX5E_PARAMS_AM_NUM_PROFILES */
- #define MLX5_AM_EQE_PROFILES { \
- 	{1,   MLX5E_AM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
- 	{8,   MLX5E_AM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
- 	{64,  MLX5E_AM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
- 	{128, MLX5E_AM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
- 	{256, MLX5E_AM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
++=======
+ #define NET_DIM_PARAMS_NUM_PROFILES 5
+ /* Adaptive moderation profiles */
+ #define NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE 256
+ #define NET_DIM_DEF_PROFILE_CQE 1
+ #define NET_DIM_DEF_PROFILE_EQE 1
++>>>>>>> 9a3174253101 (net/mlx5e: Change Mellanox references in DIM code):drivers/net/ethernet/mellanox/mlx5/core/net_dim.c
+ 
+ /* All profiles sizes must be NET_PARAMS_DIM_NUM_PROFILES */
+ #define NET_DIM_EQE_PROFILES { \
+ 	{1,   NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{8,   NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{64,  NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{128, NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
+ 	{256, NET_DIM_DEFAULT_RX_CQ_MODERATION_PKTS_FROM_EQE}, \
  }
  
- #define MLX5_AM_CQE_PROFILES { \
+ #define NET_DIM_CQE_PROFILES { \
  	{2,  256},             \
  	{8,  128},             \
  	{16, 64},              \
@@@ -55,15 -56,15 +63,19 @@@
  	{64, 64}               \
  }
  
- static const struct mlx5e_cq_moder
- profile[MLX5_CQ_PERIOD_NUM_MODES][MLX5E_PARAMS_AM_NUM_PROFILES] = {
- 	MLX5_AM_EQE_PROFILES,
- 	MLX5_AM_CQE_PROFILES,
+ static const struct net_dim_cq_moder
+ profile[NET_DIM_CQ_PERIOD_NUM_MODES][NET_DIM_PARAMS_NUM_PROFILES] = {
+ 	NET_DIM_EQE_PROFILES,
+ 	NET_DIM_CQE_PROFILES,
  };
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
 +static inline struct mlx5e_cq_moder mlx5e_am_get_profile(u8 cq_period_mode, int ix)
++=======
+ struct net_dim_cq_moder net_dim_get_profile(u8 cq_period_mode, int ix)
++>>>>>>> 9a3174253101 (net/mlx5e: Change Mellanox references in DIM code):drivers/net/ethernet/mellanox/mlx5/core/net_dim.c
  {
- 	struct mlx5e_cq_moder cq_moder;
+ 	struct net_dim_cq_moder cq_moder;
  
  	cq_moder = profile[cq_period_mode][ix];
  	cq_moder.cq_period_mode = cq_period_mode;
@@@ -74,25 -75,24 +86,29 @@@ struct net_dim_cq_moder net_dim_get_def
  {
  	int default_profile_ix;
  
- 	if (rx_cq_period_mode == MLX5_CQ_PERIOD_MODE_START_FROM_CQE)
- 		default_profile_ix = MLX5E_RX_AM_DEF_PROFILE_CQE;
- 	else /* MLX5_CQ_PERIOD_MODE_START_FROM_EQE */
- 		default_profile_ix = MLX5E_RX_AM_DEF_PROFILE_EQE;
+ 	if (rx_cq_period_mode == NET_DIM_CQ_PERIOD_MODE_START_FROM_CQE)
+ 		default_profile_ix = NET_DIM_DEF_PROFILE_CQE;
+ 	else /* NET_DIM_CQ_PERIOD_MODE_START_FROM_EQE */
+ 		default_profile_ix = NET_DIM_DEF_PROFILE_EQE;
  
- 	return mlx5e_am_get_profile(rx_cq_period_mode, default_profile_ix);
+ 	return net_dim_get_profile(rx_cq_period_mode, default_profile_ix);
  }
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
 +
 +static bool mlx5e_am_on_top(struct mlx5e_rx_am *am)
++=======
+ static bool net_dim_on_top(struct net_dim *dim)
++>>>>>>> 9a3174253101 (net/mlx5e: Change Mellanox references in DIM code):drivers/net/ethernet/mellanox/mlx5/core/net_dim.c
  {
- 	switch (am->tune_state) {
- 	case MLX5E_AM_PARKING_ON_TOP:
- 	case MLX5E_AM_PARKING_TIRED:
+ 	switch (dim->tune_state) {
+ 	case NET_DIM_PARKING_ON_TOP:
+ 	case NET_DIM_PARKING_TIRED:
  		return true;
- 	case MLX5E_AM_GOING_RIGHT:
- 		return (am->steps_left > 1) && (am->steps_right == 1);
- 	default: /* MLX5E_AM_GOING_LEFT */
- 		return (am->steps_right > 1) && (am->steps_left == 1);
+ 	case NET_DIM_GOING_RIGHT:
+ 		return (dim->steps_left > 1) && (dim->steps_right == 1);
+ 	default: /* NET_DIM_GOING_LEFT */
+ 		return (dim->steps_right > 1) && (dim->steps_left == 1);
  	}
  }
  
@@@ -273,40 -273,27 +289,47 @@@ static void net_dim_calc_stats(struct n
  					delta_us);
  }
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
 +void mlx5e_rx_am_work(struct work_struct *work)
 +{
 +	struct mlx5e_rx_am *am = container_of(work, struct mlx5e_rx_am,
 +					      work);
 +	struct mlx5e_rq *rq = container_of(am, struct mlx5e_rq, am);
 +	struct mlx5e_cq_moder cur_profile = profile[am->mode][am->profile_ix];
 +
 +	mlx5_core_modify_cq_moderation(rq->mdev, &rq->cq.mcq,
 +				       cur_profile.usec, cur_profile.pkts);
 +
 +	am->state = MLX5E_AM_START_MEASURE;
 +}
 +
 +void mlx5e_rx_am(struct mlx5e_rx_am *am,
 +		 u16 event_ctr,
 +		 u64 packets,
 +		 u64 bytes)
++=======
+ void net_dim(struct net_dim *dim,
+ 	     u16 event_ctr,
+ 	     u64 packets,
+ 	     u64 bytes)
++>>>>>>> 9a3174253101 (net/mlx5e: Change Mellanox references in DIM code):drivers/net/ethernet/mellanox/mlx5/core/net_dim.c
  {
- 	struct mlx5e_rx_am_sample end_sample;
- 	struct mlx5e_rx_am_stats curr_stats;
+ 	struct net_dim_sample end_sample;
+ 	struct net_dim_stats curr_stats;
  	u16 nevents;
  
- 	switch (am->state) {
- 	case MLX5E_AM_MEASURE_IN_PROGRESS:
+ 	switch (dim->state) {
+ 	case NET_DIM_MEASURE_IN_PROGRESS:
  		nevents = BIT_GAP(BITS_PER_TYPE(u16), event_ctr,
- 				  am->start_sample.event_ctr);
- 		if (nevents < MLX5E_AM_NEVENTS)
+ 				  dim->start_sample.event_ctr);
+ 		if (nevents < NET_DIM_NEVENTS)
  			break;
- 		mlx5e_am_sample(event_ctr, packets, bytes, &end_sample);
- 		mlx5e_am_calc_stats(&am->start_sample, &end_sample,
- 				    &curr_stats);
- 		if (mlx5e_am_decision(&curr_stats, am)) {
- 			am->state = MLX5E_AM_APPLY_NEW_PROFILE;
- 			schedule_work(&am->work);
+ 		net_dim_sample(event_ctr, packets, bytes, &end_sample);
+ 		net_dim_calc_stats(&dim->start_sample, &end_sample,
+ 				   &curr_stats);
+ 		if (net_dim_decision(&curr_stats, dim)) {
+ 			dim->state = NET_DIM_APPLY_NEW_PROFILE;
+ 			schedule_work(&dim->work);
  			break;
  		}
  		/* fall through */
* Unmerged path drivers/infiniband/hw/ipath/ipath_wc_ppc64.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_dim.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 70bcc77ec46b..9970bb4f93d4 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@ -699,7 +699,7 @@ int mlx5e_ethtool_get_coalesce(struct mlx5e_priv *priv,
 	coal->rx_max_coalesced_frames = priv->channels.params.rx_cq_moderation.pkts;
 	coal->tx_coalesce_usecs       = priv->channels.params.tx_cq_moderation.usec;
 	coal->tx_max_coalesced_frames = priv->channels.params.tx_cq_moderation.pkts;
-	coal->use_adaptive_rx_coalesce = priv->channels.params.rx_am_enabled;
+	coal->use_adaptive_rx_coalesce = priv->channels.params.rx_dim_enabled;
 
 	return 0;
 }
@@ -753,7 +753,7 @@ int mlx5e_ethtool_set_coalesce(struct mlx5e_priv *priv,
 	new_channels.params.tx_cq_moderation.pkts = coal->tx_max_coalesced_frames;
 	new_channels.params.rx_cq_moderation.usec = coal->rx_coalesce_usecs;
 	new_channels.params.rx_cq_moderation.pkts = coal->rx_max_coalesced_frames;
-	new_channels.params.rx_am_enabled         = !!coal->use_adaptive_rx_coalesce;
+	new_channels.params.rx_dim_enabled        = !!coal->use_adaptive_rx_coalesce;
 
 	if (!test_bit(MLX5E_STATE_OPENED, &priv->state)) {
 		priv->channels.params = new_channels.params;
@@ -761,7 +761,7 @@ int mlx5e_ethtool_set_coalesce(struct mlx5e_priv *priv,
 	}
 	/* we are opened */
 
-	reset = !!coal->use_adaptive_rx_coalesce != priv->channels.params.rx_am_enabled;
+	reset = !!coal->use_adaptive_rx_coalesce != priv->channels.params.rx_dim_enabled;
 	if (!reset) {
 		mlx5e_set_priv_channels_coalesce(priv, coal);
 		priv->channels.params = new_channels.params;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 59cef011d6cf..854375459970 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -659,8 +659,17 @@ static int mlx5e_alloc_rq(struct mlx5e_channel *c,
 		wqe->data.lkey = rq->mkey_be;
 	}
 
-	INIT_WORK(&rq->am.work, mlx5e_rx_am_work);
-	rq->am.mode = params->rx_cq_moderation.cq_period_mode;
+	INIT_WORK(&rq->dim.work, mlx5e_rx_dim_work);
+
+	switch (params->rx_cq_moderation.cq_period_mode) {
+	case MLX5_CQ_PERIOD_MODE_START_FROM_CQE:
+		rq->dim.mode = NET_DIM_CQ_PERIOD_MODE_START_FROM_CQE;
+		break;
+	case MLX5_CQ_PERIOD_MODE_START_FROM_EQE:
+	default:
+		rq->dim.mode = NET_DIM_CQ_PERIOD_MODE_START_FROM_EQE;
+	}
+
 	rq->page_cache.head = 0;
 	rq->page_cache.tail = 0;
 
@@ -899,7 +908,7 @@ static int mlx5e_open_rq(struct mlx5e_channel *c,
 	if (err)
 		goto err_destroy_rq;
 
-	if (params->rx_am_enabled)
+	if (params->rx_dim_enabled)
 		c->rq.state |= BIT(MLX5E_RQ_STATE_AM);
 
 	return 0;
@@ -932,7 +941,7 @@ static void mlx5e_deactivate_rq(struct mlx5e_rq *rq)
 
 static void mlx5e_close_rq(struct mlx5e_rq *rq)
 {
-	cancel_work_sync(&rq->am.work);
+	cancel_work_sync(&rq->dim.work);
 	mlx5e_destroy_rq(rq);
 	mlx5e_free_rx_descs(rq);
 	mlx5e_free_rq(rq);
@@ -1422,7 +1431,7 @@ static void mlx5e_destroy_cq(struct mlx5e_cq *cq)
 }
 
 static int mlx5e_open_cq(struct mlx5e_channel *c,
-			 struct mlx5e_cq_moder moder,
+			 struct net_dim_cq_moder moder,
 			 struct mlx5e_cq_param *param,
 			 struct mlx5e_cq *cq)
 {
@@ -1604,7 +1613,7 @@ static int mlx5e_open_channel(struct mlx5e_priv *priv, int ix,
 			      struct mlx5e_channel_param *cparam,
 			      struct mlx5e_channel **cp)
 {
-	struct mlx5e_cq_moder icocq_moder = {0, 0};
+	struct net_dim_cq_moder icocq_moder = {0, 0};
 	struct net_device *netdev = priv->netdev;
 	int cpu = mlx5e_get_cpu(priv, ix);
 	struct mlx5e_channel *c;
@@ -1836,7 +1845,7 @@ static void mlx5e_build_ico_cq_param(struct mlx5e_priv *priv,
 
 	mlx5e_build_common_cq_param(priv, param);
 
-	param->cq_period_mode = MLX5_CQ_PERIOD_MODE_START_FROM_EQE;
+	param->cq_period_mode = NET_DIM_CQ_PERIOD_MODE_START_FROM_EQE;
 }
 
 static void mlx5e_build_icosq_param(struct mlx5e_priv *priv,
@@ -3707,9 +3716,18 @@ void mlx5e_set_rx_cq_mode_params(struct mlx5e_params *params, u8 cq_period_mode)
 		params->rx_cq_moderation.usec =
 			MLX5E_PARAMS_DEFAULT_RX_CQ_MODERATION_USEC_FROM_CQE;
 
-	if (params->rx_am_enabled)
-		params->rx_cq_moderation =
-			mlx5e_am_get_def_profile(cq_period_mode);
+	if (params->rx_dim_enabled) {
+		switch (cq_period_mode) {
+		case MLX5_CQ_PERIOD_MODE_START_FROM_CQE:
+			params->rx_cq_moderation =
+				net_dim_get_def_profile(NET_DIM_CQ_PERIOD_MODE_START_FROM_CQE);
+			break;
+		case MLX5_CQ_PERIOD_MODE_START_FROM_EQE:
+		default:
+			params->rx_cq_moderation =
+				net_dim_get_def_profile(NET_DIM_CQ_PERIOD_MODE_START_FROM_EQE);
+		}
+	}
 
 	MLX5E_SET_PFLAG(params, MLX5E_PFLAG_RX_CQE_BASED_MODER,
 			params->rx_cq_moderation.cq_period_mode ==
@@ -3771,7 +3789,7 @@ void mlx5e_build_nic_params(struct mlx5_core_dev *mdev,
 	cq_period_mode = MLX5_CAP_GEN(mdev, cq_period_start_from_cqe) ?
 			MLX5_CQ_PERIOD_MODE_START_FROM_CQE :
 			MLX5_CQ_PERIOD_MODE_START_FROM_EQE;
-	params->rx_am_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
+	params->rx_dim_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
 	mlx5e_set_rx_cq_mode_params(params, cq_period_mode);
 	mlx5e_set_tx_cq_mode_params(params, cq_period_mode);
 
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 9efd60694329..780678ca8c0d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -855,7 +855,7 @@ static void mlx5e_build_rep_params(struct mlx5_core_dev *mdev,
 	params->rq_wq_type  = MLX5_WQ_TYPE_LINKED_LIST;
 	params->log_rq_size = MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE;
 
-	params->rx_am_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
+	params->rx_dim_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
 	mlx5e_set_rx_cq_mode_params(params, cq_period_mode);
 
 	params->tx_max_inline         = mlx5e_get_max_inline_cap(mdev);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx_am.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
index 1b8f9f1c72f5..88bc70f9a614 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_txrx.c
@@ -78,10 +78,10 @@ int mlx5e_napi_poll(struct napi_struct *napi, int budget)
 		mlx5e_cq_arm(&c->sq[i].cq);
 
 	if (MLX5E_TEST_BIT(c->rq.state, MLX5E_RQ_STATE_AM))
-		mlx5e_rx_am(&c->rq.am,
-			    c->rq.cq.event_ctr,
-			    c->rq.stats.packets,
-			    c->rq.stats.bytes);
+		net_dim(&c->rq.dim,
+			c->rq.cq.event_ctr,
+			c->rq.stats.packets,
+			c->rq.stats.bytes);
 
 	mlx5e_cq_arm(&c->rq.cq);
 	mlx5e_cq_arm(&c->icosq.cq);
