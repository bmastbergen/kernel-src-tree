openvswitch: do not propagate headroom updates to internal port

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Paolo Abeni <pabeni@redhat.com>
commit 183dea5818315c0a172d21ecbcd2554894bf01e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/183dea58.failed

After commit 3a927bc7cf9d ("ovs: propagate per dp max headroom to
all vports") the need_headroom for the internal vport is updated
accordingly to the max needed headroom in its datapath.

That avoids the pskb_expand_head() costs when sending/forwarding
packets towards tunnel devices, at least for some scenarios.

We still require such copy when using the ovs-preferred configuration
for vxlan tunnels:

    br_int
  /       \
tap      vxlan
           (remote_ip:X)

br_phy
     \
    NIC

where the route towards the IP 'X' is via 'br_phy'.

When forwarding traffic from the tap towards the vxlan device, we
will call pskb_expand_head() in vxlan_build_skb() because
br-phy->needed_headroom is equal to tun->needed_headroom.

With this change we avoid updating the internal vport needed_headroom,
so that in the above scenario no head copy is needed, giving 5%
performance improvement in UDP throughput test.

As a trade-off, packets sent from the internal port towards a tunnel
device will now experience the head copy overhead. The rationale is
that the latter use-case is less relevant performance-wise.

	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Acked-by: Pravin B Shelar <pshelar@ovn.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 183dea5818315c0a172d21ecbcd2554894bf01e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/vport-internal_dev.c
diff --cc net/openvswitch/vport-internal_dev.c
index f8050e38e999,3e7747549f90..000000000000
--- a/net/openvswitch/vport-internal_dev.c
+++ b/net/openvswitch/vport-internal_dev.c
@@@ -137,8 -132,6 +132,11 @@@ static const struct net_device_ops inte
  	.ndo_start_xmit = internal_dev_xmit,
  	.ndo_set_mac_address = eth_mac_addr,
  	.ndo_get_stats64 = internal_get_stats,
++<<<<<<< HEAD
 +	.ndo_size = sizeof(struct net_device_ops),
 +	.extended.ndo_set_rx_headroom = internal_set_rx_headroom,
++=======
++>>>>>>> 183dea581831 (openvswitch: do not propagate headroom updates to internal port)
  };
  
  static struct rtnl_link_ops internal_dev_link_ops __read_mostly = {
@@@ -155,9 -148,9 +153,15 @@@ static void do_setup(struct net_device 
  
  	netdev->priv_flags &= ~IFF_TX_SKB_SHARING;
  	netdev->priv_flags |= IFF_LIVE_ADDR_CHANGE | IFF_OPENVSWITCH |
++<<<<<<< HEAD
 +			      IFF_PHONY_HEADROOM | IFF_NO_QUEUE;
 +	netdev->extended->needs_free_netdev = true;
 +	netdev->extended->priv_destructor = internal_dev_destructor;
++=======
+ 			      IFF_NO_QUEUE;
+ 	netdev->needs_free_netdev = true;
+ 	netdev->priv_destructor = internal_dev_destructor;
++>>>>>>> 183dea581831 (openvswitch: do not propagate headroom updates to internal port)
  	netdev->ethtool_ops = &internal_dev_ethtool_ops;
  	netdev->rtnl_link_ops = &internal_dev_link_ops;
  
* Unmerged path net/openvswitch/vport-internal_dev.c
