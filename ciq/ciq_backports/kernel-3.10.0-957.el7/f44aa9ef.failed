net: include hash policy in LAG changeupper info

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] include hash policy in LAG changeupper info (Jarod Wilson) [1607939]
Rebuild_FUZZ: 94.51%
commit-author John Hurley <john.hurley@netronome.com>
commit f44aa9ef7950a56daa3a5b41f069761f945f1a1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f44aa9ef.failed

LAG upper event notifiers contain the tx type used by the LAG device.
Extend this to also include the hash policy used for tx types that
utilize hashing.

	Signed-off-by: John Hurley <john.hurley@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f44aa9ef7950a56daa3a5b41f069761f945f1a1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/bonding/bond_main.c
diff --cc drivers/net/bonding/bond_main.c
index a535fea92684,bd53a71f6b00..000000000000
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@@ -1217,25 -1218,40 +1217,59 @@@ static enum netdev_lag_tx_type bond_lag
  	}
  }
  
++<<<<<<< HEAD
 +static int bond_master_upper_dev_link(struct bonding *bond, struct slave *slave)
 +{
 +	struct netdev_lag_upper_info lag_upper_info;
 +	char linkname[IFNAMSIZ+7];
 +	int err;
 +
 +	lag_upper_info.tx_type = bond_lag_tx_type(bond);
 +	err = netdev_master_upper_dev_link(slave->dev, bond->dev, slave,
 +					   &lag_upper_info);
 +	if (err)
 +		return err;
++=======
+ static enum netdev_lag_hash bond_lag_hash_type(struct bonding *bond,
+ 					       enum netdev_lag_tx_type type)
+ {
+ 	if (type != NETDEV_LAG_TX_TYPE_HASH)
+ 		return NETDEV_LAG_HASH_NONE;
+ 
+ 	switch (bond->params.xmit_policy) {
+ 	case BOND_XMIT_POLICY_LAYER2:
+ 		return NETDEV_LAG_HASH_L2;
+ 	case BOND_XMIT_POLICY_LAYER34:
+ 		return NETDEV_LAG_HASH_L34;
+ 	case BOND_XMIT_POLICY_LAYER23:
+ 		return NETDEV_LAG_HASH_L23;
+ 	case BOND_XMIT_POLICY_ENCAP23:
+ 		return NETDEV_LAG_HASH_E23;
+ 	case BOND_XMIT_POLICY_ENCAP34:
+ 		return NETDEV_LAG_HASH_E34;
+ 	default:
+ 		return NETDEV_LAG_HASH_UNKNOWN;
+ 	}
+ }
+ 
+ static int bond_master_upper_dev_link(struct bonding *bond, struct slave *slave,
+ 				      struct netlink_ext_ack *extack)
+ {
+ 	struct netdev_lag_upper_info lag_upper_info;
+ 	enum netdev_lag_tx_type type;
+ 
+ 	type = bond_lag_tx_type(bond);
+ 	lag_upper_info.tx_type = type;
+ 	lag_upper_info.hash_type = bond_lag_hash_type(bond, type);
++>>>>>>> f44aa9ef7950 (net: include hash policy in LAG changeupper info)
  
 -	return netdev_master_upper_dev_link(slave->dev, bond->dev, slave,
 -					    &lag_upper_info, extack);
 +	sprintf(linkname, "slave_%s", slave->dev->name);
 +	err = sysfs_create_link(&(bond->dev->dev.kobj), &(slave->dev->dev.kobj),
 +				linkname);
 +	if (err)
 +		netdev_upper_dev_unlink(slave->dev, bond->dev);
 +
 +	return err;
  }
  
  static void bond_upper_dev_unlink(struct bonding *bond, struct slave *slave)
* Unmerged path drivers/net/bonding/bond_main.c
diff --git a/drivers/net/team/team.c b/drivers/net/team/team.c
index 88fbb4ad83c7..8e86013eb60a 100644
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@ -1116,6 +1116,7 @@ static int team_upper_dev_link(struct team *team, struct team_port *port)
 	int err;
 
 	lag_upper_info.tx_type = team->mode->lag_tx_type;
+	lag_upper_info.hash_type = NETDEV_LAG_HASH_UNKNOWN;
 	err = netdev_master_upper_dev_link(port->dev, team->dev, NULL,
 					   &lag_upper_info);
 	if (err)
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index dbc794e21d64..da0c8ff668dd 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -2397,8 +2397,19 @@ enum netdev_lag_tx_type {
 	NETDEV_LAG_TX_TYPE_HASH,
 };
 
+enum netdev_lag_hash {
+	NETDEV_LAG_HASH_NONE,
+	NETDEV_LAG_HASH_L2,
+	NETDEV_LAG_HASH_L34,
+	NETDEV_LAG_HASH_L23,
+	NETDEV_LAG_HASH_E23,
+	NETDEV_LAG_HASH_E34,
+	NETDEV_LAG_HASH_UNKNOWN,
+};
+
 struct netdev_lag_upper_info {
 	enum netdev_lag_tx_type tx_type;
+	enum netdev_lag_hash hash_type;
 };
 
 struct netdev_lag_lower_state_info {
