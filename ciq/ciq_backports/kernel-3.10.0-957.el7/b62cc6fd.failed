libnvdimm, pmem: Fix memcpy_mcsafe() return code handling in nsio_rw_bytes()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Dan Williams <dan.j.williams@intel.com>
commit b62cc6fdd793eaac50e4191c8637ffff9e9574d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b62cc6fd.failed

Commit 60622d68227d "x86/asm/memcpy_mcsafe: Return bytes remaining"
converted callers of memcpy_mcsafe() to expect a positive 'bytes
remaining' value rather than a negative error code. The nsio_rw_bytes()
conversion failed to return success. The failure is benign in that
nsio_rw_bytes() will end up writing back what it just read.

Fixes: 60622d68227d ("x86/asm/memcpy_mcsafe: Return bytes remaining")
	Cc: Dan Williams <dan.j.williams@intel.com>
	Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit b62cc6fdd793eaac50e4191c8637ffff9e9574d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvdimm/claim.c
diff --cc drivers/nvdimm/claim.c
index ef22921e03bd,fb667bf469c7..000000000000
--- a/drivers/nvdimm/claim.c
+++ b/drivers/nvdimm/claim.c
@@@ -276,7 -276,9 +276,13 @@@ static int nsio_rw_bytes(struct nd_name
  	if (rw == READ) {
  		if (unlikely(is_bad_pmem(&nsio->bb, sector, sz_align)))
  			return -EIO;
++<<<<<<< HEAD
 +		return memcpy_mcsafe(buf, nsio->addr + offset, size);
++=======
+ 		if (memcpy_mcsafe(buf, nsio->addr + offset, size) != 0)
+ 			return -EIO;
+ 		return 0;
++>>>>>>> b62cc6fdd793 (libnvdimm, pmem: Fix memcpy_mcsafe() return code handling in nsio_rw_bytes())
  	}
  
  	if (unlikely(is_bad_pmem(&nsio->bb, sector, sz_align))) {
* Unmerged path drivers/nvdimm/claim.c
