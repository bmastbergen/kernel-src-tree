hv_netvsc: Pass net_device parameter to revoke and teardown functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mohammed Gamal <mgamal@redhat.com>
commit 3f076effb9adad6a16fafd3cfe33fe530c5d428d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/3f076eff.failed

The callers to netvsc_revoke_*_buf() and netvsc_teardown_*_gpadl()
already have their net_device instances. Pass them as a paramaeter to
the function instead of obtaining them from netvsc_device struct
everytime

	Signed-off-by: Mohammed Gamal <mgamal@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3f076effb9adad6a16fafd3cfe33fe530c5d428d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index 1741fecf234a,04f611e6f678..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -103,10 -110,10 +103,11 @@@ static void free_netvsc_device_rcu(stru
  }
  
  static void netvsc_revoke_recv_buf(struct hv_device *device,
- 				   struct netvsc_device *net_device)
+ 				   struct netvsc_device *net_device,
+ 				   struct net_device *ndev)
  {
  	struct nvsp_message *revoke_packet;
 +	struct net_device *ndev = hv_get_drvdata(device);
  	int ret;
  
  	/*
@@@ -151,10 -160,10 +152,11 @@@
  }
  
  static void netvsc_revoke_send_buf(struct hv_device *device,
- 				   struct netvsc_device *net_device)
+ 				   struct netvsc_device *net_device,
+ 				   struct net_device *ndev)
  {
  	struct nvsp_message *revoke_packet;
 +	struct net_device *ndev = hv_get_drvdata(device);
  	int ret;
  
  	/* Deal with the send buffer we may have setup.
@@@ -199,10 -210,10 +201,15 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static void netvsc_teardown_recv_buf_gpadl(struct hv_device *device,
 +					   struct netvsc_device *net_device)
++=======
+ static void netvsc_teardown_recv_gpadl(struct hv_device *device,
+ 				       struct netvsc_device *net_device,
+ 				       struct net_device *ndev)
++>>>>>>> 3f076effb9ad (hv_netvsc: Pass net_device parameter to revoke and teardown functions)
  {
- 	struct net_device *ndev = hv_get_drvdata(device);
  	int ret;
  
  	if (net_device->recv_buf_gpadl_handle) {
@@@ -219,18 -230,12 +226,23 @@@
  		}
  		net_device->recv_buf_gpadl_handle = 0;
  	}
 +
 +	if (net_device->recv_buf) {
 +		/* Free up the receive buffer */
 +		vfree(net_device->recv_buf);
 +		net_device->recv_buf = NULL;
 +	}
  }
  
++<<<<<<< HEAD
 +static void netvsc_teardown_send_buf_gpadl(struct hv_device *device,
 +					   struct netvsc_device *net_device)
++=======
+ static void netvsc_teardown_send_gpadl(struct hv_device *device,
+ 				       struct netvsc_device *net_device,
+ 				       struct net_device *ndev)
++>>>>>>> 3f076effb9ad (hv_netvsc: Pass net_device parameter to revoke and teardown functions)
  {
- 	struct net_device *ndev = hv_get_drvdata(device);
  	int ret;
  
  	if (net_device->send_buf_gpadl_handle) {
@@@ -447,10 -452,10 +459,17 @@@ static int netvsc_init_buf(struct hv_de
  	goto exit;
  
  cleanup:
++<<<<<<< HEAD
 +	netvsc_revoke_recv_buf(device, net_device);
 +	netvsc_revoke_send_buf(device, net_device);
 +	netvsc_teardown_recv_buf_gpadl(device, net_device);
 +	netvsc_teardown_send_buf_gpadl(device, net_device);
++=======
+ 	netvsc_revoke_recv_buf(device, net_device, ndev);
+ 	netvsc_revoke_send_buf(device, net_device, ndev);
+ 	netvsc_teardown_recv_gpadl(device, net_device, ndev);
+ 	netvsc_teardown_send_gpadl(device, net_device, ndev);
++>>>>>>> 3f076effb9ad (hv_netvsc: Pass net_device parameter to revoke and teardown functions)
  
  exit:
  	return ret;
@@@ -469,6 -474,7 +488,10 @@@ static int negotiate_nvsp_ver(struct hv
  	init_packet->hdr.msg_type = NVSP_MSG_TYPE_INIT;
  	init_packet->msg.init_msg.init.min_protocol_ver = nvsp_ver;
  	init_packet->msg.init_msg.init.max_protocol_ver = nvsp_ver;
++<<<<<<< HEAD
++=======
+ 	trace_nvsp_send(ndev, init_packet);
++>>>>>>> 3f076effb9ad (hv_netvsc: Pass net_device parameter to revoke and teardown functions)
  
  	/* Send the init request */
  	ret = vmbus_sendpacket(device->channel, init_packet,
@@@ -586,13 -595,13 +609,21 @@@ void netvsc_device_remove(struct hv_dev
  	 * Revoke receive buffer. If host is pre-Win2016 then tear down
  	 * receive buffer GPADL. Do the same for send buffer.
  	 */
- 	netvsc_revoke_recv_buf(device, net_device);
+ 	netvsc_revoke_recv_buf(device, net_device, ndev);
  	if (vmbus_proto_version < VERSION_WIN10)
++<<<<<<< HEAD
 +		netvsc_teardown_recv_buf_gpadl(device, net_device);
++=======
+ 		netvsc_teardown_recv_gpadl(device, net_device, ndev);
++>>>>>>> 3f076effb9ad (hv_netvsc: Pass net_device parameter to revoke and teardown functions)
  
- 	netvsc_revoke_send_buf(device, net_device);
+ 	netvsc_revoke_send_buf(device, net_device, ndev);
  	if (vmbus_proto_version < VERSION_WIN10)
++<<<<<<< HEAD
 +		netvsc_teardown_send_buf_gpadl(device, net_device);
++=======
+ 		netvsc_teardown_send_gpadl(device, net_device, ndev);
++>>>>>>> 3f076effb9ad (hv_netvsc: Pass net_device parameter to revoke and teardown functions)
  
  	RCU_INIT_POINTER(net_device_ctx->nvdev, NULL);
  
@@@ -611,11 -620,11 +642,16 @@@
  
  	/*
  	 * If host is Win2016 or higher then we do the GPADL tear down
 -	 * here after VMBus is closed.
 -	*/
 +	 * here after VMBus is closed, instead of doing it earlier.
 +	 */
  	if (vmbus_proto_version >= VERSION_WIN10) {
++<<<<<<< HEAD
 +		netvsc_teardown_recv_buf_gpadl(device, net_device);
 +		netvsc_teardown_send_buf_gpadl(device, net_device);
++=======
+ 		netvsc_teardown_recv_gpadl(device, net_device, ndev);
+ 		netvsc_teardown_send_gpadl(device, net_device, ndev);
++>>>>>>> 3f076effb9ad (hv_netvsc: Pass net_device parameter to revoke and teardown functions)
  	}
  
  	/* Release all resources */
* Unmerged path drivers/net/hyperv/netvsc.c
