USB: serial: add calc_num_ports callback to generic driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [usb] serial: add calc_num_ports callback to generic driver (Torez Smith) [1540721]
Rebuild_FUZZ: 95.50%
commit-author Johan Hovold <johan@kernel.org>
commit a794499b261b8487a984783ccc864975e1bcc7bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a794499b.failed

Add a calc_num_ports callback to the generic driver and verify that the
device has the required endpoints there instead of in core.

Note that the generic driver num_ports field was never used.

	Signed-off-by: Johan Hovold <johan@kernel.org>
(cherry picked from commit a794499b261b8487a984783ccc864975e1bcc7bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/serial/usb-serial.c
diff --cc drivers/usb/serial/usb-serial.c
index 40e5208c3880,101eb105d78e..000000000000
--- a/drivers/usb/serial/usb-serial.c
+++ b/drivers/usb/serial/usb-serial.c
@@@ -861,24 -850,17 +861,29 @@@ static int usb_serial_probe(struct usb_
  		retval = -ENODEV;
  		goto err_free_epds;
  	}
- #ifdef CONFIG_USB_SERIAL_GENERIC
- 	if (type == &usb_serial_generic_device) {
- 		num_ports = epds->num_bulk_out;
- 		if (num_ports == 0) {
- 			dev_err(ddev, "Generic device with no bulk out, not allowed.\n");
- 			retval = -EIO;
+ 
+ 	if (type->calc_num_ports) {
+ 		retval = type->calc_num_ports(serial, epds);
+ 		if (retval < 0)
  			goto err_free_epds;
++<<<<<<< HEAD
 +		}
 +	}
 +#endif
 +	if (!num_ports) {
 +		/* if this device type has a calc_num_ports function, call it */
 +		if (type->calc_num_ports)
 +			num_ports = type->calc_num_ports(serial);
 +		if (!num_ports)
 +			num_ports = type->num_ports;
++=======
+ 		num_ports = retval;
++>>>>>>> a794499b261b (USB: serial: add calc_num_ports callback to generic driver)
  	}
  
+ 	if (!num_ports)
+ 		num_ports = type->num_ports;
+ 
  	if (num_ports > MAX_NUM_PORTS) {
  		dev_warn(ddev, "too many ports requested: %d\n", num_ports);
  		num_ports = MAX_NUM_PORTS;
diff --git a/drivers/usb/serial/generic.c b/drivers/usb/serial/generic.c
index 21703d96b103..80fc4c75bc9f 100644
--- a/drivers/usb/serial/generic.c
+++ b/drivers/usb/serial/generic.c
@@ -47,14 +47,28 @@ static int usb_serial_generic_probe(struct usb_serial *serial,
 	return 0;
 }
 
-struct usb_serial_driver usb_serial_generic_device = {
+static int usb_serial_generic_calc_num_ports(struct usb_serial *serial,
+					struct usb_serial_endpoints *epds)
+{
+	struct device *dev = &serial->interface->dev;
+	int num_ports = epds->num_bulk_out;
+
+	if (num_ports == 0) {
+		dev_err(dev, "Generic device with no bulk out, not allowed.\n");
+		return -ENODEV;
+	}
+
+	return num_ports;
+}
+
+static struct usb_serial_driver usb_serial_generic_device = {
 	.driver = {
 		.owner =	THIS_MODULE,
 		.name =		"generic",
 	},
 	.id_table =		generic_device_ids,
-	.num_ports =		1,
 	.probe =		usb_serial_generic_probe,
+	.calc_num_ports =	usb_serial_generic_calc_num_ports,
 	.throttle =		usb_serial_generic_throttle,
 	.unthrottle =		usb_serial_generic_unthrottle,
 	.resume =		usb_serial_generic_resume,
* Unmerged path drivers/usb/serial/usb-serial.c
diff --git a/include/linux/usb/serial.h b/include/linux/usb/serial.h
index f1b8a8493762..d282ee0e1fff 100644
--- a/include/linux/usb/serial.h
+++ b/include/linux/usb/serial.h
@@ -366,7 +366,6 @@ extern void usb_serial_handle_dcd_change(struct usb_serial_port *usb_port,
 extern int usb_serial_bus_register(struct usb_serial_driver *device);
 extern void usb_serial_bus_deregister(struct usb_serial_driver *device);
 
-extern struct usb_serial_driver usb_serial_generic_device;
 extern struct bus_type usb_serial_bus_type;
 extern struct tty_driver *usb_serial_tty_driver;
 
