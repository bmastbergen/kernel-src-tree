HID: hid-sensor-hub: Add selector api

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [hid] hid-sensor-hub: Add selector api (Tony Camuso) [1559170]
Rebuild_FUZZ: 92.75%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit e02cee4819ae51f26333471c8eed50678b08572a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e02cee48.failed

In some report descriptors, they leave holes in the selectors. In
this case if we use hardcoded selector values, this will result
in invalid values. For example, if there is selectors defined for
Power State from OFF to D0 to D3. We can't use indexes of these states
if some states are not implemented or not present in the report decriptors.
In this case, we need to get the indexes from report descriptors.

One API is added to get the index of a selector. This API will
search for usage id in the field usage list and return the index.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit e02cee4819ae51f26333471c8eed50678b08572a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/hid-sensor-hub.h
diff --cc include/linux/hid-sensor-hub.h
index 174b5af950eb,205eba0326af..000000000000
--- a/include/linux/hid-sensor-hub.h
+++ b/include/linux/hid-sensor-hub.h
@@@ -227,10 -218,7 +227,15 @@@ int hid_sensor_write_samp_freq_value(st
  int hid_sensor_read_samp_freq_value(struct hid_sensor_common *st,
  					int *val1, int *val2);
  
++<<<<<<< HEAD
 +s32 hid_sensor_read_poll_value(struct hid_sensor_common *st);
 +
 +bool hid_sensor_batch_mode_supported(struct hid_sensor_common *st);
 +int hid_sensor_set_report_latency(struct hid_sensor_common *st, int latency);
 +int hid_sensor_get_report_latency(struct hid_sensor_common *st);
++=======
+ int hid_sensor_get_usage_index(struct hid_sensor_hub_device *hsdev,
+ 				u32 report_id, int field_index, u32 usage_id);
++>>>>>>> e02cee4819ae (HID: hid-sensor-hub: Add selector api)
  
  #endif
diff --git a/drivers/hid/hid-sensor-hub.c b/drivers/hid/hid-sensor-hub.c
index ec7cae7d2cb8..42dd66138513 100644
--- a/drivers/hid/hid-sensor-hub.c
+++ b/drivers/hid/hid-sensor-hub.c
@@ -319,6 +319,28 @@ err_free:
 }
 EXPORT_SYMBOL_GPL(sensor_hub_input_attr_get_raw_value);
 
+int hid_sensor_get_usage_index(struct hid_sensor_hub_device *hsdev,
+				u32 report_id, int field_index, u32 usage_id)
+{
+	struct hid_report *report;
+	struct hid_field *field;
+	int i;
+
+	report = sensor_hub_report(report_id, hsdev->hdev, HID_FEATURE_REPORT);
+	if (!report || (field_index >= report->maxfield))
+		goto done_proc;
+
+	field = report->field[field_index];
+	for (i = 0; i < field->maxusage; ++i) {
+		if (field->usage[i].hid == usage_id)
+			return field->usage[i].usage_index;
+	}
+
+done_proc:
+	return -EINVAL;
+}
+EXPORT_SYMBOL_GPL(hid_sensor_get_usage_index);
+
 int sensor_hub_input_get_attribute_info(struct hid_sensor_hub_device *hsdev,
 				u8 type,
 				u32 usage_id,
* Unmerged path include/linux/hid-sensor-hub.h
