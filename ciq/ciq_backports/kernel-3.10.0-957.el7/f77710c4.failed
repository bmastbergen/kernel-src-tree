watchdog: pretimeout: add noop pretimeout governor

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [watchdog] pretimeout: add noop pretimeout governor (David Arcari) [1576173]
Rebuild_FUZZ: 88.89%
commit-author Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
commit f77710c4cda01ad9c3672fb2f97bdea9a94da92a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f77710c4.failed

The change adds noop watchdog pretimeout governor, only an
informational message is printed to the kernel log buffer when a
watchdog triggers a pretimeout event.

While introducing the first pretimeout governor the selected design
assumes that the default pretimeout governor is selected by its name
and it is always built-in, thus the default pretimeout governor can
not be unregistered and the correspondent check can be removed from
the watchdog_unregister_governor() function.

	Signed-off-by: Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
	Reviewed-by: Guenter Roeck <linux@roeck-us.net>
	Reviewed-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
	Tested-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
(cherry picked from commit f77710c4cda01ad9c3672fb2f97bdea9a94da92a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/watchdog/Kconfig
#	drivers/watchdog/watchdog_pretimeout.h
diff --cc drivers/watchdog/Kconfig
index d321bee25827,4aeb8f95beb4..000000000000
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@@ -1394,4 -1831,39 +1394,42 @@@ config USBPCWATCHDO
  
  	  Most people will say N.
  
++<<<<<<< HEAD
++=======
+ comment "Watchdog Pretimeout Governors"
+ 
+ config WATCHDOG_PRETIMEOUT_GOV
+ 	bool "Enable watchdog pretimeout governors"
+ 	help
+ 	  The option allows to select watchdog pretimeout governors.
+ 
+ if WATCHDOG_PRETIMEOUT_GOV
+ 
+ choice
+ 	prompt "Default Watchdog Pretimeout Governor"
+ 	default WATCHDOG_PRETIMEOUT_DEFAULT_GOV_PANIC
+ 	help
+ 	  This option selects a default watchdog pretimeout governor.
+ 	  The governor takes its action, if a watchdog is capable
+ 	  to report a pretimeout event.
+ 
+ config WATCHDOG_PRETIMEOUT_DEFAULT_GOV_NOOP
+ 	bool "noop"
+ 	select WATCHDOG_PRETIMEOUT_GOV_NOOP
+ 	help
+ 	  Use noop watchdog pretimeout governor by default. If noop
+ 	  governor is selected by a user, write a short message to
+ 	  the kernel log buffer and don't do any system changes.
+ 
+ endchoice
+ 
+ config WATCHDOG_PRETIMEOUT_GOV_NOOP
+ 	tristate "Noop watchdog pretimeout governor"
+ 	help
+ 	  Noop watchdog pretimeout governor, only an informational
+ 	  message is added to kernel log buffer.
+ 
+ endif # WATCHDOG_PRETIMEOUT_GOV
+ 
++>>>>>>> f77710c4cda0 (watchdog: pretimeout: add noop pretimeout governor)
  endif # WATCHDOG
* Unmerged path drivers/watchdog/watchdog_pretimeout.h
* Unmerged path drivers/watchdog/Kconfig
diff --git a/drivers/watchdog/Makefile b/drivers/watchdog/Makefile
index 31a6f885f852..c3ed9a45bca8 100644
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -6,6 +6,8 @@
 watchdog-objs	+= watchdog_core.o watchdog_dev.o
 obj-$(CONFIG_WATCHDOG_CORE)	+= watchdog.o
 
+obj-$(CONFIG_WATCHDOG_PRETIMEOUT_GOV_NOOP)	+= pretimeout_noop.o
+
 # Only one watchdog can succeed. We probe the ISA/PCI/USB based
 # watchdog-cards first, then the architecture specific watchdog
 # drivers and then the architecture independent "softdog" driver.
diff --git a/drivers/watchdog/pretimeout_noop.c b/drivers/watchdog/pretimeout_noop.c
new file mode 100644
index 000000000000..85f5299d197c
--- /dev/null
+++ b/drivers/watchdog/pretimeout_noop.c
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2015-2016 Mentor Graphics
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/printk.h>
+#include <linux/watchdog.h>
+
+#include "watchdog_pretimeout.h"
+
+/**
+ * pretimeout_noop - No operation on watchdog pretimeout event
+ * @wdd - watchdog_device
+ *
+ * This function prints a message about pretimeout to kernel log.
+ */
+static void pretimeout_noop(struct watchdog_device *wdd)
+{
+	pr_alert("watchdog%d: pretimeout event\n", wdd->id);
+}
+
+static struct watchdog_governor watchdog_gov_noop = {
+	.name		= "noop",
+	.pretimeout	= pretimeout_noop,
+};
+
+static int __init watchdog_gov_noop_register(void)
+{
+	return watchdog_register_governor(&watchdog_gov_noop);
+}
+
+static void __exit watchdog_gov_noop_unregister(void)
+{
+	watchdog_unregister_governor(&watchdog_gov_noop);
+}
+module_init(watchdog_gov_noop_register);
+module_exit(watchdog_gov_noop_unregister);
+
+MODULE_AUTHOR("Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>");
+MODULE_DESCRIPTION("Panic watchdog pretimeout governor");
+MODULE_LICENSE("GPL");
* Unmerged path drivers/watchdog/watchdog_pretimeout.h
