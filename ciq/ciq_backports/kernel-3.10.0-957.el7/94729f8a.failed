netfilter: ipset: Resolve missing-field-initializer warnings

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mark Rustad <mark.d.rustad@intel.com>
commit 94729f8a1e9d38c8df6c83799fde8d2eaef2ff54
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/94729f8a.failed

Resolve missing-field-initializer warnings by providing a
directed initializer.

	Signed-off-by: Mark Rustad <mark.d.rustad@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
	Signed-off-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
(cherry picked from commit 94729f8a1e9d38c8df6c83799fde8d2eaef2ff54)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/ipset/ip_set_bitmap_ip.c
#	net/netfilter/ipset/ip_set_bitmap_ipmac.c
#	net/netfilter/ipset/ip_set_bitmap_port.c
#	net/netfilter/ipset/ip_set_hash_ip.c
#	net/netfilter/ipset/ip_set_hash_ipport.c
#	net/netfilter/ipset/ip_set_hash_ipportip.c
diff --cc net/netfilter/ipset/ip_set_bitmap_ip.c
index deffacab62dc,dafdb39ef042..000000000000
--- a/net/netfilter/ipset/ip_set_bitmap_ip.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ip.c
@@@ -112,8 -112,8 +112,13 @@@ bitmap_ip_kadt(struct ip_set *set, cons
  {
  	struct bitmap_ip *map = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct bitmap_ip_adt_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, map);
++=======
+ 	struct bitmap_ip_adt_elem e = { .id = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 ip;
  
  	ip = ntohl(ip4addr(skb, opt->flags & IPSET_DIM_ONE_SRC));
@@@ -132,8 -132,8 +137,13 @@@ bitmap_ip_uadt(struct ip_set *set, stru
  	struct bitmap_ip *map = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
  	u32 ip = 0, ip_to = 0;
++<<<<<<< HEAD
 +	struct bitmap_ip_adt_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(map);
++=======
+ 	struct bitmap_ip_adt_elem e = { .id = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	int ret = 0;
  
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
diff --cc net/netfilter/ipset/ip_set_bitmap_ipmac.c
index a041a2f15eb0,dbad505e79e3..000000000000
--- a/net/netfilter/ipset/ip_set_bitmap_ipmac.c
+++ b/net/netfilter/ipset/ip_set_bitmap_ipmac.c
@@@ -215,8 -203,8 +215,13 @@@ bitmap_ipmac_kadt(struct ip_set *set, c
  {
  	struct bitmap_ipmac *map = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct bitmap_ipmac_adt_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, map);
++=======
+ 	struct bitmap_ipmac_adt_elem e = { .id = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 ip;
  
  	/* MAC can be src only */
@@@ -244,8 -232,8 +249,13 @@@ bitmap_ipmac_uadt(struct ip_set *set, s
  {
  	const struct bitmap_ipmac *map = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct bitmap_ipmac_adt_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(map);
++=======
+ 	struct bitmap_ipmac_adt_elem e = { .id = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 ip = 0;
  	int ret = 0;
  
diff --cc net/netfilter/ipset/ip_set_bitmap_port.c
index 3fcb6e11fac3,a4b65ae1986c..000000000000
--- a/net/netfilter/ipset/ip_set_bitmap_port.c
+++ b/net/netfilter/ipset/ip_set_bitmap_port.c
@@@ -105,8 -104,8 +105,13 @@@ bitmap_port_kadt(struct ip_set *set, co
  {
  	struct bitmap_port *map = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct bitmap_port_adt_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, map);
++=======
+ 	struct bitmap_port_adt_elem e = { .id = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	__be16 __port;
  	u16 port = 0;
  
@@@ -130,8 -129,8 +135,13 @@@ bitmap_port_uadt(struct ip_set *set, st
  {
  	struct bitmap_port *map = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct bitmap_port_adt_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(map);
++=======
+ 	struct bitmap_port_adt_elem e = { .id = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 port;	/* wraparound */
  	u16 port_to;
  	int ret = 0;
diff --cc net/netfilter/ipset/ip_set_hash_ip.c
index 260c9a80d8a5,e52739938533..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ip.c
+++ b/net/netfilter/ipset/ip_set_hash_ip.c
@@@ -98,8 -84,8 +98,13 @@@ hash_ip4_kadt(struct ip_set *set, cons
  {
  	const struct hash_ip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ip4_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, h);
++=======
+ 	struct hash_ip4_elem e = { 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	__be32 ip;
  
  	ip4addrptr(skb, opt->flags & IPSET_DIM_ONE_SRC, &ip);
@@@ -117,8 -103,8 +122,13 @@@ hash_ip4_uadt(struct ip_set *set, struc
  {
  	const struct hash_ip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ip4_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
++=======
+ 	struct hash_ip4_elem e = { 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 ip = 0, ip_to = 0, hosts;
  	int ret = 0;
  
@@@ -252,8 -222,8 +262,13 @@@ hash_ip6_kadt(struct ip_set *set, cons
  {
  	const struct hash_ip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ip6_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, h);
++=======
+ 	struct hash_ip6_elem e = { { .all = { 0 } } };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  
  	ip6addrptr(skb, opt->flags & IPSET_DIM_ONE_SRC, &e.ip.in6);
  	hash_ip6_netmask(&e.ip, h->netmask);
@@@ -269,8 -239,8 +284,13 @@@ hash_ip6_uadt(struct ip_set *set, struc
  {
  	const struct hash_ip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ip6_elem e = {};
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
++=======
+ 	struct hash_ip6_elem e = { { .all = { 0 } } };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	int ret;
  
  	if (unlikely(!tb[IPSET_ATTR_IP] ||
diff --cc net/netfilter/ipset/ip_set_hash_ipport.c
index 64caad35a391,f37a5ae8a5e0..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipport.c
+++ b/net/netfilter/ipset/ip_set_hash_ipport.c
@@@ -116,10 -93,9 +116,15 @@@ hash_ipport4_kadt(struct ip_set *set, c
  		  const struct xt_action_param *par,
  		  enum ipset_adt adt, struct ip_set_adt_opt *opt)
  {
 +	const struct hash_ipport *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipport4_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, h);
++=======
+ 	struct hash_ipport4_elem e = { .ip = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  
  	if (!ip_set_get_ip4_port(skb, opt->flags & IPSET_DIM_TWO_SRC,
  				 &e.port, &e.proto))
@@@ -135,8 -111,8 +140,13 @@@ hash_ipport4_uadt(struct ip_set *set, s
  {
  	const struct hash_ipport *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipport4_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
++=======
+ 	struct hash_ipport4_elem e = { .ip = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 ip, ip_to = 0, p = 0, port, port_to;
  	bool with_ports = false;
  	int ret;
@@@ -306,10 -257,9 +316,15 @@@ hash_ipport6_kadt(struct ip_set *set, c
  		  const struct xt_action_param *par,
  		  enum ipset_adt adt, struct ip_set_adt_opt *opt)
  {
 +	const struct hash_ipport *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipport6_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, h);
++=======
+ 	struct hash_ipport6_elem e = { .ip = { .all = { 0 } } };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  
  	if (!ip_set_get_ip6_port(skb, opt->flags & IPSET_DIM_TWO_SRC,
  				 &e.port, &e.proto))
@@@ -325,8 -275,8 +340,13 @@@ hash_ipport6_uadt(struct ip_set *set, s
  {
  	const struct hash_ipport *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipport6_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
++=======
+ 	struct hash_ipport6_elem e = { .ip = { .all = { 0 } } };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 port, port_to;
  	bool with_ports = false;
  	int ret;
diff --cc net/netfilter/ipset/ip_set_hash_ipportip.c
index 2873bbc20d7a,41ef00eda874..000000000000
--- a/net/netfilter/ipset/ip_set_hash_ipportip.c
+++ b/net/netfilter/ipset/ip_set_hash_ipportip.c
@@@ -120,10 -94,9 +120,15 @@@ hash_ipportip4_kadt(struct ip_set *set
  		    const struct xt_action_param *par,
  		    enum ipset_adt adt, struct ip_set_adt_opt *opt)
  {
 +	const struct hash_ipportip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipportip4_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, h);
++=======
+ 	struct hash_ipportip4_elem e = { .ip = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  
  	if (!ip_set_get_ip4_port(skb, opt->flags & IPSET_DIM_TWO_SRC,
  				 &e.port, &e.proto))
@@@ -140,8 -113,8 +145,13 @@@ hash_ipportip4_uadt(struct ip_set *set
  {
  	const struct hash_ipportip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipportip4_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
++=======
+ 	struct hash_ipportip4_elem e = { .ip = 0 };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 ip, ip_to = 0, p = 0, port, port_to;
  	bool with_ports = false;
  	int ret;
@@@ -319,10 -264,9 +329,15 @@@ hash_ipportip6_kadt(struct ip_set *set
  		    const struct xt_action_param *par,
  		    enum ipset_adt adt, struct ip_set_adt_opt *opt)
  {
 +	const struct hash_ipportip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipportip6_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, h);
++=======
+ 	struct hash_ipportip6_elem e = { .ip = { .all = { 0 } } };
+ 	struct ip_set_ext ext = IP_SET_INIT_KEXT(skb, opt, set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  
  	if (!ip_set_get_ip6_port(skb, opt->flags & IPSET_DIM_TWO_SRC,
  				 &e.port, &e.proto))
@@@ -339,8 -283,8 +354,13 @@@ hash_ipportip6_uadt(struct ip_set *set
  {
  	const struct hash_ipportip *h = set->data;
  	ipset_adtfn adtfn = set->variant->adt[adt];
++<<<<<<< HEAD
 +	struct hash_ipportip6_elem e = { };
 +	struct ip_set_ext ext = IP_SET_INIT_UEXT(h);
++=======
+ 	struct hash_ipportip6_elem e = {  .ip = { .all = { 0 } } };
+ 	struct ip_set_ext ext = IP_SET_INIT_UEXT(set);
++>>>>>>> 94729f8a1e9d (netfilter: ipset: Resolve missing-field-initializer warnings)
  	u32 port, port_to;
  	bool with_ports = false;
  	int ret;
* Unmerged path net/netfilter/ipset/ip_set_bitmap_ip.c
* Unmerged path net/netfilter/ipset/ip_set_bitmap_ipmac.c
* Unmerged path net/netfilter/ipset/ip_set_bitmap_port.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ip.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipport.c
* Unmerged path net/netfilter/ipset/ip_set_hash_ipportip.c
