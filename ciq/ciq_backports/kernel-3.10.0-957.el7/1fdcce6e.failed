memremap: add scheduling point to devm_memremap_pages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Michal Hocko <mhocko@suse.com>
commit 1fdcce6e16c54facc4f0688630d3b9ecfcaa411f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1fdcce6e.failed

devm_memremap_pages is initializing struct pages in for_each_device_pfn
and that can take quite some time.  We have even seen a soft lockup
triggering on a non preemptive kernel

  NMI watchdog: BUG: soft lockup - CPU#61 stuck for 22s! [kworker/u641:11:1808]
  [...]
  RIP: 0010:[<ffffffff8118b6b7>]  [<ffffffff8118b6b7>] devm_memremap_pages+0x327/0x430
  [...]
  Call Trace:
    pmem_attach_disk+0x2fd/0x3f0 [nd_pmem]
    nvdimm_bus_probe+0x64/0x110 [libnvdimm]
    driver_probe_device+0x1f7/0x420
    bus_for_each_drv+0x52/0x80
    __device_attach+0xb0/0x130
    bus_probe_device+0x87/0xa0
    device_add+0x3fc/0x5f0
    nd_async_device_register+0xe/0x40 [libnvdimm]
    async_run_entry_fn+0x43/0x150
    process_one_work+0x14e/0x410
    worker_thread+0x116/0x490
    kthread+0xc7/0xe0
    ret_from_fork+0x3f/0x70

fix this by adding cond_resched every 1024 pages.

Link: http://lkml.kernel.org/r/20170918121410.24466-4-mhocko@kernel.org
	Signed-off-by: Michal Hocko <mhocko@suse.com>
	Reported-by: Johannes Thumshirn <jthumshirn@suse.de>
	Tested-by: Johannes Thumshirn <jthumshirn@suse.de>
	Cc: Dan Williams <dan.j.williams@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 1fdcce6e16c54facc4f0688630d3b9ecfcaa411f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/memremap.c
diff --cc kernel/memremap.c
index eca98ec515d8,403ab9cdb949..000000000000
--- a/kernel/memremap.c
+++ b/kernel/memremap.c
@@@ -454,6 -447,9 +454,12 @@@ void *devm_memremap_pages(struct devic
  		 */
  		list_del(&page->lru);
  		page->pgmap = pgmap;
++<<<<<<< HEAD
++=======
+ 		percpu_ref_get(ref);
+ 		if (!(++i % 1024))
+ 			cond_resched();
++>>>>>>> 1fdcce6e16c5 (memremap: add scheduling point to devm_memremap_pages)
  	}
  	devres_add(dev, page_map);
  	return __va(res->start);
* Unmerged path kernel/memremap.c
