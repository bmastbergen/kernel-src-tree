scsi: target: remove target_find_device

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mike Christie <mchristi@redhat.com>
commit e2607484370ea1b3595a3c51485e66e0cbd17341
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e2607484.failed

target_find_device is no longer used, so remove it.

	Signed-off-by: Mike Christie <mchristi@redhat.com>
	Tested-by: Xiubo Li <xiubli@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit e2607484370ea1b3595a3c51485e66e0cbd17341)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_device.c
diff --cc drivers/target/target_core_device.c
index da5d92ff4163,a9ad6ecb1812..000000000000
--- a/drivers/target/target_core_device.c
+++ b/drivers/target/target_core_device.c
@@@ -874,30 -879,6 +874,33 @@@ sector_t target_to_linux_sector(struct 
  }
  EXPORT_SYMBOL(target_to_linux_sector);
  
++<<<<<<< HEAD
 +/**
 + * target_find_device - find a se_device by its dev_index
 + * @id: dev_index
 + * @do_depend: true if caller needs target_depend_item to be done
 + *
 + * If do_depend is true, the caller must do a target_undepend_item
 + * when finished using the device.
 + *
 + * If do_depend is false, the caller must be called in a configfs
 + * callback or during removal.
 + */
 +struct se_device *target_find_device(int id, bool do_depend)
 +{
 +	struct se_device *dev;
 +
 +	mutex_lock(&g_device_mutex);
 +	dev = idr_find(&devices_idr, id);
 +	if (dev && do_depend && target_depend_item(&dev->dev_group.cg_item))
 +		dev = NULL;
 +	mutex_unlock(&g_device_mutex);
 +	return dev;
 +}
 +EXPORT_SYMBOL(target_find_device);
 +
++=======
++>>>>>>> e2607484370e (scsi: target: remove target_find_device)
  struct devices_idr_iter {
  	int (*fn)(struct se_device *dev, void *data);
  	void *data;
* Unmerged path drivers/target/target_core_device.c
diff --git a/include/target/target_core_backend.h b/include/target/target_core_backend.h
index 9c0427012500..170dd99f2050 100644
--- a/include/target/target_core_backend.h
+++ b/include/target/target_core_backend.h
@@ -102,8 +102,6 @@ bool	target_lun_is_rdonly(struct se_cmd *);
 sense_reason_t passthrough_parse_cdb(struct se_cmd *cmd,
 	sense_reason_t (*exec_cmd)(struct se_cmd *cmd));
 
-struct	se_device *target_find_device(int id, bool do_depend);
-
 bool target_sense_desc_format(struct se_device *dev);
 sector_t target_to_linux_sector(struct se_device *dev, sector_t lb);
 bool target_configure_unmap_from_queue(struct se_dev_attrib *attrib,
