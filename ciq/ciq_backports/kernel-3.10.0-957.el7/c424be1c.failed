mm: munlock: fix a bug where THP tail page is encountered

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mm] munlock: fix a bug where THP tail page is encountered (Rafael Aquini) [1560030]
Rebuild_FUZZ: 96.36%
commit-author Vlastimil Babka <vbabka@suse.cz>
commit c424be1cbbf852e46acc84d73162af3066cd2c86
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c424be1c.failed

Since commit ff6a6da60b89 ("mm: accelerate munlock() treatment of THP
pages") munlock skips tail pages of a munlocked THP page.  However, when
the head page already has PageMlocked unset, it will not skip the tail
pages.

Commit 7225522bb429 ("mm: munlock: batch non-THP page isolation and
munlock+putback using pagevec") has added a PageTransHuge() check which
contains VM_BUG_ON(PageTail(page)).  Sasha Levin found this triggered
using trinity, on the first tail page of a THP page without PageMlocked
flag.

This patch fixes the issue by skipping tail pages also in the case when
PageMlocked flag is unset.  There is still a possibility of race with
THP page split between clearing PageMlocked and determining how many
pages to skip.  The race might result in former tail pages not being
skipped, which is however no longer a bug, as during the skip the
PageTail flags are cleared.

However this race also affects correctness of NR_MLOCK accounting, which
is to be fixed in a separate patch.

	Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
	Reported-by: Sasha Levin <sasha.levin@oracle.com>
	Cc: Michel Lespinasse <walken@google.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Mel Gorman <mgorman@suse.de>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Bob Liu <bob.liu@oracle.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit c424be1cbbf852e46acc84d73162af3066cd2c86)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/mlock.c
diff --cc mm/mlock.c
index 879457e42abc,c59c420fd6e1..000000000000
--- a/mm/mlock.c
+++ b/mm/mlock.c
@@@ -149,15 -151,13 +152,18 @@@ static void __munlock_isolation_failed(
   */
  unsigned int munlock_vma_page(struct page *page)
  {
- 	unsigned int page_mask = 0;
+ 	unsigned int nr_pages;
  
 +	/* For try_to_munlock() and to serialize with page migration */
  	BUG_ON(!PageLocked(page));
  
  	if (TestClearPageMlocked(page)) {
++<<<<<<< HEAD
 +		int nr_pages = hpage_nr_pages(page);
++=======
+ 		nr_pages = hpage_nr_pages(page);
++>>>>>>> c424be1cbbf8 (mm: munlock: fix a bug where THP tail page is encountered)
  		mod_zone_page_state(page_zone(page), NR_MLOCK, -nr_pages);
- 		page_mask = nr_pages - 1;
  		if (!isolate_lru_page(page))
  			__munlock_isolated_page(page);
  		else
* Unmerged path mm/mlock.c
