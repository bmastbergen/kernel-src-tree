HID: hid-sensor-hub: fix attribute read for logical usage id

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [hid] hid-sensor-hub: fix attribute read for logical usage id (Tony Camuso) [1559170]
Rebuild_FUZZ: 95.65%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit eb96483349e946f10d41c2a5674922e1d86603d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/eb964833.failed

For defining enumeration values like report or power status events, the
enumeration usage ids are enclosed in a logical collection.  In this case we
need to match logical usage id for pending read on this usage id. For example,
in the below field, when read is requested for 0319, the report will
contain one of the status usages like 850, 851 etc. In this case the raw
event will not match 0319. So when logical collection matches, then wake
up the pending thread.

      Physical(Sensor.OtherCustom)
      Logical(Sensor.0319)
      Application(Sensor.Sensor)
      Usage(6)
        Sensor.0850
        Sensor.0851
        Sensor.0852
        Sensor.0853
        Sensor.0854
        Sensor.0855
      Logical Minimum(1)
      Logical Maximum(5)
      Report Size(8)
      Report Count(1)
      Report Offset(24)
      Flags( Array Absolute )

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit eb96483349e946f10d41c2a5674922e1d86603d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-sensor-hub.c
diff --cc drivers/hid/hid-sensor-hub.c
index 3e67ed86c707,96f18be9c4e1..000000000000
--- a/drivers/hid/hid-sensor-hub.c
+++ b/drivers/hid/hid-sensor-hub.c
@@@ -472,12 -486,30 +472,37 @@@ static int sensor_hub_raw_event(struct 
  				report->field[i]->usage->collection_index];
  		hid_dbg(hdev, "collection->usage %x\n",
  					collection->usage);
++<<<<<<< HEAD
 +		callback = sensor_hub_get_callback(pdata->hsdev->hdev,
 +						report->field[i]->physical,
 +							&priv);
 +		if (callback && callback->capture_sample) {
++=======
+ 
+ 		callback = sensor_hub_get_callback(hdev,
+ 				report->field[i]->physical,
+ 				report->field[i]->usage[0].collection_index,
+ 				&hsdev, &priv);
+ 		if (!callback) {
+ 			ptr += sz;
+ 			continue;
+ 		}
+ 		if (hsdev->pending.status && (hsdev->pending.attr_usage_id ==
+ 					      report->field[i]->usage->hid ||
+ 					      hsdev->pending.attr_usage_id ==
+ 					      report->field[i]->logical)) {
+ 			hid_dbg(hdev, "data was pending ...\n");
+ 			hsdev->pending.raw_data = kmemdup(ptr, sz, GFP_ATOMIC);
+ 			if (hsdev->pending.raw_data)
+ 				hsdev->pending.raw_size = sz;
+ 			else
+ 				hsdev->pending.raw_size = 0;
+ 			complete(&hsdev->pending.ready);
+ 		}
+ 		if (callback->capture_sample) {
++>>>>>>> eb96483349e9 (HID: hid-sensor-hub: fix attribute read for logical usage id)
  			if (report->field[i]->logical)
 -				callback->capture_sample(hsdev,
 +				callback->capture_sample(pdata->hsdev,
  					report->field[i]->logical, sz, ptr,
  					callback->pdev);
  			else
* Unmerged path drivers/hid/hid-sensor-hub.c
