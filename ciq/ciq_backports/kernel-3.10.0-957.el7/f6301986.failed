platform/x86: wmi: Add an interface for subdrivers to access sibling devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: wmi: Add an interface for subdrivers to access sibling devices (Jarod Wilson) [1562200]
Rebuild_FUZZ: 93.71%
commit-author Andy Lutomirski <luto@kernel.org>
commit f63019861cd1192e546397b13f926876a93450fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f6301986.failed

Some subdrivers need to access sibling devices. This gives them a
clean way to do so.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Mario Limonciello <mario_limonciello@dell.com>
	Cc: Pali Roh√°r <pali.rohar@gmail.com>
	Cc: linux-kernel@vger.kernel.org
	Cc: platform-driver-x86@vger.kernel.org
	Cc: linux-acpi@vger.kernel.org
	Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
(cherry picked from commit f63019861cd1192e546397b13f926876a93450fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/wmi.c
#	include/linux/wmi.h
diff --cc drivers/platform/x86/wmi.c
index 84dcc7a04b0a,250d7b2398b4..000000000000
--- a/drivers/platform/x86/wmi.c
+++ b/drivers/platform/x86/wmi.c
@@@ -374,8 -308,59 +374,40 @@@ struct acpi_buffer *out
  
  	return status;
  }
 -
 -/**
 - * wmi_query_block - Return contents of a WMI block (deprecated)
 - * @guid_string: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba
 - * @instance: Instance index
 - * &out: Empty buffer to return the contents of the data block to
 - *
 - * Return the contents of an ACPI-WMI data block to a buffer
 - */
 -acpi_status wmi_query_block(const char *guid_string, u8 instance,
 -			    struct acpi_buffer *out)
 -{
 -	struct wmi_block *wblock;
 -
 -	if (!guid_string)
 -		return AE_BAD_PARAMETER;
 -
 -	if (!find_guid(guid_string, &wblock))
 -		return AE_ERROR;
 -
 -	return __query_block(wblock, instance, out);
 -}
  EXPORT_SYMBOL_GPL(wmi_query_block);
  
++<<<<<<< HEAD
++=======
+ union acpi_object *wmidev_block_query(struct wmi_device *wdev, u8 instance)
+ {
+ 	struct acpi_buffer out = { ACPI_ALLOCATE_BUFFER, NULL };
+ 	struct wmi_block *wblock = container_of(wdev, struct wmi_block, dev);
+ 
+ 	if (ACPI_FAILURE(__query_block(wblock, instance, &out)))
+ 		return NULL;
+ 
+ 	return (union acpi_object *)out.pointer;
+ }
+ EXPORT_SYMBOL_GPL(wmidev_block_query);
+ 
+ struct wmi_device *wmidev_get_other_guid(struct wmi_device *wdev,
+ 					 const char *guid_string)
+ {
+ 	struct wmi_block *this_wb = container_of(wdev, struct wmi_block, dev);
+ 	struct wmi_block *other_wb;
+ 
+ 	if (!find_guid(guid_string, &other_wb))
+ 		return NULL;
+ 
+ 	if (other_wb->acpi_device != this_wb->acpi_device)
+ 		return NULL;
+ 
+ 	get_device(&other_wb->dev.dev);
+ 	return &other_wb->dev;
+ }
+ EXPORT_SYMBOL_GPL(wmidev_get_other_guid);
+ 
++>>>>>>> f63019861cd1 (platform/x86: wmi: Add an interface for subdrivers to access sibling devices)
  /**
   * wmi_set_block - Write to a WMI block
   * @guid_string: 36 char string of the form fa50ff2b-f2e8-45de-83fa-65417f2f49ba
* Unmerged path include/linux/wmi.h
* Unmerged path drivers/platform/x86/wmi.c
* Unmerged path include/linux/wmi.h
