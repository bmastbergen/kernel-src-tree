cxgb4: copy mbox log size to PF0-3 adap instances

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ganesh Goudar <ganeshgr@chelsio.com>
commit aca06eafd09f48ca4d97f3c0b2a12c8d631116f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/aca06eaf.failed

copy mbox size to adapter instances of PF0-3 to avoid
mbox log overflow. This fixes the possible protection
fault.

Fixes: baf5086840ab ("cxgb4: restructure VF mgmt code")
	Signed-off-by: Casey Leedom <leedom@chelsio.com>
	Signed-off-by: Ganesh Goudar <ganeshgr@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit aca06eafd09f48ca4d97f3c0b2a12c8d631116f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
diff --cc drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index 385015704843,005283c7cdfe..000000000000
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@@ -5135,13 -5455,32 +5135,38 @@@ static int init_one(struct pci_dev *pde
  	chip = get_chip_type(pdev, pl_rev);
  	func = CHELSIO_CHIP_VERSION(chip) <= CHELSIO_T5 ?
  		SOURCEPF_G(whoami) : T6_SOURCEPF_G(whoami);
++<<<<<<< HEAD
++=======
+ 
+ 	adapter->pdev = pdev;
+ 	adapter->pdev_dev = &pdev->dev;
+ 	adapter->name = pci_name(pdev);
+ 	adapter->mbox = func;
+ 	adapter->pf = func;
+ 	adapter->params.chip = chip;
+ 	adapter->adap_idx = adap_idx;
+ 	adapter->msg_enable = DFLT_MSG_ENABLE;
+ 	adapter->mbox_log = kzalloc(sizeof(*adapter->mbox_log) +
+ 				    (sizeof(struct mbox_cmd) *
+ 				     T4_OS_LOG_MBOX_CMDS),
+ 				    GFP_KERNEL);
+ 	if (!adapter->mbox_log) {
+ 		err = -ENOMEM;
+ 		goto out_free_adapter;
+ 	}
+ 	spin_lock_init(&adapter->mbox_lock);
+ 	INIT_LIST_HEAD(&adapter->mlist.list);
+ 	adapter->mbox_log->size = T4_OS_LOG_MBOX_CMDS;
+ 	pci_set_drvdata(pdev, adapter);
+ 
++>>>>>>> aca06eafd09f (cxgb4: copy mbox log size to PF0-3 adap instances)
  	if (func != ent->driver_data) {
 +#ifndef CONFIG_PCI_IOV
 +		iounmap(regs);
 +#endif
  		pci_disable_device(pdev);
  		pci_save_state(pdev);        /* to restore SR-IOV later */
 -		return 0;
 +		goto sriov;
  	}
  
  	if (!pci_set_dma_mask(pdev, DMA_BIT_MASK(64))) {
@@@ -5177,26 -5509,8 +5202,29 @@@
  		goto out_free_adapter;
  	}
  
++<<<<<<< HEAD
 +	adapter->mbox_log = kzalloc(sizeof(*adapter->mbox_log) +
 +				    (sizeof(struct mbox_cmd) *
 +				     T4_OS_LOG_MBOX_CMDS),
 +				    GFP_KERNEL);
 +	if (!adapter->mbox_log) {
 +		err = -ENOMEM;
 +		goto out_free_adapter;
 +	}
 +	adapter->mbox_log->size = T4_OS_LOG_MBOX_CMDS;
 +
++=======
++>>>>>>> aca06eafd09f (cxgb4: copy mbox log size to PF0-3 adap instances)
  	/* PCI device has been enabled */
  	adapter->flags |= DEV_ENABLED;
 +
 +	adapter->regs = regs;
 +	adapter->pdev = pdev;
 +	adapter->pdev_dev = &pdev->dev;
 +	adapter->name = pci_name(pdev);
 +	adapter->mbox = func;
 +	adapter->pf = func;
 +	adapter->msg_enable = DFLT_MSG_ENABLE;
  	memset(adapter->chan_map, 0xff, sizeof(adapter->chan_map));
  
  	/* If possible, we use PCIe Relaxed Ordering Attribute to deliver
* Unmerged path drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
