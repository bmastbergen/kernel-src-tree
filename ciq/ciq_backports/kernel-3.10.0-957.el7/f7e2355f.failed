mm: pagewalk: fix the comment for test_walk

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mm] pagewalk: fix the comment for test_walk (Rafael Aquini) [1562137]
Rebuild_FUZZ: 95.12%
commit-author James Morse <james.morse@arm.com>
commit f7e2355f0f8635ddcfd26858f58732b7bf85f9f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f7e2355f.failed

Modify the comment describing struct mm_walk->test_walk()s behaviour to
match the comment on walk_page_test() and the behaviour of
walk_page_vma().

Fixes: fafaa4264eba4 ("pagewalk: improve vma handling")
Link: http://lkml.kernel.org/r/1471622518-21980-1-git-send-email-james.morse@arm.com
	Signed-off-by: James Morse <james.morse@arm.com>
	Cc: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit f7e2355f0f8635ddcfd26858f58732b7bf85f9f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mm.h
diff --cc include/linux/mm.h
index d2f11a68bcdf,0a063b4e4456..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -1289,16 -1196,18 +1289,27 @@@ void unmap_vmas(struct mmu_gather *tlb
   * @pte_entry: if set, called for each non-empty PTE (4th-level) entry
   * @pte_hole: if set, called for each hole at all levels
   * @hugetlb_entry: if set, called for each hugetlb entry
++<<<<<<< HEAD
 + *		   *Caution*: The caller must hold mmap_sem() if @hugetlb_entry
 + * 			      is used.
++=======
+  * @test_walk: caller specific callback function to determine whether
+  *             we walk over the current vma or not. Returning 0
+  *             value means "do page table walk over the current vma,"
+  *             and a negative one means "abort current page table walk
+  *             right now." 1 means "skip the current vma."
+  * @mm:        mm_struct representing the target process of page table walk
+  * @vma:       vma currently walked (NULL if walking outside vmas)
+  * @private:   private data for callbacks' usage
++>>>>>>> f7e2355f0f86 (mm: pagewalk: fix the comment for test_walk)
   *
 - * (see the comment on walk_page_range() for more details)
 + * (see walk_page_range for more details)
   */
  struct mm_walk {
 +	int (*pgd_entry)(pgd_t *pgd, unsigned long addr,
 +			 unsigned long next, struct mm_walk *walk);
 +	int (*pud_entry)(pud_t *pud, unsigned long addr,
 +	                 unsigned long next, struct mm_walk *walk);
  	int (*pmd_entry)(pmd_t *pmd, unsigned long addr,
  			 unsigned long next, struct mm_walk *walk);
  	int (*pte_entry)(pte_t *pte, unsigned long addr,
* Unmerged path include/linux/mm.h
