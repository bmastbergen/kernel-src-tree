netfilter: ipset: Use SET_WITH_*() helpers to test set extensions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Sergey Popovich <popovich_sergei@mail.ua>
commit edda0791743eafc36382fb893d91547f36edaf7d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/edda0791.failed

	Signed-off-by: Sergey Popovich <popovich_sergei@mail.ua>
	Signed-off-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
(cherry picked from commit edda0791743eafc36382fb893d91547f36edaf7d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/ipset/ip_set_core.c
diff --cc net/netfilter/ipset/ip_set_core.c
index 1b9673fde81c,347d97afc887..000000000000
--- a/net/netfilter/ipset/ip_set_core.c
+++ b/net/netfilter/ipset/ip_set_core.c
@@@ -328,8 -388,9 +328,8 @@@ in
  ip_set_get_extensions(struct ip_set *set, struct nlattr *tb[],
  		      struct ip_set_ext *ext)
  {
 -	u64 fullmark;
  	if (tb[IPSET_ATTR_TIMEOUT]) {
- 		if (!(set->extensions & IPSET_EXT_TIMEOUT))
+ 		if (!SET_WITH_TIMEOUT(set))
  			return -IPSET_ERR_TIMEOUT;
  		ext->timeout = ip_set_timeout_uget(tb[IPSET_ATTR_TIMEOUT]);
  	}
@@@ -343,6 -404,30 +343,33 @@@
  			ext->packets = be64_to_cpu(nla_get_be64(
  						   tb[IPSET_ATTR_PACKETS]));
  	}
++<<<<<<< HEAD
++=======
+ 	if (tb[IPSET_ATTR_COMMENT]) {
+ 		if (!SET_WITH_COMMENT(set))
+ 			return -IPSET_ERR_COMMENT;
+ 		ext->comment = ip_set_comment_uget(tb[IPSET_ATTR_COMMENT]);
+ 	}
+ 	if (tb[IPSET_ATTR_SKBMARK]) {
+ 		if (!SET_WITH_SKBINFO(set))
+ 			return -IPSET_ERR_SKBINFO;
+ 		fullmark = be64_to_cpu(nla_get_be64(tb[IPSET_ATTR_SKBMARK]));
+ 		ext->skbmark = fullmark >> 32;
+ 		ext->skbmarkmask = fullmark & 0xffffffff;
+ 	}
+ 	if (tb[IPSET_ATTR_SKBPRIO]) {
+ 		if (!SET_WITH_SKBINFO(set))
+ 			return -IPSET_ERR_SKBINFO;
+ 		ext->skbprio = be32_to_cpu(nla_get_be32(
+ 					    tb[IPSET_ATTR_SKBPRIO]));
+ 	}
+ 	if (tb[IPSET_ATTR_SKBQUEUE]) {
+ 		if (!SET_WITH_SKBINFO(set))
+ 			return -IPSET_ERR_SKBINFO;
+ 		ext->skbqueue = be16_to_cpu(nla_get_be16(
+ 					    tb[IPSET_ATTR_SKBQUEUE]));
+ 	}
++>>>>>>> edda0791743e (netfilter: ipset: Use SET_WITH_*() helpers to test set extensions)
  	return 0;
  }
  EXPORT_SYMBOL_GPL(ip_set_get_extensions);
* Unmerged path net/netfilter/ipset/ip_set_core.c
diff --git a/net/netfilter/ipset/ip_set_hash_gen.h b/net/netfilter/ipset/ip_set_hash_gen.h
index 9ce28af662bf..17814e018251 100644
--- a/net/netfilter/ipset/ip_set_hash_gen.h
+++ b/net/netfilter/ipset/ip_set_hash_gen.h
@@ -392,7 +392,7 @@ mtype_destroy(struct ip_set *set)
 {
 	struct htype *h = set->data;
 
-	if (set->extensions & IPSET_EXT_TIMEOUT)
+	if (SET_WITH_TIMEOUT(set))
 		del_timer_sync(&h->gc);
 
 	ahash_destroy(h->table);
