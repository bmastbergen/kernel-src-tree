sd, mmc, virtio_blk, string_helpers: fix block size units

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author James Bottomley <JBottomley@Odin.com>
commit b9f28d863594c429e1df35a0474d2663ca28b307
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b9f28d86.failed

The current string_get_size() overflows when the device size goes over
2^64 bytes because the string helper routine computes the suffix from
the size in bytes.  However, the entirety of Linux thinks in terms of
blocks, not bytes, so this will artificially induce an overflow on very
large devices.  Fix this by making the function string_get_size() take
blocks and the block size instead of bytes.  This should allow us to
keep working until the current SCSI standard overflows.

Also fix virtio_blk and mmc (both of which were also artificially
multiplying by the block size to pass a byte side to string_get_size()).

The mathematics of this is pretty simple:  we're taking a product of
size in blocks (S) and block size (B) and trying to re-express this in
exponential form: S*B = R*N^E (where N, the exponent is either 1000 or
1024) and R < N.  Mathematically, S = RS*N^ES and B=RB*N^EB, so if RS*RB
< N it's easy to see that S*B = RS*RB*N^(ES+EB).  However, if RS*BS > N,
we can see that this can be re-expressed as RS*BS = R*N (where R =
RS*BS/N < N) so the whole exponent becomes R*N^(ES+EB+1)

[jejb: fix incorrect 32 bit do_div spotted by kbuild test robot <fengguang.wu@intel.com>]
	Acked-by: Ulf Hansson <ulf.hansson@linaro.org>
	Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: James Bottomley <JBottomley@Odin.com>
(cherry picked from commit b9f28d863594c429e1df35a0474d2663ca28b307)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/string_helpers.h
#	lib/string_helpers.c
diff --cc include/linux/string_helpers.h
index 3eeee9672a4a,263328063730..000000000000
--- a/include/linux/string_helpers.h
+++ b/include/linux/string_helpers.h
@@@ -10,8 -10,8 +10,13 @@@ enum string_size_units 
  	STRING_UNITS_2,		/* use binary powers of 2^10 */
  };
  
++<<<<<<< HEAD
 +int string_get_size(u64 size, enum string_size_units units,
 +		    char *buf, int len);
++=======
+ void string_get_size(u64 size, u64 blk_size, enum string_size_units units,
+ 		     char *buf, int len);
++>>>>>>> b9f28d863594 (sd, mmc, virtio_blk, string_helpers: fix block size units)
  
  #define UNESCAPE_SPACE		0x01
  #define UNESCAPE_OCTAL		0x02
diff --cc lib/string_helpers.c
index ed5c1454dd62,4a913ec3acf9..000000000000
--- a/lib/string_helpers.c
+++ b/lib/string_helpers.c
@@@ -18,19 -22,21 +20,33 @@@
   * @len:	length of buffer
   *
   * This function returns a string formatted to 3 significant figures
 - * giving the size in the required units.  @buf should have room for
 - * at least 9 bytes and will always be zero terminated.
 + * giving the size in the required units.  Returns 0 on success or
 + * error on failure.  @buf is always zero terminated.
   *
   */
++<<<<<<< HEAD
 +int string_get_size(u64 size, const enum string_size_units units,
 +		    char *buf, int len)
 +{
 +	static const char *units_10[] = { "B", "kB", "MB", "GB", "TB", "PB",
 +				   "EB", "ZB", "YB", NULL};
 +	static const char *units_2[] = {"B", "KiB", "MiB", "GiB", "TiB", "PiB",
 +				 "EiB", "ZiB", "YiB", NULL };
 +	static const char **units_str[] = {
 +		[STRING_UNITS_10] =  units_10,
++=======
+ void string_get_size(u64 size, u64 blk_size, const enum string_size_units units,
+ 		     char *buf, int len)
+ {
+ 	static const char *const units_10[] = {
+ 		"B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"
+ 	};
+ 	static const char *const units_2[] = {
+ 		"B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"
+ 	};
+ 	static const char *const *const units_str[] = {
+ 		[STRING_UNITS_10] = units_10,
++>>>>>>> b9f28d863594 (sd, mmc, virtio_blk, string_helpers: fix block size units)
  		[STRING_UNITS_2] = units_2,
  	};
  	static const unsigned int divisor[] = {
@@@ -38,34 -44,57 +54,87 @@@
  		[STRING_UNITS_2] = 1024,
  	};
  	int i, j;
++<<<<<<< HEAD
 +	u64 remainder = 0, sf_cap;
++=======
+ 	u32 remainder = 0, sf_cap, exp;
++>>>>>>> b9f28d863594 (sd, mmc, virtio_blk, string_helpers: fix block size units)
  	char tmp[8];
+ 	const char *unit;
  
  	tmp[0] = '\0';
  	i = 0;
++<<<<<<< HEAD
 +	if (size >= divisor[units]) {
 +		while (size >= divisor[units] && units_str[units][i]) {
 +			remainder = do_div(size, divisor[units]);
 +			i++;
 +		}
 +
 +		sf_cap = size;
 +		for (j = 0; sf_cap*10 < 1000; j++)
 +			sf_cap *= 10;
 +
 +		if (j) {
 +			remainder *= 1000;
 +			do_div(remainder, divisor[units]);
 +			snprintf(tmp, sizeof(tmp), ".%03lld",
 +				 (unsigned long long)remainder);
 +			tmp[j+1] = '\0';
 +		}
 +	}
 +
 +	snprintf(buf, len, "%lld%s %s", (unsigned long long)size,
 +		 tmp, units_str[units][i]);
 +
 +	return 0;
++=======
+ 	if (!size)
+ 		goto out;
+ 
+ 	while (blk_size >= divisor[units]) {
+ 		remainder = do_div(blk_size, divisor[units]);
+ 		i++;
+ 	}
+ 
+ 	exp = divisor[units] / (u32)blk_size;
+ 	if (size >= exp) {
+ 		remainder = do_div(size, divisor[units]);
+ 		remainder *= blk_size;
+ 		i++;
+ 	} else {
+ 		remainder *= size;
+ 	}
+ 
+ 	size *= blk_size;
+ 	size += remainder / divisor[units];
+ 	remainder %= divisor[units];
+ 
+ 	while (size >= divisor[units]) {
+ 		remainder = do_div(size, divisor[units]);
+ 		i++;
+ 	}
+ 
+ 	sf_cap = size;
+ 	for (j = 0; sf_cap*10 < 1000; j++)
+ 		sf_cap *= 10;
+ 
+ 	if (j) {
+ 		remainder *= 1000;
+ 		remainder /= divisor[units];
+ 		snprintf(tmp, sizeof(tmp), ".%03u", remainder);
+ 		tmp[j+1] = '\0';
+ 	}
+ 
+  out:
+ 	if (i >= ARRAY_SIZE(units_2))
+ 		unit = "UNK";
+ 	else
+ 		unit = units_str[units][i];
+ 
+ 	snprintf(buf, len, "%u%s %s", (u32)size,
+ 		 tmp, unit);
++>>>>>>> b9f28d863594 (sd, mmc, virtio_blk, string_helpers: fix block size units)
  }
  EXPORT_SYMBOL(string_get_size);
  
diff --git a/drivers/block/virtio_blk.c b/drivers/block/virtio_blk.c
index 12e2f30eeaac..a30f1bd94891 100644
--- a/drivers/block/virtio_blk.c
+++ b/drivers/block/virtio_blk.c
@@ -342,7 +342,7 @@ static void virtblk_config_changed_work(struct work_struct *work)
 	struct request_queue *q = vblk->disk->queue;
 	char cap_str_2[10], cap_str_10[10];
 	char *envp[] = { "RESIZE=1", NULL };
-	u64 capacity, size;
+	u64 capacity;
 
 	/* Host must always specify the capacity. */
 	virtio_cread(vdev, struct virtio_blk_config, capacity, &capacity);
@@ -354,9 +354,10 @@ static void virtblk_config_changed_work(struct work_struct *work)
 		capacity = (sector_t)-1;
 	}
 
-	size = capacity * queue_logical_block_size(q);
-	string_get_size(size, STRING_UNITS_2, cap_str_2, sizeof(cap_str_2));
-	string_get_size(size, STRING_UNITS_10, cap_str_10, sizeof(cap_str_10));
+	string_get_size(capacity, queue_logical_block_size(q),
+			STRING_UNITS_2, cap_str_2, sizeof(cap_str_2));
+	string_get_size(capacity, queue_logical_block_size(q),
+			STRING_UNITS_10, cap_str_10, sizeof(cap_str_10));
 
 	dev_notice(&vdev->dev,
 		  "new size: %llu %d-byte logical blocks (%s/%s)\n",
diff --git a/drivers/mmc/core/block.c b/drivers/mmc/core/block.c
index 464c6675a10f..8de02517b6c7 100644
--- a/drivers/mmc/core/block.c
+++ b/drivers/mmc/core/block.c
@@ -1985,7 +1985,7 @@ static int mmc_blk_alloc_part(struct mmc_card *card,
 	part_md->part_type = part_type;
 	list_add(&part_md->part, &md->part);
 
-	string_get_size((u64)get_capacity(part_md->disk) << 9, STRING_UNITS_2,
+	string_get_size((u64)get_capacity(part_md->disk), 512, STRING_UNITS_2,
 			cap_str, sizeof(cap_str));
 	pr_info("%s: %s %s partition %u %s\n",
 	       part_md->disk->disk_name, mmc_card_id(card),
@@ -2122,7 +2122,7 @@ static int mmc_blk_probe(struct mmc_card *card)
 	if (IS_ERR(md))
 		return PTR_ERR(md);
 
-	string_get_size((u64)get_capacity(md->disk) << 9, STRING_UNITS_2,
+	string_get_size((u64)get_capacity(md->disk), 512, STRING_UNITS_2,
 			cap_str, sizeof(cap_str));
 	pr_info("%s: %s %s %s %s\n",
 		md->disk->disk_name, mmc_card_id(card), mmc_card_name(card),
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index c94ce46de9aa..c4de5b5db0d6 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -2325,11 +2325,11 @@ got_data:
 
 	{
 		char cap_str_2[10], cap_str_10[10];
-		u64 sz = (u64)sdkp->capacity << ilog2(sector_size);
 
-		string_get_size(sz, STRING_UNITS_2, cap_str_2,
-				sizeof(cap_str_2));
-		string_get_size(sz, STRING_UNITS_10, cap_str_10,
+		string_get_size(sdkp->capacity, sector_size,
+				STRING_UNITS_2, cap_str_2, sizeof(cap_str_2));
+		string_get_size(sdkp->capacity, sector_size,
+				STRING_UNITS_10, cap_str_10,
 				sizeof(cap_str_10));
 
 		if (sdkp->first_scan || old_capacity != sdkp->capacity) {
* Unmerged path include/linux/string_helpers.h
* Unmerged path lib/string_helpers.c
