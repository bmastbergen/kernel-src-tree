net/mlx5: Enable setting hairpin queue size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [kernel] mlx5: Enable setting hairpin queue size (Alaa Hleihel) [1520297]
Rebuild_FUZZ: 95.12%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit 4d533e0f86952eb97f66f2c9548313f6e51066c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4d533e0f.failed

Allow to specify the size of the hairpin queues along with the
packet buffer data size from the core setup code.

If the driver doesn't provide this, the FW applies proper value that
matches the provided data size and a FW chosen RQ stride size.

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 4d533e0f86952eb97f66f2c9548313f6e51066c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mlx5/mlx5_ifc.h
diff --cc include/linux/mlx5/mlx5_ifc.h
index 23651f969e9d,199bfcd2f2ce..000000000000
--- a/include/linux/mlx5/mlx5_ifc.h
+++ b/include/linux/mlx5/mlx5_ifc.h
@@@ -1022,7 -1026,14 +1022,18 @@@ struct mlx5_ifc_cmd_hca_cap_bits 
  	u8         reserved_at_3b8[0x3];
  	u8         log_min_stride_sz_sq[0x5];
  
++<<<<<<< HEAD
 +	u8         reserved_at_3c0[0x1b];
++=======
+ 	u8         hairpin[0x1];
+ 	u8         reserved_at_3c1[0x2];
+ 	u8         log_max_hairpin_queues[0x5];
+ 	u8         reserved_at_3c8[0x3];
+ 	u8         log_max_hairpin_wq_data_sz[0x5];
+ 	u8         reserved_at_3d0[0x3];
+ 	u8         log_max_hairpin_num_packets[0x5];
+ 	u8         reserved_at_3d8[0x3];
++>>>>>>> 4d533e0f8695 (net/mlx5: Enable setting hairpin queue size)
  	u8         log_max_wq_sz[0x5];
  
  	u8         nic_vport_change_event[0x1];
@@@ -1164,7 -1174,12 +1175,16 @@@ struct mlx5_ifc_wq_bits 
  	u8         reserved_at_118[0x3];
  	u8         log_wq_sz[0x5];
  
++<<<<<<< HEAD
 +	u8         reserved_at_120[0x15];
++=======
+ 	u8         reserved_at_120[0x3];
+ 	u8         log_hairpin_num_packets[0x5];
+ 	u8         reserved_at_128[0x3];
+ 	u8         log_hairpin_data_sz[0x5];
+ 	u8         reserved_at_130[0x5];
+ 
++>>>>>>> 4d533e0f8695 (net/mlx5: Enable setting hairpin queue size)
  	u8         log_wqe_num_of_strides[0x3];
  	u8         two_byte_shift_en[0x1];
  	u8         reserved_at_139[0x4];
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/transobj.c b/drivers/net/ethernet/mellanox/mlx5/core/transobj.c
index 6f90d1fce5c5..9e38343a951f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/transobj.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/transobj.c
@@ -413,6 +413,7 @@ static int mlx5_hairpin_create_rq(struct mlx5_core_dev *mdev,
 	MLX5_SET(rqc, rqc, counter_set_id, params->q_counter);
 
 	MLX5_SET(wq, wq, log_hairpin_data_sz, params->log_data_size);
+	MLX5_SET(wq, wq, log_hairpin_num_packets, params->log_num_packets);
 
 	return mlx5_core_create_rq(mdev, in, MLX5_ST_SZ_BYTES(create_rq_in), rqn);
 }
@@ -430,6 +431,7 @@ static int mlx5_hairpin_create_sq(struct mlx5_core_dev *mdev,
 	MLX5_SET(sqc, sqc, state, MLX5_SQC_STATE_RST);
 
 	MLX5_SET(wq, wq, log_hairpin_data_sz, params->log_data_size);
+	MLX5_SET(wq, wq, log_hairpin_num_packets, params->log_num_packets);
 
 	return mlx5_core_create_sq(mdev, in, MLX5_ST_SZ_BYTES(create_sq_in), sqn);
 }
* Unmerged path include/linux/mlx5/mlx5_ifc.h
diff --git a/include/linux/mlx5/transobj.h b/include/linux/mlx5/transobj.h
index 1bcd8d5562f0..7e8f281f8c00 100644
--- a/include/linux/mlx5/transobj.h
+++ b/include/linux/mlx5/transobj.h
@@ -77,6 +77,7 @@ void mlx5_core_destroy_rqt(struct mlx5_core_dev *dev, u32 rqtn);
 
 struct mlx5_hairpin_params {
 	u8  log_data_size;
+	u8  log_num_packets;
 	u16 q_counter;
 	int num_channels;
 };
