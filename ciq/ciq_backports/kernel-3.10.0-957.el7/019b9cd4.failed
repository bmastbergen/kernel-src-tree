i40e: split i40e_get_strings() into smaller functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 019b9cd44d5aa457d9e45c85847f86ced40c852d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/019b9cd4.failed

Split the statistic strings and private flags strings into their own
separate functions to aid code readability.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 019b9cd44d5aa457d9e45c85847f86ced40c852d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ethtool.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 07042090c395,c50ed2d391e1..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@@ -1719,89 -1898,10 +1815,82 @@@ static void i40e_get_strings(struct net
  		       I40E_TEST_LEN * ETH_GSTRING_LEN);
  		break;
  	case ETH_SS_STATS:
++<<<<<<< HEAD
 +		for (i = 0; i < I40E_NETDEV_STATS_LEN; i++) {
 +			snprintf(p, ETH_GSTRING_LEN, "%s",
 +				 i40e_gstrings_net_stats[i].stat_string);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < I40E_MISC_STATS_LEN; i++) {
 +			snprintf(p, ETH_GSTRING_LEN, "%s",
 +				 i40e_gstrings_misc_stats[i].stat_string);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < vsi->num_queue_pairs; i++) {
 +			snprintf(p, ETH_GSTRING_LEN, "tx-%d.tx_packets", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN, "tx-%d.tx_bytes", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN, "rx-%d.rx_packets", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN, "rx-%d.rx_bytes", i);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		if (vsi != pf->vsi[pf->lan_vsi] || pf->hw.partition_id != 1)
 +			return;
 +
 +		for (i = 0; i < I40E_VEB_STATS_LEN; i++) {
 +			snprintf(p, ETH_GSTRING_LEN, "veb.%s",
 +				 i40e_gstrings_veb_stats[i].stat_string);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < I40E_MAX_TRAFFIC_CLASS; i++) {
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "veb.tc_%u_tx_packets", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "veb.tc_%u_tx_bytes", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "veb.tc_%u_rx_packets", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "veb.tc_%u_rx_bytes", i);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < I40E_GLOBAL_STATS_LEN; i++) {
 +			snprintf(p, ETH_GSTRING_LEN, "port.%s",
 +				 i40e_gstrings_stats[i].stat_string);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < I40E_MAX_USER_PRIORITY; i++) {
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "port.tx_priority_%d_xon", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "port.tx_priority_%d_xoff", i);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < I40E_MAX_USER_PRIORITY; i++) {
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "port.rx_priority_%d_xon", i);
 +			p += ETH_GSTRING_LEN;
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "port.rx_priority_%d_xoff", i);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < I40E_MAX_USER_PRIORITY; i++) {
 +			snprintf(p, ETH_GSTRING_LEN,
 +				 "port.rx_priority_%d_xon_2_xoff", i);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		/* BUG_ON(p - data != I40E_STATS_LEN * ETH_GSTRING_LEN); */
++=======
+ 		i40e_get_stat_strings(netdev, data);
++>>>>>>> 019b9cd44d5a (i40e: split i40e_get_strings() into smaller functions)
  		break;
  	case ETH_SS_PRIV_FLAGS:
- 		for (i = 0; i < I40E_PRIV_FLAGS_STR_LEN; i++) {
- 			snprintf(p, ETH_GSTRING_LEN, "%s",
- 				 i40e_gstrings_priv_flags[i].flag_string);
- 			p += ETH_GSTRING_LEN;
- 		}
- 		if (pf->hw.pf_id != 0)
- 			break;
- 		for (i = 0; i < I40E_GL_PRIV_FLAGS_STR_LEN; i++) {
- 			snprintf(p, ETH_GSTRING_LEN, "%s",
- 				 i40e_gl_gstrings_priv_flags[i].flag_string);
- 			p += ETH_GSTRING_LEN;
- 		}
+ 		i40e_get_priv_flag_strings(netdev, data);
  		break;
  	default:
  		break;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ethtool.c
