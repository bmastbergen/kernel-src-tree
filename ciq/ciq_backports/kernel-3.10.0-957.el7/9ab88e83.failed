mlx5: use tc_cls_can_offload_and_chain0()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 9ab88e83fd1e07f18990dc12b8960638a64c02ef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9ab88e83.failed

Make use of tc_cls_can_offload_and_chain0() to set extack msg in case
ethtool tc offload flag is not set or chain unsupported.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Acked-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9ab88e83fd1e07f18990dc12b8960638a64c02ef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index f9f9996c2b9e,47bab842c5ee..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -2913,15 -2941,9 +2913,18 @@@ out
  }
  
  #ifdef CONFIG_MLX5_ESWITCH
 -static int mlx5e_setup_tc_cls_flower(struct mlx5e_priv *priv,
 +static int mlx5e_setup_tc_cls_flower(struct net_device *dev,
  				     struct tc_cls_flower_offload *cls_flower)
  {
++<<<<<<< HEAD
 +	struct mlx5e_priv *priv = netdev_priv(dev);
 +
 +	if (!is_classid_clsact_ingress(cls_flower->common.classid) ||
 +	    cls_flower->common.chain_index)
 +		return -EOPNOTSUPP;
 +
++=======
++>>>>>>> 9ab88e83fd1e (mlx5: use tc_cls_can_offload_and_chain0())
  	switch (cls_flower->command) {
  	case TC_CLSFLOWER_REPLACE:
  		return mlx5e_configure_flower(priv, cls_flower);
@@@ -2933,10 -2955,47 +2936,50 @@@
  		return -EOPNOTSUPP;
  	}
  }
++<<<<<<< HEAD
++=======
+ 
+ int mlx5e_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
+ 			    void *cb_priv)
+ {
+ 	struct mlx5e_priv *priv = cb_priv;
+ 
+ 	if (!tc_cls_can_offload_and_chain0(priv->netdev, type_data))
+ 		return -EOPNOTSUPP;
+ 
+ 	switch (type) {
+ 	case TC_SETUP_CLSFLOWER:
+ 		return mlx5e_setup_tc_cls_flower(priv, type_data);
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
+ 
+ static int mlx5e_setup_tc_block(struct net_device *dev,
+ 				struct tc_block_offload *f)
+ {
+ 	struct mlx5e_priv *priv = netdev_priv(dev);
+ 
+ 	if (f->binder_type != TCF_BLOCK_BINDER_TYPE_CLSACT_INGRESS)
+ 		return -EOPNOTSUPP;
+ 
+ 	switch (f->command) {
+ 	case TC_BLOCK_BIND:
+ 		return tcf_block_cb_register(f->block, mlx5e_setup_tc_block_cb,
+ 					     priv, priv);
+ 	case TC_BLOCK_UNBIND:
+ 		tcf_block_cb_unregister(f->block, mlx5e_setup_tc_block_cb,
+ 					priv);
+ 		return 0;
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
++>>>>>>> 9ab88e83fd1e (mlx5: use tc_cls_can_offload_and_chain0())
  #endif
  
 -int mlx5e_setup_tc(struct net_device *dev, enum tc_setup_type type,
 -		   void *type_data)
 +static int mlx5e_setup_tc(struct net_device *dev, enum tc_setup_type type,
 +			  void *type_data)
  {
  	switch (type) {
  #ifdef CONFIG_MLX5_ESWITCH
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 1f6b50ed685e,363d8dcb7f17..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@@ -720,17 -719,6 +720,20 @@@ static in
  mlx5e_rep_setup_tc_cls_flower(struct mlx5e_priv *priv,
  			      struct tc_cls_flower_offload *cls_flower)
  {
++<<<<<<< HEAD
 +	if (cls_flower->common.chain_index)
 +		return -EOPNOTSUPP;
 +
 +	if (cls_flower->egress_dev) {
 +		struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 +
 +		dev = mlx5_eswitch_get_uplink_netdev(esw);
 +		return __rh_call_ndo_setup_tc(dev, TC_SETUP_CLSFLOWER,
 +					      cls_flower);
 +	}
 +
++=======
++>>>>>>> 9ab88e83fd1e (mlx5: use tc_cls_can_offload_and_chain0())
  	switch (cls_flower->command) {
  	case TC_CLSFLOWER_REPLACE:
  		return mlx5e_configure_flower(priv, cls_flower);
@@@ -748,6 -736,9 +751,12 @@@ static int mlx5e_rep_setup_tc_cb(enum t
  {
  	struct mlx5e_priv *priv = cb_priv;
  
++<<<<<<< HEAD
++=======
+ 	if (!tc_cls_can_offload_and_chain0(priv->netdev, type_data))
+ 		return -EOPNOTSUPP;
+ 
++>>>>>>> 9ab88e83fd1e (mlx5: use tc_cls_can_offload_and_chain0())
  	switch (type) {
  	case TC_SETUP_CLSFLOWER:
  		return mlx5e_rep_setup_tc_cls_flower(priv, type_data);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
