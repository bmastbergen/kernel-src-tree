ftrace: Match dot symbols when searching functions on ppc64

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Thiago Jung Bauermann <bauerman@linux.vnet.ibm.com>
commit 7132e2d669bd42c3783327f301aaac5f4463299b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/7132e2d6.failed

In the ppc64 big endian ABI, function symbols point to function
descriptors. The symbols which point to the function entry points
have a dot in front of the function name. Consequently, when the
ftrace filter mechanism searches for the symbol corresponding to
an entry point address, it gets the dot symbol.

As a result, ftrace filter users have to be aware of this ABI detail on
ppc64 and prepend a dot to the function name when setting the filter.

The perf probe command insulates the user from this by ignoring the dot
in front of the symbol name when matching function names to symbols,
but the sysfs interface does not. This patch makes the ftrace filter
mechanism do the same when searching symbols.

Fixes the following failure in ftracetest's kprobe_ftrace.tc:

  .../kprobe_ftrace.tc: line 9: echo: write error: Invalid argument

That failure is on this line of kprobe_ftrace.tc:

  echo _do_fork > set_ftrace_filter

This is because there's no _do_fork entry in the functions list:

  # cat available_filter_functions | grep _do_fork
  ._do_fork

This change introduces no regressions on the perf and ftracetest
testsuite results.

	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: linuxppc-dev@lists.ozlabs.org
	Signed-off-by: Thiago Jung Bauermann <bauerman@linux.vnet.ibm.com>
	Acked-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
(cherry picked from commit 7132e2d669bd42c3783327f301aaac5f4463299b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/ftrace.c
diff --cc kernel/trace/ftrace.c
index ffbc3688aedf,a6c8252d7776..000000000000
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@@ -2973,14 -3449,33 +2973,41 @@@ ftrace_notrace_open(struct inode *inode
  				 inode, file);
  }
  
++<<<<<<< HEAD
 +static int ftrace_match(char *str, char *regex, int len, int type)
++=======
+ /* Type for quick search ftrace basic regexes (globs) from filter_parse_regex */
+ struct ftrace_glob {
+ 	char *search;
+ 	unsigned len;
+ 	int type;
+ };
+ 
+ /*
+  * If symbols in an architecture don't correspond exactly to the user-visible
+  * name of what they represent, it is possible to define this function to
+  * perform the necessary adjustments.
+ */
+ char * __weak arch_ftrace_match_adjust(char *str, const char *search)
+ {
+ 	return str;
+ }
+ 
+ static int ftrace_match(char *str, struct ftrace_glob *g)
++>>>>>>> 7132e2d669bd (ftrace: Match dot symbols when searching functions on ppc64)
  {
  	int matched = 0;
  	int slen;
  
++<<<<<<< HEAD
 +	switch (type) {
++=======
+ 	str = arch_ftrace_match_adjust(str, g->search);
+ 
+ 	switch (g->type) {
++>>>>>>> 7132e2d669bd (ftrace: Match dot symbols when searching functions on ppc64)
  	case MATCH_FULL:
 -		if (strcmp(str, g->search) == 0)
 +		if (strcmp(str, regex) == 0)
  			matched = 1;
  		break;
  	case MATCH_FRONT_ONLY:
diff --git a/arch/powerpc/kernel/ftrace.c b/arch/powerpc/kernel/ftrace.c
index 7ec80f576e53..e7ade1e7e99a 100644
--- a/arch/powerpc/kernel/ftrace.c
+++ b/arch/powerpc/kernel/ftrace.c
@@ -623,3 +623,13 @@ unsigned long __init arch_syscall_addr(int nr)
 	return sys_call_table[nr*2];
 }
 #endif /* CONFIG_FTRACE_SYSCALLS && CONFIG_PPC64 */
+
+#if defined(CONFIG_PPC64) && (!defined(_CALL_ELF) || _CALL_ELF != 2)
+char *arch_ftrace_match_adjust(char *str, const char *search)
+{
+	if (str[0] == '.' && search[0] != '.')
+		return str + 1;
+	else
+		return str;
+}
+#endif /* defined(CONFIG_PPC64) && (!defined(_CALL_ELF) || _CALL_ELF != 2) */
* Unmerged path kernel/trace/ftrace.c
