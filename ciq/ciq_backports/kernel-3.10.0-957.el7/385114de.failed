net: modify skb_rbtree_purge to return the truesize of all purged skbs.

jira LE-1907
cve CVE-2018-5391
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] modify skb_rbtree_purge to return the truesize of all purged skbs (Sabrina Dubroca) [1613924] {CVE-2018-5391}
Rebuild_FUZZ: 95.59%
commit-author Peter Oskolkov <posk@google.com>
commit 385114dec8a49b5e5945e77ba7de6356106713f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/385114de.failed

Tested: see the next patch is the series.

	Suggested-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Peter Oskolkov <posk@google.com>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Florian Westphal <fw@strlen.de>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 385114dec8a49b5e5945e77ba7de6356106713f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/skbuff.h
#	net/core/skbuff.c
diff --cc include/linux/skbuff.h
index 8a4de9b1fc10,47848367c816..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -2459,6 -2585,8 +2459,11 @@@ static inline void __skb_queue_purge(st
  		kfree_skb(skb);
  }
  
++<<<<<<< HEAD
++=======
+ unsigned int skb_rbtree_purge(struct rb_root *root);
+ 
++>>>>>>> 385114dec8a4 (net: modify skb_rbtree_purge to return the truesize of all purged skbs.)
  void *netdev_alloc_frag(unsigned int fragsz);
  
  struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int length,
diff --cc net/core/skbuff.c
index 5e1f674884e9,8d574a88125d..000000000000
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@@ -2550,6 -2856,32 +2550,35 @@@ void skb_queue_purge(struct sk_buff_hea
  EXPORT_SYMBOL(skb_queue_purge);
  
  /**
++<<<<<<< HEAD
++=======
+  *	skb_rbtree_purge - empty a skb rbtree
+  *	@root: root of the rbtree to empty
+  *	Return value: the sum of truesizes of all purged skbs.
+  *
+  *	Delete all buffers on an &sk_buff rbtree. Each buffer is removed from
+  *	the list and one reference dropped. This function does not take
+  *	any lock. Synchronization should be handled by the caller (e.g., TCP
+  *	out-of-order queue is protected by the socket lock).
+  */
+ unsigned int skb_rbtree_purge(struct rb_root *root)
+ {
+ 	struct rb_node *p = rb_first(root);
+ 	unsigned int sum = 0;
+ 
+ 	while (p) {
+ 		struct sk_buff *skb = rb_entry(p, struct sk_buff, rbnode);
+ 
+ 		p = rb_next(p);
+ 		rb_erase(&skb->rbnode, root);
+ 		sum += skb->truesize;
+ 		kfree_skb(skb);
+ 	}
+ 	return sum;
+ }
+ 
+ /**
++>>>>>>> 385114dec8a4 (net: modify skb_rbtree_purge to return the truesize of all purged skbs.)
   *	skb_queue_head - queue a buffer at the list head
   *	@list: list to use
   *	@newsk: buffer to queue
* Unmerged path include/linux/skbuff.h
* Unmerged path net/core/skbuff.c
