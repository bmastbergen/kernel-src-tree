block: simplify blk_init_allocated_queue

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [block] simplify blk_init_allocated_queue (Ming Lei) [1568817]
Rebuild_FUZZ: 90.41%
commit-author Christoph Hellwig <hch@lst.de>
commit 5ea708d15a928f7a479987704203616d3274c03b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5ea708d1.failed

Return an errno value instead of the passed in queue so that the callers
don't have to keep track of two queues, and move the assignment of the
request_fn and lock to the caller as passing them as argument doesn't
simplify anything.  While we're at it also remove two pointless NULL
assignments, given that the request structure is zeroed on allocation.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Bart Van Assche <bart.vanassche@sandisk.com>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 5ea708d15a928f7a479987704203616d3274c03b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
diff --cc block/blk-core.c
index 3c1e8c52cafa,09819d24d385..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -896,16 -841,14 +900,23 @@@ blk_init_queue_node(request_fn_proc *rf
  }
  EXPORT_SYMBOL(blk_init_queue_node);
  
++<<<<<<< HEAD
 +struct request_queue *
 +blk_init_allocated_queue(struct request_queue *q, request_fn_proc *rfn,
 +			 spinlock_t *lock)
 +{
 +	if (!q)
 +		return NULL;
++=======
+ static blk_qc_t blk_queue_bio(struct request_queue *q, struct bio *bio);
  
++>>>>>>> 5ea708d15a92 (block: simplify blk_init_allocated_queue)
+ 
+ int blk_init_allocated_queue(struct request_queue *q)
+ {
  	q->fq = blk_alloc_flush_queue(q, NUMA_NO_NODE, 0);
  	if (!q->fq)
- 		return NULL;
+ 		return -ENOMEM;
  
  	if (blk_init_rl(&q->root_rl, q, GFP_KERNEL))
  		goto fail;
@@@ -942,7 -877,8 +945,12 @@@
  
  fail:
  	blk_free_flush_queue(q->fq);
++<<<<<<< HEAD
 +	return NULL;
++=======
+ 	wbt_exit(q);
+ 	return -ENOMEM;
++>>>>>>> 5ea708d15a92 (block: simplify blk_init_allocated_queue)
  }
  EXPORT_SYMBOL(blk_init_allocated_queue);
  
* Unmerged path block/blk-core.c
diff --git a/drivers/md/dm-rq.c b/drivers/md/dm-rq.c
index d5df417cac04..38b98bd58cc3 100644
--- a/drivers/md/dm-rq.c
+++ b/drivers/md/dm-rq.c
@@ -823,7 +823,8 @@ static void dm_old_request_fn(struct request_queue *q)
 int dm_old_init_request_queue(struct mapped_device *md)
 {
 	/* Fully initialize the queue */
-	if (!blk_init_allocated_queue(md->queue, dm_old_request_fn, NULL))
+	md->queue->request_fn = dm_old_request_fn;
+	if (blk_init_allocated_queue(md->queue) < 0)
 		return -EINVAL;
 
 	/* disable dm_old_request_fn's merge heuristic by default */
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 2b624b97bb35..7050c360f412 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -1122,8 +1122,7 @@ extern void blk_unprep_request(struct request *);
 extern struct request_queue *blk_init_queue_node(request_fn_proc *rfn,
 					spinlock_t *lock, int node_id);
 extern struct request_queue *blk_init_queue(request_fn_proc *, spinlock_t *);
-extern struct request_queue *blk_init_allocated_queue(struct request_queue *,
-						      request_fn_proc *, spinlock_t *);
+extern int blk_init_allocated_queue(struct request_queue *);
 extern void blk_cleanup_queue(struct request_queue *);
 extern void blk_queue_make_request(struct request_queue *, make_request_fn *);
 extern void blk_queue_bounce_limit(struct request_queue *, u64);
