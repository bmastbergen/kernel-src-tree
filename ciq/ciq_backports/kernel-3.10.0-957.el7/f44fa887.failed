s390/archrandom: Reconsider s390 arch random implementation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [s390] archrandom: Reconsider s390 arch random implementation (Hendrik Brueckner) [1594181]
Rebuild_FUZZ: 95.58%
commit-author Harald Freudenberger <freude@linux.vnet.ibm.com>
commit f44fa88745eda1530083b361e300e1ca4e15a6c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f44fa887.failed

The reworked version of the random device driver now calls
the arch_get_random_* functions on a very high frequency.
It does about 100.000 calls to arch_get_random_long for
providing 10 MB via /dev/urandom. Each invocation was
fetching entropy from the hardware random generator which
has a rate limit of about 4 MB/s. As the trng invocation
waits until enough entropy is gathered, the random device
driver is slowed down dramatically.

The s390 true random generator is not designed for such
a high rate. The TRNG is more designed to be used together
with the arch_get_random_seed_* functions. This is similar
to the way how powerpc has implemented their arch random
functionality.

This patch removes the invocations of the s390 TRNG for
arch_get_random_long() and arch_get_random_int() but leaving
the invocations for arch_get_random_seed_long() and
arch_get_random_seed_int(). So the s390 arch random
implementation now contributes high quality entropy to
the kernel random device for reseeding.

	Signed-off-by: Harald Freudenberger <freude@linux.vnet.ibm.com>
	Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
(cherry picked from commit f44fa88745eda1530083b361e300e1ca4e15a6c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/archrandom.h
diff --cc arch/s390/include/asm/archrandom.h
index 5df3130ca081,9695f8d09edf..000000000000
--- a/arch/s390/include/asm/archrandom.h
+++ b/arch/s390/include/asm/archrandom.h
@@@ -27,9 -27,7 +27,13 @@@ static void s390_arch_random_generate(u
  
  static inline bool arch_has_random(void)
  {
++<<<<<<< HEAD
 +	if (static_key_true(&s390_arch_random_available))
 +		return false;
 +	return true;
++=======
+ 	return false;
++>>>>>>> f44fa88745ed (s390/archrandom: Reconsider s390 arch random implementation)
  }
  
  static inline bool arch_has_random_seed(void)
@@@ -39,23 -39,21 +45,35 @@@
  
  static inline bool arch_get_random_long(unsigned long *v)
  {
++<<<<<<< HEAD
 +	if (static_key_true(&s390_arch_random_available))
 +		return false;
 +	s390_arch_random_generate((u8 *)v, sizeof(*v));
 +	return true;
++=======
+ 	return false;
++>>>>>>> f44fa88745ed (s390/archrandom: Reconsider s390 arch random implementation)
  }
  
  static inline bool arch_get_random_int(unsigned int *v)
  {
++<<<<<<< HEAD
 +	if (static_key_true(&s390_arch_random_available))
 +		return false;
 +	s390_arch_random_generate((u8 *)v, sizeof(*v));
 +	return true;
++=======
+ 	return false;
  }
  
  static inline bool arch_get_random_seed_long(unsigned long *v)
  {
- 	return arch_get_random_long(v);
+ 	if (static_branch_likely(&s390_arch_random_available)) {
+ 		s390_arch_random_generate((u8 *)v, sizeof(*v));
+ 		return true;
+ 	}
+ 	return false;
++>>>>>>> f44fa88745ed (s390/archrandom: Reconsider s390 arch random implementation)
  }
  
  static inline bool arch_get_random_seed_int(unsigned int *v)
* Unmerged path arch/s390/include/asm/archrandom.h
