x86/PCI: VMD: Eliminate vmd_vector member from list type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] pci: vmd: Eliminate vmd_vector member from list type (Myron Stowe) [1515090]
Rebuild_FUZZ: 96.30%
commit-author Jon Derrick <jonathan.derrick@intel.com>
commit 53db86adc2c9b3ce0454bece4487e8eca96e2614
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/53db86ad.failed

Eliminate unused vmd and vector members from vmd_irq_list and discover the
vector using pci_irq_vector().

	Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Keith Busch <keith.busch@intel.com>
(cherry picked from commit 53db86adc2c9b3ce0454bece4487e8eca96e2614)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/pci/vmd.c
diff --cc arch/x86/pci/vmd.c
index f5897b179675,61a97ff36514..000000000000
--- a/arch/x86/pci/vmd.c
+++ b/arch/x86/pci/vmd.c
@@@ -169,55 -183,25 +166,62 @@@ static struct vmd_irq_list *vmd_next_ir
  	return &vmd->irqs[best];
  }
  
 -static int vmd_msi_init(struct irq_domain *domain, struct msi_domain_info *info,
 -			unsigned int virq, irq_hw_number_t hwirq,
 -			msi_alloc_info_t *arg)
 +static int vmd_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
  {
 -	struct msi_desc *desc = arg->desc;
 -	struct vmd_dev *vmd = vmd_from_bus(msi_desc_to_pci_dev(desc)->bus);
 -	struct vmd_irq *vmdirq = kzalloc(sizeof(*vmdirq), GFP_KERNEL);
 +	int i = 0;
 +	unsigned int irq, virq;
 +	struct msi_desc *msidesc;
 +	struct irq_desc *desc;
 +	struct vmd_dev *vmd = vmd_from_bus(dev->bus);
  
 -	if (!vmdirq)
 -		return -ENOMEM;
 +	if (type == PCI_CAP_ID_MSI && nvec > 1)
 +		return 1;
 +	if (nvec > vmd->msix_count)
 +		return vmd->msix_count;
 +	if (nvec <= 0)
 +		return -EINVAL;
 +
 +	irq = irq_alloc_descs(-1, 0, nvec, -1);
 +	if (irq < 0)
 +		return irq;
 +
++<<<<<<< HEAD
 +	list_for_each_entry(msidesc, &dev->msi_list, list) {
 +		struct vmd_irq *vmdirq;
 +		struct msi_msg msg;
 +
 +		vmdirq = kzalloc(sizeof(*vmdirq), GFP_KERNEL);
 +		if (!vmdirq)
 +			return -ENOMEM;
 +
 +		virq = i + irq;
 +		desc = irq_to_desc(virq);
 +		desc->irq_data.msi_desc = msidesc;
  
 -	INIT_LIST_HEAD(&vmdirq->node);
 -	vmdirq->irq = vmd_next_irq(vmd, desc);
 -	vmdirq->virq = virq;
 +		INIT_LIST_HEAD(&vmdirq->node);
 +		vmdirq->irq = vmd_next_irq(vmd, msidesc);
 +		vmdirq->virq = virq;
  
 +		irq_set_handler_data(virq, vmdirq);
 +		irq_set_chip_and_handler(virq, &vmd_msi_controller,
 +					 handle_untracked_irq);
 +
 +		msg.address_hi = MSI_ADDR_BASE_HI;
 +		msg.address_lo = MSI_ADDR_BASE_LO | MSI_ADDR_DEST_ID(vmdirq->irq->index);
 +		msg.data = 0;
 +
 +		msidesc->irq = virq;
 +		msidesc->msg = msg;
 +		write_msi_msg(virq, &msg);
 +
 +		i++;
 +	}
++=======
+ 	irq_domain_set_info(domain, virq,
+ 			    pci_irq_vector(vmd->dev, vmdirq->irq->index),
+ 			    info->chip, vmdirq,
+ 			    handle_untracked_irq, vmd, NULL);
++>>>>>>> 53db86adc2c9 (x86/PCI: VMD: Eliminate vmd_vector member from list type)
  	return 0;
  }
  
* Unmerged path arch/x86/pci/vmd.c
