ceph: quota: support for ceph.quota.max_bytes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Luis Henriques <lhenriques@suse.com>
commit 2b83845f8bd711e66e1c367a9bd56c9df3410236
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2b83845f.failed

	Signed-off-by: Luis Henriques <lhenriques@suse.com>
	Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 2b83845f8bd711e66e1c367a9bd56c9df3410236)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/file.c
#	fs/ceph/inode.c
#	fs/ceph/quota.c
#	fs/ceph/super.h
diff --cc fs/ceph/file.c
index 7fa7d870dbaf,0a2843fdebbd..000000000000
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@@ -1391,13 -1372,17 +1391,23 @@@ retry_snap
  			goto out;
  	}
  
 -	err = generic_write_checks(iocb, from);
 -	if (err <= 0)
 +	err = generic_write_checks(file, &pos, &count, S_ISBLK(inode->i_mode));
 +	if (err)
  		goto out;
  
 +	if (count == 0)
 +		goto out;
 +
++<<<<<<< HEAD
++=======
+ 	pos = iocb->ki_pos;
+ 	count = iov_iter_count(from);
+ 	if (ceph_quota_is_max_bytes_exceeded(inode, pos + count)) {
+ 		err = -EDQUOT;
+ 		goto out;
+ 	}
+ 
++>>>>>>> 2b83845f8bd7 (ceph: quota: support for ceph.quota.max_bytes)
  	err = file_remove_privs(file);
  	if (err)
  		goto out;
diff --cc fs/ceph/inode.c
index 89fde4d86e99,50ccae151ea0..000000000000
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@@ -2120,12 -2137,24 +2120,27 @@@ int __ceph_setattr(struct dentry *dentr
   */
  int ceph_setattr(struct dentry *dentry, struct iattr *attr)
  {
 -	struct inode *inode = d_inode(dentry);
  	int err;
  
++<<<<<<< HEAD
 +	err = __ceph_setattr(dentry, attr);
++=======
+ 	if (ceph_snap(inode) != CEPH_NOSNAP)
+ 		return -EROFS;
+ 
+ 	err = setattr_prepare(dentry, attr);
+ 	if (err != 0)
+ 		return err;
+ 
+ 	if ((attr->ia_valid & ATTR_SIZE) &&
+ 	    ceph_quota_is_max_bytes_exceeded(inode, attr->ia_size))
+ 		return -EDQUOT;
+ 
+ 	err = __ceph_setattr(inode, attr);
++>>>>>>> 2b83845f8bd7 (ceph: quota: support for ceph.quota.max_bytes)
  
  	if (err >= 0 && (attr->ia_valid & ATTR_MODE))
 -		err = posix_acl_chmod(inode, attr->ia_mode);
 +		err = ceph_acl_chmod(dentry, dentry->d_inode);
  
  	return err;
  }
diff --cc fs/ceph/super.h
index 2ea6359d8d08,5870c225c2fc..000000000000
--- a/fs/ceph/super.h
+++ b/fs/ceph/super.h
@@@ -1022,4 -1073,13 +1022,16 @@@ extern int lock_to_ceph_filelock(struc
  extern int ceph_fs_debugfs_init(struct ceph_fs_client *client);
  extern void ceph_fs_debugfs_cleanup(struct ceph_fs_client *client);
  
++<<<<<<< HEAD
++=======
+ /* quota.c */
+ extern void ceph_handle_quota(struct ceph_mds_client *mdsc,
+ 			      struct ceph_mds_session *session,
+ 			      struct ceph_msg *msg);
+ extern bool ceph_quota_is_max_files_exceeded(struct inode *inode);
+ extern bool ceph_quota_is_same_realm(struct inode *old, struct inode *new);
+ extern bool ceph_quota_is_max_bytes_exceeded(struct inode *inode,
+ 					     loff_t newlen);
+ 
++>>>>>>> 2b83845f8bd7 (ceph: quota: support for ceph.quota.max_bytes)
  #endif /* _FS_CEPH_SUPER_H */
* Unmerged path fs/ceph/quota.c
* Unmerged path fs/ceph/file.c
* Unmerged path fs/ceph/inode.c
* Unmerged path fs/ceph/quota.c
* Unmerged path fs/ceph/super.h
