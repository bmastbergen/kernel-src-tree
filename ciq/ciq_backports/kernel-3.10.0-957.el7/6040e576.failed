Make the hardened user-copy code depend on having a hardened allocator

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Linus Torvalds <torvalds@linux-foundation.org>
commit 6040e57658eee6eb1315a26119101ca832d1f854
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6040e576.failed

The kernel test robot reported a usercopy failure in the new hardened
sanity checks, due to a page-crossing copy of the FPU state into the
task structure.

This happened because the kernel test robot was testing with SLOB, which
doesn't actually do the required book-keeping for slab allocations, and
as a result the hardening code didn't realize that the task struct
allocation was one single allocation - and the sanity checks fail.

Since SLOB doesn't even claim to support hardening (and you really
shouldn't use it), the straightforward solution is to just make the
usercopy hardening code depend on the allocator supporting it.

	Reported-by: kernel test robot <xiaolong.ye@intel.com>
	Cc: Kees Cook <keescook@chromium.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6040e57658eee6eb1315a26119101ca832d1f854)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/Kconfig
diff --cc security/Kconfig
index 78bddd1d7f28,da10d9b573a4..000000000000
--- a/security/Kconfig
+++ b/security/Kconfig
@@@ -144,6 -118,35 +144,38 @@@ config LSM_MMAP_MIN_ADD
  	  this low address space will need the permission specific to the
  	  systems running LSM.
  
++<<<<<<< HEAD
++=======
+ config HAVE_HARDENED_USERCOPY_ALLOCATOR
+ 	bool
+ 	help
+ 	  The heap allocator implements __check_heap_object() for
+ 	  validating memory ranges against heap object sizes in
+ 	  support of CONFIG_HARDENED_USERCOPY.
+ 
+ config HAVE_ARCH_HARDENED_USERCOPY
+ 	bool
+ 	help
+ 	  The architecture supports CONFIG_HARDENED_USERCOPY by
+ 	  calling check_object_size() just before performing the
+ 	  userspace copies in the low level implementation of
+ 	  copy_to_user() and copy_from_user().
+ 
+ config HARDENED_USERCOPY
+ 	bool "Harden memory copies between kernel and userspace"
+ 	depends on HAVE_ARCH_HARDENED_USERCOPY
+ 	depends on HAVE_HARDENED_USERCOPY_ALLOCATOR
+ 	select BUG
+ 	help
+ 	  This option checks for obviously wrong memory regions when
+ 	  copying memory to/from the kernel (via copy_to_user() and
+ 	  copy_from_user() functions) by rejecting memory ranges that
+ 	  are larger than the specified heap object, span multiple
+ 	  separately allocates pages, are not on the process stack,
+ 	  or are part of the kernel text. This kills entire classes
+ 	  of heap overflow exploits and similar kernel memory exposures.
+ 
++>>>>>>> 6040e57658ee (Make the hardened user-copy code depend on having a hardened allocator)
  source security/selinux/Kconfig
  source security/smack/Kconfig
  source security/tomoyo/Kconfig
* Unmerged path security/Kconfig
