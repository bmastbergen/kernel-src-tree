crypto: cryptd - Add helpers to check whether a tfm is queued

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [crypto] cryptd: Add helpers to check whether a tfm is queued (Herbert Xu) [1579195]
Rebuild_FUZZ: 90.27%
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit 81760ea6a95ad4c41273a71052f61b9f087b5753
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/81760ea6.failed

This patch adds helpers to check whether a given tfm is currently
queued.  This is meant to be used by ablk_helper and similar
entities to ensure that no reordering is introduced because of
requests queued in cryptd with respect to requests being processed
in softirq context.

The per-cpu queue length limit is also increased to 1000 in line
with network limits.

	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 81760ea6a95ad4c41273a71052f61b9f087b5753)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/cryptd.c
diff --cc crypto/cryptd.c
index df8fd3fcc246,cf8037a87b2d..000000000000
--- a/crypto/cryptd.c
+++ b/crypto/cryptd.c
@@@ -31,9 -32,7 +32,13 @@@
  #include <linux/sched.h>
  #include <linux/slab.h>
  
++<<<<<<< HEAD
 +unsigned int cryptd_max_cpu_qlen = 100;
 +module_param(cryptd_max_cpu_qlen, uint, 0);
 +MODULE_PARM_DESC(cryptd_max_cpu_qlen, "Set cryptd Max queue depth");
++=======
+ #define CRYPTD_MAX_CPU_QLEN 1000
++>>>>>>> 81760ea6a95a (crypto: cryptd - Add helpers to check whether a tfm is queued)
  
  struct cryptd_cpu_queue {
  	struct crypto_queue queue;
@@@ -663,17 -725,30 +704,36 @@@ static void cryptd_aead_crypt(struct ae
  			int (*crypt)(struct aead_request *req))
  {
  	struct cryptd_aead_request_ctx *rctx;
++<<<<<<< HEAD
++=======
+ 	struct cryptd_aead_ctx *ctx;
+ 	crypto_completion_t compl;
+ 	struct crypto_aead *tfm;
+ 	int refcnt;
+ 
++>>>>>>> 81760ea6a95a (crypto: cryptd - Add helpers to check whether a tfm is queued)
  	rctx = aead_request_ctx(req);
 -	compl = rctx->complete;
  
  	if (unlikely(err == -EINPROGRESS))
  		goto out;
  	aead_request_set_tfm(req, child);
  	err = crypt( req );
++<<<<<<< HEAD
 +	req->base.complete = rctx->complete;
++=======
+ 
++>>>>>>> 81760ea6a95a (crypto: cryptd - Add helpers to check whether a tfm is queued)
  out:
+ 	tfm = crypto_aead_reqtfm(req);
+ 	ctx = crypto_aead_ctx(tfm);
+ 	refcnt = atomic_read(&ctx->refcnt);
+ 
  	local_bh_disable();
 -	compl(&req->base, err);
 +	rctx->complete(&req->base, err);
  	local_bh_enable();
+ 
+ 	if (err != -EINPROGRESS && refcnt && atomic_dec_and_test(&ctx->refcnt))
+ 		crypto_free_aead(tfm);
  }
  
  static void cryptd_aead_encrypt(struct crypto_async_request *areq, int err)
* Unmerged path crypto/cryptd.c
diff --git a/include/crypto/cryptd.h b/include/crypto/cryptd.h
index ba98918bbd9b..5bc0e6796cd4 100644
--- a/include/crypto/cryptd.h
+++ b/include/crypto/cryptd.h
@@ -30,6 +30,7 @@ static inline struct cryptd_ablkcipher *__cryptd_ablkcipher_cast(
 struct cryptd_ablkcipher *cryptd_alloc_ablkcipher(const char *alg_name,
 						  u32 type, u32 mask);
 struct crypto_blkcipher *cryptd_ablkcipher_child(struct cryptd_ablkcipher *tfm);
+bool cryptd_ablkcipher_queued(struct cryptd_ablkcipher *tfm);
 void cryptd_free_ablkcipher(struct cryptd_ablkcipher *tfm);
 
 struct cryptd_ahash {
@@ -47,6 +48,8 @@ struct cryptd_ahash *cryptd_alloc_ahash(const char *alg_name,
 					u32 type, u32 mask);
 struct crypto_shash *cryptd_ahash_child(struct cryptd_ahash *tfm);
 struct shash_desc *cryptd_shash_desc(struct ahash_request *req);
+/* Must be called without moving CPUs. */
+bool cryptd_ahash_queued(struct cryptd_ahash *tfm);
 void cryptd_free_ahash(struct cryptd_ahash *tfm);
 
 struct cryptd_aead {
@@ -63,6 +66,8 @@ struct cryptd_aead *cryptd_alloc_aead(const char *alg_name,
 					  u32 type, u32 mask);
 
 struct crypto_aead *cryptd_aead_child(struct cryptd_aead *tfm);
+/* Must be called without moving CPUs. */
+bool cryptd_aead_queued(struct cryptd_aead *tfm);
 
 void cryptd_free_aead(struct cryptd_aead *tfm);
 
