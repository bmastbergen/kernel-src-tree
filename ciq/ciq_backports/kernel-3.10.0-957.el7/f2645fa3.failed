platform/x86: dell-smbios-wmi: introduce userspace interface

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: dell-smbios-wmi: introduce userspace interface (Jarod Wilson) [1562200]
Rebuild_FUZZ: 91.89%
commit-author Mario Limonciello <mario.limonciello@dell.com>
commit f2645fa317b8905b8934f06a0601d5b7fa66aba0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f2645fa3.failed

It's important for the driver to provide a R/W ioctl to ensure that
two competing userspace processes don't race to provide or read each
others data.

This userspace character device will be used to perform SMBIOS calls
from any applications.

It provides an ioctl that will allow passing the WMI calling
interface buffer between userspace and kernel space.

This character device is intended to deprecate the dcdbas kernel module
and the interface that it provides to userspace.

To perform an SMBIOS IOCTL call using the character device userspace will
perform a read() on the the character device.  The WMI bus will provide
a u64 variable containing the necessary size of the IOCTL buffer.

The API for interacting with this interface is defined in documentation
as well as the WMI uapi header provides the format of the structures.

Not all userspace requests will be accepted.  The dell-smbios filtering
functionality will be used to prevent access to certain tokens and calls.

All whitelisted commands and tokens are now shared out to userspace so
applications don't need to define them in their own headers.

	Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
	Reviewed-by: Edward O'Callaghan <quasisec@google.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
(cherry picked from commit f2645fa317b8905b8934f06a0601d5b7fa66aba0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/platform/x86/dell-smbios-wmi.c
#	drivers/platform/x86/dell-smbios.h
#	include/uapi/linux/wmi.h
diff --cc drivers/platform/x86/dell-smbios.h
index 742dd8bd66b9,138d478d9adc..000000000000
--- a/drivers/platform/x86/dell-smbios.h
+++ b/drivers/platform/x86/dell-smbios.h
@@@ -16,17 -16,29 +16,32 @@@
  #ifndef _DELL_SMBIOS_H_
  #define _DELL_SMBIOS_H_
  
- struct notifier_block;
++<<<<<<< HEAD
++=======
+ #include <linux/device.h>
+ #include <uapi/linux/wmi.h>
+ 
+ /* Classes and selects used only in kernel drivers */
+ #define CLASS_KBD_BACKLIGHT 4
+ #define SELECT_KBD_BACKLIGHT 11
  
- /* This structure will be modified by the firmware when we enter
-  * system management mode, hence the volatiles */
+ /* Tokens used in kernel drivers, any of these
+  * should be filtered from userspace access
+  */
+ #define BRIGHTNESS_TOKEN	0x007d
+ #define KBD_LED_AC_TOKEN	0x0451
+ #define KBD_LED_OFF_TOKEN	0x01E1
+ #define KBD_LED_ON_TOKEN	0x01E2
+ #define KBD_LED_AUTO_TOKEN	0x01E3
+ #define KBD_LED_AUTO_25_TOKEN	0x02EA
+ #define KBD_LED_AUTO_50_TOKEN	0x02EB
+ #define KBD_LED_AUTO_75_TOKEN	0x02EC
+ #define KBD_LED_AUTO_100_TOKEN	0x02F6
+ #define GLOBAL_MIC_MUTE_ENABLE	0x0364
+ #define GLOBAL_MIC_MUTE_DISABLE	0x0365
  
- struct calling_interface_buffer {
- 	u16 cmd_class;
- 	u16 cmd_select;
- 	volatile u32 input[4];
- 	volatile u32 output[4];
- } __packed;
++>>>>>>> f2645fa317b8 (platform/x86: dell-smbios-wmi: introduce userspace interface)
+ struct notifier_block;
  
  struct calling_interface_token {
  	u16 tokenID;
* Unmerged path drivers/platform/x86/dell-smbios-wmi.c
* Unmerged path include/uapi/linux/wmi.h
diff --git a/Documentation/ABI/testing/dell-smbios-wmi b/Documentation/ABI/testing/dell-smbios-wmi
new file mode 100644
index 000000000000..fc919ce16008
--- /dev/null
+++ b/Documentation/ABI/testing/dell-smbios-wmi
@@ -0,0 +1,41 @@
+What:		/dev/wmi/dell-smbios
+Date:		November 2017
+KernelVersion:	4.15
+Contact:	"Mario Limonciello" <mario.limonciello@dell.com>
+Description:
+		Perform SMBIOS calls on supported Dell machines.
+		through the Dell ACPI-WMI interface.
+
+		IOCTL's and buffer formats are defined in:
+		<uapi/linux/wmi.h>
+
+		1) To perform an SMBIOS call from userspace, you'll need to
+		first determine the minimum size of the calling interface
+		buffer for your machine.
+		Platforms that contain larger buffers can return larger
+		objects from the system firmware.
+		Commonly this size is either 4k or 32k.
+
+		To determine the size of the buffer read() a u64 dword from
+		the WMI character device /dev/wmi/dell-smbios.
+
+		2) After you've determined the minimum size of the calling
+		interface buffer, you can allocate a structure that represents
+		the structure documented above.
+
+		3) In the 'length' object store the size of the buffer you
+		determined above and allocated.
+
+		4) In this buffer object, prepare as necessary for the SMBIOS
+		call you're interested in.  Typically SMBIOS buffers have
+		"class", "select", and "input" defined to values that coincide
+		with the data you are interested in.
+		Documenting class/select/input values is outside of the scope
+		of this documentation. Check with the libsmbios project for
+		further documentation on these values.
+
+		6) Run the call by using ioctl() as described in the header.
+
+		7) The output will be returned in the buffer object.
+
+		8) Be sure to free up your allocated object.
* Unmerged path drivers/platform/x86/dell-smbios-wmi.c
* Unmerged path drivers/platform/x86/dell-smbios.h
* Unmerged path include/uapi/linux/wmi.h
