x86/cpu: Remove the pointless CPU printout

jira LE-1907
cve CVE-2018-3620
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] cpu: remove the pointless cpu printout (Christoph von Recklinghausen) [1593384] {CVE-2018-3620}
Rebuild_FUZZ: 95.00%
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 55e6d279abd92cfd7576bba031e7589be8475edb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/55e6d279.failed

The value of this printout is dubious at best and there is no point in
having it in two different places along with convoluted ways to reach it.

Remove it completely.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Acked-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 55e6d279abd92cfd7576bba031e7589be8475edb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/common.c
#	arch/x86/kernel/cpu/topology.c
diff --cc arch/x86/kernel/cpu/common.c
index 49cb90f121df,81fbb267489e..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -607,10 -660,9 +607,9 @@@ static void cpu_detect_tlb(struct cpuin
  
  void detect_ht(struct cpuinfo_x86 *c)
  {
 -#ifdef CONFIG_SMP
 +#ifdef CONFIG_X86_HT
  	u32 eax, ebx, ecx, edx;
  	int index_msb, core_bits;
- 	static bool printed;
  
  	if (!cpu_has(c, X86_FEATURE_HT))
  		return;
@@@ -625,14 -677,14 +624,19 @@@
  
  	smp_num_siblings = (ebx & 0xff0000) >> 16;
  
+ 	if (!smp_num_siblings)
+ 		smp_num_siblings = 1;
+ 
  	if (smp_num_siblings == 1) {
++<<<<<<< HEAD
 +		printk_once(KERN_INFO "CPU0: Hyper-Threading is disabled\n");
 +		goto out;
++=======
+ 		pr_info_once("CPU0: Hyper-Threading is disabled\n");
+ 		return;
++>>>>>>> 55e6d279abd9 (x86/cpu: Remove the pointless CPU printout)
  	}
  
- 	if (smp_num_siblings <= 1)
- 		goto out;
- 
  	index_msb = get_count_order(smp_num_siblings);
  	c->phys_proc_id = apic->phys_pkg_id(c->initial_apicid, index_msb);
  
@@@ -644,15 -696,6 +648,18 @@@
  
  	c->cpu_core_id = apic->phys_pkg_id(c->initial_apicid, index_msb) &
  				       ((1 << core_bits) - 1);
++<<<<<<< HEAD
 +
 +out:
 +	if (!printed && (c->x86_max_cores * smp_num_siblings) > 1) {
 +		printk(KERN_INFO  "CPU: Physical Processor ID: %d\n",
 +		       c->phys_proc_id);
 +		printk(KERN_INFO  "CPU: Processor Core ID: %d\n",
 +		       c->cpu_core_id);
 +		printed = 1;
 +	}
++=======
++>>>>>>> 55e6d279abd9 (x86/cpu: Remove the pointless CPU printout)
  #endif
  }
  
diff --cc arch/x86/kernel/cpu/topology.c
index e321c1f4d260,1072b5eda607..000000000000
--- a/arch/x86/kernel/cpu/topology.c
+++ b/arch/x86/kernel/cpu/topology.c
@@@ -85,15 -85,6 +84,18 @@@ int detect_extended_topology(struct cpu
  	c->apicid = apic->phys_pkg_id(c->initial_apicid, 0);
  
  	c->x86_max_cores = (core_level_siblings / smp_num_siblings);
++<<<<<<< HEAD
 +
 +	if (!printed) {
 +		printk(KERN_INFO  "CPU: Physical Processor ID: %d\n",
 +		       c->phys_proc_id);
 +		if (c->x86_max_cores > 1)
 +			printk(KERN_INFO  "CPU: Processor Core ID: %d\n",
 +			       c->cpu_core_id);
 +		printed = 1;
 +	}
++=======
++>>>>>>> 55e6d279abd9 (x86/cpu: Remove the pointless CPU printout)
  #endif
  	return 0;
  }
* Unmerged path arch/x86/kernel/cpu/common.c
* Unmerged path arch/x86/kernel/cpu/topology.c
