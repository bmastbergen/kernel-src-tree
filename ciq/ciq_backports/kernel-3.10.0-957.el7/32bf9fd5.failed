usb-storage: make use of srb local variable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alan Stern <stern@rowland.harvard.edu>
commit 32bf9fd50ff439184ddcf925cfb3c6bc0138f7c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/32bf9fd5.failed

Commit 8b52291a0743 ("usb-storage: fix deadlock involving host lock
and scsi_done") added a local variable to usb_stor_control_thread() in
the usb-storage driver.  This local variable holds the value of
us->srb, for use after the host lock has been released.

But as long as we have the value in a local variable, we may as well
use it instead of dereferencing the us pointer all over the place.
This patch makes no functional change; it just makes the code a little
shorter and a little neater.

	Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 32bf9fd50ff439184ddcf925cfb3c6bc0138f7c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/storage/usb.c
diff --cc drivers/usb/storage/usb.c
index 8cd6d3d82e0f,1ae2b8554a88..000000000000
--- a/drivers/usb/storage/usb.c
+++ b/drivers/usb/storage/usb.c
@@@ -360,17 -360,19 +360,31 @@@ static int usb_stor_control_thread(voi
  		 * reject if target != 0 or if LUN is higher than
  		 * the maximum known LUN
  		 */
- 		else if (us->srb->device->id &&
+ 		else if (srb->device->id &&
  				!(us->fflags & US_FL_SCM_MULT_TARG)) {
++<<<<<<< HEAD
 +			usb_stor_dbg(us, "Bad target number (%d:%d)\n",
 +				     us->srb->device->id, us->srb->device->lun);
 +			us->srb->result = DID_BAD_TARGET << 16;
 +		}
 +
 +		else if (us->srb->device->lun > us->max_lun) {
 +			usb_stor_dbg(us, "Bad LUN (%d:%d)\n",
 +				     us->srb->device->id, us->srb->device->lun);
 +			us->srb->result = DID_BAD_TARGET << 16;
++=======
+ 			usb_stor_dbg(us, "Bad target number (%d:%llu)\n",
+ 				     srb->device->id,
+ 				     srb->device->lun);
+ 			srb->result = DID_BAD_TARGET << 16;
+ 		}
+ 
+ 		else if (srb->device->lun > us->max_lun) {
+ 			usb_stor_dbg(us, "Bad LUN (%d:%llu)\n",
+ 				     srb->device->id,
+ 				     srb->device->lun);
+ 			srb->result = DID_BAD_TARGET << 16;
++>>>>>>> 32bf9fd50ff4 (usb-storage: make use of srb local variable)
  		}
  
  		/*
* Unmerged path drivers/usb/storage/usb.c
