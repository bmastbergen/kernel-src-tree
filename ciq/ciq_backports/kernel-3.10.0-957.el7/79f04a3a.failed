i40e: convert i40e_get_settings_link_up to new API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alan Brady <alan.brady@intel.com>
commit 79f04a3aba91531a3b979f6ebd846367a664638f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/79f04a3a.failed

This removes references to old ethtool API macros and functions in
i40e_get_settings_link_up as part of the process of converting to the
new API.  The new API also allows us to provide more explicit support
for new 25G and 10G PHY types so some of the PHY types have been
adjusted where necessary as well.

	Signed-off-by: Alan Brady <alan.brady@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 79f04a3aba91531a3b979f6ebd846367a664638f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ethtool.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index da5718e0e5d6,913ba91fac6c..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@@ -571,26 -612,54 +612,62 @@@ static void i40e_get_settings_link_up(s
  	case I40E_PHY_TYPE_10GBASE_KR:
  	case I40E_PHY_TYPE_10GBASE_KX4:
  	case I40E_PHY_TYPE_1000BASE_KX:
- 		supported |= SUPPORTED_40000baseKR4_Full |
- 			     SUPPORTED_20000baseKR2_Full |
- 			     SUPPORTED_10000baseKR_Full |
- 			     SUPPORTED_10000baseKX4_Full |
- 			     SUPPORTED_1000baseKX_Full |
- 			     SUPPORTED_Autoneg;
- 		advertising |= ADVERTISED_40000baseKR4_Full |
- 			       ADVERTISED_20000baseKR2_Full |
- 			       ADVERTISED_10000baseKR_Full |
- 			       ADVERTISED_10000baseKX4_Full |
- 			       ADVERTISED_1000baseKX_Full |
- 			       ADVERTISED_Autoneg;
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     40000baseKR4_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     25000baseKR_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     20000baseKR2_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     10000baseKR_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     10000baseKX4_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     1000baseKX_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported, Autoneg);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     40000baseKR4_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     25000baseKR_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     20000baseKR2_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     10000baseKR_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     10000baseKX4_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     1000baseKX_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising, Autoneg);
  		break;
- 	case I40E_PHY_TYPE_25GBASE_KR:
  	case I40E_PHY_TYPE_25GBASE_CR:
++<<<<<<< HEAD
 +	case I40E_PHY_TYPE_25GBASE_SR:
 +	case I40E_PHY_TYPE_25GBASE_LR:
 +		supported = SUPPORTED_Autoneg;
 +		advertising = ADVERTISED_Autoneg;
 +		/* TODO: add speeds when ethtool is ready to support*/
++=======
+ 		ethtool_link_ksettings_add_link_mode(ks, supported, Autoneg);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising, Autoneg);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     25000baseCR_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     25000baseCR_Full);
+ 		break;
+ 	case I40E_PHY_TYPE_25GBASE_AOC:
+ 	case I40E_PHY_TYPE_25GBASE_ACC:
+ 		ethtool_link_ksettings_add_link_mode(ks, supported, Autoneg);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising, Autoneg);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     25000baseCR_Full);
+ 
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     25000baseCR_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, supported,
+ 						     10000baseCR_Full);
+ 		ethtool_link_ksettings_add_link_mode(ks, advertising,
+ 						     10000baseCR_Full);
++>>>>>>> 79f04a3aba91 (i40e: convert i40e_get_settings_link_up to new API)
  		break;
  	default:
  		/* if we got here and link is up something bad is afoot */
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ethtool.c
