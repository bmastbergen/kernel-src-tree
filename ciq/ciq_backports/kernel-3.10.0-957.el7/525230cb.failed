drm/nouveau/gr/gf100-: delete duplicated init code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 525230cb204db5edb0ffc42e324612809c663c75
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/525230cb.failed

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 525230cb204db5edb0ffc42e324612809c663c75)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
#	drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
index a36e45a4a635,9ed51dc851df..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
@@@ -140,22 -156,47 +140,25 @@@ struct gf100_gr_func 
  	struct nvkm_sclass sclass[];
  };
  
 -int gf100_gr_rops(struct gf100_gr *);
  int gf100_gr_init(struct gf100_gr *);
 -void gf100_gr_init_vsc_stream_master(struct gf100_gr *);
 -void gf100_gr_init_zcull(struct gf100_gr *);
 -void gf100_gr_init_num_active_ltcs(struct gf100_gr *);
 -void gf100_gr_init_fecs_exceptions(struct gf100_gr *);
 -void gf100_gr_init_40601c(struct gf100_gr *);
 -void gf100_gr_init_419cc0(struct gf100_gr *);
 -void gf100_gr_init_419eb4(struct gf100_gr *);
 -void gf100_gr_init_tex_hww_esr(struct gf100_gr *, int, int);
 -void gf100_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -void gf100_gr_init_400054(struct gf100_gr *);
 -
 -void gf117_gr_init_zcull(struct gf100_gr *);
 +int gf100_gr_rops(struct gf100_gr *);
  
++<<<<<<< HEAD
 +int gk104_gr_init(struct gf100_gr *);
++=======
+ void gk104_gr_init_vsc_stream_master(struct gf100_gr *);
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  void gk104_gr_init_rop_active_fbps(struct gf100_gr *);
  void gk104_gr_init_ppc_exceptions(struct gf100_gr *);
 -void gk104_gr_init_sked_hww_esr(struct gf100_gr *);
 -
 -void gk110_gr_init_419eb4(struct gf100_gr *);
 -
 -void gm107_gr_init_504430(struct gf100_gr *, int, int);
 -void gm107_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -void gm107_gr_init_400054(struct gf100_gr *);
  
  int gk20a_gr_init(struct gf100_gr *);
  
 +int gm200_gr_init(struct gf100_gr *);
  int gm200_gr_rops(struct gf100_gr *);
 -void gm200_gr_init_num_active_ltcs(struct gf100_gr *);
 -void gm200_gr_init_ds_hww_esr_2(struct gf100_gr *);
  
- int gp100_gr_init(struct gf100_gr *);
  void gp100_gr_init_rop_active_fbps(struct gf100_gr *);
 -void gp100_gr_init_fecs_exceptions(struct gf100_gr *);
 -void gp100_gr_init_shader_exceptions(struct gf100_gr *, int, int);
 -
 -void gp102_gr_init_swdx_pes_mask(struct gf100_gr *);
  
  #define gf100_gr_chan(p) container_of((p), struct gf100_gr_chan, object)
 -#include <core/object.h>
  
  struct gf100_gr_chan {
  	struct nvkm_object object;
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
index f9a17b27d5b8,2e5c48b61ac8..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
@@@ -203,118 -419,11 +203,126 @@@ gk104_gr_init_ppc_exceptions(struct gf1
  	}
  }
  
++<<<<<<< HEAD
 +int
 +gk104_gr_init(struct gf100_gr *gr)
 +{
 +	struct nvkm_device *device = gr->base.engine.subdev.device;
 +	struct nvkm_fb *fb = device->fb;
 +	const u32 magicgpc918 = DIV_ROUND_UP(0x00800000, gr->tpc_total);
 +	u32 data[TPC_MAX / 8] = {};
 +	u8  tpcnr[GPC_MAX];
 +	int gpc, tpc, rop;
 +	int i;
 +
 +	nvkm_wr32(device, GPC_BCAST(0x0880), 0x00000000);
 +	nvkm_wr32(device, GPC_BCAST(0x08a4), 0x00000000);
 +	nvkm_wr32(device, GPC_BCAST(0x0888), 0x00000000);
 +	nvkm_wr32(device, GPC_BCAST(0x088c), 0x00000000);
 +	nvkm_wr32(device, GPC_BCAST(0x0890), 0x00000000);
 +	nvkm_wr32(device, GPC_BCAST(0x0894), 0x00000000);
 +	nvkm_wr32(device, GPC_BCAST(0x08b4), nvkm_memory_addr(fb->mmu_wr) >> 8);
 +	nvkm_wr32(device, GPC_BCAST(0x08b8), nvkm_memory_addr(fb->mmu_rd) >> 8);
 +
 +	gf100_gr_mmio(gr, gr->func->mmio);
 +
 +	nvkm_wr32(device, GPC_UNIT(0, 0x3018), 0x00000001);
 +
 +	memset(data, 0x00, sizeof(data));
 +	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
 +	for (i = 0, gpc = -1; i < gr->tpc_total; i++) {
 +		do {
 +			gpc = (gpc + 1) % gr->gpc_nr;
 +		} while (!tpcnr[gpc]);
 +		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
 +
 +		data[i / 8] |= tpc << ((i % 8) * 4);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x0980), data[0]);
 +	nvkm_wr32(device, GPC_BCAST(0x0984), data[1]);
 +	nvkm_wr32(device, GPC_BCAST(0x0988), data[2]);
 +	nvkm_wr32(device, GPC_BCAST(0x098c), data[3]);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 +			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 +							 gr->tpc_total);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +
 +	gr->func->init_rop_active_fbps(gr);
 +
 +	nvkm_wr32(device, 0x400500, 0x00010001);
 +
 +	nvkm_wr32(device, 0x400100, 0xffffffff);
 +	nvkm_wr32(device, 0x40013c, 0xffffffff);
 +	nvkm_wr32(device, 0x400124, 0x00000002);
 +
 +	nvkm_wr32(device, 0x409ffc, 0x00000000);
 +	nvkm_wr32(device, 0x409c14, 0x00003e3e);
 +	nvkm_wr32(device, 0x409c24, 0x000f0001);
 +	nvkm_wr32(device, 0x404000, 0xc0000000);
 +	nvkm_wr32(device, 0x404600, 0xc0000000);
 +	nvkm_wr32(device, 0x408030, 0xc0000000);
 +	nvkm_wr32(device, 0x404490, 0xc0000000);
 +	nvkm_wr32(device, 0x406018, 0xc0000000);
 +	nvkm_wr32(device, 0x407020, 0x40000000);
 +	nvkm_wr32(device, 0x405840, 0xc0000000);
 +	nvkm_wr32(device, 0x405844, 0x00ffffff);
 +	nvkm_mask(device, 0x419cc0, 0x00000008, 0x00000008);
 +	nvkm_mask(device, 0x419eb4, 0x00001000, 0x00001000);
 +
 +	gr->func->init_ppc_exceptions(gr);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0420), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0900), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x1028), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0824), 0xc0000000);
 +		for (tpc = 0; tpc < gr->tpc_nr[gpc]; tpc++) {
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x508), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x50c), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x224), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x48c), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x084), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x001ffffe);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x0000000f);
 +		}
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c90), 0xffffffff);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c94), 0xffffffff);
 +	}
 +
 +	for (rop = 0; rop < gr->rop_nr; rop++) {
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x144), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x070), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x204), 0xffffffff);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x208), 0xffffffff);
 +	}
 +
 +	nvkm_wr32(device, 0x400108, 0xffffffff);
 +	nvkm_wr32(device, 0x400138, 0xffffffff);
 +	nvkm_wr32(device, 0x400118, 0xffffffff);
 +	nvkm_wr32(device, 0x400130, 0xffffffff);
 +	nvkm_wr32(device, 0x40011c, 0xffffffff);
 +	nvkm_wr32(device, 0x400134, 0xffffffff);
 +
 +	nvkm_wr32(device, 0x400054, 0x34ce3464);
 +
 +	gf100_gr_zbc_init(gr);
 +
 +	return gf100_gr_init_ctxctl(gr);
++=======
+ void
+ gk104_gr_init_vsc_stream_master(struct gf100_gr *gr)
+ {
+ 	struct nvkm_device *device = gr->base.engine.subdev.device;
+ 	nvkm_wr32(device, GPC_UNIT(0, 0x3018), 0x00000001);
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  }
  
  #include "fuc/hubgk104.fuc3.h"
@@@ -339,9 -448,20 +347,17 @@@ gk104_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gk104_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gk104_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gf100_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
  	.mmio = gk104_gr_pack_mmio,
  	.fecs.ucode = &gk104_gr_fecs_ucode,
  	.gpccs.ucode = &gk104_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
index f31b171a4102,9adb55f658c6..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
@@@ -180,11 -334,36 +180,19 @@@ gk110_gr_gpccs_ucode = 
  	.data.size = sizeof(gk110_grgpc_data),
  };
  
 -void
 -gk110_gr_init_419eb4(struct gf100_gr *gr)
 -{
 -	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	nvkm_mask(device, 0x419eb4, 0x00001000, 0x00001000);
 -	nvkm_mask(device, 0x419eb4, 0x00002000, 0x00002000);
 -	nvkm_mask(device, 0x419eb4, 0x00004000, 0x00004000);
 -	nvkm_mask(device, 0x419eb4, 0x00008000, 0x00008000);
 -	nvkm_mask(device, 0x419eb4, 0x00001000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00002000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00004000, 0x00000000);
 -	nvkm_mask(device, 0x419eb4, 0x00008000, 0x00000000);
 -}
 -
  static const struct gf100_gr_func
  gk110_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gk110_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
  	.mmio = gk110_gr_pack_mmio,
  	.fecs.ucode = &gk110_gr_fecs_ucode,
  	.gpccs.ucode = &gk110_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
index d76dd178007f,f848f1578cd3..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
@@@ -102,9 -102,20 +102,17 @@@ gk110b_gr_pack_mmio[] = 
  
  static const struct gf100_gr_func
  gk110b_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419eb4 = gk110_gr_init_419eb4,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
  	.mmio = gk110b_gr_pack_mmio,
  	.fecs.ucode = &gk110_gr_fecs_ucode,
  	.gpccs.ucode = &gk110_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
index 14bbe6ed02a9,9c678f17b2fe..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
@@@ -161,9 -161,19 +161,17 @@@ gk208_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gk208_gr = {
++<<<<<<< HEAD
 +	.init = gk104_gr_init,
++=======
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gf100_gr_init_gpc_mmu,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_shader_exceptions = gf100_gr_init_shader_exceptions,
 -	.init_400054 = gf100_gr_init_400054,
  	.mmio = gk208_gr_pack_mmio,
  	.fecs.ucode = &gk208_gr_fecs_ucode,
  	.gpccs.ucode = &gk208_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
index 2c67fac576d1,c598fa5a68e0..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
@@@ -324,99 -367,6 +324,102 @@@ gm107_gr_init(struct gf100_gr *gr
  	nvkm_wr32(device, GPC_BCAST(0x0894), 0x00000000);
  	nvkm_wr32(device, GPC_BCAST(0x08b4), nvkm_memory_addr(fb->mmu_wr) >> 8);
  	nvkm_wr32(device, GPC_BCAST(0x08b8), nvkm_memory_addr(fb->mmu_rd) >> 8);
++<<<<<<< HEAD
 +
 +	gf100_gr_mmio(gr, gr->func->mmio);
 +
 +	gm107_gr_init_bios(gr);
 +
 +	nvkm_wr32(device, GPC_UNIT(0, 0x3018), 0x00000001);
 +
 +	memset(data, 0x00, sizeof(data));
 +	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
 +	for (i = 0, gpc = -1; i < gr->tpc_total; i++) {
 +		do {
 +			gpc = (gpc + 1) % gr->gpc_nr;
 +		} while (!tpcnr[gpc]);
 +		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
 +
 +		data[i / 8] |= tpc << ((i % 8) * 4);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x0980), data[0]);
 +	nvkm_wr32(device, GPC_BCAST(0x0984), data[1]);
 +	nvkm_wr32(device, GPC_BCAST(0x0988), data[2]);
 +	nvkm_wr32(device, GPC_BCAST(0x098c), data[3]);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 +			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 +							 gr->tpc_total);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +
 +	gr->func->init_rop_active_fbps(gr);
 +
 +	nvkm_wr32(device, 0x400500, 0x00010001);
 +
 +	nvkm_wr32(device, 0x400100, 0xffffffff);
 +	nvkm_wr32(device, 0x40013c, 0xffffffff);
 +	nvkm_wr32(device, 0x400124, 0x00000002);
 +	nvkm_wr32(device, 0x409c24, 0x000e0000);
 +
 +	nvkm_wr32(device, 0x404000, 0xc0000000);
 +	nvkm_wr32(device, 0x404600, 0xc0000000);
 +	nvkm_wr32(device, 0x408030, 0xc0000000);
 +	nvkm_wr32(device, 0x404490, 0xc0000000);
 +	nvkm_wr32(device, 0x406018, 0xc0000000);
 +	nvkm_wr32(device, 0x407020, 0x40000000);
 +	nvkm_wr32(device, 0x405840, 0xc0000000);
 +	nvkm_wr32(device, 0x405844, 0x00ffffff);
 +	nvkm_mask(device, 0x419cc0, 0x00000008, 0x00000008);
 +
 +	gr->func->init_ppc_exceptions(gr);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0420), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0900), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x1028), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0824), 0xc0000000);
 +		for (tpc = 0; tpc < gr->tpc_nr[gpc]; tpc++) {
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x508), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x50c), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x224), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x48c), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x084), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x430), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x00dffffe);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x00000005);
 +		}
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c90), 0xffffffff);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c94), 0xffffffff);
 +	}
 +
 +	for (rop = 0; rop < gr->rop_nr; rop++) {
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x144), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x070), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x204), 0xffffffff);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x208), 0xffffffff);
 +	}
 +
 +	nvkm_wr32(device, 0x400108, 0xffffffff);
 +	nvkm_wr32(device, 0x400138, 0xffffffff);
 +	nvkm_wr32(device, 0x400118, 0xffffffff);
 +	nvkm_wr32(device, 0x400130, 0xffffffff);
 +	nvkm_wr32(device, 0x40011c, 0xffffffff);
 +	nvkm_wr32(device, 0x400134, 0xffffffff);
 +
 +	nvkm_wr32(device, 0x400054, 0x2c350f63);
 +
 +	gf100_gr_zbc_init(gr);
 +
 +	return gf100_gr_init_ctxctl(gr);
++=======
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  }
  
  #include "fuc/hubgm107.fuc5.h"
@@@ -441,9 -391,22 +444,18 @@@ gm107_gr_gpccs_ucode = 
  
  static const struct gf100_gr_func
  gm107_gr = {
++<<<<<<< HEAD
 +	.init = gm107_gr_init,
++=======
+ 	.init = gf100_gr_init,
+ 	.init_gpc_mmu = gm107_gr_init_gpc_mmu,
+ 	.init_bios = gm107_gr_init_bios,
+ 	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
+ 	.init_zcull = gf117_gr_init_zcull,
+ 	.init_num_active_ltcs = gf100_gr_init_num_active_ltcs,
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  	.init_rop_active_fbps = gk104_gr_init_rop_active_fbps,
 -	.init_bios_2 = gm107_gr_init_bios_2,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gm107_gr_init_shader_exceptions,
 -	.init_400054 = gm107_gr_init_400054,
  	.mmio = gm107_gr_pack_mmio,
  	.fecs.ucode = &gm107_gr_fecs_ucode,
  	.gpccs.ucode = &gm107_gr_gpccs_ucode,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
index 6435f1257572,4dcb56bfbca1..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
@@@ -61,113 -77,6 +61,116 @@@ gm200_gr_init_rop_active_fbps(struct gf
  	nvkm_mask(device, 0x408958, 0x0000000f, fbp_count); /* crop */
  }
  
++<<<<<<< HEAD
 +int
 +gm200_gr_init(struct gf100_gr *gr)
 +{
 +	struct nvkm_device *device = gr->base.engine.subdev.device;
 +	const u32 magicgpc918 = DIV_ROUND_UP(0x00800000, gr->tpc_total);
 +	u32 data[TPC_MAX / 8] = {};
 +	u8  tpcnr[GPC_MAX];
 +	int gpc, tpc, rop;
 +	int i;
 +
 +	gr->func->init_gpc_mmu(gr);
 +
 +	gf100_gr_mmio(gr, gr->fuc_sw_nonctx);
 +
 +	gm107_gr_init_bios(gr);
 +
 +	nvkm_wr32(device, GPC_UNIT(0, 0x3018), 0x00000001);
 +
 +	memset(data, 0x00, sizeof(data));
 +	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
 +	for (i = 0, gpc = -1; i < gr->tpc_total; i++) {
 +		do {
 +			gpc = (gpc + 1) % gr->gpc_nr;
 +		} while (!tpcnr[gpc]);
 +		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
 +
 +		data[i / 8] |= tpc << ((i % 8) * 4);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x0980), data[0]);
 +	nvkm_wr32(device, GPC_BCAST(0x0984), data[1]);
 +	nvkm_wr32(device, GPC_BCAST(0x0988), data[2]);
 +	nvkm_wr32(device, GPC_BCAST(0x098c), data[3]);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 +			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 +							 gr->tpc_total);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +	nvkm_wr32(device, GPC_BCAST(0x033c), nvkm_rd32(device, 0x100804));
 +
 +	gr->func->init_rop_active_fbps(gr);
 +
 +	nvkm_wr32(device, 0x400500, 0x00010001);
 +	nvkm_wr32(device, 0x400100, 0xffffffff);
 +	nvkm_wr32(device, 0x40013c, 0xffffffff);
 +	nvkm_wr32(device, 0x400124, 0x00000002);
 +	nvkm_wr32(device, 0x409c24, 0x000e0000);
 +	nvkm_wr32(device, 0x405848, 0xc0000000);
 +	nvkm_wr32(device, 0x40584c, 0x00000001);
 +	nvkm_wr32(device, 0x404000, 0xc0000000);
 +	nvkm_wr32(device, 0x404600, 0xc0000000);
 +	nvkm_wr32(device, 0x408030, 0xc0000000);
 +	nvkm_wr32(device, 0x404490, 0xc0000000);
 +	nvkm_wr32(device, 0x406018, 0xc0000000);
 +	nvkm_wr32(device, 0x407020, 0x40000000);
 +	nvkm_wr32(device, 0x405840, 0xc0000000);
 +	nvkm_wr32(device, 0x405844, 0x00ffffff);
 +	nvkm_mask(device, 0x419cc0, 0x00000008, 0x00000008);
 +
 +	gr->func->init_ppc_exceptions(gr);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0420), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0900), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x1028), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0824), 0xc0000000);
 +		for (tpc = 0; tpc < gr->tpc_nr[gpc]; tpc++) {
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x508), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x50c), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x224), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x48c), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x084), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x430), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x00dffffe);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x00000005);
 +		}
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c90), 0xffffffff);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c94), 0xffffffff);
 +	}
 +
 +	for (rop = 0; rop < gr->rop_nr; rop++) {
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x144), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x070), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x204), 0xffffffff);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x208), 0xffffffff);
 +	}
 +
 +	nvkm_wr32(device, 0x400108, 0xffffffff);
 +	nvkm_wr32(device, 0x400138, 0xffffffff);
 +	nvkm_wr32(device, 0x400118, 0xffffffff);
 +	nvkm_wr32(device, 0x400130, 0xffffffff);
 +	nvkm_wr32(device, 0x40011c, 0xffffffff);
 +	nvkm_wr32(device, 0x400134, 0xffffffff);
 +
 +	nvkm_wr32(device, 0x400054, 0x2c350f63);
 +
 +	gf100_gr_zbc_init(gr);
 +
 +	return gf100_gr_init_ctxctl(gr);
 +}
 +
++=======
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  int
  gm200_gr_new_(const struct gf100_gr_func *func, struct nvkm_device *device,
  	      int index, struct nvkm_gr **pgr)
@@@ -208,10 -117,22 +211,10 @@@
  
  static const struct gf100_gr_func
  gm200_gr = {
- 	.init = gm200_gr_init,
+ 	.init = gf100_gr_init,
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_bios = gm107_gr_init_bios,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gm200_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gf100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gm107_gr_init_shader_exceptions,
 -	.init_400054 = gm107_gr_init_400054,
  	.rops = gm200_gr_rops,
  	.ppc_nr = 2,
  	.grctx = &gm200_grctx,
diff --cc drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
index 867a5f7cc5bc,cc507e830511..000000000000
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
@@@ -31,138 -31,54 +31,141 @@@
   ******************************************************************************/
  
  void
 -gp100_gr_init_shader_exceptions(struct gf100_gr *gr, int gpc, int tpc)
 +gp100_gr_init_rop_active_fbps(struct gf100_gr *gr)
  {
  	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x00dffffe);
 -	nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x00000105);
 +	/*XXX: otherwise identical to gm200 aside from mask.. do everywhere? */
 +	const u32 fbp_count = nvkm_rd32(device, 0x12006c) & 0x0000000f;
 +	nvkm_mask(device, 0x408850, 0x0000000f, fbp_count); /* zrop */
 +	nvkm_mask(device, 0x408958, 0x0000000f, fbp_count); /* crop */
  }
  
 -static void
 -gp100_gr_init_419c9c(struct gf100_gr *gr)
++<<<<<<< HEAD
 +void
 +gp100_gr_init_num_active_ltcs(struct gf100_gr *gr)
  {
  	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	nvkm_mask(device, 0x419c9c, 0x00010000, 0x00010000);
 -	nvkm_mask(device, 0x419c9c, 0x00020000, 0x00020000);
 -}
  
 -void
 -gp100_gr_init_fecs_exceptions(struct gf100_gr *gr)
 -{
 -	nvkm_wr32(gr->base.engine.subdev.device, 0x409c24, 0x000f0002);
 +	nvkm_wr32(device, GPC_BCAST(0x08ac), nvkm_rd32(device, 0x100800));
 +	nvkm_wr32(device, GPC_BCAST(0x033c), nvkm_rd32(device, 0x100804));
  }
  
 -void
 -gp100_gr_init_rop_active_fbps(struct gf100_gr *gr)
 +int
 +gp100_gr_init(struct gf100_gr *gr)
  {
  	struct nvkm_device *device = gr->base.engine.subdev.device;
 -	/*XXX: otherwise identical to gm200 aside from mask.. do everywhere? */
 -	const u32 fbp_count = nvkm_rd32(device, 0x12006c) & 0x0000000f;
 -	nvkm_mask(device, 0x408850, 0x0000000f, fbp_count); /* zrop */
 -	nvkm_mask(device, 0x408958, 0x0000000f, fbp_count); /* crop */
 +	const u32 magicgpc918 = DIV_ROUND_UP(0x00800000, gr->tpc_total);
 +	u32 data[TPC_MAX / 8] = {};
 +	u8  tpcnr[GPC_MAX];
 +	int gpc, tpc, rop;
 +	int i;
 +
 +	gr->func->init_gpc_mmu(gr);
 +
 +	gf100_gr_mmio(gr, gr->fuc_sw_nonctx);
 +
 +	nvkm_wr32(device, GPC_UNIT(0, 0x3018), 0x00000001);
 +
 +	memset(data, 0x00, sizeof(data));
 +	memcpy(tpcnr, gr->tpc_nr, sizeof(gr->tpc_nr));
 +	for (i = 0, gpc = -1; i < gr->tpc_total; i++) {
 +		do {
 +			gpc = (gpc + 1) % gr->gpc_nr;
 +		} while (!tpcnr[gpc]);
 +		tpc = gr->tpc_nr[gpc] - tpcnr[gpc]--;
 +
 +		data[i / 8] |= tpc << ((i % 8) * 4);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x0980), data[0]);
 +	nvkm_wr32(device, GPC_BCAST(0x0984), data[1]);
 +	nvkm_wr32(device, GPC_BCAST(0x0988), data[2]);
 +	nvkm_wr32(device, GPC_BCAST(0x098c), data[3]);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0914),
 +			  gr->screen_tile_row_offset << 8 | gr->tpc_nr[gpc]);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0910), 0x00040000 |
 +							 gr->tpc_total);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0918), magicgpc918);
 +	}
 +
 +	nvkm_wr32(device, GPC_BCAST(0x3fd4), magicgpc918);
 +	gr->func->init_num_active_ltcs(gr);
 +
 +	gr->func->init_rop_active_fbps(gr);
 +	if (gr->func->init_swdx_pes_mask)
 +		gr->func->init_swdx_pes_mask(gr);
 +
 +	nvkm_wr32(device, 0x400500, 0x00010001);
 +	nvkm_wr32(device, 0x400100, 0xffffffff);
 +	nvkm_wr32(device, 0x40013c, 0xffffffff);
 +	nvkm_wr32(device, 0x400124, 0x00000002);
 +	nvkm_wr32(device, 0x409c24, 0x000f0002);
 +	nvkm_wr32(device, 0x405848, 0xc0000000);
 +	nvkm_mask(device, 0x40584c, 0x00000000, 0x00000001);
 +	nvkm_wr32(device, 0x404000, 0xc0000000);
 +	nvkm_wr32(device, 0x404600, 0xc0000000);
 +	nvkm_wr32(device, 0x408030, 0xc0000000);
 +	nvkm_wr32(device, 0x404490, 0xc0000000);
 +	nvkm_wr32(device, 0x406018, 0xc0000000);
 +	nvkm_wr32(device, 0x407020, 0x40000000);
 +	nvkm_wr32(device, 0x405840, 0xc0000000);
 +	nvkm_wr32(device, 0x405844, 0x00ffffff);
 +	nvkm_mask(device, 0x419cc0, 0x00000008, 0x00000008);
 +
 +	nvkm_mask(device, 0x419c9c, 0x00010000, 0x00010000);
 +	nvkm_mask(device, 0x419c9c, 0x00020000, 0x00020000);
 +
 +	gr->func->init_ppc_exceptions(gr);
 +
 +	for (gpc = 0; gpc < gr->gpc_nr; gpc++) {
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0420), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0900), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x1028), 0xc0000000);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x0824), 0xc0000000);
 +		for (tpc = 0; tpc < gr->tpc_nr[gpc]; tpc++) {
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x508), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x50c), 0xffffffff);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x224), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x48c), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x084), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x430), 0xc0000000);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x644), 0x00dffffe);
 +			nvkm_wr32(device, TPC_UNIT(gpc, tpc, 0x64c), 0x00000105);
 +		}
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c90), 0xffffffff);
 +		nvkm_wr32(device, GPC_UNIT(gpc, 0x2c94), 0xffffffff);
 +	}
 +
 +	for (rop = 0; rop < gr->rop_nr; rop++) {
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x144), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x070), 0x40000000);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x204), 0xffffffff);
 +		nvkm_wr32(device, ROP_UNIT(rop, 0x208), 0xffffffff);
 +	}
 +
 +	nvkm_wr32(device, 0x400108, 0xffffffff);
 +	nvkm_wr32(device, 0x400138, 0xffffffff);
 +	nvkm_wr32(device, 0x400118, 0xffffffff);
 +	nvkm_wr32(device, 0x400130, 0xffffffff);
 +	nvkm_wr32(device, 0x40011c, 0xffffffff);
 +	nvkm_wr32(device, 0x400134, 0xffffffff);
 +
 +	gf100_gr_zbc_init(gr);
 +
 +	return gf100_gr_init_ctxctl(gr);
  }
  
++=======
++>>>>>>> 525230cb204d (drm/nouveau/gr/gf100-: delete duplicated init code)
  static const struct gf100_gr_func
  gp100_gr = {
- 	.init = gp100_gr_init,
+ 	.init = gf100_gr_init,
  	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 -	.init_vsc_stream_master = gk104_gr_init_vsc_stream_master,
 -	.init_zcull = gf117_gr_init_zcull,
 -	.init_num_active_ltcs = gm200_gr_init_num_active_ltcs,
  	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 -	.init_fecs_exceptions = gp100_gr_init_fecs_exceptions,
 -	.init_ds_hww_esr_2 = gm200_gr_init_ds_hww_esr_2,
 -	.init_sked_hww_esr = gk104_gr_init_sked_hww_esr,
 -	.init_419cc0 = gf100_gr_init_419cc0,
 -	.init_419c9c = gp100_gr_init_419c9c,
  	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
 -	.init_tex_hww_esr = gf100_gr_init_tex_hww_esr,
 -	.init_504430 = gm107_gr_init_504430,
 -	.init_shader_exceptions = gp100_gr_init_shader_exceptions,
 +	.init_num_active_ltcs = gp100_gr_init_num_active_ltcs,
  	.rops = gm200_gr_rops,
  	.ppc_nr = 2,
  	.grctx = &gp100_grctx,
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gf100.h
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk104.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk110b.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gk208.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gm107.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gm200.c
* Unmerged path drivers/gpu/drm/nouveau/nvkm/engine/gr/gp100.c
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
index 61e3a0b08559..9c2e20059815 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp102.c
@@ -42,7 +42,7 @@ gp102_gr_init_swdx_pes_mask(struct gf100_gr *gr)
 
 static const struct gf100_gr_func
 gp102_gr = {
-	.init = gp100_gr_init,
+	.init = gf100_gr_init,
 	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
index f7272323f694..bb0a8c6ada65 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp107.c
@@ -28,7 +28,7 @@
 
 static const struct gf100_gr_func
 gp107_gr = {
-	.init = gp100_gr_init,
+	.init = gf100_gr_init,
 	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
diff --git a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
index 5f3d161a0842..28afd4157dfe 100644
--- a/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
+++ b/drivers/gpu/drm/nouveau/nvkm/engine/gr/gp10b.c
@@ -35,7 +35,7 @@ gp10b_gr_init_num_active_ltcs(struct gf100_gr *gr)
 
 static const struct gf100_gr_func
 gp10b_gr = {
-	.init = gp100_gr_init,
+	.init = gf100_gr_init,
 	.init_gpc_mmu = gm200_gr_init_gpc_mmu,
 	.init_rop_active_fbps = gp100_gr_init_rop_active_fbps,
 	.init_ppc_exceptions = gk104_gr_init_ppc_exceptions,
