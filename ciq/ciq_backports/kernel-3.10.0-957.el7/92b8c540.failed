platform/x86: dell-wmi-descriptor: split WMI descriptor into it's own driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [platform] x86: dell-wmi-descriptor: split WMI descriptor into it's own driver (Jarod Wilson) [1526317]
Rebuild_FUZZ: 93.71%
commit-author Mario Limonciello <mario.limonciello@dell.com>
commit 92b8c540bce7b1662212dff35f503f5b1266725b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/92b8c540.failed

All communication on individual GUIDs should occur in separate drivers.
Allowing a driver to communicate with the bus to another GUID is just
a hack that discourages drivers to adopt the bus model.

The information found from the WMI descriptor driver is now exported
for use by other drivers.

	Signed-off-by: Mario Limonciello <mario.limonciello@dell.com>
	Reviewed-by: Edward O'Callaghan <quasisec@google.com>
	Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>
(cherry picked from commit 92b8c540bce7b1662212dff35f503f5b1266725b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	MAINTAINERS
#	drivers/platform/x86/Kconfig
#	drivers/platform/x86/dell-wmi.c
diff --cc MAINTAINERS
index 28d01d76d545,69a81400cc65..000000000000
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@@ -2603,16 -4013,35 +2603,38 @@@ M:	Pali Rohár <pali.rohar@gmail.com
  S:	Maintained
  F:	drivers/platform/x86/dell-wmi.c
  
++<<<<<<< HEAD
++=======
+ DELL WMI DESCRIPTOR DRIVER
+ M:	Mario Limonciello <mario.limonciello@dell.com>
+ S:	Maintained
+ F:	drivers/platform/x86/dell-wmi-descriptor.c
+ 
+ DELTA ST MEDIA DRIVER
+ M:	Hugues Fruchet <hugues.fruchet@st.com>
+ L:	linux-media@vger.kernel.org
+ T:	git git://linuxtv.org/media_tree.git
+ W:	https://linuxtv.org
+ S:	Supported
+ F:	drivers/media/platform/sti/delta
+ 
+ DENALI NAND DRIVER
+ M:	Masahiro Yamada <yamada.masahiro@socionext.com>
+ L:	linux-mtd@lists.infradead.org
+ S:	Supported
+ F:	drivers/mtd/nand/denali*
+ 
++>>>>>>> 92b8c540bce7 (platform/x86: dell-wmi-descriptor: split WMI descriptor into it's own driver)
  DESIGNWARE USB2 DRD IP DRIVER
 -M:	John Youn <johnyoun@synopsys.com>
 +M:	Paul Zimmerman <paulz@synopsys.com>
  L:	linux-usb@vger.kernel.org
 -T:	git git://git.kernel.org/pub/scm/linux/kernel/git/balbi/usb.git
  S:	Maintained
 -F:	drivers/usb/dwc2/
 +F:	drivers/staging/dwc2/
  
  DESIGNWARE USB3 DRD IP DRIVER
 -M:	Felipe Balbi <balbi@kernel.org>
 +M:	Felipe Balbi <balbi@ti.com>
  L:	linux-usb@vger.kernel.org
 +L:	linux-omap@vger.kernel.org
  T:	git git://git.kernel.org/pub/scm/linux/kernel/git/balbi/usb.git
  S:	Maintained
  F:	drivers/usb/dwc3/
diff --cc drivers/platform/x86/Kconfig
index cd2842518f6d,a0babdc5136f..000000000000
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@@ -110,16 -110,19 +110,22 @@@ config DELL_LAPTO
  	select POWER_SUPPLY
  	select LEDS_CLASS
  	select NEW_LEDS
 +	default n
  	---help---
  	This driver adds support for rfkill and backlight control to Dell
 -	laptops (except for some models covered by the Compal driver).
 +	laptops.
  
  config DELL_WMI
 -	tristate "Dell WMI notifications"
 +	tristate "Dell WMI extras"
  	depends on ACPI_WMI
 -	depends on DMI
  	depends on INPUT
++<<<<<<< HEAD
 +	depends on DELL_SMBIOS
++=======
+ 	depends on ACPI_VIDEO || ACPI_VIDEO = n
+ 	select DELL_WMI_DESCRIPTOR
+ 	select DELL_SMBIOS
++>>>>>>> 92b8c540bce7 (platform/x86: dell-wmi-descriptor: split WMI descriptor into it's own driver)
  	select INPUT_SPARSEKMAP
  	---help---
  	  Say Y here if you want to support WMI-based hotkeys on Dell laptops.
diff --cc drivers/platform/x86/dell-wmi.c
index fa90558cb1ae,6d657eb97672..000000000000
--- a/drivers/platform/x86/dell-wmi.c
+++ b/drivers/platform/x86/dell-wmi.c
@@@ -36,7 -36,10 +36,8 @@@
  #include <linux/acpi.h>
  #include <linux/string.h>
  #include <linux/dmi.h>
 -#include <linux/wmi.h>
 -#include <acpi/video.h>
  #include "dell-smbios.h"
+ #include "dell-wmi-descriptor.h"
  
  MODULE_AUTHOR("Matthew Garrett <mjg@redhat.com>");
  MODULE_AUTHOR("Pali Rohár <pali.rohar@gmail.com>");
@@@ -44,10 -47,7 +45,9 @@@ MODULE_DESCRIPTION("Dell laptop WMI hot
  MODULE_LICENSE("GPL");
  
  #define DELL_EVENT_GUID "9DBB5994-A997-11DA-B012-B622A1EF5492"
- #define DELL_DESCRIPTOR_GUID "8D9DDCBC-A997-11DA-B012-B622A1EF5492"
  
 +static int acpi_video;
 +static u32 dell_wmi_interface_version;
  static bool wmi_requires_smbios_request;
  
  MODULE_ALIAS("wmi:"DELL_EVENT_GUID);
@@@ -616,73 -610,14 +616,76 @@@ static int __init dell_wmi_input_setup(
  	return err;
  }
  
 -static void dell_wmi_input_destroy(struct wmi_device *wdev)
 +/*
++<<<<<<< HEAD
 + * Descriptor buffer is 128 byte long and contains:
 + *
 + *       Name             Offset  Length  Value
 + * Vendor Signature          0       4    "DELL"
 + * Object Signature          4       4    " WMI"
 + * WMI Interface Version     8       4    <version>
 + * WMI buffer length        12       4    4096
 + */
 +static int __init dell_wmi_check_descriptor_buffer(void)
  {
 -	struct dell_wmi_priv *priv = dev_get_drvdata(&wdev->dev);
 +	struct acpi_buffer out = { ACPI_ALLOCATE_BUFFER, NULL };
 +	union acpi_object *obj;
 +	acpi_status status;
 +	u32 *buffer;
 +
 +	status = wmi_query_block(DELL_DESCRIPTOR_GUID, 0, &out);
 +	if (ACPI_FAILURE(status)) {
 +		pr_err("Cannot read Dell descriptor buffer - %d\n", status);
 +		return status;
 +	}
  
 -	input_unregister_device(priv->input_dev);
 +	obj = (union acpi_object *)out.pointer;
 +	if (!obj) {
 +		pr_err("Dell descriptor buffer is empty\n");
 +		return -EINVAL;
 +	}
 +
 +	if (obj->type != ACPI_TYPE_BUFFER) {
 +		pr_err("Cannot read Dell descriptor buffer\n");
 +		kfree(obj);
 +		return -EINVAL;
 +	}
 +
 +	if (obj->buffer.length != 128) {
 +		pr_err("Dell descriptor buffer has invalid length (%d)\n",
 +			obj->buffer.length);
 +		if (obj->buffer.length < 16) {
 +			kfree(obj);
 +			return -EINVAL;
 +		}
 +	}
 +
 +	buffer = (u32 *)obj->buffer.pointer;
 +
 +	if (buffer[0] != 0x4C4C4544 && buffer[1] != 0x494D5720)
 +		pr_warn("Dell descriptor buffer has invalid signature (%*ph)\n",
 +			8, buffer);
 +
 +	if (buffer[2] != 0 && buffer[2] != 1)
 +		pr_warn("Dell descriptor buffer has unknown version (%d)\n",
 +			buffer[2]);
 +
 +	if (buffer[3] != 4096)
 +		pr_warn("Dell descriptor buffer has invalid buffer length (%d)\n",
 +			buffer[3]);
 +
 +	dell_wmi_interface_version = buffer[2];
 +
 +	pr_info("Detected Dell WMI interface version %u\n",
 +		dell_wmi_interface_version);
 +
 +	kfree(obj);
 +	return 0;
  }
  
  /*
++=======
++>>>>>>> 92b8c540bce7 (platform/x86: dell-wmi-descriptor: split WMI descriptor into it's own driver)
   * According to Dell SMBIOS documentation:
   *
   * 17  3  Application Program Registration
@@@ -714,6 -649,45 +717,48 @@@ static int dell_wmi_events_set_enabled(
  	return dell_smbios_error(ret);
  }
  
++<<<<<<< HEAD
++=======
+ static int dell_wmi_probe(struct wmi_device *wdev)
+ {
+ 	struct dell_wmi_priv *priv;
+ 
+ 	if (!wmi_has_guid(DELL_WMI_DESCRIPTOR_GUID))
+ 		return -ENODEV;
+ 
+ 	priv = devm_kzalloc(
+ 		&wdev->dev, sizeof(struct dell_wmi_priv), GFP_KERNEL);
+ 	if (!priv)
+ 		return -ENOMEM;
+ 	dev_set_drvdata(&wdev->dev, priv);
+ 
+ 	if (!dell_wmi_get_interface_version(&priv->interface_version))
+ 		return -EPROBE_DEFER;
+ 
+ 	return dell_wmi_input_setup(wdev);
+ }
+ 
+ static int dell_wmi_remove(struct wmi_device *wdev)
+ {
+ 	dell_wmi_input_destroy(wdev);
+ 	return 0;
+ }
+ static const struct wmi_device_id dell_wmi_id_table[] = {
+ 	{ .guid_string = DELL_EVENT_GUID },
+ 	{ },
+ };
+ 
+ static struct wmi_driver dell_wmi_driver = {
+ 	.driver = {
+ 		.name = "dell-wmi",
+ 	},
+ 	.id_table = dell_wmi_id_table,
+ 	.probe = dell_wmi_probe,
+ 	.remove = dell_wmi_remove,
+ 	.notify = dell_wmi_notify,
+ };
+ 
++>>>>>>> 92b8c540bce7 (platform/x86: dell-wmi-descriptor: split WMI descriptor into it's own driver)
  static int __init dell_wmi_init(void)
  {
  	int err;
* Unmerged path MAINTAINERS
* Unmerged path drivers/platform/x86/Kconfig
diff --git a/drivers/platform/x86/Makefile b/drivers/platform/x86/Makefile
index 10e380206af4..657a733408c6 100644
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_COMPAL_LAPTOP)	+= compal-laptop.o
 obj-$(CONFIG_DELL_SMBIOS)	+= dell-smbios.o
 obj-$(CONFIG_DELL_LAPTOP)	+= dell-laptop.o
 obj-$(CONFIG_DELL_WMI)		+= dell-wmi.o
+obj-$(CONFIG_DELL_WMI_DESCRIPTOR)	+= dell-wmi-descriptor.o
 obj-$(CONFIG_DELL_WMI_AIO)	+= dell-wmi-aio.o
 obj-$(CONFIG_DELL_SMO8800)	+= dell-smo8800.o
 obj-$(CONFIG_DELL_RBTN)		+= dell-rbtn.o
diff --git a/drivers/platform/x86/dell-wmi-descriptor.c b/drivers/platform/x86/dell-wmi-descriptor.c
new file mode 100644
index 000000000000..3204c408e261
--- /dev/null
+++ b/drivers/platform/x86/dell-wmi-descriptor.c
@@ -0,0 +1,170 @@
+/*
+ * Dell WMI descriptor driver
+ *
+ * Copyright (C) 2017 Dell Inc. All Rights Reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/acpi.h>
+#include <linux/list.h>
+#include <linux/module.h>
+#include <linux/wmi.h>
+#include "dell-wmi-descriptor.h"
+
+struct descriptor_priv {
+	struct list_head list;
+	u32 interface_version;
+	u32 size;
+};
+static LIST_HEAD(wmi_list);
+static DEFINE_MUTEX(list_mutex);
+
+bool dell_wmi_get_interface_version(u32 *version)
+{
+	struct descriptor_priv *priv;
+	bool ret = false;
+
+	mutex_lock(&list_mutex);
+	priv = list_first_entry_or_null(&wmi_list,
+					struct descriptor_priv,
+					list);
+	if (priv) {
+		*version = priv->interface_version;
+		ret = true;
+	}
+	mutex_unlock(&list_mutex);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(dell_wmi_get_interface_version);
+
+bool dell_wmi_get_size(u32 *size)
+{
+	struct descriptor_priv *priv;
+	bool ret = false;
+
+	mutex_lock(&list_mutex);
+	priv = list_first_entry_or_null(&wmi_list,
+					struct descriptor_priv,
+					list);
+	if (priv) {
+		*size = priv->size;
+		ret = true;
+	}
+	mutex_unlock(&list_mutex);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(dell_wmi_get_size);
+
+/*
+ * Descriptor buffer is 128 byte long and contains:
+ *
+ *       Name             Offset  Length  Value
+ * Vendor Signature          0       4    "DELL"
+ * Object Signature          4       4    " WMI"
+ * WMI Interface Version     8       4    <version>
+ * WMI buffer length        12       4    <length>
+ */
+static int dell_wmi_descriptor_probe(struct wmi_device *wdev)
+{
+	union acpi_object *obj = NULL;
+	struct descriptor_priv *priv;
+	u32 *buffer;
+	int ret;
+
+	obj = wmidev_block_query(wdev, 0);
+	if (!obj) {
+		dev_err(&wdev->dev, "failed to read Dell WMI descriptor\n");
+		ret = -EIO;
+		goto out;
+	}
+
+	if (obj->type != ACPI_TYPE_BUFFER) {
+		dev_err(&wdev->dev, "Dell descriptor has wrong type\n");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	/* Although it's not technically a failure, this would lead to
+	 * unexpected behavior
+	 */
+	if (obj->buffer.length != 128) {
+		dev_err(&wdev->dev,
+			"Dell descriptor buffer has unexpected length (%d)\n",
+			obj->buffer.length);
+		ret = -EINVAL;
+		goto out;
+	}
+
+	buffer = (u32 *)obj->buffer.pointer;
+
+	if (strncmp(obj->string.pointer, "DELL WMI", 8) != 0) {
+		dev_err(&wdev->dev, "Dell descriptor buffer has invalid signature (%8ph)\n",
+			buffer);
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (buffer[2] != 0 && buffer[2] != 1)
+		dev_warn(&wdev->dev, "Dell descriptor buffer has unknown version (%lu)\n",
+			(unsigned long) buffer[2]);
+
+	priv = devm_kzalloc(&wdev->dev, sizeof(struct descriptor_priv),
+	GFP_KERNEL);
+
+	priv->interface_version = buffer[2];
+	priv->size = buffer[3];
+	ret = 0;
+	dev_set_drvdata(&wdev->dev, priv);
+	mutex_lock(&list_mutex);
+	list_add_tail(&priv->list, &wmi_list);
+	mutex_unlock(&list_mutex);
+
+	dev_dbg(&wdev->dev, "Detected Dell WMI interface version %lu and buffer size %lu\n",
+		(unsigned long) priv->interface_version,
+		(unsigned long) priv->size);
+
+out:
+	kfree(obj);
+	return ret;
+}
+
+static int dell_wmi_descriptor_remove(struct wmi_device *wdev)
+{
+	struct descriptor_priv *priv = dev_get_drvdata(&wdev->dev);
+
+	mutex_lock(&list_mutex);
+	list_del(&priv->list);
+	mutex_unlock(&list_mutex);
+	return 0;
+}
+
+static const struct wmi_device_id dell_wmi_descriptor_id_table[] = {
+	{ .guid_string = DELL_WMI_DESCRIPTOR_GUID },
+	{ },
+};
+
+static struct wmi_driver dell_wmi_descriptor_driver = {
+	.driver = {
+		.name = "dell-wmi-descriptor",
+	},
+	.probe = dell_wmi_descriptor_probe,
+	.remove = dell_wmi_descriptor_remove,
+	.id_table = dell_wmi_descriptor_id_table,
+};
+
+module_wmi_driver(dell_wmi_descriptor_driver);
+
+MODULE_ALIAS("wmi:" DELL_WMI_DESCRIPTOR_GUID);
+MODULE_AUTHOR("Mario Limonciello <mario.limonciello@dell.com>");
+MODULE_DESCRIPTION("Dell WMI descriptor driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/platform/x86/dell-wmi-descriptor.h b/drivers/platform/x86/dell-wmi-descriptor.h
new file mode 100644
index 000000000000..5f7b69c2c83a
--- /dev/null
+++ b/drivers/platform/x86/dell-wmi-descriptor.h
@@ -0,0 +1,21 @@
+/*
+ *  Dell WMI descriptor driver
+ *
+ *  Copyright (c) 2017 Dell Inc.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#ifndef _DELL_WMI_DESCRIPTOR_H_
+#define _DELL_WMI_DESCRIPTOR_H_
+
+#include <linux/wmi.h>
+
+#define DELL_WMI_DESCRIPTOR_GUID "8D9DDCBC-A997-11DA-B012-B622A1EF5492"
+
+bool dell_wmi_get_interface_version(u32 *version);
+bool dell_wmi_get_size(u32 *size);
+
+#endif
* Unmerged path drivers/platform/x86/dell-wmi.c
