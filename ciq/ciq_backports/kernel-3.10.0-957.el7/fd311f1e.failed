liquidio: Moved common function delete_glists to lio_core.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Intiyaz Basha <intiyaz.basha@cavium.com>
commit fd311f1e7548cf45a273d46aa9c9c8d8330d803c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/fd311f1e.failed

Moved common function delete_glists to lio_core.c
and renamed it to lio_delete_glists

	Signed-off-by: Intiyaz Basha <intiyaz.basha@cavium.com>
	Acked-by: Derek Chickles <derek.chickles@cavium.com>
	Signed-off-by: Felix Manlunas <felix.manlunas@cavium.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit fd311f1e7548cf45a273d46aa9c9c8d8330d803c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/cavium/liquidio/lio_core.c
#	drivers/net/ethernet/cavium/liquidio/octeon_network.h
diff --cc drivers/net/ethernet/cavium/liquidio/lio_core.c
index 5c6599c797a0,669b4f2d45e0..000000000000
--- a/drivers/net/ethernet/cavium/liquidio/lio_core.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_core.c
@@@ -29,6 -29,79 +29,82 @@@
  /* OOM task polling interval */
  #define LIO_OOM_POLL_INTERVAL_MS 250
  
++<<<<<<< HEAD
++=======
+ /**
+  * \brief Callback for getting interface configuration
+  * @param status status of request
+  * @param buf pointer to resp structure
+  */
+ void lio_if_cfg_callback(struct octeon_device *oct,
+ 			 u32 status __attribute__((unused)), void *buf)
+ {
+ 	struct octeon_soft_command *sc = (struct octeon_soft_command *)buf;
+ 	struct liquidio_if_cfg_context *ctx;
+ 	struct liquidio_if_cfg_resp *resp;
+ 
+ 	resp = (struct liquidio_if_cfg_resp *)sc->virtrptr;
+ 	ctx = (struct liquidio_if_cfg_context *)sc->ctxptr;
+ 
+ 	oct = lio_get_device(ctx->octeon_id);
+ 	if (resp->status)
+ 		dev_err(&oct->pci_dev->dev, "nic if cfg instruction failed. Status: %llx\n",
+ 			CVM_CAST64(resp->status));
+ 	WRITE_ONCE(ctx->cond, 1);
+ 
+ 	snprintf(oct->fw_info.liquidio_firmware_version, 32, "%s",
+ 		 resp->cfg_info.liquidio_firmware_version);
+ 
+ 	/* This barrier is required to be sure that the response has been
+ 	 * written fully before waking up the handler
+ 	 */
+ 	wmb();
+ 
+ 	wake_up_interruptible(&ctx->wc);
+ }
+ 
+ /**
+  * \brief Delete gather lists
+  * @param lio per-network private data
+  */
+ void lio_delete_glists(struct lio *lio)
+ {
+ 	struct octnic_gather *g;
+ 	int i;
+ 
+ 	kfree(lio->glist_lock);
+ 	lio->glist_lock = NULL;
+ 
+ 	if (!lio->glist)
+ 		return;
+ 
+ 	for (i = 0; i < lio->linfo.num_txpciq; i++) {
+ 		do {
+ 			g = (struct octnic_gather *)
+ 			    lio_list_delete_head(&lio->glist[i]);
+ 			kfree(g);
+ 		} while (g);
+ 
+ 		if (lio->glists_virt_base && lio->glists_virt_base[i] &&
+ 		    lio->glists_dma_base && lio->glists_dma_base[i]) {
+ 			lio_dma_free(lio->oct_dev,
+ 				     lio->glist_entry_size * lio->tx_qsize,
+ 				     lio->glists_virt_base[i],
+ 				     lio->glists_dma_base[i]);
+ 		}
+ 	}
+ 
+ 	kfree(lio->glists_virt_base);
+ 	lio->glists_virt_base = NULL;
+ 
+ 	kfree(lio->glists_dma_base);
+ 	lio->glists_dma_base = NULL;
+ 
+ 	kfree(lio->glist);
+ 	lio->glist = NULL;
+ }
+ 
++>>>>>>> fd311f1e7548 (liquidio: Moved common function delete_glists to lio_core.c)
  int liquidio_set_feature(struct net_device *netdev, int cmd, u16 param1)
  {
  	struct lio *lio = GET_LIO(netdev);
diff --cc drivers/net/ethernet/cavium/liquidio/octeon_network.h
index ad6851b4defa,777af06a8570..000000000000
--- a/drivers/net/ethernet/cavium/liquidio/octeon_network.h
+++ b/drivers/net/ethernet/cavium/liquidio/octeon_network.h
@@@ -184,6 -199,20 +184,23 @@@ int octeon_setup_interrupt(struct octeo
   */
  void liquidio_set_ethtool_ops(struct net_device *netdev);
  
++<<<<<<< HEAD
++=======
+ void lio_if_cfg_callback(struct octeon_device *oct,
+ 			 u32 status __attribute__((unused)),
+ 			 void *buf);
+ 
+ void lio_delete_glists(struct lio *lio);
+ 
+ /**
+  * \brief Net device change_mtu
+  * @param netdev network device
+  */
+ int liquidio_change_mtu(struct net_device *netdev, int new_mtu);
+ #define LIO_CHANGE_MTU_SUCCESS 1
+ #define LIO_CHANGE_MTU_FAIL    2
+ 
++>>>>>>> fd311f1e7548 (liquidio: Moved common function delete_glists to lio_core.c)
  #define SKB_ADJ_MASK  0x3F
  #define SKB_ADJ       (SKB_ADJ_MASK + 1)
  
* Unmerged path drivers/net/ethernet/cavium/liquidio/lio_core.c
diff --git a/drivers/net/ethernet/cavium/liquidio/lio_main.c b/drivers/net/ethernet/cavium/liquidio/lio_main.c
index 5562c7185976..06a5256501a5 100644
--- a/drivers/net/ethernet/cavium/liquidio/lio_main.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_main.c
@@ -550,48 +550,6 @@ static inline int check_txq_status(struct lio *lio)
 	return ret_val;
 }
 
-/**
- * \brief Delete gather lists
- * @param lio per-network private data
- */
-static void delete_glists(struct lio *lio)
-{
-	struct octnic_gather *g;
-	int i;
-
-	kfree(lio->glist_lock);
-	lio->glist_lock = NULL;
-
-	if (!lio->glist)
-		return;
-
-	for (i = 0; i < lio->linfo.num_txpciq; i++) {
-		do {
-			g = (struct octnic_gather *)
-				lio_list_delete_head(&lio->glist[i]);
-			if (g)
-				kfree(g);
-		} while (g);
-
-		if (lio->glists_virt_base && lio->glists_virt_base[i] &&
-		    lio->glists_dma_base && lio->glists_dma_base[i]) {
-			lio_dma_free(lio->oct_dev,
-				     lio->glist_entry_size * lio->tx_qsize,
-				     lio->glists_virt_base[i],
-				     lio->glists_dma_base[i]);
-		}
-	}
-
-	kfree(lio->glists_virt_base);
-	lio->glists_virt_base = NULL;
-
-	kfree(lio->glists_dma_base);
-	lio->glists_dma_base = NULL;
-
-	kfree(lio->glist);
-	lio->glist = NULL;
-}
-
 /**
  * \brief Setup gather lists
  * @param lio per-network private data
@@ -626,7 +584,7 @@ static int setup_glists(struct octeon_device *oct, struct lio *lio, int num_iqs)
 				       GFP_KERNEL);
 
 	if (!lio->glists_virt_base || !lio->glists_dma_base) {
-		delete_glists(lio);
+		lio_delete_glists(lio);
 		return -ENOMEM;
 	}
 
@@ -643,7 +601,7 @@ static int setup_glists(struct octeon_device *oct, struct lio *lio, int num_iqs)
 				      &lio->glists_dma_base[i]);
 
 		if (!lio->glists_virt_base[i]) {
-			delete_glists(lio);
+			lio_delete_glists(lio);
 			return -ENOMEM;
 		}
 
@@ -665,7 +623,7 @@ static int setup_glists(struct octeon_device *oct, struct lio *lio, int num_iqs)
 		}
 
 		if (j != lio->tx_qsize) {
-			delete_glists(lio);
+			lio_delete_glists(lio);
 			return -ENOMEM;
 		}
 	}
@@ -1439,7 +1397,7 @@ static void liquidio_destroy_nic_device(struct octeon_device *oct, int ifidx)
 
 	cleanup_rx_oom_poll_fn(netdev);
 
-	delete_glists(lio);
+	lio_delete_glists(lio);
 
 	free_netdev(netdev);
 
diff --git a/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c b/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c
index ef511e6543e8..9e3b0bdeb658 100644
--- a/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c
+++ b/drivers/net/ethernet/cavium/liquidio/lio_vf_main.c
@@ -298,47 +298,6 @@ static struct pci_driver liquidio_vf_pci_driver = {
 	.err_handler	= &liquidio_vf_err_handler,    /* For AER */
 };
 
-/**
- * \brief Delete gather lists
- * @param lio per-network private data
- */
-static void delete_glists(struct lio *lio)
-{
-	struct octnic_gather *g;
-	int i;
-
-	kfree(lio->glist_lock);
-	lio->glist_lock = NULL;
-
-	if (!lio->glist)
-		return;
-
-	for (i = 0; i < lio->linfo.num_txpciq; i++) {
-		do {
-			g = (struct octnic_gather *)
-			    lio_list_delete_head(&lio->glist[i]);
-			kfree(g);
-		} while (g);
-
-		if (lio->glists_virt_base && lio->glists_virt_base[i] &&
-		    lio->glists_dma_base && lio->glists_dma_base[i]) {
-			lio_dma_free(lio->oct_dev,
-				     lio->glist_entry_size * lio->tx_qsize,
-				     lio->glists_virt_base[i],
-				     lio->glists_dma_base[i]);
-		}
-	}
-
-	kfree(lio->glists_virt_base);
-	lio->glists_virt_base = NULL;
-
-	kfree(lio->glists_dma_base);
-	lio->glists_dma_base = NULL;
-
-	kfree(lio->glist);
-	lio->glist = NULL;
-}
-
 /**
  * \brief Setup gather lists
  * @param lio per-network private data
@@ -373,7 +332,7 @@ static int setup_glists(struct lio *lio, int num_iqs)
 				       GFP_KERNEL);
 
 	if (!lio->glists_virt_base || !lio->glists_dma_base) {
-		delete_glists(lio);
+		lio_delete_glists(lio);
 		return -ENOMEM;
 	}
 
@@ -388,7 +347,7 @@ static int setup_glists(struct lio *lio, int num_iqs)
 				      &lio->glists_dma_base[i]);
 
 		if (!lio->glists_virt_base[i]) {
-			delete_glists(lio);
+			lio_delete_glists(lio);
 			return -ENOMEM;
 		}
 
@@ -407,7 +366,7 @@ static int setup_glists(struct lio *lio, int num_iqs)
 		}
 
 		if (j != lio->tx_qsize) {
-			delete_glists(lio);
+			lio_delete_glists(lio);
 			return -ENOMEM;
 		}
 	}
@@ -862,7 +821,7 @@ static void liquidio_destroy_nic_device(struct octeon_device *oct, int ifidx)
 
 	cleanup_link_status_change_wq(netdev);
 
-	delete_glists(lio);
+	lio_delete_glists(lio);
 
 	free_netdev(netdev);
 
* Unmerged path drivers/net/ethernet/cavium/liquidio/octeon_network.h
