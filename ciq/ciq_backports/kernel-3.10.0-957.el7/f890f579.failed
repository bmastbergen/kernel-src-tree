tcmu: simplify dbi thresh handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mike Christie <mchristi@redhat.com>
commit f890f5799a6628fe006ae524e625900186074cdb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f890f579.failed

We do not really save a lot by trying to increase thresh
a multiple of the existing value. This just simplifies the
code by increasing it to whatever is needed for the command
being executed.

	Signed-off-by: Mike Christie <mchristi@redhat.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit f890f5799a6628fe006ae524e625900186074cdb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_user.c
diff --cc drivers/target/target_core_user.c
index 8fa83807dcdc,2679e4dcd0f1..000000000000
--- a/drivers/target/target_core_user.c
+++ b/drivers/target/target_core_user.c
@@@ -61,17 -67,24 +61,22 @@@
   * this may have a 'UAM' comment.
   */
  
 -#define TCMU_TIME_OUT (30 * MSEC_PER_SEC)
  
 -/* For cmd area, the size is fixed 8MB */
 -#define CMDR_SIZE (8 * 1024 * 1024)
 +#define TCMU_TIME_OUT (30 * MSEC_PER_SEC)
  
 -/*
 - * For data area, the block size is PAGE_SIZE and
 - * the total size is 256K * PAGE_SIZE.
 - */
 +#define DATA_BLOCK_BITS_DEF 2048
 +#define DATA_BLOCKS_BITS_MAX 65536
  #define DATA_BLOCK_SIZE PAGE_SIZE
++<<<<<<< HEAD
 +#define DATA_BLOCK_SHIFT PAGE_SHIFT
 +#define TCMU_MBS_TO_BLOCKS(_mbs) (_mbs << (20 - DATA_BLOCK_SHIFT))
 +#define TCMU_BLOCKS_TO_MBS(_blocks) (_blocks >> (20 - DATA_BLOCK_SHIFT))
++=======
+ #define DATA_BLOCK_BITS (256 * 1024)
+ #define DATA_SIZE (DATA_BLOCK_BITS * DATA_BLOCK_SIZE)
++>>>>>>> f890f5799a66 (tcmu: simplify dbi thresh handling)
  
 -/* The total size of the ring is 8M + 256K * PAGE_SIZE */
 -#define TCMU_RING_SIZE (CMDR_SIZE + DATA_SIZE)
 -
 -/* Default maximum of the global data blocks(512K * PAGE_SIZE) */
 -#define TCMU_GLOBAL_MAX_BLOCKS (512 * 1024)
 +#define CMDR_SIZE (16 * 4096)
  
  static u8 tcmu_kern_cmd_reply_supported;
  
@@@ -557,14 -694,25 +562,33 @@@ static bool is_ring_space_avail(struct 
  		return false;
  	}
  
++<<<<<<< HEAD
 +	space = spc_bitmap_free(udev->data_bitmap, udev->max_blocks);
 +	if (space < data_needed) {
 +		pr_debug("no data space: only %zu available, but ask for %zu\n",
 +				space, data_needed);
 +		return false;
++=======
+ 	/* try to check and get the data blocks as needed */
+ 	space = spc_bitmap_free(udev->data_bitmap, udev->dbi_thresh);
+ 	if ((space * DATA_BLOCK_SIZE) < data_needed) {
+ 		unsigned long blocks_left = DATA_BLOCK_BITS - udev->dbi_thresh +
+ 						space;
+ 
+ 		if (blocks_left < blocks_needed) {
+ 			pr_debug("no data space: only %lu available, but ask for %zu\n",
+ 					blocks_left * DATA_BLOCK_SIZE,
+ 					data_needed);
+ 			return false;
+ 		}
+ 
+ 		udev->dbi_thresh += blocks_needed;
+ 		if (udev->dbi_thresh > DATA_BLOCK_BITS)
+ 			udev->dbi_thresh = DATA_BLOCK_BITS;
++>>>>>>> f890f5799a66 (tcmu: simplify dbi thresh handling)
  	}
  
 -	return tcmu_get_empty_blocks(udev, cmd);
 +	return true;
  }
  
  static inline size_t tcmu_cmd_get_base_cmd_size(size_t iov_cnt)
* Unmerged path drivers/target/target_core_user.c
