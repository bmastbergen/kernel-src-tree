nfp: bpf: remove the register renumbering leftovers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 94508438e8ea4391696c5171527678e9dbd08789
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/94508438.failed

The register renumbering was removed and will not be coming back
in its old, naive form, given that it would be fundamentally
incompatible with calling functions.  Remove the leftovers.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 94508438e8ea4391696c5171527678e9dbd08789)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/bpf/main.h
#	drivers/net/ethernet/netronome/nfp/bpf/offload.c
diff --cc drivers/net/ethernet/netronome/nfp/bpf/main.h
index ebcbc0ba3a0c,85b7d9398cda..000000000000
--- a/drivers/net/ethernet/netronome/nfp/bpf/main.h
+++ b/drivers/net/ethernet/netronome/nfp/bpf/main.h
@@@ -147,9 -140,7 +147,13 @@@ static inline u8 mbpf_mode(const struc
   * @prog: machine code
   * @prog_len: number of valid instructions in @prog array
   * @__prog_alloc_len: alloc size of @prog array
++<<<<<<< HEAD
 + * @act: BPF program/action type (TC DA, TC with action, XDP etc.)
 + * @num_regs: number of registers used by this program
 + * @regs_per_thread: number of basic registers allocated per thread
++=======
+  * @type: BPF program type
++>>>>>>> 94508438e8ea (nfp: bpf: remove the register renumbering leftovers)
   * @start_off: address of the first instruction in the memory
   * @tgt_out: jump target for normal exit
   * @tgt_abort: jump target for abort (e.g. access outside of packet buffer)
@@@ -164,11 -155,8 +168,8 @@@ struct nfp_prog 
  	unsigned int prog_len;
  	unsigned int __prog_alloc_len;
  
 -	enum bpf_prog_type type;
 +	enum nfp_bpf_action_type act;
  
- 	unsigned int num_regs;
- 	unsigned int regs_per_thread;
- 
  	unsigned int start_off;
  	unsigned int tgt_out;
  	unsigned int tgt_abort;
diff --cc drivers/net/ethernet/netronome/nfp/bpf/offload.c
index de79faf0874b,268ba1ba82db..000000000000
--- a/drivers/net/ethernet/netronome/nfp/bpf/offload.c
+++ b/drivers/net/ethernet/netronome/nfp/bpf/offload.c
@@@ -205,11 -98,8 +205,13 @@@ out
  static void
  nfp_net_bpf_load_and_start(struct nfp_net *nn, u32 tc_flags,
  			   void *code, dma_addr_t dma_addr,
- 			   unsigned int code_sz, unsigned int n_instr,
- 			   bool dense_mode)
+ 			   unsigned int code_sz, unsigned int n_instr)
  {
++<<<<<<< HEAD
 +	struct nfp_net_bpf_priv *priv = nn->app_priv;
 +	u64 bpf_addr = dma_addr;
++=======
++>>>>>>> 94508438e8ea (nfp: bpf: remove the register renumbering leftovers)
  	int err;
  
  	nn->dp.bpf_offload_skip_sw = !!(tc_flags & TCA_CLS_FLAGS_SKIP_SW);
diff --git a/drivers/net/ethernet/netronome/nfp/bpf/jit.c b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
index a86508b776ac..f49b6de6cd63 100644
--- a/drivers/net/ethernet/netronome/nfp/bpf/jit.c
+++ b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
@@ -2240,9 +2240,6 @@ nfp_bpf_jit(struct bpf_prog *filter, void *prog_mem,
 	if (ret)
 		goto out;
 
-	nfp_prog->num_regs = MAX_BPF_REG;
-	nfp_prog->regs_per_thread = 32;
-
 	nfp_prog->prog = prog_mem;
 	nfp_prog->__prog_alloc_len = prog_sz;
 
@@ -2257,7 +2254,6 @@ nfp_bpf_jit(struct bpf_prog *filter, void *prog_mem,
 	ret = nfp_bpf_ustore_calc(nfp_prog, (__force __le64 *)prog_mem);
 
 	res->n_instr = nfp_prog->prog_len;
-	res->dense_mode = false;
 out:
 	nfp_prog_free(nfp_prog);
 
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/main.h
* Unmerged path drivers/net/ethernet/netronome/nfp/bpf/offload.c
