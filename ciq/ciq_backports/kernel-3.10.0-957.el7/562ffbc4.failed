mlxsw: spectrum: qdiscs: Add an ops struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Nogah Frankel <nogahf@mellanox.com>
commit 562ffbc4b3eb2fa8cd8eac1f22bc264dbbeb9a16
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/562ffbc4.failed

Qdisc struct have the Qdisc_class_ops struct.
This patch introduces the similar ops struct for the mlxsw_sp_qdisc_ops
struct. It allows better readability as well as code reusability for the
common parts of some functions like destroy.
The first operations to be added are the statistics getters.

	Signed-off-by: Nogah Frankel <nogahf@mellanox.com>
	Reviewed-by: Yuval Mintz <yuvalm@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 562ffbc4b3eb2fa8cd8eac1f22bc264dbbeb9a16)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_qdisc.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_qdisc.c
index b5397da94d7f,417350ceda7f..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_qdisc.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_qdisc.c
@@@ -41,6 -41,73 +41,76 @@@
  #include "spectrum.h"
  #include "reg.h"
  
++<<<<<<< HEAD
++=======
+ enum mlxsw_sp_qdisc_type {
+ 	MLXSW_SP_QDISC_NO_QDISC,
+ 	MLXSW_SP_QDISC_RED,
+ };
+ 
+ struct mlxsw_sp_qdisc_ops {
+ 	int (*get_stats)(struct mlxsw_sp_port *mlxsw_sp_port,
+ 			 struct mlxsw_sp_qdisc *mlxsw_sp_qdisc,
+ 			 struct tc_qopt_offload_stats *stats_ptr);
+ 	int (*get_xstats)(struct mlxsw_sp_port *mlxsw_sp_port,
+ 			  struct mlxsw_sp_qdisc *mlxsw_sp_qdisc,
+ 			  void *xstats_ptr);
+ };
+ 
+ struct mlxsw_sp_qdisc {
+ 	u32 handle;
+ 	enum mlxsw_sp_qdisc_type type;
+ 	u8 tclass_num;
+ 	union {
+ 		struct red_stats red;
+ 	} xstats_base;
+ 	struct mlxsw_sp_qdisc_stats {
+ 		u64 tx_bytes;
+ 		u64 tx_packets;
+ 		u64 drops;
+ 		u64 overlimits;
+ 	} stats_base;
+ 
+ 	struct mlxsw_sp_qdisc_ops *ops;
+ };
+ 
+ static bool
+ mlxsw_sp_qdisc_compare(struct mlxsw_sp_qdisc *mlxsw_sp_qdisc, u32 handle,
+ 		       enum mlxsw_sp_qdisc_type type)
+ {
+ 	return mlxsw_sp_qdisc && mlxsw_sp_qdisc->handle == handle &&
+ 	       mlxsw_sp_qdisc->type == type;
+ }
+ 
++>>>>>>> 562ffbc4b3eb (mlxsw: spectrum: qdiscs: Add an ops struct)
+ static int
+ mlxsw_sp_qdisc_get_stats(struct mlxsw_sp_port *mlxsw_sp_port,
+ 			 struct mlxsw_sp_qdisc *mlxsw_sp_qdisc,
+ 			 struct tc_qopt_offload_stats *stats_ptr)
+ {
+ 	if (mlxsw_sp_qdisc && mlxsw_sp_qdisc->ops &&
+ 	    mlxsw_sp_qdisc->ops->get_stats)
+ 		return mlxsw_sp_qdisc->ops->get_stats(mlxsw_sp_port,
+ 						      mlxsw_sp_qdisc,
+ 						      stats_ptr);
+ 
+ 	return -EOPNOTSUPP;
+ }
+ 
+ static int
+ mlxsw_sp_qdisc_get_xstats(struct mlxsw_sp_port *mlxsw_sp_port,
+ 			  struct mlxsw_sp_qdisc *mlxsw_sp_qdisc,
+ 			  void *xstats_ptr)
+ {
+ 	if (mlxsw_sp_qdisc && mlxsw_sp_qdisc->ops &&
+ 	    mlxsw_sp_qdisc->ops->get_xstats)
+ 		return mlxsw_sp_qdisc->ops->get_xstats(mlxsw_sp_port,
+ 						      mlxsw_sp_qdisc,
+ 						      xstats_ptr);
+ 
+ 	return -EOPNOTSUPP;
+ }
+ 
  static int
  mlxsw_sp_tclass_congestion_enable(struct mlxsw_sp_port *mlxsw_sp_port,
  				  int tclass_num, u32 min, u32 max,
@@@ -130,7 -188,7 +200,11 @@@ mlxsw_sp_qdisc_red_destroy(struct mlxsw
  static int
  mlxsw_sp_qdisc_red_replace(struct mlxsw_sp_port *mlxsw_sp_port, u32 handle,
  			   struct mlxsw_sp_qdisc *mlxsw_sp_qdisc,
++<<<<<<< HEAD
 +			   int tclass_num,
++=======
+ 			   struct mlxsw_sp_qdisc_ops *ops,
++>>>>>>> 562ffbc4b3eb (mlxsw: spectrum: qdiscs: Add an ops struct)
  			   struct tc_red_qopt_offload_params *p)
  {
  	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_port->mlxsw_sp;
@@@ -168,10 -227,10 +242,11 @@@
  		goto err_config;
  
  	mlxsw_sp_qdisc->type = MLXSW_SP_QDISC_RED;
+ 	mlxsw_sp_qdisc->ops = ops;
  	if (mlxsw_sp_qdisc->handle != handle)
 -		mlxsw_sp_setup_tc_qdisc_red_clean_stats(mlxsw_sp_port,
 -							mlxsw_sp_qdisc);
 +		mlxsw_sp_setup_tc_qdisc_clean_stats(mlxsw_sp_port,
 +						    mlxsw_sp_qdisc,
 +						    tclass_num);
  
  	mlxsw_sp_qdisc->handle = handle;
  	return 0;
@@@ -185,16 -243,15 +260,25 @@@ err_config
  }
  
  static int
 -mlxsw_sp_qdisc_get_red_xstats(struct mlxsw_sp_port *mlxsw_sp_port,
 +mlxsw_sp_qdisc_get_red_xstats(struct mlxsw_sp_port *mlxsw_sp_port, u32 handle,
  			      struct mlxsw_sp_qdisc *mlxsw_sp_qdisc,
++<<<<<<< HEAD
 +			      int tclass_num, struct red_stats *res)
++=======
+ 			      void *xstats_ptr)
++>>>>>>> 562ffbc4b3eb (mlxsw: spectrum: qdiscs: Add an ops struct)
  {
 -	struct red_stats *xstats_base = &mlxsw_sp_qdisc->xstats_base.red;
 -	u8 tclass_num = mlxsw_sp_qdisc->tclass_num;
 +	struct red_stats *xstats_base = &mlxsw_sp_qdisc->xstats_base;
  	struct mlxsw_sp_port_xstats *xstats;
++<<<<<<< HEAD
 +
 +	if (mlxsw_sp_qdisc->handle != handle ||
 +	    mlxsw_sp_qdisc->type != MLXSW_SP_QDISC_RED)
 +		return -EOPNOTSUPP;
++=======
+ 	struct red_stats *res = xstats_ptr;
+ 	int early_drops, marks, pdrops;
++>>>>>>> 562ffbc4b3eb (mlxsw: spectrum: qdiscs: Add an ops struct)
  
  	xstats = &mlxsw_sp_port->periodic_hw_stats.xstats;
  
@@@ -205,39 -270,38 +289,44 @@@
  }
  
  static int
 -mlxsw_sp_qdisc_get_red_stats(struct mlxsw_sp_port *mlxsw_sp_port,
 +mlxsw_sp_qdisc_get_red_stats(struct mlxsw_sp_port *mlxsw_sp_port, u32 handle,
  			     struct mlxsw_sp_qdisc *mlxsw_sp_qdisc,
++<<<<<<< HEAD
 +			     int tclass_num,
 +			     struct tc_red_qopt_offload_stats *res)
++=======
+ 			     struct tc_qopt_offload_stats *stats_ptr)
++>>>>>>> 562ffbc4b3eb (mlxsw: spectrum: qdiscs: Add an ops struct)
  {
  	u64 tx_bytes, tx_packets, overlimits, drops;
 -	u8 tclass_num = mlxsw_sp_qdisc->tclass_num;
 -	struct mlxsw_sp_qdisc_stats *stats_base;
  	struct mlxsw_sp_port_xstats *xstats;
  	struct rtnl_link_stats64 *stats;
  
 +	if (mlxsw_sp_qdisc->handle != handle ||
 +	    mlxsw_sp_qdisc->type != MLXSW_SP_QDISC_RED)
 +		return -EOPNOTSUPP;
 +
  	xstats = &mlxsw_sp_port->periodic_hw_stats.xstats;
  	stats = &mlxsw_sp_port->periodic_hw_stats.stats;
 -	stats_base = &mlxsw_sp_qdisc->stats_base;
  
 -	tx_bytes = stats->tx_bytes - stats_base->tx_bytes;
 -	tx_packets = stats->tx_packets - stats_base->tx_packets;
 +	tx_bytes = stats->tx_bytes - mlxsw_sp_qdisc->tx_bytes;
 +	tx_packets = stats->tx_packets - mlxsw_sp_qdisc->tx_packets;
  	overlimits = xstats->wred_drop[tclass_num] + xstats->ecn -
 -		     stats_base->overlimits;
 +		     mlxsw_sp_qdisc->overlimits;
  	drops = xstats->wred_drop[tclass_num] + xstats->tail_drop[tclass_num] -
 -		stats_base->drops;
 +		mlxsw_sp_qdisc->drops;
  
- 	_bstats_update(res->bstats, tx_bytes, tx_packets);
- 	res->qstats->overlimits += overlimits;
- 	res->qstats->drops += drops;
- 	res->qstats->backlog += mlxsw_sp_cells_bytes(mlxsw_sp_port->mlxsw_sp,
- 						xstats->backlog[tclass_num]);
+ 	_bstats_update(stats_ptr->bstats, tx_bytes, tx_packets);
+ 	stats_ptr->qstats->overlimits += overlimits;
+ 	stats_ptr->qstats->drops += drops;
+ 	stats_ptr->qstats->backlog +=
+ 			mlxsw_sp_cells_bytes(mlxsw_sp_port->mlxsw_sp,
+ 					     xstats->backlog[tclass_num]);
  
 -	stats_base->drops +=  drops;
 -	stats_base->overlimits += overlimits;
 -	stats_base->tx_bytes += tx_bytes;
 -	stats_base->tx_packets += tx_packets;
 +	mlxsw_sp_qdisc->drops +=  drops;
 +	mlxsw_sp_qdisc->overlimits += overlimits;
 +	mlxsw_sp_qdisc->tx_bytes += tx_bytes;
 +	mlxsw_sp_qdisc->tx_packets += tx_packets;
  	return 0;
  }
  
@@@ -252,25 -320,28 +346,47 @@@ int mlxsw_sp_setup_tc_red(struct mlxsw_
  	if (p->parent != TC_H_ROOT)
  		return -EOPNOTSUPP;
  
++<<<<<<< HEAD
 +	mlxsw_sp_qdisc = &mlxsw_sp_port->root_qdisc;
 +	tclass_num = MLXSW_SP_PORT_DEFAULT_TCLASS;
++=======
+ 	mlxsw_sp_qdisc = mlxsw_sp_port->root_qdisc;
+ 
+ 	if (p->command == TC_RED_REPLACE)
+ 		return mlxsw_sp_qdisc_red_replace(mlxsw_sp_port, p->handle,
+ 						  mlxsw_sp_qdisc,
+ 						  &mlxsw_sp_qdisc_ops_red,
+ 						  &p->set);
+ 
+ 	if (!mlxsw_sp_qdisc_compare(mlxsw_sp_qdisc, p->handle,
+ 				    MLXSW_SP_QDISC_RED))
+ 		return -EOPNOTSUPP;
++>>>>>>> 562ffbc4b3eb (mlxsw: spectrum: qdiscs: Add an ops struct)
  
  	switch (p->command) {
 +	case TC_RED_REPLACE:
 +		return mlxsw_sp_qdisc_red_replace(mlxsw_sp_port, p->handle,
 +						  mlxsw_sp_qdisc, tclass_num,
 +						  &p->set);
  	case TC_RED_DESTROY:
 -		return mlxsw_sp_qdisc_red_destroy(mlxsw_sp_port,
 -						  mlxsw_sp_qdisc);
 +		return mlxsw_sp_qdisc_red_destroy(mlxsw_sp_port, p->handle,
 +						  mlxsw_sp_qdisc, tclass_num);
  	case TC_RED_XSTATS:
++<<<<<<< HEAD
 +		return mlxsw_sp_qdisc_get_red_xstats(mlxsw_sp_port, p->handle,
 +						     mlxsw_sp_qdisc, tclass_num,
 +						     p->xstats);
 +	case TC_RED_STATS:
 +		return mlxsw_sp_qdisc_get_red_stats(mlxsw_sp_port, p->handle,
 +						    mlxsw_sp_qdisc, tclass_num,
 +						    &p->stats);
++=======
+ 		return mlxsw_sp_qdisc_get_xstats(mlxsw_sp_port, mlxsw_sp_qdisc,
+ 						 p->xstats);
+ 	case TC_RED_STATS:
+ 		return mlxsw_sp_qdisc_get_stats(mlxsw_sp_port, mlxsw_sp_qdisc,
+ 						&p->stats);
++>>>>>>> 562ffbc4b3eb (mlxsw: spectrum: qdiscs: Add an ops struct)
  	default:
  		return -EOPNOTSUPP;
  	}
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_qdisc.c
