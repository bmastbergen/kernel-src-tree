Revert "target: Fix VERIFY and WRITE VERIFY command parsing"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [target] Revert "Fix VERIFY and WRITE VERIFY command parsing" (Maurizio Lombardi) [1585081]
Rebuild_FUZZ: 92.86%
commit-author Nicholas Bellinger <nab@linux-iscsi.org>
commit 984a9d4c40bed351a92ed31f0723a710444295da
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/984a9d4c.failed

This reverts commit 0e2eb7d12eaa8e391bf5615d4271bb87a649caaa

  Author: Bart Van Assche <bart.vanassche@sandisk.com>
  Date:   Thu Mar 30 10:12:39 2017 -0700

      target: Fix VERIFY and WRITE VERIFY command parsing

This patch broke existing behaviour for WRITE_VERIFY because
it dropped the original SCF_SCSI_DATA_CDB assignment for
bytchk = 0 so target_cmd_size_check() no longer rejected
this case, allowing an overflow case to trigger an OOPs
in iscsi-target.

Since the short term and long term fixes are still being
discussed, revert it for now since it's late in the merge
window and try again in v4.13-rc1.

Conflicts:
	drivers/target/target_core_sbc.c

	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 984a9d4c40bed351a92ed31f0723a710444295da)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_sbc.c
diff --cc drivers/target/target_core_sbc.c
index 9b95731f8e80,4316f7b65fb7..000000000000
--- a/drivers/target/target_core_sbc.c
+++ b/drivers/target/target_core_sbc.c
@@@ -830,59 -831,6 +830,62 @@@ sbc_check_dpofua(struct se_device *dev
  	return 0;
  }
  
++<<<<<<< HEAD
 +/**
 + * sbc_parse_verify - parse VERIFY, VERIFY_16 and WRITE VERIFY commands
 + * @cmd:     (in)  structure that describes the SCSI command to be parsed.
 + * @sectors: (out) Number of logical blocks on the storage medium that will be
 + *           affected by the SCSI command.
 + * @bufflen: (out) Expected length of the SCSI Data-Out buffer.
 + */
 +static sense_reason_t sbc_parse_verify(struct se_cmd *cmd, int *sectors,
 +				       u32 *bufflen)
 +{
 +	struct se_device *dev = cmd->se_dev;
 +	u8 *cdb = cmd->t_task_cdb;
 +	u8 bytchk = (cdb[1] >> 1) & 3;
 +	sense_reason_t ret;
 +
 +	switch (cdb[0]) {
 +	case VERIFY:
 +	case WRITE_VERIFY:
 +		*sectors = transport_get_sectors_10(cdb);
 +		cmd->t_task_lba = transport_lba_32(cdb);
 +		break;
 +	case VERIFY_16:
 +		*sectors = transport_get_sectors_16(cdb);
 +		cmd->t_task_lba = transport_lba_64(cdb);
 +		break;
 +	default:
 +		WARN_ON_ONCE(true);
 +		return TCM_UNSUPPORTED_SCSI_OPCODE;
 +	}
 +
 +	if (sbc_check_dpofua(dev, cmd, cdb))
 +		return TCM_INVALID_CDB_FIELD;
 +
 +	ret = sbc_check_prot(dev, cmd, cdb, *sectors, true);
 +	if (ret)
 +		return ret;
 +
 +	switch (bytchk) {
 +	case 0:
 +		*bufflen = 0;
 +		break;
 +	case 1:
 +		*bufflen = sbc_get_size(cmd, *sectors);
 +		cmd->se_cmd_flags |= SCF_SCSI_DATA_CDB;
 +		break;
 +	default:
 +		pr_err("Unsupported BYTCHK value %d for SCSI opcode %#x\n",
 +		       bytchk, cdb[0]);
 +		return TCM_INVALID_CDB_FIELD;
 +	}
 +	return TCM_NO_SENSE;
 +}
 +
++=======
++>>>>>>> 984a9d4c40be (Revert "target: Fix VERIFY and WRITE VERIFY command parsing")
  sense_reason_t
  sbc_parse_cdb(struct se_cmd *cmd, struct sbc_ops *ops)
  {
@@@ -963,12 -912,6 +967,15 @@@
  		cmd->se_cmd_flags |= SCF_SCSI_DATA_CDB;
  		cmd->execute_cmd = sbc_execute_rw;
  		break;
++<<<<<<< HEAD
 +	case WRITE_VERIFY:
 +		ret = sbc_parse_verify(cmd, &sectors, &size);
 +		if (ret)
 +			return ret;
 +		cmd->execute_cmd = sbc_execute_rw;
 +		goto check_lba;
++=======
++>>>>>>> 984a9d4c40be (Revert "target: Fix VERIFY and WRITE VERIFY command parsing")
  	case WRITE_12:
  		sectors = transport_get_sectors_12(cdb);
  		cmd->t_task_lba = transport_lba_32(cdb);
* Unmerged path drivers/target/target_core_sbc.c
