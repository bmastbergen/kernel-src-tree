PCI: Use helper functions to access fields in struct msi_desc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [pci] Use helper functions to access fields in struct msi_desc (Myron Stowe) [1523998]
Rebuild_FUZZ: 95.73%
commit-author Jiang Liu <jiang.liu@linux.intel.com>
commit e39758e0ea769e632e5e3c9f314160e55c2153ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e39758e0.failed

Use helper functions to access fields in struct msi_desc, so we could
easily refine msi_desc later.

	Signed-off-by: Jiang Liu <jiang.liu@linux.intel.com>
	Reviewed-by: Yijing Wang <wangyijing@huawei.com>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: Bjorn Helgaas <bhelgaas@google.com>
	Cc: Grant Likely <grant.likely@linaro.org>
	Cc: Marc Zyngier <marc.zyngier@arm.com>
	Cc: Stuart Yoder <stuart.yoder@freescale.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Murali Karicheri <m-karicheri2@ti.com>
	Cc: Jingoo Han <jingoohan1@gmail.com>
	Cc: Pratyush Anand <pratyush.anand@gmail.com>
	Cc: Michal Simek <michal.simek@xilinx.com>
	Cc: Soeren Brinkmann <soren.brinkmann@xilinx.com>
	Cc: Srikanth Thokala <sthokal@xilinx.com>
	Cc: Rob Herring <robh@kernel.org>
Link: http://lkml.kernel.org/r/1436428847-8886-9-git-send-email-jiang.liu@linux.intel.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit e39758e0ea769e632e5e3c9f314160e55c2153ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/host/pci-keystone-dw.c
#	drivers/pci/host/pcie-designware.c
#	drivers/pci/host/pcie-xilinx.c
* Unmerged path drivers/pci/host/pci-keystone-dw.c
* Unmerged path drivers/pci/host/pcie-designware.c
* Unmerged path drivers/pci/host/pcie-xilinx.c
* Unmerged path drivers/pci/host/pci-keystone-dw.c
* Unmerged path drivers/pci/host/pcie-designware.c
* Unmerged path drivers/pci/host/pcie-xilinx.c
diff --git a/drivers/pci/msi.c b/drivers/pci/msi.c
index 49ffa5581f51..9b55e294e363 100644
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@ -157,7 +157,8 @@ u32 default_msi_mask_irq(struct msi_desc *desc, u32 mask, u32 flag)
 
 	mask_bits &= ~mask;
 	mask_bits |= flag;
-	pci_write_config_dword(desc->dev, desc->mask_pos, mask_bits);
+	pci_write_config_dword(msi_desc_to_pci_dev(desc), desc->mask_pos,
+			       mask_bits);
 
 	return mask_bits;
 }
@@ -244,7 +245,9 @@ void default_restore_msi_irqs(struct pci_dev *dev)
 
 void __read_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 {
-	BUG_ON(entry->dev->current_state != PCI_D0);
+	struct pci_dev *dev = msi_desc_to_pci_dev(entry);
+
+	BUG_ON(dev->current_state != PCI_D0);
 
 	if (entry->msi_attrib.is_msix) {
 		void __iomem *base = pci_msix_desc_addr(entry);
@@ -253,7 +256,6 @@ void __read_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 		msg->address_hi = readl(base + PCI_MSIX_ENTRY_UPPER_ADDR);
 		msg->data = readl(base + PCI_MSIX_ENTRY_DATA);
 	} else {
-		struct pci_dev *dev = entry->dev;
 		int pos = dev->msi_cap;
 		u16 data;
 
@@ -298,7 +300,9 @@ EXPORT_SYMBOL_GPL(get_cached_msi_msg);
 
 void __write_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 {
-	if (entry->dev->current_state != PCI_D0) {
+	struct pci_dev *dev = msi_desc_to_pci_dev(entry);
+
+	if (dev->current_state != PCI_D0) {
 		/* Don't touch the hardware now */
 	} else if (entry->msi_attrib.is_msix) {
 		void __iomem *base = pci_msix_desc_addr(entry);
@@ -307,7 +311,6 @@ void __write_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 		writel(msg->address_hi, base + PCI_MSIX_ENTRY_UPPER_ADDR);
 		writel(msg->data, base + PCI_MSIX_ENTRY_DATA);
 	} else {
-		struct pci_dev *dev = entry->dev;
 		int pos = dev->msi_cap;
 		u16 msgctl;
 
