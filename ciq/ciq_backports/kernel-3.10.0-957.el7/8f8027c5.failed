mailbox: PCC: erroneous error message when parsing ACPI PCCT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mailbox] pcc: erroneous error message when parsing ACPI PCCT (Al Stone) [1568211]
Rebuild_FUZZ: 91.89%
commit-author Al Stone <ahs3@redhat.com>
commit 8f8027c5f935bf02bdc8806c109ddbb0e402283c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/8f8027c5.failed

There have been multiple reports of the following error message:

[    0.068293] Error parsing PCC subspaces from PCCT

This error message is not correct.  In multiple cases examined, the PCCT
(Platform Communications Channel Table) concerned is actually properly
constructed; the problem is that acpi_pcc_probe() which reads the PCCT
is making the assumption that the only valid PCCT is one that contains
subtables of one of two types: ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE or
ACPI_PCCT_TYPE_HW_REDUCED_TYPE2.  The number of subtables of these
types are counted and as long as there is at least one of the desired
types, the acpi_pcc_probe() succeeds.  When no subtables of these types
are found, regardless of whether or not any other subtable types are
present, the error mentioned above is reported.

In the cases reported to me personally, the PCCT contains exactly one
subtable of type ACPI_PCCT_TYPE_GENERIC_SUBSPACE.  The function
acpi_pcc_probe() does not count it as a valid subtable, so believes
there to be no valid subtables, and hence outputs the error message.

An example of the PCCT being reported as erroneous yet perfectly fine
is the following:

                    Signature : "PCCT"
                 Table Length : 0000006E
                     Revision : 05
                     Checksum : A9
                       Oem ID : "XXXXXX"
                 Oem Table ID : "XXXXX   "
                 Oem Revision : 00002280
              Asl Compiler ID : "XXXX"
        Asl Compiler Revision : 00000002

        Flags (decoded below) : 00000001
                     Platform : 1
                     Reserved : 0000000000000000

                Subtable Type : 00 [Generic Communications Subspace]
                       Length : 3E

                     Reserved : 000000000000
                 Base Address : 00000000DCE43018
               Address Length : 0000000000001000

            Doorbell Register : [Generic Address Structure]
                     Space ID : 01 [SystemIO]
                    Bit Width : 08
                   Bit Offset : 00
         Encoded Access Width : 01 [Byte Access:8]
                      Address : 0000000000001842

                Preserve Mask : 00000000000000FD
                   Write Mask : 0000000000000002
              Command Latency : 00001388
          Maximum Access Rate : 00000000
      Minimum Turnaround Time : 0000

To fix this, we count up all of the possible subtable types for the
PCCT, and only report an error when there are none (which could mean
either no subtables, or no valid subtables), or there are too many.
We also change the logic so that if there is a valid subtable, we
do try to initialize it per the PCCT subtable contents.  This is a
change in functionality; previously, the probe would have returned
right after the error message and would not have tried to use any
other subtable definition.

Tested on my personal laptop which showed the error previously; the
error message no longer appears and the laptop appears to operate
normally.

	Signed-off-by: Al Stone <ahs3@redhat.com>
	Reviewed-by: Prashanth Prakash <pprakash@codeaurora.org>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 8f8027c5f935bf02bdc8806c109ddbb0e402283c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mailbox/pcc.c
diff --cc drivers/mailbox/pcc.c
index f04f0a14eb47,fc3c237daef2..000000000000
--- a/drivers/mailbox/pcc.c
+++ b/drivers/mailbox/pcc.c
@@@ -209,19 -385,49 +209,23 @@@ static const struct mbox_chan_ops pcc_c
  static int parse_pcc_subspace(struct acpi_subtable_header *header,
  		const unsigned long end)
  {
- 	struct acpi_pcct_hw_reduced *pcct_ss;
+ 	struct acpi_pcct_subspace *ss = (struct acpi_pcct_subspace *) header;
  
- 	if (pcc_mbox_ctrl.num_chans <= MAX_PCC_SUBSPACES) {
- 		pcct_ss = (struct acpi_pcct_hw_reduced *) header;
+ 	if (ss->header.type < ACPI_PCCT_TYPE_RESERVED)
+ 		return 0;
  
 -	return -EINVAL;
 -}
 -
 -/**
 - * pcc_parse_subspace_irq - Parse the PCC IRQ and PCC ACK register
 - *		There should be one entry per PCC client.
 - * @id: PCC subspace index.
 - * @pcct_ss: Pointer to the ACPI subtable header under the PCCT.
 - *
 - * Return: 0 for Success, else errno.
 - *
 - * This gets called for each entry in the PCC table.
 - */
 -static int pcc_parse_subspace_irq(int id,
 -				  struct acpi_pcct_hw_reduced *pcct_ss)
 -{
 -	pcc_doorbell_irq[id] = pcc_map_interrupt(pcct_ss->platform_interrupt,
 -						 (u32)pcct_ss->flags);
 -	if (pcc_doorbell_irq[id] <= 0) {
 -		pr_err("PCC GSI %d not registered\n",
 -		       pcct_ss->platform_interrupt);
 -		return -EINVAL;
 -	}
 -
 -	if (pcct_ss->header.type
 -		== ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE_TYPE2) {
 -		struct acpi_pcct_hw_reduced_type2 *pcct2_ss = (void *)pcct_ss;
 -
 -		pcc_doorbell_ack_vaddr[id] = acpi_os_ioremap(
 -				pcct2_ss->platform_ack_register.address,
 -				pcct2_ss->platform_ack_register.bit_width / 8);
 -		if (!pcc_doorbell_ack_vaddr[id]) {
 -			pr_err("Failed to ioremap PCC ACK register\n");
 -			return -ENOMEM;
++<<<<<<< HEAD
 +		if (pcct_ss->header.type !=
 +				ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE) {
 +			pr_err("Incorrect PCC Subspace type detected\n");
 +			return -EINVAL;
  		}
  	}
  
  	return 0;
++=======
++	return -EINVAL;
++>>>>>>> 8f8027c5f935 (mailbox: PCC: erroneous error message when parsing ACPI PCCT)
  }
  
  /**
@@@ -231,10 -437,11 +235,16 @@@
   */
  static int __init acpi_pcc_probe(void)
  {
 +	acpi_size pcct_tbl_header_size;
  	struct acpi_table_header *pcct_tbl;
  	struct acpi_subtable_header *pcct_entry;
++<<<<<<< HEAD
 +	int count, i;
++=======
+ 	struct acpi_table_pcct *acpi_pcct_tbl;
+ 	struct acpi_subtable_proc proc[ACPI_PCCT_TYPE_RESERVED];
+ 	int count, i, rc;
++>>>>>>> 8f8027c5f935 (mailbox: PCC: erroneous error message when parsing ACPI PCCT)
  	acpi_status status = AE_OK;
  
  	/* Search for PCCT */
@@@ -245,30 -450,78 +255,102 @@@
  	if (ACPI_FAILURE(status) || !pcct_tbl)
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	count = acpi_table_parse_entries(ACPI_SIG_PCCT,
 +			sizeof(struct acpi_table_pcct),
 +			ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE,
 +			parse_pcc_subspace, MAX_PCC_SUBSPACES);
 +
 +	if (count <= 0) {
 +		pr_err("Error parsing PCC subspaces from PCCT\n");
 +		return -EINVAL;
 +	}
 +
 +	pcc_mbox_channels = kzalloc(sizeof(struct mbox_chan) *
 +			count, GFP_KERNEL);
 +
++=======
+ 	/* Set up the subtable handlers */
+ 	for (i = ACPI_PCCT_TYPE_GENERIC_SUBSPACE;
+ 	     i < ACPI_PCCT_TYPE_RESERVED; i++) {
+ 		proc[i].id = i;
+ 		proc[i].count = 0;
+ 		proc[i].handler = parse_pcc_subspace;
+ 	}
+ 
+ 	count = acpi_table_parse_entries_array(ACPI_SIG_PCCT,
+ 			sizeof(struct acpi_table_pcct), proc,
+ 			ACPI_PCCT_TYPE_RESERVED, MAX_PCC_SUBSPACES);
+ 	if (count == 0 || count > MAX_PCC_SUBSPACES) {
+ 		pr_warn("Invalid PCCT: %d PCC subspaces\n", count);
+ 		return -EINVAL;
+ 	}
+ 
+ 	pcc_mbox_channels = kzalloc(sizeof(struct mbox_chan) * count, GFP_KERNEL);
++>>>>>>> 8f8027c5f935 (mailbox: PCC: erroneous error message when parsing ACPI PCCT)
  	if (!pcc_mbox_channels) {
  		pr_err("Could not allocate space for PCC mbox channels\n");
  		return -ENOMEM;
  	}
  
++<<<<<<< HEAD
++=======
+ 	pcc_doorbell_vaddr = kcalloc(count, sizeof(void *), GFP_KERNEL);
+ 	if (!pcc_doorbell_vaddr) {
+ 		rc = -ENOMEM;
+ 		goto err_free_mbox;
+ 	}
+ 
+ 	pcc_doorbell_ack_vaddr = kcalloc(count, sizeof(void *), GFP_KERNEL);
+ 	if (!pcc_doorbell_ack_vaddr) {
+ 		rc = -ENOMEM;
+ 		goto err_free_db_vaddr;
+ 	}
+ 
+ 	pcc_doorbell_irq = kcalloc(count, sizeof(int), GFP_KERNEL);
+ 	if (!pcc_doorbell_irq) {
+ 		rc = -ENOMEM;
+ 		goto err_free_db_ack_vaddr;
+ 	}
+ 
++>>>>>>> 8f8027c5f935 (mailbox: PCC: erroneous error message when parsing ACPI PCCT)
  	/* Point to the first PCC subspace entry */
  	pcct_entry = (struct acpi_subtable_header *) (
  		(unsigned long) pcct_tbl + sizeof(struct acpi_table_pcct));
  
++<<<<<<< HEAD
++	for (i = 0; i < count; i++) {
++		pcc_mbox_channels[i].con_priv = pcct_entry;
++=======
+ 	acpi_pcct_tbl = (struct acpi_table_pcct *) pcct_tbl;
+ 	if (acpi_pcct_tbl->flags & ACPI_PCCT_DOORBELL)
+ 		pcc_mbox_ctrl.txdone_irq = true;
+ 
  	for (i = 0; i < count; i++) {
+ 		struct acpi_generic_address *db_reg;
+ 		struct acpi_pcct_subspace *pcct_ss;
  		pcc_mbox_channels[i].con_priv = pcct_entry;
+ 
+ 		if (pcct_entry->type == ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE ||
+ 		    pcct_entry->type == ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE_TYPE2) {
+ 			struct acpi_pcct_hw_reduced *pcct_hrss;
+ 
+ 			pcct_hrss = (struct acpi_pcct_hw_reduced *) pcct_entry;
+ 
+ 			if (pcc_mbox_ctrl.txdone_irq) {
+ 				rc = pcc_parse_subspace_irq(i, pcct_hrss);
+ 				if (rc < 0)
+ 					goto err;
+ 			}
+ 		}
+ 		pcct_ss = (struct acpi_pcct_subspace *) pcct_entry;
+ 
+ 		/* If doorbell is in system memory cache the virt address */
+ 		db_reg = &pcct_ss->doorbell_register;
+ 		if (db_reg->space_id == ACPI_ADR_SPACE_SYSTEM_MEMORY)
+ 			pcc_doorbell_vaddr[i] = acpi_os_ioremap(db_reg->address,
+ 							db_reg->bit_width/8);
++>>>>>>> 8f8027c5f935 (mailbox: PCC: erroneous error message when parsing ACPI PCCT)
  		pcct_entry = (struct acpi_subtable_header *)
  			((unsigned long) pcct_entry + pcct_entry->length);
  	}
* Unmerged path drivers/mailbox/pcc.c
