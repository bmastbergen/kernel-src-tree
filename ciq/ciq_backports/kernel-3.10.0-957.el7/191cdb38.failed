veth: Be more robust on network device creation when no attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Serhey Popovych <serhe.popovych@gmail.com>
commit 191cdb3822e5df6b3c8b9f8cb8c4bf93f6cc90c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/191cdb38.failed

There are number of problems with configuration peer
network device in absence of IFLA_VETH_PEER attributes
where attributes for main network device shared with
peer.

First it is not feasible to configure both network
devices with same MAC address since this makes
communication in such configuration problematic.

This case can be reproduced with following sequence:

  # ip link add address 02:11:22:33:44:55 type veth
  # ip li sh
  ...
  26: veth0@veth1: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc \
  noop state DOWN mode DEFAULT qlen 1000
      link/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff
  27: veth1@veth0: <BROADCAST,MULTICAST,M-DOWN> mtu 1500 qdisc \
  noop state DOWN mode DEFAULT qlen 1000
      link/ether 00:11:22:33:44:55 brd ff:ff:ff:ff:ff:ff

Second it is not possible to register both main and
peer network devices with same name, that happens
when name for main interface is given with IFLA_IFNAME
and same attribute reused for peer.

This case can be reproduced with following sequence:

  # ip link add dev veth1a type veth
  RTNETLINK answers: File exists

To fix both of the cases check if corresponding netlink
attributes are taken from peer_tb when valid or
name based on rtnl ops kind and random address is used.

	Signed-off-by: Serhey Popovych <serhe.popovych@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 191cdb3822e5df6b3c8b9f8cb8c4bf93f6cc90c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/veth.c
diff --cc drivers/net/veth.c
index 1635886c154c,364fa9d11d1a..000000000000
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@@ -371,10 -383,13 +371,14 @@@ static int veth_newlink(struct net *src
  		tbp = tb;
  	}
  
++<<<<<<< HEAD
 +	if (tbp[IFLA_IFNAME])
++=======
+ 	if (ifmp && tbp[IFLA_IFNAME]) {
++>>>>>>> 191cdb3822e5 (veth: Be more robust on network device creation when no attributes)
  		nla_strlcpy(ifname, tbp[IFLA_IFNAME], IFNAMSIZ);
 -		name_assign_type = NET_NAME_USER;
 -	} else {
 +	else
  		snprintf(ifname, IFNAMSIZ, DRV_NAME "%%d");
 -		name_assign_type = NET_NAME_ENUM;
 -	}
  
  	net = rtnl_link_get_net(src_net, tbp);
  	if (IS_ERR(net))
* Unmerged path drivers/net/veth.c
