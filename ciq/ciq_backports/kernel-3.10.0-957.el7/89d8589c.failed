lib/scatterlist: Introduce and export __sg_alloc_table_from_pages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Tvrtko Ursulin <tvrtko.ursulin@intel.com>
commit 89d8589cd72c6f48b19c370517d16f3ee23909df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/89d8589c.failed

Drivers like i915 benefit from being able to control the maxium
size of the sg coalesced segment while building the scatter-
gather list.

Introduce and export the __sg_alloc_table_from_pages function
which will allow it that control.

v2: Reorder parameters. (Chris Wilson)
v3: Fix incomplete reordering in v2.
v4: max_segment needs to be page aligned.
v5: Rebase.
v6: Rebase.
v7: Fix spelling in commit and mention max segment size in
    __sg_alloc_table_from_pages kerneldoc. (Andrew Morton)

	Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
	Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
	Cc: linux-kernel@vger.kernel.org
	Cc: Chris Wilson <chris@chris-wilson.co.uk>
	Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
Link: https://patchwork.freedesktop.org/patch/msgid/20170803091351.23594-1-tvrtko.ursulin@linux.intel.com
(cherry picked from commit 89d8589cd72c6f48b19c370517d16f3ee23909df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/scatterlist.h
#	lib/scatterlist.c
diff --cc include/linux/scatterlist.h
index c057e0ebe7b9,874b50c232de..000000000000
--- a/include/linux/scatterlist.h
+++ b/include/linux/scatterlist.h
@@@ -235,10 -267,13 +235,20 @@@ void sg_free_table(struct sg_table *)
  int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int,
  		     struct scatterlist *, gfp_t, sg_alloc_fn *);
  int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
++<<<<<<< HEAD
 +int sg_alloc_table_from_pages(struct sg_table *sgt,
 +	struct page **pages, unsigned int n_pages,
 +	unsigned long offset, unsigned long size,
 +	gfp_t gfp_mask);
++=======
+ int __sg_alloc_table_from_pages(struct sg_table *sgt, struct page **pages,
+ 				unsigned int n_pages, unsigned int offset,
+ 				unsigned long size, unsigned int max_segment,
+ 				gfp_t gfp_mask);
+ int sg_alloc_table_from_pages(struct sg_table *sgt, struct page **pages,
+ 			      unsigned int n_pages, unsigned int offset,
+ 			      unsigned long size, gfp_t gfp_mask);
++>>>>>>> 89d8589cd72c (lib/scatterlist: Introduce and export __sg_alloc_table_from_pages)
  
  size_t sg_copy_buffer(struct scatterlist *sgl, unsigned int nents, void *buf,
  		      size_t buflen, off_t skip, bool to_buffer);
diff --cc lib/scatterlist.c
index c736fa14d666,7c1c55f7daaa..000000000000
--- a/lib/scatterlist.c
+++ b/lib/scatterlist.c
@@@ -391,22 -390,29 +392,34 @@@ EXPORT_SYMBOL(sg_alloc_table)
   * Returns:
   *   0 on success, negative error on failure
   */
++<<<<<<< HEAD
 +int sg_alloc_table_from_pages(struct sg_table *sgt,
 +	struct page **pages, unsigned int n_pages,
 +	unsigned long offset, unsigned long size,
 +	gfp_t gfp_mask)
 +{
 +	unsigned int chunks;
 +	unsigned int i;
 +	unsigned int cur_page;
++=======
+ int __sg_alloc_table_from_pages(struct sg_table *sgt, struct page **pages,
+ 				unsigned int n_pages, unsigned int offset,
+ 				unsigned long size, unsigned int max_segment,
+ 				gfp_t gfp_mask)
+ {
+ 	unsigned int chunks, cur_page, seg_len, i;
++>>>>>>> 89d8589cd72c (lib/scatterlist: Introduce and export __sg_alloc_table_from_pages)
  	int ret;
  	struct scatterlist *s;
  
+ 	if (WARN_ON(!max_segment || offset_in_page(max_segment)))
+ 		return -EINVAL;
+ 
  	/* compute number of contiguous chunks */
  	chunks = 1;
 -	seg_len = 0;
 -	for (i = 1; i < n_pages; i++) {
 -		seg_len += PAGE_SIZE;
 -		if (seg_len >= max_segment ||
 -		    page_to_pfn(pages[i]) != page_to_pfn(pages[i - 1]) + 1) {
 -			chunks++;
 -			seg_len = 0;
 -		}
 -	}
 +	for (i = 1; i < n_pages; ++i)
 +		if (page_to_pfn(pages[i]) != page_to_pfn(pages[i - 1]) + 1)
 +			++chunks;
  
  	ret = sg_alloc_table(sgt, chunks, gfp_mask);
  	if (unlikely(ret))
* Unmerged path include/linux/scatterlist.h
* Unmerged path lib/scatterlist.c
