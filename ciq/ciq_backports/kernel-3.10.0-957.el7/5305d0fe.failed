i40e: Fix multiple issues with UDP tunnel offload filter configuration

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alexander Duyck <alexander.h.duyck@intel.com>
commit 5305d0fe2f22ec42b19f5ed205faad9b26955e5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5305d0fe.failed

This fixes at least 2 issues I have found with the UDP tunnel filter
configuration.

The first issue is the fact that the tunnels didn't have any sort of mutual
exclusion in place to prevent an update from racing with a user request to
add/remove a port. As such you could request to add and remove a port
before the port update code had a chance to respond which would result in a
very confusing result. To address it I have added 2 changes. First I added
the RTNL mutex wrapper around our updating of the pending, port, and
filter_index bits. Second I added logic so that we cannot use a port that
has a pending deletion since we need to free the space in hardware before
we can allow software to reuse it.

The second issue addressed is the fact that we were not recording the
actual filter index provided to us by the admin queue. As a result we were
deleting filters that were not associated with the actual filter we wanted
to delete. To fix that I added a filter_index member to the UDP port
tracking structure.

	Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 5305d0fe2f22ec42b19f5ed205faad9b26955e5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 3db54f062cec,0babde10fa15..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -8836,10 -9712,11 +8836,15 @@@ static void i40e_sync_udp_filters_subta
  	u16 port;
  	int i;
  
 -	if (!test_and_clear_bit(__I40E_UDP_FILTER_SYNC_PENDING, pf->state))
 +	if (!(pf->flags & I40E_FLAG_UDP_FILTER_SYNC))
  		return;
  
++<<<<<<< HEAD
 +	pf->flags &= ~I40E_FLAG_UDP_FILTER_SYNC;
++=======
+ 	/* acquire RTNL to maintain state of flags and port requests */
+ 	rtnl_lock();
++>>>>>>> 5305d0fe2f22 (i40e: Fix multiple issues with UDP tunnel offload filter configuration)
  
  	for (i = 0; i < I40E_MAX_PF_UDP_OFFLOAD_PORTS; i++) {
  		if (pf->pending_udp_bitmap & BIT_ULL(i)) {
@@@ -10500,8 -11445,9 +10538,9 @@@ static void i40e_udp_tunnel_add(struct 
  
  	/* New port: add it and mark its index in the bitmap */
  	pf->udp_ports[next_idx].port = port;
+ 	pf->udp_ports[next_idx].filter_index = I40E_UDP_PORT_INDEX_UNUSED;
  	pf->pending_udp_bitmap |= BIT_ULL(next_idx);
 -	set_bit(__I40E_UDP_FILTER_SYNC_PENDING, pf->state);
 +	pf->flags |= I40E_FLAG_UDP_FILTER_SYNC;
  }
  
  /**
@@@ -10541,8 -11487,13 +10580,18 @@@ static void i40e_udp_tunnel_del(struct 
  	 * and make it pending
  	 */
  	pf->udp_ports[idx].port = 0;
++<<<<<<< HEAD
 +	pf->pending_udp_bitmap |= BIT_ULL(idx);
 +	pf->flags |= I40E_FLAG_UDP_FILTER_SYNC;
++=======
+ 
+ 	/* Toggle pending bit instead of setting it. This way if we are
+ 	 * deleting a port that has yet to be added we just clear the pending
+ 	 * bit and don't have to worry about it.
+ 	 */
+ 	pf->pending_udp_bitmap ^= BIT_ULL(idx);
+ 	set_bit(__I40E_UDP_FILTER_SYNC_PENDING, pf->state);
++>>>>>>> 5305d0fe2f22 (i40e: Fix multiple issues with UDP tunnel offload filter configuration)
  
  	return;
  not_found:
diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index 1d5305235e57..559ed8811d20 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -277,10 +277,12 @@ struct i40e_tc_configuration {
 	struct i40e_tc_info tc_info[I40E_MAX_TRAFFIC_CLASS];
 };
 
+#define I40E_UDP_PORT_INDEX_UNUSED	255
 struct i40e_udp_port_config {
 	/* AdminQ command interface expects port number in Host byte order */
 	u16 port;
 	u8 type;
+	u8 filter_index;
 };
 
 /* macros related to FLX_PIT */
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
