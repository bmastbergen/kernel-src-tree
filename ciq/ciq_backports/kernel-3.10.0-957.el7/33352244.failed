jump_label: Explicitly disable jump labels in __init code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 33352244706369ea6736781ae41fe41692eb69bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/33352244.failed

After initmem has been freed, any jump labels in __init code are
prevented from being written to by the kernel_text_address() check in
__jump_label_update().  However, this check is quite broad.  If
kernel_text_address() were to return false for any other reason, the
jump label write would fail silently with no warning.

For jump labels in module init code, entry->code is set to zero to
indicate that the entry is disabled.  Do the same thing for core kernel
init code.  This makes the behavior more consistent, and will also make
it more straightforward to detect non-init jump label write failures in
the next patch.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Jason Baron <jbaron@akamai.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/c52825c73f3a174e8398b6898284ec20d4deb126.1519051220.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 33352244706369ea6736781ae41fe41692eb69bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	init/main.c
#	kernel/jump_label.c
diff --cc init/main.c
index 085c9c599e87,969eaf140ef0..000000000000
--- a/init/main.c
+++ b/init/main.c
@@@ -70,15 -74,22 +70,21 @@@
  #include <linux/shmem_fs.h>
  #include <linux/slab.h>
  #include <linux/perf_event.h>
 +#include <linux/file.h>
  #include <linux/ptrace.h>
 -#include <linux/pti.h>
 +#include <linux/kaiser.h>
  #include <linux/blkdev.h>
  #include <linux/elevator.h>
 -#include <linux/sched_clock.h>
 -#include <linux/sched/task.h>
 -#include <linux/sched/task_stack.h>
 -#include <linux/context_tracking.h>
  #include <linux/random.h>
 +#include <linux/context_tracking.h>
  #include <linux/list.h>
 -#include <linux/integrity.h>
 -#include <linux/proc_ns.h>
  #include <linux/io.h>
++<<<<<<< HEAD
++=======
+ #include <linux/cache.h>
+ #include <linux/rodata_test.h>
+ #include <linux/jump_label.h>
++>>>>>>> 333522447063 (jump_label: Explicitly disable jump labels in __init code)
  
  #include <asm/io.h>
  #include <asm/bugs.h>
@@@ -907,8 -998,12 +913,13 @@@ static int __ref kernel_init(void *unus
  	kernel_init_freeable();
  	/* need to finish all async __init code before freeing the memory */
  	async_synchronize_full();
++<<<<<<< HEAD
++=======
+ 	ftrace_free_init_mem();
+ 	jump_label_invalidate_init();
++>>>>>>> 333522447063 (jump_label: Explicitly disable jump labels in __init code)
  	free_initmem();
 -	mark_readonly();
 +	mark_rodata_ro();
  	system_state = SYSTEM_RUNNING;
  	numa_default_policy();
  
diff --cc kernel/jump_label.c
index e045bd4ec2a0,b71776576a66..000000000000
--- a/kernel/jump_label.c
+++ b/kernel/jump_label.c
@@@ -15,6 -15,8 +15,11 @@@
  #include <linux/static_key.h>
  #include <linux/jump_label_ratelimit.h>
  #include <linux/bug.h>
++<<<<<<< HEAD
++=======
+ #include <linux/cpu.h>
+ #include <asm/sections.h>
++>>>>>>> 333522447063 (jump_label: Explicitly disable jump labels in __init code)
  
  #ifdef HAVE_JUMP_LABEL
  
@@@ -246,10 -415,35 +251,24 @@@ void __init jump_label_init(void
  	}
  	static_key_initialized = true;
  	jump_label_unlock();
 -	cpus_read_unlock();
  }
  
+ /* Disable any jump label entries in __init code */
+ void __init jump_label_invalidate_init(void)
+ {
+ 	struct jump_entry *iter_start = __start___jump_table;
+ 	struct jump_entry *iter_stop = __stop___jump_table;
+ 	struct jump_entry *iter;
+ 
+ 	for (iter = iter_start; iter < iter_stop; iter++) {
+ 		if (iter->code >= (unsigned long)_sinittext &&
+ 		    iter->code < (unsigned long)_einittext)
+ 			iter->code = 0;
+ 	}
+ }
+ 
  #ifdef CONFIG_MODULES
  
 -static enum jump_label_type jump_label_init_type(struct jump_entry *entry)
 -{
 -	struct static_key *key = jump_entry_key(entry);
 -	bool type = static_key_type(key);
 -	bool branch = jump_entry_branch(entry);
 -
 -	/* See the comment in linux/jump_label.h */
 -	return type ^ branch;
 -}
 -
  struct static_key_mod {
  	struct static_key_mod *next;
  	struct jump_entry *entries;
diff --git a/include/linux/jump_label.h b/include/linux/jump_label.h
index 20231da4f668..b9247e9c83cf 100644
--- a/include/linux/jump_label.h
+++ b/include/linux/jump_label.h
@@ -109,6 +109,7 @@ extern struct jump_entry __start___jump_table[];
 extern struct jump_entry __stop___jump_table[];
 
 extern void jump_label_init(void);
+extern void jump_label_invalidate_init(void);
 extern void jump_label_lock(void);
 extern void jump_label_unlock(void);
 extern void arch_jump_label_transform(struct jump_entry *entry,
@@ -147,6 +148,8 @@ static __always_inline void jump_label_init(void)
 	static_key_initialized = true;
 }
 
+static inline void jump_label_invalidate_init(void) {}
+
 static __always_inline bool static_key_false(struct static_key *key)
 {
 	if (unlikely(atomic_read(&key->enabled)) > 0)
* Unmerged path init/main.c
* Unmerged path kernel/jump_label.c
