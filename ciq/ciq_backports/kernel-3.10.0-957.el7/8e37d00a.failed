memremap: provide stubs for vmem_altmap_offset and vmem_altmap_free

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 8e37d00a850160bbfadbb3bf4ce49539770c5d2c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/8e37d00a.failed

Currently all calls to those functions are eliminated by the compiler when
CONFIG_ZONE_DEVICE is not set, but this soon won't be the case.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 8e37d00a850160bbfadbb3bf4ce49539770c5d2c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/memremap.h
diff --cc include/linux/memremap.h
index c4c41ebb44e1,d5a6736d9737..000000000000
--- a/include/linux/memremap.h
+++ b/include/linux/memremap.h
@@@ -23,10 -26,7 +23,14 @@@ struct vmem_altmap 
  	unsigned long alloc;
  };
  
++<<<<<<< HEAD
 +unsigned long vmem_altmap_offset(struct vmem_altmap *altmap);
 +void vmem_altmap_free(struct vmem_altmap *altmap, unsigned long nr_pfns);
 +
 +#if defined(CONFIG_SPARSEMEM_VMEMMAP) && defined(CONFIG_ZONE_DEVICE)
++=======
+ #ifdef CONFIG_ZONE_DEVICE
++>>>>>>> 8e37d00a8501 (memremap: provide stubs for vmem_altmap_offset and vmem_altmap_free)
  struct vmem_altmap *to_vmem_altmap(unsigned long memmap_start);
  #else
  static inline struct vmem_altmap *to_vmem_altmap(unsigned long memmap_start)
@@@ -123,12 -135,10 +127,19 @@@ void *devm_memremap_pages(struct devic
  		struct percpu_ref *ref, struct vmem_altmap *altmap);
  struct dev_pagemap *find_dev_pagemap(resource_size_t phys);
  
++<<<<<<< HEAD
 +static inline bool is_hmm_page(const struct page *page)
 +{
 +	/* See MEMORY_DEVICE_PRIVATE in include/linux/memory_hotplug.h */
 +	return ((page_zonenum(page) == ZONE_DEVICE) &&
 +		(page->pgmap->type == MEMORY_HMM));
 +}
++=======
+ unsigned long vmem_altmap_offset(struct vmem_altmap *altmap);
+ void vmem_altmap_free(struct vmem_altmap *altmap, unsigned long nr_pfns);
+ 
+ static inline bool is_zone_device_page(const struct page *page);
++>>>>>>> 8e37d00a8501 (memremap: provide stubs for vmem_altmap_offset and vmem_altmap_free)
  #else
  static inline void *devm_memremap_pages(struct device *dev,
  		struct resource *res, struct percpu_ref *ref,
@@@ -148,11 -158,30 +159,24 @@@ static inline struct dev_pagemap *find_
  	return NULL;
  }
  
++<<<<<<< HEAD
 +static inline bool is_hmm_page(const struct page *page)
 +{
 +	return false;
 +}
 +#endif
++=======
+ static inline unsigned long vmem_altmap_offset(struct vmem_altmap *altmap)
+ {
+ 	return 0;
+ }
+ 
+ static inline void vmem_altmap_free(struct vmem_altmap *altmap,
+ 		unsigned long nr_pfns)
+ {
+ }
+ #endif /* CONFIG_ZONE_DEVICE */
 -
 -#if defined(CONFIG_DEVICE_PRIVATE) || defined(CONFIG_DEVICE_PUBLIC)
 -static inline bool is_device_private_page(const struct page *page)
 -{
 -	return is_zone_device_page(page) &&
 -		page->pgmap->type == MEMORY_DEVICE_PRIVATE;
 -}
 -
 -static inline bool is_device_public_page(const struct page *page)
 -{
 -	return is_zone_device_page(page) &&
 -		page->pgmap->type == MEMORY_DEVICE_PUBLIC;
 -}
 -#endif /* CONFIG_DEVICE_PRIVATE || CONFIG_DEVICE_PUBLIC */
++>>>>>>> 8e37d00a8501 (memremap: provide stubs for vmem_altmap_offset and vmem_altmap_free)
  
  /**
   * get_dev_pagemap() - take a new live reference on the dev_pagemap for @pfn
* Unmerged path include/linux/memremap.h
