mlxsw: spectrum: Distinguish between IPv4/6 tunnels

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Petr Machata <petrm@mellanox.com>
commit e437f3b62d0844c4073c9e13263413748fa69093
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e437f3b6.failed

struct ip_tunnel_parm, where GRE and several other tunnel types hold
information, is IPv4-specific. The current router / ipip code in mlxsw
however uses it as if it were generic.

Make it clear that it's not. Rename many functions from _params_ to
_params4_. mlxsw_sp_ipip_parms_saddr() and _daddr() take a proto
argument to dispatch on it. Move the dispatch logic to
mlxsw_sp_ipip_netdev_saddr() and _daddr(), and replace with
single-protocol functions.

In struct mlxsw_sp_ipip_entry, move the "parms" field to a (for the time
being, singleton) union. Update users throughout.

	Signed-off-by: Petr Machata <petrm@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e437f3b62d0844c4073c9e13263413748fa69093)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.h
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.c
index f3136a080a2f,a1c4b1e63f8d..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.c
@@@ -288,6 -260,69 +261,72 @@@ mlxsw_sp_ipip_ol_loopback_config_gre4(s
  	};
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ mlxsw_sp_ipip_ol_netdev_change_gre4(struct mlxsw_sp *mlxsw_sp,
+ 				    struct mlxsw_sp_ipip_entry *ipip_entry,
+ 				    struct netlink_ext_ack *extack)
+ {
+ 	union mlxsw_sp_l3addr old_saddr, new_saddr;
+ 	union mlxsw_sp_l3addr old_daddr, new_daddr;
+ 	struct ip_tunnel_parm new_parms;
+ 	bool update_tunnel = false;
+ 	bool update_decap = false;
+ 	bool update_nhs = false;
+ 	int err = 0;
+ 
+ 	new_parms = mlxsw_sp_ipip_netdev_parms4(ipip_entry->ol_dev);
+ 
+ 	new_saddr = mlxsw_sp_ipip_parms4_saddr(new_parms);
+ 	old_saddr = mlxsw_sp_ipip_parms4_saddr(ipip_entry->parms4);
+ 	new_daddr = mlxsw_sp_ipip_parms4_daddr(new_parms);
+ 	old_daddr = mlxsw_sp_ipip_parms4_daddr(ipip_entry->parms4);
+ 
+ 	if (!mlxsw_sp_l3addr_eq(&new_saddr, &old_saddr)) {
+ 		u16 ul_tb_id = mlxsw_sp_ipip_dev_ul_tb_id(ipip_entry->ol_dev);
+ 
+ 		/* Since the local address has changed, if there is another
+ 		 * tunnel with a matching saddr, both need to be demoted.
+ 		 */
+ 		if (mlxsw_sp_ipip_demote_tunnel_by_saddr(mlxsw_sp,
+ 							 MLXSW_SP_L3_PROTO_IPV4,
+ 							 new_saddr, ul_tb_id,
+ 							 ipip_entry)) {
+ 			mlxsw_sp_ipip_entry_demote_tunnel(mlxsw_sp, ipip_entry);
+ 			return 0;
+ 		}
+ 
+ 		update_tunnel = true;
+ 	} else if ((mlxsw_sp_ipip_parms4_okey(ipip_entry->parms4) !=
+ 		    mlxsw_sp_ipip_parms4_okey(new_parms)) ||
+ 		   ipip_entry->parms4.link != new_parms.link) {
+ 		update_tunnel = true;
+ 	} else if (!mlxsw_sp_l3addr_eq(&new_daddr, &old_daddr)) {
+ 		update_nhs = true;
+ 	} else if (mlxsw_sp_ipip_parms4_ikey(ipip_entry->parms4) !=
+ 		   mlxsw_sp_ipip_parms4_ikey(new_parms)) {
+ 		update_decap = true;
+ 	}
+ 
+ 	if (update_tunnel)
+ 		err = __mlxsw_sp_ipip_entry_update_tunnel(mlxsw_sp, ipip_entry,
+ 							  true, true, true,
+ 							  extack);
+ 	else if (update_nhs)
+ 		err = __mlxsw_sp_ipip_entry_update_tunnel(mlxsw_sp, ipip_entry,
+ 							  false, false, true,
+ 							  extack);
+ 	else if (update_decap)
+ 		err = __mlxsw_sp_ipip_entry_update_tunnel(mlxsw_sp, ipip_entry,
+ 							  false, false, false,
+ 							  extack);
+ 
+ 	ipip_entry->parms4 = new_parms;
+ 	return err;
+ }
+ 
++>>>>>>> e437f3b62d08 (mlxsw: spectrum: Distinguish between IPv4/6 tunnels)
  static const struct mlxsw_sp_ipip_ops mlxsw_sp_ipip_gre4_ops = {
  	.dev_type = ARPHRD_IPGRE,
  	.ul_proto = MLXSW_SP_L3_PROTO_IPV4,
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.h
index 828374e42b97,a4ff5737eccc..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.h
@@@ -57,6 -57,9 +57,12 @@@ struct mlxsw_sp_ipip_entry 
  	struct mlxsw_sp_rif_ipip_lb *ol_lb;
  	struct mlxsw_sp_fib_entry *decap_fib_entry;
  	struct list_head ipip_list_node;
++<<<<<<< HEAD
++=======
+ 	union {
+ 		struct ip_tunnel_parm parms4;
+ 	};
++>>>>>>> e437f3b62d08 (mlxsw: spectrum: Distinguish between IPv4/6 tunnels)
  };
  
  struct mlxsw_sp_ipip_ops {
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index e997034e35df,d8aaf8fd9cc2..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -995,6 -1038,15 +997,18 @@@ mlxsw_sp_ipip_entry_alloc(struct mlxsw_
  
  	ipip_entry->ipipt = ipipt;
  	ipip_entry->ol_dev = ol_dev;
++<<<<<<< HEAD
++=======
+ 
+ 	switch (ipip_ops->ul_proto) {
+ 	case MLXSW_SP_L3_PROTO_IPV4:
+ 		ipip_entry->parms4 = mlxsw_sp_ipip_netdev_parms4(ol_dev);
+ 		break;
+ 	case MLXSW_SP_L3_PROTO_IPV6:
+ 		WARN_ON(1);
+ 		break;
+ 	}
++>>>>>>> e437f3b62d08 (mlxsw: spectrum: Distinguish between IPv4/6 tunnels)
  
  	return ipip_entry;
  
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_ipip.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
