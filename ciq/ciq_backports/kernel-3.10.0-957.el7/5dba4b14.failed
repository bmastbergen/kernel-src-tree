iio: ensure ret is initialized to zero before entering do loop

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] ensure ret is initialized to zero before entering do loop (Tony Camuso) [1559170]
Rebuild_FUZZ: 95.80%
commit-author Colin Ian King <colin.king@canonical.com>
commit 5dba4b14bafe801083d01e1f400816df7e5a8f2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/5dba4b14.failed

A recent fix to iio_buffer_read_first_n_outer removed ret from being set by
a return from wait_event_interruptible and also added a continue in a loop
which causes the variable ret to not be set when it reaches the end of the
loop.  Fix this by initializing ret to zero.

Also remove extraneous white space at the end of the loop.

Fixes: fcf68f3c0bb2a5 ("fix sched WARNING "do not call blocking ops when !TASK_RUNNING")
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Cc: <Stable@vger.kernel.org>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 5dba4b14bafe801083d01e1f400816df7e5a8f2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-buffer.c
diff --cc drivers/iio/industrialio-buffer.c
index f0b219d32278,158aaf44dd95..000000000000
--- a/drivers/iio/industrialio-buffer.c
+++ b/drivers/iio/industrialio-buffer.c
@@@ -63,7 -107,10 +63,14 @@@ ssize_t iio_buffer_read_first_n_outer(s
  {
  	struct iio_dev *indio_dev = filp->private_data;
  	struct iio_buffer *rb = indio_dev->buffer;
++<<<<<<< HEAD
 +	int ret;
++=======
+ 	DEFINE_WAIT_FUNC(wait, woken_wake_function);
+ 	size_t datum_size;
+ 	size_t to_wait;
+ 	int ret = 0;
++>>>>>>> 5dba4b14bafe (iio: ensure ret is initialized to zero before entering do loop)
  
  	if (!indio_dev->info)
  		return -ENODEV;
@@@ -88,7 -153,8 +95,12 @@@
  		ret = rb->access->read_first_n(rb, n, buf);
  		if (ret == 0 && (filp->f_flags & O_NONBLOCK))
  			ret = -EAGAIN;
++<<<<<<< HEAD
 +	 } while (ret == 0);
++=======
+ 	} while (ret == 0);
+ 	remove_wait_queue(&rb->pollq, &wait);
++>>>>>>> 5dba4b14bafe (iio: ensure ret is initialized to zero before entering do loop)
  
  	return ret;
  }
* Unmerged path drivers/iio/industrialio-buffer.c
