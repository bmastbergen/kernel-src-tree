md: raid1: retrieve page from pre-allocated resync page array

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [md] raid1: retrieve page from pre-allocated resync page array (Nigel Croxon) [1494474]
Rebuild_FUZZ: 96.61%
commit-author Ming Lei <tom.leiming@gmail.com>
commit 44cf0f4dc76b5e44e6a9c727be6902434f99a9bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/44cf0f4d.failed

Now one page array is allocated for each resync bio, and we can
retrieve page from this table directly.

	Signed-off-by: Ming Lei <tom.leiming@gmail.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit 44cf0f4dc76b5e44e6a9c727be6902434f99a9bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid1.c
diff --cc drivers/md/raid1.c
index adeb56feeb3d,21ef09ae5123..000000000000
--- a/drivers/md/raid1.c
+++ b/drivers/md/raid1.c
@@@ -1943,8 -2007,8 +1944,13 @@@ static int fix_sync_read_error(struct r
  				 */
  				rdev = conf->mirrors[d].rdev;
  				if (sync_page_io(rdev, sect, s<<9,
++<<<<<<< HEAD
 +						 bio->bi_io_vec[idx].bv_page,
 +						 READ, false)) {
++=======
+ 						 pages[idx],
+ 						 REQ_OP_READ, 0, false)) {
++>>>>>>> 44cf0f4dc76b (md: raid1: retrieve page from pre-allocated resync page array)
  					success = 1;
  					break;
  				}
@@@ -2087,20 -2152,19 +2093,23 @@@ static void process_checks(struct r1bi
  		int j;
  		struct bio *pbio = r1_bio->bios[primary];
  		struct bio *sbio = r1_bio->bios[i];
++<<<<<<< HEAD
 +		int uptodate = test_bit(BIO_UPTODATE, &sbio->bi_flags);
++=======
+ 		int error = sbio->bi_error;
+ 		struct page **ppages = get_resync_pages(pbio)->pages;
+ 		struct page **spages = get_resync_pages(sbio)->pages;
++>>>>>>> 44cf0f4dc76b (md: raid1: retrieve page from pre-allocated resync page array)
  
  		if (sbio->bi_end_io != end_sync_read)
  			continue;
 -		/* Now we can 'fixup' the error value */
 -		sbio->bi_error = 0;
 +		/* Now we can 'fixup' the BIO_UPTODATE flag */
 +		set_bit(BIO_UPTODATE, &sbio->bi_flags);
  
 -		if (!error) {
 +		if (uptodate) {
  			for (j = vcnt; j-- ; ) {
- 				struct page *p, *s;
- 				p = pbio->bi_io_vec[j].bv_page;
- 				s = sbio->bi_io_vec[j].bv_page;
- 				if (memcmp(page_address(p),
- 					   page_address(s),
+ 				if (memcmp(page_address(ppages[j]),
+ 					   page_address(spages[j]),
  					   sbio->bi_io_vec[j].bv_len))
  					break;
  			}
* Unmerged path drivers/md/raid1.c
