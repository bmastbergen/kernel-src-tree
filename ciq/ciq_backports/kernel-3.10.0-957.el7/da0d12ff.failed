watchdog: pretimeout: add panic pretimeout governor

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [watchdog] pretimeout: add panic pretimeout governor (David Arcari) [1576173]
Rebuild_FUZZ: 89.13%
commit-author Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
commit da0d12ff2b829a35e9921918e925d79497b82bef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/da0d12ff.failed

The change adds panic watchdog pretimeout governor, on watchdog
pretimeout event the kernel shall panic. In general watchdog
pretimeout event means that something essentially bad is going on the
system, for example a process scheduler stalls or watchdog feeder is
killed due to OOM, so printing out information attendant to panic and
before likely unavoidable reboot caused by a watchdog may help to
determine a root cause of the issue.

	Signed-off-by: Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
	Reviewed-by: Guenter Roeck <linux@roeck-us.net>
	Reviewed-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
	Tested-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
(cherry picked from commit da0d12ff2b829a35e9921918e925d79497b82bef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/watchdog/Kconfig
#	drivers/watchdog/Makefile
#	drivers/watchdog/watchdog_pretimeout.c
#	drivers/watchdog/watchdog_pretimeout.h
diff --cc drivers/watchdog/Kconfig
index d321bee25827,cbd33321c0f8..000000000000
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@@ -1394,4 -1831,53 +1394,56 @@@ config USBPCWATCHDO
  
  	  Most people will say N.
  
++<<<<<<< HEAD
++=======
+ comment "Watchdog Pretimeout Governors"
+ 
+ config WATCHDOG_PRETIMEOUT_GOV
+ 	bool "Enable watchdog pretimeout governors"
+ 	help
+ 	  The option allows to select watchdog pretimeout governors.
+ 
+ if WATCHDOG_PRETIMEOUT_GOV
+ 
+ choice
+ 	prompt "Default Watchdog Pretimeout Governor"
+ 	default WATCHDOG_PRETIMEOUT_DEFAULT_GOV_PANIC
+ 	help
+ 	  This option selects a default watchdog pretimeout governor.
+ 	  The governor takes its action, if a watchdog is capable
+ 	  to report a pretimeout event.
+ 
+ config WATCHDOG_PRETIMEOUT_DEFAULT_GOV_NOOP
+ 	bool "noop"
+ 	select WATCHDOG_PRETIMEOUT_GOV_NOOP
+ 	help
+ 	  Use noop watchdog pretimeout governor by default. If noop
+ 	  governor is selected by a user, write a short message to
+ 	  the kernel log buffer and don't do any system changes.
+ 
+ config WATCHDOG_PRETIMEOUT_DEFAULT_GOV_PANIC
+ 	bool "panic"
+ 	select WATCHDOG_PRETIMEOUT_GOV_PANIC
+ 	help
+ 	  Use panic watchdog pretimeout governor by default, if
+ 	  a watchdog pretimeout event happens, consider that
+ 	  a watchdog feeder is dead and reboot is unavoidable.
+ 
+ endchoice
+ 
+ config WATCHDOG_PRETIMEOUT_GOV_NOOP
+ 	tristate "Noop watchdog pretimeout governor"
+ 	help
+ 	  Noop watchdog pretimeout governor, only an informational
+ 	  message is added to kernel log buffer.
+ 
+ config WATCHDOG_PRETIMEOUT_GOV_PANIC
+ 	tristate "Panic watchdog pretimeout governor"
+ 	help
+ 	  Panic watchdog pretimeout governor, on watchdog pretimeout
+ 	  event put the kernel into panic.
+ 
+ endif # WATCHDOG_PRETIMEOUT_GOV
+ 
++>>>>>>> da0d12ff2b82 (watchdog: pretimeout: add panic pretimeout governor)
  endif # WATCHDOG
diff --cc drivers/watchdog/Makefile
index 31a6f885f852,1a34c6a96988..000000000000
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@@ -3,8 -3,14 +3,16 @@@
  #
  
  # The WatchDog Timer Driver Core.
 -obj-$(CONFIG_WATCHDOG_CORE)	+= watchdog.o
 -
  watchdog-objs	+= watchdog_core.o watchdog_dev.o
++<<<<<<< HEAD
 +obj-$(CONFIG_WATCHDOG_CORE)	+= watchdog.o
++=======
+ 
+ watchdog-$(CONFIG_WATCHDOG_PRETIMEOUT_GOV)	+= watchdog_pretimeout.o
+ 
+ obj-$(CONFIG_WATCHDOG_PRETIMEOUT_GOV_NOOP)	+= pretimeout_noop.o
+ obj-$(CONFIG_WATCHDOG_PRETIMEOUT_GOV_PANIC)	+= pretimeout_panic.o
++>>>>>>> da0d12ff2b82 (watchdog: pretimeout: add panic pretimeout governor)
  
  # Only one watchdog can succeed. We probe the ISA/PCI/USB based
  # watchdog-cards first, then the architecture specific watchdog
* Unmerged path drivers/watchdog/watchdog_pretimeout.c
* Unmerged path drivers/watchdog/watchdog_pretimeout.h
* Unmerged path drivers/watchdog/Kconfig
* Unmerged path drivers/watchdog/Makefile
diff --git a/drivers/watchdog/pretimeout_panic.c b/drivers/watchdog/pretimeout_panic.c
new file mode 100644
index 000000000000..0c197a1c97f4
--- /dev/null
+++ b/drivers/watchdog/pretimeout_panic.c
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2015-2016 Mentor Graphics
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/watchdog.h>
+
+#include "watchdog_pretimeout.h"
+
+/**
+ * pretimeout_panic - Panic on watchdog pretimeout event
+ * @wdd - watchdog_device
+ *
+ * Panic, watchdog has not been fed till pretimeout event.
+ */
+static void pretimeout_panic(struct watchdog_device *wdd)
+{
+	panic("watchdog pretimeout event\n");
+}
+
+static struct watchdog_governor watchdog_gov_panic = {
+	.name		= "panic",
+	.pretimeout	= pretimeout_panic,
+};
+
+static int __init watchdog_gov_panic_register(void)
+{
+	return watchdog_register_governor(&watchdog_gov_panic);
+}
+
+static void __exit watchdog_gov_panic_unregister(void)
+{
+	watchdog_unregister_governor(&watchdog_gov_panic);
+}
+module_init(watchdog_gov_panic_register);
+module_exit(watchdog_gov_panic_unregister);
+
+MODULE_AUTHOR("Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>");
+MODULE_DESCRIPTION("Panic watchdog pretimeout governor");
+MODULE_LICENSE("GPL");
* Unmerged path drivers/watchdog/watchdog_pretimeout.c
* Unmerged path drivers/watchdog/watchdog_pretimeout.h
