perf trace: Group per syscall arg formatter info into one struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 82d4a1109fc302795a184a328f60ad28bf7b5989
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/82d4a110.failed

Instead of having syscall_fmt.{arg_scnprintf,arg_parm}, introduce
struct syscall_arg_fmt and have these two, paving the way for more
state to change the formatting algorithms.

For instance, in the 'fcntl' 'cmd' case it is better not to suppress
it when being zero, showing instead its name "DUPFD".

We had that in an ad-hoc way just for strarrays, but with more involved
cases like fcntl, that can't be done with just a strarray, we'll need
a ".show_zero" arg in the 'cmd' syscall_arg_fmt.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-ch06o2j72zbjx5xww4qp67au@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 82d4a1109fc302795a184a328f60ad28bf7b5989)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-trace.c
diff --cc tools/perf/builtin-trace.c
index 5114abbd2e32,32778a621a08..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -610,10 -616,12 +614,15 @@@ static struct syscall_fmt 
  	bool	   hexret;
  } syscall_fmts[] = {
  	{ .name	    = "access",	    .errmsg = true,
- 	  .arg_scnprintf = { [1] = SCA_ACCMODE,  /* mode */ }, },
+ 	  .arg = { [1] = { .scnprintf = SCA_ACCMODE,  /* mode */ }, }, },
  	{ .name	    = "arch_prctl", .errmsg = true, .alias = "prctl", },
++<<<<<<< HEAD
++=======
+ 	{ .name	    = "bpf",	    .errmsg = true,
+ 	  .arg = { [0] = STRARRAY(cmd, bpf_cmd), }, },
++>>>>>>> 82d4a1109fc3 (perf trace: Group per syscall arg formatter info into one struct)
  	{ .name	    = "brk",	    .hexret = true,
- 	  .arg_scnprintf = { [0] = SCA_HEX, /* brk */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_HEX, /* brk */ }, }, },
  	{ .name	    = "chdir",	    .errmsg = true, },
  	{ .name	    = "chmod",	    .errmsg = true, },
  	{ .name	    = "chroot",	    .errmsg = true, },
@@@ -635,16 -645,17 +646,22 @@@
  	{ .name	    = "fchdir",	    .errmsg = true, },
  	{ .name	    = "fchmod",	    .errmsg = true, },
  	{ .name	    = "fchmodat",   .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
  	{ .name	    = "fchown",	    .errmsg = true, },
  	{ .name	    = "fchownat",   .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
  	{ .name	    = "fcntl",	    .errmsg = true,
++<<<<<<< HEAD
 +	  .arg_scnprintf = { [1] = SCA_STRARRAYS, /* cmd */ },
 +	  .arg_parm	 = { [1] = &strarrays__fcntl_cmds_arrays, /* cmd */ }, },
++=======
+ 	  .arg = { [1] = { .scnprintf = SCA_FCNTL_CMD, /* cmd */
+ 			   .parm      = &strarrays__fcntl_cmds_arrays, /* cmd */ },
+ 		   [2] = { .scnprintf =  SCA_FCNTL_ARG, /* arg */ }, }, },
++>>>>>>> 82d4a1109fc3 (perf trace: Group per syscall arg formatter info into one struct)
  	{ .name	    = "fdatasync",  .errmsg = true, },
  	{ .name	    = "flock",	    .errmsg = true,
- 	  .arg_scnprintf = { [1] = SCA_FLOCK, /* cmd */ }, },
+ 	  .arg = { [1] = { .scnprintf = SCA_FLOCK, /* cmd */ }, }, },
  	{ .name	    = "fsetxattr",  .errmsg = true, },
  	{ .name	    = "fstat",	    .errmsg = true, .alias = "newfstat", },
  	{ .name	    = "fstatat",    .errmsg = true, .alias = "newfstatat", },
@@@ -652,22 -663,24 +669,34 @@@
  	{ .name	    = "fsync",    .errmsg = true, },
  	{ .name	    = "ftruncate", .errmsg = true, },
  	{ .name	    = "futex",	    .errmsg = true,
- 	  .arg_scnprintf = { [1] = SCA_FUTEX_OP, /* op */ }, },
+ 	  .arg = { [1] = { .scnprintf = SCA_FUTEX_OP, /* op */ }, }, },
  	{ .name	    = "futimesat", .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_FDAT, /* fd */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* fd */ }, }, },
  	{ .name	    = "getdents",   .errmsg = true, },
  	{ .name	    = "getdents64", .errmsg = true, },
++<<<<<<< HEAD
 +	{ .name	    = "getitimer",  .errmsg = true, STRARRAY(0, which, itimers), },
 +	{ .name	    = "getrandom",  .errmsg = true,
 +	  .arg_scnprintf = { [2] = SCA_GETRANDOM_FLAGS, /* flags */ }, },
 +	{ .name	    = "getpid",	    .errpid = true, },
 +	{ .name	    = "getpgid",    .errpid = true, },
 +	{ .name	    = "getppid",    .errpid = true, },
 +	{ .name	    = "getrlimit",  .errmsg = true, STRARRAY(0, resource, rlimit_resources), },
++=======
+ 	{ .name	    = "getitimer",  .errmsg = true,
+ 	  .arg = { [0] = STRARRAY(which, itimers), }, },
+ 	{ .name	    = "getpid",	    .errpid = true, },
+ 	{ .name	    = "getpgid",    .errpid = true, },
+ 	{ .name	    = "getppid",    .errpid = true, },
+ 	{ .name	    = "getrandom",  .errmsg = true,
+ 	  .arg = { [2] = { .scnprintf = SCA_GETRANDOM_FLAGS, /* flags */ }, }, },
+ 	{ .name	    = "getrlimit",  .errmsg = true,
+ 	  .arg = { [0] = STRARRAY(resource, rlimit_resources), }, },
++>>>>>>> 82d4a1109fc3 (perf trace: Group per syscall arg formatter info into one struct)
  	{ .name	    = "getxattr",   .errmsg = true, },
- 	{ .name	    = "inotify_add_watch",	    .errmsg = true, },
+ 	{ .name	    = "inotify_add_watch", .errmsg = true, },
  	{ .name	    = "ioctl",	    .errmsg = true,
- 	  .arg_scnprintf = {
+ 	  .arg = {
  #if defined(__i386__) || defined(__x86_64__)
  /*
   * FIXME: Make this available to all arches.
@@@ -778,51 -793,47 +809,63 @@@
  	{ .name	    = "sched_getattr",	      .errmsg = true, },
  	{ .name	    = "sched_setattr",	      .errmsg = true, },
  	{ .name	    = "sched_setscheduler",   .errmsg = true,
- 	  .arg_scnprintf = { [1] = SCA_SCHED_POLICY, /* policy */ }, },
+ 	  .arg = { [1] = { .scnprintf = SCA_SCHED_POLICY, /* policy */ }, }, },
  	{ .name	    = "seccomp", .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_SECCOMP_OP, /* op */
- 			     [1] = SCA_SECCOMP_FLAGS, /* flags */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_SECCOMP_OP,	   /* op */ },
+ 		   [1] = { .scnprintf = SCA_SECCOMP_FLAGS, /* flags */ }, }, },
  	{ .name	    = "select",	    .errmsg = true, .timeout = true, },
  	{ .name	    = "sendmmsg",    .errmsg = true,
- 	  .arg_scnprintf = { [3] = SCA_MSG_FLAGS, /* flags */ }, },
+ 	  .arg = { [3] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
  	{ .name	    = "sendmsg",    .errmsg = true,
- 	  .arg_scnprintf = { [2] = SCA_MSG_FLAGS, /* flags */ }, },
+ 	  .arg = { [2] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
  	{ .name	    = "sendto",	    .errmsg = true,
- 	  .arg_scnprintf = { [3] = SCA_MSG_FLAGS, /* flags */ }, },
+ 	  .arg = { [3] = { .scnprintf = SCA_MSG_FLAGS, /* flags */ }, }, },
  	{ .name	    = "set_tid_address", .errpid = true, },
- 	{ .name	    = "setitimer",  .errmsg = true, STRARRAY(0, which, itimers), },
+ 	{ .name	    = "setitimer",  .errmsg = true,
+ 	  .arg = { [0] = STRARRAY(which, itimers), }, },
  	{ .name	    = "setpgid",    .errmsg = true, },
++<<<<<<< HEAD
 +	{ .name	    = "setrlimit",  .errmsg = true, STRARRAY(0, resource, rlimit_resources), },
 +	{ .name     = "setxattr",   .errmsg = true, },
 +	{ .name     = "shutdown",   .errmsg = true, },
++=======
+ 	{ .name	    = "setrlimit",  .errmsg = true,
+ 	  .arg = { [0] = STRARRAY(resource, rlimit_resources), }, },
+ 	{ .name	    = "setxattr",   .errmsg = true, },
+ 	{ .name	    = "shutdown",   .errmsg = true, },
++>>>>>>> 82d4a1109fc3 (perf trace: Group per syscall arg formatter info into one struct)
  	{ .name	    = "socket",	    .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_STRARRAY, /* family */
- 			     [1] = SCA_SK_TYPE, /* type */ },
- 	  .arg_parm	 = { [0] = &strarray__socket_families, /* family */ }, },
+ 	  .arg = { [0] = STRARRAY(family, socket_families),
+ 		   [1] = { .scnprintf = SCA_SK_TYPE, /* type */ }, }, },
  	{ .name	    = "socketpair", .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_STRARRAY, /* family */
- 			     [1] = SCA_SK_TYPE, /* type */ },
- 	  .arg_parm	 = { [0] = &strarray__socket_families, /* family */ }, },
+ 	  .arg = { [0] = STRARRAY(family, socket_families),
+ 		   [1] = { .scnprintf = SCA_SK_TYPE, /* type */ }, }, },
  	{ .name	    = "stat",	    .errmsg = true, .alias = "newstat", },
  	{ .name	    = "statfs",	    .errmsg = true, },
 +#if 0
 +	XXX there is no statx syscall in RHEL7
 +
  	{ .name	    = "statx",	    .errmsg = true,
++<<<<<<< HEAD
 +	  .arg_scnprintf = { [0] = SCA_FDAT, /* flags */
 +			     [2] = SCA_STATX_FLAGS, /* flags */
 +			     [3] = SCA_STATX_MASK, /* mask */ }, },
 +#endif
++=======
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT,	 /* fdat */ },
+ 		   [2] = { .scnprintf = SCA_STATX_FLAGS, /* flags */ } ,
+ 		   [3] = { .scnprintf = SCA_STATX_MASK,	 /* mask */ }, }, },
++>>>>>>> 82d4a1109fc3 (perf trace: Group per syscall arg formatter info into one struct)
  	{ .name	    = "swapoff",    .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_FILENAME, /* specialfile */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_FILENAME, /* specialfile */ }, }, },
  	{ .name	    = "swapon",	    .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_FILENAME, /* specialfile */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_FILENAME, /* specialfile */ }, }, },
  	{ .name	    = "symlinkat",  .errmsg = true,
- 	  .arg_scnprintf = { [0] = SCA_FDAT, /* dfd */ }, },
+ 	  .arg = { [0] = { .scnprintf = SCA_FDAT, /* dfd */ }, }, },
  	{ .name	    = "tgkill",	    .errmsg = true,
- 	  .arg_scnprintf = { [2] = SCA_SIGNUM, /* sig */ }, },
+ 	  .arg = { [2] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
  	{ .name	    = "tkill",	    .errmsg = true,
- 	  .arg_scnprintf = { [1] = SCA_SIGNUM, /* sig */ }, },
+ 	  .arg = { [1] = { .scnprintf = SCA_SIGNUM, /* sig */ }, }, },
  	{ .name	    = "truncate",   .errmsg = true, },
  	{ .name	    = "uname",	    .errmsg = true, .alias = "newuname", },
  	{ .name	    = "unlinkat",   .errmsg = true,
* Unmerged path tools/perf/builtin-trace.c
