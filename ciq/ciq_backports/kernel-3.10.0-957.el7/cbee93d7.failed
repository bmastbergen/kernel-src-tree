netfilter: ipset: Add skbinfo extension kernel support for the list set type.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] netfilter: ipset: Add skbinfo extension kernel support for the list set type (Stefano Brivio) [1557599]
Rebuild_FUZZ: 99.35%
commit-author Anton Danilov <littlesmilingcloud@gmail.com>
commit cbee93d7b71bf9d73382e503a4f60848eec60ea8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/cbee93d7.failed

Add skbinfo extension kernel support for the list set type.
Introduce the new revision of the list set type.

	Signed-off-by: Anton Danilov <littlesmilingcloud@gmail.com>
	Signed-off-by: Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>
(cherry picked from commit cbee93d7b71bf9d73382e503a4f60848eec60ea8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/ipset/ip_set_list_set.c
diff --cc net/netfilter/ipset/ip_set_list_set.c
index a9a97c07ecb4,f8f682806e36..000000000000
--- a/net/netfilter/ipset/ip_set_list_set.c
+++ b/net/netfilter/ipset/ip_set_list_set.c
@@@ -16,7 -16,9 +16,13 @@@
  #include <linux/netfilter/ipset/ip_set_list.h>
  
  #define IPSET_TYPE_REV_MIN	0
++<<<<<<< HEAD
 +#define IPSET_TYPE_REV_MAX	1 /* Counters support added */
++=======
+ /*				1    Counters support added */
+ /*				2    Comments support added */
+ #define IPSET_TYPE_REV_MAX	3 /* skbinfo support added */
++>>>>>>> cbee93d7b71b (netfilter: ipset: Add skbinfo extension kernel support for the list set type.)
  
  MODULE_LICENSE("GPL");
  MODULE_AUTHOR("Jozsef Kadlecsik <kadlec@blackhole.kfki.hu>");
@@@ -102,9 -71,13 +108,13 @@@ list_set_ktest(struct ip_set *set, cons
  		ret = ip_set_test(e->id, skb, par, opt);
  		if (ret > 0) {
  			if (SET_WITH_COUNTER(set))
 -				ip_set_update_counter(ext_counter(e, set),
 +				ip_set_update_counter(ext_counter(e, map),
  						      ext, &opt->ext,
  						      cmdflags);
+ 			if (SET_WITH_SKBINFO(set))
+ 				ip_set_get_skbinfo(ext_skbinfo(e, set),
+ 						   ext, &opt->ext,
+ 						   cmdflags);
  			return ret;
  		}
  	}
@@@ -219,9 -197,13 +229,17 @@@ list_set_add(struct ip_set *set, u32 i
  
  	e->id = d->id;
  	if (SET_WITH_TIMEOUT(set))
 -		ip_set_timeout_set(ext_timeout(e, set), ext->timeout);
 +		ip_set_timeout_set(ext_timeout(e, map), ext->timeout);
  	if (SET_WITH_COUNTER(set))
++<<<<<<< HEAD
 +		ip_set_init_counter(ext_counter(e, map), ext);
++=======
+ 		ip_set_init_counter(ext_counter(e, set), ext);
+ 	if (SET_WITH_COMMENT(set))
+ 		ip_set_init_comment(ext_comment(e, set), ext);
+ 	if (SET_WITH_SKBINFO(set))
+ 		ip_set_init_skbinfo(ext_skbinfo(e, set), ext);
++>>>>>>> cbee93d7b71b (netfilter: ipset: Add skbinfo extension kernel support for the list set type.)
  	return 0;
  }
  
@@@ -320,10 -306,16 +338,18 @@@ list_set_uadd(struct ip_set *set, void 
  			/* Can't re-add */
  			return -IPSET_ERR_EXIST;
  		/* Update extensions */
 -		ip_set_ext_destroy(set, e);
 -
  		if (SET_WITH_TIMEOUT(set))
 -			ip_set_timeout_set(ext_timeout(e, set), ext->timeout);
 +			ip_set_timeout_set(ext_timeout(e, map), ext->timeout);
  		if (SET_WITH_COUNTER(set))
++<<<<<<< HEAD
 +			ip_set_init_counter(ext_counter(e, map), ext);
++=======
+ 			ip_set_init_counter(ext_counter(e, set), ext);
+ 		if (SET_WITH_COMMENT(set))
+ 			ip_set_init_comment(ext_comment(e, set), ext);
+ 		if (SET_WITH_SKBINFO(set))
+ 			ip_set_init_skbinfo(ext_skbinfo(e, set), ext);
++>>>>>>> cbee93d7b71b (netfilter: ipset: Add skbinfo extension kernel support for the list set type.)
  		/* Set is already added to the list */
  		ip_set_put_byindex(map->net, d->id);
  		return 0;
@@@ -725,6 -678,10 +754,13 @@@ static struct ip_set_type list_set_typ
  		[IPSET_ATTR_CADT_FLAGS]	= { .type = NLA_U32 },
  		[IPSET_ATTR_BYTES]	= { .type = NLA_U64 },
  		[IPSET_ATTR_PACKETS]	= { .type = NLA_U64 },
++<<<<<<< HEAD
++=======
+ 		[IPSET_ATTR_COMMENT]	= { .type = NLA_NUL_STRING },
+ 		[IPSET_ATTR_SKBMARK]	= { .type = NLA_U64 },
+ 		[IPSET_ATTR_SKBPRIO]	= { .type = NLA_U32 },
+ 		[IPSET_ATTR_SKBQUEUE]	= { .type = NLA_U16 },
++>>>>>>> cbee93d7b71b (netfilter: ipset: Add skbinfo extension kernel support for the list set type.)
  	},
  	.me		= THIS_MODULE,
  };
* Unmerged path net/netfilter/ipset/ip_set_list_set.c
