blk-mq: make mq_ops a const pointer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jens Axboe <axboe@fb.com>
commit f8a5b12247fe18f7fed801ad262a7ab190e1f848
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f8a5b122.failed

We never change it, make that clear.

	Signed-off-by: Jens Axboe <axboe@fb.com>
	Reviewed-by: Bart Van Assche <bart.vanassche@sandisk.com>
(cherry picked from commit f8a5b12247fe18f7fed801ad262a7ab190e1f848)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/blk-mq.h
diff --cc include/linux/blk-mq.h
index 43b98fa7e562,afc81d77e471..000000000000
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@@ -58,51 -40,27 +58,56 @@@ struct blk_mq_hw_ctx 
  
  	unsigned long		queued;
  	unsigned long		run;
 -#define BLK_MQ_MAX_DISPATCH_ORDER	7
 +#define BLK_MQ_MAX_DISPATCH_ORDER	10
  	unsigned long		dispatched[BLK_MQ_MAX_DISPATCH_ORDER];
  
 +	unsigned int		queue_depth;	/* DEPRECATED: RHEL kABI padding, repurpose? */
  	unsigned int		numa_node;
 -	unsigned int		queue_num;
 +	RH_KABI_DEPRECATE(unsigned int, cmd_size)
  
 -	atomic_t		nr_active;
 +	struct blk_mq_cpu_notifier	cpu_notifier;
 +	struct kobject		kobj;
  
 -	struct delayed_work	delay_work;
 +	RH_KABI_EXTEND(struct delayed_work	run_work)
 +	RH_KABI_EXTEND(cpumask_var_t		cpumask)
 +	RH_KABI_EXTEND(int			next_cpu)
 +	RH_KABI_EXTEND(int			next_cpu_batch)
  
 -	struct hlist_node	cpuhp_dead;
 -	struct kobject		kobj;
 +	RH_KABI_EXTEND(struct sbitmap ctx_map)
  
 -	unsigned long		poll_considered;
 -	unsigned long		poll_invoked;
 -	unsigned long		poll_success;
 +	RH_KABI_EXTEND(atomic_t		nr_active)
 +
 +	RH_KABI_EXTEND(struct blk_flush_queue	*fq)
 +	RH_KABI_EXTEND(struct srcu_struct	queue_rq_srcu)
 +	RH_KABI_EXTEND(wait_queue_t		dispatch_wait)
 +	RH_KABI_EXTEND(void			*sched_data)
 +	RH_KABI_EXTEND(struct blk_mq_tags	*sched_tags)
 +	RH_KABI_EXTEND(struct blk_mq_ctx	*dispatch_from)
 +#ifdef CONFIG_BLK_DEBUG_FS
 +	RH_KABI_EXTEND(struct dentry		*debugfs_dir)
 +	RH_KABI_EXTEND(struct dentry		*sched_debugfs_dir)
 +#endif
  };
  
 +#ifdef __GENKSYMS__
 +struct blk_mq_reg {
 +	struct blk_mq_ops	*ops;
 +	unsigned int		nr_hw_queues;
 +	unsigned int		queue_depth;	/* max hw supported */
 +	unsigned int		reserved_tags;
 +	unsigned int		cmd_size;	/* per-request extra data */
 +	int			numa_node;
 +	unsigned int		timeout;
 +	unsigned int		flags;		/* BLK_MQ_F_* */
 +};
 +#else
  struct blk_mq_tag_set {
++<<<<<<< HEAD
 +	struct blk_mq_ops	*ops;
++=======
+ 	unsigned int		*mq_map;
+ 	const struct blk_mq_ops	*ops;
++>>>>>>> f8a5b12247fe (blk-mq: make mq_ops a const pointer)
  	unsigned int		nr_hw_queues;
  	unsigned int		queue_depth;	/* max hw supported */
  	unsigned int		reserved_tags;
diff --git a/block/blk-mq.c b/block/blk-mq.c
index 8f260779506c..20d57362364e 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -665,7 +665,7 @@ struct blk_mq_timeout_data {
 
 void blk_mq_rq_timed_out(struct request *req, bool reserved)
 {
-	struct blk_mq_ops *ops = req->q->mq_ops;
+	const struct blk_mq_ops *ops = req->q->mq_ops;
 	enum blk_eh_timer_return ret = BLK_EH_RESET_TIMER;
 
 	/*
* Unmerged path include/linux/blk-mq.h
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 2b624b97bb35..357370f9eb92 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -379,7 +379,7 @@ struct request_queue {
 	dma_drain_needed_fn	*dma_drain_needed;
 	lld_busy_fn		*lld_busy_fn;
 
-	struct blk_mq_ops	*mq_ops;
+	const struct blk_mq_ops	*mq_ops;
 
 	unsigned int		*mq_map;
 
