i2c: add a protocol parameter to the alert callback

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [i2c] add a protocol parameter to the alert callback (Benjamin Tissoires) [1554926]
Rebuild_FUZZ: 94.85%
commit-author Benjamin Tissoires <benjamin.tissoires@redhat.com>
commit b4f210541fc319bd643ad9a4fdbfe2ce31be6cfc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b4f21054.failed

.alert() is meant to be generic, but there is currently no way
for the device driver to know which protocol generated the alert.
Add a parameter in .alert() to help the device driver to understand
what is given in data.

This patch is required to have the support of SMBus Host Notify protocol
through .alert().

	Tested-by: Andrew Duggan <aduggan@synaptics.com>
For hwmon:
	Acked-by: Guenter Roeck <linux@roeck-us.net>
For IPMI:
	Acked-by: Corey Minyard <cminyard@mvista.com>
	Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit b4f210541fc319bd643ad9a4fdbfe2ce31be6cfc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hwmon/lm90.c
diff --cc drivers/hwmon/lm90.c
index 8eeb141c85ac,5b62c57e8bfc..000000000000
--- a/drivers/hwmon/lm90.c
+++ b/drivers/hwmon/lm90.c
@@@ -1487,33 -1624,15 +1487,41 @@@ static int lm90_remove(struct i2c_clien
  	return 0;
  }
  
- static void lm90_alert(struct i2c_client *client, unsigned int flag)
+ static void lm90_alert(struct i2c_client *client, enum i2c_alert_protocol type,
+ 		       unsigned int flag)
  {
 -	u16 alarms;
 +	struct lm90_data *data = i2c_get_clientdata(client);
 +	u8 config, alarms, alarms2 = 0;
 +
 +	lm90_read_reg(client, LM90_REG_R_STATUS, &alarms);
 +
 +	if (data->kind == max6696)
 +		lm90_read_reg(client, MAX6696_REG_R_STATUS2, &alarms2);
  
 +	if ((alarms & 0x7f) == 0 && (alarms2 & 0xfe) == 0) {
 +		dev_info(&client->dev, "Everything OK\n");
 +	} else {
 +		if (alarms & 0x61)
 +			dev_warn(&client->dev,
 +				 "temp%d out of range, please check!\n", 1);
 +		if (alarms & 0x1a)
 +			dev_warn(&client->dev,
 +				 "temp%d out of range, please check!\n", 2);
 +		if (alarms & 0x04)
 +			dev_warn(&client->dev,
 +				 "temp%d diode open, please check!\n", 2);
 +
 +		if (alarms2 & 0x18)
 +			dev_warn(&client->dev,
 +				 "temp%d out of range, please check!\n", 3);
 +
++<<<<<<< HEAD
++=======
+ 	if (type != I2C_PROTOCOL_SMBUS_ALERT)
+ 		return;
+ 
+ 	if (lm90_is_tripped(client, &alarms)) {
++>>>>>>> b4f210541fc3 (i2c: add a protocol parameter to the alert callback)
  		/*
  		 * Disable ALERT# output, because these chips don't implement
  		 * SMBus alert correctly; they should only hold the alert line
diff --git a/drivers/char/ipmi/ipmi_ssif.c b/drivers/char/ipmi/ipmi_ssif.c
index dbbf7ba6446f..3a1dc9f88beb 100644
--- a/drivers/char/ipmi/ipmi_ssif.c
+++ b/drivers/char/ipmi/ipmi_ssif.c
@@ -572,12 +572,16 @@ static void retry_timeout(unsigned long data)
 }
 
 
-static void ssif_alert(struct i2c_client *client, unsigned int data)
+static void ssif_alert(struct i2c_client *client, enum i2c_alert_protocol type,
+		       unsigned int data)
 {
 	struct ssif_info *ssif_info = i2c_get_clientdata(client);
 	unsigned long oflags, *flags;
 	bool do_get = false;
 
+	if (type != I2C_PROTOCOL_SMBUS_ALERT)
+		return;
+
 	ssif_inc_stat(ssif_info, alerts);
 
 	flags = ipmi_ssif_lock_cond(ssif_info, &oflags);
* Unmerged path drivers/hwmon/lm90.c
diff --git a/drivers/i2c/i2c-smbus.c b/drivers/i2c/i2c-smbus.c
index 4126d4d28e05..a96a0ec215f5 100644
--- a/drivers/i2c/i2c-smbus.c
+++ b/drivers/i2c/i2c-smbus.c
@@ -56,7 +56,8 @@ static int smbus_do_alert(struct device *dev, void *addrp)
 	if (client->dev.driver) {
 		driver = to_i2c_driver(client->dev.driver);
 		if (driver->alert)
-			driver->alert(client, data->flag);
+			driver->alert(client, I2C_PROTOCOL_SMBUS_ALERT,
+				      data->flag);
 		else
 			dev_warn(&client->dev, "no driver alert()!\n");
 	} else
diff --git a/include/linux/i2c.h b/include/linux/i2c.h
index 299c7e878502..d06295646b92 100644
--- a/include/linux/i2c.h
+++ b/include/linux/i2c.h
@@ -126,6 +126,10 @@ i2c_smbus_read_i2c_block_data_or_emulated(const struct i2c_client *client,
 					  u8 command, u8 length, u8 *values);
 #endif /* I2C */
 
+enum i2c_alert_protocol {
+	I2C_PROTOCOL_SMBUS_ALERT,
+};
+
 /**
  * struct i2c_driver - represent an I2C device driver
  * @class: What kind of i2c device we instantiate (for detect)
@@ -181,7 +185,8 @@ struct i2c_driver {
 	 * For the SMBus alert protocol, there is a single bit of data passed
 	 * as the alert response's low bit ("event flag").
 	 */
-	void (*alert)(struct i2c_client *, unsigned int data);
+	void (*alert)(struct i2c_client *, enum i2c_alert_protocol protocol,
+		      unsigned int data);
 
 	/* a ioctl like command that can be used to perform specific functions
 	 * with the device.
