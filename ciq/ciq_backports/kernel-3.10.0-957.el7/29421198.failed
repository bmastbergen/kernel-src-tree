netfilter: ipv4: fix NULL dereference

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Liping Zhang <liping.zhang@spreadtrum.com>
commit 29421198c3a860092e27c2ad8499dfe603398817
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/29421198.failed

Commit fa50d974d104 ("ipv4: Namespaceify ip_default_ttl sysctl knob")
use sock_net(skb->sk) to get the net namespace, but we can't assume
that sk_buff->sk is always exist, so when it is NULL, oops will happen.

	Signed-off-by: Liping Zhang <liping.zhang@spreadtrum.com>
	Reviewed-by: Nikolay Borisov <kernel@kyup.com>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit 29421198c3a860092e27c2ad8499dfe603398817)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/netfilter/ipt_SYNPROXY.c
diff --cc net/ipv4/netfilter/ipt_SYNPROXY.c
index 09a118f48a25,db5b87509446..000000000000
--- a/net/ipv4/netfilter/ipt_SYNPROXY.c
+++ b/net/ipv4/netfilter/ipt_SYNPROXY.c
@@@ -18,7 -18,8 +18,12 @@@
  #include <net/netfilter/nf_conntrack_synproxy.h>
  
  static struct iphdr *
++<<<<<<< HEAD
 +synproxy_build_ip(struct sk_buff *skb, u32 saddr, u32 daddr)
++=======
+ synproxy_build_ip(struct net *net, struct sk_buff *skb, __be32 saddr,
+ 		  __be32 daddr)
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  {
  	struct iphdr *iph;
  
@@@ -39,7 -40,8 +44,12 @@@
  }
  
  static void
++<<<<<<< HEAD
 +synproxy_send_tcp(const struct sk_buff *skb, struct sk_buff *nskb,
++=======
+ synproxy_send_tcp(struct net *net,
+ 		  const struct sk_buff *skb, struct sk_buff *nskb,
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  		  struct nf_conntrack *nfct, enum ip_conntrack_info ctinfo,
  		  struct iphdr *niph, struct tcphdr *nth,
  		  unsigned int tcp_hdr_size)
@@@ -67,7 -70,8 +77,12 @@@ free_nskb
  }
  
  static void
++<<<<<<< HEAD
 +synproxy_send_client_synack(const struct sk_buff *skb, const struct tcphdr *th,
++=======
+ synproxy_send_client_synack(struct net *net,
+ 			    const struct sk_buff *skb, const struct tcphdr *th,
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  			    const struct synproxy_options *opts)
  {
  	struct sk_buff *nskb;
@@@ -85,10 -89,10 +100,10 @@@
  		return;
  	skb_reserve(nskb, MAX_TCP_HEADER);
  
- 	niph = synproxy_build_ip(nskb, iph->daddr, iph->saddr);
+ 	niph = synproxy_build_ip(net, nskb, iph->daddr, iph->saddr);
  
  	skb_reset_transport_header(nskb);
 -	nth = (struct tcphdr *)skb_put(nskb, tcp_hdr_size);
 +	nth = skb_put(nskb, tcp_hdr_size);
  	nth->source	= th->dest;
  	nth->dest	= th->source;
  	nth->seq	= htonl(__cookie_v4_init_sequence(iph, th, &mss));
@@@ -103,8 -107,8 +118,13 @@@
  
  	synproxy_build_options(nth, opts);
  
++<<<<<<< HEAD
 +	synproxy_send_tcp(skb, nskb, skb_nfct(skb),
 +			  IP_CT_ESTABLISHED_REPLY, niph, nth, tcp_hdr_size);
++=======
+ 	synproxy_send_tcp(net, skb, nskb, skb->nfct, IP_CT_ESTABLISHED_REPLY,
+ 			  niph, nth, tcp_hdr_size);
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  }
  
  static void
@@@ -126,10 -131,10 +147,10 @@@ synproxy_send_server_syn(struct net *ne
  		return;
  	skb_reserve(nskb, MAX_TCP_HEADER);
  
- 	niph = synproxy_build_ip(nskb, iph->saddr, iph->daddr);
+ 	niph = synproxy_build_ip(net, nskb, iph->saddr, iph->daddr);
  
  	skb_reset_transport_header(nskb);
 -	nth = (struct tcphdr *)skb_put(nskb, tcp_hdr_size);
 +	nth = skb_put(nskb, tcp_hdr_size);
  	nth->source	= th->source;
  	nth->dest	= th->dest;
  	nth->seq	= htonl(recv_seq - 1);
@@@ -147,7 -152,7 +168,11 @@@
  
  	synproxy_build_options(nth, opts);
  
++<<<<<<< HEAD
 +	synproxy_send_tcp(skb, nskb, &snet->tmpl->ct_general, IP_CT_NEW,
++=======
+ 	synproxy_send_tcp(net, skb, nskb, &snet->tmpl->ct_general, IP_CT_NEW,
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  			  niph, nth, tcp_hdr_size);
  }
  
@@@ -171,10 -176,10 +196,10 @@@ synproxy_send_server_ack(struct net *ne
  		return;
  	skb_reserve(nskb, MAX_TCP_HEADER);
  
- 	niph = synproxy_build_ip(nskb, iph->daddr, iph->saddr);
+ 	niph = synproxy_build_ip(net, nskb, iph->daddr, iph->saddr);
  
  	skb_reset_transport_header(nskb);
 -	nth = (struct tcphdr *)skb_put(nskb, tcp_hdr_size);
 +	nth = skb_put(nskb, tcp_hdr_size);
  	nth->source	= th->dest;
  	nth->dest	= th->source;
  	nth->seq	= htonl(ntohl(th->ack_seq));
@@@ -187,7 -192,7 +212,11 @@@
  
  	synproxy_build_options(nth, opts);
  
++<<<<<<< HEAD
 +	synproxy_send_tcp(skb, nskb, NULL, 0, niph, nth, tcp_hdr_size);
++=======
+ 	synproxy_send_tcp(net, skb, nskb, NULL, 0, niph, nth, tcp_hdr_size);
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  }
  
  static void
@@@ -209,10 -214,10 +238,10 @@@ synproxy_send_client_ack(struct net *ne
  		return;
  	skb_reserve(nskb, MAX_TCP_HEADER);
  
- 	niph = synproxy_build_ip(nskb, iph->saddr, iph->daddr);
+ 	niph = synproxy_build_ip(net, nskb, iph->saddr, iph->daddr);
  
  	skb_reset_transport_header(nskb);
 -	nth = (struct tcphdr *)skb_put(nskb, tcp_hdr_size);
 +	nth = skb_put(nskb, tcp_hdr_size);
  	nth->source	= th->source;
  	nth->dest	= th->dest;
  	nth->seq	= htonl(ntohl(th->seq) + 1);
@@@ -225,8 -230,8 +254,13 @@@
  
  	synproxy_build_options(nth, opts);
  
++<<<<<<< HEAD
 +	synproxy_send_tcp(skb, nskb, skb_nfct(skb),
 +			  IP_CT_ESTABLISHED_REPLY, niph, nth, tcp_hdr_size);
++=======
+ 	synproxy_send_tcp(net, skb, nskb, skb->nfct, IP_CT_ESTABLISHED_REPLY,
+ 			  niph, nth, tcp_hdr_size);
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  }
  
  static bool
@@@ -257,7 -263,8 +292,12 @@@ static unsigned in
  synproxy_tg4(struct sk_buff *skb, const struct xt_action_param *par)
  {
  	const struct xt_synproxy_info *info = par->targinfo;
++<<<<<<< HEAD
 +	struct synproxy_net *snet = synproxy_pernet(dev_net(par->in));
++=======
+ 	struct net *net = par->net;
+ 	struct synproxy_net *snet = synproxy_pernet(net);
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  	struct synproxy_options opts = {};
  	struct tcphdr *th, _th;
  
@@@ -286,7 -293,7 +326,11 @@@
  					  XT_SYNPROXY_OPT_SACK_PERM |
  					  XT_SYNPROXY_OPT_ECN);
  
++<<<<<<< HEAD
 +		synproxy_send_client_synack(skb, th, &opts);
++=======
+ 		synproxy_send_client_synack(net, skb, th, &opts);
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  		return NF_DROP;
  
  	} else if (th->ack && !(th->fin || th->rst || th->syn)) {
@@@ -298,13 -305,12 +342,18 @@@
  	return XT_CONTINUE;
  }
  
 -static unsigned int ipv4_synproxy_hook(void *priv,
 +static unsigned int ipv4_synproxy_hook(const struct nf_hook_ops *ops,
  				       struct sk_buff *skb,
 +				       const struct net_device *in,
 +				       const struct net_device *out,
  				       const struct nf_hook_state *nhs)
  {
++<<<<<<< HEAD
 +	struct synproxy_net *snet = synproxy_pernet(dev_net(nhs->in ? : nhs->out));
++=======
+ 	struct net *net = nhs->net;
+ 	struct synproxy_net *snet = synproxy_pernet(net);
++>>>>>>> 29421198c3a8 (netfilter: ipv4: fix NULL dereference)
  	enum ip_conntrack_info ctinfo;
  	struct nf_conn *ct;
  	struct nf_conn_synproxy *synproxy;
diff --git a/net/bridge/netfilter/nft_reject_bridge.c b/net/bridge/netfilter/nft_reject_bridge.c
index 2f6ff3e8b316..7428befd802f 100644
--- a/net/bridge/netfilter/nft_reject_bridge.c
+++ b/net/bridge/netfilter/nft_reject_bridge.c
@@ -40,7 +40,8 @@ static void nft_reject_br_push_etherhdr(struct sk_buff *oldskb,
 /* We cannot use oldskb->dev, it can be either bridge device (NF_BRIDGE INPUT)
  * or the bridge port (NF_BRIDGE PREROUTING).
  */
-static void nft_reject_br_send_v4_tcp_reset(struct sk_buff *oldskb,
+static void nft_reject_br_send_v4_tcp_reset(struct net *net,
+					    struct sk_buff *oldskb,
 					    const struct net_device *dev,
 					    int hook)
 {
@@ -74,7 +75,8 @@ static void nft_reject_br_send_v4_tcp_reset(struct sk_buff *oldskb,
 	br_forward(br_port_get_rcu(dev), nskb, false, true);
 }
 
-static void nft_reject_br_send_v4_unreach(struct sk_buff *oldskb,
+static void nft_reject_br_send_v4_unreach(struct net *net,
+					  struct sk_buff *oldskb,
 					  const struct net_device *dev,
 					  int hook, u8 code)
 {
@@ -265,17 +267,17 @@ static void nft_reject_bridge_eval(const struct nft_expr *expr,
 	case htons(ETH_P_IP):
 		switch (priv->type) {
 		case NFT_REJECT_ICMP_UNREACH:
-			nft_reject_br_send_v4_unreach(pkt->skb, pkt->in,
-						      pkt->hook,
+			nft_reject_br_send_v4_unreach(pkt->net, pkt->skb,
+						      pkt->in, pkt->hook,
 						      priv->icmp_code);
 			break;
 		case NFT_REJECT_TCP_RST:
-			nft_reject_br_send_v4_tcp_reset(pkt->skb, pkt->in,
-							pkt->hook);
+			nft_reject_br_send_v4_tcp_reset(pkt->net, pkt->skb,
+							pkt->in, pkt->hook);
 			break;
 		case NFT_REJECT_ICMPX_UNREACH:
-			nft_reject_br_send_v4_unreach(pkt->skb, pkt->in,
-						      pkt->hook,
+			nft_reject_br_send_v4_unreach(pkt->net, pkt->skb,
+						      pkt->in, pkt->hook,
 						      nft_reject_icmp_code(priv->icmp_code));
 			break;
 		}
* Unmerged path net/ipv4/netfilter/ipt_SYNPROXY.c
