drm/nouveau/kms/nv50-: initial overlay support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 2ce7f38629891eeaf3e5d406add102a3fa6f6632
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2ce7f386.failed

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 2ce7f38629891eeaf3e5d406add102a3fa6f6632)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/amdgpu/amdgpu_powerplay.h
#	drivers/gpu/drm/amd/powerplay/inc/pp_acpi.h
#	drivers/gpu/drm/amd/powerplay/inc/pp_soc15.h
#	drivers/gpu/drm/amd/powerplay/smumgr/polaris10_smc.h
#	drivers/gpu/drm/nouveau/dispnv50/Kbuild
#	drivers/gpu/drm/nouveau/dispnv50/atom.h
#	drivers/gpu/drm/nouveau/dispnv50/base.h
#	drivers/gpu/drm/nouveau/dispnv50/curs.h
#	drivers/gpu/drm/nouveau/dispnv50/disp.h
#	drivers/gpu/drm/nouveau/dispnv50/head507d.c
#	drivers/gpu/drm/nouveau/dispnv50/head907d.c
#	drivers/gpu/drm/nouveau/dispnv50/ovly.h
#	drivers/gpu/drm/nouveau/dispnv50/ovly507e.c
#	drivers/gpu/drm/nouveau/dispnv50/wndw.c
#	drivers/gpu/drm/nouveau/dispnv50/wndw.h
diff --cc drivers/gpu/drm/amd/amdgpu/amdgpu_powerplay.h
index c0c4bfdcdb14,a3ce53046015..000000000000
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_powerplay.h
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_powerplay.h
@@@ -18,16 -18,53 +18,60 @@@
   * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   * OTHER DEALINGS IN THE SOFTWARE.
 + *
 + * Authors: AMD
 + *
   */
++<<<<<<< HEAD:drivers/gpu/drm/amd/amdgpu/amdgpu_powerplay.h
 +
 +#ifndef __AMDGPU_POWERPLAY_H__
 +#define __AMDGPU_POWERPLAY_H__
++=======
+ #include "ovly.h"
+ #include "atom.h"
+ 
+ static void
+ ovly907e_image_set(struct nv50_wndw *wndw, struct nv50_wndw_atom *asyw)
+ {
+ 	u32 *push;
+ 	if ((push = evo_wait(&wndw->wndw, 12))) {
+ 		evo_mthd(push, 0x0084, 1);
+ 		evo_data(push, asyw->image.interval << 4);
+ 		evo_mthd(push, 0x00c0, 1);
+ 		evo_data(push, asyw->image.handle[0]);
+ 		evo_mthd(push, 0x0100, 1);
+ 		evo_data(push, 0x00000002);
+ 		evo_mthd(push, 0x0400, 1);
+ 		evo_data(push, asyw->image.offset[0] >> 8);
+ 		evo_mthd(push, 0x0408, 3);
+ 		evo_data(push, asyw->image.h << 16 | asyw->image.w);
+ 		evo_data(push, asyw->image.layout << 24 |
+ 			       (asyw->image.pitch[0] >> 8) << 8 |
+ 			       asyw->image.blocks[0] << 8 |
+ 			       asyw->image.blockh);
+ 		evo_data(push, asyw->image.format << 8 |
+ 			       asyw->image.colorspace);
+ 		evo_kick(push, &wndw->wndw);
+ 	}
+ }
+ 
+ const struct nv50_wndw_func
+ ovly907e = {
+ 	.acquire = ovly507e_acquire,
+ 	.release = ovly507e_release,
+ 	.ntfy_set = ovly507e_ntfy_set,
+ 	.ntfy_clr = ovly507e_ntfy_clr,
+ 	.ntfy_reset = ovly827e_ntfy_reset,
+ 	.ntfy_wait_begun = ovly827e_ntfy_wait_begun,
+ 	.image_set = ovly907e_image_set,
+ 	.image_clr = ovly507e_image_clr,
+ 	.scale_set = ovly507e_scale_set,
+ 	.update = ovly507e_update,
+ };
++>>>>>>> 2ce7f3862989 (drm/nouveau/kms/nv50-: initial overlay support):drivers/gpu/drm/nouveau/dispnv50/ovly907e.c
  
 -int
 -ovly907e_new(struct nouveau_drm *drm, int head, s32 oclass,
 -	     struct nv50_wndw **pwndw)
 -{
 -	return ovly507e_new_(&ovly907e, ovly827e_format, drm, head, oclass,
 -			     0x00000004 << (head * 4), pwndw);
 -}
 +#include "amd_shared.h"
 +
 +extern const struct amdgpu_ip_block_version amdgpu_pp_ip_block;
 +
 +#endif /* __AMDGPU_POWERPLAY_H__ */
diff --cc drivers/gpu/drm/amd/powerplay/inc/pp_acpi.h
index 8fe8ba9434ff,aaa9fe5a4fc8..000000000000
--- a/drivers/gpu/drm/amd/powerplay/inc/pp_acpi.h
+++ b/drivers/gpu/drm/amd/powerplay/inc/pp_acpi.h
@@@ -18,9 -18,90 +18,98 @@@
   * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   * OTHER DEALINGS IN THE SOFTWARE.
 + *
   */
++<<<<<<< HEAD:drivers/gpu/drm/amd/powerplay/inc/pp_acpi.h
 +
 +bool acpi_atcs_functions_supported(void *device, uint32_t index);
 +int acpi_pcie_perf_request(void *device, uint8_t perf_req, bool advertise);
 +bool acpi_atcs_notify_pcie_device_ready(void *device);
++=======
+ #include "ovly.h"
+ #include "atom.h"
+ 
+ #include <nouveau_bo.h>
+ 
+ static void
+ ovly827e_image_set(struct nv50_wndw *wndw, struct nv50_wndw_atom *asyw)
+ {
+ 	u32 *push;
+ 	if ((push = evo_wait(&wndw->wndw, 12))) {
+ 		evo_mthd(push, 0x0084, 1);
+ 		evo_data(push, asyw->image.interval << 4);
+ 		evo_mthd(push, 0x00c0, 1);
+ 		evo_data(push, asyw->image.handle[0]);
+ 		evo_mthd(push, 0x0100, 1);
+ 		evo_data(push, 0x00000002);
+ 		evo_mthd(push, 0x0800, 1);
+ 		evo_data(push, asyw->image.offset[0] >> 8);
+ 		evo_mthd(push, 0x0808, 3);
+ 		evo_data(push, asyw->image.h << 16 | asyw->image.w);
+ 		evo_data(push, asyw->image.layout << 20 |
+ 			       (asyw->image.pitch[0] >> 8) << 8 |
+ 			       asyw->image.blocks[0] << 8 |
+ 			       asyw->image.blockh);
+ 		evo_data(push, asyw->image.format << 8 |
+ 			       asyw->image.colorspace);
+ 		evo_kick(push, &wndw->wndw);
+ 	}
+ }
+ 
+ int
+ ovly827e_ntfy_wait_begun(struct nouveau_bo *bo, u32 offset,
+ 			 struct nvif_device *device)
+ {
+ 	s64 time = nvif_msec(device, 2000ULL,
+ 		u32 data = nouveau_bo_rd32(bo, offset / 4 + 3);
+ 		if ((data & 0xffff0000) == 0xffff0000)
+ 			break;
+ 		usleep_range(1, 2);
+ 	);
+ 	return time < 0 ? time : 0;
+ }
+ 
+ void
+ ovly827e_ntfy_reset(struct nouveau_bo *bo, u32 offset)
+ {
+ 	nouveau_bo_wr32(bo, offset / 4 + 0, 0x00000000);
+ 	nouveau_bo_wr32(bo, offset / 4 + 1, 0x00000000);
+ 	nouveau_bo_wr32(bo, offset / 4 + 2, 0x00000000);
+ 	nouveau_bo_wr32(bo, offset / 4 + 3, 0x80000000);
+ }
+ 
+ static const struct nv50_wndw_func
+ ovly827e = {
+ 	.acquire = ovly507e_acquire,
+ 	.release = ovly507e_release,
+ 	.ntfy_set = ovly507e_ntfy_set,
+ 	.ntfy_clr = ovly507e_ntfy_clr,
+ 	.ntfy_reset = ovly827e_ntfy_reset,
+ 	.ntfy_wait_begun = ovly827e_ntfy_wait_begun,
+ 	.image_set = ovly827e_image_set,
+ 	.image_clr = ovly507e_image_clr,
+ 	.scale_set = ovly507e_scale_set,
+ 	.update = ovly507e_update,
+ };
+ 
+ const u32
+ ovly827e_format[] = {
+ 	DRM_FORMAT_YUYV,
+ 	DRM_FORMAT_UYVY,
+ 	DRM_FORMAT_XRGB8888,
+ 	DRM_FORMAT_ARGB8888,
+ 	DRM_FORMAT_XRGB1555,
+ 	DRM_FORMAT_ARGB1555,
+ 	DRM_FORMAT_XBGR2101010,
+ 	DRM_FORMAT_ABGR2101010,
+ 	0
+ };
+ 
+ int
+ ovly827e_new(struct nouveau_drm *drm, int head, s32 oclass,
+ 	     struct nv50_wndw **pwndw)
+ {
+ 	return ovly507e_new_(&ovly827e, ovly827e_format, drm, head, oclass,
+ 			     0x00000004 << (head * 8), pwndw);
+ }
++>>>>>>> 2ce7f3862989 (drm/nouveau/kms/nv50-: initial overlay support):drivers/gpu/drm/nouveau/dispnv50/ovly827e.c
diff --cc drivers/gpu/drm/amd/powerplay/inc/pp_soc15.h
index a511611ec7e0,2ee404b3e19f..000000000000
--- a/drivers/gpu/drm/amd/powerplay/inc/pp_soc15.h
+++ b/drivers/gpu/drm/amd/powerplay/inc/pp_soc15.h
@@@ -18,33 -18,35 +18,47 @@@
   * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   * OTHER DEALINGS IN THE SOFTWARE.
 + *
   */
 -#include "oimm.h"
 +#ifndef PP_SOC15_H
 +#define PP_SOC15_H
  
 -#include <nvif/cl507b.h>
 +#include "vega10/soc15ip.h"
  
++<<<<<<< HEAD:drivers/gpu/drm/amd/powerplay/inc/pp_soc15.h
 +inline static uint32_t soc15_get_register_offset(
 +		uint32_t hw_id,
 +		uint32_t inst,
 +		uint32_t segment,
 +		uint32_t offset)
++=======
+ static int
+ oimm507b_init_(const struct nv50_wimm_func *func, struct nouveau_drm *drm,
+ 	       s32 oclass, struct nv50_wndw *wndw)
++>>>>>>> 2ce7f3862989 (drm/nouveau/kms/nv50-: initial overlay support):drivers/gpu/drm/nouveau/dispnv50/oimm507b.c
  {
 -	struct nv50_disp_overlay_v0 args = {
 -		.head = wndw->id,
 -	};
 -	struct nv50_disp *disp = nv50_disp(drm->dev);
 -	int ret;
 +	uint32_t reg = 0;
  
 -	ret = nvif_object_init(&disp->disp->object, 0, oclass, &args,
 -			       sizeof(args), &wndw->wimm.base.user);
 -	if (ret) {
 -		NV_ERROR(drm, "oimm%04x allocation failed: %d\n", oclass, ret);
 -		return ret;
 -	}
 +	if (hw_id == THM_HWID)
 +		reg = THM_BASE.instance[inst].segment[segment] + offset;
 +	else if (hw_id == NBIF_HWID)
 +		reg = NBIF_BASE.instance[inst].segment[segment] + offset;
 +	else if (hw_id == MP1_HWID)
 +		reg = MP1_BASE.instance[inst].segment[segment] + offset;
 +	else if (hw_id == DF_HWID)
 +		reg = DF_BASE.instance[inst].segment[segment] + offset;
 +	else if (hw_id == GC_HWID)
 +		reg = GC_BASE.instance[inst].segment[segment] + offset;
  
 -	nvif_object_map(&wndw->wimm.base.user, NULL, 0);
 -	wndw->immd = func;
 -	return 0;
 +	return reg;
  }
  
++<<<<<<< HEAD:drivers/gpu/drm/amd/powerplay/inc/pp_soc15.h
 +#endif
++=======
+ int
+ oimm507b_init(struct nouveau_drm *drm, s32 oclass, struct nv50_wndw *wndw)
+ {
+ 	return oimm507b_init_(&curs507a, drm, oclass, wndw);
+ }
++>>>>>>> 2ce7f3862989 (drm/nouveau/kms/nv50-: initial overlay support):drivers/gpu/drm/nouveau/dispnv50/oimm507b.c
diff --cc drivers/gpu/drm/amd/powerplay/smumgr/polaris10_smc.h
index 1df8154d0626,90c246d47604..000000000000
--- a/drivers/gpu/drm/amd/powerplay/smumgr/polaris10_smc.h
+++ b/drivers/gpu/drm/amd/powerplay/smumgr/polaris10_smc.h
@@@ -18,27 -18,40 +18,48 @@@
   * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   * OTHER DEALINGS IN THE SOFTWARE.
 + *
   */
 -#include "ovly.h"
 -#include "oimm.h"
 +#ifndef POLARIS10_SMC_H
 +#define POLARIS10_SMC_H
  
 -#include <nvif/class.h>
 +#include "smumgr.h"
  
++<<<<<<< HEAD:drivers/gpu/drm/amd/powerplay/smumgr/polaris10_smc.h
++=======
+ int
+ nv50_ovly_new(struct nouveau_drm *drm, int head, struct nv50_wndw **pwndw)
+ {
+ 	static const struct {
+ 		s32 oclass;
+ 		int version;
+ 		int (*new)(struct nouveau_drm *, int, s32, struct nv50_wndw **);
+ 	} ovlys[] = {
+ 		{ GK104_DISP_OVERLAY_CONTROL_DMA, 0, ovly917e_new },
+ 		{ GF110_DISP_OVERLAY_CONTROL_DMA, 0, ovly907e_new },
+ 		{ GT214_DISP_OVERLAY_CHANNEL_DMA, 0, ovly827e_new },
+ 		{ GT200_DISP_OVERLAY_CHANNEL_DMA, 0, ovly827e_new },
+ 		{   G82_DISP_OVERLAY_CHANNEL_DMA, 0, ovly827e_new },
+ 		{  NV50_DISP_OVERLAY_CHANNEL_DMA, 0, ovly507e_new },
+ 		{}
+ 	};
+ 	struct nv50_disp *disp = nv50_disp(drm->dev);
+ 	int cid, ret;
++>>>>>>> 2ce7f3862989 (drm/nouveau/kms/nv50-: initial overlay support):drivers/gpu/drm/nouveau/dispnv50/ovly.c
  
 -	cid = nvif_mclass(&disp->disp->object, ovlys);
 -	if (cid < 0) {
 -		NV_ERROR(drm, "No supported overlay class\n");
 -		return cid;
 -	}
 +int polaris10_populate_all_graphic_levels(struct pp_hwmgr *hwmgr);
 +int polaris10_populate_all_memory_levels(struct pp_hwmgr *hwmgr);
 +int polaris10_init_smc_table(struct pp_hwmgr *hwmgr);
 +int polaris10_thermal_setup_fan_table(struct pp_hwmgr *hwmgr);
 +int polaris10_thermal_avfs_enable(struct pp_hwmgr *hwmgr);
 +int polaris10_update_smc_table(struct pp_hwmgr *hwmgr, uint32_t type);
 +int polaris10_update_sclk_threshold(struct pp_hwmgr *hwmgr);
 +uint32_t polaris10_get_offsetof(uint32_t type, uint32_t member);
 +uint32_t polaris10_get_mac_definition(uint32_t value);
 +int polaris10_process_firmware_header(struct pp_hwmgr *hwmgr);
 +bool polaris10_is_dpm_running(struct pp_hwmgr *hwmgr);
 +int polaris10_populate_requested_graphic_levels(struct pp_hwmgr *hwmgr,
 +		struct amd_pp_profile *request);
  
 -	ret = ovlys[cid].new(drm, head, ovlys[cid].oclass, pwndw);
 -	if (ret)
 -		return ret;
 +#endif
  
 -	return nv50_oimm_init(drm, *pwndw);
 -}
diff --cc drivers/gpu/drm/nouveau/dispnv50/Kbuild
index 43fc8be49391,ebd18cb9feda..000000000000
--- a/drivers/gpu/drm/nouveau/dispnv50/Kbuild
+++ b/drivers/gpu/drm/nouveau/dispnv50/Kbuild
@@@ -1,1 -1,43 +1,46 @@@
  nouveau-y += dispnv50/disp.o
++<<<<<<< HEAD
++=======
+ nouveau-y += dispnv50/lut.o
+ 
+ nouveau-y += dispnv50/core.o
+ nouveau-y += dispnv50/core507d.o
+ nouveau-y += dispnv50/core827d.o
+ nouveau-y += dispnv50/core907d.o
+ nouveau-y += dispnv50/core917d.o
+ 
+ nouveau-y += dispnv50/dac507d.o
+ nouveau-y += dispnv50/dac907d.o
+ 
+ nouveau-y += dispnv50/pior507d.o
+ 
+ nouveau-y += dispnv50/sor507d.o
+ nouveau-y += dispnv50/sor907d.o
+ 
+ nouveau-y += dispnv50/head.o
+ nouveau-y += dispnv50/head507d.o
+ nouveau-y += dispnv50/head827d.o
+ nouveau-y += dispnv50/head907d.o
+ nouveau-y += dispnv50/head917d.o
+ 
+ nouveau-y += dispnv50/wndw.o
+ 
+ nouveau-y += dispnv50/base.o
+ nouveau-y += dispnv50/base507c.o
+ nouveau-y += dispnv50/base827c.o
+ nouveau-y += dispnv50/base907c.o
+ nouveau-y += dispnv50/base917c.o
+ 
+ nouveau-y += dispnv50/curs.o
+ nouveau-y += dispnv50/curs507a.o
+ nouveau-y += dispnv50/curs907a.o
+ 
+ nouveau-y += dispnv50/oimm.o
+ nouveau-y += dispnv50/oimm507b.o
+ 
+ nouveau-y += dispnv50/ovly.o
+ nouveau-y += dispnv50/ovly507e.o
+ nouveau-y += dispnv50/ovly827e.o
+ nouveau-y += dispnv50/ovly907e.o
+ nouveau-y += dispnv50/ovly917e.o
++>>>>>>> 2ce7f3862989 (drm/nouveau/kms/nv50-: initial overlay support)
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/atom.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/base.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/curs.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/disp.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/head507d.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/head907d.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/ovly.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/ovly507e.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.h
* Unmerged path drivers/gpu/drm/amd/amdgpu/amdgpu_powerplay.h
* Unmerged path drivers/gpu/drm/amd/powerplay/inc/pp_acpi.h
* Unmerged path drivers/gpu/drm/amd/powerplay/inc/pp_soc15.h
* Unmerged path drivers/gpu/drm/amd/powerplay/smumgr/polaris10_smc.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/Kbuild
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/atom.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/base.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/curs.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/disp.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/head507d.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/head907d.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/ovly.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/ovly507e.c
diff --git a/drivers/gpu/drm/nouveau/dispnv50/ovly917e.c b/drivers/gpu/drm/nouveau/dispnv50/ovly917e.c
new file mode 100644
index 000000000000..505fa7e78523
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/dispnv50/ovly917e.c
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2018 Red Hat Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ */
+#include "ovly.h"
+
+static const u32
+ovly917e_format[] = {
+	DRM_FORMAT_YUYV,
+	DRM_FORMAT_UYVY,
+	DRM_FORMAT_XRGB8888,
+	DRM_FORMAT_ARGB8888,
+	DRM_FORMAT_XRGB1555,
+	DRM_FORMAT_ARGB1555,
+	DRM_FORMAT_XBGR2101010,
+	DRM_FORMAT_ABGR2101010,
+	DRM_FORMAT_XRGB2101010,
+	DRM_FORMAT_ARGB2101010,
+	0
+};
+
+int
+ovly917e_new(struct nouveau_drm *drm, int head, s32 oclass,
+	     struct nv50_wndw **pwndw)
+{
+	return ovly507e_new_(&ovly907e, ovly917e_format, drm, head, oclass,
+			     0x00000004 << (head * 4), pwndw);
+}
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.h
