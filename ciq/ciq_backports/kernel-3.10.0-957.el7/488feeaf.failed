nfp: bpf: add helpers for modifying branch addresses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 488feeaf6d2f9189bdb65f31094a8cff5fcd6c58
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/488feeaf.failed

In preparation for better handling of relocations move existing
helper for setting branch offset to nfp_asm.c and add two more.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Jiong Wang <jiong.wang@netronome.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 488feeaf6d2f9189bdb65f31094a8cff5fcd6c58)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_asm.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_asm.h
index 84fa9577808f,a50240ab0ce2..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_asm.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_asm.h
@@@ -92,30 -93,37 +92,47 @@@ enum br_ctx_signal_state 
  	BR_CSS_NONE = 2,
  };
  
++<<<<<<< HEAD
 +#define OP_BBYTE_BASE	0x0c800000000ULL
 +#define OP_BB_A_SRC	0x000000000ffULL
 +#define OP_BB_BYTE	0x00000000300ULL
 +#define OP_BB_B_SRC	0x0000003fc00ULL
 +#define OP_BB_I8	0x00000040000ULL
 +#define OP_BB_EQ	0x00000080000ULL
 +#define OP_BB_DEFBR	0x00000300000ULL
 +#define OP_BB_ADDR_LO	0x007ffc00000ULL
 +#define OP_BB_ADDR_HI	0x10000000000ULL
++=======
+ u16 br_get_offset(u64 instr);
+ void br_set_offset(u64 *instr, u16 offset);
+ void br_add_offset(u64 *instr, u16 offset);
+ 
+ #define OP_BBYTE_BASE		0x0c800000000ULL
+ #define OP_BB_A_SRC		0x000000000ffULL
+ #define OP_BB_BYTE		0x00000000300ULL
+ #define OP_BB_B_SRC		0x0000003fc00ULL
+ #define OP_BB_I8		0x00000040000ULL
+ #define OP_BB_EQ		0x00000080000ULL
+ #define OP_BB_DEFBR		0x00000300000ULL
+ #define OP_BB_ADDR_LO		0x007ffc00000ULL
+ #define OP_BB_ADDR_HI		0x10000000000ULL
+ #define OP_BB_SRC_LMEXTN	0x40000000000ULL
 -
 -#define OP_BALU_BASE		0x0e800000000ULL
 -#define OP_BA_A_SRC		0x000000003ffULL
 -#define OP_BA_B_SRC		0x000000ffc00ULL
 -#define OP_BA_DEFBR		0x00000300000ULL
 -#define OP_BA_ADDR_HI		0x0007fc00000ULL
 -
 -#define OP_IMMED_A_SRC		0x000000003ffULL
 -#define OP_IMMED_B_SRC		0x000000ffc00ULL
 -#define OP_IMMED_IMM		0x0000ff00000ULL
 -#define OP_IMMED_WIDTH		0x00060000000ULL
 -#define OP_IMMED_INV		0x00080000000ULL
 -#define OP_IMMED_SHIFT		0x00600000000ULL
 -#define OP_IMMED_BASE		0x0f000000000ULL
 -#define OP_IMMED_WR_AB		0x20000000000ULL
 -#define OP_IMMED_SRC_LMEXTN	0x40000000000ULL
 -#define OP_IMMED_DST_LMEXTN	0x80000000000ULL
++>>>>>>> 488feeaf6d2f (nfp: bpf: add helpers for modifying branch addresses)
 +
 +#define OP_BALU_BASE	0x0e800000000ULL
 +#define OP_BA_A_SRC	0x000000003ffULL
 +#define OP_BA_B_SRC	0x000000ffc00ULL
 +#define OP_BA_DEFBR	0x00000300000ULL
 +#define OP_BA_ADDR_HI	0x0007fc00000ULL
 +
 +#define OP_IMMED_A_SRC	0x000000003ffULL
 +#define OP_IMMED_B_SRC	0x000000ffc00ULL
 +#define OP_IMMED_IMM	0x0000ff00000ULL
 +#define OP_IMMED_WIDTH	0x00060000000ULL
 +#define OP_IMMED_INV	0x00080000000ULL
 +#define OP_IMMED_SHIFT	0x00600000000ULL
 +#define OP_IMMED_BASE	0x0f000000000ULL
 +#define OP_IMMED_WR_AB	0x20000000000ULL
  
  enum immed_width {
  	IMMED_WIDTH_ALL = 0,
diff --git a/drivers/net/ethernet/netronome/nfp/bpf/jit.c b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
index 0a5af8620ac1..a22e368c55a8 100644
--- a/drivers/net/ethernet/netronome/nfp/bpf/jit.c
+++ b/drivers/net/ethernet/netronome/nfp/bpf/jit.c
@@ -1764,18 +1764,6 @@ static const instr_cb_t instr_cb[256] = {
 	[BPF_JMP | BPF_EXIT] =		goto_out,
 };
 
-/* --- Misc code --- */
-static void br_set_offset(u64 *instr, u16 offset)
-{
-	u16 addr_lo, addr_hi;
-
-	addr_lo = offset & (OP_BR_ADDR_LO >> __bf_shf(OP_BR_ADDR_LO));
-	addr_hi = offset != addr_lo;
-	*instr &= ~(OP_BR_ADDR_HI | OP_BR_ADDR_LO);
-	*instr |= FIELD_PREP(OP_BR_ADDR_HI, addr_hi);
-	*instr |= FIELD_PREP(OP_BR_ADDR_LO, addr_lo);
-}
-
 /* --- Assembler logic --- */
 static int nfp_fixup_branches(struct nfp_prog *nfp_prog)
 {
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_asm.c b/drivers/net/ethernet/netronome/nfp/nfp_asm.c
index 1fbe2c4bc84e..2dfa5493a0fb 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_asm.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_asm.c
@@ -49,6 +49,36 @@ const struct cmd_tgt_act cmd_tgt_act[__CMD_TGT_MAP_SIZE] = {
 	[CMD_TGT_READ_SWAP_LE] =	{ 0x03, 0x40 },
 };
 
+u16 br_get_offset(u64 instr)
+{
+	u16 addr_lo, addr_hi;
+
+	addr_lo = FIELD_GET(OP_BR_ADDR_LO, instr);
+	addr_hi = FIELD_GET(OP_BR_ADDR_HI, instr);
+
+	return (addr_hi * ((OP_BR_ADDR_LO >> __bf_shf(OP_BR_ADDR_LO)) + 1)) |
+		addr_lo;
+}
+
+void br_set_offset(u64 *instr, u16 offset)
+{
+	u16 addr_lo, addr_hi;
+
+	addr_lo = offset & (OP_BR_ADDR_LO >> __bf_shf(OP_BR_ADDR_LO));
+	addr_hi = offset != addr_lo;
+	*instr &= ~(OP_BR_ADDR_HI | OP_BR_ADDR_LO);
+	*instr |= FIELD_PREP(OP_BR_ADDR_HI, addr_hi);
+	*instr |= FIELD_PREP(OP_BR_ADDR_LO, addr_lo);
+}
+
+void br_add_offset(u64 *instr, u16 offset)
+{
+	u16 addr;
+
+	addr = br_get_offset(*instr);
+	br_set_offset(instr, addr + offset);
+}
+
 static u16 nfp_swreg_to_unreg(swreg reg, bool is_dst)
 {
 	bool lm_id, lm_dec = false;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_asm.h
