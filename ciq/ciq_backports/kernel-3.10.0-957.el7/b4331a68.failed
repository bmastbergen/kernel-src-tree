vti6: Change minimum MTU to IPV4_MIN_MTU, vti6 can carry IPv4 too

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Stefano Brivio <sbrivio@redhat.com>
commit b4331a681822b420511b3258f1c3db35001fde48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b4331a68.failed

A vti6 interface can carry IPv4 as well, so it makes no sense to
enforce a minimum MTU of IPV6_MIN_MTU.

If the user sets an MTU below IPV6_MIN_MTU, IPv6 will be
disabled on the interface, courtesy of addrconf_notify().

	Reported-by: Xin Long <lucien.xin@gmail.com>
Fixes: b96f9afee4eb ("ipv4/6: use core net MTU range checking")
Fixes: c6741fbed6dc ("vti6: Properly adjust vti6 MTU from MTU of lower device")
Fixes: 53c81e95df17 ("ip6_vti: adjust vti mtu according to mtu of lower device")
	Signed-off-by: Stefano Brivio <sbrivio@redhat.com>
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
(cherry picked from commit b4331a681822b420511b3258f1c3db35001fde48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ip6_vti.c
diff --cc net/ipv6/ip6_vti.c
index 850df37ec7b2,ca957dd93a29..000000000000
--- a/net/ipv6/ip6_vti.c
+++ b/net/ipv6/ip6_vti.c
@@@ -641,8 -665,11 +641,16 @@@ static void vti6_link_config(struct ip6
  		tdev = __dev_get_by_index(t->net, p->link);
  
  	if (tdev)
++<<<<<<< HEAD
 +		dev->mtu = max_t(int, tdev->mtu - dev->hard_header_len,
 +				 IPV6_MIN_MTU);
++=======
+ 		mtu = tdev->mtu - sizeof(struct ipv6hdr);
+ 	else
+ 		mtu = ETH_DATA_LEN - LL_MAX_HEADER - sizeof(struct ipv6hdr);
+ 
+ 	dev->mtu = max_t(int, mtu, IPV4_MIN_MTU);
++>>>>>>> b4331a681822 (vti6: Change minimum MTU to IPV4_MIN_MTU, vti6 can carry IPv4 too)
  }
  
  /**
@@@ -864,12 -877,12 +872,17 @@@ static const struct net_device_ops vti6
  static void vti6_dev_setup(struct net_device *dev)
  {
  	dev->netdev_ops = &vti6_netdev_ops;
 -	dev->needs_free_netdev = true;
 -	dev->priv_destructor = vti6_dev_free;
 +	dev->extended->needs_free_netdev = true;
 +	dev->extended->priv_destructor = vti6_dev_free;
  
  	dev->type = ARPHRD_TUNNEL6;
++<<<<<<< HEAD
 +	dev->hard_header_len = LL_MAX_HEADER + sizeof(struct ipv6hdr);
 +	dev->mtu = ETH_DATA_LEN;
++=======
+ 	dev->min_mtu = IPV4_MIN_MTU;
+ 	dev->max_mtu = IP_MAX_MTU - sizeof(struct ipv6hdr);
++>>>>>>> b4331a681822 (vti6: Change minimum MTU to IPV4_MIN_MTU, vti6 can carry IPv4 too)
  	dev->flags |= IFF_NOARP;
  	dev->addr_len = sizeof(struct in6_addr);
  	netif_keep_dst(dev);
* Unmerged path net/ipv6/ip6_vti.c
