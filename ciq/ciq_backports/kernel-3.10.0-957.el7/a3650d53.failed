resource: Handle resource flags properly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Toshi Kani <toshi.kani@hpe.com>
commit a3650d53ba16ec412185abb98f231e9ba6bcdc65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a3650d53.failed

I/O resource flags consist of I/O resource types and modifier
bits. Therefore, checking an I/O resource type in 'flags' must
be performed with a bitwise operation.

Fix find_next_iomem_res() and region_intersects() that simply
compare 'flags' against a given value.

Also change __request_region() to set 'res->flags' from
resource_type() and resource_ext_type() of the parent, so that
children nodes will inherit the extended I/O resource type.

	Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jakub Sitnicki <jsitnicki@gmail.com>
	Cc: Jiang Liu <jiang.liu@linux.intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Luis R. Rodriguez <mcgrof@suse.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Toshi Kani <toshi.kani@hp.com>
	Cc: Vinod Koul <vinod.koul@intel.com>
	Cc: linux-arch@vger.kernel.org
	Cc: linux-mm <linux-mm@kvack.org>
Link: http://lkml.kernel.org/r/1453841853-11383-3-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a3650d53ba16ec412185abb98f231e9ba6bcdc65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/resource.c
diff --cc kernel/resource.c
index 0cf26b7524fd,96afc8027487..000000000000
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@@ -1138,6 -1072,8 +1139,11 @@@ struct resource * __request_region(stru
  	res->name = name;
  	res->start = start;
  	res->end = start + n - 1;
++<<<<<<< HEAD
++=======
+ 	res->flags = resource_type(parent) | resource_ext_type(parent);
+ 	res->flags |= IORESOURCE_BUSY | flags;
++>>>>>>> a3650d53ba16 (resource: Handle resource flags properly)
  
  	write_lock(&resource_lock);
  
* Unmerged path kernel/resource.c
