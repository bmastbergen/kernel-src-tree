rbd: set discard_alignment to zero

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author David Disseldorp <ddiss@suse.de>
commit 7c084289795bc0f3b9ab315ac3c8d269dd4d0215
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/7c084289.failed

RBD devices are currently incorrectly initialised with the block queue
discard_alignment set to the underlying RADOS object size.

As per Documentation/ABI/testing/sysfs-block:
  The discard_alignment parameter indicates how many bytes the beginning
  of the device is offset from the internal allocation unit's natural
  alignment.

Correcting the discard_alignment parameter from the RADOS object size to
zero (the blk_set_default_limits() default) has no effect on how discard
requests are propagated through the block layer - @alignment in
__blkdev_issue_discard() remains zero. However, it does fix the UNMAP
granularity alignment value advertised to SCSI initiators via the Block
Limits VPD.

	Signed-off-by: David Disseldorp <ddiss@suse.de>
	Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 7c084289795bc0f3b9ab315ac3c8d269dd4d0215)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/rbd.c
diff --cc drivers/block/rbd.c
index 769d754265f0,8c132a7fbd2c..000000000000
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@@ -4472,14 -4390,11 +4472,19 @@@ static int rbd_init_disk(struct rbd_dev
  	/* enable the discard support */
  	queue_flag_set_unlocked(QUEUE_FLAG_DISCARD, q);
  	q->limits.discard_granularity = segment_size;
++<<<<<<< HEAD
 +	q->limits.discard_alignment = segment_size;
 +	q->limits.max_discard_sectors = segment_size / SECTOR_SIZE;
 +	q->limits.discard_zeroes_data = 1;
 +
 +	blk_queue_merge_bvec(q, rbd_merge_bvec);
++=======
+ 	blk_queue_max_discard_sectors(q, segment_size / SECTOR_SIZE);
+ 	blk_queue_max_write_zeroes_sectors(q, segment_size / SECTOR_SIZE);
++>>>>>>> 7c084289795b (rbd: set discard_alignment to zero)
  
  	if (!ceph_test_opt(rbd_dev->rbd_client->client, NOCRC))
 -		q->backing_dev_info->capabilities |= BDI_CAP_STABLE_WRITES;
 +		q->backing_dev_info.capabilities |= BDI_CAP_STABLE_WRITES;
  
  	/*
  	 * disk_release() expects a queue ref from add_disk() and will
* Unmerged path drivers/block/rbd.c
