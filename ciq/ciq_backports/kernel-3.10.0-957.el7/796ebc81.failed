x86/umip: Select X86_INTEL_UMIP by default

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] umip: Select X86_INTEL_UMIP by default (Gopal Tiwari) [1456572]
Rebuild_FUZZ: 95.00%
commit-author Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
commit 796ebc81b9931bfa293b4ca38ae28c21a363f4d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/796ebc81.failed

UMIP does cause any performance penalty to the vast majority of x86 code
that does not use the legacy instructions affected by UMIP.

Also describe UMIP more accurately and explain the behavior that can be
expected by the (few) applications that use the affected instructions.

	Suggested-by: Ingo Molnar <mingo@kernel.org>
	Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: ricardo.neri@intel.com
Link: http://lkml.kernel.org/r/1510640985-18412-2-git-send-email-ricardo.neri-calderon@linux.intel.com
[ Spelling fixes, rewrote the changelog. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 796ebc81b9931bfa293b4ca38ae28c21a363f4d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
diff --cc arch/x86/Kconfig
index 48ae09959d87,a0623f0668ab..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1725,6 -1804,66 +1725,69 @@@ config X86_SMA
  
  	  If unsure, say Y.
  
++<<<<<<< HEAD
++=======
+ config X86_INTEL_UMIP
+ 	def_bool y
+ 	depends on CPU_SUP_INTEL
+ 	prompt "Intel User Mode Instruction Prevention" if EXPERT
+ 	---help---
+ 	  The User Mode Instruction Prevention (UMIP) is a security
+ 	  feature in newer Intel processors. If enabled, a general
+ 	  protection fault is issued if the SGDT, SLDT, SIDT, SMSW
+ 	  or STR instructions are executed in user mode. These instructions
+ 	  unnecessarily expose information about the hardware state.
+ 
+ 	  The vast majority of applications do not use these instructions.
+ 	  For the very few that do, software emulation is provided in
+ 	  specific cases in protected and virtual-8086 modes. Emulated
+ 	  results are dummy.
+ 
+ config X86_INTEL_MPX
+ 	prompt "Intel MPX (Memory Protection Extensions)"
+ 	def_bool n
+ 	# Note: only available in 64-bit mode due to VMA flags shortage
+ 	depends on CPU_SUP_INTEL && X86_64
+ 	select ARCH_USES_HIGH_VMA_FLAGS
+ 	---help---
+ 	  MPX provides hardware features that can be used in
+ 	  conjunction with compiler-instrumented code to check
+ 	  memory references.  It is designed to detect buffer
+ 	  overflow or underflow bugs.
+ 
+ 	  This option enables running applications which are
+ 	  instrumented or otherwise use MPX.  It does not use MPX
+ 	  itself inside the kernel or to protect the kernel
+ 	  against bad memory references.
+ 
+ 	  Enabling this option will make the kernel larger:
+ 	  ~8k of kernel text and 36 bytes of data on a 64-bit
+ 	  defconfig.  It adds a long to the 'mm_struct' which
+ 	  will increase the kernel memory overhead of each
+ 	  process and adds some branches to paths used during
+ 	  exec() and munmap().
+ 
+ 	  For details, see Documentation/x86/intel_mpx.txt
+ 
+ 	  If unsure, say N.
+ 
+ config X86_INTEL_MEMORY_PROTECTION_KEYS
+ 	prompt "Intel Memory Protection Keys"
+ 	def_bool y
+ 	# Note: only available in 64-bit mode
+ 	depends on CPU_SUP_INTEL && X86_64
+ 	select ARCH_USES_HIGH_VMA_FLAGS
+ 	select ARCH_HAS_PKEYS
+ 	---help---
+ 	  Memory Protection Keys provides a mechanism for enforcing
+ 	  page-based protections, but without requiring modification of the
+ 	  page tables when an application changes protection domains.
+ 
+ 	  For details, see Documentation/x86/protection-keys.txt
+ 
+ 	  If unsure, say y.
+ 
++>>>>>>> 796ebc81b993 (x86/umip: Select X86_INTEL_UMIP by default)
  config EFI
  	bool "EFI runtime service support"
  	depends on ACPI
* Unmerged path arch/x86/Kconfig
