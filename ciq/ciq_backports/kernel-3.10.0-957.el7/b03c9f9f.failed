bpf/verifier: track signed and unsigned min/max values

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Edward Cree <ecree@solarflare.com>
commit b03c9f9fdc37dab81ea04d5dacdc5995d4c224c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b03c9f9f.failed

Allows us to, sometimes, combine information from a signed check of one
 bound and an unsigned check of the other.
We now track the full range of possible values, rather than restricting
 ourselves to [0, 1<<30) and considering anything beyond that as
 unknown.  While this is probably not necessary, it makes the code more
 straightforward and symmetrical between signed and unsigned bounds.

	Signed-off-by: Edward Cree <ecree@solarflare.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b03c9f9fdc37dab81ea04d5dacdc5995d4c224c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf_verifier.h
#	include/linux/tnum.h
#	kernel/bpf/tnum.c
#	kernel/bpf/verifier.c
* Unmerged path include/linux/bpf_verifier.h
* Unmerged path include/linux/tnum.h
* Unmerged path kernel/bpf/tnum.c
* Unmerged path kernel/bpf/verifier.c
* Unmerged path include/linux/bpf_verifier.h
* Unmerged path include/linux/tnum.h
* Unmerged path kernel/bpf/tnum.c
* Unmerged path kernel/bpf/verifier.c
