scsi: megaraid_sas: NVMe passthrough command support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [scsi] megaraid_sas: NVMe passthrough command support (Tomas Henzl) [1513838]
Rebuild_FUZZ: 93.88%
commit-author Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
commit f870bcbe9a991264f424ad937916695b2f3de133
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f870bcbe.failed

NVMe passthrough via MFI interface. Current MegaRAID product supports
different types of encapsulation via the MFI framework.

NVMe native command should be framed by application and it should be
embedded in MFI as payload. The driver will provide interface to send
the MFI frame along with the payload (in this case, payload is NVMe
native command) to the firmware. Driver already has an existing, similar
interface for SATA and SMP passthrough.

1. Driver will pass MFI command to the firmware if the latter supports
   NVMe encapsulated processing (not all SAS3.5 firmware supports this
   feature).

2. Driver exposes sysfs entry support_nvme_encapsulation. This is
   required for backward compatibility for applications using earlier
   driver versions that did not process IOCTL frames and could result in
   host hang.

   This is already fixed as part of commit 82add4e1b354 ("scsi:
   megaraid_sas: Incorrect processing of IOCTL frames for SMP/STP
   commands")

[mkp: clarified commit message]

	Signed-off-by: Sumit Saxena <sumit.saxena@broadcom.com>
	Signed-off-by: Shivasharan S <shivasharan.srikanteshwara@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit f870bcbe9a991264f424ad937916695b2f3de133)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas.h
#	drivers/scsi/megaraid/megaraid_sas_base.c
#	drivers/scsi/megaraid/megaraid_sas_fusion.c
diff --cc drivers/scsi/megaraid/megaraid_sas.h
index 4851bc47e3cd,ba6503f37756..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas.h
+++ b/drivers/scsi/megaraid/megaraid_sas.h
@@@ -1628,7 -1649,9 +1647,13 @@@ union megasas_sgl_frame 
  typedef union _MFI_CAPABILITIES {
  	struct {
  #if   defined(__BIG_ENDIAN_BITFIELD)
++<<<<<<< HEAD
 +	u32     reserved:19;
++=======
+ 	u32     reserved:17;
+ 	u32	support_nvme_passthru:1;
+ 	u32     support_64bit_mode:1;
++>>>>>>> f870bcbe9a99 (scsi: megaraid_sas: NVMe passthrough command support)
  	u32 support_pd_map_target_id:1;
  	u32     support_qd_throttling:1;
  	u32     support_fp_rlbypass:1;
@@@ -1656,7 -1679,9 +1681,13 @@@
  	u32     support_fp_rlbypass:1;
  	u32     support_qd_throttling:1;
  	u32	support_pd_map_target_id:1;
++<<<<<<< HEAD
 +	u32     reserved:19;
++=======
+ 	u32     support_64bit_mode:1;
+ 	u32	support_nvme_passthru:1;
+ 	u32     reserved:17;
++>>>>>>> f870bcbe9a99 (scsi: megaraid_sas: NVMe passthrough command support)
  #endif
  	} mfi_capabilities;
  	__le32		reg;
@@@ -2253,6 -2288,8 +2284,11 @@@ struct megasas_instance 
  	u8  r1_ldio_hint_default;
  	u32 nvme_page_size;
  	u8 adapter_type;
++<<<<<<< HEAD
++=======
+ 	bool consistent_mask_64bit;
+ 	bool support_nvme_passthru;
++>>>>>>> f870bcbe9a99 (scsi: megaraid_sas: NVMe passthrough command support)
  };
  struct MR_LD_VF_MAP {
  	u32 size;
diff --cc drivers/scsi/megaraid/megaraid_sas_base.c
index 01407ec93157,0f1d88f272be..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@@ -4734,12 -4720,14 +4736,18 @@@ megasas_get_ctrl_info(struct megasas_in
  		 */
  		megasas_update_ext_vd_details(instance);
  		instance->use_seqnum_jbod_fp =
 -			ci->adapterOperations3.useSeqNumJbodFP;
 +			ctrl_info->adapterOperations3.useSeqNumJbodFP;
  		instance->support_morethan256jbod =
++<<<<<<< HEAD
 +			ctrl_info->adapter_operations4.support_pd_map_target_id;
++=======
+ 			ci->adapter_operations4.support_pd_map_target_id;
+ 		instance->support_nvme_passthru =
+ 			ci->adapter_operations4.support_nvme_passthru;
++>>>>>>> f870bcbe9a99 (scsi: megaraid_sas: NVMe passthrough command support)
  
  		/*Check whether controller is iMR or MR */
 -		instance->is_imr = (ci->memory_size ? 0 : 1);
 +		instance->is_imr = (ctrl_info->memory_size ? 0 : 1);
  		dev_info(&instance->pdev->dev,
  			"controller type\t: %s(%dMB)\n",
  			instance->is_imr ? "iMR" : "MR",
diff --cc drivers/scsi/megaraid/megaraid_sas_fusion.c
index e7751d9bff05,073ced07e662..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_fusion.c
+++ b/drivers/scsi/megaraid/megaraid_sas_fusion.c
@@@ -861,6 -1079,11 +861,14 @@@ megasas_ioc_init_fusion(struct megasas_
  
  	drv_ops->mfi_capabilities.support_qd_throttling = 1;
  	drv_ops->mfi_capabilities.support_pd_map_target_id = 1;
++<<<<<<< HEAD
++=======
+ 	drv_ops->mfi_capabilities.support_nvme_passthru = 1;
+ 
+ 	if (instance->consistent_mask_64bit)
+ 		drv_ops->mfi_capabilities.support_64bit_mode = 1;
+ 
++>>>>>>> f870bcbe9a99 (scsi: megaraid_sas: NVMe passthrough command support)
  	/* Convert capability to LE32 */
  	cpu_to_le32s((u32 *)&init_frame->driver_operations.mfi_capabilities);
  
* Unmerged path drivers/scsi/megaraid/megaraid_sas.h
* Unmerged path drivers/scsi/megaraid/megaraid_sas_base.c
* Unmerged path drivers/scsi/megaraid/megaraid_sas_fusion.c
