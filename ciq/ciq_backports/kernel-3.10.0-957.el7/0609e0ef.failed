block: make part_in_flight() take an array of two ints

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [block] make part_in_flight() take an array of two ints (Ming Lei) [1548261]
Rebuild_FUZZ: 93.07%
commit-author Jens Axboe <axboe@kernel.dk>
commit 0609e0efc5e15195ecf8c6d2f2e890d98760e337
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0609e0ef.failed

Instead of returning the count that matches the partition, pass
in an array of two ints. Index 0 will be filled with the inflight
count for the partition in question, and index 1 will filled
with the root inflight count, if the partition passed in is not the
root.

This is in preparation for being able to calculate both in one
go.

	Reviewed-by: Bart Van Assche <bart.vanassche@wdc.com>
	Reviewed-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 0609e0efc5e15195ecf8c6d2f2e890d98760e337)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
#	block/genhd.c
#	block/partition-generic.c
#	include/linux/genhd.h
diff --cc block/blk-core.c
index cfbd315875ad,6ad2b8602c1d..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -1492,18 -1469,18 +1492,23 @@@ static void add_acct_request(struct req
  	__elv_add_request(q, rq, where);
  }
  
 -static void part_round_stats_single(struct request_queue *q, int cpu,
 -				    struct hd_struct *part, unsigned long now)
 +static void part_round_stats_single(int cpu, struct hd_struct *part,
 +				    unsigned long now)
  {
- 	int inflight;
+ 	int inflight[2];
  
  	if (now == part->stamp)
  		return;
  
++<<<<<<< HEAD
 +	inflight = part_in_flight(part);
 +	if (inflight) {
++=======
+ 	part_in_flight(q, part, inflight);
+ 	if (inflight[0]) {
++>>>>>>> 0609e0efc5e1 (block: make part_in_flight() take an array of two ints)
  		__part_stat_add(cpu, part, time_in_queue,
- 				inflight * (now - part->stamp));
+ 				inflight[0] * (now - part->stamp));
  		__part_stat_add(cpu, part, io_ticks, (now - part->stamp));
  	}
  	part->stamp = now;
diff --cc block/genhd.c
index efc72b7773e8,822f65f95e2a..000000000000
--- a/block/genhd.c
+++ b/block/genhd.c
@@@ -1210,8 -1218,9 +1211,9 @@@ static int diskstats_show(struct seq_fi
  	disk_part_iter_init(&piter, gp, DISK_PITER_INCL_EMPTY_PART0);
  	while ((hd = disk_part_iter_next(&piter))) {
  		cpu = part_stat_lock();
 -		part_round_stats(gp->queue, cpu, hd);
 +		part_round_stats(cpu, hd);
  		part_stat_unlock();
+ 		part_in_flight(gp->queue, hd, inflight);
  		seq_printf(seqf, "%4d %7d %s %lu %lu %lu "
  			   "%u %lu %lu %lu %u %u %u %u\n",
  			   MAJOR(part_devt(hd)), MINOR(part_devt(hd)),
@@@ -1224,7 -1233,7 +1226,11 @@@
  			   part_stat_read(hd, merges[WRITE]),
  			   part_stat_read(hd, sectors[WRITE]),
  			   jiffies_to_msecs(part_stat_read(hd, ticks[WRITE])),
++<<<<<<< HEAD
 +			   part_in_flight(hd),
++=======
+ 			   inflight[0],
++>>>>>>> 0609e0efc5e1 (block: make part_in_flight() take an array of two ints)
  			   jiffies_to_msecs(part_stat_read(hd, io_ticks)),
  			   jiffies_to_msecs(part_stat_read(hd, time_in_queue))
  			);
diff --cc block/partition-generic.c
index 195b56c1be27,fa5049a4d99b..000000000000
--- a/block/partition-generic.c
+++ b/block/partition-generic.c
@@@ -112,11 -112,14 +112,17 @@@ ssize_t part_stat_show(struct device *d
  		       struct device_attribute *attr, char *buf)
  {
  	struct hd_struct *p = dev_to_part(dev);
++<<<<<<< HEAD
++=======
+ 	struct request_queue *q = dev_to_disk(dev)->queue;
+ 	unsigned int inflight[2];
++>>>>>>> 0609e0efc5e1 (block: make part_in_flight() take an array of two ints)
  	int cpu;
  
  	cpu = part_stat_lock();
 -	part_round_stats(q, cpu, p);
 +	part_round_stats(cpu, p);
  	part_stat_unlock();
+ 	part_in_flight(q, p, inflight);
  	return sprintf(buf,
  		"%8lu %8lu %8llu %8u "
  		"%8lu %8lu %8llu %8u "
@@@ -130,7 -133,7 +136,11 @@@
  		part_stat_read(p, merges[WRITE]),
  		(unsigned long long)part_stat_read(p, sectors[WRITE]),
  		jiffies_to_msecs(part_stat_read(p, ticks[WRITE])),
++<<<<<<< HEAD
 +		part_in_flight(p),
++=======
+ 		inflight[0],
++>>>>>>> 0609e0efc5e1 (block: make part_in_flight() take an array of two ints)
  		jiffies_to_msecs(part_stat_read(p, io_ticks)),
  		jiffies_to_msecs(part_stat_read(p, time_in_queue)));
  }
diff --cc include/linux/genhd.h
index 4292be9dbdf8,f2a3a26cdda1..000000000000
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@@ -396,9 -378,18 +396,24 @@@ static inline void part_dec_in_flight(s
  		atomic_dec(&part_to_disk(part)->part0.in_flight[rw]);
  }
  
++<<<<<<< HEAD
 +static inline int part_in_flight(struct hd_struct *part)
 +{
 +	return atomic_read(&part->in_flight[0]) + atomic_read(&part->in_flight[1]);
++=======
+ static inline void part_in_flight(struct request_queue *q,
+ 				  struct hd_struct *part,
+ 				  unsigned int inflight[2])
+ {
+ 	inflight[0] = atomic_read(&part->in_flight[0]) +
+ 			atomic_read(&part->in_flight[1]);
+ 	if (part->partno) {
+ 		part = &part_to_disk(part)->part0;
+ 		inflight[1] = atomic_read(&part->in_flight[0]) +
+ 				atomic_read(&part->in_flight[1]);
+ 	} else
+ 		inflight[1] = 0;
++>>>>>>> 0609e0efc5e1 (block: make part_in_flight() take an array of two ints)
  }
  
  static inline struct partition_meta_info *alloc_part_info(struct gendisk *disk)
* Unmerged path block/blk-core.c
* Unmerged path block/genhd.c
* Unmerged path block/partition-generic.c
* Unmerged path include/linux/genhd.h
