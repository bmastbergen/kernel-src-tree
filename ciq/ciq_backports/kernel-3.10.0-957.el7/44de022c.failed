ext4: fix false negatives *and* false positives in ext4_check_descriptors()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Theodore Ts'o <tytso@mit.edu>
commit 44de022c4382541cebdd6de4465d1f4f465ff1dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/44de022c.failed

Ext4_check_descriptors() was getting called before s_gdb_count was
initialized.  So for file systems w/o the meta_bg feature, allocation
bitmaps could overlap the block group descriptors and ext4 wouldn't
notice.

For file systems with the meta_bg feature enabled, there was a
fencepost error which would cause the ext4_check_descriptors() to
incorrectly believe that the block allocation bitmap overlaps with the
block group descriptor blocks, and it would reject the mount.

Fix both of these problems.

	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
	Cc: stable@vger.kernel.org
(cherry picked from commit 44de022c4382541cebdd6de4465d1f4f465ff1dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/super.c
diff --cc fs/ext4/super.c
index cca806ec1462,eff5c983e067..000000000000
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@@ -4088,27 -4085,18 +4088,32 @@@ static int ext4_fill_super(struct super
  			goto failed_mount2;
  		}
  	}
+ 	sbi->s_gdb_count = db_count;
  	if (!ext4_check_descriptors(sb, logical_sb_block, &first_not_zeroed)) {
  		ext4_msg(sb, KERN_ERR, "group descriptors corrupted!");
 -		ret = -EFSCORRUPTED;
  		goto failed_mount2;
  	}
  
++<<<<<<< HEAD
 +	sbi->s_gdb_count = db_count;
 +	get_random_bytes(&sbi->s_next_generation, sizeof(u32));
 +	spin_lock_init(&sbi->s_next_gen_lock);
 +
 +	init_timer(&sbi->s_err_report);
 +	sbi->s_err_report.function = print_daily_error_info;
 +	sbi->s_err_report.data = (unsigned long) sb;
++=======
+ 	timer_setup(&sbi->s_err_report, print_daily_error_info, 0);
++>>>>>>> 44de022c4382 (ext4: fix false negatives *and* false positives in ext4_check_descriptors())
  
  	/* Register extent status tree shrinker */
 -	if (ext4_es_register_shrinker(sbi))
 +	ext4_es_register_shrinker(sbi);
 +
 +	err = percpu_counter_init(&sbi->s_extent_cache_cnt, 0, GFP_KERNEL);
 +	if (err) {
 +		ext4_msg(sb, KERN_ERR, "insufficient memory");
  		goto failed_mount3;
 +	}
  
  	sbi->s_stripe = ext4_get_stripe_size(sbi);
  	sbi->s_extent_max_zeroout_kb = 32;
* Unmerged path fs/ext4/super.c
