iio: add info_mask_[shared_by_dir/shared_by_all]

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] add info_mask_(shared_by_dir/shared_by_all) (Tony Camuso) [1559170]
Rebuild_FUZZ: 90.11%
commit-author Jonathan Cameron <jic23@kernel.org>
commit c006ec838414d910bdd63ba8d919e602425e194e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c006ec83.failed

These two additional info_mask bitmaps should allow all 'standard'
numeric attributes to be handled using the read_raw and write_raw
callbacks.  Whilst this should reduce code, the more important element
is that this makes these values easily accessible to in kernel users
of IIO devices.

	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
	Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
(cherry picked from commit c006ec838414d910bdd63ba8d919e602425e194e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-core.c
#	include/linux/iio/iio.h
diff --cc drivers/iio/industrialio-core.c
index 97f0297b120f,24db1855dbab..000000000000
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@@ -544,13 -546,20 +544,26 @@@ int __iio_device_attr_init(struct devic
  						 chan->extend_name,
  						 postfix);
  	}
 -	if (full_postfix == NULL)
 -		return -ENOMEM;
 +	if (full_postfix == NULL) {
 +		ret = -ENOMEM;
 +		goto error_ret;
 +	}
  
  	if (chan->differential) { /* Differential can not have modifier */
++<<<<<<< HEAD
 +		if (generic)
++=======
+ 		switch (shared_by) {
+ 		case IIO_SHARED_BY_ALL:
+ 			name_format = kasprintf(GFP_KERNEL, "%s", full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_DIR:
+ 			name_format = kasprintf(GFP_KERNEL, "%s_%s",
+ 						iio_direction[chan->output],
+ 						full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_TYPE:
++>>>>>>> c006ec838414 (iio: add info_mask_[shared_by_dir/shared_by_all])
  			name_format
  				= kasprintf(GFP_KERNEL, "%s_%s-%s_%s",
  					    iio_direction[chan->output],
@@@ -566,26 -582,19 +579,39 @@@
  					    iio_chan_type_name_spec[chan->type],
  					    chan->channel2,
  					    full_postfix);
 -			break;
 +		else {
 +			WARN_ON("Differential channels must be indexed\n");
 +			ret = -EINVAL;
 +			goto error_free_full_postfix;
  		}
  	} else { /* Single ended */
++<<<<<<< HEAD
 +		if (generic)
 +			name_format
 +				= kasprintf(GFP_KERNEL, "%s_%s_%s",
 +					    iio_direction[chan->output],
 +					    iio_chan_type_name_spec[chan->type],
 +					    full_postfix);
 +		else if (chan->indexed)
 +			name_format
 +				= kasprintf(GFP_KERNEL, "%s_%s%d_%s",
 +					    iio_direction[chan->output],
 +					    iio_chan_type_name_spec[chan->type],
 +					    chan->channel,
 +					    full_postfix);
 +		else
++=======
+ 		switch (shared_by) {
+ 		case IIO_SHARED_BY_ALL:
+ 			name_format = kasprintf(GFP_KERNEL, "%s", full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_DIR:
+ 			name_format = kasprintf(GFP_KERNEL, "%s_%s",
+ 						iio_direction[chan->output],
+ 						full_postfix);
+ 			break;
+ 		case IIO_SHARED_BY_TYPE:
++>>>>>>> c006ec838414 (iio: add info_mask_[shared_by_dir/shared_by_all])
  			name_format
  				= kasprintf(GFP_KERNEL, "%s_%s_%s",
  					    iio_direction[chan->output],
@@@ -722,6 -727,45 +748,20 @@@ static int iio_device_add_channel_sysfs
  		attrcount++;
  	}
  
 -	return attrcount;
 -}
 -
 -static int iio_device_add_channel_sysfs(struct iio_dev *indio_dev,
 -					struct iio_chan_spec const *chan)
 -{
 -	int ret, attrcount = 0;
 -	const struct iio_chan_spec_ext_info *ext_info;
 -
 -	if (chan->channel < 0)
 -		return 0;
 -	ret = iio_device_add_info_mask_type(indio_dev, chan,
 -					    IIO_SEPARATE,
 -					    &chan->info_mask_separate);
 -	if (ret < 0)
 -		return ret;
 -	attrcount += ret;
 -
 -	ret = iio_device_add_info_mask_type(indio_dev, chan,
 -					    IIO_SHARED_BY_TYPE,
 -					    &chan->info_mask_shared_by_type);
 -	if (ret < 0)
 -		return ret;
 -	attrcount += ret;
 -
+ 	ret = iio_device_add_info_mask_type(indio_dev, chan,
+ 					    IIO_SHARED_BY_DIR,
+ 					    &chan->info_mask_shared_by_dir);
+ 	if (ret < 0)
+ 		return ret;
+ 	attrcount += ret;
+ 
+ 	ret = iio_device_add_info_mask_type(indio_dev, chan,
+ 					    IIO_SHARED_BY_ALL,
+ 					    &chan->info_mask_shared_by_all);
+ 	if (ret < 0)
+ 		return ret;
+ 	attrcount += ret;
+ 
  	if (chan->ext_info) {
  		unsigned int i = 0;
  		for (ext_info = chan->ext_info; ext_info->name; ext_info++) {
diff --cc include/linux/iio/iio.h
index 00e28b1a4415,ac1cb8f1858c..000000000000
--- a/include/linux/iio/iio.h
+++ b/include/linux/iio/iio.h
@@@ -36,6 -36,14 +36,17 @@@ enum iio_chan_info_enum 
  	IIO_CHAN_INFO_PHASE,
  	IIO_CHAN_INFO_HARDWAREGAIN,
  	IIO_CHAN_INFO_HYSTERESIS,
++<<<<<<< HEAD
++=======
+ 	IIO_CHAN_INFO_INT_TIME,
+ };
+ 
+ enum iio_shared_by {
+ 	IIO_SEPARATE,
+ 	IIO_SHARED_BY_TYPE,
+ 	IIO_SHARED_BY_DIR,
+ 	IIO_SHARED_BY_ALL
++>>>>>>> c006ec838414 (iio: add info_mask_[shared_by_dir/shared_by_all])
  };
  
  enum iio_endian {
* Unmerged path drivers/iio/industrialio-core.c
* Unmerged path include/linux/iio/iio.h
