ipmi: Move BT capabilities detection to the detect call

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Corey Minyard <cminyard@mvista.com>
commit c86ba91be75702c013bbf7379542920b6920e98f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c86ba91b.failed

The capabilities detection was being done as part of the normal
state machine, but it was possible for it to be running while
the upper layers of the IPMI driver were initializing the
device, resulting in error and failure to initialize.

Move the capabilities detection to the the detect function,
so it's done before anything else runs on the device.  This also
simplifies the state machine and removes some code, as a bonus.

	Signed-off-by: Corey Minyard <cminyard@mvista.com>
	Reported-by: Andrew Banman <abanman@hpe.com>
	Tested-by: Andrew Banman <abanman@hpe.com>
	Cc: <stable@vger.kernel.org>
(cherry picked from commit c86ba91be75702c013bbf7379542920b6920e98f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/ipmi/ipmi_bt_sm.c
diff --cc drivers/char/ipmi/ipmi_bt_sm.c
index feafdab734ae,97d6856c9c0f..000000000000
--- a/drivers/char/ipmi/ipmi_bt_sm.c
+++ b/drivers/char/ipmi/ipmi_bt_sm.c
@@@ -522,11 -498,6 +516,14 @@@ static enum si_sm_result bt_event(struc
  		if (status & BT_H_BUSY)		/* clear a leftover H_BUSY */
  			BT_CONTROL(BT_H_BUSY);
  
++<<<<<<< HEAD
 +		/* Read BT capabilities if it hasn't been done yet */
 +		if (!bt->BT_CAP_outreqs)
 +			BT_STATE_CHANGE(BT_STATE_CAPABILITIES_BEGIN,
 +					SI_SM_CALL_WITHOUT_DELAY);
 +		bt->timeout = bt->BT_CAP_req2rsp;
++=======
++>>>>>>> c86ba91be757 (ipmi: Move BT capabilities detection to the detect call)
  		BT_SI_SM_RETURN(SI_SM_IDLE);
  
  	case BT_STATE_XACTION_START:
* Unmerged path drivers/char/ipmi/ipmi_bt_sm.c
