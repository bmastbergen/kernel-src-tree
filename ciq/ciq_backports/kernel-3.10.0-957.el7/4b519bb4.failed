NFC: Convert timers to use timer_setup()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] sfc: Convert timers to use timer_setup() (Jarod Wilson) [1547443]
Rebuild_FUZZ: 97.50%
commit-author Allen Pais <allen.pais@oracle.com>
commit 4b519bb493e0866de7659b88dd22dc2cd89dd628
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4b519bb4.failed

Switch to using the new timer_setup() and from_timer()
for net/nfc/*

	Signed-off-by: Allen Pais <allen.pais@oracle.com>
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>
(cherry picked from commit 4b519bb493e0866de7659b88dd22dc2cd89dd628)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/nfc/core.c
#	net/nfc/hci/core.c
#	net/nfc/hci/llc_shdlc.c
#	net/nfc/llcp_core.c
diff --cc net/nfc/core.c
index 40d2527693da,947a470f929d..000000000000
--- a/net/nfc/core.c
+++ b/net/nfc/core.c
@@@ -817,10 -1094,7 +817,14 @@@ struct nfc_dev *nfc_allocate_device(str
  	dev->targets_generation = 1;
  
  	if (ops->check_presence) {
++<<<<<<< HEAD
 +		init_timer(&dev->check_pres_timer);
 +		dev->check_pres_timer.data = (unsigned long)dev;
 +		dev->check_pres_timer.function = nfc_check_pres_timeout;
 +
++=======
+ 		timer_setup(&dev->check_pres_timer, nfc_check_pres_timeout, 0);
++>>>>>>> 4b519bb493e0 (NFC: Convert timers to use timer_setup())
  		INIT_WORK(&dev->check_pres_work, nfc_check_pres_work);
  	}
  
diff --cc net/nfc/hci/core.c
index 91020b210d87,ac8030c4bcf8..000000000000
--- a/net/nfc/hci/core.c
+++ b/net/nfc/hci/core.c
@@@ -337,16 -424,13 +337,16 @@@ exit
  	kfree_skb(skb);
  
  exit_noskb:
 -	if (r)
 -		nfc_hci_driver_failure(hdev, r);
 +	if (r) {
 +		/* TODO: There was an error dispatching the event,
 +		 * how to propagate up to nfc core?
 +		 */
 +	}
  }
  
- static void nfc_hci_cmd_timeout(unsigned long data)
+ static void nfc_hci_cmd_timeout(struct timer_list *t)
  {
- 	struct nfc_hci_dev *hdev = (struct nfc_hci_dev *)data;
+ 	struct nfc_hci_dev *hdev = from_timer(hdev, t, cmd_timer);
  
  	schedule_work(&hdev->msg_tx_work);
  }
@@@ -862,9 -1004,7 +862,13 @@@ int nfc_hci_register_device(struct nfc_
  
  	INIT_WORK(&hdev->msg_tx_work, nfc_hci_msg_tx_work);
  
++<<<<<<< HEAD
 +	init_timer(&hdev->cmd_timer);
 +	hdev->cmd_timer.data = (unsigned long)hdev;
 +	hdev->cmd_timer.function = nfc_hci_cmd_timeout;
++=======
+ 	timer_setup(&hdev->cmd_timer, nfc_hci_cmd_timeout, 0);
++>>>>>>> 4b519bb493e0 (NFC: Convert timers to use timer_setup())
  
  	skb_queue_head_init(&hdev->rx_hcp_frags);
  
diff --cc net/nfc/hci/llc_shdlc.c
index 27b313befc35,fe988936ad92..000000000000
--- a/net/nfc/hci/llc_shdlc.c
+++ b/net/nfc/hci/llc_shdlc.c
@@@ -765,17 -763,9 +765,23 @@@ static void *llc_shdlc_init(struct nfc_
  	mutex_init(&shdlc->state_mutex);
  	shdlc->state = SHDLC_DISCONNECTED;
  
++<<<<<<< HEAD
 +	init_timer(&shdlc->connect_timer);
 +	shdlc->connect_timer.data = (unsigned long)shdlc;
 +	shdlc->connect_timer.function = llc_shdlc_connect_timeout;
 +
 +	init_timer(&shdlc->t1_timer);
 +	shdlc->t1_timer.data = (unsigned long)shdlc;
 +	shdlc->t1_timer.function = llc_shdlc_t1_timeout;
 +
 +	init_timer(&shdlc->t2_timer);
 +	shdlc->t2_timer.data = (unsigned long)shdlc;
 +	shdlc->t2_timer.function = llc_shdlc_t2_timeout;
++=======
+ 	timer_setup(&shdlc->connect_timer, llc_shdlc_connect_timeout, 0);
+ 	timer_setup(&shdlc->t1_timer, llc_shdlc_t1_timeout, 0);
+ 	timer_setup(&shdlc->t2_timer, llc_shdlc_t2_timeout, 0);
++>>>>>>> 4b519bb493e0 (NFC: Convert timers to use timer_setup())
  
  	shdlc->w = SHDLC_MAX_WINDOW;
  	shdlc->srej_support = SHDLC_SREJ_SUPPORT;
diff --cc net/nfc/llcp_core.c
index 158bdbf668cc,ef4026a23e80..000000000000
--- a/net/nfc/llcp_core.c
+++ b/net/nfc/llcp_core.c
@@@ -1560,9 -1573,7 +1560,13 @@@ int nfc_llcp_register_device(struct nfc
  	INIT_LIST_HEAD(&local->list);
  	kref_init(&local->ref);
  	mutex_init(&local->sdp_lock);
++<<<<<<< HEAD
 +	init_timer(&local->link_timer);
 +	local->link_timer.data = (unsigned long) local;
 +	local->link_timer.function = nfc_llcp_symm_timer;
++=======
+ 	timer_setup(&local->link_timer, nfc_llcp_symm_timer, 0);
++>>>>>>> 4b519bb493e0 (NFC: Convert timers to use timer_setup())
  
  	skb_queue_head_init(&local->tx_queue);
  	INIT_WORK(&local->tx_work, nfc_llcp_tx_work);
@@@ -1587,9 -1599,7 +1591,13 @@@
  
  	mutex_init(&local->sdreq_lock);
  	INIT_HLIST_HEAD(&local->pending_sdreqs);
++<<<<<<< HEAD
 +	init_timer(&local->sdreq_timer);
 +	local->sdreq_timer.data = (unsigned long) local;
 +	local->sdreq_timer.function = nfc_llcp_sdreq_timer;
++=======
+ 	timer_setup(&local->sdreq_timer, nfc_llcp_sdreq_timer, 0);
++>>>>>>> 4b519bb493e0 (NFC: Convert timers to use timer_setup())
  	INIT_WORK(&local->sdreq_timeout_work, nfc_llcp_sdreq_timeout_work);
  
  	list_add(&local->list, &llcp_devices);
* Unmerged path net/nfc/core.c
* Unmerged path net/nfc/hci/core.c
* Unmerged path net/nfc/hci/llc_shdlc.c
* Unmerged path net/nfc/llcp_core.c
