uio, lib: Fix CONFIG_ARCH_HAS_UACCESS_MCSAFE compilation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Dan Williams <dan.j.williams@intel.com>
commit 522239b445a2de988edb81672963708a6aaf9046
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/522239b4.failed

Add a common Kconfig CONFIG_ARCH_HAS_UACCESS_MCSAFE that archs can
optionally select, and fixup the declaration of _copy_to_iter_mcsafe().

Fixes: 8780356ef630 ("x86/asm/memcpy_mcsafe: Define copy_to_iter_mcsafe()")
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 522239b445a2de988edb81672963708a6aaf9046)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/uio.h
#	lib/Kconfig
diff --cc include/linux/uio.h
index c55ce243cc09,409c845d4cd3..000000000000
--- a/include/linux/uio.h
+++ b/include/linux/uio.h
@@@ -34,8 -64,203 +34,209 @@@ static inline size_t iov_length(const s
  	return ret;
  }
  
++<<<<<<< HEAD
 +unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to);
++=======
+ static inline struct iovec iov_iter_iovec(const struct iov_iter *iter)
+ {
+ 	return (struct iovec) {
+ 		.iov_base = iter->iov->iov_base + iter->iov_offset,
+ 		.iov_len = min(iter->count,
+ 			       iter->iov->iov_len - iter->iov_offset),
+ 	};
+ }
+ 
+ #define iov_for_each(iov, iter, start)				\
+ 	if (!((start).type & (ITER_BVEC | ITER_PIPE)))		\
+ 	for (iter = (start);					\
+ 	     (iter).count &&					\
+ 	     ((iov = iov_iter_iovec(&(iter))), 1);		\
+ 	     iov_iter_advance(&(iter), (iov).iov_len))
+ 
+ size_t iov_iter_copy_from_user_atomic(struct page *page,
+ 		struct iov_iter *i, unsigned long offset, size_t bytes);
+ void iov_iter_advance(struct iov_iter *i, size_t bytes);
+ void iov_iter_revert(struct iov_iter *i, size_t bytes);
+ int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes);
+ size_t iov_iter_single_seg_count(const struct iov_iter *i);
+ size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
+ 			 struct iov_iter *i);
+ size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
+ 			 struct iov_iter *i);
+ 
+ size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
+ size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
+ bool _copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i);
+ size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);
+ bool _copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i);
+ 
+ static __always_inline __must_check
+ size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
+ {
+ 	if (unlikely(!check_copy_size(addr, bytes, true)))
+ 		return 0;
+ 	else
+ 		return _copy_to_iter(addr, bytes, i);
+ }
+ 
+ static __always_inline __must_check
+ size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
+ {
+ 	if (unlikely(!check_copy_size(addr, bytes, false)))
+ 		return 0;
+ 	else
+ 		return _copy_from_iter(addr, bytes, i);
+ }
+ 
+ static __always_inline __must_check
+ bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
+ {
+ 	if (unlikely(!check_copy_size(addr, bytes, false)))
+ 		return false;
+ 	else
+ 		return _copy_from_iter_full(addr, bytes, i);
+ }
+ 
+ static __always_inline __must_check
+ size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
+ {
+ 	if (unlikely(!check_copy_size(addr, bytes, false)))
+ 		return 0;
+ 	else
+ 		return _copy_from_iter_nocache(addr, bytes, i);
+ }
+ 
+ static __always_inline __must_check
+ bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
+ {
+ 	if (unlikely(!check_copy_size(addr, bytes, false)))
+ 		return false;
+ 	else
+ 		return _copy_from_iter_full_nocache(addr, bytes, i);
+ }
+ 
+ #ifdef CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE
+ /*
+  * Note, users like pmem that depend on the stricter semantics of
+  * copy_from_iter_flushcache() than copy_from_iter_nocache() must check for
+  * IS_ENABLED(CONFIG_ARCH_HAS_UACCESS_FLUSHCACHE) before assuming that the
+  * destination is flushed from the cache on return.
+  */
+ size_t _copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i);
+ #else
+ #define _copy_from_iter_flushcache _copy_from_iter_nocache
+ #endif
+ 
+ #ifdef CONFIG_ARCH_HAS_UACCESS_MCSAFE
+ size_t _copy_to_iter_mcsafe(const void *addr, size_t bytes, struct iov_iter *i);
+ #else
+ #define _copy_to_iter_mcsafe _copy_to_iter
+ #endif
+ 
+ static __always_inline __must_check
+ size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
+ {
+ 	if (unlikely(!check_copy_size(addr, bytes, false)))
+ 		return 0;
+ 	else
+ 		return _copy_from_iter_flushcache(addr, bytes, i);
+ }
+ 
+ static __always_inline __must_check
+ size_t copy_to_iter_mcsafe(void *addr, size_t bytes, struct iov_iter *i)
+ {
+ 	if (unlikely(!check_copy_size(addr, bytes, false)))
+ 		return 0;
+ 	else
+ 		return _copy_to_iter_mcsafe(addr, bytes, i);
+ }
+ 
+ size_t iov_iter_zero(size_t bytes, struct iov_iter *);
+ unsigned long iov_iter_alignment(const struct iov_iter *i);
+ unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
+ void iov_iter_init(struct iov_iter *i, int direction, const struct iovec *iov,
+ 			unsigned long nr_segs, size_t count);
+ void iov_iter_kvec(struct iov_iter *i, int direction, const struct kvec *kvec,
+ 			unsigned long nr_segs, size_t count);
+ void iov_iter_bvec(struct iov_iter *i, int direction, const struct bio_vec *bvec,
+ 			unsigned long nr_segs, size_t count);
+ void iov_iter_pipe(struct iov_iter *i, int direction, struct pipe_inode_info *pipe,
+ 			size_t count);
+ ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
+ 			size_t maxsize, unsigned maxpages, size_t *start);
+ ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
+ 			size_t maxsize, size_t *start);
+ int iov_iter_npages(const struct iov_iter *i, int maxpages);
+ 
+ const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);
+ 
+ static inline size_t iov_iter_count(const struct iov_iter *i)
+ {
+ 	return i->count;
+ }
+ 
+ static inline bool iter_is_iovec(const struct iov_iter *i)
+ {
+ 	return !(i->type & (ITER_BVEC | ITER_KVEC | ITER_PIPE));
+ }
+ 
+ /*
+  * Get one of READ or WRITE out of iter->type without any other flags OR'd in
+  * with it.
+  *
+  * The ?: is just for type safety.
+  */
+ #define iov_iter_rw(i) ((0 ? (struct iov_iter *)0 : (i))->type & (READ | WRITE))
+ 
+ /*
+  * Cap the iov_iter by given limit; note that the second argument is
+  * *not* the new size - it's upper limit for such.  Passing it a value
+  * greater than the amount of data in iov_iter is fine - it'll just do
+  * nothing in that case.
+  */
+ static inline void iov_iter_truncate(struct iov_iter *i, u64 count)
+ {
+ 	/*
+ 	 * count doesn't have to fit in size_t - comparison extends both
+ 	 * operands to u64 here and any value that would be truncated by
+ 	 * conversion in assignement is by definition greater than all
+ 	 * values of size_t, including old i->count.
+ 	 */
+ 	if (i->count > count)
+ 		i->count = count;
+ }
+ 
+ /*
+  * reexpand a previously truncated iterator; count must be no more than how much
+  * we had shrunk it.
+  */
+ static inline void iov_iter_reexpand(struct iov_iter *i, size_t count)
+ {
+ 	i->count = count;
+ }
+ size_t csum_and_copy_to_iter(const void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
+ size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
+ bool csum_and_copy_from_iter_full(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
+ 
+ int import_iovec(int type, const struct iovec __user * uvector,
+ 		 unsigned nr_segs, unsigned fast_segs,
+ 		 struct iovec **iov, struct iov_iter *i);
+ 
+ #ifdef CONFIG_COMPAT
+ struct compat_iovec;
+ int compat_import_iovec(int type, const struct compat_iovec __user * uvector,
+ 		 unsigned nr_segs, unsigned fast_segs,
+ 		 struct iovec **iov, struct iov_iter *i);
+ #endif
+ 
+ int import_single_range(int type, void __user *buf, size_t len,
+ 		 struct iovec *iov, struct iov_iter *i);
+ 
+ int iov_iter_for_each_range(struct iov_iter *i, size_t bytes,
+ 			    int (*f)(struct kvec *vec, void *context),
+ 			    void *context);
++>>>>>>> 522239b445a2 (uio, lib: Fix CONFIG_ARCH_HAS_UACCESS_MCSAFE compilation)
  
 +int memcpy_fromiovec(unsigned char *kdata, struct iovec *iov, int len);
 +int memcpy_toiovec(struct iovec *iov, unsigned char *kdata, int len);
  #endif
diff --cc lib/Kconfig
index c977c3f468b0,907f6e4f1cf2..000000000000
--- a/lib/Kconfig
+++ b/lib/Kconfig
@@@ -489,7 -586,14 +489,14 @@@ config ARCH_HAS_PMEM_AP
  config ARCH_HAS_UACCESS_FLUSHCACHE
  	bool
  
++<<<<<<< HEAD
 +config ARCH_HAS_MMIO_FLUSH
++=======
+ config ARCH_HAS_UACCESS_MCSAFE
+ 	bool
+ 
+ config STACKDEPOT
 -	bool
 -	select STACKTRACE
 -
 -config SBITMAP
++>>>>>>> 522239b445a2 (uio, lib: Fix CONFIG_ARCH_HAS_UACCESS_MCSAFE compilation)
  	bool
  
  config PARMAN
* Unmerged path include/linux/uio.h
* Unmerged path lib/Kconfig
