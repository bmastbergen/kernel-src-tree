iio: ph: add IIO_PH channel type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] ph: add IIO_PH channel type (Tony Camuso) [1559170]
Rebuild_FUZZ: 91.53%
commit-author Matt Ranostay <mranostay@gmail.com>
commit ecb3a7ccc653fc8007edd0591d32d839386673f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ecb3a7cc.failed

	Signed-off-by: Matt Ranostay <mranostay@gmail.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit ecb3a7ccc653fc8007edd0591d32d839386673f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/sysfs-bus-iio
#	drivers/iio/industrialio-core.c
#	include/uapi/linux/iio/types.h
diff --cc Documentation/ABI/testing/sysfs-bus-iio
index c393cb207af8,80c6fce9935b..000000000000
--- a/Documentation/ABI/testing/sysfs-bus-iio
+++ b/Documentation/ABI/testing/sysfs-bus-iio
@@@ -938,13 -1189,314 +938,323 @@@ Description
  		This attribute is used to read the amount of quadrature error
  		present in the device at a given time.
  
 -What:		/sys/.../iio:deviceX/in_accelX_power_mode
 -KernelVersion:	3.11
 +What:		/sys/bus/iio/devices/iio:device*/buffer/hwfifo_timeout
 +KernelVersion:	4.12
  Contact:	linux-iio@vger.kernel.org
  Description:
++<<<<<<< HEAD
 +		A read/write property to provide capability to delay reporting of
 +		samples till a timeout is reached. This allows host processors to
 +		sleep, while the sensor is storing samples in its internal fifo.
 +		The maximum timeout in seconds can be specified by setting
 +		hwfifo_timeout.The current delay can be read by reading
 +		hwfifo_timeout. A value of 0 means that there is no timeout.
++=======
+ 		Specifies the chip power mode.
+ 		low_noise: reduce noise level from ADC,
+ 		low_power: enable low current consumption.
+ 		For a list of available output power modes read
+ 		in_accel_power_mode_available.
+ 
+ What:		/sys/.../iio:deviceX/in_energy_input
+ What:		/sys/.../iio:deviceX/in_energy_raw
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the energy value reported by the
+ 		device (e.g.: human activity sensors report energy burnt by the
+ 		user). Units after application of scale are Joules.
+ 
+ What:		/sys/.../iio:deviceX/in_distance_input
+ What:		/sys/.../iio:deviceX/in_distance_raw
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the distance covered by the user
+ 		since the last reboot while activated. Units after application
+ 		of scale are meters.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/store_eeprom
+ KernelVersion:	3.4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Writing '1' stores the current device configuration into
+ 		on-chip EEPROM. After power-up or chip reset the device will
+ 		automatically load the saved configuration.
+ 
+ What:		/sys/.../iio:deviceX/in_proximity_raw
+ What:		/sys/.../iio:deviceX/in_proximity_input
+ What:		/sys/.../iio:deviceX/in_proximityY_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Proximity measurement indicating that some
+ 		object is near the sensor, usually be observing
+ 		reflectivity of infrared or ultrasound emitted.
+ 		Often these sensors are unit less and as such conversion
+ 		to SI units is not possible. Higher proximity measurements
+ 		indicate closer objects, and vice versa.
+ 
+ What:		/sys/.../iio:deviceX/in_illuminance_input
+ What:		/sys/.../iio:deviceX/in_illuminance_raw
+ What:		/sys/.../iio:deviceX/in_illuminanceY_input
+ What:		/sys/.../iio:deviceX/in_illuminanceY_raw
+ What:		/sys/.../iio:deviceX/in_illuminanceY_mean_raw
+ What:		/sys/.../iio:deviceX/in_illuminance_ir_raw
+ What:		/sys/.../iio:deviceX/in_illuminance_clear_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Illuminance measurement, units after application of scale
+ 		and offset are lux.
+ 
+ What:		/sys/.../iio:deviceX/in_intensityY_raw
+ What:		/sys/.../iio:deviceX/in_intensityY_ir_raw
+ What:		/sys/.../iio:deviceX/in_intensityY_both_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Unit-less light intensity. Modifiers both and ir indicate
+ 		that measurements contains visible and infrared light
+ 		components or just infrared light, respectively.
+ 
+ What:		/sys/.../iio:deviceX/in_intensity_red_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_green_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_blue_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_clear_integration_time
+ What:		/sys/.../iio:deviceX/in_illuminance_integration_time
+ KernelVersion:	3.12
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to get/set the integration time in
+ 		seconds.
+ 
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_integration_time
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Number of seconds in which to compute speed.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_quaternion_raw
+ KernelVersion:	3.15
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw value of quaternion components using a format
+ 		x y z w. Here x, y, and z component represents the axis about
+ 		which a rotation will occur and w component represents the
+ 		amount of rotation.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_magnetic_tilt_comp_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_true_tilt_comp_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_magnetic_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_true_raw
+ KernelVersion:	3.15
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw value of rotation from true/magnetic north measured with
+ 		or without compensation from tilt sensors.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_currentX_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_currentX_i_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_currentX_q_raw
+ KernelVersion:	3.18
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw current measurement from channel X. Units are in milliamps
+ 		after application of scale and offset. If no offset or scale is
+ 		present, output should be considered as processed with the
+ 		unit in milliamps.
+ 
+ 		Channels with 'i' and 'q' modifiers always exist in pairs and both
+ 		channels refer to the same signal. The 'i' channel contains the in-phase
+ 		component of the signal while the 'q' channel contains the quadrature
+ 		component.
+ 
+ What:		/sys/.../iio:deviceX/in_energy_en
+ What:		/sys/.../iio:deviceX/in_distance_en
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_en
+ What:		/sys/.../iio:deviceX/in_steps_en
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Activates a device feature that runs in firmware/hardware.
+ 		E.g. for steps: the pedometer saves power while not used;
+ 		when activated, it will count the steps taken by the user in
+ 		firmware and export them through in_steps_input.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_input
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the number of steps taken by the user
+ 		since the last reboot while activated.
+ 
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_input
+ What:		/sys/.../iio:deviceX/in_velocity_sqrt(x^2+y^2+z^2)_raw
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the current speed value of the
+ 		user (which is the norm or magnitude of the velocity vector).
+ 		Units after application of scale are m/s.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_debounce_count
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Specifies the number of steps that must occur within
+ 		in_steps_filter_debounce_time for the pedometer to decide the
+ 		consumer is making steps.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_debounce_time
+ KernelVersion:	4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Specifies number of seconds in which we compute the steps
+ 		that occur in order to decide if the consumer is making steps.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/watermark
+ KernelVersion:	4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		A single positive integer specifying the maximum number of scan
+ 		elements to wait for.
+ 		Poll will block until the watermark is reached.
+ 		Blocking read will wait until the minimum between the requested
+ 		read amount or the low water mark is available.
+ 		Non-blocking read will retrieve the available samples from the
+ 		buffer even if there are less samples then watermark level. This
+ 		allows the application to block on poll with a timeout and read
+ 		the available samples after the timeout expires and thus have a
+ 		maximum delay guarantee.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_enabled
+ KernelVersion: 4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		A read-only boolean value that indicates if the hardware fifo is
+ 		currently enabled or disabled. If the device does not have a
+ 		hardware fifo this entry is not present.
+ 		The hardware fifo is enabled when the buffer is enabled if the
+ 		current hardware fifo watermark level is set and other current
+ 		device settings allows it (e.g. if a trigger is set that samples
+ 		data differently that the hardware fifo does then hardware fifo
+ 		will not enabled).
+ 		If the hardware fifo is enabled and the level of the hardware
+ 		fifo reaches the hardware fifo watermark level the device will
+ 		flush its hardware fifo to the device buffer. Doing a non
+ 		blocking read on the device when no samples are present in the
+ 		device buffer will also force a flush.
+ 		When the hardware fifo is enabled there is no need to use a
+ 		trigger to use buffer mode since the watermark settings
+ 		guarantees that the hardware fifo is flushed to the device
+ 		buffer.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark
+ KernelVersion: 4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Read-only entry that contains a single integer specifying the
+ 		current watermark level for the hardware fifo. If the device
+ 		does not have a hardware fifo this entry is not present.
+ 		The watermark level for the hardware fifo is set by the driver
+ 		based on the value set by the user in buffer/watermark but
+ 		taking into account hardware limitations (e.g. most hardware
+ 		buffers are limited to 32-64 samples, some hardware buffers
+ 		watermarks are fixed or have minimum levels).  A value of 0
+ 		means that the hardware watermark is unset.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark_min
+ KernelVersion: 4.2
+ Contact:       linux-iio@vger.kernel.org
+ Description:
+ 		A single positive integer specifying the minimum watermark level
+ 		for the hardware fifo of this device. If the device does not
+ 		have a hardware fifo this entry is not present.
+ 		If the user sets buffer/watermark to a value less than this one,
+ 		then the hardware watermark will remain unset.
+ 
+ What:	       /sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark_max
+ KernelVersion: 4.2
+ Contact:       linux-iio@vger.kernel.org
+ Description:
+ 		A single positive integer specifying the maximum watermark level
+ 		for the hardware fifo of this device. If the device does not
+ 		have a hardware fifo this entry is not present.
+ 		If the user sets buffer/watermark to a value greater than this
+ 		one, then the hardware watermark will be capped at this value.
+ 
+ What:	       /sys/bus/iio/devices/iio:deviceX/buffer/hwfifo_watermark_available
+ KernelVersion: 4.2
+ Contact:       linux-iio@vger.kernel.org
+ Description:
+ 		A list of positive integers specifying the available watermark
+ 		levels for the hardware fifo. This entry is optional and if it
+ 		is not present it means that all the values between
+ 		hwfifo_watermark_min and hwfifo_watermark_max are supported.
+ 		If the user sets buffer/watermark to a value greater than
+ 		hwfifo_watermak_min but not equal to any of the values in this
+ 		list, the driver will chose an appropriate value for the
+ 		hardware fifo watermark level.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_temp_calibemissivity
+ What:		/sys/bus/iio/devices/iio:deviceX/in_tempX_calibemissivity
+ What:		/sys/bus/iio/devices/iio:deviceX/in_temp_object_calibemissivity
+ What:		/sys/bus/iio/devices/iio:deviceX/in_tempX_object_calibemissivity
+ KernelVersion:	4.1
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		The emissivity ratio of the surface in the field of view of the
+ 		contactless temperature sensor.  Emissivity varies from 0 to 1,
+ 		with 1 being the emissivity of a black body.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_magn_x_oversampling_ratio
+ What:		/sys/bus/iio/devices/iio:deviceX/in_magn_y_oversampling_ratio
+ What:		/sys/bus/iio/devices/iio:deviceX/in_magn_z_oversampling_ratio
+ KernelVersion:	4.2
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Hardware applied number of measurements for acquiring one
+ 		data point. The HW will do <type>[_name]_oversampling_ratio
+ 		measurements and return the average value as output data. Each
+ 		value resulted from <type>[_name]_oversampling_ratio measurements
+ 		is considered as one sample for <type>[_name]_sampling_frequency.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentration_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentrationX_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentration_co2_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentrationX_co2_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentration_voc_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_concentrationX_voc_raw
+ KernelVersion:	4.3
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw (unscaled no offset etc.) percentage reading of a substance.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_resistance_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_resistanceX_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/out_resistance_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/out_resistanceX_raw
+ KernelVersion:	4.3
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw (unscaled no offset etc.) resistance reading that can be processed
+ 		into an ohm value.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/heater_enable
+ KernelVersion:	4.1.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		'1' (enable) or '0' (disable) specifying the enable
+ 		of heater function. Same reading values apply
+ 		This ABI is especially applicable for humidity sensors
+ 		to heatup the device and get rid of any condensation
+ 		in some humidity environment
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_ph_raw
+ KernelVersion:	4.5
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw (unscaled no offset etc.) pH reading of a substance as a negative
+ 		base-10 logarithm of hydrodium ions in a litre of water.
++>>>>>>> ecb3a7ccc653 (iio: ph: add IIO_PH channel type)
diff --cc drivers/iio/industrialio-core.c
index 87201424abaf,eb01a83a5b7c..000000000000
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@@ -70,6 -71,13 +70,16 @@@ static const char * const iio_chan_type
  	[IIO_PRESSURE] = "pressure",
  	[IIO_HUMIDITYRELATIVE] = "humidityrelative",
  	[IIO_ACTIVITY] = "activity",
++<<<<<<< HEAD
++=======
+ 	[IIO_STEPS] = "steps",
+ 	[IIO_ENERGY] = "energy",
+ 	[IIO_DISTANCE] = "distance",
+ 	[IIO_VELOCITY] = "velocity",
+ 	[IIO_CONCENTRATION] = "concentration",
+ 	[IIO_RESISTANCE] = "resistance",
+ 	[IIO_PH] = "ph",
++>>>>>>> ecb3a7ccc653 (iio: ph: add IIO_PH channel type)
  };
  
  static const char * const iio_modifier_names[] = {
* Unmerged path include/uapi/linux/iio/types.h
* Unmerged path Documentation/ABI/testing/sysfs-bus-iio
* Unmerged path drivers/iio/industrialio-core.c
* Unmerged path include/uapi/linux/iio/types.h
