ip_gre: clear feature flags when incompatible o_flags are set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit 1cc5954f44150bb70cac07c3cc5df7cf0dfb61ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1cc5954f.failed

Commit dd9d598c6657 ("ip_gre: add the support for i/o_flags update via
netlink") added the ability to change o_flags, but missed that the
GSO/LLTX features are disabled by default, and only enabled some gre
features are unused. Thus we also need to disable the GSO/LLTX features
on the device when the TUNNEL_SEQ or TUNNEL_CSUM flags are set.

These two examples should result in the same features being set:

    ip link add gre_none type gre local 192.168.0.10 remote 192.168.0.20 ttl 255 key 0

    ip link set gre_none type gre seq
    ip link add gre_seq type gre local 192.168.0.10 remote 192.168.0.20 ttl 255 key 1 seq

Fixes: dd9d598c6657 ("ip_gre: add the support for i/o_flags update via netlink")
	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Reviewed-by: Xin Long <lucien.xin@gmail.com>
	Acked-by: William Tu <u9012063@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1cc5954f44150bb70cac07c3cc5df7cf0dfb61ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/ip_gre.c
diff --cc net/ipv4/ip_gre.c
index 35872faba784,9c169bb2444d..000000000000
--- a/net/ipv4/ip_gre.c
+++ b/net/ipv4/ip_gre.c
@@@ -520,6 -762,36 +520,39 @@@ free_skb
  	return NETDEV_TX_OK;
  }
  
++<<<<<<< HEAD
++=======
+ static void ipgre_link_update(struct net_device *dev, bool set_mtu)
+ {
+ 	struct ip_tunnel *tunnel = netdev_priv(dev);
+ 	int len;
+ 
+ 	len = tunnel->tun_hlen;
+ 	tunnel->tun_hlen = gre_calc_hlen(tunnel->parms.o_flags);
+ 	len = tunnel->tun_hlen - len;
+ 	tunnel->hlen = tunnel->hlen + len;
+ 
+ 	dev->needed_headroom = dev->needed_headroom + len;
+ 	if (set_mtu)
+ 		dev->mtu = max_t(int, dev->mtu - len, 68);
+ 
+ 	if (!(tunnel->parms.o_flags & TUNNEL_SEQ)) {
+ 		if (!(tunnel->parms.o_flags & TUNNEL_CSUM) ||
+ 		    tunnel->encap.type == TUNNEL_ENCAP_NONE) {
+ 			dev->features |= NETIF_F_GSO_SOFTWARE;
+ 			dev->hw_features |= NETIF_F_GSO_SOFTWARE;
+ 		} else {
+ 			dev->features &= ~NETIF_F_GSO_SOFTWARE;
+ 			dev->hw_features &= ~NETIF_F_GSO_SOFTWARE;
+ 		}
+ 		dev->features |= NETIF_F_LLTX;
+ 	} else {
+ 		dev->hw_features &= ~NETIF_F_GSO_SOFTWARE;
+ 		dev->features &= ~(NETIF_F_LLTX | NETIF_F_GSO_SOFTWARE);
+ 	}
+ }
+ 
++>>>>>>> 1cc5954f4415 (ip_gre: clear feature flags when incompatible o_flags are set)
  static int ipgre_tunnel_ioctl(struct net_device *dev,
  			      struct ifreq *ifr, int cmd)
  {
* Unmerged path net/ipv4/ip_gre.c
