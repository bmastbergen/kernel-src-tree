devlink: Perform cleanup of resource_set cb

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arkadi Sharshevsky <arkadis@mellanox.com>
commit 4f4bbf7c4e3d4bd14987a13041c6b5b1ea59e21f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4f4bbf7c.failed

After adding size validation logic into core cleanup is required.

	Signed-off-by: Arkadi Sharshevsky <arkadis@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4f4bbf7c4e3d4bd14987a13041c6b5b1ea59e21f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index 6957213219f7,39196625ae8e..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -3844,6 -3798,176 +3844,179 @@@ static const struct mlxsw_config_profil
  	.resource_query_enable		= 1,
  };
  
++<<<<<<< HEAD
++=======
+ static u64 mlxsw_sp_resource_kvd_linear_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 
+ 	return mlxsw_sp_kvdl_occ_get(mlxsw_sp);
+ }
+ 
+ static struct devlink_resource_ops mlxsw_sp_resource_kvd_linear_ops = {
+ 	.occ_get = mlxsw_sp_resource_kvd_linear_occ_get,
+ };
+ 
+ static struct devlink_resource_size_params mlxsw_sp_kvd_size_params;
+ static struct devlink_resource_size_params mlxsw_sp_linear_size_params;
+ static struct devlink_resource_size_params mlxsw_sp_hash_single_size_params;
+ static struct devlink_resource_size_params mlxsw_sp_hash_double_size_params;
+ 
+ static void
+ mlxsw_sp_resource_size_params_prepare(struct mlxsw_core *mlxsw_core)
+ {
+ 	u32 single_size_min = MLXSW_CORE_RES_GET(mlxsw_core,
+ 						 KVD_SINGLE_MIN_SIZE);
+ 	u32 double_size_min = MLXSW_CORE_RES_GET(mlxsw_core,
+ 						 KVD_DOUBLE_MIN_SIZE);
+ 	u32 kvd_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE);
+ 	u32 linear_size_min = 0;
+ 
+ 	/* KVD top resource */
+ 	mlxsw_sp_kvd_size_params.size_min = kvd_size;
+ 	mlxsw_sp_kvd_size_params.size_max = kvd_size;
+ 	mlxsw_sp_kvd_size_params.size_granularity = MLXSW_SP_KVD_GRANULARITY;
+ 	mlxsw_sp_kvd_size_params.unit = DEVLINK_RESOURCE_UNIT_ENTRY;
+ 
+ 	/* Linear part init */
+ 	mlxsw_sp_linear_size_params.size_min = linear_size_min;
+ 	mlxsw_sp_linear_size_params.size_max = kvd_size - single_size_min -
+ 					       double_size_min;
+ 	mlxsw_sp_linear_size_params.size_granularity = MLXSW_SP_KVD_GRANULARITY;
+ 	mlxsw_sp_linear_size_params.unit = DEVLINK_RESOURCE_UNIT_ENTRY;
+ 
+ 	/* Hash double part init */
+ 	mlxsw_sp_hash_double_size_params.size_min = double_size_min;
+ 	mlxsw_sp_hash_double_size_params.size_max = kvd_size - single_size_min -
+ 						    linear_size_min;
+ 	mlxsw_sp_hash_double_size_params.size_granularity = MLXSW_SP_KVD_GRANULARITY;
+ 	mlxsw_sp_hash_double_size_params.unit = DEVLINK_RESOURCE_UNIT_ENTRY;
+ 
+ 	/* Hash single part init */
+ 	mlxsw_sp_hash_single_size_params.size_min = single_size_min;
+ 	mlxsw_sp_hash_single_size_params.size_max = kvd_size - double_size_min -
+ 						    linear_size_min;
+ 	mlxsw_sp_hash_single_size_params.size_granularity = MLXSW_SP_KVD_GRANULARITY;
+ 	mlxsw_sp_hash_single_size_params.unit = DEVLINK_RESOURCE_UNIT_ENTRY;
+ }
+ 
+ static int mlxsw_sp_resources_register(struct mlxsw_core *mlxsw_core)
+ {
+ 	struct devlink *devlink = priv_to_devlink(mlxsw_core);
+ 	u32 kvd_size, single_size, double_size, linear_size;
+ 	const struct mlxsw_config_profile *profile;
+ 	int err;
+ 
+ 	profile = &mlxsw_sp_config_profile;
+ 	if (!MLXSW_CORE_RES_VALID(mlxsw_core, KVD_SIZE))
+ 		return -EIO;
+ 
+ 	mlxsw_sp_resource_size_params_prepare(mlxsw_core);
+ 	kvd_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD,
+ 					true, kvd_size,
+ 					MLXSW_SP_RESOURCE_KVD,
+ 					DEVLINK_RESOURCE_ID_PARENT_TOP,
+ 					&mlxsw_sp_kvd_size_params,
+ 					NULL);
+ 	if (err)
+ 		return err;
+ 
+ 	linear_size = profile->kvd_linear_size;
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR,
+ 					false, linear_size,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					MLXSW_SP_RESOURCE_KVD,
+ 					&mlxsw_sp_linear_size_params,
+ 					&mlxsw_sp_resource_kvd_linear_ops);
+ 	if (err)
+ 		return err;
+ 
+ 	double_size = kvd_size - linear_size;
+ 	double_size *= profile->kvd_hash_double_parts;
+ 	double_size /= profile->kvd_hash_double_parts +
+ 		       profile->kvd_hash_single_parts;
+ 	double_size = rounddown(double_size, profile->kvd_hash_granularity);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_HASH_DOUBLE,
+ 					false, double_size,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_DOUBLE,
+ 					MLXSW_SP_RESOURCE_KVD,
+ 					&mlxsw_sp_hash_double_size_params,
+ 					NULL);
+ 	if (err)
+ 		return err;
+ 
+ 	single_size = kvd_size - double_size - linear_size;
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_HASH_SINGLE,
+ 					false, single_size,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_SINGLE,
+ 					MLXSW_SP_RESOURCE_KVD,
+ 					&mlxsw_sp_hash_single_size_params,
+ 					NULL);
+ 	if (err)
+ 		return err;
+ 
+ 	return 0;
+ }
+ 
+ static int mlxsw_sp_kvd_sizes_get(struct mlxsw_core *mlxsw_core,
+ 				  const struct mlxsw_config_profile *profile,
+ 				  u64 *p_single_size, u64 *p_double_size,
+ 				  u64 *p_linear_size)
+ {
+ 	struct devlink *devlink = priv_to_devlink(mlxsw_core);
+ 	u32 double_size;
+ 	int err;
+ 
+ 	if (!MLXSW_CORE_RES_VALID(mlxsw_core, KVD_SINGLE_MIN_SIZE) ||
+ 	    !MLXSW_CORE_RES_VALID(mlxsw_core, KVD_DOUBLE_MIN_SIZE) ||
+ 	    !profile->used_kvd_split_data)
+ 		return -EIO;
+ 
+ 	/* The hash part is what left of the kvd without the
+ 	 * linear part. It is split to the single size and
+ 	 * double size by the parts ratio from the profile.
+ 	 * Both sizes must be a multiplications of the
+ 	 * granularity from the profile. In case the user
+ 	 * provided the sizes they are obtained via devlink.
+ 	 */
+ 	err = devlink_resource_size_get(devlink,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					p_linear_size);
+ 	if (err)
+ 		*p_linear_size = profile->kvd_linear_size;
+ 
+ 	err = devlink_resource_size_get(devlink,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_DOUBLE,
+ 					p_double_size);
+ 	if (err) {
+ 		double_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) -
+ 			      *p_linear_size;
+ 		double_size *= profile->kvd_hash_double_parts;
+ 		double_size /= profile->kvd_hash_double_parts +
+ 			       profile->kvd_hash_single_parts;
+ 		*p_double_size = rounddown(double_size,
+ 					   profile->kvd_hash_granularity);
+ 	}
+ 
+ 	err = devlink_resource_size_get(devlink,
+ 					MLXSW_SP_RESOURCE_KVD_HASH_SINGLE,
+ 					p_single_size);
+ 	if (err)
+ 		*p_single_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) -
+ 				 *p_double_size - *p_linear_size;
+ 
+ 	/* Check results are legal. */
+ 	if (*p_single_size < MLXSW_CORE_RES_GET(mlxsw_core, KVD_SINGLE_MIN_SIZE) ||
+ 	    *p_double_size < MLXSW_CORE_RES_GET(mlxsw_core, KVD_DOUBLE_MIN_SIZE) ||
+ 	    MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) < *p_linear_size)
+ 		return -EIO;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 4f4bbf7c4e3d (devlink: Perform cleanup of resource_set cb)
  static struct mlxsw_driver mlxsw_sp_driver = {
  	.kind				= mlxsw_sp_driver_name,
  	.priv_size			= sizeof(struct mlxsw_sp),
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
diff --git a/include/net/devlink.h b/include/net/devlink.h
index 6545b03e97f7..8d1c3f276dea 100644
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@ -234,13 +234,9 @@ struct devlink_dpipe_headers {
 /**
  * struct devlink_resource_ops - resource ops
  * @occ_get: get the occupied size
- * @size_validate: validate the size of the resource before update, reload
- *                 is needed for changes to take place
  */
 struct devlink_resource_ops {
 	u64 (*occ_get)(struct devlink *devlink);
-	int (*size_validate)(struct devlink *devlink, u64 size,
-			     struct netlink_ext_ack *extack);
 };
 
 /**
