asix: Add rx->ax_skb = NULL after usbnet_skb_return()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Dean Jenkins <Dean_Jenkins@mentor.com>
commit 22889dbbd98a0e3390e9120074c39c6e5a3fea5e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/22889dbb.failed

In asix_rx_fixup_internal() there is a risk that rx->ax_skb gets
reused after passing the Ethernet frame into the network stack via
usbnet_skb_return().

The risks include:

a) asynchronously freeing rx->ax_skb after passing the netdev buffer
   to the NAPI layer which might corrupt the backlog queue.

b) erroneously reusing rx->ax_skb such as calling skb_put_data() multiple
   times which causes writing off the end of the netdev buffer.

Therefore add a defensive rx->ax_skb = NULL after usbnet_skb_return()
so that it is not possible to free rx->ax_skb or to apply
skb_put_data() too many times.

	Signed-off-by: Dean Jenkins <Dean_Jenkins@mentor.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 22889dbbd98a0e3390e9120074c39c6e5a3fea5e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/usb/asix_common.c
diff --cc drivers/net/usb/asix_common.c
index 10f6a41ed699,6983b6bd8cf9..000000000000
--- a/drivers/net/usb/asix_common.c
+++ b/drivers/net/usb/asix_common.c
@@@ -165,10 -166,12 +165,18 @@@ int asix_rx_fixup_internal(struct usbne
  		}
  
  		if (rx->ax_skb) {
++<<<<<<< HEAD
 +			data = skb_put(rx->ax_skb, copy_length);
 +			memcpy(data, skb->data + offset, copy_length);
 +			if (!rx->remaining)
++=======
+ 			skb_put_data(rx->ax_skb, skb->data + offset,
+ 				     copy_length);
+ 			if (!rx->remaining) {
++>>>>>>> 22889dbbd98a (asix: Add rx->ax_skb = NULL after usbnet_skb_return())
  				usbnet_skb_return(dev, rx->ax_skb);
+ 				rx->ax_skb = NULL;
+ 			}
  		}
  
  		offset += (copy_length + 1) & 0xfffe;
* Unmerged path drivers/net/usb/asix_common.c
