net/mlx5e: Add per-channel counters infrastructure, use it upon TX timeout

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add per-channel counters infrastructure, use it upon TX timeout (Alaa Hleihel) [1520297]
Rebuild_FUZZ: 97.22%
commit-author Eran Ben Elisha <eranbe@mellanox.com>
commit 57d689a8ca7b360f902328da95e8b441c24823ca
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/57d689a8.failed

Add per-channel counter ch#_eq_rearm to monitor how many lost interrupt
recovery actions happened upon TX timeouts.

	Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 57d689a8ca7b360f902328da95e8b441c24823ca)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 6008820e81eb,4316765d9d66..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -394,61 -194,10 +396,68 @@@ struct mlx5e_sq_stats 
  	u64 dropped;
  };
  
++<<<<<<< HEAD
 +static const struct counter_desc sq_stats_desc[] = {
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, packets) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, bytes) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, tso_packets) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, tso_bytes) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, tso_inner_packets) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, tso_inner_bytes) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, csum_partial) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, csum_partial_inner) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, nop) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, csum_none) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, stopped) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, wake) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, dropped) },
 +	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, xmit_more) },
 +};
 +
 +#define NUM_SW_COUNTERS			ARRAY_SIZE(sw_stats_desc)
 +#define NUM_Q_COUNTERS			ARRAY_SIZE(q_stats_desc)
 +#define NUM_VPORT_COUNTERS		ARRAY_SIZE(vport_stats_desc)
 +#define NUM_PPORT_802_3_COUNTERS	ARRAY_SIZE(pport_802_3_stats_desc)
 +#define NUM_PPORT_2863_COUNTERS		ARRAY_SIZE(pport_2863_stats_desc)
 +#define NUM_PPORT_2819_COUNTERS		ARRAY_SIZE(pport_2819_stats_desc)
 +#define NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) \
 +	(ARRAY_SIZE(pport_phy_statistical_stats_desc) * \
 +	 MLX5_CAP_PCAM_FEATURE((priv)->mdev, ppcnt_statistical_group))
 +#define NUM_PCIE_PERF_COUNTERS(priv) \
 +	(ARRAY_SIZE(pcie_perf_stats_desc) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, pcie_performance_group))
 +#define NUM_PCIE_PERF_COUNTERS64(priv) \
 +	(ARRAY_SIZE(pcie_perf_stats_desc64) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, tx_overflow_buffer_pkt))
 +#define NUM_PCIE_PERF_STALL_COUNTERS(priv) \
 +	(ARRAY_SIZE(pcie_perf_stall_stats_desc) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, pcie_outbound_stalled))
 +#define NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS \
 +	ARRAY_SIZE(pport_per_prio_traffic_stats_desc)
 +#define NUM_PPORT_PER_PRIO_PFC_COUNTERS \
 +	ARRAY_SIZE(pport_per_prio_pfc_stats_desc)
 +#define NUM_PPORT_ETH_EXT_COUNTERS(priv) \
 +	(ARRAY_SIZE(pport_eth_ext_stats_desc) * \
 +	 MLX5_CAP_PCAM_FEATURE((priv)->mdev, rx_buffer_fullness_counters))
 +#define NUM_PPORT_COUNTERS(priv)	(NUM_PPORT_802_3_COUNTERS + \
 +					 NUM_PPORT_2863_COUNTERS  + \
 +					 NUM_PPORT_2819_COUNTERS  + \
 +					 NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) + \
 +					 NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS * \
 +					 NUM_PPORT_PRIO + \
 +					 NUM_PPORT_ETH_EXT_COUNTERS(priv))
 +#define NUM_PCIE_COUNTERS(priv)		(NUM_PCIE_PERF_COUNTERS(priv) + \
 +					 NUM_PCIE_PERF_COUNTERS64(priv) +\
 +					 NUM_PCIE_PERF_STALL_COUNTERS(priv))
 +#define NUM_RQ_STATS			ARRAY_SIZE(rq_stats_desc)
 +#define NUM_SQ_STATS			ARRAY_SIZE(sq_stats_desc)
 +
++=======
+ struct mlx5e_ch_stats {
+ 	u64 eq_rearm;
+ };
+ 
++>>>>>>> 57d689a8ca7b (net/mlx5e: Add per-channel counters infrastructure, use it upon TX timeout)
  struct mlx5e_stats {
  	struct mlx5e_sw_stats sw;
  	struct mlx5e_qcounter_stats qcnt;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 3bc28bc1fd68..1f7e6af902fb 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -513,6 +513,7 @@ struct mlx5e_channel {
 
 	/* data path - accessed per napi poll */
 	struct irq_desc *irq_desc;
+	struct mlx5e_ch_stats      stats;
 
 	/* control */
 	struct mlx5e_priv         *priv;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 22c2b5464142..532f2d2fbefb 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -175,6 +175,7 @@ static void mlx5e_update_sw_counters(struct mlx5e_priv *priv)
 	struct mlx5e_sw_stats temp, *s = &temp;
 	struct mlx5e_rq_stats *rq_stats;
 	struct mlx5e_sq_stats *sq_stats;
+	struct mlx5e_ch_stats *ch_stats;
 	int i, j;
 
 	memset(s, 0, sizeof(*s));
@@ -182,6 +183,7 @@ static void mlx5e_update_sw_counters(struct mlx5e_priv *priv)
 		struct mlx5e_channel *c = priv->channels.c[i];
 
 		rq_stats = &c->rq.stats;
+		ch_stats = &c->stats;
 
 		s->rx_packets	+= rq_stats->packets;
 		s->rx_bytes	+= rq_stats->bytes;
@@ -202,6 +204,7 @@ static void mlx5e_update_sw_counters(struct mlx5e_priv *priv)
 		s->rx_cache_empty += rq_stats->cache_empty;
 		s->rx_cache_busy  += rq_stats->cache_busy;
 		s->rx_cache_waive += rq_stats->cache_waive;
+		s->ch_eq_rearm += ch_stats->eq_rearm;
 
 		for (j = 0; j < priv->channels.params.num_tc; j++) {
 			sq_stats = &c->sq[j].stats;
@@ -3535,6 +3538,7 @@ static bool mlx5e_tx_timeout_eq_recover(struct net_device *dev,
 		return false;
 
 	netdev_err(dev, "Recover %d eqes on EQ 0x%x\n", eqe_count, eq->eqn);
+	sq->channel->stats.eq_rearm++;
 	return true;
 }
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
