net/mlx5e: Switch per prio pfc counters to use stats group API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Switch per prio pfc counters to use stats group API (Alaa Hleihel) [1520297]
Rebuild_FUZZ: 96.67%
commit-author Kamal Heib <kamalh@mellanox.com>
commit 4377bea27696f45834d77b8e3c7206874d5a66e6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4377bea2.failed

Switch the per prio pfc counters to use the new stats group API.

	Signed-off-by: Kamal Heib <kamalh@mellanox.com>
	Reviewed-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 4377bea27696f45834d77b8e3c7206874d5a66e6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 52759b7e5eaa,6680b24bf1c7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -136,55 -136,21 +136,54 @@@ void mlx5e_build_ptys2ethtool_map(void
  				       ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT);
  }
  
++<<<<<<< HEAD
 +static unsigned long mlx5e_query_pfc_combined(struct mlx5e_priv *priv)
 +{
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +	u8 pfc_en_tx;
 +	u8 pfc_en_rx;
 +	int err;
 +
 +	if (MLX5_CAP_GEN(mdev, port_type) != MLX5_CAP_PORT_TYPE_ETH)
 +		return 0;
 +
 +	err = mlx5_query_port_pfc(mdev, &pfc_en_tx, &pfc_en_rx);
 +
 +	return err ? 0 : pfc_en_tx | pfc_en_rx;
 +}
 +
 +static bool mlx5e_query_global_pause_combined(struct mlx5e_priv *priv)
 +{
 +	struct mlx5_core_dev *mdev = priv->mdev;
 +	u32 rx_pause;
 +	u32 tx_pause;
 +	int err;
 +
 +	if (MLX5_CAP_GEN(mdev, port_type) != MLX5_CAP_PORT_TYPE_ETH)
 +		return false;
 +
 +	err = mlx5_query_port_pause(mdev, &rx_pause, &tx_pause);
 +
 +	return err ? false : rx_pause | tx_pause;
 +}
 +
 +#define MLX5E_NUM_Q_CNTRS(priv) (NUM_Q_COUNTERS * (!!priv->q_counter))
++=======
++>>>>>>> 4377bea27696 (net/mlx5e: Switch per prio pfc counters to use stats group API)
  #define MLX5E_NUM_RQ_STATS(priv) (NUM_RQ_STATS * (priv)->channels.num)
  #define MLX5E_NUM_SQ_STATS(priv) \
  	(NUM_SQ_STATS * (priv)->channels.num * (priv)->channels.params.num_tc)
  
  int mlx5e_ethtool_get_sset_count(struct mlx5e_priv *priv, int sset)
  {
 -	int i, num_stats = 0;
 -
  	switch (sset) {
  	case ETH_SS_STATS:
 -		for (i = 0; i < mlx5e_num_stats_grps; i++)
 -			num_stats += mlx5e_stats_grps[i].get_num_stats(priv);
 -		return num_stats +
 +		return NUM_SW_COUNTERS +
 +		       MLX5E_NUM_Q_CNTRS(priv) +
 +		       NUM_VPORT_COUNTERS + NUM_PPORT_COUNTERS(priv) +
 +		       NUM_PCIE_COUNTERS(priv) +
  		       MLX5E_NUM_RQ_STATS(priv) +
  		       MLX5E_NUM_SQ_STATS(priv) +
- 		       MLX5E_NUM_PFC_COUNTERS(priv) +
  		       ARRAY_SIZE(mlx5e_pme_status_desc) +
  		       ARRAY_SIZE(mlx5e_pme_error_desc) +
  		       mlx5e_ipsec_get_count(priv);
@@@ -208,79 -174,11 +207,60 @@@ static int mlx5e_get_sset_count(struct 
  
  static void mlx5e_fill_stats_strings(struct mlx5e_priv *priv, u8 *data)
  {
- 	int i, j, tc, prio, idx = 0;
- 	unsigned long pfc_combined;
+ 	int i, j, tc, idx = 0;
  
 -	for (i = 0; i < mlx5e_num_stats_grps; i++)
 -		idx = mlx5e_stats_grps[i].fill_strings(priv, data, idx);
 +	/* SW counters */
 +	for (i = 0; i < NUM_SW_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN, sw_stats_desc[i].format);
 +
 +	/* Q counters */
 +	for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN, q_stats_desc[i].format);
 +
 +	/* VPORT counters */
 +	for (i = 0; i < NUM_VPORT_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       vport_stats_desc[i].format);
 +
 +	/* PPORT counters */
 +	for (i = 0; i < NUM_PPORT_802_3_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_802_3_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_2863_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_2863_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_2819_COUNTERS; i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_2819_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_phy_statistical_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PPORT_ETH_EXT_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pport_eth_ext_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pcie_perf_stats_desc[i].format);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS64(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pcie_perf_stats_desc64[i].format);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_STALL_COUNTERS(priv); i++)
 +		strcpy(data + (idx++) * ETH_GSTRING_LEN,
 +		       pcie_perf_stall_stats_desc[i].format);
 +
 +	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
 +			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 +				pport_per_prio_traffic_stats_desc[i].format, prio);
 +	}
  
- 	pfc_combined = mlx5e_query_pfc_combined(priv);
- 	for_each_set_bit(prio, &pfc_combined, NUM_PPORT_PRIO) {
- 		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
- 			char pfc_string[ETH_GSTRING_LEN];
- 
- 			snprintf(pfc_string, sizeof(pfc_string), "prio%d", prio);
- 			sprintf(data + (idx++) * ETH_GSTRING_LEN,
- 				pport_per_prio_pfc_stats_desc[i].format, pfc_string);
- 		}
- 	}
- 
- 	if (mlx5e_query_global_pause_combined(priv)) {
- 		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
- 			sprintf(data + (idx++) * ETH_GSTRING_LEN,
- 				pport_per_prio_pfc_stats_desc[i].format, "global");
- 		}
- 	}
- 
  	/* port module event counters */
  	for (i = 0; i < ARRAY_SIZE(mlx5e_pme_status_desc); i++)
  		strcpy(data + (idx++) * ETH_GSTRING_LEN, mlx5e_pme_status_desc[i].format);
@@@ -354,71 -251,9 +333,56 @@@ void mlx5e_ethtool_get_ethtool_stats(st
  	channels = &priv->channels;
  	mutex_unlock(&priv->state_lock);
  
 -	for (i = 0; i < mlx5e_num_stats_grps; i++)
 -		idx = mlx5e_stats_grps[i].fill_stats(priv, data, idx);
 +	for (i = 0; i < NUM_SW_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_CPU(&priv->stats.sw,
 +						   sw_stats_desc, i);
 +
 +	for (i = 0; i < MLX5E_NUM_Q_CNTRS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR32_CPU(&priv->stats.qcnt,
 +						   q_stats_desc, i);
 +
 +	for (i = 0; i < NUM_VPORT_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(priv->stats.vport.query_vport_out,
 +						  vport_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_802_3_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.IEEE_802_3_counters,
 +						  pport_802_3_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_2863_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.RFC_2863_counters,
 +						  pport_2863_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_2819_COUNTERS; i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.RFC_2819_counters,
 +						  pport_2819_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.phy_statistical_counters,
 +						  pport_phy_statistical_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PPORT_ETH_EXT_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.eth_ext_counters,
 +						  pport_eth_ext_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_perf_counters,
 +						  pcie_perf_stats_desc, i);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_COUNTERS64(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pcie.pcie_perf_counters,
 +						  pcie_perf_stats_desc64, i);
 +
 +	for (i = 0; i < NUM_PCIE_PERF_STALL_COUNTERS(priv); i++)
 +		data[idx++] = MLX5E_READ_CTR32_BE(&priv->stats.pcie.pcie_perf_counters,
 +						  pcie_perf_stall_stats_desc, i);
 +
 +	for (prio = 0; prio < NUM_PPORT_PRIO; prio++) {
 +		for (i = 0; i < NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS; i++)
 +			data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.per_prio_counters[prio],
 +						 pport_per_prio_traffic_stats_desc, i);
 +	}
  
- 	pfc_combined = mlx5e_query_pfc_combined(priv);
- 	for_each_set_bit(prio, &pfc_combined, NUM_PPORT_PRIO) {
- 		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
- 			data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.per_prio_counters[prio],
- 							  pport_per_prio_pfc_stats_desc, i);
- 		}
- 	}
- 
- 	if (mlx5e_query_global_pause_combined(priv)) {
- 		for (i = 0; i < NUM_PPORT_PER_PRIO_PFC_COUNTERS; i++) {
- 			data[idx++] = MLX5E_READ_CTR64_BE(&priv->stats.pport.per_prio_counters[0],
- 							  pport_per_prio_pfc_stats_desc, i);
- 		}
- 	}
- 
  	/* port module event counters */
  	mlx5_priv =  &priv->mdev->priv;
  	for (i = 0; i < ARRAY_SIZE(mlx5e_pme_status_desc); i++)
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
index 6008820e81eb,8e92cd80c638..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
@@@ -231,76 -132,6 +228,79 @@@ struct mlx5e_pport_stats 
  	__be64 eth_ext_counters[MLX5_ST_SZ_QW(ppcnt_reg)];
  };
  
++<<<<<<< HEAD
 +static const struct counter_desc pport_802_3_stats_desc[] = {
 +	{ "tx_packets_phy", PPORT_802_3_OFF(a_frames_transmitted_ok) },
 +	{ "rx_packets_phy", PPORT_802_3_OFF(a_frames_received_ok) },
 +	{ "rx_crc_errors_phy", PPORT_802_3_OFF(a_frame_check_sequence_errors) },
 +	{ "tx_bytes_phy", PPORT_802_3_OFF(a_octets_transmitted_ok) },
 +	{ "rx_bytes_phy", PPORT_802_3_OFF(a_octets_received_ok) },
 +	{ "tx_multicast_phy", PPORT_802_3_OFF(a_multicast_frames_xmitted_ok) },
 +	{ "tx_broadcast_phy", PPORT_802_3_OFF(a_broadcast_frames_xmitted_ok) },
 +	{ "rx_multicast_phy", PPORT_802_3_OFF(a_multicast_frames_received_ok) },
 +	{ "rx_broadcast_phy", PPORT_802_3_OFF(a_broadcast_frames_received_ok) },
 +	{ "rx_in_range_len_errors_phy", PPORT_802_3_OFF(a_in_range_length_errors) },
 +	{ "rx_out_of_range_len_phy", PPORT_802_3_OFF(a_out_of_range_length_field) },
 +	{ "rx_oversize_pkts_phy", PPORT_802_3_OFF(a_frame_too_long_errors) },
 +	{ "rx_symbol_err_phy", PPORT_802_3_OFF(a_symbol_error_during_carrier) },
 +	{ "tx_mac_control_phy", PPORT_802_3_OFF(a_mac_control_frames_transmitted) },
 +	{ "rx_mac_control_phy", PPORT_802_3_OFF(a_mac_control_frames_received) },
 +	{ "rx_unsupported_op_phy", PPORT_802_3_OFF(a_unsupported_opcodes_received) },
 +	{ "rx_pause_ctrl_phy", PPORT_802_3_OFF(a_pause_mac_ctrl_frames_received) },
 +	{ "tx_pause_ctrl_phy", PPORT_802_3_OFF(a_pause_mac_ctrl_frames_transmitted) },
 +};
 +
 +static const struct counter_desc pport_2863_stats_desc[] = {
 +	{ "rx_discards_phy", PPORT_2863_OFF(if_in_discards) },
 +	{ "tx_discards_phy", PPORT_2863_OFF(if_out_discards) },
 +	{ "tx_errors_phy", PPORT_2863_OFF(if_out_errors) },
 +};
 +
 +static const struct counter_desc pport_2819_stats_desc[] = {
 +	{ "rx_undersize_pkts_phy", PPORT_2819_OFF(ether_stats_undersize_pkts) },
 +	{ "rx_fragments_phy", PPORT_2819_OFF(ether_stats_fragments) },
 +	{ "rx_jabbers_phy", PPORT_2819_OFF(ether_stats_jabbers) },
 +	{ "rx_64_bytes_phy", PPORT_2819_OFF(ether_stats_pkts64octets) },
 +	{ "rx_65_to_127_bytes_phy", PPORT_2819_OFF(ether_stats_pkts65to127octets) },
 +	{ "rx_128_to_255_bytes_phy", PPORT_2819_OFF(ether_stats_pkts128to255octets) },
 +	{ "rx_256_to_511_bytes_phy", PPORT_2819_OFF(ether_stats_pkts256to511octets) },
 +	{ "rx_512_to_1023_bytes_phy", PPORT_2819_OFF(ether_stats_pkts512to1023octets) },
 +	{ "rx_1024_to_1518_bytes_phy", PPORT_2819_OFF(ether_stats_pkts1024to1518octets) },
 +	{ "rx_1519_to_2047_bytes_phy", PPORT_2819_OFF(ether_stats_pkts1519to2047octets) },
 +	{ "rx_2048_to_4095_bytes_phy", PPORT_2819_OFF(ether_stats_pkts2048to4095octets) },
 +	{ "rx_4096_to_8191_bytes_phy", PPORT_2819_OFF(ether_stats_pkts4096to8191octets) },
 +	{ "rx_8192_to_10239_bytes_phy", PPORT_2819_OFF(ether_stats_pkts8192to10239octets) },
 +};
 +
 +static const struct counter_desc pport_phy_statistical_stats_desc[] = {
 +	{ "rx_pcs_symbol_err_phy", PPORT_PHY_STATISTICAL_OFF(phy_symbol_errors) },
 +	{ "rx_corrected_bits_phy", PPORT_PHY_STATISTICAL_OFF(phy_corrected_bits) },
 +};
 +
 +static const struct counter_desc pport_per_prio_traffic_stats_desc[] = {
 +	{ "rx_prio%d_bytes", PPORT_PER_PRIO_OFF(rx_octets) },
 +	{ "rx_prio%d_packets", PPORT_PER_PRIO_OFF(rx_frames) },
 +	{ "tx_prio%d_bytes", PPORT_PER_PRIO_OFF(tx_octets) },
 +	{ "tx_prio%d_packets", PPORT_PER_PRIO_OFF(tx_frames) },
 +};
 +
 +static const struct counter_desc pport_per_prio_pfc_stats_desc[] = {
 +	/* %s is "global" or "prio{i}" */
 +	{ "rx_%s_pause", PPORT_PER_PRIO_OFF(rx_pause) },
 +	{ "rx_%s_pause_duration", PPORT_PER_PRIO_OFF(rx_pause_duration) },
 +	{ "tx_%s_pause", PPORT_PER_PRIO_OFF(tx_pause) },
 +	{ "tx_%s_pause_duration", PPORT_PER_PRIO_OFF(tx_pause_duration) },
 +	{ "rx_%s_pause_transition", PPORT_PER_PRIO_OFF(rx_pause_transition) },
 +};
 +
 +static const struct counter_desc pport_eth_ext_stats_desc[] = {
 +	{ "rx_buffer_passed_thres_phy", PPORT_ETH_EXT_OFF(rx_buffer_almost_full) },
 +};
 +
 +#define PCIE_PERF_OFF(c) \
 +	MLX5_BYTE_OFF(mpcnt_reg, counter_set.pcie_perf_cntrs_grp_data_layout.c)
++=======
++>>>>>>> 4377bea27696 (net/mlx5e: Switch per prio pfc counters to use stats group API)
  #define PCIE_PERF_GET(pcie_stats, c) \
  	MLX5_GET(mpcnt_reg, (pcie_stats)->pcie_perf_counters, \
  		 counter_set.pcie_perf_cntrs_grp_data_layout.c)
@@@ -411,41 -230,6 +411,44 @@@ static const struct counter_desc sq_sta
  	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, xmit_more) },
  };
  
++<<<<<<< HEAD
 +#define NUM_SW_COUNTERS			ARRAY_SIZE(sw_stats_desc)
 +#define NUM_Q_COUNTERS			ARRAY_SIZE(q_stats_desc)
 +#define NUM_VPORT_COUNTERS		ARRAY_SIZE(vport_stats_desc)
 +#define NUM_PPORT_802_3_COUNTERS	ARRAY_SIZE(pport_802_3_stats_desc)
 +#define NUM_PPORT_2863_COUNTERS		ARRAY_SIZE(pport_2863_stats_desc)
 +#define NUM_PPORT_2819_COUNTERS		ARRAY_SIZE(pport_2819_stats_desc)
 +#define NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) \
 +	(ARRAY_SIZE(pport_phy_statistical_stats_desc) * \
 +	 MLX5_CAP_PCAM_FEATURE((priv)->mdev, ppcnt_statistical_group))
 +#define NUM_PCIE_PERF_COUNTERS(priv) \
 +	(ARRAY_SIZE(pcie_perf_stats_desc) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, pcie_performance_group))
 +#define NUM_PCIE_PERF_COUNTERS64(priv) \
 +	(ARRAY_SIZE(pcie_perf_stats_desc64) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, tx_overflow_buffer_pkt))
 +#define NUM_PCIE_PERF_STALL_COUNTERS(priv) \
 +	(ARRAY_SIZE(pcie_perf_stall_stats_desc) * \
 +	 MLX5_CAP_MCAM_FEATURE((priv)->mdev, pcie_outbound_stalled))
 +#define NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS \
 +	ARRAY_SIZE(pport_per_prio_traffic_stats_desc)
 +#define NUM_PPORT_PER_PRIO_PFC_COUNTERS \
 +	ARRAY_SIZE(pport_per_prio_pfc_stats_desc)
 +#define NUM_PPORT_ETH_EXT_COUNTERS(priv) \
 +	(ARRAY_SIZE(pport_eth_ext_stats_desc) * \
 +	 MLX5_CAP_PCAM_FEATURE((priv)->mdev, rx_buffer_fullness_counters))
 +#define NUM_PPORT_COUNTERS(priv)	(NUM_PPORT_802_3_COUNTERS + \
 +					 NUM_PPORT_2863_COUNTERS  + \
 +					 NUM_PPORT_2819_COUNTERS  + \
 +					 NUM_PPORT_PHY_STATISTICAL_COUNTERS(priv) + \
 +					 NUM_PPORT_PER_PRIO_TRAFFIC_COUNTERS * \
 +					 NUM_PPORT_PRIO + \
 +					 NUM_PPORT_ETH_EXT_COUNTERS(priv))
 +#define NUM_PCIE_COUNTERS(priv)		(NUM_PCIE_PERF_COUNTERS(priv) + \
 +					 NUM_PCIE_PERF_COUNTERS64(priv) +\
 +					 NUM_PCIE_PERF_STALL_COUNTERS(priv))
++=======
++>>>>>>> 4377bea27696 (net/mlx5e: Switch per prio pfc counters to use stats group API)
  #define NUM_RQ_STATS			ARRAY_SIZE(rq_stats_desc)
  #define NUM_SQ_STATS			ARRAY_SIZE(sq_stats_desc)
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_stats.h
