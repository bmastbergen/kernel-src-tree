net: sched: use extended variants of block_get/put in ingress and clsact qdiscs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] sched: use extended variants of block_get/put in ingress and clsact qdiscs (Ivan Vecera) [1572720]
Rebuild_FUZZ: 96.73%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 6e40cf2d4dee9dc22ff398041ce876bef8172dea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/6e40cf2d.failed

Use previously introduced extended variants of block get and put
functions. This allows to specify a binder types specific to clsact
ingress/egress which is useful for drivers to distinguish who actually
got the block.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6e40cf2d4dee9dc22ff398041ce876bef8172dea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/pkt_cls.h
#	net/sched/sch_ingress.c
diff --cc include/net/pkt_cls.h
index 43b9922037a8,5c50af8f7183..000000000000
--- a/include/net/pkt_cls.h
+++ b/include/net/pkt_cls.h
@@@ -18,7 -17,15 +18,19 @@@ struct tcf_walker 
  int register_tcf_proto_ops(struct tcf_proto_ops *ops);
  int unregister_tcf_proto_ops(struct tcf_proto_ops *ops);
  
++<<<<<<< HEAD
 +bool tcf_queue_work(struct work_struct *work);
++=======
+ enum tcf_block_binder_type {
+ 	TCF_BLOCK_BINDER_TYPE_UNSPEC,
+ 	TCF_BLOCK_BINDER_TYPE_CLSACT_INGRESS,
+ 	TCF_BLOCK_BINDER_TYPE_CLSACT_EGRESS,
+ };
+ 
+ struct tcf_block_ext_info {
+ 	enum tcf_block_binder_type binder_type;
+ };
++>>>>>>> 6e40cf2d4dee (net: sched: use extended variants of block_get/put in ingress and clsact qdiscs)
  
  #ifdef CONFIG_NET_CLS
  struct tcf_chain *tcf_chain_get(struct tcf_block *block, u32 chain_index,
diff --cc net/sched/sch_ingress.c
index 790eb0f81e70,b599db26d34b..000000000000
--- a/net/sched/sch_ingress.c
+++ b/net/sched/sch_ingress.c
@@@ -59,7 -60,10 +60,14 @@@ static int ingress_init(struct Qdisc *s
  	struct net_device *dev = qdisc_dev(sch);
  	int err;
  
++<<<<<<< HEAD
 +	err = tcf_block_get(&q->block, &dev->ingress_cl_list);
++=======
+ 	q->block_info.binder_type = TCF_BLOCK_BINDER_TYPE_CLSACT_INGRESS;
+ 
+ 	err = tcf_block_get_ext(&q->block, &dev->ingress_cl_list,
+ 				sch, &q->block_info);
++>>>>>>> 6e40cf2d4dee (net: sched: use extended variants of block_get/put in ingress and clsact qdiscs)
  	if (err)
  		return err;
  
@@@ -153,14 -161,20 +165,28 @@@ static int clsact_init(struct Qdisc *sc
  	struct net_device *dev = qdisc_dev(sch);
  	int err;
  
++<<<<<<< HEAD
 +	err = tcf_block_get(&q->ingress_block, &dev->ingress_cl_list);
 +	if (err)
 +		return err;
 +
 +	err = tcf_block_get(&q->egress_block, &dev->extended->egress_cl_list);
++=======
+ 	q->ingress_block_info.binder_type = TCF_BLOCK_BINDER_TYPE_CLSACT_INGRESS;
+ 
+ 	err = tcf_block_get_ext(&q->ingress_block, &dev->ingress_cl_list,
+ 				sch, &q->ingress_block_info);
  	if (err)
  		return err;
  
+ 	q->egress_block_info.binder_type = TCF_BLOCK_BINDER_TYPE_CLSACT_EGRESS;
+ 
+ 	err = tcf_block_get_ext(&q->egress_block, &dev->egress_cl_list,
+ 				sch, &q->egress_block_info);
++>>>>>>> 6e40cf2d4dee (net: sched: use extended variants of block_get/put in ingress and clsact qdiscs)
+ 	if (err)
+ 		goto err_egress_block_get;
+ 
  	net_inc_ingress_queue();
  	net_inc_egress_queue();
  
* Unmerged path include/net/pkt_cls.h
* Unmerged path net/sched/sch_ingress.c
