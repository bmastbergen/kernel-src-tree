arch: Set IORESOURCE_SYSTEM_RAM flag for System RAM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Toshi Kani <toshi.kani@hpe.com>
commit 35d98e93fe6a7ab612f6b389ce42c1dc135d6eef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/35d98e93.failed

Set IORESOURCE_SYSTEM_RAM in flags of resource ranges with
"System RAM", "Kernel code", "Kernel data", and "Kernel bss".

Note that:

 - IORESOURCE_SYSRAM (i.e. modifier bit) is set in flags when
   IORESOURCE_MEM is already set. IORESOURCE_SYSTEM_RAM is defined
   as (IORESOURCE_MEM|IORESOURCE_SYSRAM).

 - Some archs do not set 'flags' for children nodes, such as
   "Kernel code".  This patch does not change 'flags' in this
   case.

	Signed-off-by: Toshi Kani <toshi.kani@hpe.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Luis R. Rodriguez <mcgrof@suse.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Toshi Kani <toshi.kani@hp.com>
	Cc: linux-arch@vger.kernel.org
	Cc: linux-arm-kernel@lists.infradead.org
	Cc: linux-mips@linux-mips.org
	Cc: linux-mm <linux-mm@kvack.org>
	Cc: linux-parisc@vger.kernel.org
	Cc: linux-s390@vger.kernel.org
	Cc: linux-sh@vger.kernel.org
	Cc: linuxppc-dev@lists.ozlabs.org
	Cc: sparclinux@vger.kernel.org
Link: http://lkml.kernel.org/r/1453841853-11383-7-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 35d98e93fe6a7ab612f6b389ce42c1dc135d6eef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/setup.c
#	arch/sparc/mm/init_64.c
#	arch/tile/kernel/setup.c
diff --cc arch/s390/kernel/setup.c
index d6e8e87b465f,cedb0198675f..000000000000
--- a/arch/s390/kernel/setup.c
+++ b/arch/s390/kernel/setup.c
@@@ -428,24 -406,13 +428,32 @@@ static void __init setup_resources(void
  	bss_resource.start = (unsigned long) &__bss_start;
  	bss_resource.end = (unsigned long) &__bss_stop - 1;
  
 -	for_each_memblock(memory, reg) {
 +	for (i = 0; i < MEMORY_CHUNKS; i++) {
 +		if (!memory_chunk[i].size)
 +			continue;
  		res = alloc_bootmem_low(sizeof(*res));
++<<<<<<< HEAD
 +		res->flags = IORESOURCE_BUSY | IORESOURCE_MEM;
 +		switch (memory_chunk[i].type) {
 +		case CHUNK_READ_WRITE:
 +			res->name = "System RAM";
 +			break;
 +		case CHUNK_READ_ONLY:
 +			res->name = "System ROM";
 +			res->flags |= IORESOURCE_READONLY;
 +			break;
 +		default:
 +			res->name = "reserved";
 +		}
 +		res->start = memory_chunk[i].addr;
 +		res->end = res->start + memory_chunk[i].size - 1;
++=======
+ 		res->flags = IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM;
+ 
+ 		res->name = "System RAM";
+ 		res->start = reg->base;
+ 		res->end = reg->base + reg->size - 1;
++>>>>>>> 35d98e93fe6a (arch: Set IORESOURCE_SYSTEM_RAM flag for System RAM)
  		request_resource(&iomem_resource, res);
  
  		for (j = 0; j < ARRAY_SIZE(standard_resources); j++) {
diff --cc arch/sparc/mm/init_64.c
index 1e1aed064009,1cfe6aab7a11..000000000000
--- a/arch/sparc/mm/init_64.c
+++ b/arch/sparc/mm/init_64.c
@@@ -2765,3 -2860,90 +2765,93 @@@ void hugetlb_setup(struct pt_regs *regs
  	}
  }
  #endif
++<<<<<<< HEAD
++=======
+ 
+ static struct resource code_resource = {
+ 	.name	= "Kernel code",
+ 	.flags	= IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM
+ };
+ 
+ static struct resource data_resource = {
+ 	.name	= "Kernel data",
+ 	.flags	= IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM
+ };
+ 
+ static struct resource bss_resource = {
+ 	.name	= "Kernel bss",
+ 	.flags	= IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM
+ };
+ 
+ static inline resource_size_t compute_kern_paddr(void *addr)
+ {
+ 	return (resource_size_t) (addr - KERNBASE + kern_base);
+ }
+ 
+ static void __init kernel_lds_init(void)
+ {
+ 	code_resource.start = compute_kern_paddr(_text);
+ 	code_resource.end   = compute_kern_paddr(_etext - 1);
+ 	data_resource.start = compute_kern_paddr(_etext);
+ 	data_resource.end   = compute_kern_paddr(_edata - 1);
+ 	bss_resource.start  = compute_kern_paddr(__bss_start);
+ 	bss_resource.end    = compute_kern_paddr(_end - 1);
+ }
+ 
+ static int __init report_memory(void)
+ {
+ 	int i;
+ 	struct resource *res;
+ 
+ 	kernel_lds_init();
+ 
+ 	for (i = 0; i < pavail_ents; i++) {
+ 		res = kzalloc(sizeof(struct resource), GFP_KERNEL);
+ 
+ 		if (!res) {
+ 			pr_warn("Failed to allocate source.\n");
+ 			break;
+ 		}
+ 
+ 		res->name = "System RAM";
+ 		res->start = pavail[i].phys_addr;
+ 		res->end = pavail[i].phys_addr + pavail[i].reg_size - 1;
+ 		res->flags = IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM;
+ 
+ 		if (insert_resource(&iomem_resource, res) < 0) {
+ 			pr_warn("Resource insertion failed.\n");
+ 			break;
+ 		}
+ 
+ 		insert_resource(res, &code_resource);
+ 		insert_resource(res, &data_resource);
+ 		insert_resource(res, &bss_resource);
+ 	}
+ 
+ 	return 0;
+ }
+ arch_initcall(report_memory);
+ 
+ #ifdef CONFIG_SMP
+ #define do_flush_tlb_kernel_range	smp_flush_tlb_kernel_range
+ #else
+ #define do_flush_tlb_kernel_range	__flush_tlb_kernel_range
+ #endif
+ 
+ void flush_tlb_kernel_range(unsigned long start, unsigned long end)
+ {
+ 	if (start < HI_OBP_ADDRESS && end > LOW_OBP_ADDRESS) {
+ 		if (start < LOW_OBP_ADDRESS) {
+ 			flush_tsb_kernel_range(start, LOW_OBP_ADDRESS);
+ 			do_flush_tlb_kernel_range(start, LOW_OBP_ADDRESS);
+ 		}
+ 		if (end > HI_OBP_ADDRESS) {
+ 			flush_tsb_kernel_range(HI_OBP_ADDRESS, end);
+ 			do_flush_tlb_kernel_range(HI_OBP_ADDRESS, end);
+ 		}
+ 	} else {
+ 		flush_tsb_kernel_range(start, end);
+ 		do_flush_tlb_kernel_range(start, end);
+ 	}
+ }
++>>>>>>> 35d98e93fe6a (arch: Set IORESOURCE_SYSTEM_RAM flag for System RAM)
diff --cc arch/tile/kernel/setup.c
index 7a5aa1a7864e,a992238e9b58..000000000000
--- a/arch/tile/kernel/setup.c
+++ b/arch/tile/kernel/setup.c
@@@ -1565,7 -1671,8 +1565,12 @@@ insert_ram_resource(u64 start_pfn, u64 
  {
  	struct resource *res =
  		kzalloc(sizeof(struct resource), GFP_ATOMIC);
++<<<<<<< HEAD
 +	res->name = "System RAM";
++=======
+ 	if (!res)
+ 		return NULL;
++>>>>>>> 35d98e93fe6a (arch: Set IORESOURCE_SYSTEM_RAM flag for System RAM)
  	res->start = start_pfn << PAGE_SHIFT;
  	res->end = (end_pfn << PAGE_SHIFT) - 1;
  	res->flags = IORESOURCE_BUSY | IORESOURCE_MEM;
diff --git a/arch/arm/kernel/setup.c b/arch/arm/kernel/setup.c
index b4b1d397592b..42815488b154 100644
--- a/arch/arm/kernel/setup.c
+++ b/arch/arm/kernel/setup.c
@@ -157,13 +157,13 @@ static struct resource mem_res[] = {
 		.name = "Kernel code",
 		.start = 0,
 		.end = 0,
-		.flags = IORESOURCE_MEM
+		.flags = IORESOURCE_SYSTEM_RAM
 	},
 	{
 		.name = "Kernel data",
 		.start = 0,
 		.end = 0,
-		.flags = IORESOURCE_MEM
+		.flags = IORESOURCE_SYSTEM_RAM
 	}
 };
 
@@ -617,7 +617,7 @@ static void __init request_standard_resources(struct machine_desc *mdesc)
 		res->name  = "System RAM";
 		res->start = __pfn_to_phys(memblock_region_memory_base_pfn(region));
 		res->end = __pfn_to_phys(memblock_region_memory_end_pfn(region)) - 1;
-		res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+		res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
 
 		request_resource(&iomem_resource, res);
 
diff --git a/arch/arm64/kernel/setup.c b/arch/arm64/kernel/setup.c
index add6ea616843..d8fae924d919 100644
--- a/arch/arm64/kernel/setup.c
+++ b/arch/arm64/kernel/setup.c
@@ -72,13 +72,13 @@ static struct resource mem_res[] = {
 		.name = "Kernel code",
 		.start = 0,
 		.end = 0,
-		.flags = IORESOURCE_MEM
+		.flags = IORESOURCE_SYSTEM_RAM
 	},
 	{
 		.name = "Kernel data",
 		.start = 0,
 		.end = 0,
-		.flags = IORESOURCE_MEM
+		.flags = IORESOURCE_SYSTEM_RAM
 	}
 };
 
@@ -229,7 +229,7 @@ static void __init request_standard_resources(void)
 		res->name  = "System RAM";
 		res->start = __pfn_to_phys(memblock_region_memory_base_pfn(region));
 		res->end = __pfn_to_phys(memblock_region_memory_end_pfn(region)) - 1;
-		res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+		res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
 
 		request_resource(&iomem_resource, res);
 
diff --git a/arch/avr32/kernel/setup.c b/arch/avr32/kernel/setup.c
index b4247f478065..dc4de2bf4516 100644
--- a/arch/avr32/kernel/setup.c
+++ b/arch/avr32/kernel/setup.c
@@ -49,13 +49,13 @@ static struct resource __initdata kernel_data = {
 	.name	= "Kernel data",
 	.start	= 0,
 	.end	= 0,
-	.flags	= IORESOURCE_MEM,
+	.flags	= IORESOURCE_SYSTEM_RAM,
 };
 static struct resource __initdata kernel_code = {
 	.name	= "Kernel code",
 	.start	= 0,
 	.end	= 0,
-	.flags	= IORESOURCE_MEM,
+	.flags	= IORESOURCE_SYSTEM_RAM,
 	.sibling = &kernel_data,
 };
 
@@ -134,7 +134,7 @@ add_physical_memory(resource_size_t start, resource_size_t end)
 	new->start = start;
 	new->end = end;
 	new->name = "System RAM";
-	new->flags = IORESOURCE_MEM;
+	new->flags = IORESOURCE_SYSTEM_RAM;
 
 	*pprev = new;
 }
diff --git a/arch/m32r/kernel/setup.c b/arch/m32r/kernel/setup.c
index 0392112a5d70..5f62ff0d8577 100644
--- a/arch/m32r/kernel/setup.c
+++ b/arch/m32r/kernel/setup.c
@@ -70,14 +70,14 @@ static struct resource data_resource = {
 	.name   = "Kernel data",
 	.start  = 0,
 	.end    = 0,
-	.flags  = IORESOURCE_BUSY | IORESOURCE_MEM
+	.flags  = IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM
 };
 
 static struct resource code_resource = {
 	.name   = "Kernel code",
 	.start  = 0,
 	.end    = 0,
-	.flags  = IORESOURCE_BUSY | IORESOURCE_MEM
+	.flags  = IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM
 };
 
 unsigned long memory_start;
diff --git a/arch/mips/kernel/setup.c b/arch/mips/kernel/setup.c
index c7f90519e58c..0f025bcc5638 100644
--- a/arch/mips/kernel/setup.c
+++ b/arch/mips/kernel/setup.c
@@ -695,21 +695,23 @@ static void __init resource_init(void)
 			end = HIGHMEM_START - 1;
 
 		res = alloc_bootmem(sizeof(struct resource));
+
+		res->start = start;
+		res->end = end;
+		res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+
 		switch (boot_mem_map.map[i].type) {
 		case BOOT_MEM_RAM:
 		case BOOT_MEM_INIT_RAM:
 		case BOOT_MEM_ROM_DATA:
 			res->name = "System RAM";
+			res->flags |= IORESOURCE_SYSRAM;
 			break;
 		case BOOT_MEM_RESERVED:
 		default:
 			res->name = "reserved";
 		}
 
-		res->start = start;
-		res->end = end;
-
-		res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
 		request_resource(&iomem_resource, res);
 
 		/*
diff --git a/arch/parisc/mm/init.c b/arch/parisc/mm/init.c
index 505b56c6b9b9..3c2c0e86c9ef 100644
--- a/arch/parisc/mm/init.c
+++ b/arch/parisc/mm/init.c
@@ -52,12 +52,12 @@ signed char pfnnid_map[PFNNID_MAP_MAX] __read_mostly;
 
 static struct resource data_resource = {
 	.name	= "Kernel data",
-	.flags	= IORESOURCE_BUSY | IORESOURCE_MEM,
+	.flags	= IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM,
 };
 
 static struct resource code_resource = {
 	.name	= "Kernel code",
-	.flags	= IORESOURCE_BUSY | IORESOURCE_MEM,
+	.flags	= IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM,
 };
 
 static struct resource pdcdata_resource = {
@@ -198,7 +198,7 @@ static void __init setup_bootmem(void)
 		res->name = "System RAM";
 		res->start = pmem_ranges[i].start_pfn << PAGE_SHIFT;
 		res->end = res->start + (pmem_ranges[i].pages << PAGE_SHIFT)-1;
-		res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+		res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
 		request_resource(&iomem_resource, res);
 	}
 
diff --git a/arch/powerpc/mm/mem.c b/arch/powerpc/mm/mem.c
index 7bbac9df162a..456b3a7eb663 100644
--- a/arch/powerpc/mm/mem.c
+++ b/arch/powerpc/mm/mem.c
@@ -590,7 +590,7 @@ static int __init add_system_ram_resources(void)
 			res->name = "System RAM";
 			res->start = base;
 			res->end = base + size - 1;
-			res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+			res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
 			WARN_ON(request_resource(&iomem_resource, res) < 0);
 		}
 	}
* Unmerged path arch/s390/kernel/setup.c
diff --git a/arch/score/kernel/setup.c b/arch/score/kernel/setup.c
index b48459afefdd..f3a0649ab521 100644
--- a/arch/score/kernel/setup.c
+++ b/arch/score/kernel/setup.c
@@ -101,7 +101,7 @@ static void __init resource_init(void)
 	res->name = "System RAM";
 	res->start = MEMORY_START;
 	res->end = MEMORY_START + MEMORY_SIZE - 1;
-	res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+	res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
 	request_resource(&iomem_resource, res);
 
 	request_resource(res, &code_resource);
diff --git a/arch/sh/kernel/setup.c b/arch/sh/kernel/setup.c
index eb31811b96b8..c6c18a92c71c 100644
--- a/arch/sh/kernel/setup.c
+++ b/arch/sh/kernel/setup.c
@@ -78,17 +78,17 @@ static char __initdata command_line[COMMAND_LINE_SIZE] = { 0, };
 
 static struct resource code_resource = {
 	.name = "Kernel code",
-	.flags = IORESOURCE_BUSY | IORESOURCE_MEM,
+	.flags = IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM,
 };
 
 static struct resource data_resource = {
 	.name = "Kernel data",
-	.flags = IORESOURCE_BUSY | IORESOURCE_MEM,
+	.flags = IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM,
 };
 
 static struct resource bss_resource = {
 	.name	= "Kernel bss",
-	.flags	= IORESOURCE_BUSY | IORESOURCE_MEM,
+	.flags	= IORESOURCE_BUSY | IORESOURCE_SYSTEM_RAM,
 };
 
 unsigned long memory_start;
@@ -202,7 +202,7 @@ void __init __add_active_range(unsigned int nid, unsigned long start_pfn,
 	res->name = "System RAM";
 	res->start = start;
 	res->end = end - 1;
-	res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+	res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
 
 	if (request_resource(&iomem_resource, res)) {
 		pr_err("unable to request memory_resource 0x%lx 0x%lx\n",
* Unmerged path arch/sparc/mm/init_64.c
* Unmerged path arch/tile/kernel/setup.c
diff --git a/arch/unicore32/kernel/setup.c b/arch/unicore32/kernel/setup.c
index 87adbf5ebfe0..d6fb8bfee0eb 100644
--- a/arch/unicore32/kernel/setup.c
+++ b/arch/unicore32/kernel/setup.c
@@ -68,13 +68,13 @@ static struct resource mem_res[] = {
 		.name = "Kernel code",
 		.start = 0,
 		.end = 0,
-		.flags = IORESOURCE_MEM
+		.flags = IORESOURCE_SYSTEM_RAM
 	},
 	{
 		.name = "Kernel data",
 		.start = 0,
 		.end = 0,
-		.flags = IORESOURCE_MEM
+		.flags = IORESOURCE_SYSTEM_RAM
 	}
 };
 
@@ -207,7 +207,7 @@ request_standard_resources(struct meminfo *mi)
 		res->name  = "System RAM";
 		res->start = mi->bank[i].start;
 		res->end   = mi->bank[i].start + mi->bank[i].size - 1;
-		res->flags = IORESOURCE_MEM | IORESOURCE_BUSY;
+		res->flags = IORESOURCE_SYSTEM_RAM | IORESOURCE_BUSY;
 
 		request_resource(&iomem_resource, res);
 
