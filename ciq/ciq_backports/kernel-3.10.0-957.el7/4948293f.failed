net: aquantia: Introduce new AQC devices and capabilities

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] aquantia: Introduce new AQC devices and capabilities (David Arcari) [1546765]
Rebuild_FUZZ: 95.41%
commit-author Igor Russkikh <igor.russkikh@aquantia.com>
commit 4948293ff963e5451a8f0c21be8f1dfc2c7f65f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4948293f.failed

A number of new AQC devices is going to be released. To support more
flexible capabilities management a number of static caps instances is now
declared. Devices now are mainly differs by supported speeds, but in future
more parameters will be customized. A set of AQC100 devices have
fibre media, not twisted pair - this is also reflected in
new capabilities definitions.

HW level also now directly exports hw_ops for each of A0/B0 hardware.

PCI configuration now uses a device configuration table where each
device ID is explicitly mapped with hardware OPs and capabilities
structures.

	Signed-off-by: Igor Russkikh <igor.russkikh@aquantia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4948293ff963e5451a8f0c21be8f1dfc2c7f65f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_common.h
#	drivers/net/ethernet/aquantia/atlantic/aq_hw.h
#	drivers/net/ethernet/aquantia/atlantic/aq_pci_func.c
#	drivers/net/ethernet/aquantia/atlantic/aq_pci_func.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_common.h
index 9eb5e222a234,d52b088ff8f0..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_common.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_common.h
@@@ -20,4 -19,42 +20,45 @@@
  #include "aq_cfg.h"
  #include "aq_utils.h"
  
++<<<<<<< HEAD
++=======
+ #define PCI_VENDOR_ID_AQUANTIA  0x1D6A
+ 
+ #define AQ_DEVICE_ID_0001	0x0001
+ #define AQ_DEVICE_ID_D100	0xD100
+ #define AQ_DEVICE_ID_D107	0xD107
+ #define AQ_DEVICE_ID_D108	0xD108
+ #define AQ_DEVICE_ID_D109	0xD109
+ 
+ #define AQ_DEVICE_ID_AQC100	0x00B1
+ #define AQ_DEVICE_ID_AQC107	0x07B1
+ #define AQ_DEVICE_ID_AQC108	0x08B1
+ #define AQ_DEVICE_ID_AQC109	0x09B1
+ #define AQ_DEVICE_ID_AQC111	0x11B1
+ #define AQ_DEVICE_ID_AQC112	0x12B1
+ 
+ #define AQ_DEVICE_ID_AQC100S	0x80B1
+ #define AQ_DEVICE_ID_AQC107S	0x87B1
+ #define AQ_DEVICE_ID_AQC108S	0x88B1
+ #define AQ_DEVICE_ID_AQC109S	0x89B1
+ #define AQ_DEVICE_ID_AQC111S	0x91B1
+ #define AQ_DEVICE_ID_AQC112S	0x92B1
+ 
+ #define AQ_DEVICE_ID_AQC111E	0x51B1
+ #define AQ_DEVICE_ID_AQC112E	0x52B1
+ 
+ #define HW_ATL_NIC_NAME "aQuantia AQtion 10Gbit Network Adapter"
+ 
+ #define AQ_HWREV_ANY	0
+ #define AQ_HWREV_1	1
+ #define AQ_HWREV_2	2
+ 
+ #define AQ_NIC_RATE_10G        BIT(0)
+ #define AQ_NIC_RATE_5G         BIT(1)
+ #define AQ_NIC_RATE_5GSR       BIT(2)
+ #define AQ_NIC_RATE_2GS        BIT(3)
+ #define AQ_NIC_RATE_1G         BIT(4)
+ #define AQ_NIC_RATE_100M       BIT(5)
+ 
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  #endif /* AQ_COMMON_H */
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_hw.h
index cdd1acd417c2,5792a7c35998..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
@@@ -87,6 -89,16 +88,19 @@@ struct aq_stats_s 
  
  #define AQ_HW_FLAG_ERRORS      (AQ_HW_FLAG_ERR_HW | AQ_HW_FLAG_ERR_UNPLUG)
  
++<<<<<<< HEAD
++=======
+ #define AQ_NIC_FLAGS_IS_NOT_READY (AQ_NIC_FLAG_STOPPING | \
+ 			AQ_NIC_FLAG_RESETTING | AQ_NIC_FLAG_CLOSING | \
+ 			AQ_NIC_FLAG_ERR_UNPLUG | AQ_NIC_FLAG_ERR_HW)
+ 
+ #define AQ_NIC_FLAGS_IS_NOT_TX_READY (AQ_NIC_FLAGS_IS_NOT_READY | \
+ 					AQ_NIC_LINK_DOWN)
+ 
+ #define AQ_HW_MEDIA_TYPE_TP    1U
+ #define AQ_HW_MEDIA_TYPE_FIBRE 2U
+ 
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  struct aq_hw_s {
  	atomic_t flags;
  	struct aq_nic_cfg_s *aq_nic_cfg;
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_pci_func.c
index 667e08a571a5,e426e3ef629f..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_pci_func.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_pci_func.c
@@@ -28,13 -31,96 +28,104 @@@ struct aq_pci_func_s 
  	bool is_regions;
  	bool is_pci_using_dac;
  	struct aq_hw_caps_s aq_hw_caps;
 +	struct msix_entry msix_entry[AQ_CFG_PCI_FUNC_MSIX_IRQS];
  };
  
++<<<<<<< HEAD
 +struct aq_pci_func_s *aq_pci_func_alloc(const struct aq_hw_ops *aq_hw_ops,
 +					struct pci_dev *pdev,
 +					const struct net_device_ops *ndev_ops,
 +					const struct ethtool_ops *eth_ops)
++=======
+ static const struct pci_device_id aq_pci_tbl[] = {
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_0001), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_D100), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_D107), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_D108), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_D109), },
+ 
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC100), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC107), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC108), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC109), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC111), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC112), },
+ 
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC100S), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC107S), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC108S), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC109S), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC111S), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC112S), },
+ 
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC111E), },
+ 	{ PCI_VDEVICE(AQUANTIA, AQ_DEVICE_ID_AQC112E), },
+ 
+ 	{}
+ };
+ 
+ const struct aq_board_revision_s hw_atl_boards[] = {
+ 	{ AQ_DEVICE_ID_0001,	AQ_HWREV_1,	&hw_atl_ops_a0, &hw_atl_a0_caps_aqc107, },
+ 	{ AQ_DEVICE_ID_D100,	AQ_HWREV_1,	&hw_atl_ops_a0, &hw_atl_a0_caps_aqc100, },
+ 	{ AQ_DEVICE_ID_D107,	AQ_HWREV_1,	&hw_atl_ops_a0, &hw_atl_a0_caps_aqc107, },
+ 	{ AQ_DEVICE_ID_D108,	AQ_HWREV_1,	&hw_atl_ops_a0, &hw_atl_a0_caps_aqc108, },
+ 	{ AQ_DEVICE_ID_D109,	AQ_HWREV_1,	&hw_atl_ops_a0, &hw_atl_a0_caps_aqc109, },
+ 
+ 	{ AQ_DEVICE_ID_0001,	AQ_HWREV_2,	&hw_atl_ops_b0, &hw_atl_b0_caps_aqc107, },
+ 	{ AQ_DEVICE_ID_D100,	AQ_HWREV_2,	&hw_atl_ops_b0, &hw_atl_b0_caps_aqc100, },
+ 	{ AQ_DEVICE_ID_D107,	AQ_HWREV_2,	&hw_atl_ops_b0, &hw_atl_b0_caps_aqc107, },
+ 	{ AQ_DEVICE_ID_D108,	AQ_HWREV_2,	&hw_atl_ops_b0, &hw_atl_b0_caps_aqc108, },
+ 	{ AQ_DEVICE_ID_D109,	AQ_HWREV_2,	&hw_atl_ops_b0, &hw_atl_b0_caps_aqc109, },
+ 
+ 	{ AQ_DEVICE_ID_AQC100,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc107, },
+ 	{ AQ_DEVICE_ID_AQC107,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc107, },
+ 	{ AQ_DEVICE_ID_AQC108,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc108, },
+ 	{ AQ_DEVICE_ID_AQC109,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc109, },
+ 	{ AQ_DEVICE_ID_AQC111,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc111, },
+ 	{ AQ_DEVICE_ID_AQC112,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc112, },
+ 
+ 	{ AQ_DEVICE_ID_AQC100S,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc100s, },
+ 	{ AQ_DEVICE_ID_AQC107S,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc107s, },
+ 	{ AQ_DEVICE_ID_AQC108S,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc108s, },
+ 	{ AQ_DEVICE_ID_AQC109S,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc109s, },
+ 	{ AQ_DEVICE_ID_AQC111S,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc111s, },
+ 	{ AQ_DEVICE_ID_AQC112S,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc112s, },
+ 
+ 	{ AQ_DEVICE_ID_AQC111E,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc111e, },
+ 	{ AQ_DEVICE_ID_AQC112E,	AQ_HWREV_ANY,	&hw_atl_ops_b1, &hw_atl_b0_caps_aqc112e, },
+ };
+ 
+ MODULE_DEVICE_TABLE(pci, aq_pci_tbl);
+ 
+ static int aq_pci_probe_get_hw_by_id(struct pci_dev *pdev,
+ 				     const struct aq_hw_ops **ops,
+ 				     const struct aq_hw_caps_s **caps)
+ {
+ 	int i = 0;
+ 
+ 	if (pdev->vendor != PCI_VENDOR_ID_AQUANTIA)
+ 		return -EINVAL;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(hw_atl_boards); i++) {
+ 		if (hw_atl_boards[i].devid == pdev->device &&
+ 		    (hw_atl_boards[i].revision == AQ_HWREV_ANY ||
+ 		     hw_atl_boards[i].revision == pdev->revision)) {
+ 			*ops = hw_atl_boards[i].ops;
+ 			*caps = hw_atl_boards[i].caps;
+ 			break;
+ 		}
+ 	}
+ 
+ 	if (i == ARRAY_SIZE(hw_atl_boards))
+ 		return -EINVAL;
+ 
+ 	return 0;
+ }
+ 
+ struct aq_pci_func_s *aq_pci_func_alloc(const struct aq_hw_ops *aq_hw_ops,
+ 					const struct aq_hw_caps_s *aq_hw_caps,
+ 					struct pci_dev *pdev)
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  {
  	struct aq_pci_func_s *self = NULL;
  	int err = 0;
@@@ -61,9 -143,9 +148,15 @@@
  	self->ports = self->aq_hw_caps.ports;
  
  	for (port = 0; port < self->ports; ++port) {
++<<<<<<< HEAD
 +		struct aq_nic_s *aq_nic = aq_nic_alloc_cold(ndev_ops, eth_ops,
 +							    pdev, self,
 +							    port, aq_hw_ops);
++=======
+ 		struct aq_nic_s *aq_nic = aq_nic_alloc_cold(pdev, self,
+ 							    port, aq_hw_ops,
+ 							    aq_hw_caps);
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  
  		if (!aq_nic) {
  			err = -ENOMEM;
@@@ -345,3 -381,68 +438,71 @@@ int aq_pci_func_change_pm_state(struct 
  err_exit:
  	return err;
  }
++<<<<<<< HEAD
++=======
+ 
+ static int aq_pci_probe(struct pci_dev *pdev,
+ 			const struct pci_device_id *pci_id)
+ {
+ 	const struct aq_hw_ops *aq_hw_ops = NULL;
+ 	const struct aq_hw_caps_s *aq_hw_caps = NULL;
+ 	struct aq_pci_func_s *aq_pci_func = NULL;
+ 	int err = 0;
+ 
+ 	err = pci_enable_device(pdev);
+ 	if (err < 0)
+ 		goto err_exit;
+ 	err = aq_pci_probe_get_hw_by_id(pdev, &aq_hw_ops, &aq_hw_caps);
+ 	if (err < 0)
+ 		goto err_exit;
+ 	aq_pci_func = aq_pci_func_alloc(aq_hw_ops, aq_hw_caps, pdev);
+ 	if (!aq_pci_func) {
+ 		err = -ENOMEM;
+ 		goto err_exit;
+ 	}
+ 	err = aq_pci_func_init(aq_pci_func);
+ 	if (err < 0)
+ 		goto err_exit;
+ 
+ err_exit:
+ 	if (err < 0) {
+ 		if (aq_pci_func)
+ 			aq_pci_func_free(aq_pci_func);
+ 	}
+ 	return err;
+ }
+ 
+ static void aq_pci_remove(struct pci_dev *pdev)
+ {
+ 	struct aq_pci_func_s *aq_pci_func = pci_get_drvdata(pdev);
+ 
+ 	aq_pci_func_deinit(aq_pci_func);
+ 	aq_pci_func_free(aq_pci_func);
+ }
+ 
+ static int aq_pci_suspend(struct pci_dev *pdev, pm_message_t pm_msg)
+ {
+ 	struct aq_pci_func_s *aq_pci_func = pci_get_drvdata(pdev);
+ 
+ 	return aq_pci_func_change_pm_state(aq_pci_func, &pm_msg);
+ }
+ 
+ static int aq_pci_resume(struct pci_dev *pdev)
+ {
+ 	struct aq_pci_func_s *aq_pci_func = pci_get_drvdata(pdev);
+ 	pm_message_t pm_msg = PMSG_RESTORE;
+ 
+ 	return aq_pci_func_change_pm_state(aq_pci_func, &pm_msg);
+ }
+ 
+ static struct pci_driver aq_pci_ops = {
+ 	.name = AQ_CFG_DRV_NAME,
+ 	.id_table = aq_pci_tbl,
+ 	.probe = aq_pci_probe,
+ 	.remove = aq_pci_remove,
+ 	.suspend = aq_pci_suspend,
+ 	.resume = aq_pci_resume,
+ };
+ 
+ module_pci_driver(aq_pci_ops);
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_pci_func.h
index 84465220b36b,701c99611c28..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_pci_func.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_pci_func.h
@@@ -15,10 -15,13 +15,20 @@@
  #include "aq_common.h"
  #include "aq_nic.h"
  
++<<<<<<< HEAD
 +struct aq_pci_func_s *aq_pci_func_alloc(const struct aq_hw_ops *hw_ops,
 +					struct pci_dev *pdev,
 +					const struct net_device_ops *ndev_ops,
 +					const struct ethtool_ops *eth_ops);
++=======
+ struct aq_board_revision_s {
+ 	unsigned short devid;
+ 	unsigned short revision;
+ 	const struct aq_hw_ops *ops;
+ 	const struct aq_hw_caps_s *caps;
+ };
+ 
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  int aq_pci_func_init(struct aq_pci_func_s *self);
  int aq_pci_func_alloc_irq(struct aq_pci_func_s *self, unsigned int i,
  			  char *name, void *aq_vec,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
index 773434b96bb0,491a901b6d22..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
@@@ -17,23 -18,67 +17,77 @@@
  #include "hw_atl_llh.h"
  #include "hw_atl_a0_internal.h"
  
- static int hw_atl_a0_get_hw_caps(struct aq_hw_s *self,
- 				 struct aq_hw_caps_s *aq_hw_caps,
- 				 unsigned short device,
- 				 unsigned short subsystem_device)
- {
- 	memcpy(aq_hw_caps, &hw_atl_a0_hw_caps_, sizeof(*aq_hw_caps));
- 
+ #define DEFAULT_A0_BOARD_BASIC_CAPABILITIES \
+ 	.is_64_dma = true, \
+ 	.msix_irqs = 4U, \
+ 	.irq_mask = ~0U, \
+ 	.vecs = HW_ATL_A0_RSS_MAX, \
+ 	.tcs = HW_ATL_A0_TC_MAX, \
+ 	.rxd_alignment = 1U, \
+ 	.rxd_size = HW_ATL_A0_RXD_SIZE, \
+ 	.rxds = 248U, \
+ 	.txd_alignment = 1U, \
+ 	.txd_size = HW_ATL_A0_TXD_SIZE, \
+ 	.txds = 8U * 1024U, \
+ 	.txhwb_alignment = 4096U, \
+ 	.tx_rings = HW_ATL_A0_TX_RINGS, \
+ 	.rx_rings = HW_ATL_A0_RX_RINGS, \
+ 	.hw_features = NETIF_F_HW_CSUM | \
+ 			NETIF_F_RXHASH | \
+ 			NETIF_F_RXCSUM | \
+ 			NETIF_F_SG | \
+ 			NETIF_F_TSO, \
+ 	.hw_priv_flags = IFF_UNICAST_FLT, \
+ 	.flow_control = true, \
+ 	.mtu = HW_ATL_A0_MTU_JUMBO, \
+ 	.mac_regs_count = 88
+ 
++<<<<<<< HEAD
 +	if (device == HW_ATL_DEVICE_ID_D108 && subsystem_device == 0x0001)
 +		aq_hw_caps->link_speed_msk &= ~HW_ATL_A0_RATE_10G;
 +
 +	if (device == HW_ATL_DEVICE_ID_D109 && subsystem_device == 0x0001) {
 +		aq_hw_caps->link_speed_msk &= ~HW_ATL_A0_RATE_10G;
 +		aq_hw_caps->link_speed_msk &= ~HW_ATL_A0_RATE_5G;
 +	}
++=======
+ const struct aq_hw_caps_s hw_atl_a0_caps_aqc100 = {
+ 	DEFAULT_A0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_FIBRE,
+ 	.link_speed_msk = HW_ATL_A0_RATE_5G  |
+ 			  HW_ATL_A0_RATE_2G5 |
+ 			  HW_ATL_A0_RATE_1G  |
+ 			  HW_ATL_A0_RATE_100M,
+ };
+ 
+ const struct aq_hw_caps_s hw_atl_a0_caps_aqc107 = {
+ 	DEFAULT_A0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_TP,
+ 	.link_speed_msk = HW_ATL_A0_RATE_10G |
+ 			  HW_ATL_A0_RATE_5G  |
+ 			  HW_ATL_A0_RATE_2G5 |
+ 			  HW_ATL_A0_RATE_1G  |
+ 			  HW_ATL_A0_RATE_100M,
+ };
+ 
+ const struct aq_hw_caps_s hw_atl_a0_caps_aqc108 = {
+ 	DEFAULT_A0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_TP,
+ 	.link_speed_msk = HW_ATL_A0_RATE_5G  |
+ 			  HW_ATL_A0_RATE_2G5 |
+ 			  HW_ATL_A0_RATE_1G  |
+ 			  HW_ATL_A0_RATE_100M,
+ };
+ 
+ const struct aq_hw_caps_s hw_atl_a0_caps_aqc109 = {
+ 	DEFAULT_A0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_TP,
+ 	.link_speed_msk = HW_ATL_A0_RATE_2G5 |
+ 			  HW_ATL_A0_RATE_1G  |
+ 			  HW_ATL_A0_RATE_100M,
+ };
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  
- 	return 0;
- }
  
  static struct aq_hw_s *hw_atl_a0_create(struct aq_pci_func_s *aq_pci_func,
  					unsigned int port)
@@@ -902,17 -945,3 +954,20 @@@ const struct aq_hw_ops hw_atl_ops_a0 = 
  	.hw_get_hw_stats             = hw_atl_utils_get_hw_stats,
  	.hw_get_fw_version           = hw_atl_utils_get_fw_version,
  };
++<<<<<<< HEAD
 +
 +const struct aq_hw_ops *hw_atl_a0_get_ops_by_id(struct pci_dev *pdev)
 +{
 +	bool is_vid_ok = (pdev->vendor == PCI_VENDOR_ID_AQUANTIA);
 +	bool is_did_ok = ((pdev->device == HW_ATL_DEVICE_ID_0001) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D100) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D107) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D108) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D109));
 +
 +	bool is_rev_ok = (pdev->revision == 1U);
 +
 +	return (is_vid_ok && is_did_ok && is_rev_ok) ? &hw_atl_ops_ : NULL;
 +}
++=======
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.h
index 4fdd51b67097,25fe954def03..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.h
@@@ -16,19 -16,11 +16,28 @@@
  
  #include "../aq_common.h"
  
++<<<<<<< HEAD
 +#ifndef PCI_VENDOR_ID_AQUANTIA
 +
 +#define PCI_VENDOR_ID_AQUANTIA  0x1D6A
 +#define HW_ATL_DEVICE_ID_0001   0x0001
 +#define HW_ATL_DEVICE_ID_D100   0xD100
 +#define HW_ATL_DEVICE_ID_D107   0xD107
 +#define HW_ATL_DEVICE_ID_D108   0xD108
 +#define HW_ATL_DEVICE_ID_D109   0xD109
 +
 +#define HW_ATL_NIC_NAME "aQuantia AQtion 5Gbit Network Adapter"
 +
 +#endif
 +
 +const struct aq_hw_ops *hw_atl_a0_get_ops_by_id(struct pci_dev *pdev);
++=======
+ extern const struct aq_hw_caps_s hw_atl_a0_caps_aqc100;
+ extern const struct aq_hw_caps_s hw_atl_a0_caps_aqc107;
+ extern const struct aq_hw_caps_s hw_atl_a0_caps_aqc108;
+ extern const struct aq_hw_caps_s hw_atl_a0_caps_aqc109;
+ 
+ extern const struct aq_hw_ops hw_atl_ops_a0;
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  
  #endif /* HW_ATL_A0_H */
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
index 7a71330252bd,1d8855558d74..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
@@@ -88,38 -88,4 +88,41 @@@
  
  #define HW_ATL_A0_FW_VER_EXPECTED 0x01050006U
  
++<<<<<<< HEAD
 +/* HW layer capabilities */
 +static struct aq_hw_caps_s hw_atl_a0_hw_caps_ = {
 +	.ports = 1U,
 +	.is_64_dma = true,
 +	.msix_irqs = 4U,
 +	.irq_mask = ~0U,
 +	.vecs = HW_ATL_A0_RSS_MAX,
 +	.tcs = HW_ATL_A0_TC_MAX,
 +	.rxd_alignment = 1U,
 +	.rxd_size = HW_ATL_A0_RXD_SIZE,
 +	.rxds = 248U,
 +	.txd_alignment = 1U,
 +	.txd_size = HW_ATL_A0_TXD_SIZE,
 +	.txds = 8U * 1024U,
 +	.txhwb_alignment = 4096U,
 +	.tx_rings = HW_ATL_A0_TX_RINGS,
 +	.rx_rings = HW_ATL_A0_RX_RINGS,
 +	.hw_features = NETIF_F_HW_CSUM |
 +			NETIF_F_RXCSUM |
 +			NETIF_F_RXHASH |
 +			NETIF_F_SG |
 +			NETIF_F_TSO,
 +	.hw_priv_flags = IFF_UNICAST_FLT,
 +	.link_speed_msk = (HW_ATL_A0_RATE_10G |
 +			HW_ATL_A0_RATE_5G |
 +			HW_ATL_A0_RATE_2G5 |
 +			HW_ATL_A0_RATE_1G |
 +			HW_ATL_A0_RATE_100M),
 +	.flow_control = true,
 +	.mtu = HW_ATL_A0_MTU_JUMBO,
 +	.mac_regs_count = 88,
 +	.fw_ver_expected = HW_ATL_A0_FW_VER_EXPECTED,
 +};
 +
++=======
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  #endif /* HW_ATL_A0_INTERNAL_H */
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index 5e4035a987be,87e7d0f04ee8..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -18,23 -19,68 +18,78 @@@
  #include "hw_atl_b0_internal.h"
  #include "hw_atl_llh_internal.h"
  
- static int hw_atl_b0_get_hw_caps(struct aq_hw_s *self,
- 				 struct aq_hw_caps_s *aq_hw_caps,
- 				 unsigned short device,
- 				 unsigned short subsystem_device)
- {
- 	memcpy(aq_hw_caps, &hw_atl_b0_hw_caps_, sizeof(*aq_hw_caps));
- 
+ #define DEFAULT_B0_BOARD_BASIC_CAPABILITIES \
+ 	.is_64_dma = true,	\
+ 	.msix_irqs = 4U,	\
+ 	.irq_mask = ~0U,	\
+ 	.vecs = HW_ATL_B0_RSS_MAX,	\
+ 	.tcs = HW_ATL_B0_TC_MAX,	\
+ 	.rxd_alignment = 1U,		\
+ 	.rxd_size = HW_ATL_B0_RXD_SIZE, \
+ 	.rxds = 4U * 1024U,		\
+ 	.txd_alignment = 1U,		\
+ 	.txd_size = HW_ATL_B0_TXD_SIZE, \
+ 	.txds = 8U * 1024U,		\
+ 	.txhwb_alignment = 4096U,	\
+ 	.tx_rings = HW_ATL_B0_TX_RINGS, \
+ 	.rx_rings = HW_ATL_B0_RX_RINGS, \
+ 	.hw_features = NETIF_F_HW_CSUM | \
+ 			NETIF_F_RXCSUM | \
+ 			NETIF_F_RXHASH | \
+ 			NETIF_F_SG |  \
+ 			NETIF_F_TSO | \
+ 			NETIF_F_LRO,  \
+ 	.hw_priv_flags = IFF_UNICAST_FLT,   \
+ 	.flow_control = true,		\
+ 	.mtu = HW_ATL_B0_MTU_JUMBO,	\
+ 	.mac_regs_count = 88
+ 
++<<<<<<< HEAD
 +	if (device == HW_ATL_DEVICE_ID_D108 && subsystem_device == 0x0001)
 +		aq_hw_caps->link_speed_msk &= ~HW_ATL_B0_RATE_10G;
 +
 +	if (device == HW_ATL_DEVICE_ID_D109 && subsystem_device == 0x0001) {
 +		aq_hw_caps->link_speed_msk &= ~HW_ATL_B0_RATE_10G;
 +		aq_hw_caps->link_speed_msk &= ~HW_ATL_B0_RATE_5G;
 +	}
++=======
+ const struct aq_hw_caps_s hw_atl_b0_caps_aqc100 = {
+ 	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_FIBRE,
+ 	.link_speed_msk = HW_ATL_B0_RATE_10G |
+ 			  HW_ATL_B0_RATE_5G  |
+ 			  HW_ATL_B0_RATE_2G5 |
+ 			  HW_ATL_B0_RATE_1G  |
+ 			  HW_ATL_B0_RATE_100M,
+ };
  
- 	return 0;
- }
+ const struct aq_hw_caps_s hw_atl_b0_caps_aqc107 = {
+ 	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_TP,
+ 	.link_speed_msk = HW_ATL_B0_RATE_10G |
+ 			  HW_ATL_B0_RATE_5G  |
+ 			  HW_ATL_B0_RATE_2G5 |
+ 			  HW_ATL_B0_RATE_1G  |
+ 			  HW_ATL_B0_RATE_100M,
+ };
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
+ 
+ const struct aq_hw_caps_s hw_atl_b0_caps_aqc108 = {
+ 	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_TP,
+ 	.link_speed_msk = HW_ATL_B0_RATE_5G  |
+ 			  HW_ATL_B0_RATE_2G5 |
+ 			  HW_ATL_B0_RATE_1G  |
+ 			  HW_ATL_B0_RATE_100M,
+ };
+ 
+ const struct aq_hw_caps_s hw_atl_b0_caps_aqc109 = {
+ 	DEFAULT_B0_BOARD_BASIC_CAPABILITIES,
+ 	.media_type = AQ_HW_MEDIA_TYPE_TP,
+ 	.link_speed_msk = HW_ATL_B0_RATE_2G5 |
+ 			  HW_ATL_B0_RATE_1G  |
+ 			  HW_ATL_B0_RATE_100M,
+ };
  
  static struct aq_hw_s *hw_atl_b0_create(struct aq_pci_func_s *aq_pci_func,
  					unsigned int port)
@@@ -976,17 -1020,3 +1029,20 @@@ const struct aq_hw_ops hw_atl_ops_b0 = 
  	.hw_get_hw_stats             = hw_atl_utils_get_hw_stats,
  	.hw_get_fw_version           = hw_atl_utils_get_fw_version,
  };
++<<<<<<< HEAD
 +
 +const struct aq_hw_ops *hw_atl_b0_get_ops_by_id(struct pci_dev *pdev)
 +{
 +	bool is_vid_ok = (pdev->vendor == PCI_VENDOR_ID_AQUANTIA);
 +	bool is_did_ok = ((pdev->device == HW_ATL_DEVICE_ID_0001) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D100) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D107) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D108) ||
 +			(pdev->device == HW_ATL_DEVICE_ID_D109));
 +
 +	bool is_rev_ok = (pdev->revision == 2U);
 +
 +	return (is_vid_ok && is_did_ok && is_rev_ok) ? &hw_atl_ops_ : NULL;
 +}
++=======
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
index 3e10969c1df5,2cc8dacfdc27..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
@@@ -16,19 -16,27 +16,44 @@@
  
  #include "../aq_common.h"
  
++<<<<<<< HEAD
 +#ifndef PCI_VENDOR_ID_AQUANTIA
 +
 +#define PCI_VENDOR_ID_AQUANTIA  0x1D6A
 +#define HW_ATL_DEVICE_ID_0001   0x0001
 +#define HW_ATL_DEVICE_ID_D100   0xD100
 +#define HW_ATL_DEVICE_ID_D107   0xD107
 +#define HW_ATL_DEVICE_ID_D108   0xD108
 +#define HW_ATL_DEVICE_ID_D109   0xD109
 +
 +#define HW_ATL_NIC_NAME "aQuantia AQtion 5Gbit Network Adapter"
 +
 +#endif
 +
 +const struct aq_hw_ops *hw_atl_b0_get_ops_by_id(struct pci_dev *pdev);
++=======
+ extern const struct aq_hw_caps_s hw_atl_b0_caps_aqc100;
+ extern const struct aq_hw_caps_s hw_atl_b0_caps_aqc107;
+ extern const struct aq_hw_caps_s hw_atl_b0_caps_aqc108;
+ extern const struct aq_hw_caps_s hw_atl_b0_caps_aqc109;
+ 
+ #define hw_atl_b0_caps_aqc111 hw_atl_b0_caps_aqc108
+ #define hw_atl_b0_caps_aqc112 hw_atl_b0_caps_aqc109
+ 
+ #define hw_atl_b0_caps_aqc100s hw_atl_b0_caps_aqc100
+ #define hw_atl_b0_caps_aqc107s hw_atl_b0_caps_aqc107
+ #define hw_atl_b0_caps_aqc108s hw_atl_b0_caps_aqc108
+ #define hw_atl_b0_caps_aqc109s hw_atl_b0_caps_aqc109
+ 
+ #define hw_atl_b0_caps_aqc111s hw_atl_b0_caps_aqc108
+ #define hw_atl_b0_caps_aqc112s hw_atl_b0_caps_aqc109
+ 
+ #define hw_atl_b0_caps_aqc111e hw_atl_b0_caps_aqc108
+ #define hw_atl_b0_caps_aqc112e hw_atl_b0_caps_aqc109
+ 
+ extern const struct aq_hw_ops hw_atl_ops_b0;
+ 
+ #define hw_atl_ops_b1 hw_atl_ops_b0
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  
  #endif /* HW_ATL_B0_H */
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
index 740ff73c6d67,405d1455c222..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
@@@ -143,38 -143,5 +143,41 @@@
  #define HW_ATL_INTR_MODER_MIN  0xFF
  
  /* HW layer capabilities */
++<<<<<<< HEAD
 +static struct aq_hw_caps_s hw_atl_b0_hw_caps_ = {
 +	.ports = 1U,
 +	.is_64_dma = true,
 +	.msix_irqs = 4U,
 +	.irq_mask = ~0U,
 +	.vecs = HW_ATL_B0_RSS_MAX,
 +	.tcs = HW_ATL_B0_TC_MAX,
 +	.rxd_alignment = 1U,
 +	.rxd_size = HW_ATL_B0_RXD_SIZE,
 +	.rxds = 8U * 1024U,
 +	.txd_alignment = 1U,
 +	.txd_size = HW_ATL_B0_TXD_SIZE,
 +	.txds = 8U * 1024U,
 +	.txhwb_alignment = 4096U,
 +	.tx_rings = HW_ATL_B0_TX_RINGS,
 +	.rx_rings = HW_ATL_B0_RX_RINGS,
 +	.hw_features = NETIF_F_HW_CSUM |
 +			NETIF_F_RXCSUM |
 +			NETIF_F_RXHASH |
 +			NETIF_F_SG |
 +			NETIF_F_TSO |
 +			NETIF_F_LRO,
 +	.hw_priv_flags = IFF_UNICAST_FLT,
 +	.link_speed_msk = (HW_ATL_B0_RATE_10G |
 +			HW_ATL_B0_RATE_5G |
 +			HW_ATL_B0_RATE_2G5 |
 +			HW_ATL_B0_RATE_1G |
 +			HW_ATL_B0_RATE_100M),
 +	.flow_control = true,
 +	.mtu = HW_ATL_B0_MTU_JUMBO,
 +	.mac_regs_count = 88,
 +	.fw_ver_expected = HW_ATL_B0_FW_VER_EXPECTED,
 +};
++=======
++>>>>>>> 4948293ff963 (net: aquantia: Introduce new AQC devices and capabilities)
  
  #endif /* HW_ATL_B0_INTERNAL_H */
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_common.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_hw.h
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index 30b3edb5d728..215592bbc493 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@ -215,7 +215,8 @@ struct aq_nic_s *aq_nic_alloc_cold(const struct net_device_ops *ndev_ops,
 				   struct pci_dev *pdev,
 				   struct aq_pci_func_s *aq_pci_func,
 				   unsigned int port,
-				   const struct aq_hw_ops *aq_hw_ops)
+				   const struct aq_hw_ops *aq_hw_ops,
+				   const struct aq_hw_caps_s *aq_hw_caps)
 {
 	struct net_device *ndev = NULL;
 	struct aq_nic_s *self = NULL;
@@ -240,16 +241,12 @@ struct aq_nic_s *aq_nic_alloc_cold(const struct net_device_ops *ndev_ops,
 	self->aq_pci_func = aq_pci_func;
 
 	self->aq_hw_ops = *aq_hw_ops;
+	self->aq_hw_caps = *aq_hw_caps;
 	self->port = (u8)port;
 
 	self->aq_hw = self->aq_hw_ops.create(aq_pci_func, self->port);
 	self->aq_hw->aq_nic_cfg = &self->aq_nic_cfg;
 
-	err = self->aq_hw_ops.get_hw_caps(self->aq_hw, &self->aq_hw_caps,
-					  pdev->device, pdev->subsystem_device);
-	if (err < 0)
-		goto err_exit;
-
 	aq_nic_cfg_init_defaults(self);
 
 err_exit:
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_nic.h b/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
index 715b53c689ef..02600446ccd9 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
@@ -75,7 +75,8 @@ struct aq_nic_s *aq_nic_alloc_cold(const struct net_device_ops *ndev_ops,
 				   struct pci_dev *pdev,
 				   struct aq_pci_func_s *aq_pci_func,
 				   unsigned int port,
-				   const struct aq_hw_ops *aq_hw_ops);
+				   const struct aq_hw_ops *aq_hw_ops,
+				   const struct aq_hw_caps_s *aq_hw_caps);
 int aq_nic_ndev_init(struct aq_nic_s *self);
 struct aq_nic_s *aq_nic_alloc_hot(struct net_device *ndev);
 void aq_nic_set_tx_ring(struct aq_nic_s *self, unsigned int idx,
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_pci_func.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_pci_func.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0_internal.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0_internal.h
