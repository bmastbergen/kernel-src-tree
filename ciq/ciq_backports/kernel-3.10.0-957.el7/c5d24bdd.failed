hv_netvsc: Add range checking for rx packet offset and length

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Haiyang Zhang <haiyangz@microsoft.com>
commit c5d24bdd29cc6373331967b5034da21c12805f72
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c5d24bdd.failed

This patch adds range checking for rx packet offset and length.
It may only happen if there is a host side bug.

	Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c5d24bdd29cc6373331967b5034da21c12805f72)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index 1741fecf234a,c9910c33e671..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -1110,11 -1097,24 +1112,27 @@@ static int netvsc_receive(struct net_de
  
  	/* Each range represents 1 RNDIS pkt that contains 1 ethernet frame */
  	for (i = 0; i < count; i++) {
- 		void *data = recv_buf
- 			+ vmxferpage_packet->ranges[i].byte_offset;
+ 		u32 offset = vmxferpage_packet->ranges[i].byte_offset;
  		u32 buflen = vmxferpage_packet->ranges[i].byte_count;
+ 		void *data;
  		int ret;
  
++<<<<<<< HEAD
++=======
+ 		if (unlikely(offset + buflen > net_device->recv_buf_size)) {
+ 			status = NVSP_STAT_FAIL;
+ 			netif_err(net_device_ctx, rx_err, ndev,
+ 				  "Packet offset:%u + len:%u too big\n",
+ 				  offset, buflen);
+ 
+ 			continue;
+ 		}
+ 
+ 		data = recv_buf + offset;
+ 
+ 		trace_rndis_recv(ndev, q_idx, data);
+ 
++>>>>>>> c5d24bdd29cc (hv_netvsc: Add range checking for rx packet offset and length)
  		/* Pass it to the upper layer */
  		ret = rndis_filter_receive(ndev, net_device,
  					   channel, data, buflen);
diff --git a/drivers/net/hyperv/hyperv_net.h b/drivers/net/hyperv/hyperv_net.h
index b2bc53d51990..65aa44a31dcd 100644
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@ -795,6 +795,7 @@ struct netvsc_device {
 
 	/* Receive buffer allocated by us but manages by NetVSP */
 	void *recv_buf;
+	u32 recv_buf_size; /* allocated bytes */
 	u32 recv_buf_gpadl_handle;
 	u32 recv_section_cnt;
 	u32 recv_section_size;
* Unmerged path drivers/net/hyperv/netvsc.c
