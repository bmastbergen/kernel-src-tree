init.h: Update initcall_sync variants to fix build errors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Tony Lindgren <tony@atomide.com>
commit 451ef1caa8698511bb7766344ccec9f08d5d294b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/451ef1ca.failed

We are getting randconfig build errors on device drivers with
tristate Kconfig option if they are using custom initcall
levels. Rather than add ifdeffery into the drivers, let's add
the missing initcall_sync variants.

As the comment in init.h has kept people from updating the
list of initcalls that can be just module_init when the driver
is loaded as a loadable module, let's also update the comment
a bit to describe valid use cases custom initcall levels.

While most drivers should nowadays use just regular module_init
because of the deferred probe, we do have quite a few custom
initcall levels left that we cannot remove until tested properly.

There are also still few valid cases where a custom initcall
level might make sense that I'm aware of.

For example a bus snooping driver can provide information about
invalid bus access and is handy loader early when built in. But
there's no hard dependency to have it necessarily built in and
a loadable module is a valid option.

Another example is a driver implementing a Linux framework like
pinctrl framework. That driver may be needed early on some
platforms because of legacy reasons, while it can be just a
regular module_init on most platforms.

	Signed-off-by: Tony Lindgren <tony@atomide.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 451ef1caa8698511bb7766344ccec9f08d5d294b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/init.h
diff --cc include/linux/init.h
index f1c27a71d03c,2df8e8dd10a4..000000000000
--- a/include/linux/init.h
+++ b/include/linux/init.h
@@@ -281,16 -297,30 +281,32 @@@ void __init parse_early_options(char *c
  
  #else /* MODULE */
  
- /* Don't use these in loadable modules, but some people do... */
+ /*
+  * In most cases loadable modules do not need custom
+  * initcall levels. There are still some valid cases where
+  * a driver may be needed early if built in, and does not
+  * matter when built as a loadable module. Like bus
+  * snooping debug drivers.
+  */
  #define early_initcall(fn)		module_init(fn)
  #define core_initcall(fn)		module_init(fn)
+ #define core_initcall_sync(fn)		module_init(fn)
  #define postcore_initcall(fn)		module_init(fn)
+ #define postcore_initcall_sync(fn)	module_init(fn)
  #define arch_initcall(fn)		module_init(fn)
  #define subsys_initcall(fn)		module_init(fn)
+ #define subsys_initcall_sync(fn)	module_init(fn)
  #define fs_initcall(fn)			module_init(fn)
++<<<<<<< HEAD
++=======
+ #define fs_initcall_sync(fn)		module_init(fn)
+ #define rootfs_initcall(fn)		module_init(fn)
++>>>>>>> 451ef1caa869 (init.h: Update initcall_sync variants to fix build errors)
  #define device_initcall(fn)		module_init(fn)
+ #define device_initcall_sync(fn)	module_init(fn)
  #define late_initcall(fn)		module_init(fn)
+ #define late_initcall_sync(fn)		module_init(fn)
  
 -#define console_initcall(fn)		module_init(fn)
  #define security_initcall(fn)		module_init(fn)
  
  /* Each module must use one module_init(). */
* Unmerged path include/linux/init.h
