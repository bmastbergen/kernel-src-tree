net: aquantia: Introduce firmware ops callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] aquantia: Introduce firmware ops callbacks (David Arcari) [1546765]
Rebuild_FUZZ: 94.38%
commit-author Igor Russkikh <igor.russkikh@aquantia.com>
commit 0c58c35f02c2e99bb10137b32e8ec96dcbdcc705
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0c58c35f.failed

New AQC cards will have an updated firmware with new binary interface.
This patch extracts firmware specific operations into a separate table
and prepares for the introduction of new fw 2.x and 3.x

	Signed-off-by: Igor Russkikh <igor.russkikh@aquantia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0c58c35f02c2e99bb10137b32e8ec96dcbdcc705)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_hw.h
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.c
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.h
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
#	drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_hw.h
index cdd1acd417c2,33a7c14c3bc6..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_hw.h
@@@ -90,9 -92,18 +90,13 @@@ struct aq_stats_s 
  struct aq_hw_s {
  	atomic_t flags;
  	struct aq_nic_cfg_s *aq_nic_cfg;
++<<<<<<< HEAD
 +	struct aq_pci_func_s *aq_pci_func;
++=======
+ 	const struct aq_fw_ops *aq_fw_ops;
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  	void __iomem *mmio;
 +	unsigned int not_ff_addr;
  	struct aq_hw_link_status_s aq_link_status;
  	struct hw_aq_atl_utils_mbox mbox;
  	struct hw_atl_stats_s last_stats;
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index 30b3edb5d728,3087a3044bb3..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@@ -136,7 -122,7 +136,11 @@@ int aq_nic_cfg_start(struct aq_nic_s *s
  
  static int aq_nic_update_link_status(struct aq_nic_s *self)
  {
++<<<<<<< HEAD
 +	int err = self->aq_hw_ops.hw_get_link_status(self->aq_hw);
++=======
+ 	int err = self->aq_fw_ops->update_link_status(self->aq_hw);
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  
  	if (err)
  		return err;
@@@ -178,8 -164,8 +182,13 @@@ static void aq_nic_service_timer_cb(uns
  	if (err)
  		goto err_exit;
  
++<<<<<<< HEAD
 +	if (self->aq_hw_ops.hw_update_stats)
 +		self->aq_hw_ops.hw_update_stats(self->aq_hw);
++=======
+ 	if (self->aq_fw_ops->update_stats)
+ 		self->aq_fw_ops->update_stats(self->aq_hw);
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  
  	aq_nic_update_ndev_stats(self);
  
@@@ -268,9 -199,14 +277,18 @@@ int aq_nic_ndev_register(struct aq_nic_
  		err = -EINVAL;
  		goto err_exit;
  	}
++<<<<<<< HEAD
 +	err = self->aq_hw_ops.hw_get_mac_permanent(self->aq_hw,
++=======
+ 
+ 	err = hw_atl_utils_initfw(self->aq_hw, &self->aq_fw_ops);
+ 	if (err)
+ 		goto err_exit;
+ 
+ 	err = self->aq_fw_ops->get_mac_permanent(self->aq_hw,
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  			    self->ndev->dev_addr);
 -	if (err)
 +	if (err < 0)
  		goto err_exit;
  
  #if defined(AQ_CFG_MAC_ADDR_PERMANENT)
@@@ -918,7 -803,7 +936,11 @@@ int aq_nic_set_link_ksettings(struct aq
  		self->aq_nic_cfg.is_autoneg = false;
  	}
  
++<<<<<<< HEAD
 +	err = self->aq_hw_ops.hw_set_link_speed(self->aq_hw, rate);
++=======
+ 	err = self->aq_fw_ops->set_link_speed(self->aq_hw, rate);
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  	if (err < 0)
  		goto err_exit;
  
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.h
index 715b53c689ef,d16b0f1a95aa..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.h
@@@ -70,13 -57,37 +70,47 @@@ struct aq_nic_cfg_s 
  #define AQ_NIC_TCVEC2RING(_NIC_, _TC_, _VEC_) \
  	((_TC_) * AQ_CFG_TCS_MAX + (_VEC_))
  
++<<<<<<< HEAD
 +struct aq_nic_s *aq_nic_alloc_cold(const struct net_device_ops *ndev_ops,
 +				   const struct ethtool_ops *et_ops,
 +				   struct pci_dev *pdev,
 +				   struct aq_pci_func_s *aq_pci_func,
 +				   unsigned int port,
 +				   const struct aq_hw_ops *aq_hw_ops);
 +int aq_nic_ndev_init(struct aq_nic_s *self);
++=======
+ struct aq_nic_s {
+ 	atomic_t flags;
+ 	struct aq_vec_s *aq_vec[AQ_CFG_VECS_MAX];
+ 	struct aq_ring_s *aq_ring_tx[AQ_CFG_VECS_MAX * AQ_CFG_TCS_MAX];
+ 	struct aq_hw_s *aq_hw;
+ 	struct net_device *ndev;
+ 	unsigned int aq_vecs;
+ 	unsigned int packet_filter;
+ 	unsigned int power_state;
+ 	u8 port;
+ 	const struct aq_hw_ops *aq_hw_ops;
+ 	const struct aq_fw_ops *aq_fw_ops;
+ 	struct aq_nic_cfg_s aq_nic_cfg;
+ 	struct timer_list service_timer;
+ 	struct timer_list polling_timer;
+ 	struct aq_hw_link_status_s link_status;
+ 	struct {
+ 		u32 count;
+ 		u8 ar[AQ_CFG_MULTICAST_ADDRESS_MAX][ETH_ALEN];
+ 	} mc_list;
+ 
+ 	struct pci_dev *pdev;
+ 	unsigned int msix_entry_mask;
+ };
+ 
+ static inline struct device *aq_nic_get_dev(struct aq_nic_s *self)
+ {
+ 	return self->ndev->dev.parent;
+ }
+ 
+ void aq_nic_ndev_init(struct aq_nic_s *self);
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  struct aq_nic_s *aq_nic_alloc_hot(struct net_device *ndev);
  void aq_nic_set_tx_ring(struct aq_nic_s *self, unsigned int idx,
  			struct aq_ring_s *ring);
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
index 773434b96bb0,67e2f9fb9402..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
@@@ -848,27 -872,8 +849,29 @@@ static int hw_atl_a0_hw_ring_rx_stop(st
  	return aq_hw_err_from_flags(self);
  }
  
++<<<<<<< HEAD
 +static int hw_atl_a0_hw_set_speed(struct aq_hw_s *self, u32 speed)
 +{
 +	int err = 0;
 +
 +	err = hw_atl_utils_mpi_set_speed(self, speed, MPI_INIT);
 +	if (err < 0)
 +		goto err_exit;
 +
 +err_exit:
 +	return err;
 +}
 +
 +static const struct aq_hw_ops hw_atl_ops_ = {
 +	.create               = hw_atl_a0_create,
 +	.destroy              = hw_atl_a0_destroy,
 +	.get_hw_caps          = hw_atl_a0_get_hw_caps,
 +
 +	.hw_get_mac_permanent = hw_atl_utils_get_mac_permanent,
++=======
+ const struct aq_hw_ops hw_atl_ops_a0 = {
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  	.hw_set_mac_address   = hw_atl_a0_hw_mac_addr_set,
- 	.hw_get_link_status   = hw_atl_utils_mpi_get_link_status,
- 	.hw_set_link_speed    = hw_atl_a0_hw_set_speed,
  	.hw_init              = hw_atl_a0_hw_init,
  	.hw_deinit            = hw_atl_utils_hw_deinit,
  	.hw_set_power         = hw_atl_utils_hw_set_power,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
index 5e4035a987be,29abbc2588c6..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
@@@ -922,27 -948,8 +923,29 @@@ static int hw_atl_b0_hw_ring_rx_stop(st
  	return aq_hw_err_from_flags(self);
  }
  
++<<<<<<< HEAD
 +static int hw_atl_b0_hw_set_speed(struct aq_hw_s *self, u32 speed)
 +{
 +	int err = 0;
 +
 +	err = hw_atl_utils_mpi_set_speed(self, speed, MPI_INIT);
 +	if (err < 0)
 +		goto err_exit;
 +
 +err_exit:
 +	return err;
 +}
 +
 +static const struct aq_hw_ops hw_atl_ops_ = {
 +	.create               = hw_atl_b0_create,
 +	.destroy              = hw_atl_b0_destroy,
 +	.get_hw_caps          = hw_atl_b0_get_hw_caps,
 +
 +	.hw_get_mac_permanent = hw_atl_utils_get_mac_permanent,
++=======
+ const struct aq_hw_ops hw_atl_ops_b0 = {
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  	.hw_set_mac_address   = hw_atl_b0_hw_mac_addr_set,
- 	.hw_get_link_status   = hw_atl_utils_mpi_get_link_status,
- 	.hw_set_link_speed    = hw_atl_b0_hw_set_speed,
  	.hw_init              = hw_atl_b0_hw_init,
  	.hw_deinit            = hw_atl_utils_hw_deinit,
  	.hw_set_power         = hw_atl_utils_hw_set_power,
diff --cc drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
index 9c7e9161b4db,616475ea5b2f..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
@@@ -369,15 -398,6 +398,18 @@@ int hw_atl_utils_get_mac_permanent(stru
  	u32 l = 0U;
  	u32 mac_addr[2];
  
++<<<<<<< HEAD
 +	self->mmio = aq_pci_func_get_mmio(self->aq_pci_func);
 +
 +	hw_atl_utils_hw_chip_features_init(self,
 +					   &self->chip_features);
 +
 +	err = hw_atl_utils_mpi_create(self);
 +	if (err < 0)
 +		goto err_exit;
 +
++=======
++>>>>>>> 0c58c35f02c2 (net: aquantia: Introduce firmware ops callbacks)
  	if (!aq_hw_read_reg(self, HW_ATL_UCP_0X370_REG)) {
  		unsigned int rnd = 0;
  		unsigned int ucp_0x370 = 0;
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_hw.h
diff --git a/drivers/net/ethernet/aquantia/atlantic/aq_hw_utils.h b/drivers/net/ethernet/aquantia/atlantic/aq_hw_utils.h
index 03b72ddbffb9..dc88a1221f1d 100644
--- a/drivers/net/ethernet/aquantia/atlantic/aq_hw_utils.h
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_hw_utils.h
@@ -35,6 +35,9 @@ do { \
 	} \
 } while (0)
 
+#define aq_pr_err(...) pr_err(AQ_CFG_DRV_NAME ": " __VA_ARGS__)
+#define aq_pr_trace(...) pr_info(AQ_CFG_DRV_NAME ": " __VA_ARGS__)
+
 struct aq_hw_s;
 
 void aq_hw_write_reg_bit(struct aq_hw_s *aq_hw, u32 addr, u32 msk,
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.h
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_a0.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_b0.c
* Unmerged path drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.c
diff --git a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
index 40e2319c65d5..d6d05e5eb939 100644
--- a/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
+++ b/drivers/net/ethernet/aquantia/atlantic/hw_atl/hw_atl_utils.h
@@ -181,9 +181,14 @@ enum hal_atl_utils_fw_state_e {
 #define HAL_ATLANTIC_RATE_INVALID    BIT(6)
 
 struct aq_hw_s;
+struct aq_fw_ops;
 struct aq_hw_caps_s;
 struct aq_hw_link_status_s;
 
+int hw_atl_utils_initfw(struct aq_hw_s *self, const struct aq_fw_ops **fw_ops);
+
+int hw_atl_utils_soft_reset(struct aq_hw_s *self);
+
 void hw_atl_utils_hw_chip_features_init(struct aq_hw_s *self, u32 *p);
 
 int hw_atl_utils_mpi_read_mbox(struct aq_hw_s *self,
@@ -196,9 +201,6 @@ void hw_atl_utils_mpi_set(struct aq_hw_s *self,
 			  enum hal_atl_utils_fw_state_e state,
 			  u32 speed);
 
-int hw_atl_utils_mpi_set_speed(struct aq_hw_s *self, u32 speed,
-			       enum hal_atl_utils_fw_state_e state);
-
 int hw_atl_utils_mpi_get_link_status(struct aq_hw_s *self);
 
 int hw_atl_utils_get_mac_permanent(struct aq_hw_s *self,
@@ -221,4 +223,6 @@ int hw_atl_utils_update_stats(struct aq_hw_s *self);
 
 struct aq_stats_s *hw_atl_utils_get_hw_stats(struct aq_hw_s *self);
 
+extern const struct aq_fw_ops aq_fw_1x_ops;
+
 #endif /* HW_ATL_UTILS_H */
