bpf, nfp: add meta data support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 65d88fd0baaa5c9def9383ac696097911d4ceb73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/65d88fd0.failed

Implement support for transferring XDP meta data into skb for
nfp driver; before calling into the program, xdp.data_meta points
to xdp.data, where on program return with pass verdict, we call
into skb_metadata_set().

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: John Fastabend <john.fastabend@gmail.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 65d88fd0baaa5c9def9383ac696097911d4ceb73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index c5fdb9ca07be,d2f73feb8497..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -1592,27 -1574,6 +1592,30 @@@ nfp_net_tx_xdp_buf(struct nfp_net_dp *d
  	return true;
  }
  
++<<<<<<< HEAD
 +static int nfp_net_run_xdp(struct bpf_prog *prog, void *data, void *hard_start,
 +			   unsigned int *off, unsigned int *len)
 +{
 +	struct xdp_buff xdp;
 +	void *orig_data;
 +	int ret;
 +
 +	xdp.data_hard_start = hard_start;
 +	xdp.data = data + *off;
 +	xdp.data_end = data + *off + *len;
 +
 +	orig_data = xdp.data;
 +	ret = bpf_prog_run_xdp(prog, &xdp);
 +
 +	*len -= xdp.data - orig_data;
 +	*off += xdp.data - orig_data;
 +
 +	return ret;
 +}
 +#endif
 +
++=======
++>>>>>>> 65d88fd0baaa (bpf, nfp: add meta data support)
  /**
   * nfp_net_rx() - receive up to @budget packets on @rx_ring
   * @rx_ring:   RX ring to receive from
@@@ -1724,19 -1686,26 +1728,27 @@@ static int nfp_net_rx(struct nfp_net_rx
  			}
  		}
  
 +#if 0 /* Not in RHEL7 */
  		if (xdp_prog && !(rxd->rxd.flags & PCIE_DESC_RX_BPF &&
  				  dp->bpf_offload_xdp) && !meta.portid) {
+ 			void *orig_data = rxbuf->frag + pkt_off;
  			unsigned int dma_off;
- 			void *hard_start;
+ 			struct xdp_buff xdp;
  			int act;
  
- 			hard_start = rxbuf->frag + NFP_NET_RX_BUF_HEADROOM;
+ 			xdp.data_hard_start = rxbuf->frag + NFP_NET_RX_BUF_HEADROOM;
+ 			xdp.data = orig_data;
+ 			xdp.data_meta = orig_data;
+ 			xdp.data_end = orig_data + pkt_len;
+ 
+ 			act = bpf_prog_run_xdp(xdp_prog, &xdp);
+ 
+ 			pkt_len -= xdp.data - orig_data;
+ 			pkt_off += xdp.data - orig_data;
  
- 			act = nfp_net_run_xdp(xdp_prog, rxbuf->frag, hard_start,
- 					      &pkt_off, &pkt_len);
  			switch (act) {
  			case XDP_PASS:
+ 				meta_len_xdp = xdp.data - xdp.data_meta;
  				break;
  			case XDP_TX:
  				dma_off = pkt_off - NFP_NET_RX_BUF_HEADROOM;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
