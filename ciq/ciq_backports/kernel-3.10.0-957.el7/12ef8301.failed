xfs: don't rely on ->total in xfs_alloc_space_available

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 12ef830198b0d71668eb9b59f9ba69d32951a48a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/12ef8301.failed

->total is a bit of an odd parameter passed down to the low-level
allocator all the way from the high-level callers.  It's supposed to
contain the maximum number of blocks to be allocated for the whole
transaction [1].

But in xfs_iomap_write_allocate we only convert existing delayed
allocations and thus only have a minimal block reservation for the
current transaction, so xfs_alloc_space_available can't use it for
the allocation decisions.  Use the maximum of args->total and the
calculated block requirement to make a decision.  We probably should
get rid of args->total eventually and instead apply ->minleft more
broadly, but that will require some extensive changes all over.

[1] which creates lots of confusion as most callers don't decrement it
once doing a first allocation.  But that's for a separate series.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Brian Foster <bfoster@redhat.com>
	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
(cherry picked from commit 12ef830198b0d71668eb9b59f9ba69d32951a48a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_alloc.c
diff --cc fs/xfs/libxfs/xfs_alloc.c
index ce410a9100dc,9f06a211e157..000000000000
--- a/fs/xfs/libxfs/xfs_alloc.c
+++ b/fs/xfs/libxfs/xfs_alloc.c
@@@ -1894,23 -1995,38 +1894,40 @@@ xfs_alloc_space_available
  	int			flags)
  {
  	struct xfs_perag	*pag = args->pag;
++<<<<<<< HEAD
 +	xfs_extlen_t		longest;
++=======
+ 	xfs_extlen_t		alloc_len, longest;
+ 	xfs_extlen_t		reservation; /* blocks that are still reserved */
++>>>>>>> 12ef830198b0 (xfs: don't rely on ->total in xfs_alloc_space_available)
  	int			available;
  
  	if (flags & XFS_ALLOC_FLAG_FREEING)
  		return true;
  
 -	reservation = xfs_ag_resv_needed(pag, args->resv);
 -
  	/* do we have enough contiguous free space for the allocation? */
++<<<<<<< HEAD
 +	longest = xfs_alloc_longest_free_extent(args->mp, pag, min_free);
 +	if ((args->minlen + args->alignment + args->minalignslop - 1) > longest)
++=======
+ 	alloc_len = args->minlen + (args->alignment - 1) + args->minalignslop;
+ 	longest = xfs_alloc_longest_free_extent(args->mp, pag, min_free,
+ 			reservation);
+ 	if (longest < alloc_len)
++>>>>>>> 12ef830198b0 (xfs: don't rely on ->total in xfs_alloc_space_available)
  		return false;
  
 -	/* do we have enough free space remaining for the allocation? */
 +	/* do have enough free space remaining for the allocation? */
  	available = (int)(pag->pagf_freeblks + pag->pagf_flcount -
++<<<<<<< HEAD
 +			  min_free - args->total);
 +	if (available < (int)args->minleft)
++=======
+ 			  reservation - min_free - args->minleft);
+ 	if (available < (int)max(args->total, alloc_len))
++>>>>>>> 12ef830198b0 (xfs: don't rely on ->total in xfs_alloc_space_available)
  		return false;
  
 -	/*
 -	 * Clamp maxlen to the amount of free space available for the actual
 -	 * extent allocation.
 -	 */
 -	if (available < (int)args->maxlen && !(flags & XFS_ALLOC_FLAG_CHECK)) {
 -		args->maxlen = available;
 -		ASSERT(args->maxlen > 0);
 -		ASSERT(args->maxlen >= args->minlen);
 -	}
 -
  	return true;
  }
  
* Unmerged path fs/xfs/libxfs/xfs_alloc.c
