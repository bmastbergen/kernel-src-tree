mlxsw: spectrum: Pass mlxsw_core as arg of mlxsw_sp_kvdl_resources_register()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jiri Pirko <jiri@mellanox.com>
commit 88d2fbcda145f5b256a254635c7420a2a645eca0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/88d2fbcd.failed

Pass struct mlxsw_core instead of devlink since it is nicer within mlxsw
code and we need both structs in mlxsw_sp_kvdl_resources_register()
anyway.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 88d2fbcda145f5b256a254635c7420a2a645eca0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.h
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index ab811b87bcd2,53fffd09d133..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -3762,6 -3892,10 +3762,13 @@@ static int mlxsw_sp_resources_register(
  	if (err)
  		return err;
  
++<<<<<<< HEAD
++=======
+ 	err = mlxsw_sp_kvdl_resources_register(mlxsw_core);
+ 	if  (err)
+ 		return err;
+ 
++>>>>>>> 88d2fbcda145 (mlxsw: spectrum: Pass mlxsw_core as arg of mlxsw_sp_kvdl_resources_register())
  	double_size = kvd_size - linear_size;
  	double_size *= profile->kvd_hash_double_parts;
  	double_size /= profile->kvd_hash_double_parts +
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.h
index 5db9962d6794,c4d47e456737..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@@ -440,6 -437,13 +440,14 @@@ void mlxsw_sp_rif_destroy(struct mlxsw_
  int mlxsw_sp_kvdl_alloc(struct mlxsw_sp *mlxsw_sp, unsigned int entry_count,
  			u32 *p_entry_index);
  void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp, int entry_index);
++<<<<<<< HEAD
++=======
+ int mlxsw_sp_kvdl_alloc_size_query(struct mlxsw_sp *mlxsw_sp,
+ 				   unsigned int entry_count,
+ 				   unsigned int *p_alloc_size);
+ u64 mlxsw_sp_kvdl_occ_get(const struct mlxsw_sp *mlxsw_sp);
+ int mlxsw_sp_kvdl_resources_register(struct mlxsw_core *mlxsw_core);
++>>>>>>> 88d2fbcda145 (mlxsw: spectrum: Pass mlxsw_core as arg of mlxsw_sp_kvdl_resources_register())
  
  struct mlxsw_sp_acl_rule_info {
  	unsigned int priority;
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
index 26c26cd30c3d,8796db44dcc3..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
@@@ -48,46 -177,267 +48,194 @@@
  int mlxsw_sp_kvdl_alloc(struct mlxsw_sp *mlxsw_sp, unsigned int entry_count,
  			u32 *p_entry_index)
  {
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	/* Find partition with smallest allocation size satisfying the
 -	 * requested size.
 -	 */
 -	part = mlxsw_sp_kvdl_alloc_size_part(mlxsw_sp->kvdl, entry_count);
 -	if (IS_ERR(part))
 -		return PTR_ERR(part);
 -
 -	return mlxsw_sp_kvdl_part_alloc(part, p_entry_index);
 -}
 -
 -void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp, int entry_index)
 -{
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	part = mlxsw_sp_kvdl_index_part(mlxsw_sp->kvdl, entry_index);
 -	if (IS_ERR(part))
 -		return;
 -	mlxsw_sp_kvdl_part_free(part, entry_index);
 -}
 -
 -int mlxsw_sp_kvdl_alloc_size_query(struct mlxsw_sp *mlxsw_sp,
 -				   unsigned int entry_count,
 -				   unsigned int *p_alloc_size)
 -{
 -	struct mlxsw_sp_kvdl_part *part;
 -
 -	part = mlxsw_sp_kvdl_alloc_size_part(mlxsw_sp->kvdl, entry_count);
 -	if (IS_ERR(part))
 -		return PTR_ERR(part);
 -
 -	*p_alloc_size = part->info.alloc_size;
 -
 -	return 0;
 -}
 -
 -static void mlxsw_sp_kvdl_part_update(struct mlxsw_sp_kvdl_part *part,
 -				      struct mlxsw_sp_kvdl_part *part_prev,
 -				      unsigned int size)
 -{
 -
 -	if (!part_prev) {
 -		part->info.end_index = size - 1;
 +	int entry_index;
 +	int size;
 +	int type_base;
 +	int type_size;
 +	int type_entries;
 +
 +	if (entry_count == 0 || entry_count > MLXSW_SP_CHUNK_MAX) {
 +		return -EINVAL;
 +	} else if (entry_count == 1) {
 +		type_base = MLXSW_SP_KVDL_SINGLE_BASE;
 +		type_size = MLXSW_SP_KVDL_SINGLE_SIZE;
 +		type_entries = 1;
  	} else {
 -		part->info.start_index = part_prev->info.end_index + 1;
 -		part->info.end_index = part->info.start_index + size - 1;
 +		type_base = MLXSW_SP_KVDL_CHUNKS_BASE;
 +		type_size = MLXSW_SP_KVDL_CHUNKS_SIZE;
 +		type_entries = MLXSW_SP_CHUNK_MAX;
  	}
 -}
 -
 -static struct mlxsw_sp_kvdl_part *
 -mlxsw_sp_kvdl_part_init(struct mlxsw_sp *mlxsw_sp,
 -			const struct mlxsw_sp_kvdl_part_info *info,
 -			struct mlxsw_sp_kvdl_part *part_prev)
 -{
 -	struct devlink *devlink = priv_to_devlink(mlxsw_sp->core);
 -	struct mlxsw_sp_kvdl_part *part;
 -	bool need_update = true;
 -	unsigned int nr_entries;
 -	size_t usage_size;
 -	u64 resource_size;
 -	int err;
 -
 -	err = devlink_resource_size_get(devlink, info->resource_id,
 -					&resource_size);
 -	if (err) {
 -		need_update = false;
 -		resource_size = info->end_index - info->start_index + 1;
 -	}
 -
 -	nr_entries = div_u64(resource_size, info->alloc_size);
 -	usage_size = BITS_TO_LONGS(nr_entries) * sizeof(unsigned long);
 -	part = kzalloc(sizeof(*part) + usage_size, GFP_KERNEL);
 -	if (!part)
 -		return ERR_PTR(-ENOMEM);
  
 -	memcpy(&part->info, info, sizeof(part->info));
 +	entry_index = type_base;
 +	size = type_base + type_size;
 +	for_each_clear_bit_from(entry_index, mlxsw_sp->kvdl.usage, size) {
 +		int i;
  
 -	if (need_update)
 -		mlxsw_sp_kvdl_part_update(part, part_prev, resource_size);
 -	return part;
 -}
 -
 -static void mlxsw_sp_kvdl_part_fini(struct mlxsw_sp_kvdl_part *part)
 -{
 -	kfree(part);
 -}
 -
 -static int mlxsw_sp_kvdl_parts_init(struct mlxsw_sp *mlxsw_sp)
 -{
 -	struct mlxsw_sp_kvdl *kvdl = mlxsw_sp->kvdl;
 -	const struct mlxsw_sp_kvdl_part_info *info;
 -	struct mlxsw_sp_kvdl_part *part_prev = NULL;
 -	int err, i;
 -
 -	for (i = 0; i < MLXSW_SP_KVDL_PARTS_INFO_LEN; i++) {
 -		info = &mlxsw_sp_kvdl_parts_info[i];
 -		kvdl->parts[i] = mlxsw_sp_kvdl_part_init(mlxsw_sp, info,
 -							 part_prev);
 -		if (IS_ERR(kvdl->parts[i])) {
 -			err = PTR_ERR(kvdl->parts[i]);
 -			goto err_kvdl_part_init;
 -		}
 -		part_prev = kvdl->parts[i];
 +		for (i = 0; i < type_entries; i++)
 +			set_bit(entry_index + i, mlxsw_sp->kvdl.usage);
 +		*p_entry_index = entry_index;
 +		return 0;
  	}
 -	return 0;
 -
 -err_kvdl_part_init:
 -	for (i--; i >= 0; i--)
 -		mlxsw_sp_kvdl_part_fini(kvdl->parts[i]);
 -	return err;
 +	return -ENOBUFS;
  }
  
 -static void mlxsw_sp_kvdl_parts_fini(struct mlxsw_sp *mlxsw_sp)
 +void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp, int entry_index)
  {
 -	struct mlxsw_sp_kvdl *kvdl = mlxsw_sp->kvdl;
 +	int type_entries;
  	int i;
  
++<<<<<<< HEAD
 +	if (entry_index < MLXSW_SP_KVDL_CHUNKS_BASE)
 +		type_entries = 1;
 +	else
 +		type_entries = MLXSW_SP_CHUNK_MAX;
 +	for (i = 0; i < type_entries; i++)
 +		clear_bit(entry_index + i, mlxsw_sp->kvdl.usage);
++=======
+ 	for (i = 0; i < MLXSW_SP_KVDL_PARTS_INFO_LEN; i++)
+ 		mlxsw_sp_kvdl_part_fini(kvdl->parts[i]);
+ }
+ 
+ static u64 mlxsw_sp_kvdl_part_occ(struct mlxsw_sp_kvdl_part *part)
+ {
+ 	const struct mlxsw_sp_kvdl_part_info *info = &part->info;
+ 	unsigned int nr_entries;
+ 	int bit = -1;
+ 	u64 occ = 0;
+ 
+ 	nr_entries = (info->end_index -
+ 		      info->start_index + 1) /
+ 		      info->alloc_size;
+ 	while ((bit = find_next_bit(part->usage, nr_entries, bit + 1))
+ 		< nr_entries)
+ 		occ += info->alloc_size;
+ 	return occ;
+ }
+ 
+ u64 mlxsw_sp_kvdl_occ_get(const struct mlxsw_sp *mlxsw_sp)
+ {
+ 	u64 occ = 0;
+ 	int i;
+ 
+ 	for (i = 0; i < MLXSW_SP_KVDL_PARTS_INFO_LEN; i++)
+ 		occ += mlxsw_sp_kvdl_part_occ(mlxsw_sp->kvdl->parts[i]);
+ 
+ 	return occ;
+ }
+ 
+ static u64 mlxsw_sp_kvdl_single_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 	struct mlxsw_sp_kvdl_part *part;
+ 
+ 	part = mlxsw_sp->kvdl->parts[MLXSW_SP_KVDL_PART_ID_SINGLE];
+ 	return mlxsw_sp_kvdl_part_occ(part);
+ }
+ 
+ static u64 mlxsw_sp_kvdl_chunks_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 	struct mlxsw_sp_kvdl_part *part;
+ 
+ 	part = mlxsw_sp->kvdl->parts[MLXSW_SP_KVDL_PART_ID_CHUNKS];
+ 	return mlxsw_sp_kvdl_part_occ(part);
+ }
+ 
+ static u64 mlxsw_sp_kvdl_large_chunks_occ_get(struct devlink *devlink)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
+ 	struct mlxsw_sp_kvdl_part *part;
+ 
+ 	part = mlxsw_sp->kvdl->parts[MLXSW_SP_KVDL_PART_ID_LARGE_CHUNKS];
+ 	return mlxsw_sp_kvdl_part_occ(part);
+ }
+ 
+ static const struct devlink_resource_ops mlxsw_sp_kvdl_single_ops = {
+ 	.occ_get = mlxsw_sp_kvdl_single_occ_get,
+ };
+ 
+ static const struct devlink_resource_ops mlxsw_sp_kvdl_chunks_ops = {
+ 	.occ_get = mlxsw_sp_kvdl_chunks_occ_get,
+ };
+ 
+ static const struct devlink_resource_ops mlxsw_sp_kvdl_chunks_large_ops = {
+ 	.occ_get = mlxsw_sp_kvdl_large_chunks_occ_get,
+ };
+ 
+ int mlxsw_sp_kvdl_resources_register(struct mlxsw_core *mlxsw_core)
+ {
+ 	struct devlink *devlink = priv_to_devlink(mlxsw_core);
+ 	static struct devlink_resource_size_params size_params;
+ 	u32 kvdl_max_size;
+ 	int err;
+ 
+ 	kvdl_max_size = MLXSW_CORE_RES_GET(mlxsw_core, KVD_SIZE) -
+ 			MLXSW_CORE_RES_GET(mlxsw_core, KVD_SINGLE_MIN_SIZE) -
+ 			MLXSW_CORE_RES_GET(mlxsw_core, KVD_DOUBLE_MIN_SIZE);
+ 
+ 	devlink_resource_size_params_init(&size_params, 0, kvdl_max_size,
+ 					  MLXSW_SP_KVDL_SINGLE_ALLOC_SIZE,
+ 					  DEVLINK_RESOURCE_UNIT_ENTRY);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR_SINGLES,
+ 					MLXSW_SP_KVDL_SINGLE_SIZE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR_SINGLE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					&size_params,
+ 					&mlxsw_sp_kvdl_single_ops);
+ 	if (err)
+ 		return err;
+ 
+ 	devlink_resource_size_params_init(&size_params, 0, kvdl_max_size,
+ 					  MLXSW_SP_KVDL_CHUNKS_ALLOC_SIZE,
+ 					  DEVLINK_RESOURCE_UNIT_ENTRY);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR_CHUNKS,
+ 					MLXSW_SP_KVDL_CHUNKS_SIZE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR_CHUNKS,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					&size_params,
+ 					&mlxsw_sp_kvdl_chunks_ops);
+ 	if (err)
+ 		return err;
+ 
+ 	devlink_resource_size_params_init(&size_params, 0, kvdl_max_size,
+ 					  MLXSW_SP_KVDL_LARGE_CHUNKS_ALLOC_SIZE,
+ 					  DEVLINK_RESOURCE_UNIT_ENTRY);
+ 	err = devlink_resource_register(devlink, MLXSW_SP_RESOURCE_NAME_KVD_LINEAR_LARGE_CHUNKS,
+ 					MLXSW_SP_KVDL_LARGE_CHUNKS_SIZE,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR_LARGE_CHUNKS,
+ 					MLXSW_SP_RESOURCE_KVD_LINEAR,
+ 					&size_params,
+ 					&mlxsw_sp_kvdl_chunks_large_ops);
+ 	return err;
+ }
+ 
+ int mlxsw_sp_kvdl_init(struct mlxsw_sp *mlxsw_sp)
+ {
+ 	struct mlxsw_sp_kvdl *kvdl;
+ 	int err;
+ 
+ 	kvdl = kzalloc(sizeof(*mlxsw_sp->kvdl), GFP_KERNEL);
+ 	if (!kvdl)
+ 		return -ENOMEM;
+ 	mlxsw_sp->kvdl = kvdl;
+ 
+ 	err = mlxsw_sp_kvdl_parts_init(mlxsw_sp);
+ 	if (err)
+ 		goto err_kvdl_parts_init;
+ 
+ 	return 0;
+ 
+ err_kvdl_parts_init:
+ 	kfree(mlxsw_sp->kvdl);
+ 	return err;
+ }
+ 
+ void mlxsw_sp_kvdl_fini(struct mlxsw_sp *mlxsw_sp)
+ {
+ 	mlxsw_sp_kvdl_parts_fini(mlxsw_sp);
+ 	kfree(mlxsw_sp->kvdl);
++>>>>>>> 88d2fbcda145 (mlxsw: spectrum: Pass mlxsw_core as arg of mlxsw_sp_kvdl_resources_register())
  }
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_kvdl.c
