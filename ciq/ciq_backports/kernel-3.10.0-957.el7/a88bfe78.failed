iio: core: Introduce STEPS channel, ENABLE mask and INSTANCE event

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] core: Introduce STEPS channel, ENABLE mask and INSTANCE event (Tony Camuso) [1559170]
Rebuild_FUZZ: 96.06%
commit-author Irina Tirdea <irina.tirdea@intel.com>
commit a88bfe78583026eb9f21d4014ba481b22b66cee3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/a88bfe78.failed

These changes are needed to support the functionality of a pedometer.
A pedometer has two basic functionalities: step counter and step detector.

The step counter needs to be enabled and then it will count the steps
in its hardware register. Whenever the application needs to check
the step count, it will read the step counter register. To support the
step counter a new channel type STEPS is added. Since the pedometer needs
to be enabled first so that the hardware can count and store the steps,
we need a specific ENABLE channel info mask.

The step detector will generate an interrupt each time a step is detected.
To support this functionality we add a new event type INSTANCE.

For more information on the Android requirements for step counter and step
detector see:
http://source.android.com/devices/sensors/composite_sensors.html#counter
and http://source.android.com/devices/sensors/composite_sensors.html#detector.

A device that has the pedometer functionality this interface needs to
support is Freescale's MMA9553L:
http://www.freescale.com/files/sensors/doc/ref_manual/MMA9553LSWRM.pdf

	Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
	Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit a88bfe78583026eb9f21d4014ba481b22b66cee3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/sysfs-bus-iio
#	drivers/iio/industrialio-core.c
#	include/linux/iio/iio.h
diff --cc Documentation/ABI/testing/sysfs-bus-iio
index 990a127b4ccd,c60b0a1af839..000000000000
--- a/Documentation/ABI/testing/sysfs-bus-iio
+++ b/Documentation/ABI/testing/sysfs-bus-iio
@@@ -906,13 -1014,106 +913,115 @@@ Description
  		This attribute is used to read the amount of quadrature error
  		present in the device at a given time.
  
 -What:		/sys/.../iio:deviceX/in_accelX_power_mode
 -KernelVersion:	3.11
 +What:		/sys/bus/iio/devices/iio:device*/buffer/hwfifo_timeout
 +KernelVersion:	4.12
  Contact:	linux-iio@vger.kernel.org
  Description:
++<<<<<<< HEAD
 +		A read/write property to provide capability to delay reporting of
 +		samples till a timeout is reached. This allows host processors to
 +		sleep, while the sensor is storing samples in its internal fifo.
 +		The maximum timeout in seconds can be specified by setting
 +		hwfifo_timeout.The current delay can be read by reading
 +		hwfifo_timeout. A value of 0 means that there is no timeout.
++=======
+ 		Specifies the chip power mode.
+ 		low_noise: reduce noise level from ADC,
+ 		low_power: enable low current consumption.
+ 		For a list of available output power modes read
+ 		in_accel_power_mode_available.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/store_eeprom
+ KernelVersion:	3.4.0
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Writing '1' stores the current device configuration into
+ 		on-chip EEPROM. After power-up or chip reset the device will
+ 		automatically load the saved configuration.
+ 
+ What:		/sys/.../iio:deviceX/in_proximity_raw
+ What:		/sys/.../iio:deviceX/in_proximity_input
+ What:		/sys/.../iio:deviceX/in_proximityY_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Proximity measurement indicating that some
+ 		object is near the sensor, usually be observing
+ 		reflectivity of infrared or ultrasound emitted.
+ 		Often these sensors are unit less and as such conversion
+ 		to SI units is not possible.  Where it is, the units should
+ 		be meters.
+ 
+ What:		/sys/.../iio:deviceX/in_illuminanceY_input
+ What:		/sys/.../iio:deviceX/in_illuminanceY_raw
+ What:		/sys/.../iio:deviceX/in_illuminanceY_mean_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Illuminance measurement, units after application of scale
+ 		and offset are lux.
+ 
+ What:		/sys/.../iio:deviceX/in_intensityY_raw
+ What:		/sys/.../iio:deviceX/in_intensityY_ir_raw
+ What:		/sys/.../iio:deviceX/in_intensityY_both_raw
+ KernelVersion:	3.4
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Unit-less light intensity. Modifiers both and ir indicate
+ 		that measurements contains visible and infrared light
+ 		components or just infrared light, respectively.
+ 
+ What:		/sys/.../iio:deviceX/in_intensity_red_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_green_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_blue_integration_time
+ What:		/sys/.../iio:deviceX/in_intensity_clear_integration_time
+ What:		/sys/.../iio:deviceX/in_illuminance_integration_time
+ KernelVersion:	3.12
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to get/set the integration time in
+ 		seconds.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_quaternion_raw
+ KernelVersion:	3.15
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw value of quaternion components using a format
+ 		x y z w. Here x, y, and z component represents the axis about
+ 		which a rotation will occur and w component represents the
+ 		amount of rotation.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_magnetic_tilt_comp_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_true_tilt_comp_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_magnetic_raw
+ What:		/sys/bus/iio/devices/iio:deviceX/in_rot_from_north_true_raw
+ KernelVersion:	3.15
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw value of rotation from true/magnetic north measured with
+ 		or without compensation from tilt sensors.
+ 
+ What:		/sys/bus/iio/devices/iio:deviceX/in_currentX_raw
+ KernelVersion:	3.18
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Raw current measurement from channel X. Units are in milliamps
+ 		after application of scale and offset. If no offset or scale is
+ 		present, output should be considered as processed with the
+ 		unit in milliamps.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_en
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		Activates the step counter. After activation, the number of steps
+ 		taken by the user will be counted in hardware and exported through
+ 		in_steps_input.
+ 
+ What:		/sys/.../iio:deviceX/in_steps_input
+ KernelVersion:	3.19
+ Contact:	linux-iio@vger.kernel.org
+ Description:
+ 		This attribute is used to read the number of steps taken by the user
+ 		since the last reboot while activated.
++>>>>>>> a88bfe785830 (iio: core: Introduce STEPS channel, ENABLE mask and INSTANCE event)
diff --cc drivers/iio/industrialio-core.c
index e0f70c91f7cb,1e060f390b08..000000000000
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@@ -116,8 -118,15 +117,13 @@@ static const char * const iio_chan_info
  	[IIO_CHAN_INFO_PHASE] = "phase",
  	[IIO_CHAN_INFO_HARDWAREGAIN] = "hardwaregain",
  	[IIO_CHAN_INFO_HYSTERESIS] = "hysteresis",
++<<<<<<< HEAD
++=======
+ 	[IIO_CHAN_INFO_INT_TIME] = "integration_time",
+ 	[IIO_CHAN_INFO_ENABLE] = "en",
++>>>>>>> a88bfe785830 (iio: core: Introduce STEPS channel, ENABLE mask and INSTANCE event)
  };
  
 -/**
 - * iio_find_channel_from_si() - get channel from its scan index
 - * @indio_dev:		device
 - * @si:			scan index to match
 - */
  const struct iio_chan_spec
  *iio_find_channel_from_si(struct iio_dev *indio_dev, int si)
  {
diff --cc include/linux/iio/iio.h
index 470fd82c0d12,f45a400a5e3e..000000000000
--- a/include/linux/iio/iio.h
+++ b/include/linux/iio/iio.h
@@@ -37,6 -37,15 +37,18 @@@ enum iio_chan_info_enum 
  	IIO_CHAN_INFO_PHASE,
  	IIO_CHAN_INFO_HARDWAREGAIN,
  	IIO_CHAN_INFO_HYSTERESIS,
++<<<<<<< HEAD
++=======
+ 	IIO_CHAN_INFO_INT_TIME,
+ 	IIO_CHAN_INFO_ENABLE,
+ };
+ 
+ enum iio_shared_by {
+ 	IIO_SEPARATE,
+ 	IIO_SHARED_BY_TYPE,
+ 	IIO_SHARED_BY_DIR,
+ 	IIO_SHARED_BY_ALL
++>>>>>>> a88bfe785830 (iio: core: Introduce STEPS channel, ENABLE mask and INSTANCE event)
  };
  
  enum iio_endian {
* Unmerged path Documentation/ABI/testing/sysfs-bus-iio
* Unmerged path drivers/iio/industrialio-core.c
diff --git a/drivers/iio/industrialio-event.c b/drivers/iio/industrialio-event.c
index 72308404d71a..f6643e4e9638 100644
--- a/drivers/iio/industrialio-event.c
+++ b/drivers/iio/industrialio-event.c
@@ -185,6 +185,7 @@ static const char * const iio_ev_type_text[] = {
 	[IIO_EV_TYPE_ROC] = "roc",
 	[IIO_EV_TYPE_THRESH_ADAPTIVE] = "thresh_adaptive",
 	[IIO_EV_TYPE_MAG_ADAPTIVE] = "mag_adaptive",
+	[IIO_EV_TYPE_INSTANCE] = "instance",
 };
 
 static const char * const iio_ev_dir_text[] = {
* Unmerged path include/linux/iio/iio.h
diff --git a/include/linux/iio/types.h b/include/linux/iio/types.h
index 63fb0a6c6ca4..d565a3369b89 100644
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@ -31,6 +31,7 @@ enum iio_chan_type {
 	IIO_PRESSURE,
 	IIO_HUMIDITYRELATIVE,
 	IIO_ACTIVITY,
+	IIO_STEPS,
 };
 
 enum iio_modifier {
@@ -73,6 +74,7 @@ enum iio_event_type {
 	IIO_EV_TYPE_ROC,
 	IIO_EV_TYPE_THRESH_ADAPTIVE,
 	IIO_EV_TYPE_MAG_ADAPTIVE,
+	IIO_EV_TYPE_INSTANCE,
 };
 
 enum iio_event_info {
