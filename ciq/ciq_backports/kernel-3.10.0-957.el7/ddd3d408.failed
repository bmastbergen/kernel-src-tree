vhost: return bool from *_access_ok() functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [vhost] return bool from *_access_ok() functions (Hangbin Liu) [1551292]
Rebuild_FUZZ: 91.95%
commit-author Stefan Hajnoczi <stefanha@redhat.com>
commit ddd3d4081ffa806ffef28eaeefde757ba2b6812a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ddd3d408.failed

Currently vhost *_access_ok() functions return int.  This is error-prone
because there are two popular conventions:

1. 0 means failure, 1 means success
2. -errno means failure, 0 means success

Although vhost mostly uses #1, it does not do so consistently.
umem_access_ok() uses #2.

This patch changes the return type from int to bool so that false means
failure and true means success.  This eliminates a potential source of
errors.

	Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
	Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
	Acked-by: Michael S. Tsirkin <mst@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ddd3d4081ffa806ffef28eaeefde757ba2b6812a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vhost/vhost.c
diff --cc drivers/vhost/vhost.c
index 516de4c41f39,f3bd8e941224..000000000000
--- a/drivers/vhost/vhost.c
+++ b/drivers/vhost/vhost.c
@@@ -1123,10 -1135,11 +1123,18 @@@ static int vhost_iotlb_miss(struct vhos
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int vq_access_ok(struct vhost_virtqueue *vq, unsigned int num,
 +			struct vring_desc __user *desc,
 +			struct vring_avail __user *avail,
 +			struct vring_used __user *used)
++=======
+ static bool vq_access_ok(struct vhost_virtqueue *vq, unsigned int num,
+ 			 struct vring_desc __user *desc,
+ 			 struct vring_avail __user *avail,
+ 			 struct vring_used __user *used)
+ 
++>>>>>>> ddd3d4081ffa (vhost: return bool from *_access_ok() functions)
  {
  	size_t s = vhost_has_feature(vq, VIRTIO_RING_F_EVENT_IDX) ? 2 : 0;
  
* Unmerged path drivers/vhost/vhost.c
diff --git a/drivers/vhost/vhost.h b/drivers/vhost/vhost.h
index a43a970010ee..886d7c3bccf5 100644
--- a/drivers/vhost/vhost.h
+++ b/drivers/vhost/vhost.h
@@ -184,8 +184,8 @@ void vhost_dev_cleanup(struct vhost_dev *, bool locked);
 void vhost_dev_stop(struct vhost_dev *);
 long vhost_dev_ioctl(struct vhost_dev *, unsigned int ioctl, void __user *argp);
 long vhost_vring_ioctl(struct vhost_dev *d, unsigned int ioctl, void __user *argp);
-int vhost_vq_access_ok(struct vhost_virtqueue *vq);
-int vhost_log_access_ok(struct vhost_dev *);
+bool vhost_vq_access_ok(struct vhost_virtqueue *vq);
+bool vhost_log_access_ok(struct vhost_dev *);
 
 int vhost_get_vq_desc(struct vhost_virtqueue *,
 		      struct iovec iov[], unsigned int iov_count,
