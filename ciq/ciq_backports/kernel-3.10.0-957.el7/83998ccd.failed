gfs2: Dirty source inode during rename

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 83998ccd9bfff881f04ce03f6964f8a83e6c5b54
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/83998ccd.failed

Mark the source inode dirty during a rename instead of just updating the
underlying buffer head.  Otherwise, fsync may find the inode clean and
will then skip flushing the journal.  A subsequent power failure will
cause the rename to be lost.  This happens in command sequences like:

  xfs_io -f -c 'pwrite 0 4096' -c 'fsync' foo
  mv foo bar
  xfs_io -c 'fsync' bar
  # power failure

Fixes xfstests generic/322, generic/376.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 83998ccd9bfff881f04ce03f6964f8a83e6c5b54)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/dir.c
#	fs/gfs2/inode.c
diff --cc fs/gfs2/dir.c
index 5c6183c6e9cf,d9fb0ad6cc30..000000000000
--- a/fs/gfs2/dir.c
+++ b/fs/gfs2/dir.c
@@@ -1964,18 -1952,10 +1963,16 @@@ int gfs2_dir_mvino(struct gfs2_inode *d
  	gfs2_trans_add_meta(dip->i_gl, bh);
  	gfs2_inum_out(nip, dent);
  	dent->de_type = cpu_to_be16(new_type);
+ 	brelse(bh);
  
- 	if (dip->i_diskflags & GFS2_DIF_EXHASH) {
- 		brelse(bh);
- 		error = gfs2_meta_inode_buffer(dip, &bh);
- 		if (error)
- 			return error;
- 		gfs2_trans_add_meta(dip->i_gl, bh);
- 	}
- 
++<<<<<<< HEAD
 +	dip->i_inode.i_mtime = dip->i_inode.i_ctime = CURRENT_TIME;
 +	gfs2_dinode_out(dip, bh->b_data);
 +	brelse(bh);
++=======
+ 	dip->i_inode.i_mtime = dip->i_inode.i_ctime = current_time(&dip->i_inode);
+ 	mark_inode_dirty_sync(&dip->i_inode);
++>>>>>>> 83998ccd9bff (gfs2: Dirty source inode during rename)
  	return 0;
  }
  
diff --cc fs/gfs2/inode.c
index 2f5082162bdd,8700eb815638..000000000000
--- a/fs/gfs2/inode.c
+++ b/fs/gfs2/inode.c
@@@ -1282,16 -1329,8 +1282,18 @@@ static int update_moved_ino(struct gfs2
  	if (dir_rename)
  		return gfs2_dir_mvino(ip, &gfs2_qdotdot, ndip, DT_DIR);
  
++<<<<<<< HEAD
 +	error = gfs2_meta_inode_buffer(ip, &dibh);
 +	if (error)
 +		return error;
 +	ip->i_inode.i_ctime = CURRENT_TIME;
 +	gfs2_trans_add_meta(ip->i_gl, dibh);
 +	gfs2_dinode_out(ip, dibh->b_data);
 +	brelse(dibh);
++=======
+ 	ip->i_inode.i_ctime = current_time(&ip->i_inode);
+ 	mark_inode_dirty_sync(&ip->i_inode);
++>>>>>>> 83998ccd9bff (gfs2: Dirty source inode during rename)
  	return 0;
  }
  
* Unmerged path fs/gfs2/dir.c
* Unmerged path fs/gfs2/inode.c
