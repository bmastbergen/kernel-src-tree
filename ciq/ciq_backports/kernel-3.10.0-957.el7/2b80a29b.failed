USB: host: Use zeroing memory allocator rather than allocator/memset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [usb] host: Use zeroing memory allocator rather than allocator/memset (Torez Smith) [1540721]
Rebuild_FUZZ: 96.18%
commit-author Himanshu Jha <himanshujha199640@gmail.com>
commit 2b80a29bf83d2baed1a22193647bafcc6a0426af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/2b80a29b.failed

Use dma_zalloc_coherent for allocating zeroed
memory and remove unnecessary memset function.

Done using Coccinelle.
Generated-by: scripts/coccinelle/api/alloc/kzalloc-simple.cocci
0-day tested with no failures.

	Suggested-by: Luis R. Rodriguez <mcgrof@kernel.org>
	Signed-off-by: Himanshu Jha <himanshujha199640@gmail.com>
	Acked-by: Alan Stern <stern@rowland.harvard.edu>
	Acked-by: Mathias Nyman <mathias.nyman@linux.intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2b80a29bf83d2baed1a22193647bafcc6a0426af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/xhci-mem.c
diff --cc drivers/usb/host/xhci-mem.c
index df3ff4d755e2,332420d10be9..000000000000
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@@ -1772,10 -1771,52 +1772,56 @@@ void xhci_free_command(struct xhci_hcd 
  	kfree(command);
  }
  
++<<<<<<< HEAD
++=======
+ int xhci_alloc_erst(struct xhci_hcd *xhci,
+ 		    struct xhci_ring *evt_ring,
+ 		    struct xhci_erst *erst,
+ 		    gfp_t flags)
+ {
+ 	size_t size;
+ 	unsigned int val;
+ 	struct xhci_segment *seg;
+ 	struct xhci_erst_entry *entry;
+ 
+ 	size = sizeof(struct xhci_erst_entry) * evt_ring->num_segs;
+ 	erst->entries = dma_zalloc_coherent(xhci_to_hcd(xhci)->self.sysdev,
+ 					    size, &erst->erst_dma_addr, flags);
+ 	if (!erst->entries)
+ 		return -ENOMEM;
+ 
+ 	erst->num_entries = evt_ring->num_segs;
+ 
+ 	seg = evt_ring->first_seg;
+ 	for (val = 0; val < evt_ring->num_segs; val++) {
+ 		entry = &erst->entries[val];
+ 		entry->seg_addr = cpu_to_le64(seg->dma);
+ 		entry->seg_size = cpu_to_le32(TRBS_PER_SEGMENT);
+ 		entry->rsvd = 0;
+ 		seg = seg->next;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ void xhci_free_erst(struct xhci_hcd *xhci, struct xhci_erst *erst)
+ {
+ 	size_t size;
+ 	struct device *dev = xhci_to_hcd(xhci)->self.sysdev;
+ 
+ 	size = sizeof(struct xhci_erst_entry) * (erst->num_entries);
+ 	if (erst->entries)
+ 		dma_free_coherent(dev, size,
+ 				erst->entries,
+ 				erst->erst_dma_addr);
+ 	erst->entries = NULL;
+ }
+ 
++>>>>>>> 2b80a29bf83d (USB: host: Use zeroing memory allocator rather than allocator/memset)
  void xhci_mem_cleanup(struct xhci_hcd *xhci)
  {
 -	struct device	*dev = xhci_to_hcd(xhci)->self.sysdev;
 +	struct device	*dev = xhci_to_hcd(xhci)->self.controller;
 +	int size;
  	int i, j, num_ports;
  
  	cancel_delayed_work_sync(&xhci->cmd_timer);
diff --git a/drivers/usb/host/uhci-hcd.c b/drivers/usb/host/uhci-hcd.c
index 0fc5b1795e80..612fc4a9833f 100644
--- a/drivers/usb/host/uhci-hcd.c
+++ b/drivers/usb/host/uhci-hcd.c
@@ -600,7 +600,7 @@ static int uhci_start(struct usb_hcd *hcd)
 	uhci->dentry = dentry;
 #endif
 
-	uhci->frame = dma_alloc_coherent(uhci_dev(uhci),
+	uhci->frame = dma_zalloc_coherent(uhci_dev(uhci),
 			UHCI_NUMFRAMES * sizeof(*uhci->frame),
 			&uhci->frame_dma_handle, GFP_KERNEL);
 	if (!uhci->frame) {
@@ -608,7 +608,6 @@ static int uhci_start(struct usb_hcd *hcd)
 			"unable to allocate consistent memory for frame list\n");
 		goto err_alloc_frame;
 	}
-	memset(uhci->frame, 0, UHCI_NUMFRAMES * sizeof(*uhci->frame));
 
 	uhci->frame_cpu = kcalloc(UHCI_NUMFRAMES, sizeof(*uhci->frame_cpu),
 			GFP_KERNEL);
* Unmerged path drivers/usb/host/xhci-mem.c
