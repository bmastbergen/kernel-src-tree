scsi: tcmu: use u64 for dev_size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mike Christie <mchristi@redhat.com>
commit 0e0d75267107e6a557ea9314d55bcff05a6ede44
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0e0d7526.failed

We use unsigned long, size_t and u64 for dev_size. This has us standardize
on u64.

	Signed-off-by: Mike Christie <mchristi@redhat.com>
	Reviewed-by: Xiubo Li <xiubli@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 0e0d75267107e6a557ea9314d55bcff05a6ede44)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_user.c
diff --cc drivers/target/target_core_user.c
index 5534ef1b341c,b34179ae71ae..000000000000
--- a/drivers/target/target_core_user.c
+++ b/drivers/target/target_core_user.c
@@@ -103,8 -134,10 +103,8 @@@ struct tcmu_dev 
  
  	struct uio_info uio_info;
  
 -	struct inode *inode;
 -
  	struct tcmu_mailbox *mb_addr;
- 	size_t dev_size;
+ 	uint64_t dev_size;
  	u32 cmdr_size;
  	u32 cmdr_last_cleaned;
  	/* Offset of data area from start of mb */
@@@ -1360,10 -2016,11 +1360,18 @@@ enum 
  
  static match_table_t tokens = {
  	{Opt_dev_config, "dev_config=%s"},
++<<<<<<< HEAD
 +	{Opt_dev_size, "dev_size=%u"},
 +	{Opt_hw_block_size, "hw_block_size=%u"},
 +	{Opt_hw_max_sectors, "hw_max_sectors=%u"},
 +	{Opt_max_data_area_mb, "max_data_area_mb=%u"},
++=======
+ 	{Opt_dev_size, "dev_size=%s"},
+ 	{Opt_hw_block_size, "hw_block_size=%d"},
+ 	{Opt_hw_max_sectors, "hw_max_sectors=%d"},
+ 	{Opt_nl_reply_supported, "nl_reply_supported=%d"},
+ 	{Opt_max_data_area_mb, "max_data_area_mb=%d"},
++>>>>>>> 0e0d75267107 (scsi: tcmu: use u64 for dev_size)
  	{Opt_err, NULL}
  };
  
@@@ -1395,9 -2083,9 +1403,9 @@@ static ssize_t tcmu_set_configfs_dev_pa
  		const char *page, ssize_t count)
  {
  	struct tcmu_dev *udev = TCMU_DEV(dev);
- 	char *orig, *ptr, *opts, *arg_p;
+ 	char *orig, *ptr, *opts;
  	substring_t args[MAX_OPT_ARGS];
 -	int ret = 0, token;
 +	int ret = 0, token, tmpval;
  
  	opts = kstrdup(page, GFP_KERNEL);
  	if (!opts)
@@@ -1586,9 -2318,29 +1589,9 @@@ static ssize_t tcmu_dev_size_show(struc
  						struct se_dev_attrib, da_group);
  	struct tcmu_dev *udev = TCMU_DEV(da->da_dev);
  
- 	return snprintf(page, PAGE_SIZE, "%zu\n", udev->dev_size);
+ 	return snprintf(page, PAGE_SIZE, "%llu\n", udev->dev_size);
  }
  
 -static int tcmu_send_dev_size_event(struct tcmu_dev *udev, u64 size)
 -{
 -	struct sk_buff *skb = NULL;
 -	void *msg_header = NULL;
 -	int ret = 0;
 -
 -	ret = tcmu_netlink_event_init(udev, TCMU_CMD_RECONFIG_DEVICE,
 -				      &skb, &msg_header);
 -	if (ret < 0)
 -		return ret;
 -	ret = nla_put_u64_64bit(skb, TCMU_ATTR_DEV_SIZE,
 -				size, TCMU_ATTR_PAD);
 -	if (ret < 0) {
 -		nlmsg_free(skb);
 -		return ret;
 -	}
 -	return tcmu_netlink_event_send(udev, TCMU_CMD_RECONFIG_DEVICE,
 -				       skb, msg_header);
 -}
 -
  static ssize_t tcmu_dev_size_store(struct config_item *item, const char *page,
  				   size_t count)
  {
* Unmerged path drivers/target/target_core_user.c
