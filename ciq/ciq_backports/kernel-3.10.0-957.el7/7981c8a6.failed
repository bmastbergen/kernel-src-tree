NFS: Create a single nfs4_setup_sequence() function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Anna Schumaker <Anna.Schumaker@Netapp.com>
commit 7981c8a659143173882dda43b3056a777faeeb7b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/7981c8a6.failed

The inline ifdef lets us put everything in a single place, rather than
having two (very similar) versions of this function.

	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit 7981c8a659143173882dda43b3056a777faeeb7b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
diff --cc fs/nfs/nfs4proc.c
index 0a1efaa4e649,e6f563c1689e..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -938,30 -944,7 +938,33 @@@ out_sleep
  	spin_unlock(&tbl->slot_tbl_lock);
  	return -EAGAIN;
  }
 +EXPORT_SYMBOL_GPL(nfs41_setup_sequence);
 +
++<<<<<<< HEAD
 +static int nfs4_setup_sequence(const struct nfs_server *server,
 +			       struct nfs4_sequence_args *args,
 +			       struct nfs4_sequence_res *res,
 +			       struct rpc_task *task)
 +{
 +	struct nfs4_session *session = nfs4_get_session(server->nfs_client);
 +	int ret = 0;
 +
 +	if (!session)
 +		return nfs40_setup_sequence(server->nfs_client->cl_slot_tbl,
 +					    args, res, task);
 +
 +	dprintk("--> %s clp %p session %p sr_slot %u\n",
 +		__func__, session->clp, session, res->sr_slot ?
 +			res->sr_slot->slot_nr : NFS4_NO_SLOT);
 +
 +	ret = nfs41_setup_sequence(session, args, res, task);
 +
 +	dprintk("<-- %s status=%d\n", __func__, ret);
 +	return ret;
 +}
  
++=======
++>>>>>>> 7981c8a65914 (NFS: Create a single nfs4_setup_sequence() function)
  static void nfs41_call_sync_prepare(struct rpc_task *task, void *calldata)
  {
  	struct nfs4_call_sync_data *data = calldata;
@@@ -986,15 -969,6 +989,18 @@@ static const struct rpc_call_ops nfs41_
  
  #else	/* !CONFIG_NFS_V4_1 */
  
++<<<<<<< HEAD
 +static int nfs4_setup_sequence(const struct nfs_server *server,
 +			       struct nfs4_sequence_args *args,
 +			       struct nfs4_sequence_res *res,
 +			       struct rpc_task *task)
 +{
 +	return nfs40_setup_sequence(server->nfs_client->cl_slot_tbl,
 +				    args, res, task);
 +}
 +
++=======
++>>>>>>> 7981c8a65914 (NFS: Create a single nfs4_setup_sequence() function)
  static int nfs4_sequence_process(struct rpc_task *task, struct nfs4_sequence_res *res)
  {
  	return nfs40_sequence_done(task, res);
* Unmerged path fs/nfs/nfs4proc.c
