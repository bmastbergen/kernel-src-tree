x86, libnvdimm, pmem: move arch_invalidate_pmem() to libnvdimm

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] libnvdimm, pmem: move arch_invalidate_pmem() to libnvdimm (Jeff Moyer) [1515085]
Rebuild_FUZZ: 95.80%
commit-author Dan Williams <dan.j.williams@intel.com>
commit f2b612578e163b49661ece2fe01dfafb0e78f545
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/f2b61257.failed

Kill this globally defined wrapper and move to libnvdimm so that we can
ultimately remove include/linux/pmem.h and asm/pmem.h.

	Cc: <x86@kernel.org>
	Cc: Jeff Moyer <jmoyer@redhat.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Matthew Wilcox <mawilcox@microsoft.com>
	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit f2b612578e163b49661ece2fe01dfafb0e78f545)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/pmem.h
#	drivers/nvdimm/pmem.c
#	drivers/nvdimm/pmem.h
#	include/linux/pmem.h
diff --cc arch/x86/include/asm/pmem.h
index ab4983df7bff,b61a25a895a7..000000000000
--- a/arch/x86/include/asm/pmem.h
+++ b/arch/x86/include/asm/pmem.h
@@@ -43,30 -43,5 +43,33 @@@ static inline void arch_memcpy_to_pmem(
  				__func__, dst, src, rem))
  		BUG();
  }
++<<<<<<< HEAD
 +
 +/**
 + * arch_wb_cache_pmem - write back a cache range with CLWB
 + * @vaddr:	virtual start address
 + * @size:	number of bytes to write back
 + *
 + * Write back a cache range using the CLWB (cache line write back)
 + * instruction.
 + */
 +static inline void arch_wb_cache_pmem(void *addr, size_t size)
 +{
 +	u16 x86_clflush_size = boot_cpu_data.x86_clflush_size;
 +	unsigned long clflush_mask = x86_clflush_size - 1;
 +	void *vend = addr + size;
 +	void *p;
 +
 +	for (p = (void *)((unsigned long)addr & ~clflush_mask);
 +	     p < vend; p += x86_clflush_size)
 +		clwb(p);
 +}
 +
 +static inline void arch_invalidate_pmem(void *addr, size_t size)
 +{
 +	clflush_cache_range(addr, size);
 +}
++=======
++>>>>>>> f2b612578e16 (x86, libnvdimm, pmem: move arch_invalidate_pmem() to libnvdimm)
  #endif /* CONFIG_ARCH_HAS_PMEM_API */
  #endif /* __ASM_X86_PMEM_H__ */
diff --cc drivers/nvdimm/pmem.c
index 49eeb1950ba6,68737bc68a07..000000000000
--- a/drivers/nvdimm/pmem.c
+++ b/drivers/nvdimm/pmem.c
@@@ -68,11 -69,10 +68,16 @@@ static int pmem_clear_poison(struct pme
  				(unsigned long long) sector, cleared,
  				cleared > 1 ? "s" : "");
  		badblocks_clear(&pmem->bb, sector, cleared);
 +		if (pmem->bb_state)
 +			sysfs_notify_dirent(pmem->bb_state);
  	}
  
++<<<<<<< HEAD
 +	invalidate_pmem(pmem->virt_addr + offset, len);
++=======
+ 	arch_invalidate_pmem(pmem->virt_addr + offset, len);
+ 
++>>>>>>> f2b612578e16 (x86, libnvdimm, pmem: move arch_invalidate_pmem() to libnvdimm)
  	return rc;
  }
  
diff --cc drivers/nvdimm/pmem.h
index c5917f040fa7,00005900c1b7..000000000000
--- a/drivers/nvdimm/pmem.h
+++ b/drivers/nvdimm/pmem.h
@@@ -5,6 -5,18 +5,21 @@@
  #include <linux/pfn_t.h>
  #include <linux/fs.h>
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_ARCH_HAS_PMEM_API
+ void arch_wb_cache_pmem(void *addr, size_t size);
+ void arch_invalidate_pmem(void *addr, size_t size);
+ #else
+ static inline void arch_wb_cache_pmem(void *addr, size_t size)
+ {
+ }
+ static inline void arch_invalidate_pmem(void *addr, size_t size)
+ {
+ }
+ #endif
+ 
++>>>>>>> f2b612578e16 (x86, libnvdimm, pmem: move arch_invalidate_pmem() to libnvdimm)
  /* this definition is in it's own header for tools/testing/nvdimm to consume */
  struct pmem_device {
  	/* One contiguous memory region per device */
diff --cc include/linux/pmem.h
index e34add5f758c,559c00848583..000000000000
--- a/include/linux/pmem.h
+++ b/include/linux/pmem.h
@@@ -88,32 -56,4 +83,35 @@@ static inline void memcpy_to_pmem(void 
  	else
  		memcpy(dst, src, n);
  }
++<<<<<<< HEAD
 +
 +/**
 + * invalidate_pmem - flush a pmem range from the cache hierarchy
 + * @addr:	virtual start address
 + * @size:	bytes to invalidate (internally aligned to cache line size)
 + *
 + * For platforms that support clearing poison this flushes any poisoned
 + * ranges out of the cache
 + */
 +static inline void invalidate_pmem(void *addr, size_t size)
 +{
 +	if (arch_has_pmem_api())
 +		arch_invalidate_pmem(addr, size);
 +}
 +
 +/**
 + * wb_cache_pmem - write back processor cache for PMEM memory range
 + * @addr:	virtual start address
 + * @size:	number of bytes to write back
 + *
 + * Write back the processor cache range starting at 'addr' for 'size' bytes.
 + * See blkdev_issue_flush() note for memcpy_to_pmem().
 + */
 +static inline void wb_cache_pmem(void *addr, size_t size)
 +{
 +	if (arch_has_pmem_api())
 +		arch_wb_cache_pmem(addr, size);
 +}
++=======
++>>>>>>> f2b612578e16 (x86, libnvdimm, pmem: move arch_invalidate_pmem() to libnvdimm)
  #endif /* __PMEM_H__ */
* Unmerged path arch/x86/include/asm/pmem.h
diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index d9cf1c6c15e0..80c22aaca75f 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -149,6 +149,12 @@ void clflush_cache_range(void *vaddr, unsigned int size)
 }
 EXPORT_SYMBOL_GPL(clflush_cache_range);
 
+void arch_invalidate_pmem(void *addr, size_t size)
+{
+	clflush_cache_range(addr, size);
+}
+EXPORT_SYMBOL_GPL(arch_invalidate_pmem);
+
 static void __cpa_flush_all(void *arg)
 {
 	unsigned long cache = (unsigned long)arg;
diff --git a/drivers/nvdimm/claim.c b/drivers/nvdimm/claim.c
index 26a0fbf56be8..e1170a835a50 100644
--- a/drivers/nvdimm/claim.c
+++ b/drivers/nvdimm/claim.c
@@ -14,6 +14,7 @@
 #include <linux/sizes.h>
 #include <linux/pmem.h>
 #include "nd-core.h"
+#include "pmem.h"
 #include "pfn.h"
 #include "btt.h"
 #include "nd.h"
@@ -293,7 +294,7 @@ static int nsio_rw_bytes(struct nd_namespace_common *ndns,
 				cleared /= 512;
 				badblocks_clear(&nsio->bb, sector, cleared);
 			}
-			invalidate_pmem(nsio->addr + offset, size);
+			arch_invalidate_pmem(nsio->addr + offset, size);
 		} else
 			rc = -EIO;
 	}
* Unmerged path drivers/nvdimm/pmem.c
* Unmerged path drivers/nvdimm/pmem.h
* Unmerged path include/linux/pmem.h
