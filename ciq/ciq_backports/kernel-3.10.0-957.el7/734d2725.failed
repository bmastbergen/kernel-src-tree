ipv4: raise IP_MAX_MTU to theoretical limit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 734d2725db879f3f6fcdc2b1d2a5deae105f5e95
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/734d2725.failed

As discussed last year [1], there is no compelling reason
to limit IPv4 MTU to 0xFFF0, while real limit is 0xFFFF

[1] : http://marc.info/?l=linux-netdev&m=135607247609434&w=2

Willem raised this issue again because some of our internal
regression tests broke after lo mtu being set to 65536.

IP_MTU reports 0xFFF0, and the test attempts to send a RAW datagram of
mtu + 1 bytes, expecting the send() to fail, but it does not.

Alexey raised interesting points about TCP MSS, that should be addressed
in follow-up patches in TCP stack if needed, as someone could also set
an odd mtu anyway.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
	Cc: Willem de Bruijn <willemb@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 734d2725db879f3f6fcdc2b1d2a5deae105f5e95)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/route.c
diff --cc net/ipv4/route.c
index c62c5860782f,727f4365bcdf..000000000000
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@@ -116,6 -112,9 +116,12 @@@
  #define RT_FL_TOS(oldflp4) \
  	((oldflp4)->flowi4_tos & (IPTOS_RT_MASK | RTO_ONLINK))
  
++<<<<<<< HEAD
++=======
+ /* IPv4 datagram length is stored into 16bit field (tot_len) */
+ #define IP_MAX_MTU	0xFFFF
+ 
++>>>>>>> 734d2725db87 (ipv4: raise IP_MAX_MTU to theoretical limit)
  #define RT_GC_TIMEOUT (300*HZ)
  
  static int ip_rt_max_size;
* Unmerged path net/ipv4/route.c
