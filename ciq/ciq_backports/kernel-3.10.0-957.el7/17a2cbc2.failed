iio: core: Remove IIO_EV_TYPE_INSTANCE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] core: Remove IIO_EV_TYPE_INSTANCE (Tony Camuso) [1559170]
Rebuild_FUZZ: 92.96%
commit-author Irina Tirdea <irina.tirdea@intel.com>
commit 17a2cbc27981b85a09a48425c2614ae0cb7be8cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/17a2cbc2.failed

By introducing IIO_EV_TYPE_CHANGE, IIO_EV_TYPE_INSTANCE becomes redundant.
The effect of IIO_EV_TYPE_INSTANCE can be obtained by using IIO_EV_TYPE_CHANGE
with IIO_EV_INFO_VALUE set to 1.

Remove all instances of IIO_EV_TYPE_INSTANCE and replace them with
IIO_EV_TYPE_CHANGE where needed.

	Signed-off-by: Irina Tirdea <irina.tirdea@intel.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 17a2cbc27981b85a09a48425c2614ae0cb7be8cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-event.c
#	drivers/staging/iio/Documentation/iio_event_monitor.c
#	drivers/staging/iio/iio_simple_dummy.c
#	drivers/staging/iio/iio_simple_dummy_events.c
#	include/linux/iio/types.h
diff --cc drivers/iio/industrialio-event.c
index e2b5f552eb77,a4b397048f71..000000000000
--- a/drivers/iio/industrialio-event.c
+++ b/drivers/iio/industrialio-event.c
@@@ -185,6 -197,7 +185,10 @@@ static const char * const iio_ev_type_t
  	[IIO_EV_TYPE_ROC] = "roc",
  	[IIO_EV_TYPE_THRESH_ADAPTIVE] = "thresh_adaptive",
  	[IIO_EV_TYPE_MAG_ADAPTIVE] = "mag_adaptive",
++<<<<<<< HEAD
++=======
+ 	[IIO_EV_TYPE_CHANGE] = "change",
++>>>>>>> 17a2cbc27981 (iio: core: Remove IIO_EV_TYPE_INSTANCE)
  };
  
  static const char * const iio_ev_dir_text[] = {
diff --cc drivers/staging/iio/Documentation/iio_event_monitor.c
index 3a9b00087403,72c96aa6e992..000000000000
--- a/drivers/staging/iio/Documentation/iio_event_monitor.c
+++ b/drivers/staging/iio/Documentation/iio_event_monitor.c
@@@ -54,6 -59,7 +54,10 @@@ static const char * const iio_ev_type_t
  	[IIO_EV_TYPE_ROC] = "roc",
  	[IIO_EV_TYPE_THRESH_ADAPTIVE] = "thresh_adaptive",
  	[IIO_EV_TYPE_MAG_ADAPTIVE] = "mag_adaptive",
++<<<<<<< HEAD
++=======
+ 	[IIO_EV_TYPE_CHANGE] = "change",
++>>>>>>> 17a2cbc27981 (iio: core: Remove IIO_EV_TYPE_INSTANCE)
  };
  
  static const char * const iio_ev_dir_text[] = {
@@@ -129,6 -178,7 +133,10 @@@ static bool event_is_known(struct iio_e
  	case IIO_EV_TYPE_ROC:
  	case IIO_EV_TYPE_THRESH_ADAPTIVE:
  	case IIO_EV_TYPE_MAG_ADAPTIVE:
++<<<<<<< HEAD
++=======
+ 	case IIO_EV_TYPE_CHANGE:
++>>>>>>> 17a2cbc27981 (iio: core: Remove IIO_EV_TYPE_INSTANCE)
  		break;
  	default:
  		return false;
diff --cc drivers/staging/iio/iio_simple_dummy.c
index 0e8e02a3cf5b,e4520213f627..000000000000
--- a/drivers/staging/iio/iio_simple_dummy.c
+++ b/drivers/staging/iio/iio_simple_dummy.c
@@@ -57,6 -57,48 +57,51 @@@ static const struct iio_dummy_accel_cal
  	{ 733, 13, 0x9 }, /* 733.000013 */
  };
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_IIO_SIMPLE_DUMMY_EVENTS
+ 
+ /*
+  * simple event - triggered when value rises above
+  * a threshold
+  */
+ static const struct iio_event_spec iio_dummy_event = {
+ 	.type = IIO_EV_TYPE_THRESH,
+ 	.dir = IIO_EV_DIR_RISING,
+ 	.mask_separate = BIT(IIO_EV_INFO_VALUE) | BIT(IIO_EV_INFO_ENABLE),
+ };
+ 
+ /*
+  * simple step detect event - triggered when a step is detected
+  */
+ static const struct iio_event_spec step_detect_event = {
+ 	.type = IIO_EV_TYPE_CHANGE,
+ 	.dir = IIO_EV_DIR_NONE,
+ 	.mask_separate = BIT(IIO_EV_INFO_ENABLE),
+ };
+ 
+ /*
+  * simple transition event - triggered when the reported running confidence
+  * value rises above a threshold value
+  */
+ static const struct iio_event_spec iio_running_event = {
+ 	.type = IIO_EV_TYPE_THRESH,
+ 	.dir = IIO_EV_DIR_RISING,
+ 	.mask_separate = BIT(IIO_EV_INFO_VALUE) | BIT(IIO_EV_INFO_ENABLE),
+ };
+ 
+ /*
+  * simple transition event - triggered when the reported walking confidence
+  * value falls under a threshold value
+  */
+ static const struct iio_event_spec iio_walking_event = {
+ 	.type = IIO_EV_TYPE_THRESH,
+ 	.dir = IIO_EV_DIR_FALLING,
+ 	.mask_separate = BIT(IIO_EV_INFO_VALUE) | BIT(IIO_EV_INFO_ENABLE),
+ };
+ #endif
+ 
++>>>>>>> 17a2cbc27981 (iio: core: Remove IIO_EV_TYPE_INSTANCE)
  /*
   * iio_dummy_channels - Description of available channels
   *
diff --cc drivers/staging/iio/iio_simple_dummy_events.c
index 317b77465db4,a5cd3bb219fe..000000000000
--- a/drivers/staging/iio/iio_simple_dummy_events.c
+++ b/drivers/staging/iio/iio_simple_dummy_events.c
@@@ -65,6 -72,22 +65,25 @@@ int iio_simple_dummy_write_event_config
  				st->event_en = state;
  			else
  				return -EINVAL;
++<<<<<<< HEAD
++=======
+ 		default:
+ 			return -EINVAL;
+ 		}
+ 		break;
+ 	case IIO_ACTIVITY:
+ 		switch (type) {
+ 		case IIO_EV_TYPE_THRESH:
+ 			st->event_en = state;
+ 			break;
+ 		default:
+ 			return -EINVAL;
+ 		}
+ 	case IIO_STEPS:
+ 		switch (type) {
+ 		case IIO_EV_TYPE_CHANGE:
+ 			st->event_en = state;
++>>>>>>> 17a2cbc27981 (iio: core: Remove IIO_EV_TYPE_INSTANCE)
  			break;
  		default:
  			return -EINVAL;
@@@ -129,11 -164,50 +148,58 @@@ int iio_simple_dummy_write_event_value(
  static irqreturn_t iio_simple_dummy_event_handler(int irq, void *private)
  {
  	struct iio_dev *indio_dev = private;
++<<<<<<< HEAD
 +	iio_push_event(indio_dev,
 +		       IIO_EVENT_CODE(IIO_VOLTAGE, 0, 0,
 +				      IIO_EV_DIR_RISING,
 +				      IIO_EV_TYPE_THRESH, 0, 0, 0),
 +		       iio_get_time_ns());
++=======
+ 	struct iio_dummy_state *st = iio_priv(indio_dev);
+ 
+ 	dev_dbg(&indio_dev->dev, "id %x event %x\n",
+ 		st->regs->reg_id, st->regs->reg_data);
+ 
+ 	switch (st->regs->reg_data) {
+ 	case 0:
+ 		iio_push_event(indio_dev,
+ 			       IIO_EVENT_CODE(IIO_VOLTAGE, 0, 0,
+ 					      IIO_EV_DIR_RISING,
+ 					      IIO_EV_TYPE_THRESH, 0, 0, 0),
+ 			       iio_get_time_ns());
+ 		break;
+ 	case 1:
+ 		if (st->activity_running > st->event_val)
+ 			iio_push_event(indio_dev,
+ 				       IIO_EVENT_CODE(IIO_ACTIVITY, 0,
+ 						      IIO_MOD_RUNNING,
+ 						      IIO_EV_DIR_RISING,
+ 						      IIO_EV_TYPE_THRESH,
+ 						      0, 0, 0),
+ 				       iio_get_time_ns());
+ 		break;
+ 	case 2:
+ 		if (st->activity_walking < st->event_val)
+ 			iio_push_event(indio_dev,
+ 				       IIO_EVENT_CODE(IIO_ACTIVITY, 0,
+ 						      IIO_MOD_WALKING,
+ 						      IIO_EV_DIR_FALLING,
+ 						      IIO_EV_TYPE_THRESH,
+ 						      0, 0, 0),
+ 				       iio_get_time_ns());
+ 		break;
+ 	case 3:
+ 		iio_push_event(indio_dev,
+ 			       IIO_EVENT_CODE(IIO_STEPS, 0, IIO_NO_MOD,
+ 					      IIO_EV_DIR_NONE,
+ 					      IIO_EV_TYPE_CHANGE, 0, 0, 0),
+ 			       iio_get_time_ns());
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
++>>>>>>> 17a2cbc27981 (iio: core: Remove IIO_EV_TYPE_INSTANCE)
  	return IRQ_HANDLED;
  }
  
diff --cc include/linux/iio/types.h
index 63fb0a6c6ca4,580ed5bdb3fa..000000000000
--- a/include/linux/iio/types.h
+++ b/include/linux/iio/types.h
@@@ -73,6 -78,7 +73,10 @@@ enum iio_event_type 
  	IIO_EV_TYPE_ROC,
  	IIO_EV_TYPE_THRESH_ADAPTIVE,
  	IIO_EV_TYPE_MAG_ADAPTIVE,
++<<<<<<< HEAD
++=======
+ 	IIO_EV_TYPE_CHANGE,
++>>>>>>> 17a2cbc27981 (iio: core: Remove IIO_EV_TYPE_INSTANCE)
  };
  
  enum iio_event_info {
* Unmerged path drivers/iio/industrialio-event.c
* Unmerged path drivers/staging/iio/Documentation/iio_event_monitor.c
* Unmerged path drivers/staging/iio/iio_simple_dummy.c
* Unmerged path drivers/staging/iio/iio_simple_dummy_events.c
* Unmerged path include/linux/iio/types.h
