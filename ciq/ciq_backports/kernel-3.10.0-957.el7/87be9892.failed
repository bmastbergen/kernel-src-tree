fm10k: prefer %s and __func__ for diagnostic prints

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] fm10k: prefer s and __func__ for diagnostic prints (Neil Horman) [1518116]
Rebuild_FUZZ: 99.01%
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 87be98927eb0bfa5484dfbe5ba2f6b7f91dd9187
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/87be9892.failed

Don't hard code the function names in the diagnostic output when these
reset related routines fail. Instead, use %s and __func__ so that future
refactors don't need to change the print outs.

Additionally, while we are here, add missing function header comments
for the new reset_prepare and reset_done function handlers.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Krishneil Singh <krishneil.k.singh@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 87be98927eb0bfa5484dfbe5ba2f6b7f91dd9187)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/fm10k/fm10k_pci.c
diff --cc drivers/net/ethernet/intel/fm10k/fm10k_pci.c
index 7aebf7ce9f97,1e9ae3197b17..000000000000
--- a/drivers/net/ethernet/intel/fm10k/fm10k_pci.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_pci.c
@@@ -2598,29 -2594,32 +2598,55 @@@ static void fm10k_io_resume(struct pci_
  }
  
  /**
++<<<<<<< HEAD
 + * fm10k_io_reset_notify - called when PCI function is reset
 + * @pdev: Pointer to PCI device
 + *
 + * This callback is called when the PCI function is reset such as from
 + * /sys/class/net/<enpX>/device/reset or similar. When prepare is true, it
 + * means we should prepare for a function reset. If prepare is false, it means
 + * the function reset just occurred.
 + */
 +static void fm10k_io_reset_notify(struct pci_dev *pdev, bool prepare)
++=======
+  * fm10k_io_reset_prepare - called when PCI function is about to be reset
+  * @pdev: Pointer to PCI device
+  *
+  * This callback is called when the PCI function is about to be reset,
+  * allowing the device driver to prepare for it.
+  */
+ static void fm10k_io_reset_prepare(struct pci_dev *pdev)
+ {
+ 	/* warn incase we have any active VF devices */
+ 	if (pci_num_vf(pdev))
+ 		dev_warn(&pdev->dev,
+ 			 "PCIe FLR may cause issues for any active VF devices\n");
+ 	fm10k_prepare_suspend(pci_get_drvdata(pdev));
+ }
+ 
+ /**
+  * fm10k_io_reset_done - called when PCI function has finished resetting
+  * @pdev: Pointer to PCI device
+  *
+  * This callback is called just after the PCI function is reset, such as via
+  * /sys/class/net/<enpX>/device/reset or similar.
+  */
+ static void fm10k_io_reset_done(struct pci_dev *pdev)
++>>>>>>> 87be98927eb0 (fm10k: prefer %s and __func__ for diagnostic prints)
  {
  	struct fm10k_intfc *interface = pci_get_drvdata(pdev);
 -	int err = fm10k_handle_resume(interface);
 +	int err = 0;
 +
 +	if (prepare) {
 +		/* warn incase we have any active VF devices */
 +		if (pci_num_vf(pdev))
 +			dev_warn(&pdev->dev,
 +				 "PCIe FLR may cause issues for any active VF devices\n");
 +
 +		fm10k_prepare_suspend(interface);
 +	} else {
 +		err = fm10k_handle_resume(interface);
 +	}
  
  	if (err) {
  		dev_warn(&pdev->dev,
* Unmerged path drivers/net/ethernet/intel/fm10k/fm10k_pci.c
