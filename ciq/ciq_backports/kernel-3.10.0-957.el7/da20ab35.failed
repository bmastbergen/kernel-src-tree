x86/entry: Use SYSCALL_DEFINE() macros for sys_modify_ldt()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] entry: Use SYSCALL_DEFINE() macros for sys_modify_ldt() (Gopal Tiwari) [1456572]
Rebuild_FUZZ: 96.49%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit da20ab35180780e4a6eadc804544f1fa967f3567
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/da20ab35.failed

We do not have tracepoints for sys_modify_ldt() because we define
it directly instead of using the normal SYSCALL_DEFINEx() macros.

However, there is a reason sys_modify_ldt() does not use the macros:
it has an 'int' return type instead of 'unsigned long'.  This is
a bug, but it's a bug cemented in the ABI.

What does this mean?  If we return -EINVAL from a function that
returns 'int', we have 0x00000000ffffffea in %rax.  But, if we
return -EINVAL from a function returning 'unsigned long', we end
up with 0xffffffffffffffea in %rax, which is wrong.

To work around this and maintain the 'int' behavior while using
the SYSCALL_DEFINEx() macros, so we add a cast to 'unsigned int'
in both implementations of sys_modify_ldt().

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Andy Lutomirski <luto@kernel.org>
	Reviewed-by: Brian Gerst <brgerst@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20171018172107.1A79C532@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit da20ab35180780e4a6eadc804544f1fa967f3567)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/ldt.c
#	arch/x86/um/ldt.c
diff --cc arch/x86/kernel/ldt.c
index 6b6d22561e6f,0402d44deb4d..000000000000
--- a/arch/x86/kernel/ldt.c
+++ b/arch/x86/kernel/ldt.c
@@@ -10,9 -10,10 +10,14 @@@
  #include <linux/gfp.h>
  #include <linux/sched.h>
  #include <linux/string.h>
 +#include <linux/kaiser.h>
  #include <linux/mm.h>
  #include <linux/smp.h>
++<<<<<<< HEAD
++=======
+ #include <linux/syscalls.h>
+ #include <linux/slab.h>
++>>>>>>> da20ab351807 (x86/entry: Use SYSCALL_DEFINE() macros for sys_modify_ldt())
  #include <linux/vmalloc.h>
  #include <linux/uaccess.h>
  
diff --cc arch/x86/um/ldt.c
index 8e08176f0bcb,3ee234b6234d..000000000000
--- a/arch/x86/um/ldt.c
+++ b/arch/x86/um/ldt.c
@@@ -6,14 -6,17 +6,19 @@@
  #include <linux/mm.h>
  #include <linux/sched.h>
  #include <linux/slab.h>
++<<<<<<< HEAD
++=======
+ #include <linux/syscalls.h>
+ #include <linux/uaccess.h>
++>>>>>>> da20ab351807 (x86/entry: Use SYSCALL_DEFINE() macros for sys_modify_ldt())
  #include <asm/unistd.h>
  #include <os.h>
 +#include <proc_mm.h>
  #include <skas.h>
 +#include <skas_ptrace.h>
  #include <sysdep/tls.h>
  
 -static inline int modify_ldt (int func, void *ptr, unsigned long bytecount)
 -{
 -	return syscall(__NR_modify_ldt, func, ptr, bytecount);
 -}
 +extern int modify_ldt(int func, void *ptr, unsigned long bytecount);
  
  static long write_ldt_entry(struct mm_id *mm_idp, int func,
  		     struct user_desc *desc, void **addr, int done)
diff --git a/arch/x86/include/asm/syscalls.h b/arch/x86/include/asm/syscalls.h
index 2917a6452c49..6bd4f7fca7df 100644
--- a/arch/x86/include/asm/syscalls.h
+++ b/arch/x86/include/asm/syscalls.h
@@ -21,7 +21,7 @@ asmlinkage long sys_ioperm(unsigned long, unsigned long, int);
 asmlinkage long sys_iopl(unsigned int);
 
 /* kernel/ldt.c */
-asmlinkage int sys_modify_ldt(int, void __user *, unsigned long);
+asmlinkage long sys_modify_ldt(int, void __user *, unsigned long);
 
 /* kernel/signal.c */
 long sys_rt_sigreturn(void);
* Unmerged path arch/x86/kernel/ldt.c
* Unmerged path arch/x86/um/ldt.c
