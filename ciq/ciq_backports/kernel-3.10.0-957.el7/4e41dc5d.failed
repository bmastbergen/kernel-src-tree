bnxt_en: Refactor bnxt_need_reserve_rings().

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Refactor bnxt_need_reserve_rings() (Jonathan Toppins) [1526120]
Rebuild_FUZZ: 98.85%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 4e41dc5deb6e5c36ac5f2e49575485920037b2aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/4e41dc5d.failed

Refactor bnxt_need_reserve_rings() slightly so that __bnxt_reserve_rings()
can call it and remove some duplicated code.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4e41dc5deb6e5c36ac5f2e49575485920037b2aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index ce115696763b,a6237dd8cacd..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -4763,46 -4843,50 +4780,77 @@@ static int __bnxt_reserve_rings(struct 
  	return rc;
  }
  
++<<<<<<< HEAD
 +static bool bnxt_need_reserve_rings(struct bnxt *bp)
 +{
 +	struct bnxt_hw_resc *hw_resc = &bp->hw_resc;
 +	int rx = bp->rx_nr_rings;
 +	int vnic = 1;
 +
 +	if (bp->hwrm_spec_code < 0x10601)
 +		return false;
 +
 +	if (hw_resc->resv_tx_rings != bp->tx_nr_rings)
 +		return true;
 +
 +	if (bp->flags & BNXT_FLAG_RFS)
 +		vnic = rx + 1;
 +	if (bp->flags & BNXT_FLAG_AGG_RINGS)
 +		rx <<= 1;
 +	if ((bp->flags & BNXT_FLAG_NEW_RM) &&
 +	    (hw_resc->resv_rx_rings != rx ||
 +	     hw_resc->resv_cp_rings != bp->cp_nr_rings ||
 +	     hw_resc->resv_vnics != vnic))
 +		return true;
 +	return false;
 +}
 +
 +static int bnxt_hwrm_check_tx_rings(struct bnxt *bp, int tx_rings)
++=======
+ static int bnxt_hwrm_check_vf_rings(struct bnxt *bp, int tx_rings, int rx_rings,
+ 				    int ring_grps, int cp_rings, int vnics)
+ {
+ 	struct hwrm_func_vf_cfg_input req = {0};
+ 	u32 flags;
+ 	int rc;
+ 
+ 	if (!(bp->flags & BNXT_FLAG_NEW_RM))
+ 		return 0;
+ 
+ 	__bnxt_hwrm_reserve_vf_rings(bp, &req, tx_rings, rx_rings, ring_grps,
+ 				     cp_rings, vnics);
+ 	flags = FUNC_VF_CFG_REQ_FLAGS_TX_ASSETS_TEST |
+ 		FUNC_VF_CFG_REQ_FLAGS_RX_ASSETS_TEST |
+ 		FUNC_VF_CFG_REQ_FLAGS_CMPL_ASSETS_TEST |
+ 		FUNC_VF_CFG_REQ_FLAGS_RING_GRP_ASSETS_TEST |
+ 		FUNC_VF_CFG_REQ_FLAGS_STAT_CTX_ASSETS_TEST |
+ 		FUNC_VF_CFG_REQ_FLAGS_VNIC_ASSETS_TEST;
+ 
+ 	req.flags = cpu_to_le32(flags);
+ 	rc = hwrm_send_message_silent(bp, &req, sizeof(req), HWRM_CMD_TIMEOUT);
+ 	if (rc)
+ 		return -ENOMEM;
+ 	return 0;
+ }
+ 
+ static int bnxt_hwrm_check_pf_rings(struct bnxt *bp, int tx_rings, int rx_rings,
+ 				    int ring_grps, int cp_rings, int vnics)
++>>>>>>> 4e41dc5deb6e (bnxt_en: Refactor bnxt_need_reserve_rings().)
  {
  	struct hwrm_func_cfg_input req = {0};
 -	u32 flags;
  	int rc;
  
 -	__bnxt_hwrm_reserve_pf_rings(bp, &req, tx_rings, rx_rings, ring_grps,
 -				     cp_rings, vnics);
 -	flags = FUNC_CFG_REQ_FLAGS_TX_ASSETS_TEST;
 -	if (bp->flags & BNXT_FLAG_NEW_RM)
 -		flags |= FUNC_CFG_REQ_FLAGS_RX_ASSETS_TEST |
 -			 FUNC_CFG_REQ_FLAGS_CMPL_ASSETS_TEST |
 -			 FUNC_CFG_REQ_FLAGS_RING_GRP_ASSETS_TEST |
 -			 FUNC_CFG_REQ_FLAGS_STAT_CTX_ASSETS_TEST |
 -			 FUNC_CFG_REQ_FLAGS_VNIC_ASSETS_TEST;
 +	if (bp->hwrm_spec_code < 0x10801)
 +		return 0;
  
 -	req.flags = cpu_to_le32(flags);
 +	if (BNXT_VF(bp))
 +		return 0;
 +
 +	bnxt_hwrm_cmd_hdr_init(bp, &req, HWRM_FUNC_CFG, -1, -1);
 +	req.fid = cpu_to_le16(0xffff);
 +	req.flags = cpu_to_le32(FUNC_CFG_REQ_FLAGS_TX_ASSETS_TEST);
 +	req.enables = cpu_to_le32(FUNC_CFG_REQ_ENABLES_NUM_TX_RINGS);
 +	req.num_tx_rings = cpu_to_le16(tx_rings);
  	rc = hwrm_send_message_silent(bp, &req, sizeof(req), HWRM_CMD_TIMEOUT);
  	if (rc)
  		return -ENOMEM;
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
