mmc: sdhci-pci: Use ACPI DSM to get driver strength for some Intel devices

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mmc] sdhci-pci: Use ACPI DSM to get driver strength for some Intel devices (Gopal Tiwari) [1456570]
Rebuild_FUZZ: 96.50%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 51ced59cc02e0d08f61772c888480b9b1749cef1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/51ced59c.failed

Make use  of an Intel ACPI _DSM that provides eMMC driver strength.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Tested-by: Ludovic Desroches <ludovic.desroches@microchip.com>
(cherry picked from commit 51ced59cc02e0d08f61772c888480b9b1749cef1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-pci-core.c
diff --cc drivers/mmc/host/sdhci-pci-core.c
index 649bde4708b7,351920f4ec42..000000000000
--- a/drivers/mmc/host/sdhci-pci-core.c
+++ b/drivers/mmc/host/sdhci-pci-core.c
@@@ -263,6 -259,82 +263,85 @@@ static const struct sdhci_pci_fixes sdh
  	.probe_slot	= pch_hc_probe_slot,
  };
  
++<<<<<<< HEAD
++=======
+ enum {
+ 	INTEL_DSM_FNS		=  0,
+ 	INTEL_DSM_DRV_STRENGTH	=  9,
+ 	INTEL_DSM_D3_RETUNE	= 10,
+ };
+ 
+ struct intel_host {
+ 	u32	dsm_fns;
+ 	int	drv_strength;
+ 	bool	d3_retune;
+ };
+ 
+ const u8 intel_dsm_uuid[] = {
+ 	0xA5, 0x3E, 0xC1, 0xF6, 0xCD, 0x65, 0x1F, 0x46,
+ 	0xAB, 0x7A, 0x29, 0xF7, 0xE8, 0xD5, 0xBD, 0x61,
+ };
+ 
+ static int __intel_dsm(struct intel_host *intel_host, struct device *dev,
+ 		       unsigned int fn, u32 *result)
+ {
+ 	union acpi_object *obj;
+ 	int err = 0;
+ 
+ 	obj = acpi_evaluate_dsm(ACPI_HANDLE(dev), intel_dsm_uuid, 0, fn, NULL);
+ 	if (!obj)
+ 		return -EOPNOTSUPP;
+ 
+ 	if (obj->type != ACPI_TYPE_BUFFER || obj->buffer.length < 1) {
+ 		err = -EINVAL;
+ 		goto out;
+ 	}
+ 
+ 	if (obj->buffer.length >= 4)
+ 		*result = *(u32 *)obj->buffer.pointer;
+ 	else if (obj->buffer.length >= 2)
+ 		*result = *(u16 *)obj->buffer.pointer;
+ 	else
+ 		*result = *(u8 *)obj->buffer.pointer;
+ out:
+ 	ACPI_FREE(obj);
+ 
+ 	return err;
+ }
+ 
+ static int intel_dsm(struct intel_host *intel_host, struct device *dev,
+ 		     unsigned int fn, u32 *result)
+ {
+ 	if (fn > 31 || !(intel_host->dsm_fns & (1 << fn)))
+ 		return -EOPNOTSUPP;
+ 
+ 	return __intel_dsm(intel_host, dev, fn, result);
+ }
+ 
+ static void intel_dsm_init(struct intel_host *intel_host, struct device *dev,
+ 			   struct mmc_host *mmc)
+ {
+ 	int err;
+ 	u32 val;
+ 
+ 	err = __intel_dsm(intel_host, dev, INTEL_DSM_FNS, &intel_host->dsm_fns);
+ 	if (err) {
+ 		pr_debug("%s: DSM not supported, error %d\n",
+ 			 mmc_hostname(mmc), err);
+ 		return;
+ 	}
+ 
+ 	pr_debug("%s: DSM function mask %#x\n",
+ 		 mmc_hostname(mmc), intel_host->dsm_fns);
+ 
+ 	err = intel_dsm(intel_host, dev, INTEL_DSM_DRV_STRENGTH, &val);
+ 	intel_host->drv_strength = err ? 0 : val;
+ 
+ 	err = intel_dsm(intel_host, dev, INTEL_DSM_D3_RETUNE, &val);
+ 	intel_host->d3_retune = err ? true : !!val;
+ }
+ 
++>>>>>>> 51ced59cc02e (mmc: sdhci-pci: Use ACPI DSM to get driver strength for some Intel devices)
  static void sdhci_pci_int_hw_reset(struct sdhci_host *host)
  {
  	u8 reg;
* Unmerged path drivers/mmc/host/sdhci-pci-core.c
diff --git a/drivers/mmc/host/sdhci-pci-data.c b/drivers/mmc/host/sdhci-pci-data.c
index 56fddc622a54..a611217769f5 100644
--- a/drivers/mmc/host/sdhci-pci-data.c
+++ b/drivers/mmc/host/sdhci-pci-data.c
@@ -3,6 +3,3 @@
 
 struct sdhci_pci_data *(*sdhci_pci_get_data)(struct pci_dev *pdev, int slotno);
 EXPORT_SYMBOL_GPL(sdhci_pci_get_data);
-
-int sdhci_pci_spt_drive_strength;
-EXPORT_SYMBOL_GPL(sdhci_pci_spt_drive_strength);
