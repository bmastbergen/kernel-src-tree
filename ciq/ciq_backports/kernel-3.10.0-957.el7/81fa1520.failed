md: raid10: refactor code of read reshape's .bi_end_io

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [md] raid10: refactor code of read reshape's .bi_end_io (Nigel Croxon) [1494474]
Rebuild_FUZZ: 96.15%
commit-author Ming Lei <tom.leiming@gmail.com>
commit 81fa152008ac903877b59bcc7d16777c3292c206
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/81fa1520.failed

reshape read request is a bit special and requires one extra
bio which isn't allocated from r10buf_pool.

Refactor the .bi_end_io for read reshape, so that we can use
raid10's resync page mangement approach easily in the following
patches.

	Signed-off-by: Ming Lei <tom.leiming@gmail.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit 81fa152008ac903877b59bcc7d16777c3292c206)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid10.c
diff --cc drivers/md/raid10.c
index e568b64df05f,94f5c368c683..000000000000
--- a/drivers/md/raid10.c
+++ b/drivers/md/raid10.c
@@@ -1980,19 -1889,11 +1980,15 @@@ abort
  	return err;
  }
  
++<<<<<<< HEAD
 +static void end_sync_read(struct bio *bio, int error)
++=======
+ static void __end_sync_read(struct r10bio *r10_bio, struct bio *bio, int d)
++>>>>>>> 81fa152008ac (md: raid10: refactor code of read reshape's .bi_end_io)
  {
- 	struct r10bio *r10_bio = bio->bi_private;
  	struct r10conf *conf = r10_bio->mddev->private;
- 	int d;
- 
- 	if (bio == r10_bio->master_bio) {
- 		/* this is a reshape read */
- 		d = r10_bio->read_slot; /* really the read dev */
- 	} else
- 		d = find_bio_disk(conf, r10_bio, bio, NULL, NULL);
  
 -	if (!bio->bi_error)
 +	if (test_bit(BIO_UPTODATE, &bio->bi_flags))
  		set_bit(R10BIO_Uptodate, &r10_bio->state);
  	else
  		/* The write handler will notice the lack of
@@@ -4551,15 -4443,15 +4563,20 @@@ read_more
  	read_bio = bio_alloc_mddev(GFP_KERNEL, RESYNC_PAGES, mddev);
  
  	read_bio->bi_bdev = rdev->bdev;
 -	read_bio->bi_iter.bi_sector = (r10_bio->devs[r10_bio->read_slot].addr
 +	read_bio->bi_sector = (r10_bio->devs[r10_bio->read_slot].addr
  			       + rdev->data_offset);
  	read_bio->bi_private = r10_bio;
++<<<<<<< HEAD
 +	read_bio->bi_end_io = end_sync_read;
 +	read_bio->bi_rw = READ;
++=======
+ 	read_bio->bi_end_io = end_reshape_read;
+ 	bio_set_op_attrs(read_bio, REQ_OP_READ, 0);
++>>>>>>> 81fa152008ac (md: raid10: refactor code of read reshape's .bi_end_io)
  	read_bio->bi_flags &= (~0UL << BIO_RESET_BITS);
 -	read_bio->bi_error = 0;
 +	__set_bit(BIO_UPTODATE, &read_bio->bi_flags);
  	read_bio->bi_vcnt = 0;
 -	read_bio->bi_iter.bi_size = 0;
 +	read_bio->bi_size = 0;
  	r10_bio->master_bio = read_bio;
  	r10_bio->read_slot = r10_bio->devs[r10_bio->read_slot].devnum;
  
* Unmerged path drivers/md/raid10.c
