acpi, nfit: remove redundant __func__ in dev_dbg

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [acpi] nfit: remove redundant __func__ in dev_dbg (Jeff Moyer) [1515085]
Rebuild_FUZZ: 93.33%
commit-author Johannes Thumshirn <jthumshirn@suse.de>
commit b814735f5ca477a6d4f446f00d16da4a18e33bf5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b814735f.failed

Dynamic debug can be instructed to add the function name to the debug
output using the +f switch, so there is no need for the nfit module to
do it again. If a user decides to add the +f switch for nfit's dynamic
debug this results in double prints of the function name like the
following:

[ 2391.935383] acpi_nfit_ctl: nfit ACPI0012:00: acpi_nfit_ctl:nmem8 cmd: 10: func: 1 input length: 0

Thus remove the stray __func__ printing.

	Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit b814735f5ca477a6d4f446f00d16da4a18e33bf5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/nfit/core.c
diff --cc drivers/acpi/nfit/core.c
index e885d4da7d12,39ad06143e78..000000000000
--- a/drivers/acpi/nfit/core.c
+++ b/drivers/acpi/nfit/core.c
@@@ -471,12 -495,18 +471,11 @@@ int acpi_nfit_ctl(struct nvdimm_bus_des
  
  		out_obj = acpi_label_write(handle, p->in_offset, p->in_length,
  				p->in_buf);
 -	} else {
 -		u8 revid;
 -
 -		if (nvdimm)
 -			revid = nfit_dsm_revid(nfit_mem->family, func);
 -		else
 -			revid = 1;
 -		out_obj = acpi_evaluate_dsm(handle, guid, revid, func, &in_obj);
 -	}
 +	} else
 +		out_obj = acpi_evaluate_dsm(handle, guid->b, 1, func, &in_obj);
  
  	if (!out_obj) {
- 		dev_dbg(dev, "%s:%s _DSM failed cmd: %s\n", __func__, dimm_name,
- 				cmd_name);
+ 		dev_dbg(dev, "%s _DSM failed cmd: %s\n", dimm_name, cmd_name);
  		return -EINVAL;
  	}
  
@@@ -833,6 -837,18 +832,21 @@@ static bool add_flush(struct acpi_nfit_
  	return true;
  }
  
++<<<<<<< HEAD
++=======
+ static bool add_platform_cap(struct acpi_nfit_desc *acpi_desc,
+ 		struct acpi_nfit_capabilities *pcap)
+ {
+ 	struct device *dev = acpi_desc->dev;
+ 	u32 mask;
+ 
+ 	mask = (1 << (pcap->highest_capability + 1)) - 1;
+ 	acpi_desc->platform_cap = pcap->capabilities & mask;
+ 	dev_dbg(dev, "cap: %#x\n", acpi_desc->platform_cap);
+ 	return true;
+ }
+ 
++>>>>>>> b814735f5ca4 (acpi, nfit: remove redundant __func__ in dev_dbg)
  static void *add_table(struct acpi_nfit_desc *acpi_desc,
  		struct nfit_table_prev *prev, void *table, const void *end)
  {
@@@ -876,8 -892,12 +890,8 @@@
  			return err;
  		break;
  	case ACPI_NFIT_TYPE_SMBIOS:
- 		dev_dbg(dev, "%s: smbios\n", __func__);
+ 		dev_dbg(dev, "smbios\n");
  		break;
 -	case ACPI_NFIT_TYPE_CAPABILITIES:
 -		if (!add_platform_cap(acpi_desc, table))
 -			return err;
 -		break;
  	default:
  		dev_err(dev, "unknown table '%d' parsing nfit\n", hdr->type);
  		break;
@@@ -2332,9 -2354,9 +2346,9 @@@ static int acpi_nfit_blk_region_enable(
  	nfit_blk->bdw_offset = nfit_mem->bdw->offset;
  	mmio = &nfit_blk->mmio[BDW];
  	mmio->addr.base = devm_nvdimm_memremap(dev, nfit_mem->spa_bdw->address,
 -                        nfit_mem->spa_bdw->length, nd_blk_memremap_flags(ndbr));
 +                        nfit_mem->spa_bdw->length, ARCH_MEMREMAP_PMEM);
  	if (!mmio->addr.base) {
- 		dev_dbg(dev, "%s: %s failed to map bdw\n", __func__,
+ 		dev_dbg(dev, "%s failed to map bdw\n",
  				nvdimm_name(nvdimm));
  		return -ENOMEM;
  	}
* Unmerged path drivers/acpi/nfit/core.c
diff --git a/drivers/acpi/nfit/mce.c b/drivers/acpi/nfit/mce.c
index b92921439657..e9626bf6ca29 100644
--- a/drivers/acpi/nfit/mce.c
+++ b/drivers/acpi/nfit/mce.c
@@ -51,9 +51,8 @@ static int nfit_handle_mce(struct notifier_block *nb, unsigned long val,
 			if ((spa->address + spa->length - 1) < mce->addr)
 				continue;
 			found_match = 1;
-			dev_dbg(dev, "%s: addr in SPA %d (0x%llx, 0x%llx)\n",
-				__func__, spa->range_index, spa->address,
-				spa->length);
+			dev_dbg(dev, "addr in SPA %d (0x%llx, 0x%llx)\n",
+				spa->range_index, spa->address, spa->length);
 			/*
 			 * We can break at the first match because we're going
 			 * to rescan all the SPA ranges. There shouldn't be any
