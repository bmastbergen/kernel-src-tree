iio: buffer: Drop get_length callback

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] buffer: Drop get_length callback (Tony Camuso) [1559170]
Rebuild_FUZZ: 92.75%
commit-author Lars-Peter Clausen <lars@metafoo.de>
commit 374956600ecbedf5ca29c76bde114160eb805091
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/37495660.failed

We already do have the length field in the struct iio_buffer which is
expected to be in sync with the current size of the buffer. And currently
all implementations of the get_length callback either return this field or a
constant number.

This patch removes the get_length callback and replaces all occurrences in
the IIO core with directly accessing the length field of the buffer.

	Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 374956600ecbedf5ca29c76bde114160eb805091)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/kfifo_buf.c
#	drivers/staging/iio/accel/sca3000_ring.c
diff --cc drivers/iio/kfifo_buf.c
index 1bea41bcbdc6,b20a9cfbc8ed..000000000000
--- a/drivers/iio/kfifo_buf.c
+++ b/drivers/iio/kfifo_buf.c
@@@ -42,30 -47,6 +42,33 @@@ error_ret
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int iio_get_length_kfifo(struct iio_buffer *r)
 +{
 +	return r->length;
 +}
 +
 +static IIO_BUFFER_ENABLE_ATTR;
 +static IIO_BUFFER_LENGTH_ATTR;
 +
 +static struct attribute *iio_kfifo_attributes[] = {
 +	&dev_attr_length.attr,
 +	&dev_attr_enable.attr,
 +	NULL,
 +};
 +
 +static struct attribute_group iio_kfifo_attribute_group = {
 +	.attrs = iio_kfifo_attributes,
 +	.name = "buffer",
 +};
 +
 +static int iio_get_bytes_per_datum_kfifo(struct iio_buffer *r)
 +{
 +	return r->bytes_per_datum;
 +}
 +
++=======
++>>>>>>> 374956600ecb (iio: buffer: Drop get_length callback)
  static int iio_mark_update_needed_kfifo(struct iio_buffer *r)
  {
  	struct iio_kfifo *kf = iio_to_kfifo(r);
@@@ -133,11 -133,11 +136,10 @@@ static int iio_read_first_n_kfifo(struc
  static const struct iio_buffer_access_funcs kfifo_access_funcs = {
  	.store_to = &iio_store_to_kfifo,
  	.read_first_n = &iio_read_first_n_kfifo,
 -	.data_available = iio_kfifo_buf_data_available,
  	.request_update = &iio_request_update_kfifo,
 +	.get_bytes_per_datum = &iio_get_bytes_per_datum_kfifo,
  	.set_bytes_per_datum = &iio_set_bytes_per_datum_kfifo,
- 	.get_length = &iio_get_length_kfifo,
  	.set_length = &iio_set_length_kfifo,
 -	.release = &iio_kfifo_buffer_release,
  };
  
  struct iio_buffer *iio_kfifo_allocate(struct iio_dev *indio_dev)
diff --cc drivers/staging/iio/accel/sca3000_ring.c
index 3e5e860aa38e,f76a26885808..000000000000
--- a/drivers/staging/iio/accel/sca3000_ring.c
+++ b/drivers/staging/iio/accel/sca3000_ring.c
@@@ -129,21 -129,11 +129,25 @@@ error_ret
  	return ret ? ret : num_read;
  }
  
++<<<<<<< HEAD
 +/* This is only valid with all 3 elements enabled */
 +static int sca3000_ring_get_length(struct iio_buffer *r)
 +{
 +	return 64;
 +}
 +
 +/* only valid if resolution is kept at 11bits */
 +static int sca3000_ring_get_bytes_per_datum(struct iio_buffer *r)
++=======
+ static bool sca3000_ring_buf_data_available(struct iio_buffer *r)
++>>>>>>> 374956600ecb (iio: buffer: Drop get_length callback)
  {
 -	return r->stufftoread;
 +	return 6;
  }
  
 +static IIO_BUFFER_ENABLE_ATTR;
 +static IIO_BUFFER_LENGTH_ATTR;
 +
  /**
   * sca3000_query_ring_int() is the hardware ring status interrupt enabled
   **/
@@@ -259,7 -242,8 +263,12 @@@ static struct iio_buffer *sca3000_rb_al
  	ring->private = indio_dev;
  	buf = &ring->buf;
  	buf->stufftoread = 0;
++<<<<<<< HEAD
 +	buf->attrs = &sca3000_ring_attr;
++=======
+ 	buf->length = 64;
+ 	buf->attrs = sca3000_ring_attributes;
++>>>>>>> 374956600ecb (iio: buffer: Drop get_length callback)
  	iio_buffer_init(buf);
  
  	return buf;
@@@ -272,8 -256,8 +281,13 @@@ static inline void sca3000_rb_free(stru
  
  static const struct iio_buffer_access_funcs sca3000_ring_access_funcs = {
  	.read_first_n = &sca3000_read_first_n_hw_rb,
++<<<<<<< HEAD
 +	.get_length = &sca3000_ring_get_length,
 +	.get_bytes_per_datum = &sca3000_ring_get_bytes_per_datum,
++=======
+ 	.data_available = sca3000_ring_buf_data_available,
+ 	.release = sca3000_ring_release,
++>>>>>>> 374956600ecb (iio: buffer: Drop get_length callback)
  };
  
  int sca3000_configure_ring(struct iio_dev *indio_dev)
diff --git a/drivers/iio/industrialio-buffer.c b/drivers/iio/industrialio-buffer.c
index 5ef822987c05..0ef83bbfb851 100644
--- a/drivers/iio/industrialio-buffer.c
+++ b/drivers/iio/industrialio-buffer.c
@@ -483,11 +483,7 @@ ssize_t iio_buffer_read_length(struct device *dev,
 	struct iio_dev *indio_dev = dev_to_iio_dev(dev);
 	struct iio_buffer *buffer = indio_dev->buffer;
 
-	if (buffer->access->get_length)
-		return sprintf(buf, "%d\n",
-			       buffer->access->get_length(buffer));
-
-	return 0;
+	return sprintf(buf, "%d\n", buffer->length);
 }
 EXPORT_SYMBOL(iio_buffer_read_length);
 
@@ -505,9 +501,8 @@ ssize_t iio_buffer_write_length(struct device *dev,
 	if (ret)
 		return ret;
 
-	if (buffer->access->get_length)
-		if (val == buffer->access->get_length(buffer))
-			return len;
+	if (val == buffer->length)
+		return len;
 
 	mutex_lock(&indio_dev->mlock);
 	if (iio_buffer_is_active(indio_dev->buffer)) {
* Unmerged path drivers/iio/kfifo_buf.c
diff --git a/drivers/staging/iio/Documentation/ring.txt b/drivers/staging/iio/Documentation/ring.txt
index e1da43381d0e..28215849918f 100644
--- a/drivers/staging/iio/Documentation/ring.txt
+++ b/drivers/staging/iio/Documentation/ring.txt
@@ -42,6 +42,6 @@ request_update
 get_bytes_per_datum, set_bytes_per_datum
   Get/set the number of bytes for a complete scan. (All samples + timestamp)
 
-get_length / set_length
-  Get/set the number of complete scans that may be held by the buffer.
+set_length
+  Set the number of complete scans that may be held by the buffer.
 
* Unmerged path drivers/staging/iio/accel/sca3000_ring.c
diff --git a/include/linux/iio/buffer.h b/include/linux/iio/buffer.h
index 26890e4a025c..032f630ceadb 100644
--- a/include/linux/iio/buffer.h
+++ b/include/linux/iio/buffer.h
@@ -26,7 +26,6 @@ struct iio_buffer;
  *			storage.
  * @get_bytes_per_datum:get current bytes per datum
  * @set_bytes_per_datum:set number of bytes per datum
- * @get_length:		get number of datums in buffer
  * @set_length:		set number of datums in buffer
  *
  * The purpose of this structure is to make the buffer element
@@ -48,7 +47,6 @@ struct iio_buffer_access_funcs {
 
 	int (*get_bytes_per_datum)(struct iio_buffer *buffer);
 	int (*set_bytes_per_datum)(struct iio_buffer *buffer, size_t bpd);
-	int (*get_length)(struct iio_buffer *buffer);
 	int (*set_length)(struct iio_buffer *buffer, int length);
 };
 
