iio:core: Fix bug in length of event info_mask and catch unhandled bits set in masks.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] core: Fix bug in length of event info_mask and catch unhandled bits set in masks (Tony Camuso) [1559170]
Rebuild_FUZZ: 96.97%
commit-author Jonathan Cameron <jic23@kernel.org>
commit ef4b4856593fc3d9d169bededdaf7acf62f83a52
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ef4b4856.failed

The unhandled bits case was highlighted by smatch:
  CHECK   drivers/iio/industrialio-core.c
drivers/iio/industrialio-core.c:719 iio_device_add_info_mask_type() error: buffer overflow 'iio_chan_info_postfix' 17 <= 31
  CC [M]  drivers/iio/industrialio-core.o
  CHECK   drivers/iio/industrialio-event.c
drivers/iio/industrialio-event.c:327 iio_device_add_event() error: buffer overflow 'iio_ev_info_text' 3 <= 3

The incorrect limit for the for_each_set_bit loop was noticed whilst fixing
this other case.  Note that as we only have 3 possible entries a the moment
and the value was set to 4, the bug would not have any effect currently.
It will bite fairly soon though, so best fix it now.

	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
	Cc: Lars-Peter Clausen <lars@metafoo.de>
	Cc: Dan Carpenter <dan.carpenter@oracle.com>
(cherry picked from commit ef4b4856593fc3d9d169bededdaf7acf62f83a52)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/industrialio-core.c
diff --cc drivers/iio/industrialio-core.c
index 0f2422de08e9,184444db62ac..000000000000
--- a/drivers/iio/industrialio-core.c
+++ b/drivers/iio/industrialio-core.c
@@@ -696,6 -708,34 +696,37 @@@ error_ret
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static int iio_device_add_info_mask_type(struct iio_dev *indio_dev,
+ 					 struct iio_chan_spec const *chan,
+ 					 enum iio_shared_by shared_by,
+ 					 const long *infomask)
+ {
+ 	int i, ret, attrcount = 0;
+ 
+ 	for_each_set_bit(i, infomask, sizeof(infomask)*8) {
+ 		if (i >= ARRAY_SIZE(iio_chan_info_postfix))
+ 			return -EINVAL;
+ 		ret = __iio_add_chan_devattr(iio_chan_info_postfix[i],
+ 					     chan,
+ 					     &iio_read_channel_info,
+ 					     &iio_write_channel_info,
+ 					     i,
+ 					     shared_by,
+ 					     &indio_dev->dev,
+ 					     &indio_dev->channel_attr_list);
+ 		if ((ret == -EBUSY) && (shared_by != IIO_SEPARATE))
+ 			continue;
+ 		else if (ret < 0)
+ 			return ret;
+ 		attrcount++;
+ 	}
+ 
+ 	return attrcount;
+ }
+ 
++>>>>>>> ef4b4856593f (iio:core: Fix bug in length of event info_mask and catch unhandled bits set in masks.)
  static int iio_device_add_channel_sysfs(struct iio_dev *indio_dev,
  					struct iio_chan_spec const *chan)
  {
* Unmerged path drivers/iio/industrialio-core.c
diff --git a/drivers/iio/industrialio-event.c b/drivers/iio/industrialio-event.c
index f27d4aeabaf4..8d356c2af5ef 100644
--- a/drivers/iio/industrialio-event.c
+++ b/drivers/iio/industrialio-event.c
@@ -334,7 +334,9 @@ static int iio_device_add_event(struct iio_dev *indio_dev,
 	char *postfix;
 	int ret;
 
-	for_each_set_bit(i, mask, sizeof(*mask)) {
+	for_each_set_bit(i, mask, sizeof(*mask)*8) {
+		if (i >= ARRAY_SIZE(iio_ev_info_text))
+			return -EINVAL;
 		postfix = kasprintf(GFP_KERNEL, "%s_%s_%s",
 				iio_ev_type_text[type], iio_ev_dir_text[dir],
 				iio_ev_info_text[i]);
