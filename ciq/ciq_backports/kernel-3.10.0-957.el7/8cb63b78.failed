s390/pci_dma: simplify dma address calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [s390] pci_dma: simplify dma address calculation (Hendrik Brueckner) [1539025]
Rebuild_FUZZ: 94.25%
commit-author Sebastian Ott <sebott@linux.vnet.ibm.com>
commit 8cb63b78791eef67ea95831c6ef5e6039c572b14
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/8cb63b78.failed

Simplify the code we use to calculate dma addresses by putting
everything related in a dma_alloc_address function. Also provide
a dma_free_address counterpart.

	Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
	Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 8cb63b78791eef67ea95831c6ef5e6039c572b14)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/pci/pci_dma.c
diff --cc arch/s390/pci/pci_dma.c
index 0a25a0fb6217,12b58b6b7f79..000000000000
--- a/arch/s390/pci/pci_dma.c
+++ b/arch/s390/pci/pci_dma.c
@@@ -229,14 -226,14 +229,13 @@@ static unsigned long __dma_alloc_iommu(
  	boundary_size = ALIGN(dma_get_seg_boundary(dev) + 1,
  			      PAGE_SIZE) >> PAGE_SHIFT;
  	return iommu_area_alloc(zdev->iommu_bitmap, zdev->iommu_pages,
 -				start, size, zdev->start_dma >> PAGE_SHIFT,
 -				boundary_size, 0);
 +				start, size, 0, boundary_size, 0);
  }
  
- static unsigned long dma_alloc_iommu(struct device *dev, int size)
+ static dma_addr_t dma_alloc_address(struct device *dev, int size)
  {
 -	struct zpci_dev *zdev = to_zpci(to_pci_dev(dev));
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
  	unsigned long offset, flags;
- 	int wrap = 0;
  
  	spin_lock_irqsave(&zdev->iommu_bitmap_lock, flags);
  	offset = __dma_alloc_iommu(dev, zdev->next_bit, size);
@@@ -252,14 -248,18 +250,23 @@@
  			/* global flush after wrap-around with lazy unmap */
  			zpci_refresh_global(zdev);
  	}
+ 	zdev->next_bit = offset + size;
  	spin_unlock_irqrestore(&zdev->iommu_bitmap_lock, flags);
- 	return offset;
+ 
+ 	return zdev->start_dma + offset * PAGE_SIZE;
  }
  
- static void dma_free_iommu(struct device *dev, unsigned long offset, int size)
+ static void dma_free_address(struct device *dev, dma_addr_t dma_addr, int size)
  {
++<<<<<<< HEAD
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
 +	unsigned long flags;
++=======
+ 	struct zpci_dev *zdev = to_zpci(to_pci_dev(dev));
+ 	unsigned long flags, offset;
+ 
+ 	offset = (dma_addr - zdev->start_dma) >> PAGE_SHIFT;
++>>>>>>> 8cb63b78791e (s390/pci_dma: simplify dma address calculation)
  
  	spin_lock_irqsave(&zdev->iommu_bitmap_lock, flags);
  	if (!zdev->iommu_bitmap)
@@@ -298,12 -288,12 +305,17 @@@ static inline void zpci_err_dma(unsigne
  static dma_addr_t s390_dma_map_pages(struct device *dev, struct page *page,
  				     unsigned long offset, size_t size,
  				     enum dma_data_direction direction,
 -				     unsigned long attrs)
 +				     struct dma_attrs *attrs)
  {
++<<<<<<< HEAD
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
 +	unsigned long nr_pages, iommu_page_index;
++=======
+ 	struct zpci_dev *zdev = to_zpci(to_pci_dev(dev));
++>>>>>>> 8cb63b78791e (s390/pci_dma: simplify dma address calculation)
  	unsigned long pa = page_to_phys(page) + offset;
  	int flags = ZPCI_PTE_VALID;
+ 	unsigned long nr_pages;
  	dma_addr_t dma_addr;
  	int ret;
  
@@@ -339,10 -328,9 +350,14 @@@ out_err
  
  static void s390_dma_unmap_pages(struct device *dev, dma_addr_t dma_addr,
  				 size_t size, enum dma_data_direction direction,
 -				 unsigned long attrs)
 +				 struct dma_attrs *attrs)
  {
++<<<<<<< HEAD
 +	struct zpci_dev *zdev = get_zdev(to_pci_dev(dev));
 +	unsigned long iommu_page_index;
++=======
+ 	struct zpci_dev *zdev = to_zpci(to_pci_dev(dev));
++>>>>>>> 8cb63b78791e (s390/pci_dma: simplify dma address calculation)
  	int npages, ret;
  
  	npages = iommu_num_pages(dma_addr, size, PAGE_SIZE);
* Unmerged path arch/s390/pci/pci_dma.c
