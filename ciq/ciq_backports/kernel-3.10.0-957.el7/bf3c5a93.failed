RDMA/nldev: Provide global resource utilization

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Leon Romanovsky <leonro@mellanox.com>
commit bf3c5a93c52368410a521af34ed3bff91a99df44
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/bf3c5a93.failed

Expose through the netlink interface the global per-device utilization of
the supported object types.

Provide both dumpit and doit callbacks.

As an example of possible output from rdmatool for system with 5
mlx5 cards:

$ rdma res
1: mlx5_0: qp 4 cq 5 pd 3
2: mlx5_1: qp 4 cq 5 pd 3
3: mlx5_2: qp 4 cq 5 pd 3
4: mlx5_3: qp 2 cq 3 pd 2
5: mlx5_4: qp 4 cq 5 pd 3

	Reviewed-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
	Reviewed-by: Steve Wise <swise@opengridcomputing.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit bf3c5a93c52368410a521af34ed3bff91a99df44)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/nldev.c
diff --cc drivers/infiniband/core/nldev.c
index 45af760cbdbe,c37bb041f647..000000000000
--- a/drivers/infiniband/core/nldev.c
+++ b/drivers/infiniband/core/nldev.c
@@@ -134,7 -141,67 +141,71 @@@ static int fill_port_info(struct sk_buf
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int nldev_get_doit(struct sk_buff *skb, struct nlmsghdr *nlh)
++=======
+ static int fill_res_info_entry(struct sk_buff *msg,
+ 			       const char *name, u64 curr)
+ {
+ 	struct nlattr *entry_attr;
+ 
+ 	entry_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY);
+ 	if (!entry_attr)
+ 		return -EMSGSIZE;
+ 
+ 	if (nla_put_string(msg, RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME, name))
+ 		goto err;
+ 	if (nla_put_u64_64bit(msg,
+ 			      RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR, curr, 0))
+ 		goto err;
+ 
+ 	nla_nest_end(msg, entry_attr);
+ 	return 0;
+ 
+ err:
+ 	nla_nest_cancel(msg, entry_attr);
+ 	return -EMSGSIZE;
+ }
+ 
+ static int fill_res_info(struct sk_buff *msg, struct ib_device *device)
+ {
+ 	static const char * const names[RDMA_RESTRACK_MAX] = {
+ 		[RDMA_RESTRACK_PD] = "pd",
+ 		[RDMA_RESTRACK_CQ] = "cq",
+ 		[RDMA_RESTRACK_QP] = "qp",
+ 	};
+ 
+ 	struct rdma_restrack_root *res = &device->res;
+ 	struct nlattr *table_attr;
+ 	int ret, i, curr;
+ 
+ 	if (fill_nldev_handle(msg, device))
+ 		return -EMSGSIZE;
+ 
+ 	table_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_RES_SUMMARY);
+ 	if (!table_attr)
+ 		return -EMSGSIZE;
+ 
+ 	for (i = 0; i < RDMA_RESTRACK_MAX; i++) {
+ 		if (!names[i])
+ 			continue;
+ 		curr = rdma_restrack_count(res, i, task_active_pid_ns(current));
+ 		ret = fill_res_info_entry(msg, names[i], curr);
+ 		if (ret)
+ 			goto err;
+ 	}
+ 
+ 	nla_nest_end(msg, table_attr);
+ 	return 0;
+ 
+ err:
+ 	nla_nest_cancel(msg, table_attr);
+ 	return ret;
+ }
+ 
+ static int nldev_get_doit(struct sk_buff *skb, struct nlmsghdr *nlh,
+ 			  struct netlink_ext_ack *extack)
++>>>>>>> bf3c5a93c523 (RDMA/nldev: Provide global resource utilization)
  {
  	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
  	struct ib_device *device;
* Unmerged path drivers/infiniband/core/nldev.c
diff --git a/include/uapi/rdma/rdma_netlink.h b/include/uapi/rdma/rdma_netlink.h
index 861440a87e7c..318e78dbd6b3 100644
--- a/include/uapi/rdma/rdma_netlink.h
+++ b/include/uapi/rdma/rdma_netlink.h
@@ -235,6 +235,8 @@ enum rdma_nldev_command {
 	RDMA_NLDEV_CMD_PORT_NEW,
 	RDMA_NLDEV_CMD_PORT_DEL,
 
+	RDMA_NLDEV_CMD_RES_GET, /* can dump */
+
 	RDMA_NLDEV_NUM_OPS
 };
 
@@ -302,6 +304,11 @@ enum rdma_nldev_attr {
 
 	RDMA_NLDEV_ATTR_DEV_NODE_TYPE,		/* u8 */
 
+	RDMA_NLDEV_ATTR_RES_SUMMARY,		/* nested table */
+	RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY,	/* nested table */
+	RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_NAME,	/* string */
+	RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY_CURR,	/* u64 */
+
 	RDMA_NLDEV_ATTR_MAX
 };
 #endif /* _UAPI_RDMA_NETLINK_H */
