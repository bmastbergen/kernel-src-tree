NFS: revalidate "." etc correctly on "open".

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author NeilBrown <neilb@suse.com>
commit b688741cb06695312f18b730653d6611e1bad28d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/b688741c.failed

For correct close-to-open semantics, NFS must validate
the change attribute of a directory (or file) on open.

Since commit ecf3d1f1aa74 ("vfs: kill FS_REVAL_DOT by adding a
d_weak_revalidate dentry op"), open() of "." or a path ending ".." is
not revalidated reliably (except when that direct is a mount point).

Prior to that commit, "." was revalidated using nfs_lookup_revalidate()
which checks the LOOKUP_OPEN flag and forces revalidation if the flag is
set.
Since that commit, nfs_weak_revalidate() is used for NFSv3 (which
ignores the flags) and nothing is used for NFSv4.

This is fixed by using nfs_lookup_verify_inode() in
nfs_weak_revalidate().  This does the revalidation exactly when needed.
Also, add a definition of .d_weak_revalidate for NFSv4.

The incorrect behavior is easily demonstrated by running "echo *" in
some non-mountpoint NFS directory while watching network traffic.
Without this patch, "echo *" sometimes doesn't produce any traffic.
With the patch it always does.

Fixes: ecf3d1f1aa74 ("vfs: kill FS_REVAL_DOT by adding a d_weak_revalidate dentry op")
cc: stable@vger.kernel.org (3.9+)
	Signed-off-by: NeilBrown <neilb@suse.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit b688741cb06695312f18b730653d6611e1bad28d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/dir.c
diff --cc fs/nfs/dir.c
index 09e511dfc6d8,c583093a066b..000000000000
--- a/fs/nfs/dir.c
+++ b/fs/nfs/dir.c
@@@ -1286,7 -1241,7 +1286,11 @@@ static int nfs_weak_revalidate(struct d
  		return 0;
  	}
  
++<<<<<<< HEAD
 +	error = nfs_revalidate_inode(NFS_SERVER(inode), inode);
++=======
+ 	error = nfs_lookup_verify_inode(inode, flags);
++>>>>>>> b688741cb066 (NFS: revalidate "." etc correctly on "open".)
  	dfprintk(LOOKUPCACHE, "NFS: %s: inode %lu is %s\n",
  			__func__, inode->i_ino, error ? "invalid" : "valid");
  	return !error;
* Unmerged path fs/nfs/dir.c
