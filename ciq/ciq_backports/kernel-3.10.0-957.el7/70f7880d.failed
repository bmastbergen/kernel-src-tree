PCI: Improve pci_scan_bridge() and pci_scan_bridge_extend() doc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [pci] Improve pci_scan_bridge() and pci_scan_bridge_extend() doc (Jarod Wilson) [1495223]
Rebuild_FUZZ: 95.87%
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit 70f7880d2d3175cecc73b0b41fd07e58e6df5fff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/70f7880d.failed

It is not immediately clear what the two functions actually return so
add kernel-doc comment explaining it a bit better.

	Suggested-by: Bjorn Helgaas <bhelgaas@google.com>
	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
(cherry picked from commit 70f7880d2d3175cecc73b0b41fd07e58e6df5fff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/probe.c
diff --cc drivers/pci/probe.c
index 60cc4d4c4ea4,fe5b05bd1887..000000000000
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@@ -809,8 -999,12 +809,10 @@@ static void pci_enable_crs(struct pci_d
   * already configured by the BIOS and after we are done with all of
   * them, we proceed to assigning numbers to the remaining buses in
   * order to avoid overlaps between old and new bus numbers.
+  *
+  * Return: New subordinate number covering all buses behind this bridge.
   */
 -static int pci_scan_bridge_extend(struct pci_bus *bus, struct pci_dev *dev,
 -				  int max, unsigned int available_buses,
 -				  int pass)
 +int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max, int pass)
  {
  	struct pci_bus *child;
  	int is_cardbus = (dev->hdr_type == PCI_HEADER_TYPE_CARDBUS);
@@@ -1010,6 -1216,30 +1012,33 @@@ out
  
  	return max;
  }
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * pci_scan_bridge() - Scan buses behind a bridge
+  * @bus: Parent bus the bridge is on
+  * @dev: Bridge itself
+  * @max: Starting subordinate number of buses behind this bridge
+  * @pass: Either %0 (scan already configured bridges) or %1 (scan bridges
+  *        that need to be reconfigured.
+  *
+  * If it's a bridge, configure it and scan the bus behind it.
+  * For CardBus bridges, we don't scan behind as the devices will
+  * be handled by the bridge driver itself.
+  *
+  * We need to process bridges in two passes -- first we scan those
+  * already configured by the BIOS and after we are done with all of
+  * them, we proceed to assigning numbers to the remaining buses in
+  * order to avoid overlaps between old and new bus numbers.
+  *
+  * Return: New subordinate number covering all buses behind this bridge.
+  */
+ int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max, int pass)
+ {
+ 	return pci_scan_bridge_extend(bus, dev, max, 0, pass);
+ }
++>>>>>>> 70f7880d2d31 (PCI: Improve pci_scan_bridge() and pci_scan_bridge_extend() doc)
  EXPORT_SYMBOL(pci_scan_bridge);
  
  /*
* Unmerged path drivers/pci/probe.c
