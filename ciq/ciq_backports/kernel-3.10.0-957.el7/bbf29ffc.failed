thp, mm: fix crash due race in MADV_FREE handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mm] thp: fix crash due race in MADV_FREE handling (Rafael Aquini) [1562137]
Rebuild_FUZZ: 95.74%
commit-author Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
commit bbf29ffc7f963bb894f84f0580c70cfea01c3892
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/bbf29ffc.failed

Reinette reported the following crash:

  BUG: Bad page state in process log2exe  pfn:57600
  page:ffffea00015d8000 count:0 mapcount:0 mapping:          (null) index:0x20200
  flags: 0x4000000000040019(locked|uptodate|dirty|swapbacked)
  raw: 4000000000040019 0000000000000000 0000000000020200 00000000ffffffff
  raw: ffffea00015d8020 ffffea00015d8020 0000000000000000 0000000000000000
  page dumped because: PAGE_FLAGS_CHECK_AT_FREE flag(s) set
  bad because of flags: 0x1(locked)
  Modules linked in: rfcomm 8021q bnep intel_rapl x86_pkg_temp_thermal coretemp efivars btusb btrtl btbcm pwm_lpss_pci snd_hda_codec_hdmi btintel pwm_lpss snd_hda_codec_realtek snd_soc_skl snd_hda_codec_generic snd_soc_skl_ipc spi_pxa2xx_platform snd_soc_sst_ipc snd_soc_sst_dsp i2c_designware_platform i2c_designware_core snd_hda_ext_core snd_soc_sst_match snd_hda_intel snd_hda_codec mei_me snd_hda_core mei snd_soc_rt286 snd_soc_rl6347a snd_soc_core efivarfs
  CPU: 1 PID: 354 Comm: log2exe Not tainted 4.12.0-rc7-test-test #19
  Hardware name: Intel corporation NUC6CAYS/NUC6CAYB, BIOS AYAPLCEL.86A.0027.2016.1108.1529 11/08/2016
  Call Trace:
   bad_page+0x16a/0x1f0
   free_pages_check_bad+0x117/0x190
   free_hot_cold_page+0x7b1/0xad0
   __put_page+0x70/0xa0
   madvise_free_huge_pmd+0x627/0x7b0
   madvise_free_pte_range+0x6f8/0x1150
   __walk_page_range+0x6b5/0xe30
   walk_page_range+0x13b/0x310
   madvise_free_page_range.isra.16+0xad/0xd0
   madvise_free_single_vma+0x2e4/0x470
   SyS_madvise+0x8ce/0x1450

If somebody frees the page under us and we hold the last reference to
it, put_page() would attempt to free the page before unlocking it.

The fix is trivial reorder of operations.

Dave said:
 "I came up with the exact same patch.  For posterity, here's the test
  case, generated by syzkaller and trimmed down by Reinette:

  	https://www.sr71.net/~dave/intel/log2.c

  And the config that helps detect this:

  	https://www.sr71.net/~dave/intel/config-log2"

Fixes: b8d3c4c3009d ("mm/huge_memory.c: don't split THP page when MADV_FREE syscall is called")
Link: http://lkml.kernel.org/r/20170628101249.17879-1-kirill.shutemov@linux.intel.com
	Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Reported-by: Reinette Chatre <reinette.chatre@intel.com>
	Acked-by: Dave Hansen <dave.hansen@intel.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Acked-by: Minchan Kim <minchan@kernel.org>
	Cc: Huang Ying <ying.huang@intel.com>
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit bbf29ffc7f963bb894f84f0580c70cfea01c3892)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/huge_memory.c
diff --cc mm/huge_memory.c
index 075f651aabed,f4d5f9d0f9b7..000000000000
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@@ -1750,6 -1533,83 +1750,86 @@@ out
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /*
+  * Return true if we do MADV_FREE successfully on entire pmd page.
+  * Otherwise, return false.
+  */
+ bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
+ 		pmd_t *pmd, unsigned long addr, unsigned long next)
+ {
+ 	spinlock_t *ptl;
+ 	pmd_t orig_pmd;
+ 	struct page *page;
+ 	struct mm_struct *mm = tlb->mm;
+ 	bool ret = false;
+ 
+ 	tlb_remove_check_page_size_change(tlb, HPAGE_PMD_SIZE);
+ 
+ 	ptl = pmd_trans_huge_lock(pmd, vma);
+ 	if (!ptl)
+ 		goto out_unlocked;
+ 
+ 	orig_pmd = *pmd;
+ 	if (is_huge_zero_pmd(orig_pmd))
+ 		goto out;
+ 
+ 	page = pmd_page(orig_pmd);
+ 	/*
+ 	 * If other processes are mapping this page, we couldn't discard
+ 	 * the page unless they all do MADV_FREE so let's skip the page.
+ 	 */
+ 	if (page_mapcount(page) != 1)
+ 		goto out;
+ 
+ 	if (!trylock_page(page))
+ 		goto out;
+ 
+ 	/*
+ 	 * If user want to discard part-pages of THP, split it so MADV_FREE
+ 	 * will deactivate only them.
+ 	 */
+ 	if (next - addr != HPAGE_PMD_SIZE) {
+ 		get_page(page);
+ 		spin_unlock(ptl);
+ 		split_huge_page(page);
+ 		unlock_page(page);
+ 		put_page(page);
+ 		goto out_unlocked;
+ 	}
+ 
+ 	if (PageDirty(page))
+ 		ClearPageDirty(page);
+ 	unlock_page(page);
+ 
+ 	if (pmd_young(orig_pmd) || pmd_dirty(orig_pmd)) {
+ 		pmdp_invalidate(vma, addr, pmd);
+ 		orig_pmd = pmd_mkold(orig_pmd);
+ 		orig_pmd = pmd_mkclean(orig_pmd);
+ 
+ 		set_pmd_at(mm, addr, pmd, orig_pmd);
+ 		tlb_remove_pmd_tlb_entry(tlb, pmd, addr);
+ 	}
+ 
+ 	mark_page_lazyfree(page);
+ 	ret = true;
+ out:
+ 	spin_unlock(ptl);
+ out_unlocked:
+ 	return ret;
+ }
+ 
+ static inline void zap_deposited_table(struct mm_struct *mm, pmd_t *pmd)
+ {
+ 	pgtable_t pgtable;
+ 
+ 	pgtable = pgtable_trans_huge_withdraw(mm, pmd);
+ 	pte_free(mm, pgtable);
+ 	atomic_long_dec(&mm->nr_ptes);
+ }
+ 
++>>>>>>> bbf29ffc7f96 (thp, mm: fix crash due race in MADV_FREE handling)
  int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
  		 pmd_t *pmd, unsigned long addr)
  {
* Unmerged path mm/huge_memory.c
