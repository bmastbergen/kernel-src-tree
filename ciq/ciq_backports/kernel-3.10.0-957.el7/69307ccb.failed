usb: xhci: bInterval quirk for TI TUSB73x0

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [usb] xhci: bInterval quirk for TI TUSB73x0 (Torez Smith) [1540721]
Rebuild_FUZZ: 93.67%
commit-author Roger Quadros <rogerq@ti.com>
commit 69307ccb9ad7ccb653e332de68effdeaaab6907d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/69307ccb.failed

As per [1] issue #4,
"The periodic EP scheduler always tries to schedule the EPs
that have large intervals (interval equal to or greater than
128 microframes) into different microframes. So it maintains
an internal counter and increments for each large interval
EP added. When the counter is greater than 128, the scheduler
rejects the new EP. So when the hub re-enumerated 128 times,
it triggers this condition."

This results in Bandwidth error when devices with periodic
endpoints (ISO/INT) having bInterval > 7 are plugged and
unplugged several times on a TUSB73x0 XHCI host.

Workaround this issue by limiting the bInterval to 7
(i.e. interval to 6) for High-speed or faster periodic endpoints.

[1] - http://www.ti.com/lit/er/sllz076/sllz076.pdf

	Cc: stable <stable@vger.kernel.org>
	Signed-off-by: Roger Quadros <rogerq@ti.com>
	Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 69307ccb9ad7ccb653e332de68effdeaaab6907d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/usb/host/xhci-pci.c
#	drivers/usb/host/xhci.h
diff --cc drivers/usb/host/xhci-pci.c
index 5aff3e50369f,7b86508ac8cf..000000000000
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@@ -200,9 -199,8 +200,14 @@@ static void xhci_pci_quirks(struct devi
  			pdev->device == 0x1042)
  		xhci->quirks |= XHCI_BROKEN_STREAMS;
  
++<<<<<<< HEAD
 +	if (pdev->vendor == PCI_VENDOR_ID_ASMEDIA &&
 +		pdev->device == PCI_DEVICE_ID_ASMEDIA_1042A_XHCI)
 +		xhci->quirks |= XHCI_ASMEDIA_MODIFY_FLOWCONTROL;
++=======
+ 	if (pdev->vendor == PCI_VENDOR_ID_TI && pdev->device == 0x8241)
+ 		xhci->quirks |= XHCI_LIMIT_ENDPOINT_INTERVAL_7;
++>>>>>>> 69307ccb9ad7 (usb: xhci: bInterval quirk for TI TUSB73x0)
  
  	if (xhci->quirks & XHCI_RESET_ON_RESUME)
  		xhci_dbg_trace(xhci, trace_xhci_dbg_quirks,
diff --cc drivers/usb/host/xhci.h
index 2aac1123ccfc,914968c662c9..000000000000
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@@ -1821,7 -1820,7 +1821,11 @@@ struct xhci_hcd 
  #define XHCI_MISSING_CAS	(1 << 24)
  /* For controller with a broken Port Disable implementation */
  #define XHCI_BROKEN_PORT_PED	(1 << 25)
++<<<<<<< HEAD
 +#define XHCI_ASMEDIA_MODIFY_FLOWCONTROL	(1 << 28)
++=======
+ #define XHCI_LIMIT_ENDPOINT_INTERVAL_7	(1 << 26)
++>>>>>>> 69307ccb9ad7 (usb: xhci: bInterval quirk for TI TUSB73x0)
  
  	unsigned int		num_active_eps;
  	unsigned int		limit_active_eps;
diff --git a/drivers/usb/host/xhci-mem.c b/drivers/usb/host/xhci-mem.c
index 913fd1fcc645..82eaf557e626 100644
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@ -1503,6 +1503,17 @@ int xhci_endpoint_init(struct xhci_hcd *xhci,
 	 */
 	max_esit_payload = xhci_get_max_esit_payload(udev, ep);
 	interval = xhci_get_endpoint_interval(udev, ep);
+
+	/* Periodic endpoint bInterval limit quirk */
+	if (usb_endpoint_xfer_int(&ep->desc) ||
+	    usb_endpoint_xfer_isoc(&ep->desc)) {
+		if ((xhci->quirks & XHCI_LIMIT_ENDPOINT_INTERVAL_7) &&
+		    udev->speed >= USB_SPEED_HIGH &&
+		    interval >= 7) {
+			interval = 6;
+		}
+	}
+
 	mult = xhci_get_endpoint_mult(udev, ep);
 	max_packet = usb_endpoint_maxp(&ep->desc);
 	max_burst = xhci_get_endpoint_max_burst(udev, ep);
* Unmerged path drivers/usb/host/xhci-pci.c
* Unmerged path drivers/usb/host/xhci.h
