cfg80211: fix CFG80211_EXTRA_REGDB_KEYDIR typo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Arnd Bergmann <arnd@arndb.de>
commit 88230ef1f31bf2d8fcf42c20e5743ff4b3618a29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/88230ef1.failed

The missing CONFIG_ prefix means this macro is never defined,
leading to a possible Kbuild warning:

net/wireless/reg.c:666:20: error: 'load_keys_from_buffer' defined but not used [-Werror=unused-function]
 static void __init load_keys_from_buffer(const u8 *p, unsigned int buflen)

When we use the correct symbol, the warning also goes away.

Fixes: 90a53e4432b1 ("cfg80211: implement regdb signature checking")
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
(cherry picked from commit 88230ef1f31bf2d8fcf42c20e5743ff4b3618a29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/wireless/reg.c
diff --cc net/wireless/reg.c
index e9aeb05aaf3e,3871998059de..000000000000
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@@ -692,6 -660,115 +692,118 @@@ static bool valid_country(const u8 *dat
  	return true;
  }
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_CFG80211_REQUIRE_SIGNED_REGDB
+ static struct key *builtin_regdb_keys;
+ 
+ static void __init load_keys_from_buffer(const u8 *p, unsigned int buflen)
+ {
+ 	const u8 *end = p + buflen;
+ 	size_t plen;
+ 	key_ref_t key;
+ 
+ 	while (p < end) {
+ 		/* Each cert begins with an ASN.1 SEQUENCE tag and must be more
+ 		 * than 256 bytes in size.
+ 		 */
+ 		if (end - p < 4)
+ 			goto dodgy_cert;
+ 		if (p[0] != 0x30 &&
+ 		    p[1] != 0x82)
+ 			goto dodgy_cert;
+ 		plen = (p[2] << 8) | p[3];
+ 		plen += 4;
+ 		if (plen > end - p)
+ 			goto dodgy_cert;
+ 
+ 		key = key_create_or_update(make_key_ref(builtin_regdb_keys, 1),
+ 					   "asymmetric", NULL, p, plen,
+ 					   ((KEY_POS_ALL & ~KEY_POS_SETATTR) |
+ 					    KEY_USR_VIEW | KEY_USR_READ),
+ 					   KEY_ALLOC_NOT_IN_QUOTA |
+ 					   KEY_ALLOC_BUILT_IN |
+ 					   KEY_ALLOC_BYPASS_RESTRICTION);
+ 		if (IS_ERR(key)) {
+ 			pr_err("Problem loading in-kernel X.509 certificate (%ld)\n",
+ 			       PTR_ERR(key));
+ 		} else {
+ 			pr_notice("Loaded X.509 cert '%s'\n",
+ 				  key_ref_to_ptr(key)->description);
+ 			key_ref_put(key);
+ 		}
+ 		p += plen;
+ 	}
+ 
+ 	return;
+ 
+ dodgy_cert:
+ 	pr_err("Problem parsing in-kernel X.509 certificate list\n");
+ }
+ 
+ static int __init load_builtin_regdb_keys(void)
+ {
+ 	builtin_regdb_keys =
+ 		keyring_alloc(".builtin_regdb_keys",
+ 			      KUIDT_INIT(0), KGIDT_INIT(0), current_cred(),
+ 			      ((KEY_POS_ALL & ~KEY_POS_SETATTR) |
+ 			      KEY_USR_VIEW | KEY_USR_READ | KEY_USR_SEARCH),
+ 			      KEY_ALLOC_NOT_IN_QUOTA, NULL, NULL);
+ 	if (IS_ERR(builtin_regdb_keys))
+ 		return PTR_ERR(builtin_regdb_keys);
+ 
+ 	pr_notice("Loading compiled-in X.509 certificates for regulatory database\n");
+ 
+ #ifdef CONFIG_CFG80211_USE_KERNEL_REGDB_KEYS
+ 	load_keys_from_buffer(shipped_regdb_certs, shipped_regdb_certs_len);
+ #endif
+ #ifdef CONFIG_CFG80211_EXTRA_REGDB_KEYDIR
+ 	if (CONFIG_CFG80211_EXTRA_REGDB_KEYDIR[0] != '\0')
+ 		load_keys_from_buffer(extra_regdb_certs, extra_regdb_certs_len);
+ #endif
+ 
+ 	return 0;
+ }
+ 
+ static bool regdb_has_valid_signature(const u8 *data, unsigned int size)
+ {
+ 	const struct firmware *sig;
+ 	bool result;
+ 
+ 	if (request_firmware(&sig, "regulatory.db.p7s", &reg_pdev->dev))
+ 		return false;
+ 
+ 	result = verify_pkcs7_signature(data, size, sig->data, sig->size,
+ 					builtin_regdb_keys,
+ 					VERIFYING_UNSPECIFIED_SIGNATURE,
+ 					NULL, NULL) == 0;
+ 
+ 	release_firmware(sig);
+ 
+ 	return result;
+ }
+ 
+ static void free_regdb_keyring(void)
+ {
+ 	key_put(builtin_regdb_keys);
+ }
+ #else
+ static int load_builtin_regdb_keys(void)
+ {
+ 	return 0;
+ }
+ 
+ static bool regdb_has_valid_signature(const u8 *data, unsigned int size)
+ {
+ 	return true;
+ }
+ 
+ static void free_regdb_keyring(void)
+ {
+ }
+ #endif /* CONFIG_CFG80211_REQUIRE_SIGNED_REGDB */
+ 
++>>>>>>> 88230ef1f31b (cfg80211: fix CFG80211_EXTRA_REGDB_KEYDIR typo)
  static bool valid_regdb(const u8 *data, unsigned int size)
  {
  	const struct fwdb_header *hdr = (void *)data;
* Unmerged path net/wireless/reg.c
