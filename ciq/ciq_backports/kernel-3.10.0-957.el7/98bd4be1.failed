libata: move sas ata tag allocation to libata-scsi.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Shaohua Li <shli@fb.com>
commit 98bd4be1ba95f2fe7f543910792b7163a5de06eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/98bd4be1.failed

Basically move the sas ata tag allocation to libata-scsi.c to make it clear
these staffs are just for sas.

	Signed-off-by: Shaohua Li <shli@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 98bd4be1ba95f2fe7f543910792b7163a5de06eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/ata/libata-core.c
#	drivers/ata/libata-scsi.c
#	drivers/ata/libata.h
diff --cc drivers/ata/libata-core.c
index 1470de734945,d626605ac8f7..000000000000
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@@ -1582,8 -1585,6 +1582,11 @@@ unsigned ata_exec_internal_sg(struct at
  	else
  		tag = 0;
  
++<<<<<<< HEAD
 +	if (test_and_set_bit(tag, &ap->qc_allocated))
 +		BUG();
++=======
++>>>>>>> 98bd4be1ba95 (libata: move sas ata tag allocation to libata-scsi.c)
  	qc = __ata_qc_from_tag(ap, tag);
  
  	qc->tag = tag;
@@@ -4807,49 -4724,6 +4810,52 @@@ void swap_buf_le16(u16 *buf, unsigned i
  }
  
  /**
++<<<<<<< HEAD
 + *	ata_qc_new - Request an available ATA command, for queueing
 + *	@ap: target port
 + *
 + *	Some ATA host controllers may implement a queue depth which is less
 + *	than ATA_MAX_QUEUE. So we shouldn't allocate a tag which is beyond
 + *	the hardware limitation.
 + *
 + *	LOCKING:
 + *	None.
 + */
 +
 +static struct ata_queued_cmd *ata_qc_new(struct ata_port *ap)
 +{
 +	struct ata_queued_cmd *qc = NULL;
 +	unsigned int max_queue = ap->host->n_tags;
 +	unsigned int i, tag;
 +
 +	/* no command while frozen */
 +	if (unlikely(ap->pflags & ATA_PFLAG_FROZEN))
 +		return NULL;
 +
 +	for (i = 0, tag = ap->last_tag + 1; i < max_queue; i++, tag++) {
 +		if (ap->flags & ATA_FLAG_LOWTAG)
 +			tag = i;
 +		else
 +			tag = tag < max_queue ? tag : 0;
 +
 +		/* the last tag is reserved for internal command. */
 +		if (tag == ATA_TAG_INTERNAL)
 +			continue;
 +
 +		if (!test_and_set_bit(tag, &ap->qc_allocated)) {
 +			qc = __ata_qc_from_tag(ap, tag);
 +			qc->tag = tag;
 +			ap->last_tag = tag;
 +			break;
 +		}
 +	}
 +
 +	return qc;
 +}
 +
 +/**
++=======
++>>>>>>> 98bd4be1ba95 (libata: move sas ata tag allocation to libata-scsi.c)
   *	ata_qc_new_init - Request an available ATA command, and initialize it
   *	@dev: Device from whom we request an available command structure
   *
@@@ -4857,20 -4731,30 +4863,42 @@@
   *	None.
   */
  
++<<<<<<< HEAD
 +struct ata_queued_cmd *ata_qc_new_init(struct ata_device *dev)
++=======
+ struct ata_queued_cmd *ata_qc_new_init(struct ata_device *dev, int tag)
++>>>>>>> 98bd4be1ba95 (libata: move sas ata tag allocation to libata-scsi.c)
  {
  	struct ata_port *ap = dev->link->ap;
  	struct ata_queued_cmd *qc;
  
++<<<<<<< HEAD
 +	qc = ata_qc_new(ap);
 +	if (qc) {
 +		qc->scsicmd = NULL;
 +		qc->ap = ap;
 +		qc->dev = dev;
++=======
+ 	/* no command while frozen */
+ 	if (unlikely(ap->pflags & ATA_PFLAG_FROZEN))
+ 		return NULL;
++>>>>>>> 98bd4be1ba95 (libata: move sas ata tag allocation to libata-scsi.c)
  
- 		ata_qc_reinit(qc);
+ 	/* libsas case */
+ 	if (!ap->scsi_host) {
+ 		tag = ata_sas_allocate_tag(ap);
+ 		if (tag < 0)
+ 			return NULL;
  	}
  
+ 	qc = __ata_qc_from_tag(ap, tag);
+ 	qc->tag = tag;
+ 	qc->scsicmd = NULL;
+ 	qc->ap = ap;
+ 	qc->dev = dev;
+ 
+ 	ata_qc_reinit(qc);
+ 
  	return qc;
  }
  
@@@ -4896,7 -4780,8 +4924,12 @@@ void ata_qc_free(struct ata_queued_cmd 
  	tag = qc->tag;
  	if (likely(ata_tag_valid(tag))) {
  		qc->tag = ATA_TAG_POISON;
++<<<<<<< HEAD
 +		clear_bit(tag, &ap->qc_allocated);
++=======
+ 		if (!ap->scsi_host)
+ 			ata_sas_free_tag(tag, ap);
++>>>>>>> 98bd4be1ba95 (libata: move sas ata tag allocation to libata-scsi.c)
  	}
  }
  
diff --cc drivers/ata/libata-scsi.c
index c16221998a89,59c9d721b347..000000000000
--- a/drivers/ata/libata-scsi.c
+++ b/drivers/ata/libata-scsi.c
@@@ -3676,6 -3666,9 +3676,12 @@@ int ata_scsi_add_hosts(struct ata_host 
  		 */
  		shost->max_host_blocked = 1;
  
++<<<<<<< HEAD
++=======
+ 		if (scsi_init_shared_tag_map(shost, host->n_tags))
+ 			goto err_add;
+ 
++>>>>>>> 98bd4be1ba95 (libata: move sas ata tag allocation to libata-scsi.c)
  		rc = scsi_add_host_with_dma(ap->scsi_host,
  						&ap->tdev, ap->host->dev);
  		if (rc)
diff --cc drivers/ata/libata.h
index 497c490309d2,8c491cd8805b..000000000000
--- a/drivers/ata/libata.h
+++ b/drivers/ata/libata.h
@@@ -143,7 -144,9 +143,13 @@@ extern void ata_schedule_scsi_eh(struc
  extern void ata_scsi_dev_rescan(struct work_struct *work);
  extern int ata_bus_probe(struct ata_port *ap);
  extern int ata_scsi_user_scan(struct Scsi_Host *shost, unsigned int channel,
++<<<<<<< HEAD
 +			      unsigned int id, unsigned int lun);
++=======
+ 			      unsigned int id, u64 lun);
+ int ata_sas_allocate_tag(struct ata_port *ap);
+ void ata_sas_free_tag(unsigned int tag, struct ata_port *ap);
++>>>>>>> 98bd4be1ba95 (libata: move sas ata tag allocation to libata-scsi.c)
  
  
  /* libata-eh.c */
* Unmerged path drivers/ata/libata-core.c
* Unmerged path drivers/ata/libata-scsi.c
* Unmerged path drivers/ata/libata.h
