PCI: shpchp: Remove get_hp_hw_control_from_firmware() wrapper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [pci] shpchp: Remove get_hp_hw_control_from_firmware() wrapper (Jarod Wilson) [1495223]
Rebuild_FUZZ: 95.73%
commit-author Mika Westerberg <mika.westerberg@linux.intel.com>
commit 96a621e01a42dc53848e2e4915fd807ebc1fc82f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/96a621e0.failed

get_hp_hw_control_from_firmware() is a trivial wrapper around
acpi_get_hp_hw_control_from_firmware(), probably intended to be generic in
case other firmware needed similar OS/platform negotiation.

Remove get_hp_hw_control_from_firmware() and call
acpi_get_hp_hw_control_from_firmware() directly.  Add a stub for
acpi_get_hp_hw_control_from_firmware() for the non-ACPI case.

	Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 96a621e01a42dc53848e2e4915fd807ebc1fc82f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/hotplug/shpchp.h
#	include/linux/pci_hotplug.h
diff --cc drivers/pci/hotplug/shpchp.h
index 4da8fc601467,9675ab757323..000000000000
--- a/drivers/pci/hotplug/shpchp.h
+++ b/drivers/pci/hotplug/shpchp.h
@@@ -187,17 -173,6 +187,20 @@@ static inline const char *slot_name(str
  	return hotplug_slot_name(slot->hotplug_slot);
  }
  
++<<<<<<< HEAD
 +#ifdef CONFIG_ACPI
 +#include <linux/pci-acpi.h>
 +static inline int get_hp_hw_control_from_firmware(struct pci_dev *dev)
 +{
 +	u32 flags = OSC_PCI_SHPC_NATIVE_HP_CONTROL;
 +	return acpi_get_hp_hw_control_from_firmware(dev, flags);
 +}
 +#else
 +#define get_hp_hw_control_from_firmware(dev) (0)
 +#endif
 +
++=======
++>>>>>>> 96a621e01a42 (PCI: shpchp: Remove get_hp_hw_control_from_firmware() wrapper)
  struct ctrl_reg {
  	volatile u32 base_offset;
  	volatile u32 slot_avail1;
diff --cc include/linux/pci_hotplug.h
index 2e855afa0212,1f5c935eb0de..000000000000
--- a/include/linux/pci_hotplug.h
+++ b/include/linux/pci_hotplug.h
@@@ -186,6 -172,11 +186,15 @@@ static inline int pci_get_hp_params(str
  {
  	return -ENODEV;
  }
++<<<<<<< HEAD
 +static inline bool pciehp_is_native(struct pci_dev *pdev) { return true; }
++=======
+ 
+ static inline int acpi_get_hp_hw_control_from_firmware(struct pci_dev *bridge)
+ {
+ 	return 0;
+ }
+ static inline bool pciehp_is_native(struct pci_dev *bridge) { return true; }
++>>>>>>> 96a621e01a42 (PCI: shpchp: Remove get_hp_hw_control_from_firmware() wrapper)
  #endif
  #endif
* Unmerged path drivers/pci/hotplug/shpchp.h
diff --git a/drivers/pci/hotplug/shpchp_core.c b/drivers/pci/hotplug/shpchp_core.c
index 3454dc7385f1..4dd93a0a216e 100644
--- a/drivers/pci/hotplug/shpchp_core.c
+++ b/drivers/pci/hotplug/shpchp_core.c
@@ -291,7 +291,7 @@ static int is_shpc_capable(struct pci_dev *dev)
 		return 1;
 	if (!pci_find_capability(dev, PCI_CAP_ID_SHPC))
 		return 0;
-	if (get_hp_hw_control_from_firmware(dev))
+	if (acpi_get_hp_hw_control_from_firmware(dev))
 		return 0;
 	return 1;
 }
* Unmerged path include/linux/pci_hotplug.h
