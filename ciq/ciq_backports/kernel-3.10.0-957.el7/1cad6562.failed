nvme: factor metadata handling out of __nvme_submit_user_cmd

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [nvme] factor metadata handling out of __nvme_submit_user_cmd (David Milburn) [1519689]
Rebuild_FUZZ: 94.74%
commit-author Christoph Hellwig <hch@lst.de>
commit 1cad65620fecfb24cdeefa5533628a4f293783e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1cad6562.failed

Keep the metadata code in a separate helper instead of making the
main function more complicated.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 1cad65620fecfb24cdeefa5533628a4f293783e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 4ea2a053afb7,a520c841c63c..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -497,50 -659,17 +531,61 @@@ int __nvme_submit_user_cmd(struct reque
  		if (ret)
  			goto out;
  		bio = req->bio;
++<<<<<<< HEAD
 +
 +		if (!disk)
 +			goto submit;
 +		bio->bi_bdev = bdget_disk(disk, 0);
 +		if (!bio->bi_bdev) {
 +			ret = -ENODEV;
 +			goto out_unmap;
 +		}
 +
 +		if (meta_buffer && meta_len) {
 +			struct bio_integrity_payload *bip;
 +
 +			meta = kmalloc(meta_len, GFP_KERNEL);
 +			if (!meta) {
 +				ret = -ENOMEM;
 +				goto out_unmap;
 +			}
 +
 +			if (write) {
 +				if (copy_from_user(meta, meta_buffer,
 +						meta_len)) {
 +					ret = -EFAULT;
 +					goto out_free_meta;
 +				}
 +			}
 +
 +			bip = bio_integrity_alloc(bio, GFP_KERNEL, 1);
 +			if (!bip) {
 +				ret = -ENOMEM;
 +				goto out_free_meta;
 +			}
 +
 +			bip->bip_size = meta_len;
 +			bip->bip_sector = meta_seed;
 +
 +			ret = bio_integrity_add_page(bio, virt_to_page(meta),
 +					meta_len, offset_in_page(meta));
 +			if (ret != meta_len) {
 +				ret = -ENOMEM;
 +				goto out_free_meta;
 +			}
++=======
+ 		bio->bi_disk = disk;
+ 		if (disk && meta_buffer && meta_len) {
+ 			meta = nvme_add_user_metadata(bio, meta_buffer, meta_len,
+ 					meta_seed, write);
+ 			if (IS_ERR(meta)) {
+ 				ret = PTR_ERR(meta);
+ 				goto out_unmap;
+ 			}
++>>>>>>> 1cad65620fec (nvme: factor metadata handling out of __nvme_submit_user_cmd)
  		}
  	}
-  submit:
+ 
  	blk_execute_rq(req->q, disk, req, 0);
  	if (nvme_req(req)->flags & NVME_REQ_CANCELLED)
  		ret = -EINTR;
@@@ -552,14 -681,10 +597,13 @@@
  		if (copy_to_user(meta_buffer, meta, meta_len))
  			ret = -EFAULT;
  	}
-  out_free_meta:
  	kfree(meta);
   out_unmap:
 -	if (bio)
 +	if (bio) {
 +		if (disk && bio->bi_bdev)
 +			bdput(bio->bi_bdev);
  		blk_rq_unmap_user(bio);
 +	}
   out:
  	blk_mq_free_request(req);
  	return ret;
* Unmerged path drivers/nvme/host/core.c
