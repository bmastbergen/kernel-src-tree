IB/mlx5: Move loopback initialization to the corresponding stage

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Mark Bloch <markb@mellanox.com>
commit c8b8992446a945c103ac74ebd5e05672d9b3c48a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c8b89924.failed

The loopback stage only initializes a lock, move it to be in
the CAPS initialization phase and get rid loopback step completely.

	Signed-off-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit c8b8992446a945c103ac74ebd5e05672d9b3c48a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
#	drivers/infiniband/hw/mlx5/mlx5_ib.h
diff --cc drivers/infiniband/hw/mlx5/main.c
index a49372cd35f7,b8952fff1fc8..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -4204,8 -4194,34 +4204,39 @@@ static void *mlx5_ib_add(struct mlx5_co
  			(1ull << IB_USER_VERBS_EX_CMD_CREATE_FLOW) |
  			(1ull << IB_USER_VERBS_EX_CMD_DESTROY_FLOW);
  
++<<<<<<< HEAD
 +	if (mlx5_ib_port_link_layer(&dev->ib_dev, 1) ==
 +	    IB_LINK_LAYER_ETHERNET) {
++=======
+ 	err = init_node_data(dev);
+ 	if (err)
+ 		return err;
+ 
+ 	mutex_init(&dev->flow_db.lock);
+ 	mutex_init(&dev->cap_mask_mutex);
+ 	INIT_LIST_HEAD(&dev->qp_list);
+ 	spin_lock_init(&dev->reset_flow_resource_lock);
+ 
+ 	if ((MLX5_CAP_GEN(dev->mdev, port_type) == MLX5_CAP_PORT_TYPE_ETH) &&
+ 	    MLX5_CAP_GEN(dev->mdev, disable_local_lb))
+ 		mutex_init(&dev->lb_mutex);
+ 
+ 	return 0;
+ }
+ 
+ static int mlx5_ib_stage_roce_init(struct mlx5_ib_dev *dev)
+ {
+ 	struct mlx5_core_dev *mdev = dev->mdev;
+ 	enum rdma_link_layer ll;
+ 	int port_type_cap;
+ 	int err;
+ 
+ 	port_type_cap = MLX5_CAP_GEN(mdev, port_type);
+ 	ll = mlx5_port_type_cap_to_rdma_ll(port_type_cap);
+ 
+ 	if (ll == IB_LINK_LAYER_ETHERNET) {
+ 		dev->ib_dev.get_netdev	= mlx5_ib_get_netdev;
++>>>>>>> c8b8992446a9 (IB/mlx5: Move loopback initialization to the corresponding stage)
  		dev->ib_dev.create_wq	 = mlx5_ib_create_wq;
  		dev->ib_dev.modify_wq	 = mlx5_ib_modify_wq;
  		dev->ib_dev.destroy_wq	 = mlx5_ib_destroy_wq;
@@@ -4278,14 -4382,50 +4309,58 @@@
  		err = device_create_file(&dev->ib_dev.dev,
  					 mlx5_class_attributes[i]);
  		if (err)
 -			return err;
 +			goto err_delay_drop;
  	}
  
++<<<<<<< HEAD
 +	if ((MLX5_CAP_GEN(mdev, port_type) == MLX5_CAP_PORT_TYPE_ETH) &&
 +	    (MLX5_CAP_GEN(mdev, disable_local_lb_uc) ||
 +	     MLX5_CAP_GEN(mdev, disable_local_lb_mc)))
 +		mutex_init(&dev->lb_mutex);
 +
++=======
+ 	return 0;
+ }
+ 
+ static void __mlx5_ib_remove(struct mlx5_ib_dev *dev,
+ 			     const struct mlx5_ib_profile *profile,
+ 			     int stage)
+ {
+ 	/* Number of stages to cleanup */
+ 	while (stage) {
+ 		stage--;
+ 		if (profile->stage[stage].cleanup)
+ 			profile->stage[stage].cleanup(dev);
+ 	}
+ 
+ 	ib_dealloc_device((struct ib_device *)dev);
+ }
+ 
+ static void *__mlx5_ib_add(struct mlx5_core_dev *mdev,
+ 			   const struct mlx5_ib_profile *profile)
+ {
+ 	struct mlx5_ib_dev *dev;
+ 	int err;
+ 	int i;
+ 
+ 	printk_once(KERN_INFO "%s", mlx5_version);
+ 
+ 	dev = (struct mlx5_ib_dev *)ib_alloc_device(sizeof(*dev));
+ 	if (!dev)
+ 		return NULL;
+ 
+ 	dev->mdev = mdev;
+ 
+ 	for (i = 0; i < MLX5_IB_STAGE_MAX; i++) {
+ 		if (profile->stage[i].init) {
+ 			err = profile->stage[i].init(dev);
+ 			if (err)
+ 				goto err_out;
+ 		}
+ 	}
+ 
+ 	dev->profile = profile;
++>>>>>>> c8b8992446a9 (IB/mlx5: Move loopback initialization to the corresponding stage)
  	dev->ib_active = true;
  
  	return dev;
@@@ -4333,6 -4436,53 +4408,56 @@@ err_dealloc
  	return NULL;
  }
  
++<<<<<<< HEAD
++=======
+ static const struct mlx5_ib_profile pf_profile = {
+ 	STAGE_CREATE(MLX5_IB_STAGE_INIT,
+ 		     mlx5_ib_stage_init_init,
+ 		     mlx5_ib_stage_init_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_CAPS,
+ 		     mlx5_ib_stage_caps_init,
+ 		     NULL),
+ 	STAGE_CREATE(MLX5_IB_STAGE_ROCE,
+ 		     mlx5_ib_stage_roce_init,
+ 		     mlx5_ib_stage_roce_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_DEVICE_RESOURCES,
+ 		     mlx5_ib_stage_dev_res_init,
+ 		     mlx5_ib_stage_dev_res_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_ODP,
+ 		     mlx5_ib_stage_odp_init,
+ 		     mlx5_ib_stage_odp_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_COUNTERS,
+ 		     mlx5_ib_stage_counters_init,
+ 		     mlx5_ib_stage_counters_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_CONG_DEBUGFS,
+ 		     mlx5_ib_stage_cong_debugfs_init,
+ 		     mlx5_ib_stage_cong_debugfs_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_UAR,
+ 		     mlx5_ib_stage_uar_init,
+ 		     mlx5_ib_stage_uar_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_BFREG,
+ 		     mlx5_ib_stage_bfrag_init,
+ 		     mlx5_ib_stage_bfrag_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_IB_REG,
+ 		     mlx5_ib_stage_ib_reg_init,
+ 		     mlx5_ib_stage_ib_reg_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_UMR_RESOURCES,
+ 		     mlx5_ib_stage_umr_res_init,
+ 		     mlx5_ib_stage_umr_res_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_DELAY_DROP,
+ 		     mlx5_ib_stage_delay_drop_init,
+ 		     mlx5_ib_stage_delay_drop_cleanup),
+ 	STAGE_CREATE(MLX5_IB_STAGE_CLASS_ATTR,
+ 		     mlx5_ib_stage_class_attr_init,
+ 		     NULL),
+ };
+ 
+ static void *mlx5_ib_add(struct mlx5_core_dev *mdev)
+ {
+ 	return __mlx5_ib_add(mdev, &pf_profile);
+ }
+ 
++>>>>>>> c8b8992446a9 (IB/mlx5: Move loopback initialization to the corresponding stage)
  static void mlx5_ib_remove(struct mlx5_core_dev *mdev, void *context)
  {
  	struct mlx5_ib_dev *dev = context;
diff --cc drivers/infiniband/hw/mlx5/mlx5_ib.h
index b8241a8e9c27,768fa7334100..000000000000
--- a/drivers/infiniband/hw/mlx5/mlx5_ib.h
+++ b/drivers/infiniband/hw/mlx5/mlx5_ib.h
@@@ -715,6 -715,35 +715,38 @@@ struct mlx5_ib_delay_drop 
  	struct mlx5_ib_dbg_delay_drop *dbg;
  };
  
++<<<<<<< HEAD
++=======
+ enum mlx5_ib_stages {
+ 	MLX5_IB_STAGE_INIT,
+ 	MLX5_IB_STAGE_CAPS,
+ 	MLX5_IB_STAGE_ROCE,
+ 	MLX5_IB_STAGE_DEVICE_RESOURCES,
+ 	MLX5_IB_STAGE_ODP,
+ 	MLX5_IB_STAGE_COUNTERS,
+ 	MLX5_IB_STAGE_CONG_DEBUGFS,
+ 	MLX5_IB_STAGE_UAR,
+ 	MLX5_IB_STAGE_BFREG,
+ 	MLX5_IB_STAGE_IB_REG,
+ 	MLX5_IB_STAGE_UMR_RESOURCES,
+ 	MLX5_IB_STAGE_DELAY_DROP,
+ 	MLX5_IB_STAGE_CLASS_ATTR,
+ 	MLX5_IB_STAGE_MAX,
+ };
+ 
+ struct mlx5_ib_stage {
+ 	int (*init)(struct mlx5_ib_dev *dev);
+ 	void (*cleanup)(struct mlx5_ib_dev *dev);
+ };
+ 
+ #define STAGE_CREATE(_stage, _init, _cleanup) \
+ 	.stage[_stage] = {.init = _init, .cleanup = _cleanup}
+ 
+ struct mlx5_ib_profile {
+ 	struct mlx5_ib_stage stage[MLX5_IB_STAGE_MAX];
+ };
+ 
++>>>>>>> c8b8992446a9 (IB/mlx5: Move loopback initialization to the corresponding stage)
  struct mlx5_ib_dev {
  	struct ib_device		ib_dev;
  	struct mlx5_core_dev		*mdev;
* Unmerged path drivers/infiniband/hw/mlx5/main.c
* Unmerged path drivers/infiniband/hw/mlx5/mlx5_ib.h
