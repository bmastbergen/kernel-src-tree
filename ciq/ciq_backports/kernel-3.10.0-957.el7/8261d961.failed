iio: core: Introduce IIO configfs support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] core: Introduce IIO configfs support (Tony Camuso) [1559170]
Rebuild_FUZZ: 93.51%
commit-author Daniel Baluta <daniel.baluta@intel.com>
commit 8261d961d1f397925d7a470864c14663d01ed714
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/8261d961.failed

This patch creates the IIO configfs root group. The group
will appear under <mount-point>/iio/, usually /config/iio.

We introduce configfs support in IIO in order to be able to easily
create IIO objects from userspace. The first supported IIO objects
are triggers introduced with next patches.

	Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
	Tested-by: Matt Ranostay <matt.ranostay@intel>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 8261d961d1f397925d7a470864c14663d01ed714)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/Makefile
diff --cc drivers/iio/Makefile
index 7a3866c2d2a1,39d119f18f2e..000000000000
--- a/drivers/iio/Makefile
+++ b/drivers/iio/Makefile
@@@ -6,10 -6,9 +6,15 @@@ obj-$(CONFIG_IIO) += industrialio.
  industrialio-y := industrialio-core.o industrialio-event.o inkern.o
  industrialio-$(CONFIG_IIO_BUFFER) += industrialio-buffer.o
  industrialio-$(CONFIG_IIO_TRIGGER) += industrialio-trigger.o
 +industrialio-$(CONFIG_IIO_BUFFER_CB) += buffer_cb.o
  
++<<<<<<< HEAD
 +obj-$(CONFIG_IIO_TRIGGERED_BUFFER) += industrialio-triggered-buffer.o
 +obj-$(CONFIG_IIO_KFIFO_BUF) += kfifo_buf.o
++=======
+ obj-$(CONFIG_IIO_CONFIGFS) += industrialio-configfs.o
+ obj-$(CONFIG_IIO_TRIGGERED_EVENT) += industrialio-triggered-event.o
++>>>>>>> 8261d961d1f3 (iio: core: Introduce IIO configfs support)
  
  obj-y += accel/
  obj-y += adc/
diff --git a/drivers/iio/Kconfig b/drivers/iio/Kconfig
index 4445a10262c8..85c23010be31 100644
--- a/drivers/iio/Kconfig
+++ b/drivers/iio/Kconfig
@@ -43,6 +43,14 @@ config IIO_TRIGGERED_BUFFER
 
 endif # IIO_BUFFER
 
+config IIO_CONFIGFS
+	tristate "Enable IIO configuration via configfs"
+	select CONFIGFS_FS
+	help
+	  This allows configuring various IIO bits through configfs
+	  (e.g. software triggers). For more info see
+	  Documentation/iio/iio_configfs.txt.
+
 config IIO_TRIGGER
 	boolean "Enable triggered sampling support"
 	help
* Unmerged path drivers/iio/Makefile
diff --git a/drivers/iio/industrialio-configfs.c b/drivers/iio/industrialio-configfs.c
new file mode 100644
index 000000000000..83563dd7fcf4
--- /dev/null
+++ b/drivers/iio/industrialio-configfs.c
@@ -0,0 +1,50 @@
+/*
+ * Industrial I/O configfs bits
+ *
+ * Copyright (c) 2015 Intel Corporation
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published by
+ * the Free Software Foundation.
+ */
+
+#include <linux/configfs.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kmod.h>
+#include <linux/slab.h>
+
+#include <linux/iio/iio.h>
+
+static struct config_item_type iio_root_group_type = {
+	.ct_owner       = THIS_MODULE,
+};
+
+struct configfs_subsystem iio_configfs_subsys = {
+	.su_group = {
+		.cg_item = {
+			.ci_namebuf = "iio",
+			.ci_type = &iio_root_group_type,
+		},
+	},
+	.su_mutex = __MUTEX_INITIALIZER(iio_configfs_subsys.su_mutex),
+};
+EXPORT_SYMBOL(iio_configfs_subsys);
+
+static int __init iio_configfs_init(void)
+{
+	config_group_init(&iio_configfs_subsys.su_group);
+
+	return configfs_register_subsystem(&iio_configfs_subsys);
+}
+module_init(iio_configfs_init);
+
+static void __exit iio_configfs_exit(void)
+{
+	configfs_unregister_subsystem(&iio_configfs_subsys);
+}
+module_exit(iio_configfs_exit);
+
+MODULE_AUTHOR("Daniel Baluta <daniel.baluta@intel.com>");
+MODULE_DESCRIPTION("Industrial I/O configfs support");
+MODULE_LICENSE("GPL v2");
