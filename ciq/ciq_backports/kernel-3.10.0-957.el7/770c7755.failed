x86/umip: Print a line in the boot log that UMIP has been enabled

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [x86] umip: Print a line in the boot log that UMIP has been enabled (Gopal Tiwari) [1456572]
Rebuild_FUZZ: 96.83%
commit-author Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
commit 770c77557757873808a474016a3cae4b37690cb2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/770c7755.failed

Indicate that this feature has been enabled.

	Suggested-by: Ingo Molnar <mingo@kernel.org>
	Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi V. Shankar <ravi.v.shankar@intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Tony Luck <tony.luck@intel.com>
	Cc: ricardo.neri@intel.com
Link: http://lkml.kernel.org/r/1510640985-18412-3-git-send-email-ricardo.neri-calderon@linux.intel.com
[ Changelog tweaks. ]
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 770c77557757873808a474016a3cae4b37690cb2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/common.c
diff --cc arch/x86/kernel/cpu/common.c
index 49cb90f121df,fa998ca8aa5a..000000000000
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@@ -340,14 -315,42 +340,48 @@@ __setup("nosmap", setup_disable_smap)
  
  static __always_inline void setup_smap(struct cpuinfo_x86 *c)
  {
 -	unsigned long eflags = native_save_fl();
 +	unsigned long eflags;
  
  	/* This should have been cleared long ago */
 +	raw_local_save_flags(eflags);
  	BUG_ON(eflags & X86_EFLAGS_AC);
  
++<<<<<<< HEAD
 +	if (cpu_has(c, X86_FEATURE_SMAP))
 +		set_in_cr4(X86_CR4_SMAP);
++=======
+ 	if (cpu_has(c, X86_FEATURE_SMAP)) {
+ #ifdef CONFIG_X86_SMAP
+ 		cr4_set_bits(X86_CR4_SMAP);
+ #else
+ 		cr4_clear_bits(X86_CR4_SMAP);
+ #endif
+ 	}
+ }
+ 
+ static __always_inline void setup_umip(struct cpuinfo_x86 *c)
+ {
+ 	/* Check the boot processor, plus build option for UMIP. */
+ 	if (!cpu_feature_enabled(X86_FEATURE_UMIP))
+ 		goto out;
+ 
+ 	/* Check the current processor's cpuid bits. */
+ 	if (!cpu_has(c, X86_FEATURE_UMIP))
+ 		goto out;
+ 
+ 	cr4_set_bits(X86_CR4_UMIP);
+ 
+ 	pr_info("x86/cpu: Activated the Intel User Mode Instruction Prevention (UMIP) CPU feature\n");
+ 
+ 	return;
+ 
+ out:
+ 	/*
+ 	 * Make sure UMIP is disabled in case it was enabled in a
+ 	 * previous boot (e.g., via kexec).
+ 	 */
+ 	cr4_clear_bits(X86_CR4_UMIP);
++>>>>>>> 770c77557757 (x86/umip: Print a line in the boot log that UMIP has been enabled)
  }
  
  /*
* Unmerged path arch/x86/kernel/cpu/common.c
