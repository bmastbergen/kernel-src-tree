bpf: introduce BPF_PROG_TYPE_PERF_EVENT program type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alexei Starovoitov <ast@fb.com>
commit 0515e5999a466dfe6e1924f460da599bb6821487
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/0515e599.failed

Introduce BPF_PROG_TYPE_PERF_EVENT programs that can be attached to
HW and SW perf events (PERF_TYPE_HARDWARE and PERF_TYPE_SOFTWARE
correspondingly in uapi/linux/perf_event.h)

The program visible context meta structure is
struct bpf_perf_event_data {
    struct pt_regs regs;
     __u64 sample_period;
};
which is accessible directly from the program:
int bpf_prog(struct bpf_perf_event_data *ctx)
{
  ... ctx->sample_period ...
  ... ctx->regs.ip ...
}

The bpf verifier rewrites the accesses into kernel internal
struct bpf_perf_event_data_kern which allows changing
struct perf_sample_data without affecting bpf programs.
New fields can be added to the end of struct bpf_perf_event_data
in the future.

	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Daniel Borkmann <daniel@iogearbox.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0515e5999a466dfe6e1924f460da599bb6821487)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/Kbuild
#	include/uapi/linux/bpf.h
#	kernel/trace/bpf_trace.c
diff --cc include/uapi/linux/Kbuild
index 85e986581513,d0352a971ebd..000000000000
--- a/include/uapi/linux/Kbuild
+++ b/include/uapi/linux/Kbuild
@@@ -66,9 -70,11 +66,15 @@@ header-y += bfs_fs.
  header-y += binfmts.h
  header-y += blkpg.h
  header-y += blktrace_api.h
++<<<<<<< HEAD
++=======
+ header-y += bpf_common.h
+ header-y += bpf_perf_event.h
+ header-y += bpf.h
++>>>>>>> 0515e5999a46 (bpf: introduce BPF_PROG_TYPE_PERF_EVENT program type)
  header-y += bpqether.h
  header-y += bsg.h
 +header-y += bt-bmc.h
  header-y += btrfs.h
  header-y += can.h
  header-y += capability.h
diff --cc include/uapi/linux/bpf.h
index e369860b690e,f896dfac4ac0..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -115,8 -89,24 +115,18 @@@ enum bpf_map_type 
  
  enum bpf_prog_type {
  	BPF_PROG_TYPE_UNSPEC,
++<<<<<<< HEAD
++=======
+ 	BPF_PROG_TYPE_SOCKET_FILTER,
+ 	BPF_PROG_TYPE_KPROBE,
+ 	BPF_PROG_TYPE_SCHED_CLS,
+ 	BPF_PROG_TYPE_SCHED_ACT,
+ 	BPF_PROG_TYPE_TRACEPOINT,
+ 	BPF_PROG_TYPE_XDP,
+ 	BPF_PROG_TYPE_PERF_EVENT,
++>>>>>>> 0515e5999a46 (bpf: introduce BPF_PROG_TYPE_PERF_EVENT program type)
  };
  
 -#define BPF_PSEUDO_MAP_FD	1
 -
 -/* flags for BPF_MAP_UPDATE_ELEM command */
 -#define BPF_ANY		0 /* create new element or update existing */
 -#define BPF_NOEXIST	1 /* create new element if it didn't exist */
 -#define BPF_EXIST	2 /* update existing element */
 -
 -#define BPF_F_NO_PREALLOC	(1U << 0)
 -
  union bpf_attr {
  	struct { /* anonymous struct used by BPF_MAP_CREATE command */
  		__u32	map_type;	/* one of enum bpf_map_type */
* Unmerged path kernel/trace/bpf_trace.c
diff --git a/include/linux/perf_event.h b/include/linux/perf_event.h
index c93e5f6b30d7..a2a6f188989a 100644
--- a/include/linux/perf_event.h
+++ b/include/linux/perf_event.h
@@ -700,6 +700,11 @@ struct perf_output_handle {
 	int				page;
 };
 
+struct bpf_perf_event_data_kern {
+	struct pt_regs *regs;
+	struct perf_sample_data *data;
+};
+
 #ifdef CONFIG_CGROUP_PERF
 
 #ifndef __GENKSYMS__
* Unmerged path include/uapi/linux/Kbuild
* Unmerged path include/uapi/linux/bpf.h
diff --git a/include/uapi/linux/bpf_perf_event.h b/include/uapi/linux/bpf_perf_event.h
new file mode 100644
index 000000000000..067427259820
--- /dev/null
+++ b/include/uapi/linux/bpf_perf_event.h
@@ -0,0 +1,18 @@
+/* Copyright (c) 2016 Facebook
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of version 2 of the GNU General Public
+ * License as published by the Free Software Foundation.
+ */
+#ifndef _UAPI__LINUX_BPF_PERF_EVENT_H__
+#define _UAPI__LINUX_BPF_PERF_EVENT_H__
+
+#include <linux/types.h>
+#include <linux/ptrace.h>
+
+struct bpf_perf_event_data {
+	struct pt_regs regs;
+	__u64 sample_period;
+};
+
+#endif /* _UAPI__LINUX_BPF_PERF_EVENT_H__ */
* Unmerged path kernel/trace/bpf_trace.c
