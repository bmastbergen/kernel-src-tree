hv_netvsc: fix race in napi poll when rescheduling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Stephen Hemminger <stephen@networkplumber.org>
commit d64e38ae690e3337db0d38d9b149a193a1646c4b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/d64e38ae.failed

There is a race between napi_reschedule and re-enabling interrupts
which could lead to missed host interrrupts.  This occurs when
interrupts are re-enabled (hv_end_read) and vmbus irq callback
(netvsc_channel_cb) has already scheduled NAPI.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d64e38ae690e3337db0d38d9b149a193a1646c4b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index 19ec818003ff,4237cedc4f08..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -1248,10 -1206,11 +1248,16 @@@ int netvsc_poll(struct napi_struct *nap
  	 */
  	if (send_recv_completions(ndev, net_device, nvchan) == 0 &&
  	    work_done < budget &&
++<<<<<<< HEAD
 +	    netvsc_napi_complete_done(napi, work_done) &&
 +	    hv_end_read(&channel->inbound)) {
++=======
+ 	    napi_complete_done(napi, work_done) &&
+ 	    hv_end_read(&channel->inbound) &&
+ 	    napi_schedule_prep(napi)) {
++>>>>>>> d64e38ae690e (hv_netvsc: fix race in napi poll when rescheduling)
  		hv_begin_read(&channel->inbound);
- 		napi_reschedule(napi);
+ 		__napi_schedule(napi);
  	}
  
  	/* Driver may overshoot since multiple packets per descriptor */
* Unmerged path drivers/net/hyperv/netvsc.c
