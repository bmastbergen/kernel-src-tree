bpf: enable bpf syscall on x64 and i386

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alexei Starovoitov <ast@plumgrid.com>
commit 749730ce42a2121e1c88350d69478bff3994b10a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/749730ce.failed

done as separate commit to ease conflict resolution

	Signed-off-by: Alexei Starovoitov <ast@plumgrid.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 749730ce42a2121e1c88350d69478bff3994b10a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/syscalls/syscall_32.tbl
#	arch/x86/syscalls/syscall_64.tbl
#	include/linux/syscalls.h
#	include/uapi/asm-generic/unistd.h
#	kernel/sys_ni.c
diff --cc arch/x86/syscalls/syscall_32.tbl
index afdffde73ea5,9fe1b5d002f0..000000000000
--- a/arch/x86/syscalls/syscall_32.tbl
+++ b/arch/x86/syscalls/syscall_32.tbl
@@@ -362,8 -362,5 +362,12 @@@
  354	i386	seccomp			sys_seccomp
  355	i386	getrandom		sys_getrandom
  356	i386	memfd_create		sys_memfd_create
++<<<<<<< HEAD
 +374	i386	userfaultfd		sys_userfaultfd
 +377	i386	copy_file_range		sys_copy_file_range
 +380	i386	pkey_mprotect		sys_pkey_mprotect
 +381	i386	pkey_alloc		sys_pkey_alloc
 +382	i386	pkey_free		sys_pkey_free
++=======
+ 357	i386	bpf			sys_bpf
++>>>>>>> 749730ce42a2 (bpf: enable bpf syscall on x64 and i386)
diff --cc arch/x86/syscalls/syscall_64.tbl
index ff3b5cfc3e42,281150b539a2..000000000000
--- a/arch/x86/syscalls/syscall_64.tbl
+++ b/arch/x86/syscalls/syscall_64.tbl
@@@ -327,11 -327,7 +327,15 @@@
  318	common	getrandom		sys_getrandom
  319	common	memfd_create		sys_memfd_create
  320	common	kexec_file_load		sys_kexec_file_load
++<<<<<<< HEAD
 +323	common	userfaultfd		sys_userfaultfd
 +326	common	copy_file_range		sys_copy_file_range
 +329	common	pkey_mprotect		sys_pkey_mprotect
 +330	common	pkey_alloc		sys_pkey_alloc
 +331	common	pkey_free		sys_pkey_free
++=======
+ 321	common	bpf			sys_bpf
++>>>>>>> 749730ce42a2 (bpf: enable bpf syscall on x64 and i386)
  
  #
  # x32-specific system call numbers start at 512 to avoid cache impact
diff --cc include/linux/syscalls.h
index 14a89f15b559,bda9b81357cc..000000000000
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@@ -864,13 -876,5 +865,17 @@@ asmlinkage long sys_seccomp(unsigned in
  			    const char __user *uargs);
  asmlinkage long sys_getrandom(char __user *buf, size_t count,
  			      unsigned int flags);
++<<<<<<< HEAD
 +
 +asmlinkage long sys_copy_file_range(int fd_in, loff_t __user *off_in,
 +				    int fd_out, loff_t __user *off_out,
 +				    size_t len, unsigned int flags);
 +asmlinkage long sys_pkey_mprotect(unsigned long start, size_t len,
 +				  unsigned long prot, int pkey);
 +asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
 +asmlinkage long sys_pkey_free(int pkey);
 +
++=======
+ asmlinkage long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);
++>>>>>>> 749730ce42a2 (bpf: enable bpf syscall on x64 and i386)
  #endif
diff --cc include/uapi/asm-generic/unistd.h
index 9c016e7ca99e,22749c134117..000000000000
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@@ -696,17 -703,13 +696,27 @@@ __SYSCALL(__NR_finit_module, sys_finit_
  __SYSCALL(__NR_seccomp, sys_seccomp)
  #define __NR_getrandom 278
  __SYSCALL(__NR_getrandom, sys_getrandom)
++<<<<<<< HEAD
 +#define __NR_copy_file_range 285
 +__SYSCALL(__NR_copy_file_range, sys_copy_file_range)
 +#define __NR_pkey_mprotect 288
 +__SYSCALL(__NR_pkey_mprotect, sys_pkey_mprotect)
 +#define __NR_pkey_alloc 289
 +__SYSCALL(__NR_pkey_alloc,    sys_pkey_alloc)
 +#define __NR_pkey_free 290
 +__SYSCALL(__NR_pkey_free,     sys_pkey_free)
 +
 +#undef __NR_syscalls
 +#define __NR_syscalls 291
++=======
+ #define __NR_memfd_create 279
+ __SYSCALL(__NR_memfd_create, sys_memfd_create)
+ #define __NR_bpf 280
+ __SYSCALL(__NR_bpf, sys_bpf)
+ 
+ #undef __NR_syscalls
+ #define __NR_syscalls 281
++>>>>>>> 749730ce42a2 (bpf: enable bpf syscall on x64 and i386)
  
  /*
   * All syscalls below here should go away really,
diff --cc kernel/sys_ni.c
index 1e320b506dac,b4b5083f5f5e..000000000000
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@@ -219,7 -219,5 +219,12 @@@ cond_syscall(sys_kcmp)
  /* operate on Secure Computing state */
  cond_syscall(sys_seccomp);
  
++<<<<<<< HEAD
 +/* memory protection keys */
 +cond_syscall(sys_pkey_mprotect);
 +cond_syscall(sys_pkey_alloc);
 +cond_syscall(sys_pkey_free);
++=======
+ /* access BPF programs and maps */
+ cond_syscall(sys_bpf);
++>>>>>>> 749730ce42a2 (bpf: enable bpf syscall on x64 and i386)
* Unmerged path arch/x86/syscalls/syscall_32.tbl
* Unmerged path arch/x86/syscalls/syscall_64.tbl
* Unmerged path include/linux/syscalls.h
* Unmerged path include/uapi/asm-generic/unistd.h
* Unmerged path kernel/sys_ni.c
