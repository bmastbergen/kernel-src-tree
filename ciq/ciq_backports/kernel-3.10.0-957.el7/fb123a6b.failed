iio: hid-sensors: make hid_sensor_get_reporting_interval static

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [iio] hid-sensors: make hid_sensor_get_reporting_interval static (Tony Camuso) [1559170]
Rebuild_FUZZ: 95.87%
commit-author Daniel Baluta <daniel.baluta@intel.com>
commit fb123a6b6b893e8461c17a6d068fd6e1671cf0de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/fb123a6b.failed

This fixes the following sparse warning:

  CHECK   drivers/iio/common/hid-sensors/hid-sensor-attributes.c
drivers/iio/common/hid-sensors/hid-sensor-attributes.c:346:5: warning:
symbol 'hid_sensor_get_reporting_interval' was not declared. Should it be static?

	Signed-off-by: Daniel Baluta <daniel.baluta@intel.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit fb123a6b6b893e8461c17a6d068fd6e1671cf0de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/common/hid-sensors/hid-sensor-attributes.c
diff --cc drivers/iio/common/hid-sensors/hid-sensor-attributes.c
index b707afcb94b0,25b01e156d82..000000000000
--- a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
@@@ -246,6 -263,87 +246,90 @@@ int hid_sensor_write_raw_hyst_value(str
  }
  EXPORT_SYMBOL(hid_sensor_write_raw_hyst_value);
  
++<<<<<<< HEAD
++=======
+ /*
+  * This fuction applies the unit exponent to the scale.
+  * For example:
+  * 9.806650 ->exp:2-> val0[980]val1[665000]
+  * 9.000806 ->exp:2-> val0[900]val1[80600]
+  * 0.174535 ->exp:2-> val0[17]val1[453500]
+  * 1.001745 ->exp:0-> val0[1]val1[1745]
+  * 1.001745 ->exp:2-> val0[100]val1[174500]
+  * 1.001745 ->exp:4-> val0[10017]val1[450000]
+  * 9.806650 ->exp:-2-> val0[0]val1[98066]
+  */
+ static void adjust_exponent_micro(int *val0, int *val1, int scale0,
+ 				  int scale1, int exp)
+ {
+ 	int i;
+ 	int x;
+ 	int res;
+ 	int rem;
+ 
+ 	if (exp > 0) {
+ 		*val0 = scale0 * pow_10(exp);
+ 		res = 0;
+ 		if (exp > 6) {
+ 			*val1 = 0;
+ 			return;
+ 		}
+ 		for (i = 0; i < exp; ++i) {
+ 			x = scale1 / pow_10(5 - i);
+ 			res += (pow_10(exp - 1 - i) * x);
+ 			scale1 = scale1 % pow_10(5 - i);
+ 		}
+ 		*val0 += res;
+ 			*val1 = scale1 * pow_10(exp);
+ 	} else if (exp < 0) {
+ 		exp = abs(exp);
+ 		if (exp > 6) {
+ 			*val0 = *val1 = 0;
+ 			return;
+ 		}
+ 		*val0 = scale0 / pow_10(exp);
+ 		rem = scale0 % pow_10(exp);
+ 		res = 0;
+ 		for (i = 0; i < (6 - exp); ++i) {
+ 			x = scale1 / pow_10(5 - i);
+ 			res += (pow_10(5 - exp - i) * x);
+ 			scale1 = scale1 % pow_10(5 - i);
+ 		}
+ 		*val1 = rem * pow_10(6 - exp) + res;
+ 	} else {
+ 		*val0 = scale0;
+ 		*val1 = scale1;
+ 	}
+ }
+ 
+ int hid_sensor_format_scale(u32 usage_id,
+ 			struct hid_sensor_hub_attribute_info *attr_info,
+ 			int *val0, int *val1)
+ {
+ 	int i;
+ 	int exp;
+ 
+ 	*val0 = 1;
+ 	*val1 = 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(unit_conversion); ++i) {
+ 		if (unit_conversion[i].usage_id == usage_id &&
+ 			unit_conversion[i].unit == attr_info->units) {
+ 			exp  = hid_sensor_convert_exponent(
+ 						attr_info->unit_expo);
+ 			adjust_exponent_micro(val0, val1,
+ 					unit_conversion[i].scale_val0,
+ 					unit_conversion[i].scale_val1, exp);
+ 			break;
+ 		}
+ 	}
+ 
+ 	return IIO_VAL_INT_PLUS_MICRO;
+ }
+ EXPORT_SYMBOL(hid_sensor_format_scale);
+ 
+ static
++>>>>>>> fb123a6b6b89 (iio: hid-sensors: make hid_sensor_get_reporting_interval static)
  int hid_sensor_get_reporting_interval(struct hid_sensor_hub_device *hsdev,
  					u32 usage_id,
  					struct hid_sensor_common *st)
* Unmerged path drivers/iio/common/hid-sensors/hid-sensor-attributes.c
