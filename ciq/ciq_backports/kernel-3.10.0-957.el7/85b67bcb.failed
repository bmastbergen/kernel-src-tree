perf, bpf: minimize the size of perf_trace_() tracepoint handler

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Alexei Starovoitov <ast@fb.com>
commit 85b67bcb7e4a23ced05e7020bf5843b9857f6881
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/85b67bcb.failed

move trace_call_bpf() into helper function to minimize the size
of perf_trace_*() tracepoint handlers.
    text	   data	    bss	    dec	 	   hex	filename
10541679	5526646	2945024	19013349	1221ee5	vmlinux_before
10509422	5526646	2945024	18981092	121a0e4	vmlinux_after

It may seem that perf_fetch_caller_regs() can also be moved,
but that is incorrect, since ip/sp will be wrong.

bpf+tracepoint performance is not affected, since
perf_swevent_put_recursion_context() is now inlined.
export_symbol_gpl can also be dropped.

No measurable change in normal perf tracepoints.

	Suggested-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 85b67bcb7e4a23ced05e7020bf5843b9857f6881)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/trace_events.h
#	include/trace/perf.h
#	kernel/events/core.c
diff --cc kernel/events/core.c
index 3da42ad5a6b0,9eb23dc27462..000000000000
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@@ -7645,7 -6997,26 +7645,30 @@@ static int perf_tp_event_match(struct p
  	return 1;
  }
  
++<<<<<<< HEAD
 +void perf_tp_event(u64 addr, u64 count, void *record, int entry_size,
++=======
+ void perf_trace_run_bpf_submit(void *raw_data, int size, int rctx,
+ 			       struct trace_event_call *call, u64 count,
+ 			       struct pt_regs *regs, struct hlist_head *head,
+ 			       struct task_struct *task)
+ {
+ 	struct bpf_prog *prog = call->prog;
+ 
+ 	if (prog) {
+ 		*(struct pt_regs **)raw_data = regs;
+ 		if (!trace_call_bpf(prog, raw_data) || hlist_empty(head)) {
+ 			perf_swevent_put_recursion_context(rctx);
+ 			return;
+ 		}
+ 	}
+ 	perf_tp_event(call->event.type, count, raw_data, size, regs, head,
+ 		      rctx, task);
+ }
+ EXPORT_SYMBOL_GPL(perf_trace_run_bpf_submit);
+ 
+ void perf_tp_event(u16 event_type, u64 count, void *record, int entry_size,
++>>>>>>> 85b67bcb7e4a (perf, bpf: minimize the size of perf_trace_() tracepoint handler)
  		   struct pt_regs *regs, struct hlist_head *head, int rctx,
  		   struct task_struct *task)
  {
* Unmerged path include/linux/trace_events.h
* Unmerged path include/trace/perf.h
* Unmerged path include/linux/trace_events.h
* Unmerged path include/trace/perf.h
* Unmerged path kernel/events/core.c
