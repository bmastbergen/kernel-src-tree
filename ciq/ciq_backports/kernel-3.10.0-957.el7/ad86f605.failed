nfs: system crashes after NFS4ERR_MOVED recovery

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Bill.Baker@oracle.com <Bill.Baker@oracle.com>
commit ad86f605c59500da82d196ac312cfbac3daba31d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/ad86f605.failed

nfs4_update_server unconditionally releases the nfs_client for the
source server. If migration fails, this can cause the source server's
nfs_client struct to be left with a low reference count, resulting in
use-after-free.  Also, adjust reference count handling for ELOOP.

NFS: state manager: migration failed on NFSv4 server nfsvmu10 with error 6
WARNING: CPU: 16 PID: 17960 at fs/nfs/client.c:281 nfs_put_client+0xfa/0x110 [nfs]()
	nfs_put_client+0xfa/0x110 [nfs]
	nfs4_run_state_manager+0x30/0x40 [nfsv4]
	kthread+0xd8/0xf0

BUG: unable to handle kernel NULL pointer dereference at 00000000000002a8
	nfs4_xdr_enc_write+0x6b/0x160 [nfsv4]
	rpcauth_wrap_req+0xac/0xf0 [sunrpc]
	call_transmit+0x18c/0x2c0 [sunrpc]
	__rpc_execute+0xa6/0x490 [sunrpc]
	rpc_async_schedule+0x15/0x20 [sunrpc]
	process_one_work+0x160/0x470
	worker_thread+0x112/0x540
	? rescuer_thread+0x3f0/0x3f0
	kthread+0xd8/0xf0

This bug was introduced by 32e62b7c ("NFS: Add nfs4_update_server"),
but the fix applies cleanly to 52442f9b ("NFS4: Avoid migration loops")

	Reported-by: Helen Chao <helen.chao@oracle.com>
Fixes: 52442f9b11b7 ("NFS4: Avoid migration loops")
	Signed-off-by: Bill Baker <bill.baker@oracle.com>
	Reviewed-by: Chuck Lever <chuck.lever@oracle.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit ad86f605c59500da82d196ac312cfbac3daba31d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4client.c
diff --cc fs/nfs/nfs4client.c
index f611a9796227,979631411a0e..000000000000
--- a/fs/nfs/nfs4client.c
+++ b/fs/nfs/nfs4client.c
@@@ -927,17 -859,18 +927,22 @@@ static int nfs4_set_client(struct nfs_s
  		set_bit(NFS_CS_NORESVPORT, &cl_init.init_flags);
  	if (server->options & NFS_OPTION_MIGRATION)
  		set_bit(NFS_CS_MIGRATION, &cl_init.init_flags);
 -	if (test_bit(NFS_MIG_TSM_POSSIBLE, &server->mig_status))
 -		set_bit(NFS_CS_TSM_POSSIBLE, &cl_init.init_flags);
 -	server->port = rpc_get_port(addr);
  
  	/* Allocate or find a client reference we can use */
 -	clp = nfs_get_client(&cl_init);
 -	if (IS_ERR(clp))
 -		return PTR_ERR(clp);
 +	clp = nfs_get_client(&cl_init, authflavour);
 +	if (IS_ERR(clp)) {
 +		error = PTR_ERR(clp);
 +		goto error;
 +	}
  
  	if (server->nfs_client == clp) {
++<<<<<<< HEAD
 +		error = -ELOOP;
 +		goto error;
++=======
+ 		nfs_put_client(clp);
+ 		return -ELOOP;
++>>>>>>> ad86f605c595 (nfs: system crashes after NFS4ERR_MOVED recovery)
  	}
  
  	/*
@@@ -1305,44 -1229,28 +1310,49 @@@ int nfs4_update_server(struct nfs_serve
  	struct sockaddr *localaddr = (struct sockaddr *)&address;
  	int error;
  
 +	dprintk("--> %s: move FSID %llx:%llx to \"%s\")\n", __func__,
 +			(unsigned long long)server->fsid.major,
 +			(unsigned long long)server->fsid.minor,
 +			hostname);
 +
  	error = rpc_switch_client_transport(clnt, &xargs, clnt->cl_timeout);
 -	if (error != 0)
 -		return error;
 +	if (error != 0) {
 +		dprintk("<-- %s(): rpc_switch_client_transport returned %d\n",
 +			__func__, error);
 +		goto out;
 +	}
  
  	error = rpc_localaddr(clnt, localaddr, sizeof(address));
 -	if (error != 0)
 -		return error;
 +	if (error != 0) {
 +		dprintk("<-- %s(): rpc_localaddr returned %d\n",
 +			__func__, error);
 +		goto out;
 +	}
  
 -	if (rpc_ntop(localaddr, buf, sizeof(buf)) == 0)
 -		return -EAFNOSUPPORT;
 +	error = -EAFNOSUPPORT;
 +	if (rpc_ntop(localaddr, buf, sizeof(buf)) == 0) {
 +		dprintk("<-- %s(): rpc_ntop returned %d\n",
 +			__func__, error);
 +		goto out;
 +	}
  
  	nfs_server_remove_lists(server);
 -	set_bit(NFS_MIG_TSM_POSSIBLE, &server->mig_status);
  	error = nfs4_set_client(server, hostname, sap, salen, buf,
 +				clp->cl_rpcclient->cl_auth->au_flavor,
  				clp->cl_proto, clnt->cl_timeout,
  				clp->cl_minorversion, net);
++<<<<<<< HEAD
 +	nfs_put_client(clp);
++=======
+ 	clear_bit(NFS_MIG_TSM_POSSIBLE, &server->mig_status);
++>>>>>>> ad86f605c595 (nfs: system crashes after NFS4ERR_MOVED recovery)
  	if (error != 0) {
  		nfs_server_insert_lists(server);
 -		return error;
 +		dprintk("<-- %s(): nfs4_set_client returned %d\n",
 +			__func__, error);
 +		goto out;
  	}
+ 	nfs_put_client(clp);
  
  	if (server->nfs_client->cl_hostname == NULL)
  		server->nfs_client->cl_hostname = kstrdup(hostname, GFP_KERNEL);
* Unmerged path fs/nfs/nfs4client.c
