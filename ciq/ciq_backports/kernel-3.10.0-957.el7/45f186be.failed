s390/dasd: Refactor prefix_LRE() and related functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [s390] dasd: Refactor prefix_LRE() and related functions (Hendrik Brueckner) [1519353]
Rebuild_FUZZ: 95.15%
commit-author Jan Höppner <hoeppner@linux.vnet.ibm.com>
commit 45f186becfcfa12a98acdfa2af513018d8b086e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/45f186be.failed

We already have define_extent() that prepares necessary data for the
Define Extent CCW. The exact same thing is done in prefix_LRE().

Remove the duplicate code and move commands that were only used in
combination with the Prefix command to define_extent(). One of these
commands needs the blocksize to be specified. Add the blksize parameter
to define_extent() to account for that.

In addition, the check_XRC() function can be made more generic. Do this
and remove the Prefix-specific check_XRC_on_prefix() function.

Furthermore, prefix_LRE() uses fill_LRE_data() to prepare Locate Record
Extended data. Rename the function to fit the scheme better and make it
usable outside of the Prefix context by adding the corresponding CCW
command.

	Reviewed-by: Stefan Haberland <sth@linux.vnet.ibm.com>
	Signed-off-by: Jan Höppner <hoeppner@linux.vnet.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 45f186becfcfa12a98acdfa2af513018d8b086e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/block/dasd_eckd.c
diff --cc drivers/s390/block/dasd_eckd.c
index 92c5aa965aec,4fdf1101bd2f..000000000000
--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@@ -213,15 -213,12 +213,13 @@@ static void set_ch_t(struct ch_t *geo, 
  	geo->head |= head;
  }
  
- static int
- check_XRC (struct ccw1         *de_ccw,
-            struct DE_eckd_data *data,
-            struct dasd_device  *device)
+ static int check_XRC(struct ccw1 *ccw, struct DE_eckd_data *data,
+ 		     struct dasd_device *device)
  {
 -	struct dasd_eckd_private *private = device->private;
 +        struct dasd_eckd_private *private;
  	int rc;
  
 +        private = (struct dasd_eckd_private *) device->private;
  	if (!private->rdc_data.facilities.XRC_supported)
  		return 0;
  
@@@ -241,19 -241,20 +242,34 @@@
  
  static int
  define_extent(struct ccw1 *ccw, struct DE_eckd_data *data, unsigned int trk,
- 	      unsigned int totrk, int cmd, struct dasd_device *device)
+ 	      unsigned int totrk, int cmd, struct dasd_device *device,
+ 	      int blksize)
  {
++<<<<<<< HEAD
 +	struct dasd_eckd_private *private;
 +	u32 begcyl, endcyl;
++=======
+ 	struct dasd_eckd_private *private = device->private;
++>>>>>>> 45f186becfcf (s390/dasd: Refactor prefix_LRE() and related functions)
  	u16 heads, beghead, endhead;
+ 	u32 begcyl, endcyl;
  	int rc = 0;
  
++<<<<<<< HEAD
 +	private = (struct dasd_eckd_private *) device->private;
 +
 +	ccw->cmd_code = DASD_ECKD_CCW_DEFINE_EXTENT;
 +	ccw->flags = 0;
 +	ccw->count = 16;
 +	ccw->cda = (__u32) __pa(data);
++=======
+ 	if (ccw) {
+ 		ccw->cmd_code = DASD_ECKD_CCW_DEFINE_EXTENT;
+ 		ccw->flags = 0;
+ 		ccw->count = 16;
+ 		ccw->cda = (__u32)__pa(data);
+ 	}
++>>>>>>> 45f186becfcf (s390/dasd: Refactor prefix_LRE() and related functions)
  
  	memset(data, 0, sizeof(struct DE_eckd_data));
  	switch (cmd) {
@@@ -328,38 -346,25 +361,58 @@@
  	return rc;
  }
  
++<<<<<<< HEAD
 +static int check_XRC_on_prefix(struct PFX_eckd_data *pfxdata,
 +			       struct dasd_device  *device)
 +{
 +	struct dasd_eckd_private *private;
 +	int rc;
 +
 +	private = (struct dasd_eckd_private *) device->private;
 +	if (!private->rdc_data.facilities.XRC_supported)
 +		return 0;
 +
 +	/* switch on System Time Stamp - needed for XRC Support */
 +	pfxdata->define_extent.ga_extended |= 0x08; /* 'Time Stamp Valid'   */
 +	pfxdata->define_extent.ga_extended |= 0x02; /* 'Extended Parameter' */
 +	pfxdata->validity.time_stamp = 1;	    /* 'Time Stamp Valid'   */
 +
 +	rc = get_sync_clock(&pfxdata->define_extent.ep_sys_time);
 +	/* Ignore return code if sync clock is switched off. */
 +	if (rc == -EOPNOTSUPP || rc == -EACCES)
 +		rc = 0;
 +	return rc;
 +}
 +
 +static void fill_LRE_data(struct LRE_eckd_data *data, unsigned int trk,
 +			  unsigned int rec_on_trk, int count, int cmd,
 +			  struct dasd_device *device, unsigned int reclen,
 +			  unsigned int tlf)
++=======
+ 
+ static void locate_record_ext(struct ccw1 *ccw, struct LRE_eckd_data *data,
+ 			      unsigned int trk, unsigned int rec_on_trk,
+ 			      int count, int cmd, struct dasd_device *device,
+ 			      unsigned int reclen, unsigned int tlf)
++>>>>>>> 45f186becfcf (s390/dasd: Refactor prefix_LRE() and related functions)
  {
 -	struct dasd_eckd_private *private = device->private;
 +	struct dasd_eckd_private *private;
  	int sector;
  	int dn, d;
  
++<<<<<<< HEAD
 +	private = (struct dasd_eckd_private *) device->private;
++=======
+ 	if (ccw) {
+ 		ccw->cmd_code = DASD_ECKD_CCW_LOCATE_RECORD_EXT;
+ 		ccw->flags = 0;
+ 		if (cmd == DASD_ECKD_CCW_WRITE_FULL_TRACK)
+ 			ccw->count = 22;
+ 		else
+ 			ccw->count = 20;
+ 		ccw->cda = (__u32)__pa(data);
+ 	}
++>>>>>>> 45f186becfcf (s390/dasd: Refactor prefix_LRE() and related functions)
  
  	memset(data, 0, sizeof(*data));
  	sector = 0;
@@@ -491,14 -496,12 +544,12 @@@ static int prefix_LRE(struct ccw1 *ccw
  		      unsigned int blksize, unsigned int tlf)
  {
  	struct dasd_eckd_private *basepriv, *startpriv;
- 	struct DE_eckd_data *dedata;
  	struct LRE_eckd_data *lredata;
- 	u32 begcyl, endcyl;
- 	u16 heads, beghead, endhead;
+ 	struct DE_eckd_data *dedata;
  	int rc = 0;
  
 -	basepriv = basedev->private;
 -	startpriv = startdev->private;
 +	basepriv = (struct dasd_eckd_private *) basedev->private;
 +	startpriv = (struct dasd_eckd_private *) startdev->private;
  	dedata = &pfxdata->define_extent;
  	lredata = &pfxdata->locate_record;
  
* Unmerged path drivers/s390/block/dasd_eckd.c
diff --git a/drivers/s390/block/dasd_eckd.h b/drivers/s390/block/dasd_eckd.h
index c070e4a901ca..ffd5d57b32bd 100644
--- a/drivers/s390/block/dasd_eckd.h
+++ b/drivers/s390/block/dasd_eckd.h
@@ -29,6 +29,7 @@
 #define DASD_ECKD_CCW_SNID		 0x34
 #define DASD_ECKD_CCW_RSSD		 0x3e
 #define DASD_ECKD_CCW_LOCATE_RECORD	 0x47
+#define DASD_ECKD_CCW_LOCATE_RECORD_EXT	 0x4b
 #define DASD_ECKD_CCW_SNSS		 0x54
 #define DASD_ECKD_CCW_DEFINE_EXTENT	 0x63
 #define DASD_ECKD_CCW_WRITE_MT		 0x85
