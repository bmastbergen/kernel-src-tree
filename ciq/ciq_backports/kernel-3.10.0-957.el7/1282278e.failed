efi-bgrt: Add error handling; inform the user when ignoring the BGRT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Josh Triplett <josh@joshtriplett.org>
commit 1282278ee00b41f314d1bce058a6b28b1bd49c21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/1282278e.failed

Gracefully handle failures to allocate memory for the image, which might
be arbitrarily large.

efi_bgrt_init can fail in various ways as well, usually because the
BIOS-provided BGRT structure does not match expectations.  Add
appropriate error messages rather than failing silently.

	Reported-by: Srihari Vijayaraghavan <linux.bug.reporting@gmail.com>
Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=81321
	Signed-off-by: Josh Triplett <josh@joshtriplett.org>
	Signed-off-by: Matt Fleming <matt.fleming@intel.com>
(cherry picked from commit 1282278ee00b41f314d1bce058a6b28b1bd49c21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/platform/efi/efi-bgrt.c
diff --cc arch/x86/platform/efi/efi-bgrt.c
index d39e7aeea75f,d143d216d52b..000000000000
--- a/arch/x86/platform/efi/efi-bgrt.c
+++ b/arch/x86/platform/efi/efi-bgrt.c
@@@ -39,35 -40,66 +39,78 @@@ void __init efi_bgrt_init(void
  	if (ACPI_FAILURE(status))
  		return;
  
- 	if (bgrt_tab->header.length < sizeof(*bgrt_tab))
+ 	if (bgrt_tab->header.length < sizeof(*bgrt_tab)) {
+ 		pr_err("Ignoring BGRT: invalid length %u (expected %zu)\n",
+ 		       bgrt_tab->header.length, sizeof(*bgrt_tab));
  		return;
- 	if (bgrt_tab->version != 1 || bgrt_tab->status != 1)
+ 	}
+ 	if (bgrt_tab->version != 1) {
+ 		pr_err("Ignoring BGRT: invalid version %u (expected 1)\n",
+ 		       bgrt_tab->version);
+ 		return;
+ 	}
+ 	if (bgrt_tab->status != 1) {
+ 		pr_err("Ignoring BGRT: invalid status %u (expected 1)\n",
+ 		       bgrt_tab->status);
+ 		return;
+ 	}
+ 	if (bgrt_tab->image_type != 0) {
+ 		pr_err("Ignoring BGRT: invalid image type %u (expected 0)\n",
+ 		       bgrt_tab->image_type);
  		return;
- 	if (bgrt_tab->image_type != 0 || !bgrt_tab->image_address)
+ 	}
+ 	if (!bgrt_tab->image_address) {
+ 		pr_err("Ignoring BGRT: null image address\n");
  		return;
+ 	}
  
 -	image = efi_lookup_mapped_addr(bgrt_tab->image_address);
 +	image = ioremap(bgrt_tab->image_address, sizeof(bmp_header));
  	if (!image) {
++<<<<<<< HEAD
 +		pr_err("Ignoring BGRT: failed to map image header memory\n");
 +		return;
++=======
+ 		image = early_memremap(bgrt_tab->image_address,
+ 				       sizeof(bmp_header));
+ 		ioremapped = true;
+ 		if (!image) {
+ 			pr_err("Ignoring BGRT: failed to map image header memory\n");
+ 			return;
+ 		}
++>>>>>>> 1282278ee00b (efi-bgrt: Add error handling; inform the user when ignoring the BGRT)
  	}
  
 -	memcpy_fromio(&bmp_header, image, sizeof(bmp_header));
 -	if (ioremapped)
 -		early_iounmap(image, sizeof(bmp_header));
 +	memcpy(&bmp_header, image, sizeof(bmp_header));
 +	iounmap(image);
  	bgrt_image_size = bmp_header.size;
  
- 	bgrt_image = kmalloc(bgrt_image_size, GFP_KERNEL);
- 	if (!bgrt_image)
+ 	bgrt_image = kmalloc(bgrt_image_size, GFP_KERNEL | __GFP_NOWARN);
+ 	if (!bgrt_image) {
+ 		pr_err("Ignoring BGRT: failed to allocate memory for image (wanted %zu bytes)\n",
+ 		       bgrt_image_size);
  		return;
+ 	}
  
++<<<<<<< HEAD
 +	image = ioremap(bgrt_tab->image_address, bmp_header.size);
 +	if (!image) {
 +		pr_err("Ignoring BGRT: failed to map image memory\n");
 +		kfree(bgrt_image);
 +		bgrt_image = NULL;
 +		return;
++=======
+ 	if (ioremapped) {
+ 		image = early_memremap(bgrt_tab->image_address,
+ 				       bmp_header.size);
+ 		if (!image) {
+ 			pr_err("Ignoring BGRT: failed to map image memory\n");
+ 			kfree(bgrt_image);
+ 			bgrt_image = NULL;
+ 			return;
+ 		}
++>>>>>>> 1282278ee00b (efi-bgrt: Add error handling; inform the user when ignoring the BGRT)
  	}
  
 -	memcpy_fromio(bgrt_image, image, bgrt_image_size);
 -	if (ioremapped)
 -		early_iounmap(image, bmp_header.size);
 +	memcpy(bgrt_image, image, bgrt_image_size);
 +	iounmap(image);
  }
* Unmerged path arch/x86/platform/efi/efi-bgrt.c
