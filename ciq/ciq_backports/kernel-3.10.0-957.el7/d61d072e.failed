net-gro: avoid reorders

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [net] gro: avoid reorders (Ivan Vecera) [1554456]
Rebuild_FUZZ: 90.48%
commit-author Eric Dumazet <edumazet@google.com>
commit d61d072e87c8ee4938b2517818e7b6498923d6a4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/d61d072e.failed

Receiving a GSO packet in dev_gro_receive() is not uncommon
in stacked devices, or devices partially implementing LRO/GRO
like bnx2x. GRO is implementing the aggregation the device
was not able to do itself.

Current code causes reorders, like in following case :

For a given flow where sender sent 3 packets P1,P2,P3,P4

Receiver might receive P1 as a single packet, stored in GRO engine.

Then P2-P4 are received as a single GSO packet, immediately given to
upper stack, while P1 is held in GRO engine.

This patch will make sure P1 is given to upper stack, then P2-P4
immediately after.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d61d072e87c8ee4938b2517818e7b6498923d6a4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 92d6c5903634,c9837fa08dfc..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -4436,7 -4482,7 +4436,11 @@@ static enum gro_result dev_gro_receive(
  	if (!(skb->dev->features & NETIF_F_GRO))
  		goto normal;
  
++<<<<<<< HEAD
 +	if (skb_is_gso(skb) || skb_has_frag_list(skb))
++=======
+ 	if (skb->csum_bad)
++>>>>>>> d61d072e87c8 (net-gro: avoid reorders)
  		goto normal;
  
  	gro_list_prepare(napi, skb);
* Unmerged path net/core/dev.c
