drm/nouveau/kms/nv50-: allow specification of valid heads for a window

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 9d6c2fe1917fc5ba6a9e8586ca16d007410baf42
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/9d6c2fe1.failed

This will be required to support Volta, where window ID != head.

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 9d6c2fe1917fc5ba6a9e8586ca16d007410baf42)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/powerplay/smumgr/rv_smumgr.h
#	drivers/gpu/drm/nouveau/dispnv50/base507c.c
#	drivers/gpu/drm/nouveau/dispnv50/curs507a.c
#	drivers/gpu/drm/nouveau/dispnv50/wndw.c
#	drivers/gpu/drm/nouveau/dispnv50/wndw.h
diff --cc drivers/gpu/drm/amd/powerplay/smumgr/rv_smumgr.h
index 262c8ded87c0,1b85262bf23b..000000000000
--- a/drivers/gpu/drm/amd/powerplay/smumgr/rv_smumgr.h
+++ b/drivers/gpu/drm/amd/powerplay/smumgr/rv_smumgr.h
@@@ -18,45 -18,53 +18,52 @@@
   * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   * OTHER DEALINGS IN THE SOFTWARE.
 + *
   */
 -#include "ovly.h"
  
 -#include <nvif/cl507e.h>
 +#ifndef PP_RAVEN_SMUMANAGER_H
 +#define PP_RAVEN_SMUMANAGER_H
  
 -#include "nouveau_bo.h"
 +#include "rv_ppsmc.h"
 +#include "smu10_driver_if.h"
  
 -static const struct nv50_wndw_func
 -ovly507e = {
 +enum SMU_TABLE_ID {
 +	WMTABLE = 0,
 +	CLOCKTABLE,
 +	MAX_SMU_TABLE,
  };
  
 -static const u32
 -ovly507e_format[] = {
 -	0
 +struct smu_table_entry {
 +	uint32_t version;
 +	uint32_t size;
 +	uint32_t table_id;
 +	uint32_t table_addr_high;
 +	uint32_t table_addr_low;
 +	uint8_t *table;
 +	uint32_t handle;
  };
  
 -static int
 -ovly507e_new_(const struct nv50_wndw_func *func, const u32 *format,
 -	      struct nouveau_drm *drm, int head, s32 oclass,
 -	      struct nv50_wndw **pwndw)
 -{
 -	struct nv50_disp_overlay_channel_dma_v0 args = {
 -		.head = head,
 -	};
 -	struct nv50_disp *disp = nv50_disp(drm->dev);
 -	struct nv50_wndw *wndw;
 -	int ret;
 +struct smu_table_array {
 +	struct smu_table_entry entry[MAX_SMU_TABLE];
 +};
  
++<<<<<<< HEAD:drivers/gpu/drm/amd/powerplay/smumgr/rv_smumgr.h
 +struct rv_smumgr {
 +	struct smu_table_array            smu_tables;
 +};
++=======
+ 	ret = nv50_wndw_new_(func, drm->dev, DRM_PLANE_TYPE_OVERLAY,
+ 			     "ovly", head, format, BIT(head), &wndw);
+ 	if (*pwndw = wndw, ret)
+ 		return ret;
++>>>>>>> 9d6c2fe1917f (drm/nouveau/kms/nv50-: allow specification of valid heads for a window):drivers/gpu/drm/nouveau/dispnv50/ovly507e.c
  
 -	ret = nv50_dmac_create(&drm->client.device, &disp->disp->object,
 -			       &oclass, 0, &args, sizeof(args),
 -			       disp->sync->bo.offset, &wndw->wndw);
 -	if (ret) {
 -		NV_ERROR(drm, "ovly%04x allocation failed: %d\n", oclass, ret);
 -		return ret;
 -	}
 +int rv_read_arg_from_smc(struct pp_smumgr *smumgr, uint32_t *arg);
 +bool rv_is_smc_ram_running(struct pp_smumgr *smumgr);
 +int rv_copy_table_from_smc(struct pp_smumgr *smumgr,
 +		uint8_t *table, int16_t table_id);
 +int rv_copy_table_to_smc(struct pp_smumgr *smumgr,
 +		uint8_t *table, int16_t table_id);
  
 -	return 0;
 -}
  
 -int
 -ovly507e_new(struct nouveau_drm *drm, int head, s32 oclass,
 -	     struct nv50_wndw **pwndw)
 -{
 -	return ovly507e_new_(&ovly507e, ovly507e_format, drm, head, oclass, pwndw);
 -}
 +#endif
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/base507c.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/curs507a.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.h
* Unmerged path drivers/gpu/drm/amd/powerplay/smumgr/rv_smumgr.h
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/base507c.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/curs507a.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/wndw.h
