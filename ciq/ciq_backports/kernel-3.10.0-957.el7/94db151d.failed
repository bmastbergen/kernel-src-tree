vfio: disable filesystem-dax page pinning

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [vfio] disable filesystem-dax page pinning (Jeff Moyer) [1585133]
Rebuild_FUZZ: 92.11%
commit-author Dan Williams <dan.j.williams@intel.com>
commit 94db151dc89262bfa82922c44e8320cea2334667
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/94db151d.failed

Filesystem-DAX is incompatible with 'longterm' page pinning. Without
page cache indirection a DAX mapping maps filesystem blocks directly.
This means that the filesystem must not modify a file's block map while
any page in a mapping is pinned. In order to prevent the situation of
userspace holding of filesystem operations indefinitely, disallow
'longterm' Filesystem-DAX mappings.

RDMA has the same conflict and the plan there is to add a 'with lease'
mechanism to allow the kernel to notify userspace that the mapping is
being torn down for block-map maintenance. Perhaps something similar can
be put in place for vfio.

Note that xfs and ext4 still report:

   "DAX enabled. Warning: EXPERIMENTAL, use at your own risk"

...at mount time, and resolving the dax-dma-vs-truncate problem is one
of the last hurdles to remove that designation.

	Acked-by: Alex Williamson <alex.williamson@redhat.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: kvm@vger.kernel.org
	Cc: <stable@vger.kernel.org>
	Reported-by: Haozhong Zhang <haozhong.zhang@intel.com>
	Tested-by: Haozhong Zhang <haozhong.zhang@intel.com>
Fixes: d475c6346a38 ("dax,ext2: replace XIP read and write with DAX I/O")
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 94db151dc89262bfa82922c44e8320cea2334667)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/vfio_iommu_type1.c
diff --cc drivers/vfio/vfio_iommu_type1.c
index ff96c53dc8fd,45657e2b1ff7..000000000000
--- a/drivers/vfio/vfio_iommu_type1.c
+++ b/drivers/vfio/vfio_iommu_type1.c
@@@ -344,8 -351,19 +345,24 @@@ static int vaddr_get_pfn(struct mm_stru
  			flags |= FOLL_WRITE;
  
  		down_read(&mm->mmap_sem);
++<<<<<<< HEAD
 +		ret = get_user_pages(NULL, mm, vaddr, 1,
 +				     prot & IOMMU_WRITE, 0, page, NULL);
++=======
+ 		ret = get_user_pages_remote(NULL, mm, vaddr, 1, flags, page,
+ 					    vmas, NULL);
+ 		/*
+ 		 * The lifetime of a vaddr_get_pfn() page pin is
+ 		 * userspace-controlled. In the fs-dax case this could
+ 		 * lead to indefinite stalls in filesystem operations.
+ 		 * Disallow attempts to pin fs-dax pages via this
+ 		 * interface.
+ 		 */
+ 		if (ret > 0 && vma_is_fsdax(vmas[0])) {
+ 			ret = -EOPNOTSUPP;
+ 			put_page(page[0]);
+ 		}
++>>>>>>> 94db151dc892 (vfio: disable filesystem-dax page pinning)
  		up_read(&mm->mmap_sem);
  	}
  
* Unmerged path drivers/vfio/vfio_iommu_type1.c
