/proc/module: use the same logic as /proc/kallsyms for address exposure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Linus Torvalds <torvalds@linux-foundation.org>
commit 516fb7f2e73dcc303fb97fc3593209fcacf2d982
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/516fb7f2.failed

The (alleged) users of the module addresses are the same: kernel
profiling.

So just expose the same helper and format macros, and unify the logic.

	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 516fb7f2e73dcc303fb97fc3593209fcacf2d982)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/module.c
diff --cc kernel/module.c
index d427f7c24e47,0122747ba150..000000000000
--- a/kernel/module.c
+++ b/kernel/module.c
@@@ -4065,11 -4159,12 +4066,16 @@@ static int m_show(struct seq_file *m, v
  
  	/* Informative for users. */
  	seq_printf(m, " %s",
 -		   mod->state == MODULE_STATE_GOING ? "Unloading" :
 -		   mod->state == MODULE_STATE_COMING ? "Loading" :
 +		   mod->state == MODULE_STATE_GOING ? "Unloading":
 +		   mod->state == MODULE_STATE_COMING ? "Loading":
  		   "Live");
  	/* Used by oprofile and other similar tools. */
++<<<<<<< HEAD
 +	seq_printf(m, " 0x%pK", mod->module_core);
++=======
+ 	value = m->private ? 0 : (unsigned long)mod->core_layout.base;
+ 	seq_printf(m, " 0x" KALLSYM_FMT, value);
++>>>>>>> 516fb7f2e73d (/proc/module: use the same logic as /proc/kallsyms for address exposure)
  
  	/* Taints info */
  	if (mod->taints)
diff --git a/include/linux/kallsyms.h b/include/linux/kallsyms.h
index 6883e197acb9..69770398f8fc 100644
--- a/include/linux/kallsyms.h
+++ b/include/linux/kallsyms.h
@@ -13,6 +13,14 @@
 #define KSYM_SYMBOL_LEN (sizeof("%s+%#lx/%#lx [%s]") + (KSYM_NAME_LEN - 1) + \
 			 2*(BITS_PER_LONG*3/10) + (MODULE_NAME_LEN - 1) + 1)
 
+/* How and when do we show kallsyms values? */
+extern int kallsyms_show_value(void);
+#ifndef CONFIG_64BIT
+# define KALLSYM_FMT "%08lx"
+#else
+# define KALLSYM_FMT "%016lx"
+#endif
+
 struct module;
 
 #ifdef CONFIG_KALLSYMS
diff --git a/kernel/kallsyms.c b/kernel/kallsyms.c
index 88a1ff9696b7..0707e1b2dcf5 100644
--- a/kernel/kallsyms.c
+++ b/kernel/kallsyms.c
@@ -526,12 +526,6 @@ static void s_stop(struct seq_file *m, void *p)
 {
 }
 
-#ifndef CONFIG_64BIT
-# define KALLSYM_FMT "%08lx"
-#else
-# define KALLSYM_FMT "%016lx"
-#endif
-
 static int s_show(struct seq_file *m, void *p)
 {
 	unsigned long value;
@@ -585,7 +579,7 @@ static inline int kallsyms_for_perf(void)
  * Otherwise, require CAP_SYSLOG (assuming kptr_restrict isn't set to
  * block even that).
  */
-static int kallsyms_show_value(void)
+int kallsyms_show_value(void)
 {
 	switch (kptr_restrict) {
 	case 0:
* Unmerged path kernel/module.c
