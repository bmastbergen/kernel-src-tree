mmc: sdhci-pci: Add runtime suspend/resume callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [mmc] sdhci-pci: Add runtime suspend/resume callbacks (Gopal Tiwari) [1549495]
Rebuild_FUZZ: 94.95%
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 966d696a622b47663ae866df08d54a4a1d3ec39c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/966d696a.failed

Add runtime suspend/resume callbacks to match suspend/resume callbacks.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Tested-by: Ludovic Desroches <ludovic.desroches@microchip.com>
(cherry picked from commit 966d696a622b47663ae866df08d54a4a1d3ec39c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-pci-core.c
diff --cc drivers/mmc/host/sdhci-pci-core.c
index b63410c15e1c,d9a38c53e2ba..000000000000
--- a/drivers/mmc/host/sdhci-pci-core.c
+++ b/drivers/mmc/host/sdhci-pci-core.c
@@@ -36,11 -36,139 +36,61 @@@
  static int sdhci_pci_enable_dma(struct sdhci_host *host);
  static void sdhci_pci_set_bus_width(struct sdhci_host *host, int width);
  static void sdhci_pci_hw_reset(struct sdhci_host *host);
 -
 -#ifdef CONFIG_PM_SLEEP
 -static int __sdhci_pci_suspend_host(struct sdhci_pci_chip *chip)
 -{
 -	int i, ret;
 -
 -	for (i = 0; i < chip->num_slots; i++) {
 -		struct sdhci_pci_slot *slot = chip->slots[i];
 -		struct sdhci_host *host;
 -
 -		if (!slot)
 -			continue;
 -
 -		host = slot->host;
 -
 -		if (chip->pm_retune && host->tuning_mode != SDHCI_TUNING_MODE_3)
 -			mmc_retune_needed(host->mmc);
 -
 -		ret = sdhci_suspend_host(host);
 -		if (ret)
 -			goto err_pci_suspend;
 -
 -		if (host->mmc->pm_flags & MMC_PM_WAKE_SDIO_IRQ)
 -			sdhci_enable_irq_wakeups(host);
 -	}
 -
 -	return 0;
 -
 -err_pci_suspend:
 -	while (--i >= 0)
 -		sdhci_resume_host(chip->slots[i]->host);
 -	return ret;
 -}
 -
 -static int sdhci_pci_init_wakeup(struct sdhci_pci_chip *chip)
 -{
 -	mmc_pm_flag_t pm_flags = 0;
 -	int i;
 -
 -	for (i = 0; i < chip->num_slots; i++) {
 -		struct sdhci_pci_slot *slot = chip->slots[i];
 -
 -		if (slot)
 -			pm_flags |= slot->host->mmc->pm_flags;
 -	}
 -
 -	return device_init_wakeup(&chip->pdev->dev,
 -				  (pm_flags & MMC_PM_KEEP_POWER) &&
 -				  (pm_flags & MMC_PM_WAKE_SDIO_IRQ));
 -}
 -
 -static int sdhci_pci_suspend_host(struct sdhci_pci_chip *chip)
 -{
 -	int ret;
 -
 -	ret = __sdhci_pci_suspend_host(chip);
 -	if (ret)
 -		return ret;
 -
 -	sdhci_pci_init_wakeup(chip);
 -
 -	return 0;
 -}
 -
 -int sdhci_pci_resume_host(struct sdhci_pci_chip *chip)
 -{
 -	struct sdhci_pci_slot *slot;
 -	int i, ret;
 -
 -	for (i = 0; i < chip->num_slots; i++) {
 -		slot = chip->slots[i];
 -		if (!slot)
 -			continue;
 -
 -		ret = sdhci_resume_host(slot->host);
 -		if (ret)
 -			return ret;
 -	}
 -
 -	return 0;
 -}
 -#endif
 +static int sdhci_pci_select_drive_strength(struct sdhci_host *host,
 +					   struct mmc_card *card,
 +					   unsigned int max_dtr, int host_drv,
 +					   int card_drv, int *drv_type);
  
+ #ifdef CONFIG_PM
+ static int sdhci_pci_runtime_suspend_host(struct sdhci_pci_chip *chip)
+ {
+ 	struct sdhci_pci_slot *slot;
+ 	struct sdhci_host *host;
+ 	int i, ret;
+ 
+ 	for (i = 0; i < chip->num_slots; i++) {
+ 		slot = chip->slots[i];
+ 		if (!slot)
+ 			continue;
+ 
+ 		host = slot->host;
+ 
+ 		ret = sdhci_runtime_suspend_host(host);
+ 		if (ret)
+ 			goto err_pci_runtime_suspend;
+ 
+ 		if (chip->rpm_retune &&
+ 		    host->tuning_mode != SDHCI_TUNING_MODE_3)
+ 			mmc_retune_needed(host->mmc);
+ 	}
+ 
+ 	return 0;
+ 
+ err_pci_runtime_suspend:
+ 	while (--i >= 0)
+ 		sdhci_runtime_resume_host(chip->slots[i]->host);
+ 	return ret;
+ }
+ 
+ static int sdhci_pci_runtime_resume_host(struct sdhci_pci_chip *chip)
+ {
+ 	struct sdhci_pci_slot *slot;
+ 	int i, ret;
+ 
+ 	for (i = 0; i < chip->num_slots; i++) {
+ 		slot = chip->slots[i];
+ 		if (!slot)
+ 			continue;
+ 
+ 		ret = sdhci_runtime_resume_host(slot->host);
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	return 0;
+ }
+ #endif
+ 
  /*****************************************************************************\
   *                                                                           *
   * Hardware specific quirk handling                                          *
@@@ -1222,115 -1816,45 +1272,150 @@@ static const struct sdhci_ops sdhci_pci
  static int sdhci_pci_suspend(struct device *dev)
  {
  	struct pci_dev *pdev = to_pci_dev(dev);
++<<<<<<< HEAD
 +	struct sdhci_pci_chip *chip;
 +	struct sdhci_pci_slot *slot;
 +	mmc_pm_flag_t slot_pm_flags;
 +	mmc_pm_flag_t pm_flags = 0;
 +	int i, ret;
++=======
+ 	struct sdhci_pci_chip *chip = pci_get_drvdata(pdev);
  
- 	chip = pci_get_drvdata(pdev);
  	if (!chip)
  		return 0;
  
- 	for (i = 0; i < chip->num_slots; i++) {
- 		slot = chip->slots[i];
- 		if (!slot)
- 			continue;
+ 	if (chip->fixes && chip->fixes->suspend)
+ 		return chip->fixes->suspend(chip);
+ 
+ 	return sdhci_pci_suspend_host(chip);
+ }
+ 
+ static int sdhci_pci_resume(struct device *dev)
+ {
+ 	struct pci_dev *pdev = to_pci_dev(dev);
+ 	struct sdhci_pci_chip *chip = pci_get_drvdata(pdev);
  
+ 	if (!chip)
+ 		return 0;
+ 
+ 	if (chip->fixes && chip->fixes->resume)
+ 		return chip->fixes->resume(chip);
+ 
+ 	return sdhci_pci_resume_host(chip);
+ }
+ #endif
+ 
+ #ifdef CONFIG_PM
+ static int sdhci_pci_runtime_suspend(struct device *dev)
+ {
+ 	struct pci_dev *pdev = to_pci_dev(dev);
+ 	struct sdhci_pci_chip *chip = pci_get_drvdata(pdev);
++>>>>>>> 966d696a622b (mmc: sdhci-pci: Add runtime suspend/resume callbacks)
+ 
+ 	if (!chip)
+ 		return 0;
+ 
+ 	if (chip->fixes && chip->fixes->runtime_suspend)
+ 		return chip->fixes->runtime_suspend(chip);
+ 
++<<<<<<< HEAD
 +		ret = sdhci_suspend_host(slot->host);
 +
 +		if (ret)
 +			goto err_pci_suspend;
 +
 +		slot_pm_flags = slot->host->mmc->pm_flags;
 +		if (slot_pm_flags & MMC_PM_WAKE_SDIO_IRQ)
 +			sdhci_enable_irq_wakeups(slot->host);
 +
 +		pm_flags |= slot_pm_flags;
 +	}
 +
 +	if (chip->fixes && chip->fixes->suspend) {
 +		ret = chip->fixes->suspend(chip);
 +		if (ret)
 +			goto err_pci_suspend;
 +	}
 +
 +	if (pm_flags & MMC_PM_KEEP_POWER) {
 +		if (pm_flags & MMC_PM_WAKE_SDIO_IRQ)
 +			device_init_wakeup(dev, true);
 +		else
 +			device_init_wakeup(dev, false);
 +	} else
 +		device_init_wakeup(dev, false);
 +
 +	return 0;
 +
 +err_pci_suspend:
 +	while (--i >= 0)
 +		sdhci_resume_host(chip->slots[i]->host);
 +	return ret;
 +}
 +
 +static int sdhci_pci_resume(struct device *dev)
 +{
 +	struct pci_dev *pdev = to_pci_dev(dev);
 +	struct sdhci_pci_chip *chip;
 +	struct sdhci_pci_slot *slot;
 +	int i, ret;
 +
 +	chip = pci_get_drvdata(pdev);
 +	if (!chip)
 +		return 0;
 +
 +	if (chip->fixes && chip->fixes->resume) {
 +		ret = chip->fixes->resume(chip);
 +		if (ret)
 +			return ret;
 +	}
 +
 +	for (i = 0; i < chip->num_slots; i++) {
 +		slot = chip->slots[i];
 +		if (!slot)
 +			continue;
 +
 +		ret = sdhci_resume_host(slot->host);
 +		if (ret)
 +			return ret;
 +	}
 +
 +	return 0;
 +}
 +#endif
 +
 +#ifdef CONFIG_PM
 +static int sdhci_pci_runtime_suspend(struct device *dev)
 +{
 +	struct pci_dev *pdev = to_pci_dev(dev);
 +	struct sdhci_pci_chip *chip;
 +	struct sdhci_pci_slot *slot;
 +	int i, ret;
 +
 +	chip = pci_get_drvdata(pdev);
 +	if (!chip)
 +		return 0;
 +
 +	for (i = 0; i < chip->num_slots; i++) {
 +		slot = chip->slots[i];
 +		if (!slot)
 +			continue;
 +
 +		ret = sdhci_runtime_suspend_host(slot->host);
 +
 +		if (ret)
 +			goto err_pci_runtime_suspend;
 +	}
 +
 +	return 0;
 +
 +err_pci_runtime_suspend:
 +	while (--i >= 0)
 +		sdhci_runtime_resume_host(chip->slots[i]->host);
 +	return ret;
++=======
+ 	return sdhci_pci_runtime_suspend_host(chip);
++>>>>>>> 966d696a622b (mmc: sdhci-pci: Add runtime suspend/resume callbacks)
  }
  
  static int sdhci_pci_runtime_resume(struct device *dev)
* Unmerged path drivers/mmc/host/sdhci-pci-core.c
diff --git a/drivers/mmc/host/sdhci-pci.h b/drivers/mmc/host/sdhci-pci.h
index da47b240da15..8d9e3f836d71 100644
--- a/drivers/mmc/host/sdhci-pci.h
+++ b/drivers/mmc/host/sdhci-pci.h
@@ -115,6 +115,10 @@ struct sdhci_pci_fixes {
 	int			(*suspend) (struct sdhci_pci_chip *);
 	int			(*resume) (struct sdhci_pci_chip *);
 #endif
+#ifdef CONFIG_PM
+	int			(*runtime_suspend) (struct sdhci_pci_chip *);
+	int			(*runtime_resume) (struct sdhci_pci_chip *);
+#endif
 
 	const struct sdhci_ops	*ops;
 };
