watchdog: Add support for creating driver specific sysfs attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
Rebuild_CHGLOG: - [watchdog] Add support for creating driver specific sysfs attributes (David Arcari) [1576173]
Rebuild_FUZZ: 91.94%
commit-author Guenter Roeck <linux@roeck-us.net>
commit faa584757b63aad42d19f1c6a6eac2c848618f83
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/faa58475.failed

The Zodiac watchdog driver attaches additional sysfs attributes to the
watchdog device. This has a number of problems: The watchdog device
lifetime differs from the driver lifetime, and the device structure
should therefore not be accessed from drivers. Also, creating sysfs
attributes after driver registration results in a potential race condition
if user space expects the attributes to exist but they don't exist yet.

Add support for creating driver specific sysfs attributes to the watchdog
core to solve the problems.

	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Guenter Roeck <linux@roeck-us.net>
	Signed-off-by: Wim Van Sebroeck <wim@iguana.be>
(cherry picked from commit faa584757b63aad42d19f1c6a6eac2c848618f83)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/watchdog/watchdog_dev.c
diff --cc drivers/watchdog/watchdog_dev.c
index f06fbcf0bea2,e89ccb2e9603..000000000000
--- a/drivers/watchdog/watchdog_dev.c
+++ b/drivers/watchdog/watchdog_dev.c
@@@ -636,12 -643,22 +636,13 @@@ static struct miscdevice watchdog_miscd
   *	thus we set it up like that.
   */
  
 -static int watchdog_cdev_register(struct watchdog_device *wdd, dev_t devno)
 +int watchdog_dev_register(struct watchdog_device *wdd)
  {
 -	struct watchdog_core_data *wd_data;
 -	int err;
 -
 -	wd_data = kzalloc(sizeof(struct watchdog_core_data), GFP_KERNEL);
 -	if (!wd_data)
 -		return -ENOMEM;
 -	kref_init(&wd_data->kref);
 -	mutex_init(&wd_data->lock);
 -
 -	wd_data->wdd = wdd;
 -	wdd->wd_data = wd_data;
 +	int err, devno;
  
++<<<<<<< HEAD
  	if (wdd->id == 0) {
 -		old_wd_data = wd_data;
 +		old_wdd = wdd;
  		watchdog_miscdev.parent = wdd->parent;
  		err = misc_register(&watchdog_miscdev);
  		if (err != 0) {
@@@ -650,9 -667,10 +651,23 @@@
  			if (err == -EBUSY)
  				pr_err("%s: a legacy watchdog module is probably present.\n",
  					wdd->info->identity);
 -			old_wd_data = NULL;
 -			kfree(wd_data);
 +			old_wdd = NULL;
  			return err;
  		}
++=======
++	devno = MKDEV(MAJOR(watchdog_devt), wdd->id);
++
++	ret = watchdog_cdev_register(wdd, devno);
++	if (ret)
++		return ret;
++
++	dev = device_create_with_groups(&watchdog_class, wdd->parent,
++					devno, wdd, wdd->groups,
++					"watchdog%d", wdd->id);
++	if (IS_ERR(dev)) {
++		watchdog_cdev_unregister(wdd);
++		return PTR_ERR(dev);
++>>>>>>> faa584757b63 (watchdog: Add support for creating driver specific sysfs attributes)
  	}
  
  	/* Fill in the data structures */
diff --git a/Documentation/watchdog/watchdog-kernel-api.txt b/Documentation/watchdog/watchdog-kernel-api.txt
index d8b0d3367706..17febf02f101 100644
--- a/Documentation/watchdog/watchdog-kernel-api.txt
+++ b/Documentation/watchdog/watchdog-kernel-api.txt
@@ -47,6 +47,7 @@ struct watchdog_device {
 	struct cdev cdev;
 	struct device *dev;
 	struct device *parent;
+	const struct attribute_group **groups;
 	const struct watchdog_info *info;
 	const struct watchdog_ops *ops;
 	unsigned int bootstatus;
@@ -69,6 +70,8 @@ It contains following fields:
 * dev: device under the watchdog class (created by watchdog_register_device).
 * parent: set this to the parent device (or NULL) before calling
   watchdog_register_device.
+* groups: List of sysfs attribute groups to create when creating the watchdog
+  device.
 * info: a pointer to a watchdog_info structure. This structure gives some
   additional information about the watchdog timer itself. (Like it's unique name)
 * ops: a pointer to the list of watchdog operations that the watchdog supports.
* Unmerged path drivers/watchdog/watchdog_dev.c
diff --git a/include/linux/watchdog.h b/include/linux/watchdog.h
index e90e3ea5ebeb..2639b98b37d3 100644
--- a/include/linux/watchdog.h
+++ b/include/linux/watchdog.h
@@ -56,6 +56,8 @@ struct watchdog_ops {
  * @cdev:	The watchdog's Character device.
  * @dev:	The device for our watchdog
  * @parent:	The parent bus device
+ * @groups:	List of sysfs attribute groups to create when creating the
+ *		watchdog device.
  * @info:	Pointer to a watchdog_info structure.
  * @ops:	Pointer to the list of watchdog operations.
  * @bootstatus:	Status of the watchdog device at boot.
@@ -82,6 +84,7 @@ struct watchdog_device {
 	struct cdev cdev;
 	struct device *dev;
 	struct device *parent;
+	const struct attribute_group **groups;
 	const struct watchdog_info *info;
 	const struct watchdog_ops *ops;
 	unsigned int bootstatus;
