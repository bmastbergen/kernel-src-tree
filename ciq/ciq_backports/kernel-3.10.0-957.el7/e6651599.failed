ipv6: make DAD fail with enhanced DAD when nonce length differs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit e66515999b627368892ccc9b3a13a506f2ea1357
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/e6651599.failed

Commit adc176c54722 ("ipv6 addrconf: Implemented enhanced DAD (RFC7527)")
added enhanced DAD with a nonce length of 6 bytes. However, RFC7527
doesn't specify the length of the nonce, other than being 6 + 8*k bytes,
with integer k >= 0 (RFC3971 5.3.2). The current implementation simply
assumes that the nonce will always be 6 bytes, but others systems are
free to choose different sizes.

If another system sends a nonce of different length but with the same 6
bytes prefix, it shouldn't be considered as the same nonce. Thus, check
that the length of the received nonce is the same as the length we sent.

Ugly scapy test script running on veth0:

def loop():
    pkt=sniff(iface="veth0", filter="icmp6", count=1)
    pkt = pkt[0]
    b = bytearray(pkt[Raw].load)
    b[1] += 1
    b += b'\xde\xad\xbe\xef\xde\xad\xbe\xef'
    pkt[Raw].load = bytes(b)
    pkt[IPv6].plen += 8
    # fixup checksum after modifying the payload
    pkt[IPv6].payload.cksum -= 0x3b44
    if pkt[IPv6].payload.cksum < 0:
        pkt[IPv6].payload.cksum += 0xffff
    sendp(pkt, iface="veth0")

This should result in DAD failure for any address added to veth0's peer,
but is currently ignored.

Fixes: adc176c54722 ("ipv6 addrconf: Implemented enhanced DAD (RFC7527)")
	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e66515999b627368892ccc9b3a13a506f2ea1357)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/ndisc.c
diff --cc net/ipv6/ndisc.c
index f182ea6bd6c4,0ec273997d1d..000000000000
--- a/net/ipv6/ndisc.c
+++ b/net/ipv6/ndisc.c
@@@ -781,6 -811,8 +781,11 @@@ static void ndisc_recv_ns(struct sk_buf
  			return;
  		}
  	}
++<<<<<<< HEAD
++=======
+ 	if (ndopts.nd_opts_nonce && ndopts.nd_opts_nonce->nd_opt_len == 1)
+ 		memcpy(&nonce, (u8 *)(ndopts.nd_opts_nonce + 1), 6);
++>>>>>>> e66515999b62 (ipv6: make DAD fail with enhanced DAD when nonce length differs)
  
  	inc = ipv6_addr_is_multicast(daddr);
  
* Unmerged path net/ipv6/ndisc.c
