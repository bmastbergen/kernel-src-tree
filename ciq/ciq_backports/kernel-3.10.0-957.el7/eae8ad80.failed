perf tools: Add struct perf_data_file

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Jiri Olsa <jolsa@kernel.org>
commit eae8ad8042d82775da1ddf3faa915b32854d9cf4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/eae8ad80.failed

Add struct perf_data_file to represent a single file within a perf_data
struct.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Andi Kleen <andi@firstfloor.org>
	Cc: Changbin Du <changbin.du@intel.com>
	Cc: David Ahern <dsahern@gmail.com>
	Cc: Jin Yao <yao.jin@linux.intel.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Wang Nan <wangnan0@huawei.com>
Link: http://lkml.kernel.org/n/tip-c3f9p4xzykr845ktqcek6p4t@git.kernel.org
[ Fixup recent changes in 'perf script --per-event-dump' ]
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit eae8ad8042d82775da1ddf3faa915b32854d9cf4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-annotate.c
#	tools/perf/builtin-buildid-cache.c
#	tools/perf/builtin-buildid-list.c
#	tools/perf/builtin-c2c.c
#	tools/perf/builtin-diff.c
#	tools/perf/builtin-evlist.c
#	tools/perf/builtin-inject.c
#	tools/perf/builtin-kmem.c
#	tools/perf/builtin-kvm.c
#	tools/perf/builtin-lock.c
#	tools/perf/builtin-mem.c
#	tools/perf/builtin-record.c
#	tools/perf/builtin-report.c
#	tools/perf/builtin-sched.c
#	tools/perf/builtin-script.c
#	tools/perf/builtin-stat.c
#	tools/perf/builtin-timechart.c
#	tools/perf/builtin-trace.c
#	tools/perf/tests/topology.c
#	tools/perf/util/data-convert-bt.c
#	tools/perf/util/data.c
#	tools/perf/util/data.h
#	tools/perf/util/header.c
diff --cc tools/perf/builtin-annotate.c
index bdd2c2f10972,2d5c87578f83..000000000000
--- a/tools/perf/builtin-annotate.c
+++ b/tools/perf/builtin-annotate.c
@@@ -356,7 -356,7 +356,11 @@@ static int __cmd_annotate(struct perf_a
  	}
  
  	if (total_nr_samples == 0) {
++<<<<<<< HEAD
 +		ui__error("The %s file has no samples!\n", session->file->path);
++=======
+ 		ui__error("The %s file has no samples!\n", session->data->file.path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  		goto out;
  	}
  
@@@ -481,9 -482,9 +485,13 @@@ int cmd_annotate(int argc, const char *
  	if (quiet)
  		perf_quiet_option();
  
++<<<<<<< HEAD
 +	file.path  = input_name;
++=======
+ 	data.file.path = input_name;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
 -	annotate.session = perf_session__new(&data, false, &annotate.tool);
 +	annotate.session = perf_session__new(&file, false, &annotate.tool);
  	if (annotate.session == NULL)
  		return -1;
  
diff --cc tools/perf/builtin-buildid-cache.c
index 9eba7f1add1f,cb2453b29365..000000000000
--- a/tools/perf/builtin-buildid-cache.c
+++ b/tools/perf/builtin-buildid-cache.c
@@@ -330,11 -348,14 +330,16 @@@ int cmd_buildid_cache(int argc, const c
  		     !missing_filename && !update_name_list_str))
  		usage_with_options(buildid_cache_usage, buildid_cache_options);
  
 -	if (ns_id > 0)
 -		nsi = nsinfo__new(ns_id);
 -
  	if (missing_filename) {
++<<<<<<< HEAD
 +		file.path = missing_filename;
 +		file.force = force;
++=======
+ 		data.file.path = missing_filename;
+ 		data.force     = force;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
 -		session = perf_session__new(&data, false, NULL);
 +		session = perf_session__new(&file, false, NULL);
  		if (session == NULL)
  			return -1;
  	}
diff --cc tools/perf/builtin-buildid-list.c
index fdaca16e0c74,00099a830b0d..000000000000
--- a/tools/perf/builtin-buildid-list.c
+++ b/tools/perf/builtin-buildid-list.c
@@@ -50,10 -50,12 +50,19 @@@ static bool dso__skip_buildid(struct ds
  static int perf_session__list_build_ids(bool force, bool with_hits)
  {
  	struct perf_session *session;
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path  = input_name,
 +		.mode  = PERF_DATA_MODE_READ,
 +		.force = force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  
  	symbol__elf_init();
diff --cc tools/perf/builtin-c2c.c
index 952f9ff43e7c,9590fdcc6484..000000000000
--- a/tools/perf/builtin-c2c.c
+++ b/tools/perf/builtin-c2c.c
@@@ -2572,8 -2572,8 +2572,13 @@@ static int perf_c2c__report(int argc, c
  	if (!input_name || !strlen(input_name))
  		input_name = "perf.data";
  
++<<<<<<< HEAD
 +	file.path  = input_name;
 +	file.force = symbol_conf.force;
++=======
+ 	data.file.path = input_name;
+ 	data.force     = symbol_conf.force;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  	err = setup_display(display);
  	if (err)
diff --cc tools/perf/builtin-diff.c
index e1c0d00cb207,67570e6417e5..000000000000
--- a/tools/perf/builtin-diff.c
+++ b/tools/perf/builtin-diff.c
@@@ -706,7 -707,7 +706,11 @@@ static void data__fprintf(void
  
  	data__for_each_file(i, d)
  		fprintf(stdout, "#  [%d] %s %s\n",
++<<<<<<< HEAD
 +			d->idx, d->file.path,
++=======
+ 			d->idx, d->data.file.path,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  			!d->idx ? "(Baseline)" : "");
  
  	fprintf(stdout, "#\n");
@@@ -775,16 -776,16 +779,24 @@@ static int __cmd_diff(void
  	int ret = -EINVAL, i;
  
  	data__for_each_file(i, d) {
 -		d->session = perf_session__new(&d->data, false, &tool);
 +		d->session = perf_session__new(&d->file, false, &tool);
  		if (!d->session) {
++<<<<<<< HEAD
 +			pr_err("Failed to open %s\n", d->file.path);
++=======
+ 			pr_err("Failed to open %s\n", d->data.file.path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  			ret = -1;
  			goto out_delete;
  		}
  
  		ret = perf_session__process_events(d->session);
  		if (ret) {
++<<<<<<< HEAD
 +			pr_err("Failed to process %s\n", d->file.path);
++=======
+ 			pr_err("Failed to process %s\n", d->data.file.path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  			goto out_delete;
  		}
  
@@@ -1285,11 -1286,11 +1297,17 @@@ static int data_init(int argc, const ch
  		return -ENOMEM;
  
  	data__for_each_file(i, d) {
 -		struct perf_data *data = &d->data;
 +		struct perf_data_file *file = &d->file;
  
++<<<<<<< HEAD
 +		file->path  = use_default ? defaults[i] : argv[i];
 +		file->mode  = PERF_DATA_MODE_READ,
 +		file->force = force,
++=======
+ 		data->file.path = use_default ? defaults[i] : argv[i];
+ 		data->mode      = PERF_DATA_MODE_READ,
+ 		data->force     = force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  		d->idx  = i;
  	}
diff --cc tools/perf/builtin-evlist.c
index 6d210e40d611,93b85dc857b6..000000000000
--- a/tools/perf/builtin-evlist.c
+++ b/tools/perf/builtin-evlist.c
@@@ -21,10 -21,12 +21,19 @@@ static int __cmd_evlist(const char *fil
  {
  	struct perf_session *session;
  	struct perf_evsel *pos;
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = file_name,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = details->force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = file_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = details->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  	bool has_tracepoint = false;
  
diff --cc tools/perf/builtin-inject.c
index 91d09c7ad0ce,91e65093d3c2..000000000000
--- a/tools/perf/builtin-inject.c
+++ b/tools/perf/builtin-inject.c
@@@ -762,11 -775,13 +762,13 @@@ int cmd_inject(int argc, const char **a
  		.input_name  = "-",
  		.samples = LIST_HEAD_INIT(inject.samples),
  		.output = {
- 			.path = "-",
- 			.mode = PERF_DATA_MODE_WRITE,
+ 			.file      = {
+ 				.path = "-",
+ 			},
+ 			.mode      = PERF_DATA_MODE_WRITE,
  		},
  	};
 -	struct perf_data data = {
 +	struct perf_data_file file = {
  		.mode = PERF_DATA_MODE_READ,
  	};
  	int ret;
@@@ -823,8 -838,8 +825,13 @@@
  
  	inject.tool.ordered_events = inject.sched_stat;
  
++<<<<<<< HEAD
 +	file.path = inject.input_name;
 +	inject.session = perf_session__new(&file, true, &inject.tool);
++=======
+ 	data.file.path = inject.input_name;
+ 	inject.session = perf_session__new(&data, true, &inject.tool);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	if (inject.session == NULL)
  		return -1;
  
diff --cc tools/perf/builtin-kmem.c
index 428efeea0244,abcab75cc5b9..000000000000
--- a/tools/perf/builtin-kmem.c
+++ b/tools/perf/builtin-kmem.c
@@@ -1949,9 -1949,9 +1949,13 @@@ int cmd_kmem(int argc, const char **arg
  		return __cmd_record(argc, argv);
  	}
  
++<<<<<<< HEAD
 +	file.path = input_name;
++=======
+ 	data.file.path = input_name;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
 -	kmem_session = session = perf_session__new(&data, false, &perf_kmem);
 +	kmem_session = session = perf_session__new(&file, false, &perf_kmem);
  	if (session == NULL)
  		return -1;
  
diff --cc tools/perf/builtin-kvm.c
index a4c3ce78bab6,0af4c092b471..000000000000
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@@ -1024,12 -1064,15 +1024,21 @@@ static int read_events(struct perf_kvm_
  	struct perf_tool eops = {
  		.sample			= process_sample_event,
  		.comm			= perf_event__process_comm,
 -		.namespaces		= perf_event__process_namespaces,
  		.ordered_events		= true,
  	};
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = kvm->file_name,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = kvm->force,
++=======
+ 	struct perf_data file = {
+ 		.file      = {
+ 			.path = kvm->file_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = kvm->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  
  	kvm->tool = eops;
diff --cc tools/perf/builtin-lock.c
index 4c651cf710d9,81af29400b64..000000000000
--- a/tools/perf/builtin-lock.c
+++ b/tools/perf/builtin-lock.c
@@@ -861,15 -861,18 +861,24 @@@ static int __cmd_report(bool display_in
  	struct perf_tool eops = {
  		.sample		 = process_sample_event,
  		.comm		 = perf_event__process_comm,
 -		.namespaces	 = perf_event__process_namespaces,
  		.ordered_events	 = true,
  	};
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = input_name,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  
 -	session = perf_session__new(&data, false, &eops);
 +	session = perf_session__new(&file, false, &eops);
  	if (!session) {
  		pr_err("Initializing perf session failed\n");
  		return -1;
diff --cc tools/perf/builtin-mem.c
index 06c6f4e09b5d,f09fd1a1b813..000000000000
--- a/tools/perf/builtin-mem.c
+++ b/tools/perf/builtin-mem.c
@@@ -236,13 -236,15 +236,22 @@@ static int process_sample_event(struct 
  
  static int report_raw_events(struct perf_mem *mem)
  {
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = input_name,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = mem->force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = mem->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  	int ret;
 -	struct perf_session *session = perf_session__new(&data, false,
 +	struct perf_session *session = perf_session__new(&file, false,
  							 &mem->tool);
  
  	if (session == NULL)
diff --cc tools/perf/builtin-record.c
index 50bef0764895,f4d9fc54b382..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -716,7 -618,7 +716,11 @@@ record__switch_output(struct record *re
  
  	if (!quiet)
  		fprintf(stderr, "[ perf record: Dump %s.%s ]\n",
++<<<<<<< HEAD
 +			file->path, timestamp);
++=======
+ 			data->file.path, timestamp);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  	/* Output tracking events */
  	if (!at_exit) {
@@@ -1181,8 -1117,8 +1185,13 @@@ out_child
  			samples[0] = '\0';
  
  		fprintf(stderr,	"[ perf record: Captured and wrote %.3f MB %s%s%s ]\n",
++<<<<<<< HEAD
 +			perf_data_file__size(file) / 1024.0 / 1024.0,
 +			file->path, postfix, samples);
++=======
+ 			perf_data__size(data) / 1024.0 / 1024.0,
+ 			data->file.path, postfix, samples);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	}
  
  out_delete_session:
@@@ -1545,7 -1482,7 +1554,11 @@@ static struct option __record_options[
  	OPT_STRING('C', "cpu", &record.opts.target.cpu_list, "cpu",
  		    "list of cpus to monitor"),
  	OPT_U64('c', "count", &record.opts.user_interval, "event period to sample"),
++<<<<<<< HEAD
 +	OPT_STRING('o', "output", &record.file.path, "file",
++=======
+ 	OPT_STRING('o', "output", &record.data.file.path, "file",
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  		    "output file name"),
  	OPT_BOOLEAN_SET('i', "no-inherit", &record.opts.no_inherit,
  			&record.opts.no_inherit_set,
diff --cc tools/perf/builtin-report.c
index fe591d0aa170,3c2d9d4932f3..000000000000
--- a/tools/perf/builtin-report.c
+++ b/tools/perf/builtin-report.c
@@@ -635,7 -637,7 +635,11 @@@ static int __cmd_report(struct report *
  		rep->nr_entries += evsel__hists(pos)->nr_entries;
  
  	if (rep->nr_entries == 0) {
++<<<<<<< HEAD
 +		ui__error("The %s file has no samples!\n", file->path);
++=======
+ 		ui__error("The %s file has no samples!\n", data->file.path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  		return 0;
  	}
  
@@@ -937,11 -940,11 +941,16 @@@ int cmd_report(int argc, const char **a
  			input_name = "perf.data";
  	}
  
++<<<<<<< HEAD
 +	file.path  = input_name;
 +	file.force = symbol_conf.force;
++=======
+ 	data.file.path = input_name;
+ 	data.force     = symbol_conf.force;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  repeat:
 -	session = perf_session__new(&data, false, &report.tool);
 +	session = perf_session__new(&file, false, &report.tool);
  	if (session == NULL)
  		return -1;
  
diff --cc tools/perf/builtin-sched.c
index acbb75d26b28,47e54348b5ed..000000000000
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@@ -1700,10 -1700,12 +1700,19 @@@ static int perf_sched__read_events(stru
  		{ "sched:sched_migrate_task", process_sched_migrate_task_event, },
  	};
  	struct perf_session *session;
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = input_name,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = sched->force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = sched->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  	int rc = -1;
  
@@@ -2902,10 -2904,12 +2911,19 @@@ static int perf_sched__timehist(struct 
  	const struct perf_evsel_str_handler migrate_handlers[] = {
  		{ "sched:sched_migrate_task", timehist_migrate_task_event, },
  	};
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = input_name,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = sched->force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = sched->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  
  	struct perf_session *session;
diff --cc tools/perf/builtin-script.c
index d3f20cf9a358,89975e30c0ba..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -198,6 -210,51 +198,54 @@@ static struct 
  	},
  };
  
++<<<<<<< HEAD
++=======
+ struct perf_evsel_script {
+        char *filename;
+        FILE *fp;
+        u64  samples;
+ };
+ 
+ static struct perf_evsel_script *perf_evsel_script__new(struct perf_evsel *evsel,
+ 							struct perf_data *data)
+ {
+ 	struct perf_evsel_script *es = malloc(sizeof(*es));
+ 
+ 	if (es != NULL) {
+ 		if (asprintf(&es->filename, "%s.%s.dump", data->file.path, perf_evsel__name(evsel)) < 0)
+ 			goto out_free;
+ 		es->fp = fopen(es->filename, "w");
+ 		if (es->fp == NULL)
+ 			goto out_free_filename;
+ 		es->samples = 0;
+ 	}
+ 
+ 	return es;
+ out_free_filename:
+ 	zfree(&es->filename);
+ out_free:
+ 	free(es);
+ 	return NULL;
+ }
+ 
+ static void perf_evsel_script__delete(struct perf_evsel_script *es)
+ {
+ 	zfree(&es->filename);
+ 	fclose(es->fp);
+ 	es->fp = NULL;
+ 	free(es);
+ }
+ 
+ static int perf_evsel_script__fprintf(struct perf_evsel_script *es, FILE *fp)
+ {
+ 	struct stat st;
+ 
+ 	fstat(fileno(es->fp), &st);
+ 	return fprintf(fp, "[ perf script: Wrote %.3f MB %s (%" PRIu64 " samples) ]\n",
+ 		       st.st_size / 1024.0 / 1024.0, es->filename, es->samples);
+ }
+ 
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  static inline int output_type(unsigned int type)
  {
  	switch (type) {
@@@ -2072,9 -2590,11 +2120,17 @@@ int find_scripts(char **scripts_array, 
  	char scripts_path[MAXPATHLEN], lang_path[MAXPATHLEN];
  	DIR *scripts_dir, *lang_dir;
  	struct perf_session *session;
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = input_name,
 +		.mode = PERF_DATA_MODE_READ,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  	char *temp;
  	int i = 0;
@@@ -2459,8 -2984,8 +2515,13 @@@ int cmd_script(int argc, const char **a
  	argc = parse_options_subcommand(argc, argv, options, script_subcommands, script_usage,
  			     PARSE_OPT_STOP_AT_NON_OPTION);
  
++<<<<<<< HEAD
 +	file.path = input_name;
 +	file.force = symbol_conf.force;
++=======
+ 	data.file.path = input_name;
+ 	data.force     = symbol_conf.force;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  	if (argc > 1 && !strncmp(argv[0], "rec", strlen("rec"))) {
  		rec_script_path = get_script_path(argv[1], RECORD_SUFFIX);
@@@ -2680,7 -3208,7 +2741,11 @@@
  			goto out_delete;
  		}
  
++<<<<<<< HEAD
 +		input = open(file.path, O_RDONLY);	/* input_name */
++=======
+ 		input = open(data.file.path, O_RDONLY);	/* input_name */
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  		if (input < 0) {
  			err = -errno;
  			perror("failed to open file");
diff --cc tools/perf/builtin-stat.c
index 785785b76725,fa5896270022..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -2412,7 -2412,7 +2412,11 @@@ static int __cmd_record(int argc, cons
  			     PARSE_OPT_STOP_AT_NON_OPTION);
  
  	if (output_name)
++<<<<<<< HEAD
 +		file->path = output_name;
++=======
+ 		data->file.path = output_name;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  	if (run_count != 1 || forever) {
  		pr_err("Cannot use -r option with perf stat record.\n");
@@@ -2585,10 -2585,10 +2589,15 @@@ static int __cmd_report(int argc, cons
  			input_name = "perf.data";
  	}
  
++<<<<<<< HEAD
 +	perf_stat.file.path = input_name;
 +	perf_stat.file.mode = PERF_DATA_MODE_READ;
++=======
+ 	perf_stat.data.file.path = input_name;
+ 	perf_stat.data.mode      = PERF_DATA_MODE_READ;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
 -	session = perf_session__new(&perf_stat.data, false, &perf_stat.tool);
 +	session = perf_session__new(&perf_stat.file, false, &perf_stat.tool);
  	if (session == NULL)
  		return -1;
  
diff --cc tools/perf/builtin-timechart.c
index 01de01ca14f2,813698a9b8c7..000000000000
--- a/tools/perf/builtin-timechart.c
+++ b/tools/perf/builtin-timechart.c
@@@ -1601,13 -1601,15 +1601,22 @@@ static int __cmd_timechart(struct timec
  		{ "syscalls:sys_exit_pselect6",		process_exit_poll },
  		{ "syscalls:sys_exit_select",		process_exit_poll },
  	};
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = input_name,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = tchart->force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = tchart->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  
 -	struct perf_session *session = perf_session__new(&data, false,
 +	struct perf_session *session = perf_session__new(&file, false,
  							 &tchart->tool);
  	int ret = -EINVAL;
  
diff --cc tools/perf/builtin-trace.c
index 873215ce6cc7,c373f9a3e4a9..000000000000
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@@ -2518,10 -2532,12 +2518,19 @@@ static int trace__replay(struct trace *
  	const struct perf_evsel_str_handler handlers[] = {
  		{ "probe:vfs_getname",	     trace__vfs_getname, },
  	};
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path  = input_name,
 +		.mode  = PERF_DATA_MODE_READ,
 +		.force = trace->force,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = input_name,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = trace->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  	struct perf_session *session;
  	struct perf_evsel *evsel;
diff --cc tools/perf/tests/topology.c
index 803f893550d6,9bbfed51f1d6..000000000000
--- a/tools/perf/tests/topology.c
+++ b/tools/perf/tests/topology.c
@@@ -29,12 -29,14 +29,20 @@@ static int get_temp(char *path
  static int session_write_header(char *path)
  {
  	struct perf_session *session;
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = path,
 +		.mode = PERF_DATA_MODE_WRITE,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = path,
+ 		},
+ 		.mode      = PERF_DATA_MODE_WRITE,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  
 -	session = perf_session__new(&data, false, NULL);
 +	session = perf_session__new(&file, false, NULL);
  	TEST_ASSERT_VAL("can't get session", session);
  
  	session->evlist = perf_evlist__new_default();
@@@ -46,7 -48,7 +54,11 @@@
  	session->header.data_size += DATA_SIZE;
  
  	TEST_ASSERT_VAL("failed to write header",
++<<<<<<< HEAD
 +			!perf_session__write_header(session, session->evlist, file.fd, true));
++=======
+ 			!perf_session__write_header(session, session->evlist, data.file.fd, true));
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  	perf_session__delete(session);
  
@@@ -56,9 -58,11 +68,17 @@@
  static int check_cpu_topology(char *path, struct cpu_map *map)
  {
  	struct perf_session *session;
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = path,
 +		.mode = PERF_DATA_MODE_READ,
++=======
+ 	struct perf_data data = {
+ 		.file      = {
+ 			.path = path,
+ 		},
+ 		.mode      = PERF_DATA_MODE_READ,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  	int i;
  
diff --cc tools/perf/util/data-convert-bt.c
index c24f06028d3f,5744c12641a5..000000000000
--- a/tools/perf/util/data-convert-bt.c
+++ b/tools/perf/util/data-convert-bt.c
@@@ -1577,10 -1577,10 +1577,17 @@@ int bt_convert__perf2ctf(const char *in
  			 struct perf_data_convert_opts *opts)
  {
  	struct perf_session *session;
++<<<<<<< HEAD
 +	struct perf_data_file file = {
 +		.path = input,
 +		.mode = PERF_DATA_MODE_READ,
 +		.force = opts->force,
++=======
+ 	struct perf_data data = {
+ 		.file.path = input,
+ 		.mode      = PERF_DATA_MODE_READ,
+ 		.force     = opts->force,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	};
  	struct convert c = {
  		.tool = {
@@@ -1649,7 -1650,7 +1656,11 @@@
  
  	fprintf(stderr,
  		"[ perf data convert: Converted '%s' into CTF data '%s' ]\n",
++<<<<<<< HEAD
 +		file.path, path);
++=======
+ 		data.file.path, path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
  	fprintf(stderr,
  		"[ perf data convert: Converted and wrote %.3f MB (%" PRIu64 " samples",
diff --cc tools/perf/util/data.c
index 263f5a906ba5,07ef56a4123c..000000000000
--- a/tools/perf/util/data.c
+++ b/tools/perf/util/data.c
@@@ -24,34 -25,34 +24,56 @@@ static bool check_pipe(struct perf_data
  {
  	struct stat st;
  	bool is_pipe = false;
 -	int fd = perf_data__is_read(data) ?
 +	int fd = perf_data_file__is_read(file) ?
  		 STDIN_FILENO : STDOUT_FILENO;
  
++<<<<<<< HEAD
 +	if (!file->path) {
 +		if (!fstat(fd, &st) && S_ISFIFO(st.st_mode))
 +			is_pipe = true;
 +	} else {
 +		if (!strcmp(file->path, "-"))
++=======
+ 	if (!data->file.path) {
+ 		if (!fstat(fd, &st) && S_ISFIFO(st.st_mode))
+ 			is_pipe = true;
+ 	} else {
+ 		if (!strcmp(data->file.path, "-"))
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  			is_pipe = true;
  	}
  
  	if (is_pipe)
++<<<<<<< HEAD
 +		file->fd = fd;
++=======
+ 		data->file.fd = fd;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
 -	return data->is_pipe = is_pipe;
 +	return file->is_pipe = is_pipe;
  }
  
 -static int check_backup(struct perf_data *data)
 +static int check_backup(struct perf_data_file *file)
  {
  	struct stat st;
  
++<<<<<<< HEAD
 +	if (!stat(file->path, &st) && st.st_size) {
 +		/* TODO check errors properly */
 +		char oldname[PATH_MAX];
 +		snprintf(oldname, sizeof(oldname), "%s.old",
 +			 file->path);
 +		unlink(oldname);
 +		rename(file->path, oldname);
++=======
+ 	if (!stat(data->file.path, &st) && st.st_size) {
+ 		/* TODO check errors properly */
+ 		char oldname[PATH_MAX];
+ 		snprintf(oldname, sizeof(oldname), "%s.old",
+ 			 data->file.path);
+ 		unlink(oldname);
+ 		rename(data->file.path, oldname);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	}
  
  	return 0;
@@@ -63,13 -64,13 +85,23 @@@ static int open_file_read(struct perf_d
  	int fd;
  	char sbuf[STRERR_BUFSIZE];
  
++<<<<<<< HEAD
 +	fd = open(file->path, O_RDONLY);
 +	if (fd < 0) {
 +		int err = errno;
 +
 +		pr_err("failed to open %s: %s", file->path,
 +			str_error_r(err, sbuf, sizeof(sbuf)));
 +		if (err == ENOENT && !strcmp(file->path, "perf.data"))
++=======
+ 	fd = open(data->file.path, O_RDONLY);
+ 	if (fd < 0) {
+ 		int err = errno;
+ 
+ 		pr_err("failed to open %s: %s", data->file.path,
+ 			str_error_r(err, sbuf, sizeof(sbuf)));
+ 		if (err == ENOENT && !strcmp(data->file.path, "perf.data"))
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  			pr_err("  (try 'perf record' first)");
  		pr_err("\n");
  		return -err;
@@@ -78,15 -79,15 +110,24 @@@
  	if (fstat(fd, &st) < 0)
  		goto out_close;
  
 -	if (!data->force && st.st_uid && (st.st_uid != geteuid())) {
 +	if (!file->force && st.st_uid && (st.st_uid != geteuid())) {
  		pr_err("File %s not owned by current user or root (use -f to override)\n",
++<<<<<<< HEAD
 +		       file->path);
++=======
+ 		       data->file.path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  		goto out_close;
  	}
  
  	if (!st.st_size) {
++<<<<<<< HEAD
 +		pr_info("zero-sized file (%s), nothing to do!\n",
 +			file->path);
++=======
+ 		pr_info("zero-sized data (%s), nothing to do!\n",
+ 			data->file.path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  		goto out_close;
  	}
  
@@@ -103,14 -104,14 +144,22 @@@ static int open_file_write(struct perf_
  	int fd;
  	char sbuf[STRERR_BUFSIZE];
  
 -	if (check_backup(data))
 +	if (check_backup(file))
  		return -1;
  
++<<<<<<< HEAD
 +	fd = open(file->path, O_CREAT|O_RDWR|O_TRUNC|O_CLOEXEC,
 +		  S_IRUSR|S_IWUSR);
 +
 +	if (fd < 0)
 +		pr_err("failed to open %s : %s\n", file->path,
++=======
+ 	fd = open(data->file.path, O_CREAT|O_RDWR|O_TRUNC|O_CLOEXEC,
+ 		  S_IRUSR|S_IWUSR);
+ 
+ 	if (fd < 0)
+ 		pr_err("failed to open %s : %s\n", data->file.path,
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  			str_error_r(errno, sbuf, sizeof(sbuf)));
  
  	return fd;
@@@ -120,71 -121,71 +169,109 @@@ static int open_file(struct perf_data_f
  {
  	int fd;
  
 -	fd = perf_data__is_read(data) ?
 -	     open_file_read(data) : open_file_write(data);
 +	fd = perf_data_file__is_read(file) ?
 +	     open_file_read(file) : open_file_write(file);
  
++<<<<<<< HEAD
 +	file->fd = fd;
++=======
+ 	data->file.fd = fd;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	return fd < 0 ? -1 : 0;
  }
  
 -int perf_data__open(struct perf_data *data)
 +int perf_data_file__open(struct perf_data_file *file)
  {
 -	if (check_pipe(data))
 +	if (check_pipe(file))
  		return 0;
  
++<<<<<<< HEAD
 +	if (!file->path)
 +		file->path = "perf.data";
++=======
+ 	if (!data->file.path)
+ 		data->file.path = "perf.data";
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  
 -	return open_file(data);
 +	return open_file(file);
  }
  
 -void perf_data__close(struct perf_data *data)
 +void perf_data_file__close(struct perf_data_file *file)
  {
++<<<<<<< HEAD
 +	close(file->fd);
++=======
+ 	close(data->file.fd);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  }
  
 -ssize_t perf_data__write(struct perf_data *data,
 +ssize_t perf_data_file__write(struct perf_data_file *file,
  			      void *buf, size_t size)
  {
++<<<<<<< HEAD
 +	return writen(file->fd, buf, size);
++=======
+ 	return writen(data->file.fd, buf, size);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  }
  
 -int perf_data__switch(struct perf_data *data,
 +int perf_data_file__switch(struct perf_data_file *file,
  			   const char *postfix,
  			   size_t pos, bool at_exit)
  {
  	char *new_filepath;
  	int ret;
  
 -	if (check_pipe(data))
 +	if (check_pipe(file))
  		return -EINVAL;
 -	if (perf_data__is_read(data))
 +	if (perf_data_file__is_read(file))
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (asprintf(&new_filepath, "%s.%s", file->path, postfix) < 0)
++=======
+ 	if (asprintf(&new_filepath, "%s.%s", data->file.path, postfix) < 0)
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  		return -ENOMEM;
  
  	/*
  	 * Only fire a warning, don't return error, continue fill
  	 * original file.
  	 */
++<<<<<<< HEAD
 +	if (rename(file->path, new_filepath))
 +		pr_warning("Failed to rename %s to %s\n", file->path, new_filepath);
 +
 +	if (!at_exit) {
 +		close(file->fd);
 +		ret = perf_data_file__open(file);
 +		if (ret < 0)
 +			goto out;
 +
 +		if (lseek(file->fd, pos, SEEK_SET) == (off_t)-1) {
++=======
+ 	if (rename(data->file.path, new_filepath))
+ 		pr_warning("Failed to rename %s to %s\n", data->file.path, new_filepath);
+ 
+ 	if (!at_exit) {
+ 		close(data->file.fd);
+ 		ret = perf_data__open(data);
+ 		if (ret < 0)
+ 			goto out;
+ 
+ 		if (lseek(data->file.fd, pos, SEEK_SET) == (off_t)-1) {
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  			ret = -errno;
  			pr_debug("Failed to lseek to %zu: %s",
  				 pos, strerror(errno));
  			goto out;
  		}
  	}
++<<<<<<< HEAD
 +	ret = file->fd;
++=======
+ 	ret = data->file.fd;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  out:
  	free(new_filepath);
  	return ret;
diff --cc tools/perf/util/data.h
index ae510ce16cb1,1797bed3aa4b..000000000000
--- a/tools/perf/util/data.h
+++ b/tools/perf/util/data.h
@@@ -9,42 -9,46 +9,55 @@@ enum perf_data_mode 
  };
  
  struct perf_data_file {
++<<<<<<< HEAD
 +	const char		*path;
 +	int			 fd;
++=======
+ 	const char	*path;
+ 	int		 fd;
+ };
+ 
+ struct perf_data {
+ 	struct perf_data_file	 file;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	bool			 is_pipe;
  	bool			 force;
  	unsigned long		 size;
  	enum perf_data_mode	 mode;
  };
  
 -static inline bool perf_data__is_read(struct perf_data *data)
 +static inline bool perf_data_file__is_read(struct perf_data_file *file)
  {
 -	return data->mode == PERF_DATA_MODE_READ;
 +	return file->mode == PERF_DATA_MODE_READ;
  }
  
 -static inline bool perf_data__is_write(struct perf_data *data)
 +static inline bool perf_data_file__is_write(struct perf_data_file *file)
  {
 -	return data->mode == PERF_DATA_MODE_WRITE;
 +	return file->mode == PERF_DATA_MODE_WRITE;
  }
  
 -static inline int perf_data__is_pipe(struct perf_data *data)
 +static inline int perf_data_file__is_pipe(struct perf_data_file *file)
  {
 -	return data->is_pipe;
 +	return file->is_pipe;
  }
  
 -static inline int perf_data__fd(struct perf_data *data)
 +static inline int perf_data_file__fd(struct perf_data_file *file)
  {
++<<<<<<< HEAD
 +	return file->fd;
++=======
+ 	return data->file.fd;
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  }
  
 -static inline unsigned long perf_data__size(struct perf_data *data)
 +static inline unsigned long perf_data_file__size(struct perf_data_file *file)
  {
 -	return data->size;
 +	return file->size;
  }
  
 -int perf_data__open(struct perf_data *data);
 -void perf_data__close(struct perf_data *data);
 -ssize_t perf_data__write(struct perf_data *data,
 +int perf_data_file__open(struct perf_data_file *file);
 +void perf_data_file__close(struct perf_data_file *file);
 +ssize_t perf_data_file__write(struct perf_data_file *file,
  			      void *buf, size_t size);
  /*
   * If at_exit is set, only rename current perf.data to
diff --cc tools/perf/util/header.c
index 7bd04cf47b43,6e59dcca9df2..000000000000
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@@ -2892,7 -2889,7 +2892,11 @@@ int perf_session__read_header(struct pe
  	if (f_header.data.size == 0) {
  		pr_warning("WARNING: The %s file's data size field is 0 which is unexpected.\n"
  			   "Was the 'perf record' command properly terminated?\n",
++<<<<<<< HEAD
 +			   file->path);
++=======
+ 			   data->file.path);
++>>>>>>> eae8ad8042d8 (perf tools: Add struct perf_data_file)
  	}
  
  	nr_attrs = f_header.attrs.size / f_header.attr_size;
* Unmerged path tools/perf/builtin-annotate.c
* Unmerged path tools/perf/builtin-buildid-cache.c
* Unmerged path tools/perf/builtin-buildid-list.c
* Unmerged path tools/perf/builtin-c2c.c
* Unmerged path tools/perf/builtin-diff.c
* Unmerged path tools/perf/builtin-evlist.c
* Unmerged path tools/perf/builtin-inject.c
* Unmerged path tools/perf/builtin-kmem.c
* Unmerged path tools/perf/builtin-kvm.c
* Unmerged path tools/perf/builtin-lock.c
* Unmerged path tools/perf/builtin-mem.c
* Unmerged path tools/perf/builtin-record.c
* Unmerged path tools/perf/builtin-report.c
* Unmerged path tools/perf/builtin-sched.c
* Unmerged path tools/perf/builtin-script.c
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/builtin-timechart.c
* Unmerged path tools/perf/builtin-trace.c
* Unmerged path tools/perf/tests/topology.c
* Unmerged path tools/perf/util/data-convert-bt.c
* Unmerged path tools/perf/util/data.c
* Unmerged path tools/perf/util/data.h
* Unmerged path tools/perf/util/header.c
