netfilter: xt_set: use pr ratelimiting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-957.el7
commit-author Florian Westphal <fw@strlen.de>
commit c82b31c5f5608f7f069c584ac169f5691a92d3f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-957.el7/c82b31c5.failed

also convert this to info for consistency.
These errors are informational message to user, given iptables doesn't
have netlink extack equivalent.

	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit c82b31c5f5608f7f069c584ac169f5691a92d3f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/xt_set.c
diff --cc net/netfilter/xt_set.c
index 6cc2d6757ad8,6f4c5217d835..000000000000
--- a/net/netfilter/xt_set.c
+++ b/net/netfilter/xt_set.c
@@@ -85,13 -92,12 +85,22 @@@ set_match_v0_checkentry(const struct xt
  	index = ip_set_nfnl_get_byindex(par->net, info->match_set.index);
  
  	if (index == IPSET_INVALID_ID) {
++<<<<<<< HEAD
 +		pr_warning("Cannot find set indentified by id %u to match\n",
 +			   info->match_set.index);
 +		return -ENOENT;
 +	}
 +	if (info->match_set.u.flags[IPSET_DIM_MAX-1] != 0) {
 +		pr_warning("Protocol error: set match dimension "
 +			   "is over the limit!\n");
++=======
+ 		pr_info_ratelimited("Cannot find set identified by id %u to match\n",
+ 				    info->match_set.index);
+ 		return -ENOENT;
+ 	}
+ 	if (info->match_set.u.flags[IPSET_DIM_MAX - 1] != 0) {
+ 		pr_info_ratelimited("set match dimension is over the limit!\n");
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  		ip_set_nfnl_put(par->net, info->match_set.index);
  		return -ERANGE;
  	}
@@@ -135,13 -143,12 +144,22 @@@ set_match_v1_checkentry(const struct xt
  	index = ip_set_nfnl_get_byindex(par->net, info->match_set.index);
  
  	if (index == IPSET_INVALID_ID) {
++<<<<<<< HEAD
 +		pr_warning("Cannot find set indentified by id %u to match\n",
 +			   info->match_set.index);
 +		return -ENOENT;
 +	}
 +	if (info->match_set.dim > IPSET_DIM_MAX) {
 +		pr_warning("Protocol error: set match dimension "
 +			   "is over the limit!\n");
++=======
+ 		pr_info_ratelimited("Cannot find set identified by id %u to match\n",
+ 				    info->match_set.index);
+ 		return -ENOENT;
+ 	}
+ 	if (info->match_set.dim > IPSET_DIM_MAX) {
+ 		pr_info_ratelimited("set match dimension is over the limit!\n");
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  		ip_set_nfnl_put(par->net, info->match_set.index);
  		return -ERANGE;
  	}
@@@ -277,8 -241,8 +295,13 @@@ set_target_v0_checkentry(const struct x
  	if (info->add_set.index != IPSET_INVALID_ID) {
  		index = ip_set_nfnl_get_byindex(par->net, info->add_set.index);
  		if (index == IPSET_INVALID_ID) {
++<<<<<<< HEAD
 +			pr_warning("Cannot find add_set index %u as target\n",
 +				   info->add_set.index);
++=======
+ 			pr_info_ratelimited("Cannot find add_set index %u as target\n",
+ 					    info->add_set.index);
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  			return -ENOENT;
  		}
  	}
@@@ -286,17 -250,16 +309,28 @@@
  	if (info->del_set.index != IPSET_INVALID_ID) {
  		index = ip_set_nfnl_get_byindex(par->net, info->del_set.index);
  		if (index == IPSET_INVALID_ID) {
++<<<<<<< HEAD
 +			pr_warning("Cannot find del_set index %u as target\n",
 +				   info->del_set.index);
++=======
+ 			pr_info_ratelimited("Cannot find del_set index %u as target\n",
+ 					    info->del_set.index);
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  			if (info->add_set.index != IPSET_INVALID_ID)
  				ip_set_nfnl_put(par->net, info->add_set.index);
  			return -ENOENT;
  		}
  	}
++<<<<<<< HEAD
 +	if (info->add_set.u.flags[IPSET_DIM_MAX-1] != 0 ||
 +	    info->del_set.u.flags[IPSET_DIM_MAX-1] != 0) {
 +		pr_warning("Protocol error: SET target dimension "
 +			   "is over the limit!\n");
++=======
+ 	if (info->add_set.u.flags[IPSET_DIM_MAX - 1] != 0 ||
+ 	    info->del_set.u.flags[IPSET_DIM_MAX - 1] != 0) {
+ 		pr_info_ratelimited("SET target dimension over the limit!\n");
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  		if (info->add_set.index != IPSET_INVALID_ID)
  			ip_set_nfnl_put(par->net, info->add_set.index);
  		if (info->del_set.index != IPSET_INVALID_ID)
@@@ -350,8 -316,8 +384,13 @@@ set_target_v1_checkentry(const struct x
  	if (info->add_set.index != IPSET_INVALID_ID) {
  		index = ip_set_nfnl_get_byindex(par->net, info->add_set.index);
  		if (index == IPSET_INVALID_ID) {
++<<<<<<< HEAD
 +			pr_warning("Cannot find add_set index %u as target\n",
 +				   info->add_set.index);
++=======
+ 			pr_info_ratelimited("Cannot find add_set index %u as target\n",
+ 					    info->add_set.index);
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  			return -ENOENT;
  		}
  	}
@@@ -359,8 -325,8 +398,13 @@@
  	if (info->del_set.index != IPSET_INVALID_ID) {
  		index = ip_set_nfnl_get_byindex(par->net, info->del_set.index);
  		if (index == IPSET_INVALID_ID) {
++<<<<<<< HEAD
 +			pr_warning("Cannot find del_set index %u as target\n",
 +				   info->del_set.index);
++=======
+ 			pr_info_ratelimited("Cannot find del_set index %u as target\n",
+ 					    info->del_set.index);
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  			if (info->add_set.index != IPSET_INVALID_ID)
  				ip_set_nfnl_put(par->net, info->add_set.index);
  			return -ENOENT;
@@@ -368,8 -334,7 +412,12 @@@
  	}
  	if (info->add_set.dim > IPSET_DIM_MAX ||
  	    info->del_set.dim > IPSET_DIM_MAX) {
++<<<<<<< HEAD
 +		pr_warning("Protocol error: SET target dimension "
 +			   "is over the limit!\n");
++=======
+ 		pr_info_ratelimited("SET target dimension over the limit!\n");
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  		if (info->add_set.index != IPSET_INVALID_ID)
  			ip_set_nfnl_put(par->net, info->add_set.index);
  		if (info->del_set.index != IPSET_INVALID_ID)
@@@ -501,8 -473,7 +549,12 @@@ set_target_v3_checkentry(const struct x
  		     !(par->hook_mask & (1 << NF_INET_FORWARD |
  					 1 << NF_INET_LOCAL_OUT |
  					 1 << NF_INET_POST_ROUTING))) {
++<<<<<<< HEAD
 +			pr_warn("mapping of prio or/and queue is allowed only"
 +				"from OUTPUT/FORWARD/POSTROUTING chains\n");
++=======
+ 			pr_info_ratelimited("mapping of prio or/and queue is allowed only from OUTPUT/FORWARD/POSTROUTING chains\n");
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  			return -EINVAL;
  		}
  		index = ip_set_nfnl_get_byindex(par->net,
@@@ -523,8 -494,7 +575,12 @@@
  	if (info->add_set.dim > IPSET_DIM_MAX ||
  	    info->del_set.dim > IPSET_DIM_MAX ||
  	    info->map_set.dim > IPSET_DIM_MAX) {
++<<<<<<< HEAD
 +		pr_warn("Protocol error: SET target dimension "
 +			"is over the limit!\n");
++=======
+ 		pr_info_ratelimited("SET target dimension over the limit!\n");
++>>>>>>> c82b31c5f560 (netfilter: xt_set: use pr ratelimiting)
  		if (info->add_set.index != IPSET_INVALID_ID)
  			ip_set_nfnl_put(par->net, info->add_set.index);
  		if (info->del_set.index != IPSET_INVALID_ID)
* Unmerged path net/netfilter/xt_set.c
