drbd: use generic io stats accounting functions to simplify io stat accounting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.15.2.el7
commit-author Gu Zheng <guz.fnst@cn.fujitsu.com>
commit 244808543e6e9b46ea1135589877f4d4bd2925c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.15.2.el7/24480854.failed

Use generic io stats accounting help functions (generic_{start,end}_io_acct)
to simplify io stat accounting.

	Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 244808543e6e9b46ea1135589877f4d4bd2925c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/drbd/drbd_req.c
diff --cc drivers/block/drbd/drbd_req.c
index a6f13f7cee8f,34f2f0ba409b..000000000000
--- a/drivers/block/drbd/drbd_req.c
+++ b/drivers/block/drbd/drbd_req.c
@@@ -31,37 -31,23 +31,47 @@@
  #include "drbd_req.h"
  
  
 -static bool drbd_may_do_local_read(struct drbd_device *device, sector_t sector, int size);
 +static bool drbd_may_do_local_read(struct drbd_conf *mdev, sector_t sector, int size);
  
  /* Update disk stats at start of I/O request */
 -static void _drbd_start_io_acct(struct drbd_device *device, struct drbd_request *req)
 +static void _drbd_start_io_acct(struct drbd_conf *mdev, struct drbd_request *req)
  {
++<<<<<<< HEAD
 +	const int rw = bio_data_dir(req->master_bio);
 +	int cpu;
 +	cpu = part_stat_lock();
 +	part_round_stats(cpu, &mdev->vdisk->part0);
 +	part_stat_inc(cpu, &mdev->vdisk->part0, ios[rw]);
 +	part_stat_add(cpu, &mdev->vdisk->part0, sectors[rw], req->i.size >> 9);
 +	(void) cpu; /* The macro invocations above want the cpu argument, I do not like
 +		       the compiler warning about cpu only assigned but never used... */
 +	part_inc_in_flight(&mdev->vdisk->part0, rw);
 +	part_stat_unlock();
++=======
+ 	generic_start_io_acct(bio_data_dir(req->master_bio), req->i.size >> 9,
+ 			      &device->vdisk->part0);
++>>>>>>> 244808543e6e (drbd: use generic io stats accounting functions to simplify io stat accounting)
  }
  
  /* Update disk stats when completing request upwards */
 -static void _drbd_end_io_acct(struct drbd_device *device, struct drbd_request *req)
 +static void _drbd_end_io_acct(struct drbd_conf *mdev, struct drbd_request *req)
  {
++<<<<<<< HEAD
 +	int rw = bio_data_dir(req->master_bio);
 +	unsigned long duration = jiffies - req->start_time;
 +	int cpu;
 +	cpu = part_stat_lock();
 +	part_stat_add(cpu, &mdev->vdisk->part0, ticks[rw], duration);
 +	part_round_stats(cpu, &mdev->vdisk->part0);
 +	part_dec_in_flight(&mdev->vdisk->part0, rw);
 +	part_stat_unlock();
++=======
+ 	generic_end_io_acct(bio_data_dir(req->master_bio),
+ 			    &device->vdisk->part0, req->start_jif);
++>>>>>>> 244808543e6e (drbd: use generic io stats accounting functions to simplify io stat accounting)
  }
  
 -static struct drbd_request *drbd_req_new(struct drbd_device *device,
 +static struct drbd_request *drbd_req_new(struct drbd_conf *mdev,
  					       struct bio *bio_src)
  {
  	struct drbd_request *req;
* Unmerged path drivers/block/drbd/drbd_req.c
