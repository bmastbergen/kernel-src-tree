md: use generic io stats accounting functions to simplify io stat accounting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.15.2.el7
commit-author Gu Zheng <guz.fnst@cn.fujitsu.com>
commit 18c0b223cf9901727ef3b02da6711ac930b4e5d4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.15.2.el7/18c0b223.failed

Use generic io stats accounting help functions (generic_{start,end}_io_acct)
to simplify io stat accounting.

	Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 18c0b223cf9901727ef3b02da6711ac930b4e5d4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm.c
#	drivers/md/md.c
diff --cc drivers/md/dm.c
index 223507e1c998,b1cdf69b11e7..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -526,16 -602,13 +526,20 @@@ static void end_io_acct(struct dm_io *i
  	struct mapped_device *md = io->md;
  	struct bio *bio = io->bio;
  	unsigned long duration = jiffies - io->start_time;
- 	int pending, cpu;
+ 	int pending;
  	int rw = bio_data_dir(bio);
  
++<<<<<<< HEAD
 +	cpu = part_stat_lock();
 +	part_round_stats(md->queue, cpu, &dm_disk(md)->part0);
 +	part_stat_add(cpu, &dm_disk(md)->part0, ticks[rw], duration);
 +	part_stat_unlock();
++=======
+ 	generic_end_io_acct(rw, &dm_disk(md)->part0, io->start_time);
++>>>>>>> 18c0b223cf99 (md: use generic io stats accounting functions to simplify io stat accounting)
  
  	if (unlikely(dm_stats_used(&md->stats)))
 -		dm_stats_account_io(&md->stats, bio->bi_rw, bio->bi_iter.bi_sector,
 +		dm_stats_account_io(&md->stats, bio->bi_rw, bio->bi_sector,
  				    bio_sectors(bio), true, duration, &io->stats_aux);
  
  	/*
diff --cc drivers/md/md.c
index 279c1cd9b728,056ccd28c037..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -265,26 -243,24 +265,32 @@@ static DEFINE_SPINLOCK(all_mddevs_lock)
   * call has finished, the bio has been linked into some internal structure
   * and so is visible to ->quiesce(), so we don't need the refcount any more.
   */
 -static void md_make_request(struct request_queue *q, struct bio *bio)
 +static bool is_suspended(struct mddev *mddev, struct bio *bio)
  {
++<<<<<<< HEAD
 +	if (mddev->suspended)
 +		return true;
 +	if (bio_data_dir(bio) != WRITE)
 +		return false;
 +	if (mddev->suspend_lo >= mddev->suspend_hi)
 +		return false;
 +	if (bio->bi_sector >= mddev->suspend_hi)
 +		return false;
 +	if (bio_end_sector(bio) < mddev->suspend_lo)
 +		return false;
 +	return true;
 +}
++=======
+ 	const int rw = bio_data_dir(bio);
+ 	struct mddev *mddev = q->queuedata;
+ 	unsigned int sectors;
++>>>>>>> 18c0b223cf99 (md: use generic io stats accounting functions to simplify io stat accounting)
  
 -	if (mddev == NULL || mddev->pers == NULL
 -	    || !mddev->ready) {
 -		bio_io_error(bio);
 -		return;
 -	}
 -	if (mddev->ro == 1 && unlikely(rw == WRITE)) {
 -		bio_endio(bio, bio_sectors(bio) == 0 ? 0 : -EROFS);
 -		return;
 -	}
 -	smp_rmb(); /* Ensure implications of  'active' are visible */
 +void md_handle_request(struct mddev *mddev, struct bio *bio)
 +{
 +check_suspended:
  	rcu_read_lock();
 -	if (mddev->suspended) {
 +	if (is_suspended(mddev, bio)) {
  		DEFINE_WAIT(__wait);
  		for (;;) {
  			prepare_to_wait(&mddev->sb_wait, &__wait,
@@@ -332,14 -281,12 +338,21 @@@ static void md_make_request(struct requ
  	 * go away inside make_request
  	 */
  	sectors = bio_sectors(bio);
 -	mddev->pers->make_request(mddev, bio);
 -
 +	/* bio could be mergeable after passing to underlayer */
 +	bio->bi_rw &= ~REQ_NOMERGE;
 +	md_handle_request(mddev, bio);
 +
++<<<<<<< HEAD
 +	cpu = part_stat_lock();
 +	part_stat_inc(cpu, &mddev->gendisk->part0, ios[rw]);
 +	part_stat_add(cpu, &mddev->gendisk->part0, sectors[rw], sectors);
 +	part_stat_unlock();
++=======
+ 	generic_start_io_acct(rw, sectors, &mddev->gendisk->part0);
+ 
+ 	if (atomic_dec_and_test(&mddev->active_io) && mddev->suspended)
+ 		wake_up(&mddev->sb_wait);
++>>>>>>> 18c0b223cf99 (md: use generic io stats accounting functions to simplify io stat accounting)
  }
  
  /* mddev_suspend makes sure no new requests are submitted
* Unmerged path drivers/md/dm.c
* Unmerged path drivers/md/md.c
