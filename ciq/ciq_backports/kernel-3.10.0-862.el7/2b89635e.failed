iio: hid_sensor_hub: Common PM functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit 2b89635e9a9e7cae5d137384842c3da7726ed197
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2b89635e.failed

To improvement power and performance, both regular and run time callbacks
are introduced. Because of auto suspend delay, two consecutive read
don't have to go through full power on/off procedure. The auto suspend
time can be adjusted using regular power attributes of PM sysfs.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 2b89635e9a9e7cae5d137384842c3da7726ed197)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/common/hid-sensors/hid-sensor-trigger.c
diff --cc drivers/iio/common/hid-sensors/hid-sensor-trigger.c
index 5cc9e5190684,2f1d535b94c4..000000000000
--- a/drivers/iio/common/hid-sensors/hid-sensor-trigger.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-trigger.c
@@@ -28,12 -29,11 +29,17 @@@
  #include <linux/iio/sysfs.h>
  #include "hid-sensor-trigger.h"
  
++<<<<<<< HEAD
 +static int hid_sensor_data_rdy_trigger_set_state(struct iio_trigger *trig,
 +						bool state)
++=======
+ static int _hid_sensor_power_state(struct hid_sensor_common *st, bool state)
++>>>>>>> 2b89635e9a9e (iio: hid_sensor_hub: Common PM functions)
  {
 +	struct hid_sensor_common *st = iio_trigger_get_drvdata(trig);
  	int state_val;
  	int report_val;
+ 	s32 poll_value = 0;
  
  	if (state) {
  		if (sensor_hub_device_open(st->hsdev))
@@@ -46,7 -49,11 +52,9 @@@
  			st->report_state.report_id,
  			st->report_state.index,
  			HID_USAGE_SENSOR_PROP_REPORTING_STATE_ALL_EVENTS_ENUM);
+ 
+ 		poll_value = hid_sensor_read_poll_value(st);
  	} else {
 -		if (!atomic_dec_and_test(&st->data_ready))
 -			return 0;
  		sensor_hub_device_close(st->hsdev);
  		state_val = hid_sensor_get_usage_index(st->hsdev,
  			st->power_state.report_id,
@@@ -76,8 -82,41 +84,44 @@@
  	sensor_hub_get_feature(st->hsdev, st->power_state.report_id,
  					st->power_state.index,
  					&state_val);
+ 	if (state && poll_value)
+ 		msleep_interruptible(poll_value * 2);
+ 
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ EXPORT_SYMBOL(hid_sensor_power_state);
+ 
+ int hid_sensor_power_state(struct hid_sensor_common *st, bool state)
+ {
+ #ifdef CONFIG_PM
+ 	int ret;
+ 
+ 	if (state)
+ 		ret = pm_runtime_get_sync(&st->pdev->dev);
+ 	else {
+ 		pm_runtime_mark_last_busy(&st->pdev->dev);
+ 		ret = pm_runtime_put_autosuspend(&st->pdev->dev);
+ 	}
+ 	if (ret < 0) {
+ 		if (state)
+ 			pm_runtime_put_noidle(&st->pdev->dev);
+ 		return ret;
+ 	}
+ 
+  	return 0;
+ #else
+ 	return _hid_sensor_power_state(st, state);
+ #endif
+ }
+ 
+ static int hid_sensor_data_rdy_trigger_set_state(struct iio_trigger *trig,
+ 						bool state)
+ {
+ 	return hid_sensor_power_state(iio_trigger_get_drvdata(trig), state);
+ }
++>>>>>>> 2b89635e9a9e (iio: hid_sensor_hub: Common PM functions)
  
  void hid_sensor_remove_trigger(struct hid_sensor_common *attrb)
  {
* Unmerged path drivers/iio/common/hid-sensors/hid-sensor-trigger.c
diff --git a/drivers/iio/common/hid-sensors/hid-sensor-trigger.h b/drivers/iio/common/hid-sensors/hid-sensor-trigger.h
index ca02f7811aa8..1df2f968eff6 100644
--- a/drivers/iio/common/hid-sensors/hid-sensor-trigger.h
+++ b/drivers/iio/common/hid-sensors/hid-sensor-trigger.h
@@ -19,6 +19,11 @@
 #ifndef _HID_SENSOR_TRIGGER_H
 #define _HID_SENSOR_TRIGGER_H
 
+#include <linux/pm.h>
+#include <linux/pm_runtime.h>
+
+extern const struct dev_pm_ops hid_sensor_pm_ops;
+
 int hid_sensor_setup_trigger(struct iio_dev *indio_dev, const char *name,
 				struct hid_sensor_common *attrb);
 void hid_sensor_remove_trigger(struct hid_sensor_common *attrb);
