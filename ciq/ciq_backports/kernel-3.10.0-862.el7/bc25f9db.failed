x86/efi: Move to generic {__,}efi_call_virt()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] efi: Move to generic {__, }efi_call_virt() (Bhupesh Sharma) [1102454]
Rebuild_FUZZ: 94.25%
commit-author Mark Rutland <mark.rutland@arm.com>
commit bc25f9dba149a1392b016a6d35300c8d79177298
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bc25f9db.failed

Now there's a common template for {__,}efi_call_virt(), remove the
duplicate logic from the x86 EFI code.

	Signed-off-by: Mark Rutland <mark.rutland@arm.com>
	Signed-off-by: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Leif Lindholm <leif.lindholm@linaro.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
	Cc: Russell King <linux@arm.linux.org.uk>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/1461614832-17633-35-git-send-email-matt@codeblueprint.co.uk
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit bc25f9dba149a1392b016a6d35300c8d79177298)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/efi.h
diff --cc arch/x86/include/asm/efi.h
index d1a2aa8edaf2,fb085ce00bd2..000000000000
--- a/arch/x86/include/asm/efi.h
+++ b/arch/x86/include/asm/efi.h
@@@ -30,13 -39,11 +33,21 @@@ extern unsigned long asmlinkage efi_cal
  /*
   * Wrap all the virtual calls in a way that forces the parameters on the stack.
   */
++<<<<<<< HEAD
 +
 +/* Use this macro if your virtual returns a non-void value */
 +#define efi_call_virt(f, args...) \
 +	((efi_##f##_t __attribute__((regparm(0)))*)efi.systab->runtime->f)(args)
 +
 +/* Use this macro if your virtual call does not return any value */
 +#define __efi_call_virt(f, args...) efi_call_virt(f, args)
++=======
+ #define arch_efi_call_virt(f, args...)					\
+ ({									\
+ 	((efi_##f##_t __attribute__((regparm(0)))*)			\
+ 		efi.systab->runtime->f)(args);				\
+ })
++>>>>>>> bc25f9dba149 (x86/efi: Move to generic {__,}efi_call_virt())
  
  #define efi_ioremap(addr, size, type, attr)	ioremap_cache(addr, size)
  
@@@ -48,22 -55,43 +59,51 @@@ extern u64 asmlinkage efi_call(void *fp
  
  #define efi_call_phys(f, args...)		efi_call((f), args)
  
++<<<<<<< HEAD
 +#define efi_call_virt(f, ...)						\
++=======
+ /*
+  * Scratch space used for switching the pagetable in the EFI stub
+  */
+ struct efi_scratch {
+ 	u64	r15;
+ 	u64	prev_cr3;
+ 	pgd_t	*efi_pgt;
+ 	bool	use_pgd;
+ 	u64	phys_stack;
+ } __packed;
+ 
+ #define arch_efi_call_virt_setup()					\
++>>>>>>> bc25f9dba149 (x86/efi: Move to generic {__,}efi_call_virt())
  ({									\
- 	efi_status_t __s;						\
- 									\
  	efi_sync_low_kernel_mappings();					\
  	preempt_disable();						\
++<<<<<<< HEAD
 +	__s = efi_call((void *)efi.systab->runtime->f, __VA_ARGS__);	\
- 	preempt_enable();						\
- 	__s;								\
++=======
+ 	__kernel_fpu_begin();						\
+ 									\
+ 	if (efi_scratch.use_pgd) {					\
+ 		efi_scratch.prev_cr3 = read_cr3();			\
+ 		write_cr3((unsigned long)efi_scratch.efi_pgt);		\
+ 		__flush_tlb_all();					\
+ 	}								\
  })
  
- /*
-  * All X86_64 virt calls return non-void values. Thus, use non-void call for
-  * virt calls that would be void on X86_32.
-  */
- #define __efi_call_virt(f, args...) efi_call_virt(f, args)
+ #define arch_efi_call_virt(f, args...)					\
+ 	efi_call((void *)efi.systab->runtime->f, args)			\
+ 
+ #define arch_efi_call_virt_teardown()					\
+ ({									\
+ 	if (efi_scratch.use_pgd) {					\
+ 		write_cr3(efi_scratch.prev_cr3);			\
+ 		__flush_tlb_all();					\
+ 	}								\
+ 									\
+ 	__kernel_fpu_end();						\
++>>>>>>> bc25f9dba149 (x86/efi: Move to generic {__,}efi_call_virt())
+ 	preempt_enable();						\
+ })
  
  extern void __iomem *__init efi_ioremap(unsigned long addr, unsigned long size,
  					u32 type, u64 attribute);
* Unmerged path arch/x86/include/asm/efi.h
