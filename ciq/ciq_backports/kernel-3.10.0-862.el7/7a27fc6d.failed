net: check UDP tunnel RX port offload feature before calling tunnel ndo ndo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] check UDP tunnel RX port offload feature before calling tunnel ndo ndo (Jiri Benc) [1308630 1467280]
Rebuild_FUZZ: 96.55%
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit 7a27fc6d536b36a29c0ed4bfff7035420f4df216
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7a27fc6d.failed

If NETIF_F_RX_UDP_TUNNEL_PORT was disabled on a given netdevice, skip
the tunnel offload ndo call during tunnel port creation and deletion.

	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7a27fc6d536b36a29c0ed4bfff7035420f4df216)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/udp_tunnel.c
diff --cc net/ipv4/udp_tunnel.c
index 6e94af27d34c,0d3f14cdc524..000000000000
--- a/net/ipv4/udp_tunnel.c
+++ b/net/ipv4/udp_tunnel.c
@@@ -114,6 -82,10 +114,13 @@@ void udp_tunnel_push_rx_port(struct net
  	struct sock *sk = sock->sk;
  	struct udp_tunnel_info ti;
  
++<<<<<<< HEAD
++=======
+ 	if (!dev->netdev_ops->ndo_udp_tunnel_add ||
+ 	    !(dev->features & NETIF_F_RX_UDP_TUNNEL_PORT))
+ 		return;
+ 
++>>>>>>> 7a27fc6d536b (net: check UDP tunnel RX port offload feature before calling tunnel ndo ndo)
  	ti.type = type;
  	ti.sa_family = sk->sk_family;
  	ti.port = inet_sk(sk)->inet_sport;
@@@ -135,8 -107,13 +142,18 @@@ void udp_tunnel_notify_add_rx_port(stru
  	ti.port = inet_sk(sk)->inet_sport;
  
  	rcu_read_lock();
++<<<<<<< HEAD
 +	for_each_netdev_rcu(net, dev)
 +		__udp_tunnel_push_rx_port(dev, &ti);
++=======
+ 	for_each_netdev_rcu(net, dev) {
+ 		if (!dev->netdev_ops->ndo_udp_tunnel_add)
+ 			continue;
+ 		if (!(dev->features & NETIF_F_RX_UDP_TUNNEL_PORT))
+ 			continue;
+ 		dev->netdev_ops->ndo_udp_tunnel_add(dev, &ti);
+ 	}
++>>>>>>> 7a27fc6d536b (net: check UDP tunnel RX port offload feature before calling tunnel ndo ndo)
  	rcu_read_unlock();
  }
  EXPORT_SYMBOL_GPL(udp_tunnel_notify_add_rx_port);
@@@ -184,8 -131,13 +201,18 @@@ void udp_tunnel_notify_del_rx_port(stru
  	ti.port = inet_sk(sk)->inet_sport;
  
  	rcu_read_lock();
++<<<<<<< HEAD
 +	for_each_netdev_rcu(net, dev)
 +		__udp_tunnel_pull_rx_port(dev, &ti);
++=======
+ 	for_each_netdev_rcu(net, dev) {
+ 		if (!dev->netdev_ops->ndo_udp_tunnel_del)
+ 			continue;
+ 		if (!(dev->features & NETIF_F_RX_UDP_TUNNEL_PORT))
+ 			continue;
+ 		dev->netdev_ops->ndo_udp_tunnel_del(dev, &ti);
+ 	}
++>>>>>>> 7a27fc6d536b (net: check UDP tunnel RX port offload feature before calling tunnel ndo ndo)
  	rcu_read_unlock();
  }
  EXPORT_SYMBOL_GPL(udp_tunnel_notify_del_rx_port);
* Unmerged path net/ipv4/udp_tunnel.c
