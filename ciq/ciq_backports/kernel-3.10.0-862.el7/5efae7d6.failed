tpm: cleanup of printk error messages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Nayna Jain <nayna@linux.vnet.ibm.com>
commit 5efae7d6b07f37939f8f99d0983d5346f0c3e4e6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5efae7d6.failed

This patch removes the unnecessary error messages on failing to
allocate memory and replaces pr_err/printk with dev_dbg/dev_info
as applicable.

	Suggested-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
	Signed-off-by: Nayna Jain <nayna@linux.vnet.ibm.com>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
(cherry picked from commit 5efae7d6b07f37939f8f99d0983d5346f0c3e4e6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/tpm/tpm_acpi.c
diff --cc drivers/char/tpm/tpm_acpi.c
index 5c80b93e8393,0cb43ef5f79a..000000000000
--- a/drivers/char/tpm/tpm_acpi.c
+++ b/drivers/char/tpm/tpm_acpi.c
@@@ -91,12 -86,9 +86,15 @@@ int tpm_read_log_acpi(struct tpm_chip *
  
  	log->bios_event_log_end = log->bios_event_log + len;
  
++<<<<<<< HEAD
 +	virt = acpi_os_map_memory(start, len);
 +	if (!virt) {
 +		printk("%s: ERROR - Unable to map memory\n", __func__);
++=======
+ 	virt = acpi_os_map_iomem(start, len);
+ 	if (!virt)
++>>>>>>> 5efae7d6b07f (tpm: cleanup of printk error messages)
  		goto err;
- 	}
  
  	memcpy_fromio(log->bios_event_log, virt, len);
  
* Unmerged path drivers/char/tpm/tpm_acpi.c
diff --git a/drivers/char/tpm/tpm_of.c b/drivers/char/tpm/tpm_of.c
index 12a86dda3b69..643cc8ccb35b 100644
--- a/drivers/char/tpm/tpm_of.c
+++ b/drivers/char/tpm/tpm_of.c
@@ -31,40 +31,29 @@ int tpm_read_log_of(struct tpm_chip *chip)
 	log = &chip->log;
 	if (chip->dev.parent->of_node)
 		np = chip->dev.parent->of_node;
-	if (!np) {
-		pr_err("%s: ERROR - IBMVTPM not supported\n", __func__);
+	if (!np)
 		return -ENODEV;
-	}
 
 	sizep = of_get_property(np, "linux,sml-size", NULL);
-	if (sizep == NULL) {
-		pr_err("%s: ERROR - SML size not found\n", __func__);
-		goto cleanup_eio;
-	}
+	if (sizep == NULL)
+		return -EIO;
+
 	if (*sizep == 0) {
-		pr_err("%s: ERROR - event log area empty\n", __func__);
-		goto cleanup_eio;
+		dev_warn(&chip->dev, "%s: Event log area empty\n", __func__);
+		return -EIO;
 	}
 
 	basep = of_get_property(np, "linux,sml-base", NULL);
-	if (basep == NULL) {
-		pr_err("%s: ERROR - SML not found\n", __func__);
-		goto cleanup_eio;
-	}
+	if (basep == NULL)
+		return -EIO;
 
 	log->bios_event_log = kmalloc(*sizep, GFP_KERNEL);
-	if (!log->bios_event_log) {
-		pr_err("%s: ERROR - Not enough memory for BIOS measurements\n",
-		       __func__);
+	if (!log->bios_event_log)
 		return -ENOMEM;
-	}
 
 	log->bios_event_log_end = log->bios_event_log + *sizep;
 
 	memcpy(log->bios_event_log, __va(*basep), *sizep);
 
 	return 0;
-
-cleanup_eio:
-	return -EIO;
 }
