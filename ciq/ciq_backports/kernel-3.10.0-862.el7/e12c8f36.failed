KVM: lapic: adjust preemption timer correctly when goes TSC backward

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Wanpeng Li <wanpeng.li@hotmail.com>
commit e12c8f36f3f7a60d55938c5aed5999278fa92bcb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e12c8f36.failed

TSC_OFFSET will be adjusted if discovers TSC backward during vCPU load.
The preemption timer, which relies on the guest tsc to reprogram its
preemption timer value, is also reprogrammed if vCPU is scheded in to
a different pCPU. However, the current implementation reprogram preemption
timer before TSC_OFFSET is adjusted to the right value, resulting in the
preemption timer firing prematurely.

This patch fix it by adjusting TSC_OFFSET before reprogramming preemption
timer if TSC backward.

	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Radim Krċmář <rkrcmar@redhat.com>
	Cc: Yunhong Jiang <yunhong.jiang@intel.com>
	Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit e12c8f36f3f7a60d55938c5aed5999278fa92bcb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index db49db518a51,699f8726539a..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -2781,12 -2742,17 +2781,20 @@@ void kvm_arch_vcpu_load(struct kvm_vcp
  				rdtsc() - vcpu->arch.last_host_tsc;
  		if (tsc_delta < 0)
  			mark_tsc_unstable("KVM discovered backwards TSC");
++<<<<<<< HEAD
++=======
+ 
++>>>>>>> e12c8f36f3f7 (KVM: lapic: adjust preemption timer correctly when goes TSC backward)
  		if (check_tsc_unstable()) {
  			u64 offset = kvm_compute_tsc_offset(vcpu,
  						vcpu->arch.last_guest_tsc);
 -			kvm_x86_ops->write_tsc_offset(vcpu, offset);
 +			kvm_vcpu_write_tsc_offset(vcpu, offset);
  			vcpu->arch.tsc_catchup = 1;
  		}
+ 		if (kvm_lapic_hv_timer_in_use(vcpu) &&
+ 				kvm_x86_ops->set_hv_timer(vcpu,
+ 					kvm_get_lapic_tscdeadline_msr(vcpu)))
+ 			kvm_lapic_switch_to_sw_timer(vcpu);
  		/*
  		 * On a host with synchronized TSC, there is no need to update
  		 * kvmclock on vcpu->cpu migration
* Unmerged path arch/x86/kvm/x86.c
