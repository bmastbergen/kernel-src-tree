KEYS: fix dereferencing NULL payload with nonzero length

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric Biggers <ebiggers@google.com>
commit 5649645d725c73df4302428ee4e02c869248b4c5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5649645d.failed

sys_add_key() and the KEYCTL_UPDATE operation of sys_keyctl() allowed a
NULL payload with nonzero length to be passed to the key type's
->preparse(), ->instantiate(), and/or ->update() methods.  Various key
types including asymmetric, cifs.idmap, cifs.spnego, and pkcs7_test did
not handle this case, allowing an unprivileged user to trivially cause a
NULL pointer dereference (kernel oops) if one of these key types was
present.  Fix it by doing the copy_from_user() when 'plen' is nonzero
rather than when '_payload' is non-NULL, causing the syscall to fail
with EFAULT as expected when an invalid buffer is specified.

	Cc: stable@vger.kernel.org # 2.6.10+
	Signed-off-by: Eric Biggers <ebiggers@google.com>
	Signed-off-by: David Howells <dhowells@redhat.com>
	Signed-off-by: James Morris <james.l.morris@oracle.com>
(cherry picked from commit 5649645d725c73df4302428ee4e02c869248b4c5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/keys/keyctl.c
diff --cc security/keys/keyctl.c
index 3a409afc6582,94c2790f8283..000000000000
--- a/security/keys/keyctl.c
+++ b/security/keys/keyctl.c
@@@ -96,18 -99,11 +96,22 @@@ SYSCALL_DEFINE5(add_key, const char __u
  	/* pull the payload in if one was supplied */
  	payload = NULL;
  
++<<<<<<< HEAD
 +	vm = false;
 +	if (_payload) {
++=======
+ 	if (plen) {
++>>>>>>> 5649645d725c (KEYS: fix dereferencing NULL payload with nonzero length)
  		ret = -ENOMEM;
 -		payload = kvmalloc(plen, GFP_KERNEL);
 -		if (!payload)
 -			goto error2;
 +		payload = kmalloc(plen, GFP_KERNEL | __GFP_NOWARN);
 +		if (!payload) {
 +			if (plen <= PAGE_SIZE)
 +				goto error2;
 +			vm = true;
 +			payload = vmalloc(plen);
 +			if (!payload)
 +				goto error2;
 +		}
  
  		ret = -EFAULT;
  		if (copy_from_user(payload, _payload, plen) != 0)
* Unmerged path security/keys/keyctl.c
