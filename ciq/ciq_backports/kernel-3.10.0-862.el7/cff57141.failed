e1000e: add statistic indicating number of skipped Tx timestamps

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit cff57141456482b410a2312b88467ceb4c26d75d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/cff57141.failed

The e1000e driver can only handle one Tx timestamp request at a time.
This means it is possible for an application timestamp request to be
ignored.

There is no easy way for an administrator to determine if this occurred.
Add a new statistic which tracks this, tx_hwtstamp_skipped.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit cff57141456482b410a2312b88467ceb4c26d75d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/e1000e/netdev.c
diff --cc drivers/net/ethernet/intel/e1000e/netdev.c
index 5c581355ae15,fc1d92ca3ea2..000000000000
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@@ -5859,17 -5867,20 +5859,30 @@@ static netdev_tx_t e1000_xmit_frame(str
  			     nr_frags);
  	if (count) {
  		if (unlikely(skb_shinfo(skb)->tx_flags & SKBTX_HW_TSTAMP) &&
++<<<<<<< HEAD
 +		    (adapter->flags & FLAG_HAS_HW_TIMESTAMP) &&
 +		    !adapter->tx_hwtstamp_skb) {
 +			skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
 +			tx_flags |= E1000_TX_FLAGS_HWTSTAMP;
 +			adapter->tx_hwtstamp_skb = skb_get(skb);
 +			adapter->tx_hwtstamp_start = jiffies;
 +			schedule_work(&adapter->tx_hwtstamp_work);
 +		} else {
 +			skb_tx_timestamp(skb);
++=======
+ 		    (adapter->flags & FLAG_HAS_HW_TIMESTAMP)) {
+ 			if (!adapter->tx_hwtstamp_skb) {
+ 				skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
+ 				tx_flags |= E1000_TX_FLAGS_HWTSTAMP;
+ 				adapter->tx_hwtstamp_skb = skb_get(skb);
+ 				adapter->tx_hwtstamp_start = jiffies;
+ 				schedule_work(&adapter->tx_hwtstamp_work);
+ 			} else {
+ 				adapter->tx_hwtstamp_skipped++;
+ 			}
++>>>>>>> cff571414564 (e1000e: add statistic indicating number of skipped Tx timestamps)
  		}
  
 -		skb_tx_timestamp(skb);
 -
  		netdev_sent_queue(netdev, skb->len);
  		e1000_tx_queue(tx_ring, tx_flags, count);
  		/* Make sure there is space in the ring for the next send. */
diff --git a/drivers/net/ethernet/intel/e1000e/e1000.h b/drivers/net/ethernet/intel/e1000e/e1000.h
index 4bf1294467a1..d8618864f621 100644
--- a/drivers/net/ethernet/intel/e1000e/e1000.h
+++ b/drivers/net/ethernet/intel/e1000e/e1000.h
@@ -268,6 +268,7 @@ struct e1000_adapter {
 	u32 tx_fifo_size;
 	u32 tx_dma_failed;
 	u32 tx_hwtstamp_timeouts;
+	u32 tx_hwtstamp_skipped;
 
 	/* Rx */
 	bool (*clean_rx) (struct e1000_ring *ring, int *work_done,
diff --git a/drivers/net/ethernet/intel/e1000e/ethtool.c b/drivers/net/ethernet/intel/e1000e/ethtool.c
index 5e10cfba2c38..82432c6d944b 100644
--- a/drivers/net/ethernet/intel/e1000e/ethtool.c
+++ b/drivers/net/ethernet/intel/e1000e/ethtool.c
@@ -105,6 +105,7 @@ static const struct e1000_stats e1000_gstrings_stats[] = {
 	E1000_STAT("uncorr_ecc_errors", uncorr_errors),
 	E1000_STAT("corr_ecc_errors", corr_errors),
 	E1000_STAT("tx_hwtstamp_timeouts", tx_hwtstamp_timeouts),
+	E1000_STAT("tx_hwtstamp_skipped", tx_hwtstamp_skipped),
 };
 
 #define E1000_GLOBAL_STATS_LEN	ARRAY_SIZE(e1000_gstrings_stats)
* Unmerged path drivers/net/ethernet/intel/e1000e/netdev.c
