mnt: In propgate_umount handle visiting mounts in any order

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 99b19d16471e9c3faa85cad38abc9cbbe04c6d55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/99b19d16.failed

While investigating some poor umount performance I realized that in
the case of overlapping mount trees where some of the mounts are locked
the code has been failing to unmount all of the mounts it should
have been unmounting.

This failure to unmount all of the necessary
mounts can be reproduced with:

$ cat locked_mounts_test.sh

mount -t tmpfs test-base /mnt
mount --make-shared /mnt
mkdir -p /mnt/b

mount -t tmpfs test1 /mnt/b
mount --make-shared /mnt/b
mkdir -p /mnt/b/10

mount -t tmpfs test2 /mnt/b/10
mount --make-shared /mnt/b/10
mkdir -p /mnt/b/10/20

mount --rbind /mnt/b /mnt/b/10/20

unshare -Urm --propagation unchaged /bin/sh -c 'sleep 5; if [ $(grep test /proc/self/mountinfo | wc -l) -eq 1 ] ; then echo SUCCESS ; else echo FAILURE ; fi'
sleep 1
umount -l /mnt/b
wait %%

$ unshare -Urm ./locked_mounts_test.sh

This failure is corrected by removing the prepass that marks mounts
that may be umounted.

A first pass is added that umounts mounts if possible and if not sets
mount mark if they could be unmounted if they weren't locked and adds
them to a list to umount possibilities.  This first pass reconsiders
the mounts parent if it is on the list of umount possibilities, ensuring
that information of umoutability will pass from child to mount parent.

A second pass then walks through all mounts that are umounted and processes
their children unmounting them or marking them for reparenting.

A last pass cleans up the state on the mounts that could not be umounted
and if applicable reparents them to their first parent that remained
mounted.

While a bit longer than the old code this code is much more robust
as it allows information to flow up from the leaves and down
from the trunk making the order in which mounts are encountered
in the umount propgation tree irrelevant.

	Cc: stable@vger.kernel.org
Fixes: 0c56fe31420c ("mnt: Don't propagate unmounts to locked mounts")
	Reviewed-by: Andrei Vagin <avagin@virtuozzo.com>
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit 99b19d16471e9c3faa85cad38abc9cbbe04c6d55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/mount.h
#	fs/namespace.c
#	fs/pnode.c
diff --cc fs/mount.h
index 21f733c2adca,de45d9e76748..000000000000
--- a/fs/mount.h
+++ b/fs/mount.h
@@@ -55,8 -58,9 +55,12 @@@ struct mount 
  	struct mnt_namespace *mnt_ns;	/* containing namespace */
  	struct mountpoint *mnt_mp;	/* where is it mounted */
  	struct hlist_node mnt_mp_list;	/* list mounts with the same mountpoint */
++<<<<<<< HEAD
++=======
+ 	struct list_head mnt_umounting; /* list entry for umount propagation */
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
  #ifdef CONFIG_FSNOTIFY
 -	struct fsnotify_mark_connector __rcu *mnt_fsnotify_marks;
 +	struct hlist_head mnt_fsnotify_marks;
  	__u32 mnt_fsnotify_mask;
  #endif
  	int mnt_id;			/* mount identifier */
diff --cc fs/namespace.c
index e6c16f498e31,5e3dcbeb1de5..000000000000
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@@ -232,9 -236,7 +232,13 @@@ static struct mount *alloc_vfsmnt(cons
  		INIT_LIST_HEAD(&mnt->mnt_slave_list);
  		INIT_LIST_HEAD(&mnt->mnt_slave);
  		INIT_HLIST_NODE(&mnt->mnt_mp_list);
++<<<<<<< HEAD
 +#ifdef CONFIG_FSNOTIFY
 +		INIT_HLIST_HEAD(&mnt->mnt_fsnotify_marks);
 +#endif
++=======
+ 		INIT_LIST_HEAD(&mnt->mnt_umounting);
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
  		init_fs_pin(&mnt->mnt_umount, drop_mountpoint);
  	}
  	return mnt;
diff --cc fs/pnode.c
index 5922b82d049b,fbaca7df2eb0..000000000000
--- a/fs/pnode.c
+++ b/fs/pnode.c
@@@ -387,57 -413,98 +387,140 @@@ void propagate_mount_unlock(struct moun
  	}
  }
  
- /*
-  * Mark all mounts that the MNT_LOCKED logic will allow to be unmounted.
-  */
- static void mark_umount_candidates(struct mount *mnt)
+ static void umount_one(struct mount *mnt, struct list_head *to_umount)
  {
++<<<<<<< HEAD
 +	struct mount *parent = mnt->mnt_parent;
 +	struct mount *m;
 +
 +	BUG_ON(parent == mnt);
 +
 +	for (m = propagation_next(parent, parent); m;
 +			m = propagation_next(m, parent)) {
 +		struct mount *child = __lookup_mnt_last(&m->mnt,
 +						mnt->mnt_mountpoint);
 +		if (child && (!IS_MNT_LOCKED(child) || IS_MNT_MARKED(m))) {
 +			SET_MNT_MARK(child);
 +		}
 +	}
++=======
+ 	CLEAR_MNT_MARK(mnt);
+ 	mnt->mnt.mnt_flags |= MNT_UMOUNT;
+ 	list_del_init(&mnt->mnt_child);
+ 	list_del_init(&mnt->mnt_umounting);
+ 	list_move_tail(&mnt->mnt_list, to_umount);
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
  }
  
  /*
   * NOTE: unmounting 'mnt' naturally propagates to all other mounts its
   * parent propagates to.
   */
++<<<<<<< HEAD
 +static void __propagate_umount(struct mount *mnt)
++=======
+ static bool __propagate_umount(struct mount *mnt,
+ 			       struct list_head *to_umount,
+ 			       struct list_head *to_restore)
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
  {
- 	struct mount *parent = mnt->mnt_parent;
- 	struct mount *m;
+ 	bool progress = false;
+ 	struct mount *child;
  
- 	BUG_ON(parent == mnt);
+ 	/*
+ 	 * The state of the parent won't change if this mount is
+ 	 * already unmounted or marked as without children.
+ 	 */
+ 	if (mnt->mnt.mnt_flags & (MNT_UMOUNT | MNT_MARKED))
+ 		goto out;
  
++<<<<<<< HEAD
 +	for (m = propagation_next(parent, parent); m;
 +			m = propagation_next(m, parent)) {
 +
 +		struct mount *child = __lookup_mnt_last(&m->mnt,
 +						mnt->mnt_mountpoint);
 +		/*
 +		 * umount the child only if the child has no children
 +		 * and the child is marked safe to unmount.
 +		 */
 +		if (!child || !IS_MNT_MARKED(child))
 +			continue;
 +		CLEAR_MNT_MARK(child);
 +		if (list_empty(&child->mnt_mounts)) {
 +			list_del_init(&child->mnt_child);
 +			child->mnt.mnt_flags |= MNT_UMOUNT;
 +			list_move_tail(&child->mnt_list, &mnt->mnt_list);
++=======
+ 	/* Verify topper is the only grandchild that has not been
+ 	 * speculatively unmounted.
+ 	 */
+ 	list_for_each_entry(child, &mnt->mnt_mounts, mnt_child) {
+ 		if (child->mnt_mountpoint == mnt->mnt.mnt_root)
+ 			continue;
+ 		if (!list_empty(&child->mnt_umounting) && IS_MNT_MARKED(child))
+ 			continue;
+ 		/* Found a mounted child */
+ 		goto children;
+ 	}
+ 
+ 	/* Mark mounts that can be unmounted if not locked */
+ 	SET_MNT_MARK(mnt);
+ 	progress = true;
+ 
+ 	/* If a mount is without children and not locked umount it. */
+ 	if (!IS_MNT_LOCKED(mnt)) {
+ 		umount_one(mnt, to_umount);
+ 	} else {
+ children:
+ 		list_move_tail(&mnt->mnt_umounting, to_restore);
+ 	}
+ out:
+ 	return progress;
+ }
+ 
+ static void umount_list(struct list_head *to_umount,
+ 			struct list_head *to_restore)
+ {
+ 	struct mount *mnt, *child, *tmp;
+ 	list_for_each_entry(mnt, to_umount, mnt_list) {
+ 		list_for_each_entry_safe(child, tmp, &mnt->mnt_mounts, mnt_child) {
+ 			/* topper? */
+ 			if (child->mnt_mountpoint == mnt->mnt.mnt_root)
+ 				list_move_tail(&child->mnt_umounting, to_restore);
+ 			else
+ 				umount_one(child, to_umount);
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
+ 		}
+ 	}
+ }
+ 
++<<<<<<< HEAD
++=======
+ static void restore_mounts(struct list_head *to_restore)
+ {
+ 	/* Restore mounts to a clean working state */
+ 	while (!list_empty(to_restore)) {
+ 		struct mount *mnt, *parent;
+ 		struct mountpoint *mp;
+ 
+ 		mnt = list_first_entry(to_restore, struct mount, mnt_umounting);
+ 		CLEAR_MNT_MARK(mnt);
+ 		list_del_init(&mnt->mnt_umounting);
+ 
+ 		/* Should this mount be reparented? */
+ 		mp = mnt->mnt_mp;
+ 		parent = mnt->mnt_parent;
+ 		while (parent->mnt.mnt_flags & MNT_UMOUNT) {
+ 			mp = parent->mnt_mp;
+ 			parent = parent->mnt_parent;
  		}
+ 		if (parent != mnt->mnt_parent)
+ 			mnt_change_mountpoint(parent, mp, mnt);
  	}
  }
  
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
  /*
   * collect all mounts that receive propagation from the mount in @list,
   * and return these additional mounts in the same list.
@@@ -448,11 -515,34 +531,42 @@@
  int propagate_umount(struct list_head *list)
  {
  	struct mount *mnt;
++<<<<<<< HEAD
++=======
+ 	LIST_HEAD(to_restore);
+ 	LIST_HEAD(to_umount);
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
+ 
+ 	list_for_each_entry(mnt, list, mnt_list) {
+ 		struct mount *parent = mnt->mnt_parent;
+ 		struct mount *m;
  
- 	list_for_each_entry_reverse(mnt, list, mnt_list)
- 		mark_umount_candidates(mnt);
- 
++<<<<<<< HEAD
 +	list_for_each_entry(mnt, list, mnt_list)
 +		__propagate_umount(mnt);
++=======
+ 		for (m = propagation_next(parent, parent); m;
+ 		     m = propagation_next(m, parent)) {
+ 			struct mount *child = __lookup_mnt(&m->mnt,
+ 							   mnt->mnt_mountpoint);
+ 			if (!child)
+ 				continue;
+ 
+ 			/* Check the child and parents while progress is made */
+ 			while (__propagate_umount(child,
+ 						  &to_umount, &to_restore)) {
+ 				/* Is the parent a umount candidate? */
+ 				child = child->mnt_parent;
+ 				if (list_empty(&child->mnt_umounting))
+ 					break;
+ 			}
+ 		}
+ 	}
+ 
+ 	umount_list(&to_umount, &to_restore);
+ 	restore_mounts(&to_restore);
+ 	list_splice_tail(&to_umount, list);
+ 
++>>>>>>> 99b19d16471e (mnt: In propgate_umount handle visiting mounts in any order)
  	return 0;
  }
* Unmerged path fs/mount.h
* Unmerged path fs/namespace.c
* Unmerged path fs/pnode.c
