rbd: supported_features bus attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 8767b293a4ab6632f9288f34bcf2ab9ba20dca3a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8767b293.failed

... so that userspace can generate meaningful error messages and spell
out unsupported features that need to be disabled.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
	Reviewed-by: Sage Weil <sage@redhat.com>
(cherry picked from commit 8767b293a4ab6632f9288f34bcf2ab9ba20dca3a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/rbd.c
diff --cc drivers/block/rbd.c
index b73b90551b4e,517838b65964..000000000000
--- a/drivers/block/rbd.c
+++ b/drivers/block/rbd.c
@@@ -120,12 -120,15 +120,20 @@@ static int atomic_dec_return_safe(atomi
  
  /* Feature bits */
  
++<<<<<<< HEAD
 +#define RBD_FEATURE_LAYERING	(1<<0)
 +#define RBD_FEATURE_STRIPINGV2	(1<<1)
 +#define RBD_FEATURE_EXCLUSIVE_LOCK (1<<2)
++=======
+ #define RBD_FEATURE_LAYERING		(1ULL<<0)
+ #define RBD_FEATURE_STRIPINGV2		(1ULL<<1)
+ #define RBD_FEATURE_EXCLUSIVE_LOCK	(1ULL<<2)
+ #define RBD_FEATURE_DATA_POOL		(1ULL<<7)
+ 
++>>>>>>> 8767b293a4ab (rbd: supported_features bus attribute)
  #define RBD_FEATURES_ALL	(RBD_FEATURE_LAYERING |		\
  				 RBD_FEATURE_STRIPINGV2 |	\
 -				 RBD_FEATURE_EXCLUSIVE_LOCK |	\
 -				 RBD_FEATURE_DATA_POOL)
 +				 RBD_FEATURE_EXCLUSIVE_LOCK)
  
  /* Features supported by this (client software) implementation. */
  
@@@ -511,9 -500,46 +519,49 @@@ static bool rbd_is_lock_owner(struct rb
  	return is_lock_owner;
  }
  
++<<<<<<< HEAD
++=======
+ static ssize_t rbd_supported_features_show(struct bus_type *bus, char *buf)
+ {
+ 	return sprintf(buf, "0x%llx\n", RBD_FEATURES_SUPPORTED);
+ }
+ 
+ static BUS_ATTR(add, S_IWUSR, NULL, rbd_add);
+ static BUS_ATTR(remove, S_IWUSR, NULL, rbd_remove);
+ static BUS_ATTR(add_single_major, S_IWUSR, NULL, rbd_add_single_major);
+ static BUS_ATTR(remove_single_major, S_IWUSR, NULL, rbd_remove_single_major);
+ static BUS_ATTR(supported_features, S_IRUGO, rbd_supported_features_show, NULL);
+ 
+ static struct attribute *rbd_bus_attrs[] = {
+ 	&bus_attr_add.attr,
+ 	&bus_attr_remove.attr,
+ 	&bus_attr_add_single_major.attr,
+ 	&bus_attr_remove_single_major.attr,
+ 	&bus_attr_supported_features.attr,
+ 	NULL,
+ };
+ 
+ static umode_t rbd_bus_is_visible(struct kobject *kobj,
+ 				  struct attribute *attr, int index)
+ {
+ 	if (!single_major &&
+ 	    (attr == &bus_attr_add_single_major.attr ||
+ 	     attr == &bus_attr_remove_single_major.attr))
+ 		return 0;
+ 
+ 	return attr->mode;
+ }
+ 
+ static const struct attribute_group rbd_bus_group = {
+ 	.attrs = rbd_bus_attrs,
+ 	.is_visible = rbd_bus_is_visible,
+ };
+ __ATTRIBUTE_GROUPS(rbd_bus);
+ 
++>>>>>>> 8767b293a4ab (rbd: supported_features bus attribute)
  static struct bus_type rbd_bus_type = {
  	.name		= "rbd",
 -	.bus_groups	= rbd_bus_groups,
 +	.bus_attrs	= rbd_bus_attrs,
  };
  
  static void rbd_root_dev_release(struct device *dev)
* Unmerged path drivers/block/rbd.c
