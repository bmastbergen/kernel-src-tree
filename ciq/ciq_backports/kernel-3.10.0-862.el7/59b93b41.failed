net: Remove MPLS GSO feature.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] Remove MPLS GSO feature (Jiri Benc) [1497774]
Rebuild_FUZZ: 88.46%
commit-author Pravin B Shelar <pshelar@nicira.com>
commit 59b93b41e7fa71138734a911b11b044340dd16bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/59b93b41.failed

Device can export MPLS GSO support in dev->mpls_features same way
it export vlan features in dev->vlan_features. So it is safe to
remove NETIF_F_GSO_MPLS redundant flag.

	Signed-off-by: Pravin B Shelar <pshelar@nicira.com>
(cherry picked from commit 59b93b41e7fa71138734a911b11b044340dd16bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdev_features.h
#	include/linux/netdevice.h
#	include/linux/skbuff.h
#	net/core/ethtool.c
#	net/ipv4/af_inet.c
#	net/ipv4/tcp_offload.c
#	net/ipv4/udp_offload.c
#	net/ipv6/ip6_offload.c
#	net/ipv6/udp_offload.c
#	net/mpls/mpls_gso.c
diff --cc include/linux/netdev_features.h
index 22cd0d662284,8e30685affeb..000000000000
--- a/include/linux/netdev_features.h
+++ b/include/linux/netdev_features.h
@@@ -45,12 -45,14 +45,17 @@@ enum 
  	NETIF_F_GSO_IPIP_BIT,		/* ... IPIP tunnel with TSO */
  	NETIF_F_GSO_SIT_BIT,		/* ... SIT tunnel with TSO */
  	NETIF_F_GSO_UDP_TUNNEL_BIT,	/* ... UDP TUNNEL with TSO */
++<<<<<<< HEAD
 +	NETIF_F_GSO_MPLS_BIT,		/* ... MPLS segmentation */
++=======
+ 	NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT,/* ... UDP TUNNEL with TSO & CSUM */
+ 	NETIF_F_GSO_TUNNEL_REMCSUM_BIT, /* ... TUNNEL with TSO & REMCSUM */
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  	/**/NETIF_F_GSO_LAST =		/* last bit, see GSO_MASK */
 -		NETIF_F_GSO_TUNNEL_REMCSUM_BIT,
 +		NETIF_F_GSO_MPLS_BIT,
  
  	NETIF_F_FCOE_CRC_BIT,		/* FCoE CRC32 */
 -	NETIF_F_SCTP_CSUM_BIT,		/* SCTP checksum offload */
 +	NETIF_F_SCTP_CRC_BIT,		/* SCTP checksum offload */
  	NETIF_F_FCOE_MTU_BIT,		/* Supports max FCoE MTU, 2158 bytes*/
  	NETIF_F_NTUPLE_BIT,		/* N-tuple filters supported */
  	NETIF_F_RXHASH_BIT,		/* Receive hashing offload */
@@@ -143,10 -118,7 +148,14 @@@
  #define NETIF_F_GSO_SIT		__NETIF_F(GSO_SIT)
  #define NETIF_F_GSO_UDP_TUNNEL	__NETIF_F(GSO_UDP_TUNNEL)
  #define NETIF_F_GSO_UDP_TUNNEL_CSUM __NETIF_F(GSO_UDP_TUNNEL_CSUM)
++<<<<<<< HEAD
 +#define NETIF_F_TSO_MANGLEID	__NETIF_F(TSO_MANGLEID)
 +#define NETIF_F_GSO_PARTIAL	 __NETIF_F(GSO_PARTIAL)
 +#define NETIF_F_GSO_MPLS	__NETIF_F(GSO_MPLS)
 +#define NETIF_F_GSO_SCTP	__NETIF_F(GSO_SCTP)
++=======
+ #define NETIF_F_GSO_TUNNEL_REMCSUM __NETIF_F(GSO_TUNNEL_REMCSUM)
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  #define NETIF_F_HW_VLAN_STAG_FILTER __NETIF_F(HW_VLAN_STAG_FILTER)
  #define NETIF_F_HW_VLAN_STAG_RX	__NETIF_F(HW_VLAN_STAG_RX)
  #define NETIF_F_HW_VLAN_STAG_TX	__NETIF_F(HW_VLAN_STAG_TX)
diff --cc include/linux/netdevice.h
index ac042b4e583c,90ac95900a11..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -4072,14 -3581,9 +4072,19 @@@ static inline bool net_gso_ok(netdev_fe
  	BUILD_BUG_ON(SKB_GSO_IPIP    != (NETIF_F_GSO_IPIP >> NETIF_F_GSO_SHIFT));
  	BUILD_BUG_ON(SKB_GSO_SIT     != (NETIF_F_GSO_SIT >> NETIF_F_GSO_SHIFT));
  	BUILD_BUG_ON(SKB_GSO_UDP_TUNNEL != (NETIF_F_GSO_UDP_TUNNEL >> NETIF_F_GSO_SHIFT));
++<<<<<<< HEAD
 +	BUILD_BUG_ON(SKB_GSO_MPLS    != (NETIF_F_GSO_MPLS >> NETIF_F_GSO_SHIFT));
 +
 +	/* GSO2 flags, see netdev_features.h */
 +	BUILD_BUG_ON(SKB_GSO_GRE_CSUM != (NETIF_F_GSO_GRE_CSUM >> NETIF_F_GSO2_SHIFT));
 +	BUILD_BUG_ON(SKB_GSO_UDP_TUNNEL_CSUM != (NETIF_F_GSO_UDP_TUNNEL_CSUM >> NETIF_F_GSO2_SHIFT));
 +	BUILD_BUG_ON(SKB_GSO_PARTIAL != (NETIF_F_GSO_PARTIAL >> NETIF_F_GSO2_SHIFT));
 +	BUILD_BUG_ON(SKB_GSO_SCTP    != (NETIF_F_GSO_SCTP >> NETIF_F_GSO2_SHIFT));
 +	BUILD_BUG_ON(SKB_GSO_TCP_FIXEDID != (NETIF_F_TSO_MANGLEID >> NETIF_F_GSO2_SHIFT));
++=======
+ 	BUILD_BUG_ON(SKB_GSO_UDP_TUNNEL_CSUM != (NETIF_F_GSO_UDP_TUNNEL_CSUM >> NETIF_F_GSO_SHIFT));
+ 	BUILD_BUG_ON(SKB_GSO_TUNNEL_REMCSUM != (NETIF_F_GSO_TUNNEL_REMCSUM >> NETIF_F_GSO_SHIFT));
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  
  	return (features & feature) == feature;
  }
diff --cc include/linux/skbuff.h
index 7b6fa7405c56,53f4f6c93356..000000000000
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@@ -506,32 -362,19 +506,36 @@@ enum 
  
  	SKB_GSO_GRE = 1 << 6,
  
 -	SKB_GSO_GRE_CSUM = 1 << 7,
 +	SKB_GSO_IPIP = 1 << 7,
 +
 +	SKB_GSO_SIT = 1 << 8,
 +
 +	SKB_GSO_UDP_TUNNEL = 1 << 9,
  
 -	SKB_GSO_IPIP = 1 << 8,
 +	SKB_GSO_MPLS = 1 << 10,
  
 -	SKB_GSO_SIT = 1 << 9,
 +	/* GSO_MASK2, see netdev_features.h */
 +	SKB_GSO_GRE_CSUM = 1 << 11,
  
 -	SKB_GSO_UDP_TUNNEL = 1 << 10,
++<<<<<<< HEAD
 +	SKB_GSO_UDP_TUNNEL_CSUM = 1 << 12,
  
 -	SKB_GSO_UDP_TUNNEL_CSUM = 1 << 11,
 +	SKB_GSO_PARTIAL = 1 << 13,
  
 +	SKB_GSO_SCTP = 1 << 14,
 +
 +	SKB_GSO_TCP_FIXEDID = 1 << 15,
++=======
+ 	SKB_GSO_TUNNEL_REMCSUM = 1 << 12,
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  };
  
 +/* NETIF_F_GSO flags are no longer part of a single range */
 +#define SKB_GSO1_MASK (SKB_GSO_GRE_CSUM - 1)
 +#define SKB_GSO2_MASK (SKB_GSO_GRE_CSUM|SKB_GSO_UDP_TUNNEL_CSUM|\
 +		       SKB_GSO_PARTIAL|SKB_GSO_SCTP|\
 +		       SKB_GSO_TCP_FIXEDID)
 +
  #if BITS_PER_LONG > 32
  #define NET_SKBUFF_DATA_USES_OFFSET 1
  #endif
diff --cc net/core/ethtool.c
index b69d0a7f5626,b0f84f5ddda8..000000000000
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@@ -87,13 -84,9 +87,16 @@@ static const char netdev_features_strin
  	[NETIF_F_GSO_IPIP_BIT] =	 "tx-ipip-segmentation",
  	[NETIF_F_GSO_SIT_BIT] =		 "tx-sit-segmentation",
  	[NETIF_F_GSO_UDP_TUNNEL_BIT] =	 "tx-udp_tnl-segmentation",
++<<<<<<< HEAD
 +	[NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT] = "tx-udp_tnl-csum-segmentation",
 +	[NETIF_F_GSO_MPLS_BIT] =	 "tx-mpls-segmentation",
 +	[NETIF_F_GSO_SCTP_BIT] =	 "tx-sctp-segmentation",
 +	[NETIF_F_GSO_PARTIAL_BIT] =	 "tx-gso-partial",
++=======
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  
  	[NETIF_F_FCOE_CRC_BIT] =         "tx-checksum-fcoe-crc",
 -	[NETIF_F_SCTP_CSUM_BIT] =        "tx-checksum-sctp",
 +	[NETIF_F_SCTP_CRC_BIT] =        "tx-checksum-sctp",
  	[NETIF_F_FCOE_MTU_BIT] =         "fcoe-mtu",
  	[NETIF_F_NTUPLE_BIT] =           "rx-ntuple-filter",
  	[NETIF_F_RXHASH_BIT] =           "rx-hashing",
diff --cc net/ipv4/af_inet.c
index 5ce6df8d5afd,3a096bb2d596..000000000000
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@@ -1217,6 -1210,22 +1217,25 @@@ static struct sk_buff *inet_gso_segment
  	int ihl;
  	int id;
  
++<<<<<<< HEAD
++=======
+ 	if (unlikely(skb_shinfo(skb)->gso_type &
+ 		     ~(SKB_GSO_TCPV4 |
+ 		       SKB_GSO_UDP |
+ 		       SKB_GSO_DODGY |
+ 		       SKB_GSO_TCP_ECN |
+ 		       SKB_GSO_GRE |
+ 		       SKB_GSO_GRE_CSUM |
+ 		       SKB_GSO_IPIP |
+ 		       SKB_GSO_SIT |
+ 		       SKB_GSO_TCPV6 |
+ 		       SKB_GSO_UDP_TUNNEL |
+ 		       SKB_GSO_UDP_TUNNEL_CSUM |
+ 		       SKB_GSO_TUNNEL_REMCSUM |
+ 		       0)))
+ 		goto out;
+ 
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  	skb_reset_network_header(skb);
  	nhoff = skb_network_header(skb) - skb_mac_header(skb);
  	if (unlikely(!pskb_may_pull(skb, sizeof(*iph))))
diff --cc net/ipv4/tcp_offload.c
index 0a5530fd3b51,9d7930ba8e0f..000000000000
--- a/net/ipv4/tcp_offload.c
+++ b/net/ipv4/tcp_offload.c
@@@ -68,6 -83,23 +68,26 @@@ struct sk_buff *tcp_gso_segment(struct 
  
  	if (skb_gso_ok(skb, features | NETIF_F_GSO_ROBUST)) {
  		/* Packet is from an untrusted source, reset gso_segs. */
++<<<<<<< HEAD
++=======
+ 		int type = skb_shinfo(skb)->gso_type;
+ 
+ 		if (unlikely(type &
+ 			     ~(SKB_GSO_TCPV4 |
+ 			       SKB_GSO_DODGY |
+ 			       SKB_GSO_TCP_ECN |
+ 			       SKB_GSO_TCPV6 |
+ 			       SKB_GSO_GRE |
+ 			       SKB_GSO_GRE_CSUM |
+ 			       SKB_GSO_IPIP |
+ 			       SKB_GSO_SIT |
+ 			       SKB_GSO_UDP_TUNNEL |
+ 			       SKB_GSO_UDP_TUNNEL_CSUM |
+ 			       SKB_GSO_TUNNEL_REMCSUM |
+ 			       0) ||
+ 			     !(type & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6))))
+ 			goto out;
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  
  		skb_shinfo(skb)->gso_segs = DIV_ROUND_UP(skb->len, mss);
  
diff --cc net/ipv4/udp_offload.c
index 144290d87115,d3e537ef6b7f..000000000000
--- a/net/ipv4/udp_offload.c
+++ b/net/ipv4/udp_offload.c
@@@ -210,6 -200,16 +210,19 @@@ static struct sk_buff *udp4_ufo_fragmen
  
  	if (skb_gso_ok(skb, features | NETIF_F_GSO_ROBUST)) {
  		/* Packet is from an untrusted source, reset gso_segs. */
++<<<<<<< HEAD
++=======
+ 		int type = skb_shinfo(skb)->gso_type;
+ 
+ 		if (unlikely(type & ~(SKB_GSO_UDP | SKB_GSO_DODGY |
+ 				      SKB_GSO_UDP_TUNNEL |
+ 				      SKB_GSO_UDP_TUNNEL_CSUM |
+ 				      SKB_GSO_TUNNEL_REMCSUM |
+ 				      SKB_GSO_IPIP |
+ 				      SKB_GSO_GRE | SKB_GSO_GRE_CSUM) ||
+ 			     !(type & (SKB_GSO_UDP))))
+ 			goto out;
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  
  		skb_shinfo(skb)->gso_segs = DIV_ROUND_UP(skb->len, mss);
  
diff --cc net/ipv6/ip6_offload.c
index 5318c8e6dfee,fd76ce938c32..000000000000
--- a/net/ipv6/ip6_offload.c
+++ b/net/ipv6/ip6_offload.c
@@@ -66,7 -67,21 +66,25 @@@ static struct sk_buff *ipv6_gso_segment
  	int offset = 0;
  	bool encap, udpfrag;
  	int nhoff;
++<<<<<<< HEAD
 +	bool gso_partial;
++=======
+ 
+ 	if (unlikely(skb_shinfo(skb)->gso_type &
+ 		     ~(SKB_GSO_UDP |
+ 		       SKB_GSO_DODGY |
+ 		       SKB_GSO_TCP_ECN |
+ 		       SKB_GSO_GRE |
+ 		       SKB_GSO_GRE_CSUM |
+ 		       SKB_GSO_IPIP |
+ 		       SKB_GSO_SIT |
+ 		       SKB_GSO_UDP_TUNNEL |
+ 		       SKB_GSO_UDP_TUNNEL_CSUM |
+ 		       SKB_GSO_TUNNEL_REMCSUM |
+ 		       SKB_GSO_TCPV6 |
+ 		       0)))
+ 		goto out;
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  
  	skb_reset_network_header(skb);
  	nhoff = skb_network_header(skb) - skb_mac_header(skb);
diff --cc net/ipv6/udp_offload.c
index 5f0c5b8c306e,b6aa8ed18257..000000000000
--- a/net/ipv6/udp_offload.c
+++ b/net/ipv6/udp_offload.c
@@@ -37,6 -36,19 +37,22 @@@ static struct sk_buff *udp6_ufo_fragmen
  
  	if (skb_gso_ok(skb, features | NETIF_F_GSO_ROBUST)) {
  		/* Packet is from an untrusted source, reset gso_segs. */
++<<<<<<< HEAD
++=======
+ 		int type = skb_shinfo(skb)->gso_type;
+ 
+ 		if (unlikely(type & ~(SKB_GSO_UDP |
+ 				      SKB_GSO_DODGY |
+ 				      SKB_GSO_UDP_TUNNEL |
+ 				      SKB_GSO_UDP_TUNNEL_CSUM |
+ 				      SKB_GSO_TUNNEL_REMCSUM |
+ 				      SKB_GSO_GRE |
+ 				      SKB_GSO_GRE_CSUM |
+ 				      SKB_GSO_IPIP |
+ 				      SKB_GSO_SIT) ||
+ 			     !(type & (SKB_GSO_UDP))))
+ 			goto out;
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  
  		skb_shinfo(skb)->gso_segs = DIV_ROUND_UP(skb->len, mss);
  
diff --cc net/mpls/mpls_gso.c
index 6d49384bab3c,ca27837974fe..000000000000
--- a/net/mpls/mpls_gso.c
+++ b/net/mpls/mpls_gso.c
@@@ -26,6 -26,17 +26,20 @@@ static struct sk_buff *mpls_gso_segment
  	netdev_features_t mpls_features;
  	__be16 mpls_protocol;
  
++<<<<<<< HEAD
++=======
+ 	if (unlikely(skb_shinfo(skb)->gso_type &
+ 				~(SKB_GSO_TCPV4 |
+ 				  SKB_GSO_TCPV6 |
+ 				  SKB_GSO_UDP |
+ 				  SKB_GSO_DODGY |
+ 				  SKB_GSO_TCP_ECN |
+ 				  SKB_GSO_GRE |
+ 				  SKB_GSO_GRE_CSUM |
+ 				  SKB_GSO_IPIP)))
+ 		goto out;
+ 
++>>>>>>> 59b93b41e7fa (net: Remove MPLS GSO feature.)
  	/* Setup inner SKB. */
  	mpls_protocol = skb->protocol;
  	skb->protocol = skb->inner_protocol;
* Unmerged path include/linux/netdev_features.h
* Unmerged path include/linux/netdevice.h
* Unmerged path include/linux/skbuff.h
* Unmerged path net/core/ethtool.c
* Unmerged path net/ipv4/af_inet.c
* Unmerged path net/ipv4/tcp_offload.c
* Unmerged path net/ipv4/udp_offload.c
* Unmerged path net/ipv6/ip6_offload.c
* Unmerged path net/ipv6/udp_offload.c
* Unmerged path net/mpls/mpls_gso.c
