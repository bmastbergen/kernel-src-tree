qla2xxx: Enable Target counters in DebugFS.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Enable Target counters in DebugFS (Himanshu Madhani) [1327621]
Rebuild_FUZZ: 98.82%
commit-author Himanshu Madhani <himanshu.madhani@qlogic.com>
commit ce1025cd4b8eb7afe07c3625f2ad080d8bee7cc4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ce1025cd.failed

Following counters are added in target mode to help debugging efforts.

Target Counters

qla_core_sbt_cmd = 0
qla_core_ret_sta_ctio = 0
qla_core_ret_ctio = 0
core_qla_que_buf = 0
core_qla_snd_status = 0
core_qla_free_cmd = 0
num alloc iocb failed = 0
num term exchange sent = 0
num Q full sent = 0

	Signed-off-by: Himanshu Madhani <himanshu.madhani@qlogic.com>
	Signed-off-by: Giridhar Malavali <giridhar.malavali@qlogic.com>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit ce1025cd4b8eb7afe07c3625f2ad080d8bee7cc4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_dbg.c
#	drivers/scsi/qla2xxx/qla_def.h
#	drivers/scsi/qla2xxx/qla_target.c
#	drivers/scsi/qla2xxx/tcm_qla2xxx.c
diff --cc drivers/scsi/qla2xxx/qla_dbg.c
index 866e7a991a8e,4d4d7840a8c8..000000000000
--- a/drivers/scsi/qla2xxx/qla_dbg.c
+++ b/drivers/scsi/qla2xxx/qla_dbg.c
@@@ -61,18 -59,14 +61,23 @@@
   * |                              |                    | 0xb13a,0xb142  |
   * |                              |                    | 0xb13c-0xb140  |
   * |                              |                    | 0xb149		|
++<<<<<<< HEAD
 + * | MultiQ                       |       0xc010       |		|
 + * | Misc                         |       0xd300       | 0xd016-0xd017	|
 + * |                              |                    | 0xd021,0xd024	|
 + * |                              |                    | 0xd025,0xd029	|
 + * |                              |                    | 0xd02a,0xd02e	|
 + * |                              |                    | 0xd031-0xd0ff	|
++=======
+  * | MultiQ                       |       0xc00c       |		|
+  * | Misc                         |       0xd301       | 0xd031-0xd0ff	|
++>>>>>>> ce1025cd4b8e (qla2xxx: Enable Target counters in DebugFS.)
   * |                              |                    | 0xd101-0xd1fe	|
 - * |                              |                    | 0xd214-0xd2fe	|
 - * | Target Mode		  |	  0xe080       |		|
 - * | Target Mode Management	  |	  0xf096       | 0xf002		|
 + * |                              |                    | 0xd213-0xd2fe	|
 + * | Target Mode		  |	  0xe070       | 0xe021		|
 + * | Target Mode Management	  |	  0xf072       | 0xf002-0xf003	|
   * |                              |                    | 0xf046-0xf049  |
 - * | Target Mode Task Management  |	  0x1000d      |		|
 + * | Target Mode Task Management  |	  0x1000b      |		|
   * ----------------------------------------------------------------------
   */
  
diff --cc drivers/scsi/qla2xxx/qla_def.h
index 9cf0dee11112,f63de3576609..000000000000
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@@ -3695,20 -3665,9 +3709,24 @@@ typedef struct scsi_qla_host 
  
  	atomic_t	vref_count;
  	struct qla8044_reset_template reset_tmplt;
++<<<<<<< HEAD
 +	uint16_t	bbcr;
 +	wait_queue_head_t vref_waitq;
++=======
+ 	struct qla_tgt_counters tgt_counters;
++>>>>>>> ce1025cd4b8e (qla2xxx: Enable Target counters in DebugFS.)
  } scsi_qla_host_t;
  
 +struct qla27xx_image_status {
 +	uint8_t image_status_mask;
 +	uint16_t generation_number;
 +	uint8_t reserved[3];
 +	uint8_t ver_minor;
 +	uint8_t ver_major;
 +	uint32_t checksum;
 +	uint32_t signature;
 +} __packed;
 +
  #define SET_VP_IDX	1
  #define SET_AL_PA	2
  #define RESET_VP_IDX	3
diff --cc drivers/scsi/qla2xxx/qla_target.c
index 4e0d4c3c5146,f404e48329a9..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.c
+++ b/drivers/scsi/qla2xxx/qla_target.c
@@@ -2046,6 -2510,26 +2046,29 @@@ int qlt_xmit_response(struct qla_tgt_cm
  
  	spin_lock_irqsave(&ha->hardware_lock, flags);
  
++<<<<<<< HEAD
++=======
+ 	if (xmit_type == QLA_TGT_XMIT_STATUS)
+ 		vha->tgt_counters.core_qla_snd_status++;
+ 	else
+ 		vha->tgt_counters.core_qla_que_buf++;
+ 
+ 	if (qla2x00_reset_active(vha) || cmd->reset_count != ha->chip_reset) {
+ 		/*
+ 		 * Either a chip reset is active or this request was from
+ 		 * previous life, just abort the processing.
+ 		 */
+ 		cmd->state = QLA_TGT_STATE_PROCESSED;
+ 		qlt_abort_cmd_on_host_reset(cmd->vha, cmd);
+ 		ql_dbg(ql_dbg_async, vha, 0xe101,
+ 			"RESET-RSP active/old-count/new-count = %d/%d/%d.\n",
+ 			qla2x00_reset_active(vha), cmd->reset_count,
+ 			ha->chip_reset);
+ 		spin_unlock_irqrestore(&ha->hardware_lock, flags);
+ 		return 0;
+ 	}
+ 
++>>>>>>> ce1025cd4b8e (qla2xxx: Enable Target counters in DebugFS.)
  	/* Does F/W have an IOCBs for this request */
  	res = qlt_check_reserve_free_req(vha, full_req_cnt);
  	if (unlikely(res))
@@@ -3604,12 -4916,13 +3628,13 @@@ static void qlt_send_busy(struct scsi_q
  
  	pkt = (request_t *)qla2x00_alloc_iocbs(vha, NULL);
  	if (!pkt) {
 -		ql_dbg(ql_dbg_io, vha, 0x3063,
 +		ql_dbg(ql_dbg_tgt_mgt, vha, 0xf06e,
  		    "qla_target(%d): %s failed: unable to allocate "
  		    "request packet", vha->vp_idx, __func__);
 -		return -ENOMEM;
 +		return;
  	}
  
+ 	vha->tgt_counters.num_q_full_sent++;
  	pkt->entry_count = 1;
  	pkt->handle = QLA_TGT_SKIP_HANDLE | CTIO_COMPLETION_HANDLE_MARK;
  
diff --cc drivers/scsi/qla2xxx/tcm_qla2xxx.c
index 8e939971fec1,e7951f3c1b58..000000000000
--- a/drivers/scsi/qla2xxx/tcm_qla2xxx.c
+++ b/drivers/scsi/qla2xxx/tcm_qla2xxx.c
@@@ -403,6 -280,12 +403,15 @@@ static void tcm_qla2xxx_complete_free(s
  {
  	struct qla_tgt_cmd *cmd = container_of(work, struct qla_tgt_cmd, work);
  
++<<<<<<< HEAD
++=======
+ 	cmd->cmd_in_wq = 0;
+ 
+ 	WARN_ON(cmd->cmd_flags &  BIT_16);
+ 
+ 	cmd->vha->tgt_counters.qla_core_ret_sta_ctio++;
+ 	cmd->cmd_flags |= BIT_16;
++>>>>>>> ce1025cd4b8e (qla2xxx: Enable Target counters in DebugFS.)
  	transport_generic_free_cmd(&cmd->se_cmd, 0);
  }
  
@@@ -413,6 -296,8 +422,11 @@@
   */
  static void tcm_qla2xxx_free_cmd(struct qla_tgt_cmd *cmd)
  {
++<<<<<<< HEAD
++=======
+ 	cmd->vha->tgt_counters.core_qla_free_cmd++;
+ 	cmd->cmd_in_wq = 1;
++>>>>>>> ce1025cd4b8e (qla2xxx: Enable Target counters in DebugFS.)
  	INIT_WORK(&cmd->work, tcm_qla2xxx_complete_free);
  	queue_work(tcm_qla2xxx_free_wq, &cmd->work);
  }
@@@ -605,6 -470,9 +620,12 @@@ static void tcm_qla2xxx_handle_data_wor
  	 * Ensure that the complete FCP WRITE payload has been received.
  	 * Otherwise return an exception via CHECK_CONDITION status.
  	 */
++<<<<<<< HEAD
++=======
+ 	cmd->cmd_in_wq = 0;
+ 	cmd->cmd_flags |= BIT_11;
+ 	cmd->vha->tgt_counters.qla_core_ret_ctio++;
++>>>>>>> ce1025cd4b8e (qla2xxx: Enable Target counters in DebugFS.)
  	if (!cmd->write_data_transferred) {
  		/*
  		 * Check if se_cmd has already been aborted via LUN_RESET, and
* Unmerged path drivers/scsi/qla2xxx/qla_dbg.c
* Unmerged path drivers/scsi/qla2xxx/qla_def.h
diff --git a/drivers/scsi/qla2xxx/qla_dfs.c b/drivers/scsi/qla2xxx/qla_dfs.c
index 2ca39b8e7166..dcc8a17e3db6 100644
--- a/drivers/scsi/qla2xxx/qla_dfs.c
+++ b/drivers/scsi/qla2xxx/qla_dfs.c
@@ -12,6 +12,48 @@
 static struct dentry *qla2x00_dfs_root;
 static atomic_t qla2x00_dfs_root_count;
 
+static int
+qla_dfs_tgt_counters_show(struct seq_file *s, void *unused)
+{
+	struct scsi_qla_host *vha = s->private;
+
+	seq_puts(s, "Target Counters\n");
+	seq_printf(s, "qla_core_sbt_cmd = %lld\n",
+		vha->tgt_counters.qla_core_sbt_cmd);
+	seq_printf(s, "qla_core_ret_sta_ctio = %lld\n",
+		vha->tgt_counters.qla_core_ret_sta_ctio);
+	seq_printf(s, "qla_core_ret_ctio = %lld\n",
+		vha->tgt_counters.qla_core_ret_ctio);
+	seq_printf(s, "core_qla_que_buf = %lld\n",
+		vha->tgt_counters.core_qla_que_buf);
+	seq_printf(s, "core_qla_snd_status = %lld\n",
+		vha->tgt_counters.core_qla_snd_status);
+	seq_printf(s, "core_qla_free_cmd = %lld\n",
+		vha->tgt_counters.core_qla_free_cmd);
+	seq_printf(s, "num alloc iocb failed = %lld\n",
+		vha->tgt_counters.num_alloc_iocb_failed);
+	seq_printf(s, "num term exchange sent = %lld\n",
+		vha->tgt_counters.num_term_xchg_sent);
+	seq_printf(s, "num Q full sent = %lld\n",
+		vha->tgt_counters.num_q_full_sent);
+
+	return 0;
+}
+
+static int
+qla_dfs_tgt_counters_open(struct inode *inode, struct file *file)
+{
+	struct scsi_qla_host *vha = inode->i_private;
+	return single_open(file, qla_dfs_tgt_counters_show, vha);
+}
+
+static const struct file_operations dfs_tgt_counters_ops = {
+	.open           = qla_dfs_tgt_counters_open,
+	.read           = seq_read,
+	.llseek         = seq_lseek,
+	.release        = single_release,
+};
+
 static int
 qla2x00_dfs_fce_show(struct seq_file *s, void *unused)
 {
@@ -146,6 +188,14 @@ create_dir:
 	atomic_inc(&qla2x00_dfs_root_count);
 
 create_nodes:
+	ha->dfs_tgt_counters = debugfs_create_file("tgt_counters", S_IRUSR,
+	    ha->dfs_dir, vha, &dfs_tgt_counters_ops);
+	if (!ha->dfs_tgt_counters) {
+		ql_log(ql_log_warn, vha, 0xd301,
+		    "Unable to create debugFS tgt_counters node.\n");
+		goto out;
+	}
+
 	ha->dfs_fce = debugfs_create_file("fce", S_IRUSR, ha->dfs_dir, vha,
 	    &dfs_fce_ops);
 	if (!ha->dfs_fce) {
@@ -161,6 +211,12 @@ int
 qla2x00_dfs_remove(scsi_qla_host_t *vha)
 {
 	struct qla_hw_data *ha = vha->hw;
+
+	if (ha->dfs_tgt_counters) {
+		debugfs_remove(ha->dfs_tgt_counters);
+		ha->dfs_tgt_counters = NULL;
+	}
+
 	if (ha->dfs_fce) {
 		debugfs_remove(ha->dfs_fce);
 		ha->dfs_fce = NULL;
diff --git a/drivers/scsi/qla2xxx/qla_iocb.c b/drivers/scsi/qla2xxx/qla_iocb.c
index 2aea13d9d71e..cb836d6a3367 100644
--- a/drivers/scsi/qla2xxx/qla_iocb.c
+++ b/drivers/scsi/qla2xxx/qla_iocb.c
@@ -2162,6 +2162,7 @@ skip_cmd_array:
 	}
 
 queuing_error:
+	vha->tgt_counters.num_alloc_iocb_failed++;
 	return pkt;
 }
 
* Unmerged path drivers/scsi/qla2xxx/qla_target.c
* Unmerged path drivers/scsi/qla2xxx/tcm_qla2xxx.c
