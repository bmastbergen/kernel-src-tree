x86/boot/KASLR: Switch to pass struct mem_vector to process_e820_entry()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Baoquan He <bhe@redhat.com>
commit 87891b01b54210763117f0a67b022cd94de6cd13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/87891b01.failed

This makes process_e820_entry() be able to process any kind of memory
region.

	Signed-off-by: Baoquan He <bhe@redhat.com>
	Acked-by: Kees Cook <keescook@chromium.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: fanc.fnst@cn.fujitsu.com
	Cc: izumi.taku@jp.fujitsu.com
	Cc: matt@codeblueprint.co.uk
	Cc: thgarnie@google.com
Link: http://lkml.kernel.org/r/1499603862-11516-3-git-send-email-bhe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 87891b01b54210763117f0a67b022cd94de6cd13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/kaslr.c
diff --cc arch/x86/boot/compressed/kaslr.c
index b93f968ac8d4,36ff9f729c43..000000000000
--- a/arch/x86/boot/compressed/kaslr.c
+++ b/arch/x86/boot/compressed/kaslr.c
@@@ -479,21 -479,17 +479,29 @@@ static unsigned long slots_fetch_random
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void process_e820_entry(struct e820entry *entry,
++=======
+ static void process_e820_entry(struct mem_vector *entry,
++>>>>>>> 87891b01b542 (x86/boot/KASLR: Switch to pass struct mem_vector to process_e820_entry())
  			       unsigned long minimum,
  			       unsigned long image_size)
  {
  	struct mem_vector region, overlap;
  	struct slot_area slot_area;
  	unsigned long start_orig, end;
++<<<<<<< HEAD
 +	struct e820entry cur_entry;
 +
 +	/* Skip non-RAM entries. */
 +	if (entry->type != E820_RAM)
 +		return;
++=======
+ 	struct mem_vector cur_entry;
++>>>>>>> 87891b01b542 (x86/boot/KASLR: Switch to pass struct mem_vector to process_e820_entry())
  
  	/* On 32-bit, ignore entries entirely above our maximum. */
- 	if (IS_ENABLED(CONFIG_X86_32) && entry->addr >= KERNEL_IMAGE_SIZE)
+ 	if (IS_ENABLED(CONFIG_X86_32) && entry->start >= KERNEL_IMAGE_SIZE)
  		return;
  
  	/* Ignore entries entirely below our minimum. */
@@@ -562,6 -558,29 +570,32 @@@
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void process_e820_entries(unsigned long minimum,
+ 				 unsigned long image_size)
+ {
+ 	int i;
+ 	struct mem_vector region;
+ 	struct boot_e820_entry *entry;
+ 
+ 	/* Verify potential e820 positions, appending to slots list. */
+ 	for (i = 0; i < boot_params->e820_entries; i++) {
+ 		entry = &boot_params->e820_table[i];
+ 		/* Skip non-RAM entries. */
+ 		if (entry->type != E820_TYPE_RAM)
+ 			continue;
+ 		region.start = entry->addr;
+ 		region.size = entry->size;
+ 		process_e820_entry(&region, minimum, image_size);
+ 		if (slot_area_index == MAX_SLOT_AREA) {
+ 			debug_putstr("Aborted e820 scan (slot_areas full)!\n");
+ 			break;
+ 		}
+ 	}
+ }
+ 
++>>>>>>> 87891b01b542 (x86/boot/KASLR: Switch to pass struct mem_vector to process_e820_entry())
  static unsigned long find_random_phys_addr(unsigned long minimum,
  					   unsigned long image_size)
  {
* Unmerged path arch/x86/boot/compressed/kaslr.c
