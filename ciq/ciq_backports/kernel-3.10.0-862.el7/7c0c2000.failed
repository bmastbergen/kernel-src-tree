ASoC: Add support for Maxim Integrated MAX98927 Amplifier

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: asoc: Add support for Maxim Integrated MAX98927 Amplifier (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 95.00%
commit-author Ryan Lee <ryans.lee@maximintegrated.com>
commit 7c0c2000716e64151b3c0c62026c18f31537ebe9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7c0c2000.failed

	Signed-off-by: Ryan Lee <ryans.lee@maximintegrated.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit 7c0c2000716e64151b3c0c62026c18f31537ebe9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/codecs/Kconfig
#	sound/soc/codecs/Makefile
diff --cc sound/soc/codecs/Kconfig
index bec1671f0a76,65e31ab88280..000000000000
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@@ -13,11 -13,106 +13,27 @@@ menu "CODEC drivers
  config SND_SOC_ALL_CODECS
  	tristate "Build all ASoC CODEC drivers"
  	depends on COMPILE_TEST
 -	select SND_SOC_88PM860X if MFD_88PM860X
 -	select SND_SOC_L3
 -	select SND_SOC_AB8500_CODEC if ABX500_CORE
 -	select SND_SOC_AC97_CODEC
 -	select SND_SOC_AD1836 if SPI_MASTER
 -	select SND_SOC_AD193X_SPI if SPI_MASTER
 -	select SND_SOC_AD193X_I2C if I2C
 -	select SND_SOC_AD1980 if SND_SOC_AC97_BUS
 -	select SND_SOC_AD73311
 -	select SND_SOC_ADAU1373 if I2C
 -	select SND_SOC_ADAU1761_I2C if I2C
 -	select SND_SOC_ADAU1761_SPI if SPI
 -	select SND_SOC_ADAU1781_I2C if I2C
 -	select SND_SOC_ADAU1781_SPI if SPI
 -	select SND_SOC_ADAV801 if SPI_MASTER
 -	select SND_SOC_ADAV803 if I2C
 -	select SND_SOC_ADAU1977_SPI if SPI_MASTER
 -	select SND_SOC_ADAU1977_I2C if I2C
 -	select SND_SOC_ADAU1701 if I2C
 -	select SND_SOC_ADAU7002
 -	select SND_SOC_ADS117X
 -	select SND_SOC_AK4104 if SPI_MASTER
 -	select SND_SOC_AK4535 if I2C
 -	select SND_SOC_AK4554
 -	select SND_SOC_AK4613 if I2C
 -	select SND_SOC_AK4641 if I2C
 -	select SND_SOC_AK4642 if I2C
 -	select SND_SOC_AK4671 if I2C
 -	select SND_SOC_AK5386
 -	select SND_SOC_ALC5623 if I2C
 -	select SND_SOC_ALC5632 if I2C
 -	select SND_SOC_BT_SCO
 -	select SND_SOC_CQ0093VC if MFD_DAVINCI_VOICECODEC
 -	select SND_SOC_CS35L32 if I2C
 -	select SND_SOC_CS35L33 if I2C
 -	select SND_SOC_CS35L34 if I2C
 -	select SND_SOC_CS42L42 if I2C
 -	select SND_SOC_CS42L51_I2C if I2C
 -	select SND_SOC_CS42L52 if I2C && INPUT
 -	select SND_SOC_CS42L56 if I2C && INPUT
 -	select SND_SOC_CS42L73 if I2C
 -	select SND_SOC_CS4265 if I2C
 -	select SND_SOC_CS4270 if I2C
 -	select SND_SOC_CS4271_I2C if I2C
 -	select SND_SOC_CS4271_SPI if SPI_MASTER
 -	select SND_SOC_CS42XX8_I2C if I2C
 -	select SND_SOC_CS4349 if I2C
 -	select SND_SOC_CS47L24 if MFD_CS47L24
 -	select SND_SOC_CS53L30 if I2C
 -	select SND_SOC_CX20442 if TTY
 -	select SND_SOC_DA7210 if SND_SOC_I2C_AND_SPI
 -	select SND_SOC_DA7213 if I2C
 -	select SND_SOC_DA7218 if I2C
 -	select SND_SOC_DA7219 if I2C
 -	select SND_SOC_DA732X if I2C
 -	select SND_SOC_DA9055 if I2C
  	select SND_SOC_DMIC
 -	select SND_SOC_ES8328_SPI if SPI_MASTER
 -	select SND_SOC_ES8328_I2C if I2C
 -	select SND_SOC_GTM601
  	select SND_SOC_HDAC_HDMI
 -	select SND_SOC_ICS43432
 -	select SND_SOC_INNO_RK3036
 -	select SND_SOC_ISABELLE if I2C
 -	select SND_SOC_JZ4740_CODEC
 -	select SND_SOC_LM4857 if I2C
 -	select SND_SOC_LM49453 if I2C
 -	select SND_SOC_MAX98088 if I2C
  	select SND_SOC_MAX98090 if I2C
 -	select SND_SOC_MAX98095 if I2C
  	select SND_SOC_MAX98357A if GPIOLIB
++<<<<<<< HEAD
++=======
+ 	select SND_SOC_MAX98371 if I2C
+ 	select SND_SOC_MAX98504 if I2C
+ 	select SND_SOC_MAX9867 if I2C
+ 	select SND_SOC_MAX98925 if I2C
+ 	select SND_SOC_MAX98926 if I2C
+ 	select SND_SOC_MAX98927 if I2C
+ 	select SND_SOC_MAX9850 if I2C
+ 	select SND_SOC_MAX9860 if I2C
+ 	select SND_SOC_MAX9768 if I2C
+ 	select SND_SOC_MAX9877 if I2C
+ 	select SND_SOC_MC13783 if MFD_MC13XXX
+ 	select SND_SOC_ML26124 if I2C
+ 	select SND_SOC_NAU8810 if I2C
++>>>>>>> 7c0c2000716e (ASoC: Add support for Maxim Integrated MAX98927 Amplifier)
  	select SND_SOC_NAU8825 if I2C
 -	select SND_SOC_HDMI_CODEC
 -	select SND_SOC_PCM1681 if I2C
 -	select SND_SOC_PCM179X_I2C if I2C
 -	select SND_SOC_PCM179X_SPI if SPI_MASTER
 -	select SND_SOC_PCM3008
 -	select SND_SOC_PCM3168A_I2C if I2C
 -	select SND_SOC_PCM3168A_SPI if SPI_MASTER
 -	select SND_SOC_PCM5102A
 -	select SND_SOC_PCM512x_I2C if I2C
 -	select SND_SOC_PCM512x_SPI if SPI_MASTER
 -	select SND_SOC_RT286 if I2C
 -	select SND_SOC_RT298 if I2C
 -	select SND_SOC_RT5514 if I2C
 -	select SND_SOC_RT5616 if I2C
 -	select SND_SOC_RT5631 if I2C
  	select SND_SOC_RT5640 if I2C
  	select SND_SOC_RT5645 if I2C
  	select SND_SOC_RT5651 if I2C
@@@ -51,8 -567,107 +67,105 @@@ config SND_SOC_MAX9809
  config SND_SOC_MAX98357A
         tristate
  
++<<<<<<< HEAD
++=======
+ config SND_SOC_MAX98371
+        tristate
+ 
+ config SND_SOC_MAX98504
+ 	tristate "Maxim MAX98504 speaker amplifier"
+ 	depends on I2C
+ 
+ config SND_SOC_MAX9867
+ 	tristate
+ 
+ config SND_SOC_MAX98925
+        tristate
+ 
+ config SND_SOC_MAX98926
+ 	tristate
+ 
+ config SND_SOC_MAX98927
+ 	tristate "Maxim Integrated MAX98927 Speaker Amplifier"
+ 	depends on I2C
+ 
+ config SND_SOC_MAX9850
+ 	tristate
+ 
+ config SND_SOC_MAX9860
+ 	tristate "Maxim MAX9860 Mono Audio Voice Codec"
+ 	depends on I2C
+ 	select REGMAP_I2C
+ 
+ config SND_SOC_MSM8916_WCD_ANALOG
+ 	tristate "Qualcomm MSM8916 WCD Analog Codec"
+ 	depends on SPMI || COMPILE_TEST
+ 
+ config SND_SOC_MSM8916_WCD_DIGITAL
+ 	tristate "Qualcomm MSM8916 WCD DIGITAL Codec"
+ 
+ config SND_SOC_PCM1681
+ 	tristate "Texas Instruments PCM1681 CODEC"
+ 	depends on I2C
+ 
+ config SND_SOC_PCM179X
+ 	tristate
+ 
+ config SND_SOC_PCM179X_I2C
+ 	tristate "Texas Instruments PCM179X CODEC (I2C)"
+ 	depends on I2C
+ 	select SND_SOC_PCM179X
+ 	help
+ 	  Enable support for Texas Instruments PCM179x CODEC.
+ 	  Select this if your PCM179x is connected via an I2C bus.
+ 
+ config SND_SOC_PCM179X_SPI
+ 	tristate "Texas Instruments PCM179X CODEC (SPI)"
+ 	depends on SPI_MASTER
+ 	select SND_SOC_PCM179X
+ 	help
+ 	  Enable support for Texas Instruments PCM179x CODEC.
+ 	  Select this if your PCM179x is connected via an SPI bus.
+ 
+ config SND_SOC_PCM3008
+        tristate
+ 
+ config SND_SOC_PCM3168A
+ 	tristate
+ 
+ config SND_SOC_PCM3168A_I2C
+ 	tristate "Texas Instruments PCM3168A CODEC - I2C"
+ 	depends on I2C
+ 	select SND_SOC_PCM3168A
+ 	select REGMAP_I2C
+ 
+ config SND_SOC_PCM3168A_SPI
+ 	tristate "Texas Instruments PCM3168A CODEC - SPI"
+ 	depends on SPI_MASTER
+ 	select SND_SOC_PCM3168A
+ 	select REGMAP_SPI
+ 
+ config SND_SOC_PCM5102A
+ 	tristate
+ 
+ config SND_SOC_PCM512x
+ 	tristate
+ 
+ config SND_SOC_PCM512x_I2C
+ 	tristate "Texas Instruments PCM512x CODECs - I2C"
+ 	depends on I2C
+ 	select SND_SOC_PCM512x
+ 	select REGMAP_I2C
+ 
+ config SND_SOC_PCM512x_SPI
+ 	tristate "Texas Instruments PCM512x CODECs - SPI"
+ 	depends on SPI_MASTER
+ 	select SND_SOC_PCM512x
+ 	select REGMAP_SPI
+ 
++>>>>>>> 7c0c2000716e (ASoC: Add support for Maxim Integrated MAX98927 Amplifier)
  config SND_SOC_RL6231
  	tristate
 -	default y if SND_SOC_RT5514=y
 -	default y if SND_SOC_RT5616=y
  	default y if SND_SOC_RT5640=y
  	default y if SND_SOC_RT5645=y
  	default y if SND_SOC_RT5651=y
diff --cc sound/soc/codecs/Makefile
index 1f16972a45d6,64656c43200c..000000000000
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@@ -1,23 -1,340 +1,56 @@@
 -snd-soc-88pm860x-objs := 88pm860x-codec.o
 -snd-soc-ab8500-codec-objs := ab8500-codec.o
 -snd-soc-ac97-objs := ac97.o
 -snd-soc-ad1836-objs := ad1836.o
 -snd-soc-ad193x-objs := ad193x.o
 -snd-soc-ad193x-spi-objs := ad193x-spi.o
 -snd-soc-ad193x-i2c-objs := ad193x-i2c.o
 -snd-soc-ad1980-objs := ad1980.o
 -snd-soc-ad73311-objs := ad73311.o
 -snd-soc-adau-utils-objs := adau-utils.o
 -snd-soc-adau1373-objs := adau1373.o
 -snd-soc-adau1701-objs := adau1701.o
 -snd-soc-adau17x1-objs := adau17x1.o
 -snd-soc-adau1761-objs := adau1761.o
 -snd-soc-adau1761-i2c-objs := adau1761-i2c.o
 -snd-soc-adau1761-spi-objs := adau1761-spi.o
 -snd-soc-adau1781-objs := adau1781.o
 -snd-soc-adau1781-i2c-objs := adau1781-i2c.o
 -snd-soc-adau1781-spi-objs := adau1781-spi.o
 -snd-soc-adau1977-objs := adau1977.o
 -snd-soc-adau1977-spi-objs := adau1977-spi.o
 -snd-soc-adau1977-i2c-objs := adau1977-i2c.o
 -snd-soc-adau7002-objs := adau7002.o
 -snd-soc-adav80x-objs := adav80x.o
 -snd-soc-adav801-objs := adav801.o
 -snd-soc-adav803-objs := adav803.o
 -snd-soc-ads117x-objs := ads117x.o
 -snd-soc-ak4104-objs := ak4104.o
 -snd-soc-ak4535-objs := ak4535.o
 -snd-soc-ak4554-objs := ak4554.o
 -snd-soc-ak4613-objs := ak4613.o
 -snd-soc-ak4641-objs := ak4641.o
 -snd-soc-ak4642-objs := ak4642.o
 -snd-soc-ak4671-objs := ak4671.o
 -snd-soc-ak5386-objs := ak5386.o
 -snd-soc-arizona-objs := arizona.o
 -snd-soc-bt-sco-objs := bt-sco.o
 -snd-soc-cq93vc-objs := cq93vc.o
 -snd-soc-cs35l32-objs := cs35l32.o
 -snd-soc-cs35l33-objs := cs35l33.o
 -snd-soc-cs35l34-objs := cs35l34.o
 -snd-soc-cs42l42-objs := cs42l42.o
 -snd-soc-cs42l51-objs := cs42l51.o
 -snd-soc-cs42l51-i2c-objs := cs42l51-i2c.o
 -snd-soc-cs42l52-objs := cs42l52.o
 -snd-soc-cs42l56-objs := cs42l56.o
 -snd-soc-cs42l73-objs := cs42l73.o
 -snd-soc-cs4265-objs := cs4265.o
 -snd-soc-cs4270-objs := cs4270.o
 -snd-soc-cs4271-objs := cs4271.o
 -snd-soc-cs4271-i2c-objs := cs4271-i2c.o
 -snd-soc-cs4271-spi-objs := cs4271-spi.o
 -snd-soc-cs42xx8-objs := cs42xx8.o
 -snd-soc-cs42xx8-i2c-objs := cs42xx8-i2c.o
 -snd-soc-cs4349-objs := cs4349.o
 -snd-soc-cs47l24-objs := cs47l24.o
 -snd-soc-cs53l30-objs := cs53l30.o
 -snd-soc-cx20442-objs := cx20442.o
 -snd-soc-da7210-objs := da7210.o
 -snd-soc-da7213-objs := da7213.o
 -snd-soc-da7218-objs := da7218.o
 -snd-soc-da7219-objs := da7219.o da7219-aad.o
 -snd-soc-da732x-objs := da732x.o
 -snd-soc-da9055-objs := da9055.o
  snd-soc-dmic-objs := dmic.o
 -snd-soc-es8328-objs := es8328.o
 -snd-soc-es8328-i2c-objs := es8328-i2c.o
 -snd-soc-es8328-spi-objs := es8328-spi.o
 -snd-soc-gtm601-objs := gtm601.o
  snd-soc-hdac-hdmi-objs := hdac_hdmi.o
 -snd-soc-ics43432-objs := ics43432.o
 -snd-soc-inno-rk3036-objs := inno_rk3036.o
 -snd-soc-isabelle-objs := isabelle.o
 -snd-soc-jz4740-codec-objs := jz4740.o
 -snd-soc-l3-objs := l3.o
 -snd-soc-lm4857-objs := lm4857.o
 -snd-soc-lm49453-objs := lm49453.o
 -snd-soc-max9768-objs := max9768.o
 -snd-soc-max98088-objs := max98088.o
  snd-soc-max98090-objs := max98090.o
++<<<<<<< HEAD
++=======
+ snd-soc-max98095-objs := max98095.o
+ snd-soc-max98357a-objs := max98357a.o
+ snd-soc-max98371-objs := max98371.o
+ snd-soc-max9867-objs := max9867.o
+ snd-soc-max98925-objs := max98925.o
+ snd-soc-max98926-objs := max98926.o
+ snd-soc-max98927-objs := max98927.o
+ snd-soc-max9850-objs := max9850.o
+ snd-soc-max9860-objs := max9860.o
+ snd-soc-mc13783-objs := mc13783.o
+ snd-soc-ml26124-objs := ml26124.o
+ snd-soc-msm8916-analog-objs := msm8916-wcd-analog.o
+ snd-soc-msm8916-digital-objs := msm8916-wcd-digital.o
+ snd-soc-nau8810-objs := nau8810.o
++>>>>>>> 7c0c2000716e (ASoC: Add support for Maxim Integrated MAX98927 Amplifier)
  snd-soc-nau8825-objs := nau8825.o
 -snd-soc-hdmi-codec-objs := hdmi-codec.o
 -snd-soc-pcm1681-objs := pcm1681.o
 -snd-soc-pcm179x-codec-objs := pcm179x.o
 -snd-soc-pcm179x-i2c-objs := pcm179x-i2c.o
 -snd-soc-pcm179x-spi-objs := pcm179x-spi.o
 -snd-soc-pcm3008-objs := pcm3008.o
 -snd-soc-pcm3168a-objs := pcm3168a.o
 -snd-soc-pcm3168a-i2c-objs := pcm3168a-i2c.o
 -snd-soc-pcm3168a-spi-objs := pcm3168a-spi.o
 -snd-soc-pcm5102a-objs := pcm5102a.o
 -snd-soc-pcm512x-objs := pcm512x.o
 -snd-soc-pcm512x-i2c-objs := pcm512x-i2c.o
 -snd-soc-pcm512x-spi-objs := pcm512x-spi.o
  snd-soc-rl6231-objs := rl6231.o
  snd-soc-rl6347a-objs := rl6347a.o
  snd-soc-rt286-objs := rt286.o
  snd-soc-rt5640-objs := rt5640.o
  snd-soc-rt5645-objs := rt5645.o
  snd-soc-rt5651-objs := rt5651.o
 -snd-soc-rt5659-objs := rt5659.o
 -snd-soc-rt5660-objs := rt5660.o
 -snd-soc-rt5665-objs := rt5665.o
 -snd-soc-rt5663-objs := rt5663.o
  snd-soc-rt5670-objs := rt5670.o
 -snd-soc-rt5677-objs := rt5677.o
 -snd-soc-rt5677-spi-objs := rt5677-spi.o
 -snd-soc-sgtl5000-objs := sgtl5000.o
 -snd-soc-alc5623-objs := alc5623.o
 -snd-soc-alc5632-objs := alc5632.o
 -snd-soc-sigmadsp-objs := sigmadsp.o
 -snd-soc-sigmadsp-i2c-objs := sigmadsp-i2c.o
 -snd-soc-sigmadsp-regmap-objs := sigmadsp-regmap.o
 -snd-soc-si476x-objs := si476x.o
 -snd-soc-sirf-audio-codec-objs := sirf-audio-codec.o
  snd-soc-sn95031-objs := sn95031.o
 -snd-soc-spdif-tx-objs := spdif_transmitter.o
 -snd-soc-spdif-rx-objs := spdif_receiver.o
  snd-soc-ssm2518-objs := ssm2518.o
 -snd-soc-ssm2602-objs := ssm2602.o
 -snd-soc-ssm2602-spi-objs := ssm2602-spi.o
 -snd-soc-ssm2602-i2c-objs := ssm2602-i2c.o
  snd-soc-ssm4567-objs := ssm4567.o
 -snd-soc-sta32x-objs := sta32x.o
 -snd-soc-sta350-objs := sta350.o
 -snd-soc-sta529-objs := sta529.o
 -snd-soc-stac9766-objs := stac9766.o
 -snd-soc-sti-sas-objs := sti-sas.o
 -snd-soc-tas5086-objs := tas5086.o
 -snd-soc-tas571x-objs := tas571x.o
 -snd-soc-tas5720-objs := tas5720.o
 -snd-soc-tfa9879-objs := tfa9879.o
 -snd-soc-tlv320aic23-objs := tlv320aic23.o
 -snd-soc-tlv320aic23-i2c-objs := tlv320aic23-i2c.o
 -snd-soc-tlv320aic23-spi-objs := tlv320aic23-spi.o
 -snd-soc-tlv320aic26-objs := tlv320aic26.o
 -snd-soc-tlv320aic31xx-objs := tlv320aic31xx.o
 -snd-soc-tlv320aic32x4-objs := tlv320aic32x4.o
 -snd-soc-tlv320aic32x4-i2c-objs := tlv320aic32x4-i2c.o
 -snd-soc-tlv320aic32x4-spi-objs := tlv320aic32x4-spi.o
 -snd-soc-tlv320aic3x-objs := tlv320aic3x.o
 -snd-soc-tlv320dac33-objs := tlv320dac33.o
  snd-soc-ts3a227e-objs := ts3a227e.o
 -snd-soc-twl4030-objs := twl4030.o
 -snd-soc-twl6040-objs := twl6040.o
 -snd-soc-uda134x-objs := uda134x.o
 -snd-soc-uda1380-objs := uda1380.o
 -snd-soc-wl1273-objs := wl1273.o
 -snd-soc-wm-adsp-objs := wm_adsp.o
 -snd-soc-wm0010-objs := wm0010.o
 -snd-soc-wm1250-ev1-objs := wm1250-ev1.o
 -snd-soc-wm2000-objs := wm2000.o
 -snd-soc-wm2200-objs := wm2200.o
 -snd-soc-wm5100-objs := wm5100.o wm5100-tables.o
 -snd-soc-wm5102-objs := wm5102.o
 -snd-soc-wm5110-objs := wm5110.o
 -snd-soc-wm8350-objs := wm8350.o
 -snd-soc-wm8400-objs := wm8400.o
 -snd-soc-wm8510-objs := wm8510.o
 -snd-soc-wm8523-objs := wm8523.o
 -snd-soc-wm8580-objs := wm8580.o
 -snd-soc-wm8711-objs := wm8711.o
 -snd-soc-wm8727-objs := wm8727.o
 -snd-soc-wm8728-objs := wm8728.o
 -snd-soc-wm8731-objs := wm8731.o
 -snd-soc-wm8737-objs := wm8737.o
 -snd-soc-wm8741-objs := wm8741.o
 -snd-soc-wm8750-objs := wm8750.o
 -snd-soc-wm8753-objs := wm8753.o
 -snd-soc-wm8770-objs := wm8770.o
 -snd-soc-wm8776-objs := wm8776.o
 -snd-soc-wm8782-objs := wm8782.o
 -snd-soc-wm8804-objs := wm8804.o
 -snd-soc-wm8804-i2c-objs := wm8804-i2c.o
 -snd-soc-wm8804-spi-objs := wm8804-spi.o
 -snd-soc-wm8900-objs := wm8900.o
 -snd-soc-wm8903-objs := wm8903.o
 -snd-soc-wm8904-objs := wm8904.o
 -snd-soc-wm8996-objs := wm8996.o
 -snd-soc-wm8940-objs := wm8940.o
 -snd-soc-wm8955-objs := wm8955.o
 -snd-soc-wm8960-objs := wm8960.o
 -snd-soc-wm8961-objs := wm8961.o
 -snd-soc-wm8962-objs := wm8962.o
 -snd-soc-wm8971-objs := wm8971.o
 -snd-soc-wm8974-objs := wm8974.o
 -snd-soc-wm8978-objs := wm8978.o
 -snd-soc-wm8983-objs := wm8983.o
 -snd-soc-wm8985-objs := wm8985.o
 -snd-soc-wm8988-objs := wm8988.o
 -snd-soc-wm8990-objs := wm8990.o
 -snd-soc-wm8991-objs := wm8991.o
 -snd-soc-wm8993-objs := wm8993.o
 -snd-soc-wm8994-objs := wm8994.o wm8958-dsp2.o
 -snd-soc-wm8995-objs := wm8995.o
 -snd-soc-wm8997-objs := wm8997.o
 -snd-soc-wm8998-objs := wm8998.o
 -snd-soc-wm9081-objs := wm9081.o
 -snd-soc-wm9090-objs := wm9090.o
 -snd-soc-wm9705-objs := wm9705.o
 -snd-soc-wm9712-objs := wm9712.o
 -snd-soc-wm9713-objs := wm9713.o
 -snd-soc-wm-hubs-objs := wm_hubs.o
 -# Amp
 -snd-soc-max9877-objs := max9877.o
 -snd-soc-max98504-objs := max98504.o
 -snd-soc-tpa6130a2-objs := tpa6130a2.o
 -snd-soc-tas2552-objs := tas2552.o
  
 -obj-$(CONFIG_SND_SOC_88PM860X)	+= snd-soc-88pm860x.o
 -obj-$(CONFIG_SND_SOC_AB8500_CODEC)	+= snd-soc-ab8500-codec.o
 -obj-$(CONFIG_SND_SOC_AC97_CODEC)	+= snd-soc-ac97.o
 -obj-$(CONFIG_SND_SOC_AD1836)	+= snd-soc-ad1836.o
 -obj-$(CONFIG_SND_SOC_AD193X)	+= snd-soc-ad193x.o
 -obj-$(CONFIG_SND_SOC_AD193X_SPI)	+= snd-soc-ad193x-spi.o
 -obj-$(CONFIG_SND_SOC_AD193X_I2C)	+= snd-soc-ad193x-i2c.o
 -obj-$(CONFIG_SND_SOC_AD1980)	+= snd-soc-ad1980.o
 -obj-$(CONFIG_SND_SOC_AD73311) += snd-soc-ad73311.o
 -obj-$(CONFIG_SND_SOC_ADAU_UTILS)	+= snd-soc-adau-utils.o
 -obj-$(CONFIG_SND_SOC_ADAU1373)	+= snd-soc-adau1373.o
 -obj-$(CONFIG_SND_SOC_ADAU1701)		+= snd-soc-adau1701.o
 -obj-$(CONFIG_SND_SOC_ADAU17X1)		+= snd-soc-adau17x1.o
 -obj-$(CONFIG_SND_SOC_ADAU1761)		+= snd-soc-adau1761.o
 -obj-$(CONFIG_SND_SOC_ADAU1761_I2C)	+= snd-soc-adau1761-i2c.o
 -obj-$(CONFIG_SND_SOC_ADAU1761_SPI)	+= snd-soc-adau1761-spi.o
 -obj-$(CONFIG_SND_SOC_ADAU1781)		+= snd-soc-adau1781.o
 -obj-$(CONFIG_SND_SOC_ADAU1781_I2C)	+= snd-soc-adau1781-i2c.o
 -obj-$(CONFIG_SND_SOC_ADAU1781_SPI)	+= snd-soc-adau1781-spi.o
 -obj-$(CONFIG_SND_SOC_ADAU1977)		+= snd-soc-adau1977.o
 -obj-$(CONFIG_SND_SOC_ADAU1977_SPI)	+= snd-soc-adau1977-spi.o
 -obj-$(CONFIG_SND_SOC_ADAU1977_I2C)	+= snd-soc-adau1977-i2c.o
 -obj-$(CONFIG_SND_SOC_ADAU7002)	+= snd-soc-adau7002.o
 -obj-$(CONFIG_SND_SOC_ADAV80X)  += snd-soc-adav80x.o
 -obj-$(CONFIG_SND_SOC_ADAV801)  += snd-soc-adav801.o
 -obj-$(CONFIG_SND_SOC_ADAV803)  += snd-soc-adav803.o
 -obj-$(CONFIG_SND_SOC_ADS117X)	+= snd-soc-ads117x.o
 -obj-$(CONFIG_SND_SOC_AK4104)	+= snd-soc-ak4104.o
 -obj-$(CONFIG_SND_SOC_AK4535)	+= snd-soc-ak4535.o
 -obj-$(CONFIG_SND_SOC_AK4554)	+= snd-soc-ak4554.o
 -obj-$(CONFIG_SND_SOC_AK4613)	+= snd-soc-ak4613.o
 -obj-$(CONFIG_SND_SOC_AK4641)	+= snd-soc-ak4641.o
 -obj-$(CONFIG_SND_SOC_AK4642)	+= snd-soc-ak4642.o
 -obj-$(CONFIG_SND_SOC_AK4671)	+= snd-soc-ak4671.o
 -obj-$(CONFIG_SND_SOC_AK5386)	+= snd-soc-ak5386.o
 -obj-$(CONFIG_SND_SOC_ALC5623)    += snd-soc-alc5623.o
 -obj-$(CONFIG_SND_SOC_ALC5632)	+= snd-soc-alc5632.o
 -obj-$(CONFIG_SND_SOC_ARIZONA)	+= snd-soc-arizona.o
 -obj-$(CONFIG_SND_SOC_BT_SCO)	+= snd-soc-bt-sco.o
 -obj-$(CONFIG_SND_SOC_CQ0093VC) += snd-soc-cq93vc.o
 -obj-$(CONFIG_SND_SOC_CS35L32)	+= snd-soc-cs35l32.o
 -obj-$(CONFIG_SND_SOC_CS35L33)	+= snd-soc-cs35l33.o
 -obj-$(CONFIG_SND_SOC_CS35L34)	+= snd-soc-cs35l34.o
 -obj-$(CONFIG_SND_SOC_CS42L42)	+= snd-soc-cs42l42.o
 -obj-$(CONFIG_SND_SOC_CS42L51)	+= snd-soc-cs42l51.o
 -obj-$(CONFIG_SND_SOC_CS42L51_I2C)	+= snd-soc-cs42l51-i2c.o
 -obj-$(CONFIG_SND_SOC_CS42L52)	+= snd-soc-cs42l52.o
 -obj-$(CONFIG_SND_SOC_CS42L56)	+= snd-soc-cs42l56.o
 -obj-$(CONFIG_SND_SOC_CS42L73)	+= snd-soc-cs42l73.o
 -obj-$(CONFIG_SND_SOC_CS4265)	+= snd-soc-cs4265.o
 -obj-$(CONFIG_SND_SOC_CS4270)	+= snd-soc-cs4270.o
 -obj-$(CONFIG_SND_SOC_CS4271)	+= snd-soc-cs4271.o
 -obj-$(CONFIG_SND_SOC_CS4271_I2C)	+= snd-soc-cs4271-i2c.o
 -obj-$(CONFIG_SND_SOC_CS4271_SPI)	+= snd-soc-cs4271-spi.o
 -obj-$(CONFIG_SND_SOC_CS42XX8)	+= snd-soc-cs42xx8.o
 -obj-$(CONFIG_SND_SOC_CS42XX8_I2C) += snd-soc-cs42xx8-i2c.o
 -obj-$(CONFIG_SND_SOC_CS4349)	+= snd-soc-cs4349.o
 -obj-$(CONFIG_SND_SOC_CS47L24)	+= snd-soc-cs47l24.o
 -obj-$(CONFIG_SND_SOC_CS53L30)	+= snd-soc-cs53l30.o
 -obj-$(CONFIG_SND_SOC_CX20442)	+= snd-soc-cx20442.o
 -obj-$(CONFIG_SND_SOC_DA7210)	+= snd-soc-da7210.o
 -obj-$(CONFIG_SND_SOC_DA7213)	+= snd-soc-da7213.o
 -obj-$(CONFIG_SND_SOC_DA7218)	+= snd-soc-da7218.o
 -obj-$(CONFIG_SND_SOC_DA7219)	+= snd-soc-da7219.o
 -obj-$(CONFIG_SND_SOC_DA732X)	+= snd-soc-da732x.o
 -obj-$(CONFIG_SND_SOC_DA9055)	+= snd-soc-da9055.o
  obj-$(CONFIG_SND_SOC_DMIC)	+= snd-soc-dmic.o
 -obj-$(CONFIG_SND_SOC_ES8328)	+= snd-soc-es8328.o
 -obj-$(CONFIG_SND_SOC_ES8328_I2C)+= snd-soc-es8328-i2c.o
 -obj-$(CONFIG_SND_SOC_ES8328_SPI)+= snd-soc-es8328-spi.o
 -obj-$(CONFIG_SND_SOC_GTM601)    += snd-soc-gtm601.o
  obj-$(CONFIG_SND_SOC_HDAC_HDMI) += snd-soc-hdac-hdmi.o
 -obj-$(CONFIG_SND_SOC_ICS43432)	+= snd-soc-ics43432.o
 -obj-$(CONFIG_SND_SOC_INNO_RK3036)	+= snd-soc-inno-rk3036.o
 -obj-$(CONFIG_SND_SOC_ISABELLE)	+= snd-soc-isabelle.o
 -obj-$(CONFIG_SND_SOC_JZ4740_CODEC)	+= snd-soc-jz4740-codec.o
 -obj-$(CONFIG_SND_SOC_L3)	+= snd-soc-l3.o
 -obj-$(CONFIG_SND_SOC_LM4857)	+= snd-soc-lm4857.o
 -obj-$(CONFIG_SND_SOC_LM49453)   += snd-soc-lm49453.o
 -obj-$(CONFIG_SND_SOC_MAX9768)	+= snd-soc-max9768.o
 -obj-$(CONFIG_SND_SOC_MAX98088)	+= snd-soc-max98088.o
  obj-$(CONFIG_SND_SOC_MAX98090)	+= snd-soc-max98090.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_SND_SOC_MAX98095)	+= snd-soc-max98095.o
+ obj-$(CONFIG_SND_SOC_MAX98357A)	+= snd-soc-max98357a.o
+ obj-$(CONFIG_SND_SOC_MAX9867)	+= snd-soc-max9867.o
+ obj-$(CONFIG_SND_SOC_MAX98925)	+= snd-soc-max98925.o
+ obj-$(CONFIG_SND_SOC_MAX98926)	+= snd-soc-max98926.o
+ obj-$(CONFIG_SND_SOC_MAX98927)	+= snd-soc-max98927.o
+ obj-$(CONFIG_SND_SOC_MAX9850)	+= snd-soc-max9850.o
+ obj-$(CONFIG_SND_SOC_MAX9860)	+= snd-soc-max9860.o
+ obj-$(CONFIG_SND_SOC_MC13783)	+= snd-soc-mc13783.o
+ obj-$(CONFIG_SND_SOC_ML26124)	+= snd-soc-ml26124.o
+ obj-$(CONFIG_SND_SOC_MSM8916_WCD_ANALOG) +=snd-soc-msm8916-analog.o
+ obj-$(CONFIG_SND_SOC_MSM8916_WCD_DIGITAL) +=snd-soc-msm8916-digital.o
+ obj-$(CONFIG_SND_SOC_NAU8810)   += snd-soc-nau8810.o
++>>>>>>> 7c0c2000716e (ASoC: Add support for Maxim Integrated MAX98927 Amplifier)
  obj-$(CONFIG_SND_SOC_NAU8825)   += snd-soc-nau8825.o
 -obj-$(CONFIG_SND_SOC_HDMI_CODEC)	+= snd-soc-hdmi-codec.o
 -obj-$(CONFIG_SND_SOC_PCM1681)	+= snd-soc-pcm1681.o
 -obj-$(CONFIG_SND_SOC_PCM179X)	+= snd-soc-pcm179x-codec.o
 -obj-$(CONFIG_SND_SOC_PCM179X_I2C)	+= snd-soc-pcm179x-i2c.o
 -obj-$(CONFIG_SND_SOC_PCM179X_SPI)	+= snd-soc-pcm179x-spi.o
 -obj-$(CONFIG_SND_SOC_PCM3008)	+= snd-soc-pcm3008.o
 -obj-$(CONFIG_SND_SOC_PCM3168A)	+= snd-soc-pcm3168a.o
 -obj-$(CONFIG_SND_SOC_PCM3168A_I2C)	+= snd-soc-pcm3168a-i2c.o
 -obj-$(CONFIG_SND_SOC_PCM3168A_SPI)	+= snd-soc-pcm3168a-spi.o
 -obj-$(CONFIG_SND_SOC_PCM5102A)	+= snd-soc-pcm5102a.o
 -obj-$(CONFIG_SND_SOC_PCM512x)	+= snd-soc-pcm512x.o
 -obj-$(CONFIG_SND_SOC_PCM512x_I2C)	+= snd-soc-pcm512x-i2c.o
 -obj-$(CONFIG_SND_SOC_PCM512x_SPI)	+= snd-soc-pcm512x-spi.o
  obj-$(CONFIG_SND_SOC_RL6231)	+= snd-soc-rl6231.o
  obj-$(CONFIG_SND_SOC_RL6347A)	+= snd-soc-rl6347a.o
  obj-$(CONFIG_SND_SOC_RT286)	+= snd-soc-rt286.o
diff --git a/Documentation/devicetree/bindings/sound/max9892x.txt b/Documentation/devicetree/bindings/sound/max9892x.txt
new file mode 100644
index 000000000000..f6171591ddc6
--- /dev/null
+++ b/Documentation/devicetree/bindings/sound/max9892x.txt
@@ -0,0 +1,41 @@
+Maxim Integrated MAX98925/MAX98926/MAX98927 Speaker Amplifier
+
+This device supports I2C.
+
+Required properties:
+
+  - compatible : should be one of the following
+    - "maxim,max98925"
+    - "maxim,max98926"
+    - "maxim,max98927"
+
+  - vmon-slot-no : slot number used to send voltage information
+                   or in inteleave mode this will be used as
+                   interleave slot.
+                   MAX98925/MAX98926 slot range : 0 ~ 30,  Default : 0
+                   MAX98927 slot range : 0 ~ 15,  Default : 0
+
+  - imon-slot-no : slot number used to send current information
+                   MAX98925/MAX98926 slot range : 0 ~ 30,  Default : 0
+                   MAX98927 slot range : 0 ~ 15,  Default : 0
+
+  - interleave-mode : When using two MAX9892X in a system it is
+                   possible to create ADC data that that will
+                   overflow the frame size. Digital Audio Interleave
+                   mode provides a means to output VMON and IMON data
+                   from two devices on a single DOUT line when running
+                   smaller frames sizes such as 32 BCLKS per LRCLK or
+                   48 BCLKS per LRCLK.
+                   Range : 0 (off), 1 (on),  Default : 0
+
+  - reg : the I2C address of the device for I2C
+
+Example:
+
+codec: max98927@3a {
+   compatible = "maxim,max98927";
+   vmon-slot-no = <0>;
+   imon-slot-no = <1>;
+   interleave-mode = <0>;
+   reg = <0x3a>;
+};
* Unmerged path sound/soc/codecs/Kconfig
* Unmerged path sound/soc/codecs/Makefile
diff --git a/sound/soc/codecs/max98927.c b/sound/soc/codecs/max98927.c
new file mode 100644
index 000000000000..b5ee29499e16
--- /dev/null
+++ b/sound/soc/codecs/max98927.c
@@ -0,0 +1,841 @@
+/*
+ * max98927.c  --  MAX98927 ALSA Soc Audio driver
+ *
+ * Copyright (C) 2016 Maxim Integrated Products
+ * Author: Ryan Lee <ryans.lee@maximintegrated.com>
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ */
+
+#include <linux/acpi.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/regmap.h>
+#include <linux/slab.h>
+#include <linux/cdev.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+#include <sound/tlv.h>
+#include "max98927.h"
+
+static struct reg_default max98927_reg[] = {
+	{MAX98927_R0001_INT_RAW1,  0x00},
+	{MAX98927_R0002_INT_RAW2,  0x00},
+	{MAX98927_R0003_INT_RAW3,  0x00},
+	{MAX98927_R0004_INT_STATE1,  0x00},
+	{MAX98927_R0005_INT_STATE2,  0x00},
+	{MAX98927_R0006_INT_STATE3,  0x00},
+	{MAX98927_R0007_INT_FLAG1,  0x00},
+	{MAX98927_R0008_INT_FLAG2,  0x00},
+	{MAX98927_R0009_INT_FLAG3,  0x00},
+	{MAX98927_R000A_INT_EN1,  0x00},
+	{MAX98927_R000B_INT_EN2,  0x00},
+	{MAX98927_R000C_INT_EN3,  0x00},
+	{MAX98927_R000D_INT_FLAG_CLR1,  0x00},
+	{MAX98927_R000E_INT_FLAG_CLR2,  0x00},
+	{MAX98927_R000F_INT_FLAG_CLR3,  0x00},
+	{MAX98927_R0010_IRQ_CTRL,  0x00},
+	{MAX98927_R0011_CLK_MON,  0x00},
+	{MAX98927_R0012_WDOG_CTRL,  0x00},
+	{MAX98927_R0013_WDOG_RST,  0x00},
+	{MAX98927_R0014_MEAS_ADC_THERM_WARN_THRESH,  0x00},
+	{MAX98927_R0015_MEAS_ADC_THERM_SHDN_THRESH,  0x00},
+	{MAX98927_R0016_MEAS_ADC_THERM_HYSTERESIS,  0x00},
+	{MAX98927_R0017_PIN_CFG,  0x55},
+	{MAX98927_R0018_PCM_RX_EN_A,  0x00},
+	{MAX98927_R0019_PCM_RX_EN_B,  0x00},
+	{MAX98927_R001A_PCM_TX_EN_A,  0x00},
+	{MAX98927_R001B_PCM_TX_EN_B,  0x00},
+	{MAX98927_R001C_PCM_TX_HIZ_CTRL_A,  0x00},
+	{MAX98927_R001D_PCM_TX_HIZ_CTRL_B,  0x00},
+	{MAX98927_R001E_PCM_TX_CH_SRC_A,  0x00},
+	{MAX98927_R001F_PCM_TX_CH_SRC_B,  0x00},
+	{MAX98927_R0020_PCM_MODE_CFG,  0x40},
+	{MAX98927_R0021_PCM_MASTER_MODE,  0x00},
+	{MAX98927_R0022_PCM_CLK_SETUP,  0x22},
+	{MAX98927_R0023_PCM_SR_SETUP1,  0x00},
+	{MAX98927_R0024_PCM_SR_SETUP2,  0x00},
+	{MAX98927_R0025_PCM_TO_SPK_MONOMIX_A,  0x00},
+	{MAX98927_R0026_PCM_TO_SPK_MONOMIX_B,  0x00},
+	{MAX98927_R0027_ICC_RX_EN_A,  0x00},
+	{MAX98927_R0028_ICC_RX_EN_B,  0x00},
+	{MAX98927_R002B_ICC_TX_EN_A,  0x00},
+	{MAX98927_R002C_ICC_TX_EN_B,  0x00},
+	{MAX98927_R002E_ICC_HIZ_MANUAL_MODE,  0x00},
+	{MAX98927_R002F_ICC_TX_HIZ_EN_A,  0x00},
+	{MAX98927_R0030_ICC_TX_HIZ_EN_B,  0x00},
+	{MAX98927_R0031_ICC_LNK_EN,  0x00},
+	{MAX98927_R0032_PDM_TX_EN,  0x00},
+	{MAX98927_R0033_PDM_TX_HIZ_CTRL,  0x00},
+	{MAX98927_R0034_PDM_TX_CTRL,  0x00},
+	{MAX98927_R0035_PDM_RX_CTRL,  0x00},
+	{MAX98927_R0036_AMP_VOL_CTRL,  0x00},
+	{MAX98927_R0037_AMP_DSP_CFG,  0x02},
+	{MAX98927_R0038_TONE_GEN_DC_CFG,  0x00},
+	{MAX98927_R0039_DRE_CTRL,  0x01},
+	{MAX98927_R003A_AMP_EN,  0x00},
+	{MAX98927_R003B_SPK_SRC_SEL,  0x00},
+	{MAX98927_R003C_SPK_GAIN,  0x00},
+	{MAX98927_R003D_SSM_CFG,  0x01},
+	{MAX98927_R003E_MEAS_EN,  0x00},
+	{MAX98927_R003F_MEAS_DSP_CFG,  0x04},
+	{MAX98927_R0040_BOOST_CTRL0,  0x00},
+	{MAX98927_R0041_BOOST_CTRL3,  0x00},
+	{MAX98927_R0042_BOOST_CTRL1,  0x00},
+	{MAX98927_R0043_MEAS_ADC_CFG,  0x00},
+	{MAX98927_R0044_MEAS_ADC_BASE_MSB,  0x00},
+	{MAX98927_R0045_MEAS_ADC_BASE_LSB,  0x00},
+	{MAX98927_R0046_ADC_CH0_DIVIDE,  0x00},
+	{MAX98927_R0047_ADC_CH1_DIVIDE,  0x00},
+	{MAX98927_R0048_ADC_CH2_DIVIDE,  0x00},
+	{MAX98927_R0049_ADC_CH0_FILT_CFG,  0x00},
+	{MAX98927_R004A_ADC_CH1_FILT_CFG,  0x00},
+	{MAX98927_R004B_ADC_CH2_FILT_CFG,  0x00},
+	{MAX98927_R004C_MEAS_ADC_CH0_READ,  0x00},
+	{MAX98927_R004D_MEAS_ADC_CH1_READ,  0x00},
+	{MAX98927_R004E_MEAS_ADC_CH2_READ,  0x00},
+	{MAX98927_R0051_BROWNOUT_STATUS,  0x00},
+	{MAX98927_R0052_BROWNOUT_EN,  0x00},
+	{MAX98927_R0053_BROWNOUT_INFINITE_HOLD,  0x00},
+	{MAX98927_R0054_BROWNOUT_INFINITE_HOLD_CLR,  0x00},
+	{MAX98927_R0055_BROWNOUT_LVL_HOLD,  0x00},
+	{MAX98927_R005A_BROWNOUT_LVL1_THRESH,  0x00},
+	{MAX98927_R005B_BROWNOUT_LVL2_THRESH,  0x00},
+	{MAX98927_R005C_BROWNOUT_LVL3_THRESH,  0x00},
+	{MAX98927_R005D_BROWNOUT_LVL4_THRESH,  0x00},
+	{MAX98927_R005E_BROWNOUT_THRESH_HYSTERYSIS,  0x00},
+	{MAX98927_R005F_BROWNOUT_AMP_LIMITER_ATK_REL,  0x00},
+	{MAX98927_R0060_BROWNOUT_AMP_GAIN_ATK_REL,  0x00},
+	{MAX98927_R0061_BROWNOUT_AMP1_CLIP_MODE,  0x00},
+	{MAX98927_R0072_BROWNOUT_LVL1_CUR_LIMIT,  0x00},
+	{MAX98927_R0073_BROWNOUT_LVL1_AMP1_CTRL1,  0x00},
+	{MAX98927_R0074_BROWNOUT_LVL1_AMP1_CTRL2,  0x00},
+	{MAX98927_R0075_BROWNOUT_LVL1_AMP1_CTRL3,  0x00},
+	{MAX98927_R0076_BROWNOUT_LVL2_CUR_LIMIT,  0x00},
+	{MAX98927_R0077_BROWNOUT_LVL2_AMP1_CTRL1,  0x00},
+	{MAX98927_R0078_BROWNOUT_LVL2_AMP1_CTRL2,  0x00},
+	{MAX98927_R0079_BROWNOUT_LVL2_AMP1_CTRL3,  0x00},
+	{MAX98927_R007A_BROWNOUT_LVL3_CUR_LIMIT,  0x00},
+	{MAX98927_R007B_BROWNOUT_LVL3_AMP1_CTRL1,  0x00},
+	{MAX98927_R007C_BROWNOUT_LVL3_AMP1_CTRL2,  0x00},
+	{MAX98927_R007D_BROWNOUT_LVL3_AMP1_CTRL3,  0x00},
+	{MAX98927_R007E_BROWNOUT_LVL4_CUR_LIMIT,  0x00},
+	{MAX98927_R007F_BROWNOUT_LVL4_AMP1_CTRL1,  0x00},
+	{MAX98927_R0080_BROWNOUT_LVL4_AMP1_CTRL2,  0x00},
+	{MAX98927_R0081_BROWNOUT_LVL4_AMP1_CTRL3,  0x00},
+	{MAX98927_R0082_ENV_TRACK_VOUT_HEADROOM,  0x00},
+	{MAX98927_R0083_ENV_TRACK_BOOST_VOUT_DELAY,  0x00},
+	{MAX98927_R0084_ENV_TRACK_REL_RATE,  0x00},
+	{MAX98927_R0085_ENV_TRACK_HOLD_RATE,  0x00},
+	{MAX98927_R0086_ENV_TRACK_CTRL,  0x00},
+	{MAX98927_R0087_ENV_TRACK_BOOST_VOUT_READ,  0x00},
+	{MAX98927_R00FF_GLOBAL_SHDN,  0x00},
+	{MAX98927_R0100_SOFT_RESET,  0x00},
+	{MAX98927_R01FF_REV_ID,  0x40},
+};
+
+static int max98927_dai_set_fmt(struct snd_soc_dai *codec_dai, unsigned int fmt)
+{
+	struct snd_soc_codec *codec = codec_dai->codec;
+	struct max98927_priv *max98927 = snd_soc_codec_get_drvdata(codec);
+	unsigned int mode = 0;
+	unsigned int format = 0;
+	unsigned int invert = 0;
+
+	dev_dbg(codec->dev, "%s: fmt 0x%08X\n", __func__, fmt);
+
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		mode = MAX98927_PCM_MASTER_MODE_SLAVE;
+		break;
+	case SND_SOC_DAIFMT_CBM_CFM:
+		max98927->master = true;
+		mode = MAX98927_PCM_MASTER_MODE_MASTER;
+		break;
+	default:
+		dev_err(codec->dev, "DAI clock mode unsupported");
+		return -EINVAL;
+	}
+
+	regmap_update_bits(max98927->regmap,
+		MAX98927_R0021_PCM_MASTER_MODE,
+		MAX98927_PCM_MASTER_MODE_MASK,
+		mode);
+
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		break;
+	case SND_SOC_DAIFMT_IB_NF:
+		invert = MAX98927_PCM_MODE_CFG_PCM_BCLKEDGE;
+		break;
+	default:
+		dev_err(codec->dev, "DAI invert mode unsupported");
+		return -EINVAL;
+	}
+
+	regmap_update_bits(max98927->regmap,
+		MAX98927_R0020_PCM_MODE_CFG,
+		MAX98927_PCM_MODE_CFG_PCM_BCLKEDGE,
+		invert);
+
+	/* interface format */
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+		max98927->iface |= SND_SOC_DAIFMT_I2S;
+		format = MAX98927_PCM_FORMAT_I2S;
+		break;
+	case SND_SOC_DAIFMT_LEFT_J:
+		max98927->iface |= SND_SOC_DAIFMT_LEFT_J;
+		format = MAX98927_PCM_FORMAT_LJ;
+		break;
+	case SND_SOC_DAIFMT_PDM:
+		max98927->iface |= SND_SOC_DAIFMT_PDM;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	/* pcm channel configuration */
+	if (max98927->iface & (SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_LEFT_J)) {
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0018_PCM_RX_EN_A,
+			MAX98927_PCM_RX_CH0_EN | MAX98927_PCM_RX_CH1_EN,
+			MAX98927_PCM_RX_CH0_EN | MAX98927_PCM_RX_CH1_EN);
+
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0020_PCM_MODE_CFG,
+			MAX98927_PCM_MODE_CFG_FORMAT_MASK,
+			format << MAX98927_PCM_MODE_CFG_FORMAT_SHIFT);
+
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R003B_SPK_SRC_SEL,
+			MAX98927_SPK_SRC_MASK, 0);
+
+	} else
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0018_PCM_RX_EN_A,
+			MAX98927_PCM_RX_CH0_EN | MAX98927_PCM_RX_CH1_EN, 0);
+
+	/* pdm channel configuration */
+	if (max98927->iface & SND_SOC_DAIFMT_PDM) {
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0035_PDM_RX_CTRL,
+			MAX98927_PDM_RX_EN_MASK, 1);
+
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R003B_SPK_SRC_SEL,
+			MAX98927_SPK_SRC_MASK, 3);
+	} else
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0035_PDM_RX_CTRL,
+			MAX98927_PDM_RX_EN_MASK, 0);
+	return 0;
+}
+
+/* codec MCLK rate in master mode */
+static const int rate_table[] = {
+	5644800, 6000000, 6144000, 6500000,
+	9600000, 11289600, 12000000, 12288000,
+	13000000, 19200000,
+};
+
+static int max98927_set_clock(struct max98927_priv *max98927,
+	struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_codec *codec = max98927->codec;
+	/* BCLK/LRCLK ratio calculation */
+	int blr_clk_ratio = params_channels(params) * max98927->ch_size;
+	int value;
+
+	if (max98927->master) {
+		int i;
+		/* match rate to closest value */
+		for (i = 0; i < ARRAY_SIZE(rate_table); i++) {
+			if (rate_table[i] >= max98927->sysclk)
+				break;
+		}
+		if (i == ARRAY_SIZE(rate_table)) {
+			dev_err(codec->dev, "failed to find proper clock rate.\n");
+			return -EINVAL;
+		}
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0021_PCM_MASTER_MODE,
+			MAX98927_PCM_MASTER_MODE_MCLK_MASK,
+			i << MAX98927_PCM_MASTER_MODE_MCLK_RATE_SHIFT);
+	}
+
+	switch (blr_clk_ratio) {
+	case 32:
+		value = 2;
+		break;
+	case 48:
+		value = 3;
+		break;
+	case 64:
+		value = 4;
+		break;
+	default:
+		return -EINVAL;
+	}
+	regmap_update_bits(max98927->regmap,
+		MAX98927_R0022_PCM_CLK_SETUP,
+		MAX98927_PCM_CLK_SETUP_BSEL_MASK,
+		value);
+	return 0;
+}
+
+static int max98927_dai_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params,
+	struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct max98927_priv *max98927 = snd_soc_codec_get_drvdata(codec);
+	unsigned int sampling_rate = 0;
+	unsigned int chan_sz = 0;
+
+	/* pcm mode configuration */
+	switch (snd_pcm_format_width(params_format(params))) {
+	case 16:
+		chan_sz = MAX98927_PCM_MODE_CFG_CHANSZ_16;
+		break;
+	case 24:
+		chan_sz = MAX98927_PCM_MODE_CFG_CHANSZ_24;
+		break;
+	case 32:
+		chan_sz = MAX98927_PCM_MODE_CFG_CHANSZ_32;
+		break;
+	default:
+		dev_err(codec->dev, "format unsupported %d",
+			params_format(params));
+		goto err;
+	}
+
+	max98927->ch_size = snd_pcm_format_width(params_format(params));
+
+	regmap_update_bits(max98927->regmap,
+		MAX98927_R0020_PCM_MODE_CFG,
+		MAX98927_PCM_MODE_CFG_CHANSZ_MASK, chan_sz);
+
+	dev_dbg(codec->dev, "format supported %d",
+		params_format(params));
+
+	/* sampling rate configuration */
+	switch (params_rate(params)) {
+	case 8000:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_8000;
+		break;
+	case 11025:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_11025;
+		break;
+	case 12000:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_12000;
+		break;
+	case 16000:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_16000;
+		break;
+	case 22050:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_22050;
+		break;
+	case 24000:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_24000;
+		break;
+	case 32000:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_32000;
+		break;
+	case 44100:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_44100;
+		break;
+	case 48000:
+		sampling_rate = MAX98927_PCM_SR_SET1_SR_48000;
+		break;
+	default:
+		dev_err(codec->dev, "rate %d not supported\n",
+			params_rate(params));
+		goto err;
+	}
+	/* set DAI_SR to correct LRCLK frequency */
+	regmap_update_bits(max98927->regmap,
+		MAX98927_R0023_PCM_SR_SETUP1,
+		MAX98927_PCM_SR_SET1_SR_MASK,
+		sampling_rate);
+	regmap_update_bits(max98927->regmap,
+		MAX98927_R0024_PCM_SR_SETUP2,
+		MAX98927_PCM_SR_SET2_SR_MASK,
+		sampling_rate << MAX98927_PCM_SR_SET2_SR_SHIFT);
+
+	/* set sampling rate of IV */
+	if (max98927->interleave_mode &&
+	    sampling_rate > MAX98927_PCM_SR_SET1_SR_16000)
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0024_PCM_SR_SETUP2,
+			MAX98927_PCM_SR_SET2_IVADC_SR_MASK,
+			sampling_rate - 3);
+	else
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R0024_PCM_SR_SETUP2,
+			MAX98927_PCM_SR_SET2_IVADC_SR_MASK,
+			sampling_rate);
+	return max98927_set_clock(max98927, params);
+err:
+	return -EINVAL;
+}
+
+#define MAX98927_RATES SNDRV_PCM_RATE_8000_48000
+
+#define MAX98927_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | \
+	SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S32_LE)
+
+static int max98927_dai_set_sysclk(struct snd_soc_dai *dai,
+	int clk_id, unsigned int freq, int dir)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct max98927_priv *max98927 = snd_soc_codec_get_drvdata(codec);
+
+	max98927->sysclk = freq;
+	return 0;
+}
+
+static const struct snd_soc_dai_ops max98927_dai_ops = {
+	.set_sysclk = max98927_dai_set_sysclk,
+	.set_fmt = max98927_dai_set_fmt,
+	.hw_params = max98927_dai_hw_params,
+};
+
+static int max98927_dac_event(struct snd_soc_dapm_widget *w,
+	struct snd_kcontrol *kcontrol, int event)
+{
+	struct snd_soc_codec *codec = snd_soc_dapm_to_codec(w->dapm);
+	struct max98927_priv *max98927 = snd_soc_codec_get_drvdata(codec);
+
+	switch (event) {
+	case SND_SOC_DAPM_POST_PMU:
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R003A_AMP_EN,
+			MAX98927_AMP_EN_MASK, 1);
+		/* enable VMON and IMON */
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R003E_MEAS_EN,
+			MAX98927_MEAS_V_EN | MAX98927_MEAS_I_EN,
+			MAX98927_MEAS_V_EN | MAX98927_MEAS_I_EN);
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R00FF_GLOBAL_SHDN,
+			MAX98927_GLOBAL_EN_MASK, 1);
+		break;
+	case SND_SOC_DAPM_POST_PMD:
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R00FF_GLOBAL_SHDN,
+			MAX98927_GLOBAL_EN_MASK, 0);
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R003A_AMP_EN,
+			MAX98927_AMP_EN_MASK, 0);
+		/* disable VMON and IMON */
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R003E_MEAS_EN,
+			MAX98927_MEAS_V_EN | MAX98927_MEAS_I_EN, 0);
+		break;
+	default:
+		return 0;
+	}
+	return 0;
+}
+
+static const char * const max98927_switch_text[] = {
+	"Left", "Right", "LeftRight"};
+
+static const struct soc_enum dai_sel_enum =
+	SOC_ENUM_SINGLE(MAX98927_R0025_PCM_TO_SPK_MONOMIX_A,
+		MAX98927_PCM_TO_SPK_MONOMIX_CFG_SHIFT,
+		3, max98927_switch_text);
+
+static const struct snd_kcontrol_new max98927_dai_controls =
+	SOC_DAPM_ENUM("DAI Sel", dai_sel_enum);
+
+static const struct snd_soc_dapm_widget max98927_dapm_widgets[] = {
+	SND_SOC_DAPM_AIF_IN("DAI_OUT", "HiFi Playback", 0, SND_SOC_NOPM, 0, 0),
+	SND_SOC_DAPM_DAC_E("Amp Enable", "HiFi Playback", MAX98927_R003A_AMP_EN,
+		0, 0, max98927_dac_event,
+		SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD),
+	SND_SOC_DAPM_MUX("DAI Sel Mux", SND_SOC_NOPM, 0, 0,
+		&max98927_dai_controls),
+	SND_SOC_DAPM_OUTPUT("BE_OUT"),
+};
+
+static DECLARE_TLV_DB_SCALE(max98927_spk_tlv, 300, 300, 0);
+static DECLARE_TLV_DB_SCALE(max98927_digital_tlv, -1600, 25, 0);
+
+static bool max98927_readable_register(struct device *dev, unsigned int reg)
+{
+	switch (reg) {
+	case MAX98927_R0001_INT_RAW1 ... MAX98927_R0028_ICC_RX_EN_B:
+	case MAX98927_R002B_ICC_TX_EN_A ... MAX98927_R002C_ICC_TX_EN_B:
+	case MAX98927_R002E_ICC_HIZ_MANUAL_MODE
+		... MAX98927_R004E_MEAS_ADC_CH2_READ:
+	case MAX98927_R0051_BROWNOUT_STATUS
+		... MAX98927_R0055_BROWNOUT_LVL_HOLD:
+	case MAX98927_R005A_BROWNOUT_LVL1_THRESH
+		... MAX98927_R0061_BROWNOUT_AMP1_CLIP_MODE:
+	case MAX98927_R0072_BROWNOUT_LVL1_CUR_LIMIT
+		... MAX98927_R0087_ENV_TRACK_BOOST_VOUT_READ:
+	case MAX98927_R00FF_GLOBAL_SHDN:
+	case MAX98927_R0100_SOFT_RESET:
+	case MAX98927_R01FF_REV_ID:
+		return true;
+	default:
+		return false;
+	}
+};
+
+static bool max98927_volatile_reg(struct device *dev, unsigned int reg)
+{
+	switch (reg) {
+	case MAX98927_R0001_INT_RAW1 ... MAX98927_R0009_INT_FLAG3:
+		return true;
+	default:
+		return false;
+	}
+}
+
+static const char * const max98927_boost_voltage_text[] = {
+	"6.5V", "6.625V", "6.75V", "6.875V", "7V", "7.125V", "7.25V", "7.375V",
+	"7.5V", "7.625V", "7.75V", "7.875V", "8V", "8.125V", "8.25V", "8.375V",
+	"8.5V", "8.625V", "8.75V", "8.875V", "9V", "9.125V", "9.25V", "9.375V",
+	"9.5V", "9.625V", "9.75V", "9.875V", "10V"
+};
+
+static SOC_ENUM_SINGLE_DECL(max98927_boost_voltage,
+		MAX98927_R0040_BOOST_CTRL0, 0,
+		max98927_boost_voltage_text);
+
+static const char * const max98927_current_limit_text[] = {
+	"1.00A", "1.10A", "1.20A", "1.30A", "1.40A", "1.50A", "1.60A", "1.70A",
+	"1.80A", "1.90A", "2.00A", "2.10A", "2.20A", "2.30A", "2.40A", "2.50A",
+	"2.60A", "2.70A", "2.80A", "2.90A", "3.00A", "3.10A", "3.20A", "3.30A",
+	"3.40A", "3.50A", "3.60A", "3.70A", "3.80A", "3.90A", "4.00A", "4.10A"
+};
+
+static SOC_ENUM_SINGLE_DECL(max98927_current_limit,
+		MAX98927_R0042_BOOST_CTRL1, 1,
+		max98927_current_limit_text);
+
+static const struct snd_kcontrol_new max98927_snd_controls[] = {
+	SOC_SINGLE_TLV("Speaker Volume", MAX98927_R003C_SPK_GAIN,
+		0, 6, 0,
+		max98927_spk_tlv),
+	SOC_SINGLE_TLV("Digital Volume", MAX98927_R0036_AMP_VOL_CTRL,
+		0, (1<<MAX98927_AMP_VOL_WIDTH)-1, 0,
+		max98927_digital_tlv),
+	SOC_SINGLE("Amp DSP Switch", MAX98927_R0052_BROWNOUT_EN,
+		MAX98927_BROWNOUT_DSP_SHIFT, 1, 0),
+	SOC_SINGLE("Ramp Switch", MAX98927_R0037_AMP_DSP_CFG,
+		MAX98927_AMP_DSP_CFG_RMP_SHIFT, 1, 0),
+	SOC_SINGLE("DRE Switch", MAX98927_R0039_DRE_CTRL,
+		MAX98927_DRE_EN_SHIFT, 1, 0),
+	SOC_SINGLE("Volume Location Switch", MAX98927_R0036_AMP_VOL_CTRL,
+		MAX98927_AMP_VOL_SEL_SHIFT, 1, 0),
+	SOC_ENUM("Boost Output Voltage", max98927_boost_voltage),
+	SOC_ENUM("Current Limit", max98927_current_limit),
+};
+
+static const struct snd_soc_dapm_route max98927_audio_map[] = {
+	{"Amp Enable", NULL, "DAI_OUT"},
+	{"DAI Sel Mux", "Left", "Amp Enable"},
+	{"DAI Sel Mux", "Right", "Amp Enable"},
+	{"DAI Sel Mux", "LeftRight", "Amp Enable"},
+	{"BE_OUT", NULL, "DAI Sel Mux"},
+};
+
+static struct snd_soc_dai_driver max98927_dai[] = {
+	{
+		.name = "max98927-aif1",
+		.playback = {
+			.stream_name = "HiFi Playback",
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = MAX98927_RATES,
+			.formats = MAX98927_FORMATS,
+		},
+		.capture = {
+			.stream_name = "HiFi Capture",
+			.channels_min = 1,
+			.channels_max = 2,
+			.rates = MAX98927_RATES,
+			.formats = MAX98927_FORMATS,
+		},
+		.ops = &max98927_dai_ops,
+	}
+};
+
+static int max98927_probe(struct snd_soc_codec *codec)
+{
+	struct max98927_priv *max98927 = snd_soc_codec_get_drvdata(codec);
+
+	max98927->codec = codec;
+	codec->control_data = max98927->regmap;
+	codec->cache_bypass = 1;
+
+	/* Software Reset */
+	regmap_write(max98927->regmap,
+		MAX98927_R0100_SOFT_RESET, MAX98927_SOFT_RESET);
+
+	/* IV default slot configuration */
+	regmap_write(max98927->regmap,
+		MAX98927_R001C_PCM_TX_HIZ_CTRL_A,
+		0xFF);
+	regmap_write(max98927->regmap,
+		MAX98927_R001D_PCM_TX_HIZ_CTRL_B,
+		0xFF);
+	regmap_write(max98927->regmap,
+		MAX98927_R0025_PCM_TO_SPK_MONOMIX_A,
+		0x80);
+	regmap_write(max98927->regmap,
+		MAX98927_R0026_PCM_TO_SPK_MONOMIX_B,
+		0x1);
+	/* Set inital volume (+13dB) */
+	regmap_write(max98927->regmap,
+		MAX98927_R0036_AMP_VOL_CTRL,
+		0x38);
+	regmap_write(max98927->regmap,
+		MAX98927_R003C_SPK_GAIN,
+		0x05);
+	/* Enable DC blocker */
+	regmap_write(max98927->regmap,
+		MAX98927_R0037_AMP_DSP_CFG,
+		0x03);
+	/* Enable IMON VMON DC blocker */
+	regmap_write(max98927->regmap,
+		MAX98927_R003F_MEAS_DSP_CFG,
+		0xF7);
+	/* Boost Output Voltage & Current limit */
+	regmap_write(max98927->regmap,
+		MAX98927_R0040_BOOST_CTRL0,
+		0x1C);
+	regmap_write(max98927->regmap,
+		MAX98927_R0042_BOOST_CTRL1,
+		0x3E);
+	/* Measurement ADC config */
+	regmap_write(max98927->regmap,
+		MAX98927_R0043_MEAS_ADC_CFG,
+		0x04);
+	regmap_write(max98927->regmap,
+		MAX98927_R0044_MEAS_ADC_BASE_MSB,
+		0x00);
+	regmap_write(max98927->regmap,
+		MAX98927_R0045_MEAS_ADC_BASE_LSB,
+		0x24);
+	/* Brownout Level */
+	regmap_write(max98927->regmap,
+		MAX98927_R007F_BROWNOUT_LVL4_AMP1_CTRL1,
+		0x06);
+	/* Envelope Tracking configuration */
+	regmap_write(max98927->regmap,
+		MAX98927_R0082_ENV_TRACK_VOUT_HEADROOM,
+		0x08);
+	regmap_write(max98927->regmap,
+		MAX98927_R0086_ENV_TRACK_CTRL,
+		0x01);
+	regmap_write(max98927->regmap,
+		MAX98927_R0087_ENV_TRACK_BOOST_VOUT_READ,
+		0x10);
+
+	/* voltage, current slot configuration */
+	regmap_write(max98927->regmap,
+		MAX98927_R001E_PCM_TX_CH_SRC_A,
+		(max98927->i_l_slot<<MAX98927_PCM_TX_CH_SRC_A_I_SHIFT|
+		max98927->v_l_slot)&0xFF);
+
+	if (max98927->v_l_slot < 8) {
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001C_PCM_TX_HIZ_CTRL_A,
+			1 << max98927->v_l_slot, 0);
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001A_PCM_TX_EN_A,
+			1 << max98927->v_l_slot,
+			1 << max98927->v_l_slot);
+	} else {
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001D_PCM_TX_HIZ_CTRL_B,
+			1 << (max98927->v_l_slot - 8), 0);
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001B_PCM_TX_EN_B,
+			1 << (max98927->v_l_slot - 8),
+			1 << (max98927->v_l_slot - 8));
+	}
+
+	if (max98927->i_l_slot < 8) {
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001C_PCM_TX_HIZ_CTRL_A,
+			1 << max98927->i_l_slot, 0);
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001A_PCM_TX_EN_A,
+			1 << max98927->i_l_slot,
+			1 << max98927->i_l_slot);
+	} else {
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001D_PCM_TX_HIZ_CTRL_B,
+			1 << (max98927->i_l_slot - 8), 0);
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001B_PCM_TX_EN_B,
+			1 << (max98927->i_l_slot - 8),
+			1 << (max98927->i_l_slot - 8));
+	}
+
+	/* Set interleave mode */
+	if (max98927->interleave_mode)
+		regmap_update_bits(max98927->regmap,
+			MAX98927_R001F_PCM_TX_CH_SRC_B,
+			MAX98927_PCM_TX_CH_INTERLEAVE_MASK,
+			MAX98927_PCM_TX_CH_INTERLEAVE_MASK);
+	return 0;
+}
+
+static const struct snd_soc_codec_driver soc_codec_dev_max98927 = {
+	.probe = max98927_probe,
+	.component_driver = {
+		.controls = max98927_snd_controls,
+		.num_controls = ARRAY_SIZE(max98927_snd_controls),
+		.dapm_widgets = max98927_dapm_widgets,
+		.num_dapm_widgets = ARRAY_SIZE(max98927_dapm_widgets),
+		.dapm_routes = max98927_audio_map,
+		.num_dapm_routes = ARRAY_SIZE(max98927_audio_map),
+	},
+};
+
+static const struct regmap_config max98927_regmap = {
+	.reg_bits         = 16,
+	.val_bits         = 8,
+	.max_register     = MAX98927_R01FF_REV_ID,
+	.reg_defaults     = max98927_reg,
+	.num_reg_defaults = ARRAY_SIZE(max98927_reg),
+	.readable_reg	  = max98927_readable_register,
+	.volatile_reg	  = max98927_volatile_reg,
+	.cache_type       = REGCACHE_RBTREE,
+};
+
+static void max98927_slot_config(struct i2c_client *i2c,
+	struct max98927_priv *max98927)
+{
+	int value;
+
+	if (!of_property_read_u32(i2c->dev.of_node,
+		"vmon-slot-no", &value))
+		max98927->v_l_slot = value & 0xF;
+	else
+		max98927->v_l_slot = 0;
+	if (!of_property_read_u32(i2c->dev.of_node,
+		"imon-slot-no", &value))
+		max98927->i_l_slot = value & 0xF;
+	else
+		max98927->i_l_slot = 1;
+}
+
+static int max98927_i2c_probe(struct i2c_client *i2c,
+	const struct i2c_device_id *id)
+{
+
+	int ret = 0, value;
+	int reg = 0;
+	struct max98927_priv *max98927 = NULL;
+
+	max98927 = devm_kzalloc(&i2c->dev,
+		sizeof(*max98927), GFP_KERNEL);
+
+	if (!max98927) {
+		ret = -ENOMEM;
+		return ret;
+	}
+	i2c_set_clientdata(i2c, max98927);
+
+	/* update interleave mode info */
+	if (!of_property_read_u32(i2c->dev.of_node,
+		"interleave_mode", &value)) {
+		if (value > 0)
+			max98927->interleave_mode = 1;
+		else
+			max98927->interleave_mode = 0;
+	} else
+		max98927->interleave_mode = 0;
+
+	/* regmap initialization */
+	max98927->regmap
+		= devm_regmap_init_i2c(i2c, &max98927_regmap);
+	if (IS_ERR(max98927->regmap)) {
+		ret = PTR_ERR(max98927->regmap);
+		dev_err(&i2c->dev,
+			"Failed to allocate regmap: %d\n", ret);
+		return ret;
+	}
+
+	/* Check Revision ID */
+	ret = regmap_read(max98927->regmap,
+		MAX98927_R01FF_REV_ID, &reg);
+	if (ret < 0) {
+		dev_err(&i2c->dev,
+			"Failed to read: 0x%02X\n", MAX98927_R01FF_REV_ID);
+		return ret;
+	}
+	dev_info(&i2c->dev, "MAX98927 revisionID: 0x%02X\n", reg);
+
+	/* voltage/current slot configuration */
+	max98927_slot_config(i2c, max98927);
+
+	/* codec registeration */
+	ret = snd_soc_register_codec(&i2c->dev, &soc_codec_dev_max98927,
+		max98927_dai, ARRAY_SIZE(max98927_dai));
+	if (ret < 0)
+		dev_err(&i2c->dev, "Failed to register codec: %d\n", ret);
+
+	return ret;
+}
+
+static int max98927_i2c_remove(struct i2c_client *client)
+{
+	snd_soc_unregister_codec(&client->dev);
+	return 0;
+}
+
+static const struct i2c_device_id max98927_i2c_id[] = {
+	{ "max98927", 0},
+	{ },
+};
+
+MODULE_DEVICE_TABLE(i2c, max98927_i2c_id);
+
+#if defined(CONFIG_OF)
+static const struct of_device_id max98927_of_match[] = {
+	{ .compatible = "maxim,max98927", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, max98927_of_match);
+#endif
+
+#ifdef CONFIG_ACPI
+static const struct acpi_device_id max98927_acpi_match[] = {
+	{ "MX98927", 0 },
+	{},
+};
+MODULE_DEVICE_TABLE(acpi, max98927_acpi_match);
+#endif
+
+static struct i2c_driver max98927_i2c_driver = {
+	.driver = {
+		.name = "max98927",
+		.of_match_table = of_match_ptr(max98927_of_match),
+		.acpi_match_table = ACPI_PTR(max98927_acpi_match),
+		.pm = NULL,
+	},
+	.probe  = max98927_i2c_probe,
+	.remove = max98927_i2c_remove,
+	.id_table = max98927_i2c_id,
+};
+
+module_i2c_driver(max98927_i2c_driver)
+
+MODULE_DESCRIPTION("ALSA SoC MAX98927 driver");
+MODULE_AUTHOR("Ryan Lee <ryans.lee@maximintegrated.com>");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/codecs/max98927.h b/sound/soc/codecs/max98927.h
new file mode 100644
index 000000000000..ece6a608cbe1
--- /dev/null
+++ b/sound/soc/codecs/max98927.h
@@ -0,0 +1,272 @@
+/*
+ * max98927.h  --  MAX98927 ALSA Soc Audio driver
+ *
+ * Copyright 2013-15 Maxim Integrated Products
+ * Author: Ryan Lee <ryans.lee@maximintegrated.com>
+ *
+ *  This program is free software; you can redistribute  it and/or modify it
+ *  under  the terms of  the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the  License, or (at your
+ *  option) any later version.
+ *
+ */
+#ifndef _MAX98927_H
+#define _MAX98927_H
+
+/* Register Values */
+#define MAX98927_R0001_INT_RAW1 0x0001
+#define MAX98927_R0002_INT_RAW2 0x0002
+#define MAX98927_R0003_INT_RAW3 0x0003
+#define MAX98927_R0004_INT_STATE1 0x0004
+#define MAX98927_R0005_INT_STATE2 0x0005
+#define MAX98927_R0006_INT_STATE3 0x0006
+#define MAX98927_R0007_INT_FLAG1 0x0007
+#define MAX98927_R0008_INT_FLAG2 0x0008
+#define MAX98927_R0009_INT_FLAG3 0x0009
+#define MAX98927_R000A_INT_EN1 0x000A
+#define MAX98927_R000B_INT_EN2 0x000B
+#define MAX98927_R000C_INT_EN3 0x000C
+#define MAX98927_R000D_INT_FLAG_CLR1	0x000D
+#define MAX98927_R000E_INT_FLAG_CLR2	0x000E
+#define MAX98927_R000F_INT_FLAG_CLR3	0x000F
+#define MAX98927_R0010_IRQ_CTRL 0x0010
+#define MAX98927_R0011_CLK_MON 0x0011
+#define MAX98927_R0012_WDOG_CTRL 0x0012
+#define MAX98927_R0013_WDOG_RST 0x0013
+#define MAX98927_R0014_MEAS_ADC_THERM_WARN_THRESH 0x0014
+#define MAX98927_R0015_MEAS_ADC_THERM_SHDN_THRESH 0x0015
+#define MAX98927_R0016_MEAS_ADC_THERM_HYSTERESIS 0x0016
+#define MAX98927_R0017_PIN_CFG 0x0017
+#define MAX98927_R0018_PCM_RX_EN_A 0x0018
+#define MAX98927_R0019_PCM_RX_EN_B 0x0019
+#define MAX98927_R001A_PCM_TX_EN_A 0x001A
+#define MAX98927_R001B_PCM_TX_EN_B 0x001B
+#define MAX98927_R001C_PCM_TX_HIZ_CTRL_A 0x001C
+#define MAX98927_R001D_PCM_TX_HIZ_CTRL_B 0x001D
+#define MAX98927_R001E_PCM_TX_CH_SRC_A 0x001E
+#define MAX98927_R001F_PCM_TX_CH_SRC_B 0x001F
+#define MAX98927_R0020_PCM_MODE_CFG 0x0020
+#define MAX98927_R0021_PCM_MASTER_MODE 0x0021
+#define MAX98927_R0022_PCM_CLK_SETUP 0x0022
+#define MAX98927_R0023_PCM_SR_SETUP1 0x0023
+#define MAX98927_R0024_PCM_SR_SETUP2	0x0024
+#define MAX98927_R0025_PCM_TO_SPK_MONOMIX_A 0x0025
+#define MAX98927_R0026_PCM_TO_SPK_MONOMIX_B 0x0026
+#define MAX98927_R0027_ICC_RX_EN_A 0x0027
+#define MAX98927_R0028_ICC_RX_EN_B 0x0028
+#define MAX98927_R002B_ICC_TX_EN_A 0x002B
+#define MAX98927_R002C_ICC_TX_EN_B 0x002C
+#define MAX98927_R002E_ICC_HIZ_MANUAL_MODE 0x002E
+#define MAX98927_R002F_ICC_TX_HIZ_EN_A 0x002F
+#define MAX98927_R0030_ICC_TX_HIZ_EN_B 0x0030
+#define MAX98927_R0031_ICC_LNK_EN 0x0031
+#define MAX98927_R0032_PDM_TX_EN 0x0032
+#define MAX98927_R0033_PDM_TX_HIZ_CTRL 0x0033
+#define MAX98927_R0034_PDM_TX_CTRL 0x0034
+#define MAX98927_R0035_PDM_RX_CTRL 0x0035
+#define MAX98927_R0036_AMP_VOL_CTRL 0x0036
+#define MAX98927_R0037_AMP_DSP_CFG 0x0037
+#define MAX98927_R0038_TONE_GEN_DC_CFG 0x0038
+#define MAX98927_R0039_DRE_CTRL 0x0039
+#define MAX98927_R003A_AMP_EN 0x003A
+#define MAX98927_R003B_SPK_SRC_SEL 0x003B
+#define MAX98927_R003C_SPK_GAIN 0x003C
+#define MAX98927_R003D_SSM_CFG 0x003D
+#define MAX98927_R003E_MEAS_EN 0x003E
+#define MAX98927_R003F_MEAS_DSP_CFG 0x003F
+#define MAX98927_R0040_BOOST_CTRL0 0x0040
+#define MAX98927_R0041_BOOST_CTRL3 0x0041
+#define MAX98927_R0042_BOOST_CTRL1 0x0042
+#define MAX98927_R0043_MEAS_ADC_CFG 0x0043
+#define MAX98927_R0044_MEAS_ADC_BASE_MSB 0x0044
+#define MAX98927_R0045_MEAS_ADC_BASE_LSB 0x0045
+#define MAX98927_R0046_ADC_CH0_DIVIDE 0x0046
+#define MAX98927_R0047_ADC_CH1_DIVIDE 0x0047
+#define MAX98927_R0048_ADC_CH2_DIVIDE 0x0048
+#define MAX98927_R0049_ADC_CH0_FILT_CFG 0x0049
+#define MAX98927_R004A_ADC_CH1_FILT_CFG 0x004A
+#define MAX98927_R004B_ADC_CH2_FILT_CFG 0x004B
+#define MAX98927_R004C_MEAS_ADC_CH0_READ 0x004C
+#define MAX98927_R004D_MEAS_ADC_CH1_READ 0x004D
+#define MAX98927_R004E_MEAS_ADC_CH2_READ 0x004E
+#define MAX98927_R0051_BROWNOUT_STATUS 0x0051
+#define MAX98927_R0052_BROWNOUT_EN 0x0052
+#define MAX98927_R0053_BROWNOUT_INFINITE_HOLD 0x0053
+#define MAX98927_R0054_BROWNOUT_INFINITE_HOLD_CLR 0x0054
+#define MAX98927_R0055_BROWNOUT_LVL_HOLD 0x0055
+#define MAX98927_R005A_BROWNOUT_LVL1_THRESH 0x005A
+#define MAX98927_R005B_BROWNOUT_LVL2_THRESH 0x005B
+#define MAX98927_R005C_BROWNOUT_LVL3_THRESH 0x005C
+#define MAX98927_R005D_BROWNOUT_LVL4_THRESH 0x005D
+#define MAX98927_R005E_BROWNOUT_THRESH_HYSTERYSIS 0x005E
+#define MAX98927_R005F_BROWNOUT_AMP_LIMITER_ATK_REL 0x005F
+#define MAX98927_R0060_BROWNOUT_AMP_GAIN_ATK_REL 0x0060
+#define MAX98927_R0061_BROWNOUT_AMP1_CLIP_MODE 0x0061
+#define MAX98927_R0072_BROWNOUT_LVL1_CUR_LIMIT 0x0072
+#define MAX98927_R0073_BROWNOUT_LVL1_AMP1_CTRL1 0x0073
+#define MAX98927_R0074_BROWNOUT_LVL1_AMP1_CTRL2 0x0074
+#define MAX98927_R0075_BROWNOUT_LVL1_AMP1_CTRL3 0x0075
+#define MAX98927_R0076_BROWNOUT_LVL2_CUR_LIMIT 0x0076
+#define MAX98927_R0077_BROWNOUT_LVL2_AMP1_CTRL1 0x0077
+#define MAX98927_R0078_BROWNOUT_LVL2_AMP1_CTRL2 0x0078
+#define MAX98927_R0079_BROWNOUT_LVL2_AMP1_CTRL3 0x0079
+#define MAX98927_R007A_BROWNOUT_LVL3_CUR_LIMIT 0x007A
+#define MAX98927_R007B_BROWNOUT_LVL3_AMP1_CTRL1 0x007B
+#define MAX98927_R007C_BROWNOUT_LVL3_AMP1_CTRL2 0x007C
+#define MAX98927_R007D_BROWNOUT_LVL3_AMP1_CTRL3 0x007D
+#define MAX98927_R007E_BROWNOUT_LVL4_CUR_LIMIT 0x007E
+#define MAX98927_R007F_BROWNOUT_LVL4_AMP1_CTRL1 0x007F
+#define MAX98927_R0080_BROWNOUT_LVL4_AMP1_CTRL2 0x0080
+#define MAX98927_R0081_BROWNOUT_LVL4_AMP1_CTRL3 0x0081
+#define MAX98927_R0082_ENV_TRACK_VOUT_HEADROOM 0x0082
+#define MAX98927_R0083_ENV_TRACK_BOOST_VOUT_DELAY 0x0083
+#define MAX98927_R0084_ENV_TRACK_REL_RATE 0x0084
+#define MAX98927_R0085_ENV_TRACK_HOLD_RATE 0x0085
+#define MAX98927_R0086_ENV_TRACK_CTRL 0x0086
+#define MAX98927_R0087_ENV_TRACK_BOOST_VOUT_READ 0x0087
+#define MAX98927_R00FF_GLOBAL_SHDN 0x00FF
+#define MAX98927_R0100_SOFT_RESET 0x0100
+#define MAX98927_R01FF_REV_ID 0x01FF
+
+/* MAX98927_R0018_PCM_RX_EN_A */
+#define MAX98927_PCM_RX_CH0_EN (0x1 << 0)
+#define MAX98927_PCM_RX_CH1_EN (0x1 << 1)
+#define MAX98927_PCM_RX_CH2_EN (0x1 << 2)
+#define MAX98927_PCM_RX_CH3_EN (0x1 << 3)
+#define MAX98927_PCM_RX_CH4_EN (0x1 << 4)
+#define MAX98927_PCM_RX_CH5_EN (0x1 << 5)
+#define MAX98927_PCM_RX_CH6_EN (0x1 << 6)
+#define MAX98927_PCM_RX_CH7_EN (0x1 << 7)
+
+/* MAX98927_R001A_PCM_TX_EN_A */
+#define MAX98927_PCM_TX_CH0_EN (0x1 << 0)
+#define MAX98927_PCM_TX_CH1_EN (0x1 << 1)
+#define MAX98927_PCM_TX_CH2_EN (0x1 << 2)
+#define MAX98927_PCM_TX_CH3_EN (0x1 << 3)
+#define MAX98927_PCM_TX_CH4_EN (0x1 << 4)
+#define MAX98927_PCM_TX_CH5_EN (0x1 << 5)
+#define MAX98927_PCM_TX_CH6_EN (0x1 << 6)
+#define MAX98927_PCM_TX_CH7_EN (0x1 << 7)
+
+/* MAX98927_R001E_PCM_TX_CH_SRC_A */
+#define MAX98927_PCM_TX_CH_SRC_A_V_SHIFT (0)
+#define MAX98927_PCM_TX_CH_SRC_A_I_SHIFT (4)
+
+/* MAX98927_R001F_PCM_TX_CH_SRC_B */
+#define MAX98927_PCM_TX_CH_INTERLEAVE_MASK (0x1 << 5)
+
+/* MAX98927_R0020_PCM_MODE_CFG */
+#define MAX98927_PCM_MODE_CFG_PCM_BCLKEDGE (0x1 << 2)
+#define MAX98927_PCM_MODE_CFG_FORMAT_MASK (0x7 << 3)
+#define MAX98927_PCM_MODE_CFG_FORMAT_SHIFT (3)
+#define MAX98927_PCM_FORMAT_I2S (0x0 << 0)
+#define MAX98927_PCM_FORMAT_LJ (0x1 << 0)
+
+#define MAX98927_PCM_MODE_CFG_CHANSZ_MASK (0x3 << 6)
+#define MAX98927_PCM_MODE_CFG_CHANSZ_16 (0x1 << 6)
+#define MAX98927_PCM_MODE_CFG_CHANSZ_24 (0x2 << 6)
+#define MAX98927_PCM_MODE_CFG_CHANSZ_32 (0x3 << 6)
+
+/* MAX98927_R0021_PCM_MASTER_MODE */
+#define MAX98927_PCM_MASTER_MODE_MASK (0x3 << 0)
+#define MAX98927_PCM_MASTER_MODE_SLAVE (0x0 << 0)
+#define MAX98927_PCM_MASTER_MODE_MASTER (0x3 << 0)
+
+#define MAX98927_PCM_MASTER_MODE_MCLK_MASK (0xF << 2)
+#define MAX98927_PCM_MASTER_MODE_MCLK_RATE_SHIFT (2)
+
+/* MAX98927_R0022_PCM_CLK_SETUP */
+#define MAX98927_PCM_CLK_SETUP_BSEL_MASK (0xF << 0)
+
+/* MAX98927_R0023_PCM_SR_SETUP1 */
+#define MAX98927_PCM_SR_SET1_SR_MASK (0xF << 0)
+
+#define MAX98927_PCM_SR_SET1_SR_8000 (0x0 << 0)
+#define MAX98927_PCM_SR_SET1_SR_11025 (0x1 << 0)
+#define MAX98927_PCM_SR_SET1_SR_12000 (0x2 << 0)
+#define MAX98927_PCM_SR_SET1_SR_16000 (0x3 << 0)
+#define MAX98927_PCM_SR_SET1_SR_22050 (0x4 << 0)
+#define MAX98927_PCM_SR_SET1_SR_24000 (0x5 << 0)
+#define MAX98927_PCM_SR_SET1_SR_32000 (0x6 << 0)
+#define MAX98927_PCM_SR_SET1_SR_44100 (0x7 << 0)
+#define MAX98927_PCM_SR_SET1_SR_48000 (0x8 << 0)
+
+/* MAX98927_R0024_PCM_SR_SETUP2 */
+#define MAX98927_PCM_SR_SET2_SR_MASK (0xF << 4)
+#define MAX98927_PCM_SR_SET2_SR_SHIFT (4)
+#define MAX98927_PCM_SR_SET2_IVADC_SR_MASK (0xf << 0)
+
+/* MAX98927_R0025_PCM_TO_SPK_MONOMIX_A */
+#define MAX98927_PCM_TO_SPK_MONOMIX_CFG_MASK (0x3 << 6)
+#define MAX98927_PCM_TO_SPK_MONOMIX_CFG_SHIFT (6)
+
+/* MAX98927_R0035_PDM_RX_CTRL */
+#define MAX98927_PDM_RX_EN_MASK (0x1 << 0)
+
+/* MAX98927_R0036_AMP_VOL_CTRL */
+#define MAX98927_AMP_VOL_SEL (0x1 << 7)
+#define MAX98927_AMP_VOL_SEL_WIDTH (1)
+#define MAX98927_AMP_VOL_SEL_SHIFT (7)
+#define MAX98927_AMP_VOL_MASK (0x7f << 0)
+#define MAX98927_AMP_VOL_WIDTH (7)
+#define MAX98927_AMP_VOL_SHIFT (0)
+
+/* MAX98927_R0037_AMP_DSP_CFG */
+#define MAX98927_AMP_DSP_CFG_DCBLK_EN (0x1 << 0)
+#define MAX98927_AMP_DSP_CFG_DITH_EN (0x1 << 1)
+#define MAX98927_AMP_DSP_CFG_RMP_BYPASS (0x1 << 4)
+#define MAX98927_AMP_DSP_CFG_DAC_INV (0x1 << 5)
+#define MAX98927_AMP_DSP_CFG_RMP_SHIFT (4)
+
+/* MAX98927_R0039_DRE_CTRL */
+#define MAX98927_DRE_CTRL_DRE_EN	(0x1 << 0)
+#define MAX98927_DRE_EN_SHIFT 0x1
+
+/* MAX98927_R003A_AMP_EN */
+#define MAX98927_AMP_EN_MASK (0x1 << 0)
+
+/* MAX98927_R003B_SPK_SRC_SEL */
+#define MAX98927_SPK_SRC_MASK (0x3 << 0)
+
+/* MAX98927_R003C_SPK_GAIN */
+#define MAX98927_SPK_PCM_GAIN_MASK (0x7 << 0)
+#define MAX98927_SPK_PDM_GAIN_MASK (0x7 << 4)
+#define MAX98927_SPK_GAIN_WIDTH (3)
+
+/* MAX98927_R003E_MEAS_EN */
+#define MAX98927_MEAS_V_EN (0x1 << 0)
+#define MAX98927_MEAS_I_EN (0x1 << 1)
+
+/* MAX98927_R0040_BOOST_CTRL0 */
+#define MAX98927_BOOST_CTRL0_VOUT_MASK (0x1f << 0)
+#define MAX98927_BOOST_CTRL0_PVDD_MASK (0x1 << 7)
+#define MAX98927_BOOST_CTRL0_PVDD_EN_SHIFT (7)
+
+/* MAX98927_R0052_BROWNOUT_EN */
+#define MAX98927_BROWNOUT_BDE_EN (0x1 << 0)
+#define MAX98927_BROWNOUT_AMP_EN (0x1 << 1)
+#define MAX98927_BROWNOUT_DSP_EN (0x1 << 2)
+#define MAX98927_BROWNOUT_DSP_SHIFT (2)
+
+/* MAX98927_R0100_SOFT_RESET */
+#define MAX98927_SOFT_RESET (0x1 << 0)
+
+/* MAX98927_R00FF_GLOBAL_SHDN */
+#define MAX98927_GLOBAL_EN_MASK (0x1 << 0)
+
+struct max98927_priv {
+	struct regmap *regmap;
+	struct snd_soc_codec *codec;
+	struct max98927_pdata *pdata;
+	unsigned int spk_gain;
+	unsigned int sysclk;
+	unsigned int v_l_slot;
+	unsigned int i_l_slot;
+	bool interleave_mode;
+	unsigned int ch_size;
+	unsigned int rate;
+	unsigned int iface;
+	unsigned int master;
+	unsigned int digital_gain;
+};
+#endif
