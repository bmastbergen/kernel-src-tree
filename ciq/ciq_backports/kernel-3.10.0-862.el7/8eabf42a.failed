x86/boot/KASLR: Fix kexec crash due to 'virt_addr' calculation bug

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Baoquan He <bhe@redhat.com>
commit 8eabf42ae5237e6b699aeac687b5b629e3537c8d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8eabf42a.failed

Kernel text KASLR is separated into physical address and virtual
address randomization. And for virtual address randomization, we
only randomiza to get an offset between 16M and KERNEL_IMAGE_SIZE.
So the initial value of 'virt_addr' should be LOAD_PHYSICAL_ADDR,
but not the original kernel loading address 'output'.

The bug will cause kernel boot failure if kernel is loaded at a different
position than the address, 16M, which is decided at compiled time.
Kexec/kdump is such practical case.

To fix it, just assign LOAD_PHYSICAL_ADDR to virt_addr as initial
value.

	Tested-by: Dave Young <dyoung@redhat.com>
	Signed-off-by: Baoquan He <bhe@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Fixes: 8391c73 ("x86/KASLR: Randomize virtual address separately")
Link: http://lkml.kernel.org/r/1498567146-11990-3-git-send-email-bhe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 8eabf42ae5237e6b699aeac687b5b629e3537c8d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/kaslr.c
#	arch/x86/boot/compressed/misc.c
diff --cc arch/x86/boot/compressed/kaslr.c
index b93f968ac8d4,56a7e9201741..000000000000
--- a/arch/x86/boot/compressed/kaslr.c
+++ b/arch/x86/boot/compressed/kaslr.c
@@@ -625,11 -564,8 +625,16 @@@ void choose_random_location(unsigned lo
  {
  	unsigned long random_addr, min_addr;
  
++<<<<<<< HEAD
 +	/* By default, keep output position unchanged. */
 +	*virt_addr = *output;
 +
 +	if (!cmdline_find_option_bool("kaslr")) {
 +		debug_putstr("KASLR disabled: no 'kaslr' on cmdline.");
++=======
+ 	if (cmdline_find_option_bool("nokaslr")) {
+ 		warn("KASLR disabled: 'nokaslr' on cmdline.");
++>>>>>>> 8eabf42ae523 (x86/boot/KASLR: Fix kexec crash due to 'virt_addr' calculation bug)
  		return;
  	}
  
diff --cc arch/x86/boot/compressed/misc.c
index 0663537f9b05,00241c815524..000000000000
--- a/arch/x86/boot/compressed/misc.c
+++ b/arch/x86/boot/compressed/misc.c
@@@ -330,8 -338,7 +330,12 @@@ asmlinkage void *extract_kernel(void *r
  				  unsigned long output_len)
  {
  	const unsigned long kernel_total_size = VO__end - VO__text;
++<<<<<<< HEAD
 +	unsigned long virt_addr = (unsigned long)output;
 +	unsigned char *output_orig = output;
++=======
+ 	unsigned long virt_addr = LOAD_PHYSICAL_ADDR;
++>>>>>>> 8eabf42ae523 (x86/boot/KASLR: Fix kexec crash due to 'virt_addr' calculation bug)
  
  	/* Retain x86 boot parameters pointer passed from startup_32/64. */
  	boot_params = rmode;
* Unmerged path arch/x86/boot/compressed/kaslr.c
* Unmerged path arch/x86/boot/compressed/misc.c
diff --git a/arch/x86/boot/compressed/misc.h b/arch/x86/boot/compressed/misc.h
index 77ab75506e80..0e5a71e97a60 100644
--- a/arch/x86/boot/compressed/misc.h
+++ b/arch/x86/boot/compressed/misc.h
@@ -81,8 +81,6 @@ static inline void choose_random_location(unsigned long input,
 					  unsigned long output_size,
 					  unsigned long *virt_addr)
 {
-	/* No change from existing output location. */
-	*virt_addr = *output;
 }
 #endif
 
