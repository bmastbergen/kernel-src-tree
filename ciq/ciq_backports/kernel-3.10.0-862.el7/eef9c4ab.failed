x86/mm: Add SME support for read_cr3_pa()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] mm: Add SME support for read_cr3_pa() (Suravee Suthikulpanit) [1361287]
Rebuild_FUZZ: 94.87%
commit-author Tom Lendacky <thomas.lendacky@amd.com>
commit eef9c4abe77f55b1600f59d8ac5f1d953e2f5384
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/eef9c4ab.failed

The CR3 register entry can contain the SME encryption mask that indicates
the PGD is encrypted.  The encryption mask should not be used when
creating a virtual address from the CR3 register, so remove the SME
encryption mask in the read_cr3_pa() function.

During early boot SME will need to use a native version of read_cr3_pa(),
so create native_read_cr3_pa().

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brijesh Singh <brijesh.singh@amd.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Cc: Larry Woodman <lwoodman@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Michael S. Tsirkin <mst@redhat.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Radim Krčmář <rkrcmar@redhat.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Toshimitsu Kani <toshi.kani@hpe.com>
	Cc: kasan-dev@googlegroups.com
	Cc: kvm@vger.kernel.org
	Cc: linux-arch@vger.kernel.org
	Cc: linux-doc@vger.kernel.org
	Cc: linux-efi@vger.kernel.org
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/767b085c384a46f67f451f8589903a462c7ff68a.1500319216.git.thomas.lendacky@amd.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit eef9c4abe77f55b1600f59d8ac5f1d953e2f5384)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/processor-flags.h
#	arch/x86/include/asm/processor.h
diff --cc arch/x86/include/asm/processor-flags.h
index 39fb618e2211,f5d3e50af98c..000000000000
--- a/arch/x86/include/asm/processor-flags.h
+++ b/arch/x86/include/asm/processor-flags.h
@@@ -8,4 -9,40 +9,43 @@@
  #else
  #define X86_VM_MASK	0 /* No VM86 support */
  #endif
++<<<<<<< HEAD
++=======
+ 
+ /*
+  * CR3's layout varies depending on several things.
+  *
+  * If CR4.PCIDE is set (64-bit only), then CR3[11:0] is the address space ID.
+  * If PAE is enabled, then CR3[11:5] is part of the PDPT address
+  * (i.e. it's 32-byte aligned, not page-aligned) and CR3[4:0] is ignored.
+  * Otherwise (non-PAE, non-PCID), CR3[3] is PWT, CR3[4] is PCD, and
+  * CR3[2:0] and CR3[11:5] are ignored.
+  *
+  * In all cases, Linux puts zeros in the low ignored bits and in PWT and PCD.
+  *
+  * CR3[63] is always read as zero.  If CR4.PCIDE is set, then CR3[63] may be
+  * written as 1 to prevent the write to CR3 from flushing the TLB.
+  *
+  * On systems with SME, one bit (in a variable position!) is stolen to indicate
+  * that the top-level paging structure is encrypted.
+  *
+  * All of the remaining bits indicate the physical address of the top-level
+  * paging structure.
+  *
+  * CR3_ADDR_MASK is the mask used by read_cr3_pa().
+  */
+ #ifdef CONFIG_X86_64
+ /* Mask off the address space ID and SME encryption bits. */
+ #define CR3_ADDR_MASK __sme_clr(0x7FFFFFFFFFFFF000ull)
+ #define CR3_PCID_MASK 0xFFFull
+ #else
+ /*
+  * CR3_ADDR_MASK needs at least bits 31:5 set on PAE systems, and we save
+  * a tiny bit of code size by setting all the bits.
+  */
+ #define CR3_ADDR_MASK 0xFFFFFFFFull
+ #define CR3_PCID_MASK 0ull
+ #endif
+ 
++>>>>>>> eef9c4abe77f (x86/mm: Add SME support for read_cr3_pa())
  #endif /* _ASM_X86_PROCESSOR_FLAGS_H */
diff --cc arch/x86/include/asm/processor.h
index 5023ca6231a6,973709d2938f..000000000000
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@@ -224,9 -214,40 +224,43 @@@ static inline void native_cpuid(unsigne
  	    : "memory");
  }
  
++<<<<<<< HEAD
++=======
+ #define native_cpuid_reg(reg)					\
+ static inline unsigned int native_cpuid_##reg(unsigned int op)	\
+ {								\
+ 	unsigned int eax = op, ebx, ecx = 0, edx;		\
+ 								\
+ 	native_cpuid(&eax, &ebx, &ecx, &edx);			\
+ 								\
+ 	return reg;						\
+ }
+ 
+ /*
+  * Native CPUID functions returning a single datum.
+  */
+ native_cpuid_reg(eax)
+ native_cpuid_reg(ebx)
+ native_cpuid_reg(ecx)
+ native_cpuid_reg(edx)
+ 
+ /*
+  * Friendlier CR3 helpers.
+  */
+ static inline unsigned long read_cr3_pa(void)
+ {
+ 	return __read_cr3() & CR3_ADDR_MASK;
+ }
+ 
+ static inline unsigned long native_read_cr3_pa(void)
+ {
+ 	return __native_read_cr3() & CR3_ADDR_MASK;
+ }
+ 
++>>>>>>> eef9c4abe77f (x86/mm: Add SME support for read_cr3_pa())
  static inline void load_cr3(pgd_t *pgdir)
  {
 -	write_cr3(__sme_pa(pgdir));
 +	write_cr3(__pa(pgdir));
  }
  
  #ifdef CONFIG_X86_32
* Unmerged path arch/x86/include/asm/processor-flags.h
* Unmerged path arch/x86/include/asm/processor.h
