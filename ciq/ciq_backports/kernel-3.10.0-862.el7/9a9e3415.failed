fs: configfs: Drop unused parameter from configfs_undepend_item()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [kernel] configfs: Drop unused parameter from configfs_undepend_item() (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 96.83%
commit-author Krzysztof Opasiak <k.opasiak@samsung.com>
commit 9a9e3415edd567813d52c8de402042b9720c54f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9a9e3415.failed

subsys parameter is never used by configfs_undepend_item()
so there is no point in passing it to this function.

	Signed-off-by: Krzysztof Opasiak <k.opasiak@samsung.com>
	Cc: Joel Becker <jlbec@evilplan.org>
	Cc: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 9a9e3415edd567813d52c8de402042b9720c54f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_configfs.c
diff --cc drivers/target/target_core_configfs.c
index 60cccf317ddb,2e47fe68e4ea..000000000000
--- a/drivers/target/target_core_configfs.c
+++ b/drivers/target/target_core_configfs.c
@@@ -291,10 -270,17 +291,24 @@@ static struct configfs_subsystem target
  	},
  };
  
++<<<<<<< HEAD
 +struct configfs_subsystem *target_core_subsystem[] = {
 +	&target_core_fabrics,
 +	NULL,
 +};
++=======
+ int target_depend_item(struct config_item *item)
+ {
+ 	return configfs_depend_item(&target_core_fabrics, item);
+ }
+ EXPORT_SYMBOL(target_depend_item);
+ 
+ void target_undepend_item(struct config_item *item)
+ {
+ 	return configfs_undepend_item(item);
+ }
+ EXPORT_SYMBOL(target_undepend_item);
++>>>>>>> 9a9e3415edd5 (fs: configfs: Drop unused parameter from configfs_undepend_item())
  
  /*##############################################################################
  // Start functions called by external Target Fabrics Modules
* Unmerged path drivers/target/target_core_configfs.c
diff --git a/fs/configfs/dir.c b/fs/configfs/dir.c
index d4bc6dd6231b..a40ce00b9844 100644
--- a/fs/configfs/dir.c
+++ b/fs/configfs/dir.c
@@ -1173,8 +1173,7 @@ EXPORT_SYMBOL(configfs_depend_item);
  * configfs_depend_item() because we know that that the client driver is
  * pinned, thus the subsystem is pinned, and therefore configfs is pinned.
  */
-void configfs_undepend_item(struct configfs_subsystem *subsys,
-			    struct config_item *target)
+void configfs_undepend_item(struct config_item *target)
 {
 	struct configfs_dirent *sd;
 
diff --git a/fs/ocfs2/cluster/nodemanager.c b/fs/ocfs2/cluster/nodemanager.c
index bb240647ca5f..6100c98e46dd 100644
--- a/fs/ocfs2/cluster/nodemanager.c
+++ b/fs/ocfs2/cluster/nodemanager.c
@@ -897,7 +897,7 @@ int o2nm_depend_item(struct config_item *item)
 
 void o2nm_undepend_item(struct config_item *item)
 {
-	configfs_undepend_item(&o2nm_cluster_group.cs_subsys, item);
+	configfs_undepend_item(item);
 }
 
 int o2nm_depend_this_node(void)
diff --git a/include/linux/configfs.h b/include/linux/configfs.h
index a5ae1cb26af8..066e914ac92f 100644
--- a/include/linux/configfs.h
+++ b/include/linux/configfs.h
@@ -291,7 +291,8 @@ void configfs_remove_default_groups(struct config_group *group);
 
 /* These functions can sleep and can alloc with GFP_KERNEL */
 /* WARNING: These cannot be called underneath configfs callbacks!! */
-int configfs_depend_item(struct configfs_subsystem *subsys, struct config_item *target);
-void configfs_undepend_item(struct configfs_subsystem *subsys, struct config_item *target);
+int configfs_depend_item(struct configfs_subsystem *subsys,
+			 struct config_item *target);
+void configfs_undepend_item(struct config_item *target);
 
 #endif /* _CONFIGFS_H_ */
