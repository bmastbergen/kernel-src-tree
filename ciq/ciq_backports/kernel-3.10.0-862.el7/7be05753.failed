RDMA: Fix return value check for ib_get_eth_speed()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Selvin Xavier <selvin.xavier@broadcom.com>
commit 7be05753ccc27ce056d45f06a50d150927a88ed7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7be05753.failed

ib_get_eth_speed() return 0 on success. Fixing the condition checking
and prevent reporting failure for query_port verb.

Fixes: d41861942fc5 ("Add generic function to extract IB speed from netdev")
	Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
	Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
	Reviewed-by: Yuval Shaia <yuval.shaia@oracle.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 7be05753ccc27ce056d45f06a50d150927a88ed7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/bnxt_re/ib_verbs.c
#	drivers/infiniband/hw/usnic/usnic_ib_verbs.c
diff --cc drivers/infiniband/hw/bnxt_re/ib_verbs.c
index 33af2e3de399,43b3dee4b6ba..000000000000
--- a/drivers/infiniband/hw/bnxt_re/ib_verbs.c
+++ b/drivers/infiniband/hw/bnxt_re/ib_verbs.c
@@@ -266,25 -264,9 +266,31 @@@ int bnxt_re_query_port(struct ib_devic
  	 * IB stack to avoid race in the NETDEV_UNREG path
  	 */
  	if (test_bit(BNXT_RE_FLAG_IBDEV_REGISTERED, &rdev->flags))
++<<<<<<< HEAD
 +		__to_ib_speed_width(rdev->netdev, &port_attr->active_speed,
 +				    &port_attr->active_width);
 +	return 0;
 +}
 +
 +int bnxt_re_modify_port(struct ib_device *ibdev, u8 port_num,
 +			int port_modify_mask,
 +			struct ib_port_modify *port_modify)
 +{
 +	switch (port_modify_mask) {
 +	case IB_PORT_SHUTDOWN:
 +		break;
 +	case IB_PORT_INIT_TYPE:
 +		break;
 +	case IB_PORT_RESET_QKEY_CNTR:
 +		break;
 +	default:
 +		break;
 +	}
++=======
+ 		if (ib_get_eth_speed(ibdev, port_num, &port_attr->active_speed,
+ 				     &port_attr->active_width))
+ 			return -EINVAL;
++>>>>>>> 7be05753ccc2 (RDMA: Fix return value check for ib_get_eth_speed())
  	return 0;
  }
  
diff --cc drivers/infiniband/hw/usnic/usnic_ib_verbs.c
index d102b50b5684,97dd79ebb590..000000000000
--- a/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
+++ b/drivers/infiniband/hw/usnic/usnic_ib_verbs.c
@@@ -331,8 -309,13 +331,18 @@@ int usnic_ib_query_port(struct ib_devic
  	usnic_dbg("\n");
  
  	mutex_lock(&us_ibdev->usdev_lock);
++<<<<<<< HEAD
 +	__ethtool_get_link_ksettings(us_ibdev->netdev, &cmd);
 +	memset(props, 0, sizeof(*props));
++=======
+ 	if (ib_get_eth_speed(ibdev, port, &props->active_speed,
+ 			     &props->active_width)) {
+ 		mutex_unlock(&us_ibdev->usdev_lock);
+ 		return -EINVAL;
+ 	}
+ 
+ 	/* props being zeroed by the caller, avoid zeroing it here */
++>>>>>>> 7be05753ccc2 (RDMA: Fix return value check for ib_get_eth_speed())
  
  	props->lid = 0;
  	props->lmc = 1;
* Unmerged path drivers/infiniband/hw/bnxt_re/ib_verbs.c
* Unmerged path drivers/infiniband/hw/usnic/usnic_ib_verbs.c
