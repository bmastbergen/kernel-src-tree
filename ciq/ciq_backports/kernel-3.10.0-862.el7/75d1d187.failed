net/mlx5: Move the entry index allocator to flow group

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Move the entry index allocator to flow group (Kamal Heib) [1456687 1456694]
Rebuild_FUZZ: 96.15%
commit-author Maor Gottlieb <maorg@mellanox.com>
commit 75d1d187b2ac86d1af2f1fd125ec21f104ca34b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/75d1d187.failed

When new flow table entry is added, we search for free index
in the flow group and not in the flow table, therefore we can move
the allocator from flow table to flow group.
In downstream patches it will enable us to lock smaller part
of the steering tree.

	Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 75d1d187b2ac86d1af2f1fd125ec21f104ca34b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index f60baa93f1dc,2a0b5560a8b5..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -359,6 -384,7 +359,10 @@@ static void del_flow_table(struct fs_no
  	err = mlx5_cmd_destroy_flow_table(dev, ft);
  	if (err)
  		mlx5_core_warn(dev, "flow steering can't destroy ft\n");
++<<<<<<< HEAD
++=======
+ 	rhltable_destroy(&ft->fgs_hash);
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  	fs_get_obj(prio, ft->node.parent);
  	prio->num_ft--;
  }
@@@ -415,7 -433,18 +419,22 @@@ out
  				       "%s can't del rule fg id=%d fte_index=%d\n",
  				       __func__, fg->id, fte->index);
  	}
++<<<<<<< HEAD
 +	kvfree(match_value);
++=======
+ }
+ 
+ static void destroy_fte(struct fs_fte *fte, struct mlx5_flow_group *fg)
+ {
+ 	struct mlx5_flow_table *ft;
+ 	int ret;
+ 
+ 	ret = rhashtable_remove_fast(&fg->ftes_hash, &fte->hash, rhash_fte);
+ 	WARN_ON(ret);
+ 	fte->status = 0;
+ 	fs_get_obj(ft, fg->node.parent);
+ 	ida_simple_remove(&fg->fte_allocator, fte->index - fg->start_index);
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  }
  
  static void del_fte(struct fs_node *node)
@@@ -455,6 -486,12 +474,15 @@@ static void del_flow_group(struct fs_no
  	if (ft->autogroup.active)
  		ft->autogroup.num_groups--;
  
++<<<<<<< HEAD
++=======
+ 	rhashtable_destroy(&fg->ftes_hash);
+ 	ida_destroy(&fg->fte_allocator);
+ 	err = rhltable_remove(&ft->fgs_hash,
+ 			      &fg->hash,
+ 			      rhash_fg);
+ 	WARN_ON(err);
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  	if (mlx5_cmd_destroy_flow_group(dev, ft, fg->id))
  		mlx5_core_warn(dev, "flow steering can't destroy fg %d of ft %d\n",
  			       fg->id, ft->id);
@@@ -493,6 -532,12 +521,15 @@@ static struct mlx5_flow_group *alloc_fl
  	if (!fg)
  		return ERR_PTR(-ENOMEM);
  
++<<<<<<< HEAD
++=======
+ 	ret = rhashtable_init(&fg->ftes_hash, &rhash_fte);
+ 	if (ret) {
+ 		kfree(fg);
+ 		return ERR_PTR(ret);
+ 	}
+ 	ida_init(&fg->fte_allocator);
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  	fg->mask.match_criteria_enable = match_criteria_enable;
  	memcpy(&fg->mask.match_criteria, match_criteria,
  	       sizeof(fg->mask.match_criteria));
@@@ -941,7 -993,19 +978,21 @@@ static struct mlx5_flow_group *create_f
  	/* Add node to group list */
  	list_add(&fg->node.list, prev_fg);
  
 -	trace_mlx5_fs_add_fg(fg);
  	return fg;
++<<<<<<< HEAD
++=======
+ 
+ err_remove_fg:
+ 	WARN_ON(rhltable_remove(&ft->fgs_hash,
+ 				&fg->hash,
+ 				rhash_fg));
+ err_free_fg:
+ 	rhashtable_destroy(&fg->ftes_hash);
+ 	ida_destroy(&fg->fte_allocator);
+ 	kfree(fg);
+ 
+ 	return ERR_PTR(err);
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  }
  
  struct mlx5_flow_group *mlx5_create_flow_group(struct mlx5_flow_table *ft,
@@@ -1135,13 -1183,32 +1186,35 @@@ static struct fs_fte *create_fte(struc
  {
  	struct fs_fte *fte;
  	int index;
++<<<<<<< HEAD
 +
 +	index = get_free_fte_index(fg, prev);
++=======
+ 	int ret;
+ 
+ 	index = ida_simple_get(&fg->fte_allocator, 0,
+ 			       fg->max_ftes,
+ 			       GFP_KERNEL);
+ 	if (index < 0)
+ 		return ERR_PTR(index);
+ 
+ 	index += fg->start_index;
+ 
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  	fte = alloc_fte(flow_act, match_value, index);
 -	if (IS_ERR(fte)) {
 -		ret = PTR_ERR(fte);
 -		goto err_alloc;
 -	}
 -	ret = rhashtable_insert_fast(&fg->ftes_hash, &fte->hash, rhash_fte);
 -	if (ret)
 -		goto err_hash;
 +	if (IS_ERR(fte))
 +		return fte;
  
  	return fte;
++<<<<<<< HEAD
++=======
+ 
+ err_hash:
+ 	kfree(fte);
+ err_alloc:
+ 	ida_simple_remove(&fg->fte_allocator, index - fg->start_index);
+ 	return ERR_PTR(ret);
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  }
  
  static struct mlx5_flow_group *create_autogroup(struct mlx5_flow_table *ft,
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index c840ec9c1fc4,02c969c3d333..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@@ -119,7 -119,7 +119,11 @@@ struct mlx5_flow_table 
  	/* FWD rules that point on this flow table */
  	struct list_head		fwd_rules;
  	u32				flags;
++<<<<<<< HEAD
 +	u32				underlay_qpn;
++=======
+ 	struct rhltable			fgs_hash;
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  };
  
  struct mlx5_fc_cache {
@@@ -185,8 -198,10 +189,12 @@@ struct mlx5_flow_group 
  	struct mlx5_flow_group_mask	mask;
  	u32				start_index;
  	u32				max_ftes;
++<<<<<<< HEAD
 +	u32				num_ftes;
++=======
+ 	struct ida			fte_allocator;
++>>>>>>> 75d1d187b2ac (net/mlx5: Move the entry index allocator to flow group)
  	u32				id;
 -	struct rhashtable		ftes_hash;
 -	struct rhlist_head		hash;
  };
  
  struct mlx5_flow_root_namespace {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
