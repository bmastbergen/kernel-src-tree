vmbus: remove unused vmubs_sendpacket_pagebuffer_ctl

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 5a668d8cddbe8bf14379ce110c49ca088a1e9fae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5a668d8c.failed

The function vmbus_sendpacket_pagebuffer_ctl was never used directly.
Just have vmbus_send_pagebuffer

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5a668d8cddbe8bf14379ce110c49ca088a1e9fae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
#	include/linux/hyperv.h
diff --cc drivers/net/hyperv/netvsc.c
index 52667f48ba1c,6031102cbba3..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -796,15 -772,13 +796,25 @@@ static inline int netvsc_send_pkt
  		return -ENODEV;
  
  	if (packet->page_buf_cnt) {
++<<<<<<< HEAD
 +		pgbuf = packet->cp_partial ? (*pb) +
 +			packet->rmsg_pgcnt : (*pb);
 +		ret = vmbus_sendpacket_pagebuffer_ctl(out_channel,
 +						      pgbuf,
 +						      packet->page_buf_cnt,
 +						      &nvmsg,
 +						      sizeof(struct nvsp_message),
 +						      req_id,
 +						      VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED);
++=======
+ 		if (packet->cp_partial)
+ 			pb += packet->rmsg_pgcnt;
+ 
+ 		ret = vmbus_sendpacket_pagebuffer(out_channel,
+ 						  pb, packet->page_buf_cnt,
+ 						  &nvmsg, sizeof(nvmsg),
+ 						  req_id);
++>>>>>>> 5a668d8cddbe (vmbus: remove unused vmubs_sendpacket_pagebuffer_ctl)
  	} else {
  		ret = vmbus_sendpacket_ctl(out_channel, &nvmsg,
  					   sizeof(struct nvsp_message),
diff --cc include/linux/hyperv.h
index 5c0043b7dddc,9692592d43a3..000000000000
--- a/include/linux/hyperv.h
+++ b/include/linux/hyperv.h
@@@ -1060,20 -1044,6 +1060,23 @@@ extern int vmbus_sendpacket_pagebuffer(
  					    u32 bufferlen,
  					    u64 requestid);
  
++<<<<<<< HEAD
 +extern int vmbus_sendpacket_pagebuffer_ctl(struct vmbus_channel *channel,
 +					   struct hv_page_buffer pagebuffers[],
 +					   u32 pagecount,
 +					   void *buffer,
 +					   u32 bufferlen,
 +					   u64 requestid,
 +					   u32 flags);
 +
 +extern int vmbus_sendpacket_multipagebuffer(struct vmbus_channel *channel,
 +					struct hv_multipage_buffer *mpb,
 +					void *buffer,
 +					u32 bufferlen,
 +					u64 requestid);
 +
++=======
++>>>>>>> 5a668d8cddbe (vmbus: remove unused vmubs_sendpacket_pagebuffer_ctl)
  extern int vmbus_sendpacket_mpb_desc(struct vmbus_channel *channel,
  				     struct vmbus_packet_mpb_array *mpb,
  				     u32 desc_size,
diff --git a/drivers/hv/channel.c b/drivers/hv/channel.c
index fe4f1e75543b..142646320931 100644
--- a/drivers/hv/channel.c
+++ b/drivers/hv/channel.c
@@ -692,16 +692,16 @@ int vmbus_sendpacket(struct vmbus_channel *channel, void *buffer,
 EXPORT_SYMBOL(vmbus_sendpacket);
 
 /*
- * vmbus_sendpacket_pagebuffer_ctl - Send a range of single-page buffer
+ * vmbus_sendpacket_pagebuffer - Send a range of single-page buffer
  * packets using a GPADL Direct packet type. This interface allows you
  * to control notifying the host. This will be useful for sending
  * batched data. Also the sender can control the send flags
  * explicitly.
  */
-int vmbus_sendpacket_pagebuffer_ctl(struct vmbus_channel *channel,
-				    struct hv_page_buffer pagebuffers[],
-				    u32 pagecount, void *buffer, u32 bufferlen,
-				    u64 requestid, u32 flags)
+int vmbus_sendpacket_pagebuffer(struct vmbus_channel *channel,
+				struct hv_page_buffer pagebuffers[],
+				u32 pagecount, void *buffer, u32 bufferlen,
+				u64 requestid)
 {
 	int i;
 	struct vmbus_channel_packet_page_buffer desc;
@@ -728,7 +728,7 @@ int vmbus_sendpacket_pagebuffer_ctl(struct vmbus_channel *channel,
 
 	/* Setup the descriptor */
 	desc.type = VM_PKT_DATA_USING_GPA_DIRECT;
-	desc.flags = flags;
+	desc.flags = VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED;
 	desc.dataoffset8 = descsize >> 3; /* in 8-bytes granularity */
 	desc.length8 = (u16)(packetlen_aligned >> 3);
 	desc.transactionid = requestid;
@@ -749,24 +749,6 @@ int vmbus_sendpacket_pagebuffer_ctl(struct vmbus_channel *channel,
 
 	return hv_ringbuffer_write(channel, bufferlist, 3, lock);
 }
-EXPORT_SYMBOL_GPL(vmbus_sendpacket_pagebuffer_ctl);
-
-/*
- * vmbus_sendpacket_pagebuffer - Send a range of single-page buffer
- * packets using a GPADL Direct packet type.
- */
-int vmbus_sendpacket_pagebuffer(struct vmbus_channel *channel,
-				     struct hv_page_buffer pagebuffers[],
-				     u32 pagecount, void *buffer, u32 bufferlen,
-				     u64 requestid)
-{
-	u32 flags = VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED;
-
-	return vmbus_sendpacket_pagebuffer_ctl(channel, pagebuffers, pagecount,
-					       buffer, bufferlen,
-					       requestid, flags);
-
-}
 EXPORT_SYMBOL_GPL(vmbus_sendpacket_pagebuffer);
 
 /*
* Unmerged path drivers/net/hyperv/netvsc.c
* Unmerged path include/linux/hyperv.h
