dm raid: add raid4/5/6 journal write-back support via journal_mode option

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [md] dm raid: add raid4_5_6 journal write-back support via journal_mode option (Heinz Mauelshagen) [1388632]
Rebuild_FUZZ: 97.26%
commit-author Heinz Mauelshagen <heinzm@redhat.com>
commit 6e53636fe81465d6810f4e0910e7238edf12a133
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6e53636f.failed

Commit 63c32ed4afc ("dm raid: add raid4/5/6 journaling support") added
journal support to close the raid4/5/6 "write hole" -- in terms of
writethrough caching.

Introduce a "journal_mode" feature and use the new
r5c_journal_mode_set() API to add support for switching the journal
device's cache mode between write-through (the current default) and
write-back.

NOTE: If the journal device is not layered on resilent storage and it
fails, write-through mode will cause the "write hole" to reoccur.  But
if the journal fails while in write-back mode it will cause data loss
for any dirty cache entries unless resilent storage is used for the
journal.

	Signed-off-by: Heinz Mauelshagen <heinzm@redhat.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 6e53636fe81465d6810f4e0910e7238edf12a133)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/device-mapper/dm-raid.txt
#	drivers/md/dm-raid.c
diff --cc Documentation/device-mapper/dm-raid.txt
index e1238bbb8846,7e06e65586d4..000000000000
--- a/Documentation/device-mapper/dm-raid.txt
+++ b/Documentation/device-mapper/dm-raid.txt
@@@ -334,4 -342,4 +342,8 @@@ Version Histor
  1.10.1  Fix data corruption on reshape request
  1.11.0  Fix table line argument order
  	(wrong raid10_copies/raid10_format sequence)
++<<<<<<< HEAD
 +1.12.0  MD deadlock fixes
++=======
+ 1.11.1  Add raid4/5/6 journal write-back support via journal_mode option
++>>>>>>> 6e53636fe814 (dm raid: add raid4/5/6 journal write-back support via journal_mode option)
diff --cc drivers/md/dm-raid.c
index 0f9829c0b282,0f61bb659b73..000000000000
--- a/drivers/md/dm-raid.c
+++ b/drivers/md/dm-raid.c
@@@ -3095,8 -3139,17 +3158,18 @@@ static int raid_ctr(struct dm_target *t
  	rs->callbacks.congested_fn = raid_is_congested;
  	dm_table_add_target_callbacks(ti->table, &rs->callbacks);
  
+ 	/* If raid4/5/6 journal mode explictely requested (only possible with journal dev) -> set it */
+ 	if (test_bit(__CTR_FLAG_JOURNAL_MODE, &rs->ctr_flags)) {
+ 		r = r5c_journal_mode_set(&rs->md, rs->journal_dev.mode);
+ 		if (r) {
+ 			ti->error = "Failed to set raid4/5/6 journal mode";
+ 			mddev_unlock(&rs->md);
+ 			goto bad_journal_mode_set;
+ 		}
+ 	}
+ 
  	mddev_suspend(&rs->md);
 +	set_bit(RT_FLAG_RS_SUSPENDED, &rs->runtime_flags);
  
  	/* Try to adjust the raid4/5/6 stripe cache size to the stripe size */
  	if (rs_is_raid456(rs)) {
@@@ -3811,27 -3869,9 +3889,31 @@@ static void raid_resume(struct dm_targe
  		mddev_resume(mddev);
  }
  
 +static int raid_merge(struct dm_target *ti, struct bvec_merge_data *bvm,
 +		      struct bio_vec *biovec, int max_size)
 +{
 +	struct raid_set *rs = ti->private;
 +	struct md_personality *pers = rs->md.pers;
 +
 +	if (pers && pers->mergeable_bvec)
 +		return min(max_size, pers->mergeable_bvec(&rs->md, bvm, biovec));
 +
 +	/*
 +	 * In case we can't request the personality because
 +	 * the raid set is not running yet
 +	 *
 +	 * -> return safe minimum
 +	 */
 +	return rs->md.chunk_sectors;
 +}
 +
  static struct target_type raid_target = {
  	.name = "raid",
++<<<<<<< HEAD
 +	.version = {1, 12, 0},
++=======
+ 	.version = {1, 11, 1},
++>>>>>>> 6e53636fe814 (dm raid: add raid4/5/6 journal write-back support via journal_mode option)
  	.module = THIS_MODULE,
  	.ctr = raid_ctr,
  	.dtr = raid_dtr,
* Unmerged path Documentation/device-mapper/dm-raid.txt
* Unmerged path drivers/md/dm-raid.c
