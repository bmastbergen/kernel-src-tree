raxix-tree: introduce CONFIG_RADIX_TREE_MULTIORDER

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [kernel] radix-tree: introduce CONFIG_RADIX_TREE_MULTIORDER (Larry Woodman) [1383492]
Rebuild_FUZZ: 98.00%
commit-author Matthew Wilcox <willy@linux.intel.com>
commit 57578c2ea2cb2e0d362a9212ac83cf90221d4883
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/57578c2e.failed

I've been receiving increasingly concerned notes from 0day about how
much my recent changes have been bloating the radix tree.  Make it
happier by only including multiorder support if
CONFIG_TRANSPARENT_HUGEPAGES is set.

This is an independent Kconfig option, so other radix tree users can
also set it if they have a need.

	Signed-off-by: Matthew Wilcox <willy@linux.intel.com>
	Reviewed-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Cc: Konstantin Khlebnikov <koct9i@gmail.com>
	Cc: Kirill Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Jan Kara <jack@suse.com>
	Cc: Neil Brown <neilb@suse.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 57578c2ea2cb2e0d362a9212ac83cf90221d4883)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/Kconfig
#	tools/testing/radix-tree/linux/kernel.h
diff --cc lib/Kconfig
index fbd6fb868614,d79909dc01ec..000000000000
--- a/lib/Kconfig
+++ b/lib/Kconfig
@@@ -333,7 -362,7 +333,11 @@@ config INTERVAL_TRE
  
  	  for more information.
  
++<<<<<<< HEAD
 +config GENERIC_PAGE_TABLE
++=======
+ config RADIX_TREE_MULTIORDER
++>>>>>>> 57578c2ea2cb (raxix-tree: introduce CONFIG_RADIX_TREE_MULTIORDER)
  	bool
  
  config ASSOCIATIVE_ARRAY
diff --cc tools/testing/radix-tree/linux/kernel.h
index ae013b0160ac,8ea0ed450810..000000000000
--- a/tools/testing/radix-tree/linux/kernel.h
+++ b/tools/testing/radix-tree/linux/kernel.h
@@@ -7,6 -7,14 +7,17 @@@
  #include <stddef.h>
  #include <limits.h>
  
++<<<<<<< HEAD
++=======
+ #include "../../include/linux/compiler.h"
+ 
+ #define CONFIG_RADIX_TREE_MULTIORDER
+ #define CONFIG_SHMEM
+ #define CONFIG_SWAP
+ 
+ #define RADIX_TREE_MAP_SHIFT	3
+ 
++>>>>>>> 57578c2ea2cb (raxix-tree: introduce CONFIG_RADIX_TREE_MULTIORDER)
  #ifndef NULL
  #define NULL	0
  #endif
* Unmerged path lib/Kconfig
diff --git a/lib/radix-tree.c b/lib/radix-tree.c
index 0f2d3942940d..3313e17ec1b5 100644
--- a/lib/radix-tree.c
+++ b/lib/radix-tree.c
@@ -463,6 +463,7 @@ int __radix_tree_create(struct radix_tree_root *root, unsigned long index,
 		slot = node->slots[offset];
 	}
 
+#ifdef CONFIG_RADIX_TREE_MULTIORDER
 	/* Insert pointers to the canonical entry */
 	if ((shift - order) > 0) {
 		int i, n = 1 << (shift - order);
@@ -478,6 +479,7 @@ int __radix_tree_create(struct radix_tree_root *root, unsigned long index,
 			node->count++;
 		}
 	}
+#endif
 
 	if (nodep)
 		*nodep = node;
@@ -1446,6 +1448,20 @@ bool __radix_tree_delete_node(struct radix_tree_root *root,
 	return deleted;
 }
 
+static inline void delete_sibling_entries(struct radix_tree_node *node,
+					void *ptr, unsigned offset)
+{
+#ifdef CONFIG_RADIX_TREE_MULTIORDER
+	int i;
+	for (i = 1; offset + i < RADIX_TREE_MAP_SIZE; i++) {
+		if (node->slots[offset + i] != ptr)
+			break;
+		node->slots[offset + i] = NULL;
+		node->count--;
+	}
+#endif
+}
+
 /**
  *	radix_tree_delete_item    -    delete an item from a radix tree
  *	@root:		radix tree root
@@ -1461,7 +1477,7 @@ void *radix_tree_delete_item(struct radix_tree_root *root,
 			     unsigned long index, void *item)
 {
 	struct radix_tree_node *node;
-	unsigned int offset, i;
+	unsigned int offset;
 	void **slot;
 	void *entry;
 	int tag;
@@ -1490,13 +1506,7 @@ void *radix_tree_delete_item(struct radix_tree_root *root,
 			radix_tree_tag_clear(root, index, tag);
 	}
 
-	/* Delete any sibling slots pointing to this slot */
-	for (i = 1; offset + i < RADIX_TREE_MAP_SIZE; i++) {
-		if (node->slots[offset + i] != ptr_to_indirect(slot))
-			break;
-		node->slots[offset + i] = NULL;
-		node->count--;
-	}
+	delete_sibling_entries(node, ptr_to_indirect(slot), offset);
 	node->slots[offset] = NULL;
 	node->count--;
 
diff --git a/mm/Kconfig b/mm/Kconfig
index 8a6f054d0ebb..d01f84f47a4b 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -421,6 +421,7 @@ config TRANSPARENT_HUGEPAGE
 	bool "Transparent Hugepage Support"
 	depends on HAVE_ARCH_TRANSPARENT_HUGEPAGE
 	select COMPACTION
+	select RADIX_TREE_MULTIORDER
 	help
 	  Transparent Hugepages allows the kernel to use huge pages and
 	  huge tlb transparently to the applications whenever possible.
* Unmerged path tools/testing/radix-tree/linux/kernel.h
