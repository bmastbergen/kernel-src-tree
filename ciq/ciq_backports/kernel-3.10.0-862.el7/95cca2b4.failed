ceph: limit osd write size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Yan, Zheng <zyan@redhat.com>
commit 95cca2b44e54b00a3ed6ed7dc869717cd6807e81
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/95cca2b4.failed

OSD has a configurable limitation of max write size. OSD return
error if write request size is larger than the limitation. For now,
set max write size to CEPH_MSG_MAX_DATA_LEN. It should be small
enough.

	Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 95cca2b44e54b00a3ed6ed7dc869717cd6807e81)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/addr.c
#	fs/ceph/file.c
#	fs/ceph/super.c
#	fs/ceph/super.h
diff --cc fs/ceph/addr.c
index 52cadab86b2b,149b10063be8..000000000000
--- a/fs/ceph/addr.c
+++ b/fs/ceph/addr.c
@@@ -713,11 -779,9 +713,15 @@@ static int ceph_writepages_start(struc
  		mapping_set_error(mapping, -EIO);
  		return -EIO; /* we're in a forced umount, don't write! */
  	}
- 	if (fsc->mount_options->wsize && fsc->mount_options->wsize < wsize)
+ 	if (fsc->mount_options->wsize < wsize)
  		wsize = fsc->mount_options->wsize;
++<<<<<<< HEAD
 +	if (wsize < PAGE_CACHE_SIZE)
 +		wsize = PAGE_CACHE_SIZE;
 +	max_pages_ever = wsize >> PAGE_CACHE_SHIFT;
++=======
+ 	max_pages_ever = wsize >> PAGE_SHIFT;
++>>>>>>> 95cca2b44e54 (ceph: limit osd write size)
  
  	pagevec_init(&pvec, 0);
  
diff --cc fs/ceph/file.c
index e5cb3c326d43,a39ff54cb372..000000000000
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@@ -862,9 -887,13 +862,17 @@@ ceph_direct_read_write(struct kiocb *io
  			break;
  		}
  
++<<<<<<< HEAD
++=======
+ 		if (write)
+ 			size = min_t(u64, size, fsc->mount_options->wsize);
+ 		else
+ 			size = min_t(u64, size, fsc->mount_options->rsize);
+ 
++>>>>>>> 95cca2b44e54 (ceph: limit osd write size)
  		len = size;
 -		pages = dio_get_pages_alloc(iter, len, &start, &num_pages);
 +		pages = dio_get_pages_alloc(iter, len, !write,
 +					    &start, &num_pages);
  		if (IS_ERR(pages)) {
  			ceph_osdc_put_request(req);
  			ret = PTR_ERR(pages);
diff --cc fs/ceph/super.c
index a004bf036482,caf9801712ca..000000000000
--- a/fs/ceph/super.c
+++ b/fs/ceph/super.c
@@@ -227,12 -223,24 +227,14 @@@ static int parse_fsopt_token(char *c, v
  		if (!fsopt->mds_namespace)
  			return -ENOMEM;
  		break;
 -	case Opt_fscache_uniq:
 -		fsopt->fscache_uniq = kstrndup(argstr[0].from,
 -					       argstr[0].to-argstr[0].from,
 -					       GFP_KERNEL);
 -		if (!fsopt->fscache_uniq)
 -			return -ENOMEM;
 -		fsopt->flags |= CEPH_MOUNT_OPT_FSCACHE;
 -		break;
  		/* misc */
  	case Opt_wsize:
- 		fsopt->wsize = intval;
+ 		if (intval < PAGE_SIZE || intval > CEPH_MAX_WRITE_SIZE)
+ 			return -EINVAL;
+ 		fsopt->wsize = ALIGN(intval, PAGE_SIZE);
  		break;
  	case Opt_rsize:
 -		if (intval < PAGE_SIZE || intval > CEPH_MAX_READ_SIZE)
 -			return -EINVAL;
 -		fsopt->rsize = ALIGN(intval, PAGE_SIZE);
 +		fsopt->rsize = intval;
  		break;
  	case Opt_rasize:
  		fsopt->rasize = intval;
@@@ -376,7 -394,8 +378,12 @@@ static int parse_mount_options(struct c
  	fsopt->sb_flags = flags;
  	fsopt->flags = CEPH_MOUNT_OPT_DEFAULT;
  
++<<<<<<< HEAD
 +	fsopt->rsize = CEPH_RSIZE_DEFAULT;
++=======
+ 	fsopt->wsize = CEPH_MAX_WRITE_SIZE;
+ 	fsopt->rsize = CEPH_MAX_READ_SIZE;
++>>>>>>> 95cca2b44e54 (ceph: limit osd write size)
  	fsopt->rasize = CEPH_RASIZE_DEFAULT;
  	fsopt->snapdir_name = kstrdup(CEPH_SNAPDIRNAME_DEFAULT, GFP_KERNEL);
  	if (!fsopt->snapdir_name) {
diff --cc fs/ceph/super.h
index 94689dd0d932,eed2a67d8e52..000000000000
--- a/fs/ceph/super.h
+++ b/fs/ceph/super.h
@@@ -40,8 -46,12 +40,17 @@@
  #define ceph_test_mount_opt(fsc, opt) \
  	(!!((fsc)->mount_options->flags & CEPH_MOUNT_OPT_##opt))
  
++<<<<<<< HEAD
 +#define CEPH_RSIZE_DEFAULT             0           /* max read size */
 +#define CEPH_RASIZE_DEFAULT            (8192*1024) /* readahead */
++=======
+ /* max size of osd read request, limited by libceph */
+ #define CEPH_MAX_READ_SIZE              CEPH_MSG_MAX_DATA_LEN
+ /* osd has a configurable limitaion of max write size.
+  * CEPH_MSG_MAX_DATA_LEN should be small enough. */
+ #define CEPH_MAX_WRITE_SIZE		CEPH_MSG_MAX_DATA_LEN
+ #define CEPH_RASIZE_DEFAULT             (8192*1024)    /* max readahead */
++>>>>>>> 95cca2b44e54 (ceph: limit osd write size)
  #define CEPH_MAX_READDIR_DEFAULT        1024
  #define CEPH_MAX_READDIR_BYTES_DEFAULT  (512*1024)
  #define CEPH_SNAPDIRNAME_DEFAULT        ".snap"
* Unmerged path fs/ceph/addr.c
* Unmerged path fs/ceph/file.c
* Unmerged path fs/ceph/super.c
* Unmerged path fs/ceph/super.h
