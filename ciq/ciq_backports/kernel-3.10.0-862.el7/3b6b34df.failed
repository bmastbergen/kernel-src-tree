bnxt_en: Fix bug in ethtool -L.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Fix bug in ethtool -L (Jonathan Toppins) [1459659]
Rebuild_FUZZ: 98.36%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 3b6b34df342553a7522561e34288f5bb803aa9aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3b6b34df.failed

When changing channels from combined to rx/tx or vice versa, the code
uses the wrong "sh" parameter to determine if we are reserving rings
for shared or non-shared mode.  It should be using the ethtool requested
"sh" parameter instead of the current "sh" parameter.

Fix it by passing the "sh" parameter to bnxt_reserve_rings().  For
ethtool, we will pass in the requested "sh" parameter.

Fixes: 391be5c27364 ("bnxt_en: Implement new scheme to reserve tx rings.")
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3b6b34df342553a7522561e34288f5bb803aa9aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt.h
#	drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 43bad1740dd7,d9830d09e6c3..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -6673,6 -6917,34 +6673,37 @@@ static void bnxt_sp_task(struct work_st
  	clear_bit(BNXT_STATE_IN_SP_TASK, &bp->state);
  }
  
++<<<<<<< HEAD
++=======
+ /* Under rtnl_lock */
+ int bnxt_reserve_rings(struct bnxt *bp, int tx, int rx, bool sh, int tcs,
+ 		       int tx_xdp)
+ {
+ 	int max_rx, max_tx, tx_sets = 1;
+ 	int tx_rings_needed;
+ 	int rc;
+ 
+ 	if (tcs)
+ 		tx_sets = tcs;
+ 
+ 	rc = bnxt_get_max_rings(bp, &max_rx, &max_tx, sh);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (max_rx < rx)
+ 		return -ENOMEM;
+ 
+ 	tx_rings_needed = tx * tx_sets + tx_xdp;
+ 	if (max_tx < tx_rings_needed)
+ 		return -ENOMEM;
+ 
+ 	if (bnxt_hwrm_reserve_tx_rings(bp, &tx_rings_needed) ||
+ 	    tx_rings_needed < (tx * tx_sets + tx_xdp))
+ 		return -ENOMEM;
+ 	return 0;
+ }
+ 
++>>>>>>> 3b6b34df3425 (bnxt_en: Fix bug in ethtool -L.)
  static void bnxt_unmap_bars(struct bnxt *bp, struct pci_dev *pdev)
  {
  	if (bp->bar2) {
@@@ -6861,19 -7131,10 +6892,26 @@@ int bnxt_setup_mq_tc(struct net_device 
  	if (bp->flags & BNXT_FLAG_SHARED_RINGS)
  		sh = true;
  
++<<<<<<< HEAD
 +	if (tc) {
 +		int max_rx_rings, max_tx_rings, req_tx_rings, rsv_tx_rings, rc;
 +
 +		req_tx_rings = bp->tx_nr_rings_per_tc * tc;
 +		rc = bnxt_get_max_rings(bp, &max_rx_rings, &max_tx_rings, sh);
 +		if (rc || req_tx_rings > max_tx_rings)
 +			return -ENOMEM;
 +
 +		rsv_tx_rings = req_tx_rings;
 +		if (bnxt_hwrm_reserve_tx_rings(bp, &rsv_tx_rings) ||
 +		    rsv_tx_rings < req_tx_rings)
 +			return -ENOMEM;
 +	}
++=======
+ 	rc = bnxt_reserve_rings(bp, bp->tx_nr_rings_per_tc, bp->rx_nr_rings,
+ 				sh, tc, bp->tx_nr_rings_xdp);
+ 	if (rc)
+ 		return rc;
++>>>>>>> 3b6b34df3425 (bnxt_en: Fix bug in ethtool -L.)
  
  	/* Needs to close the device and do hw resource re-allocations */
  	if (netif_running(bp->dev))
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.h
index 932c45759428,f34691f85602..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@@ -1237,7 -1298,11 +1237,12 @@@ int bnxt_hwrm_alloc_wol_fltr(struct bnx
  int bnxt_hwrm_free_wol_fltr(struct bnxt *bp);
  int bnxt_hwrm_fw_set_time(struct bnxt *);
  int bnxt_open_nic(struct bnxt *, bool, bool);
 -int bnxt_half_open_nic(struct bnxt *bp);
 -void bnxt_half_close_nic(struct bnxt *bp);
  int bnxt_close_nic(struct bnxt *, bool, bool);
++<<<<<<< HEAD
++=======
+ int bnxt_reserve_rings(struct bnxt *bp, int tx, int rx, bool sh, int tcs,
+ 		       int tx_xdp);
++>>>>>>> 3b6b34df3425 (bnxt_en: Fix bug in ethtool -L.)
  int bnxt_setup_mq_tc(struct net_device *dev, u8 tc);
  int bnxt_get_max_rings(struct bnxt *, int *, int *, bool);
  void bnxt_restore_pf_fw_resources(struct bnxt *bp);
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
index 992fa0963964,be6acadcb202..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
@@@ -411,32 -421,22 +411,48 @@@ static int bnxt_set_channels(struct net
  	if (channel->combined_count)
  		sh = true;
  
 +	bnxt_get_max_rings(bp, &max_rx_rings, &max_tx_rings, sh);
 +
  	tcs = netdev_get_num_tc(dev);
 +	if (tcs > 1)
 +		max_tx_rings /= tcs;
 +
 +	if (sh &&
 +	    channel->combined_count > max_t(int, max_rx_rings, max_tx_rings))
 +		return -ENOMEM;
 +
 +	if (!sh && (channel->rx_count > max_rx_rings ||
 +		    channel->tx_count > max_tx_rings))
 +		return -ENOMEM;
  
  	req_tx_rings = sh ? channel->combined_count : channel->tx_count;
++<<<<<<< HEAD
 +	req_tx_rings = min_t(int, req_tx_rings, max_tx_rings);
 +	if (tcs > 1)
 +		req_tx_rings *= tcs;
 +
 +	rsv_tx_rings = req_tx_rings;
 +	if (bnxt_hwrm_reserve_tx_rings(bp, &rsv_tx_rings))
 +		return -ENOMEM;
 +
 +	if (rsv_tx_rings < req_tx_rings) {
 +		netdev_warn(dev, "Unable to allocate the requested tx rings\n");
 +		return -ENOMEM;
++=======
+ 	req_rx_rings = sh ? channel->combined_count : channel->rx_count;
+ 	if (bp->tx_nr_rings_xdp) {
+ 		if (!sh) {
+ 			netdev_err(dev, "Only combined mode supported when XDP is enabled.\n");
+ 			return -EINVAL;
+ 		}
+ 		tx_xdp = req_rx_rings;
+ 	}
+ 	rc = bnxt_reserve_rings(bp, req_tx_rings, req_rx_rings, sh, tcs,
+ 				tx_xdp);
+ 	if (rc) {
+ 		netdev_warn(dev, "Unable to allocate the requested rings\n");
+ 		return rc;
++>>>>>>> 3b6b34df3425 (bnxt_en: Fix bug in ethtool -L.)
  	}
  
  	if (netif_running(dev)) {
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_ethtool.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c
