net: also make sch_handle_egress() drop monitor ready

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] also make sch_handle_egress() drop monitor ready (Ivan Vecera) [1445420]
Rebuild_FUZZ: 95.05%
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit 7e2c3aea4398d079745b9faa2c17b6cbd010f221
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7e2c3aea.failed

Follow-up for 8a3a4c6e7b34 ("net: make sch_handle_ingress() drop
monitor ready") to also make the egress side drop monitor ready.

Also here only TC_ACT_SHOT is a clear indication that something
went wrong. Hence don't provide false positives to drop monitors
such as 'perf record -e skb:kfree_skb ...'.

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7e2c3aea4398d079745b9faa2c17b6cbd010f221)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 75255cb2d9d9,904ff431d570..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -3135,6 -3163,49 +3135,52 @@@ int dev_loopback_xmit(struct sock *sk, 
  }
  EXPORT_SYMBOL(dev_loopback_xmit);
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_NET_EGRESS
+ static struct sk_buff *
+ sch_handle_egress(struct sk_buff *skb, int *ret, struct net_device *dev)
+ {
+ 	struct tcf_proto *cl = rcu_dereference_bh(dev->egress_cl_list);
+ 	struct tcf_result cl_res;
+ 
+ 	if (!cl)
+ 		return skb;
+ 
+ 	/* skb->tc_verd and qdisc_skb_cb(skb)->pkt_len were already set
+ 	 * earlier by the caller.
+ 	 */
+ 	qdisc_bstats_cpu_update(cl->q, skb);
+ 
+ 	switch (tc_classify(skb, cl, &cl_res, false)) {
+ 	case TC_ACT_OK:
+ 	case TC_ACT_RECLASSIFY:
+ 		skb->tc_index = TC_H_MIN(cl_res.classid);
+ 		break;
+ 	case TC_ACT_SHOT:
+ 		qdisc_qstats_cpu_drop(cl->q);
+ 		*ret = NET_XMIT_DROP;
+ 		kfree_skb(skb);
+ 		return NULL;
+ 	case TC_ACT_STOLEN:
+ 	case TC_ACT_QUEUED:
+ 		*ret = NET_XMIT_SUCCESS;
+ 		consume_skb(skb);
+ 		return NULL;
+ 	case TC_ACT_REDIRECT:
+ 		/* No need to push/pop skb's mac_header here on egress! */
+ 		skb_do_redirect(skb);
+ 		*ret = NET_XMIT_SUCCESS;
+ 		return NULL;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return skb;
+ }
+ #endif /* CONFIG_NET_EGRESS */
+ 
++>>>>>>> 7e2c3aea4398 (net: also make sch_handle_egress() drop monitor ready)
  static inline int get_xps_queue(struct net_device *dev, struct sk_buff *skb)
  {
  #ifdef CONFIG_XPS
* Unmerged path net/core/dev.c
