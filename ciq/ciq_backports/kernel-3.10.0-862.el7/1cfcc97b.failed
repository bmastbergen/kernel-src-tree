nfp: don't report standard netdev statistics in ethtool

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 1cfcc97bb1575446016e0c061c0629b1e6572523
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1cfcc97b.failed

We have been recently called out as a bad example for reporting
standard netdev statistics as part of ethtool.  Fix that :)

Removing standard statistics allows us to simplify the structure
holding definitions since we no longer have to mux different types
of statistics.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1cfcc97bb1575446016e0c061c0629b1e6572523)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
index 69f458e0de89,1753bfbc8b47..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
@@@ -63,55 -64,39 +61,51 @@@ struct nfp_et_stat 
  	int off;
  };
  
- #define NN_ET_NETDEV_STAT(m) NETDEV_ET_STATS,			\
- 		FIELD_SIZEOF(struct net_device_stats, m),	\
- 		offsetof(struct net_device_stats, m)
- /* For stats in the control BAR (other than Q stats) */
- #define NN_ET_DEV_STAT(m) NFP_NET_DEV_ET_STATS,			\
- 		sizeof(u64),					\
- 		(m)
- static const struct _nfp_net_et_stats nfp_net_et_stats[] = {
- 	/* netdev stats */
- 	{"rx_packets", NN_ET_NETDEV_STAT(rx_packets)},
- 	{"tx_packets", NN_ET_NETDEV_STAT(tx_packets)},
- 	{"rx_bytes", NN_ET_NETDEV_STAT(rx_bytes)},
- 	{"tx_bytes", NN_ET_NETDEV_STAT(tx_bytes)},
- 	{"rx_errors", NN_ET_NETDEV_STAT(rx_errors)},
- 	{"tx_errors", NN_ET_NETDEV_STAT(tx_errors)},
- 	{"rx_dropped", NN_ET_NETDEV_STAT(rx_dropped)},
- 	{"tx_dropped", NN_ET_NETDEV_STAT(tx_dropped)},
- 	{"multicast", NN_ET_NETDEV_STAT(multicast)},
- 	{"collisions", NN_ET_NETDEV_STAT(collisions)},
- 	{"rx_over_errors", NN_ET_NETDEV_STAT(rx_over_errors)},
- 	{"rx_crc_errors", NN_ET_NETDEV_STAT(rx_crc_errors)},
- 	{"rx_frame_errors", NN_ET_NETDEV_STAT(rx_frame_errors)},
- 	{"rx_fifo_errors", NN_ET_NETDEV_STAT(rx_fifo_errors)},
- 	{"rx_missed_errors", NN_ET_NETDEV_STAT(rx_missed_errors)},
- 	{"tx_aborted_errors", NN_ET_NETDEV_STAT(tx_aborted_errors)},
- 	{"tx_carrier_errors", NN_ET_NETDEV_STAT(tx_carrier_errors)},
- 	{"tx_fifo_errors", NN_ET_NETDEV_STAT(tx_fifo_errors)},
+ static const struct nfp_et_stat nfp_net_et_stats[] = {
  	/* Stats from the device */
- 	{"dev_rx_discards", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_DISCARDS)},
- 	{"dev_rx_errors", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_ERRORS)},
- 	{"dev_rx_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_OCTETS)},
- 	{"dev_rx_uc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_UC_OCTETS)},
- 	{"dev_rx_mc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_MC_OCTETS)},
- 	{"dev_rx_bc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_BC_OCTETS)},
- 	{"dev_rx_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_FRAMES)},
- 	{"dev_rx_mc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_MC_FRAMES)},
- 	{"dev_rx_bc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_BC_FRAMES)},
- 
+ 	{ "dev_rx_discards",	NFP_NET_CFG_STATS_RX_DISCARDS },
+ 	{ "dev_rx_errors",	NFP_NET_CFG_STATS_RX_ERRORS },
+ 	{ "dev_rx_bytes",	NFP_NET_CFG_STATS_RX_OCTETS },
+ 	{ "dev_rx_uc_bytes",	NFP_NET_CFG_STATS_RX_UC_OCTETS },
+ 	{ "dev_rx_mc_bytes",	NFP_NET_CFG_STATS_RX_MC_OCTETS },
+ 	{ "dev_rx_bc_bytes",	NFP_NET_CFG_STATS_RX_BC_OCTETS },
+ 	{ "dev_rx_pkts",	NFP_NET_CFG_STATS_RX_FRAMES },
+ 	{ "dev_rx_mc_pkts",	NFP_NET_CFG_STATS_RX_MC_FRAMES },
+ 	{ "dev_rx_bc_pkts",	NFP_NET_CFG_STATS_RX_BC_FRAMES },
+ 
++<<<<<<< HEAD
 +	{"dev_tx_discards", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_DISCARDS)},
 +	{"dev_tx_errors", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_ERRORS)},
 +	{"dev_tx_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_OCTETS)},
 +	{"dev_tx_uc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_UC_OCTETS)},
 +	{"dev_tx_mc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_MC_OCTETS)},
 +	{"dev_tx_bc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_BC_OCTETS)},
 +	{"dev_tx_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_FRAMES)},
 +	{"dev_tx_mc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_MC_FRAMES)},
 +	{"dev_tx_bc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_BC_FRAMES)},
++=======
+ 	{ "dev_tx_discards",	NFP_NET_CFG_STATS_TX_DISCARDS },
+ 	{ "dev_tx_errors",	NFP_NET_CFG_STATS_TX_ERRORS },
+ 	{ "dev_tx_bytes",	NFP_NET_CFG_STATS_TX_OCTETS },
+ 	{ "dev_tx_uc_bytes",	NFP_NET_CFG_STATS_TX_UC_OCTETS },
+ 	{ "dev_tx_mc_bytes",	NFP_NET_CFG_STATS_TX_MC_OCTETS },
+ 	{ "dev_tx_bc_bytes",	NFP_NET_CFG_STATS_TX_BC_OCTETS },
+ 	{ "dev_tx_pkts",	NFP_NET_CFG_STATS_TX_FRAMES },
+ 	{ "dev_tx_mc_pkts",	NFP_NET_CFG_STATS_TX_MC_FRAMES },
+ 	{ "dev_tx_bc_pkts",	NFP_NET_CFG_STATS_TX_BC_FRAMES },
+ 
+ 	{ "bpf_pass_pkts",	NFP_NET_CFG_STATS_APP0_FRAMES },
+ 	{ "bpf_pass_bytes",	NFP_NET_CFG_STATS_APP0_BYTES },
+ 	/* see comments in outro functions in nfp_bpf_jit.c to find out
+ 	 * how different BPF modes use app-specific counters
+ 	 */
+ 	{ "bpf_app1_pkts",	NFP_NET_CFG_STATS_APP1_FRAMES },
+ 	{ "bpf_app1_bytes",	NFP_NET_CFG_STATS_APP1_BYTES },
+ 	{ "bpf_app2_pkts",	NFP_NET_CFG_STATS_APP2_FRAMES },
+ 	{ "bpf_app2_bytes",	NFP_NET_CFG_STATS_APP2_BYTES },
+ 	{ "bpf_app3_pkts",	NFP_NET_CFG_STATS_APP3_FRAMES },
+ 	{ "bpf_app3_bytes",	NFP_NET_CFG_STATS_APP3_BYTES },
++>>>>>>> 1cfcc97bb157 (nfp: don't report standard netdev statistics in ethtool)
  };
  
  #define NN_ET_GLOBAL_STATS_LEN ARRAY_SIZE(nfp_net_et_stats)
@@@ -382,27 -394,12 +376,27 @@@ static void nfp_net_get_stats(struct ne
  	u64 tmp[NN_ET_RVEC_GATHER_STATS];
  	u8 __iomem *io_p;
  	int i, j, k;
- 	u8 *p;
- 
- 	netdev_stats = dev_get_stats(netdev, &temp);
  
  	for (i = 0; i < NN_ET_GLOBAL_STATS_LEN; i++) {
++<<<<<<< HEAD
 +		switch (nfp_net_et_stats[i].type) {
 +		case NETDEV_ET_STATS:
 +			p = (char *)netdev_stats + nfp_net_et_stats[i].off;
 +			data[i] = nfp_net_et_stats[i].sz == sizeof(u64) ?
 +				*(u64 *)p : *(u32 *)p;
 +			break;
 +
 +		case NFP_NET_DEV_ET_STATS:
 +			io_p = nn->ctrl_bar + nfp_net_et_stats[i].off;
 +			data[i] = readq(io_p);
 +			break;
 +		}
++=======
+ 		io_p = nn->dp.ctrl_bar + nfp_net_et_stats[i].off;
+ 		data[i] = readq(io_p);
++>>>>>>> 1cfcc97bb157 (nfp: don't report standard netdev statistics in ethtool)
  	}
 -	for (j = 0; j < nn->dp.num_r_vecs; j++) {
 +	for (j = 0; j < nn->num_r_vecs; j++) {
  		unsigned int start;
  
  		do {
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
