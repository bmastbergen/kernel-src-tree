dealing with the rest of shrink_dentry_list() livelock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit b2b80195d8829921506880f6dccd21cabd163d0d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b2b80195.failed

We have the same problem with ->d_lock order in the inner loop, where
we are dropping references to ancestors.  Same solution, basically -
instead of using dentry_kill() we use lock_parent() (introduced in the
previous commit) to get that lock in a safe way, recheck ->d_count
(in case if lock_parent() has ended up dropping and retaking ->d_lock
and somebody managed to grab a reference during that window), trylock
the inode->i_lock and use __dentry_kill() to do the rest.

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit b2b80195d8829921506880f6dccd21cabd163d0d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dcache.c
diff --cc fs/dcache.c
index e518a196fb4f,eb7c7255470c..000000000000
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@@ -698,40 -828,83 +698,110 @@@ restart
  }
  EXPORT_SYMBOL(d_prune_aliases);
  
 -static void shrink_dentry_list(struct list_head *list)
 +/*
 + * Try to throw away a dentry - free the inode, dput the parent.
 + * Requires dentry->d_lock is held, and dentry->d_count == 0.
 + * Releases dentry->d_lock.
 + *
 + * This may fail if locks cannot be acquired no problem, just try again.
 + */
 +static void try_prune_one_dentry(struct dentry *dentry)
 +	__releases(dentry->d_lock)
  {
 -	struct dentry *dentry, *parent;
 +	struct dentry *parent;
  
 -	while (!list_empty(list)) {
 -		struct inode *inode;
 -		dentry = list_entry(list->prev, struct dentry, d_lru);
 -		spin_lock(&dentry->d_lock);
 -		parent = lock_parent(dentry);
 +	parent = dentry_kill(dentry);
 +	/*
 +	 * If dentry_kill returns NULL, we have nothing more to do.
 +	 * if it returns the same dentry, trylocks failed. In either
 +	 * case, just loop again.
 +	 *
 +	 * Otherwise, we need to prune ancestors too. This is necessary
 +	 * to prevent quadratic behavior of shrink_dcache_parent(), but
 +	 * is also expected to be beneficial in reducing dentry cache
 +	 * fragmentation.
 +	 */
 +	if (!parent)
 +		return;
 +	if (parent == dentry)
 +		return;
  
++<<<<<<< HEAD
 +	/* Prune ancestors. */
 +	dentry = parent;
 +	while (dentry) {
 +		if (lockref_put_or_lock(&dentry->d_lockref))
 +			return;
 +		dentry = dentry_kill(dentry);
++=======
+ 		/*
+ 		 * The dispose list is isolated and dentries are not accounted
+ 		 * to the LRU here, so we can simply remove it from the list
+ 		 * here regardless of whether it is referenced or not.
+ 		 */
+ 		d_shrink_del(dentry);
+ 
+ 		/*
+ 		 * We found an inuse dentry which was not removed from
+ 		 * the LRU because of laziness during lookup. Do not free it.
+ 		 */
+ 		if ((int)dentry->d_lockref.count > 0) {
+ 			spin_unlock(&dentry->d_lock);
+ 			if (parent)
+ 				spin_unlock(&parent->d_lock);
+ 			continue;
+ 		}
+ 
+ 
+ 		if (unlikely(dentry->d_flags & DCACHE_DENTRY_KILLED)) {
+ 			bool can_free = dentry->d_flags & DCACHE_MAY_FREE;
+ 			spin_unlock(&dentry->d_lock);
+ 			if (parent)
+ 				spin_unlock(&parent->d_lock);
+ 			if (can_free)
+ 				dentry_free(dentry);
+ 			continue;
+ 		}
+ 
+ 		inode = dentry->d_inode;
+ 		if (inode && unlikely(!spin_trylock(&inode->i_lock))) {
+ 			d_shrink_add(dentry, list);
+ 			spin_unlock(&dentry->d_lock);
+ 			if (parent)
+ 				spin_unlock(&parent->d_lock);
+ 			continue;
+ 		}
+ 
+ 		__dentry_kill(dentry);
+ 
+ 		/*
+ 		 * We need to prune ancestors too. This is necessary to prevent
+ 		 * quadratic behavior of shrink_dcache_parent(), but is also
+ 		 * expected to be beneficial in reducing dentry cache
+ 		 * fragmentation.
+ 		 */
+ 		dentry = parent;
+ 		while (dentry && !lockref_put_or_lock(&dentry->d_lockref)) {
+ 			parent = lock_parent(dentry);
+ 			if (dentry->d_lockref.count != 1) {
+ 				dentry->d_lockref.count--;
+ 				spin_unlock(&dentry->d_lock);
+ 				if (parent)
+ 					spin_unlock(&parent->d_lock);
+ 				break;
+ 			}
+ 			inode = dentry->d_inode;	/* can't be NULL */
+ 			if (unlikely(!spin_trylock(&inode->i_lock))) {
+ 				spin_unlock(&dentry->d_lock);
+ 				if (parent)
+ 					spin_unlock(&parent->d_lock);
+ 				cpu_relax();
+ 				continue;
+ 			}
+ 			__dentry_kill(dentry);
+ 			dentry = parent;
+ 		}
++>>>>>>> b2b80195d882 (dealing with the rest of shrink_dentry_list() livelock)
  	}
  }
  
* Unmerged path fs/dcache.c
