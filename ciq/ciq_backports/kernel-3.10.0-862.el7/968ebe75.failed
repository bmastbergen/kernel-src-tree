target: remove struct target_fabric_configfs_template

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] remove struct target_fabric_configfs_template (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 91.84%
commit-author Christoph Hellwig <hch@lst.de>
commit 968ebe752035d14a4c2bb69f8ed0ddf7292dd2f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/968ebe75.failed

It's only embedded into struct target_fabric_configfs these days, so we
might as well remove this layer of abstraction.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 968ebe752035d14a4c2bb69f8ed0ddf7292dd2f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_fabric_configfs.c
#	include/target/target_core_configfs.h
diff --cc drivers/target/target_core_fabric_configfs.c
index 0c3f90130b7d,6cb4828308e9..000000000000
--- a/drivers/target/target_core_fabric_configfs.c
+++ b/drivers/target/target_core_fabric_configfs.c
@@@ -52,7 -51,20 +51,24 @@@ static void target_fabric_setup_##_name
  	cit->ct_item_ops = _item_ops;					\
  	cit->ct_group_ops = _group_ops;					\
  	cit->ct_attrs = _attrs;						\
++<<<<<<< HEAD
 +	cit->ct_owner = tf->tf_module;					\
++=======
+ 	cit->ct_owner = tf->tf_ops->module;				\
+ 	pr_debug("Setup generic %s\n", __stringify(_name));		\
+ }
+ 
+ #define TF_CIT_SETUP_DRV(_name, _item_ops, _group_ops)		\
+ static void target_fabric_setup_##_name##_cit(struct target_fabric_configfs *tf) \
+ {									\
+ 	struct config_item_type *cit = &tf->tf_##_name##_cit;		\
+ 	struct configfs_attribute **attrs = tf->tf_ops->tfc_##_name##_attrs; \
+ 									\
+ 	cit->ct_item_ops = _item_ops;					\
+ 	cit->ct_group_ops = _group_ops;					\
+ 	cit->ct_attrs = attrs;						\
+ 	cit->ct_owner = tf->tf_ops->module;				\
++>>>>>>> 968ebe752035 (target: remove struct target_fabric_configfs_template)
  	pr_debug("Setup generic %s\n", __stringify(_name));		\
  }
  
diff --cc include/target/target_core_configfs.h
index e0801386e4dc,abd063b8b301..000000000000
--- a/include/target/target_core_configfs.h
+++ b/include/target/target_core_configfs.h
@@@ -5,52 -5,33 +5,81 @@@
  #define TARGET_CORE_NAME_MAX_LEN	64
  #define TARGET_FABRIC_NAME_SIZE		32
  
++<<<<<<< HEAD
 +extern struct target_fabric_configfs *target_fabric_configfs_init(
 +				struct module *, const char *);
 +extern void target_fabric_configfs_free(struct target_fabric_configfs *);
 +extern int target_fabric_configfs_register(struct target_fabric_configfs *);
 +extern void target_fabric_configfs_deregister(struct target_fabric_configfs *);
 +
 +struct target_fabric_configfs_template {
 +	struct config_item_type tfc_discovery_cit;
 +	struct config_item_type	tfc_wwn_cit;
 +	struct config_item_type tfc_wwn_fabric_stats_cit;
 +	struct config_item_type tfc_tpg_cit;
 +	struct config_item_type tfc_tpg_base_cit;
 +	struct config_item_type tfc_tpg_lun_cit;
 +	struct config_item_type tfc_tpg_port_cit;
 +	struct config_item_type tfc_tpg_port_stat_cit;
 +	struct config_item_type tfc_tpg_np_cit;
 +	struct config_item_type tfc_tpg_np_base_cit;
 +	struct config_item_type tfc_tpg_attrib_cit;
 +	struct config_item_type tfc_tpg_auth_cit;
 +	struct config_item_type tfc_tpg_param_cit;
 +	struct config_item_type tfc_tpg_nacl_cit;
 +	struct config_item_type tfc_tpg_nacl_base_cit;
 +	struct config_item_type tfc_tpg_nacl_attrib_cit;
 +	struct config_item_type tfc_tpg_nacl_auth_cit;
 +	struct config_item_type tfc_tpg_nacl_param_cit;
 +	struct config_item_type tfc_tpg_nacl_stat_cit;
 +	struct config_item_type tfc_tpg_mappedlun_cit;
 +	struct config_item_type tfc_tpg_mappedlun_stat_cit;
 +};
 +
++=======
++>>>>>>> 968ebe752035 (target: remove struct target_fabric_configfs_template)
  struct target_fabric_configfs {
 +	char			tf_name[TARGET_FABRIC_NAME_SIZE];
  	atomic_t		tf_access_cnt;
  	struct list_head	tf_list;
  	struct config_group	tf_group;
  	struct config_group	tf_disc_group;
  	struct config_group	*tf_default_groups[2];
++<<<<<<< HEAD
 +	/* Pointer to fabric's config_item */
 +	struct config_item	*tf_fabric;
 +	/* Passed from fabric modules */
 +	struct config_item_type	*tf_fabric_cit;
 +	/* Pointer to target core subsystem */
 +	struct configfs_subsystem *tf_subsys;
 +	/* Pointer to fabric's struct module */
 +	struct module *tf_module;
 +	struct target_core_fabric_ops tf_ops;
 +	struct target_fabric_configfs_template tf_cit_tmpl;
 +};
++=======
+ 	const struct target_core_fabric_ops *tf_ops;
++>>>>>>> 968ebe752035 (target: remove struct target_fabric_configfs_template)
  
+ 	struct config_item_type tf_discovery_cit;
+ 	struct config_item_type	tf_wwn_cit;
+ 	struct config_item_type tf_wwn_fabric_stats_cit;
+ 	struct config_item_type tf_tpg_cit;
+ 	struct config_item_type tf_tpg_base_cit;
+ 	struct config_item_type tf_tpg_lun_cit;
+ 	struct config_item_type tf_tpg_port_cit;
+ 	struct config_item_type tf_tpg_port_stat_cit;
+ 	struct config_item_type tf_tpg_np_cit;
+ 	struct config_item_type tf_tpg_np_base_cit;
+ 	struct config_item_type tf_tpg_attrib_cit;
+ 	struct config_item_type tf_tpg_auth_cit;
+ 	struct config_item_type tf_tpg_param_cit;
+ 	struct config_item_type tf_tpg_nacl_cit;
+ 	struct config_item_type tf_tpg_nacl_base_cit;
+ 	struct config_item_type tf_tpg_nacl_attrib_cit;
+ 	struct config_item_type tf_tpg_nacl_auth_cit;
+ 	struct config_item_type tf_tpg_nacl_param_cit;
+ 	struct config_item_type tf_tpg_nacl_stat_cit;
+ 	struct config_item_type tf_tpg_mappedlun_cit;
+ 	struct config_item_type tf_tpg_mappedlun_stat_cit;
+ };
diff --git a/drivers/target/target_core_configfs.c b/drivers/target/target_core_configfs.c
index 5a4ad5ca14f6..e6f7528c5bfb 100644
--- a/drivers/target/target_core_configfs.c
+++ b/drivers/target/target_core_configfs.c
@@ -199,16 +199,15 @@ static struct config_group *target_core_register_fabric(
 	 * struct target_fabric_configfs *tf will contain a usage reference.
 	 */
 	pr_debug("Target_Core_ConfigFS: REGISTER tfc_wwn_cit -> %p\n",
-			&tf->tf_cit_tmpl.tfc_wwn_cit);
+			&tf->tf_wwn_cit);
 
 	tf->tf_group.default_groups = tf->tf_default_groups;
 	tf->tf_group.default_groups[0] = &tf->tf_disc_group;
 	tf->tf_group.default_groups[1] = NULL;
 
-	config_group_init_type_name(&tf->tf_group, name,
-			&tf->tf_cit_tmpl.tfc_wwn_cit);
+	config_group_init_type_name(&tf->tf_group, name, &tf->tf_wwn_cit);
 	config_group_init_type_name(&tf->tf_disc_group, "discovery_auth",
-			&tf->tf_cit_tmpl.tfc_discovery_cit);
+			&tf->tf_discovery_cit);
 
 	pr_debug("Target_Core_ConfigFS: REGISTER -> Allocated Fabric:"
 			" %s\n", tf->tf_group.cg_item.ci_name);
* Unmerged path drivers/target/target_core_fabric_configfs.c
* Unmerged path include/target/target_core_configfs.h
