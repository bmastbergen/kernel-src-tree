target: make the tpg_get_default_depth method optional

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] make the tpg_get_default_depth method optional (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 92.00%
commit-author Christoph Hellwig <hch@lst.de>
commit e1750d20e69477c0d7b26d6e0ba24c3c9ec47530
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e1750d20.failed

All fabric drivers except for iSCSI always return 1, so implement
that as default behavior.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit e1750d20e69477c0d7b26d6e0ba24c3c9ec47530)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/loopback/tcm_loop.c
#	drivers/vhost/scsi.c
#	drivers/xen/xen-scsiback.c
diff --cc drivers/target/loopback/tcm_loop.c
index cd26fc3abc10,12b85b03e9ae..000000000000
--- a/drivers/target/loopback/tcm_loop.c
+++ b/drivers/target/loopback/tcm_loop.c
@@@ -1412,129 -1366,50 +1407,176 @@@ static struct configfs_attribute *tcm_l
  
  /* End items for tcm_loop_cit */
  
++<<<<<<< HEAD
 +static int tcm_loop_register_configfs(void)
 +{
 +	struct target_fabric_configfs *fabric;
 +	int ret;
 +	/*
 +	 * Set the TCM Loop HBA counter to zero
 +	 */
 +	tcm_loop_hba_no_cnt = 0;
 +	/*
 +	 * Register the top level struct config_item_type with TCM core
 +	 */
 +	fabric = target_fabric_configfs_init(THIS_MODULE, "loopback");
 +	if (IS_ERR(fabric)) {
 +		pr_err("tcm_loop_register_configfs() failed!\n");
 +		return PTR_ERR(fabric);
 +	}
 +	/*
 +	 * Setup the fabric API of function pointers used by target_core_mod
 +	 */
 +	fabric->tf_ops.get_fabric_name = &tcm_loop_get_fabric_name;
 +	fabric->tf_ops.get_fabric_proto_ident = &tcm_loop_get_fabric_proto_ident;
 +	fabric->tf_ops.tpg_get_wwn = &tcm_loop_get_endpoint_wwn;
 +	fabric->tf_ops.tpg_get_tag = &tcm_loop_get_tag;
 +	fabric->tf_ops.tpg_get_default_depth = &tcm_loop_get_default_depth;
 +	fabric->tf_ops.tpg_get_pr_transport_id = &tcm_loop_get_pr_transport_id;
 +	fabric->tf_ops.tpg_get_pr_transport_id_len =
 +					&tcm_loop_get_pr_transport_id_len;
 +	fabric->tf_ops.tpg_parse_pr_out_transport_id =
 +					&tcm_loop_parse_pr_out_transport_id;
 +	fabric->tf_ops.tpg_check_demo_mode = &tcm_loop_check_demo_mode;
 +	fabric->tf_ops.tpg_check_demo_mode_cache =
 +					&tcm_loop_check_demo_mode_cache;
 +	fabric->tf_ops.tpg_check_demo_mode_write_protect =
 +					&tcm_loop_check_demo_mode_write_protect;
 +	fabric->tf_ops.tpg_check_prod_mode_write_protect =
 +					&tcm_loop_check_prod_mode_write_protect;
 +	fabric->tf_ops.tpg_check_prot_fabric_only =
 +					&tcm_loop_check_prot_fabric_only;
 +	/*
 +	 * The TCM loopback fabric module runs in demo-mode to a local
 +	 * virtual SCSI device, so fabric dependent initator ACLs are
 +	 * not required.
 +	 */
 +	fabric->tf_ops.tpg_alloc_fabric_acl = &tcm_loop_tpg_alloc_fabric_acl;
 +	fabric->tf_ops.tpg_release_fabric_acl =
 +					&tcm_loop_tpg_release_fabric_acl;
 +	fabric->tf_ops.tpg_get_inst_index = &tcm_loop_get_inst_index;
 +	/*
 +	 * Used for setting up remaining TCM resources in process context
 +	 */
 +	fabric->tf_ops.check_stop_free = &tcm_loop_check_stop_free;
 +	fabric->tf_ops.release_cmd = &tcm_loop_release_cmd;
 +	fabric->tf_ops.shutdown_session = &tcm_loop_shutdown_session;
 +	fabric->tf_ops.close_session = &tcm_loop_close_session;
 +	fabric->tf_ops.sess_get_index = &tcm_loop_sess_get_index;
 +	fabric->tf_ops.sess_get_initiator_sid = NULL;
 +	fabric->tf_ops.write_pending = &tcm_loop_write_pending;
 +	fabric->tf_ops.write_pending_status = &tcm_loop_write_pending_status;
 +	/*
 +	 * Not used for TCM loopback
 +	 */
 +	fabric->tf_ops.set_default_node_attributes =
 +					&tcm_loop_set_default_node_attributes;
 +	fabric->tf_ops.get_task_tag = &tcm_loop_get_task_tag;
 +	fabric->tf_ops.get_cmd_state = &tcm_loop_get_cmd_state;
 +	fabric->tf_ops.queue_data_in = &tcm_loop_queue_data_in;
 +	fabric->tf_ops.queue_status = &tcm_loop_queue_status;
 +	fabric->tf_ops.queue_tm_rsp = &tcm_loop_queue_tm_rsp;
 +	fabric->tf_ops.aborted_task = &tcm_loop_aborted_task;
 +
 +	/*
 +	 * Setup function pointers for generic logic in target_core_fabric_configfs.c
 +	 */
 +	fabric->tf_ops.fabric_make_wwn = &tcm_loop_make_scsi_hba;
 +	fabric->tf_ops.fabric_drop_wwn = &tcm_loop_drop_scsi_hba;
 +	fabric->tf_ops.fabric_make_tpg = &tcm_loop_make_naa_tpg;
 +	fabric->tf_ops.fabric_drop_tpg = &tcm_loop_drop_naa_tpg;
 +	/*
 +	 * fabric_post_link() and fabric_pre_unlink() are used for
 +	 * registration and release of TCM Loop Virtual SCSI LUNs.
 +	 */
 +	fabric->tf_ops.fabric_post_link = &tcm_loop_port_link;
 +	fabric->tf_ops.fabric_pre_unlink = &tcm_loop_port_unlink;
 +	fabric->tf_ops.fabric_make_np = NULL;
 +	fabric->tf_ops.fabric_drop_np = NULL;
 +	/*
 +	 * Setup default attribute lists for various fabric->tf_cit_tmpl
 +	 */
 +	fabric->tf_cit_tmpl.tfc_wwn_cit.ct_attrs = tcm_loop_wwn_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_base_cit.ct_attrs = tcm_loop_tpg_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_attrib_cit.ct_attrs = tcm_loop_tpg_attrib_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_param_cit.ct_attrs = NULL;
 +	fabric->tf_cit_tmpl.tfc_tpg_np_base_cit.ct_attrs = NULL;
 +	/*
 +	 * Once fabric->tf_ops has been setup, now register the fabric for
 +	 * use within TCM
 +	 */
 +	ret = target_fabric_configfs_register(fabric);
 +	if (ret < 0) {
 +		pr_err("target_fabric_configfs_register() for"
 +				" TCM_Loop failed!\n");
 +		target_fabric_configfs_free(fabric);
 +		return -1;
 +	}
 +	/*
 +	 * Setup our local pointer to *fabric.
 +	 */
 +	tcm_loop_fabric_configfs = fabric;
 +	pr_debug("TCM_LOOP[0] - Set fabric ->"
 +			" tcm_loop_fabric_configfs\n");
 +	return 0;
 +}
 +
 +static void tcm_loop_deregister_configfs(void)
 +{
 +	if (!tcm_loop_fabric_configfs)
 +		return;
 +
 +	target_fabric_configfs_deregister(tcm_loop_fabric_configfs);
 +	tcm_loop_fabric_configfs = NULL;
 +	pr_debug("TCM_LOOP[0] - Cleared"
 +				" tcm_loop_fabric_configfs\n");
 +}
++=======
+ static const struct target_core_fabric_ops loop_ops = {
+ 	.module				= THIS_MODULE,
+ 	.name				= "loopback",
+ 	.get_fabric_name		= tcm_loop_get_fabric_name,
+ 	.get_fabric_proto_ident		= tcm_loop_get_fabric_proto_ident,
+ 	.tpg_get_wwn			= tcm_loop_get_endpoint_wwn,
+ 	.tpg_get_tag			= tcm_loop_get_tag,
+ 	.tpg_get_pr_transport_id	= tcm_loop_get_pr_transport_id,
+ 	.tpg_get_pr_transport_id_len	= tcm_loop_get_pr_transport_id_len,
+ 	.tpg_parse_pr_out_transport_id	= tcm_loop_parse_pr_out_transport_id,
+ 	.tpg_check_demo_mode		= tcm_loop_check_demo_mode,
+ 	.tpg_check_demo_mode_cache	= tcm_loop_check_demo_mode_cache,
+ 	.tpg_check_demo_mode_write_protect =
+ 				tcm_loop_check_demo_mode_write_protect,
+ 	.tpg_check_prod_mode_write_protect =
+ 				tcm_loop_check_prod_mode_write_protect,
+ 	.tpg_check_prot_fabric_only	= tcm_loop_check_prot_fabric_only,
+ 	.tpg_alloc_fabric_acl		= tcm_loop_tpg_alloc_fabric_acl,
+ 	.tpg_release_fabric_acl		= tcm_loop_tpg_release_fabric_acl,
+ 	.tpg_get_inst_index		= tcm_loop_get_inst_index,
+ 	.check_stop_free		= tcm_loop_check_stop_free,
+ 	.release_cmd			= tcm_loop_release_cmd,
+ 	.shutdown_session		= tcm_loop_shutdown_session,
+ 	.close_session			= tcm_loop_close_session,
+ 	.sess_get_index			= tcm_loop_sess_get_index,
+ 	.write_pending			= tcm_loop_write_pending,
+ 	.write_pending_status		= tcm_loop_write_pending_status,
+ 	.set_default_node_attributes	= tcm_loop_set_default_node_attributes,
+ 	.get_task_tag			= tcm_loop_get_task_tag,
+ 	.get_cmd_state			= tcm_loop_get_cmd_state,
+ 	.queue_data_in			= tcm_loop_queue_data_in,
+ 	.queue_status			= tcm_loop_queue_status,
+ 	.queue_tm_rsp			= tcm_loop_queue_tm_rsp,
+ 	.aborted_task			= tcm_loop_aborted_task,
+ 	.fabric_make_wwn		= tcm_loop_make_scsi_hba,
+ 	.fabric_drop_wwn		= tcm_loop_drop_scsi_hba,
+ 	.fabric_make_tpg		= tcm_loop_make_naa_tpg,
+ 	.fabric_drop_tpg		= tcm_loop_drop_naa_tpg,
+ 	.fabric_post_link		= tcm_loop_port_link,
+ 	.fabric_pre_unlink		= tcm_loop_port_unlink,
+ 	.tfc_wwn_attrs			= tcm_loop_wwn_attrs,
+ 	.tfc_tpg_base_attrs		= tcm_loop_tpg_attrs,
+ 	.tfc_tpg_attrib_attrs		= tcm_loop_tpg_attrib_attrs,
+ };
++>>>>>>> e1750d20e694 (target: make the tpg_get_default_depth method optional)
  
  static int __init tcm_loop_fabric_init(void)
  {
diff --cc drivers/vhost/scsi.c
index 65142d377371,fb8a93d5bfba..000000000000
--- a/drivers/vhost/scsi.c
+++ b/drivers/vhost/scsi.c
@@@ -323,20 -326,16 +323,29 @@@ static u16 tcm_vhost_get_tag(struct se_
  	return tpg->tport_tpgt;
  }
  
++<<<<<<< HEAD
 +static u32 tcm_vhost_get_default_depth(struct se_portal_group *se_tpg)
 +{
 +	return 1;
 +}
 +
 +static u32 tcm_vhost_get_pr_transport_id(struct se_portal_group *se_tpg,
 +	struct se_node_acl *se_nacl,
 +	struct t10_pr_registration *pr_reg,
 +	int *format_code,
 +	unsigned char *buf)
++=======
+ static u32
+ vhost_scsi_get_pr_transport_id(struct se_portal_group *se_tpg,
+ 			      struct se_node_acl *se_nacl,
+ 			      struct t10_pr_registration *pr_reg,
+ 			      int *format_code,
+ 			      unsigned char *buf)
++>>>>>>> e1750d20e694 (target: make the tpg_get_default_depth method optional)
  {
 -	struct vhost_scsi_tpg *tpg = container_of(se_tpg,
 -				struct vhost_scsi_tpg, se_tpg);
 -	struct vhost_scsi_tport *tport = tpg->tport;
 +	struct tcm_vhost_tpg *tpg = container_of(se_tpg,
 +				struct tcm_vhost_tpg, se_tpg);
 +	struct tcm_vhost_tport *tport = tpg->tport;
  
  	switch (tport->tport_proto_id) {
  	case SCSI_PROTOCOL_SAS:
@@@ -1989,35 -2288,39 +1998,61 @@@ static struct configfs_attribute *tcm_v
  	NULL,
  };
  
++<<<<<<< HEAD
 +static struct target_core_fabric_ops tcm_vhost_ops = {
 +	.get_fabric_name		= tcm_vhost_get_fabric_name,
 +	.get_fabric_proto_ident		= tcm_vhost_get_fabric_proto_ident,
 +	.tpg_get_wwn			= tcm_vhost_get_fabric_wwn,
 +	.tpg_get_tag			= tcm_vhost_get_tag,
 +	.tpg_get_default_depth		= tcm_vhost_get_default_depth,
 +	.tpg_get_pr_transport_id	= tcm_vhost_get_pr_transport_id,
 +	.tpg_get_pr_transport_id_len	= tcm_vhost_get_pr_transport_id_len,
 +	.tpg_parse_pr_out_transport_id	= tcm_vhost_parse_pr_out_transport_id,
 +	.tpg_check_demo_mode		= tcm_vhost_check_true,
 +	.tpg_check_demo_mode_cache	= tcm_vhost_check_true,
 +	.tpg_check_demo_mode_write_protect = tcm_vhost_check_false,
 +	.tpg_check_prod_mode_write_protect = tcm_vhost_check_false,
 +	.tpg_alloc_fabric_acl		= tcm_vhost_alloc_fabric_acl,
 +	.tpg_release_fabric_acl		= tcm_vhost_release_fabric_acl,
 +	.tpg_get_inst_index		= tcm_vhost_tpg_get_inst_index,
 +	.release_cmd			= tcm_vhost_release_cmd,
 +	.shutdown_session		= tcm_vhost_shutdown_session,
 +	.close_session			= tcm_vhost_close_session,
 +	.sess_get_index			= tcm_vhost_sess_get_index,
++=======
+ static struct target_core_fabric_ops vhost_scsi_ops = {
+ 	.module				= THIS_MODULE,
+ 	.name				= "vhost",
+ 	.get_fabric_name		= vhost_scsi_get_fabric_name,
+ 	.get_fabric_proto_ident		= vhost_scsi_get_fabric_proto_ident,
+ 	.tpg_get_wwn			= vhost_scsi_get_fabric_wwn,
+ 	.tpg_get_tag			= vhost_scsi_get_tpgt,
+ 	.tpg_get_pr_transport_id	= vhost_scsi_get_pr_transport_id,
+ 	.tpg_get_pr_transport_id_len	= vhost_scsi_get_pr_transport_id_len,
+ 	.tpg_parse_pr_out_transport_id	= vhost_scsi_parse_pr_out_transport_id,
+ 	.tpg_check_demo_mode		= vhost_scsi_check_true,
+ 	.tpg_check_demo_mode_cache	= vhost_scsi_check_true,
+ 	.tpg_check_demo_mode_write_protect = vhost_scsi_check_false,
+ 	.tpg_check_prod_mode_write_protect = vhost_scsi_check_false,
+ 	.tpg_check_prot_fabric_only	= vhost_scsi_check_prot_fabric_only,
+ 	.tpg_alloc_fabric_acl		= vhost_scsi_alloc_fabric_acl,
+ 	.tpg_release_fabric_acl		= vhost_scsi_release_fabric_acl,
+ 	.tpg_get_inst_index		= vhost_scsi_tpg_get_inst_index,
+ 	.release_cmd			= vhost_scsi_release_cmd,
+ 	.check_stop_free		= vhost_scsi_check_stop_free,
+ 	.shutdown_session		= vhost_scsi_shutdown_session,
+ 	.close_session			= vhost_scsi_close_session,
+ 	.sess_get_index			= vhost_scsi_sess_get_index,
++>>>>>>> e1750d20e694 (target: make the tpg_get_default_depth method optional)
  	.sess_get_initiator_sid		= NULL,
 -	.write_pending			= vhost_scsi_write_pending,
 -	.write_pending_status		= vhost_scsi_write_pending_status,
 -	.set_default_node_attributes	= vhost_scsi_set_default_node_attrs,
 -	.get_task_tag			= vhost_scsi_get_task_tag,
 -	.get_cmd_state			= vhost_scsi_get_cmd_state,
 -	.queue_data_in			= vhost_scsi_queue_data_in,
 -	.queue_status			= vhost_scsi_queue_status,
 -	.queue_tm_rsp			= vhost_scsi_queue_tm_rsp,
 -	.aborted_task			= vhost_scsi_aborted_task,
 +	.write_pending			= tcm_vhost_write_pending,
 +	.write_pending_status		= tcm_vhost_write_pending_status,
 +	.set_default_node_attributes	= tcm_vhost_set_default_node_attrs,
 +	.get_task_tag			= tcm_vhost_get_task_tag,
 +	.get_cmd_state			= tcm_vhost_get_cmd_state,
 +	.queue_data_in			= tcm_vhost_queue_data_in,
 +	.queue_status			= tcm_vhost_queue_status,
 +	.queue_tm_rsp			= tcm_vhost_queue_tm_rsp,
  	/*
  	 * Setup callers for generic logic in target_core_fabric_configfs.c
  	 */
* Unmerged path drivers/xen/xen-scsiback.c
diff --git a/Documentation/target/tcm_mod_builder.py b/Documentation/target/tcm_mod_builder.py
index 3fe0d812dcec..e1499f001e00 100755
--- a/Documentation/target/tcm_mod_builder.py
+++ b/Documentation/target/tcm_mod_builder.py
@@ -375,7 +375,6 @@ def tcm_mod_build_configfs(proto_ident, fabric_mod_dir_var, fabric_mod_name):
 	buf += "	.get_fabric_proto_ident		= " + fabric_mod_name + "_get_fabric_proto_ident,\n"
 	buf += "	.tpg_get_wwn			= " + fabric_mod_name + "_get_fabric_wwn,\n"
 	buf += "	.tpg_get_tag			= " + fabric_mod_name + "_get_tag,\n"
-	buf += "	.tpg_get_default_depth		= " + fabric_mod_name + "_get_default_depth,\n"
 	buf += "	.tpg_get_pr_transport_id	= " + fabric_mod_name + "_get_pr_transport_id,\n"
 	buf += "	.tpg_get_pr_transport_id_len	= " + fabric_mod_name + "_get_pr_transport_id_len,\n"
 	buf += "	.tpg_parse_pr_out_transport_id	= " + fabric_mod_name + "_parse_pr_out_transport_id,\n"
@@ -648,13 +647,6 @@ def tcm_mod_dump_fabric_ops(proto_ident, fabric_mod_dir_var, fabric_mod_name):
 			buf += "}\n\n"
 			bufi += "u16 " + fabric_mod_name + "_get_tag(struct se_portal_group *);\n"
 
-		if re.search('get_default_depth', fo):
-			buf += "u32 " + fabric_mod_name + "_get_default_depth(struct se_portal_group *se_tpg)\n"
-			buf += "{\n"
-			buf += "	return 1;\n"
-			buf += "}\n\n"
-			bufi += "u32 " + fabric_mod_name + "_get_default_depth(struct se_portal_group *);\n"
-
 		if re.search('get_pr_transport_id\)\(', fo):
 			buf += "u32 " + fabric_mod_name + "_get_pr_transport_id(\n"
 			buf += "	struct se_portal_group *se_tpg,\n"
diff --git a/drivers/infiniband/ulp/srpt/ib_srpt.c b/drivers/infiniband/ulp/srpt/ib_srpt.c
index 72146d165e84..e981244c9be6 100644
--- a/drivers/infiniband/ulp/srpt/ib_srpt.c
+++ b/drivers/infiniband/ulp/srpt/ib_srpt.c
@@ -2702,11 +2702,6 @@ static u16 srpt_get_tag(struct se_portal_group *tpg)
 	return 1;
 }
 
-static u32 srpt_get_default_depth(struct se_portal_group *se_tpg)
-{
-	return 1;
-}
-
 static u32 srpt_get_pr_transport_id(struct se_portal_group *se_tpg,
 				    struct se_node_acl *se_nacl,
 				    struct t10_pr_registration *pr_reg,
@@ -3224,7 +3219,6 @@ static struct target_core_fabric_ops srpt_template = {
 	.get_fabric_proto_ident		= srpt_get_fabric_proto_ident,
 	.tpg_get_wwn			= srpt_get_fabric_wwn,
 	.tpg_get_tag			= srpt_get_tag,
-	.tpg_get_default_depth		= srpt_get_default_depth,
 	.tpg_get_pr_transport_id	= srpt_get_pr_transport_id,
 	.tpg_get_pr_transport_id_len	= srpt_get_pr_transport_id_len,
 	.tpg_parse_pr_out_transport_id	= srpt_parse_pr_out_transport_id,
diff --git a/drivers/scsi/qla2xxx/tcm_qla2xxx.c b/drivers/scsi/qla2xxx/tcm_qla2xxx.c
index 14250fcfe054..05a639db49e4 100644
--- a/drivers/scsi/qla2xxx/tcm_qla2xxx.c
+++ b/drivers/scsi/qla2xxx/tcm_qla2xxx.c
@@ -237,11 +237,6 @@ static u16 tcm_qla2xxx_get_tag(struct se_portal_group *se_tpg)
 	return tpg->lport_tpgt;
 }
 
-static u32 tcm_qla2xxx_get_default_depth(struct se_portal_group *se_tpg)
-{
-	return 1;
-}
-
 static u32 tcm_qla2xxx_get_pr_transport_id(
 	struct se_portal_group *se_tpg,
 	struct se_node_acl *se_nacl,
@@ -1737,7 +1732,6 @@ static struct target_core_fabric_ops tcm_qla2xxx_ops = {
 	.get_fabric_proto_ident		= tcm_qla2xxx_get_fabric_proto_ident,
 	.tpg_get_wwn			= tcm_qla2xxx_get_fabric_wwn,
 	.tpg_get_tag			= tcm_qla2xxx_get_tag,
-	.tpg_get_default_depth		= tcm_qla2xxx_get_default_depth,
 	.tpg_get_pr_transport_id	= tcm_qla2xxx_get_pr_transport_id,
 	.tpg_get_pr_transport_id_len	= tcm_qla2xxx_get_pr_transport_id_len,
 	.tpg_parse_pr_out_transport_id	= tcm_qla2xxx_parse_pr_out_transport_id,
@@ -1787,7 +1781,6 @@ static struct target_core_fabric_ops tcm_qla2xxx_npiv_ops = {
 	.get_fabric_proto_ident		= tcm_qla2xxx_get_fabric_proto_ident,
 	.tpg_get_wwn			= tcm_qla2xxx_get_fabric_wwn,
 	.tpg_get_tag			= tcm_qla2xxx_get_tag,
-	.tpg_get_default_depth		= tcm_qla2xxx_get_default_depth,
 	.tpg_get_pr_transport_id	= tcm_qla2xxx_get_pr_transport_id,
 	.tpg_get_pr_transport_id_len	= tcm_qla2xxx_get_pr_transport_id_len,
 	.tpg_parse_pr_out_transport_id	= tcm_qla2xxx_parse_pr_out_transport_id,
* Unmerged path drivers/target/loopback/tcm_loop.c
diff --git a/drivers/target/sbp/sbp_target.c b/drivers/target/sbp/sbp_target.c
index b33c121ab56c..3eea0af856d2 100644
--- a/drivers/target/sbp/sbp_target.c
+++ b/drivers/target/sbp/sbp_target.c
@@ -1708,11 +1708,6 @@ static u16 sbp_get_tag(struct se_portal_group *se_tpg)
 	return tpg->tport_tpgt;
 }
 
-static u32 sbp_get_default_depth(struct se_portal_group *se_tpg)
-{
-	return 1;
-}
-
 static struct se_node_acl *sbp_alloc_fabric_acl(struct se_portal_group *se_tpg)
 {
 	return kzalloc(sizeof(struct se_node_acl), GFP_KERNEL);
@@ -2490,7 +2485,6 @@ static struct target_core_fabric_ops sbp_ops = {
 	.get_fabric_proto_ident		= sbp_get_fabric_proto_ident,
 	.tpg_get_wwn			= sbp_get_fabric_wwn,
 	.tpg_get_tag			= sbp_get_tag,
-	.tpg_get_default_depth		= sbp_get_default_depth,
 	.tpg_get_pr_transport_id	= sbp_get_pr_transport_id,
 	.tpg_get_pr_transport_id_len	= sbp_get_pr_transport_id_len,
 	.tpg_parse_pr_out_transport_id	= sbp_parse_pr_out_transport_id,
diff --git a/drivers/target/target_core_configfs.c b/drivers/target/target_core_configfs.c
index 372df6e87bcb..c3fdbb7be80b 100644
--- a/drivers/target/target_core_configfs.c
+++ b/drivers/target/target_core_configfs.c
@@ -391,10 +391,6 @@ static int target_fabric_tf_ops_check(
 		pr_err("Missing tfo->tpg_get_tag()\n");
 		return -EINVAL;
 	}
-	if (!tfo->tpg_get_default_depth) {
-		pr_err("Missing tfo->tpg_get_default_depth()\n");
-		return -EINVAL;
-	}
 	if (!tfo->tpg_get_pr_transport_id) {
 		pr_err("Missing tfo->tpg_get_pr_transport_id()\n");
 		return -EINVAL;
diff --git a/drivers/target/target_core_tpg.c b/drivers/target/target_core_tpg.c
index 0696de9553d3..5bb7a2fa885f 100644
--- a/drivers/target/target_core_tpg.c
+++ b/drivers/target/target_core_tpg.c
@@ -282,7 +282,10 @@ struct se_node_acl *core_tpg_check_initiator_node_acl(
 	spin_lock_init(&acl->device_list_lock);
 	spin_lock_init(&acl->nacl_sess_lock);
 	atomic_set(&acl->acl_pr_ref_count, 0);
-	acl->queue_depth = tpg->se_tpg_tfo->tpg_get_default_depth(tpg);
+	if (tpg->se_tpg_tfo->tpg_get_default_depth)
+		acl->queue_depth = tpg->se_tpg_tfo->tpg_get_default_depth(tpg);
+	else
+		acl->queue_depth = 1;
 	snprintf(acl->initiatorname, TRANSPORT_IQN_LEN, "%s", initiatorname);
 	acl->se_tpg = tpg;
 	acl->acl_index = scsi_get_new_index(SCSI_AUTH_INTR_INDEX);
diff --git a/drivers/target/tcm_fc/tfc_conf.c b/drivers/target/tcm_fc/tfc_conf.c
index efdcb9663a1a..69076ee20218 100644
--- a/drivers/target/tcm_fc/tfc_conf.c
+++ b/drivers/target/tcm_fc/tfc_conf.c
@@ -486,11 +486,6 @@ static u16 ft_get_tag(struct se_portal_group *se_tpg)
 	return tpg->index;
 }
 
-static u32 ft_get_default_depth(struct se_portal_group *se_tpg)
-{
-	return 1;
-}
-
 static int ft_check_false(struct se_portal_group *se_tpg)
 {
 	return 0;
@@ -512,7 +507,6 @@ static struct target_core_fabric_ops ft_fabric_ops = {
 	.get_fabric_proto_ident =	fc_get_fabric_proto_ident,
 	.tpg_get_wwn =			ft_get_fabric_wwn,
 	.tpg_get_tag =			ft_get_tag,
-	.tpg_get_default_depth =	ft_get_default_depth,
 	.tpg_get_pr_transport_id =	fc_get_pr_transport_id,
 	.tpg_get_pr_transport_id_len =	fc_get_pr_transport_id_len,
 	.tpg_parse_pr_out_transport_id = fc_parse_pr_out_transport_id,
diff --git a/drivers/usb/gadget/tcm_usb_gadget.c b/drivers/usb/gadget/tcm_usb_gadget.c
index 7cacd6ae818e..e792fb536b52 100644
--- a/drivers/usb/gadget/tcm_usb_gadget.c
+++ b/drivers/usb/gadget/tcm_usb_gadget.c
@@ -1307,11 +1307,6 @@ static u16 usbg_get_tag(struct se_portal_group *se_tpg)
 	return tpg->tport_tpgt;
 }
 
-static u32 usbg_get_default_depth(struct se_portal_group *se_tpg)
-{
-	return 1;
-}
-
 static u32 usbg_get_pr_transport_id(
 	struct se_portal_group *se_tpg,
 	struct se_node_acl *se_nacl,
@@ -1874,7 +1869,6 @@ static struct target_core_fabric_ops usbg_ops = {
 	.get_fabric_proto_ident		= usbg_get_fabric_proto_ident,
 	.tpg_get_wwn			= usbg_get_fabric_wwn,
 	.tpg_get_tag			= usbg_get_tag,
-	.tpg_get_default_depth		= usbg_get_default_depth,
 	.tpg_get_pr_transport_id	= usbg_get_pr_transport_id,
 	.tpg_get_pr_transport_id_len	= usbg_get_pr_transport_id_len,
 	.tpg_parse_pr_out_transport_id	= usbg_parse_pr_out_transport_id,
* Unmerged path drivers/vhost/scsi.c
* Unmerged path drivers/xen/xen-scsiback.c
