net: sched: cls_basic: no need to call tcf_exts_change for newly allocated struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] sched: cls_basic: no need to call tcf_exts_change for newly allocated struct (Ivan Vecera) [1445420]
Rebuild_FUZZ: 96.82%
commit-author Jiri Pirko <jiri@mellanox.com>
commit ff1f8ca0805ab03c31e14a9356aa2ac81d65c338
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ff1f8ca0.failed

As the f struct was allocated right before basic_set_parms call, no need
to use tcf_exts_change to do atomic change, and we can just fill-up
the unused exts struct directly by tcf_exts_validate.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ff1f8ca0805ab03c31e14a9356aa2ac81d65c338)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_basic.c
diff --cc net/sched/cls_basic.c
index 9d68a920c5a4,7c7a82138f76..000000000000
--- a/net/sched/cls_basic.c
+++ b/net/sched/cls_basic.c
@@@ -128,31 -129,22 +128,35 @@@ static int basic_set_parms(struct net *
  			   struct nlattr *est, bool ovr)
  {
  	int err;
++<<<<<<< HEAD
 +	struct tcf_exts e;
 +	struct tcf_ematch_tree t;
 +
 +	tcf_exts_init(&e, TCA_BASIC_ACT, TCA_BASIC_POLICE);
 +	err = tcf_exts_validate(net, tp, tb, est, &e, ovr);
++=======
+ 
+ 	err = tcf_exts_validate(net, tp, tb, est, &f->exts, ovr);
++>>>>>>> ff1f8ca0805a (net: sched: cls_basic: no need to call tcf_exts_change for newly allocated struct)
  	if (err < 0)
  		return err;
  
 -	err = tcf_em_tree_validate(tp, tb[TCA_BASIC_EMATCHES], &f->ematches);
 +	err = tcf_em_tree_validate(tp, tb[TCA_BASIC_EMATCHES], &t);
  	if (err < 0)
- 		goto errout;
+ 		return err;
  
  	if (tb[TCA_BASIC_CLASSID]) {
  		f->res.classid = nla_get_u32(tb[TCA_BASIC_CLASSID]);
  		tcf_bind_filter(tp, &f->res, base);
  	}
  
++<<<<<<< HEAD
 +	tcf_exts_change(tp, &f->exts, &e);
 +	tcf_em_tree_change(tp, &f->ematches, &t);
++=======
++>>>>>>> ff1f8ca0805a (net: sched: cls_basic: no need to call tcf_exts_change for newly allocated struct)
  	f->tp = tp;
- 
  	return 0;
- errout:
- 	tcf_exts_destroy(&e);
- 	return err;
  }
  
  static int basic_change(struct net *net, struct sk_buff *in_skb,
* Unmerged path net/sched/cls_basic.c
