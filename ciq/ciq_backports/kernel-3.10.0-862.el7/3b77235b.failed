net/mlx5e: Proper names for SQ/RQ/CQ functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Proper names for SQ/RQ/CQ functions (Don Dutile) [1456694 1499362]
Rebuild_FUZZ: 95.45%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit 3b77235b94347e813e2d4d33363512127d32e899
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3b77235b.failed

Rename mlx5e_{create,destroy}_{sq,rq,cq} to
mlx5e_{alloc,free}_{sq,rq,cq}.

Rename mlx5e_{enable,disable}_{sq,rq,cq} to
mlx5e_{create,destroy}_{sq,rq,cq}.

mlx5e_{enable,disable}_{sq,rq,cq} used to actually create/destroy the SQ
in FW, so we rename them to align the functions names with FW semantics.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3b77235b94347e813e2d4d33363512127d32e899)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index edb21d8194bc,d03afa535064..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -819,9 -847,10 +819,9 @@@ static int mlx5e_open_rq(struct mlx5e_c
  {
  	struct mlx5e_sq *sq = &c->icosq;
  	u16 pi = sq->pc & sq->wq.sz_m1;
 -	struct mlx5e_tx_wqe *nopwqe;
  	int err;
  
- 	err = mlx5e_create_rq(c, param, rq);
+ 	err = mlx5e_alloc_rq(c, param, rq);
  	if (err)
  		return err;
  
@@@ -839,15 -868,16 +839,15 @@@
  
  	sq->db.ico_wqe[pi].opcode     = MLX5_OPCODE_NOP;
  	sq->db.ico_wqe[pi].num_wqebbs = 1;
 -	nopwqe = mlx5e_post_nop(&sq->wq, sq->sqn, &sq->pc);
 -	mlx5e_notify_hw(&sq->wq, sq->pc, sq->uar_map, &nopwqe->ctrl);
 -	sq->stats.nop++; /* TODO no need for SQ stats in ico */
 +	mlx5e_send_nop(sq, true); /* trigger mlx5e_post_rx_wqes() */
 +
  	return 0;
  
- err_disable_rq:
- 	clear_bit(MLX5E_RQ_STATE_ENABLED, &rq->state);
- 	mlx5e_disable_rq(rq);
  err_destroy_rq:
+ 	clear_bit(MLX5E_RQ_STATE_ENABLED, &rq->state);
  	mlx5e_destroy_rq(rq);
+ err_free_rq:
+ 	mlx5e_free_rq(rq);
  
  	return err;
  }
@@@ -858,11 -888,30 +858,11 @@@ static void mlx5e_close_rq(struct mlx5e
  	napi_synchronize(&rq->channel->napi); /* prevent mlx5e_post_rx_wqes */
  	cancel_work_sync(&rq->am.work);
  
- 	mlx5e_disable_rq(rq);
- 	mlx5e_free_rx_descs(rq);
  	mlx5e_destroy_rq(rq);
+ 	mlx5e_free_rx_descs(rq);
+ 	mlx5e_free_rq(rq);
  }
  
 -static void mlx5e_free_sq_xdp_db(struct mlx5e_sq *sq)
 -{
 -	kfree(sq->db.xdp.di);
 -}
 -
 -static int mlx5e_alloc_sq_xdp_db(struct mlx5e_sq *sq, int numa)
 -{
 -	int wq_sz = mlx5_wq_cyc_get_size(&sq->wq);
 -
 -	sq->db.xdp.di = kzalloc_node(sizeof(*sq->db.xdp.di) * wq_sz,
 -				     GFP_KERNEL, numa);
 -	if (!sq->db.xdp.di) {
 -		mlx5e_free_sq_xdp_db(sq);
 -		return -ENOMEM;
 -	}
 -
 -	return 0;
 -}
 -
  static void mlx5e_free_sq_ico_db(struct mlx5e_sq *sq)
  {
  	kfree(sq->db.ico_wqe);
@@@ -932,10 -986,21 +932,28 @@@ static int mlx5e_alloc_sq_db(struct mlx
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int mlx5e_create_sq(struct mlx5e_channel *c,
 +			   int tc,
 +			   struct mlx5e_sq_param *param,
 +			   struct mlx5e_sq *sq)
++=======
+ static int mlx5e_sq_get_max_wqebbs(u8 sq_type)
+ {
+ 	switch (sq_type) {
+ 	case MLX5E_SQ_ICO:
+ 		return MLX5E_ICOSQ_MAX_WQEBBS;
+ 	case MLX5E_SQ_XDP:
+ 		return 1;
+ 	}
+ 	return MLX5_SEND_WQE_MAX_WQEBBS;
+ }
+ 
+ static int mlx5e_alloc_sq(struct mlx5e_channel *c,
+ 			  int tc,
+ 			  struct mlx5e_sq_param *param,
+ 			  struct mlx5e_sq *sq)
++>>>>>>> 3b77235b9434 (net/mlx5e: Proper names for SQ/RQ/CQ functions)
  {
  	struct mlx5e_priv *priv = c->priv;
  	struct mlx5_core_dev *mdev = priv->mdev;
@@@ -1007,17 -1051,13 +1025,17 @@@ err_unmap_free_uar
  	return err;
  }
  
- static void mlx5e_destroy_sq(struct mlx5e_sq *sq)
+ static void mlx5e_free_sq(struct mlx5e_sq *sq)
  {
 +	struct mlx5e_channel *c = sq->channel;
 +	struct mlx5e_priv *priv = c->priv;
 +
  	mlx5e_free_sq_db(sq);
  	mlx5_wq_destroy(&sq->wq_ctrl);
 +	mlx5_unmap_free_uar(priv->mdev, &sq->uar);
  }
  
- static int mlx5e_enable_sq(struct mlx5e_sq *sq, struct mlx5e_sq_param *param)
+ static int mlx5e_create_sq(struct mlx5e_sq *sq, struct mlx5e_sq_param *param)
  {
  	struct mlx5e_channel *c = sq->channel;
  	struct mlx5e_priv *priv = c->priv;
@@@ -1167,14 -1213,14 +1185,19 @@@ static void mlx5e_close_sq(struct mlx5e
  		}
  	}
  
++<<<<<<< HEAD
 +	mlx5e_disable_sq(sq);
 +	mlx5e_free_tx_descs(sq);
++=======
++>>>>>>> 3b77235b9434 (net/mlx5e: Proper names for SQ/RQ/CQ functions)
  	mlx5e_destroy_sq(sq);
+ 	mlx5e_free_sq_descs(sq);
+ 	mlx5e_free_sq(sq);
  }
  
- static int mlx5e_create_cq(struct mlx5e_channel *c,
- 			   struct mlx5e_cq_param *param,
- 			   struct mlx5e_cq *cq)
+ static int mlx5e_alloc_cq(struct mlx5e_channel *c,
+ 			  struct mlx5e_cq_param *param,
+ 			  struct mlx5e_cq *cq)
  {
  	struct mlx5e_priv *priv = c->priv;
  	struct mlx5_core_dev *mdev = priv->mdev;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
