block: do not put mq context in blk_mq_alloc_request_hctx

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [block] do not put mq context in blk_mq_alloc_request_hctx (Ming Lei) [1458104]
Rebuild_FUZZ: 93.46%
commit-author Minchan Kim <minchan@kernel.org>
commit 3e06eb3dacdff52749df85694cf6bc48283973c6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3e06eb3d.failed

In blk_mq_alloc_request_hctx, blk_mq_sched_get_request doesn't
get sw context so we don't need to put the context with
blk_mq_put_ctx. Unless, we will see preempt counter underflow.

	Cc: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Minchan Kim <minchan@kernel.org>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 3e06eb3dacdff52749df85694cf6bc48283973c6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 3e6f9b3d2b64,ef63367077ad..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -332,25 -314,22 +332,34 @@@ struct request *blk_mq_alloc_request_hc
  	 * Check if the hardware context is actually mapped to anything.
  	 * If not tell the caller that it should skip this queue.
  	 */
 -	alloc_data.hctx = q->queue_hw_ctx[hctx_idx];
 -	if (!blk_mq_hw_queue_mapped(alloc_data.hctx)) {
 -		blk_queue_exit(q);
 -		return ERR_PTR(-EXDEV);
 +	hctx = q->queue_hw_ctx[hctx_idx];
 +	if (!blk_mq_hw_queue_mapped(hctx)) {
 +		ret = -EXDEV;
 +		goto out_queue_exit;
  	}
 -	cpu = cpumask_first(alloc_data.hctx->cpumask);
 -	alloc_data.ctx = __blk_mq_get_ctx(q, cpu);
 +	ctx = __blk_mq_get_ctx(q, cpumask_first(hctx->cpumask));
  
++<<<<<<< HEAD
 +	blk_mq_set_alloc_data(&alloc_data, q, flags, ctx, hctx);
 +	rq = __blk_mq_alloc_request(&alloc_data, rw);
 +	if (!rq) {
 +		ret = -EWOULDBLOCK;
 +		goto out_queue_exit;
 +	}
++=======
+ 	rq = blk_mq_sched_get_request(q, NULL, rw, &alloc_data);
+ 
+ 	blk_queue_exit(q);
+ 
+ 	if (!rq)
+ 		return ERR_PTR(-EWOULDBLOCK);
++>>>>>>> 3e06eb3dacdf (block: do not put mq context in blk_mq_alloc_request_hctx)
  
  	return rq;
 +
 +out_queue_exit:
 +	blk_queue_exit(q);
 +	return ERR_PTR(ret);
  }
  EXPORT_SYMBOL_GPL(blk_mq_alloc_request_hctx);
  
* Unmerged path block/blk-mq.c
