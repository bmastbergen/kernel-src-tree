ibmvnic: Ensure that buffers are NULL after free

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
commit b0992eca00c490c0923044b7d8b853c212b3cacc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b0992eca.failed

This change will guard against a double free in the case that the
buffers were previously freed at some other time, such as during
a device reset. It resolves a kernel oops that occurred when changing
the VNIC device's MTU.

	Signed-off-by: Thomas Falcon <tlfalcon@linux.vnet.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b0992eca00c490c0923044b7d8b853c212b3cacc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/ibm/ibmvnic.c
diff --cc drivers/net/ethernet/ibm/ibmvnic.c
index 5e68a5a9145a,8dabc9d9dfa6..000000000000
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@@ -371,25 -350,680 +371,605 @@@ static void replenish_pools(struct ibmv
  	}
  }
  
++<<<<<<< HEAD
 +static void free_rx_pool(struct ibmvnic_adapter *adapter,
 +			 struct ibmvnic_rx_pool *pool)
++=======
+ static void release_stats_buffers(struct ibmvnic_adapter *adapter)
+ {
+ 	kfree(adapter->tx_stats_buffers);
+ 	kfree(adapter->rx_stats_buffers);
+ 	adapter->tx_stats_buffers = NULL;
+ 	adapter->rx_stats_buffers = NULL;
+ }
+ 
+ static int init_stats_buffers(struct ibmvnic_adapter *adapter)
+ {
+ 	adapter->tx_stats_buffers =
+ 				kcalloc(adapter->req_tx_queues,
+ 					sizeof(struct ibmvnic_tx_queue_stats),
+ 					GFP_KERNEL);
+ 	if (!adapter->tx_stats_buffers)
+ 		return -ENOMEM;
+ 
+ 	adapter->rx_stats_buffers =
+ 				kcalloc(adapter->req_rx_queues,
+ 					sizeof(struct ibmvnic_rx_queue_stats),
+ 					GFP_KERNEL);
+ 	if (!adapter->rx_stats_buffers)
+ 		return -ENOMEM;
+ 
+ 	return 0;
+ }
+ 
+ static void release_stats_token(struct ibmvnic_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->vdev->dev;
+ 
+ 	if (!adapter->stats_token)
+ 		return;
+ 
+ 	dma_unmap_single(dev, adapter->stats_token,
+ 			 sizeof(struct ibmvnic_statistics),
+ 			 DMA_FROM_DEVICE);
+ 	adapter->stats_token = 0;
+ }
+ 
+ static int init_stats_token(struct ibmvnic_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->vdev->dev;
+ 	dma_addr_t stok;
+ 
+ 	stok = dma_map_single(dev, &adapter->stats,
+ 			      sizeof(struct ibmvnic_statistics),
+ 			      DMA_FROM_DEVICE);
+ 	if (dma_mapping_error(dev, stok)) {
+ 		dev_err(dev, "Couldn't map stats buffer\n");
+ 		return -1;
+ 	}
+ 
+ 	adapter->stats_token = stok;
+ 	netdev_dbg(adapter->netdev, "Stats token initialized (%llx)\n", stok);
+ 	return 0;
+ }
+ 
+ static int reset_rx_pools(struct ibmvnic_adapter *adapter)
+ {
+ 	struct ibmvnic_rx_pool *rx_pool;
+ 	int rx_scrqs;
+ 	int i, j, rc;
+ 	u64 *size_array;
+ 
+ 	size_array = (u64 *)((u8 *)(adapter->login_rsp_buf) +
+ 		be32_to_cpu(adapter->login_rsp_buf->off_rxadd_buff_size));
+ 
+ 	rx_scrqs = be32_to_cpu(adapter->login_rsp_buf->num_rxadd_subcrqs);
+ 	for (i = 0; i < rx_scrqs; i++) {
+ 		rx_pool = &adapter->rx_pool[i];
+ 
+ 		netdev_dbg(adapter->netdev, "Re-setting rx_pool[%d]\n", i);
+ 
+ 		if (rx_pool->buff_size != be64_to_cpu(size_array[i])) {
+ 			free_long_term_buff(adapter, &rx_pool->long_term_buff);
+ 			rx_pool->buff_size = be64_to_cpu(size_array[i]);
+ 			alloc_long_term_buff(adapter, &rx_pool->long_term_buff,
+ 					     rx_pool->size *
+ 					     rx_pool->buff_size);
+ 		} else {
+ 			rc = reset_long_term_buff(adapter,
+ 						  &rx_pool->long_term_buff);
+ 		}
+ 
+ 		if (rc)
+ 			return rc;
+ 
+ 		for (j = 0; j < rx_pool->size; j++)
+ 			rx_pool->free_map[j] = j;
+ 
+ 		memset(rx_pool->rx_buff, 0,
+ 		       rx_pool->size * sizeof(struct ibmvnic_rx_buff));
+ 
+ 		atomic_set(&rx_pool->available, 0);
+ 		rx_pool->next_alloc = 0;
+ 		rx_pool->next_free = 0;
+ 		rx_pool->active = 1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void release_rx_pools(struct ibmvnic_adapter *adapter)
+ {
+ 	struct ibmvnic_rx_pool *rx_pool;
+ 	int i, j;
+ 
+ 	if (!adapter->rx_pool)
+ 		return;
+ 
+ 	for (i = 0; i < adapter->num_active_rx_pools; i++) {
+ 		rx_pool = &adapter->rx_pool[i];
+ 
+ 		netdev_dbg(adapter->netdev, "Releasing rx_pool[%d]\n", i);
+ 
+ 		kfree(rx_pool->free_map);
+ 		free_long_term_buff(adapter, &rx_pool->long_term_buff);
+ 
+ 		if (!rx_pool->rx_buff)
+ 			continue;
+ 
+ 		for (j = 0; j < rx_pool->size; j++) {
+ 			if (rx_pool->rx_buff[j].skb) {
+ 				dev_kfree_skb_any(rx_pool->rx_buff[i].skb);
+ 				rx_pool->rx_buff[i].skb = NULL;
+ 			}
+ 		}
+ 
+ 		kfree(rx_pool->rx_buff);
+ 	}
+ 
+ 	kfree(adapter->rx_pool);
+ 	adapter->rx_pool = NULL;
+ 	adapter->num_active_rx_pools = 0;
+ }
+ 
+ static int init_rx_pools(struct net_device *netdev)
+ {
+ 	struct ibmvnic_adapter *adapter = netdev_priv(netdev);
+ 	struct device *dev = &adapter->vdev->dev;
+ 	struct ibmvnic_rx_pool *rx_pool;
+ 	int rxadd_subcrqs;
+ 	u64 *size_array;
+ 	int i, j;
+ 
+ 	rxadd_subcrqs =
+ 		be32_to_cpu(adapter->login_rsp_buf->num_rxadd_subcrqs);
+ 	size_array = (u64 *)((u8 *)(adapter->login_rsp_buf) +
+ 		be32_to_cpu(adapter->login_rsp_buf->off_rxadd_buff_size));
+ 
+ 	adapter->rx_pool = kcalloc(rxadd_subcrqs,
+ 				   sizeof(struct ibmvnic_rx_pool),
+ 				   GFP_KERNEL);
+ 	if (!adapter->rx_pool) {
+ 		dev_err(dev, "Failed to allocate rx pools\n");
+ 		return -1;
+ 	}
+ 
+ 	adapter->num_active_rx_pools = 0;
+ 
+ 	for (i = 0; i < rxadd_subcrqs; i++) {
+ 		rx_pool = &adapter->rx_pool[i];
+ 
+ 		netdev_dbg(adapter->netdev,
+ 			   "Initializing rx_pool[%d], %lld buffs, %lld bytes each\n",
+ 			   i, adapter->req_rx_add_entries_per_subcrq,
+ 			   be64_to_cpu(size_array[i]));
+ 
+ 		rx_pool->size = adapter->req_rx_add_entries_per_subcrq;
+ 		rx_pool->index = i;
+ 		rx_pool->buff_size = be64_to_cpu(size_array[i]);
+ 		rx_pool->active = 1;
+ 
+ 		rx_pool->free_map = kcalloc(rx_pool->size, sizeof(int),
+ 					    GFP_KERNEL);
+ 		if (!rx_pool->free_map) {
+ 			release_rx_pools(adapter);
+ 			return -1;
+ 		}
+ 
+ 		rx_pool->rx_buff = kcalloc(rx_pool->size,
+ 					   sizeof(struct ibmvnic_rx_buff),
+ 					   GFP_KERNEL);
+ 		if (!rx_pool->rx_buff) {
+ 			dev_err(dev, "Couldn't alloc rx buffers\n");
+ 			release_rx_pools(adapter);
+ 			return -1;
+ 		}
+ 
+ 		if (alloc_long_term_buff(adapter, &rx_pool->long_term_buff,
+ 					 rx_pool->size * rx_pool->buff_size)) {
+ 			release_rx_pools(adapter);
+ 			return -1;
+ 		}
+ 
+ 		for (j = 0; j < rx_pool->size; ++j)
+ 			rx_pool->free_map[j] = j;
+ 
+ 		atomic_set(&rx_pool->available, 0);
+ 		rx_pool->next_alloc = 0;
+ 		rx_pool->next_free = 0;
+ 	}
+ 
+ 	adapter->num_active_rx_pools = rxadd_subcrqs;
+ 
+ 	return 0;
+ }
+ 
+ static int reset_tx_pools(struct ibmvnic_adapter *adapter)
+ {
+ 	struct ibmvnic_tx_pool *tx_pool;
+ 	int tx_scrqs;
+ 	int i, j, rc;
+ 
+ 	tx_scrqs = be32_to_cpu(adapter->login_rsp_buf->num_txsubm_subcrqs);
+ 	for (i = 0; i < tx_scrqs; i++) {
+ 		netdev_dbg(adapter->netdev, "Re-setting tx_pool[%d]\n", i);
+ 
+ 		tx_pool = &adapter->tx_pool[i];
+ 
+ 		rc = reset_long_term_buff(adapter, &tx_pool->long_term_buff);
+ 		if (rc)
+ 			return rc;
+ 
+ 		rc = reset_long_term_buff(adapter, &tx_pool->tso_ltb);
+ 		if (rc)
+ 			return rc;
+ 
+ 		memset(tx_pool->tx_buff, 0,
+ 		       adapter->req_tx_entries_per_subcrq *
+ 		       sizeof(struct ibmvnic_tx_buff));
+ 
+ 		for (j = 0; j < adapter->req_tx_entries_per_subcrq; j++)
+ 			tx_pool->free_map[j] = j;
+ 
+ 		tx_pool->consumer_index = 0;
+ 		tx_pool->producer_index = 0;
+ 		tx_pool->tso_index = 0;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void release_vpd_data(struct ibmvnic_adapter *adapter)
+ {
+ 	if (!adapter->vpd)
+ 		return;
+ 
+ 	kfree(adapter->vpd->buff);
+ 	kfree(adapter->vpd);
+ 
+ 	adapter->vpd = NULL;
+ }
+ 
+ static void release_tx_pools(struct ibmvnic_adapter *adapter)
+ {
+ 	struct ibmvnic_tx_pool *tx_pool;
+ 	int i;
+ 
+ 	if (!adapter->tx_pool)
+ 		return;
+ 
+ 	for (i = 0; i < adapter->num_active_tx_pools; i++) {
+ 		netdev_dbg(adapter->netdev, "Releasing tx_pool[%d]\n", i);
+ 		tx_pool = &adapter->tx_pool[i];
+ 		kfree(tx_pool->tx_buff);
+ 		free_long_term_buff(adapter, &tx_pool->long_term_buff);
+ 		free_long_term_buff(adapter, &tx_pool->tso_ltb);
+ 		kfree(tx_pool->free_map);
+ 	}
+ 
+ 	kfree(adapter->tx_pool);
+ 	adapter->tx_pool = NULL;
+ 	adapter->num_active_tx_pools = 0;
+ }
+ 
+ static int init_tx_pools(struct net_device *netdev)
+ {
+ 	struct ibmvnic_adapter *adapter = netdev_priv(netdev);
+ 	struct device *dev = &adapter->vdev->dev;
+ 	struct ibmvnic_tx_pool *tx_pool;
+ 	int tx_subcrqs;
+ 	int i, j;
+ 
+ 	tx_subcrqs = be32_to_cpu(adapter->login_rsp_buf->num_txsubm_subcrqs);
+ 	adapter->tx_pool = kcalloc(tx_subcrqs,
+ 				   sizeof(struct ibmvnic_tx_pool), GFP_KERNEL);
+ 	if (!adapter->tx_pool)
+ 		return -1;
+ 
+ 	adapter->num_active_tx_pools = 0;
+ 
+ 	for (i = 0; i < tx_subcrqs; i++) {
+ 		tx_pool = &adapter->tx_pool[i];
+ 
+ 		netdev_dbg(adapter->netdev,
+ 			   "Initializing tx_pool[%d], %lld buffs\n",
+ 			   i, adapter->req_tx_entries_per_subcrq);
+ 
+ 		tx_pool->tx_buff = kcalloc(adapter->req_tx_entries_per_subcrq,
+ 					   sizeof(struct ibmvnic_tx_buff),
+ 					   GFP_KERNEL);
+ 		if (!tx_pool->tx_buff) {
+ 			dev_err(dev, "tx pool buffer allocation failed\n");
+ 			release_tx_pools(adapter);
+ 			return -1;
+ 		}
+ 
+ 		if (alloc_long_term_buff(adapter, &tx_pool->long_term_buff,
+ 					 adapter->req_tx_entries_per_subcrq *
+ 					 adapter->req_mtu)) {
+ 			release_tx_pools(adapter);
+ 			return -1;
+ 		}
+ 
+ 		/* alloc TSO ltb */
+ 		if (alloc_long_term_buff(adapter, &tx_pool->tso_ltb,
+ 					 IBMVNIC_TSO_BUFS *
+ 					 IBMVNIC_TSO_BUF_SZ)) {
+ 			release_tx_pools(adapter);
+ 			return -1;
+ 		}
+ 
+ 		tx_pool->tso_index = 0;
+ 
+ 		tx_pool->free_map = kcalloc(adapter->req_tx_entries_per_subcrq,
+ 					    sizeof(int), GFP_KERNEL);
+ 		if (!tx_pool->free_map) {
+ 			release_tx_pools(adapter);
+ 			return -1;
+ 		}
+ 
+ 		for (j = 0; j < adapter->req_tx_entries_per_subcrq; j++)
+ 			tx_pool->free_map[j] = j;
+ 
+ 		tx_pool->consumer_index = 0;
+ 		tx_pool->producer_index = 0;
+ 	}
+ 
+ 	adapter->num_active_tx_pools = tx_subcrqs;
+ 
+ 	return 0;
+ }
+ 
+ static void release_error_buffers(struct ibmvnic_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->vdev->dev;
+ 	struct ibmvnic_error_buff *error_buff, *tmp;
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&adapter->error_list_lock, flags);
+ 	list_for_each_entry_safe(error_buff, tmp, &adapter->errors, list) {
+ 		list_del(&error_buff->list);
+ 		dma_unmap_single(dev, error_buff->dma, error_buff->len,
+ 				 DMA_FROM_DEVICE);
+ 		kfree(error_buff->buff);
+ 		kfree(error_buff);
+ 	}
+ 	spin_unlock_irqrestore(&adapter->error_list_lock, flags);
+ }
+ 
+ static void ibmvnic_napi_enable(struct ibmvnic_adapter *adapter)
++>>>>>>> b0992eca00c4 (ibmvnic: Ensure that buffers are NULL after free)
  {
  	int i;
  
 -	if (adapter->napi_enabled)
 -		return;
 -
 -	for (i = 0; i < adapter->req_rx_queues; i++)
 -		napi_enable(&adapter->napi[i]);
 -
 -	adapter->napi_enabled = true;
 -}
 -
 -static void ibmvnic_napi_disable(struct ibmvnic_adapter *adapter)
 -{
 -	int i;
 +	kfree(pool->free_map);
 +	pool->free_map = NULL;
  
 -	if (!adapter->napi_enabled)
 +	if (!pool->rx_buff)
  		return;
  
 -	for (i = 0; i < adapter->req_rx_queues; i++) {
 -		netdev_dbg(adapter->netdev, "Disabling napi[%d]\n", i);
 -		napi_disable(&adapter->napi[i]);
 -	}
 -
 -	adapter->napi_enabled = false;
 -}
 -
 -static int ibmvnic_login(struct net_device *netdev)
 -{
 -	struct ibmvnic_adapter *adapter = netdev_priv(netdev);
 -	unsigned long timeout = msecs_to_jiffies(30000);
 -	struct device *dev = &adapter->vdev->dev;
 -	int rc;
 -
 -	do {
 -		if (adapter->renegotiate) {
 -			adapter->renegotiate = false;
 -			release_sub_crqs(adapter);
 -
 -			reinit_completion(&adapter->init_done);
 -			send_cap_queries(adapter);
 -			if (!wait_for_completion_timeout(&adapter->init_done,
 -							 timeout)) {
 -				dev_err(dev, "Capabilities query timeout\n");
 -				return -1;
 -			}
 -			rc = init_sub_crqs(adapter);
 -			if (rc) {
 -				dev_err(dev,
 -					"Initialization of SCRQ's failed\n");
 -				return -1;
 -			}
 -			rc = init_sub_crq_irqs(adapter);
 -			if (rc) {
 -				dev_err(dev,
 -					"Initialization of SCRQ's irqs failed\n");
 -				return -1;
 -			}
 -		}
 -
 -		reinit_completion(&adapter->init_done);
 -		send_login(adapter);
 -		if (!wait_for_completion_timeout(&adapter->init_done,
 -						 timeout)) {
 -			dev_err(dev, "Login timeout\n");
 -			return -1;
 -		}
 -	} while (adapter->renegotiate);
 -
 -	/* handle pending MAC address changes after successful login */
 -	if (adapter->mac_change_pending) {
 -		__ibmvnic_set_mac(netdev, &adapter->desired.mac);
 -		adapter->mac_change_pending = false;
 -	}
 -
 -	return 0;
 -}
 -
 -static void release_resources(struct ibmvnic_adapter *adapter)
 -{
 -	int i;
 -
 -	release_vpd_data(adapter);
 -
 -	release_tx_pools(adapter);
 -	release_rx_pools(adapter);
 -
 -	release_stats_token(adapter);
 -	release_stats_buffers(adapter);
 -	release_error_buffers(adapter);
 -
 -	if (adapter->napi) {
 -		for (i = 0; i < adapter->req_rx_queues; i++) {
 -			if (&adapter->napi[i]) {
 -				netdev_dbg(adapter->netdev,
 -					   "Releasing napi[%d]\n", i);
 -				netif_napi_del(&adapter->napi[i]);
 -			}
 +	for (i = 0; i < pool->size; i++) {
 +		if (pool->rx_buff[i].skb) {
 +			dev_kfree_skb_any(pool->rx_buff[i].skb);
 +			pool->rx_buff[i].skb = NULL;
  		}
  	}
++<<<<<<< HEAD
 +	kfree(pool->rx_buff);
 +	pool->rx_buff = NULL;
++=======
+ }
+ 
+ static int set_link_state(struct ibmvnic_adapter *adapter, u8 link_state)
+ {
+ 	struct net_device *netdev = adapter->netdev;
+ 	unsigned long timeout = msecs_to_jiffies(30000);
+ 	union ibmvnic_crq crq;
+ 	bool resend;
+ 	int rc;
+ 
+ 	netdev_dbg(netdev, "setting link state %d\n", link_state);
+ 
+ 	memset(&crq, 0, sizeof(crq));
+ 	crq.logical_link_state.first = IBMVNIC_CRQ_CMD;
+ 	crq.logical_link_state.cmd = LOGICAL_LINK_STATE;
+ 	crq.logical_link_state.link_state = link_state;
+ 
+ 	do {
+ 		resend = false;
+ 
+ 		reinit_completion(&adapter->init_done);
+ 		rc = ibmvnic_send_crq(adapter, &crq);
+ 		if (rc) {
+ 			netdev_err(netdev, "Failed to set link state\n");
+ 			return rc;
+ 		}
+ 
+ 		if (!wait_for_completion_timeout(&adapter->init_done,
+ 						 timeout)) {
+ 			netdev_err(netdev, "timeout setting link state\n");
+ 			return -1;
+ 		}
+ 
+ 		if (adapter->init_done_rc == 1) {
+ 			/* Partuial success, delay and re-send */
+ 			mdelay(1000);
+ 			resend = true;
+ 		}
+ 	} while (resend);
+ 
+ 	return 0;
+ }
+ 
+ static int set_real_num_queues(struct net_device *netdev)
+ {
+ 	struct ibmvnic_adapter *adapter = netdev_priv(netdev);
+ 	int rc;
+ 
+ 	netdev_dbg(netdev, "Setting real tx/rx queues (%llx/%llx)\n",
+ 		   adapter->req_tx_queues, adapter->req_rx_queues);
+ 
+ 	rc = netif_set_real_num_tx_queues(netdev, adapter->req_tx_queues);
+ 	if (rc) {
+ 		netdev_err(netdev, "failed to set the number of tx queues\n");
+ 		return rc;
+ 	}
+ 
+ 	rc = netif_set_real_num_rx_queues(netdev, adapter->req_rx_queues);
+ 	if (rc)
+ 		netdev_err(netdev, "failed to set the number of rx queues\n");
+ 
+ 	return rc;
+ }
+ 
+ static int ibmvnic_get_vpd(struct ibmvnic_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->vdev->dev;
+ 	union ibmvnic_crq crq;
+ 	int len = 0;
+ 
+ 	if (adapter->vpd->buff)
+ 		len = adapter->vpd->len;
+ 
+ 	init_completion(&adapter->fw_done);
+ 	crq.get_vpd_size.first = IBMVNIC_CRQ_CMD;
+ 	crq.get_vpd_size.cmd = GET_VPD_SIZE;
+ 	ibmvnic_send_crq(adapter, &crq);
+ 	wait_for_completion(&adapter->fw_done);
+ 
+ 	if (!adapter->vpd->len)
+ 		return -ENODATA;
+ 
+ 	if (!adapter->vpd->buff)
+ 		adapter->vpd->buff = kzalloc(adapter->vpd->len, GFP_KERNEL);
+ 	else if (adapter->vpd->len != len)
+ 		adapter->vpd->buff =
+ 			krealloc(adapter->vpd->buff,
+ 				 adapter->vpd->len, GFP_KERNEL);
+ 
+ 	if (!adapter->vpd->buff) {
+ 		dev_err(dev, "Could allocate VPD buffer\n");
+ 		return -ENOMEM;
+ 	}
+ 
+ 	adapter->vpd->dma_addr =
+ 		dma_map_single(dev, adapter->vpd->buff, adapter->vpd->len,
+ 			       DMA_FROM_DEVICE);
+ 	if (dma_mapping_error(dev, adapter->vpd->dma_addr)) {
+ 		dev_err(dev, "Could not map VPD buffer\n");
+ 		kfree(adapter->vpd->buff);
+ 		adapter->vpd->buff = NULL;
+ 		return -ENOMEM;
+ 	}
+ 
+ 	reinit_completion(&adapter->fw_done);
+ 	crq.get_vpd.first = IBMVNIC_CRQ_CMD;
+ 	crq.get_vpd.cmd = GET_VPD;
+ 	crq.get_vpd.ioba = cpu_to_be32(adapter->vpd->dma_addr);
+ 	crq.get_vpd.len = cpu_to_be32((u32)adapter->vpd->len);
+ 	ibmvnic_send_crq(adapter, &crq);
+ 	wait_for_completion(&adapter->fw_done);
+ 
+ 	return 0;
+ }
+ 
+ static int init_resources(struct ibmvnic_adapter *adapter)
+ {
+ 	struct net_device *netdev = adapter->netdev;
+ 	int i, rc;
+ 
+ 	rc = set_real_num_queues(netdev);
+ 	if (rc)
+ 		return rc;
+ 
+ 	rc = init_stats_buffers(adapter);
+ 	if (rc)
+ 		return rc;
+ 
+ 	rc = init_stats_token(adapter);
+ 	if (rc)
+ 		return rc;
+ 
+ 	adapter->vpd = kzalloc(sizeof(*adapter->vpd), GFP_KERNEL);
+ 	if (!adapter->vpd)
+ 		return -ENOMEM;
+ 
+ 	/* Vital Product Data (VPD) */
+ 	rc = ibmvnic_get_vpd(adapter);
+ 	if (rc) {
+ 		netdev_err(netdev, "failed to initialize Vital Product Data (VPD)\n");
+ 		return rc;
+ 	}
+ 
+ 	adapter->map_id = 1;
+ 	adapter->napi = kcalloc(adapter->req_rx_queues,
+ 				sizeof(struct napi_struct), GFP_KERNEL);
+ 	if (!adapter->napi)
+ 		return -ENOMEM;
+ 
+ 	for (i = 0; i < adapter->req_rx_queues; i++) {
+ 		netdev_dbg(netdev, "Adding napi[%d]\n", i);
+ 		netif_napi_add(netdev, &adapter->napi[i], ibmvnic_poll,
+ 			       NAPI_POLL_WEIGHT);
+ 	}
+ 
+ 	send_map_query(adapter);
+ 
+ 	rc = init_rx_pools(netdev);
+ 	if (rc)
+ 		return rc;
+ 
+ 	rc = init_tx_pools(netdev);
+ 	return rc;
+ }
+ 
+ static int __ibmvnic_open(struct net_device *netdev)
+ {
+ 	struct ibmvnic_adapter *adapter = netdev_priv(netdev);
+ 	enum vnic_state prev_state = adapter->state;
+ 	int i, rc;
+ 
+ 	adapter->state = VNIC_OPENING;
+ 	replenish_pools(adapter);
+ 	ibmvnic_napi_enable(adapter);
+ 
+ 	/* We're ready to receive frames, enable the sub-crq interrupts and
+ 	 * set the logical link state to up
+ 	 */
+ 	for (i = 0; i < adapter->req_rx_queues; i++) {
+ 		netdev_dbg(netdev, "Enabling rx_scrq[%d] irq\n", i);
+ 		if (prev_state == VNIC_CLOSED)
+ 			enable_irq(adapter->rx_scrq[i]->irq);
+ 		else
+ 			enable_scrq_irq(adapter, adapter->rx_scrq[i]);
+ 	}
+ 
+ 	for (i = 0; i < adapter->req_tx_queues; i++) {
+ 		netdev_dbg(netdev, "Enabling tx_scrq[%d] irq\n", i);
+ 		if (prev_state == VNIC_CLOSED)
+ 			enable_irq(adapter->tx_scrq[i]->irq);
+ 		else
+ 			enable_scrq_irq(adapter, adapter->tx_scrq[i]);
+ 	}
+ 
+ 	rc = set_link_state(adapter, IBMVNIC_LOGICAL_LNK_UP);
+ 	if (rc) {
+ 		for (i = 0; i < adapter->req_rx_queues; i++)
+ 			napi_disable(&adapter->napi[i]);
+ 		release_resources(adapter);
+ 		return rc;
+ 	}
+ 
+ 	netif_tx_start_all_queues(netdev);
+ 
+ 	if (prev_state == VNIC_CLOSED) {
+ 		for (i = 0; i < adapter->req_rx_queues; i++)
+ 			napi_schedule(&adapter->napi[i]);
+ 	}
+ 
+ 	adapter->state = VNIC_OPEN;
+ 	return rc;
++>>>>>>> b0992eca00c4 (ibmvnic: Ensure that buffers are NULL after free)
  }
  
  static int ibmvnic_open(struct net_device *netdev)
* Unmerged path drivers/net/ethernet/ibm/ibmvnic.c
