x86/mm/pat: Ensure cpa->pfn only contains page frame numbers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] mm/pat: Ensure cpa->pfn only contains page frame numbers (Bhupesh Sharma) [1102454]
Rebuild_FUZZ: 96.55%
commit-author Matt Fleming <matt@codeblueprint.co.uk>
commit edc3b9129cecd0f0857112136f5b8b1bc1d45918
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/edc3b912.failed

The x86 pageattr code is confused about the data that is stored
in cpa->pfn, sometimes it's treated as a page frame number,
sometimes it's treated as an unshifted physical address, and in
one place it's treated as a pte.

The result of this is that the mapping functions do not map the
intended physical address.

This isn't a problem in practice because most of the addresses
we're mapping in the EFI code paths are already mapped in
'trampoline_pgd' and so the pageattr mapping functions don't
actually do anything in this case. But when we move to using a
separate page table for the EFI runtime this will be an issue.

	Signed-off-by: Matt Fleming <matt@codeblueprint.co.uk>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Acked-by: Borislav Petkov <bp@suse.de>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Toshi Kani <toshi.kani@hp.com>
	Cc: linux-efi@vger.kernel.org
Link: http://lkml.kernel.org/r/1448658575-17029-3-git-send-email-matt@codeblueprint.co.uk
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit edc3b9129cecd0f0857112136f5b8b1bc1d45918)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/pageattr.c
#	arch/x86/platform/efi/efi_64.c
diff --cc arch/x86/mm/pageattr.c
index 38dcf6b935d9,c70e42014101..000000000000
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@@ -923,10 -964,11 +918,15 @@@ static int populate_pmd(struct cpa_dat
  
  		pmd = pmd_offset(pud, start);
  
++<<<<<<< HEAD
 +		set_pmd(pmd, __pmd(cpa->pfn | _PAGE_PSE | massage_pgprot(pgprot)));
++=======
+ 		set_pmd(pmd, __pmd(cpa->pfn << PAGE_SHIFT | _PAGE_PSE |
+ 				   massage_pgprot(pmd_pgprot)));
++>>>>>>> edc3b9129cec (x86/mm/pat: Ensure cpa->pfn only contains page frame numbers)
  
  		start	  += PMD_SIZE;
- 		cpa->pfn  += PMD_SIZE;
+ 		cpa->pfn  += PMD_SIZE >> PAGE_SHIFT;
  		cur_pages += PMD_SIZE >> PAGE_SHIFT;
  	}
  
@@@ -993,10 -1037,11 +993,15 @@@ static int populate_pud(struct cpa_dat
  	 * Map everything starting from the Gb boundary, possibly with 1G pages
  	 */
  	while (end - start >= PUD_SIZE) {
++<<<<<<< HEAD
 +		set_pud(pud, __pud(cpa->pfn | _PAGE_PSE | massage_pgprot(pgprot)));
++=======
+ 		set_pud(pud, __pud(cpa->pfn << PAGE_SHIFT | _PAGE_PSE |
+ 				   massage_pgprot(pud_pgprot)));
++>>>>>>> edc3b9129cec (x86/mm/pat: Ensure cpa->pfn only contains page frame numbers)
  
  		start	  += PUD_SIZE;
- 		cpa->pfn  += PUD_SIZE;
+ 		cpa->pfn  += PUD_SIZE >> PAGE_SHIFT;
  		cur_pages += PUD_SIZE >> PAGE_SHIFT;
  		pud++;
  	}
diff --cc arch/x86/platform/efi/efi_64.c
index 967c09f5fd5d,5aa186db59e3..000000000000
--- a/arch/x86/platform/efi/efi_64.c
+++ b/arch/x86/platform/efi/efi_64.c
@@@ -175,9 -143,9 +175,14 @@@ void efi_sync_low_kernel_mappings(void
  
  int __init efi_setup_page_tables(unsigned long pa_memmap, unsigned num_pages)
  {
++<<<<<<< HEAD
 +	unsigned long text;
++=======
+ 	unsigned long pfn, text;
+ 	struct page *page;
++>>>>>>> edc3b9129cec (x86/mm/pat: Ensure cpa->pfn only contains page frame numbers)
  	unsigned npages;
 +	struct page *page;
  	pgd_t *pgd;
  
  	if (efi_enabled(EFI_OLD_MEMMAP))
@@@ -217,9 -186,9 +223,14 @@@
  
  	npages = (_end - _text) >> PAGE_SHIFT;
  	text = __pa(_text);
+ 	pfn = text >> PAGE_SHIFT;
  
++<<<<<<< HEAD
 +	if (kernel_map_pages_in_pgd(__va(efi_scratch.efi_pgt),
 +				    text >> PAGE_SHIFT, text, npages, 0)) {
++=======
+ 	if (kernel_map_pages_in_pgd(pgd, pfn, text, npages, 0)) {
++>>>>>>> edc3b9129cec (x86/mm/pat: Ensure cpa->pfn only contains page frame numbers)
  		pr_err("Failed to map kernel text 1:1\n");
  		return 1;
  	}
* Unmerged path arch/x86/mm/pageattr.c
* Unmerged path arch/x86/platform/efi/efi_64.c
