brd: fix uninitialized use of brd->dax_dev

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Gerald Schaefer <gerald.schaefer@de.ibm.com>
commit 1ef97fe4f8abd3317d5c3c860f990e02c2633959
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1ef97fe4.failed

commit 1647b9b9 "brd: add dax_operations support" introduced the allocation
and freeing of a dax_device, but the allocated dax_device is not stored
into the brd_device, so brd_del_one() will eventually operate on an
uninitialized brd->dax_dev.

Fix this by storing the allocated dax_device to brd->dax_dev.

	Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 1ef97fe4f8abd3317d5c3c860f990e02c2633959)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/brd.c
diff --cc drivers/block/brd.c
index 779aabf7a791,ec00c01b8dc3..000000000000
--- a/drivers/block/brd.c
+++ b/drivers/block/brd.c
@@@ -506,8 -493,21 +506,26 @@@ static struct brd_device *brd_alloc(in
  	sprintf(disk->disk_name, "ram%d", i);
  	set_capacity(disk, rd_size * 2);
  
++<<<<<<< HEAD
 +	return brd;
 +
++=======
+ #ifdef CONFIG_BLK_DEV_RAM_DAX
+ 	queue_flag_set_unlocked(QUEUE_FLAG_DAX, brd->brd_queue);
+ 	brd->dax_dev = alloc_dax(brd, disk->disk_name, &brd_dax_ops);
+ 	if (!brd->dax_dev)
+ 		goto out_free_inode;
+ #endif
+ 
+ 
+ 	return brd;
+ 
+ #ifdef CONFIG_BLK_DEV_RAM_DAX
+ out_free_inode:
+ 	kill_dax(brd->dax_dev);
+ 	put_dax(brd->dax_dev);
+ #endif
++>>>>>>> 1ef97fe4f8ab (brd: fix uninitialized use of brd->dax_dev)
  out_free_queue:
  	blk_cleanup_queue(brd->brd_queue);
  out_free_dev:
* Unmerged path drivers/block/brd.c
