IB/mlx5: Fix blue flame buffer size calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eli Cohen <eli@mellanox.com>
commit d8030b0de03ec6bdf3665e1d915fa0f02e5ec89d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d8030b0d.failed

A blue flame register is comprised of two buffers of equal size.

Fixes: 5fe9dec0d0454 ("IB/mlx5: Use blue flame register allocator in mlx5_ib")
	Signed-off-by: Eli Cohen <eli@mellanox.com>
	Reviewed-by: Noa Osherovich <noaos@mellanox.com>
	Reviewed-by: Matan Barak <matanb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit d8030b0de03ec6bdf3665e1d915fa0f02e5ec89d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/qp.c
diff --cc drivers/infiniband/hw/mlx5/qp.c
index 49c23de28351,69a1604a887c..000000000000
--- a/drivers/infiniband/hw/mlx5/qp.c
+++ b/drivers/infiniband/hw/mlx5/qp.c
@@@ -920,16 -901,15 +920,24 @@@ static int create_kernel_qp(struct mlx5
  		return -EINVAL;
  
  	if (init_attr->qp_type == MLX5_IB_QPT_REG_UMR)
 -		qp->bf.bfreg = &dev->fp_bfreg;
 -	else
 -		qp->bf.bfreg = &dev->bfreg;
 +		lc = MLX5_IB_LATENCY_CLASS_FAST_PATH;
  
++<<<<<<< HEAD
 +	uuarn = alloc_uuar(uuari, lc);
 +	if (uuarn < 0) {
 +		mlx5_ib_dbg(dev, "\n");
 +		return -ENOMEM;
 +	}
 +
 +	qp->bf = &uuari->bfs[uuarn];
 +	uar_index = qp->bf->uar->index;
++=======
+ 	/* We need to divide by two since each register is comprised of
+ 	 * two buffers of identical size, namely odd and even
+ 	 */
+ 	qp->bf.buf_size = (1 << MLX5_CAP_GEN(dev->mdev, log_bf_reg_size)) / 2;
+ 	uar_index = qp->bf.bfreg->index;
++>>>>>>> d8030b0de03e (IB/mlx5: Fix blue flame buffer size calculation)
  
  	err = calc_sq_size(dev, init_attr, qp);
  	if (err < 0) {
* Unmerged path drivers/infiniband/hw/mlx5/qp.c
