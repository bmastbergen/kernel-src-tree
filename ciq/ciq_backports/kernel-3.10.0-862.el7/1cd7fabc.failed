scsi: cxlflash: Support up to 4 ports

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] cxlflash: Support up to 4 ports (Gustavo Duarte) [1456494]
Rebuild_FUZZ: 91.18%
commit-author Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
commit 1cd7fabc82eb06c834956113ff287f8848811fb8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1cd7fabc.failed

Update the driver to allow for future cards with 4 ports.

	Signed-off-by: Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
	Signed-off-by: Uma Krishnan <ukrishn@linux.vnet.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 1cd7fabc82eb06c834956113ff287f8848811fb8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/cxlflash/main.c
#	drivers/scsi/cxlflash/sislite.h
diff --cc drivers/scsi/cxlflash/main.c
index c68badcfa77f,568cd636607a..000000000000
--- a/drivers/scsi/cxlflash/main.c
+++ b/drivers/scsi/cxlflash/main.c
@@@ -1365,13 -1419,13 +1365,17 @@@ static int read_vpd(struct cxlflash_cf
  	ssize_t vpd_size;
  	char vpd_data[CXLFLASH_VPD_LEN];
  	char tmp_buf[WWPN_BUF_LEN] = { 0 };
++<<<<<<< HEAD
 +	char *wwpn_vpd_tags[NUM_FC_PORTS] = { "V5", "V6" };
++=======
+ 	char *wwpn_vpd_tags[MAX_FC_PORTS] = { "V5", "V6", "V7", "V8" };
++>>>>>>> 1cd7fabc82eb (scsi: cxlflash: Support up to 4 ports)
  
  	/* Get the VPD data from the device */
 -	vpd_size = cxl_read_adapter_vpd(pdev, vpd_data, sizeof(vpd_data));
 +	vpd_size = cxl_read_adapter_vpd(dev, vpd_data, sizeof(vpd_data));
  	if (unlikely(vpd_size <= 0)) {
 -		dev_err(dev, "%s: Unable to read VPD (size = %ld)\n",
 -			__func__, vpd_size);
 +		dev_err(&dev->dev, "%s: Unable to read VPD (size = %ld)\n",
 +		       __func__, vpd_size);
  		rc = -ENODEV;
  		goto out;
  	}
@@@ -2081,13 -2169,45 +2085,47 @@@ static ssize_t port1_show(struct devic
  			  struct device_attribute *attr,
  			  char *buf)
  {
 -	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
 +	struct Scsi_Host *shost = class_to_shost(dev);
 +	struct cxlflash_cfg *cfg = (struct cxlflash_cfg *)shost->hostdata;
 +	struct afu *afu = cfg->afu;
  
 -	return cxlflash_show_port_status(1, cfg, buf);
 +	return cxlflash_show_port_status(1, afu, buf);
  }
  
+ /**
+  * port2_show() - queries and presents the current status of port 2
+  * @dev:	Generic device associated with the host owning the port.
+  * @attr:	Device attribute representing the port.
+  * @buf:	Buffer of length PAGE_SIZE to report back port status in ASCII.
+  *
+  * Return: The size of the ASCII string returned in @buf.
+  */
+ static ssize_t port2_show(struct device *dev,
+ 			  struct device_attribute *attr,
+ 			  char *buf)
+ {
+ 	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
+ 
+ 	return cxlflash_show_port_status(2, cfg, buf);
+ }
+ 
+ /**
+  * port3_show() - queries and presents the current status of port 3
+  * @dev:	Generic device associated with the host owning the port.
+  * @attr:	Device attribute representing the port.
+  * @buf:	Buffer of length PAGE_SIZE to report back port status in ASCII.
+  *
+  * Return: The size of the ASCII string returned in @buf.
+  */
+ static ssize_t port3_show(struct device *dev,
+ 			  struct device_attribute *attr,
+ 			  char *buf)
+ {
+ 	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
+ 
+ 	return cxlflash_show_port_status(3, cfg, buf);
+ }
+ 
  /**
   * lun_mode_show() - presents the current LUN mode of the host
   * @dev:	Generic device associated with the host.
@@@ -2230,11 -2355,112 +2268,68 @@@ static ssize_t port1_lun_table_show(str
  				    struct device_attribute *attr,
  				    char *buf)
  {
++<<<<<<< HEAD
 +	struct Scsi_Host *shost = class_to_shost(dev);
 +	struct cxlflash_cfg *cfg = (struct cxlflash_cfg *)shost->hostdata;
++=======
+ 	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
+ 
+ 	return cxlflash_show_port_lun_table(1, cfg, buf);
+ }
+ 
+ /**
+  * port2_lun_table_show() - presents the current LUN table of port 2
+  * @dev:	Generic device associated with the host owning the port.
+  * @attr:	Device attribute representing the port.
+  * @buf:	Buffer of length PAGE_SIZE to report back port status in ASCII.
+  *
+  * Return: The size of the ASCII string returned in @buf.
+  */
+ static ssize_t port2_lun_table_show(struct device *dev,
+ 				    struct device_attribute *attr,
+ 				    char *buf)
+ {
+ 	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
+ 
+ 	return cxlflash_show_port_lun_table(2, cfg, buf);
+ }
+ 
+ /**
+  * port3_lun_table_show() - presents the current LUN table of port 3
+  * @dev:	Generic device associated with the host owning the port.
+  * @attr:	Device attribute representing the port.
+  * @buf:	Buffer of length PAGE_SIZE to report back port status in ASCII.
+  *
+  * Return: The size of the ASCII string returned in @buf.
+  */
+ static ssize_t port3_lun_table_show(struct device *dev,
+ 				    struct device_attribute *attr,
+ 				    char *buf)
+ {
+ 	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
+ 
+ 	return cxlflash_show_port_lun_table(3, cfg, buf);
+ }
+ 
+ /**
+  * irqpoll_weight_show() - presents the current IRQ poll weight for the host
+  * @dev:	Generic device associated with the host.
+  * @attr:	Device attribute representing the IRQ poll weight.
+  * @buf:	Buffer of length PAGE_SIZE to report back the current IRQ poll
+  *		weight in ASCII.
+  *
+  * An IRQ poll weight of 0 indicates polling is disabled.
+  *
+  * Return: The size of the ASCII string returned in @buf.
+  */
+ static ssize_t irqpoll_weight_show(struct device *dev,
+ 				   struct device_attribute *attr, char *buf)
+ {
+ 	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
++>>>>>>> 1cd7fabc82eb (scsi: cxlflash: Support up to 4 ports)
  	struct afu *afu = cfg->afu;
  
 -	return scnprintf(buf, PAGE_SIZE, "%u\n", afu->irqpoll_weight);
 -}
 -
 -/**
 - * irqpoll_weight_store() - sets the current IRQ poll weight for the host
 - * @dev:	Generic device associated with the host.
 - * @attr:	Device attribute representing the IRQ poll weight.
 - * @buf:	Buffer of length PAGE_SIZE containing the desired IRQ poll
 - *		weight in ASCII.
 - * @count:	Length of data resizing in @buf.
 - *
 - * An IRQ poll weight of 0 indicates polling is disabled.
 - *
 - * Return: The size of the ASCII string returned in @buf.
 - */
 -static ssize_t irqpoll_weight_store(struct device *dev,
 -				    struct device_attribute *attr,
 -				    const char *buf, size_t count)
 -{
 -	struct cxlflash_cfg *cfg = shost_priv(class_to_shost(dev));
 -	struct device *cfgdev = &cfg->dev->dev;
 -	struct afu *afu = cfg->afu;
 -	u32 weight;
 -	int rc;
 -
 -	rc = kstrtouint(buf, 10, &weight);
 -	if (rc)
 -		return -EINVAL;
 -
 -	if (weight > 256) {
 -		dev_info(cfgdev,
 -			 "Invalid IRQ poll weight. It must be 256 or less.\n");
 -		return -EINVAL;
 -	}
 -
 -	if (weight == afu->irqpoll_weight) {
 -		dev_info(cfgdev,
 -			 "Current IRQ poll weight has the same weight.\n");
 -		return -EINVAL;
 -	}
 -
 -	if (afu_is_irqpoll_enabled(afu))
 -		irq_poll_disable(&afu->irqpoll);
 -
 -	afu->irqpoll_weight = weight;
 -
 -	if (weight > 0)
 -		irq_poll_init(&afu->irqpoll, weight, cxlflash_irqpoll);
 -
 -	return count;
 +	return cxlflash_show_port_lun_table(1, afu, buf);
  }
  
  /**
@@@ -2263,6 -2491,9 +2360,12 @@@ static DEVICE_ATTR_RW(lun_mode)
  static DEVICE_ATTR_RO(ioctl_version);
  static DEVICE_ATTR_RO(port0_lun_table);
  static DEVICE_ATTR_RO(port1_lun_table);
++<<<<<<< HEAD
++=======
+ static DEVICE_ATTR_RO(port2_lun_table);
+ static DEVICE_ATTR_RO(port3_lun_table);
+ static DEVICE_ATTR_RW(irqpoll_weight);
++>>>>>>> 1cd7fabc82eb (scsi: cxlflash: Support up to 4 ports)
  
  static struct device_attribute *cxlflash_host_attrs[] = {
  	&dev_attr_port0,
@@@ -2271,6 -2504,9 +2376,12 @@@
  	&dev_attr_ioctl_version,
  	&dev_attr_port0_lun_table,
  	&dev_attr_port1_lun_table,
++<<<<<<< HEAD
++=======
+ 	&dev_attr_port2_lun_table,
+ 	&dev_attr_port3_lun_table,
+ 	&dev_attr_irqpoll_weight,
++>>>>>>> 1cd7fabc82eb (scsi: cxlflash: Support up to 4 ports)
  	NULL
  };
  
diff --cc drivers/scsi/cxlflash/sislite.h
index 347fc1671975,0e52bbb6aeeb..000000000000
mode 100755,100644..100755
--- a/drivers/scsi/cxlflash/sislite.h
+++ b/drivers/scsi/cxlflash/sislite.h
@@@ -348,11 -382,29 +348,26 @@@ struct sisl_global_regs 
  	__be64 rsvd[0xf8];
  	__le64 afu_version;
  	__be64 interface_version;
 -#define SISL_INTVER_CAP_SHIFT			16
 -#define SISL_INTVER_MAJ_SHIFT			8
 -#define SISL_INTVER_CAP_MASK			0xFFFFFFFF00000000ULL
 -#define SISL_INTVER_MAJ_MASK			0x00000000FFFF0000ULL
 -#define SISL_INTVER_MIN_MASK			0x000000000000FFFFULL
 -#define SISL_INTVER_CAP_IOARRIN_CMD_MODE	0x800000000000ULL
 -#define SISL_INTVER_CAP_SQ_CMD_MODE		0x400000000000ULL
 -#define SISL_INTVER_CAP_RESERVED_CMD_MODE_A	0x200000000000ULL
 -#define SISL_INTVER_CAP_RESERVED_CMD_MODE_B	0x100000000000ULL
  };
  
++<<<<<<< HEAD
 +#define CXLFLASH_NUM_FC_PORTS   2
 +#define CXLFLASH_MAX_CONTEXT  512	/* how many contexts per afu */
 +#define CXLFLASH_NUM_VLUNS    512
++=======
+ #define CXLFLASH_NUM_FC_PORTS_PER_BANK	2	/* fixed # of ports per bank */
+ #define CXLFLASH_MAX_FC_BANKS		2	/* max # of banks supported */
+ #define CXLFLASH_MAX_FC_PORTS	(CXLFLASH_NUM_FC_PORTS_PER_BANK *	\
+ 				 CXLFLASH_MAX_FC_BANKS)
+ #define CXLFLASH_MAX_CONTEXT	512	/* number of contexts per AFU */
+ #define CXLFLASH_NUM_VLUNS	512	/* number of vluns per AFU/port */
+ #define CXLFLASH_NUM_REGS	512	/* number of registers per port */
+ 
+ struct fc_port_bank {
+ 	__be64 fc_port_regs[CXLFLASH_NUM_FC_PORTS_PER_BANK][CXLFLASH_NUM_REGS];
+ 	__be64 fc_port_luns[CXLFLASH_NUM_FC_PORTS_PER_BANK][CXLFLASH_NUM_VLUNS];
+ };
++>>>>>>> 1cd7fabc82eb (scsi: cxlflash: Support up to 4 ports)
  
  struct sisl_global_map {
  	union {
@@@ -362,11 -414,9 +377,17 @@@
  
  	char page1[SIZE_4K];	/* page 1 */
  
++<<<<<<< HEAD
 +	/* pages 2 & 3 */
 +	__be64 fc_regs[CXLFLASH_NUM_FC_PORTS][CXLFLASH_NUM_VLUNS];
 +
 +	/* pages 4 & 5 (lun tbl) */
 +	__be64 fc_port[CXLFLASH_NUM_FC_PORTS][CXLFLASH_NUM_VLUNS];
++=======
+ 	struct fc_port_bank bank[CXLFLASH_MAX_FC_BANKS]; /* pages 2 - 9 */
+ 
+ 	/* pages 10 - 15 are reserved */
++>>>>>>> 1cd7fabc82eb (scsi: cxlflash: Support up to 4 ports)
  
  };
  
* Unmerged path drivers/scsi/cxlflash/main.c
* Unmerged path drivers/scsi/cxlflash/sislite.h
