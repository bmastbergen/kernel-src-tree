x86/mm/pkeys: Add Kconfig option

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] mm/pkeys: Add Kconfig option (Rui Wang) [1272615]
Rebuild_FUZZ: 93.33%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit 35e97790f5f1e5cf2b5522c55e3e31d5c81bd226
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/35e97790.failed

I don't have a strong opinion on whether we need a Kconfig prompt
or not.  Protection Keys has relatively little code associated
with it, and it is not a heavyweight feature to keep enabled.
However, I can imagine that folks would still appreciate being
able to disable it.

Note that, with disabled-features.h, the checks in the code
for protection keys are always the same:

	cpu_has(c, X86_FEATURE_PKU)

With the config option disabled, this essentially turns into an

We will hide the prompt for now.

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20160212210200.DB7055E8@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 35e97790f5f1e5cf2b5522c55e3e31d5c81bd226)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
diff --cc arch/x86/Kconfig
index c83b7a921031,3632cdd03201..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -1629,6 -1688,36 +1629,39 @@@ config X86_SMA
  
  	  If unsure, say Y.
  
++<<<<<<< HEAD
++=======
+ config X86_INTEL_MPX
+ 	prompt "Intel MPX (Memory Protection Extensions)"
+ 	def_bool n
+ 	depends on CPU_SUP_INTEL
+ 	---help---
+ 	  MPX provides hardware features that can be used in
+ 	  conjunction with compiler-instrumented code to check
+ 	  memory references.  It is designed to detect buffer
+ 	  overflow or underflow bugs.
+ 
+ 	  This option enables running applications which are
+ 	  instrumented or otherwise use MPX.  It does not use MPX
+ 	  itself inside the kernel or to protect the kernel
+ 	  against bad memory references.
+ 
+ 	  Enabling this option will make the kernel larger:
+ 	  ~8k of kernel text and 36 bytes of data on a 64-bit
+ 	  defconfig.  It adds a long to the 'mm_struct' which
+ 	  will increase the kernel memory overhead of each
+ 	  process and adds some branches to paths used during
+ 	  exec() and munmap().
+ 
+ 	  For details, see Documentation/x86/intel_mpx.txt
+ 
+ 	  If unsure, say N.
+ 
+ config X86_INTEL_MEMORY_PROTECTION_KEYS
+ 	def_bool y
+ 	depends on CPU_SUP_INTEL && X86_64
+ 
++>>>>>>> 35e97790f5f1 (x86/mm/pkeys: Add Kconfig option)
  config EFI
  	bool "EFI runtime service support"
  	depends on ACPI
* Unmerged path arch/x86/Kconfig
