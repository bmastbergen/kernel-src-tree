pinctrl: intel: set default handler to be handle_bad_irq()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [pinctrl] intel: set default handler to be handle_bad_irq() (David Arcari) [1467490]
Rebuild_FUZZ: 91.59%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 3ae02c14d964499da76b5ef4d8912710902e64f8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3ae02c14.failed

We switch the default handler to be handle_bad_irq() instead of
handle_simple_irq() (which was not correct anyway).

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit 3ae02c14d964499da76b5ef4d8912710902e64f8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pinctrl/intel/pinctrl-baytrail.c
diff --cc drivers/pinctrl/intel/pinctrl-baytrail.c
index cc8bd170240e,37300634b7d2..000000000000
--- a/drivers/pinctrl/intel/pinctrl-baytrail.c
+++ b/drivers/pinctrl/intel/pinctrl-baytrail.c
@@@ -576,15 -1666,86 +576,92 @@@ static void byt_gpio_irq_init_hw(struc
  	}
  }
  
 -static int byt_gpio_probe(struct byt_gpio *vg)
 +static int byt_gpio_irq_map(struct irq_domain *d, unsigned int virq,
 +			    irq_hw_number_t hw)
  {
 -	struct gpio_chip *gc;
 -	struct resource *irq_rc;
 -	int ret;
 +	struct byt_gpio *vg = d->host_data;
  
++<<<<<<< HEAD
 +	irq_set_chip_and_handler_name(virq, &byt_irqchip, handle_simple_irq,
 +				      "demux");
 +	irq_set_chip_data(virq, vg);
 +	irq_set_irq_type(virq, IRQ_TYPE_NONE);
++=======
+ 	/* Set up gpio chip */
+ 	vg->chip	= byt_gpio_chip;
+ 	gc		= &vg->chip;
+ 	gc->label	= dev_name(&vg->pdev->dev);
+ 	gc->base	= -1;
+ 	gc->can_sleep	= false;
+ 	gc->parent	= &vg->pdev->dev;
+ 	gc->ngpio	= vg->soc_data->npins;
+ 
+ #ifdef CONFIG_PM_SLEEP
+ 	vg->saved_context = devm_kcalloc(&vg->pdev->dev, gc->ngpio,
+ 				       sizeof(*vg->saved_context), GFP_KERNEL);
+ #endif
+ 	ret = gpiochip_add_data(gc, vg);
+ 	if (ret) {
+ 		dev_err(&vg->pdev->dev, "failed adding byt-gpio chip\n");
+ 		return ret;
+ 	}
+ 
+ 	ret = gpiochip_add_pin_range(&vg->chip, dev_name(&vg->pdev->dev),
+ 				     0, 0, vg->soc_data->npins);
+ 	if (ret) {
+ 		dev_err(&vg->pdev->dev, "failed to add GPIO pin range\n");
+ 		goto fail;
+ 	}
+ 
+ 	/* set up interrupts  */
+ 	irq_rc = platform_get_resource(vg->pdev, IORESOURCE_IRQ, 0);
+ 	if (irq_rc && irq_rc->start) {
+ 		byt_gpio_irq_init_hw(vg);
+ 		ret = gpiochip_irqchip_add(gc, &byt_irqchip, 0,
+ 					   handle_bad_irq, IRQ_TYPE_NONE);
+ 		if (ret) {
+ 			dev_err(&vg->pdev->dev, "failed to add irqchip\n");
+ 			goto fail;
+ 		}
+ 
+ 		gpiochip_set_chained_irqchip(gc, &byt_irqchip,
+ 					     (unsigned)irq_rc->start,
+ 					     byt_gpio_irq_handler);
+ 	}
+ 
+ 	return ret;
+ 
+ fail:
+ 	gpiochip_remove(&vg->chip);
+ 
+ 	return ret;
+ }
+ 
+ static int byt_set_soc_data(struct byt_gpio *vg,
+ 			    const struct byt_pinctrl_soc_data *soc_data)
+ {
+ 	int i;
+ 
+ 	vg->soc_data = soc_data;
+ 	vg->communities_copy = devm_kcalloc(&vg->pdev->dev,
+ 					    soc_data->ncommunities,
+ 					    sizeof(*vg->communities_copy),
+ 					    GFP_KERNEL);
+ 	if (!vg->communities_copy)
+ 		return -ENOMEM;
+ 
+ 	for (i = 0; i < soc_data->ncommunities; i++) {
+ 		struct byt_community *comm = vg->communities_copy + i;
+ 		struct resource *mem_rc;
+ 
+ 		*comm = vg->soc_data->communities[i];
+ 
+ 		mem_rc = platform_get_resource(vg->pdev, IORESOURCE_MEM, 0);
+ 		comm->reg_base = devm_ioremap_resource(&vg->pdev->dev, mem_rc);
+ 		if (IS_ERR(comm->reg_base))
+ 			return PTR_ERR(comm->reg_base);
+ 	}
++>>>>>>> 3ae02c14d964 (pinctrl: intel: set default handler to be handle_bad_irq())
  
  	return 0;
  }
* Unmerged path drivers/pinctrl/intel/pinctrl-baytrail.c
diff --git a/drivers/pinctrl/intel/pinctrl-intel.c b/drivers/pinctrl/intel/pinctrl-intel.c
index 329059b139fa..48e4a3d3aea7 100644
--- a/drivers/pinctrl/intel/pinctrl-intel.c
+++ b/drivers/pinctrl/intel/pinctrl-intel.c
@@ -953,7 +953,7 @@ static int intel_gpio_probe(struct intel_pinctrl *pctrl, int irq)
 	}
 
 	ret = gpiochip_irqchip_add(&pctrl->chip, &intel_gpio_irqchip, 0,
-				   handle_simple_irq, IRQ_TYPE_NONE);
+				   handle_bad_irq, IRQ_TYPE_NONE);
 	if (ret) {
 		dev_err(pctrl->dev, "failed to add irqchip\n");
 		gpiochip_remove(&pctrl->chip);
