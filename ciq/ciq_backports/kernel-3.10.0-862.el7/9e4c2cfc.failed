nfp: provide ethtool_drvinfo on representors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 9e4c2cfc67816276a80da5888a1d9430b60c2183
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9e4c2cfc.failed

Extend representors' ethtool ops to show basic info like firmware
version, driver version, and driver name.

While at it don't set drvinfo.n_stats and drvinfo.regdump_len,
core will invoke appropriate handlers to get those.

A helper is added to turn a netdev into nfp_app for convenience.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9e4c2cfc67816276a80da5888a1d9430b60c2183)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_app.c
#	drivers/net/ethernet/netronome/nfp/nfp_app.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
index 69f458e0de89,3c34c8b27dcf..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
@@@ -139,21 -154,30 +139,38 @@@ static void nfp_net_get_nspinfo(struct 
  	nfp_nsp_close(nsp);
  }
  
- static void nfp_net_get_drvinfo(struct net_device *netdev,
- 				struct ethtool_drvinfo *drvinfo)
+ static void
+ nfp_get_drvinfo(struct nfp_app *app, struct pci_dev *pdev,
+ 		const char *vnic_version, struct ethtool_drvinfo *drvinfo)
  {
  	char nsp_version[ETHTOOL_FWVERS_LEN] = {};
- 	struct nfp_net *nn = netdev_priv(netdev);
  
- 	strlcpy(drvinfo->driver, nn->pdev->driver->name,
- 		sizeof(drvinfo->driver));
+ 	strlcpy(drvinfo->driver, pdev->driver->name, sizeof(drvinfo->driver));
  	strlcpy(drvinfo->version, nfp_driver_version, sizeof(drvinfo->version));
  
++<<<<<<< HEAD
 +	nfp_net_get_nspinfo(nn, nsp_version);
 +	snprintf(drvinfo->fw_version, sizeof(drvinfo->fw_version),
 +		 "%d.%d.%d.%d %s",
 +		 nn->fw_ver.resv, nn->fw_ver.class,
 +		 nn->fw_ver.major, nn->fw_ver.minor, nsp_version);
++=======
+ 	nfp_net_get_nspinfo(app, nsp_version);
+ 	snprintf(drvinfo->fw_version, sizeof(drvinfo->fw_version),
+ 		 "%s %s %s %s", vnic_version, nsp_version,
+ 		 nfp_app_mip_name(app), nfp_app_name(app));
+ }
+ 
+ static void
+ nfp_net_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
+ {
+ 	char vnic_version[ETHTOOL_FWVERS_LEN] = {};
+ 	struct nfp_net *nn = netdev_priv(netdev);
+ 
+ 	snprintf(vnic_version, sizeof(vnic_version), "%d.%d.%d.%d",
+ 		 nn->fw_ver.resv, nn->fw_ver.class,
+ 		 nn->fw_ver.major, nn->fw_ver.minor);
++>>>>>>> 9e4c2cfc6781 (nfp: provide ethtool_drvinfo on representors)
  	strlcpy(drvinfo->bus_info, pci_name(nn->pdev),
  		sizeof(drvinfo->bus_info));
  
@@@ -907,6 -958,11 +935,14 @@@ static const struct ethtool_ops nfp_net
  	.set_link_ksettings	= nfp_net_set_link_ksettings,
  };
  
++<<<<<<< HEAD
++=======
+ const struct ethtool_ops nfp_port_ethtool_ops = {
+ 	.get_drvinfo		= nfp_app_get_drvinfo,
+ 	.get_link		= ethtool_op_get_link,
+ };
+ 
++>>>>>>> 9e4c2cfc6781 (nfp: provide ethtool_drvinfo on representors)
  void nfp_net_set_ethtool_ops(struct net_device *netdev)
  {
  	netdev->ethtool_ops = &nfp_net_ethtool_ops;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
