scsi: qla2xxx: Remove extra register read

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Remove extra register read (Himanshu Madhani) [1460030]
Rebuild_FUZZ: 92.11%
commit-author Quinn Tran <quinn.tran@cavium.com>
commit d63b328f0904a1e04368de5cf1d27c0f2d0bc554
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d63b328f.failed

Remove extra register read in each interrupt processing to improve
performance.

	Signed-off-by: Quinn Tran <quinn.tran@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit d63b328f0904a1e04368de5cf1d27c0f2d0bc554)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_target.c
diff --cc drivers/scsi/qla2xxx/qla_target.c
index 4244f37d5d93,88eea4d34487..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.c
+++ b/drivers/scsi/qla2xxx/qla_target.c
@@@ -1508,16 -2262,11 +1508,22 @@@ static int qlt_check_reserve_free_req(s
  		else
  			vha->req->cnt = vha->req->length -
  			    (vha->req->ring_index - cnt);
++<<<<<<< HEAD
++=======
+ 
+ 		if (unlikely(vha->req->cnt < (req_cnt + 2)))
+ 			return -EAGAIN;
++>>>>>>> d63b328f0904 (scsi: qla2xxx: Remove extra register read)
  	}
  
 +	if (unlikely(vha->req->cnt < (req_cnt + 2))) {
 +		ql_dbg(ql_dbg_tgt, vha, 0xe00b,
 +		    "qla_target(%d): There is no room in the "
 +		    "request ring: vha->req->ring_index=%d, vha->req->cnt=%d, "
 +		    "req_cnt=%d\n", vha->vp_idx, vha->req->ring_index,
 +		    vha->req->cnt, req_cnt);
 +		return -EAGAIN;
 +	}
  	vha->req->cnt -= req_cnt;
  
  	return 0;
diff --git a/drivers/scsi/qla2xxx/qla_iocb.c b/drivers/scsi/qla2xxx/qla_iocb.c
index ff2ecaf39d3d..aaaf10111c2a 100644
--- a/drivers/scsi/qla2xxx/qla_iocb.c
+++ b/drivers/scsi/qla2xxx/qla_iocb.c
@@ -464,7 +464,9 @@ qla2x00_start_iocbs(struct scsi_qla_host *vha, struct req_que *req)
 			req->ring_ptr++;
 
 		/* Set chip new ring index. */
-		if (ha->mqenable || IS_QLA83XX(ha) || IS_QLA27XX(ha)) {
+		if (ha->mqenable || IS_QLA27XX(ha)) {
+			WRT_REG_DWORD(req->req_q_in, req->ring_index);
+		} else if (IS_QLA83XX(ha)) {
 			WRT_REG_DWORD(req->req_q_in, req->ring_index);
 			RD_REG_DWORD_RELAXED(&ha->iobase->isp24.hccr);
 		} else if (IS_QLAFX00(ha)) {
* Unmerged path drivers/scsi/qla2xxx/qla_target.c
