sysfs, kobject: add sysfs wrapper for kernfs_enable_ns()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Tejun Heo <tj@kernel.org>
commit fa4cd451cceb77e97432b91fcf50a7e4a7361e29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/fa4cd451.failed

Currently, kobject is invoking kernfs_enable_ns() directly.  This is
fine now as sysfs and kernfs are enabled and disabled together.  If
sysfs is disabled, kernfs_enable_ns() is switched to dummy
implementation too and everything is fine; however, kernfs will soon
have its own config option CONFIG_KERNFS and !SYSFS && KERNFS will be
possible, which can make kobject call into non-dummy
kernfs_enable_ns() with NULL kernfs_node pointers leading to an oops.

Introduce sysfs_enable_ns() which is a wrapper around
kernfs_enable_ns() so that it can be made a noop depending only on
CONFIG_SYSFS regardless of the planned CONFIG_KERNFS.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Reported-by: Fengguang Wu <fengguang.wu@intel.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit fa4cd451cceb77e97432b91fcf50a7e4a7361e29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/kobject.c
diff --cc lib/kobject.c
index 74091346e23d,58751bb80a7c..000000000000
--- a/lib/kobject.c
+++ b/lib/kobject.c
@@@ -60,7 -84,20 +60,24 @@@ static int create_dir(struct kobject *k
  	 */
  	sysfs_get(kobj->sd);
  
++<<<<<<< HEAD
 +	return error;
++=======
+ 	/*
+ 	 * If @kobj has ns_ops, its children need to be filtered based on
+ 	 * their namespace tags.  Enable namespace support on @kobj->sd.
+ 	 */
+ 	ops = kobj_child_ns_ops(kobj);
+ 	if (ops) {
+ 		BUG_ON(ops->type <= KOBJ_NS_TYPE_NONE);
+ 		BUG_ON(ops->type >= KOBJ_NS_TYPES);
+ 		BUG_ON(!kobj_ns_type_registered(ops->type));
+ 
+ 		sysfs_enable_ns(kobj->sd);
+ 	}
+ 
+ 	return 0;
++>>>>>>> fa4cd451cceb (sysfs, kobject: add sysfs wrapper for kernfs_enable_ns())
  }
  
  static int get_kobj_path_length(struct kobject *kobj)
diff --git a/include/linux/sysfs.h b/include/linux/sysfs.h
index 85126b01a2f8..f77451d0869f 100644
--- a/include/linux/sysfs.h
+++ b/include/linux/sysfs.h
@@ -252,6 +252,11 @@ void sysfs_put(struct sysfs_dirent *sd);
 
 int __must_check sysfs_init(void);
 
+static inline void sysfs_enable_ns(struct kernfs_node *kn)
+{
+	return kernfs_enable_ns(kn);
+}
+
 #else /* CONFIG_SYSFS */
 
 static inline int sysfs_schedule_callback(struct kobject *kobj,
@@ -444,6 +449,10 @@ static inline int __must_check sysfs_init(void)
 	return 0;
 }
 
+static inline void sysfs_enable_ns(struct kernfs_node *kn)
+{
+}
+
 #endif /* CONFIG_SYSFS */
 
 #endif /* _SYSFS_H_ */
* Unmerged path lib/kobject.c
