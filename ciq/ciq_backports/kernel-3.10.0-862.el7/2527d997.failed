elevator: lookup mq vs non-mq elevators

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jens Axboe <axboe@kernel.dk>
commit 2527d99789e248576ac8081530cd4fd88730f8c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2527d997.failed

If an IO scheduler is selected via elevator= and it doesn't match
the driver in question wrt blk-mq support, then we fail to boot.

The elevator= parameter is deprecated and only supported for
non-mq devices. Augment the elevator lookup API so that we
pass in if we're looking for an mq capable scheduler or not,
so that we only ever return a valid type for the queue in
question.

Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=196695
	Reviewed-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 2527d99789e248576ac8081530cd4fd88730f8c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/elevator.c
diff --cc block/elevator.c
index d515740390c1,77856bf29568..000000000000
--- a/block/elevator.c
+++ b/block/elevator.c
@@@ -67,19 -71,22 +67,22 @@@ static int elv_iosched_allow_merge(stru
  /*
   * can we safely merge with this request?
   */
 -bool elv_bio_merge_ok(struct request *rq, struct bio *bio)
 +bool elv_rq_merge_ok(struct request *rq, struct bio *bio)
  {
  	if (!blk_rq_merge_ok(rq, bio))
 -		return false;
 +		return 0;
  
 -	if (!elv_iosched_allow_bio_merge(rq, bio))
 -		return false;
 +	if (!elv_iosched_allow_merge(rq, bio))
 +		return 0;
  
 -	return true;
 +	return 1;
  }
 -EXPORT_SYMBOL(elv_bio_merge_ok);
 +EXPORT_SYMBOL(elv_rq_merge_ok);
  
- static struct elevator_type *elevator_find(const char *name)
+ /*
+  * Return scheduler with name 'name' and with matching 'mq capability
+  */
+ static struct elevator_type *elevator_find(const char *name, bool mq)
  {
  	struct elevator_type *e;
  
@@@ -221,7 -228,20 +228,24 @@@ int elevator_init(struct request_queue 
  	}
  
  	if (!e) {
++<<<<<<< HEAD
 +		e = elevator_get(CONFIG_DEFAULT_IOSCHED, false);
++=======
+ 		/*
+ 		 * For blk-mq devices, we default to using mq-deadline,
+ 		 * if available, for single queue devices. If deadline
+ 		 * isn't available OR we have multiple queues, default
+ 		 * to "none".
+ 		 */
+ 		if (q->mq_ops) {
+ 			if (q->nr_hw_queues == 1)
+ 				e = elevator_get(q, "mq-deadline", false);
+ 			if (!e)
+ 				return 0;
+ 		} else
+ 			e = elevator_get(q, CONFIG_DEFAULT_IOSCHED, false);
+ 
++>>>>>>> 2527d99789e2 (elevator: lookup mq vs non-mq elevators)
  		if (!e) {
  			printk(KERN_ERR
  				"Default I/O scheduler not found. " \
@@@ -958,11 -1062,18 +982,11 @@@ static int __elevator_change(struct req
  	char elevator_name[ELV_NAME_MAX];
  	struct elevator_type *e;
  
 -	/* Make sure queue is not in the middle of being removed */
 -	if (!test_bit(QUEUE_FLAG_REGISTERED, &q->queue_flags))
 -		return -ENOENT;
 -
 -	/*
 -	 * Special case for mq, turn off scheduling
 -	 */
 -	if (q->mq_ops && !strncmp(name, "none", 4))
 -		return elevator_switch(q, NULL);
 +	if (!q->elevator)
 +		return -ENXIO;
  
  	strlcpy(elevator_name, name, sizeof(elevator_name));
- 	e = elevator_get(strstrip(elevator_name), true);
+ 	e = elevator_get(q, strstrip(elevator_name), true);
  	if (!e)
  		return -EINVAL;
  
* Unmerged path block/elevator.c
