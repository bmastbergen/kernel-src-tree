openvswitch: Add force commit.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] openvswitch: Add force commit (Jiri Benc) [1497774]
Rebuild_FUZZ: 98.31%
commit-author Jarno Rajahalme <jarno@ovn.org>
commit dd41d33f0b033885211a5d6f3ee19e73238aa9ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/dd41d33f.failed

Stateful network admission policy may allow connections to one
direction and reject connections initiated in the other direction.
After policy change it is possible that for a new connection an
overlapping conntrack entry already exists, where the original
direction of the existing connection is opposed to the new
connection's initial packet.

Most importantly, conntrack state relating to the current packet gets
the "reply" designation based on whether the original direction tuple
or the reply direction tuple matched.  If this "directionality" is
wrong w.r.t. to the stateful network admission policy it may happen
that packets in neither direction are correctly admitted.

This patch adds a new "force commit" option to the OVS conntrack
action that checks the original direction of an existing conntrack
entry.  If that direction is opposed to the current packet, the
existing conntrack entry is deleted and a new one is subsequently
created in the correct direction.

	Signed-off-by: Jarno Rajahalme <jarno@ovn.org>
	Acked-by: Pravin B Shelar <pshelar@ovn.org>
	Acked-by: Joe Stringer <joe@ovn.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dd41d33f0b033885211a5d6f3ee19e73238aa9ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/conntrack.c
diff --cc net/openvswitch/conntrack.c
index a817d2fd90cf,8b15bab70583..000000000000
--- a/net/openvswitch/conntrack.c
+++ b/net/openvswitch/conntrack.c
@@@ -533,8 -614,13 +534,18 @@@ static bool skb_nfct_cached(struct net 
  	 */
  	if (!ct && key->ct.state & OVS_CS_F_TRACKED &&
  	    !(key->ct.state & OVS_CS_F_INVALID) &&
++<<<<<<< HEAD
 +	    key->ct.zone == info->zone.id)
 +		ct = ovs_ct_find_existing(net, &info->zone, info->family, skb);
++=======
+ 	    key->ct.zone == info->zone.id) {
+ 		ct = ovs_ct_find_existing(net, &info->zone, info->family, skb,
+ 					  !!(key->ct.state
+ 					     & OVS_CS_F_NAT_MASK));
+ 		if (ct)
+ 			nf_ct_get(skb, &ctinfo);
+ 	}
++>>>>>>> dd41d33f0b03 (openvswitch: Add force commit.)
  	if (!ct)
  		return false;
  	if (!net_eq(net, read_pnet(&ct->ct_net)))
diff --git a/include/uapi/linux/openvswitch.h b/include/uapi/linux/openvswitch.h
index f8b3d4891de2..f023f6183783 100644
--- a/include/uapi/linux/openvswitch.h
+++ b/include/uapi/linux/openvswitch.h
@@ -656,6 +656,10 @@ struct ovs_action_hash {
  * @OVS_CT_ATTR_HELPER: variable length string defining conntrack ALG.
  * @OVS_CT_ATTR_NAT: Nested OVS_NAT_ATTR_* for performing L3 network address
  * translation (NAT) on the packet.
+ * @OVS_CT_ATTR_FORCE_COMMIT: Like %OVS_CT_ATTR_COMMIT, but instead of doing
+ * nothing if the connection is already committed will check that the current
+ * packet is in conntrack entry's original direction.  If directionality does
+ * not match, will delete the existing conntrack entry and commit a new one.
  */
 enum ovs_ct_attr {
 	OVS_CT_ATTR_UNSPEC,
@@ -666,6 +670,7 @@ enum ovs_ct_attr {
 	OVS_CT_ATTR_HELPER,     /* netlink helper to assist detection of
 				   related connections. */
 	OVS_CT_ATTR_NAT,        /* Nested OVS_NAT_ATTR_* */
+	OVS_CT_ATTR_FORCE_COMMIT,  /* No argument */
 	__OVS_CT_ATTR_MAX
 };
 
* Unmerged path net/openvswitch/conntrack.c
