ipv6: fib: Add FIB notifiers callbacks

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit 16ab6d7d4d8cc037bb4be12c2b849ac92787e1ff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/16ab6d7d.failed

We're about to add IPv6 FIB offload support, so implement the necessary
callbacks in IPv6 code, which will later allow us to add routes and
rules notifications.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 16ab6d7d4d8cc037bb4be12c2b849ac92787e1ff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netns/ipv6.h
#	net/ipv6/Makefile
diff --cc include/net/netns/ipv6.h
index 005e2c2e39a9,abdf3b40303b..000000000000
--- a/include/net/netns/ipv6.h
+++ b/include/net/netns/ipv6.h
@@@ -72,6 -84,9 +72,12 @@@ struct netns_ipv6 
  #endif
  #endif
  	atomic_t		dev_addr_genid;
++<<<<<<< HEAD
++=======
+ 	atomic_t		fib6_sernum;
+ 	struct seg6_pernet_data *seg6_data;
+ 	struct fib_notifier_ops	*notifier_ops;
++>>>>>>> 16ab6d7d4d8c (ipv6: fib: Add FIB notifiers callbacks)
  };
  
  #if IS_ENABLED(CONFIG_NF_DEFRAG_IPV6)
diff --cc net/ipv6/Makefile
index 3fb5da100c4f,f8b24c2e0d77..000000000000
--- a/net/ipv6/Makefile
+++ b/net/ipv6/Makefile
@@@ -7,9 -7,9 +7,13 @@@ obj-$(CONFIG_IPV6) += ipv6.
  ipv6-objs :=	af_inet6.o anycast.o ip6_output.o ip6_input.o addrconf.o \
  		addrlabel.o \
  		route.o ip6_fib.o ipv6_sockglue.o ndisc.o udp.o udplite.o \
 -		raw.o icmp.o mcast.o reassembly.o tcp_ipv6.o ping.o \
 +		raw.o icmp.o mcast.o reassembly.o tcp_ipv6.o \
  		exthdrs.o datagram.o ip6_flowlabel.o inet6_connection_sock.o \
++<<<<<<< HEAD
 +		udp_offload.o
++=======
+ 		udp_offload.o seg6.o fib6_notifier.o
++>>>>>>> 16ab6d7d4d8c (ipv6: fib: Add FIB notifiers callbacks)
  
  ipv6-offload :=	ip6_offload.o tcpv6_offload.o exthdrs_offload.o
  
diff --git a/include/net/ip6_fib.h b/include/net/ip6_fib.h
index 2ee17a3a8c5d..ae2e501458c0 100644
--- a/include/net/ip6_fib.h
+++ b/include/net/ip6_fib.h
@@ -16,10 +16,12 @@
 #include <linux/ipv6_route.h>
 #include <linux/rtnetlink.h>
 #include <linux/spinlock.h>
+#include <linux/notifier.h>
 #include <net/dst.h>
 #include <net/flow.h>
 #include <net/netlink.h>
 #include <net/inetpeer.h>
+#include <net/fib_notifier.h>
 
 #ifdef CONFIG_IPV6_MULTIPLE_TABLES
 #define FIB6_TABLE_HASHSZ 256
@@ -295,6 +297,15 @@ int fib6_init(void);
 extern int			ipv6_route_open(struct inode *inode,
 						struct file *file);
 
+int call_fib6_notifier(struct notifier_block *nb, struct net *net,
+		       enum fib_event_type event_type,
+		       struct fib_notifier_info *info);
+int call_fib6_notifiers(struct net *net, enum fib_event_type event_type,
+			struct fib_notifier_info *info);
+
+int __net_init fib6_notifier_init(struct net *net);
+void __net_exit fib6_notifier_exit(struct net *net);
+
 #ifdef CONFIG_IPV6_MULTIPLE_TABLES
 int fib6_rules_init(void);
 void fib6_rules_cleanup(void);
* Unmerged path include/net/netns/ipv6.h
* Unmerged path net/ipv6/Makefile
diff --git a/net/ipv6/fib6_notifier.c b/net/ipv6/fib6_notifier.c
new file mode 100644
index 000000000000..c2bb1ab5b5eb
--- /dev/null
+++ b/net/ipv6/fib6_notifier.c
@@ -0,0 +1,55 @@
+#include <linux/notifier.h>
+#include <linux/socket.h>
+#include <linux/kernel.h>
+#include <net/net_namespace.h>
+#include <net/fib_notifier.h>
+#include <net/netns/ipv6.h>
+#include <net/ip6_fib.h>
+
+int call_fib6_notifier(struct notifier_block *nb, struct net *net,
+		       enum fib_event_type event_type,
+		       struct fib_notifier_info *info)
+{
+	info->family = AF_INET6;
+	return call_fib_notifier(nb, net, event_type, info);
+}
+
+int call_fib6_notifiers(struct net *net, enum fib_event_type event_type,
+			struct fib_notifier_info *info)
+{
+	info->family = AF_INET6;
+	return call_fib_notifiers(net, event_type, info);
+}
+
+static unsigned int fib6_seq_read(struct net *net)
+{
+	return 0;
+}
+
+static int fib6_dump(struct net *net, struct notifier_block *nb)
+{
+	return 0;
+}
+
+static const struct fib_notifier_ops fib6_notifier_ops_template = {
+	.family		= AF_INET6,
+	.fib_seq_read	= fib6_seq_read,
+	.fib_dump	= fib6_dump,
+};
+
+int __net_init fib6_notifier_init(struct net *net)
+{
+	struct fib_notifier_ops *ops;
+
+	ops = fib_notifier_ops_register(&fib6_notifier_ops_template, net);
+	if (IS_ERR(ops))
+		return PTR_ERR(ops);
+	net->ipv6.notifier_ops = ops;
+
+	return 0;
+}
+
+void __net_exit fib6_notifier_exit(struct net *net)
+{
+	fib_notifier_ops_unregister(net->ipv6.notifier_ops);
+}
diff --git a/net/ipv6/ip6_fib.c b/net/ipv6/ip6_fib.c
index 2dd41679dc89..d7a9f6449975 100644
--- a/net/ipv6/ip6_fib.c
+++ b/net/ipv6/ip6_fib.c
@@ -1799,6 +1799,11 @@ static void fib6_gc_timer_cb(unsigned long arg)
 static int __net_init fib6_net_init(struct net *net)
 {
 	size_t size = sizeof(struct hlist_head) * FIB6_TABLE_HASHSZ;
+	int err;
+
+	err = fib6_notifier_init(net);
+	if (err)
+		return err;
 
 	setup_timer(&net->ipv6.ip6_fib_timer, fib6_gc_timer_cb, (unsigned long)net);
 
@@ -1848,6 +1853,7 @@ out_fib_table_hash:
 out_rt6_stats:
 	kfree(net->ipv6.rt6_stats);
 out_timer:
+	fib6_notifier_exit(net);
 	return -ENOMEM;
  }
 
@@ -1864,6 +1870,7 @@ static void fib6_net_exit(struct net *net)
 	kfree(net->ipv6.fib6_main_tbl);
 	kfree(net->ipv6.fib_table_hash);
 	kfree(net->ipv6.rt6_stats);
+	fib6_notifier_exit(net);
 }
 
 static struct pernet_operations fib6_net_ops = {
