objtool: Support new GCC 6 switch jump table pattern

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 6d01f28bc08814abc7b8f8973cc71195537f4c80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6d01f28b.failed

This fixes some false positive objtool warnings seen with gcc 6.1.1:

  kernel/trace/ring_buffer.o: warning: objtool: ring_buffer_read_page()+0x36c: sibling call from callable instruction with changed frame pointer
  arch/x86/kernel/reboot.o: warning: objtool: native_machine_emergency_restart()+0x139: sibling call from callable instruction with changed frame pointer
  lib/xz/xz_dec_stream.o: warning: objtool: xz_dec_run()+0xc2: sibling call from callable instruction with changed frame pointer

With GCC 6, a new code pattern is sometimes used to access a switch
statement jump table in .rodata, which objtool doesn't yet recognize:

  mov [rodata addr],%reg1
  ... some instructions ...
  jmpq *(%reg1,%reg2,8)

Add support for detecting that pattern.  The detection code is rather
crude, but it's still effective at weeding out false positives and
catching real warnings.  It can be refined later once objtool starts
reading DWARF CFI.

	Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/b8c9503b4ad8c8a827cc5400db4c1b40a3ea07bc.1469751119.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 6d01f28bc08814abc7b8f8973cc71195537f4c80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/objtool/builtin-check.c
diff --cc tools/objtool/builtin-check.c
index e567d42e6e21,bd09d0effef8..000000000000
--- a/tools/objtool/builtin-check.c
+++ b/tools/objtool/builtin-check.c
@@@ -662,12 -749,10 +744,15 @@@ static struct rela *find_switch_table(s
  static int add_func_switch_tables(struct objtool_file *file,
  				  struct symbol *func)
  {
++<<<<<<< HEAD
 +	struct instruction *insn, *prev_jump;
 +	struct rela *text_rela, *rodata_rela, *prev_rela;
++=======
+ 	struct instruction *insn, *prev_jump = NULL;
+ 	struct rela *rela, *prev_rela = NULL;
++>>>>>>> 6d01f28bc088 (objtool: Support new GCC 6 switch jump table pattern)
  	int ret;
  
- 	prev_jump = NULL;
- 
  	func_for_each_insn(file, func, insn) {
  		if (insn->type != INSN_JUMP_DYNAMIC)
  			continue;
* Unmerged path tools/objtool/builtin-check.c
