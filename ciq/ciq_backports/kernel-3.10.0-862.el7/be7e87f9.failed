net/mlx5e: Fail safe cqe compressing/moderation mode setting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Fail safe cqe compressing/moderation mode setting (Don Dutile) [1456659 1499362]
Rebuild_FUZZ: 96.55%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit be7e87f92b5802df9302af7856990172091a385f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/be7e87f9.failed

Use the new fail-safe channels switch mechanism to set new
CQE compressing and CQE moderation mode settings.

We also move RX CQE compression modify function out of en_rx file  to
a more appropriate place.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
(cherry picked from commit be7e87f92b5802df9302af7856990172091a385f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
index 35c9cc1953cf,c5f49e294987..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
@@@ -1459,16 -1491,51 +1459,55 @@@ static int set_pflag_rx_cqe_based_moder
  	if (!rx_mode_changed)
  		return 0;
  
- 	reset = test_bit(MLX5E_STATE_OPENED, &priv->state);
- 	if (reset)
- 		mlx5e_close_locked(netdev);
+ 	new_channels.params = priv->channels.params;
+ 	mlx5e_set_rx_cq_mode_params(&new_channels.params, rx_cq_period_mode);
  
++<<<<<<< HEAD
 +	mlx5e_set_rx_cq_mode_params(&priv->params, rx_cq_period_mode);
++=======
+ 	if (!test_bit(MLX5E_STATE_OPENED, &priv->state)) {
+ 		priv->channels.params = new_channels.params;
+ 		return 0;
+ 	}
++>>>>>>> be7e87f92b58 (net/mlx5e: Fail safe cqe compressing/moderation mode setting)
  
- 	if (reset)
- 		err = mlx5e_open_locked(netdev);
+ 	err = mlx5e_open_channels(priv, &new_channels);
+ 	if (err)
+ 		return err;
  
- 	return err;
+ 	mlx5e_switch_priv_channels(priv, &new_channels);
+ 	return 0;
+ }
+ 
+ int mlx5e_modify_rx_cqe_compression_locked(struct mlx5e_priv *priv, bool new_val)
+ {
+ 	bool curr_val = MLX5E_GET_PFLAG(&priv->channels.params, MLX5E_PFLAG_RX_CQE_COMPRESS);
+ 	struct mlx5e_channels new_channels = {};
+ 	int err = 0;
+ 
+ 	if (!MLX5_CAP_GEN(priv->mdev, cqe_compression))
+ 		return new_val ? -EOPNOTSUPP : 0;
+ 
+ 	if (curr_val == new_val)
+ 		return 0;
+ 
+ 	new_channels.params = priv->channels.params;
+ 	MLX5E_SET_PFLAG(&new_channels.params, MLX5E_PFLAG_RX_CQE_COMPRESS, new_val);
+ 
+ 	mlx5e_set_rq_type_params(priv->mdev, &new_channels.params,
+ 				 new_channels.params.rq_wq_type);
+ 
+ 	if (!test_bit(MLX5E_STATE_OPENED, &priv->state)) {
+ 		priv->channels.params = new_channels.params;
+ 		return 0;
+ 	}
+ 
+ 	err = mlx5e_open_channels(priv, &new_channels);
+ 	if (err)
+ 		return err;
+ 
+ 	mlx5e_switch_priv_channels(priv, &new_channels);
+ 	return 0;
  }
  
  static int set_pflag_rx_cqe_compress(struct net_device *netdev,
@@@ -1486,8 -1553,7 +1525,12 @@@
  	}
  
  	mlx5e_modify_rx_cqe_compression_locked(priv, enable);
++<<<<<<< HEAD
 +	priv->params.rx_cqe_compress_def = enable;
 +	mlx5e_set_rq_type_params(priv, priv->params.rq_wq_type);
++=======
+ 	priv->channels.params.rx_cqe_compress_def = enable;
++>>>>>>> be7e87f92b58 (net/mlx5e: Fail safe cqe compressing/moderation mode setting)
  
  	return 0;
  }
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index e8c9b2d23033,1a9532b31635..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -155,28 -156,6 +155,31 @@@ static inline u32 mlx5e_decompress_cqes
  	return mlx5e_decompress_cqes_cont(rq, cq, 1, budget_rem) - 1;
  }
  
++<<<<<<< HEAD
 +void mlx5e_modify_rx_cqe_compression_locked(struct mlx5e_priv *priv, bool val)
 +{
 +	bool was_opened;
 +
 +	if (!MLX5_CAP_GEN(priv->mdev, cqe_compression))
 +		return;
 +
 +	if (MLX5E_GET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS) == val)
 +		return;
 +
 +	was_opened = test_bit(MLX5E_STATE_OPENED, &priv->state);
 +	if (was_opened)
 +		mlx5e_close_locked(priv->netdev);
 +
 +	MLX5E_SET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS, val);
 +	mlx5e_set_rq_type_params(priv, priv->params.rq_wq_type);
 +
 +	if (was_opened)
 +		mlx5e_open_locked(priv->netdev);
 +
 +}
 +
++=======
++>>>>>>> be7e87f92b58 (net/mlx5e: Fail safe cqe compressing/moderation mode setting)
  #define RQ_PAGE_SIZE(rq) ((1 << rq->buff.page_order) << PAGE_SHIFT)
  
  static inline bool mlx5e_rx_cache_put(struct mlx5e_rq *rq,
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 16c2c2d53ebb..b431014d7e1e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -768,7 +768,7 @@ void mlx5e_pps_event_handler(struct mlx5e_priv *priv,
 			     struct ptp_clock_event *event);
 int mlx5e_hwstamp_set(struct net_device *dev, struct ifreq *ifr);
 int mlx5e_hwstamp_get(struct net_device *dev, struct ifreq *ifr);
-void mlx5e_modify_rx_cqe_compression_locked(struct mlx5e_priv *priv, bool val);
+int mlx5e_modify_rx_cqe_compression_locked(struct mlx5e_priv *priv, bool val);
 
 int mlx5e_vlan_rx_add_vid(struct net_device *dev, __always_unused __be16 proto,
 			  u16 vid);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c b/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c
index 4a787dea75a4..2f366621dc47 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_clock.c
@@ -90,6 +90,7 @@ int mlx5e_hwstamp_set(struct net_device *dev, struct ifreq *ifr)
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
 	struct hwtstamp_config config;
+	int err;
 
 	if (!MLX5_CAP_GEN(priv->mdev, device_frequency_khz))
 		return -EOPNOTSUPP;
@@ -129,7 +130,12 @@ int mlx5e_hwstamp_set(struct net_device *dev, struct ifreq *ifr)
 	case HWTSTAMP_FILTER_PTP_V2_DELAY_REQ:
 		/* Disable CQE compression */
 		netdev_warn(dev, "Disabling cqe compression");
-		mlx5e_modify_rx_cqe_compression_locked(priv, false);
+		err = mlx5e_modify_rx_cqe_compression_locked(priv, false);
+		if (err) {
+			netdev_err(dev, "Failed disabling cqe compression err=%d\n", err);
+			mutex_unlock(&priv->state_lock);
+			return err;
+		}
 		config.rx_filter = HWTSTAMP_FILTER_ALL;
 		break;
 	default:
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_ethtool.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
