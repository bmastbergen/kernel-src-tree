IB/core: Add completion queue (cq) object actions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Matan Barak <matanb@mellanox.com>
commit 9ee79fce364216df35ec46e26d20780c3c1644cc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9ee79fce.failed

Adding CQ ioctl actions:
1. create_cq
2. destroy_cq

This requires adding the following:
1. A specification describing the method
	a. Handler
	b. Attributes specification
		Each attribute is one of the following:
		a. PTR_IN - input data
			    Note: This could be encoded inlined for
				  data < 64bit
		b. PTR_OUT - response data
		c. IDR - idr based object
		d. FD - fd based object
                Blobs attributes (clauses a and b) contain their type,
	        while objects specifications (clauses c and d)
                contains the expected object type (for example, the
                given id should be UVERBS_TYPE_PD) and the required
                access (READ, WRITE, NEW or DESTROY). If a NEW is
                required, the new object's id will be assigned to this
                attribute. All attributes could get UA_FLAGS
                attribute. Currently we support stating that an
		attribute is mandatory or that the specification size
                corresponds to a lower bound (and that this attribute
		could be extended).
		We currently add both default attributes and the two
		generic UHW_IN and UHW_OUT driver specific attributes.
2. Handler
   A handler gets a uverbs_attr_bundle. The handler developer uses
   uverbs_attr_get to fetch an attribute of a given id.
   Each of these attribute groups correspond to the specification
   group defined in the action (clauses 1.b and 1.c respectively).
   The indices of these arrays corresponds to the attribute ids
   declared in the specifications (clause 2).

   The handler is quite simple. It assumes the infrastructure fetched
   all objects and locked, created or destroyed them as required by
   the specification. Pointer (or blob) attributes were validated to
   match their required sizes. After the handler finished, the
   infrastructure commits or rollbacks the objects.

	Signed-off-by: Matan Barak <matanb@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 9ee79fce364216df35ec46e26d20780c3c1644cc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_std_types.c
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
index 89bca182464c,842792eae383..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
@@@ -30,24 -30,55 +30,48 @@@
   * SOFTWARE.
   */
  
 -#ifndef IB_USER_IOCTL_VERBS_H
 -#define IB_USER_IOCTL_VERBS_H
 +#ifndef __MLX5E_IPOB_H__
 +#define __MLX5E_IPOB_H__
  
 -#include <rdma/rdma_user_ioctl.h>
 +#include <linux/mlx5/fs.h>
 +#include "en.h"
  
 -#define UVERBS_UDATA_DRIVER_DATA_NS	1
 -#define UVERBS_UDATA_DRIVER_DATA_FLAG	(1UL << UVERBS_ID_NS_SHIFT)
 +#define MLX5I_MAX_NUM_TC 1
  
 -enum uverbs_default_objects {
 -	UVERBS_OBJECT_DEVICE, /* No instances of DEVICE are allowed */
 -	UVERBS_OBJECT_PD,
 -	UVERBS_OBJECT_COMP_CHANNEL,
 -	UVERBS_OBJECT_CQ,
 -	UVERBS_OBJECT_QP,
 -	UVERBS_OBJECT_SRQ,
 -	UVERBS_OBJECT_AH,
 -	UVERBS_OBJECT_MR,
 -	UVERBS_OBJECT_MW,
 -	UVERBS_OBJECT_FLOW,
 -	UVERBS_OBJECT_XRCD,
 -	UVERBS_OBJECT_RWQ_IND_TBL,
 -	UVERBS_OBJECT_WQ,
 -	UVERBS_OBJECT_LAST,
 +/* ipoib rdma netdev's private data structure */
 +struct mlx5i_priv {
 +	struct mlx5_core_qp qp;
 +	char  *mlx5e_priv[0];
  };
  
 -enum {
 -	UVERBS_UHW_IN = UVERBS_UDATA_DRIVER_DATA_FLAG,
 -	UVERBS_UHW_OUT,
 -};
 +/* Extract mlx5e_priv from IPoIB netdev */
 +#define mlx5i_epriv(netdev) ((void *)(((struct mlx5i_priv *)netdev_priv(netdev))->mlx5e_priv))
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
 +netdev_tx_t mlx5i_sq_xmit(struct mlx5e_txqsq *sq, struct sk_buff *skb,
 +			  struct mlx5_av *av, u32 dqpn, u32 dqkey);
++=======
+ enum uverbs_create_cq_cmd_attr_ids {
+ 	CREATE_CQ_HANDLE,
+ 	CREATE_CQ_CQE,
+ 	CREATE_CQ_USER_HANDLE,
+ 	CREATE_CQ_COMP_CHANNEL,
+ 	CREATE_CQ_COMP_VECTOR,
+ 	CREATE_CQ_FLAGS,
+ 	CREATE_CQ_RESP_CQE,
+ };
+ 
+ enum uverbs_destroy_cq_cmd_attr_ids {
+ 	DESTROY_CQ_HANDLE,
+ 	DESTROY_CQ_RESP,
+ };
+ 
+ enum uverbs_actions_cq_ops {
+ 	UVERBS_CQ_CREATE,
+ 	UVERBS_CQ_DESTROY,
+ };
+ 
+ #endif
++>>>>>>> 9ee79fce3642 (IB/core: Add completion queue (cq) object actions):include/uapi/rdma/ib_user_ioctl_verbs.h
  
 +#endif /* __MLX5E_IPOB_H__ */
* Unmerged path drivers/infiniband/core/uverbs_std_types.c
* Unmerged path drivers/infiniband/core/uverbs_std_types.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
