mlxsw: spectrum: Don't create FIDs upon creation of VLAN uppers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit ed9ddd3aadac36869579d9075dd68067f87878cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ed9ddd3a.failed

Up until now we used to create FIDs upon the creation of VLAN uppers on
top of the VLAN-aware bridge. This was done so that in case a router
interface (RIF) was configured on top of the bridge, the FID would
already be there.

Instead, simplify the code and only create the FID upon RIF creation.

This is an intermediary step towards the introduction of the common FID
core, in which this code would be completely removed.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ed9ddd3aadac36869579d9075dd68067f87878cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index 4a2dd98ae919,f4c31f668e8d..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -3867,15 -4001,10 +3856,22 @@@ static void mlxsw_sp_master_bridge_inc(
  
  static void mlxsw_sp_master_bridge_dec(struct mlxsw_sp *mlxsw_sp)
  {
++<<<<<<< HEAD
 +	if (--mlxsw_sp->master_bridge.ref_count == 0) {
 +		mlxsw_sp->master_bridge.dev = NULL;
 +		/* It's possible upper VLAN devices are still holding
 +		 * references to underlying FIDs. Drop the reference
 +		 * and release the resources if it was the last one.
 +		 * If it wasn't, then something bad happened.
 +		 */
 +		mlxsw_sp_master_bridge_gone_sync(mlxsw_sp);
 +	}
++=======
+ 	struct mlxsw_sp_upper *master_bridge = mlxsw_sp_master_bridge(mlxsw_sp);
+ 
+ 	if (--master_bridge->ref_count == 0)
+ 		master_bridge->dev = NULL;
++>>>>>>> ed9ddd3aadac (mlxsw: spectrum: Don't create FIDs upon creation of VLAN uppers)
  }
  
  static int mlxsw_sp_port_bridge_join(struct mlxsw_sp_port *mlxsw_sp_port,
@@@ -4422,85 -4566,6 +4418,88 @@@ static int mlxsw_sp_netdevice_lag_event
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int mlxsw_sp_master_bridge_vlan_link(struct mlxsw_sp *mlxsw_sp,
 +					    struct net_device *vlan_dev)
 +{
 +	u16 fid = vlan_dev_vlan_id(vlan_dev);
 +	struct mlxsw_sp_fid *f;
 +
 +	f = mlxsw_sp_fid_find(mlxsw_sp, fid);
 +	if (!f) {
 +		f = mlxsw_sp_fid_create(mlxsw_sp, fid);
 +		if (IS_ERR(f))
 +			return PTR_ERR(f);
 +	}
 +
 +	f->ref_count++;
 +
 +	return 0;
 +}
 +
 +static void mlxsw_sp_master_bridge_vlan_unlink(struct mlxsw_sp *mlxsw_sp,
 +					       struct net_device *vlan_dev)
 +{
 +	u16 fid = vlan_dev_vlan_id(vlan_dev);
 +	struct mlxsw_sp_fid *f;
 +
 +	f = mlxsw_sp_fid_find(mlxsw_sp, fid);
 +	if (f && f->r)
 +		mlxsw_sp_rif_bridge_destroy(mlxsw_sp, f->r);
 +	if (f && --f->ref_count == 0)
 +		mlxsw_sp_fid_destroy(mlxsw_sp, f);
 +}
 +
 +static int mlxsw_sp_netdevice_bridge_event(struct net_device *br_dev,
 +					   unsigned long event, void *ptr)
 +{
 +	struct netdev_notifier_changeupper_info *info;
 +	struct net_device *upper_dev;
 +	struct mlxsw_sp *mlxsw_sp;
 +	int err = 0;
 +
 +	mlxsw_sp = mlxsw_sp_lower_get(br_dev);
 +	if (!mlxsw_sp)
 +		return 0;
 +
 +	info = ptr;
 +
 +	switch (event) {
 +	case NETDEV_PRECHANGEUPPER:
 +		upper_dev = info->upper_dev;
 +		if (!is_vlan_dev(upper_dev) && !netif_is_l3_master(upper_dev))
 +			return -EINVAL;
 +		if (is_vlan_dev(upper_dev) &&
 +		    br_dev != mlxsw_sp->master_bridge.dev)
 +			return -EINVAL;
 +		break;
 +	case NETDEV_CHANGEUPPER:
 +		upper_dev = info->upper_dev;
 +		if (is_vlan_dev(upper_dev)) {
 +			if (info->linking)
 +				err = mlxsw_sp_master_bridge_vlan_link(mlxsw_sp,
 +								       upper_dev);
 +			else
 +				mlxsw_sp_master_bridge_vlan_unlink(mlxsw_sp,
 +								   upper_dev);
 +		} else if (netif_is_l3_master(upper_dev)) {
 +			if (info->linking)
 +				err = mlxsw_sp_bridge_vrf_join(mlxsw_sp,
 +							       br_dev);
 +			else
 +				mlxsw_sp_bridge_vrf_leave(mlxsw_sp, br_dev);
 +		} else {
 +			err = -EINVAL;
 +			WARN_ON(1);
 +		}
 +		break;
 +	}
 +
 +	return err;
 +}
 +
++=======
++>>>>>>> ed9ddd3aadac (mlxsw: spectrum: Don't create FIDs upon creation of VLAN uppers)
  static u16 mlxsw_sp_avail_vfid_get(const struct mlxsw_sp *mlxsw_sp)
  {
  	return find_first_zero_bit(mlxsw_sp->vfids.mapped,
@@@ -4848,12 -4915,12 +4847,10 @@@ static int mlxsw_sp_netdevice_event(str
  
  	if (event == NETDEV_CHANGEADDR || event == NETDEV_CHANGEMTU)
  		err = mlxsw_sp_netdevice_router_port_event(dev);
 -	else if (mlxsw_sp_is_vrf_event(event, ptr))
 -		err = mlxsw_sp_netdevice_vrf_event(dev, event, ptr);
  	else if (mlxsw_sp_port_dev_check(dev))
 -		err = mlxsw_sp_netdevice_port_event(dev, dev, event, ptr);
 +		err = mlxsw_sp_netdevice_port_event(dev, event, ptr);
  	else if (netif_is_lag_master(dev))
  		err = mlxsw_sp_netdevice_lag_event(dev, event, ptr);
- 	else if (netif_is_bridge_master(dev))
- 		err = mlxsw_sp_netdevice_bridge_event(dev, event, ptr);
  	else if (is_vlan_dev(dev))
  		err = mlxsw_sp_netdevice_vlan_event(dev, event, ptr);
  
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index f8e7036e3f4a,c582180e9354..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -2950,12 -3239,13 +2950,19 @@@ static int mlxsw_sp_inetaddr_lag_event(
  static struct mlxsw_sp_fid *mlxsw_sp_bridge_fid_get(struct mlxsw_sp *mlxsw_sp,
  						    struct net_device *l3_dev)
  {
- 	u16 fid;
+ 	struct mlxsw_sp_fid *fid;
+ 	u16 fid_index;
  
  	if (is_vlan_dev(l3_dev))
++<<<<<<< HEAD
 +		fid = vlan_dev_vlan_id(l3_dev);
 +	else if (mlxsw_sp->master_bridge.dev == l3_dev)
 +		fid = 1;
++=======
+ 		fid_index = vlan_dev_vlan_id(l3_dev);
+ 	else if (mlxsw_sp_master_bridge(mlxsw_sp)->dev == l3_dev)
+ 		fid_index = 1;
++>>>>>>> ed9ddd3aadac (mlxsw: spectrum: Don't create FIDs upon creation of VLAN uppers)
  	else
  		return mlxsw_sp_vfid_find(mlxsw_sp, l3_dev);
  
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
