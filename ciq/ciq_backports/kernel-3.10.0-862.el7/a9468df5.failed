x86/boot/64: Use a common function for starting CPUs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit a9468df5ad48d06e5237fc2b56fb04c52f79c8c4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a9468df5.failed

There are two different pieces of code for starting a CPU: start_cpu0()
and the end of secondary_startup_64().  They're identical except for the
stack setup.  Combine the common parts into a shared start_cpu()
function.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Nilay Vaish <nilayvaish@gmail.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1d692ffa62fcb3cc835a5b254e953f2d9bab3549.1474480779.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit a9468df5ad48d06e5237fc2b56fb04c52f79c8c4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/head_64.S
diff --cc arch/x86/kernel/head_64.S
index 5e3b9b044a70,363177790110..000000000000
--- a/arch/x86/kernel/head_64.S
+++ b/arch/x86/kernel/head_64.S
@@@ -292,6 -304,7 +296,10 @@@ ENTRY(start_cpu
  	pushq	$__KERNEL_CS	# set correct cs
  	pushq	%rax		# target address in negative space
  	lretq
++<<<<<<< HEAD
++=======
+ ENDPROC(start_cpu)
++>>>>>>> a9468df5ad48 (x86/boot/64: Use a common function for starting CPUs)
  
  #include "verify_cpu.S"
  
@@@ -299,15 -312,11 +307,20 @@@
  /*
   * Boot CPU0 entry point. It's called from play_dead(). Everything has been set
   * up already except stack. We just set up stack here. Then call
-  * start_secondary().
+  * start_secondary() via start_cpu().
   */
  ENTRY(start_cpu0)
++<<<<<<< HEAD
 +	movq stack_start(%rip),%rsp
 +	movq	initial_code(%rip),%rax
 +	pushq	$0		# fake return address to stop unwinder
 +	pushq	$__KERNEL_CS	# set correct cs
 +	pushq	%rax		# target address in negative space
 +	lretq
++=======
+ 	movq	initial_stack(%rip), %rsp
+ 	jmp	start_cpu
++>>>>>>> a9468df5ad48 (x86/boot/64: Use a common function for starting CPUs)
  ENDPROC(start_cpu0)
  #endif
  
* Unmerged path arch/x86/kernel/head_64.S
