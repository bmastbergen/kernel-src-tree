SELinux: rename SE_SBLABELSUPP to SBLABEL_MNT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric Paris <eparis@redhat.com>
commit 12f348b9dcf6d9616c86a049c3c8700f9dc0af55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/12f348b9.failed

Just a flag rename as we prepare to make it not so special.

	Signed-off-by: Eric Paris <eparis@redhat.com>
(cherry picked from commit 12f348b9dcf6d9616c86a049c3c8700f9dc0af55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/selinux/hooks.c
diff --cc security/selinux/hooks.c
index 7c150cbbfbc6,344f4f999681..000000000000
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@@ -502,8 -405,15 +502,18 @@@ static int sb_finish_set_opts(struct su
  
  	/* Special handling for sysfs. Is genfs but also has setxattr handler*/
  	if (strncmp(sb->s_type->name, "sysfs", sizeof("sysfs")) == 0)
- 		sbsec->flags |= SE_SBLABELSUPP;
+ 		sbsec->flags |= SBLABEL_MNT;
  
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Special handling for rootfs. Is genfs but supports
+ 	 * setting SELinux context on in-core inodes.
+ 	 */
+ 	if (strncmp(sb->s_type->name, "rootfs", sizeof("rootfs")) == 0)
+ 		sbsec->flags |= SBLABEL_MNT;
+ 
++>>>>>>> 12f348b9dcf6 (SELinux: rename SE_SBLABELSUPP to SBLABEL_MNT)
  	/* Initialize the root inode. */
  	rc = inode_doinit_with_dentry(root_inode, root);
  
@@@ -1826,10 -1624,12 +1836,19 @@@ static int may_create(struct inode *dir
  	if (rc)
  		return rc;
  
++<<<<<<< HEAD
 +	rc = selinux_determine_inode_label(current_security(), dir,
 +					   &dentry->d_name, tclass, &newsid);
 +	if (rc)
 +		return rc;
++=======
+ 	if (!newsid || !(sbsec->flags & SBLABEL_MNT)) {
+ 		rc = security_transition_sid(sid, dsec->sid, tclass,
+ 					     &dentry->d_name, &newsid);
+ 		if (rc)
+ 			return rc;
+ 	}
++>>>>>>> 12f348b9dcf6 (SELinux: rename SE_SBLABELSUPP to SBLABEL_MNT)
  
  	rc = avc_has_perm(sid, newsid, tclass, FILE__CREATE, &ad);
  	if (rc)
@@@ -2816,22 -2543,32 +2835,41 @@@ static int selinux_inode_init_security(
  	sid = tsec->sid;
  	newsid = tsec->create_sid;
  
++<<<<<<< HEAD
 +	rc = selinux_determine_inode_label(current_security(),
 +		dir, qstr,
 +		inode_mode_to_security_class(inode->i_mode),
 +		&newsid);
 +	if (rc)
 +		return rc;
++=======
+ 	if ((sbsec->flags & SE_SBINITIALIZED) &&
+ 	    (sbsec->behavior == SECURITY_FS_USE_MNTPOINT))
+ 		newsid = sbsec->mntpoint_sid;
+ 	else if (!newsid || !(sbsec->flags & SBLABEL_MNT)) {
+ 		rc = security_transition_sid(sid, dsec->sid,
+ 					     inode_mode_to_security_class(inode->i_mode),
+ 					     qstr, &newsid);
+ 		if (rc) {
+ 			printk(KERN_WARNING "%s:  "
+ 			       "security_transition_sid failed, rc=%d (dev=%s "
+ 			       "ino=%ld)\n",
+ 			       __func__,
+ 			       -rc, inode->i_sb->s_id, inode->i_ino);
+ 			return rc;
+ 		}
+ 	}
++>>>>>>> 12f348b9dcf6 (SELinux: rename SE_SBLABELSUPP to SBLABEL_MNT)
  
  	/* Possibly defer initialization to selinux_complete_init. */
  	if (sbsec->flags & SE_SBINITIALIZED) {
  		struct inode_security_struct *isec = inode->i_security;
  		isec->sclass = inode_mode_to_security_class(inode->i_mode);
  		isec->sid = newsid;
 -		isec->initialized = 1;
 +		isec->initialized = LABEL_INITIALIZED;
  	}
  
- 	if (!ss_initialized || !(sbsec->flags & SE_SBLABELSUPP))
+ 	if (!ss_initialized || !(sbsec->flags & SBLABEL_MNT))
  		return -EOPNOTSUPP;
  
  	if (name) {
* Unmerged path security/selinux/hooks.c
diff --git a/security/selinux/include/security.h b/security/selinux/include/security.h
index 8fd8e18ea340..b15884a9a71e 100644
--- a/security/selinux/include/security.h
+++ b/security/selinux/include/security.h
@@ -52,7 +52,7 @@
 /* Non-mount related flags */
 #define SE_SBINITIALIZED	0x10
 #define SE_SBPROC		0x20
-#define SE_SBLABELSUPP	0x40
+#define SBLABEL_MNT	0x40
 
 #define CONTEXT_STR	"context="
 #define FSCONTEXT_STR	"fscontext="
