iio: hid-sensor-trigger: Change get poll value function order to avoid sensor properties losing after resume from S3

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Song Hongyan <hongyan.song@intel.com>
commit 3bec247474469f769af41e8c80d3a100dd97dd76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3bec2474.failed

In function _hid_sensor_power_state(), when hid_sensor_read_poll_value()
is called, sensor's all properties will be updated by the value from
sensor hardware/firmware.
In some implementation, sensor hardware/firmware will do a power cycle
during S3. In this case, after resume, once hid_sensor_read_poll_value()
is called, sensor's all properties which are kept by driver during S3
will be changed to default value.
But instead, if a set feature function is called first, sensor
hardware/firmware will be recovered to the last status. So change the
sensor_hub_set_feature() calling order to behind of set feature function
to avoid sensor properties lose.

	Signed-off-by: Song Hongyan <hongyan.song@intel.com>
	Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Cc: <Stable@vger.kernel.org>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 3bec247474469f769af41e8c80d3a100dd97dd76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/common/hid-sensors/hid-sensor-trigger.c
diff --cc drivers/iio/common/hid-sensors/hid-sensor-trigger.c
index 5cc9e5190684,ecf592d69043..000000000000
--- a/drivers/iio/common/hid-sensors/hid-sensor-trigger.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-trigger.c
@@@ -74,10 -85,56 +74,20 @@@ static int hid_sensor_data_rdy_trigger_
  	}
  
  	sensor_hub_get_feature(st->hsdev, st->power_state.report_id,
++<<<<<<< HEAD
 +					st->power_state.index,
 +					&state_val);
++=======
+ 			       st->power_state.index,
+ 			       sizeof(state_val), &state_val);
+ 	if (state)
+ 		poll_value = hid_sensor_read_poll_value(st);
+ 	if (poll_value > 0)
+ 		msleep_interruptible(poll_value * 2);
+ 
++>>>>>>> 3bec24747446 (iio: hid-sensor-trigger: Change get poll value function order to avoid sensor properties losing after resume from S3)
  	return 0;
  }
 -EXPORT_SYMBOL(hid_sensor_power_state);
 -
 -int hid_sensor_power_state(struct hid_sensor_common *st, bool state)
 -{
 -
 -#ifdef CONFIG_PM
 -	int ret;
 -
 -	atomic_set(&st->user_requested_state, state);
 -	if (state)
 -		ret = pm_runtime_get_sync(&st->pdev->dev);
 -	else {
 -		pm_runtime_mark_last_busy(&st->pdev->dev);
 -		ret = pm_runtime_put_autosuspend(&st->pdev->dev);
 -	}
 -	if (ret < 0) {
 -		if (state)
 -			pm_runtime_put_noidle(&st->pdev->dev);
 -		return ret;
 -	}
 -
 -	return 0;
 -#else
 -	atomic_set(&st->user_requested_state, state);
 -	return _hid_sensor_power_state(st, state);
 -#endif
 -}
 -
 -static void hid_sensor_set_power_work(struct work_struct *work)
 -{
 -	struct hid_sensor_common *attrb = container_of(work,
 -						       struct hid_sensor_common,
 -						       work);
 -	_hid_sensor_power_state(attrb, true);
 -}
 -
 -static int hid_sensor_data_rdy_trigger_set_state(struct iio_trigger *trig,
 -						bool state)
 -{
 -	return hid_sensor_power_state(iio_trigger_get_drvdata(trig), state);
 -}
  
  void hid_sensor_remove_trigger(struct hid_sensor_common *attrb)
  {
* Unmerged path drivers/iio/common/hid-sensors/hid-sensor-trigger.c
