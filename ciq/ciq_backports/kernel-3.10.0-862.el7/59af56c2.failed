ibmvnic: Unmap longer term buffer before free

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Brian King <brking@linux.vnet.ibm.com>
commit 59af56c25bc34d4e98820c694d48fd5145fb6e4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/59af56c2.failed

Make sure we unregister long term buffers from the adapter
prior to DMA unmapping it and freeing the buffer. Failure
to do so could result in a DMA to a now invalid address.

	Signed-off-by: Brian King <brking@linux.vnet.ibm.com>
	Signed-off-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 59af56c25bc34d4e98820c694d48fd5145fb6e4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/ibm/ibmvnic.c
diff --cc drivers/net/ethernet/ibm/ibmvnic.c
index f9d61f428d73,c10bae7823e0..000000000000
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@@ -202,47 -190,14 +202,54 @@@ static void free_long_term_buff(struct 
  {
  	struct device *dev = &adapter->vdev->dev;
  
++<<<<<<< HEAD
 +	dma_free_coherent(dev, ltb->size, ltb->buff, ltb->addr);
++=======
+ 	if (!ltb->buff)
+ 		return;
+ 
++>>>>>>> 59af56c25bc3 (ibmvnic: Unmap longer term buffer before free)
  	if (!adapter->failover)
  		send_request_unmap(adapter, ltb->map_id);
+ 	dma_free_coherent(dev, ltb->size, ltb->buff, ltb->addr);
  }
  
 +static int alloc_rx_pool(struct ibmvnic_adapter *adapter,
 +			 struct ibmvnic_rx_pool *pool)
 +{
 +	struct device *dev = &adapter->vdev->dev;
 +	int i;
 +
 +	pool->free_map = kcalloc(pool->size, sizeof(int), GFP_KERNEL);
 +	if (!pool->free_map)
 +		return -ENOMEM;
 +
 +	pool->rx_buff = kcalloc(pool->size, sizeof(struct ibmvnic_rx_buff),
 +				GFP_KERNEL);
 +
 +	if (!pool->rx_buff) {
 +		dev_err(dev, "Couldn't alloc rx buffers\n");
 +		kfree(pool->free_map);
 +		return -ENOMEM;
 +	}
 +
 +	if (alloc_long_term_buff(adapter, &pool->long_term_buff,
 +				 pool->size * pool->buff_size)) {
 +		kfree(pool->free_map);
 +		kfree(pool->rx_buff);
 +		return -ENOMEM;
 +	}
 +
 +	for (i = 0; i < pool->size; ++i)
 +		pool->free_map[i] = i;
 +
 +	atomic_set(&pool->available, 0);
 +	pool->next_alloc = 0;
 +	pool->next_free = 0;
 +
 +	return 0;
 +}
 +
  static void replenish_rx_pool(struct ibmvnic_adapter *adapter,
  			      struct ibmvnic_rx_pool *pool)
  {
* Unmerged path drivers/net/ethernet/ibm/ibmvnic.c
