qla2xxx: Fix inadequate lock protection for ABTS.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Fix inadequate lock protection for ABTS (Himanshu Madhani) [1460030]
Rebuild_FUZZ: 98.97%
commit-author Quinn Tran <quinn.tran@cavium.com>
commit 8f6fc8d4e7ae2347d6261d11a7eb2b247d2954d8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8f6fc8d4.failed

Normally, ABTS is sent to Target Core as Task MGMT command.
In the case of error, qla2xxx needs to send response, hardware_lock
is required to prevent request queue corruption.

	Cc: <stable@vger.kernel.org>
	Signed-off-by: Quinn Tran <quinn.tran@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 8f6fc8d4e7ae2347d6261d11a7eb2b247d2954d8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_target.c
diff --cc drivers/scsi/qla2xxx/qla_target.c
index f10c075d97ef,a78c3e9bcb57..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.c
+++ b/drivers/scsi/qla2xxx/qla_target.c
@@@ -93,14 -109,30 +93,36 @@@ enum fcp_resp_rsp_codes 
   */
  /* Predefs for callbacks handed to qla2xxx LLD */
  static void qlt_24xx_atio_pkt(struct scsi_qla_host *ha,
 -	struct atio_from_isp *pkt, uint8_t);
 +	struct atio_from_isp *pkt);
  static void qlt_response_pkt(struct scsi_qla_host *ha, response_t *pkt);
 -static int qlt_issue_task_mgmt(struct fc_port *sess, u64 lun,
 +static int qlt_issue_task_mgmt(struct qla_tgt_sess *sess, uint32_t lun,
  	int fn, void *iocb, int flags);
  static void qlt_send_term_exchange(struct scsi_qla_host *ha, struct qla_tgt_cmd
++<<<<<<< HEAD
 +	*cmd, struct atio_from_isp *atio, int ha_locked);
 +static void qlt_reject_free_srr_imm(struct scsi_qla_host *ha,
 +	struct qla_tgt_srr_imm *imm, int ha_lock);
++=======
+ 	*cmd, struct atio_from_isp *atio, int ha_locked, int ul_abort);
+ static void qlt_abort_cmd_on_host_reset(struct scsi_qla_host *vha,
+ 	struct qla_tgt_cmd *cmd);
+ static void qlt_alloc_qfull_cmd(struct scsi_qla_host *vha,
+ 	struct atio_from_isp *atio, uint16_t status, int qfull);
+ static void qlt_disable_vha(struct scsi_qla_host *vha);
+ static void qlt_clear_tgt_db(struct qla_tgt *tgt);
+ static void qlt_send_notify_ack(struct scsi_qla_host *vha,
+ 	struct imm_ntfy_from_isp *ntfy,
+ 	uint32_t add_flags, uint16_t resp_code, int resp_code_valid,
+ 	uint16_t srr_flags, uint16_t srr_reject_code, uint8_t srr_explan);
+ static void qlt_send_term_imm_notif(struct scsi_qla_host *vha,
+ 	struct imm_ntfy_from_isp *imm, int ha_locked);
+ static struct fc_port *qlt_create_sess(struct scsi_qla_host *vha,
+ 	fc_port_t *fcport, bool local);
+ void qlt_unreg_sess(struct fc_port *sess);
+ static void qlt_24xx_handle_abts(struct scsi_qla_host *,
+ 	struct abts_recv_from_24xx *);
+ 
++>>>>>>> 8f6fc8d4e7ae (qla2xxx: Fix inadequate lock protection for ABTS.)
  /*
   * Global Variables
   */
@@@ -223,6 -381,36 +245,39 @@@ void qlt_24xx_atio_pkt_all_vps(struct s
  		break;
  	}
  
++<<<<<<< HEAD
++=======
+ 	case VP_RPT_ID_IOCB_TYPE:
+ 		qla24xx_report_id_acquisition(vha,
+ 			(struct vp_rpt_id_entry_24xx *)atio);
+ 		break;
+ 
+ 	case ABTS_RECV_24XX:
+ 	{
+ 		struct abts_recv_from_24xx *entry =
+ 			(struct abts_recv_from_24xx *)atio;
+ 		struct scsi_qla_host *host = qlt_find_host_by_vp_idx(vha,
+ 			entry->vp_index);
+ 		unsigned long flags;
+ 
+ 		if (unlikely(!host)) {
+ 			ql_dbg(ql_dbg_tgt, vha, 0xffff,
+ 			    "qla_target(%d): Response pkt (ABTS_RECV_24XX) "
+ 			    "received, with unknown vp_index %d\n",
+ 			    vha->vp_idx, entry->vp_index);
+ 			break;
+ 		}
+ 		if (!ha_locked)
+ 			spin_lock_irqsave(&host->hw->hardware_lock, flags);
+ 		qlt_24xx_handle_abts(host, (struct abts_recv_from_24xx *)atio);
+ 		if (!ha_locked)
+ 			spin_unlock_irqrestore(&host->hw->hardware_lock, flags);
+ 		break;
+ 	}
+ 
+ 	/* case PUREX_IOCB_TYPE: ql2xmvasynctoatio */
+ 
++>>>>>>> 8f6fc8d4e7ae (qla2xxx: Fix inadequate lock protection for ABTS.)
  	default:
  		ql_dbg(ql_dbg_tgt, vha, 0xe040,
  		    "qla_target(%d): Received unknown ATIO atio "
* Unmerged path drivers/scsi/qla2xxx/qla_target.c
