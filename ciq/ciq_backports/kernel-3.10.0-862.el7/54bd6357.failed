iommu/amd: Suppress IO_PAGE_FAULTs in kdump kernel

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Suppress IO_PAGE_FAULTs in kdump kernel (Suravee Suthikulpanit) [1508644]
Rebuild_FUZZ: 93.62%
commit-author Joerg Roedel <jroedel@suse.de>
commit 54bd63570484167cb13edf81e31fff107b879981
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/54bd6357.failed

When booting into a kdump kernel, suppress IO_PAGE_FAULTs by
default for all devices. But allow the faults again when a
domain is assigned to a device.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 54bd63570484167cb13edf81e31fff107b879981)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
#	drivers/iommu/amd_iommu_types.h
diff --cc drivers/iommu/amd_iommu.c
index e80343c1de99,95ee360a5199..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -2110,7 -2078,8 +2110,12 @@@ static void set_dte_entry(u16 devid, st
  		flags    |= tmp;
  	}
  
++<<<<<<< HEAD
 +	flags &= ~DEV_DOMID_MASK;
++=======
+ 
+ 	flags &= ~(DTE_FLAG_SA | 0xffffULL);
++>>>>>>> 54bd63570484 (iommu/amd: Suppress IO_PAGE_FAULTs in kdump kernel)
  	flags |= domain->id;
  
  	amd_iommu_dev_table[devid].data[1]  = flags;
diff --cc drivers/iommu/amd_iommu_types.h
index e448daa671af,294a409e283b..000000000000
--- a/drivers/iommu/amd_iommu_types.h
+++ b/drivers/iommu/amd_iommu_types.h
@@@ -294,12 -321,12 +294,18 @@@
  #define IOMMU_PTE_IR (1ULL << 61)
  #define IOMMU_PTE_IW (1ULL << 62)
  
++<<<<<<< HEAD
++=======
+ #define DTE_FLAG_IOTLB	(1ULL << 32)
+ #define DTE_FLAG_SA	(1ULL << 34)
+ #define DTE_FLAG_GV	(1ULL << 55)
++>>>>>>> 54bd63570484 (iommu/amd: Suppress IO_PAGE_FAULTs in kdump kernel)
  #define DTE_FLAG_MASK	(0x3ffULL << 32)
 +#define DTE_FLAG_IOTLB	(0x01UL << 32)
 +#define DTE_FLAG_GV	(0x01ULL << 55)
  #define DTE_GLX_SHIFT	(56)
  #define DTE_GLX_MASK	(3)
 +#define DEV_DOMID_MASK	0xffffULL
  
  #define DTE_GCR3_VAL_A(x)	(((x) >> 12) & 0x00007ULL)
  #define DTE_GCR3_VAL_B(x)	(((x) >> 15) & 0x0ffffULL)
* Unmerged path drivers/iommu/amd_iommu.c
diff --git a/drivers/iommu/amd_iommu_init.c b/drivers/iommu/amd_iommu_init.c
index 9cab1b2422c6..7fb125da495f 100644
--- a/drivers/iommu/amd_iommu_init.c
+++ b/drivers/iommu/amd_iommu_init.c
@@ -29,6 +29,7 @@
 #include <linux/export.h>
 #include <linux/iommu.h>
 #include <linux/kmemleak.h>
+#include <linux/crash_dump.h>
 #include <asm/pci-direct.h>
 #include <asm/iommu.h>
 #include <asm/gart.h>
@@ -1772,6 +1773,14 @@ static void init_device_table_dma(void)
 	for (devid = 0; devid <= amd_iommu_last_bdf; ++devid) {
 		set_dev_entry_bit(devid, DEV_ENTRY_VALID);
 		set_dev_entry_bit(devid, DEV_ENTRY_TRANSLATION);
+		/*
+		 * In kdump kernels in-flight DMA from the old kernel might
+		 * cause IO_PAGE_FAULTs. There are no reports that a kdump
+		 * actually failed because of that, so just disable fault
+		 * reporting in the hardware to get rid of the messages
+		 */
+		if (is_kdump_kernel())
+			set_dev_entry_bit(devid, DEV_ENTRY_NO_PAGE_FAULT);
 	}
 }
 
* Unmerged path drivers/iommu/amd_iommu_types.h
