ACPI / scan: Enable GPEs before scanning the namespace

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit eb7f43c4adb4a789f99f53916182c3401b4e33c7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/eb7f43c4.failed

On some systems the platform firmware expects GPEs to be enabled
before the enumeration of devices and if that expectation is not
met, the systems in question may not boot in some situations.

For this reason, change the initialization ordering of the ACPI
subsystem to make it enable GPEs before scanning the namespace
for the first time in order to enumerate devices.

	Reported-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Suggested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Acked-by: Lv Zheng <lv.zheng@intel.com>
	Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
(cherry picked from commit eb7f43c4adb4a789f99f53916182c3401b4e33c7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/scan.c
diff --cc drivers/acpi/scan.c
index f22337d9eb20,b7bdf9d0f5c0..000000000000
--- a/drivers/acpi/scan.c
+++ b/drivers/acpi/scan.c
@@@ -1998,7 -2039,28 +1998,10 @@@ int __init acpi_scan_init(void
  	acpi_memory_hotplug_init();
  	acpi_pnp_init();
  	acpi_int340x_thermal_init();
 -	acpi_amba_init();
 -	acpi_watchdog_init();
 -
 -	acpi_scan_add_handler(&generic_device_handler);
 -
 -	/*
 -	 * If there is STAO table, check whether it needs to ignore the UART
 -	 * device in SPCR table.
 -	 */
 -	status = acpi_get_table(ACPI_SIG_STAO, 0,
 -				(struct acpi_table_header **)&stao_ptr);
 -	if (ACPI_SUCCESS(status)) {
 -		if (stao_ptr->header.length > sizeof(struct acpi_table_stao))
 -			printk(KERN_INFO PREFIX "STAO Name List not yet supported.");
 -
 -		if (stao_ptr->ignore_uart)
 -			acpi_get_spcr_uart_addr();
 -	}
  
+ 	acpi_gpe_apply_masked_gpes();
+ 	acpi_update_all_gpes();
+ 
  	mutex_lock(&acpi_scan_lock);
  	/*
  	 * Enumerate devices in the ACPI namespace.
@@@ -2011,15 -2073,19 +2014,19 @@@
  	if (result)
  		goto out;
  
 -	/* Fixed feature devices do not exist on HW-reduced platform */
 -	if (!acpi_gbl_reduced_hardware) {
 -		result = acpi_bus_scan_fixed();
 -		if (result) {
 -			acpi_detach_data(acpi_root->handle,
 -					 acpi_scan_drop_device);
 -			acpi_device_del(acpi_root);
 -			put_device(&acpi_root->dev);
 -			goto out;
 -		}
 +	result = acpi_bus_scan_fixed();
 +	if (result) {
 +		acpi_detach_data(acpi_root->handle, acpi_scan_drop_device);
 +		acpi_device_del(acpi_root);
 +		put_device(&acpi_root->dev);
 +		goto out;
  	}
  
++<<<<<<< HEAD
 +	acpi_update_all_gpes();
++=======
+ 	acpi_scan_initialized = true;
++>>>>>>> eb7f43c4adb4 (ACPI / scan: Enable GPEs before scanning the namespace)
  
   out:
  	mutex_unlock(&acpi_scan_lock);
* Unmerged path drivers/acpi/scan.c
