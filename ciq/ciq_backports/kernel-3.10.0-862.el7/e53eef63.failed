net/mlx5: Align to match opening parenthesis

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Align to match opening parenthesis (Kamal Heib) [1456694]
Rebuild_FUZZ: 95.24%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit e53eef635073e3c945d44009679d0a83f1b31083
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e53eef63.failed

Fixed checkpatch complaints of the form:

 CHECK: Alignment should match open parenthesis

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit e53eef635073e3c945d44009679d0a83f1b31083)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 950c1d21ad52,9dad80f32314..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -3299,6 -3827,68 +3300,71 @@@ u32 mlx5e_choose_lro_timeout(struct mlx
  	return MLX5_CAP_ETH(mdev, lro_timer_supported_periods[i]);
  }
  
++<<<<<<< HEAD
++=======
+ void mlx5e_build_nic_params(struct mlx5_core_dev *mdev,
+ 			    struct mlx5e_params *params,
+ 			    u16 max_channels)
+ {
+ 	u8 cq_period_mode = 0;
+ 	u32 link_speed = 0;
+ 	u32 pci_bw = 0;
+ 
+ 	params->num_channels = max_channels;
+ 	params->num_tc       = 1;
+ 
+ 	mlx5e_get_max_linkspeed(mdev, &link_speed);
+ 	mlx5e_get_pci_bw(mdev, &pci_bw);
+ 	mlx5_core_dbg(mdev, "Max link speed = %d, PCI BW = %d\n",
+ 		      link_speed, pci_bw);
+ 
+ 	/* SQ */
+ 	params->log_sq_size = is_kdump_kernel() ?
+ 		MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE :
+ 		MLX5E_PARAMS_DEFAULT_LOG_SQ_SIZE;
+ 
+ 	/* set CQE compression */
+ 	params->rx_cqe_compress_def = false;
+ 	if (MLX5_CAP_GEN(mdev, cqe_compression) &&
+ 	    MLX5_CAP_GEN(mdev, vport_group_manager))
+ 		params->rx_cqe_compress_def = cqe_compress_heuristic(link_speed, pci_bw);
+ 
+ 	MLX5E_SET_PFLAG(params, MLX5E_PFLAG_RX_CQE_COMPRESS, params->rx_cqe_compress_def);
+ 
+ 	/* RQ */
+ 	mlx5e_set_rq_params(mdev, params);
+ 
+ 	/* HW LRO */
+ 	/* TODO: && MLX5_CAP_ETH(mdev, lro_cap) */
+ 	if (params->rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ)
+ 		params->lro_en = hw_lro_heuristic(link_speed, pci_bw);
+ 	params->lro_timeout = mlx5e_choose_lro_timeout(mdev, MLX5E_DEFAULT_LRO_TIMEOUT);
+ 
+ 	/* CQ moderation params */
+ 	cq_period_mode = MLX5_CAP_GEN(mdev, cq_period_start_from_cqe) ?
+ 			MLX5_CQ_PERIOD_MODE_START_FROM_CQE :
+ 			MLX5_CQ_PERIOD_MODE_START_FROM_EQE;
+ 	params->rx_am_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
+ 	mlx5e_set_rx_cq_mode_params(params, cq_period_mode);
+ 
+ 	params->tx_cq_moderation.usec = MLX5E_PARAMS_DEFAULT_TX_CQ_MODERATION_USEC;
+ 	params->tx_cq_moderation.pkts = MLX5E_PARAMS_DEFAULT_TX_CQ_MODERATION_PKTS;
+ 
+ 	/* TX inline */
+ 	params->tx_max_inline = mlx5e_get_max_inline_cap(mdev);
+ 	mlx5_query_min_inline(mdev, &params->tx_min_inline_mode);
+ 	if (params->tx_min_inline_mode == MLX5_INLINE_MODE_NONE &&
+ 	    !MLX5_CAP_ETH(mdev, wqe_vlan_insert))
+ 		params->tx_min_inline_mode = MLX5_INLINE_MODE_L2;
+ 
+ 	/* RSS */
+ 	params->rss_hfunc = ETH_RSS_HASH_XOR;
+ 	netdev_rss_key_fill(params->toeplitz_hash_key, sizeof(params->toeplitz_hash_key));
+ 	mlx5e_build_default_indir_rqt(mdev, params->indirection_rqt,
+ 				      MLX5E_INDIR_RQT_SIZE, max_channels);
+ }
+ 
++>>>>>>> e53eef635073 (net/mlx5: Align to match opening parenthesis)
  static void mlx5e_build_nic_netdev_priv(struct mlx5_core_dev *mdev,
  					struct net_device *netdev,
  					const struct mlx5e_profile *profile,
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
index 3442081306c0..07f2143677a4 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/cmd.c
@@ -1154,7 +1154,7 @@ err_alloc:
 }
 
 static void mlx5_free_cmd_msg(struct mlx5_core_dev *dev,
-				  struct mlx5_cmd_msg *msg)
+			      struct mlx5_cmd_msg *msg)
 {
 	struct mlx5_cmd_mailbox *head = msg->next;
 	struct mlx5_cmd_mailbox *next;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 7ae663b670c1..cf3d0acc0adc 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@ -691,7 +691,7 @@ mlx5_eswitch_create_vport_rx_rule(struct mlx5_eswitch *esw, int vport, u32 tirn)
 
 	flow_act.action = MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
 	flow_rule = mlx5_add_flow_rules(esw->offloads.ft_offloads, spec,
-				       &flow_act, &dest, 1);
+					&flow_act, &dest, 1);
 	if (IS_ERR(flow_rule)) {
 		esw_warn(esw->dev, "fs offloads: Failed to add vport rx rule err %ld\n", PTR_ERR(flow_rule));
 		goto out;
