crypto: scatterwalk - Add scatterwalk_ffwd helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [crypto] scatterwalk - Add scatterwalk_ffwd helper (Arjun Vynipadath) [1458315]
Rebuild_FUZZ: 91.11%
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit fc42bcba97bae738f905b83741134a63af7e6c02
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/fc42bcba.failed

This patch adds the scatterwalk_ffwd helper which can create an
SG list that starts in the middle of an existing SG list.  The
new list may either be part of the existing list or be a chain
that latches onto part of the existing list.

	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit fc42bcba97bae738f905b83741134a63af7e6c02)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/scatterwalk.c
#	include/crypto/scatterwalk.h
diff --cc crypto/scatterwalk.c
index 5462fc3ee266,db920b59a6c3..000000000000
--- a/crypto/scatterwalk.c
+++ b/crypto/scatterwalk.c
@@@ -121,3 -124,47 +121,50 @@@ void scatterwalk_map_and_copy(void *buf
  	scatterwalk_done(&walk, out, 0);
  }
  EXPORT_SYMBOL_GPL(scatterwalk_map_and_copy);
++<<<<<<< HEAD
++=======
+ 
+ int scatterwalk_bytes_sglen(struct scatterlist *sg, int num_bytes)
+ {
+ 	int offset = 0, n = 0;
+ 
+ 	/* num_bytes is too small */
+ 	if (num_bytes < sg->length)
+ 		return -1;
+ 
+ 	do {
+ 		offset += sg->length;
+ 		n++;
+ 		sg = sg_next(sg);
+ 
+ 		/* num_bytes is too large */
+ 		if (unlikely(!sg && (num_bytes < offset)))
+ 			return -1;
+ 	} while (sg && (num_bytes > offset));
+ 
+ 	return n;
+ }
+ EXPORT_SYMBOL_GPL(scatterwalk_bytes_sglen);
+ 
+ struct scatterlist *scatterwalk_ffwd(struct scatterlist dst[2],
+ 				     struct scatterlist *src,
+ 				     unsigned int len)
+ {
+ 	for (;;) {
+ 		if (!len)
+ 			return src;
+ 
+ 		if (src->length > len)
+ 			break;
+ 
+ 		len -= src->length;
+ 		src = sg_next(src);
+ 	}
+ 
+ 	sg_set_page(dst, sg_page(src), src->length - len, src->offset + len);
+ 	scatterwalk_crypto_chain(dst, sg_next(src), 0, 2);
+ 
+ 	return dst;
+ }
+ EXPORT_SYMBOL_GPL(scatterwalk_ffwd);
++>>>>>>> fc42bcba97ba (crypto: scatterwalk - Add scatterwalk_ffwd helper)
diff --cc include/crypto/scatterwalk.h
index 2cddd2b92c19,96670e7e7c14..000000000000
--- a/include/crypto/scatterwalk.h
+++ b/include/crypto/scatterwalk.h
@@@ -114,4 -100,10 +114,13 @@@ void scatterwalk_done(struct scatter_wa
  void scatterwalk_map_and_copy(void *buf, struct scatterlist *sg,
  			      unsigned int start, unsigned int nbytes, int out);
  
++<<<<<<< HEAD
++=======
+ int scatterwalk_bytes_sglen(struct scatterlist *sg, int num_bytes);
+ 
+ struct scatterlist *scatterwalk_ffwd(struct scatterlist dst[2],
+ 				     struct scatterlist *src,
+ 				     unsigned int len);
+ 
++>>>>>>> fc42bcba97ba (crypto: scatterwalk - Add scatterwalk_ffwd helper)
  #endif  /* _CRYPTO_SCATTERWALK_H */
* Unmerged path crypto/scatterwalk.c
* Unmerged path include/crypto/scatterwalk.h
