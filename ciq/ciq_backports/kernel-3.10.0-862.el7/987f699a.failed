nvme: move ->retries setup to nvme_setup_cmd

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] move ->retries setup to nvme_setup_cmd (David Milburn) [1457880 1456486 1454365]
Rebuild_FUZZ: 92.68%
commit-author Christoph Hellwig <hch@lst.de>
commit 987f699a8f6c9a724e970c1bb4cde2e2c6a52010
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/987f699a.failed

->retries is counting the number of times a command is resubmitted, and
be cleared on the first time we see the command.  We currently don't do
that for non-PCIe command, which is easily fixed by moving the setup
to common code.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 987f699a8f6c9a724e970c1bb4cde2e2c6a52010)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/core.c
index bd223cb63595,0437f44d00f9..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -311,17 -350,32 +311,28 @@@ int nvme_setup_cmd(struct nvme_ns *ns, 
  {
  	int ret = BLK_MQ_RQ_QUEUE_OK;
  
++<<<<<<< HEAD
 +	if (req->cmd_type == REQ_TYPE_DRV_PRIV)
++=======
+ 	if (!(req->rq_flags & RQF_DONTPREP)) {
+ 		req->retries = 0;
+ 		req->rq_flags |= RQF_DONTPREP;
+ 	}
+ 
+ 	switch (req_op(req)) {
+ 	case REQ_OP_DRV_IN:
+ 	case REQ_OP_DRV_OUT:
++>>>>>>> 987f699a8f6c (nvme: move ->retries setup to nvme_setup_cmd)
  		memcpy(cmd, nvme_req(req)->cmd, sizeof(*cmd));
 -		break;
 -	case REQ_OP_FLUSH:
 +	else if (req->cmd_flags & REQ_FLUSH)
  		nvme_setup_flush(ns, cmd);
 -		break;
 -	case REQ_OP_DISCARD:
 +	else if (req->cmd_flags & REQ_DISCARD)
  		ret = nvme_setup_discard(ns, req, cmd);
 -		break;
 -	case REQ_OP_READ:
 -	case REQ_OP_WRITE:
 +	else
  		nvme_setup_rw(ns, req, cmd);
 -		break;
 -	default:
 -		WARN_ON_ONCE(1);
 -		return BLK_MQ_RQ_QUEUE_ERROR;
 -	}
  
  	cmd->common.command_id = req->tag;
 +
  	return ret;
  }
  EXPORT_SYMBOL_GPL(nvme_setup_cmd);
diff --cc drivers/nvme/host/pci.c
index 20d5219150f0,3818ab15a26e..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -324,10 -326,6 +324,13 @@@ static int nvme_init_iod(struct reques
  	iod->nents = 0;
  	iod->length = size;
  
++<<<<<<< HEAD
 +	if (!(rq->cmd_flags & REQ_DONTPREP)) {
 +		rq->retries = 0;
 +		rq->cmd_flags |= REQ_DONTPREP;
 +	}
++=======
++>>>>>>> 987f699a8f6c (nvme: move ->retries setup to nvme_setup_cmd)
  	return BLK_MQ_RQ_QUEUE_OK;
  }
  
* Unmerged path drivers/nvme/host/core.c
* Unmerged path drivers/nvme/host/pci.c
