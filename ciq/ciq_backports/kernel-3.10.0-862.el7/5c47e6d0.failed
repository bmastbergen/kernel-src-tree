fold try_prune_one_dentry()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 5c47e6d0ad608987b91affbcf7d1fc12dfbe8fb4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5c47e6d0.failed

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 5c47e6d0ad608987b91affbcf7d1fc12dfbe8fb4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dcache.c
diff --cc fs/dcache.c
index e518a196fb4f,a5540d491954..000000000000
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@@ -698,46 -787,9 +698,49 @@@ restart
  }
  EXPORT_SYMBOL(d_prune_aliases);
  
++<<<<<<< HEAD
 +/*
 + * Try to throw away a dentry - free the inode, dput the parent.
 + * Requires dentry->d_lock is held, and dentry->d_count == 0.
 + * Releases dentry->d_lock.
 + *
 + * This may fail if locks cannot be acquired no problem, just try again.
 + */
 +static void try_prune_one_dentry(struct dentry *dentry)
 +	__releases(dentry->d_lock)
 +{
 +	struct dentry *parent;
 +
 +	parent = dentry_kill(dentry);
 +	/*
 +	 * If dentry_kill returns NULL, we have nothing more to do.
 +	 * if it returns the same dentry, trylocks failed. In either
 +	 * case, just loop again.
 +	 *
 +	 * Otherwise, we need to prune ancestors too. This is necessary
 +	 * to prevent quadratic behavior of shrink_dcache_parent(), but
 +	 * is also expected to be beneficial in reducing dentry cache
 +	 * fragmentation.
 +	 */
 +	if (!parent)
 +		return;
 +	if (parent == dentry)
 +		return;
 +
 +	/* Prune ancestors. */
 +	dentry = parent;
 +	while (dentry) {
 +		if (lockref_put_or_lock(&dentry->d_lockref))
 +			return;
 +		dentry = dentry_kill(dentry);
 +	}
 +}
 +
++=======
++>>>>>>> 5c47e6d0ad60 (fold try_prune_one_dentry())
  static void shrink_dentry_list(struct list_head *list)
  {
- 	struct dentry *dentry;
+ 	struct dentry *dentry, *parent;
  
  	rcu_read_lock();
  	for (;;) {
@@@ -760,11 -823,36 +763,42 @@@
  			spin_unlock(&dentry->d_lock);
  			continue;
  		}
 +
  		rcu_read_unlock();
  
++<<<<<<< HEAD
 +		try_prune_one_dentry(dentry);
 +
++=======
+ 		parent = dentry_kill(dentry, 0);
+ 		/*
+ 		 * If dentry_kill returns NULL, we have nothing more to do.
+ 		 */
+ 		if (!parent) {
+ 			rcu_read_lock();
+ 			continue;
+ 		}
+ 		if (unlikely(parent == dentry)) {
+ 			/*
+ 			 * trylocks have failed and d_lock has been held the
+ 			 * whole time, so it could not have been added to any
+ 			 * other lists. Just add it back to the shrink list.
+ 			 */
+ 			rcu_read_lock();
+ 			d_shrink_add(dentry, list);
+ 			spin_unlock(&dentry->d_lock);
+ 			continue;
+ 		}
+ 		/*
+ 		 * We need to prune ancestors too. This is necessary to prevent
+ 		 * quadratic behavior of shrink_dcache_parent(), but is also
+ 		 * expected to be beneficial in reducing dentry cache
+ 		 * fragmentation.
+ 		 */
+ 		dentry = parent;
+ 		while (dentry && !lockref_put_or_lock(&dentry->d_lockref))
+ 			dentry = dentry_kill(dentry, 1);
++>>>>>>> 5c47e6d0ad60 (fold try_prune_one_dentry())
  		rcu_read_lock();
  	}
  	rcu_read_unlock();
* Unmerged path fs/dcache.c
