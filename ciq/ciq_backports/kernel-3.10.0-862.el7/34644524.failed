lib: devres: add a helper function for ioremap_wc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [lib] devres: add a helper function for ioremap_wc (Ivan Vecera) [1482223]
Rebuild_FUZZ: 94.62%
commit-author Abhilash Kesavan <a.kesavan@samsung.com>
commit 34644524bce91883d5051a7eaf3ec5464ed149bf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/34644524.failed

Implement a resource managed writecombine ioremap function.

	Signed-off-by: Abhilash Kesavan <a.kesavan@samsung.com>
	Acked-by: Catalin Marinas <catalin.marinas@arm.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 34644524bce91883d5051a7eaf3ec5464ed149bf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/driver-model/devres.txt
#	include/linux/io.h
diff --cc Documentation/driver-model/devres.txt
index c37f236ed714,7fe7fd263aba..000000000000
--- a/Documentation/driver-model/devres.txt
+++ b/Documentation/driver-model/devres.txt
@@@ -246,22 -271,42 +246,38 @@@ IO regio
    devm_request_region()
    devm_request_resource()
  
++<<<<<<< HEAD
++=======
+ IOMAP
+   devm_ioport_map()
+   devm_ioport_unmap()
+   devm_ioremap()
+   devm_ioremap_nocache()
+   devm_ioremap_wc()
+   devm_ioremap_resource() : checks resource, requests memory region, ioremaps
+   devm_iounmap()
+   pcim_iomap()
+   pcim_iomap_regions()	: do request_region() and iomap() on multiple BARs
+   pcim_iomap_table()	: array of mapped addresses indexed by BAR
+   pcim_iounmap()
+ 
++>>>>>>> 34644524bce9 (lib: devres: add a helper function for ioremap_wc)
  IRQ
 -  devm_free_irq()
 -  devm_request_any_context_irq()
    devm_request_irq()
 -  devm_request_threaded_irq()
 +  devm_free_irq()
  
 -MDIO
 -  devm_mdiobus_alloc()
 -  devm_mdiobus_alloc_size()
 -  devm_mdiobus_free()
 +LED
 +  devm_led_classdev_register()
 +  devm_led_classdev_unregister()
  
 -MEM
 -  devm_free_pages()
 -  devm_get_free_pages()
 -  devm_kasprintf()
 -  devm_kcalloc()
 -  devm_kfree()
 -  devm_kmalloc()
 -  devm_kmalloc_array()
 -  devm_kmemdup()
 -  devm_kstrdup()
 -  devm_kvasprintf()
 -  devm_kzalloc()
 +DMA
 +  dmam_alloc_coherent()
 +  dmam_free_coherent()
 +  dmam_alloc_noncoherent()
 +  dmam_free_noncoherent()
 +  dmam_declare_coherent_memory()
 +  dmam_pool_create()
 +  dmam_pool_destroy()
  
  PCI
    pcim_enable_device()	: after success, all PCI ops become managed
diff --cc include/linux/io.h
index 5b05b6bf2378,42b33f03d1df..000000000000
--- a/include/linux/io.h
+++ b/include/linux/io.h
@@@ -69,10 -58,14 +69,16 @@@ static inline void devm_ioport_unmap(st
  }
  #endif
  
 -#define IOMEM_ERR_PTR(err) (__force void __iomem *)ERR_PTR(err)
 -
  void __iomem *devm_ioremap(struct device *dev, resource_size_t offset,
 -			   resource_size_t size);
 +			    unsigned long size);
  void __iomem *devm_ioremap_nocache(struct device *dev, resource_size_t offset,
++<<<<<<< HEAD
 +				    unsigned long size);
++=======
+ 				   resource_size_t size);
+ void __iomem *devm_ioremap_wc(struct device *dev, resource_size_t offset,
+ 				   resource_size_t size);
++>>>>>>> 34644524bce9 (lib: devres: add a helper function for ioremap_wc)
  void devm_iounmap(struct device *dev, void __iomem *addr);
  int check_signature(const volatile void __iomem *io_addr,
  			const unsigned char *signature, int length);
* Unmerged path Documentation/driver-model/devres.txt
* Unmerged path include/linux/io.h
diff --git a/lib/devres.c b/lib/devres.c
index 823533138fa0..bdb244a70163 100644
--- a/lib/devres.c
+++ b/lib/devres.c
@@ -71,6 +71,34 @@ void __iomem *devm_ioremap_nocache(struct device *dev, resource_size_t offset,
 }
 EXPORT_SYMBOL(devm_ioremap_nocache);
 
+/**
+ * devm_ioremap_wc - Managed ioremap_wc()
+ * @dev: Generic device to remap IO address for
+ * @offset: BUS offset to map
+ * @size: Size of map
+ *
+ * Managed ioremap_wc().  Map is automatically unmapped on driver detach.
+ */
+void __iomem *devm_ioremap_wc(struct device *dev, resource_size_t offset,
+			      resource_size_t size)
+{
+	void __iomem **ptr, *addr;
+
+	ptr = devres_alloc(devm_ioremap_release, sizeof(*ptr), GFP_KERNEL);
+	if (!ptr)
+		return NULL;
+
+	addr = ioremap_wc(offset, size);
+	if (addr) {
+		*ptr = addr;
+		devres_add(dev, ptr);
+	} else
+		devres_free(ptr);
+
+	return addr;
+}
+EXPORT_SYMBOL(devm_ioremap_wc);
+
 /**
  * devm_iounmap - Managed iounmap()
  * @dev: Generic device to unmap for
