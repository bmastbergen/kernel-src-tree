openvswitch: Fix an error handling path in 'ovs_nla_init_match_and_action()'

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Christophe JAILLET <christophe.jaillet@wanadoo.fr>
commit 5829e62ac17a40ab08c1b905565604a4b5fa7af6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5829e62a.failed

All other error handling paths in this function go through the 'error'
label. This one should do the same.

Fixes: 9cc9a5cb176c ("datapath: Avoid using stack larger than 1024.")
	Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
	Acked-by: Pravin B Shelar <pshelar@ovn.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5829e62ac17a40ab08c1b905565604a4b5fa7af6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/datapath.c
diff --cc net/openvswitch/datapath.c
index 37f0ab304782,c3aec6227c91..000000000000
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@@ -1104,6 -1077,59 +1104,62 @@@ static struct sw_flow_actions *get_flow
  	return acts;
  }
  
++<<<<<<< HEAD
++=======
+ /* Factor out match-init and action-copy to avoid
+  * "Wframe-larger-than=1024" warning. Because mask is only
+  * used to get actions, we new a function to save some
+  * stack space.
+  *
+  * If there are not key and action attrs, we return 0
+  * directly. In the case, the caller will also not use the
+  * match as before. If there is action attr, we try to get
+  * actions and save them to *acts. Before returning from
+  * the function, we reset the match->mask pointer. Because
+  * we should not to return match object with dangling reference
+  * to mask.
+  * */
+ static int ovs_nla_init_match_and_action(struct net *net,
+ 					 struct sw_flow_match *match,
+ 					 struct sw_flow_key *key,
+ 					 struct nlattr **a,
+ 					 struct sw_flow_actions **acts,
+ 					 bool log)
+ {
+ 	struct sw_flow_mask mask;
+ 	int error = 0;
+ 
+ 	if (a[OVS_FLOW_ATTR_KEY]) {
+ 		ovs_match_init(match, key, true, &mask);
+ 		error = ovs_nla_get_match(net, match, a[OVS_FLOW_ATTR_KEY],
+ 					  a[OVS_FLOW_ATTR_MASK], log);
+ 		if (error)
+ 			goto error;
+ 	}
+ 
+ 	if (a[OVS_FLOW_ATTR_ACTIONS]) {
+ 		if (!a[OVS_FLOW_ATTR_KEY]) {
+ 			OVS_NLERR(log,
+ 				  "Flow key attribute not present in set flow.");
+ 			error = -EINVAL;
+ 			goto error;
+ 		}
+ 
+ 		*acts = get_flow_actions(net, a[OVS_FLOW_ATTR_ACTIONS], key,
+ 					 &mask, log);
+ 		if (IS_ERR(*acts)) {
+ 			error = PTR_ERR(*acts);
+ 			goto error;
+ 		}
+ 	}
+ 
+ 	/* On success, error is 0. */
+ error:
+ 	match->mask = NULL;
+ 	return error;
+ }
+ 
++>>>>>>> 5829e62ac17a (openvswitch: Fix an error handling path in 'ovs_nla_init_match_and_action()')
  static int ovs_flow_cmd_set(struct sk_buff *skb, struct genl_info *info)
  {
  	struct net *net = sock_net(skb->sk);
* Unmerged path net/openvswitch/datapath.c
