blk-mq: move hctx and ctx counters from sysfs to debugfs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit 4a46f05ebf9921dcba35770106e42574d323d6dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/4a46f05e.failed

These counters aren't as out-of-place in sysfs as the other stuff, but
debugfs is a slightly better home for them.

	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 4a46f05ebf9921dcba35770106e42574d323d6dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-debugfs.c
#	block/blk-mq-sysfs.c
diff --cc block/blk-mq-sysfs.c
index 08941faf0f9a,308b3f4fc310..000000000000
--- a/block/blk-mq-sysfs.c
+++ b/block/blk-mq-sysfs.c
@@@ -122,110 -122,18 +122,110 @@@ static ssize_t blk_mq_hw_sysfs_store(st
  	return res;
  }
  
++<<<<<<< HEAD
 +static ssize_t blk_mq_sysfs_dispatched_show(struct blk_mq_ctx *ctx, char *page)
 +{
 +	return sprintf(page, "%lu %lu\n", ctx->rq_dispatched[1],
 +				ctx->rq_dispatched[0]);
 +}
 +
 +static ssize_t blk_mq_sysfs_merged_show(struct blk_mq_ctx *ctx, char *page)
 +{
 +	return sprintf(page, "%lu\n", ctx->rq_merged);
 +}
 +
 +static ssize_t blk_mq_sysfs_completed_show(struct blk_mq_ctx *ctx, char *page)
 +{
 +	return sprintf(page, "%lu %lu\n", ctx->rq_completed[1],
 +				ctx->rq_completed[0]);
 +}
 +
 +static ssize_t sysfs_list_show(char *page, struct list_head *list, char *msg)
 +{
 +	struct request *rq;
 +	int len = snprintf(page, PAGE_SIZE - 1, "%s:\n", msg);
 +
 +	list_for_each_entry(rq, list, queuelist) {
 +		const int rq_len = 2 * sizeof(rq) + 2;
 +
 +		/* if the output will be truncated */
 +		if (PAGE_SIZE - 1 < len + rq_len) {
 +			/* backspacing if it can't hold '\t...\n' */
 +			if (PAGE_SIZE - 1 < len + 5)
 +				len -= rq_len;
 +			len += snprintf(page + len, PAGE_SIZE - 1 - len,
 +					"\t...\n");
 +			break;
 +		}
 +		len += snprintf(page + len, PAGE_SIZE - 1 - len,
 +				"\t%p\n", rq);
 +	}
 +
 +	return len;
 +}
 +
 +static ssize_t blk_mq_sysfs_rq_list_show(struct blk_mq_ctx *ctx, char *page)
 +{
 +	ssize_t ret;
 +
 +	spin_lock(&ctx->lock);
 +	ret = sysfs_list_show(page, &ctx->rq_list, "CTX pending");
 +	spin_unlock(&ctx->lock);
 +
 +	return ret;
 +}
 +
 +static ssize_t blk_mq_hw_sysfs_queued_show(struct blk_mq_hw_ctx *hctx,
 +					   char *page)
 +{
 +	return sprintf(page, "%lu\n", hctx->queued);
 +}
 +
 +static ssize_t blk_mq_hw_sysfs_run_show(struct blk_mq_hw_ctx *hctx, char *page)
 +{
 +	return sprintf(page, "%lu\n", hctx->run);
 +}
 +
 +static ssize_t blk_mq_hw_sysfs_dispatched_show(struct blk_mq_hw_ctx *hctx,
 +					       char *page)
++=======
+ static ssize_t blk_mq_hw_sysfs_nr_tags_show(struct blk_mq_hw_ctx *hctx,
+ 					    char *page)
++>>>>>>> 4a46f05ebf99 (blk-mq: move hctx and ctx counters from sysfs to debugfs)
  {
 -	return sprintf(page, "%u\n", hctx->tags->nr_tags);
 +	char *start_page = page;
 +	int i;
 +
 +	page += sprintf(page, "%8u\t%lu\n", 0U, hctx->dispatched[0]);
 +
 +	for (i = 1; i < BLK_MQ_MAX_DISPATCH_ORDER - 1; i++) {
 +		unsigned int d = 1U << (i - 1);
 +
 +		page += sprintf(page, "%8u\t%lu\n", d, hctx->dispatched[i]);
 +	}
 +
 +	page += sprintf(page, "%8u+\t%lu\n", 1U << (i - 1),
 +						hctx->dispatched[i]);
 +	return page - start_page;
  }
  
 -static ssize_t blk_mq_hw_sysfs_nr_reserved_tags_show(struct blk_mq_hw_ctx *hctx,
 -						     char *page)
 +static ssize_t blk_mq_hw_sysfs_rq_list_show(struct blk_mq_hw_ctx *hctx,
 +					    char *page)
  {
 -	return sprintf(page, "%u\n", hctx->tags->nr_reserved_tags);
 +	ssize_t ret;
 +
 +	spin_lock(&hctx->lock);
 +	ret = sysfs_list_show(page, &hctx->dispatch, "HCTX pending");
 +	spin_unlock(&hctx->lock);
 +
 +	return ret;
 +}
 +
 +static ssize_t blk_mq_hw_sysfs_tags_show(struct blk_mq_hw_ctx *hctx, char *page)
 +{
 +	return blk_mq_tag_sysfs_show(hctx->tags, page);
  }
  
- static ssize_t blk_mq_hw_sysfs_active_show(struct blk_mq_hw_ctx *hctx, char *page)
- {
- 	return sprintf(page, "%u\n", atomic_read(&hctx->nr_active));
- }
- 
  static ssize_t blk_mq_hw_sysfs_cpus_show(struct blk_mq_hw_ctx *hctx, char *page)
  {
  	unsigned int i, first = 1;
@@@ -244,68 -152,27 +244,87 @@@
  	return ret;
  }
  
++<<<<<<< HEAD
 +static struct blk_mq_ctx_sysfs_entry blk_mq_sysfs_dispatched = {
 +	.attr = {.name = "dispatched", .mode = S_IRUGO },
 +	.show = blk_mq_sysfs_dispatched_show,
 +};
 +static struct blk_mq_ctx_sysfs_entry blk_mq_sysfs_merged = {
 +	.attr = {.name = "merged", .mode = S_IRUGO },
 +	.show = blk_mq_sysfs_merged_show,
 +};
 +static struct blk_mq_ctx_sysfs_entry blk_mq_sysfs_completed = {
 +	.attr = {.name = "completed", .mode = S_IRUGO },
 +	.show = blk_mq_sysfs_completed_show,
 +};
 +static struct blk_mq_ctx_sysfs_entry blk_mq_sysfs_rq_list = {
 +	.attr = {.name = "rq_list", .mode = S_IRUGO },
 +	.show = blk_mq_sysfs_rq_list_show,
 +};
 +
 +static struct attribute *default_ctx_attrs[] = {
 +	&blk_mq_sysfs_dispatched.attr,
 +	&blk_mq_sysfs_merged.attr,
 +	&blk_mq_sysfs_completed.attr,
 +	&blk_mq_sysfs_rq_list.attr,
 +	NULL,
 +};
 +
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_queued = {
 +	.attr = {.name = "queued", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_queued_show,
 +};
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_run = {
 +	.attr = {.name = "run", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_run_show,
 +};
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_dispatched = {
 +	.attr = {.name = "dispatched", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_dispatched_show,
 +};
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_active = {
 +	.attr = {.name = "active", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_active_show,
 +};
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_pending = {
 +	.attr = {.name = "pending", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_rq_list_show,
 +};
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_tags = {
 +	.attr = {.name = "tags", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_tags_show,
 +};
++=======
+ static struct attribute *default_ctx_attrs[] = {
+ 	NULL,
+ };
+ 
+ static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_nr_tags = {
+ 	.attr = {.name = "nr_tags", .mode = S_IRUGO },
+ 	.show = blk_mq_hw_sysfs_nr_tags_show,
+ };
+ static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_nr_reserved_tags = {
+ 	.attr = {.name = "nr_reserved_tags", .mode = S_IRUGO },
+ 	.show = blk_mq_hw_sysfs_nr_reserved_tags_show,
+ };
++>>>>>>> 4a46f05ebf99 (blk-mq: move hctx and ctx counters from sysfs to debugfs)
  static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_cpus = {
  	.attr = {.name = "cpu_list", .mode = S_IRUGO },
  	.show = blk_mq_hw_sysfs_cpus_show,
  };
  
  static struct attribute *default_hw_ctx_attrs[] = {
++<<<<<<< HEAD
 +	&blk_mq_hw_sysfs_queued.attr,
 +	&blk_mq_hw_sysfs_run.attr,
 +	&blk_mq_hw_sysfs_dispatched.attr,
 +	&blk_mq_hw_sysfs_pending.attr,
 +	&blk_mq_hw_sysfs_tags.attr,
++=======
+ 	&blk_mq_hw_sysfs_nr_tags.attr,
+ 	&blk_mq_hw_sysfs_nr_reserved_tags.attr,
++>>>>>>> 4a46f05ebf99 (blk-mq: move hctx and ctx counters from sysfs to debugfs)
  	&blk_mq_hw_sysfs_cpus.attr,
- 	&blk_mq_hw_sysfs_active.attr,
  	NULL,
  };
  
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-sysfs.c
