x86/pci/dma: Fix gfp flags for coherent DMA memory allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] pci/dma: Fix gfp flags for coherent DMA memory allocation (Don Dutile) [1494648]
Rebuild_FUZZ: 96.61%
commit-author Junichi Nomura <j-nomura@ce.jp.nec.com>
commit 590f07874e8e3c83729b919312c65aea2533c8cf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/590f0787.failed

Commit 6894258eda2f reversed the order of gfp_flags adjustment in
dma_alloc_attrs() for x86 [arch/x86/kernel/pci-dma.c] As a result,
relevant flags set by dma_alloc_coherent_gfp_flags() are just
discarded and cause coherent DMA memory allocation failure on some
devices.

Fixes: 6894258eda2f ("dma-mapping: consolidate dma_{alloc,free}_{attrs,coherent}")
	Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
	Tested-by: Tony Luck <tony.luck@intel.com>
	Acked-by: Christoph Hellwig <hch@lst.de>
Link: http://lkml.kernel.org/r/20150914073834.GA13077@xzibit.linux.bs1.fc.nec.co.jp
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit 590f07874e8e3c83729b919312c65aea2533c8cf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/pci-dma.c
diff --cc arch/x86/kernel/pci-dma.c
index b09eae608519,1b55de1267cf..000000000000
--- a/arch/x86/kernel/pci-dma.c
+++ b/arch/x86/kernel/pci-dma.c
@@@ -133,50 -129,19 +133,55 @@@ void dma_generic_free_coherent(struct d
  		free_pages((unsigned long)vaddr, get_order(size));
  }
  
 -bool arch_dma_alloc_attrs(struct device **dev, gfp_t *gfp)
 +void *dma_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
 +		      gfp_t gfp, struct dma_attrs *attrs)
  {
++<<<<<<< HEAD
 +	struct dma_map_ops *ops = get_dma_ops(dev);
 +	void *memory;
++=======
+ 	*gfp &= ~(__GFP_DMA | __GFP_HIGHMEM | __GFP_DMA32);
+ 	*gfp = dma_alloc_coherent_gfp_flags(*dev, *gfp);
++>>>>>>> 590f07874e8e (x86/pci/dma: Fix gfp flags for coherent DMA memory allocation)
 +
 +	gfp &= ~(__GFP_DMA | __GFP_HIGHMEM | __GFP_DMA32);
 +
 +	if (dma_alloc_from_coherent(dev, size, dma_handle, &memory))
 +		return memory;
 +
 +	if (!dev)
 +		dev = &x86_dma_fallback_dev;
 +
 +	if (!is_device_dma_capable(dev))
 +		return NULL;
 +
 +	if (!ops->alloc)
 +		return NULL;
 +
 +	memory = ops->alloc(dev, size, dma_handle,
 +			    dma_alloc_coherent_gfp_flags(dev, gfp), attrs);
 +	debug_dma_alloc_coherent(dev, size, *dma_handle, memory);
 +
 +	return memory;
 +}
 +EXPORT_SYMBOL(dma_alloc_attrs);
 +
 +void dma_free_attrs(struct device *dev, size_t size,
 +		    void *vaddr, dma_addr_t bus,
 +		    struct dma_attrs *attrs)
 +{
 +	struct dma_map_ops *ops = get_dma_ops(dev);
 +
 +	WARN_ON(irqs_disabled());       /* for portability */
  
 -	if (!*dev)
 -		*dev = &x86_dma_fallback_dev;
 -	if (!is_device_dma_capable(*dev))
 -		return false;
 -	return true;
 +	if (dma_release_from_coherent(dev, get_order(size), vaddr))
 +		return;
  
 +	debug_dma_free_coherent(dev, size, vaddr, bus);
 +	if (ops->free)
 +		ops->free(dev, size, vaddr, bus, attrs);
  }
 -EXPORT_SYMBOL(arch_dma_alloc_attrs);
 +EXPORT_SYMBOL(dma_free_attrs);
  
  /*
   * See <Documentation/x86/x86_64/boot-options.txt> for the iommu kernel
* Unmerged path arch/x86/kernel/pci-dma.c
