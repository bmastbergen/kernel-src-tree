s390/crypto: simplify init / exit functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [s390] crypto: simplify init / exit functions (Hendrik Brueckner) [1380349]
Rebuild_FUZZ: 93.83%
commit-author Martin Schwidefsky <schwidefsky@de.ibm.com>
commit d863d5945f2be0abfcd9d36b1a7c605f3eaef517
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d863d594.failed

The aes and the des module register multiple crypto algorithms
dependent on the availability of specific CPACF instructions.
To simplify the deregistration with crypto_unregister_alg add
an array with pointers to the successfully registered algorithms
and use it for the error handling in the init function and in
the module exit function.

	Reviewed-by: Harald Freudenberger <freude@linux.vnet.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit d863d5945f2be0abfcd9d36b1a7c605f3eaef517)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/crypto/aes_s390.c
#	arch/s390/crypto/des_s390.c
diff --cc arch/s390/crypto/aes_s390.c
index 25567fe0d72c,be87575270ff..000000000000
--- a/arch/s390/crypto/aes_s390.c
+++ b/arch/s390/crypto/aes_s390.c
@@@ -913,76 -908,45 +930,56 @@@ static int __init aes_s390_init(void
  		pr_info("AES hardware acceleration is only available for"
  			" 128-bit keys\n");
  
- 	ret = crypto_register_alg(&aes_alg);
+ 	ret = aes_s390_register_alg(&aes_alg);
  	if (ret)
- 		goto aes_err;
+ 		goto out_err;
  
- 	ret = crypto_register_alg(&ecb_aes_alg);
+ 	ret = aes_s390_register_alg(&ecb_aes_alg);
  	if (ret)
- 		goto ecb_aes_err;
+ 		goto out_err;
  
- 	ret = crypto_register_alg(&cbc_aes_alg);
+ 	ret = aes_s390_register_alg(&cbc_aes_alg);
  	if (ret)
- 		goto cbc_aes_err;
+ 		goto out_err;
  
++<<<<<<< HEAD
 +	if (crypt_s390_func_available(KM_XTS_128_ENCRYPT,
 +			CRYPT_S390_MSA | CRYPT_S390_MSA4) &&
 +	    crypt_s390_func_available(KM_XTS_256_ENCRYPT,
 +			CRYPT_S390_MSA | CRYPT_S390_MSA4)) {
 +		ret = crypto_register_alg(&xts_aes_alg);
++=======
+ 	if (cpacf_query(CPACF_KM, CPACF_KM_XTS_128) &&
+ 	    cpacf_query(CPACF_KM, CPACF_KM_XTS_256)) {
+ 		ret = aes_s390_register_alg(&xts_aes_alg);
++>>>>>>> d863d5945f2b (s390/crypto: simplify init / exit functions)
  		if (ret)
- 			goto xts_aes_err;
- 		xts_aes_alg_reg = 1;
+ 			goto out_err;
  	}
  
 -	if (cpacf_query(CPACF_KMCTR, CPACF_KMCTR_AES_128) &&
 -	    cpacf_query(CPACF_KMCTR, CPACF_KMCTR_AES_192) &&
 -	    cpacf_query(CPACF_KMCTR, CPACF_KMCTR_AES_256)) {
 +	if (crypt_s390_func_available(KMCTR_AES_128_ENCRYPT,
 +				CRYPT_S390_MSA | CRYPT_S390_MSA4) &&
 +	    crypt_s390_func_available(KMCTR_AES_192_ENCRYPT,
 +				CRYPT_S390_MSA | CRYPT_S390_MSA4) &&
 +	    crypt_s390_func_available(KMCTR_AES_256_ENCRYPT,
 +				CRYPT_S390_MSA | CRYPT_S390_MSA4)) {
  		ctrblk = (u8 *) __get_free_page(GFP_KERNEL);
  		if (!ctrblk) {
  			ret = -ENOMEM;
- 			goto ctr_aes_err;
+ 			goto out_err;
  		}
- 		ret = crypto_register_alg(&ctr_aes_alg);
- 		if (ret) {
- 			free_page((unsigned long) ctrblk);
- 			goto ctr_aes_err;
- 		}
- 		ctr_aes_alg_reg = 1;
+ 		ret = aes_s390_register_alg(&ctr_aes_alg);
+ 		if (ret)
+ 			goto out_err;
  	}
  
- out:
+ 	return 0;
+ out_err:
+ 	aes_s390_fini();
  	return ret;
- 
- ctr_aes_err:
- 	crypto_unregister_alg(&xts_aes_alg);
- xts_aes_err:
- 	crypto_unregister_alg(&cbc_aes_alg);
- cbc_aes_err:
- 	crypto_unregister_alg(&ecb_aes_alg);
- ecb_aes_err:
- 	crypto_unregister_alg(&aes_alg);
- aes_err:
- 	goto out;
- }
- 
- static void __exit aes_s390_fini(void)
- {
- 	if (ctr_aes_alg_reg) {
- 		crypto_unregister_alg(&ctr_aes_alg);
- 		free_page((unsigned long) ctrblk);
- 	}
- 	if (xts_aes_alg_reg)
- 		crypto_unregister_alg(&xts_aes_alg);
- 	crypto_unregister_alg(&cbc_aes_alg);
- 	crypto_unregister_alg(&ecb_aes_alg);
- 	crypto_unregister_alg(&aes_alg);
  }
  
 -module_cpu_feature_match(MSA, aes_s390_init);
 +module_init(aes_s390_init);
  module_exit(aes_s390_fini);
  
  MODULE_ALIAS_CRYPTO("aes-all");
diff --cc arch/s390/crypto/des_s390.c
index a89feffb22b5,b77a546f1e76..000000000000
--- a/arch/s390/crypto/des_s390.c
+++ b/arch/s390/crypto/des_s390.c
@@@ -539,84 -554,51 +560,64 @@@ static int __init des_s390_init(void
  {
  	int ret;
  
 -	if (!cpacf_query(CPACF_KM, CPACF_KM_DEA) ||
 -	    !cpacf_query(CPACF_KM, CPACF_KM_TDEA_192))
 +	if (!crypt_s390_func_available(KM_DEA_ENCRYPT, CRYPT_S390_MSA) ||
 +	    !crypt_s390_func_available(KM_TDEA_192_ENCRYPT, CRYPT_S390_MSA))
  		return -EOPNOTSUPP;
  
- 	ret = crypto_register_alg(&des_alg);
+ 	ret = des_s390_register_alg(&des_alg);
  	if (ret)
- 		goto des_err;
- 	ret = crypto_register_alg(&ecb_des_alg);
+ 		goto out_err;
+ 	ret = des_s390_register_alg(&ecb_des_alg);
  	if (ret)
- 		goto ecb_des_err;
- 	ret = crypto_register_alg(&cbc_des_alg);
+ 		goto out_err;
+ 	ret = des_s390_register_alg(&cbc_des_alg);
  	if (ret)
- 		goto cbc_des_err;
- 	ret = crypto_register_alg(&des3_alg);
+ 		goto out_err;
+ 	ret = des_s390_register_alg(&des3_alg);
  	if (ret)
- 		goto des3_err;
- 	ret = crypto_register_alg(&ecb_des3_alg);
+ 		goto out_err;
+ 	ret = des_s390_register_alg(&ecb_des3_alg);
  	if (ret)
- 		goto ecb_des3_err;
- 	ret = crypto_register_alg(&cbc_des3_alg);
+ 		goto out_err;
+ 	ret = des_s390_register_alg(&cbc_des3_alg);
  	if (ret)
- 		goto cbc_des3_err;
+ 		goto out_err;
  
++<<<<<<< HEAD
 +	if (crypt_s390_func_available(KMCTR_DEA_ENCRYPT,
 +			CRYPT_S390_MSA | CRYPT_S390_MSA4) &&
 +	    crypt_s390_func_available(KMCTR_TDEA_192_ENCRYPT,
 +			CRYPT_S390_MSA | CRYPT_S390_MSA4)) {
 +		ret = crypto_register_alg(&ctr_des_alg);
 +		if (ret)
 +			goto ctr_des_err;
 +		ret = crypto_register_alg(&ctr_des3_alg);
 +		if (ret)
 +			goto ctr_des3_err;
++=======
+ 	if (cpacf_query(CPACF_KMCTR, CPACF_KMCTR_DEA) &&
+ 	    cpacf_query(CPACF_KMCTR, CPACF_KMCTR_TDEA_192)) {
++>>>>>>> d863d5945f2b (s390/crypto: simplify init / exit functions)
  		ctrblk = (u8 *) __get_free_page(GFP_KERNEL);
  		if (!ctrblk) {
  			ret = -ENOMEM;
- 			goto ctr_mem_err;
+ 			goto out_err;
  		}
+ 		ret = des_s390_register_alg(&ctr_des_alg);
+ 		if (ret)
+ 			goto out_err;
+ 		ret = des_s390_register_alg(&ctr_des3_alg);
+ 		if (ret)
+ 			goto out_err;
  	}
- out:
- 	return ret;
- 
- ctr_mem_err:
- 	crypto_unregister_alg(&ctr_des3_alg);
- ctr_des3_err:
- 	crypto_unregister_alg(&ctr_des_alg);
- ctr_des_err:
- 	crypto_unregister_alg(&cbc_des3_alg);
- cbc_des3_err:
- 	crypto_unregister_alg(&ecb_des3_alg);
- ecb_des3_err:
- 	crypto_unregister_alg(&des3_alg);
- des3_err:
- 	crypto_unregister_alg(&cbc_des_alg);
- cbc_des_err:
- 	crypto_unregister_alg(&ecb_des_alg);
- ecb_des_err:
- 	crypto_unregister_alg(&des_alg);
- des_err:
- 	goto out;
- }
  
- static void __exit des_s390_exit(void)
- {
- 	if (ctrblk) {
- 		crypto_unregister_alg(&ctr_des_alg);
- 		crypto_unregister_alg(&ctr_des3_alg);
- 		free_page((unsigned long) ctrblk);
- 	}
- 	crypto_unregister_alg(&cbc_des3_alg);
- 	crypto_unregister_alg(&ecb_des3_alg);
- 	crypto_unregister_alg(&des3_alg);
- 	crypto_unregister_alg(&cbc_des_alg);
- 	crypto_unregister_alg(&ecb_des_alg);
- 	crypto_unregister_alg(&des_alg);
+ 	return 0;
+ out_err:
+ 	des_s390_exit();
+ 	return ret;
  }
  
 -module_cpu_feature_match(MSA, des_s390_init);
 +module_init(des_s390_init);
  module_exit(des_s390_exit);
  
  MODULE_ALIAS_CRYPTO("des");
* Unmerged path arch/s390/crypto/aes_s390.c
* Unmerged path arch/s390/crypto/des_s390.c
