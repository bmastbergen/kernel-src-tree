more bio_map_user_iov() leak fixes

jira LE-1907
cve CVE-2017-12190
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 2b04e8f6bbb196cab4b232af0f8d48ff2c7a8058
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2b04e8f6.failed

we need to take care of failure exit as well - pages already
in bio should be dropped by analogue of bio_unmap_pages(),
since their refcounts had been bumped only once per reference
in bio.

	Cc: stable@vger.kernel.org
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 2b04e8f6bbb196cab4b232af0f8d48ff2c7a8058)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/bio.c
diff --cc fs/bio.c
index bfa6cdce8092,9e9606d26cc6..000000000000
--- a/fs/bio.c
+++ b/fs/bio.c
@@@ -1296,10 -1329,13 +1296,16 @@@ static struct bio *__bio_map_user_iov(s
  	struct bio *bio;
  	int cur_page = 0;
  	int ret, offset;
++<<<<<<< HEAD:fs/bio.c
++=======
+ 	struct iov_iter i;
+ 	struct iovec iov;
+ 	struct bio_vec *bvec;
++>>>>>>> 2b04e8f6bbb1 (more bio_map_user_iov() leak fixes):block/bio.c
  
 -	iov_for_each(iov, i, *iter) {
 -		unsigned long uaddr = (unsigned long) iov.iov_base;
 -		unsigned long len = iov.iov_len;
 +	for (i = 0; i < iov_count; i++) {
 +		unsigned long uaddr = (unsigned long)iov[i].iov_base;
 +		unsigned long len = iov[i].iov_len;
  		unsigned long end = (uaddr + len + PAGE_SIZE - 1) >> PAGE_SHIFT;
  		unsigned long start = uaddr >> PAGE_SHIFT;
  
@@@ -1338,8 -1374,14 +1344,19 @@@
  		const int page_limit = cur_page + local_nr_pages;
  
  		ret = get_user_pages_fast(uaddr, local_nr_pages,
++<<<<<<< HEAD:fs/bio.c
 +				write_to_vm, &pages[cur_page]);
 +		if (ret < local_nr_pages) {
++=======
+ 				(iter->type & WRITE) != WRITE,
+ 				&pages[cur_page]);
+ 		if (unlikely(ret < local_nr_pages)) {
+ 			for (j = cur_page; j < page_limit; j++) {
+ 				if (!pages[j])
+ 					break;
+ 				put_page(pages[j]);
+ 			}
++>>>>>>> 2b04e8f6bbb1 (more bio_map_user_iov() leak fixes):block/bio.c
  			ret = -EFAULT;
  			goto out_unmap;
  		}
@@@ -1394,10 -1437,8 +1411,15 @@@
  	return bio;
  
   out_unmap:
++<<<<<<< HEAD:fs/bio.c
 +	for (i = 0; i < nr_pages; i++) {
 +		if(!pages[i])
 +			break;
 +		page_cache_release(pages[i]);
++=======
+ 	bio_for_each_segment_all(bvec, bio, j) {
+ 		put_page(bvec->bv_page);
++>>>>>>> 2b04e8f6bbb1 (more bio_map_user_iov() leak fixes):block/bio.c
  	}
   out:
  	kfree(pages);
* Unmerged path fs/bio.c
