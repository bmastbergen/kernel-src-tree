dev: add per net_device packet type chains

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Salam Noureddine <noureddine@arista.com>
commit 7866a621043fbaca3d7389e9b9f69dd1a2e5a855
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7866a621.failed

When many pf_packet listeners are created on a lot of interfaces the
current implementation using global packet type lists scales poorly.
This patch adds per net_device packet type lists to fix this problem.

The patch was originally written by Eric Biederman for linux-2.6.29.
Tested on linux-3.16.

	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
	Signed-off-by: Salam Noureddine <noureddine@arista.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7866a621043fbaca3d7389e9b9f69dd1a2e5a855)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/dev.c
diff --cc include/linux/netdevice.h
index 6be75b194bed,3d37c6eb1732..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1572,27 -1513,27 +1572,33 @@@ struct net_device 
  	struct list_head	dev_list;
  	struct list_head	napi_list;
  	struct list_head	unreg_list;
++<<<<<<< HEAD
 +	struct list_head	upper_dev_list; /* List of upper devices */
++=======
+ 	struct list_head	close_list;
+ 	struct list_head	ptype_all;
+ 	struct list_head	ptype_specific;
++>>>>>>> 7866a621043f (dev: add per net_device packet type chains)
  
 -	struct {
 -		struct list_head upper;
 -		struct list_head lower;
 -	} adj_list;
 -
 -	struct {
 -		struct list_head upper;
 -		struct list_head lower;
 -	} all_adj_list;
  
 +	/* currently active device features */
  	netdev_features_t	features;
 +	/* user-changeable features */
  	netdev_features_t	hw_features;
 +	/* user-requested features */
  	netdev_features_t	wanted_features;
 +	/* mask of features inheritable by VLAN devices */
  	netdev_features_t	vlan_features;
 +	/* mask of features inherited by encapsulating devices
 +	 * This field indicates what encapsulation offloads
 +	 * the hardware is capable of doing, and drivers will
 +	 * need to set them appropriately.
 +	 */
  	netdev_features_t	hw_enc_features;
 +	/* mask of fetures inheritable by MPLS */
  	netdev_features_t	mpls_features;
  
 +	/* Interface index. Unique device identifier	*/
  	int			ifindex;
  	int			iflink;
  
diff --cc net/core/dev.c
index 0c9178ce691d,1d564d68e31a..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -7692,8 -6793,10 +7726,15 @@@ struct net_device *alloc_netdev_mqs(in
  	INIT_LIST_HEAD(&dev->link_watch_list);
  	INIT_LIST_HEAD(&dev->adj_list.upper);
  	INIT_LIST_HEAD(&dev->adj_list.lower);
++<<<<<<< HEAD
 +	INIT_LIST_HEAD(&dev->upper_dev_list);
 +	INIT_LIST_HEAD(&dev->lower_dev_list);
++=======
+ 	INIT_LIST_HEAD(&dev->all_adj_list.upper);
+ 	INIT_LIST_HEAD(&dev->all_adj_list.lower);
+ 	INIT_LIST_HEAD(&dev->ptype_all);
+ 	INIT_LIST_HEAD(&dev->ptype_specific);
++>>>>>>> 7866a621043f (dev: add per net_device packet type chains)
  	dev->priv_flags = IFF_XMIT_DST_RELEASE | IFF_XMIT_DST_RELEASE_PERM;
  	setup(dev);
  
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/dev.c
