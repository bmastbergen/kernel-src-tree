sysfs: Add support for permanently empty directories to serve as mount points.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [fs] sysfs: Add support for permanently empty directories to serve as mount points ("Eric W. Biederman") [1487751]
Rebuild_FUZZ: 99.35%
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 87d2846fcf88113fae2341da1ca9a71f0d916f2c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/87d2846f.failed

Add two functions sysfs_create_mount_point and
sysfs_remove_mount_point that hang a permanently empty directory off
of a kobject or remove a permanently emptpy directory hanging from a
kobject.  Export these new functions so modular filesystems can use
them.

	Cc: stable@vger.kernel.org
	Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit 87d2846fcf88113fae2341da1ca9a71f0d916f2c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/dir.c
#	include/linux/sysfs.h
diff --cc fs/sysfs/dir.c
index 122bcaf6c216,94374e435025..000000000000
--- a/fs/sysfs/dir.c
+++ b/fs/sysfs/dir.c
@@@ -1069,9 -107,51 +1069,57 @@@ static loff_t sysfs_dir_llseek(struct f
  	return ret;
  }
  
++<<<<<<< HEAD
 +const struct file_operations sysfs_dir_operations = {
 +	.read		= generic_read_dir,
 +	.readdir	= sysfs_readdir,
 +	.release	= sysfs_dir_release,
 +	.llseek		= sysfs_dir_llseek,
 +};
++=======
+ int sysfs_move_dir_ns(struct kobject *kobj, struct kobject *new_parent_kobj,
+ 		      const void *new_ns)
+ {
+ 	struct kernfs_node *kn = kobj->sd;
+ 	struct kernfs_node *new_parent;
+ 
+ 	new_parent = new_parent_kobj && new_parent_kobj->sd ?
+ 		new_parent_kobj->sd : sysfs_root_kn;
+ 
+ 	return kernfs_rename_ns(kn, new_parent, kn->name, new_ns);
+ }
+ 
+ /**
+  * sysfs_create_mount_point - create an always empty directory
+  * @parent_kobj:  kobject that will contain this always empty directory
+  * @name: The name of the always empty directory to add
+  */
+ int sysfs_create_mount_point(struct kobject *parent_kobj, const char *name)
+ {
+ 	struct kernfs_node *kn, *parent = parent_kobj->sd;
+ 
+ 	kn = kernfs_create_empty_dir(parent, name);
+ 	if (IS_ERR(kn)) {
+ 		if (PTR_ERR(kn) == -EEXIST)
+ 			sysfs_warn_dup(parent, name);
+ 		return PTR_ERR(kn);
+ 	}
+ 
+ 	return 0;
+ }
+ EXPORT_SYMBOL_GPL(sysfs_create_mount_point);
+ 
+ /**
+  *	sysfs_remove_mount_point - remove an always empty directory.
+  *	@parent_kobj: kobject that will contain this always empty directory
+  *	@name: The name of the always empty directory to remove
+  *
+  */
+ void sysfs_remove_mount_point(struct kobject *parent_kobj, const char *name)
+ {
+ 	struct kernfs_node *parent = parent_kobj->sd;
+ 
+ 	kernfs_remove_by_name_ns(parent, name, NULL);
+ }
+ EXPORT_SYMBOL_GPL(sysfs_remove_mount_point);
++>>>>>>> 87d2846fcf88 (sysfs: Add support for permanently empty directories to serve as mount points.)
diff --cc include/linux/sysfs.h
index 85126b01a2f8,9f65758311a4..000000000000
--- a/include/linux/sysfs.h
+++ b/include/linux/sysfs.h
@@@ -173,24 -199,25 +173,38 @@@ struct bin_attribute bin_attr_##_name 
  struct sysfs_ops {
  	ssize_t	(*show)(struct kobject *, struct attribute *, char *);
  	ssize_t	(*store)(struct kobject *, struct attribute *, const char *, size_t);
 +	const void *(*namespace)(struct kobject *, const struct attribute *);
  };
  
 +struct sysfs_dirent;
 +
  #ifdef CONFIG_SYSFS
  
++<<<<<<< HEAD
 +int sysfs_schedule_callback(struct kobject *kobj, void (*func)(void *),
 +			    void *data, struct module *owner);
++=======
+ int __must_check sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
+ void sysfs_remove_dir(struct kobject *kobj);
+ int __must_check sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
+ 				     const void *new_ns);
+ int __must_check sysfs_move_dir_ns(struct kobject *kobj,
+ 				   struct kobject *new_parent_kobj,
+ 				   const void *new_ns);
+ int __must_check sysfs_create_mount_point(struct kobject *parent_kobj,
+ 					  const char *name);
+ void sysfs_remove_mount_point(struct kobject *parent_kobj,
+ 			      const char *name);
++>>>>>>> 87d2846fcf88 (sysfs: Add support for permanently empty directories to serve as mount points.)
 +
 +int __must_check sysfs_create_dir(struct kobject *kobj);
 +void sysfs_remove_dir(struct kobject *kobj);
 +int __must_check sysfs_rename_dir(struct kobject *kobj, const char *new_name);
 +int __must_check sysfs_move_dir(struct kobject *kobj,
 +				struct kobject *new_parent_kobj);
  
 -int __must_check sysfs_create_file_ns(struct kobject *kobj,
 -				      const struct attribute *attr,
 -				      const void *ns);
 +int __must_check sysfs_create_file(struct kobject *kobj,
 +				   const struct attribute *attr);
  int __must_check sysfs_create_files(struct kobject *kobj,
  				   const struct attribute **attr);
  int __must_check sysfs_chmod_file(struct kobject *kobj,
@@@ -280,8 -302,20 +294,25 @@@ static inline int sysfs_move_dir(struc
  	return 0;
  }
  
++<<<<<<< HEAD
 +static inline int sysfs_create_file(struct kobject *kobj,
 +				    const struct attribute *attr)
++=======
+ static inline int sysfs_create_mount_point(struct kobject *parent_kobj,
+ 					   const char *name)
+ {
+ 	return 0;
+ }
+ 
+ static inline void sysfs_remove_mount_point(struct kobject *parent_kobj,
+ 					    const char *name)
+ {
+ }
+ 
+ static inline int sysfs_create_file_ns(struct kobject *kobj,
+ 				       const struct attribute *attr,
+ 				       const void *ns)
++>>>>>>> 87d2846fcf88 (sysfs: Add support for permanently empty directories to serve as mount points.)
  {
  	return 0;
  }
* Unmerged path fs/sysfs/dir.c
* Unmerged path include/linux/sysfs.h
