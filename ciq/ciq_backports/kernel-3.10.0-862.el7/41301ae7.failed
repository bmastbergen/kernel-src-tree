vfs: Fix a regression in mounting proc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric W. Biederman <ebiederm@xmission.com>
commit 41301ae78a99ead04ea42672a1ab72c6f44cc81d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/41301ae7.failed

Gao feng <gaofeng@cn.fujitsu.com> reported that commit
e51db73532955dc5eaba4235e62b74b460709d5b
userns: Better restrictions on when proc and sysfs can be mounted
caused a regression on mounting a new instance of proc in a mount
namespace created with user namespace privileges, when binfmt_misc
is mounted on /proc/sys/fs/binfmt_misc.

This is an unintended regression caused by the absolutely bogus empty
directory check in fs_fully_visible.  The check fs_fully_visible replaced
didn't even bother to attempt to verify proc was fully visible and
hiding proc files with any kind of mount is rare.  So for now fix
the userspace regression by allowing directory with nlink == 1
as /proc/sys/fs/binfmt_misc has.

I will have a better patch but it is not stable material, or
last minute kernel material.  So it will have to wait.

	Cc: stable@vger.kernel.org
	Acked-by: Serge Hallyn <serge.hallyn@canonical.com>
	Acked-by: Gao feng <gaofeng@cn.fujitsu.com>
	Tested-by: Gao feng <gaofeng@cn.fujitsu.com>
	Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
(cherry picked from commit 41301ae78a99ead04ea42672a1ab72c6f44cc81d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/namespace.c
diff --cc fs/namespace.c
index d21098c35db1,be32ebccdeb1..000000000000
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@@ -3258,18 -2871,31 +3258,34 @@@ void update_mnt_policy(struct user_name
  
  	down_read(&namespace_sem);
  	list_for_each_entry(mnt, &ns->list, mnt_list) {
++<<<<<<< HEAD
 +		switch (mnt->mnt.mnt_sb->s_magic) {
 +		case SYSFS_MAGIC:
 +			userns->may_mount_sysfs = true;
 +			break;
 +		case PROC_SUPER_MAGIC:
 +			userns->may_mount_proc = true;
 +			break;
++=======
+ 		struct mount *child;
+ 		if (mnt->mnt.mnt_sb->s_type != type)
+ 			continue;
+ 
+ 		/* This mount is not fully visible if there are any child mounts
+ 		 * that cover anything except for empty directories.
+ 		 */
+ 		list_for_each_entry(child, &mnt->mnt_mounts, mnt_child) {
+ 			struct inode *inode = child->mnt_mountpoint->d_inode;
+ 			if (!S_ISDIR(inode->i_mode))
+ 				goto next;
+ 			if (inode->i_nlink > 2)
+ 				goto next;
++>>>>>>> 41301ae78a99 (vfs: Fix a regression in mounting proc)
  		}
 -		visible = true;
 -		goto found;
 -	next:	;
 +		if (userns->may_mount_sysfs && userns->may_mount_proc)
 +			break;
  	}
 -found:
  	up_read(&namespace_sem);
 -	return visible;
  }
  
  static void *mntns_get(struct task_struct *task)
* Unmerged path fs/namespace.c
