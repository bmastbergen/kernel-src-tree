scsi: qla2xxx: Use ql2xnvmeenable to enable Q-Pair for FC-NVMe

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Use ql2xnvmeenable to enable Q-Pair for FC-NVMe (Himanshu Madhani) [1316281]
Rebuild_FUZZ: 94.92%
commit-author Himanshu Madhani <himanshu.madhani@cavium.com>
commit c38d1baff87ffaa0c5966b57c5cfa906b58ce9e6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c38d1baf.failed

In some environments, user can choose to not enable SCSI-MQ but wants to
use FC-NVMe feature of the driver. Since driver relies on Q-Pairs to
allocate FC-NVMe resources, use existing module parameter to create
Q-Pairs when FC-NVMe is enabled.

	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Reviewed-by: Ewan D. Milne <emilne@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit c38d1baff87ffaa0c5966b57c5cfa906b58ce9e6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_os.c
diff --cc drivers/scsi/qla2xxx/qla_os.c
index c724f888aca6,17fc549aae96..000000000000
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@@ -347,9 -424,18 +347,24 @@@ static int qla2x00_alloc_queues(struct 
  		goto fail_rsp_map;
  	}
  
++<<<<<<< HEAD
 +	if (ql2xmqsupport && ha->max_qpairs) {
 +		ha->queue_pair_map = kcalloc(ha->max_qpairs,
 +			sizeof(struct qla_qpair *), GFP_KERNEL);
++=======
+ 	ha->base_qpair = kzalloc(sizeof(struct qla_qpair), GFP_KERNEL);
+ 	if (ha->base_qpair == NULL) {
+ 		ql_log(ql_log_warn, vha, 0x00e0,
+ 		    "Failed to allocate base queue pair memory.\n");
+ 		goto fail_base_qpair;
+ 	}
+ 
+ 	qla_init_base_qpair(vha, req, rsp);
+ 
+ 	if ((ql2xmqsupport || ql2xnvmeenable) && ha->max_qpairs) {
+ 		ha->queue_pair_map = kcalloc(ha->max_qpairs, sizeof(struct qla_qpair *),
+ 			GFP_KERNEL);
++>>>>>>> c38d1baff87f (scsi: qla2xxx: Use ql2xnvmeenable to enable Q-Pair for FC-NVMe)
  		if (!ha->queue_pair_map) {
  			ql_log(ql_log_fatal, vha, 0x0180,
  			    "Unable to allocate memory for queue pair ptrs.\n");
@@@ -1869,7 -1975,9 +1884,13 @@@ skip_pio
  
  	/* Determine queue resources */
  	ha->max_req_queues = ha->max_rsp_queues = 1;
++<<<<<<< HEAD
 +	if (!ql2xmqsupport || (!IS_QLA25XX(ha) && !IS_QLA81XX(ha)))
++=======
+ 	ha->msix_count = QLA_BASE_VECTORS;
+ 	if (!ql2xmqsupport || !ql2xnvmeenable ||
+ 	    (!IS_QLA25XX(ha) && !IS_QLA81XX(ha)))
++>>>>>>> c38d1baff87f (scsi: qla2xxx: Use ql2xnvmeenable to enable Q-Pair for FC-NVMe)
  		goto mqiobase_exit;
  
  	ha->mqiobase = ioremap(pci_resource_start(ha->pdev, 3),
diff --git a/drivers/scsi/qla2xxx/qla_init.c b/drivers/scsi/qla2xxx/qla_init.c
index 998b579c233c..66e9d1648849 100644
--- a/drivers/scsi/qla2xxx/qla_init.c
+++ b/drivers/scsi/qla2xxx/qla_init.c
@@ -6642,7 +6642,7 @@ struct qla_qpair *qla2xxx_create_qpair(struct scsi_qla_host *vha,
 		return NULL;
 	}
 
-	if (ql2xmqsupport) {
+	if (ql2xmqsupport || ql2xnvmeenable) {
 		qpair = kzalloc(sizeof(struct qla_qpair), GFP_KERNEL);
 		if (qpair == NULL) {
 			ql_log(ql_log_warn, vha, 0x0182,
diff --git a/drivers/scsi/qla2xxx/qla_isr.c b/drivers/scsi/qla2xxx/qla_isr.c
index 3d56972c1852..175139c615fd 100644
--- a/drivers/scsi/qla2xxx/qla_isr.c
+++ b/drivers/scsi/qla2xxx/qla_isr.c
@@ -3037,7 +3037,7 @@ qla24xx_enable_msix(struct qla_hw_data *ha, struct rsp_que *rsp)
 		    ha->msix_count, ret);
 		ha->msix_count = ret;
 		/* Recalculate queue values */
-		if (ha->mqiobase && ql2xmqsupport) {
+		if (ha->mqiobase && (ql2xmqsupport || ql2xnvmeenable)) {
 			ha->max_req_queues = ha->msix_count - 1;
 
 			/* ATIOQ needs 1 vector. That's 1 less QPair */
diff --git a/drivers/scsi/qla2xxx/qla_mid.c b/drivers/scsi/qla2xxx/qla_mid.c
index 51bc5f02bfb6..74c2fcbe26da 100644
--- a/drivers/scsi/qla2xxx/qla_mid.c
+++ b/drivers/scsi/qla2xxx/qla_mid.c
@@ -606,7 +606,7 @@ qla25xx_delete_queues(struct scsi_qla_host *vha)
 	struct qla_hw_data *ha = vha->hw;
 	struct qla_qpair *qpair, *tqpair;
 
-	if (ql2xmqsupport) {
+	if (ql2xmqsupport || ql2xnvmeenable) {
 		list_for_each_entry_safe(qpair, tqpair, &vha->qp_list,
 			qp_list_elem)
 		qla2xxx_delete_qpair(vha, qpair);
* Unmerged path drivers/scsi/qla2xxx/qla_os.c
