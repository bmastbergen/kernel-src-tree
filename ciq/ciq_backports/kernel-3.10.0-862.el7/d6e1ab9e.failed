nfp: don't hold PF lock while enabling SR-IOV

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit d6e1ab9ea3514840e4f32957c457b094646c2e9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d6e1ab9e.failed

Enabling SR-IOV VFs will cause the PCI subsystem to schedule a
work and flush its workqueue.  Since the nfp driver schedules its
own work we can't enable VFs while holding driver load.  Commit
6d48ceb27af1 ("nfp: allocate a private workqueue for driver work")
tried to avoid this deadlock by creating a separate workqueue.
Unfortunately, due to the architecture of workqueue subsystem this
does not guarantee a separate thread of execution.  Luckily
we can simply take pci_enable_sriov() from under the driver lock.

Take pci_disable_sriov() from under the lock too for symmetry.

Fixes: 6d48ceb27af1 ("nfp: allocate a private workqueue for driver work")
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d6e1ab9ea3514840e4f32957c457b094646c2e9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_main.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_main.c
index 11612af996f5,3f199db2002e..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_main.c
@@@ -102,15 -106,31 +102,38 @@@ static int nfp_pcie_sriov_enable(struc
  
  	err = pci_enable_sriov(pdev, num_vfs);
  	if (err) {
++<<<<<<< HEAD
 +		dev_warn(&pdev->dev, "Failed to enable PCI sriov: %d\n", err);
 +		return err;
++=======
+ 		dev_warn(&pdev->dev, "Failed to enable PCI SR-IOV: %d\n", err);
+ 		return err;
+ 	}
+ 
+ 	mutex_lock(&pf->lock);
+ 
+ 	err = nfp_app_sriov_enable(pf->app, num_vfs);
+ 	if (err) {
+ 		dev_warn(&pdev->dev,
+ 			 "App specific PCI SR-IOV configuration failed: %d\n",
+ 			 err);
+ 		goto err_sriov_disable;
++>>>>>>> d6e1ab9ea351 (nfp: don't hold PF lock while enabling SR-IOV)
  	}
  
  	pf->num_vfs = num_vfs;
  
  	dev_dbg(&pdev->dev, "Created %d VFs.\n", pf->num_vfs);
  
 -	mutex_unlock(&pf->lock);
  	return num_vfs;
++<<<<<<< HEAD
++=======
+ 
+ err_sriov_disable:
+ 	mutex_unlock(&pf->lock);
+ 	pci_disable_sriov(pdev);
+ 	return err;
++>>>>>>> d6e1ab9ea351 (nfp: don't hold PF lock while enabling SR-IOV)
  #endif
  	return 0;
  }
@@@ -129,8 -151,13 +152,10 @@@ static int nfp_pcie_sriov_disable(struc
  		return -EPERM;
  	}
  
 -	nfp_app_sriov_disable(pf->app);
 -
  	pf->num_vfs = 0;
  
+ 	mutex_unlock(&pf->lock);
+ 
  	pci_disable_sriov(pdev);
  	dev_dbg(&pdev->dev, "Removed VFs.\n");
  #endif
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_main.c
