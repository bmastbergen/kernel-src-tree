ceph: define 'end/complete' in readdir reply as bit flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Yan, Zheng <zyan@redhat.com>
commit 956d39d631dbcf7b57854873a24e309047f2a7f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/956d39d6.failed

Set a flag in readdir request, which indicates that client interprets
'end/complete' as bit flags. So that mds can reply additional flags in
readdir reply.

	Signed-off-by: Yan, Zheng <zyan@redhat.com>
(cherry picked from commit 956d39d631dbcf7b57854873a24e309047f2a7f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/mds_client.h
diff --cc fs/ceph/mds_client.h
index 37712ccffcc6,2a865812a41b..000000000000
--- a/fs/ceph/mds_client.h
+++ b/fs/ceph/mds_client.h
@@@ -73,11 -80,8 +73,16 @@@ struct ceph_mds_reply_info_parsed 
  			struct ceph_mds_reply_dirfrag *dir_dir;
  			size_t			      dir_buf_size;
  			int                           dir_nr;
++<<<<<<< HEAD
 +			char                          **dir_dname;
 +			u32                           *dir_dname_len;
 +			struct ceph_mds_reply_lease   **dir_dlease;
 +			struct ceph_mds_reply_info_in *dir_in;
 +			u8                            dir_complete, dir_end;
++=======
+ 			bool			      dir_complete, dir_end;
+ 			struct ceph_mds_reply_dir_entry  *dir_entries;
++>>>>>>> 956d39d631db (ceph: define 'end/complete' in readdir reply as bit flags)
  		};
  
  		/* for create results */
diff --git a/fs/ceph/dir.c b/fs/ceph/dir.c
index f5abab663b08..a8f4a28be9fa 100644
--- a/fs/ceph/dir.c
+++ b/fs/ceph/dir.c
@@ -332,6 +332,8 @@ more:
 		req->r_readdir_cache_idx = fi->readdir_cache_idx;
 		req->r_readdir_offset = fi->next_offset;
 		req->r_args.readdir.frag = cpu_to_le32(frag);
+		req->r_args.readdir.flags =
+				cpu_to_le16(CEPH_READDIR_REPLY_BITFLAGS);
 
 		req->r_inode = inode;
 		ihold(inode);
diff --git a/fs/ceph/mds_client.c b/fs/ceph/mds_client.c
index ac3236e332ae..74325d5c9405 100644
--- a/fs/ceph/mds_client.c
+++ b/fs/ceph/mds_client.c
@@ -181,8 +181,11 @@ static int parse_reply_info_dir(void **p, void *end,
 
 	ceph_decode_need(p, end, sizeof(num) + 2, bad);
 	num = ceph_decode_32(p);
-	info->dir_end = ceph_decode_8(p);
-	info->dir_complete = ceph_decode_8(p);
+	{
+		u16 flags = ceph_decode_16(p);
+		info->dir_end = !!(flags & CEPH_READDIR_FRAG_END);
+		info->dir_complete = !!(flags & CEPH_READDIR_FRAG_COMPLETE);
+	}
 	if (num == 0)
 		goto done;
 
* Unmerged path fs/ceph/mds_client.h
diff --git a/include/linux/ceph/ceph_fs.h b/include/linux/ceph/ceph_fs.h
index 7e5001886f09..e249fe07ede0 100644
--- a/include/linux/ceph/ceph_fs.h
+++ b/include/linux/ceph/ceph_fs.h
@@ -358,6 +358,17 @@ extern const char *ceph_mds_op_name(int op);
 #define CEPH_XATTR_REPLACE (1 << 1)
 #define CEPH_XATTR_REMOVE  (1 << 31)
 
+/*
+ * readdir request flags;
+ */
+#define CEPH_READDIR_REPLY_BITFLAGS	(1<<0)
+
+/*
+ * readdir reply flags.
+ */
+#define CEPH_READDIR_FRAG_END		(1<<0)
+#define CEPH_READDIR_FRAG_COMPLETE	(1<<8)
+
 union ceph_mds_request_args {
 	struct {
 		__le32 mask;                 /* CEPH_CAP_* */
@@ -375,6 +386,7 @@ union ceph_mds_request_args {
 		__le32 frag;                 /* which dir fragment */
 		__le32 max_entries;          /* how many dentries to grab */
 		__le32 max_bytes;
+		__le16 flags;
 	} __attribute__ ((packed)) readdir;
 	struct {
 		__le32 mode;
