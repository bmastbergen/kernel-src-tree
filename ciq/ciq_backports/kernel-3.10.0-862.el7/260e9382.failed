virtchnl: move some code to core driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jesse Brandeburg <jesse.brandeburg@intel.com>
commit 260e93820ad6c35d189210b4d86989a1df054e55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/260e9382.failed

Before moving this function over to virtchnl.h, move
some driver specific checks that had snuck into a fairly
generic function, back into the caller of the function.

	Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 260e93820ad6c35d189210b4d86989a1df054e55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
index c607db0defb5,d7fcc4ffa393..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
@@@ -2444,18 -2549,14 +2444,14 @@@ static int i40e_vc_validate_vf_msg(stru
  	bool err_msg_format = false;
  	int valid_len = 0;
  
- 	/* Check if VF is disabled. */
- 	if (test_bit(I40E_VF_STATE_DISABLED, &vf->vf_states))
- 		return I40E_ERR_PARAM;
- 
  	/* Validate message length. */
  	switch (v_opcode) {
 -	case VIRTCHNL_OP_VERSION:
 -		valid_len = sizeof(struct virtchnl_version_info);
 +	case I40E_VIRTCHNL_OP_VERSION:
 +		valid_len = sizeof(struct i40e_virtchnl_version_info);
  		break;
 -	case VIRTCHNL_OP_RESET_VF:
 +	case I40E_VIRTCHNL_OP_RESET_VF:
  		break;
 -	case VIRTCHNL_OP_GET_VF_RESOURCES:
 +	case I40E_VIRTCHNL_OP_GET_VF_RESOURCES:
  		if (VF_IS_V11(vf))
  			valid_len = sizeof(u32);
  		break;
@@@ -2544,30 -2645,22 +2540,40 @@@
  				break;
  			}
  			valid_len += ((qv->num_vectors - 1) *
 -				sizeof(struct virtchnl_iwarp_qv_info));
 +				sizeof(struct i40e_virtchnl_iwarp_qv_info));
  		}
  		break;
 -	case VIRTCHNL_OP_CONFIG_RSS_KEY:
 -		valid_len = sizeof(struct virtchnl_rss_key);
 +	case I40E_VIRTCHNL_OP_CONFIG_RSS_KEY:
 +		valid_len = sizeof(struct i40e_virtchnl_rss_key);
  		if (msglen >= valid_len) {
++<<<<<<< HEAD
 +			struct i40e_virtchnl_rss_key *vrk =
 +				(struct i40e_virtchnl_rss_key *)msg;
 +			if (vrk->key_len != I40E_HKEY_ARRAY_SIZE) {
 +				err_msg_format = true;
 +				break;
 +			}
++=======
+ 			struct virtchnl_rss_key *vrk =
+ 				(struct virtchnl_rss_key *)msg;
++>>>>>>> 260e93820ad6 (virtchnl: move some code to core driver)
  			valid_len += vrk->key_len - 1;
  		}
  		break;
 -	case VIRTCHNL_OP_CONFIG_RSS_LUT:
 -		valid_len = sizeof(struct virtchnl_rss_lut);
 +	case I40E_VIRTCHNL_OP_CONFIG_RSS_LUT:
 +		valid_len = sizeof(struct i40e_virtchnl_rss_lut);
  		if (msglen >= valid_len) {
++<<<<<<< HEAD
 +			struct i40e_virtchnl_rss_lut *vrl =
 +				(struct i40e_virtchnl_rss_lut *)msg;
 +			if (vrl->lut_entries != I40E_VF_HLUT_ARRAY_SIZE) {
 +				err_msg_format = true;
 +				break;
 +			}
++=======
+ 			struct virtchnl_rss_lut *vrl =
+ 				(struct virtchnl_rss_lut *)msg;
++>>>>>>> 260e93820ad6 (virtchnl: move some code to core driver)
  			valid_len += vrl->lut_entries - 1;
  		}
  		break;
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
