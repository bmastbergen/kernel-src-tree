mlxsw: spectrum_router: Configure RIFs based on RIF struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit ab01ae916911d11af9f4375b8276378b9474400c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ab01ae91.failed

All the information necessary for the configuration of RIFs can now be
found in the RIF struct itself, so reduce the arguments list.

This gets us one step closer to the common RIF core.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ab01ae916911d11af9f4375b8276378b9474400c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index f8e7036e3f4a,73cc5195068f..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -2688,36 -2921,27 +2688,54 @@@ static int mlxsw_sp_avail_rif_get(struc
  	int i;
  
  	for (i = 0; i < MLXSW_CORE_RES_GET(mlxsw_sp->core, MAX_RIFS); i++)
 -		if (!mlxsw_sp->router->rifs[i])
 +		if (!mlxsw_sp->rifs[i])
  			return i;
  
 -	return MLXSW_SP_INVALID_INDEX_RIF;
 +	return MLXSW_SP_INVALID_RIF;
 +}
 +
++<<<<<<< HEAD
 +static void mlxsw_sp_vport_rif_sp_attr_get(struct mlxsw_sp_port *mlxsw_sp_vport,
 +					   bool *p_lagged, u16 *p_system_port)
 +{
 +	u8 local_port = mlxsw_sp_vport->local_port;
 +
 +	*p_lagged = mlxsw_sp_vport->lagged;
 +	*p_system_port = *p_lagged ? mlxsw_sp_vport->lag_id : local_port;
  }
  
 +static int mlxsw_sp_vport_rif_sp_op(struct mlxsw_sp_port *mlxsw_sp_vport,
 +				    u16 vr_id, struct net_device *l3_dev,
 +				    u16 rif, bool create)
 +{
 +	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_vport->mlxsw_sp;
 +	bool lagged = mlxsw_sp_vport->lagged;
++=======
+ static int
+ mlxsw_sp_port_vlan_rif_sp_op(struct mlxsw_sp *mlxsw_sp,
+ 			     const struct mlxsw_sp_rif *rif, bool create)
+ {
+ 	struct mlxsw_sp_rif_subport *rif_subport;
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  	char ritr_pl[MLXSW_REG_RITR_LEN];
- 	u16 system_port;
  
++<<<<<<< HEAD
 +	mlxsw_reg_ritr_pack(ritr_pl, create, MLXSW_REG_RITR_SP_IF, rif, vr_id,
 +			    l3_dev->mtu, l3_dev->dev_addr);
 +
 +	mlxsw_sp_vport_rif_sp_attr_get(mlxsw_sp_vport, &lagged, &system_port);
 +	mlxsw_reg_ritr_sp_if_pack(ritr_pl, lagged, system_port,
 +				  mlxsw_sp_vport_vid_get(mlxsw_sp_vport));
++=======
+ 	rif_subport = container_of(rif, struct mlxsw_sp_rif_subport, common);
+ 	mlxsw_reg_ritr_pack(ritr_pl, create, MLXSW_REG_RITR_SP_IF,
+ 			    rif->rif_index, rif->vr_id, rif->dev->mtu,
+ 			    rif->dev->dev_addr);
+ 	mlxsw_reg_ritr_sp_if_pack(ritr_pl, rif_subport->lag,
+ 				  rif_subport->lag ? rif_subport->lag_id :
+ 						     rif_subport->system_port,
+ 				  rif_subport->vid);
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  
  	return mlxsw_reg_write(mlxsw_sp->core, MLXSW_REG(ritr), ritr_pl);
  }
@@@ -2769,60 -3012,81 +2787,93 @@@ mlxsw_sp_rif_alloc(u16 rif, u16 vr_id, 
  }
  
  static struct mlxsw_sp_rif *
 -mlxsw_sp_port_vlan_rif_sp_create(struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan,
 -				 struct net_device *l3_dev)
 +mlxsw_sp_vport_rif_sp_create(struct mlxsw_sp_port *mlxsw_sp_vport,
 +			     struct net_device *l3_dev)
  {
 -	struct mlxsw_sp_port *mlxsw_sp_port = mlxsw_sp_port_vlan->mlxsw_sp_port;
 -	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_port->mlxsw_sp;
 -	struct mlxsw_sp_rif_subport *rif_subport;
 -	u32 tb_id = l3mdev_fib_table(l3_dev);
 +	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_vport->mlxsw_sp;
  	struct mlxsw_sp_vr *vr;
  	struct mlxsw_sp_fid *f;
 -	struct mlxsw_sp_rif *rif;
 -	u16 fid, rif_index;
 +	struct mlxsw_sp_rif *r;
 +	u16 fid, rif;
  	int err;
  
 -	rif_index = mlxsw_sp_avail_rif_get(mlxsw_sp);
 -	if (rif_index == MLXSW_SP_INVALID_INDEX_RIF)
 +	rif = mlxsw_sp_avail_rif_get(mlxsw_sp);
 +	if (rif == MLXSW_SP_INVALID_RIF)
  		return ERR_PTR(-ERANGE);
  
 -	fid = mlxsw_sp_rif_sp_to_fid(rif_index);
 -	f = mlxsw_sp_rfid_alloc(fid, l3_dev);
 -	if (!f)
 -		return ERR_PTR(-ENOMEM);
 +	vr = mlxsw_sp_vr_get(mlxsw_sp, RT_TABLE_MAIN);
 +	if (IS_ERR(vr))
 +		return ERR_CAST(vr);
  
++<<<<<<< HEAD
 +	err = mlxsw_sp_vport_rif_sp_op(mlxsw_sp_vport, vr->id, l3_dev, rif,
 +				       true);
++=======
+ 	vr = mlxsw_sp_vr_get(mlxsw_sp, tb_id ? : RT_TABLE_MAIN);
+ 	if (IS_ERR(vr)) {
+ 		err = PTR_ERR(vr);
+ 		goto err_vr_get;
+ 	}
+ 
+ 	rif = mlxsw_sp_rif_alloc(rif_index, vr->id, l3_dev, f, true);
+ 	if (!rif) {
+ 		err = -ENOMEM;
+ 		goto err_rif_alloc;
+ 	}
+ 
+ 	rif_subport = container_of(rif, struct mlxsw_sp_rif_subport, common);
+ 	rif_subport->vid = mlxsw_sp_port_vlan->vid;
+ 	if (mlxsw_sp_port->lagged) {
+ 		rif_subport->lag = true;
+ 		rif_subport->lag_id = mlxsw_sp_port->lag_id;
+ 	} else {
+ 		rif_subport->lag = false;
+ 		rif_subport->system_port = mlxsw_sp_port->local_port;
+ 	}
+ 
+ 	err = mlxsw_sp_port_vlan_rif_sp_op(mlxsw_sp, rif, true);
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  	if (err)
 -		goto err_port_vlan_rif_sp_op;
 +		goto err_vport_rif_sp_op;
  
 +	fid = mlxsw_sp_rif_sp_to_fid(rif);
  	err = mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, fid, true);
  	if (err)
  		goto err_rif_fdb_op;
  
 -	if (devlink_dpipe_table_counter_enabled(priv_to_devlink(mlxsw_sp->core),
 -						MLXSW_SP_DPIPE_TABLE_NAME_ERIF)) {
 -		err = mlxsw_sp_rif_counter_alloc(mlxsw_sp, rif,
 -						 MLXSW_SP_RIF_COUNTER_EGRESS);
 -		if (err)
 -			netdev_dbg(mlxsw_sp_port->dev,
 -				   "Counter alloc Failed err=%d\n", err);
 +	f = mlxsw_sp_rfid_alloc(fid, l3_dev);
 +	if (!f) {
 +		err = -ENOMEM;
 +		goto err_rfid_alloc;
 +	}
 +
 +	r = mlxsw_sp_rif_alloc(rif, vr->id, l3_dev, f);
 +	if (!r) {
 +		err = -ENOMEM;
 +		goto err_rif_alloc;
  	}
  
 -	f->rif = rif;
 -	mlxsw_sp->router->rifs[rif_index] = rif;
 +	f->r = r;
 +	mlxsw_sp->rifs[rif] = r;
  	vr->rif_count++;
  
 -	return rif;
 +	return r;
  
++<<<<<<< HEAD
++=======
+ err_rif_fdb_op:
+ 	mlxsw_sp_port_vlan_rif_sp_op(mlxsw_sp, rif, false);
+ err_port_vlan_rif_sp_op:
+ 	kfree(rif);
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  err_rif_alloc:
 -	mlxsw_sp_vr_put(vr);
 -err_vr_get:
  	kfree(f);
 +err_rfid_alloc:
 +	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, fid, false);
 +err_rif_fdb_op:
 +	mlxsw_sp_vport_rif_sp_op(mlxsw_sp_vport, vr->id, l3_dev, rif, false);
 +err_vport_rif_sp_op:
 +	mlxsw_sp_vr_put(vr);
  	return ERR_PTR(err);
  }
  
@@@ -2848,52 -3113,89 +2899,57 @@@ static void mlxsw_sp_vport_rif_sp_destr
  
  	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, fid, false);
  
++<<<<<<< HEAD
 +	mlxsw_sp_vport_rif_sp_op(mlxsw_sp_vport, vr->id, l3_dev, rif, false);
 +
++=======
+ 	mlxsw_sp_port_vlan_rif_sp_op(mlxsw_sp, rif, false);
+ 	kfree(rif);
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  	mlxsw_sp_vr_put(vr);
 -	kfree(f);
  }
  
 -static int
 -mlxsw_sp_port_vlan_rif_sp_join(struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan,
 -			       struct net_device *l3_dev)
 +static int mlxsw_sp_vport_rif_sp_join(struct mlxsw_sp_port *mlxsw_sp_vport,
 +				      struct net_device *l3_dev)
  {
 -	struct mlxsw_sp_port *mlxsw_sp_port = mlxsw_sp_port_vlan->mlxsw_sp_port;
 -	u16 vid = mlxsw_sp_port_vlan->vid;
 -	struct mlxsw_sp_rif *rif;
 -	int err;
 +	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_vport->mlxsw_sp;
 +	struct mlxsw_sp_rif *r;
  
 -	rif = mlxsw_sp_rif_find_by_dev(mlxsw_sp_port->mlxsw_sp, l3_dev);
 -	if (!rif) {
 -		rif = mlxsw_sp_port_vlan_rif_sp_create(mlxsw_sp_port_vlan,
 -						       l3_dev);
 -		if (IS_ERR(rif))
 -			return PTR_ERR(rif);
 +	r = mlxsw_sp_rif_find_by_dev(mlxsw_sp, l3_dev);
 +	if (!r) {
 +		r = mlxsw_sp_vport_rif_sp_create(mlxsw_sp_vport, l3_dev);
 +		if (IS_ERR(r))
 +			return PTR_ERR(r);
  	}
  
 -	err = mlxsw_sp_port_vid_learning_set(mlxsw_sp_port, vid, false);
 -	if (err)
 -		goto err_port_vid_learning_set;
 -
 -	err = mlxsw_sp_port_vid_stp_set(mlxsw_sp_port, vid,
 -					BR_STATE_FORWARDING);
 -	if (err)
 -		goto err_port_vid_stp_set;
 -
 -	if (mlxsw_sp_port->nr_port_vid_map++ == 0) {
 -		err = mlxsw_sp_port_vp_mode_trans(mlxsw_sp_port);
 -		if (err)
 -			goto err_port_vp_mode_trans;
 -	}
 +	mlxsw_sp_vport_fid_set(mlxsw_sp_vport, r->f);
 +	r->f->ref_count++;
  
 -	mlxsw_sp_port_vlan->fid = rif->f;
 -	rif->f->ref_count++;
 +	netdev_dbg(mlxsw_sp_vport->dev, "Joined FID=%d\n", r->f->fid);
  
  	return 0;
 -
 -err_port_vp_mode_trans:
 -	mlxsw_sp_port->nr_port_vid_map--;
 -	mlxsw_sp_port_vid_stp_set(mlxsw_sp_port, vid, BR_STATE_BLOCKING);
 -err_port_vid_stp_set:
 -	mlxsw_sp_port_vid_learning_set(mlxsw_sp_port, vid, true);
 -err_port_vid_learning_set:
 -	if (rif->f->ref_count == 0)
 -		mlxsw_sp_port_vlan_rif_sp_destroy(mlxsw_sp_port_vlan, rif);
 -	return err;
  }
  
 -static void
 -mlxsw_sp_port_vlan_rif_sp_leave(struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan)
 +static void mlxsw_sp_vport_rif_sp_leave(struct mlxsw_sp_port *mlxsw_sp_vport)
  {
 -	struct mlxsw_sp_port *mlxsw_sp_port = mlxsw_sp_port_vlan->mlxsw_sp_port;
 -	struct mlxsw_sp_fid *fid = mlxsw_sp_port_vlan->fid;
 -	u16 vid = mlxsw_sp_port_vlan->vid;
 +	struct mlxsw_sp_fid *f = mlxsw_sp_vport_fid_get(mlxsw_sp_vport);
  
 -	fid->ref_count--;
 -	mlxsw_sp_port_vlan->fid = NULL;
 +	netdev_dbg(mlxsw_sp_vport->dev, "Left FID=%d\n", f->fid);
  
 -	if (mlxsw_sp_port->nr_port_vid_map == 1)
 -		mlxsw_sp_port_vlan_mode_trans(mlxsw_sp_port);
 -	mlxsw_sp_port->nr_port_vid_map--;
 -	mlxsw_sp_port_vid_stp_set(mlxsw_sp_port, vid, BR_STATE_BLOCKING);
 -	mlxsw_sp_port_vid_learning_set(mlxsw_sp_port, vid, true);
 -
 -	if (fid->ref_count == 0)
 -		mlxsw_sp_port_vlan_rif_sp_destroy(mlxsw_sp_port_vlan, fid->rif);
 +	mlxsw_sp_vport_fid_set(mlxsw_sp_vport, NULL);
 +	if (--f->ref_count == 0)
 +		mlxsw_sp_vport_rif_sp_destroy(mlxsw_sp_vport, f->r);
  }
  
 -static int mlxsw_sp_inetaddr_port_vlan_event(struct net_device *l3_dev,
 -					     struct net_device *port_dev,
 -					     unsigned long event, u16 vid)
 +static int mlxsw_sp_inetaddr_vport_event(struct net_device *l3_dev,
 +					 struct net_device *port_dev,
 +					 unsigned long event, u16 vid)
  {
  	struct mlxsw_sp_port *mlxsw_sp_port = netdev_priv(port_dev);
 -	struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan;
 +	struct mlxsw_sp_port *mlxsw_sp_vport;
  
 -	mlxsw_sp_port_vlan = mlxsw_sp_port_vlan_find_by_vid(mlxsw_sp_port, vid);
 -	if (WARN_ON(!mlxsw_sp_port_vlan))
 +	mlxsw_sp_vport = mlxsw_sp_port_vport_find(mlxsw_sp_port, vid);
 +	if (WARN_ON(!mlxsw_sp_vport))
  		return -EINVAL;
  
  	switch (event) {
@@@ -3046,8 -3357,13 +3100,18 @@@ static int mlxsw_sp_rif_bridge_create(s
  	if (err)
  		goto err_port_flood_set;
  
++<<<<<<< HEAD
 +	err = mlxsw_sp_rif_bridge_op(mlxsw_sp, vr->id, l3_dev, f->fid, rif,
 +				     true);
++=======
+ 	rif = mlxsw_sp_rif_alloc(rif_index, vr->id, l3_dev, f, false);
+ 	if (!rif) {
+ 		err = -ENOMEM;
+ 		goto err_rif_alloc;
+ 	}
+ 
+ 	err = mlxsw_sp_rif_bridge_op(mlxsw_sp, rif, true);
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  	if (err)
  		goto err_rif_bridge_op;
  
@@@ -3069,11 -3379,11 +3133,18 @@@
  
  	return 0;
  
++<<<<<<< HEAD
++=======
+ err_rif_fdb_op:
+ 	mlxsw_sp_rif_bridge_op(mlxsw_sp, rif, false);
+ err_rif_bridge_op:
+ 	kfree(rif);
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  err_rif_alloc:
 +	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, f->fid, false);
 +err_rif_fdb_op:
 +	mlxsw_sp_rif_bridge_op(mlxsw_sp, vr->id, l3_dev, f->fid, rif, false);
 +err_rif_bridge_op:
  	mlxsw_sp_router_port_flood_set(mlxsw_sp, f->fid, false);
  err_port_flood_set:
  	mlxsw_sp_vr_put(vr);
@@@ -3098,7 -3406,9 +3169,13 @@@ void mlxsw_sp_rif_bridge_destroy(struc
  
  	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, f->fid, false);
  
++<<<<<<< HEAD
 +	mlxsw_sp_rif_bridge_op(mlxsw_sp, vr->id, l3_dev, f->fid, rif, false);
++=======
+ 	mlxsw_sp_rif_bridge_op(mlxsw_sp, rif, false);
+ 
+ 	kfree(rif);
++>>>>>>> ab01ae916911 (mlxsw: spectrum_router: Configure RIFs based on RIF struct)
  
  	mlxsw_sp_router_port_flood_set(mlxsw_sp, f->fid, false);
  
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
