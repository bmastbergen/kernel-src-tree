bnxt_en: Implement ndo_bridge_{get|set}link methods.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Implement ndo_bridge_{get|set}link methods (Jonathan Toppins) [1459659]
Rebuild_FUZZ: 99.03%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 39d8ba2e71fbdde686d7e31ad141a01994dc0793
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/39d8ba2e.failed

To allow users to set the hardware bridging mode to VEB or VEPA.  Only
single function PF can change the bridging mode.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 39d8ba2e71fbdde686d7e31ad141a01994dc0793)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index f18a296af341,4acaeaf87f18..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -7169,8 -7452,52 +7189,53 @@@ static void bnxt_udp_tunnel_del(struct 
  	schedule_work(&bp->sp_task);
  }
  
+ static int bnxt_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq,
+ 			       struct net_device *dev, u32 filter_mask,
+ 			       int nlflags)
+ {
+ 	struct bnxt *bp = netdev_priv(dev);
+ 
+ 	return ndo_dflt_bridge_getlink(skb, pid, seq, dev, bp->br_mode, 0, 0,
+ 				       nlflags, filter_mask, NULL);
+ }
+ 
+ static int bnxt_bridge_setlink(struct net_device *dev, struct nlmsghdr *nlh,
+ 			       u16 flags)
+ {
+ 	struct bnxt *bp = netdev_priv(dev);
+ 	struct nlattr *attr, *br_spec;
+ 	int rem, rc = 0;
+ 
+ 	if (bp->hwrm_spec_code < 0x10708 || !BNXT_SINGLE_PF(bp))
+ 		return -EOPNOTSUPP;
+ 
+ 	br_spec = nlmsg_find_attr(nlh, sizeof(struct ifinfomsg), IFLA_AF_SPEC);
+ 	if (!br_spec)
+ 		return -EINVAL;
+ 
+ 	nla_for_each_nested(attr, br_spec, rem) {
+ 		u16 mode;
+ 
+ 		if (nla_type(attr) != IFLA_BRIDGE_MODE)
+ 			continue;
+ 
+ 		if (nla_len(attr) < sizeof(mode))
+ 			return -EINVAL;
+ 
+ 		mode = nla_get_u16(attr);
+ 		if (mode == bp->br_mode)
+ 			break;
+ 
+ 		rc = bnxt_hwrm_set_br_mode(bp, mode);
+ 		if (!rc)
+ 			bp->br_mode = mode;
+ 		break;
+ 	}
+ 	return rc;
+ }
+ 
  static const struct net_device_ops bnxt_netdev_ops = {
 +	.ndo_size		= sizeof(struct net_device_ops),
  	.ndo_open		= bnxt_open,
  	.ndo_start_xmit		= bnxt_start_xmit,
  	.ndo_stop		= bnxt_close,
@@@ -7198,8 -7525,11 +7263,16 @@@
  #ifdef CONFIG_RFS_ACCEL
  	.ndo_rx_flow_steer	= bnxt_rx_flow_steer,
  #endif
++<<<<<<< HEAD
 +	.extended.ndo_udp_tunnel_add	= bnxt_udp_tunnel_add,
 +	.extended.ndo_udp_tunnel_del	= bnxt_udp_tunnel_del,
++=======
+ 	.ndo_udp_tunnel_add	= bnxt_udp_tunnel_add,
+ 	.ndo_udp_tunnel_del	= bnxt_udp_tunnel_del,
+ 	.ndo_xdp		= bnxt_xdp,
+ 	.ndo_bridge_getlink	= bnxt_bridge_getlink,
+ 	.ndo_bridge_setlink	= bnxt_bridge_setlink,
++>>>>>>> 39d8ba2e71fb (bnxt_en: Implement ndo_bridge_{get|set}link methods.)
  };
  
  static void bnxt_remove_one(struct pci_dev *pdev)
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
