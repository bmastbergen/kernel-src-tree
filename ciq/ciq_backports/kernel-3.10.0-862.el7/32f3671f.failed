net/mlx5e: Make sure the FW max encap size is enough for ipv4 tunnels

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [infiniband] lx5e: Make sure the FW max encap size is enough for ipv4 tunnels (Don Dutile) [1385309 1385649 1386645 1409099 1456667 1456687]
Rebuild_FUZZ: 96.24%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit 32f3671f6951836cfe9d84e1a6554908b85c61d7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/32f3671f.failed

Otherwise the code that fills the ipv4 encapsulation headers could be writing
beyond the allocated headers buffer.

Fixes: a54e20b4fcae ('net/mlx5e: Add basic TC tunnel set action for SRIOV offloads')
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 32f3671f6951836cfe9d84e1a6554908b85c61d7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 34681d64d91f,fc7c1d30461c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -867,12 -865,15 +865,22 @@@ static int mlx5e_create_encap_header_ip
  	struct neighbour *n = NULL;
  	struct flowi4 fl4 = {};
  	char *encap_header;
++<<<<<<< HEAD
 +	int encap_size;
 +	__be32 saddr;
 +	int ttl;
 +	int err;
++=======
+ 	int ttl, err;
++>>>>>>> 32f3671f6951 (net/mlx5e: Make sure the FW max encap size is enough for ipv4 tunnels)
+ 
+ 	if (max_encap_size < ipv4_encap_size) {
+ 		mlx5_core_warn(priv->mdev, "encap size %d too big, max supported is %d\n",
+ 			       ipv4_encap_size, max_encap_size);
+ 		return -EOPNOTSUPP;
+ 	}
  
- 	encap_header = kzalloc(max_encap_size, GFP_KERNEL);
+ 	encap_header = kzalloc(ipv4_encap_size, GFP_KERNEL);
  	if (!encap_header)
  		return -ENOMEM;
  
@@@ -905,11 -908,11 +913,19 @@@
  
  	switch (e->tunnel_type) {
  	case MLX5_HEADER_TYPE_VXLAN:
++<<<<<<< HEAD
 +		encap_size = gen_vxlan_header_ipv4(*out_dev, encap_header,
 +						   e->h_dest, ttl,
 +						   tun_key->u.ipv4.dst,
 +						   saddr, tun_key->tp_dst,
 +						   tunnel_id_to_key32(tun_key->tun_id));
++=======
+ 		gen_vxlan_header_ipv4(*out_dev, encap_header,
+ 				      ipv4_encap_size, e->h_dest, ttl,
+ 				      fl4.daddr,
+ 				      fl4.saddr, tun_key->tp_dst,
+ 				      tunnel_id_to_key32(tun_key->tun_id));
++>>>>>>> 32f3671f6951 (net/mlx5e: Make sure the FW max encap size is enough for ipv4 tunnels)
  		break;
  	default:
  		err = -EOPNOTSUPP;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
