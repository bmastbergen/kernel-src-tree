crypto: algif_skcipher - Remove custom release parent function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [crypto] algif_skcipher: Remove custom release parent function (Bruno Eduardo de Oliveira Meneguele) [1529441]
Rebuild_FUZZ: 90.43%
commit-author Herbert Xu <herbert@gondor.apana.org.au>
commit d7b65aee1e7b4c87922b0232eaba56a8a143a4a0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d7b65aee.failed

This patch removes the custom release parent function as the
generic af_alg_release_parent now works for nokey sockets too.

	Cc: stable@vger.kernel.org
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit d7b65aee1e7b4c87922b0232eaba56a8a143a4a0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/algif_skcipher.c
diff --cc crypto/algif_skcipher.c
index 0cd81ddf5c0f,1f99d2d47715..000000000000
--- a/crypto/algif_skcipher.c
+++ b/crypto/algif_skcipher.c
@@@ -683,7 -885,7 +683,10 @@@ static int skcipher_setkey(void *privat
  	return err;
  }
  
++<<<<<<< HEAD
 +static void skcipher_sock_destruct_common(struct sock *sk)
++=======
+ static void skcipher_wait(struct sock *sk)
  {
  	struct alg_sock *ask = alg_sk(sk);
  	struct skcipher_ctx *ctx = ask->private;
@@@ -695,20 -896,17 +697,15 @@@
  }
  
  static void skcipher_sock_destruct(struct sock *sk)
- {
- 	skcipher_sock_destruct_common(sk);
- 	af_alg_release_parent(sk);
- }
- 
- static void skcipher_release_parent_nokey(struct sock *sk)
++>>>>>>> d7b65aee1e7b (crypto: algif_skcipher - Remove custom release parent function)
  {
  	struct alg_sock *ask = alg_sk(sk);
+ 	struct skcipher_ctx *ctx = ask->private;
 -	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(&ctx->req);
 -
 -	if (atomic_read(&ctx->inflight))
 -		skcipher_wait(sk);
++	struct crypto_ablkcipher *tfm = crypto_ablkcipher_reqtfm(&ctx->req);
  
- 	if (!ask->refcnt) {
- 		sock_put(ask->parent);
- 		return;
- 	}
- 
+ 	skcipher_free_sgl(sk);
 -	sock_kzfree_s(sk, ctx->iv, crypto_skcipher_ivsize(tfm));
++	sock_kfree_s(sk, ctx->iv, crypto_ablkcipher_ivsize(tfm));
+ 	sock_kfree_s(sk, ctx, ctx->len);
  	af_alg_release_parent(sk);
  }
  
@@@ -761,28 -953,12 +752,14 @@@ static int skcipher_accept_parent_nokey
  
  static int skcipher_accept_parent(void *private, struct sock *sk)
  {
 -	struct skcipher_tfm *tfm = private;
 +	struct ablkcipher_tfm_keycheck *tfm = private;
 +	struct crypto_tfm *ctfm = crypto_ablkcipher_tfm(tfm->ablkcipher);
 +	struct crypto_alg *calg = ctfm->__crt_alg;
  
 -	if (!tfm->has_key && crypto_skcipher_has_setkey(tfm->skcipher))
 +	if (!tfm->has_key && calg->cra_u.ablkcipher.max_keysize)
  		return -ENOKEY;
  
- 	return skcipher_accept_parent_common(private, sk);
- }
- 
- static int skcipher_accept_parent_nokey(void *private, struct sock *sk)
- {
- 	int err;
- 
- 	err = skcipher_accept_parent_common(private, sk);
- 	if (err)
- 		goto out;
- 
- 	sk->sk_destruct = skcipher_sock_destruct_nokey;
- 
- out:
- 	return err;
+ 	return skcipher_accept_parent_nokey(private, sk);
  }
  
  static const struct af_alg_type algif_type_skcipher = {
* Unmerged path crypto/algif_skcipher.c
