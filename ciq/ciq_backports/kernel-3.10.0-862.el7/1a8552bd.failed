net/mlx5e: Remove output device parameter from create encap header helpers definition

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Remove output device parameter from create encap header helpers definition (Don Dutile) [1456687 1499362]
Rebuild_FUZZ: 97.59%
commit-author Hadar Hen Zion <hadarh@mellanox.com>
commit 1a8552bd81af5f4f19b26ac58e8c85866d4f7de8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1a8552bd.failed

Passing output device parameter to the helper functions that deal with
creation of encapsulation headers is redundant. Output device parameter
can be defined inside those helpers, no need to pass it. Refactor the code by
removing the parameter from the function signature.

This patch doesn't change any functionality.

	Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 1a8552bd81af5f4f19b26ac58e8c85866d4f7de8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 29674f9689a9,25ecffa1a3df..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -883,11 -1211,12 +883,16 @@@ static void gen_vxlan_header_ipv6(struc
  
  static int mlx5e_create_encap_header_ipv4(struct mlx5e_priv *priv,
  					  struct net_device *mirred_dev,
++<<<<<<< HEAD
 +					  struct mlx5_encap_entry *e,
 +					  struct net_device **out_dev)
++=======
+ 					  struct mlx5e_encap_entry *e)
++>>>>>>> 1a8552bd81af (net/mlx5e: Remove output device parameter from create encap header helpers definition)
  {
  	int max_encap_size = MLX5_CAP_ESW(priv->mdev, max_encap_header_size);
 -	int ipv4_encap_size = ETH_HLEN + sizeof(struct iphdr) + VXLAN_HLEN;
  	struct ip_tunnel_key *tun_key = &e->tun_info.key;
+ 	struct net_device *out_dev;
  	struct neighbour *n = NULL;
  	struct flowi4 fl4 = {};
  	char *encap_header;
@@@ -909,10 -1241,12 +914,15 @@@
  		err = -EOPNOTSUPP;
  		goto out;
  	}
 -	fl4.flowi4_tos = tun_key->tos;
  	fl4.daddr = tun_key->u.ipv4.dst;
 -	fl4.saddr = tun_key->u.ipv4.src;
  
++<<<<<<< HEAD
 +	err = mlx5e_route_lookup_ipv4(priv, mirred_dev, out_dev,
 +				      &fl4, &n, &saddr, &ttl);
++=======
+ 	err = mlx5e_route_lookup_ipv4(priv, mirred_dev, &out_dev,
+ 				      &fl4, &n, &ttl);
++>>>>>>> 1a8552bd81af (net/mlx5e: Remove output device parameter from create encap header helpers definition)
  	if (err)
  		goto out;
  
@@@ -925,15 -1256,18 +935,30 @@@
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	neigh_ha_snapshot(e->h_dest, n, *out_dev);
 +
 +	switch (e->tunnel_type) {
 +	case MLX5_HEADER_TYPE_VXLAN:
 +		encap_size = gen_vxlan_header_ipv4(*out_dev, encap_header,
 +						   e->h_dest, ttl,
 +						   tun_key->u.ipv4.dst,
 +						   saddr, tun_key->tp_dst,
 +						   tunnel_id_to_key32(tun_key->tun_id));
++=======
+ 	e->n = n;
+ 	e->out_dev = out_dev;
+ 
+ 	neigh_ha_snapshot(e->h_dest, n, out_dev);
+ 
+ 	switch (e->tunnel_type) {
+ 	case MLX5_HEADER_TYPE_VXLAN:
+ 		gen_vxlan_header_ipv4(out_dev, encap_header,
+ 				      ipv4_encap_size, e->h_dest, ttl,
+ 				      fl4.daddr,
+ 				      fl4.saddr, tun_key->tp_dst,
+ 				      tunnel_id_to_key32(tun_key->tun_id));
++>>>>>>> 1a8552bd81af (net/mlx5e: Remove output device parameter from create encap header helpers definition)
  		break;
  	default:
  		err = -EOPNOTSUPP;
@@@ -951,9 -1285,7 +976,13 @@@ out
  
  static int mlx5e_create_encap_header_ipv6(struct mlx5e_priv *priv,
  					  struct net_device *mirred_dev,
++<<<<<<< HEAD
 +					  struct mlx5_encap_entry *e,
 +					  struct net_device **out_dev)
 +
++=======
+ 					  struct mlx5e_encap_entry *e)
++>>>>>>> 1a8552bd81af (net/mlx5e: Remove output device parameter from create encap header helpers definition)
  {
  	int max_encap_size = MLX5_CAP_ESW(priv->mdev, max_encap_header_size);
  	int ipv6_encap_size = ETH_HLEN + sizeof(struct ipv6hdr) + VXLAN_HLEN;
@@@ -1028,14 -1361,17 +1058,19 @@@ out
  static int mlx5e_attach_encap(struct mlx5e_priv *priv,
  			      struct ip_tunnel_info *tun_info,
  			      struct net_device *mirred_dev,
 -			      struct net_device **encap_dev,
 -			      struct mlx5e_tc_flow *flow)
 +			      struct mlx5_esw_flow_attr *attr)
  {
  	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 -	struct net_device *up_dev = mlx5_eswitch_get_uplink_netdev(esw);
  	unsigned short family = ip_tunnel_info_af(tun_info);
 -	struct mlx5e_priv *up_priv = netdev_priv(up_dev);
 -	struct mlx5_esw_flow_attr *attr = flow->esw_attr;
  	struct ip_tunnel_key *key = &tun_info->key;
++<<<<<<< HEAD
 +	struct mlx5_encap_entry *e;
 +	struct net_device *out_dev;
 +	int tunnel_type, err = -EOPNOTSUPP;
++=======
+ 	struct mlx5e_encap_entry *e;
+ 	int tunnel_type, err = 0;
++>>>>>>> 1a8552bd81af (net/mlx5e: Remove output device parameter from create encap header helpers definition)
  	uintptr_t hash_key;
  	bool found = false;
  
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
