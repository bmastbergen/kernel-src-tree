ipv4: Namespaceify tcp_keepalive_time sysctl knob

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Nikolay Borisov <kernel@kyup.com>
commit 13b287e8d1cad951634389f85b8c9b816bd3bb1e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/13b287e8.failed

Different net namespaces might have different requirements as to
the keepalive time of tcp sockets. This might be required in cases
where different firewall rules are in place which require tcp
timeout sockets to be increased/decreased independently of the host.

	Signed-off-by: Nikolay Borisov <kernel@kyup.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 13b287e8d1cad951634389f85b8c9b816bd3bb1e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/netns/ipv4.h
#	net/ipv4/tcp_ipv4.c
diff --cc include/net/netns/ipv4.h
index 4b15ee83774e,9e9bbebaebd1..000000000000
--- a/include/net/netns/ipv4.h
+++ b/include/net/netns/ipv4.h
@@@ -70,13 -75,34 +70,33 @@@ struct netns_ipv4 
  	int sysctl_icmp_ratemask;
  	int sysctl_icmp_errors_use_inbound_ifaddr;
  
 -	struct local_ports ip_local_ports;
 -
  	int sysctl_tcp_ecn;
 -	int sysctl_tcp_ecn_fallback;
  
++<<<<<<< HEAD
 +	kgid_t sysctl_ping_group_range[2];
 +	long sysctl_tcp_mem[3];
++=======
+ 	int sysctl_ip_no_pmtu_disc;
+ 	int sysctl_ip_fwd_use_pmtu;
+ 	int sysctl_ip_nonlocal_bind;
+ 
+ 	int sysctl_fwmark_reflect;
+ 	int sysctl_tcp_fwmark_accept;
+ #ifdef CONFIG_NET_L3_MASTER_DEV
+ 	int sysctl_tcp_l3mdev_accept;
+ #endif
+ 	int sysctl_tcp_mtu_probing;
+ 	int sysctl_tcp_base_mss;
+ 	int sysctl_tcp_probe_threshold;
+ 	u32 sysctl_tcp_probe_interval;
+ 
+ 	int sysctl_tcp_keepalive_time;
+ 
+ 	struct ping_group_range ping_group_range;
++>>>>>>> 13b287e8d1ca (ipv4: Namespaceify tcp_keepalive_time sysctl knob)
  
  	atomic_t dev_addr_genid;
 -
 -#ifdef CONFIG_SYSCTL
 -	unsigned long *sysctl_local_reserved_ports;
 -#endif
 +	RH_KABI_FILL_HOLE(unsigned int	fib_seq)	/* protected by rtnl_mutex */
  
  #ifdef CONFIG_IP_MROUTE
  #ifndef CONFIG_IP_MROUTE_MULTIPLE_TABLES
diff --cc net/ipv4/tcp_ipv4.c
index 47a597740e73,6e14ff9a8580..000000000000
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@@ -2496,11 -2375,19 +2496,22 @@@ static int __net_init tcp_sk_init(struc
  					   IPPROTO_TCP, net);
  		if (res)
  			goto fail;
 -		*per_cpu_ptr(net->ipv4.tcp_sk, cpu) = sk;
 +		*per_cpu_ptr(net->ipv4_tcp_sk, cpu) = sk;
  	}
 -
  	net->ipv4.sysctl_tcp_ecn = 2;
++<<<<<<< HEAD
++=======
+ 	net->ipv4.sysctl_tcp_ecn_fallback = 1;
+ 
+ 	net->ipv4.sysctl_tcp_base_mss = TCP_BASE_MSS;
+ 	net->ipv4.sysctl_tcp_probe_threshold = TCP_PROBE_THRESHOLD;
+ 	net->ipv4.sysctl_tcp_probe_interval = TCP_PROBE_INTERVAL;
+ 
+ 	net->ipv4.sysctl_tcp_keepalive_time = TCP_KEEPALIVE_TIME;
+ 
++>>>>>>> 13b287e8d1ca (ipv4: Namespaceify tcp_keepalive_time sysctl knob)
  	return 0;
 +
  fail:
  	tcp_sk_exit(net);
  
* Unmerged path include/net/netns/ipv4.h
diff --git a/include/net/tcp.h b/include/net/tcp.h
index 516e6d399627..edf557b67ff7 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -237,7 +237,6 @@ extern int sysctl_tcp_timestamps;
 extern int sysctl_tcp_window_scaling;
 extern int sysctl_tcp_sack;
 extern int sysctl_tcp_fin_timeout;
-extern int sysctl_tcp_keepalive_time;
 extern int sysctl_tcp_keepalive_probes;
 extern int sysctl_tcp_keepalive_intvl;
 extern int sysctl_tcp_syn_retries;
@@ -1156,7 +1155,9 @@ static inline int keepalive_intvl_when(const struct tcp_sock *tp)
 
 static inline int keepalive_time_when(const struct tcp_sock *tp)
 {
-	return tp->keepalive_time ? : sysctl_tcp_keepalive_time;
+	struct net *net = sock_net((struct sock *)tp);
+
+	return tp->keepalive_time ? : net->ipv4.sysctl_tcp_keepalive_time;
 }
 
 static inline int keepalive_probes(const struct tcp_sock *tp)
diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index d18eb9254a01..899b8cae3784 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -380,13 +380,6 @@ static struct ctl_table ipv4_table[] = {
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec
 	},
-	{
-		.procname	= "tcp_keepalive_time",
-		.data		= &sysctl_tcp_keepalive_time,
-		.maxlen		= sizeof(int),
-		.mode		= 0644,
-		.proc_handler	= proc_dointvec_jiffies,
-	},
 	{
 		.procname	= "tcp_keepalive_probes",
 		.data		= &sysctl_tcp_keepalive_probes,
@@ -919,6 +912,13 @@ static struct ctl_table ipv4_net_table[] = {
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec
 	},
+	{
+		.procname	= "tcp_keepalive_time",
+		.data		= &init_net.ipv4.sysctl_tcp_keepalive_time,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_jiffies,
+	},
 	{ }
 };
 
* Unmerged path net/ipv4/tcp_ipv4.c
diff --git a/net/ipv4/tcp_timer.c b/net/ipv4/tcp_timer.c
index eecdc4f1a8d1..9ce00a9e690f 100644
--- a/net/ipv4/tcp_timer.c
+++ b/net/ipv4/tcp_timer.c
@@ -24,7 +24,6 @@
 
 int sysctl_tcp_syn_retries __read_mostly = TCP_SYN_RETRIES;
 int sysctl_tcp_synack_retries __read_mostly = TCP_SYNACK_RETRIES;
-int sysctl_tcp_keepalive_time __read_mostly = TCP_KEEPALIVE_TIME;
 int sysctl_tcp_keepalive_probes __read_mostly = TCP_KEEPALIVE_PROBES;
 int sysctl_tcp_keepalive_intvl __read_mostly = TCP_KEEPALIVE_INTVL;
 int sysctl_tcp_retries1 __read_mostly = TCP_RETR1;
