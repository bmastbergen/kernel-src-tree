perf pmu: Add support for MetricName JSON attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Andi Kleen <ak@linux.intel.com>
commit 962848142335e8b35d522be78f58f2011d976b17
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/96284814.failed

Add support for a new JSON event attribute to name MetricExpr for better
output in perf stat.

If the event has no MetricName it uses the normal event name instead to
describe the metric.

Before

  % perf stat -a -I 1000 -e '{unc_p_clockticks,unc_p_freq_max_os_cycles}' --metric-only
           time unc_p_freq_max_os_cycles
     1.000149775     15.7
     2.000344807     19.3
     3.000502544     16.7
     4.000640656      6.6
     5.000779955      9.9

After

  % perf stat -a -I 1000 -e '{unc_p_clockticks,unc_p_freq_max_os_cycles}' --metric-only
           time freq_max_os_cycles %
     1.000149775     15.7
     2.000344807     19.3
     3.000502544     16.7
     4.000640656      6.6
     5.000779955      9.9

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: http://lkml.kernel.org/r/20170320201711.14142-13-andi@firstfloor.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 962848142335e8b35d522be78f58f2011d976b17)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/parse-events.c
#	tools/perf/util/pmu.c
#	tools/perf/util/pmu.h
#	tools/perf/util/stat-shadow.c
diff --cc tools/perf/util/evsel.c
index 4966d6462cb1,9dc7e2d6e48a..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -235,6 -236,10 +235,13 @@@ void perf_evsel__init(struct perf_evse
  	evsel->sample_size = __perf_evsel__sample_size(attr->sample_type);
  	perf_evsel__calc_id_pos(evsel);
  	evsel->cmdline_group_boundary = false;
++<<<<<<< HEAD
++=======
+ 	evsel->metric_expr   = NULL;
+ 	evsel->metric_name   = NULL;
+ 	evsel->metric_events = NULL;
+ 	evsel->collect_stat  = false;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  }
  
  struct perf_evsel *perf_evsel__new_idx(struct perf_event_attr *attr, int idx)
diff --cc tools/perf/util/evsel.h
index 8e15288107c4,d101695c482c..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -128,6 -130,12 +128,15 @@@ struct perf_evsel 
  	char			*group_name;
  	bool			cmdline_group_boundary;
  	struct list_head	config_terms;
++<<<<<<< HEAD
++=======
+ 	int			bpf_fd;
+ 	bool			merged_stat;
+ 	const char *		metric_expr;
+ 	const char *		metric_name;
+ 	struct perf_evsel	**metric_events;
+ 	bool			collect_stat;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  };
  
  union u64_swap {
diff --cc tools/perf/util/parse-events.c
index 3c6f7bbf0303,119eb0b65876..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -1021,6 -1255,8 +1021,11 @@@ int parse_events_add_pmu(struct parse_e
  		evsel->scale = info.scale;
  		evsel->per_pkg = info.per_pkg;
  		evsel->snapshot = info.snapshot;
++<<<<<<< HEAD
++=======
+ 		evsel->metric_expr = info.metric_expr;
+ 		evsel->metric_name = info.metric_name;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  	}
  
  	return evsel ? 0 : -ENOMEM;
diff --cc tools/perf/util/pmu.c
index 0583e1bdc762,bcf752fa345b..000000000000
--- a/tools/perf/util/pmu.c
+++ b/tools/perf/util/pmu.c
@@@ -985,6 -997,8 +988,11 @@@ int perf_pmu__check_alias(struct perf_p
  	info->unit     = NULL;
  	info->scale    = 0.0;
  	info->snapshot = false;
++<<<<<<< HEAD
++=======
+ 	info->metric_expr = NULL;
+ 	info->metric_name = NULL;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  
  	list_for_each_entry_safe(term, h, head_terms, list) {
  		alias = pmu_find_alias(pmu, term);
@@@ -1000,6 -1014,8 +1008,11 @@@
  
  		if (alias->per_pkg)
  			info->per_pkg = true;
++<<<<<<< HEAD
++=======
+ 		info->metric_expr = alias->metric_expr;
+ 		info->metric_name = alias->metric_name;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  
  		list_del(&term->list);
  		free(term);
@@@ -1094,6 -1110,8 +1107,11 @@@ struct sevent 
  	char *topic;
  	char *str;
  	char *pmu;
++<<<<<<< HEAD
++=======
+ 	char *metric_expr;
+ 	char *metric_name;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  };
  
  static int cmp_sevent(const void *a, const void *b)
@@@ -1192,6 -1210,8 +1210,11 @@@ void print_pmu_events(const char *event
  			aliases[j].topic = alias->topic;
  			aliases[j].str = alias->str;
  			aliases[j].pmu = pmu->name;
++<<<<<<< HEAD
++=======
+ 			aliases[j].metric_expr = alias->metric_expr;
+ 			aliases[j].metric_name = alias->metric_name;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  			j++;
  		}
  		if (pmu->selectable &&
@@@ -1226,8 -1246,14 +1249,19 @@@
  			printf("%*s", 8, "[");
  			wordwrap(aliases[j].desc, 8, columns, 0);
  			printf("]\n");
++<<<<<<< HEAD
 +			if (verbose)
 +				printf("%*s%s/%s/\n", 8, "", aliases[j].pmu, aliases[j].str);
++=======
+ 			if (verbose > 0) {
+ 				printf("%*s%s/%s/ ", 8, "", aliases[j].pmu, aliases[j].str);
+ 				if (aliases[j].metric_name)
+ 					printf(" MetricName: %s", aliases[j].metric_name);
+ 				if (aliases[j].metric_expr)
+ 					printf(" MetricExpr: %s", aliases[j].metric_expr);
+ 				putchar('\n');
+ 			}
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  		} else
  			printf("  %-50s [Kernel PMU event]\n", aliases[j].name);
  		printed++;
diff --cc tools/perf/util/pmu.h
index 3dccb15f29e9,3d4b703f5d89..000000000000
--- a/tools/perf/util/pmu.h
+++ b/tools/perf/util/pmu.h
@@@ -31,6 -31,8 +31,11 @@@ struct perf_pmu 
  
  struct perf_pmu_info {
  	const char *unit;
++<<<<<<< HEAD
++=======
+ 	const char *metric_expr;
+ 	const char *metric_name;
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  	double scale;
  	bool per_pkg;
  	bool snapshot;
diff --cc tools/perf/util/stat-shadow.c
index 8a2bbd2a4d82,ac10cc675d39..000000000000
--- a/tools/perf/util/stat-shadow.c
+++ b/tools/perf/util/stat-shadow.c
@@@ -614,6 -783,34 +614,37 @@@ void perf_stat__print_shadow_stats(stru
  					be_bound * 100.);
  		else
  			print_metric(ctxp, NULL, NULL, name, 0);
++<<<<<<< HEAD
++=======
+ 	} else if (evsel->metric_expr) {
+ 		struct parse_ctx pctx;
+ 		int i;
+ 
+ 		expr__ctx_init(&pctx);
+ 		expr__add_id(&pctx, evsel->name, avg);
+ 		for (i = 0; evsel->metric_events[i]; i++) {
+ 			struct saved_value *v;
+ 
+ 			v = saved_value_lookup(evsel->metric_events[i], cpu, ctx, false);
+ 			if (!v)
+ 				break;
+ 			expr__add_id(&pctx, evsel->metric_events[i]->name,
+ 					     avg_stats(&v->stats));
+ 		}
+ 		if (!evsel->metric_events[i]) {
+ 			const char *p = evsel->metric_expr;
+ 
+ 			if (expr__parse(&ratio, &pctx, &p) == 0)
+ 				print_metric(ctxp, NULL, "%8.1f",
+ 					evsel->metric_name ?
+ 					evsel->metric_name :
+ 					out->force_header ?  evsel->name : "",
+ 					ratio);
+ 			else
+ 				print_metric(ctxp, NULL, NULL, "", 0);
+ 		} else
+ 			print_metric(ctxp, NULL, NULL, "", 0);
++>>>>>>> 962848142335 (perf pmu: Add support for MetricName JSON attribute)
  	} else if (runtime_nsecs_stats[cpu].n != 0) {
  		char unit = 'M';
  		char unit_buf[10];
diff --git a/tools/perf/pmu-events/jevents.c b/tools/perf/pmu-events/jevents.c
index 0735dc2a167a..81f2ef3b15cf 100644
--- a/tools/perf/pmu-events/jevents.c
+++ b/tools/perf/pmu-events/jevents.c
@@ -292,7 +292,8 @@ static void print_events_table_prefix(FILE *fp, const char *tblname)
 static int print_events_table_entry(void *data, char *name, char *event,
 				    char *desc, char *long_desc,
 				    char *pmu, char *unit, char *perpkg,
-				    char *metric_expr)
+				    char *metric_expr,
+				    char *metric_name)
 {
 	struct perf_entry_data *pd = data;
 	FILE *outfp = pd->outfp;
@@ -318,6 +319,8 @@ static int print_events_table_entry(void *data, char *name, char *event,
 		fprintf(outfp, "\t.perpkg = \"%s\",\n", perpkg);
 	if (metric_expr)
 		fprintf(outfp, "\t.metric_expr = \"%s\",\n", metric_expr);
+	if (metric_name)
+		fprintf(outfp, "\t.metric_name = \"%s\",\n", metric_name);
 	fprintf(outfp, "},\n");
 
 	return 0;
@@ -366,7 +369,8 @@ int json_events(const char *fn,
 	  int (*func)(void *data, char *name, char *event, char *desc,
 		      char *long_desc,
 		      char *pmu, char *unit, char *perpkg,
-		      char *metric_expr),
+		      char *metric_expr,
+		      char *metric_name),
 	  void *data)
 {
 	int err = -EIO;
@@ -393,6 +397,7 @@ int json_events(const char *fn,
 		char *perpkg = NULL;
 		char *unit = NULL;
 		char *metric_expr = NULL;
+		char *metric_name = NULL;
 		unsigned long long eventcode = 0;
 		struct msrmap *msr = NULL;
 		jsmntok_t *msrval = NULL;
@@ -469,6 +474,8 @@ int json_events(const char *fn,
 				addfield(map, &unit, "", "", val);
 			} else if (json_streq(map, field, "PerPkg")) {
 				addfield(map, &perpkg, "", "", val);
+			} else if (json_streq(map, field, "MetricName")) {
+				addfield(map, &metric_name, "", "", val);
 			} else if (json_streq(map, field, "MetricExpr")) {
 				addfield(map, &metric_expr, "", "", val);
 				for (s = metric_expr; *s; s++)
@@ -497,7 +504,7 @@ int json_events(const char *fn,
 		fixname(name);
 
 		err = func(data, name, real_event(name, event), desc, long_desc,
-				pmu, unit, perpkg, metric_expr);
+				pmu, unit, perpkg, metric_expr, metric_name);
 		free(event);
 		free(desc);
 		free(name);
@@ -508,6 +515,7 @@ int json_events(const char *fn,
 		free(perpkg);
 		free(unit);
 		free(metric_expr);
+		free(metric_name);
 		if (err)
 			break;
 		tok += j;
diff --git a/tools/perf/pmu-events/jevents.h b/tools/perf/pmu-events/jevents.h
index 57e111bf2168..611fac01913d 100644
--- a/tools/perf/pmu-events/jevents.h
+++ b/tools/perf/pmu-events/jevents.h
@@ -5,7 +5,8 @@ int json_events(const char *fn,
 		int (*func)(void *data, char *name, char *event, char *desc,
 				char *long_desc,
 				char *pmu,
-				char *unit, char *perpkg, char *metric_expr),
+				char *unit, char *perpkg, char *metric_expr,
+				char *metric_name),
 		void *data);
 char *get_cpu_str(void);
 
diff --git a/tools/perf/pmu-events/pmu-events.h b/tools/perf/pmu-events/pmu-events.h
index d046e3a4ce46..569eab3688dd 100644
--- a/tools/perf/pmu-events/pmu-events.h
+++ b/tools/perf/pmu-events/pmu-events.h
@@ -14,6 +14,7 @@ struct pmu_event {
 	const char *unit;
 	const char *perpkg;
 	const char *metric_expr;
+	const char *metric_name;
 };
 
 /*
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
* Unmerged path tools/perf/util/parse-events.c
* Unmerged path tools/perf/util/pmu.c
* Unmerged path tools/perf/util/pmu.h
* Unmerged path tools/perf/util/stat-shadow.c
