blk-mq-sched: provide hooks for initializing hardware queue data

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit ee056f98126170ca8b16b9a4a6e20aae7c5c184e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ee056f98.failed

Schedulers need to be informed when a hardware queue is added or removed
at runtime so they can allocate/free per-hardware queue data. So,
replace the blk_mq_sched_init_hctx_data() helper, which only makes sense
at init time, with .init_hctx() and .exit_hctx() hooks.

	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit ee056f98126170ca8b16b9a4a6e20aae7c5c184e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-sched.c
#	block/blk-mq-sched.h
#	include/linux/elevator.h
diff --cc include/linux/elevator.h
index 297200f44dc5,b7ec315ee7e7..000000000000
--- a/include/linux/elevator.h
+++ b/include/linux/elevator.h
@@@ -72,6 -87,36 +72,39 @@@ struct elevator_op
  	elevator_registered_fn *elevator_registered_fn;
  };
  
++<<<<<<< HEAD
++=======
+ struct blk_mq_alloc_data;
+ struct blk_mq_hw_ctx;
+ 
+ struct elevator_mq_ops {
+ 	int (*init_sched)(struct request_queue *, struct elevator_type *);
+ 	void (*exit_sched)(struct elevator_queue *);
+ 	int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int);
+ 	void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int);
+ 
+ 	bool (*allow_merge)(struct request_queue *, struct request *, struct bio *);
+ 	bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *);
+ 	int (*request_merge)(struct request_queue *q, struct request **, struct bio *);
+ 	void (*request_merged)(struct request_queue *, struct request *, enum elv_merge);
+ 	void (*requests_merged)(struct request_queue *, struct request *, struct request *);
+ 	struct request *(*get_request)(struct request_queue *, unsigned int, struct blk_mq_alloc_data *);
+ 	void (*put_request)(struct request *);
+ 	void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool);
+ 	struct request *(*dispatch_request)(struct blk_mq_hw_ctx *);
+ 	bool (*has_work)(struct blk_mq_hw_ctx *);
+ 	void (*completed_request)(struct blk_mq_hw_ctx *, struct request *);
+ 	void (*started_request)(struct request *);
+ 	void (*requeue_request)(struct request *);
+ 	struct request *(*former_request)(struct request_queue *, struct request *);
+ 	struct request *(*next_request)(struct request_queue *, struct request *);
+ 	int (*get_rq_priv)(struct request_queue *, struct request *, struct bio *);
+ 	void (*put_rq_priv)(struct request_queue *, struct request *);
+ 	void (*init_icq)(struct io_cq *);
+ 	void (*exit_icq)(struct io_cq *);
+ };
+ 
++>>>>>>> ee056f981261 (blk-mq-sched: provide hooks for initializing hardware queue data)
  #define ELV_NAME_MAX	(16)
  
  struct elv_fs_entry {
* Unmerged path block/blk-mq-sched.c
* Unmerged path block/blk-mq-sched.h
* Unmerged path block/blk-mq-sched.c
* Unmerged path block/blk-mq-sched.h
* Unmerged path include/linux/elevator.h
