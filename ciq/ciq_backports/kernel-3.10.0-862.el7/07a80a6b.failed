iommu/amd: Define bit fields for DTE particularly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Define bit fields for DTE particularly (Jerry Snitselaar) [1062729]
Rebuild_FUZZ: 93.48%
commit-author Baoquan He <bhe@redhat.com>
commit 07a80a6b5920873a8b161ac49c5c12db7af30c0f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/07a80a6b.failed

In AMD-Vi spec several bits of IO PTE fields and DTE fields are similar
so that both of them can share the same MACRO definition. However
defining them respectively can make code more read-able. Do it now.

	Signed-off-by: Baoquan He <bhe@redhat.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 07a80a6b5920873a8b161ac49c5c12db7af30c0f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu_types.h
diff --cc drivers/iommu/amd_iommu_types.h
index c9e00df52a4f,f88e802481a3..000000000000
--- a/drivers/iommu/amd_iommu_types.h
+++ b/drivers/iommu/amd_iommu_types.h
@@@ -294,9 -323,17 +296,22 @@@
  #define IOMMU_PTE_IR (1ULL << 61)
  #define IOMMU_PTE_IW (1ULL << 62)
  
++<<<<<<< HEAD
++=======
+ /*
+  * Bit value definition for DTE fields
+  */
+ #define DTE_FLAG_V  (1ULL << 0)
+ #define DTE_FLAG_TV (1ULL << 1)
+ #define DTE_FLAG_IR (1ULL << 61)
+ #define DTE_FLAG_IW (1ULL << 62)
+ 
+ #define DTE_FLAG_IOTLB	(1ULL << 32)
+ #define DTE_FLAG_GV	(1ULL << 55)
++>>>>>>> 07a80a6b5920 (iommu/amd: Define bit fields for DTE particularly)
  #define DTE_FLAG_MASK	(0x3ffULL << 32)
 +#define DTE_FLAG_IOTLB	(0x01UL << 32)
 +#define DTE_FLAG_GV	(0x01ULL << 55)
  #define DTE_GLX_SHIFT	(56)
  #define DTE_GLX_MASK	(3)
  
diff --git a/drivers/iommu/amd_iommu.c b/drivers/iommu/amd_iommu.c
index aaf5f1c5dc10..d6da786dfffa 100644
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@ -1462,9 +1462,9 @@ static int iommu_map_page(struct protection_domain *dom,
 
 	if (count > 1) {
 		__pte = PAGE_SIZE_PTE(phys_addr, page_size);
-		__pte |= PM_LEVEL_ENC(7) | IOMMU_PTE_P | IOMMU_PTE_FC;
+		__pte |= PM_LEVEL_ENC(7) | IOMMU_PTE_PR | IOMMU_PTE_FC;
 	} else
-		__pte = phys_addr | IOMMU_PTE_P | IOMMU_PTE_FC;
+		__pte = phys_addr | IOMMU_PTE_PR | IOMMU_PTE_FC;
 
 	if (prot & IOMMU_PROT_IR)
 		__pte |= IOMMU_PTE_IR;
@@ -2077,7 +2077,7 @@ static void set_dte_entry(u16 devid, struct protection_domain *domain, bool ats)
 
 	pte_root |= (domain->mode & DEV_ENTRY_MODE_MASK)
 		    << DEV_ENTRY_MODE_SHIFT;
-	pte_root |= IOMMU_PTE_IR | IOMMU_PTE_IW | IOMMU_PTE_P | IOMMU_PTE_TV;
+	pte_root |= DTE_FLAG_IR | DTE_FLAG_IW | DTE_FLAG_V | DTE_FLAG_TV;
 
 	flags = amd_iommu_dev_table[devid].data[1];
 
@@ -2120,7 +2120,7 @@ static void set_dte_entry(u16 devid, struct protection_domain *domain, bool ats)
 static void clear_dte_entry(u16 devid)
 {
 	/* remove entry from the device table seen by the hardware */
-	amd_iommu_dev_table[devid].data[0]  = IOMMU_PTE_P | IOMMU_PTE_TV;
+	amd_iommu_dev_table[devid].data[0]  = DTE_FLAG_V | DTE_FLAG_TV;
 	amd_iommu_dev_table[devid].data[1] &= DTE_FLAG_MASK;
 
 	amd_iommu_apply_erratum_63(devid);
* Unmerged path drivers/iommu/amd_iommu_types.h
