net/mlx5e: Enhance RX SKB headroom logic

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Enhance RX SKB headroom logic (Kamal Heib) [1460489 1456694]
Rebuild_FUZZ: 94.74%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit bce2b2bf66825a56f66229980a30884704cba3d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bce2b2bf.failed

In the RX memory scheme of non Striding RQ, we use linear SKBs.
Keeping NET_IP_ALIGN in headroom can improve performance on some archs.
In addition, take this headroom into account when calculating the
LRO WQE size.

These are not needed in Striding RQ as they're done implicitly
within the non-linear SKB allocation.

Fixes: 1bfecfca565c ("net/mlx5e: Build RX SKB on demand")
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit bce2b2bf66825a56f66229980a30884704cba3d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 950c1d21ad52,66173e5545ce..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -76,44 -75,50 +76,56 @@@ static bool mlx5e_check_fragmented_stri
  		MLX5_CAP_ETH(mdev, reg_umr_sq);
  }
  
 -void mlx5e_set_rq_type_params(struct mlx5_core_dev *mdev,
 -			      struct mlx5e_params *params, u8 rq_type)
 +void mlx5e_set_rq_type_params(struct mlx5e_priv *priv, u8 rq_type)
  {
 -	params->rq_wq_type = rq_type;
 -	params->lro_wqe_sz = MLX5E_PARAMS_DEFAULT_LRO_WQE_SZ;
 -	switch (params->rq_wq_type) {
 +	priv->params.rq_wq_type = rq_type;
 +	priv->params.lro_wqe_sz = MLX5E_PARAMS_DEFAULT_LRO_WQE_SZ;
 +	switch (priv->params.rq_wq_type) {
  	case MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ:
 -		params->log_rq_size = is_kdump_kernel() ?
 -			MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE_MPW :
 -			MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE_MPW;
 -		params->mpwqe_log_stride_sz =
 -			MLX5E_GET_PFLAG(params, MLX5E_PFLAG_RX_CQE_COMPRESS) ?
 -			MLX5_MPWRQ_CQE_CMPRS_LOG_STRIDE_SZ(mdev) :
 -			MLX5_MPWRQ_DEF_LOG_STRIDE_SZ(mdev);
 -		params->mpwqe_log_num_strides = MLX5_MPWRQ_LOG_WQE_SZ -
 -			params->mpwqe_log_stride_sz;
 +		priv->params.log_rq_size = MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE_MPW;
 +		priv->params.mpwqe_log_stride_sz =
 +			MLX5E_GET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS) ?
 +			MLX5_MPWRQ_CQE_CMPRS_LOG_STRIDE_SZ(priv->mdev) :
 +			MLX5_MPWRQ_DEF_LOG_STRIDE_SZ(priv->mdev);
 +		priv->params.mpwqe_log_num_strides = MLX5_MPWRQ_LOG_WQE_SZ -
 +			priv->params.mpwqe_log_stride_sz;
  		break;
  	default: /* MLX5_WQ_TYPE_LINKED_LIST */
++<<<<<<< HEAD
 +		priv->params.log_rq_size = MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE;
 +
 +		/* Extra room needed for build_skb */
 +		priv->params.lro_wqe_sz -= MLX5_RX_HEADROOM +
++=======
+ 		params->log_rq_size = is_kdump_kernel() ?
+ 			MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE :
+ 			MLX5E_PARAMS_DEFAULT_LOG_RQ_SIZE;
+ 		params->rq_headroom = params->xdp_prog ?
+ 			XDP_PACKET_HEADROOM : MLX5_RX_HEADROOM;
+ 		params->rq_headroom += NET_IP_ALIGN;
+ 
+ 		/* Extra room needed for build_skb */
+ 		params->lro_wqe_sz -= params->rq_headroom +
++>>>>>>> bce2b2bf6682 (net/mlx5e: Enhance RX SKB headroom logic)
  			SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
  	}
 +	priv->params.min_rx_wqes = mlx5_min_rx_wqes(priv->params.rq_wq_type,
 +					       BIT(priv->params.log_rq_size));
  
 -	mlx5_core_info(mdev, "MLX5E: StrdRq(%d) RqSz(%ld) StrdSz(%ld) RxCqeCmprss(%d)\n",
 -		       params->rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ,
 -		       BIT(params->log_rq_size),
 -		       BIT(params->mpwqe_log_stride_sz),
 -		       MLX5E_GET_PFLAG(params, MLX5E_PFLAG_RX_CQE_COMPRESS));
 +	mlx5_core_info(priv->mdev,
 +		       "MLX5E: StrdRq(%d) RqSz(%ld) StrdSz(%ld) RxCqeCmprss(%d)\n",
 +		       priv->params.rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ,
 +		       BIT(priv->params.log_rq_size),
 +		       BIT(priv->params.mpwqe_log_stride_sz),
 +		       MLX5E_GET_PFLAG(priv, MLX5E_PFLAG_RX_CQE_COMPRESS));
  }
  
 -static void mlx5e_set_rq_params(struct mlx5_core_dev *mdev, struct mlx5e_params *params)
 +static void mlx5e_set_rq_priv_params(struct mlx5e_priv *priv)
  {
 -	u8 rq_type = mlx5e_check_fragmented_striding_rq_cap(mdev) &&
 -		    !params->xdp_prog ?
 +	u8 rq_type = mlx5e_check_fragmented_striding_rq_cap(priv->mdev) ?
  		    MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ :
  		    MLX5_WQ_TYPE_LINKED_LIST;
 -	mlx5e_set_rq_type_params(mdev, params, rq_type);
 +	mlx5e_set_rq_type_params(priv, rq_type);
  }
  
  static void mlx5e_update_carrier(struct mlx5e_priv *priv)
@@@ -557,18 -567,34 +569,32 @@@ static int mlx5e_create_rq(struct mlx5e
  
  	wq_sz = mlx5_wq_ll_get_size(&rq->wq);
  
 -	rq->wq_type = params->rq_wq_type;
 +	rq->wq_type = priv->params.rq_wq_type;
  	rq->pdev    = c->pdev;
  	rq->netdev  = c->netdev;
 -	rq->tstamp  = c->tstamp;
 +	rq->tstamp  = &priv->tstamp;
  	rq->channel = c;
  	rq->ix      = c->ix;
 -	rq->mdev    = mdev;
 +	rq->priv    = c->priv;
  
++<<<<<<< HEAD
 +	switch (priv->params.rq_wq_type) {
++=======
+ 	rq->xdp_prog = params->xdp_prog ? bpf_prog_inc(params->xdp_prog) : NULL;
+ 	if (IS_ERR(rq->xdp_prog)) {
+ 		err = PTR_ERR(rq->xdp_prog);
+ 		rq->xdp_prog = NULL;
+ 		goto err_rq_wq_destroy;
+ 	}
+ 
+ 	rq->buff.map_dir = rq->xdp_prog ? DMA_BIDIRECTIONAL : DMA_FROM_DEVICE;
+ 	rq->rx_headroom = params->rq_headroom;
+ 
+ 	switch (rq->wq_type) {
++>>>>>>> bce2b2bf6682 (net/mlx5e: Enhance RX SKB headroom logic)
  	case MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ:
 -
 -		rq->alloc_wqe = mlx5e_alloc_rx_mpwqe;
 -		rq->dealloc_wqe = mlx5e_dealloc_rx_mpwqe;
 -
 -		rq->handle_rx_cqe = c->priv->profile->rx_handlers.handle_rx_cqe_mpwqe;
 -		if (!rq->handle_rx_cqe) {
 +		if (mlx5e_is_vf_vport_rep(priv)) {
  			err = -EINVAL;
 -			netdev_err(c->netdev, "RX handler of MPWQE RQ is not set, err %d\n", err);
  			goto err_rq_wq_destroy;
  		}
  
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 08e121a5e7e2..4ea81656745d 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -206,6 +206,7 @@ struct mlx5e_cq_moder {
 struct mlx5e_params {
 	u8  log_sq_size;
 	u8  rq_wq_type;
+	u16 rq_headroom;
 	u8  mpwqe_log_stride_sz;
 	u8  mpwqe_log_num_strides;
 	u8  log_rq_size;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
