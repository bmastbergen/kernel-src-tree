gfs2: Fix xattr fsync

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 6862c44ec5ad0261968c3bc47d23cffb088b6836
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6862c44e.failed

Make sure that changing xattrs marks the corresponding inode dirty so
that a subsequent fsync will sync those changes to disk.  We set
I_DIRTY_SYNC as well as I_DIRTY_DATASYNC so that both fsync and
fdatasync will sync xattr changes: xattrs can contain information
critical to how the data can be accessed, so we don't want fdatasync
to skip them.

Fixes xfstest generic/066.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Reviewed-by: Andrew Price <anprice@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 6862c44ec5ad0261968c3bc47d23cffb088b6836)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/xattr.c
diff --cc fs/gfs2/xattr.c
index 6780ed3f4094,3e96dce21c1c..000000000000
--- a/fs/gfs2/xattr.c
+++ b/fs/gfs2/xattr.c
@@@ -306,13 -307,8 +305,18 @@@ static int ea_dealloc_unstuffed(struct 
  		ea->ea_num_ptrs = 0;
  	}
  
++<<<<<<< HEAD
 +	error = gfs2_meta_inode_buffer(ip, &dibh);
 +	if (!error) {
 +		ip->i_inode.i_ctime = CURRENT_TIME;
 +		gfs2_trans_add_meta(ip->i_gl, dibh);
 +		gfs2_dinode_out(ip, dibh->b_data);
 +		brelse(dibh);
 +	}
++=======
+ 	ip->i_inode.i_ctime = current_time(&ip->i_inode);
+ 	__mark_inode_dirty(&ip->i_inode, I_DIRTY_SYNC | I_DIRTY_DATASYNC);
++>>>>>>> 6862c44ec5ad (gfs2: Fix xattr fsync)
  
  	gfs2_trans_end(sdp);
  
@@@ -749,13 -767,8 +752,18 @@@ static int ea_alloc_skeleton(struct gfs
  	if (error)
  		goto out_end_trans;
  
++<<<<<<< HEAD
 +	error = gfs2_meta_inode_buffer(ip, &dibh);
 +	if (!error) {
 +		ip->i_inode.i_ctime = CURRENT_TIME;
 +		gfs2_trans_add_meta(ip->i_gl, dibh);
 +		gfs2_dinode_out(ip, dibh->b_data);
 +		brelse(dibh);
 +	}
++=======
+ 	ip->i_inode.i_ctime = current_time(&ip->i_inode);
+ 	__mark_inode_dirty(&ip->i_inode, I_DIRTY_SYNC | I_DIRTY_DATASYNC);
++>>>>>>> 6862c44ec5ad (gfs2: Fix xattr fsync)
  
  out_end_trans:
  	gfs2_trans_end(GFS2_SB(&ip->i_inode));
@@@ -883,14 -895,9 +890,20 @@@ static int ea_set_simple_noalloc(struc
  	if (es->es_el)
  		ea_set_remove_stuffed(ip, es->es_el);
  
++<<<<<<< HEAD
 +	error = gfs2_meta_inode_buffer(ip, &dibh);
 +	if (error)
 +		goto out;
 +	ip->i_inode.i_ctime = CURRENT_TIME;
 +	gfs2_trans_add_meta(ip->i_gl, dibh);
 +	gfs2_dinode_out(ip, dibh->b_data);
 +	brelse(dibh);
 +out:
++=======
+ 	ip->i_inode.i_ctime = current_time(&ip->i_inode);
+ 	__mark_inode_dirty(&ip->i_inode, I_DIRTY_SYNC | I_DIRTY_DATASYNC);
+ 
++>>>>>>> 6862c44ec5ad (gfs2: Fix xattr fsync)
  	gfs2_trans_end(GFS2_SB(&ip->i_inode));
  	return error;
  }
@@@ -1107,13 -1113,8 +1119,18 @@@ static int ea_remove_stuffed(struct gfs
  		ea->ea_type = GFS2_EATYPE_UNUSED;
  	}
  
++<<<<<<< HEAD
 +	error = gfs2_meta_inode_buffer(ip, &dibh);
 +	if (!error) {
 +		ip->i_inode.i_ctime = CURRENT_TIME;
 +		gfs2_trans_add_meta(ip->i_gl, dibh);
 +		gfs2_dinode_out(ip, dibh->b_data);
 +		brelse(dibh);
 +	}
++=======
+ 	ip->i_inode.i_ctime = current_time(&ip->i_inode);
+ 	__mark_inode_dirty(&ip->i_inode, I_DIRTY_SYNC | I_DIRTY_DATASYNC);
++>>>>>>> 6862c44ec5ad (gfs2: Fix xattr fsync)
  
  	gfs2_trans_end(GFS2_SB(&ip->i_inode));
  
* Unmerged path fs/gfs2/xattr.c
