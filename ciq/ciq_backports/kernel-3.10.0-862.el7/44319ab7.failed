platform/x86: dell-laptop: import dell_micmute_led_set() from drivers/leds/dell-led.c

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: platform/x86: dell-laptop: import dell_micmute_led_set() from leds/dell-led.c (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 91.67%
commit-author Michał Kępień <kernel@kempniu.pl>
commit 44319ab7e0ed13e550bc1714e32f037550c0d858
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/44319ab7.failed

To ensure all users of dell-smbios are in drivers/platform/x86, move the
dell_micmute_led_set() method from drivers/leds/dell-led.c to
drivers/platform/x86/dell-laptop.c.

	Signed-off-by: Michał Kępień <kernel@kempniu.pl>
	Tested-by: Alex Hung <alex.hung@canonical.com>
	Reviewed-by: Pali Rohár <pali.rohar@gmail.com>
	Acked-by: Andy Shevchenko <andy.shevchenko@gmail.com>
	Acked-by: Takashi Iwai <tiwai@suse.de>
	Signed-off-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
(cherry picked from commit 44319ab7e0ed13e550bc1714e32f037550c0d858)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/leds/dell-led.c
diff --cc drivers/leds/dell-led.c
index c36acaf566a6,c9cc36a7c890..000000000000
--- a/drivers/leds/dell-led.c
+++ b/drivers/leds/dell-led.c
@@@ -16,7 -16,7 +16,11 @@@
  #include <linux/slab.h>
  #include <linux/module.h>
  #include <linux/dmi.h>
++<<<<<<< HEAD
 +#include <linux/dell-led.h>
++=======
+ #include "../platform/x86/dell-smbios.h"
++>>>>>>> 44319ab7e0ed (platform/x86: dell-laptop: import dell_micmute_led_set() from drivers/leds/dell-led.c)
  
  MODULE_AUTHOR("Louis Davis/Jim Dailey");
  MODULE_DESCRIPTION("Dell LED Control Driver");
@@@ -42,149 -42,6 +46,152 @@@ MODULE_ALIAS("wmi:" DELL_LED_BIOS_GUID)
  #define CMD_LED_OFF	17
  #define CMD_LED_BLINK	18
  
++<<<<<<< HEAD
 +struct app_wmi_args {
 +	u16 class;
 +	u16 selector;
 +	u32 arg1;
 +	u32 arg2;
 +	u32 arg3;
 +	u32 arg4;
 +	u32 res1;
 +	u32 res2;
 +	u32 res3;
 +	u32 res4;
 +	char dummy[92];
 +};
 +
 +#define GLOBAL_MIC_MUTE_ENABLE	0x364
 +#define GLOBAL_MIC_MUTE_DISABLE	0x365
 +
 +struct dell_bios_data_token {
 +	u16 tokenid;
 +	u16 location;
 +	u16 value;
 +};
 +
 +struct __attribute__ ((__packed__)) dell_bios_calling_interface {
 +	struct	dmi_header header;
 +	u16	cmd_io_addr;
 +	u8	cmd_io_code;
 +	u32	supported_cmds;
 +	struct	dell_bios_data_token damap[];
 +};
 +
 +static struct dell_bios_data_token dell_mic_tokens[2];
 +
 +static int dell_wmi_perform_query(struct app_wmi_args *args)
 +{
 +	struct app_wmi_args *bios_return;
 +	union acpi_object *obj;
 +	struct acpi_buffer input;
 +	struct acpi_buffer output = { ACPI_ALLOCATE_BUFFER, NULL };
 +	acpi_status status;
 +	u32 rc = -EINVAL;
 +
 +	input.length = 128;
 +	input.pointer = args;
 +
 +	status = wmi_evaluate_method(DELL_APP_GUID, 0, 1, &input, &output);
 +	if (!ACPI_SUCCESS(status))
 +		goto err_out0;
 +
 +	obj = output.pointer;
 +	if (!obj)
 +		goto err_out0;
 +
 +	if (obj->type != ACPI_TYPE_BUFFER)
 +		goto err_out1;
 +
 +	bios_return = (struct app_wmi_args *)obj->buffer.pointer;
 +	rc = bios_return->res1;
 +	if (rc)
 +		goto err_out1;
 +
 +	memcpy(args, bios_return, sizeof(struct app_wmi_args));
 +	rc = 0;
 +
 + err_out1:
 +	kfree(obj);
 + err_out0:
 +	return rc;
 +}
 +
 +static void __init find_micmute_tokens(const struct dmi_header *dm, void *dummy)
 +{
 +	struct dell_bios_calling_interface *calling_interface;
 +	struct dell_bios_data_token *token;
 +	int token_size = sizeof(struct dell_bios_data_token);
 +	int i = 0;
 +
 +	if (dm->type == 0xda && dm->length > 17) {
 +		calling_interface = container_of(dm,
 +				struct dell_bios_calling_interface, header);
 +
 +		token = &calling_interface->damap[i];
 +		while (token->tokenid != 0xffff) {
 +			if (token->tokenid == GLOBAL_MIC_MUTE_DISABLE)
 +				memcpy(&dell_mic_tokens[0], token, token_size);
 +			else if (token->tokenid == GLOBAL_MIC_MUTE_ENABLE)
 +				memcpy(&dell_mic_tokens[1], token, token_size);
 +
 +			i++;
 +			token = &calling_interface->damap[i];
 +		}
 +	}
 +}
 +
 +static int dell_micmute_led_set(int state)
 +{
 +	struct app_wmi_args args;
 +	struct dell_bios_data_token *token;
 +
 +	if (!wmi_has_guid(DELL_APP_GUID))
 +		return -ENODEV;
 +
 +	if (state == 0 || state == 1)
 +		token = &dell_mic_tokens[state];
 +	else
 +		return -EINVAL;
 +
 +	memset(&args, 0, sizeof(struct app_wmi_args));
 +
 +	args.class = 1;
 +	args.arg1 = token->location;
 +	args.arg2 = token->value;
 +
 +	dell_wmi_perform_query(&args);
 +
 +	return state;
 +}
 +
 +int dell_app_wmi_led_set(int whichled, int on)
 +{
 +	int state = 0;
 +
 +	switch (whichled) {
 +	case DELL_LED_MICMUTE:
 +		state = dell_micmute_led_set(on);
 +		break;
 +	default:
 +		pr_warn("led type %x is not supported\n", whichled);
 +		break;
 +	}
 +
 +	return state;
 +}
 +EXPORT_SYMBOL_GPL(dell_app_wmi_led_set);
 +
 +static int __init dell_micmute_led_init(void)
 +{
 +	memset(dell_mic_tokens, 0, sizeof(struct dell_bios_data_token) * 2);
 +	dmi_walk(find_micmute_tokens, NULL);
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> 44319ab7e0ed (platform/x86: dell-laptop: import dell_micmute_led_set() from drivers/leds/dell-led.c)
  struct bios_args {
  	unsigned char length;
  	unsigned char result_code;
* Unmerged path drivers/leds/dell-led.c
diff --git a/drivers/platform/x86/dell-laptop.c b/drivers/platform/x86/dell-laptop.c
index f2366c77d3b3..2e7d2c2651f7 100644
--- a/drivers/platform/x86/dell-laptop.c
+++ b/drivers/platform/x86/dell-laptop.c
@@ -29,6 +29,7 @@
 #include <linux/mm.h>
 #include <linux/i8042.h>
 #include <linux/debugfs.h>
+#include <linux/dell-led.h>
 #include <linux/seq_file.h>
 #include "dell-rbtn.h"
 #include "dell-smbios.h"
@@ -41,6 +42,8 @@
 #define KBD_LED_AUTO_50_TOKEN 0x02EB
 #define KBD_LED_AUTO_75_TOKEN 0x02EC
 #define KBD_LED_AUTO_100_TOKEN 0x02F6
+#define GLOBAL_MIC_MUTE_ENABLE 0x0364
+#define GLOBAL_MIC_MUTE_DISABLE 0x0365
 
 struct quirk_entry {
 	u8 touchpad_led;
@@ -1970,6 +1973,31 @@ static void kbd_led_exit(void)
 	led_classdev_unregister(&kbd_led);
 }
 
+int dell_micmute_led_set(int state)
+{
+	struct calling_interface_buffer *buffer;
+	struct calling_interface_token *token;
+
+	if (state == 0)
+		token = dell_smbios_find_token(GLOBAL_MIC_MUTE_DISABLE);
+	else if (state == 1)
+		token = dell_smbios_find_token(GLOBAL_MIC_MUTE_ENABLE);
+	else
+		return -EINVAL;
+
+	if (!token)
+		return -ENODEV;
+
+	buffer = dell_smbios_get_buffer();
+	buffer->input[0] = token->location;
+	buffer->input[1] = token->value;
+	dell_smbios_send_request(1, 0);
+	dell_smbios_release_buffer();
+
+	return state;
+}
+EXPORT_SYMBOL_GPL(dell_micmute_led_set);
+
 static int __init dell_init(void)
 {
 	struct calling_interface_buffer *buffer;
diff --git a/sound/pci/hda/dell_wmi_helper.c b/sound/pci/hda/dell_wmi_helper.c
index 19d41da79f93..86e32aed599a 100644
--- a/sound/pci/hda/dell_wmi_helper.c
+++ b/sound/pci/hda/dell_wmi_helper.c
@@ -2,7 +2,7 @@
  * to be included from codec driver
  */
 
-#if IS_ENABLED(CONFIG_LEDS_DELL_NETBOOKS)
+#if IS_ENABLED(CONFIG_DELL_LAPTOP)
 #include <linux/dell-led.h>
 
 static int dell_led_value;
@@ -67,10 +67,10 @@ static void alc_fixup_dell_wmi(struct hda_codec *codec,
 	}
 }
 
-#else /* CONFIG_LEDS_DELL_NETBOOKS */
+#else /* CONFIG_DELL_LAPTOP */
 static void alc_fixup_dell_wmi(struct hda_codec *codec,
 			       const struct hda_fixup *fix, int action)
 {
 }
 
-#endif /* CONFIG_LEDS_DELL_NETBOOKS */
+#endif /* CONFIG_DELL_LAPTOP */
