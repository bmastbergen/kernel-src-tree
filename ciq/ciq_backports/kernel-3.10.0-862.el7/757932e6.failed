PKCS#7: Handle PKCS#7 messages that contain no X.509 certs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author David Howells <dhowells@redhat.com>
commit 757932e6da6de05b91cc4cb85493b17de48c2667
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/757932e6.failed

The X.509 certificate list in a PKCS#7 message is optional.  To save space, we
can omit the inclusion of any X.509 certificates if we are sure that we can
look the relevant public key up by the serial number and issuer given in a
signed info block.

This also supports use of a signed info block for which we can't find a
matching X.509 cert in the certificate list, though it be populated.

	Signed-off-by: David Howells <dhowells@redhat.com>
	Acked-by: Vivek Goyal <vgoyal@redhat.com>
(cherry picked from commit 757932e6da6de05b91cc4cb85493b17de48c2667)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/asymmetric_keys/pkcs7_trust.c
#	crypto/asymmetric_keys/pkcs7_verify.c
diff --cc crypto/asymmetric_keys/pkcs7_trust.c
index 381d0967a519,ae47be6128c4..000000000000
--- a/crypto/asymmetric_keys/pkcs7_trust.c
+++ b/crypto/asymmetric_keys/pkcs7_trust.c
@@@ -54,9 -54,8 +54,14 @@@ static int pkcs7_validate_trust_one(str
  		/* Look to see if this certificate is present in the trusted
  		 * keys.
  		 */
++<<<<<<< HEAD
 +		key = x509_request_asymmetric_key(trust_keyring, x509->subject,
 +						  x509->fingerprint);
 +		if (!IS_ERR(key))
++=======
+ 		key = x509_request_asymmetric_key(trust_keyring, x509->id);
+ 		if (!IS_ERR(key)) {
++>>>>>>> 757932e6da6d (PKCS#7: Handle PKCS#7 messages that contain no X.509 certs)
  			/* One of the X.509 certificates in the PKCS#7 message
  			 * is apparently the same as one we already trust.
  			 * Verify that the trusted variant can also validate
@@@ -82,16 -84,34 +90,42 @@@
  	/* No match - see if the root certificate has a signer amongst the
  	 * trusted keys.
  	 */
- 	if (!last || !last->issuer || !last->authority) {
- 		kleave(" = -ENOKEY [no backref]");
- 		return -ENOKEY;
+ 	if (last && last->authority) {
+ 		key = x509_request_asymmetric_key(trust_keyring, last->authority);
+ 		if (!IS_ERR(key)) {
+ 			x509 = last;
+ 			pr_devel("sinfo %u: Root cert %u signer is key %x\n",
+ 				 sinfo->index, x509->index, key_serial(key));
+ 			goto matched;
+ 		}
+ 		if (PTR_ERR(key) != -ENOKEY)
+ 			return PTR_ERR(key);
  	}
  
++<<<<<<< HEAD
 +	key = x509_request_asymmetric_key(trust_keyring, last->issuer,
 +					  last->authority);
 +	if (IS_ERR(key))
 +		return PTR_ERR(key) == -ENOMEM ? -ENOMEM : -ENOKEY;
 +	x509 = last;
++=======
+ 	/* As a last resort, see if we have a trusted public key that matches
+ 	 * the signed info directly.
+ 	 */
+ 	key = x509_request_asymmetric_key(trust_keyring,
+ 					  sinfo->signing_cert_id);
+ 	if (!IS_ERR(key)) {
+ 		pr_devel("sinfo %u: Direct signer is key %x\n",
+ 			 sinfo->index, key_serial(key));
+ 		x509 = NULL;
+ 		goto matched;
+ 	}
+ 	if (PTR_ERR(key) != -ENOKEY)
+ 		return PTR_ERR(key);
+ 
+ 	kleave(" = -ENOKEY [no backref]");
+ 	return -ENOKEY;
++>>>>>>> 757932e6da6d (PKCS#7: Handle PKCS#7 messages that contain no X.509 certs)
  
  matched:
  	ret = verify_signature(key, sig);
diff --cc crypto/asymmetric_keys/pkcs7_verify.c
index 7f05d5204173,cd455450b069..000000000000
--- a/crypto/asymmetric_keys/pkcs7_verify.c
+++ b/crypto/asymmetric_keys/pkcs7_verify.c
@@@ -164,9 -153,14 +164,20 @@@ static int pkcs7_find_key(struct pkcs7_
  		sinfo->signer = x509;
  		return 0;
  	}
++<<<<<<< HEAD
 +	pr_warn("Sig %u: Issuing X.509 cert not found (#%*ph)\n",
 +		sinfo->index, sinfo->raw_serial_size, sinfo->raw_serial);
 +	return -ENOKEY;
++=======
+ 
+ 	/* The relevant X.509 cert isn't found here, but it might be found in
+ 	 * the trust keyring.
+ 	 */
+ 	pr_debug("Sig %u: Issuing X.509 cert not found (#%*phN)\n",
+ 		 sinfo->index,
+ 		 sinfo->signing_cert_id->len, sinfo->signing_cert_id->data);
+ 	return 0;
++>>>>>>> 757932e6da6d (PKCS#7: Handle PKCS#7 messages that contain no X.509 certs)
  }
  
  /*
* Unmerged path crypto/asymmetric_keys/pkcs7_trust.c
* Unmerged path crypto/asymmetric_keys/pkcs7_verify.c
