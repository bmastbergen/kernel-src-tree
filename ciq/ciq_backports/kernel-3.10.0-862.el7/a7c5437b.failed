debugfs: add debugfs_lookup()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit a7c5437b0bbec5165df6eb1efc5e37dc40b9e05d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a7c5437b.failed

We don't always have easy access to the dentry of a file or directory we
created in debugfs. Add a helper which allows us to get a dentry we
previously created.

The motivation for this change is a problem with blktrace and the blk-mq
debugfs entries introduced in 07e4fead45e6 ("blk-mq: create debugfs
directory tree"). Namely, in some cases, the directory that blktrace
needs to create may already exist, but in other cases, it may not. We
_could_ rely on a bunch of implied knowledge to decide whether to create
the directory or not, but it's much cleaner on our end to just look it
up.

	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit a7c5437b0bbec5165df6eb1efc5e37dc40b9e05d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/debugfs/inode.c
#	include/linux/debugfs.h
diff --cc fs/debugfs/inode.c
index c7c83ff0f752,7fb1732a3630..000000000000
--- a/fs/debugfs/inode.c
+++ b/fs/debugfs/inode.c
@@@ -301,11 -248,45 +301,51 @@@ static struct file_system_type debug_fs
  };
  MODULE_ALIAS_FS("debugfs");
  
++<<<<<<< HEAD
 +static struct dentry *__create_file(const char *name, umode_t mode,
 +				    struct dentry *parent, void *data,
 +				    const struct file_operations *fops)
++=======
+ /**
+  * debugfs_lookup() - look up an existing debugfs file
+  * @name: a pointer to a string containing the name of the file to look up.
+  * @parent: a pointer to the parent dentry of the file.
+  *
+  * This function will return a pointer to a dentry if it succeeds.  If the file
+  * doesn't exist or an error occurs, %NULL will be returned.  The returned
+  * dentry must be passed to dput() when it is no longer needed.
+  *
+  * If debugfs is not enabled in the kernel, the value -%ENODEV will be
+  * returned.
+  */
+ struct dentry *debugfs_lookup(const char *name, struct dentry *parent)
+ {
+ 	struct dentry *dentry;
+ 
+ 	if (IS_ERR(parent))
+ 		return NULL;
+ 
+ 	if (!parent)
+ 		parent = debugfs_mount->mnt_root;
+ 
+ 	inode_lock(d_inode(parent));
+ 	dentry = lookup_one_len(name, parent, strlen(name));
+ 	inode_unlock(d_inode(parent));
+ 
+ 	if (IS_ERR(dentry))
+ 		return NULL;
+ 	if (!d_really_is_positive(dentry)) {
+ 		dput(dentry);
+ 		return NULL;
+ 	}
+ 	return dentry;
+ }
+ EXPORT_SYMBOL_GPL(debugfs_lookup);
+ 
+ static struct dentry *start_creating(const char *name, struct dentry *parent)
++>>>>>>> a7c5437b0bbe (debugfs: add debugfs_lookup())
  {
 -	struct dentry *dentry;
 +	struct dentry *dentry = NULL;
  	int error;
  
  	pr_debug("debugfs: creating file '%s'\n",name);
diff --cc include/linux/debugfs.h
index fef98de75d0d,c0befcf41b58..000000000000
--- a/include/linux/debugfs.h
+++ b/include/linux/debugfs.h
@@@ -40,11 -43,44 +40,15 @@@ struct debugfs_regset32 
  
  extern struct dentry *arch_debugfs_dir;
  
 -extern struct srcu_struct debugfs_srcu;
 -
 -/**
 - * debugfs_real_fops - getter for the real file operation
 - * @filp: a pointer to a struct file
 - *
 - * Must only be called under the protection established by
 - * debugfs_use_file_start().
 - */
 -static inline const struct file_operations *
 -debugfs_real_fops(const struct file *filp)
 -	__must_hold(&debugfs_srcu)
 -{
 -	/*
 -	 * Neither the pointer to the struct file_operations, nor its
 -	 * contents ever change -- srcu_dereference() is not needed here.
 -	 */
 -	return filp->f_path.dentry->d_fsdata;
 -}
 -
 -#define DEFINE_DEBUGFS_ATTRIBUTE(__fops, __get, __set, __fmt)		\
 -static int __fops ## _open(struct inode *inode, struct file *file)	\
 -{									\
 -	__simple_attr_check_format(__fmt, 0ull);			\
 -	return simple_attr_open(inode, file, __get, __set, __fmt);	\
 -}									\
 -static const struct file_operations __fops = {				\
 -	.owner	 = THIS_MODULE,						\
 -	.open	 = __fops ## _open,					\
 -	.release = simple_attr_release,					\
 -	.read	 = debugfs_attr_read,					\
 -	.write	 = debugfs_attr_write,					\
 -	.llseek  = generic_file_llseek,					\
 -}
 -
  #if defined(CONFIG_DEBUG_FS)
  
++<<<<<<< HEAD
 +/* declared over in file.c */
 +extern const struct file_operations debugfs_file_operations;
 +extern const struct inode_operations debugfs_link_operations;
++=======
+ struct dentry *debugfs_lookup(const char *name, struct dentry *parent);
++>>>>>>> a7c5437b0bbe (debugfs: add debugfs_lookup())
  
  struct dentry *debugfs_create_file(const char *name, umode_t mode,
  				   struct dentry *parent, void *data,
* Unmerged path fs/debugfs/inode.c
* Unmerged path include/linux/debugfs.h
