netvsc: change order of steps in setting queues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit a5e1ec3833211bc0136649a89ee3a29355c7b43b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a5e1ec38.failed

This fixes the error unwind logic for incorrect number of queues.
If netif_set_real_num_XX_queues failed then rndis_filter_device_add
would have been called twice. Since input arguments are already
ranged checked this is a hypothetical only problem, not possible
in actual code.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a5e1ec3833211bc0136649a89ee3a29355c7b43b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index d4dc9c189b85,91637336d1fb..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -736,6 -713,28 +736,31 @@@ static void netvsc_get_channels(struct 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static int netvsc_set_queues(struct net_device *net, struct hv_device *dev,
+ 			     u32 num_chn)
+ {
+ 	struct netvsc_device_info device_info;
+ 	int ret;
+ 
+ 	memset(&device_info, 0, sizeof(device_info));
+ 	device_info.num_chn = num_chn;
+ 	device_info.ring_size = ring_size;
+ 	device_info.max_num_vrss_chns = num_chn;
+ 
+ 	ret = netif_set_real_num_tx_queues(net, num_chn);
+ 	if (ret)
+ 		return ret;
+ 
+ 	ret = netif_set_real_num_rx_queues(net, num_chn);
+ 	if (ret)
+ 		return ret;
+ 
+ 	return rndis_filter_device_add(dev, &device_info);
+ }
+ 
++>>>>>>> a5e1ec383321 (netvsc: change order of steps in setting queues)
  static int netvsc_set_channels(struct net_device *net,
  			       struct ethtool_channels *channels)
  {
* Unmerged path drivers/net/hyperv/netvsc_drv.c
