ACPI / osi: Cleanup _OSI("Linux") related code before introducing new support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Lv Zheng <lv.zheng@intel.com>
commit dbee890bf69ad62c021e299e24881fdcd1f2c481
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/dbee890b.failed

This patch cleans up OSI code in osl.c to make osi_linux work for OSI
strings other than "Linux", so it can be re-used for other purposes.

	Tested-by: Lukas Wunner <lukas@wunner.de>
	Tested-by: Chen Yu <yu.c.chen@intel.com>
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit dbee890bf69ad62c021e299e24881fdcd1f2c481)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/osl.c
diff --cc drivers/acpi/osl.c
index 167afd5f464f,9f59dd1a0af7..000000000000
--- a/drivers/acpi/osl.c
+++ b/drivers/acpi/osl.c
@@@ -139,11 -131,12 +139,20 @@@ static void __init acpi_osi_setup_late(
   * or boot with "acpi_osi=Linux"
   */
  
++<<<<<<< HEAD
 +static struct osi_linux {
 +	unsigned int	enable:1;
 +	unsigned int	dmi:1;
 +	unsigned int	cmdline:1;
 +} osi_linux = {0, 0, 0};
++=======
+ static struct acpi_osi_config {
+ 	unsigned int	linux_enable:1;
+ 	unsigned int	linux_dmi:1;
+ 	unsigned int	linux_cmdline:1;
+ 	u8		default_disabling;
+ } osi_config = {0, 0, 0, 0};
++>>>>>>> dbee890bf69a (ACPI / osi: Cleanup _OSI("Linux") related code before introducing new support)
  
  static u32 acpi_osi_handler(acpi_string interface, u32 supported)
  {
@@@ -151,11 -144,21 +160,11 @@@
  
  		printk_once(KERN_NOTICE FW_BUG PREFIX
  			"BIOS _OSI(Linux) query %s%s\n",
- 			osi_linux.enable ? "honored" : "ignored",
- 			osi_linux.cmdline ? " via cmdline" :
- 			osi_linux.dmi ? " via DMI" : "");
+ 			osi_config.linux_enable ? "honored" : "ignored",
+ 			osi_config.linux_cmdline ? " via cmdline" :
+ 			osi_config.linux_dmi ? " via DMI" : "");
  	}
  
 -	if (!strcmp("Darwin", interface)) {
 -		/*
 -		 * Apple firmware will behave poorly if it receives positive
 -		 * answers to "Darwin" and any other OS. Respond positively
 -		 * to Darwin and then disable all other vendor strings.
 -		 */
 -		acpi_update_interfaces(ACPI_DISABLE_ALL_VENDOR_STRINGS);
 -		supported = ACPI_UINT32_MAX;
 -	}
 -
  	return supported;
  }
  
@@@ -1406,6 -1750,20 +1415,23 @@@ void __init acpi_osi_setup(char *str
  
  	if (*str == '!') {
  		str++;
++<<<<<<< HEAD
++=======
+ 		if (*str == '\0') {
+ 			/* Do not override acpi_osi=!* */
+ 			if (!osi_config.default_disabling)
+ 				osi_config.default_disabling =
+ 					ACPI_DISABLE_ALL_VENDOR_STRINGS;
+ 			return;
+ 		} else if (*str == '*') {
+ 			osi_config.default_disabling = ACPI_DISABLE_ALL_STRINGS;
+ 			for (i = 0; i < OSI_STRING_ENTRIES_MAX; i++) {
+ 				osi = &osi_setup_entries[i];
+ 				osi->enable = false;
+ 			}
+ 			return;
+ 		}
++>>>>>>> dbee890bf69a (ACPI / osi: Cleanup _OSI("Linux") related code before introducing new support)
  		enable = false;
  	}
  
@@@ -1471,6 -1831,16 +1499,19 @@@ static void __init acpi_osi_setup_late(
  	int i;
  	acpi_status status;
  
++<<<<<<< HEAD
++=======
+ 	if (osi_config.default_disabling) {
+ 		status = acpi_update_interfaces(osi_config.default_disabling);
+ 
+ 		if (ACPI_SUCCESS(status))
+ 			printk(KERN_INFO PREFIX "Disabled all _OSI OS vendors%s\n",
+ 				osi_config.default_disabling ==
+ 				ACPI_DISABLE_ALL_STRINGS ?
+ 				" and feature groups" : "");
+ 	}
+ 
++>>>>>>> dbee890bf69a (ACPI / osi: Cleanup _OSI("Linux") related code before introducing new support)
  	for (i = 0; i < OSI_STRING_ENTRIES_MAX; i++) {
  		osi = &osi_setup_entries[i];
  		str = osi->string;
* Unmerged path drivers/acpi/osl.c
