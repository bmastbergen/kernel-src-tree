iommu/amd: Fix checking of pci dma aliases

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Fix checking of pci dma aliases (Jerry Snitselaar) [1411581]
Rebuild_FUZZ: 92.31%
commit-author Joerg Roedel <jroedel@suse.de>
commit e3156048346c28c695f5cf9db67a8cf88c90f947
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e3156048.failed

Commit 61289cb ('iommu/amd: Remove old alias handling code')
removed the old alias handling code from the AMD IOMMU
driver because this is now handled by the IOMMU core code.

But this also removed the handling of PCI aliases, which is
not handled by the core code. This caused issues with PCI
devices that have hidden PCIe-to-PCI bridges that rewrite
the request-id.

Fix this bug by re-introducing some of the removed functions
from commit 61289cbaf6c8 and add a alias field
'struct iommu_dev_data'. This field carrys the return value
of the get_alias() function and uses that instead of the
amd_iommu_alias_table[] array in the code.

Fixes: 61289cbaf6c8 ('iommu/amd: Remove old alias handling code')
	Cc: stable@vger.kernel.org # v4.4+
	Tested-by: Tomasz Golinski <tomaszg@math.uwb.edu.pl>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit e3156048346c28c695f5cf9db67a8cf88c90f947)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
diff --cc drivers/iommu/amd_iommu.c
index ea575916d7ba,5efadad4615b..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -88,10 -90,9 +88,11 @@@ static struct dma_map_ops amd_iommu_dma
  struct iommu_dev_data {
  	struct list_head list;		  /* For domain->dev_list */
  	struct list_head dev_data_list;	  /* For global dev_data_list */
 +	struct list_head alias_list;      /* Link alias-groups together */
 +	struct iommu_dev_data *alias_data;/* The alias dev_data */
  	struct protection_domain *domain; /* Domain the device is bound to */
  	u16 devid;			  /* PCI Device ID */
+ 	u16 alias;			  /* Alias Device ID */
  	bool iommu_v2;			  /* Device can make use of IOMMUv2 */
  	bool passthrough;		  /* Device is identity mapped */
  	struct {
@@@ -424,23 -412,7 +487,27 @@@ static int iommu_init_device(struct dev
  	if (!dev_data)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	alias = get_alias(dev);
 +
 +	if (alias != dev_data->devid) {
 +		struct iommu_dev_data *alias_data;
 +
 +		alias_data = find_dev_data(alias);
 +		if (alias_data == NULL) {
 +			pr_err("AMD-Vi: Warning: Unhandled device %s\n",
 +					dev_name(dev));
 +			free_dev_data(dev_data);
 +			return -ENOTSUPP;
 +		}
 +		dev_data->alias_data = alias_data;
 +
 +		/* Add device to the alias_list */
 +		list_add(&dev_data->alias_list, &alias_data->alias_list);
 +	}
++=======
+ 	dev_data->alias = get_alias(dev);
++>>>>>>> e3156048346c (iommu/amd: Fix checking of pci dma aliases)
  
  	if (pci_iommuv2_capable(pdev)) {
  		struct amd_iommu *iommu;
* Unmerged path drivers/iommu/amd_iommu.c
