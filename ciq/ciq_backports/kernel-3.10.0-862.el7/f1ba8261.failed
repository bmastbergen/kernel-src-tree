blk-mq: pass bio to blk_mq_sched_get_rq_priv

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Paolo Valente <paolo.valente@linaro.org>
commit f1ba82616c3368e1ae9e64ef29cf3edc1be0860d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f1ba8261.failed

bio is used in bfq-mq's get_rq_priv, to get the request group. We could
pass directly the group here, but I thought that passing the bio was
more general, giving the possibility to get other pieces of information
if needed.

	Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit f1ba82616c3368e1ae9e64ef29cf3edc1be0860d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-sched.c
#	block/blk-mq-sched.h
#	include/linux/elevator.h
diff --cc include/linux/elevator.h
index 297200f44dc5,aebecc4ed088..000000000000
--- a/include/linux/elevator.h
+++ b/include/linux/elevator.h
@@@ -72,6 -87,34 +72,37 @@@ struct elevator_op
  	elevator_registered_fn *elevator_registered_fn;
  };
  
++<<<<<<< HEAD
++=======
+ struct blk_mq_alloc_data;
+ struct blk_mq_hw_ctx;
+ 
+ struct elevator_mq_ops {
+ 	int (*init_sched)(struct request_queue *, struct elevator_type *);
+ 	void (*exit_sched)(struct elevator_queue *);
+ 
+ 	bool (*allow_merge)(struct request_queue *, struct request *, struct bio *);
+ 	bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *);
+ 	int (*request_merge)(struct request_queue *q, struct request **, struct bio *);
+ 	void (*request_merged)(struct request_queue *, struct request *, enum elv_merge);
+ 	void (*requests_merged)(struct request_queue *, struct request *, struct request *);
+ 	struct request *(*get_request)(struct request_queue *, unsigned int, struct blk_mq_alloc_data *);
+ 	void (*put_request)(struct request *);
+ 	void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool);
+ 	struct request *(*dispatch_request)(struct blk_mq_hw_ctx *);
+ 	bool (*has_work)(struct blk_mq_hw_ctx *);
+ 	void (*completed_request)(struct blk_mq_hw_ctx *, struct request *);
+ 	void (*started_request)(struct request *);
+ 	void (*requeue_request)(struct request *);
+ 	struct request *(*former_request)(struct request_queue *, struct request *);
+ 	struct request *(*next_request)(struct request_queue *, struct request *);
+ 	int (*get_rq_priv)(struct request_queue *, struct request *, struct bio *);
+ 	void (*put_rq_priv)(struct request_queue *, struct request *);
+ 	void (*init_icq)(struct io_cq *);
+ 	void (*exit_icq)(struct io_cq *);
+ };
+ 
++>>>>>>> f1ba82616c33 (blk-mq: pass bio to blk_mq_sched_get_rq_priv)
  #define ELV_NAME_MAX	(16)
  
  struct elv_fs_entry {
* Unmerged path block/blk-mq-sched.c
* Unmerged path block/blk-mq-sched.h
* Unmerged path block/blk-mq-sched.c
* Unmerged path block/blk-mq-sched.h
* Unmerged path include/linux/elevator.h
