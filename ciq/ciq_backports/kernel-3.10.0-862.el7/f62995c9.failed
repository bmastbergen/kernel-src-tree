x86/boot/KASLR: Wrap e820 entries walking code into new function process_e820_entries()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Baoquan He <bhe@redhat.com>
commit f62995c92a29e4d9331382b8b2461eef3b9c7c6b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f62995c9.failed

The original function process_e820_entry() only takes care of each
e820 entry passed.

And move the E820_TYPE_RAM checking logic into process_e820_entries().

And remove the redundent local variable 'addr' definition in
find_random_phys_addr().

	Signed-off-by: Baoquan He <bhe@redhat.com>
	Acked-by: Kees Cook <keescook@chromium.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: fanc.fnst@cn.fujitsu.com
	Cc: izumi.taku@jp.fujitsu.com
	Cc: matt@codeblueprint.co.uk
	Cc: thgarnie@google.com
Link: http://lkml.kernel.org/r/1499603862-11516-2-git-send-email-bhe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f62995c92a29e4d9331382b8b2461eef3b9c7c6b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/kaslr.c
diff --cc arch/x86/boot/compressed/kaslr.c
index b93f968ac8d4,1485f48aeda1..000000000000
--- a/arch/x86/boot/compressed/kaslr.c
+++ b/arch/x86/boot/compressed/kaslr.c
@@@ -486,12 -486,8 +486,15 @@@ static void process_e820_entry(struct e
  	struct mem_vector region, overlap;
  	struct slot_area slot_area;
  	unsigned long start_orig, end;
 -	struct boot_e820_entry cur_entry;
 +	struct e820entry cur_entry;
  
++<<<<<<< HEAD
 +	/* Skip non-RAM entries. */
 +	if (entry->type != E820_RAM)
 +		return;
 +
++=======
++>>>>>>> f62995c92a29 (x86/boot/KASLR: Wrap e820 entries walking code into new function process_e820_entries())
  	/* On 32-bit, ignore entries entirely above our maximum. */
  	if (IS_ENABLED(CONFIG_X86_32) && entry->addr >= KERNEL_IMAGE_SIZE)
  		return;
@@@ -577,16 -590,7 +597,20 @@@ static unsigned long find_random_phys_a
  	/* Make sure minimum is aligned. */
  	minimum = ALIGN(minimum, CONFIG_PHYSICAL_ALIGN);
  
++<<<<<<< HEAD
 +	/* Verify potential e820 positions, appending to slots list. */
 +	for (i = 0; i < boot_params->e820_entries; i++) {
 +		process_e820_entry(&boot_params->e820_map[i], minimum,
 +				   image_size);
 +		if (slot_area_index == MAX_SLOT_AREA) {
 +			debug_putstr("Aborted e820 scan (slot_areas full)!\n");
 +			break;
 +		}
 +	}
 +
++=======
+ 	process_e820_entries(minimum, image_size);
++>>>>>>> f62995c92a29 (x86/boot/KASLR: Wrap e820 entries walking code into new function process_e820_entries())
  	return slots_fetch_random();
  }
  
* Unmerged path arch/x86/boot/compressed/kaslr.c
