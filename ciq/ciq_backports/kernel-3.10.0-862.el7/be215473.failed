blk-mq: move hctx io_poll, stats, and dispatched from sysfs to debugfs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit be21547318b2c7d9988237b106cc63767b86eae4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/be215473.failed

These statistics _might_ be useful to userspace, but it's better not to
commit to an ABI for these yet. Also, the dispatched file in sysfs
couldn't be cleared, so make it clearable like the others in debugfs.

	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit be21547318b2c7d9988237b106cc63767b86eae4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-debugfs.c
#	block/blk-mq-sysfs.c
diff --cc block/blk-mq-sysfs.c
index 08941faf0f9a,f505da2c542e..000000000000
--- a/block/blk-mq-sysfs.c
+++ b/block/blk-mq-sysfs.c
@@@ -139,41 -139,6 +139,44 @@@ static ssize_t blk_mq_sysfs_completed_s
  				ctx->rq_completed[0]);
  }
  
++<<<<<<< HEAD
 +static ssize_t sysfs_list_show(char *page, struct list_head *list, char *msg)
 +{
 +	struct request *rq;
 +	int len = snprintf(page, PAGE_SIZE - 1, "%s:\n", msg);
 +
 +	list_for_each_entry(rq, list, queuelist) {
 +		const int rq_len = 2 * sizeof(rq) + 2;
 +
 +		/* if the output will be truncated */
 +		if (PAGE_SIZE - 1 < len + rq_len) {
 +			/* backspacing if it can't hold '\t...\n' */
 +			if (PAGE_SIZE - 1 < len + 5)
 +				len -= rq_len;
 +			len += snprintf(page + len, PAGE_SIZE - 1 - len,
 +					"\t...\n");
 +			break;
 +		}
 +		len += snprintf(page + len, PAGE_SIZE - 1 - len,
 +				"\t%p\n", rq);
 +	}
 +
 +	return len;
 +}
 +
 +static ssize_t blk_mq_sysfs_rq_list_show(struct blk_mq_ctx *ctx, char *page)
 +{
 +	ssize_t ret;
 +
 +	spin_lock(&ctx->lock);
 +	ret = sysfs_list_show(page, &ctx->rq_list, "CTX pending");
 +	spin_unlock(&ctx->lock);
 +
 +	return ret;
 +}
 +
++=======
++>>>>>>> be21547318b2 (blk-mq: move hctx io_poll, stats, and dispatched from sysfs to debugfs)
  static ssize_t blk_mq_hw_sysfs_queued_show(struct blk_mq_hw_ctx *hctx,
  					   char *page)
  {
@@@ -185,40 -150,16 +188,44 @@@ static ssize_t blk_mq_hw_sysfs_run_show
  	return sprintf(page, "%lu\n", hctx->run);
  }
  
++<<<<<<< HEAD
 +static ssize_t blk_mq_hw_sysfs_dispatched_show(struct blk_mq_hw_ctx *hctx,
 +					       char *page)
 +{
 +	char *start_page = page;
 +	int i;
 +
 +	page += sprintf(page, "%8u\t%lu\n", 0U, hctx->dispatched[0]);
 +
 +	for (i = 1; i < BLK_MQ_MAX_DISPATCH_ORDER - 1; i++) {
 +		unsigned int d = 1U << (i - 1);
 +
 +		page += sprintf(page, "%8u\t%lu\n", d, hctx->dispatched[i]);
 +	}
 +
 +	page += sprintf(page, "%8u+\t%lu\n", 1U << (i - 1),
 +						hctx->dispatched[i]);
 +	return page - start_page;
 +}
 +
 +static ssize_t blk_mq_hw_sysfs_rq_list_show(struct blk_mq_hw_ctx *hctx,
++=======
+ static ssize_t blk_mq_hw_sysfs_nr_tags_show(struct blk_mq_hw_ctx *hctx,
++>>>>>>> be21547318b2 (blk-mq: move hctx io_poll, stats, and dispatched from sysfs to debugfs)
  					    char *page)
  {
 -	return sprintf(page, "%u\n", hctx->tags->nr_tags);
 +	ssize_t ret;
 +
 +	spin_lock(&hctx->lock);
 +	ret = sysfs_list_show(page, &hctx->dispatch, "HCTX pending");
 +	spin_unlock(&hctx->lock);
 +
 +	return ret;
  }
  
 -static ssize_t blk_mq_hw_sysfs_nr_reserved_tags_show(struct blk_mq_hw_ctx *hctx,
 -						     char *page)
 +static ssize_t blk_mq_hw_sysfs_tags_show(struct blk_mq_hw_ctx *hctx, char *page)
  {
 -	return sprintf(page, "%u\n", hctx->tags->nr_reserved_tags);
 +	return blk_mq_tag_sysfs_show(hctx->tags, page);
  }
  
  static ssize_t blk_mq_hw_sysfs_active_show(struct blk_mq_hw_ctx *hctx, char *page)
@@@ -277,9 -213,13 +284,19 @@@ static struct blk_mq_hw_ctx_sysfs_entr
  	.attr = {.name = "run", .mode = S_IRUGO },
  	.show = blk_mq_hw_sysfs_run_show,
  };
++<<<<<<< HEAD
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_dispatched = {
 +	.attr = {.name = "dispatched", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_dispatched_show,
++=======
+ static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_nr_tags = {
+ 	.attr = {.name = "nr_tags", .mode = S_IRUGO },
+ 	.show = blk_mq_hw_sysfs_nr_tags_show,
+ };
+ static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_nr_reserved_tags = {
+ 	.attr = {.name = "nr_reserved_tags", .mode = S_IRUGO },
+ 	.show = blk_mq_hw_sysfs_nr_reserved_tags_show,
++>>>>>>> be21547318b2 (blk-mq: move hctx io_poll, stats, and dispatched from sysfs to debugfs)
  };
  static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_active = {
  	.attr = {.name = "active", .mode = S_IRUGO },
@@@ -301,9 -233,8 +318,14 @@@ static struct blk_mq_hw_ctx_sysfs_entr
  static struct attribute *default_hw_ctx_attrs[] = {
  	&blk_mq_hw_sysfs_queued.attr,
  	&blk_mq_hw_sysfs_run.attr,
++<<<<<<< HEAD
 +	&blk_mq_hw_sysfs_dispatched.attr,
 +	&blk_mq_hw_sysfs_pending.attr,
 +	&blk_mq_hw_sysfs_tags.attr,
++=======
+ 	&blk_mq_hw_sysfs_nr_tags.attr,
+ 	&blk_mq_hw_sysfs_nr_reserved_tags.attr,
++>>>>>>> be21547318b2 (blk-mq: move hctx io_poll, stats, and dispatched from sysfs to debugfs)
  	&blk_mq_hw_sysfs_cpus.attr,
  	&blk_mq_hw_sysfs_active.attr,
  	NULL,
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-sysfs.c
