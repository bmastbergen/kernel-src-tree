blk-mq: move hctx->dispatch and ctx->rq_list from sysfs to debugfs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit 950cd7e9ffdc44c340b8914126b39cc079f0c844
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/950cd7e9.failed

These lists are only useful for debugging; they definitely don't belong
in sysfs. Putting them in debugfs also removes the limitation of a
single page of output.

	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 950cd7e9ffdc44c340b8914126b39cc079f0c844)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-debugfs.c
#	block/blk-mq-sysfs.c
diff --cc block/blk-mq-sysfs.c
index 08941faf0f9a,ee3694d8c4ee..000000000000
--- a/block/blk-mq-sysfs.c
+++ b/block/blk-mq-sysfs.c
@@@ -139,39 -139,19 +139,55 @@@ static ssize_t blk_mq_sysfs_completed_s
  				ctx->rq_completed[0]);
  }
  
++<<<<<<< HEAD
 +static ssize_t sysfs_list_show(char *page, struct list_head *list, char *msg)
 +{
 +	struct request *rq;
 +	int len = snprintf(page, PAGE_SIZE - 1, "%s:\n", msg);
 +
 +	list_for_each_entry(rq, list, queuelist) {
 +		const int rq_len = 2 * sizeof(rq) + 2;
 +
 +		/* if the output will be truncated */
 +		if (PAGE_SIZE - 1 < len + rq_len) {
 +			/* backspacing if it can't hold '\t...\n' */
 +			if (PAGE_SIZE - 1 < len + 5)
 +				len -= rq_len;
 +			len += snprintf(page + len, PAGE_SIZE - 1 - len,
 +					"\t...\n");
 +			break;
 +		}
 +		len += snprintf(page + len, PAGE_SIZE - 1 - len,
 +				"\t%p\n", rq);
 +	}
 +
 +	return len;
 +}
 +
 +static ssize_t blk_mq_sysfs_rq_list_show(struct blk_mq_ctx *ctx, char *page)
 +{
 +	ssize_t ret;
 +
 +	spin_lock(&ctx->lock);
 +	ret = sysfs_list_show(page, &ctx->rq_list, "CTX pending");
 +	spin_unlock(&ctx->lock);
 +
 +	return ret;
++=======
+ static ssize_t blk_mq_hw_sysfs_poll_show(struct blk_mq_hw_ctx *hctx, char *page)
+ {
+ 	return sprintf(page, "considered=%lu, invoked=%lu, success=%lu\n",
+ 		       hctx->poll_considered, hctx->poll_invoked,
+ 		       hctx->poll_success);
+ }
+ 
+ static ssize_t blk_mq_hw_sysfs_poll_store(struct blk_mq_hw_ctx *hctx,
+ 					  const char *page, size_t size)
+ {
+ 	hctx->poll_considered = hctx->poll_invoked = hctx->poll_success = 0;
+ 
+ 	return size;
++>>>>>>> 950cd7e9ffdc (blk-mq: move hctx->dispatch and ctx->rq_list from sysfs to debugfs)
  }
  
  static ssize_t blk_mq_hw_sysfs_queued_show(struct blk_mq_hw_ctx *hctx,
@@@ -204,16 -184,12 +220,25 @@@ static ssize_t blk_mq_hw_sysfs_dispatch
  	return page - start_page;
  }
  
++<<<<<<< HEAD
 +static ssize_t blk_mq_hw_sysfs_rq_list_show(struct blk_mq_hw_ctx *hctx,
 +					    char *page)
 +{
 +	ssize_t ret;
 +
 +	spin_lock(&hctx->lock);
 +	ret = sysfs_list_show(page, &hctx->dispatch, "HCTX pending");
 +	spin_unlock(&hctx->lock);
 +
 +	return ret;
++=======
+ static ssize_t blk_mq_hw_sysfs_sched_tags_show(struct blk_mq_hw_ctx *hctx, char *page)
+ {
+ 	if (hctx->sched_tags)
+ 		return blk_mq_tag_sysfs_show(hctx->sched_tags, page);
+ 
+ 	return 0;
++>>>>>>> 950cd7e9ffdc (blk-mq: move hctx->dispatch and ctx->rq_list from sysfs to debugfs)
  }
  
  static ssize_t blk_mq_hw_sysfs_tags_show(struct blk_mq_hw_ctx *hctx, char *page)
@@@ -285,9 -297,9 +305,15 @@@ static struct blk_mq_hw_ctx_sysfs_entr
  	.attr = {.name = "active", .mode = S_IRUGO },
  	.show = blk_mq_hw_sysfs_active_show,
  };
++<<<<<<< HEAD
 +static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_pending = {
 +	.attr = {.name = "pending", .mode = S_IRUGO },
 +	.show = blk_mq_hw_sysfs_rq_list_show,
++=======
+ static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_sched_tags = {
+ 	.attr = {.name = "sched_tags", .mode = S_IRUGO },
+ 	.show = blk_mq_hw_sysfs_sched_tags_show,
++>>>>>>> 950cd7e9ffdc (blk-mq: move hctx->dispatch and ctx->rq_list from sysfs to debugfs)
  };
  static struct blk_mq_hw_ctx_sysfs_entry blk_mq_hw_sysfs_tags = {
  	.attr = {.name = "tags", .mode = S_IRUGO },
@@@ -302,10 -324,12 +328,9 @@@ static struct attribute *default_hw_ctx
  	&blk_mq_hw_sysfs_queued.attr,
  	&blk_mq_hw_sysfs_run.attr,
  	&blk_mq_hw_sysfs_dispatched.attr,
- 	&blk_mq_hw_sysfs_pending.attr,
  	&blk_mq_hw_sysfs_tags.attr,
 -	&blk_mq_hw_sysfs_sched_tags.attr,
  	&blk_mq_hw_sysfs_cpus.attr,
  	&blk_mq_hw_sysfs_active.attr,
 -	&blk_mq_hw_sysfs_poll.attr,
 -	&blk_mq_hw_sysfs_stat.attr,
  	NULL,
  };
  
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-sysfs.c
