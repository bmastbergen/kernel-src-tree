iommu/amd: Adding Extended Feature Register check for PC support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Adding Extended Feature Register check for PC support (Jerry Snitselaar) [1411581]
Rebuild_FUZZ: 95.08%
commit-author Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
commit 7d7d38afb3e8fdfebfd867cc0ff4b5c45c14053c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7d7d38af.failed

The IVHD header type 11h and 40h introduce the PCSup bit in
the EFR Register Image bit fileds. This should be used to
determine the IOMMU performance support instead of relying
on the PNCounters and PNBanks.

Note also that the PNCouters and PNBanks bits in the IOMMU
attributes field of IVHD headers type 11h are incorrectly
programmed on some systems.

So, we should not rely on it to determine the performance
counter/banks size. Instead, these values should be read
from the MMIO Offset 0030h IOMMU Extended Feature Register.

	Signed-off-by: Suravee Suthikulpanit <Suravee.Suthikulpanit@amd.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 7d7d38afb3e8fdfebfd867cc0ff4b5c45c14053c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu_init.c
diff --cc drivers/iommu/amd_iommu_init.c
index d1b313b945cf,dff1e01174d1..000000000000
--- a/drivers/iommu/amd_iommu_init.c
+++ b/drivers/iommu/amd_iommu_init.c
@@@ -105,7 -99,11 +105,15 @@@ struct ivhd_header 
  	u64 mmio_phys;
  	u16 pci_seg;
  	u16 info;
++<<<<<<< HEAD
 +	u32 reserved;
++=======
+ 	u32 efr_attr;
+ 
+ 	/* Following only valid on IVHD type 11h and 40h */
+ 	u64 efr_reg; /* Exact copy of MMIO_EXT_FEATURES */
+ 	u64 res;
++>>>>>>> 7d7d38afb3e8 (iommu/amd: Adding Extended Feature Register check for PC support)
  } __attribute__((packed));
  
  /*
@@@ -1240,7 -1081,30 +1248,34 @@@ static int __init init_iommu_one(struc
  	iommu->cap_ptr = h->cap_ptr;
  	iommu->pci_seg = h->pci_seg;
  	iommu->mmio_phys = h->mmio_phys;
++<<<<<<< HEAD
 +	iommu->mmio_base = iommu_map_mmio_space(h->mmio_phys);
++=======
+ 
+ 	switch (h->type) {
+ 	case 0x10:
+ 		/* Check if IVHD EFR contains proper max banks/counters */
+ 		if ((h->efr_attr != 0) &&
+ 		    ((h->efr_attr & (0xF << 13)) != 0) &&
+ 		    ((h->efr_attr & (0x3F << 17)) != 0))
+ 			iommu->mmio_phys_end = MMIO_REG_END_OFFSET;
+ 		else
+ 			iommu->mmio_phys_end = MMIO_CNTR_CONF_OFFSET;
+ 		break;
+ 	case 0x11:
+ 	case 0x40:
+ 		if (h->efr_reg & (1 << 9))
+ 			iommu->mmio_phys_end = MMIO_REG_END_OFFSET;
+ 		else
+ 			iommu->mmio_phys_end = MMIO_CNTR_CONF_OFFSET;
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	iommu->mmio_base = iommu_map_mmio_space(iommu->mmio_phys,
+ 						iommu->mmio_phys_end);
++>>>>>>> 7d7d38afb3e8 (iommu/amd: Adding Extended Feature Register check for PC support)
  	if (!iommu->mmio_base)
  		return -ENOMEM;
  
* Unmerged path drivers/iommu/amd_iommu_init.c
