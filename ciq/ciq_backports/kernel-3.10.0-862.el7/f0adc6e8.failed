i40evf/virtchnl: whitespace cleanups

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jesse Brandeburg <jesse.brandeburg@intel.com>
commit f0adc6e831baaef16577ea2af5eb3e91fd4efef4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f0adc6e8.failed

This patch fixes up a bunch of whitespace issues introduced
by the previous automated change of name from i40e to virtchnl.

	Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit f0adc6e831baaef16577ea2af5eb3e91fd4efef4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
#	drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h
#	drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
index f469a3d68beb,422cccf0de86..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
@@@ -1376,18 -1475,17 +1376,22 @@@ static int i40e_vc_send_resp_to_vf(stru
   **/
  static int i40e_vc_get_version_msg(struct i40e_vf *vf, u8 *msg)
  {
 -	struct virtchnl_version_info info = {
 -		VIRTCHNL_VERSION_MAJOR, VIRTCHNL_VERSION_MINOR
 +	struct i40e_virtchnl_version_info info = {
 +		I40E_VIRTCHNL_VERSION_MAJOR, I40E_VIRTCHNL_VERSION_MINOR
  	};
  
 -	vf->vf_ver = *(struct virtchnl_version_info *)msg;
 +	vf->vf_ver = *(struct i40e_virtchnl_version_info *)msg;
  	/* VFs running the 1.0 API expect to get 1.0 back or they will cry. */
 -	if (VF_IS_V10(&vf->vf_ver))
 -		info.minor = VIRTCHNL_VERSION_MINOR_NO_VF_CAPS;
 -	return i40e_vc_send_msg_to_vf(vf, VIRTCHNL_OP_VERSION,
 +	if (VF_IS_V10(vf))
 +		info.minor = I40E_VIRTCHNL_VERSION_MINOR_NO_VF_CAPS;
 +	return i40e_vc_send_msg_to_vf(vf, I40E_VIRTCHNL_OP_VERSION,
  				      I40E_SUCCESS, (u8 *)&info,
++<<<<<<< HEAD
 +				      sizeof(struct
 +					     i40e_virtchnl_version_info));
++=======
+ 				      sizeof(struct virtchnl_version_info));
++>>>>>>> f0adc6e831ba (i40evf/virtchnl: whitespace cleanups)
  }
  
  /**
@@@ -1422,36 -1520,32 +1426,43 @@@ static int i40e_vc_get_vf_resources_msg
  		len = 0;
  		goto err;
  	}
 -	if (VF_IS_V11(&vf->vf_ver))
 +	if (VF_IS_V11(vf))
  		vf->driver_caps = *(u32 *)msg;
  	else
 -		vf->driver_caps = VIRTCHNL_VF_OFFLOAD_L2 |
 -				  VIRTCHNL_VF_OFFLOAD_RSS_REG |
 -				  VIRTCHNL_VF_OFFLOAD_VLAN;
 +		vf->driver_caps = I40E_VIRTCHNL_VF_OFFLOAD_L2 |
 +				  I40E_VIRTCHNL_VF_OFFLOAD_RSS_REG |
 +				  I40E_VIRTCHNL_VF_OFFLOAD_VLAN;
  
 -	vfres->vf_offload_flags = VIRTCHNL_VF_OFFLOAD_L2;
 +	vfres->vf_offload_flags = I40E_VIRTCHNL_VF_OFFLOAD_L2;
  	vsi = pf->vsi[vf->lan_vsi_idx];
  	if (!vsi->info.pvid)
 -		vfres->vf_offload_flags |= VIRTCHNL_VF_OFFLOAD_VLAN;
 +		vfres->vf_offload_flags |= I40E_VIRTCHNL_VF_OFFLOAD_VLAN;
  
  	if (i40e_vf_client_capable(pf, vf->vf_id) &&
 -	    (vf->driver_caps & VIRTCHNL_VF_OFFLOAD_IWARP)) {
 -		vfres->vf_offload_flags |= VIRTCHNL_VF_OFFLOAD_IWARP;
 +	    (vf->driver_caps & I40E_VIRTCHNL_VF_OFFLOAD_IWARP)) {
 +		vfres->vf_offload_flags |= I40E_VIRTCHNL_VF_OFFLOAD_IWARP;
  		set_bit(I40E_VF_STATE_IWARPENA, &vf->vf_states);
 +	} else {
 +		clear_bit(I40E_VF_STATE_IWARPENA, &vf->vf_states);
  	}
  
 -	if (vf->driver_caps & VIRTCHNL_VF_OFFLOAD_RSS_PF) {
 -		vfres->vf_offload_flags |= VIRTCHNL_VF_OFFLOAD_RSS_PF;
 +	if (vf->driver_caps & I40E_VIRTCHNL_VF_OFFLOAD_RSS_PF) {
 +		vfres->vf_offload_flags |= I40E_VIRTCHNL_VF_OFFLOAD_RSS_PF;
  	} else {
  		if ((pf->flags & I40E_FLAG_RSS_AQ_CAPABLE) &&
++<<<<<<< HEAD
 +		    (vf->driver_caps & I40E_VIRTCHNL_VF_OFFLOAD_RSS_AQ))
 +			vfres->vf_offload_flags |=
 +					I40E_VIRTCHNL_VF_OFFLOAD_RSS_AQ;
 +		else
 +			vfres->vf_offload_flags |=
 +					I40E_VIRTCHNL_VF_OFFLOAD_RSS_REG;
++=======
+ 		    (vf->driver_caps & VIRTCHNL_VF_OFFLOAD_RSS_AQ))
+ 			vfres->vf_offload_flags |= VIRTCHNL_VF_OFFLOAD_RSS_AQ;
+ 		else
+ 			vfres->vf_offload_flags |= VIRTCHNL_VF_OFFLOAD_RSS_REG;
++>>>>>>> f0adc6e831ba (i40evf/virtchnl: whitespace cleanups)
  	}
  
  	if (pf->flags & I40E_FLAG_MULTIPLE_TCP_UDP_RSS_PCTYPE) {
@@@ -2424,8 -2527,7 +2435,12 @@@ static int i40e_vc_set_rss_hena(struct 
  
  	/* send the response to the VF */
  err:
++<<<<<<< HEAD
 +	return i40e_vc_send_resp_to_vf(vf, I40E_VIRTCHNL_OP_SET_RSS_HENA,
 +				       aq_ret);
++=======
+ 	return i40e_vc_send_resp_to_vf(vf, VIRTCHNL_OP_SET_RSS_HENA, aq_ret);
++>>>>>>> f0adc6e831ba (i40evf/virtchnl: whitespace cleanups)
  }
  
  /**
diff --cc drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h
index 5770352322ef,73970bd439fe..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h
+++ b/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h
@@@ -151,22 -171,24 +151,37 @@@ struct i40e_virtchnl_vsi_resource 
  	u8 default_mac_addr[ETH_ALEN];
  };
  /* VF offload flags */
++<<<<<<< HEAD:drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h
 +#define I40E_VIRTCHNL_VF_OFFLOAD_L2		0x00000001
 +#define I40E_VIRTCHNL_VF_OFFLOAD_IWARP		0x00000002
 +#define I40E_VIRTCHNL_VF_OFFLOAD_RSS_AQ		0x00000008
 +#define I40E_VIRTCHNL_VF_OFFLOAD_RSS_REG	0x00000010
 +#define I40E_VIRTCHNL_VF_OFFLOAD_WB_ON_ITR	0x00000020
 +#define I40E_VIRTCHNL_VF_OFFLOAD_VLAN		0x00010000
 +#define I40E_VIRTCHNL_VF_OFFLOAD_RX_POLLING	0x00020000
 +#define I40E_VIRTCHNL_VF_OFFLOAD_RSS_PCTYPE_V2	0x00040000
 +#define I40E_VIRTCHNL_VF_OFFLOAD_RSS_PF		0X00080000
 +#define I40E_VIRTCHNL_VF_OFFLOAD_ENCAP_CSUM	0X00100000
++=======
+ #define VIRTCHNL_VF_OFFLOAD_L2		0x00000001
+ #define VIRTCHNL_VF_OFFLOAD_IWARP		0x00000002
+ #define VIRTCHNL_VF_OFFLOAD_FCOE		0x00000004
+ #define VIRTCHNL_VF_OFFLOAD_RSS_AQ		0x00000008
+ #define VIRTCHNL_VF_OFFLOAD_RSS_REG		0x00000010
+ #define VIRTCHNL_VF_OFFLOAD_WB_ON_ITR		0x00000020
+ #define VIRTCHNL_VF_OFFLOAD_VLAN		0x00010000
+ #define VIRTCHNL_VF_OFFLOAD_RX_POLLING		0x00020000
+ #define VIRTCHNL_VF_OFFLOAD_RSS_PCTYPE_V2	0x00040000
+ #define VIRTCHNL_VF_OFFLOAD_RSS_PF		0X00080000
+ #define VIRTCHNL_VF_OFFLOAD_ENCAP		0X00100000
+ #define VIRTCHNL_VF_OFFLOAD_ENCAP_CSUM	0X00200000
++>>>>>>> f0adc6e831ba (i40evf/virtchnl: whitespace cleanups):include/linux/avf/virtchnl.h
  
 -#define I40E_VF_BASE_MODE_OFFLOADS (VIRTCHNL_VF_OFFLOAD_L2 | \
 -				    VIRTCHNL_VF_OFFLOAD_VLAN | \
 -				    VIRTCHNL_VF_OFFLOAD_RSS_PF)
 +#define I40E_VF_BASE_MODE_OFFLOADS (I40E_VIRTCHNL_VF_OFFLOAD_L2 | \
 +				    I40E_VIRTCHNL_VF_OFFLOAD_VLAN | \
 +				    I40E_VIRTCHNL_VF_OFFLOAD_RSS_PF)
  
 -struct virtchnl_vf_resource {
 +struct i40e_virtchnl_vf_resource {
  	u16 num_vsis;
  	u16 num_queue_pairs;
  	u16 max_vectors;
diff --cc drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c
index aec9d82a87bd,d9f040900373..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c
+++ b/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c
@@@ -1005,13 -1013,12 +1005,18 @@@ void i40evf_virtchnl_completion(struct 
  						     msg, msglen);
  		break;
  
 -	case VIRTCHNL_OP_CONFIG_IWARP_IRQ_MAP:
 +	case I40E_VIRTCHNL_OP_CONFIG_IWARP_IRQ_MAP:
  		adapter->client_pending &=
 -				~(BIT(VIRTCHNL_OP_CONFIG_IWARP_IRQ_MAP));
 +				~(BIT(I40E_VIRTCHNL_OP_CONFIG_IWARP_IRQ_MAP));
  		break;
++<<<<<<< HEAD
 +	case I40E_VIRTCHNL_OP_GET_RSS_HENA_CAPS: {
 +		struct i40e_virtchnl_rss_hena *vrh =
 +			(struct i40e_virtchnl_rss_hena *)msg;
++=======
+ 	case VIRTCHNL_OP_GET_RSS_HENA_CAPS: {
+ 		struct virtchnl_rss_hena *vrh = (struct virtchnl_rss_hena *)msg;
++>>>>>>> f0adc6e831ba (i40evf/virtchnl: whitespace cleanups)
  		if (msglen == sizeof(*vrh))
  			adapter->hena = vrh->hena;
  		else
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
* Unmerged path drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h
* Unmerged path drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c
