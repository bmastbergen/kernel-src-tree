mmc: sdhci-pci: Move a function to avoid later forward declaration

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit 48d685a2ec2bc5852cf117b558dce9e90da36601
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/48d685a2.failed

Move a function to avoid having to forward declare it in a subsequent
patch.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
	Tested-by: Ludovic Desroches <ludovic.desroches@microchip.com>
(cherry picked from commit 48d685a2ec2bc5852cf117b558dce9e90da36601)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mmc/host/sdhci-pci-core.c
diff --cc drivers/mmc/host/sdhci-pci-core.c
index 1a72d32af07f,6c0440ef54be..000000000000
--- a/drivers/mmc/host/sdhci-pci-core.c
+++ b/drivers/mmc/host/sdhci-pci-core.c
@@@ -359,8 -515,57 +359,59 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ #define SDHCI_INTEL_PWR_TIMEOUT_CNT	20
+ #define SDHCI_INTEL_PWR_TIMEOUT_UDELAY	100
+ 
+ static void sdhci_intel_set_power(struct sdhci_host *host, unsigned char mode,
+ 				  unsigned short vdd)
+ {
+ 	int cntr;
+ 	u8 reg;
+ 
+ 	sdhci_set_power(host, mode, vdd);
+ 
+ 	if (mode == MMC_POWER_OFF)
+ 		return;
+ 
+ 	/*
+ 	 * Bus power might not enable after D3 -> D0 transition due to the
+ 	 * present state not yet having propagated. Retry for up to 2ms.
+ 	 */
+ 	for (cntr = 0; cntr < SDHCI_INTEL_PWR_TIMEOUT_CNT; cntr++) {
+ 		reg = sdhci_readb(host, SDHCI_POWER_CONTROL);
+ 		if (reg & SDHCI_POWER_ON)
+ 			break;
+ 		udelay(SDHCI_INTEL_PWR_TIMEOUT_UDELAY);
+ 		reg |= SDHCI_POWER_ON;
+ 		sdhci_writeb(host, reg, SDHCI_POWER_CONTROL);
+ 	}
+ }
+ 
+ static const struct sdhci_ops sdhci_intel_byt_ops = {
+ 	.set_clock		= sdhci_set_clock,
+ 	.set_power		= sdhci_intel_set_power,
+ 	.enable_dma		= sdhci_pci_enable_dma,
+ 	.set_bus_width		= sdhci_pci_set_bus_width,
+ 	.reset			= sdhci_reset,
+ 	.set_uhs_signaling	= sdhci_set_uhs_signaling,
+ 	.hw_reset		= sdhci_pci_hw_reset,
+ };
+ 
+ static void byt_read_dsm(struct sdhci_pci_slot *slot)
+ {
+ 	struct intel_host *intel_host = sdhci_pci_priv(slot);
+ 	struct device *dev = &slot->chip->pdev->dev;
+ 	struct mmc_host *mmc = slot->host->mmc;
+ 
+ 	intel_dsm_init(intel_host, dev, mmc);
+ 	slot->chip->rpm_retune = intel_host->d3_retune;
+ }
+ 
++>>>>>>> 48d685a2ec2b (mmc: sdhci-pci: Move a function to avoid later forward declaration)
  static int byt_emmc_probe_slot(struct sdhci_pci_slot *slot)
  {
 -	byt_read_dsm(slot);
  	slot->host->mmc->caps |= MMC_CAP_8_BIT_DATA | MMC_CAP_NONREMOVABLE |
  				 MMC_CAP_HW_RESET | MMC_CAP_1_8V_DDR |
  				 MMC_CAP_CMD_DURING_TFR |
@@@ -438,45 -644,6 +489,48 @@@ static int byt_sd_probe_slot(struct sdh
  	return 0;
  }
  
++<<<<<<< HEAD
 +#define SDHCI_INTEL_PWR_TIMEOUT_CNT	20
 +#define SDHCI_INTEL_PWR_TIMEOUT_UDELAY	100
 +
 +static void sdhci_intel_set_power(struct sdhci_host *host, unsigned char mode,
 +				  unsigned short vdd)
 +{
 +	int cntr;
 +	u8 reg;
 +
 +	sdhci_set_power(host, mode, vdd);
 +
 +	if (mode == MMC_POWER_OFF)
 +		return;
 +
 +	/*
 +	 * Bus power might not enable after D3 -> D0 transition due to the
 +	 * present state not yet having propagated. Retry for up to 2ms.
 +	 */
 +	for (cntr = 0; cntr < SDHCI_INTEL_PWR_TIMEOUT_CNT; cntr++) {
 +		reg = sdhci_readb(host, SDHCI_POWER_CONTROL);
 +		if (reg & SDHCI_POWER_ON)
 +			break;
 +		udelay(SDHCI_INTEL_PWR_TIMEOUT_UDELAY);
 +		reg |= SDHCI_POWER_ON;
 +		sdhci_writeb(host, reg, SDHCI_POWER_CONTROL);
 +	}
 +}
 +
 +static const struct sdhci_ops sdhci_intel_byt_ops = {
 +	.set_clock		= sdhci_set_clock,
 +	.set_power		= sdhci_intel_set_power,
 +	.enable_dma		= sdhci_pci_enable_dma,
 +	.set_bus_width		= sdhci_pci_set_bus_width,
 +	.reset			= sdhci_reset,
 +	.set_uhs_signaling	= sdhci_set_uhs_signaling,
 +	.hw_reset		= sdhci_pci_hw_reset,
 +	.select_drive_strength	= sdhci_pci_select_drive_strength,
 +};
 +
++=======
++>>>>>>> 48d685a2ec2b (mmc: sdhci-pci: Move a function to avoid later forward declaration)
  static const struct sdhci_pci_fixes sdhci_intel_byt_emmc = {
  	.allow_runtime_pm = true,
  	.probe_slot	= byt_emmc_probe_slot,
* Unmerged path drivers/mmc/host/sdhci-pci-core.c
