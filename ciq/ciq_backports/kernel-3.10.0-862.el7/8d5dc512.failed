sched/topology: Small cleanup

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Peter Zijlstra <peterz@infradead.org>
commit 8d5dc5126bb2bbcebf0b1e061cca2fc02c935620
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8d5dc512.failed

Move the allocation of topology specific cpumasks into the topology
code.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-kernel@vger.kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 8d5dc5126bb2bbcebf0b1e061cca2fc02c935620)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/sched.h
#	kernel/sched/topology.c
diff --cc kernel/sched/sched.h
index 3e0ea93b25ef,6e1eae717a24..000000000000
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@@ -537,6 -605,11 +537,14 @@@ struct root_domain 
  };
  
  extern struct root_domain def_root_domain;
++<<<<<<< HEAD
++=======
+ extern struct mutex sched_domains_mutex;
+ 
+ extern void init_defrootdomain(void);
+ extern int sched_init_domains(const struct cpumask *cpu_map);
+ extern void rq_attach_root(struct rq *rq, struct root_domain *rd);
++>>>>>>> 8d5dc5126bb2 (sched/topology: Small cleanup)
  
  #endif /* CONFIG_SMP */
  
* Unmerged path kernel/sched/topology.c
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 8c4dbd5ec67b..1d7aff632090 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -8066,7 +8066,6 @@ void __init sched_init_smp(void)
 	cpumask_var_t non_isolated_cpus;
 
 	alloc_cpumask_var(&non_isolated_cpus, GFP_KERNEL);
-	alloc_cpumask_var(&fallback_doms, GFP_KERNEL);
 
 	sched_init_numa();
 
@@ -8076,7 +8075,7 @@ void __init sched_init_smp(void)
 	 * happen.
 	 */
 	mutex_lock(&sched_domains_mutex);
-	init_sched_domains(cpu_active_mask);
+	sched_init_domains(cpu_active_mask);
 	cpumask_andnot(non_isolated_cpus, cpu_possible_mask, cpu_isolated_map);
 	if (cpumask_empty(non_isolated_cpus))
 		cpumask_set_cpu(smp_processor_id(), non_isolated_cpus);
@@ -8309,7 +8308,6 @@ void __init sched_init(void)
 	current->sched_class = &fair_sched_class;
 
 #ifdef CONFIG_SMP
-	zalloc_cpumask_var(&sched_domains_tmpmask, GFP_NOWAIT);
 	/* May be allocated at isolcpus cmdline parse time */
 	if (cpu_isolated_map == NULL)
 		zalloc_cpumask_var(&cpu_isolated_map, GFP_NOWAIT);
* Unmerged path kernel/sched/sched.h
* Unmerged path kernel/sched/topology.c
