scsi: qla2xxx: Add LR distance support from nvram bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Add LR distance support from nvram bit (Himanshu Madhani) [1316281]
Rebuild_FUZZ: 94.00%
commit-author Joe Carnuccio <joe.carnuccio@cavium.com>
commit 1f4c7c380b2f0cbd060b8582a1723b3a98f354d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1f4c7c38.failed

	Signed-off-by: Joe Carnuccio <joe.carnuccio@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 1f4c7c380b2f0cbd060b8582a1723b3a98f354d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_def.h
#	drivers/scsi/qla2xxx/qla_mbx.c
diff --cc drivers/scsi/qla2xxx/qla_def.h
index 3f28536dc812,486c075998f6..000000000000
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@@ -3014,14 -3454,27 +3014,21 @@@ struct qla_hw_data 
  		uint32_t	isp82xx_no_md_cap:1;
  		uint32_t	host_shutting_down:1;
  		uint32_t	idc_compl_status:1;
 +
  		uint32_t        mr_reset_hdlr_active:1;
  		uint32_t        mr_intr_valid:1;
 -
 -		uint32_t        dport_enabled:1;
 +		uint32_t	dport_enabled:1;
  		uint32_t	fawwpn_enabled:1;
 -		uint32_t	exlogins_enabled:1;
 -		uint32_t	exchoffld_enabled:1;
 -
 -		uint32_t	lip_ae:1;
 -		uint32_t	n2n_ae:1;
 -		uint32_t	fw_started:1;
 -		uint32_t	fw_init_done:1;
 -
 -		uint32_t	detected_lr_sfp:1;
 -		uint32_t	using_lr_setting:1;
 +		/* 35 bits */
  	} flags;
  
++<<<<<<< HEAD
++=======
+ 	uint16_t long_range_distance;	/* 32G & above */
+ #define LR_DISTANCE_5K  1
+ #define LR_DISTANCE_10K 0
+ 
++>>>>>>> 1f4c7c380b2f (scsi: qla2xxx: Add LR distance support from nvram bit)
  	/* This spinlock is used to protect "io transactions", you must
  	* acquire it before doing any IO to the card, eg with RD_REG*() and
  	* WRT_REG*() for the duration of your entire commandtransaction.
@@@ -3546,8 -4027,20 +3553,23 @@@
  
  	struct qlt_hw_data tgt;
  	int	allow_cna_fw_dump;
++<<<<<<< HEAD
++=======
+ 	uint32_t fw_ability_mask;
+ 	uint16_t min_link_speed;
+ 	uint16_t max_speed_sup;
+ 
+ 	atomic_t        nvme_active_aen_cnt;
+ 	uint16_t        nvme_last_rptd_aen;             /* Last recorded aen count */
++>>>>>>> 1f4c7c380b2f (scsi: qla2xxx: Add LR distance support from nvram bit)
  };
  
+ #define FW_ABILITY_MAX_SPEED_MASK	0xFUL
+ #define FW_ABILITY_MAX_SPEED_16G	0x0
+ #define FW_ABILITY_MAX_SPEED_32G	0x1
+ #define FW_ABILITY_MAX_SPEED(ha)	\
+ 	(ha->fw_ability_mask & FW_ABILITY_MAX_SPEED_MASK)
+ 
  /*
   * Qlogic scsi host structure
   */
diff --cc drivers/scsi/qla2xxx/qla_mbx.c
index 11982e7bd50f,99502fa90810..000000000000
--- a/drivers/scsi/qla2xxx/qla_mbx.c
+++ b/drivers/scsi/qla2xxx/qla_mbx.c
@@@ -544,6 -566,30 +544,33 @@@ qla2x00_load_ram(scsi_qla_host_t *vha, 
  }
  
  #define	EXTENDED_BB_CREDITS	BIT_0
++<<<<<<< HEAD
++=======
+ #define	NVME_ENABLE_FLAG	BIT_3
+ static inline uint16_t qla25xx_set_sfp_lr_dist(struct qla_hw_data *ha)
+ {
+ 	uint16_t mb4 = BIT_0;
+ 
+ 	if (IS_QLA83XX(ha) || IS_QLA27XX(ha))
+ 		mb4 |= ha->long_range_distance << LR_DIST_FW_POS;
+ 
+ 	return mb4;
+ }
+ 
+ static inline uint16_t qla25xx_set_nvr_lr_dist(struct qla_hw_data *ha)
+ {
+ 	uint16_t mb4 = BIT_0;
+ 
+ 	if (IS_QLA83XX(ha) || IS_QLA27XX(ha)) {
+ 		struct nvram_81xx *nv = ha->nvram;
+ 
+ 		mb4 |= LR_DIST_FW_FIELD(nv->enhanced_features);
+ 	}
+ 
+ 	return mb4;
+ }
+ 
++>>>>>>> 1f4c7c380b2f (scsi: qla2xxx: Add LR distance support from nvram bit)
  /*
   * qla2x00_execute_fw
   *     Start adapter firmware.
@@@ -577,15 -623,52 +604,44 @@@ qla2x00_execute_fw(scsi_qla_host_t *vha
  		mcp->mb[1] = MSW(risc_addr);
  		mcp->mb[2] = LSW(risc_addr);
  		mcp->mb[3] = 0;
++<<<<<<< HEAD
++		if (IS_QLA25XX(ha) || IS_QLA81XX(ha) || IS_QLA83XX(ha) ||
++		    IS_QLA27XX(ha)) {
++=======
+ 		mcp->mb[4] = 0;
+ 		ha->flags.using_lr_setting = 0;
  		if (IS_QLA25XX(ha) || IS_QLA81XX(ha) || IS_QLA83XX(ha) ||
  		    IS_QLA27XX(ha)) {
+ 			if (ql2xautodetectsfp) {
+ 				if (ha->flags.detected_lr_sfp) {
+ 					mcp->mb[4] |=
+ 					    qla25xx_set_sfp_lr_dist(ha);
+ 					ha->flags.using_lr_setting = 1;
+ 				}
+ 			} else {
+ 				struct nvram_81xx *nv = ha->nvram;
+ 				/* set LR distance if specified in nvram */
+ 				if (nv->enhanced_features &
+ 				    NEF_LR_DIST_ENABLE) {
+ 					mcp->mb[4] |=
+ 					    qla25xx_set_nvr_lr_dist(ha);
+ 					ha->flags.using_lr_setting = 1;
+ 				}
+ 			}
+ 		}
+ 
+ 		if (ql2xnvmeenable && IS_QLA27XX(ha))
+ 			mcp->mb[4] |= NVME_ENABLE_FLAG;
+ 
+ 		if (IS_QLA83XX(ha) || IS_QLA27XX(ha)) {
++>>>>>>> 1f4c7c380b2f (scsi: qla2xxx: Add LR distance support from nvram bit)
  			struct nvram_81xx *nv = ha->nvram;
 -			/* set minimum speed if specified in nvram */
 -			if (nv->min_link_speed >= 2 &&
 -			    nv->min_link_speed <= 5) {
 -				mcp->mb[4] |= BIT_4;
 -				mcp->mb[11] = nv->min_link_speed;
 -				mcp->out_mb |= MBX_11;
 -				mcp->in_mb |= BIT_5;
 -				vha->min_link_speed_feat = nv->min_link_speed;
 -			}
 -		}
 -
 -		if (ha->flags.exlogins_enabled)
 -			mcp->mb[4] |= ENABLE_EXTENDED_LOGIN;
 -
 -		if (ha->flags.exchoffld_enabled)
 -			mcp->mb[4] |= ENABLE_EXCHANGE_OFFLD;
 -
 +			mcp->mb[4] = (nv->enhanced_features &
 +			    EXTENDED_BB_CREDITS);
 +		} else
 +			mcp->mb[4] = 0;
  		mcp->out_mb |= MBX_4|MBX_3|MBX_2|MBX_1;
- 		mcp->in_mb |= MBX_1;
+ 		mcp->in_mb |= MBX_3 | MBX_2 | MBX_1;
  	} else {
  		mcp->mb[1] = LSW(risc_addr);
  		mcp->out_mb |= MBX_1;
@@@ -604,12 -687,30 +660,38 @@@
  		    "Failed=%x mb[0]=%x.\n", rval, mcp->mb[0]);
  	} else {
  		if (IS_FWI2_CAPABLE(ha)) {
++<<<<<<< HEAD
 +			ql_dbg(ql_dbg_mbx + ql_dbg_verbose, vha, 0x1027,
 +			    "Done exchanges=%x.\n", mcp->mb[1]);
 +		} else {
 +			ql_dbg(ql_dbg_mbx + ql_dbg_verbose, vha, 0x1028,
 +			    "Done %s.\n", __func__);
++=======
+ 			ha->fw_ability_mask = mcp->mb[3] << 16 | mcp->mb[2];
+ 			ql_dbg(ql_dbg_mbx, vha, 0x119a,
+ 			    "fw_ability_mask=%x.\n", ha->fw_ability_mask);
+ 			ql_dbg(ql_dbg_mbx, vha, 0x1027,
+ 			    "exchanges=%x.\n", mcp->mb[1]);
+ 			if (IS_QLA83XX(ha) || IS_QLA27XX(ha)) {
+ 				ha->max_speed_sup = mcp->mb[2] & BIT_0;
+ 				ql_dbg(ql_dbg_mbx, vha, 0x119b,
+ 				    "Maximum speed supported=%s.\n",
+ 				    ha->max_speed_sup ? "32Gps" : "16Gps");
+ 				if (vha->min_link_speed_feat) {
+ 					ha->min_link_speed = mcp->mb[5];
+ 					ql_dbg(ql_dbg_mbx, vha, 0x119c,
+ 					    "Minimum speed set=%s.\n",
+ 					    mcp->mb[5] == 5 ? "32Gps" :
+ 					    mcp->mb[5] == 4 ? "16Gps" :
+ 					    mcp->mb[5] == 3 ? "8Gps" :
+ 					    mcp->mb[5] == 2 ? "4Gps" :
+ 						"unknown");
+ 				}
+ 			}
++>>>>>>> 1f4c7c380b2f (scsi: qla2xxx: Add LR distance support from nvram bit)
  		}
+ 		ql_dbg(ql_dbg_mbx + ql_dbg_verbose, vha, 0x1028,
+ 		    "Done.\n");
  	}
  
  	return rval;
* Unmerged path drivers/scsi/qla2xxx/qla_def.h
diff --git a/drivers/scsi/qla2xxx/qla_fw.h b/drivers/scsi/qla2xxx/qla_fw.h
index 8a2368b32dec..932591bcc0c7 100644
--- a/drivers/scsi/qla2xxx/qla_fw.h
+++ b/drivers/scsi/qla2xxx/qla_fw.h
@@ -1592,6 +1592,15 @@ struct access_chip_rsp_84xx {
 #define FAC_OPT_CMD_UNLOCK_SEMAPHORE	0x04
 #define FAC_OPT_CMD_GET_SECTOR_SIZE	0x05
 
+/* enhanced features bit definitions */
+#define NEF_LR_DIST_ENABLE	BIT_0
+
+/* LR Distance bit positions */
+#define LR_DIST_NV_POS		2
+#define LR_DIST_FW_POS		12
+#define LR_DIST_FW_SHIFT	(LR_DIST_FW_POS - LR_DIST_NV_POS)
+#define LR_DIST_FW_FIELD(x)	((x) << LR_DIST_FW_SHIFT & 0xf000)
+
 struct nvram_81xx {
 	/* NVRAM header. */
 	uint8_t id[4];
@@ -1732,16 +1741,13 @@ struct nvram_81xx {
 	uint8_t reserved_21[16];
 	uint16_t reserved_22[3];
 
-	/*
-	 * BIT 0 = Extended BB credits for LR
-	 * BIT 1 = Virtual Fabric Enable
-	 * BIT 2 = Enhanced Features Unused
-	 * BIT 3-7 = Enhanced Features Reserved
+	/* Offset 406 (0x196) Enhanced Features
+	 * BIT 0    = Extended BB credits for LR
+	 * BIT 1    = Virtual Fabric Enable
+	 * BIT 2-5  = Distance Support if BIT 0 is on
+	 * BIT 6-15 = Unused
 	 */
-	/* Enhanced Features */
-	uint8_t enhanced_features;
-
-	uint8_t reserved_23;
+	uint16_t enhanced_features;
 	uint16_t reserved_24[4];
 
 	/* Offset 416. */
* Unmerged path drivers/scsi/qla2xxx/qla_mbx.c
