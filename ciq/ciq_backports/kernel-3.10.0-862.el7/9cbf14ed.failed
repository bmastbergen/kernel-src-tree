mlxsw: spectrum: rename cls arg in matchall processing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jiri Pirko <jiri@mellanox.com>
commit 9cbf14ede21e1789f24e87a9ba08bbc92211fe42
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9cbf14ed.failed

To sync-up with the naming in the rest of the driver, rename the cls arg.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9cbf14ede21e1789f24e87a9ba08bbc92211fe42)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index c628b7aede0f,f333d086932d..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -1218,26 -1571,73 +1218,35 @@@ mlxsw_sp_port_del_cls_matchall_mirror(s
  	mlxsw_sp_span_mirror_remove(mlxsw_sp_port, to_port, span_type);
  }
  
 -static int
 -mlxsw_sp_port_add_cls_matchall_sample(struct mlxsw_sp_port *mlxsw_sp_port,
 -				      struct tc_cls_matchall_offload *cls,
 -				      const struct tc_action *a,
 -				      bool ingress)
 +static int mlxsw_sp_port_add_cls_matchall(struct mlxsw_sp_port *mlxsw_sp_port,
 +					  __be16 protocol,
- 					  struct tc_cls_matchall_offload *cls,
++					  struct tc_cls_matchall_offload *f,
 +					  bool ingress)
  {
 +	struct mlxsw_sp_port_mall_tc_entry *mall_tc_entry;
 +	const struct tc_action *a;
  	int err;
  
 -	if (!mlxsw_sp_port->sample)
 -		return -EOPNOTSUPP;
 -	if (rtnl_dereference(mlxsw_sp_port->sample->psample_group)) {
 -		netdev_err(mlxsw_sp_port->dev, "sample already active\n");
 -		return -EEXIST;
 -	}
 -	if (tcf_sample_rate(a) > MLXSW_REG_MPSC_RATE_MAX) {
 -		netdev_err(mlxsw_sp_port->dev, "sample rate not supported\n");
++<<<<<<< HEAD
 +	if (!tc_single_action(cls->exts)) {
++=======
++	if (!tcf_exts_has_one_action(f->exts)) {
++>>>>>>> 9cbf14ede21e (mlxsw: spectrum: rename cls arg in matchall processing)
 +		netdev_err(mlxsw_sp_port->dev, "only singular actions are supported\n");
  		return -EOPNOTSUPP;
  	}
  
 -	rcu_assign_pointer(mlxsw_sp_port->sample->psample_group,
 -			   tcf_sample_psample_group(a));
 -	mlxsw_sp_port->sample->truncate = tcf_sample_truncate(a);
 -	mlxsw_sp_port->sample->trunc_size = tcf_sample_trunc_size(a);
 -	mlxsw_sp_port->sample->rate = tcf_sample_rate(a);
 -
 -	err = mlxsw_sp_port_sample_set(mlxsw_sp_port, true, tcf_sample_rate(a));
 -	if (err)
 -		goto err_port_sample_set;
 -	return 0;
 -
 -err_port_sample_set:
 -	RCU_INIT_POINTER(mlxsw_sp_port->sample->psample_group, NULL);
 -	return err;
 -}
 -
 -static void
 -mlxsw_sp_port_del_cls_matchall_sample(struct mlxsw_sp_port *mlxsw_sp_port)
 -{
 -	if (!mlxsw_sp_port->sample)
 -		return;
 -
 -	mlxsw_sp_port_sample_set(mlxsw_sp_port, false, 1);
 -	RCU_INIT_POINTER(mlxsw_sp_port->sample->psample_group, NULL);
 -}
 -
 -static int mlxsw_sp_port_add_cls_matchall(struct mlxsw_sp_port *mlxsw_sp_port,
 -					  __be16 protocol,
 -					  struct tc_cls_matchall_offload *f,
 -					  bool ingress)
 -{
 -	struct mlxsw_sp_port_mall_tc_entry *mall_tc_entry;
 -	const struct tc_action *a;
 -	LIST_HEAD(actions);
 -	int err;
 -
 -	if (!tcf_exts_has_one_action(f->exts)) {
 -		netdev_err(mlxsw_sp_port->dev, "only singular actions are supported\n");
 -		return -EOPNOTSUPP;
 -	}
 -
 -	mall_tc_entry = kzalloc(sizeof(*mall_tc_entry), GFP_KERNEL);
 -	if (!mall_tc_entry)
 -		return -ENOMEM;
 -	mall_tc_entry->cookie = f->cookie;
 +	mall_tc_entry = kzalloc(sizeof(*mall_tc_entry), GFP_KERNEL);
 +	if (!mall_tc_entry)
 +		return -ENOMEM;
- 	mall_tc_entry->cookie = cls->cookie;
++	mall_tc_entry->cookie = f->cookie;
  
++<<<<<<< HEAD
 +	a = list_first_entry(&cls->exts->actions, struct tc_action, list);
++=======
+ 	tcf_exts_to_list(f->exts, &actions);
+ 	a = list_first_entry(&actions, struct tc_action, list);
++>>>>>>> 9cbf14ede21e (mlxsw: spectrum: rename cls arg in matchall processing)
  
  	if (is_tcf_mirred_egress_mirror(a) && protocol == htons(ETH_P_ALL)) {
  		struct mlxsw_sp_port_mall_mirror_tc_entry *mirror;
@@@ -1246,6 -1646,10 +1255,13 @@@
  		mirror = &mall_tc_entry->mirror;
  		err = mlxsw_sp_port_add_cls_matchall_mirror(mlxsw_sp_port,
  							    mirror, a, ingress);
++<<<<<<< HEAD
++=======
+ 	} else if (is_tcf_sample(a) && protocol == htons(ETH_P_ALL)) {
+ 		mall_tc_entry->type = MLXSW_SP_PORT_MALL_SAMPLE;
+ 		err = mlxsw_sp_port_add_cls_matchall_sample(mlxsw_sp_port, f,
+ 							    a, ingress);
++>>>>>>> 9cbf14ede21e (mlxsw: spectrum: rename cls arg in matchall processing)
  	} else {
  		err = -EOPNOTSUPP;
  	}
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
