nfp: remove RX queue pointers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 83d08a1d746522c3286c2f52608bea0f79c0e9df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/83d08a1d.failed

NFP6000 doesn't use queue pointers/doorbells for RX, it uses
'done' bit in descriptors.  Remove the pointers from data structures.
Since we are saving space in rx_ring structure make fields we
previously compressed to 16bits word size again.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 83d08a1d746522c3286c2f52608bea0f79c0e9df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
index fddf57c8c945,4077c59bf782..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
@@@ -61,12 -61,11 +61,17 @@@ static int nfp_net_debugfs_rx_q_read(st
  
  	fl_rd_p = nfp_qcp_rd_ptr_read(rx_ring->qcp_fl);
  	fl_wr_p = nfp_qcp_wr_ptr_read(rx_ring->qcp_fl);
- 	rx_rd_p = nfp_qcp_rd_ptr_read(rx_ring->qcp_rx);
- 	rx_wr_p = nfp_qcp_wr_ptr_read(rx_ring->qcp_rx);
  
++<<<<<<< HEAD
 +	seq_printf(file, "RX[%02d]: H_RD=%d H_WR=%d FL_RD=%d FL_WR=%d RX_RD=%d RX_WR=%d\n",
 +		   rx_ring->idx, rx_ring->rd_p, rx_ring->wr_p,
 +		   fl_rd_p, fl_wr_p, rx_rd_p, rx_wr_p);
++=======
+ 	seq_printf(file, "RX[%02d,%02d]: cnt=%d dma=%pad host=%p   H_RD=%d H_WR=%d FL_RD=%d FL_WR=%d\n",
+ 		   rx_ring->idx, rx_ring->fl_qcidx,
+ 		   rx_ring->cnt, &rx_ring->dma, rx_ring->rxds,
+ 		   rx_ring->rd_p, rx_ring->wr_p, fl_rd_p, fl_wr_p);
++>>>>>>> 83d08a1d7465 (nfp: remove RX queue pointers)
  
  	for (i = 0; i < rxd_cnt; i++) {
  		rxd = &rx_ring->rxds[i];
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net.h b/drivers/net/ethernet/netronome/nfp/nfp_net.h
index 1826ee93d1da..6e9de687c9c7 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@ -298,9 +298,7 @@ struct nfp_net_rx_buf {
  * @rd_p:       FL/RX ring read pointer (free running)
  * @idx:        Ring index from Linux's perspective
  * @fl_qcidx:   Queue Controller Peripheral (QCP) queue index for the freelist
- * @rx_qcidx:   Queue Controller Peripheral (QCP) queue index for the RX queue
  * @qcp_fl:     Pointer to base of the QCP freelist queue
- * @qcp_rx:     Pointer to base of the QCP RX queue
  * @wr_ptr_add: Accumulated number of buffers to add to QCP write pointer
  *              (used for free list batching)
  * @rxbufs:     Array of transmitted FL/RX buffers
@@ -317,13 +315,11 @@ struct nfp_net_rx_ring {
 	u32 wr_p;
 	u32 rd_p;
 
-	u16 idx;
-	u16 wr_ptr_add;
+	u32 idx;
+	u32 wr_ptr_add;
 
 	int fl_qcidx;
-	int rx_qcidx;
 	u8 __iomem *qcp_fl;
-	u8 __iomem *qcp_rx;
 
 	struct nfp_net_rx_buf *rxbufs;
 	struct nfp_net_rx_desc *rxds;
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index e0a7eb1db7a9..8a23819a01a0 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@ -473,10 +473,7 @@ nfp_net_rx_ring_init(struct nfp_net_rx_ring *rx_ring,
 	rx_ring->r_vec = r_vec;
 
 	rx_ring->fl_qcidx = rx_ring->idx * nn->stride_rx;
-	rx_ring->rx_qcidx = rx_ring->fl_qcidx + (nn->stride_rx - 1);
-
 	rx_ring->qcp_fl = nn->rx_bar + NFP_QCP_QUEUE_OFF(rx_ring->fl_qcidx);
-	rx_ring->qcp_rx = nn->rx_bar + NFP_QCP_QUEUE_OFF(rx_ring->rx_qcidx);
 }
 
 /**
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_debugfs.c
