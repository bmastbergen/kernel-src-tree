nfp: add helper for printing ethtool strings

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 634287ba7544f10e81d2ffcb58e934b2a3514ed2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/634287ba.failed

Add a helper for printing ethtool strings and advancing the
pointer correctly.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 634287ba7544f10e81d2ffcb58e934b2a3514ed2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
index 69f458e0de89,ba1c28b8791b..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
@@@ -332,44 -354,33 +342,73 @@@ static void nfp_net_get_strings(struct 
  
  	switch (stringset) {
  	case ETH_SS_STATS:
++<<<<<<< HEAD
 +		for (i = 0; i < NN_ET_GLOBAL_STATS_LEN; i++) {
 +			memcpy(p, nfp_net_et_stats[i].name, ETH_GSTRING_LEN);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < nn->num_r_vecs; i++) {
 +			sprintf(p, "rvec_%u_rx_pkts", i);
 +			p += ETH_GSTRING_LEN;
 +			sprintf(p, "rvec_%u_tx_pkts", i);
 +			p += ETH_GSTRING_LEN;
 +			sprintf(p, "rvec_%u_tx_busy", i);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		strncpy(p, "hw_rx_csum_ok", ETH_GSTRING_LEN);
 +		p += ETH_GSTRING_LEN;
 +		strncpy(p, "hw_rx_csum_inner_ok", ETH_GSTRING_LEN);
 +		p += ETH_GSTRING_LEN;
 +		strncpy(p, "hw_rx_csum_err", ETH_GSTRING_LEN);
 +		p += ETH_GSTRING_LEN;
 +		strncpy(p, "hw_tx_csum", ETH_GSTRING_LEN);
 +		p += ETH_GSTRING_LEN;
 +		strncpy(p, "hw_tx_inner_csum", ETH_GSTRING_LEN);
 +		p += ETH_GSTRING_LEN;
 +		strncpy(p, "tx_gather", ETH_GSTRING_LEN);
 +		p += ETH_GSTRING_LEN;
 +		strncpy(p, "tx_lso", ETH_GSTRING_LEN);
 +		p += ETH_GSTRING_LEN;
 +		for (i = 0; i < nn->num_tx_rings; i++) {
 +			sprintf(p, "txq_%u_pkts", i);
 +			p += ETH_GSTRING_LEN;
 +			sprintf(p, "txq_%u_bytes", i);
 +			p += ETH_GSTRING_LEN;
 +		}
 +		for (i = 0; i < nn->num_rx_rings; i++) {
 +			sprintf(p, "rxq_%u_pkts", i);
 +			p += ETH_GSTRING_LEN;
 +			sprintf(p, "rxq_%u_bytes", i);
 +			p += ETH_GSTRING_LEN;
++=======
+ 		for (i = 0; i < NN_ET_GLOBAL_STATS_LEN; i++)
+ 			data = nfp_pr_et(data, nfp_net_et_stats[i].name);
+ 
+ 		for (i = 0; i < nn->dp.num_r_vecs; i++) {
+ 			data = nfp_pr_et(data, "rvec_%u_rx_pkts", i);
+ 			data = nfp_pr_et(data, "rvec_%u_tx_pkts", i);
+ 			data = nfp_pr_et(data, "rvec_%u_tx_busy", i);
  		}
+ 
+ 		data = nfp_pr_et(data, "hw_rx_csum_ok");
+ 		data = nfp_pr_et(data, "hw_rx_csum_inner_ok");
+ 		data = nfp_pr_et(data, "hw_rx_csum_err");
+ 		data = nfp_pr_et(data, "hw_tx_csum");
+ 		data = nfp_pr_et(data, "hw_tx_inner_csum");
+ 		data = nfp_pr_et(data, "tx_gather");
+ 		data = nfp_pr_et(data, "tx_lso");
+ 
+ 		for (i = 0; i < nn->dp.num_tx_rings; i++) {
+ 			data = nfp_pr_et(data, "txq_%u_pkts", i);
+ 			data = nfp_pr_et(data, "txq_%u_bytes", i);
+ 		}
+ 
+ 		for (i = 0; i < nn->dp.num_rx_rings; i++) {
+ 			data = nfp_pr_et(data, "rxq_%u_pkts", i);
+ 			data = nfp_pr_et(data, "rxq_%u_bytes", i);
++>>>>>>> 634287ba7544 (nfp: add helper for printing ethtool strings)
+ 		}
+ 
  		break;
  	}
  }
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
