HID: hid-sensor-hub: Enhance get feature report API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [hid] hid-sensor-hub: Enhance get feature report API (Gopal Tiwari) [1475903]
Rebuild_FUZZ: 94.85%
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit 6adc83fca74ab73abcbd3b394cf3a8fd3701db99
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6adc83fc.failed

Some hid sensor feature report can contain more than one reports.
This API can now support receiving multiple values from the feature
report.
Also update the parameters in the users of this API.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Acked-by: Jonathan Cameron <jic23@kernel.org>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 6adc83fca74ab73abcbd3b394cf3a8fd3701db99)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/hid-sensor-hub.c
#	drivers/iio/common/hid-sensors/hid-sensor-attributes.c
diff --cc drivers/hid/hid-sensor-hub.c
index b189feb69789,c025c489270d..000000000000
--- a/drivers/hid/hid-sensor-hub.c
+++ b/drivers/hid/hid-sensor-hub.c
@@@ -213,10 -223,11 +213,15 @@@ done_proc
  EXPORT_SYMBOL_GPL(sensor_hub_set_feature);
  
  int sensor_hub_get_feature(struct hid_sensor_hub_device *hsdev, u32 report_id,
- 				u32 field_index, s32 *value)
+ 			   u32 field_index, int buffer_size, void *buffer)
  {
  	struct hid_report *report;
++<<<<<<< HEAD
 +	struct sensor_hub_data *data =  hid_get_drvdata(hsdev->hdev);
++=======
+ 	struct sensor_hub_data *data = hid_get_drvdata(hsdev->hdev);
+ 	int report_size;
++>>>>>>> 6adc83fca74a (HID: hid-sensor-hub: Enhance get feature report API)
  	int ret = 0;
  
  	mutex_lock(&data->mutex);
diff --cc drivers/iio/common/hid-sensors/hid-sensor-attributes.c
index 75b54730a963,e1435e98636d..000000000000
--- a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
@@@ -113,6 -147,26 +113,29 @@@ static u32 convert_to_vtf_format(int si
  	return value;
  }
  
++<<<<<<< HEAD
++=======
+ s32 hid_sensor_read_poll_value(struct hid_sensor_common *st)
+ {
+ 	s32 value = 0;
+ 	int ret;
+ 
+ 	ret = sensor_hub_get_feature(st->hsdev,
+ 				     st->poll.report_id,
+ 				     st->poll.index, sizeof(value), &value);
+ 
+ 	if (ret < 0 || value < 0) {
+ 		return -EINVAL;
+ 	} else {
+ 		if (st->poll.units == HID_USAGE_SENSOR_UNITS_SECOND)
+ 			value = value * 1000;
+ 	}
+ 
+ 	return value;
+ }
+ EXPORT_SYMBOL(hid_sensor_read_poll_value);
+ 
++>>>>>>> 6adc83fca74a (HID: hid-sensor-hub: Enhance get feature report API)
  int hid_sensor_read_samp_freq_value(struct hid_sensor_common *st,
  				int *val1, int *val2)
  {
* Unmerged path drivers/hid/hid-sensor-hub.c
* Unmerged path drivers/iio/common/hid-sensors/hid-sensor-attributes.c
diff --git a/drivers/iio/common/hid-sensors/hid-sensor-trigger.c b/drivers/iio/common/hid-sensors/hid-sensor-trigger.c
index 5cc9e5190684..3a42ab3b8c96 100644
--- a/drivers/iio/common/hid-sensors/hid-sensor-trigger.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-trigger.c
@@ -74,8 +74,8 @@ static int hid_sensor_data_rdy_trigger_set_state(struct iio_trigger *trig,
 	}
 
 	sensor_hub_get_feature(st->hsdev, st->power_state.report_id,
-					st->power_state.index,
-					&state_val);
+			       st->power_state.index,
+			       sizeof(state_val), &state_val);
 	return 0;
 }
 
diff --git a/include/linux/hid-sensor-hub.h b/include/linux/hid-sensor-hub.h
index 05fe6c21f3e2..cbf04e650058 100644
--- a/include/linux/hid-sensor-hub.h
+++ b/include/linux/hid-sensor-hub.h
@@ -152,13 +152,15 @@ int sensor_hub_set_feature(struct hid_sensor_hub_device *hsdev, u32 report_id,
 * sensor_hub_get_feature() - Feature get request
 * @report_id:	Report id to look for
 * @field_index:	Field index inside a report
-* @value:	Place holder for return value
+* @buffer_size:	size of the buffer
+* @buffer:	buffer to copy output
 *
 * Used to get a field in feature report. For example this can get polling
-* interval, sensitivity, activate/deactivate state.
+* interval, sensitivity, activate/deactivate state. On success it returns
+* number of bytes copied to buffer. On failure, it returns value < 0.
 */
 int sensor_hub_get_feature(struct hid_sensor_hub_device *hsdev, u32 report_id,
-			u32 field_index, s32 *value);
+			   u32 field_index, int buffer_size, void *buffer);
 
 /* hid-sensor-attributes */
 
