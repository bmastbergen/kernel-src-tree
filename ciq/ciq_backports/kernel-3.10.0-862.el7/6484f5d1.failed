nvme: also provide a UUID in the WWID sysfs attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] also provide a UUID in the WWID sysfs attribute (David Milburn) [1457880 1456486 1454365]
Rebuild_FUZZ: 94.00%
commit-author Johannes Thumshirn <jthumshirn@suse.de>
commit 6484f5d16f9d5368afac61091972242f3bd695a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6484f5d1.failed

The WWID sysfs attribute can provide multiple means of a World Wide ID
for a NVMe device. It can either be a NGUID, a EUI-64 or a concatenation
of VID, Serial Number, Model and the Namespace ID in this order of
preference.

If the target also sends us a UUID use the UUID for identification and
give it the highest priority.

This eases generation of /dev/disk/by-* symlinks.

	Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 6484f5d16f9d5368afac61091972242f3bd695a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index f3660f9b6cc7,4cacab331f2a..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1376,8 -1995,11 +1376,16 @@@ static ssize_t wwid_show(struct device 
  	int serial_len = sizeof(ctrl->serial);
  	int model_len = sizeof(ctrl->model);
  
++<<<<<<< HEAD
 +	if (memchr_inv(ns->uuid, 0, sizeof(ns->uuid)))
 +		return sprintf(buf, "eui.%16phN\n", ns->uuid);
++=======
+ 	if (!uuid_is_null(&ns->uuid))
+ 		return sprintf(buf, "uuid.%pU\n", &ns->uuid);
+ 
+ 	if (memchr_inv(ns->nguid, 0, sizeof(ns->nguid)))
+ 		return sprintf(buf, "eui.%16phN\n", ns->nguid);
++>>>>>>> 6484f5d16f9d (nvme: also provide a UUID in the WWID sysfs attribute)
  
  	if (memchr_inv(ns->eui, 0, sizeof(ns->eui)))
  		return sprintf(buf, "eui.%8phN\n", ns->eui);
* Unmerged path drivers/nvme/host/core.c
