x86/dumpstack/ftrace: Mark function graph handler function as unreliable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 6f727b84e23421721025f4eb1b4f6cea1d4d723a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6f727b84.failed

When function graph tracing is enabled for a function, its return
address on the stack is replaced with the address of an ftrace handler
(return_to_handler).

Currently 'return_to_handler' can be reported as reliable.  That's not
ideal, and can actually be misleading.  When saving or dumping the
stack, you normally only care about what led up to that point (the call
path), rather than what will happen in the future (the return path).

That's especially true in the non-oops stack trace case, which isn't
used for debugging.  For example, in a perf profiling operation,
reporting return_to_handler() in the trace would just be confusing.

And in the oops case, where debugging is important, "unreliable" is also
more appropriate there because it serves as a hint that graph tracing
was involved, instead of trying to imply that return_to_handler() was
the real caller.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Acked-by: Steven Rostedt <rostedt@goodmis.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Byungchul Park <byungchul.park@lge.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Nilay Vaish <nilayvaish@gmail.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/f8af15749c7d632d3e7f815995831d5b7f82950d.1471607358.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 6f727b84e23421721025f4eb1b4f6cea1d4d723a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/dumpstack.c
diff --cc arch/x86/kernel/dumpstack.c
index 519aaf41a253,6aad8d4e2ea6..000000000000
--- a/arch/x86/kernel/dumpstack.c
+++ b/arch/x86/kernel/dumpstack.c
@@@ -100,19 -66,42 +100,38 @@@ print_context_stack(struct thread_info 
  {
  	struct stack_frame *frame = (struct stack_frame *)bp;
  
 -	/*
 -	 * If we overflowed the stack into a guard page, jump back to the
 -	 * bottom of the usable stack.
 -	 */
 -	if ((unsigned long)task_stack_page(task) - (unsigned long)stack <
 -	    PAGE_SIZE)
 -		stack = (unsigned long *)task_stack_page(task);
 -
 -	while (valid_stack_ptr(task, stack, sizeof(*stack), end)) {
 -		unsigned long addr = *stack;
 +	while (valid_stack_ptr(tinfo, stack, sizeof(*stack), end)) {
 +		unsigned long addr;
  
 +		addr = *stack;
  		if (__kernel_text_address(addr)) {
 -			unsigned long real_addr;
 -			int reliable = 0;
 -
  			if ((unsigned long) stack == bp + sizeof(long)) {
 -				reliable = 1;
 +				ops->address(data, addr, 1);
  				frame = frame->next_frame;
  				bp = (unsigned long) frame;
 +			} else {
 +				ops->address(data, addr, 0);
  			}
++<<<<<<< HEAD
 +			print_ftrace_graph_addr(addr, data, ops, tinfo, graph);
++=======
+ 
+ 			/*
+ 			 * When function graph tracing is enabled for a
+ 			 * function, its return address on the stack is
+ 			 * replaced with the address of an ftrace handler
+ 			 * (return_to_handler).  In that case, before printing
+ 			 * the "real" address, we want to print the handler
+ 			 * address as an "unreliable" hint that function graph
+ 			 * tracing was involved.
+ 			 */
+ 			real_addr = ftrace_graph_ret_addr(task, graph, addr,
+ 							  stack);
+ 			if (real_addr != addr)
+ 				ops->address(data, addr, 0);
+ 
+ 			ops->address(data, real_addr, reliable);
++>>>>>>> 6f727b84e234 (x86/dumpstack/ftrace: Mark function graph handler function as unreliable)
  		}
  		stack++;
  	}
@@@ -135,11 -125,14 +154,20 @@@ print_context_stack_bp(struct thread_in
  		if (!__kernel_text_address(addr))
  			break;
  
++<<<<<<< HEAD
 +		if (ops->address(data, addr, 1))
 +			break;
++=======
+ 		real_addr = ftrace_graph_ret_addr(task, graph, addr, retp);
+ 		if (real_addr != addr && ops->address(data, addr, 0))
+ 			break;
+ 		if (ops->address(data, real_addr, 1))
+ 			break;
+ 
++>>>>>>> 6f727b84e234 (x86/dumpstack/ftrace: Mark function graph handler function as unreliable)
  		frame = frame->next_frame;
 -		retp = &frame->return_address;
 +		ret_addr = &frame->return_address;
 +		print_ftrace_graph_addr(addr, data, ops, tinfo, graph);
  	}
  
  	return (unsigned long)frame;
* Unmerged path arch/x86/kernel/dumpstack.c
