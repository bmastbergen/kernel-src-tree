nfp: turn reading PCIe RTsym parameters into a helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 69394af5de15493fa7bb42ed123d51e713a88b3c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/69394af5.failed

Turn the function to read number of ports into a generic helper.
While at it make sure we propagate all errors other than -ENOENT.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 69394af5de15493fa7bb42ed123d51e713a88b3c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_main.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index acc8cfe284f3,55a4a334cf6b..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@@ -175,33 -184,29 +175,42 @@@ nfp_net_get_mac_addr(struct nfp_net *nn
  {
  	int i;
  
 -	for (i = 0; eth_tbl && i < eth_tbl->count; i++)
 -		if (eth_tbl->ports[i].eth_index == id)
 -			return &eth_tbl->ports[i];
 +	for (i = 0; pf->eth_tbl && i < pf->eth_tbl->count; i++)
 +		if (pf->eth_tbl->ports[i].eth_index == id) {
 +			const u8 *mac_addr = pf->eth_tbl->ports[i].mac_addr;
  
 -	return NULL;
 +			ether_addr_copy(nn->netdev->dev_addr, mac_addr);
 +			ether_addr_copy(nn->netdev->perm_addr, mac_addr);
 +			return;
 +		}
 +
 +	nfp_net_get_mac_addr_hwinfo(nn, pf->cpp, id);
  }
  
- static unsigned int nfp_net_pf_get_num_ports(struct nfp_pf *pf)
+ static int
+ nfp_net_pf_rtsym_read_optional(struct nfp_pf *pf, const char *format,
+ 			       unsigned int default_val)
  {
  	char name[256];
  	int err = 0;
  	u64 val;
  
- 	snprintf(name, sizeof(name), "nfd_cfg_pf%u_num_ports",
- 		 nfp_cppcore_pcie_unit(pf->cpp));
+ 	snprintf(name, sizeof(name), format, nfp_cppcore_pcie_unit(pf->cpp));
  
  	val = nfp_rtsym_read_le(pf->cpp, name, &err);
++<<<<<<< HEAD
 +	/* Default to one port */
 +	if (err) {
 +		if (err != -ENOENT)
 +			nfp_err(pf->cpp, "Unable to read adapter port count\n");
 +		val = 1;
++=======
+ 	if (err) {
+ 		if (err == -ENOENT)
+ 			return default_val;
+ 		nfp_err(pf->cpp, "Unable to read symbol %s\n", name);
+ 		return err;
++>>>>>>> 69394af5de15 (nfp: turn reading PCIe RTsym parameters into a helper)
  	}
  
  	return val;
@@@ -544,8 -679,12 +558,17 @@@ int nfp_net_pci_probe(struct nfp_pf *pf
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	mutex_lock(&pf->port_lock);
 +	pf->num_ports = nfp_net_pf_get_num_ports(pf);
++=======
+ 	mutex_lock(&pf->lock);
+ 	pf->max_data_vnics = nfp_net_pf_get_num_ports(pf);
+ 	if ((int)pf->max_data_vnics < 0) {
+ 		err = pf->max_data_vnics;
+ 		goto err_unlock;
+ 	}
++>>>>>>> 69394af5de15 (nfp: turn reading PCIe RTsym parameters into a helper)
  
  	ctrl_bar = nfp_net_pf_map_ctrl_bar(pf);
  	if (!ctrl_bar) {
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_main.c
