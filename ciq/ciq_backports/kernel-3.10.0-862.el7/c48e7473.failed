openvswitch: Fix pop_vlan action for double tagged frames

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric Garver <e@erig.me>
commit c48e74736fccf25fb32bb015426359e1c2016e3b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c48e7473.failed

skb_vlan_pop() expects skb->protocol to be a valid TPID for double
tagged frames. So set skb->protocol to the TPID and let skb_vlan_pop()
shift the true ethertype into position for us.

Fixes: 5108bbaddc37 ("openvswitch: add processing of L3 packets")
	Signed-off-by: Eric Garver <e@erig.me>
	Reviewed-by: Jiri Benc <jbenc@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c48e74736fccf25fb32bb015426359e1c2016e3b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/flow.c
diff --cc net/openvswitch/flow.c
index 974820bebcaf,f039064ce922..000000000000
--- a/net/openvswitch/flow.c
+++ b/net/openvswitch/flow.c
@@@ -503,28 -572,44 +503,57 @@@ static int key_extract(struct sk_buff *
  
  	skb_reset_mac_header(skb);
  
 -	/* Link layer. */
 -	clear_vlan(key);
 -	if (ovs_key_mac_proto(key) == MAC_PROTO_NONE) {
 -		if (unlikely(eth_type_vlan(skb->protocol)))
 -			return -EINVAL;
 -
 +	/* Link layer.  We are guaranteed to have at least the 14 byte Ethernet
 +	 * header in the linear data area.
 +	 */
 +	eth = eth_hdr(skb);
 +	ether_addr_copy(key->eth.src, eth->h_source);
 +	ether_addr_copy(key->eth.dst, eth->h_dest);
 +
++<<<<<<< HEAD
 +	__skb_pull(skb, 2 * ETH_ALEN);
 +	/* We are going to push all headers that we pull, so no need to
 +	 * update skb->csum here.
 +	 */
++=======
+ 		skb_reset_network_header(skb);
+ 		key->eth.type = skb->protocol;
+ 	} else {
+ 		eth = eth_hdr(skb);
+ 		ether_addr_copy(key->eth.src, eth->h_source);
+ 		ether_addr_copy(key->eth.dst, eth->h_dest);
++>>>>>>> c48e74736fcc (openvswitch: Fix pop_vlan action for double tagged frames)
  
 -		__skb_pull(skb, 2 * ETH_ALEN);
 -		/* We are going to push all headers that we pull, so no need to
 -		* update skb->csum here.
 -		*/
 +	if (unlikely(parse_vlan(skb, key)))
 +		return -ENOMEM;
  
 -		if (unlikely(parse_vlan(skb, key)))
 -			return -ENOMEM;
 +	key->eth.type = parse_ethertype(skb);
 +	if (unlikely(key->eth.type == htons(0)))
 +		return -ENOMEM;
  
++<<<<<<< HEAD
 +	skb_reset_network_header(skb);
 +	skb_reset_mac_len(skb);
 +	__skb_push(skb, skb->data - skb_mac_header(skb));
++=======
+ 		key->eth.type = parse_ethertype(skb);
+ 		if (unlikely(key->eth.type == htons(0)))
+ 			return -ENOMEM;
+ 
+ 		/* Multiple tagged packets need to retain TPID to satisfy
+ 		 * skb_vlan_pop(), which will later shift the ethertype into
+ 		 * skb->protocol.
+ 		 */
+ 		if (key->eth.cvlan.tci & htons(VLAN_TAG_PRESENT))
+ 			skb->protocol = key->eth.cvlan.tpid;
+ 		else
+ 			skb->protocol = key->eth.type;
+ 
+ 		skb_reset_network_header(skb);
+ 		__skb_push(skb, skb->data - skb_mac_header(skb));
+ 	}
+ 	skb_reset_mac_len(skb);
++>>>>>>> c48e74736fcc (openvswitch: Fix pop_vlan action for double tagged frames)
  
  	/* Network layer. */
  	if (key->eth.type == htons(ETH_P_IP)) {
* Unmerged path net/openvswitch/flow.c
