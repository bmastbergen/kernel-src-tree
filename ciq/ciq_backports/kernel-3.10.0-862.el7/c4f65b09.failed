net/act_pedit: fix an error code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] act_pedit: fix an error code (Ivan Vecera) [1445420]
Rebuild_FUZZ: 93.33%
commit-author Dan Carpenter <dan.carpenter@oracle.com>
commit c4f65b09b459c6f0ec27b1a1a65302f7fea5c96f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c4f65b09.failed

I'm reviewing static checker warnings where we do ERR_PTR(0), which is
the same as NULL.  I'm pretty sure we intended to return ERR_PTR(-EINVAL)
here.  Sometimes these bugs lead to a NULL dereference but I don't
immediately see that problem here.

Fixes: 71d0ed7079df ("net/act_pedit: Support using offset relative to the conventional network headers")
	Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
	Acked-by: Amir Vadai <amir@vadai.me>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c4f65b09b459c6f0ec27b1a1a65302f7fea5c96f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_pedit.c
diff --cc net/sched/act_pedit.c
index 0ad8b8fe7165,7dc5892671c8..000000000000
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@@ -25,15 -25,120 +25,116 @@@
  
  #define PEDIT_TAB_MASK	15
  
 -static unsigned int pedit_net_id;
 -static struct tc_action_ops act_pedit_ops;
 -
  static const struct nla_policy pedit_policy[TCA_PEDIT_MAX + 1] = {
  	[TCA_PEDIT_PARMS]	= { .len = sizeof(struct tc_pedit) },
 -	[TCA_PEDIT_KEYS_EX]   = { .type = NLA_NESTED },
  };
  
++<<<<<<< HEAD
++=======
+ static const struct nla_policy pedit_key_ex_policy[TCA_PEDIT_KEY_EX_MAX + 1] = {
+ 	[TCA_PEDIT_KEY_EX_HTYPE]  = { .type = NLA_U16 },
+ 	[TCA_PEDIT_KEY_EX_CMD]	  = { .type = NLA_U16 },
+ };
+ 
+ static struct tcf_pedit_key_ex *tcf_pedit_keys_ex_parse(struct nlattr *nla,
+ 							u8 n)
+ {
+ 	struct tcf_pedit_key_ex *keys_ex;
+ 	struct tcf_pedit_key_ex *k;
+ 	const struct nlattr *ka;
+ 	int err = -EINVAL;
+ 	int rem;
+ 
+ 	if (!nla || !n)
+ 		return NULL;
+ 
+ 	keys_ex = kcalloc(n, sizeof(*k), GFP_KERNEL);
+ 	if (!keys_ex)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	k = keys_ex;
+ 
+ 	nla_for_each_nested(ka, nla, rem) {
+ 		struct nlattr *tb[TCA_PEDIT_KEY_EX_MAX + 1];
+ 
+ 		if (!n) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 		n--;
+ 
+ 		if (nla_type(ka) != TCA_PEDIT_KEY_EX) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		err = nla_parse_nested(tb, TCA_PEDIT_KEY_EX_MAX, ka,
+ 				       pedit_key_ex_policy, NULL);
+ 		if (err)
+ 			goto err_out;
+ 
+ 		if (!tb[TCA_PEDIT_KEY_EX_HTYPE] ||
+ 		    !tb[TCA_PEDIT_KEY_EX_CMD]) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		k->htype = nla_get_u16(tb[TCA_PEDIT_KEY_EX_HTYPE]);
+ 		k->cmd = nla_get_u16(tb[TCA_PEDIT_KEY_EX_CMD]);
+ 
+ 		if (k->htype > TCA_PEDIT_HDR_TYPE_MAX ||
+ 		    k->cmd > TCA_PEDIT_CMD_MAX) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		k++;
+ 	}
+ 
+ 	if (n) {
+ 		err = -EINVAL;
+ 		goto err_out;
+ 	}
+ 
+ 	return keys_ex;
+ 
+ err_out:
+ 	kfree(keys_ex);
+ 	return ERR_PTR(err);
+ }
+ 
+ static int tcf_pedit_key_ex_dump(struct sk_buff *skb,
+ 				 struct tcf_pedit_key_ex *keys_ex, int n)
+ {
+ 	struct nlattr *keys_start = nla_nest_start(skb, TCA_PEDIT_KEYS_EX);
+ 
+ 	for (; n > 0; n--) {
+ 		struct nlattr *key_start;
+ 
+ 		key_start = nla_nest_start(skb, TCA_PEDIT_KEY_EX);
+ 
+ 		if (nla_put_u16(skb, TCA_PEDIT_KEY_EX_HTYPE, keys_ex->htype) ||
+ 		    nla_put_u16(skb, TCA_PEDIT_KEY_EX_CMD, keys_ex->cmd)) {
+ 			nlmsg_trim(skb, keys_start);
+ 			return -EINVAL;
+ 		}
+ 
+ 		nla_nest_end(skb, key_start);
+ 
+ 		keys_ex++;
+ 	}
+ 
+ 	nla_nest_end(skb, keys_start);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> c4f65b09b459 (net/act_pedit: fix an error code)
  static int tcf_pedit_init(struct net *net, struct nlattr *nla,
 -			  struct nlattr *est, struct tc_action **a,
 +			  struct nlattr *est, struct tc_action *a,
  			  int ovr, int bind)
  {
 -	struct tc_action_net *tn = net_generic(net, pedit_net_id);
  	struct nlattr *tb[TCA_PEDIT_MAX + 1];
 -	struct nlattr *pattr;
  	struct tc_pedit *parm;
  	int ret = 0, err;
  	struct tcf_pedit *p;
* Unmerged path net/sched/act_pedit.c
