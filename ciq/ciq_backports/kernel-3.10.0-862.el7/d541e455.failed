IB/core: Convert ah_attr from OPA to IB when copying to user

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Dasaratharaman Chandramouli <dasaratharaman.chandramouli@intel.com>
commit d541e45500bd269060c26387902e1bec9783c07c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d541e455.failed

OPA address handle atttibutes that have 32 bit LIDs would have to
be converted to IB address handle attribute with the LID field
programmed in the GID before copying to user space.

	Signed-off-by: Dasaratharaman Chandramouli <dasaratharaman.chandramouli@intel.com>
	Reviewed-by: Don Hiatt <don.hiatt@intel.com>
	Reviewed-by: Ira Weiny <ira.weiny@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit d541e45500bd269060c26387902e1bec9783c07c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_marshall.c
#	include/rdma/ib_marshall.h
diff --cc drivers/infiniband/core/uverbs_marshall.c
index a9739f334562,bd0acf376af0..000000000000
--- a/drivers/infiniband/core/uverbs_marshall.c
+++ b/drivers/infiniband/core/uverbs_marshall.c
@@@ -33,23 -33,63 +33,74 @@@
  #include <linux/export.h>
  #include <rdma/ib_marshall.h>
  
++<<<<<<< HEAD
 +void ib_copy_ah_attr_to_user(struct ib_uverbs_ah_attr *dst,
 +			     struct ib_ah_attr *src)
++=======
+ #define OPA_DEFAULT_GID_PREFIX cpu_to_be64(0xfe80000000000000ULL)
+ static int rdma_ah_conv_opa_to_ib(struct ib_device *dev,
+ 				  struct rdma_ah_attr *ib,
+ 				  struct rdma_ah_attr *opa)
++>>>>>>> d541e45500bd (IB/core: Convert ah_attr from OPA to IB when copying to user)
  {
+ 	struct ib_port_attr port_attr;
+ 	int ret = 0;
+ 
+ 	/* Do structure copy and the over-write fields */
+ 	*ib = *opa;
+ 
+ 	ib->type = RDMA_AH_ATTR_TYPE_IB;
+ 	rdma_ah_set_grh(ib, NULL, 0, 0, 1, 0);
+ 
+ 	if (ib_query_port(dev, opa->port_num, &port_attr)) {
+ 		/* Set to default subnet to indicate error */
+ 		rdma_ah_set_subnet_prefix(ib, OPA_DEFAULT_GID_PREFIX);
+ 		ret = -EINVAL;
+ 	} else {
+ 		rdma_ah_set_subnet_prefix(ib,
+ 					  cpu_to_be64(port_attr.subnet_prefix));
+ 	}
+ 	rdma_ah_set_interface_id(ib, OPA_MAKE_ID(rdma_ah_get_dlid(opa)));
+ 	return ret;
+ }
+ 
+ void ib_copy_ah_attr_to_user(struct ib_device *device,
+ 			     struct ib_uverbs_ah_attr *dst,
+ 			     struct rdma_ah_attr *ah_attr)
+ {
+ 	struct rdma_ah_attr *src = ah_attr;
+ 	struct rdma_ah_attr conv_ah;
+ 
  	memset(&dst->grh.reserved, 0, sizeof(dst->grh.reserved));
++<<<<<<< HEAD
 +	dst->dlid 	    	   = src->dlid;
 +	dst->sl   	    	   = src->sl;
 +	dst->src_path_bits 	   = src->src_path_bits;
 +	dst->static_rate   	   = src->static_rate;
 +	dst->is_global             = src->ah_flags & IB_AH_GRH ? 1 : 0;
++=======
+ 
+ 	if ((ah_attr->type == RDMA_AH_ATTR_TYPE_OPA) &&
+ 	    (rdma_ah_get_dlid(ah_attr) >=
+ 	     be16_to_cpu(IB_MULTICAST_LID_BASE)) &&
+ 	    (!rdma_ah_conv_opa_to_ib(device, &conv_ah, ah_attr)))
+ 		src = &conv_ah;
+ 
+ 	dst->dlid		   = rdma_ah_get_dlid(src);
+ 	dst->sl			   = rdma_ah_get_sl(src);
+ 	dst->src_path_bits	   = rdma_ah_get_path_bits(src);
+ 	dst->static_rate	   = rdma_ah_get_static_rate(src);
+ 	dst->is_global             = rdma_ah_get_ah_flags(src) &
+ 					IB_AH_GRH ? 1 : 0;
++>>>>>>> d541e45500bd (IB/core: Convert ah_attr from OPA to IB when copying to user)
  	if (dst->is_global) {
 -		const struct ib_global_route *grh = rdma_ah_read_grh(src);
 -
 -		memcpy(dst->grh.dgid, grh->dgid.raw, sizeof(grh->dgid));
 -		dst->grh.flow_label        = grh->flow_label;
 -		dst->grh.sgid_index        = grh->sgid_index;
 -		dst->grh.hop_limit         = grh->hop_limit;
 -		dst->grh.traffic_class     = grh->traffic_class;
 +		memcpy(dst->grh.dgid, src->grh.dgid.raw, sizeof(src->grh.dgid));
 +		dst->grh.flow_label        = src->grh.flow_label;
 +		dst->grh.sgid_index        = src->grh.sgid_index;
 +		dst->grh.hop_limit         = src->grh.hop_limit;
 +		dst->grh.traffic_class     = src->grh.traffic_class;
  	}
 -	dst->port_num		   = rdma_ah_get_port_num(src);
 +	dst->port_num 	    	   = src->port_num;
  	dst->reserved 		   = 0;
  }
  EXPORT_SYMBOL(ib_copy_ah_attr_to_user);
diff --cc include/rdma/ib_marshall.h
index db037205c9e8,8ebf84ae9ed1..000000000000
--- a/include/rdma/ib_marshall.h
+++ b/include/rdma/ib_marshall.h
@@@ -38,16 -38,18 +38,23 @@@
  #include <rdma/ib_user_verbs.h>
  #include <rdma/ib_user_sa.h>
  
- void ib_copy_qp_attr_to_user(struct ib_uverbs_qp_attr *dst,
+ void ib_copy_qp_attr_to_user(struct ib_device *device,
+ 			     struct ib_uverbs_qp_attr *dst,
  			     struct ib_qp_attr *src);
  
++<<<<<<< HEAD
 +void ib_copy_ah_attr_to_user(struct ib_uverbs_ah_attr *dst,
 +			     struct ib_ah_attr *src);
++=======
+ void ib_copy_ah_attr_to_user(struct ib_device *device,
+ 			     struct ib_uverbs_ah_attr *dst,
+ 			     struct rdma_ah_attr *src);
++>>>>>>> d541e45500bd (IB/core: Convert ah_attr from OPA to IB when copying to user)
  
  void ib_copy_path_rec_to_user(struct ib_user_path_rec *dst,
 -			      struct sa_path_rec *src);
 +			      struct ib_sa_path_rec *src);
  
 -void ib_copy_path_rec_from_user(struct sa_path_rec *dst,
 +void ib_copy_path_rec_from_user(struct ib_sa_path_rec *dst,
  				struct ib_user_path_rec *src);
  
  #endif /* IB_USER_MARSHALL_H */
diff --git a/drivers/infiniband/core/ucm.c b/drivers/infiniband/core/ucm.c
index 0b989d630c55..ffd37dba4d86 100644
--- a/drivers/infiniband/core/ucm.c
+++ b/drivers/infiniband/core/ucm.c
@@ -618,7 +618,7 @@ static ssize_t ib_ucm_init_qp_attr(struct ib_ucm_file *file,
 	if (result)
 		goto out;
 
-	ib_copy_qp_attr_to_user(&resp, &qp_attr);
+	ib_copy_qp_attr_to_user(ctx->cm_id->device, &resp, &qp_attr);
 
 	if (copy_to_user((void __user *)(unsigned long)cmd.response,
 			 &resp, sizeof(resp)))
diff --git a/drivers/infiniband/core/ucma.c b/drivers/infiniband/core/ucma.c
index e12f8faf8c23..f1c082906000 100644
--- a/drivers/infiniband/core/ucma.c
+++ b/drivers/infiniband/core/ucma.c
@@ -248,14 +248,15 @@ static void ucma_copy_conn_event(struct rdma_ucm_conn_param *dst,
 	dst->qp_num = src->qp_num;
 }
 
-static void ucma_copy_ud_event(struct rdma_ucm_ud_param *dst,
+static void ucma_copy_ud_event(struct ib_device *device,
+			       struct rdma_ucm_ud_param *dst,
 			       struct rdma_ud_param *src)
 {
 	if (src->private_data_len)
 		memcpy(dst->private_data, src->private_data,
 		       src->private_data_len);
 	dst->private_data_len = src->private_data_len;
-	ib_copy_ah_attr_to_user(&dst->ah_attr, &src->ah_attr);
+	ib_copy_ah_attr_to_user(device, &dst->ah_attr, &src->ah_attr);
 	dst->qp_num = src->qp_num;
 	dst->qkey = src->qkey;
 }
@@ -335,7 +336,8 @@ static int ucma_event_handler(struct rdma_cm_id *cm_id,
 	uevent->resp.event = event->event;
 	uevent->resp.status = event->status;
 	if (cm_id->qp_type == IB_QPT_UD)
-		ucma_copy_ud_event(&uevent->resp.param.ud, &event->param.ud);
+		ucma_copy_ud_event(cm_id->device, &uevent->resp.param.ud,
+				   &event->param.ud);
 	else
 		ucma_copy_conn_event(&uevent->resp.param.conn,
 				     &event->param.conn);
@@ -1150,7 +1152,7 @@ static ssize_t ucma_init_qp_attr(struct ucma_file *file,
 	if (ret)
 		goto out;
 
-	ib_copy_qp_attr_to_user(&resp, &qp_attr);
+	ib_copy_qp_attr_to_user(ctx->cm_id->device, &resp, &qp_attr);
 	if (copy_to_user((void __user *)(unsigned long)cmd.response,
 			 &resp, sizeof(resp)))
 		ret = -EFAULT;
* Unmerged path drivers/infiniband/core/uverbs_marshall.c
* Unmerged path include/rdma/ib_marshall.h
