netvsc: no need to allocate send/receive on numa node

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 958333708f2877d3855e3bc31dad428e2f2c8096
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/95833370.failed

The send and receive buffers are both per-device (not per-channel).
The associated NUMA node is a property of the CPU which is per-channel
therefore it makes no sense to force the receive/send buffer to be
allocated on a particular node (since it is a shared resource).

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 958333708f2877d3855e3bc31dad428e2f2c8096)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/netvsc.c
index 52667f48ba1c,7407006f4e22..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -264,19 -232,27 +264,19 @@@ static void netvsc_destroy_buf(struct h
  static int netvsc_init_buf(struct hv_device *device,
  			   struct netvsc_device *net_device)
  {
++<<<<<<< HEAD
 +	int ret = 0;
 +	struct nvsp_message *init_packet;
 +	struct net_device *ndev;
++=======
+ 	struct nvsp_1_message_send_receive_buffer_complete *resp;
+ 	struct net_device *ndev = hv_get_drvdata(device);
+ 	struct nvsp_message *init_packet;
++>>>>>>> 958333708f28 (netvsc: no need to allocate send/receive on numa node)
  	size_t map_words;
- 	int node;
- 
- 	ndev = hv_get_drvdata(device);
- 
- 	node = cpu_to_node(device->channel->target_cpu);
- 	net_device->recv_buf = vzalloc_node(net_device->recv_buf_size, node);
- 	if (!net_device->recv_buf)
- 		net_device->recv_buf = vzalloc(net_device->recv_buf_size);
+ 	int ret = 0;
  
+ 	net_device->recv_buf = vzalloc(net_device->recv_buf_size);
  	if (!net_device->recv_buf) {
  		netdev_err(ndev, "unable to allocate receive "
  			"buffer of size %d\n", net_device->recv_buf_size);
@@@ -357,11 -324,16 +357,24 @@@
  		goto cleanup;
  	}
  
++<<<<<<< HEAD
 +	/* Now setup the send buffer.
 +	 */
 +	net_device->send_buf = vzalloc_node(net_device->send_buf_size, node);
 +	if (!net_device->send_buf)
 +		net_device->send_buf = vzalloc(net_device->send_buf_size);
++=======
+ 	/* Setup receive completion ring */
+ 	net_device->recv_completion_cnt
+ 		= round_up(resp->sections[0].num_sub_allocs + 1,
+ 			   PAGE_SIZE / sizeof(u64));
+ 	ret = netvsc_alloc_recv_comp_ring(net_device, 0);
+ 	if (ret)
+ 		goto cleanup;
+ 
+ 	/* Now setup the send buffer. */
+ 	net_device->send_buf = vzalloc(net_device->send_buf_size);
++>>>>>>> 958333708f28 (netvsc: no need to allocate send/receive on numa node)
  	if (!net_device->send_buf) {
  		netdev_err(ndev, "unable to allocate send "
  			   "buffer of size %d\n", net_device->send_buf_size);
* Unmerged path drivers/net/hyperv/netvsc.c
