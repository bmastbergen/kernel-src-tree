scsi: lpfc: Fix FCP hba_wqidx assignment

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] lpfc: Fix FCP hba_wqidx assignment (Dick Kennedy) [1385844 1461977 1387768]
Rebuild_FUZZ: 91.89%
commit-author Dick Kennedy <dick.kennedy@broadcom.com>
commit 8e036a9497c5d565baafda4c648f2f372999a547
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8e036a94.failed

The driver is encountering  oops in lpfc_sli_calc_ring.

The driver is setting hba_wqidx for FCP based on the policy in use for
NVME. The two may not be the same.  Change to set the wqidx based on the
FCP policy.

	Cc: <stable@vger.kernel.org> # 4.12+
	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <james.smart@broadcom.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 8e036a9497c5d565baafda4c648f2f372999a547)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_sli.c
diff --cc drivers/scsi/lpfc/lpfc_sli.c
index afe166ddbf5a,8c37885f4851..000000000000
--- a/drivers/scsi/lpfc/lpfc_sli.c
+++ b/drivers/scsi/lpfc/lpfc_sli.c
@@@ -8970,46 -9375,47 +8970,57 @@@ lpfc_sli_api_table_setup(struct lpfc_hb
  }
  
  /**
 - * lpfc_sli4_calc_ring - Calculates which ring to use
 + * lpfc_sli_calc_ring - Calculates which ring to use
   * @phba: Pointer to HBA context object.
 + * @ring_number: Initial ring
   * @piocb: Pointer to command iocb.
   *
 - * For SLI4 only, FCP IO can deferred to one fo many WQs, based on
 - * hba_wqidx, thus we need to calculate the corresponding ring.
 + * For SLI4, FCP IO can deferred to one fo many WQs, based on
 + * fcp_wqidx, thus we need to calculate the corresponding ring.
   * Since ABORTS must go on the same WQ of the command they are
 - * aborting, we use command's hba_wqidx.
 + * aborting, we use command's fcp_wqidx.
   */
 -struct lpfc_sli_ring *
 -lpfc_sli4_calc_ring(struct lpfc_hba *phba, struct lpfc_iocbq *piocb)
 +static int
 +lpfc_sli_calc_ring(struct lpfc_hba *phba, uint32_t ring_number,
 +		    struct lpfc_iocbq *piocb)
  {
 -	if (piocb->iocb_flag & (LPFC_IO_FCP | LPFC_USE_FCPWQIDX)) {
 +	if (phba->sli_rev < LPFC_SLI_REV4)
 +		return ring_number;
 +
 +	if (piocb->iocb_flag &  (LPFC_IO_FCP | LPFC_USE_FCPWQIDX)) {
  		if (!(phba->cfg_fof) ||
 -		    (!(piocb->iocb_flag & LPFC_IO_FOF))) {
 +				(!(piocb->iocb_flag & LPFC_IO_FOF))) {
  			if (unlikely(!phba->sli4_hba.fcp_wq))
 -				return NULL;
 +				return LPFC_HBA_ERROR;
  			/*
 -			 * for abort iocb hba_wqidx should already
 +			 * for abort iocb fcp_wqidx should already
  			 * be setup based on what work queue we used.
  			 */
++<<<<<<< HEAD
 +			if (!(piocb->iocb_flag & LPFC_USE_FCPWQIDX))
 +				piocb->fcp_wqidx =
 +					lpfc_sli4_scmd_to_wqidx_distr(phba,
 +							      piocb->context1);
 +			ring_number = MAX_SLI3_CONFIGURED_RINGS +
 +				piocb->fcp_wqidx;
++=======
+ 			if (!(piocb->iocb_flag & LPFC_USE_FCPWQIDX)) {
+ 				piocb->hba_wqidx =
+ 					lpfc_sli4_scmd_to_wqidx_distr(phba,
+ 							      piocb->context1);
+ 				piocb->hba_wqidx = piocb->hba_wqidx %
+ 					phba->cfg_fcp_io_channel;
+ 			}
+ 			return phba->sli4_hba.fcp_wq[piocb->hba_wqidx]->pring;
++>>>>>>> 8e036a9497c5 (scsi: lpfc: Fix FCP hba_wqidx assignment)
  		} else {
  			if (unlikely(!phba->sli4_hba.oas_wq))
 -				return NULL;
 -			piocb->hba_wqidx = 0;
 -			return phba->sli4_hba.oas_wq->pring;
 +				return LPFC_HBA_ERROR;
 +			piocb->fcp_wqidx = 0;
 +			ring_number =  LPFC_FCP_OAS_RING;
  		}
 -	} else {
 -		if (unlikely(!phba->sli4_hba.els_wq))
 -			return NULL;
 -		piocb->hba_wqidx = 0;
 -		return phba->sli4_hba.els_wq->pring;
  	}
 +	return ring_number;
  }
  
  /**
* Unmerged path drivers/scsi/lpfc/lpfc_sli.c
