IB/core: Add support to finalize objects in one transaction

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Matan Barak <matanb@mellanox.com>
commit f43dbebfa32041826299bdccae0352887fa007ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f43dbebf.failed

The new ioctl based infrastructure either commits or rollbacks
all objects of the method as one transaction. In order to do
that, we introduce a notion of dealing with a collection of
objects that are related to a specific method.

This also requires adding a notion of a method and attribute.
A method contains a hash of attributes, where each bucket
contains several attributes. The attributes are hashed according
to their namespace which resides in the four upper bits of the id.

For example, an object could be a CQ, which has an action of CREATE_CQ.
This action has multiple attributes. For example, the CQ's new handle
and the comp_channel. Each layer in this hierarchy - objects, methods
and attributes is split into namespaces. The basic example for that is
one namespace representing the default entities and another one
representing the driver specific entities.

When declaring these methods and attributes, we actually declare
their specifications. When a method is executed, we actually
allocates some space to hold auxiliary information. This auxiliary
information contains meta-data about the required objects, such
as pointers to their type information, pointers to the uobjects
themselves (if exist), etc.
The specification, along with the auxiliary information we allocated
and filled is given to the finalize_objects function.

	Signed-off-by: Matan Barak <matanb@mellanox.com>
	Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit f43dbebfa32041826299bdccae0352887fa007ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/rdma_core.c
#	drivers/infiniband/core/rdma_core.h
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
index 89bca182464c,d3ec02b7d937..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
@@@ -30,24 -30,76 +30,88 @@@
   * SOFTWARE.
   */
  
 -#ifndef _UVERBS_IOCTL_
 -#define _UVERBS_IOCTL_
 +#ifndef __MLX5E_IPOB_H__
 +#define __MLX5E_IPOB_H__
  
 -#include <rdma/uverbs_types.h>
 +#include <linux/mlx5/fs.h>
 +#include "en.h"
  
 -/*
 - * =======================================
 - *	Verbs action specifications
 - * =======================================
 - */
 +#define MLX5I_MAX_NUM_TC 1
  
++<<<<<<< HEAD:drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
 +/* ipoib rdma netdev's private data structure */
 +struct mlx5i_priv {
 +	struct mlx5_core_qp qp;
 +	char  *mlx5e_priv[0];
 +};
 +
 +/* Extract mlx5e_priv from IPoIB netdev */
 +#define mlx5i_epriv(netdev) ((void *)(((struct mlx5i_priv *)netdev_priv(netdev))->mlx5e_priv))
++=======
+ enum uverbs_attr_type {
+ 	UVERBS_ATTR_TYPE_NA,
+ 	UVERBS_ATTR_TYPE_IDR,
+ 	UVERBS_ATTR_TYPE_FD,
+ };
+ 
+ enum uverbs_obj_access {
+ 	UVERBS_ACCESS_READ,
+ 	UVERBS_ACCESS_WRITE,
+ 	UVERBS_ACCESS_NEW,
+ 	UVERBS_ACCESS_DESTROY
+ };
+ 
+ struct uverbs_attr_spec {
+ 	enum uverbs_attr_type		type;
+ 	struct {
+ 		/*
+ 		 * higher bits mean the namespace and lower bits mean
+ 		 * the type id within the namespace.
+ 		 */
+ 		u16			obj_type;
+ 		u8			access;
+ 	} obj;
+ };
+ 
+ struct uverbs_attr_spec_hash {
+ 	size_t				num_attrs;
+ 	struct uverbs_attr_spec		attrs[0];
+ };
+ 
+ struct uverbs_obj_attr {
+ 	struct ib_uobject		*uobject;
+ };
+ 
+ struct uverbs_attr {
+ 	struct uverbs_obj_attr	obj_attr;
+ };
+ 
+ struct uverbs_attr_bundle_hash {
+ 	/* if bit i is set, it means attrs[i] contains valid information */
+ 	unsigned long *valid_bitmap;
+ 	size_t num_attrs;
+ 	/*
+ 	 * arrays of attributes, each element corresponds to the specification
+ 	 * of the attribute in the same index.
+ 	 */
+ 	struct uverbs_attr *attrs;
+ };
+ 
+ struct uverbs_attr_bundle {
+ 	size_t				num_buckets;
+ 	struct uverbs_attr_bundle_hash  hash[];
+ };
+ 
+ static inline bool uverbs_attr_is_valid_in_hash(const struct uverbs_attr_bundle_hash *attrs_hash,
+ 						unsigned int idx)
+ {
+ 	return test_bit(idx, attrs_hash->valid_bitmap);
+ }
+ 
+ #endif
++>>>>>>> f43dbebfa320 (IB/core: Add support to finalize objects in one transaction):include/rdma/uverbs_ioctl.h
 +
 +netdev_tx_t mlx5i_sq_xmit(struct mlx5e_txqsq *sq, struct sk_buff *skb,
 +			  struct mlx5_av *av, u32 dqpn, u32 dqkey);
  
 +#endif /* __MLX5E_IPOB_H__ */
* Unmerged path drivers/infiniband/core/rdma_core.c
* Unmerged path drivers/infiniband/core/rdma_core.h
* Unmerged path drivers/infiniband/core/rdma_core.c
* Unmerged path drivers/infiniband/core/rdma_core.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib.h
