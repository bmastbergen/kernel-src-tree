tools/power turbostat: print sysfs C-state stats

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [tools] power turbostat: print sysfs C-state stats (Prarit Bhargava) [1514290]
Rebuild_FUZZ: 93.33%
commit-author Len Brown <len.brown@intel.com>
commit 41618e63f2a869902f8534f0db337e85d6bd04c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/41618e63.failed

When turbostat shows % of time in a CPU idle power state,
it has always been showing information from underlying
hardware residency counters.

While this reflects what the hardware is doing, and is thus
useful for understanding the hardware,
it doesn't directly tell us what Linux requested --
which is useful for tuning Linux itself.

Here we add columns to turbostat to show the
Linux cpuidle sub-system statistics:
/sys/devices/system/cpu/cpu*/cpuidle/state*/*

The first group of columns are the "usage", which is the
number of times software requested that C-state in the
measurement interval. eg C1 below.

The second group of columns are the "time", which is the percentage
of the measurement interval time that software has requested
the specified C-state. eg C1% below.

These software counters can be compared to the underlying
hardware residency counters (eg CPU%c1	CPU%c3	CPU%c6	CPU%c7)
to compare what sofware requested to what the hardware delivered.

These sysfs attributes are discovered when turbostat starts,
rather than being "built in".  So the --show and --hide
parameters do not know about these dynamic column names.
However "--show sysfs" and "--hide sysfs" act on the
entire group of columns:

turbostat --show sysfs
...
cpu4: POLL: CPUIDLE CORE POLL IDLE
cpu4: C1: MWAIT 0x00
cpu4: C1E: MWAIT 0x01
cpu4: C3: MWAIT 0x10
cpu4: C6: MWAIT 0x20
cpu4: C7s: MWAIT 0x32
...
C1 	C1E	C3 	C6 	C7s	C1% 	C1E%	C3%	C6% 	C7s%
3	6	5	1	188	0.00	0.02	0.00	0.00	99.93
0	6	5	0	58	0.00	0.16	0.02	0.00	99.70
0	0	0	0	9	0.00	0.00	0.00	0.00	99.96
0	0	0	1	24	0.00	0.00	0.00	0.02	99.93
0	0	0	0	9	0.00	0.00	0.00	0.00	99.97
0	0	0	0	32	0.00	0.00	0.00	0.00	99.96
0	0	0	0	7	0.00	0.00	0.00	0.00	99.98
2	0	0	0	36	0.00	0.00	0.00	0.00	99.97
1	0	0	0	13	0.00	0.00	0.00	0.00	99.98

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 41618e63f2a869902f8534f0db337e85d6bd04c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index e3fa4dd37e21,eb6cc8ccef06..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -374,6 -379,8 +375,11 @@@ struct msr_counter bic[] = 
  	{ 0x0, "RAM_J" },
  	{ 0x0, "Core" },
  	{ 0x0, "CPU" },
++<<<<<<< HEAD
++=======
+ 	{ 0x0, "Mod%c6" },
+ 	{ 0x0, "sysfs" },
++>>>>>>> 41618e63f2a8 (tools/power turbostat: print sysfs C-state stats)
  };
  
  #define MAX_BIC (sizeof(bic) / sizeof(struct msr_counter))
@@@ -414,9 -421,11 +420,14 @@@
  #define	BIC_RAM_J	(1ULL << 34)
  #define	BIC_Core	(1ULL << 35)
  #define	BIC_CPU		(1ULL << 36)
++<<<<<<< HEAD
++=======
+ #define	BIC_Mod_c6	(1ULL << 37)
+ #define	BIC_sysfs	(1ULL << 38)
++>>>>>>> 41618e63f2a8 (tools/power turbostat: print sysfs C-state stats)
  
  unsigned long long bic_enabled = 0xFFFFFFFFFFFFFFFFULL;
- unsigned long long bic_present;
+ unsigned long long bic_present = BIC_sysfs;
  
  #define DO_BIC(COUNTER_NAME) (bic_enabled & bic_present & COUNTER_NAME)
  #define BIC_PRESENT(COUNTER_BIT) (bic_present |= COUNTER_BIT)
@@@ -584,9 -594,10 +594,9 @@@ void print_header(void
  			else
  				outp += sprintf(outp, "\t%10.10s", mp->name);
  		} else {
- 			outp += sprintf(outp, "\t%-7.7s", mp->name);
+ 			outp += sprintf(outp, "\t%s", mp->name);
  		}
  	}
 -
  	outp += sprintf(outp, "\n");
  }
  
@@@ -741,10 -755,6 +751,13 @@@ int format_counters(struct thread_data 
  	if (DO_BIC(BIC_SMI))
  		outp += sprintf(outp, "\t%d", t->smi_count);
  
++<<<<<<< HEAD
 +	/* C1 */
 +	if (DO_BIC(BIC_CPU_c1))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * t->c1/t->tsc);
 +
++=======
++>>>>>>> 41618e63f2a8 (tools/power turbostat: print sysfs C-state stats)
  	/* Added counters */
  	for (i = 0, mp = sys.tp; mp; i++, mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
@@@ -755,7 -765,10 +768,14 @@@
  		} else if (mp->format == FORMAT_DELTA) {
  			outp += sprintf(outp, "\t%lld", t->counter[i]);
  		} else if (mp->format == FORMAT_PERCENT) {
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%.2f", 100.0 * t->counter[i]/t->tsc);
++=======
+ 			if (mp->type == COUNTER_USEC)
+ 				outp += sprintf(outp, "\t%.2f", t->counter[i]/interval_float/10000);
+ 			else
+ 				outp += sprintf(outp, "\t%.2f", 100.0 * t->counter[i]/tsc);
++>>>>>>> 41618e63f2a8 (tools/power turbostat: print sysfs C-state stats)
  		}
  	}
  
@@@ -2745,19 -2838,49 +2781,61 @@@ dump_cstate_pstate_config_info(unsigne
  
  	dump_nhm_cst_cfg();
  }
 +int is_dnv(unsigned int family, unsigned int model)
 +{
 +
 +	if (!genuine_intel)
 +		return 0;
 +
 +	switch (model) {
 +	case INTEL_FAM6_ATOM_DENVERTON:
 +		return 1;
 +	}
 +	return 0;
 +}
  
+ static void
+ dump_sysfs_cstate_config(void)
+ {
+ 	char path[64];
+ 	char name_buf[16];
+ 	char desc[64];
+ 	FILE *input;
+ 	int state;
+ 	char *sp;
+ 
+ 	if (!DO_BIC(BIC_sysfs))
+ 		return;
+ 
+ 	for (state = 0; state < 10; ++state) {
+ 
+ 		sprintf(path, "/sys/devices/system/cpu/cpu%d/cpuidle/state%d/name",
+ 			base_cpu, state);
+ 		input = fopen(path, "r");
+ 		if (input == NULL)
+ 			continue;
+ 		fgets(name_buf, sizeof(name_buf), input);
+ 
+ 		 /* truncate "C1-HSW\n" to "C1", or truncate "C1\n" to "C1" */
+ 		sp = strchr(name_buf, '-');
+ 		if (!sp)
+ 			sp = strchrnul(name_buf, '\n');
+ 		*sp = '\0';
+ 
+ 		fclose(input);
+ 
+ 		sprintf(path, "/sys/devices/system/cpu/cpu%d/cpuidle/state%d/desc",
+ 			base_cpu, state);
+ 		input = fopen(path, "r");
+ 		if (input == NULL)
+ 			continue;
+ 		fgets(desc, sizeof(desc), input);
+ 
+ 		fprintf(outf, "cpu%d: %s: %s", base_cpu, name_buf, desc);
+ 		fclose(input);
+ 	}
+ }
+ 
  
  /*
   * print_epb()
@@@ -3888,9 -4061,15 +3966,12 @@@ void process_cpuid(
  	rapl_probe(family, model);
  	perf_limit_reasons_probe(family, model);
  
 -	if (!quiet)
 +	if (debug)
  		dump_cstate_pstate_config_info(family, model);
  
+ 	if (!quiet)
+ 		dump_sysfs_cstate_config();
+ 
  	if (has_skl_msrs(family, model))
  		calculate_tsc_tweak();
  
@@@ -4557,9 -4806,11 +4703,11 @@@ int main(int argc, char **argv
  
  	cmdline(argc, argv);
  
 -	if (!quiet)
 +	if (debug)
  		print_version();
  
+ 	probe_sysfs();
+ 
  	turbostat_init();
  
  	/* dump counters and exit */
diff --git a/tools/power/x86/turbostat/turbostat.8 b/tools/power/x86/turbostat/turbostat.8
index 0863a08025ac..91e7d4dc85f9 100644
--- a/tools/power/x86/turbostat/turbostat.8
+++ b/tools/power/x86/turbostat/turbostat.8
@@ -47,9 +47,9 @@ name as necessary to disambiguate it from others is necessary.  Note that option
 		default: delta
 .fi
 .PP
-\fB--hide column\fP do not show the specified columns.  May be invoked multiple times, or with a comma-separated list of column names.
+\fB--hide column\fP do not show the specified columns.  May be invoked multiple times, or with a comma-separated list of column names.  Use "--hide sysfs" to hide the sysfs statistics columns as a group.
 .PP
-\fB--show column\fP show only the specified columns.  May be invoked multiple times, or with a comma-separated list of column names.
+\fB--show column\fP show only the specified columns.  May be invoked multiple times, or with a comma-separated list of column names.  Use "--show sysfs" to show the sysfs statistics columns as a group.
 .PP
 \fB--Dump\fP displays the raw counter values.
 .PP
* Unmerged path tools/power/x86/turbostat/turbostat.c
