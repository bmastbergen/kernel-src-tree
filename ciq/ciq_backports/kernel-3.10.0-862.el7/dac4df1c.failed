iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Luca Coelho <luciano.coelho@intel.com>
commit dac4df1c5f2c34903f61b1bc4fc722e31b4199e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/dac4df1c.failed

Newer firmware versions (such as iwlwifi-8000C-34.ucode) have
introduced an API change in the SCAN_REQ_UMAC command that is not
backwards compatible.  The driver needs to detect and use the new API
format when the firmware reports it, otherwise the scan command will
not work properly, causing a command timeout.

Fix this by adding a TLV that tells the driver that the new API is in
use and use the correct structures for it.

This fixes https://bugzilla.kernel.org/show_bug.cgi?id=197591

Fixes: d7a5b3e9e42e ("iwlwifi: mvm: bump API to 34 for 8000 and up")
	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
(cherry picked from commit dac4df1c5f2c34903f61b1bc4fc722e31b4199e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/iwl-fw-file.h
#	drivers/net/wireless/intel/iwlwifi/mvm/fw-api-scan.h
#	drivers/net/wireless/intel/iwlwifi/mvm/mvm.h
#	drivers/net/wireless/intel/iwlwifi/mvm/scan.c
diff --cc drivers/net/wireless/intel/iwlwifi/iwl-fw-file.h
index d01701ee4777,37a5c5b4eda6..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/iwl-fw-file.h
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-fw-file.h
@@@ -250,6 -260,15 +250,18 @@@ enum iwl_ucode_tlv_api 
  	IWL_UCODE_TLV_API_LQ_SS_PARAMS		= (__force iwl_ucode_tlv_api_t)18,
  	IWL_UCODE_TLV_API_NEW_VERSION		= (__force iwl_ucode_tlv_api_t)20,
  	IWL_UCODE_TLV_API_SCAN_TSF_REPORT	= (__force iwl_ucode_tlv_api_t)28,
++<<<<<<< HEAD:drivers/net/wireless/intel/iwlwifi/iwl-fw-file.h
++=======
+ 	IWL_UCODE_TLV_API_TKIP_MIC_KEYS		= (__force iwl_ucode_tlv_api_t)29,
+ 	IWL_UCODE_TLV_API_STA_TYPE		= (__force iwl_ucode_tlv_api_t)30,
+ 	IWL_UCODE_TLV_API_NAN2_VER2		= (__force iwl_ucode_tlv_api_t)31,
+ 	/* API Set 1 */
+ 	IWL_UCODE_TLV_API_ADAPTIVE_DWELL	= (__force iwl_ucode_tlv_api_t)32,
+ 	IWL_UCODE_TLV_API_NEW_BEACON_TEMPLATE	= (__force iwl_ucode_tlv_api_t)34,
+ 	IWL_UCODE_TLV_API_NEW_RX_STATS		= (__force iwl_ucode_tlv_api_t)35,
+ 	IWL_UCODE_TLV_API_COEX_ATS_EXTERNAL	= (__force iwl_ucode_tlv_api_t)37,
+ 	IWL_UCODE_TLV_API_QUOTA_LOW_LATENCY	= (__force iwl_ucode_tlv_api_t)38,
++>>>>>>> dac4df1c5f2c (iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command):drivers/net/wireless/intel/iwlwifi/fw/file.h
  
  	NUM_IWL_UCODE_TLV_API
  #ifdef __CHECKER__
diff --cc drivers/net/wireless/intel/iwlwifi/mvm/fw-api-scan.h
index c78a0c499459,3bfc657f6b42..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/mvm/fw-api-scan.h
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/fw-api-scan.h
@@@ -531,8 -531,10 +531,10 @@@ struct iwl_scan_config 
  } __packed; /* SCAN_CONFIG_DB_CMD_API_S */
  
  #define SCAN_TWO_LMACS 2
+ #define SCAN_LB_LMAC_IDX 0
+ #define SCAN_HB_LMAC_IDX 1
  
 -struct iwl_scan_config {
 +struct iwl_scan_config_cdb {
  	__le32 flags;
  	__le32 tx_chains;
  	__le32 rx_chains;
@@@ -664,28 -673,52 +673,62 @@@ struct iwl_scan_req_umac 
  			__le32 max_out_time;
  			__le32 suspend_time;
  			__le32 scan_priority;
- 			/* SCAN_CHANNEL_PARAMS_API_S_VER_4 */
+ 			/* SCAN_CHANNEL_PARAMS_API_S_VER_1 */
  			u8 channel_flags;
  			u8 n_channels;
- 			__le16 reserved;
+ 			__le16 reserved2;
  			u8 data[];
 -		} v1; /* SCAN_REQUEST_CMD_UMAC_API_S_VER_1 */
 +		} no_cdb; /* SCAN_REQUEST_CMD_UMAC_API_S_VER_1 */
  		struct {
+ 			u8 extended_dwell;
+ 			u8 active_dwell;
+ 			u8 passive_dwell;
+ 			u8 fragmented_dwell;
  			__le32 max_out_time[SCAN_TWO_LMACS];
  			__le32 suspend_time[SCAN_TWO_LMACS];
  			__le32 scan_priority;
- 			/* SCAN_CHANNEL_PARAMS_API_S_VER_4 */
+ 			/* SCAN_CHANNEL_PARAMS_API_S_VER_1 */
  			u8 channel_flags;
  			u8 n_channels;
- 			__le16 reserved;
+ 			__le16 reserved2;
  			u8 data[];
++<<<<<<< HEAD:drivers/net/wireless/intel/iwlwifi/mvm/fw-api-scan.h
 +		} cdb; /* SCAN_REQUEST_CMD_UMAC_API_S_VER_5 */
 +	};
 +} __packed;
 +
 +#define IWL_SCAN_REQ_UMAC_SIZE_CDB sizeof(struct iwl_scan_req_umac)
 +#define IWL_SCAN_REQ_UMAC_SIZE (sizeof(struct iwl_scan_req_umac) - \
 +				2 * sizeof(__le32))
++=======
+ 		} v6; /* SCAN_REQUEST_CMD_UMAC_API_S_VER_6 */
+ 		struct {
+ 			u8 active_dwell;
+ 			u8 passive_dwell;
+ 			u8 fragmented_dwell;
+ 			u8 adwell_default_n_aps;
+ 			u8 adwell_default_n_aps_social;
+ 			u8 reserved3;
+ 			__le16 adwell_max_budget;
+ 			__le32 max_out_time[SCAN_TWO_LMACS];
+ 			__le32 suspend_time[SCAN_TWO_LMACS];
+ 			__le32 scan_priority;
+ 			/* SCAN_CHANNEL_PARAMS_API_S_VER_1 */
+ 			u8 channel_flags;
+ 			u8 n_channels;
+ 			__le16 reserved2;
+ 			u8 data[];
+ 		} v7; /* SCAN_REQUEST_CMD_UMAC_API_S_VER_7 */
+ 	};
+ } __packed;
+ 
+ #define IWL_SCAN_REQ_UMAC_SIZE_V7 sizeof(struct iwl_scan_req_umac)
+ #define IWL_SCAN_REQ_UMAC_SIZE_V6 (sizeof(struct iwl_scan_req_umac) - \
+ 				   2 * sizeof(u8) - sizeof(__le16))
+ #define IWL_SCAN_REQ_UMAC_SIZE_V1 (sizeof(struct iwl_scan_req_umac) - \
+ 				   2 * sizeof(__le32) - 2 * sizeof(u8) - \
+ 				   sizeof(__le16))
++>>>>>>> dac4df1c5f2c (iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command):drivers/net/wireless/intel/iwlwifi/fw/api/scan.h
  
  /**
   * struct iwl_umac_scan_abort
diff --cc drivers/net/wireless/intel/iwlwifi/mvm/mvm.h
index 73a216524af2,4575595ab022..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/mvm/mvm.h
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/mvm.h
@@@ -1111,10 -1142,10 +1111,17 @@@ static inline bool iwl_mvm_is_d0i3_supp
  			    IWL_UCODE_TLV_CAPA_D0I3_SUPPORT);
  }
  
++<<<<<<< HEAD
 +static inline bool iwl_mvm_is_dqa_supported(struct iwl_mvm *mvm)
 +{
 +	return fw_has_capa(&mvm->fw->ucode_capa,
 +			   IWL_UCODE_TLV_CAPA_DQA_SUPPORT);
++=======
+ static inline bool iwl_mvm_is_adaptive_dwell_supported(struct iwl_mvm *mvm)
+ {
+ 	return fw_has_api(&mvm->fw->ucode_capa,
+ 			  IWL_UCODE_TLV_API_ADAPTIVE_DWELL);
++>>>>>>> dac4df1c5f2c (iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command)
  }
  
  static inline bool iwl_mvm_enter_d0i3_on_suspend(struct iwl_mvm *mvm)
diff --cc drivers/net/wireless/intel/iwlwifi/mvm/scan.c
index 0a64efa844b7,e4fd476e9ccb..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/mvm/scan.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/scan.c
@@@ -1108,34 -1088,65 +1121,85 @@@ static void iwl_mvm_scan_umac_dwell(str
  {
  	struct iwl_mvm_scan_timing_params *timing = &scan_timing[params->type];
  
++<<<<<<< HEAD
 +	if (params->measurement_dwell) {
 +		cmd->active_dwell = params->measurement_dwell;
 +		cmd->passive_dwell = params->measurement_dwell;
 +		cmd->extended_dwell = params->measurement_dwell;
 +	} else {
 +		cmd->active_dwell = timing->dwell_active;
 +		cmd->passive_dwell = timing->dwell_passive;
 +		cmd->extended_dwell = timing->dwell_extended;
 +	}
 +	cmd->fragmented_dwell = timing->dwell_fragmented;
 +
 +	if (iwl_mvm_is_cdb_supported(mvm)) {
 +		cmd->cdb.max_out_time[0] = cpu_to_le32(timing->max_out_time);
 +		cmd->cdb.suspend_time[0] = cpu_to_le32(timing->suspend_time);
 +		cmd->cdb.max_out_time[1] = cpu_to_le32(timing->max_out_time);
 +		cmd->cdb.suspend_time[1] = cpu_to_le32(timing->suspend_time);
 +		cmd->cdb.scan_priority = cpu_to_le32(IWL_SCAN_PRIORITY_EXT_6);
++=======
+ 	if (iwl_mvm_is_regular_scan(params))
+ 		cmd->ooc_priority = cpu_to_le32(IWL_SCAN_PRIORITY_EXT_6);
+ 	else
+ 		cmd->ooc_priority = cpu_to_le32(IWL_SCAN_PRIORITY_EXT_2);
+ 
+ 	if (iwl_mvm_is_adaptive_dwell_supported(mvm)) {
+ 		if (params->measurement_dwell) {
+ 			cmd->v7.active_dwell = params->measurement_dwell;
+ 			cmd->v7.passive_dwell = params->measurement_dwell;
+ 		} else {
+ 			cmd->v7.active_dwell = IWL_SCAN_DWELL_ACTIVE;
+ 			cmd->v7.passive_dwell = IWL_SCAN_DWELL_PASSIVE;
+ 		}
+ 		cmd->v7.fragmented_dwell = IWL_SCAN_DWELL_FRAGMENTED;
+ 
+ 		cmd->v7.scan_priority = cpu_to_le32(IWL_SCAN_PRIORITY_EXT_6);
+ 		cmd->v7.max_out_time[SCAN_LB_LMAC_IDX] =
+ 			cpu_to_le32(timing->max_out_time);
+ 		cmd->v7.suspend_time[SCAN_LB_LMAC_IDX] =
+ 			cpu_to_le32(timing->suspend_time);
+ 		if (iwl_mvm_is_cdb_supported(mvm)) {
+ 			cmd->v7.max_out_time[SCAN_HB_LMAC_IDX] =
+ 				cpu_to_le32(timing->max_out_time);
+ 			cmd->v7.suspend_time[SCAN_HB_LMAC_IDX] =
+ 				cpu_to_le32(timing->suspend_time);
+ 		}
+ 
+ 		return;
+ 	}
+ 
+ 	if (params->measurement_dwell) {
+ 		cmd->v1.active_dwell = params->measurement_dwell;
+ 		cmd->v1.passive_dwell = params->measurement_dwell;
+ 		cmd->v1.extended_dwell = params->measurement_dwell;
+ 	} else {
+ 		cmd->v1.active_dwell = IWL_SCAN_DWELL_ACTIVE;
+ 		cmd->v1.passive_dwell = IWL_SCAN_DWELL_PASSIVE;
+ 		cmd->v1.extended_dwell = IWL_SCAN_DWELL_EXTENDED;
+ 	}
+ 	cmd->v1.fragmented_dwell = IWL_SCAN_DWELL_FRAGMENTED;
+ 
+ 	if (iwl_mvm_has_new_tx_api(mvm)) {
+ 		cmd->v6.scan_priority = cpu_to_le32(IWL_SCAN_PRIORITY_EXT_6);
+ 		cmd->v6.max_out_time[SCAN_LB_LMAC_IDX] =
+ 			cpu_to_le32(timing->max_out_time);
+ 		cmd->v6.suspend_time[SCAN_LB_LMAC_IDX] =
+ 			cpu_to_le32(timing->suspend_time);
+ 		if (iwl_mvm_is_cdb_supported(mvm)) {
+ 			cmd->v6.max_out_time[SCAN_HB_LMAC_IDX] =
+ 				cpu_to_le32(timing->max_out_time);
+ 			cmd->v6.suspend_time[SCAN_HB_LMAC_IDX] =
+ 				cpu_to_le32(timing->suspend_time);
+ 		}
++>>>>>>> dac4df1c5f2c (iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command)
  	} else {
 -		cmd->v1.max_out_time = cpu_to_le32(timing->max_out_time);
 -		cmd->v1.suspend_time = cpu_to_le32(timing->suspend_time);
 -		cmd->v1.scan_priority =
 +		cmd->no_cdb.max_out_time = cpu_to_le32(timing->max_out_time);
 +		cmd->no_cdb.suspend_time = cpu_to_le32(timing->suspend_time);
 +		cmd->no_cdb.scan_priority =
  			cpu_to_le32(IWL_SCAN_PRIORITY_EXT_6);
  	}
- 
- 	if (iwl_mvm_is_regular_scan(params))
- 		cmd->ooc_priority = cpu_to_le32(IWL_SCAN_PRIORITY_EXT_6);
- 	else
- 		cmd->ooc_priority = cpu_to_le32(IWL_SCAN_PRIORITY_EXT_2);
  }
  
  static void
@@@ -1207,8 -1218,7 +1271,12 @@@ static int iwl_mvm_scan_umac(struct iwl
  			     int type)
  {
  	struct iwl_scan_req_umac *cmd = mvm->scan_cmd;
++<<<<<<< HEAD
 +	void *cmd_data = iwl_mvm_is_cdb_supported(mvm) ?
 +			 (void *)&cmd->cdb.data : (void *)&cmd->no_cdb.data;
++=======
+ 	void *cmd_data = iwl_mvm_get_scan_req_umac_data(mvm);
++>>>>>>> dac4df1c5f2c (iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command)
  	struct iwl_scan_req_umac_tail *sec_part = cmd_data +
  		sizeof(struct iwl_scan_channel_cfg_umac) *
  			mvm->fw->ucode_capa.n_scan_channels;
@@@ -1245,12 -1255,15 +1313,21 @@@
  				IWL_SCAN_CHANNEL_FLAG_EBS_ACCURATE |
  				IWL_SCAN_CHANNEL_FLAG_CACHE_ADD;
  
++<<<<<<< HEAD
 +	if (iwl_mvm_is_cdb_supported(mvm)) {
 +		cmd->cdb.channel_flags = channel_flags;
 +		cmd->cdb.n_channels = params->n_channels;
++=======
+ 	if (iwl_mvm_is_adaptive_dwell_supported(mvm)) {
+ 		cmd->v7.channel_flags = channel_flags;
+ 		cmd->v7.n_channels = params->n_channels;
+ 	} else if (iwl_mvm_has_new_tx_api(mvm)) {
+ 		cmd->v6.channel_flags = channel_flags;
+ 		cmd->v6.n_channels = params->n_channels;
++>>>>>>> dac4df1c5f2c (iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command)
  	} else {
 -		cmd->v1.channel_flags = channel_flags;
 -		cmd->v1.n_channels = params->n_channels;
 +		cmd->no_cdb.channel_flags = channel_flags;
 +		cmd->no_cdb.n_channels = params->n_channels;
  	}
  
  	iwl_scan_build_ssids(params, sec_part->direct_scan, &ssid_bitmap);
@@@ -1692,10 -1701,12 +1769,17 @@@ static int iwl_mvm_scan_stop_wait(struc
  
  int iwl_mvm_scan_size(struct iwl_mvm *mvm)
  {
 -	int base_size = IWL_SCAN_REQ_UMAC_SIZE_V1;
 +	int base_size = IWL_SCAN_REQ_UMAC_SIZE;
  
++<<<<<<< HEAD
 +	if (iwl_mvm_is_cdb_supported(mvm))
 +		base_size = IWL_SCAN_REQ_UMAC_SIZE_CDB;
++=======
+ 	if (iwl_mvm_is_adaptive_dwell_supported(mvm))
+ 		base_size = IWL_SCAN_REQ_UMAC_SIZE_V7;
+ 	else if (iwl_mvm_has_new_tx_api(mvm))
+ 		base_size = IWL_SCAN_REQ_UMAC_SIZE_V6;
++>>>>>>> dac4df1c5f2c (iwlwifi: mvm: support version 7 of the SCAN_REQ_UMAC FW command)
  
  	if (fw_has_capa(&mvm->fw->ucode_capa, IWL_UCODE_TLV_CAPA_UMAC_SCAN))
  		return base_size +
* Unmerged path drivers/net/wireless/intel/iwlwifi/iwl-fw-file.h
* Unmerged path drivers/net/wireless/intel/iwlwifi/mvm/fw-api-scan.h
* Unmerged path drivers/net/wireless/intel/iwlwifi/mvm/mvm.h
* Unmerged path drivers/net/wireless/intel/iwlwifi/mvm/scan.c
