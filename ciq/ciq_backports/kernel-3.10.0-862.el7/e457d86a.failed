net: sched: add couple of goto_chain helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] sched: add couple of goto_chain helpers (Ivan Vecera) [1445420]
Rebuild_FUZZ: 93.98%
commit-author Jiri Pirko <jiri@mellanox.com>
commit e457d86ada27cbd2f46ded75d4b4bc06e26d0e2e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e457d86a.failed

Add helpers to find out if a gact instance is goto_chain termination
action and to get chain index.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e457d86ada27cbd2f46ded75d4b4bc06e26d0e2e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tc_act/tc_gact.h
diff --cc include/net/tc_act/tc_gact.h
index 93c520b83d10,41afe1ce7b16..000000000000
--- a/include/net/tc_act/tc_gact.h
+++ b/include/net/tc_act/tc_gact.h
@@@ -13,10 -13,10 +13,15 @@@ struct tcf_gact 
  	atomic_t		packets;
  #endif
  };
 -#define to_gact(a) ((struct tcf_gact *)a)
 +#define to_gact(a) \
 +	container_of(a->priv, struct tcf_gact, common)
  
++<<<<<<< HEAD
 +static inline bool is_tcf_gact_shot(const struct tc_action *a)
++=======
+ static inline bool __is_tcf_gact_act(const struct tc_action *a, int act,
+ 				     bool is_ext)
++>>>>>>> e457d86ada27 (net: sched: add couple of goto_chain helpers)
  {
  #ifdef CONFIG_NET_CLS_ACT
  	struct tcf_gact *gact;
@@@ -24,11 -24,33 +29,41 @@@
  	if (a->ops && a->ops->type != TCA_ACT_GACT)
  		return false;
  
++<<<<<<< HEAD
 +	gact = a->priv;
 +	if (gact->tcf_action == TC_ACT_SHOT)
++=======
+ 	gact = to_gact(a);
+ 	if ((!is_ext && gact->tcf_action == act) ||
+ 	    (is_ext && TC_ACT_EXT_CMP(gact->tcf_action, act)))
++>>>>>>> e457d86ada27 (net: sched: add couple of goto_chain helpers)
  		return true;
  
  #endif
  	return false;
  }
++<<<<<<< HEAD
++=======
+ 
+ static inline bool is_tcf_gact_shot(const struct tc_action *a)
+ {
+ 	return __is_tcf_gact_act(a, TC_ACT_SHOT, false);
+ }
+ 
+ static inline bool is_tcf_gact_trap(const struct tc_action *a)
+ {
+ 	return __is_tcf_gact_act(a, TC_ACT_TRAP, false);
+ }
+ 
+ static inline bool is_tcf_gact_goto_chain(const struct tc_action *a)
+ {
+ 	return __is_tcf_gact_act(a, TC_ACT_GOTO_CHAIN, true);
+ }
+ 
+ static inline u32 tcf_gact_goto_chain_index(const struct tc_action *a)
+ {
+ 	return a->goto_chain->index;
+ }
+ 
++>>>>>>> e457d86ada27 (net: sched: add couple of goto_chain helpers)
  #endif /* __NET_TC_GACT_H */
* Unmerged path include/net/tc_act/tc_gact.h
