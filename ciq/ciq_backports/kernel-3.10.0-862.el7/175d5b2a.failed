tpm: move TPM 1.2 code of tpm_pcr_extend() to tpm1_pcr_extend()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Roberto Sassu <roberto.sassu@huawei.com>
commit 175d5b2a570cc0f79a23dbaf86e35e660f6f544f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/175d5b2a.failed

In preparation of the modifications to tpm_pcr_extend(), which will
allow callers to supply a digest for each PCR bank of a TPM 2.0,
the TPM 1.2 specific code has been moved to tpm1_pcr_extend().

tpm1_pcr_extend() uses tpm_buf_init() to prepare the command buffer,
which offers protection against buffer overflow. It is called by
tpm_pcr_extend() and tpm_pm_suspend().

	Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
(cherry picked from commit 175d5b2a570cc0f79a23dbaf86e35e660f6f544f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/tpm/tpm-interface.c
diff --cc drivers/char/tpm/tpm-interface.c
index 0d319f9dabc5,4ed08ab4d2a8..000000000000
--- a/drivers/char/tpm/tpm-interface.c
+++ b/drivers/char/tpm/tpm-interface.c
@@@ -806,9 -878,11 +825,8 @@@ static int tpm1_pcr_extend(struct tpm_c
   */
  int tpm_pcr_extend(u32 chip_num, int pcr_idx, const u8 *hash)
  {
- 	struct tpm_cmd_t cmd;
  	int rc;
  	struct tpm_chip *chip;
 -	struct tpm2_digest digest_list[ARRAY_SIZE(chip->active_banks)];
 -	u32 count = 0;
 -	int i;
  
  	chip = tpm_chip_find_get(chip_num);
  	if (chip == NULL)
@@@ -820,13 -903,8 +838,18 @@@
  		return rc;
  	}
  
++<<<<<<< HEAD
 +	cmd.header.in = pcrextend_header;
 +	cmd.params.pcrextend_in.pcr_idx = cpu_to_be32(pcr_idx);
 +	memcpy(cmd.params.pcrextend_in.hash, hash, TPM_DIGEST_SIZE);
 +	rc = tpm_transmit_cmd(chip, &cmd, EXTEND_PCR_RESULT_SIZE,
 +			      EXTEND_PCR_RESULT_BODY_SIZE, 0,
 +			      "attempting extend a PCR value");
 +
++=======
+ 	rc = tpm1_pcr_extend(chip, pcr_idx, hash,
+ 			     "attempting extend a PCR value");
++>>>>>>> 175d5b2a570c (tpm: move TPM 1.2 code of tpm_pcr_extend() to tpm1_pcr_extend())
  	tpm_put_ops(chip);
  	return rc;
  }
@@@ -1025,15 -1103,9 +1048,21 @@@ int tpm_pm_suspend(struct device *dev
  	}
  
  	/* for buggy tpm, flush pcrs with extend to selected dummy */
++<<<<<<< HEAD
 +	if (tpm_suspend_pcr) {
 +		cmd.header.in = pcrextend_header;
 +		cmd.params.pcrextend_in.pcr_idx = cpu_to_be32(tpm_suspend_pcr);
 +		memcpy(cmd.params.pcrextend_in.hash, dummy_hash,
 +		       TPM_DIGEST_SIZE);
 +		rc = tpm_transmit_cmd(chip, &cmd, EXTEND_PCR_RESULT_SIZE,
 +				     EXTEND_PCR_RESULT_BODY_SIZE, 0,
 +				      "extending dummy pcr before suspend");
 +	}
++=======
+ 	if (tpm_suspend_pcr)
+ 		rc = tpm1_pcr_extend(chip, tpm_suspend_pcr, dummy_hash,
+ 				     "extending dummy pcr before suspend");
++>>>>>>> 175d5b2a570c (tpm: move TPM 1.2 code of tpm_pcr_extend() to tpm1_pcr_extend())
  
  	/* now do the actual savestate */
  	for (try = 0; try < TPM_RETRY; try++) {
* Unmerged path drivers/char/tpm/tpm-interface.c
