mlxsw: spectrum_router: Move RIFs array to its rightful place

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit 5f9efffbdb1722631714d7afce793379abd94c1f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5f9efffb.failed

The router interfaces (RIFs) array is of no interest to code outside the
routing realm, so declare it inside the router specific struct instead
of the chip-wide one.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5f9efffbdb1722631714d7afce793379abd94c1f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
#	net/tipc/ref.h
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index f8e7036e3f4a,7b44389e5769..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -50,6 -52,33 +50,36 @@@
  #include "spectrum.h"
  #include "core.h"
  #include "reg.h"
++<<<<<<< HEAD
++=======
+ #include "spectrum_cnt.h"
+ #include "spectrum_dpipe.h"
+ #include "spectrum_router.h"
+ 
+ struct mlxsw_sp_vr;
+ struct mlxsw_sp_lpm_tree;
+ 
+ struct mlxsw_sp_router {
+ 	struct mlxsw_sp *mlxsw_sp;
+ 	struct mlxsw_sp_rif **rifs;
+ 	struct mlxsw_sp_vr *vrs;
+ 	struct rhashtable neigh_ht;
+ 	struct rhashtable nexthop_group_ht;
+ 	struct rhashtable nexthop_ht;
+ 	struct {
+ 		struct mlxsw_sp_lpm_tree *trees;
+ 		unsigned int tree_count;
+ 	} lpm;
+ 	struct {
+ 		struct delayed_work dw;
+ 		unsigned long interval;	/* ms */
+ 	} neighs_update;
+ 	struct delayed_work nexthop_probe_dw;
+ #define MLXSW_SP_UNRESOLVED_NH_PROBE_INTERVAL 5000 /* ms */
+ 	struct list_head nexthop_neighs_list;
+ 	bool aborted;
+ };
++>>>>>>> 5f9efffbdb17 (mlxsw: spectrum_router: Move RIFs array to its rightful place)
  
  struct mlxsw_sp_rif {
  	struct list_head nexthop_list;
@@@ -2688,10 -2905,10 +2719,10 @@@ static int mlxsw_sp_avail_rif_get(struc
  	int i;
  
  	for (i = 0; i < MLXSW_CORE_RES_GET(mlxsw_sp->core, MAX_RIFS); i++)
- 		if (!mlxsw_sp->rifs[i])
+ 		if (!mlxsw_sp->router->rifs[i])
  			return i;
  
 -	return MLXSW_SP_INVALID_INDEX_RIF;
 +	return MLXSW_SP_INVALID_RIF;
  }
  
  static void mlxsw_sp_vport_rif_sp_attr_get(struct mlxsw_sp_port *mlxsw_sp_vport,
@@@ -2747,25 -2964,41 +2778,45 @@@ mlxsw_sp_rfid_alloc(u16 fid, struct net
  }
  
  static struct mlxsw_sp_rif *
 -mlxsw_sp_rif_alloc(u16 rif_index, u16 vr_id, struct net_device *l3_dev,
 +mlxsw_sp_rif_alloc(u16 rif, u16 vr_id, struct net_device *l3_dev,
  		   struct mlxsw_sp_fid *f)
  {
 -	struct mlxsw_sp_rif *rif;
 +	struct mlxsw_sp_rif *r;
  
 -	rif = kzalloc(sizeof(*rif), GFP_KERNEL);
 -	if (!rif)
 +	r = kzalloc(sizeof(*r), GFP_KERNEL);
 +	if (!r)
  		return NULL;
  
 -	INIT_LIST_HEAD(&rif->nexthop_list);
 -	INIT_LIST_HEAD(&rif->neigh_list);
 -	ether_addr_copy(rif->addr, l3_dev->dev_addr);
 -	rif->mtu = l3_dev->mtu;
 -	rif->vr_id = vr_id;
 -	rif->dev = l3_dev;
 -	rif->rif_index = rif_index;
 -	rif->f = f;
 -
 +	INIT_LIST_HEAD(&r->nexthop_list);
 +	INIT_LIST_HEAD(&r->neigh_list);
 +	ether_addr_copy(r->addr, l3_dev->dev_addr);
 +	r->mtu = l3_dev->mtu;
 +	r->vr_id = vr_id;
 +	r->dev = l3_dev;
 +	r->rif = rif;
 +	r->f = f;
 +
++<<<<<<< HEAD
 +	return r;
++=======
+ 	return rif;
+ }
+ 
+ struct mlxsw_sp_rif *mlxsw_sp_rif_by_index(const struct mlxsw_sp *mlxsw_sp,
+ 					   u16 rif_index)
+ {
+ 	return mlxsw_sp->router->rifs[rif_index];
+ }
+ 
+ u16 mlxsw_sp_rif_index(const struct mlxsw_sp_rif *rif)
+ {
+ 	return rif->rif_index;
+ }
+ 
+ int mlxsw_sp_rif_dev_ifindex(const struct mlxsw_sp_rif *rif)
+ {
+ 	return rif->dev->ifindex;
++>>>>>>> 5f9efffbdb17 (mlxsw: spectrum_router: Move RIFs array to its rightful place)
  }
  
  static struct mlxsw_sp_rif *
@@@ -2809,11 -3043,20 +2860,25 @@@ mlxsw_sp_vport_rif_sp_create(struct mlx
  		goto err_rif_alloc;
  	}
  
++<<<<<<< HEAD
 +	f->r = r;
 +	mlxsw_sp->rifs[rif] = r;
++=======
+ 	if (devlink_dpipe_table_counter_enabled(priv_to_devlink(mlxsw_sp->core),
+ 						MLXSW_SP_DPIPE_TABLE_NAME_ERIF)) {
+ 		err = mlxsw_sp_rif_counter_alloc(mlxsw_sp, rif,
+ 						 MLXSW_SP_RIF_COUNTER_EGRESS);
+ 		if (err)
+ 			netdev_dbg(mlxsw_sp_vport->dev,
+ 				   "Counter alloc Failed err=%d\n", err);
+ 	}
+ 
+ 	f->rif = rif;
+ 	mlxsw_sp->router->rifs[rif_index] = rif;
++>>>>>>> 5f9efffbdb17 (mlxsw: spectrum_router: Move RIFs array to its rightful place)
  	vr->rif_count++;
  
 -	return rif;
 +	return r;
  
  err_rif_alloc:
  	kfree(f);
@@@ -2827,22 -3071,25 +2892,27 @@@ err_vport_rif_sp_op
  }
  
  static void mlxsw_sp_vport_rif_sp_destroy(struct mlxsw_sp_port *mlxsw_sp_vport,
 -					  struct mlxsw_sp_rif *rif)
 +					  struct mlxsw_sp_rif *r)
  {
  	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_vport->mlxsw_sp;
 -	struct mlxsw_sp_vr *vr = &mlxsw_sp->router->vrs[rif->vr_id];
 -	struct net_device *l3_dev = rif->dev;
 -	struct mlxsw_sp_fid *f = rif->f;
 -	u16 rif_index = rif->rif_index;
 +	struct mlxsw_sp_vr *vr = &mlxsw_sp->router.vrs[r->vr_id];
 +	struct net_device *l3_dev = r->dev;
 +	struct mlxsw_sp_fid *f = r->f;
  	u16 fid = f->fid;
 +	u16 rif = r->rif;
  
 -	mlxsw_sp_router_rif_gone_sync(mlxsw_sp, rif);
 -
 -	mlxsw_sp_rif_counter_free(mlxsw_sp, rif, MLXSW_SP_RIF_COUNTER_EGRESS);
 -	mlxsw_sp_rif_counter_free(mlxsw_sp, rif, MLXSW_SP_RIF_COUNTER_INGRESS);
 +	mlxsw_sp_router_rif_gone_sync(mlxsw_sp, r);
  
  	vr->rif_count--;
++<<<<<<< HEAD
 +	mlxsw_sp->rifs[rif] = NULL;
 +	f->r = NULL;
++=======
+ 	mlxsw_sp->router->rifs[rif_index] = NULL;
+ 	f->rif = NULL;
++>>>>>>> 5f9efffbdb17 (mlxsw: spectrum_router: Move RIFs array to its rightful place)
  
 -	kfree(rif);
 +	kfree(r);
  
  	kfree(f);
  
@@@ -3061,11 -3309,11 +3131,16 @@@ static int mlxsw_sp_rif_bridge_create(s
  		goto err_rif_alloc;
  	}
  
++<<<<<<< HEAD
 +	f->r = r;
 +	mlxsw_sp->rifs[rif] = r;
++=======
+ 	f->rif = rif;
+ 	mlxsw_sp->router->rifs[rif_index] = rif;
++>>>>>>> 5f9efffbdb17 (mlxsw: spectrum_router: Move RIFs array to its rightful place)
  	vr->rif_count++;
  
 -	netdev_dbg(l3_dev, "RIF=%d created\n", rif_index);
 +	netdev_dbg(l3_dev, "RIF=%d created\n", rif);
  
  	return 0;
  
@@@ -3081,20 -3330,20 +3156,25 @@@ err_port_flood_set
  }
  
  void mlxsw_sp_rif_bridge_destroy(struct mlxsw_sp *mlxsw_sp,
 -				 struct mlxsw_sp_rif *rif)
 +				 struct mlxsw_sp_rif *r)
  {
 -	struct mlxsw_sp_vr *vr = &mlxsw_sp->router->vrs[rif->vr_id];
 -	struct net_device *l3_dev = rif->dev;
 -	struct mlxsw_sp_fid *f = rif->f;
 -	u16 rif_index = rif->rif_index;
 +	struct mlxsw_sp_vr *vr = &mlxsw_sp->router.vrs[r->vr_id];
 +	struct net_device *l3_dev = r->dev;
 +	struct mlxsw_sp_fid *f = r->f;
 +	u16 rif = r->rif;
  
 -	mlxsw_sp_router_rif_gone_sync(mlxsw_sp, rif);
 +	mlxsw_sp_router_rif_gone_sync(mlxsw_sp, r);
  
  	vr->rif_count--;
++<<<<<<< HEAD
 +	mlxsw_sp->rifs[rif] = NULL;
 +	f->r = NULL;
++=======
+ 	mlxsw_sp->router->rifs[rif_index] = NULL;
+ 	f->rif = NULL;
++>>>>>>> 5f9efffbdb17 (mlxsw: spectrum_router: Move RIFs array to its rightful place)
  
 -	kfree(rif);
 +	kfree(r);
  
  	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, f->fid, false);
  
diff --cc net/tipc/ref.h
index 5bc8e7ab84de,a3e8d2b25148..000000000000
--- a/net/tipc/ref.h
+++ b/net/tipc/ref.h
@@@ -34,16 -32,29 +34,33 @@@
   * POSSIBILITY OF SUCH DAMAGE.
   */
  
 -#ifndef _MLXSW_ROUTER_H_
 -#define _MLXSW_ROUTER_H_
 +#ifndef _TIPC_REF_H
 +#define _TIPC_REF_H
  
 -#include "spectrum.h"
 +int tipc_ref_table_init(u32 requested_size, u32 start);
 +void tipc_ref_table_stop(void);
  
 -enum mlxsw_sp_rif_counter_dir {
 -	MLXSW_SP_RIF_COUNTER_INGRESS,
 -	MLXSW_SP_RIF_COUNTER_EGRESS,
 -};
 +u32 tipc_ref_acquire(void *object, spinlock_t **lock);
 +void tipc_ref_discard(u32 ref);
  
++<<<<<<< HEAD:net/tipc/ref.h
 +void *tipc_ref_lock(u32 ref);
 +void *tipc_ref_deref(u32 ref);
++=======
+ struct mlxsw_sp_rif *mlxsw_sp_rif_by_index(const struct mlxsw_sp *mlxsw_sp,
+ 					   u16 rif_index);
+ u16 mlxsw_sp_rif_index(const struct mlxsw_sp_rif *rif);
+ int mlxsw_sp_rif_dev_ifindex(const struct mlxsw_sp_rif *rif);
+ int mlxsw_sp_rif_counter_value_get(struct mlxsw_sp *mlxsw_sp,
+ 				   struct mlxsw_sp_rif *rif,
+ 				   enum mlxsw_sp_rif_counter_dir dir,
+ 				   u64 *cnt);
+ void mlxsw_sp_rif_counter_free(struct mlxsw_sp *mlxsw_sp,
+ 			       struct mlxsw_sp_rif *rif,
+ 			       enum mlxsw_sp_rif_counter_dir dir);
+ int mlxsw_sp_rif_counter_alloc(struct mlxsw_sp *mlxsw_sp,
+ 			       struct mlxsw_sp_rif *rif,
+ 			       enum mlxsw_sp_rif_counter_dir dir);
++>>>>>>> 5f9efffbdb17 (mlxsw: spectrum_router: Move RIFs array to its rightful place):drivers/net/ethernet/mellanox/mlxsw/spectrum_router.h
  
 -#endif /* _MLXSW_ROUTER_H_*/
 +#endif
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
index bb171d5ff7f7..fc5caa657852 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@ -206,7 +206,6 @@ struct mlxsw_sp {
 		DECLARE_BITMAP(mapped, MLXSW_SP_MID_MAX);
 	} br_mids;
 	struct list_head fids;	/* VLAN-aware bridge FIDs */
-	struct mlxsw_sp_rif **rifs;
 	struct mlxsw_sp_port **ports;
 	struct mlxsw_core *core;
 	const struct mlxsw_bus_info *bus_info;
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_dpipe.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum_dpipe.c
index ea56f6ade6b4..ce2534df03ca 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_dpipe.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_dpipe.c
@@ -241,10 +241,11 @@ start_again:
 		return err;
 	j = 0;
 	for (; i < rif_count; i++) {
-		if (!mlxsw_sp->rifs[i])
+		struct mlxsw_sp_rif *rif = mlxsw_sp_rif_by_index(mlxsw_sp, i);
+
+		if (!rif)
 			continue;
-		err = mlxsw_sp_erif_entry_get(mlxsw_sp, &entry,
-					      mlxsw_sp->rifs[i],
+		err = mlxsw_sp_erif_entry_get(mlxsw_sp, &entry, rif,
 					      counters_enabled);
 		if (err)
 			goto err_entry_get;
@@ -281,15 +282,15 @@ static int mlxsw_sp_table_erif_counters_update(void *priv, bool enable)
 
 	rtnl_lock();
 	for (i = 0; i < MLXSW_CORE_RES_GET(mlxsw_sp->core, MAX_RIFS); i++) {
-		if (!mlxsw_sp->rifs[i])
+		struct mlxsw_sp_rif *rif = mlxsw_sp_rif_by_index(mlxsw_sp, i);
+
+		if (!rif)
 			continue;
 		if (enable)
-			mlxsw_sp_rif_counter_alloc(mlxsw_sp,
-						   mlxsw_sp->rifs[i],
+			mlxsw_sp_rif_counter_alloc(mlxsw_sp, rif,
 						   MLXSW_SP_RIF_COUNTER_EGRESS);
 		else
-			mlxsw_sp_rif_counter_free(mlxsw_sp,
-						  mlxsw_sp->rifs[i],
+			mlxsw_sp_rif_counter_free(mlxsw_sp, rif,
 						  MLXSW_SP_RIF_COUNTER_EGRESS);
 	}
 	rtnl_unlock();
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
* Unmerged path net/tipc/ref.h
