net: sched: add helpers to handle extended actions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] sched: add helpers to handle extended actions (Ivan Vecera) [1445420]
Rebuild_FUZZ: 94.74%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 9da3242e6a83b6f315aa9c394c939da8e4ad7774
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9da3242e.failed

Jump is now the only one using value action opcode. This is going to
change soon. So introduce helpers to work with this. Convert TC_ACT_JUMP.

This also fixes the TC_ACT_JUMP check, which is incorrectly done as a
bit check, not a value check.

Fixes: e0ee84ded796 ("net sched actions: Complete the JUMPX opcode")
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9da3242e6a83b6f315aa9c394c939da8e4ad7774)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/pkt_cls.h
#	net/sched/act_api.c
diff --cc include/uapi/linux/pkt_cls.h
index 0e7cb6bf3619,d613be3b3239..000000000000
--- a/include/uapi/linux/pkt_cls.h
+++ b/include/uapi/linux/pkt_cls.h
@@@ -113,7 -36,21 +113,25 @@@ enum 
  #define TC_ACT_STOLEN		4
  #define TC_ACT_QUEUED		5
  #define TC_ACT_REPEAT		6
++<<<<<<< HEAD
 +#define TC_ACT_JUMP		0x10000000
++=======
+ #define TC_ACT_REDIRECT		7
+ 
+ /* There is a special kind of actions called "extended actions",
+  * which need a value parameter. These have a local opcode located in
+  * the highest nibble, starting from 1. The rest of the bits
+  * are used to carry the value. These two parts together make
+  * a combined opcode.
+  */
+ #define __TC_ACT_EXT_SHIFT 28
+ #define __TC_ACT_EXT(local) ((local) << __TC_ACT_EXT_SHIFT)
+ #define TC_ACT_EXT_VAL_MASK ((1 << __TC_ACT_EXT_SHIFT) - 1)
+ #define TC_ACT_EXT_CMP(combined, opcode) \
+ 	(((combined) & (~TC_ACT_EXT_VAL_MASK)) == opcode)
+ 
+ #define TC_ACT_JUMP __TC_ACT_EXT(1)
++>>>>>>> 9da3242e6a83 (net: sched: add helpers to handle extended actions)
  
  /* Action type identifiers*/
  enum {
diff --cc net/sched/act_api.c
index 19022d7219af,a90e8f355c00..000000000000
--- a/net/sched/act_api.c
+++ b/net/sched/act_api.c
@@@ -452,10 -452,25 +452,28 @@@ repeat
  		ret = a->ops->act(skb, a, res);
  		if (ret == TC_ACT_REPEAT)
  			goto repeat;	/* we need a ttl - JHS */
++<<<<<<< HEAD
++=======
+ 
+ 		if (TC_ACT_EXT_CMP(ret, TC_ACT_JUMP)) {
+ 			jmp_prgcnt = ret & TCA_ACT_MAX_PRIO_MASK;
+ 			if (!jmp_prgcnt || (jmp_prgcnt > nr_actions)) {
+ 				/* faulty opcode, stop pipeline */
+ 				return TC_ACT_OK;
+ 			} else {
+ 				jmp_ttl -= 1;
+ 				if (jmp_ttl > 0)
+ 					goto restart_act_graph;
+ 				else /* faulty graph, stop pipeline */
+ 					return TC_ACT_OK;
+ 			}
+ 		}
+ 
++>>>>>>> 9da3242e6a83 (net: sched: add helpers to handle extended actions)
  		if (ret != TC_ACT_PIPE)
 -			break;
 +			goto exec_done;
  	}
 -
 +exec_done:
  	return ret;
  }
  EXPORT_SYMBOL(tcf_action_exec);
* Unmerged path include/uapi/linux/pkt_cls.h
* Unmerged path net/sched/act_api.c
