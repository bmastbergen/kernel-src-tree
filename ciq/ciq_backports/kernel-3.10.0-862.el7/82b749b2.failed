ovl: check on mount time if upper fs supports setting xattr

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Amir Goldstein <amir73il@gmail.com>
commit 82b749b2c65e9d108c1c5598dc0a5f436b525f42
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/82b749b2.failed

xattr are needed by overlayfs for setting opaque dir, redirect dir
and copy up origin.

Check at mount time by trying to set the overlay.opaque xattr on the
workdir and if that fails issue a warning message.

	Signed-off-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 82b749b2c65e9d108c1c5598dc0a5f436b525f42)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/ovl_entry.h
#	fs/overlayfs/super.c
#	fs/overlayfs/util.c
diff --cc fs/overlayfs/super.c
index aaf06952d88f,f1647626a882..000000000000
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@@ -1399,13 -877,33 +1399,38 @@@ static int ovl_fill_super(struct super_
  				goto out_put_workdir;
  
  			/*
 -			 * We allowed this configuration and don't want to
 -			 * break users over kernel upgrade. So warn instead
 -			 * of erroring out.
 +			 * Warn instead of error to avoid breaking previously
 +			 * working configurations over upgrade. If d_type
 +			 * is not supported, whiteouts will become visible
 +			 * to user space.
  			 */
  			if (!err)
++<<<<<<< HEAD
 +				pr_warn("overlayfs: upper fs needs to support d_type. This is an invalid configuration.\n");
++=======
+ 				pr_warn("overlayfs: upper fs needs to support d_type.\n");
+ 
+ 			/* Check if upper/work fs supports O_TMPFILE */
+ 			temp = ovl_do_tmpfile(ufs->workdir, S_IFREG | 0);
+ 			ufs->tmpfile = !IS_ERR(temp);
+ 			if (ufs->tmpfile)
+ 				dput(temp);
+ 			else
+ 				pr_warn("overlayfs: upper fs does not support tmpfile.\n");
+ 
+ 			/*
+ 			 * Check if upper/work fs supports trusted.overlay.*
+ 			 * xattr
+ 			 */
+ 			err = ovl_do_setxattr(ufs->workdir, OVL_XATTR_OPAQUE,
+ 					      "0", 1, 0);
+ 			if (err) {
+ 				ufs->noxattr = true;
+ 				pr_warn("overlayfs: upper fs does not support xattr.\n");
+ 			} else {
+ 				vfs_removexattr(ufs->workdir, OVL_XATTR_OPAQUE);
+ 			}
++>>>>>>> 82b749b2c65e (ovl: check on mount time if upper fs supports setting xattr)
  		}
  	}
  
* Unmerged path fs/overlayfs/ovl_entry.h
* Unmerged path fs/overlayfs/util.c
diff --git a/fs/overlayfs/overlayfs.h b/fs/overlayfs/overlayfs.h
index 952ccab31629..08400b10fda8 100644
--- a/fs/overlayfs/overlayfs.h
+++ b/fs/overlayfs/overlayfs.h
@@ -220,3 +220,6 @@ int ovl_copy_up(struct dentry *dentry);
 int ovl_copy_up_flags(struct dentry *dentry, int flags);
 int ovl_copy_xattr(struct dentry *old, struct dentry *new);
 int ovl_set_attr(struct dentry *upper, struct kstat *stat);
+int ovl_check_setxattr(struct dentry *dentry, struct dentry *upperdentry,
+		       const char *name, const void *value, size_t size,
+		       int xerr);
* Unmerged path fs/overlayfs/ovl_entry.h
* Unmerged path fs/overlayfs/super.c
* Unmerged path fs/overlayfs/util.c
