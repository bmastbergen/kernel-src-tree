efi: Move noefi early param code out of x86 arch code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Dave Young <dyoung@redhat.com>
commit b2e0a54a1296a91b800f316df7bef7d1905e4fd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b2e0a54a.failed

noefi param can be used for arches other than X86 later, thus move it
out of x86 platform code.

	Signed-off-by: Dave Young <dyoung@redhat.com>
	Signed-off-by: Matt Fleming <matt.fleming@intel.com>
(cherry picked from commit b2e0a54a1296a91b800f316df7bef7d1905e4fd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/platform/efi/efi.c
#	drivers/firmware/efi/efi.c
#	include/linux/efi.h
diff --cc arch/x86/platform/efi/efi.c
index a61d52eabb4e,c90d3cd2728c..000000000000
--- a/arch/x86/platform/efi/efi.c
+++ b/arch/x86/platform/efi/efi.c
@@@ -79,23 -70,6 +79,26 @@@ static efi_config_table_type_t arch_tab
  
  u64 efi_setup;		/* efi setup_data physical address */
  
++<<<<<<< HEAD
 +/*
 + * Returns 1 if 'facility' is enabled, 0 otherwise.
 + */
 +int efi_enabled(int facility)
 +{
 +	return test_bit(facility, &x86_efi_facility) != 0;
 +}
 +EXPORT_SYMBOL(efi_enabled);
 +
 +static bool disable_runtime __initdata = false;
 +static int __init setup_noefi(char *arg)
 +{
 +	disable_runtime = true;
 +	return 0;
 +}
 +early_param("noefi", setup_noefi);
 +
++=======
++>>>>>>> b2e0a54a1296 (efi: Move noefi early param code out of x86 arch code)
  int add_efi_memmap;
  EXPORT_SYMBOL(add_efi_memmap);
  
@@@ -795,11 -484,9 +798,11 @@@ void __init efi_init(void
  	if (!efi_runtime_supported())
  		pr_info("No EFI runtime due to 32/64-bit mismatch with kernel\n");
  	else {
- 		if (disable_runtime || efi_runtime_init())
+ 		if (efi_runtime_disabled() || efi_runtime_init())
  			return;
 +		set_bit(EFI_RUNTIME_SERVICES, &x86_efi_facility);
  	}
 +
  	if (efi_memmap_init())
  		return;
  
diff --cc drivers/firmware/efi/efi.c
index 298ffe5c759a,c8f01a73edb5..000000000000
--- a/drivers/firmware/efi/efi.c
+++ b/drivers/firmware/efi/efi.c
@@@ -40,7 -41,20 +40,24 @@@ struct efi __read_mostly efi = 
  };
  EXPORT_SYMBOL(efi);
  
++<<<<<<< HEAD
 +struct kobject *efi_kobj;
++=======
+ static bool disable_runtime;
+ static int __init setup_noefi(char *arg)
+ {
+ 	disable_runtime = true;
+ 	return 0;
+ }
+ early_param("noefi", setup_noefi);
+ 
+ bool efi_runtime_disabled(void)
+ {
+ 	return disable_runtime;
+ }
+ 
+ static struct kobject *efi_kobj;
++>>>>>>> b2e0a54a1296 (efi: Move noefi early param code out of x86 arch code)
  static struct kobject *efivars_kobj;
  
  /*
diff --cc include/linux/efi.h
index 0dc4ddccc847,4812ed0b0374..000000000000
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@@ -1213,4 -1185,49 +1213,52 @@@ static inline int efi_runtime_map_copy(
  
  #endif
  
++<<<<<<< HEAD
++=======
+ /* prototypes shared between arch specific and generic stub code */
+ 
+ #define pr_efi(sys_table, msg)     efi_printk(sys_table, "EFI stub: "msg)
+ #define pr_efi_err(sys_table, msg) efi_printk(sys_table, "EFI stub: ERROR: "msg)
+ 
+ void efi_printk(efi_system_table_t *sys_table_arg, char *str);
+ 
+ void efi_free(efi_system_table_t *sys_table_arg, unsigned long size,
+ 	      unsigned long addr);
+ 
+ char *efi_convert_cmdline(efi_system_table_t *sys_table_arg,
+ 			  efi_loaded_image_t *image, int *cmd_line_len);
+ 
+ efi_status_t efi_get_memory_map(efi_system_table_t *sys_table_arg,
+ 				efi_memory_desc_t **map,
+ 				unsigned long *map_size,
+ 				unsigned long *desc_size,
+ 				u32 *desc_ver,
+ 				unsigned long *key_ptr);
+ 
+ efi_status_t efi_low_alloc(efi_system_table_t *sys_table_arg,
+ 			   unsigned long size, unsigned long align,
+ 			   unsigned long *addr);
+ 
+ efi_status_t efi_high_alloc(efi_system_table_t *sys_table_arg,
+ 			    unsigned long size, unsigned long align,
+ 			    unsigned long *addr, unsigned long max);
+ 
+ efi_status_t efi_relocate_kernel(efi_system_table_t *sys_table_arg,
+ 				 unsigned long *image_addr,
+ 				 unsigned long image_size,
+ 				 unsigned long alloc_size,
+ 				 unsigned long preferred_addr,
+ 				 unsigned long alignment);
+ 
+ efi_status_t handle_cmdline_files(efi_system_table_t *sys_table_arg,
+ 				  efi_loaded_image_t *image,
+ 				  char *cmd_line, char *option_string,
+ 				  unsigned long max_addr,
+ 				  unsigned long *load_addr,
+ 				  unsigned long *load_size);
+ 
+ efi_status_t efi_parse_options(char *cmdline);
+ 
+ bool efi_runtime_disabled(void);
++>>>>>>> b2e0a54a1296 (efi: Move noefi early param code out of x86 arch code)
  #endif /* _LINUX_EFI_H */
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index cbd5f28e2ade..00b73c8b54c6 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -2103,7 +2103,7 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 
 	nodsp		[SH] Disable hardware DSP at boot time.
 
-	noefi		[X86] Disable EFI runtime services support.
+	noefi		Disable EFI runtime services support.
 
 	noexec		[IA-64]
 
* Unmerged path arch/x86/platform/efi/efi.c
* Unmerged path drivers/firmware/efi/efi.c
* Unmerged path include/linux/efi.h
