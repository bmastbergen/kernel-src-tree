drm/i915/cnl: Add Gen10 LRC size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Oscar Mateo <oscar.mateo@intel.com>
commit 7fd0b1a2593647aba4538196dd80314fd134877b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7fd0b1a2.failed

The total size of the context has decreased with the removal of the
URB_ATOMIC section. BSpec indicates 16750 DWORDs (17 pages), plus
one page for PPHWSP, and I'm throwing an extra page for precaution.

	Signed-off-by: Oscar Mateo <oscar.mateo@intel.com>
	Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Cc: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
	Cc: Ben Widawsky <ben@bwidawsk.net>
	Acked-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/1506035989-14295-1-git-send-email-oscar.mateo@intel.com
(cherry picked from commit 7fd0b1a2593647aba4538196dd80314fd134877b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_engine_cs.c
diff --cc drivers/gpu/drm/i915/intel_engine_cs.c
index 958176de4eb5,020e4c6c0192..000000000000
--- a/drivers/gpu/drm/i915/intel_engine_cs.c
+++ b/drivers/gpu/drm/i915/intel_engine_cs.c
@@@ -26,21 -26,32 +26,42 @@@
  #include "intel_ringbuffer.h"
  #include "intel_lrc.h"
  
++<<<<<<< HEAD
 +static const struct engine_info {
++=======
+ /* Haswell does have the CXT_SIZE register however it does not appear to be
+  * valid. Now, docs explain in dwords what is in the context object. The full
+  * size is 70720 bytes, however, the power context and execlist context will
+  * never be saved (power context is stored elsewhere, and execlists don't work
+  * on HSW) - so the final size, including the extra state required for the
+  * Resource Streamer, is 66944 bytes, which rounds to 17 pages.
+  */
+ #define HSW_CXT_TOTAL_SIZE		(17 * PAGE_SIZE)
+ /* Same as Haswell, but 72064 bytes now. */
+ #define GEN8_CXT_TOTAL_SIZE		(18 * PAGE_SIZE)
+ 
+ #define GEN8_LR_CONTEXT_RENDER_SIZE	(20 * PAGE_SIZE)
+ #define GEN9_LR_CONTEXT_RENDER_SIZE	(22 * PAGE_SIZE)
+ #define GEN10_LR_CONTEXT_RENDER_SIZE	(19 * PAGE_SIZE)
+ 
+ #define GEN8_LR_CONTEXT_OTHER_SIZE	( 2 * PAGE_SIZE)
+ 
+ struct engine_class_info {
++>>>>>>> 7fd0b1a25936 (drm/i915/cnl: Add Gen10 LRC size)
  	const char *name;
 +	unsigned exec_id;
 +	enum intel_engine_hw_id hw_id;
 +	u32 mmio_base;
 +	unsigned irq_shift;
  	int (*init_legacy)(struct intel_engine_cs *engine);
  	int (*init_execlists)(struct intel_engine_cs *engine);
 -};
 -
 -static const struct engine_class_info intel_engine_classes[] = {
 -	[RENDER_CLASS] = {
 -		.name = "rcs",
 +} intel_engines[] = {
 +	[RCS] = {
 +		.name = "render ring",
 +		.exec_id = I915_EXEC_RENDER,
 +		.hw_id = RCS_HW,
 +		.mmio_base = RENDER_RING_BASE,
 +		.irq_shift = GEN8_RCS_IRQ_SHIFT,
  		.init_execlists = logical_render_ring_init,
  		.init_legacy = intel_init_render_ring_buffer,
  	},
@@@ -82,6 -72,123 +103,126 @@@
  	},
  };
  
++<<<<<<< HEAD
++=======
+ struct engine_info {
+ 	unsigned int hw_id;
+ 	unsigned int uabi_id;
+ 	u8 class;
+ 	u8 instance;
+ 	u32 mmio_base;
+ 	unsigned irq_shift;
+ };
+ 
+ static const struct engine_info intel_engines[] = {
+ 	[RCS] = {
+ 		.hw_id = RCS_HW,
+ 		.uabi_id = I915_EXEC_RENDER,
+ 		.class = RENDER_CLASS,
+ 		.instance = 0,
+ 		.mmio_base = RENDER_RING_BASE,
+ 		.irq_shift = GEN8_RCS_IRQ_SHIFT,
+ 	},
+ 	[BCS] = {
+ 		.hw_id = BCS_HW,
+ 		.uabi_id = I915_EXEC_BLT,
+ 		.class = COPY_ENGINE_CLASS,
+ 		.instance = 0,
+ 		.mmio_base = BLT_RING_BASE,
+ 		.irq_shift = GEN8_BCS_IRQ_SHIFT,
+ 	},
+ 	[VCS] = {
+ 		.hw_id = VCS_HW,
+ 		.uabi_id = I915_EXEC_BSD,
+ 		.class = VIDEO_DECODE_CLASS,
+ 		.instance = 0,
+ 		.mmio_base = GEN6_BSD_RING_BASE,
+ 		.irq_shift = GEN8_VCS1_IRQ_SHIFT,
+ 	},
+ 	[VCS2] = {
+ 		.hw_id = VCS2_HW,
+ 		.uabi_id = I915_EXEC_BSD,
+ 		.class = VIDEO_DECODE_CLASS,
+ 		.instance = 1,
+ 		.mmio_base = GEN8_BSD2_RING_BASE,
+ 		.irq_shift = GEN8_VCS2_IRQ_SHIFT,
+ 	},
+ 	[VECS] = {
+ 		.hw_id = VECS_HW,
+ 		.uabi_id = I915_EXEC_VEBOX,
+ 		.class = VIDEO_ENHANCEMENT_CLASS,
+ 		.instance = 0,
+ 		.mmio_base = VEBOX_RING_BASE,
+ 		.irq_shift = GEN8_VECS_IRQ_SHIFT,
+ 	},
+ };
+ 
+ /**
+  * ___intel_engine_context_size() - return the size of the context for an engine
+  * @dev_priv: i915 device private
+  * @class: engine class
+  *
+  * Each engine class may require a different amount of space for a context
+  * image.
+  *
+  * Return: size (in bytes) of an engine class specific context image
+  *
+  * Note: this size includes the HWSP, which is part of the context image
+  * in LRC mode, but does not include the "shared data page" used with
+  * GuC submission. The caller should account for this if using the GuC.
+  */
+ static u32
+ __intel_engine_context_size(struct drm_i915_private *dev_priv, u8 class)
+ {
+ 	u32 cxt_size;
+ 
+ 	BUILD_BUG_ON(I915_GTT_PAGE_SIZE != PAGE_SIZE);
+ 
+ 	switch (class) {
+ 	case RENDER_CLASS:
+ 		switch (INTEL_GEN(dev_priv)) {
+ 		default:
+ 			MISSING_CASE(INTEL_GEN(dev_priv));
+ 		case 10:
+ 			return GEN10_LR_CONTEXT_RENDER_SIZE;
+ 		case 9:
+ 			return GEN9_LR_CONTEXT_RENDER_SIZE;
+ 		case 8:
+ 			return i915_modparams.enable_execlists ?
+ 			       GEN8_LR_CONTEXT_RENDER_SIZE :
+ 			       GEN8_CXT_TOTAL_SIZE;
+ 		case 7:
+ 			if (IS_HASWELL(dev_priv))
+ 				return HSW_CXT_TOTAL_SIZE;
+ 
+ 			cxt_size = I915_READ(GEN7_CXT_SIZE);
+ 			return round_up(GEN7_CXT_TOTAL_SIZE(cxt_size) * 64,
+ 					PAGE_SIZE);
+ 		case 6:
+ 			cxt_size = I915_READ(CXT_SIZE);
+ 			return round_up(GEN6_CXT_TOTAL_SIZE(cxt_size) * 64,
+ 					PAGE_SIZE);
+ 		case 5:
+ 		case 4:
+ 		case 3:
+ 		case 2:
+ 		/* For the special day when i810 gets merged. */
+ 		case 1:
+ 			return 0;
+ 		}
+ 		break;
+ 	default:
+ 		MISSING_CASE(class);
+ 	case VIDEO_DECODE_CLASS:
+ 	case VIDEO_ENHANCEMENT_CLASS:
+ 	case COPY_ENGINE_CLASS:
+ 		if (INTEL_GEN(dev_priv) < 8)
+ 			return 0;
+ 		return GEN8_LR_CONTEXT_OTHER_SIZE;
+ 	}
+ }
+ 
++>>>>>>> 7fd0b1a25936 (drm/i915/cnl: Add Gen10 LRC size)
  static int
  intel_engine_setup(struct drm_i915_private *dev_priv,
  		   enum intel_engine_id id)
* Unmerged path drivers/gpu/drm/i915/intel_engine_cs.c
