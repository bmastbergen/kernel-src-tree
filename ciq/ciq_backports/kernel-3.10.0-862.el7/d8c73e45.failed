iwlwifi: nvm-parse: unify channel flags printing

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Johannes Berg <johannes.berg@intel.com>
commit d8c73e455d7b973d1346bb5632b4a41819b090c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d8c73e45.failed

The current channel flags printing is very strange and messy,
in LAR we sometimes print the channel number and sometimes the
frequency, in both we print a calculated value (whether ad-hoc
is supported or not) etc.

Unify all this to
 * print the channel number, not the frequency
 * remove the band print (2.4/5.2 GHz, it's obvious)
 * remove the calculated Ad-Hoc print

Doing all of this also gets the length of the string to a max
of 101 characters, which is below the max of 110 for tracing,
and thus avoids the warning that came up on certain channels
with certain flag combinations.

	Signed-off-by: Johannes Berg <johannes.berg@intel.com>
	Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
(cherry picked from commit d8c73e455d7b973d1346bb5632b4a41819b090c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
diff --cc drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
index 3bd6fc1b76d4,35638404c24e..000000000000
--- a/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
@@@ -191,26 -184,58 +191,54 @@@ static struct ieee80211_rate iwl_cfg802
   * @NVM_CHANNEL_INDOOR_ONLY: only indoor use is allowed
   * @NVM_CHANNEL_GO_CONCURRENT: GO operation is allowed when connected to BSS
   *	on same channel on 2.4 or same UNII band on 5.2
 - * @NVM_CHANNEL_UNIFORM: uniform spreading required
 - * @NVM_CHANNEL_20MHZ: 20 MHz channel okay
 - * @NVM_CHANNEL_40MHZ: 40 MHz channel okay
 - * @NVM_CHANNEL_80MHZ: 80 MHz channel okay
 - * @NVM_CHANNEL_160MHZ: 160 MHz channel okay
 - * @NVM_CHANNEL_DC_HIGH: DC HIGH required/allowed (?)
 + * @NVM_CHANNEL_WIDE: 20 MHz channel okay (?)
 + * @NVM_CHANNEL_40MHZ: 40 MHz channel okay (?)
 + * @NVM_CHANNEL_80MHZ: 80 MHz channel okay (?)
 + * @NVM_CHANNEL_160MHZ: 160 MHz channel okay (?)
   */
  enum iwl_nvm_channel_flags {
 -	NVM_CHANNEL_VALID		= BIT(0),
 -	NVM_CHANNEL_IBSS		= BIT(1),
 -	NVM_CHANNEL_ACTIVE		= BIT(3),
 -	NVM_CHANNEL_RADAR		= BIT(4),
 -	NVM_CHANNEL_INDOOR_ONLY		= BIT(5),
 -	NVM_CHANNEL_GO_CONCURRENT	= BIT(6),
 -	NVM_CHANNEL_UNIFORM		= BIT(7),
 -	NVM_CHANNEL_20MHZ		= BIT(8),
 -	NVM_CHANNEL_40MHZ		= BIT(9),
 -	NVM_CHANNEL_80MHZ		= BIT(10),
 -	NVM_CHANNEL_160MHZ		= BIT(11),
 -	NVM_CHANNEL_DC_HIGH		= BIT(12),
 +	NVM_CHANNEL_VALID = BIT(0),
 +	NVM_CHANNEL_IBSS = BIT(1),
 +	NVM_CHANNEL_ACTIVE = BIT(3),
 +	NVM_CHANNEL_RADAR = BIT(4),
 +	NVM_CHANNEL_INDOOR_ONLY = BIT(5),
 +	NVM_CHANNEL_GO_CONCURRENT = BIT(6),
 +	NVM_CHANNEL_WIDE = BIT(8),
 +	NVM_CHANNEL_40MHZ = BIT(9),
 +	NVM_CHANNEL_80MHZ = BIT(10),
 +	NVM_CHANNEL_160MHZ = BIT(11),
  };
  
+ static inline void iwl_nvm_print_channel_flags(struct device *dev, u32 level,
+ 					       int chan, u16 flags)
+ {
  #define CHECK_AND_PRINT_I(x)	\
- 	((ch_flags & NVM_CHANNEL_##x) ? # x " " : "")
+ 	((flags & NVM_CHANNEL_##x) ? " " #x : "")
+ 
+ 	if (!(flags & NVM_CHANNEL_VALID)) {
+ 		IWL_DEBUG_DEV(dev, level, "Ch. %d: 0x%x: No traffic\n",
+ 			      chan, flags);
+ 		return;
+ 	}
+ 
+ 	/* Note: already can print up to 101 characters, 110 is the limit! */
+ 	IWL_DEBUG_DEV(dev, level,
+ 		      "Ch. %d: 0x%x:%s%s%s%s%s%s%s%s%s%s%s%s\n",
+ 		      chan, flags,
+ 		      CHECK_AND_PRINT_I(VALID),
+ 		      CHECK_AND_PRINT_I(IBSS),
+ 		      CHECK_AND_PRINT_I(ACTIVE),
+ 		      CHECK_AND_PRINT_I(RADAR),
+ 		      CHECK_AND_PRINT_I(INDOOR_ONLY),
+ 		      CHECK_AND_PRINT_I(GO_CONCURRENT),
+ 		      CHECK_AND_PRINT_I(UNIFORM),
+ 		      CHECK_AND_PRINT_I(20MHZ),
+ 		      CHECK_AND_PRINT_I(40MHZ),
+ 		      CHECK_AND_PRINT_I(80MHZ),
+ 		      CHECK_AND_PRINT_I(160MHZ),
+ 		      CHECK_AND_PRINT_I(DC_HIGH));
+ #undef CHECK_AND_PRINT_I
+ }
  
  static u32 iwl_get_channel_flags(u8 ch_num, int ch_idx, bool is_5ghz,
  				 u16 nvm_flags, const struct iwl_cfg *cfg)
@@@ -334,25 -361,10 +358,32 @@@ static int iwl_init_channel_map(struct 
  		else
  			channel->flags = 0;
  
++<<<<<<< HEAD
 +		IWL_DEBUG_EEPROM(dev,
 +				 "Ch. %d [%sGHz] flags 0x%x %s%s%s%s%s%s%s%s%s%s(%ddBm): Ad-Hoc %ssupported\n",
 +				 channel->hw_value,
 +				 is_5ghz ? "5.2" : "2.4",
 +				 ch_flags,
 +				 CHECK_AND_PRINT_I(VALID),
 +				 CHECK_AND_PRINT_I(IBSS),
 +				 CHECK_AND_PRINT_I(ACTIVE),
 +				 CHECK_AND_PRINT_I(RADAR),
 +				 CHECK_AND_PRINT_I(INDOOR_ONLY),
 +				 CHECK_AND_PRINT_I(GO_CONCURRENT),
 +				 CHECK_AND_PRINT_I(WIDE),
 +				 CHECK_AND_PRINT_I(40MHZ),
 +				 CHECK_AND_PRINT_I(80MHZ),
 +				 CHECK_AND_PRINT_I(160MHZ),
 +				 channel->max_power,
 +				 ((ch_flags & NVM_CHANNEL_IBSS) &&
 +				  !(ch_flags & NVM_CHANNEL_RADAR))
 +					? "" : "not ");
++=======
+ 		iwl_nvm_print_channel_flags(dev, IWL_DL_EEPROM,
+ 					    channel->hw_value, ch_flags);
+ 		IWL_DEBUG_EEPROM(dev, "Ch. %d: %ddBm\n",
+ 				 channel->hw_value, channel->max_power);
++>>>>>>> d8c73e455d7b (iwlwifi: nvm-parse: unify channel flags printing)
  	}
  
  	return n_channels;
@@@ -874,26 -914,11 +901,31 @@@ iwl_parse_nvm_mcc_info(struct device *d
  		rule->flags |= NL80211_RRF_AUTO_BW;
  		rule->freq_range.max_bandwidth_khz = 0;
  
 +		prev_ch_flags = ch_flags;
  		prev_center_freq = center_freq;
 -		prev_reg_rule_flags = reg_rule_flags;
  
++<<<<<<< HEAD
 +		IWL_DEBUG_DEV(dev, IWL_DL_LAR,
 +			      "Ch. %d [%sGHz] %s%s%s%s%s%s%s%s%s(0x%02x): Ad-Hoc %ssupported\n",
 +			      center_freq,
 +			      band == NL80211_BAND_5GHZ ? "5.2" : "2.4",
 +			      CHECK_AND_PRINT_I(VALID),
 +			      CHECK_AND_PRINT_I(ACTIVE),
 +			      CHECK_AND_PRINT_I(RADAR),
 +			      CHECK_AND_PRINT_I(WIDE),
 +			      CHECK_AND_PRINT_I(40MHZ),
 +			      CHECK_AND_PRINT_I(80MHZ),
 +			      CHECK_AND_PRINT_I(160MHZ),
 +			      CHECK_AND_PRINT_I(INDOOR_ONLY),
 +			      CHECK_AND_PRINT_I(GO_CONCURRENT),
 +			      ch_flags,
 +			      ((ch_flags & NVM_CHANNEL_ACTIVE) &&
 +			       !(ch_flags & NVM_CHANNEL_RADAR))
 +					 ? "" : "not ");
++=======
+ 		iwl_nvm_print_channel_flags(dev, IWL_DL_LAR,
+ 					    nvm_chan[ch_idx], ch_flags);
++>>>>>>> d8c73e455d7b (iwlwifi: nvm-parse: unify channel flags printing)
  	}
  
  	regd->n_reg_rules = valid_rules;
* Unmerged path drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
