scsi: qla2xxx: Add support for minimum link speed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Add support for minimum link speed (Himanshu Madhani) [1316281]
Rebuild_FUZZ: 93.48%
commit-author Sawan Chandak <sawan.chandak@cavium.com>
commit 92d4408e34667f521cda7192fc8dda3da25d45bc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/92d4408e.failed

	Signed-off-by: Sawan Chandak <sawan.chandak@cavium.com>
	Signed-off-by: Joe Carnuccio <joe.carnuccio@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 92d4408e34667f521cda7192fc8dda3da25d45bc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_def.h
#	drivers/scsi/qla2xxx/qla_mbx.c
diff --cc drivers/scsi/qla2xxx/qla_def.h
index 3f28536dc812,0f80b812f4a7..000000000000
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@@ -3546,6 -4027,11 +3547,14 @@@ struct qla_hw_data 
  
  	struct qlt_hw_data tgt;
  	int	allow_cna_fw_dump;
++<<<<<<< HEAD
++=======
+ 	uint16_t min_link_speed;
+ 	uint16_t max_speed_sup;
+ 
+ 	atomic_t        nvme_active_aen_cnt;
+ 	uint16_t        nvme_last_rptd_aen;             /* Last recorded aen count */
++>>>>>>> 92d4408e3466 (scsi: qla2xxx: Add support for minimum link speed)
  };
  
  /*
@@@ -3698,7 -4210,12 +3707,8 @@@ typedef struct scsi_qla_host 
  	atomic_t	vref_count;
  	struct qla8044_reset_template reset_tmplt;
  	uint16_t	bbcr;
 -	struct name_list_extended gnl;
 -	/* Count of active session/fcport */
 -	int fcport_count;
 -	wait_queue_head_t fcport_waitQ;
  	wait_queue_head_t vref_waitq;
+ 	uint8_t min_link_speed_feat;
  } scsi_qla_host_t;
  
  struct qla27xx_image_status {
diff --cc drivers/scsi/qla2xxx/qla_mbx.c
index 11982e7bd50f,32bbbd50567d..000000000000
--- a/drivers/scsi/qla2xxx/qla_mbx.c
+++ b/drivers/scsi/qla2xxx/qla_mbx.c
@@@ -577,13 -601,52 +577,59 @@@ qla2x00_execute_fw(scsi_qla_host_t *vha
  		mcp->mb[1] = MSW(risc_addr);
  		mcp->mb[2] = LSW(risc_addr);
  		mcp->mb[3] = 0;
 -		mcp->mb[4] = 0;
  		if (IS_QLA25XX(ha) || IS_QLA81XX(ha) || IS_QLA83XX(ha) ||
  		    IS_QLA27XX(ha)) {
++<<<<<<< HEAD
 +			struct nvram_81xx *nv = ha->nvram;
 +			mcp->mb[4] = (nv->enhanced_features &
 +			    EXTENDED_BB_CREDITS);
 +		} else
 +			mcp->mb[4] = 0;
++=======
+ 			if (ql2xautodetectsfp) {
+ 				if (ha->flags.detected_lr_sfp) {
+ 					mcp->mb[4] |= EXTENDED_BB_CREDITS;
+ 					if (IS_QLA27XX(ha))
+ 						mcp->mb[4] |=
+ 					(u16)ha->long_range_distance << 12;
+ 					ha->flags.using_lr_setting = 1;
+ 				}
+ 			} else {
+ 				struct nvram_81xx *nv = ha->nvram;
+ 
+ 				if (nv->enhanced_features &
+ 				    EXTENDED_BB_CREDITS) {
+ 					mcp->mb[4] |= EXTENDED_BB_CREDITS;
+ 					ha->flags.using_lr_setting = 1;
+ 				}
+ 			}
+ 		} else {
+ 			ha->flags.using_lr_setting = 0;
+ 		}
+ 
+ 		if (ql2xnvmeenable && IS_QLA27XX(ha))
+ 			mcp->mb[4] |= NVME_ENABLE_FLAG;
+ 
+ 		if (IS_QLA83XX(ha) || IS_QLA27XX(ha)) {
+ 			struct nvram_81xx *nv = ha->nvram;
+ 			/* set minimum speed if specified in nvram */
+ 			if (nv->min_link_speed >= 2 &&
+ 			    nv->min_link_speed <= 5) {
+ 				mcp->mb[4] |= BIT_4;
+ 				mcp->mb[11] = nv->min_link_speed;
+ 				mcp->out_mb |= MBX_11;
+ 				mcp->in_mb |= BIT_5;
+ 				vha->min_link_speed_feat = nv->min_link_speed;
+ 			}
+ 		}
+ 
+ 		if (ha->flags.exlogins_enabled)
+ 			mcp->mb[4] |= ENABLE_EXTENDED_LOGIN;
+ 
+ 		if (ha->flags.exchoffld_enabled)
+ 			mcp->mb[4] |= ENABLE_EXCHANGE_OFFLD;
+ 
++>>>>>>> 92d4408e3466 (scsi: qla2xxx: Add support for minimum link speed)
  		mcp->out_mb |= MBX_4|MBX_3|MBX_2|MBX_1;
  		mcp->in_mb |= MBX_1;
  	} else {
diff --git a/drivers/scsi/qla2xxx/qla_attr.c b/drivers/scsi/qla2xxx/qla_attr.c
index 201331cacc70..12e6fc9b41f9 100644
--- a/drivers/scsi/qla2xxx/qla_attr.c
+++ b/drivers/scsi/qla2xxx/qla_attr.c
@@ -1476,6 +1476,38 @@ qla2x00_pep_version_show(struct device *dev, struct device_attribute *attr,
 	    ha->pep_version[0], ha->pep_version[1], ha->pep_version[2]);
 }
 
+static ssize_t
+qla2x00_min_link_speed_show(struct device *dev, struct device_attribute *attr,
+    char *buf)
+{
+	scsi_qla_host_t *vha = shost_priv(class_to_shost(dev));
+	struct qla_hw_data *ha = vha->hw;
+
+	if (!IS_QLA27XX(ha))
+		return scnprintf(buf, PAGE_SIZE, "\n");
+
+	return scnprintf(buf, PAGE_SIZE, "%s\n",
+	    ha->min_link_speed == 5 ? "32Gps" :
+	    ha->min_link_speed == 4 ? "16Gps" :
+	    ha->min_link_speed == 3 ? "8Gps" :
+	    ha->min_link_speed == 2 ? "4Gps" :
+	    ha->min_link_speed != 0 ? "unknown" : "");
+}
+
+static ssize_t
+qla2x00_max_speed_sup_show(struct device *dev, struct device_attribute *attr,
+    char *buf)
+{
+	scsi_qla_host_t *vha = shost_priv(class_to_shost(dev));
+	struct qla_hw_data *ha = vha->hw;
+
+	if (!IS_QLA27XX(ha))
+		return scnprintf(buf, PAGE_SIZE, "\n");
+
+	return scnprintf(buf, PAGE_SIZE, "%s\n",
+	    ha->max_speed_sup ? "32Gps" : "16Gps");
+}
+
 static DEVICE_ATTR(driver_version, S_IRUGO, qla2x00_drvr_version_show, NULL);
 static DEVICE_ATTR(fw_version, S_IRUGO, qla2x00_fw_version_show, NULL);
 static DEVICE_ATTR(serial_num, S_IRUGO, qla2x00_serial_num_show, NULL);
@@ -1521,6 +1553,8 @@ static DEVICE_ATTR(allow_cna_fw_dump, S_IRUGO | S_IWUSR,
 		   qla2x00_allow_cna_fw_dump_show,
 		   qla2x00_allow_cna_fw_dump_store);
 static DEVICE_ATTR(pep_version, S_IRUGO, qla2x00_pep_version_show, NULL);
+static DEVICE_ATTR(min_link_speed, S_IRUGO, qla2x00_min_link_speed_show, NULL);
+static DEVICE_ATTR(max_speed_sup, S_IRUGO, qla2x00_max_speed_sup_show, NULL);
 
 struct device_attribute *qla2x00_host_attrs[] = {
 	&dev_attr_driver_version,
@@ -1555,6 +1589,8 @@ struct device_attribute *qla2x00_host_attrs[] = {
 	&dev_attr_fw_dump_size,
 	&dev_attr_allow_cna_fw_dump,
 	&dev_attr_pep_version,
+	&dev_attr_min_link_speed,
+	&dev_attr_max_speed_sup,
 	NULL,
 };
 
* Unmerged path drivers/scsi/qla2xxx/qla_def.h
diff --git a/drivers/scsi/qla2xxx/qla_fw.h b/drivers/scsi/qla2xxx/qla_fw.h
index 8a2368b32dec..34a4d4d10abc 100644
--- a/drivers/scsi/qla2xxx/qla_fw.h
+++ b/drivers/scsi/qla2xxx/qla_fw.h
@@ -1638,7 +1638,9 @@ struct nvram_81xx {
 	uint16_t reserved_6_3[14];
 
 	/* Offset 192. */
-	uint16_t reserved_7[32];
+	uint8_t min_link_speed;
+	uint8_t reserved_7_0;
+	uint16_t reserved_7[31];
 
 	/*
 	 * BIT 0  = Enable spinup delay
diff --git a/drivers/scsi/qla2xxx/qla_isr.c b/drivers/scsi/qla2xxx/qla_isr.c
index 3d56972c1852..c2e1a90b9270 100644
--- a/drivers/scsi/qla2xxx/qla_isr.c
+++ b/drivers/scsi/qla2xxx/qla_isr.c
@@ -1179,6 +1179,11 @@ global_port_update:
 			schedule_work(&ha->board_disable);
 		break;
 
+	case MBA_TRANS_INSERT:
+		ql_dbg(ql_dbg_async, vha, 0x5091,
+		    "Transceiver Insertion: %04x\n", mb[1]);
+		break;
+
 	default:
 		ql_dbg(ql_dbg_async, vha, 0x5057,
 		    "Unknown AEN:%04x %04x %04x %04x\n",
* Unmerged path drivers/scsi/qla2xxx/qla_mbx.c
