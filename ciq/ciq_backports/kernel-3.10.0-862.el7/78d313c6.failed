iommu/amd: Add several helper functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Add several helper functions (Jerry Snitselaar) [1062729]
Rebuild_FUZZ: 91.67%
commit-author Baoquan He <bhe@redhat.com>
commit 78d313c611adcd354d35295e30f1495e02e005f9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/78d313c6.failed

Move single iommu enabling codes into a wrapper function early_enable_iommu().
This can make later kdump change easier.

And also add iommu_disable_command_buffer and iommu_disable_event_buffer
for later usage.

	Signed-off-by: Baoquan He <bhe@redhat.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 78d313c611adcd354d35295e30f1495e02e005f9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu_init.c
diff --cc drivers/iommu/amd_iommu_init.c
index 9e54e219b8f7,277838dbc3a6..000000000000
--- a/drivers/iommu/amd_iommu_init.c
+++ b/drivers/iommu/amd_iommu_init.c
@@@ -1800,6 -2044,37 +1816,40 @@@ static void iommu_apply_resume_quirks(s
  			       iommu->stored_addr_lo | 1);
  }
  
++<<<<<<< HEAD
++=======
+ static void iommu_enable_ga(struct amd_iommu *iommu)
+ {
+ #ifdef CONFIG_IRQ_REMAP
+ 	switch (amd_iommu_guest_ir) {
+ 	case AMD_IOMMU_GUEST_IR_VAPIC:
+ 		iommu_feature_enable(iommu, CONTROL_GAM_EN);
+ 		/* Fall through */
+ 	case AMD_IOMMU_GUEST_IR_LEGACY_GA:
+ 		iommu_feature_enable(iommu, CONTROL_GA_EN);
+ 		iommu->irte_ops = &irte_128_ops;
+ 		break;
+ 	default:
+ 		iommu->irte_ops = &irte_32_ops;
+ 		break;
+ 	}
+ #endif
+ }
+ 
+ static void early_enable_iommu(struct amd_iommu *iommu)
+ {
+ 	iommu_disable(iommu);
+ 	iommu_init_flags(iommu);
+ 	iommu_set_device_table(iommu);
+ 	iommu_enable_command_buffer(iommu);
+ 	iommu_enable_event_buffer(iommu);
+ 	iommu_set_exclusion_range(iommu);
+ 	iommu_enable_ga(iommu);
+ 	iommu_enable(iommu);
+ 	iommu_flush_all_caches(iommu);
+ }
+ 
++>>>>>>> 78d313c611ad (iommu/amd: Add several helper functions)
  /*
   * This function finally enables all IOMMUs found in the system after
   * they have been initialized
@@@ -1808,16 -2083,13 +1858,26 @@@ static void early_enable_iommus(void
  {
  	struct amd_iommu *iommu;
  
++<<<<<<< HEAD
 +	for_each_iommu(iommu) {
 +		iommu_disable(iommu);
 +		iommu_init_flags(iommu);
 +		iommu_set_device_table(iommu);
 +		iommu_enable_command_buffer(iommu);
 +		iommu_enable_event_buffer(iommu);
 +		iommu_set_exclusion_range(iommu);
 +		iommu_enable(iommu);
 +		iommu_flush_all_caches(iommu);
 +	}
++=======
+ 	for_each_iommu(iommu)
+ 		early_enable_iommu(iommu);
+ 
+ #ifdef CONFIG_IRQ_REMAP
+ 	if (AMD_IOMMU_GUEST_IR_VAPIC(amd_iommu_guest_ir))
+ 		amd_iommu_irq_ops.capability |= (1 << IRQ_POSTING_CAP);
+ #endif
++>>>>>>> 78d313c611ad (iommu/amd: Add several helper functions)
  }
  
  static void enable_iommus_v2(void)
* Unmerged path drivers/iommu/amd_iommu_init.c
