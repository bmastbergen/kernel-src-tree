iommu/amd: Add flush counters to struct dma_ops_domain

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Add flush counters to struct dma_ops_domain (Suravee Suthikulpanit) [1508644]
Rebuild_FUZZ: 94.12%
commit-author Joerg Roedel <jroedel@suse.de>
commit a6e3f6f030396c0576c729fd8ca4bfb654d35bfe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a6e3f6f0.failed

The counters are increased every time the TLB for a given
domain is flushed. We also store the current value of that
counter into newly added entries of the flush-queue, so that
we can tell whether this entry is already flushed.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit a6e3f6f030396c0576c729fd8ca4bfb654d35bfe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
diff --cc drivers/iommu/amd_iommu.c
index e80343c1de99,795208bd39bd..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -117,26 -136,18 +117,34 @@@ static void update_domain(struct protec
  static int protection_domain_init(struct protection_domain *domain);
  static void detach_device(struct device *dev);
  
 -#define FLUSH_QUEUE_SIZE 256
 +/*
 + * For dynamic growth the aperture size is split into ranges of 128MB of
 + * DMA address space each. This struct represents one such range.
 + */
 +struct aperture_range {
  
++<<<<<<< HEAD
 +	spinlock_t bitmap_lock;
++=======
+ struct flush_queue_entry {
+ 	unsigned long iova_pfn;
+ 	unsigned long pages;
+ 	u64 counter; /* Flush counter when this entry was added to the queue */
+ };
++>>>>>>> a6e3f6f03039 (iommu/amd: Add flush counters to struct dma_ops_domain)
 +
 +	/* address allocation bitmap */
 +	unsigned long *bitmap;
 +	unsigned long offset;
 +	unsigned long next_bit;
  
 -struct flush_queue {
 -	struct flush_queue_entry *entries;
 -	unsigned head, tail;
 -	spinlock_t lock;
 +	/*
 +	 * Array of PTE pages for the aperture. In this array we save all the
 +	 * leaf pages of the domain page table used for the aperture. This way
 +	 * we don't need to walk the page table to find a specific PTE. We can
 +	 * just calculate its address in constant time.
 +	 */
 +	u64 *pte_pages[64];
  };
  
  /*
@@@ -146,16 -157,36 +154,41 @@@ struct dma_ops_domain 
  	/* generic protection domain information */
  	struct protection_domain domain;
  
 -	/* IOVA RB-Tree */
 -	struct iova_domain iovad;
 +	/* size of the aperture for the mappings */
 +	unsigned long aperture_size;
 +
++<<<<<<< HEAD
 +	/* aperture index we start searching for free addresses */
 +	unsigned long next_index;
  
 +	/* address space relevant data */
 +	struct aperture_range *aperture[APERTURE_MAX_RANGES];
++=======
+ 	struct flush_queue __percpu *flush_queue;
+ 
+ 	/*
+ 	 * We need two counter here to be race-free wrt. IOTLB flushing and
+ 	 * adding entries to the flush queue.
+ 	 *
+ 	 * The flush_start_cnt is incremented _before_ the IOTLB flush starts.
+ 	 * New entries added to the flush ring-buffer get their 'counter' value
+ 	 * from here. This way we can make sure that entries added to the queue
+ 	 * (or other per-cpu queues of the same domain) while the TLB is about
+ 	 * to be flushed are not considered to be flushed already.
+ 	 */
+ 	atomic64_t flush_start_cnt;
+ 
+ 	/*
+ 	 * The flush_finish_cnt is incremented when an IOTLB flush is complete.
+ 	 * This value is always smaller than flush_start_cnt. The queue_add
+ 	 * function frees all IOVAs that have a counter value smaller than
+ 	 * flush_finish_cnt. This makes sure that we only free IOVAs that are
+ 	 * flushed out of the IOTLB of the domain.
+ 	 */
+ 	atomic64_t flush_finish_cnt;
++>>>>>>> a6e3f6f03039 (iommu/amd: Add flush counters to struct dma_ops_domain)
  };
  
 -static struct iova_domain reserved_iova_ranges;
 -static struct lock_class_key reserved_rbtree_key;
 -
  /****************************************************************************
   *
   * Helper functions
@@@ -1972,6 -1779,151 +2005,154 @@@ static void free_gcr3_table(struct prot
  	free_page((unsigned long)domain->gcr3_tbl);
  }
  
++<<<<<<< HEAD
++=======
+ static void dma_ops_domain_free_flush_queue(struct dma_ops_domain *dom)
+ {
+ 	int cpu;
+ 
+ 	for_each_possible_cpu(cpu) {
+ 		struct flush_queue *queue;
+ 
+ 		queue = per_cpu_ptr(dom->flush_queue, cpu);
+ 		kfree(queue->entries);
+ 	}
+ 
+ 	free_percpu(dom->flush_queue);
+ 
+ 	dom->flush_queue = NULL;
+ }
+ 
+ static int dma_ops_domain_alloc_flush_queue(struct dma_ops_domain *dom)
+ {
+ 	int cpu;
+ 
+ 	atomic64_set(&dom->flush_start_cnt,  0);
+ 	atomic64_set(&dom->flush_finish_cnt, 0);
+ 
+ 	dom->flush_queue = alloc_percpu(struct flush_queue);
+ 	if (!dom->flush_queue)
+ 		return -ENOMEM;
+ 
+ 	/* First make sure everything is cleared */
+ 	for_each_possible_cpu(cpu) {
+ 		struct flush_queue *queue;
+ 
+ 		queue = per_cpu_ptr(dom->flush_queue, cpu);
+ 		queue->head    = 0;
+ 		queue->tail    = 0;
+ 		queue->entries = NULL;
+ 	}
+ 
+ 	/* Now start doing the allocation */
+ 	for_each_possible_cpu(cpu) {
+ 		struct flush_queue *queue;
+ 
+ 		queue = per_cpu_ptr(dom->flush_queue, cpu);
+ 		queue->entries = kzalloc(FLUSH_QUEUE_SIZE * sizeof(*queue->entries),
+ 					 GFP_KERNEL);
+ 		if (!queue->entries) {
+ 			dma_ops_domain_free_flush_queue(dom);
+ 			return -ENOMEM;
+ 		}
+ 
+ 		spin_lock_init(&queue->lock);
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static inline bool queue_ring_full(struct flush_queue *queue)
+ {
+ 	assert_spin_locked(&queue->lock);
+ 
+ 	return (((queue->tail + 1) % FLUSH_QUEUE_SIZE) == queue->head);
+ }
+ 
+ #define queue_ring_for_each(i, q) \
+ 	for (i = (q)->head; i != (q)->tail; i = (i + 1) % FLUSH_QUEUE_SIZE)
+ 
+ static void queue_release(struct dma_ops_domain *dom,
+ 			  struct flush_queue *queue)
+ {
+ 	unsigned i;
+ 
+ 	assert_spin_locked(&queue->lock);
+ 
+ 	queue_ring_for_each(i, queue)
+ 		free_iova_fast(&dom->iovad,
+ 			       queue->entries[i].iova_pfn,
+ 			       queue->entries[i].pages);
+ 
+ 	queue->head = queue->tail = 0;
+ }
+ 
+ static inline unsigned queue_ring_add(struct flush_queue *queue)
+ {
+ 	unsigned idx = queue->tail;
+ 
+ 	assert_spin_locked(&queue->lock);
+ 	queue->tail = (idx + 1) % FLUSH_QUEUE_SIZE;
+ 
+ 	return idx;
+ }
+ 
+ static inline void queue_ring_remove_head(struct flush_queue *queue)
+ {
+ 	assert_spin_locked(&queue->lock);
+ 	queue->head = (queue->head + 1) % FLUSH_QUEUE_SIZE;
+ }
+ 
+ static void queue_add(struct dma_ops_domain *dom,
+ 		      unsigned long address, unsigned long pages)
+ {
+ 	struct flush_queue *queue;
+ 	unsigned long flags;
+ 	u64 counter;
+ 	int idx;
+ 
+ 	pages     = __roundup_pow_of_two(pages);
+ 	address >>= PAGE_SHIFT;
+ 
+ 	counter = atomic64_read(&dom->flush_finish_cnt);
+ 
+ 	queue = get_cpu_ptr(dom->flush_queue);
+ 	spin_lock_irqsave(&queue->lock, flags);
+ 
+ 	queue_ring_for_each(idx, queue) {
+ 		/*
+ 		 * This assumes that counter values in the ring-buffer are
+ 		 * monotonously rising.
+ 		 */
+ 		if (queue->entries[idx].counter >= counter)
+ 			break;
+ 
+ 		free_iova_fast(&dom->iovad,
+ 			       queue->entries[idx].iova_pfn,
+ 			       queue->entries[idx].pages);
+ 
+ 		queue_ring_remove_head(queue);
+ 	}
+ 
+ 	if (queue_ring_full(queue)) {
+ 		atomic64_inc(&dom->flush_start_cnt);
+ 		domain_flush_tlb(&dom->domain);
+ 		domain_flush_complete(&dom->domain);
+ 		atomic64_inc(&dom->flush_finish_cnt);
+ 		queue_release(dom, queue);
+ 	}
+ 
+ 	idx = queue_ring_add(queue);
+ 
+ 	queue->entries[idx].iova_pfn = address;
+ 	queue->entries[idx].pages    = pages;
+ 	queue->entries[idx].counter  = atomic64_read(&dom->flush_start_cnt);
+ 
+ 	spin_unlock_irqrestore(&queue->lock, flags);
+ 	put_cpu_ptr(dom->flush_queue);
+ }
+ 
++>>>>>>> a6e3f6f03039 (iommu/amd: Add flush counters to struct dma_ops_domain)
  /*
   * Free a domain, only used if something went wrong in the
   * allocation path and we need to free an already allocated page table
* Unmerged path drivers/iommu/amd_iommu.c
