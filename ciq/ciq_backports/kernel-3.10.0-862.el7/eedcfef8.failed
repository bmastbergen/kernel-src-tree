virtchnl: convert to new macros

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jesse Brandeburg <jesse.brandeburg@intel.com>
commit eedcfef85b15ae02c488625556702594a618c616
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/eedcfef8.failed

As part of the conversion, change the arguments
to VF_IS_V1[01] macros and move them to virtchnl.h

	Signed-off-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit eedcfef85b15ae02c488625556702594a618c616)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_virtchnl.h
#	drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_virtchnl.h
index 974ba2baf6ea,8ffa670c2ffd..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_virtchnl.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_virtchnl.h
@@@ -125,7 -123,10 +125,14 @@@ struct i40e_virtchnl_version_info 
  	u32 minor;
  };
  
++<<<<<<< HEAD:drivers/net/ethernet/intel/i40e/i40e_virtchnl.h
 +/* I40E_VIRTCHNL_OP_RESET_VF
++=======
+ #define VF_IS_V10(_v) (((_v)->major == 1) && ((_v)->minor == 0))
+ #define VF_IS_V11(_ver) (((_ver)->major == 1) && ((_ver)->minor == 1))
+ 
+ /* VIRTCHNL_OP_RESET_VF
++>>>>>>> eedcfef85b15 (virtchnl: convert to new macros):include/linux/avf/virtchnl.h
   * VF sends this request to PF with no parameters
   * PF does NOT respond! VF driver must delay then poll VFGEN_RSTAT register
   * until reset completion is indicated. The admin queue must be reinitialized
diff --cc drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
index c607db0defb5,923026a255c0..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
@@@ -1377,18 -1475,18 +1377,24 @@@ static int i40e_vc_send_resp_to_vf(stru
   **/
  static int i40e_vc_get_version_msg(struct i40e_vf *vf, u8 *msg)
  {
 -	struct virtchnl_version_info info = {
 -		VIRTCHNL_VERSION_MAJOR, VIRTCHNL_VERSION_MINOR
 +	struct i40e_virtchnl_version_info info = {
 +		I40E_VIRTCHNL_VERSION_MAJOR, I40E_VIRTCHNL_VERSION_MINOR
  	};
  
 -	vf->vf_ver = *(struct virtchnl_version_info *)msg;
 +	vf->vf_ver = *(struct i40e_virtchnl_version_info *)msg;
  	/* VFs running the 1.0 API expect to get 1.0 back or they will cry. */
++<<<<<<< HEAD
 +	if (VF_IS_V10(vf))
 +		info.minor = I40E_VIRTCHNL_VERSION_MINOR_NO_VF_CAPS;
 +	return i40e_vc_send_msg_to_vf(vf, I40E_VIRTCHNL_OP_VERSION,
++=======
+ 	if (VF_IS_V10(&vf->vf_ver))
+ 		info.minor = VIRTCHNL_VERSION_MINOR_NO_VF_CAPS;
+ 	return i40e_vc_send_msg_to_vf(vf, VIRTCHNL_OP_VERSION,
++>>>>>>> eedcfef85b15 (virtchnl: convert to new macros)
  				      I40E_SUCCESS, (u8 *)&info,
  				      sizeof(struct
 -					     virtchnl_version_info));
 +					     i40e_virtchnl_version_info));
  }
  
  /**
@@@ -1423,21 -1521,21 +1429,21 @@@ static int i40e_vc_get_vf_resources_msg
  		len = 0;
  		goto err;
  	}
- 	if (VF_IS_V11(vf))
+ 	if (VF_IS_V11(&vf->vf_ver))
  		vf->driver_caps = *(u32 *)msg;
  	else
 -		vf->driver_caps = VIRTCHNL_VF_OFFLOAD_L2 |
 -				  VIRTCHNL_VF_OFFLOAD_RSS_REG |
 -				  VIRTCHNL_VF_OFFLOAD_VLAN;
 +		vf->driver_caps = I40E_VIRTCHNL_VF_OFFLOAD_L2 |
 +				  I40E_VIRTCHNL_VF_OFFLOAD_RSS_REG |
 +				  I40E_VIRTCHNL_VF_OFFLOAD_VLAN;
  
 -	vfres->vf_offload_flags = VIRTCHNL_VF_OFFLOAD_L2;
 +	vfres->vf_offload_flags = I40E_VIRTCHNL_VF_OFFLOAD_L2;
  	vsi = pf->vsi[vf->lan_vsi_idx];
  	if (!vsi->info.pvid)
 -		vfres->vf_offload_flags |= VIRTCHNL_VF_OFFLOAD_VLAN;
 +		vfres->vf_offload_flags |= I40E_VIRTCHNL_VF_OFFLOAD_VLAN;
  
  	if (i40e_vf_client_capable(pf, vf->vf_id) &&
 -	    (vf->driver_caps & VIRTCHNL_VF_OFFLOAD_IWARP)) {
 -		vfres->vf_offload_flags |= VIRTCHNL_VF_OFFLOAD_IWARP;
 +	    (vf->driver_caps & I40E_VIRTCHNL_VF_OFFLOAD_IWARP)) {
 +		vfres->vf_offload_flags |= I40E_VIRTCHNL_VF_OFFLOAD_IWARP;
  		set_bit(I40E_VF_STATE_IWARPENA, &vf->vf_states);
  	}
  
@@@ -2444,35 -2549,31 +2450,40 @@@ static int i40e_vc_validate_vf_msg(stru
  	bool err_msg_format = false;
  	int valid_len = 0;
  
 +	/* Check if VF is disabled. */
 +	if (test_bit(I40E_VF_STATE_DISABLED, &vf->vf_states))
 +		return I40E_ERR_PARAM;
 +
  	/* Validate message length. */
  	switch (v_opcode) {
 -	case VIRTCHNL_OP_VERSION:
 -		valid_len = sizeof(struct virtchnl_version_info);
 +	case I40E_VIRTCHNL_OP_VERSION:
 +		valid_len = sizeof(struct i40e_virtchnl_version_info);
  		break;
 -	case VIRTCHNL_OP_RESET_VF:
 +	case I40E_VIRTCHNL_OP_RESET_VF:
  		break;
++<<<<<<< HEAD
 +	case I40E_VIRTCHNL_OP_GET_VF_RESOURCES:
 +		if (VF_IS_V11(vf))
++=======
+ 	case VIRTCHNL_OP_GET_VF_RESOURCES:
+ 		if (VF_IS_V11(&vf->vf_ver))
++>>>>>>> eedcfef85b15 (virtchnl: convert to new macros)
  			valid_len = sizeof(u32);
  		break;
 -	case VIRTCHNL_OP_CONFIG_TX_QUEUE:
 -		valid_len = sizeof(struct virtchnl_txq_info);
 +	case I40E_VIRTCHNL_OP_CONFIG_TX_QUEUE:
 +		valid_len = sizeof(struct i40e_virtchnl_txq_info);
  		break;
 -	case VIRTCHNL_OP_CONFIG_RX_QUEUE:
 -		valid_len = sizeof(struct virtchnl_rxq_info);
 +	case I40E_VIRTCHNL_OP_CONFIG_RX_QUEUE:
 +		valid_len = sizeof(struct i40e_virtchnl_rxq_info);
  		break;
 -	case VIRTCHNL_OP_CONFIG_VSI_QUEUES:
 -		valid_len = sizeof(struct virtchnl_vsi_queue_config_info);
 +	case I40E_VIRTCHNL_OP_CONFIG_VSI_QUEUES:
 +		valid_len = sizeof(struct i40e_virtchnl_vsi_queue_config_info);
  		if (msglen >= valid_len) {
 -			struct virtchnl_vsi_queue_config_info *vqc =
 -			    (struct virtchnl_vsi_queue_config_info *)msg;
 +			struct i40e_virtchnl_vsi_queue_config_info *vqc =
 +			    (struct i40e_virtchnl_vsi_queue_config_info *)msg;
  			valid_len += (vqc->num_queue_pairs *
  				      sizeof(struct
 -					     virtchnl_queue_pair_info));
 +					     i40e_virtchnl_queue_pair_info));
  			if (vqc->num_queue_pairs == 0)
  				err_msg_format = true;
  		}
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_virtchnl.h
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.c
diff --git a/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.h b/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.h
index 8227923dbc7f..9dcfddacbb0a 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_virtchnl_pf.h
@@ -40,9 +40,6 @@
 #define I40E_VLAN_MASK			0xFFF
 #define I40E_PRIORITY_MASK		0x7000
 
-#define VF_IS_V10(_v) (((_v)->vf_ver.major == 1) && ((_v)->vf_ver.minor == 0))
-#define VF_IS_V11(_v) (((_v)->vf_ver.major == 1) && ((_v)->vf_ver.minor == 1))
-
 /* Various queue ctrls */
 enum i40e_queue_ctrl {
 	I40E_QUEUE_CTRL_UNKNOWN = 0,
