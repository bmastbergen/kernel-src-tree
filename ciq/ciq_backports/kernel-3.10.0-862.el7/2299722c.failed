blk-mq: split the plug and sync cases in blk_mq_make_request

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 2299722c4b117af867425d097e470c8566e0c82e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2299722c.failed

Now that we have a nice direct issue heper this helps simplifying
the code a bit, and also gets rid of the old_rq variable.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 2299722c4b117af867425d097e470c8566e0c82e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index f1314e27e331,a9d2e02a8e02..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -1421,132 -1540,72 +1421,173 @@@ static void blk_mq_make_request(struct 
  	}
  
  	plug = current->plug;
++<<<<<<< HEAD
 +	/*
 +	 * If the driver supports defer issued based on 'last', then
 +	 * queue it up like normal since we can potentially save some
 +	 * CPU this way.
 +	 */
 +	if (((plug && !blk_queue_nomerges(q)) || is_sync) &&
 +	    !(data.hctx->flags & BLK_MQ_F_DEFER_ISSUE)) {
 +		struct request *old_rq = NULL;
 +
++=======
+ 	if (plug && q->nr_hw_queues == 1) {
+ 		struct request *last = NULL;
+ 
+ 		blk_mq_bio_to_request(rq, bio);
+ 
+ 		/*
+ 		 * @request_count may become stale because of schedule
+ 		 * out, so check the list again.
+ 		 */
+ 		if (list_empty(&plug->mq_list))
+ 			request_count = 0;
+ 		else if (blk_queue_nomerges(q))
+ 			request_count = blk_plug_queued_count(q);
+ 
+ 		if (!request_count)
+ 			trace_block_plug(q);
+ 		else
+ 			last = list_entry_rq(plug->mq_list.prev);
+ 
+ 		blk_mq_put_ctx(data.ctx);
+ 
+ 		if (request_count >= BLK_MAX_REQUEST_COUNT || (last &&
+ 		    blk_rq_bytes(last) >= BLK_PLUG_FLUSH_SIZE)) {
+ 			blk_flush_plug_list(plug, false);
+ 			trace_block_plug(q);
+ 		}
+ 
+ 		list_add_tail(&rq->queuelist, &plug->mq_list);
+ 		goto done;
+ 	} else if (plug && !blk_queue_nomerges(q)) {
++>>>>>>> 2299722c4b11 (blk-mq: split the plug and sync cases in blk_mq_make_request)
  		blk_mq_bio_to_request(rq, bio);
  
  		/*
  		 * We do limited plugging. If the bio can be merged, do that.
  		 * Otherwise the existing request in the plug list will be
  		 * issued. So the plug list will have one request at most
+ 		 * The plug list might get flushed before this. If that happens,
+ 		 * the plug list is empty, and same_queue_rq is invalid.
  		 */
- 		if (plug) {
- 			/*
- 			 * The plug list might get flushed before this. If that
- 			 * happens, same_queue_rq is invalid and plug list is
- 			 * empty
- 			 */
- 			if (same_queue_rq && !list_empty(&plug->mq_list)) {
- 				old_rq = same_queue_rq;
- 				list_del_init(&old_rq->queuelist);
- 			}
- 			list_add_tail(&rq->queuelist, &plug->mq_list);
- 		} else /* is_sync */
- 			old_rq = rq;
+ 		if (list_empty(&plug->mq_list))
+ 			same_queue_rq = NULL;
+ 		if (same_queue_rq)
+ 			list_del_init(&same_queue_rq->queuelist);
+ 		list_add_tail(&rq->queuelist, &plug->mq_list);
+ 
  		blk_mq_put_ctx(data.ctx);
++<<<<<<< HEAD
 +		if (!old_rq)
 +			return;
 +
 +		if (!(data.hctx->flags & BLK_MQ_F_BLOCKING)) {
 +			rcu_read_lock();
 +			blk_mq_try_issue_directly(old_rq);
 +			rcu_read_unlock();
 +		} else {
 +			srcu_idx = srcu_read_lock(&data.hctx->queue_rq_srcu);
 +			blk_mq_try_issue_directly(old_rq);
 +			srcu_read_unlock(&data.hctx->queue_rq_srcu, srcu_idx);
 +		}
 +		return;
++=======
+ 		if (same_queue_rq)
+ 			blk_mq_try_issue_directly(data.hctx, same_queue_rq,
+ 					&cookie);
+ 		goto done;
+ 	} else if (is_sync) {
+ 		blk_mq_bio_to_request(rq, bio);
+ 
+ 		blk_mq_put_ctx(data.ctx);
+ 		blk_mq_try_issue_directly(data.hctx, rq, &cookie);
+ 		goto done;
++>>>>>>> 2299722c4b11 (blk-mq: split the plug and sync cases in blk_mq_make_request)
  	}
  
 -	if (q->elevator) {
 -elv_insert:
 -		blk_mq_put_ctx(data.ctx);
 +	if (!blk_mq_merge_queue_io(data.hctx, data.ctx, rq, bio)) {
 +		/*
 +		 * For a SYNC request, send it to the hardware immediately. For
 +		 * an ASYNC request, just ensure that we run it later on. The
 +		 * latter allows for merging opportunities and more efficient
 +		 * dispatching.
 +		 */
 +run_queue:
 +		blk_mq_run_hw_queue(data.hctx, !is_sync || is_flush_fua);
 +	}
 +	blk_mq_put_ctx(data.ctx);
 +}
 +
 +/*
 + * Single hardware queue variant. This will attempt to use any per-process
 + * plug for merging and IO deferral.
 + */
 +static void blk_sq_make_request(struct request_queue *q, struct bio *bio)
 +{
 +	const int is_sync = rw_is_sync(bio->bi_rw);
 +	const int is_flush_fua = bio->bi_rw & (REQ_FLUSH | REQ_FUA);
 +	struct blk_plug *plug;
 +	unsigned int request_count = 0;
 +	struct blk_map_ctx data;
 +	struct request *rq;
 +
 +	blk_queue_bounce(q, &bio);
 +
 +	if (bio_integrity_enabled(bio) && bio_integrity_prep(bio)) {
 +		bio_endio(bio, -EIO);
 +		return;
 +	}
 +
 +	if (!is_flush_fua && !blk_queue_nomerges(q) &&
 +	    blk_attempt_plug_merge(q, bio, &request_count, NULL))
 +		return;
 +
 +	rq = blk_mq_map_request(q, bio, &data);
 +	if (unlikely(!rq))
 +		return;
 +
 +	if (unlikely(is_flush_fua)) {
  		blk_mq_bio_to_request(rq, bio);
 -		blk_mq_sched_insert_request(rq, false, true,
 -						!is_sync || is_flush_fua, true);
 -		goto done;
 +		blk_insert_flush(rq);
 +		goto run_queue;
  	}
 +
 +	/*
 +	 * A task plug currently exists. Since this is completely lockless,
 +	 * utilize that to temporarily store requests until the task is
 +	 * either done or scheduled away.
 +	 */
 +	plug = current->plug;
 +	if (plug) {
 +		struct request *last = NULL;
 +
 +		blk_mq_bio_to_request(rq, bio);
 +
 +		/*
 +		 * @request_count may become stale because of schedule
 +		 * out, so check the list again.
 +		 */
 +		if (list_empty(&plug->mq_list))
 +			request_count = 0;
 +		if (!request_count)
 +			trace_block_plug(q);
 +		else
 +			last = list_entry_rq(plug->mq_list.prev);
 +
 +		blk_mq_put_ctx(data.ctx);
 +
 +		if (request_count >= BLK_MAX_REQUEST_COUNT || (last &&
 +		    blk_rq_bytes(last) >= BLK_PLUG_FLUSH_SIZE)) {
 +			blk_flush_plug_list(plug, false);
 +			trace_block_plug(q);
 +		}
 +
 +		list_add_tail(&rq->queuelist, &plug->mq_list);
 +		return;
 +	}
 +
  	if (!blk_mq_merge_queue_io(data.hctx, data.ctx, rq, bio)) {
  		/*
  		 * For a SYNC request, send it to the hardware immediately. For
* Unmerged path block/blk-mq.c
