cpufreq: intel_pstate: Use locking in intel_pstate_resume()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Use locking in intel_pstate_resume() (Prarit Bhargava) [1465349]
Rebuild_FUZZ: 91.74%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit aa439248ab71bcd2d26a01708dead4dd56616499
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/aa439248.failed

Theoretically, intel_pstate_resume() may be executed in parallel
with intel_pstate_set_policy(), if the latter is invoked via
cpufreq_update_policy() as a result of a notification, so use
intel_pstate_limits_lock in there too to avoid race conditions.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
(cherry picked from commit aa439248ab71bcd2d26a01708dead4dd56616499)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index e5b33d3c3e3c,dc457abb7dab..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -582,6 -892,44 +582,47 @@@ static void intel_pstate_hwp_set(const 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static int intel_pstate_hwp_set_policy(struct cpufreq_policy *policy)
+ {
+ 	if (hwp_active)
+ 		intel_pstate_hwp_set(policy->cpus);
+ 
+ 	return 0;
+ }
+ 
+ static int intel_pstate_hwp_save_state(struct cpufreq_policy *policy)
+ {
+ 	struct cpudata *cpu_data = all_cpu_data[policy->cpu];
+ 
+ 	if (!hwp_active)
+ 		return 0;
+ 
+ 	cpu_data->epp_saved = intel_pstate_get_epp(cpu_data, 0);
+ 
+ 	return 0;
+ }
+ 
+ static int intel_pstate_resume(struct cpufreq_policy *policy)
+ {
+ 	int ret;
+ 
+ 	if (!hwp_active)
+ 		return 0;
+ 
+ 	mutex_lock(&intel_pstate_limits_lock);
+ 
+ 	all_cpu_data[policy->cpu]->epp_policy = 0;
+ 
+ 	ret = intel_pstate_hwp_set_policy(policy);
+ 
+ 	mutex_unlock(&intel_pstate_limits_lock);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> aa439248ab71 (cpufreq: intel_pstate: Use locking in intel_pstate_resume())
  static void intel_pstate_hwp_set_online_cpus(void)
  {
  	get_online_cpus();
* Unmerged path drivers/cpufreq/intel_pstate.c
