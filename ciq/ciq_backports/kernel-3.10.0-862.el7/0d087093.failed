nfp: implement ethtool FEC mode settings

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Dirk van der Merwe <dirk.vandermerwe@netronome.com>
commit 0d08709383377087bc50825db4b47c058c7ab70a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0d087093.failed

Add support in the driver ethtool ops to modify the NFP FEC modes.

The FEC modes can be set for vNIC associated with physical ports or
for MAC representor netdevs.

	Signed-off-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
	Signed-off-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0d08709383377087bc50825db4b47c058c7ab70a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
index 69f458e0de89,60c8d733a37d..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
@@@ -157,10 -229,45 +157,34 @@@ static void nfp_net_get_drvinfo(struct 
  	strlcpy(drvinfo->bus_info, pci_name(nn->pdev),
  		sizeof(drvinfo->bus_info));
  
 -	nfp_get_drvinfo(nn->app, nn->pdev, vnic_version, drvinfo);
 -}
 -
 -static void
 -nfp_app_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
 -{
 -	struct nfp_app *app;
 -
 -	app = nfp_app_from_netdev(netdev);
 -	if (!app)
 -		return;
 -
 -	nfp_get_drvinfo(app, app->pdev, "*", drvinfo);
 +	drvinfo->n_stats = NN_ET_STATS_LEN;
 +	drvinfo->regdump_len = NFP_NET_CFG_BAR_SZ;
  }
  
+ static void
+ nfp_net_set_fec_link_mode(struct nfp_eth_table_port *eth_port,
+ 			  struct ethtool_link_ksettings *c)
+ {
+ 	unsigned int modes;
+ 
+ 	ethtool_link_ksettings_add_link_mode(c, supported, FEC_NONE);
+ 	if (!nfp_eth_can_support_fec(eth_port)) {
+ 		ethtool_link_ksettings_add_link_mode(c, advertising, FEC_NONE);
+ 		return;
+ 	}
+ 
+ 	modes = nfp_eth_supported_fec_modes(eth_port);
+ 	if (modes & NFP_FEC_BASER) {
+ 		ethtool_link_ksettings_add_link_mode(c, supported, FEC_BASER);
+ 		ethtool_link_ksettings_add_link_mode(c, advertising, FEC_BASER);
+ 	}
+ 
+ 	if (modes & NFP_FEC_REED_SOLOMON) {
+ 		ethtool_link_ksettings_add_link_mode(c, supported, FEC_RS);
+ 		ethtool_link_ksettings_add_link_mode(c, advertising, FEC_RS);
+ 	}
+ }
+ 
  /**
   * nfp_net_get_link_ksettings - Get Link Speed settings
   * @netdev:	network interface device structure
@@@ -190,6 -300,14 +214,17 @@@ nfp_net_get_link_ksettings(struct net_d
  	cmd->base.speed = SPEED_UNKNOWN;
  	cmd->base.duplex = DUPLEX_UNKNOWN;
  
++<<<<<<< HEAD
++=======
+ 	port = nfp_port_from_netdev(netdev);
+ 	eth_port = nfp_port_get_eth_port(port);
+ 	if (eth_port) {
+ 		cmd->base.autoneg = eth_port->aneg != NFP_ANEG_DISABLED ?
+ 			AUTONEG_ENABLE : AUTONEG_DISABLE;
+ 		nfp_net_set_fec_link_mode(eth_port, cmd);
+ 	}
+ 
++>>>>>>> 0d0870938337 (nfp: implement ethtool FEC mode settings)
  	if (!netif_carrier_ok(netdev))
  		return 0;
  
@@@ -905,8 -1255,25 +1025,28 @@@ static const struct ethtool_ops nfp_net
  	.set_channels		= nfp_net_set_channels,
  	.get_link_ksettings	= nfp_net_get_link_ksettings,
  	.set_link_ksettings	= nfp_net_set_link_ksettings,
+ 	.get_fecparam		= nfp_port_get_fecparam,
+ 	.set_fecparam		= nfp_port_set_fecparam,
+ };
+ 
++<<<<<<< HEAD
++=======
+ const struct ethtool_ops nfp_port_ethtool_ops = {
+ 	.get_drvinfo		= nfp_app_get_drvinfo,
+ 	.get_link		= ethtool_op_get_link,
+ 	.get_strings		= nfp_port_get_strings,
+ 	.get_ethtool_stats	= nfp_port_get_stats,
+ 	.get_sset_count		= nfp_port_get_sset_count,
+ 	.set_dump		= nfp_app_set_dump,
+ 	.get_dump_flag		= nfp_app_get_dump_flag,
+ 	.get_dump_data		= nfp_app_get_dump_data,
+ 	.get_link_ksettings	= nfp_net_get_link_ksettings,
+ 	.set_link_ksettings	= nfp_net_set_link_ksettings,
+ 	.get_fecparam		= nfp_port_get_fecparam,
+ 	.set_fecparam		= nfp_port_set_fecparam,
  };
  
++>>>>>>> 0d0870938337 (nfp: implement ethtool FEC mode settings)
  void nfp_net_set_ethtool_ops(struct net_device *netdev)
  {
  	netdev->ethtool_ops = &nfp_net_ethtool_ops;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
