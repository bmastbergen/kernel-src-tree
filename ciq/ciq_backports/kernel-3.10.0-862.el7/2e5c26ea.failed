i40e: clear only cause_ena bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Shannon Nelson <shannon.nelson@intel.com>
commit 2e5c26ea0d0843074a1b8c868aae5c828c155569
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2e5c26ea.failed

When disabling interrupts, we should only be clearing the CAUSE_ENA bit,
not clearing the whole register.  Clearing the whole register sets the
NEXTQ_IDX field to 0 instead of 0x7ff which can confuse the Firmware in
some reset sequences.

	Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
	Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 2e5c26ea0d0843074a1b8c868aae5c828c155569)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 39821eb982b6,5d82ff54c7b0..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -3601,11 -3588,24 +3601,29 @@@ static void i40e_vsi_disable_irq(struc
  	int base = vsi->base_vector;
  	int i;
  
+ 	/* disable interrupt causation from each queue */
  	for (i = 0; i < vsi->num_queue_pairs; i++) {
++<<<<<<< HEAD
 +		wr32(hw, I40E_QINT_TQCTL(vsi->tx_rings[i]->reg_idx), 0);
 +		wr32(hw, I40E_QINT_RQCTL(vsi->rx_rings[i]->reg_idx), 0);
++=======
+ 		u32 val;
+ 
+ 		val = rd32(hw, I40E_QINT_TQCTL(vsi->tx_rings[i]->reg_idx));
+ 		val &= ~I40E_QINT_TQCTL_CAUSE_ENA_MASK;
+ 		wr32(hw, I40E_QINT_TQCTL(vsi->tx_rings[i]->reg_idx), val);
+ 
+ 		val = rd32(hw, I40E_QINT_RQCTL(vsi->rx_rings[i]->reg_idx));
+ 		val &= ~I40E_QINT_RQCTL_CAUSE_ENA_MASK;
+ 		wr32(hw, I40E_QINT_RQCTL(vsi->rx_rings[i]->reg_idx), val);
+ 
+ 		if (!i40e_enabled_xdp_vsi(vsi))
+ 			continue;
+ 		wr32(hw, I40E_QINT_TQCTL(vsi->xdp_rings[i]->reg_idx), 0);
++>>>>>>> 2e5c26ea0d08 (i40e: clear only cause_ena bit)
  	}
  
+ 	/* disable each interrupt */
  	if (pf->flags & I40E_FLAG_MSIX_ENABLED) {
  		for (i = vsi->base_vector;
  		     i < (vsi->num_q_vectors + vsi->base_vector); i++)
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
