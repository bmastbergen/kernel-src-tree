sysctl: check for UINT_MAX before unsigned int min/max

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Joe Lawrence <joe.lawrence@redhat.com>
commit fb910c42ccebf853c29296185c45c11164a56098
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/fb910c42.failed

Mikulas noticed in the existing do_proc_douintvec_minmax_conv() and
do_proc_dopipe_max_size_conv() introduced in this patchset, that they
inconsistently handle overflow and min/max range inputs:

For example:

  0 ... param->min - 1 ---> ERANGE
  param->min ... param->max ---> the value is accepted
  param->max + 1 ... 0x100000000L + param->min - 1 ---> ERANGE
  0x100000000L + param->min ... 0x100000000L + param->max ---> EINVAL
  0x100000000L + param->max + 1, 0x200000000L + param->min - 1 ---> ERANGE
  0x200000000L + param->min ... 0x200000000L + param->max ---> EINVAL
  0x200000000L + param->max + 1, 0x300000000L + param->min - 1 ---> ERANGE

In do_proc_do*() routines which store values into unsigned int variables
(4 bytes wide for 64-bit builds), first validate that the input unsigned
long value (8 bytes wide for 64-bit builds) will fit inside the smaller
unsigned int variable.  Then check that the unsigned int value falls
inside the specified parameter min, max range.  Otherwise the unsigned
long -> unsigned int conversion drops leading bits from the input value,
leading to the inconsistent pattern Mikulas documented above.

Link: http://lkml.kernel.org/r/1507658689-11669-5-git-send-email-joe.lawrence@redhat.com
	Signed-off-by: Joe Lawrence <joe.lawrence@redhat.com>
	Reported-by: Mikulas Patocka <mpatocka@redhat.com>
	Reviewed-by: Mikulas Patocka <mpatocka@redhat.com>
	Cc: Al Viro <viro@zeniv.linux.org.uk>
	Cc: Jens Axboe <axboe@kernel.dk>
	Cc: Michael Kerrisk <mtk.manpages@gmail.com>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit fb910c42ccebf853c29296185c45c11164a56098)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sysctl.c
diff --cc kernel/sysctl.c
index 03946f49a1c4,dd25d90896fc..000000000000
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@@ -2510,6 -2622,48 +2511,51 @@@ int proc_douintvec_minmax(struct ctl_ta
  				 do_proc_douintvec_minmax_conv, &param);
  }
  
++<<<<<<< HEAD
++=======
+ struct do_proc_dopipe_max_size_conv_param {
+ 	unsigned int *min;
+ };
+ 
+ static int do_proc_dopipe_max_size_conv(unsigned long *lvalp,
+ 					unsigned int *valp,
+ 					int write, void *data)
+ {
+ 	struct do_proc_dopipe_max_size_conv_param *param = data;
+ 
+ 	if (write) {
+ 		unsigned int val;
+ 
+ 		if (*lvalp > UINT_MAX)
+ 			return -EINVAL;
+ 
+ 		val = round_pipe_size(*lvalp);
+ 		if (val == 0)
+ 			return -EINVAL;
+ 
+ 		if (param->min && *param->min > val)
+ 			return -ERANGE;
+ 
+ 		*valp = val;
+ 	} else {
+ 		unsigned int val = *valp;
+ 		*lvalp = (unsigned long) val;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ int proc_dopipe_max_size(struct ctl_table *table, int write,
+ 			 void __user *buffer, size_t *lenp, loff_t *ppos)
+ {
+ 	struct do_proc_dopipe_max_size_conv_param param = {
+ 		.min = (unsigned int *) table->extra1,
+ 	};
+ 	return do_proc_douintvec(table, write, buffer, lenp, ppos,
+ 				 do_proc_dopipe_max_size_conv, &param);
+ }
+ 
++>>>>>>> fb910c42cceb (sysctl: check for UINT_MAX before unsigned int min/max)
  static void validate_coredump_safety(void)
  {
  #ifdef CONFIG_COREDUMP
* Unmerged path kernel/sysctl.c
