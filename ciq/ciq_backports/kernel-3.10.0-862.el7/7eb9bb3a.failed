bnxt_en: Check maximum supported MTU from firmware.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Check maximum supported MTU from firmware (Jonathan Toppins) [1459659]
Rebuild_FUZZ: 99.01%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 7eb9bb3a0c7c29741df2249cc3b99f06a7978d61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7eb9bb3a.failed

Some NICs have a firmware enforced maximum MTU setting by management
firmware.  Set up netdev->max_mtu accordingly.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 7eb9bb3a0c7c29741df2249cc3b99f06a7978d61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index c325a10cc99e,285863ba51a3..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -2633,10 -2830,25 +2633,30 @@@ void bnxt_set_ring_params(struct bnxt *
  	bp->cp_ring_mask = bp->cp_bit - 1;
  }
  
 -int bnxt_set_rx_skb_mode(struct bnxt *bp, bool page_mode)
 +static int bnxt_set_rx_skb_mode(struct bnxt *bp)
  {
++<<<<<<< HEAD
 +	bp->rx_dir = DMA_FROM_DEVICE;
 +	bp->rx_skb_func = bnxt_rx_skb;
++=======
+ 	if (page_mode) {
+ 		if (bp->dev->mtu > BNXT_MAX_PAGE_MODE_MTU)
+ 			return -EOPNOTSUPP;
+ 		bp->dev->max_mtu =
+ 			min_t(u16, bp->max_mtu, BNXT_MAX_PAGE_MODE_MTU);
+ 		bp->flags &= ~BNXT_FLAG_AGG_RINGS;
+ 		bp->flags |= BNXT_FLAG_NO_AGG_RINGS | BNXT_FLAG_RX_PAGE_MODE;
+ 		bp->dev->hw_features &= ~NETIF_F_LRO;
+ 		bp->dev->features &= ~NETIF_F_LRO;
+ 		bp->rx_dir = DMA_BIDIRECTIONAL;
+ 		bp->rx_skb_func = bnxt_rx_page_skb;
+ 	} else {
+ 		bp->dev->max_mtu = bp->max_mtu;
+ 		bp->flags &= ~BNXT_FLAG_RX_PAGE_MODE;
+ 		bp->rx_dir = DMA_FROM_DEVICE;
+ 		bp->rx_skb_func = bnxt_rx_skb;
+ 	}
++>>>>>>> 7eb9bb3a0c7c (bnxt_en: Check maximum supported MTU from firmware.)
  	return 0;
  }
  
@@@ -7583,9 -8144,18 +7607,21 @@@ static int bnxt_init_one(struct pci_de
  
  	bnxt_hwrm_func_qcfg(bp);
  	bnxt_hwrm_port_led_qcaps(bp);
 -	bnxt_ethtool_init(bp);
  	bnxt_dcb_init(bp);
  
++<<<<<<< HEAD
 +	bnxt_set_rx_skb_mode(bp);
++=======
+ 	/* MTU range: 60 - FW defined max */
+ 	dev->min_mtu = ETH_ZLEN;
+ 	dev->max_mtu = bp->max_mtu;
+ 
+ 	rc = bnxt_probe_phy(bp);
+ 	if (rc)
+ 		goto init_err_pci_clean;
+ 
+ 	bnxt_set_rx_skb_mode(bp, false);
++>>>>>>> 7eb9bb3a0c7c (bnxt_en: Check maximum supported MTU from firmware.)
  	bnxt_set_tpa_flags(bp);
  	bnxt_set_ring_params(bp);
  	bnxt_set_max_func_irqs(bp, max_irqs);
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.h b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
index db9012ea3731..d35d3e5869d2 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@ -1077,6 +1077,7 @@ struct bnxt {
 	int			nr_vnics;
 	u32			rss_hash_cfg;
 
+	u16			max_mtu;
 	u8			max_tc;
 	u8			max_lltc;	/* lossless TCs */
 	struct bnxt_queue_info	q_info[BNXT_MAX_QUEUE];
