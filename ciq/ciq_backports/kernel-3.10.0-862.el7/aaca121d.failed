mlx4: get rid of frag_prefix_size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric Dumazet <edumazet@google.com>
commit aaca121dd6cfedc9afb9d0ee23ded9d84e217e20
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/aaca121d.failed

Using per frag storage for frag_prefix_size is really silly.

mlx4_en_complete_rx_desc() has all needed info already.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit aaca121dd6cfedc9afb9d0ee23ded9d84e217e20)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_rx.c
#	drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
diff --cc drivers/net/ethernet/mellanox/mlx4/en_rx.c
index 984f22166c89,118ea83cff08..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
@@@ -1138,28 -1187,39 +1138,60 @@@ static const int frag_sizes[] = 
  
  void mlx4_en_calc_rx_buf(struct net_device *dev)
  {
 +	enum dma_data_direction dma_dir = PCI_DMA_FROMDEVICE;
  	struct mlx4_en_priv *priv = netdev_priv(dev);
 -	int eff_mtu = MLX4_EN_EFF_MTU(dev->mtu);
 +	/* VLAN_HLEN is added twice,to support skb vlan tagged with multiple
 +	 * headers. (For example: ETH_P_8021Q and ETH_P_8021AD).
 +	 */
 +	int eff_mtu = dev->mtu + ETH_HLEN + (2 * VLAN_HLEN);
 +	int order = MLX4_EN_ALLOC_PREFER_ORDER;
 +	u32 align = SMP_CACHE_BYTES;
 +	int buf_size = 0;
  	int i = 0;
  
++<<<<<<< HEAD
 +	while (buf_size < eff_mtu) {
 +		priv->frag_info[i].order = order;
 +		priv->frag_info[i].frag_size =
 +			(eff_mtu > buf_size + frag_sizes[i]) ?
 +				frag_sizes[i] : eff_mtu - buf_size;
 +		priv->frag_info[i].frag_prefix_size = buf_size;
 +		priv->frag_info[i].frag_stride =
 +				ALIGN(priv->frag_info[i].frag_size, align);
 +		priv->frag_info[i].dma_dir = dma_dir;
 +		buf_size += priv->frag_info[i].frag_size;
 +		i++;
++=======
+ 	/* bpf requires buffers to be set up as 1 packet per page.
+ 	 * This only works when num_frags == 1.
+ 	 */
+ 	if (priv->tx_ring_num[TX_XDP]) {
+ 		priv->rx_page_order = 0;
+ 		priv->frag_info[0].frag_size = eff_mtu;
+ 		/* This will gain efficient xdp frame recycling at the
+ 		 * expense of more costly truesize accounting
+ 		 */
+ 		priv->frag_info[0].frag_stride = PAGE_SIZE;
+ 		priv->dma_dir = PCI_DMA_BIDIRECTIONAL;
+ 		priv->frag_info[0].rx_headroom = XDP_PACKET_HEADROOM;
+ 		i = 1;
+ 	} else {
+ 		int buf_size = 0;
+ 
+ 		while (buf_size < eff_mtu) {
+ 			priv->frag_info[i].frag_size =
+ 				(eff_mtu > buf_size + frag_sizes[i]) ?
+ 					frag_sizes[i] : eff_mtu - buf_size;
+ 			priv->frag_info[i].frag_stride =
+ 				ALIGN(priv->frag_info[i].frag_size,
+ 				      SMP_CACHE_BYTES);
+ 			priv->frag_info[i].rx_headroom = 0;
+ 			buf_size += priv->frag_info[i].frag_size;
+ 			i++;
+ 		}
+ 		priv->rx_page_order = MLX4_EN_ALLOC_PREFER_ORDER;
+ 		priv->dma_dir = PCI_DMA_FROMDEVICE;
++>>>>>>> aaca121dd6cf (mlx4: get rid of frag_prefix_size)
  	}
  
  	priv->num_frags = i;
@@@ -1169,12 -1229,10 +1201,16 @@@
  	en_dbg(DRV, priv, "Rx buffer scatter-list (effective-mtu:%d num_frags:%d):\n",
  	       eff_mtu, priv->num_frags);
  	for (i = 0; i < priv->num_frags; i++) {
++<<<<<<< HEAD
 +		en_dbg(DRV,
 +		       priv,
 +		       "  frag:%d - size:%d prefix:%d stride:%d\n",
++=======
+ 		en_err(priv,
+ 		       "  frag:%d - size:%d stride:%d\n",
++>>>>>>> aaca121dd6cf (mlx4: get rid of frag_prefix_size)
  		       i,
  		       priv->frag_info[i].frag_size,
- 		       priv->frag_info[i].frag_prefix_size,
  		       priv->frag_info[i].frag_stride);
  	}
  }
diff --cc drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index d8f46d99701e,849aa8af4dd7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@@ -472,10 -472,8 +472,15 @@@ struct mlx4_en_mc_list 
  
  struct mlx4_en_frag_info {
  	u16 frag_size;
++<<<<<<< HEAD
 +	u16 frag_prefix_size;
 +	u32 frag_stride;
 +	enum dma_data_direction dma_dir;
 +	int order;
++=======
+ 	u16 rx_headroom;
+ 	u32 frag_stride;
++>>>>>>> aaca121dd6cf (mlx4: get rid of frag_prefix_size)
  };
  
  #ifdef CONFIG_MLX4_EN_DCB
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_rx.c
* Unmerged path drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
