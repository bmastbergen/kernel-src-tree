md: don't call bitmap_create() while array is quiesced.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [md] don't call bitmap_create() while array is quiesced (Nigel Croxon) [1506338]
Rebuild_FUZZ: 95.24%
commit-author NeilBrown <neilb@suse.com>
commit 52a0d49de3d592a3118e13f35985e3d99eaf43df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/52a0d49d.failed

bitmap_create() allocates memory with GFP_KERNEL and
so can wait for IO.
If called while the array is quiesced, it could wait indefinitely
for write out to the array - deadlock.
So call bitmap_create() before quiescing the array.

	Signed-off-by: NeilBrown <neilb@suse.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit 52a0d49de3d592a3118e13f35985e3d99eaf43df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
diff --cc drivers/md/md.c
index 4c75b0e4a2a4,2cb49f639809..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -6396,17 -6621,26 +6396,34 @@@ static int set_bitmap_file(struct mdde
  		return -ENOENT; /* cannot remove what isn't there */
  	err = 0;
  	if (mddev->pers) {
- 		mddev->pers->quiesce(mddev, 1);
  		if (fd >= 0) {
++<<<<<<< HEAD
 +			err = bitmap_create(mddev);
 +			if (!err)
 +				err = bitmap_load(mddev);
 +		}
 +		if (fd < 0 || err) {
++=======
+ 			struct bitmap *bitmap;
+ 
+ 			bitmap = bitmap_create(mddev, -1);
+ 			mddev->pers->quiesce(mddev, 1);
+ 			if (!IS_ERR(bitmap)) {
+ 				mddev->bitmap = bitmap;
+ 				err = bitmap_load(mddev);
+ 			} else
+ 				err = PTR_ERR(bitmap);
+ 			if (err) {
+ 				bitmap_destroy(mddev);
+ 				fd = -1;
+ 			}
+ 			mddev->pers->quiesce(mddev, 0);
+ 		} else if (fd < 0) {
+ 			mddev->pers->quiesce(mddev, 1);
++>>>>>>> 52a0d49de3d5 (md: don't call bitmap_create() while array is quiesced.)
  			bitmap_destroy(mddev);
- 			fd = -1; /* make sure to put the file */
+ 			mddev->pers->quiesce(mddev, 0);
  		}
- 		mddev->pers->quiesce(mddev, 0);
  	}
  	if (fd < 0) {
  		struct file *f = mddev->bitmap_info.file;
@@@ -6675,10 -6924,13 +6692,17 @@@ static int update_array_info(struct mdd
  				mddev->bitmap_info.default_offset;
  			mddev->bitmap_info.space =
  				mddev->bitmap_info.default_space;
++<<<<<<< HEAD
 +			mddev->pers->quiesce(mddev, 1);
 +			rv = bitmap_create(mddev);
 +			if (!rv)
++=======
+ 			bitmap = bitmap_create(mddev, -1);
+ 			mddev->pers->quiesce(mddev, 1);
+ 			if (!IS_ERR(bitmap)) {
+ 				mddev->bitmap = bitmap;
++>>>>>>> 52a0d49de3d5 (md: don't call bitmap_create() while array is quiesced.)
  				rv = bitmap_load(mddev);
 -			} else
 -				rv = PTR_ERR(bitmap);
  			if (rv)
  				bitmap_destroy(mddev);
  			mddev->pers->quiesce(mddev, 0);
* Unmerged path drivers/md/md.c
