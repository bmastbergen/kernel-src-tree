tools/power turbostat: update --list feature

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [tools] power turbostat: update --list feature (Prarit Bhargava) [1514290]
Rebuild_FUZZ: 92.68%
commit-author Len Brown <len.brown@intel.com>
commit 6168c2e0fb5084d187aa8f3ec4093db5e161d4dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6168c2e0.failed

Make it possible to take the entire un-edited output
from `turbostat --list` and feed it to "turbostat --show"
or "turbostat --hide".

To do this, the leading comma was removed
(no mater what columns are active)
and also they dynamic C-state "C1, C2, C3" etc are replaced
by the string "sysfs", which refers to them as a group.

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 6168c2e0fb5084d187aa8f3ec4093db5e161d4dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index 416137df44fe,851eaf06f358..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -459,54 -471,68 +459,103 @@@ unsigned long long bic_lookup(char *nam
  	return retval;
  }
  
 -void print_header(char *delim)
 +void print_header(void)
  {
  	struct msr_counter *mp;
+ 	int printed = 0;
  
  	if (DO_BIC(BIC_Package))
++<<<<<<< HEAD
 +		outp += sprintf(outp, "\tPackage");
 +	if (DO_BIC(BIC_Core))
 +		outp += sprintf(outp, "\tCore");
 +	if (DO_BIC(BIC_CPU))
 +		outp += sprintf(outp, "\tCPU");
 +	if (DO_BIC(BIC_Avg_MHz))
 +		outp += sprintf(outp, "\tAvg_MHz");
 +	if (DO_BIC(BIC_Busy))
 +		outp += sprintf(outp, "\tBusy%%");
 +	if (DO_BIC(BIC_Bzy_MHz))
 +		outp += sprintf(outp, "\tBzy_MHz");
 +	if (DO_BIC(BIC_TSC_MHz))
 +		outp += sprintf(outp, "\tTSC_MHz");
++=======
+ 		outp += sprintf(outp, "%sPackage", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Core))
+ 		outp += sprintf(outp, "%sCore", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_CPU))
+ 		outp += sprintf(outp, "%sCPU", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Avg_MHz))
+ 		outp += sprintf(outp, "%sAvg_MHz", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Busy))
+ 		outp += sprintf(outp, "%sBusy%%", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Bzy_MHz))
+ 		outp += sprintf(outp, "%sBzy_MHz", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_TSC_MHz))
+ 		outp += sprintf(outp, "%sTSC_MHz", (printed++ ? delim : ""));
+ 
+ 	if (DO_BIC(BIC_IRQ)) {
+ 		if (sums_need_wide_columns)
+ 			outp += sprintf(outp, "%s     IRQ", (printed++ ? delim : ""));
+ 		else
+ 			outp += sprintf(outp, "%sIRQ", (printed++ ? delim : ""));
+ 	}
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  
 +	if (DO_BIC(BIC_IRQ))
 +		outp += sprintf(outp, "\tIRQ");
  	if (DO_BIC(BIC_SMI))
++<<<<<<< HEAD
 +		outp += sprintf(outp, "\tSMI");
 +
 +	if (DO_BIC(BIC_CPU_c1))
 +		outp += sprintf(outp, "\tCPU%%c1");
++=======
+ 		outp += sprintf(outp, "%sSMI", (printed++ ? delim : ""));
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  
  	for (mp = sys.tp; mp; mp = mp->next) {
+ 		if (*delim == ',') {
+ 			outp += sprintf(outp, "%s%s", (printed++ ? delim : ""), "sysfs");
+ 			break;
+ 		}
  		if (mp->format == FORMAT_RAW) {
  			if (mp->width == 64)
 -				outp += sprintf(outp, "%s%18.18s", delim, mp->name);
 +				outp += sprintf(outp, "\t%18.18s", mp->name);
  			else
 -				outp += sprintf(outp, "%s%10.10s", delim, mp->name);
 +				outp += sprintf(outp, "\t%10.10s", mp->name);
  		} else {
 -			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
 -				outp += sprintf(outp, "%s%8s", delim, mp->name);
 -			else
 -				outp += sprintf(outp, "%s%s", delim, mp->name);
 +			outp += sprintf(outp, "\t%-7.7s", mp->name);
  		}
  	}
  
++<<<<<<< HEAD
 +	if (DO_BIC(BIC_CPU_c3) && !do_slm_cstates && !do_knl_cstates)
 +		outp += sprintf(outp, "\tCPU%%c3");
 +	if (DO_BIC(BIC_CPU_c6))
 +		outp += sprintf(outp, "\tCPU%%c6");
 +	if (DO_BIC(BIC_CPU_c7))
 +		outp += sprintf(outp, "\tCPU%%c7");
 +
 +
 +	if (DO_BIC(BIC_CoreTmp))
 +		outp += sprintf(outp, "\tCoreTmp");
++=======
+ 	if (DO_BIC(BIC_CPU_c1))
+ 		outp += sprintf(outp, "%sCPU%%c1", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_CPU_c3) && !do_slm_cstates && !do_knl_cstates)
+ 		outp += sprintf(outp, "%sCPU%%c3", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_CPU_c6))
+ 		outp += sprintf(outp, "%sCPU%%c6", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_CPU_c7))
+ 		outp += sprintf(outp, "%sCPU%%c7", (printed++ ? delim : ""));
+ 
+ 	if (DO_BIC(BIC_Mod_c6))
+ 		outp += sprintf(outp, "%sMod%%c6", (printed++ ? delim : ""));
+ 
+ 	if (DO_BIC(BIC_CoreTmp))
+ 		outp += sprintf(outp, "%sCoreTmp", (printed++ ? delim : ""));
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  
  	for (mp = sys.cp; mp; mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
@@@ -520,62 -549,62 +569,121 @@@
  	}
  
  	if (DO_BIC(BIC_PkgTmp))
++<<<<<<< HEAD
 +		outp += sprintf(outp, "\tPkgTmp");
 +
 +	if (DO_BIC(BIC_GFX_rc6))
 +		outp += sprintf(outp, "\tGFX%%rc6");
 +
 +	if (DO_BIC(BIC_GFXMHz))
 +		outp += sprintf(outp, "\tGFXMHz");
 +
 +	if (do_skl_residency) {
 +		outp += sprintf(outp, "\tTotl%%C0");
 +		outp += sprintf(outp, "\tAny%%C0");
 +		outp += sprintf(outp, "\tGFX%%C0");
 +		outp += sprintf(outp, "\tCPUGFX%%");
 +	}
 +
 +	if (DO_BIC(BIC_Pkgpc2))
 +		outp += sprintf(outp, "\tPkg%%pc2");
 +	if (DO_BIC(BIC_Pkgpc3))
 +		outp += sprintf(outp, "\tPkg%%pc3");
 +	if (DO_BIC(BIC_Pkgpc6))
 +		outp += sprintf(outp, "\tPkg%%pc6");
 +	if (DO_BIC(BIC_Pkgpc7))
 +		outp += sprintf(outp, "\tPkg%%pc7");
 +	if (DO_BIC(BIC_Pkgpc8))
 +		outp += sprintf(outp, "\tPkg%%pc8");
 +	if (DO_BIC(BIC_Pkgpc9))
 +		outp += sprintf(outp, "\tPkg%%pc9");
 +	if (DO_BIC(BIC_Pkgpc10))
 +		outp += sprintf(outp, "\tPk%%pc10");
 +
 +	if (do_rapl && !rapl_joules) {
 +		if (DO_BIC(BIC_PkgWatt))
 +			outp += sprintf(outp, "\tPkgWatt");
 +		if (DO_BIC(BIC_CorWatt))
 +			outp += sprintf(outp, "\tCorWatt");
 +		if (DO_BIC(BIC_GFXWatt))
 +			outp += sprintf(outp, "\tGFXWatt");
 +		if (DO_BIC(BIC_RAMWatt))
 +			outp += sprintf(outp, "\tRAMWatt");
 +		if (DO_BIC(BIC_PKG__))
 +			outp += sprintf(outp, "\tPKG_%%");
 +		if (DO_BIC(BIC_RAM__))
 +			outp += sprintf(outp, "\tRAM_%%");
 +	} else if (do_rapl && rapl_joules) {
 +		if (DO_BIC(BIC_Pkg_J))
 +			outp += sprintf(outp, "\tPkg_J");
 +		if (DO_BIC(BIC_Cor_J))
 +			outp += sprintf(outp, "\tCor_J");
 +		if (DO_BIC(BIC_GFX_J))
 +			outp += sprintf(outp, "\tGFX_J");
 +		if (DO_BIC(BIC_RAM_J))
 +			outp += sprintf(outp, "\tRAM_J");
 +		if (DO_BIC(BIC_PKG__))
 +			outp += sprintf(outp, "\tPKG_%%");
 +		if (DO_BIC(BIC_RAM__))
 +			outp += sprintf(outp, "\tRAM_%%");
++=======
+ 		outp += sprintf(outp, "%sPkgTmp", (printed++ ? delim : ""));
+ 
+ 	if (DO_BIC(BIC_GFX_rc6))
+ 		outp += sprintf(outp, "%sGFX%%rc6", (printed++ ? delim : ""));
+ 
+ 	if (DO_BIC(BIC_GFXMHz))
+ 		outp += sprintf(outp, "%sGFXMHz", (printed++ ? delim : ""));
+ 
+ 	if (do_skl_residency) {
+ 		outp += sprintf(outp, "%sTotl%%C0", (printed++ ? delim : ""));
+ 		outp += sprintf(outp, "%sAny%%C0", (printed++ ? delim : ""));
+ 		outp += sprintf(outp, "%sGFX%%C0", (printed++ ? delim : ""));
+ 		outp += sprintf(outp, "%sCPUGFX%%", (printed++ ? delim : ""));
+ 	}
+ 
+ 	if (DO_BIC(BIC_Pkgpc2))
+ 		outp += sprintf(outp, "%sPkg%%pc2", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Pkgpc3))
+ 		outp += sprintf(outp, "%sPkg%%pc3", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Pkgpc6))
+ 		outp += sprintf(outp, "%sPkg%%pc6", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Pkgpc7))
+ 		outp += sprintf(outp, "%sPkg%%pc7", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Pkgpc8))
+ 		outp += sprintf(outp, "%sPkg%%pc8", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Pkgpc9))
+ 		outp += sprintf(outp, "%sPkg%%pc9", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Pkgpc10))
+ 		outp += sprintf(outp, "%sPk%%pc10", (printed++ ? delim : ""));
+ 
+ 	if (do_rapl && !rapl_joules) {
+ 		if (DO_BIC(BIC_PkgWatt))
+ 			outp += sprintf(outp, "%sPkgWatt", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_CorWatt))
+ 			outp += sprintf(outp, "%sCorWatt", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_GFXWatt))
+ 			outp += sprintf(outp, "%sGFXWatt", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_RAMWatt))
+ 			outp += sprintf(outp, "%sRAMWatt", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_PKG__))
+ 			outp += sprintf(outp, "%sPKG_%%", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_RAM__))
+ 			outp += sprintf(outp, "%sRAM_%%", (printed++ ? delim : ""));
+ 	} else if (do_rapl && rapl_joules) {
+ 		if (DO_BIC(BIC_Pkg_J))
+ 			outp += sprintf(outp, "%sPkg_J", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_Cor_J))
+ 			outp += sprintf(outp, "%sCor_J", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_GFX_J))
+ 			outp += sprintf(outp, "%sGFX_J", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_RAM_J))
+ 			outp += sprintf(outp, "%sRAM_J", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_PKG__))
+ 			outp += sprintf(outp, "%sPKG_%%", (printed++ ? delim : ""));
+ 		if (DO_BIC(BIC_RAM__))
+ 			outp += sprintf(outp, "%sRAM_%%", (printed++ ? delim : ""));
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  	}
  	for (mp = sys.pp; mp; mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
@@@ -720,69 -763,87 +830,128 @@@ int format_counters(struct thread_data 
  			1.0 / units * t->aperf / interval_float);
  
  	if (DO_BIC(BIC_Busy))
++<<<<<<< HEAD
 +		outp += sprintf(outp, "\t%.2f", 100.0 * t->mperf/t->tsc/tsc_tweak);
++=======
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * t->mperf/tsc);
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  
  	if (DO_BIC(BIC_Bzy_MHz)) {
  		if (has_base_hz)
- 			outp += sprintf(outp, "\t%.0f", base_hz / units * t->aperf / t->mperf);
+ 			outp += sprintf(outp, "%s%.0f", (printed++ ? delim : ""), base_hz / units * t->aperf / t->mperf);
  		else
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%.0f",
 +				1.0 * t->tsc / units * t->aperf / t->mperf / interval_float);
++=======
+ 			outp += sprintf(outp, "%s%.0f", (printed++ ? delim : ""),
+ 				tsc / units * t->aperf / t->mperf / interval_float);
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  	}
  
  	if (DO_BIC(BIC_TSC_MHz))
- 		outp += sprintf(outp, "\t%.0f", 1.0 * t->tsc/units/interval_float);
+ 		outp += sprintf(outp, "%s%.0f", (printed++ ? delim : ""), 1.0 * t->tsc/units/interval_float);
  
  	/* IRQ */
++<<<<<<< HEAD
 +	if (DO_BIC(BIC_IRQ))
 +		outp += sprintf(outp, "\t%d", t->irq_count);
++=======
+ 	if (DO_BIC(BIC_IRQ)) {
+ 		if (sums_need_wide_columns)
+ 			outp += sprintf(outp, "%s%8lld", (printed++ ? delim : ""), t->irq_count);
+ 		else
+ 			outp += sprintf(outp, "%s%lld", (printed++ ? delim : ""), t->irq_count);
+ 	}
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  
  	/* SMI */
  	if (DO_BIC(BIC_SMI))
- 		outp += sprintf(outp, "\t%d", t->smi_count);
+ 		outp += sprintf(outp, "%s%d", (printed++ ? delim : ""), t->smi_count);
  
 +	/* C1 */
 +	if (DO_BIC(BIC_CPU_c1))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * t->c1/t->tsc);
 +
  	/* Added counters */
  	for (i = 0, mp = sys.tp; mp; i++, mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
  			if (mp->width == 32)
- 				outp += sprintf(outp, "\t0x%08lx", (unsigned long) t->counter[i]);
+ 				outp += sprintf(outp, "%s0x%08lx", (printed++ ? delim : ""), (unsigned long) t->counter[i]);
  			else
- 				outp += sprintf(outp, "\t0x%016llx", t->counter[i]);
+ 				outp += sprintf(outp, "%s0x%016llx", (printed++ ? delim : ""), t->counter[i]);
  		} else if (mp->format == FORMAT_DELTA) {
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%lld", t->counter[i]);
 +		} else if (mp->format == FORMAT_PERCENT) {
 +			outp += sprintf(outp, "\t%.2f", 100.0 * t->counter[i]/t->tsc);
 +		}
 +	}
 +
++=======
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "%s%8lld", (printed++ ? delim : ""), t->counter[i]);
+ 			else
+ 				outp += sprintf(outp, "%s%lld", (printed++ ? delim : ""), t->counter[i]);
+ 		} else if (mp->format == FORMAT_PERCENT) {
+ 			if (mp->type == COUNTER_USEC)
+ 				outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), t->counter[i]/interval_float/10000);
+ 			else
+ 				outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * t->counter[i]/tsc);
+ 		}
+ 	}
+ 
+ 	/* C1 */
+ 	if (DO_BIC(BIC_CPU_c1))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * t->c1/tsc);
+ 
+ 
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  	/* print per-core data only for 1st thread in core */
  	if (!(t->flags & CPU_IS_FIRST_THREAD_IN_CORE))
  		goto done;
  
  	if (DO_BIC(BIC_CPU_c3) && !do_slm_cstates && !do_knl_cstates)
++<<<<<<< HEAD
 +		outp += sprintf(outp, "\t%.2f", 100.0 * c->c3/t->tsc);
 +	if (DO_BIC(BIC_CPU_c6))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * c->c6/t->tsc);
 +	if (DO_BIC(BIC_CPU_c7))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * c->c7/t->tsc);
++=======
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * c->c3/tsc);
+ 	if (DO_BIC(BIC_CPU_c6))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * c->c6/tsc);
+ 	if (DO_BIC(BIC_CPU_c7))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * c->c7/tsc);
+ 
+ 	/* Mod%c6 */
+ 	if (DO_BIC(BIC_Mod_c6))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * c->mc6_us / tsc);
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  
  	if (DO_BIC(BIC_CoreTmp))
- 		outp += sprintf(outp, "\t%d", c->core_temp_c);
+ 		outp += sprintf(outp, "%s%d", (printed++ ? delim : ""), c->core_temp_c);
  
  	for (i = 0, mp = sys.cp; mp; i++, mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
  			if (mp->width == 32)
- 				outp += sprintf(outp, "\t0x%08lx", (unsigned long) c->counter[i]);
+ 				outp += sprintf(outp, "%s0x%08lx", (printed++ ? delim : ""), (unsigned long) c->counter[i]);
  			else
- 				outp += sprintf(outp, "\t0x%016llx", c->counter[i]);
+ 				outp += sprintf(outp, "%s0x%016llx", (printed++ ? delim : ""), c->counter[i]);
  		} else if (mp->format == FORMAT_DELTA) {
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%lld", c->counter[i]);
 +		} else if (mp->format == FORMAT_PERCENT) {
 +			outp += sprintf(outp, "\t%.2f", 100.0 * c->counter[i]/t->tsc);
++=======
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "%s%8lld", (printed++ ? delim : ""), c->counter[i]);
+ 			else
+ 				outp += sprintf(outp, "%s%lld", (printed++ ? delim : ""), c->counter[i]);
+ 		} else if (mp->format == FORMAT_PERCENT) {
+ 			outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * c->counter[i]/tsc);
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  		}
  	}
  
@@@ -810,26 -871,26 +979,49 @@@
  
  	/* Totl%C0, Any%C0 GFX%C0 CPUGFX% */
  	if (do_skl_residency) {
++<<<<<<< HEAD
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_wtd_core_c0/t->tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_core_c0/t->tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_gfxe_c0/t->tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_both_core_gfxe_c0/t->tsc);
 +	}
 +
 +	if (DO_BIC(BIC_Pkgpc2))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc2/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc3))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc3/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc6))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc6/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc7))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc7/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc8))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc8/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc9))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc9/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc10))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc10/t->tsc);
++=======
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_wtd_core_c0/tsc);
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_any_core_c0/tsc);
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_any_gfxe_c0/tsc);
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_both_core_gfxe_c0/tsc);
+ 	}
+ 
+ 	if (DO_BIC(BIC_Pkgpc2))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc2/tsc);
+ 	if (DO_BIC(BIC_Pkgpc3))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc3/tsc);
+ 	if (DO_BIC(BIC_Pkgpc6))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc6/tsc);
+ 	if (DO_BIC(BIC_Pkgpc7))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc7/tsc);
+ 	if (DO_BIC(BIC_Pkgpc8))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc8/tsc);
+ 	if (DO_BIC(BIC_Pkgpc9))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc9/tsc);
+ 	if (DO_BIC(BIC_Pkgpc10))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc10/tsc);
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  
  	/*
   	 * If measurement interval exceeds minimum RAPL Joule Counter range,
@@@ -864,13 -925,16 +1056,22 @@@
  	for (i = 0, mp = sys.pp; mp; i++, mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
  			if (mp->width == 32)
- 				outp += sprintf(outp, "\t0x%08lx", (unsigned long) p->counter[i]);
+ 				outp += sprintf(outp, "%s0x%08lx", (printed++ ? delim : ""), (unsigned long) p->counter[i]);
  			else
- 				outp += sprintf(outp, "\t0x%016llx", p->counter[i]);
+ 				outp += sprintf(outp, "%s0x%016llx", (printed++ ? delim : ""), p->counter[i]);
  		} else if (mp->format == FORMAT_DELTA) {
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%lld", p->counter[i]);
 +		} else if (mp->format == FORMAT_PERCENT) {
 +			outp += sprintf(outp, "\t%.2f", 100.0 * p->counter[i]/t->tsc);
++=======
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "%s%8lld", (printed++ ? delim : ""), p->counter[i]);
+ 			else
+ 				outp += sprintf(outp, "%s%lld", (printed++ ? delim : ""), p->counter[i]);
+ 		} else if (mp->format == FORMAT_PERCENT) {
+ 			outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->counter[i]/tsc);
++>>>>>>> 6168c2e0fb50 (tools/power turbostat: update --list feature)
  		}
  	}
  
* Unmerged path tools/power/x86/turbostat/turbostat.c
