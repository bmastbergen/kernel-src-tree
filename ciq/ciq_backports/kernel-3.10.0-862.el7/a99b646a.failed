PCI: Disable PCIe Relaxed Ordering if unsupported

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [pci] Disable PCIe Relaxed Ordering if unsupported (Myron Stowe) [1492839]
Rebuild_FUZZ: 94.62%
commit-author dingtianhong <dingtianhong@huawei.com>
commit a99b646afa8a02571ea298bedca6592d818229cd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a99b646a.failed

When bit4 is set in the PCIe Device Control register, it indicates
whether the device is permitted to use relaxed ordering.
On some platforms using relaxed ordering can have performance issues or
due to erratum can cause data-corruption. In such cases devices must avoid
using relaxed ordering.

The patch adds a new flag PCI_DEV_FLAGS_NO_RELAXED_ORDERING to indicate that
Relaxed Ordering (RO) attribute should not be used for Transaction Layer
Packets (TLP) targeted towards these affected root complexes.

This patch checks if there is any node in the hierarchy that indicates that
using relaxed ordering is not safe. In such cases the patch turns off the
relaxed ordering by clearing the capability for this device.

	Signed-off-by: Casey Leedom <leedom@chelsio.com>
	Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
	Acked-by: Ashok Raj <ashok.raj@intel.com>
	Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Acked-by: Casey Leedom <leedom@chelsio.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a99b646afa8a02571ea298bedca6592d818229cd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/probe.c
#	include/linux/pci.h
diff --cc drivers/pci/probe.c
index 6d2c60881fef,e6a917b4acd3..000000000000
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@@ -1520,12 -1745,73 +1520,79 @@@ static void program_hpp_type2(struct pc
  	 */
  }
  
++<<<<<<< HEAD
++=======
+ static void pci_configure_extended_tags(struct pci_dev *dev)
+ {
+ 	u32 dev_cap;
+ 	int ret;
+ 
+ 	if (!pci_is_pcie(dev))
+ 		return;
+ 
+ 	ret = pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &dev_cap);
+ 	if (ret)
+ 		return;
+ 
+ 	if (dev_cap & PCI_EXP_DEVCAP_EXT_TAG)
+ 		pcie_capability_set_word(dev, PCI_EXP_DEVCTL,
+ 					 PCI_EXP_DEVCTL_EXT_TAG);
+ }
+ 
+ /**
+  * pcie_relaxed_ordering_enabled - Probe for PCIe relaxed ordering enable
+  * @dev: PCI device to query
+  *
+  * Returns true if the device has enabled relaxed ordering attribute.
+  */
+ bool pcie_relaxed_ordering_enabled(struct pci_dev *dev)
+ {
+ 	u16 v;
+ 
+ 	pcie_capability_read_word(dev, PCI_EXP_DEVCTL, &v);
+ 
+ 	return !!(v & PCI_EXP_DEVCTL_RELAX_EN);
+ }
+ EXPORT_SYMBOL(pcie_relaxed_ordering_enabled);
+ 
+ static void pci_configure_relaxed_ordering(struct pci_dev *dev)
+ {
+ 	struct pci_dev *root;
+ 
+ 	/* PCI_EXP_DEVICE_RELAX_EN is RsvdP in VFs */
+ 	if (dev->is_virtfn)
+ 		return;
+ 
+ 	if (!pcie_relaxed_ordering_enabled(dev))
+ 		return;
+ 
+ 	/*
+ 	 * For now, we only deal with Relaxed Ordering issues with Root
+ 	 * Ports. Peer-to-Peer DMA is another can of worms.
+ 	 */
+ 	root = pci_find_pcie_root_port(dev);
+ 	if (!root)
+ 		return;
+ 
+ 	if (root->dev_flags & PCI_DEV_FLAGS_NO_RELAXED_ORDERING) {
+ 		pcie_capability_clear_word(dev, PCI_EXP_DEVCTL,
+ 					   PCI_EXP_DEVCTL_RELAX_EN);
+ 		dev_info(&dev->dev, "Disable Relaxed Ordering because the Root Port didn't support it\n");
+ 	}
+ }
+ 
++>>>>>>> a99b646afa8a (PCI: Disable PCIe Relaxed Ordering if unsupported)
  static void pci_configure_device(struct pci_dev *dev)
  {
  	struct hotplug_params hpp;
  	int ret;
  
  	pci_configure_mps(dev);
++<<<<<<< HEAD
++=======
+ 	pci_configure_extended_tags(dev);
+ 	pci_configure_relaxed_ordering(dev);
++>>>>>>> a99b646afa8a (PCI: Disable PCIe Relaxed Ordering if unsupported)
  
  	memset(&hpp, 0, sizeof(hpp));
  	ret = pci_get_hp_params(dev, &hpp);
diff --cc include/linux/pci.h
index 20e2942c01d7,29606fb89464..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -186,8 -179,17 +186,18 @@@ enum pci_dev_flags 
  	PCI_DEV_FLAGS_NO_PM_RESET = (__force pci_dev_flags_t) (1 << 7),
  	/* Get VPD from function 0 VPD */
  	PCI_DEV_FLAGS_VPD_REF_F0 = (__force pci_dev_flags_t) (1 << 8),
 -	/* a non-root bridge where translation occurs, stop alias search here */
 -	PCI_DEV_FLAGS_BRIDGE_XLATE_ROOT = (__force pci_dev_flags_t) (1 << 9),
  	/* Do not use FLR even if device advertises PCI_AF_CAP */
  	PCI_DEV_FLAGS_NO_FLR_RESET = (__force pci_dev_flags_t) (1 << 10),
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Resume before calling the driver's system suspend hooks, disabling
+ 	 * the direct_complete optimization.
+ 	 */
+ 	PCI_DEV_FLAGS_NEEDS_RESUME = (__force pci_dev_flags_t) (1 << 11),
+ 	/* Don't use Relaxed Ordering for TLPs directed at this device */
+ 	PCI_DEV_FLAGS_NO_RELAXED_ORDERING = (__force pci_dev_flags_t) (1 << 12),
++>>>>>>> a99b646afa8a (PCI: Disable PCIe Relaxed Ordering if unsupported)
  };
  
  enum pci_irq_reroute_variant {
@@@ -1116,9 -1127,8 +1126,10 @@@ bool pci_check_pme_status(struct pci_de
  void pci_pme_wakeup_bus(struct pci_bus *bus);
  void pci_d3cold_enable(struct pci_dev *dev);
  void pci_d3cold_disable(struct pci_dev *dev);
+ bool pcie_relaxed_ordering_enabled(struct pci_dev *dev);
  
 +int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable);
 +
  /* PCI Virtual Channel */
  int pci_save_vc_state(struct pci_dev *dev);
  void pci_restore_vc_state(struct pci_dev *dev);
* Unmerged path drivers/pci/probe.c
diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index 7908058abb14..df1123f21509 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -3789,6 +3789,17 @@ DECLARE_PCI_FIXUP_CLASS_EARLY(0x1797, 0x6868, PCI_CLASS_NOT_DEFINED, 8,
 DECLARE_PCI_FIXUP_CLASS_EARLY(0x1797, 0x6869, PCI_CLASS_NOT_DEFINED, 8,
 			      quirk_tw686x_class);
 
+/*
+ * Some devices have problems with Transaction Layer Packets with the Relaxed
+ * Ordering Attribute set.  Such devices should mark themselves and other
+ * Device Drivers should check before sending TLPs with RO set.
+ */
+static void quirk_relaxedordering_disable(struct pci_dev *dev)
+{
+	dev->dev_flags |= PCI_DEV_FLAGS_NO_RELAXED_ORDERING;
+	dev_info(&dev->dev, "Disable Relaxed Ordering Attributes to avoid PCIe Completion erratum\n");
+}
+
 /*
  * Per PCIe r3.0, sec 2.2.9, "Completion headers must supply the same
  * values for the Attribute as were supplied in the header of the
* Unmerged path include/linux/pci.h
