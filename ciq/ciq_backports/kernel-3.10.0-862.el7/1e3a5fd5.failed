i40e/i40evf: adjust packet size to account for double VLANs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Mitch Williams <mitch.a.williams@intel.com>
commit 1e3a5fd5c0492d2cd37d86dce82ac7899136123f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1e3a5fd5.failed

Now that the kernel supports double VLAN tags, we should at least play
nice. Adjust the max packet size to account for two VLAN tags, not just
one.

	Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 1e3a5fd5c0492d2cd37d86dce82ac7899136123f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_main.c
#	drivers/net/ethernet/intel/i40evf/i40evf_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 674b2da7ff41,0cb571e337f6..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -9607,9 -9767,10 +9607,16 @@@ static int i40e_config_netdev(struct i4
  	netdev->netdev_ops = &i40e_netdev_ops;
  	netdev->watchdog_timeo = 5 * HZ;
  	i40e_set_ethtool_ops(netdev);
++<<<<<<< HEAD
 +#ifdef I40E_FCOE
 +	i40e_fcoe_config_netdev(netdev, vsi);
 +#endif
++=======
+ 
+ 	/* MTU range: 68 - 9706 */
+ 	netdev->min_mtu = ETH_MIN_MTU;
+ 	netdev->max_mtu = I40E_MAX_RXBUFFER - I40E_PACKET_HDR_PAD;
++>>>>>>> 1e3a5fd5c049 (i40e/i40evf: adjust packet size to account for double VLANs)
  
  	return 0;
  }
diff --cc drivers/net/ethernet/intel/i40evf/i40evf_main.c
index 7093b3b1de4c,22919b444ddf..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40evf_main.c
+++ b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
@@@ -2593,6 -2623,10 +2593,13 @@@ static void i40evf_init_task(struct wor
  	i40evf_set_ethtool_ops(netdev);
  	netdev->watchdog_timeo = 5 * HZ;
  
++<<<<<<< HEAD
++=======
+ 	/* MTU range: 68 - 9710 */
+ 	netdev->min_mtu = ETH_MIN_MTU;
+ 	netdev->max_mtu = I40E_MAX_RXBUFFER - I40E_PACKET_HDR_PAD;
+ 
++>>>>>>> 1e3a5fd5c049 (i40e/i40evf: adjust packet size to account for double VLANs)
  	if (!is_valid_ether_addr(adapter->hw.mac.addr)) {
  		dev_info(&pdev->dev, "Invalid MAC address %pM, using random\n",
  			 adapter->hw.mac.addr);
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
diff --git a/drivers/net/ethernet/intel/i40e/i40e_txrx.h b/drivers/net/ethernet/intel/i40e/i40e_txrx.h
index 94a734a0a3cf..3e081dca8f94 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.h
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.h
@@ -131,6 +131,7 @@ enum i40e_dyn_idx_t {
  * i.e. RXBUFFER_512 --> 1216 byte skb (size-2048 slab)
  */
 #define I40E_RX_HDR_SIZE I40E_RXBUFFER_256
+#define I40E_PACKET_HDR_PAD (ETH_HLEN + ETH_FCS_LEN + (VLAN_HLEN * 2))
 #define i40e_rx_desc i40e_32byte_rx_desc
 
 #define I40E_RX_DMA_ATTR \
diff --git a/drivers/net/ethernet/intel/i40evf/i40e_txrx.h b/drivers/net/ethernet/intel/i40evf/i40e_txrx.h
index 8b6000110ab2..dee785af5e1a 100644
--- a/drivers/net/ethernet/intel/i40evf/i40e_txrx.h
+++ b/drivers/net/ethernet/intel/i40evf/i40e_txrx.h
@@ -118,6 +118,7 @@ enum i40e_dyn_idx_t {
  * i.e. RXBUFFER_512 --> 1216 byte skb (size-2048 slab)
  */
 #define I40E_RX_HDR_SIZE I40E_RXBUFFER_256
+#define I40E_PACKET_HDR_PAD (ETH_HLEN + ETH_FCS_LEN + (VLAN_HLEN * 2))
 #define i40e_rx_desc i40e_32byte_rx_desc
 
 #define I40E_RX_DMA_ATTR \
* Unmerged path drivers/net/ethernet/intel/i40evf/i40evf_main.c
