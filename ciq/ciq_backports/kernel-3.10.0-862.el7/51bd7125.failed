misc: rtsx: Fix symbol clashes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [misc] rtsx: Fix symbol clashes (Daniel Bristot de Oliveira) [1457800]
Rebuild_FUZZ: 88.89%
commit-author Stephen Rothwell <sfr@canb.auug.org.au>
commit 51bd7125f740a1bc9e79cd117d7d50f1dc67a446
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/51bd7125.failed

drivers/staging/rts5208/sd.o: In function `.sd_power_off_card3v3':
(.text+0x5760): multiple definition of `.sd_power_off_card3v3'
drivers/misc/cardreader/rtsx_pcr.o:(.text+0x4630): first defined here
drivers/staging/rts5208/sd.o:(.opd+0x378): multiple definition of `sd_power_off_card3v3'
drivers/misc/cardreader/rtsx_pcr.o:(.opd+0x4f8): first defined here
drivers/staging/rts5208/ms.o: In function `.ms_power_off_card3v3':
(.text+0x5e70): multiple definition of `.ms_power_off_card3v3'
drivers/misc/cardreader/rtsx_pcr.o:(.text+0x46e0): first defined here
drivers/staging/rts5208/ms.o:(.opd+0x360): multiple definition of `ms_power_off_card3v3'
drivers/misc/cardreader/rtsx_pcr.o:(.opd+0x510): first defined here

Fixes: 5da4e04ae480 ("misc: rtsx: Add support for RTS5260")
	Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
	Signed-off-by: Lee Jones <lee.jones@linaro.org>
(cherry picked from commit 51bd7125f740a1bc9e79cd117d7d50f1dc67a446)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/mfd/rtsx_pcr.c
#	drivers/mfd/rtsx_pcr.h
#	drivers/misc/cardreader/rts5260.c
diff --cc drivers/mfd/rtsx_pcr.c
index c77a7642abbe,5345170fc57b..000000000000
--- a/drivers/mfd/rtsx_pcr.c
+++ b/drivers/mfd/rtsx_pcr.c
@@@ -1119,6 -1140,102 +1119,105 @@@ static void rtsx_pci_power_off(struct r
  }
  #endif
  
++<<<<<<< HEAD:drivers/mfd/rtsx_pcr.c
++=======
+ void rtsx_pci_enable_ocp(struct rtsx_pcr *pcr)
+ {
+ 	u8 val = SD_OCP_INT_EN | SD_DETECT_EN;
+ 
+ 	if (pcr->ops->enable_ocp)
+ 		pcr->ops->enable_ocp(pcr);
+ 	else
+ 		rtsx_pci_write_register(pcr, REG_OCPCTL, 0xFF, val);
+ 
+ }
+ 
+ void rtsx_pci_disable_ocp(struct rtsx_pcr *pcr)
+ {
+ 	u8 mask = SD_OCP_INT_EN | SD_DETECT_EN;
+ 
+ 	if (pcr->ops->disable_ocp)
+ 		pcr->ops->disable_ocp(pcr);
+ 	else
+ 		rtsx_pci_write_register(pcr, REG_OCPCTL, mask, 0);
+ }
+ 
+ void rtsx_pci_init_ocp(struct rtsx_pcr *pcr)
+ {
+ 	if (pcr->ops->init_ocp) {
+ 		pcr->ops->init_ocp(pcr);
+ 	} else {
+ 		struct rtsx_cr_option *option = &(pcr->option);
+ 
+ 		if (option->ocp_en) {
+ 			u8 val = option->sd_400mA_ocp_thd;
+ 
+ 			rtsx_pci_write_register(pcr, FPDCTL, OC_POWER_DOWN, 0);
+ 			rtsx_pci_write_register(pcr, REG_OCPPARA1,
+ 				SD_OCP_TIME_MASK, SD_OCP_TIME_800);
+ 			rtsx_pci_write_register(pcr, REG_OCPPARA2,
+ 				SD_OCP_THD_MASK, val);
+ 			rtsx_pci_write_register(pcr, REG_OCPGLITCH,
+ 				SD_OCP_GLITCH_MASK, pcr->hw_param.ocp_glitch);
+ 			rtsx_pci_enable_ocp(pcr);
+ 		} else {
+ 			/* OC power down */
+ 			rtsx_pci_write_register(pcr, FPDCTL, OC_POWER_DOWN,
+ 				OC_POWER_DOWN);
+ 		}
+ 	}
+ }
+ 
+ int rtsx_pci_get_ocpstat(struct rtsx_pcr *pcr, u8 *val)
+ {
+ 	if (pcr->ops->get_ocpstat)
+ 		return pcr->ops->get_ocpstat(pcr, val);
+ 	else
+ 		return rtsx_pci_read_register(pcr, REG_OCPSTAT, val);
+ }
+ 
+ void rtsx_pci_clear_ocpstat(struct rtsx_pcr *pcr)
+ {
+ 	if (pcr->ops->clear_ocpstat) {
+ 		pcr->ops->clear_ocpstat(pcr);
+ 	} else {
+ 		u8 mask = SD_OCP_INT_CLR | SD_OC_CLR;
+ 		u8 val = SD_OCP_INT_CLR | SD_OC_CLR;
+ 
+ 		rtsx_pci_write_register(pcr, REG_OCPCTL, mask, val);
+ 		rtsx_pci_write_register(pcr, REG_OCPCTL, mask, 0);
+ 	}
+ }
+ 
+ int rtsx_sd_power_off_card3v3(struct rtsx_pcr *pcr)
+ {
+ 	rtsx_pci_write_register(pcr, CARD_CLK_EN, SD_CLK_EN |
+ 		MS_CLK_EN | SD40_CLK_EN, 0);
+ 	rtsx_pci_write_register(pcr, CARD_OE, SD_OUTPUT_EN, 0);
+ 
+ 	rtsx_pci_card_power_off(pcr, RTSX_SD_CARD);
+ 
+ 	msleep(50);
+ 
+ 	rtsx_pci_card_pull_ctl_disable(pcr, RTSX_SD_CARD);
+ 
+ 	return 0;
+ }
+ 
+ int rtsx_ms_power_off_card3v3(struct rtsx_pcr *pcr)
+ {
+ 	rtsx_pci_write_register(pcr, CARD_CLK_EN, SD_CLK_EN |
+ 		MS_CLK_EN | SD40_CLK_EN, 0);
+ 
+ 	rtsx_pci_card_pull_ctl_disable(pcr, RTSX_MS_CARD);
+ 
+ 	rtsx_pci_write_register(pcr, CARD_OE, MS_OUTPUT_EN, 0);
+ 	rtsx_pci_card_power_off(pcr, RTSX_MS_CARD);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 51bd7125f740 (misc: rtsx: Fix symbol clashes):drivers/misc/cardreader/rtsx_pcr.c
  static int rtsx_pci_init_hw(struct rtsx_pcr *pcr)
  {
  	int err;
diff --cc drivers/mfd/rtsx_pcr.h
index ec784e04fe20,6ea1655db0bb..000000000000
--- a/drivers/mfd/rtsx_pcr.h
+++ b/drivers/mfd/rtsx_pcr.h
@@@ -99,5 -102,12 +99,15 @@@ do {									
  int rtsx_gops_pm_reset(struct rtsx_pcr *pcr);
  int rtsx_set_ltr_latency(struct rtsx_pcr *pcr, u32 latency);
  int rtsx_set_l1off_sub(struct rtsx_pcr *pcr, u8 val);
++<<<<<<< HEAD:drivers/mfd/rtsx_pcr.h
++=======
+ void rtsx_pci_init_ocp(struct rtsx_pcr *pcr);
+ void rtsx_pci_disable_ocp(struct rtsx_pcr *pcr);
+ void rtsx_pci_enable_ocp(struct rtsx_pcr *pcr);
+ int rtsx_pci_get_ocpstat(struct rtsx_pcr *pcr, u8 *val);
+ void rtsx_pci_clear_ocpstat(struct rtsx_pcr *pcr);
+ int rtsx_sd_power_off_card3v3(struct rtsx_pcr *pcr);
+ int rtsx_ms_power_off_card3v3(struct rtsx_pcr *pcr);
++>>>>>>> 51bd7125f740 (misc: rtsx: Fix symbol clashes):drivers/misc/cardreader/rtsx_pcr.h
  
  #endif
* Unmerged path drivers/misc/cardreader/rts5260.c
* Unmerged path drivers/mfd/rtsx_pcr.c
* Unmerged path drivers/mfd/rtsx_pcr.h
* Unmerged path drivers/misc/cardreader/rts5260.c
