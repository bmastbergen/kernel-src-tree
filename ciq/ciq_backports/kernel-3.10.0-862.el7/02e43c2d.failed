efi: Introduce efi_early_memdesc_ptr to get pointer to memmap descriptor

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Baoquan He <bhe@redhat.com>
commit 02e43c2dcd3b3cf7244f6dda65a07e8dacadaf8d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/02e43c2d.failed

The existing map iteration helper for_each_efi_memory_desc_in_map can
only be used after the kernel initializes the EFI subsystem to set up
struct efi_memory_map.

Before that we also need iterate map descriptors which are stored in several
intermediate structures, like struct efi_boot_memmap for arch independent
usage and struct efi_info for x86 arch only.

Introduce efi_early_memdesc_ptr() to get pointer to a map descriptor, and
replace several places where that primitive is open coded.

	Signed-off-by: Baoquan He <bhe@redhat.com>
[ Various improvements to the text. ]
	Acked-by: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: ard.biesheuvel@linaro.org
	Cc: fanc.fnst@cn.fujitsu.com
	Cc: izumi.taku@jp.fujitsu.com
	Cc: keescook@chromium.org
	Cc: linux-efi@vger.kernel.org
	Cc: n-horiguchi@ah.jp.nec.com
	Cc: thgarnie@google.com
Link: http://lkml.kernel.org/r/20170816134651.GF21273@x1
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 02e43c2dcd3b3cf7244f6dda65a07e8dacadaf8d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/firmware/efi/libstub/efi-stub-helper.c
#	include/linux/efi.h
diff --cc include/linux/efi.h
index 0dc4ddccc847,a686ca9a7e5c..000000000000
--- a/include/linux/efi.h
+++ b/include/linux/efi.h
@@@ -902,17 -991,78 +902,85 @@@ extern u64 efi_mem_attribute (unsigned 
  extern int __init efi_uart_console_only (void);
  extern u64 efi_mem_desc_end(efi_memory_desc_t *md);
  extern int efi_mem_desc_lookup(u64 phys_addr, efi_memory_desc_t *out_md);
 -extern void efi_mem_reserve(phys_addr_t addr, u64 size);
  extern void efi_initialize_iomem_resources(struct resource *code_resource,
  		struct resource *data_resource, struct resource *bss_resource);
 +extern void efi_get_time(struct timespec *now);
 +extern int efi_set_rtc_mmss(const struct timespec *now);
  extern void efi_reserve_boot_services(void);
 -extern int efi_get_fdt_params(struct efi_fdt_params *params);
 +extern struct efi_memory_map memmap;
  extern struct kobject *efi_kobj;
  
++<<<<<<< HEAD
 +struct key;
 +extern int __init parse_efi_signature_list(const void *data, size_t size,
 +					   struct key *keyring);
++=======
+ extern int efi_reboot_quirk_mode;
+ extern bool efi_poweroff_required(void);
+ 
+ #ifdef CONFIG_EFI_FAKE_MEMMAP
+ extern void __init efi_fake_memmap(void);
+ #else
+ static inline void efi_fake_memmap(void) { }
+ #endif
+ 
+ /*
+  * efi_memattr_perm_setter - arch specific callback function passed into
+  *                           efi_memattr_apply_permissions() that updates the
+  *                           mapping permissions described by the second
+  *                           argument in the page tables referred to by the
+  *                           first argument.
+  */
+ typedef int (*efi_memattr_perm_setter)(struct mm_struct *, efi_memory_desc_t *);
+ 
+ extern int efi_memattr_init(void);
+ extern int efi_memattr_apply_permissions(struct mm_struct *mm,
+ 					 efi_memattr_perm_setter fn);
+ 
+ /*
+  * efi_early_memdesc_ptr - get the n-th EFI memmap descriptor
+  * @map: the start of efi memmap
+  * @desc_size: the size of space for each EFI memmap descriptor
+  * @n: the index of efi memmap descriptor
+  *
+  * EFI boot service provides the GetMemoryMap() function to get a copy of the
+  * current memory map which is an array of memory descriptors, each of
+  * which describes a contiguous block of memory. It also gets the size of the
+  * map, and the size of each descriptor, etc.
+  *
+  * Note that per section 6.2 of UEFI Spec 2.6 Errata A, the returned size of
+  * each descriptor might not be equal to sizeof(efi_memory_memdesc_t),
+  * since efi_memory_memdesc_t may be extended in the future. Thus the OS
+  * MUST use the returned size of the descriptor to find the start of each
+  * efi_memory_memdesc_t in the memory map array. This should only be used
+  * during bootup since for_each_efi_memory_desc_xxx() is available after the
+  * kernel initializes the EFI subsystem to set up struct efi_memory_map.
+  */
+ #define efi_early_memdesc_ptr(map, desc_size, n)			\
+ 	(efi_memory_desc_t *)((void *)(map) + ((n) * (desc_size)))
+ 
+ /* Iterate through an efi_memory_map */
+ #define for_each_efi_memory_desc_in_map(m, md)				   \
+ 	for ((md) = (m)->map;						   \
+ 	     (md) && ((void *)(md) + (m)->desc_size) <= (m)->map_end;	   \
+ 	     (md) = (void *)(md) + (m)->desc_size)
+ 
+ /**
+  * for_each_efi_memory_desc - iterate over descriptors in efi.memmap
+  * @md: the efi_memory_desc_t * iterator
+  *
+  * Once the loop finishes @md must not be accessed.
+  */
+ #define for_each_efi_memory_desc(md) \
+ 	for_each_efi_memory_desc_in_map(&efi.memmap, md)
+ 
+ /*
+  * Format an EFI memory descriptor's type and attributes to a user-provided
+  * character buffer, as per snprintf(), and return the buffer.
+  */
+ char * __init efi_md_typeattr_format(char *buf, size_t size,
+ 				     const efi_memory_desc_t *md);
++>>>>>>> 02e43c2dcd3b (efi: Introduce efi_early_memdesc_ptr to get pointer to memmap descriptor)
  
  /**
   * efi_range_is_wc - check the WC bit on an address range
* Unmerged path drivers/firmware/efi/libstub/efi-stub-helper.c
diff --git a/arch/x86/boot/compressed/eboot.c b/arch/x86/boot/compressed/eboot.c
index 9a42c5878258..f4b9eccca737 100644
--- a/arch/x86/boot/compressed/eboot.c
+++ b/arch/x86/boot/compressed/eboot.c
@@ -1209,7 +1209,7 @@ static efi_status_t setup_e820(struct boot_params *params,
 		m |= (u64)efi->efi_memmap_hi << 32;
 #endif
 
-		d = (efi_memory_desc_t *)(m + (i * efi->efi_memdesc_size));
+		d = efi_early_memdesc_ptr(m, efi->efi_memdesc_size, i);
 		switch (d->type) {
 		case EFI_RESERVED_TYPE:
 		case EFI_RUNTIME_SERVICES_CODE:
* Unmerged path drivers/firmware/efi/libstub/efi-stub-helper.c
* Unmerged path include/linux/efi.h
