vxlan: add changelink support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Roopa Prabhu <roopa@cumulusnetworks.com>
commit 8bcdc4f3a20be949df54b67e5ae2734daabb5792
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8bcdc4f3.failed

This patch adds changelink rtnl op support for vxlan netdevs.
code changes involve:
    - refactor vxlan_newlink into vxlan_nl2conf to be
    used by vxlan_newlink and vxlan_changelink
    - vxlan_nl2conf and vxlan_dev_configure take a
    changelink argument to isolate changelink checks
    and updates.
    - Allow changing only a few attributes:
        - return -EOPNOTSUPP for attributes that cannot
        be changed for now. Incremental patches can
        make the non-supported one available in the future
        if needed.

	Signed-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8bcdc4f3a20be949df54b67e5ae2734daabb5792)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/vxlan.c
diff --cc drivers/net/vxlan.c
index 2ed0f4915f35,87f63f61dcf7..000000000000
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@@ -2795,24 -2846,29 +2795,34 @@@ static int vxlan_dev_configure(struct n
  	__be16 default_port = vxlan->cfg.dst_port;
  	struct net_device *lowerdev = NULL;
  
- 	if (conf->flags & VXLAN_F_GPE) {
- 		/* For now, allow GPE only together with COLLECT_METADATA.
- 		 * This can be relaxed later; in such case, the other side
- 		 * of the PtP link will have to be provided.
- 		 */
- 		if ((conf->flags & ~VXLAN_F_ALLOWED_GPE) ||
- 		    !(conf->flags & VXLAN_F_COLLECT_METADATA)) {
- 			pr_info("unsupported combination of extensions\n");
- 			return -EINVAL;
+ 	if (!changelink) {
+ 		if (conf->flags & VXLAN_F_GPE) {
+ 			/* For now, allow GPE only together with
+ 			 * COLLECT_METADATA. This can be relaxed later; in such
+ 			 * case, the other side of the PtP link will have to be
+ 			 * provided.
+ 			 */
+ 			if ((conf->flags & ~VXLAN_F_ALLOWED_GPE) ||
+ 			    !(conf->flags & VXLAN_F_COLLECT_METADATA)) {
+ 				pr_info("unsupported combination of extensions\n");
+ 				return -EINVAL;
+ 			}
+ 			vxlan_raw_setup(dev);
+ 		} else {
+ 			vxlan_ether_setup(dev);
  		}
  
- 		vxlan_raw_setup(dev);
- 	} else {
- 		vxlan_ether_setup(dev);
+ 		/* MTU range: 68 - 65535 */
+ 		dev->min_mtu = ETH_MIN_MTU;
+ 		dev->max_mtu = ETH_MAX_MTU;
+ 		vxlan->net = src_net;
  	}
  
++<<<<<<< HEAD
 +	vxlan->net = src_net;
 +
++=======
++>>>>>>> 8bcdc4f3a20b (vxlan: add changelink support)
  	dst->remote_vni = conf->vni;
  
  	memcpy(&dst->remote_ip, &conf->remote_ip, sizeof(conf->remote_ip));
@@@ -2854,10 -2912,12 +2866,11 @@@
  #endif
  
  		if (!conf->mtu)
 -			dev->mtu = lowerdev->mtu -
 -				   (use_ipv6 ? VXLAN6_HEADROOM : VXLAN_HEADROOM);
 +			dev->mtu = lowerdev->mtu - (use_ipv6 ? VXLAN6_HEADROOM : VXLAN_HEADROOM);
  
  		needed_headroom = lowerdev->hard_header_len;
- 	} else if (vxlan_addr_multicast(&dst->remote_ip)) {
+ 	} else if (!conf->remote_ifindex &&
+ 		   vxlan_addr_multicast(&dst->remote_ip)) {
  		pr_info("multicast destination requires interface to be specified\n");
  		return -EINVAL;
  	}
@@@ -2904,10 -3190,11 +3132,10 @@@ static int vxlan_newlink(struct net *sr
  	if (!vxlan_addr_any(&vxlan->default_dst.remote_ip)) {
  		err = vxlan_fdb_create(vxlan, all_zeros_mac,
  				       &vxlan->default_dst.remote_ip,
- 				       NUD_REACHABLE|NUD_PERMANENT,
- 				       NLM_F_EXCL|NLM_F_CREATE,
+ 				       NUD_REACHABLE | NUD_PERMANENT,
+ 				       NLM_F_EXCL | NLM_F_CREATE,
  				       vxlan->cfg.dst_port,
  				       vxlan->default_dst.remote_vni,
 -				       vxlan->default_dst.remote_vni,
  				       vxlan->default_dst.remote_ifindex,
  				       NTF_SELF);
  		if (err)
@@@ -2916,7 -3203,7 +3144,11 @@@
  
  	err = register_netdevice(dev);
  	if (err) {
++<<<<<<< HEAD
 +		vxlan_fdb_delete_default(vxlan);
++=======
+ 		vxlan_fdb_delete_default(vxlan, vxlan->default_dst.remote_vni);
++>>>>>>> 8bcdc4f3a20b (vxlan: add changelink support)
  		return err;
  	}
  
@@@ -2925,121 -3212,56 +3157,154 @@@
  	return 0;
  }
  
- static int vxlan_newlink(struct net *src_net, struct net_device *dev,
- 			 struct nlattr *tb[], struct nlattr *data[])
+ static int vxlan_changelink(struct net_device *dev, struct nlattr *tb[],
+ 			    struct nlattr *data[])
  {
+ 	struct vxlan_dev *vxlan = netdev_priv(dev);
+ 	struct vxlan_rdst *dst = &vxlan->default_dst;
+ 	struct vxlan_rdst old_dst;
  	struct vxlan_config conf;
+ 	int err;
  
- 	memset(&conf, 0, sizeof(conf));
+ 	err = vxlan_nl2conf(tb, data,
+ 			    dev, &conf, true);
+ 	if (err)
+ 		return err;
  
- 	if (data[IFLA_VXLAN_ID])
- 		conf.vni = cpu_to_be32(nla_get_u32(data[IFLA_VXLAN_ID]));
+ 	memcpy(&old_dst, dst, sizeof(struct vxlan_rdst));
  
- 	if (data[IFLA_VXLAN_GROUP]) {
- 		conf.remote_ip.sin.sin_addr.s_addr = nla_get_in_addr(data[IFLA_VXLAN_GROUP]);
- 	} else if (data[IFLA_VXLAN_GROUP6]) {
- 		if (!IS_ENABLED(CONFIG_IPV6))
- 			return -EPFNOSUPPORT;
+ 	err = vxlan_dev_configure(vxlan->net, dev, &conf, true);
+ 	if (err)
+ 		return err;
  
- 		conf.remote_ip.sin6.sin6_addr = nla_get_in6_addr(data[IFLA_VXLAN_GROUP6]);
- 		conf.remote_ip.sa.sa_family = AF_INET6;
+ 	/* handle default dst entry */
+ 	if (!vxlan_addr_equal(&dst->remote_ip, &old_dst.remote_ip)) {
+ 		spin_lock_bh(&vxlan->hash_lock);
+ 		if (!vxlan_addr_any(&old_dst.remote_ip))
+ 			__vxlan_fdb_delete(vxlan, all_zeros_mac,
+ 					   old_dst.remote_ip,
+ 					   vxlan->cfg.dst_port,
+ 					   old_dst.remote_vni,
+ 					   old_dst.remote_vni,
+ 					   old_dst.remote_ifindex, 0);
+ 
+ 		if (!vxlan_addr_any(&dst->remote_ip)) {
+ 			err = vxlan_fdb_create(vxlan, all_zeros_mac,
+ 					       &dst->remote_ip,
+ 					       NUD_REACHABLE | NUD_PERMANENT,
+ 					       NLM_F_CREATE | NLM_F_APPEND,
+ 					       vxlan->cfg.dst_port,
+ 					       dst->remote_vni,
+ 					       dst->remote_vni,
+ 					       dst->remote_ifindex,
+ 					       NTF_SELF);
+ 			if (err) {
+ 				spin_unlock_bh(&vxlan->hash_lock);
+ 				return err;
+ 			}
+ 		}
+ 		spin_unlock_bh(&vxlan->hash_lock);
  	}
  
++<<<<<<< HEAD
 +	if (data[IFLA_VXLAN_LOCAL]) {
 +		conf.saddr.sin.sin_addr.s_addr = nla_get_in_addr(data[IFLA_VXLAN_LOCAL]);
 +		conf.saddr.sa.sa_family = AF_INET;
 +	} else if (data[IFLA_VXLAN_LOCAL6]) {
 +		if (!IS_ENABLED(CONFIG_IPV6))
 +			return -EPFNOSUPPORT;
 +
 +		/* TODO: respect scope id */
 +		conf.saddr.sin6.sin6_addr = nla_get_in6_addr(data[IFLA_VXLAN_LOCAL6]);
 +		conf.saddr.sa.sa_family = AF_INET6;
 +	}
 +
 +	if (data[IFLA_VXLAN_LINK])
 +		conf.remote_ifindex = nla_get_u32(data[IFLA_VXLAN_LINK]);
 +
 +	if (data[IFLA_VXLAN_TOS])
 +		conf.tos  = nla_get_u8(data[IFLA_VXLAN_TOS]);
 +
 +	if (data[IFLA_VXLAN_TTL])
 +		conf.ttl = nla_get_u8(data[IFLA_VXLAN_TTL]);
 +
 +	if (data[IFLA_VXLAN_LABEL])
 +		conf.label = nla_get_be32(data[IFLA_VXLAN_LABEL]) &
 +			     IPV6_FLOWLABEL_MASK;
 +
 +	if (!data[IFLA_VXLAN_LEARNING] || nla_get_u8(data[IFLA_VXLAN_LEARNING]))
 +		conf.flags |= VXLAN_F_LEARN;
 +
 +	if (data[IFLA_VXLAN_AGEING])
 +		conf.age_interval = nla_get_u32(data[IFLA_VXLAN_AGEING]);
 +
 +	if (data[IFLA_VXLAN_PROXY] && nla_get_u8(data[IFLA_VXLAN_PROXY]))
 +		conf.flags |= VXLAN_F_PROXY;
 +
 +	if (data[IFLA_VXLAN_RSC] && nla_get_u8(data[IFLA_VXLAN_RSC]))
 +		conf.flags |= VXLAN_F_RSC;
 +
 +	if (data[IFLA_VXLAN_L2MISS] && nla_get_u8(data[IFLA_VXLAN_L2MISS]))
 +		conf.flags |= VXLAN_F_L2MISS;
 +
 +	if (data[IFLA_VXLAN_L3MISS] && nla_get_u8(data[IFLA_VXLAN_L3MISS]))
 +		conf.flags |= VXLAN_F_L3MISS;
 +
 +	if (data[IFLA_VXLAN_LIMIT])
 +		conf.addrmax = nla_get_u32(data[IFLA_VXLAN_LIMIT]);
 +
 +	if (data[IFLA_VXLAN_COLLECT_METADATA] &&
 +	    nla_get_u8(data[IFLA_VXLAN_COLLECT_METADATA]))
 +		conf.flags |= VXLAN_F_COLLECT_METADATA;
 +
 +	if (data[IFLA_VXLAN_PORT_RANGE]) {
 +		const struct ifla_vxlan_port_range *p
 +			= nla_data(data[IFLA_VXLAN_PORT_RANGE]);
 +		conf.port_min = ntohs(p->low);
 +		conf.port_max = ntohs(p->high);
 +	}
 +
 +	if (data[IFLA_VXLAN_PORT])
 +		conf.dst_port = nla_get_be16(data[IFLA_VXLAN_PORT]);
 +
 +	/* RHEL: preserve the previous default */
 +	conf.flags |= VXLAN_F_UDP_ZERO_CSUM_TX;
 +	if (data[IFLA_VXLAN_UDP_CSUM] &&
 +	    nla_get_u8(data[IFLA_VXLAN_UDP_CSUM]))
 +		conf.flags &= ~VXLAN_F_UDP_ZERO_CSUM_TX;
 +
 +	if (data[IFLA_VXLAN_UDP_ZERO_CSUM6_TX] &&
 +	    nla_get_u8(data[IFLA_VXLAN_UDP_ZERO_CSUM6_TX]))
 +		conf.flags |= VXLAN_F_UDP_ZERO_CSUM6_TX;
 +
 +	if (data[IFLA_VXLAN_UDP_ZERO_CSUM6_RX] &&
 +	    nla_get_u8(data[IFLA_VXLAN_UDP_ZERO_CSUM6_RX]))
 +		conf.flags |= VXLAN_F_UDP_ZERO_CSUM6_RX;
 +
 +	if (data[IFLA_VXLAN_REMCSUM_TX] &&
 +	    nla_get_u8(data[IFLA_VXLAN_REMCSUM_TX]))
 +		conf.flags |= VXLAN_F_REMCSUM_TX;
 +
 +	if (data[IFLA_VXLAN_REMCSUM_RX] &&
 +	    nla_get_u8(data[IFLA_VXLAN_REMCSUM_RX]))
 +		conf.flags |= VXLAN_F_REMCSUM_RX;
 +
 +	if (data[IFLA_VXLAN_GBP])
 +		conf.flags |= VXLAN_F_GBP;
 +
 +	if (data[IFLA_VXLAN_GPE])
 +		conf.flags |= VXLAN_F_GPE;
 +
 +	if (data[IFLA_VXLAN_REMCSUM_NOPARTIAL])
 +		conf.flags |= VXLAN_F_REMCSUM_NOPARTIAL;
 +
 +	if (tb[IFLA_MTU])
 +		conf.mtu = nla_get_u32(tb[IFLA_MTU]);
 +
 +	return vxlan_dev_configure(src_net, dev, &conf);
++=======
+ 	return 0;
++>>>>>>> 8bcdc4f3a20b (vxlan: add changelink support)
  }
  
  static void vxlan_dellink(struct net_device *dev, struct list_head *head)
* Unmerged path drivers/net/vxlan.c
