radix-tree: fix comment about "exceptional" bits

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ross Zwisler <ross.zwisler@linux.intel.com>
commit a23216a2f1f8a30a3b6588c743681651e4a6aa94
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a23216a2.failed

The bottom two bits of radix tree entries are reserved for special use
by the radix tree code itself.  A comment detailing their usage was
added by commit 3bcadd6fa6c4 ("radix-tree: free up the bottom bit of
exceptional entries for reuse")

This comment states that if the bottom two bits are '11', this means
that this is a locked exceptional entry.

It turns out that this bit combination was never actually used.  Radix
tree locking for DAX was indeed implemented, but it actually used the
third LSB:

  /* We use lowest available exceptional entry bit for locking */
  #define RADIX_DAX_ENTRY_LOCK (1 << RADIX_TREE_EXCEPTIONAL_SHIFT)

This locking code was also made specific to the DAX code instead of
being generally implemented in radix-tree.h.

So, fix the comment.

Link: http://lkml.kernel.org/r/1468997731-2155-1-git-send-email-ross.zwisler@linux.intel.com
	Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Jan Kara <jack@suse.com>
	Cc: Konstantin Khlebnikov <koct9i@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a23216a2f1f8a30a3b6588c743681651e4a6aa94)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/radix-tree.h
diff --cc include/linux/radix-tree.h
index 497bd1a32159,4c45105dece3..000000000000
--- a/include/linux/radix-tree.h
+++ b/include/linux/radix-tree.h
@@@ -29,24 -29,28 +29,31 @@@
  #include <linux/rcupdate.h>
  
  /*
 - * The bottom two bits of the slot determine how the remaining bits in the
 - * slot are interpreted:
 + * An indirect pointer (root->rnode pointing to a radix_tree_node, rather
 + * than a data item) is signalled by the low bit set in the root->rnode
 + * pointer.
   *
++<<<<<<< HEAD
 + * In this case root->height is > 0, but the indirect pointer tests are
 + * needed for RCU lookups (because root->height is unreliable). The only
 + * time callers need worry about this is when doing a lookup_slot under
 + * RCU.
++=======
+  * 00 - data pointer
+  * 01 - internal entry
+  * 10 - exceptional entry
+  * 11 - this bit combination is currently unused/reserved
++>>>>>>> a23216a2f1f8 (radix-tree: fix comment about "exceptional" bits)
   *
 - * The internal entry may be a pointer to the next level in the tree, a
 - * sibling entry, or an indicator that the entry in this slot has been moved
 - * to another location in the tree and the lookup should be restarted.  While
 - * NULL fits the 'data pointer' pattern, it means that there is no entry in
 - * the tree for this index (no matter what level of the tree it is found at).
 - * This means that you cannot store NULL in the tree as a value for the index.
 + * Indirect pointer in fact is also used to tag the last pointer of a node
 + * when it is shrunk, before we rcu free the node. See shrink code for
 + * details.
   */
 -#define RADIX_TREE_ENTRY_MASK		3UL
 -#define RADIX_TREE_INTERNAL_NODE	1UL
 -
 +#define RADIX_TREE_INDIRECT_PTR		1
  /*
 - * Most users of the radix tree store pointers but shmem/tmpfs stores swap
 - * entries in the same tree.  They are marked as exceptional entries to
 - * distinguish them from pointers to struct page.
 + * A common use of the radix tree is to store pointers to struct pages;
 + * but shmem/tmpfs needs also to store swap entries in the same tree:
 + * those are marked as exceptional entries to distinguish them.
   * EXCEPTIONAL_ENTRY tests the bit, EXCEPTIONAL_SHIFT shifts content past it.
   */
  #define RADIX_TREE_EXCEPTIONAL_ENTRY	2
* Unmerged path include/linux/radix-tree.h
