x86/smpboot: Do not use smp_num_siblings in __max_logical_packages calculation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Prarit Bhargava <prarit@redhat.com>
commit 947134d9b00f342415af7eddd42a5fce7262a1b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/947134d9.failed

Documentation/x86/topology.txt defines smp_num_siblings as "The number of
threads in a core".  Since commit bbb65d2d365e ("x86: use cpuid vector 0xb
when available for detecting cpu topology") smp_num_siblings is the
maximum number of threads in a core.  If Simultaneous MultiThreading
(SMT) is disabled on a system, smp_num_siblings is 2 and not 1 as
expected.

Use topology_max_smt_threads(), which contains the active numer of threads,
in the __max_logical_packages calculation.

On a single socket, single core, single thread system __max_smt_threads has
not been updated when the __max_logical_packages calculation happens, so its
zero which makes the package estimate fail. Initialize it to one, which is
the minimum number of threads on a core.

[ tglx: Folded the __max_smt_threads fix in ]

Fixes: b4c0a7326f5d ("x86/smpboot: Fix __max_logical_packages estimate")
	Reported-by: Jakub Kicinski <kubakici@wp.pl>
	Signed-off-by: Prarit Bhargava <prarit@redhat.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Tested-by: Jakub Kicinski <kubakici@wp.pl>
	Cc: netdev@vger.kernel.org
	Cc: "netdev@vger.kernel.org"
	Cc: Clark Williams <williams@redhat.com>
Link: https://lkml.kernel.org/r/20171204164521.17870-1-prarit@redhat.com
(cherry picked from commit 947134d9b00f342415af7eddd42a5fce7262a1b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/smpboot.c
diff --cc arch/x86/kernel/smpboot.c
index 92e0aea4e8c8,35cb20994e32..000000000000
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@@ -116,6 -105,57 +116,60 @@@ unsigned int __max_logical_packages __r
  EXPORT_SYMBOL(__max_logical_packages);
  static unsigned int logical_packages __read_mostly;
  
++<<<<<<< HEAD
++=======
+ /* Maximum number of SMT threads on any online core */
+ int __read_mostly __max_smt_threads = 1;
+ 
+ /* Flag to indicate if a complete sched domain rebuild is required */
+ bool x86_topology_update;
+ 
+ int arch_update_cpu_topology(void)
+ {
+ 	int retval = x86_topology_update;
+ 
+ 	x86_topology_update = false;
+ 	return retval;
+ }
+ 
+ static inline void smpboot_setup_warm_reset_vector(unsigned long start_eip)
+ {
+ 	unsigned long flags;
+ 
+ 	spin_lock_irqsave(&rtc_lock, flags);
+ 	CMOS_WRITE(0xa, 0xf);
+ 	spin_unlock_irqrestore(&rtc_lock, flags);
+ 	local_flush_tlb();
+ 	pr_debug("1.\n");
+ 	*((volatile unsigned short *)phys_to_virt(TRAMPOLINE_PHYS_HIGH)) =
+ 							start_eip >> 4;
+ 	pr_debug("2.\n");
+ 	*((volatile unsigned short *)phys_to_virt(TRAMPOLINE_PHYS_LOW)) =
+ 							start_eip & 0xf;
+ 	pr_debug("3.\n");
+ }
+ 
+ static inline void smpboot_restore_warm_reset_vector(void)
+ {
+ 	unsigned long flags;
+ 
+ 	/*
+ 	 * Install writable page 0 entry to set BIOS data area.
+ 	 */
+ 	local_flush_tlb();
+ 
+ 	/*
+ 	 * Paranoid:  Set warm reset code and vector here back
+ 	 * to default values.
+ 	 */
+ 	spin_lock_irqsave(&rtc_lock, flags);
+ 	CMOS_WRITE(0, 0xf);
+ 	spin_unlock_irqrestore(&rtc_lock, flags);
+ 
+ 	*((volatile u32 *)phys_to_virt(TRAMPOLINE_PHYS_LOW)) = 0;
+ }
+ 
++>>>>>>> 947134d9b00f (x86/smpboot: Do not use smp_num_siblings in __max_logical_packages calculation)
  /*
   * Report back to the Boot Processor during boot time or to the caller processor
   * during CPU online.
@@@ -1364,7 -1297,16 +1418,17 @@@ void __init native_smp_prepare_boot_cpu
  
  void __init native_smp_cpus_done(unsigned int max_cpus)
  {
 -	int ncpus;
 -
  	pr_debug("Boot done\n");
++<<<<<<< HEAD
++=======
+ 	/*
+ 	 * Today neither Intel nor AMD support heterogenous systems so
+ 	 * extrapolate the boot cpu's data to all packages.
+ 	 */
+ 	ncpus = cpu_data(0).booted_cores * topology_max_smt_threads();
+ 	__max_logical_packages = DIV_ROUND_UP(nr_cpu_ids, ncpus);
+ 	pr_info("Max logical packages: %u\n", __max_logical_packages);
++>>>>>>> 947134d9b00f (x86/smpboot: Do not use smp_num_siblings in __max_logical_packages calculation)
  
  	if (x86_has_numa_in_package)
  		set_sched_topology(x86_numa_in_package_topology);
* Unmerged path arch/x86/kernel/smpboot.c
