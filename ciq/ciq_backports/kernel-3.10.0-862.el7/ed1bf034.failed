i2c: designware-pci: Make bus number allocation robust

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [i2c] designware-pci: Make bus number allocation robust (Gopal Tiwari) [1456705]
Rebuild_FUZZ: 95.15%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit ed1bf03470b8c666d6d0d81e8faa8cbb32a5656e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ed1bf034.failed

On some platforms, such as Intel Medfield, the I2C slave devices are enumerated
through SFI tables where bus numbering is expected to be defined in the OS.
Make the bus number allocation robust for such platforms.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Acked-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit ed1bf03470b8c666d6d0d81e8faa8cbb32a5656e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-pcidrv.c
diff --cc drivers/i2c/busses/i2c-designware-pcidrv.c
index 08725b43a28b,586c8d85b4eb..000000000000
--- a/drivers/i2c/busses/i2c-designware-pcidrv.c
+++ b/drivers/i2c/busses/i2c-designware-pcidrv.c
@@@ -41,17 -41,7 +41,21 @@@
  #define DRIVER_NAME "i2c-designware-pci"
  
  enum dw_pci_ctl_id_t {
++<<<<<<< HEAD
 +	moorestown_0,
 +	moorestown_1,
 +	moorestown_2,
 +
 +	medfield_0,
 +	medfield_1,
 +	medfield_2,
 +	medfield_3,
 +	medfield_4,
 +	medfield_5,
 +
++=======
+ 	medfield,
++>>>>>>> ed1bf03470b8 (i2c: designware-pci: Make bus number allocation robust)
  	baytrail,
  	haswell,
  };
@@@ -102,65 -93,28 +107,90 @@@ static struct dw_scl_sda_cfg hsw_confi
  	.sda_hold = 0x9,
  };
  
++<<<<<<< HEAD
 +static struct  dw_pci_controller  dw_pci_controllers[] = {
 +	[moorestown_0] = {
 +		.bus_num     = 0,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[moorestown_1] = {
 +		.bus_num     = 1,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[moorestown_2] = {
 +		.bus_num     = 2,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[medfield_0] = {
 +		.bus_num     = 0,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[medfield_1] = {
 +		.bus_num     = 1,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[medfield_2] = {
 +		.bus_num     = 2,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[medfield_3] = {
 +		.bus_num     = 3,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_STD,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[medfield_4] = {
 +		.bus_num     = 4,
 +		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
 +		.tx_fifo_depth = 32,
 +		.rx_fifo_depth = 32,
 +		.clk_khz      = 25000,
 +	},
 +	[medfield_5] = {
 +		.bus_num     = 5,
++=======
+ static int mfld_setup(struct pci_dev *pdev, struct dw_pci_controller *c)
+ {
+ 	switch (pdev->device) {
+ 	case 0x0817:
+ 		c->bus_cfg &= ~DW_IC_CON_SPEED_MASK;
+ 		c->bus_cfg |= DW_IC_CON_SPEED_STD;
+ 	case 0x0818:
+ 	case 0x0819:
+ 		c->bus_num = pdev->device - 0x817 + 3;
+ 		return 0;
+ 	case 0x082C:
+ 	case 0x082D:
+ 	case 0x082E:
+ 		c->bus_num = pdev->device - 0x82C + 0;
+ 		return 0;
+ 	}
+ 	return -ENODEV;
+ }
+ 
+ static struct dw_pci_controller dw_pci_controllers[] = {
+ 	[medfield] = {
+ 		.bus_num = -1,
++>>>>>>> ed1bf03470b8 (i2c: designware-pci: Make bus number allocation robust)
  		.bus_cfg   = INTEL_MID_STD_CFG | DW_IC_CON_SPEED_FAST,
  		.tx_fifo_depth = 32,
  		.rx_fifo_depth = 32,
@@@ -344,17 -262,13 +382,26 @@@ static void i2c_dw_pci_remove(struct pc
  MODULE_ALIAS("i2c_designware-pci");
  
  static const struct pci_device_id i2_designware_pci_ids[] = {
 +	/* Moorestown */
 +	{ PCI_VDEVICE(INTEL, 0x0802), moorestown_0 },
 +	{ PCI_VDEVICE(INTEL, 0x0803), moorestown_1 },
 +	{ PCI_VDEVICE(INTEL, 0x0804), moorestown_2 },
  	/* Medfield */
++<<<<<<< HEAD
 +	{ PCI_VDEVICE(INTEL, 0x0817), medfield_3,},
 +	{ PCI_VDEVICE(INTEL, 0x0818), medfield_4 },
 +	{ PCI_VDEVICE(INTEL, 0x0819), medfield_5 },
 +	{ PCI_VDEVICE(INTEL, 0x082C), medfield_0 },
 +	{ PCI_VDEVICE(INTEL, 0x082D), medfield_1 },
 +	{ PCI_VDEVICE(INTEL, 0x082E), medfield_2 },
++=======
+ 	{ PCI_VDEVICE(INTEL, 0x0817), medfield },
+ 	{ PCI_VDEVICE(INTEL, 0x0818), medfield },
+ 	{ PCI_VDEVICE(INTEL, 0x0819), medfield },
+ 	{ PCI_VDEVICE(INTEL, 0x082C), medfield },
+ 	{ PCI_VDEVICE(INTEL, 0x082D), medfield },
+ 	{ PCI_VDEVICE(INTEL, 0x082E), medfield },
++>>>>>>> ed1bf03470b8 (i2c: designware-pci: Make bus number allocation robust)
  	/* Baytrail */
  	{ PCI_VDEVICE(INTEL, 0x0F41), baytrail },
  	{ PCI_VDEVICE(INTEL, 0x0F42), baytrail },
diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index 1bde12adf6ef..2d0f9d3cc8a7 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -26,6 +26,7 @@
 #define DW_IC_CON_MASTER		0x1
 #define DW_IC_CON_SPEED_STD		0x2
 #define DW_IC_CON_SPEED_FAST		0x4
+#define DW_IC_CON_SPEED_MASK		0x6
 #define DW_IC_CON_10BITADDR_MASTER	0x10
 #define DW_IC_CON_RESTART_EN		0x20
 #define DW_IC_CON_SLAVE_DISABLE		0x40
* Unmerged path drivers/i2c/busses/i2c-designware-pcidrv.c
