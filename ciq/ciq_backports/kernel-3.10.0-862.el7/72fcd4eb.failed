scsi: qla2xxx: Fix task mgmt handling for NPIV

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Fix task mgmt handling for NPIV (Himanshu Madhani) [1460030]
Rebuild_FUZZ: 93.02%
commit-author Quinn Tran <quinn.tran@cavium.com>
commit 72fcd4eb3c046cd59cb2ab5a7fc1555e8621a4b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/72fcd4eb.failed

Fix task management response for NPIV Target mode.
Current code uses the wrong vp index.

	Signed-off-by: Quinn Tran <quinn.tran@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 72fcd4eb3c046cd59cb2ab5a7fc1555e8621a4b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_target.c
#	drivers/scsi/qla2xxx/qla_target.h
diff --cc drivers/scsi/qla2xxx/qla_target.c
index 4244f37d5d93,4f1621fd5ef2..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.c
+++ b/drivers/scsi/qla2xxx/qla_target.c
@@@ -1280,9 -1898,16 +1280,16 @@@ static int __qlt_24xx_handle_abts(struc
  
  	mcmd->sess = sess;
  	memcpy(&mcmd->orig_iocb.abts, abts, sizeof(mcmd->orig_iocb.abts));
++<<<<<<< HEAD
 +	mcmd->reset_count = vha->hw->chip_reset;
++=======
+ 	mcmd->reset_count = ha->base_qpair->chip_reset;
+ 	mcmd->tmr_func = QLA_TGT_ABTS;
+ 	mcmd->qpair = ha->base_qpair;
+ 	mcmd->vha = vha;
++>>>>>>> 72fcd4eb3c04 (scsi: qla2xxx: Fix task mgmt handling for NPIV)
  
 -	/*
 -	 * LUN is looked up by target-core internally based on the passed
 -	 * abts->exchange_addr_to_abort tag.
 -	 */
 -	rc = ha->tgt.tgt_ops->handle_tmr(mcmd, 0, mcmd->tmr_func,
 +	rc = ha->tgt.tgt_ops->handle_tmr(mcmd, lun, TMR_ABORT_TASK,
  	    abts->exchange_addr_to_abort);
  	if (rc != 0) {
  		ql_dbg(ql_dbg_tgt_mgt, vha, 0xf052,
@@@ -1360,11 -2001,13 +1367,15 @@@ static void qlt_24xx_handle_abts(struc
  /*
   * ha->hardware_lock supposed to be held on entry. Might drop it, then reaquire
   */
 -static void qlt_24xx_send_task_mgmt_ctio(struct qla_qpair *qpair,
 +static void qlt_24xx_send_task_mgmt_ctio(struct scsi_qla_host *ha,
  	struct qla_tgt_mgmt_cmd *mcmd, uint32_t resp_code)
  {
++<<<<<<< HEAD
++=======
+ 	struct scsi_qla_host *ha = mcmd->vha;
++>>>>>>> 72fcd4eb3c04 (scsi: qla2xxx: Fix task mgmt handling for NPIV)
  	struct atio_from_isp *atio = &mcmd->orig_iocb.atio;
  	struct ctio7_to_24xx *ctio;
 -	uint16_t temp;
  
  	ql_dbg(ql_dbg_tgt, ha, 0xe008,
  	    "Sending task mgmt CTIO7 (ha=%p, atio=%p, resp_code=%x\n",
@@@ -2204,10 -3461,14 +2215,17 @@@ static int __qlt_send_term_exchange(str
  	struct qla_hw_data *ha = vha->hw;
  	request_t *pkt;
  	int ret = 0;
 -	uint16_t temp;
  
 -	ql_dbg(ql_dbg_tgt, vha, 0xe009, "Sending TERM EXCH CTIO (ha=%p)\n", ha);
 +	ql_dbg(ql_dbg_tgt, vha, 0xe01c, "Sending TERM EXCH CTIO (ha=%p)\n", ha);
  
++<<<<<<< HEAD
 +	pkt = (request_t *)qla2x00_alloc_iocbs(vha, NULL);
++=======
+ 	if (cmd)
+ 		vha = cmd->vha;
+ 
+ 	pkt = (request_t *)qla2x00_alloc_iocbs_ready(qpair, NULL);
++>>>>>>> 72fcd4eb3c04 (scsi: qla2xxx: Fix task mgmt handling for NPIV)
  	if (pkt == NULL) {
  		ql_dbg(ql_dbg_tgt, vha, 0xe050,
  		    "qla_target(%d): %s failed: unable to allocate "
@@@ -2784,75 -4381,17 +2802,81 @@@ static int qlt_issue_task_mgmt(struct q
  	}
  	mcmd->tmr_func = fn;
  	mcmd->flags = flags;
++<<<<<<< HEAD
++=======
+ 	mcmd->reset_count = ha->base_qpair->chip_reset;
+ 	mcmd->qpair = ha->base_qpair;
+ 	mcmd->vha = vha;
++>>>>>>> 72fcd4eb3c04 (scsi: qla2xxx: Fix task mgmt handling for NPIV)
  
  	switch (fn) {
 +	case QLA_TGT_CLEAR_ACA:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10000,
 +		    "qla_target(%d): CLEAR_ACA received\n", sess->vha->vp_idx);
 +		tmr_func = TMR_CLEAR_ACA;
 +		break;
 +
 +	case QLA_TGT_TARGET_RESET:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10001,
 +		    "qla_target(%d): TARGET_RESET received\n",
 +		    sess->vha->vp_idx);
 +		tmr_func = TMR_TARGET_WARM_RESET;
 +		break;
 +
  	case QLA_TGT_LUN_RESET:
 -	    abort_cmds_for_lun(vha, lun, a->u.isp24.fcp_hdr.s_id);
 -	    break;
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10002,
 +		    "qla_target(%d): LUN_RESET received\n", sess->vha->vp_idx);
 +		tmr_func = TMR_LUN_RESET;
 +		break;
 +
 +	case QLA_TGT_CLEAR_TS:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10003,
 +		    "qla_target(%d): CLEAR_TS received\n", sess->vha->vp_idx);
 +		tmr_func = TMR_CLEAR_TASK_SET;
 +		break;
 +
 +	case QLA_TGT_ABORT_TS:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10004,
 +		    "qla_target(%d): ABORT_TS received\n", sess->vha->vp_idx);
 +		tmr_func = TMR_ABORT_TASK_SET;
 +		break;
 +#if 0
 +	case QLA_TGT_ABORT_ALL:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10005,
 +		    "qla_target(%d): Doing ABORT_ALL_TASKS\n",
 +		    sess->vha->vp_idx);
 +		tmr_func = 0;
 +		break;
 +
 +	case QLA_TGT_ABORT_ALL_SESS:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10006,
 +		    "qla_target(%d): Doing ABORT_ALL_TASKS_SESS\n",
 +		    sess->vha->vp_idx);
 +		tmr_func = 0;
 +		break;
 +
 +	case QLA_TGT_NEXUS_LOSS_SESS:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10007,
 +		    "qla_target(%d): Doing NEXUS_LOSS_SESS\n",
 +		    sess->vha->vp_idx);
 +		tmr_func = 0;
 +		break;
 +
 +	case QLA_TGT_NEXUS_LOSS:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x10008,
 +		    "qla_target(%d): Doing NEXUS_LOSS\n", sess->vha->vp_idx);
 +		tmr_func = 0;
 +		break;
 +#endif
 +	default:
 +		ql_dbg(ql_dbg_tgt_tmr, vha, 0x1000a,
 +		    "qla_target(%d): Unknown task mgmt fn 0x%x\n",
 +		    sess->vha->vp_idx, fn);
 +		mempool_free(mcmd, qla_tgt_mgmt_cmd_mempool);
 +		return -ENOSYS;
  	}
  
 -	res = ha->tgt.tgt_ops->handle_tmr(mcmd, lun, mcmd->tmr_func, 0);
 +	res = ha->tgt.tgt_ops->handle_tmr(mcmd, lun, tmr_func, 0);
  	if (res != 0) {
  		ql_dbg(ql_dbg_tgt_tmr, vha, 0x1000b,
  		    "qla_target(%d): tgt.tgt_ops->handle_tmr() failed: %d\n",
diff --cc drivers/scsi/qla2xxx/qla_target.h
index b33e411f28a0,96fce43e1e46..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.h
+++ b/drivers/scsi/qla2xxx/qla_target.h
@@@ -875,9 -955,11 +875,15 @@@ struct qla_tgt_sess_work_param 
  };
  
  struct qla_tgt_mgmt_cmd {
 -	uint16_t tmr_func;
 +	uint8_t tmr_func;
  	uint8_t fc_tm_rsp;
++<<<<<<< HEAD
 +	struct qla_tgt_sess *sess;
++=======
+ 	struct fc_port *sess;
+ 	struct qla_qpair *qpair;
+ 	struct scsi_qla_host *vha;
++>>>>>>> 72fcd4eb3c04 (scsi: qla2xxx: Fix task mgmt handling for NPIV)
  	struct se_cmd se_cmd;
  	struct work_struct free_work;
  	unsigned int flags;
* Unmerged path drivers/scsi/qla2xxx/qla_target.c
* Unmerged path drivers/scsi/qla2xxx/qla_target.h
