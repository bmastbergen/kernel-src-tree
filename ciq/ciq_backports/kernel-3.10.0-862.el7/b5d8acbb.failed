ixgbe: Avoid Tx hang by not allowing more than the number of VFs supported.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] ixgbe: Avoid Tx hang by not allowing more than the number of VFs supported (Ken Cox) [1452423]
Rebuild_FUZZ: 99.33%
commit-author Usha Ketineni <usha.k.ketineni@intel.com>
commit b5d8acbb8781269cd4e2b986c9b0b884c0ed836a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b5d8acbb.failed

When DCB is enabled, add checks to ensure creation of number of VF's is
valid based on the traffic classes configured by the device.

	Signed-off-by: Usha Ketineni <usha.k.ketineni@intel.com>
	Tested-by: Ronald Bynoe <ronald.j.bynoe@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit b5d8acbb8781269cd4e2b986c9b0b884c0ed836a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
index a6ccf7b6f6f7,39e109da9bd9..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
@@@ -312,15 -310,36 +313,47 @@@ static int ixgbe_pci_sriov_enable(struc
  	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	/* While the SR-IOV capability structure reports total VFs to be
 +	 * 64 we limit the actual number that can be allocated to 63 so
 +	 * that some transmit/receive resources can be reserved to the
 +	 * PF.  The PCI bus driver already checks for other values out of
 +	 * range.
 +	 */
 +	if (num_vfs > IXGBE_MAX_VFS_DRV_LIMIT)
 +		return -EPERM;
++=======
+ 	/* While the SR-IOV capability structure reports total VFs to be 64,
+ 	 * we limit the actual number allocated as below based on two factors.
+ 	 *    Num_TCs	MAX_VFs
+ 	 *	1	  63
+ 	 *	<=4	  31
+ 	 *	>4	  15
+ 	 * First, we reserve some transmit/receive resources for the PF.
+ 	 * Second, VMDQ also uses the same pools that SR-IOV does. We need to
+ 	 * account for this, so that we don't accidentally allocate more VFs
+ 	 * than we have available pools. The PCI bus driver already checks for
+ 	 * other values out of range.
+ 	 */
+ 	num_tc = netdev_get_num_tc(adapter->netdev);
++>>>>>>> b5d8acbb8781 (ixgbe: Avoid Tx hang by not allowing more than the number of VFs supported.)
  
+ 	if (num_tc > 4) {
+ 		if ((num_vfs + adapter->num_rx_pools) > IXGBE_MAX_VFS_8TC) {
+ 			e_dev_err("Currently the device is configured with %d TCs, Creating more than %d VFs is not allowed\n", num_tc, IXGBE_MAX_VFS_8TC);
+ 			return -EPERM;
+ 		}
+ 	} else if ((num_tc > 1) && (num_tc <= 4)) {
+ 		if ((num_vfs + adapter->num_rx_pools) > IXGBE_MAX_VFS_4TC) {
+ 			e_dev_err("Currently the device is configured with %d TCs, Creating more than %d VFs is not allowed\n", num_tc, IXGBE_MAX_VFS_4TC);
+ 			return -EPERM;
+ 		}
+ 	} else {
+ 		if ((num_vfs + adapter->num_rx_pools) > IXGBE_MAX_VFS_1TC) {
+ 			e_dev_err("Currently the device is configured with %d TCs, Creating more than %d VFs is not allowed\n", num_tc, IXGBE_MAX_VFS_1TC);
+ 			return -EPERM;
+ 		}
+ 	}
  	adapter->num_vfs = num_vfs;
  
  	err = __ixgbe_enable_sriov(adapter);
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.c
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
index 0c7977d27b71..3166fd164e51 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_sriov.h
@@ -33,6 +33,9 @@
  *  63 (IXGBE_MAX_VF_FUNCTIONS - 1)
  */
 #define IXGBE_MAX_VFS_DRV_LIMIT  (IXGBE_MAX_VF_FUNCTIONS - 1)
+#define IXGBE_MAX_VFS_1TC		IXGBE_MAX_VF_FUNCTIONS
+#define IXGBE_MAX_VFS_4TC		32
+#define IXGBE_MAX_VFS_8TC		16
 
 #ifdef CONFIG_PCI_IOV
 void ixgbe_restore_vf_multicasts(struct ixgbe_adapter *adapter);
