igb: make a few local functions static

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Colin Ian King <colin.king@canonical.com>
commit b476deab8f412bd5441eb161b0fda86a0246de27
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b476deab.failed

Clean up a few sparse warnings, these following
functions can be made static:

drivers/net/ethernet/intel/igb/igb_main.c: warning: symbol
  'igb_add_mac_filter' was not declared. Should it be static?
drivers/net/ethernet/intel/igb/igb_main.c: warning: symbol
  'igb_del_mac_filter' was not declared. Should it be static?
drivers/net/ethernet/intel/igb/igb_main.c: warning: symbol
  'igb_set_vf_mac_filter' was not declared. Should it be static?

	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Tested-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit b476deab8f412bd5441eb161b0fda86a0246de27)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igb/igb_main.c
diff --cc drivers/net/ethernet/intel/igb/igb_main.c
index 60c875c6c5ba,ec62410b035a..000000000000
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@@ -6523,8 -6552,79 +6523,78 @@@ static int igb_uc_unsync(struct net_dev
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int igb_set_vf_mac_filter(struct igb_adapter *adapter, const int vf,
+ 				 const u32 info, const u8 *addr)
+ {
+ 	struct pci_dev *pdev = adapter->pdev;
+ 	struct vf_data_storage *vf_data = &adapter->vf_data[vf];
+ 	struct list_head *pos;
+ 	struct vf_mac_filter *entry = NULL;
+ 	int ret = 0;
+ 
+ 	switch (info) {
+ 	case E1000_VF_MAC_FILTER_CLR:
+ 		/* remove all unicast MAC filters related to the current VF */
+ 		list_for_each(pos, &adapter->vf_macs.l) {
+ 			entry = list_entry(pos, struct vf_mac_filter, l);
+ 			if (entry->vf == vf) {
+ 				entry->vf = -1;
+ 				entry->free = true;
+ 				igb_del_mac_filter(adapter, entry->vf_mac, vf);
+ 			}
+ 		}
+ 		break;
+ 	case E1000_VF_MAC_FILTER_ADD:
+ 		if (vf_data->flags & IGB_VF_FLAG_PF_SET_MAC) {
+ 			dev_warn(&pdev->dev,
+ 				 "VF %d requested MAC filter but is administratively denied\n",
+ 				 vf);
+ 			return -EINVAL;
+ 		}
+ 
+ 		if (!is_valid_ether_addr(addr)) {
+ 			dev_warn(&pdev->dev,
+ 				 "VF %d attempted to set invalid MAC filter\n",
+ 				 vf);
+ 			return -EINVAL;
+ 		}
+ 
+ 		/* try to find empty slot in the list */
+ 		list_for_each(pos, &adapter->vf_macs.l) {
+ 			entry = list_entry(pos, struct vf_mac_filter, l);
+ 			if (entry->free)
+ 				break;
+ 		}
+ 
+ 		if (entry && entry->free) {
+ 			entry->free = false;
+ 			entry->vf = vf;
+ 			ether_addr_copy(entry->vf_mac, addr);
+ 
+ 			ret = igb_add_mac_filter(adapter, addr, vf);
+ 			ret = min_t(int, ret, 0);
+ 		} else {
+ 			ret = -ENOSPC;
+ 		}
+ 
+ 		if (ret == -ENOSPC)
+ 			dev_warn(&pdev->dev,
+ 				 "VF %d has requested MAC filter but there is no space for it\n",
+ 				 vf);
+ 		break;
+ 	default:
+ 		ret = -EINVAL;
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> b476deab8f41 (igb: make a few local functions static)
  static int igb_set_vf_mac_addr(struct igb_adapter *adapter, u32 *msg, int vf)
  {
 -	struct pci_dev *pdev = adapter->pdev;
 -	struct vf_data_storage *vf_data = &adapter->vf_data[vf];
 -	u32 info = msg[0] & E1000_VT_MSGINFO_MASK;
 -
  	/* The VF MAC Address is stored in a packed array of bytes
  	 * starting at the second 32 bit word of the msg array
  	 */
* Unmerged path drivers/net/ethernet/intel/igb/igb_main.c
