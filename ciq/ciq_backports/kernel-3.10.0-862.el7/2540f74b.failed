dmaengine: dw: always export dw_dma_{en,dis}able

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: dmaengine: dw: always export dw_dma_{en,dis}able (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 94.12%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 2540f74b187e3ec0fe106b7427c4a84c955dc140
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2540f74b.failed

Instead of conditional exporing of dw_dma_suspend() / dw_dma_resume() let's
export dw_dma_disable() / dw_dma_enable(). Since dw_dma_shutdown() repeats
dw_dma_disable() we may safely remove it at all.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Vinod Koul <vinod.koul@intel.com>
(cherry picked from commit 2540f74b187e3ec0fe106b7427c4a84c955dc140)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/dw/internal.h
#	drivers/dma/dw/pci.c
#	drivers/dma/dw/platform.c
#	drivers/dma/dw_dmac.c
diff --cc drivers/dma/dw_dmac.c
index e4409f73fad7,48126380e036..000000000000
--- a/drivers/dma/dw_dmac.c
+++ b/drivers/dma/dw_dmac.c
@@@ -1890,86 -1685,27 +1890,100 @@@ static int dw_remove(struct platform_de
  
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(dw_dma_remove);
  
++<<<<<<< HEAD:drivers/dma/dw_dmac.c
 +static void dw_shutdown(struct platform_device *pdev)
 +{
 +	struct dw_dma	*dw = platform_get_drvdata(pdev);
 +
 +	dw_dma_off(dw);
 +	clk_disable_unprepare(dw->clk);
 +}
 +
 +static int dw_suspend_noirq(struct device *dev)
++=======
+ int dw_dma_disable(struct dw_dma_chip *chip)
++>>>>>>> 2540f74b187e (dmaengine: dw: always export dw_dma_{en,dis}able):drivers/dma/dw/core.c
  {
 -	struct dw_dma *dw = chip->dw;
 +	struct platform_device *pdev = to_platform_device(dev);
 +	struct dw_dma	*dw = platform_get_drvdata(pdev);
  
  	dw_dma_off(dw);
 +	clk_disable_unprepare(dw->clk);
 +
  	return 0;
  }
++<<<<<<< HEAD:drivers/dma/dw_dmac.c
 +
 +static int dw_resume_noirq(struct device *dev)
++=======
+ EXPORT_SYMBOL_GPL(dw_dma_disable);
+ 
+ int dw_dma_enable(struct dw_dma_chip *chip)
++>>>>>>> 2540f74b187e (dmaengine: dw: always export dw_dma_{en,dis}able):drivers/dma/dw/core.c
  {
 -	struct dw_dma *dw = chip->dw;
 +	struct platform_device *pdev = to_platform_device(dev);
 +	struct dw_dma	*dw = platform_get_drvdata(pdev);
 +
 +	clk_prepare_enable(dw->clk);
 +	dma_writel(dw, CFG, DW_CFG_DMA_EN);
  
 -	dw_dma_on(dw);
  	return 0;
  }
++<<<<<<< HEAD:drivers/dma/dw_dmac.c
 +
 +static const struct dev_pm_ops dw_dev_pm_ops = {
 +	.suspend_noirq = dw_suspend_noirq,
 +	.resume_noirq = dw_resume_noirq,
 +	.freeze_noirq = dw_suspend_noirq,
 +	.thaw_noirq = dw_resume_noirq,
 +	.restore_noirq = dw_resume_noirq,
 +	.poweroff_noirq = dw_suspend_noirq,
 +};
 +
 +#ifdef CONFIG_OF
 +static const struct of_device_id dw_dma_of_id_table[] = {
 +	{ .compatible = "snps,dma-spear1340" },
 +	{}
 +};
 +MODULE_DEVICE_TABLE(of, dw_dma_of_id_table);
 +#endif
 +
 +#ifdef CONFIG_ACPI
 +static const struct acpi_device_id dw_dma_acpi_id_table[] = {
 +	{ "INTL9C60", 0 },
 +	{ }
 +};
 +#endif
 +
 +static struct platform_driver dw_driver = {
 +	.probe		= dw_probe,
 +	.remove		= dw_remove,
 +	.shutdown	= dw_shutdown,
 +	.driver = {
 +		.name	= "dw_dmac",
 +		.pm	= &dw_dev_pm_ops,
 +		.of_match_table = of_match_ptr(dw_dma_of_id_table),
 +		.acpi_match_table = ACPI_PTR(dw_dma_acpi_id_table),
 +	},
 +};
 +
 +static int __init dw_init(void)
 +{
 +	return platform_driver_register(&dw_driver);
 +}
 +subsys_initcall(dw_init);
 +
 +static void __exit dw_exit(void)
 +{
 +	platform_driver_unregister(&dw_driver);
 +}
 +module_exit(dw_exit);
++=======
+ EXPORT_SYMBOL_GPL(dw_dma_enable);
++>>>>>>> 2540f74b187e (dmaengine: dw: always export dw_dma_{en,dis}able):drivers/dma/dw/core.c
  
  MODULE_LICENSE("GPL v2");
 -MODULE_DESCRIPTION("Synopsys DesignWare DMA Controller core driver");
 +MODULE_DESCRIPTION("Synopsys DesignWare DMA Controller driver");
  MODULE_AUTHOR("Haavard Skinnemoen (Atmel)");
  MODULE_AUTHOR("Viresh Kumar <viresh.linux@gmail.com>");
* Unmerged path drivers/dma/dw/internal.h
* Unmerged path drivers/dma/dw/pci.c
* Unmerged path drivers/dma/dw/platform.c
* Unmerged path drivers/dma/dw/internal.h
* Unmerged path drivers/dma/dw/pci.c
* Unmerged path drivers/dma/dw/platform.c
* Unmerged path drivers/dma/dw_dmac.c
