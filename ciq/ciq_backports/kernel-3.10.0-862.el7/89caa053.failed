IB/uverbs: Introduce and use helper functions to copy ah attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Parav Pandit <parav@mellanox.com>
commit 89caa0538ecf2114e1badbb1e75120d25bec985e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/89caa053.failed

This patch introduces two helper functions to copy ah attributes
from uverbs to internal ib_ah_attr structure and the other way
during modify qp and query qp respectively.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Reviewed-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 89caa0538ecf2114e1badbb1e75120d25bec985e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_cmd.c
diff --cc drivers/infiniband/core/uverbs_cmd.c
index 4761b0709900,8e9fea03dec4..000000000000
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@@ -2284,34 -1901,8 +2306,39 @@@ ssize_t ib_uverbs_query_qp(struct ib_uv
  	resp.alt_port_num           = attr->alt_port_num;
  	resp.alt_timeout            = attr->alt_timeout;
  
++<<<<<<< HEAD
 +	resp.dest.dlid              = attr->ah_attr.dlid;
 +	resp.dest.sl                = attr->ah_attr.sl;
 +	resp.dest.src_path_bits     = attr->ah_attr.src_path_bits;
 +	resp.dest.static_rate       = attr->ah_attr.static_rate;
 +	resp.dest.is_global         = !!(attr->ah_attr.ah_flags & IB_AH_GRH);
 +	if (resp.dest.is_global) {
 +		memcpy(resp.dest.dgid, attr->ah_attr.grh.dgid.raw, 16);
 +		resp.dest.flow_label        = attr->ah_attr.grh.flow_label;
 +		resp.dest.sgid_index        = attr->ah_attr.grh.sgid_index;
 +		resp.dest.hop_limit         = attr->ah_attr.grh.hop_limit;
 +		resp.dest.traffic_class     = attr->ah_attr.grh.traffic_class;
 +	}
 +	resp.dest.port_num          = attr->ah_attr.port_num;
 +
 +	resp.alt_dest.dlid          = attr->alt_ah_attr.dlid;
 +	resp.alt_dest.sl            = attr->alt_ah_attr.sl;
 +	resp.alt_dest.src_path_bits = attr->alt_ah_attr.src_path_bits;
 +	resp.alt_dest.static_rate   = attr->alt_ah_attr.static_rate;
 +	resp.alt_dest.is_global     = !!(attr->alt_ah_attr.ah_flags & IB_AH_GRH);
 +	if (resp.alt_dest.is_global) {
 +		memcpy(resp.alt_dest.dgid, attr->alt_ah_attr.grh.dgid.raw, 16);
 +		resp.alt_dest.flow_label    = attr->alt_ah_attr.grh.flow_label;
 +		resp.alt_dest.sgid_index    = attr->alt_ah_attr.grh.sgid_index;
 +		resp.alt_dest.hop_limit     = attr->alt_ah_attr.grh.hop_limit;
 +		resp.alt_dest.traffic_class =
 +				attr->alt_ah_attr.grh.traffic_class;
 +	}
 +	resp.alt_dest.port_num      = attr->alt_ah_attr.port_num;
++=======
+ 	copy_ah_attr_to_uverbs(&resp.dest, &attr->ah_attr);
+ 	copy_ah_attr_to_uverbs(&resp.alt_dest, &attr->alt_ah_attr);
++>>>>>>> 89caa0538ecf (IB/uverbs: Introduce and use helper functions to copy ah attributes)
  
  	resp.max_send_wr            = init_attr->cap.max_send_wr;
  	resp.max_recv_wr            = init_attr->cap.max_recv_wr;
@@@ -2391,62 -2005,21 +2441,77 @@@ static int modify_qp(struct ib_uverbs_f
  	attr->alt_timeout	  = cmd->base.alt_timeout;
  	attr->rate_limit	  = cmd->rate_limit;
  
++<<<<<<< HEAD
 +	if (cmd->base.dest.is_global) {
 +		memcpy(attr->ah_attr.grh.dgid.raw, cmd->base.dest.dgid, 16);
 +		attr->ah_attr.grh.flow_label	= cmd->base.dest.flow_label;
 +		attr->ah_attr.grh.sgid_index	= cmd->base.dest.sgid_index;
 +		attr->ah_attr.grh.hop_limit	= cmd->base.dest.hop_limit;
 +		attr->ah_attr.grh.traffic_class	= cmd->base.dest.traffic_class;
 +		attr->ah_attr.ah_flags		= IB_AH_GRH;
 +	} else {
 +		attr->ah_attr.ah_flags = 0;
 +	}
 +	attr->ah_attr.dlid		= cmd->base.dest.dlid;
 +	attr->ah_attr.sl		= cmd->base.dest.sl;
 +	attr->ah_attr.src_path_bits	= cmd->base.dest.src_path_bits;
 +	attr->ah_attr.static_rate	= cmd->base.dest.static_rate;
 +	attr->ah_attr.port_num		= cmd->base.dest.port_num;
 +
 +	if (cmd->base.alt_dest.is_global) {
 +		memcpy(attr->alt_ah_attr.grh.dgid.raw,
 +		       cmd->base.alt_dest.dgid, 16);
 +		attr->alt_ah_attr.grh.flow_label =
 +				cmd->base.alt_dest.flow_label;
 +		attr->alt_ah_attr.grh.sgid_index =
 +				cmd->base.alt_dest.sgid_index;
 +		attr->alt_ah_attr.grh.hop_limit =
 +				cmd->base.alt_dest.hop_limit;
 +		attr->alt_ah_attr.grh.traffic_class =
 +				cmd->base.alt_dest.traffic_class;
 +		attr->alt_ah_attr.ah_flags = IB_AH_GRH;
 +	} else {
 +		attr->alt_ah_attr.ah_flags = 0;
 +	}
 +	attr->alt_ah_attr.dlid		    = cmd->base.alt_dest.dlid;
 +	attr->alt_ah_attr.sl		    = cmd->base.alt_dest.sl;
 +	attr->alt_ah_attr.src_path_bits	    = cmd->base.alt_dest.src_path_bits;
 +	attr->alt_ah_attr.static_rate	    = cmd->base.alt_dest.static_rate;
 +	attr->alt_ah_attr.port_num	    = cmd->base.alt_dest.port_num;
 +
 +	if (qp->real_qp == qp) {
 +		if (cmd->base.attr_mask & IB_QP_AV) {
 +			ret = ib_resolve_eth_dmac(qp->device, &attr->ah_attr);
 +			if (ret)
 +				goto release_qp;
 +		}
 +		ret = qp->device->modify_qp(qp, attr,
 +					    modify_qp_mask(qp->qp_type,
 +							   cmd->base.attr_mask),
 +					    udata);
 +	} else {
 +		ret = ib_modify_qp(qp, attr,
 +				   modify_qp_mask(qp->qp_type,
 +						  cmd->base.attr_mask));
 +	}
++=======
+ 	if (cmd->base.attr_mask & IB_QP_AV)
+ 		copy_ah_attr_from_uverbs(qp->device, &attr->ah_attr,
+ 					 &cmd->base.dest);
+ 
+ 	if (cmd->base.attr_mask & IB_QP_ALT_PATH)
+ 		copy_ah_attr_from_uverbs(qp->device, &attr->alt_ah_attr,
+ 					 &cmd->base.alt_dest);
+ 
+ 	ret = ib_modify_qp_with_udata(qp, attr,
+ 				      modify_qp_mask(qp->qp_type,
+ 						     cmd->base.attr_mask),
+ 				      udata);
++>>>>>>> 89caa0538ecf (IB/uverbs: Introduce and use helper functions to copy ah attributes)
  
  release_qp:
 -	uobj_put_obj_read(qp);
 +	put_qp_read(qp);
 +
  out:
  	kfree(attr);
  
* Unmerged path drivers/infiniband/core/uverbs_cmd.c
