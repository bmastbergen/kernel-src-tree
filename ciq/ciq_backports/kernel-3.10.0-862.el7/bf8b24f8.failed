ALSA: x86: Drop the global platform device reference

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit bf8b24f8169096050795b552a778faaac349c73c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bf8b24f8.failed

Instead of referring to the global hlpe_pdev variable, pass the
platform device object to each function properly.  Accessing to the
global object is really ugly and error-prone.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit bf8b24f8169096050795b552a778faaac349c73c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/x86/intel_hdmi_lpe_audio.c
diff --cc sound/x86/intel_hdmi_lpe_audio.c
index 1d23ff38e96f,09c21346071c..000000000000
--- a/sound/x86/intel_hdmi_lpe_audio.c
+++ b/sound/x86/intel_hdmi_lpe_audio.c
@@@ -281,13 -268,14 +269,13 @@@ static void notify_audio_lpe(void *audi
  			hlpe_state =
  				hdmi_connector_status_disconnected;
  
- 			mid_hdmi_audio_signal_event(
+ 			mid_hdmi_audio_signal_event(pdev,
  				HAD_EVENT_HOT_UNPLUG);
  		} else
 -			dev_dbg(&pdev->dev, "%s: Already Unplugged!\n",
 +			dev_dbg(&hlpe_pdev->dev, "%s: Already Unplugged!\n",
  				__func__);
  
 -	} else {
 -		struct intel_hdmi_lpe_audio_eld *eld = &pdata->eld;
 +	} else if (eld != NULL) {
  
  		switch (eld->pipe_id) {
  		case 0:
@@@ -318,10 -306,10 +306,11 @@@
  			ctx->tmds_clock_speed = pdata->tmds_clock_speed;
  			ctx->dp_output = pdata->dp_output;
  			ctx->link_rate = pdata->link_rate;
- 			mid_hdmi_audio_signal_event(HAD_EVENT_MODE_CHANGING);
+ 			mid_hdmi_audio_signal_event(pdev,
+ 						    HAD_EVENT_MODE_CHANGING);
  		}
 -	}
 +	} else
 +		dev_dbg(&hlpe_pdev->dev, "%s: Event: NULL EDID!!\n", __func__);
  }
  
  /**
@@@ -438,8 -425,8 +426,13 @@@ static int hdmi_lpe_audio_probe(struct 
  	pdata->notify_audio_lpe = notify_audio_lpe;
  	if (pdata->notify_pending) {
  
++<<<<<<< HEAD
 +		dev_dbg(&hlpe_pdev->dev, "%s: handle pending notification\n", __func__);
 +		notify_audio_lpe(&pdata->eld);
++=======
+ 		dev_dbg(&pdev->dev, "%s: handle pending notification\n", __func__);
+ 		notify_audio_lpe(pdev);
++>>>>>>> bf8b24f81690 (ALSA: x86: Drop the global platform device reference)
  		pdata->notify_pending = false;
  	}
  	spin_unlock_irqrestore(&pdata->lpe_audio_slock, flag_irq);
diff --git a/sound/x86/intel_hdmi_audio.c b/sound/x86/intel_hdmi_audio.c
index 571ec07a3611..ed9db2ebe9cf 100644
--- a/sound/x86/intel_hdmi_audio.c
+++ b/sound/x86/intel_hdmi_audio.c
@@ -172,11 +172,12 @@ int had_get_hwstate(struct snd_intelhad *intelhaddata)
 int had_get_caps(struct snd_intelhad *intelhaddata,
 		 enum had_caps_list query, void *caps)
 {
+	struct platform_device *pdev = to_platform_device(intelhaddata->dev);
 	int retval;
 
 	retval = had_get_hwstate(intelhaddata);
 	if (!retval)
-		retval = mid_hdmi_audio_get_caps(query, caps);
+		retval = mid_hdmi_audio_get_caps(pdev, query, caps);
 
 	return retval;
 }
@@ -184,33 +185,36 @@ int had_get_caps(struct snd_intelhad *intelhaddata,
 int had_set_caps(struct snd_intelhad *intelhaddata,
 		 enum had_caps_list set_element, void *caps)
 {
+	struct platform_device *pdev = to_platform_device(intelhaddata->dev);
 	int retval;
 
 	retval = had_get_hwstate(intelhaddata);
 	if (!retval)
-		retval = mid_hdmi_audio_set_caps(set_element, caps);
+		retval = mid_hdmi_audio_set_caps(pdev, set_element, caps);
 
 	return retval;
 }
 
 int had_read_register(struct snd_intelhad *intelhaddata, u32 offset, u32 *data)
 {
+	struct platform_device *pdev = to_platform_device(intelhaddata->dev);
 	int retval;
 
 	retval = had_get_hwstate(intelhaddata);
 	if (!retval)
-		retval = mid_hdmi_audio_read(offset, data);
+		retval = mid_hdmi_audio_read(pdev, offset, data);
 
 	return retval;
 }
 
 int had_write_register(struct snd_intelhad *intelhaddata, u32 offset, u32 data)
 {
+	struct platform_device *pdev = to_platform_device(intelhaddata->dev);
 	int retval;
 
 	retval = had_get_hwstate(intelhaddata);
 	if (!retval)
-		retval = mid_hdmi_audio_write(offset, data);
+		retval = mid_hdmi_audio_write(pdev, offset, data);
 
 	return retval;
 }
@@ -218,11 +222,12 @@ int had_write_register(struct snd_intelhad *intelhaddata, u32 offset, u32 data)
 int had_read_modify(struct snd_intelhad *intelhaddata, u32 offset,
 		    u32 data, u32 mask)
 {
+	struct platform_device *pdev = to_platform_device(intelhaddata->dev);
 	int retval;
 
 	retval = had_get_hwstate(intelhaddata);
 	if (!retval)
-		retval = mid_hdmi_audio_rmw(offset, data, mask);
+		retval = mid_hdmi_audio_rmw(pdev, offset, data, mask);
 
 	return retval;
 }
* Unmerged path sound/x86/intel_hdmi_lpe_audio.c
diff --git a/sound/x86/intel_hdmi_lpe_audio.h b/sound/x86/intel_hdmi_lpe_audio.h
index a1c3aa0fbc57..a9d51b7c5bae 100644
--- a/sound/x86/intel_hdmi_lpe_audio.h
+++ b/sound/x86/intel_hdmi_lpe_audio.h
@@ -31,6 +31,8 @@
 #include <sound/control.h>
 #include <sound/pcm.h>
 
+struct platform_device;
+
 #define AUD_CONFIG_VALID_BIT			(1<<9)
 #define AUD_CONFIG_DP_MODE			(1<<15)
 #define AUD_CONFIG_BLOCK_BIT			(1<<7)
@@ -642,15 +644,16 @@ struct hdmi_audio_event {
 	int type;
 };
 
-void mid_hdmi_audio_signal_event(enum had_event_type event);
-
-int mid_hdmi_audio_read(u32 reg, u32 *val);
-int mid_hdmi_audio_write(u32 reg, u32 val);
-int mid_hdmi_audio_rmw(u32 reg, u32 val, u32 mask);
+int mid_hdmi_audio_read(struct platform_device *pdev, u32 reg, u32 *val);
+int mid_hdmi_audio_write(struct platform_device *pdev, u32 reg, u32 val);
+int mid_hdmi_audio_rmw(struct platform_device *pdev,
+		       u32 reg, u32 val, u32 mask);
 
-int mid_hdmi_audio_get_caps(enum had_caps_list get_element,
+int mid_hdmi_audio_get_caps(struct platform_device *pdev,
+			    enum had_caps_list get_element,
 			    void *capabilities);
-int mid_hdmi_audio_set_caps(enum had_caps_list set_element,
+int mid_hdmi_audio_set_caps(struct platform_device *pdev,
+			    enum had_caps_list set_element,
 			    void *capabilties);
 
 #endif
