device property: don't bother the drivers with struct property_set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Heikki Krogerus <heikki.krogerus@linux.intel.com>
commit f4d05266032346531b9f889e26aa31a0cf2a9822
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f4d05266.failed

Since device_add_property_set() now always takes a copy of
the property_set, and also since the fwnode type is always
hard coded to be FWNODE_PDATA, there is no need for the
drivers to deliver the entire struct property_set. The
function can just create the instance of it on its own and
bind the properties from the drivers to it on the spot.

This renames device_add_property_set() to
device_add_properties(). The function now takes struct
property_entry as its parameter instead of struct
property_set.

	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Acked-by: Thierry Reding <treding@nvidia.com>
	Acked-by: Lee Jones <lee.jones@linaro.org>
	Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit f4d05266032346531b9f889e26aa31a0cf2a9822)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm/mach-pxa/raumfeld.c
#	arch/arm/mach-tegra/board-paz00.c
#	drivers/base/platform.c
#	drivers/mfd/intel-lpss-acpi.c
#	drivers/mfd/intel-lpss-pci.c
diff --cc arch/arm/mach-pxa/raumfeld.c
index 969b0ba7fa70,e216433b56ed..000000000000
--- a/arch/arm/mach-pxa/raumfeld.c
+++ b/arch/arm/mach-pxa/raumfeld.c
@@@ -366,14 -367,22 +366,33 @@@ static struct pxaohci_platform_data rau
   * Rotary encoder input device
   */
  
++<<<<<<< HEAD
 +static struct rotary_encoder_platform_data raumfeld_rotary_encoder_info = {
 +	.steps		= 24,
 +	.axis		= REL_X,
 +	.relative_axis	= 1,
 +	.gpio_a		= GPIO_VOLENC_A,
 +	.gpio_b		= GPIO_VOLENC_B,
 +	.inverted_a	= 1,
 +	.inverted_b	= 0,
++=======
+ static struct gpiod_lookup_table raumfeld_rotary_gpios_table = {
+ 	.dev_id = "rotary-encoder.0",
+ 	.table = {
+ 		GPIO_LOOKUP_IDX("gpio-0",
+ 				GPIO_VOLENC_A, NULL, 0, GPIO_ACTIVE_LOW),
+ 		GPIO_LOOKUP_IDX("gpio-0",
+ 				GPIO_VOLENC_B, NULL, 1, GPIO_ACTIVE_HIGH),
+ 		{ },
+ 	},
+ };
+ 
+ static struct property_entry raumfeld_rotary_properties[] = {
+ 	PROPERTY_ENTRY_INTEGER("rotary-encoder,steps-per-period", u32, 24),
+ 	PROPERTY_ENTRY_INTEGER("linux,axis",			  u32, REL_X),
+ 	PROPERTY_ENTRY_INTEGER("rotary-encoder,relative_axis",	  u32, 1),
+ 	{ },
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  };
  
  static struct platform_device rotary_encoder_device = {
@@@ -1044,7 -1057,12 +1063,14 @@@ static void __init raumfeld_controller_
  	int ret;
  
  	pxa3xx_mfp_config(ARRAY_AND_SIZE(raumfeld_controller_pin_config));
++<<<<<<< HEAD
++=======
+ 
+ 	gpiod_add_lookup_table(&raumfeld_rotary_gpios_table);
+ 	device_add_properties(&rotary_encoder_device.dev,
+ 			      raumfeld_rotary_properties);
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  	platform_device_register(&rotary_encoder_device);
 -
  	spi_register_board_info(ARRAY_AND_SIZE(controller_spi_devices));
  	i2c_register_board_info(0, &raumfeld_controller_i2c_board_info, 1);
  
@@@ -1079,6 -1097,10 +1105,13 @@@ static void __init raumfeld_speaker_ini
  	i2c_register_board_info(0, &raumfeld_connector_i2c_board_info, 1);
  
  	platform_device_register(&smc91x_device);
++<<<<<<< HEAD
++=======
+ 
+ 	gpiod_add_lookup_table(&raumfeld_rotary_gpios_table);
+ 	device_add_properties(&rotary_encoder_device.dev,
+ 			      raumfeld_rotary_properties);
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  	platform_device_register(&rotary_encoder_device);
  
  	raumfeld_audio_init();
diff --cc arch/arm/mach-tegra/board-paz00.c
index 740e16f64728,7478f6fb3664..000000000000
--- a/arch/arm/mach-tegra/board-paz00.c
+++ b/arch/arm/mach-tegra/board-paz00.c
@@@ -17,16 -17,16 +17,23 @@@
   *
   */
  
 -#include <linux/property.h>
 -#include <linux/gpio/machine.h>
  #include <linux/platform_device.h>
 -
 +#include <linux/rfkill-gpio.h>
  #include "board.h"
 +#include "board-paz00.h"
  
++<<<<<<< HEAD
 +static struct rfkill_gpio_platform_data wifi_rfkill_platform_data = {
 +	.name		= "wifi_rfkill",
 +	.reset_gpio	= TEGRA_WIFI_RST,
 +	.shutdown_gpio	= TEGRA_WIFI_PWRN,
 +	.type	= RFKILL_TYPE_WLAN,
++=======
+ static struct property_entry __initdata wifi_rfkill_prop[] = {
+ 	PROPERTY_ENTRY_STRING("name", "wifi_rfkill"),
+ 	PROPERTY_ENTRY_STRING("type", "wlan"),
+ 	{ },
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  };
  
  static struct platform_device wifi_rfkill_device = {
@@@ -39,5 -45,7 +46,10 @@@
  
  void __init tegra_paz00_wifikill_init(void)
  {
++<<<<<<< HEAD
++=======
+ 	platform_device_add_properties(&wifi_rfkill_device, wifi_rfkill_prop);
+ 	gpiod_add_lookup_table(&wifi_gpio_lookup);
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  	platform_device_register(&wifi_rfkill_device);
  }
diff --cc drivers/base/platform.c
index 712f6728efc6,6482d47deb50..000000000000
--- a/drivers/base/platform.c
+++ b/drivers/base/platform.c
@@@ -399,11 -443,11 +399,16 @@@ void platform_device_del(struct platfor
  
  		for (i = 0; i < pdev->num_resources; i++) {
  			struct resource *r = &pdev->resource[i];
 -			if (r->parent)
 +			unsigned long type = resource_type(r);
 +
 +			if (type == IORESOURCE_MEM || type == IORESOURCE_IO)
  				release_resource(r);
  		}
++<<<<<<< HEAD
++=======
+ 
+ 		device_remove_properties(&pdev->dev);
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  	}
  }
  EXPORT_SYMBOL_GPL(platform_device_del);
diff --cc drivers/mfd/intel-lpss-acpi.c
index 3a7f4fbf115b,7ddc4a9563ea..000000000000
--- a/drivers/mfd/intel-lpss-acpi.c
+++ b/drivers/mfd/intel-lpss-acpi.c
@@@ -35,11 -36,22 +36,25 @@@ static const struct intel_lpss_platform
  	.properties = spt_i2c_properties,
  };
  
- static const struct intel_lpss_platform_info spt_i2c_info = {
- 	.clk_rate = 120000000,
- 	.pset = &spt_i2c_pset,
++<<<<<<< HEAD
++=======
+ static const struct intel_lpss_platform_info bxt_info = {
+ 	.clk_rate = 100000000,
+ };
+ 
+ static struct property_entry bxt_i2c_properties[] = {
+ 	PROPERTY_ENTRY_U32("i2c-sda-hold-time-ns", 42),
+ 	PROPERTY_ENTRY_U32("i2c-sda-falling-time-ns", 171),
+ 	PROPERTY_ENTRY_U32("i2c-scl-falling-time-ns", 208),
+ 	{ },
+ };
+ 
+ static const struct intel_lpss_platform_info bxt_i2c_info = {
+ 	.clk_rate = 133000000,
+ 	.properties = bxt_i2c_properties,
  };
  
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  static const struct acpi_device_id intel_lpss_acpi_ids[] = {
  	/* SPT */
  	{ "INT3446", (kernel_ulong_t)&spt_i2c_info },
diff --cc drivers/mfd/intel-lpss-pci.c
index 9c38a1af66f0,1d79a3c9370f..000000000000
--- a/drivers/mfd/intel-lpss-pci.c
+++ b/drivers/mfd/intel-lpss-pci.c
@@@ -104,10 -96,19 +96,25 @@@ static const struct intel_lpss_platform
  static const struct intel_lpss_platform_info bxt_uart_info = {
  	.clk_rate = 100000000,
  	.clk_con_id = "baudclk",
++<<<<<<< HEAD
++=======
+ 	.properties = uart_properties,
+ };
+ 
+ static struct property_entry bxt_i2c_properties[] = {
+ 	PROPERTY_ENTRY_U32("i2c-sda-hold-time-ns", 42),
+ 	PROPERTY_ENTRY_U32("i2c-sda-falling-time-ns", 171),
+ 	PROPERTY_ENTRY_U32("i2c-scl-falling-time-ns", 208),
+ 	{ },
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  };
  
  static const struct intel_lpss_platform_info bxt_i2c_info = {
  	.clk_rate = 133000000,
++<<<<<<< HEAD
++=======
+ 	.properties = bxt_i2c_properties,
++>>>>>>> f4d052660323 (device property: don't bother the drivers with struct property_set)
  };
  
  static const struct pci_device_id intel_lpss_pci_ids[] = {
* Unmerged path arch/arm/mach-pxa/raumfeld.c
* Unmerged path arch/arm/mach-tegra/board-paz00.c
* Unmerged path drivers/base/platform.c
diff --git a/drivers/base/property.c b/drivers/base/property.c
index d046257a58c4..6837edb6b0fa 100644
--- a/drivers/base/property.c
+++ b/drivers/base/property.c
@@ -18,6 +18,11 @@
 #include <linux/etherdevice.h>
 #include <linux/phy.h>
 
+struct property_set {
+	struct fwnode_handle fwnode;
+	struct property_entry *properties;
+};
+
 static inline bool is_pset_node(struct fwnode_handle *fwnode)
 {
 	return fwnode && fwnode->type == FWNODE_PDATA;
@@ -804,14 +809,14 @@ static struct property_set *pset_copy_set(const struct property_set *pset)
 }
 
 /**
- * device_remove_property_set - Remove properties from a device object.
+ * device_remove_properties - Remove properties from a device object.
  * @dev: Device whose properties to remove.
  *
  * The function removes properties previously associated to the device
- * secondary firmware node with device_add_property_set(). Memory allocated
+ * secondary firmware node with device_add_properties(). Memory allocated
  * to the properties will also be released.
  */
-void device_remove_property_set(struct device *dev)
+void device_remove_properties(struct device *dev)
 {
 	struct fwnode_handle *fwnode;
 
@@ -834,24 +839,27 @@ void device_remove_property_set(struct device *dev)
 		}
 	}
 }
-EXPORT_SYMBOL_GPL(device_remove_property_set);
+EXPORT_SYMBOL_GPL(device_remove_properties);
 
 /**
- * device_add_property_set - Add a collection of properties to a device object.
+ * device_add_properties - Add a collection of properties to a device object.
  * @dev: Device to add properties to.
- * @pset: Collection of properties to add.
+ * @properties: Collection of properties to add.
  *
- * Associate a collection of device properties represented by @pset with @dev
- * as its secondary firmware node. The function takes a copy of @pset.
+ * Associate a collection of device properties represented by @properties with
+ * @dev as its secondary firmware node. The function takes a copy of
+ * @properties.
  */
-int device_add_property_set(struct device *dev, const struct property_set *pset)
+int device_add_properties(struct device *dev, struct property_entry *properties)
 {
-	struct property_set *p;
+	struct property_set *p, pset;
 
-	if (!pset)
+	if (!properties)
 		return -EINVAL;
 
-	p = pset_copy_set(pset);
+	pset.properties = properties;
+
+	p = pset_copy_set(&pset);
 	if (IS_ERR(p))
 		return PTR_ERR(p);
 
@@ -859,7 +867,7 @@ int device_add_property_set(struct device *dev, const struct property_set *pset)
 	set_secondary_fwnode(dev, &p->fwnode);
 	return 0;
 }
-EXPORT_SYMBOL_GPL(device_add_property_set);
+EXPORT_SYMBOL_GPL(device_add_properties);
 
 /**
  * device_get_next_child_node - Return the next child node handle for a device
* Unmerged path drivers/mfd/intel-lpss-acpi.c
* Unmerged path drivers/mfd/intel-lpss-pci.c
diff --git a/drivers/mfd/intel-lpss.c b/drivers/mfd/intel-lpss.c
index fba29881b7d4..f1a9d8ae3231 100644
--- a/drivers/mfd/intel-lpss.c
+++ b/drivers/mfd/intel-lpss.c
@@ -412,7 +412,7 @@ int intel_lpss_probe(struct device *dev,
 	if (ret)
 		return ret;
 
-	lpss->cell->pset = info->pset;
+	lpss->cell->properties = info->properties;
 
 	intel_lpss_init_dev(lpss);
 
diff --git a/drivers/mfd/intel-lpss.h b/drivers/mfd/intel-lpss.h
index 764dc0d07325..c4681919e6db 100644
--- a/drivers/mfd/intel-lpss.h
+++ b/drivers/mfd/intel-lpss.h
@@ -16,14 +16,14 @@
 
 struct device;
 struct resource;
-struct property_set;
+struct property_entry;
 
 struct intel_lpss_platform_info {
 	struct resource *mem;
 	int irq;
 	unsigned long clk_rate;
 	const char *clk_con_id;
-	struct property_set *pset;
+	struct property_entry *properties;
 };
 
 int intel_lpss_probe(struct device *dev,
diff --git a/drivers/mfd/mfd-core.c b/drivers/mfd/mfd-core.c
index b186330c8988..8ba98a4ad857 100644
--- a/drivers/mfd/mfd-core.c
+++ b/drivers/mfd/mfd-core.c
@@ -156,8 +156,8 @@ static int mfd_add_device(struct device *parent, int id,
 			goto fail_res;
 	}
 
-	if (cell->pset) {
-		ret = platform_device_add_properties(pdev, cell->pset);
+	if (cell->properties) {
+		ret = platform_device_add_properties(pdev, cell->properties);
 		if (ret)
 			goto fail_res;
 	}
diff --git a/include/linux/mfd/core.h b/include/linux/mfd/core.h
index d021dc440b83..e41318ed4200 100644
--- a/include/linux/mfd/core.h
+++ b/include/linux/mfd/core.h
@@ -17,7 +17,7 @@
 #include <linux/platform_device.h>
 
 struct irq_domain;
-struct property_set;
+struct property_entry;
 
 /*
  * This struct describes the MFD part ("cell").
@@ -41,7 +41,7 @@ struct mfd_cell {
 	size_t			pdata_size;
 
 	/* device properties passed to the sub devices drivers */
-	const struct property_set *pset;
+	struct property_entry *properties;
 
 	/*
 	 * Device Tree compatible string
diff --git a/include/linux/platform_device.h b/include/linux/platform_device.h
index 68a2135a4bff..46ff05e8ace4 100644
--- a/include/linux/platform_device.h
+++ b/include/linux/platform_device.h
@@ -18,7 +18,7 @@
 #define PLATFORM_DEVID_AUTO	(-2)
 
 struct mfd_cell;
-struct property_set;
+struct property_entry;
 
 struct platform_device {
 	const char	*name;
@@ -71,7 +71,7 @@ struct platform_device_info {
 		size_t size_data;
 		u64 dma_mask;
 
-		const struct property_set *pset;
+		struct property_entry *properties;
 };
 extern struct platform_device *platform_device_register_full(
 		const struct platform_device_info *pdevinfo);
@@ -170,7 +170,7 @@ extern int platform_device_add_resources(struct platform_device *pdev,
 extern int platform_device_add_data(struct platform_device *pdev,
 				    const void *data, size_t size);
 extern int platform_device_add_properties(struct platform_device *pdev,
-					  const struct property_set *pset);
+					  struct property_entry *properties);
 extern int platform_device_add(struct platform_device *pdev);
 extern void platform_device_del(struct platform_device *pdev);
 extern void platform_device_put(struct platform_device *pdev);
diff --git a/include/linux/property.h b/include/linux/property.h
index b51fcd36d892..ecab11e40794 100644
--- a/include/linux/property.h
+++ b/include/linux/property.h
@@ -238,18 +238,9 @@ struct property_entry {
 	.name = _name_,				\
 }
 
-/**
- * struct property_set - Collection of "built-in" device properties.
- * @fwnode: Handle to be pointed to by the fwnode field of struct device.
- * @properties: Array of properties terminated with a null entry.
- */
-struct property_set {
-	struct fwnode_handle fwnode;
-	struct property_entry *properties;
-};
-
-int device_add_property_set(struct device *dev, const struct property_set *pset);
-void device_remove_property_set(struct device *dev);
+int device_add_properties(struct device *dev,
+			  struct property_entry *properties);
+void device_remove_properties(struct device *dev);
 
 bool device_dma_supported(struct device *dev);
 
