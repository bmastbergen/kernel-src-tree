net: Use fwmark reflection in PMTU discovery.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] Use fwmark reflection in PMTU discovery (Matteo Croce) [1469857]
Rebuild_FUZZ: 92.86%
commit-author Lorenzo Colitti <lorenzo@google.com>
commit 1b3c61dc1aebf5d3d6c3981ba3eedc1e66f3ecda
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1b3c61dc.failed

Currently, routing lookups used for Path PMTU Discovery in
absence of a socket or on unmarked sockets use a mark of 0.
This causes PMTUD not to work when using routing based on
netfilter fwmark mangling and fwmark ip rules, such as:

  iptables -j MARK --set-mark 17
  ip rule add fwmark 17 lookup 100

This patch causes these route lookups to use the fwmark from the
received ICMP error when the fwmark_reflect sysctl is enabled.
This allows the administrator to make PMTUD work by configuring
appropriate fwmark rules to mark the inbound ICMP packets.

Black-box tested using user-mode linux by pointing different
fwmarks at routing tables egressing on different interfaces, and
using iptables mangling to mark packets inbound on each interface
with the interface's fwmark. ICMPv4 and ICMPv6 PMTU discovery
work as expected when mark reflection is enabled and fail when
it is disabled.

	Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1b3c61dc1aebf5d3d6c3981ba3eedc1e66f3ecda)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv6/route.c
diff --cc net/ipv6/route.c
index bac9d71c26f1,f0a8ff9ed891..000000000000
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@@ -1433,8 -1176,7 +1433,12 @@@ void ip6_update_pmtu(struct sk_buff *sk
  
  	memset(&fl6, 0, sizeof(fl6));
  	fl6.flowi6_oif = oif;
++<<<<<<< HEAD
 +	fl6.flowi6_mark = mark;
 +	fl6.flowi6_flags = 0;
++=======
+ 	fl6.flowi6_mark = mark ? mark : IP6_REPLY_MARK(net, skb->mark);
++>>>>>>> 1b3c61dc1aeb (net: Use fwmark reflection in PMTU discovery.)
  	fl6.daddr = iph->daddr;
  	fl6.saddr = iph->saddr;
  	fl6.flowlabel = ip6_flowinfo(iph);
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index e9a2b0663f57..2c622f4574fd 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -1026,6 +1026,9 @@ void ipv4_update_pmtu(struct sk_buff *skb, struct net *net, u32 mtu,
 	struct flowi4 fl4;
 	struct rtable *rt;
 
+	if (!mark)
+		mark = IP4_REPLY_MARK(net, skb->mark);
+
 	__build_flow_key(&fl4, NULL, iph, oif,
 			 RT_TOS(iph->tos), protocol, mark, flow_flags);
 	rt = __ip_route_output_key(net, &fl4);
@@ -1043,6 +1046,10 @@ static void __ipv4_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, u32 mtu)
 	struct rtable *rt;
 
 	__build_flow_key(&fl4, sk, iph, 0, 0, 0, 0, 0);
+
+	if (!fl4.flowi4_mark)
+		fl4.flowi4_mark = IP4_REPLY_MARK(sock_net(sk), skb->mark);
+
 	rt = __ip_route_output_key(sock_net(sk), &fl4);
 	if (!IS_ERR(rt)) {
 		__ip_rt_update_pmtu(rt, &fl4, mtu);
* Unmerged path net/ipv6/route.c
