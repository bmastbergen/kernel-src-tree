dmaengine: dw: split dma-dw.h to platform and private parts

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: dmaengine: dw: split dma-dw.h to platform and private parts (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 95.16%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 3d588f83e4d6a5230d9094b97d38621cbaa9a972
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3d588f83.failed

The introduced include/linux/dma/dw.h is going to contain the private
extensions and structures which are shared for dw_dmac users in the kernel.
Meanwhile include/linux/platform_data/dma-dw.h keeps only platform related data
types and definitions.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Vinod Koul <vinod.koul@intel.com>
(cherry picked from commit 3d588f83e4d6a5230d9094b97d38621cbaa9a972)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/dw/internal.h
#	include/linux/dw_dmac.h
#	sound/atmel/abdac.c
#	sound/atmel/ac97c.c
diff --cc include/linux/dw_dmac.h
index bc411a1bf8e7,d8155c005242..000000000000
--- a/include/linux/dw_dmac.h
+++ b/include/linux/dw_dmac.h
@@@ -56,54 -56,4 +56,58 @@@ struct dw_dma_platform_data 
  	unsigned char	data_width[4];
  };
  
++<<<<<<< HEAD:include/linux/dw_dmac.h
 +/* bursts size */
 +enum dw_dma_msize {
 +	DW_DMA_MSIZE_1,
 +	DW_DMA_MSIZE_4,
 +	DW_DMA_MSIZE_8,
 +	DW_DMA_MSIZE_16,
 +	DW_DMA_MSIZE_32,
 +	DW_DMA_MSIZE_64,
 +	DW_DMA_MSIZE_128,
 +	DW_DMA_MSIZE_256,
 +};
 +
 +/* Platform-configurable bits in CFG_HI */
 +#define DWC_CFGH_FCMODE		(1 << 0)
 +#define DWC_CFGH_FIFO_MODE	(1 << 1)
 +#define DWC_CFGH_PROTCTL(x)	((x) << 2)
 +#define DWC_CFGH_SRC_PER(x)	((x) << 7)
 +#define DWC_CFGH_DST_PER(x)	((x) << 11)
 +
 +/* Platform-configurable bits in CFG_LO */
 +#define DWC_CFGL_LOCK_CH_XFER	(0 << 12)	/* scope of LOCK_CH */
 +#define DWC_CFGL_LOCK_CH_BLOCK	(1 << 12)
 +#define DWC_CFGL_LOCK_CH_XACT	(2 << 12)
 +#define DWC_CFGL_LOCK_BUS_XFER	(0 << 14)	/* scope of LOCK_BUS */
 +#define DWC_CFGL_LOCK_BUS_BLOCK	(1 << 14)
 +#define DWC_CFGL_LOCK_BUS_XACT	(2 << 14)
 +#define DWC_CFGL_LOCK_CH	(1 << 15)	/* channel lockout */
 +#define DWC_CFGL_LOCK_BUS	(1 << 16)	/* busmaster lockout */
 +#define DWC_CFGL_HS_DST_POL	(1 << 18)	/* dst handshake active low */
 +#define DWC_CFGL_HS_SRC_POL	(1 << 19)	/* src handshake active low */
 +
 +/* DMA API extensions */
 +struct dw_cyclic_desc {
 +	struct dw_desc	**desc;
 +	unsigned long	periods;
 +	void		(*period_callback)(void *param);
 +	void		*period_callback_param;
 +};
 +
 +struct dw_cyclic_desc *dw_dma_cyclic_prep(struct dma_chan *chan,
 +		dma_addr_t buf_addr, size_t buf_len, size_t period_len,
 +		enum dma_transfer_direction direction);
 +void dw_dma_cyclic_free(struct dma_chan *chan);
 +int dw_dma_cyclic_start(struct dma_chan *chan);
 +void dw_dma_cyclic_stop(struct dma_chan *chan);
 +
 +dma_addr_t dw_dma_get_src_addr(struct dma_chan *chan);
 +
 +dma_addr_t dw_dma_get_dst_addr(struct dma_chan *chan);
 +
 +#endif /* DW_DMAC_H */
++=======
+ #endif /* _PLATFORM_DATA_DMA_DW_H */
++>>>>>>> 3d588f83e4d6 (dmaengine: dw: split dma-dw.h to platform and private parts):include/linux/platform_data/dma-dw.h
diff --cc sound/atmel/abdac.c
index edf2ca72d518,31061e3521d4..000000000000
--- a/sound/atmel/abdac.c
+++ b/sound/atmel/abdac.c
@@@ -9,7 -9,6 +9,10 @@@
   */
  #include <linux/clk.h>
  #include <linux/bitmap.h>
++<<<<<<< HEAD
 +#include <linux/dw_dmac.h>
++=======
++>>>>>>> 3d588f83e4d6 (dmaengine: dw: split dma-dw.h to platform and private parts)
  #include <linux/dmaengine.h>
  #include <linux/dma-mapping.h>
  #include <linux/init.h>
diff --cc sound/atmel/ac97c.c
index 3a65b41c2901,b59427d5a697..000000000000
--- a/sound/atmel/ac97c.c
+++ b/sound/atmel/ac97c.c
@@@ -31,10 -31,10 +31,15 @@@
  #include <sound/atmel-ac97c.h>
  #include <sound/memalloc.h>
  
++<<<<<<< HEAD
 +#include <linux/dw_dmac.h>
++=======
+ #include <linux/platform_data/dma-dw.h>
+ #include <linux/dma/dw.h>
++>>>>>>> 3d588f83e4d6 (dmaengine: dw: split dma-dw.h to platform and private parts)
  
  #include <mach/cpu.h>
 +#include <mach/gpio.h>
  
  #ifdef CONFIG_ARCH_AT91
  #include <mach/hardware.h>
* Unmerged path drivers/dma/dw/internal.h
* Unmerged path drivers/dma/dw/internal.h
diff --git a/include/linux/dma/dw.h b/include/linux/dma/dw.h
new file mode 100644
index 000000000000..24756130eadb
--- /dev/null
+++ b/include/linux/dma/dw.h
@@ -0,0 +1,37 @@
+/*
+ * Driver for the Synopsys DesignWare DMA Controller
+ *
+ * Copyright (C) 2007 Atmel Corporation
+ * Copyright (C) 2010-2011 ST Microelectronics
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#ifndef _DMA_DW_H
+#define _DMA_DW_H
+
+#include <linux/dmaengine.h>
+
+/* DMA API extensions */
+struct dw_desc;
+
+struct dw_cyclic_desc {
+	struct dw_desc	**desc;
+	unsigned long	periods;
+	void		(*period_callback)(void *param);
+	void		*period_callback_param;
+};
+
+struct dw_cyclic_desc *dw_dma_cyclic_prep(struct dma_chan *chan,
+		dma_addr_t buf_addr, size_t buf_len, size_t period_len,
+		enum dma_transfer_direction direction);
+void dw_dma_cyclic_free(struct dma_chan *chan);
+int dw_dma_cyclic_start(struct dma_chan *chan);
+void dw_dma_cyclic_stop(struct dma_chan *chan);
+
+dma_addr_t dw_dma_get_src_addr(struct dma_chan *chan);
+
+dma_addr_t dw_dma_get_dst_addr(struct dma_chan *chan);
+
+#endif /* _DMA_DW_H */
* Unmerged path include/linux/dw_dmac.h
* Unmerged path sound/atmel/abdac.c
* Unmerged path sound/atmel/ac97c.c
