bnxt_en: Add support for XDP_TX action.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Add support for XDP_TX action (Jonathan Toppins) [1459659]
Rebuild_FUZZ: 98.70%
commit-author Michael Chan <michael.chan@broadcom.com>
commit 38413406277fd060f46855ad527f6f8d4cf2652d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/38413406.failed

Add dedicated transmit function and transmit completion handler for
XDP.  The XDP transmit logic and completion logic are different than
regular TX ring.  The TX buffer is recycled back to the RX ring when
it completes.

v3: Improved the buffer recyling scheme for XDP_TX.

v2: Add trace_xdp_exception().
    Add dma_sync.

	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Tested-by: Andy Gospodarek <gospo@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 38413406277fd060f46855ad527f6f8d4cf2652d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt.h
#	drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.h
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 10385773ecb6,cda1c787e8e1..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -2957,8 -3067,15 +2959,20 @@@ static int bnxt_alloc_mem(struct bnxt *
  		for (i = 0; i < bp->tx_nr_rings; i++, j++) {
  			bp->tx_ring[i].bnapi = bp->bnapi[j];
  			bp->bnapi[j]->tx_ring = &bp->tx_ring[i];
++<<<<<<< HEAD
 +			bp->tx_ring_map[i] = i;
 +			bp->tx_ring[i].txq_index = i;
++=======
+ 			bp->tx_ring_map[i] = bp->tx_nr_rings_xdp + i;
+ 			if (i >= bp->tx_nr_rings_xdp) {
+ 				bp->tx_ring[i].txq_index = i -
+ 					bp->tx_nr_rings_xdp;
+ 				bp->bnapi[j]->tx_int = bnxt_tx_int;
+ 			} else {
+ 				bp->bnapi[j]->flags |= BNXT_NAPI_FLAG_XDP;
+ 				bp->bnapi[j]->tx_int = bnxt_tx_int_xdp;
+ 			}
++>>>>>>> 38413406277f (bnxt_en: Add support for XDP_TX action.)
  		}
  
  		rc = bnxt_alloc_stats(bp);
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.h
index 5e8dec350fca,9f07b9cf8965..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@@ -1180,7 -1195,23 +1184,25 @@@ struct bnxt 
  #define SFF_MODULE_ID_QSFP28			0x11
  #define BNXT_MAX_PHY_I2C_RESP_SIZE		64
  
++<<<<<<< HEAD
++=======
+ static inline u32 bnxt_tx_avail(struct bnxt *bp, struct bnxt_tx_ring_info *txr)
+ {
+ 	/* Tell compiler to fetch tx indices from memory. */
+ 	barrier();
+ 
+ 	return bp->tx_ring_size -
+ 		((txr->tx_prod - txr->tx_cons) & bp->tx_ring_mask);
+ }
+ 
+ extern const u16 bnxt_lhint_arr[];
+ 
+ int bnxt_alloc_rx_data(struct bnxt *bp, struct bnxt_rx_ring_info *rxr,
+ 		       u16 prod, gfp_t gfp);
+ void bnxt_reuse_rx_data(struct bnxt_rx_ring_info *rxr, u16 cons, void *data);
+ void bnxt_set_tpa_flags(struct bnxt *bp);
++>>>>>>> 38413406277f (bnxt_en: Add support for XDP_TX action.)
  void bnxt_set_ring_params(struct bnxt *);
 -int bnxt_set_rx_skb_mode(struct bnxt *bp, bool page_mode);
  void bnxt_hwrm_cmd_hdr_init(struct bnxt *, void *, u16, u16, u16);
  int _hwrm_send_message(struct bnxt *, void *, u32, int);
  int hwrm_send_message(struct bnxt *, void *, u32, int);
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.h
