libceph: encode_{pgid,oloc}() helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ilya Dryomov <idryomov@gmail.com>
commit 2e59ffd1df4aba5289f04d362efc8432fac14949
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2e59ffd1.failed

Factor out encode_{pgid,oloc}() and use ceph_encode_string() for oid.

	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 2e59ffd1df4aba5289f04d362efc8432fac14949)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ceph/osd_client.c
diff --cc net/ceph/osd_client.c
index b6711b267e1a,b0298c3681b6..000000000000
--- a/net/ceph/osd_client.c
+++ b/net/ceph/osd_client.c
@@@ -538,6 -540,11 +538,14 @@@ struct ceph_osd_request *ceph_osdc_allo
  }
  EXPORT_SYMBOL(ceph_osdc_alloc_request);
  
++<<<<<<< HEAD
++=======
+ static int ceph_oloc_encoding_size(const struct ceph_object_locator *oloc)
+ {
+ 	return 8 + 4 + 4 + 4 + (oloc->pool_ns ? oloc->pool_ns->len : 0);
+ }
+ 
++>>>>>>> 2e59ffd1df4a (libceph: encode_{pgid,oloc}() helpers)
  int ceph_osdc_alloc_messages(struct ceph_osd_request *req, gfp_t gfp)
  {
  	struct ceph_osd_client *osdc = req->r_osdc;
@@@ -1502,24 -1534,10 +1532,31 @@@ static void encode_request(struct ceph_
  	memset(p, 0, sizeof(struct ceph_eversion));
  	p += sizeof(struct ceph_eversion);
  
++<<<<<<< HEAD
 +	/* oloc */
 +	ceph_encode_8(&p, 4);
 +	ceph_encode_8(&p, 4);
 +	ceph_encode_32(&p, 8 + 4 + 4);
 +	ceph_encode_64(&p, req->r_t.target_oloc.pool);
 +	ceph_encode_32(&p, -1); /* preferred */
 +	ceph_encode_32(&p, 0); /* key len */
 +
 +	/* pgid */
 +	ceph_encode_8(&p, 1);
 +	ceph_encode_64(&p, req->r_t.pgid.pool);
 +	ceph_encode_32(&p, req->r_t.pgid.seed);
 +	ceph_encode_32(&p, -1); /* preferred */
 +
 +	/* oid */
 +	ceph_encode_32(&p, req->r_t.target_oid.name_len);
 +	memcpy(p, req->r_t.target_oid.name, req->r_t.target_oid.name_len);
 +	p += req->r_t.target_oid.name_len;
++=======
+ 	encode_oloc(&p, end, &req->r_t.target_oloc);
+ 	encode_pgid(&p, &req->r_t.pgid);
+ 	ceph_encode_string(&p, end, req->r_t.target_oid.name,
+ 			   req->r_t.target_oid.name_len);
++>>>>>>> 2e59ffd1df4a (libceph: encode_{pgid,oloc}() helpers)
  
  	/* ops, can imply data */
  	ceph_encode_16(&p, req->r_num_ops);
* Unmerged path net/ceph/osd_client.c
