net/mlx5e: IPoIB, TX TIS creation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: IPoIB, TX TIS creation (Don Dutile) [1385325 1499362]
Rebuild_FUZZ: 93.55%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit 5426a0b2746a629eed8608397a385f34081f3f66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5426a0b2.failed

Modify mlx5e tis creation function to accept underlay qp number, which
will be needed by IPoIB.

Implement mlx5i (IPoIB) tx init/cleanup netdevice profile flows to
create one TIS with the IPoIB underlay qp, for IPoIB TX SQs.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Erez Shitrit <erezsh@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5426a0b2746a629eed8608397a385f34081f3f66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index f6e3d4bf0928,5345d875b695..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -903,10 -999,25 +903,22 @@@ int mlx5e_attr_get(struct net_device *d
  void mlx5e_handle_rx_cqe_rep(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
  void mlx5e_update_hw_rep_counters(struct mlx5e_priv *priv);
  
 -/* common netdev helpers */
 -int mlx5e_create_indirect_rqt(struct mlx5e_priv *priv);
 -
 -int mlx5e_create_indirect_tirs(struct mlx5e_priv *priv);
 -void mlx5e_destroy_indirect_tirs(struct mlx5e_priv *priv);
 -
  int mlx5e_create_direct_rqts(struct mlx5e_priv *priv);
 -void mlx5e_destroy_direct_rqts(struct mlx5e_priv *priv);
 +void mlx5e_destroy_rqt(struct mlx5e_priv *priv, struct mlx5e_rqt *rqt);
  int mlx5e_create_direct_tirs(struct mlx5e_priv *priv);
  void mlx5e_destroy_direct_tirs(struct mlx5e_priv *priv);
++<<<<<<< HEAD
++=======
+ void mlx5e_destroy_rqt(struct mlx5e_priv *priv, struct mlx5e_rqt *rqt);
+ 
+ int mlx5e_create_ttc_table(struct mlx5e_priv *priv, u32 underlay_qpn);
+ void mlx5e_destroy_ttc_table(struct mlx5e_priv *priv);
+ 
+ int mlx5e_create_tis(struct mlx5_core_dev *mdev, int tc,
+ 		     u32 underlay_qpn, u32 *tisn);
+ void mlx5e_destroy_tis(struct mlx5_core_dev *mdev, u32 tisn);
+ 
++>>>>>>> 5426a0b2746a (net/mlx5e: IPoIB, TX TIS creation)
  int mlx5e_create_tises(struct mlx5e_priv *priv);
  void mlx5e_cleanup_nic_tx(struct mlx5e_priv *priv);
  int mlx5e_close(struct net_device *netdev);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index fc92406a15c4,1fde4e2301a4..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -2392,17 -2751,17 +2392,17 @@@ err_destroy_cq
  	return err;
  }
  
 -static void mlx5e_close_drop_rq(struct mlx5e_rq *drop_rq)
 +static void mlx5e_close_drop_rq(struct mlx5e_priv *priv)
  {
 -	mlx5e_destroy_rq(drop_rq);
 -	mlx5e_free_rq(drop_rq);
 -	mlx5e_destroy_cq(&drop_rq->cq);
 -	mlx5e_free_cq(&drop_rq->cq);
 +	mlx5e_disable_rq(&priv->drop_rq);
 +	mlx5e_destroy_rq(&priv->drop_rq);
 +	mlx5e_disable_cq(&priv->drop_rq.cq);
 +	mlx5e_destroy_cq(&priv->drop_rq.cq);
  }
  
- static int mlx5e_create_tis(struct mlx5e_priv *priv, int tc)
+ int mlx5e_create_tis(struct mlx5_core_dev *mdev, int tc,
+ 		     u32 underlay_qpn, u32 *tisn)
  {
- 	struct mlx5_core_dev *mdev = priv->mdev;
  	u32 in[MLX5_ST_SZ_DW(create_tis_in)] = {0};
  	void *tisc = MLX5_ADDR_OF(create_tis_in, in, ctx);
  
@@@ -2445,11 -2805,12 +2446,11 @@@ void mlx5e_cleanup_nic_tx(struct mlx5e_
  	int tc;
  
  	for (tc = 0; tc < priv->profile->max_tc; tc++)
- 		mlx5e_destroy_tis(priv, tc);
+ 		mlx5e_destroy_tis(priv->mdev, priv->tisn[tc]);
  }
  
 -static void mlx5e_build_indir_tir_ctx(struct mlx5e_priv *priv,
 -				      enum mlx5e_traffic_types tt,
 -				      u32 *tirc)
 +static void mlx5e_build_indir_tir_ctx(struct mlx5e_priv *priv, u32 *tirc,
 +				      enum mlx5e_traffic_types tt)
  {
  	MLX5_SET(tirc, tirc, transport_domain, priv->mdev->mlx5e_res.td.tdn);
  
@@@ -3309,6 -3810,67 +3310,70 @@@ u32 mlx5e_choose_lro_timeout(struct mlx
  	return MLX5_CAP_ETH(mdev, lro_timer_supported_periods[i]);
  }
  
++<<<<<<< HEAD
++=======
+ void mlx5e_build_nic_params(struct mlx5_core_dev *mdev,
+ 			    struct mlx5e_params *params,
+ 			    u16 max_channels)
+ {
+ 	u8 cq_period_mode = 0;
+ 	u32 link_speed = 0;
+ 	u32 pci_bw = 0;
+ 
+ 	params->num_channels = max_channels;
+ 	params->num_tc       = 1;
+ 
+ 	/* SQ */
+ 	params->log_sq_size = is_kdump_kernel() ?
+ 		MLX5E_PARAMS_MINIMUM_LOG_SQ_SIZE :
+ 		MLX5E_PARAMS_DEFAULT_LOG_SQ_SIZE;
+ 
+ 	/* set CQE compression */
+ 	params->rx_cqe_compress_def = false;
+ 	if (MLX5_CAP_GEN(mdev, cqe_compression) &&
+ 	     MLX5_CAP_GEN(mdev, vport_group_manager)) {
+ 		mlx5e_get_max_linkspeed(mdev, &link_speed);
+ 		mlx5e_get_pci_bw(mdev, &pci_bw);
+ 		mlx5_core_dbg(mdev, "Max link speed = %d, PCI BW = %d\n",
+ 			       link_speed, pci_bw);
+ 		params->rx_cqe_compress_def = cqe_compress_heuristic(link_speed, pci_bw);
+ 	}
+ 	MLX5E_SET_PFLAG(params, MLX5E_PFLAG_RX_CQE_COMPRESS, params->rx_cqe_compress_def);
+ 
+ 	/* RQ */
+ 	mlx5e_set_rq_params(mdev, params);
+ 
+ 	/* HW LRO */
+ 	/* TODO: && MLX5_CAP_ETH(mdev, lro_cap) */
+ 	if (params->rq_wq_type == MLX5_WQ_TYPE_LINKED_LIST_STRIDING_RQ)
+ 		params->lro_en = true;
+ 	params->lro_timeout = mlx5e_choose_lro_timeout(mdev, MLX5E_DEFAULT_LRO_TIMEOUT);
+ 
+ 	/* CQ moderation params */
+ 	cq_period_mode = MLX5_CAP_GEN(mdev, cq_period_start_from_cqe) ?
+ 			MLX5_CQ_PERIOD_MODE_START_FROM_CQE :
+ 			MLX5_CQ_PERIOD_MODE_START_FROM_EQE;
+ 	params->rx_am_enabled = MLX5_CAP_GEN(mdev, cq_moderation);
+ 	mlx5e_set_rx_cq_mode_params(params, cq_period_mode);
+ 
+ 	params->tx_cq_moderation.usec = MLX5E_PARAMS_DEFAULT_TX_CQ_MODERATION_USEC;
+ 	params->tx_cq_moderation.pkts = MLX5E_PARAMS_DEFAULT_TX_CQ_MODERATION_PKTS;
+ 
+ 	/* TX inline */
+ 	params->tx_max_inline = mlx5e_get_max_inline_cap(mdev);
+ 	mlx5_query_min_inline(mdev, &params->tx_min_inline_mode);
+ 	if (params->tx_min_inline_mode == MLX5_INLINE_MODE_NONE &&
+ 	    !MLX5_CAP_ETH(mdev, wqe_vlan_insert))
+ 		params->tx_min_inline_mode = MLX5_INLINE_MODE_L2;
+ 
+ 	/* RSS */
+ 	params->rss_hfunc = ETH_RSS_HASH_XOR;
+ 	netdev_rss_key_fill(params->toeplitz_hash_key, sizeof(params->toeplitz_hash_key));
+ 	mlx5e_build_default_indir_rqt(mdev, params->indirection_rqt,
+ 				      MLX5E_INDIR_RQT_SIZE, max_channels);
+ }
+ 
++>>>>>>> 5426a0b2746a (net/mlx5e: IPoIB, TX TIS creation)
  static void mlx5e_build_nic_netdev_priv(struct mlx5_core_dev *mdev,
  					struct net_device *netdev,
  					const struct mlx5e_profile *profile,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c b/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
index 2f65927a8d03..4a15bad4a5f3 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
@@ -56,13 +56,23 @@ static void mlx5i_cleanup(struct mlx5e_priv *priv)
 
 static int mlx5i_init_tx(struct mlx5e_priv *priv)
 {
+	struct mlx5i_priv *ipriv = priv->ppriv;
+	int err;
+
 	/* TODO: Create IPoIB underlay QP */
-	/* TODO: create IPoIB TX HW TIS */
+
+	err = mlx5e_create_tis(priv->mdev, 0 /* tc */, ipriv->qp.qpn, &priv->tisn[0]);
+	if (err) {
+		mlx5_core_warn(priv->mdev, "create tis failed, %d\n", err);
+		return err;
+	}
+
 	return 0;
 }
 
-static void mlx5i_cleanup_tx(struct mlx5e_priv *priv)
+void mlx5i_cleanup_tx(struct mlx5e_priv *priv)
 {
+	mlx5e_destroy_tis(priv->mdev, priv->tisn[0]);
 }
 
 static int mlx5i_init_rx(struct mlx5e_priv *priv)
