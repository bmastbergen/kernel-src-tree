x86/hyper-v: Support extended CPU ranges for TLB flush hypercalls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] hyper-v: Support extended CPU ranges for TLB flush hypercalls (Vitaly Kuznetsov) [1465471]
Rebuild_FUZZ: 96.83%
commit-author Vitaly Kuznetsov <vkuznets@redhat.com>
commit 628f54cc6451d2706ba8a56763dbf93be02aaa80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/628f54cc.failed

Hyper-V hosts may support more than 64 vCPUs, we need to use
HVCALL_FLUSH_VIRTUAL_ADDRESS_SPACE_EX/LIST_EX hypercalls in this
case.

	Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
	Reviewed-by: Stephen Hemminger <sthemmin@microsoft.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Haiyang Zhang <haiyangz@microsoft.com>
	Cc: Jork Loeser <Jork.Loeser@microsoft.com>
	Cc: K. Y. Srinivasan <kys@microsoft.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Simon Xiao <sixiao@microsoft.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: devel@linuxdriverproject.org
Link: http://lkml.kernel.org/r/20170802160921.21791-9-vkuznets@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 628f54cc6451d2706ba8a56763dbf93be02aaa80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/hyperv/mmu.c
#	arch/x86/include/uapi/asm/hyperv.h
diff --cc arch/x86/include/uapi/asm/hyperv.h
index bd4aafaa6956,7032f4d8dff3..000000000000
--- a/arch/x86/include/uapi/asm/hyperv.h
+++ b/arch/x86/include/uapi/asm/hyperv.h
@@@ -142,6 -144,25 +142,28 @@@
   */
  #define HV_X64_RELAXED_TIMING_RECOMMENDED	(1 << 5)
  
++<<<<<<< HEAD
++=======
+ /*
+  * Virtual APIC support
+  */
+ #define HV_X64_DEPRECATING_AEOI_RECOMMENDED	(1 << 9)
+ 
+ /* Recommend using the newer ExProcessorMasks interface */
+ #define HV_X64_EX_PROCESSOR_MASKS_RECOMMENDED	(1 << 11)
+ 
+ /*
+  * HV_VP_SET available
+  */
+ #define HV_X64_EX_PROCESSOR_MASKS_RECOMMENDED	(1 << 11)
+ 
+ 
+ /*
+  * Crash notification flag.
+  */
+ #define HV_CRASH_CTL_CRASH_NOTIFY (1ULL << 63)
+ 
++>>>>>>> 628f54cc6451 (x86/hyper-v: Support extended CPU ranges for TLB flush hypercalls)
  /* MSR used to identify the guest OS. */
  #define HV_X64_MSR_GUEST_OS_ID			0x40000000
  
@@@ -221,7 -245,13 +243,14 @@@
  		(~((1ull << HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_SHIFT) - 1))
  
  /* Declare the various hypercall operations. */
 -#define HVCALL_FLUSH_VIRTUAL_ADDRESS_SPACE	0x0002
 -#define HVCALL_FLUSH_VIRTUAL_ADDRESS_LIST	0x0003
  #define HVCALL_NOTIFY_LONG_SPIN_WAIT		0x0008
++<<<<<<< HEAD
++=======
+ #define HVCALL_FLUSH_VIRTUAL_ADDRESS_SPACE_EX  0x0013
+ #define HVCALL_FLUSH_VIRTUAL_ADDRESS_LIST_EX   0x0014
+ #define HVCALL_POST_MESSAGE			0x005c
+ #define HVCALL_SIGNAL_EVENT			0x005d
++>>>>>>> 628f54cc6451 (x86/hyper-v: Support extended CPU ranges for TLB flush hypercalls)
  
  #define HV_X64_MSR_APIC_ASSIST_PAGE_ENABLE		0x00000001
  #define HV_X64_MSR_APIC_ASSIST_PAGE_ADDRESS_SHIFT	12
@@@ -236,6 -266,16 +265,19 @@@
  #define HV_PROCESSOR_POWER_STATE_C2		2
  #define HV_PROCESSOR_POWER_STATE_C3		3
  
++<<<<<<< HEAD
++=======
+ #define HV_FLUSH_ALL_PROCESSORS			BIT(0)
+ #define HV_FLUSH_ALL_VIRTUAL_ADDRESS_SPACES	BIT(1)
+ #define HV_FLUSH_NON_GLOBAL_MAPPINGS_ONLY	BIT(2)
+ #define HV_FLUSH_USE_EXTENDED_RANGE_FORMAT	BIT(3)
+ 
+ enum HV_GENERIC_SET_FORMAT {
+ 	HV_GENERIC_SET_SPARCE_4K,
+ 	HV_GENERIC_SET_ALL,
+ };
+ 
++>>>>>>> 628f54cc6451 (x86/hyper-v: Support extended CPU ranges for TLB flush hypercalls)
  /* hypercall status code */
  #define HV_STATUS_SUCCESS			0
  #define HV_STATUS_INVALID_HYPERCALL_CODE	2
* Unmerged path arch/x86/hyperv/mmu.c
* Unmerged path arch/x86/hyperv/mmu.c
* Unmerged path arch/x86/include/uapi/asm/hyperv.h
