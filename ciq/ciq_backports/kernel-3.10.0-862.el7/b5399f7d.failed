scsi: qla2xxx: Remove datasegs_per_cmd and datasegs_per_cont field

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Remove datasegs_per_cmd and datasegs_per_cont field (Himanshu Madhani) [1460030]
Rebuild_FUZZ: 95.24%
commit-author Quinn Tran <quinn.tran@cavium.com>
commit b5399f7d80a249fafa870d8da9fcd0d077d943b9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b5399f7d.failed

These fields only hold one set of value. Replace it with macros to
reduce cache thrash.

	Signed-off-by: Quinn Tran <quinn.tran@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit b5399f7d80a249fafa870d8da9fcd0d077d943b9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_target.c
diff --cc drivers/scsi/qla2xxx/qla_target.c
index 7a27b61e2d53,84e813002982..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.c
+++ b/drivers/scsi/qla2xxx/qla_target.c
@@@ -1462,16 -2223,43 +1462,55 @@@ static int qlt_pci_map_calc_cnt(struct 
  
  	prm->cmd->sg_mapped = 1;
  
++<<<<<<< HEAD
 +	/*
 +	 * If greater than four sg entries then we need to allocate
 +	 * the continuation entries
 +	 */
 +	if (prm->seg_cnt > prm->tgt->datasegs_per_cmd)
 +		prm->req_cnt += DIV_ROUND_UP(prm->seg_cnt -
 +		    prm->tgt->datasegs_per_cmd, prm->tgt->datasegs_per_cont);
++=======
+ 	if (cmd->se_cmd.prot_op == TARGET_PROT_NORMAL) {
+ 		/*
+ 		 * If greater than four sg entries then we need to allocate
+ 		 * the continuation entries
+ 		 */
+ 		if (prm->seg_cnt > QLA_TGT_DATASEGS_PER_CMD_24XX)
+ 			prm->req_cnt += DIV_ROUND_UP(prm->seg_cnt -
+ 			QLA_TGT_DATASEGS_PER_CMD_24XX,
+ 			QLA_TGT_DATASEGS_PER_CONT_24XX);
+ 	} else {
+ 		/* DIF */
+ 		if ((cmd->se_cmd.prot_op == TARGET_PROT_DIN_INSERT) ||
+ 		    (cmd->se_cmd.prot_op == TARGET_PROT_DOUT_STRIP)) {
+ 			prm->seg_cnt = DIV_ROUND_UP(cmd->bufflen, cmd->blk_sz);
+ 			prm->tot_dsds = prm->seg_cnt;
+ 		} else
+ 			prm->tot_dsds = prm->seg_cnt;
+ 
+ 		if (cmd->prot_sg_cnt) {
+ 			prm->prot_sg      = cmd->prot_sg;
+ 			prm->prot_seg_cnt = pci_map_sg(cmd->qpair->pdev,
+ 				cmd->prot_sg, cmd->prot_sg_cnt,
+ 				cmd->dma_data_direction);
+ 			if (unlikely(prm->prot_seg_cnt == 0))
+ 				goto out_err;
+ 
+ 			if ((cmd->se_cmd.prot_op == TARGET_PROT_DIN_INSERT) ||
+ 			    (cmd->se_cmd.prot_op == TARGET_PROT_DOUT_STRIP)) {
+ 				/* Dif Bundling not support here */
+ 				prm->prot_seg_cnt = DIV_ROUND_UP(cmd->bufflen,
+ 								cmd->blk_sz);
+ 				prm->tot_dsds += prm->prot_seg_cnt;
+ 			} else
+ 				prm->tot_dsds += prm->prot_seg_cnt;
+ 		}
+ 	}
++>>>>>>> b5399f7d80a2 (scsi: qla2xxx: Remove datasegs_per_cmd and datasegs_per_cont field)
  
 +	ql_dbg(ql_dbg_tgt, prm->cmd->vha, 0xe009, "seg_cnt=%d, req_cnt=%d\n",
 +	    prm->seg_cnt, prm->req_cnt);
  	return 0;
  
  out_err:
@@@ -4323,11 -6162,8 +4362,9 @@@ int qlt_add_target(struct qla_hw_data *
  	ql_dbg(ql_dbg_tgt, base_vha, 0xe067,
  		"qla_target(%d): using 64 Bit PCI addressing",
  		base_vha->vp_idx);
 +	tgt->tgt_enable_64bit_addr = 1;
  	/* 3 is reserved */
  	tgt->sg_tablesize = QLA_TGT_MAX_SG_24XX(base_vha->req->length - 3);
- 	tgt->datasegs_per_cmd = QLA_TGT_DATASEGS_PER_CMD_24XX;
- 	tgt->datasegs_per_cont = QLA_TGT_DATASEGS_PER_CONT_24XX;
  
  	mutex_lock(&qla_tgt_mutex);
  	list_add_tail(&tgt->tgt_list_entry, &qla_tgt_glist);
* Unmerged path drivers/scsi/qla2xxx/qla_target.c
diff --git a/drivers/scsi/qla2xxx/qla_target.h b/drivers/scsi/qla2xxx/qla_target.h
index b33e411f28a0..01126b0d981a 100644
--- a/drivers/scsi/qla2xxx/qla_target.h
+++ b/drivers/scsi/qla2xxx/qla_target.h
@@ -760,7 +760,7 @@ struct qla_tgt {
 	 */
 	int irq_cmd_count;
 
-	int datasegs_per_cmd, datasegs_per_cont, sg_tablesize;
+	int sg_tablesize;
 
 	/* Target's flags, serialized by pha->hardware_lock */
 	unsigned int tgt_enable_64bit_addr:1; /* 64-bits PCI addr enabled */
