netvsc: fix RCU warning in get_stats

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 776e726bfb3493f71bb11759f7a60f1b0f6dd2d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/776e726b.failed

The statistics functionis called with RTNL held during probe
but with RCU held during access from /proc and elsewhere.
This is safe so update the lockdep annotation.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 776e726bfb3493f71bb11759f7a60f1b0f6dd2d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index 1f2fdf8f9b74,97d0b5875cd5..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -936,38 -939,43 +936,43 @@@ out
  	return ret;
  }
  
 -static void netvsc_get_stats64(struct net_device *net,
 -			       struct rtnl_link_stats64 *t)
 +static struct rtnl_link_stats64 *netvsc_get_stats64(struct net_device *net,
 +						    struct rtnl_link_stats64 *t)
  {
  	struct net_device_context *ndev_ctx = netdev_priv(net);
++<<<<<<< HEAD
 +	int cpu;
++=======
+ 	struct netvsc_device *nvdev = rcu_dereference_rtnl(ndev_ctx->nvdev);
+ 	int i;
 -
 -	if (!nvdev)
 -		return;
 -
 -	for (i = 0; i < nvdev->num_chn; i++) {
 -		const struct netvsc_channel *nvchan = &nvdev->chan_table[i];
 -		const struct netvsc_stats *stats;
 -		u64 packets, bytes, multicast;
++>>>>>>> 776e726bfb34 (netvsc: fix RCU warning in get_stats)
 +
 +	for_each_possible_cpu(cpu) {
 +		struct netvsc_stats *tx_stats = per_cpu_ptr(ndev_ctx->tx_stats,
 +							    cpu);
 +		struct netvsc_stats *rx_stats = per_cpu_ptr(ndev_ctx->rx_stats,
 +							    cpu);
 +		u64 tx_packets, tx_bytes, rx_packets, rx_bytes, rx_multicast;
  		unsigned int start;
  
 -		stats = &nvchan->tx_stats;
  		do {
 -			start = u64_stats_fetch_begin_irq(&stats->syncp);
 -			packets = stats->packets;
 -			bytes = stats->bytes;
 -		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
 +			start = u64_stats_fetch_begin_irq(&tx_stats->syncp);
 +			tx_packets = tx_stats->packets;
 +			tx_bytes = tx_stats->bytes;
 +		} while (u64_stats_fetch_retry_irq(&tx_stats->syncp, start));
  
 -		t->tx_bytes	+= bytes;
 -		t->tx_packets	+= packets;
 -
 -		stats = &nvchan->rx_stats;
  		do {
 -			start = u64_stats_fetch_begin_irq(&stats->syncp);
 -			packets = stats->packets;
 -			bytes = stats->bytes;
 -			multicast = stats->multicast + stats->broadcast;
 -		} while (u64_stats_fetch_retry_irq(&stats->syncp, start));
 -
 -		t->rx_bytes	+= bytes;
 -		t->rx_packets	+= packets;
 -		t->multicast	+= multicast;
 +			start = u64_stats_fetch_begin_irq(&rx_stats->syncp);
 +			rx_packets = rx_stats->packets;
 +			rx_bytes = rx_stats->bytes;
 +			rx_multicast = rx_stats->multicast + rx_stats->broadcast;
 +		} while (u64_stats_fetch_retry_irq(&rx_stats->syncp, start));
 +
 +		t->tx_bytes	+= tx_bytes;
 +		t->tx_packets	+= tx_packets;
 +		t->rx_bytes	+= rx_bytes;
 +		t->rx_packets	+= rx_packets;
 +		t->multicast	+= rx_multicast;
  	}
  
  	t->tx_dropped	= net->stats.tx_dropped;
* Unmerged path drivers/net/hyperv/netvsc_drv.c
