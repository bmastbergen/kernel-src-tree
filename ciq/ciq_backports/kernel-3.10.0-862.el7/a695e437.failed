drm/amdgpu: fix error handling in amdgpu_bo_do_create

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Christian König <christian.koenig@amd.com>
commit a695e43712242c354748e9bae5d137d4337a7694
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a695e437.failed

The bo structure is freed up in case of an error, so we can't do any
accounting if that happens.

	Signed-off-by: Christian König <christian.koenig@amd.com>
	Reviewed-by: Michel Dänzer <michel.daenzer@amd.com>
CC: stable@vger.kernel.org
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit a695e43712242c354748e9bae5d137d4337a7694)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/amdgpu/amdgpu_object.c
diff --cc drivers/gpu/drm/amd/amdgpu/amdgpu_object.c
index bf79b73e1538,ea25164e7f4b..000000000000
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_object.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_object.c
@@@ -368,23 -359,30 +368,43 @@@ int amdgpu_bo_create_restricted(struct 
  	 */
  	if (!drm_arch_can_wc_memory())
  		bo->flags &= ~AMDGPU_GEM_CREATE_CPU_GTT_USWC;
 -#endif
 -
 -	bo->tbo.bdev = &adev->mman.bdev;
 -	amdgpu_ttm_placement_from_domain(bo, domain);
  
 -	initial_bytes_moved = atomic64_read(&adev->num_bytes_moved);
 +	amdgpu_fill_placement_to_bo(bo, placement);
  	/* Kernel allocation are uninterruptible */
++<<<<<<< HEAD
 +
 +	if (!resv) {
 +		bool locked;
 +
 +		reservation_object_init(&bo->tbo.ttm_resv);
 +		locked = ww_mutex_trylock(&bo->tbo.ttm_resv.lock);
 +		WARN_ON(!locked);
 +	}
 +	r = ttm_bo_init(&adev->mman.bdev, &bo->tbo, size, type,
 +			&bo->placement, page_align, !kernel, NULL,
 +			acc_size, sg, resv ? resv : &bo->tbo.ttm_resv,
 +			&amdgpu_ttm_bo_destroy);
 +	if (unlikely(r != 0))
 +		return r;
++=======
+ 	r = ttm_bo_init_reserved(&adev->mman.bdev, &bo->tbo, size, type,
+ 				 &bo->placement, page_align, !kernel, NULL,
+ 				 acc_size, sg, resv, &amdgpu_ttm_bo_destroy);
+ 	if (unlikely(r != 0))
+ 		return r;
+ 
+ 	bytes_moved = atomic64_read(&adev->num_bytes_moved) -
+ 		      initial_bytes_moved;
+ 	if (adev->mc.visible_vram_size < adev->mc.real_vram_size &&
+ 	    bo->tbo.mem.mem_type == TTM_PL_VRAM &&
+ 	    bo->tbo.mem.start < adev->mc.visible_vram_size >> PAGE_SHIFT)
+ 		amdgpu_cs_report_moved_bytes(adev, bytes_moved, bytes_moved);
+ 	else
+ 		amdgpu_cs_report_moved_bytes(adev, bytes_moved, 0);
+ 
+ 	if (kernel)
+ 		bo->tbo.priority = 1;
++>>>>>>> a695e4371224 (drm/amdgpu: fix error handling in amdgpu_bo_do_create)
  
  	if (flags & AMDGPU_GEM_CREATE_VRAM_CLEARED &&
  	    bo->tbo.mem.placement & TTM_PL_FLAG_VRAM) {
* Unmerged path drivers/gpu/drm/amd/amdgpu/amdgpu_object.c
