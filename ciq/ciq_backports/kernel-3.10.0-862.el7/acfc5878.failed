crypto: gf128mul - The x8_ble multiplication functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [crypto] gf128mul - The x8_ble multiplication functions (Arjun Vynipadath) [1542351]
Rebuild_FUZZ: 92.00%
commit-author Harsh Jain <harsh@chelsio.com>
commit acfc587810bea08fdd62c9d5ed7cefe8be874a4f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/acfc5878.failed

It multiply GF(2^128) elements in the ble format.
It will be used by chelsio driver to speed up gf multiplication.

	Signed-off-by: Harsh Jain <harsh@chelsio.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit acfc587810bea08fdd62c9d5ed7cefe8be874a4f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/crypto/gf128mul.h
diff --cc include/crypto/gf128mul.h
index da2530e34b26,fa0a63d298dc..000000000000
--- a/include/crypto/gf128mul.h
+++ b/include/crypto/gf128mul.h
@@@ -172,12 -225,12 +172,18 @@@ struct gf128mul_4k 
  
  struct gf128mul_4k *gf128mul_init_4k_lle(const be128 *g);
  struct gf128mul_4k *gf128mul_init_4k_bbe(const be128 *g);
++<<<<<<< HEAD
 +void gf128mul_4k_lle(be128 *a, struct gf128mul_4k *t);
 +void gf128mul_4k_bbe(be128 *a, struct gf128mul_4k *t);
 +
++=======
+ void gf128mul_4k_lle(be128 *a, const struct gf128mul_4k *t);
+ void gf128mul_4k_bbe(be128 *a, const struct gf128mul_4k *t);
+ void gf128mul_x8_ble(le128 *r, const le128 *x);
++>>>>>>> acfc587810be (crypto: gf128mul - The x8_ble multiplication functions)
  static inline void gf128mul_free_4k(struct gf128mul_4k *t)
  {
 -	kzfree(t);
 +	kfree(t);
  }
  
  
diff --git a/crypto/gf128mul.c b/crypto/gf128mul.c
index c07ef2ec480a..b86e3fb52224 100644
--- a/crypto/gf128mul.c
+++ b/crypto/gf128mul.c
@@ -186,6 +186,19 @@ static void gf128mul_x8_bbe(be128 *x)
 	x->b = cpu_to_be64((b << 8) ^ _tt);
 }
 
+void gf128mul_x8_ble(le128 *r, const le128 *x)
+{
+	u64 a = le64_to_cpu(x->a);
+	u64 b = le64_to_cpu(x->b);
+
+	/* equivalent to gf128mul_table_be[b >> 63] (see crypto/gf128mul.c): */
+	u64 _tt = gf128mul_table_be[a >> 56];
+
+	r->a = cpu_to_le64((a << 8) | (b >> 56));
+	r->b = cpu_to_le64((b << 8) ^ _tt);
+}
+EXPORT_SYMBOL(gf128mul_x8_ble);
+
 void gf128mul_lle(be128 *r, const be128 *b)
 {
 	be128 p[8];
* Unmerged path include/crypto/gf128mul.h
