blk-mq-tag: remove redundant check for 'data->hctx' being non-NULL

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jens Axboe <axboe@fb.com>
commit 8cecb07d70e761eb0112f921d939b9ab2ea2171f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8cecb07d.failed

We used to pass in NULL for hctx for reserved tags, but we don't
do that anymore. Hence the check for whether hctx is NULL or not
is now redundant, kill it.

	Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
Fixes: a642a158aec6 ("blk-mq-tag: cleanup the normal/reserved tag allocation")
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 8cecb07d70e761eb0112f921d939b9ab2ea2171f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-tag.c
diff --cc block/blk-mq-tag.c
index 7e6885bccaac,5504eb7ed10b..000000000000
--- a/block/blk-mq-tag.c
+++ b/block/blk-mq-tag.c
@@@ -278,11 -136,9 +278,14 @@@ static int bt_get(struct blk_mq_alloc_d
  		/*
  		 * We're out of tags on this hardware queue, kick any
  		 * pending IO submits before going to sleep waiting for
- 		 * some to complete. Note that hctx can be NULL here for
- 		 * reserved tag allocation.
+ 		 * some to complete.
  		 */
++<<<<<<< HEAD
 +		if (hctx)
 +			blk_mq_run_hw_queue(hctx, false);
++=======
+ 		blk_mq_run_hw_queue(data->hctx, false);
++>>>>>>> 8cecb07d70e7 (blk-mq-tag: remove redundant check for 'data->hctx' being non-NULL)
  
  		/*
  		 * Retry tag allocation after running the hardware queue,
* Unmerged path block/blk-mq-tag.c
