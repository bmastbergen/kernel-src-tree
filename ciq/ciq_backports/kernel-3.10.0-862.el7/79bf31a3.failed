md: fix a race condition for flush request handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [md] fix a race condition for flush request handling (Nigel Croxon) [1506338]
Rebuild_FUZZ: 95.92%
commit-author Shaohua Li <shli@fb.com>
commit 79bf31a3b2a7ca467cfec8ff97d359a77065d01f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/79bf31a3.failed

md_submit_flush_data calls pers->make_request, which missed the suspend check.
Fix it with the new md_handle_request API.

	Reported-by: Nate Dailey <nate.dailey@stratus.com>
	Tested-by: Nate Dailey <nate.dailey@stratus.com>
Fix: cc27b0c78c79(md: fix deadlock between mddev_suspend() and md_write_start())
	Cc: stable@vger.kernel.org
	Reviewed-by: NeilBrown <neilb@suse.com>
	Signed-off-by: Shaohua Li <shli@fb.com>
(cherry picked from commit 79bf31a3b2a7ca467cfec8ff97d359a77065d01f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/md.c
diff --cc drivers/md/md.c
index 4c75b0e4a2a4,0ff1bbf6c90e..000000000000
--- a/drivers/md/md.c
+++ b/drivers/md/md.c
@@@ -436,16 -447,22 +436,31 @@@ static void md_submit_flush_data(struc
  	struct mddev *mddev = container_of(ws, struct mddev, flush_work);
  	struct bio *bio = mddev->flush_bio;
  
++<<<<<<< HEAD
 +	if (bio->bi_size == 0)
++=======
+ 	/*
+ 	 * must reset flush_bio before calling into md_handle_request to avoid a
+ 	 * deadlock, because other bios passed md_handle_request suspend check
+ 	 * could wait for this and below md_handle_request could wait for those
+ 	 * bios because of suspend check
+ 	 */
+ 	mddev->flush_bio = NULL;
+ 	wake_up(&mddev->sb_wait);
+ 
+ 	if (bio->bi_iter.bi_size == 0)
++>>>>>>> 79bf31a3b2a7 (md: fix a race condition for flush request handling)
  		/* an empty barrier - all done */
 -		bio_endio(bio);
 +		bio_endio(bio, 0);
  	else {
++<<<<<<< HEAD
 +		bio->bi_rw &= ~REQ_FLUSH;
 +		mddev->pers->make_request(mddev, bio);
++=======
+ 		bio->bi_opf &= ~REQ_PREFLUSH;
+ 		md_handle_request(mddev, bio);
++>>>>>>> 79bf31a3b2a7 (md: fix a race condition for flush request handling)
  	}
- 
- 	mddev->flush_bio = NULL;
- 	wake_up(&mddev->sb_wait);
  }
  
  void md_flush_request(struct mddev *mddev, struct bio *bio)
* Unmerged path drivers/md/md.c
