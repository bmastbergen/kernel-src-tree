block: move existing elevator ops to union

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [block] move existing elevator ops to union (Ming Lei) [1458104]
Rebuild_FUZZ: 90.91%
commit-author Jens Axboe <axboe@fb.com>
commit c51ca6cf545bc51ad38bd50816bde37c647d608d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c51ca6cf.failed

Prep patch for adding MQ ops as well, since doing anon unions with
named initializers doesn't work on older compilers.

	Signed-off-by: Jens Axboe <axboe@fb.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Bart Van Assche <bart.vanassche@sandisk.com>
	Reviewed-by: Omar Sandoval <osandov@fb.com>
(cherry picked from commit c51ca6cf545bc51ad38bd50816bde37c647d608d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-merge.c
#	block/elevator.c
diff --cc block/blk-merge.c
index 0e8b7f203168,480570b691dc..000000000000
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@@ -536,6 -761,12 +536,15 @@@ int attempt_front_merge(struct request_
  int blk_attempt_req_merge(struct request_queue *q, struct request *rq,
  			  struct request *next)
  {
++<<<<<<< HEAD
++=======
+ 	struct elevator_queue *e = q->elevator;
+ 
+ 	if (e->type->ops.sq.elevator_allow_rq_merge_fn)
+ 		if (!e->type->ops.sq.elevator_allow_rq_merge_fn(q, rq, next))
+ 			return 0;
+ 
++>>>>>>> c51ca6cf545b (block: move existing elevator ops to union)
  	return attempt_merge(q, rq, next);
  }
  
diff --cc block/elevator.c
index 0070ed26a3c0,022a26830297..000000000000
--- a/block/elevator.c
+++ b/block/elevator.c
@@@ -58,8 -58,8 +58,13 @@@ static int elv_iosched_allow_merge(stru
  	struct request_queue *q = rq->q;
  	struct elevator_queue *e = q->elevator;
  
++<<<<<<< HEAD
 +	if (e->type->ops.elevator_allow_merge_fn)
 +		return e->type->ops.elevator_allow_merge_fn(q, rq, bio);
++=======
+ 	if (e->type->ops.sq.elevator_allow_bio_merge_fn)
+ 		return e->type->ops.sq.elevator_allow_bio_merge_fn(q, rq, bio);
++>>>>>>> c51ca6cf545b (block: move existing elevator ops to union)
  
  	return 1;
  }
@@@ -516,10 -508,10 +521,10 @@@ void elv_merge_requests(struct request_
  			     struct request *next)
  {
  	struct elevator_queue *e = q->elevator;
 -	const int next_sorted = next->rq_flags & RQF_SORTED;
 +	const int next_sorted = next->cmd_flags & REQ_SORTED;
  
- 	if (next_sorted && e->type->ops.elevator_merge_req_fn)
- 		e->type->ops.elevator_merge_req_fn(q, rq, next);
+ 	if (next_sorted && e->type->ops.sq.elevator_merge_req_fn)
+ 		e->type->ops.sq.elevator_merge_req_fn(q, rq, next);
  
  	elv_rqhash_reposition(q, rq);
  
@@@ -536,14 -528,14 +541,14 @@@ void elv_bio_merged(struct request_queu
  {
  	struct elevator_queue *e = q->elevator;
  
- 	if (e->type->ops.elevator_bio_merged_fn)
- 		e->type->ops.elevator_bio_merged_fn(q, rq, bio);
+ 	if (e->type->ops.sq.elevator_bio_merged_fn)
+ 		e->type->ops.sq.elevator_bio_merged_fn(q, rq, bio);
  }
  
 -#ifdef CONFIG_PM
 +#ifdef CONFIG_PM_RUNTIME
  static void blk_pm_requeue_request(struct request *rq)
  {
 -	if (rq->q->dev && !(rq->rq_flags & RQF_PM))
 +	if (rq->q->dev && !(rq->cmd_flags & REQ_PM))
  		rq->q->nr_pending--;
  }
  
@@@ -718,16 -710,16 +723,21 @@@ void elv_put_request(struct request_que
  {
  	struct elevator_queue *e = q->elevator;
  
- 	if (e->type->ops.elevator_put_req_fn)
- 		e->type->ops.elevator_put_req_fn(rq);
+ 	if (e->type->ops.sq.elevator_put_req_fn)
+ 		e->type->ops.sq.elevator_put_req_fn(rq);
  }
  
 -int elv_may_queue(struct request_queue *q, unsigned int op)
 +int elv_may_queue(struct request_queue *q, int rw)
  {
  	struct elevator_queue *e = q->elevator;
  
++<<<<<<< HEAD
 +	if (e->type->ops.elevator_may_queue_fn)
 +		return e->type->ops.elevator_may_queue_fn(q, rw);
++=======
+ 	if (e->type->ops.sq.elevator_may_queue_fn)
+ 		return e->type->ops.sq.elevator_may_queue_fn(q, op);
++>>>>>>> c51ca6cf545b (block: move existing elevator ops to union)
  
  	return ELV_MQUEUE_MAY;
  }
@@@ -741,9 -733,9 +751,15 @@@ void elv_completed_request(struct reque
  	 */
  	if (blk_account_rq(rq)) {
  		q->in_flight[rq_is_sync(rq)]--;
++<<<<<<< HEAD
 +		if ((rq->cmd_flags & REQ_SORTED) &&
 +		    e->type->ops.elevator_completed_req_fn)
 +			e->type->ops.elevator_completed_req_fn(q, rq);
++=======
+ 		if ((rq->rq_flags & RQF_SORTED) &&
+ 		    e->type->ops.sq.elevator_completed_req_fn)
+ 			e->type->ops.sq.elevator_completed_req_fn(q, rq);
++>>>>>>> c51ca6cf545b (block: move existing elevator ops to union)
  	}
  }
  
diff --git a/block/blk-ioc.c b/block/blk-ioc.c
index 3be61baa1810..bc44d929b01f 100644
--- a/block/blk-ioc.c
+++ b/block/blk-ioc.c
@@ -44,8 +44,8 @@ static void ioc_exit_icq(struct io_cq *icq)
 	if (icq->flags & ICQ_EXITED)
 		return;
 
-	if (et->ops.elevator_exit_icq_fn)
-		et->ops.elevator_exit_icq_fn(icq);
+	if (et->ops.sq.elevator_exit_icq_fn)
+		et->ops.sq.elevator_exit_icq_fn(icq);
 
 	icq->flags |= ICQ_EXITED;
 }
@@ -383,8 +383,8 @@ struct io_cq *ioc_create_icq(struct io_context *ioc, struct request_queue *q,
 	if (likely(!radix_tree_insert(&ioc->icq_tree, q->id, icq))) {
 		hlist_add_head(&icq->ioc_node, &ioc->icq_list);
 		list_add(&icq->q_node, &q->icq_list);
-		if (et->ops.elevator_init_icq_fn)
-			et->ops.elevator_init_icq_fn(icq);
+		if (et->ops.sq.elevator_init_icq_fn)
+			et->ops.sq.elevator_init_icq_fn(icq);
 	} else {
 		kmem_cache_free(et->icq_cache, icq);
 		icq = ioc_lookup_icq(ioc, q);
* Unmerged path block/blk-merge.c
diff --git a/block/blk.h b/block/blk.h
index 4d1760d40372..9e94c229a036 100644
--- a/block/blk.h
+++ b/block/blk.h
@@ -174,7 +174,7 @@ static inline struct request *__elv_next_request(struct request_queue *q)
 			return NULL;
 		}
 		if (unlikely(blk_queue_bypass(q)) ||
-		    !q->elevator->type->ops.elevator_dispatch_fn(q, 0))
+		    !q->elevator->type->ops.sq.elevator_dispatch_fn(q, 0))
 			return NULL;
 	}
 }
@@ -183,16 +183,16 @@ static inline void elv_activate_rq(struct request_queue *q, struct request *rq)
 {
 	struct elevator_queue *e = q->elevator;
 
-	if (e->type->ops.elevator_activate_req_fn)
-		e->type->ops.elevator_activate_req_fn(q, rq);
+	if (e->type->ops.sq.elevator_activate_req_fn)
+		e->type->ops.sq.elevator_activate_req_fn(q, rq);
 }
 
 static inline void elv_deactivate_rq(struct request_queue *q, struct request *rq)
 {
 	struct elevator_queue *e = q->elevator;
 
-	if (e->type->ops.elevator_deactivate_req_fn)
-		e->type->ops.elevator_deactivate_req_fn(q, rq);
+	if (e->type->ops.sq.elevator_deactivate_req_fn)
+		e->type->ops.sq.elevator_deactivate_req_fn(q, rq);
 }
 
 #ifdef CONFIG_FAIL_IO_TIMEOUT
diff --git a/block/cfq-iosched.c b/block/cfq-iosched.c
index 4bf045b4882d..04343e5110a9 100644
--- a/block/cfq-iosched.c
+++ b/block/cfq-iosched.c
@@ -4572,7 +4572,7 @@ static struct elv_fs_entry cfq_attrs[] = {
 };
 
 static struct elevator_type iosched_cfq = {
-	.ops = {
+	.ops.sq = {
 		.elevator_merge_fn = 		cfq_merge,
 		.elevator_merged_fn =		cfq_merged_request,
 		.elevator_merge_req_fn =	cfq_merged_requests,
diff --git a/block/deadline-iosched.c b/block/deadline-iosched.c
index df729d4c1b71..606f9c6e6fa1 100644
--- a/block/deadline-iosched.c
+++ b/block/deadline-iosched.c
@@ -441,7 +441,7 @@ static struct elv_fs_entry deadline_attrs[] = {
 };
 
 static struct elevator_type iosched_deadline = {
-	.ops = {
+	.ops.sq = {
 		.elevator_merge_fn = 		deadline_merge,
 		.elevator_merged_fn =		deadline_merged_request,
 		.elevator_merge_req_fn =	deadline_merged_requests,
* Unmerged path block/elevator.c
diff --git a/block/noop-iosched.c b/block/noop-iosched.c
index 3de89d4690f3..03c5d693ecbb 100644
--- a/block/noop-iosched.c
+++ b/block/noop-iosched.c
@@ -92,7 +92,7 @@ static void noop_exit_queue(struct elevator_queue *e)
 }
 
 static struct elevator_type elevator_noop = {
-	.ops = {
+	.ops.sq = {
 		.elevator_merge_req_fn		= noop_merged_requests,
 		.elevator_dispatch_fn		= noop_dispatch,
 		.elevator_add_req_fn		= noop_add_request,
diff --git a/include/linux/elevator.h b/include/linux/elevator.h
index 297200f44dc5..5bacf06d67c8 100644
--- a/include/linux/elevator.h
+++ b/include/linux/elevator.h
@@ -89,7 +89,9 @@ struct elevator_type
 	struct kmem_cache *icq_cache;
 
 	/* fields provided by elevator implementation */
-	struct elevator_ops ops;
+	union {
+		struct elevator_ops sq;
+	} ops;
 	size_t icq_size;	/* see iocontext.h */
 	size_t icq_align;	/* ditto */
 	struct elv_fs_entry *elevator_attrs;
