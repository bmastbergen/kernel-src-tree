sysfs: separate out dup filename warning into a separate function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Tejun Heo <tj@kernel.org>
commit d1c1459e45944e336a968acce1e459c9effcde47
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d1c1459e.failed

Separate out sysfs_warn_dup() out of sysfs_add_one().  This will help
separating out the core sysfs functionalities into kernfs so that it
can be used by non-sysfs users too.

This doesn't make any functional changes.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit d1c1459e45944e336a968acce1e459c9effcde47)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/dir.c
#	fs/sysfs/sysfs.h
diff --cc fs/sysfs/dir.c
index fd502d3fc9fc,de47ed32d5c7..000000000000
--- a/fs/sysfs/dir.c
+++ b/fs/sysfs/dir.c
@@@ -506,19 -513,10 +523,25 @@@ int sysfs_add_one(struct sysfs_addrm_cx
  {
  	int ret;
  
++<<<<<<< HEAD
 +	ret = __sysfs_add_one(acxt, sd);
 +	if (ret == -EEXIST) {
 +		char *path = kzalloc(PATH_MAX, GFP_KERNEL);
 +		WARN(1, KERN_WARNING
 +		     "sysfs: cannot create duplicate filename '%s'\n",
 +		     (path == NULL) ? sd->s_name
 +				    : (sysfs_pathname(acxt->parent_sd, path),
 +				       strlcat(path, "/", PATH_MAX),
 +				       strlcat(path, sd->s_name, PATH_MAX),
 +				       path));
 +		kfree(path);
 +	}
++=======
+ 	ret = __sysfs_add_one(acxt, sd, parent_sd);
++>>>>>>> d1c1459e4594 (sysfs: separate out dup filename warning into a separate function)
  
+ 	if (ret == -EEXIST)
+ 		sysfs_warn_dup(parent_sd, sd->s_name);
  	return ret;
  }
  
diff --cc fs/sysfs/sysfs.h
index e18c3f38727c,05d063fe69c7..000000000000
--- a/fs/sysfs/sysfs.h
+++ b/fs/sysfs/sysfs.h
@@@ -164,11 -167,15 +164,23 @@@ extern const struct inode_operations sy
  
  struct sysfs_dirent *sysfs_get_active(struct sysfs_dirent *sd);
  void sysfs_put_active(struct sysfs_dirent *sd);
++<<<<<<< HEAD
 +void sysfs_addrm_start(struct sysfs_addrm_cxt *acxt,
 +		       struct sysfs_dirent *parent_sd);
 +int __sysfs_add_one(struct sysfs_addrm_cxt *acxt, struct sysfs_dirent *sd);
 +int sysfs_add_one(struct sysfs_addrm_cxt *acxt, struct sysfs_dirent *sd);
 +void sysfs_remove_one(struct sysfs_addrm_cxt *acxt, struct sysfs_dirent *sd);
++=======
+ void sysfs_addrm_start(struct sysfs_addrm_cxt *acxt);
+ void sysfs_warn_dup(struct sysfs_dirent *parent, const char *name);
+ int __sysfs_add_one(struct sysfs_addrm_cxt *acxt, struct sysfs_dirent *sd,
+ 		    struct sysfs_dirent *parent_sd);
+ int sysfs_add_one(struct sysfs_addrm_cxt *acxt, struct sysfs_dirent *sd,
+ 		  struct sysfs_dirent *parent_sd);
+ void sysfs_remove(struct sysfs_dirent *sd);
+ int sysfs_hash_and_remove(struct sysfs_dirent *dir_sd, const char *name,
+ 			  const void *ns);
++>>>>>>> d1c1459e4594 (sysfs: separate out dup filename warning into a separate function)
  void sysfs_addrm_finish(struct sysfs_addrm_cxt *acxt);
  
  struct sysfs_dirent *sysfs_find_dirent(struct sysfs_dirent *parent_sd,
* Unmerged path fs/sysfs/dir.c
* Unmerged path fs/sysfs/sysfs.h
