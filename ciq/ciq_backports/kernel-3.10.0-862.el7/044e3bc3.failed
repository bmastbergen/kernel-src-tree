sysfs: use generic_file_llseek() for sysfs_file_operations

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Tejun Heo <tj@kernel.org>
commit 044e3bc33391b1f2769d5ab2c04f246c3d8e04c3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/044e3bc3.failed

13c589d5b0ac6 ("sysfs: use seq_file when reading regular files")
converted regular sysfs files to use seq_file.  The commit substituted
generic_file_llseek() with seq_lseek() for llseek implementation.

Before the change, all regular sysfs files were allowed to seek to any
position in [0, PAGE_SIZE] as the file size is always PAGE_SIZE and
generic_file_llseek() allows any seeking inside the range under file
size; however, seq_lseek()'s behavior is different.  It traverses the
output by repeatedly invoking ->show() until it reaches the target
offset or traversal indicates EOF.  As seq_files are fully dynamic and
may not end at all, it doesn't support seeking from the end
(SEEK_END).

Apparently, there are userland tools which uses SEEK_END to discover
the buffer size to use and the switch to seq_lseek() disturbs them as
SEEK_END fails with -EINVAL.

The only benefits of using seq_lseek() instead of
generic_file_llseek() are

* Early failure.  If traversing to certain file position should fail,
  seq_lseek() will report such failures on lseek(2) instead of the
  following read/write operations.

* EOF detection.  While SEEK_END is not supported, SEEK_SET/CUR +
  large offset can be used to detect eof - eof at the time of the seek
  anyway as the file size may change dynamically.

Both aren't necessary for sysfs or prospect kernfs users.  Revert to
genefic_file_llseek() and preserve the original behavior.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Reported-by: Heiko Carstens <heiko.carstens@de.ibm.com>
Link: https://lkml.kernel.org/r/20131031114358.GA5551@osiris
	Tested-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 044e3bc33391b1f2769d5ab2c04f246c3d8e04c3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/file.c
diff --cc fs/sysfs/file.c
index d8887c896abc,79b5da2acbe1..000000000000
--- a/fs/sysfs/file.c
+++ b/fs/sysfs/file.c
@@@ -484,9 -798,19 +484,22 @@@ void sysfs_notify(struct kobject *k, co
  EXPORT_SYMBOL_GPL(sysfs_notify);
  
  const struct file_operations sysfs_file_operations = {
++<<<<<<< HEAD
 +	.read		= sysfs_read_file,
++=======
+ 	.read		= seq_read,
+ 	.write		= sysfs_write_file,
+ 	.llseek		= generic_file_llseek,
+ 	.open		= sysfs_open_file,
+ 	.release	= sysfs_release,
+ 	.poll		= sysfs_poll,
+ };
+ 
+ const struct file_operations sysfs_bin_operations = {
+ 	.read		= sysfs_bin_read,
++>>>>>>> 044e3bc33391 (sysfs: use generic_file_llseek() for sysfs_file_operations)
  	.write		= sysfs_write_file,
  	.llseek		= generic_file_llseek,
 -	.mmap		= sysfs_bin_mmap,
  	.open		= sysfs_open_file,
  	.release	= sysfs_release,
  	.poll		= sysfs_poll,
* Unmerged path fs/sysfs/file.c
