net/mlx4_en: Refactor mlx4_en_free_tx_desc

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx4_en: Refactor mlx4_en_free_tx_desc (Don Dutile) [1499363 1456692]
Rebuild_FUZZ: 95.00%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 4c07c132408a685d31bb6e638aef4d245e30703a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/4c07c132.failed

Some code re-ordering, functionally equivalent.

- The !tx_info->inl check is evaluated anyway in both flows
  (common case/end case). Run it first, this might finish
  the flows earlier.
- dma_unmap calls are identical in both flows, get it out
  of the if block into the common area.

Performance tests:
Tested on ConnectX3Pro, Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz

Gain is too small to be measurable, no degradation sensed.
Results are similar for IPv4 and IPv6.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Reviewed-by: Saeed Mahameed <saeedm@mellanox.com>
	Cc: kernel-team@fb.com
	Cc: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 4c07c132408a685d31bb6e638aef4d245e30703a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_tx.c
diff --cc drivers/net/ethernet/mellanox/mlx4/en_tx.c
index 8c25cc789ee8,7d69d939ee2d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_tx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_tx.c
@@@ -290,19 -289,20 +290,36 @@@ static u32 mlx4_en_free_tx_desc(struct 
  		skb_tstamp_tx(skb, &hwts);
  	}
  
++<<<<<<< HEAD
 +	/* Optimize the common case when there are no wraparounds */
 +	if (likely((void *) tx_desc + tx_info->nr_txbb * TXBB_SIZE <= end)) {
 +		if (!tx_info->inl) {
 +			if (tx_info->linear)
 +				dma_unmap_single(priv->ddev,
 +						tx_info->map0_dma,
 +						tx_info->map0_byte_count,
 +						PCI_DMA_TODEVICE);
 +			else
 +				dma_unmap_page(priv->ddev,
 +					       tx_info->map0_dma,
 +					       tx_info->map0_byte_count,
 +					       PCI_DMA_TODEVICE);
++=======
+ 	if (!tx_info->inl) {
+ 		if (tx_info->linear)
+ 			dma_unmap_single(priv->ddev,
+ 					 tx_info->map0_dma,
+ 					 tx_info->map0_byte_count,
+ 					 PCI_DMA_TODEVICE);
+ 		else
+ 			dma_unmap_page(priv->ddev,
+ 				       tx_info->map0_dma,
+ 				       tx_info->map0_byte_count,
+ 				       PCI_DMA_TODEVICE);
+ 		/* Optimize the common case when there are no wraparounds */
+ 		if (likely((void *)tx_desc +
+ 			   (tx_info->nr_txbb << LOG_TXBB_SIZE) <= end)) {
++>>>>>>> 4c07c132408a (net/mlx4_en: Refactor mlx4_en_free_tx_desc)
  			for (i = 1; i < nr_maps; i++) {
  				data++;
  				dma_unmap_page(priv->ddev,
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_tx.c
