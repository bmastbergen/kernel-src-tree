tools/power turbostat: support "--hide C1" etc.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [tools] power turbostat: support "--hide C1" etc (Prarit Bhargava) [1514290]
Rebuild_FUZZ: 91.95%
commit-author Len Brown <len.brown@intel.com>
commit dd778a5e6bbd0f52f34c61ae9b42b725c5f22398
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/dd778a5e.failed

Originally, the only way to hide the sysfs C-state statistics columns
was with "--hide sysfs".  This was because we process "--hide" before
we probe for those columns.

hack --hide to remember deferred hide requests, and apply
them when sysfs is probed.

"--hide sysfs" is still available as short-hand to refer to
the entire group of counters.

The down-side of this change is that we no longer error check for
bogus --hide column names.  But the user will quickly figure that
out if a column they mean to hide is still there...

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit dd778a5e6bbd0f52f34c61ae9b42b725c5f22398)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.8
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.8
index 0863a08025ac,fedca3285326..000000000000
--- a/tools/power/x86/turbostat/turbostat.8
+++ b/tools/power/x86/turbostat/turbostat.8
@@@ -103,52 -108,110 +103,87 @@@ Note that multiple CPUs per core indica
  \fBPKG_%\fP percent of the interval that RAPL throttling was active on the Package.
  \fBRAM_%\fP percent of the interval that RAPL throttling was active on DRAM.
  .fi
 -.SH TOO MUCH INFORMATION EXAMPLE
 -By default, turbostat dumps all possible information -- a system configuration header, followed by columns for all counters.
 -This is ideal for remote debugging, use the "--out" option to save everything to a text file, and get that file to the expert helping you debug.
  .PP
++<<<<<<< HEAD
 +.SH PERIODIC EXAMPLE
 +Without any parameters, turbostat displays statistics ever 5 seconds.
++=======
+ When you are not interested in all that information, and there are several ways to see only what you want.  First the "--quiet" option will skip the configuration information, and turbostat will show only the counter columns.  Second, you can reduce the columns with the "--hide" and "--show" options.  If you use the "--show" option, then turbostat will show only the columns you list.  If you use the "--hide" option, turbostat will show all columns, except the ones you list.
+ .PP
+ To find out what columns are available for --show and --hide, the "--list" option is available.  For convenience, the special strings "sysfs" can be used to refer to all of the sysfs C-state counters at once:
+ .nf
+ sudo ./turbostat --show sysfs --quiet sleep 10
+ 10.003837 sec
+ 	C1	C1E	C3	C6	C7s	C1%	C1E%	C3%	C6%	C7s%
+ 	4	21	2	2	459	0.14	0.82	0.00	0.00	98.93
+ 	1	17	2	2	130	0.00	0.02	0.00	0.00	99.80
+ 	0	0	0	0	31	0.00	0.00	0.00	0.00	99.95
+ 	2	1	0	0	52	1.14	6.49	0.00	0.00	92.21
+ 	1	2	0	0	52	0.00	0.08	0.00	0.00	99.86
+ 	0	0	0	0	71	0.00	0.00	0.00	0.00	99.89
+ 	0	0	0	0	25	0.00	0.00	0.00	0.00	99.96
+ 	0	0	0	0	74	0.00	0.00	0.00	0.00	99.94
+ 	0	1	0	0	24	0.00	0.00	0.00	0.00	99.84
+ .fi
+ .PP
+ .SH ONE SHOT COMMAND EXAMPLE
+ If turbostat is invoked with a command, it will fork that command
+ and output the statistics gathered after the command exits.
+ In this case, turbostat output goes to stderr, by default.
+ Output can instead be saved to a file using the --out option.
+ In this example, the "sleep 10" command is forked, and turbostat waits for it to complete before saving all statistics into "ts.out".  Note that "sleep 10" is not part of turbostat, but is simply an example of a command that turbostat can fork.  The "ts.out" file is what you want to edit in a very wide window, paste into a spreadsheet, or attach to a bugzilla entry.
+ 
+ .nf
+ [root@hsw]# ./turbostat -o ts.out sleep 10
+ [root@hsw]#
+ .fi
+ 
+ .SH PERIODIC INTERVAL EXAMPLE
+ Without a command to fork, turbostat displays statistics ever 5 seconds.
++>>>>>>> dd778a5e6bbd (tools/power turbostat: support "--hide C1" etc.)
  Periodic output goes to stdout, by default, unless --out is used to specify an output file.
 -The 5-second interval can be changed with the "-i sec" option.
 +The 5-second interval can be changed with th "-i sec" option.
 +Or a command may be specified as in "FORK EXAMPLE" below.
 +
 +The first row of statistics is a summary for the entire system.
 +For residency % columns, the summary is a weighted average.
 +For Temperature columns, the summary is the column maximum.
 +For Watts columns, the summary is a system total.
 +Subsequent rows show per-CPU statistics.
 +
  .nf
 -sudo ./turbostat --quiet --hide sysfs,IRQ,SMI,CoreTmp,PkgTmp,GFX%rc6,GFXMHz,PkgWatt,CorWatt,GFXWatt
 -	Core	CPU	Avg_MHz	Busy%	Bzy_MHz	TSC_MHz	CPU%c1	CPU%c3	CPU%c6	CPU%c7
 -	-	-	488	12.52	3900	3498	12.50	0.00	0.00	74.98
 -	0	0	5	0.13	3900	3498	99.87	0.00	0.00	0.00
 -	0	4	3897	99.99	3900	3498	0.01
 -	1	1	0	0.00	3856	3498	0.01	0.00	0.00	99.98
 -	1	5	0	0.00	3861	3498	0.01
 -	2	2	1	0.02	3889	3498	0.03	0.00	0.00	99.95
 -	2	6	0	0.00	3863	3498	0.05
 -	3	3	0	0.01	3869	3498	0.02	0.00	0.00	99.97
 -	3	7	0	0.00	3878	3498	0.03
 -	Core	CPU	Avg_MHz	Busy%	Bzy_MHz	TSC_MHz	CPU%c1	CPU%c3	CPU%c6	CPU%c7
 -	-	-	491	12.59	3900	3498	12.42	0.00	0.00	74.99
 -	0	0	27	0.69	3900	3498	99.31	0.00	0.00	0.00
 -	0	4	3898	99.99	3900	3498	0.01
 -	1	1	0	0.00	3883	3498	0.01	0.00	0.00	99.99
 -	1	5	0	0.00	3898	3498	0.01
 -	2	2	0	0.01	3889	3498	0.02	0.00	0.00	99.98
 -	2	6	0	0.00	3889	3498	0.02
 -	3	3	0	0.00	3856	3498	0.01	0.00	0.00	99.99
 -	3	7	0	0.00	3897	3498	0.01
 +[root@ivy]# ./turbostat
 +    Core     CPU Avg_MHz   Busy% Bzy_MHz TSC_MHz     SMI  CPU%c1  CPU%c3  CPU%c6  CPU%c7 CoreTmp  PkgTmp Pkg%pc2 Pkg%pc3 Pkg%pc6 Pkg%pc7 PkgWatt CorWatt GFXWatt 
 +       -       -       6    0.36    1596    3492       0    0.59    0.01   99.04    0.00      23      24   23.82    0.01   72.47    0.00    6.40    1.01    0.00
 +       0       0       9    0.58    1596    3492       0    0.28    0.01   99.13    0.00      23      24   23.82    0.01   72.47    0.00    6.40    1.01    0.00
 +       0       4       1    0.07    1596    3492       0    0.79
 +       1       1      10    0.65    1596    3492       0    0.59    0.00   98.76    0.00      23
 +       1       5       5    0.28    1596    3492       0    0.95
 +       2       2      10    0.66    1596    3492       0    0.41    0.01   98.92    0.00      23
 +       2       6       2    0.10    1597    3492       0    0.97
 +       3       3       3    0.20    1596    3492       0    0.44    0.00   99.37    0.00      23
 +       3       7       5    0.31    1596    3492       0    0.33
  .fi
 -This example also shows the use of the --hide option to skip columns that are not wanted.
 -Note that cpu4 in this example is 99.99% busy, while the other CPUs are all under 1% busy.
 -Notice that cpu4's HT sibling is cpu0, which is under 1% busy, but can get into CPU%c1 only,
 -because its cpu4's activity on shared hardware keeps it from entering a deeper C-state.
 -
 -.SH SYSTEM CONFIGURATION INFORMATION EXAMPLE
 +.SH DEBUG EXAMPLE
 +The "--debug" option prints additional system information before measurements:
  
 -By default, turbostat always dumps system configuration information
 -before taking measurements.  In the example above, "--quiet" is used
 -to suppress that output.  Here is an example of the configuration information:
  .nf
 -turbostat version 2017.02.15 - Len Brown <lenb@kernel.org>
 +turbostat version 4.1 10-Feb, 2015 - Len Brown <lenb@kernel.org>
  CPUID(0): GenuineIntel 13 CPUID levels; family:model:stepping 0x6:3c:3 (6:60:3)
 -CPUID(1): SSE3 MONITOR - EIST TM2 TSC MSR ACPI-TM TM
 -CPUID(6): APERF, TURBO, DTS, PTM, No-HWP, No-HWPnotify, No-HWPwindow, No-HWPepp, No-HWPpkg, EPB
 -cpu4: MSR_IA32_MISC_ENABLE: 0x00850089 (TCC EIST No-MWAIT PREFETCH TURBO)
 -CPUID(7): No-SGX
 -cpu4: MSR_MISC_PWR_MGMT: 0x00400000 (ENable-EIST_Coordination DISable-EPB DISable-OOB)
 +CPUID(6): APERF, DTS, PTM, EPB
  RAPL: 3121 sec. Joule Counter Range, at 84 Watts
 -cpu4: MSR_PLATFORM_INFO: 0x80838f3012300
 -8 * 100.0 = 800.0 MHz max efficiency frequency
 -35 * 100.0 = 3500.0 MHz base frequency
 -cpu4: MSR_IA32_POWER_CTL: 0x0004005d (C1E auto-promotion: DISabled)
 -cpu4: MSR_TURBO_RATIO_LIMIT: 0x25262727
 -37 * 100.0 = 3700.0 MHz max turbo 4 active cores
 -38 * 100.0 = 3800.0 MHz max turbo 3 active cores
 -39 * 100.0 = 3900.0 MHz max turbo 2 active cores
 -39 * 100.0 = 3900.0 MHz max turbo 1 active cores
 -cpu4: MSR_CONFIG_TDP_NOMINAL: 0x00000023 (base_ratio=35)
 -cpu4: MSR_CONFIG_TDP_LEVEL_1: 0x00000000 ()
 -cpu4: MSR_CONFIG_TDP_LEVEL_2: 0x00000000 ()
 -cpu4: MSR_CONFIG_TDP_CONTROL: 0x80000000 ( lock=1)
 -cpu4: MSR_TURBO_ACTIVATION_RATIO: 0x00000000 (MAX_NON_TURBO_RATIO=0 lock=0)
 -cpu4: MSR_PKG_CST_CONFIG_CONTROL: 0x1e000400 (UNdemote-C3, UNdemote-C1, demote-C3, demote-C1, UNlocked: pkg-cstate-limit=0: pc0)
 -cpu4: POLL: CPUIDLE CORE POLL IDLE
 -cpu4: C1: MWAIT 0x00
 -cpu4: C1E: MWAIT 0x01
 -cpu4: C3: MWAIT 0x10
 -cpu4: C6: MWAIT 0x20
 -cpu4: C7s: MWAIT 0x32
 -cpu4: MSR_MISC_FEATURE_CONTROL: 0x00000000 (L2-Prefetch L2-Prefetch-pair L1-Prefetch L1-IP-Prefetch)
 +cpu0: MSR_NHM_PLATFORM_INFO: 0x80838f3012300
 +8 * 100 = 800 MHz max efficiency
 +35 * 100 = 3500 MHz TSC frequency
 +cpu0: MSR_IA32_POWER_CTL: 0x0004005d (C1E auto-promotion: DISabled)
 +cpu0: MSR_NHM_SNB_PKG_CST_CFG_CTL: 0x1e000400 (UNdemote-C3, UNdemote-C1, demote-C3, demote-C1, UNlocked: pkg-cstate-limit=0: pc0)
 +cpu0: MSR_NHM_TURBO_RATIO_LIMIT: 0x25262727
 +37 * 100 = 3700 MHz max turbo 4 active cores
 +38 * 100 = 3800 MHz max turbo 3 active cores
 +39 * 100 = 3900 MHz max turbo 2 active cores
 +39 * 100 = 3900 MHz max turbo 1 active cores
  cpu0: MSR_IA32_ENERGY_PERF_BIAS: 0x00000006 (balanced)
 -cpu0: MSR_CORE_PERF_LIMIT_REASONS, 0x31200000 (Active: ) (Logged: Transitions, MultiCoreTurbo, Amps, Auto-HWP, )
 +cpu0: MSR_CORE_PERF_LIMIT_REASONS, 0x31200000 (Active: ) (Logged: Auto-HWP, Amps, MultiCoreTurbo, Transitions, )
  cpu0: MSR_GFX_PERF_LIMIT_REASONS, 0x00000000 (Active: ) (Logged: )
  cpu0: MSR_RING_PERF_LIMIT_REASONS, 0x0d000000 (Active: ) (Logged: Amps, PkgPwrL1, PkgPwrL2, )
  cpu0: MSR_RAPL_POWER_UNIT: 0x000a0e03 (0.125000 Watts, 0.000061 Joules, 0.000977 sec.)
diff --cc tools/power/x86/turbostat/turbostat.c
index 416137df44fe,596259f48f50..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -459,54 -515,66 +503,78 @@@ unsigned long long bic_lookup(char *nam
  	return retval;
  }
  
++<<<<<<< HEAD
 +void print_header(void)
++=======
+ 
+ void print_header(char *delim)
++>>>>>>> dd778a5e6bbd (tools/power turbostat: support "--hide C1" etc.)
  {
  	struct msr_counter *mp;
 -	int printed = 0;
  
  	if (DO_BIC(BIC_Package))
 -		outp += sprintf(outp, "%sPackage", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPackage");
  	if (DO_BIC(BIC_Core))
 -		outp += sprintf(outp, "%sCore", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tCore");
  	if (DO_BIC(BIC_CPU))
 -		outp += sprintf(outp, "%sCPU", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tCPU");
  	if (DO_BIC(BIC_Avg_MHz))
 -		outp += sprintf(outp, "%sAvg_MHz", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tAvg_MHz");
  	if (DO_BIC(BIC_Busy))
 -		outp += sprintf(outp, "%sBusy%%", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tBusy%%");
  	if (DO_BIC(BIC_Bzy_MHz))
 -		outp += sprintf(outp, "%sBzy_MHz", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tBzy_MHz");
  	if (DO_BIC(BIC_TSC_MHz))
 -		outp += sprintf(outp, "%sTSC_MHz", (printed++ ? delim : ""));
 -
 -	if (DO_BIC(BIC_IRQ)) {
 -		if (sums_need_wide_columns)
 -			outp += sprintf(outp, "%s     IRQ", (printed++ ? delim : ""));
 -		else
 -			outp += sprintf(outp, "%sIRQ", (printed++ ? delim : ""));
 -	}
 +		outp += sprintf(outp, "\tTSC_MHz");
  
 +	if (DO_BIC(BIC_IRQ))
 +		outp += sprintf(outp, "\tIRQ");
  	if (DO_BIC(BIC_SMI))
++<<<<<<< HEAD
 +		outp += sprintf(outp, "\tSMI");
++=======
+ 		outp += sprintf(outp, "%sSMI", (printed++ ? delim : ""));
+ 
+ 	for (mp = sys.tp; mp; mp = mp->next) {
+ 
+ 		if (mp->format == FORMAT_RAW) {
+ 			if (mp->width == 64)
+ 				outp += sprintf(outp, "%s%18.18s", (printed++ ? delim : ""), mp->name);
+ 			else
+ 				outp += sprintf(outp, "%s%10.10s", (printed++ ? delim : ""), mp->name);
+ 		} else {
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "%s%8s", (printed++ ? delim : ""), mp->name);
+ 			else
+ 				outp += sprintf(outp, "%s%s", (printed++ ? delim : ""), mp->name);
+ 		}
+ 	}
++>>>>>>> dd778a5e6bbd (tools/power turbostat: support "--hide C1" etc.)
  
  	if (DO_BIC(BIC_CPU_c1))
 -		outp += sprintf(outp, "%sCPU%%c1", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tCPU%%c1");
 +
 +	for (mp = sys.tp; mp; mp = mp->next) {
 +		if (mp->format == FORMAT_RAW) {
 +			if (mp->width == 64)
 +				outp += sprintf(outp, "\t%18.18s", mp->name);
 +			else
 +				outp += sprintf(outp, "\t%10.10s", mp->name);
 +		} else {
 +			outp += sprintf(outp, "\t%-7.7s", mp->name);
 +		}
 +	}
 +
  	if (DO_BIC(BIC_CPU_c3) && !do_slm_cstates && !do_knl_cstates)
 -		outp += sprintf(outp, "%sCPU%%c3", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tCPU%%c3");
  	if (DO_BIC(BIC_CPU_c6))
 -		outp += sprintf(outp, "%sCPU%%c6", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tCPU%%c6");
  	if (DO_BIC(BIC_CPU_c7))
 -		outp += sprintf(outp, "%sCPU%%c7", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tCPU%%c7");
  
 -	if (DO_BIC(BIC_Mod_c6))
 -		outp += sprintf(outp, "%sMod%%c6", (printed++ ? delim : ""));
  
  	if (DO_BIC(BIC_CoreTmp))
 -		outp += sprintf(outp, "%sCoreTmp", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tCoreTmp");
  
  	for (mp = sys.cp; mp; mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
@@@ -3904,26 -4181,9 +3972,29 @@@ void process_cpuid(
  	return;
  }
  
++<<<<<<< HEAD
 +void help()
 +{
 +	fprintf(outf,
 +	"Usage: turbostat [OPTIONS][(--interval seconds) | COMMAND ...]\n"
 +	"\n"
 +	"Turbostat forks the specified COMMAND and prints statistics\n"
 +	"when COMMAND completes.\n"
 +	"If no COMMAND is specified, turbostat wakes every 5-seconds\n"
 +	"to print statistics, until interrupted.\n"
 +	"--add		add a counter\n"
 +	"		eg. --add msr0x10,u64,cpu,delta,MY_TSC\n"
 +	"--debug	run in \"debug\" mode\n"
 +	"--interval sec	Override default 5-second measurement interval\n"
 +	"--help		print this help message\n"
 +	"--out file	create or truncate \"file\" for all output\n"
 +	"--version	print version information\n"
 +	"\n"
 +	"For more help, run \"man turbostat\"\n");
 +}
 +
++=======
++>>>>>>> dd778a5e6bbd (tools/power turbostat: support "--hide C1" etc.)
  
  /*
   * in /dev/cpu/ return success for names that are numbers
@@@ -4433,11 -4707,167 +4504,175 @@@ next
  		exit(1);
  	}
  }
++<<<<<<< HEAD
 +/*
 + * HIDE_LIST - hide this list of counters, show the rest [default]
 + * SHOW_LIST - show this list of counters, hide the rest
 + */
 +enum show_hide_mode { SHOW_LIST, HIDE_LIST } global_show_hide_mode = HIDE_LIST;
++=======
+ 
+ int is_deferred_skip(char *name)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < deferred_skip_index; ++i)
+ 		if (!strcmp(name, deferred_skip_names[i]))
+ 			return 1;
+ 	return 0;
+ }
+ 
+ void probe_sysfs(void)
+ {
+ 	char path[64];
+ 	char name_buf[16];
+ 	FILE *input;
+ 	int state;
+ 	char *sp;
+ 
+ 	if (!DO_BIC(BIC_sysfs))
+ 		return;
+ 
+ 	for (state = 10; state > 0; --state) {
+ 
+ 		sprintf(path, "/sys/devices/system/cpu/cpu%d/cpuidle/state%d/name",
+ 			base_cpu, state);
+ 		input = fopen(path, "r");
+ 		if (input == NULL)
+ 			continue;
+ 		fgets(name_buf, sizeof(name_buf), input);
+ 
+ 		 /* truncate "C1-HSW\n" to "C1", or truncate "C1\n" to "C1" */
+ 		sp = strchr(name_buf, '-');
+ 		if (!sp)
+ 			sp = strchrnul(name_buf, '\n');
+ 		*sp = '%';
+ 		*(sp + 1) = '\0';
+ 
+ 		fclose(input);
+ 
+ 		sprintf(path, "cpuidle/state%d/time", state);
+ 
+ 		if (is_deferred_skip(name_buf))
+ 			continue;
+ 
+ 		add_counter(0, path, name_buf, 64, SCOPE_CPU, COUNTER_USEC,
+ 				FORMAT_PERCENT, SYSFS_PERCPU);
+ 	}
+ 
+ 	for (state = 10; state > 0; --state) {
+ 
+ 		sprintf(path, "/sys/devices/system/cpu/cpu%d/cpuidle/state%d/name",
+ 			base_cpu, state);
+ 		input = fopen(path, "r");
+ 		if (input == NULL)
+ 			continue;
+ 		fgets(name_buf, sizeof(name_buf), input);
+ 		 /* truncate "C1-HSW\n" to "C1", or truncate "C1\n" to "C1" */
+ 		sp = strchr(name_buf, '-');
+ 		if (!sp)
+ 			sp = strchrnul(name_buf, '\n');
+ 		*sp = '\0';
+ 		fclose(input);
+ 
+ 		sprintf(path, "cpuidle/state%d/usage", state);
+ 
+ 		if (is_deferred_skip(name_buf))
+ 			continue;
+ 
+ 		add_counter(0, path, name_buf, 64, SCOPE_CPU, COUNTER_ITEMS,
+ 				FORMAT_DELTA, SYSFS_PERCPU);
+ 	}
+ 
+ }
+ 
+ 
+ /*
+  * parse cpuset with following syntax
+  * 1,2,4..6,8-10 and set bits in cpu_subset
+  */
+ void parse_cpu_command(char *optarg)
+ {
+ 	unsigned int start, end;
+ 	char *next;
+ 
+ 	if (!strcmp(optarg, "core")) {
+ 		if (cpu_subset)
+ 			goto error;
+ 		show_core_only++;
+ 		return;
+ 	}
+ 	if (!strcmp(optarg, "package")) {
+ 		if (cpu_subset)
+ 			goto error;
+ 		show_pkg_only++;
+ 		return;
+ 	}
+ 	if (show_core_only || show_pkg_only)
+ 		goto error;
+ 
+ 	cpu_subset = CPU_ALLOC(CPU_SUBSET_MAXCPUS);
+ 	if (cpu_subset == NULL)
+ 		err(3, "CPU_ALLOC");
+ 	cpu_subset_size = CPU_ALLOC_SIZE(CPU_SUBSET_MAXCPUS);
+ 
+ 	CPU_ZERO_S(cpu_subset_size, cpu_subset);
+ 
+ 	next = optarg;
+ 
+ 	while (next && *next) {
+ 
+ 		if (*next == '-')	/* no negative cpu numbers */
+ 			goto error;
+ 
+ 		start = strtoul(next, &next, 10);
+ 
+ 		if (start >= CPU_SUBSET_MAXCPUS)
+ 			goto error;
+ 		CPU_SET_S(start, cpu_subset_size, cpu_subset);
+ 
+ 		if (*next == '\0')
+ 			break;
+ 
+ 		if (*next == ',') {
+ 			next += 1;
+ 			continue;
+ 		}
+ 
+ 		if (*next == '-') {
+ 			next += 1;	/* start range */
+ 		} else if (*next == '.') {
+ 			next += 1;
+ 			if (*next == '.')
+ 				next += 1;	/* start range */
+ 			else
+ 				goto error;
+ 		}
+ 
+ 		end = strtoul(next, &next, 10);
+ 		if (end <= start)
+ 			goto error;
+ 
+ 		while (++start <= end) {
+ 			if (start >= CPU_SUBSET_MAXCPUS)
+ 				goto error;
+ 			CPU_SET_S(start, cpu_subset_size, cpu_subset);
+ 		}
+ 
+ 		if (*next == ',')
+ 			next += 1;
+ 		else if (*next != '\0')
+ 			goto error;
+ 	}
+ 
+ 	return;
+ 
+ error:
+ 	fprintf(stderr, "\"--cpu %s\" malformed\n", optarg);
+ 	help();
+ 	exit(-1);
+ }
++>>>>>>> dd778a5e6bbd (tools/power turbostat: support "--hide C1" etc.)
  
  int shown;
  /*
@@@ -4464,7 -4894,8 +4699,12 @@@ void parse_show_hide(char *optarg, enu
  	 * --hide: do not show those specified
  	 *  multiple invocations simply clear more bits in enabled mask
  	 */
++<<<<<<< HEAD
 +	bic_enabled &= ~bic_lookup(optarg);
++=======
+ 	bic_enabled &= ~bic_lookup(optarg, new_mode);
+ 
++>>>>>>> dd778a5e6bbd (tools/power turbostat: support "--hide C1" etc.)
  }
  
  void cmdline(int argc, char **argv)
* Unmerged path tools/power/x86/turbostat/turbostat.8
* Unmerged path tools/power/x86/turbostat/turbostat.c
