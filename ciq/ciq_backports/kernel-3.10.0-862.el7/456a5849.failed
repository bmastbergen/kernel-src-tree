qed: iWARP CM add passive side connect

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Kalderon, Michal <Michal.Kalderon@cavium.com>
commit 456a584947d5b92d5e5a62cc68125ab5f150aa8c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/456a5849.failed

This patch implements the passive side connect.
It addresses pre-allocating resources, creating a connection
element upon valid SYN packet received. Calling upper layer and
implementation of the accept/reject calls.

Error handling is not part of this patch.

	Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
	Signed-off-by: Yuval Mintz <Yuval.Mintz@cavium.com>
	Signed-off-by: Ariel Elior <Ariel.Elior@cavium.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 456a584947d5b92d5e5a62cc68125ab5f150aa8c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qed/qed.h
#	drivers/net/ethernet/qlogic/qed/qed_dev.c
#	drivers/net/ethernet/qlogic/qed/qed_iwarp.c
#	drivers/net/ethernet/qlogic/qed/qed_iwarp.h
#	drivers/net/ethernet/qlogic/qed/qed_sp.h
#	include/linux/qed/qed_roce_if.h
diff --cc drivers/net/ethernet/qlogic/qed/qed.h
index 848905e401aa,91003bc6f00b..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed.h
+++ b/drivers/net/ethernet/qlogic/qed/qed.h
@@@ -728,6 -788,9 +728,12 @@@ void qed_configure_vp_wfq_on_link_chang
  
  void qed_clean_wfq_db(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt);
  int qed_device_num_engines(struct qed_dev *cdev);
++<<<<<<< HEAD
++=======
+ int qed_device_get_port_id(struct qed_dev *cdev);
+ void qed_set_fw_mac_addr(__le16 *fw_msb,
+ 			 __le16 *fw_mid, __le16 *fw_lsb, u8 *mac);
++>>>>>>> 456a584947d5 (qed: iWARP CM add passive side connect)
  
  #define QED_LEADING_HWFN(dev)   (&dev->hwfns[0])
  
diff --cc drivers/net/ethernet/qlogic/qed/qed_dev.c
index 1b5a3d62b9f3,4060a6ad9be3..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_dev.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_dev.c
@@@ -3986,3 -4113,28 +3986,31 @@@ int qed_device_num_engines(struct qed_d
  {
  	return QED_IS_BB(cdev) ? 2 : 1;
  }
++<<<<<<< HEAD
++=======
+ 
+ static int qed_device_num_ports(struct qed_dev *cdev)
+ {
+ 	/* in CMT always only one port */
+ 	if (cdev->num_hwfns > 1)
+ 		return 1;
+ 
+ 	return cdev->num_ports_in_engine * qed_device_num_engines(cdev);
+ }
+ 
+ int qed_device_get_port_id(struct qed_dev *cdev)
+ {
+ 	return (QED_LEADING_HWFN(cdev)->abs_pf_id) % qed_device_num_ports(cdev);
+ }
+ 
+ void qed_set_fw_mac_addr(__le16 *fw_msb,
+ 			 __le16 *fw_mid, __le16 *fw_lsb, u8 *mac)
+ {
+ 	((u8 *)fw_msb)[0] = mac[1];
+ 	((u8 *)fw_msb)[1] = mac[0];
+ 	((u8 *)fw_mid)[0] = mac[3];
+ 	((u8 *)fw_mid)[1] = mac[2];
+ 	((u8 *)fw_lsb)[0] = mac[5];
+ 	((u8 *)fw_lsb)[1] = mac[4];
+ }
++>>>>>>> 456a584947d5 (qed: iWARP CM add passive side connect)
diff --cc drivers/net/ethernet/qlogic/qed/qed_sp.h
index 109909f6ad23,ab4ad8a1e2a5..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_sp.h
+++ b/drivers/net/ethernet/qlogic/qed/qed_sp.h
@@@ -108,7 -110,11 +108,15 @@@ union ramrod_data 
  	struct rdma_srq_create_ramrod_data rdma_create_srq;
  	struct rdma_srq_destroy_ramrod_data rdma_destroy_srq;
  	struct rdma_srq_modify_ramrod_data rdma_modify_srq;
++<<<<<<< HEAD
 +	struct roce_init_func_ramrod_data roce_init_func;
++=======
+ 	struct iwarp_create_qp_ramrod_data iwarp_create_qp;
+ 	struct iwarp_tcp_offload_ramrod_data iwarp_tcp_offload;
+ 	struct iwarp_mpa_offload_ramrod_data iwarp_mpa_offload;
+ 	struct iwarp_modify_qp_ramrod_data iwarp_modify_qp;
+ 	struct iwarp_init_func_ramrod_data iwarp_init_func;
++>>>>>>> 456a584947d5 (qed: iWARP CM add passive side connect)
  	struct fcoe_init_ramrod_params fcoe_init;
  	struct fcoe_conn_offload_ramrod_params fcoe_conn_ofld;
  	struct fcoe_conn_terminate_ramrod_params fcoe_conn_terminate;
diff --cc include/linux/qed/qed_roce_if.h
index cbb2ff0ce4bc,c4c241fe2579..000000000000
--- a/include/linux/qed/qed_roce_if.h
+++ b/include/linux/qed/qed_roce_if.h
@@@ -472,6 -470,70 +472,73 @@@ struct qed_rdma_counters_out_params 
  #define QED_ROCE_TX_HEAD_FAILURE        (1)
  #define QED_ROCE_TX_FRAG_FAILURE        (2)
  
++<<<<<<< HEAD:include/linux/qed/qed_roce_if.h
++=======
+ enum qed_iwarp_event_type {
+ 	QED_IWARP_EVENT_MPA_REQUEST,	  /* Passive side request received */
+ 	QED_IWARP_EVENT_PASSIVE_COMPLETE, /* ack on mpa response */
+ };
+ 
+ enum qed_tcp_ip_version {
+ 	QED_TCP_IPV4,
+ 	QED_TCP_IPV6,
+ };
+ 
+ struct qed_iwarp_cm_info {
+ 	enum qed_tcp_ip_version ip_version;
+ 	u32 remote_ip[4];
+ 	u32 local_ip[4];
+ 	u16 remote_port;
+ 	u16 local_port;
+ 	u16 vlan;
+ 	u8 ord;
+ 	u8 ird;
+ 	u16 private_data_len;
+ 	const void *private_data;
+ };
+ 
+ struct qed_iwarp_cm_event_params {
+ 	enum qed_iwarp_event_type event;
+ 	const struct qed_iwarp_cm_info *cm_info;
+ 	void *ep_context;	/* To be passed to accept call */
+ 	int status;
+ };
+ 
+ typedef int (*iwarp_event_handler) (void *context,
+ 				    struct qed_iwarp_cm_event_params *event);
+ 
+ struct qed_iwarp_listen_in {
+ 	iwarp_event_handler event_cb;
+ 	void *cb_context;	/* passed to event_cb */
+ 	u32 max_backlog;
+ 	enum qed_tcp_ip_version ip_version;
+ 	u32 ip_addr[4];
+ 	u16 port;
+ 	u16 vlan;
+ };
+ 
+ struct qed_iwarp_listen_out {
+ 	void *handle;
+ };
+ 
+ struct qed_iwarp_accept_in {
+ 	void *ep_context;
+ 	void *cb_context;
+ 	struct qed_rdma_qp *qp;
+ 	const void *private_data;
+ 	u16 private_data_len;
+ 	u8 ord;
+ 	u8 ird;
+ };
+ 
+ struct qed_iwarp_reject_in {
+ 	void *ep_context;
+ 	void *cb_context;
+ 	const void *private_data;
+ 	u16 private_data_len;
+ };
+ 
++>>>>>>> 456a584947d5 (qed: iWARP CM add passive side connect):include/linux/qed/qed_rdma_if.h
  struct qed_roce_ll2_header {
  	void *vaddr;
  	dma_addr_t baddr;
@@@ -585,20 -613,45 +652,61 @@@ struct qed_rdma_ops 
  	int (*rdma_deregister_tid)(void *rdma_cxt, u32 itid);
  	int (*rdma_alloc_tid)(void *rdma_cxt, u32 *itid);
  	void (*rdma_free_tid)(void *rdma_cxt, u32 itid);
++<<<<<<< HEAD:include/linux/qed/qed_roce_if.h
 +	int (*roce_ll2_start)(struct qed_dev *cdev,
 +			      struct qed_roce_ll2_params *params);
 +	int (*roce_ll2_stop)(struct qed_dev *cdev);
 +	int (*roce_ll2_tx)(struct qed_dev *cdev,
 +			   struct qed_roce_ll2_packet *packet,
 +			   struct qed_roce_ll2_tx_params *params);
 +	int (*roce_ll2_post_rx_buffer)(struct qed_dev *cdev,
 +				       struct qed_roce_ll2_buffer *buf,
 +				       u64 cookie, u8 notify_fw);
 +	int (*roce_ll2_set_mac_filter)(struct qed_dev *cdev,
 +				       u8 *old_mac_address,
 +				       u8 *new_mac_address);
 +	int (*roce_ll2_stats)(struct qed_dev *cdev,
 +			      struct qed_ll2_stats *stats);
++=======
+ 
+ 	int (*ll2_acquire_connection)(void *rdma_cxt,
+ 				      struct qed_ll2_acquire_data *data);
+ 
+ 	int (*ll2_establish_connection)(void *rdma_cxt, u8 connection_handle);
+ 	int (*ll2_terminate_connection)(void *rdma_cxt, u8 connection_handle);
+ 	void (*ll2_release_connection)(void *rdma_cxt, u8 connection_handle);
+ 
+ 	int (*ll2_prepare_tx_packet)(void *rdma_cxt,
+ 				     u8 connection_handle,
+ 				     struct qed_ll2_tx_pkt_info *pkt,
+ 				     bool notify_fw);
+ 
+ 	int (*ll2_set_fragment_of_tx_packet)(void *rdma_cxt,
+ 					     u8 connection_handle,
+ 					     dma_addr_t addr,
+ 					     u16 nbytes);
+ 	int (*ll2_post_rx_buffer)(void *rdma_cxt, u8 connection_handle,
+ 				  dma_addr_t addr, u16 buf_len, void *cookie,
+ 				  u8 notify_fw);
+ 	int (*ll2_get_stats)(void *rdma_cxt,
+ 			     u8 connection_handle,
+ 			     struct qed_ll2_stats *p_stats);
+ 	int (*ll2_set_mac_filter)(struct qed_dev *cdev,
+ 				  u8 *old_mac_address, u8 *new_mac_address);
+ 
+ 	int (*iwarp_create_listen)(void *rdma_cxt,
+ 				   struct qed_iwarp_listen_in *iparams,
+ 				   struct qed_iwarp_listen_out *oparams);
+ 
+ 	int (*iwarp_accept)(void *rdma_cxt,
+ 			    struct qed_iwarp_accept_in *iparams);
+ 
+ 	int (*iwarp_reject)(void *rdma_cxt,
+ 			    struct qed_iwarp_reject_in *iparams);
+ 
+ 	int (*iwarp_destroy_listen)(void *rdma_cxt, void *handle);
+ 
++>>>>>>> 456a584947d5 (qed: iWARP CM add passive side connect):include/linux/qed/qed_rdma_if.h
  };
  
  const struct qed_rdma_ops *qed_get_rdma_ops(void);
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_iwarp.c
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_iwarp.h
* Unmerged path drivers/net/ethernet/qlogic/qed/qed.h
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_dev.c
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_iwarp.c
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_iwarp.h
diff --git a/drivers/net/ethernet/qlogic/qed/qed_l2.c b/drivers/net/ethernet/qlogic/qed/qed_l2.c
index f852981b5922..f1e10b2ea1fd 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_l2.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_l2.c
@@ -1042,19 +1042,6 @@ static enum eth_filter_action qed_filter_action(enum qed_filter_opcode opcode)
 	return action;
 }
 
-static void qed_set_fw_mac_addr(__le16 *fw_msb,
-				__le16 *fw_mid,
-				__le16 *fw_lsb,
-				u8 *mac)
-{
-	((u8 *)fw_msb)[0] = mac[1];
-	((u8 *)fw_msb)[1] = mac[0];
-	((u8 *)fw_mid)[0] = mac[3];
-	((u8 *)fw_mid)[1] = mac[2];
-	((u8 *)fw_lsb)[0] = mac[5];
-	((u8 *)fw_lsb)[1] = mac[4];
-}
-
 static int
 qed_filter_ucast_common(struct qed_hwfn *p_hwfn,
 			u16 opaque_fid,
diff --git a/drivers/net/ethernet/qlogic/qed/qed_rdma.h b/drivers/net/ethernet/qlogic/qed/qed_rdma.h
index b178d9994a45..03e962224c10 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_rdma.h
+++ b/drivers/net/ethernet/qlogic/qed/qed_rdma.h
@@ -84,6 +84,7 @@ struct qed_rdma_info {
 	struct qed_bmap qp_map;
 	struct qed_bmap srq_map;
 	struct qed_bmap cid_map;
+	struct qed_bmap tcp_cid_map;
 	struct qed_bmap real_cid_map;
 	struct qed_bmap dpi_map;
 	struct qed_bmap toggle_bits;
@@ -164,6 +165,7 @@ struct qed_rdma_qp {
 
 	void *shared_queue;
 	dma_addr_t shared_queue_phys_addr;
+	struct qed_iwarp_ep *ep;
 };
 
 #if IS_ENABLED(CONFIG_QED_RDMA)
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_sp.h
diff --git a/include/linux/qed/common_hsi.h b/include/linux/qed/common_hsi.h
index fbab6e0514f0..8563f2073fc8 100644
--- a/include/linux/qed/common_hsi.h
+++ b/include/linux/qed/common_hsi.h
@@ -38,6 +38,8 @@
 #include <linux/slab.h>
 
 /* dma_addr_t manip */
+#define PTR_LO(x)               ((u32)(((uintptr_t)(x)) & 0xffffffff))
+#define PTR_HI(x)               ((u32)((((uintptr_t)(x)) >> 16) >> 16))
 #define DMA_LO_LE(x)		cpu_to_le32(lower_32_bits(x))
 #define DMA_HI_LE(x)		cpu_to_le32(upper_32_bits(x))
 #define DMA_REGPAIR_LE(x, val)	do { \
* Unmerged path include/linux/qed/qed_roce_if.h
