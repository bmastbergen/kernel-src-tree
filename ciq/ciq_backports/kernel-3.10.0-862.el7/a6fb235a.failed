ovl: rearrange copy up

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit a6fb235a448b8eb731fd6d4de2c5c6269677cf5b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a6fb235a.failed

Split up and rearrange copy up functions to make them better readable.

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit a6fb235a448b8eb731fd6d4de2c5c6269677cf5b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/copy_up.c
diff --cc fs/overlayfs/copy_up.c
index 6e96b99a973d,15668d3bbbc4..000000000000
--- a/fs/overlayfs/copy_up.c
+++ b/fs/overlayfs/copy_up.c
@@@ -264,34 -233,145 +264,102 @@@ int ovl_set_attr(struct dentry *upperde
  	return err;
  }
  
 -struct ovl_fh *ovl_encode_fh(struct dentry *lower, bool is_upper)
 +static int ovl_copy_up_locked(struct dentry *workdir, struct dentry *upperdir,
 +			      struct dentry *dentry, struct path *lowerpath,
 +			      struct kstat *stat, const char *link)
  {
 -	struct ovl_fh *fh;
 -	int fh_type, fh_len, dwords;
 -	void *buf;
 -	int buflen = MAX_HANDLE_SZ;
 -	uuid_t *uuid = &lower->d_sb->s_uuid;
 -
 -	buf = kmalloc(buflen, GFP_TEMPORARY);
 -	if (!buf)
 -		return ERR_PTR(-ENOMEM);
 -
 -	/*
 -	 * We encode a non-connectable file handle for non-dir, because we
 -	 * only need to find the lower inode number and we don't want to pay
 -	 * the price or reconnecting the dentry.
 -	 */
 -	dwords = buflen >> 2;
 -	fh_type = exportfs_encode_fh(lower, buf, &dwords, 0);
 -	buflen = (dwords << 2);
 -
 -	fh = ERR_PTR(-EIO);
 -	if (WARN_ON(fh_type < 0) ||
 -	    WARN_ON(buflen > MAX_HANDLE_SZ) ||
 -	    WARN_ON(fh_type == FILEID_INVALID))
 -		goto out;
 -
 -	BUILD_BUG_ON(MAX_HANDLE_SZ + offsetof(struct ovl_fh, fid) > 255);
 -	fh_len = offsetof(struct ovl_fh, fid) + buflen;
 -	fh = kmalloc(fh_len, GFP_KERNEL);
 -	if (!fh) {
 -		fh = ERR_PTR(-ENOMEM);
 -		goto out;
 -	}
 -
 -	fh->version = OVL_FH_VERSION;
 -	fh->magic = OVL_FH_MAGIC;
 -	fh->type = fh_type;
 -	fh->flags = OVL_FH_FLAG_CPU_ENDIAN;
 -	/*
 -	 * When we will want to decode an overlay dentry from this handle
 -	 * and all layers are on the same fs, if we get a disconncted real
 -	 * dentry when we decode fid, the only way to tell if we should assign
 -	 * it to upperdentry or to lowerstack is by checking this flag.
 -	 */
 -	if (is_upper)
 -		fh->flags |= OVL_FH_FLAG_PATH_UPPER;
 -	fh->len = fh_len;
 -	fh->uuid = *uuid;
 -	memcpy(fh->fid, buf, buflen);
 -
 -out:
 -	kfree(buf);
 -	return fh;
 -}
 -
 -static int ovl_set_origin(struct dentry *dentry, struct dentry *lower,
 -			  struct dentry *upper)
 -{
 -	const struct ovl_fh *fh = NULL;
 +	struct inode *wdir = workdir->d_inode;
 +	struct inode *udir = upperdir->d_inode;
 +	struct dentry *newdentry = NULL;
 +	struct dentry *upper = NULL;
 +	umode_t mode = stat->mode;
  	int err;
++<<<<<<< HEAD
++=======
+ 
+ 	/*
+ 	 * When lower layer doesn't support export operations store a 'null' fh,
+ 	 * so we can use the overlay.origin xattr to distignuish between a copy
+ 	 * up and a pure upper inode.
+ 	 */
+ 	if (ovl_can_decode_fh(lower->d_sb)) {
+ 		fh = ovl_encode_fh(lower, false);
+ 		if (IS_ERR(fh))
+ 			return PTR_ERR(fh);
+ 	}
+ 
+ 	/*
+ 	 * Do not fail when upper doesn't support xattrs.
+ 	 */
+ 	err = ovl_check_setxattr(dentry, upper, OVL_XATTR_ORIGIN, fh,
+ 				 fh ? fh->len : 0, 0);
+ 	kfree(fh);
+ 
+ 	return err;
+ }
+ 
+ struct ovl_copy_up_ctx {
+ 	struct dentry *parent;
+ 	struct dentry *dentry;
+ 	struct path lowerpath;
+ 	struct kstat stat;
+ 	struct kstat pstat;
+ 	const char *link;
+ 	struct dentry *upperdir;
+ 	struct dentry *workdir;
+ 	bool tmpfile;
+ };
+ 
+ static int ovl_install_temp(struct ovl_copy_up_ctx *c, struct dentry *temp,
+ 			    struct dentry **newdentry)
+ {
+ 	int err;
+ 	struct dentry *upper;
+ 	struct inode *udir = d_inode(c->upperdir);
+ 
+ 	upper = lookup_one_len(c->dentry->d_name.name, c->upperdir,
+ 			       c->dentry->d_name.len);
+ 	if (IS_ERR(upper))
+ 		return PTR_ERR(upper);
+ 
+ 	if (c->tmpfile)
+ 		err = ovl_do_link(temp, udir, upper, true);
+ 	else
+ 		err = ovl_do_rename(d_inode(c->workdir), temp, udir, upper, 0);
+ 
+ 	/* Restore timestamps on parent (best effort) */
+ 	if (!err) {
+ 		ovl_set_timestamps(c->upperdir, &c->pstat);
+ 		*newdentry = dget(c->tmpfile ? upper : temp);
+ 	}
+ 	dput(upper);
+ 
+ 	return err;
+ }
+ 
+ static int ovl_get_tmpfile(struct ovl_copy_up_ctx *c, struct dentry **tempp)
+ {
+ 	int err;
+ 	struct dentry *temp;
++>>>>>>> a6fb235a448b (ovl: rearrange copy up)
  	const struct cred *old_creds = NULL;
  	struct cred *new_creds = NULL;
 -	struct cattr cattr = {
 -		/* Can't properly set mode on creation because of the umask */
 -		.mode = c->stat.mode & S_IFMT,
 -		.rdev = c->stat.rdev,
 -		.link = c->link
 -	};
  
 -	err = security_inode_copy_up(c->dentry, &new_creds);
 -	if (err < 0)
 +	newdentry = ovl_lookup_temp(workdir, dentry);
 +	err = PTR_ERR(newdentry);
 +	if (IS_ERR(newdentry))
  		goto out;
  
 +	upper = lookup_one_len(dentry->d_name.name, upperdir,
 +			       dentry->d_name.len);
 +	err = PTR_ERR(upper);
 +	if (IS_ERR(upper))
 +		goto out1;
 +
 +	err = security_inode_copy_up(dentry, &new_creds);
 +	if (err < 0)
 +		goto out2;
 +
  	if (new_creds)
  		old_creds = override_creds(new_creds);
  
@@@ -358,45 -488,37 +426,73 @@@ out_cleanup
  /*
   * Copy up a single dentry
   *
 - * All renames start with copy up of source if necessary.  The actual
 - * rename will only proceed once the copy up was successful.  Copy up uses
 - * upper parent i_mutex for exclusion.  Since rename can change d_parent it
 - * is possible that the copy up will lock the old parent.  At that point
 - * the file will have already been copied up anyway.
 + * Directory renames only allowed on "pure upper" (already created on
 + * upper filesystem, never copied up).  Directories which are on lower or
 + * are merged may not be renamed.  For these -EXDEV is returned and
 + * userspace has to deal with it.  This means, when copying up a
 + * directory we can rely on it and ancestors being stable.
 + *
 + * Non-directory renames start with copy up of source if necessary.  The
 + * actual rename will only proceed once the copy up was successful.  Copy
 + * up uses upper parent i_mutex for exclusion.  Since rename can change
 + * d_parent it is possible that the copy up will lock the old parent.  At
 + * that point the file will have already been copied up anyway.
   */
++<<<<<<< HEAD
 +static int ovl_copy_up_one(struct dentry *parent, struct dentry *dentry,
 +			   struct path *lowerpath, struct kstat *stat)
 +{
 +	struct dentry *workdir = ovl_workdir(dentry);
 +	int err;
 +	struct kstat pstat;
 +	struct path parentpath;
 +	struct dentry *upperdir;
 +	struct dentry *upperdentry;
 +	char *link = NULL;
 +
 +	if (WARN_ON(!workdir))
 +		return -EROFS;
 +
 +	ovl_do_check_copy_up(lowerpath->dentry);
 +
 +	ovl_path_upper(parent, &parentpath);
 +	upperdir = parentpath.dentry;
 +
 +	err = vfs_getattr(&parentpath, &pstat);
 +	if (err)
 +		return err;
 +
 +	if (S_ISLNK(stat->mode)) {
 +		link = ovl_read_symlink(lowerpath->dentry);
 +		if (IS_ERR(link))
 +			return PTR_ERR(link);
++=======
+ static int ovl_do_copy_up(struct ovl_copy_up_ctx *c)
+ {
+ 	int err;
+ 	struct ovl_fs *ofs = c->dentry->d_sb->s_fs_info;
+ 
+ 	/* Mark parent "impure" because it may now contain non-pure upper */
+ 	err = ovl_set_impure(c->parent, c->upperdir);
+ 	if (err)
+ 		return err;
+ 
+ 	/* Should we copyup with O_TMPFILE or with workdir? */
+ 	if (S_ISREG(c->stat.mode) && ofs->tmpfile) {
+ 		err = ovl_copy_up_start(c->dentry);
+ 		/* err < 0: interrupted, err > 0: raced with another copy-up */
+ 		if (unlikely(err)) {
+ 			pr_debug("ovl_copy_up_start(%pd2) = %i\n", c->dentry,
+ 				 err);
+ 			if (err > 0)
+ 				err = 0;
+ 			goto out_done;
+ 		}
+ 		c->tmpfile = true;
+ 		err = ovl_copy_up_locked(c);
+ 		ovl_copy_up_end(c->dentry);
+ 		goto out_done;
++>>>>>>> a6fb235a448b (ovl: rearrange copy up)
  	}
  
  	err = -EIO;
@@@ -411,17 -532,57 +507,69 @@@
  		goto out_unlock;
  	}
  
 -	err = ovl_copy_up_locked(c);
 +	err = ovl_copy_up_locked(workdir, upperdir, dentry, lowerpath,
 +				 stat, link);
 +	if (!err) {
 +		/* Restore timestamps on parent (best effort) */
 +		ovl_set_timestamps(upperdir, &pstat);
 +	}
  out_unlock:
++<<<<<<< HEAD
 +	unlock_rename(workdir, upperdir);
 +
 +	if (link)
 +		free_page((unsigned long) link);
++=======
+ 	unlock_rename(c->workdir, c->upperdir);
+ out_done:
+ 
+ 	return err;
+ }
+ 
+ static int ovl_copy_up_one(struct dentry *parent, struct dentry *dentry,
+ 			   int flags)
+ {
+ 	int err;
+ 	DEFINE_DELAYED_CALL(done);
+ 	struct path parentpath;
+ 	struct ovl_copy_up_ctx ctx = {
+ 		.parent = parent,
+ 		.dentry = dentry,
+ 		.workdir = ovl_workdir(dentry),
+ 	};
+ 
+ 	if (WARN_ON(!ctx.workdir))
+ 		return -EROFS;
+ 
+ 	ovl_path_lower(dentry, &ctx.lowerpath);
+ 	err = vfs_getattr(&ctx.lowerpath, &ctx.stat,
+ 			  STATX_BASIC_STATS, AT_STATX_SYNC_AS_STAT);
+ 	if (err)
+ 		return err;
+ 
+ 	ovl_path_upper(parent, &parentpath);
+ 	ctx.upperdir = parentpath.dentry;
+ 
+ 	err = vfs_getattr(&parentpath, &ctx.pstat,
+ 			  STATX_ATIME | STATX_MTIME, AT_STATX_SYNC_AS_STAT);
+ 	if (err)
+ 		return err;
+ 
+ 	/* maybe truncate regular file. this has no effect on dirs */
+ 	if (flags & O_TRUNC)
+ 		ctx.stat.size = 0;
+ 
+ 	if (S_ISLNK(ctx.stat.mode)) {
+ 		ctx.link = vfs_get_link(ctx.lowerpath.dentry, &done);
+ 		if (IS_ERR(ctx.link))
+ 			return PTR_ERR(ctx.link);
+ 	}
+ 	ovl_do_check_copy_up(ctx.lowerpath.dentry);
+ 
+ 	err = ovl_do_copy_up(&ctx);
+ 
+ 	do_delayed_call(&done);
++>>>>>>> a6fb235a448b (ovl: rearrange copy up)
  
  	return err;
  }
@@@ -434,8 -595,6 +582,11 @@@ int ovl_copy_up_flags(struct dentry *de
  	while (!err) {
  		struct dentry *next;
  		struct dentry *parent;
++<<<<<<< HEAD
 +		struct path lowerpath;
 +		struct kstat stat;
++=======
++>>>>>>> a6fb235a448b (ovl: rearrange copy up)
  		enum ovl_path_type type = ovl_path_type(dentry);
  
  		if (OVL_TYPE_UPPER(type))
@@@ -454,13 -613,7 +605,17 @@@
  			next = parent;
  		}
  
++<<<<<<< HEAD
 +		ovl_path_lower(next, &lowerpath);
 +		err = vfs_getattr(&lowerpath, &stat);
 +		/* maybe truncate regular file. this has no effect on dirs */
 +		if (flags & O_TRUNC)
 +			stat.size = 0;
 +		if (!err)
 +			err = ovl_copy_up_one(parent, next, &lowerpath, &stat);
++=======
+ 		err = ovl_copy_up_one(parent, next, flags);
++>>>>>>> a6fb235a448b (ovl: rearrange copy up)
  
  		dput(parent);
  		dput(next);
* Unmerged path fs/overlayfs/copy_up.c
