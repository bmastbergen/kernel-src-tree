dmaengine: dw: introduce dw_dma_on() helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: dmaengine: dw: introduce dw_dma_on() helper (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 93.48%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 7a83c045435e896db6c689145d752d28b8b99b7b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7a83c045.failed

As an opposite to dw_dma_off() let's introduce dw_dma_on() helper. It will be
useful later as well.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Vinod Koul <vinod.koul@intel.com>
(cherry picked from commit 7a83c045435e896db6c689145d752d28b8b99b7b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/dw_dmac.c
diff --cc drivers/dma/dw_dmac.c
index e4409f73fad7,e94de0045aaf..000000000000
--- a/drivers/dma/dw_dmac.c
+++ b/drivers/dma/dw_dmac.c
@@@ -1599,67 -1470,14 +1599,76 @@@ static void dw_dma_off(struct dw_dma *d
  		dw->chan[i].initialized = false;
  }
  
++<<<<<<< HEAD:drivers/dma/dw_dmac.c
 +#ifdef CONFIG_OF
 +static struct dw_dma_platform_data *
 +dw_dma_parse_dt(struct platform_device *pdev)
++=======
+ static void dw_dma_on(struct dw_dma *dw)
+ {
+ 	dma_writel(dw, CFG, DW_CFG_DMA_EN);
+ }
+ 
+ int dw_dma_probe(struct dw_dma_chip *chip, struct dw_dma_platform_data *pdata)
++>>>>>>> 7a83c045435e (dmaengine: dw: introduce dw_dma_on() helper):drivers/dma/dw/core.c
  {
 +	struct device_node *np = pdev->dev.of_node;
 +	struct dw_dma_platform_data *pdata;
 +	u32 tmp, arr[4];
 +
 +	if (!np) {
 +		dev_err(&pdev->dev, "Missing DT data\n");
 +		return NULL;
 +	}
 +
 +	pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
 +	if (!pdata)
 +		return NULL;
 +
 +	if (of_property_read_u32(np, "dma-channels", &pdata->nr_channels))
 +		return NULL;
 +
 +	if (of_property_read_bool(np, "is_private"))
 +		pdata->is_private = true;
 +
 +	if (!of_property_read_u32(np, "chan_allocation_order", &tmp))
 +		pdata->chan_allocation_order = (unsigned char)tmp;
 +
 +	if (!of_property_read_u32(np, "chan_priority", &tmp))
 +		pdata->chan_priority = tmp;
 +
 +	if (!of_property_read_u32(np, "block_size", &tmp))
 +		pdata->block_size = tmp;
 +
 +	if (!of_property_read_u32(np, "dma-masters", &tmp)) {
 +		if (tmp > 4)
 +			return NULL;
 +
 +		pdata->nr_masters = tmp;
 +	}
 +
 +	if (!of_property_read_u32_array(np, "data_width", arr,
 +				pdata->nr_masters))
 +		for (tmp = 0; tmp < pdata->nr_masters; tmp++)
 +			pdata->data_width[tmp] = arr[tmp];
 +
 +	return pdata;
 +}
 +#else
 +static inline struct dw_dma_platform_data *
 +dw_dma_parse_dt(struct platform_device *pdev)
 +{
 +	return NULL;
 +}
 +#endif
 +
 +static int dw_probe(struct platform_device *pdev)
 +{
 +	struct dw_dma_platform_data *pdata;
 +	struct resource		*io;
  	struct dw_dma		*dw;
 +	size_t			size;
 +	void __iomem		*regs;
  	bool			autocfg;
  	unsigned int		dw_params;
  	unsigned int		nr_channels;
@@@ -1849,34 -1648,29 +1858,34 @@@
  	dw->dma.device_tx_status = dwc_tx_status;
  	dw->dma.device_issue_pending = dwc_issue_pending;
  
- 	dma_writel(dw, CFG, DW_CFG_DMA_EN);
+ 	dw_dma_on(dw);
  
 -	err = dma_async_device_register(&dw->dma);
 -	if (err)
 -		goto err_dma_register;
 -
 -	dev_info(chip->dev, "DesignWare DMA Controller, %d channels\n",
 +	dev_info(&pdev->dev, "DesignWare DMA Controller, %d channels\n",
  		 nr_channels);
  
 -	return 0;
 +	dma_async_device_register(&dw->dma);
 +
 +	if (pdev->dev.of_node) {
 +		err = of_dma_controller_register(pdev->dev.of_node,
 +						 dw_dma_of_xlate, dw);
 +		if (err)
 +			dev_err(&pdev->dev,
 +				"could not register of_dma_controller\n");
 +	}
 +
 +	if (ACPI_HANDLE(&pdev->dev))
 +		dw_dma_acpi_controller_register(dw);
  
 -err_dma_register:
 -	free_irq(chip->irq, dw);
 -err_pdata:
 -	return err;
 +	return 0;
  }
 -EXPORT_SYMBOL_GPL(dw_dma_probe);
  
 -int dw_dma_remove(struct dw_dma_chip *chip)
 +static int dw_remove(struct platform_device *pdev)
  {
 -	struct dw_dma		*dw = chip->dw;
 +	struct dw_dma		*dw = platform_get_drvdata(pdev);
  	struct dw_dma_chan	*dwc, *_dwc;
  
 +	if (pdev->dev.of_node)
 +		of_dma_controller_free(pdev->dev.of_node);
  	dw_dma_off(dw);
  	dma_async_device_unregister(&dw->dma);
  
@@@ -1890,86 -1685,39 +1899,90 @@@
  
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(dw_dma_remove);
  
 -void dw_dma_shutdown(struct dw_dma_chip *chip)
 +static void dw_shutdown(struct platform_device *pdev)
  {
 -	struct dw_dma *dw = chip->dw;
 +	struct dw_dma	*dw = platform_get_drvdata(pdev);
  
  	dw_dma_off(dw);
 +	clk_disable_unprepare(dw->clk);
  }
 -EXPORT_SYMBOL_GPL(dw_dma_shutdown);
 -
 -#ifdef CONFIG_PM_SLEEP
  
 -int dw_dma_suspend(struct dw_dma_chip *chip)
 +static int dw_suspend_noirq(struct device *dev)
  {
 -	struct dw_dma *dw = chip->dw;
 +	struct platform_device *pdev = to_platform_device(dev);
 +	struct dw_dma	*dw = platform_get_drvdata(pdev);
  
  	dw_dma_off(dw);
 +	clk_disable_unprepare(dw->clk);
 +
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(dw_dma_suspend);
  
 -int dw_dma_resume(struct dw_dma_chip *chip)
 +static int dw_resume_noirq(struct device *dev)
  {
 -	struct dw_dma *dw = chip->dw;
 +	struct platform_device *pdev = to_platform_device(dev);
 +	struct dw_dma	*dw = platform_get_drvdata(pdev);
 +
++<<<<<<< HEAD:drivers/dma/dw_dmac.c
 +	clk_prepare_enable(dw->clk);
 +	dma_writel(dw, CFG, DW_CFG_DMA_EN);
  
++=======
+ 	dw_dma_on(dw);
++>>>>>>> 7a83c045435e (dmaengine: dw: introduce dw_dma_on() helper):drivers/dma/dw/core.c
  	return 0;
  }
 -EXPORT_SYMBOL_GPL(dw_dma_resume);
  
 -#endif /* CONFIG_PM_SLEEP */
 +static const struct dev_pm_ops dw_dev_pm_ops = {
 +	.suspend_noirq = dw_suspend_noirq,
 +	.resume_noirq = dw_resume_noirq,
 +	.freeze_noirq = dw_suspend_noirq,
 +	.thaw_noirq = dw_resume_noirq,
 +	.restore_noirq = dw_resume_noirq,
 +	.poweroff_noirq = dw_suspend_noirq,
 +};
 +
 +#ifdef CONFIG_OF
 +static const struct of_device_id dw_dma_of_id_table[] = {
 +	{ .compatible = "snps,dma-spear1340" },
 +	{}
 +};
 +MODULE_DEVICE_TABLE(of, dw_dma_of_id_table);
 +#endif
 +
 +#ifdef CONFIG_ACPI
 +static const struct acpi_device_id dw_dma_acpi_id_table[] = {
 +	{ "INTL9C60", 0 },
 +	{ }
 +};
 +#endif
 +
 +static struct platform_driver dw_driver = {
 +	.probe		= dw_probe,
 +	.remove		= dw_remove,
 +	.shutdown	= dw_shutdown,
 +	.driver = {
 +		.name	= "dw_dmac",
 +		.pm	= &dw_dev_pm_ops,
 +		.of_match_table = of_match_ptr(dw_dma_of_id_table),
 +		.acpi_match_table = ACPI_PTR(dw_dma_acpi_id_table),
 +	},
 +};
 +
 +static int __init dw_init(void)
 +{
 +	return platform_driver_register(&dw_driver);
 +}
 +subsys_initcall(dw_init);
 +
 +static void __exit dw_exit(void)
 +{
 +	platform_driver_unregister(&dw_driver);
 +}
 +module_exit(dw_exit);
  
  MODULE_LICENSE("GPL v2");
 -MODULE_DESCRIPTION("Synopsys DesignWare DMA Controller core driver");
 +MODULE_DESCRIPTION("Synopsys DesignWare DMA Controller driver");
  MODULE_AUTHOR("Haavard Skinnemoen (Atmel)");
  MODULE_AUTHOR("Viresh Kumar <viresh.linux@gmail.com>");
* Unmerged path drivers/dma/dw_dmac.c
