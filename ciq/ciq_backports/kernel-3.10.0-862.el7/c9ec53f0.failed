mlxsw: spectrum_router: Determine VR first when creating RIF

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit c9ec53f03460b374c5565c09beac2aec5dfc5cbc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c9ec53f0.failed

All RIF types are associated with a virtual router (VR), so determine VR
first when creating a RIF.

That way, we can more easily integrate the common RIF core in the
following patches.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c9ec53f03460b374c5565c09beac2aec5dfc5cbc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index f8e7036e3f4a,0c0ec2aa1933..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -2769,30 -3012,56 +2769,67 @@@ mlxsw_sp_rif_alloc(u16 rif, u16 vr_id, 
  }
  
  static struct mlxsw_sp_rif *
 -mlxsw_sp_port_vlan_rif_sp_create(struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan,
 -				 struct net_device *l3_dev)
 +mlxsw_sp_vport_rif_sp_create(struct mlxsw_sp_port *mlxsw_sp_vport,
 +			     struct net_device *l3_dev)
  {
 -	struct mlxsw_sp_port *mlxsw_sp_port = mlxsw_sp_port_vlan->mlxsw_sp_port;
 -	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_port->mlxsw_sp;
 -	struct mlxsw_sp_rif_subport *rif_subport;
 -	u32 tb_id = l3mdev_fib_table(l3_dev);
 +	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_vport->mlxsw_sp;
  	struct mlxsw_sp_vr *vr;
  	struct mlxsw_sp_fid *f;
 -	struct mlxsw_sp_rif *rif;
 -	u16 fid, rif_index;
 +	struct mlxsw_sp_rif *r;
 +	u16 fid, rif;
  	int err;
  
++<<<<<<< HEAD
 +	rif = mlxsw_sp_avail_rif_get(mlxsw_sp);
 +	if (rif == MLXSW_SP_INVALID_RIF)
 +		return ERR_PTR(-ERANGE);
 +
 +	vr = mlxsw_sp_vr_get(mlxsw_sp, RT_TABLE_MAIN);
 +	if (IS_ERR(vr))
 +		return ERR_CAST(vr);
 +
 +	err = mlxsw_sp_vport_rif_sp_op(mlxsw_sp_vport, vr->id, l3_dev, rif,
 +				       true);
++=======
+ 	vr = mlxsw_sp_vr_get(mlxsw_sp, tb_id ? : RT_TABLE_MAIN);
+ 	if (IS_ERR(vr))
+ 		return ERR_CAST(vr);
+ 
+ 	rif_index = mlxsw_sp_avail_rif_get(mlxsw_sp);
+ 	if (rif_index == MLXSW_SP_INVALID_INDEX_RIF) {
+ 		err = -ERANGE;
+ 		goto err_avail_rif_get;
+ 	}
+ 
+ 	fid = mlxsw_sp_rif_sp_to_fid(rif_index);
+ 	f = mlxsw_sp_rfid_alloc(fid, l3_dev);
+ 	if (!f) {
+ 		err = -ENOMEM;
+ 		goto err_rfid_alloc;
+ 	}
+ 
+ 	rif = mlxsw_sp_rif_alloc(rif_index, vr->id, l3_dev, f, true);
+ 	if (!rif) {
+ 		err = -ENOMEM;
+ 		goto err_rif_alloc;
+ 	}
+ 
+ 	rif_subport = container_of(rif, struct mlxsw_sp_rif_subport, common);
+ 	rif_subport->vid = mlxsw_sp_port_vlan->vid;
+ 	if (mlxsw_sp_port->lagged) {
+ 		rif_subport->lag = true;
+ 		rif_subport->lag_id = mlxsw_sp_port->lag_id;
+ 	} else {
+ 		rif_subport->lag = false;
+ 		rif_subport->system_port = mlxsw_sp_port->local_port;
+ 	}
+ 
+ 	err = mlxsw_sp_port_vlan_rif_sp_op(mlxsw_sp, rif, true);
++>>>>>>> c9ec53f03460 (mlxsw: spectrum_router: Determine VR first when creating RIF)
  	if (err)
 -		goto err_port_vlan_rif_sp_op;
 +		goto err_vport_rif_sp_op;
  
 +	fid = mlxsw_sp_rif_sp_to_fid(rif);
  	err = mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, fid, true);
  	if (err)
  		goto err_rif_fdb_op;
@@@ -2818,10 -3084,11 +2855,14 @@@
  err_rif_alloc:
  	kfree(f);
  err_rfid_alloc:
++<<<<<<< HEAD
 +	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, fid, false);
 +err_rif_fdb_op:
 +	mlxsw_sp_vport_rif_sp_op(mlxsw_sp_vport, vr->id, l3_dev, rif, false);
 +err_vport_rif_sp_op:
++=======
+ err_avail_rif_get:
++>>>>>>> c9ec53f03460 (mlxsw: spectrum_router: Determine VR first when creating RIF)
  	mlxsw_sp_vr_put(vr);
  	return ERR_PTR(err);
  }
@@@ -2848,8 -3114,9 +2889,14 @@@ static void mlxsw_sp_vport_rif_sp_destr
  
  	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, fid, false);
  
++<<<<<<< HEAD
 +	mlxsw_sp_vport_rif_sp_op(mlxsw_sp_vport, vr->id, l3_dev, rif, false);
 +
++=======
+ 	mlxsw_sp_port_vlan_rif_sp_op(mlxsw_sp, rif, false);
+ 	kfree(rif);
+ 	kfree(f);
++>>>>>>> c9ec53f03460 (mlxsw: spectrum_router: Determine VR first when creating RIF)
  	mlxsw_sp_vr_put(vr);
  }
  
@@@ -3029,19 -3342,32 +3076,42 @@@ static int mlxsw_sp_rif_bridge_create(s
  				      struct net_device *l3_dev,
  				      struct mlxsw_sp_fid *f)
  {
 -	u32 tb_id = l3mdev_fib_table(l3_dev);
 -	struct mlxsw_sp_rif *rif;
  	struct mlxsw_sp_vr *vr;
 -	u16 rif_index;
 +	struct mlxsw_sp_rif *r;
 +	u16 rif;
  	int err;
  
++<<<<<<< HEAD
 +	rif = mlxsw_sp_avail_rif_get(mlxsw_sp);
 +	if (rif == MLXSW_SP_INVALID_RIF)
 +		return -ERANGE;
 +
 +	vr = mlxsw_sp_vr_get(mlxsw_sp, RT_TABLE_MAIN);
 +	if (IS_ERR(vr))
 +		return PTR_ERR(vr);
 +
++=======
+ 	vr = mlxsw_sp_vr_get(mlxsw_sp, tb_id ? : RT_TABLE_MAIN);
+ 	if (IS_ERR(vr))
+ 		return PTR_ERR(vr);
+ 
+ 	rif_index = mlxsw_sp_avail_rif_get(mlxsw_sp);
+ 	if (rif_index == MLXSW_SP_INVALID_INDEX_RIF) {
+ 		err = -ERANGE;
+ 		goto err_avail_rif_get;
+ 	}
+ 
+ 	rif = mlxsw_sp_rif_alloc(rif_index, vr->id, l3_dev, f, false);
+ 	if (!rif) {
+ 		err = -ENOMEM;
+ 		goto err_rif_alloc;
+ 	}
+ 
+ 	err = mlxsw_sp_rif_bridge_op(mlxsw_sp, rif, true);
+ 	if (err)
+ 		goto err_rif_bridge_op;
+ 
++>>>>>>> c9ec53f03460 (mlxsw: spectrum_router: Determine VR first when creating RIF)
  	err = mlxsw_sp_router_port_flood_set(mlxsw_sp, f->fid, true);
  	if (err)
  		goto err_port_flood_set;
@@@ -3069,13 -3384,14 +3139,21 @@@
  
  	return 0;
  
 +err_rif_alloc:
 +	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, f->fid, false);
  err_rif_fdb_op:
 +	mlxsw_sp_rif_bridge_op(mlxsw_sp, vr->id, l3_dev, f->fid, rif, false);
 +err_rif_bridge_op:
  	mlxsw_sp_router_port_flood_set(mlxsw_sp, f->fid, false);
  err_port_flood_set:
++<<<<<<< HEAD
++=======
+ 	mlxsw_sp_rif_bridge_op(mlxsw_sp, rif, false);
+ err_rif_bridge_op:
+ 	kfree(rif);
+ err_rif_alloc:
+ err_avail_rif_get:
++>>>>>>> c9ec53f03460 (mlxsw: spectrum_router: Determine VR first when creating RIF)
  	mlxsw_sp_vr_put(vr);
  	return err;
  }
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
