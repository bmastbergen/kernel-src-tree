ASoC: add es8316 codec driver

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: asoc: add es8316 codec driver (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 90.62%
commit-author Daniel Drake <drake@endlessm.com>
commit b8b88b70875af786d9f346d766fa2b0630e2cf41
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b8b88b70.failed

Add a codec driver for the Everest ES8316, based on code provided by
David Yang from Everest Semi.

I limited the functionality to items where the vendor code was clear,
and things that can be tested on the Weibu F3C (Intel Cherry Trail).
As a result the initial implementation only supports running in slave
mode at single speed (up to 48kHz sample rate) using I2S. HPD is not
supported.

	Signed-off-by: David Yang <yangxiaohua@everest-semi.com>
[drake@endlessm.com: significant cleanups and simplifications,
                     remove dead/unclear code]
	Signed-off-by: Daniel Drake <drake@endlessm.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit b8b88b70875af786d9f346d766fa2b0630e2cf41)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/codecs/Kconfig
#	sound/soc/codecs/Makefile
diff --cc sound/soc/codecs/Kconfig
index bec1671f0a76,c6286e5ba511..000000000000
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@@ -13,11 -13,112 +13,19 @@@ menu "CODEC drivers
  config SND_SOC_ALL_CODECS
  	tristate "Build all ASoC CODEC drivers"
  	depends on COMPILE_TEST
 -	select SND_SOC_88PM860X if MFD_88PM860X
 -	select SND_SOC_L3
 -	select SND_SOC_AB8500_CODEC if ABX500_CORE
 -	select SND_SOC_AC97_CODEC
 -	select SND_SOC_AD1836 if SPI_MASTER
 -	select SND_SOC_AD193X_SPI if SPI_MASTER
 -	select SND_SOC_AD193X_I2C if I2C
 -	select SND_SOC_AD1980 if SND_SOC_AC97_BUS
 -	select SND_SOC_AD73311
 -	select SND_SOC_ADAU1373 if I2C
 -	select SND_SOC_ADAU1761_I2C if I2C
 -	select SND_SOC_ADAU1761_SPI if SPI
 -	select SND_SOC_ADAU1781_I2C if I2C
 -	select SND_SOC_ADAU1781_SPI if SPI
 -	select SND_SOC_ADAV801 if SPI_MASTER
 -	select SND_SOC_ADAV803 if I2C
 -	select SND_SOC_ADAU1977_SPI if SPI_MASTER
 -	select SND_SOC_ADAU1977_I2C if I2C
 -	select SND_SOC_ADAU1701 if I2C
 -	select SND_SOC_ADAU7002
 -	select SND_SOC_ADS117X
 -	select SND_SOC_AK4104 if SPI_MASTER
 -	select SND_SOC_AK4535 if I2C
 -	select SND_SOC_AK4554
 -	select SND_SOC_AK4613 if I2C
 -	select SND_SOC_AK4641 if I2C
 -	select SND_SOC_AK4642 if I2C
 -	select SND_SOC_AK4671 if I2C
 -	select SND_SOC_AK5386
 -	select SND_SOC_ALC5623 if I2C
 -	select SND_SOC_ALC5632 if I2C
 -	select SND_SOC_BT_SCO
 -	select SND_SOC_CQ0093VC
 -	select SND_SOC_CS35L32 if I2C
 -	select SND_SOC_CS35L33 if I2C
 -	select SND_SOC_CS35L34 if I2C
 -	select SND_SOC_CS35L35 if I2C
 -	select SND_SOC_CS42L42 if I2C
 -	select SND_SOC_CS42L51_I2C if I2C
 -	select SND_SOC_CS42L52 if I2C && INPUT
 -	select SND_SOC_CS42L56 if I2C && INPUT
 -	select SND_SOC_CS42L73 if I2C
 -	select SND_SOC_CS4265 if I2C
 -	select SND_SOC_CS4270 if I2C
 -	select SND_SOC_CS4271_I2C if I2C
 -	select SND_SOC_CS4271_SPI if SPI_MASTER
 -	select SND_SOC_CS42XX8_I2C if I2C
 -	select SND_SOC_CS4349 if I2C
 -	select SND_SOC_CS47L24 if MFD_CS47L24
 -	select SND_SOC_CS53L30 if I2C
 -	select SND_SOC_CX20442 if TTY
 -	select SND_SOC_DA7210 if SND_SOC_I2C_AND_SPI
 -	select SND_SOC_DA7213 if I2C
 -	select SND_SOC_DA7218 if I2C
 -	select SND_SOC_DA7219 if I2C
 -	select SND_SOC_DA732X if I2C
 -	select SND_SOC_DA9055 if I2C
 -	select SND_SOC_DIO2125
  	select SND_SOC_DMIC
++<<<<<<< HEAD
++=======
+ 	select SND_SOC_ES8316 if I2C
+ 	select SND_SOC_ES8328_SPI if SPI_MASTER
+ 	select SND_SOC_ES8328_I2C if I2C
+ 	select SND_SOC_ES7134
+ 	select SND_SOC_GTM601
++>>>>>>> b8b88b70875a (ASoC: add es8316 codec driver)
  	select SND_SOC_HDAC_HDMI
 -	select SND_SOC_ICS43432
 -	select SND_SOC_INNO_RK3036
 -	select SND_SOC_ISABELLE if I2C
 -	select SND_SOC_JZ4740_CODEC
 -	select SND_SOC_LM4857 if I2C
 -	select SND_SOC_LM49453 if I2C
 -	select SND_SOC_MAX98088 if I2C
  	select SND_SOC_MAX98090 if I2C
 -	select SND_SOC_MAX98095 if I2C
  	select SND_SOC_MAX98357A if GPIOLIB
 -	select SND_SOC_MAX98371 if I2C
 -	select SND_SOC_MAX98504 if I2C
 -	select SND_SOC_MAX9867 if I2C
 -	select SND_SOC_MAX98925 if I2C
 -	select SND_SOC_MAX98926 if I2C
 -	select SND_SOC_MAX98927 if I2C
 -	select SND_SOC_MAX9850 if I2C
 -	select SND_SOC_MAX9860 if I2C
 -	select SND_SOC_MAX9768 if I2C
 -	select SND_SOC_MAX9877 if I2C
 -	select SND_SOC_MC13783 if MFD_MC13XXX
 -	select SND_SOC_ML26124 if I2C
 -	select SND_SOC_NAU8540 if I2C
 -	select SND_SOC_NAU8810 if I2C
 -	select SND_SOC_NAU8824 if I2C
  	select SND_SOC_NAU8825 if I2C
 -	select SND_SOC_HDMI_CODEC
 -	select SND_SOC_PCM1681 if I2C
 -	select SND_SOC_PCM179X_I2C if I2C
 -	select SND_SOC_PCM179X_SPI if SPI_MASTER
 -	select SND_SOC_PCM3008
 -	select SND_SOC_PCM3168A_I2C if I2C
 -	select SND_SOC_PCM3168A_SPI if SPI_MASTER
 -	select SND_SOC_PCM5102A
 -	select SND_SOC_PCM512x_I2C if I2C
 -	select SND_SOC_PCM512x_SPI if SPI_MASTER
 -	select SND_SOC_RT286 if I2C
 -	select SND_SOC_RT298 if I2C
 -	select SND_SOC_RT5514 if I2C
 -	select SND_SOC_RT5616 if I2C
 -	select SND_SOC_RT5631 if I2C
  	select SND_SOC_RT5640 if I2C
  	select SND_SOC_RT5645 if I2C
  	select SND_SOC_RT5651 if I2C
@@@ -39,6 -228,341 +47,37 @@@
  config SND_SOC_DMIC
  	tristate
  
++<<<<<<< HEAD
++=======
+ config SND_SOC_HDMI_CODEC
+ 	tristate
+ 	select SND_PCM_ELD
+ 	select SND_PCM_IEC958
+ 	select HDMI
+ 
+ config SND_SOC_ES7134
+        tristate "Everest Semi ES7134 CODEC"
+ 
+ config SND_SOC_ES8316
+ 	tristate "Everest Semi ES8316 CODEC"
+ 
+ config SND_SOC_ES8328
+ 	tristate
+ 
+ config SND_SOC_ES8328_I2C
+ 	tristate "Everest Semi ES8328 CODEC (I2C)"
+ 	depends on I2C
+ 	select SND_SOC_ES8328
+ 
+ config SND_SOC_ES8328_SPI
+ 	tristate "Everest Semi ES8328 CODEC (SPI)"
+ 	depends on SPI_MASTER
+ 	select SND_SOC_ES8328
+ 
+ config SND_SOC_GTM601
+ 	tristate 'GTM601 UMTS modem audio codec'
+ 
++>>>>>>> b8b88b70875a (ASoC: add es8316 codec driver)
  config SND_SOC_HDAC_HDMI
  	tristate
  	select SND_HDA_EXT_CORE
diff --cc sound/soc/codecs/Makefile
index 1f16972a45d6,e878306ce46e..000000000000
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@@ -1,23 -1,351 +1,41 @@@
 -snd-soc-88pm860x-objs := 88pm860x-codec.o
 -snd-soc-ab8500-codec-objs := ab8500-codec.o
 -snd-soc-ac97-objs := ac97.o
 -snd-soc-ad1836-objs := ad1836.o
 -snd-soc-ad193x-objs := ad193x.o
 -snd-soc-ad193x-spi-objs := ad193x-spi.o
 -snd-soc-ad193x-i2c-objs := ad193x-i2c.o
 -snd-soc-ad1980-objs := ad1980.o
 -snd-soc-ad73311-objs := ad73311.o
 -snd-soc-adau-utils-objs := adau-utils.o
 -snd-soc-adau1373-objs := adau1373.o
 -snd-soc-adau1701-objs := adau1701.o
 -snd-soc-adau17x1-objs := adau17x1.o
 -snd-soc-adau1761-objs := adau1761.o
 -snd-soc-adau1761-i2c-objs := adau1761-i2c.o
 -snd-soc-adau1761-spi-objs := adau1761-spi.o
 -snd-soc-adau1781-objs := adau1781.o
 -snd-soc-adau1781-i2c-objs := adau1781-i2c.o
 -snd-soc-adau1781-spi-objs := adau1781-spi.o
 -snd-soc-adau1977-objs := adau1977.o
 -snd-soc-adau1977-spi-objs := adau1977-spi.o
 -snd-soc-adau1977-i2c-objs := adau1977-i2c.o
 -snd-soc-adau7002-objs := adau7002.o
 -snd-soc-adav80x-objs := adav80x.o
 -snd-soc-adav801-objs := adav801.o
 -snd-soc-adav803-objs := adav803.o
 -snd-soc-ads117x-objs := ads117x.o
 -snd-soc-ak4104-objs := ak4104.o
 -snd-soc-ak4535-objs := ak4535.o
 -snd-soc-ak4554-objs := ak4554.o
 -snd-soc-ak4613-objs := ak4613.o
 -snd-soc-ak4641-objs := ak4641.o
 -snd-soc-ak4642-objs := ak4642.o
 -snd-soc-ak4671-objs := ak4671.o
 -snd-soc-ak5386-objs := ak5386.o
 -snd-soc-arizona-objs := arizona.o
 -snd-soc-bt-sco-objs := bt-sco.o
 -snd-soc-cq93vc-objs := cq93vc.o
 -snd-soc-cs35l32-objs := cs35l32.o
 -snd-soc-cs35l33-objs := cs35l33.o
 -snd-soc-cs35l34-objs := cs35l34.o
 -snd-soc-cs35l35-objs := cs35l35.o
 -snd-soc-cs42l42-objs := cs42l42.o
 -snd-soc-cs42l51-objs := cs42l51.o
 -snd-soc-cs42l51-i2c-objs := cs42l51-i2c.o
 -snd-soc-cs42l52-objs := cs42l52.o
 -snd-soc-cs42l56-objs := cs42l56.o
 -snd-soc-cs42l73-objs := cs42l73.o
 -snd-soc-cs4265-objs := cs4265.o
 -snd-soc-cs4270-objs := cs4270.o
 -snd-soc-cs4271-objs := cs4271.o
 -snd-soc-cs4271-i2c-objs := cs4271-i2c.o
 -snd-soc-cs4271-spi-objs := cs4271-spi.o
 -snd-soc-cs42xx8-objs := cs42xx8.o
 -snd-soc-cs42xx8-i2c-objs := cs42xx8-i2c.o
 -snd-soc-cs4349-objs := cs4349.o
 -snd-soc-cs47l24-objs := cs47l24.o
 -snd-soc-cs53l30-objs := cs53l30.o
 -snd-soc-cx20442-objs := cx20442.o
 -snd-soc-da7210-objs := da7210.o
 -snd-soc-da7213-objs := da7213.o
 -snd-soc-da7218-objs := da7218.o
 -snd-soc-da7219-objs := da7219.o da7219-aad.o
 -snd-soc-da732x-objs := da732x.o
 -snd-soc-da9055-objs := da9055.o
  snd-soc-dmic-objs := dmic.o
++<<<<<<< HEAD
++=======
+ snd-soc-es7134-objs := es7134.o
+ snd-soc-es8316-objs := es8316.o
+ snd-soc-es8328-objs := es8328.o
+ snd-soc-es8328-i2c-objs := es8328-i2c.o
+ snd-soc-es8328-spi-objs := es8328-spi.o
+ snd-soc-gtm601-objs := gtm601.o
++>>>>>>> b8b88b70875a (ASoC: add es8316 codec driver)
  snd-soc-hdac-hdmi-objs := hdac_hdmi.o
 -snd-soc-ics43432-objs := ics43432.o
 -snd-soc-inno-rk3036-objs := inno_rk3036.o
 -snd-soc-isabelle-objs := isabelle.o
 -snd-soc-jz4740-codec-objs := jz4740.o
 -snd-soc-l3-objs := l3.o
 -snd-soc-lm4857-objs := lm4857.o
 -snd-soc-lm49453-objs := lm49453.o
 -snd-soc-max9768-objs := max9768.o
 -snd-soc-max98088-objs := max98088.o
  snd-soc-max98090-objs := max98090.o
 -snd-soc-max98095-objs := max98095.o
 -snd-soc-max98357a-objs := max98357a.o
 -snd-soc-max98371-objs := max98371.o
 -snd-soc-max9867-objs := max9867.o
 -snd-soc-max98925-objs := max98925.o
 -snd-soc-max98926-objs := max98926.o
 -snd-soc-max98927-objs := max98927.o
 -snd-soc-max9850-objs := max9850.o
 -snd-soc-max9860-objs := max9860.o
 -snd-soc-mc13783-objs := mc13783.o
 -snd-soc-ml26124-objs := ml26124.o
 -snd-soc-msm8916-analog-objs := msm8916-wcd-analog.o
 -snd-soc-msm8916-digital-objs := msm8916-wcd-digital.o
 -snd-soc-nau8540-objs := nau8540.o
 -snd-soc-nau8810-objs := nau8810.o
 -snd-soc-nau8824-objs := nau8824.o
  snd-soc-nau8825-objs := nau8825.o
 -snd-soc-hdmi-codec-objs := hdmi-codec.o
 -snd-soc-pcm1681-objs := pcm1681.o
 -snd-soc-pcm179x-codec-objs := pcm179x.o
 -snd-soc-pcm179x-i2c-objs := pcm179x-i2c.o
 -snd-soc-pcm179x-spi-objs := pcm179x-spi.o
 -snd-soc-pcm3008-objs := pcm3008.o
 -snd-soc-pcm3168a-objs := pcm3168a.o
 -snd-soc-pcm3168a-i2c-objs := pcm3168a-i2c.o
 -snd-soc-pcm3168a-spi-objs := pcm3168a-spi.o
 -snd-soc-pcm5102a-objs := pcm5102a.o
 -snd-soc-pcm512x-objs := pcm512x.o
 -snd-soc-pcm512x-i2c-objs := pcm512x-i2c.o
 -snd-soc-pcm512x-spi-objs := pcm512x-spi.o
  snd-soc-rl6231-objs := rl6231.o
  snd-soc-rl6347a-objs := rl6347a.o
  snd-soc-rt286-objs := rt286.o
  snd-soc-rt5640-objs := rt5640.o
  snd-soc-rt5645-objs := rt5645.o
  snd-soc-rt5651-objs := rt5651.o
 -snd-soc-rt5659-objs := rt5659.o
 -snd-soc-rt5660-objs := rt5660.o
 -snd-soc-rt5663-objs := rt5663.o
 -snd-soc-rt5665-objs := rt5665.o
  snd-soc-rt5670-objs := rt5670.o
 -snd-soc-rt5677-objs := rt5677.o
 -snd-soc-rt5677-spi-objs := rt5677-spi.o
 -snd-soc-sgtl5000-objs := sgtl5000.o
 -snd-soc-alc5623-objs := alc5623.o
 -snd-soc-alc5632-objs := alc5632.o
 -snd-soc-sigmadsp-objs := sigmadsp.o
 -snd-soc-sigmadsp-i2c-objs := sigmadsp-i2c.o
 -snd-soc-sigmadsp-regmap-objs := sigmadsp-regmap.o
 -snd-soc-si476x-objs := si476x.o
 -snd-soc-sirf-audio-codec-objs := sirf-audio-codec.o
  snd-soc-sn95031-objs := sn95031.o
 -snd-soc-spdif-tx-objs := spdif_transmitter.o
 -snd-soc-spdif-rx-objs := spdif_receiver.o
  snd-soc-ssm2518-objs := ssm2518.o
 -snd-soc-ssm2602-objs := ssm2602.o
 -snd-soc-ssm2602-spi-objs := ssm2602-spi.o
 -snd-soc-ssm2602-i2c-objs := ssm2602-i2c.o
  snd-soc-ssm4567-objs := ssm4567.o
 -snd-soc-sta32x-objs := sta32x.o
 -snd-soc-sta350-objs := sta350.o
 -snd-soc-sta529-objs := sta529.o
 -snd-soc-stac9766-objs := stac9766.o
 -snd-soc-sti-sas-objs := sti-sas.o
 -snd-soc-tas5086-objs := tas5086.o
 -snd-soc-tas571x-objs := tas571x.o
 -snd-soc-tas5720-objs := tas5720.o
 -snd-soc-tfa9879-objs := tfa9879.o
 -snd-soc-tlv320aic23-objs := tlv320aic23.o
 -snd-soc-tlv320aic23-i2c-objs := tlv320aic23-i2c.o
 -snd-soc-tlv320aic23-spi-objs := tlv320aic23-spi.o
 -snd-soc-tlv320aic26-objs := tlv320aic26.o
 -snd-soc-tlv320aic31xx-objs := tlv320aic31xx.o
 -snd-soc-tlv320aic32x4-objs := tlv320aic32x4.o
 -snd-soc-tlv320aic32x4-i2c-objs := tlv320aic32x4-i2c.o
 -snd-soc-tlv320aic32x4-spi-objs := tlv320aic32x4-spi.o
 -snd-soc-tlv320aic3x-objs := tlv320aic3x.o
 -snd-soc-tlv320dac33-objs := tlv320dac33.o
  snd-soc-ts3a227e-objs := ts3a227e.o
 -snd-soc-twl4030-objs := twl4030.o
 -snd-soc-twl6040-objs := twl6040.o
 -snd-soc-uda134x-objs := uda134x.o
 -snd-soc-uda1380-objs := uda1380.o
 -snd-soc-wl1273-objs := wl1273.o
 -snd-soc-wm-adsp-objs := wm_adsp.o
 -snd-soc-wm0010-objs := wm0010.o
 -snd-soc-wm1250-ev1-objs := wm1250-ev1.o
 -snd-soc-wm2000-objs := wm2000.o
 -snd-soc-wm2200-objs := wm2200.o
 -snd-soc-wm5100-objs := wm5100.o wm5100-tables.o
 -snd-soc-wm5102-objs := wm5102.o
 -snd-soc-wm5110-objs := wm5110.o
 -snd-soc-wm8350-objs := wm8350.o
 -snd-soc-wm8400-objs := wm8400.o
 -snd-soc-wm8510-objs := wm8510.o
 -snd-soc-wm8523-objs := wm8523.o
 -snd-soc-wm8580-objs := wm8580.o
 -snd-soc-wm8711-objs := wm8711.o
 -snd-soc-wm8727-objs := wm8727.o
 -snd-soc-wm8728-objs := wm8728.o
 -snd-soc-wm8731-objs := wm8731.o
 -snd-soc-wm8737-objs := wm8737.o
 -snd-soc-wm8741-objs := wm8741.o
 -snd-soc-wm8750-objs := wm8750.o
 -snd-soc-wm8753-objs := wm8753.o
 -snd-soc-wm8770-objs := wm8770.o
 -snd-soc-wm8776-objs := wm8776.o
 -snd-soc-wm8782-objs := wm8782.o
 -snd-soc-wm8804-objs := wm8804.o
 -snd-soc-wm8804-i2c-objs := wm8804-i2c.o
 -snd-soc-wm8804-spi-objs := wm8804-spi.o
 -snd-soc-wm8900-objs := wm8900.o
 -snd-soc-wm8903-objs := wm8903.o
 -snd-soc-wm8904-objs := wm8904.o
 -snd-soc-wm8996-objs := wm8996.o
 -snd-soc-wm8940-objs := wm8940.o
 -snd-soc-wm8955-objs := wm8955.o
 -snd-soc-wm8960-objs := wm8960.o
 -snd-soc-wm8961-objs := wm8961.o
 -snd-soc-wm8962-objs := wm8962.o
 -snd-soc-wm8971-objs := wm8971.o
 -snd-soc-wm8974-objs := wm8974.o
 -snd-soc-wm8978-objs := wm8978.o
 -snd-soc-wm8983-objs := wm8983.o
 -snd-soc-wm8985-objs := wm8985.o
 -snd-soc-wm8988-objs := wm8988.o
 -snd-soc-wm8990-objs := wm8990.o
 -snd-soc-wm8991-objs := wm8991.o
 -snd-soc-wm8993-objs := wm8993.o
 -snd-soc-wm8994-objs := wm8994.o wm8958-dsp2.o
 -snd-soc-wm8995-objs := wm8995.o
 -snd-soc-wm8997-objs := wm8997.o
 -snd-soc-wm8998-objs := wm8998.o
 -snd-soc-wm9081-objs := wm9081.o
 -snd-soc-wm9090-objs := wm9090.o
 -snd-soc-wm9705-objs := wm9705.o
 -snd-soc-wm9712-objs := wm9712.o
 -snd-soc-wm9713-objs := wm9713.o
 -snd-soc-wm-hubs-objs := wm_hubs.o
 -# Amp
 -snd-soc-dio2125-objs := dio2125.o
 -snd-soc-max9877-objs := max9877.o
 -snd-soc-max98504-objs := max98504.o
 -snd-soc-tpa6130a2-objs := tpa6130a2.o
 -snd-soc-tas2552-objs := tas2552.o
  
 -obj-$(CONFIG_SND_SOC_88PM860X)	+= snd-soc-88pm860x.o
 -obj-$(CONFIG_SND_SOC_AB8500_CODEC)	+= snd-soc-ab8500-codec.o
 -obj-$(CONFIG_SND_SOC_AC97_CODEC)	+= snd-soc-ac97.o
 -obj-$(CONFIG_SND_SOC_AD1836)	+= snd-soc-ad1836.o
 -obj-$(CONFIG_SND_SOC_AD193X)	+= snd-soc-ad193x.o
 -obj-$(CONFIG_SND_SOC_AD193X_SPI)	+= snd-soc-ad193x-spi.o
 -obj-$(CONFIG_SND_SOC_AD193X_I2C)	+= snd-soc-ad193x-i2c.o
 -obj-$(CONFIG_SND_SOC_AD1980)	+= snd-soc-ad1980.o
 -obj-$(CONFIG_SND_SOC_AD73311) += snd-soc-ad73311.o
 -obj-$(CONFIG_SND_SOC_ADAU_UTILS)	+= snd-soc-adau-utils.o
 -obj-$(CONFIG_SND_SOC_ADAU1373)	+= snd-soc-adau1373.o
 -obj-$(CONFIG_SND_SOC_ADAU1701)		+= snd-soc-adau1701.o
 -obj-$(CONFIG_SND_SOC_ADAU17X1)		+= snd-soc-adau17x1.o
 -obj-$(CONFIG_SND_SOC_ADAU1761)		+= snd-soc-adau1761.o
 -obj-$(CONFIG_SND_SOC_ADAU1761_I2C)	+= snd-soc-adau1761-i2c.o
 -obj-$(CONFIG_SND_SOC_ADAU1761_SPI)	+= snd-soc-adau1761-spi.o
 -obj-$(CONFIG_SND_SOC_ADAU1781)		+= snd-soc-adau1781.o
 -obj-$(CONFIG_SND_SOC_ADAU1781_I2C)	+= snd-soc-adau1781-i2c.o
 -obj-$(CONFIG_SND_SOC_ADAU1781_SPI)	+= snd-soc-adau1781-spi.o
 -obj-$(CONFIG_SND_SOC_ADAU1977)		+= snd-soc-adau1977.o
 -obj-$(CONFIG_SND_SOC_ADAU1977_SPI)	+= snd-soc-adau1977-spi.o
 -obj-$(CONFIG_SND_SOC_ADAU1977_I2C)	+= snd-soc-adau1977-i2c.o
 -obj-$(CONFIG_SND_SOC_ADAU7002)	+= snd-soc-adau7002.o
 -obj-$(CONFIG_SND_SOC_ADAV80X)  += snd-soc-adav80x.o
 -obj-$(CONFIG_SND_SOC_ADAV801)  += snd-soc-adav801.o
 -obj-$(CONFIG_SND_SOC_ADAV803)  += snd-soc-adav803.o
 -obj-$(CONFIG_SND_SOC_ADS117X)	+= snd-soc-ads117x.o
 -obj-$(CONFIG_SND_SOC_AK4104)	+= snd-soc-ak4104.o
 -obj-$(CONFIG_SND_SOC_AK4535)	+= snd-soc-ak4535.o
 -obj-$(CONFIG_SND_SOC_AK4554)	+= snd-soc-ak4554.o
 -obj-$(CONFIG_SND_SOC_AK4613)	+= snd-soc-ak4613.o
 -obj-$(CONFIG_SND_SOC_AK4641)	+= snd-soc-ak4641.o
 -obj-$(CONFIG_SND_SOC_AK4642)	+= snd-soc-ak4642.o
 -obj-$(CONFIG_SND_SOC_AK4671)	+= snd-soc-ak4671.o
 -obj-$(CONFIG_SND_SOC_AK5386)	+= snd-soc-ak5386.o
 -obj-$(CONFIG_SND_SOC_ALC5623)    += snd-soc-alc5623.o
 -obj-$(CONFIG_SND_SOC_ALC5632)	+= snd-soc-alc5632.o
 -obj-$(CONFIG_SND_SOC_ARIZONA)	+= snd-soc-arizona.o
 -obj-$(CONFIG_SND_SOC_BT_SCO)	+= snd-soc-bt-sco.o
 -obj-$(CONFIG_SND_SOC_CQ0093VC) += snd-soc-cq93vc.o
 -obj-$(CONFIG_SND_SOC_CS35L32)	+= snd-soc-cs35l32.o
 -obj-$(CONFIG_SND_SOC_CS35L33)	+= snd-soc-cs35l33.o
 -obj-$(CONFIG_SND_SOC_CS35L34)	+= snd-soc-cs35l34.o
 -obj-$(CONFIG_SND_SOC_CS35L35)	+= snd-soc-cs35l35.o
 -obj-$(CONFIG_SND_SOC_CS42L42)	+= snd-soc-cs42l42.o
 -obj-$(CONFIG_SND_SOC_CS42L51)	+= snd-soc-cs42l51.o
 -obj-$(CONFIG_SND_SOC_CS42L51_I2C)	+= snd-soc-cs42l51-i2c.o
 -obj-$(CONFIG_SND_SOC_CS42L52)	+= snd-soc-cs42l52.o
 -obj-$(CONFIG_SND_SOC_CS42L56)	+= snd-soc-cs42l56.o
 -obj-$(CONFIG_SND_SOC_CS42L73)	+= snd-soc-cs42l73.o
 -obj-$(CONFIG_SND_SOC_CS4265)	+= snd-soc-cs4265.o
 -obj-$(CONFIG_SND_SOC_CS4270)	+= snd-soc-cs4270.o
 -obj-$(CONFIG_SND_SOC_CS4271)	+= snd-soc-cs4271.o
 -obj-$(CONFIG_SND_SOC_CS4271_I2C)	+= snd-soc-cs4271-i2c.o
 -obj-$(CONFIG_SND_SOC_CS4271_SPI)	+= snd-soc-cs4271-spi.o
 -obj-$(CONFIG_SND_SOC_CS42XX8)	+= snd-soc-cs42xx8.o
 -obj-$(CONFIG_SND_SOC_CS42XX8_I2C) += snd-soc-cs42xx8-i2c.o
 -obj-$(CONFIG_SND_SOC_CS4349)	+= snd-soc-cs4349.o
 -obj-$(CONFIG_SND_SOC_CS47L24)	+= snd-soc-cs47l24.o
 -obj-$(CONFIG_SND_SOC_CS53L30)	+= snd-soc-cs53l30.o
 -obj-$(CONFIG_SND_SOC_CX20442)	+= snd-soc-cx20442.o
 -obj-$(CONFIG_SND_SOC_DA7210)	+= snd-soc-da7210.o
 -obj-$(CONFIG_SND_SOC_DA7213)	+= snd-soc-da7213.o
 -obj-$(CONFIG_SND_SOC_DA7218)	+= snd-soc-da7218.o
 -obj-$(CONFIG_SND_SOC_DA7219)	+= snd-soc-da7219.o
 -obj-$(CONFIG_SND_SOC_DA732X)	+= snd-soc-da732x.o
 -obj-$(CONFIG_SND_SOC_DA9055)	+= snd-soc-da9055.o
  obj-$(CONFIG_SND_SOC_DMIC)	+= snd-soc-dmic.o
++<<<<<<< HEAD
++=======
+ obj-$(CONFIG_SND_SOC_ES7134)	+= snd-soc-es7134.o
+ obj-$(CONFIG_SND_SOC_ES8316)    += snd-soc-es8316.o
+ obj-$(CONFIG_SND_SOC_ES8328)	+= snd-soc-es8328.o
+ obj-$(CONFIG_SND_SOC_ES8328_I2C)+= snd-soc-es8328-i2c.o
+ obj-$(CONFIG_SND_SOC_ES8328_SPI)+= snd-soc-es8328-spi.o
+ obj-$(CONFIG_SND_SOC_GTM601)    += snd-soc-gtm601.o
++>>>>>>> b8b88b70875a (ASoC: add es8316 codec driver)
  obj-$(CONFIG_SND_SOC_HDAC_HDMI) += snd-soc-hdac-hdmi.o
 -obj-$(CONFIG_SND_SOC_ICS43432)	+= snd-soc-ics43432.o
 -obj-$(CONFIG_SND_SOC_INNO_RK3036)	+= snd-soc-inno-rk3036.o
 -obj-$(CONFIG_SND_SOC_ISABELLE)	+= snd-soc-isabelle.o
 -obj-$(CONFIG_SND_SOC_JZ4740_CODEC)	+= snd-soc-jz4740-codec.o
 -obj-$(CONFIG_SND_SOC_L3)	+= snd-soc-l3.o
 -obj-$(CONFIG_SND_SOC_LM4857)	+= snd-soc-lm4857.o
 -obj-$(CONFIG_SND_SOC_LM49453)   += snd-soc-lm49453.o
 -obj-$(CONFIG_SND_SOC_MAX9768)	+= snd-soc-max9768.o
 -obj-$(CONFIG_SND_SOC_MAX98088)	+= snd-soc-max98088.o
  obj-$(CONFIG_SND_SOC_MAX98090)	+= snd-soc-max98090.o
 -obj-$(CONFIG_SND_SOC_MAX98095)	+= snd-soc-max98095.o
 -obj-$(CONFIG_SND_SOC_MAX98357A)	+= snd-soc-max98357a.o
 -obj-$(CONFIG_SND_SOC_MAX9867)	+= snd-soc-max9867.o
 -obj-$(CONFIG_SND_SOC_MAX98925)	+= snd-soc-max98925.o
 -obj-$(CONFIG_SND_SOC_MAX98926)	+= snd-soc-max98926.o
 -obj-$(CONFIG_SND_SOC_MAX98927)	+= snd-soc-max98927.o
 -obj-$(CONFIG_SND_SOC_MAX9850)	+= snd-soc-max9850.o
 -obj-$(CONFIG_SND_SOC_MAX9860)	+= snd-soc-max9860.o
 -obj-$(CONFIG_SND_SOC_MC13783)	+= snd-soc-mc13783.o
 -obj-$(CONFIG_SND_SOC_ML26124)	+= snd-soc-ml26124.o
 -obj-$(CONFIG_SND_SOC_MSM8916_WCD_ANALOG) +=snd-soc-msm8916-analog.o
 -obj-$(CONFIG_SND_SOC_MSM8916_WCD_DIGITAL) +=snd-soc-msm8916-digital.o
 -obj-$(CONFIG_SND_SOC_NAU8540)   += snd-soc-nau8540.o
 -obj-$(CONFIG_SND_SOC_NAU8810)   += snd-soc-nau8810.o
 -obj-$(CONFIG_SND_SOC_NAU8824)   += snd-soc-nau8824.o
  obj-$(CONFIG_SND_SOC_NAU8825)   += snd-soc-nau8825.o
 -obj-$(CONFIG_SND_SOC_HDMI_CODEC)	+= snd-soc-hdmi-codec.o
 -obj-$(CONFIG_SND_SOC_PCM1681)	+= snd-soc-pcm1681.o
 -obj-$(CONFIG_SND_SOC_PCM179X)	+= snd-soc-pcm179x-codec.o
 -obj-$(CONFIG_SND_SOC_PCM179X_I2C)	+= snd-soc-pcm179x-i2c.o
 -obj-$(CONFIG_SND_SOC_PCM179X_SPI)	+= snd-soc-pcm179x-spi.o
 -obj-$(CONFIG_SND_SOC_PCM3008)	+= snd-soc-pcm3008.o
 -obj-$(CONFIG_SND_SOC_PCM3168A)	+= snd-soc-pcm3168a.o
 -obj-$(CONFIG_SND_SOC_PCM3168A_I2C)	+= snd-soc-pcm3168a-i2c.o
 -obj-$(CONFIG_SND_SOC_PCM3168A_SPI)	+= snd-soc-pcm3168a-spi.o
 -obj-$(CONFIG_SND_SOC_PCM5102A)	+= snd-soc-pcm5102a.o
 -obj-$(CONFIG_SND_SOC_PCM512x)	+= snd-soc-pcm512x.o
 -obj-$(CONFIG_SND_SOC_PCM512x_I2C)	+= snd-soc-pcm512x-i2c.o
 -obj-$(CONFIG_SND_SOC_PCM512x_SPI)	+= snd-soc-pcm512x-spi.o
  obj-$(CONFIG_SND_SOC_RL6231)	+= snd-soc-rl6231.o
  obj-$(CONFIG_SND_SOC_RL6347A)	+= snd-soc-rl6347a.o
  obj-$(CONFIG_SND_SOC_RT286)	+= snd-soc-rt286.o
* Unmerged path sound/soc/codecs/Kconfig
* Unmerged path sound/soc/codecs/Makefile
diff --git a/sound/soc/codecs/es8316.c b/sound/soc/codecs/es8316.c
new file mode 100644
index 000000000000..ecc02449c569
--- /dev/null
+++ b/sound/soc/codecs/es8316.c
@@ -0,0 +1,637 @@
+/*
+ * es8316.c -- es8316 ALSA SoC audio driver
+ * Copyright Everest Semiconductor Co.,Ltd
+ *
+ * Authors: David Yang <yangxiaohua@everest-semi.com>,
+ *          Daniel Drake <drake@endlessm.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/acpi.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/mod_devicetable.h>
+#include <linux/regmap.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/tlv.h>
+#include "es8316.h"
+
+/* In slave mode at single speed, the codec is documented as accepting 5
+ * MCLK/LRCK ratios, but we also add ratio 400, which is commonly used on
+ * Intel Cherry Trail platforms (19.2MHz MCLK, 48kHz LRCK).
+ */
+#define NR_SUPPORTED_MCLK_LRCK_RATIOS 6
+static const unsigned int supported_mclk_lrck_ratios[] = {
+	256, 384, 400, 512, 768, 1024
+};
+
+struct es8316_priv {
+	unsigned int sysclk;
+	unsigned int allowed_rates[NR_SUPPORTED_MCLK_LRCK_RATIOS];
+	struct snd_pcm_hw_constraint_list sysclk_constraints;
+};
+
+/*
+ * ES8316 controls
+ */
+static const SNDRV_CTL_TLVD_DECLARE_DB_SCALE(dac_vol_tlv, -9600, 50, 1);
+static const SNDRV_CTL_TLVD_DECLARE_DB_SCALE(adc_vol_tlv, -9600, 50, 1);
+static const SNDRV_CTL_TLVD_DECLARE_DB_SCALE(alc_max_gain_tlv, -650, 150, 0);
+static const SNDRV_CTL_TLVD_DECLARE_DB_SCALE(alc_min_gain_tlv, -1200, 150, 0);
+static const SNDRV_CTL_TLVD_DECLARE_DB_SCALE(alc_target_tlv, -1650, 150, 0);
+static const SNDRV_CTL_TLVD_DECLARE_DB_SCALE(hpmixer_gain_tlv, -1200, 150, 0);
+
+static const SNDRV_CTL_TLVD_DECLARE_DB_RANGE(adc_pga_gain_tlv,
+	0, 0, TLV_DB_SCALE_ITEM(-350, 0, 0),
+	1, 1, TLV_DB_SCALE_ITEM(0, 0, 0),
+	2, 2, TLV_DB_SCALE_ITEM(250, 0, 0),
+	3, 3, TLV_DB_SCALE_ITEM(450, 0, 0),
+	4, 4, TLV_DB_SCALE_ITEM(700, 0, 0),
+	5, 5, TLV_DB_SCALE_ITEM(1000, 0, 0),
+	6, 6, TLV_DB_SCALE_ITEM(1300, 0, 0),
+	7, 7, TLV_DB_SCALE_ITEM(1600, 0, 0),
+	8, 8, TLV_DB_SCALE_ITEM(1800, 0, 0),
+	9, 9, TLV_DB_SCALE_ITEM(2100, 0, 0),
+	10, 10, TLV_DB_SCALE_ITEM(2400, 0, 0),
+);
+
+static const SNDRV_CTL_TLVD_DECLARE_DB_RANGE(hpout_vol_tlv,
+	0, 0, TLV_DB_SCALE_ITEM(-4800, 0, 0),
+	1, 3, TLV_DB_SCALE_ITEM(-2400, 1200, 0),
+);
+
+static const char * const ng_type_txt[] =
+	{ "Constant PGA Gain", "Mute ADC Output" };
+static const struct soc_enum ng_type =
+	SOC_ENUM_SINGLE(ES8316_ADC_ALC_NG, 6, 2, ng_type_txt);
+
+static const char * const adcpol_txt[] = { "Normal", "Invert" };
+static const struct soc_enum adcpol =
+	SOC_ENUM_SINGLE(ES8316_ADC_MUTE, 1, 2, adcpol_txt);
+static const char *const dacpol_txt[] =
+	{ "Normal", "R Invert", "L Invert", "L + R Invert" };
+static const struct soc_enum dacpol =
+	SOC_ENUM_SINGLE(ES8316_DAC_SET1, 0, 4, dacpol_txt);
+
+static const struct snd_kcontrol_new es8316_snd_controls[] = {
+	SOC_DOUBLE_TLV("Headphone Playback Volume", ES8316_CPHP_ICAL_VOL,
+		       4, 0, 3, 1, hpout_vol_tlv),
+	SOC_DOUBLE_TLV("Headphone Mixer Volume", ES8316_HPMIX_VOL,
+		       0, 4, 7, 0, hpmixer_gain_tlv),
+
+	SOC_ENUM("Playback Polarity", dacpol),
+	SOC_DOUBLE_R_TLV("DAC Playback Volume", ES8316_DAC_VOLL,
+			 ES8316_DAC_VOLR, 0, 0xc0, 1, dac_vol_tlv),
+	SOC_SINGLE("DAC Soft Ramp Switch", ES8316_DAC_SET1, 4, 1, 1),
+	SOC_SINGLE("DAC Soft Ramp Rate", ES8316_DAC_SET1, 2, 4, 0),
+	SOC_SINGLE("DAC Notch Filter Switch", ES8316_DAC_SET2, 6, 1, 0),
+	SOC_SINGLE("DAC Double Fs Switch", ES8316_DAC_SET2, 7, 1, 0),
+	SOC_SINGLE("DAC Stereo Enhancement", ES8316_DAC_SET3, 0, 7, 0),
+
+	SOC_ENUM("Capture Polarity", adcpol),
+	SOC_SINGLE("Mic Boost Switch", ES8316_ADC_D2SEPGA, 0, 1, 0),
+	SOC_SINGLE_TLV("ADC Capture Volume", ES8316_ADC_VOLUME,
+		       0, 0xc0, 1, adc_vol_tlv),
+	SOC_SINGLE_TLV("ADC PGA Gain Volume", ES8316_ADC_PGAGAIN,
+		       4, 10, 0, adc_pga_gain_tlv),
+	SOC_SINGLE("ADC Soft Ramp Switch", ES8316_ADC_MUTE, 4, 1, 0),
+	SOC_SINGLE("ADC Double Fs Switch", ES8316_ADC_DMIC, 4, 1, 0),
+
+	SOC_SINGLE("ALC Capture Switch", ES8316_ADC_ALC1, 6, 1, 0),
+	SOC_SINGLE_TLV("ALC Capture Max Volume", ES8316_ADC_ALC1, 0, 28, 0,
+		       alc_max_gain_tlv),
+	SOC_SINGLE_TLV("ALC Capture Min Volume", ES8316_ADC_ALC2, 0, 28, 0,
+		       alc_min_gain_tlv),
+	SOC_SINGLE_TLV("ALC Capture Target Volume", ES8316_ADC_ALC3, 4, 10, 0,
+		       alc_target_tlv),
+	SOC_SINGLE("ALC Capture Hold Time", ES8316_ADC_ALC3, 0, 10, 0),
+	SOC_SINGLE("ALC Capture Decay Time", ES8316_ADC_ALC4, 4, 10, 0),
+	SOC_SINGLE("ALC Capture Attack Time", ES8316_ADC_ALC4, 0, 10, 0),
+	SOC_SINGLE("ALC Capture Noise Gate Switch", ES8316_ADC_ALC_NG,
+		   5, 1, 0),
+	SOC_SINGLE("ALC Capture Noise Gate Threshold", ES8316_ADC_ALC_NG,
+		   0, 31, 0),
+	SOC_ENUM("ALC Capture Noise Gate Type", ng_type),
+};
+
+/* Analog Input Mux */
+static const char * const es8316_analog_in_txt[] = {
+		"lin1-rin1",
+		"lin2-rin2",
+		"lin1-rin1 with 20db Boost",
+		"lin2-rin2 with 20db Boost"
+};
+static const unsigned int es8316_analog_in_values[] = { 0, 1, 2, 3 };
+static const struct soc_enum es8316_analog_input_enum =
+	SOC_VALUE_ENUM_SINGLE(ES8316_ADC_PDN_LINSEL, 4, 3,
+			      ARRAY_SIZE(es8316_analog_in_txt),
+			      es8316_analog_in_txt,
+			      es8316_analog_in_values);
+static const struct snd_kcontrol_new es8316_analog_in_mux_controls =
+	SOC_DAPM_ENUM("Route", es8316_analog_input_enum);
+
+static const char * const es8316_dmic_txt[] = {
+		"dmic disable",
+		"dmic data at high level",
+		"dmic data at low level",
+};
+static const unsigned int es8316_dmic_values[] = { 0, 1, 2 };
+static const struct soc_enum es8316_dmic_src_enum =
+	SOC_VALUE_ENUM_SINGLE(ES8316_ADC_DMIC, 0, 3,
+			      ARRAY_SIZE(es8316_dmic_txt),
+			      es8316_dmic_txt,
+			      es8316_dmic_values);
+static const struct snd_kcontrol_new es8316_dmic_src_controls =
+	SOC_DAPM_ENUM("Route", es8316_dmic_src_enum);
+
+/* hp mixer mux */
+static const char * const es8316_hpmux_texts[] = {
+	"lin1-rin1",
+	"lin2-rin2",
+	"lin-rin with Boost",
+	"lin-rin with Boost and PGA"
+};
+
+static const unsigned int es8316_hpmux_values[] = { 0, 1, 2, 3 };
+
+static SOC_ENUM_SINGLE_DECL(es8316_left_hpmux_enum, ES8316_HPMIX_SEL,
+	4, es8316_hpmux_texts);
+
+static const struct snd_kcontrol_new es8316_left_hpmux_controls =
+	SOC_DAPM_ENUM("Route", es8316_left_hpmux_enum);
+
+static SOC_ENUM_SINGLE_DECL(es8316_right_hpmux_enum, ES8316_HPMIX_SEL,
+	0, es8316_hpmux_texts);
+
+static const struct snd_kcontrol_new es8316_right_hpmux_controls =
+	SOC_DAPM_ENUM("Route", es8316_right_hpmux_enum);
+
+/* headphone Output Mixer */
+static const struct snd_kcontrol_new es8316_out_left_mix[] = {
+	SOC_DAPM_SINGLE("LLIN Switch", ES8316_HPMIX_SWITCH, 6, 1, 0),
+	SOC_DAPM_SINGLE("Left DAC Switch", ES8316_HPMIX_SWITCH, 7, 1, 0),
+};
+static const struct snd_kcontrol_new es8316_out_right_mix[] = {
+	SOC_DAPM_SINGLE("RLIN Switch", ES8316_HPMIX_SWITCH, 2, 1, 0),
+	SOC_DAPM_SINGLE("Right DAC Switch", ES8316_HPMIX_SWITCH, 3, 1, 0),
+};
+
+/* DAC data source mux */
+static const char * const es8316_dacsrc_texts[] = {
+	"LDATA TO LDAC, RDATA TO RDAC",
+	"LDATA TO LDAC, LDATA TO RDAC",
+	"RDATA TO LDAC, RDATA TO RDAC",
+	"RDATA TO LDAC, LDATA TO RDAC",
+};
+
+static const unsigned int es8316_dacsrc_values[] = { 0, 1, 2, 3 };
+
+static SOC_ENUM_SINGLE_DECL(es8316_dacsrc_mux_enum, ES8316_DAC_SET1,
+	6, es8316_dacsrc_texts);
+
+static const struct snd_kcontrol_new es8316_dacsrc_mux_controls =
+	SOC_DAPM_ENUM("Route", es8316_dacsrc_mux_enum);
+
+static const struct snd_soc_dapm_widget es8316_dapm_widgets[] = {
+	SND_SOC_DAPM_SUPPLY("Bias", ES8316_SYS_PDN, 3, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("Analog power", ES8316_SYS_PDN, 4, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("Mic Bias", ES8316_SYS_PDN, 5, 1, NULL, 0),
+
+	SND_SOC_DAPM_INPUT("DMIC"),
+	SND_SOC_DAPM_INPUT("MIC1"),
+	SND_SOC_DAPM_INPUT("MIC2"),
+
+	/* Input Mux */
+	SND_SOC_DAPM_MUX("Differential Mux", SND_SOC_NOPM, 0, 0,
+			 &es8316_analog_in_mux_controls),
+
+	SND_SOC_DAPM_SUPPLY("ADC Vref", ES8316_SYS_PDN, 1, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("ADC bias", ES8316_SYS_PDN, 2, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("ADC Clock", ES8316_CLKMGR_CLKSW, 3, 0, NULL, 0),
+	SND_SOC_DAPM_PGA("Line input PGA", ES8316_ADC_PDN_LINSEL,
+			 7, 1, NULL, 0),
+	SND_SOC_DAPM_ADC("Mono ADC", NULL, ES8316_ADC_PDN_LINSEL, 6, 1),
+	SND_SOC_DAPM_MUX("Digital Mic Mux", SND_SOC_NOPM, 0, 0,
+			 &es8316_dmic_src_controls),
+
+	/* Digital Interface */
+	SND_SOC_DAPM_AIF_OUT("I2S OUT", "I2S1 Capture",  1,
+			     ES8316_SERDATA_ADC, 6, 1),
+	SND_SOC_DAPM_AIF_IN("I2S IN", "I2S1 Playback", 0,
+			    SND_SOC_NOPM, 0, 0),
+
+	SND_SOC_DAPM_MUX("DAC Source Mux", SND_SOC_NOPM, 0, 0,
+			 &es8316_dacsrc_mux_controls),
+
+	SND_SOC_DAPM_SUPPLY("DAC Vref", ES8316_SYS_PDN, 0, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("DAC Clock", ES8316_CLKMGR_CLKSW, 2, 0, NULL, 0),
+	SND_SOC_DAPM_DAC("Right DAC", NULL, ES8316_DAC_PDN, 0, 1),
+	SND_SOC_DAPM_DAC("Left DAC", NULL, ES8316_DAC_PDN, 4, 1),
+
+	/* Headphone Output Side */
+	SND_SOC_DAPM_MUX("Left Headphone Mux", SND_SOC_NOPM, 0, 0,
+			 &es8316_left_hpmux_controls),
+	SND_SOC_DAPM_MUX("Right Headphone Mux", SND_SOC_NOPM, 0, 0,
+			 &es8316_right_hpmux_controls),
+	SND_SOC_DAPM_MIXER("Left Headphone Mixer", ES8316_HPMIX_PDN,
+			   5, 1, &es8316_out_left_mix[0],
+			   ARRAY_SIZE(es8316_out_left_mix)),
+	SND_SOC_DAPM_MIXER("Right Headphone Mixer", ES8316_HPMIX_PDN,
+			   1, 1, &es8316_out_right_mix[0],
+			   ARRAY_SIZE(es8316_out_right_mix)),
+	SND_SOC_DAPM_PGA("Left Headphone Mixer Out", ES8316_HPMIX_PDN,
+			 4, 1, NULL, 0),
+	SND_SOC_DAPM_PGA("Right Headphone Mixer Out", ES8316_HPMIX_PDN,
+			 0, 1, NULL, 0),
+
+	SND_SOC_DAPM_OUT_DRV("Left Headphone Charge Pump", ES8316_CPHP_OUTEN,
+			     6, 0, NULL, 0),
+	SND_SOC_DAPM_OUT_DRV("Right Headphone Charge Pump", ES8316_CPHP_OUTEN,
+			     2, 0, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("Headphone Charge Pump", ES8316_CPHP_PDN2,
+			    5, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("Headphone Charge Pump Clock", ES8316_CLKMGR_CLKSW,
+			    4, 0, NULL, 0),
+
+	SND_SOC_DAPM_OUT_DRV("Left Headphone Driver", ES8316_CPHP_OUTEN,
+			     5, 0, NULL, 0),
+	SND_SOC_DAPM_OUT_DRV("Right Headphone Driver", ES8316_CPHP_OUTEN,
+			     1, 0, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("Headphone Out", ES8316_CPHP_PDN1, 2, 1, NULL, 0),
+
+	/* pdn_Lical and pdn_Rical bits are documented as Reserved, but must
+	 * be explicitly unset in order to enable HP output
+	 */
+	SND_SOC_DAPM_SUPPLY("Left Headphone ical", ES8316_CPHP_ICAL_VOL,
+			    7, 1, NULL, 0),
+	SND_SOC_DAPM_SUPPLY("Right Headphone ical", ES8316_CPHP_ICAL_VOL,
+			    3, 1, NULL, 0),
+
+	SND_SOC_DAPM_OUTPUT("HPOL"),
+	SND_SOC_DAPM_OUTPUT("HPOR"),
+};
+
+static const struct snd_soc_dapm_route es8316_dapm_routes[] = {
+	/* Recording */
+	{"MIC1", NULL, "Mic Bias"},
+	{"MIC2", NULL, "Mic Bias"},
+	{"MIC1", NULL, "Bias"},
+	{"MIC2", NULL, "Bias"},
+	{"MIC1", NULL, "Analog power"},
+	{"MIC2", NULL, "Analog power"},
+
+	{"Differential Mux", "lin1-rin1", "MIC1"},
+	{"Differential Mux", "lin2-rin2", "MIC2"},
+	{"Line input PGA", NULL, "Differential Mux"},
+
+	{"Mono ADC", NULL, "ADC Clock"},
+	{"Mono ADC", NULL, "ADC Vref"},
+	{"Mono ADC", NULL, "ADC bias"},
+	{"Mono ADC", NULL, "Line input PGA"},
+
+	/* It's not clear why, but to avoid recording only silence,
+	 * the DAC clock must be running for the ADC to work.
+	 */
+	{"Mono ADC", NULL, "DAC Clock"},
+
+	{"Digital Mic Mux", "dmic disable", "Mono ADC"},
+
+	{"I2S OUT", NULL, "Digital Mic Mux"},
+
+	/* Playback */
+	{"DAC Source Mux", "LDATA TO LDAC, RDATA TO RDAC", "I2S IN"},
+
+	{"Left DAC", NULL, "DAC Clock"},
+	{"Right DAC", NULL, "DAC Clock"},
+
+	{"Left DAC", NULL, "DAC Vref"},
+	{"Right DAC", NULL, "DAC Vref"},
+
+	{"Left DAC", NULL, "DAC Source Mux"},
+	{"Right DAC", NULL, "DAC Source Mux"},
+
+	{"Left Headphone Mux", "lin-rin with Boost and PGA", "Line input PGA"},
+	{"Right Headphone Mux", "lin-rin with Boost and PGA", "Line input PGA"},
+
+	{"Left Headphone Mixer", "LLIN Switch", "Left Headphone Mux"},
+	{"Left Headphone Mixer", "Left DAC Switch", "Left DAC"},
+
+	{"Right Headphone Mixer", "RLIN Switch", "Right Headphone Mux"},
+	{"Right Headphone Mixer", "Right DAC Switch", "Right DAC"},
+
+	{"Left Headphone Mixer Out", NULL, "Left Headphone Mixer"},
+	{"Right Headphone Mixer Out", NULL, "Right Headphone Mixer"},
+
+	{"Left Headphone Charge Pump", NULL, "Left Headphone Mixer Out"},
+	{"Right Headphone Charge Pump", NULL, "Right Headphone Mixer Out"},
+
+	{"Left Headphone Charge Pump", NULL, "Headphone Charge Pump"},
+	{"Right Headphone Charge Pump", NULL, "Headphone Charge Pump"},
+
+	{"Left Headphone Charge Pump", NULL, "Headphone Charge Pump Clock"},
+	{"Right Headphone Charge Pump", NULL, "Headphone Charge Pump Clock"},
+
+	{"Left Headphone Driver", NULL, "Left Headphone Charge Pump"},
+	{"Right Headphone Driver", NULL, "Right Headphone Charge Pump"},
+
+	{"HPOL", NULL, "Left Headphone Driver"},
+	{"HPOR", NULL, "Right Headphone Driver"},
+
+	{"HPOL", NULL, "Left Headphone ical"},
+	{"HPOR", NULL, "Right Headphone ical"},
+
+	{"Headphone Out", NULL, "Bias"},
+	{"Headphone Out", NULL, "Analog power"},
+	{"HPOL", NULL, "Headphone Out"},
+	{"HPOR", NULL, "Headphone Out"},
+};
+
+static int es8316_set_dai_sysclk(struct snd_soc_dai *codec_dai,
+				 int clk_id, unsigned int freq, int dir)
+{
+	struct snd_soc_codec *codec = codec_dai->codec;
+	struct es8316_priv *es8316 = snd_soc_codec_get_drvdata(codec);
+	int i;
+	int count = 0;
+
+	es8316->sysclk = freq;
+
+	if (freq == 0)
+		return 0;
+
+	/* Limit supported sample rates to ones that can be autodetected
+	 * by the codec running in slave mode.
+	 */
+	for (i = 0; i < NR_SUPPORTED_MCLK_LRCK_RATIOS; i++) {
+		const unsigned int ratio = supported_mclk_lrck_ratios[i];
+
+		if (freq % ratio == 0)
+			es8316->allowed_rates[count++] = freq / ratio;
+	}
+
+	es8316->sysclk_constraints.list = es8316->allowed_rates;
+	es8316->sysclk_constraints.count = count;
+
+	return 0;
+}
+
+static int es8316_set_dai_fmt(struct snd_soc_dai *codec_dai,
+			      unsigned int fmt)
+{
+	struct snd_soc_codec *codec = codec_dai->codec;
+	u8 serdata1 = 0;
+	u8 serdata2 = 0;
+	u8 clksw;
+	u8 mask;
+
+	if ((fmt & SND_SOC_DAIFMT_MASTER_MASK) != SND_SOC_DAIFMT_CBS_CFS) {
+		dev_err(codec->dev, "Codec driver only supports slave mode\n");
+		return -EINVAL;
+	}
+
+	if ((fmt & SND_SOC_DAIFMT_FORMAT_MASK) != SND_SOC_DAIFMT_I2S) {
+		dev_err(codec->dev, "Codec driver only supports I2S format\n");
+		return -EINVAL;
+	}
+
+	/* Clock inversion */
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		break;
+	case SND_SOC_DAIFMT_IB_IF:
+		serdata1 |= ES8316_SERDATA1_BCLK_INV;
+		serdata2 |= ES8316_SERDATA2_ADCLRP;
+		break;
+	case SND_SOC_DAIFMT_IB_NF:
+		serdata1 |= ES8316_SERDATA1_BCLK_INV;
+		break;
+	case SND_SOC_DAIFMT_NB_IF:
+		serdata2 |= ES8316_SERDATA2_ADCLRP;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	mask = ES8316_SERDATA1_MASTER | ES8316_SERDATA1_BCLK_INV;
+	snd_soc_update_bits(codec, ES8316_SERDATA1, mask, serdata1);
+
+	mask = ES8316_SERDATA2_FMT_MASK | ES8316_SERDATA2_ADCLRP;
+	snd_soc_update_bits(codec, ES8316_SERDATA_ADC, mask, serdata2);
+	snd_soc_update_bits(codec, ES8316_SERDATA_DAC, mask, serdata2);
+
+	/* Enable BCLK and MCLK inputs in slave mode */
+	clksw = ES8316_CLKMGR_CLKSW_MCLK_ON | ES8316_CLKMGR_CLKSW_BCLK_ON;
+	snd_soc_update_bits(codec, ES8316_CLKMGR_CLKSW, clksw, clksw);
+
+	return 0;
+}
+
+static int es8316_pcm_startup(struct snd_pcm_substream *substream,
+			      struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct es8316_priv *es8316 = snd_soc_codec_get_drvdata(codec);
+
+	if (es8316->sysclk == 0) {
+		dev_err(codec->dev, "No sysclk provided\n");
+		return -EINVAL;
+	}
+
+	/* The set of sample rates that can be supported depends on the
+	 * MCLK supplied to the CODEC.
+	 */
+	snd_pcm_hw_constraint_list(substream->runtime, 0,
+				   SNDRV_PCM_HW_PARAM_RATE,
+				   &es8316->sysclk_constraints);
+
+	return 0;
+}
+
+static int es8316_pcm_hw_params(struct snd_pcm_substream *substream,
+				struct snd_pcm_hw_params *params,
+				struct snd_soc_dai *dai)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_codec *codec = rtd->codec;
+	struct es8316_priv *es8316 = snd_soc_codec_get_drvdata(codec);
+	u8 wordlen = 0;
+
+	if (!es8316->sysclk) {
+		dev_err(codec->dev, "No MCLK configured\n");
+		return -EINVAL;
+	}
+
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		wordlen = ES8316_SERDATA2_LEN_16;
+		break;
+	case SNDRV_PCM_FORMAT_S20_3LE:
+		wordlen = ES8316_SERDATA2_LEN_20;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		wordlen = ES8316_SERDATA2_LEN_24;
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+		wordlen = ES8316_SERDATA2_LEN_32;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	snd_soc_update_bits(codec, ES8316_SERDATA_DAC,
+			    ES8316_SERDATA2_LEN_MASK, wordlen);
+	snd_soc_update_bits(codec, ES8316_SERDATA_ADC,
+			    ES8316_SERDATA2_LEN_MASK, wordlen);
+	return 0;
+}
+
+static int es8316_mute(struct snd_soc_dai *dai, int mute)
+{
+	snd_soc_update_bits(dai->codec, ES8316_DAC_SET1, 0x20,
+			    mute ? 0x20 : 0);
+	return 0;
+}
+
+#define ES8316_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE | \
+			SNDRV_PCM_FMTBIT_S24_LE)
+
+static struct snd_soc_dai_ops es8316_ops = {
+	.startup = es8316_pcm_startup,
+	.hw_params = es8316_pcm_hw_params,
+	.set_fmt = es8316_set_dai_fmt,
+	.set_sysclk = es8316_set_dai_sysclk,
+	.digital_mute = es8316_mute,
+};
+
+static struct snd_soc_dai_driver es8316_dai = {
+	.name = "ES8316 HiFi",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 1,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_8000_48000,
+		.formats = ES8316_FORMATS,
+	},
+	.capture = {
+		.stream_name = "Capture",
+		.channels_min = 1,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_8000_48000,
+		.formats = ES8316_FORMATS,
+	},
+	.ops = &es8316_ops,
+	.symmetric_rates = 1,
+};
+
+static int es8316_probe(struct snd_soc_codec *codec)
+{
+	/* Reset codec and enable current state machine */
+	snd_soc_write(codec, ES8316_RESET, 0x3f);
+	usleep_range(5000, 5500);
+	snd_soc_write(codec, ES8316_RESET, ES8316_RESET_CSM_ON);
+	msleep(30);
+
+	/*
+	 * Documentation is unclear, but this value from the vendor driver is
+	 * needed otherwise audio output is silent.
+	 */
+	snd_soc_write(codec, ES8316_SYS_VMIDSEL, 0xff);
+
+	/*
+	 * Documentation for this register is unclear and incomplete,
+	 * but here is a vendor-provided value that improves volume
+	 * and quality for Intel CHT platforms.
+	 */
+	snd_soc_write(codec, ES8316_CLKMGR_ADCOSR, 0x32);
+
+	return 0;
+}
+
+static struct snd_soc_codec_driver soc_codec_dev_es8316 = {
+	.probe		= es8316_probe,
+	.idle_bias_off	= true,
+
+	.component_driver = {
+		.controls		= es8316_snd_controls,
+		.num_controls		= ARRAY_SIZE(es8316_snd_controls),
+		.dapm_widgets		= es8316_dapm_widgets,
+		.num_dapm_widgets	= ARRAY_SIZE(es8316_dapm_widgets),
+		.dapm_routes		= es8316_dapm_routes,
+		.num_dapm_routes	= ARRAY_SIZE(es8316_dapm_routes),
+	},
+};
+
+static const struct regmap_config es8316_regmap = {
+	.reg_bits = 8,
+	.val_bits = 8,
+	.max_register = 0x53,
+	.cache_type = REGCACHE_RBTREE,
+};
+
+static int es8316_i2c_probe(struct i2c_client *i2c_client,
+			    const struct i2c_device_id *id)
+{
+	struct es8316_priv *es8316;
+	struct regmap *regmap;
+
+	es8316 = devm_kzalloc(&i2c_client->dev, sizeof(struct es8316_priv),
+			      GFP_KERNEL);
+	if (es8316 == NULL)
+		return -ENOMEM;
+
+	i2c_set_clientdata(i2c_client, es8316);
+
+	regmap = devm_regmap_init_i2c(i2c_client, &es8316_regmap);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	return snd_soc_register_codec(&i2c_client->dev, &soc_codec_dev_es8316,
+				      &es8316_dai, 1);
+}
+
+static int es8316_i2c_remove(struct i2c_client *client)
+{
+	snd_soc_unregister_codec(&client->dev);
+	return 0;
+}
+
+static const struct i2c_device_id es8316_i2c_id[] = {
+	{"es8316", 0 },
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, es8316_i2c_id);
+
+static const struct of_device_id es8316_of_match[] = {
+	{ .compatible = "everest,es8316", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, es8316_of_match);
+
+static const struct acpi_device_id es8316_acpi_match[] = {
+	{"ESSX8316", 0},
+	{},
+};
+MODULE_DEVICE_TABLE(acpi, es8316_acpi_match);
+
+static struct i2c_driver es8316_i2c_driver = {
+	.driver = {
+		.name			= "es8316",
+		.acpi_match_table	= ACPI_PTR(es8316_acpi_match),
+		.of_match_table		= of_match_ptr(es8316_of_match),
+	},
+	.probe		= es8316_i2c_probe,
+	.remove		= es8316_i2c_remove,
+	.id_table	= es8316_i2c_id,
+};
+module_i2c_driver(es8316_i2c_driver);
+
+MODULE_DESCRIPTION("Everest Semi ES8316 ALSA SoC Codec Driver");
+MODULE_AUTHOR("David Yang <yangxiaohua@everest-semi.com>");
+MODULE_LICENSE("GPL v2");
diff --git a/sound/soc/codecs/es8316.h b/sound/soc/codecs/es8316.h
new file mode 100644
index 000000000000..6bcdd63ea459
--- /dev/null
+++ b/sound/soc/codecs/es8316.h
@@ -0,0 +1,129 @@
+/*
+ * Copyright Everest Semiconductor Co.,Ltd
+ *
+ * Author: David Yang <yangxiaohua@everest-semi.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#ifndef _ES8316_H
+#define _ES8316_H
+
+/*
+ * ES8316 register space
+ */
+
+/* Reset Control */
+#define ES8316_RESET		0x00
+
+/* Clock Management */
+#define ES8316_CLKMGR_CLKSW	0x01
+#define ES8316_CLKMGR_CLKSEL	0x02
+#define ES8316_CLKMGR_ADCOSR	0x03
+#define ES8316_CLKMGR_ADCDIV1	0x04
+#define ES8316_CLKMGR_ADCDIV2	0x05
+#define ES8316_CLKMGR_DACDIV1	0x06
+#define ES8316_CLKMGR_DACDIV2	0x07
+#define ES8316_CLKMGR_CPDIV	0x08
+
+/* Serial Data Port Control */
+#define ES8316_SERDATA1		0x09
+#define ES8316_SERDATA_ADC	0x0a
+#define ES8316_SERDATA_DAC	0x0b
+
+/* System Control */
+#define ES8316_SYS_VMIDSEL	0x0c
+#define ES8316_SYS_PDN		0x0d
+#define ES8316_SYS_LP1		0x0e
+#define ES8316_SYS_LP2		0x0f
+#define ES8316_SYS_VMIDLOW	0x10
+#define ES8316_SYS_VSEL		0x11
+#define ES8316_SYS_REF		0x12
+
+/* Headphone Mixer */
+#define ES8316_HPMIX_SEL	0x13
+#define ES8316_HPMIX_SWITCH	0x14
+#define ES8316_HPMIX_PDN	0x15
+#define ES8316_HPMIX_VOL	0x16
+
+/* Charge Pump Headphone driver */
+#define ES8316_CPHP_OUTEN	0x17
+#define ES8316_CPHP_ICAL_VOL	0x18
+#define ES8316_CPHP_PDN1	0x19
+#define ES8316_CPHP_PDN2	0x1a
+#define ES8316_CPHP_LDOCTL	0x1b
+
+/* Calibration */
+#define ES8316_CAL_TYPE		0x1c
+#define ES8316_CAL_SET		0x1d
+#define ES8316_CAL_HPLIV	0x1e
+#define ES8316_CAL_HPRIV	0x1f
+#define ES8316_CAL_HPLMV	0x20
+#define ES8316_CAL_HPRMV	0x21
+
+/* ADC Control */
+#define ES8316_ADC_PDN_LINSEL	0x22
+#define ES8316_ADC_PGAGAIN	0x23
+#define ES8316_ADC_D2SEPGA	0x24
+#define ES8316_ADC_DMIC		0x25
+#define ES8316_ADC_MUTE		0x26
+#define ES8316_ADC_VOLUME	0x27
+#define ES8316_ADC_ALC1		0x29
+#define ES8316_ADC_ALC2		0x2a
+#define ES8316_ADC_ALC3		0x2b
+#define ES8316_ADC_ALC4		0x2c
+#define ES8316_ADC_ALC5		0x2d
+#define ES8316_ADC_ALC_NG	0x2e
+
+/* DAC Control */
+#define ES8316_DAC_PDN		0x2f
+#define ES8316_DAC_SET1		0x30
+#define ES8316_DAC_SET2		0x31
+#define ES8316_DAC_SET3		0x32
+#define ES8316_DAC_VOLL		0x33
+#define ES8316_DAC_VOLR		0x34
+
+/* GPIO */
+#define ES8316_GPIO_SEL		0x4d
+#define ES8316_GPIO_DEBOUNCE	0x4e
+#define ES8316_GPIO_FLAG	0x4f
+
+/* Test mode */
+#define ES8316_TESTMODE		0x50
+#define ES8316_TEST1		0x51
+#define ES8316_TEST2		0x52
+#define ES8316_TEST3		0x53
+
+/*
+ * Field definitions
+ */
+
+/* ES8316_RESET */
+#define ES8316_RESET_CSM_ON		0x80
+
+/* ES8316_CLKMGR_CLKSW */
+#define ES8316_CLKMGR_CLKSW_MCLK_ON	0x40
+#define ES8316_CLKMGR_CLKSW_BCLK_ON	0x20
+
+/* ES8316_SERDATA1 */
+#define ES8316_SERDATA1_MASTER		0x80
+#define ES8316_SERDATA1_BCLK_INV	0x20
+
+/* ES8316_SERDATA_ADC and _DAC */
+#define ES8316_SERDATA2_FMT_MASK	0x3
+#define ES8316_SERDATA2_FMT_I2S		0x00
+#define ES8316_SERDATA2_FMT_LEFTJ	0x01
+#define ES8316_SERDATA2_FMT_RIGHTJ	0x02
+#define ES8316_SERDATA2_FMT_PCM		0x03
+#define ES8316_SERDATA2_ADCLRP		0x20
+#define ES8316_SERDATA2_LEN_MASK	0x1c
+#define ES8316_SERDATA2_LEN_24		0x00
+#define ES8316_SERDATA2_LEN_20		0x04
+#define ES8316_SERDATA2_LEN_18		0x08
+#define ES8316_SERDATA2_LEN_16		0x0c
+#define ES8316_SERDATA2_LEN_32		0x10
+
+#endif
