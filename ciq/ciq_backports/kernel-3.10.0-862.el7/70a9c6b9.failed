drm/amdgpu: fix placement flags in amdgpu_ttm_bind

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Christian König <christian.koenig@amd.com>
commit 70a9c6b9010848e101ff67a886f2e75209b2f0d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/70a9c6b9.failed

Otherwise we lose the NO_EVICT flag and can try to evict pinned BOs.

	Signed-off-by: Christian König <christian.koenig@amd.com>
	Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit 70a9c6b9010848e101ff67a886f2e75209b2f0d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
diff --cc drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
index 8e35c1ff59e3,841a5699bef0..000000000000
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
@@@ -751,27 -811,28 +751,42 @@@ int amdgpu_ttm_bind(struct ttm_buffer_o
  	if (!ttm || amdgpu_ttm_is_bound(ttm))
  		return 0;
  
++<<<<<<< HEAD
 +	r = amdgpu_gtt_mgr_alloc(&bo->bdev->man[TTM_PL_TT], bo,
 +				 NULL, bo_mem);
 +	if (r) {
 +		DRM_ERROR("Failed to allocate GTT address space (%d)\n", r);
++=======
+ 	tmp = bo->mem;
+ 	tmp.mm_node = NULL;
+ 	placement.num_placement = 1;
+ 	placement.placement = &placements;
+ 	placement.num_busy_placement = 1;
+ 	placement.busy_placement = &placements;
+ 	placements.fpfn = 0;
+ 	placements.lpfn = adev->mc.gart_size >> PAGE_SHIFT;
+ 	placements.flags = bo->mem.placement | TTM_PL_FLAG_TT;
+ 
+ 	r = ttm_bo_mem_space(bo, &placement, &tmp, true, false);
+ 	if (unlikely(r))
++>>>>>>> 70a9c6b90108 (drm/amdgpu: fix placement flags in amdgpu_ttm_bind)
  		return r;
 +	}
  
 -	r = ttm_bo_move_ttm(bo, true, false, &tmp);
 -	if (unlikely(r))
 -		ttm_bo_mem_put(bo, &tmp);
 -	else
 -		bo->offset = (bo->mem.start << PAGE_SHIFT) +
 -			bo->bdev->man[bo->mem.mem_type].gpu_offset;
 +	flags = amdgpu_ttm_tt_pte_flags(gtt->adev, ttm, bo_mem);
 +	gtt->offset = (u64)bo_mem->start << PAGE_SHIFT;
 +	r = amdgpu_gart_bind(gtt->adev, gtt->offset, ttm->num_pages,
 +		ttm->pages, gtt->ttm.dma_address, flags);
  
 -	return r;
 +	if (r) {
 +		DRM_ERROR("failed to bind %lu pages at 0x%08llX\n",
 +			  ttm->num_pages, gtt->offset);
 +		return r;
 +	}
 +	spin_lock(&gtt->adev->gtt_list_lock);
 +	list_add_tail(&gtt->list, &gtt->adev->gtt_list);
 +	spin_unlock(&gtt->adev->gtt_list_lock);
 +	return 0;
  }
  
  int amdgpu_ttm_recover_gart(struct amdgpu_device *adev)
* Unmerged path drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
