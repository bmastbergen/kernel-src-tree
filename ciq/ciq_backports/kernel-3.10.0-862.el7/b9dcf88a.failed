nfp: add metadata format bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit b9dcf88a47ebab2743a0c627a95126c4cb3e9883
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b9dcf88a.failed

We only need FW version in the first cache line of adapter struct
because we need to know the metadata format.  To save space add a
metadata format bit.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b9dcf88a47ebab2743a0c627a95126c4cb3e9883)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net.h
index 1826ee93d1da,34f8c439f42f..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@@ -417,12 -428,19 +417,18 @@@ static inline bool nfp_net_fw_ver_eq(st
  	       fw_ver->minor == minor;
  }
  
 -struct nfp_stat_pair {
 -	u64 pkts;
 -	u64 bytes;
 -};
 -
  /**
   * struct nfp_net - NFP network device structure
 - * @dev:		Backpointer to struct device
 + * @pdev:               Backpointer to PCI device
   * @netdev:             Backpointer to net_device structure
   * @is_vf:              Is the driver attached to a VF?
++<<<<<<< HEAD
 + * @fw_loaded:          Is the firmware loaded?
++=======
+  * @bpf_offload_skip_sw:  Offloaded BPF program will not be rerun by cls_bpf
+  * @bpf_offload_xdp:	Offloaded BPF program is XDP
+  * @chained_metadata_format:  Firemware will use new metadata format
++>>>>>>> b9dcf88a47eb (nfp: add metadata format bit)
   * @ctrl:               Local copy of the control register/word.
   * @fl_bufsz:           Currently configured size of the freelist buffers
   * @rx_offset:		Offset in the RX buffers where packet data starts
@@@ -478,7 -506,9 +484,13 @@@ struct nfp_net 
  	struct net_device *netdev;
  
  	unsigned is_vf:1;
++<<<<<<< HEAD
 +	unsigned fw_loaded:1;
++=======
+ 	unsigned bpf_offload_skip_sw:1;
+ 	unsigned bpf_offload_xdp:1;
+ 	unsigned chained_metadata_format:1;
++>>>>>>> b9dcf88a47eb (nfp: add metadata format bit)
  
  	u32 ctrl;
  	u32 fl_bufsz;
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index e0a7eb1db7a9,2d964d030dbe..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -1442,7 -1652,18 +1442,22 @@@ static int nfp_net_rx(struct nfp_net_rx
  		skb_reserve(skb, data_off);
  		skb_put(skb, pkt_len);
  
++<<<<<<< HEAD
 +		nfp_net_set_hash_desc(nn->netdev, skb, rxd);
++=======
+ 		if (!nn->chained_metadata_format) {
+ 			nfp_net_set_hash_desc(nn->netdev, skb, rxd);
+ 		} else if (meta_len) {
+ 			void *end;
+ 
+ 			end = nfp_net_parse_meta(nn->netdev, skb, meta_len);
+ 			if (unlikely(end != skb->data)) {
+ 				nn_warn_ratelimit(nn, "invalid RX packet metadata\n");
+ 				nfp_net_rx_drop(r_vec, rx_ring, NULL, skb);
+ 				continue;
+ 			}
+ 		}
++>>>>>>> b9dcf88a47eb (nfp: add metadata format bit)
  
  		skb_record_rx_queue(skb, rx_ring->idx);
  		skb->protocol = eth_type_trans(skb, nn->netdev);
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
