KVM: x86: introduce cancel_hv_tscdeadline

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Wanpeng Li <wanpeng.li@hotmail.com>
commit bd97ad0e7ed6a8870cc691fdfd108dc952fe45eb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bd97ad0e.failed

Introduce cancel_hv_tscdeadline() to encapsulate preemption
timer cancel stuff.

	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Radim Krčmář <rkrcmar@redhat.com>
	Cc: Yunhong Jiang <yunhong.jiang@intel.com>
	Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit bd97ad0e7ed6a8870cc691fdfd108dc952fe45eb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/lapic.c
diff --cc arch/x86/kvm/lapic.c
index e191bcf72fce,9c20ac14caf5..000000000000
--- a/arch/x86/kvm/lapic.c
+++ b/arch/x86/kvm/lapic.c
@@@ -1373,6 -1343,70 +1373,73 @@@ static void start_sw_tscdeadline(struc
  	local_irq_restore(flags);
  }
  
++<<<<<<< HEAD
++=======
+ bool kvm_lapic_hv_timer_in_use(struct kvm_vcpu *vcpu)
+ {
+ 	return vcpu->arch.apic->lapic_timer.hv_timer_in_use;
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_hv_timer_in_use);
+ 
+ static void cancel_hv_tscdeadline(struct kvm_lapic *apic)
+ {
+ 	kvm_x86_ops->cancel_hv_timer(apic->vcpu);
+ 	apic->lapic_timer.hv_timer_in_use = false;
+ }
+ 
+ void kvm_lapic_expired_hv_timer(struct kvm_vcpu *vcpu)
+ {
+ 	struct kvm_lapic *apic = vcpu->arch.apic;
+ 
+ 	WARN_ON(!apic->lapic_timer.hv_timer_in_use);
+ 	WARN_ON(swait_active(&vcpu->wq));
+ 	cancel_hv_tscdeadline(apic);
+ 	apic_timer_expired(apic);
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_expired_hv_timer);
+ 
+ void kvm_lapic_switch_to_hv_timer(struct kvm_vcpu *vcpu)
+ {
+ 	struct kvm_lapic *apic = vcpu->arch.apic;
+ 
+ 	WARN_ON(apic->lapic_timer.hv_timer_in_use);
+ 
+ 	if (apic_lvtt_tscdeadline(apic) &&
+ 	    !atomic_read(&apic->lapic_timer.pending)) {
+ 		u64 tscdeadline = apic->lapic_timer.tscdeadline;
+ 
+ 		if (!kvm_x86_ops->set_hv_timer(vcpu, tscdeadline)) {
+ 			apic->lapic_timer.hv_timer_in_use = true;
+ 			hrtimer_cancel(&apic->lapic_timer.timer);
+ 
+ 			/* In case the sw timer triggered in the window */
+ 			if (atomic_read(&apic->lapic_timer.pending))
+ 				cancel_hv_tscdeadline(apic);
+ 		}
+ 		trace_kvm_hv_timer_state(vcpu->vcpu_id,
+ 				apic->lapic_timer.hv_timer_in_use);
+ 	}
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_switch_to_hv_timer);
+ 
+ void kvm_lapic_switch_to_sw_timer(struct kvm_vcpu *vcpu)
+ {
+ 	struct kvm_lapic *apic = vcpu->arch.apic;
+ 
+ 	/* Possibly the TSC deadline timer is not enabled yet */
+ 	if (!apic->lapic_timer.hv_timer_in_use)
+ 		return;
+ 
+ 	cancel_hv_tscdeadline(apic);
+ 
+ 	if (atomic_read(&apic->lapic_timer.pending))
+ 		return;
+ 
+ 	start_sw_tscdeadline(apic);
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_switch_to_sw_timer);
+ 
++>>>>>>> bd97ad0e7ed6 (KVM: x86: introduce cancel_hv_tscdeadline)
  static void start_apic_timer(struct kvm_lapic *apic)
  {
  	ktime_t now;
* Unmerged path arch/x86/kvm/lapic.c
