dax: add tracepoints to dax_writeback_mapping_range()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ross Zwisler <ross.zwisler@linux.intel.com>
commit d14a3f48a152b75a1e690d443f509c07c7b06c0e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d14a3f48.failed

Add tracepoints to dax_writeback_mapping_range(), following the same
logging conventions as the rest of DAX.

Here is an example writeback call:

  msync-1085  [006] ....
   200.902565: dax_writeback_range: dev 259:0 ino 0x1003 pgoff 0x200-0x2ff

  msync-1085  [006] ....
   200.902579: dax_writeback_range_done: dev 259:0 ino 0x1003 pgoff 0x200-0x2ff

[ross.zwisler@linux.intel.com: fix regression in dax_writeback_mapping_range()]
  Link: http://lkml.kernel.org/r/20170314215358.31451-1-ross.zwisler@linux.intel.com
Link: http://lkml.kernel.org/r/20170221195116.13278-5-ross.zwisler@linux.intel.com
	Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Reviewed-by: Jan Kara <jack@suse.cz>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Matthew Wilcox <mawilcox@microsoft.com>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d14a3f48a152b75a1e690d443f509c07c7b06c0e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dax.c
#	include/trace/events/fs_dax.h
diff --cc fs/dax.c
index 1dfecdfb6245,7cf2686761e2..000000000000
--- a/fs/dax.c
+++ b/fs/dax.c
@@@ -762,18 -856,15 +762,20 @@@ int dax_writeback_mapping_range(struct 
  	if (!mapping->nrexceptional || wbc->sync_mode != WB_SYNC_ALL)
  		return 0;
  
 -	dax_dev = dax_get_by_host(bdev->bd_disk->disk_name);
 -	if (!dax_dev)
 -		return -EIO;
 +	start_index = wbc->range_start >> PAGE_CACHE_SHIFT;
 +	end_index = wbc->range_end >> PAGE_CACHE_SHIFT;
 +	pmd_index = DAX_PMD_INDEX(start_index);
 +
 +	rcu_read_lock();
 +	entry = radix_tree_lookup(&mapping->page_tree, pmd_index);
 +	rcu_read_unlock();
  
 -	start_index = wbc->range_start >> PAGE_SHIFT;
 -	end_index = wbc->range_end >> PAGE_SHIFT;
 +	/* see if the start of our range is covered by a PMD entry */
 +	if (entry && RADIX_DAX_TYPE(entry) == RADIX_DAX_PMD)
 +		start_index = pmd_index;
  
+ 	trace_dax_writeback_range(inode, start_index, end_index);
+ 
  	tag_pages_for_writeback(mapping, start_index, end_index);
  
  	pagevec_init(&pvec, 0);
@@@ -791,13 -882,16 +793,26 @@@
  				break;
  			}
  
++<<<<<<< HEAD
 +			ret = dax_writeback_one(bdev, mapping, indices[i],
 +					pvec.pages[i]);
 +			if (ret < 0)
 +				return ret;
 +		}
 +	}
 +	return 0;
++=======
+ 			ret = dax_writeback_one(bdev, dax_dev, mapping,
+ 					indices[i], pvec.pages[i]);
+ 			if (ret < 0)
+ 				goto out;
+ 		}
+ 	}
+ out:
+ 	put_dax(dax_dev);
+ 	trace_dax_writeback_range_done(inode, start_index, end_index);
+ 	return (ret < 0 ? ret : 0);
++>>>>>>> d14a3f48a152 (dax: add tracepoints to dax_writeback_mapping_range())
  }
  EXPORT_SYMBOL_GPL(dax_writeback_mapping_range);
  
* Unmerged path include/trace/events/fs_dax.h
* Unmerged path fs/dax.c
* Unmerged path include/trace/events/fs_dax.h
