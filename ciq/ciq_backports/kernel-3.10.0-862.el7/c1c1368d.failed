s390/zcrypt: Fix ap_max_domain_id for older machine types

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [s390] zcrypt: Fix ap_max_domain_id for older machine types (Hendrik Brueckner) [1380349]
Rebuild_FUZZ: 95.41%
commit-author Ingo Tuchscherer <ingo.tuchscherer@linux.vnet.ibm.com>
commit c1c1368de497648cf532e7f37a407361c70aa638
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c1c1368d.failed

According to the system architecture the current implementation
requires the presence of the N bit in GR2 in the TAPQ response
field to validate the max. number of domains (Nd).
Older machine types don't have this N bit, hence the max. domain
field was ignored.

Before the N bit was introduced the maximum number of domain was
a constant value of 15. So set this value in case of N bit absence.

	Signed-off-by: Ingo Tuchscherer <ingo.tuchscherer@linux.vnet.ibm.com>
	Signed-off-by: Harald Freudenberger <freude@linux.vnet.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit c1c1368de497648cf532e7f37a407361c70aa638)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/crypto/ap_bus.c
diff --cc drivers/s390/crypto/ap_bus.c
index 5386d81f8cd3,78c99ae42b1f..000000000000
--- a/drivers/s390/crypto/ap_bus.c
+++ b/drivers/s390/crypto/ap_bus.c
@@@ -536,17 -251,48 +536,47 @@@ static inline void ap_schedule_poll_tim
   * @qid: The AP queue number
   * @queue_depth: Pointer to queue depth value
   * @device_type: Pointer to device type value
 - * @facilities: Pointer to facility indicator
   */
 -static int ap_query_queue(ap_qid_t qid, int *queue_depth, int *device_type,
 -			  unsigned int *facilities)
 +static int ap_query_queue(ap_qid_t qid, int *queue_depth, int *device_type)
  {
  	struct ap_queue_status status;
 -	unsigned long info;
 -	int nd;
 -
 -	if (!ap_test_config_card_id(AP_QID_CARD(qid)))
 -		return -ENODEV;
 +	int t_depth, t_device_type;
  
 -	status = ap_test_queue(qid, &info);
 +	status = ap_test_queue(qid, &t_depth, &t_device_type);
  	switch (status.response_code) {
  	case AP_RESPONSE_NORMAL:
++<<<<<<< HEAD
 +		*queue_depth = t_depth + 1;
 +		*device_type = t_device_type;
++=======
+ 		*queue_depth = (int)(info & 0xff);
+ 		*device_type = (int)((info >> 24) & 0xff);
+ 		*facilities = (unsigned int)(info >> 32);
+ 		/* Update maximum domain id */
+ 		nd = (info >> 16) & 0xff;
+ 		/* if N bit is available, z13 and newer */
+ 		if ((info & (1UL << 57)) && nd > 0)
+ 			ap_max_domain_id = nd;
+ 		else /* older machine types */
+ 			ap_max_domain_id = 15;
+ 		switch (*device_type) {
+ 			/* For CEX2 and CEX3 the available functions
+ 			 * are not refrected by the facilities bits.
+ 			 * Instead it is coded into the type. So here
+ 			 * modify the function bits based on the type.
+ 			 */
+ 		case AP_DEVICE_TYPE_CEX2A:
+ 		case AP_DEVICE_TYPE_CEX3A:
+ 			*facilities |= 0x08000000;
+ 			break;
+ 		case AP_DEVICE_TYPE_CEX2C:
+ 		case AP_DEVICE_TYPE_CEX3C:
+ 			*facilities |= 0x10000000;
+ 			break;
+ 		default:
+ 			break;
+ 		}
++>>>>>>> c1c1368de497 (s390/zcrypt: Fix ap_max_domain_id for older machine types)
  		return 0;
  	case AP_RESPONSE_Q_NOT_AVAIL:
  	case AP_RESPONSE_DECONFIGURED:
* Unmerged path drivers/s390/crypto/ap_bus.c
