perf tools: Factor out PMU matching in parser

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Andi Kleen <ak@linux.intel.com>
commit 2073ad3326b7e4577af3d6789edd03df79519d21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2073ad33.failed

Factor out the PMU name matching in the event parser into a separate
function, to use the same code for other grammar rules later.

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
Link: http://lkml.kernel.org/r/20170320201711.14142-5-andi@firstfloor.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 2073ad3326b7e4577af3d6789edd03df79519d21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/parse-events.y
diff --cc tools/perf/util/parse-events.y
index 3bcbf7cd7a4a,36af02f95243..000000000000
--- a/tools/perf/util/parse-events.y
+++ b/tools/perf/util/parse-events.y
@@@ -226,37 -236,9 +226,36 @@@ PE_NAME opt_event_confi
  |
  PE_KERNEL_PMU_EVENT sep_dc
  {
- 	struct parse_events_evlist *data = _data;
- 	struct list_head *head;
- 	struct parse_events_term *term;
  	struct list_head *list;
- 	struct perf_pmu *pmu = NULL;
- 	int ok = 0;
  
++<<<<<<< HEAD
 +	/* Add it for all PMUs that support the alias */
 +	ALLOC_LIST(list);
 +	while ((pmu = perf_pmu__scan(pmu)) != NULL) {
 +		struct perf_pmu_alias *alias;
 +
 +		list_for_each_entry(alias, &pmu->aliases, list) {
 +			if (!strcasecmp(alias->name, $1)) {
 +				ALLOC_LIST(head);
 +				ABORT_ON(parse_events_term__num(&term, PARSE_EVENTS__TERM_TYPE_USER,
 +					$1, 1, &@1, NULL));
 +				list_add_tail(&term->list, head);
 +
 +				if (!parse_events_add_pmu(data, list,
 +						  pmu->name, head)) {
 +					pr_debug("%s -> %s/%s/\n", $1,
 +						 pmu->name, alias->str);
 +					ok++;
 +				}
 +
 +				parse_events_terms__delete(head);
 +			}
 +		}
 +	}
 +	if (!ok)
++=======
+ 	if (parse_events_multi_pmu_add(_data, $1, &list) < 0)
++>>>>>>> 2073ad3326b7 (perf tools: Factor out PMU matching in parser)
  		YYABORT;
  	$$ = list;
  }
diff --git a/tools/perf/util/parse-events.c b/tools/perf/util/parse-events.c
index 3c6f7bbf0303..1017177a744f 100644
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@ -1026,6 +1026,52 @@ int parse_events_add_pmu(struct parse_events_evlist *data,
 	return evsel ? 0 : -ENOMEM;
 }
 
+int parse_events_multi_pmu_add(struct parse_events_evlist *data,
+			       char *str, struct list_head **listp)
+{
+	struct list_head *head;
+	struct parse_events_term *term;
+	struct list_head *list;
+	struct perf_pmu *pmu = NULL;
+	int ok = 0;
+
+	*listp = NULL;
+	/* Add it for all PMUs that support the alias */
+	list = malloc(sizeof(struct list_head));
+	if (!list)
+		return -1;
+	INIT_LIST_HEAD(list);
+	while ((pmu = perf_pmu__scan(pmu)) != NULL) {
+		struct perf_pmu_alias *alias;
+
+		list_for_each_entry(alias, &pmu->aliases, list) {
+			if (!strcasecmp(alias->name, str)) {
+				head = malloc(sizeof(struct list_head));
+				if (!head)
+					return -1;
+				INIT_LIST_HEAD(head);
+				if (parse_events_term__num(&term, PARSE_EVENTS__TERM_TYPE_USER,
+							   str, 1, false, &str, NULL) < 0)
+					return -1;
+				list_add_tail(&term->list, head);
+
+				if (!parse_events_add_pmu(data, list,
+						  pmu->name, head)) {
+					pr_debug("%s -> %s/%s/\n", str,
+						 pmu->name, alias->str);
+					ok++;
+				}
+
+				parse_events_terms__delete(head);
+			}
+		}
+	}
+	if (!ok)
+		return -1;
+	*listp = list;
+	return 0;
+}
+
 int parse_events__modifier_group(struct list_head *list,
 				 char *event_mod)
 {
diff --git a/tools/perf/util/parse-events.h b/tools/perf/util/parse-events.h
index ec78024114e4..47e2e35465b4 100644
--- a/tools/perf/util/parse-events.h
+++ b/tools/perf/util/parse-events.h
@@ -142,6 +142,11 @@ int parse_events_add_breakpoint(struct list_head *list, int *idx,
 int parse_events_add_pmu(struct parse_events_evlist *data,
 			 struct list_head *list, char *name,
 			 struct list_head *head_config);
+
+int parse_events_multi_pmu_add(struct parse_events_evlist *data,
+			       char *str,
+			       struct list_head **listp);
+
 enum perf_pmu_event_symbol_type
 perf_pmu__parse_check(const char *name);
 void parse_events__set_leader(char *name, struct list_head *list);
* Unmerged path tools/perf/util/parse-events.y
