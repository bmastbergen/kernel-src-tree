intel_pstate: Do not skip samples partially

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 4fec7ad5f637159525265a45f66482cf8817b45f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/4fec7ad5.failed

If the current value of MPERF or the current value of TSC is the
same as the previous one, respectively, intel_pstate_sample() bails
out early and skips the sample.

However, intel_pstate_adjust_busy_pstate() is still called in that
case which is not correct, so modify intel_pstate_sample() to
return a bool value indicating whether or not the sample has been
taken and use it to decide whether or not to call
intel_pstate_adjust_busy_pstate().

While at it, remove redundant parentheses from the MPERF/TSC
check in intel_pstate_sample().

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
(cherry picked from commit 4fec7ad5f637159525265a45f66482cf8817b45f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 5e3c944b968b,cb5607495816..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -870,7 -884,7 +870,11 @@@ static inline void intel_pstate_calc_bu
  	sample->core_pct_busy = (int32_t)core_pct;
  }
  
++<<<<<<< HEAD
 +static inline void intel_pstate_sample(struct cpudata *cpu)
++=======
+ static inline bool intel_pstate_sample(struct cpudata *cpu, u64 time)
++>>>>>>> 4fec7ad5f637 (intel_pstate: Do not skip samples partially)
  {
  	u64 aperf, mperf;
  	unsigned long flags;
@@@ -880,11 -894,10 +884,11 @@@
  	rdmsrl(MSR_IA32_APERF, aperf);
  	rdmsrl(MSR_IA32_MPERF, mperf);
  	tsc = rdtsc();
- 	if ((cpu->prev_mperf == mperf) || (cpu->prev_tsc == tsc)) {
+ 	if (cpu->prev_mperf == mperf || cpu->prev_tsc == tsc) {
  		local_irq_restore(flags);
- 		return;
+ 		return false;
  	}
 +
  	local_irq_restore(flags);
  
  	cpu->last_sample_time = cpu->sample.time;
@@@ -899,22 -912,13 +903,23 @@@
  	cpu->prev_aperf = aperf;
  	cpu->prev_mperf = mperf;
  	cpu->prev_tsc = tsc;
+ 	return true;
  }
  
 -static inline int32_t get_avg_frequency(struct cpudata *cpu)
 +static inline void intel_hwp_set_sample_time(struct cpudata *cpu)
 +{
 +	int delay;
 +
 +	delay = msecs_to_jiffies(50);
 +	mod_timer_pinned(&cpu->timer, jiffies + delay);
 +}
 +
 +static inline void intel_pstate_set_sample_time(struct cpudata *cpu)
  {
 -	return div64_u64(cpu->pstate.max_pstate_physical * cpu->sample.aperf *
 -		cpu->pstate.scaling, cpu->sample.mperf);
 +	int delay;
 +
 +	delay = msecs_to_jiffies(pid_params.sample_rate_ms);
 +	mod_timer_pinned(&cpu->timer, jiffies + delay);
  }
  
  static inline int32_t get_target_pstate_use_cpu_load(struct cpudata *cpu)
@@@ -1015,26 -1016,21 +1020,35 @@@ static inline void intel_pstate_adjust_
  		sample->mperf,
  		sample->aperf,
  		sample->tsc,
 -		get_avg_frequency(cpu));
 +		sample->freq);
 +}
 +
 +static void intel_hwp_timer_func(unsigned long __data)
 +{
 +	struct cpudata *cpu = (struct cpudata *) __data;
 +
++<<<<<<< HEAD
 +	intel_pstate_sample(cpu);
 +	intel_hwp_set_sample_time(cpu);
  }
  
 -static void intel_pstate_update_util(struct update_util_data *data, u64 time,
 -				     unsigned long util, unsigned long max)
 +static void intel_pstate_timer_func(unsigned long __data)
  {
 -	struct cpudata *cpu = container_of(data, struct cpudata, update_util);
 -	u64 delta_ns = time - cpu->sample.time;
 +	struct cpudata *cpu = (struct cpudata *) __data;
 +
 +	intel_pstate_sample(cpu);
 +
 +	intel_pstate_adjust_busy_pstate(cpu);
  
 +	intel_pstate_set_sample_time(cpu);
++=======
+ 	if ((s64)delta_ns >= pid_params.sample_rate_ns) {
+ 		bool sample_taken = intel_pstate_sample(cpu, time);
+ 
+ 		if (sample_taken && !hwp_active)
+ 			intel_pstate_adjust_busy_pstate(cpu);
+ 	}
++>>>>>>> 4fec7ad5f637 (intel_pstate: Do not skip samples partially)
  }
  
  #define ICPU(model, policy) \
* Unmerged path drivers/cpufreq/intel_pstate.c
