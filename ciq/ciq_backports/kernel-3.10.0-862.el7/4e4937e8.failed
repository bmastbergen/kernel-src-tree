target: Return descriptor format sense data in case the LU spans 64bit sectors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] Return descriptor format sense data in case the LU spans 64bit sectors (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 94.59%
commit-author Sagi Grimberg <sagig@mellanox.com>
commit 4e4937e8aefde8d49340e803ebbedcdf4b43e5f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/4e4937e8.failed

In case a LU spans 64bit sectors, fixed size sense data information
field is only 32 bits which means the sector information will be truncated.

Thus, if the LU spans 64bit sectors, use descriptor format sense data to
correctly report sector information.

	Reported-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
	Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 4e4937e8aefde8d49340e803ebbedcdf4b43e5f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_spc.c
#	drivers/target/target_core_transport.c
diff --cc drivers/target/target_core_spc.c
index 12f1adf6c7ed,b949d335a6ba..000000000000
--- a/drivers/target/target_core_spc.c
+++ b/drivers/target/target_core_spc.c
@@@ -1180,32 -1163,11 +1186,40 @@@ static sense_reason_t spc_emulate_reque
  	if (!rbuf)
  		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
  
++<<<<<<< HEAD
 +	if (!core_scsi3_ua_clear_for_request_sense(cmd, &ua_asc, &ua_ascq)) {
 +		/*
 +		 * CURRENT ERROR, UNIT ATTENTION
 +		 */
 +		buf[0] = 0x70;
 +		buf[SPC_SENSE_KEY_OFFSET] = UNIT_ATTENTION;
 +
 +		/*
 +		 * The Additional Sense Code (ASC) from the UNIT ATTENTION
 +		 */
 +		buf[SPC_ASC_KEY_OFFSET] = ua_asc;
 +		buf[SPC_ASCQ_KEY_OFFSET] = ua_ascq;
 +		buf[7] = 0x0A;
 +	} else {
 +		/*
 +		 * CURRENT ERROR, NO SENSE
 +		 */
 +		buf[0] = 0x70;
 +		buf[SPC_SENSE_KEY_OFFSET] = NO_SENSE;
 +
 +		/*
 +		 * NO ADDITIONAL SENSE INFORMATION
 +		 */
 +		buf[SPC_ASC_KEY_OFFSET] = 0x00;
 +		buf[7] = 0x0A;
 +	}
++=======
+ 	if (!core_scsi3_ua_clear_for_request_sense(cmd, &ua_asc, &ua_ascq))
+ 		scsi_build_sense_buffer(desc_format, buf, UNIT_ATTENTION,
+ 					ua_asc, ua_ascq);
+ 	else
+ 		scsi_build_sense_buffer(desc_format, buf, NO_SENSE, 0x0, 0x0);
++>>>>>>> 4e4937e8aefd (target: Return descriptor format sense data in case the LU spans 64bit sectors)
  
  	memcpy(rbuf, buf, min_t(u32, sizeof(buf), cmd->data_length));
  	transport_kunmap_data_sg(cmd);
diff --cc drivers/target/target_core_transport.c
index b4d9a8521ccf,98155db28365..000000000000
--- a/drivers/target/target_core_transport.c
+++ b/drivers/target/target_core_transport.c
@@@ -2872,10 -2754,14 +2873,15 @@@ static void translate_sense_reason(stru
  		asc = si->asc;
  		ascq = si->ascq;
  	}
++<<<<<<< HEAD
 +	buffer[SPC_ASC_KEY_OFFSET] = asc;
 +	buffer[SPC_ASCQ_KEY_OFFSET] = ascq;
++=======
+ 
+ 	scsi_build_sense_buffer(desc_format, buffer, si->key, asc, ascq);
++>>>>>>> 4e4937e8aefd (target: Return descriptor format sense data in case the LU spans 64bit sectors)
  	if (si->add_sector_info)
 -		return scsi_set_sense_information(buffer,
 -						  cmd->scsi_sense_length,
 -						  cmd->bad_sector);
 -
 -	return 0;
 +		transport_err_sector_info(cmd->sense_buffer, cmd->bad_sector);
  }
  
  int
diff --git a/drivers/target/target_core_hba.c b/drivers/target/target_core_hba.c
index ff95f95dcd13..41b5f607c232 100644
--- a/drivers/target/target_core_hba.c
+++ b/drivers/target/target_core_hba.c
@@ -165,3 +165,8 @@ core_delete_hba(struct se_hba *hba)
 	kfree(hba);
 	return 0;
 }
+
+bool target_sense_desc_format(struct se_device *dev)
+{
+	return dev->transport->get_blocks(dev) > U32_MAX;
+}
* Unmerged path drivers/target/target_core_spc.c
* Unmerged path drivers/target/target_core_transport.c
diff --git a/include/target/target_core_backend.h b/include/target/target_core_backend.h
index b898a92cae3d..e737e65d2b53 100644
--- a/include/target/target_core_backend.h
+++ b/include/target/target_core_backend.h
@@ -142,4 +142,6 @@ int	se_dev_set_max_sectors(struct se_device *, u32);
 int	se_dev_set_optimal_sectors(struct se_device *, u32);
 int	se_dev_set_block_size(struct se_device *, u32);
 
+bool target_sense_desc_format(struct se_device *dev);
+
 #endif /* TARGET_CORE_BACKEND_H */
