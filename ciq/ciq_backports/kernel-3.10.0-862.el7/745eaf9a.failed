nfp: fix vlan receive MAC statistics typo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
commit 745eaf9afe37238e89244953e2e9727006b4432c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/745eaf9a.failed

Correct typo in vlan receive MAC stats. Previously the MAC statistics
reported in ethtool for vlan receive contained a typo resulting in ethtool
reporting rx_vlan_reveive_ok instead of rx_vlan_received_ok.

Fixes: a5950182c00e ("nfp: map mac_stats and vf_cfg BARs")
Fixes: 098ce840c9ef ("nfp: report MAC statistics in ethtool")
	Reported-by: Brendan Galloway <brendan.galloway@netronome.com>
	Signed-off-by: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 745eaf9afe37238e89244953e2e9727006b4432c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
#	drivers/net/ethernet/netronome/nfp/nfp_port.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
index 69f458e0de89,2801ecd09eab..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
@@@ -65,53 -64,119 +65,157 @@@ struct _nfp_net_et_stats 
  	int off;
  };
  
 -static const struct nfp_et_stat nfp_net_et_stats[] = {
 +#define NN_ET_NETDEV_STAT(m) NETDEV_ET_STATS,			\
 +		FIELD_SIZEOF(struct net_device_stats, m),	\
 +		offsetof(struct net_device_stats, m)
 +/* For stats in the control BAR (other than Q stats) */
 +#define NN_ET_DEV_STAT(m) NFP_NET_DEV_ET_STATS,			\
 +		sizeof(u64),					\
 +		(m)
 +static const struct _nfp_net_et_stats nfp_net_et_stats[] = {
 +	/* netdev stats */
 +	{"rx_packets", NN_ET_NETDEV_STAT(rx_packets)},
 +	{"tx_packets", NN_ET_NETDEV_STAT(tx_packets)},
 +	{"rx_bytes", NN_ET_NETDEV_STAT(rx_bytes)},
 +	{"tx_bytes", NN_ET_NETDEV_STAT(tx_bytes)},
 +	{"rx_errors", NN_ET_NETDEV_STAT(rx_errors)},
 +	{"tx_errors", NN_ET_NETDEV_STAT(tx_errors)},
 +	{"rx_dropped", NN_ET_NETDEV_STAT(rx_dropped)},
 +	{"tx_dropped", NN_ET_NETDEV_STAT(tx_dropped)},
 +	{"multicast", NN_ET_NETDEV_STAT(multicast)},
 +	{"collisions", NN_ET_NETDEV_STAT(collisions)},
 +	{"rx_over_errors", NN_ET_NETDEV_STAT(rx_over_errors)},
 +	{"rx_crc_errors", NN_ET_NETDEV_STAT(rx_crc_errors)},
 +	{"rx_frame_errors", NN_ET_NETDEV_STAT(rx_frame_errors)},
 +	{"rx_fifo_errors", NN_ET_NETDEV_STAT(rx_fifo_errors)},
 +	{"rx_missed_errors", NN_ET_NETDEV_STAT(rx_missed_errors)},
 +	{"tx_aborted_errors", NN_ET_NETDEV_STAT(tx_aborted_errors)},
 +	{"tx_carrier_errors", NN_ET_NETDEV_STAT(tx_carrier_errors)},
 +	{"tx_fifo_errors", NN_ET_NETDEV_STAT(tx_fifo_errors)},
  	/* Stats from the device */
 -	{ "dev_rx_discards",	NFP_NET_CFG_STATS_RX_DISCARDS },
 -	{ "dev_rx_errors",	NFP_NET_CFG_STATS_RX_ERRORS },
 -	{ "dev_rx_bytes",	NFP_NET_CFG_STATS_RX_OCTETS },
 -	{ "dev_rx_uc_bytes",	NFP_NET_CFG_STATS_RX_UC_OCTETS },
 -	{ "dev_rx_mc_bytes",	NFP_NET_CFG_STATS_RX_MC_OCTETS },
 -	{ "dev_rx_bc_bytes",	NFP_NET_CFG_STATS_RX_BC_OCTETS },
 -	{ "dev_rx_pkts",	NFP_NET_CFG_STATS_RX_FRAMES },
 -	{ "dev_rx_mc_pkts",	NFP_NET_CFG_STATS_RX_MC_FRAMES },
 -	{ "dev_rx_bc_pkts",	NFP_NET_CFG_STATS_RX_BC_FRAMES },
 -
 +	{"dev_rx_discards", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_DISCARDS)},
 +	{"dev_rx_errors", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_ERRORS)},
 +	{"dev_rx_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_OCTETS)},
 +	{"dev_rx_uc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_UC_OCTETS)},
 +	{"dev_rx_mc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_MC_OCTETS)},
 +	{"dev_rx_bc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_BC_OCTETS)},
 +	{"dev_rx_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_FRAMES)},
 +	{"dev_rx_mc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_MC_FRAMES)},
 +	{"dev_rx_bc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_RX_BC_FRAMES)},
 +
++<<<<<<< HEAD
 +	{"dev_tx_discards", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_DISCARDS)},
 +	{"dev_tx_errors", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_ERRORS)},
 +	{"dev_tx_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_OCTETS)},
 +	{"dev_tx_uc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_UC_OCTETS)},
 +	{"dev_tx_mc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_MC_OCTETS)},
 +	{"dev_tx_bc_bytes", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_BC_OCTETS)},
 +	{"dev_tx_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_FRAMES)},
 +	{"dev_tx_mc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_MC_FRAMES)},
 +	{"dev_tx_bc_pkts", NN_ET_DEV_STAT(NFP_NET_CFG_STATS_TX_BC_FRAMES)},
++=======
+ 	{ "dev_tx_discards",	NFP_NET_CFG_STATS_TX_DISCARDS },
+ 	{ "dev_tx_errors",	NFP_NET_CFG_STATS_TX_ERRORS },
+ 	{ "dev_tx_bytes",	NFP_NET_CFG_STATS_TX_OCTETS },
+ 	{ "dev_tx_uc_bytes",	NFP_NET_CFG_STATS_TX_UC_OCTETS },
+ 	{ "dev_tx_mc_bytes",	NFP_NET_CFG_STATS_TX_MC_OCTETS },
+ 	{ "dev_tx_bc_bytes",	NFP_NET_CFG_STATS_TX_BC_OCTETS },
+ 	{ "dev_tx_pkts",	NFP_NET_CFG_STATS_TX_FRAMES },
+ 	{ "dev_tx_mc_pkts",	NFP_NET_CFG_STATS_TX_MC_FRAMES },
+ 	{ "dev_tx_bc_pkts",	NFP_NET_CFG_STATS_TX_BC_FRAMES },
+ 
+ 	{ "bpf_pass_pkts",	NFP_NET_CFG_STATS_APP0_FRAMES },
+ 	{ "bpf_pass_bytes",	NFP_NET_CFG_STATS_APP0_BYTES },
+ 	/* see comments in outro functions in nfp_bpf_jit.c to find out
+ 	 * how different BPF modes use app-specific counters
+ 	 */
+ 	{ "bpf_app1_pkts",	NFP_NET_CFG_STATS_APP1_FRAMES },
+ 	{ "bpf_app1_bytes",	NFP_NET_CFG_STATS_APP1_BYTES },
+ 	{ "bpf_app2_pkts",	NFP_NET_CFG_STATS_APP2_FRAMES },
+ 	{ "bpf_app2_bytes",	NFP_NET_CFG_STATS_APP2_BYTES },
+ 	{ "bpf_app3_pkts",	NFP_NET_CFG_STATS_APP3_FRAMES },
+ 	{ "bpf_app3_bytes",	NFP_NET_CFG_STATS_APP3_BYTES },
+ };
+ 
+ static const struct nfp_et_stat nfp_mac_et_stats[] = {
+ 	{ "rx_octets",			NFP_MAC_STATS_RX_IN_OCTETS, },
+ 	{ "rx_frame_too_long_errors",
+ 			NFP_MAC_STATS_RX_FRAME_TOO_LONG_ERRORS, },
+ 	{ "rx_range_length_errors",	NFP_MAC_STATS_RX_RANGE_LENGTH_ERRORS, },
+ 	{ "rx_vlan_received_ok",	NFP_MAC_STATS_RX_VLAN_RECEIVED_OK, },
+ 	{ "rx_errors",			NFP_MAC_STATS_RX_IN_ERRORS, },
+ 	{ "rx_broadcast_pkts",		NFP_MAC_STATS_RX_IN_BROADCAST_PKTS, },
+ 	{ "rx_drop_events",		NFP_MAC_STATS_RX_DROP_EVENTS, },
+ 	{ "rx_alignment_errors",	NFP_MAC_STATS_RX_ALIGNMENT_ERRORS, },
+ 	{ "rx_pause_mac_ctrl_frames",
+ 			NFP_MAC_STATS_RX_PAUSE_MAC_CTRL_FRAMES, },
+ 	{ "rx_frames_received_ok",	NFP_MAC_STATS_RX_FRAMES_RECEIVED_OK, },
+ 	{ "rx_frame_check_sequence_errors",
+ 			NFP_MAC_STATS_RX_FRAME_CHECK_SEQUENCE_ERRORS, },
+ 	{ "rx_unicast_pkts",		NFP_MAC_STATS_RX_UNICAST_PKTS, },
+ 	{ "rx_multicast_pkts",		NFP_MAC_STATS_RX_MULTICAST_PKTS, },
+ 	{ "rx_pkts",			NFP_MAC_STATS_RX_PKTS, },
+ 	{ "rx_undersize_pkts",		NFP_MAC_STATS_RX_UNDERSIZE_PKTS, },
+ 	{ "rx_pkts_64_octets",		NFP_MAC_STATS_RX_PKTS_64_OCTETS, },
+ 	{ "rx_pkts_65_to_127_octets",
+ 			NFP_MAC_STATS_RX_PKTS_65_TO_127_OCTETS, },
+ 	{ "rx_pkts_128_to_255_octets",
+ 			NFP_MAC_STATS_RX_PKTS_128_TO_255_OCTETS, },
+ 	{ "rx_pkts_256_to_511_octets",
+ 			NFP_MAC_STATS_RX_PKTS_256_TO_511_OCTETS, },
+ 	{ "rx_pkts_512_to_1023_octets",
+ 			NFP_MAC_STATS_RX_PKTS_512_TO_1023_OCTETS, },
+ 	{ "rx_pkts_1024_to_1518_octets",
+ 			NFP_MAC_STATS_RX_PKTS_1024_TO_1518_OCTETS, },
+ 	{ "rx_pkts_1519_to_max_octets",
+ 			NFP_MAC_STATS_RX_PKTS_1519_TO_MAX_OCTETS, },
+ 	{ "rx_jabbers",			NFP_MAC_STATS_RX_JABBERS, },
+ 	{ "rx_fragments",		NFP_MAC_STATS_RX_FRAGMENTS, },
+ 	{ "rx_oversize_pkts",		NFP_MAC_STATS_RX_OVERSIZE_PKTS, },
+ 	{ "rx_pause_frames_class0",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS0, },
+ 	{ "rx_pause_frames_class1",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS1, },
+ 	{ "rx_pause_frames_class2",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS2, },
+ 	{ "rx_pause_frames_class3",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS3, },
+ 	{ "rx_pause_frames_class4",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS4, },
+ 	{ "rx_pause_frames_class5",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS5, },
+ 	{ "rx_pause_frames_class6",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS6, },
+ 	{ "rx_pause_frames_class7",	NFP_MAC_STATS_RX_PAUSE_FRAMES_CLASS7, },
+ 	{ "rx_mac_ctrl_frames_received",
+ 			NFP_MAC_STATS_RX_MAC_CTRL_FRAMES_RECEIVED, },
+ 	{ "rx_mac_head_drop",		NFP_MAC_STATS_RX_MAC_HEAD_DROP, },
+ 	{ "tx_queue_drop",		NFP_MAC_STATS_TX_QUEUE_DROP, },
+ 	{ "tx_octets",			NFP_MAC_STATS_TX_OUT_OCTETS, },
+ 	{ "tx_vlan_transmitted_ok",	NFP_MAC_STATS_TX_VLAN_TRANSMITTED_OK, },
+ 	{ "tx_errors",			NFP_MAC_STATS_TX_OUT_ERRORS, },
+ 	{ "tx_broadcast_pkts",		NFP_MAC_STATS_TX_BROADCAST_PKTS, },
+ 	{ "tx_pause_mac_ctrl_frames",
+ 			NFP_MAC_STATS_TX_PAUSE_MAC_CTRL_FRAMES, },
+ 	{ "tx_frames_transmitted_ok",
+ 			NFP_MAC_STATS_TX_FRAMES_TRANSMITTED_OK, },
+ 	{ "tx_unicast_pkts",		NFP_MAC_STATS_TX_UNICAST_PKTS, },
+ 	{ "tx_multicast_pkts",		NFP_MAC_STATS_TX_MULTICAST_PKTS, },
+ 	{ "tx_pkts_64_octets",		NFP_MAC_STATS_TX_PKTS_64_OCTETS, },
+ 	{ "tx_pkts_65_to_127_octets",
+ 			NFP_MAC_STATS_TX_PKTS_65_TO_127_OCTETS, },
+ 	{ "tx_pkts_128_to_255_octets",
+ 			NFP_MAC_STATS_TX_PKTS_128_TO_255_OCTETS, },
+ 	{ "tx_pkts_256_to_511_octets",
+ 			NFP_MAC_STATS_TX_PKTS_256_TO_511_OCTETS, },
+ 	{ "tx_pkts_512_to_1023_octets",
+ 			NFP_MAC_STATS_TX_PKTS_512_TO_1023_OCTETS, },
+ 	{ "tx_pkts_1024_to_1518_octets",
+ 			NFP_MAC_STATS_TX_PKTS_1024_TO_1518_OCTETS, },
+ 	{ "tx_pkts_1519_to_max_octets",
+ 			NFP_MAC_STATS_TX_PKTS_1519_TO_MAX_OCTETS, },
+ 	{ "tx_pause_frames_class0",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS0, },
+ 	{ "tx_pause_frames_class1",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS1, },
+ 	{ "tx_pause_frames_class2",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS2, },
+ 	{ "tx_pause_frames_class3",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS3, },
+ 	{ "tx_pause_frames_class4",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS4, },
+ 	{ "tx_pause_frames_class5",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS5, },
+ 	{ "tx_pause_frames_class6",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS6, },
+ 	{ "tx_pause_frames_class7",	NFP_MAC_STATS_TX_PAUSE_FRAMES_CLASS7, },
++>>>>>>> 745eaf9afe37 (nfp: fix vlan receive MAC statistics typo)
  };
  
  #define NN_ET_GLOBAL_STATS_LEN ARRAY_SIZE(nfp_net_et_stats)
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_port.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_port.h
