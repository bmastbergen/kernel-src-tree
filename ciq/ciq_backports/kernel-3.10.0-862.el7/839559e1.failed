target: add a new add_wwn_groups fabrics method

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] add a new add_wwn_groups fabrics method (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 90.70%
commit-author Christoph Hellwig <hch@lst.de>
commit 839559e10601ed4459c802cbfb69747bf1844078
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/839559e1.failed

We need to have the WWN fully initialized before addig default groups to it,
so add a new method to add these groups after the WWN has been initialized.
Also remove the default groups in the core while we're at it.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 839559e10601ed4459c802cbfb69747bf1844078)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target_configfs.c
#	drivers/target/target_core_fabric_configfs.c
diff --cc drivers/target/iscsi/iscsi_target_configfs.c
index 7bdf7a03b311,97e5b69e0668..000000000000
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@@ -1617,59 -1238,48 +1617,80 @@@ static struct se_wwn *lio_target_call_c
  	tiqn = iscsit_add_tiqn((unsigned char *)name);
  	if (IS_ERR(tiqn))
  		return ERR_CAST(tiqn);
 +	/*
 +	 * Setup struct iscsi_wwn_stat_grps for se_wwn->fabric_stat_group.
 +	 */
 +	stats_cg = &tiqn->tiqn_wwn.fabric_stat_group;
 +
++<<<<<<< HEAD
 +	stats_cg->default_groups = kmalloc(sizeof(struct config_group *) * 6,
 +				GFP_KERNEL);
 +	if (!stats_cg->default_groups) {
 +		pr_err("Unable to allocate memory for"
 +				" stats_cg->default_groups\n");
 +		iscsit_del_tiqn(tiqn);
 +		return ERR_PTR(-ENOMEM);
 +	}
  
 +	stats_cg->default_groups[0] = &tiqn->tiqn_stat_grps.iscsi_instance_group;
 +	stats_cg->default_groups[1] = &tiqn->tiqn_stat_grps.iscsi_sess_err_group;
 +	stats_cg->default_groups[2] = &tiqn->tiqn_stat_grps.iscsi_tgt_attr_group;
 +	stats_cg->default_groups[3] = &tiqn->tiqn_stat_grps.iscsi_login_stats_group;
 +	stats_cg->default_groups[4] = &tiqn->tiqn_stat_grps.iscsi_logout_stats_group;
 +	stats_cg->default_groups[5] = NULL;
++=======
+ 	pr_debug("LIO_Target_ConfigFS: REGISTER -> %s\n", tiqn->tiqn);
+ 	pr_debug("LIO_Target_ConfigFS: REGISTER -> Allocated Node:"
+ 			" %s\n", name);
+ 	return &tiqn->tiqn_wwn;
+ }
+ 
+ static void lio_target_add_wwn_groups(struct se_wwn *wwn)
+ {
+ 	struct iscsi_tiqn *tiqn = container_of(wwn, struct iscsi_tiqn, tiqn_wwn);
+ 
++>>>>>>> 839559e10601 (target: add a new add_wwn_groups fabrics method)
  	config_group_init_type_name(&tiqn->tiqn_stat_grps.iscsi_instance_group,
  			"iscsi_instance", &iscsi_stat_instance_cit);
 -	configfs_add_default_group(&tiqn->tiqn_stat_grps.iscsi_instance_group,
 -			&tiqn->tiqn_wwn.fabric_stat_group);
 -
  	config_group_init_type_name(&tiqn->tiqn_stat_grps.iscsi_sess_err_group,
  			"iscsi_sess_err", &iscsi_stat_sess_err_cit);
 -	configfs_add_default_group(&tiqn->tiqn_stat_grps.iscsi_sess_err_group,
 -			&tiqn->tiqn_wwn.fabric_stat_group);
 -
  	config_group_init_type_name(&tiqn->tiqn_stat_grps.iscsi_tgt_attr_group,
  			"iscsi_tgt_attr", &iscsi_stat_tgt_attr_cit);
 -	configfs_add_default_group(&tiqn->tiqn_stat_grps.iscsi_tgt_attr_group,
 -			&tiqn->tiqn_wwn.fabric_stat_group);
 -
  	config_group_init_type_name(&tiqn->tiqn_stat_grps.iscsi_login_stats_group,
  			"iscsi_login_stats", &iscsi_stat_login_cit);
 -	configfs_add_default_group(&tiqn->tiqn_stat_grps.iscsi_login_stats_group,
 -			&tiqn->tiqn_wwn.fabric_stat_group);
 -
  	config_group_init_type_name(&tiqn->tiqn_stat_grps.iscsi_logout_stats_group,
  			"iscsi_logout_stats", &iscsi_stat_logout_cit);
++<<<<<<< HEAD
 +
 +	pr_debug("LIO_Target_ConfigFS: REGISTER -> %s\n", tiqn->tiqn);
 +	pr_debug("LIO_Target_ConfigFS: REGISTER -> Allocated Node:"
 +			" %s\n", name);
 +	return &tiqn->tiqn_wwn;
++=======
+ 	configfs_add_default_group(&tiqn->tiqn_stat_grps.iscsi_logout_stats_group,
+ 			&tiqn->tiqn_wwn.fabric_stat_group);
++>>>>>>> 839559e10601 (target: add a new add_wwn_groups fabrics method)
  }
  
  static void lio_target_call_coredeltiqn(
  	struct se_wwn *wwn)
  {
  	struct iscsi_tiqn *tiqn = container_of(wwn, struct iscsi_tiqn, tiqn_wwn);
 +	struct config_item *df_item;
 +	struct config_group *stats_cg;
 +	int i;
 +
++<<<<<<< HEAD
 +	stats_cg = &tiqn->tiqn_wwn.fabric_stat_group;
 +	for (i = 0; stats_cg->default_groups[i]; i++) {
 +		df_item = &stats_cg->default_groups[i]->cg_item;
 +		stats_cg->default_groups[i] = NULL;
 +		config_item_put(df_item);
 +	}
 +	kfree(stats_cg->default_groups);
  
++=======
++>>>>>>> 839559e10601 (target: add a new add_wwn_groups fabrics method)
  	pr_debug("LIO_Target_ConfigFS: DEREGISTER -> %s\n",
  			tiqn->tiqn);
  	iscsit_del_tiqn(tiqn);
@@@ -2067,115 -1622,54 +2088,156 @@@ static void lio_release_cmd(struct se_c
  	iscsit_release_cmd(cmd);
  }
  
++<<<<<<< HEAD
 +/* End functions for target_core_fabric_ops */
++=======
+ const struct target_core_fabric_ops iscsi_ops = {
+ 	.module				= THIS_MODULE,
+ 	.name				= "iscsi",
+ 	.node_acl_size			= sizeof(struct iscsi_node_acl),
+ 	.get_fabric_name		= iscsi_get_fabric_name,
+ 	.tpg_get_wwn			= lio_tpg_get_endpoint_wwn,
+ 	.tpg_get_tag			= lio_tpg_get_tag,
+ 	.tpg_get_default_depth		= lio_tpg_get_default_depth,
+ 	.tpg_check_demo_mode		= lio_tpg_check_demo_mode,
+ 	.tpg_check_demo_mode_cache	= lio_tpg_check_demo_mode_cache,
+ 	.tpg_check_demo_mode_write_protect =
+ 			lio_tpg_check_demo_mode_write_protect,
+ 	.tpg_check_prod_mode_write_protect =
+ 			lio_tpg_check_prod_mode_write_protect,
+ 	.tpg_check_prot_fabric_only	= &lio_tpg_check_prot_fabric_only,
+ 	.tpg_get_inst_index		= lio_tpg_get_inst_index,
+ 	.check_stop_free		= lio_check_stop_free,
+ 	.release_cmd			= lio_release_cmd,
+ 	.shutdown_session		= lio_tpg_shutdown_session,
+ 	.close_session			= lio_tpg_close_session,
+ 	.sess_get_index			= lio_sess_get_index,
+ 	.sess_get_initiator_sid		= lio_sess_get_initiator_sid,
+ 	.write_pending			= lio_write_pending,
+ 	.write_pending_status		= lio_write_pending_status,
+ 	.set_default_node_attributes	= lio_set_default_node_attributes,
+ 	.get_cmd_state			= iscsi_get_cmd_state,
+ 	.queue_data_in			= lio_queue_data_in,
+ 	.queue_status			= lio_queue_status,
+ 	.queue_tm_rsp			= lio_queue_tm_rsp,
+ 	.aborted_task			= lio_aborted_task,
+ 	.fabric_make_wwn		= lio_target_call_coreaddtiqn,
+ 	.fabric_drop_wwn		= lio_target_call_coredeltiqn,
+ 	.add_wwn_groups			= lio_target_add_wwn_groups,
+ 	.fabric_make_tpg		= lio_target_tiqn_addtpg,
+ 	.fabric_drop_tpg		= lio_target_tiqn_deltpg,
+ 	.fabric_make_np			= lio_target_call_addnptotpg,
+ 	.fabric_drop_np			= lio_target_call_delnpfromtpg,
+ 	.fabric_init_nodeacl		= lio_target_init_nodeacl,
++>>>>>>> 839559e10601 (target: add a new add_wwn_groups fabrics method)
  
 -	.tfc_discovery_attrs		= lio_target_discovery_auth_attrs,
 -	.tfc_wwn_attrs			= lio_target_wwn_attrs,
 -	.tfc_tpg_base_attrs		= lio_target_tpg_attrs,
 -	.tfc_tpg_attrib_attrs		= lio_target_tpg_attrib_attrs,
 -	.tfc_tpg_auth_attrs		= lio_target_tpg_auth_attrs,
 -	.tfc_tpg_param_attrs		= lio_target_tpg_param_attrs,
 -	.tfc_tpg_np_base_attrs		= lio_target_portal_attrs,
 -	.tfc_tpg_nacl_base_attrs	= lio_target_initiator_attrs,
 -	.tfc_tpg_nacl_attrib_attrs	= lio_target_nacl_attrib_attrs,
 -	.tfc_tpg_nacl_auth_attrs	= lio_target_nacl_auth_attrs,
 -	.tfc_tpg_nacl_param_attrs	= lio_target_nacl_param_attrs,
 -};
 +int iscsi_target_register_configfs(void)
 +{
 +	struct target_fabric_configfs *fabric;
 +	int ret;
 +
 +	lio_target_fabric_configfs = NULL;
 +	fabric = target_fabric_configfs_init(THIS_MODULE, "iscsi");
 +	if (IS_ERR(fabric)) {
 +		pr_err("target_fabric_configfs_init() for"
 +				" LIO-Target failed!\n");
 +		return PTR_ERR(fabric);
 +	}
 +	/*
 +	 * Setup the fabric API of function pointers used by target_core_mod..
 +	 */
 +	fabric->tf_ops.get_fabric_name = &iscsi_get_fabric_name;
 +	fabric->tf_ops.get_fabric_proto_ident = &iscsi_get_fabric_proto_ident;
 +	fabric->tf_ops.tpg_get_wwn = &lio_tpg_get_endpoint_wwn;
 +	fabric->tf_ops.tpg_get_tag = &lio_tpg_get_tag;
 +	fabric->tf_ops.tpg_get_default_depth = &lio_tpg_get_default_depth;
 +	fabric->tf_ops.tpg_get_pr_transport_id = &iscsi_get_pr_transport_id;
 +	fabric->tf_ops.tpg_get_pr_transport_id_len =
 +				&iscsi_get_pr_transport_id_len;
 +	fabric->tf_ops.tpg_parse_pr_out_transport_id =
 +				&iscsi_parse_pr_out_transport_id;
 +	fabric->tf_ops.tpg_check_demo_mode = &lio_tpg_check_demo_mode;
 +	fabric->tf_ops.tpg_check_demo_mode_cache =
 +				&lio_tpg_check_demo_mode_cache;
 +	fabric->tf_ops.tpg_check_demo_mode_write_protect =
 +				&lio_tpg_check_demo_mode_write_protect;
 +	fabric->tf_ops.tpg_check_prod_mode_write_protect =
 +				&lio_tpg_check_prod_mode_write_protect;
 +	fabric->tf_ops.tpg_alloc_fabric_acl = &lio_tpg_alloc_fabric_acl;
 +	fabric->tf_ops.tpg_release_fabric_acl = &lio_tpg_release_fabric_acl;
 +	fabric->tf_ops.tpg_get_inst_index = &lio_tpg_get_inst_index;
 +	fabric->tf_ops.check_stop_free = &lio_check_stop_free,
 +	fabric->tf_ops.release_cmd = &lio_release_cmd;
 +	fabric->tf_ops.shutdown_session = &lio_tpg_shutdown_session;
 +	fabric->tf_ops.close_session = &lio_tpg_close_session;
 +	fabric->tf_ops.sess_get_index = &lio_sess_get_index;
 +	fabric->tf_ops.sess_get_initiator_sid = &lio_sess_get_initiator_sid;
 +	fabric->tf_ops.write_pending = &lio_write_pending;
 +	fabric->tf_ops.write_pending_status = &lio_write_pending_status;
 +	fabric->tf_ops.set_default_node_attributes =
 +				&lio_set_default_node_attributes;
 +	fabric->tf_ops.get_task_tag = &iscsi_get_task_tag;
 +	fabric->tf_ops.get_cmd_state = &iscsi_get_cmd_state;
 +	fabric->tf_ops.queue_data_in = &lio_queue_data_in;
 +	fabric->tf_ops.queue_status = &lio_queue_status;
 +	fabric->tf_ops.queue_tm_rsp = &lio_queue_tm_rsp;
 +	fabric->tf_ops.aborted_task = &lio_aborted_task;
 +	/*
 +	 * Setup function pointers for generic logic in target_core_fabric_configfs.c
 +	 */
 +	fabric->tf_ops.fabric_make_wwn = &lio_target_call_coreaddtiqn;
 +	fabric->tf_ops.fabric_drop_wwn = &lio_target_call_coredeltiqn;
 +	fabric->tf_ops.fabric_make_tpg = &lio_target_tiqn_addtpg;
 +	fabric->tf_ops.fabric_drop_tpg = &lio_target_tiqn_deltpg;
 +	fabric->tf_ops.fabric_post_link	= NULL;
 +	fabric->tf_ops.fabric_pre_unlink = NULL;
 +	fabric->tf_ops.fabric_make_np = &lio_target_call_addnptotpg;
 +	fabric->tf_ops.fabric_drop_np = &lio_target_call_delnpfromtpg;
 +	fabric->tf_ops.fabric_make_nodeacl = &lio_target_make_nodeacl;
 +	fabric->tf_ops.fabric_drop_nodeacl = &lio_target_drop_nodeacl;
 +	/*
 +	 * Setup default attribute lists for various fabric->tf_cit_tmpl
 +	 * sturct config_item_type's
 +	 */
 +	fabric->tf_cit_tmpl.tfc_discovery_cit.ct_attrs = lio_target_discovery_auth_attrs;
 +	fabric->tf_cit_tmpl.tfc_wwn_cit.ct_attrs = lio_target_wwn_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_base_cit.ct_attrs = lio_target_tpg_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_attrib_cit.ct_attrs = lio_target_tpg_attrib_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_auth_cit.ct_attrs = lio_target_tpg_auth_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_param_cit.ct_attrs = lio_target_tpg_param_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_np_base_cit.ct_attrs = lio_target_portal_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_base_cit.ct_attrs = lio_target_initiator_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_attrib_cit.ct_attrs = lio_target_nacl_attrib_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_auth_cit.ct_attrs = lio_target_nacl_auth_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_param_cit.ct_attrs = lio_target_nacl_param_attrs;
 +
 +	ret = target_fabric_configfs_register(fabric);
 +	if (ret < 0) {
 +		pr_err("target_fabric_configfs_register() for"
 +				" LIO-Target failed!\n");
 +		target_fabric_configfs_free(fabric);
 +		return ret;
 +	}
 +
 +	lio_target_fabric_configfs = fabric;
 +	pr_debug("LIO_TARGET[0] - Set fabric ->"
 +			" lio_target_fabric_configfs\n");
 +	return 0;
 +}
 +
 +
 +void iscsi_target_deregister_configfs(void)
 +{
 +	if (!lio_target_fabric_configfs)
 +		return;
 +	/*
 +	 * Shutdown discovery sessions and disable discovery TPG
 +	 */
 +	if (iscsit_global->discovery_tpg)
 +		iscsit_tpg_disable_portal_group(iscsit_global->discovery_tpg, 1);
 +
 +	target_fabric_configfs_deregister(lio_target_fabric_configfs);
 +	lio_target_fabric_configfs = NULL;
 +	pr_debug("LIO_TARGET[0] - Cleared"
 +				" lio_target_fabric_configfs\n");
 +}
diff --cc drivers/target/target_core_fabric_configfs.c
index 0c3f90130b7d,31a096aa16ab..000000000000
--- a/drivers/target/target_core_fabric_configfs.c
+++ b/drivers/target/target_core_fabric_configfs.c
@@@ -1098,7 -891,8 +1098,12 @@@ static void target_fabric_release_wwn(s
  				struct se_wwn, wwn_group);
  	struct target_fabric_configfs *tf = wwn->wwn_tf;
  
++<<<<<<< HEAD
 +	tf->tf_ops.fabric_drop_wwn(wwn);
++=======
+ 	configfs_remove_default_groups(&wwn->fabric_stat_group);
+ 	tf->tf_ops->fabric_drop_wwn(wwn);
++>>>>>>> 839559e10601 (target: add a new add_wwn_groups fabrics method)
  }
  
  static struct configfs_item_operations target_fabric_tpg_item_ops = {
@@@ -1144,18 -938,15 +1149,20 @@@ static struct config_group *target_fabr
  		return ERR_PTR(-EINVAL);
  
  	wwn->wwn_tf = tf;
 +	/*
 +	 * Setup default groups from pre-allocated wwn->wwn_default_groups
 +	 */
 +	wwn->wwn_group.default_groups = wwn->wwn_default_groups;
 +	wwn->wwn_group.default_groups[0] = &wwn->fabric_stat_group;
 +	wwn->wwn_group.default_groups[1] = NULL;
  
 -	config_group_init_type_name(&wwn->wwn_group, name, &tf->tf_tpg_cit);
 -
 +	config_group_init_type_name(&wwn->wwn_group, name,
 +			&tf->tf_cit_tmpl.tfc_tpg_cit);
  	config_group_init_type_name(&wwn->fabric_stat_group, "fabric_statistics",
 -			&tf->tf_wwn_fabric_stats_cit);
 -	configfs_add_default_group(&wwn->fabric_stat_group, &wwn->wwn_group);
 +			&tf->tf_cit_tmpl.tfc_wwn_fabric_stats_cit);
  
+ 	if (tf->tf_ops->add_wwn_groups)
+ 		tf->tf_ops->add_wwn_groups(wwn);
  	return &wwn->wwn_group;
  }
  
* Unmerged path drivers/target/iscsi/iscsi_target_configfs.c
* Unmerged path drivers/target/target_core_fabric_configfs.c
diff --git a/include/target/target_core_fabric.h b/include/target/target_core_fabric.h
index 990942f22016..791b3b887403 100644
--- a/include/target/target_core_fabric.h
+++ b/include/target/target_core_fabric.h
@@ -77,6 +77,7 @@ struct target_core_fabric_ops {
 	struct se_wwn *(*fabric_make_wwn)(struct target_fabric_configfs *,
 				struct config_group *, const char *);
 	void (*fabric_drop_wwn)(struct se_wwn *);
+	void (*add_wwn_groups)(struct se_wwn *);
 	struct se_portal_group *(*fabric_make_tpg)(struct se_wwn *,
 				struct config_group *, const char *);
 	void (*fabric_drop_tpg)(struct se_portal_group *);
