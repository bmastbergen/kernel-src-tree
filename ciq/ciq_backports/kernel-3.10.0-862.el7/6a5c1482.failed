s390/mm: remove change bit override support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [s390] mm: remove change bit override support (Hendrik Brueckner) [1489742]
Rebuild_FUZZ: 93.83%
commit-author Heiko Carstens <heiko.carstens@de.ibm.com>
commit 6a5c1482e2b700e89f174ddb42434b37f15abccd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6a5c1482.failed

	Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 6a5c1482e2b700e89f174ddb42434b37f15abccd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/pgtable.h
#	arch/s390/mm/hugetlbpage.c
diff --cc arch/s390/include/asm/pgtable.h
index cff6ed1e6f32,7c4af56f2b73..000000000000
--- a/arch/s390/include/asm/pgtable.h
+++ b/arch/s390/include/asm/pgtable.h
@@@ -345,19 -350,12 +344,18 @@@ extern unsigned long MODULES_END
  #define _REGION3_ENTRY		(_REGION_ENTRY_TYPE_R3 | _REGION_ENTRY_LENGTH)
  #define _REGION3_ENTRY_EMPTY	(_REGION_ENTRY_TYPE_R3 | _REGION_ENTRY_INVALID)
  
 +#define _REGION3_ENTRY_ORIGIN_LARGE ~0x7fffffffUL /* large page address>     */
 +#define _REGION3_ENTRY_ORIGIN  ~0x7ffUL/* region third table origin>	     */
 +
  #define _REGION3_ENTRY_LARGE	0x400	/* RTTE-format control, large page  */
  #define _REGION3_ENTRY_RO	0x200	/* page protection bit		    */
- #define _REGION3_ENTRY_CO	0x100	/* change-recording override	    */
  
 +#define _REGION_ENTRY_BITS	0xfffffffffffff227UL
 +#define _REGION_ENTRY_BITS_LARGE 0xffffffff8000fe27UL
 +
  /* Bits in the segment table entry */
  #define _SEGMENT_ENTRY_BITS	0xfffffffffffffe33UL
 -#define _SEGMENT_ENTRY_BITS_LARGE 0xfffffffffff0ff33UL
 +#define _SEGMENT_ENTRY_BITS_LARGE 0xfffffffffff1ff33UL
  #define _SEGMENT_ENTRY_ORIGIN_LARGE ~0xfffffUL /* large page address	    */
  #define _SEGMENT_ENTRY_ORIGIN	~0x7ffUL/* segment table origin		    */
  #define _SEGMENT_ENTRY_PROTECT	0x200	/* page protection bit		    */
@@@ -366,11 -364,12 +364,20 @@@
  #define _SEGMENT_ENTRY		(0)
  #define _SEGMENT_ENTRY_EMPTY	(_SEGMENT_ENTRY_INVALID)
  
++<<<<<<< HEAD
 +#define _SEGMENT_ENTRY_LARGE	0x400	/* STE-format control, large page   */
 +#define _SEGMENT_ENTRY_CO	0x100	/* change-recording override   */
 +#define _SEGMENT_ENTRY_SPLIT	0x001	/* THP splitting bit */
 +#define _SEGMENT_ENTRY_YOUNG	0x002	/* SW segment young bit */
 +#define _SEGMENT_ENTRY_NONE	_SEGMENT_ENTRY_YOUNG
++=======
+ #define _SEGMENT_ENTRY_DIRTY	0x2000	/* SW segment dirty bit */
+ #define _SEGMENT_ENTRY_YOUNG	0x1000	/* SW segment young bit */
+ #define _SEGMENT_ENTRY_SPLIT	0x0800	/* THP splitting bit */
+ #define _SEGMENT_ENTRY_LARGE	0x0400	/* STE-format control, large page */
+ #define _SEGMENT_ENTRY_READ	0x0002	/* SW segment read bit */
+ #define _SEGMENT_ENTRY_WRITE	0x0001	/* SW segment write bit */
++>>>>>>> 6a5c1482e2b7 (s390/mm: remove change bit override support)
  
  /*
   * Segment table entry encoding (R = read-only, I = invalid, y = young bit):
@@@ -866,12 -879,11 +873,10 @@@ static inline void set_pte_at(struct mm
  
  	if (mm_has_pgste(mm)) {
  		pgste = pgste_get_lock(ptep);
 -		pgste_val(pgste) &= ~_PGSTE_GPS_ZERO;
 -		pgste_set_key(ptep, pgste, entry, mm);
 -		pgste = pgste_set_pte(ptep, pgste, entry);
 +		pgste_set_key(ptep, pgste, entry);
 +		pgste_set_pte(ptep, entry);
  		pgste_set_unlock(ptep, pgste);
  	} else {
- 		if (!(pte_val(entry) & _PAGE_INVALID) && MACHINE_HAS_EDAT1)
- 			pte_val(entry) |= _PAGE_CO;
  		*ptep = entry;
  	}
  }
diff --cc arch/s390/mm/hugetlbpage.c
index 7b7d88b8af33,3c80d2e38f03..000000000000
--- a/arch/s390/mm/hugetlbpage.c
+++ b/arch/s390/mm/hugetlbpage.c
@@@ -98,19 -80,16 +98,30 @@@ static inline pte_t __rste_to_pte(unsig
  void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,
  		     pte_t *ptep, pte_t pte)
  {
 -	pmd_t pmd;
 +	unsigned long rste = __pte_to_rste(pte);
  
++<<<<<<< HEAD
 +	/* Set correct table type for 2G hugepages */
 +	if ((pte_val(*ptep) & _REGION_ENTRY_TYPE_MASK) == _REGION_ENTRY_TYPE_R3)
 +		rste |= _REGION_ENTRY_TYPE_R3 | _REGION3_ENTRY_LARGE;
 +	else {
 +		if (!MACHINE_HAS_HPAGE) {
 +			rste &= ~_SEGMENT_ENTRY_ORIGIN;
 +			rste |= pte_page(pte)[1].index;
 +		} else
 +			rste |= _SEGMENT_ENTRY_LARGE | _SEGMENT_ENTRY_CO;
 +	}
 +	pte_val(*ptep) = rste;
++=======
+ 	pmd = __pte_to_pmd(pte);
+ 	if (!MACHINE_HAS_HPAGE) {
+ 		/* Emulated huge ptes loose the dirty and young bit */
+ 		pmd_val(pmd) &= ~_SEGMENT_ENTRY_ORIGIN;
+ 		pmd_val(pmd) |= pte_page(pte)[1].index;
+ 	} else
+ 		pmd_val(pmd) |= _SEGMENT_ENTRY_LARGE;
+ 	*(pmd_t *) ptep = pmd;
++>>>>>>> 6a5c1482e2b7 (s390/mm: remove change bit override support)
  }
  
  pte_t huge_ptep_get(pte_t *ptep)
* Unmerged path arch/s390/include/asm/pgtable.h
diff --git a/arch/s390/mm/dump_pagetables.c b/arch/s390/mm/dump_pagetables.c
index 46d517c3c763..d46cadeda204 100644
--- a/arch/s390/mm/dump_pagetables.c
+++ b/arch/s390/mm/dump_pagetables.c
@@ -54,7 +54,6 @@ static void print_prot(struct seq_file *m, unsigned int pr, int level)
 		return;
 	}
 	seq_printf(m, "%s", pr & _PAGE_PROTECT ? "RO " : "RW ");
-	seq_printf(m, "%s", pr & _PAGE_CO ? "CO " : "   ");
 	seq_putc(m, '\n');
 }
 
@@ -129,7 +128,7 @@ static void walk_pte_level(struct seq_file *m, struct pg_state *st,
 }
 
 #ifdef CONFIG_64BIT
-#define _PMD_PROT_MASK (_SEGMENT_ENTRY_PROTECT | _SEGMENT_ENTRY_CO)
+#define _PMD_PROT_MASK _SEGMENT_ENTRY_PROTECT
 #else
 #define _PMD_PROT_MASK 0
 #endif
@@ -157,7 +156,7 @@ static void walk_pmd_level(struct seq_file *m, struct pg_state *st,
 }
 
 #ifdef CONFIG_64BIT
-#define _PUD_PROT_MASK (_REGION3_ENTRY_RO | _REGION3_ENTRY_CO)
+#define _PUD_PROT_MASK _REGION3_ENTRY_RO
 #else
 #define _PUD_PROT_MASK 0
 #endif
* Unmerged path arch/s390/mm/hugetlbpage.c
diff --git a/arch/s390/mm/vmem.c b/arch/s390/mm/vmem.c
index bcfb70b60be6..a4f6f2feffc1 100644
--- a/arch/s390/mm/vmem.c
+++ b/arch/s390/mm/vmem.c
@@ -235,8 +235,7 @@ int __meminit vmemmap_populate(unsigned long start, unsigned long end, int node)
 				if (!new_page)
 					goto out;
 				pmd_val(*pm_dir) = __pa(new_page) |
-					_SEGMENT_ENTRY | _SEGMENT_ENTRY_LARGE |
-					_SEGMENT_ENTRY_CO;
+					_SEGMENT_ENTRY | _SEGMENT_ENTRY_LARGE;
 				address = (address + PMD_SIZE) & PMD_MASK;
 				continue;
 			}
