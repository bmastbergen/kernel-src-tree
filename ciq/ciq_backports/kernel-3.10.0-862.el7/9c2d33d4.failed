net/mlx5: fix spelling mistake: "alloated" -> "allocated"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5: fix spelling mistake: "alloated" -> "allocated" (Kamal Heib) [1456694]
Rebuild_FUZZ: 96.36%
commit-author Colin Ian King <colin.king@canonical.com>
commit 9c2d33d44dccfb0cdac987ddc3716527ebf971e0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9c2d33d4.failed

Trivial fix to spelling mistake in mlx5_ib_dbg message

	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 9c2d33d44dccfb0cdac987ddc3716527ebf971e0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index af6314d865ab,fe60c363d95b..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -1129,6 -1106,86 +1129,89 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static void print_lib_caps(struct mlx5_ib_dev *dev, u64 caps)
+ {
+ 	mlx5_ib_dbg(dev, "MLX5_LIB_CAP_4K_UAR = %s\n",
+ 		    caps & MLX5_LIB_CAP_4K_UAR ? "y" : "n");
+ }
+ 
+ static int calc_total_bfregs(struct mlx5_ib_dev *dev, bool lib_uar_4k,
+ 			     struct mlx5_ib_alloc_ucontext_req_v2 *req,
+ 			     u32 *num_sys_pages)
+ {
+ 	int uars_per_sys_page;
+ 	int bfregs_per_sys_page;
+ 	int ref_bfregs = req->total_num_bfregs;
+ 
+ 	if (req->total_num_bfregs == 0)
+ 		return -EINVAL;
+ 
+ 	BUILD_BUG_ON(MLX5_MAX_BFREGS % MLX5_NON_FP_BFREGS_IN_PAGE);
+ 	BUILD_BUG_ON(MLX5_MAX_BFREGS < MLX5_NON_FP_BFREGS_IN_PAGE);
+ 
+ 	if (req->total_num_bfregs > MLX5_MAX_BFREGS)
+ 		return -ENOMEM;
+ 
+ 	uars_per_sys_page = get_uars_per_sys_page(dev, lib_uar_4k);
+ 	bfregs_per_sys_page = uars_per_sys_page * MLX5_NON_FP_BFREGS_PER_UAR;
+ 	req->total_num_bfregs = ALIGN(req->total_num_bfregs, bfregs_per_sys_page);
+ 	*num_sys_pages = req->total_num_bfregs / bfregs_per_sys_page;
+ 
+ 	if (req->num_low_latency_bfregs > req->total_num_bfregs - 1)
+ 		return -EINVAL;
+ 
+ 	mlx5_ib_dbg(dev, "uar_4k: fw support %s, lib support %s, user requested %d bfregs, allocated %d, using %d sys pages\n",
+ 		    MLX5_CAP_GEN(dev->mdev, uar_4k) ? "yes" : "no",
+ 		    lib_uar_4k ? "yes" : "no", ref_bfregs,
+ 		    req->total_num_bfregs, *num_sys_pages);
+ 
+ 	return 0;
+ }
+ 
+ static int allocate_uars(struct mlx5_ib_dev *dev, struct mlx5_ib_ucontext *context)
+ {
+ 	struct mlx5_bfreg_info *bfregi;
+ 	int err;
+ 	int i;
+ 
+ 	bfregi = &context->bfregi;
+ 	for (i = 0; i < bfregi->num_sys_pages; i++) {
+ 		err = mlx5_cmd_alloc_uar(dev->mdev, &bfregi->sys_pages[i]);
+ 		if (err)
+ 			goto error;
+ 
+ 		mlx5_ib_dbg(dev, "allocated uar %d\n", bfregi->sys_pages[i]);
+ 	}
+ 	return 0;
+ 
+ error:
+ 	for (--i; i >= 0; i--)
+ 		if (mlx5_cmd_free_uar(dev->mdev, bfregi->sys_pages[i]))
+ 			mlx5_ib_warn(dev, "failed to free uar %d\n", i);
+ 
+ 	return err;
+ }
+ 
+ static int deallocate_uars(struct mlx5_ib_dev *dev, struct mlx5_ib_ucontext *context)
+ {
+ 	struct mlx5_bfreg_info *bfregi;
+ 	int err;
+ 	int i;
+ 
+ 	bfregi = &context->bfregi;
+ 	for (i = 0; i < bfregi->num_sys_pages; i++) {
+ 		err = mlx5_cmd_free_uar(dev->mdev, bfregi->sys_pages[i]);
+ 		if (err) {
+ 			mlx5_ib_warn(dev, "failed to free uar %d\n", i);
+ 			return err;
+ 		}
+ 	}
+ 	return 0;
+ }
+ 
++>>>>>>> 9c2d33d44dcc (net/mlx5: fix spelling mistake: "alloated" -> "allocated")
  static struct ib_ucontext *mlx5_ib_alloc_ucontext(struct ib_device *ibdev,
  						  struct ib_udata *udata)
  {
* Unmerged path drivers/infiniband/hw/mlx5/main.c
