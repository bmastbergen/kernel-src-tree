bonding: remove rtmsg_ifinfo called after bond_lower_state_changed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Xin Long <lucien.xin@gmail.com>
commit ef5201c83d1400570a3b6f004ad7a23d71934411
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ef5201c8.failed

After the patch 'rtnetlink: bring NETDEV_CHANGELOWERSTATE event
process back to rtnetlink_event', bond_lower_state_changed would
generate NETDEV_CHANGEUPPER event which would send a notification
to userspace in rtnetlink_event.

There's no need to call rtmsg_ifinfo to send the notification
any more. So this patch is to remove it from these places after
bond_lower_state_changed.

Besides, after this, rtmsg_ifinfo is not needed to be exported.

	Signed-off-by: Xin Long <lucien.xin@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ef5201c83d1400570a3b6f004ad7a23d71934411)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/rtnetlink.c
diff --cc net/core/rtnetlink.c
index 1df92b36501c,de24d394c69e..000000000000
--- a/net/core/rtnetlink.c
+++ b/net/core/rtnetlink.c
@@@ -2638,7 -2983,19 +2638,16 @@@ void rtmsg_ifinfo(int type, struct net_
  	if (skb)
  		rtmsg_ifinfo_send(skb, dev, flags);
  }
++<<<<<<< HEAD
 +EXPORT_SYMBOL(rtmsg_ifinfo);
++=======
+ 
+ void rtmsg_ifinfo(int type, struct net_device *dev, unsigned int change,
+ 		  gfp_t flags)
+ {
+ 	rtmsg_ifinfo_event(type, dev, change, rtnl_get_event(0), flags, NULL);
+ }
 -
 -void rtmsg_ifinfo_newnet(int type, struct net_device *dev, unsigned int change,
 -			 gfp_t flags, int *new_nsid)
 -{
 -	rtmsg_ifinfo_event(type, dev, change, rtnl_get_event(0), flags,
 -			   new_nsid);
 -}
++>>>>>>> ef5201c83d14 (bonding: remove rtmsg_ifinfo called after bond_lower_state_changed)
  
  static int nlmsg_populate_fdb_fill(struct sk_buff *skb,
  				   struct net_device *dev,
diff --git a/include/net/bonding.h b/include/net/bonding.h
index 34e830d5f74c..e04f91be2b57 100644
--- a/include/net/bonding.h
+++ b/include/net/bonding.h
@@ -369,7 +369,6 @@ static inline void bond_set_active_slave(struct slave *slave)
 		slave->backup = 0;
 		bond_queue_slave_event(slave);
 		bond_lower_state_changed(slave);
-		rtmsg_ifinfo(RTM_NEWLINK, slave->dev, 0, GFP_ATOMIC);
 	}
 }
 
@@ -379,7 +378,6 @@ static inline void bond_set_backup_slave(struct slave *slave)
 		slave->backup = 1;
 		bond_queue_slave_event(slave);
 		bond_lower_state_changed(slave);
-		rtmsg_ifinfo(RTM_NEWLINK, slave->dev, 0, GFP_ATOMIC);
 	}
 }
 
@@ -392,7 +390,6 @@ static inline void bond_set_slave_state(struct slave *slave,
 	slave->backup = slave_state;
 	if (notify) {
 		bond_lower_state_changed(slave);
-		rtmsg_ifinfo(RTM_NEWLINK, slave->dev, 0, GFP_ATOMIC);
 		bond_queue_slave_event(slave);
 		slave->should_notify = 0;
 	} else {
@@ -424,7 +421,6 @@ static inline void bond_slave_state_notify(struct bonding *bond)
 	bond_for_each_slave(bond, tmp, iter) {
 		if (tmp->should_notify) {
 			bond_lower_state_changed(tmp);
-			rtmsg_ifinfo(RTM_NEWLINK, tmp->dev, 0, GFP_ATOMIC);
 			tmp->should_notify = 0;
 		}
 	}
* Unmerged path net/core/rtnetlink.c
