nfp: provide nfp_port to of nfp_net_get_mac_addr()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Simon Horman <simon.horman@netronome.com>
commit 93da7d9660ee6117672a4a9233d80600220de675
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/93da7d96.failed

Provide port rather than vNIC as parameter of nfp_net_get_mac_addr.
This is to allow this function to be used by representor netdevs where
a vNIC may have more than one physical port none of which are associated
with the vNIC.

	Signed-off-by: Simon Horman <simon.horman@netronome.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 93da7d9660ee6117672a4a9233d80600220de675)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_app_nic.c
#	drivers/net/ethernet/netronome/nfp/nfp_main.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_main.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_main.h
index 1ac430fbaa18,edc14dc78674..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_main.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_main.h
@@@ -52,6 -54,12 +52,15 @@@ struct pci_dev
  struct nfp_cpp;
  struct nfp_cpp_area;
  struct nfp_eth_table;
++<<<<<<< HEAD
++=======
+ struct nfp_hwinfo;
+ struct nfp_mip;
+ struct nfp_net;
+ struct nfp_nsp_identify;
+ struct nfp_port;
+ struct nfp_rtsym_table;
++>>>>>>> 93da7d9660ee (nfp: provide nfp_port to of nfp_net_get_mac_addr())
  
  /**
   * struct nfp_pf - NFP PF-specific device structure
@@@ -102,4 -140,16 +111,17 @@@ extern struct pci_driver nfp_netvf_pci_
  int nfp_net_pci_probe(struct nfp_pf *pf);
  void nfp_net_pci_remove(struct nfp_pf *pf);
  
++<<<<<<< HEAD
++=======
+ int nfp_hwmon_register(struct nfp_pf *pf);
+ void nfp_hwmon_unregister(struct nfp_pf *pf);
+ 
+ struct nfp_eth_table_port *
+ nfp_net_find_port(struct nfp_eth_table *eth_tbl, unsigned int id);
+ void
+ nfp_net_get_mac_addr(struct nfp_pf *pf, struct nfp_port *port, unsigned int id);
+ 
+ bool nfp_ctrl_tx(struct nfp_net *nn, struct sk_buff *skb);
+ 
++>>>>>>> 93da7d9660ee (nfp: provide nfp_port to of nfp_net_get_mac_addr())
  #endif /* NFP_MAIN_H */
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index 092c7d18f2ec,cfcbc3b9a9aa..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@@ -130,48 -132,54 +130,90 @@@ err_area
  	return (u8 __iomem *)ERR_PTR(err);
  }
  
++<<<<<<< HEAD
 +static void
 +nfp_net_get_mac_addr_hwinfo(struct nfp_net *nn, struct nfp_cpp *cpp,
 +			    unsigned int id)
 +{
++=======
+ /**
+  * nfp_net_get_mac_addr() - Get the MAC address.
+  * @pf:       NFP PF handle
+  * @port:     NFP port structure
+  * @id:	      NFP port id
+  *
+  * First try to get the MAC address from NSP ETH table. If that
+  * fails try HWInfo.  As a last resort generate a random address.
+  */
+ void
+ nfp_net_get_mac_addr(struct nfp_pf *pf, struct nfp_port *port, unsigned int id)
+ {
+ 	struct nfp_eth_table_port *eth_port;
++>>>>>>> 93da7d9660ee (nfp: provide nfp_port to of nfp_net_get_mac_addr())
  	u8 mac_addr[ETH_ALEN];
  	const char *mac_str;
  	char name[32];
  
++<<<<<<< HEAD
++=======
+ 	eth_port = __nfp_port_get_eth_port(port);
+ 	if (eth_port) {
+ 		ether_addr_copy(port->netdev->dev_addr, eth_port->mac_addr);
+ 		ether_addr_copy(port->netdev->perm_addr, eth_port->mac_addr);
+ 		return;
+ 	}
+ 
++>>>>>>> 93da7d9660ee (nfp: provide nfp_port to of nfp_net_get_mac_addr())
  	snprintf(name, sizeof(name), "eth%d.mac", id);
  
 -	mac_str = nfp_hwinfo_lookup(pf->hwinfo, name);
 +	mac_str = nfp_hwinfo_lookup(cpp, name);
  	if (!mac_str) {
++<<<<<<< HEAD
 +		dev_warn(&nn->pdev->dev,
 +			 "Can't lookup MAC address. Generate\n");
 +		eth_hw_addr_random(nn->netdev);
++=======
+ 		nfp_warn(pf->cpp, "Can't lookup MAC address. Generate\n");
+ 		eth_hw_addr_random(port->netdev);
++>>>>>>> 93da7d9660ee (nfp: provide nfp_port to of nfp_net_get_mac_addr())
  		return;
  	}
  
  	if (sscanf(mac_str, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",
  		   &mac_addr[0], &mac_addr[1], &mac_addr[2],
  		   &mac_addr[3], &mac_addr[4], &mac_addr[5]) != 6) {
++<<<<<<< HEAD
 +		dev_warn(&nn->pdev->dev,
 +			 "Can't parse MAC address (%s). Generate.\n", mac_str);
 +		eth_hw_addr_random(nn->netdev);
 +		return;
 +	}
 +
 +	ether_addr_copy(nn->netdev->dev_addr, mac_addr);
 +	ether_addr_copy(nn->netdev->perm_addr, mac_addr);
++=======
+ 		nfp_warn(pf->cpp, "Can't parse MAC address (%s). Generate.\n",
+ 			 mac_str);
+ 		eth_hw_addr_random(port->netdev);
+ 		return;
+ 	}
+ 
+ 	ether_addr_copy(port->netdev->dev_addr, mac_addr);
+ 	ether_addr_copy(port->netdev->perm_addr, mac_addr);
++>>>>>>> 93da7d9660ee (nfp: provide nfp_port to of nfp_net_get_mac_addr())
  }
  
 -struct nfp_eth_table_port *
 -nfp_net_find_port(struct nfp_eth_table *eth_tbl, unsigned int id)
 +/**
 + * nfp_net_get_mac_addr() - Get the MAC address.
 + * @nn:       NFP Network structure
 + * @pf:	      NFP PF device structure
 + * @id:	      NFP port id
 + *
 + * First try to get the MAC address from NSP ETH table. If that
 + * fails try HWInfo.  As a last resort generate a random address.
 + */
 +static void
 +nfp_net_get_mac_addr(struct nfp_net *nn, struct nfp_pf *pf, unsigned int id)
  {
  	int i;
  
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app_nic.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app_nic.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_main.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_main.c
