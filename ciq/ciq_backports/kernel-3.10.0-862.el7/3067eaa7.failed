perf test: Add test cases for new data source encoding

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Andi Kleen <ak@linux.intel.com>
commit 3067eaa7ce2dbcde89d87277cdbc91c211480060
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3067eaa7.failed

Add some simple tests to perf test to test data source printing.

v2: Make the tests actually checked for the correct name of Forward
v3: Adjust to new encoding

Committer notes:

Avoid the in place declaration to make this build with older compilers,
for instance, in Debian 7 we get:

  tests/mem.c: In function 'test__mem':
  tests/mem.c:30:5: error: missing initializer [-Werror=missing-field-initializers]
  tests/mem.c:30:5: error: (near initialization for '(anonymous).<anonymous>.mem_snoop') [-Werror=missing-field-initializers]

So just zero a struct, then go on building the unions as needed,
reusing settings from the previous test, i.e. local -> remote, etc.

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Jiri Olsa <jolsa@kernel.org>
Link: http://lkml.kernel.org/r/20170816222156.19953-5-andi@firstfloor.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 3067eaa7ce2dbcde89d87277cdbc91c211480060)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/tests.h
diff --cc tools/perf/tests/tests.h
index 263299486992,921412a6a880..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -33,57 -38,69 +33,122 @@@ struct test 
  };
  
  /* Tests */
++<<<<<<< HEAD
 +int test__vmlinux_matches_kallsyms(int subtest);
 +int test__openat_syscall_event(int subtest);
 +int test__openat_syscall_event_on_all_cpus(int subtest);
 +int test__basic_mmap(int subtest);
 +int test__PERF_RECORD(int subtest);
 +int test__perf_evsel__roundtrip_name_test(int subtest);
 +int test__perf_evsel__tp_sched_test(int subtest);
 +int test__syscall_openat_tp_fields(int subtest);
 +int test__pmu(int subtest);
 +int test__attr(int subtest);
 +int test__dso_data(int subtest);
 +int test__dso_data_cache(int subtest);
 +int test__dso_data_reopen(int subtest);
 +int test__parse_events(int subtest);
 +int test__hists_link(int subtest);
 +int test__python_use(int subtest);
 +int test__bp_signal(int subtest);
 +int test__bp_signal_overflow(int subtest);
 +int test__task_exit(int subtest);
 +int test__sw_clock_freq(int subtest);
 +int test__code_reading(int subtest);
 +int test__sample_parsing(int subtest);
 +int test__keep_tracking(int subtest);
 +int test__parse_no_sample_id_all(int subtest);
 +int test__dwarf_unwind(int subtest);
 +int test__expr(int subtest);
 +int test__hists_filter(int subtest);
 +int test__mmap_thread_lookup(int subtest);
 +int test__thread_mg_share(int subtest);
 +int test__hists_output(int subtest);
 +int test__hists_cumulate(int subtest);
 +int test__switch_tracking(int subtest);
 +int test__fdarray__filter(int subtest);
 +int test__fdarray__add(int subtest);
 +int test__kmod_path__parse(int subtest);
 +int test__thread_map(int subtest);
 +int test_session_topology(int subtest);
 +int test__thread_map_synthesize(int subtest);
 +int test__thread_map_remove(int subtest);
 +int test__cpu_map_synthesize(int subtest);
 +int test__synthesize_stat_config(int subtest);
 +int test__synthesize_stat(int subtest);
 +int test__synthesize_stat_round(int subtest);
 +int test__event_update(int subtest);
 +int test__event_times(int subtest);
 +int test__backward_ring_buffer(int subtest);
 +int test__cpu_map_print(int subtest);
 +int test__is_printable_array(int subtest);
 +int test__bitmap_print(int subtest);
 +int test__perf_hooks(int subtest);
 +int test__unit_number__scnprint(int subtest);
++=======
+ int test__vmlinux_matches_kallsyms(struct test *test, int subtest);
+ int test__openat_syscall_event(struct test *test, int subtest);
+ int test__openat_syscall_event_on_all_cpus(struct test *test, int subtest);
+ int test__basic_mmap(struct test *test, int subtest);
+ int test__PERF_RECORD(struct test *test, int subtest);
+ int test__perf_evsel__roundtrip_name_test(struct test *test, int subtest);
+ int test__perf_evsel__tp_sched_test(struct test *test, int subtest);
+ int test__syscall_openat_tp_fields(struct test *test, int subtest);
+ int test__pmu(struct test *test, int subtest);
+ int test__attr(struct test *test, int subtest);
+ int test__dso_data(struct test *test, int subtest);
+ int test__dso_data_cache(struct test *test, int subtest);
+ int test__dso_data_reopen(struct test *test, int subtest);
+ int test__parse_events(struct test *test, int subtest);
+ int test__hists_link(struct test *test, int subtest);
+ int test__python_use(struct test *test, int subtest);
+ int test__bp_signal(struct test *test, int subtest);
+ int test__bp_signal_overflow(struct test *test, int subtest);
+ int test__task_exit(struct test *test, int subtest);
+ int test__mem(struct test *test, int subtest);
+ int test__sw_clock_freq(struct test *test, int subtest);
+ int test__code_reading(struct test *test, int subtest);
+ int test__sample_parsing(struct test *test, int subtest);
+ int test__keep_tracking(struct test *test, int subtest);
+ int test__parse_no_sample_id_all(struct test *test, int subtest);
+ int test__dwarf_unwind(struct test *test, int subtest);
+ int test__expr(struct test *test, int subtest);
+ int test__hists_filter(struct test *test, int subtest);
+ int test__mmap_thread_lookup(struct test *test, int subtest);
+ int test__thread_mg_share(struct test *test, int subtest);
+ int test__hists_output(struct test *test, int subtest);
+ int test__hists_cumulate(struct test *test, int subtest);
+ int test__switch_tracking(struct test *test, int subtest);
+ int test__fdarray__filter(struct test *test, int subtest);
+ int test__fdarray__add(struct test *test, int subtest);
+ int test__kmod_path__parse(struct test *test, int subtest);
+ int test__thread_map(struct test *test, int subtest);
+ int test__llvm(struct test *test, int subtest);
+ const char *test__llvm_subtest_get_desc(int subtest);
+ int test__llvm_subtest_get_nr(void);
+ int test__bpf(struct test *test, int subtest);
+ const char *test__bpf_subtest_get_desc(int subtest);
+ int test__bpf_subtest_get_nr(void);
+ int test__session_topology(struct test *test, int subtest);
+ int test__thread_map_synthesize(struct test *test, int subtest);
+ int test__thread_map_remove(struct test *test, int subtest);
+ int test__cpu_map_synthesize(struct test *test, int subtest);
+ int test__synthesize_stat_config(struct test *test, int subtest);
+ int test__synthesize_stat(struct test *test, int subtest);
+ int test__synthesize_stat_round(struct test *test, int subtest);
+ int test__event_update(struct test *test, int subtest);
+ int test__event_times(struct test *test, int subtest);
+ int test__backward_ring_buffer(struct test *test, int subtest);
+ int test__cpu_map_print(struct test *test, int subtest);
+ int test__sdt_event(struct test *test, int subtest);
+ int test__is_printable_array(struct test *test, int subtest);
+ int test__bitmap_print(struct test *test, int subtest);
+ int test__perf_hooks(struct test *test, int subtest);
+ int test__clang(struct test *test, int subtest);
+ const char *test__clang_subtest_get_desc(int subtest);
+ int test__clang_subtest_get_nr(void);
+ int test__unit_number__scnprint(struct test *test, int subtest);
++>>>>>>> 3067eaa7ce2d (perf test: Add test cases for new data source encoding)
  
  bool test__bp_signal_is_supported(void);
  
diff --git a/tools/perf/tests/Build b/tools/perf/tests/Build
index c68ddf31ffcf..af5e0826aea1 100644
--- a/tools/perf/tests/Build
+++ b/tools/perf/tests/Build
@@ -32,6 +32,7 @@ perf-y += parse-no-sample-id-all.o
 perf-y += kmod-path.o
 perf-y += thread-map.o
 perf-y += topology.o
+perf-y += mem.o
 perf-y += cpumap.o
 perf-y += stat.o
 perf-y += event_update.o
diff --git a/tools/perf/tests/builtin-test.c b/tools/perf/tests/builtin-test.c
index 15ee18262e31..c3ea3c39d8ff 100644
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@ -39,6 +39,10 @@ static struct test generic_tests[] = {
 		.desc = "Read samples using the mmap interface",
 		.func = test__basic_mmap,
 	},
+	{
+		.desc = "Test data source output",
+		.func = test__mem,
+	},
 	{
 		.desc = "Parse event definition strings",
 		.func = test__parse_events,
diff --git a/tools/perf/tests/mem.c b/tools/perf/tests/mem.c
new file mode 100644
index 000000000000..21952e1e6e6d
--- /dev/null
+++ b/tools/perf/tests/mem.c
@@ -0,0 +1,56 @@
+#include "util/mem-events.h"
+#include "util/symbol.h"
+#include "linux/perf_event.h"
+#include "util/debug.h"
+#include "tests.h"
+#include <string.h>
+
+static int check(union perf_mem_data_src data_src,
+		  const char *string)
+{
+	char out[100];
+	char failure[100];
+	struct mem_info mi = { .data_src = data_src };
+
+	int n;
+
+	n = perf_mem__snp_scnprintf(out, sizeof out, &mi);
+	n += perf_mem__lvl_scnprintf(out + n, sizeof out - n, &mi);
+	snprintf(failure, sizeof failure, "unexpected %s", out);
+	TEST_ASSERT_VAL(failure, !strcmp(string, out));
+	return 0;
+}
+
+int test__mem(struct test *text __maybe_unused, int subtest __maybe_unused)
+{
+	int ret = 0;
+	union perf_mem_data_src src;
+
+	memset(&src, 0, sizeof(src));
+
+	src.mem_lvl = PERF_MEM_LVL_HIT;
+	src.mem_lvl_num = 4;
+
+	ret |= check(src, "N/AL4 hit");
+
+	src.mem_remote = 1;
+
+	ret |= check(src, "N/ARemote L4 hit");
+
+	src.mem_lvl = PERF_MEM_LVL_MISS;
+	src.mem_lvl_num = PERF_MEM_LVLNUM_PMEM;
+	src.mem_remote = 0;
+
+	ret |= check(src, "N/APMEM miss");
+
+	src.mem_remote = 1;
+
+	ret |= check(src, "N/ARemote PMEM miss");
+
+	src.mem_snoopx = PERF_MEM_SNOOPX_FWD;
+	src.mem_lvl_num = PERF_MEM_LVLNUM_RAM;
+
+	ret |= check(src , "FwdRemote RAM miss");
+
+	return ret;
+}
* Unmerged path tools/perf/tests/tests.h
