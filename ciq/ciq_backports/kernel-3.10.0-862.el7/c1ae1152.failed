net/mlx5e: Move the encap entry structure from the eswitch header

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Move the encap entry structure from the eswitch header (Don Dutile) [1456694 1499362]
Rebuild_FUZZ: 96.83%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit c1ae11521b1e87523553ddd3c1aa88be3d710c96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c1ae1152.failed

The encap entry structure isn't manipulated by the eswitch code,
hence it can/needs to be removed from the eswitch header.

Do that, and change it to have mlx5e_ prefix.

This patch doesn't change any functionality.

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit c1ae11521b1e87523553ddd3c1aa88be3d710c96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/ipath/ipath_user_sdma.h
diff --cc drivers/infiniband/hw/ipath/ipath_user_sdma.h
index fc76316c4a58,425cb1b0bf02..000000000000
--- a/drivers/infiniband/hw/ipath/ipath_user_sdma.h
+++ b/drivers/infiniband/hw/ipath/ipath_user_sdma.h
@@@ -29,24 -29,40 +29,50 @@@
   * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
 +#include <linux/device.h>
  
 -#ifndef __MLX5E_REP_H__
 -#define __MLX5E_REP_H__
 +struct ipath_user_sdma_queue;
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_user_sdma.h
 +struct ipath_user_sdma_queue *
 +ipath_user_sdma_queue_create(struct device *dev, int unit, int port, int sport);
 +void ipath_user_sdma_queue_destroy(struct ipath_user_sdma_queue *pq);
++=======
+ #include <net/ip_tunnels.h>
+ #include "eswitch.h"
+ #include "en.h"
++>>>>>>> c1ae11521b1e (net/mlx5e: Move the encap entry structure from the eswitch header):drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
  
 -struct mlx5e_rep_priv {
 -	struct mlx5_eswitch_rep *rep;
 -};
 +int ipath_user_sdma_writev(struct ipath_devdata *dd,
 +			   struct ipath_user_sdma_queue *pq,
 +			   const struct iovec *iov,
 +			   unsigned long dim);
  
++<<<<<<< HEAD:drivers/infiniband/hw/ipath/ipath_user_sdma.h
 +int ipath_user_sdma_make_progress(struct ipath_devdata *dd,
 +				  struct ipath_user_sdma_queue *pq);
++=======
+ struct mlx5e_encap_entry {
+ 	struct hlist_node encap_hlist;
+ 	struct list_head flows;
+ 	u32 encap_id;
+ 	struct neighbour *n;
+ 	struct ip_tunnel_info tun_info;
+ 	unsigned char h_dest[ETH_ALEN];	/* destination eth addr	*/
+ 
+ 	struct net_device *out_dev;
+ 	int tunnel_type;
+ };
+ 
+ void mlx5e_register_vport_reps(struct mlx5e_priv *priv);
+ void mlx5e_unregister_vport_reps(struct mlx5e_priv *priv);
+ bool mlx5e_is_uplink_rep(struct mlx5e_priv *priv);
+ int mlx5e_add_sqs_fwd_rules(struct mlx5e_priv *priv);
+ void mlx5e_remove_sqs_fwd_rules(struct mlx5e_priv *priv);
++>>>>>>> c1ae11521b1e (net/mlx5e: Move the encap entry structure from the eswitch header):drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
  
 -int mlx5e_get_offload_stats(int attr_id, const struct net_device *dev, void *sp);
 -bool mlx5e_has_offload_stats(const struct net_device *dev, int attr_id);
 -
 -int mlx5e_attr_get(struct net_device *dev, struct switchdev_attr *attr);
 -void mlx5e_handle_rx_cqe_rep(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
 +void ipath_user_sdma_queue_drain(struct ipath_devdata *dd,
 +				 struct ipath_user_sdma_queue *pq);
  
 -#endif /* __MLX5E_REP_H__ */
 +u32 ipath_user_sdma_complete_counter(const struct ipath_user_sdma_queue *pq);
 +u32 ipath_user_sdma_inflight_counter(struct ipath_user_sdma_queue *pq);
* Unmerged path drivers/infiniband/hw/ipath/ipath_user_sdma.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 29674f9689a9..f5d6f9d60231 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@ -217,9 +217,9 @@ static void mlx5e_detach_encap(struct mlx5e_priv *priv,
 
 	list_del(&flow->encap);
 	if (list_empty(next)) {
-		struct mlx5_encap_entry *e;
+		struct mlx5e_encap_entry *e;
 
-		e = list_entry(next, struct mlx5_encap_entry, flows);
+		e = list_entry(next, struct mlx5e_encap_entry, flows);
 		if (e->n) {
 			mlx5_encap_dealloc(priv->mdev, e->encap_id);
 			neigh_release(e->n);
@@ -883,7 +883,7 @@ static void gen_vxlan_header_ipv6(struct net_device *out_dev,
 
 static int mlx5e_create_encap_header_ipv4(struct mlx5e_priv *priv,
 					  struct net_device *mirred_dev,
-					  struct mlx5_encap_entry *e,
+					  struct mlx5e_encap_entry *e,
 					  struct net_device **out_dev)
 {
 	int max_encap_size = MLX5_CAP_ESW(priv->mdev, max_encap_header_size);
@@ -951,9 +951,8 @@ out:
 
 static int mlx5e_create_encap_header_ipv6(struct mlx5e_priv *priv,
 					  struct net_device *mirred_dev,
-					  struct mlx5_encap_entry *e,
+					  struct mlx5e_encap_entry *e,
 					  struct net_device **out_dev)
-
 {
 	int max_encap_size = MLX5_CAP_ESW(priv->mdev, max_encap_header_size);
 	int ipv6_encap_size = ETH_HLEN + sizeof(struct ipv6hdr) + VXLAN_HLEN;
@@ -1033,7 +1032,7 @@ static int mlx5e_attach_encap(struct mlx5e_priv *priv,
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 	unsigned short family = ip_tunnel_info_af(tun_info);
 	struct ip_tunnel_key *key = &tun_info->key;
-	struct mlx5_encap_entry *e;
+	struct mlx5e_encap_entry *e;
 	struct net_device *out_dev;
 	int tunnel_type, err = -EOPNOTSUPP;
 	uintptr_t hash_key;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index c62f318c62ef..b452365a4723 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -37,7 +37,6 @@
 #include <linux/if_link.h>
 #include <linux/hashtable.h>
 #include <net/devlink.h>
-#include <net/ip_tunnels.h>
 #include <linux/mlx5/device.h>
 
 #define MLX5_MAX_UC_PER_VPORT(dev) \
@@ -290,18 +289,6 @@ enum {
 #define MLX5_FLOW_CONTEXT_ACTION_VLAN_POP  0x4000
 #define MLX5_FLOW_CONTEXT_ACTION_VLAN_PUSH 0x8000
 
-struct mlx5_encap_entry {
-	struct hlist_node encap_hlist;
-	struct list_head flows;
-	u32 encap_id;
-	struct neighbour *n;
-	struct ip_tunnel_info tun_info;
-	unsigned char h_dest[ETH_ALEN];	/* destination eth addr	*/
-
-	struct net_device *out_dev;
-	int tunnel_type;
-};
-
 struct mlx5_esw_flow_attr {
 	struct mlx5_eswitch_rep *in_rep;
 	struct mlx5_eswitch_rep *out_rep;
