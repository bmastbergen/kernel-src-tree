qed*: Set rdma generic functions prefix

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Michal Kalderon <Michal.Kalderon@cavium.com>
commit bbfcd1e8e1677b1e692144c5709945e1dfe1ed30
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bbfcd1e8.failed

Rename the functions common to both iWARP and RoCE to have a prefix of
_rdma_ instead of _roce_.

	Signed-off-by: Michal Kalderon <Michal.Kalderon@cavium.com>
	Signed-off-by: Yuval Mintz <Yuval.Mintz@cavium.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bbfcd1e8e1677b1e692144c5709945e1dfe1ed30)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qede/qede_main.c
#	drivers/net/ethernet/qlogic/qede/qede_roce.c
diff --cc drivers/net/ethernet/qlogic/qede/qede_main.c
index 523f28dc8301,06ca13dd9ddb..000000000000
--- a/drivers/net/ethernet/qlogic/qede/qede_main.c
+++ b/drivers/net/ethernet/qlogic/qede/qede_main.c
@@@ -942,10 -1012,8 +942,10 @@@ static int __qede_probe(struct pci_dev 
  	qede_log_probe(edev);
  	return 0;
  
 +err5:
 +	unregister_netdev(edev->ndev);
  err4:
- 	qede_roce_dev_remove(edev);
+ 	qede_rdma_dev_remove(edev);
  err3:
  	free_netdev(edev->ndev);
  err2:
@@@ -991,13 -1059,12 +991,13 @@@ static void __qede_remove(struct pci_de
  
  	DP_INFO(edev, "Starting qede_remove\n");
  
 -	unregister_netdev(ndev);
  	cancel_delayed_work_sync(&edev->sp_task);
  
 -	qede_ptp_disable(edev);
 +	unregister_netdev(ndev);
 +
 +	qede_ptp_remove(edev);
  
- 	qede_roce_dev_remove(edev);
+ 	qede_rdma_dev_remove(edev);
  
  	edev->ops->common->set_power_state(cdev, PCI_D0);
  
@@@ -1801,10 -1962,9 +1801,14 @@@ static void qede_unload(struct qede_de
  	if (!is_locked)
  		__qede_lock(edev);
  
 +	qede_roce_dev_event_close(edev);
  	edev->state = QEDE_STATE_CLOSED;
  
++<<<<<<< HEAD
 +	qede_ptp_stop(edev);
++=======
+ 	qede_rdma_dev_event_close(edev);
++>>>>>>> bbfcd1e8e167 (qed*: Set rdma generic functions prefix)
  
  	/* Close OS Tx */
  	netif_tx_disable(edev->ndev);
@@@ -1898,13 -2069,7 +1902,17 @@@ static int qede_load(struct qede_dev *e
  	link_params.link_up = true;
  	edev->ops->common->set_link(edev->cdev, &link_params);
  
++<<<<<<< HEAD
 +	/* Query whether link is already-up */
 +	memset(&link_output, 0, sizeof(link_output));
 +	edev->ops->common->get_link(edev->cdev, &link_output);
 +	qede_roce_dev_event_open(edev);
 +	qede_link_update(edev, &link_output);
 +
 +	qede_ptp_start(edev, (mode == QEDE_LOAD_NORMAL));
++=======
+ 	qede_rdma_dev_event_open(edev);
++>>>>>>> bbfcd1e8e167 (qed*: Set rdma generic functions prefix)
  
  	edev->state = QEDE_STATE_OPEN;
  
diff --cc drivers/net/ethernet/qlogic/qede/qede_roce.c
index f00657ce7c8f,50b142fad6b8..000000000000
--- a/drivers/net/ethernet/qlogic/qede/qede_roce.c
+++ b/drivers/net/ethernet/qlogic/qede/qede_roce.c
@@@ -221,10 -221,10 +221,15 @@@ static void qede_rdma_changeaddr(struc
  		qedr_drv->notify(edev->rdma_info.qedr_dev, QEDE_CHANGE_ADDR);
  }
  
++<<<<<<< HEAD:drivers/net/ethernet/qlogic/qede/qede_roce.c
 +struct qede_roce_event_work *qede_roce_get_free_event_node(struct qede_dev
 +							   *edev)
++=======
+ static struct qede_rdma_event_work *
+ qede_rdma_get_free_event_node(struct qede_dev *edev)
++>>>>>>> bbfcd1e8e167 (qed*: Set rdma generic functions prefix):drivers/net/ethernet/qlogic/qede/qede_rdma.c
  {
- 	struct qede_roce_event_work *event_node = NULL;
+ 	struct qede_rdma_event_work *event_node = NULL;
  	struct list_head *list_node = NULL;
  	bool found = false;
  
diff --git a/drivers/infiniband/hw/qedr/main.c b/drivers/infiniband/hw/qedr/main.c
index ef11e770f822..070d21ccb107 100644
--- a/drivers/infiniband/hw/qedr/main.c
+++ b/drivers/infiniband/hw/qedr/main.c
@@ -901,7 +901,7 @@ static void qedr_mac_address_change(struct qedr_dev *dev)
  * initialization done before RoCE driver notifies
  * event to stack.
  */
-static void qedr_notify(struct qedr_dev *dev, enum qede_roce_event event)
+static void qedr_notify(struct qedr_dev *dev, enum qede_rdma_event event)
 {
 	switch (event) {
 	case QEDE_UP:
@@ -930,12 +930,12 @@ static struct qedr_driver qedr_drv = {
 
 static int __init qedr_init_module(void)
 {
-	return qede_roce_register_driver(&qedr_drv);
+	return qede_rdma_register_driver(&qedr_drv);
 }
 
 static void __exit qedr_exit_module(void)
 {
-	qede_roce_unregister_driver(&qedr_drv);
+	qede_rdma_unregister_driver(&qedr_drv);
 }
 
 module_init(qedr_init_module);
diff --git a/drivers/net/ethernet/qlogic/qede/qede.h b/drivers/net/ethernet/qlogic/qede/qede.h
index 2c5358d8d1dd..20722ddd7d9f 100644
--- a/drivers/net/ethernet/qlogic/qede/qede.h
+++ b/drivers/net/ethernet/qlogic/qede/qede.h
@@ -149,8 +149,8 @@ struct qede_vlan {
 struct qede_rdma_dev {
 	struct qedr_dev *qedr_dev;
 	struct list_head entry;
-	struct list_head roce_event_list;
-	struct workqueue_struct *roce_wq;
+	struct list_head rdma_event_list;
+	struct workqueue_struct *rdma_wq;
 };
 
 struct qede_ptp;
* Unmerged path drivers/net/ethernet/qlogic/qede/qede_main.c
* Unmerged path drivers/net/ethernet/qlogic/qede/qede_roce.c
diff --git a/include/linux/qed/qede_roce.h b/include/linux/qed/qede_roce.h
index 3b8dd551a98c..9a3e1d92e659 100644
--- a/include/linux/qed/qede_roce.h
+++ b/include/linux/qed/qede_roce.h
@@ -36,18 +36,18 @@ struct qedr_dev;
 struct qed_dev;
 struct qede_dev;
 
-enum qede_roce_event {
+enum qede_rdma_event {
 	QEDE_UP,
 	QEDE_DOWN,
 	QEDE_CHANGE_ADDR,
 	QEDE_CLOSE
 };
 
-struct qede_roce_event_work {
+struct qede_rdma_event_work {
 	struct list_head list;
 	struct work_struct work;
 	void *ptr;
-	enum qede_roce_event event;
+	enum qede_rdma_event event;
 };
 
 struct qedr_driver {
@@ -57,32 +57,33 @@ struct qedr_driver {
 				struct net_device *);
 
 	void (*remove)(struct qedr_dev *);
-	void (*notify)(struct qedr_dev *, enum qede_roce_event);
+	void (*notify)(struct qedr_dev *, enum qede_rdma_event);
 };
 
-/* APIs for RoCE driver to register callback handlers,
+/* APIs for RDMA driver to register callback handlers,
  * which will be invoked when device is added, removed, ifup, ifdown
  */
-int qede_roce_register_driver(struct qedr_driver *drv);
-void qede_roce_unregister_driver(struct qedr_driver *drv);
+int qede_rdma_register_driver(struct qedr_driver *drv);
+void qede_rdma_unregister_driver(struct qedr_driver *drv);
 
-bool qede_roce_supported(struct qede_dev *dev);
+bool qede_rdma_supported(struct qede_dev *dev);
 
 #if IS_ENABLED(CONFIG_QED_RDMA)
-int qede_roce_dev_add(struct qede_dev *dev);
-void qede_roce_dev_event_open(struct qede_dev *dev);
-void qede_roce_dev_event_close(struct qede_dev *dev);
-void qede_roce_dev_remove(struct qede_dev *dev);
-void qede_roce_event_changeaddr(struct qede_dev *qedr);
+int qede_rdma_dev_add(struct qede_dev *dev);
+void qede_rdma_dev_event_open(struct qede_dev *dev);
+void qede_rdma_dev_event_close(struct qede_dev *dev);
+void qede_rdma_dev_remove(struct qede_dev *dev);
+void qede_rdma_event_changeaddr(struct qede_dev *edr);
+
 #else
-static inline int qede_roce_dev_add(struct qede_dev *dev)
+static inline int qede_rdma_dev_add(struct qede_dev *dev);
 {
 	return 0;
 }
 
-static inline void qede_roce_dev_event_open(struct qede_dev *dev) {}
-static inline void qede_roce_dev_event_close(struct qede_dev *dev) {}
-static inline void qede_roce_dev_remove(struct qede_dev *dev) {}
-static inline void qede_roce_event_changeaddr(struct qede_dev *qedr) {}
+static inline void qede_rdma_dev_event_open(struct qede_dev *dev) {}
+static inline void qede_rdma_dev_event_close(struct qede_dev *dev) {}
+static inline void qede_rdma_dev_remove(struct qede_dev *dev) {}
+static inline void qede_rdma_event_changeaddr(struct qede_dev *edr) {}
 #endif
 #endif
