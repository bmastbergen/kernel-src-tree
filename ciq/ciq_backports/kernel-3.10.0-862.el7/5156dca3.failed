ftrace: Fix the race between ftrace and insmod

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Qiu Peiyang <peiyangx.qiu@intel.com>
commit 5156dca34a3e1e1edac2d0dabf43d8632909b7aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5156dca3.failed

We hit ftrace_bug report when booting Android on a 64bit ATOM SOC chip.
Basically, there is a race between insmod and ftrace_run_update_code.

After load_module=>ftrace_module_init, another thread jumps in to call
ftrace_run_update_code=>ftrace_arch_code_modify_prepare
                        =>set_all_modules_text_rw, to change all modules
as RW. Since the new module is at MODULE_STATE_UNFORMED, the text attribute
is not changed. Then, the 2nd thread goes ahead to change codes.
However, load_module continues to call complete_formation=>set_section_ro_nx,
then 2nd thread would fail when probing the module's TEXT.

The patch fixes it by using notifier to delay the enabling of ftrace
records to the time when module is at state MODULE_STATE_COMING.

Link: http://lkml.kernel.org/r/567CE628.3000609@intel.com

	Signed-off-by: Qiu Peiyang <peiyangx.qiu@intel.com>
	Signed-off-by: Zhang Yanmin <yanmin.zhang@intel.com>
	Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
(cherry picked from commit 5156dca34a3e1e1edac2d0dabf43d8632909b7aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/ftrace.c
diff --cc kernel/trace/ftrace.c
index 0146600e951a,eca592f977b2..000000000000
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@@ -4347,25 -5032,15 +4347,30 @@@ static void ftrace_init_module(struct m
  
  void ftrace_module_init(struct module *mod)
  {
 -	if (ftrace_disabled || !mod->num_ftrace_callsites)
 -		return;
 +#ifdef CONFIG_S390
 +	struct module_ext *mod_ext;
  
++<<<<<<< HEAD
 +	mutex_lock(&module_ext_mutex);
 +	mod_ext = find_module_ext(mod);
 +	mutex_unlock(&module_ext_mutex);
 +
 +	ftrace_init_module(mod, mod_ext->ftrace_callsites,
 +			   mod_ext->ftrace_callsites +
 +			   mod_ext->num_ftrace_callsites);
 +#else
 +	ftrace_init_module(mod, mod->ftrace_callsites,
 +			   mod->ftrace_callsites +
 +			   mod->num_ftrace_callsites);
 +#endif
++=======
+ 	ftrace_process_locs(mod, mod->ftrace_callsites,
+ 			    mod->ftrace_callsites + mod->num_ftrace_callsites);
++>>>>>>> 5156dca34a3e (ftrace: Fix the race between ftrace and insmod)
  }
  
- static int ftrace_module_notify_exit(struct notifier_block *self,
- 				     unsigned long val, void *data)
+ static int ftrace_module_notify(struct notifier_block *self,
+ 				unsigned long val, void *data)
  {
  	struct module *mod = data;
  
* Unmerged path kernel/trace/ftrace.c
