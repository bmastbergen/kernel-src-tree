i2c: make address check indpendent from client struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [i2c] make address check indpendent from client struct (Gopal Tiwari) [1456705]
Rebuild_FUZZ: 95.05%
commit-author Wolfram Sang <wsa+renesas@sang-engineering.com>
commit c4019b7040eaf88f440ce5212e055a4f19b1b541
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c4019b70.failed

We want to use this function with struct boardinfo soon, so let's just
pass the parameters really needed. We also extend the type of addr, so
more types can be input. Remove a superfluous dangling comment while
here.

	Tested-by: Andrey Danin <danindrey@mail.ru>
	Acked-by: Stephen Warren <swarren@nvidia.com>
	Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit c4019b7040eaf88f440ce5212e055a4f19b1b541)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/i2c-core.c
diff --cc drivers/i2c/i2c-core.c
index c4f8b018e3f7,4ffe06451081..000000000000
--- a/drivers/i2c/i2c-core.c
+++ b/drivers/i2c/i2c-core.c
@@@ -503,11 -798,11 +503,15 @@@ static unsigned short i2c_encode_flags_
  
  /* This is a permissive address validity check, I2C address map constraints
   * are purposely not enforced, except for the general call address. */
++<<<<<<< HEAD
 +static int i2c_check_client_addr_validity(const struct i2c_client *client)
++=======
+ static int i2c_check_addr_validity(unsigned addr, unsigned short flags)
++>>>>>>> c4019b7040ea (i2c: make address check indpendent from client struct)
  {
- 	if (client->flags & I2C_CLIENT_TEN) {
+ 	if (flags & I2C_CLIENT_TEN) {
  		/* 10-bit address, all values are valid */
- 		if (client->addr > 0x3ff)
+ 		if (addr > 0x3ff)
  			return -EINVAL;
  	} else {
  		/* 7-bit address, reject the general call address */
@@@ -696,8 -984,7 +700,12 @@@ i2c_new_device(struct i2c_adapter *adap
  
  	strlcpy(client->name, info->type, sizeof(client->name));
  
++<<<<<<< HEAD
 +	/* Check for address validity */
 +	status = i2c_check_client_addr_validity(client);
++=======
+ 	status = i2c_check_addr_validity(client->addr, client->flags);
++>>>>>>> c4019b7040ea (i2c: make address check indpendent from client struct)
  	if (status) {
  		dev_err(&adap->dev, "Invalid %d-bit I2C address 0x%02hx\n",
  			client->flags & I2C_CLIENT_TEN ? 10 : 7, client->addr);
* Unmerged path drivers/i2c/i2c-core.c
