sched: add macros to define bitops for task atomic flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Zefan Li <lizefan@huawei.com>
commit e0e5070b20e01f0321f97db4e4e174f3f6b49e50
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e0e5070b.failed

This will simplify code when we add new flags.

v3:
- Kees pointed out that no_new_privs should never be cleared, so we
shouldn't define task_clear_no_new_privs(). we define 3 macros instead
of a single one.

v2:
- updated scripts/tags.sh, suggested by Peter

	Cc: Ingo Molnar <mingo@kernel.org>
	Cc: Miao Xie <miaox@cn.fujitsu.com>
	Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
	Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Acked-by: Kees Cook <keescook@chromium.org>
	Signed-off-by: Zefan Li <lizefan@huawei.com>
	Signed-off-by: Tejun Heo <tj@kernel.org>
(cherry picked from commit e0e5070b20e01f0321f97db4e4e174f3f6b49e50)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sched.h
#	scripts/tags.sh
diff --cc include/linux/sched.h
index 17d2f0bc1bf5,5630763956d9..000000000000
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@@ -2139,6 -1956,22 +2139,25 @@@ static inline void memalloc_noio_restor
  	current->flags = (current->flags & ~PF_MEMALLOC_NOIO) | flags;
  }
  
++<<<<<<< HEAD
++=======
+ /* Per-process atomic flags. */
+ #define PFA_NO_NEW_PRIVS 0	/* May not gain new privileges. */
+ 
+ #define TASK_PFA_TEST(name, func)					\
+ 	static inline bool task_##func(struct task_struct *p)		\
+ 	{ return test_bit(PFA_##name, &p->atomic_flags); }
+ #define TASK_PFA_SET(name, func)					\
+ 	static inline void task_set_##func(struct task_struct *p)	\
+ 	{ set_bit(PFA_##name, &p->atomic_flags); }
+ #define TASK_PFA_CLEAR(name, func)					\
+ 	static inline void task_clear_##func(struct task_struct *p)	\
+ 	{ clear_bit(PFA_##name, &p->atomic_flags); }
+ 
+ TASK_PFA_TEST(NO_NEW_PRIVS, no_new_privs)
+ TASK_PFA_SET(NO_NEW_PRIVS, no_new_privs)
+ 
++>>>>>>> e0e5070b20e0 (sched: add macros to define bitops for task atomic flags)
  /*
   * task->jobctl flags
   */
diff --cc scripts/tags.sh
index 71352bb056f4,293828bfd4ac..000000000000
--- a/scripts/tags.sh
+++ b/scripts/tags.sh
@@@ -188,6 -193,13 +188,16 @@@ exuberant(
  	--regex-c++='/TESTCLEARFLAG_FALSE\(([^,)]*).*/TestClearPage\1/' \
  	--regex-c++='/__TESTCLEARFLAG_FALSE\(([^,)]*).*/__TestClearPage\1/' \
  	--regex-c++='/_PE\(([^,)]*).*/PEVENT_ERRNO__\1/'		\
++<<<<<<< HEAD
++=======
+ 	--regex-c++='/TESTPCGFLAG\(([^,)]*).*/PageCgroup\1/'		\
+ 	--regex-c++='/SETPCGFLAG\(([^,)]*).*/SetPageCgroup\1/'		\
+ 	--regex-c++='/CLEARPCGFLAG\(([^,)]*).*/ClearPageCgroup\1/'	\
+ 	--regex-c++='/TESTCLEARPCGFLAG\(([^,)]*).*/TestClearPageCgroup\1/' \
+ 	--regex-c++='/TASK_PFA_TEST\([^,]*,\s*([^)]*)\)/task_\1/'	\
+ 	--regex-c++='/TASK_PFA_SET\([^,]*,\s*([^)]*)\)/task_set_\1/'	\
+ 	--regex-c++='/TASK_PFA_CLEAR\([^,]*,\s*([^)]*)\)/task_clear_\1/'\
++>>>>>>> e0e5070b20e0 (sched: add macros to define bitops for task atomic flags)
  	--regex-c='/PCI_OP_READ\((\w*).*[1-4]\)/pci_bus_read_config_\1/' \
  	--regex-c='/PCI_OP_WRITE\((\w*).*[1-4]\)/pci_bus_write_config_\1/' \
  	--regex-c='/DEFINE_(MUTEX|SEMAPHORE|SPINLOCK)\((\w*)/\2/v/'	\
@@@ -245,9 -259,17 +255,19 @@@ emacs(
  	--regex='/__CLEARPAGEFLAG_NOOP(\([^,)]*\).*/__ClearPage\1/' \
  	--regex='/TESTCLEARFLAG_FALSE(\([^,)]*\).*/TestClearPage\1/' \
  	--regex='/__TESTCLEARFLAG_FALSE(\([^,)]*\).*/__TestClearPage\1/' \
++<<<<<<< HEAD
++=======
+ 	--regex='/TESTPCGFLAG\(([^,)]*).*/PageCgroup\1/'	\
+ 	--regex='/SETPCGFLAG\(([^,)]*).*/SetPageCgroup\1/'	\
+ 	--regex='/CLEARPCGFLAG\(([^,)]*).*/ClearPageCgroup\1/'	\
+ 	--regex='/TESTCLEARPCGFLAG\(([^,)]*).*/TestClearPageCgroup\1/' \
+ 	--regex='/TASK_PFA_TEST\([^,]*,\s*([^)]*)\)/task_\1/'		\
+ 	--regex='/TASK_PFA_SET\([^,]*,\s*([^)]*)\)/task_set_\1/'	\
+ 	--regex='/TASK_PFA_CLEAR\([^,]*,\s*([^)]*)\)/task_clear_\1/'	\
++>>>>>>> e0e5070b20e0 (sched: add macros to define bitops for task atomic flags)
  	--regex='/_PE(\([^,)]*\).*/PEVENT_ERRNO__\1/'		\
  	--regex='/PCI_OP_READ(\([a-z]*[a-z]\).*[1-4])/pci_bus_read_config_\1/' \
 -	--regex='/PCI_OP_WRITE(\([a-z]*[a-z]\).*[1-4])/pci_bus_write_config_\1/'\
 -	--regex='/DEFINE_HASHTABLE\((\w*)/\1/v/'
 +	--regex='/PCI_OP_WRITE(\([a-z]*[a-z]\).*[1-4])/pci_bus_write_config_\1/'
  
  	all_kconfigs | xargs $1 -a                              \
  	--regex='/^[ \t]*\(\(menu\)*config\)[ \t]+\([a-zA-Z0-9_]+\)/\3/'
* Unmerged path include/linux/sched.h
* Unmerged path scripts/tags.sh
