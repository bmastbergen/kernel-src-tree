IB/mlx5: Add support for active_width and active_speed in RoCE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Noa Osherovich <noaos@mellanox.com>
commit f1b65df5a232a2bd39a9b9e48b88a2b87cddef55
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f1b65df5.failed

Add missing calculation and translation of active_width and
active_speed for RoCE.

Fixes: 3f89a643eb295 ('IB/mlx5: Extend query_device/port to ...')
	Signed-off-by: Noa Osherovich <noaos@mellanox.com>
	Signed-off-by: Eran Ben Elisha <eranbe@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit f1b65df5a232a2bd39a9b9e48b88a2b87cddef55)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/hw/mlx5/main.c
diff --cc drivers/infiniband/hw/mlx5/main.c
index 9a7070605698,9f3ba320ce70..000000000000
--- a/drivers/infiniband/hw/mlx5/main.c
+++ b/drivers/infiniband/hw/mlx5/main.c
@@@ -167,15 -166,82 +167,91 @@@ static struct net_device *mlx5_ib_get_n
  	return ndev;
  }
  
++<<<<<<< HEAD
 +static int mlx5_query_port_roce(struct ib_device *device, u8 port_num,
 +				struct ib_port_attr *props)
++=======
+ static int translate_eth_proto_oper(u32 eth_proto_oper, u8 *active_speed,
+ 				    u8 *active_width)
+ {
+ 	switch (eth_proto_oper) {
+ 	case MLX5E_PROT_MASK(MLX5E_1000BASE_CX_SGMII):
+ 	case MLX5E_PROT_MASK(MLX5E_1000BASE_KX):
+ 	case MLX5E_PROT_MASK(MLX5E_100BASE_TX):
+ 	case MLX5E_PROT_MASK(MLX5E_1000BASE_T):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_SDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_T):
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_CX4):
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_KX4):
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_KR):
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_CR):
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_SR):
+ 	case MLX5E_PROT_MASK(MLX5E_10GBASE_ER):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_QDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_25GBASE_CR):
+ 	case MLX5E_PROT_MASK(MLX5E_25GBASE_KR):
+ 	case MLX5E_PROT_MASK(MLX5E_25GBASE_SR):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_EDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_40GBASE_CR4):
+ 	case MLX5E_PROT_MASK(MLX5E_40GBASE_KR4):
+ 	case MLX5E_PROT_MASK(MLX5E_40GBASE_SR4):
+ 	case MLX5E_PROT_MASK(MLX5E_40GBASE_LR4):
+ 		*active_width = IB_WIDTH_4X;
+ 		*active_speed = IB_SPEED_QDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_50GBASE_CR2):
+ 	case MLX5E_PROT_MASK(MLX5E_50GBASE_KR2):
+ 	case MLX5E_PROT_MASK(MLX5E_50GBASE_SR2):
+ 		*active_width = IB_WIDTH_1X;
+ 		*active_speed = IB_SPEED_HDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_56GBASE_R4):
+ 		*active_width = IB_WIDTH_4X;
+ 		*active_speed = IB_SPEED_FDR;
+ 		break;
+ 	case MLX5E_PROT_MASK(MLX5E_100GBASE_CR4):
+ 	case MLX5E_PROT_MASK(MLX5E_100GBASE_SR4):
+ 	case MLX5E_PROT_MASK(MLX5E_100GBASE_KR4):
+ 	case MLX5E_PROT_MASK(MLX5E_100GBASE_LR4):
+ 		*active_width = IB_WIDTH_4X;
+ 		*active_speed = IB_SPEED_EDR;
+ 		break;
+ 	default:
+ 		return -EINVAL;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void mlx5_query_port_roce(struct ib_device *device, u8 port_num,
+ 				 struct ib_port_attr *props)
++>>>>>>> f1b65df5a232 (IB/mlx5: Add support for active_width and active_speed in RoCE)
  {
  	struct mlx5_ib_dev *dev = to_mdev(device);
+ 	struct mlx5_core_dev *mdev = dev->mdev;
  	struct net_device *ndev, *upper;
  	enum ib_mtu ndev_ib_mtu;
  	u16 qkey_viol_cntr;
+ 	u32 eth_prot_oper;
  
++<<<<<<< HEAD
 +	memset(props, 0, sizeof(*props));
++=======
+ 	/* Possible bad flows are checked before filling out props so in case
+ 	 * of an error it will still be zeroed out.
+ 	 */
+ 	if (mlx5_query_port_eth_proto_oper(mdev, &eth_prot_oper, port_num))
+ 		return;
+ 
+ 	translate_eth_proto_oper(eth_prot_oper, &props->active_speed,
+ 				 &props->active_width);
++>>>>>>> f1b65df5a232 (IB/mlx5: Add support for active_width and active_speed in RoCE)
  
  	props->port_cap_flags  |= IB_PORT_CM_SUP;
  	props->port_cap_flags  |= IB_PORT_IP_BASED_GIDS;
@@@ -216,11 -282,6 +292,14 @@@
  	dev_put(ndev);
  
  	props->active_mtu	= min(props->max_mtu, ndev_ib_mtu);
++<<<<<<< HEAD
 +
 +	props->active_width	= IB_WIDTH_4X;  /* TODO */
 +	props->active_speed	= IB_SPEED_QDR; /* TODO */
 +
 +	return 0;
++=======
++>>>>>>> f1b65df5a232 (IB/mlx5: Add support for active_width and active_speed in RoCE)
  }
  
  static void ib_gid_to_mlx5_roce_addr(const union ib_gid *gid,
* Unmerged path drivers/infiniband/hw/mlx5/main.c
