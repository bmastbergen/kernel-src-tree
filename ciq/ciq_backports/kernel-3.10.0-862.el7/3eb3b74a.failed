nfp: provide linking on port structures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 3eb3b74adb701d575d718df1bbffefa2543a302d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3eb3b74a.failed

Add link to nfp_ports to make it possible to iterate over all ports.
This will come in handy when some ports may be representors.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 3eb3b74adb701d575d718df1bbffefa2543a302d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_main.c
#	drivers/net/ethernet/netronome/nfp/nfp_main.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_main.c
#	drivers/net/ethernet/netronome/nfp/nfp_port.c
#	drivers/net/ethernet/netronome/nfp/nfp_port.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_main.c
index 4a3794c9d3f8,bb586ce1ea06..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_main.c
@@@ -339,6 -340,7 +339,10 @@@ static int nfp_pci_probe(struct pci_de
  		err = -ENOMEM;
  		goto err_rel_regions;
  	}
++<<<<<<< HEAD
++=======
+ 	INIT_LIST_HEAD(&pf->vnics);
++>>>>>>> 3eb3b74adb70 (nfp: provide linking on port structures)
  	INIT_LIST_HEAD(&pf->ports);
  	pci_set_drvdata(pdev, pf);
  	pf->pdev = pdev;
diff --cc drivers/net/ethernet/netronome/nfp/nfp_main.h
index 1ac430fbaa18,991c4cba0bbf..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_main.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_main.h
@@@ -66,10 -67,12 +66,17 @@@ struct nfp_eth_table
   * @fw_loaded:		Is the firmware loaded?
   * @eth_tbl:		NSP ETH table
   * @ddir:		Per-device debugfs directory
++<<<<<<< HEAD
 + * @num_ports:		Number of adapter ports
 + * @ports:		Linked list of port structures (struct nfp_net)
 + * @port_lock:		Protects @ports, @num_ports, @num_netdevs
++=======
+  * @max_data_vnics:	Number of data vNICs app firmware supports
+  * @num_vnics:		Number of vNICs spawned
+  * @vnics:		Linked list of vNIC structures (struct nfp_net)
+  * @ports:		Linked list of port structures (struct nfp_port)
++>>>>>>> 3eb3b74adb70 (nfp: provide linking on port structures)
   * @port_refresh_work:	Work entry for taking netdevs out
 - * @lock:		Protects all fields which may change after probe
   */
  struct nfp_pf {
  	struct pci_dev *pdev;
@@@ -91,10 -96,13 +98,17 @@@
  
  	struct dentry *ddir;
  
++<<<<<<< HEAD
 +	unsigned int num_ports;
++=======
+ 	unsigned int max_data_vnics;
+ 	unsigned int num_vnics;
+ 
+ 	struct list_head vnics;
++>>>>>>> 3eb3b74adb70 (nfp: provide linking on port structures)
  	struct list_head ports;
  	struct work_struct port_refresh_work;
 -	struct mutex lock;
 +	struct mutex port_lock;
  };
  
  extern struct pci_driver nfp_netvf_pci_driver;
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index acc8cfe284f3,40ba5775ff79..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@@ -463,63 -546,78 +463,90 @@@ static void nfp_net_refresh_netdevs(str
  {
  	struct nfp_pf *pf = container_of(work, struct nfp_pf,
  					 port_refresh_work);
 -	struct nfp_eth_table *eth_table;
  	struct nfp_net *nn, *next;
+ 	struct nfp_port *port;
  
 -	mutex_lock(&pf->lock);
 +	mutex_lock(&pf->port_lock);
  
  	/* Check for nfp_net_pci_remove() racing against us */
 -	if (list_empty(&pf->vnics))
 +	if (list_empty(&pf->ports))
  		goto out;
  
++<<<<<<< HEAD
 +	list_for_each_entry_safe(nn, next, &pf->ports, port_list) {
 +		if (!nn->eth_port) {
 +			nfp_warn(pf->cpp, "Warning: port not present after reconfig\n");
 +			continue;
 +		}
 +		if (!nn->eth_port->override_changed)
 +			continue;
 +
 +		nn_warn(nn, "Port config changed, unregistering. Reboot required before port will be operational again.\n");
++=======
+ 	/* Update state of all ports */
+ 	rtnl_lock();
+ 	list_for_each_entry(port, &pf->ports, port_list)
+ 		clear_bit(NFP_PORT_CHANGED, &port->flags);
+ 
+ 	eth_table = nfp_eth_read_ports(pf->cpp);
+ 	if (!eth_table) {
+ 		rtnl_unlock();
+ 		nfp_err(pf->cpp, "Error refreshing port config!\n");
+ 		goto out;
+ 	}
+ 
+ 	list_for_each_entry(port, &pf->ports, port_list)
+ 		if (__nfp_port_get_eth_port(port))
+ 			nfp_net_eth_port_update(pf->cpp, port, eth_table);
+ 	rtnl_unlock();
+ 
+ 	kfree(eth_table);
+ 
+ 	/* Shoot off the ports which became invalid */
+ 	list_for_each_entry_safe(nn, next, &pf->vnics, vnic_list) {
+ 		if (!nn->port || nn->port->type != NFP_PORT_INVALID)
+ 			continue;
++>>>>>>> 3eb3b74adb70 (nfp: provide linking on port structures)
  
  		nfp_net_debugfs_dir_clean(&nn->debugfs_dir);
 -		nfp_net_clean(nn);
 +		nfp_net_netdev_clean(nn->dp.netdev);
  
 -		nfp_net_pf_free_vnic(pf, nn);
 +		list_del(&nn->port_list);
 +		pf->num_netdevs--;
 +		nfp_net_netdev_free(nn);
  	}
  
 -	if (list_empty(&pf->vnics))
 +	if (list_empty(&pf->ports))
  		nfp_net_pci_remove_finish(pf);
  out:
 -	mutex_unlock(&pf->lock);
 +	mutex_unlock(&pf->port_lock);
  }
  
 -void nfp_net_refresh_port_table(struct nfp_port *port)
 +void nfp_net_refresh_port_config(struct nfp_net *nn)
  {
 -	struct nfp_pf *pf = port->app->pf;
 +	struct nfp_pf *pf = pci_get_drvdata(nn->pdev);
 +	struct nfp_eth_table *old_table;
  
 -	schedule_work(&pf->port_refresh_work);
 -}
 +	ASSERT_RTNL();
  
 -int nfp_net_refresh_eth_port(struct nfp_port *port)
 -{
 -	struct nfp_cpp *cpp = port->app->cpp;
 -	struct nfp_eth_table *eth_table;
 -	int ret;
 +	old_table = pf->eth_tbl;
  
 -	clear_bit(NFP_PORT_CHANGED, &port->flags);
 +	list_for_each_entry(nn, &pf->ports, port_list)
 +		nfp_net_link_changed_read_clear(nn);
  
 -	eth_table = nfp_eth_read_ports(cpp);
 -	if (!eth_table) {
 -		nfp_err(cpp, "Error refreshing port state table!\n");
 -		return -EIO;
 +	pf->eth_tbl = nfp_eth_read_ports(pf->cpp);
 +	if (!pf->eth_tbl) {
 +		pf->eth_tbl = old_table;
 +		nfp_err(pf->cpp, "Error refreshing port config!\n");
 +		return;
  	}
  
 -	ret = nfp_net_eth_port_update(cpp, port, eth_table);
 +	list_for_each_entry(nn, &pf->ports, port_list)
 +		nn->eth_port = nfp_net_find_port(pf, nn->eth_port->eth_index);
  
 -	kfree(eth_table);
 +	kfree(old_table);
  
 -	return ret;
 +	schedule_work(&pf->port_refresh_work);
  }
  
  /*
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_port.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_port.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_main.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_main.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_main.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_port.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_port.h
