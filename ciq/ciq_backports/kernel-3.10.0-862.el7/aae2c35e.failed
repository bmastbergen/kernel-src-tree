cls_bpf: use tcf_exts_get_net() before call_rcu()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit aae2c35ec89252639a97769fa72dbbf8f1cc3107
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/aae2c35e.failed

Hold netns refcnt before call_rcu() and release it after
the tcf_exts_destroy() is done.

Note, on ->destroy() path we have to respect the return value
of tcf_exts_get_net(), on other paths it should always return
true, so we don't need to care.

	Cc: Lucas Bates <lucasb@mojatatu.com>
	Cc: Jamal Hadi Salim <jhs@mojatatu.com>
	Cc: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit aae2c35ec89252639a97769fa72dbbf8f1cc3107)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_bpf.c
diff --cc net/sched/cls_bpf.c
index c13fb5505297,990eb4d91d54..000000000000
--- a/net/sched/cls_bpf.c
+++ b/net/sched/cls_bpf.c
@@@ -90,12 -246,17 +90,13 @@@ static int cls_bpf_init(struct tcf_prot
  	return 0;
  }
  
 -static void __cls_bpf_delete_prog(struct cls_bpf_prog *prog)
 +static void cls_bpf_delete_prog(struct tcf_proto *tp, struct cls_bpf_prog *prog)
  {
  	tcf_exts_destroy(&prog->exts);
+ 	tcf_exts_put_net(&prog->exts);
  
 -	if (cls_bpf_is_ebpf(prog))
 -		bpf_prog_put(prog->filter);
 -	else
 -		bpf_prog_destroy(prog->filter);
 +	sk_unattached_filter_destroy(prog->filter);
  
 -	kfree(prog->bpf_name);
  	kfree(prog->bpf_ops);
  	kfree(prog);
  }
@@@ -104,16 -274,27 +105,31 @@@ static void __cls_bpf_delete_prog(struc
  {
  	struct cls_bpf_prog *prog = container_of(rcu, struct cls_bpf_prog, rcu);
  
 -	INIT_WORK(&prog->work, cls_bpf_delete_prog_work);
 -	tcf_queue_work(&prog->work);
 +	cls_bpf_delete_prog(prog->tp, prog);
  }
  
 -static void __cls_bpf_delete(struct tcf_proto *tp, struct cls_bpf_prog *prog)
 +static int cls_bpf_delete(struct tcf_proto *tp, unsigned long arg)
  {
 -	cls_bpf_stop_offload(tp, prog);
 +	struct cls_bpf_prog *prog = (struct cls_bpf_prog *) arg;
 +
  	list_del_rcu(&prog->link);
  	tcf_unbind_filter(tp, &prog->res);
++<<<<<<< HEAD
 +	call_rcu(&prog->rcu, __cls_bpf_delete_prog);
++=======
+ 	if (tcf_exts_get_net(&prog->exts))
+ 		call_rcu(&prog->rcu, cls_bpf_delete_prog_rcu);
+ 	else
+ 		__cls_bpf_delete_prog(prog);
+ }
+ 
+ static int cls_bpf_delete(struct tcf_proto *tp, void *arg, bool *last)
+ {
+ 	struct cls_bpf_head *head = rtnl_dereference(tp->root);
+ 
+ 	__cls_bpf_delete(tp, arg);
+ 	*last = list_empty(&head->plist);
++>>>>>>> aae2c35ec892 (cls_bpf: use tcf_exts_get_net() before call_rcu())
  	return 0;
  }
  
@@@ -285,7 -511,17 +301,12 @@@ static int cls_bpf_change(struct net *n
  	if (oldprog) {
  		list_replace_rcu(&oldprog->link, &prog->link);
  		tcf_unbind_filter(tp, &oldprog->res);
++<<<<<<< HEAD
 +		call_rcu(&oldprog->rcu, __cls_bpf_delete_prog);
++=======
+ 		tcf_exts_get_net(&oldprog->exts);
+ 		call_rcu(&oldprog->rcu, cls_bpf_delete_prog_rcu);
++>>>>>>> aae2c35ec892 (cls_bpf: use tcf_exts_get_net() before call_rcu())
  	} else {
  		list_add_rcu(&prog->link, &head->plist);
  	}
* Unmerged path net/sched/cls_bpf.c
