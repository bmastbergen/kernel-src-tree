scsi: qla2xxx: Fix crash due to mismatch mumber of Q-pair creation for Multi queue

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Fix crash due to mismatch mumber of Q-pair creation for Multi queue (Himanshu Madhani) [1460030]
Rebuild_FUZZ: 96.20%
commit-author Sawan Chandak <sawan.chandak@cavium.com>
commit b95b9452aacf80659ea67bf0948cbfa7e28e5e0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b95b9452.failed

when driver is loaded with Multi Queue enabled, it was noticed that
there was one less queue pair created.

Following message would indicate this:

"No resources to create additional q pair."

The result of one less queue pair means that system can crash, if the
block mq layer thinks there is an extra hardware queue available, and
the driver will use a NULL ptr qpair in that instance.

Following stack trace is seen in one of the crash:

irq_create_affinity_masks+0x98/0x530
irq_create_affinity_masks+0x98/0x530
__pci_enable_msix+0x321/0x4e0
mutex_lock+0x12/0x40
pci_alloc_irq_vectors_affinity+0xb5/0x140
qla24xx_enable_msix+0x79/0x530 [qla2xxx]
qla2x00_request_irqs+0x61/0x2d0 [qla2xxx]
qla2x00_probe_one+0xc73/0x2390 [qla2xxx]
ida_simple_get+0x98/0x100
kernfs_next_descendant_post+0x40/0x50
local_pci_probe+0x45/0xa0
pci_device_probe+0xfc/0x140
driver_probe_device+0x2c5/0x470
__driver_attach+0xdd/0xe0
driver_probe_device+0x470/0x470
bus_for_each_dev+0x6c/0xc0
driver_attach+0x1e/0x20
bus_add_driver+0x45/0x270
driver_register+0x60/0xe0
__pci_register_driver+0x4c/0x50
qla2x00_module_init+0x1ce/0x21e [qla2xxx]

	Cc: <stable@vger.kernel.org> # v4.10+
	Signed-off-by: Sawan Chandak <sawan.chandak@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit b95b9452aacf80659ea67bf0948cbfa7e28e5e0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_init.c
diff --cc drivers/scsi/qla2xxx/qla_init.c
index b9189cae77e5,0391fc317003..000000000000
--- a/drivers/scsi/qla2xxx/qla_init.c
+++ b/drivers/scsi/qla2xxx/qla_init.c
@@@ -6655,9 -7541,9 +6655,14 @@@ struct qla_qpair *qla2xxx_create_qpair(
  
  		/* Assign available que pair id */
  		mutex_lock(&ha->mq_lock);
++<<<<<<< HEAD
 +		qpair_id = find_first_zero_bit(ha->qpair_qid_map,
 +				ha->max_qpairs);
 +		if (qpair_id >= ha->max_qpairs) {
++=======
+ 		qpair_id = find_first_zero_bit(ha->qpair_qid_map, ha->max_qpairs);
+ 		if (ha->num_qpairs >= ha->max_qpairs) {
++>>>>>>> b95b9452aacf (scsi: qla2xxx: Fix crash due to mismatch mumber of Q-pair creation for Multi queue)
  			mutex_unlock(&ha->mq_lock);
  			ql_log(ql_log_warn, vha, 0x0183,
  			    "No resources to create additional q pair.\n");
@@@ -6796,13 -7662,8 +6803,14 @@@ int qla2xxx_delete_qpair(struct scsi_ql
  	mutex_lock(&ha->mq_lock);
  	ha->queue_pair_map[qpair->id] = NULL;
  	clear_bit(qpair->id, ha->qpair_qid_map);
+ 	ha->num_qpairs--;
  	list_del(&qpair->qp_list_elem);
 +	for_each_cpu(cpu_id, &qpair->cpu_mask) {
 +		hint = per_cpu_ptr(vha->qps_hint, cpu_id);
 +		hint->change_in_progress = 1;
 +		hint->qp = NULL;
 +		hint->change_in_progress = 0;
 +	}
  	if (list_empty(&vha->qp_list))
  		vha->flags.qpairs_available = 0;
  	mempool_destroy(qpair->srb_mempool);
diff --git a/drivers/scsi/qla2xxx/qla_def.h b/drivers/scsi/qla2xxx/qla_def.h
index 3f28536dc812..8a65f33be8a4 100644
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@ -3065,6 +3065,7 @@ struct qla_hw_data {
 	uint8_t 	max_req_queues;
 	uint8_t 	max_rsp_queues;
 	uint8_t		max_qpairs;
+	uint8_t		num_qpairs;
 	struct qla_qpair *base_qpair;
 	struct qla_npiv_entry *npiv_info;
 	uint16_t	nvram_npiv_size;
* Unmerged path drivers/scsi/qla2xxx/qla_init.c
