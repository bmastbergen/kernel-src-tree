mlxsw: spectrum_acl: Provide helper to lookup ruleset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jiri Pirko <jiri@mellanox.com>
commit dbec8ee95ab3ed231cba59f452531d6ce01fe24f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/dbec8ee9.failed

We need to lookup ruleset in order to offload goto_chain termination
action. This patch adds it.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit dbec8ee95ab3ed231cba59f452531d6ce01fe24f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.h
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.h
index 94b899707d67,f8c7f7e930c5..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@@ -577,9 -438,15 +577,18 @@@ struct mlxsw_sp_acl_ops 
  
  struct mlxsw_sp_acl_ruleset;
  
 -/* spectrum_acl.c */
 -struct mlxsw_afk *mlxsw_sp_acl_afk(struct mlxsw_sp_acl *acl);
  struct mlxsw_sp_acl_ruleset *
++<<<<<<< HEAD
 +mlxsw_sp_acl_ruleset_get(struct mlxsw_sp *mlxsw_sp,
 +			 struct net_device *dev, bool ingress,
++=======
+ mlxsw_sp_acl_ruleset_lookup(struct mlxsw_sp *mlxsw_sp, struct net_device *dev,
+ 			    bool ingress, u32 chain_index,
+ 			    enum mlxsw_sp_acl_profile profile);
+ struct mlxsw_sp_acl_ruleset *
+ mlxsw_sp_acl_ruleset_get(struct mlxsw_sp *mlxsw_sp, struct net_device *dev,
+ 			 bool ingress, u32 chain_index,
++>>>>>>> dbec8ee95ab3 (mlxsw: spectrum_acl: Provide helper to lookup ruleset)
  			 enum mlxsw_sp_acl_profile profile);
  void mlxsw_sp_acl_ruleset_put(struct mlxsw_sp *mlxsw_sp,
  			      struct mlxsw_sp_acl_ruleset *ruleset);
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
index 1391e73029f2,4b2455e3e079..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
@@@ -203,9 -221,44 +203,44 @@@ static void mlxsw_sp_acl_ruleset_ref_de
  	mlxsw_sp_acl_ruleset_destroy(mlxsw_sp, ruleset);
  }
  
+ static struct mlxsw_sp_acl_ruleset *
+ __mlxsw_sp_acl_ruleset_lookup(struct mlxsw_sp_acl *acl, struct net_device *dev,
+ 			      bool ingress, u32 chain_index,
+ 			      const struct mlxsw_sp_acl_profile_ops *ops)
+ {
+ 	struct mlxsw_sp_acl_ruleset_ht_key ht_key;
+ 
+ 	memset(&ht_key, 0, sizeof(ht_key));
+ 	ht_key.dev = dev;
+ 	ht_key.ingress = ingress;
+ 	ht_key.chain_index = chain_index;
+ 	ht_key.ops = ops;
+ 	return rhashtable_lookup_fast(&acl->ruleset_ht, &ht_key,
+ 				      mlxsw_sp_acl_ruleset_ht_params);
+ }
+ 
+ struct mlxsw_sp_acl_ruleset *
+ mlxsw_sp_acl_ruleset_lookup(struct mlxsw_sp *mlxsw_sp, struct net_device *dev,
+ 			    bool ingress, u32 chain_index,
+ 			    enum mlxsw_sp_acl_profile profile)
+ {
+ 	const struct mlxsw_sp_acl_profile_ops *ops;
+ 	struct mlxsw_sp_acl *acl = mlxsw_sp->acl;
+ 	struct mlxsw_sp_acl_ruleset *ruleset;
+ 
+ 	ops = acl->ops->profile_ops(mlxsw_sp, profile);
+ 	if (!ops)
+ 		return ERR_PTR(-EINVAL);
+ 	ruleset = __mlxsw_sp_acl_ruleset_lookup(acl, dev, ingress,
+ 						chain_index, ops);
+ 	if (!ruleset)
+ 		return ERR_PTR(-ENOENT);
+ 	return ruleset;
+ }
+ 
  struct mlxsw_sp_acl_ruleset *
 -mlxsw_sp_acl_ruleset_get(struct mlxsw_sp *mlxsw_sp, struct net_device *dev,
 -			 bool ingress, u32 chain_index,
 +mlxsw_sp_acl_ruleset_get(struct mlxsw_sp *mlxsw_sp,
 +			 struct net_device *dev, bool ingress,
  			 enum mlxsw_sp_acl_profile profile)
  {
  	const struct mlxsw_sp_acl_profile_ops *ops;
@@@ -218,12 -270,8 +252,17 @@@
  	if (!ops)
  		return ERR_PTR(-EINVAL);
  
++<<<<<<< HEAD
 +	memset(&ht_key, 0, sizeof(ht_key));
 +	ht_key.dev = dev;
 +	ht_key.ingress = ingress;
 +	ht_key.ops = ops;
 +	ruleset = rhashtable_lookup_fast(&acl->ruleset_ht, &ht_key,
 +					 mlxsw_sp_acl_ruleset_ht_params);
++=======
+ 	ruleset = __mlxsw_sp_acl_ruleset_lookup(acl, dev, ingress,
+ 						chain_index, ops);
++>>>>>>> dbec8ee95ab3 (mlxsw: spectrum_acl: Provide helper to lookup ruleset)
  	if (ruleset) {
  		mlxsw_sp_acl_ruleset_ref_inc(ruleset);
  		return ruleset;
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c
