scsi: lpfc: Fix vports not logging into target

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] lpfc: Fix vports not logging into target (Dick Kennedy) [1385844 1461977 1387768]
Rebuild_FUZZ: 93.02%
commit-author James Smart <jsmart2021@gmail.com>
commit b57ab7469d2643ef1ff1fc5d82f5db22af60fc46
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b57ab746.failed

vports cannot login to target.

For vports, lpfc_nodelist is allocated for targets only on completion of
GFF_ID command. Driver checks if lpfc_nodelist exists for target before
sending GFF_ID. So, GFF_ID and PLOGI are not sent.

As mentioned by the comment in lpfc_prep_node_fc4type() routine, do not
send GFF_ID only if this NPortID is previously identified as FCP
target. Send GFF_ID if it is a newly identified remote port from GID_FT
response.

	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <james.smart@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit b57ab7469d2643ef1ff1fc5d82f5db22af60fc46)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_ct.c
diff --cc drivers/scsi/lpfc/lpfc_ct.c
index 17226d4467be,9c0c1463057d..000000000000
--- a/drivers/scsi/lpfc/lpfc_ct.c
+++ b/drivers/scsi/lpfc/lpfc_ct.c
@@@ -453,13 -456,124 +453,128 @@@ lpfc_find_vport_by_did(struct lpfc_hba 
  	return NULL;
  }
  
++<<<<<<< HEAD
++=======
+ static void
+ lpfc_prep_node_fc4type(struct lpfc_vport *vport, uint32_t Did, uint8_t fc4_type)
+ {
+ 	struct lpfc_nodelist *ndlp;
+ 
+ 	if ((vport->port_type != LPFC_NPIV_PORT) ||
+ 	    !(vport->ct_flags & FC_CT_RFF_ID) || !vport->cfg_restrict_login) {
+ 
+ 		ndlp = lpfc_setup_disc_node(vport, Did);
+ 
+ 		if (ndlp && NLP_CHK_NODE_ACT(ndlp)) {
+ 			lpfc_debugfs_disc_trc(vport, LPFC_DISC_TRC_CT,
+ 				"Parse GID_FTrsp: did:x%x flg:x%x x%x",
+ 				Did, ndlp->nlp_flag, vport->fc_flag);
+ 
+ 			/* By default, the driver expects to support FCP FC4 */
+ 			if (fc4_type == FC_TYPE_FCP)
+ 				ndlp->nlp_fc4_type |= NLP_FC4_FCP;
+ 
+ 			if (fc4_type == FC_TYPE_NVME)
+ 				ndlp->nlp_fc4_type |= NLP_FC4_NVME;
+ 
+ 			lpfc_printf_vlog(vport, KERN_INFO, LOG_DISCOVERY,
+ 					 "0238 Process x%06x NameServer Rsp "
+ 					 "Data: x%x x%x x%x x%x\n", Did,
+ 					 ndlp->nlp_flag, ndlp->nlp_fc4_type,
+ 					 vport->fc_flag,
+ 					 vport->fc_rscn_id_cnt);
+ 		} else {
+ 			lpfc_debugfs_disc_trc(vport, LPFC_DISC_TRC_CT,
+ 				"Skip1 GID_FTrsp: did:x%x flg:x%x cnt:%d",
+ 				Did, vport->fc_flag, vport->fc_rscn_id_cnt);
+ 
+ 			lpfc_printf_vlog(vport, KERN_INFO, LOG_DISCOVERY,
+ 					 "0239 Skip x%06x NameServer Rsp "
+ 					 "Data: x%x x%x\n", Did,
+ 					 vport->fc_flag,
+ 					 vport->fc_rscn_id_cnt);
+ 		}
+ 	} else {
+ 		if (!(vport->fc_flag & FC_RSCN_MODE) ||
+ 		    lpfc_rscn_payload_check(vport, Did)) {
+ 			lpfc_debugfs_disc_trc(vport, LPFC_DISC_TRC_CT,
+ 				"Query GID_FTrsp: did:x%x flg:x%x cnt:%d",
+ 				Did, vport->fc_flag, vport->fc_rscn_id_cnt);
+ 
+ 			/*
+ 			 * This NPortID was previously a FCP/NVMe target,
+ 			 * Don't even bother to send GFF_ID.
+ 			 */
+ 			ndlp = lpfc_findnode_did(vport, Did);
+ 			if (ndlp && NLP_CHK_NODE_ACT(ndlp) &&
+ 			    (ndlp->nlp_type &
+ 			    (NLP_FCP_TARGET | NLP_NVME_TARGET))) {
+ 				if (fc4_type == FC_TYPE_FCP)
+ 					ndlp->nlp_fc4_type |= NLP_FC4_FCP;
+ 				if (fc4_type == FC_TYPE_NVME)
+ 					ndlp->nlp_fc4_type |= NLP_FC4_NVME;
+ 				lpfc_setup_disc_node(vport, Did);
+ 			} else if (lpfc_ns_cmd(vport, SLI_CTNS_GFF_ID,
+ 				   0, Did) == 0)
+ 				vport->num_disc_nodes++;
+ 			else
+ 				lpfc_setup_disc_node(vport, Did);
+ 		} else {
+ 			lpfc_debugfs_disc_trc(vport, LPFC_DISC_TRC_CT,
+ 				"Skip2 GID_FTrsp: did:x%x flg:x%x cnt:%d",
+ 				Did, vport->fc_flag, vport->fc_rscn_id_cnt);
+ 
+ 			lpfc_printf_vlog(vport, KERN_INFO, LOG_DISCOVERY,
+ 					 "0245 Skip x%06x NameServer Rsp "
+ 					 "Data: x%x x%x\n", Did,
+ 					 vport->fc_flag,
+ 					 vport->fc_rscn_id_cnt);
+ 		}
+ 	}
+ }
+ 
+ static void
+ lpfc_ns_rsp_audit_did(struct lpfc_vport *vport, uint32_t Did, uint8_t fc4_type)
+ {
+ 	struct lpfc_hba *phba = vport->phba;
+ 	struct lpfc_nodelist *ndlp = NULL;
+ 	struct Scsi_Host *shost = lpfc_shost_from_vport(vport);
+ 
+ 	/*
+ 	 * To conserve rpi's, filter out addresses for other
+ 	 * vports on the same physical HBAs.
+ 	 */
+ 	if (Did != vport->fc_myDID &&
+ 	    (!lpfc_find_vport_by_did(phba, Did) ||
+ 	     vport->cfg_peer_port_login)) {
+ 		if (!phba->nvmet_support) {
+ 			/* FCPI/NVMEI path. Process Did */
+ 			lpfc_prep_node_fc4type(vport, Did, fc4_type);
+ 			return;
+ 		}
+ 		/* NVMET path.  NVMET only cares about NVMEI nodes. */
+ 		list_for_each_entry(ndlp, &vport->fc_nodes, nlp_listp) {
+ 			if (ndlp->nlp_type != NLP_NVME_INITIATOR ||
+ 			    ndlp->nlp_state != NLP_STE_UNMAPPED_NODE)
+ 				continue;
+ 			spin_lock_irq(shost->host_lock);
+ 			if (ndlp->nlp_DID == Did)
+ 				ndlp->nlp_flag &= ~NLP_NVMET_RECOV;
+ 			else
+ 				ndlp->nlp_flag |= NLP_NVMET_RECOV;
+ 			spin_unlock_irq(shost->host_lock);
+ 		}
+ 	}
+ }
+ 
++>>>>>>> b57ab7469d26 (scsi: lpfc: Fix vports not logging into target)
  static int
 -lpfc_ns_rsp(struct lpfc_vport *vport, struct lpfc_dmabuf *mp, uint8_t fc4_type,
 -	    uint32_t Size)
 +lpfc_ns_rsp(struct lpfc_vport *vport, struct lpfc_dmabuf *mp, uint32_t Size)
  {
 +	struct lpfc_hba  *phba = vport->phba;
  	struct lpfc_sli_ct_request *Response =
  		(struct lpfc_sli_ct_request *) mp->virt;
 +	struct lpfc_nodelist *ndlp = NULL;
  	struct lpfc_dmabuf *mlast, *next_mp;
  	uint32_t *ctptr = (uint32_t *) & Response->un.gid.PortType;
  	uint32_t Did, CTentry;
* Unmerged path drivers/scsi/lpfc/lpfc_ct.c
