tools/power turbostat: hide SKL counters, when not requested

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [tools] power turbostat: hide SKL counters, when not requested (Prarit Bhargava) [1514290]
Rebuild_FUZZ: 94.74%
commit-author Len Brown <len.brown@intel.com>
commit a99d87306f83d2a97c8c7e854b6583c4037ecf75
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a99d8730.failed

Skylake has some new counters, and they were erroneously
exempt  from --show and --hide

eg.

turbostat  --quiet --show CPU
CPU	Totl%C0	Any%C0	GFX%C0	CPUGFX%
-	116.73	90.56	85.69	79.00
0	117.78	91.38	86.47	79.71
2
1
3

is now

CPU
-
0
2
1
3

	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit a99d87306f83d2a97c8c7e854b6583c4037ecf75)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index fc47becd6ab4,2b25727bd3d7..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -374,8 -381,16 +373,19 @@@ struct msr_counter bic[] = 
  	{ 0x0, "RAM_J" },
  	{ 0x0, "Core" },
  	{ 0x0, "CPU" },
++<<<<<<< HEAD
++=======
+ 	{ 0x0, "Mod%c6" },
+ 	{ 0x0, "sysfs" },
+ 	{ 0x0, "Totl%C0" },
+ 	{ 0x0, "Any%C0" },
+ 	{ 0x0, "GFX%C0" },
+ 	{ 0x0, "CPUGFX%" },
++>>>>>>> a99d87306f83 (tools/power turbostat: hide SKL counters, when not requested)
  };
  
+ 
+ 
  #define MAX_BIC (sizeof(bic) / sizeof(struct msr_counter))
  #define	BIC_Package	(1ULL << 0)
  #define	BIC_Avg_MHz	(1ULL << 1)
@@@ -414,9 -429,15 +424,18 @@@
  #define	BIC_RAM_J	(1ULL << 34)
  #define	BIC_Core	(1ULL << 35)
  #define	BIC_CPU		(1ULL << 36)
++<<<<<<< HEAD
++=======
+ #define	BIC_Mod_c6	(1ULL << 37)
+ #define	BIC_sysfs	(1ULL << 38)
+ #define	BIC_Totl_c0	(1ULL << 39)
+ #define	BIC_Any_c0	(1ULL << 40)
+ #define	BIC_GFX_c0	(1ULL << 41)
+ #define	BIC_CPUGFX	(1ULL << 42)
++>>>>>>> a99d87306f83 (tools/power turbostat: hide SKL counters, when not requested)
  
  unsigned long long bic_enabled = 0xFFFFFFFFFFFFFFFFULL;
 -unsigned long long bic_present = BIC_sysfs;
 +unsigned long long bic_present;
  
  #define DO_BIC(COUNTER_NAME) (bic_enabled & bic_present & COUNTER_NAME)
  #define BIC_PRESENT(COUNTER_BIT) (bic_present |= COUNTER_BIT)
@@@ -520,35 -600,37 +539,46 @@@ void print_header(void
  	}
  
  	if (DO_BIC(BIC_PkgTmp))
 -		outp += sprintf(outp, "%sPkgTmp", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPkgTmp");
  
  	if (DO_BIC(BIC_GFX_rc6))
 -		outp += sprintf(outp, "%sGFX%%rc6", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tGFX%%rc6");
  
  	if (DO_BIC(BIC_GFXMHz))
 -		outp += sprintf(outp, "%sGFXMHz", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tGFXMHz");
  
++<<<<<<< HEAD
 +	if (do_skl_residency) {
 +		outp += sprintf(outp, "\tTotl%%C0");
 +		outp += sprintf(outp, "\tAny%%C0");
 +		outp += sprintf(outp, "\tGFX%%C0");
 +		outp += sprintf(outp, "\tCPUGFX%%");
 +	}
++=======
+ 	if (DO_BIC(BIC_Totl_c0))
+ 		outp += sprintf(outp, "%sTotl%%C0", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_Any_c0))
+ 		outp += sprintf(outp, "%sAny%%C0", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_GFX_c0))
+ 		outp += sprintf(outp, "%sGFX%%C0", (printed++ ? delim : ""));
+ 	if (DO_BIC(BIC_CPUGFX))
+ 		outp += sprintf(outp, "%sCPUGFX%%", (printed++ ? delim : ""));
++>>>>>>> a99d87306f83 (tools/power turbostat: hide SKL counters, when not requested)
  
  	if (DO_BIC(BIC_Pkgpc2))
 -		outp += sprintf(outp, "%sPkg%%pc2", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPkg%%pc2");
  	if (DO_BIC(BIC_Pkgpc3))
 -		outp += sprintf(outp, "%sPkg%%pc3", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPkg%%pc3");
  	if (DO_BIC(BIC_Pkgpc6))
 -		outp += sprintf(outp, "%sPkg%%pc6", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPkg%%pc6");
  	if (DO_BIC(BIC_Pkgpc7))
 -		outp += sprintf(outp, "%sPkg%%pc7", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPkg%%pc7");
  	if (DO_BIC(BIC_Pkgpc8))
 -		outp += sprintf(outp, "%sPkg%%pc8", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPkg%%pc8");
  	if (DO_BIC(BIC_Pkgpc9))
 -		outp += sprintf(outp, "%sPkg%%pc9", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPkg%%pc9");
  	if (DO_BIC(BIC_Pkgpc10))
 -		outp += sprintf(outp, "%sPk%%pc10", (printed++ ? delim : ""));
 +		outp += sprintf(outp, "\tPk%%pc10");
  
  	if (do_rapl && !rapl_joules) {
  		if (DO_BIC(BIC_PkgWatt))
@@@ -806,30 -920,32 +836,41 @@@ int format_counters(struct thread_data 
  
  	/* GFXMHz */
  	if (DO_BIC(BIC_GFXMHz))
 -		outp += sprintf(outp, "%s%d", (printed++ ? delim : ""), p->gfx_mhz);
 +		outp += sprintf(outp, "\t%d", p->gfx_mhz);
  
  	/* Totl%C0, Any%C0 GFX%C0 CPUGFX% */
++<<<<<<< HEAD
 +	if (do_skl_residency) {
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_wtd_core_c0/t->tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_core_c0/t->tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_gfxe_c0/t->tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_both_core_gfxe_c0/t->tsc);
 +	}
++=======
+ 	if (DO_BIC(BIC_Totl_c0))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_wtd_core_c0/tsc);
+ 	if (DO_BIC(BIC_Any_c0))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_any_core_c0/tsc);
+ 	if (DO_BIC(BIC_GFX_c0))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_any_gfxe_c0/tsc);
+ 	if (DO_BIC(BIC_CPUGFX))
+ 		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pkg_both_core_gfxe_c0/tsc);
++>>>>>>> a99d87306f83 (tools/power turbostat: hide SKL counters, when not requested)
  
  	if (DO_BIC(BIC_Pkgpc2))
 -		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc2/tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc2/t->tsc);
  	if (DO_BIC(BIC_Pkgpc3))
 -		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc3/tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc3/t->tsc);
  	if (DO_BIC(BIC_Pkgpc6))
 -		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc6/tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc6/t->tsc);
  	if (DO_BIC(BIC_Pkgpc7))
 -		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc7/tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc7/t->tsc);
  	if (DO_BIC(BIC_Pkgpc8))
 -		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc8/tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc8/t->tsc);
  	if (DO_BIC(BIC_Pkgpc9))
 -		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc9/tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc9/t->tsc);
  	if (DO_BIC(BIC_Pkgpc10))
 -		outp += sprintf(outp, "%s%.2f", (printed++ ? delim : ""), 100.0 * p->pc10/tsc);
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc10/t->tsc);
  
  	/*
   	 * If measurement interval exceeds minimum RAPL Joule Counter range,
@@@ -1243,13 -1371,19 +1290,15 @@@ void compute_average(struct thread_dat
  	average.cores.c3 /= topo.num_cores;
  	average.cores.c6 /= topo.num_cores;
  	average.cores.c7 /= topo.num_cores;
 -	average.cores.mc6_us /= topo.num_cores;
  
- 	if (do_skl_residency) {
+ 	if (DO_BIC(BIC_Totl_c0))
  		average.packages.pkg_wtd_core_c0 /= topo.num_packages;
+ 	if (DO_BIC(BIC_Any_c0))
  		average.packages.pkg_any_core_c0 /= topo.num_packages;
+ 	if (DO_BIC(BIC_GFX_c0))
  		average.packages.pkg_any_gfxe_c0 /= topo.num_packages;
+ 	if (DO_BIC(BIC_CPUGFX))
  		average.packages.pkg_both_core_gfxe_c0 /= topo.num_packages;
- 	}
  
  	average.packages.pc2 /= topo.num_packages;
  	if (DO_BIC(BIC_Pkgpc3))
* Unmerged path tools/power/x86/turbostat/turbostat.c
