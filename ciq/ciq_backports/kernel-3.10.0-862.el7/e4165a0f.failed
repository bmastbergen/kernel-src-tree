vmbus: constify parameters where possible

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Stephen Hemminger <stephen@networkplumber.org>
commit e4165a0fad0963bf8b4a59f54d3360ccb6a6d1ea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e4165a0f.failed

Functions that just query state of ring buffer can have parameters
marked const.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit e4165a0fad0963bf8b4a59f54d3360ccb6a6d1ea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/hyperv_vmbus.h
#	drivers/hv/ring_buffer.c
diff --cc drivers/hv/hyperv_vmbus.h
index c92ad5535c23,884f83bba1ab..000000000000
--- a/drivers/hv/hyperv_vmbus.h
+++ b/drivers/hv/hyperv_vmbus.h
@@@ -481,20 -283,15 +481,24 @@@ int hv_ringbuffer_init(struct hv_ring_b
  void hv_ringbuffer_cleanup(struct hv_ring_buffer_info *ring_info);
  
  int hv_ringbuffer_write(struct vmbus_channel *channel,
++<<<<<<< HEAD
 +			struct kvec *kv_list,
 +			u32 kv_count, bool lock);
++=======
+ 			const struct kvec *kv_list, u32 kv_count);
++>>>>>>> e4165a0fad09 (vmbus: constify parameters where possible)
  
  int hv_ringbuffer_read(struct vmbus_channel *channel,
  		       void *buffer, u32 buflen, u32 *buffer_actual_len,
  		       u64 *requestid, bool raw);
  
- void hv_ringbuffer_get_debuginfo(struct hv_ring_buffer_info *ring_info,
- 			    struct hv_ring_buffer_debug_info *debug_info);
+ void hv_ringbuffer_get_debuginfo(const struct hv_ring_buffer_info *ring_info,
+ 				 struct hv_ring_buffer_debug_info *debug_info);
  
 +void hv_begin_read(struct hv_ring_buffer_info *rbi);
 +
 +u32 hv_end_read(struct hv_ring_buffer_info *rbi);
 +
  /*
   * Maximum channels is determined by the size of the interrupt page
   * which is PAGE_SIZE. 1/2 of PAGE_SIZE is for send endpoint interrupt
diff --cc drivers/hv/ring_buffer.c
index f549e81b014a,490e9ea098e6..000000000000
--- a/drivers/hv/ring_buffer.c
+++ b/drivers/hv/ring_buffer.c
@@@ -284,7 -262,7 +282,11 @@@ void hv_ringbuffer_cleanup(struct hv_ri
  
  /* Write to the ring buffer. */
  int hv_ringbuffer_write(struct vmbus_channel *channel,
++<<<<<<< HEAD
 +			struct kvec *kv_list, u32 kv_count, bool lock)
++=======
+ 			const struct kvec *kv_list, u32 kv_count)
++>>>>>>> e4165a0fad09 (vmbus: constify parameters where possible)
  {
  	int i = 0;
  	u32 bytes_avail_towrite;
* Unmerged path drivers/hv/hyperv_vmbus.h
* Unmerged path drivers/hv/ring_buffer.c
diff --git a/include/linux/hyperv.h b/include/linux/hyperv.h
index 2d127a5ad611..7406a8f8d80d 100644
--- a/include/linux/hyperv.h
+++ b/include/linux/hyperv.h
@@ -138,8 +138,8 @@ struct hv_ring_buffer_info {
  * for the specified ring buffer
  */
 static inline void
-hv_get_ringbuffer_availbytes(struct hv_ring_buffer_info *rbi,
-			  u32 *read, u32 *write)
+hv_get_ringbuffer_availbytes(const struct hv_ring_buffer_info *rbi,
+			     u32 *read, u32 *write)
 {
 	u32 read_loc, write_loc, dsize;
 
@@ -153,7 +153,7 @@ hv_get_ringbuffer_availbytes(struct hv_ring_buffer_info *rbi,
 	*read = dsize - *write;
 }
 
-static inline u32 hv_get_bytes_to_read(struct hv_ring_buffer_info *rbi)
+static inline u32 hv_get_bytes_to_read(const struct hv_ring_buffer_info *rbi)
 {
 	u32 read_loc, write_loc, dsize, read;
 
@@ -167,7 +167,7 @@ static inline u32 hv_get_bytes_to_read(struct hv_ring_buffer_info *rbi)
 	return read;
 }
 
-static inline u32 hv_get_bytes_to_write(struct hv_ring_buffer_info *rbi)
+static inline u32 hv_get_bytes_to_write(const struct hv_ring_buffer_info *rbi)
 {
 	u32 read_loc, write_loc, dsize, write;
 
@@ -1489,9 +1489,9 @@ void vmbus_set_event(struct vmbus_channel *channel);
 
 /* Get the start of the ring buffer. */
 static inline void *
-hv_get_ring_buffer(struct hv_ring_buffer_info *ring_info)
+hv_get_ring_buffer(const struct hv_ring_buffer_info *ring_info)
 {
-	return (void *)ring_info->ring_buffer->buffer;
+	return ring_info->ring_buffer->buffer;
 }
 
 /*
