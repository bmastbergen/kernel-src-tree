dma-mapping: introduce the DMA_ATTR_NO_WARN attribute

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
commit a9a62c9384417545620aee1b5ad1d9357350c17a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a9a62c93.failed

Introduce the DMA_ATTR_NO_WARN attribute, and document it.

Link: http://lkml.kernel.org/r/1470092390-25451-2-git-send-email-mauricfo@linux.vnet.ibm.com
	Signed-off-by: Mauricio Faria de Oliveira <mauricfo@linux.vnet.ibm.com>
	Cc: Keith Busch <keith.busch@intel.com>
	Cc: Jens Axboe <axboe@fb.com>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Krzysztof Kozlowski <k.kozlowski@samsung.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a9a62c9384417545620aee1b5ad1d9357350c17a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/DMA-attributes.txt
#	include/linux/dma-mapping.h
diff --cc Documentation/DMA-attributes.txt
index e59480db9ee0,98bf7ac29aad..000000000000
--- a/Documentation/DMA-attributes.txt
+++ b/Documentation/DMA-attributes.txt
@@@ -98,5 -98,48 +98,51 @@@ DMA_ATTR_FORCE_CONTIGUOU
  By default DMA-mapping subsystem is allowed to assemble the buffer
  allocated by dma_alloc_attrs() function from individual pages if it can
  be mapped as contiguous chunk into device dma address space. By
 -specifying this attribute the allocated buffer is forced to be contiguous
 +specifing this attribute the allocated buffer is forced to be contiguous
  also in physical memory.
++<<<<<<< HEAD
++=======
+ 
+ DMA_ATTR_ALLOC_SINGLE_PAGES
+ ---------------------------
+ 
+ This is a hint to the DMA-mapping subsystem that it's probably not worth
+ the time to try to allocate memory to in a way that gives better TLB
+ efficiency (AKA it's not worth trying to build the mapping out of larger
+ pages).  You might want to specify this if:
+ - You know that the accesses to this memory won't thrash the TLB.
+   You might know that the accesses are likely to be sequential or
+   that they aren't sequential but it's unlikely you'll ping-pong
+   between many addresses that are likely to be in different physical
+   pages.
+ - You know that the penalty of TLB misses while accessing the
+   memory will be small enough to be inconsequential.  If you are
+   doing a heavy operation like decryption or decompression this
+   might be the case.
+ - You know that the DMA mapping is fairly transitory.  If you expect
+   the mapping to have a short lifetime then it may be worth it to
+   optimize allocation (avoid coming up with large pages) instead of
+   getting the slight performance win of larger pages.
+ Setting this hint doesn't guarantee that you won't get huge pages, but it
+ means that we won't try quite as hard to get them.
+ 
+ NOTE: At the moment DMA_ATTR_ALLOC_SINGLE_PAGES is only implemented on ARM,
+ though ARM64 patches will likely be posted soon.
+ 
+ DMA_ATTR_NO_WARN
+ ----------------
+ 
+ This tells the DMA-mapping subsystem to suppress allocation failure reports
+ (similarly to __GFP_NOWARN).
+ 
+ On some architectures allocation failures are reported with error messages
+ to the system logs.  Although this can help to identify and debug problems,
+ drivers which handle failures (eg, retry later) have no problems with them,
+ and can actually flood the system logs with error messages that aren't any
+ problem at all, depending on the implementation of the retry mechanism.
+ 
+ So, this provides a way for drivers to avoid those error messages on calls
+ where allocation failures are not a problem, and shouldn't bother the logs.
+ 
+ NOTE: At the moment DMA_ATTR_NO_WARN is only implemented on PowerPC.
++>>>>>>> a9a62c938441 (dma-mapping: introduce the DMA_ATTR_NO_WARN attribute)
diff --cc include/linux/dma-mapping.h
index fe4bb5f6dd29,08528afdf58b..000000000000
--- a/include/linux/dma-mapping.h
+++ b/include/linux/dma-mapping.h
@@@ -5,9 -5,62 +5,65 @@@
  #include <linux/string.h>
  #include <linux/device.h>
  #include <linux/err.h>
 -#include <linux/dma-debug.h>
 +#include <linux/dma-attrs.h>
  #include <linux/dma-direction.h>
  #include <linux/scatterlist.h>
++<<<<<<< HEAD
++=======
+ #include <linux/kmemcheck.h>
+ #include <linux/bug.h>
+ 
+ /**
+  * List of possible attributes associated with a DMA mapping. The semantics
+  * of each attribute should be defined in Documentation/DMA-attributes.txt.
+  *
+  * DMA_ATTR_WRITE_BARRIER: DMA to a memory region with this attribute
+  * forces all pending DMA writes to complete.
+  */
+ #define DMA_ATTR_WRITE_BARRIER		(1UL << 0)
+ /*
+  * DMA_ATTR_WEAK_ORDERING: Specifies that reads and writes to the mapping
+  * may be weakly ordered, that is that reads and writes may pass each other.
+  */
+ #define DMA_ATTR_WEAK_ORDERING		(1UL << 1)
+ /*
+  * DMA_ATTR_WRITE_COMBINE: Specifies that writes to the mapping may be
+  * buffered to improve performance.
+  */
+ #define DMA_ATTR_WRITE_COMBINE		(1UL << 2)
+ /*
+  * DMA_ATTR_NON_CONSISTENT: Lets the platform to choose to return either
+  * consistent or non-consistent memory as it sees fit.
+  */
+ #define DMA_ATTR_NON_CONSISTENT		(1UL << 3)
+ /*
+  * DMA_ATTR_NO_KERNEL_MAPPING: Lets the platform to avoid creating a kernel
+  * virtual mapping for the allocated buffer.
+  */
+ #define DMA_ATTR_NO_KERNEL_MAPPING	(1UL << 4)
+ /*
+  * DMA_ATTR_SKIP_CPU_SYNC: Allows platform code to skip synchronization of
+  * the CPU cache for the given buffer assuming that it has been already
+  * transferred to 'device' domain.
+  */
+ #define DMA_ATTR_SKIP_CPU_SYNC		(1UL << 5)
+ /*
+  * DMA_ATTR_FORCE_CONTIGUOUS: Forces contiguous allocation of the buffer
+  * in physical memory.
+  */
+ #define DMA_ATTR_FORCE_CONTIGUOUS	(1UL << 6)
+ /*
+  * DMA_ATTR_ALLOC_SINGLE_PAGES: This is a hint to the DMA-mapping subsystem
+  * that it's probably not worth the time to try to allocate memory to in a way
+  * that gives better TLB efficiency.
+  */
+ #define DMA_ATTR_ALLOC_SINGLE_PAGES	(1UL << 7)
+ /*
+  * DMA_ATTR_NO_WARN: This tells the DMA-mapping subsystem to suppress
+  * allocation failure reports (similarly to __GFP_NOWARN).
+  */
+ #define DMA_ATTR_NO_WARN	(1UL << 8)
++>>>>>>> a9a62c938441 (dma-mapping: introduce the DMA_ATTR_NO_WARN attribute)
  
  /*
   * A dma_addr_t can hold any valid DMA or bus address for the platform.
* Unmerged path Documentation/DMA-attributes.txt
* Unmerged path include/linux/dma-mapping.h
