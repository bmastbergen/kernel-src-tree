scsi: virtio_scsi: let host do exception handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] virtio_scsi: let host do exception handling (Paolo Bonzini) [1501309]
Rebuild_FUZZ: 93.48%
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit e72c9a2a67a6400c8ef3d01d4c461dbbbfa0e1f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e72c9a2a.failed

virtio_scsi tries to do exception handling after the default 30 seconds
timeout expires.  However, it's better to let the host control the
timeout, otherwise with a heavy I/O load it is likely that an abort will
also timeout.  This leads to fatal errors like filesystems going
offline.

Disable the 'sd' timeout and allow the host to do exception handling,
following the precedent of the storvsc driver.

Hannes has a proposal to introduce timeouts in virtio, but this provides
an immediate solution for stable kernels too.

[mkp: fixed typo]

	Reported-by: Douglas Miller <dougmill@linux.vnet.ibm.com>
	Cc: "James E.J. Bottomley" <jejb@linux.vnet.ibm.com>
	Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
	Cc: Hannes Reinecke <hare@suse.de>
	Cc: linux-scsi@vger.kernel.org
	Cc: stable@vger.kernel.org
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit e72c9a2a67a6400c8ef3d01d4c461dbbbfa0e1f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/virtio_scsi.c
diff --cc drivers/scsi/virtio_scsi.c
index 5632fa31a113,8b93197daefe..000000000000
--- a/drivers/scsi/virtio_scsi.c
+++ b/drivers/scsi/virtio_scsi.c
@@@ -728,14 -788,34 +728,35 @@@ static void virtscsi_target_destroy(str
  	kfree(tgt);
  }
  
++<<<<<<< HEAD
++=======
+ static int virtscsi_map_queues(struct Scsi_Host *shost)
+ {
+ 	struct virtio_scsi *vscsi = shost_priv(shost);
+ 
+ 	return blk_mq_virtio_map_queues(&shost->tag_set, vscsi->vdev, 2);
+ }
+ 
+ /*
+  * The host guarantees to respond to each command, although I/O
+  * latencies might be higher than on bare metal.  Reset the timer
+  * unconditionally to give the host a chance to perform EH.
+  */
+ static enum blk_eh_timer_return virtscsi_eh_timed_out(struct scsi_cmnd *scmnd)
+ {
+ 	return BLK_EH_RESET_TIMER;
+ }
+ 
++>>>>>>> e72c9a2a67a6 (scsi: virtio_scsi: let host do exception handling)
  static struct scsi_host_template virtscsi_host_template_single = {
  	.module = THIS_MODULE,
  	.name = "Virtio SCSI HBA",
  	.proc_name = "virtio_scsi",
  	.this_id = -1,
 -	.cmd_size = sizeof(struct virtio_scsi_cmd),
  	.queuecommand = virtscsi_queuecommand_single,
 -	.change_queue_depth = virtscsi_change_queue_depth,
  	.eh_abort_handler = virtscsi_abort,
  	.eh_device_reset_handler = virtscsi_device_reset,
+ 	.eh_timed_out = virtscsi_eh_timed_out,
  	.slave_alloc = virtscsi_device_alloc,
  
  	.can_queue = 1024,
@@@ -750,9 -831,12 +771,10 @@@ static struct scsi_host_template virtsc
  	.name = "Virtio SCSI HBA",
  	.proc_name = "virtio_scsi",
  	.this_id = -1,
 -	.cmd_size = sizeof(struct virtio_scsi_cmd),
  	.queuecommand = virtscsi_queuecommand_multi,
 -	.change_queue_depth = virtscsi_change_queue_depth,
  	.eh_abort_handler = virtscsi_abort,
  	.eh_device_reset_handler = virtscsi_device_reset,
+ 	.eh_timed_out = virtscsi_eh_timed_out,
  
  	.can_queue = 1024,
  	.dma_boundary = UINT_MAX,
* Unmerged path drivers/scsi/virtio_scsi.c
