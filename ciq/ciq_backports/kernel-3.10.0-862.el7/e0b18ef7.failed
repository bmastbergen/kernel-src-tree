KVM: x86: remove magic number with enum cpuid_leafs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Huaitong Han <huaitong.han@intel.com>
commit e0b18ef7189075676ac432954d7920eaa30d8e3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e0b18ef7.failed

This patch removes magic number with enum cpuid_leafs.

	Signed-off-by: Huaitong Han <huaitong.han@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit e0b18ef7189075676ac432954d7920eaa30d8e3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/cpuid.c
diff --cc arch/x86/kvm/cpuid.c
index 0031611e021e,00a69ecdd401..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -311,9 -302,10 +311,9 @@@ static inline int __do_cpuid_ent(struc
  	unsigned f_rdtscp = kvm_x86_ops->rdtscp_supported() ? F(RDTSCP) : 0;
  	unsigned f_invpcid = kvm_x86_ops->invpcid_supported() ? F(INVPCID) : 0;
  	unsigned f_mpx = kvm_mpx_supported() ? F(MPX) : 0;
 -	unsigned f_xsaves = kvm_x86_ops->xsaves_supported() ? F(XSAVES) : 0;
  
  	/* cpuid 1.edx */
- 	const u32 kvm_supported_word0_x86_features =
+ 	const u32 kvm_cpuid_1_edx_x86_features =
  		F(FPU) | F(VME) | F(DE) | F(PSE) |
  		F(TSC) | F(MSR) | F(PAE) | F(MCE) |
  		F(CX8) | F(APIC) | 0 /* Reserved */ | F(SEP) |
@@@ -358,24 -350,15 +358,29 @@@
  		F(PMM) | F(PMM_EN);
  
  	/* cpuid 7.0.ebx */
- 	const u32 kvm_supported_word9_x86_features =
+ 	const u32 kvm_cpuid_7_0_ebx_x86_features =
  		F(FSGSBASE) | F(BMI1) | F(HLE) | F(AVX2) | F(SMEP) |
  		F(BMI2) | F(ERMS) | f_invpcid | F(RTM) | f_mpx | F(RDSEED) |
 -		F(ADX) | F(SMAP) | F(AVX512F) | F(AVX512PF) | F(AVX512ER) |
 -		F(AVX512CD) | F(CLFLUSHOPT) | F(CLWB) | F(PCOMMIT);
 +		F(ADX) | F(SMAP) | F(AVX512IFMA) | F(AVX512F) | F(AVX512PF) |
 +		F(AVX512ER) | F(AVX512CD) | F(CLFLUSHOPT) | F(CLWB) | F(AVX512DQ) |
 +		F(SHA_NI) | F(AVX512BW) | F(AVX512VL);
  
  	/* cpuid 0xD.1.eax */
++<<<<<<< HEAD
 +	const u32 kvm_supported_word10_x86_features =
 +		F(XSAVEOPT) | F(XSAVEC) | F(XGETBV1);
 +
 +	/* cpuid 7.0.ecx*/
 +	const u32 kvm_cpuid_7_0_ecx_x86_features =
 +		F(AVX512VBMI) | F(AVX512_VPOPCNTDQ);
 +
 +	/* cpuid 7.0.edx*/
 +	const u32 kvm_cpuid_7_0_edx_x86_features =
 +		KF(AVX512_4VNNIW) | KF(AVX512_4FMAPS);
++=======
+ 	const u32 kvm_cpuid_D_1_eax_x86_features =
+ 		F(XSAVEOPT) | F(XSAVEC) | F(XGETBV1) | f_xsaves;
++>>>>>>> e0b18ef71890 (KVM: x86: remove magic number with enum cpuid_leafs)
  
  	/* all calls to cpuid_count() should be made on the same cpu */
  	get_cpu();
@@@ -450,20 -433,15 +455,20 @@@
  		entry->flags |= KVM_CPUID_FLAG_SIGNIFCANT_INDEX;
  		/* Mask ebx against host capability word 9 */
  		if (index == 0) {
- 			entry->ebx &= kvm_supported_word9_x86_features;
- 			cpuid_mask(&entry->ebx, 9);
+ 			entry->ebx &= kvm_cpuid_7_0_ebx_x86_features;
+ 			cpuid_mask(&entry->ebx, CPUID_7_0_EBX);
  			// TSC_ADJUST is emulated
  			entry->ebx |= F(TSC_ADJUST);
 -		} else
 +			entry->ecx &= kvm_cpuid_7_0_ecx_x86_features;
 +			cpuid_mask(&entry->ecx, CPUID_7_ECX);
 +			entry->edx &= kvm_cpuid_7_0_edx_x86_features;
 +			entry->edx &= get_scattered_cpuid_leaf(7, 0, CPUID_EDX);
 +		} else {
  			entry->ebx = 0;
 +			entry->ecx = 0;
 +			entry->edx = 0;
 +		}
  		entry->eax = 0;
 -		entry->ecx = 0;
 -		entry->edx = 0;
  		break;
  	}
  	case 9:
@@@ -536,8 -514,7 +541,12 @@@
  
  			do_cpuid_1_ent(&entry[i], function, idx);
  			if (idx == 1) {
++<<<<<<< HEAD
 +				entry[i].eax &= kvm_supported_word10_x86_features;
 +				cpuid_mask(&entry[i].eax, 10);
++=======
+ 				entry[i].eax &= kvm_cpuid_D_1_eax_x86_features;
++>>>>>>> e0b18ef71890 (KVM: x86: remove magic number with enum cpuid_leafs)
  				entry[i].ebx = 0;
  				if (entry[i].eax & (F(XSAVES)|F(XSAVEC)))
  					entry[i].ebx =
* Unmerged path arch/x86/kvm/cpuid.c
