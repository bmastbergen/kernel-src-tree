crypto: scomp - add support for deflate rfc1950 (zlib)

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [crypto] scomp - add support for deflate rfc1950 (zlib) (Neil Horman) [1475478]
Rebuild_FUZZ: 92.00%
commit-author Giovanni Cabiddu <giovanni.cabiddu@intel.com>
commit a368f43d6e3a001e684e9191a27df384fbff12f5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a368f43d.failed

Add scomp backend for zlib-deflate compression algorithm.
This backend outputs data using the format defined in rfc1950
(raw deflate surrounded by zlib header and footer).

	Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit a368f43d6e3a001e684e9191a27df384fbff12f5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/testmgr.h
diff --cc crypto/testmgr.h
index b74d1420621b,429357339dcc..000000000000
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@@ -28413,270 -33204,641 +28413,342 @@@ static struct comp_testvec deflate_deco
  	},
  };
  
 -static const struct comp_testvec zlib_deflate_comp_tv_template[] = {
++<<<<<<< HEAD
 +#define ZLIB_COMP_TEST_VECTORS 2
 +#define ZLIB_DECOMP_TEST_VECTORS 2
 +
 +static const struct {
 +	struct nlattr nla;
 +	int val;
 +} deflate_comp_params[] = {
 +	{
 +		.nla = {
 +			.nla_len	= NLA_HDRLEN + sizeof(int),
 +			.nla_type	= ZLIB_COMP_LEVEL,
 +		},
 +		.val			= Z_DEFAULT_COMPRESSION,
 +	}, {
 +		.nla = {
 +			.nla_len	= NLA_HDRLEN + sizeof(int),
 +			.nla_type	= ZLIB_COMP_METHOD,
 +		},
 +		.val			= Z_DEFLATED,
 +	}, {
 +		.nla = {
 +			.nla_len	= NLA_HDRLEN + sizeof(int),
 +			.nla_type	= ZLIB_COMP_WINDOWBITS,
 +		},
 +		.val			= -11,
 +	}, {
 +		.nla = {
 +			.nla_len	= NLA_HDRLEN + sizeof(int),
 +			.nla_type	= ZLIB_COMP_MEMLEVEL,
 +		},
 +		.val			= MAX_MEM_LEVEL,
 +	}, {
 +		.nla = {
 +			.nla_len	= NLA_HDRLEN + sizeof(int),
 +			.nla_type	= ZLIB_COMP_STRATEGY,
 +		},
 +		.val			= Z_DEFAULT_STRATEGY,
 +	}
 +};
 +
 +static const struct {
 +	struct nlattr nla;
 +	int val;
 +} deflate_decomp_params[] = {
 +	{
 +		.nla = {
 +			.nla_len	= NLA_HDRLEN + sizeof(int),
 +			.nla_type	= ZLIB_DECOMP_WINDOWBITS,
 +		},
 +		.val			= -11,
 +	}
 +};
 +
 +static struct pcomp_testvec zlib_comp_tv_template[] = {
  	{
 +		.params = &deflate_comp_params,
 +		.paramsize = sizeof(deflate_comp_params),
  		.inlen	= 70,
 -		.outlen	= 44,
 +		.outlen	= 38,
  		.input	= "Join us now and share the software "
  			"Join us now and share the software ",
 -		.output	= "\x78\x5e\xf3\xca\xcf\xcc\x53\x28"
 -			  "\x2d\x56\xc8\xcb\x2f\x57\x48\xcc"
 -			  "\x4b\x51\x28\xce\x48\x2c\x4a\x55"
 -			  "\x28\xc9\x48\x55\x28\xce\x4f\x2b"
 -			  "\x29\x07\x71\xbc\x08\x2b\x01\x00"
 -			  "\x7c\x65\x19\x3d",
 +		.output	= "\xf3\xca\xcf\xcc\x53\x28\x2d\x56"
 +			  "\xc8\xcb\x2f\x57\x48\xcc\x4b\x51"
 +			  "\x28\xce\x48\x2c\x4a\x55\x28\xc9"
 +			  "\x48\x55\x28\xce\x4f\x2b\x29\x07"
 +			  "\x71\xbc\x08\x2b\x01\x00",
  	}, {
 +		.params = &deflate_comp_params,
 +		.paramsize = sizeof(deflate_comp_params),
  		.inlen	= 191,
 -		.outlen	= 129,
 +		.outlen	= 122,
  		.input	= "This document describes a compression method based on the DEFLATE"
  			"compression algorithm.  This document defines the application of "
  			"the DEFLATE algorithm to the IP Payload Compression Protocol.",
 -		.output	= "\x78\x5e\x5d\xce\x41\x0a\xc3\x30"
 -			  "\x0c\x04\xc0\xaf\xec\x0b\xf2\x87"
 -			  "\xd2\xa6\x50\xe8\xc1\x07\x7f\x40"
 -			  "\xb1\x95\x5a\x60\x5b\xc6\x56\x0f"
 -			  "\xfd\x7d\x93\x1e\x42\xe8\x51\xec"
 -			  "\xee\x20\x9f\x64\x20\x6a\x78\x17"
 -			  "\xae\x86\xc8\x23\x74\x59\x78\x80"
 -			  "\x10\xb4\xb4\xce\x63\x88\x56\x14"
 -			  "\xb6\xa4\x11\x0b\x0d\x8e\xd8\x6e"
 -			  "\x4b\x8c\xdb\x7c\x7f\x5e\xfc\x7c"
 -			  "\xae\x51\x7e\x69\x17\x4b\x65\x02"
 -			  "\xfc\x1f\xbc\x4a\xdd\xd8\x7d\x48"
 -			  "\xad\x65\x09\x64\x3b\xac\xeb\xd9"
 -			  "\xc2\x01\xc0\xf4\x17\x3c\x1c\x1c"
 -			  "\x7d\xb2\x52\xc4\xf5\xf4\x8f\xeb"
 -			  "\x6a\x1a\x34\x4f\x5f\x2e\x32\x45"
 -			  "\x4e",
 -	},
 -};
 -
 -static const struct comp_testvec zlib_deflate_decomp_tv_template[] = {
 -	{
 -		.inlen	= 128,
 -		.outlen	= 191,
 -		.input	= "\x78\x9c\x5d\x8d\x31\x0e\xc2\x30"
 -			  "\x10\x04\xbf\xb2\x2f\xc8\x1f\x10"
 -			  "\x04\x09\x89\xc2\x85\x3f\x70\xb1"
 -			  "\x2f\xf8\x24\xdb\x67\xd9\x47\xc1"
 -			  "\xef\x49\x68\x12\x51\xae\x76\x67"
 -			  "\xd6\x27\x19\x88\x1a\xde\x85\xab"
 -			  "\x21\xf2\x08\x5d\x16\x1e\x20\x04"
 -			  "\x2d\xad\xf3\x18\xa2\x15\x85\x2d"
 -			  "\x69\xc4\x42\x83\x23\xb6\x6c\x89"
 -			  "\x71\x9b\xef\xcf\x8b\x9f\xcf\x33"
 -			  "\xca\x2f\xed\x62\xa9\x4c\x80\xff"
 -			  "\x13\xaf\x52\x37\xed\x0e\x52\x6b"
 -			  "\x59\x02\xd9\x4e\xe8\x7a\x76\x1d"
 -			  "\x02\x98\xfe\x8a\x87\x83\xa3\x4f"
 -			  "\x56\x8a\xb8\x9e\x8e\x5c\x57\xd3"
 -			  "\xa0\x79\xfa\x02\x2e\x32\x45\x4e",
 -		.output	= "This document describes a compression method based on the DEFLATE"
 -			"compression algorithm.  This document defines the application of "
 -			"the DEFLATE algorithm to the IP Payload Compression Protocol.",
 -	}, {
 -		.inlen	= 44,
 -		.outlen	= 70,
 -		.input	= "\x78\x9c\xf3\xca\xcf\xcc\x53\x28"
 -			  "\x2d\x56\xc8\xcb\x2f\x57\x48\xcc"
 -			  "\x4b\x51\x28\xce\x48\x2c\x4a\x55"
 -			  "\x28\xc9\x48\x55\x28\xce\x4f\x2b"
 -			  "\x29\x07\x71\xbc\x08\x2b\x01\x00"
 -			  "\x7c\x65\x19\x3d",
 -		.output	= "Join us now and share the software "
 -			"Join us now and share the software ",
 -	},
 -};
 -
 -/*
 - * LZO test vectors (null-terminated strings).
 - */
 -static const struct comp_testvec lzo_comp_tv_template[] = {
 -	{
 -		.inlen	= 70,
 -		.outlen	= 57,
 -		.input	= "Join us now and share the software "
 -			"Join us now and share the software ",
 -		.output	= "\x00\x0d\x4a\x6f\x69\x6e\x20\x75"
 -			  "\x73\x20\x6e\x6f\x77\x20\x61\x6e"
 -			  "\x64\x20\x73\x68\x61\x72\x65\x20"
 -			  "\x74\x68\x65\x20\x73\x6f\x66\x74"
 -			  "\x77\x70\x01\x32\x88\x00\x0c\x65"
 -			  "\x20\x74\x68\x65\x20\x73\x6f\x66"
 -			  "\x74\x77\x61\x72\x65\x20\x11\x00"
 -			  "\x00",
 -	}, {
 -		.inlen	= 159,
 -		.outlen	= 131,
 -		.input	= "This document describes a compression method based on the LZO "
 -			"compression algorithm.  This document defines the application of "
 -			"the LZO algorithm used in UBIFS.",
 -		.output	= "\x00\x2c\x54\x68\x69\x73\x20\x64"
 -			  "\x6f\x63\x75\x6d\x65\x6e\x74\x20"
 -			  "\x64\x65\x73\x63\x72\x69\x62\x65"
 -			  "\x73\x20\x61\x20\x63\x6f\x6d\x70"
 -			  "\x72\x65\x73\x73\x69\x6f\x6e\x20"
 -			  "\x6d\x65\x74\x68\x6f\x64\x20\x62"
 -			  "\x61\x73\x65\x64\x20\x6f\x6e\x20"
 -			  "\x74\x68\x65\x20\x4c\x5a\x4f\x20"
 -			  "\x2a\x8c\x00\x09\x61\x6c\x67\x6f"
 -			  "\x72\x69\x74\x68\x6d\x2e\x20\x20"
 -			  "\x2e\x54\x01\x03\x66\x69\x6e\x65"
 -			  "\x73\x20\x74\x06\x05\x61\x70\x70"
 -			  "\x6c\x69\x63\x61\x74\x76\x0a\x6f"
 -			  "\x66\x88\x02\x60\x09\x27\xf0\x00"
 -			  "\x0c\x20\x75\x73\x65\x64\x20\x69"
 -			  "\x6e\x20\x55\x42\x49\x46\x53\x2e"
 -			  "\x11\x00\x00",
 -	},
 -};
 -
 -static const struct comp_testvec lzo_decomp_tv_template[] = {
 -	{
 -		.inlen	= 133,
 -		.outlen	= 159,
 -		.input	= "\x00\x2b\x54\x68\x69\x73\x20\x64"
 -			  "\x6f\x63\x75\x6d\x65\x6e\x74\x20"
 -			  "\x64\x65\x73\x63\x72\x69\x62\x65"
 -			  "\x73\x20\x61\x20\x63\x6f\x6d\x70"
 -			  "\x72\x65\x73\x73\x69\x6f\x6e\x20"
 -			  "\x6d\x65\x74\x68\x6f\x64\x20\x62"
 -			  "\x61\x73\x65\x64\x20\x6f\x6e\x20"
 -			  "\x74\x68\x65\x20\x4c\x5a\x4f\x2b"
 -			  "\x8c\x00\x0d\x61\x6c\x67\x6f\x72"
 -			  "\x69\x74\x68\x6d\x2e\x20\x20\x54"
 -			  "\x68\x69\x73\x2a\x54\x01\x02\x66"
 -			  "\x69\x6e\x65\x73\x94\x06\x05\x61"
 -			  "\x70\x70\x6c\x69\x63\x61\x74\x76"
 -			  "\x0a\x6f\x66\x88\x02\x60\x09\x27"
 -			  "\xf0\x00\x0c\x20\x75\x73\x65\x64"
 -			  "\x20\x69\x6e\x20\x55\x42\x49\x46"
 -			  "\x53\x2e\x11\x00\x00",
 -		.output	= "This document describes a compression method based on the LZO "
 -			"compression algorithm.  This document defines the application of "
 -			"the LZO algorithm used in UBIFS.",
 -	}, {
 -		.inlen	= 46,
 -		.outlen	= 70,
 -		.input	= "\x00\x0d\x4a\x6f\x69\x6e\x20\x75"
 -			  "\x73\x20\x6e\x6f\x77\x20\x61\x6e"
 -			  "\x64\x20\x73\x68\x61\x72\x65\x20"
 -			  "\x74\x68\x65\x20\x73\x6f\x66\x74"
 -			  "\x77\x70\x01\x01\x4a\x6f\x69\x6e"
 -			  "\x3d\x88\x00\x11\x00\x00",
 -		.output	= "Join us now and share the software "
 -			"Join us now and share the software ",
 -	},
 -};
 -
 -/*
 - * Michael MIC test vectors from IEEE 802.11i
 - */
 -#define MICHAEL_MIC_TEST_VECTORS 6
 -
 -static const struct hash_testvec michael_mic_tv_template[] = {
 -	{
 -		.key = "\x00\x00\x00\x00\x00\x00\x00\x00",
 -		.ksize = 8,
 -		.plaintext = zeroed_string,
 -		.psize = 0,
 -		.digest = "\x82\x92\x5c\x1c\xa1\xd1\x30\xb8",
 -	},
 -	{
 -		.key = "\x82\x92\x5c\x1c\xa1\xd1\x30\xb8",
 -		.ksize = 8,
 -		.plaintext = "M",
 -		.psize = 1,
 -		.digest = "\x43\x47\x21\xca\x40\x63\x9b\x3f",
 -	},
 -	{
 -		.key = "\x43\x47\x21\xca\x40\x63\x9b\x3f",
 -		.ksize = 8,
 -		.plaintext = "Mi",
 -		.psize = 2,
 -		.digest = "\xe8\xf9\xbe\xca\xe9\x7e\x5d\x29",
 -	},
 -	{
 -		.key = "\xe8\xf9\xbe\xca\xe9\x7e\x5d\x29",
 -		.ksize = 8,
 -		.plaintext = "Mic",
 -		.psize = 3,
 -		.digest = "\x90\x03\x8f\xc6\xcf\x13\xc1\xdb",
 -	},
 -	{
 -		.key = "\x90\x03\x8f\xc6\xcf\x13\xc1\xdb",
 -		.ksize = 8,
 -		.plaintext = "Mich",
 -		.psize = 4,
 -		.digest = "\xd5\x5e\x10\x05\x10\x12\x89\x86",
 -	},
 -	{
 -		.key = "\xd5\x5e\x10\x05\x10\x12\x89\x86",
 -		.ksize = 8,
 -		.plaintext = "Michael",
 -		.psize = 7,
 -		.digest = "\x0a\x94\x2b\x12\x4e\xca\xa5\x46",
 -	}
 -};
 -
 -/*
 - * CRC32 test vectors
 - */
 -static const struct hash_testvec crc32_tv_template[] = {
 -	{
 -		.key = "\x87\xa9\xcb\xed",
 -		.ksize = 4,
 -		.psize = 0,
 -		.digest = "\x87\xa9\xcb\xed",
 -	},
 -	{
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext = "\x01\x02\x03\x04\x05\x06\x07\x08"
 -			     "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
 -			     "\x11\x12\x13\x14\x15\x16\x17\x18"
 -			     "\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
 -			     "\x21\x22\x23\x24\x25\x26\x27\x28",
 -		.psize = 40,
 -		.digest = "\x3a\xdf\x4b\xb0",
 -	},
 -	{
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext = "\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
 -			     "\x31\x32\x33\x34\x35\x36\x37\x38"
 -			     "\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
 -			     "\x41\x42\x43\x44\x45\x46\x47\x48"
 -			     "\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50",
 -		.psize = 40,
 -		.digest = "\xa9\x7a\x7f\x7b",
 -	},
 -	{
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext = "\x51\x52\x53\x54\x55\x56\x57\x58"
 -			     "\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
 -			     "\x61\x62\x63\x64\x65\x66\x67\x68"
 -			     "\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
 -			     "\x71\x72\x73\x74\x75\x76\x77\x78",
 -		.psize = 40,
 -		.digest = "\xba\xd3\xf8\x1c",
 -	},
 -	{
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext = "\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
 -			     "\x81\x82\x83\x84\x85\x86\x87\x88"
 -			     "\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
 -			     "\x91\x92\x93\x94\x95\x96\x97\x98"
 -			     "\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0",
 -		.psize = 40,
 -		.digest = "\xa8\xa9\xc2\x02",
 -	},
 -	{
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext = "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8"
 -			     "\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
 -			     "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8"
 -			     "\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
 -			     "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8",
 -		.psize = 40,
 -		.digest = "\x27\xf0\x57\xe2",
 -	},
 -	{
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext = "\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
 -			     "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8"
 -			     "\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
 -			     "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8"
 -			     "\xe9\xea\xeb\xec\xed\xee\xef\xf0",
 -		.psize = 40,
 -		.digest = "\x49\x78\x10\x08",
 -	},
 -	{
 -		.key = "\x80\xea\xd3\xf1",
 -		.ksize = 4,
 -		.plaintext = "\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
 -			     "\x31\x32\x33\x34\x35\x36\x37\x38"
 -			     "\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
 -			     "\x41\x42\x43\x44\x45\x46\x47\x48"
 -			     "\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50",
 -		.psize = 40,
 -		.digest = "\x9a\xb1\xdc\xf0",
 -	},
 -	{
 -		.key = "\xf3\x4a\x1d\x5d",
 -		.ksize = 4,
 -		.plaintext = "\x51\x52\x53\x54\x55\x56\x57\x58"
 -			     "\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
 -			     "\x61\x62\x63\x64\x65\x66\x67\x68"
 -			     "\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
 -			     "\x71\x72\x73\x74\x75\x76\x77\x78",
 -		.psize = 40,
 -		.digest = "\xb4\x97\xcc\xd4",
 -	},
 -	{
 -		.key = "\x2e\x80\x04\x59",
 -		.ksize = 4,
 -		.plaintext = "\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
 -			     "\x81\x82\x83\x84\x85\x86\x87\x88"
 -			     "\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
 -			     "\x91\x92\x93\x94\x95\x96\x97\x98"
 -			     "\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0",
 -		.psize = 40,
 -		.digest = "\x67\x9b\xfa\x79",
 -	},
 -	{
 -		.key = "\xa6\xcc\x19\x85",
 -		.ksize = 4,
 -		.plaintext = "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8"
 -			     "\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
 -			     "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8"
 -			     "\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
 -			     "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8",
 -		.psize = 40,
 -		.digest = "\x24\xb5\x16\xef",
 -	},
 -	{
 -		.key = "\x41\xfc\xfe\x2d",
 -		.ksize = 4,
 -		.plaintext = "\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
 -			     "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8"
 -			     "\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
 -			     "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8"
 -			     "\xe9\xea\xeb\xec\xed\xee\xef\xf0",
 -		.psize = 40,
 -		.digest = "\x15\x94\x80\x39",
 -	},
 -	{
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext = "\x01\x02\x03\x04\x05\x06\x07\x08"
 -			     "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
 -			     "\x11\x12\x13\x14\x15\x16\x17\x18"
 -			     "\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
 -			     "\x21\x22\x23\x24\x25\x26\x27\x28"
 -			     "\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
 -			     "\x31\x32\x33\x34\x35\x36\x37\x38"
 -			     "\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
 -			     "\x41\x42\x43\x44\x45\x46\x47\x48"
 -			     "\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
 -			     "\x51\x52\x53\x54\x55\x56\x57\x58"
 -			     "\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
 -			     "\x61\x62\x63\x64\x65\x66\x67\x68"
 -			     "\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
 -			     "\x71\x72\x73\x74\x75\x76\x77\x78"
 -			     "\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
 -			     "\x81\x82\x83\x84\x85\x86\x87\x88"
 -			     "\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
 -			     "\x91\x92\x93\x94\x95\x96\x97\x98"
 -			     "\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
 -			     "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8"
 -			     "\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
 -			     "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8"
 -			     "\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
 -			     "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8"
 -			     "\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
 -			     "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8"
 -			     "\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
 -			     "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8"
 -			     "\xe9\xea\xeb\xec\xed\xee\xef\xf0",
 -		.psize = 240,
 -		.digest = "\x6c\xc6\x56\xde",
 -		.np = 2,
 -		.tap = { 31, 209 }
 -	}, {
 -		.key = "\xff\xff\xff\xff",
 -		.ksize = 4,
 -		.plaintext =	"\x6e\x05\x79\x10\xa7\x1b\xb2\x49"
 -				"\xe0\x54\xeb\x82\x19\x8d\x24\xbb"
 -				"\x2f\xc6\x5d\xf4\x68\xff\x96\x0a"
 -				"\xa1\x38\xcf\x43\xda\x71\x08\x7c"
 -				"\x13\xaa\x1e\xb5\x4c\xe3\x57\xee"
 -				"\x85\x1c\x90\x27\xbe\x32\xc9\x60"
 -				"\xf7\x6b\x02\x99\x0d\xa4\x3b\xd2"
 -				"\x46\xdd\x74\x0b\x7f\x16\xad\x21"
 -				"\xb8\x4f\xe6\x5a\xf1\x88\x1f\x93"
 -				"\x2a\xc1\x35\xcc\x63\xfa\x6e\x05"
 -				"\x9c\x10\xa7\x3e\xd5\x49\xe0\x77"
 -				"\x0e\x82\x19\xb0\x24\xbb\x52\xe9"
 -				"\x5d\xf4\x8b\x22\x96\x2d\xc4\x38"
 -				"\xcf\x66\xfd\x71\x08\x9f\x13\xaa"
 -				"\x41\xd8\x4c\xe3\x7a\x11\x85\x1c"
 -				"\xb3\x27\xbe\x55\xec\x60\xf7\x8e"
 -				"\x02\x99\x30\xc7\x3b\xd2\x69\x00"
 -				"\x74\x0b\xa2\x16\xad\x44\xdb\x4f"
 -				"\xe6\x7d\x14\x88\x1f\xb6\x2a\xc1"
 -				"\x58\xef\x63\xfa\x91\x05\x9c\x33"
 -				"\xca\x3e\xd5\x6c\x03\x77\x0e\xa5"
 -				"\x19\xb0\x47\xde\x52\xe9\x80\x17"
 -				"\x8b\x22\xb9\x2d\xc4\x5b\xf2\x66"
 -				"\xfd\x94\x08\x9f\x36\xcd\x41\xd8"
 -				"\x6f\x06\x7a\x11\xa8\x1c\xb3\x4a"
 -				"\xe1\x55\xec\x83\x1a\x8e\x25\xbc"
 -				"\x30\xc7\x5e\xf5\x69\x00\x97\x0b"
 -				"\xa2\x39\xd0\x44\xdb\x72\x09\x7d"
 -				"\x14\xab\x1f\xb6\x4d\xe4\x58\xef"
 -				"\x86\x1d\x91\x28\xbf\x33\xca\x61"
 -				"\xf8\x6c\x03\x9a\x0e\xa5\x3c\xd3"
 -				"\x47\xde\x75\x0c\x80\x17\xae\x22"
 -				"\xb9\x50\xe7\x5b\xf2\x89\x20\x94"
 -				"\x2b\xc2\x36\xcd\x64\xfb\x6f\x06"
 -				"\x9d\x11\xa8\x3f\xd6\x4a\xe1\x78"
 -				"\x0f\x83\x1a\xb1\x25\xbc\x53\xea"
 -				"\x5e\xf5\x8c\x00\x97\x2e\xc5\x39"
 -				"\xd0\x67\xfe\x72\x09\xa0\x14\xab"
 -				"\x42\xd9\x4d\xe4\x7b\x12\x86\x1d"
 -				"\xb4\x28\xbf\x56\xed\x61\xf8\x8f"
 -				"\x03\x9a\x31\xc8\x3c\xd3\x6a\x01"
 -				"\x75\x0c\xa3\x17\xae\x45\xdc\x50"
 -				"\xe7\x7e\x15\x89\x20\xb7\x2b\xc2"
 -				"\x59\xf0\x64\xfb\x92\x06\x9d\x34"
 -				"\xcb\x3f\xd6\x6d\x04\x78\x0f\xa6"
 -				"\x1a\xb1\x48\xdf\x53\xea\x81\x18"
 -				"\x8c\x23\xba\x2e\xc5\x5c\xf3\x67"
 -				"\xfe\x95\x09\xa0\x37\xce\x42\xd9"
 -				"\x70\x07\x7b\x12\xa9\x1d\xb4\x4b"
 -				"\xe2\x56\xed\x84\x1b\x8f\x26\xbd"
 -				"\x31\xc8\x5f\xf6\x6a\x01\x98\x0c"
 -				"\xa3\x3a\xd1\x45\xdc\x73\x0a\x7e"
 -				"\x15\xac\x20\xb7\x4e\xe5\x59\xf0"
 -				"\x87\x1e\x92\x29\xc0\x34\xcb\x62"
 -				"\xf9\x6d\x04\x9b\x0f\xa6\x3d\xd4"
 -				"\x48\xdf\x76\x0d\x81\x18\xaf\x23"
 -				"\xba\x51\xe8\x5c\xf3\x8a\x21\x95"
 -				"\x2c\xc3\x37\xce\x65\xfc\x70\x07"
 -				"\x9e\x12\xa9\x40\xd7\x4b\xe2\x79"
 -				"\x10\x84\x1b\xb2\x26\xbd\x54\xeb"
 -				"\x5f\xf6\x8d\x01\x98\x2f\xc6\x3a"
 -				"\xd1\x68\xff\x73\x0a\xa1\x15\xac"
 -				"\x43\xda\x4e\xe5\x7c\x13\x87\x1e"
 -				"\xb5\x29\xc0\x57\xee\x62\xf9\x90"
 -				"\x04\x9b\x32\xc9\x3d\xd4\x6b\x02"
 -				"\x76\x0d\xa4\x18\xaf\x46\xdd\x51"
 -				"\xe8\x7f\x16\x8a\x21\xb8\x2c\xc3"
 -				"\x5a\xf1\x65\xfc\x93\x07\x9e\x35"
 -				"\xcc\x40\xd7\x6e\x05\x79\x10\xa7"
 -				"\x1b\xb2\x49\xe0\x54\xeb\x82\x19"
 -				"\x8d\x24\xbb\x2f\xc6\x5d\xf4\x68"
 -				"\xff\x96\x0a\xa1\x38\xcf\x43\xda"
 -				"\x71\x08\x7c\x13\xaa\x1e\xb5\x4c"
 -				"\xe3\x57\xee\x85\x1c\x90\x27\xbe"
 -				"\x32\xc9\x60\xf7\x6b\x02\x99\x0d"
 -				"\xa4\x3b\xd2\x46\xdd\x74\x0b\x7f"
 -				"\x16\xad\x21\xb8\x4f\xe6\x5a\xf1"
 -				"\x88\x1f\x93\x2a\xc1\x35\xcc\x63"
 -				"\xfa\x6e\x05\x9c\x10\xa7\x3e\xd5"
 -				"\x49\xe0\x77\x0e\x82\x19\xb0\x24"
 -				"\xbb\x52\xe9\x5d\xf4\x8b\x22\x96"
 -				"\x2d\xc4\x38\xcf\x66\xfd\x71\x08"
 -				"\x9f\x13\xaa\x41\xd8\x4c\xe3\x7a"
 -				"\x11\x85\x1c\xb3\x27\xbe\x55\xec"
 -				"\x60\xf7\x8e\x02\x99\x30\xc7\x3b"
 -				"\xd2\x69\x00\x74\x0b\xa2\x16\xad"
 -				"\x44\xdb\x4f\xe6\x7d\x14\x88\x1f"
 -				"\xb6\x2a\xc1\x58\xef\x63\xfa\x91"
 -				"\x05\x9c\x33\xca\x3e\xd5\x6c\x03"
 -				"\x77\x0e\xa5\x19\xb0\x47\xde\x52"
 -				"\xe9\x80\x17\x8b\x22\xb9\x2d\xc4"
 -				"\x5b\xf2\x66\xfd\x94\x08\x9f\x36"
 -				"\xcd\x41\xd8\x6f\x06\x7a\x11\xa8"
 -				"\x1c\xb3\x4a\xe1\x55\xec\x83\x1a"
 -				"\x8e\x25\xbc\x30\xc7\x5e\xf5\x69"
 -				"\x00\x97\x0b\xa2\x39\xd0\x44\xdb"
 -				"\x72\x09\x7d\x14\xab\x1f\xb6\x4d"
 -				"\xe4\x58\xef\x86\x1d\x91\x28\xbf"
 -				"\x33\xca\x61\xf8\x6c\x03\x9a\x0e"
 -				"\xa5\x3c\xd3\x47\xde\x75\x0c\x80"
 -				"\x17\xae\x22\xb9\x50\xe7\x5b\xf2"
 -				"\x89\x20\x94\x2b\xc2\x36\xcd\x64"
 -				"\xfb\x6f\x06\x9d\x11\xa8\x3f\xd6"
 -				"\x4a\xe1\x78\x0f\x83\x1a\xb1\x25"
 -				"\xbc\x53\xea\x5e\xf5\x8c\x00\x97"
 -				"\x2e\xc5\x39\xd0\x67\xfe\x72\x09"
 -				"\xa0\x14\xab\x42\xd9\x4d\xe4\x7b"
 -				"\x12\x86\x1d\xb4\x28\xbf\x56\xed"
 -				"\x61\xf8\x8f\x03\x9a\x31\xc8\x3c"
 -				"\xd3\x6a\x01\x75\x0c\xa3\x17\xae"
 -				"\x45\xdc\x50\xe7\x7e\x15\x89\x20"
 -				"\xb7\x2b\xc2\x59\xf0\x64\xfb\x92"
 -				"\x06\x9d\x34\xcb\x3f\xd6\x6d\x04"
 -				"\x78\x0f\xa6\x1a\xb1\x48\xdf\x53"
 -				"\xea\x81\x18\x8c\x23\xba\x2e\xc5"
 -				"\x5c\xf3\x67\xfe\x95\x09\xa0\x37"
 -				"\xce\x42\xd9\x70\x07\x7b\x12\xa9"
 -				"\x1d\xb4\x4b\xe2\x56\xed\x84\x1b"
 -				"\x8f\x26\xbd\x31\xc8\x5f\xf6\x6a"
 -				"\x01\x98\x0c\xa3\x3a\xd1\x45\xdc"
 -				"\x73\x0a\x7e\x15\xac\x20\xb7\x4e"
 -				"\xe5\x59\xf0\x87\x1e\x92\x29\xc0"
 -				"\x34\xcb\x62\xf9\x6d\x04\x9b\x0f"
 -				"\xa6\x3d\xd4\x48\xdf\x76\x0d\x81"
 -				"\x18\xaf\x23\xba\x51\xe8\x5c\xf3"
 -				"\x8a\x21\x95\x2c\xc3\x37\xce\x65"
 -				"\xfc\x70\x07\x9e\x12\xa9\x40\xd7"
 -				"\x4b\xe2\x79\x10\x84\x1b\xb2\x26"
 -				"\xbd\x54\xeb\x5f\xf6\x8d\x01\x98"
 -				"\x2f\xc6\x3a\xd1\x68\xff\x73\x0a"
 -				"\xa1\x15\xac\x43\xda\x4e\xe5\x7c"
 -				"\x13\x87\x1e\xb5\x29\xc0\x57\xee"
 -				"\x62\xf9\x90\x04\x9b\x32\xc9\x3d"
 -				"\xd4\x6b\x02\x76\x0d\xa4\x18\xaf"
 -				"\x46\xdd\x51\xe8\x7f\x16\x8a\x21"
 -				"\xb8\x2c\xc3\x5a\xf1\x65\xfc\x93"
 -				"\x07\x9e\x35\xcc\x40\xd7\x6e\x05"
 -				"\x79\x10\xa7\x1b\xb2\x49\xe0\x54"
 -				"\xeb\x82\x19\x8d\x24\xbb\x2f\xc6"
 -				"\x5d\xf4\x68\xff\x96\x0a\xa1\x38"
 -				"\xcf\x43\xda\x71\x08\x7c\x13\xaa"
 -				"\x1e\xb5\x4c\xe3\x57\xee\x85\x1c"
 -				"\x90\x27\xbe\x32\xc9\x60\xf7\x6b"
 -				"\x02\x99\x0d\xa4\x3b\xd2\x46\xdd"
 -				"\x74\x0b\x7f\x16\xad\x21\xb8\x4f"
 -				"\xe6\x5a\xf1\x88\x1f\x93\x2a\xc1"
 -				"\x35\xcc\x63\xfa\x6e\x05\x9c\x10"
 -				"\xa7\x3e\xd5\x49\xe0\x77\x0e\x82"
 -				"\x19\xb0\x24\xbb\x52\xe9\x5d\xf4"
 -				"\x8b\x22\x96\x2d\xc4\x38\xcf\x66"
 -				"\xfd\x71\x08\x9f\x13\xaa\x41\xd8"
 -				"\x4c\xe3\x7a\x11\x85\x1c\xb3\x27"
 -				"\xbe\x55\xec\x60\xf7\x8e\x02\x99"
 -				"\x30\xc7\x3b\xd2\x69\x00\x74\x0b"
 -				"\xa2\x16\xad\x44\xdb\x4f\xe6\x7d"
 -				"\x14\x88\x1f\xb6\x2a\xc1\x58\xef"
 -				"\x63\xfa\x91\x05\x9c\x33\xca\x3e"
 -				"\xd5\x6c\x03\x77\x0e\xa5\x19\xb0"
 -				"\x47\xde\x52\xe9\x80\x17\x8b\x22"
 -				"\xb9\x2d\xc4\x5b\xf2\x66\xfd\x94"
 -				"\x08\x9f\x36\xcd\x41\xd8\x6f\x06"
 -				"\x7a\x11\xa8\x1c\xb3\x4a\xe1\x55"
 -				"\xec\x83\x1a\x8e\x25\xbc\x30\xc7"
 -				"\x5e\xf5\x69\x00\x97\x0b\xa2\x39"
 -				"\xd0\x44\xdb\x72\x09\x7d\x14\xab"
 -				"\x1f\xb6\x4d\xe4\x58\xef\x86\x1d"
 -				"\x91\x28\xbf\x33\xca\x61\xf8\x6c"
 -				"\x03\x9a\x0e\xa5\x3c\xd3\x47\xde"
 -				"\x75\x0c\x80\x17\xae\x22\xb9\x50"
 -				"\xe7\x5b\xf2\x89\x20\x94\x2b\xc2"
 -				"\x36\xcd\x64\xfb\x6f\x06\x9d\x11"
 -				"\xa8\x3f\xd6\x4a\xe1\x78\x0f\x83"
 -				"\x1a\xb1\x25\xbc\x53\xea\x5e\xf5"
 -				"\x8c\x00\x97\x2e\xc5\x39\xd0\x67"
 -				"\xfe\x72\x09\xa0\x14\xab\x42\xd9"
 -				"\x4d\xe4\x7b\x12\x86\x1d\xb4\x28"
 -				"\xbf\x56\xed\x61\xf8\x8f\x03\x9a"
 -				"\x31\xc8\x3c\xd3\x6a\x01\x75\x0c"
 -				"\xa3\x17\xae\x45\xdc\x50\xe7\x7e"
 -				"\x15\x89\x20\xb7\x2b\xc2\x59\xf0"
 -				"\x64\xfb\x92\x06\x9d\x34\xcb\x3f"
 -				"\xd6\x6d\x04\x78\x0f\xa6\x1a\xb1"
 -				"\x48\xdf\x53\xea\x81\x18\x8c\x23"
 -				"\xba\x2e\xc5\x5c\xf3\x67\xfe\x95"
 -				"\x09\xa0\x37\xce\x42\xd9\x70\x07"
 -				"\x7b\x12\xa9\x1d\xb4\x4b\xe2\x56"
 -				"\xed\x84\x1b\x8f\x26\xbd\x31\xc8"
 -				"\x5f\xf6\x6a\x01\x98\x0c\xa3\x3a"
 -				"\xd1\x45\xdc\x73\x0a\x7e\x15\xac"
 -				"\x20\xb7\x4e\xe5\x59\xf0\x87\x1e"
 -				"\x92\x29\xc0\x34\xcb\x62\xf9\x6d"
 -				"\x04\x9b\x0f\xa6\x3d\xd4\x48\xdf"
 -				"\x76\x0d\x81\x18\xaf\x23\xba\x51"
 -				"\xe8\x5c\xf3\x8a\x21\x95\x2c\xc3"
 -				"\x37\xce\x65\xfc\x70\x07\x9e\x12"
 -				"\xa9\x40\xd7\x4b\xe2\x79\x10\x84"
 -				"\x1b\xb2\x26\xbd\x54\xeb\x5f\xf6"
 -				"\x8d\x01\x98\x2f\xc6\x3a\xd1\x68"
 -				"\xff\x73\x0a\xa1\x15\xac\x43\xda"
 -				"\x4e\xe5\x7c\x13\x87\x1e\xb5\x29"
 -				"\xc0\x57\xee\x62\xf9\x90\x04\x9b"
 -				"\x32\xc9\x3d\xd4\x6b\x02\x76\x0d"
 -				"\xa4\x18\xaf\x46\xdd\x51\xe8\x7f"
 -				"\x16\x8a\x21\xb8\x2c\xc3\x5a\xf1"
 -				"\x65\xfc\x93\x07\x9e\x35\xcc\x40"
 -				"\xd7\x6e\x05\x79\x10\xa7\x1b\xb2"
 -				"\x49\xe0\x54\xeb\x82\x19\x8d\x24"
 -				"\xbb\x2f\xc6\x5d\xf4\x68\xff\x96"
 -				"\x0a\xa1\x38\xcf\x43\xda\x71\x08"
 -				"\x7c\x13\xaa\x1e\xb5\x4c\xe3\x57"
 -				"\xee\x85\x1c\x90\x27\xbe\x32\xc9"
 -				"\x60\xf7\x6b\x02\x99\x0d\xa4\x3b"
 -				"\xd2\x46\xdd\x74\x0b\x7f\x16\xad"
 -				"\x21\xb8\x4f\xe6\x5a\xf1\x88\x1f"
 -				"\x93\x2a\xc1\x35\xcc\x63\xfa\x6e"
 -				"\x05\x9c\x10\xa7\x3e\xd5\x49\xe0"
 -				"\x77\x0e\x82\x19\xb0\x24\xbb\x52"
 -				"\xe9\x5d\xf4\x8b\x22\x96\x2d\xc4"
 -				"\x38\xcf\x66\xfd\x71\x08\x9f\x13"
 -				"\xaa\x41\xd8\x4c\xe3\x7a\x11\x85"
 -				"\x1c\xb3\x27\xbe\x55\xec\x60\xf7"
 -				"\x8e\x02\x99\x30\xc7\x3b\xd2\x69"
 -				"\x00\x74\x0b\xa2\x16\xad\x44\xdb"
 -				"\x4f\xe6\x7d\x14\x88\x1f\xb6\x2a"
 -				"\xc1\x58\xef\x63\xfa\x91\x05\x9c"
 -				"\x33\xca\x3e\xd5\x6c\x03\x77\x0e"
 -				"\xa5\x19\xb0\x47\xde\x52\xe9\x80"
 -				"\x17\x8b\x22\xb9\x2d\xc4\x5b\xf2"
 -				"\x66\xfd\x94\x08\x9f\x36\xcd\x41"
 -				"\xd8\x6f\x06\x7a\x11\xa8\x1c\xb3"
 -				"\x4a\xe1\x55\xec\x83\x1a\x8e\x25"
 -				"\xbc\x30\xc7\x5e\xf5\x69\x00\x97"
 -				"\x0b\xa2\x39\xd0\x44\xdb\x72\x09"
 -				"\x7d\x14\xab\x1f\xb6\x4d\xe4\x58"
 -				"\xef\x86\x1d\x91\x28\xbf\x33\xca"
 -				"\x61\xf8\x6c\x03\x9a\x0e\xa5\x3c"
 -				"\xd3\x47\xde\x75\x0c\x80\x17\xae"
 -				"\x22\xb9\x50\xe7\x5b\xf2\x89\x20"
 -				"\x94\x2b\xc2\x36\xcd\x64\xfb\x6f"
 -				"\x06\x9d\x11\xa8\x3f\xd6\x4a\xe1"
 -				"\x78\x0f\x83\x1a\xb1\x25\xbc\x53"
 -				"\xea\x5e\xf5\x8c\x00\x97\x2e\xc5"
 -				"\x39\xd0\x67\xfe\x72\x09\xa0\x14"
 -				"\xab\x42\xd9\x4d\xe4\x7b\x12\x86"
 -				"\x1d\xb4\x28\xbf\x56\xed\x61\xf8"
 -				"\x8f\x03\x9a\x31\xc8\x3c\xd3\x6a"
 -				"\x01\x75\x0c\xa3\x17\xae\x45\xdc"
 -				"\x50\xe7\x7e\x15\x89\x20\xb7\x2b"
 -				"\xc2\x59\xf0\x64\xfb\x92\x06\x9d"
 -				"\x34\xcb\x3f\xd6\x6d\x04\x78\x0f"
 -				"\xa6\x1a\xb1\x48\xdf\x53\xea\x81"
 -				"\x18\x8c\x23\xba\x2e\xc5\x5c\xf3"
 -				"\x67\xfe\x95\x09\xa0\x37\xce\x42"
 -				"\xd9\x70\x07\x7b\x12\xa9\x1d\xb4"
 -				"\x4b\xe2\x56\xed\x84\x1b\x8f\x26"
 -				"\xbd\x31\xc8\x5f\xf6\x6a\x01\x98",
 -		.psize = 2048,
 -		.digest = "\xfb\x3a\x7a\xda",
 +		.output	= "\x5d\x8d\x31\x0e\xc2\x30\x10\x04"
 +			  "\xbf\xb2\x2f\xc8\x1f\x10\x04\x09"
 +			  "\x89\xc2\x85\x3f\x70\xb1\x2f\xf8"
 +			  "\x24\xdb\x67\xd9\x47\xc1\xef\x49"
 +			  "\x68\x12\x51\xae\x76\x67\xd6\x27"
 +			  "\x19\x88\x1a\xde\x85\xab\x21\xf2"
 +			  "\x08\x5d\x16\x1e\x20\x04\x2d\xad"
 +			  "\xf3\x18\xa2\x15\x85\x2d\x69\xc4"
 +			  "\x42\x83\x23\xb6\x6c\x89\x71\x9b"
 +			  "\xef\xcf\x8b\x9f\xcf\x33\xca\x2f"
 +			  "\xed\x62\xa9\x4c\x80\xff\x13\xaf"
 +			  "\x52\x37\xed\x0e\x52\x6b\x59\x02"
 +			  "\xd9\x4e\xe8\x7a\x76\x1d\x02\x98"
 +			  "\xfe\x8a\x87\x83\xa3\x4f\x56\x8a"
 +			  "\xb8\x9e\x8e\x5c\x57\xd3\xa0\x79"
 +			  "\xfa\x02",
 +	},
 +};
 +
 +static struct pcomp_testvec zlib_decomp_tv_template[] = {
 +	{
 +		.params = &deflate_decomp_params,
 +		.paramsize = sizeof(deflate_decomp_params),
 +		.inlen	= 122,
 +		.outlen	= 191,
 +		.input	= "\x5d\x8d\x31\x0e\xc2\x30\x10\x04"
 +			  "\xbf\xb2\x2f\xc8\x1f\x10\x04\x09"
 +			  "\x89\xc2\x85\x3f\x70\xb1\x2f\xf8"
 +			  "\x24\xdb\x67\xd9\x47\xc1\xef\x49"
 +			  "\x68\x12\x51\xae\x76\x67\xd6\x27"
 +			  "\x19\x88\x1a\xde\x85\xab\x21\xf2"
 +			  "\x08\x5d\x16\x1e\x20\x04\x2d\xad"
 +			  "\xf3\x18\xa2\x15\x85\x2d\x69\xc4"
 +			  "\x42\x83\x23\xb6\x6c\x89\x71\x9b"
 +			  "\xef\xcf\x8b\x9f\xcf\x33\xca\x2f"
 +			  "\xed\x62\xa9\x4c\x80\xff\x13\xaf"
 +			  "\x52\x37\xed\x0e\x52\x6b\x59\x02"
 +			  "\xd9\x4e\xe8\x7a\x76\x1d\x02\x98"
 +			  "\xfe\x8a\x87\x83\xa3\x4f\x56\x8a"
 +			  "\xb8\x9e\x8e\x5c\x57\xd3\xa0\x79"
 +			  "\xfa\x02",
++=======
++static const struct comp_testvec zlib_deflate_comp_tv_template[] = {
++	{
++		.inlen	= 70,
++		.outlen	= 44,
++		.input	= "Join us now and share the software "
++			"Join us now and share the software ",
++		.output	= "\x78\x5e\xf3\xca\xcf\xcc\x53\x28"
++			  "\x2d\x56\xc8\xcb\x2f\x57\x48\xcc"
++			  "\x4b\x51\x28\xce\x48\x2c\x4a\x55"
++			  "\x28\xc9\x48\x55\x28\xce\x4f\x2b"
++			  "\x29\x07\x71\xbc\x08\x2b\x01\x00"
++			  "\x7c\x65\x19\x3d",
++	}, {
++		.inlen	= 191,
++		.outlen	= 129,
++		.input	= "This document describes a compression method based on the DEFLATE"
++			"compression algorithm.  This document defines the application of "
++			"the DEFLATE algorithm to the IP Payload Compression Protocol.",
++		.output	= "\x78\x5e\x5d\xce\x41\x0a\xc3\x30"
++			  "\x0c\x04\xc0\xaf\xec\x0b\xf2\x87"
++			  "\xd2\xa6\x50\xe8\xc1\x07\x7f\x40"
++			  "\xb1\x95\x5a\x60\x5b\xc6\x56\x0f"
++			  "\xfd\x7d\x93\x1e\x42\xe8\x51\xec"
++			  "\xee\x20\x9f\x64\x20\x6a\x78\x17"
++			  "\xae\x86\xc8\x23\x74\x59\x78\x80"
++			  "\x10\xb4\xb4\xce\x63\x88\x56\x14"
++			  "\xb6\xa4\x11\x0b\x0d\x8e\xd8\x6e"
++			  "\x4b\x8c\xdb\x7c\x7f\x5e\xfc\x7c"
++			  "\xae\x51\x7e\x69\x17\x4b\x65\x02"
++			  "\xfc\x1f\xbc\x4a\xdd\xd8\x7d\x48"
++			  "\xad\x65\x09\x64\x3b\xac\xeb\xd9"
++			  "\xc2\x01\xc0\xf4\x17\x3c\x1c\x1c"
++			  "\x7d\xb2\x52\xc4\xf5\xf4\x8f\xeb"
++			  "\x6a\x1a\x34\x4f\x5f\x2e\x32\x45"
++			  "\x4e",
++	},
++};
++
++static const struct comp_testvec zlib_deflate_decomp_tv_template[] = {
++	{
++		.inlen	= 128,
++		.outlen	= 191,
++		.input	= "\x78\x9c\x5d\x8d\x31\x0e\xc2\x30"
++			  "\x10\x04\xbf\xb2\x2f\xc8\x1f\x10"
++			  "\x04\x09\x89\xc2\x85\x3f\x70\xb1"
++			  "\x2f\xf8\x24\xdb\x67\xd9\x47\xc1"
++			  "\xef\x49\x68\x12\x51\xae\x76\x67"
++			  "\xd6\x27\x19\x88\x1a\xde\x85\xab"
++			  "\x21\xf2\x08\x5d\x16\x1e\x20\x04"
++			  "\x2d\xad\xf3\x18\xa2\x15\x85\x2d"
++			  "\x69\xc4\x42\x83\x23\xb6\x6c\x89"
++			  "\x71\x9b\xef\xcf\x8b\x9f\xcf\x33"
++			  "\xca\x2f\xed\x62\xa9\x4c\x80\xff"
++			  "\x13\xaf\x52\x37\xed\x0e\x52\x6b"
++			  "\x59\x02\xd9\x4e\xe8\x7a\x76\x1d"
++			  "\x02\x98\xfe\x8a\x87\x83\xa3\x4f"
++			  "\x56\x8a\xb8\x9e\x8e\x5c\x57\xd3"
++			  "\xa0\x79\xfa\x02\x2e\x32\x45\x4e",
++>>>>>>> a368f43d6e3a (crypto: scomp - add support for deflate rfc1950 (zlib))
 +		.output	= "This document describes a compression method based on the DEFLATE"
 +			"compression algorithm.  This document defines the application of "
 +			"the DEFLATE algorithm to the IP Payload Compression Protocol.",
 +	}, {
++<<<<<<< HEAD
 +		.params = &deflate_decomp_params,
 +		.paramsize = sizeof(deflate_decomp_params),
 +		.inlen	= 38,
 +		.outlen	= 70,
 +		.input	= "\xf3\xca\xcf\xcc\x53\x28\x2d\x56"
 +			  "\xc8\xcb\x2f\x57\x48\xcc\x4b\x51"
 +			  "\x28\xce\x48\x2c\x4a\x55\x28\xc9"
 +			  "\x48\x55\x28\xce\x4f\x2b\x29\x07"
 +			  "\x71\xbc\x08\x2b\x01\x00",
++=======
++		.inlen	= 44,
++		.outlen	= 70,
++		.input	= "\x78\x9c\xf3\xca\xcf\xcc\x53\x28"
++			  "\x2d\x56\xc8\xcb\x2f\x57\x48\xcc"
++			  "\x4b\x51\x28\xce\x48\x2c\x4a\x55"
++			  "\x28\xc9\x48\x55\x28\xce\x4f\x2b"
++			  "\x29\x07\x71\xbc\x08\x2b\x01\x00"
++			  "\x7c\x65\x19\x3d",
++>>>>>>> a368f43d6e3a (crypto: scomp - add support for deflate rfc1950 (zlib))
 +		.output	= "Join us now and share the software "
 +			"Join us now and share the software ",
 +	},
 +};
 +
 +/*
 + * LZO test vectors (null-terminated strings).
 + */
 +#define LZO_COMP_TEST_VECTORS 2
 +#define LZO_DECOMP_TEST_VECTORS 2
 +
 +static struct comp_testvec lzo_comp_tv_template[] = {
 +	{
 +		.inlen	= 70,
 +		.outlen	= 57,
 +		.input	= "Join us now and share the software "
 +			"Join us now and share the software ",
 +		.output	= "\x00\x0d\x4a\x6f\x69\x6e\x20\x75"
 +			  "\x73\x20\x6e\x6f\x77\x20\x61\x6e"
 +			  "\x64\x20\x73\x68\x61\x72\x65\x20"
 +			  "\x74\x68\x65\x20\x73\x6f\x66\x74"
 +			  "\x77\x70\x01\x32\x88\x00\x0c\x65"
 +			  "\x20\x74\x68\x65\x20\x73\x6f\x66"
 +			  "\x74\x77\x61\x72\x65\x20\x11\x00"
 +			  "\x00",
 +	}, {
 +		.inlen	= 159,
 +		.outlen	= 131,
 +		.input	= "This document describes a compression method based on the LZO "
 +			"compression algorithm.  This document defines the application of "
 +			"the LZO algorithm used in UBIFS.",
 +		.output	= "\x00\x2c\x54\x68\x69\x73\x20\x64"
 +			  "\x6f\x63\x75\x6d\x65\x6e\x74\x20"
 +			  "\x64\x65\x73\x63\x72\x69\x62\x65"
 +			  "\x73\x20\x61\x20\x63\x6f\x6d\x70"
 +			  "\x72\x65\x73\x73\x69\x6f\x6e\x20"
 +			  "\x6d\x65\x74\x68\x6f\x64\x20\x62"
 +			  "\x61\x73\x65\x64\x20\x6f\x6e\x20"
 +			  "\x74\x68\x65\x20\x4c\x5a\x4f\x20"
 +			  "\x2a\x8c\x00\x09\x61\x6c\x67\x6f"
 +			  "\x72\x69\x74\x68\x6d\x2e\x20\x20"
 +			  "\x2e\x54\x01\x03\x66\x69\x6e\x65"
 +			  "\x73\x20\x74\x06\x05\x61\x70\x70"
 +			  "\x6c\x69\x63\x61\x74\x76\x0a\x6f"
 +			  "\x66\x88\x02\x60\x09\x27\xf0\x00"
 +			  "\x0c\x20\x75\x73\x65\x64\x20\x69"
 +			  "\x6e\x20\x55\x42\x49\x46\x53\x2e"
 +			  "\x11\x00\x00",
 +	},
 +};
 +
 +static struct comp_testvec lzo_decomp_tv_template[] = {
 +	{
 +		.inlen	= 133,
 +		.outlen	= 159,
 +		.input	= "\x00\x2b\x54\x68\x69\x73\x20\x64"
 +			  "\x6f\x63\x75\x6d\x65\x6e\x74\x20"
 +			  "\x64\x65\x73\x63\x72\x69\x62\x65"
 +			  "\x73\x20\x61\x20\x63\x6f\x6d\x70"
 +			  "\x72\x65\x73\x73\x69\x6f\x6e\x20"
 +			  "\x6d\x65\x74\x68\x6f\x64\x20\x62"
 +			  "\x61\x73\x65\x64\x20\x6f\x6e\x20"
 +			  "\x74\x68\x65\x20\x4c\x5a\x4f\x2b"
 +			  "\x8c\x00\x0d\x61\x6c\x67\x6f\x72"
 +			  "\x69\x74\x68\x6d\x2e\x20\x20\x54"
 +			  "\x68\x69\x73\x2a\x54\x01\x02\x66"
 +			  "\x69\x6e\x65\x73\x94\x06\x05\x61"
 +			  "\x70\x70\x6c\x69\x63\x61\x74\x76"
 +			  "\x0a\x6f\x66\x88\x02\x60\x09\x27"
 +			  "\xf0\x00\x0c\x20\x75\x73\x65\x64"
 +			  "\x20\x69\x6e\x20\x55\x42\x49\x46"
 +			  "\x53\x2e\x11\x00\x00",
 +		.output	= "This document describes a compression method based on the LZO "
 +			"compression algorithm.  This document defines the application of "
 +			"the LZO algorithm used in UBIFS.",
 +	}, {
 +		.inlen	= 46,
 +		.outlen	= 70,
 +		.input	= "\x00\x0d\x4a\x6f\x69\x6e\x20\x75"
 +			  "\x73\x20\x6e\x6f\x77\x20\x61\x6e"
 +			  "\x64\x20\x73\x68\x61\x72\x65\x20"
 +			  "\x74\x68\x65\x20\x73\x6f\x66\x74"
 +			  "\x77\x70\x01\x01\x4a\x6f\x69\x6e"
 +			  "\x3d\x88\x00\x11\x00\x00",
 +		.output	= "Join us now and share the software "
 +			"Join us now and share the software ",
 +	},
 +};
 +
 +/*
 + * Michael MIC test vectors from IEEE 802.11i
 + */
 +#define MICHAEL_MIC_TEST_VECTORS 6
 +
 +static struct hash_testvec michael_mic_tv_template[] = {
 +	{
 +		.key = "\x00\x00\x00\x00\x00\x00\x00\x00",
 +		.ksize = 8,
 +		.plaintext = zeroed_string,
 +		.psize = 0,
 +		.digest = "\x82\x92\x5c\x1c\xa1\xd1\x30\xb8",
 +	},
 +	{
 +		.key = "\x82\x92\x5c\x1c\xa1\xd1\x30\xb8",
 +		.ksize = 8,
 +		.plaintext = "M",
 +		.psize = 1,
 +		.digest = "\x43\x47\x21\xca\x40\x63\x9b\x3f",
 +	},
 +	{
 +		.key = "\x43\x47\x21\xca\x40\x63\x9b\x3f",
 +		.ksize = 8,
 +		.plaintext = "Mi",
 +		.psize = 2,
 +		.digest = "\xe8\xf9\xbe\xca\xe9\x7e\x5d\x29",
 +	},
 +	{
 +		.key = "\xe8\xf9\xbe\xca\xe9\x7e\x5d\x29",
 +		.ksize = 8,
 +		.plaintext = "Mic",
 +		.psize = 3,
 +		.digest = "\x90\x03\x8f\xc6\xcf\x13\xc1\xdb",
 +	},
 +	{
 +		.key = "\x90\x03\x8f\xc6\xcf\x13\xc1\xdb",
 +		.ksize = 8,
 +		.plaintext = "Mich",
 +		.psize = 4,
 +		.digest = "\xd5\x5e\x10\x05\x10\x12\x89\x86",
 +	},
 +	{
 +		.key = "\xd5\x5e\x10\x05\x10\x12\x89\x86",
 +		.ksize = 8,
 +		.plaintext = "Michael",
 +		.psize = 7,
 +		.digest = "\x0a\x94\x2b\x12\x4e\xca\xa5\x46",
  	}
  };
  
diff --git a/crypto/deflate.c b/crypto/deflate.c
index f942cb391890..94ec3b36a8e8 100644
--- a/crypto/deflate.c
+++ b/crypto/deflate.c
@@ -43,20 +43,24 @@ struct deflate_ctx {
 	struct z_stream_s decomp_stream;
 };
 
-static int deflate_comp_init(struct deflate_ctx *ctx)
+static int deflate_comp_init(struct deflate_ctx *ctx, int format)
 {
 	int ret = 0;
 	struct z_stream_s *stream = &ctx->comp_stream;
 
 	stream->workspace = vzalloc(zlib_deflate_workspacesize(
-				-DEFLATE_DEF_WINBITS, DEFLATE_DEF_MEMLEVEL));
+				    MAX_WBITS, MAX_MEM_LEVEL));
 	if (!stream->workspace) {
 		ret = -ENOMEM;
 		goto out;
 	}
-	ret = zlib_deflateInit2(stream, DEFLATE_DEF_LEVEL, Z_DEFLATED,
-	                        -DEFLATE_DEF_WINBITS, DEFLATE_DEF_MEMLEVEL,
-	                        Z_DEFAULT_STRATEGY);
+	if (format)
+		ret = zlib_deflateInit(stream, 3);
+	else
+		ret = zlib_deflateInit2(stream, DEFLATE_DEF_LEVEL, Z_DEFLATED,
+					-DEFLATE_DEF_WINBITS,
+					DEFLATE_DEF_MEMLEVEL,
+					Z_DEFAULT_STRATEGY);
 	if (ret != Z_OK) {
 		ret = -EINVAL;
 		goto out_free;
@@ -68,7 +72,7 @@ out_free:
 	goto out;
 }
 
-static int deflate_decomp_init(struct deflate_ctx *ctx)
+static int deflate_decomp_init(struct deflate_ctx *ctx, int format)
 {
 	int ret = 0;
 	struct z_stream_s *stream = &ctx->decomp_stream;
@@ -78,7 +82,10 @@ static int deflate_decomp_init(struct deflate_ctx *ctx)
 		ret = -ENOMEM;
 		goto out;
 	}
-	ret = zlib_inflateInit2(stream, -DEFLATE_DEF_WINBITS);
+	if (format)
+		ret = zlib_inflateInit(stream);
+	else
+		ret = zlib_inflateInit2(stream, -DEFLATE_DEF_WINBITS);
 	if (ret != Z_OK) {
 		ret = -EINVAL;
 		goto out_free;
@@ -102,21 +109,21 @@ static void deflate_decomp_exit(struct deflate_ctx *ctx)
 	vfree(ctx->decomp_stream.workspace);
 }
 
-static int __deflate_init(void *ctx)
+static int __deflate_init(void *ctx, int format)
 {
 	int ret;
 
-	ret = deflate_comp_init(ctx);
+	ret = deflate_comp_init(ctx, format);
 	if (ret)
 		goto out;
-	ret = deflate_decomp_init(ctx);
+	ret = deflate_decomp_init(ctx, format);
 	if (ret)
 		deflate_comp_exit(ctx);
 out:
 	return ret;
 }
 
-static void *deflate_alloc_ctx(struct crypto_scomp *tfm)
+static void *gen_deflate_alloc_ctx(struct crypto_scomp *tfm, int format)
 {
 	struct deflate_ctx *ctx;
 	int ret;
@@ -125,7 +132,7 @@ static void *deflate_alloc_ctx(struct crypto_scomp *tfm)
 	if (!ctx)
 		return ERR_PTR(-ENOMEM);
 
-	ret = __deflate_init(ctx);
+	ret = __deflate_init(ctx, format);
 	if (ret) {
 		kfree(ctx);
 		return ERR_PTR(ret);
@@ -134,11 +141,21 @@ static void *deflate_alloc_ctx(struct crypto_scomp *tfm)
 	return ctx;
 }
 
+static void *deflate_alloc_ctx(struct crypto_scomp *tfm)
+{
+	return gen_deflate_alloc_ctx(tfm, 0);
+}
+
+static void *zlib_deflate_alloc_ctx(struct crypto_scomp *tfm)
+{
+	return gen_deflate_alloc_ctx(tfm, 1);
+}
+
 static int deflate_init(struct crypto_tfm *tfm)
 {
 	struct deflate_ctx *ctx = crypto_tfm_ctx(tfm);
 
-	return __deflate_init(ctx);
+	return __deflate_init(ctx, 0);
 }
 
 static void __deflate_exit(void *ctx)
@@ -272,7 +289,7 @@ static struct crypto_alg alg = {
 	.coa_decompress  	= deflate_decompress } }
 };
 
-static struct scomp_alg scomp = {
+static struct scomp_alg scomp[] = { {
 	.alloc_ctx		= deflate_alloc_ctx,
 	.free_ctx		= deflate_free_ctx,
 	.compress		= deflate_scompress,
@@ -282,7 +299,17 @@ static struct scomp_alg scomp = {
 		.cra_driver_name = "deflate-scomp",
 		.cra_module	 = THIS_MODULE,
 	}
-};
+}, {
+	.alloc_ctx		= zlib_deflate_alloc_ctx,
+	.free_ctx		= deflate_free_ctx,
+	.compress		= deflate_scompress,
+	.decompress		= deflate_sdecompress,
+	.base			= {
+		.cra_name	= "zlib-deflate",
+		.cra_driver_name = "zlib-deflate-scomp",
+		.cra_module	 = THIS_MODULE,
+	}
+} };
 
 static int __init deflate_mod_init(void)
 {
@@ -292,7 +319,7 @@ static int __init deflate_mod_init(void)
 	if (ret)
 		return ret;
 
-	ret = crypto_register_scomp(&scomp);
+	ret = crypto_register_scomps(scomp, ARRAY_SIZE(scomp));
 	if (ret) {
 		crypto_unregister_alg(&alg);
 		return ret;
@@ -304,7 +331,7 @@ static int __init deflate_mod_init(void)
 static void __exit deflate_mod_fini(void)
 {
 	crypto_unregister_alg(&alg);
-	crypto_unregister_scomp(&scomp);
+	crypto_unregister_scomps(scomp, ARRAY_SIZE(scomp));
 }
 
 module_init(deflate_mod_init);
diff --git a/crypto/testmgr.c b/crypto/testmgr.c
index 756940dfe87a..67fcb225f695 100644
--- a/crypto/testmgr.c
+++ b/crypto/testmgr.c
@@ -3833,6 +3833,16 @@ static const struct alg_test_desc alg_test_descs[] = {
 				}
 			}
 		}
+	}, {
+		.alg = "zlib-deflate",
+		.test = alg_test_comp,
+		.fips_allowed = 1,
+		.suite = {
+			.comp = {
+				.comp = __VECS(zlib_deflate_comp_tv_template),
+				.decomp = __VECS(zlib_deflate_decomp_tv_template)
+			}
+		}
 	}
 };
 
* Unmerged path crypto/testmgr.h
