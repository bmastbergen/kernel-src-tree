target: implement WRITE_SAME with UNMAP bit using ->execute_unmap

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] implement WRITE_SAME with UNMAP bit using ->execute_unmap (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 93.44%
commit-author Christoph Hellwig <hch@lst.de>
commit b753d643555e548163adfa2de9d75e0257e4b356
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b753d643.failed

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Andy Grover <agrover@redhat.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit b753d643555e548163adfa2de9d75e0257e4b356)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_file.c
#	drivers/target/target_core_iblock.c
#	include/target/target_core_backend.h
diff --cc drivers/target/target_core_file.c
index 909f66aed985,f5da2c1891b5..000000000000
--- a/drivers/target/target_core_file.c
+++ b/drivers/target/target_core_file.c
@@@ -636,37 -519,6 +636,40 @@@ fd_do_unmap(struct se_cmd *cmd, void *p
  }
  
  static sense_reason_t
++<<<<<<< HEAD
 +fd_execute_write_same_unmap(struct se_cmd *cmd)
 +{
 +	struct se_device *se_dev = cmd->se_dev;
 +	struct fd_dev *fd_dev = FD_DEV(se_dev);
 +	struct file *file = fd_dev->fd_file;
 +	sector_t lba = cmd->t_task_lba;
 +	sector_t nolb = sbc_get_write_same_sectors(cmd);
 +	sense_reason_t ret;
 +
 +	if (!nolb) {
 +		target_complete_cmd(cmd, SAM_STAT_GOOD);
 +		return 0;
 +	}
 +
 +	ret = fd_do_unmap(cmd, file, lba, nolb);
 +	if (ret)
 +		return ret;
 +
 +	target_complete_cmd(cmd, GOOD);
 +	return 0;
 +}
 +
 +static sense_reason_t
 +fd_execute_unmap(struct se_cmd *cmd)
 +{
 +	struct file *file = FD_DEV(cmd->se_dev)->fd_file;
 +
 +	return sbc_execute_unmap(cmd, fd_do_unmap, file);
 +}
 +
 +static sense_reason_t
++=======
++>>>>>>> b753d643555e (target: implement WRITE_SAME with UNMAP bit using ->execute_unmap)
  fd_execute_rw(struct se_cmd *cmd, struct scatterlist *sgl, u32 sgl_nents,
  	      enum dma_data_direction data_direction)
  {
diff --cc drivers/target/target_core_iblock.c
index 4ff1c8404aab,a869022b136e..000000000000
--- a/drivers/target/target_core_iblock.c
+++ b/drivers/target/target_core_iblock.c
@@@ -431,30 -431,6 +431,33 @@@ iblock_do_unmap(struct se_cmd *cmd, voi
  }
  
  static sense_reason_t
++<<<<<<< HEAD
 +iblock_execute_unmap(struct se_cmd *cmd)
 +{
 +	struct block_device *bdev = IBLOCK_DEV(cmd->se_dev)->ibd_bd;
 +
 +	return sbc_execute_unmap(cmd, iblock_do_unmap, bdev);
 +}
 +
 +static sense_reason_t
 +iblock_execute_write_same_unmap(struct se_cmd *cmd)
 +{
 +	struct block_device *bdev = IBLOCK_DEV(cmd->se_dev)->ibd_bd;
 +	sector_t lba = cmd->t_task_lba;
 +	sector_t nolb = sbc_get_write_same_sectors(cmd);
 +	sense_reason_t ret;
 +
 +	ret = iblock_do_unmap(cmd, bdev, lba, nolb);
 +	if (ret)
 +		return ret;
 +
 +	target_complete_cmd(cmd, GOOD);
 +	return 0;
 +}
 +
 +static sense_reason_t
++=======
++>>>>>>> b753d643555e (target: implement WRITE_SAME with UNMAP bit using ->execute_unmap)
  iblock_execute_write_same(struct se_cmd *cmd)
  {
  	struct iblock_req *ibr;
diff --cc include/target/target_core_backend.h
index b898a92cae3d,1e5c8f949bae..000000000000
--- a/include/target/target_core_backend.h
+++ b/include/target/target_core_backend.h
@@@ -66,12 -49,12 +66,17 @@@ struct sbc_ops 
  				     u32, enum dma_data_direction);
  	sense_reason_t (*execute_sync_cache)(struct se_cmd *cmd);
  	sense_reason_t (*execute_write_same)(struct se_cmd *cmd);
++<<<<<<< HEAD
 +	sense_reason_t (*execute_write_same_unmap)(struct se_cmd *cmd);
 +	sense_reason_t (*execute_unmap)(struct se_cmd *cmd);
++=======
+ 	sense_reason_t (*execute_unmap)(struct se_cmd *cmd,
+ 				sector_t lba, sector_t nolb);
++>>>>>>> b753d643555e (target: implement WRITE_SAME with UNMAP bit using ->execute_unmap)
  };
  
 -int	transport_backend_register(const struct target_backend_ops *);
 -void	target_backend_unregister(const struct target_backend_ops *);
 +int	transport_subsystem_register(struct se_subsystem_api *);
 +void	transport_subsystem_release(struct se_subsystem_api *);
  
  void	target_complete_cmd(struct se_cmd *, u8);
  void	target_complete_cmd_with_length(struct se_cmd *, u8, int);
* Unmerged path drivers/target/target_core_file.c
* Unmerged path drivers/target/target_core_iblock.c
diff --git a/drivers/target/target_core_sbc.c b/drivers/target/target_core_sbc.c
index 7a60ae01750a..16c3e8750ffd 100644
--- a/drivers/target/target_core_sbc.c
+++ b/drivers/target/target_core_sbc.c
@@ -176,6 +176,23 @@ sector_t sbc_get_write_same_sectors(struct se_cmd *cmd)
 }
 EXPORT_SYMBOL(sbc_get_write_same_sectors);
 
+static sense_reason_t
+sbc_execute_write_same_unmap(struct se_cmd *cmd)
+{
+	struct sbc_ops *ops = cmd->protocol_data;
+	sector_t nolb = sbc_get_write_same_sectors(cmd);
+	sense_reason_t ret;
+
+	if (nolb) {
+		ret = ops->execute_unmap(cmd, cmd->t_task_lba, nolb);
+		if (ret)
+			return ret;
+	}
+
+	target_complete_cmd(cmd, GOOD);
+	return 0;
+}
+
 static sense_reason_t
 sbc_emulate_noop(struct se_cmd *cmd)
 {
@@ -299,7 +316,7 @@ sbc_setup_write_same(struct se_cmd *cmd, unsigned char *flags, struct sbc_ops *o
 	 * translated into block discard requests within backend code.
 	 */
 	if (flags[0] & 0x08) {
-		if (!ops->execute_write_same_unmap)
+		if (!ops->execute_unmap)
 			return TCM_UNSUPPORTED_SCSI_OPCODE;
 
 		if (!dev->dev_attrib.emulate_tpws) {
@@ -307,7 +324,7 @@ sbc_setup_write_same(struct se_cmd *cmd, unsigned char *flags, struct sbc_ops *o
 			       " has emulate_tpws disabled\n");
 			return TCM_UNSUPPORTED_SCSI_OPCODE;
 		}
-		cmd->execute_cmd = ops->execute_write_same_unmap;
+		cmd->execute_cmd = sbc_execute_write_same_unmap;
 		return 0;
 	}
 	if (!ops->execute_write_same)
* Unmerged path include/target/target_core_backend.h
