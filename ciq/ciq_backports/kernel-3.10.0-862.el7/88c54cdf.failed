ALSA: core: Fix unexpected error at replacing user TLV

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit 88c54cdf61f508ebcf8da2d819f5dfc03e954d1d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/88c54cdf.failed

When user tries to replace the user-defined control TLV, the kernel
checks the change of its content via memcmp().  The problem is that
the kernel passes the return value from memcmp() as is.  memcmp()
gives a non-zero negative value depending on the comparison result,
and this shall be recognized as an error code.

The patch covers that corner-case, return 1 properly for the changed
TLV.

Fixes: 8aa9b586e420 ("[ALSA] Control API - more robust TLV implementation")
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 88c54cdf61f508ebcf8da2d819f5dfc03e954d1d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/core/control.c
diff --cc sound/core/control.c
index e37a25473eef,4525e127afd9..000000000000
--- a/sound/core/control.c
+++ b/sound/core/control.c
@@@ -1111,32 -1117,50 +1111,48 @@@ static int snd_ctl_elem_user_put(struc
  	return change;
  }
  
 -static int snd_ctl_elem_user_tlv(struct snd_kcontrol *kcontrol,
 -				 int op_flag,
 -				 unsigned int size,
 -				 unsigned int __user *tlv)
 +static int replace_user_tlv(struct snd_kcontrol *kctl, unsigned int __user *buf,
 +			    unsigned int size)
  {
 -	struct user_element *ue = kcontrol->private_data;
 -	int change = 0;
 -	void *new_data;
 +	struct user_element *ue = kctl->private_data;
 +	unsigned int *container;
 +	int change;
  
 -	if (op_flag == SNDRV_CTL_TLV_OP_WRITE) {
 -		if (size > 1024 * 128)	/* sane value */
 -			return -EINVAL;
 +	if (size > 1024 * 128)	/* sane value */
 +		return -EINVAL;
  
++<<<<<<< HEAD
 +	container = memdup_user(buf, size);
 +	if (IS_ERR(container))
 +		return PTR_ERR(container);
++=======
+ 		new_data = memdup_user(tlv, size);
+ 		if (IS_ERR(new_data))
+ 			return PTR_ERR(new_data);
+ 		mutex_lock(&ue->card->user_ctl_lock);
+ 		change = ue->tlv_data_size != size;
+ 		if (!change)
+ 			change = memcmp(ue->tlv_data, new_data, size) != 0;
+ 		kfree(ue->tlv_data);
+ 		ue->tlv_data = new_data;
+ 		ue->tlv_data_size = size;
+ 		mutex_unlock(&ue->card->user_ctl_lock);
+ 	} else {
+ 		int ret = 0;
++>>>>>>> 88c54cdf61f5 (ALSA: core: Fix unexpected error at replacing user TLV)
  
 -		mutex_lock(&ue->card->user_ctl_lock);
 -		if (!ue->tlv_data_size || !ue->tlv_data) {
 -			ret = -ENXIO;
 -			goto err_unlock;
 -		}
 -		if (size < ue->tlv_data_size) {
 -			ret = -ENOSPC;
 -			goto err_unlock;
 -		}
 -		if (copy_to_user(tlv, ue->tlv_data, ue->tlv_data_size))
 -			ret = -EFAULT;
 -err_unlock:
 -		mutex_unlock(&ue->card->user_ctl_lock);
 -		if (ret)
 -			return ret;
 +	change = ue->tlv_data_size != size;
 +	if (!change)
 +		change = memcmp(ue->tlv_data, container, size);
 +	if (!change) {
 +		kfree(container);
 +		return 0;
  	}
 +
 +	kfree(ue->tlv_data);
 +	ue->tlv_data = container;
 +	ue->tlv_data_size = size;
 +
  	return change;
  }
  
* Unmerged path sound/core/control.c
