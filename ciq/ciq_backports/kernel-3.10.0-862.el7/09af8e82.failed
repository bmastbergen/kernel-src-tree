ACPICA: Events: Add support to return both enable/status register values for GPE and fixed event.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [acpi] acpica: events: Add support to return both enable/status register values for GPE and fixed event (Jeremy McNicoll) [1172010]
Rebuild_FUZZ: 99.48%
commit-author Lv Zheng <lv.zheng@intel.com>
commit 09af8e8290deaff821ced01ea83594ee4c21e8df
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/09af8e82.failed

ACPICA commit e25d791e4b3d5b9f4ead298269610cb05f89749a

There is a facility in Linux, developers can obtain GPE and fixed event
status via /sys/firmware/interrupts/. This is implemented using
acpi_get_event_status() and acpi_get_gpe_status(). Recently while debugging some
GPE race issues, it is found that the facility is lacking in the ability to
obtain real hardware register values, the confusing information makes
debugging difficult.

This patch modifies acpi_get_gpe_status() to return EN register values to fix
this gap. Then flags returned from acpi_get_event_status() and
acpi_get_gpe_status() are also cleaned up to reflect this change.

The old ACPI_EVENT_FLAG_SET is carefully kept to avoid regressions. It can
be deleted after we can make sure all its references are removed from OSPM
code. Lv Zheng.

Link: https://github.com/acpica/acpica/commit/e25d791e
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Signed-off-by: Bob Moore <robert.moore@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 09af8e8290deaff821ced01ea83594ee4c21e8df)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/acpica/evxfevnt.c
#	include/acpi/actypes.h
diff --cc drivers/acpi/acpica/evxfevnt.c
index 39d06af5e347,faad911d46b5..000000000000
--- a/drivers/acpi/acpica/evxfevnt.c
+++ b/drivers/acpi/acpica/evxfevnt.c
@@@ -343,25 -350,31 +343,40 @@@ acpi_status acpi_get_event_status(u32 e
  
  	status =
  	    acpi_read_bit_register(acpi_gbl_fixed_event_info[event].
 -				   enable_register_id, &in_byte);
 -	if (ACPI_FAILURE(status)) {
 +			      enable_register_id, &value);
 +	if (ACPI_FAILURE(status))
  		return_ACPI_STATUS(status);
 -	}
  
++<<<<<<< HEAD
 +	*event_status = value;
++=======
+ 	if (in_byte) {
+ 		local_event_status |=
+ 		    (ACPI_EVENT_FLAG_ENABLED | ACPI_EVENT_FLAG_ENABLE_SET);
+ 	}
+ 
+ 	/* Fixed event currently active? */
++>>>>>>> 09af8e8290de (ACPICA: Events: Add support to return both enable/status register values for GPE and fixed event.)
  
  	status =
  	    acpi_read_bit_register(acpi_gbl_fixed_event_info[event].
 -				   status_register_id, &in_byte);
 -	if (ACPI_FAILURE(status)) {
 +			      status_register_id, &value);
 +	if (ACPI_FAILURE(status))
  		return_ACPI_STATUS(status);
 -	}
  
++<<<<<<< HEAD
 +	if (value)
 +		*event_status |= ACPI_EVENT_FLAG_SET;
++=======
+ 	if (in_byte) {
+ 		local_event_status |= ACPI_EVENT_FLAG_STATUS_SET;
+ 	}
++>>>>>>> 09af8e8290de (ACPICA: Events: Add support to return both enable/status register values for GPE and fixed event.)
 +
 +	if (acpi_gbl_fixed_event_handlers[event].handler)
 +		*event_status |= ACPI_EVENT_FLAG_HANDLE;
  
 -	(*event_status) = local_event_status;
 -	return_ACPI_STATUS(AE_OK);
 +	return_ACPI_STATUS(status);
  }
  
  ACPI_EXPORT_SYMBOL(acpi_get_event_status)
diff --cc include/acpi/actypes.h
index 50e47dab668a,f18b7a814730..000000000000
--- a/include/acpi/actypes.h
+++ b/include/acpi/actypes.h
@@@ -690,30 -733,26 +690,50 @@@ typedef u32 acpi_event_type
   * The encoding of acpi_event_status is illustrated below.
   * Note that a set bit (1) indicates the property is TRUE
   * (e.g. if bit 0 is set then the event is enabled).
++<<<<<<< HEAD
 + * +-------------+-+-+-+-+
 + * |   Bits 31:4 |3|2|1|0|
 + * +-------------+-+-+-+-+
 + *          |     | | | |
 + *          |     | | | +- Enabled?
 + *          |     | | +--- Enabled for wake?
 + *          |     | +----- Set?
 + *          |     +------- Has a handler?
 + *          +----------- <Reserved>
++=======
+  * +-------------+-+-+-+-+-+
+  * |   Bits 31:5 |4|3|2|1|0|
+  * +-------------+-+-+-+-+-+
+  *          |     | | | | |
+  *          |     | | | | +- Enabled?
+  *          |     | | | +--- Enabled for wake?
+  *          |     | | +----- Status bit set?
+  *          |     | +------- Enable bit set?
+  *          |     +--------- Has a handler?
+  *          +--------------- <Reserved>
++>>>>>>> 09af8e8290de (ACPICA: Events: Add support to return both enable/status register values for GPE and fixed event.)
   */
  typedef u32 acpi_event_status;
  
  #define ACPI_EVENT_FLAG_DISABLED        (acpi_event_status) 0x00
  #define ACPI_EVENT_FLAG_ENABLED         (acpi_event_status) 0x01
  #define ACPI_EVENT_FLAG_WAKE_ENABLED    (acpi_event_status) 0x02
++<<<<<<< HEAD
 +#define ACPI_EVENT_FLAG_SET             (acpi_event_status) 0x04
 +#define ACPI_EVENT_FLAG_HANDLE		(acpi_event_status) 0x08
 +
 +/*
 + * General Purpose Events (GPE)
 + */
 +#define ACPI_GPE_INVALID                0xFF
 +#define ACPI_GPE_MAX                    0xFF
 +#define ACPI_NUM_GPE                    256
++=======
+ #define ACPI_EVENT_FLAG_STATUS_SET      (acpi_event_status) 0x04
+ #define ACPI_EVENT_FLAG_ENABLE_SET      (acpi_event_status) 0x08
+ #define ACPI_EVENT_FLAG_HAS_HANDLER     (acpi_event_status) 0x10
+ #define ACPI_EVENT_FLAG_SET             ACPI_EVENT_FLAG_STATUS_SET
++>>>>>>> 09af8e8290de (ACPICA: Events: Add support to return both enable/status register values for GPE and fixed event.)
  
  /* Actions for acpi_set_gpe, acpi_gpe_wakeup, acpi_hw_low_set_gpe */
  
* Unmerged path drivers/acpi/acpica/evxfevnt.c
diff --git a/drivers/acpi/acpica/hwgpe.c b/drivers/acpi/acpica/hwgpe.c
index 96540506058f..32f9f3055226 100644
--- a/drivers/acpi/acpica/hwgpe.c
+++ b/drivers/acpi/acpica/hwgpe.c
@@ -236,6 +236,17 @@ acpi_hw_get_gpe_status(struct acpi_gpe_event_info * gpe_event_info,
 		local_event_status |= ACPI_EVENT_FLAG_WAKE_ENABLED;
 	}
 
+	/* GPE currently enabled (enable bit == 1)? */
+
+	status = acpi_hw_read(&in_byte, &gpe_register_info->enable_address);
+	if (ACPI_FAILURE(status)) {
+		return (status);
+	}
+
+	if (register_bit & in_byte) {
+		local_event_status |= ACPI_EVENT_FLAG_ENABLE_SET;
+	}
+
 	/* GPE currently active (status bit == 1)? */
 
 	status = acpi_hw_read(&in_byte, &gpe_register_info->status_address);
@@ -244,7 +255,7 @@ acpi_hw_get_gpe_status(struct acpi_gpe_event_info * gpe_event_info,
 	}
 
 	if (register_bit & in_byte) {
-		local_event_status |= ACPI_EVENT_FLAG_SET;
+		local_event_status |= ACPI_EVENT_FLAG_STATUS_SET;
 	}
 
 	/* Set return value */
* Unmerged path include/acpi/actypes.h
