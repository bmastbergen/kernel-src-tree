netvsc: Properly initialize the return value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author K. Y. Srinivasan <kys@microsoft.com>
commit 386f57622cc3bbb39b9c00fc8762bc9ab28e0f8d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/386f5762.failed

Initialize the return value correctly.

	Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 386f57622cc3bbb39b9c00fc8762bc9ab28e0f8d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index 1f2fdf8f9b74,f830bbbd8ad4..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -893,30 -851,34 +893,34 @@@ static int netvsc_set_link_ksettings(st
  static int netvsc_change_mtu(struct net_device *ndev, int mtu)
  {
  	struct net_device_context *ndevctx = netdev_priv(ndev);
 -	struct netvsc_device *nvdev = rtnl_dereference(ndevctx->nvdev);
 +	struct netvsc_device *nvdev = ndevctx->nvdev;
  	struct hv_device *hdev = ndevctx->device_ctx;
  	struct netvsc_device_info device_info;
++<<<<<<< HEAD
 +	int limit = ETH_DATA_LEN;
 +	u32 num_chn;
++=======
+ 	bool was_running;
++>>>>>>> 386f57622cc3 (netvsc: Properly initialize the return value)
  	int ret = 0;
  
 -	if (!nvdev || nvdev->destroy)
 +	if (ndevctx->start_remove || !nvdev || nvdev->destroy)
  		return -ENODEV;
  
 -	was_running = netif_running(ndev);
 -	if (was_running) {
 -		ret = netvsc_close(ndev);
 -		if (ret)
 -			return ret;
 -	}
 +	if (nvdev->nvsp_version >= NVSP_PROTOCOL_VERSION_2)
 +		limit = NETVSC_MTU - ETH_HLEN;
  
 -	memset(&device_info, 0, sizeof(device_info));
 -	device_info.ring_size = ring_size;
 -	device_info.num_chn = nvdev->num_chn;
 -	device_info.max_num_vrss_chns = nvdev->num_chn;
 +	if (mtu < NETVSC_MTU_MIN || mtu > limit)
 +		return -EINVAL;
  
 -	rndis_filter_device_remove(hdev, nvdev);
 +	ret = netvsc_close(ndev);
 +	if (ret)
 +		goto out;
  
 -	/* 'nvdev' has been freed in rndis_filter_device_remove() ->
 -	 * netvsc_device_remove () -> free_netvsc_device().
 -	 * We mustn't access it before it's re-created in
 -	 * rndis_filter_device_add() -> netvsc_device_add().
 -	 */
 +	num_chn = nvdev->num_chn;
 +
 +	ndevctx->start_remove = true;
 +	rndis_filter_device_remove(hdev);
  
  	ndev->mtu = mtu;
  
* Unmerged path drivers/net/hyperv/netvsc_drv.c
