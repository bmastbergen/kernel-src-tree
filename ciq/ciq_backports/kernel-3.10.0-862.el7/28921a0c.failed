i40e: remove workaround for Open Firmware MAC address

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 28921a0c2f5d4d051eff3f1db0588dea7cb8fe49
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/28921a0c.failed

Since commit b499ffb0a22c ("i40e: Look up MAC address in Open Firmware
or IDPROM"), we've had support for obtaining the MAC address
form Open Firmware or IDPROM.

This code relied on sending the Open Firmware address directly to the
device firmware instead of relying on our MAC/VLAN filter list. Thus,
a work around was introduced in commit b1b15df59232 ("i40e: Explicitly
write platform-specific mac address after PF reset")

We refactored the Open Firmware address enablement code in the ill-named
commit 41c4c2b50d52 ("i40e: allow look-up of MAC address from Open
Firmware or IDPROM")

Since this refactor, we no longer even set I40E_FLAG_PF_MAC. Further, we
don't need this work around, because we actually store the MAC address
as part of the MAC/VLAN filter hash. Thus, we will restore the address
correctly upon reset.

The refactor above failed to revert the workaround, so do that now.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 28921a0c2f5d4d051eff3f1db0588dea7cb8fe49)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e.h
diff --cc drivers/net/ethernet/intel/i40e/i40e.h
index 4852c04654f3,d0c1bf5441d8..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@@ -417,29 -439,13 +417,32 @@@ struct i40e_pf 
  #define I40E_FLAG_PTP				BIT_ULL(25)
  #define I40E_FLAG_MFP_ENABLED			BIT_ULL(26)
  #define I40E_FLAG_UDP_FILTER_SYNC		BIT_ULL(27)
 +#define I40E_FLAG_PORT_ID_VALID			BIT_ULL(28)
  #define I40E_FLAG_DCB_CAPABLE			BIT_ULL(29)
 +#define I40E_FLAG_RSS_AQ_CAPABLE		BIT_ULL(31)
 +#define I40E_FLAG_HW_ATR_EVICT_CAPABLE		BIT_ULL(32)
 +#define I40E_FLAG_OUTER_UDP_CSUM_CAPABLE	BIT_ULL(33)
 +#define I40E_FLAG_128_QP_RSS_CAPABLE		BIT_ULL(34)
 +#define I40E_FLAG_WB_ON_ITR_CAPABLE		BIT_ULL(35)
  #define I40E_FLAG_VEB_STATS_ENABLED		BIT_ULL(37)
 +#define I40E_FLAG_MULTIPLE_TCP_UDP_RSS_PCTYPE	BIT_ULL(38)
  #define I40E_FLAG_LINK_POLLING_ENABLED		BIT_ULL(39)
  #define I40E_FLAG_VEB_MODE_ENABLED		BIT_ULL(40)
++<<<<<<< HEAD
 +#define I40E_FLAG_GENEVE_OFFLOAD_CAPABLE	BIT_ULL(41)
 +#define I40E_FLAG_NO_PCI_LINK_CHECK		BIT_ULL(42)
 +#define I40E_FLAG_100M_SGMII_CAPABLE		BIT_ULL(43)
 +#define I40E_FLAG_RESTART_AUTONEG		BIT_ULL(44)
 +#define I40E_FLAG_NO_DCB_SUPPORT		BIT_ULL(45)
 +#define I40E_FLAG_USE_SET_LLDP_MIB		BIT_ULL(46)
 +#define I40E_FLAG_STOP_FW_LLDP			BIT_ULL(47)
 +#define I40E_FLAG_PHY_CONTROLS_LEDS		BIT_ULL(48)
 +#define I40E_FLAG_PF_MAC			BIT_ULL(50)
++=======
++>>>>>>> 28921a0c2f5d (i40e: remove workaround for Open Firmware MAC address)
  #define I40E_FLAG_TRUE_PROMISC_SUPPORT		BIT_ULL(51)
 +#define I40E_FLAG_HAVE_CRT_RETIMER		BIT_ULL(52)
 +#define I40E_FLAG_PTP_L4_CAPABLE		BIT_ULL(53)
  #define I40E_FLAG_CLIENT_RESET			BIT_ULL(54)
  #define I40E_FLAG_TEMP_LINK_POLLING		BIT_ULL(55)
  #define I40E_FLAG_CLIENT_L2_CHANGE		BIT_ULL(56)
* Unmerged path drivers/net/ethernet/intel/i40e/i40e.h
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 32ff0c8dc416..c2731c30bd83 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -2756,44 +2756,6 @@ static int i40e_vlan_rx_kill_vid(struct net_device *netdev,
 	return 0;
 }
 
-/**
- * i40e_macaddr_init - explicitly write the mac address filters
- *
- * @vsi: pointer to the vsi
- * @macaddr: the MAC address
- *
- * This is needed when the macaddr has been obtained by other
- * means than the default, e.g., from Open Firmware or IDPROM.
- * Returns 0 on success, negative on failure
- **/
-static int i40e_macaddr_init(struct i40e_vsi *vsi, u8 *macaddr)
-{
-	int ret;
-	struct i40e_aqc_add_macvlan_element_data element;
-
-	ret = i40e_aq_mac_address_write(&vsi->back->hw,
-					I40E_AQC_WRITE_TYPE_LAA_WOL,
-					macaddr, NULL);
-	if (ret) {
-		dev_info(&vsi->back->pdev->dev,
-			 "Addr change for VSI failed: %d\n", ret);
-		return -EADDRNOTAVAIL;
-	}
-
-	memset(&element, 0, sizeof(element));
-	ether_addr_copy(element.mac_addr, macaddr);
-	element.flags = cpu_to_le16(I40E_AQC_MACVLAN_ADD_PERFECT_MATCH);
-	ret = i40e_aq_add_macvlan(&vsi->back->hw, vsi->seid, &element, 1, NULL);
-	if (ret) {
-		dev_info(&vsi->back->pdev->dev,
-			 "add filter failed err %s aq_err %s\n",
-			 i40e_stat_str(&vsi->back->hw, ret),
-			 i40e_aq_str(&vsi->back->hw,
-				     vsi->back->hw.aq.asq_last_status));
-	}
-	return ret;
-}
-
 /**
  * i40e_restore_vlan - Reinstate vlans when vsi/netdev comes back up
  * @vsi: the vsi being brought back up
@@ -3240,19 +3202,8 @@ static void i40e_vsi_config_dcb_rings(struct i40e_vsi *vsi)
  **/
 static void i40e_set_vsi_rx_mode(struct i40e_vsi *vsi)
 {
-	struct i40e_pf *pf = vsi->back;
-	int err;
-
 	if (vsi->netdev)
 		i40e_set_rx_mode(vsi->netdev);
-
-	if (!!(pf->flags & I40E_FLAG_PF_MAC)) {
-		err = i40e_macaddr_init(vsi, pf->hw.mac.addr);
-		if (err) {
-			dev_warn(&pf->pdev->dev,
-				 "could not set up macaddr; err %d\n", err);
-		}
-	}
 }
 
 /**
@@ -10217,17 +10168,6 @@ struct i40e_vsi *i40e_vsi_setup(struct i40e_pf *pf, u8 type,
 	switch (vsi->type) {
 	/* setup the netdev if needed */
 	case I40E_VSI_MAIN:
-		/* Apply relevant filters if a platform-specific mac
-		 * address was selected.
-		 */
-		if (!!(pf->flags & I40E_FLAG_PF_MAC)) {
-			ret = i40e_macaddr_init(vsi, pf->hw.mac.addr);
-			if (ret) {
-				dev_warn(&pf->pdev->dev,
-					 "could not set up macaddr; err %d\n",
-					 ret);
-			}
-		}
 	case I40E_VSI_VMDQ2:
 	case I40E_VSI_FCOE:
 		ret = i40e_config_netdev(vsi);
