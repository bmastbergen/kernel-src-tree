intel_pstate: Use pr_fmt

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Joe Perches <joe@perches.com>
commit 4836df173aaed4b93e4d4b5c51e40f12e53ea26f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/4836df17.failed

Prefix the output using the more common kernel style.

	Signed-off-by: Joe Perches <joe@perches.com>
	Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
[ rjw: Rebase ]
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 4836df173aaed4b93e4d4b5c51e40f12e53ea26f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 1bbc3643a3bc,1866705ee5da..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -1234,21 -1239,9 +1236,25 @@@ static int intel_pstate_init_cpu(unsign
  
  	intel_pstate_get_cpu_pstates(cpu);
  
 +	init_timer_deferrable(&cpu->timer);
 +	cpu->timer.data = (unsigned long)cpu;
 +	cpu->timer.expires = jiffies + HZ/100;
 +
++<<<<<<< HEAD
 +	if (!hwp_active)
 +		cpu->timer.function = intel_pstate_timer_func;
 +	else
 +		cpu->timer.function = intel_hwp_timer_func;
 +
  	intel_pstate_busy_pid_reset(cpu);
 +	intel_pstate_sample(cpu);
  
 +	add_timer_on(&cpu->timer, cpunum);
 +
 +	pr_debug("Intel pstate controlling: cpu %d\n", cpunum);
++=======
+ 	pr_debug("controlling: cpu %d\n", cpunum);
++>>>>>>> 4836df173aae (intel_pstate: Use pr_fmt)
  
  	return 0;
  }
@@@ -1270,20 -1293,20 +1276,31 @@@ static int intel_pstate_set_policy(stru
  	if (!policy->cpuinfo.max_freq)
  		return -ENODEV;
  
 -	intel_pstate_clear_update_util_hook(policy->cpu);
 +	pr_debug("set_policy cpuinfo.max %u policy->max %u\n",
 +		 policy->cpuinfo.max_freq, policy->max);
  
 -	if (policy->policy == CPUFREQ_POLICY_PERFORMANCE) {
 +	if (policy->policy == CPUFREQ_POLICY_PERFORMANCE &&
 +	    policy->max >= policy->cpuinfo.max_freq) {
 +		pr_debug("intel_pstate: set performance\n");
  		limits = &performance_limits;
++<<<<<<< HEAD
 +		if (hwp_active)
 +			intel_pstate_hwp_set(policy->cpus);
 +		return 0;
++=======
+ 		if (policy->max >= policy->cpuinfo.max_freq) {
+ 			pr_debug("set performance\n");
+ 			intel_pstate_set_performance_limits(limits);
+ 			goto out;
+ 		}
+ 	} else {
+ 		pr_debug("set powersave\n");
+ 		limits = &powersave_limits;
++>>>>>>> 4836df173aae (intel_pstate: Use pr_fmt)
  	}
  
 +	pr_debug("intel_pstate: set powersave\n");
 +	limits = &powersave_limits;
  	limits->min_policy_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
  	limits->min_policy_pct = clamp_t(int, limits->min_policy_pct, 0 , 100);
  	limits->max_policy_pct = DIV_ROUND_UP(policy->max * 100,
@@@ -1331,9 -1355,10 +1348,15 @@@ static void intel_pstate_stop_cpu(struc
  	int cpu_num = policy->cpu;
  	struct cpudata *cpu = all_cpu_data[cpu_num];
  
++<<<<<<< HEAD
 +	pr_info("intel_pstate CPU %d exiting\n", cpu_num);
++=======
+ 	pr_debug("CPU %d exiting\n", cpu_num);
+ 
+ 	intel_pstate_clear_update_util_hook(cpu_num);
++>>>>>>> 4836df173aae (intel_pstate: Use pr_fmt)
  
 +	del_timer_sync(&all_cpu_data[cpu_num]->timer);
  	if (hwp_active)
  		return;
  
* Unmerged path drivers/cpufreq/intel_pstate.c
