x86/mm/pkeys: Dump PKRU with other kernel registers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] mm/pkeys: Dump PKRU with other kernel registers (Rui Wang) [1272615]
Rebuild_FUZZ: 95.92%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit c0b17b5bd4b7b98e7c6b67c9f69343b64711271b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c0b17b5b.failed

Protection Keys never affect kernel mappings.  But, they can
affect whether the kernel will fault when it touches a user
mapping.  The kernel doesn't touch user mappings without some
careful choreography and these accesses don't generally result in
oopses.  But, if one does, we definitely want to have PKRU
available so we can figure out if protection keys played a role.

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20160212210225.BF0D4482@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit c0b17b5bd4b7b98e7c6b67c9f69343b64711271b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/process_64.c
diff --cc arch/x86/kernel/process_64.c
index 2ef890660359,776229e98202..000000000000
--- a/arch/x86/kernel/process_64.c
+++ b/arch/x86/kernel/process_64.c
@@@ -110,7 -107,17 +110,13 @@@ void __show_regs(struct pt_regs *regs, 
  	get_debugreg(d3, 3);
  	get_debugreg(d6, 6);
  	get_debugreg(d7, 7);
 -
 -	/* Only print out debug registers if they are in their non-default state. */
 -	if ((d0 == 0) && (d1 == 0) && (d2 == 0) && (d3 == 0) &&
 -	    (d6 == DR6_RESERVED) && (d7 == 0x400))
 -		return;
 -
 -	printk(KERN_DEFAULT "DR0: %016lx DR1: %016lx DR2: %016lx\n", d0, d1, d2);
  	printk(KERN_DEFAULT "DR3: %016lx DR6: %016lx DR7: %016lx\n", d3, d6, d7);
++<<<<<<< HEAD
++=======
+ 
+ 	if (boot_cpu_has(X86_FEATURE_OSPKE))
+ 		printk(KERN_DEFAULT "PKRU: %08x\n", read_pkru());
++>>>>>>> c0b17b5bd4b7 (x86/mm/pkeys: Dump PKRU with other kernel registers)
  }
  
  void release_thread(struct task_struct *dead_task)
* Unmerged path arch/x86/kernel/process_64.c
