i2c: rename address check functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [i2c] rename address check functions (Gopal Tiwari) [1456705]
Rebuild_FUZZ: 92.31%
commit-author Wolfram Sang <wsa+renesas@sang-engineering.com>
commit 66be6056eba80690bb7fa3d983c21494e1950bea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/66be6056.failed

The current naming is based on the arguments of the functions and not on
what they do. Even I as the maintainer find this confusing, so let's
rename them to something more descriptive.

	Tested-by: Andrey Danin <danindrey@mail.ru>
	Acked-by: Stephen Warren <swarren@nvidia.com>
	Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit 66be6056eba80690bb7fa3d983c21494e1950bea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/i2c-core.c
diff --cc drivers/i2c/i2c-core.c
index c4f8b018e3f7,fced494040a8..000000000000
--- a/drivers/i2c/i2c-core.c
+++ b/drivers/i2c/i2c-core.c
@@@ -2647,6 -2985,68 +2647,71 @@@ s32 i2c_smbus_xfer(struct i2c_adapter *
  }
  EXPORT_SYMBOL(i2c_smbus_xfer);
  
++<<<<<<< HEAD
++=======
+ #if IS_ENABLED(CONFIG_I2C_SLAVE)
+ int i2c_slave_register(struct i2c_client *client, i2c_slave_cb_t slave_cb)
+ {
+ 	int ret;
+ 
+ 	if (!client || !slave_cb) {
+ 		WARN(1, "insufficent data\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	if (!(client->flags & I2C_CLIENT_TEN)) {
+ 		/* Enforce stricter address checking */
+ 		ret = i2c_check_7bit_addr_validity_strict(client->addr);
+ 		if (ret) {
+ 			dev_err(&client->dev, "%s: invalid address\n", __func__);
+ 			return ret;
+ 		}
+ 	}
+ 
+ 	if (!client->adapter->algo->reg_slave) {
+ 		dev_err(&client->dev, "%s: not supported by adapter\n", __func__);
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	client->slave_cb = slave_cb;
+ 
+ 	i2c_lock_adapter(client->adapter);
+ 	ret = client->adapter->algo->reg_slave(client);
+ 	i2c_unlock_adapter(client->adapter);
+ 
+ 	if (ret) {
+ 		client->slave_cb = NULL;
+ 		dev_err(&client->dev, "%s: adapter returned error %d\n", __func__, ret);
+ 	}
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(i2c_slave_register);
+ 
+ int i2c_slave_unregister(struct i2c_client *client)
+ {
+ 	int ret;
+ 
+ 	if (!client->adapter->algo->unreg_slave) {
+ 		dev_err(&client->dev, "%s: not supported by adapter\n", __func__);
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	i2c_lock_adapter(client->adapter);
+ 	ret = client->adapter->algo->unreg_slave(client);
+ 	i2c_unlock_adapter(client->adapter);
+ 
+ 	if (ret == 0)
+ 		client->slave_cb = NULL;
+ 	else
+ 		dev_err(&client->dev, "%s: adapter returned error %d\n", __func__, ret);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL_GPL(i2c_slave_unregister);
+ #endif
+ 
++>>>>>>> 66be6056eba8 (i2c: rename address check functions)
  MODULE_AUTHOR("Simon G. Vogl <simon@tk.uni-linz.ac.at>");
  MODULE_DESCRIPTION("I2C-Bus main module");
  MODULE_LICENSE("GPL");
* Unmerged path drivers/i2c/i2c-core.c
