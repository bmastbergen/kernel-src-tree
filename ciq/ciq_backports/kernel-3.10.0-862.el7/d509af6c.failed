drm/i915: decouple gen9 and gen10 dp signal levels.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [gpu] drm/i915: decouple gen9 and gen10 dp signal levels (Rob Clark) [1520639]
Rebuild_FUZZ: 99.01%
commit-author Rodrigo Vivi <rodrigo.vivi@intel.com>
commit d509af6c85bb711f6299043cf43001ab1cdffd62
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d509af6c.failed

Let's decouple bxt, glk and cnl dp signal levels
from other DDIs to avoid confusion.

No functional change. Only a reorg to avoid messing
with currently working DP signal levels when
moving voltage swing sequences around to match spec.

v2: ddi_signal_levels is also called from other ddi
    platforms, so don't remove IS_GEN9_BC check from
    skl_ddi_set_iboos. (Ville).

	Cc: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
	Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Reviewed-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20170829232230.23051-2-rodrigo.vivi@intel.com
(cherry picked from commit d509af6c85bb711f6299043cf43001ab1cdffd62)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/intel_ddi.c
#	drivers/gpu/drm/i915/intel_dp.c
#	drivers/gpu/drm/i915/intel_drv.h
diff --cc drivers/gpu/drm/i915/intel_ddi.c
index d42007e133bd,9a887780f99f..000000000000
--- a/drivers/gpu/drm/i915/intel_ddi.c
+++ b/drivers/gpu/drm/i915/intel_ddi.c
@@@ -1643,12 -2069,25 +1643,32 @@@ u32 bxt_signal_levels(struct intel_dp *
  	struct drm_i915_private *dev_priv = to_i915(dport->base.base.dev);
  	struct intel_encoder *encoder = &dport->base;
  	enum port port = dport->port;
+ 	u32 level = intel_ddi_dp_level(intel_dp);
+ 
+ 	if (IS_CANNONLAKE(dev_priv))
+ 		cnl_ddi_vswing_sequence(encoder, level);
+ 	else
+ 		bxt_ddi_vswing_sequence(dev_priv, level, port, encoder->type);
+ 
+ 	return 0;
+ }
+ 
+ uint32_t ddi_signal_levels(struct intel_dp *intel_dp)
+ {
+ 	struct intel_digital_port *dport = dp_to_dig_port(intel_dp);
+ 	struct drm_i915_private *dev_priv = to_i915(dport->base.base.dev);
+ 	struct intel_encoder *encoder = &dport->base;
  	uint32_t level = intel_ddi_dp_level(intel_dp);
  
++<<<<<<< HEAD
 +	if (IS_SKYLAKE(dev_priv) || IS_KABYLAKE(dev_priv))
 +		skl_ddi_set_iboost(encoder, level);
 +	else if (IS_BROXTON(dev_priv))
 +		bxt_ddi_vswing_sequence(dev_priv, level, port, encoder->type);
++=======
+ 	if (IS_GEN9_BC(dev_priv))
+ 	    skl_ddi_set_iboost(encoder, level);
++>>>>>>> d509af6c85bb (drm/i915: decouple gen9 and gen10 dp signal levels.)
  
  	return DDI_BUF_TRANS_SELECT(level);
  }
diff --cc drivers/gpu/drm/i915/intel_dp.c
index 57bc90d641df,49a8c339b2b0..000000000000
--- a/drivers/gpu/drm/i915/intel_dp.c
+++ b/drivers/gpu/drm/i915/intel_dp.c
@@@ -3340,13 -3506,11 +3340,19 @@@ intel_dp_set_signal_levels(struct intel
  	uint32_t signal_levels, mask = 0;
  	uint8_t train_set = intel_dp->train_set[0];
  
- 	if (HAS_DDI(dev_priv)) {
+ 	if (IS_GEN9_LP(dev_priv) || IS_CANNONLAKE(dev_priv)) {
+ 		signal_levels = bxt_signal_levels(intel_dp);
+ 	} else if (HAS_DDI(dev_priv)) {
  		signal_levels = ddi_signal_levels(intel_dp);
++<<<<<<< HEAD
 +
 +		if (IS_BROXTON(dev_priv))
 +			signal_levels = 0;
 +		else
 +			mask = DDI_BUF_EMP_MASK;
++=======
+ 		mask = DDI_BUF_EMP_MASK;
++>>>>>>> d509af6c85bb (drm/i915: decouple gen9 and gen10 dp signal levels.)
  	} else if (IS_CHERRYVIEW(dev_priv)) {
  		signal_levels = chv_signal_levels(intel_dp);
  	} else if (IS_VALLEYVIEW(dev_priv)) {
diff --cc drivers/gpu/drm/i915/intel_drv.h
index 4b4b6889e2f0,469c06000774..000000000000
--- a/drivers/gpu/drm/i915/intel_drv.h
+++ b/drivers/gpu/drm/i915/intel_drv.h
@@@ -1148,44 -1244,39 +1148,50 @@@ void intel_crt_init(struct drm_device *
  void intel_crt_reset(struct drm_encoder *encoder);
  
  /* intel_ddi.c */
 +void intel_ddi_clk_select(struct intel_encoder *encoder,
 +			  struct intel_shared_dpll *pll);
  void intel_ddi_fdi_post_disable(struct intel_encoder *intel_encoder,
 -				const struct intel_crtc_state *old_crtc_state,
 -				const struct drm_connector_state *old_conn_state);
 -void hsw_fdi_link_train(struct intel_crtc *crtc,
 -			const struct intel_crtc_state *crtc_state);
 -void intel_ddi_init(struct drm_i915_private *dev_priv, enum port port);
 +				struct intel_crtc_state *old_crtc_state,
 +				struct drm_connector_state *old_conn_state);
 +void intel_prepare_dp_ddi_buffers(struct intel_encoder *encoder);
 +void hsw_fdi_link_train(struct drm_crtc *crtc);
 +void intel_ddi_init(struct drm_device *dev, enum port port);
  enum port intel_ddi_get_encoder_port(struct intel_encoder *intel_encoder);
  bool intel_ddi_get_hw_state(struct intel_encoder *encoder, enum pipe *pipe);
 -void intel_ddi_enable_transcoder_func(const struct intel_crtc_state *crtc_state);
 +void intel_ddi_enable_transcoder_func(struct drm_crtc *crtc);
  void intel_ddi_disable_transcoder_func(struct drm_i915_private *dev_priv,
  				       enum transcoder cpu_transcoder);
 -void intel_ddi_enable_pipe_clock(const struct intel_crtc_state *crtc_state);
 -void intel_ddi_disable_pipe_clock(const  struct intel_crtc_state *crtc_state);
 -struct intel_encoder *
 -intel_ddi_get_crtc_new_encoder(struct intel_crtc_state *crtc_state);
 -void intel_ddi_set_pipe_settings(const struct intel_crtc_state *crtc_state);
 +void intel_ddi_enable_pipe_clock(struct intel_crtc *intel_crtc);
 +void intel_ddi_disable_pipe_clock(struct intel_crtc *intel_crtc);
 +bool intel_ddi_pll_select(struct intel_crtc *crtc,
 +			  struct intel_crtc_state *crtc_state);
 +void intel_ddi_set_pipe_settings(struct drm_crtc *crtc);
  void intel_ddi_prepare_link_retrain(struct intel_dp *intel_dp);
  bool intel_ddi_connector_get_hw_state(struct intel_connector *intel_connector);
 -bool intel_ddi_is_audio_enabled(struct drm_i915_private *dev_priv,
 -				 struct intel_crtc *intel_crtc);
  void intel_ddi_get_config(struct intel_encoder *encoder,
  			  struct intel_crtc_state *pipe_config);
 +struct intel_encoder *
 +intel_ddi_get_crtc_new_encoder(struct intel_crtc_state *crtc_state);
  
 +void intel_ddi_init_dp_buf_reg(struct intel_encoder *encoder);
  void intel_ddi_clock_get(struct intel_encoder *encoder,
  			 struct intel_crtc_state *pipe_config);
++<<<<<<< HEAD
 +void intel_ddi_set_vc_payload_alloc(struct drm_crtc *crtc, bool state);
++=======
+ void intel_ddi_set_vc_payload_alloc(const struct intel_crtc_state *crtc_state,
+ 				    bool state);
+ u32 bxt_signal_levels(struct intel_dp *intel_dp);
++>>>>>>> d509af6c85bb (drm/i915: decouple gen9 and gen10 dp signal levels.)
  uint32_t ddi_signal_levels(struct intel_dp *intel_dp);
 -u8 intel_ddi_dp_voltage_max(struct intel_encoder *encoder);
 -
 -unsigned int intel_fb_align_height(const struct drm_framebuffer *fb,
 -				   int plane, unsigned int height);
 +struct intel_shared_dpll *intel_ddi_get_link_dpll(struct intel_dp *intel_dp,
 +						  int clock);
 +unsigned int intel_fb_align_height(struct drm_device *dev,
 +				   unsigned int height,
 +				   uint32_t pixel_format,
 +				   uint64_t fb_format_modifier);
 +u32 intel_fb_stride_alignment(const struct drm_i915_private *dev_priv,
 +			      uint64_t fb_modifier, uint32_t pixel_format);
  
  /* intel_audio.c */
  void intel_init_audio_hooks(struct drm_i915_private *dev_priv);
* Unmerged path drivers/gpu/drm/i915/intel_ddi.c
* Unmerged path drivers/gpu/drm/i915/intel_dp.c
* Unmerged path drivers/gpu/drm/i915/intel_drv.h
