blk-mq: fix potential race in queue restart and driver tag allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jens Axboe <axboe@fb.com>
commit 3c782d67c16889d753a79a8da5422c583d7cfd51
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3c782d67.failed

Once we mark the queue as needing a restart, re-check if we can
get a driver tag. This fixes a theoretical issue where the needed
IO completes _after_ blk_mq_get_driver_tag() fails, but before we
manage to set the restart bit.

	Signed-off-by: Jens Axboe <axboe@fb.com>
	Reviewed-by: Omar Sandoval <osandov@fb.com>
	Tested-by: Hannes Reinecke <hare@suse.com>
(cherry picked from commit 3c782d67c16889d753a79a8da5422c583d7cfd51)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 3b21482b7f01,fd80101c7591..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -846,6 -925,20 +846,23 @@@ bool blk_mq_dispatch_rq_list(struct blk
  		struct blk_mq_queue_data bd;
  
  		rq = list_first_entry(list, struct request, queuelist);
++<<<<<<< HEAD
++=======
+ 		if (!blk_mq_get_driver_tag(rq, &hctx, false)) {
+ 			if (!queued && reorder_tags_to_front(list))
+ 				continue;
+ 
+ 			/*
+ 			 * We failed getting a driver tag. Mark the queue(s)
+ 			 * as needing a restart. Retry getting a tag again,
+ 			 * in case the needed IO completed right before we
+ 			 * marked the queue as needing a restart.
+ 			 */
+ 			blk_mq_sched_mark_restart(hctx);
+ 			if (!blk_mq_get_driver_tag(rq, &hctx, false))
+ 				break;
+ 		}
++>>>>>>> 3c782d67c168 (blk-mq: fix potential race in queue restart and driver tag allocation)
  		list_del_init(&rq->queuelist);
  
  		bd.rq = rq;
* Unmerged path block/blk-mq.c
