radix-tree: add test for radix_tree_locate_item()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ross Zwisler <ross.zwisler@linux.intel.com>
commit eb73f7f3300c144c4b886dd56ea4c3d2b2d58249
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/eb73f7f3.failed

Add a unit test that provides coverage for the bug fixed in the commit
entitled "radix-tree: rewrite radix_tree_locate_item fix" from Hugh
Dickins.  I've verified that this test fails before his patch due to
miscalculated 'index' values in __locate() in lib/radix-tree.c, and
passes with his fix.

Link: http://lkml.kernel.org/r/1462307263-20623-1-git-send-email-ross.zwisler@linux.intel.com
	Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Cc: Hugh Dickins <hughd@google.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit eb73f7f3300c144c4b886dd56ea4c3d2b2d58249)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/radix-tree/main.c
diff --cc tools/testing/radix-tree/main.c
index 0e83cad27a9f,b7619ff3b552..000000000000
--- a/tools/testing/radix-tree/main.c
+++ b/tools/testing/radix-tree/main.c
@@@ -232,7 -232,64 +232,68 @@@ void copy_tag_check(void
  	item_kill_tree(&tree);
  }
  
++<<<<<<< HEAD
 +static void single_thread_tests(void)
++=======
+ static void __locate_check(struct radix_tree_root *tree, unsigned long index,
+ 			unsigned order)
+ {
+ 	struct item *item;
+ 	unsigned long index2;
+ 
+ 	item_insert_order(tree, index, order);
+ 	item = item_lookup(tree, index);
+ 	index2 = radix_tree_locate_item(tree, item);
+ 	if (index != index2) {
+ 		printf("index %ld order %d inserted; found %ld\n",
+ 			index, order, index2);
+ 		abort();
+ 	}
+ }
+ 
+ static void __order_0_locate_check(void)
+ {
+ 	RADIX_TREE(tree, GFP_KERNEL);
+ 	int i;
+ 
+ 	for (i = 0; i < 50; i++)
+ 		__locate_check(&tree, rand() % INT_MAX, 0);
+ 
+ 	item_kill_tree(&tree);
+ }
+ 
+ static void locate_check(void)
+ {
+ 	RADIX_TREE(tree, GFP_KERNEL);
+ 	unsigned order;
+ 	unsigned long offset, index;
+ 
+ 	__order_0_locate_check();
+ 
+ 	for (order = 0; order < 20; order++) {
+ 		for (offset = 0; offset < (1 << (order + 3));
+ 		     offset += (1UL << order)) {
+ 			for (index = 0; index < (1UL << (order + 5));
+ 			     index += (1UL << order)) {
+ 				__locate_check(&tree, index + offset, order);
+ 			}
+ 			if (radix_tree_locate_item(&tree, &tree) != -1)
+ 				abort();
+ 
+ 			item_kill_tree(&tree);
+ 		}
+ 	}
+ 
+ 	if (radix_tree_locate_item(&tree, &tree) != -1)
+ 		abort();
+ 	__locate_check(&tree, -1, 0);
+ 	if (radix_tree_locate_item(&tree, &tree) != -1)
+ 		abort();
+ 	item_kill_tree(&tree);
+ }
+ 
+ static void single_thread_tests(bool long_run)
++>>>>>>> eb73f7f3300c (radix-tree: add test for radix_tree_locate_item())
  {
  	int i;
  
diff --git a/tools/testing/radix-tree/linux/init.h b/tools/testing/radix-tree/linux/init.h
new file mode 100644
index 000000000000..360cabb3c4e7
--- /dev/null
+++ b/tools/testing/radix-tree/linux/init.h
@@ -0,0 +1 @@
+/* An empty file stub that allows radix-tree.c to compile. */
* Unmerged path tools/testing/radix-tree/main.c
