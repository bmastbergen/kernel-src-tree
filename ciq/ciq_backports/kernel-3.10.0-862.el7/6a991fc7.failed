mm/swap: fix kernel message in swap_info_get()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [mm] swap: fix kernel message in swap_info_get() (Jerome Marchand) [1400689]
Rebuild_FUZZ: 96.63%
commit-author Huang, Ying <ying.huang@intel.com>
commit 6a991fc72d1243b8da0c644d3147d3ec41a0b281
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6a991fc7.failed

Patch series "mm/swap: Regular page swap optimizations", v5.

Times have changed.  Coming generation of Solid state Block device
latencies are getting down to sub 100 usec, which is within an order of
magnitude of DRAM, and their performance is orders of magnitude higher
than the single- spindle rotational media we've swapped to historically.

This could benefit many usage scenearios.  For example cloud providers
who overcommit their memory (as VM don't use all the memory
provisioned).  Having a fast swap will allow them to be more aggressive
in memory overcommit and fit more VMs to a platform.

In our testing [see footnote], the median latency that the kernel adds
to a page fault is 15 usec, which comes quite close to the amount that
will be contributed by the underlying I/O devices.

The software latency comes mostly from contentions on the locks
protecting the radix tree of the swap cache and also the locks
protecting the individual swap devices.  The lock contentions already
consumed 35% of cpu cycles in our test.  In the very near future,
software latency will become the bottleneck to swap performnace as block
device I/O latency gets within the shouting distance of DRAM speed.

This patch set, reduced the median page fault latency from 15 usec to 4
usec (375% reduction) for DRAM based pmem block device.

This patch (of 9):

swap_info_get() is used not only in swap free code path but also in
page_swapcount(), etc.  So the original kernel message in swap_info_get()
is not correct now.  Fix it via replacing "swap_free" to "swap_info_get"
in the message.

Link: http://lkml.kernel.org/r/9b5f8bd6266f9da978c373f2384c8044df5e262c.1484082593.git.tim.c.chen@linux.intel.com
	Signed-off-by: "Huang, Ying" <ying.huang@intel.com>
	Signed-off-by: Tim Chen <tim.c.chen@linux.intel.com>
	Reviewed-by: Rik van Riel <riel@redhat.com>
	Cc: Aaron Lu <aaron.lu@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Christian Borntraeger <borntraeger@de.ibm.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
	Cc: Huang Ying <ying.huang@intel.com>
	Cc: Hugh Dickins <hughd@google.com>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Jonathan Corbet <corbet@lwn.net> escreveu:
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Shaohua Li <shli@kernel.org>
	Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 6a991fc72d1243b8da0c644d3147d3ec41a0b281)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swapfile.c
diff --cc mm/swapfile.c
index 44c2eac6b890,2001ce427a1d..000000000000
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@@ -543,16 -753,16 +543,29 @@@ static struct swap_info_struct *swap_in
  	return p;
  
  bad_free:
++<<<<<<< HEAD
 +	printk(KERN_ERR "swap_free: %s%08lx\n", Unused_offset, entry.val);
 +	goto out;
 +bad_offset:
 +	printk(KERN_ERR "swap_free: %s%08lx\n", Bad_offset, entry.val);
 +	goto out;
 +bad_device:
 +	printk(KERN_ERR "swap_free: %s%08lx\n", Unused_file, entry.val);
 +	goto out;
 +bad_nofile:
 +	printk(KERN_ERR "swap_free: %s%08lx\n", Bad_file, entry.val);
++=======
+ 	pr_err("swap_info_get: %s%08lx\n", Unused_offset, entry.val);
+ 	goto out;
+ bad_offset:
+ 	pr_err("swap_info_get: %s%08lx\n", Bad_offset, entry.val);
+ 	goto out;
+ bad_device:
+ 	pr_err("swap_info_get: %s%08lx\n", Unused_file, entry.val);
+ 	goto out;
+ bad_nofile:
+ 	pr_err("swap_info_get: %s%08lx\n", Bad_file, entry.val);
++>>>>>>> 6a991fc72d12 (mm/swap: fix kernel message in swap_info_get())
  out:
  	return NULL;
  }
* Unmerged path mm/swapfile.c
