dm: fix incomplete request_queue initialization

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Mike Snitzer <snitzer@redhat.com>
commit c100ec49fdd2222836ff8a17c7bfcc7611d2ee2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c100ec49.failed

DM is no longer prone to having its request_queue be improperly
initialized.

Summary of changes:

- defer DM's blk_register_queue() from add_disk()-time until
  dm_setup_md_queue() by using add_disk_no_queue_reg() in alloc_dev().

- dm_setup_md_queue() is updated to fully initialize DM's request_queue
  (_after_ all table loads have occurred and the request_queue's type,
  features and limits are known).

A very welcome side-effect of these changes is DM no longer needs to:
1) backfill the "mq" sysfs entry (because historically DM didn't
initialize the request_queue to use blk-mq until _after_
blk_register_queue() was called via add_disk()).
2) call elv_register_queue() to get .request_fn request-based DM
device's "iosched" exposed in syfs.

In addition, blk-mq debugfs support is now made available because
request-based DM's blk-mq request_queue is now properly initialized
before dm_setup_md_queue() calls blk_register_queue().

These changes also stave off the need to introduce new DM-specific
workarounds in block core, e.g. this proposal:
https://patchwork.kernel.org/patch/10067961/

In the end DM devices should be less unicorn in nature (relative to
initialization and availability of block core infrastructure provided by
the request_queue).

	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
	Tested-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit c100ec49fdd2222836ff8a17c7bfcc7611d2ee2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/dm-rq.c
#	drivers/md/dm.c
diff --cc drivers/md/dm-rq.c
index af63f9ff7872,c28357f5cb0e..000000000000
--- a/drivers/md/dm-rq.c
+++ b/drivers/md/dm-rq.c
@@@ -961,9 -810,6 +959,12 @@@ int dm_mq_init_request_queue(struct map
  	}
  	dm_init_md_queue(md);
  
++<<<<<<< HEAD
 +	/* backfill 'mq' sysfs registration normally done in blk_register_queue */
 +	blk_mq_register_dev(disk_to_dev(md->disk), q);
 +
++=======
++>>>>>>> c100ec49fdd2 (dm: fix incomplete request_queue initialization)
  	return 0;
  
  out_tag_set:
diff --cc drivers/md/dm.c
index 3a3e56a9c437,8c26bfc35335..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -1707,7 -1755,13 +1707,17 @@@ static struct mapped_device *alloc_dev(
  	md->disk->queue = md->queue;
  	md->disk->private_data = md;
  	sprintf(md->disk->disk_name, "dm-%d", minor);
++<<<<<<< HEAD
 +	add_disk(md->disk);
++=======
+ 
+ 	dax_dev = alloc_dax(md, md->disk->disk_name, &dm_dax_ops);
+ 	if (!dax_dev)
+ 		goto bad;
+ 	md->dax_dev = dax_dev;
+ 
+ 	add_disk_no_queue_reg(md->disk);
++>>>>>>> c100ec49fdd2 (dm: fix incomplete request_queue initialization)
  	format_dev_t(md->name, MKDEV(_major, minor));
  
  	md->wq = alloc_workqueue("kdmflush", WQ_MEM_RECLAIM, 0);
* Unmerged path drivers/md/dm-rq.c
* Unmerged path drivers/md/dm.c
