nfp: drop rx_ring param from buffer allocation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit d78005a50f306edb000f0994f0470f151915cf90
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d78005a5.failed

We will soon allocate RX buffers for caching on XDP TX rings.
The rx_ring parameter passed to nfp_net_rx_alloc_one() is not
actually used, remove it.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d78005a50f306edb000f0994f0470f151915cf90)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 4bac97838402,fc0652d175fc..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -1062,26 -1141,34 +1062,34 @@@ nfp_net_calc_fl_bufsz(struct nfp_net *n
  	return fl_bufsz;
  }
  
 -static void
 -nfp_net_free_frag(void *frag, bool xdp)
 -{
 -	if (!xdp)
 -		skb_free_frag(frag);
 -	else
 -		__free_page(virt_to_page(frag));
 -}
 -
  /**
   * nfp_net_rx_alloc_one() - Allocate and map page frag for RX
++<<<<<<< HEAD
 + * @rx_ring:	RX ring structure of the skb
++=======
+  * @dp:		NFP Net data path struct
++>>>>>>> d78005a50f30 (nfp: drop rx_ring param from buffer allocation)
   * @dma_addr:	Pointer to storage for DMA address (output param)
 + * @fl_bufsz:	size of freelist buffers
   *
   * This function will allcate a new page frag, map it for DMA.
   *
   * Return: allocated page frag or NULL on failure.
   */
++<<<<<<< HEAD
 +static void *
 +nfp_net_rx_alloc_one(struct nfp_net_rx_ring *rx_ring, dma_addr_t *dma_addr,
 +		     unsigned int fl_bufsz)
++=======
+ static void *nfp_net_rx_alloc_one(struct nfp_net_dp *dp, dma_addr_t *dma_addr)
++>>>>>>> d78005a50f30 (nfp: drop rx_ring param from buffer allocation)
  {
 +	struct nfp_net *nn = rx_ring->r_vec->nfp_net;
  	void *frag;
  
 -	if (!dp->xdp_prog)
 -		frag = netdev_alloc_frag(dp->fl_bufsz);
 -	else
 -		frag = page_address(alloc_page(GFP_KERNEL | __GFP_COLD));
 +	frag = netdev_alloc_frag(fl_bufsz);
  	if (!frag) {
 -		nn_dp_warn(dp, "Failed to alloc receive page frag\n");
 +		nn_warn_ratelimit(nn, "Failed to alloc receive page frag\n");
  		return NULL;
  	}
  
@@@ -1218,11 -1314,9 +1226,15 @@@ nfp_net_rx_ring_bufs_alloc(struct nfp_n
  	rxbufs = rx_ring->rxbufs;
  
  	for (i = 0; i < rx_ring->cnt - 1; i++) {
++<<<<<<< HEAD
 +		rxbufs[i].frag =
 +			nfp_net_rx_alloc_one(rx_ring, &rxbufs[i].dma_addr,
 +					     rx_ring->bufsz);
++=======
+ 		rxbufs[i].frag = nfp_net_rx_alloc_one(dp, &rxbufs[i].dma_addr);
++>>>>>>> d78005a50f30 (nfp: drop rx_ring param from buffer allocation)
  		if (!rxbufs[i].frag) {
 -			nfp_net_rx_ring_bufs_free(dp, rx_ring);
 +			nfp_net_rx_ring_bufs_free(nn, rx_ring);
  			return -ENOMEM;
  		}
  	}
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
