libnvdimm: Stop using HPAGE_SIZE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Oliver O'Halloran <oohall@gmail.com>
commit 0dd69643061d78f3f9047c2382d8d77cca1ac943
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0dd69643.failed

Currently libnvdimm uses HPAGE_SIZE as the default alignment for DAX and
PFN devices. HPAGE_SIZE is the default hugetlbfs page size and when
hugetlbfs is disabled it defaults to PAGE_SIZE. Given DAX has more
in common with THP than hugetlbfs we should proably be using
HPAGE_PMD_SIZE, but this is undefined when THP is disabled so lets just
give it a new name.

The other usage of HPAGE_SIZE in libnvdimm is when determining how large
the altmap should be. For the reasons mentioned above it doesn't really
make sense to use HPAGE_SIZE here either. PMD_SIZE seems to be safe to
use in generic code and it happens to match the vmemmap allocation block
on x86 and Power. It's still a hack, but it's a slightly nicer hack.

	Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 0dd69643061d78f3f9047c2382d8d77cca1ac943)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvdimm/pfn_devs.c
diff --cc drivers/nvdimm/pfn_devs.c
index 5039c7223adc,2ae9a000b090..000000000000
--- a/drivers/nvdimm/pfn_devs.c
+++ b/drivers/nvdimm/pfn_devs.c
@@@ -636,8 -638,9 +636,14 @@@ static int nd_pfn_init(struct nd_pfn *n
  			/ PAGE_SIZE);
  	if (nd_pfn->mode == PFN_MODE_PMEM) {
  		/*
++<<<<<<< HEAD
 +		 * vmemmap_populate_hugepages() allocates the memmap array in
 +		 * PMD_SIZE chunks.
++=======
+ 		 * The altmap should be padded out to the block size used
+ 		 * when populating the vmemmap. This *should* be equal to
+ 		 * PMD_SIZE for most architectures.
++>>>>>>> 0dd69643061d (libnvdimm: Stop using HPAGE_SIZE)
  		 */
  		offset = ALIGN(start + SZ_8K + 64 * npfns + dax_label_reserve,
  				max(nd_pfn->align, PMD_SIZE)) - start;
diff --git a/drivers/nvdimm/nd.h b/drivers/nvdimm/nd.h
index 19023506e0fd..5c5a8206d54e 100644
--- a/drivers/nvdimm/nd.h
+++ b/drivers/nvdimm/nd.h
@@ -282,6 +282,13 @@ static inline struct device *nd_btt_create(struct nd_region *nd_region)
 
 struct nd_pfn *to_nd_pfn(struct device *dev);
 #if IS_ENABLED(CONFIG_NVDIMM_PFN)
+
+#ifdef CONFIG_TRANSPARENT_HUGEPAGE
+#define PFN_DEFAULT_ALIGNMENT HPAGE_PMD_SIZE
+#else
+#define PFN_DEFAULT_ALIGNMENT PAGE_SIZE
+#endif
+
 int nd_pfn_probe(struct device *dev, struct nd_namespace_common *ndns);
 bool is_nd_pfn(struct device *dev);
 struct device *nd_pfn_create(struct nd_region *nd_region);
* Unmerged path drivers/nvdimm/pfn_devs.c
