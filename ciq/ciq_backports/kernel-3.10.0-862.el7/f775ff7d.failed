ceph: fix file open flags on ppc64

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Alexander Graf <agraf@suse.de>
commit f775ff7d89f33fc9ba63f6f70df3bcc98c2d9828
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f775ff7d.failed

The file open flags (O_foo) are platform specific and should never go
out to an interface that is not local to the system.

Unfortunately these flags have leaked out onto the wire in the cephfs
implementation. That lead to bogus flags getting transmitted on ppc64.

This patch converts the kernel view of flags to the ceph view of file
open flags.

Fixes: 124e68e74 ("ceph: file operations")
	Signed-off-by: Alexander Graf <agraf@suse.de>
	Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit f775ff7d89f33fc9ba63f6f70df3bcc98c2d9828)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ceph/ceph_fs.h
diff --cc include/linux/ceph/ceph_fs.h
index 112e6d73771c,ad078ebe25d6..000000000000
--- a/include/linux/ceph/ceph_fs.h
+++ b/include/linux/ceph/ceph_fs.h
@@@ -360,6 -354,31 +360,34 @@@ extern const char *ceph_mds_op_name(in
  #define CEPH_XATTR_REPLACE (1 << 1)
  #define CEPH_XATTR_REMOVE  (1 << 31)
  
++<<<<<<< HEAD
++=======
+ /*
+  * readdir request flags;
+  */
+ #define CEPH_READDIR_REPLY_BITFLAGS	(1<<0)
+ 
+ /*
+  * readdir reply flags.
+  */
+ #define CEPH_READDIR_FRAG_END		(1<<0)
+ #define CEPH_READDIR_FRAG_COMPLETE	(1<<8)
+ #define CEPH_READDIR_HASH_ORDER		(1<<9)
+ #define CEPH_READDIR_OFFSET_HASH	(1<<10)
+ 
+ /*
+  * open request flags
+  */
+ #define CEPH_O_RDONLY		00000000
+ #define CEPH_O_WRONLY		00000001
+ #define CEPH_O_RDWR		00000002
+ #define CEPH_O_CREAT		00000100
+ #define CEPH_O_EXCL		00000200
+ #define CEPH_O_TRUNC		00001000
+ #define CEPH_O_DIRECTORY	00200000
+ #define CEPH_O_NOFOLLOW		00400000
+ 
++>>>>>>> f775ff7d89f3 (ceph: fix file open flags on ppc64)
  union ceph_mds_request_args {
  	struct {
  		__le32 mask;                 /* CEPH_CAP_* */
diff --git a/fs/ceph/file.c b/fs/ceph/file.c
index 520a65273c1e..724fc8fac3be 100644
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@ -13,6 +13,38 @@
 #include "super.h"
 #include "mds_client.h"
 
+static __le32 ceph_flags_sys2wire(u32 flags)
+{
+	u32 wire_flags = 0;
+
+	switch (flags & O_ACCMODE) {
+	case O_RDONLY:
+		wire_flags |= CEPH_O_RDONLY;
+		break;
+	case O_WRONLY:
+		wire_flags |= CEPH_O_WRONLY;
+		break;
+	case O_RDWR:
+		wire_flags |= CEPH_O_RDWR;
+		break;
+	}
+
+#define ceph_sys2wire(a) if (flags & a) { wire_flags |= CEPH_##a; flags &= ~a; }
+
+	ceph_sys2wire(O_CREAT);
+	ceph_sys2wire(O_EXCL);
+	ceph_sys2wire(O_TRUNC);
+	ceph_sys2wire(O_DIRECTORY);
+	ceph_sys2wire(O_NOFOLLOW);
+
+#undef ceph_sys2wire
+
+	if (flags)
+		dout("unused open flags: %x", flags);
+
+	return cpu_to_le32(wire_flags);
+}
+
 /*
  * Ceph file operations
  *
@@ -129,7 +161,7 @@ prepare_open_request(struct super_block *sb, int flags, int create_mode)
 	if (IS_ERR(req))
 		goto out;
 	req->r_fmode = ceph_flags_to_mode(flags);
-	req->r_args.open.flags = cpu_to_le32(flags);
+	req->r_args.open.flags = ceph_flags_sys2wire(flags);
 	req->r_args.open.mode = cpu_to_le32(create_mode);
 out:
 	return req;
* Unmerged path include/linux/ceph/ceph_fs.h
