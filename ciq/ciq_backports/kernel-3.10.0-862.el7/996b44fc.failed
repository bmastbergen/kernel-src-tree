udp: fix bcast packet reception

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Paolo Abeni <pabeni@redhat.com>
commit 996b44fcef8f216ea0b6b6e74468c5a77b5e341f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/996b44fc.failed

The commit bc044e8db796 ("udp: perform source validation for
mcast early demux") does not take into account that broadcast packets
lands in the same code path and they need different checks for the
source address - notably, zero source address are valid for bcast
and invalid for mcast.

As a result, 2nd and later broadcast packets with 0 source address
landing to the same socket are dropped. This breaks dhcp servers.

Since we don't have stringent performance requirements for ingress
broadcast traffic, fix it by disabling UDP early demux such traffic.

	Reported-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
Fixes: bc044e8db796 ("udp: perform source validation for mcast early demux")
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 996b44fcef8f216ea0b6b6e74468c5a77b5e341f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/udp.c
diff --cc net/ipv4/udp.c
index c6e2b198be79,e45177ceb0ee..000000000000
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@@ -2060,32 -2240,27 +2060,44 @@@ void udp_v4_early_demux(struct sk_buff 
  	iph = ip_hdr(skb);
  	uh = udp_hdr(skb);
  
++<<<<<<< HEAD
 +	if (skb->pkt_type == PACKET_BROADCAST ||
 +	    skb->pkt_type == PACKET_MULTICAST) {
 +		struct in_device *in_dev = __in_dev_get_rcu(skb->dev);
++=======
+ 	if (skb->pkt_type == PACKET_MULTICAST) {
+ 		in_dev = __in_dev_get_rcu(skb->dev);
++>>>>>>> 996b44fcef8f (udp: fix bcast packet reception)
  
  		if (!in_dev)
 -			return 0;
 +			return;
  
++<<<<<<< HEAD
 +		/* we are supposed to accept bcast packets */
 +		if (skb->pkt_type == PACKET_MULTICAST) {
 +			ours = ip_check_mc_rcu(in_dev, iph->daddr, iph->saddr,
 +					       iph->protocol);
 +			if (!ours)
 +				return;
 +		}
++=======
+ 		ours = ip_check_mc_rcu(in_dev, iph->daddr, iph->saddr,
+ 				       iph->protocol);
+ 		if (!ours)
+ 			return 0;
++>>>>>>> 996b44fcef8f (udp: fix bcast packet reception)
  
  		sk = __udp4_lib_mcast_demux_lookup(net, uh->dest, iph->daddr,
 -						   uh->source, iph->saddr,
 -						   dif, sdif);
 +						   uh->source, iph->saddr, dif);
  	} else if (skb->pkt_type == PACKET_HOST) {
  		sk = __udp4_lib_demux_lookup(net, uh->dest, iph->daddr,
 -					     uh->source, iph->saddr, dif, sdif);
 +					     uh->source, iph->saddr, dif);
 +	} else {
 +		return;
  	}
  
 -	if (!sk || !refcount_inc_not_zero(&sk->sk_refcnt))
 -		return 0;
 +	if (!sk)
 +		return;
  
  	skb->sk = sk;
  	skb->destructor = sock_efree;
* Unmerged path net/ipv4/udp.c
