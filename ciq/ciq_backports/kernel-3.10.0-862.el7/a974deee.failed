NFSv4: Fix memory and state leak in _nfs4_open_and_get_state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit a974deee477af89411e0f80456bfb344ac433c98
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a974deee.failed

If we exit because the file access check failed, we currently
leak the struct nfs4_state. We need to attach it to the
open context before returning.

Fixes: 3efb9722475e ("NFSv4: Refactor _nfs4_open_and_get_state..")
	Cc: stable@vger.kernel.org # 3.10+
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit a974deee477af89411e0f80456bfb344ac433c98)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4proc.c
diff --cc fs/nfs/nfs4proc.c
index 6c2c00b07f52,45271e5994f0..000000000000
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@@ -2728,8 -2650,7 +2729,12 @@@ static int _nfs4_open_and_get_state(str
  	if (ret != 0)
  		goto out;
  
++<<<<<<< HEAD
 +	ctx->state = state;
 +	if (dentry->d_inode == state->inode) {
++=======
+ 	if (d_inode(dentry) == state->inode) {
++>>>>>>> a974deee477a (NFSv4: Fix memory and state leak in _nfs4_open_and_get_state)
  		nfs_inode_attach_open_context(ctx);
  		if (read_seqcount_retry(&sp->so_reclaim_seqcount, seq))
  			nfs4_schedule_stateid_recovery(server, state);
* Unmerged path fs/nfs/nfs4proc.c
