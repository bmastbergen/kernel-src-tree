netvsc: propagate MAC address change to VF slave

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 16ba3266006be10dc7ec25dd1442f74cef89cb95
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/16ba3266.failed

If VF is slaved to synthetic device, then any change to netvsc
MAC address should be propagated to the slave device.

If slave device doesn't support MAC address change then it
should also be an error to attempt to change synthetic NIC MAC
address.

It also fixes the error unwind in the original code.
If give a bad address, the old code would change the device
MAC address anyway.

	Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 16ba3266006be10dc7ec25dd1442f74cef89cb95)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index d4dc9c189b85,07015b1c42c6..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -981,23 -1052,32 +981,43 @@@ static struct rtnl_link_stats64 *netvsc
  
  static int netvsc_set_mac_addr(struct net_device *ndev, void *p)
  {
++<<<<<<< HEAD
++=======
+ 	struct net_device_context *ndc = netdev_priv(ndev);
+ 	struct net_device *vf_netdev = rtnl_dereference(ndc->vf_netdev);
+ 	struct netvsc_device *nvdev = rtnl_dereference(ndc->nvdev);
++>>>>>>> 16ba3266006b (netvsc: propagate MAC address change to VF slave)
  	struct sockaddr *addr = p;
- 	char save_adr[ETH_ALEN];
- 	unsigned char save_aatype;
  	int err;
  
- 	memcpy(save_adr, ndev->dev_addr, ETH_ALEN);
- 	save_aatype = ndev->addr_assign_type;
- 
- 	err = eth_mac_addr(ndev, p);
- 	if (err != 0)
+ 	err = eth_prepare_mac_addr_change(ndev, p);
+ 	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	err = rndis_filter_set_device_mac(ndev, addr->sa_data);
 +	if (err != 0) {
 +		/* roll back to saved MAC */
 +		memcpy(ndev->dev_addr, save_adr, ETH_ALEN);
 +		ndev->addr_assign_type = save_aatype;
++=======
+ 	if (!nvdev)
+ 		return -ENODEV;
+ 
+ 	if (vf_netdev) {
+ 		err = dev_set_mac_address(vf_netdev, addr);
+ 		if (err)
+ 			return err;
+ 	}
+ 
+ 	err = rndis_filter_set_device_mac(nvdev, addr->sa_data);
+ 	if (!err) {
+ 		eth_commit_mac_addr_change(ndev, p);
+ 	} else if (vf_netdev) {
+ 		/* rollback change on VF */
+ 		memcpy(addr->sa_data, ndev->dev_addr, ETH_ALEN);
+ 		dev_set_mac_address(vf_netdev, addr);
++>>>>>>> 16ba3266006b (netvsc: propagate MAC address change to VF slave)
  	}
  
  	return err;
* Unmerged path drivers/net/hyperv/netvsc_drv.c
