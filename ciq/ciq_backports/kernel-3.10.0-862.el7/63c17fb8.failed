mm/core, x86/mm/pkeys: Store protection bits in high VMA flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [mm] core, x86/mm/pkeys: Store protection bits in high VMA flags (Rui Wang) [1272615]
Rebuild_FUZZ: 97.52%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit 63c17fb8e5a46a16e10e82005748837fd11a2024
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/63c17fb8.failed

vma->vm_flags is an 'unsigned long', so has space for 32 flags
on 32-bit architectures.  The high 32 bits are unused on 64-bit
platforms.  We've steered away from using the unused high VMA
bits for things because we would have difficulty supporting it
on 32-bit.

Protection Keys are not available in 32-bit mode, so there is
no concern about supporting this feature in 32-bit mode or on
32-bit CPUs.

This patch carves out 4 bits from the high half of
vma->vm_flags and allows architectures to set config option
to make them available.

Sparse complains about these constants unless we explicitly
call them "UL".

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Konstantin Khlebnikov <koct9i@gmail.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mel Gorman <mgorman@suse.de>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Sasha Levin <sasha.levin@oracle.com>
	Cc: Valentin Rothberg <valentinrothberg@gmail.com>
	Cc: Vladimir Davydov <vdavydov@parallels.com>
	Cc: Vlastimil Babka <vbabka@suse.cz>
	Cc: Xie XiuQi <xiexiuqi@huawei.com>
	Cc: linux-kernel@vger.kernel.org
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20160212210208.81AF00D5@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 63c17fb8e5a46a16e10e82005748837fd11a2024)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/Kconfig
#	include/linux/mm.h
#	mm/Kconfig
diff --cc arch/x86/Kconfig
index c83b7a921031,fb2ebeb9a692..000000000000
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@@ -78,62 -136,26 +78,68 @@@ config X8
  	select HAVE_PERF_EVENTS_NMI
  	select HAVE_PERF_REGS
  	select HAVE_PERF_USER_STACK_DUMP
 -	select HAVE_REGS_AND_STACK_ACCESS_API
 -	select HAVE_SYSCALL_TRACEPOINTS
 -	select HAVE_UID16			if X86_32 || IA32_EMULATION
 -	select HAVE_UNSTABLE_SCHED_CLOCK
 +	select HAVE_DEBUG_KMEMLEAK
 +	select ANON_INODES
 +	select HAVE_ALIGNED_STRUCT_PAGE if SLUB
 +	select HAVE_CMPXCHG_LOCAL
 +	select HAVE_CMPXCHG_DOUBLE
 +	select HAVE_ARCH_KMEMCHECK
  	select HAVE_USER_RETURN_NOTIFIER
 -	select IRQ_FORCED_THREADING
 -	select MODULES_USE_ELF_RELA		if X86_64
 -	select MODULES_USE_ELF_REL		if X86_32
 -	select OLD_SIGACTION			if X86_32
 -	select OLD_SIGSUSPEND3			if X86_32 || IA32_EMULATION
 -	select PERF_EVENTS
 -	select RTC_LIB
 +	select ARCH_HAS_ELF_RANDOMIZE
 +	select HAVE_ARCH_JUMP_LABEL
 +	select HAVE_TEXT_POKE_SMP
 +	select HAVE_GENERIC_HARDIRQS
 +	select ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE
  	select SPARSE_IRQ
 -	select SRCU
 -	select SYSCTL_EXCEPTION_TRACE
 -	select USER_STACKTRACE_SUPPORT
 +	select GENERIC_FIND_FIRST_BIT
 +	select GENERIC_IRQ_PROBE
 +	select GENERIC_PENDING_IRQ if SMP
 +	select GENERIC_IRQ_SHOW
 +	select GENERIC_CLOCKEVENTS_MIN_ADJUST
 +	select IRQ_FORCED_THREADING
 +	select USE_GENERIC_SMP_HELPERS if SMP
 +	select HAVE_BPF_JIT if X86_64
 +	select HAVE_ARCH_TRANSPARENT_HUGEPAGE
 +	select HAVE_ARCH_HUGE_VMAP if X86_64 || (X86_32 && X86_PAE)
 +	select CLKEVT_I8253
 +	select ARCH_HAVE_NMI_SAFE_CMPXCHG
 +	select GENERIC_IOMAP
 +	select DCACHE_WORD_ACCESS
 +	select GENERIC_SMP_IDLE_THREAD
 +	select ARCH_WANT_IPC_PARSE_VERSION if X86_32
 +	select HAVE_ARCH_SECCOMP_FILTER
 +	select BUILDTIME_EXTABLE_SORT
 +	select GENERIC_CMOS_UPDATE
 +	select HAVE_ARCH_SOFT_DIRTY
 +	select GENERIC_CLOCKEVENTS
 +	select ARCH_CLOCKSOURCE_DATA if X86_64
 +	select CLOCKSOURCE_VALIDATE_LAST_CYCLE
 +	select GENERIC_CLOCKEVENTS_BROADCAST if X86_64 || (X86_32 && X86_LOCAL_APIC)
 +	select GENERIC_TIME_VSYSCALL if X86_64
 +	select KTIME_SCALAR if X86_32
 +	select GENERIC_STRNCPY_FROM_USER
 +	select GENERIC_STRNLEN_USER
 +	select HAVE_CONTEXT_TRACKING if X86_64
 +	select HAVE_IRQ_TIME_ACCOUNTING
  	select VIRT_TO_BUS
++<<<<<<< HEAD
 +	select MODULES_USE_ELF_REL if X86_32
 +	select MODULES_USE_ELF_RELA if X86_64
 +	select CLONE_BACKWARDS if X86_32
 +	select ARCH_USE_BUILTIN_BSWAP
 +	select ARCH_USE_QUEUED_SPINLOCKS
 +	select ARCH_USE_QUEUED_RWLOCKS
 +	select OLD_SIGSUSPEND3 if X86_32 || IA32_EMULATION
 +	select OLD_SIGACTION if X86_32
 +	select COMPAT_OLD_SIGACTION if IA32_EMULATION
 +	select RTC_LIB
 +	select HAVE_CC_STACKPROTECTOR
 +	select HAVE_STACK_VALIDATION if X86_64
++=======
+ 	select X86_DEV_DMA_OPS			if X86_64
+ 	select X86_FEATURE_NAMES		if PROC_FS
+ 	select ARCH_USES_HIGH_VMA_FLAGS		if X86_INTEL_MEMORY_PROTECTION_KEYS
++>>>>>>> 63c17fb8e5a4 (mm/core, x86/mm/pkeys: Store protection bits in high VMA flags)
  
  config INSTRUCTION_DECODER
  	def_bool y
diff --cc include/linux/mm.h
index a0514d1e5d91,54d173bcc327..000000000000
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@@ -154,11 -170,16 +154,24 @@@ extern unsigned int kobjsize(const voi
  #define VM_NOHUGEPAGE	0x40000000	/* MADV_NOHUGEPAGE marked this vma */
  #define VM_MERGEABLE	0x80000000	/* KSM may merge identical pages */
  
++<<<<<<< HEAD
 +/*
 + * vm_flags2 in vm_area_struct, see mm_types.h.
 + */
 +#define VM_PFN_MKWRITE	0x00000001	/* vm_operations_struct includes pfn_mkwrite */
 +#define VM_PMD_FAULT	0x00000002	/* vm_operations_struct includes pmd_fault */
++=======
+ #ifdef CONFIG_ARCH_USES_HIGH_VMA_FLAGS
+ #define VM_HIGH_ARCH_BIT_0	32	/* bit only usable on 64-bit architectures */
+ #define VM_HIGH_ARCH_BIT_1	33	/* bit only usable on 64-bit architectures */
+ #define VM_HIGH_ARCH_BIT_2	34	/* bit only usable on 64-bit architectures */
+ #define VM_HIGH_ARCH_BIT_3	35	/* bit only usable on 64-bit architectures */
+ #define VM_HIGH_ARCH_0	BIT(VM_HIGH_ARCH_BIT_0)
+ #define VM_HIGH_ARCH_1	BIT(VM_HIGH_ARCH_BIT_1)
+ #define VM_HIGH_ARCH_2	BIT(VM_HIGH_ARCH_BIT_2)
+ #define VM_HIGH_ARCH_3	BIT(VM_HIGH_ARCH_BIT_3)
+ #endif /* CONFIG_ARCH_USES_HIGH_VMA_FLAGS */
++>>>>>>> 63c17fb8e5a4 (mm/core, x86/mm/pkeys: Store protection bits in high VMA flags)
  
  #if defined(CONFIG_X86)
  # define VM_PAT		VM_ARCH_1	/* PAT reserves whole VMA at once (x86) */
diff --cc mm/Kconfig
index 8a6f054d0ebb,6cf439948297..000000000000
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@@ -644,3 -666,9 +644,12 @@@ config ZONE_DEVIC
  	  mapping in an O_DIRECT operation, among other things.
  
  	  If FS_DAX is enabled, then say Y.
++<<<<<<< HEAD
++=======
+ 
+ config FRAME_VECTOR
+ 	bool
+ 
+ config ARCH_USES_HIGH_VMA_FLAGS
+ 	bool
++>>>>>>> 63c17fb8e5a4 (mm/core, x86/mm/pkeys: Store protection bits in high VMA flags)
* Unmerged path arch/x86/Kconfig
* Unmerged path include/linux/mm.h
* Unmerged path mm/Kconfig
