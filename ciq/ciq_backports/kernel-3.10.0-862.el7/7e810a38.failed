KVM: LAPIC: rename start/cancel_hv_tscdeadline to start/cancel_hv_timer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Wanpeng Li <wanpeng.li@hotmail.com>
commit 7e810a38e6c7166b91968e83dee4cf7a4ef5dc80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7e810a38.failed

Rename start/cancel_hv_tscdeadline to start/cancel_hv_timer since
they will handle both APIC Timer periodic/oneshot mode and tsc-deadline
mode.

	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Radim Krčmář <rkrcmar@redhat.com>
	Cc: Yunhong Jiang <yunhong.jiang@intel.com>
	Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
	Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
(cherry picked from commit 7e810a38e6c7166b91968e83dee4cf7a4ef5dc80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/lapic.c
diff --cc arch/x86/kvm/lapic.c
index 0e8704ed991e,0354a79fecd8..000000000000
--- a/arch/x86/kvm/lapic.c
+++ b/arch/x86/kvm/lapic.c
@@@ -1373,52 -1347,134 +1373,182 @@@ static void start_sw_tscdeadline(struc
  	local_irq_restore(flags);
  }
  
++<<<<<<< HEAD
++=======
+ static void start_sw_period(struct kvm_lapic *apic)
+ {
+ 	ktime_t now;
+ 
+ 	/* lapic timer in oneshot or periodic mode */
+ 	now = apic->lapic_timer.timer.base->get_time();
+ 	apic->lapic_timer.period = (u64)kvm_lapic_get_reg(apic, APIC_TMICT)
+ 		    * APIC_BUS_CYCLE_NS * apic->divide_count;
+ 
+ 	if (!apic->lapic_timer.period)
+ 		return;
+ 	/*
+ 	 * Do not allow the guest to program periodic timers with small
+ 	 * interval, since the hrtimers are not throttled by the host
+ 	 * scheduler.
+ 	 */
+ 	if (apic_lvtt_period(apic)) {
+ 		s64 min_period = min_timer_period_us * 1000LL;
+ 
+ 		if (apic->lapic_timer.period < min_period) {
+ 			pr_info_ratelimited(
+ 			    "kvm: vcpu %i: requested %lld ns "
+ 			    "lapic timer period limited to %lld ns\n",
+ 			    apic->vcpu->vcpu_id,
+ 			    apic->lapic_timer.period, min_period);
+ 			apic->lapic_timer.period = min_period;
+ 		}
+ 	}
+ 
+ 	hrtimer_start(&apic->lapic_timer.timer,
+ 		      ktime_add_ns(now, apic->lapic_timer.period),
+ 		      HRTIMER_MODE_ABS_PINNED);
+ 
+ 	apic_debug("%s: bus cycle is %" PRId64 "ns, now 0x%016"
+ 		   PRIx64 ", "
+ 		   "timer initial count 0x%x, period %lldns, "
+ 		   "expire @ 0x%016" PRIx64 ".\n", __func__,
+ 		   APIC_BUS_CYCLE_NS, ktime_to_ns(now),
+ 		   kvm_lapic_get_reg(apic, APIC_TMICT),
+ 		   apic->lapic_timer.period,
+ 		   ktime_to_ns(ktime_add_ns(now,
+ 				apic->lapic_timer.period)));
+ }
+ 
+ bool kvm_lapic_hv_timer_in_use(struct kvm_vcpu *vcpu)
+ {
+ 	if (!lapic_in_kernel(vcpu))
+ 		return false;
+ 
+ 	return vcpu->arch.apic->lapic_timer.hv_timer_in_use;
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_hv_timer_in_use);
+ 
+ static void cancel_hv_timer(struct kvm_lapic *apic)
+ {
+ 	kvm_x86_ops->cancel_hv_timer(apic->vcpu);
+ 	apic->lapic_timer.hv_timer_in_use = false;
+ }
+ 
+ void kvm_lapic_expired_hv_timer(struct kvm_vcpu *vcpu)
+ {
+ 	struct kvm_lapic *apic = vcpu->arch.apic;
+ 
+ 	WARN_ON(!apic->lapic_timer.hv_timer_in_use);
+ 	WARN_ON(swait_active(&vcpu->wq));
+ 	cancel_hv_timer(apic);
+ 	apic_timer_expired(apic);
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_expired_hv_timer);
+ 
+ static bool start_hv_timer(struct kvm_lapic *apic)
+ {
+ 	u64 tscdeadline = apic->lapic_timer.tscdeadline;
+ 
+ 	if (atomic_read(&apic->lapic_timer.pending) ||
+ 		kvm_x86_ops->set_hv_timer(apic->vcpu, tscdeadline)) {
+ 		if (apic->lapic_timer.hv_timer_in_use)
+ 			cancel_hv_timer(apic);
+ 	} else {
+ 		apic->lapic_timer.hv_timer_in_use = true;
+ 		hrtimer_cancel(&apic->lapic_timer.timer);
+ 
+ 		/* In case the sw timer triggered in the window */
+ 		if (atomic_read(&apic->lapic_timer.pending))
+ 			cancel_hv_timer(apic);
+ 	}
+ 	trace_kvm_hv_timer_state(apic->vcpu->vcpu_id,
+ 			apic->lapic_timer.hv_timer_in_use);
+ 	return apic->lapic_timer.hv_timer_in_use;
+ }
+ 
+ void kvm_lapic_switch_to_hv_timer(struct kvm_vcpu *vcpu)
+ {
+ 	struct kvm_lapic *apic = vcpu->arch.apic;
+ 
+ 	WARN_ON(apic->lapic_timer.hv_timer_in_use);
+ 
+ 	if (apic_lvtt_tscdeadline(apic))
+ 		start_hv_timer(apic);
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_switch_to_hv_timer);
+ 
+ void kvm_lapic_switch_to_sw_timer(struct kvm_vcpu *vcpu)
+ {
+ 	struct kvm_lapic *apic = vcpu->arch.apic;
+ 
+ 	/* Possibly the TSC deadline timer is not enabled yet */
+ 	if (!apic->lapic_timer.hv_timer_in_use)
+ 		return;
+ 
+ 	cancel_hv_timer(apic);
+ 
+ 	if (atomic_read(&apic->lapic_timer.pending))
+ 		return;
+ 
+ 	start_sw_tscdeadline(apic);
+ }
+ EXPORT_SYMBOL_GPL(kvm_lapic_switch_to_sw_timer);
+ 
++>>>>>>> 7e810a38e6c7 (KVM: LAPIC: rename start/cancel_hv_tscdeadline to start/cancel_hv_timer)
  static void start_apic_timer(struct kvm_lapic *apic)
  {
 +	ktime_t now;
  	atomic_set(&apic->lapic_timer.pending, 0);
  
++<<<<<<< HEAD
 +	if (apic_lvtt_period(apic) || apic_lvtt_oneshot(apic)) {
 +		/* lapic timer in oneshot or periodic mode */
 +		now = apic->lapic_timer.timer.base->get_time();
 +		apic->lapic_timer.period = (u64)kvm_lapic_get_reg(apic, APIC_TMICT)
 +			    * APIC_BUS_CYCLE_NS * apic->divide_count;
 +
 +		if (!apic->lapic_timer.period)
 +			return;
 +		/*
 +		 * Do not allow the guest to program periodic timers with small
 +		 * interval, since the hrtimers are not throttled by the host
 +		 * scheduler.
 +		 */
 +		if (apic_lvtt_period(apic)) {
 +			s64 min_period = min_timer_period_us * 1000LL;
 +
 +			if (apic->lapic_timer.period < min_period) {
 +				pr_info_ratelimited(
 +				    "kvm: vcpu %i: requested %lld ns "
 +				    "lapic timer period limited to %lld ns\n",
 +				    apic->vcpu->vcpu_id,
 +				    apic->lapic_timer.period, min_period);
 +				apic->lapic_timer.period = min_period;
 +			}
 +		}
 +
 +		hrtimer_start(&apic->lapic_timer.timer,
 +			      ktime_add_ns(now, apic->lapic_timer.period),
 +			      HRTIMER_MODE_ABS_PINNED);
 +
 +		apic_debug("%s: bus cycle is %" PRId64 "ns, now 0x%016"
 +			   PRIx64 ", "
 +			   "timer initial count 0x%x, period %lldns, "
 +			   "expire @ 0x%016" PRIx64 ".\n", __func__,
 +			   APIC_BUS_CYCLE_NS, ktime_to_ns(now),
 +			   kvm_lapic_get_reg(apic, APIC_TMICT),
 +			   apic->lapic_timer.period,
 +			   ktime_to_ns(ktime_add_ns(now,
 +					apic->lapic_timer.period)));
 +	} else if (apic_lvtt_tscdeadline(apic)) {
 +		start_sw_tscdeadline(apic);
++=======
+ 	if (apic_lvtt_period(apic) || apic_lvtt_oneshot(apic))
+ 		start_sw_period(apic);
+ 	else if (apic_lvtt_tscdeadline(apic)) {
+ 		if (!(kvm_x86_ops->set_hv_timer && start_hv_timer(apic)))
+ 			start_sw_tscdeadline(apic);
++>>>>>>> 7e810a38e6c7 (KVM: LAPIC: rename start/cancel_hv_tscdeadline to start/cancel_hv_timer)
  	}
  }
  
* Unmerged path arch/x86/kvm/lapic.c
