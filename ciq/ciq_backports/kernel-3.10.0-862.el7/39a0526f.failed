x86/mm: Factor out LDT init from context init

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] mm: Factor out LDT init from context init (Rui Wang) [1272615]
Rebuild_FUZZ: 95.35%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit 39a0526fb3f7d93433d146304278477eb463f8af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/39a0526f.failed

The arch-specific mm_context_t is a great place to put
protection-key allocation state.

But, we need to initialize the allocation state because pkey 0 is
always "allocated".  All of the runtime initialization of
mm_context_t is done in *_ldt() manipulation functions.  This
renames the existing LDT functions like this:

	init_new_context() -> init_new_context_ldt()
	destroy_context() -> destroy_context_ldt()

and makes init_new_context() and destroy_context() available for
generic use.

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20160212210234.DB34FCC5@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 39a0526fb3f7d93433d146304278477eb463f8af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/mmu_context.h
diff --cc arch/x86/include/asm/mmu_context.h
index a34c7d411865,84280029cafd..000000000000
--- a/arch/x86/include/asm/mmu_context.h
+++ b/arch/x86/include/asm/mmu_context.h
@@@ -19,9 -21,80 +19,22 @@@ static inline void paravirt_activate_mm
  /*
   * Used for LDT copy/destruction.
   */
++<<<<<<< HEAD
 +int init_new_context(struct task_struct *tsk, struct mm_struct *mm);
 +void destroy_context(struct mm_struct *mm);
++=======
+ int init_new_context_ldt(struct task_struct *tsk, struct mm_struct *mm);
+ void destroy_context_ldt(struct mm_struct *mm);
+ #else	/* CONFIG_MODIFY_LDT_SYSCALL */
+ static inline int init_new_context_ldt(struct task_struct *tsk,
+ 				       struct mm_struct *mm)
+ {
+ 	return 0;
+ }
+ static inline void destroy_context_ldt(struct mm_struct *mm) {}
+ #endif
++>>>>>>> 39a0526fb3f7 (x86/mm: Factor out LDT init from context init)
  
 -static inline void load_mm_ldt(struct mm_struct *mm)
 -{
 -#ifdef CONFIG_MODIFY_LDT_SYSCALL
 -	struct ldt_struct *ldt;
 -
 -	/* lockless_dereference synchronizes with smp_store_release */
 -	ldt = lockless_dereference(mm->context.ldt);
 -
 -	/*
 -	 * Any change to mm->context.ldt is followed by an IPI to all
 -	 * CPUs with the mm active.  The LDT will not be freed until
 -	 * after the IPI is handled by all such CPUs.  This means that,
 -	 * if the ldt_struct changes before we return, the values we see
 -	 * will be safe, and the new values will be loaded before we run
 -	 * any user code.
 -	 *
 -	 * NB: don't try to convert this to use RCU without extreme care.
 -	 * We would still need IRQs off, because we don't want to change
 -	 * the local LDT after an IPI loaded a newer value than the one
 -	 * that we can see.
 -	 */
 -
 -	if (unlikely(ldt))
 -		set_ldt(ldt->entries, ldt->size);
 -	else
 -		clear_LDT();
 -#else
 -	clear_LDT();
 -#endif
 -
 -	DEBUG_LOCKS_WARN_ON(preemptible());
 -}
  
  static inline void enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)
  {
* Unmerged path arch/x86/include/asm/mmu_context.h
diff --git a/arch/x86/kernel/ldt.c b/arch/x86/kernel/ldt.c
index ebc987398923..0d4449689c52 100644
--- a/arch/x86/kernel/ldt.c
+++ b/arch/x86/kernel/ldt.c
@@ -102,7 +102,7 @@ static inline int copy_ldt(mm_context_t *new, mm_context_t *old)
  * we do not have to muck with descriptors here, that is
  * done in switch_mm() as needed.
  */
-int init_new_context(struct task_struct *tsk, struct mm_struct *mm)
+int init_new_context_ldt(struct task_struct *tsk, struct mm_struct *mm)
 {
 	struct mm_struct *old_mm;
 	int retval = 0;
@@ -123,7 +123,7 @@ int init_new_context(struct task_struct *tsk, struct mm_struct *mm)
  *
  * 64bit: Don't touch the LDT register - we're already in the next thread.
  */
-void destroy_context(struct mm_struct *mm)
+void destroy_context_ldt(struct mm_struct *mm)
 {
 	if (mm->context.size) {
 #ifdef CONFIG_X86_32
