cifs: Add support for reading attributes on SMB2+

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ronnie Sahlberg <lsahlber@redhat.com>
commit 95907fea4fd8ccc736e0a428e52159b4d42b9958
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/95907fea.failed

SMB1 already has support to read attributes. This adds similar support
to SMB2+.

With this patch, tools such as 'getfattr' will now work with SMB2+ shares.

RH-bz: 1110709

	Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
	Signed-off-by: Steve French <smfrench@gmail.com>
	Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
(cherry picked from commit 95907fea4fd8ccc736e0a428e52159b4d42b9958)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/cifs/smb2ops.c
diff --cc fs/cifs/smb2ops.c
index f4acb0a6593b,78516d3a133c..000000000000
--- a/fs/cifs/smb2ops.c
+++ b/fs/cifs/smb2ops.c
@@@ -1631,9 -2699,19 +1763,22 @@@ struct smb_version_operations smb20_ope
  	.set_oplock_level = smb2_set_oplock_level,
  	.create_lease_buf = smb2_create_lease_buf,
  	.parse_lease_buf = smb2_parse_lease_buf,
 -	.copychunk_range = smb2_copychunk_range,
 +	.clone_range = smb2_clone_range,
  	.wp_retry_size = smb2_wp_retry_size,
  	.dir_needs_close = smb2_dir_needs_close,
++<<<<<<< HEAD
++=======
+ 	.get_dfs_refer = smb2_get_dfs_refer,
+ 	.select_sectype = smb2_select_sectype,
+ #ifdef CONFIG_CIFS_XATTR
+ 	.query_all_EAs = smb2_query_eas,
+ #endif /* CIFS_XATTR */
+ #ifdef CONFIG_CIFS_ACL
+ 	.get_acl = get_smb2_acl,
+ 	.get_acl_by_fid = get_smb2_acl_by_fid,
+ 	.set_acl = set_smb2_acl,
+ #endif /* CIFS_ACL */
++>>>>>>> 95907fea4fd8 (cifs: Add support for reading attributes on SMB2+)
  };
  
  struct smb_version_operations smb21_operations = {
@@@ -1715,6 -2795,16 +1860,19 @@@
  	.wp_retry_size = smb2_wp_retry_size,
  	.dir_needs_close = smb2_dir_needs_close,
  	.enum_snapshots = smb3_enum_snapshots,
++<<<<<<< HEAD
++=======
+ 	.get_dfs_refer = smb2_get_dfs_refer,
+ 	.select_sectype = smb2_select_sectype,
+ #ifdef CONFIG_CIFS_XATTR
+ 	.query_all_EAs = smb2_query_eas,
+ #endif /* CIFS_XATTR */
+ #ifdef CONFIG_CIFS_ACL
+ 	.get_acl = get_smb2_acl,
+ 	.get_acl_by_fid = get_smb2_acl_by_fid,
+ 	.set_acl = set_smb2_acl,
+ #endif /* CIFS_ACL */
++>>>>>>> 95907fea4fd8 (cifs: Add support for reading attributes on SMB2+)
  };
  
  struct smb_version_operations smb30_operations = {
@@@ -1802,6 -2894,20 +1960,23 @@@
  	.dir_needs_close = smb2_dir_needs_close,
  	.fallocate = smb3_fallocate,
  	.enum_snapshots = smb3_enum_snapshots,
++<<<<<<< HEAD
++=======
+ 	.init_transform_rq = smb3_init_transform_rq,
+ 	.free_transform_rq = smb3_free_transform_rq,
+ 	.is_transform_hdr = smb3_is_transform_hdr,
+ 	.receive_transform = smb3_receive_transform,
+ 	.get_dfs_refer = smb2_get_dfs_refer,
+ 	.select_sectype = smb2_select_sectype,
+ #ifdef CONFIG_CIFS_XATTR
+ 	.query_all_EAs = smb2_query_eas,
+ #endif /* CIFS_XATTR */
+ #ifdef CONFIG_CIFS_ACL
+ 	.get_acl = get_smb2_acl,
+ 	.get_acl_by_fid = get_smb2_acl_by_fid,
+ 	.set_acl = set_smb2_acl,
+ #endif /* CIFS_ACL */
++>>>>>>> 95907fea4fd8 (cifs: Add support for reading attributes on SMB2+)
  };
  
  #ifdef CONFIG_CIFS_SMB311
@@@ -1890,6 -2998,15 +2065,18 @@@ struct smb_version_operations smb311_op
  	.dir_needs_close = smb2_dir_needs_close,
  	.fallocate = smb3_fallocate,
  	.enum_snapshots = smb3_enum_snapshots,
++<<<<<<< HEAD
++=======
+ 	.init_transform_rq = smb3_init_transform_rq,
+ 	.free_transform_rq = smb3_free_transform_rq,
+ 	.is_transform_hdr = smb3_is_transform_hdr,
+ 	.receive_transform = smb3_receive_transform,
+ 	.get_dfs_refer = smb2_get_dfs_refer,
+ 	.select_sectype = smb2_select_sectype,
+ #ifdef CONFIG_CIFS_XATTR
+ 	.query_all_EAs = smb2_query_eas,
+ #endif /* CIFS_XATTR */
++>>>>>>> 95907fea4fd8 (cifs: Add support for reading attributes on SMB2+)
  };
  #endif /* CIFS_SMB311 */
  
* Unmerged path fs/cifs/smb2ops.c
diff --git a/fs/cifs/smb2pdu.c b/fs/cifs/smb2pdu.c
index 75aad307324d..c267e3853857 100644
--- a/fs/cifs/smb2pdu.c
+++ b/fs/cifs/smb2pdu.c
@@ -2126,6 +2126,18 @@ qinf_exit:
 	return rc;
 }
 
+int SMB2_query_eas(const unsigned int xid, struct cifs_tcon *tcon,
+	u64 persistent_fid, u64 volatile_fid,
+	struct smb2_file_full_ea_info *data)
+{
+	return query_info(xid, tcon, persistent_fid, volatile_fid,
+			  FILE_FULL_EA_INFORMATION, SMB2_O_INFO_FILE, 0,
+			  SMB2_MAX_EA_BUF,
+			  sizeof(struct smb2_file_full_ea_info),
+			  (void **)&data,
+			  NULL);
+}
+
 int SMB2_query_info(const unsigned int xid, struct cifs_tcon *tcon,
 	u64 persistent_fid, u64 volatile_fid, struct smb2_file_all_info *data)
 {
diff --git a/fs/cifs/smb2pdu.h b/fs/cifs/smb2pdu.h
index 35ff9fae1c27..fbc1ae86d3ed 100644
--- a/fs/cifs/smb2pdu.h
+++ b/fs/cifs/smb2pdu.h
@@ -1167,6 +1167,16 @@ struct smb2_file_link_info { /* encoding of request for level 11 */
 	char   FileName[0];     /* Name to be assigned to new link */
 } __packed; /* level 11 Set */
 
+#define SMB2_MAX_EA_BUF 2048
+
+struct smb2_file_full_ea_info { /* encoding of response for level 15 */
+	__le32 next_entry_offset;
+	__u8   flags;
+	__u8   ea_name_length;
+	__le16 ea_value_length;
+	char   ea_data[0]; /* \0 terminated name plus value */
+} __packed; /* level 15 Set */
+
 /*
  * This level 18, although with struct with same name is different from cifs
  * level 0x107. Level 0x107 has an extra u64 between AccessFlags and
diff --git a/fs/cifs/smb2proto.h b/fs/cifs/smb2proto.h
index 55229cb2ba8e..7ee52ab6ded1 100644
--- a/fs/cifs/smb2proto.h
+++ b/fs/cifs/smb2proto.h
@@ -123,6 +123,9 @@ extern int SMB2_close(const unsigned int xid, struct cifs_tcon *tcon,
 		      u64 persistent_file_id, u64 volatile_file_id);
 extern int SMB2_flush(const unsigned int xid, struct cifs_tcon *tcon,
 		      u64 persistent_file_id, u64 volatile_file_id);
+extern int SMB2_query_eas(const unsigned int xid, struct cifs_tcon *tcon,
+			  u64 persistent_file_id, u64 volatile_file_id,
+			  struct smb2_file_full_ea_info *data);
 extern int SMB2_query_info(const unsigned int xid, struct cifs_tcon *tcon,
 			   u64 persistent_file_id, u64 volatile_file_id,
 			   struct smb2_file_all_info *data);
