scsi: smartpqi: add heartbeat check

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] smartpqi: add heartbeat check (Don Brace) [1457414]
Rebuild_FUZZ: 90.62%
commit-author Kevin Barnett <kevin.barnett@microsemi.com>
commit 98f876674a6fba3591c342dfbcfdbaa7ecf0a84e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/98f87667.failed

check for controller lockups

	Reviewed-by: Scott Benesh <scott.benesh@microsemi.com>
	Signed-off-by: Kevin Barnett <kevin.barnett@microsemi.com>
	Signed-off-by: Don Brace <don.brace@microsemi.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 98f876674a6fba3591c342dfbcfdbaa7ecf0a84e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/smartpqi/smartpqi.h
#	drivers/scsi/smartpqi/smartpqi_init.c
diff --cc drivers/scsi/smartpqi/smartpqi.h
index 6c9e77cf450e,1ac09e74d8c2..000000000000
--- a/drivers/scsi/smartpqi/smartpqi.h
+++ b/drivers/scsi/smartpqi/smartpqi.h
@@@ -629,10 -634,60 +628,67 @@@ struct pqi_encryption_info 
  	u32	encrypt_tweak_upper;
  };
  
++<<<<<<< HEAD
 +#define PQI_MAX_OUTSTANDING_REQUESTS		((u32)~0)
 +#define PQI_MAX_OUTSTANDING_REQUESTS_KDUMP	32
 +#define PQI_MAX_TRANSFER_SIZE			(4 * 1024U * 1024U)
 +#define PQI_MAX_TRANSFER_SIZE_KDUMP		(512 * 1024U)
++=======
+ #pragma pack(1)
+ 
+ #define PQI_CONFIG_TABLE_SIGNATURE	"CFGTABLE"
+ #define PQI_CONFIG_TABLE_MAX_LENGTH	((u16)~0)
+ 
+ /* configuration table section IDs */
+ #define PQI_CONFIG_TABLE_SECTION_GENERAL_INFO		0
+ #define PQI_CONFIG_TABLE_SECTION_FIRMWARE_FEATURES	1
+ #define PQI_CONFIG_TABLE_SECTION_FIRMWARE_ERRATA	2
+ #define PQI_CONFIG_TABLE_SECTION_DEBUG			3
+ #define PQI_CONFIG_TABLE_SECTION_HEARTBEAT		4
+ 
+ struct pqi_config_table {
+ 	u8	signature[8];		/* "CFGTABLE" */
+ 	__le32	first_section_offset;	/* offset in bytes from the base */
+ 					/* address of this table to the */
+ 					/* first section */
+ };
+ 
+ struct pqi_config_table_section_header {
+ 	__le16	section_id;		/* as defined by the */
+ 					/* PQI_CONFIG_TABLE_SECTION_* */
+ 					/* manifest constants above */
+ 	__le16	next_section_offset;	/* offset in bytes from base */
+ 					/* address of the table of the */
+ 					/* next section or 0 if last entry */
+ };
+ 
+ struct pqi_config_table_general_info {
+ 	struct pqi_config_table_section_header header;
+ 	__le32	section_length;		/* size of this section in bytes */
+ 					/* including the section header */
+ 	__le32	max_outstanding_requests;	/* max. outstanding */
+ 						/* commands supported by */
+ 						/* the controller */
+ 	__le32	max_sg_size;		/* max. transfer size of a single */
+ 					/* command */
+ 	__le32	max_sg_per_request;	/* max. number of scatter-gather */
+ 					/* entries supported in a single */
+ 					/* command */
+ };
+ 
+ struct pqi_config_table_debug {
+ 	struct pqi_config_table_section_header header;
+ 	__le32	scratchpad;
+ };
+ 
+ struct pqi_config_table_heartbeat {
+ 	struct pqi_config_table_section_header header;
+ 	__le32	heartbeat_counter;
+ };
+ 
+ #define PQI_MAX_OUTSTANDING_REQUESTS	((u32)~0)
+ #define PQI_MAX_TRANSFER_SIZE		(4 * 1024U * 1024U)
++>>>>>>> 98f876674a6f (scsi: smartpqi: add heartbeat check)
  
  #define RAID_MAP_MAX_ENTRIES		1024
  
@@@ -940,7 -991,7 +993,11 @@@ struct pqi_ctrl_info 
  	u8		inbound_spanning_supported : 1;
  	u8		outbound_spanning_supported : 1;
  	u8		pqi_mode_enabled : 1;
++<<<<<<< HEAD
 +	u8		heartbeat_timer_started : 1;
++=======
+ 	u8		update_time_worker_scheduled : 1;
++>>>>>>> 98f876674a6f (scsi: smartpqi: add heartbeat check)
  
  	struct list_head scsi_device_list;
  	spinlock_t	scsi_device_list_lock;
diff --cc drivers/scsi/smartpqi/smartpqi_init.c
index 67177749ea48,de33942860b3..000000000000
--- a/drivers/scsi/smartpqi/smartpqi_init.c
+++ b/drivers/scsi/smartpqi/smartpqi_init.c
@@@ -262,6 -262,19 +262,22 @@@ static inline void pqi_schedule_rescan_
  		PQI_RESCAN_WORK_INTERVAL);
  }
  
++<<<<<<< HEAD
++=======
+ static inline void pqi_cancel_rescan_worker(struct pqi_ctrl_info *ctrl_info)
+ {
+ 	cancel_delayed_work_sync(&ctrl_info->rescan_work);
+ }
+ 
+ static inline u32 pqi_read_heartbeat_counter(struct pqi_ctrl_info *ctrl_info)
+ {
+ 	if (!ctrl_info->heartbeat_counter)
+ 		return 0;
+ 
+ 	return readl(ctrl_info->heartbeat_counter);
+ }
+ 
++>>>>>>> 98f876674a6f (scsi: smartpqi: add heartbeat check)
  static int pqi_map_single(struct pci_dev *pci_dev,
  	struct pqi_sg_descriptor *sg_descriptor, void *buffer,
  	size_t buffer_length, int data_direction)
@@@ -2838,14 -2849,21 +2841,24 @@@ static void pqi_take_ctrl_offline(struc
  static void pqi_heartbeat_timer_handler(unsigned long data)
  {
  	int num_interrupts;
+ 	u32 heartbeat_count;
  	struct pqi_ctrl_info *ctrl_info = (struct pqi_ctrl_info *)data;
  
++<<<<<<< HEAD
++=======
+ 	pqi_check_ctrl_health(ctrl_info);
+ 	if (pqi_ctrl_offline(ctrl_info))
+ 		return;
+ 
++>>>>>>> 98f876674a6f (scsi: smartpqi: add heartbeat check)
  	num_interrupts = atomic_read(&ctrl_info->num_interrupts);
+ 	heartbeat_count = pqi_read_heartbeat_counter(ctrl_info);
  
  	if (num_interrupts == ctrl_info->previous_num_interrupts) {
- 		ctrl_info->num_heartbeats_requested++;
- 		if (ctrl_info->num_heartbeats_requested >
- 			PQI_MAX_HEARTBEAT_REQUESTS) {
+ 		if (heartbeat_count == ctrl_info->previous_heartbeat_count) {
+ 			dev_err(&ctrl_info->pci_dev->dev,
+ 				"no heartbeat detected - last heartbeat count: %u\n",
+ 				heartbeat_count);
  			pqi_take_ctrl_offline(ctrl_info);
  			return;
  		}
@@@ -2876,8 -2895,7 +2891,12 @@@ static void pqi_start_heartbeat_timer(s
  
  static inline void pqi_stop_heartbeat_timer(struct pqi_ctrl_info *ctrl_info)
  {
++<<<<<<< HEAD
 +	if (ctrl_info->heartbeat_timer_started)
 +		del_timer_sync(&ctrl_info->heartbeat_timer);
++=======
+ 	del_timer_sync(&ctrl_info->heartbeat_timer);
++>>>>>>> 98f876674a6f (scsi: smartpqi: add heartbeat check)
  }
  
  static inline int pqi_event_type_to_event_index(unsigned int event_type)
* Unmerged path drivers/scsi/smartpqi/smartpqi.h
* Unmerged path drivers/scsi/smartpqi/smartpqi_init.c
diff --git a/drivers/scsi/smartpqi/smartpqi_sis.c b/drivers/scsi/smartpqi/smartpqi_sis.c
index c5325a4d0f0f..df37b7932703 100644
--- a/drivers/scsi/smartpqi/smartpqi_sis.c
+++ b/drivers/scsi/smartpqi/smartpqi_sis.c
@@ -351,6 +351,10 @@ void sis_soft_reset(struct pqi_ctrl_info *ctrl_info)
 
 void sis_shutdown_ctrl(struct pqi_ctrl_info *ctrl_info)
 {
+	if (readl(&ctrl_info->registers->sis_firmware_status) &
+		SIS_CTRL_KERNEL_PANIC)
+		return;
+
 	writel(SIS_TRIGGER_SHUTDOWN,
 		&ctrl_info->registers->sis_host_to_ctrl_doorbell);
 }
