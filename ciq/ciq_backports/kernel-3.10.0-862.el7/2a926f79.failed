netvsc: need rcu_derefence when accessing internal device info

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 2a926f791211b40ba114f45e0e7bfefd2fac5d30
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2a926f79.failed

The netvsc_device structure should be accessed by rcu_dereference
in the send path.  Change arguments to netvsc_send() to make
this easier to do correctly.

Remove no longer needed hv_device_to_netvsc_device.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2a926f791211b40ba114f45e0e7bfefd2fac5d30)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/hyperv_net.h
#	drivers/net/hyperv/netvsc.c
diff --cc drivers/net/hyperv/hyperv_net.h
index a32d7f1b2505,0054b6929f6e..000000000000
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@@ -180,9 -183,12 +180,16 @@@ struct rndis_device 
  /* Interface */
  struct rndis_message;
  struct netvsc_device;
++<<<<<<< HEAD
 +int netvsc_device_add(struct hv_device *device, void *additional_info);
++=======
+ struct net_device_context;
+ 
+ struct netvsc_device *netvsc_device_add(struct hv_device *device,
+ 					const struct netvsc_device_info *info);
++>>>>>>> 2a926f791211 (netvsc: need rcu_derefence when accessing internal device info)
  void netvsc_device_remove(struct hv_device *device);
- int netvsc_send(struct hv_device *device,
+ int netvsc_send(struct net_device_context *ndc,
  		struct hv_netvsc_packet *packet,
  		struct rndis_message *rndis_msg,
  		struct hv_page_buffer **page_buffer,
diff --cc drivers/net/hyperv/netvsc.c
index 3170ba757106,3c6f3ae520d9..000000000000
--- a/drivers/net/hyperv/netvsc.c
+++ b/drivers/net/hyperv/netvsc.c
@@@ -859,10 -829,10 +860,15 @@@ int netvsc_send(struct net_device_conte
  		struct hv_page_buffer **pb,
  		struct sk_buff *skb)
  {
++<<<<<<< HEAD
 +	struct netvsc_device *net_device;
++=======
+ 	struct netvsc_device *net_device = rcu_dereference(ndev_ctx->nvdev);
+ 	struct hv_device *device = ndev_ctx->device_ctx;
++>>>>>>> 2a926f791211 (netvsc: need rcu_derefence when accessing internal device info)
  	int ret = 0;
 -	struct netvsc_channel *nvchan;
 +	struct vmbus_channel *out_channel;
 +	u16 q_idx = packet->q_idx;
  	u32 pktlen = packet->total_data_buflen, msd_len = 0;
  	unsigned int section_index = NETVSC_INVALID_INDEX;
  	struct multi_send_data *msdp;
@@@ -871,8 -841,8 +877,13 @@@
  	bool try_batch;
  	bool xmit_more = (skb != NULL) ? skb->xmit_more : false;
  
++<<<<<<< HEAD
 +	net_device = get_outbound_net_device(device);
 +	if (unlikely(!net_device))
++=======
+ 	/* If device is rescinded, return error and packet will get dropped. */
+ 	if (unlikely(!net_device || net_device->destroy))
++>>>>>>> 2a926f791211 (netvsc: need rcu_derefence when accessing internal device info)
  		return -ENODEV;
  
  	/* We may race with netvsc_connect_vsp()/netvsc_init_buf() and get
* Unmerged path drivers/net/hyperv/hyperv_net.h
* Unmerged path drivers/net/hyperv/netvsc.c
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index d4dc9c189b85..ee4e10275742 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -530,8 +530,8 @@ static int netvsc_start_xmit(struct sk_buff *skb, struct net_device *net)
 
 	/* timestamp packet in software */
 	skb_tx_timestamp(skb);
-	ret = netvsc_send(net_device_ctx->device_ctx, packet,
-			  rndis_msg, &pb, skb);
+
+	ret = netvsc_send(net_device_ctx, packet, rndis_msg, &pb, skb);
 	if (likely(ret == 0))
 		return NETDEV_TX_OK;
 
diff --git a/drivers/net/hyperv/rndis_filter.c b/drivers/net/hyperv/rndis_filter.c
index b6bc44dd1f92..7af53d57d326 100644
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@ -241,7 +241,7 @@ static int rndis_filter_send_request(struct rndis_device *dev,
 			pb[0].len;
 	}
 
-	ret = netvsc_send(net_device_ctx->device_ctx, packet, NULL, &pb, NULL);
+	ret = netvsc_send(net_device_ctx, packet, NULL, &pb, NULL);
 	return ret;
 }
 
