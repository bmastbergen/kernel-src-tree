drm/i915/gvt: properly check per_ctx bb valid state

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Zhenyu Wang <zhenyuw@linux.intel.com>
commit 8f63fc2bc64716c16e269ab951130eeda78fe37a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8f63fc2b.failed

Need to check valid state for per_ctx bb and bypass batch buffer
combine for scan if necessary. Otherwise adding invalid MI batch
buffer start cmd for per_ctx bb will cause scan failure, which is
taken as -EFAULT now so vGPU would be put in failsafe. This trys
to fix that by checking per_ctx bb valid state. Also remove old
invalid WARNING that indirect ctx bb shouldn't depend on valid
per_ctx bb.

	Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>
	Signed-off-by: Zhi Wang <zhi.a.wang@intel.com>
(cherry picked from commit 8f63fc2bc64716c16e269ab951130eeda78fe37a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gvt/execlist.c
diff --cc drivers/gpu/drm/i915/gvt/execlist.c
index d186c157f65f,e5320b4eb698..000000000000
--- a/drivers/gpu/drm/i915/gvt/execlist.c
+++ b/drivers/gpu/drm/i915/gvt/execlist.c
@@@ -680,9 -701,7 +680,13 @@@ static int submit_context(struct intel_
  			CACHELINE_BYTES;
  		workload->wa_ctx.per_ctx.guest_gma =
  			per_ctx & PER_CTX_ADDR_MASK;
++<<<<<<< HEAD
 +		workload->wa_ctx.workload = workload;
 +
 +		WARN_ON(workload->wa_ctx.indirect_ctx.size && !(per_ctx & 0x1));
++=======
+ 		workload->wa_ctx.per_ctx.valid = per_ctx & 1;
++>>>>>>> 8f63fc2bc647 (drm/i915/gvt: properly check per_ctx bb valid state)
  	}
  
  	if (emulate_schedule_in)
diff --git a/drivers/gpu/drm/i915/gvt/cmd_parser.c b/drivers/gpu/drm/i915/gvt/cmd_parser.c
index 7479e130e063..d6b6f076f7f4 100644
--- a/drivers/gpu/drm/i915/gvt/cmd_parser.c
+++ b/drivers/gpu/drm/i915/gvt/cmd_parser.c
@@ -2765,6 +2765,9 @@ static int combine_wa_ctx(struct intel_shadow_wa_ctx *wa_ctx)
 	uint32_t per_ctx_start[CACHELINE_DWORDS] = {0};
 	unsigned char *bb_start_sva;
 
+	if (!wa_ctx->per_ctx.valid)
+		return 0;
+
 	per_ctx_start[0] = 0x18800001;
 	per_ctx_start[1] = wa_ctx->per_ctx.guest_gma;
 
* Unmerged path drivers/gpu/drm/i915/gvt/execlist.c
diff --git a/drivers/gpu/drm/i915/gvt/scheduler.h b/drivers/gpu/drm/i915/gvt/scheduler.h
index 2833dfa8c9ae..7e50b3aee33f 100644
--- a/drivers/gpu/drm/i915/gvt/scheduler.h
+++ b/drivers/gpu/drm/i915/gvt/scheduler.h
@@ -64,6 +64,7 @@ struct shadow_indirect_ctx {
 struct shadow_per_ctx {
 	unsigned long guest_gma;
 	unsigned long shadow_gma;
+	unsigned valid;
 };
 
 struct intel_shadow_wa_ctx {
