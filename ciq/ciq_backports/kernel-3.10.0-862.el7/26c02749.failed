net/mlx5e: Allow TC csum offload if applied together with pedit action

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Allow TC csum offload if applied together with pedit action (Kamal Heib) [1456687 1456694]
Rebuild_FUZZ: 97.06%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit 26c02749936f064abf771a0f5f49b280fcfd8b66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/26c02749.failed

When offloading header re-writes, the HW re-calculates the relevant L3/L4
checksums. Hence, when upper layers (as done by OVS) ask for TC checksum action
offload together with pedit offload, don't err. This command now works:

tc filter add dev ens1f0 protocol ip parent ffff: prio 20 flower skip_sw
	ip_proto tcp dst_port 9001
	action pedit ex munge tcp dport set 0x1234 pipe
        action csum tcp

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reported-by: Paul Blakey <paulb@mellanox.com>
	Reviewed-by: Paul Blakey <paulb@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 26c02749936f064abf771a0f5f49b280fcfd8b66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 10cb27761ecb,9dd83c7e4c51..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -43,8 -43,11 +43,9 @@@
  #include <net/tc_act/tc_vlan.h>
  #include <net/tc_act/tc_tunnel_key.h>
  #include <net/tc_act/tc_pedit.h>
+ #include <net/tc_act/tc_csum.h>
  #include <net/vxlan.h>
 -#include <net/arp.h>
  #include "en.h"
 -#include "en_rep.h"
  #include "en_tc.h"
  #include "eswitch.h"
  #include "vxlan.h"
@@@ -974,6 -1161,25 +997,28 @@@ static int parse_tc_nic_actions(struct 
  			continue;
  		}
  
++<<<<<<< HEAD
++=======
+ 		if (is_tcf_pedit(a)) {
+ 			err = parse_tc_pedit_action(priv, a, MLX5_FLOW_NAMESPACE_KERNEL,
+ 						    parse_attr);
+ 			if (err)
+ 				return err;
+ 
+ 			attr->action |= MLX5_FLOW_CONTEXT_ACTION_MOD_HDR |
+ 					MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
+ 			continue;
+ 		}
+ 
+ 		if (is_tcf_csum(a)) {
+ 			if (csum_offload_supported(priv, attr->action,
+ 						   tcf_csum_update_flags(a)))
+ 				continue;
+ 
+ 			return -EOPNOTSUPP;
+ 		}
+ 
++>>>>>>> 26c02749936f (net/mlx5e: Allow TC csum offload if applied together with pedit action)
  		if (is_tcf_skbedit_mark(a)) {
  			u32 mark = tcf_skbedit_mark(a);
  
@@@ -1398,9 -1672,27 +1443,30 @@@ static int parse_tc_fdb_actions(struct 
  			continue;
  		}
  
++<<<<<<< HEAD
++=======
+ 		if (is_tcf_pedit(a)) {
+ 			err = parse_tc_pedit_action(priv, a, MLX5_FLOW_NAMESPACE_FDB,
+ 						    parse_attr);
+ 			if (err)
+ 				return err;
+ 
+ 			attr->action |= MLX5_FLOW_CONTEXT_ACTION_MOD_HDR;
+ 			continue;
+ 		}
+ 
+ 		if (is_tcf_csum(a)) {
+ 			if (csum_offload_supported(priv, attr->action,
+ 						   tcf_csum_update_flags(a)))
+ 				continue;
+ 
+ 			return -EOPNOTSUPP;
+ 		}
+ 
++>>>>>>> 26c02749936f (net/mlx5e: Allow TC csum offload if applied together with pedit action)
  		if (is_tcf_mirred_egress_redirect(a)) {
  			int ifindex = tcf_mirred_ifindex(a);
 -			struct net_device *out_dev, *encap_dev = NULL;
 +			struct net_device *out_dev;
  			struct mlx5e_priv *out_priv;
  
  			out_dev = __dev_get_by_index(dev_net(priv->netdev), ifindex);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
