bnxt_en: Fix race conditions in .ndo_get_stats64().

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] bnxt_en: Fix race conditions in .ndo_get_stats64() (Jonathan Toppins) [1459659]
Rebuild_FUZZ: 99.01%
commit-author Michael Chan <michael.chan@broadcom.com>
commit f9b76ebd49f97458857568918c305a17fa7c6567
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f9b76ebd.failed

.ndo_get_stats64() may not be protected by RTNL and can race with
.ndo_stop() or other ethtool operations that can free the statistics
memory.  Fix it by setting a new flag BNXT_STATE_READ_STATS and then
proceeding to read statistics memory only if the state is OPEN.  The
close path that frees the memory clears the OPEN state and then waits
for the BNXT_STATE_READ_STATS to clear before proceeding to free the
statistics memory.

Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f9b76ebd49f97458857568918c305a17fa7c6567)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 43bad1740dd7,415694d37989..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -6126,8 -6364,15 +6132,20 @@@ bnxt_get_stats64(struct net_device *dev
  	u32 i;
  	struct bnxt *bp = netdev_priv(dev);
  
++<<<<<<< HEAD
 +	if (!bp->bnapi)
 +		return stats;
++=======
+ 	set_bit(BNXT_STATE_READ_STATS, &bp->state);
+ 	/* Make sure bnxt_close_nic() sees that we are reading stats before
+ 	 * we check the BNXT_STATE_OPEN flag.
+ 	 */
+ 	smp_mb__after_atomic();
+ 	if (!test_bit(BNXT_STATE_OPEN, &bp->state)) {
+ 		clear_bit(BNXT_STATE_READ_STATS, &bp->state);
+ 		return;
+ 	}
++>>>>>>> f9b76ebd49f9 (bnxt_en: Fix race conditions in .ndo_get_stats64().)
  
  	/* TODO check if we need to synchronize with bnxt_close path */
  	for (i = 0; i < bp->cp_nr_rings; i++) {
@@@ -6174,8 -6419,7 +6192,12 @@@
  		stats->tx_fifo_errors = le64_to_cpu(tx->tx_fifo_underruns);
  		stats->tx_errors = le64_to_cpu(tx->tx_err);
  	}
++<<<<<<< HEAD
 +
 +	return stats;
++=======
+ 	clear_bit(BNXT_STATE_READ_STATS, &bp->state);
++>>>>>>> f9b76ebd49f9 (bnxt_en: Fix race conditions in .ndo_get_stats64().)
  }
  
  static bool bnxt_mc_list_updated(struct bnxt *bp, u32 *rx_mask)
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.h b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
index 932c45759428..7e96cc948853 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@ -1087,6 +1087,7 @@ struct bnxt {
 	unsigned long		state;
 #define BNXT_STATE_OPEN		0
 #define BNXT_STATE_IN_SP_TASK	1
+#define BNXT_STATE_READ_STATS	2
 
 	struct bnxt_irq	*irq_tbl;
 	int			total_irqs;
