net: add new netdevice feature for offload of RX port for UDP tunnels

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] add new netdevice feature for offload of RX port for UDP tunnels (Jiri Benc) [1308630 1467280]
Rebuild_FUZZ: 96.24%
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit d764a122cc7af7ab1c40c08745f0fcd33cc2f7db
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d764a122.failed

This adds a new netdevice feature, so that the offloading of RX port for
UDP tunnels can be disabled by the administrator on some netdevices,
using the "rx-udp_tunnel-port-offload" feature in ethtool.

This feature is set for all devices that provide ndo_udp_tunnel_add.

	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d764a122cc7af7ab1c40c08745f0fcd33cc2f7db)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdev_features.h
#	net/core/ethtool.c
diff --cc include/linux/netdev_features.h
index 22cd0d662284,dc8b4896b77b..000000000000
--- a/include/linux/netdev_features.h
+++ b/include/linux/netdev_features.h
@@@ -91,6 -73,9 +91,12 @@@ enum 
  	NETIF_F_HW_L2FW_DOFFLOAD_BIT,	/* Allow L2 Forwarding in Hardware */
  
  	NETIF_F_HW_TC_BIT,		/* Offload TC infrastructure */
++<<<<<<< HEAD
++=======
+ 	NETIF_F_HW_ESP_BIT,		/* Hardware ESP transformation offload */
+ 	NETIF_F_HW_ESP_TX_CSUM_BIT,	/* ESP with TX checksum offload */
+ 	NETIF_F_RX_UDP_TUNNEL_PORT_BIT, /* Offload of RX port for UDP tunnels */
++>>>>>>> d764a122cc7a (net: add new netdevice feature for offload of RX port for UDP tunnels)
  
  	/*
  	 * Add your fresh new feature above and remember to update
@@@ -151,8 -136,10 +157,14 @@@
  #define NETIF_F_HW_VLAN_STAG_RX	__NETIF_F(HW_VLAN_STAG_RX)
  #define NETIF_F_HW_VLAN_STAG_TX	__NETIF_F(HW_VLAN_STAG_TX)
  #define NETIF_F_HW_L2FW_DOFFLOAD	__NETIF_F(HW_L2FW_DOFFLOAD)
 +#define NETIF_F_BUSY_POLL	__NETIF_F(BUSY_POLL)
  #define NETIF_F_HW_TC		__NETIF_F(HW_TC)
++<<<<<<< HEAD
++=======
+ #define NETIF_F_HW_ESP		__NETIF_F(HW_ESP)
+ #define NETIF_F_HW_ESP_TX_CSUM	__NETIF_F(HW_ESP_TX_CSUM)
+ #define	NETIF_F_RX_UDP_TUNNEL_PORT  __NETIF_F(RX_UDP_TUNNEL_PORT)
++>>>>>>> d764a122cc7a (net: add new netdevice feature for offload of RX port for UDP tunnels)
  
  #define for_each_netdev_feature(mask_addr, bit)	\
  	for_each_set_bit(bit, (unsigned long *)mask_addr, NETDEV_FEATURE_COUNT)
diff --cc net/core/ethtool.c
index b69d0a7f5626,b987bc475fc8..000000000000
--- a/net/core/ethtool.c
+++ b/net/core/ethtool.c
@@@ -103,8 -102,10 +103,14 @@@ static const char netdev_features_strin
  	[NETIF_F_RXFCS_BIT] =            "rx-fcs",
  	[NETIF_F_RXALL_BIT] =            "rx-all",
  	[NETIF_F_HW_L2FW_DOFFLOAD_BIT] = "l2-fwd-offload",
 +	[NETIF_F_BUSY_POLL_BIT] =        "busy-poll",
  	[NETIF_F_HW_TC_BIT] =		 "hw-tc-offload",
++<<<<<<< HEAD
++=======
+ 	[NETIF_F_HW_ESP_BIT] =		 "esp-hw-offload",
+ 	[NETIF_F_HW_ESP_TX_CSUM_BIT] =	 "esp-tx-csum-hw-offload",
+ 	[NETIF_F_RX_UDP_TUNNEL_PORT_BIT] =	 "rx-udp_tunnel-port-offload",
++>>>>>>> d764a122cc7a (net: add new netdevice feature for offload of RX port for UDP tunnels)
  };
  
  static const char
* Unmerged path include/linux/netdev_features.h
diff --git a/net/core/dev.c b/net/core/dev.c
index 01eb55635504..543493641348 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -7211,6 +7211,12 @@ int register_netdevice(struct net_device *dev)
 	 */
 	dev->hw_features |= NETIF_F_SOFT_FEATURES;
 	dev->features |= NETIF_F_SOFT_FEATURES;
+
+	if (dev->netdev_ops->ndo_udp_tunnel_add) {
+		dev->features |= NETIF_F_RX_UDP_TUNNEL_PORT;
+		dev->hw_features |= NETIF_F_RX_UDP_TUNNEL_PORT;
+	}
+
 	dev->wanted_features = dev->features & dev->hw_features;
 
 	if (!(dev->flags & IFF_LOOPBACK))
* Unmerged path net/core/ethtool.c
