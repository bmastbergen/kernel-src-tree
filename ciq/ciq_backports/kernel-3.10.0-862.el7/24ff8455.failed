nfp: dump all hwinfo

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Carl Heymann <carl.heymann@netronome.com>
commit 24ff8455aff061c83ebad3471991937a62eece81
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/24ff8455.failed

- Dump hwinfo as separate TLV chunk, in a packed format containing
  zero-separated key and value strings.
- This provides additional debug context, if requested by the dumpspec.

	Signed-off-by: Carl Heymann <carl.heymann@netronome.com>
	Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 24ff8455aff061c83ebad3471991937a62eece81)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
#	drivers/net/ethernet/netronome/nfp/nfpcore/nfp.h
diff --cc drivers/net/ethernet/netronome/nfp/nfpcore/nfp.h
index e0224cb05236,ced62d112aa2..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfpcore/nfp.h
+++ b/drivers/net/ethernet/netronome/nfp/nfpcore/nfp.h
@@@ -46,20 -46,24 +46,28 @@@
  
  /* Implemented in nfp_hwinfo.c */
  
++<<<<<<< HEAD
 +const char *nfp_hwinfo_lookup(struct nfp_cpp *cpp, const char *lookup);
++=======
+ struct nfp_hwinfo;
+ struct nfp_hwinfo *nfp_hwinfo_read(struct nfp_cpp *cpp);
+ const char *nfp_hwinfo_lookup(struct nfp_hwinfo *hwinfo, const char *lookup);
+ char *nfp_hwinfo_get_packed_strings(struct nfp_hwinfo *hwinfo);
+ u32 nfp_hwinfo_get_packed_str_size(struct nfp_hwinfo *hwinfo);
++>>>>>>> 24ff8455aff0 (nfp: dump all hwinfo)
  
 -/* Implemented in nfp_nsp.c, low level functions */
 +/* Implemented in nfp_nsp.c */
  
  struct nfp_nsp;
 -
 -struct nfp_cpp *nfp_nsp_cpp(struct nfp_nsp *state);
 -bool nfp_nsp_config_modified(struct nfp_nsp *state);
 -void nfp_nsp_config_set_modified(struct nfp_nsp *state, bool modified);
 -void *nfp_nsp_config_entries(struct nfp_nsp *state);
 -unsigned int nfp_nsp_config_idx(struct nfp_nsp *state);
 -void nfp_nsp_config_set_state(struct nfp_nsp *state, void *entries,
 -			      unsigned int idx);
 -void nfp_nsp_config_clear_state(struct nfp_nsp *state);
 +struct firmware;
 +
 +struct nfp_nsp *nfp_nsp_open(struct nfp_cpp *cpp);
 +void nfp_nsp_close(struct nfp_nsp *state);
 +u16 nfp_nsp_get_abi_ver_major(struct nfp_nsp *state);
 +u16 nfp_nsp_get_abi_ver_minor(struct nfp_nsp *state);
 +int nfp_nsp_wait(struct nfp_nsp *state);
 +int nfp_nsp_device_soft_reset(struct nfp_nsp *state);
 +int nfp_nsp_load_fw(struct nfp_nsp *state, const struct firmware *fw);
  int nfp_nsp_read_eth_table(struct nfp_nsp *state, void *buf, unsigned int size);
  int nfp_nsp_write_eth_table(struct nfp_nsp *state,
  			    const void *buf, unsigned int size);
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_debugdump.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfpcore/nfp.h
diff --git a/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_hwinfo.c b/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_hwinfo.c
index 8d8f311ffa6e..89f94d704c6d 100644
--- a/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_hwinfo.c
+++ b/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_hwinfo.c
@@ -316,3 +316,13 @@ const char *nfp_hwinfo_lookup(struct nfp_cpp *cpp, const char *lookup)
 
 	return NULL;
 }
+
+char *nfp_hwinfo_get_packed_strings(struct nfp_hwinfo *hwinfo)
+{
+	return hwinfo->data;
+}
+
+u32 nfp_hwinfo_get_packed_str_size(struct nfp_hwinfo *hwinfo)
+{
+	return le32_to_cpu(hwinfo->size) - sizeof(u32);
+}
