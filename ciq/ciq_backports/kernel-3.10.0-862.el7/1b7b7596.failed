i40e: make i40evf_map_rings_to_vectors void

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Mitch Williams <mitch.a.williams@intel.com>
commit 1b7b7596aeebc21913bad49eb6a2c364c4b2988a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1b7b7596.failed

This function cannot fail, so why is it returning a value? And why are
we checking it? Why shouldn't we just make it void? Why is this commit
message made up of only questions?

	Signed-off-by: Mitch Williams <mitch.a.williams@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 1b7b7596aeebc21913bad49eb6a2c364c4b2988a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40evf/i40evf_main.c
diff --cc drivers/net/ethernet/intel/i40evf/i40evf_main.c
index b5b622d89241,f2f1e754c2ce..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40evf_main.c
+++ b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
@@@ -1512,6 -1546,46 +1509,49 @@@ static void i40evf_free_rss(struct i40e
  }
  
  /**
++<<<<<<< HEAD
++=======
+  * i40evf_reinit_interrupt_scheme - Reallocate queues and vectors
+  * @adapter: board private structure
+  *
+  * Returns 0 on success, negative on failure
+  **/
+ static int i40evf_reinit_interrupt_scheme(struct i40evf_adapter *adapter)
+ {
+ 	struct net_device *netdev = adapter->netdev;
+ 	int err;
+ 
+ 	if (netif_running(netdev))
+ 		i40evf_free_traffic_irqs(adapter);
+ 	i40evf_free_misc_irq(adapter);
+ 	i40evf_reset_interrupt_capability(adapter);
+ 	i40evf_free_q_vectors(adapter);
+ 	i40evf_free_queues(adapter);
+ 
+ 	err =  i40evf_init_interrupt_scheme(adapter);
+ 	if (err)
+ 		goto err;
+ 
+ 	netif_tx_stop_all_queues(netdev);
+ 
+ 	err = i40evf_request_misc_irq(adapter);
+ 	if (err)
+ 		goto err;
+ 
+ 	set_bit(__I40E_VSI_DOWN, adapter->vsi.state);
+ 
+ 	i40evf_map_rings_to_vectors(adapter);
+ 
+ 	if (RSS_AQ(adapter))
+ 		adapter->aq_required |= I40EVF_FLAG_AQ_CONFIGURE_RSS;
+ 	else
+ 		err = i40evf_init_rss(adapter);
+ err:
+ 	return err;
+ }
+ 
+ /**
++>>>>>>> 1b7b7596aeeb (i40e: make i40evf_map_rings_to_vectors void)
   * i40evf_watchdog_timer - Periodic call-back timer
   * @data: pointer to adapter disguised as unsigned long
   **/
* Unmerged path drivers/net/ethernet/intel/i40evf/i40evf_main.c
