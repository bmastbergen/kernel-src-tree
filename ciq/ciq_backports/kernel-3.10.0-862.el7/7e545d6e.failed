livepatch/module: remove livepatch module notifier

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jessica Yu <jeyu@redhat.com>
commit 7e545d6eca20ce8ef7f66a63146cbff82b2ba760
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7e545d6e.failed

Remove the livepatch module notifier in favor of directly enabling and
disabling patches to modules in the module loader. Hard-coding the
function calls ensures that ftrace_module_enable() is run before
klp_module_coming() during module load, and that klp_module_going() is
run before ftrace_release_mod() during module unload. This way, ftrace
and livepatch code is run in the correct order during the module
load/unload sequence without dependence on the module notifier call chain.

	Signed-off-by: Jessica Yu <jeyu@redhat.com>
	Reviewed-by: Petr Mladek <pmladek@suse.cz>
	Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Acked-by: Rusty Russell <rusty@rustcorp.com.au>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 7e545d6eca20ce8ef7f66a63146cbff82b2ba760)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/livepatch.h
#	kernel/livepatch/core.c
#	kernel/module.c
diff --cc kernel/module.c
index 65af51b1c60d,4b65fbb10bdc..000000000000
--- a/kernel/module.c
+++ b/kernel/module.c
@@@ -967,6 -985,9 +968,12 @@@ SYSCALL_DEFINE2(delete_module, const ch
  		mod->exit();
  	blocking_notifier_call_chain(&module_notify_list,
  				     MODULE_STATE_GOING, mod);
++<<<<<<< HEAD
++=======
+ 	klp_module_going(mod);
+ 	ftrace_release_mod(mod);
+ 
++>>>>>>> 7e545d6eca20 (livepatch/module: remove livepatch module notifier)
  	async_synchronize_full();
  
  	/* Store the name of the last unloaded module for diagnostic purposes */
@@@ -3276,6 -3307,21 +3283,24 @@@ static int do_init_module(struct modul
  	wake_up_all(&module_wq);
  
  	return 0;
++<<<<<<< HEAD
++=======
+ 
+ fail_free_freeinit:
+ 	kfree(freeinit);
+ fail:
+ 	/* Try to protect us from buggy refcounters. */
+ 	mod->state = MODULE_STATE_GOING;
+ 	synchronize_sched();
+ 	module_put(mod);
+ 	blocking_notifier_call_chain(&module_notify_list,
+ 				     MODULE_STATE_GOING, mod);
+ 	klp_module_going(mod);
+ 	ftrace_release_mod(mod);
+ 	free_module(mod);
+ 	wake_up_all(&module_wq);
+ 	return ret;
++>>>>>>> 7e545d6eca20 (livepatch/module: remove livepatch module notifier)
  }
  
  static int may_init_module(void)
@@@ -3355,6 -3402,38 +3380,41 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static int prepare_coming_module(struct module *mod)
+ {
+ 	int err;
+ 
+ 	ftrace_module_enable(mod);
+ 	err = klp_module_coming(mod);
+ 	if (err)
+ 		return err;
+ 
+ 	blocking_notifier_call_chain(&module_notify_list,
+ 				     MODULE_STATE_COMING, mod);
+ 	return 0;
+ }
+ 
+ static int unknown_module_param_cb(char *param, char *val, const char *modname,
+ 				   void *arg)
+ {
+ 	struct module *mod = arg;
+ 	int ret;
+ 
+ 	if (strcmp(param, "async_probe") == 0) {
+ 		mod->async_probe_requested = true;
+ 		return 0;
+ 	}
+ 
+ 	/* Check for magic 'dyndbg' arg */
+ 	ret = ddebug_dyndbg_module_param_cb(param, val, modname);
+ 	if (ret != 0)
+ 		pr_warn("%s: unknown parameter '%s' ignored\n", modname, param);
+ 	return 0;
+ }
+ 
++>>>>>>> 7e545d6eca20 (livepatch/module: remove livepatch module notifier)
  /* Allocate and load the module: note that size of section 0 is always
     zero, and we rely on this for optional sections. */
  static int load_module(struct load_info *info, const char __user *uargs,
@@@ -3489,6 -3559,11 +3549,14 @@@
  
  	return do_init_module(mod);
  
++<<<<<<< HEAD
++=======
+  coming_cleanup:
+ 	blocking_notifier_call_chain(&module_notify_list,
+ 				     MODULE_STATE_GOING, mod);
+ 	klp_module_going(mod);
+ 
++>>>>>>> 7e545d6eca20 (livepatch/module: remove livepatch module notifier)
   bug_cleanup:
  	/* module_bug_cleanup needs module_mutex protection */
  	mutex_lock(&module_mutex);
* Unmerged path include/linux/livepatch.h
* Unmerged path kernel/livepatch/core.c
* Unmerged path include/linux/livepatch.h
* Unmerged path kernel/livepatch/core.c
* Unmerged path kernel/module.c
