target: Drop unused se_lun->lun_acl_list

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] Drop unused se_lun->lun_acl_list (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 88.89%
commit-author Nicholas Bellinger <nab@linux-iscsi.org>
commit 84786546b6ff8d50c3e4c1ea877a872cf55d485a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/84786546.failed

	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Sagi Grimberg <sagig@mellanox.com>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 84786546b6ff8d50c3e4c1ea877a872cf55d485a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_device.c
#	drivers/target/target_core_tpg.c
diff --cc drivers/target/target_core_device.c
index 53dcefb982bc,ba8c65a670d8..000000000000
--- a/drivers/target/target_core_device.c
+++ b/drivers/target/target_core_device.c
@@@ -1366,14 -1272,9 +1365,9 @@@ int core_dev_add_initiator_node_lun_acl
  			lun_access, nacl, tpg) < 0)
  		return -EINVAL;
  
- 	spin_lock(&lun->lun_acl_lock);
- 	list_add_tail(&lacl->lacl_list, &lun->lun_acl_list);
- 	atomic_inc_mb(&lun->lun_acl_count);
- 	spin_unlock(&lun->lun_acl_lock);
- 
  	pr_debug("%s_TPG[%hu]_LUN[%u->%u] - Added %s ACL for "
  		" InitiatorNode: %s\n", tpg->se_tpg_tfo->get_fabric_name(),
 -		tpg->se_tpg_tfo->tpg_get_tag(tpg), lun->unpacked_lun, lacl->mapped_lun,
 +		tpg->se_tpg_tfo->tpg_get_tag(tpg), unpacked_lun, lacl->mapped_lun,
  		(lun_access & TRANSPORT_LUNFLAGS_READ_WRITE) ? "RW" : "RO",
  		lacl->initiatorname);
  	/*
@@@ -1400,15 -1298,11 +1394,21 @@@ int core_dev_del_initiator_node_lun_acl
  	if (!nacl)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	spin_lock(&lun->lun_acl_lock);
 +	list_del(&lacl->lacl_list);
 +	atomic_dec_mb(&lun->lun_acl_count);
 +	spin_unlock(&lun->lun_acl_lock);
 +
 +	core_disable_device_list_for_node(lun, NULL, lacl->mapped_lun,
 +		TRANSPORT_LUNFLAGS_NO_ACCESS, nacl, tpg);
- 
- 	lacl->se_lun = NULL;
++=======
+ 	mutex_lock(&nacl->lun_entry_mutex);
+ 	deve = target_nacl_find_deve(nacl, lacl->mapped_lun);
+ 	if (deve)
+ 		core_disable_device_list_for_node(lun, deve, nacl, tpg);
+ 	mutex_unlock(&nacl->lun_entry_mutex);
++>>>>>>> 84786546b6ff (target: Drop unused se_lun->lun_acl_list)
  
  	pr_debug("%s_TPG[%hu]_LUN[%u] - Removed ACL for"
  		" InitiatorNode: %s Mapped LUN: %u\n",
diff --cc drivers/target/target_core_tpg.c
index 0696de9553d3,73c25bda5a25..000000000000
--- a/drivers/target/target_core_tpg.c
+++ b/drivers/target/target_core_tpg.c
@@@ -797,17 -598,18 +795,27 @@@ struct se_lun *core_tpg_alloc_lun
  		return ERR_PTR(-EOVERFLOW);
  	}
  
 -	lun = kzalloc(sizeof(*lun), GFP_KERNEL);
 -	if (!lun) {
 -		pr_err("Unable to allocate se_lun memory\n");
 -		return ERR_PTR(-ENOMEM);
 +	spin_lock(&tpg->tpg_lun_lock);
 +	lun = tpg->tpg_lun_list[unpacked_lun];
 +	if (lun->lun_status == TRANSPORT_LUN_STATUS_ACTIVE) {
 +		pr_err("TPG Logical Unit Number: %u is already active"
 +			" on %s Target Portal Group: %u, ignoring request.\n",
 +			unpacked_lun, tpg->se_tpg_tfo->get_fabric_name(),
 +			tpg->se_tpg_tfo->tpg_get_tag(tpg));
 +		spin_unlock(&tpg->tpg_lun_lock);
 +		return ERR_PTR(-EINVAL);
  	}
++<<<<<<< HEAD
 +	spin_unlock(&tpg->tpg_lun_lock);
++=======
+ 	lun->unpacked_lun = unpacked_lun;
+ 	lun->lun_link_magic = SE_LUN_LINK_MAGIC;
+ 	lun->lun_status = TRANSPORT_LUN_STATUS_FREE;
+ 	atomic_set(&lun->lun_acl_count, 0);
+ 	init_completion(&lun->lun_shutdown_comp);
+ 	spin_lock_init(&lun->lun_sep_lock);
+ 	init_completion(&lun->lun_ref_comp);
++>>>>>>> 84786546b6ff (target: Drop unused se_lun->lun_acl_list)
  
  	return lun;
  }
* Unmerged path drivers/target/target_core_device.c
* Unmerged path drivers/target/target_core_tpg.c
diff --git a/include/target/target_core_base.h b/include/target/target_core_base.h
index 7bcf92529421..866eac19463f 100644
--- a/include/target/target_core_base.h
+++ b/include/target/target_core_base.h
@@ -643,7 +643,6 @@ struct se_lun_acl {
 	u32			mapped_lun;
 	struct se_node_acl	*se_lun_nacl;
 	struct se_lun		*se_lun;
-	struct list_head	lacl_list;
 	struct config_group	se_lun_group;
 	struct se_ml_stat_grps	ml_stat_grps;
 };
@@ -720,10 +719,8 @@ struct se_lun {
 	u32			lun_flags;
 	u32			unpacked_lun;
 	atomic_t		lun_acl_count;
-	spinlock_t		lun_acl_lock;
 	spinlock_t		lun_sep_lock;
 	struct completion	lun_shutdown_comp;
-	struct list_head	lun_acl_list;
 	struct se_device	*lun_se_dev;
 	struct se_port		*lun_sep;
 	struct config_group	lun_group;
