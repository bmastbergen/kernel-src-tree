devlink: Add Ethernet header for dpipe

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Arkadi Sharshevsky <arkadis@mellanox.com>
commit 1177009131bee310421f5c04c43d3777cbacbdc8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/11770091.failed

This will be used by the IPv4 host table which will be introduced in the
following patches. This header is global and can be reused by many
drivers.

	Signed-off-by: Arkadi Sharshevsky <arkadis@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1177009131bee310421f5c04c43d3777cbacbdc8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/devlink.h
#	include/uapi/linux/devlink.h
diff --cc include/net/devlink.h
index c838fd57d82c,ddb8b5227580..000000000000
--- a/include/net/devlink.h
+++ b/include/net/devlink.h
@@@ -133,6 -308,27 +133,30 @@@ int devlink_sb_register(struct devlink 
  			u16 egress_pools_count, u16 ingress_tc_count,
  			u16 egress_tc_count);
  void devlink_sb_unregister(struct devlink *devlink, unsigned int sb_index);
++<<<<<<< HEAD
++=======
+ int devlink_dpipe_table_register(struct devlink *devlink,
+ 				 const char *table_name,
+ 				 struct devlink_dpipe_table_ops *table_ops,
+ 				 void *priv, u64 size,
+ 				 bool counter_control_extern);
+ void devlink_dpipe_table_unregister(struct devlink *devlink,
+ 				    const char *table_name);
+ int devlink_dpipe_headers_register(struct devlink *devlink,
+ 				   struct devlink_dpipe_headers *dpipe_headers);
+ void devlink_dpipe_headers_unregister(struct devlink *devlink);
+ bool devlink_dpipe_table_counter_enabled(struct devlink *devlink,
+ 					 const char *table_name);
+ int devlink_dpipe_entry_ctx_prepare(struct devlink_dpipe_dump_ctx *dump_ctx);
+ int devlink_dpipe_entry_ctx_append(struct devlink_dpipe_dump_ctx *dump_ctx,
+ 				   struct devlink_dpipe_entry *entry);
+ int devlink_dpipe_entry_ctx_close(struct devlink_dpipe_dump_ctx *dump_ctx);
+ int devlink_dpipe_action_put(struct sk_buff *skb,
+ 			     struct devlink_dpipe_action *action);
+ int devlink_dpipe_match_put(struct sk_buff *skb,
+ 			    struct devlink_dpipe_match *match);
+ extern struct devlink_dpipe_header devlink_dpipe_header_ethernet;
++>>>>>>> 1177009131be (devlink: Add Ethernet header for dpipe)
  
  #else
  
diff --cc include/uapi/linux/devlink.h
index 9014c33d4e77,a855f8dcc8ee..000000000000
--- a/include/uapi/linux/devlink.h
+++ b/include/uapi/linux/devlink.h
@@@ -148,4 -208,30 +148,33 @@@ enum devlink_attr 
  	DEVLINK_ATTR_MAX = __DEVLINK_ATTR_MAX - 1
  };
  
++<<<<<<< HEAD
++=======
+ /* Mapping between internal resource described by the field and system
+  * structure
+  */
+ enum devlink_dpipe_field_mapping_type {
+ 	DEVLINK_DPIPE_FIELD_MAPPING_TYPE_NONE,
+ 	DEVLINK_DPIPE_FIELD_MAPPING_TYPE_IFINDEX,
+ };
+ 
+ /* Match type - specify the type of the match */
+ enum devlink_dpipe_match_type {
+ 	DEVLINK_DPIPE_MATCH_TYPE_FIELD_EXACT,
+ };
+ 
+ /* Action type - specify the action type */
+ enum devlink_dpipe_action_type {
+ 	DEVLINK_DPIPE_ACTION_TYPE_FIELD_MODIFY,
+ };
+ 
+ enum devlink_dpipe_field_ethernet_id {
+ 	DEVLINK_DPIPE_FIELD_ETHERNET_DST_MAC,
+ };
+ 
+ enum devlink_dpipe_header_id {
+ 	DEVLINK_DPIPE_HEADER_ETHERNET,
+ };
+ 
++>>>>>>> 1177009131be (devlink: Add Ethernet header for dpipe)
  #endif /* _UAPI_LINUX_DEVLINK_H_ */
* Unmerged path include/net/devlink.h
* Unmerged path include/uapi/linux/devlink.h
diff --git a/net/core/devlink.c b/net/core/devlink.c
index df45d8e125ae..c1da28fe57bc 100644
--- a/net/core/devlink.c
+++ b/net/core/devlink.c
@@ -29,6 +29,23 @@
 #define CREATE_TRACE_POINTS
 #include <trace/events/devlink.h>
 
+static struct devlink_dpipe_field devlink_dpipe_fields_ethernet[] = {
+	{
+		.name = "destination_mac",
+		.id = DEVLINK_DPIPE_FIELD_ETHERNET_DST_MAC,
+		.bitwidth = 48,
+	},
+};
+
+struct devlink_dpipe_header devlink_dpipe_header_ethernet = {
+	.name = "ethernet",
+	.id = DEVLINK_DPIPE_HEADER_ETHERNET,
+	.fields = devlink_dpipe_fields_ethernet,
+	.fields_count = ARRAY_SIZE(devlink_dpipe_fields_ethernet),
+	.global = true,
+};
+EXPORT_SYMBOL(devlink_dpipe_header_ethernet);
+
 EXPORT_TRACEPOINT_SYMBOL_GPL(devlink_hwmsg);
 
 static LIST_HEAD(devlink_list);
