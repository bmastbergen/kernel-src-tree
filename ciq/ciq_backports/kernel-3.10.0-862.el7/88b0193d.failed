perf/callchain: Force USER_DS when invoking perf_callchain_user()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Will Deacon <will.deacon@arm.com>
commit 88b0193d9418c00340e45e0a913a0813bc6c8c96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/88b0193d.failed

Perf can generate and record a user callchain in response to a synchronous
request, such as a tracepoint firing. If this happens under set_fs(KERNEL_DS),
then we can end up walking the user stack (and dereferencing/saving whatever we
find there) without the protections usually afforded by checks such as
access_ok.

Rather than play whack-a-mole with each architecture's stack unwinding
implementation, fix the root of the problem by ensuring that we force USER_DS
when invoking perf_callchain_user from the perf core.

	Reported-by: Al Viro <viro@ZenIV.linux.org.uk>
	Signed-off-by: Will Deacon <will.deacon@arm.com>
	Acked-by: Peter Zijlstra <peterz@infradead.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 88b0193d9418c00340e45e0a913a0813bc6c8c96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/events/callchain.c
diff --cc kernel/events/callchain.c
index f2a88de87a49,1b2be63c8528..000000000000
--- a/kernel/events/callchain.c
+++ b/kernel/events/callchain.c
@@@ -191,14 -229,18 +191,29 @@@ perf_callchain(struct perf_event *event
  		}
  
  		if (regs) {
++<<<<<<< HEAD
 +			/*
 +			 * Disallow cross-task user callchains.
 +			 */
 +			if (event->ctx->task && event->ctx->task != current)
 +				goto exit_put;
 +
 +			perf_callchain_store(entry, PERF_CONTEXT_USER);
 +			perf_callchain_user(entry, regs);
++=======
+ 			mm_segment_t fs;
+ 
+ 			if (crosstask)
+ 				goto exit_put;
+ 
+ 			if (add_mark)
+ 				perf_callchain_store_context(&ctx, PERF_CONTEXT_USER);
+ 
+ 			fs = get_fs();
+ 			set_fs(USER_DS);
+ 			perf_callchain_user(&ctx, regs);
+ 			set_fs(fs);
++>>>>>>> 88b0193d9418 (perf/callchain: Force USER_DS when invoking perf_callchain_user())
  		}
  	}
  
* Unmerged path kernel/events/callchain.c
