md: add raid4/5/6 journal mode switching API

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [md] add raid4/5/6 journal mode switching API (Nigel Croxon) [1455932]
Rebuild_FUZZ: 95.24%
commit-author Heinz Mauelshagen <heinzm@redhat.com>
commit 78e470c26f524f4706c2555613b9641d85190cbe
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/78e470c2.failed

Commit 2ded370373a4 ("md/r5cache: State machine for raid5-cache write
back mode") added support for "write-back" caching on the raid journal
device.

In order to allow the dm-raid target to switch between the available
"write-through" and "write-back" modes, provide a new
r5c_journal_mode_set() API.

Use the new API in existing r5c_journal_mode_store()

	Signed-off-by: Heinz Mauelshagen <heinzm@redhat.com>
	Acked-by: Shaohua Li <shli@fb.com>
	Signed-off-by: Mike Snitzer <snitzer@redhat.com>
(cherry picked from commit 78e470c26f524f4706c2555613b9641d85190cbe)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/md/raid5-cache.c
#	drivers/md/raid5.h
diff --cc drivers/md/raid5-cache.c
index 191ad03407b7,218b6f37da85..000000000000
--- a/drivers/md/raid5-cache.c
+++ b/drivers/md/raid5-cache.c
@@@ -2131,20 -2331,16 +2124,19 @@@ int r5c_journal_mode_set(struct mddev *
  	if (!log)
  		return -ENODEV;
  
- 	if (len && page[len - 1] == '\n')
- 		len -= 1;
- 	for (i = 0; i < ARRAY_SIZE(r5c_journal_mode_str); i++)
- 		if (strlen(r5c_journal_mode_str[i]) == len &&
- 		    strncmp(page, r5c_journal_mode_str[i], len) == 0) {
- 			val = i;
- 			break;
- 		}
- 	if (val < R5C_JOURNAL_MODE_WRITE_THROUGH ||
- 	    val > R5C_JOURNAL_MODE_WRITE_BACK)
+ 	if (mode < R5C_JOURNAL_MODE_WRITE_THROUGH ||
+ 	    mode > R5C_JOURNAL_MODE_WRITE_BACK)
+ 		return -EINVAL;
+ 
++<<<<<<< HEAD
++=======
+ 	if (raid5_calc_degraded(conf) > 0 &&
+ 	    mode == R5C_JOURNAL_MODE_WRITE_BACK)
  		return -EINVAL;
  
++>>>>>>> 78e470c26f52 (md: add raid4/5/6 journal mode switching API)
  	mddev_suspend(mddev);
- 	conf->log->r5c_journal_mode = val;
+ 	conf->log->r5c_journal_mode = mode;
  	mddev_resume(mddev);
  
  	pr_debug("md/raid:%s: setting r5c cache mode to %d: %s\n",
diff --cc drivers/md/raid5.h
index 6f49de05938c,ec8ca15774d7..000000000000
--- a/drivers/md/raid5.h
+++ b/drivers/md/raid5.h
@@@ -780,4 -803,7 +790,10 @@@ extern void r5c_flush_cache(struct r5co
  extern void r5c_check_stripe_cache_usage(struct r5conf *conf);
  extern void r5c_check_cached_full_stripe(struct r5conf *conf);
  extern struct md_sysfs_entry r5c_journal_mode;
++<<<<<<< HEAD
++=======
+ extern void r5c_update_on_rdev_error(struct mddev *mddev);
+ extern bool r5c_big_stripe_cached(struct r5conf *conf, sector_t sect);
+ extern int r5c_journal_mode_set(struct mddev *mddev, int journal_mode);
++>>>>>>> 78e470c26f52 (md: add raid4/5/6 journal mode switching API)
  #endif
* Unmerged path drivers/md/raid5-cache.c
* Unmerged path drivers/md/raid5.h
