openvswitch: Use inverted tuple in ovs_ct_find_existing() if NATted.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] openvswitch: Use inverted tuple in ovs_ct_find_existing() if NATted (Aaron Conole) [1457439]
Rebuild_FUZZ: 99.26%
commit-author Jarno Rajahalme <jarno@ovn.org>
commit 9ff464db50e437eef131f719cc2e9902eea9c607
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9ff464db.failed

The conntrack lookup for existing connections fails to invert the
packet 5-tuple for NATted packets, and therefore fails to find the
existing conntrack entry.  Conntrack only stores 5-tuples for incoming
packets, and there are various situations where a lookup on a packet
that has already been transformed by NAT needs to be made.  Looking up
an existing conntrack entry upon executing packet received from the
userspace is one of them.

This patch fixes ovs_ct_find_existing() to invert the packet 5-tuple
for the conntrack lookup whenever the packet has already been
transformed by conntrack from its input form as evidenced by one of
the NAT flags being set in the conntrack state metadata.

Fixes: 05752523e565 ("openvswitch: Interface with NAT.")
	Signed-off-by: Jarno Rajahalme <jarno@ovn.org>
	Acked-by: Joe Stringer <joe@ovn.org>
	Acked-by: Pravin B Shelar <pshelar@ovn.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9ff464db50e437eef131f719cc2e9902eea9c607)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/openvswitch/conntrack.c
diff --cc net/openvswitch/conntrack.c
index 0eec48a6f4bc,4df9a5449c95..000000000000
--- a/net/openvswitch/conntrack.c
+++ b/net/openvswitch/conntrack.c
@@@ -472,8 -471,14 +483,19 @@@ ovs_ct_find_existing(struct net *net, c
  
  	ct = nf_ct_tuplehash_to_ctrack(h);
  
++<<<<<<< HEAD
 +	skb->nfct = &ct->ct_general;
 +	skb->nfctinfo = ovs_ct_get_info(h);
++=======
+ 	/* Inverted packet tuple matches the reverse direction conntrack tuple,
+ 	 * select the other tuplehash to get the right 'ctinfo' bits for this
+ 	 * packet.
+ 	 */
+ 	if (natted)
+ 		h = &ct->tuplehash[!h->tuple.dst.dir];
+ 
+ 	nf_ct_set(skb, ct, ovs_ct_get_info(h));
++>>>>>>> 9ff464db50e4 (openvswitch: Use inverted tuple in ovs_ct_find_existing() if NATted.)
  	return ct;
  }
  
* Unmerged path net/openvswitch/conntrack.c
