nfp: add VLAN filtering support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Pablo Cascón <pablo.cascon@netronome.com>
commit b64052fc9bcb4fa3ca8701e74c1aac0e2847b724
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b64052fc.failed

Add general use per-vNIC mailbox area and use it for VLAN filtering
support.  Initially proto is hardcoded to 802.1q.

	Signed-off-by: Pablo Cascón <pablo.cascon@netronome.com>
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b64052fc9bcb4fa3ca8701e74c1aac0e2847b724)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
#	drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 5094c56dbda7,2bdddd1ae666..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -2358,17 -2973,53 +2382,56 @@@ err_cleanup_vecs
  static int nfp_net_change_mtu(struct net_device *netdev, int new_mtu)
  {
  	struct nfp_net *nn = netdev_priv(netdev);
 -	struct nfp_net_dp *dp;
 -
 -	dp = nfp_net_clone_dp(nn);
 -	if (!dp)
 -		return -ENOMEM;
 +	struct nfp_net_ring_set rx = {
 +		.n_rings = nn->num_rx_rings,
 +		.mtu = new_mtu,
 +		.dcnt = nn->rxd_cnt,
 +	};
  
 -	dp->mtu = new_mtu;
 -
 -	return nfp_net_ring_reconfig(nn, dp, NULL);
 +	return nfp_net_ring_reconfig(nn, &rx, NULL);
  }
  
++<<<<<<< HEAD
 +static struct rtnl_link_stats64 *nfp_net_stat64(struct net_device *netdev,
 +						struct rtnl_link_stats64 *stats)
++=======
+ static int
+ nfp_net_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
+ {
+ 	struct nfp_net *nn = netdev_priv(netdev);
+ 
+ 	/* Priority tagged packets with vlan id 0 are processed by the
+ 	 * NFP as untagged packets
+ 	 */
+ 	if (!vid)
+ 		return 0;
+ 
+ 	nn_writew(nn, NFP_NET_CFG_VLAN_FILTER_VID, vid);
+ 	nn_writew(nn, NFP_NET_CFG_VLAN_FILTER_PROTO, ETH_P_8021Q);
+ 
+ 	return nfp_net_reconfig_mbox(nn, NFP_NET_CFG_MBOX_CMD_CTAG_FILTER_ADD);
+ }
+ 
+ static int
+ nfp_net_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
+ {
+ 	struct nfp_net *nn = netdev_priv(netdev);
+ 
+ 	/* Priority tagged packets with vlan id 0 are processed by the
+ 	 * NFP as untagged packets
+ 	 */
+ 	if (!vid)
+ 		return 0;
+ 
+ 	nn_writew(nn, NFP_NET_CFG_VLAN_FILTER_VID, vid);
+ 	nn_writew(nn, NFP_NET_CFG_VLAN_FILTER_PROTO, ETH_P_8021Q);
+ 
+ 	return nfp_net_reconfig_mbox(nn, NFP_NET_CFG_MBOX_CMD_CTAG_FILTER_KILL);
+ }
+ 
+ static void nfp_net_stat64(struct net_device *netdev,
+ 			   struct rtnl_link_stats64 *stats)
++>>>>>>> b64052fc9bcb (nfp: add VLAN filtering support)
  {
  	struct nfp_net *nn = netdev_priv(netdev);
  	int r;
@@@ -2606,6 -3354,9 +2676,12 @@@ static const struct net_device_ops nfp_
  	.ndo_stop		= nfp_net_netdev_close,
  	.ndo_start_xmit		= nfp_net_tx,
  	.ndo_get_stats64	= nfp_net_stat64,
++<<<<<<< HEAD
++=======
+ 	.ndo_vlan_rx_add_vid	= nfp_net_vlan_rx_add_vid,
+ 	.ndo_vlan_rx_kill_vid	= nfp_net_vlan_rx_kill_vid,
+ 	.ndo_setup_tc		= nfp_net_setup_tc,
++>>>>>>> b64052fc9bcb (nfp: add VLAN filtering support)
  	.ndo_tx_timeout		= nfp_net_tx_timeout,
  	.ndo_set_rx_mode	= nfp_net_set_rx_mode,
  	.ndo_change_mtu		= nfp_net_change_mtu,
@@@ -2630,7 -3383,7 +2706,11 @@@ void nfp_net_info(struct nfp_net *nn
  		nn->fw_ver.resv, nn->fw_ver.class,
  		nn->fw_ver.major, nn->fw_ver.minor,
  		nn->max_mtu);
++<<<<<<< HEAD
 +	nn_info(nn, "CAP: %#x %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n",
++=======
+ 	nn_info(nn, "CAP: %#x %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n",
++>>>>>>> b64052fc9bcb (nfp: add VLAN filtering support)
  		nn->cap,
  		nn->cap & NFP_NET_CFG_CTRL_PROMISC  ? "PROMISC "  : "",
  		nn->cap & NFP_NET_CFG_CTRL_L2BC     ? "L2BCFILT " : "",
@@@ -2641,8 -3394,11 +2721,16 @@@
  		nn->cap & NFP_NET_CFG_CTRL_TXVLAN   ? "TXVLAN "   : "",
  		nn->cap & NFP_NET_CFG_CTRL_SCATTER  ? "SCATTER "  : "",
  		nn->cap & NFP_NET_CFG_CTRL_GATHER   ? "GATHER "   : "",
++<<<<<<< HEAD
 +		nn->cap & NFP_NET_CFG_CTRL_LSO      ? "TSO "      : "",
 +		nn->cap & NFP_NET_CFG_CTRL_RSS      ? "RSS "      : "",
++=======
+ 		nn->cap & NFP_NET_CFG_CTRL_LSO      ? "TSO1 "     : "",
+ 		nn->cap & NFP_NET_CFG_CTRL_LSO2     ? "TSO2 "     : "",
+ 		nn->cap & NFP_NET_CFG_CTRL_RSS      ? "RSS1 "     : "",
+ 		nn->cap & NFP_NET_CFG_CTRL_RSS2     ? "RSS2 "     : "",
+ 		nn->cap & NFP_NET_CFG_CTRL_CTAG_FILTER ? "CTAG_FILTER " : "",
++>>>>>>> b64052fc9bcb (nfp: add VLAN filtering support)
  		nn->cap & NFP_NET_CFG_CTRL_L2SWITCH ? "L2SWITCH " : "",
  		nn->cap & NFP_NET_CFG_CTRL_MSIXAUTO ? "AUTOMASK " : "",
  		nn->cap & NFP_NET_CFG_CTRL_IRQMOD   ? "IRQMOD "   : "",
@@@ -2811,12 -3605,20 +2899,16 @@@ int nfp_net_netdev_init(struct net_devi
  
  	if (nn->cap & NFP_NET_CFG_CTRL_RXVLAN) {
  		netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_RX;
 -		nn->dp.ctrl |= NFP_NET_CFG_CTRL_RXVLAN;
 +		nn->ctrl |= NFP_NET_CFG_CTRL_RXVLAN;
  	}
  	if (nn->cap & NFP_NET_CFG_CTRL_TXVLAN) {
 -		if (nn->cap & NFP_NET_CFG_CTRL_LSO2) {
 -			nn_warn(nn, "Device advertises both TSO2 and TXVLAN. Refusing to enable TXVLAN.\n");
 -		} else {
 -			netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_TX;
 -			nn->dp.ctrl |= NFP_NET_CFG_CTRL_TXVLAN;
 -		}
 +		netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_TX;
 +		nn->ctrl |= NFP_NET_CFG_CTRL_TXVLAN;
  	}
+ 	if (nn->cap & NFP_NET_CFG_CTRL_CTAG_FILTER) {
+ 		netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_FILTER;
+ 		nn->dp.ctrl |= NFP_NET_CFG_CTRL_CTAG_FILTER;
+ 	}
  
  	netdev->features = netdev->hw_features;
  
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
index 92d76a860c19,e5e94e0746ec..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
@@@ -112,9 -123,10 +112,14 @@@
  #define   NFP_NET_CFG_CTRL_TXVLAN         (0x1 <<  7) /* Enable VLAN insert */
  #define   NFP_NET_CFG_CTRL_SCATTER        (0x1 <<  8) /* Scatter DMA */
  #define   NFP_NET_CFG_CTRL_GATHER         (0x1 <<  9) /* Gather DMA */
++<<<<<<< HEAD
 +#define   NFP_NET_CFG_CTRL_LSO            (0x1 << 10) /* LSO/TSO */
++=======
+ #define   NFP_NET_CFG_CTRL_LSO            (0x1 << 10) /* LSO/TSO (version 1) */
+ #define   NFP_NET_CFG_CTRL_CTAG_FILTER	  (0x1 << 11) /* VLAN CTAG filtering */
++>>>>>>> b64052fc9bcb (nfp: add VLAN filtering support)
  #define   NFP_NET_CFG_CTRL_RINGCFG        (0x1 << 16) /* Ring runtime changes */
 -#define   NFP_NET_CFG_CTRL_RSS		  (0x1 << 17) /* RSS (version 1) */
 +#define   NFP_NET_CFG_CTRL_RSS            (0x1 << 17) /* RSS */
  #define   NFP_NET_CFG_CTRL_IRQMOD         (0x1 << 18) /* Interrupt moderation */
  #define   NFP_NET_CFG_CTRL_RINGPRIO       (0x1 << 19) /* Ring priorities */
  #define   NFP_NET_CFG_CTRL_MSIXAUTO       (0x1 << 20) /* MSI-X auto-masking */
@@@ -134,6 -161,9 +139,12 @@@
  #define   NFP_NET_CFG_UPDATE_RESET        (0x1 <<  7) /* Update due to FLR */
  #define   NFP_NET_CFG_UPDATE_IRQMOD       (0x1 <<  8) /* IRQ mod change */
  #define   NFP_NET_CFG_UPDATE_VXLAN	  (0x1 <<  9) /* VXLAN port change */
++<<<<<<< HEAD
++=======
+ #define   NFP_NET_CFG_UPDATE_BPF	  (0x1 << 10) /* BPF program load */
+ #define   NFP_NET_CFG_UPDATE_MACADDR	  (0x1 << 11) /* MAC address change */
+ #define   NFP_NET_CFG_UPDATE_MBOX	  (0x1 << 12) /* Mailbox update */
++>>>>>>> b64052fc9bcb (nfp: add VLAN filtering support)
  #define   NFP_NET_CFG_UPDATE_ERR          (0x1 << 31) /* A error occurred */
  #define NFP_NET_CFG_TXRS_ENABLE         0x0008
  #define NFP_NET_CFG_RXRS_ENABLE         0x0010
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
