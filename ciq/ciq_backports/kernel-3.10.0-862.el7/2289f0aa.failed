netvsc: simplify rndis_filter_remove

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 2289f0aa706e5160e078f73c32fcbfb56a3ff1e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2289f0aa.failed

All caller's already have pointer to netvsc_device so pass it.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2289f0aa706e5160e078f73c32fcbfb56a3ff1e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/hyperv_net.h
#	drivers/net/hyperv/rndis_filter.c
diff --cc drivers/net/hyperv/hyperv_net.h
index abe1d5a39289,757205c9cb93..000000000000
--- a/drivers/net/hyperv/hyperv_net.h
+++ b/drivers/net/hyperv/hyperv_net.h
@@@ -196,8 -197,9 +196,14 @@@ void netvsc_channel_cb(void *context)
  int rndis_filter_open(struct netvsc_device *nvdev);
  int rndis_filter_close(struct netvsc_device *nvdev);
  int rndis_filter_device_add(struct hv_device *dev,
++<<<<<<< HEAD
 +			void *additional_info);
 +void rndis_filter_device_remove(struct hv_device *dev);
++=======
+ 			    struct netvsc_device_info *info);
+ void rndis_filter_device_remove(struct hv_device *dev,
+ 				struct netvsc_device *nvdev);
++>>>>>>> 2289f0aa706e (netvsc: simplify rndis_filter_remove)
  int rndis_filter_set_rss_param(struct rndis_device *rdev,
  			       const u8 *key, int num_queue);
  int rndis_filter_receive(struct net_device *ndev,
diff --cc drivers/net/hyperv/rndis_filter.c
index ba9979a91e02,70b099a731a9..000000000000
--- a/drivers/net/hyperv/rndis_filter.c
+++ b/drivers/net/hyperv/rndis_filter.c
@@@ -1010,19 -1074,65 +1010,30 @@@ int rndis_filter_device_add(struct hv_d
  
  	memcpy(device_info->mac_adr, rndis_device->hw_mac_adr, ETH_ALEN);
  
++<<<<<<< HEAD
 +	/* Turn on the offloads; the host supports all of the relevant
 +	 * offloads.
 +	 */
++=======
+ 	/* Find HW offload capabilities */
+ 	ret = rndis_query_hwcaps(rndis_device, &hwcaps);
+ 	if (ret != 0) {
+ 		rndis_filter_device_remove(dev, net_device);
+ 		return ret;
+ 	}
+ 
+ 	/* A value of zero means "no change"; now turn on what we want. */
++>>>>>>> 2289f0aa706e (netvsc: simplify rndis_filter_remove)
  	memset(&offloads, 0, sizeof(struct ndis_offload_params));
 -
 -	/* Linux does not care about IP checksum, always does in kernel */
 -	offloads.ip_v4_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_DISABLED;
 -
 -	/* Compute tx offload settings based on hw capabilities */
 -	net->hw_features = NETIF_F_RXCSUM;
 -
 -	if ((hwcaps.csum.ip4_txcsum & NDIS_TXCSUM_ALL_TCP4) == NDIS_TXCSUM_ALL_TCP4) {
 -		/* Can checksum TCP */
 -		net->hw_features |= NETIF_F_IP_CSUM;
 -		net_device_ctx->tx_checksum_mask |= TRANSPORT_INFO_IPV4_TCP;
 -
 -		offloads.tcp_ip_v4_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 -
 -		if (hwcaps.lsov2.ip4_encap & NDIS_OFFLOAD_ENCAP_8023) {
 -			offloads.lso_v2_ipv4 = NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED;
 -			net->hw_features |= NETIF_F_TSO;
 -
 -			if (hwcaps.lsov2.ip4_maxsz < gso_max_size)
 -				gso_max_size = hwcaps.lsov2.ip4_maxsz;
 -		}
 -
 -		if (hwcaps.csum.ip4_txcsum & NDIS_TXCSUM_CAP_UDP4) {
 -			offloads.udp_ip_v4_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 -			net_device_ctx->tx_checksum_mask |= TRANSPORT_INFO_IPV4_UDP;
 -		}
 -	}
 -
 -	if ((hwcaps.csum.ip6_txcsum & NDIS_TXCSUM_ALL_TCP6) == NDIS_TXCSUM_ALL_TCP6) {
 -		net->hw_features |= NETIF_F_IPV6_CSUM;
 -
 -		offloads.tcp_ip_v6_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 -		net_device_ctx->tx_checksum_mask |= TRANSPORT_INFO_IPV6_TCP;
 -
 -		if ((hwcaps.lsov2.ip6_encap & NDIS_OFFLOAD_ENCAP_8023) &&
 -		    (hwcaps.lsov2.ip6_opts & NDIS_LSOV2_CAP_IP6) == NDIS_LSOV2_CAP_IP6) {
 -			offloads.lso_v2_ipv6 = NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED;
 -			net->hw_features |= NETIF_F_TSO6;
 -
 -			if (hwcaps.lsov2.ip6_maxsz < gso_max_size)
 -				gso_max_size = hwcaps.lsov2.ip6_maxsz;
 -		}
 -
 -		if (hwcaps.csum.ip6_txcsum & NDIS_TXCSUM_CAP_UDP6) {
 -			offloads.udp_ip_v6_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 -			net_device_ctx->tx_checksum_mask |= TRANSPORT_INFO_IPV6_UDP;
 -		}
 -	}
 -
 -	netif_set_gso_max_size(net, gso_max_size);
 +	/* A value of zero means "no change"; now turn on what we
 +	 * want.
 +	 */
 +	offloads.ip_v4_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 +	offloads.tcp_ip_v4_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 +	offloads.udp_ip_v4_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 +	offloads.tcp_ip_v6_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 +	offloads.udp_ip_v6_csum = NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED;
 +	offloads.lso_v2_ipv4 = NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED;
  
  	ret = rndis_filter_set_offload_params(net, &offloads);
  	if (ret)
* Unmerged path drivers/net/hyperv/hyperv_net.h
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index 420bd0b326d7..6c50a2cde7c6 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -784,7 +784,7 @@ static int netvsc_set_channels(struct net_device *net,
 
  do_set:
 	net_device_ctx->start_remove = true;
-	rndis_filter_device_remove(dev);
+	rndis_filter_device_remove(dev, nvdev);
 
 	nvdev->num_chn = channels->combined_count;
 
@@ -918,7 +918,7 @@ static int netvsc_change_mtu(struct net_device *ndev, int mtu)
 	num_chn = nvdev->num_chn;
 
 	ndevctx->start_remove = true;
-	rndis_filter_device_remove(hdev);
+	rndis_filter_device_remove(hdev, nvdev);
 
 	ndev->mtu = mtu;
 
@@ -1539,7 +1539,7 @@ static int netvsc_probe(struct hv_device *dev,
 	ret = register_netdev(net);
 	if (ret != 0) {
 		pr_err("Unable to register netdev.\n");
-		rndis_filter_device_remove(dev);
+		rndis_filter_device_remove(dev, nvdev);
 		netvsc_free_netdev(net);
 	}
 
@@ -1579,7 +1579,7 @@ static int netvsc_remove(struct hv_device *dev)
 	 * Call to the vsc driver to let it know that the device is being
 	 * removed
 	 */
-	rndis_filter_device_remove(dev);
+	rndis_filter_device_remove(dev, ndev_ctx->nvdev);
 
 	hv_set_drvdata(dev, NULL);
 
* Unmerged path drivers/net/hyperv/rndis_filter.c
