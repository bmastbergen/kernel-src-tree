scsi: core: run queue if SCSI device queue isn't ready and queue is idle

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] run queue if SCSI device queue isn't ready and queue is idle (Ming Lei) [1523029]
Rebuild_FUZZ: 90.91%
commit-author Ming Lei <ming.lei@redhat.com>
commit 7e70aa789d4a0c89dbfbd2c8a974a4df717475ec
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7e70aa78.failed

Before commit 0df21c86bdbf ("scsi: implement .get_budget and .put_budget
for blk-mq"), we run queue after 3ms if queue is idle and SCSI device
queue isn't ready, which is done in handling BLK_STS_RESOURCE. After
commit 0df21c86bdbf is introduced, queue won't be run any more under
this situation.

IO hang is observed when timeout happened, and this patch fixes the IO
hang issue by running queue after delay in scsi_dev_queue_ready, just
like non-mq. This issue can be triggered by the following script[1].

There is another issue which can be covered by running idle queue: when
.get_budget() is called on request coming from hctx->dispatch_list, if
one request just completes during .get_budget(), we can't depend on
SCSI's restart to make progress any more. This patch fixes the race too.

With this patch, we basically recover to previous behaviour (before
commit 0df21c86bdbf) of handling idle queue when running out of
resource.

[1] script for test/verify SCSI timeout
rmmod scsi_debug
modprobe scsi_debug max_queue=1

DEVICE=`ls -d /sys/bus/pseudo/drivers/scsi_debug/adapter*/host*/target*/*/block/* | head -1 | xargs basename`
DISK_DIR=`ls -d /sys/block/$DEVICE/device/scsi_disk/*`

echo "using scsi device $DEVICE"
echo "-1" >/sys/bus/pseudo/drivers/scsi_debug/every_nth
echo "temporary write through" >$DISK_DIR/cache_type
echo "128" >/sys/bus/pseudo/drivers/scsi_debug/opts
echo none > /sys/block/$DEVICE/queue/scheduler
dd if=/dev/$DEVICE of=/dev/null bs=1M iflag=direct count=1 &
sleep 5
echo "0" >/sys/bus/pseudo/drivers/scsi_debug/opts
wait
echo "SUCCESS"

Fixes: 0df21c86bdbf ("scsi: implement .get_budget and .put_budget for blk-mq")
	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Tested-by: Holger Hoffst√§tte <holger@applied-asynchrony.com>
	Reviewed-by: Bart Van Assche <bart.vanassche@wdc.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 7e70aa789d4a0c89dbfbd2c8a974a4df717475ec)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/scsi_lib.c
diff --cc drivers/scsi/scsi_lib.c
index 540886abddcc,d9ca1dfab154..000000000000
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@@ -1800,10 -1940,39 +1800,43 @@@ static int scsi_mq_prep_fn(struct reque
  static void scsi_mq_done(struct scsi_cmnd *cmd)
  {
  	trace_scsi_dispatch_cmd_done(cmd);
 -	blk_mq_complete_request(cmd->request);
 +	blk_mq_complete_request(cmd->request, cmd->request->errors);
  }
  
++<<<<<<< HEAD
 +static int scsi_queue_rq(struct blk_mq_hw_ctx *hctx,
++=======
+ static void scsi_mq_put_budget(struct blk_mq_hw_ctx *hctx)
+ {
+ 	struct request_queue *q = hctx->queue;
+ 	struct scsi_device *sdev = q->queuedata;
+ 
+ 	atomic_dec(&sdev->device_busy);
+ 	put_device(&sdev->sdev_gendev);
+ }
+ 
+ static bool scsi_mq_get_budget(struct blk_mq_hw_ctx *hctx)
+ {
+ 	struct request_queue *q = hctx->queue;
+ 	struct scsi_device *sdev = q->queuedata;
+ 
+ 	if (!get_device(&sdev->sdev_gendev))
+ 		goto out;
+ 	if (!scsi_dev_queue_ready(q, sdev))
+ 		goto out_put_device;
+ 
+ 	return true;
+ 
+ out_put_device:
+ 	put_device(&sdev->sdev_gendev);
+ out:
+ 	if (atomic_read(&sdev->device_busy) == 0 && !scsi_device_blocked(sdev))
+ 		blk_mq_delay_run_hw_queue(hctx, SCSI_QUEUE_DELAY);
+ 	return false;
+ }
+ 
+ static blk_status_t scsi_queue_rq(struct blk_mq_hw_ctx *hctx,
++>>>>>>> 7e70aa789d4a (scsi: core: run queue if SCSI device queue isn't ready and queue is idle)
  			 const struct blk_mq_queue_data *bd)
  {
  	struct request *req = bd->rq;
* Unmerged path drivers/scsi/scsi_lib.c
