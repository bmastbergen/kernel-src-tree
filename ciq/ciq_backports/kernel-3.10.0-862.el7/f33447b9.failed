nvme/core: Fix race kicking freed request_queue

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] core: Fix race kicking freed request_queue (David Milburn) [1457880 1456486 1454365]
Rebuild_FUZZ: 94.38%
commit-author Keith Busch <keith.busch@intel.com>
commit f33447b90e96076483525b21cc4e0a8977cdd07c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f33447b9.failed

If a namespace has already been marked dead, we don't want to kick the
request_queue again since we may have just freed it from another thread.

	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit f33447b90e96076483525b21cc4e0a8977cdd07c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index bd223cb63595,25ec4e585220..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -2019,20 -2333,12 +2019,26 @@@ void nvme_kill_queues(struct nvme_ctrl 
  		 * Revalidating a dead namespace sets capacity to 0. This will
  		 * end buffered writers dirtying pages that can't be synced.
  		 */
++<<<<<<< HEAD
 +		if (!test_and_set_bit(NVME_NS_DEAD, &ns->flags))
 +			revalidate_disk(ns->disk);
 +
++=======
+ 		if (!ns->disk || test_and_set_bit(NVME_NS_DEAD, &ns->flags))
+ 			continue;
+ 		revalidate_disk(ns->disk);
++>>>>>>> f33447b90e96 (nvme/core: Fix race kicking freed request_queue)
  		blk_set_queue_dying(ns->queue);
 -		blk_mq_abort_requeue_list(ns->queue);
 -		blk_mq_start_stopped_hw_queues(ns->queue, true);
 +
 +		/*
 +		 * Forcibly start all queues to avoid having stuck requests.
 +		 * Note that we must ensure the queues are not stopped
 +		 * when the final removal happens.
 +		 */
 +		blk_mq_start_hw_queues(ns->queue);
 +
 +		/* draining requests in requeue list */
 +		blk_mq_kick_requeue_list(ns->queue);
  	}
  	mutex_unlock(&ctrl->namespaces_mutex);
  }
* Unmerged path drivers/nvme/host/core.c
