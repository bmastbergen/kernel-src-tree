x86/intel_rdt: Introduce a common compile option for RDT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] intel_rdt: Introduce a common compile option for RDT (Jiri Olsa) [1457533]
Rebuild_FUZZ: 96.30%
commit-author Vikas Shivappa <vikas.shivappa@linux.intel.com>
commit f01d7d51f577b5dc0fa5919ab8a9228e2bf49f3e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f01d7d51.failed

We currently have a CONFIG_RDT_A which is for RDT(Resource directory
technology) allocation based resctrl filesystem interface. As a
preparation to add support for RDT monitoring as well into the same
resctrl filesystem, change the config option to be CONFIG_RDT which
would include both RDT allocation and monitoring code.

No functional change.

	Signed-off-by: Vikas Shivappa <vikas.shivappa@linux.intel.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: ravi.v.shankar@intel.com
	Cc: tony.luck@intel.com
	Cc: fenghua.yu@intel.com
	Cc: peterz@infradead.org
	Cc: eranian@google.com
	Cc: vikas.shivappa@intel.com
	Cc: ak@linux.intel.com
	Cc: davidcc@google.com
	Cc: reinette.chatre@intel.com
Link: http://lkml.kernel.org/r/1501017287-28083-4-git-send-email-vikas.shivappa@linux.intel.com

(cherry picked from commit f01d7d51f577b5dc0fa5919ab8a9228e2bf49f3e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/sched.h
diff --cc include/linux/sched.h
index 17d2f0bc1bf5,20b2ff2f4fde..000000000000
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@@ -1544,73 -820,89 +1544,83 @@@ struct task_struct 
  #endif
  
  #ifdef CONFIG_DEBUG_MUTEXES
 -	/* Mutex deadlock detection: */
 -	struct mutex_waiter		*blocked_on;
 +	/* mutex deadlock detection */
 +	struct mutex_waiter *blocked_on;
  #endif
 -
  #ifdef CONFIG_TRACE_IRQFLAGS
 -	unsigned int			irq_events;
 -	unsigned long			hardirq_enable_ip;
 -	unsigned long			hardirq_disable_ip;
 -	unsigned int			hardirq_enable_event;
 -	unsigned int			hardirq_disable_event;
 -	int				hardirqs_enabled;
 -	int				hardirq_context;
 -	unsigned long			softirq_disable_ip;
 -	unsigned long			softirq_enable_ip;
 -	unsigned int			softirq_disable_event;
 -	unsigned int			softirq_enable_event;
 -	int				softirqs_enabled;
 -	int				softirq_context;
 +	unsigned int irq_events;
 +	unsigned long hardirq_enable_ip;
 +	unsigned long hardirq_disable_ip;
 +	unsigned int hardirq_enable_event;
 +	unsigned int hardirq_disable_event;
 +	int hardirqs_enabled;
 +	int hardirq_context;
 +	unsigned long softirq_disable_ip;
 +	unsigned long softirq_enable_ip;
 +	unsigned int softirq_disable_event;
 +	unsigned int softirq_enable_event;
 +	int softirqs_enabled;
 +	int softirq_context;
  #endif
 -
  #ifdef CONFIG_LOCKDEP
 -# define MAX_LOCK_DEPTH			48UL
 -	u64				curr_chain_key;
 -	int				lockdep_depth;
 -	unsigned int			lockdep_recursion;
 -	struct held_lock		held_locks[MAX_LOCK_DEPTH];
 -	gfp_t				lockdep_reclaim_gfp;
 -#endif
 -
 -#ifdef CONFIG_UBSAN
 -	unsigned int			in_ubsan;
 +# define MAX_LOCK_DEPTH 48UL
 +	u64 curr_chain_key;
 +	int lockdep_depth;
 +	unsigned int lockdep_recursion;
 +	struct held_lock held_locks[MAX_LOCK_DEPTH];
 +	gfp_t lockdep_reclaim_gfp;
  #endif
  
 -	/* Journalling filesystem info: */
 -	void				*journal_info;
 +/* journalling filesystem info */
 +	void *journal_info;
  
 -	/* Stacked block device info: */
 -	struct bio_list			*bio_list;
 +/* stacked block device info */
 +	struct bio_list *bio_list;
  
  #ifdef CONFIG_BLOCK
 -	/* Stack plugging: */
 -	struct blk_plug			*plug;
 +/* stack plugging */
 +	struct blk_plug *plug;
  #endif
  
 -	/* VM state: */
 -	struct reclaim_state		*reclaim_state;
 -
 -	struct backing_dev_info		*backing_dev_info;
 +/* VM state */
 +	struct reclaim_state *reclaim_state;
  
 -	struct io_context		*io_context;
 +	struct backing_dev_info *backing_dev_info;
  
 -	/* Ptrace state: */
 -	unsigned long			ptrace_message;
 -	siginfo_t			*last_siginfo;
 +	struct io_context *io_context;
  
 -	struct task_io_accounting	ioac;
 -#ifdef CONFIG_TASK_XACCT
 -	/* Accumulated RSS usage: */
 -	u64				acct_rss_mem1;
 -	/* Accumulated virtual memory usage: */
 -	u64				acct_vm_mem1;
 -	/* stime + utime since last update: */
 -	u64				acct_timexpd;
 +	unsigned long ptrace_message;
 +	siginfo_t *last_siginfo; /* For ptrace use.  */
 +	struct task_io_accounting ioac;
 +#if defined(CONFIG_TASK_XACCT)
 +	u64 acct_rss_mem1;	/* accumulated rss usage */
 +	u64 acct_vm_mem1;	/* accumulated virtual memory usage */
 +	cputime_t acct_timexpd;	/* stime + utime since last update */
  #endif
  #ifdef CONFIG_CPUSETS
 -	/* Protected by ->alloc_lock: */
 -	nodemask_t			mems_allowed;
 -	/* Seqence number to catch updates: */
 -	seqcount_t			mems_allowed_seq;
 -	int				cpuset_mem_spread_rotor;
 -	int				cpuset_slab_spread_rotor;
 +	nodemask_t mems_allowed;	/* Protected by alloc_lock */
 +	seqcount_t mems_allowed_seq;	/* Seqence no to catch updates */
 +	int cpuset_mem_spread_rotor;
 +	int cpuset_slab_spread_rotor;
  #endif
  #ifdef CONFIG_CGROUPS
++<<<<<<< HEAD
 +	/* Control Group info protected by css_set_lock */
 +	struct css_set __rcu *cgroups;
 +	/* cg_list protected by css_set_lock and tsk->alloc_lock */
 +	struct list_head cg_list;
++=======
+ 	/* Control Group info protected by css_set_lock: */
+ 	struct css_set __rcu		*cgroups;
+ 	/* cg_list protected by css_set_lock and tsk->alloc_lock: */
+ 	struct list_head		cg_list;
+ #endif
+ #ifdef CONFIG_INTEL_RDT
+ 	int				closid;
++>>>>>>> f01d7d51f577 (x86/intel_rdt: Introduce a common compile option for RDT)
  #endif
  #ifdef CONFIG_FUTEX
 -	struct robust_list_head __user	*robust_list;
 +	struct robust_list_head __user *robust_list;
  #ifdef CONFIG_COMPAT
  	struct compat_robust_list_head __user *compat_robust_list;
  #endif
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index 0912e61d8b57..07cf04339069 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -358,16 +358,16 @@ config GOLDFISH
        def_bool y
        depends on X86_GOLDFISH
 
-config INTEL_RDT_A
-	bool "Intel Resource Director Technology Allocation support"
+config INTEL_RDT
+	bool "Intel Resource Director Technology support"
 	default n
 	depends on X86 && CPU_SUP_INTEL
 	select KERNFS
 	help
-	  Select to enable resource allocation which is a sub-feature of
-	  Intel Resource Director Technology(RDT). More information about
-	  RDT can be found in the Intel x86 Architecture Software
-	  Developer Manual.
+	  Select to enable resource allocation and monitoring which are
+	  sub-features of Intel Resource Director Technology(RDT). More
+	  information about RDT can be found in the Intel x86
+	  Architecture Software Developer Manual.
 
 	  Say N if unsure.
 
diff --git a/arch/x86/include/asm/intel_rdt.h b/arch/x86/include/asm/intel_rdt.h
index 06f50d0ed14f..1f8f8fc01e01 100644
--- a/arch/x86/include/asm/intel_rdt.h
+++ b/arch/x86/include/asm/intel_rdt.h
@@ -1,7 +1,7 @@
 #ifndef _ASM_X86_INTEL_RDT_H
 #define _ASM_X86_INTEL_RDT_H
 
-#ifdef CONFIG_INTEL_RDT_A
+#ifdef CONFIG_INTEL_RDT
 
 #include <linux/sched.h>
 #include <linux/kernfs.h>
@@ -228,5 +228,5 @@ static inline void intel_rdt_sched_in(void)
 
 static inline void intel_rdt_sched_in(void) {}
 
-#endif /* CONFIG_INTEL_RDT_A */
+#endif /* CONFIG_INTEL_RDT */
 #endif /* _ASM_X86_INTEL_RDT_H */
diff --git a/arch/x86/kernel/cpu/Makefile b/arch/x86/kernel/cpu/Makefile
index 21c1e451a160..73d4d0d22f23 100644
--- a/arch/x86/kernel/cpu/Makefile
+++ b/arch/x86/kernel/cpu/Makefile
@@ -27,7 +27,7 @@ obj-$(CONFIG_CPU_SUP_CENTAUR)		+= centaur.o
 obj-$(CONFIG_CPU_SUP_TRANSMETA_32)	+= transmeta.o
 obj-$(CONFIG_CPU_SUP_UMC_32)		+= umc.o
 
-obj-$(CONFIG_INTEL_RDT_A)	+= intel_rdt.o intel_rdt_rdtgroup.o intel_rdt_schemata.o
+obj-$(CONFIG_INTEL_RDT)	+= intel_rdt.o intel_rdt_rdtgroup.o intel_rdt_schemata.o
 
 obj-$(CONFIG_X86_MCE)			+= mcheck/
 obj-$(CONFIG_MTRR)			+= mtrr/
* Unmerged path include/linux/sched.h
