mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Arkadi Sharshevsky <arkadis@mellanox.com>
commit 5ea1237f94906937ded990316c79d3b6d942da2a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5ea1237f.failed

When a netdev is configured with an IP address a router interface (RIF)
should be configured for it in the device. Allow configuration of RIFs
based on IPv6 address notifications as well as IPv4.

Note that the RIF exists as long as an IP address is configured on the
netdev, regardless of the address family.

	Signed-off-by: Arkadi Sharshevsky <arkadis@mellanox.com>
	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5ea1237f94906937ded990316c79d3b6d942da2a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.h
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index 48f8ce84f0a1,88b668ba0d8a..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -57,6 -57,8 +57,11 @@@
  #include <net/pkt_cls.h>
  #include <net/tc_act/tc_mirred.h>
  #include <net/netevent.h>
++<<<<<<< HEAD
++=======
+ #include <net/tc_act/tc_sample.h>
+ #include <net/addrconf.h>
++>>>>>>> 5ea1237f9490 (mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses)
  
  #include "spectrum.h"
  #include "pci.h"
@@@ -5051,8 -4416,9 +5060,9 @@@ static int __init mlxsw_sp_module_init(
  {
  	int err;
  
 -	register_netdevice_notifier(&mlxsw_sp_netdevice_nb);
 +	register_netdevice_notifier_rh(&mlxsw_sp_netdevice_nb);
  	register_inetaddr_notifier(&mlxsw_sp_inetaddr_nb);
+ 	register_inet6addr_notifier(&mlxsw_sp_inet6addr_nb);
  	register_netevent_notifier(&mlxsw_sp_router_netevent_nb);
  
  	err = mlxsw_core_driver_register(&mlxsw_sp_driver);
@@@ -5069,8 -4435,9 +5079,9 @@@ err_pci_driver_register
  	mlxsw_core_driver_unregister(&mlxsw_sp_driver);
  err_core_driver_register:
  	unregister_netevent_notifier(&mlxsw_sp_router_netevent_nb);
+ 	unregister_inet6addr_notifier(&mlxsw_sp_inet6addr_nb);
  	unregister_inetaddr_notifier(&mlxsw_sp_inetaddr_nb);
 -	unregister_netdevice_notifier(&mlxsw_sp_netdevice_nb);
 +	unregister_netdevice_notifier_rh(&mlxsw_sp_netdevice_nb);
  	return err;
  }
  
@@@ -5079,8 -4446,9 +5090,9 @@@ static void __exit mlxsw_sp_module_exit
  	mlxsw_pci_driver_unregister(&mlxsw_sp_pci_driver);
  	mlxsw_core_driver_unregister(&mlxsw_sp_driver);
  	unregister_netevent_notifier(&mlxsw_sp_router_netevent_nb);
+ 	unregister_inet6addr_notifier(&mlxsw_sp_inet6addr_nb);
  	unregister_inetaddr_notifier(&mlxsw_sp_inetaddr_nb);
 -	unregister_netdevice_notifier(&mlxsw_sp_netdevice_nb);
 +	unregister_netdevice_notifier_rh(&mlxsw_sp_netdevice_nb);
  }
  
  module_init(mlxsw_sp_module_init);
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.h
index e33337ab34c4,e848f06e34e6..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@@ -519,17 -384,15 +519,27 @@@ int mlxsw_sp_router_netevent_event(stru
  int mlxsw_sp_netdevice_router_port_event(struct net_device *dev);
  int mlxsw_sp_inetaddr_event(struct notifier_block *unused,
  			    unsigned long event, void *ptr);
++<<<<<<< HEAD
 +void mlxsw_sp_rif_bridge_destroy(struct mlxsw_sp *mlxsw_sp,
 +				 struct mlxsw_sp_rif *r);
 +int mlxsw_sp_vport_vrf_join(struct mlxsw_sp_port *mlxsw_sp_vport);
 +void mlxsw_sp_vport_vrf_leave(struct mlxsw_sp_port *mlxsw_sp_vport);
 +int mlxsw_sp_port_vrf_join(struct mlxsw_sp_port *mlxsw_sp_port);
 +void mlxsw_sp_port_vrf_leave(struct mlxsw_sp_port *mlxsw_sp_port);
 +int mlxsw_sp_bridge_vrf_join(struct mlxsw_sp *mlxsw_sp,
 +			     struct net_device *l3_dev);
 +void mlxsw_sp_bridge_vrf_leave(struct mlxsw_sp *mlxsw_sp,
 +			       struct net_device *l3_dev);
++=======
+ int mlxsw_sp_inet6addr_event(struct notifier_block *unused,
+ 			     unsigned long event, void *ptr);
+ int mlxsw_sp_netdevice_vrf_event(struct net_device *l3_dev, unsigned long event,
+ 				 struct netdev_notifier_changeupper_info *info);
+ void
+ mlxsw_sp_port_vlan_router_leave(struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan);
+ void mlxsw_sp_rif_destroy(struct mlxsw_sp_rif *rif);
++>>>>>>> 5ea1237f9490 (mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses)
  
 -/* spectrum_kvdl.c */
  int mlxsw_sp_kvdl_alloc(struct mlxsw_sp *mlxsw_sp, unsigned int entry_count,
  			u32 *p_entry_index);
  void mlxsw_sp_kvdl_free(struct mlxsw_sp *mlxsw_sp, int entry_index);
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index 2654fb5edf4a,7224066ac589..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -46,6 -47,9 +46,12 @@@
  #include <net/neighbour.h>
  #include <net/arp.h>
  #include <net/ip_fib.h>
++<<<<<<< HEAD
++=======
+ #include <net/fib_rules.h>
+ #include <net/l3mdev.h>
+ #include <net/addrconf.h>
++>>>>>>> 5ea1237f9490 (mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses)
  
  #include "spectrum.h"
  #include "core.h"
@@@ -2657,24 -2935,38 +2663,48 @@@ static int mlxsw_sp_router_rif_disable(
  }
  
  static void mlxsw_sp_router_rif_gone_sync(struct mlxsw_sp *mlxsw_sp,
 -					  struct mlxsw_sp_rif *rif)
 +					  struct mlxsw_sp_rif *r)
  {
 -	mlxsw_sp_router_rif_disable(mlxsw_sp, rif->rif_index);
 -	mlxsw_sp_nexthop_rif_gone_sync(mlxsw_sp, rif);
 -	mlxsw_sp_neigh_rif_gone_sync(mlxsw_sp, rif);
 +	mlxsw_sp_router_rif_disable(mlxsw_sp, r->rif);
 +	mlxsw_sp_nexthop_rif_gone_sync(mlxsw_sp, r);
 +	mlxsw_sp_neigh_rif_gone_sync(mlxsw_sp, r);
  }
  
++<<<<<<< HEAD
 +static bool mlxsw_sp_rif_should_config(struct mlxsw_sp_rif *r,
 +				       const struct in_device *in_dev,
 +				       unsigned long event)
++=======
+ static bool
+ mlxsw_sp_rif_should_config(struct mlxsw_sp_rif *rif, struct net_device *dev,
+ 			   unsigned long event)
++>>>>>>> 5ea1237f9490 (mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses)
  {
+ 	struct inet6_dev *inet6_dev;
+ 	bool addr_list_empty = true;
+ 	struct in_device *idev;
+ 
  	switch (event) {
  	case NETDEV_UP:
 -		if (!rif)
 +		if (!r)
  			return true;
  		return false;
  	case NETDEV_DOWN:
++<<<<<<< HEAD
 +		if (r && !in_dev->ifa_list && !netif_is_l3_slave(r->dev))
++=======
+ 		idev = __in_dev_get_rtnl(dev);
+ 		if (idev && idev->ifa_list)
+ 			addr_list_empty = false;
+ 
+ 		inet6_dev = __in6_dev_get(dev);
+ 		if (addr_list_empty && inet6_dev &&
+ 		    !list_empty(&inet6_dev->addr_list))
+ 			addr_list_empty = false;
+ 
+ 		if (rif && addr_list_empty &&
+ 		    !netif_is_l3_slave(rif->dev))
++>>>>>>> 5ea1237f9490 (mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses)
  			return true;
  		/* It is possible we already removed the RIF ourselves
  		 * if it was assigned to a netdev that is now a bridge
@@@ -3174,24 -3362,71 +3204,88 @@@ int mlxsw_sp_inetaddr_event(struct noti
  	if (!mlxsw_sp)
  		goto out;
  
++<<<<<<< HEAD
 +	r = mlxsw_sp_rif_find_by_dev(mlxsw_sp, dev);
 +	if (!mlxsw_sp_rif_should_config(r, ifa->ifa_dev, event))
++=======
+ 	rif = mlxsw_sp_rif_find_by_dev(mlxsw_sp, dev);
+ 	if (!mlxsw_sp_rif_should_config(rif, dev, event))
++>>>>>>> 5ea1237f9490 (mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses)
  		goto out;
  
 -	err = __mlxsw_sp_inetaddr_event(dev, event);
 +	if (mlxsw_sp_port_dev_check(dev))
 +		err = mlxsw_sp_inetaddr_port_event(dev, event);
 +	else if (netif_is_lag_master(dev))
 +		err = mlxsw_sp_inetaddr_lag_event(dev, event);
 +	else if (netif_is_bridge_master(dev))
 +		err = mlxsw_sp_inetaddr_bridge_event(dev, dev, event);
 +	else if (is_vlan_dev(dev))
 +		err = mlxsw_sp_inetaddr_vlan_event(dev, event);
 +
  out:
  	return notifier_from_errno(err);
  }
  
++<<<<<<< HEAD
 +static int mlxsw_sp_rif_edit(struct mlxsw_sp *mlxsw_sp, u16 rif,
++=======
+ struct mlxsw_sp_inet6addr_event_work {
+ 	struct work_struct work;
+ 	struct net_device *dev;
+ 	unsigned long event;
+ };
+ 
+ static void mlxsw_sp_inet6addr_event_work(struct work_struct *work)
+ {
+ 	struct mlxsw_sp_inet6addr_event_work *inet6addr_work =
+ 		container_of(work, struct mlxsw_sp_inet6addr_event_work, work);
+ 	struct net_device *dev = inet6addr_work->dev;
+ 	unsigned long event = inet6addr_work->event;
+ 	struct mlxsw_sp *mlxsw_sp;
+ 	struct mlxsw_sp_rif *rif;
+ 
+ 	rtnl_lock();
+ 	mlxsw_sp = mlxsw_sp_lower_get(dev);
+ 	if (!mlxsw_sp)
+ 		goto out;
+ 
+ 	rif = mlxsw_sp_rif_find_by_dev(mlxsw_sp, dev);
+ 	if (!mlxsw_sp_rif_should_config(rif, dev, event))
+ 		goto out;
+ 
+ 	__mlxsw_sp_inetaddr_event(dev, event);
+ out:
+ 	rtnl_unlock();
+ 	dev_put(dev);
+ 	kfree(inet6addr_work);
+ }
+ 
+ /* Called with rcu_read_lock() */
+ int mlxsw_sp_inet6addr_event(struct notifier_block *unused,
+ 			     unsigned long event, void *ptr)
+ {
+ 	struct inet6_ifaddr *if6 = (struct inet6_ifaddr *) ptr;
+ 	struct mlxsw_sp_inet6addr_event_work *inet6addr_work;
+ 	struct net_device *dev = if6->idev->dev;
+ 
+ 	if (!mlxsw_sp_port_dev_lower_find_rcu(dev))
+ 		return NOTIFY_DONE;
+ 
+ 	inet6addr_work = kzalloc(sizeof(*inet6addr_work), GFP_ATOMIC);
+ 	if (!inet6addr_work)
+ 		return NOTIFY_BAD;
+ 
+ 	INIT_WORK(&inet6addr_work->work, mlxsw_sp_inet6addr_event_work);
+ 	inet6addr_work->dev = dev;
+ 	inet6addr_work->event = event;
+ 	dev_hold(dev);
+ 	mlxsw_core_schedule_work(&inet6addr_work->work);
+ 
+ 	return NOTIFY_DONE;
+ }
+ 
+ static int mlxsw_sp_rif_edit(struct mlxsw_sp *mlxsw_sp, u16 rif_index,
++>>>>>>> 5ea1237f9490 (mlxsw: spectrum_router: Configure RIFs based on IPv6 addresses)
  			     const char *mac, int mtu)
  {
  	char ritr_pl[MLXSW_REG_RITR_LEN];
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
