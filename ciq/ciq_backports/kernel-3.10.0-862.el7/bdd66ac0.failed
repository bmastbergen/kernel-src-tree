net/mlx5e: Disallow TC offloading of unsupported match/action combinations

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Disallow TC offloading of unsupported match/action combinations (Kamal Heib) [1456694]
Rebuild_FUZZ: 97.22%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit bdd66ac0aeed971d1cb42b3aa0d11b0ea3842e09
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bdd66ac0.failed

When offloading header re-write, the HW may need to adjust checksums along
the packet. For IP traffic, and a case where we are asked to modify fields in
the IP header, current HW supports that only for TCP and UDP. Enforce it, in
this case fail the offloading attempt for non TCP/UDP packets.

Fixes: d7e75a325cb2 ('net/mlx5e: Add offloading of E-Switch TC pedit (header re-write) actions')
Fixes: 2f4fe4cab073 ('net/mlx5e: Add offloading of NIC TC pedit (header re-write) actions')
	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Paul Blakey <paulb@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit bdd66ac0aeed971d1cb42b3aa0d11b0ea3842e09)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 2a258dca3413,d3786005fba7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -1142,6 -1295,91 +1142,94 @@@ out_err
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static bool csum_offload_supported(struct mlx5e_priv *priv, u32 action, u32 update_flags)
+ {
+ 	u32 prot_flags = TCA_CSUM_UPDATE_FLAG_IPV4HDR | TCA_CSUM_UPDATE_FLAG_TCP |
+ 			 TCA_CSUM_UPDATE_FLAG_UDP;
+ 
+ 	/*  The HW recalcs checksums only if re-writing headers */
+ 	if (!(action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)) {
+ 		netdev_warn(priv->netdev,
+ 			    "TC csum action is only offloaded with pedit\n");
+ 		return false;
+ 	}
+ 
+ 	if (update_flags & ~prot_flags) {
+ 		netdev_warn(priv->netdev,
+ 			    "can't offload TC csum action for some header/s - flags %#x\n",
+ 			    update_flags);
+ 		return false;
+ 	}
+ 
+ 	return true;
+ }
+ 
+ static bool modify_header_match_supported(struct mlx5_flow_spec *spec,
+ 					  struct tcf_exts *exts)
+ {
+ 	const struct tc_action *a;
+ 	bool modify_ip_header;
+ 	LIST_HEAD(actions);
+ 	u8 htype, ip_proto;
+ 	void *headers_v;
+ 	u16 ethertype;
+ 	int nkeys, i;
+ 
+ 	headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, outer_headers);
+ 	ethertype = MLX5_GET(fte_match_set_lyr_2_4, headers_v, ethertype);
+ 
+ 	/* for non-IP we only re-write MACs, so we're okay */
+ 	if (ethertype != ETH_P_IP && ethertype != ETH_P_IPV6)
+ 		goto out_ok;
+ 
+ 	modify_ip_header = false;
+ 	tcf_exts_to_list(exts, &actions);
+ 	list_for_each_entry(a, &actions, list) {
+ 		if (!is_tcf_pedit(a))
+ 			continue;
+ 
+ 		nkeys = tcf_pedit_nkeys(a);
+ 		for (i = 0; i < nkeys; i++) {
+ 			htype = tcf_pedit_htype(a, i);
+ 			if (htype == TCA_PEDIT_KEY_EX_HDR_TYPE_IP4 ||
+ 			    htype == TCA_PEDIT_KEY_EX_HDR_TYPE_IP6) {
+ 				modify_ip_header = true;
+ 				break;
+ 			}
+ 		}
+ 	}
+ 
+ 	ip_proto = MLX5_GET(fte_match_set_lyr_2_4, headers_v, ip_protocol);
+ 	if (modify_ip_header && ip_proto != IPPROTO_TCP && ip_proto != IPPROTO_UDP) {
+ 		pr_info("can't offload re-write of ip proto %d\n", ip_proto);
+ 		return false;
+ 	}
+ 
+ out_ok:
+ 	return true;
+ }
+ 
+ static bool actions_match_supported(struct mlx5e_priv *priv,
+ 				    struct tcf_exts *exts,
+ 				    struct mlx5e_tc_flow_parse_attr *parse_attr,
+ 				    struct mlx5e_tc_flow *flow)
+ {
+ 	u32 actions;
+ 
+ 	if (flow->flags & MLX5E_TC_FLOW_ESWITCH)
+ 		actions = flow->esw_attr->action;
+ 	else
+ 		actions = flow->nic_attr->action;
+ 
+ 	if (actions & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
+ 		return modify_header_match_supported(&parse_attr->spec, exts);
+ 
+ 	return true;
+ }
+ 
++>>>>>>> bdd66ac0aeed (net/mlx5e: Disallow TC offloading of unsupported match/action combinations)
  static int parse_tc_nic_actions(struct mlx5e_priv *priv, struct tcf_exts *exts,
  				struct mlx5e_tc_flow_parse_attr *parse_attr,
  				struct mlx5e_tc_flow *flow)
@@@ -1653,10 -2002,14 +1744,18 @@@ static int parse_tc_fdb_actions(struct 
  
  		return -EINVAL;
  	}
++<<<<<<< HEAD
 +	return 0;
++=======
+ 
+ 	if (!actions_match_supported(priv, exts, parse_attr, flow))
+ 		return -EOPNOTSUPP;
+ 
+ 	return err;
++>>>>>>> bdd66ac0aeed (net/mlx5e: Disallow TC offloading of unsupported match/action combinations)
  }
  
 -int mlx5e_configure_flower(struct mlx5e_priv *priv,
 +int mlx5e_configure_flower(struct mlx5e_priv *priv, __be16 protocol,
  			   struct tc_cls_flower_offload *f)
  {
  	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
