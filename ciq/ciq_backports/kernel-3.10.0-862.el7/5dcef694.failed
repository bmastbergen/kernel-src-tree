intel_idle: add BXT support

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Len Brown <len.brown@intel.com>
commit 5dcef694860100fd16885f052591b1268b764d21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5dcef694.failed

Broxton has all the HSW C-states, except C3.
BXT C-state timing is slightly different.

Here we trust the IRTL MSRs as authority
on maximum C-state latency, and override the driver's tables
with the values found in the associated IRTL MSRs.
Further we set the target_residency to 1x maximum latency,
trusting the hardware demotion logic.

	Signed-off-by: Len Brown <len.brown@intel.com>
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 5dcef694860100fd16885f052591b1268b764d21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/idle/intel_idle.c
diff --cc drivers/idle/intel_idle.c
index 75af960cb9af,c96649292b55..000000000000
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@@ -842,49 -1011,50 +903,90 @@@ static const struct idle_cpu idle_cpu_k
  	.state_table = knl_cstates,
  };
  
++<<<<<<< HEAD
 +static const struct idle_cpu idle_cpu_dnv = {
 +	.state_table = dnv_cstates,
++=======
+ static const struct idle_cpu idle_cpu_bxt = {
+ 	.state_table = bxt_cstates,
++>>>>>>> 5dcef6948601 (intel_idle: add BXT support)
  	.disable_promotion_to_c1e = true,
  };
  
  #define ICPU(model, cpu) \
  	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_MWAIT, (unsigned long)&cpu }
  
++<<<<<<< HEAD
 +static const struct x86_cpu_id intel_idle_ids[] = {
 +	ICPU(INTEL_FAM6_NEHALEM_EP,		idle_cpu_nehalem),
 +	ICPU(INTEL_FAM6_NEHALEM,		idle_cpu_nehalem),
 +	ICPU(INTEL_FAM6_NEHALEM_G,		idle_cpu_nehalem),
 +	ICPU(INTEL_FAM6_WESTMERE,		idle_cpu_nehalem),
 +	ICPU(INTEL_FAM6_WESTMERE_EP,		idle_cpu_nehalem),
 +	ICPU(INTEL_FAM6_NEHALEM_EX,		idle_cpu_nehalem),
 +	ICPU(INTEL_FAM6_ATOM_PINEVIEW,		idle_cpu_atom),
 +	ICPU(INTEL_FAM6_ATOM_LINCROFT,		idle_cpu_lincroft),
 +	ICPU(INTEL_FAM6_WESTMERE_EX,		idle_cpu_nehalem),
 +	ICPU(INTEL_FAM6_SANDYBRIDGE,		idle_cpu_snb),
 +	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		idle_cpu_snb),
 +	ICPU(INTEL_FAM6_ATOM_CEDARVIEW,		idle_cpu_atom),
 +	ICPU(INTEL_FAM6_ATOM_SILVERMONT1,	idle_cpu_byt),
 +	ICPU(INTEL_FAM6_IVYBRIDGE,		idle_cpu_ivb),
 +	ICPU(INTEL_FAM6_IVYBRIDGE_X,		idle_cpu_ivt),
 +	ICPU(INTEL_FAM6_HASWELL_CORE,		idle_cpu_hsw),
 +	ICPU(INTEL_FAM6_HASWELL_X,		idle_cpu_hsw),
 +	ICPU(INTEL_FAM6_HASWELL_ULT,		idle_cpu_hsw),
 +	ICPU(INTEL_FAM6_HASWELL_GT3E,		idle_cpu_hsw),
 +	ICPU(INTEL_FAM6_ATOM_SILVERMONT2,	idle_cpu_avn),
 +	ICPU(INTEL_FAM6_BROADWELL_CORE,		idle_cpu_bdw),
 +	ICPU(INTEL_FAM6_BROADWELL_GT3E,		idle_cpu_bdw),
 +	ICPU(INTEL_FAM6_BROADWELL_X,		idle_cpu_bdw),
 +	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	idle_cpu_bdw),
 +	ICPU(INTEL_FAM6_SKYLAKE_MOBILE,		idle_cpu_skl),
 +	ICPU(INTEL_FAM6_SKYLAKE_DESKTOP,	idle_cpu_skl),
 +	ICPU(INTEL_FAM6_KABYLAKE_MOBILE,	idle_cpu_skl),
 +	ICPU(INTEL_FAM6_KABYLAKE_DESKTOP,	idle_cpu_skl),
 +	ICPU(INTEL_FAM6_SKYLAKE_X,		idle_cpu_skx),
 +	ICPU(INTEL_FAM6_XEON_PHI_KNL,		idle_cpu_knl),
 +	ICPU(INTEL_FAM6_XEON_PHI_KNM,		idle_cpu_knl),
 +	ICPU(INTEL_FAM6_ATOM_DENVERTON,		idle_cpu_dnv),
++=======
+ static const struct x86_cpu_id intel_idle_ids[] __initconst = {
+ 	ICPU(0x1a, idle_cpu_nehalem),
+ 	ICPU(0x1e, idle_cpu_nehalem),
+ 	ICPU(0x1f, idle_cpu_nehalem),
+ 	ICPU(0x25, idle_cpu_nehalem),
+ 	ICPU(0x2c, idle_cpu_nehalem),
+ 	ICPU(0x2e, idle_cpu_nehalem),
+ 	ICPU(0x1c, idle_cpu_atom),
+ 	ICPU(0x26, idle_cpu_lincroft),
+ 	ICPU(0x2f, idle_cpu_nehalem),
+ 	ICPU(0x2a, idle_cpu_snb),
+ 	ICPU(0x2d, idle_cpu_snb),
+ 	ICPU(0x36, idle_cpu_atom),
+ 	ICPU(0x37, idle_cpu_byt),
+ 	ICPU(0x4c, idle_cpu_cht),
+ 	ICPU(0x3a, idle_cpu_ivb),
+ 	ICPU(0x3e, idle_cpu_ivt),
+ 	ICPU(0x3c, idle_cpu_hsw),
+ 	ICPU(0x3f, idle_cpu_hsw),
+ 	ICPU(0x45, idle_cpu_hsw),
+ 	ICPU(0x46, idle_cpu_hsw),
+ 	ICPU(0x4d, idle_cpu_avn),
+ 	ICPU(0x3d, idle_cpu_bdw),
+ 	ICPU(0x47, idle_cpu_bdw),
+ 	ICPU(0x4f, idle_cpu_bdw),
+ 	ICPU(0x56, idle_cpu_bdw),
+ 	ICPU(0x4e, idle_cpu_skl),
+ 	ICPU(0x5e, idle_cpu_skl),
+ 	ICPU(0x8e, idle_cpu_skl),
+ 	ICPU(0x9e, idle_cpu_skl),
+ 	ICPU(0x55, idle_cpu_skx),
+ 	ICPU(0x57, idle_cpu_knl),
+ 	ICPU(0x5c, idle_cpu_bxt),
++>>>>>>> 5dcef6948601 (intel_idle: add BXT support)
  	{}
  };
 -MODULE_DEVICE_TABLE(x86cpu, intel_idle_ids);
  
  /*
   * intel_idle_probe()
@@@ -1024,10 -1261,13 +1193,17 @@@ static void intel_idle_state_table_upda
  {
  	switch (boot_cpu_data.x86_model) {
  
 -	case 0x3e: /* IVT */
 +	case INTEL_FAM6_IVYBRIDGE_X:
  		ivt_idle_state_table_update();
  		break;
++<<<<<<< HEAD
 +	case INTEL_FAM6_SKYLAKE_DESKTOP:
++=======
+ 	case 0x5c: /* BXT */
+ 		bxt_idle_state_table_update();
+ 		break;
+ 	case 0x5e: /* SKL-H */
++>>>>>>> 5dcef6948601 (intel_idle: add BXT support)
  		sklh_idle_state_table_update();
  		break;
  	}
* Unmerged path drivers/idle/intel_idle.c
