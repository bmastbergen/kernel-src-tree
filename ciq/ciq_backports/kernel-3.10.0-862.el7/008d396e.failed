tools/power turbostat: use tsc_tweak everwhere it is needed

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [tools] power turbostat: use tsc_tweak everwhere it is needed (Prarit Bhargava) [1514290]
Rebuild_FUZZ: 94.64%
commit-author Len Brown <len.brown@intel.com>
commit 008d396eb219ee5a1c98c9ef01c35752d35f0d6c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/008d396e.failed

The CPU ticks at a rate in the "bus clock" domain.
eg. 100 MHz * bus_ratio.

On newer processors, the TSC has been moved out of this BCLK
domain and into a separate crystal-clock domain.

While the TSC ticks "close to" the base frequency, those that look
closely at the numbers will notice small errors in calculations that
mix units of TSC clocks and bus clocks.

"tsc_tweak" was introduced to address the most visible
mixing -- the %Busy and the the Busy_MHz calculations.
(A simplification as since removed TSC from the BusyMHz calculation)

Here we apply the tsc_tweak to everyplace where BCLK
and TSC units are mixed.  The results is that
on a system which is 100% idle, the sum of the C-states
are now much more likely to be closer to 100%.

	Reported-by: Travis Downs <travis.downs@gmail.com>
	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 008d396eb219ee5a1c98c9ef01c35752d35f0d6c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index 0bd5262fcaf9,bbdf9ba9d41b..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -762,12 -771,16 +764,19 @@@ int format_counters(struct thread_data 
  		goto done;
  
  	if (DO_BIC(BIC_CPU_c3) && !do_slm_cstates && !do_knl_cstates)
- 		outp += sprintf(outp, "\t%.2f", 100.0 * c->c3/t->tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * c->c3/tsc);
  	if (DO_BIC(BIC_CPU_c6))
- 		outp += sprintf(outp, "\t%.2f", 100.0 * c->c6/t->tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * c->c6/tsc);
  	if (DO_BIC(BIC_CPU_c7))
- 		outp += sprintf(outp, "\t%.2f", 100.0 * c->c7/t->tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * c->c7/tsc);
+ 
++<<<<<<< HEAD
++=======
+ 	/* Mod%c6 */
+ 	if (DO_BIC(BIC_Mod_c6))
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * c->mc6_us / tsc);
  
++>>>>>>> 008d396eb219 (tools/power turbostat: use tsc_tweak everwhere it is needed)
  	if (DO_BIC(BIC_CoreTmp))
  		outp += sprintf(outp, "\t%d", c->core_temp_c);
  
@@@ -808,26 -821,25 +817,42 @@@
  
  	/* Totl%C0, Any%C0 GFX%C0 CPUGFX% */
  	if (do_skl_residency) {
- 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_wtd_core_c0/t->tsc);
- 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_core_c0/t->tsc);
- 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_gfxe_c0/t->tsc);
- 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_both_core_gfxe_c0/t->tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_wtd_core_c0/tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_core_c0/tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_any_gfxe_c0/tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pkg_both_core_gfxe_c0/tsc);
  	}
  
++<<<<<<< HEAD
 +	if (DO_BIC(BIC_Pkgpc2))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc2/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc3))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc3/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc6))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc6/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc7))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc7/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc8))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc8/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc9))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc9/t->tsc);
 +	if (DO_BIC(BIC_Pkgpc10))
 +		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc10/t->tsc);
++=======
+ 	if (do_pc2)
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc2/tsc);
+ 	if (do_pc3)
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc3/tsc);
+ 	if (do_pc6)
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc6/tsc);
+ 	if (do_pc7)
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc7/tsc);
+ 	if (do_c8_c9_c10) {
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc8/tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc9/tsc);
+ 		outp += sprintf(outp, "\t%.2f", 100.0 * p->pc10/tsc);
+ 	}
++>>>>>>> 008d396eb219 (tools/power turbostat: use tsc_tweak everwhere it is needed)
  
  	/*
   	 * If measurement interval exceeds minimum RAPL Joule Counter range,
* Unmerged path tools/power/x86/turbostat/turbostat.c
