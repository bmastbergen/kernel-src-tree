nvme-pci: Introduce nvme_ring_cq_doorbell

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] pci: Introduce nvme_ring_cq_doorbell (David Milburn) [1457880 1456486 1454365]
Rebuild_FUZZ: 93.51%
commit-author Sagi Grimberg <sagi@grimberg.me>
commit eb281c8283e87a2d1d6ed406f9c6408c39737b4d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/eb281c82.failed

Nice abstraction of the actual mechanics of how to do it.
Note the change that we call it after we assign nvmeq->cq_head
to avoid passing it.

	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit eb281c8283e87a2d1d6ed406f9c6408c39737b4d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index 9cfb96d101ef,042cfe5ef8e9..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -592,7 -730,18 +592,22 @@@ static inline bool nvme_cqe_valid(struc
  	return (le16_to_cpu(nvmeq->cqes[head].status) & 1) == phase;
  }
  
++<<<<<<< HEAD
 +static int nvme_process_cq(struct nvme_queue *nvmeq)
++=======
+ static inline void nvme_ring_cq_doorbell(struct nvme_queue *nvmeq)
+ {
+ 	u16 head = nvmeq->cq_head;
+ 
+ 	if (likely(nvmeq->cq_vector >= 0)) {
+ 		if (nvme_dbbuf_update_and_check_event(head, nvmeq->dbbuf_cq_db,
+ 						      nvmeq->dbbuf_cq_ei))
+ 			writel(head, nvmeq->q_db + nvmeq->dev->db_stride);
+ 	}
+ }
+ 
+ static void __nvme_process_cq(struct nvme_queue *nvmeq, unsigned int *tag)
++>>>>>>> eb281c8283e8 (nvme-pci: Introduce nvme_ring_cq_doorbell)
  {
  	u16 head, phase;
  
@@@ -635,15 -785,19 +650,20 @@@
  	}
  
  	if (head == nvmeq->cq_head && phase == nvmeq->cq_phase)
 -		return;
 +		return 0;
  
++<<<<<<< HEAD
 +	if (likely(nvmeq->cq_vector >= 0))
 +		writel(head, nvmeq->q_db + nvmeq->dev->db_stride);
++=======
++>>>>>>> eb281c8283e8 (nvme-pci: Introduce nvme_ring_cq_doorbell)
  	nvmeq->cq_head = head;
  	nvmeq->cq_phase = phase;
  
+ 	nvme_ring_cq_doorbell(nvmeq);
+ 
  	nvmeq->cqe_seen = 1;
 -}
 -
 -static void nvme_process_cq(struct nvme_queue *nvmeq)
 -{
 -	__nvme_process_cq(nvmeq, NULL);
 +	return 1;
  }
  
  static irqreturn_t nvme_irq(int irq, void *data)
* Unmerged path drivers/nvme/host/pci.c
