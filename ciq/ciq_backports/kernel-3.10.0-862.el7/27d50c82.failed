ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Lv Zheng <lv.zheng@intel.com>
commit 27d50c82714f6477ac690034b37d202f76eb4f70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/27d50c82.failed

To avoid build problems and breaking dependencies between ACPI header
files, <acpi/acpi.h> should not be included directly by code outside
of the ACPI core subsystem.  However, that is possible if
<linux/acpi_io.h> is included, because that file contains
a direct inclusion of <acpi/acpi.h>.

For this reason, remove the direct <acpi/acpi.h> inclusion from
<linux/acpi_io.h>, move that file from include/linux/ to include/acpi/
and make <linux/acpi.h> include it for CONFIG_ACPI set along with the
other ACPI header files.  Accordingly, Remove the inclusions of
<linux/acpi_io.h> from everywhere.

Of course, that causes the contents of the new <acpi/acpi_io.h> file
to be available for CONFIG_ACPI set only, so intel_opregion.o that
depends on it should also depend on CONFIG_ACPI (and it really should
not be compiled for CONFIG_ACPI unset anyway).

References: https://01.org/linuxgraphics/sites/default/files/documentation/acpi_igd_opregion_spec.pdf
	Cc: Matthew Garrett <mjg59@srcf.ucam.org>
	Signed-off-by: Lv Zheng <lv.zheng@intel.com>
	Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
[rjw: Subject and changelog]
	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 27d50c82714f6477ac690034b37d202f76eb4f70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/acpi/nvs.c
#	drivers/gpu/drm/i915/Makefile
#	drivers/gpu/drm/i915/i915_drv.h
#	drivers/gpu/drm/i915/intel_opregion.c
#	include/acpi/acpi_io.h
diff --cc drivers/acpi/nvs.c
index 266bc58ce0ce,ef28613d5192..000000000000
--- a/drivers/acpi/nvs.c
+++ b/drivers/acpi/nvs.c
@@@ -12,8 -12,6 +12,11 @@@
  #include <linux/mm.h>
  #include <linux/slab.h>
  #include <linux/acpi.h>
++<<<<<<< HEAD
 +#include <linux/acpi_io.h>
 +#include <acpi/acpiosxf.h>
++=======
++>>>>>>> 27d50c82714f (ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>)
  
  /* ACPI NVS regions, APEI may use it */
  
diff --cc drivers/gpu/drm/i915/Makefile
index 2d2e283d917a,d4ae48b04cf2..000000000000
--- a/drivers/gpu/drm/i915/Makefile
+++ b/drivers/gpu/drm/i915/Makefile
@@@ -3,125 -3,57 +3,147 @@@
  # Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.
  
  ccflags-y := -Iinclude/drm
 -i915-y := i915_drv.o i915_dma.o i915_irq.o \
 -	  i915_debugfs.o \
 -	  i915_gpu_error.o \
 +ccflags-y += -include drm/drm_backport.h
 +subdir-ccflags-$(CONFIG_DRM_I915_WERROR) := -Werror
 +
 +# Please keep these build lists sorted!
 +
 +# core driver code
 +i915-y := i915_drv.o \
 +	  i915_irq.o \
 +	  i915_memcpy.o \
 +	  i915_mm.o \
 +	  i915_params.o \
 +	  i915_pci.o \
            i915_suspend.o \
 -	  i915_gem.o \
 -	  i915_gem_context.o \
 -	  i915_gem_debug.o \
 -	  i915_gem_evict.o \
 -	  i915_gem_execbuffer.o \
 -	  i915_gem_gtt.o \
 -	  i915_gem_stolen.o \
 -	  i915_gem_tiling.o \
 +	  i915_sw_fence.o \
  	  i915_sysfs.o \
 -	  i915_trace_points.o \
 -	  i915_ums.o \
 -	  intel_display.o \
 -	  intel_crt.o \
 -	  intel_lvds.o \
 -	  intel_dsi.o \
 -	  intel_dsi_cmd.o \
 -	  intel_dsi_pll.o \
 -	  intel_bios.o \
 -	  intel_ddi.o \
 -	  intel_dp.o \
 -	  intel_hdmi.o \
 -	  intel_sdvo.o \
 -	  intel_modes.o \
 -	  intel_panel.o \
 +	  intel_csr.o \
 +	  intel_device_info.o \
  	  intel_pm.o \
++<<<<<<< HEAD
 +	  intel_runtime_pm.o
++=======
+ 	  intel_i2c.o \
+ 	  intel_tv.o \
+ 	  intel_dvo.o \
+ 	  intel_ringbuffer.o \
+ 	  intel_overlay.o \
+ 	  intel_sprite.o \
+ 	  intel_sideband.o \
+ 	  intel_uncore.o \
+ 	  dvo_ch7xxx.o \
+ 	  dvo_ch7017.o \
+ 	  dvo_ivch.o \
+ 	  dvo_tfp410.o \
+ 	  dvo_sil164.o \
+ 	  dvo_ns2501.o \
+ 	  i915_gem_dmabuf.o
++>>>>>>> 27d50c82714f (ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>)
  
  i915-$(CONFIG_COMPAT)   += i915_ioc32.o
 +i915-$(CONFIG_DEBUG_FS) += i915_debugfs.o
  
++<<<<<<< HEAD
 +# GEM code
 +i915-y += i915_cmd_parser.o \
 +	  i915_gem_batch_pool.o \
 +	  i915_gem_context.o \
 +	  i915_gem_dmabuf.o \
 +	  i915_gem_evict.o \
 +	  i915_gem_execbuffer.o \
 +	  i915_gem_fence_reg.o \
 +	  i915_gem_gtt.o \
 +	  i915_gem_internal.o \
 +	  i915_gem.o \
 +	  i915_gem_render_state.o \
 +	  i915_gem_request.o \
 +	  i915_gem_shrinker.o \
 +	  i915_gem_stolen.o \
 +	  i915_gem_tiling.o \
 +	  i915_gem_timeline.o \
 +	  i915_gem_userptr.o \
 +	  i915_trace_points.o \
 +	  i915_vma.o \
 +	  intel_breadcrumbs.o \
 +	  intel_engine_cs.o \
 +	  intel_hangcheck.o \
 +	  intel_lrc.o \
 +	  intel_mocs.o \
 +	  intel_ringbuffer.o \
 +	  intel_uncore.o
++=======
+ i915-$(CONFIG_ACPI)	+= intel_acpi.o intel_opregion.o
++>>>>>>> 27d50c82714f (ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>)
 +
 +# general-purpose microcontroller (GuC) support
 +i915-y += intel_guc_loader.o \
 +	  i915_guc_submission.o
 +
 +# autogenerated null render state
 +i915-y += intel_renderstate_gen6.o \
 +	  intel_renderstate_gen7.o \
 +	  intel_renderstate_gen8.o \
 +	  intel_renderstate_gen9.o
 +
 +# modesetting core code
 +i915-y += intel_audio.o \
 +	  intel_atomic.o \
 +	  intel_atomic_plane.o \
 +	  intel_bios.o \
 +	  intel_color.o \
 +	  intel_display.o \
 +	  intel_dpio_phy.o \
 +	  intel_dpll_mgr.o \
 +	  intel_fbc.o \
 +	  intel_fifo_underrun.o \
 +	  intel_frontbuffer.o \
 +	  intel_hotplug.o \
 +	  intel_modes.o \
 +	  intel_overlay.o \
 +	  intel_psr.o \
 +	  intel_sideband.o \
 +	  intel_sprite.o
 +i915-$(CONFIG_ACPI)		+= intel_acpi.o intel_opregion.o
 +i915-$(CONFIG_DRM_FBDEV_EMULATION)	+= intel_fbdev.o
 +
 +# modesetting output/encoder code
 +i915-y += dvo_ch7017.o \
 +	  dvo_ch7xxx.o \
 +	  dvo_ivch.o \
 +	  dvo_ns2501.o \
 +	  dvo_sil164.o \
 +	  dvo_tfp410.o \
 +	  intel_crt.o \
 +	  intel_ddi.o \
 +	  intel_dp_aux_backlight.o \
 +	  intel_dp_link_training.o \
 +	  intel_dp_mst.o \
 +	  intel_dp.o \
 +	  intel_dsi.o \
 +	  intel_dsi_dcs_backlight.o \
 +	  intel_dsi_panel_vbt.o \
 +	  intel_dsi_pll.o \
 +	  intel_dvo.o \
 +	  intel_hdmi.o \
 +	  intel_i2c.o \
 +	  intel_lspcon.o \
 +	  intel_lvds.o \
 +	  intel_panel.o \
 +	  intel_sdvo.o \
 +	  intel_tv.o
 +
 +# Post-mortem debug and GPU hang state capture
 +i915-$(CONFIG_DRM_I915_CAPTURE_ERROR) += i915_gpu_error.o
 +
 +# virtual gpu code
 +i915-y += i915_vgpu.o
  
 -i915-$(CONFIG_DRM_I915_FBDEV) += intel_fbdev.o
 +ifeq ($(CONFIG_DRM_I915_GVT),y)
 +i915-y += intel_gvt.o
 +include $(src)/gvt/Makefile
 +endif
  
 -obj-$(CONFIG_DRM_I915)  += i915.o
 +obj-$(CONFIG_DRM_I915) += i915.o
  
  CFLAGS_i915_trace_points.o := -I$(src)
diff --cc drivers/gpu/drm/i915/i915_drv.h
index c383dcb3961f,7f37b838802e..000000000000
--- a/drivers/gpu/drm/i915/i915_drv.h
+++ b/drivers/gpu/drm/i915/i915_drv.h
@@@ -3404,39 -2334,22 +3404,55 @@@ static inline bool intel_gmbus_is_force
  }
  extern void intel_i2c_reset(struct drm_device *dev);
  
 +/* intel_bios.c */
 +int intel_bios_init(struct drm_i915_private *dev_priv);
 +bool intel_bios_is_valid_vbt(const void *buf, size_t size);
 +bool intel_bios_is_tv_present(struct drm_i915_private *dev_priv);
 +bool intel_bios_is_lvds_present(struct drm_i915_private *dev_priv, u8 *i2c_pin);
 +bool intel_bios_is_port_present(struct drm_i915_private *dev_priv, enum port port);
 +bool intel_bios_is_port_edp(struct drm_i915_private *dev_priv, enum port port);
 +bool intel_bios_is_port_dp_dual_mode(struct drm_i915_private *dev_priv, enum port port);
 +bool intel_bios_is_dsi_present(struct drm_i915_private *dev_priv, enum port *port);
 +bool intel_bios_is_port_hpd_inverted(struct drm_i915_private *dev_priv,
 +				     enum port port);
 +bool intel_bios_is_lspcon_present(struct drm_i915_private *dev_priv,
 +				enum port port);
 +
 +
  /* intel_opregion.c */
++<<<<<<< HEAD
 +#ifdef CONFIG_ACPI
 +extern int intel_opregion_setup(struct drm_i915_private *dev_priv);
 +extern void intel_opregion_register(struct drm_i915_private *dev_priv);
 +extern void intel_opregion_unregister(struct drm_i915_private *dev_priv);
 +extern void intel_opregion_asle_intr(struct drm_i915_private *dev_priv);
++=======
+ struct intel_encoder;
+ #ifdef CONFIG_ACPI
+ extern int intel_opregion_setup(struct drm_device *dev);
+ extern void intel_opregion_init(struct drm_device *dev);
+ extern void intel_opregion_fini(struct drm_device *dev);
+ extern void intel_opregion_asle_intr(struct drm_device *dev);
++>>>>>>> 27d50c82714f (ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>)
  extern int intel_opregion_notify_encoder(struct intel_encoder *intel_encoder,
  					 bool enable);
 -extern int intel_opregion_notify_adapter(struct drm_device *dev,
 +extern int intel_opregion_notify_adapter(struct drm_i915_private *dev_priv,
  					 pci_power_t state);
 +extern int intel_opregion_get_panel_type(struct drm_i915_private *dev_priv);
  #else
++<<<<<<< HEAD
 +static inline int intel_opregion_setup(struct drm_i915_private *dev) { return 0; }
 +static inline void intel_opregion_register(struct drm_i915_private *dev_priv) { }
 +static inline void intel_opregion_unregister(struct drm_i915_private *dev_priv) { }
 +static inline void intel_opregion_asle_intr(struct drm_i915_private *dev_priv)
 +{
 +}
++=======
+ static inline int intel_opregion_setup(struct drm_device *dev) { return 0; }
+ static inline void intel_opregion_init(struct drm_device *dev) { return; }
+ static inline void intel_opregion_fini(struct drm_device *dev) { return; }
+ static inline void intel_opregion_asle_intr(struct drm_device *dev) { return; }
++>>>>>>> 27d50c82714f (ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>)
  static inline int
  intel_opregion_notify_encoder(struct intel_encoder *intel_encoder, bool enable)
  {
diff --cc drivers/gpu/drm/i915/intel_opregion.c
index 4a862a358c70,9a8804bee5cd..000000000000
--- a/drivers/gpu/drm/i915/intel_opregion.c
+++ b/drivers/gpu/drm/i915/intel_opregion.c
@@@ -25,8 -25,9 +25,11 @@@
   *
   */
  
 -#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 -
  #include <linux/acpi.h>
++<<<<<<< HEAD
 +#include <linux/dmi.h>
++=======
++>>>>>>> 27d50c82714f (ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>)
  #include <acpi/video.h>
  
  #include <drm/drmP.h>
diff --cc include/acpi/acpi_io.h
index b0ffa219993e,2be858018c7f..000000000000
--- a/include/acpi/acpi_io.h
+++ b/include/acpi/acpi_io.h
@@@ -2,7 -2,6 +2,10 @@@
  #define _ACPI_IO_H_
  
  #include <linux/io.h>
++<<<<<<< HEAD:include/linux/acpi_io.h
 +#include <acpi/acpi.h>
++=======
++>>>>>>> 27d50c82714f (ACPI / i915: Fix incorrect <acpi/acpi.h> inclusions via <linux/acpi_io.h>):include/acpi/acpi_io.h
  
  static inline void __iomem *acpi_os_ioremap(acpi_physical_address phys,
  					    acpi_size size)
diff --git a/drivers/acpi/apei/apei-base.c b/drivers/acpi/apei/apei-base.c
index fb962d5f4f70..aaf43a16b4ce 100644
--- a/drivers/acpi/apei/apei-base.c
+++ b/drivers/acpi/apei/apei-base.c
@@ -34,7 +34,6 @@
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/acpi.h>
-#include <linux/acpi_io.h>
 #include <linux/slab.h>
 #include <linux/io.h>
 #include <linux/kref.h>
diff --git a/drivers/acpi/apei/apei-internal.h b/drivers/acpi/apei/apei-internal.h
index 21ba34a73883..e5bcd919d4e6 100644
--- a/drivers/acpi/apei/apei-internal.h
+++ b/drivers/acpi/apei/apei-internal.h
@@ -8,7 +8,6 @@
 
 #include <linux/cper.h>
 #include <linux/acpi.h>
-#include <linux/acpi_io.h>
 
 struct apei_exec_context;
 
diff --git a/drivers/acpi/apei/ghes.c b/drivers/acpi/apei/ghes.c
index 200e10f6ea9e..17f321b3158b 100644
--- a/drivers/acpi/apei/ghes.c
+++ b/drivers/acpi/apei/ghes.c
@@ -33,7 +33,6 @@
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/acpi.h>
-#include <linux/acpi_io.h>
 #include <linux/io.h>
 #include <linux/interrupt.h>
 #include <linux/timer.h>
* Unmerged path drivers/acpi/nvs.c
diff --git a/drivers/acpi/osl.c b/drivers/acpi/osl.c
index 167afd5f464f..8d985f2e7f77 100644
--- a/drivers/acpi/osl.c
+++ b/drivers/acpi/osl.c
@@ -39,7 +39,6 @@
 #include <linux/workqueue.h>
 #include <linux/nmi.h>
 #include <linux/acpi.h>
-#include <linux/acpi_io.h>
 #include <linux/efi.h>
 #include <linux/ioport.h>
 #include <linux/list.h>
* Unmerged path drivers/gpu/drm/i915/Makefile
* Unmerged path drivers/gpu/drm/i915/i915_drv.h
* Unmerged path drivers/gpu/drm/i915/intel_opregion.c
* Unmerged path include/acpi/acpi_io.h
diff --git a/include/linux/acpi.h b/include/linux/acpi.h
index 0ab4b0e3a549..80a45ebdd882 100644
--- a/include/linux/acpi.h
+++ b/include/linux/acpi.h
@@ -45,6 +45,7 @@
 #include <acpi/acpi_bus.h>
 #include <acpi/acpi_drivers.h>
 #include <acpi/acpi_numa.h>
+#include <acpi/acpi_io.h>
 #include <asm/acpi.h>
 
 static inline acpi_handle acpi_device_handle(struct acpi_device *adev)
diff --git a/include/linux/acpi_io.h b/include/linux/acpi_io.h
deleted file mode 100644
index b0ffa219993e..000000000000
--- a/include/linux/acpi_io.h
+++ /dev/null
@@ -1,18 +0,0 @@
-#ifndef _ACPI_IO_H_
-#define _ACPI_IO_H_
-
-#include <linux/io.h>
-#include <acpi/acpi.h>
-
-static inline void __iomem *acpi_os_ioremap(acpi_physical_address phys,
-					    acpi_size size)
-{
-       return ioremap_cache(phys, size);
-}
-
-void __iomem *acpi_os_get_iomem(acpi_physical_address phys, unsigned int size);
-
-int acpi_os_map_generic_address(struct acpi_generic_address *addr);
-void acpi_os_unmap_generic_address(struct acpi_generic_address *addr);
-
-#endif
