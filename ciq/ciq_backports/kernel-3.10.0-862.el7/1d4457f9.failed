sched: move no_new_privs into new atomic flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Kees Cook <keescook@chromium.org>
commit 1d4457f99928a968767f6405b4a1f50845aa15fd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1d4457f9.failed

Since seccomp transitions between threads requires updates to the
no_new_privs flag to be atomic, the flag must be part of an atomic flag
set. This moves the nnp flag into a separate task field, and introduces
accessors.

	Signed-off-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Oleg Nesterov <oleg@redhat.com>
	Reviewed-by: Andy Lutomirski <luto@amacapital.net>
(cherry picked from commit 1d4457f99928a968767f6405b4a1f50845aa15fd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/exec.c
diff --cc fs/exec.c
index 9ca6d51722de,0f5c272410f6..000000000000
--- a/fs/exec.c
+++ b/fs/exec.c
@@@ -1304,9 -1234,10 +1304,9 @@@ static int check_unsafe_exec(struct lin
  	 * This isn't strictly necessary, but it makes it harder for LSMs to
  	 * mess up.
  	 */
- 	if (current->no_new_privs)
+ 	if (task_no_new_privs(current))
  		bprm->unsafe |= LSM_UNSAFE_NO_NEW_PRIVS;
  
 -	t = p;
  	n_fs = 1;
  	spin_lock(&p->fs->lock);
  	rcu_read_lock();
@@@ -1338,15 -1262,36 +1338,43 @@@
   */
  int prepare_binprm(struct linux_binprm *bprm)
  {
 -	struct inode *inode = file_inode(bprm->file);
 -	umode_t mode = inode->i_mode;
 +	umode_t mode;
 +	struct inode * inode = file_inode(bprm->file);
  	int retval;
  
 +	mode = inode->i_mode;
 +	if (bprm->file->f_op == NULL)
 +		return -EACCES;
  
++<<<<<<< HEAD
 +	bprm_fill_uid(bprm);
++=======
+ 	/* clear any previous set[ug]id data from a previous binary */
+ 	bprm->cred->euid = current_euid();
+ 	bprm->cred->egid = current_egid();
+ 
+ 	if (!(bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID) &&
+ 	    !task_no_new_privs(current) &&
+ 	    kuid_has_mapping(bprm->cred->user_ns, inode->i_uid) &&
+ 	    kgid_has_mapping(bprm->cred->user_ns, inode->i_gid)) {
+ 		/* Set-uid? */
+ 		if (mode & S_ISUID) {
+ 			bprm->per_clear |= PER_CLEAR_ON_SETID;
+ 			bprm->cred->euid = inode->i_uid;
+ 		}
+ 
+ 		/* Set-gid? */
+ 		/*
+ 		 * If setgid is set but no group execute bit then this
+ 		 * is a candidate for mandatory locking, not a setgid
+ 		 * executable.
+ 		 */
+ 		if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {
+ 			bprm->per_clear |= PER_CLEAR_ON_SETID;
+ 			bprm->cred->egid = inode->i_gid;
+ 		}
+ 	}
++>>>>>>> 1d4457f99928 (sched: move no_new_privs into new atomic flags)
  
  	/* fill in binprm security blob */
  	retval = security_bprm_set_creds(bprm);
* Unmerged path fs/exec.c
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 17d2f0bc1bf5..69a17543e420 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1408,13 +1408,12 @@ struct task_struct {
 				 * execve */
 	unsigned in_iowait:1;
 
-	/* task may not gain privileges */
-	unsigned no_new_privs:1;
-
 	/* Revert to default priority/policy when forking */
 	unsigned sched_reset_on_fork:1;
 	unsigned sched_contributes_to_load:1;
 
+	unsigned long atomic_flags; /* Flags needing atomic access. */
+
 	pid_t pid;
 	pid_t tgid;
 
@@ -2139,6 +2138,19 @@ static inline void memalloc_noio_restore(unsigned int flags)
 	current->flags = (current->flags & ~PF_MEMALLOC_NOIO) | flags;
 }
 
+/* Per-process atomic flags. */
+#define PFA_NO_NEW_PRIVS 0x00000001	/* May not gain new privileges. */
+
+static inline bool task_no_new_privs(struct task_struct *p)
+{
+	return test_bit(PFA_NO_NEW_PRIVS, &p->atomic_flags);
+}
+
+static inline void task_set_no_new_privs(struct task_struct *p)
+{
+	set_bit(PFA_NO_NEW_PRIVS, &p->atomic_flags);
+}
+
 /*
  * task->jobctl flags
  */
diff --git a/kernel/seccomp.c b/kernel/seccomp.c
index dab81904040f..7166a2b41c70 100644
--- a/kernel/seccomp.c
+++ b/kernel/seccomp.c
@@ -263,7 +263,7 @@ static long seccomp_attach_filter(struct sock_fprog *fprog)
 	 * This avoids scenarios where unprivileged tasks can affect the
 	 * behavior of privileged children.
 	 */
-	if (!current->no_new_privs &&
+	if (!task_no_new_privs(current) &&
 	    security_capable_noaudit(current_cred(), current_user_ns(),
 				     CAP_SYS_ADMIN) != 0)
 		return -EACCES;
diff --git a/kernel/sys.c b/kernel/sys.c
index 20c59a4e34c9..b95dbf6c0ab9 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -2479,12 +2479,12 @@ SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,
 		if (arg2 != 1 || arg3 || arg4 || arg5)
 			return -EINVAL;
 
-		current->no_new_privs = 1;
+		task_set_no_new_privs(current);
 		break;
 	case PR_GET_NO_NEW_PRIVS:
 		if (arg2 || arg3 || arg4 || arg5)
 			return -EINVAL;
-		return current->no_new_privs ? 1 : 0;
+		return task_no_new_privs(current) ? 1 : 0;
 	case PR_GET_THP_DISABLE:
 		if (arg2 || arg3 || arg4 || arg5)
 			return -EINVAL;
diff --git a/security/apparmor/domain.c b/security/apparmor/domain.c
index 859abdaac1ea..9aaa4e72cc1f 100644
--- a/security/apparmor/domain.c
+++ b/security/apparmor/domain.c
@@ -629,7 +629,7 @@ int aa_change_hat(const char *hats[], int count, u64 token, bool permtest)
 	 * There is no exception for unconfined as change_hat is not
 	 * available.
 	 */
-	if (current->no_new_privs)
+	if (task_no_new_privs(current))
 		return -EPERM;
 
 	/* released below */
@@ -780,7 +780,7 @@ int aa_change_profile(const char *ns_name, const char *hname, bool onexec,
 	 * no_new_privs is set because this aways results in a reduction
 	 * of permissions.
 	 */
-	if (current->no_new_privs && !unconfined(profile)) {
+	if (task_no_new_privs(current) && !unconfined(profile)) {
 		put_cred(cred);
 		return -EPERM;
 	}
