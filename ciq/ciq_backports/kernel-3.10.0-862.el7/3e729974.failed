iio: hid-sensors: Set default unit of measure for report interval

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Archana Patni <archana.patni@linux.intel.com>
commit 3e729974d67608be773167677478781bc874d369
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3e729974.failed

For PROP_REPORT_INTERVAL, the spec does not mandate the presence
of the report interval unit in the feature report and expects the
default unit of measure to be used as milliseconds.

Currently, when the unit is not present, it gets set as zero leading
to issues in sampling frequency.

This patch sets the unit of measure to the default unit if it
is not defined by firmware.

	Signed-off-by: Archana Patni <archana.patni@intel.com>
	Signed-off-by: Subramony Sesha <subramony.sesha@intel.com>
	Reviewed-by: Srinivas Pandruvada <srinivas.pandruvada@intel.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 3e729974d67608be773167677478781bc874d369)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iio/common/hid-sensors/hid-sensor-attributes.c
diff --cc drivers/iio/common/hid-sensors/hid-sensor-attributes.c
index 75b54730a963,403dd3d8986e..000000000000
--- a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
@@@ -209,7 -263,87 +209,89 @@@ int hid_sensor_write_raw_hyst_value(str
  }
  EXPORT_SYMBOL(hid_sensor_write_raw_hyst_value);
  
- int hid_sensor_parse_common_attributes(struct hid_sensor_hub_device *hsdev,
++<<<<<<< HEAD
++=======
+ /*
+  * This fuction applies the unit exponent to the scale.
+  * For example:
+  * 9.806650 ->exp:2-> val0[980]val1[665000]
+  * 9.000806 ->exp:2-> val0[900]val1[80600]
+  * 0.174535 ->exp:2-> val0[17]val1[453500]
+  * 1.001745 ->exp:0-> val0[1]val1[1745]
+  * 1.001745 ->exp:2-> val0[100]val1[174500]
+  * 1.001745 ->exp:4-> val0[10017]val1[450000]
+  * 9.806650 ->exp:-2-> val0[0]val1[98066]
+  */
+ static void adjust_exponent_micro(int *val0, int *val1, int scale0,
+ 				  int scale1, int exp)
+ {
+ 	int i;
+ 	int x;
+ 	int res;
+ 	int rem;
+ 
+ 	if (exp > 0) {
+ 		*val0 = scale0 * pow_10(exp);
+ 		res = 0;
+ 		if (exp > 6) {
+ 			*val1 = 0;
+ 			return;
+ 		}
+ 		for (i = 0; i < exp; ++i) {
+ 			x = scale1 / pow_10(5 - i);
+ 			res += (pow_10(exp - 1 - i) * x);
+ 			scale1 = scale1 % pow_10(5 - i);
+ 		}
+ 		*val0 += res;
+ 			*val1 = scale1 * pow_10(exp);
+ 	} else if (exp < 0) {
+ 		exp = abs(exp);
+ 		if (exp > 6) {
+ 			*val0 = *val1 = 0;
+ 			return;
+ 		}
+ 		*val0 = scale0 / pow_10(exp);
+ 		rem = scale0 % pow_10(exp);
+ 		res = 0;
+ 		for (i = 0; i < (6 - exp); ++i) {
+ 			x = scale1 / pow_10(5 - i);
+ 			res += (pow_10(5 - exp - i) * x);
+ 			scale1 = scale1 % pow_10(5 - i);
+ 		}
+ 		*val1 = rem * pow_10(6 - exp) + res;
+ 	} else {
+ 		*val0 = scale0;
+ 		*val1 = scale1;
+ 	}
+ }
+ 
+ int hid_sensor_format_scale(u32 usage_id,
+ 			struct hid_sensor_hub_attribute_info *attr_info,
+ 			int *val0, int *val1)
+ {
+ 	int i;
+ 	int exp;
+ 
+ 	*val0 = 1;
+ 	*val1 = 0;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(unit_conversion); ++i) {
+ 		if (unit_conversion[i].usage_id == usage_id &&
+ 			unit_conversion[i].unit == attr_info->units) {
+ 			exp  = hid_sensor_convert_exponent(
+ 						attr_info->unit_expo);
+ 			adjust_exponent_micro(val0, val1,
+ 					unit_conversion[i].scale_val0,
+ 					unit_conversion[i].scale_val1, exp);
+ 			break;
+ 		}
+ 	}
+ 
+ 	return IIO_VAL_INT_PLUS_MICRO;
+ }
+ EXPORT_SYMBOL(hid_sensor_format_scale);
+ 
+ int hid_sensor_get_reporting_interval(struct hid_sensor_hub_device *hsdev,
  					u32 usage_id,
  					struct hid_sensor_common *st)
  {
@@@ -218,6 -351,20 +299,21 @@@
  					HID_FEATURE_REPORT, usage_id,
  					HID_USAGE_SENSOR_PROP_REPORT_INTERVAL,
  					&st->poll);
+ 	/* Default unit of measure is milliseconds */
+ 	if (st->poll.units == 0)
+ 		st->poll.units = HID_USAGE_SENSOR_UNITS_MILLISECOND;
+ 	return 0;
+ 
+ }
+ 
++>>>>>>> 3e729974d676 (iio: hid-sensors: Set default unit of measure for report interval)
+ int hid_sensor_parse_common_attributes(struct hid_sensor_hub_device *hsdev,
+ 					u32 usage_id,
+ 					struct hid_sensor_common *st)
+ {
+ 
+ 
+ 	hid_sensor_get_reporting_interval(hsdev, usage_id, st);
  
  	sensor_hub_input_get_attribute_info(hsdev,
  					HID_FEATURE_REPORT, usage_id,
* Unmerged path drivers/iio/common/hid-sensors/hid-sensor-attributes.c
