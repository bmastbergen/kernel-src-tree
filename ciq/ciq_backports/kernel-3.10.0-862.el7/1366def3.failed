s390/pageattr: avoid unnecessary page table splitting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [s390] pageattr: avoid unnecessary page table splitting (Hendrik Brueckner) [1489742]
Rebuild_FUZZ: 95.05%
commit-author Heiko Carstens <heiko.carstens@de.ibm.com>
commit 1366def38b6ab574dd0dbf95e308c7d115e73796
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1366def3.failed

The kernel page table splitting code will split page tables even for
features the CPU does not support. E.g. a CPU may not support the NX
feature.
In order to avoid this, remove those bits from the flags parameter
that correlate with unsupported CPU features within __set_memory(). In
addition add an early exit if the flags parameter does not have any
bits set afterwards.

	Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 1366def38b6ab574dd0dbf95e308c7d115e73796)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/mm/pageattr.c
diff --cc arch/s390/mm/pageattr.c
index 954cfcf38d1b,fc321c5ec30e..000000000000
--- a/arch/s390/mm/pageattr.c
+++ b/arch/s390/mm/pageattr.c
@@@ -37,67 -38,262 +37,300 @@@ void __storage_key_init_range(unsigned 
  		start += PAGE_SIZE;
  	}
  }
 +#endif
  
 -#ifdef CONFIG_PROC_FS
 -atomic_long_t direct_pages_count[PG_DIRECT_MAP_MAX];
 -
 -void arch_report_meminfo(struct seq_file *m)
 +static pte_t *walk_page_table(unsigned long addr)
  {
++<<<<<<< HEAD
++=======
+ 	seq_printf(m, "DirectMap4k:    %8lu kB\n",
+ 		   atomic_long_read(&direct_pages_count[PG_DIRECT_MAP_4K]) << 2);
+ 	seq_printf(m, "DirectMap1M:    %8lu kB\n",
+ 		   atomic_long_read(&direct_pages_count[PG_DIRECT_MAP_1M]) << 10);
+ 	seq_printf(m, "DirectMap2G:    %8lu kB\n",
+ 		   atomic_long_read(&direct_pages_count[PG_DIRECT_MAP_2G]) << 21);
+ }
+ #endif /* CONFIG_PROC_FS */
+ 
+ static void pgt_set(unsigned long *old, unsigned long new, unsigned long addr,
+ 		    unsigned long dtt)
+ {
+ 	unsigned long table, mask;
+ 
+ 	mask = 0;
+ 	if (MACHINE_HAS_EDAT2) {
+ 		switch (dtt) {
+ 		case CRDTE_DTT_REGION3:
+ 			mask = ~(PTRS_PER_PUD * sizeof(pud_t) - 1);
+ 			break;
+ 		case CRDTE_DTT_SEGMENT:
+ 			mask = ~(PTRS_PER_PMD * sizeof(pmd_t) - 1);
+ 			break;
+ 		case CRDTE_DTT_PAGE:
+ 			mask = ~(PTRS_PER_PTE * sizeof(pte_t) - 1);
+ 			break;
+ 		}
+ 		table = (unsigned long)old & mask;
+ 		crdte(*old, new, table, dtt, addr, S390_lowcore.kernel_asce);
+ 	} else if (MACHINE_HAS_IDTE) {
+ 		cspg(old, *old, new);
+ 	} else {
+ 		csp((unsigned int *)old + 1, *old, new);
+ 	}
+ }
+ 
+ static int walk_pte_level(pmd_t *pmdp, unsigned long addr, unsigned long end,
+ 			  unsigned long flags)
+ {
+ 	pte_t *ptep, new;
+ 
+ 	ptep = pte_offset(pmdp, addr);
+ 	do {
+ 		new = *ptep;
+ 		if (pte_none(new))
+ 			return -EINVAL;
+ 		if (flags & SET_MEMORY_RO)
+ 			new = pte_wrprotect(new);
+ 		else if (flags & SET_MEMORY_RW)
+ 			new = pte_mkwrite(pte_mkdirty(new));
+ 		if (flags & SET_MEMORY_NX)
+ 			pte_val(new) |= _PAGE_NOEXEC;
+ 		else if (flags & SET_MEMORY_X)
+ 			pte_val(new) &= ~_PAGE_NOEXEC;
+ 		pgt_set((unsigned long *)ptep, pte_val(new), addr, CRDTE_DTT_PAGE);
+ 		ptep++;
+ 		addr += PAGE_SIZE;
+ 		cond_resched();
+ 	} while (addr < end);
+ 	return 0;
+ }
+ 
+ static int split_pmd_page(pmd_t *pmdp, unsigned long addr)
+ {
+ 	unsigned long pte_addr, prot;
+ 	pte_t *pt_dir, *ptep;
+ 	pmd_t new;
+ 	int i, ro, nx;
+ 
+ 	pt_dir = vmem_pte_alloc();
+ 	if (!pt_dir)
+ 		return -ENOMEM;
+ 	pte_addr = pmd_pfn(*pmdp) << PAGE_SHIFT;
+ 	ro = !!(pmd_val(*pmdp) & _SEGMENT_ENTRY_PROTECT);
+ 	nx = !!(pmd_val(*pmdp) & _SEGMENT_ENTRY_NOEXEC);
+ 	prot = pgprot_val(ro ? PAGE_KERNEL_RO : PAGE_KERNEL);
+ 	if (!nx)
+ 		prot &= ~_PAGE_NOEXEC;
+ 	ptep = pt_dir;
+ 	for (i = 0; i < PTRS_PER_PTE; i++) {
+ 		pte_val(*ptep) = pte_addr | prot;
+ 		pte_addr += PAGE_SIZE;
+ 		ptep++;
+ 	}
+ 	pmd_val(new) = __pa(pt_dir) | _SEGMENT_ENTRY;
+ 	pgt_set((unsigned long *)pmdp, pmd_val(new), addr, CRDTE_DTT_SEGMENT);
+ 	update_page_count(PG_DIRECT_MAP_4K, PTRS_PER_PTE);
+ 	update_page_count(PG_DIRECT_MAP_1M, -1);
+ 	return 0;
+ }
+ 
+ static void modify_pmd_page(pmd_t *pmdp, unsigned long addr,
+ 			    unsigned long flags)
+ {
+ 	pmd_t new = *pmdp;
+ 
+ 	if (flags & SET_MEMORY_RO)
+ 		new = pmd_wrprotect(new);
+ 	else if (flags & SET_MEMORY_RW)
+ 		new = pmd_mkwrite(pmd_mkdirty(new));
+ 	if (flags & SET_MEMORY_NX)
+ 		pmd_val(new) |= _SEGMENT_ENTRY_NOEXEC;
+ 	else if (flags & SET_MEMORY_X)
+ 		pmd_val(new) &= ~_SEGMENT_ENTRY_NOEXEC;
+ 	pgt_set((unsigned long *)pmdp, pmd_val(new), addr, CRDTE_DTT_SEGMENT);
+ }
+ 
+ static int walk_pmd_level(pud_t *pudp, unsigned long addr, unsigned long end,
+ 			  unsigned long flags)
+ {
+ 	unsigned long next;
+ 	pmd_t *pmdp;
+ 	int rc = 0;
+ 
+ 	pmdp = pmd_offset(pudp, addr);
+ 	do {
+ 		if (pmd_none(*pmdp))
+ 			return -EINVAL;
+ 		next = pmd_addr_end(addr, end);
+ 		if (pmd_large(*pmdp)) {
+ 			if (addr & ~PMD_MASK || addr + PMD_SIZE > next) {
+ 				rc = split_pmd_page(pmdp, addr);
+ 				if (rc)
+ 					return rc;
+ 				continue;
+ 			}
+ 			modify_pmd_page(pmdp, addr, flags);
+ 		} else {
+ 			rc = walk_pte_level(pmdp, addr, next, flags);
+ 			if (rc)
+ 				return rc;
+ 		}
+ 		pmdp++;
+ 		addr = next;
+ 		cond_resched();
+ 	} while (addr < end);
+ 	return rc;
+ }
+ 
+ static int split_pud_page(pud_t *pudp, unsigned long addr)
+ {
+ 	unsigned long pmd_addr, prot;
+ 	pmd_t *pm_dir, *pmdp;
+ 	pud_t new;
+ 	int i, ro, nx;
+ 
+ 	pm_dir = vmem_pmd_alloc();
+ 	if (!pm_dir)
+ 		return -ENOMEM;
+ 	pmd_addr = pud_pfn(*pudp) << PAGE_SHIFT;
+ 	ro = !!(pud_val(*pudp) & _REGION_ENTRY_PROTECT);
+ 	nx = !!(pud_val(*pudp) & _REGION_ENTRY_NOEXEC);
+ 	prot = pgprot_val(ro ? SEGMENT_KERNEL_RO : SEGMENT_KERNEL);
+ 	if (!nx)
+ 		prot &= ~_SEGMENT_ENTRY_NOEXEC;
+ 	pmdp = pm_dir;
+ 	for (i = 0; i < PTRS_PER_PMD; i++) {
+ 		pmd_val(*pmdp) = pmd_addr | prot;
+ 		pmd_addr += PMD_SIZE;
+ 		pmdp++;
+ 	}
+ 	pud_val(new) = __pa(pm_dir) | _REGION3_ENTRY;
+ 	pgt_set((unsigned long *)pudp, pud_val(new), addr, CRDTE_DTT_REGION3);
+ 	update_page_count(PG_DIRECT_MAP_1M, PTRS_PER_PMD);
+ 	update_page_count(PG_DIRECT_MAP_2G, -1);
+ 	return 0;
+ }
+ 
+ static void modify_pud_page(pud_t *pudp, unsigned long addr,
+ 			    unsigned long flags)
+ {
+ 	pud_t new = *pudp;
+ 
+ 	if (flags & SET_MEMORY_RO)
+ 		new = pud_wrprotect(new);
+ 	else if (flags & SET_MEMORY_RW)
+ 		new = pud_mkwrite(pud_mkdirty(new));
+ 	if (flags & SET_MEMORY_NX)
+ 		pud_val(new) |= _REGION_ENTRY_NOEXEC;
+ 	else if (flags & SET_MEMORY_X)
+ 		pud_val(new) &= ~_REGION_ENTRY_NOEXEC;
+ 	pgt_set((unsigned long *)pudp, pud_val(new), addr, CRDTE_DTT_REGION3);
+ }
+ 
+ static int walk_pud_level(pgd_t *pgd, unsigned long addr, unsigned long end,
+ 			  unsigned long flags)
+ {
+ 	unsigned long next;
+ 	pud_t *pudp;
+ 	int rc = 0;
+ 
+ 	pudp = pud_offset(pgd, addr);
+ 	do {
+ 		if (pud_none(*pudp))
+ 			return -EINVAL;
+ 		next = pud_addr_end(addr, end);
+ 		if (pud_large(*pudp)) {
+ 			if (addr & ~PUD_MASK || addr + PUD_SIZE > next) {
+ 				rc = split_pud_page(pudp, addr);
+ 				if (rc)
+ 					break;
+ 				continue;
+ 			}
+ 			modify_pud_page(pudp, addr, flags);
+ 		} else {
+ 			rc = walk_pmd_level(pudp, addr, next, flags);
+ 		}
+ 		pudp++;
+ 		addr = next;
+ 		cond_resched();
+ 	} while (addr < end && !rc);
+ 	return rc;
+ }
+ 
+ static DEFINE_MUTEX(cpa_mutex);
+ 
+ static int change_page_attr(unsigned long addr, unsigned long end,
+ 			    unsigned long flags)
+ {
+ 	unsigned long next;
+ 	int rc = -EINVAL;
++>>>>>>> 1366def38b6a (s390/pageattr: avoid unnecessary page table splitting)
  	pgd_t *pgdp;
 +	pud_t *pudp;
 +	pmd_t *pmdp;
 +	pte_t *ptep;
  
 -	if (addr == end)
 -		return 0;
 -	if (end >= MODULES_END)
 -		return -EINVAL;
 -	mutex_lock(&cpa_mutex);
  	pgdp = pgd_offset_k(addr);
 -	do {
 -		if (pgd_none(*pgdp))
 -			break;
 -		next = pgd_addr_end(addr, end);
 -		rc = walk_pud_level(pgdp, addr, next, flags);
 -		if (rc)
 +	if (pgd_none(*pgdp))
 +		return NULL;
 +	pudp = pud_offset(pgdp, addr);
 +	if (pud_none(*pudp) || pud_large(*pudp))
 +		return NULL;
 +	pmdp = pmd_offset(pudp, addr);
 +	if (pmd_none(*pmdp) || pmd_large(*pmdp))
 +		return NULL;
 +	ptep = pte_offset_kernel(pmdp, addr);
 +	if (pte_none(*ptep))
 +		return NULL;
 +	return ptep;
 +}
 +
 +static void change_page_attr(unsigned long addr, int numpages,
 +			     pte_t (*set) (pte_t))
 +{
++<<<<<<< HEAD
 +	pte_t *ptep;
 +	int i;
 +
 +	for (i = 0; i < numpages; i++) {
 +		ptep = walk_page_table(addr);
 +		if (WARN_ON_ONCE(!ptep))
  			break;
 -		cond_resched();
 -	} while (pgdp++, addr = next, addr < end && !rc);
 -	mutex_unlock(&cpa_mutex);
 -	return rc;
 +		*ptep = set(*ptep);
 +		addr += PAGE_SIZE;
 +	}
 +	__tlb_flush_kernel();
 +}
 +
 +int set_memory_ro(unsigned long addr, int numpages)
 +{
 +	change_page_attr(addr, numpages, pte_wrprotect);
 +	return 0;
  }
  
 -int __set_memory(unsigned long addr, int numpages, unsigned long flags)
 +int set_memory_rw(unsigned long addr, int numpages)
  {
 +	change_page_attr(addr, numpages, pte_mkwrite);
 +	return 0;
 +}
 +
 +/* not possible */
 +int set_memory_nx(unsigned long addr, int numpages)
 +{
 +	return 0;
 +}
 +
 +int set_memory_x(unsigned long addr, int numpages)
 +{
 +	return 0;
++=======
+ 	if (!MACHINE_HAS_NX)
+ 		flags &= ~(SET_MEMORY_NX | SET_MEMORY_X);
+ 	if (!flags)
+ 		return 0;
+ 	addr &= PAGE_MASK;
+ 	return change_page_attr(addr, addr + numpages * PAGE_SIZE, flags);
++>>>>>>> 1366def38b6a (s390/pageattr: avoid unnecessary page table splitting)
  }
  
  #ifdef CONFIG_DEBUG_PAGEALLOC
* Unmerged path arch/s390/mm/pageattr.c
