Using BUG_ON() as an assert() is _never_ acceptable

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Linus Torvalds <torvalds@linux-foundation.org>
commit 21f54ddae449f4bdd9f1498124901d67202243d9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/21f54dda.failed

That just generally kills the machine, and makes debugging only much
harder, since the traces may long be gone.

Debugging by assert() is a disease.  Don't do it.  If you can continue,
you're much better off doing so with a live machine where you have a
much higher chance that the report actually makes it to the system logs,
rather than result in a machine that is just completely dead.

The only valid situation for BUG_ON() is when continuing is not an
option, because there is massive corruption.  But if you are just
verifying that something is true, you warn about your broken assumptions
(preferably just once), and limp on.

Fixes: 22f2ac51b6d6 ("mm: workingset: fix crash in shadow node shrinker caused by replace_page_cache_page()")
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Miklos Szeredi <miklos@szeredi.hu>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 21f54ddae449f4bdd9f1498124901d67202243d9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/swap.h
diff --cc include/linux/swap.h
index 61d41d507b58,e1d761463243..000000000000
--- a/include/linux/swap.h
+++ b/include/linux/swap.h
@@@ -258,6 -257,7 +258,10 @@@ static inline void workingset_node_page
  
  static inline void workingset_node_pages_dec(struct radix_tree_node *node)
  {
++<<<<<<< HEAD
++=======
+ 	VM_WARN_ON_ONCE(!workingset_node_pages(node));
++>>>>>>> 21f54ddae449 (Using BUG_ON() as an assert() is _never_ acceptable)
  	node->count--;
  }
  
@@@ -273,6 -273,7 +277,10 @@@ static inline void workingset_node_shad
  
  static inline void workingset_node_shadows_dec(struct radix_tree_node *node)
  {
++<<<<<<< HEAD
++=======
+ 	VM_WARN_ON_ONCE(!workingset_node_shadows(node));
++>>>>>>> 21f54ddae449 (Using BUG_ON() as an assert() is _never_ acceptable)
  	node->count -= 1U << RADIX_TREE_COUNT_SHIFT;
  }
  
* Unmerged path include/linux/swap.h
