x86: Use new cache mode type in setting page attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] Use new cache mode type in setting page attributes (Suravee Suthikulpanit) [1361287]
Rebuild_FUZZ: 95.24%
commit-author Juergen Gross <jgross@suse.com>
commit c06814d8419a74528500f85faf5fc01f67f8e7e6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c06814d8.failed

Instead of directly using the cache mode bits in the pte switch to
using the cache mode type in the functions for modifying page
attributes.

Based-on-patch-by: Stefan Bader <stefan.bader@canonical.com>
	Signed-off-by: Juergen Gross <jgross@suse.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: stefan.bader@canonical.com
	Cc: xen-devel@lists.xensource.com
	Cc: konrad.wilk@oracle.com
	Cc: ville.syrjala@linux.intel.com
	Cc: david.vrabel@citrix.com
	Cc: jbeulich@suse.com
	Cc: toshi.kani@hp.com
	Cc: plagnioj@jcrosoft.com
	Cc: tomi.valkeinen@ti.com
	Cc: bhelgaas@google.com
Link: http://lkml.kernel.org/r/1415019724-4317-12-git-send-email-jgross@suse.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit c06814d8419a74528500f85faf5fc01f67f8e7e6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/pageattr.c
diff --cc arch/x86/mm/pageattr.c
index 3fe832369c84,9f7e1b445e66..000000000000
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@@ -1310,12 -1304,6 +1310,15 @@@ static int __change_page_attr_set_clr(s
  	return 0;
  }
  
++<<<<<<< HEAD
 +static inline int cache_attr(pgprot_t attr)
 +{
 +	return pgprot_val(attr) &
 +		(_PAGE_PAT | _PAGE_PAT_LARGE | _PAGE_PWT | _PAGE_PCD);
 +}
 +
++=======
++>>>>>>> c06814d8419a (x86: Use new cache mode type in setting page attributes)
  static int change_page_attr_set_clr(unsigned long *addr, int numpages,
  				    pgprot_t mask_set, pgprot_t mask_clr,
  				    int force_split, int in_flag,
@@@ -1396,13 -1384,13 +1399,13 @@@
  	 * No need to flush, when we did not set any of the caching
  	 * attributes:
  	 */
- 	cache = cache_attr(mask_set);
+ 	cache = !!pgprot2cachemode(mask_set);
  
  	/*
 -	 * On success we use CLFLUSH, when the CPU supports it to
 -	 * avoid the WBINVD. If the CPU does not support it and in the
 +	 * On success we use clflush, when the CPU supports it to
 +	 * avoid the wbindv. If the CPU does not support it and in the
  	 * error case we fall back to cpa_flush_all (which uses
 -	 * WBINVD):
 +	 * wbindv):
  	 */
  	if (!ret && cpu_has_clflush) {
  		if (cpa.flags & (CPA_PAGES_ARRAY | CPA_ARRAY)) {
* Unmerged path arch/x86/mm/pageattr.c
