NFSv4: enhance nfs4_copy_lock_stateid to use a flock stateid if there is one

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author NeilBrown <neilb@suse.com>
commit 8d42443166a5d3800756db98498a4961a5ea5de7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8d424431.failed

A process can have two possible lock owner for a given open file:
a per-process Posix lock owner and a per-open-file flock owner
Use both of these when searching for a suitable stateid to use.

With this patch, READ/WRITE requests will use the correct stateid
if a flock lock is active.

	Signed-off-by: NeilBrown <neilb@suse.com>
	Reviewed-by: Jeff Layton <jlayton@redhat.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 8d42443166a5d3800756db98498a4961a5ea5de7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4state.c
diff --cc fs/nfs/nfs4state.c
index 9ae72244a959,4f1de9be10c6..000000000000
--- a/fs/nfs/nfs4state.c
+++ b/fs/nfs/nfs4state.c
@@@ -936,22 -941,23 +938,28 @@@ int nfs4_set_lock_state(struct nfs4_sta
  
  static int nfs4_copy_lock_stateid(nfs4_stateid *dst,
  		struct nfs4_state *state,
 -		const struct nfs_lock_context *l_ctx)
 +		const struct nfs_lockowner *lockowner)
  {
  	struct nfs4_lock_state *lsp;
- 	fl_owner_t fl_owner;
+ 	fl_owner_t fl_owner, fl_flock_owner;
  	int ret = -ENOENT;
  
 -	if (l_ctx == NULL)
 +
 +	if (lockowner == NULL)
  		goto out;
  
  	if (test_bit(LK_STATE_IN_USE, &state->flags) == 0)
  		goto out;
  
++<<<<<<< HEAD
 +	fl_owner = lockowner->l_owner;
++=======
+ 	fl_owner = l_ctx->lockowner.l_owner;
+ 	fl_flock_owner = l_ctx->open_context->flock_owner;
+ 
++>>>>>>> 8d42443166a5 (NFSv4: enhance nfs4_copy_lock_stateid to use a flock stateid if there is one)
  	spin_lock(&state->state_lock);
- 	lsp = __nfs4_find_lock_state(state, fl_owner);
+ 	lsp = __nfs4_find_lock_state(state, fl_owner, fl_flock_owner);
  	if (lsp && test_bit(NFS_LOCK_LOST, &lsp->ls_flags))
  		ret = -EIO;
  	else if (lsp != NULL && test_bit(NFS_LOCK_INITIALIZED, &lsp->ls_flags) != 0) {
* Unmerged path fs/nfs/nfs4state.c
