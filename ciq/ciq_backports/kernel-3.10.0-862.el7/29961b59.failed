x86/mm: Remove flush_tlb() and flush_tlb_current_task()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] mm: Remove flush_tlb() and flush_tlb_current_task() (Suravee Suthikulpanit) [1361287]
Rebuild_FUZZ: 96.23%
commit-author Andy Lutomirski <luto@kernel.org>
commit 29961b59a51f8c6838a26a45e871a7ed6771809b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/29961b59.failed

I was trying to figure out what how flush_tlb_current_task() would
possibly work correctly if current->mm != current->active_mm, but I
realized I could spare myself the effort: it has no callers except
the unused flush_tlb() macro.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Michal Hocko <mhocko@suse.com>
	Cc: Nadav Amit <namit@vmware.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/e52d64c11690f85e9f1d69d7b48cc2269cd2e94b.1492844372.git.luto@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 29961b59a51f8c6838a26a45e871a7ed6771809b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/tlbflush.h
#	arch/x86/mm/tlb.c
diff --cc arch/x86/include/asm/tlbflush.h
index 3e41fd3dc902,6ed9ea469b48..000000000000
--- a/arch/x86/include/asm/tlbflush.h
+++ b/arch/x86/include/asm/tlbflush.h
@@@ -84,9 -228,28 +83,34 @@@ static inline void __flush_tlb_one(unsi
  
  #ifndef CONFIG_SMP
  
++<<<<<<< HEAD
 +#define flush_tlb() __flush_tlb()
 +#define flush_tlb_all() __flush_tlb_all()
 +#define local_flush_tlb() __flush_tlb()
++=======
+ /* "_up" is for UniProcessor.
+  *
+  * This is a helper for other header functions.  *Not* intended to be called
+  * directly.  All global TLB flushes need to either call this, or to bump the
+  * vm statistics themselves.
+  */
+ static inline void __flush_tlb_up(void)
+ {
+ 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
+ 	__flush_tlb();
+ }
+ 
+ static inline void flush_tlb_all(void)
+ {
+ 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
+ 	__flush_tlb_all();
+ }
+ 
+ static inline void local_flush_tlb(void)
+ {
+ 	__flush_tlb_up();
+ }
++>>>>>>> 29961b59a51f (x86/mm: Remove flush_tlb() and flush_tlb_current_task())
  
  static inline void flush_tlb_mm(struct mm_struct *mm)
  {
diff --cc arch/x86/mm/tlb.c
index 3dc284b799aa,92ec37f517ab..000000000000
--- a/arch/x86/mm/tlb.c
+++ b/arch/x86/mm/tlb.c
@@@ -143,18 -289,17 +143,32 @@@ void native_flush_tlb_others(const stru
  	smp_call_function_many(cpumask, flush_tlb_func, &info, 1);
  }
  
++<<<<<<< HEAD
 +void flush_tlb_current_task(void)
 +{
 +	struct mm_struct *mm = current->mm;
 +
 +	preempt_disable();
 +
 +	/* This is an implicit full barrier that synchronizes with switch_mm. */
 +	local_flush_tlb();
 +	if (cpumask_any_but(mm_cpumask(mm), smp_processor_id()) < nr_cpu_ids)
 +		flush_tlb_others(mm_cpumask(mm), mm, 0UL, TLB_FLUSH_ALL);
 +	preempt_enable();
 +}
++=======
+ /*
+  * See Documentation/x86/tlb.txt for details.  We choose 33
+  * because it is large enough to cover the vast majority (at
+  * least 95%) of allocations, and is small enough that we are
+  * confident it will not cause too much overhead.  Each single
+  * flush is about 100 ns, so this caps the maximum overhead at
+  * _about_ 3,000 ns.
+  *
+  * This is in units of pages.
+  */
+ static unsigned long tlb_single_page_flush_ceiling __read_mostly = 33;
++>>>>>>> 29961b59a51f (x86/mm: Remove flush_tlb() and flush_tlb_current_task())
  
  void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
  				unsigned long end, unsigned long vmflag)
* Unmerged path arch/x86/include/asm/tlbflush.h
* Unmerged path arch/x86/mm/tlb.c
