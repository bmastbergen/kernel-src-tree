Remove NULL ptr check before kfree.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] lpfc: Remove NULL ptr check before kfree (Dick Kennedy) [1385844 1461977 1387768]
Rebuild_FUZZ: 90.67%
commit-author James Smart <jsmart2021@gmail.com>
commit eafe89f556ef1fe1b07ab8c1b4ce453ca1da1e41
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/eafe89f5.failed

The check for NULL ptr is not necessary, kfree will check it.

Removing NULL ptr check.

	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <james.smart@broadcom.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
(cherry picked from commit eafe89f556ef1fe1b07ab8c1b4ce453ca1da1e41)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_debugfs.c
diff --cc drivers/scsi/lpfc/lpfc_debugfs.c
index e6cf568b0f02,76857e2db509..000000000000
--- a/drivers/scsi/lpfc/lpfc_debugfs.c
+++ b/drivers/scsi/lpfc/lpfc_debugfs.c
@@@ -4512,92 -5700,86 +4512,128 @@@ lpfc_debugfs_terminate(struct lpfc_vpor
  #ifdef CONFIG_SCSI_LPFC_DEBUG_FS
  	struct lpfc_hba   *phba = vport->phba;
  
++<<<<<<< HEAD
 +	if (vport->disc_trc) {
 +		kfree(vport->disc_trc);
 +		vport->disc_trc = NULL;
 +	}
 +	if (vport->debug_disc_trc) {
 +		debugfs_remove(vport->debug_disc_trc); /* discovery_trace */
 +		vport->debug_disc_trc = NULL;
 +	}
 +	if (vport->debug_nodelist) {
 +		debugfs_remove(vport->debug_nodelist); /* nodelist */
 +		vport->debug_nodelist = NULL;
 +	}
++=======
+ 	kfree(vport->disc_trc);
+ 	vport->disc_trc = NULL;
+ 
+ 	debugfs_remove(vport->debug_disc_trc); /* discovery_trace */
+ 	vport->debug_disc_trc = NULL;
+ 
+ 	debugfs_remove(vport->debug_nodelist); /* nodelist */
+ 	vport->debug_nodelist = NULL;
+ 
+ 	debugfs_remove(vport->debug_nvmestat); /* nvmestat */
+ 	vport->debug_nvmestat = NULL;
+ 
+ 	debugfs_remove(vport->debug_nvmektime); /* nvmektime */
+ 	vport->debug_nvmektime = NULL;
+ 
+ 	debugfs_remove(vport->debug_cpucheck); /* cpucheck */
+ 	vport->debug_cpucheck = NULL;
+ 
++>>>>>>> eafe89f556ef (Remove NULL ptr check before kfree.)
  	if (vport->vport_debugfs_root) {
  		debugfs_remove(vport->vport_debugfs_root); /* vportX */
  		vport->vport_debugfs_root = NULL;
  		atomic_dec(&phba->debugfs_vport_count);
  	}
 -
  	if (atomic_read(&phba->debugfs_vport_count) == 0) {
  
 -		debugfs_remove(phba->debug_hbqinfo); /* hbqinfo */
 -		phba->debug_hbqinfo = NULL;
 -
 -		debugfs_remove(phba->debug_dumpHBASlim); /* HBASlim */
 -		phba->debug_dumpHBASlim = NULL;
 -
 -		debugfs_remove(phba->debug_dumpHostSlim); /* HostSlim */
 -		phba->debug_dumpHostSlim = NULL;
 -
 -		debugfs_remove(phba->debug_dumpData); /* dumpData */
 -		phba->debug_dumpData = NULL;
 -
 -		debugfs_remove(phba->debug_dumpDif); /* dumpDif */
 -		phba->debug_dumpDif = NULL;
 -
 -		debugfs_remove(phba->debug_InjErrLBA); /* InjErrLBA */
 -		phba->debug_InjErrLBA = NULL;
 -
 -		debugfs_remove(phba->debug_InjErrNPortID);
 -		phba->debug_InjErrNPortID = NULL;
 -
 -		debugfs_remove(phba->debug_InjErrWWPN); /* InjErrWWPN */
 -		phba->debug_InjErrWWPN = NULL;
 -
 -		debugfs_remove(phba->debug_writeGuard); /* writeGuard */
 -		phba->debug_writeGuard = NULL;
 -
 -		debugfs_remove(phba->debug_writeApp); /* writeApp */
 -		phba->debug_writeApp = NULL;
 -
 -		debugfs_remove(phba->debug_writeRef); /* writeRef */
 -		phba->debug_writeRef = NULL;
 -
 -		debugfs_remove(phba->debug_readGuard); /* readGuard */
 -		phba->debug_readGuard = NULL;
 -
 -		debugfs_remove(phba->debug_readApp); /* readApp */
 -		phba->debug_readApp = NULL;
 +		if (phba->debug_hbqinfo) {
 +			debugfs_remove(phba->debug_hbqinfo); /* hbqinfo */
 +			phba->debug_hbqinfo = NULL;
 +		}
 +		if (phba->debug_dumpHBASlim) {
 +			debugfs_remove(phba->debug_dumpHBASlim); /* HBASlim */
 +			phba->debug_dumpHBASlim = NULL;
 +		}
 +		if (phba->debug_dumpHostSlim) {
 +			debugfs_remove(phba->debug_dumpHostSlim); /* HostSlim */
 +			phba->debug_dumpHostSlim = NULL;
 +		}
 +		if (phba->debug_dumpData) {
 +			debugfs_remove(phba->debug_dumpData); /* dumpData */
 +			phba->debug_dumpData = NULL;
 +		}
  
 -		debugfs_remove(phba->debug_readRef); /* readRef */
 -		phba->debug_readRef = NULL;
 +		if (phba->debug_dumpDif) {
 +			debugfs_remove(phba->debug_dumpDif); /* dumpDif */
 +			phba->debug_dumpDif = NULL;
 +		}
 +		if (phba->debug_InjErrLBA) {
 +			debugfs_remove(phba->debug_InjErrLBA); /* InjErrLBA */
 +			phba->debug_InjErrLBA = NULL;
 +		}
 +		if (phba->debug_InjErrNPortID) {	 /* InjErrNPortID */
 +			debugfs_remove(phba->debug_InjErrNPortID);
 +			phba->debug_InjErrNPortID = NULL;
 +		}
 +		if (phba->debug_InjErrWWPN) {
 +			debugfs_remove(phba->debug_InjErrWWPN); /* InjErrWWPN */
 +			phba->debug_InjErrWWPN = NULL;
 +		}
 +		if (phba->debug_writeGuard) {
 +			debugfs_remove(phba->debug_writeGuard); /* writeGuard */
 +			phba->debug_writeGuard = NULL;
 +		}
 +		if (phba->debug_writeApp) {
 +			debugfs_remove(phba->debug_writeApp); /* writeApp */
 +			phba->debug_writeApp = NULL;
 +		}
 +		if (phba->debug_writeRef) {
 +			debugfs_remove(phba->debug_writeRef); /* writeRef */
 +			phba->debug_writeRef = NULL;
 +		}
 +		if (phba->debug_readGuard) {
 +			debugfs_remove(phba->debug_readGuard); /* readGuard */
 +			phba->debug_readGuard = NULL;
 +		}
 +		if (phba->debug_readApp) {
 +			debugfs_remove(phba->debug_readApp); /* readApp */
 +			phba->debug_readApp = NULL;
 +		}
 +		if (phba->debug_readRef) {
 +			debugfs_remove(phba->debug_readRef); /* readRef */
 +			phba->debug_readRef = NULL;
 +		}
  
++<<<<<<< HEAD
 +		if (phba->slow_ring_trc) {
 +			kfree(phba->slow_ring_trc);
 +			phba->slow_ring_trc = NULL;
 +		}
 +		if (phba->debug_slow_ring_trc) {
 +			/* slow_ring_trace */
 +			debugfs_remove(phba->debug_slow_ring_trc);
 +			phba->debug_slow_ring_trc = NULL;
 +		}
++=======
+ 		kfree(phba->slow_ring_trc);
+ 		phba->slow_ring_trc = NULL;
+ 
+ 		/* slow_ring_trace */
+ 		debugfs_remove(phba->debug_slow_ring_trc);
+ 		phba->debug_slow_ring_trc = NULL;
+ 
+ 		debugfs_remove(phba->debug_nvmeio_trc);
+ 		phba->debug_nvmeio_trc = NULL;
+ 
+ 		kfree(phba->nvmeio_trc);
+ 		phba->nvmeio_trc = NULL;
++>>>>>>> eafe89f556ef (Remove NULL ptr check before kfree.)
  
  		/*
  		 * iDiag release
* Unmerged path drivers/scsi/lpfc/lpfc_debugfs.c
