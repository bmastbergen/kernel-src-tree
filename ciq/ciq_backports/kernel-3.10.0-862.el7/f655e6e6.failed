x86/cpu/AMD: Make the microcode level available earlier in the boot

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] cpu/amd: Make the microcode level available earlier in the boot (Suravee Suthikulpanit) [1361287]
Rebuild_FUZZ: 96.92%
commit-author Tom Lendacky <thomas.lendacky@amd.com>
commit f655e6e6b992a2fb0d0334db2620607b98df39e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f655e6e6.failed

Move the setting of the cpuinfo_x86.microcode field from amd_init() to
early_amd_init() so that it is available earlier in the boot process. This
avoids having to read MSR_AMD64_PATCH_LEVEL directly during early boot.

	Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Borislav Petkov <bp@suse.de>
	Cc: Alexander Potapenko <glider@google.com>
	Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brijesh Singh <brijesh.singh@amd.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: Dmitry Vyukov <dvyukov@google.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Cc: Larry Woodman <lwoodman@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Matt Fleming <matt@codeblueprint.co.uk>
	Cc: Michael S. Tsirkin <mst@redhat.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Radim Krčmář <rkrcmar@redhat.com>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Toshimitsu Kani <toshi.kani@hpe.com>
	Cc: kasan-dev@googlegroups.com
	Cc: kvm@vger.kernel.org
	Cc: linux-arch@vger.kernel.org
	Cc: linux-doc@vger.kernel.org
	Cc: linux-efi@vger.kernel.org
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/7b7525fa12593dac5f4b01fcc25c95f97e93862f.1500319216.git.thomas.lendacky@amd.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f655e6e6b992a2fb0d0334db2620607b98df39e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/amd.c
diff --cc arch/x86/kernel/cpu/amd.c
index 485733876ab9,f22fd4ea8858..000000000000
--- a/arch/x86/kernel/cpu/amd.c
+++ b/arch/x86/kernel/cpu/amd.c
@@@ -574,13 -672,88 +578,31 @@@ static void init_amd(struct cpuinfo_x8
  	 * Errata 63 for SH-B3 steppings
  	 * Errata 122 for all steppings (F+ have it disabled by default)
  	 */
 -	msr_set_bit(MSR_K7_HWCR, 6);
 -#endif
 -	set_cpu_bug(c, X86_BUG_SWAPGS_FENCE);
 -}
 -
 -static void init_amd_gh(struct cpuinfo_x86 *c)
 -{
 -#ifdef CONFIG_X86_64
 -	/* do this for boot cpu */
 -	if (c == &boot_cpu_data)
 -		check_enable_amd_mmconf_dmi();
 -
 -	fam10h_check_enable_mmcfg();
 +	if (c->x86 == 0xf) {
 +		rdmsrl(MSR_K7_HWCR, value);
 +		value |= 1 << 6;
 +		wrmsrl(MSR_K7_HWCR, value);
 +	}
++<<<<<<< HEAD
  #endif
  
 -	/*
 -	 * Disable GART TLB Walk Errors on Fam10h. We do this here because this
 -	 * is always needed when GART is enabled, even in a kernel which has no
 -	 * MCE support built in. BIOS should disable GartTlbWlk Errors already.
 -	 * If it doesn't, we do it here as suggested by the BKDG.
 -	 *
 -	 * Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=33012
 -	 */
 -	msr_set_bit(MSR_AMD64_MCx_MASK(4), 10);
 -
 -	/*
 -	 * On family 10h BIOS may not have properly enabled WC+ support, causing
 -	 * it to be converted to CD memtype. This may result in performance
 -	 * degradation for certain nested-paging guests. Prevent this conversion
 -	 * by clearing bit 24 in MSR_AMD64_BU_CFG2.
 -	 *
 -	 * NOTE: we want to use the _safe accessors so as not to #GP kvm
 -	 * guests on older kvm hosts.
 -	 */
 -	msr_clear_bit(MSR_AMD64_BU_CFG2, 24);
 -
 -	if (cpu_has_amd_erratum(c, amd_erratum_383))
 -		set_cpu_bug(c, X86_BUG_AMD_TLB_MMATCH);
 -}
 -
 -#define MSR_AMD64_DE_CFG	0xC0011029
 -
 -static void init_amd_ln(struct cpuinfo_x86 *c)
 -{
 -	/*
 -	 * Apply erratum 665 fix unconditionally so machines without a BIOS
 -	 * fix work.
 -	 */
 -	msr_set_bit(MSR_AMD64_DE_CFG, 31);
 -}
 -
 -static void init_amd_bd(struct cpuinfo_x86 *c)
 -{
 -	u64 value;
 -
 -	/* re-enable TopologyExtensions if switched off by BIOS */
 -	if ((c->x86_model >= 0x10) && (c->x86_model <= 0x6f) &&
 -	    !cpu_has(c, X86_FEATURE_TOPOEXT)) {
 -
 -		if (msr_set_bit(0xc0011005, 54) > 0) {
 -			rdmsrl(0xc0011005, value);
 -			if (value & BIT_64(54)) {
 -				set_cpu_cap(c, X86_FEATURE_TOPOEXT);
 -				pr_info_once(FW_INFO "CPU: Re-enabling disabled Topology Extensions Support.\n");
 -			}
 -		}
 -	}
++=======
+ 
+ 	/*
+ 	 * The way access filter has a performance penalty on some workloads.
+ 	 * Disable it on the affected CPUs.
+ 	 */
+ 	if ((c->x86_model >= 0x02) && (c->x86_model < 0x20)) {
+ 		if (!rdmsrl_safe(MSR_F15H_IC_CFG, &value) && !(value & 0x1E)) {
+ 			value |= 0x1E;
+ 			wrmsrl_safe(MSR_F15H_IC_CFG, value);
+ 		}
+ 	}
+ }
+ 
+ static void init_amd(struct cpuinfo_x86 *c)
+ {
++>>>>>>> f655e6e6b992 (x86/cpu/AMD: Make the microcode level available earlier in the boot)
  	early_init_amd(c);
  
  	/*
@@@ -742,48 -815,14 +764,59 @@@
  	if (c->x86 > 0x11)
  		set_cpu_cap(c, X86_FEATURE_ARAT);
  
++<<<<<<< HEAD
 +	if (c->x86 == 0x10) {
 +		/*
 +		 * Disable GART TLB Walk Errors on Fam10h. We do this here
 +		 * because this is always needed when GART is enabled, even in a
 +		 * kernel which has no MCE support built in.
 +		 * BIOS should disable GartTlbWlk Errors themself. If
 +		 * it doesn't do it here as suggested by the BKDG.
 +		 *
 +		 * Fixes: https://bugzilla.kernel.org/show_bug.cgi?id=33012
 +		 */
 +		u64 mask;
 +		int err;
 +
 +		err = rdmsrl_safe(MSR_AMD64_MCx_MASK(4), &mask);
 +		if (err == 0) {
 +			mask |= (1 << 10);
 +			wrmsrl_safe(MSR_AMD64_MCx_MASK(4), mask);
 +		}
 +
 +		/*
 +		 * On family 10h BIOS may not have properly enabled WC+ support,
 +		 * causing it to be converted to CD memtype. This may result in
 +		 * performance degradation for certain nested-paging guests.
 +		 * Prevent this conversion by clearing bit 24 in
 +		 * MSR_AMD64_BU_CFG2.
 +		 *
 +		 * NOTE: we want to use the _safe accessors so as not to #GP kvm
 +		 * guests on older kvm hosts.
 +		 */
 +
 +		rdmsrl_safe(MSR_AMD64_BU_CFG2, &value);
 +		value &= ~(1ULL << 24);
 +		wrmsrl_safe(MSR_AMD64_BU_CFG2, value);
 +
 +		if (cpu_has_amd_erratum(c, amd_erratum_383))
 +			set_cpu_bug(c, X86_BUG_AMD_TLB_MMATCH);
 +	}
 +
 +	if (cpu_has_amd_erratum(c, amd_erratum_400))
 +		set_cpu_bug(c, X86_BUG_AMD_APIC_C1E);
 +
 +	rdmsr_safe(MSR_AMD64_PATCH_LEVEL, &c->microcode, &dummy);
++=======
+ 	/* 3DNow or LM implies PREFETCHW */
+ 	if (!cpu_has(c, X86_FEATURE_3DNOWPREFETCH))
+ 		if (cpu_has(c, X86_FEATURE_3DNOW) || cpu_has(c, X86_FEATURE_LM))
+ 			set_cpu_cap(c, X86_FEATURE_3DNOWPREFETCH);
+ 
+ 	/* AMD CPUs don't reset SS attributes on SYSRET, Xen does. */
+ 	if (!cpu_has(c, X86_FEATURE_XENPV))
+ 		set_cpu_bug(c, X86_BUG_SYSRET_SS_ATTRS);
++>>>>>>> f655e6e6b992 (x86/cpu/AMD: Make the microcode level available earlier in the boot)
  }
  
  #ifdef CONFIG_X86_32
* Unmerged path arch/x86/kernel/cpu/amd.c
