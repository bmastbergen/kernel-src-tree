sysfs: fix attribute_group bin file path on removal

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Robert ABEL <rabel@cit-ec.uni-bielefeld.de>
commit 9f70a40128a4ddceffb6d21dd490f6ab4bc34c97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9f70a401.failed

Cody Schafer already fixed binary file creation for attribute groups, see [1].
This patch makes the appropriate changes for binary file removal
of attribute groups.
[1]: http://lkml.org/lkml/2014/2/27/832

	Signed-off-by: Robert ABEL <rabel@cit-ec.uni-bielefeld.de>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 9f70a40128a4ddceffb6d21dd490f6ab4bc34c97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/group.c
diff --cc fs/sysfs/group.c
index ca0677b6e908,7d2a860ba788..000000000000
--- a/fs/sysfs/group.c
+++ b/fs/sysfs/group.c
@@@ -18,7 -18,7 +18,11 @@@
  #include "sysfs.h"
  
  
++<<<<<<< HEAD
 +static void remove_files(struct sysfs_dirent *dir_sd, struct kobject *kobj,
++=======
+ static void remove_files(struct kernfs_node *parent,
++>>>>>>> 9f70a40128a4 (sysfs: fix attribute_group bin file path on removal)
  			 const struct attribute_group *grp)
  {
  	struct attribute *const *attr;
@@@ -26,13 -26,13 +30,13 @@@
  
  	if (grp->attrs)
  		for (attr = grp->attrs; *attr; attr++)
 -			kernfs_remove_by_name(parent, (*attr)->name);
 +			sysfs_hash_and_remove(dir_sd, NULL, (*attr)->name);
  	if (grp->bin_attrs)
  		for (bin_attr = grp->bin_attrs; *bin_attr; bin_attr++)
- 			sysfs_remove_bin_file(kobj, *bin_attr);
+ 			kernfs_remove_by_name(parent, (*bin_attr)->attr.name);
  }
  
 -static int create_files(struct kernfs_node *parent, struct kobject *kobj,
 +static int create_files(struct sysfs_dirent *dir_sd, struct kobject *kobj,
  			const struct attribute_group *grp, int update)
  {
  	struct attribute *const *attr;
@@@ -63,7 -62,7 +67,11 @@@
  				break;
  		}
  		if (error) {
++<<<<<<< HEAD
 +			remove_files(dir_sd, kobj, grp);
++=======
+ 			remove_files(parent, grp);
++>>>>>>> 9f70a40128a4 (sysfs: fix attribute_group bin file path on removal)
  			goto exit;
  		}
  	}
@@@ -80,7 -79,7 +88,11 @@@
  				break;
  		}
  		if (error)
++<<<<<<< HEAD
 +			remove_files(dir_sd, kobj, grp);
++=======
+ 			remove_files(parent, grp);
++>>>>>>> 9f70a40128a4 (sysfs: fix attribute_group bin file path on removal)
  	}
  exit:
  	return error;
@@@ -216,14 -219,16 +228,18 @@@ void sysfs_remove_group(struct kobject 
  			     grp, kobject_name(kobj));
  			return;
  		}
 -	} else {
 -		kn = parent;
 -		kernfs_get(kn);
 -	}
 +	} else
 +		sd = sysfs_get(dir_sd);
  
++<<<<<<< HEAD
 +	remove_files(sd, kobj, grp);
++=======
+ 	remove_files(kn, grp);
++>>>>>>> 9f70a40128a4 (sysfs: fix attribute_group bin file path on removal)
  	if (grp->name)
 -		kernfs_remove(kn);
 +		sysfs_remove_subdir(sd);
  
 -	kernfs_put(kn);
 +	sysfs_put(sd);
  }
  EXPORT_SYMBOL_GPL(sysfs_remove_group);
  
* Unmerged path fs/sysfs/group.c
