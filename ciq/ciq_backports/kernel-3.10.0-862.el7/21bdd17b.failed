module: allow multiple calls to MODULE_DEVICE_TABLE() per module

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Tom Gundersen <teg@jklm.no>
commit 21bdd17b21b45ea48e06e23918d681afbe0622e9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/21bdd17b.failed

Commit 78551277e4df5: "Input: i8042 - add PNP modaliases" had a bug, where the
second call to MODULE_DEVICE_TABLE() overrode the first resulting in not all
the modaliases being exposed.

This fixes the problem by including the name of the device_id table in the
__mod_*_device_table alias, allowing us to export several device_id tables
per module.

	Suggested-by: Kay Sievers <kay@vrfy.org>
	Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
	Signed-off-by: Tom Gundersen <teg@jklm.no>
	Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
(cherry picked from commit 21bdd17b21b45ea48e06e23918d681afbe0622e9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/module.h
diff --cc include/linux/module.h
index cb24355b2d5e,ad18f6006f86..000000000000
--- a/include/linux/module.h
+++ b/include/linux/module.h
@@@ -141,23 -141,25 +141,28 @@@ extern const struct gtype##_id __mod_##
  /* What your module does. */
  #define MODULE_DESCRIPTION(_description) MODULE_INFO(description, _description)
  
++<<<<<<< HEAD
 +#define MODULE_DEVICE_TABLE(type,name)		\
 +  MODULE_GENERIC_TABLE(type##_device,name)
++=======
+ #define MODULE_DEVICE_TABLE(type, name)		\
+   MODULE_GENERIC_TABLE(type##__##name##_device, name)
++>>>>>>> 21bdd17b21b4 (module: allow multiple calls to MODULE_DEVICE_TABLE() per module)
  
  /* Version of form [<epoch>:]<version>[-<extra-version>].
 - * Or for CVS/RCS ID version, everything but the number is stripped.
 - * <epoch>: A (small) unsigned integer which allows you to start versions
 - * anew. If not mentioned, it's zero.  eg. "2:1.0" is after
 - * "1:2.0".
 -
 - * <version>: The <version> may contain only alphanumerics and the
 - * character `.'.  Ordered by numeric sort for numeric parts,
 - * ascii sort for ascii parts (as per RPM or DEB algorithm).
 -
 - * <extraversion>: Like <version>, but inserted for local
 - * customizations, eg "rh3" or "rusty1".
 -
 - * Using this automatically adds a checksum of the .c files and the
 - * local headers in "srcversion".
 - */
 +   Or for CVS/RCS ID version, everything but the number is stripped.
 +  <epoch>: A (small) unsigned integer which allows you to start versions
 +           anew. If not mentioned, it's zero.  eg. "2:1.0" is after
 +	   "1:2.0".
 +  <version>: The <version> may contain only alphanumerics and the
 +           character `.'.  Ordered by numeric sort for numeric parts,
 +	   ascii sort for ascii parts (as per RPM or DEB algorithm).
 +  <extraversion>: Like <version>, but inserted for local
 +           customizations, eg "rh3" or "rusty1".
 +
 +  Using this automatically adds a checksum of the .c files and the
 +  local headers in "srcversion".
 +*/
  
  #if defined(MODULE) || !defined(CONFIG_SYSFS)
  #define MODULE_VERSION(_version) MODULE_INFO(version, _version)
* Unmerged path include/linux/module.h
diff --git a/scripts/mod/file2alias.c b/scripts/mod/file2alias.c
index 829c0ba89670..01249c295cc5 100644
--- a/scripts/mod/file2alias.c
+++ b/scripts/mod/file2alias.c
@@ -45,7 +45,7 @@ typedef struct {
 
 /* This array collects all instances that use the generic do_table */
 struct devtable {
-	const char *device_id; /* name of table, __mod_<name>_device_table. */
+	const char *device_id; /* name of table, __mod_<name>__*_device_table. */
 	unsigned long id_size;
 	void *function;
 };
@@ -158,7 +158,8 @@ static void device_id_check(const char *modname, const char *device_id,
 
 	if (size % id_size || size < id_size) {
 		fatal("%s: sizeof(struct %s_device_id)=%lu is not a modulo "
-		      "of the size of section __mod_%s_device_table=%lu.\n"
+		      "of the size of "
+		      "section __mod_%s__<identifier>_device_table=%lu.\n"
 		      "Fix definition of struct %s_device_id "
 		      "in mod_devicetable.h\n",
 		      modname, device_id, id_size, device_id, size, device_id);
@@ -1235,7 +1236,7 @@ void handle_moddevtable(struct module *mod, struct elf_info *info,
 {
 	void *symval;
 	char *zeros = NULL;
-	const char *name;
+	const char *name, *identifier;
 	unsigned int namelen;
 
 	/* We're looking for a section relative symbol */
@@ -1246,7 +1247,7 @@ void handle_moddevtable(struct module *mod, struct elf_info *info,
 	if (ELF_ST_TYPE(sym->st_info) != STT_OBJECT)
 		return;
 
-	/* All our symbols are of form <prefix>__mod_XXX_device_table. */
+	/* All our symbols are of form <prefix>__mod_<name>__<identifier>_device_table. */
 	name = strstr(symname, "__mod_");
 	if (!name)
 		return;
@@ -1256,7 +1257,10 @@ void handle_moddevtable(struct module *mod, struct elf_info *info,
 		return;
 	if (strcmp(name + namelen - strlen("_device_table"), "_device_table"))
 		return;
-	namelen -= strlen("_device_table");
+	identifier = strstr(name, "__");
+	if (!identifier)
+		return;
+	namelen = identifier - name;
 
 	/* Handle all-NULL symbols allocated into .bss */
 	if (info->sechdrs[get_secindex(info, sym)].sh_type & SHT_NOBITS) {
