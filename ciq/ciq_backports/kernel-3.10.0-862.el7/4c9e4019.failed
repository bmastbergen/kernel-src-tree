blk-mq: Let blk_mq_debugfs_register() look up the queue name

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Bart Van Assche <bart.vanassche@sandisk.com>
commit 4c9e4019f1880bea7ae6e9603d14c2ed0f1c4e23
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/4c9e4019.failed

A later patch will move the call of blk_mq_debugfs_register() to
a function to which the queue name is not passed as an argument.
To avoid having to add a 'name' argument to multiple callers, let
blk_mq_debugfs_register() look up the queue name.

	Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
	Reviewed-by: Omar Sandoval <osandov@fb.com>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 4c9e4019f1880bea7ae6e9603d14c2ed0f1c4e23)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-debugfs.c
#	block/blk-mq-sysfs.c
#	block/blk-mq.h
diff --cc block/blk-mq-sysfs.c
index 44799e473f05,afb3451cf8a5..000000000000
--- a/block/blk-mq-sysfs.c
+++ b/block/blk-mq-sysfs.c
@@@ -436,6 -318,8 +436,11 @@@ int blk_mq_register_dev(struct device *
  
  	kobject_uevent(&q->mq_kobj, KOBJ_ADD);
  
++<<<<<<< HEAD
++=======
+ 	blk_mq_debugfs_register(q);
+ 
++>>>>>>> 4c9e4019f188 (blk-mq: Let blk_mq_debugfs_register() look up the queue name)
  	queue_for_each_hw_ctx(q, hctx, i) {
  		ret = blk_mq_register_hctx(hctx);
  		if (ret)
diff --cc block/blk-mq.h
index 2d50f02667c4,9049c0f11505..000000000000
--- a/block/blk-mq.h
+++ b/block/blk-mq.h
@@@ -61,6 -83,34 +61,37 @@@ extern int blk_mq_sysfs_register(struc
  extern void blk_mq_sysfs_unregister(struct request_queue *q);
  extern void blk_mq_hctx_kobj_init(struct blk_mq_hw_ctx *hctx);
  
++<<<<<<< HEAD
++=======
+ /*
+  * debugfs helpers
+  */
+ #ifdef CONFIG_BLK_DEBUG_FS
+ int blk_mq_debugfs_register(struct request_queue *q);
+ void blk_mq_debugfs_unregister(struct request_queue *q);
+ int blk_mq_debugfs_register_hctxs(struct request_queue *q);
+ void blk_mq_debugfs_unregister_hctxs(struct request_queue *q);
+ #else
+ static inline int blk_mq_debugfs_register(struct request_queue *q)
+ {
+ 	return 0;
+ }
+ 
+ static inline void blk_mq_debugfs_unregister(struct request_queue *q)
+ {
+ }
+ 
+ static inline int blk_mq_debugfs_register_hctxs(struct request_queue *q)
+ {
+ 	return 0;
+ }
+ 
+ static inline void blk_mq_debugfs_unregister_hctxs(struct request_queue *q)
+ {
+ }
+ #endif
+ 
++>>>>>>> 4c9e4019f188 (blk-mq: Let blk_mq_debugfs_register() look up the queue name)
  extern void blk_mq_rq_timed_out(struct request *req, bool reserved);
  
  void blk_mq_release(struct request_queue *q);
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-sysfs.c
* Unmerged path block/blk-mq.h
