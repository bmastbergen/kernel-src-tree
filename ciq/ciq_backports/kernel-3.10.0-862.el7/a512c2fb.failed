IB/core: Introduce modify QP operation with udata

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Parav Pandit <parav@mellanox.com>
commit a512c2fbef9c700ee1ee0e045b75e140fef8f5ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a512c2fb.failed

This patch adds new function ib_modify_qp_with_udata so that
uverbs layer can avoid handling L2 mac address at verbs layer
and depend on the core layer to resolve the mac address consistently
for all required QPs.

	Signed-off-by: Parav Pandit <parav@mellanox.com>
	Reviewed-by: Eli Cohen <eli@mellanox.com>
	Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit a512c2fbef9c700ee1ee0e045b75e140fef8f5ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/verbs.c
diff --cc drivers/infiniband/core/verbs.c
index 7333fc0ff1bc,7f8fe443df46..000000000000
--- a/drivers/infiniband/core/verbs.c
+++ b/drivers/infiniband/core/verbs.c
@@@ -1264,16 -1305,7 +1289,20 @@@ int ib_modify_qp(struct ib_qp *qp
  		 struct ib_qp_attr *qp_attr,
  		 int qp_attr_mask)
  {
++<<<<<<< HEAD
 +
 +	if (qp_attr_mask & IB_QP_AV) {
 +		int ret;
 +
 +		ret = ib_resolve_eth_dmac(qp->device, &qp_attr->ah_attr);
 +		if (ret)
 +			return ret;
 +	}
 +
 +	return qp->device->modify_qp(qp->real_qp, qp_attr, qp_attr_mask, NULL);
++=======
+ 	return ib_modify_qp_with_udata(qp, qp_attr, qp_attr_mask, NULL);
++>>>>>>> a512c2fbef9c (IB/core: Introduce modify QP operation with udata)
  }
  EXPORT_SYMBOL(ib_modify_qp);
  
* Unmerged path drivers/infiniband/core/verbs.c
diff --git a/include/rdma/ib_verbs.h b/include/rdma/ib_verbs.h
index 137c4686969e..b02d7fb56392 100644
--- a/include/rdma/ib_verbs.h
+++ b/include/rdma/ib_verbs.h
@@ -2850,6 +2850,22 @@ static inline int ib_post_srq_recv(struct ib_srq *srq,
 struct ib_qp *ib_create_qp(struct ib_pd *pd,
 			   struct ib_qp_init_attr *qp_init_attr);
 
+/**
+ * ib_modify_qp_with_udata - Modifies the attributes for the specified QP.
+ * @qp: The QP to modify.
+ * @attr: On input, specifies the QP attributes to modify.  On output,
+ *   the current values of selected QP attributes are returned.
+ * @attr_mask: A bit-mask used to specify which attributes of the QP
+ *   are being modified.
+ * @udata: pointer to user's input output buffer information
+ *   are being modified.
+ * It returns 0 on success and returns appropriate error code on error.
+ */
+int ib_modify_qp_with_udata(struct ib_qp *qp,
+			    struct ib_qp_attr *attr,
+			    int attr_mask,
+			    struct ib_udata *udata);
+
 /**
  * ib_modify_qp - Modifies the attributes for the specified QP and then
  *   transitions the QP to the given state.
