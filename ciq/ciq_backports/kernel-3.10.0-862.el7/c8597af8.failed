ASoC: topology: Allow bespoke configuration post widget creation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: asoc: topology: Allow bespoke configuration post widget creation (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 95.52%
commit-author Liam Girdwood <liam.r.girdwood@linux.intel.com>
commit c8597af855f3e34aaebaff0e5c3dbd07611c87f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c8597af8.failed

Current topology only allows for widget configuration before the widget
is registered. This patch also allows further configuration and usage
after registration is complete.

	Signed-off-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>
	Signed-off-by: Mark Brown <broonie@kernel.org>
(cherry picked from commit c8597af855f3e34aaebaff0e5c3dbd07611c87f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/soc/soc-topology.c
diff --cc sound/soc/soc-topology.c
index e360c9e0fae3,273a374e741c..000000000000
--- a/sound/soc/soc-topology.c
+++ b/sound/soc/soc-topology.c
@@@ -344,12 -344,24 +344,28 @@@ static int soc_tplg_widget_load(struct 
  	return 0;
  }
  
++<<<<<<< HEAD
 +/* pass DAI configurations to component driver for extra intialization */
++=======
+ /* optionally pass new dynamic widget to component driver. This is mainly for
+  * external widgets where we can assign private data/ops */
+ static int soc_tplg_widget_ready(struct soc_tplg *tplg,
+ 	struct snd_soc_dapm_widget *w, struct snd_soc_tplg_dapm_widget *tplg_w)
+ {
+ 	if (tplg->comp && tplg->ops && tplg->ops->widget_ready)
+ 		return tplg->ops->widget_ready(tplg->comp, w, tplg_w);
+ 
+ 	return 0;
+ }
+ 
+ /* pass DAI configurations to component driver for extra initialization */
++>>>>>>> c8597af855f3 (ASoC: topology: Allow bespoke configuration post widget creation)
  static int soc_tplg_dai_load(struct soc_tplg *tplg,
- 	struct snd_soc_dai_driver *dai_drv)
+ 	struct snd_soc_dai_driver *dai_drv,
+ 	struct snd_soc_tplg_pcm *pcm, struct snd_soc_dai *dai)
  {
  	if (tplg->comp && tplg->ops && tplg->ops->dai_load)
- 		return tplg->ops->dai_load(tplg->comp, dai_drv);
+ 		return tplg->ops->dai_load(tplg->comp, dai_drv, pcm, dai);
  
  	return 0;
  }
@@@ -1579,9 -1589,19 +1595,17 @@@ widget
  	widget->dobj.widget.kcontrol_type = kcontrol_type;
  	widget->dobj.ops = tplg->ops;
  	widget->dobj.index = tplg->index;
 -	kfree(template.sname);
 -	kfree(template.name);
  	list_add(&widget->dobj.list, &tplg->comp->dobj_list);
+ 
+ 	ret = soc_tplg_widget_ready(tplg, widget, w);
+ 	if (ret < 0)
+ 		goto ready_err;
+ 
  	return 0;
  
+ ready_err:
+ 	snd_soc_tplg_widget_remove(widget);
+ 	snd_soc_dapm_free_widget(widget);
  hdr_err:
  	kfree(template.sname);
  err:
* Unmerged path sound/soc/soc-topology.c
