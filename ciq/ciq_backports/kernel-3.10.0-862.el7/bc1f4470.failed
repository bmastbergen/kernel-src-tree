net: make ndo_get_stats64 a void function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] make ndo_get_stats64 a void function (Ivan Vecera) [1481795]
Rebuild_FUZZ: 93.51%
commit-author stephen hemminger <stephen@networkplumber.org>
commit bc1f44709cf27fb2a5766cadafe7e2ad5e9cb221
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bc1f4470.failed

The network device operation for reading statistics is only called
in one place, and it ignores the return value. Having a structure
return value is potentially confusing because some future driver could
incorrectly assume that the return value was used.

Fix all drivers with ndo_get_stats64 to have a void function.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bc1f44709cf27fb2a5766cadafe7e2ad5e9cb221)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/alacritech/slicoss.c
#	drivers/net/ethernet/apm/xgene/xgene_enet_main.c
#	drivers/net/ethernet/cavium/thunder/nicvf_main.c
#	drivers/net/ethernet/ec_bhf.c
#	drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
#	drivers/net/ethernet/hisilicon/hns/hns_enet.c
#	drivers/net/ethernet/marvell/mvneta.c
#	drivers/net/ethernet/marvell/mvpp2.c
#	drivers/net/ethernet/mediatek/mtk_eth_soc.c
#	drivers/net/ethernet/qlogic/qede/qede_main.c
#	drivers/net/ethernet/qualcomm/emac/emac.c
#	drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c
#	drivers/net/ethernet/synopsys/dwc_eth_qos.c
#	drivers/net/ethernet/tile/tilepro.c
#	drivers/net/ipvlan/ipvlan_main.c
#	drivers/net/vrf.c
#	drivers/staging/netlogic/xlr_net.c
#	include/linux/netdevice.h
#	net/8021q/vlan_dev.c
#	net/l2tp/l2tp_eth.c
diff --cc drivers/net/ethernet/marvell/mvneta.c
index bcf995e5c9b0,3607d8febbcf..000000000000
--- a/drivers/net/ethernet/marvell/mvneta.c
+++ b/drivers/net/ethernet/marvell/mvneta.c
@@@ -424,8 -650,11 +424,14 @@@ static void mvneta_mib_counters_clear(s
  }
  
  /* Get System Network Statistics */
++<<<<<<< HEAD
 +struct rtnl_link_stats64 *mvneta_get_stats64(struct net_device *dev,
 +					     struct rtnl_link_stats64 *stats)
++=======
+ static void
+ mvneta_get_stats64(struct net_device *dev,
+ 		   struct rtnl_link_stats64 *stats)
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
  {
  	struct mvneta_port *pp = netdev_priv(dev);
  	unsigned int start;
diff --cc drivers/net/ethernet/qlogic/qede/qede_main.c
index aab5d41312e7,40a76a1d5973..000000000000
--- a/drivers/net/ethernet/qlogic/qede/qede_main.c
+++ b/drivers/net/ethernet/qlogic/qede/qede_main.c
@@@ -328,134 -316,119 +328,141 @@@ void qede_fill_by_demand_stats(struct q
  	struct qed_eth_stats stats;
  
  	edev->ops->get_vport_stats(edev->cdev, &stats);
 -	edev->stats.no_buff_discards = stats.no_buff_discards;
 -	edev->stats.packet_too_big_discard = stats.packet_too_big_discard;
 -	edev->stats.ttl0_discard = stats.ttl0_discard;
 -	edev->stats.rx_ucast_bytes = stats.rx_ucast_bytes;
 -	edev->stats.rx_mcast_bytes = stats.rx_mcast_bytes;
 -	edev->stats.rx_bcast_bytes = stats.rx_bcast_bytes;
 -	edev->stats.rx_ucast_pkts = stats.rx_ucast_pkts;
 -	edev->stats.rx_mcast_pkts = stats.rx_mcast_pkts;
 -	edev->stats.rx_bcast_pkts = stats.rx_bcast_pkts;
 -	edev->stats.mftag_filter_discards = stats.mftag_filter_discards;
 -	edev->stats.mac_filter_discards = stats.mac_filter_discards;
 -
 -	edev->stats.tx_ucast_bytes = stats.tx_ucast_bytes;
 -	edev->stats.tx_mcast_bytes = stats.tx_mcast_bytes;
 -	edev->stats.tx_bcast_bytes = stats.tx_bcast_bytes;
 -	edev->stats.tx_ucast_pkts = stats.tx_ucast_pkts;
 -	edev->stats.tx_mcast_pkts = stats.tx_mcast_pkts;
 -	edev->stats.tx_bcast_pkts = stats.tx_bcast_pkts;
 -	edev->stats.tx_err_drop_pkts = stats.tx_err_drop_pkts;
 -	edev->stats.coalesced_pkts = stats.tpa_coalesced_pkts;
 -	edev->stats.coalesced_events = stats.tpa_coalesced_events;
 -	edev->stats.coalesced_aborts_num = stats.tpa_aborts_num;
 -	edev->stats.non_coalesced_pkts = stats.tpa_not_coalesced_pkts;
 -	edev->stats.coalesced_bytes = stats.tpa_coalesced_bytes;
 -
 -	edev->stats.rx_64_byte_packets = stats.rx_64_byte_packets;
 -	edev->stats.rx_65_to_127_byte_packets = stats.rx_65_to_127_byte_packets;
 -	edev->stats.rx_128_to_255_byte_packets =
 -				stats.rx_128_to_255_byte_packets;
 -	edev->stats.rx_256_to_511_byte_packets =
 -				stats.rx_256_to_511_byte_packets;
 -	edev->stats.rx_512_to_1023_byte_packets =
 -				stats.rx_512_to_1023_byte_packets;
 -	edev->stats.rx_1024_to_1518_byte_packets =
 -				stats.rx_1024_to_1518_byte_packets;
 -	edev->stats.rx_1519_to_1522_byte_packets =
 -				stats.rx_1519_to_1522_byte_packets;
 -	edev->stats.rx_1519_to_2047_byte_packets =
 -				stats.rx_1519_to_2047_byte_packets;
 -	edev->stats.rx_2048_to_4095_byte_packets =
 -				stats.rx_2048_to_4095_byte_packets;
 -	edev->stats.rx_4096_to_9216_byte_packets =
 -				stats.rx_4096_to_9216_byte_packets;
 -	edev->stats.rx_9217_to_16383_byte_packets =
 -				stats.rx_9217_to_16383_byte_packets;
 -	edev->stats.rx_crc_errors = stats.rx_crc_errors;
 -	edev->stats.rx_mac_crtl_frames = stats.rx_mac_crtl_frames;
 -	edev->stats.rx_pause_frames = stats.rx_pause_frames;
 -	edev->stats.rx_pfc_frames = stats.rx_pfc_frames;
 -	edev->stats.rx_align_errors = stats.rx_align_errors;
 -	edev->stats.rx_carrier_errors = stats.rx_carrier_errors;
 -	edev->stats.rx_oversize_packets = stats.rx_oversize_packets;
 -	edev->stats.rx_jabbers = stats.rx_jabbers;
 -	edev->stats.rx_undersize_packets = stats.rx_undersize_packets;
 -	edev->stats.rx_fragments = stats.rx_fragments;
 -	edev->stats.tx_64_byte_packets = stats.tx_64_byte_packets;
 -	edev->stats.tx_65_to_127_byte_packets = stats.tx_65_to_127_byte_packets;
 -	edev->stats.tx_128_to_255_byte_packets =
 -				stats.tx_128_to_255_byte_packets;
 -	edev->stats.tx_256_to_511_byte_packets =
 -				stats.tx_256_to_511_byte_packets;
 -	edev->stats.tx_512_to_1023_byte_packets =
 -				stats.tx_512_to_1023_byte_packets;
 -	edev->stats.tx_1024_to_1518_byte_packets =
 -				stats.tx_1024_to_1518_byte_packets;
 -	edev->stats.tx_1519_to_2047_byte_packets =
 -				stats.tx_1519_to_2047_byte_packets;
 -	edev->stats.tx_2048_to_4095_byte_packets =
 -				stats.tx_2048_to_4095_byte_packets;
 -	edev->stats.tx_4096_to_9216_byte_packets =
 -				stats.tx_4096_to_9216_byte_packets;
 -	edev->stats.tx_9217_to_16383_byte_packets =
 -				stats.tx_9217_to_16383_byte_packets;
 -	edev->stats.tx_pause_frames = stats.tx_pause_frames;
 -	edev->stats.tx_pfc_frames = stats.tx_pfc_frames;
 -	edev->stats.tx_lpi_entry_count = stats.tx_lpi_entry_count;
 -	edev->stats.tx_total_collisions = stats.tx_total_collisions;
 -	edev->stats.brb_truncates = stats.brb_truncates;
 -	edev->stats.brb_discards = stats.brb_discards;
 -	edev->stats.tx_mac_ctrl_frames = stats.tx_mac_ctrl_frames;
 +
 +	p_common->no_buff_discards = stats.common.no_buff_discards;
 +	p_common->packet_too_big_discard = stats.common.packet_too_big_discard;
 +	p_common->ttl0_discard = stats.common.ttl0_discard;
 +	p_common->rx_ucast_bytes = stats.common.rx_ucast_bytes;
 +	p_common->rx_mcast_bytes = stats.common.rx_mcast_bytes;
 +	p_common->rx_bcast_bytes = stats.common.rx_bcast_bytes;
 +	p_common->rx_ucast_pkts = stats.common.rx_ucast_pkts;
 +	p_common->rx_mcast_pkts = stats.common.rx_mcast_pkts;
 +	p_common->rx_bcast_pkts = stats.common.rx_bcast_pkts;
 +	p_common->mftag_filter_discards = stats.common.mftag_filter_discards;
 +	p_common->mac_filter_discards = stats.common.mac_filter_discards;
 +
 +	p_common->tx_ucast_bytes = stats.common.tx_ucast_bytes;
 +	p_common->tx_mcast_bytes = stats.common.tx_mcast_bytes;
 +	p_common->tx_bcast_bytes = stats.common.tx_bcast_bytes;
 +	p_common->tx_ucast_pkts = stats.common.tx_ucast_pkts;
 +	p_common->tx_mcast_pkts = stats.common.tx_mcast_pkts;
 +	p_common->tx_bcast_pkts = stats.common.tx_bcast_pkts;
 +	p_common->tx_err_drop_pkts = stats.common.tx_err_drop_pkts;
 +	p_common->coalesced_pkts = stats.common.tpa_coalesced_pkts;
 +	p_common->coalesced_events = stats.common.tpa_coalesced_events;
 +	p_common->coalesced_aborts_num = stats.common.tpa_aborts_num;
 +	p_common->non_coalesced_pkts = stats.common.tpa_not_coalesced_pkts;
 +	p_common->coalesced_bytes = stats.common.tpa_coalesced_bytes;
 +
 +	p_common->rx_64_byte_packets = stats.common.rx_64_byte_packets;
 +	p_common->rx_65_to_127_byte_packets =
 +	    stats.common.rx_65_to_127_byte_packets;
 +	p_common->rx_128_to_255_byte_packets =
 +	    stats.common.rx_128_to_255_byte_packets;
 +	p_common->rx_256_to_511_byte_packets =
 +	    stats.common.rx_256_to_511_byte_packets;
 +	p_common->rx_512_to_1023_byte_packets =
 +	    stats.common.rx_512_to_1023_byte_packets;
 +	p_common->rx_1024_to_1518_byte_packets =
 +	    stats.common.rx_1024_to_1518_byte_packets;
 +	p_common->rx_crc_errors = stats.common.rx_crc_errors;
 +	p_common->rx_mac_crtl_frames = stats.common.rx_mac_crtl_frames;
 +	p_common->rx_pause_frames = stats.common.rx_pause_frames;
 +	p_common->rx_pfc_frames = stats.common.rx_pfc_frames;
 +	p_common->rx_align_errors = stats.common.rx_align_errors;
 +	p_common->rx_carrier_errors = stats.common.rx_carrier_errors;
 +	p_common->rx_oversize_packets = stats.common.rx_oversize_packets;
 +	p_common->rx_jabbers = stats.common.rx_jabbers;
 +	p_common->rx_undersize_packets = stats.common.rx_undersize_packets;
 +	p_common->rx_fragments = stats.common.rx_fragments;
 +	p_common->tx_64_byte_packets = stats.common.tx_64_byte_packets;
 +	p_common->tx_65_to_127_byte_packets =
 +	    stats.common.tx_65_to_127_byte_packets;
 +	p_common->tx_128_to_255_byte_packets =
 +	    stats.common.tx_128_to_255_byte_packets;
 +	p_common->tx_256_to_511_byte_packets =
 +	    stats.common.tx_256_to_511_byte_packets;
 +	p_common->tx_512_to_1023_byte_packets =
 +	    stats.common.tx_512_to_1023_byte_packets;
 +	p_common->tx_1024_to_1518_byte_packets =
 +	    stats.common.tx_1024_to_1518_byte_packets;
 +	p_common->tx_pause_frames = stats.common.tx_pause_frames;
 +	p_common->tx_pfc_frames = stats.common.tx_pfc_frames;
 +	p_common->brb_truncates = stats.common.brb_truncates;
 +	p_common->brb_discards = stats.common.brb_discards;
 +	p_common->tx_mac_ctrl_frames = stats.common.tx_mac_ctrl_frames;
 +
 +	if (QEDE_IS_BB(edev)) {
 +		struct qede_stats_bb *p_bb = &edev->stats.bb;
 +
 +		p_bb->rx_1519_to_1522_byte_packets =
 +		    stats.bb.rx_1519_to_1522_byte_packets;
 +		p_bb->rx_1519_to_2047_byte_packets =
 +		    stats.bb.rx_1519_to_2047_byte_packets;
 +		p_bb->rx_2048_to_4095_byte_packets =
 +		    stats.bb.rx_2048_to_4095_byte_packets;
 +		p_bb->rx_4096_to_9216_byte_packets =
 +		    stats.bb.rx_4096_to_9216_byte_packets;
 +		p_bb->rx_9217_to_16383_byte_packets =
 +		    stats.bb.rx_9217_to_16383_byte_packets;
 +		p_bb->tx_1519_to_2047_byte_packets =
 +		    stats.bb.tx_1519_to_2047_byte_packets;
 +		p_bb->tx_2048_to_4095_byte_packets =
 +		    stats.bb.tx_2048_to_4095_byte_packets;
 +		p_bb->tx_4096_to_9216_byte_packets =
 +		    stats.bb.tx_4096_to_9216_byte_packets;
 +		p_bb->tx_9217_to_16383_byte_packets =
 +		    stats.bb.tx_9217_to_16383_byte_packets;
 +		p_bb->tx_lpi_entry_count = stats.bb.tx_lpi_entry_count;
 +		p_bb->tx_total_collisions = stats.bb.tx_total_collisions;
 +	} else {
 +		struct qede_stats_ah *p_ah = &edev->stats.ah;
 +
 +		p_ah->rx_1519_to_max_byte_packets =
 +		    stats.ah.rx_1519_to_max_byte_packets;
 +		p_ah->tx_1519_to_max_byte_packets =
 +		    stats.ah.tx_1519_to_max_byte_packets;
 +	}
  }
  
- static
- struct rtnl_link_stats64 *qede_get_stats64(struct net_device *dev,
- 					   struct rtnl_link_stats64 *stats)
+ static void qede_get_stats64(struct net_device *dev,
+ 			     struct rtnl_link_stats64 *stats)
  {
  	struct qede_dev *edev = netdev_priv(dev);
 +	struct qede_stats_common *p_common;
  
  	qede_fill_by_demand_stats(edev);
 +	p_common = &edev->stats.common;
 +
 +	stats->rx_packets = p_common->rx_ucast_pkts + p_common->rx_mcast_pkts +
 +			    p_common->rx_bcast_pkts;
 +	stats->tx_packets = p_common->tx_ucast_pkts + p_common->tx_mcast_pkts +
 +			    p_common->tx_bcast_pkts;
  
 -	stats->rx_packets = edev->stats.rx_ucast_pkts +
 -			    edev->stats.rx_mcast_pkts +
 -			    edev->stats.rx_bcast_pkts;
 -	stats->tx_packets = edev->stats.tx_ucast_pkts +
 -			    edev->stats.tx_mcast_pkts +
 -			    edev->stats.tx_bcast_pkts;
 +	stats->rx_bytes = p_common->rx_ucast_bytes + p_common->rx_mcast_bytes +
 +			  p_common->rx_bcast_bytes;
 +	stats->tx_bytes = p_common->tx_ucast_bytes + p_common->tx_mcast_bytes +
 +			  p_common->tx_bcast_bytes;
  
 -	stats->rx_bytes = edev->stats.rx_ucast_bytes +
 -			  edev->stats.rx_mcast_bytes +
 -			  edev->stats.rx_bcast_bytes;
 +	stats->tx_errors = p_common->tx_err_drop_pkts;
 +	stats->multicast = p_common->rx_mcast_pkts + p_common->rx_bcast_pkts;
  
 -	stats->tx_bytes = edev->stats.tx_ucast_bytes +
 -			  edev->stats.tx_mcast_bytes +
 -			  edev->stats.tx_bcast_bytes;
 +	stats->rx_fifo_errors = p_common->no_buff_discards;
  
 -	stats->tx_errors = edev->stats.tx_err_drop_pkts;
 -	stats->multicast = edev->stats.rx_mcast_pkts +
 -			   edev->stats.rx_bcast_pkts;
++<<<<<<< HEAD
 +	if (QEDE_IS_BB(edev))
 +		stats->collisions = edev->stats.bb.tx_total_collisions;
 +	stats->rx_crc_errors = p_common->rx_crc_errors;
 +	stats->rx_frame_errors = p_common->rx_align_errors;
  
 +	return stats;
++=======
+ 	stats->rx_fifo_errors = edev->stats.no_buff_discards;
+ 
+ 	stats->collisions = edev->stats.tx_total_collisions;
+ 	stats->rx_crc_errors = edev->stats.rx_crc_errors;
+ 	stats->rx_frame_errors = edev->stats.rx_align_errors;
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
  }
  
  #ifdef CONFIG_QED_SRIOV
diff --cc drivers/net/ethernet/tile/tilepro.c
index 97f22fab6dcd,30cfea62a356..000000000000
--- a/drivers/net/ethernet/tile/tilepro.c
+++ b/drivers/net/ethernet/tile/tilepro.c
@@@ -2127,13 -2047,13 +2127,18 @@@ static int tile_net_ioctl(struct net_de
   *
   * Returns the address of the device statistics structure.
   */
++<<<<<<< HEAD
 +static struct net_device_stats *tile_net_get_stats(struct net_device *dev)
++=======
+ static void tile_net_get_stats64(struct net_device *dev,
+ 				 struct rtnl_link_stats64 *stats)
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
  {
  	struct tile_net_priv *priv = netdev_priv(dev);
 -	u64 rx_packets = 0, tx_packets = 0;
 -	u64 rx_bytes = 0, tx_bytes = 0;
 -	u64 rx_errors = 0, rx_dropped = 0;
 +	u32 rx_packets = 0;
 +	u32 tx_packets = 0;
 +	u32 rx_bytes = 0;
 +	u32 tx_bytes = 0;
  	int i;
  
  	for_each_online_cpu(i) {
diff --cc drivers/staging/netlogic/xlr_net.c
index 15df90d3dfaa,f84069ffa8c6..000000000000
--- a/drivers/staging/netlogic/xlr_net.c
+++ b/drivers/staging/netlogic/xlr_net.c
@@@ -412,26 -397,21 +412,30 @@@ static void xlr_stats(struct net_devic
  			TX_DROP_FRAME_COUNTER);
  }
  
++<<<<<<< HEAD
 +static struct rtnl_link_stats64 *xlr_get_stats64(struct net_device *ndev,
 +		struct rtnl_link_stats64 *stats)
 +{
 +	xlr_stats(ndev, stats);
 +	return stats;
 +}
 +
 +static struct net_device_ops xlr_netdev_ops = {
++=======
+ static const struct net_device_ops xlr_netdev_ops = {
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
  	.ndo_open = xlr_net_open,
  	.ndo_stop = xlr_net_stop,
  	.ndo_start_xmit = xlr_net_start_xmit,
  	.ndo_select_queue = xlr_net_select_queue,
  	.ndo_set_mac_address = xlr_net_set_mac_addr,
  	.ndo_set_rx_mode = xlr_set_rx_mode,
- 	.ndo_get_stats64 = xlr_get_stats64,
+ 	.ndo_get_stats64 = xlr_stats,
  };
  
 -/*
 - * Gmac init
 - */
 +/* Gmac init */
  static void *xlr_config_spill(struct xlr_net_priv *priv, int reg_start_0,
 -			      int reg_start_1, int reg_size, int size)
 +		int reg_start_1, int reg_size, int size)
  {
  	void *spill;
  	u32 *base;
diff --cc include/linux/netdevice.h
index 6be75b194bed,b14ad9c139d7..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -1001,11 -910,11 +1001,11 @@@ struct net_device_ops_extended 
   *	will return an error.
   *
   * void (*ndo_tx_timeout)(struct net_device *dev);
 - *	Callback used when the transmitter has not made any progress
 + *	Callback uses when the transmitter has not made any progress
   *	for dev->watchdog ticks.
   *
-  * struct rtnl_link_stats64* (*ndo_get_stats64)(struct net_device *dev,
-  *                      struct rtnl_link_stats64 *storage);
+  * void (*ndo_get_stats64)(struct net_device *dev,
+  *                         struct rtnl_link_stats64 *storage);
   * struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);
   *	Called when a user wants to get the network device usage
   *	statistics. Drivers must do one of the following:
@@@ -1223,8 -1165,12 +1223,17 @@@ struct net_device_ops 
  						   struct neigh_parms *);
  	void			(*ndo_tx_timeout) (struct net_device *dev);
  
++<<<<<<< HEAD
 +	struct rtnl_link_stats64* (*ndo_get_stats64)(struct net_device *dev,
 +						     struct rtnl_link_stats64 *storage);
++=======
+ 	void			(*ndo_get_stats64)(struct net_device *dev,
+ 						   struct rtnl_link_stats64 *storage);
+ 	bool			(*ndo_has_offload_stats)(const struct net_device *dev, int attr_id);
+ 	int			(*ndo_get_offload_stats)(int attr_id,
+ 							 const struct net_device *dev,
+ 							 void *attr_data);
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
  	struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);
  
  	int			(*ndo_vlan_rx_add_vid)(struct net_device *dev,
diff --cc net/8021q/vlan_dev.c
index 314c2f99b67e,116455ac3db5..000000000000
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@@ -682,41 -654,55 +682,68 @@@ static void vlan_ethtool_get_drvinfo(st
  	strlcpy(info->fw_version, "N/A", sizeof(info->fw_version));
  }
  
++<<<<<<< HEAD
 +static struct rtnl_link_stats64 *vlan_dev_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
++=======
+ static int vlan_ethtool_get_ts_info(struct net_device *dev,
+ 				    struct ethtool_ts_info *info)
+ {
+ 	const struct vlan_dev_priv *vlan = vlan_dev_priv(dev);
+ 	const struct ethtool_ops *ops = vlan->real_dev->ethtool_ops;
+ 
+ 	if (ops->get_ts_info) {
+ 		return ops->get_ts_info(vlan->real_dev, info);
+ 	} else {
+ 		info->so_timestamping = SOF_TIMESTAMPING_RX_SOFTWARE |
+ 			SOF_TIMESTAMPING_SOFTWARE;
+ 		info->phc_index = -1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void vlan_dev_get_stats64(struct net_device *dev,
+ 				 struct rtnl_link_stats64 *stats)
 -{
 -	struct vlan_pcpu_stats *p;
 -	u32 rx_errors = 0, tx_dropped = 0;
 -	int i;
 -
 -	for_each_possible_cpu(i) {
 -		u64 rxpackets, rxbytes, rxmulticast, txpackets, txbytes;
 -		unsigned int start;
 -
 -		p = per_cpu_ptr(vlan_dev_priv(dev)->vlan_pcpu_stats, i);
 -		do {
 -			start = u64_stats_fetch_begin_irq(&p->syncp);
 -			rxpackets	= p->rx_packets;
 -			rxbytes		= p->rx_bytes;
 -			rxmulticast	= p->rx_multicast;
 -			txpackets	= p->tx_packets;
 -			txbytes		= p->tx_bytes;
 -		} while (u64_stats_fetch_retry_irq(&p->syncp, start));
 -
 -		stats->rx_packets	+= rxpackets;
 -		stats->rx_bytes		+= rxbytes;
 -		stats->multicast	+= rxmulticast;
 -		stats->tx_packets	+= txpackets;
 -		stats->tx_bytes		+= txbytes;
 -		/* rx_errors & tx_dropped are u32 */
 -		rx_errors	+= p->rx_errors;
 -		tx_dropped	+= p->tx_dropped;
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
 +{
 +
 +	if (vlan_dev_priv(dev)->vlan_pcpu_stats) {
 +		struct vlan_pcpu_stats *p;
 +		u32 rx_errors = 0, tx_dropped = 0;
 +		int i;
 +
 +		for_each_possible_cpu(i) {
 +			u64 rxpackets, rxbytes, rxmulticast, txpackets, txbytes;
 +			unsigned int start;
 +
 +			p = per_cpu_ptr(vlan_dev_priv(dev)->vlan_pcpu_stats, i);
 +			do {
 +				start = u64_stats_fetch_begin_irq(&p->syncp);
 +				rxpackets	= p->rx_packets;
 +				rxbytes		= p->rx_bytes;
 +				rxmulticast	= p->rx_multicast;
 +				txpackets	= p->tx_packets;
 +				txbytes		= p->tx_bytes;
 +			} while (u64_stats_fetch_retry_irq(&p->syncp, start));
 +
 +			stats->rx_packets	+= rxpackets;
 +			stats->rx_bytes		+= rxbytes;
 +			stats->multicast	+= rxmulticast;
 +			stats->tx_packets	+= txpackets;
 +			stats->tx_bytes		+= txbytes;
 +			/* rx_errors & tx_dropped are u32 */
 +			rx_errors	+= p->rx_errors;
 +			tx_dropped	+= p->tx_dropped;
 +		}
 +		stats->rx_errors  = rx_errors;
 +		stats->tx_dropped = tx_dropped;
  	}
++<<<<<<< HEAD
 +	return stats;
++=======
+ 	stats->rx_errors  = rx_errors;
+ 	stats->tx_dropped = tx_dropped;
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
  }
  
  #ifdef CONFIG_NET_POLL_CONTROLLER
diff --cc net/l2tp/l2tp_eth.c
index f1d1ef112330,8bf18a5f66e0..000000000000
--- a/net/l2tp/l2tp_eth.c
+++ b/net/l2tp/l2tp_eth.c
@@@ -117,11 -117,9 +117,14 @@@ static void l2tp_eth_get_stats64(struc
  	stats->rx_bytes   = atomic_long_read(&priv->rx_bytes);
  	stats->rx_packets = atomic_long_read(&priv->rx_packets);
  	stats->rx_errors  = atomic_long_read(&priv->rx_errors);
- 	return stats;
  }
  
++<<<<<<< HEAD
 +
 +static struct net_device_ops l2tp_eth_netdev_ops = {
++=======
+ static const struct net_device_ops l2tp_eth_netdev_ops = {
++>>>>>>> bc1f44709cf2 (net: make ndo_get_stats64 a void function)
  	.ndo_init		= l2tp_eth_dev_init,
  	.ndo_uninit		= l2tp_eth_dev_uninit,
  	.ndo_start_xmit		= l2tp_eth_dev_xmit,
* Unmerged path drivers/net/ethernet/alacritech/slicoss.c
* Unmerged path drivers/net/ethernet/apm/xgene/xgene_enet_main.c
* Unmerged path drivers/net/ethernet/cavium/thunder/nicvf_main.c
* Unmerged path drivers/net/ethernet/ec_bhf.c
* Unmerged path drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
* Unmerged path drivers/net/ethernet/hisilicon/hns/hns_enet.c
* Unmerged path drivers/net/ethernet/marvell/mvpp2.c
* Unmerged path drivers/net/ethernet/mediatek/mtk_eth_soc.c
* Unmerged path drivers/net/ethernet/qualcomm/emac/emac.c
* Unmerged path drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c
* Unmerged path drivers/net/ethernet/synopsys/dwc_eth_qos.c
* Unmerged path drivers/net/ipvlan/ipvlan_main.c
* Unmerged path drivers/net/vrf.c
diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index d8cae8a7afb4..a9279577ac52 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -205,8 +205,8 @@ int bond_net_id __read_mostly;
 
 static int bond_init(struct net_device *bond_dev);
 static void bond_uninit(struct net_device *bond_dev);
-static struct rtnl_link_stats64 *bond_get_stats(struct net_device *bond_dev,
-						struct rtnl_link_stats64 *stats);
+static void bond_get_stats(struct net_device *bond_dev,
+			   struct rtnl_link_stats64 *stats);
 static void bond_slave_arr_handler(struct work_struct *work);
 static bool bond_time_in_interval(struct bonding *bond, unsigned long last_act,
 				  int mod);
@@ -3364,8 +3364,8 @@ static void bond_fold_stats(struct rtnl_link_stats64 *_res,
 	}
 }
 
-static struct rtnl_link_stats64 *bond_get_stats(struct net_device *bond_dev,
-						struct rtnl_link_stats64 *stats)
+static void bond_get_stats(struct net_device *bond_dev,
+			   struct rtnl_link_stats64 *stats)
 {
 	struct bonding *bond = netdev_priv(bond_dev);
 	struct rtnl_link_stats64 temp;
@@ -3389,8 +3389,6 @@ static struct rtnl_link_stats64 *bond_get_stats(struct net_device *bond_dev,
 
 	memcpy(&bond->bond_stats, stats, sizeof(*stats));
 	spin_unlock(&bond->stats_lock);
-
-	return stats;
 }
 
 static int bond_do_ioctl(struct net_device *bond_dev, struct ifreq *ifr, int cmd)
diff --git a/drivers/net/dummy.c b/drivers/net/dummy.c
index d6fe87b9dfd7..50857a8e9ce2 100644
--- a/drivers/net/dummy.c
+++ b/drivers/net/dummy.c
@@ -51,8 +51,8 @@ struct pcpu_dstats {
 	struct u64_stats_sync	syncp;
 };
 
-static struct rtnl_link_stats64 *dummy_get_stats64(struct net_device *dev,
-						   struct rtnl_link_stats64 *stats)
+static void dummy_get_stats64(struct net_device *dev,
+			      struct rtnl_link_stats64 *stats)
 {
 	int i;
 
@@ -70,7 +70,6 @@ static struct rtnl_link_stats64 *dummy_get_stats64(struct net_device *dev,
 		stats->tx_bytes += tbytes;
 		stats->tx_packets += tpackets;
 	}
-	return stats;
 }
 
 static netdev_tx_t dummy_xmit(struct sk_buff *skb, struct net_device *dev)
* Unmerged path drivers/net/ethernet/alacritech/slicoss.c
diff --git a/drivers/net/ethernet/amazon/ena/ena_netdev.c b/drivers/net/ethernet/amazon/ena/ena_netdev.c
index bfeaec5bd7b9..ddc281c47483 100644
--- a/drivers/net/ethernet/amazon/ena/ena_netdev.c
+++ b/drivers/net/ethernet/amazon/ena/ena_netdev.c
@@ -2172,19 +2172,19 @@ err:
 	ena_com_delete_debug_area(adapter->ena_dev);
 }
 
-static struct rtnl_link_stats64 *ena_get_stats64(struct net_device *netdev,
-						 struct rtnl_link_stats64 *stats)
+static void ena_get_stats64(struct net_device *netdev,
+			    struct rtnl_link_stats64 *stats)
 {
 	struct ena_adapter *adapter = netdev_priv(netdev);
 	struct ena_admin_basic_stats ena_stats;
 	int rc;
 
 	if (!test_bit(ENA_FLAG_DEV_UP, &adapter->flags))
-		return NULL;
+		return;
 
 	rc = ena_com_get_dev_basic_stats(adapter->ena_dev, &ena_stats);
 	if (rc)
-		return NULL;
+		return;
 
 	stats->tx_bytes = ((u64)ena_stats.tx_bytes_high << 32) |
 		ena_stats.tx_bytes_low;
@@ -2211,8 +2211,6 @@ static struct rtnl_link_stats64 *ena_get_stats64(struct net_device *netdev,
 
 	stats->rx_errors = 0;
 	stats->tx_errors = 0;
-
-	return stats;
 }
 
 static const struct net_device_ops ena_netdev_ops = {
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index a01866542bfd..938c64f0b2c0 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@ -1766,8 +1766,8 @@ static void xgbe_tx_timeout(struct net_device *netdev)
 	schedule_work(&pdata->restart_work);
 }
 
-static struct rtnl_link_stats64 *xgbe_get_stats64(struct net_device *netdev,
-						  struct rtnl_link_stats64 *s)
+static void xgbe_get_stats64(struct net_device *netdev,
+			     struct rtnl_link_stats64 *s)
 {
 	struct xgbe_prv_data *pdata = netdev_priv(netdev);
 	struct xgbe_mmc_stats *pstats = &pdata->mmc_stats;
@@ -1793,8 +1793,6 @@ static struct rtnl_link_stats64 *xgbe_get_stats64(struct net_device *netdev,
 	s->tx_dropped = netdev->stats.tx_dropped;
 
 	DBGPR("<--%s\n", __func__);
-
-	return s;
 }
 
 static int xgbe_vlan_rx_add_vid(struct net_device *netdev, __be16 proto,
* Unmerged path drivers/net/ethernet/apm/xgene/xgene_enet_main.c
diff --git a/drivers/net/ethernet/atheros/alx/main.c b/drivers/net/ethernet/atheros/alx/main.c
index 4fc5e50ee251..7ac174ccfef5 100644
--- a/drivers/net/ethernet/atheros/alx/main.c
+++ b/drivers/net/ethernet/atheros/alx/main.c
@@ -1656,8 +1656,8 @@ static void alx_poll_controller(struct net_device *netdev)
 }
 #endif
 
-static struct rtnl_link_stats64 *alx_get_stats64(struct net_device *dev,
-					struct rtnl_link_stats64 *net_stats)
+static void alx_get_stats64(struct net_device *dev,
+			    struct rtnl_link_stats64 *net_stats)
 {
 	struct alx_priv *alx = netdev_priv(dev);
 	struct alx_hw_stats *hw_stats = &alx->hw.stats;
@@ -1701,8 +1701,6 @@ static struct rtnl_link_stats64 *alx_get_stats64(struct net_device *dev,
 	net_stats->rx_packets = hw_stats->rx_ok + net_stats->rx_errors;
 
 	spin_unlock(&alx->stats_lock);
-
-	return net_stats;
 }
 
 static const struct net_device_ops alx_netdev_ops = {
diff --git a/drivers/net/ethernet/broadcom/b44.c b/drivers/net/ethernet/broadcom/b44.c
index c1327990fdf7..69ab2483790d 100644
--- a/drivers/net/ethernet/broadcom/b44.c
+++ b/drivers/net/ethernet/broadcom/b44.c
@@ -1636,8 +1636,8 @@ static int b44_close(struct net_device *dev)
 	return 0;
 }
 
-static struct rtnl_link_stats64 *b44_get_stats64(struct net_device *dev,
-					struct rtnl_link_stats64 *nstat)
+static void b44_get_stats64(struct net_device *dev,
+			    struct rtnl_link_stats64 *nstat)
 {
 	struct b44 *bp = netdev_priv(dev);
 	struct b44_hw_stats *hwstat = &bp->hw_stats;
@@ -1680,7 +1680,6 @@ static struct rtnl_link_stats64 *b44_get_stats64(struct net_device *dev,
 #endif
 	} while (u64_stats_fetch_retry_irq(&hwstat->syncp, start));
 
-	return nstat;
 }
 
 static int __b44_load_mcast(struct b44 *bp, struct net_device *dev)
diff --git a/drivers/net/ethernet/broadcom/bnx2.c b/drivers/net/ethernet/broadcom/bnx2.c
index c55797291b57..041607e18550 100644
--- a/drivers/net/ethernet/broadcom/bnx2.c
+++ b/drivers/net/ethernet/broadcom/bnx2.c
@@ -6811,13 +6811,13 @@ bnx2_save_stats(struct bnx2 *bp)
 	(unsigned long) (bp->stats_blk->ctr +			\
 			 bp->temp_stats_blk->ctr)
 
-static struct rtnl_link_stats64 *
+static void
 bnx2_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *net_stats)
 {
 	struct bnx2 *bp = netdev_priv(dev);
 
 	if (bp->stats_blk == NULL)
-		return net_stats;
+		return;
 
 	net_stats->rx_packets =
 		GET_64BIT_NET_STATS(stat_IfHCInUcastPkts) +
@@ -6881,7 +6881,6 @@ bnx2_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *net_stats)
 		GET_32BIT_NET_STATS(stat_IfInMBUFDiscards) +
 		GET_32BIT_NET_STATS(stat_FwRxDrop);
 
-	return net_stats;
 }
 
 /* All ethtool functions called with rtnl_lock */
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.c b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
index bdacd982a1af..dcff629936c9 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@ -5938,14 +5938,14 @@ static int bnxt_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 	return -EOPNOTSUPP;
 }
 
-static struct rtnl_link_stats64 *
+static void
 bnxt_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	u32 i;
 	struct bnxt *bp = netdev_priv(dev);
 
 	if (!bp->bnapi)
-		return stats;
+		return;
 
 	/* TODO check if we need to synchronize with bnxt_close path */
 	for (i = 0; i < bp->cp_nr_rings; i++) {
@@ -5992,8 +5992,6 @@ bnxt_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 		stats->tx_fifo_errors = le64_to_cpu(tx->tx_fifo_underruns);
 		stats->tx_errors = le64_to_cpu(tx->tx_err);
 	}
-
-	return stats;
 }
 
 static bool bnxt_mc_list_updated(struct bnxt *bp, u32 *rx_mask)
diff --git a/drivers/net/ethernet/broadcom/tg3.c b/drivers/net/ethernet/broadcom/tg3.c
index b7f9957dd10c..5615ebf5e238 100644
--- a/drivers/net/ethernet/broadcom/tg3.c
+++ b/drivers/net/ethernet/broadcom/tg3.c
@@ -14130,8 +14130,8 @@ static const struct ethtool_ops tg3_ethtool_ops = {
 	.set_eee		= tg3_set_eee,
 };
 
-static struct rtnl_link_stats64 *tg3_get_stats64(struct net_device *dev,
-						struct rtnl_link_stats64 *stats)
+static void tg3_get_stats64(struct net_device *dev,
+			    struct rtnl_link_stats64 *stats)
 {
 	struct tg3 *tp = netdev_priv(dev);
 
@@ -14139,13 +14139,11 @@ static struct rtnl_link_stats64 *tg3_get_stats64(struct net_device *dev,
 	if (!tp->hw_stats) {
 		*stats = tp->net_stats_prev;
 		spin_unlock_bh(&tp->lock);
-		return stats;
+		return;
 	}
 
 	tg3_get_nstats(tp, stats);
 	spin_unlock_bh(&tp->lock);
-
-	return stats;
 }
 
 static void tg3_set_rx_mode(struct net_device *dev)
diff --git a/drivers/net/ethernet/brocade/bna/bnad.c b/drivers/net/ethernet/brocade/bna/bnad.c
index f42f672b0e7e..aa141609234f 100644
--- a/drivers/net/ethernet/brocade/bna/bnad.c
+++ b/drivers/net/ethernet/brocade/bna/bnad.c
@@ -3111,7 +3111,7 @@ bnad_start_xmit(struct sk_buff *skb, struct net_device *netdev)
  * Used spin_lock to synchronize reading of stats structures, which
  * is written by BNA under the same lock.
  */
-static struct rtnl_link_stats64 *
+static void
 bnad_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
 {
 	struct bnad *bnad = netdev_priv(netdev);
@@ -3123,8 +3123,6 @@ bnad_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
 	bnad_netdev_hwstats_fill(bnad, stats);
 
 	spin_unlock_irqrestore(&bnad->bna_lock, flags);
-
-	return stats;
 }
 
 static void
@@ -3430,7 +3428,7 @@ static const struct net_device_ops bnad_netdev_ops = {
 	.ndo_open		= bnad_open,
 	.ndo_stop		= bnad_stop,
 	.ndo_start_xmit		= bnad_start_xmit,
-	.ndo_get_stats64		= bnad_get_stats64,
+	.ndo_get_stats64	= bnad_get_stats64,
 	.ndo_set_rx_mode	= bnad_set_rx_mode,
 	.ndo_validate_addr      = eth_validate_addr,
 	.ndo_set_mac_address    = bnad_set_mac_address,
diff --git a/drivers/net/ethernet/calxeda/xgmac.c b/drivers/net/ethernet/calxeda/xgmac.c
index 4a1f2fa812ab..78451e7654e2 100644
--- a/drivers/net/ethernet/calxeda/xgmac.c
+++ b/drivers/net/ethernet/calxeda/xgmac.c
@@ -1428,9 +1428,9 @@ static void xgmac_poll_controller(struct net_device *dev)
 }
 #endif
 
-static struct rtnl_link_stats64 *
+static void
 xgmac_get_stats64(struct net_device *dev,
-		       struct rtnl_link_stats64 *storage)
+		  struct rtnl_link_stats64 *storage)
 {
 	struct xgmac_priv *priv = netdev_priv(dev);
 	void __iomem *base = priv->base;
@@ -1458,7 +1458,6 @@ xgmac_get_stats64(struct net_device *dev,
 
 	writel(0, base + XGMAC_MMC_CTRL);
 	spin_unlock_bh(&priv->stats_lock);
-	return storage;
 }
 
 static int xgmac_set_mac_address(struct net_device *dev, void *p)
* Unmerged path drivers/net/ethernet/cavium/thunder/nicvf_main.c
diff --git a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
index be07b8abc441..78744d59f911 100644
--- a/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
+++ b/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c
@@ -2391,8 +2391,8 @@ int cxgb4_remove_server_filter(const struct net_device *dev, unsigned int stid,
 }
 EXPORT_SYMBOL(cxgb4_remove_server_filter);
 
-static struct rtnl_link_stats64 *cxgb_get_stats(struct net_device *dev,
-						struct rtnl_link_stats64 *ns)
+static void cxgb_get_stats(struct net_device *dev,
+			   struct rtnl_link_stats64 *ns)
 {
 	struct port_stats stats;
 	struct port_info *p = netdev_priv(dev);
@@ -2405,7 +2405,7 @@ static struct rtnl_link_stats64 *cxgb_get_stats(struct net_device *dev,
 	spin_lock(&adapter->stats_lock);
 	if (!netif_device_present(dev)) {
 		spin_unlock(&adapter->stats_lock);
-		return ns;
+		return;
 	}
 	t4_get_port_stats_offset(adapter, p->tx_chan, &stats,
 				 &p->stats_base);
@@ -2439,7 +2439,6 @@ static struct rtnl_link_stats64 *cxgb_get_stats(struct net_device *dev,
 	ns->tx_errors = stats.tx_error_frames;
 	ns->rx_errors = stats.rx_symbol_err + stats.rx_fcs_err +
 		ns->rx_length_errors + stats.rx_len_err + ns->rx_fifo_errors;
-	return ns;
 }
 
 static int cxgb_ioctl(struct net_device *dev, struct ifreq *req, int cmd)
diff --git a/drivers/net/ethernet/cisco/enic/enic_main.c b/drivers/net/ethernet/cisco/enic/enic_main.c
index 0d4ab50b630c..9cc9af9ee345 100644
--- a/drivers/net/ethernet/cisco/enic/enic_main.c
+++ b/drivers/net/ethernet/cisco/enic/enic_main.c
@@ -865,8 +865,8 @@ static netdev_tx_t enic_hard_start_xmit(struct sk_buff *skb,
 }
 
 /* dev_base_lock rwlock held, nominally process context */
-static struct rtnl_link_stats64 *enic_get_stats(struct net_device *netdev,
-						struct rtnl_link_stats64 *net_stats)
+static void enic_get_stats(struct net_device *netdev,
+			   struct rtnl_link_stats64 *net_stats)
 {
 	struct enic *enic = netdev_priv(netdev);
 	struct vnic_stats *stats;
@@ -878,7 +878,7 @@ static struct rtnl_link_stats64 *enic_get_stats(struct net_device *netdev,
 	 * recorded stats.
 	 */
 	if (err == -ENOMEM)
-		return net_stats;
+		return;
 
 	net_stats->tx_packets = stats->tx.tx_frames_ok;
 	net_stats->tx_bytes = stats->tx.tx_bytes_ok;
@@ -892,8 +892,6 @@ static struct rtnl_link_stats64 *enic_get_stats(struct net_device *netdev,
 	net_stats->rx_over_errors = enic->rq_truncated_pkts;
 	net_stats->rx_crc_errors = enic->rq_bad_fcs;
 	net_stats->rx_dropped = stats->rx.rx_no_bufs + stats->rx.rx_drop;
-
-	return net_stats;
 }
 
 static int enic_mc_sync(struct net_device *netdev, const u8 *mc_addr)
* Unmerged path drivers/net/ethernet/ec_bhf.c
diff --git a/drivers/net/ethernet/emulex/benet/be_main.c b/drivers/net/ethernet/emulex/benet/be_main.c
index 4661f177f6dd..cbb74aaa67ac 100644
--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -648,8 +648,8 @@ void be_parse_stats(struct be_adapter *adapter)
 	}
 }
 
-static struct rtnl_link_stats64 *be_get_stats64(struct net_device *netdev,
-						struct rtnl_link_stats64 *stats)
+static void be_get_stats64(struct net_device *netdev,
+			   struct rtnl_link_stats64 *stats)
 {
 	struct be_adapter *adapter = netdev_priv(netdev);
 	struct be_drv_stats *drvs = &adapter->drv_stats;
@@ -713,7 +713,6 @@ static struct rtnl_link_stats64 *be_get_stats64(struct net_device *netdev,
 	stats->rx_fifo_errors = drvs->rxpp_fifo_overflow_drop +
 				drvs->rx_input_fifo_overflow_drop +
 				drvs->rx_drops_no_pbuf;
-	return stats;
 }
 
 void be_link_status_update(struct be_adapter *adapter, u8 link_status)
* Unmerged path drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
* Unmerged path drivers/net/ethernet/hisilicon/hns/hns_enet.c
diff --git a/drivers/net/ethernet/ibm/ehea/ehea_main.c b/drivers/net/ethernet/ibm/ehea/ehea_main.c
index 85d26f15e65d..8c5a9a5ec888 100644
--- a/drivers/net/ethernet/ibm/ehea/ehea_main.c
+++ b/drivers/net/ethernet/ibm/ehea/ehea_main.c
@@ -316,8 +316,8 @@ out:
 	spin_unlock_irqrestore(&ehea_bcmc_regs.lock, flags);
 }
 
-static struct rtnl_link_stats64 *ehea_get_stats64(struct net_device *dev,
-					struct rtnl_link_stats64 *stats)
+static void ehea_get_stats64(struct net_device *dev,
+			     struct rtnl_link_stats64 *stats)
 {
 	struct ehea_port *port = netdev_priv(dev);
 	u64 rx_packets = 0, tx_packets = 0, rx_bytes = 0, tx_bytes = 0;
@@ -340,7 +340,6 @@ static struct rtnl_link_stats64 *ehea_get_stats64(struct net_device *dev,
 
 	stats->multicast = port->stats.multicast;
 	stats->rx_errors = port->stats.rx_errors;
-	return stats;
 }
 
 static void ehea_update_stats(struct work_struct *work)
diff --git a/drivers/net/ethernet/intel/e1000e/e1000.h b/drivers/net/ethernet/intel/e1000e/e1000.h
index 4bf1294467a1..e185d0773f45 100644
--- a/drivers/net/ethernet/intel/e1000e/e1000.h
+++ b/drivers/net/ethernet/intel/e1000e/e1000.h
@@ -498,8 +498,8 @@ int e1000e_setup_rx_resources(struct e1000_ring *ring);
 int e1000e_setup_tx_resources(struct e1000_ring *ring);
 void e1000e_free_rx_resources(struct e1000_ring *ring);
 void e1000e_free_tx_resources(struct e1000_ring *ring);
-struct rtnl_link_stats64 *e1000e_get_stats64(struct net_device *netdev,
-					     struct rtnl_link_stats64 *stats);
+void e1000e_get_stats64(struct net_device *netdev,
+			struct rtnl_link_stats64 *stats);
 void e1000e_set_interrupt_capability(struct e1000_adapter *adapter);
 void e1000e_reset_interrupt_capability(struct e1000_adapter *adapter);
 void e1000e_get_hw_control(struct e1000_adapter *adapter);
diff --git a/drivers/net/ethernet/intel/e1000e/netdev.c b/drivers/net/ethernet/intel/e1000e/netdev.c
index f7604e894ff1..afe25332e9fa 100644
--- a/drivers/net/ethernet/intel/e1000e/netdev.c
+++ b/drivers/net/ethernet/intel/e1000e/netdev.c
@@ -5931,8 +5931,8 @@ static void e1000_reset_task(struct work_struct *work)
  *
  * Returns the address of the device statistics structure.
  **/
-struct rtnl_link_stats64 *e1000e_get_stats64(struct net_device *netdev,
-					     struct rtnl_link_stats64 *stats)
+void e1000e_get_stats64(struct net_device *netdev,
+			struct rtnl_link_stats64 *stats)
 {
 	struct e1000_adapter *adapter = netdev_priv(netdev);
 
@@ -5968,7 +5968,6 @@ struct rtnl_link_stats64 *e1000e_get_stats64(struct net_device *netdev,
 	/* Tx Dropped needs to be maintained elsewhere */
 
 	spin_unlock(&adapter->stats64_lock);
-	return stats;
 }
 
 /**
diff --git a/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c b/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
index d50be1a86359..d7f889668edc 100644
--- a/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
@@ -1087,8 +1087,8 @@ void fm10k_reset_rx_state(struct fm10k_intfc *interface)
  * Returns 64bit statistics, for use in the ndo_get_stats64 callback. This
  * function replaces fm10k_get_stats for kernels which support it.
  */
-static struct rtnl_link_stats64 *fm10k_get_stats64(struct net_device *netdev,
-						   struct rtnl_link_stats64 *stats)
+static void fm10k_get_stats64(struct net_device *netdev,
+			      struct rtnl_link_stats64 *stats)
 {
 	struct fm10k_intfc *interface = netdev_priv(netdev);
 	struct fm10k_ring *ring;
@@ -1133,8 +1133,6 @@ static struct rtnl_link_stats64 *fm10k_get_stats64(struct net_device *netdev,
 
 	/* following stats updated by fm10k_service_task() */
 	stats->rx_missed_errors	= netdev->stats.rx_missed_errors;
-
-	return stats;
 }
 
 int fm10k_setup_tc(struct net_device *dev, u8 tc)
diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index 722411ddf1b7..9b2bb8d971cc 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -841,9 +841,8 @@ static inline void i40e_irq_dynamic_enable(struct i40e_vsi *vsi, int vector)
 void i40e_irq_dynamic_disable_icr0(struct i40e_pf *pf);
 void i40e_irq_dynamic_enable_icr0(struct i40e_pf *pf, bool clearpba);
 #ifdef I40E_FCOE
-struct rtnl_link_stats64 *i40e_get_netdev_stats_struct(
-					     struct net_device *netdev,
-					     struct rtnl_link_stats64 *storage);
+void i40e_get_netdev_stats_struct(struct net_device *netdev,
+				  struct rtnl_link_stats64 *storage);
 int i40e_set_mac(struct net_device *netdev, void *p);
 void i40e_set_rx_mode(struct net_device *netdev);
 #endif
diff --git a/drivers/net/ethernet/intel/i40e/i40e_main.c b/drivers/net/ethernet/intel/i40e/i40e_main.c
index 3ee075e7daca..e9459a50da87 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@ -408,15 +408,11 @@ struct rtnl_link_stats64 *i40e_get_vsi_stats_struct(struct i40e_vsi *vsi)
  * Returns the address of the device statistics structure.
  * The statistics are actually updated from the service task.
  **/
-#ifdef I40E_FCOE
-struct rtnl_link_stats64 *i40e_get_netdev_stats_struct(
-					     struct net_device *netdev,
-					     struct rtnl_link_stats64 *stats)
-#else
-static struct rtnl_link_stats64 *i40e_get_netdev_stats_struct(
-					     struct net_device *netdev,
-					     struct rtnl_link_stats64 *stats)
+#ifndef I40E_FCOE
+static
 #endif
+void i40e_get_netdev_stats_struct(struct net_device *netdev,
+				  struct rtnl_link_stats64 *stats)
 {
 	struct i40e_netdev_priv *np = netdev_priv(netdev);
 	struct i40e_ring *tx_ring, *rx_ring;
@@ -425,10 +421,10 @@ static struct rtnl_link_stats64 *i40e_get_netdev_stats_struct(
 	int i;
 
 	if (test_bit(__I40E_DOWN, &vsi->state))
-		return stats;
+		return;
 
 	if (!vsi->tx_rings)
-		return stats;
+		return;
 
 	rcu_read_lock();
 	for (i = 0; i < vsi->num_queue_pairs; i++) {
@@ -468,8 +464,6 @@ static struct rtnl_link_stats64 *i40e_get_netdev_stats_struct(
 	stats->rx_dropped	= vsi_stats->rx_dropped;
 	stats->rx_crc_errors	= vsi_stats->rx_crc_errors;
 	stats->rx_length_errors	= vsi_stats->rx_length_errors;
-
-	return stats;
 }
 
 /**
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index b3c4c956fa51..246747023b39 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -137,8 +137,8 @@ static void igb_update_phy_info(unsigned long);
 static void igb_watchdog(unsigned long);
 static void igb_watchdog_task(struct work_struct *);
 static netdev_tx_t igb_xmit_frame(struct sk_buff *skb, struct net_device *);
-static struct rtnl_link_stats64 *igb_get_stats64(struct net_device *dev,
-					  struct rtnl_link_stats64 *stats);
+static void igb_get_stats64(struct net_device *dev,
+			    struct rtnl_link_stats64 *stats);
 static int igb_change_mtu(struct net_device *, int);
 static int igb_set_mac(struct net_device *, void *);
 static void igb_set_uta(struct igb_adapter *adapter, bool set);
@@ -5389,8 +5389,8 @@ static void igb_reset_task(struct work_struct *work)
  *  @netdev: network interface device structure
  *  @stats: rtnl_link_stats64 pointer
  **/
-static struct rtnl_link_stats64 *igb_get_stats64(struct net_device *netdev,
-						struct rtnl_link_stats64 *stats)
+static void igb_get_stats64(struct net_device *netdev,
+			    struct rtnl_link_stats64 *stats)
 {
 	struct igb_adapter *adapter = netdev_priv(netdev);
 
@@ -5398,8 +5398,6 @@ static struct rtnl_link_stats64 *igb_get_stats64(struct net_device *netdev,
 	igb_update_stats(adapter, &adapter->stats64);
 	memcpy(stats, &adapter->stats64, sizeof(*stats));
 	spin_unlock(&adapter->stats64_lock);
-
-	return stats;
 }
 
 /**
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index 0afaf44ddea2..e10f73c90d60 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -8146,8 +8146,9 @@ static void ixgbe_netpoll(struct net_device *netdev)
 }
 
 #endif
-static struct rtnl_link_stats64 *ixgbe_get_stats64(struct net_device *netdev,
-						   struct rtnl_link_stats64 *stats)
+
+static void ixgbe_get_stats64(struct net_device *netdev,
+			      struct rtnl_link_stats64 *stats)
 {
 	struct ixgbe_adapter *adapter = netdev_priv(netdev);
 	int i;
@@ -8185,13 +8186,13 @@ static struct rtnl_link_stats64 *ixgbe_get_stats64(struct net_device *netdev,
 		}
 	}
 	rcu_read_unlock();
+
 	/* following stats updated by ixgbe_watchdog_task() */
 	stats->multicast	= netdev->stats.multicast;
 	stats->rx_errors	= netdev->stats.rx_errors;
 	stats->rx_length_errors	= netdev->stats.rx_length_errors;
 	stats->rx_crc_errors	= netdev->stats.rx_crc_errors;
 	stats->rx_missed_errors	= netdev->stats.rx_missed_errors;
-	return stats;
 }
 
 #ifdef CONFIG_IXGBE_DCB
diff --git a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
index 10911f56e714..42ae44ac3949 100644
--- a/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
+++ b/drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c
@@ -3913,8 +3913,8 @@ static void ixgbevf_shutdown(struct pci_dev *pdev)
 	ixgbevf_suspend(pdev, PMSG_SUSPEND);
 }
 
-static struct rtnl_link_stats64 *ixgbevf_get_stats(struct net_device *netdev,
-						struct rtnl_link_stats64 *stats)
+static void ixgbevf_get_stats(struct net_device *netdev,
+			      struct rtnl_link_stats64 *stats)
 {
 	struct ixgbevf_adapter *adapter = netdev_priv(netdev);
 	unsigned int start;
@@ -3947,8 +3947,6 @@ static struct rtnl_link_stats64 *ixgbevf_get_stats(struct net_device *netdev,
 		stats->tx_bytes += bytes;
 		stats->tx_packets += packets;
 	}
-
-	return stats;
 }
 
 #define IXGBEVF_MAX_MAC_HDR_LEN		127
* Unmerged path drivers/net/ethernet/marvell/mvneta.c
* Unmerged path drivers/net/ethernet/marvell/mvpp2.c
diff --git a/drivers/net/ethernet/marvell/sky2.c b/drivers/net/ethernet/marvell/sky2.c
index e43efefa8acd..9cbc163d3fb5 100644
--- a/drivers/net/ethernet/marvell/sky2.c
+++ b/drivers/net/ethernet/marvell/sky2.c
@@ -3896,8 +3896,8 @@ static void sky2_set_multicast(struct net_device *dev)
 	gma_write16(hw, port, GM_RX_CTRL, reg);
 }
 
-static struct rtnl_link_stats64 *sky2_get_stats(struct net_device *dev,
-						struct rtnl_link_stats64 *stats)
+static void sky2_get_stats(struct net_device *dev,
+			   struct rtnl_link_stats64 *stats)
 {
 	struct sky2_port *sky2 = netdev_priv(dev);
 	struct sky2_hw *hw = sky2->hw;
@@ -3937,8 +3937,6 @@ static struct rtnl_link_stats64 *sky2_get_stats(struct net_device *dev,
 	stats->rx_dropped = dev->stats.rx_dropped;
 	stats->rx_fifo_errors = dev->stats.rx_fifo_errors;
 	stats->tx_fifo_errors = dev->stats.tx_fifo_errors;
-
-	return stats;
 }
 
 /* Can have one global because blinking is controlled by
* Unmerged path drivers/net/ethernet/mediatek/mtk_eth_soc.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 4307fbfe22ac..8e5f656aa61b 100644
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@ -1317,7 +1317,7 @@ static void mlx4_en_tx_timeout(struct net_device *dev)
 }
 
 
-static struct rtnl_link_stats64 *
+static void
 mlx4_en_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct mlx4_en_priv *priv = netdev_priv(dev);
@@ -1326,8 +1326,6 @@ mlx4_en_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 	mlx4_en_fold_software_stats(dev);
 	netdev_stats_to_stats64(stats, &dev->stats);
 	spin_unlock_bh(&priv->stats_lock);
-
-	return stats;
 }
 
 static void mlx4_en_set_default_moderation(struct mlx4_en_priv *priv)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 0bfdc32d0159..7e5eafe0610f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -2637,7 +2637,7 @@ mqprio:
 	return mlx5e_setup_tc(dev, tc->tc);
 }
 
-static struct rtnl_link_stats64 *
+static void
 mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
@@ -2680,7 +2680,6 @@ mlx5e_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
 	stats->multicast =
 		VPORT_COUNTER_GET(vstats, received_eth_multicast.packets);
 
-	return stats;
 }
 
 static void mlx5e_set_rx_mode(struct net_device *dev)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
index 0129883a7dc0..473db7862bff 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rep.c
@@ -374,13 +374,12 @@ int mlx5e_get_offload_stats(int attr_id, const struct net_device *dev,
 	return -EINVAL;
 }
 
-static struct rtnl_link_stats64 *
+static void
 mlx5e_rep_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct mlx5e_priv *priv = netdev_priv(dev);
 
 	memcpy(stats, &priv->stats.vf_vport, sizeof(*stats));
-	return stats;
 }
 
 static const struct switchdev_ops mlx5e_rep_switchdev_ops = {
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index c628b7aede0f..d199fa55b15c 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@ -946,15 +946,13 @@ out:
 /* Return the stats from a cache that is updated periodically,
  * as this function might get called in an atomic context.
  */
-static struct rtnl_link_stats64 *
+static void
 mlxsw_sp_port_get_stats64(struct net_device *dev,
 			  struct rtnl_link_stats64 *stats)
 {
 	struct mlxsw_sp_port *mlxsw_sp_port = netdev_priv(dev);
 
 	memcpy(stats, mlxsw_sp_port->hw_stats.cache, sizeof(*stats));
-
-	return stats;
 }
 
 int mlxsw_sp_port_vlan_set(struct mlxsw_sp_port *mlxsw_sp_port, u16 vid_begin,
diff --git a/drivers/net/ethernet/mellanox/mlxsw/switchx2.c b/drivers/net/ethernet/mellanox/mlxsw/switchx2.c
index 88ce67b9dd22..5a2040843d0a 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/switchx2.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/switchx2.c
@@ -382,7 +382,7 @@ static int mlxsw_sx_port_change_mtu(struct net_device *dev, int mtu)
 	return 0;
 }
 
-static struct rtnl_link_stats64 *
+static void
 mlxsw_sx_port_get_stats64(struct net_device *dev,
 			  struct rtnl_link_stats64 *stats)
 {
@@ -411,7 +411,6 @@ mlxsw_sx_port_get_stats64(struct net_device *dev,
 		tx_dropped	+= p->tx_dropped;
 	}
 	stats->tx_dropped	= tx_dropped;
-	return stats;
 }
 
 static int mlxsw_sx_port_get_phys_port_name(struct net_device *dev, char *name,
diff --git a/drivers/net/ethernet/myricom/myri10ge/myri10ge.c b/drivers/net/ethernet/myricom/myri10ge/myri10ge.c
index d73bebb0d7c6..9af5dbdab50c 100644
--- a/drivers/net/ethernet/myricom/myri10ge/myri10ge.c
+++ b/drivers/net/ethernet/myricom/myri10ge/myri10ge.c
@@ -383,8 +383,8 @@ static inline void put_be32(__be32 val, __be32 __iomem * p)
 	__raw_writel((__force __u32) val, (__force void __iomem *)p);
 }
 
-static struct rtnl_link_stats64 *myri10ge_get_stats(struct net_device *dev,
-						    struct rtnl_link_stats64 *stats);
+static void myri10ge_get_stats(struct net_device *dev,
+			       struct rtnl_link_stats64 *stats);
 
 static void set_fw_name(struct myri10ge_priv *mgp, char *name, bool allocated)
 {
@@ -3131,8 +3131,8 @@ drop:
 	return NETDEV_TX_OK;
 }
 
-static struct rtnl_link_stats64 *myri10ge_get_stats(struct net_device *dev,
-						    struct rtnl_link_stats64 *stats)
+static void myri10ge_get_stats(struct net_device *dev,
+			       struct rtnl_link_stats64 *stats)
 {
 	const struct myri10ge_priv *mgp = netdev_priv(dev);
 	const struct myri10ge_slice_netstats *slice_stats;
@@ -3147,7 +3147,6 @@ static struct rtnl_link_stats64 *myri10ge_get_stats(struct net_device *dev,
 		stats->rx_dropped += slice_stats->rx_dropped;
 		stats->tx_dropped += slice_stats->tx_dropped;
 	}
-	return stats;
 }
 
 static void myri10ge_set_multicast_list(struct net_device *dev)
diff --git a/drivers/net/ethernet/neterion/vxge/vxge-main.c b/drivers/net/ethernet/neterion/vxge/vxge-main.c
index 58127161ca20..f07bdb259359 100644
--- a/drivers/net/ethernet/neterion/vxge/vxge-main.c
+++ b/drivers/net/ethernet/neterion/vxge/vxge-main.c
@@ -3117,7 +3117,7 @@ static int vxge_change_mtu(struct net_device *dev, int new_mtu)
  * @stats: pointer to struct rtnl_link_stats64
  *
  */
-static struct rtnl_link_stats64 *
+static void
 vxge_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *net_stats)
 {
 	struct vxgedev *vdev = netdev_priv(dev);
@@ -3156,8 +3156,6 @@ vxge_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *net_stats)
 		net_stats->tx_bytes += bytes;
 		net_stats->tx_errors += txstats->tx_errors;
 	}
-
-	return net_stats;
 }
 
 static enum vxge_hw_status vxge_timestamp_config(struct __vxge_hw_device *devh)
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index de17d3265a77..484e4fb9f188 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@ -2363,8 +2363,8 @@ static int nfp_net_change_mtu(struct net_device *netdev, int new_mtu)
 	return nfp_net_ring_reconfig(nn, &rx, NULL);
 }
 
-static struct rtnl_link_stats64 *nfp_net_stat64(struct net_device *netdev,
-						struct rtnl_link_stats64 *stats)
+static void nfp_net_stat64(struct net_device *netdev,
+			   struct rtnl_link_stats64 *stats)
 {
 	struct nfp_net *nn = netdev_priv(netdev);
 	int r;
@@ -2394,8 +2394,6 @@ static struct rtnl_link_stats64 *nfp_net_stat64(struct net_device *netdev,
 		stats->tx_bytes += data[1];
 		stats->tx_errors += data[2];
 	}
-
-	return stats;
 }
 
 static int nfp_net_set_features(struct net_device *netdev,
diff --git a/drivers/net/ethernet/nvidia/forcedeth.c b/drivers/net/ethernet/nvidia/forcedeth.c
index 587f31dba134..81f4a55885c5 100644
--- a/drivers/net/ethernet/nvidia/forcedeth.c
+++ b/drivers/net/ethernet/nvidia/forcedeth.c
@@ -1735,7 +1735,7 @@ static void nv_update_stats(struct net_device *dev)
  * Called with read_lock(&dev_base_lock) held for read -
  * only synchronized against unregister_netdevice.
  */
-static struct rtnl_link_stats64*
+static void
 nv_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *storage)
 	__acquires(&netdev_priv(dev)->hwstats_lock)
 	__releases(&netdev_priv(dev)->hwstats_lock)
@@ -1795,8 +1795,6 @@ nv_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *storage)
 
 		spin_unlock_bh(&np->hwstats_lock);
 	}
-
-	return storage;
 }
 
 /*
diff --git a/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c b/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c
index 0371f9f997ce..e8a32907dad5 100644
--- a/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c
+++ b/drivers/net/ethernet/qlogic/netxen/netxen_nic_main.c
@@ -90,8 +90,8 @@ static irqreturn_t netxen_msix_intr(int irq, void *data);
 
 static void netxen_free_ip_list(struct netxen_adapter *, bool);
 static void netxen_restore_indev_addr(struct net_device *dev, unsigned long);
-static struct rtnl_link_stats64 *netxen_nic_get_stats(struct net_device *dev,
-						      struct rtnl_link_stats64 *stats);
+static void netxen_nic_get_stats(struct net_device *dev,
+				 struct rtnl_link_stats64 *stats);
 static int netxen_nic_set_mac(struct net_device *netdev, void *p);
 
 /*  PCI Device ID Table  */
@@ -2295,8 +2295,8 @@ request_reset:
 	clear_bit(__NX_RESETTING, &adapter->state);
 }
 
-static struct rtnl_link_stats64 *netxen_nic_get_stats(struct net_device *netdev,
-						      struct rtnl_link_stats64 *stats)
+static void netxen_nic_get_stats(struct net_device *netdev,
+				 struct rtnl_link_stats64 *stats)
 {
 	struct netxen_adapter *adapter = netdev_priv(netdev);
 
@@ -2306,8 +2306,6 @@ static struct rtnl_link_stats64 *netxen_nic_get_stats(struct net_device *netdev,
 	stats->tx_bytes = adapter->stats.txbytes;
 	stats->rx_dropped = adapter->stats.rxdropped;
 	stats->tx_dropped = adapter->stats.txdropped;
-
-	return stats;
 }
 
 static irqreturn_t netxen_intr(int irq, void *data)
* Unmerged path drivers/net/ethernet/qlogic/qede/qede_main.c
* Unmerged path drivers/net/ethernet/qualcomm/emac/emac.c
diff --git a/drivers/net/ethernet/realtek/8139too.c b/drivers/net/ethernet/realtek/8139too.c
index 6119c59bdabc..bca175e44786 100644
--- a/drivers/net/ethernet/realtek/8139too.c
+++ b/drivers/net/ethernet/realtek/8139too.c
@@ -649,9 +649,8 @@ static int rtl8139_poll(struct napi_struct *napi, int budget);
 static irqreturn_t rtl8139_interrupt (int irq, void *dev_instance);
 static int rtl8139_close (struct net_device *dev);
 static int netdev_ioctl (struct net_device *dev, struct ifreq *rq, int cmd);
-static struct rtnl_link_stats64 *rtl8139_get_stats64(struct net_device *dev,
-						    struct rtnl_link_stats64
-						    *stats);
+static void rtl8139_get_stats64(struct net_device *dev,
+				struct rtnl_link_stats64 *stats);
 static void rtl8139_set_rx_mode (struct net_device *dev);
 static void __set_rx_mode (struct net_device *dev);
 static void rtl8139_hw_start (struct net_device *dev);
@@ -2501,7 +2500,7 @@ static int netdev_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 }
 
 
-static struct rtnl_link_stats64 *
+static void
 rtl8139_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct rtl8139_private *tp = netdev_priv(dev);
@@ -2529,8 +2528,6 @@ rtl8139_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 		stats->tx_packets = tp->tx_stats.packets;
 		stats->tx_bytes = tp->tx_stats.bytes;
 	} while (u64_stats_fetch_retry_irq(&tp->tx_stats.syncp, start));
-
-	return stats;
 }
 
 /* Set or clear the multicast filter for this adaptor.
diff --git a/drivers/net/ethernet/realtek/r8169.c b/drivers/net/ethernet/realtek/r8169.c
index 98b3c1c4aff3..c8af0faebcc6 100644
--- a/drivers/net/ethernet/realtek/r8169.c
+++ b/drivers/net/ethernet/realtek/r8169.c
@@ -7759,7 +7759,7 @@ err_pm_runtime_put:
 	goto out;
 }
 
-static struct rtnl_link_stats64 *
+static void
 rtl8169_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct rtl8169_private *tp = netdev_priv(dev);
@@ -7813,8 +7813,6 @@ rtl8169_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 		le16_to_cpu(tp->tc_offset.tx_aborted);
 
 	pm_runtime_put_noidle(&pdev->dev);
-
-	return stats;
 }
 
 static void rtl8169_net_suspend(struct net_device *dev)
* Unmerged path drivers/net/ethernet/samsung/sxgbe/sxgbe_main.c
diff --git a/drivers/net/ethernet/sfc/efx.c b/drivers/net/ethernet/sfc/efx.c
index de397100ce79..9fa2c7383e10 100644
--- a/drivers/net/ethernet/sfc/efx.c
+++ b/drivers/net/ethernet/sfc/efx.c
@@ -2191,16 +2191,14 @@ int efx_net_stop(struct net_device *net_dev)
 }
 
 /* Context: process, dev_base_lock or RTNL held, non-blocking. */
-static struct rtnl_link_stats64 *efx_net_stats(struct net_device *net_dev,
-					       struct rtnl_link_stats64 *stats)
+static void efx_net_stats(struct net_device *net_dev,
+			  struct rtnl_link_stats64 *stats)
 {
 	struct efx_nic *efx = netdev_priv(net_dev);
 
 	spin_lock_bh(&efx->stats_lock);
 	efx->type->update_stats(efx, NULL, stats);
 	spin_unlock_bh(&efx->stats_lock);
-
-	return stats;
 }
 
 /* Context: netif_tx_lock held, BHs disabled. */
diff --git a/drivers/net/ethernet/sfc/falcon/efx.c b/drivers/net/ethernet/sfc/falcon/efx.c
index 272887976834..8d2d3ccb910b 100644
--- a/drivers/net/ethernet/sfc/falcon/efx.c
+++ b/drivers/net/ethernet/sfc/falcon/efx.c
@@ -2126,16 +2126,14 @@ int ef4_net_stop(struct net_device *net_dev)
 }
 
 /* Context: process, dev_base_lock or RTNL held, non-blocking. */
-static struct rtnl_link_stats64 *ef4_net_stats(struct net_device *net_dev,
-					       struct rtnl_link_stats64 *stats)
+static void ef4_net_stats(struct net_device *net_dev,
+			  struct rtnl_link_stats64 *stats)
 {
 	struct ef4_nic *efx = netdev_priv(net_dev);
 
 	spin_lock_bh(&efx->stats_lock);
 	efx->type->update_stats(efx, NULL, stats);
 	spin_unlock_bh(&efx->stats_lock);
-
-	return stats;
 }
 
 /* Context: netif_tx_lock held, BHs disabled. */
diff --git a/drivers/net/ethernet/sun/niu.c b/drivers/net/ethernet/sun/niu.c
index f9a24a063e1b..60c8f6cfc876 100644
--- a/drivers/net/ethernet/sun/niu.c
+++ b/drivers/net/ethernet/sun/niu.c
@@ -6293,8 +6293,8 @@ no_rings:
 	stats->tx_errors = errors;
 }
 
-static struct rtnl_link_stats64 *niu_get_stats(struct net_device *dev,
-					       struct rtnl_link_stats64 *stats)
+static void niu_get_stats(struct net_device *dev,
+			  struct rtnl_link_stats64 *stats)
 {
 	struct niu *np = netdev_priv(dev);
 
@@ -6302,8 +6302,6 @@ static struct rtnl_link_stats64 *niu_get_stats(struct net_device *dev,
 		niu_get_rx_stats(np, stats);
 		niu_get_tx_stats(np, stats);
 	}
-
-	return stats;
 }
 
 static void niu_load_hash_xmac(struct niu *np, u16 *hash)
* Unmerged path drivers/net/ethernet/synopsys/dwc_eth_qos.c
* Unmerged path drivers/net/ethernet/tile/tilepro.c
diff --git a/drivers/net/ethernet/via/via-rhine.c b/drivers/net/ethernet/via/via-rhine.c
index cbedb26130e8..d03a5f16925b 100644
--- a/drivers/net/ethernet/via/via-rhine.c
+++ b/drivers/net/ethernet/via/via-rhine.c
@@ -503,8 +503,8 @@ static irqreturn_t rhine_interrupt(int irq, void *dev_instance);
 static void rhine_tx(struct net_device *dev);
 static int rhine_rx(struct net_device *dev, int limit);
 static void rhine_set_rx_mode(struct net_device *dev);
-static struct rtnl_link_stats64 *rhine_get_stats64(struct net_device *dev,
-	       struct rtnl_link_stats64 *stats);
+static void rhine_get_stats64(struct net_device *dev,
+			      struct rtnl_link_stats64 *stats);
 static int netdev_ioctl(struct net_device *dev, struct ifreq *rq, int cmd);
 static const struct ethtool_ops netdev_ethtool_ops;
 static int  rhine_close(struct net_device *dev);
@@ -2038,7 +2038,7 @@ out_unlock:
 	mutex_unlock(&rp->task_lock);
 }
 
-static struct rtnl_link_stats64 *
+static void
 rhine_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct rhine_private *rp = netdev_priv(dev);
@@ -2061,8 +2061,6 @@ rhine_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 		stats->tx_packets = rp->tx_stats.packets;
 		stats->tx_bytes = rp->tx_stats.bytes;
 	} while (u64_stats_fetch_retry_irq(&rp->tx_stats.syncp, start));
-
-	return stats;
 }
 
 static void rhine_set_rx_mode(struct net_device *dev)
diff --git a/drivers/net/fjes/fjes_main.c b/drivers/net/fjes/fjes_main.c
index 5a4c4d038306..03ba82680e04 100644
--- a/drivers/net/fjes/fjes_main.c
+++ b/drivers/net/fjes/fjes_main.c
@@ -59,8 +59,7 @@ static void fjes_raise_intr_rxdata_task(struct work_struct *);
 static void fjes_tx_stall_task(struct work_struct *);
 static void fjes_force_close_task(struct work_struct *);
 static irqreturn_t fjes_intr(int, void*);
-static struct rtnl_link_stats64 *
-fjes_get_stats64(struct net_device *, struct rtnl_link_stats64 *);
+static void fjes_get_stats64(struct net_device *, struct rtnl_link_stats64 *);
 static int fjes_change_mtu(struct net_device *, int);
 static int fjes_vlan_rx_add_vid(struct net_device *, __be16 proto, u16);
 static int fjes_vlan_rx_kill_vid(struct net_device *, __be16 proto, u16);
@@ -816,14 +815,12 @@ static void fjes_tx_retry(struct net_device *netdev)
 	netif_tx_wake_queue(queue);
 }
 
-static struct rtnl_link_stats64 *
+static void
 fjes_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
 {
 	struct fjes_adapter *adapter = netdev_priv(netdev);
 
 	memcpy(stats, &adapter->stats64, sizeof(struct rtnl_link_stats64));
-
-	return stats;
 }
 
 static int fjes_change_mtu(struct net_device *netdev, int new_mtu)
diff --git a/drivers/net/hyperv/netvsc_drv.c b/drivers/net/hyperv/netvsc_drv.c
index 105ddc4e23d9..ce9823b1a05c 100644
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@ -919,8 +919,8 @@ out:
 	return ret;
 }
 
-static struct rtnl_link_stats64 *netvsc_get_stats64(struct net_device *net,
-						    struct rtnl_link_stats64 *t)
+static void netvsc_get_stats64(struct net_device *net,
+			       struct rtnl_link_stats64 *t)
 {
 	struct net_device_context *ndev_ctx = netdev_priv(net);
 	int cpu;
@@ -958,8 +958,6 @@ static struct rtnl_link_stats64 *netvsc_get_stats64(struct net_device *net,
 
 	t->rx_dropped	= net->stats.rx_dropped;
 	t->rx_errors	= net->stats.rx_errors;
-
-	return t;
 }
 
 static int netvsc_set_mac_addr(struct net_device *ndev, void *p)
diff --git a/drivers/net/ifb.c b/drivers/net/ifb.c
index c69ebf414c33..f0a905a436a1 100644
--- a/drivers/net/ifb.c
+++ b/drivers/net/ifb.c
@@ -129,8 +129,8 @@ resched:
 
 }
 
-static struct rtnl_link_stats64 *ifb_stats64(struct net_device *dev,
-					     struct rtnl_link_stats64 *stats)
+static void ifb_stats64(struct net_device *dev,
+			struct rtnl_link_stats64 *stats)
 {
 	struct ifb_private *dp = netdev_priv(dev);
 	unsigned int start;
@@ -151,8 +151,6 @@ static struct rtnl_link_stats64 *ifb_stats64(struct net_device *dev,
 
 	stats->rx_dropped = dev->stats.rx_dropped;
 	stats->tx_dropped = dev->stats.tx_dropped;
-
-	return stats;
 }
 
 
* Unmerged path drivers/net/ipvlan/ipvlan_main.c
diff --git a/drivers/net/loopback.c b/drivers/net/loopback.c
index 15521570f5cc..0bd4bcd1c470 100644
--- a/drivers/net/loopback.c
+++ b/drivers/net/loopback.c
@@ -98,8 +98,8 @@ static netdev_tx_t loopback_xmit(struct sk_buff *skb,
 	return NETDEV_TX_OK;
 }
 
-static struct rtnl_link_stats64 *loopback_get_stats64(struct net_device *dev,
-						      struct rtnl_link_stats64 *stats)
+static void loopback_get_stats64(struct net_device *dev,
+				 struct rtnl_link_stats64 *stats)
 {
 	u64 bytes = 0;
 	u64 packets = 0;
@@ -123,7 +123,6 @@ static struct rtnl_link_stats64 *loopback_get_stats64(struct net_device *dev,
 	stats->tx_packets = packets;
 	stats->rx_bytes   = bytes;
 	stats->tx_bytes   = bytes;
-	return stats;
 }
 
 static u32 always_on(struct net_device *dev)
diff --git a/drivers/net/macsec.c b/drivers/net/macsec.c
index 8665a14a86f9..e447b301d697 100644
--- a/drivers/net/macsec.c
+++ b/drivers/net/macsec.c
@@ -2902,13 +2902,13 @@ static int macsec_change_mtu(struct net_device *dev, int new_mtu)
 	return 0;
 }
 
-static struct rtnl_link_stats64 *macsec_get_stats64(struct net_device *dev,
-						    struct rtnl_link_stats64 *s)
+static void macsec_get_stats64(struct net_device *dev,
+			       struct rtnl_link_stats64 *s)
 {
 	int cpu;
 
 	if (!dev->tstats)
-		return s;
+		return;
 
 	for_each_possible_cpu(cpu) {
 		struct pcpu_sw_netstats *stats;
@@ -2932,8 +2932,6 @@ static struct rtnl_link_stats64 *macsec_get_stats64(struct net_device *dev,
 
 	s->rx_dropped = dev->stats.rx_dropped;
 	s->tx_dropped = dev->stats.tx_dropped;
-
-	return s;
 }
 
 static int macsec_get_iflink(const struct net_device *dev)
diff --git a/drivers/net/macvlan.c b/drivers/net/macvlan.c
index 615c47dc710b..f8a63479771e 100644
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@ -638,8 +638,8 @@ static void macvlan_uninit(struct net_device *dev)
 		macvlan_port_destroy(port->dev);
 }
 
-static struct rtnl_link_stats64 *macvlan_dev_get_stats64(struct net_device *dev,
-							 struct rtnl_link_stats64 *stats)
+static void macvlan_dev_get_stats64(struct net_device *dev,
+				    struct rtnl_link_stats64 *stats)
 {
 	struct macvlan_dev *vlan = netdev_priv(dev);
 
@@ -676,7 +676,6 @@ static struct rtnl_link_stats64 *macvlan_dev_get_stats64(struct net_device *dev,
 		stats->rx_dropped	= rx_errors;
 		stats->tx_dropped	= tx_dropped;
 	}
-	return stats;
 }
 
 static int macvlan_vlan_rx_add_vid(struct net_device *dev,
diff --git a/drivers/net/nlmon.c b/drivers/net/nlmon.c
index 038246c26d78..1818ca90818a 100644
--- a/drivers/net/nlmon.c
+++ b/drivers/net/nlmon.c
@@ -77,7 +77,7 @@ static int nlmon_close(struct net_device *dev)
 	return netlink_remove_tap(&nlmon->nt);
 }
 
-static struct rtnl_link_stats64 *
+static void
 nlmon_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	int i;
@@ -105,8 +105,6 @@ nlmon_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 
 	stats->rx_bytes = bytes;
 	stats->tx_bytes = 0;
-
-	return stats;
 }
 
 static u32 always_on(struct net_device *dev)
diff --git a/drivers/net/ppp/ppp_generic.c b/drivers/net/ppp/ppp_generic.c
index 565165b4d88a..1ab131aaa35c 100644
--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -1034,7 +1034,7 @@ ppp_net_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 	return err;
 }
 
-static struct rtnl_link_stats64*
+static void
 ppp_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats64)
 {
 	struct ppp *ppp = netdev_priv(dev);
@@ -1054,8 +1054,6 @@ ppp_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats64)
 	stats64->rx_dropped       = dev->stats.rx_dropped;
 	stats64->tx_dropped       = dev->stats.tx_dropped;
 	stats64->rx_length_errors = dev->stats.rx_length_errors;
-
-	return stats64;
 }
 
 static int ppp_dev_init(struct net_device *dev)
diff --git a/drivers/net/slip/slip.c b/drivers/net/slip/slip.c
index 7919288ba54c..bb45808e9bba 100644
--- a/drivers/net/slip/slip.c
+++ b/drivers/net/slip/slip.c
@@ -571,7 +571,7 @@ static int sl_change_mtu(struct net_device *dev, int new_mtu)
 
 /* Netdevice get statistics request */
 
-static struct rtnl_link_stats64 *
+static void
 sl_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct net_device_stats *devstats = &dev->stats;
@@ -602,7 +602,6 @@ sl_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 		stats->collisions     += comp->sls_o_misses;
 	}
 #endif
-	return stats;
 }
 
 /* Netdevice register callback */
diff --git a/drivers/net/team/team.c b/drivers/net/team/team.c
index aec0958a995e..0d0200e100b1 100644
--- a/drivers/net/team/team.c
+++ b/drivers/net/team/team.c
@@ -1792,7 +1792,7 @@ unwind:
 	return err;
 }
 
-static struct rtnl_link_stats64 *
+static void
 team_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	struct team *team = netdev_priv(dev);
@@ -1829,7 +1829,6 @@ team_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 	stats->rx_dropped	= rx_dropped;
 	stats->tx_dropped	= tx_dropped;
 	stats->rx_nohandler	= rx_nohandler;
-	return stats;
 }
 
 static int team_vlan_rx_add_vid(struct net_device *dev, __be16 proto, u16 vid)
diff --git a/drivers/net/tun.c b/drivers/net/tun.c
index d9aef016340e..051d285d3d78 100644
--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -908,7 +908,7 @@ static netdev_features_t tun_net_fix_features(struct net_device *dev,
 	return (features & tun->set_features) | (features & ~TUN_USER_FEATURES);
 }
 
-static struct rtnl_link_stats64 *
+static void
 tun_net_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	u32 rx_dropped = 0, tx_dropped = 0, rx_frame_errors = 0;
@@ -942,7 +942,6 @@ tun_net_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 	stats->rx_dropped  = rx_dropped;
 	stats->rx_frame_errors = rx_frame_errors;
 	stats->tx_dropped = tx_dropped;
-	return stats;
 }
 
 #ifdef CONFIG_NET_POLL_CONTROLLER
diff --git a/drivers/net/veth.c b/drivers/net/veth.c
index 81422091c337..2094318970c3 100644
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@ -161,8 +161,8 @@ static u64 veth_stats_one(struct pcpu_vstats *result, struct net_device *dev)
 	return atomic64_read(&priv->dropped);
 }
 
-static struct rtnl_link_stats64 *veth_get_stats64(struct net_device *dev,
-						  struct rtnl_link_stats64 *tot)
+static void veth_get_stats64(struct net_device *dev,
+			     struct rtnl_link_stats64 *tot)
 {
 	struct veth_priv *priv = netdev_priv(dev);
 	struct net_device *peer;
@@ -180,8 +180,6 @@ static struct rtnl_link_stats64 *veth_get_stats64(struct net_device *dev,
 		tot->rx_packets = one.packets;
 	}
 	rcu_read_unlock();
-
-	return tot;
 }
 
 static int veth_open(struct net_device *dev)
diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 27d840eb5123..c90083f09b93 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -911,8 +911,8 @@ static int virtnet_set_mac_address(struct net_device *dev, void *p)
 	return 0;
 }
 
-static struct rtnl_link_stats64 *virtnet_stats(struct net_device *dev,
-					       struct rtnl_link_stats64 *tot)
+static void virtnet_stats(struct net_device *dev,
+			  struct rtnl_link_stats64 *tot)
 {
 	struct virtnet_info *vi = netdev_priv(dev);
 	int cpu;
@@ -945,8 +945,6 @@ static struct rtnl_link_stats64 *virtnet_stats(struct net_device *dev,
 	tot->rx_dropped = dev->stats.rx_dropped;
 	tot->rx_length_errors = dev->stats.rx_length_errors;
 	tot->rx_frame_errors = dev->stats.rx_frame_errors;
-
-	return tot;
 }
 
 #ifdef CONFIG_NET_POLL_CONTROLLER
diff --git a/drivers/net/vmxnet3/vmxnet3_ethtool.c b/drivers/net/vmxnet3/vmxnet3_ethtool.c
index 9ba11d737753..922d4a818bce 100644
--- a/drivers/net/vmxnet3/vmxnet3_ethtool.c
+++ b/drivers/net/vmxnet3/vmxnet3_ethtool.c
@@ -113,7 +113,7 @@ vmxnet3_global_stats[] = {
 };
 
 
-struct rtnl_link_stats64 *
+void
 vmxnet3_get_stats64(struct net_device *netdev,
 		   struct rtnl_link_stats64 *stats)
 {
@@ -160,8 +160,6 @@ vmxnet3_get_stats64(struct net_device *netdev,
 		stats->rx_dropped += drvRxStats->drop_total;
 		stats->multicast +=  devRxStats->mcastPktsRxOK;
 	}
-
-	return stats;
 }
 
 static int
diff --git a/drivers/net/vmxnet3/vmxnet3_int.h b/drivers/net/vmxnet3/vmxnet3_int.h
index c4825392d64b..7fcdde8481ad 100644
--- a/drivers/net/vmxnet3/vmxnet3_int.h
+++ b/drivers/net/vmxnet3/vmxnet3_int.h
@@ -422,8 +422,8 @@ vmxnet3_create_queues(struct vmxnet3_adapter *adapter,
 
 void vmxnet3_set_ethtool_ops(struct net_device *netdev);
 
-struct rtnl_link_stats64 *
-vmxnet3_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats);
+void vmxnet3_get_stats64(struct net_device *dev,
+			 struct rtnl_link_stats64 *stats);
 
 extern char vmxnet3_driver_name[];
 #endif
* Unmerged path drivers/net/vrf.c
diff --git a/drivers/net/xen-netfront.c b/drivers/net/xen-netfront.c
index ff2535f43f28..33bf3bc7da43 100644
--- a/drivers/net/xen-netfront.c
+++ b/drivers/net/xen-netfront.c
@@ -1072,8 +1072,8 @@ static int xennet_change_mtu(struct net_device *dev, int mtu)
 	return 0;
 }
 
-static struct rtnl_link_stats64 *xennet_get_stats64(struct net_device *dev,
-						    struct rtnl_link_stats64 *tot)
+static void xennet_get_stats64(struct net_device *dev,
+			       struct rtnl_link_stats64 *tot)
 {
 	struct netfront_info *np = netdev_priv(dev);
 	int cpu;
@@ -1104,8 +1104,6 @@ static struct rtnl_link_stats64 *xennet_get_stats64(struct net_device *dev,
 
 	tot->rx_errors  = dev->stats.rx_errors;
 	tot->tx_dropped = dev->stats.tx_dropped;
-
-	return tot;
 }
 
 static void xennet_release_tx_bufs(struct netfront_queue *queue)
* Unmerged path drivers/staging/netlogic/xlr_net.c
* Unmerged path include/linux/netdevice.h
diff --git a/include/net/ip_tunnels.h b/include/net/ip_tunnels.h
index 77a1d469ebe3..f5985c1377cb 100644
--- a/include/net/ip_tunnels.h
+++ b/include/net/ip_tunnels.h
@@ -281,8 +281,8 @@ int ip_tunnel_encap(struct sk_buff *skb, struct ip_tunnel *t,
 int __ip_tunnel_change_mtu(struct net_device *dev, int new_mtu, bool strict);
 int ip_tunnel_change_mtu(struct net_device *dev, int new_mtu);
 
-struct rtnl_link_stats64 *ip_tunnel_get_stats64(struct net_device *dev,
-						struct rtnl_link_stats64 *tot);
+void ip_tunnel_get_stats64(struct net_device *dev,
+			   struct rtnl_link_stats64 *tot);
 struct ip_tunnel *ip_tunnel_lookup(struct ip_tunnel_net *itn,
 				   int link, __be16 flags,
 				   __be32 remote, __be32 local,
* Unmerged path net/8021q/vlan_dev.c
diff --git a/net/bridge/br_device.c b/net/bridge/br_device.c
index f29f37ba5a74..0e97178c296e 100644
--- a/net/bridge/br_device.c
+++ b/net/bridge/br_device.c
@@ -163,8 +163,8 @@ static int br_dev_stop(struct net_device *dev)
 	return 0;
 }
 
-static struct rtnl_link_stats64 *br_get_stats64(struct net_device *dev,
-						struct rtnl_link_stats64 *stats)
+static void br_get_stats64(struct net_device *dev,
+			   struct rtnl_link_stats64 *stats)
 {
 	struct net_bridge *br = netdev_priv(dev);
 	struct pcpu_sw_netstats tmp, sum = { 0 };
@@ -188,8 +188,6 @@ static struct rtnl_link_stats64 *br_get_stats64(struct net_device *dev,
 	stats->tx_packets = sum.tx_packets;
 	stats->rx_bytes   = sum.rx_bytes;
 	stats->rx_packets = sum.rx_packets;
-
-	return stats;
 }
 
 static int br_change_mtu(struct net_device *dev, int new_mtu)
diff --git a/net/ipv4/ip_tunnel_core.c b/net/ipv4/ip_tunnel_core.c
index abae196ffa6d..efc64feceeec 100644
--- a/net/ipv4/ip_tunnel_core.c
+++ b/net/ipv4/ip_tunnel_core.c
@@ -180,8 +180,8 @@ int iptunnel_handle_offloads(struct sk_buff *skb,
 EXPORT_SYMBOL_GPL(iptunnel_handle_offloads);
 
 /* Often modified stats are per cpu, other are shared (netdev->stats) */
-struct rtnl_link_stats64 *ip_tunnel_get_stats64(struct net_device *dev,
-						struct rtnl_link_stats64 *tot)
+void ip_tunnel_get_stats64(struct net_device *dev,
+			   struct rtnl_link_stats64 *tot)
 {
 	int i;
 
@@ -205,8 +205,6 @@ struct rtnl_link_stats64 *ip_tunnel_get_stats64(struct net_device *dev,
 		tot->rx_bytes   += rx_bytes;
 		tot->tx_bytes   += tx_bytes;
 	}
-
-	return tot;
 }
 EXPORT_SYMBOL_GPL(ip_tunnel_get_stats64);
 
* Unmerged path net/l2tp/l2tp_eth.c
diff --git a/net/mac80211/iface.c b/net/mac80211/iface.c
index 359b381e789e..cd145fe79a66 100644
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -1133,7 +1133,7 @@ static u16 ieee80211_netdev_select_queue(struct net_device *dev,
 	return ieee80211_select_queue(IEEE80211_DEV_TO_SUB_IF(dev), skb);
 }
 
-static struct rtnl_link_stats64 *
+static void
 ieee80211_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	int i;
@@ -1158,8 +1158,6 @@ ieee80211_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
 		stats->rx_bytes   += rx_bytes;
 		stats->tx_bytes   += tx_bytes;
 	}
-
-	return stats;
 }
 
 static const struct net_device_ops ieee80211_dataif_ops = {
diff --git a/net/openvswitch/vport-internal_dev.c b/net/openvswitch/vport-internal_dev.c
index d9a90c874130..afb8e36a151d 100644
--- a/net/openvswitch/vport-internal_dev.c
+++ b/net/openvswitch/vport-internal_dev.c
@@ -106,7 +106,7 @@ static void internal_dev_destructor(struct net_device *dev)
 	free_netdev(dev);
 }
 
-static struct rtnl_link_stats64 *
+static void
 internal_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
 {
 	int i;
@@ -134,8 +134,6 @@ internal_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
 		stats->tx_bytes         += local_stats.tx_bytes;
 		stats->tx_packets       += local_stats.tx_packets;
 	}
-
-	return stats;
 }
 
 static void internal_set_rx_headroom(struct net_device *dev, int new_hr)
diff --git a/net/sched/sch_teql.c b/net/sched/sch_teql.c
index fc509f02fcc3..9fd2efee2fcb 100644
--- a/net/sched/sch_teql.c
+++ b/net/sched/sch_teql.c
@@ -408,8 +408,8 @@ static int teql_master_close(struct net_device *dev)
 	return 0;
 }
 
-static struct rtnl_link_stats64 *teql_master_stats64(struct net_device *dev,
-						     struct rtnl_link_stats64 *stats)
+static void teql_master_stats64(struct net_device *dev,
+				struct rtnl_link_stats64 *stats)
 {
 	struct teql_master *m = netdev_priv(dev);
 
@@ -417,7 +417,6 @@ static struct rtnl_link_stats64 *teql_master_stats64(struct net_device *dev,
 	stats->tx_bytes		= m->tx_bytes;
 	stats->tx_errors	= m->tx_errors;
 	stats->tx_dropped	= m->tx_dropped;
-	return stats;
 }
 
 static int teql_master_mtu(struct net_device *dev, int new_mtu)
