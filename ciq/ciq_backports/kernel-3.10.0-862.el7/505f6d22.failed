sound: query dynamic DEBUG_PAGEALLOC setting

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Joonsoo Kim <iamjoonsoo.kim@lge.com>
commit 505f6d22dbc63f333d1178dc80264e40b5c35268
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/505f6d22.failed

We can disable debug_pagealloc processing even if the code is compiled
with CONFIG_DEBUG_PAGEALLOC.  This patch changes the code to query
whether it is enabled or not in runtime.

[akpm@linux-foundation.org: export _debug_pagealloc_enabled to modules]
	Signed-off-by: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Acked-by: David Rientjes <rientjes@google.com>
	Acked-by: Takashi Iwai <tiwai@suse.de>
	Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Cc: Chris Metcalf <cmetcalf@ezchip.com>
	Cc: Christian Borntraeger <borntraeger@de.ibm.com>
	Cc: Christoph Lameter <cl@linux.com>
	Cc: Pekka Enberg <penberg@kernel.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 505f6d22dbc63f333d1178dc80264e40b5c35268)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/page_alloc.c
diff --cc mm/page_alloc.c
index 1ea5aceae15f,b1fc19ebb8a2..000000000000
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@@ -528,6 -496,47 +528,50 @@@ static inline void prep_zero_page(struc
  
  #ifdef CONFIG_DEBUG_PAGEALLOC
  unsigned int _debug_guardpage_minorder;
++<<<<<<< HEAD
++=======
+ bool _debug_pagealloc_enabled __read_mostly
+ 			= IS_ENABLED(CONFIG_DEBUG_PAGEALLOC_ENABLE_DEFAULT);
+ EXPORT_SYMBOL(_debug_pagealloc_enabled);
+ bool _debug_guardpage_enabled __read_mostly;
+ 
+ static int __init early_debug_pagealloc(char *buf)
+ {
+ 	if (!buf)
+ 		return -EINVAL;
+ 
+ 	if (strcmp(buf, "on") == 0)
+ 		_debug_pagealloc_enabled = true;
+ 
+ 	if (strcmp(buf, "off") == 0)
+ 		_debug_pagealloc_enabled = false;
+ 
+ 	return 0;
+ }
+ early_param("debug_pagealloc", early_debug_pagealloc);
+ 
+ static bool need_debug_guardpage(void)
+ {
+ 	/* If we don't use debug_pagealloc, we don't need guard page */
+ 	if (!debug_pagealloc_enabled())
+ 		return false;
+ 
+ 	return true;
+ }
+ 
+ static void init_debug_guardpage(void)
+ {
+ 	if (!debug_pagealloc_enabled())
+ 		return;
+ 
+ 	_debug_guardpage_enabled = true;
+ }
+ 
+ struct page_ext_operations debug_guardpage_ops = {
+ 	.need = need_debug_guardpage,
+ 	.init = init_debug_guardpage,
+ };
++>>>>>>> 505f6d22dbc6 (sound: query dynamic DEBUG_PAGEALLOC setting)
  
  static int __init debug_guardpage_minorder_setup(char *buf)
  {
* Unmerged path mm/page_alloc.c
diff --git a/sound/drivers/pcsp/pcsp.c b/sound/drivers/pcsp/pcsp.c
index 998f55749c47..663e8c7db599 100644
--- a/sound/drivers/pcsp/pcsp.c
+++ b/sound/drivers/pcsp/pcsp.c
@@ -14,6 +14,7 @@
 #include <linux/input.h>
 #include <linux/delay.h>
 #include <linux/bitops.h>
+#include <linux/mm.h>
 #include "pcsp_input.h"
 #include "pcsp.h"
 
@@ -148,11 +149,11 @@ static int alsa_card_pcsp_init(struct device *dev)
 		return err;
 	}
 
-#ifdef CONFIG_DEBUG_PAGEALLOC
 	/* Well, CONFIG_DEBUG_PAGEALLOC makes the sound horrible. Lets alert */
-	printk(KERN_WARNING "PCSP: CONFIG_DEBUG_PAGEALLOC is enabled, "
-	       "which may make the sound noisy.\n");
-#endif
+	if (debug_pagealloc_enabled()) {
+		printk(KERN_WARNING "PCSP: CONFIG_DEBUG_PAGEALLOC is enabled, "
+		       "which may make the sound noisy.\n");
+	}
 
 	return 0;
 }
