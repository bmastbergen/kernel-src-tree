target: change core_tpg_register prototype

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] change core_tpg_register prototype (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 89.47%
commit-author Christoph Hellwig <hch@lst.de>
commit e4aae5af810eaa61c2cd7ba79d95ebfe0d88fe9b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e4aae5af.failed

Remove the unneeded fabric_ptr argument, and change the type argument
to pass in a SPC protocol identifier.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit e4aae5af810eaa61c2cd7ba79d95ebfe0d88fe9b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/target/tcm_mod_builder.py
#	drivers/infiniband/ulp/srpt/ib_srpt.c
#	drivers/scsi/qla2xxx/tcm_qla2xxx.c
#	drivers/target/iscsi/iscsi_target_configfs.c
#	drivers/target/iscsi/iscsi_target_tpg.c
#	drivers/target/loopback/tcm_loop.c
#	drivers/target/sbp/sbp_target.c
#	drivers/target/tcm_fc/tfc_conf.c
#	drivers/usb/gadget/tcm_usb_gadget.c
#	drivers/vhost/scsi.c
#	drivers/xen/xen-scsiback.c
#	include/target/target_core_fabric.h
diff --cc Documentation/target/tcm_mod_builder.py
index 3fe0d812dcec,b04846e985d4..000000000000
--- a/Documentation/target/tcm_mod_builder.py
+++ b/Documentation/target/tcm_mod_builder.py
@@@ -309,9 -237,8 +309,14 @@@ def tcm_mod_build_configfs(proto_ident
  	buf += "	}\n"
  	buf += "	tpg->" + fabric_mod_port + " = " + fabric_mod_port + ";\n"
  	buf += "	tpg->" + fabric_mod_port + "_tpgt = tpgt;\n\n"
++<<<<<<< HEAD
 +	buf += "	ret = core_tpg_register(&" + fabric_mod_name + "_fabric_configfs->tf_ops, wwn,\n"
 +	buf += "				&tpg->se_tpg, (void *)tpg,\n"
 +	buf += "				TRANSPORT_TPG_TYPE_NORMAL);\n"
++=======
+ 	buf += "	ret = core_tpg_register(&" + fabric_mod_name + "_ops, wwn,\n"
+ 	buf += "				&tpg->se_tpg, SCSI_PROTOCOL_SAS);\n"
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	buf += "	if (ret < 0) {\n"
  	buf += "		kfree(tpg);\n"
  	buf += "		return NULL;\n"
diff --cc drivers/infiniband/ulp/srpt/ib_srpt.c
index 72146d165e84,8eed6089c5d7..000000000000
--- a/drivers/infiniband/ulp/srpt/ib_srpt.c
+++ b/drivers/infiniband/ulp/srpt/ib_srpt.c
@@@ -3151,8 -3790,8 +3151,13 @@@ static struct se_portal_group *srpt_mak
  	int res;
  
  	/* Initialize sport->port_wwn and sport->port_tpg_1 */
++<<<<<<< HEAD
 +	res = core_tpg_register(&srpt_target->tf_ops, &sport->port_wwn,
 +			&sport->port_tpg_1, sport, TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	res = core_tpg_register(&srpt_template, &sport->port_wwn,
+ 			&sport->port_tpg_1, SCSI_PROTOCOL_SRP);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (res)
  		return ERR_PTR(res);
  
diff --cc drivers/scsi/qla2xxx/tcm_qla2xxx.c
index 14250fcfe054,30cbfa6dc3e6..000000000000
--- a/drivers/scsi/qla2xxx/tcm_qla2xxx.c
+++ b/drivers/scsi/qla2xxx/tcm_qla2xxx.c
@@@ -1056,8 -1113,8 +1056,13 @@@ static struct se_portal_group *tcm_qla2
  	tpg->tpg_attrib.cache_dynamic_acls = 1;
  	tpg->tpg_attrib.demo_mode_login_only = 1;
  
++<<<<<<< HEAD
 +	ret = core_tpg_register(&tcm_qla2xxx_fabric_configfs->tf_ops, wwn,
 +				&tpg->se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	ret = core_tpg_register(&tcm_qla2xxx_ops, wwn, &tpg->se_tpg,
+ 				SCSI_PROTOCOL_FCP);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0) {
  		kfree(tpg);
  		return NULL;
@@@ -1119,8 -1224,17 +1124,22 @@@ static struct se_portal_group *tcm_qla2
  	tpg->lport = lport;
  	tpg->lport_tpgt = tpgt;
  
++<<<<<<< HEAD
 +	ret = core_tpg_register(&tcm_qla2xxx_npiv_fabric_configfs->tf_ops, wwn,
 +				&tpg->se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	/*
+ 	 * By default allow READ-ONLY TPG demo-mode access w/ cached dynamic
+ 	 * NodeACLs
+ 	 */
+ 	tpg->tpg_attrib.generate_node_acls = 1;
+ 	tpg->tpg_attrib.demo_mode_write_protect = 1;
+ 	tpg->tpg_attrib.cache_dynamic_acls = 1;
+ 	tpg->tpg_attrib.demo_mode_login_only = 1;
+ 
+ 	ret = core_tpg_register(&tcm_qla2xxx_npiv_ops, wwn, &tpg->se_tpg,
+ 				SCSI_PROTOCOL_FCP);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0) {
  		kfree(tpg);
  		return NULL;
diff --cc drivers/target/iscsi/iscsi_target_configfs.c
index e02616d0c024,0d5d88817a47..000000000000
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@@ -1551,10 -1420,8 +1551,15 @@@ static struct se_portal_group *lio_targ
  	if (!tpg)
  		return NULL;
  
++<<<<<<< HEAD
 +	ret = core_tpg_register(
 +			&lio_target_fabric_configfs->tf_ops,
 +			wwn, &tpg->tpg_se_tpg, tpg,
 +			TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	ret = core_tpg_register(&iscsi_ops, wwn, &tpg->tpg_se_tpg,
+ 				SCSI_PROTOCOL_ISCSI);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0)
  		return NULL;
  
diff --cc drivers/target/iscsi/iscsi_target_tpg.c
index 7005d3d54fdd,dcb7ede1d4aa..000000000000
--- a/drivers/target/iscsi/iscsi_target_tpg.c
+++ b/drivers/target/iscsi/iscsi_target_tpg.c
@@@ -68,10 -68,7 +68,14 @@@ int iscsit_load_discovery_tpg(void
  		return -1;
  	}
  
++<<<<<<< HEAD
 +	ret = core_tpg_register(
 +			&lio_target_fabric_configfs->tf_ops,
 +			NULL, &tpg->tpg_se_tpg, tpg,
 +			TRANSPORT_TPG_TYPE_DISCOVERY);
++=======
+ 	ret = core_tpg_register(&iscsi_ops, NULL, &tpg->tpg_se_tpg, -1);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0) {
  		kfree(tpg);
  		return -1;
diff --cc drivers/target/loopback/tcm_loop.c
index d49ba0b7387a,3f264d436737..000000000000
--- a/drivers/target/loopback/tcm_loop.c
+++ b/drivers/target/loopback/tcm_loop.c
@@@ -1262,9 -1204,8 +1262,14 @@@ static struct se_portal_group *tcm_loop
  	/*
  	 * Register the tl_tpg as a emulated SAS TCM Target Endpoint
  	 */
++<<<<<<< HEAD
 +	ret = core_tpg_register(&tcm_loop_fabric_configfs->tf_ops,
 +			wwn, &tl_tpg->tl_se_tpg, tl_tpg,
 +			TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	ret = core_tpg_register(&loop_ops, wwn, &tl_tpg->tl_se_tpg,
+ 				tl_hba->tl_proto_id);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0)
  		return ERR_PTR(-ENOMEM);
  
diff --cc drivers/target/sbp/sbp_target.c
index b33c121ab56c,40b9f516cf9b..000000000000
--- a/drivers/target/sbp/sbp_target.c
+++ b/drivers/target/sbp/sbp_target.c
@@@ -2197,9 -2152,7 +2197,13 @@@ static struct se_portal_group *sbp_make
  		goto out_free_tpg;
  	}
  
++<<<<<<< HEAD
 +	ret = core_tpg_register(&sbp_fabric_configfs->tf_ops, wwn,
 +			&tpg->se_tpg, (void *)tpg,
 +			TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	ret = core_tpg_register(&sbp_ops, wwn, &tpg->se_tpg, SCSI_PROTOCOL_SBP);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0)
  		goto out_unreg_mgt_agt;
  
diff --cc drivers/target/tcm_fc/tfc_conf.c
index 8f5b91a74d09,8309c3d91387..000000000000
--- a/drivers/target/tcm_fc/tfc_conf.c
+++ b/drivers/target/tcm_fc/tfc_conf.c
@@@ -337,8 -283,8 +337,13 @@@ static struct se_portal_group *ft_add_t
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	ret = core_tpg_register(&ft_configfs->tf_ops, wwn, &tpg->se_tpg,
 +				tpg, TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	ret = core_tpg_register(&ft_fabric_ops, wwn, &tpg->se_tpg,
+ 				SCSI_PROTOCOL_FCP);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0) {
  		destroy_workqueue(wq);
  		kfree(tpg);
diff --cc drivers/usb/gadget/tcm_usb_gadget.c
index 7cacd6ae818e,08b4f48aa49e..000000000000
--- a/drivers/usb/gadget/tcm_usb_gadget.c
+++ b/drivers/usb/gadget/tcm_usb_gadget.c
@@@ -1572,9 -1508,8 +1572,14 @@@ static struct se_portal_group *usbg_mak
  	tpg->tport = tport;
  	tpg->tport_tpgt = tpgt;
  
++<<<<<<< HEAD:drivers/usb/gadget/tcm_usb_gadget.c
 +	ret = core_tpg_register(&usbg_fabric_configfs->tf_ops, wwn,
 +				&tpg->se_tpg, tpg,
 +				TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	ret = core_tpg_register(&usbg_ops, wwn, &tpg->se_tpg,
+ 				tport->tport_proto_id);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype):drivers/usb/gadget/legacy/tcm_usb_gadget.c
  	if (ret < 0) {
  		destroy_workqueue(tpg->workqueue);
  		kfree(tpg);
diff --cc drivers/vhost/scsi.c
index 65142d377371,8295e7be0fcb..000000000000
--- a/drivers/vhost/scsi.c
+++ b/drivers/vhost/scsi.c
@@@ -1869,8 -2119,8 +1869,13 @@@ static struct se_portal_group *tcm_vhos
  	tpg->tport = tport;
  	tpg->tport_tpgt = tpgt;
  
++<<<<<<< HEAD
 +	ret = core_tpg_register(&tcm_vhost_fabric_configfs->tf_ops, wwn,
 +				&tpg->se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL);
++=======
+ 	ret = core_tpg_register(&vhost_scsi_ops, wwn, &tpg->se_tpg,
+ 				tport->tport_proto_id);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  	if (ret < 0) {
  		kfree(tpg);
  		return NULL;
diff --cc include/target/target_core_fabric.h
index c9a57a197803,e0adc141de07..000000000000
--- a/include/target/target_core_fabric.h
+++ b/include/target/target_core_fabric.h
@@@ -162,8 -174,8 +162,13 @@@ int	core_tpg_set_initiator_node_queue_d
  		unsigned char *, u32, int);
  int	core_tpg_set_initiator_node_tag(struct se_portal_group *,
  		struct se_node_acl *, const char *);
++<<<<<<< HEAD
 +int	core_tpg_register(struct target_core_fabric_ops *, struct se_wwn *,
 +		struct se_portal_group *, void *, int);
++=======
+ int	core_tpg_register(const struct target_core_fabric_ops *,
+ 		struct se_wwn *, struct se_portal_group *, int);
++>>>>>>> e4aae5af810e (target: change core_tpg_register prototype)
  int	core_tpg_deregister(struct se_portal_group *);
  
  /* SAS helpers */
* Unmerged path drivers/xen/xen-scsiback.c
* Unmerged path Documentation/target/tcm_mod_builder.py
* Unmerged path drivers/infiniband/ulp/srpt/ib_srpt.c
* Unmerged path drivers/scsi/qla2xxx/tcm_qla2xxx.c
* Unmerged path drivers/target/iscsi/iscsi_target_configfs.c
* Unmerged path drivers/target/iscsi/iscsi_target_tpg.c
* Unmerged path drivers/target/loopback/tcm_loop.c
* Unmerged path drivers/target/sbp/sbp_target.c
diff --git a/drivers/target/target_core_tpg.c b/drivers/target/target_core_tpg.c
index 0696de9553d3..2dac3b7b3187 100644
--- a/drivers/target/target_core_tpg.c
+++ b/drivers/target/target_core_tpg.c
@@ -675,8 +675,7 @@ int core_tpg_register(
 	struct target_core_fabric_ops *tfo,
 	struct se_wwn *se_wwn,
 	struct se_portal_group *se_tpg,
-	void *tpg_fabric_ptr,
-	int se_tpg_type)
+	int proto_id)
 {
 	struct se_lun *lun;
 	u32 i;
@@ -702,8 +701,7 @@ int core_tpg_register(
 		init_completion(&lun->lun_ref_comp);
 	}
 
-	se_tpg->se_tpg_type = se_tpg_type;
-	se_tpg->se_tpg_fabric_ptr = tpg_fabric_ptr;
+	se_tpg->proto_id = proto_id;
 	se_tpg->se_tpg_tfo = tfo;
 	se_tpg->se_tpg_wwn = se_wwn;
 	atomic_set(&se_tpg->tpg_pr_ref_count, 0);
@@ -714,7 +712,7 @@ int core_tpg_register(
 	spin_lock_init(&se_tpg->session_lock);
 	spin_lock_init(&se_tpg->tpg_lun_lock);
 
-	if (se_tpg->se_tpg_type == TRANSPORT_TPG_TYPE_NORMAL) {
+	if (se_tpg->proto_id >= 0) {
 		if (core_tpg_setup_virtual_lun0(se_tpg) < 0) {
 			array_free(se_tpg->tpg_lun_list,
 				   TRANSPORT_MAX_LUNS_PER_TPG);
@@ -726,11 +724,10 @@ int core_tpg_register(
 	list_add_tail(&se_tpg->se_tpg_node, &tpg_list);
 	spin_unlock_bh(&tpg_lock);
 
-	pr_debug("TARGET_CORE[%s]: Allocated %s struct se_portal_group for"
-		" endpoint: %s, Portal Tag: %u\n", tfo->get_fabric_name(),
-		(se_tpg->se_tpg_type == TRANSPORT_TPG_TYPE_NORMAL) ?
-		"Normal" : "Discovery", (tfo->tpg_get_wwn(se_tpg) == NULL) ?
-		"None" : tfo->tpg_get_wwn(se_tpg), tfo->tpg_get_tag(se_tpg));
+	pr_debug("TARGET_CORE[%s]: Allocated portal_group for endpoint: %s, "
+		 "Proto: %d, Portal Tag: %u\n", tfo->get_fabric_name(),
+		tfo->tpg_get_wwn(se_tpg) ? tfo->tpg_get_wwn(se_tpg) : NULL,
+		se_tpg->proto_id, tfo->tpg_get_tag(se_tpg));
 
 	return 0;
 }
@@ -738,14 +735,13 @@ EXPORT_SYMBOL(core_tpg_register);
 
 int core_tpg_deregister(struct se_portal_group *se_tpg)
 {
+	const struct target_core_fabric_ops *tfo = se_tpg->se_tpg_tfo;
 	struct se_node_acl *nacl, *nacl_tmp;
 
-	pr_debug("TARGET_CORE[%s]: Deallocating %s struct se_portal_group"
-		" for endpoint: %s Portal Tag %u\n",
-		(se_tpg->se_tpg_type == TRANSPORT_TPG_TYPE_NORMAL) ?
-		"Normal" : "Discovery", se_tpg->se_tpg_tfo->get_fabric_name(),
-		se_tpg->se_tpg_tfo->tpg_get_wwn(se_tpg),
-		se_tpg->se_tpg_tfo->tpg_get_tag(se_tpg));
+	pr_debug("TARGET_CORE[%s]: Deallocating portal_group for endpoint: %s, "
+		 "Proto: %d, Portal Tag: %u\n", tfo->get_fabric_name(),
+		tfo->tpg_get_wwn(se_tpg) ? tfo->tpg_get_wwn(se_tpg) : NULL,
+		se_tpg->proto_id, tfo->tpg_get_tag(se_tpg));
 
 	spin_lock_bh(&tpg_lock);
 	list_del(&se_tpg->se_tpg_node);
@@ -773,10 +769,9 @@ int core_tpg_deregister(struct se_portal_group *se_tpg)
 	}
 	spin_unlock_irq(&se_tpg->acl_node_lock);
 
-	if (se_tpg->se_tpg_type == TRANSPORT_TPG_TYPE_NORMAL)
+	if (se_tpg->proto_id >= 0)
 		core_tpg_remove_lun(se_tpg, &se_tpg->tpg_virt_lun0);
 
-	se_tpg->se_tpg_fabric_ptr = NULL;
 	array_free(se_tpg->tpg_lun_list, TRANSPORT_MAX_LUNS_PER_TPG);
 	return 0;
 }
* Unmerged path drivers/target/tcm_fc/tfc_conf.c
* Unmerged path drivers/usb/gadget/tcm_usb_gadget.c
* Unmerged path drivers/vhost/scsi.c
* Unmerged path drivers/xen/xen-scsiback.c
diff --git a/include/target/target_core_base.h b/include/target/target_core_base.h
index 7bcf92529421..f6a7cc0a1129 100644
--- a/include/target/target_core_base.h
+++ b/include/target/target_core_base.h
@@ -131,12 +131,6 @@ enum transport_lun_status_table {
 	TRANSPORT_LUN_STATUS_ACTIVE = 1,
 };
 
-/* struct se_portal_group->se_tpg_type */
-enum transport_tpg_type_table {
-	TRANSPORT_TPG_TYPE_NORMAL = 0,
-	TRANSPORT_TPG_TYPE_DISCOVERY = 1,
-};
-
 /* Special transport agnostic struct se_cmd->t_states */
 enum transport_state_table {
 	TRANSPORT_NO_STATE	= 0,
@@ -868,8 +862,12 @@ struct se_tpg_np {
 };
 
 struct se_portal_group {
-	/* Type of target portal group, see transport_tpg_type_table */
-	enum transport_tpg_type_table se_tpg_type;
+	/*
+	 * PROTOCOL IDENTIFIER value per SPC4, 7.5.1.
+	 *
+	 * Negative values can be used by fabric drivers for internal use TPGs.
+	 */
+	int			proto_id;
 	/* Number of ACLed Initiator Nodes for this TPG */
 	u32			num_node_acls;
 	/* Used for PR SPEC_I_PT=1 and REGISTER_AND_MOVE */
@@ -879,8 +877,6 @@ struct se_portal_group {
 	/* Spinlock for adding/removing sessions */
 	spinlock_t		session_lock;
 	spinlock_t		tpg_lun_lock;
-	/* Pointer to $FABRIC_MOD portal group */
-	void			*se_tpg_fabric_ptr;
 	struct list_head	se_tpg_node;
 	/* linked list for initiator ACL list */
 	struct list_head	acl_node_list;
* Unmerged path include/target/target_core_fabric.h
