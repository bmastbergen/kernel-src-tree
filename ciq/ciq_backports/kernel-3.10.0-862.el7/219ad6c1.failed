nfp: remove defensive checks around ndo_open()/ndo_close()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 219ad6c1c35c95ff99a0c65cfba0ca9996831af5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/219ad6c1.failed

Device open and close handlers check if the device is already
in the desired state.  Thanks to our reconfig infrastructure
this should not be necessary, there doesn't seem to be any
code in the driver which depends on it.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 219ad6c1c35c95ff99a0c65cfba0ca9996831af5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index e0a7eb1db7a9,e12353a7c83c..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -2018,22 -2231,8 +2018,25 @@@ static void nfp_net_open_stack(struct n
  static int nfp_net_netdev_open(struct net_device *netdev)
  {
  	struct nfp_net *nn = netdev_priv(netdev);
 +	struct nfp_net_ring_set rx = {
 +		.n_rings = nn->num_rx_rings,
 +		.mtu = nn->netdev->mtu,
 +		.dcnt = nn->rxd_cnt,
 +	};
 +	struct nfp_net_ring_set tx = {
 +		.n_rings = nn->num_tx_rings,
 +		.dcnt = nn->txd_cnt,
 +	};
  	int err, r;
  
++<<<<<<< HEAD
 +	if (nn->ctrl & NFP_NET_CFG_CTRL_ENABLE) {
 +		nn_err(nn, "Dev is already enabled: 0x%08x\n", nn->ctrl);
 +		return -EBUSY;
 +	}
 +
++=======
++>>>>>>> 219ad6c1c35c (nfp: remove defensive checks around ndo_open()/ndo_close())
  	/* Step 1: Allocate resources for rings and the like
  	 * - Request interrupts
  	 * - Allocate RX and TX ring resources
@@@ -2168,11 -2363,6 +2171,14 @@@ static int nfp_net_netdev_close(struct 
  {
  	struct nfp_net *nn = netdev_priv(netdev);
  
++<<<<<<< HEAD
 +	if (!(nn->ctrl & NFP_NET_CFG_CTRL_ENABLE)) {
 +		nn_err(nn, "Dev is not up: 0x%08x\n", nn->ctrl);
 +		return 0;
 +	}
 +
++=======
++>>>>>>> 219ad6c1c35c (nfp: remove defensive checks around ndo_open()/ndo_close())
  	/* Step 1: Disable RX and TX rings from the Linux kernel perspective
  	 */
  	nfp_net_close_stack(nn);
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
