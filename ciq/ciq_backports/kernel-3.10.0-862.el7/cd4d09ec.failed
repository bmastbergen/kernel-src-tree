x86/cpufeature: Carve out X86_FEATURE_*

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Borislav Petkov <bp@suse.de>
commit cd4d09ec6f6c12a2cc3db5b7d8876a325a53545b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/cd4d09ec.failed

Move them to a separate header and have the following
dependency:

  x86/cpufeatures.h <- x86/processor.h <- x86/cpufeature.h

This makes it easier to use the header in asm code and not
include the whole cpufeature.h and add guards for asm.

	Suggested-by: H. Peter Anvin <hpa@zytor.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1453842730-28463-5-git-send-email-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit cd4d09ec6f6c12a2cc3db5b7d8876a325a53545b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/crypto/crct10dif-pclmul_glue.c
#	arch/x86/entry/common.c
#	arch/x86/entry/entry_32.S
#	arch/x86/entry/vdso/vdso32-setup.c
#	arch/x86/entry/vdso/vdso32/system_call.S
#	arch/x86/entry/vdso/vma.c
#	arch/x86/include/asm/cpufeature.h
#	arch/x86/include/asm/fpu/internal.h
#	arch/x86/include/asm/thread_info.h
#	arch/x86/kernel/cpu/intel_cacheinfo.c
#	arch/x86/kernel/cpu/mkcapflags.sh
#	arch/x86/kernel/hpet.c
#	arch/x86/lib/clear_page_64.S
#	arch/x86/lib/copy_page_64.S
#	arch/x86/lib/memcpy_64.S
#	arch/x86/lib/memmove_64.S
#	arch/x86/lib/memset_64.S
#	lib/atomic64_test.c
diff --cc arch/x86/crypto/crct10dif-pclmul_glue.c
index b6c67bf30fdf,cd4df9322501..000000000000
--- a/arch/x86/crypto/crct10dif-pclmul_glue.c
+++ b/arch/x86/crypto/crct10dif-pclmul_glue.c
@@@ -29,8 -29,8 +29,13 @@@
  #include <linux/init.h>
  #include <linux/string.h>
  #include <linux/kernel.h>
++<<<<<<< HEAD
 +#include <asm/i387.h>
 +#include <asm/cpufeature.h>
++=======
+ #include <asm/fpu/api.h>
+ #include <asm/cpufeatures.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/cpu_device_id.h>
  
  asmlinkage __u16 crc_t10dif_pcl(__u16 crc, const unsigned char *buf,
diff --cc arch/x86/include/asm/cpufeature.h
index 8255ae846f9c,3cce9f3c5cb1..000000000000
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@@ -1,300 -1,7 +1,301 @@@
  #ifndef _ASM_X86_CPUFEATURE_H
  #define _ASM_X86_CPUFEATURE_H
  
++<<<<<<< HEAD
 +#ifndef _ASM_X86_REQUIRED_FEATURES_H
 +#include <asm/required-features.h>
 +#endif
 +
 +#ifndef _ASM_X86_DISABLED_FEATURES_H
 +#include <asm/disabled-features.h>
 +#endif
 +
 +#define NCAPINTS	20	/* N 32-bit words worth of info */
 +#define NBUGINTS	10	/* N 32-bit bug flags */
 +
 +/*
 + * Note: If the comment begins with a quoted string, that string is used
 + * in /proc/cpuinfo instead of the macro name.  If the string is "",
 + * this feature bit is not displayed in /proc/cpuinfo at all.
 + */
 +
 +/* Intel-defined CPU features, CPUID level 0x00000001 (edx), word 0 */
 +#define X86_FEATURE_FPU		(0*32+ 0) /* Onboard FPU */
 +#define X86_FEATURE_VME		(0*32+ 1) /* Virtual Mode Extensions */
 +#define X86_FEATURE_DE		(0*32+ 2) /* Debugging Extensions */
 +#define X86_FEATURE_PSE		(0*32+ 3) /* Page Size Extensions */
 +#define X86_FEATURE_TSC		(0*32+ 4) /* Time Stamp Counter */
 +#define X86_FEATURE_MSR		(0*32+ 5) /* Model-Specific Registers */
 +#define X86_FEATURE_PAE		(0*32+ 6) /* Physical Address Extensions */
 +#define X86_FEATURE_MCE		(0*32+ 7) /* Machine Check Exception */
 +#define X86_FEATURE_CX8		(0*32+ 8) /* CMPXCHG8 instruction */
 +#define X86_FEATURE_APIC	(0*32+ 9) /* Onboard APIC */
 +#define X86_FEATURE_SEP		(0*32+11) /* SYSENTER/SYSEXIT */
 +#define X86_FEATURE_MTRR	(0*32+12) /* Memory Type Range Registers */
 +#define X86_FEATURE_PGE		(0*32+13) /* Page Global Enable */
 +#define X86_FEATURE_MCA		(0*32+14) /* Machine Check Architecture */
 +#define X86_FEATURE_CMOV	(0*32+15) /* CMOV instructions */
 +					  /* (plus FCMOVcc, FCOMI with FPU) */
 +#define X86_FEATURE_PAT		(0*32+16) /* Page Attribute Table */
 +#define X86_FEATURE_PSE36	(0*32+17) /* 36-bit PSEs */
 +#define X86_FEATURE_PN		(0*32+18) /* Processor serial number */
 +#define X86_FEATURE_CLFLUSH	(0*32+19) /* CLFLUSH instruction */
 +#define X86_FEATURE_DS		(0*32+21) /* "dts" Debug Store */
 +#define X86_FEATURE_ACPI	(0*32+22) /* ACPI via MSR */
 +#define X86_FEATURE_MMX		(0*32+23) /* Multimedia Extensions */
 +#define X86_FEATURE_FXSR	(0*32+24) /* FXSAVE/FXRSTOR, CR4.OSFXSR */
 +#define X86_FEATURE_XMM		(0*32+25) /* "sse" */
 +#define X86_FEATURE_XMM2	(0*32+26) /* "sse2" */
 +#define X86_FEATURE_SELFSNOOP	(0*32+27) /* "ss" CPU self snoop */
 +#define X86_FEATURE_HT		(0*32+28) /* Hyper-Threading */
 +#define X86_FEATURE_ACC		(0*32+29) /* "tm" Automatic clock control */
 +#define X86_FEATURE_IA64	(0*32+30) /* IA-64 processor */
 +#define X86_FEATURE_PBE		(0*32+31) /* Pending Break Enable */
 +
 +/* AMD-defined CPU features, CPUID level 0x80000001, word 1 */
 +/* Don't duplicate feature flags which are redundant with Intel! */
 +#define X86_FEATURE_SYSCALL	(1*32+11) /* SYSCALL/SYSRET */
 +#define X86_FEATURE_MP		(1*32+19) /* MP Capable. */
 +#define X86_FEATURE_NX		(1*32+20) /* Execute Disable */
 +#define X86_FEATURE_MMXEXT	(1*32+22) /* AMD MMX extensions */
 +#define X86_FEATURE_FXSR_OPT	(1*32+25) /* FXSAVE/FXRSTOR optimizations */
 +#define X86_FEATURE_GBPAGES	(1*32+26) /* "pdpe1gb" GB pages */
 +#define X86_FEATURE_RDTSCP	(1*32+27) /* RDTSCP */
 +#define X86_FEATURE_LM		(1*32+29) /* Long Mode (x86-64) */
 +#define X86_FEATURE_3DNOWEXT	(1*32+30) /* AMD 3DNow! extensions */
 +#define X86_FEATURE_3DNOW	(1*32+31) /* 3DNow! */
 +
 +/* Transmeta-defined CPU features, CPUID level 0x80860001, word 2 */
 +#define X86_FEATURE_RECOVERY	(2*32+ 0) /* CPU in recovery mode */
 +#define X86_FEATURE_LONGRUN	(2*32+ 1) /* Longrun power control */
 +#define X86_FEATURE_LRTI	(2*32+ 3) /* LongRun table interface */
 +
 +/* Other features, Linux-defined mapping, word 3 */
 +/* This range is used for feature bits which conflict or are synthesized */
 +#define X86_FEATURE_CXMMX	(3*32+ 0) /* Cyrix MMX extensions */
 +#define X86_FEATURE_K6_MTRR	(3*32+ 1) /* AMD K6 nonstandard MTRRs */
 +#define X86_FEATURE_CYRIX_ARR	(3*32+ 2) /* Cyrix ARRs (= MTRRs) */
 +#define X86_FEATURE_CENTAUR_MCR	(3*32+ 3) /* Centaur MCRs (= MTRRs) */
 +/* cpu types for specific tunings: */
 +#define X86_FEATURE_K8		(3*32+ 4) /* "" Opteron, Athlon64 */
 +#define X86_FEATURE_K7		(3*32+ 5) /* "" Athlon */
 +#define X86_FEATURE_P3		(3*32+ 6) /* "" P3 */
 +#define X86_FEATURE_P4		(3*32+ 7) /* "" P4 */
 +#define X86_FEATURE_CONSTANT_TSC (3*32+ 8) /* TSC ticks at a constant rate */
 +#define X86_FEATURE_UP		(3*32+ 9) /* smp kernel running on up */
 +#define X86_FEATURE_FXSAVE_LEAK (3*32+10) /* "" FXSAVE leaks FOP/FIP/FOP */
 +#define X86_FEATURE_ART		(3*32+10) /* Platform has always running timer (ART) */
 +#define X86_FEATURE_ARCH_PERFMON (3*32+11) /* Intel Architectural PerfMon */
 +#define X86_FEATURE_PEBS	(3*32+12) /* Precise-Event Based Sampling */
 +#define X86_FEATURE_BTS		(3*32+13) /* Branch Trace Store */
 +#define X86_FEATURE_SYSCALL32	(3*32+14) /* "" syscall in ia32 userspace */
 +#define X86_FEATURE_SYSENTER32	(3*32+15) /* "" sysenter in ia32 userspace */
 +#define X86_FEATURE_REP_GOOD	(3*32+16) /* rep microcode works well */
 +#define X86_FEATURE_MFENCE_RDTSC (3*32+17) /* "" Mfence synchronizes RDTSC */
 +#define X86_FEATURE_LFENCE_RDTSC (3*32+18) /* "" Lfence synchronizes RDTSC */
 +#define X86_FEATURE_11AP	(3*32+19) /* "" Bad local APIC aka 11AP */
 +#define X86_FEATURE_NOPL	(3*32+20) /* The NOPL (0F 1F) instructions */
 +					  /* 21 available, was AMD_C1E */
 +#define X86_FEATURE_XTOPOLOGY	(3*32+22) /* cpu topology enum extensions */
 +#define X86_FEATURE_TSC_RELIABLE (3*32+23) /* TSC is known to be reliable */
 +#define X86_FEATURE_NONSTOP_TSC	(3*32+24) /* TSC does not stop in C states */
 +#define X86_FEATURE_CLFLUSH_MONITOR (3*32+25) /* "" clflush reqd with monitor */
 +#define X86_FEATURE_EXTD_APICID	(3*32+26) /* has extended APICID (8 bits) */
 +#define X86_FEATURE_AMD_DCM     (3*32+27) /* multi-node processor */
 +#define X86_FEATURE_APERFMPERF	(3*32+28) /* APERFMPERF */
 +#define X86_FEATURE_EAGER_FPU	(3*32+29) /* "eagerfpu" Non lazy FPU restore */
 +#define X86_FEATURE_NONSTOP_TSC_S3 (3*32+30) /* TSC doesn't stop in S3 state */
 +
 +/* Intel-defined CPU features, CPUID level 0x00000001 (ecx), word 4 */
 +#define X86_FEATURE_XMM3	(4*32+ 0) /* "pni" SSE-3 */
 +#define X86_FEATURE_PCLMULQDQ	(4*32+ 1) /* PCLMULQDQ instruction */
 +#define X86_FEATURE_DTES64	(4*32+ 2) /* 64-bit Debug Store */
 +#define X86_FEATURE_MWAIT	(4*32+ 3) /* "monitor" Monitor/Mwait support */
 +#define X86_FEATURE_DSCPL	(4*32+ 4) /* "ds_cpl" CPL Qual. Debug Store */
 +#define X86_FEATURE_VMX		(4*32+ 5) /* Hardware virtualization */
 +#define X86_FEATURE_SMX		(4*32+ 6) /* Safer mode */
 +#define X86_FEATURE_EST		(4*32+ 7) /* Enhanced SpeedStep */
 +#define X86_FEATURE_TM2		(4*32+ 8) /* Thermal Monitor 2 */
 +#define X86_FEATURE_SSSE3	(4*32+ 9) /* Supplemental SSE-3 */
 +#define X86_FEATURE_CID		(4*32+10) /* Context ID */
 +#define X86_FEATURE_FMA		(4*32+12) /* Fused multiply-add */
 +#define X86_FEATURE_CX16	(4*32+13) /* CMPXCHG16B */
 +#define X86_FEATURE_XTPR	(4*32+14) /* Send Task Priority Messages */
 +#define X86_FEATURE_PDCM	(4*32+15) /* Performance Capabilities */
 +#define X86_FEATURE_PCID	(4*32+17) /* Process Context Identifiers */
 +#define X86_FEATURE_DCA		(4*32+18) /* Direct Cache Access */
 +#define X86_FEATURE_XMM4_1	(4*32+19) /* "sse4_1" SSE-4.1 */
 +#define X86_FEATURE_XMM4_2	(4*32+20) /* "sse4_2" SSE-4.2 */
 +#define X86_FEATURE_X2APIC	(4*32+21) /* x2APIC */
 +#define X86_FEATURE_MOVBE	(4*32+22) /* MOVBE instruction */
 +#define X86_FEATURE_POPCNT      (4*32+23) /* POPCNT instruction */
 +#define X86_FEATURE_TSC_DEADLINE_TIMER	(4*32+24) /* Tsc deadline timer */
 +#define X86_FEATURE_AES		(4*32+25) /* AES instructions */
 +#define X86_FEATURE_XSAVE	(4*32+26) /* XSAVE/XRSTOR/XSETBV/XGETBV */
 +#define X86_FEATURE_OSXSAVE	(4*32+27) /* "" XSAVE enabled in the OS */
 +#define X86_FEATURE_AVX		(4*32+28) /* Advanced Vector Extensions */
 +#define X86_FEATURE_F16C	(4*32+29) /* 16-bit fp conversions */
 +#define X86_FEATURE_RDRAND	(4*32+30) /* The RDRAND instruction */
 +#define X86_FEATURE_HYPERVISOR	(4*32+31) /* Running on a hypervisor */
 +
 +/* VIA/Cyrix/Centaur-defined CPU features, CPUID level 0xC0000001, word 5 */
 +#define X86_FEATURE_XSTORE	(5*32+ 2) /* "rng" RNG present (xstore) */
 +#define X86_FEATURE_XSTORE_EN	(5*32+ 3) /* "rng_en" RNG enabled */
 +#define X86_FEATURE_XCRYPT	(5*32+ 6) /* "ace" on-CPU crypto (xcrypt) */
 +#define X86_FEATURE_XCRYPT_EN	(5*32+ 7) /* "ace_en" on-CPU crypto enabled */
 +#define X86_FEATURE_ACE2	(5*32+ 8) /* Advanced Cryptography Engine v2 */
 +#define X86_FEATURE_ACE2_EN	(5*32+ 9) /* ACE v2 enabled */
 +#define X86_FEATURE_PHE		(5*32+10) /* PadLock Hash Engine */
 +#define X86_FEATURE_PHE_EN	(5*32+11) /* PHE enabled */
 +#define X86_FEATURE_PMM		(5*32+12) /* PadLock Montgomery Multiplier */
 +#define X86_FEATURE_PMM_EN	(5*32+13) /* PMM enabled */
 +
 +/* More extended AMD flags: CPUID level 0x80000001, ecx, word 6 */
 +#define X86_FEATURE_LAHF_LM	(6*32+ 0) /* LAHF/SAHF in long mode */
 +#define X86_FEATURE_CMP_LEGACY	(6*32+ 1) /* If yes HyperThreading not valid */
 +#define X86_FEATURE_SVM		(6*32+ 2) /* Secure virtual machine */
 +#define X86_FEATURE_EXTAPIC	(6*32+ 3) /* Extended APIC space */
 +#define X86_FEATURE_CR8_LEGACY	(6*32+ 4) /* CR8 in 32-bit mode */
 +#define X86_FEATURE_ABM		(6*32+ 5) /* Advanced bit manipulation */
 +#define X86_FEATURE_SSE4A	(6*32+ 6) /* SSE-4A */
 +#define X86_FEATURE_MISALIGNSSE (6*32+ 7) /* Misaligned SSE mode */
 +#define X86_FEATURE_3DNOWPREFETCH (6*32+ 8) /* 3DNow prefetch instructions */
 +#define X86_FEATURE_OSVW	(6*32+ 9) /* OS Visible Workaround */
 +#define X86_FEATURE_IBS		(6*32+10) /* Instruction Based Sampling */
 +#define X86_FEATURE_XOP		(6*32+11) /* extended AVX instructions */
 +#define X86_FEATURE_SKINIT	(6*32+12) /* SKINIT/STGI instructions */
 +#define X86_FEATURE_WDT		(6*32+13) /* Watchdog timer */
 +#define X86_FEATURE_LWP		(6*32+15) /* Light Weight Profiling */
 +#define X86_FEATURE_FMA4	(6*32+16) /* 4 operands MAC instructions */
 +#define X86_FEATURE_TCE		(6*32+17) /* translation cache extension */
 +#define X86_FEATURE_NODEID_MSR	(6*32+19) /* NodeId MSR */
 +#define X86_FEATURE_TBM		(6*32+21) /* trailing bit manipulations */
 +#define X86_FEATURE_TOPOEXT	(6*32+22) /* topology extensions CPUID leafs */
 +#define X86_FEATURE_PERFCTR_CORE (6*32+23) /* core performance counter extensions */
 +#define X86_FEATURE_PERFCTR_NB  (6*32+24) /* NB performance counter extensions */
 +#define X86_FEATURE_BPEXT	(6*32+26) /* data breakpoint extension */
 +#define X86_FEATURE_PERFCTR_L2	(6*32+28) /* L2 performance counter extensions */
 +
 +/*
 + * Auxiliary flags: Linux defined - For features scattered in various
 + * CPUID levels like 0x6, 0xA etc, word 7.
 + *
 + * Reuse free bits when adding new feature flags!
 + */
 +
 +#define X86_FEATURE_RING3MWAIT	(7*32+ 0) /* Ring 3 MONITOR/MWAIT */
 +#define X86_FEATURE_CPB		(7*32+ 2) /* AMD Core Performance Boost */
 +#define X86_FEATURE_EPB		(7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
 +#define X86_FEATURE_CAT_L3	(7*32+ 4) /* Cache Allocation Technology L3 */
 +#define X86_FEATURE_CAT_L2	(7*32+ 5) /* Cache Allocation Technology L2 */
 +#define X86_FEATURE_CDP_L3	(7*32+ 6) /* Code and Data Prioritization L3 */
 +
 +#define X86_FEATURE_HW_PSTATE	(7*32+ 8) /* AMD HW-PState */
 +#define X86_FEATURE_PROC_FEEDBACK (7*32+ 9) /* AMD ProcFeedbackInterface */
 +
 +#define X86_FEATURE_INTEL_PT	( 7*32+15) /* Intel Processor Trace */
 +#define X86_FEATURE_AVX512_4VNNIW (7*32+16) /* AVX-512 Neural Network Instructions */
 +#define X86_FEATURE_AVX512_4FMAPS (7*32+17) /* AVX-512 Multiply Accumulation Single precision */
 +#define X86_FEATURE_AVX512_VPOPCNTDQ (16*32+14) /* POPCNT for vectors of DW/QW */
 +
 +/* Virtualization flags: Linux defined, word 8 */
 +#define X86_FEATURE_TPR_SHADOW  (8*32+ 0) /* Intel TPR Shadow */
 +#define X86_FEATURE_VNMI        (8*32+ 1) /* Intel Virtual NMI */
 +#define X86_FEATURE_FLEXPRIORITY (8*32+ 2) /* Intel FlexPriority */
 +#define X86_FEATURE_EPT         (8*32+ 3) /* Intel Extended Page Table */
 +#define X86_FEATURE_VPID        (8*32+ 4) /* Intel Virtual Processor ID */
 +
 +#define X86_FEATURE_AVIC	(8*32+15) /* AMD Virtual Interrupt Controller */
 +
 +
 +/* Intel-defined CPU features, CPUID level 0x00000007:0 (ebx), word 9 */
 +#define X86_FEATURE_FSGSBASE	(9*32+ 0) /* {RD/WR}{FS/GS}BASE instructions*/
 +#define X86_FEATURE_TSC_ADJUST	(9*32+ 1) /* TSC adjustment MSR 0x3b */
 +#define X86_FEATURE_BMI1	(9*32+ 3) /* 1st group bit manipulation extensions */
 +#define X86_FEATURE_HLE		(9*32+ 4) /* Hardware Lock Elision */
 +#define X86_FEATURE_AVX2	(9*32+ 5) /* AVX2 instructions */
 +#define X86_FEATURE_SMEP	(9*32+ 7) /* Supervisor Mode Execution Protection */
 +#define X86_FEATURE_BMI2	(9*32+ 8) /* 2nd group bit manipulation extensions */
 +#define X86_FEATURE_ERMS	(9*32+ 9) /* Enhanced REP MOVSB/STOSB */
 +#define X86_FEATURE_INVPCID	(9*32+10) /* Invalidate Processor Context ID */
 +#define X86_FEATURE_RTM		(9*32+11) /* Restricted Transactional Memory */
 +#define X86_FEATURE_CQM		(9*32+12) /* Cache QoS Monitoring */
 +#define X86_FEATURE_MPX		(9*32+14) /* Memory Protection Extension */
 +#define X86_FEATURE_RDT_A	(9*32+15) /* Resource Director Technology Allocation */
 +#define X86_FEATURE_AVX512F	(9*32+16) /* AVX-512 Foundation */
 +#define X86_FEATURE_AVX512DQ	( 9*32+17) /* AVX-512 DQ (Double/Quad granular) Instructions */
 +#define X86_FEATURE_RDSEED	(9*32+18) /* The RDSEED instruction */
 +#define X86_FEATURE_ADX		(9*32+19) /* The ADCX and ADOX instructions */
 +#define X86_FEATURE_SMAP	(9*32+20) /* Supervisor Mode Access Prevention */
 +#define X86_FEATURE_AVX512IFMA	( 9*32+21) /* AVX-512 Integer Fused Multiply-Add instructions */
 +#define X86_FEATURE_CLFLUSHOPT	(9*32+23) /* CLFLUSHOPT instruction */
 +#define X86_FEATURE_CLWB	( 9*32+24) /* CLWB instruction */
 +#define X86_FEATURE_AVX512PF	(9*32+26) /* AVX-512 Prefetch */
 +#define X86_FEATURE_AVX512ER	(9*32+27) /* AVX-512 Exponential and Reciprocal */
 +#define X86_FEATURE_AVX512CD	(9*32+28) /* AVX-512 Conflict Detection */
 +#define X86_FEATURE_SHA_NI	( 9*32+29) /* SHA1/SHA256 Instruction Extensions */
 +#define X86_FEATURE_AVX512BW	( 9*32+30) /* AVX-512 BW (Byte/Word granular) Instructions */
 +#define X86_FEATURE_AVX512VL	( 9*32+31) /* AVX-512 VL (128/256 Vector Length) Extensions */
 +
 +/* Extended state features, CPUID level 0x0000000d:1 (eax), word 10 */
 +#define X86_FEATURE_XSAVEOPT   (10*32+ 0) /* XSAVEOPT */
 +#define X86_FEATURE_XSAVEC     (10*32+ 1) /* XSAVEC */
 +#define X86_FEATURE_XGETBV1    (10*32+ 2) /* XGETBV with ECX = 1 */
 +#define X86_FEATURE_XSAVES     (10*32+ 3) /* XSAVES/XRSTORS */
 +
 +/* Intel-defined CPU QoS Sub-leaf, CPUID level 0x0000000F:0 (edx), word 11 */
 +#define X86_FEATURE_CQM_LLC	(11*32+ 1) /* LLC QoS if 1 */
 +
 +/* Intel-defined CPU QoS Sub-leaf, CPUID level 0x0000000F:1 (edx), word 12 */
 +#define X86_FEATURE_CQM_OCCUP_LLC (12*32+ 0) /* LLC occupancy monitoring if 1 */
 +#define X86_FEATURE_CQM_MBM_TOTAL (12*32+ 1) /* LLC Total MBM monitoring */
 +#define X86_FEATURE_CQM_MBM_LOCAL (12*32+ 2) /* LLC Local MBM monitoring */
 +
 +/* AMD-defined CPU features, CPUID level 0x80000007 (ebx), word 17 */
 +#define X86_FEATURE_OVERFLOW_RECOV (17*32+0) /* MCA overflow recovery support */
 +#define X86_FEATURE_SUCCOR	(17*32+1) /* Uncorrectable error containment and recovery */
 +#define X86_FEATURE_SMCA	(17*32+3) /* Scalable MCA */
 +
 +/* Thermal and Power Management Leaf, CPUID level 0x00000006 (eax), word 14 */
 +#define X86_FEATURE_DTHERM	(14*32+ 0) /* Digital Thermal Sensor */
 +#define X86_FEATURE_IDA		(14*32+ 1) /* Intel Dynamic Acceleration */
 +#define X86_FEATURE_ARAT	(14*32+ 2) /* Always Running APIC Timer */
 +#define X86_FEATURE_PLN		(14*32+ 4) /* Intel Power Limit Notification */
 +#define X86_FEATURE_PTS		(14*32+ 6) /* Intel Package Thermal Status */
 +#define X86_FEATURE_HWP		(14*32+ 7) /* Intel Hardware P-states */
 +#define X86_FEATURE_HWP_NOTIFY	(14*32+ 8) /* HWP Notification */
 +#define X86_FEATURE_HWP_ACT_WINDOW (14*32+ 9) /* HWP Activity Window */
 +#define X86_FEATURE_HWP_EPP	(14*32+10) /* HWP Energy Perf. Preference */
 +#define X86_FEATURE_HWP_PKG_REQ (14*32+11) /* HWP Package Level Request */
 +
 +/* AMD SVM Feature Identification, CPUID level 0x8000000a (edx), word 15 */
 +#define X86_FEATURE_NPT		(15*32+ 0) /* Nested Page Table support */
 +#define X86_FEATURE_LBRV	(15*32+ 1) /* LBR Virtualization support */
 +#define X86_FEATURE_SVML	(15*32+ 2) /* "svm_lock" SVM locking MSR */
 +#define X86_FEATURE_NRIPS	(15*32+ 3) /* "nrip_save" SVM next_rip save */
 +#define X86_FEATURE_TSCRATEMSR  (15*32+ 4) /* "tsc_scale" TSC scaling support */
 +#define X86_FEATURE_VMCBCLEAN   (15*32+ 5) /* "vmcb_clean" VMCB clean bits support */
 +#define X86_FEATURE_FLUSHBYASID (15*32+ 6) /* flush-by-ASID support */
 +#define X86_FEATURE_DECODEASSISTS (15*32+ 7) /* Decode Assists support */
 +#define X86_FEATURE_PAUSEFILTER (15*32+10) /* filtered pause intercept */
 +#define X86_FEATURE_PFTHRESHOLD (15*32+12) /* pause filter threshold */
 +
 +/* Intel-defined CPU features, CPUID level 0x00000007:0 (ecx), word 16 */
 +#define X86_FEATURE_AVX512VBMI	(16*32+ 1) /* AVX512 Vector Bit Manipulation instructions*/
 +
 +/*
 + * BUG word(s)
 + */
 +#define X86_BUG(x)		(NCAPINTS*32 + (x))
 +
 +#define X86_BUG_F00F		X86_BUG(0) /* Intel F00F */
 +#define X86_BUG_FDIV		X86_BUG(1) /* FPU FDIV */
 +#define X86_BUG_COMA		X86_BUG(2) /* Cyrix 6x86 coma */
 +#define X86_BUG_AMD_TLB_MMATCH	X86_BUG(3) /* AMD Erratum 383 */
 +#define X86_BUG_AMD_APIC_C1E	X86_BUG(4) /* AMD Erratum 400 */
++=======
+ #include <asm/processor.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  
  #if defined(__KERNEL__) && !defined(__ASSEMBLY__)
  
diff --cc arch/x86/include/asm/thread_info.h
index b9551ff452be,c0778fcab06d..000000000000
--- a/arch/x86/include/asm/thread_info.h
+++ b/arch/x86/include/asm/thread_info.h
@@@ -18,8 -49,7 +18,12 @@@
   */
  #ifndef __ASSEMBLY__
  struct task_struct;
++<<<<<<< HEAD
 +struct exec_domain;
 +#include <asm/processor.h>
++=======
+ #include <asm/cpufeature.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <linux/atomic.h>
  
  struct thread_info {
diff --cc arch/x86/kernel/cpu/intel_cacheinfo.c
index 3182124f26fd,341449c49f34..000000000000
--- a/arch/x86/kernel/cpu/intel_cacheinfo.c
+++ b/arch/x86/kernel/cpu/intel_cacheinfo.c
@@@ -7,16 -7,14 +7,20 @@@
   *	Andi Kleen / Andreas Herrmann	: CPUID4 emulation on AMD.
   */
  
 +#include <linux/init.h>
  #include <linux/slab.h>
 -#include <linux/cacheinfo.h>
 +#include <linux/device.h>
 +#include <linux/compiler.h>
  #include <linux/cpu.h>
  #include <linux/sched.h>
 -#include <linux/sysfs.h>
  #include <linux/pci.h>
  
++<<<<<<< HEAD
 +#include <asm/processor.h>
 +#include <linux/smp.h>
++=======
+ #include <asm/cpufeature.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/amd_nb.h>
  #include <asm/smp.h>
  
diff --cc arch/x86/kernel/cpu/mkcapflags.sh
index 2bf616505499,6988c74409a8..000000000000
--- a/arch/x86/kernel/cpu/mkcapflags.sh
+++ b/arch/x86/kernel/cpu/mkcapflags.sh
@@@ -1,6 -1,6 +1,10 @@@
  #!/bin/sh
  #
++<<<<<<< HEAD
 +# Generate the x86_cap_flags[] array from include/asm/cpufeature.h
++=======
+ # Generate the x86_cap/bug_flags[] arrays from include/asm/cpufeatures.h
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #
  
  IN=$1
@@@ -31,11 -33,32 +35,29 @@@ trap 'rm "$OUT"' EXI
  		# Name is uppercase, VALUE is all lowercase
  		VALUE="$(echo "$VALUE" | tr A-Z a-z)"
  
 -        if [ -n "$POSTFIX" ]; then
 -            T=$(( $PFX_SZ + $(echo $POSTFIX | wc -c) + 2 ))
 -	        TABS="$(printf '\t\t\t\t\t\t')"
 -		    TABCOUNT=$(( ( 6*8 - ($T + 1) - $(echo "$NAME" | wc -c) ) / 8 ))
 -		    printf "\t[%s - %s]%.*s = %s,\n" "$PFX$NAME" "$POSTFIX" "$TABCOUNT" "$TABS" "$VALUE"
 -        else
 -		    TABCOUNT=$(( ( 5*8 - ($PFX_SZ + 1) - $(echo "$NAME" | wc -c) ) / 8 ))
 -            printf "\t[%s]%.*s = %s,\n" "$PFX$NAME" "$TABCOUNT" "$TABS" "$VALUE"
 -        fi
 +		TABCOUNT=$(( ( 5*8 - 14 - $(echo "$NAME" | wc -c) ) / 8 ))
 +		printf "\t[%s]%.*s = %s,\n" \
 +			"X86_FEATURE_$NAME" "$TABCOUNT" "$TABS" "$VALUE"
  	done
  	echo "};"
++<<<<<<< HEAD
++=======
+ }
+ 
+ trap 'rm "$OUT"' EXIT
+ 
+ (
+ 	echo "#ifndef _ASM_X86_CPUFEATURES_H"
+ 	echo "#include <asm/cpufeatures.h>"
+ 	echo "#endif"
+ 	echo ""
+ 
+ 	dump_array "x86_cap_flags" "NCAPINTS*32" "X86_FEATURE_" ""
+ 	echo ""
+ 
+ 	dump_array "x86_bug_flags" "NBUGINTS*32" "X86_BUG_" "NCAPINTS*32"
+ 
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  ) > $OUT
  
  trap - EXIT
diff --cc arch/x86/kernel/hpet.c
index 27bcf0a7c61c,be0ebbb6d1d1..000000000000
--- a/arch/x86/kernel/hpet.c
+++ b/arch/x86/kernel/hpet.c
@@@ -12,6 -12,8 +12,11 @@@
  #include <linux/pm.h>
  #include <linux/io.h>
  
++<<<<<<< HEAD
++=======
+ #include <asm/cpufeature.h>
+ #include <asm/irqdomain.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/fixmap.h>
  #include <asm/hpet.h>
  #include <asm/time.h>
diff --cc arch/x86/lib/clear_page_64.S
index f2145cfa12a6,65be7cfaf947..000000000000
--- a/arch/x86/lib/clear_page_64.S
+++ b/arch/x86/lib/clear_page_64.S
@@@ -1,5 -1,5 +1,9 @@@
  #include <linux/linkage.h>
++<<<<<<< HEAD
 +#include <asm/dwarf2.h>
++=======
+ #include <asm/cpufeatures.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/alternative-asm.h>
  
  /*
diff --cc arch/x86/lib/copy_page_64.S
index 176cca67212b,24ef1c2104d4..000000000000
--- a/arch/x86/lib/copy_page_64.S
+++ b/arch/x86/lib/copy_page_64.S
@@@ -1,12 -1,18 +1,16 @@@
  /* Written 2003 by Andi Kleen, based on a kernel by Evandro Menezes */
  
  #include <linux/linkage.h>
++<<<<<<< HEAD
 +#include <asm/dwarf2.h>
++=======
+ #include <asm/cpufeatures.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/alternative-asm.h>
  
 -/*
 - * Some CPUs run faster using the string copy instructions (sane microcode).
 - * It is also a lot simpler. Use this when possible. But, don't use streaming
 - * copy unless the CPU indicates X86_FEATURE_REP_GOOD. Could vary the
 - * prefetch distance based on SMP/UP.
 - */
  	ALIGN
 -ENTRY(copy_page)
 -	ALTERNATIVE "jmp copy_page_regs", "", X86_FEATURE_REP_GOOD
 +copy_page_rep:
 +	CFI_STARTPROC
  	movl	$4096/8, %ecx
  	rep	movsq
  	ret
diff --cc arch/x86/lib/memcpy_64.S
index 56313a326188,a0de849435ad..000000000000
--- a/arch/x86/lib/memcpy_64.S
+++ b/arch/x86/lib/memcpy_64.S
@@@ -1,11 -1,18 +1,15 @@@
  /* Copyright 2002 Andi Kleen */
  
  #include <linux/linkage.h>
++<<<<<<< HEAD
 +
 +#include <asm/cpufeature.h>
 +#include <asm/dwarf2.h>
++=======
+ #include <asm/cpufeatures.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/alternative-asm.h>
  
 -/*
 - * We build a jump to memcpy_orig by default which gets NOPped out on
 - * the majority of x86 CPUs which set REP_GOOD. In addition, CPUs which
 - * have the enhanced REP MOVSB/STOSB feature (ERMS), change those NOPs
 - * to a jmp to memcpy_erms which does the REP; MOVSB mem copy.
 - */
 -
 -.weak memcpy
 -
  /*
   * memcpy - Copy a memory block.
   *
diff --cc arch/x86/lib/memmove_64.S
index 65268a6104f4,90ce01bee00c..000000000000
--- a/arch/x86/lib/memmove_64.S
+++ b/arch/x86/lib/memmove_64.S
@@@ -5,10 -5,8 +5,14 @@@
   * This assembly file is re-written from memmove_64.c file.
   *	- Copyright 2011 Fenghua Yu <fenghua.yu@intel.com>
   */
 +#define _STRING_C
  #include <linux/linkage.h>
++<<<<<<< HEAD
 +#include <asm/dwarf2.h>
 +#include <asm/cpufeature.h>
++=======
+ #include <asm/cpufeatures.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/alternative-asm.h>
  
  #undef memmove
diff --cc arch/x86/lib/memset_64.S
index 2dcb3808cbda,c9c81227ea37..000000000000
--- a/arch/x86/lib/memset_64.S
+++ b/arch/x86/lib/memset_64.S
@@@ -1,10 -1,11 +1,14 @@@
  /* Copyright 2002 Andi Kleen, SuSE Labs */
  
  #include <linux/linkage.h>
++<<<<<<< HEAD
 +#include <asm/dwarf2.h>
 +#include <asm/cpufeature.h>
++=======
+ #include <asm/cpufeatures.h>
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #include <asm/alternative-asm.h>
  
 -.weak memset
 -
  /*
   * ISO C memset - set a memory block to a byte value. This function uses fast
   * string to get better performance than the original function. The code is
diff --cc lib/atomic64_test.c
index 00bca223d1e1,123481814320..000000000000
--- a/lib/atomic64_test.c
+++ b/lib/atomic64_test.c
@@@ -13,8 -16,114 +13,117 @@@
  #include <linux/kernel.h>
  #include <linux/atomic.h>
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_X86
+ #include <asm/cpufeature.h>	/* for boot_cpu_has below */
+ #endif
+ 
+ #define TEST(bit, op, c_op, val)				\
+ do {								\
+ 	atomic##bit##_set(&v, v0);				\
+ 	r = v0;							\
+ 	atomic##bit##_##op(val, &v);				\
+ 	r c_op val;						\
+ 	WARN(atomic##bit##_read(&v) != r, "%Lx != %Lx\n",	\
+ 		(unsigned long long)atomic##bit##_read(&v),	\
+ 		(unsigned long long)r);				\
+ } while (0)
+ 
+ /*
+  * Test for a atomic operation family,
+  * @test should be a macro accepting parameters (bit, op, ...)
+  */
+ 
+ #define FAMILY_TEST(test, bit, op, args...)	\
+ do {						\
+ 	test(bit, op, ##args);		\
+ 	test(bit, op##_acquire, ##args);	\
+ 	test(bit, op##_release, ##args);	\
+ 	test(bit, op##_relaxed, ##args);	\
+ } while (0)
+ 
+ #define TEST_RETURN(bit, op, c_op, val)				\
+ do {								\
+ 	atomic##bit##_set(&v, v0);				\
+ 	r = v0;							\
+ 	r c_op val;						\
+ 	BUG_ON(atomic##bit##_##op(val, &v) != r);		\
+ 	BUG_ON(atomic##bit##_read(&v) != r);			\
+ } while (0)
+ 
+ #define RETURN_FAMILY_TEST(bit, op, c_op, val)			\
+ do {								\
+ 	FAMILY_TEST(TEST_RETURN, bit, op, c_op, val);		\
+ } while (0)
+ 
+ #define TEST_ARGS(bit, op, init, ret, expect, args...)		\
+ do {								\
+ 	atomic##bit##_set(&v, init);				\
+ 	BUG_ON(atomic##bit##_##op(&v, ##args) != ret);		\
+ 	BUG_ON(atomic##bit##_read(&v) != expect);		\
+ } while (0)
+ 
+ #define XCHG_FAMILY_TEST(bit, init, new)				\
+ do {									\
+ 	FAMILY_TEST(TEST_ARGS, bit, xchg, init, init, new, new);	\
+ } while (0)
+ 
+ #define CMPXCHG_FAMILY_TEST(bit, init, new, wrong)			\
+ do {									\
+ 	FAMILY_TEST(TEST_ARGS, bit, cmpxchg, 				\
+ 			init, init, new, init, new);			\
+ 	FAMILY_TEST(TEST_ARGS, bit, cmpxchg,				\
+ 			init, init, init, wrong, new);			\
+ } while (0)
+ 
+ #define INC_RETURN_FAMILY_TEST(bit, i)			\
+ do {							\
+ 	FAMILY_TEST(TEST_ARGS, bit, inc_return,		\
+ 			i, (i) + one, (i) + one);	\
+ } while (0)
+ 
+ #define DEC_RETURN_FAMILY_TEST(bit, i)			\
+ do {							\
+ 	FAMILY_TEST(TEST_ARGS, bit, dec_return,		\
+ 			i, (i) - one, (i) - one);	\
+ } while (0)
+ 
+ static __init void test_atomic(void)
+ {
+ 	int v0 = 0xaaa31337;
+ 	int v1 = 0xdeadbeef;
+ 	int onestwos = 0x11112222;
+ 	int one = 1;
+ 
+ 	atomic_t v;
+ 	int r;
+ 
+ 	TEST(, add, +=, onestwos);
+ 	TEST(, add, +=, -one);
+ 	TEST(, sub, -=, onestwos);
+ 	TEST(, sub, -=, -one);
+ 	TEST(, or, |=, v1);
+ 	TEST(, and, &=, v1);
+ 	TEST(, xor, ^=, v1);
+ 	TEST(, andnot, &= ~, v1);
+ 
+ 	RETURN_FAMILY_TEST(, add_return, +=, onestwos);
+ 	RETURN_FAMILY_TEST(, add_return, +=, -one);
+ 	RETURN_FAMILY_TEST(, sub_return, -=, onestwos);
+ 	RETURN_FAMILY_TEST(, sub_return, -=, -one);
+ 
+ 	INC_RETURN_FAMILY_TEST(, v0);
+ 	DEC_RETURN_FAMILY_TEST(, v0);
+ 
+ 	XCHG_FAMILY_TEST(, v0, v1);
+ 	CMPXCHG_FAMILY_TEST(, v0, v1, onestwos);
+ 
+ }
+ 
++>>>>>>> cd4d09ec6f6c (x86/cpufeature: Carve out X86_FEATURE_*)
  #define INIT(c) do { atomic64_set(&v, c); r = c; } while (0)
 -static __init void test_atomic64(void)
 +static __init int test_atomic64(void)
  {
  	long long v0 = 0xaaa31337c001d00dLL;
  	long long v1 = 0xdeadbeefdeafcafeLL;
* Unmerged path arch/x86/entry/common.c
* Unmerged path arch/x86/entry/entry_32.S
* Unmerged path arch/x86/entry/vdso/vdso32-setup.c
* Unmerged path arch/x86/entry/vdso/vdso32/system_call.S
* Unmerged path arch/x86/entry/vdso/vma.c
* Unmerged path arch/x86/include/asm/fpu/internal.h
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index bd963f8edd7c..942dd3a37905 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -549,7 +549,7 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 
 	clearcpuid=BITNUM [X86]
 			Disable CPUID feature X for the kernel. See
-			arch/x86/include/asm/cpufeature.h for the valid bit
+			arch/x86/include/asm/cpufeatures.h for the valid bit
 			numbers. Note the Linux specific bits are not necessarily
 			stable over kernel options, but the vendor specific
 			ones should be.
diff --git a/arch/x86/boot/cpuflags.h b/arch/x86/boot/cpuflags.h
index b28f8f3df40a..15ad56a3f905 100644
--- a/arch/x86/boot/cpuflags.h
+++ b/arch/x86/boot/cpuflags.h
@@ -1,7 +1,7 @@
 #ifndef BOOT_CPUFLAGS_H
 #define BOOT_CPUFLAGS_H
 
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/processor-flags.h>
 
 struct cpu_features {
diff --git a/arch/x86/boot/mkcpustr.c b/arch/x86/boot/mkcpustr.c
index 637097e66a62..f72498dc90d2 100644
--- a/arch/x86/boot/mkcpustr.c
+++ b/arch/x86/boot/mkcpustr.c
@@ -17,7 +17,7 @@
 
 #include "../include/asm/required-features.h"
 #include "../include/asm/disabled-features.h"
-#include "../include/asm/cpufeature.h"
+#include "../include/asm/cpufeatures.h"
 #include "../kernel/cpu/capflags.c"
 
 int main(void)
diff --git a/arch/x86/crypto/crc32-pclmul_glue.c b/arch/x86/crypto/crc32-pclmul_glue.c
index 1937fc1d8763..80dd996204a4 100644
--- a/arch/x86/crypto/crc32-pclmul_glue.c
+++ b/arch/x86/crypto/crc32-pclmul_glue.c
@@ -33,7 +33,7 @@
 #include <linux/crc32.h>
 #include <crypto/internal/hash.h>
 
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/cpu_device_id.h>
 #include <asm/i387.h>
 
diff --git a/arch/x86/crypto/crc32c-intel_glue.c b/arch/x86/crypto/crc32c-intel_glue.c
index 28640c3d6af7..d4276a997e40 100644
--- a/arch/x86/crypto/crc32c-intel_glue.c
+++ b/arch/x86/crypto/crc32c-intel_glue.c
@@ -30,7 +30,7 @@
 #include <linux/kernel.h>
 #include <crypto/internal/hash.h>
 
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/cpu_device_id.h>
 #include <asm/i387.h>
 #include <asm/fpu-internal.h>
* Unmerged path arch/x86/crypto/crct10dif-pclmul_glue.c
* Unmerged path arch/x86/entry/common.c
* Unmerged path arch/x86/entry/entry_32.S
* Unmerged path arch/x86/entry/vdso/vdso32-setup.c
* Unmerged path arch/x86/entry/vdso/vdso32/system_call.S
* Unmerged path arch/x86/entry/vdso/vma.c
diff --git a/arch/x86/include/asm/alternative.h b/arch/x86/include/asm/alternative.h
index 87e309068892..5011130661f4 100644
--- a/arch/x86/include/asm/alternative.h
+++ b/arch/x86/include/asm/alternative.h
@@ -125,12 +125,6 @@ static inline int alternatives_text_reserved(void *start, void *end)
 	ALTINSTR_REPLACEMENT(newinstr2, feature2, 2)			\
 	".popsection"
 
-/*
- * This must be included *after* the definition of ALTERNATIVE due to
- * <asm/arch_hweight.h>
- */
-#include <asm/cpufeature.h>
-
 /*
  * Alternative instructions for different CPU types or capabilities.
  *
diff --git a/arch/x86/include/asm/apic.h b/arch/x86/include/asm/apic.h
index e3fe086bc20c..83a199eb0bee 100644
--- a/arch/x86/include/asm/apic.h
+++ b/arch/x86/include/asm/apic.h
@@ -6,7 +6,6 @@
 
 #include <asm/alternative.h>
 #include <asm/cpufeature.h>
-#include <asm/processor.h>
 #include <asm/apicdef.h>
 #include <linux/atomic.h>
 #include <asm/fixmap.h>
diff --git a/arch/x86/include/asm/arch_hweight.h b/arch/x86/include/asm/arch_hweight.h
index 9686c3d9ff73..d0fb5321d079 100644
--- a/arch/x86/include/asm/arch_hweight.h
+++ b/arch/x86/include/asm/arch_hweight.h
@@ -1,6 +1,8 @@
 #ifndef _ASM_X86_HWEIGHT_H
 #define _ASM_X86_HWEIGHT_H
 
+#include <asm/cpufeatures.h>
+
 #ifdef CONFIG_64BIT
 /* popcnt %edi, %eax -- redundant REX prefix for alignment */
 #define POPCNT32 ".byte 0xf3,0x40,0x0f,0xb8,0xc7"
diff --git a/arch/x86/include/asm/cmpxchg.h b/arch/x86/include/asm/cmpxchg.h
index d47786acb016..0489ae7f0ac6 100644
--- a/arch/x86/include/asm/cmpxchg.h
+++ b/arch/x86/include/asm/cmpxchg.h
@@ -2,6 +2,7 @@
 #define ASM_X86_CMPXCHG_H
 
 #include <linux/compiler.h>
+#include <asm/cpufeatures.h>
 #include <asm/alternative.h> /* Provides LOCK_PREFIX */
 
 /*
* Unmerged path arch/x86/include/asm/cpufeature.h
diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h
new file mode 100644
index 000000000000..0ceb6adc8a48
--- /dev/null
+++ b/arch/x86/include/asm/cpufeatures.h
@@ -0,0 +1,288 @@
+#ifndef _ASM_X86_CPUFEATURES_H
+#define _ASM_X86_CPUFEATURES_H
+
+#ifndef _ASM_X86_REQUIRED_FEATURES_H
+#include <asm/required-features.h>
+#endif
+
+#ifndef _ASM_X86_DISABLED_FEATURES_H
+#include <asm/disabled-features.h>
+#endif
+
+/*
+ * Defines x86 CPU feature bits
+ */
+#define NCAPINTS	16	/* N 32-bit words worth of info */
+#define NBUGINTS	1	/* N 32-bit bug flags */
+
+/*
+ * Note: If the comment begins with a quoted string, that string is used
+ * in /proc/cpuinfo instead of the macro name.  If the string is "",
+ * this feature bit is not displayed in /proc/cpuinfo at all.
+ */
+
+/* Intel-defined CPU features, CPUID level 0x00000001 (edx), word 0 */
+#define X86_FEATURE_FPU		( 0*32+ 0) /* Onboard FPU */
+#define X86_FEATURE_VME		( 0*32+ 1) /* Virtual Mode Extensions */
+#define X86_FEATURE_DE		( 0*32+ 2) /* Debugging Extensions */
+#define X86_FEATURE_PSE		( 0*32+ 3) /* Page Size Extensions */
+#define X86_FEATURE_TSC		( 0*32+ 4) /* Time Stamp Counter */
+#define X86_FEATURE_MSR		( 0*32+ 5) /* Model-Specific Registers */
+#define X86_FEATURE_PAE		( 0*32+ 6) /* Physical Address Extensions */
+#define X86_FEATURE_MCE		( 0*32+ 7) /* Machine Check Exception */
+#define X86_FEATURE_CX8		( 0*32+ 8) /* CMPXCHG8 instruction */
+#define X86_FEATURE_APIC	( 0*32+ 9) /* Onboard APIC */
+#define X86_FEATURE_SEP		( 0*32+11) /* SYSENTER/SYSEXIT */
+#define X86_FEATURE_MTRR	( 0*32+12) /* Memory Type Range Registers */
+#define X86_FEATURE_PGE		( 0*32+13) /* Page Global Enable */
+#define X86_FEATURE_MCA		( 0*32+14) /* Machine Check Architecture */
+#define X86_FEATURE_CMOV	( 0*32+15) /* CMOV instructions */
+					  /* (plus FCMOVcc, FCOMI with FPU) */
+#define X86_FEATURE_PAT		( 0*32+16) /* Page Attribute Table */
+#define X86_FEATURE_PSE36	( 0*32+17) /* 36-bit PSEs */
+#define X86_FEATURE_PN		( 0*32+18) /* Processor serial number */
+#define X86_FEATURE_CLFLUSH	( 0*32+19) /* CLFLUSH instruction */
+#define X86_FEATURE_DS		( 0*32+21) /* "dts" Debug Store */
+#define X86_FEATURE_ACPI	( 0*32+22) /* ACPI via MSR */
+#define X86_FEATURE_MMX		( 0*32+23) /* Multimedia Extensions */
+#define X86_FEATURE_FXSR	( 0*32+24) /* FXSAVE/FXRSTOR, CR4.OSFXSR */
+#define X86_FEATURE_XMM		( 0*32+25) /* "sse" */
+#define X86_FEATURE_XMM2	( 0*32+26) /* "sse2" */
+#define X86_FEATURE_SELFSNOOP	( 0*32+27) /* "ss" CPU self snoop */
+#define X86_FEATURE_HT		( 0*32+28) /* Hyper-Threading */
+#define X86_FEATURE_ACC		( 0*32+29) /* "tm" Automatic clock control */
+#define X86_FEATURE_IA64	( 0*32+30) /* IA-64 processor */
+#define X86_FEATURE_PBE		( 0*32+31) /* Pending Break Enable */
+
+/* AMD-defined CPU features, CPUID level 0x80000001, word 1 */
+/* Don't duplicate feature flags which are redundant with Intel! */
+#define X86_FEATURE_SYSCALL	( 1*32+11) /* SYSCALL/SYSRET */
+#define X86_FEATURE_MP		( 1*32+19) /* MP Capable. */
+#define X86_FEATURE_NX		( 1*32+20) /* Execute Disable */
+#define X86_FEATURE_MMXEXT	( 1*32+22) /* AMD MMX extensions */
+#define X86_FEATURE_FXSR_OPT	( 1*32+25) /* FXSAVE/FXRSTOR optimizations */
+#define X86_FEATURE_GBPAGES	( 1*32+26) /* "pdpe1gb" GB pages */
+#define X86_FEATURE_RDTSCP	( 1*32+27) /* RDTSCP */
+#define X86_FEATURE_LM		( 1*32+29) /* Long Mode (x86-64) */
+#define X86_FEATURE_3DNOWEXT	( 1*32+30) /* AMD 3DNow! extensions */
+#define X86_FEATURE_3DNOW	( 1*32+31) /* 3DNow! */
+
+/* Transmeta-defined CPU features, CPUID level 0x80860001, word 2 */
+#define X86_FEATURE_RECOVERY	( 2*32+ 0) /* CPU in recovery mode */
+#define X86_FEATURE_LONGRUN	( 2*32+ 1) /* Longrun power control */
+#define X86_FEATURE_LRTI	( 2*32+ 3) /* LongRun table interface */
+
+/* Other features, Linux-defined mapping, word 3 */
+/* This range is used for feature bits which conflict or are synthesized */
+#define X86_FEATURE_CXMMX	( 3*32+ 0) /* Cyrix MMX extensions */
+#define X86_FEATURE_K6_MTRR	( 3*32+ 1) /* AMD K6 nonstandard MTRRs */
+#define X86_FEATURE_CYRIX_ARR	( 3*32+ 2) /* Cyrix ARRs (= MTRRs) */
+#define X86_FEATURE_CENTAUR_MCR	( 3*32+ 3) /* Centaur MCRs (= MTRRs) */
+/* cpu types for specific tunings: */
+#define X86_FEATURE_K8		( 3*32+ 4) /* "" Opteron, Athlon64 */
+#define X86_FEATURE_K7		( 3*32+ 5) /* "" Athlon */
+#define X86_FEATURE_P3		( 3*32+ 6) /* "" P3 */
+#define X86_FEATURE_P4		( 3*32+ 7) /* "" P4 */
+#define X86_FEATURE_CONSTANT_TSC ( 3*32+ 8) /* TSC ticks at a constant rate */
+#define X86_FEATURE_UP		( 3*32+ 9) /* smp kernel running on up */
+/* free, was #define X86_FEATURE_FXSAVE_LEAK ( 3*32+10) * "" FXSAVE leaks FOP/FIP/FOP */
+#define X86_FEATURE_ARCH_PERFMON ( 3*32+11) /* Intel Architectural PerfMon */
+#define X86_FEATURE_PEBS	( 3*32+12) /* Precise-Event Based Sampling */
+#define X86_FEATURE_BTS		( 3*32+13) /* Branch Trace Store */
+#define X86_FEATURE_SYSCALL32	( 3*32+14) /* "" syscall in ia32 userspace */
+#define X86_FEATURE_SYSENTER32	( 3*32+15) /* "" sysenter in ia32 userspace */
+#define X86_FEATURE_REP_GOOD	( 3*32+16) /* rep microcode works well */
+#define X86_FEATURE_MFENCE_RDTSC ( 3*32+17) /* "" Mfence synchronizes RDTSC */
+#define X86_FEATURE_LFENCE_RDTSC ( 3*32+18) /* "" Lfence synchronizes RDTSC */
+/* free, was #define X86_FEATURE_11AP	( 3*32+19) * "" Bad local APIC aka 11AP */
+#define X86_FEATURE_NOPL	( 3*32+20) /* The NOPL (0F 1F) instructions */
+#define X86_FEATURE_ALWAYS	( 3*32+21) /* "" Always-present feature */
+#define X86_FEATURE_XTOPOLOGY	( 3*32+22) /* cpu topology enum extensions */
+#define X86_FEATURE_TSC_RELIABLE ( 3*32+23) /* TSC is known to be reliable */
+#define X86_FEATURE_NONSTOP_TSC	( 3*32+24) /* TSC does not stop in C states */
+/* free, was #define X86_FEATURE_CLFLUSH_MONITOR ( 3*32+25) * "" clflush reqd with monitor */
+#define X86_FEATURE_EXTD_APICID	( 3*32+26) /* has extended APICID (8 bits) */
+#define X86_FEATURE_AMD_DCM     ( 3*32+27) /* multi-node processor */
+#define X86_FEATURE_APERFMPERF	( 3*32+28) /* APERFMPERF */
+#define X86_FEATURE_EAGER_FPU	( 3*32+29) /* "eagerfpu" Non lazy FPU restore */
+#define X86_FEATURE_NONSTOP_TSC_S3 ( 3*32+30) /* TSC doesn't stop in S3 state */
+
+/* Intel-defined CPU features, CPUID level 0x00000001 (ecx), word 4 */
+#define X86_FEATURE_XMM3	( 4*32+ 0) /* "pni" SSE-3 */
+#define X86_FEATURE_PCLMULQDQ	( 4*32+ 1) /* PCLMULQDQ instruction */
+#define X86_FEATURE_DTES64	( 4*32+ 2) /* 64-bit Debug Store */
+#define X86_FEATURE_MWAIT	( 4*32+ 3) /* "monitor" Monitor/Mwait support */
+#define X86_FEATURE_DSCPL	( 4*32+ 4) /* "ds_cpl" CPL Qual. Debug Store */
+#define X86_FEATURE_VMX		( 4*32+ 5) /* Hardware virtualization */
+#define X86_FEATURE_SMX		( 4*32+ 6) /* Safer mode */
+#define X86_FEATURE_EST		( 4*32+ 7) /* Enhanced SpeedStep */
+#define X86_FEATURE_TM2		( 4*32+ 8) /* Thermal Monitor 2 */
+#define X86_FEATURE_SSSE3	( 4*32+ 9) /* Supplemental SSE-3 */
+#define X86_FEATURE_CID		( 4*32+10) /* Context ID */
+#define X86_FEATURE_SDBG	( 4*32+11) /* Silicon Debug */
+#define X86_FEATURE_FMA		( 4*32+12) /* Fused multiply-add */
+#define X86_FEATURE_CX16	( 4*32+13) /* CMPXCHG16B */
+#define X86_FEATURE_XTPR	( 4*32+14) /* Send Task Priority Messages */
+#define X86_FEATURE_PDCM	( 4*32+15) /* Performance Capabilities */
+#define X86_FEATURE_PCID	( 4*32+17) /* Process Context Identifiers */
+#define X86_FEATURE_DCA		( 4*32+18) /* Direct Cache Access */
+#define X86_FEATURE_XMM4_1	( 4*32+19) /* "sse4_1" SSE-4.1 */
+#define X86_FEATURE_XMM4_2	( 4*32+20) /* "sse4_2" SSE-4.2 */
+#define X86_FEATURE_X2APIC	( 4*32+21) /* x2APIC */
+#define X86_FEATURE_MOVBE	( 4*32+22) /* MOVBE instruction */
+#define X86_FEATURE_POPCNT      ( 4*32+23) /* POPCNT instruction */
+#define X86_FEATURE_TSC_DEADLINE_TIMER	( 4*32+24) /* Tsc deadline timer */
+#define X86_FEATURE_AES		( 4*32+25) /* AES instructions */
+#define X86_FEATURE_XSAVE	( 4*32+26) /* XSAVE/XRSTOR/XSETBV/XGETBV */
+#define X86_FEATURE_OSXSAVE	( 4*32+27) /* "" XSAVE enabled in the OS */
+#define X86_FEATURE_AVX		( 4*32+28) /* Advanced Vector Extensions */
+#define X86_FEATURE_F16C	( 4*32+29) /* 16-bit fp conversions */
+#define X86_FEATURE_RDRAND	( 4*32+30) /* The RDRAND instruction */
+#define X86_FEATURE_HYPERVISOR	( 4*32+31) /* Running on a hypervisor */
+
+/* VIA/Cyrix/Centaur-defined CPU features, CPUID level 0xC0000001, word 5 */
+#define X86_FEATURE_XSTORE	( 5*32+ 2) /* "rng" RNG present (xstore) */
+#define X86_FEATURE_XSTORE_EN	( 5*32+ 3) /* "rng_en" RNG enabled */
+#define X86_FEATURE_XCRYPT	( 5*32+ 6) /* "ace" on-CPU crypto (xcrypt) */
+#define X86_FEATURE_XCRYPT_EN	( 5*32+ 7) /* "ace_en" on-CPU crypto enabled */
+#define X86_FEATURE_ACE2	( 5*32+ 8) /* Advanced Cryptography Engine v2 */
+#define X86_FEATURE_ACE2_EN	( 5*32+ 9) /* ACE v2 enabled */
+#define X86_FEATURE_PHE		( 5*32+10) /* PadLock Hash Engine */
+#define X86_FEATURE_PHE_EN	( 5*32+11) /* PHE enabled */
+#define X86_FEATURE_PMM		( 5*32+12) /* PadLock Montgomery Multiplier */
+#define X86_FEATURE_PMM_EN	( 5*32+13) /* PMM enabled */
+
+/* More extended AMD flags: CPUID level 0x80000001, ecx, word 6 */
+#define X86_FEATURE_LAHF_LM	( 6*32+ 0) /* LAHF/SAHF in long mode */
+#define X86_FEATURE_CMP_LEGACY	( 6*32+ 1) /* If yes HyperThreading not valid */
+#define X86_FEATURE_SVM		( 6*32+ 2) /* Secure virtual machine */
+#define X86_FEATURE_EXTAPIC	( 6*32+ 3) /* Extended APIC space */
+#define X86_FEATURE_CR8_LEGACY	( 6*32+ 4) /* CR8 in 32-bit mode */
+#define X86_FEATURE_ABM		( 6*32+ 5) /* Advanced bit manipulation */
+#define X86_FEATURE_SSE4A	( 6*32+ 6) /* SSE-4A */
+#define X86_FEATURE_MISALIGNSSE ( 6*32+ 7) /* Misaligned SSE mode */
+#define X86_FEATURE_3DNOWPREFETCH ( 6*32+ 8) /* 3DNow prefetch instructions */
+#define X86_FEATURE_OSVW	( 6*32+ 9) /* OS Visible Workaround */
+#define X86_FEATURE_IBS		( 6*32+10) /* Instruction Based Sampling */
+#define X86_FEATURE_XOP		( 6*32+11) /* extended AVX instructions */
+#define X86_FEATURE_SKINIT	( 6*32+12) /* SKINIT/STGI instructions */
+#define X86_FEATURE_WDT		( 6*32+13) /* Watchdog timer */
+#define X86_FEATURE_LWP		( 6*32+15) /* Light Weight Profiling */
+#define X86_FEATURE_FMA4	( 6*32+16) /* 4 operands MAC instructions */
+#define X86_FEATURE_TCE		( 6*32+17) /* translation cache extension */
+#define X86_FEATURE_NODEID_MSR	( 6*32+19) /* NodeId MSR */
+#define X86_FEATURE_TBM		( 6*32+21) /* trailing bit manipulations */
+#define X86_FEATURE_TOPOEXT	( 6*32+22) /* topology extensions CPUID leafs */
+#define X86_FEATURE_PERFCTR_CORE ( 6*32+23) /* core performance counter extensions */
+#define X86_FEATURE_PERFCTR_NB  ( 6*32+24) /* NB performance counter extensions */
+#define X86_FEATURE_BPEXT	(6*32+26) /* data breakpoint extension */
+#define X86_FEATURE_PERFCTR_L2	( 6*32+28) /* L2 performance counter extensions */
+#define X86_FEATURE_MWAITX	( 6*32+29) /* MWAIT extension (MONITORX/MWAITX) */
+
+/*
+ * Auxiliary flags: Linux defined - For features scattered in various
+ * CPUID levels like 0x6, 0xA etc, word 7.
+ *
+ * Reuse free bits when adding new feature flags!
+ */
+
+#define X86_FEATURE_CPB		( 7*32+ 2) /* AMD Core Performance Boost */
+#define X86_FEATURE_EPB		( 7*32+ 3) /* IA32_ENERGY_PERF_BIAS support */
+
+#define X86_FEATURE_HW_PSTATE	( 7*32+ 8) /* AMD HW-PState */
+#define X86_FEATURE_PROC_FEEDBACK ( 7*32+ 9) /* AMD ProcFeedbackInterface */
+
+#define X86_FEATURE_INTEL_PT	( 7*32+15) /* Intel Processor Trace */
+
+/* Virtualization flags: Linux defined, word 8 */
+#define X86_FEATURE_TPR_SHADOW  ( 8*32+ 0) /* Intel TPR Shadow */
+#define X86_FEATURE_VNMI        ( 8*32+ 1) /* Intel Virtual NMI */
+#define X86_FEATURE_FLEXPRIORITY ( 8*32+ 2) /* Intel FlexPriority */
+#define X86_FEATURE_EPT         ( 8*32+ 3) /* Intel Extended Page Table */
+#define X86_FEATURE_VPID        ( 8*32+ 4) /* Intel Virtual Processor ID */
+
+#define X86_FEATURE_VMMCALL     ( 8*32+15) /* Prefer vmmcall to vmcall */
+#define X86_FEATURE_XENPV       ( 8*32+16) /* "" Xen paravirtual guest */
+
+
+/* Intel-defined CPU features, CPUID level 0x00000007:0 (ebx), word 9 */
+#define X86_FEATURE_FSGSBASE	( 9*32+ 0) /* {RD/WR}{FS/GS}BASE instructions*/
+#define X86_FEATURE_TSC_ADJUST	( 9*32+ 1) /* TSC adjustment MSR 0x3b */
+#define X86_FEATURE_BMI1	( 9*32+ 3) /* 1st group bit manipulation extensions */
+#define X86_FEATURE_HLE		( 9*32+ 4) /* Hardware Lock Elision */
+#define X86_FEATURE_AVX2	( 9*32+ 5) /* AVX2 instructions */
+#define X86_FEATURE_SMEP	( 9*32+ 7) /* Supervisor Mode Execution Protection */
+#define X86_FEATURE_BMI2	( 9*32+ 8) /* 2nd group bit manipulation extensions */
+#define X86_FEATURE_ERMS	( 9*32+ 9) /* Enhanced REP MOVSB/STOSB */
+#define X86_FEATURE_INVPCID	( 9*32+10) /* Invalidate Processor Context ID */
+#define X86_FEATURE_RTM		( 9*32+11) /* Restricted Transactional Memory */
+#define X86_FEATURE_CQM		( 9*32+12) /* Cache QoS Monitoring */
+#define X86_FEATURE_MPX		( 9*32+14) /* Memory Protection Extension */
+#define X86_FEATURE_AVX512F	( 9*32+16) /* AVX-512 Foundation */
+#define X86_FEATURE_RDSEED	( 9*32+18) /* The RDSEED instruction */
+#define X86_FEATURE_ADX		( 9*32+19) /* The ADCX and ADOX instructions */
+#define X86_FEATURE_SMAP	( 9*32+20) /* Supervisor Mode Access Prevention */
+#define X86_FEATURE_PCOMMIT	( 9*32+22) /* PCOMMIT instruction */
+#define X86_FEATURE_CLFLUSHOPT	( 9*32+23) /* CLFLUSHOPT instruction */
+#define X86_FEATURE_CLWB	( 9*32+24) /* CLWB instruction */
+#define X86_FEATURE_AVX512PF	( 9*32+26) /* AVX-512 Prefetch */
+#define X86_FEATURE_AVX512ER	( 9*32+27) /* AVX-512 Exponential and Reciprocal */
+#define X86_FEATURE_AVX512CD	( 9*32+28) /* AVX-512 Conflict Detection */
+#define X86_FEATURE_SHA_NI	( 9*32+29) /* SHA1/SHA256 Instruction Extensions */
+
+/* Extended state features, CPUID level 0x0000000d:1 (eax), word 10 */
+#define X86_FEATURE_XSAVEOPT	(10*32+ 0) /* XSAVEOPT */
+#define X86_FEATURE_XSAVEC	(10*32+ 1) /* XSAVEC */
+#define X86_FEATURE_XGETBV1	(10*32+ 2) /* XGETBV with ECX = 1 */
+#define X86_FEATURE_XSAVES	(10*32+ 3) /* XSAVES/XRSTORS */
+
+/* Intel-defined CPU QoS Sub-leaf, CPUID level 0x0000000F:0 (edx), word 11 */
+#define X86_FEATURE_CQM_LLC	(11*32+ 1) /* LLC QoS if 1 */
+
+/* Intel-defined CPU QoS Sub-leaf, CPUID level 0x0000000F:1 (edx), word 12 */
+#define X86_FEATURE_CQM_OCCUP_LLC (12*32+ 0) /* LLC occupancy monitoring if 1 */
+
+/* AMD-defined CPU features, CPUID level 0x80000008 (ebx), word 13 */
+#define X86_FEATURE_CLZERO	(13*32+0) /* CLZERO instruction */
+
+/* Thermal and Power Management Leaf, CPUID level 0x00000006 (eax), word 14 */
+#define X86_FEATURE_DTHERM	(14*32+ 0) /* Digital Thermal Sensor */
+#define X86_FEATURE_IDA		(14*32+ 1) /* Intel Dynamic Acceleration */
+#define X86_FEATURE_ARAT	(14*32+ 2) /* Always Running APIC Timer */
+#define X86_FEATURE_PLN		(14*32+ 4) /* Intel Power Limit Notification */
+#define X86_FEATURE_PTS		(14*32+ 6) /* Intel Package Thermal Status */
+#define X86_FEATURE_HWP		(14*32+ 7) /* Intel Hardware P-states */
+#define X86_FEATURE_HWP_NOTIFY	(14*32+ 8) /* HWP Notification */
+#define X86_FEATURE_HWP_ACT_WINDOW (14*32+ 9) /* HWP Activity Window */
+#define X86_FEATURE_HWP_EPP	(14*32+10) /* HWP Energy Perf. Preference */
+#define X86_FEATURE_HWP_PKG_REQ (14*32+11) /* HWP Package Level Request */
+
+/* AMD SVM Feature Identification, CPUID level 0x8000000a (edx), word 15 */
+#define X86_FEATURE_NPT		(15*32+ 0) /* Nested Page Table support */
+#define X86_FEATURE_LBRV	(15*32+ 1) /* LBR Virtualization support */
+#define X86_FEATURE_SVML	(15*32+ 2) /* "svm_lock" SVM locking MSR */
+#define X86_FEATURE_NRIPS	(15*32+ 3) /* "nrip_save" SVM next_rip save */
+#define X86_FEATURE_TSCRATEMSR  (15*32+ 4) /* "tsc_scale" TSC scaling support */
+#define X86_FEATURE_VMCBCLEAN   (15*32+ 5) /* "vmcb_clean" VMCB clean bits support */
+#define X86_FEATURE_FLUSHBYASID (15*32+ 6) /* flush-by-ASID support */
+#define X86_FEATURE_DECODEASSISTS (15*32+ 7) /* Decode Assists support */
+#define X86_FEATURE_PAUSEFILTER (15*32+10) /* filtered pause intercept */
+#define X86_FEATURE_PFTHRESHOLD (15*32+12) /* pause filter threshold */
+#define X86_FEATURE_AVIC	(15*32+13) /* Virtual Interrupt Controller */
+
+/*
+ * BUG word(s)
+ */
+#define X86_BUG(x)		(NCAPINTS*32 + (x))
+
+#define X86_BUG_F00F		X86_BUG(0) /* Intel F00F */
+#define X86_BUG_FDIV		X86_BUG(1) /* FPU FDIV */
+#define X86_BUG_COMA		X86_BUG(2) /* Cyrix 6x86 coma */
+#define X86_BUG_AMD_TLB_MMATCH	X86_BUG(3) /* "tlb_mmatch" AMD Erratum 383 */
+#define X86_BUG_AMD_APIC_C1E	X86_BUG(4) /* "apic_c1e" AMD Erratum 400 */
+#define X86_BUG_11AP		X86_BUG(5) /* Bad local APIC aka 11AP */
+#define X86_BUG_FXSAVE_LEAK	X86_BUG(6) /* FXSAVE leaks FOP/FIP/FOP */
+#define X86_BUG_CLFLUSH_MONITOR	X86_BUG(7) /* AAI65, CLFLUSH required before MONITOR */
+#define X86_BUG_SYSRET_SS_ATTRS	X86_BUG(8) /* SYSRET doesn't fix up SS attrs */
+
+#endif /* _ASM_X86_CPUFEATURES_H */
* Unmerged path arch/x86/include/asm/fpu/internal.h
diff --git a/arch/x86/include/asm/irq_work.h b/arch/x86/include/asm/irq_work.h
index 78162f8e248b..d0afb05c84fc 100644
--- a/arch/x86/include/asm/irq_work.h
+++ b/arch/x86/include/asm/irq_work.h
@@ -1,7 +1,7 @@
 #ifndef _ASM_IRQ_WORK_H
 #define _ASM_IRQ_WORK_H
 
-#include <asm/processor.h>
+#include <asm/cpufeature.h>
 
 static inline bool arch_irq_work_has_interrupt(void)
 {
diff --git a/arch/x86/include/asm/mwait.h b/arch/x86/include/asm/mwait.h
index 361b02ef128c..54e363080999 100644
--- a/arch/x86/include/asm/mwait.h
+++ b/arch/x86/include/asm/mwait.h
@@ -3,6 +3,8 @@
 
 #include <linux/sched.h>
 
+#include <asm/cpufeature.h>
+
 #define MWAIT_SUBSTATE_MASK		0xf
 #define MWAIT_CSTATE_MASK		0xf
 #define MWAIT_SUBSTATE_SIZE		4
diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h
index 5023ca6231a6..149e52fc02eb 100644
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@ -13,7 +13,7 @@ struct mm_struct;
 #include <asm/types.h>
 #include <asm/sigcontext.h>
 #include <asm/current.h>
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/page.h>
 #include <asm/pgtable_types.h>
 #include <asm/percpu.h>
@@ -23,7 +23,6 @@ struct mm_struct;
 #include <asm/special_insns.h>
 
 #include <linux/personality.h>
-#include <linux/cpumask.h>
 #include <linux/cache.h>
 #include <linux/threads.h>
 #include <linux/math64.h>
diff --git a/arch/x86/include/asm/smap.h b/arch/x86/include/asm/smap.h
index 8d3120f4e270..447e8f9878fb 100644
--- a/arch/x86/include/asm/smap.h
+++ b/arch/x86/include/asm/smap.h
@@ -15,7 +15,7 @@
 
 #include <linux/stringify.h>
 #include <asm/nops.h>
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 
 /* "Raw" instruction opcodes */
 #define __ASM_CLAC	.byte 0x0f,0x01,0xca
diff --git a/arch/x86/include/asm/smp.h b/arch/x86/include/asm/smp.h
index 702fc0c42ec9..bbce422c1fbf 100644
--- a/arch/x86/include/asm/smp.h
+++ b/arch/x86/include/asm/smp.h
@@ -16,7 +16,6 @@
 #endif
 #include <asm/thread_info.h>
 #include <asm/cpumask.h>
-#include <asm/cpufeature.h>
 
 extern int smp_num_siblings;
 extern unsigned int num_processors;
* Unmerged path arch/x86/include/asm/thread_info.h
diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h
index 3e41fd3dc902..6a7aeec3968a 100644
--- a/arch/x86/include/asm/tlbflush.h
+++ b/arch/x86/include/asm/tlbflush.h
@@ -5,6 +5,7 @@
 #include <linux/sched.h>
 
 #include <asm/processor.h>
+#include <asm/cpufeature.h>
 #include <asm/special_insns.h>
 
 #ifdef CONFIG_PARAVIRT
diff --git a/arch/x86/include/asm/uaccess_64.h b/arch/x86/include/asm/uaccess_64.h
index 4f7923dd0007..81e4289826d4 100644
--- a/arch/x86/include/asm/uaccess_64.h
+++ b/arch/x86/include/asm/uaccess_64.h
@@ -8,7 +8,7 @@
 #include <linux/errno.h>
 #include <linux/lockdep.h>
 #include <asm/alternative.h>
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/page.h>
 
 /*
diff --git a/arch/x86/kernel/cpu/Makefile b/arch/x86/kernel/cpu/Makefile
index 21c1e451a160..ba200fa9a3e3 100644
--- a/arch/x86/kernel/cpu/Makefile
+++ b/arch/x86/kernel/cpu/Makefile
@@ -40,7 +40,7 @@ obj-$(CONFIG_HYPERVISOR_GUEST)		+= vmware.o hypervisor.o mshyperv.o
 quiet_cmd_mkcapflags = MKCAP   $@
       cmd_mkcapflags = $(CONFIG_SHELL) $(srctree)/$(src)/mkcapflags.sh $< $@
 
-cpufeature = $(src)/../../include/asm/cpufeature.h
+cpufeature = $(src)/../../include/asm/cpufeatures.h
 
 targets += capflags.c
 $(obj)/capflags.c: $(cpufeature) $(src)/mkcapflags.sh FORCE
diff --git a/arch/x86/kernel/cpu/centaur.c b/arch/x86/kernel/cpu/centaur.c
index f9ff97902eac..82e2a6826202 100644
--- a/arch/x86/kernel/cpu/centaur.c
+++ b/arch/x86/kernel/cpu/centaur.c
@@ -1,7 +1,7 @@
 #include <linux/bitops.h>
 #include <linux/kernel.h>
 
-#include <asm/processor.h>
+#include <asm/cpufeature.h>
 #include <asm/e820.h>
 #include <asm/mtrr.h>
 #include <asm/msr.h>
diff --git a/arch/x86/kernel/cpu/cyrix.c b/arch/x86/kernel/cpu/cyrix.c
index 1de9bd97c7b5..853342f00199 100644
--- a/arch/x86/kernel/cpu/cyrix.c
+++ b/arch/x86/kernel/cpu/cyrix.c
@@ -8,6 +8,7 @@
 #include <linux/timer.h>
 #include <asm/pci-direct.h>
 #include <asm/tsc.h>
+#include <asm/cpufeature.h>
 
 #include "cpu.h"
 
diff --git a/arch/x86/kernel/cpu/intel.c b/arch/x86/kernel/cpu/intel.c
index 74476001995a..9ac0d10cb29f 100644
--- a/arch/x86/kernel/cpu/intel.c
+++ b/arch/x86/kernel/cpu/intel.c
@@ -8,7 +8,7 @@
 #include <linux/module.h>
 #include <linux/uaccess.h>
 
-#include <asm/processor.h>
+#include <asm/cpufeature.h>
 #include <asm/pgtable.h>
 #include <asm/msr.h>
 #include <asm/bugs.h>
* Unmerged path arch/x86/kernel/cpu/intel_cacheinfo.c
diff --git a/arch/x86/kernel/cpu/match.c b/arch/x86/kernel/cpu/match.c
index 36565373af87..98e780a94c11 100644
--- a/arch/x86/kernel/cpu/match.c
+++ b/arch/x86/kernel/cpu/match.c
@@ -1,5 +1,5 @@
 #include <asm/cpu_device_id.h>
-#include <asm/processor.h>
+#include <asm/cpufeature.h>
 #include <linux/cpu.h>
 #include <linux/module.h>
 #include <linux/slab.h>
* Unmerged path arch/x86/kernel/cpu/mkcapflags.sh
diff --git a/arch/x86/kernel/cpu/mtrr/main.c b/arch/x86/kernel/cpu/mtrr/main.c
index ea5f363a1948..39ec648a5965 100644
--- a/arch/x86/kernel/cpu/mtrr/main.c
+++ b/arch/x86/kernel/cpu/mtrr/main.c
@@ -47,7 +47,7 @@
 #include <linux/smp.h>
 #include <linux/syscore_ops.h>
 
-#include <asm/processor.h>
+#include <asm/cpufeature.h>
 #include <asm/e820.h>
 #include <asm/mtrr.h>
 #include <asm/msr.h>
diff --git a/arch/x86/kernel/cpu/transmeta.c b/arch/x86/kernel/cpu/transmeta.c
index 3fa0e5ad86b4..825c4359656b 100644
--- a/arch/x86/kernel/cpu/transmeta.c
+++ b/arch/x86/kernel/cpu/transmeta.c
@@ -1,6 +1,6 @@
 #include <linux/kernel.h>
 #include <linux/mm.h>
-#include <asm/processor.h>
+#include <asm/cpufeature.h>
 #include <asm/msr.h>
 #include "cpu.h"
 
diff --git a/arch/x86/kernel/e820.c b/arch/x86/kernel/e820.c
index f0e28af79d66..035c178dc9c5 100644
--- a/arch/x86/kernel/e820.c
+++ b/arch/x86/kernel/e820.c
@@ -24,6 +24,7 @@
 #include <asm/e820.h>
 #include <asm/proto.h>
 #include <asm/setup.h>
+#include <asm/cpufeature.h>
 
 /*
  * The e820 map is the map that gets modified e.g. with command line parameters
diff --git a/arch/x86/kernel/head_32.S b/arch/x86/kernel/head_32.S
index 5a2efd7536eb..8c81ea4e838b 100644
--- a/arch/x86/kernel/head_32.S
+++ b/arch/x86/kernel/head_32.S
@@ -19,7 +19,7 @@
 #include <asm/setup.h>
 #include <asm/processor-flags.h>
 #include <asm/msr-index.h>
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/percpu.h>
 #include <asm/nops.h>
 #include <asm/bootparam.h>
* Unmerged path arch/x86/kernel/hpet.c
diff --git a/arch/x86/kernel/msr.c b/arch/x86/kernel/msr.c
index 35ebbdba8b3a..0ef1f538412e 100644
--- a/arch/x86/kernel/msr.c
+++ b/arch/x86/kernel/msr.c
@@ -39,7 +39,7 @@
 #include <linux/gfp.h>
 #include <linux/security.h>
 
-#include <asm/processor.h>
+#include <asm/cpufeature.h>
 #include <asm/msr.h>
 
 static struct class *msr_class;
diff --git a/arch/x86/kernel/verify_cpu.S b/arch/x86/kernel/verify_cpu.S
index 4cf401f581e7..b7c9db5deebe 100644
--- a/arch/x86/kernel/verify_cpu.S
+++ b/arch/x86/kernel/verify_cpu.S
@@ -30,7 +30,7 @@
  * 	appropriately. Either display a message or halt.
  */
 
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/msr-index.h>
 
 verify_cpu:
* Unmerged path arch/x86/lib/clear_page_64.S
* Unmerged path arch/x86/lib/copy_page_64.S
diff --git a/arch/x86/lib/copy_user_64.S b/arch/x86/lib/copy_user_64.S
index a30ca15be21c..8725b418fdfa 100644
--- a/arch/x86/lib/copy_user_64.S
+++ b/arch/x86/lib/copy_user_64.S
@@ -14,7 +14,7 @@
 #include <asm/current.h>
 #include <asm/asm-offsets.h>
 #include <asm/thread_info.h>
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/alternative-asm.h>
 #include <asm/asm.h>
 #include <asm/smap.h>
* Unmerged path arch/x86/lib/memcpy_64.S
* Unmerged path arch/x86/lib/memmove_64.S
* Unmerged path arch/x86/lib/memset_64.S
diff --git a/arch/x86/mm/setup_nx.c b/arch/x86/mm/setup_nx.c
index 90555bf60aa4..6c2c9b0b9b9b 100644
--- a/arch/x86/mm/setup_nx.c
+++ b/arch/x86/mm/setup_nx.c
@@ -4,6 +4,7 @@
 
 #include <asm/pgtable.h>
 #include <asm/proto.h>
+#include <asm/cpufeature.h>
 
 static int disable_nx;
 
diff --git a/arch/x86/oprofile/op_model_amd.c b/arch/x86/oprofile/op_model_amd.c
index b2b94438ff05..a4fb7565c470 100644
--- a/arch/x86/oprofile/op_model_amd.c
+++ b/arch/x86/oprofile/op_model_amd.c
@@ -24,7 +24,6 @@
 #include <asm/nmi.h>
 #include <asm/apic.h>
 #include <asm/processor.h>
-#include <asm/cpufeature.h>
 
 #include "op_x86_model.h"
 #include "op_counter.h"
diff --git a/arch/x86/um/asm/barrier.h b/arch/x86/um/asm/barrier.h
index 2d7d9a1f5b53..5efef1f893e3 100644
--- a/arch/x86/um/asm/barrier.h
+++ b/arch/x86/um/asm/barrier.h
@@ -3,7 +3,7 @@
 
 #include <asm/asm.h>
 #include <asm/segment.h>
-#include <asm/cpufeature.h>
+#include <asm/cpufeatures.h>
 #include <asm/cmpxchg.h>
 #include <asm/nops.h>
 
* Unmerged path lib/atomic64_test.c
