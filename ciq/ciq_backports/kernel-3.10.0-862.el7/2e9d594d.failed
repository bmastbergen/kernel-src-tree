nfp: remove unnecessary parameters from nfp_net_bpf_offload()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 2e9d594d50652395f35744ea98624430c57aae2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2e9d594d.failed

nfp_net_bpf_offload() takes all .setup_tc() parameters but it
doesn't use them at the moment.  Remove unnecessary ones to make
it possible for XDP to reuse this function.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2e9d594d50652395f35744ea98624430c57aae2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
#	drivers/net/ethernet/netronome/nfp/nfp_net_offload.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net.h
index 1826ee93d1da,fd29a6306991..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@@ -784,9 -811,12 +784,16 @@@ nfp_net_debugfs_port_add(struct nfp_ne
  {
  }
  
 -static inline void nfp_net_debugfs_adapter_del(struct nfp_net *nn)
 +static inline void nfp_net_debugfs_dir_clean(struct dentry **dir)
  {
  }
++<<<<<<< HEAD
 +#endif /* CONFIG_NFP_DEBUG */
++=======
+ #endif /* CONFIG_NFP_NET_DEBUG */
+ 
+ void nfp_net_filter_stats_timer(unsigned long data);
+ int nfp_net_bpf_offload(struct nfp_net *nn, struct tc_cls_bpf_offload *cls_bpf);
++>>>>>>> 2e9d594d5065 (nfp: remove unnecessary parameters from nfp_net_bpf_offload())
  
  #endif /* _NFP_NET_H_ */
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index de17d3265a77,1e8e00d25c51..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -2398,6 -2674,31 +2398,34 @@@ static struct rtnl_link_stats64 *nfp_ne
  	return stats;
  }
  
++<<<<<<< HEAD
++=======
+ static bool nfp_net_ebpf_capable(struct nfp_net *nn)
+ {
+ 	if (nn->cap & NFP_NET_CFG_CTRL_BPF &&
+ 	    nn_readb(nn, NFP_NET_CFG_BPF_ABI) == NFP_NET_BPF_ABI)
+ 		return true;
+ 	return false;
+ }
+ 
+ static int
+ nfp_net_setup_tc(struct net_device *netdev, u32 handle, __be16 proto,
+ 		 struct tc_to_netdev *tc)
+ {
+ 	struct nfp_net *nn = netdev_priv(netdev);
+ 
+ 	if (TC_H_MAJ(handle) != TC_H_MAJ(TC_H_INGRESS))
+ 		return -ENOTSUPP;
+ 	if (proto != htons(ETH_P_ALL))
+ 		return -ENOTSUPP;
+ 
+ 	if (tc->type == TC_SETUP_CLSBPF && nfp_net_ebpf_capable(nn))
+ 		return nfp_net_bpf_offload(nn, tc->cls_bpf);
+ 
+ 	return -EINVAL;
+ }
+ 
++>>>>>>> 2e9d594d5065 (nfp: remove unnecessary parameters from nfp_net_bpf_offload())
  static int nfp_net_set_features(struct net_device *netdev,
  				netdev_features_t features)
  {
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_offload.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_offload.c
