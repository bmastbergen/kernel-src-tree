blk-mq-debugfs: allow schedulers to register debugfs attributes

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit d332ce091813d11a46144354baa72b755833392f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d332ce09.failed

This provides the infrastructure for schedulers to expose their internal
state through debugfs. We add a list of queue attributes and a list of
hctx attributes to struct elevator_type and wire them up when switching
schedulers.

	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Reviewed-by: Hannes Reinecke <hare@suse.com>

Add missing seq_file.h header in blk-mq-debugfs.h

	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit d332ce091813d11a46144354baa72b755833392f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-debugfs.c
#	block/blk-mq-debugfs.h
#	block/blk-mq-sched.c
#	include/linux/blk-mq.h
#	include/linux/blkdev.h
#	include/linux/elevator.h
diff --cc include/linux/blk-mq.h
index ab31251b7413,c47aa248c640..000000000000
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@@ -57,43 -43,30 +57,50 @@@ struct blk_mq_hw_ctx 
  
  	unsigned long		queued;
  	unsigned long		run;
 -#define BLK_MQ_MAX_DISPATCH_ORDER	7
 +#define BLK_MQ_MAX_DISPATCH_ORDER	10
  	unsigned long		dispatched[BLK_MQ_MAX_DISPATCH_ORDER];
  
 +	unsigned int		queue_depth;	/* DEPRECATED: RHEL kABI padding, repurpose? */
  	unsigned int		numa_node;
 -	unsigned int		queue_num;
 -
 -	atomic_t		nr_active;
 +	RH_KABI_DEPRECATE(unsigned int, cmd_size)
  
 -	struct hlist_node	cpuhp_dead;
 +	struct blk_mq_cpu_notifier	cpu_notifier;
  	struct kobject		kobj;
  
 -	unsigned long		poll_considered;
 -	unsigned long		poll_invoked;
 -	unsigned long		poll_success;
 +	RH_KABI_EXTEND(struct delayed_work	run_work)
 +	RH_KABI_EXTEND(cpumask_var_t		cpumask)
 +	RH_KABI_EXTEND(int			next_cpu)
 +	RH_KABI_EXTEND(int			next_cpu_batch)
  
++<<<<<<< HEAD
 +	RH_KABI_EXTEND(struct blk_mq_ctxmap	ctx_map)
 +
 +	RH_KABI_EXTEND(atomic_t		nr_active)
 +
 +	RH_KABI_EXTEND(struct blk_flush_queue	*fq)
 +	RH_KABI_EXTEND(struct srcu_struct	queue_rq_srcu)
++=======
+ #ifdef CONFIG_BLK_DEBUG_FS
+ 	struct dentry		*debugfs_dir;
+ 	struct dentry		*sched_debugfs_dir;
+ #endif
++>>>>>>> d332ce091813 (blk-mq-debugfs: allow schedulers to register debugfs attributes)
  };
  
 +#ifdef __GENKSYMS__
 +struct blk_mq_reg {
 +	struct blk_mq_ops	*ops;
 +	unsigned int		nr_hw_queues;
 +	unsigned int		queue_depth;	/* max hw supported */
 +	unsigned int		reserved_tags;
 +	unsigned int		cmd_size;	/* per-request extra data */
 +	int			numa_node;
 +	unsigned int		timeout;
 +	unsigned int		flags;		/* BLK_MQ_F_* */
 +};
 +#else
  struct blk_mq_tag_set {
 -	unsigned int		*mq_map;
 -	const struct blk_mq_ops	*ops;
 +	struct blk_mq_ops	*ops;
  	unsigned int		nr_hw_queues;
  	unsigned int		queue_depth;	/* max hw supported */
  	unsigned int		reserved_tags;
diff --cc include/linux/blkdev.h
index ba3405333171,80ae958717a1..000000000000
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@@ -526,24 -570,22 +526,31 @@@ struct request_queue 
  #endif
  	struct rcu_head		rcu_head;
  	wait_queue_head_t	mq_freeze_wq;
 -	struct percpu_ref	q_usage_counter;
 +	RH_KABI_DEPRECATE(struct percpu_counter, mq_usage_counter)
  	struct list_head	all_q_node;
  
 -	struct blk_mq_tag_set	*tag_set;
 -	struct list_head	tag_set_list;
 -	struct bio_set		*bio_split;
 +	RH_KABI_EXTEND(unprep_rq_fn		*unprep_rq_fn)
  
++<<<<<<< HEAD
 +	RH_KABI_EXTEND(struct blk_mq_tag_set	*tag_set)
 +	RH_KABI_EXTEND(struct list_head		tag_set_list)
++=======
+ #ifdef CONFIG_BLK_DEBUG_FS
+ 	struct dentry		*debugfs_dir;
+ 	struct dentry		*sched_debugfs_dir;
+ #endif
 -
 -	bool			mq_sysfs_init_done;
 -
 -	size_t			cmd_size;
 -	void			*rq_alloc_data;
++>>>>>>> d332ce091813 (blk-mq-debugfs: allow schedulers to register debugfs attributes)
 +
 +	RH_KABI_EXTEND(struct list_head		requeue_list)
 +	RH_KABI_EXTEND(spinlock_t			requeue_lock)
 +	/* requeue_work's type is changed from 'work_struct' to 'delayed_work' below */
 +	RH_KABI_EXTEND(struct work_struct	rh_reserved_requeue_work)
 +	RH_KABI_EXTEND(atomic_t				mq_freeze_depth)
 +	RH_KABI_EXTEND(struct blk_flush_queue   *fq)
 +	RH_KABI_EXTEND(struct percpu_ref	q_usage_counter)
 +	RH_KABI_EXTEND(bool			mq_sysfs_init_done)
 +	RH_KABI_EXTEND(struct work_struct	timeout_work)
 +	RH_KABI_EXTEND(struct delayed_work	requeue_work)
  };
  
  #define QUEUE_FLAG_QUEUED	1	/* uses generic tag queueing */
diff --cc include/linux/elevator.h
index 297200f44dc5,9ec5e22846e0..000000000000
--- a/include/linux/elevator.h
+++ b/include/linux/elevator.h
@@@ -8,8 -8,21 +8,11 @@@
  
  struct io_cq;
  struct elevator_type;
+ #ifdef CONFIG_BLK_DEBUG_FS
+ struct blk_mq_debugfs_attr;
+ #endif
  
 -/*
 - * Return values from elevator merger
 - */
 -enum elv_merge {
 -	ELEVATOR_NO_MERGE	= 0,
 -	ELEVATOR_FRONT_MERGE	= 1,
 -	ELEVATOR_BACK_MERGE	= 2,
 -	ELEVATOR_DISCARD_MERGE	= 3,
 -};
 -
 -typedef enum elv_merge (elevator_merge_fn) (struct request_queue *, struct request **,
 +typedef int (elevator_merge_fn) (struct request_queue *, struct request **,
  				 struct bio *);
  
  typedef void (elevator_merge_req_fn) (struct request_queue *, struct request *, struct request *);
@@@ -95,6 -146,11 +98,14 @@@ struct elevator_typ
  	struct elv_fs_entry *elevator_attrs;
  	char elevator_name[ELV_NAME_MAX];
  	struct module *elevator_owner;
++<<<<<<< HEAD
++=======
+ 	bool uses_mq;
+ #ifdef CONFIG_BLK_DEBUG_FS
+ 	const struct blk_mq_debugfs_attr *queue_debugfs_attrs;
+ 	const struct blk_mq_debugfs_attr *hctx_debugfs_attrs;
+ #endif
++>>>>>>> d332ce091813 (blk-mq-debugfs: allow schedulers to register debugfs attributes)
  
  	/* managed by elevator core */
  	char icq_cache_name[ELV_NAME_MAX + 5];	/* elvname + "_io_cq" */
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-debugfs.h
* Unmerged path block/blk-mq-sched.c
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq-debugfs.h
* Unmerged path block/blk-mq-sched.c
* Unmerged path include/linux/blk-mq.h
* Unmerged path include/linux/blkdev.h
* Unmerged path include/linux/elevator.h
