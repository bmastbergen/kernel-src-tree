x86/dumpstack/ftrace: Convert dump_trace() callbacks to use ftrace_graph_ret_addr()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 408fe5de2f2767059a9561e0ae6d4385d1b39dac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/408fe5de.failed

Convert print_context_stack() and print_context_stack_bp() to use the
arch-independent ftrace_graph_ret_addr() helper.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Acked-by: Steven Rostedt <rostedt@goodmis.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Andy Lutomirski <luto@kernel.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Byungchul Park <byungchul.park@lge.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Nilay Vaish <nilayvaish@gmail.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/56ec97cafc1bf2e34d1119e6443d897db406da86.1471607358.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 408fe5de2f2767059a9561e0ae6d4385d1b39dac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/dumpstack.c
diff --cc arch/x86/kernel/dumpstack.c
index 519aaf41a253,9bf3d021609c..000000000000
--- a/arch/x86/kernel/dumpstack.c
+++ b/arch/x86/kernel/dumpstack.c
@@@ -38,40 -38,6 +38,43 @@@ void printk_address(unsigned long addre
  	pr_cont(" [<%p>] %pS\n", (void *)address, (void *)address);
  }
  
++<<<<<<< HEAD
 +#ifdef CONFIG_FUNCTION_GRAPH_TRACER
 +static void
 +print_ftrace_graph_addr(unsigned long addr, void *data,
 +			const struct stacktrace_ops *ops,
 +			struct thread_info *tinfo, int *graph)
 +{
 +	struct task_struct *task;
 +	unsigned long ret_addr;
 +	int index;
 +
 +	if (addr != (unsigned long)return_to_handler)
 +		return;
 +
 +	task = tinfo->task;
 +	index = task->curr_ret_stack;
 +
 +	if (!task->ret_stack || index < *graph)
 +		return;
 +
 +	index -= *graph;
 +	ret_addr = task->ret_stack[index].ret;
 +
 +	ops->address(data, ret_addr, 1);
 +
 +	(*graph)++;
 +}
 +#else
 +static inline void
 +print_ftrace_graph_addr(unsigned long addr, void *data,
 +			const struct stacktrace_ops *ops,
 +			struct thread_info *tinfo, int *graph)
 +{ }
 +#endif
 +
++=======
++>>>>>>> 408fe5de2f27 (x86/dumpstack/ftrace: Convert dump_trace() callbacks to use ftrace_graph_ret_addr())
  /*
   * x86-64 can have up to three kernel stacks:
   * process stack
@@@ -100,19 -66,33 +103,42 @@@ print_context_stack(struct thread_info 
  {
  	struct stack_frame *frame = (struct stack_frame *)bp;
  
++<<<<<<< HEAD
 +	while (valid_stack_ptr(tinfo, stack, sizeof(*stack), end)) {
 +		unsigned long addr;
++=======
+ 	/*
+ 	 * If we overflowed the stack into a guard page, jump back to the
+ 	 * bottom of the usable stack.
+ 	 */
+ 	if ((unsigned long)task_stack_page(task) - (unsigned long)stack <
+ 	    PAGE_SIZE)
+ 		stack = (unsigned long *)task_stack_page(task);
+ 
+ 	while (valid_stack_ptr(task, stack, sizeof(*stack), end)) {
+ 		unsigned long addr = *stack;
++>>>>>>> 408fe5de2f27 (x86/dumpstack/ftrace: Convert dump_trace() callbacks to use ftrace_graph_ret_addr())
  
- 		addr = *stack;
  		if (__kernel_text_address(addr)) {
+ 			unsigned long real_addr;
+ 			int reliable = 0;
+ 
  			if ((unsigned long) stack == bp + sizeof(long)) {
- 				ops->address(data, addr, 1);
+ 				reliable = 1;
  				frame = frame->next_frame;
  				bp = (unsigned long) frame;
- 			} else {
- 				ops->address(data, addr, 0);
  			}
++<<<<<<< HEAD
 +			print_ftrace_graph_addr(addr, data, ops, tinfo, graph);
++=======
+ 
+ 			ops->address(data, addr, reliable);
+ 
+ 			real_addr = ftrace_graph_ret_addr(task, graph, addr,
+ 							  stack);
+ 			if (real_addr != addr)
+ 				ops->address(data, real_addr, 1);
++>>>>>>> 408fe5de2f27 (x86/dumpstack/ftrace: Convert dump_trace() callbacks to use ftrace_graph_ret_addr())
  		}
  		stack++;
  	}
@@@ -127,19 -107,24 +153,34 @@@ print_context_stack_bp(struct thread_in
  		       unsigned long *end, int *graph)
  {
  	struct stack_frame *frame = (struct stack_frame *)bp;
- 	unsigned long *ret_addr = &frame->return_address;
+ 	unsigned long *retp = &frame->return_address;
  
++<<<<<<< HEAD
 +	while (valid_stack_ptr(tinfo, ret_addr, sizeof(*ret_addr), end)) {
 +		unsigned long addr = *ret_addr;
++=======
+ 	while (valid_stack_ptr(task, retp, sizeof(*retp), end)) {
+ 		unsigned long addr = *retp;
+ 		unsigned long real_addr;
++>>>>>>> 408fe5de2f27 (x86/dumpstack/ftrace: Convert dump_trace() callbacks to use ftrace_graph_ret_addr())
  
  		if (!__kernel_text_address(addr))
  			break;
  
  		if (ops->address(data, addr, 1))
  			break;
+ 
+ 		real_addr = ftrace_graph_ret_addr(task, graph, addr, retp);
+ 		if (real_addr != addr)
+ 			ops->address(data, real_addr, 1);
+ 
  		frame = frame->next_frame;
++<<<<<<< HEAD
 +		ret_addr = &frame->return_address;
 +		print_ftrace_graph_addr(addr, data, ops, tinfo, graph);
++=======
+ 		retp = &frame->return_address;
++>>>>>>> 408fe5de2f27 (x86/dumpstack/ftrace: Convert dump_trace() callbacks to use ftrace_graph_ret_addr())
  	}
  
  	return (unsigned long)frame;
* Unmerged path arch/x86/kernel/dumpstack.c
