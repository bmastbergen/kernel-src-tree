mlxsw: spectrum_router: Destroy RIF only based on its struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ido Schimmel <idosch@mellanox.com>
commit 1b8f09a05f33dbced2e48cd1c6d3ee524739ff63
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1b8f09a0.failed

Now that all the information to create a RIF is contained within the RIF
struct itself, we can also simplify the destruction logic.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1b8f09a05f33dbced2e48cd1c6d3ee524739ff63)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index f8e7036e3f4a,41c85dcfa99f..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -2826,74 -3090,112 +2826,131 @@@ err_vport_rif_sp_op
  	return ERR_PTR(err);
  }
  
++<<<<<<< HEAD
 +static void mlxsw_sp_vport_rif_sp_destroy(struct mlxsw_sp_port *mlxsw_sp_vport,
 +					  struct mlxsw_sp_rif *r)
 +{
 +	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_vport->mlxsw_sp;
 +	struct mlxsw_sp_vr *vr = &mlxsw_sp->router.vrs[r->vr_id];
 +	struct net_device *l3_dev = r->dev;
 +	struct mlxsw_sp_fid *f = r->f;
++=======
+ static void
+ mlxsw_sp_port_vlan_rif_sp_destroy(struct mlxsw_sp *mlxsw_sp,
+ 				  struct mlxsw_sp_rif *rif)
+ {
+ 	struct mlxsw_sp_vr *vr = &mlxsw_sp->router->vrs[rif->vr_id];
+ 	struct net_device *l3_dev = rif->dev;
+ 	struct mlxsw_sp_fid *f = rif->f;
+ 	u16 rif_index = rif->rif_index;
++>>>>>>> 1b8f09a05f33 (mlxsw: spectrum_router: Destroy RIF only based on its struct)
  	u16 fid = f->fid;
 +	u16 rif = r->rif;
  
 -	mlxsw_sp_router_rif_gone_sync(mlxsw_sp, rif);
 -
 -	mlxsw_sp_rif_counter_free(mlxsw_sp, rif, MLXSW_SP_RIF_COUNTER_EGRESS);
 -	mlxsw_sp_rif_counter_free(mlxsw_sp, rif, MLXSW_SP_RIF_COUNTER_INGRESS);
 +	mlxsw_sp_router_rif_gone_sync(mlxsw_sp, r);
  
  	vr->rif_count--;
 -	mlxsw_sp->router->rifs[rif_index] = NULL;
 -	f->rif = NULL;
 +	mlxsw_sp->rifs[rif] = NULL;
 +	f->r = NULL;
 +
 +	kfree(r);
 +
 +	kfree(f);
  
  	mlxsw_sp_rif_fdb_op(mlxsw_sp, l3_dev->dev_addr, fid, false);
  
 -	mlxsw_sp_port_vlan_rif_sp_op(mlxsw_sp, rif, false);
 -	kfree(rif);
 +	mlxsw_sp_vport_rif_sp_op(mlxsw_sp_vport, vr->id, l3_dev, rif, false);
 +
  	mlxsw_sp_vr_put(vr);
 -	kfree(f);
  }
  
 -static int
 -mlxsw_sp_port_vlan_rif_sp_join(struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan,
 -			       struct net_device *l3_dev)
 +static int mlxsw_sp_vport_rif_sp_join(struct mlxsw_sp_port *mlxsw_sp_vport,
 +				      struct net_device *l3_dev)
  {
++<<<<<<< HEAD
 +	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_vport->mlxsw_sp;
 +	struct mlxsw_sp_rif *r;
 +
 +	r = mlxsw_sp_rif_find_by_dev(mlxsw_sp, l3_dev);
 +	if (!r) {
 +		r = mlxsw_sp_vport_rif_sp_create(mlxsw_sp_vport, l3_dev);
 +		if (IS_ERR(r))
 +			return PTR_ERR(r);
++=======
+ 	struct mlxsw_sp_port *mlxsw_sp_port = mlxsw_sp_port_vlan->mlxsw_sp_port;
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_port->mlxsw_sp;
+ 	u16 vid = mlxsw_sp_port_vlan->vid;
+ 	struct mlxsw_sp_rif *rif;
+ 	int err;
+ 
+ 	rif = mlxsw_sp_rif_find_by_dev(mlxsw_sp, l3_dev);
+ 	if (!rif) {
+ 		rif = mlxsw_sp_port_vlan_rif_sp_create(mlxsw_sp_port_vlan,
+ 						       l3_dev);
+ 		if (IS_ERR(rif))
+ 			return PTR_ERR(rif);
++>>>>>>> 1b8f09a05f33 (mlxsw: spectrum_router: Destroy RIF only based on its struct)
  	}
  
 -	err = mlxsw_sp_port_vid_learning_set(mlxsw_sp_port, vid, false);
 -	if (err)
 -		goto err_port_vid_learning_set;
 -
 -	err = mlxsw_sp_port_vid_stp_set(mlxsw_sp_port, vid,
 -					BR_STATE_FORWARDING);
 -	if (err)
 -		goto err_port_vid_stp_set;
 -
 -	if (mlxsw_sp_port->nr_port_vid_map++ == 0) {
 -		err = mlxsw_sp_port_vp_mode_trans(mlxsw_sp_port);
 -		if (err)
 -			goto err_port_vp_mode_trans;
 -	}
 +	mlxsw_sp_vport_fid_set(mlxsw_sp_vport, r->f);
 +	r->f->ref_count++;
  
 -	mlxsw_sp_port_vlan->fid = rif->f;
 -	rif->f->ref_count++;
 +	netdev_dbg(mlxsw_sp_vport->dev, "Joined FID=%d\n", r->f->fid);
  
  	return 0;
++<<<<<<< HEAD
++=======
+ 
+ err_port_vp_mode_trans:
+ 	mlxsw_sp_port->nr_port_vid_map--;
+ 	mlxsw_sp_port_vid_stp_set(mlxsw_sp_port, vid, BR_STATE_BLOCKING);
+ err_port_vid_stp_set:
+ 	mlxsw_sp_port_vid_learning_set(mlxsw_sp_port, vid, true);
+ err_port_vid_learning_set:
+ 	if (rif->f->ref_count == 0)
+ 		mlxsw_sp_port_vlan_rif_sp_destroy(mlxsw_sp, rif);
+ 	return err;
++>>>>>>> 1b8f09a05f33 (mlxsw: spectrum_router: Destroy RIF only based on its struct)
  }
  
 -static void
 -mlxsw_sp_port_vlan_rif_sp_leave(struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan)
 +static void mlxsw_sp_vport_rif_sp_leave(struct mlxsw_sp_port *mlxsw_sp_vport)
  {
++<<<<<<< HEAD
 +	struct mlxsw_sp_fid *f = mlxsw_sp_vport_fid_get(mlxsw_sp_vport);
++=======
+ 	struct mlxsw_sp_port *mlxsw_sp_port = mlxsw_sp_port_vlan->mlxsw_sp_port;
+ 	struct mlxsw_sp *mlxsw_sp = mlxsw_sp_port->mlxsw_sp;
+ 	struct mlxsw_sp_fid *fid = mlxsw_sp_port_vlan->fid;
+ 	u16 vid = mlxsw_sp_port_vlan->vid;
++>>>>>>> 1b8f09a05f33 (mlxsw: spectrum_router: Destroy RIF only based on its struct)
  
 -	fid->ref_count--;
 -	mlxsw_sp_port_vlan->fid = NULL;
 +	netdev_dbg(mlxsw_sp_vport->dev, "Left FID=%d\n", f->fid);
  
++<<<<<<< HEAD
 +	mlxsw_sp_vport_fid_set(mlxsw_sp_vport, NULL);
 +	if (--f->ref_count == 0)
 +		mlxsw_sp_vport_rif_sp_destroy(mlxsw_sp_vport, f->r);
++=======
+ 	if (mlxsw_sp_port->nr_port_vid_map == 1)
+ 		mlxsw_sp_port_vlan_mode_trans(mlxsw_sp_port);
+ 	mlxsw_sp_port->nr_port_vid_map--;
+ 	mlxsw_sp_port_vid_stp_set(mlxsw_sp_port, vid, BR_STATE_BLOCKING);
+ 	mlxsw_sp_port_vid_learning_set(mlxsw_sp_port, vid, true);
+ 
+ 	if (fid->ref_count == 0)
+ 		mlxsw_sp_port_vlan_rif_sp_destroy(mlxsw_sp, fid->rif);
++>>>>>>> 1b8f09a05f33 (mlxsw: spectrum_router: Destroy RIF only based on its struct)
  }
  
 -static int mlxsw_sp_inetaddr_port_vlan_event(struct net_device *l3_dev,
 -					     struct net_device *port_dev,
 -					     unsigned long event, u16 vid)
 +static int mlxsw_sp_inetaddr_vport_event(struct net_device *l3_dev,
 +					 struct net_device *port_dev,
 +					 unsigned long event, u16 vid)
  {
  	struct mlxsw_sp_port *mlxsw_sp_port = netdev_priv(port_dev);
 -	struct mlxsw_sp_port_vlan *mlxsw_sp_port_vlan;
 +	struct mlxsw_sp_port *mlxsw_sp_vport;
  
 -	mlxsw_sp_port_vlan = mlxsw_sp_port_vlan_find_by_vid(mlxsw_sp_port, vid);
 -	if (WARN_ON(!mlxsw_sp_port_vlan))
 +	mlxsw_sp_vport = mlxsw_sp_port_vport_find(mlxsw_sp_port, vid);
 +	if (WARN_ON(!mlxsw_sp_vport))
  		return -EINVAL;
  
  	switch (event) {
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
