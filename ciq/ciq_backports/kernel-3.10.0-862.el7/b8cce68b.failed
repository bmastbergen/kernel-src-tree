net/mlx5: Loop over temp list to release delay events

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Loop over temp list to release delay events (Kamal Heib) [1456694]
Rebuild_FUZZ: 96.08%
commit-author Huy Nguyen <huyn@mellanox.com>
commit b8cce68bf1f1b773ac1a535707f968512b3c1e5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b8cce68b.failed

list_splice_init initializing waiting_events_list after splicing it to
temp list, therefore we should loop over temp list to fire the events.

Fixes: 4ca637a20a52 ("net/mlx5: Delay events till mlx5 interface's add complete for pci resume")
	Signed-off-by: Huy Nguyen <huyn@mellanox.com>
	Signed-off-by: Feras Daoud <ferasda@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit b8cce68bf1f1b773ac1a535707f968512b3c1e5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/dev.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/dev.c
index a9dbc28f6b97,17b723218b0c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/dev.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/dev.c
@@@ -50,6 -57,64 +50,67 @@@ enum 
  	MLX5_INTERFACE_ATTACHED,
  };
  
++<<<<<<< HEAD
++=======
+ static void add_delayed_event(struct mlx5_priv *priv,
+ 			      struct mlx5_core_dev *dev,
+ 			      enum mlx5_dev_event event,
+ 			      unsigned long param)
+ {
+ 	struct mlx5_delayed_event *delayed_event;
+ 
+ 	delayed_event = kzalloc(sizeof(*delayed_event), GFP_ATOMIC);
+ 	if (!delayed_event) {
+ 		mlx5_core_err(dev, "event %d is missed\n", event);
+ 		return;
+ 	}
+ 
+ 	mlx5_core_dbg(dev, "Accumulating event %d\n", event);
+ 	delayed_event->dev = dev;
+ 	delayed_event->event = event;
+ 	delayed_event->param = param;
+ 	list_add_tail(&delayed_event->list, &priv->waiting_events_list);
+ }
+ 
+ static void delayed_event_release(struct mlx5_device_context *dev_ctx,
+ 				  struct mlx5_priv *priv)
+ {
+ 	struct mlx5_core_dev *dev = container_of(priv, struct mlx5_core_dev, priv);
+ 	struct mlx5_delayed_event *de;
+ 	struct mlx5_delayed_event *n;
+ 	struct list_head temp;
+ 
+ 	INIT_LIST_HEAD(&temp);
+ 
+ 	spin_lock_irq(&priv->ctx_lock);
+ 
+ 	priv->is_accum_events = false;
+ 	list_splice_init(&priv->waiting_events_list, &temp);
+ 	if (!dev_ctx->context)
+ 		goto out;
+ 	list_for_each_entry_safe(de, n, &temp, list)
+ 		dev_ctx->intf->event(dev, dev_ctx->context, de->event, de->param);
+ 
+ out:
+ 	spin_unlock_irq(&priv->ctx_lock);
+ 
+ 	list_for_each_entry_safe(de, n, &temp, list) {
+ 		list_del(&de->list);
+ 		kfree(de);
+ 	}
+ }
+ 
+ /* accumulating events that can come after mlx5_ib calls to
+  * ib_register_device, till adding that interface to the events list.
+  */
+ static void delayed_event_start(struct mlx5_priv *priv)
+ {
+ 	spin_lock_irq(&priv->ctx_lock);
+ 	priv->is_accum_events = true;
+ 	spin_unlock_irq(&priv->ctx_lock);
+ }
+ 
++>>>>>>> b8cce68bf1f1 (net/mlx5: Loop over temp list to release delay events)
  void mlx5_add_device(struct mlx5_interface *intf, struct mlx5_priv *priv)
  {
  	struct mlx5_device_context *dev_ctx;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/dev.c
