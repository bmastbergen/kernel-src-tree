net/mlx5e: Build SKB with exact frag_size

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Build SKB with exact frag_size (Kamal Heib) [1460489 1456694]
Rebuild_FUZZ: 94.87%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit 78aedd327982ddd3cbb6ffc58f6fe0179cb6238b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/78aedd32.failed

Build the SKB over the receive packet instead of the
whole page. Getting the SKB's linear data and shared_info
closer improves locality.
In addition, this opens up the possibility to make use of
other parts of the page in the downstream page-reuse patch.

Fixes: 1bfecfca565c ("net/mlx5e: Build RX SKB on demand")
	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 78aedd327982ddd3cbb6ffc58f6fe0179cb6238b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 950c1d21ad52,c991c1e9ea1f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -613,11 -639,7 +613,15 @@@ static int mlx5e_create_rq(struct mlx5e
  		byte_count = rq->buff.wqe_sz;
  
  		/* calc the required page order */
++<<<<<<< HEAD
 +		frag_sz = MLX5_RX_HEADROOM +
 +			  byte_count /* packet data */ +
 +			  SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 +		frag_sz = SKB_DATA_ALIGN(frag_sz);
 +
++=======
+ 		frag_sz = MLX5_SKB_FRAG_SZ(rq->rx_headroom + byte_count);
++>>>>>>> 78aedd327982 (net/mlx5e: Build SKB with exact frag_size)
  		npages = DIV_ROUND_UP(frag_sz, PAGE_SIZE);
  		rq->buff.page_order = order_base_2(npages);
  
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index 8b4b5a3808c1,2eef4e701ab3..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@@ -643,7 -737,10 +643,14 @@@ struct sk_buff *skb_from_cqe(struct mlx
  {
  	struct mlx5e_dma_info *di;
  	struct sk_buff *skb;
++<<<<<<< HEAD
 +	void *va;
++=======
+ 	void *va, *data;
+ 	u16 rx_headroom = rq->rx_headroom;
+ 	bool consumed;
+ 	u32 frag_size;
++>>>>>>> 78aedd327982 (net/mlx5e: Build SKB with exact frag_size)
  
  	di             = &rq->dma_info[wqe_counter];
  	va             = page_address(di->page);
@@@ -661,7 -759,14 +668,18 @@@
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	skb = build_skb(va, RQ_PAGE_SIZE(rq));
++=======
+ 	rcu_read_lock();
+ 	consumed = mlx5e_xdp_handle(rq, di, va, &rx_headroom, &cqe_bcnt);
+ 	rcu_read_unlock();
+ 	if (consumed)
+ 		return NULL; /* page/packet was consumed by XDP */
+ 
+ 	frag_size = MLX5_SKB_FRAG_SZ(rx_headroom + cqe_bcnt);
+ 	skb = build_skb(va, frag_size);
++>>>>>>> 78aedd327982 (net/mlx5e: Build SKB with exact frag_size)
  	if (unlikely(!skb)) {
  		rq->stats.buff_alloc_err++;
  		mlx5e_page_release(rq, di, true);
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en.h b/drivers/net/ethernet/mellanox/mlx5/core/en.h
index 08e121a5e7e2..5a888b081bf6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@ -67,6 +67,8 @@
 #define MLX5E_PARAMS_MAXIMUM_LOG_RQ_SIZE_MPW            0x6
 
 #define MLX5_RX_HEADROOM NET_SKB_PAD
+#define MLX5_SKB_FRAG_SZ(len)	(SKB_DATA_ALIGN(len) +	\
+				 SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
 
 #define MLX5_MPWRQ_MIN_LOG_STRIDE_SZ(mdev) \
 	(6 + MLX5_CAP_GEN(mdev, cache_line_128byte)) /* HW restriction */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
