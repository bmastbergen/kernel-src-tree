livepatch: separate enabled and patched states

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 0dade9f374f1c15f9b43ab01ab75a3b459bba5f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0dade9f3.failed

Once we have a consistency model, patches and their objects will be
enabled and disabled at different times.  For example, when a patch is
disabled, its loaded objects' funcs can remain registered with ftrace
indefinitely until the unpatching operation is complete and they're no
longer in use.

It's less confusing if we give them different names: patches can be
enabled or disabled; objects (and their funcs) can be patched or
unpatched:

- Enabled means that a patch is logically enabled (but not necessarily
  fully applied).

- Patched means that an object's funcs are registered with ftrace and
  added to the klp_ops func stack.

Also, since these states are binary, represent them with booleans
instead of ints.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Acked-by: Miroslav Benes <mbenes@suse.cz>
	Reviewed-by: Petr Mladek <pmladek@suse.com>
	Reviewed-by: Kamalesh Babulal <kamalesh@linux.vnet.ibm.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit 0dade9f374f1c15f9b43ab01ab75a3b459bba5f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/livepatch.h
#	kernel/livepatch/core.c
* Unmerged path include/linux/livepatch.h
* Unmerged path kernel/livepatch/core.c
* Unmerged path include/linux/livepatch.h
* Unmerged path kernel/livepatch/core.c
