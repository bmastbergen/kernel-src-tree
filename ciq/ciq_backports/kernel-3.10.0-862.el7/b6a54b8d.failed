target: remove initiatorname field in se_acl_lun

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] remove initiatorname field in se_acl_lun (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 90.91%
commit-author Chris Zankel <czankel@purestorage.com>
commit b6a54b8d895648d915c7e8308f3d3e6bf2505d69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b6a54b8d.failed

From: Chris Zankel <czankel@purestorage.com>

The initiatorname field in se_acl_lun is only a copy of the same field
in se_node_acl, so remove it and use the version in se_node_acl where
needed (it's actually only used for pr_debug)

	Signed-off-by: Chris Zankel <czankel@purestorage.com>
	Signed-off-by: Spencer Baugh <spencer.baugh@purestorage.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit b6a54b8d895648d915c7e8308f3d3e6bf2505d69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/target/target_core_base.h
diff --cc include/target/target_core_base.h
index 21232da59677,95e65bd31e05..000000000000
--- a/include/target/target_core_base.h
+++ b/include/target/target_core_base.h
@@@ -637,11 -593,9 +637,15 @@@ struct se_ml_stat_grps 
  };
  
  struct se_lun_acl {
++<<<<<<< HEAD
 +	char			initiatorname[TRANSPORT_IQN_LEN];
 +	u32			mapped_lun;
++=======
+ 	u64			mapped_lun;
++>>>>>>> b6a54b8d8956 (target: remove initiatorname field in se_acl_lun)
  	struct se_node_acl	*se_lun_nacl;
  	struct se_lun		*se_lun;
 +	struct list_head	lacl_list;
  	struct config_group	se_lun_group;
  	struct se_ml_stat_grps	ml_stat_grps;
  };
diff --git a/drivers/target/target_core_device.c b/drivers/target/target_core_device.c
index 53dcefb982bc..8a95ddbdb3ca 100644
--- a/drivers/target/target_core_device.c
+++ b/drivers/target/target_core_device.c
@@ -1328,8 +1328,6 @@ struct se_lun_acl *core_dev_init_initiator_node_lun_acl(
 	INIT_LIST_HEAD(&lacl->lacl_list);
 	lacl->mapped_lun = mapped_lun;
 	lacl->se_lun_nacl = nacl;
-	snprintf(lacl->initiatorname, TRANSPORT_IQN_LEN, "%s",
-		 nacl->initiatorname);
 
 	return lacl;
 }
@@ -1375,7 +1373,7 @@ int core_dev_add_initiator_node_lun_acl(
 		" InitiatorNode: %s\n", tpg->se_tpg_tfo->get_fabric_name(),
 		tpg->se_tpg_tfo->tpg_get_tag(tpg), unpacked_lun, lacl->mapped_lun,
 		(lun_access & TRANSPORT_LUNFLAGS_READ_WRITE) ? "RW" : "RO",
-		lacl->initiatorname);
+		nacl->initiatorname);
 	/*
 	 * Check to see if there are any existing persistent reservation APTPL
 	 * pre-registrations that need to be enabled for this LUN ACL..
@@ -1414,7 +1412,7 @@ int core_dev_del_initiator_node_lun_acl(
 		" InitiatorNode: %s Mapped LUN: %u\n",
 		tpg->se_tpg_tfo->get_fabric_name(),
 		tpg->se_tpg_tfo->tpg_get_tag(tpg), lun->unpacked_lun,
-		lacl->initiatorname, lacl->mapped_lun);
+		nacl->initiatorname, lacl->mapped_lun);
 
 	return 0;
 }
@@ -1427,7 +1425,7 @@ void core_dev_free_initiator_node_lun_acl(
 		" Mapped LUN: %u\n", tpg->se_tpg_tfo->get_fabric_name(),
 		tpg->se_tpg_tfo->tpg_get_tag(tpg),
 		tpg->se_tpg_tfo->get_fabric_name(),
-		lacl->initiatorname, lacl->mapped_lun);
+		lacl->se_lun_nacl->initiatorname, lacl->mapped_lun);
 
 	kfree(lacl);
 }
diff --git a/drivers/target/target_core_fabric_configfs.c b/drivers/target/target_core_fabric_configfs.c
index 0c3f90130b7d..84f365226191 100644
--- a/drivers/target/target_core_fabric_configfs.c
+++ b/drivers/target/target_core_fabric_configfs.c
@@ -206,7 +206,7 @@ static ssize_t target_fabric_mappedlun_store_write_protect(
 	pr_debug("%s_ConfigFS: Changed Initiator ACL: %s"
 		" Mapped LUN: %u Write Protect bit to %s\n",
 		se_tpg->se_tpg_tfo->get_fabric_name(),
-		lacl->initiatorname, lacl->mapped_lun, (op) ? "ON" : "OFF");
+		se_nacl->initiatorname, lacl->mapped_lun, (op) ? "ON" : "OFF");
 
 	return count;
 
* Unmerged path include/target/target_core_base.h
