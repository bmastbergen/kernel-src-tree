scsi: lpfc: remove redundant null check on eqe

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] lpfc: remove redundant null check on eqe (Dick Kennedy) [1385844 1461977 1387768]
Rebuild_FUZZ: 93.02%
commit-author Colin Ian King <colin.king@canonical.com>
commit 858e51e8cbe11a8c59b24aaf4cb40f7f4e7a2feb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/858e51e8.failed

The pointer eqe is always non-null inside the while loop, so the check
to see if eqe is NULL is redudant and hence can be removed.

Detected by CoverityScan CID#1248693 ("Logically Dead Code")

	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Acked-by: James Smart <james.smart@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 858e51e8cbe11a8c59b24aaf4cb40f7f4e7a2feb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_sli.c
diff --cc drivers/scsi/lpfc/lpfc_sli.c
index afe166ddbf5a,80036a9fae7f..000000000000
--- a/drivers/scsi/lpfc/lpfc_sli.c
+++ b/drivers/scsi/lpfc/lpfc_sli.c
@@@ -12846,12 -13760,10 +12846,19 @@@ lpfc_sli4_hba_intr_handler(int irq, voi
  	 * Process all the event on FCP fast-path EQ
  	 */
  	while ((eqe = lpfc_sli4_eq_get(fpeq))) {
++<<<<<<< HEAD
 +		if (eqe == NULL)
 +			break;
 +
 +		lpfc_sli4_hba_handle_eqe(phba, eqe, fcp_eqidx);
 +		if (!(++ecount % fpeq->entry_repost))
 +			lpfc_sli4_eq_release(fpeq, LPFC_QUEUE_NOARM);
++=======
+ 		ccount += lpfc_sli4_hba_handle_eqe(phba, eqe, hba_eqidx);
+ 		if (!(++ecount % fpeq->entry_repost) ||
+ 		    ccount > LPFC_MAX_ISR_CQE)
+ 			break;
++>>>>>>> 858e51e8cbe1 (scsi: lpfc: remove redundant null check on eqe)
  		fpeq->EQ_processed++;
  	}
  
* Unmerged path drivers/scsi/lpfc/lpfc_sli.c
