nfp: default to chained metadata prepend format

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 64a919a9440fe080b0ad1814ce86366010d4a9ef
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/64a919a9.failed

ABI 4.x introduced the chained metadata format and made it the
only one possible.  There are cases, however, where the old
format is preferred - mostly to make interoperation with VFs
using ABI 3.x easier for the datapath.  In ABI 5.x we allowed
for more flexibility by selecting the metadata format based
on capabilities.  The default was left to non-chained.

In case of fallback traffic, there is no capability telling the
driver there may be chained metadata.  With a very stripped-
-down FW the default old metadata format would be selected
making the driver drop all fallback traffic.

This patch changes the default selection in the driver. It
should not hurt with old firmwares, because if they don't
advertise RSS they will not produce metadata anyway.  New
firmwares advertising ABI 5.x, however, can depend on the
driver defaulting to chained format.

Fixes: f9380629fafc ("nfp: advertise support for NFD ABI 0.5")
	Suggested-by: Michael Rapson <michael.rapson@netronome.com>
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 64a919a9440fe080b0ad1814ce86366010d4a9ef)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 5094c56dbda7,18750ff0ede6..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -2820,9 -3681,84 +2820,85 @@@ int nfp_net_netdev_init(struct net_devi
  
  	netdev->features = netdev->hw_features;
  
 -	if (nfp_app_has_tc(nn->app))
 -		netdev->hw_features |= NETIF_F_HW_TC;
 -
  	/* Advertise but disable TSO by default. */
  	netdev->features &= ~(NETIF_F_TSO | NETIF_F_TSO6);
++<<<<<<< HEAD
 +	nn->dp.ctrl &= ~NFP_NET_CFG_CTRL_LSO;
++=======
+ 	nn->dp.ctrl &= ~NFP_NET_CFG_CTRL_LSO_ANY;
+ 
+ 	/* Finalise the netdev setup */
+ 	netdev->netdev_ops = &nfp_net_netdev_ops;
+ 	netdev->watchdog_timeo = msecs_to_jiffies(5 * 1000);
+ 
+ 	SWITCHDEV_SET_OPS(netdev, &nfp_port_switchdev_ops);
+ 
+ 	/* MTU range: 68 - hw-specific max */
+ 	netdev->min_mtu = ETH_MIN_MTU;
+ 	netdev->max_mtu = nn->max_mtu;
+ 
+ 	netif_carrier_off(netdev);
+ 
+ 	nfp_net_set_ethtool_ops(netdev);
+ }
+ 
+ /**
+  * nfp_net_init() - Initialise/finalise the nfp_net structure
+  * @nn:		NFP Net device structure
+  *
+  * Return: 0 on success or negative errno on error.
+  */
+ int nfp_net_init(struct nfp_net *nn)
+ {
+ 	int err;
+ 
+ 	nn->dp.rx_dma_dir = DMA_FROM_DEVICE;
+ 
+ 	/* Get some of the read-only fields from the BAR */
+ 	nn->cap = nn_readl(nn, NFP_NET_CFG_CAP);
+ 	nn->max_mtu = nn_readl(nn, NFP_NET_CFG_MAX_MTU);
+ 
+ 	/* ABI 4.x and ctrl vNIC always use chained metadata, in other cases
+ 	 * we allow use of non-chained metadata if RSS(v1) is the only
+ 	 * advertised capability requiring metadata.
+ 	 */
+ 	nn->dp.chained_metadata_format = nn->fw_ver.major == 4 ||
+ 					 !nn->dp.netdev ||
+ 					 !(nn->cap & NFP_NET_CFG_CTRL_RSS) ||
+ 					 nn->cap & NFP_NET_CFG_CTRL_CHAIN_META;
+ 	/* RSS(v1) uses non-chained metadata format, except in ABI 4.x where
+ 	 * it has the same meaning as RSSv2.
+ 	 */
+ 	if (nn->dp.chained_metadata_format && nn->fw_ver.major != 4)
+ 		nn->cap &= ~NFP_NET_CFG_CTRL_RSS;
+ 
+ 	/* Determine RX packet/metadata boundary offset */
+ 	if (nn->fw_ver.major >= 2) {
+ 		u32 reg;
+ 
+ 		reg = nn_readl(nn, NFP_NET_CFG_RX_OFFSET);
+ 		if (reg > NFP_NET_MAX_PREPEND) {
+ 			nn_err(nn, "Invalid rx offset: %d\n", reg);
+ 			return -EINVAL;
+ 		}
+ 		nn->dp.rx_offset = reg;
+ 	} else {
+ 		nn->dp.rx_offset = NFP_NET_RX_OFFSET;
+ 	}
+ 
+ 	/* Set default MTU and Freelist buffer size */
+ 	if (nn->max_mtu < NFP_NET_DEFAULT_MTU)
+ 		nn->dp.mtu = nn->max_mtu;
+ 	else
+ 		nn->dp.mtu = NFP_NET_DEFAULT_MTU;
+ 	nn->dp.fl_bufsz = nfp_net_calc_fl_bufsz(&nn->dp);
+ 
+ 	if (nn->cap & NFP_NET_CFG_CTRL_RSS_ANY) {
+ 		nfp_net_rss_init(nn);
+ 		nn->dp.ctrl |= nn->cap & NFP_NET_CFG_CTRL_RSS2 ?:
+ 					 NFP_NET_CFG_CTRL_RSS;
+ 	}
++>>>>>>> 64a919a9440f (nfp: default to chained metadata prepend format)
  
  	/* Allow L2 Broadcast and Multicast through by default, if supported */
  	if (nn->cap & NFP_NET_CFG_CTRL_L2BC)
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
