iommu/amd: Move and introduce new IRTE-related unions and structures

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Move and introduce new IRTE-related unions and structures (Jerry Snitselaar) [1411581]
Rebuild_FUZZ: 95.38%
commit-author Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
commit a38180bd366f9912a08f52dd6f9a843bf0107d5f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a38180bd.failed

Move existing unions and structs for accessing/managing IRTE to a proper
header file. This is mainly to simplify variable declarations in subsequent
patches.

Besides, this patch also introduces new struct irte_ga for the new
128-bit IRTE format.

	Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit a38180bd366f9912a08f52dd6f9a843bf0107d5f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
#	drivers/iommu/amd_iommu_types.h
diff --cc drivers/iommu/amd_iommu.c
index 6801c4ab15f6,c262a82971e4..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -3538,20 -3511,7 +3538,24 @@@ EXPORT_SYMBOL(amd_iommu_device_info)
   *
   *****************************************************************************/
  
++<<<<<<< HEAD
 +union irte {
 +	u32 val;
 +	struct {
 +		u32 valid	: 1,
 +		    no_fault	: 1,
 +		    int_type	: 3,
 +		    rq_eoi	: 1,
 +		    dm		: 1,
 +		    rsvd_1	: 1,
 +		    destination	: 8,
 +		    vector	: 8,
 +		    rsvd_2	: 8;
 +	} fields;
 +};
++=======
+ static struct irq_chip amd_ir_chip;
++>>>>>>> a38180bd366f (iommu/amd: Move and introduce new IRTE-related unions and structures)
  
  #define DTE_IRQ_PHYS_ADDR_MASK	(((1ULL << 45)-1) << 6)
  #define DTE_IRQ_REMAP_INTCTL    (2ULL << 60)
diff --cc drivers/iommu/amd_iommu_types.h
index c9e00df52a4f,8b61289cd5b7..000000000000
--- a/drivers/iommu/amd_iommu_types.h
+++ b/drivers/iommu/amd_iommu_types.h
@@@ -668,4 -691,94 +669,97 @@@ static inline int get_hpet_devid(int id
  	return -EINVAL;
  }
  
++<<<<<<< HEAD
++=======
+ enum amd_iommu_intr_mode_type {
+ 	AMD_IOMMU_GUEST_IR_LEGACY,
+ 
+ 	/* This mode is not visible to users. It is used when
+ 	 * we cannot fully enable vAPIC and fallback to only support
+ 	 * legacy interrupt remapping via 128-bit IRTE.
+ 	 */
+ 	AMD_IOMMU_GUEST_IR_LEGACY_GA,
+ 	AMD_IOMMU_GUEST_IR_VAPIC,
+ };
+ 
+ #define AMD_IOMMU_GUEST_IR_GA(x)	(x == AMD_IOMMU_GUEST_IR_VAPIC || \
+ 					 x == AMD_IOMMU_GUEST_IR_LEGACY_GA)
+ 
+ #define AMD_IOMMU_GUEST_IR_VAPIC(x)	(x == AMD_IOMMU_GUEST_IR_VAPIC)
+ 
+ union irte {
+ 	u32 val;
+ 	struct {
+ 		u32 valid	: 1,
+ 		    no_fault	: 1,
+ 		    int_type	: 3,
+ 		    rq_eoi	: 1,
+ 		    dm		: 1,
+ 		    rsvd_1	: 1,
+ 		    destination	: 8,
+ 		    vector	: 8,
+ 		    rsvd_2	: 8;
+ 	} fields;
+ };
+ 
+ union irte_ga_lo {
+ 	u64 val;
+ 
+ 	/* For int remapping */
+ 	struct {
+ 		u64 valid	: 1,
+ 		    no_fault	: 1,
+ 		    /* ------ */
+ 		    int_type	: 3,
+ 		    rq_eoi	: 1,
+ 		    dm		: 1,
+ 		    /* ------ */
+ 		    guest_mode	: 1,
+ 		    destination	: 8,
+ 		    rsvd	: 48;
+ 	} fields_remap;
+ 
+ 	/* For guest vAPIC */
+ 	struct {
+ 		u64 valid	: 1,
+ 		    no_fault	: 1,
+ 		    /* ------ */
+ 		    ga_log_intr	: 1,
+ 		    rsvd1	: 3,
+ 		    is_run	: 1,
+ 		    /* ------ */
+ 		    guest_mode	: 1,
+ 		    destination	: 8,
+ 		    rsvd2	: 16,
+ 		    ga_tag	: 32;
+ 	} fields_vapic;
+ };
+ 
+ union irte_ga_hi {
+ 	u64 val;
+ 	struct {
+ 		u64 vector	: 8,
+ 		    rsvd_1	: 4,
+ 		    ga_root_ptr	: 40,
+ 		    rsvd_2	: 12;
+ 	} fields;
+ };
+ 
+ struct irte_ga {
+ 	union irte_ga_lo lo;
+ 	union irte_ga_hi hi;
+ };
+ 
+ struct irq_2_irte {
+ 	u16 devid; /* Device ID for IRTE table */
+ 	u16 index; /* Index into IRTE table*/
+ };
+ 
+ struct amd_ir_data {
+ 	struct irq_2_irte irq_2_irte;
+ 	union irte irte_entry;
+ 	struct msi_msg msi_entry;
+ };
+ 
++>>>>>>> a38180bd366f (iommu/amd: Move and introduce new IRTE-related unions and structures)
  #endif /* _ASM_X86_AMD_IOMMU_TYPES_H */
* Unmerged path drivers/iommu/amd_iommu.c
* Unmerged path drivers/iommu/amd_iommu_types.h
