PCI: Consolidate PCI DMA constants and interfaces in linux/pci-dma-compat.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [pci] Consolidate PCI DMA constants and interfaces in linux/pci-dma-compat.h (Myron Stowe) [1466891]
Rebuild_FUZZ: 96.55%
commit-author Bjorn Helgaas <bhelgaas@google.com>
commit fe537670eab767157eecc50538bd28e8d9b0ce9f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/fe537670.failed

Christoph added a generic include/linux/pci-dma-compat.h, so now there's
one place with most of the PCI DMA interfaces.  Move more PCI DMA-related
things there:

  - The PCI_DMA_* direction constants from linux/pci.h
  - The pci_set_dma_max_seg_size() and pci_set_dma_seg_boundary()
    CONFIG_PCI implementations from drivers/pci/pci.c
  - The pci_set_dma_max_seg_size() and pci_set_dma_seg_boundary()
    !CONFIG_PCI stubs from linux/pci.h
  - The pci_set_dma_mask() and pci_set_consistent_dma_mask()
    !CONFIG_PCI stubs from linux/pci.h

	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit fe537670eab767157eecc50538bd28e8d9b0ce9f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/asm-generic/pci-dma-compat.h
diff --cc include/asm-generic/pci-dma-compat.h
index c110843fc53b,39726caef5b1..000000000000
--- a/include/asm-generic/pci-dma-compat.h
+++ b/include/asm-generic/pci-dma-compat.h
@@@ -6,11 -6,11 +6,19 @@@
  
  #include <linux/dma-mapping.h>
  
++<<<<<<< HEAD:include/asm-generic/pci-dma-compat.h
 +static inline int
 +pci_dma_supported(struct pci_dev *hwdev, u64 mask)
 +{
 +	return dma_supported(hwdev == NULL ? NULL : &hwdev->dev, mask);
 +}
++=======
+ /* This defines the direction arg to the DMA mapping routines. */
+ #define PCI_DMA_BIDIRECTIONAL	0
+ #define PCI_DMA_TODEVICE	1
+ #define PCI_DMA_FROMDEVICE	2
+ #define PCI_DMA_NONE		3
++>>>>>>> fe537670eab7 (PCI: Consolidate PCI DMA constants and interfaces in linux/pci-dma-compat.h):include/linux/pci-dma-compat.h
  
  static inline void *
  pci_alloc_consistent(struct pci_dev *hwdev, size_t size,
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 7d49a1ed79ed..d120ec8576ab 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -3480,18 +3480,6 @@ bool pci_check_and_unmask_intx(struct pci_dev *dev)
 }
 EXPORT_SYMBOL_GPL(pci_check_and_unmask_intx);
 
-int pci_set_dma_max_seg_size(struct pci_dev *dev, unsigned int size)
-{
-	return dma_set_max_seg_size(&dev->dev, size);
-}
-EXPORT_SYMBOL(pci_set_dma_max_seg_size);
-
-int pci_set_dma_seg_boundary(struct pci_dev *dev, unsigned long mask)
-{
-	return dma_set_seg_boundary(&dev->dev, mask);
-}
-EXPORT_SYMBOL(pci_set_dma_seg_boundary);
-
 /**
  * pci_wait_for_pending_transaction - waits for pending transaction
  * @dev: the PCI device to operate on
* Unmerged path include/asm-generic/pci-dma-compat.h
diff --git a/include/linux/pci.h b/include/linux/pci.h
index 20e2942c01d7..be26ba1f601c 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -76,12 +76,6 @@ enum pci_mmap_state {
 	pci_mmap_mem
 };
 
-/* This defines the direction arg to the DMA mapping routines. */
-#define PCI_DMA_BIDIRECTIONAL	0
-#define PCI_DMA_TODEVICE	1
-#define PCI_DMA_FROMDEVICE	2
-#define PCI_DMA_NONE		3
-
 /*
  *  For PCI devices, the region numbers are assigned this way:
  */
@@ -1046,8 +1040,6 @@ void pci_intx(struct pci_dev *dev, int enable);
 bool pci_intx_mask_supported(struct pci_dev *dev);
 bool pci_check_and_mask_intx(struct pci_dev *dev);
 bool pci_check_and_unmask_intx(struct pci_dev *dev);
-int pci_set_dma_max_seg_size(struct pci_dev *dev, unsigned int size);
-int pci_set_dma_seg_boundary(struct pci_dev *dev, unsigned long mask);
 int pci_wait_for_pending(struct pci_dev *dev, int pos, u16 mask);
 int pci_wait_for_pending_transaction(struct pci_dev *dev);
 int pcix_get_max_mmrbc(struct pci_dev *dev);
@@ -1255,6 +1247,7 @@ resource_size_t pcibios_iov_resource_alignment(struct pci_dev *dev, int resno);
 
 int pci_set_vga_state(struct pci_dev *pdev, bool decode,
 		      unsigned int command_bits, u32 flags);
+
 /* kmem_cache style wrapper around pci_alloc_consistent() */
 
 #include <linux/pci-dma.h>
@@ -1495,16 +1488,6 @@ static inline struct pci_dev *pci_get_class(unsigned int class,
 static inline void pci_set_master(struct pci_dev *dev) { }
 static inline int pci_enable_device(struct pci_dev *dev) { return -EIO; }
 static inline void pci_disable_device(struct pci_dev *dev) { }
-static inline int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
-{ return -EIO; }
-static inline int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
-{ return -EIO; }
-static inline int pci_set_dma_max_seg_size(struct pci_dev *dev,
-					unsigned int size)
-{ return -EIO; }
-static inline int pci_set_dma_seg_boundary(struct pci_dev *dev,
-					unsigned long mask)
-{ return -EIO; }
 static inline int pci_assign_resource(struct pci_dev *dev, int i)
 { return -EBUSY; }
 static inline int __pci_register_driver(struct pci_driver *drv,
