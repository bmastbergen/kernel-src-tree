nfp: allow retreiving management FW logs on representors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit a2f4c3d9bd4a8a85d7cdd8221f7995fdbc98aa4a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a2f4c3d9.failed

Users should be able to dump the management FW logs on any
of the driver's netdevs.  Make the code only depend on the
nfp_app and share it between vNICs and representors.

Storing the dump flag is simply dropped for now, since we
only support the argument being set to 0.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a2f4c3d9bd4a8a85d7cdd8221f7995fdbc98aa4a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net.h
index 600c79f39fe0,d51d8237b984..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@@ -470,26 -573,17 +470,34 @@@ static inline bool nfp_net_fw_ver_eq(st
   * @tx_bar:             Pointer to mapped TX queues
   * @rx_bar:             Pointer to mapped FL/RX queues
   * @debugfs_dir:	Device directory in debugfs
++<<<<<<< HEAD
 + * @ethtool_dump_flag:	Ethtool dump flag
 + * @port_list:		Entry on device port list
 + * @cpp:		CPP device handle if available
++=======
+  * @vnic_list:		Entry on device vNIC list
+  * @pdev:		Backpointer to PCI device
+  * @app:		APP handle if available
+  * @port:		Pointer to nfp_port structure if vNIC is a port
+  * @app_priv:		APP private data for this vNIC
++>>>>>>> a2f4c3d9bd4a (nfp: allow retreiving management FW logs on representors)
   */
  struct nfp_net {
 -	struct nfp_net_dp dp;
 +	struct pci_dev *pdev;
 +	struct net_device *netdev;
  
 -	struct nfp_net_fw_version fw_ver;
 +	unsigned is_vf:1;
 +	unsigned fw_loaded:1;
 +
 +	u32 ctrl;
 +	u32 fl_bufsz;
  
 +	u32 rx_offset;
 +
 +	struct nfp_net_tx_ring *tx_rings;
 +	struct nfp_net_rx_ring *rx_rings;
 +
 +	struct nfp_net_fw_version fw_ver;
  	u32 cap;
  	u32 max_mtu;
  
@@@ -550,18 -639,15 +558,17 @@@
  	u8 __iomem *rx_bar;
  
  	struct dentry *debugfs_dir;
- 	u32 ethtool_dump_flag;
  
 -	struct list_head vnic_list;
 -
 -	struct pci_dev *pdev;
 -	struct nfp_app *app;
 +	struct list_head port_list;
  
 -	struct nfp_port *port;
 +	struct nfp_cpp *cpp;
 +};
  
 -	void *app_priv;
 +struct nfp_net_ring_set {
 +	unsigned int n_rings;
 +	unsigned int mtu;
 +	unsigned int dcnt;
 +	void *rings;
  };
  
  /* Functions to read/write from/to a BAR
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
index 69f458e0de89,289fa318a651..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
@@@ -682,13 -732,13 +682,21 @@@ nfp_dump_nsp_diag(struct nfp_app *app, 
  	struct nfp_resource *res;
  	int ret;
  
++<<<<<<< HEAD
 +	if (!nn->cpp)
++=======
+ 	if (!app)
++>>>>>>> a2f4c3d9bd4a (nfp: allow retreiving management FW logs on representors)
  		return -EOPNOTSUPP;
  
  	dump->version = 1;
  	dump->flag = NFP_DUMP_NSP_DIAG;
  
++<<<<<<< HEAD
 +	res = nfp_resource_acquire(nn->cpp, NFP_RESOURCE_NSP_DIAG);
++=======
+ 	res = nfp_resource_acquire(app->cpp, NFP_RESOURCE_NSP_DIAG);
++>>>>>>> a2f4c3d9bd4a (nfp: allow retreiving management FW logs on representors)
  	if (IS_ERR(res))
  		return PTR_ERR(res);
  
@@@ -698,7 -748,7 +706,11 @@@
  			goto exit_release;
  		}
  
++<<<<<<< HEAD
 +		ret = nfp_cpp_read(nn->cpp, nfp_resource_cpp_id(res),
++=======
+ 		ret = nfp_cpp_read(app->cpp, nfp_resource_cpp_id(res),
++>>>>>>> a2f4c3d9bd4a (nfp: allow retreiving management FW logs on representors)
  				   nfp_resource_address(res),
  				   buffer, dump->len);
  		if (ret != dump->len)
@@@ -715,11 -765,11 +727,15 @@@ exit_release
  	return ret;
  }
  
- static int nfp_net_set_dump(struct net_device *netdev, struct ethtool_dump *val)
+ static int nfp_app_set_dump(struct net_device *netdev, struct ethtool_dump *val)
  {
- 	struct nfp_net *nn = netdev_priv(netdev);
+ 	struct nfp_app *app = nfp_app_from_netdev(netdev);
  
++<<<<<<< HEAD
 +	if (!nn->cpp)
++=======
+ 	if (!app)
++>>>>>>> a2f4c3d9bd4a (nfp: allow retreiving management FW logs on representors)
  		return -EOPNOTSUPP;
  
  	if (val->flag != NFP_DUMP_NSP_DIAG)
@@@ -907,6 -956,14 +921,17 @@@ static const struct ethtool_ops nfp_net
  	.set_link_ksettings	= nfp_net_set_link_ksettings,
  };
  
++<<<<<<< HEAD
++=======
+ const struct ethtool_ops nfp_port_ethtool_ops = {
+ 	.get_drvinfo		= nfp_app_get_drvinfo,
+ 	.get_link		= ethtool_op_get_link,
+ 	.set_dump		= nfp_app_set_dump,
+ 	.get_dump_flag		= nfp_app_get_dump_flag,
+ 	.get_dump_data		= nfp_app_get_dump_data,
+ };
+ 
++>>>>>>> a2f4c3d9bd4a (nfp: allow retreiving management FW logs on representors)
  void nfp_net_set_ethtool_ops(struct net_device *netdev)
  {
  	netdev->ethtool_ops = &nfp_net_ethtool_ops;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
