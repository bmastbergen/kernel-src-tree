fs: Constify path_is_under()'s arguments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [fs] Constify path_is_under()'s arguments ("Eric W. Biederman") [1487751]
Rebuild_FUZZ: 93.51%
commit-author Mickaël Salaün <mic@digikod.net>
commit 640eb7e7b5242af53c456552a526d0080e6333f8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/640eb7e7.failed

The function path_is_under() doesn't modify the paths pointed by its
arguments but only browse them. Constifying this pointers make a cleaner
interface to be used by (future) code which may only have access to
const struct path pointers (e.g. LSM hooks).

	Signed-off-by: Mickaël Salaün <mic@digikod.net>
	Cc: Alexander Viro <viro@zeniv.linux.org.uk>
	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 640eb7e7b5242af53c456552a526d0080e6333f8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/namespace.c
#	include/linux/fs.h
diff --cc fs/namespace.c
index 84149742b9d6,4d80a5066a1f..000000000000
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@@ -3021,9 -2997,9 +3021,13 @@@ bool is_path_reachable(struct mount *mn
  	return &mnt->mnt == root->mnt && is_subdir(dentry, root->dentry);
  }
  
++<<<<<<< HEAD
 +int path_is_under(struct path *path1, struct path *path2)
++=======
+ bool path_is_under(const struct path *path1, const struct path *path2)
++>>>>>>> 640eb7e7b524 (fs: Constify path_is_under()'s arguments)
  {
 -	bool res;
 +	int res;
  	read_seqlock_excl(&mount_lock);
  	res = is_path_reachable(real_mount(path1->mnt), path1->dentry, path2);
  	read_sequnlock_excl(&mount_lock);
diff --cc include/linux/fs.h
index 24213ce025a6,f96501b51c49..000000000000
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@@ -2797,9 -2708,10 +2797,16 @@@ extern ssize_t __kernel_write(struct fi
  extern struct file * open_exec(const char *);
   
  /* fs/dcache.c -- generic fs support functions */
++<<<<<<< HEAD
 +extern int is_subdir(struct dentry *, struct dentry *);
 +extern int path_is_under(struct path *, struct path *);
 +extern ino_t find_inode_number(struct dentry *, struct qstr *);
++=======
+ extern bool is_subdir(struct dentry *, struct dentry *);
+ extern bool path_is_under(const struct path *, const struct path *);
+ 
+ extern char *file_path(struct file *, char *, int);
++>>>>>>> 640eb7e7b524 (fs: Constify path_is_under()'s arguments)
  
  #include <linux/err.h>
  
* Unmerged path fs/namespace.c
* Unmerged path include/linux/fs.h
