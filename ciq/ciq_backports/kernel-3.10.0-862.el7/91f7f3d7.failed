tpm: use tpm_buf functions in tpm2_pcr_read()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Roberto Sassu <roberto.sassu@huawei.com>
commit 91f7f3d773a469deeab3808d422363138295346e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/91f7f3d7.failed

tpm2_pcr_read() now builds the PCR read command buffer with tpm_buf
functions. This solution is preferred to using a tpm2_cmd structure,
as tpm_buf functions provide protection against buffer overflow.

	Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: James Morris <james.l.morris@oracle.com>
(cherry picked from commit 91f7f3d773a469deeab3808d422363138295346e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/tpm/tpm2-cmd.c
diff --cc drivers/char/tpm/tpm2-cmd.c
index bab83b23d39b,76b0c87b1288..000000000000
--- a/drivers/char/tpm/tpm2-cmd.c
+++ b/drivers/char/tpm/tpm2-cmd.c
@@@ -42,33 -42,6 +42,36 @@@ struct tpm2_pcr_read_in 
  	u8	pcr_select[TPM2_PCR_SELECT_MIN];
  } __packed;
  
++<<<<<<< HEAD
 +struct tpm2_pcr_read_out {
 +	__be32	update_cnt;
 +	__be32	pcr_selects_cnt;
 +	__be16	hash_alg;
 +	u8	pcr_select_size;
 +	u8	pcr_select[TPM2_PCR_SELECT_MIN];
 +	__be32	digests_cnt;
 +	__be16	digest_size;
 +	u8	digest[TPM_DIGEST_SIZE];
 +} __packed;
 +
 +struct tpm2_null_auth_area {
 +	__be32			handle;
 +	__be16			nonce_size;
 +	u8			attributes;
 +	__be16			auth_size;
 +} __packed;
 +
 +struct tpm2_pcr_extend_in {
 +	__be32				pcr_idx;
 +	__be32				auth_area_size;
 +	struct tpm2_null_auth_area	auth_area;
 +	__be32				digest_cnt;
 +	__be16				hash_alg;
 +	u8				digest[TPM_DIGEST_SIZE];
 +} __packed;
 +
++=======
++>>>>>>> 91f7f3d773a4 (tpm: use tpm_buf functions in tpm2_pcr_read())
  struct tpm2_get_tpm_pt_in {
  	__be32	cap_id;
  	__be32	property_id;
@@@ -96,8 -69,6 +99,11 @@@ union tpm2_cmd_params 
  	struct	tpm2_startup_in		startup_in;
  	struct	tpm2_self_test_in	selftest_in;
  	struct	tpm2_pcr_read_in	pcrread_in;
++<<<<<<< HEAD
 +	struct	tpm2_pcr_read_out	pcrread_out;
 +	struct	tpm2_pcr_extend_in	pcrextend_in;
++=======
++>>>>>>> 91f7f3d773a4 (tpm: use tpm_buf functions in tpm2_pcr_read())
  	struct	tpm2_get_tpm_pt_in	get_tpm_pt_in;
  	struct	tpm2_get_tpm_pt_out	get_tpm_pt_out;
  	struct	tpm2_get_random_in	getrandom_in;
@@@ -274,23 -254,26 +289,35 @@@ int tpm2_pcr_read(struct tpm_chip *chip
  	if (pcr_idx >= TPM2_PLATFORM_PCR)
  		return -EINVAL;
  
- 	cmd.header.in = tpm2_pcrread_header;
- 	cmd.params.pcrread_in.pcr_selects_cnt = cpu_to_be32(1);
- 	cmd.params.pcrread_in.hash_alg = cpu_to_be16(TPM2_ALG_SHA1);
- 	cmd.params.pcrread_in.pcr_select_size = TPM2_PCR_SELECT_MIN;
+ 	rc = tpm_buf_init(&buf, TPM2_ST_NO_SESSIONS, TPM2_CC_PCR_READ);
+ 	if (rc)
+ 		return rc;
  
- 	memset(cmd.params.pcrread_in.pcr_select, 0,
- 	       sizeof(cmd.params.pcrread_in.pcr_select));
- 	cmd.params.pcrread_in.pcr_select[pcr_idx >> 3] = 1 << (pcr_idx & 0x7);
+ 	pcr_select[pcr_idx >> 3] = 1 << (pcr_idx & 0x7);
  
++<<<<<<< HEAD
 +	rc = tpm_transmit_cmd(chip, &cmd, sizeof(cmd),
 +			      TPM2_PCR_READ_RESP_BODY_SIZE,
 +			      0, "attempting to read a pcr value");
 +	if (rc == 0) {
 +		buf = cmd.params.pcrread_out.digest;
 +		memcpy(res_buf, buf, TPM_DIGEST_SIZE);
++=======
+ 	tpm_buf_append_u32(&buf, 1);
+ 	tpm_buf_append_u16(&buf, TPM2_ALG_SHA1);
+ 	tpm_buf_append_u8(&buf, TPM2_PCR_SELECT_MIN);
+ 	tpm_buf_append(&buf, (const unsigned char *)pcr_select,
+ 		       sizeof(pcr_select));
+ 
+ 	rc = tpm_transmit_cmd(chip, NULL, buf.data, PAGE_SIZE, 0, 0,
+ 			res_buf ? "attempting to read a pcr value" : NULL);
+ 	if (rc == 0 && res_buf) {
+ 		out = (struct tpm2_pcr_read_out *)&buf.data[TPM_HEADER_SIZE];
+ 		memcpy(res_buf, out->digest, SHA1_DIGEST_SIZE);
++>>>>>>> 91f7f3d773a4 (tpm: use tpm_buf functions in tpm2_pcr_read())
  	}
  
+ 	tpm_buf_destroy(&buf);
  	return rc;
  }
  
* Unmerged path drivers/char/tpm/tpm2-cmd.c
