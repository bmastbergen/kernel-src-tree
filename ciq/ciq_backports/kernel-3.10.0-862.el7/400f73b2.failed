blk-mq: fix debugfs compilation issues

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit 400f73b23f457a82288814e21af57dbc9f3f2afd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/400f73b2.failed

This fixes a couple of problems:

1. In the !CONFIG_DEBUG_FS case, the stub definitions were bogus.
2. In the !CONFIG_BLOCK case, blk-mq-debugfs.c shouldn't be compiled at
   all.

Fix the stub definitions and add a CONFIG_BLK_DEBUG_FS Kconfig option.

Fixes: 07e4fead45e6 ("blk-mq: create debugfs directory tree")
	Signed-off-by: Omar Sandoval <osandov@fb.com>

Augment Kconfig description.

	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 400f73b23f457a82288814e21af57dbc9f3f2afd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/Kconfig
#	block/Makefile
#	block/blk-mq.h
diff --cc block/Kconfig
index 6a13519cf86b,7f659b23850c..000000000000
--- a/block/Kconfig
+++ b/block/Kconfig
@@@ -112,6 -110,55 +112,58 @@@ config BLK_DEV_THROTTLIN
  
  	See Documentation/cgroups/blkio-controller.txt for more information.
  
++<<<<<<< HEAD
++=======
+ config BLK_CMDLINE_PARSER
+ 	bool "Block device command line partition parser"
+ 	default n
+ 	---help---
+ 	Enabling this option allows you to specify the partition layout from
+ 	the kernel boot args.  This is typically of use for embedded devices
+ 	which don't otherwise have any standardized method for listing the
+ 	partitions on a block device.
+ 
+ 	See Documentation/block/cmdline-partition.txt for more information.
+ 
+ config BLK_WBT
+ 	bool "Enable support for block device writeback throttling"
+ 	default n
+ 	---help---
+ 	Enabling this option enables the block layer to throttle buffered
+ 	background writeback from the VM, making it more smooth and having
+ 	less impact on foreground operations. The throttling is done
+ 	dynamically on an algorithm loosely based on CoDel, factoring in
+ 	the realtime performance of the disk.
+ 
+ config BLK_WBT_SQ
+ 	bool "Single queue writeback throttling"
+ 	default n
+ 	depends on BLK_WBT
+ 	---help---
+ 	Enable writeback throttling by default on legacy single queue devices
+ 
+ config BLK_WBT_MQ
+ 	bool "Multiqueue writeback throttling"
+ 	default y
+ 	depends on BLK_WBT
+ 	---help---
+ 	Enable writeback throttling by default on multiqueue devices.
+ 	Multiqueue currently doesn't have support for IO scheduling,
+ 	enabling this option is recommended.
+ 
+ config BLK_DEBUG_FS
+ 	bool "Block layer debugging information in debugfs"
+ 	default y
+ 	depends on DEBUG_FS
+ 	---help---
+ 	Include block layer debugging information in debugfs. This information
+ 	is mostly useful for kernel developers, but it doesn't incur any cost
+ 	at runtime.
+ 
+ 	Unless you are building a kernel for a tiny system, you should
+ 	say Y here.
+ 
++>>>>>>> 400f73b23f45 (blk-mq: fix debugfs compilation issues)
  menu "Partition Types"
  
  source "block/partitions/Kconfig"
diff --cc block/Makefile
index 93c61e8f29e6,317165f8708c..000000000000
--- a/block/Makefile
+++ b/block/Makefile
@@@ -20,4 -21,9 +20,13 @@@ obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosche
  obj-$(CONFIG_MQ_IOSCHED_DEADLINE)	+= mq-deadline.o
  
  obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
++<<<<<<< HEAD
 +obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
++=======
+ obj-$(CONFIG_BLK_CMDLINE_PARSER)	+= cmdline-parser.o
+ obj-$(CONFIG_BLK_DEV_INTEGRITY) += bio-integrity.o blk-integrity.o t10-pi.o
+ obj-$(CONFIG_BLK_MQ_PCI)	+= blk-mq-pci.o
+ obj-$(CONFIG_BLK_DEV_ZONED)	+= blk-zoned.o
+ obj-$(CONFIG_BLK_WBT)		+= blk-wbt.o
+ obj-$(CONFIG_BLK_DEBUG_FS)	+= blk-mq-debugfs.o
++>>>>>>> 400f73b23f45 (blk-mq: fix debugfs compilation issues)
diff --cc block/blk-mq.h
index 2d50f02667c4,b52abd62b1b0..000000000000
--- a/block/blk-mq.h
+++ b/block/blk-mq.h
@@@ -61,6 -81,40 +61,43 @@@ extern int blk_mq_sysfs_register(struc
  extern void blk_mq_sysfs_unregister(struct request_queue *q);
  extern void blk_mq_hctx_kobj_init(struct blk_mq_hw_ctx *hctx);
  
++<<<<<<< HEAD
++=======
+ /*
+  * debugfs helpers
+  */
+ #ifdef CONFIG_BLK_DEBUG_FS
+ void blk_mq_debugfs_init(void);
+ int blk_mq_debugfs_register(struct request_queue *q, const char *name);
+ void blk_mq_debugfs_unregister(struct request_queue *q);
+ int blk_mq_debugfs_register_hctxs(struct request_queue *q);
+ void blk_mq_debugfs_unregister_hctxs(struct request_queue *q);
+ #else
+ static inline void blk_mq_debugfs_init(void)
+ {
+ }
+ 
+ static inline int blk_mq_debugfs_register(struct request_queue *q,
+ 					  const char *name)
+ {
+ 	return 0;
+ }
+ 
+ static inline void blk_mq_debugfs_unregister(struct request_queue *q)
+ {
+ }
+ 
+ static inline int blk_mq_debugfs_register_hctxs(struct request_queue *q)
+ {
+ 	return 0;
+ }
+ 
+ static inline void blk_mq_debugfs_unregister_hctxs(struct request_queue *q)
+ {
+ }
+ #endif
+ 
++>>>>>>> 400f73b23f45 (blk-mq: fix debugfs compilation issues)
  extern void blk_mq_rq_timed_out(struct request *req, bool reserved);
  
  void blk_mq_release(struct request_queue *q);
* Unmerged path block/Kconfig
* Unmerged path block/Makefile
* Unmerged path block/blk-mq.h
