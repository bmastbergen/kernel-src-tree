HID: wacom: Correct coordinate system of touchring and pen twist

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [hid] wacom: Correct coordinate system of touchring and pen twist (Aristeu Rozanski) [1475409 1462363]
Rebuild_FUZZ: 95.93%
commit-author Jason Gerecke <killertofu@gmail.com>
commit d252f4a10fb9c8f7187c6c936ff530039f8cb799
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d252f4a1.failed

The MobileStudio Pro, Cintiq Pro, and 2nd-gen Intuos Pro devices use a
different coordinate system for their touchring and pen twist than prior
devices. Prior devices had zero aligned to the tablet's left and would
increase clockwise. Userspace expects data from the kernel to be in this
old coordinate space, so adjustments are necessary.

While the coordinate system for pen twist is formally defined by the HID
standard, no such definition existed for the touchring at the time these
tablets were introduced. Future tablets are expected to report touchring
data using the same "zero-up clockwise-increasing" coordinate system
defined for twist.

Fixes: 50066a042d ("HID: wacom: generic: Add support for height, tilt, and twist usages")
Fixes: 4922cd26f0 ("HID: wacom: Support 2nd-gen Intuos Pro's Bluetooth classic interface")
Fixes: 60a2218698 ("HID: wacom: generic: add support for touchring")
	Cc: stable@vger.kernel.org # 4.10, 4.11
	Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
	Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
	Signed-off-by: Jiri Kosina <jkosina@suse.cz>
(cherry picked from commit d252f4a10fb9c8f7187c6c936ff530039f8cb799)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hid/wacom_wac.c
diff --cc drivers/hid/wacom_wac.c
index c99adca3443f,78d0398904dc..000000000000
--- a/drivers/hid/wacom_wac.c
+++ b/drivers/hid/wacom_wac.c
@@@ -1614,7 -1629,21 +1627,25 @@@ static int wacom_tpc_irq(struct wacom_w
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int wacom_equivalent_usage(int usage)
++=======
+ static int wacom_offset_rotation(struct input_dev *input, struct hid_usage *usage,
+ 				 int value, int num, int denom)
+ {
+ 	struct input_absinfo *abs = &input->absinfo[usage->code];
+ 	int range = (abs->maximum - abs->minimum + 1);
+ 
+ 	value += num*range/denom;
+ 	if (value > abs->maximum)
+ 		value -= range;
+ 	else if (value < abs->minimum)
+ 		value += range;
+ 	return value;
+ }
+ 
+ int wacom_equivalent_usage(int usage)
++>>>>>>> d252f4a10fb9 (HID: wacom: Correct coordinate system of touchring and pen twist)
  {
  	if ((usage & HID_USAGE_PAGE) == WACOM_HID_UP_WACOMDIGITIZER) {
  		int subpage = (usage & 0xFF00) << 8;
@@@ -1859,7 -1921,11 +1890,13 @@@ static void wacom_wac_pad_event(struct 
  	struct wacom *wacom = hid_get_drvdata(hdev);
  	struct wacom_wac *wacom_wac = &wacom->wacom_wac;
  	struct input_dev *input = wacom_wac->pad_input;
 -	struct wacom_features *features = &wacom_wac->features;
  	unsigned equivalent_usage = wacom_equivalent_usage(usage->hid);
++<<<<<<< HEAD
++=======
+ 	int i;
+ 	bool is_touch_on = value;
+ 	bool do_report = false;
++>>>>>>> d252f4a10fb9 (HID: wacom: Correct coordinate system of touchring and pen twist)
  
  	/*
  	 * Avoid reporting this event and setting inrange_state if this usage
@@@ -1886,7 -1982,25 +1946,12 @@@
  			input_sync(wacom_wac->shared->touch_input);
  		}
  		break;
 -
 -	case WACOM_HID_WD_MODE_CHANGE:
 -		if (wacom_wac->is_direct_mode != value) {
 -			wacom_wac->is_direct_mode = value;
 -			wacom_schedule_work(&wacom->wacom_wac, WACOM_WORKER_MODE_CHANGE);
 -		}
 -		break;
 -
 -	case WACOM_HID_WD_BUTTONCENTER:
 -		for (i = 0; i < wacom->led.count; i++)
 -			wacom_update_led(wacom, features->numbered_buttons,
 -					 value, i);
 -		 /* fall through*/
  	default:
+ 		do_report = true;
+ 		break;
+ 	}
+ 
+ 	if (do_report) {
  		input_event(input, usage->type, usage->code, value);
  		if (value)
  			wacom_wac->hid_data.pad_input_event_flag = true;
* Unmerged path drivers/hid/wacom_wac.c
