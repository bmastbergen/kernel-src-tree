xfs: defer should allow ->finish_item to request a new transaction

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Darrick J. Wong <darrick.wong@oracle.com>
commit 385d655861d221bb43ae69a9cfa9adbefe31ad00
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/385d6558.failed

When xfs_defer_finish calls ->finish_item, it's possible that
(refcount) won't be able to finish all the work in a single
transaction.  When this happens, the ->finish_item handler should
shorten the log done item's list count, update the work item to
reflect where work should continue, and return -EAGAIN so that
defer_finish knows to retain the pending item on the pending list,
roll the transaction, and restart processing where we left off.

Plumb in the code and document how this mechanism is supposed to work.

	Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

(cherry picked from commit 385d655861d221bb43ae69a9cfa9adbefe31ad00)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/xfs/libxfs/xfs_defer.c
diff --cc fs/xfs/libxfs/xfs_defer.c
index 2809db75e0d3,613c5cf19436..000000000000
--- a/fs/xfs/libxfs/xfs_defer.c
+++ b/fs/xfs/libxfs/xfs_defer.c
@@@ -321,8 -362,17 +361,22 @@@ xfs_defer_finish
  			list_del(li);
  			dfp->dfp_count--;
  			error = dfp->dfp_type->finish_item(*tp, dop, li,
++<<<<<<< HEAD
 +					done_item, &state);
 +			if (error) {
++=======
+ 					dfp->dfp_done, &state);
+ 			if (error == -EAGAIN) {
+ 				/*
+ 				 * Caller wants a fresh transaction;
+ 				 * put the work item back on the list
+ 				 * and jump out.
+ 				 */
+ 				list_add(li, &dfp->dfp_work);
+ 				dfp->dfp_count++;
+ 				break;
+ 			} else if (error) {
++>>>>>>> 385d655861d2 (xfs: defer should allow ->finish_item to request a new transaction)
  				/*
  				 * Clean up after ourselves and jump out.
  				 * xfs_defer_cancel will take care of freeing
* Unmerged path fs/xfs/libxfs/xfs_defer.c
