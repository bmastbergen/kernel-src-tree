x86/apic: Handle zero vector gracefully in clear_vector_irq()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] apic: Handle zero vector gracefully in clear_vector_irq() (Prarit Bhargava) [1441091]
Rebuild_FUZZ: 96.61%
commit-author Keith Busch <keith.busch@intel.com>
commit 1bdb8970392a68489b469c3a330a1adb5ef61beb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1bdb8970.failed

If x86_vector_alloc_irq() fails x86_vector_free_irqs() is invoked to cleanup
the already allocated vectors. This subsequently calls clear_vector_irq().

The failed irq has no vector assigned, which triggers the BUG_ON(!vector) in
clear_vector_irq().

We cannot suppress the call to x86_vector_free_irqs() for the failed
interrupt, because the other data related to this irq must be cleaned up as
well. So calling clear_vector_irq() with vector == 0 is legitimate.

Remove the BUG_ON and return if vector is zero,

[ tglx: Massaged changelog ]

Fixes: b5dc8e6c21e7 "x86/irq: Use hierarchical irqdomain to manage CPU interrupt vectors"
	Signed-off-by: Keith Busch <keith.busch@intel.com>
	Cc: stable@vger.kernel.org
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
(cherry picked from commit 1bdb8970392a68489b469c3a330a1adb5ef61beb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/apic/vector.c
* Unmerged path arch/x86/kernel/apic/vector.c
* Unmerged path arch/x86/kernel/apic/vector.c
