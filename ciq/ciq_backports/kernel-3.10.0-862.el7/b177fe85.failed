libnvdimm, btt: ensure that initializing metadata clears poison

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Vishal Verma <vishal.l.verma@intel.com>
commit b177fe85dd27de1ee4c29f59c4e82b3ea3b78784
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b177fe85.failed

If we had badblocks/poison in the metadata area of a BTT, recreating the
BTT would not clear the poison in all cases, notably the flog area. This
is because rw_bytes will only clear errors if the request being sent
down is 512B aligned and sized.

Make sure that when writing the map and info blocks, the rw_bytes being
sent are of the correct size/alignment. For the flog, instead of doing
the smaller log_entry writes only, first do a 'wipe' of the entire area
by writing zeroes in large enough chunks so that errors get cleared.

	Cc: Andy Rudoff <andy.rudoff@intel.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Signed-off-by: Vishal Verma <vishal.l.verma@intel.com>
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit b177fe85dd27de1ee4c29f59c4e82b3ea3b78784)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvdimm/btt.c
diff --cc drivers/nvdimm/btt.c
index 03b390bce2ca,983718b8fd9b..000000000000
--- a/drivers/nvdimm/btt.c
+++ b/drivers/nvdimm/btt.c
@@@ -57,8 -57,16 +57,16 @@@ static int btt_info_write(struct arena_
  {
  	int ret;
  
+ 	/*
+ 	 * infooff and info2off should always be at least 512B aligned.
+ 	 * We rely on that to make sure rw_bytes does error clearing
+ 	 * correctly, so make sure that is the case.
+ 	 */
+ 	WARN_ON_ONCE(!IS_ALIGNED(arena->infooff, 512));
+ 	WARN_ON_ONCE(!IS_ALIGNED(arena->info2off, 512));
+ 
  	ret = arena_write_bytes(arena, arena->info2off, super,
 -			sizeof(struct btt_sb), 0);
 +			sizeof(struct btt_sb));
  	if (ret)
  		return ret;
  
@@@ -396,8 -412,9 +411,9 @@@ static int btt_map_init(struct arena_in
  	while (mapsize) {
  		size_t size = min(mapsize, chunk_size);
  
+ 		WARN_ON_ONCE(size < 512);
  		ret = arena_write_bytes(arena, arena->mapoff + offset, zerobuf,
 -				size, 0);
 +				size);
  		if (ret)
  			goto free;
  
@@@ -428,15 -470,14 +469,21 @@@ static int btt_log_init(struct arena_in
  		log.old_map = cpu_to_le32(arena->external_nlba + i);
  		log.new_map = cpu_to_le32(arena->external_nlba + i);
  		log.seq = cpu_to_le32(LOG_SEQ_INIT);
 -		ret = __btt_log_write(arena, i, 0, &log, 0);
 +		ret = __btt_log_write(arena, i, 0, &log);
 +		if (ret)
++<<<<<<< HEAD
 +			return ret;
 +		ret = __btt_log_write(arena, i, 1, &zerolog);
  		if (ret)
 +			return ret;
++=======
+ 			goto free;
++>>>>>>> b177fe85dd27 (libnvdimm, btt: ensure that initializing metadata clears poison)
  	}
  
- 	return 0;
+  free:
+ 	kfree(zerobuf);
+ 	return ret;
  }
  
  static int btt_freelist_init(struct arena_info *arena)
* Unmerged path drivers/nvdimm/btt.c
