xen/vcpu: Simplify xen_vcpu related code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ankur Arora <ankur.a.arora@oracle.com>
commit ad73fd595c2ab168fdd01a266cbe6e4df95f8db0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ad73fd59.failed

Largely mechanical changes to aid unification of xen_vcpu_restore()
logic for PV, PVH and PVHVM.

xen_vcpu_setup(): the only change in logic is that clamp_max_cpus()
is now handled inside the "if (!xen_have_vcpu_info_placement)" block.

xen_vcpu_restore(): code movement from enlighten_pv.c to enlighten.c.

xen_vcpu_info_reset(): pulls together all the code where xen_vcpu
is set to default.

	Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
	Signed-off-by: Ankur Arora <ankur.a.arora@oracle.com>
	Signed-off-by: Juergen Gross <jgross@suse.com>
(cherry picked from commit ad73fd595c2ab168fdd01a266cbe6e4df95f8db0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/xen/enlighten.c
#	arch/x86/xen/enlighten_hvm.c
#	arch/x86/xen/enlighten_pv.c
#	arch/x86/xen/smp_hvm.c
diff --cc arch/x86/xen/enlighten.c
index 5df0cb46e645,96b745e3f56c..000000000000
--- a/arch/x86/xen/enlighten.c
+++ b/arch/x86/xen/enlighten.c
@@@ -158,23 -79,62 +158,52 @@@ struct shared_info *HYPERVISOR_shared_i
   *
   * 0: not available, 1: available
   */
 -int xen_have_vcpu_info_placement = 1;
 -
 -static int xen_cpu_up_online(unsigned int cpu)
 -{
 -	xen_init_lock_cpu(cpu);
 -	return 0;
 -}
 +static int have_vcpu_info_placement = 1;
  
 -int xen_cpuhp_setup(int (*cpu_up_prepare_cb)(unsigned int),
 -		    int (*cpu_dead_cb)(unsigned int))
 -{
 -	int rc;
 +struct tls_descs {
 +	struct desc_struct desc[3];
 +};
  
 -	rc = cpuhp_setup_state_nocalls(CPUHP_XEN_PREPARE,
 -				       "x86/xen/hvm_guest:prepare",
 -				       cpu_up_prepare_cb, cpu_dead_cb);
 -	if (rc >= 0) {
 -		rc = cpuhp_setup_state_nocalls(CPUHP_AP_ONLINE_DYN,
 -					       "x86/xen/hvm_guest:online",
 -					       xen_cpu_up_online, NULL);
 -		if (rc < 0)
 -			cpuhp_remove_state_nocalls(CPUHP_XEN_PREPARE);
 -	}
 +/*
 + * Updating the 3 TLS descriptors in the GDT on every task switch is
 + * surprisingly expensive so we avoid updating them if they haven't
 + * changed.  Since Xen writes different descriptors than the one
 + * passed in the update_descriptor hypercall we keep shadow copies to
 + * compare against.
 + */
 +static DEFINE_PER_CPU(struct tls_descs, shadow_tls_desc);
  
 -	return rc >= 0 ? 0 : rc;
 -}
 +#define XEN_HVM_CPUID_VCPU_ID_PRESENT  (1u << 3)
  
+ /*
+  * On restore, set the vcpu placement up again.
+  * If it fails, then we're in a bad state, since
+  * we can't back out from using it...
+  */
+ void xen_vcpu_restore(void)
+ {
+ 	int cpu;
+ 
+ 	for_each_possible_cpu(cpu) {
+ 		bool other_cpu = (cpu != smp_processor_id());
+ 		bool is_up = HYPERVISOR_vcpu_op(VCPUOP_is_up, xen_vcpu_nr(cpu),
+ 						NULL);
+ 
+ 		if (other_cpu && is_up &&
+ 		    HYPERVISOR_vcpu_op(VCPUOP_down, xen_vcpu_nr(cpu), NULL))
+ 			BUG();
+ 
+ 		xen_setup_runstate_info(cpu);
+ 
+ 		if (xen_have_vcpu_info_placement)
+ 			xen_vcpu_setup(cpu);
+ 
+ 		if (other_cpu && is_up &&
+ 		    HYPERVISOR_vcpu_op(VCPUOP_up, xen_vcpu_nr(cpu), NULL))
+ 			BUG();
+ 	}
+ }
+ 
  static void clamp_max_cpus(void)
  {
  #ifdef CONFIG_SMP
@@@ -206,280 -177,80 +246,313 @@@ void xen_vcpu_setup(int cpu
  		if (per_cpu(xen_vcpu, cpu) == &per_cpu(xen_vcpu_info, cpu))
  			return;
  	}
- 	if (xen_vcpu_nr(cpu) < MAX_VIRT_CPUS)
- 		per_cpu(xen_vcpu, cpu) =
- 			&HYPERVISOR_shared_info->vcpu_info[xen_vcpu_nr(cpu)];
+ 
+ 	xen_vcpu_info_reset(cpu);
+ 
+ 	if (xen_have_vcpu_info_placement) {
+ 		vcpup = &per_cpu(xen_vcpu_info, cpu);
+ 		info.mfn = arbitrary_virt_to_mfn(vcpup);
+ 		info.offset = offset_in_page(vcpup);
+ 
+ 		/*
+ 		 * Check to see if the hypervisor will put the vcpu_info
+ 		 * structure where we want it, which allows direct access via
+ 		 * a percpu-variable.
+ 		 * N.B. This hypercall can _only_ be called once per CPU.
+ 		 * Subsequent calls will error out with -EINVAL. This is due to
+ 		 * the fact that hypervisor has no unregister variant and this
+ 		 * hypercall does not allow to over-write info.mfn and
+ 		 * info.offset.
+ 		 */
+ 		err = HYPERVISOR_vcpu_op(VCPUOP_register_vcpu_info,
+ 					 xen_vcpu_nr(cpu), &info);
+ 
+ 		if (err) {
+ 			pr_warn_once("register_vcpu_info failed: cpu=%d err=%d\n",
+ 				     cpu, err);
+ 			xen_have_vcpu_info_placement = 0;
+ 		} else {
+ 			/*
+ 			 * This cpu is using the registered vcpu info, even if
+ 			 * later ones fail to.
+ 			 */
+ 			per_cpu(xen_vcpu, cpu) = vcpup;
+ 		}
+ 	}
  
 -	if (!xen_have_vcpu_info_placement) {
 +	if (!have_vcpu_info_placement) {
  		if (cpu >= MAX_VIRT_CPUS)
  			clamp_max_cpus();
  		return;
  	}
++<<<<<<< HEAD
 +
 +	vcpup = &per_cpu(xen_vcpu_info, cpu);
 +	info.mfn = arbitrary_virt_to_mfn(vcpup);
 +	info.offset = offset_in_page(vcpup);
 +
 +	/* Check to see if the hypervisor will put the vcpu_info
 +	   structure where we want it, which allows direct access via
 +	   a percpu-variable.
 +	   N.B. This hypercall can _only_ be called once per CPU. Subsequent
 +	   calls will error out with -EINVAL. This is due to the fact that
 +	   hypervisor has no unregister variant and this hypercall does not
 +	   allow to over-write info.mfn and info.offset.
 +	 */
 +	err = HYPERVISOR_vcpu_op(VCPUOP_register_vcpu_info, xen_vcpu_nr(cpu),
 +				 &info);
 +
 +	if (err) {
 +		printk(KERN_DEBUG "register_vcpu_info failed: err=%d\n", err);
 +		have_vcpu_info_placement = 0;
 +		clamp_max_cpus();
 +	} else {
 +		/* This cpu is using the registered vcpu info, even if
 +		   later ones fail to. */
 +		per_cpu(xen_vcpu, cpu) = vcpup;
 +	}
++=======
++>>>>>>> ad73fd595c2a (xen/vcpu: Simplify xen_vcpu related code)
  }
  
 -void xen_reboot(int reason)
 +/*
 + * On restore, set the vcpu placement up again.
 + * If it fails, then we're in a bad state, since
 + * we can't back out from using it...
 + */
 +void xen_vcpu_restore(void)
  {
 -	struct sched_shutdown r = { .reason = reason };
  	int cpu;
  
 -	for_each_online_cpu(cpu)
 -		xen_pmu_finish(cpu);
 +	for_each_possible_cpu(cpu) {
 +		bool other_cpu = (cpu != smp_processor_id());
 +		bool is_up = HYPERVISOR_vcpu_op(VCPUOP_is_up, xen_vcpu_nr(cpu),
 +						NULL);
  
 -	if (HYPERVISOR_sched_op(SCHEDOP_shutdown, &r))
 -		BUG();
 +		if (other_cpu && is_up &&
 +		    HYPERVISOR_vcpu_op(VCPUOP_down, xen_vcpu_nr(cpu), NULL))
 +			BUG();
 +
 +		xen_setup_runstate_info(cpu);
 +
 +		if (have_vcpu_info_placement)
 +			xen_vcpu_setup(cpu);
 +
 +		if (other_cpu && is_up &&
 +		    HYPERVISOR_vcpu_op(VCPUOP_up, xen_vcpu_nr(cpu), NULL))
 +			BUG();
 +	}
  }
  
 -void xen_emergency_restart(void)
 +static void __init xen_banner(void)
  {
 -	xen_reboot(SHUTDOWN_reboot);
 +	unsigned version = HYPERVISOR_xen_version(XENVER_version, NULL);
 +	struct xen_extraversion extra;
 +	HYPERVISOR_xen_version(XENVER_extraversion, &extra);
 +
 +	printk(KERN_INFO "Booting paravirtualized kernel on %s\n",
 +	       pv_info.name);
 +	printk(KERN_INFO "Xen version: %d.%d%s%s\n",
 +	       version >> 16, version & 0xffff, extra.extraversion,
 +	       xen_feature(XENFEAT_mmu_pt_update_preserve_ad) ? " (preserve-AD)" : "");
  }
 +/* Check if running on Xen version (major, minor) or later */
 +bool
 +xen_running_on_version_or_later(unsigned int major, unsigned int minor)
 +{
 +	unsigned int version;
  
 -static int
 -xen_panic_event(struct notifier_block *this, unsigned long event, void *ptr)
 +	if (!xen_domain())
 +		return false;
 +
 +	version = HYPERVISOR_xen_version(XENVER_version, NULL);
 +	if ((((version >> 16) == major) && ((version & 0xffff) >= minor)) ||
 +		((version >> 16) > major))
 +		return true;
 +	return false;
 +}
 +
 +#define CPUID_THERM_POWER_LEAF 6
 +#define APERFMPERF_PRESENT 0
 +
 +static __read_mostly unsigned int cpuid_leaf1_edx_mask = ~0;
 +static __read_mostly unsigned int cpuid_leaf1_ecx_mask = ~0;
 +
 +static __read_mostly unsigned int cpuid_leaf1_ecx_set_mask;
 +static __read_mostly unsigned int cpuid_leaf5_ecx_val;
 +static __read_mostly unsigned int cpuid_leaf5_edx_val;
 +
 +static void xen_cpuid(unsigned int *ax, unsigned int *bx,
 +		      unsigned int *cx, unsigned int *dx)
  {
 -	if (!kexec_crash_loaded())
 -		xen_reboot(SHUTDOWN_crash);
 -	return NOTIFY_DONE;
 +	unsigned maskebx = ~0;
 +	unsigned maskecx = ~0;
 +	unsigned maskedx = ~0;
 +	unsigned setecx = 0;
 +	/*
 +	 * Mask out inconvenient features, to try and disable as many
 +	 * unsupported kernel subsystems as possible.
 +	 */
 +	switch (*ax) {
 +	case 1:
 +		maskecx = cpuid_leaf1_ecx_mask;
 +		setecx = cpuid_leaf1_ecx_set_mask;
 +		maskedx = cpuid_leaf1_edx_mask;
 +		break;
 +
 +	case CPUID_MWAIT_LEAF:
 +		/* Synthesize the values.. */
 +		*ax = 0;
 +		*bx = 0;
 +		*cx = cpuid_leaf5_ecx_val;
 +		*dx = cpuid_leaf5_edx_val;
 +		return;
 +
 +	case CPUID_THERM_POWER_LEAF:
 +		/* Disabling APERFMPERF for kernel usage */
 +		maskecx = ~(1 << APERFMPERF_PRESENT);
 +		break;
 +
 +	case 0xb:
 +		/* Suppress extended topology stuff */
 +		maskebx = 0;
 +		break;
 +	}
 +
 +	asm(XEN_EMULATE_PREFIX "cpuid"
 +		: "=a" (*ax),
 +		  "=b" (*bx),
 +		  "=c" (*cx),
 +		  "=d" (*dx)
 +		: "0" (*ax), "2" (*cx));
 +
 +	*bx &= maskebx;
 +	*cx &= maskecx;
 +	*cx |= setecx;
 +	*dx &= maskedx;
  }
 +STACK_FRAME_NON_STANDARD(xen_cpuid); /* XEN_EMULATE_PREFIX */
  
 -static struct notifier_block xen_panic_block = {
 -	.notifier_call = xen_panic_event,
 -	.priority = INT_MIN
 -};
 +static bool __init xen_check_mwait(void)
 +{
 +#ifdef CONFIG_ACPI
 +	struct xen_platform_op op = {
 +		.cmd			= XENPF_set_processor_pminfo,
 +		.u.set_pminfo.id	= -1,
 +		.u.set_pminfo.type	= XEN_PM_PDC,
 +	};
 +	uint32_t buf[3];
 +	unsigned int ax, bx, cx, dx;
 +	unsigned int mwait_mask;
  
 -int xen_panic_handler_init(void)
 +	/* We need to determine whether it is OK to expose the MWAIT
 +	 * capability to the kernel to harvest deeper than C3 states from ACPI
 +	 * _CST using the processor_harvest_xen.c module. For this to work, we
 +	 * need to gather the MWAIT_LEAF values (which the cstate.c code
 +	 * checks against). The hypervisor won't expose the MWAIT flag because
 +	 * it would break backwards compatibility; so we will find out directly
 +	 * from the hardware and hypercall.
 +	 */
 +	if (!xen_initial_domain())
 +		return false;
 +
 +	/*
 +	 * When running under platform earlier than Xen4.2, do not expose
 +	 * mwait, to avoid the risk of loading native acpi pad driver
 +	 */
 +	if (!xen_running_on_version_or_later(4, 2))
 +		return false;
 +
 +	ax = 1;
 +	cx = 0;
 +
 +	native_cpuid(&ax, &bx, &cx, &dx);
 +
 +	mwait_mask = (1 << (X86_FEATURE_EST % 32)) |
 +		     (1 << (X86_FEATURE_MWAIT % 32));
 +
 +	if ((cx & mwait_mask) != mwait_mask)
 +		return false;
 +
 +	/* We need to emulate the MWAIT_LEAF and for that we need both
 +	 * ecx and edx. The hypercall provides only partial information.
 +	 */
 +
 +	ax = CPUID_MWAIT_LEAF;
 +	bx = 0;
 +	cx = 0;
 +	dx = 0;
 +
 +	native_cpuid(&ax, &bx, &cx, &dx);
 +
 +	/* Ask the Hypervisor whether to clear ACPI_PDC_C_C2C3_FFH. If so,
 +	 * don't expose MWAIT_LEAF and let ACPI pick the IOPORT version of C3.
 +	 */
 +	buf[0] = ACPI_PDC_REVISION_ID;
 +	buf[1] = 1;
 +	buf[2] = (ACPI_PDC_C_CAPABILITY_SMP | ACPI_PDC_EST_CAPABILITY_SWSMP);
 +
 +	set_xen_guest_handle(op.u.set_pminfo.pdc, buf);
 +
 +	if ((HYPERVISOR_dom0_op(&op) == 0) &&
 +	    (buf[2] & (ACPI_PDC_C_C1_FFH | ACPI_PDC_C_C2C3_FFH))) {
 +		cpuid_leaf5_ecx_val = cx;
 +		cpuid_leaf5_edx_val = dx;
 +	}
 +	return true;
 +#else
 +	return false;
 +#endif
 +}
 +static void __init xen_init_cpuid_mask(void)
 +{
 +	unsigned int ax, bx, cx, dx;
 +	unsigned int xsave_mask;
 +
 +	cpuid_leaf1_edx_mask =
 +		~((1 << X86_FEATURE_MTRR) |  /* disable MTRR */
 +		  (1 << X86_FEATURE_ACC));   /* thermal monitoring */
 +
 +	if (!xen_initial_domain())
 +		cpuid_leaf1_edx_mask &=
 +			~((1 << X86_FEATURE_APIC) |  /* disable local APIC */
 +			  (1 << X86_FEATURE_ACPI));  /* disable ACPI */
 +
 +	cpuid_leaf1_ecx_mask &= ~(1 << (X86_FEATURE_X2APIC % 32));
 +
 +	ax = 1;
 +	cx = 0;
 +	xen_cpuid(&ax, &bx, &cx, &dx);
 +
 +	xsave_mask =
 +		(1 << (X86_FEATURE_XSAVE % 32)) |
 +		(1 << (X86_FEATURE_OSXSAVE % 32));
 +
 +	/* Xen will set CR4.OSXSAVE if supported and not disabled by force */
 +	if ((cx & xsave_mask) != xsave_mask)
 +		cpuid_leaf1_ecx_mask &= ~xsave_mask; /* disable XSAVE & OSXSAVE */
 +	if (xen_check_mwait())
 +		cpuid_leaf1_ecx_set_mask = (1 << (X86_FEATURE_MWAIT % 32));
 +}
 +
 +static void xen_set_debugreg(int reg, unsigned long val)
 +{
 +	HYPERVISOR_set_debugreg(reg, val);
 +}
 +
 +static unsigned long xen_get_debugreg(int reg)
 +{
 +	return HYPERVISOR_get_debugreg(reg);
 +}
 +
 +static void xen_end_context_switch(struct task_struct *next)
 +{
 +	xen_mc_flush();
 +	paravirt_end_context_switch(next);
 +}
 +
 +static unsigned long xen_store_tr(void)
  {
 -	atomic_notifier_chain_register(&panic_notifier_list, &xen_panic_block);
  	return 0;
  }
  
* Unmerged path arch/x86/xen/enlighten_hvm.c
* Unmerged path arch/x86/xen/enlighten_pv.c
* Unmerged path arch/x86/xen/smp_hvm.c
* Unmerged path arch/x86/xen/enlighten.c
* Unmerged path arch/x86/xen/enlighten_hvm.c
* Unmerged path arch/x86/xen/enlighten_pv.c
* Unmerged path arch/x86/xen/smp_hvm.c
diff --git a/arch/x86/xen/xen-ops.h b/arch/x86/xen/xen-ops.h
index 774e39171c8c..b98756d5c2f4 100644
--- a/arch/x86/xen/xen-ops.h
+++ b/arch/x86/xen/xen-ops.h
@@ -60,6 +60,7 @@ irqreturn_t xen_debug_interrupt(int irq, void *dev_id);
 bool xen_vcpu_stolen(int vcpu);
 
 void xen_vcpu_setup(int cpu);
+void xen_vcpu_info_reset(int cpu);
 void xen_setup_vcpu_info_placement(void);
 
 #ifdef CONFIG_SMP
