blk-mq: make driver tag failure path easier to follow

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit 807b10417b23f1e1a35fccc7ede2c3886d39c303
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/807b1041.failed

Minor cleanup that makes it easier to figure out what's going on in the
driver tag allocation failure path of blk_mq_dispatch_rq_list().

	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 807b10417b23f1e1a35fccc7ede2c3886d39c303)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq.c
diff --cc block/blk-mq.c
index 1b06c94aa73d,b53ffcff2cec..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -846,6 -995,26 +846,29 @@@ bool blk_mq_dispatch_rq_list(struct blk
  		struct blk_mq_queue_data bd;
  
  		rq = list_first_entry(list, struct request, queuelist);
++<<<<<<< HEAD
++=======
+ 		if (!blk_mq_get_driver_tag(rq, &hctx, false)) {
+ 			if (!queued && reorder_tags_to_front(list))
+ 				continue;
+ 
+ 			/*
+ 			 * The initial allocation attempt failed, so we need to
+ 			 * rerun the hardware queue when a tag is freed.
+ 			 */
+ 			if (!blk_mq_dispatch_wait_add(hctx))
+ 				break;
+ 
+ 			/*
+ 			 * It's possible that a tag was freed in the window
+ 			 * between the allocation failure and adding the
+ 			 * hardware queue to the wait queue.
+ 			 */
+ 			if (!blk_mq_get_driver_tag(rq, &hctx, false))
+ 				break;
+ 		}
+ 
++>>>>>>> 807b10417b23 (blk-mq: make driver tag failure path easier to follow)
  		list_del_init(&rq->queuelist);
  
  		bd.rq = rq;
* Unmerged path block/blk-mq.c
