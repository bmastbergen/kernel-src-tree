x86/boot/KASLR: Rename process_e820_entry() into process_mem_region()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Baoquan He <bhe@redhat.com>
commit 27aac20574110abfd594175a668dc58b23b2b14a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/27aac205.failed

Now process_e820_entry() is not limited to e820 entry processing, rename
it to process_mem_region(). And adjust the code comment accordingly.

	Signed-off-by: Baoquan He <bhe@redhat.com>
	Acked-by: Kees Cook <keescook@chromium.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: fanc.fnst@cn.fujitsu.com
	Cc: izumi.taku@jp.fujitsu.com
	Cc: matt@codeblueprint.co.uk
	Cc: thgarnie@google.com
Link: http://lkml.kernel.org/r/1499603862-11516-4-git-send-email-bhe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 27aac20574110abfd594175a668dc58b23b2b14a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/boot/compressed/kaslr.c
diff --cc arch/x86/boot/compressed/kaslr.c
index b93f968ac8d4,99c7194f7ea6..000000000000
--- a/arch/x86/boot/compressed/kaslr.c
+++ b/arch/x86/boot/compressed/kaslr.c
@@@ -479,7 -479,7 +479,11 @@@ static unsigned long slots_fetch_random
  	return 0;
  }
  
++<<<<<<< HEAD
 +static void process_e820_entry(struct e820entry *entry,
++=======
+ static void process_mem_region(struct mem_vector *entry,
++>>>>>>> 27aac2057411 (x86/boot/KASLR: Rename process_e820_entry() into process_mem_region())
  			       unsigned long minimum,
  			       unsigned long image_size)
  {
@@@ -521,8 -517,8 +525,13 @@@
  		/* Potentially raise address to meet alignment needs. */
  		region.start = ALIGN(region.start, CONFIG_PHYSICAL_ALIGN);
  
++<<<<<<< HEAD
 +		/* Did we raise the address above this e820 region? */
 +		if (region.start > cur_entry.addr + cur_entry.size)
++=======
+ 		/* Did we raise the address above the passed in memory entry? */
+ 		if (region.start > cur_entry.start + cur_entry.size)
++>>>>>>> 27aac2057411 (x86/boot/KASLR: Rename process_e820_entry() into process_mem_region())
  			return;
  
  		/* Reduce size by any delta from the original address. */
@@@ -562,6 -558,29 +571,32 @@@
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static void process_e820_entries(unsigned long minimum,
+ 				 unsigned long image_size)
+ {
+ 	int i;
+ 	struct mem_vector region;
+ 	struct boot_e820_entry *entry;
+ 
+ 	/* Verify potential e820 positions, appending to slots list. */
+ 	for (i = 0; i < boot_params->e820_entries; i++) {
+ 		entry = &boot_params->e820_table[i];
+ 		/* Skip non-RAM entries. */
+ 		if (entry->type != E820_TYPE_RAM)
+ 			continue;
+ 		region.start = entry->addr;
+ 		region.size = entry->size;
+ 		process_mem_region(&region, minimum, image_size);
+ 		if (slot_area_index == MAX_SLOT_AREA) {
+ 			debug_putstr("Aborted e820 scan (slot_areas full)!\n");
+ 			break;
+ 		}
+ 	}
+ }
+ 
++>>>>>>> 27aac2057411 (x86/boot/KASLR: Rename process_e820_entry() into process_mem_region())
  static unsigned long find_random_phys_addr(unsigned long minimum,
  					   unsigned long image_size)
  {
* Unmerged path arch/x86/boot/compressed/kaslr.c
