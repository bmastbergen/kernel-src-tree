sched: place state, next_sched and gso_skb in same cacheline again

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Florian Westphal <fw@strlen.de>
commit c8945043cdc687388b7a43fc6f474bddd9607e80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c8945043.failed

Earlier commits removed two members from struct Qdisc which places
next_sched/gso_skb into a different cacheline than ->state.

This restores the struct layout to what it was before the removal.
Move the two members, then add an annotation so they all reside in the
same cacheline.

This adds a 16 byte hole after cpu_qstats.

The hole could be closed but as it doesn't decrease total struct size just
do it this way.

	Reported-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c8945043cdc687388b7a43fc6f474bddd9607e80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/sch_generic.h
diff --cc include/net/sch_generic.h
index 8b49c889ccf1,49534e28824b..000000000000
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@@ -75,8 -68,9 +75,14 @@@ struct Qdisc 
  	struct netdev_queue	*dev_queue;
  
  	struct gnet_stats_rate_est64	rate_est;
++<<<<<<< HEAD
 +	struct Qdisc		*next_sched;
 +	struct sk_buff		*gso_skb;
++=======
+ 	struct gnet_stats_basic_cpu __percpu *cpu_bstats;
+ 	struct gnet_stats_queue	__percpu *cpu_qstats;
+ 
++>>>>>>> c8945043cdc6 (sched: place state, next_sched and gso_skb in same cacheline again)
  	/*
  	 * For performance sake on SMP, we put highly modified fields at the end
  	 */
* Unmerged path include/net/sch_generic.h
