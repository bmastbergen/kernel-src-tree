ibmvnic: fix firmware version when no firmware level has been provided by the VIOS server

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Desnes Augusto Nunes do Rosario <desnesn@linux.vnet.ibm.com>
commit a107311d7fdf6b826f3737c4a90fd0e0046e7a3a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a107311d.failed

Older versions of VIOS servers do not send the firmware level in the VPD
buffer for the ibmvnic driver. Thus, not only the current message is mis-
leading but the firmware version in the ethtool will be NULL. Therefore,
this patch fixes the firmware string and its warning.

Fixes: 4e6759be28e4 ("ibmvnic: Feature implementation of VPD for the ibmvnic driver")
	Signed-off-by: Desnes A. Nunes do Rosario <desnesn@linux.vnet.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a107311d7fdf6b826f3737c4a90fd0e0046e7a3a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/ibm/ibmvnic.c
diff --cc drivers/net/ethernet/ibm/ibmvnic.c
index 569bb2b68f4b,7f0bea2104ab..000000000000
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@@ -2303,6 -3266,77 +2303,80 @@@ static void send_cap_queries(struct ibm
  	ibmvnic_send_crq(adapter, &crq);
  }
  
++<<<<<<< HEAD
++=======
+ static void handle_vpd_size_rsp(union ibmvnic_crq *crq,
+ 				struct ibmvnic_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->vdev->dev;
+ 
+ 	if (crq->get_vpd_size_rsp.rc.code) {
+ 		dev_err(dev, "Error retrieving VPD size, rc=%x\n",
+ 			crq->get_vpd_size_rsp.rc.code);
+ 		complete(&adapter->fw_done);
+ 		return;
+ 	}
+ 
+ 	adapter->vpd->len = be64_to_cpu(crq->get_vpd_size_rsp.len);
+ 	complete(&adapter->fw_done);
+ }
+ 
+ static void handle_vpd_rsp(union ibmvnic_crq *crq,
+ 			   struct ibmvnic_adapter *adapter)
+ {
+ 	struct device *dev = &adapter->vdev->dev;
+ 	unsigned char *substr = NULL, *ptr = NULL;
+ 	u8 fw_level_len = 0;
+ 
+ 	memset(adapter->fw_version, 0, 32);
+ 
+ 	dma_unmap_single(dev, adapter->vpd->dma_addr, adapter->vpd->len,
+ 			 DMA_FROM_DEVICE);
+ 
+ 	if (crq->get_vpd_rsp.rc.code) {
+ 		dev_err(dev, "Error retrieving VPD from device, rc=%x\n",
+ 			crq->get_vpd_rsp.rc.code);
+ 		goto complete;
+ 	}
+ 
+ 	/* get the position of the firmware version info
+ 	 * located after the ASCII 'RM' substring in the buffer
+ 	 */
+ 	substr = strnstr(adapter->vpd->buff, "RM", adapter->vpd->len);
+ 	if (!substr) {
+ 		dev_info(dev, "Warning - No FW level has been provided in the VPD buffer by the VIOS Server\n");
+ 		ptr = strncpy((char *)adapter->fw_version, "N/A",
+ 			      3 * sizeof(char));
+ 		if (!ptr)
+ 			dev_err(dev, "Failed to inform that firmware version is unavailable to the adapter\n");
+ 		goto complete;
+ 	}
+ 
+ 	/* get length of firmware level ASCII substring */
+ 	if ((substr + 2) < (adapter->vpd->buff + adapter->vpd->len)) {
+ 		fw_level_len = *(substr + 2);
+ 	} else {
+ 		dev_info(dev, "Length of FW substr extrapolated VDP buff\n");
+ 		goto complete;
+ 	}
+ 
+ 	/* copy firmware version string from vpd into adapter */
+ 	if ((substr + 3 + fw_level_len) <
+ 	    (adapter->vpd->buff + adapter->vpd->len)) {
+ 		ptr = strncpy((char *)adapter->fw_version,
+ 			      substr + 3, fw_level_len);
+ 
+ 		if (!ptr)
+ 			dev_err(dev, "Failed to isolate FW level string\n");
+ 	} else {
+ 		dev_info(dev, "FW substr extrapolated VPD buff\n");
+ 	}
+ 
+ complete:
+ 	complete(&adapter->fw_done);
+ }
+ 
++>>>>>>> a107311d7fdf (ibmvnic: fix firmware version when no firmware level has been provided by the VIOS server)
  static void handle_query_ip_offload_rsp(struct ibmvnic_adapter *adapter)
  {
  	struct device *dev = &adapter->vdev->dev;
* Unmerged path drivers/net/ethernet/ibm/ibmvnic.c
