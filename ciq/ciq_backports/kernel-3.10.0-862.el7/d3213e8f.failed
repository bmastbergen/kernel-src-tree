tracing: add __print_flags_u64()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Ross Zwisler <ross.zwisler@linux.intel.com>
commit d3213e8fd4b0f18dfd438268ff480406ba743abb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d3213e8f.failed

Patch series "DAX tracepoints, mm argument simplification", v4.

This contains both my DAX tracepoint code and Dave Jiang's MM argument
simplifications.  Dave's code was written with my tracepoint code as a
baseline, so it seemed simplest to keep them together in a single series.

This patch (of 7):

Add __print_flags_u64() and the helper trace_print_flags_seq_u64() in the
same spirit as __print_symbolic_u64() and trace_print_symbols_seq_u64().
These functions allow us to print symbols associated with flags that are
64 bits wide even on 32 bit machines.

These will be used by the DAX code so that we can print the flags set in a
pfn_t such as PFN_SG_CHAIN, PFN_SG_LAST, PFN_DEV and PFN_MAP.

Without this new function I was getting errors like the following when
compiling for i386:

  include/linux/pfn_t.h:13:22: warning: large integer implicitly truncated to unsigned type [-Woverflow]
   #define PFN_SG_CHAIN (1ULL << (BITS_PER_LONG_LONG - 1))
    ^

Link: http://lkml.kernel.org/r/1484085142-2297-2-git-send-email-ross.zwisler@linux.intel.com
	Signed-off-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Reviewed-by: Steven Rostedt <rostedt@goodmis.org>
	Cc: Dave Chinner <david@fromorbit.com>
	Cc: Dave Jiang <dave.jiang@intel.com>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Matthew Wilcox <mawilcox@microsoft.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d3213e8fd4b0f18dfd438268ff480406ba743abb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/ftrace_event.h
#	kernel/trace/trace_output.c
diff --cc include/linux/ftrace_event.h
index 3f9fb6f15d6a,0af63c4381b9..000000000000
--- a/include/linux/ftrace_event.h
+++ b/include/linux/ftrace_event.h
@@@ -11,28 -13,23 +11,38 @@@ struct trace_array
  struct trace_buffer;
  struct tracer;
  struct dentry;
 -struct bpf_prog;
  
 -const char *trace_print_flags_seq(struct trace_seq *p, const char *delim,
 -				  unsigned long flags,
 -				  const struct trace_print_flags *flag_array);
 +struct trace_print_flags {
 +	unsigned long		mask;
 +	const char		*name;
 +};
 +
 +struct trace_print_flags_u64 {
 +	unsigned long long	mask;
 +	const char		*name;
 +};
  
 -const char *trace_print_symbols_seq(struct trace_seq *p, unsigned long val,
 -				    const struct trace_print_flags *symbol_array);
 +const char *ftrace_print_flags_seq(struct trace_seq *p, const char *delim,
 +				   unsigned long flags,
 +				   const struct trace_print_flags *flag_array);
 +
 +const char *ftrace_print_symbols_seq(struct trace_seq *p, unsigned long val,
 +				     const struct trace_print_flags *symbol_array);
  
  #if BITS_PER_LONG == 32
++<<<<<<< HEAD:include/linux/ftrace_event.h
 +const char *ftrace_print_symbols_seq_u64(struct trace_seq *p,
 +					 unsigned long long val,
 +					 const struct trace_print_flags_u64
++=======
+ const char *trace_print_flags_seq_u64(struct trace_seq *p, const char *delim,
+ 		      unsigned long long flags,
+ 		      const struct trace_print_flags_u64 *flag_array);
+ 
+ const char *trace_print_symbols_seq_u64(struct trace_seq *p,
+ 					unsigned long long val,
+ 					const struct trace_print_flags_u64
++>>>>>>> d3213e8fd4b0 (tracing: add __print_flags_u64()):include/linux/trace_events.h
  								 *symbol_array);
  #endif
  
diff --cc kernel/trace/trace_output.c
index bdc9e6d81c41,070866c32eb9..000000000000
--- a/kernel/trace/trace_output.c
+++ b/kernel/trace/trace_output.c
@@@ -364,7 -124,45 +364,49 @@@ EXPORT_SYMBOL(ftrace_print_symbols_seq)
  
  #if BITS_PER_LONG == 32
  const char *
++<<<<<<< HEAD
 +ftrace_print_symbols_seq_u64(struct trace_seq *p, unsigned long long val,
++=======
+ trace_print_flags_seq_u64(struct trace_seq *p, const char *delim,
+ 		      unsigned long long flags,
+ 		      const struct trace_print_flags_u64 *flag_array)
+ {
+ 	unsigned long long mask;
+ 	const char *str;
+ 	const char *ret = trace_seq_buffer_ptr(p);
+ 	int i, first = 1;
+ 
+ 	for (i = 0;  flag_array[i].name && flags; i++) {
+ 
+ 		mask = flag_array[i].mask;
+ 		if ((flags & mask) != mask)
+ 			continue;
+ 
+ 		str = flag_array[i].name;
+ 		flags &= ~mask;
+ 		if (!first && delim)
+ 			trace_seq_puts(p, delim);
+ 		else
+ 			first = 0;
+ 		trace_seq_puts(p, str);
+ 	}
+ 
+ 	/* check for left over flags */
+ 	if (flags) {
+ 		if (!first && delim)
+ 			trace_seq_puts(p, delim);
+ 		trace_seq_printf(p, "0x%llx", flags);
+ 	}
+ 
+ 	trace_seq_putc(p, 0);
+ 
+ 	return ret;
+ }
+ EXPORT_SYMBOL(trace_print_flags_seq_u64);
+ 
+ const char *
+ trace_print_symbols_seq_u64(struct trace_seq *p, unsigned long long val,
++>>>>>>> d3213e8fd4b0 (tracing: add __print_flags_u64())
  			 const struct trace_print_flags_u64 *symbol_array)
  {
  	int i;
* Unmerged path include/linux/ftrace_event.h
diff --git a/include/trace/ftrace.h b/include/trace/ftrace.h
index 814d875e9189..2230341e2292 100644
--- a/include/trace/ftrace.h
+++ b/include/trace/ftrace.h
@@ -225,8 +225,16 @@
 		ftrace_print_symbols_seq(p, value, symbols);		\
 	})
 
+#undef __print_flags_u64
 #undef __print_symbolic_u64
 #if BITS_PER_LONG == 32
+#define __print_flags_u64(flag, delim, flag_array...)			\
+	({								\
+		static const struct trace_print_flags_u64 __flags[] =	\
+			{ flag_array, { -1, NULL } };			\
+		trace_print_flags_seq_u64(p, delim, flag, __flags);	\
+	})
+
 #define __print_symbolic_u64(value, symbol_array...)			\
 	({								\
 		static const struct trace_print_flags_u64 symbols[] =	\
@@ -234,6 +242,9 @@
 		ftrace_print_symbols_seq_u64(p, value, symbols);	\
 	})
 #else
+#define __print_flags_u64(flag, delim, flag_array...)			\
+			__print_flags(flag, delim, flag_array)
+
 #define __print_symbolic_u64(value, symbol_array...)			\
 			__print_symbolic(value, symbol_array)
 #endif
* Unmerged path kernel/trace/trace_output.c
