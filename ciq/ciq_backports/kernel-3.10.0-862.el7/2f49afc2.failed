cpufreq: intel_pstate: Drop struct cpu_defaults

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Drop struct cpu_defaults (Prarit Bhargava) [1465349]
Rebuild_FUZZ: 89.41%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 2f49afc2a6f6ec4bacb2e50d5482ecc111b41ab5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2f49afc2.failed

The cpu_defaults structure is redundant, because it only contains
one member of type struct pstate_funcs which can be used directly
instead of struct cpu_defaults.

For this reason, drop struct cpu_defaults, use struct pstate_funcs
directly instead of it where applicable and rename all of the
variables of that type accordingly.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 2f49afc2a6f6ec4bacb2e50d5482ecc111b41ab5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index b6f8db18a31a,f8496faa1085..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -244,27 -322,27 +244,30 @@@ struct pstate_funcs 
  	int (*get_min)(void);
  	int (*get_turbo)(void);
  	int (*get_scaling)(void);
 -	u64 (*get_val)(struct cpudata*, int pstate);
 +	void (*set)(struct cpudata*, int pstate);
  	void (*get_vid)(struct cpudata *);
 -	void (*update_util)(struct update_util_data *data, u64 time,
 -			    unsigned int flags);
 +	int32_t (*get_target_pstate)(struct cpudata *);
  };
  
 -static struct pstate_funcs pstate_funcs __read_mostly;
 -static struct pstate_adjust_policy pid_params __read_mostly = {
 -	.sample_rate_ms = 10,
 -	.sample_rate_ns = 10 * NSEC_PER_MSEC,
 -	.deadband = 0,
 -	.setpoint = 97,
 -	.p_gain_pct = 20,
 -	.d_gain_pct = 0,
 -	.i_gain_pct = 0,
++<<<<<<< HEAD
 +/**
 + * struct cpu_defaults- Per CPU model default config data
 + * @pid_policy:	PID config data
 + * @funcs:		Callback function data
 + */
 +struct cpu_defaults {
 +	struct pstate_adjust_policy pid_policy;
 +	struct pstate_funcs funcs;
  };
  
 -static int hwp_active __read_mostly;
 -static bool per_cpu_limits __read_mostly;
 +static inline int32_t get_target_pstate_use_performance(struct cpudata *cpu);
 +static inline int32_t get_target_pstate_use_cpu_load(struct cpudata *cpu);
  
 -static struct cpufreq_driver *intel_pstate_driver __read_mostly;
 +static struct pstate_adjust_policy pid_params __read_mostly;
++=======
++>>>>>>> 2f49afc2a6f6 (cpufreq: intel_pstate: Drop struct cpu_defaults)
 +static struct pstate_funcs pstate_funcs __read_mostly;
 +static int hwp_active __read_mostly;
  
  #ifdef CONFIG_ACPI
  static bool acpi_ppc;
@@@ -1312,58 -1743,148 +1315,169 @@@ static inline void intel_pstate_adjust_
  		sample->mperf,
  		sample->aperf,
  		sample->tsc,
 -		get_avg_frequency(cpu),
 -		fp_toint(cpu->iowait_boost * 100));
 +		sample->freq);
  }
  
 -static void intel_pstate_update_util_hwp(struct update_util_data *data,
 -					 u64 time, unsigned int flags)
 +static void intel_hwp_timer_func(unsigned long __data)
  {
 -	struct cpudata *cpu = container_of(data, struct cpudata, update_util);
 -	u64 delta_ns = time - cpu->sample.time;
 +	struct cpudata *cpu = (struct cpudata *) __data;
  
 -	if ((s64)delta_ns >= INTEL_PSTATE_HWP_SAMPLING_INTERVAL)
 -		intel_pstate_sample(cpu, time);
 +	intel_pstate_sample(cpu);
 +	intel_hwp_set_sample_time(cpu);
  }
  
 -static void intel_pstate_update_util_pid(struct update_util_data *data,
 -					 u64 time, unsigned int flags)
 +static void intel_pstate_timer_func(unsigned long __data)
  {
 -	struct cpudata *cpu = container_of(data, struct cpudata, update_util);
 -	u64 delta_ns = time - cpu->sample.time;
 +	struct cpudata *cpu = (struct cpudata *) __data;
  
 -	if ((s64)delta_ns < pid_params.sample_rate_ns)
 -		return;
 +	intel_pstate_sample(cpu);
  
 -	if (intel_pstate_sample(cpu, time)) {
 -		int target_pstate;
 +	intel_pstate_adjust_busy_pstate(cpu);
  
 -		target_pstate = get_target_pstate_use_performance(cpu);
 -		intel_pstate_adjust_pstate(cpu, target_pstate);
 -	}
 +	intel_pstate_set_sample_time(cpu);
  }
  
++<<<<<<< HEAD
++=======
+ static void intel_pstate_update_util(struct update_util_data *data, u64 time,
+ 				     unsigned int flags)
+ {
+ 	struct cpudata *cpu = container_of(data, struct cpudata, update_util);
+ 	u64 delta_ns;
+ 
+ 	if (flags & SCHED_CPUFREQ_IOWAIT) {
+ 		cpu->iowait_boost = int_tofp(1);
+ 	} else if (cpu->iowait_boost) {
+ 		/* Clear iowait_boost if the CPU may have been idle. */
+ 		delta_ns = time - cpu->last_update;
+ 		if (delta_ns > TICK_NSEC)
+ 			cpu->iowait_boost = 0;
+ 	}
+ 	cpu->last_update = time;
+ 	delta_ns = time - cpu->sample.time;
+ 	if ((s64)delta_ns < INTEL_PSTATE_DEFAULT_SAMPLING_INTERVAL)
+ 		return;
+ 
+ 	if (intel_pstate_sample(cpu, time)) {
+ 		int target_pstate;
+ 
+ 		target_pstate = get_target_pstate_use_cpu_load(cpu);
+ 		intel_pstate_adjust_pstate(cpu, target_pstate);
+ 	}
+ }
+ 
+ static struct pstate_funcs core_funcs = {
+ 	.get_max = core_get_max_pstate,
+ 	.get_max_physical = core_get_max_pstate_physical,
+ 	.get_min = core_get_min_pstate,
+ 	.get_turbo = core_get_turbo_pstate,
+ 	.get_scaling = core_get_scaling,
+ 	.get_val = core_get_val,
+ 	.update_util = intel_pstate_update_util_pid,
+ };
+ 
+ static const struct pstate_funcs silvermont_funcs = {
+ 	.get_max = atom_get_max_pstate,
+ 	.get_max_physical = atom_get_max_pstate,
+ 	.get_min = atom_get_min_pstate,
+ 	.get_turbo = atom_get_turbo_pstate,
+ 	.get_val = atom_get_val,
+ 	.get_scaling = silvermont_get_scaling,
+ 	.get_vid = atom_get_vid,
+ 	.update_util = intel_pstate_update_util,
+ };
+ 
+ static const struct pstate_funcs airmont_funcs = {
+ 	.get_max = atom_get_max_pstate,
+ 	.get_max_physical = atom_get_max_pstate,
+ 	.get_min = atom_get_min_pstate,
+ 	.get_turbo = atom_get_turbo_pstate,
+ 	.get_val = atom_get_val,
+ 	.get_scaling = airmont_get_scaling,
+ 	.get_vid = atom_get_vid,
+ 	.update_util = intel_pstate_update_util,
+ };
+ 
+ static const struct pstate_funcs knl_funcs = {
+ 	.get_max = core_get_max_pstate,
+ 	.get_max_physical = core_get_max_pstate_physical,
+ 	.get_min = core_get_min_pstate,
+ 	.get_turbo = knl_get_turbo_pstate,
+ 	.get_scaling = core_get_scaling,
+ 	.get_val = core_get_val,
+ 	.update_util = intel_pstate_update_util_pid,
+ };
+ 
+ static const struct pstate_funcs bxt_funcs = {
+ 	.get_max = core_get_max_pstate,
+ 	.get_max_physical = core_get_max_pstate_physical,
+ 	.get_min = core_get_min_pstate,
+ 	.get_turbo = core_get_turbo_pstate,
+ 	.get_scaling = core_get_scaling,
+ 	.get_val = core_get_val,
+ 	.update_util = intel_pstate_update_util,
+ };
+ 
++>>>>>>> 2f49afc2a6f6 (cpufreq: intel_pstate: Drop struct cpu_defaults)
  #define ICPU(model, policy) \
  	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_APERFMPERF,\
  			(unsigned long)&policy }
  
  static const struct x86_cpu_id intel_pstate_cpu_ids[] = {
++<<<<<<< HEAD
 +	ICPU(INTEL_FAM6_SANDYBRIDGE, 		core_params),
 +	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		core_params),
 +	ICPU(INTEL_FAM6_ATOM_SILVERMONT1,	atom_params),
 +	ICPU(INTEL_FAM6_IVYBRIDGE,		core_params),
 +	ICPU(INTEL_FAM6_HASWELL_CORE,		core_params),
 +	ICPU(INTEL_FAM6_BROADWELL_CORE,		core_params),
 +	ICPU(INTEL_FAM6_IVYBRIDGE_X,		core_params),
 +	ICPU(INTEL_FAM6_HASWELL_X,		core_params),
 +	ICPU(INTEL_FAM6_HASWELL_ULT,		core_params),
 +	ICPU(INTEL_FAM6_HASWELL_GT3E,		core_params),
 +	ICPU(INTEL_FAM6_BROADWELL_GT3E,		core_params),
 +	ICPU(INTEL_FAM6_SKYLAKE_MOBILE,		core_params),
 +	ICPU(INTEL_FAM6_BROADWELL_X,		core_params),
 +	ICPU(INTEL_FAM6_SKYLAKE_DESKTOP,	core_params),
 +	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	core_params),
 +	ICPU(INTEL_FAM6_XEON_PHI_KNL,		knl_params),
 +	ICPU(INTEL_FAM6_XEON_PHI_KNM,		knl_params),
++=======
+ 	ICPU(INTEL_FAM6_SANDYBRIDGE, 		core_funcs),
+ 	ICPU(INTEL_FAM6_SANDYBRIDGE_X,		core_funcs),
+ 	ICPU(INTEL_FAM6_ATOM_SILVERMONT1,	silvermont_funcs),
+ 	ICPU(INTEL_FAM6_IVYBRIDGE,		core_funcs),
+ 	ICPU(INTEL_FAM6_HASWELL_CORE,		core_funcs),
+ 	ICPU(INTEL_FAM6_BROADWELL_CORE,		core_funcs),
+ 	ICPU(INTEL_FAM6_IVYBRIDGE_X,		core_funcs),
+ 	ICPU(INTEL_FAM6_HASWELL_X,		core_funcs),
+ 	ICPU(INTEL_FAM6_HASWELL_ULT,		core_funcs),
+ 	ICPU(INTEL_FAM6_HASWELL_GT3E,		core_funcs),
+ 	ICPU(INTEL_FAM6_BROADWELL_GT3E,		core_funcs),
+ 	ICPU(INTEL_FAM6_ATOM_AIRMONT,		airmont_funcs),
+ 	ICPU(INTEL_FAM6_SKYLAKE_MOBILE,		core_funcs),
+ 	ICPU(INTEL_FAM6_BROADWELL_X,		core_funcs),
+ 	ICPU(INTEL_FAM6_SKYLAKE_DESKTOP,	core_funcs),
+ 	ICPU(INTEL_FAM6_BROADWELL_XEON_D,	core_funcs),
+ 	ICPU(INTEL_FAM6_XEON_PHI_KNL,		knl_funcs),
+ 	ICPU(INTEL_FAM6_XEON_PHI_KNM,		knl_funcs),
+ 	ICPU(INTEL_FAM6_ATOM_GOLDMONT,		bxt_funcs),
++>>>>>>> 2f49afc2a6f6 (cpufreq: intel_pstate: Drop struct cpu_defaults)
  	{}
  };
  MODULE_DEVICE_TABLE(x86cpu, intel_pstate_cpu_ids);
  
++<<<<<<< HEAD
 +static const struct x86_cpu_id intel_pstate_cpu_oob_ids[] = {
 +	ICPU(INTEL_FAM6_BROADWELL_XEON_D, core_params),
 +	ICPU(INTEL_FAM6_BROADWELL_X, core_params),
 +	ICPU(INTEL_FAM6_SKYLAKE_X, core_params),
++=======
+ static const struct x86_cpu_id intel_pstate_cpu_oob_ids[] __initconst = {
+ 	ICPU(INTEL_FAM6_BROADWELL_XEON_D, core_funcs),
+ 	ICPU(INTEL_FAM6_BROADWELL_X, core_funcs),
+ 	ICPU(INTEL_FAM6_SKYLAKE_X, core_funcs),
++>>>>>>> 2f49afc2a6f6 (cpufreq: intel_pstate: Drop struct cpu_defaults)
  	{}
  };
  
@@@ -1748,21 -2557,26 +1862,42 @@@ static int __init intel_pstate_init(voi
  	if (no_load)
  		return -ENODEV;
  
++<<<<<<< HEAD
 +	if (x86_match_cpu(hwp_support_ids) && !no_hwp) {
 +		copy_cpu_funcs(&core_params.funcs);
 +		hwp_active++;
 +		goto hwp_cpu_matched;
++=======
+ 	if (x86_match_cpu(hwp_support_ids)) {
+ 		copy_cpu_funcs(&core_funcs);
+ 		if (no_hwp) {
+ 			pstate_funcs.update_util = intel_pstate_update_util;
+ 		} else {
+ 			hwp_active++;
+ 			intel_pstate.attr = hwp_cpufreq_attrs;
+ 			pstate_funcs.update_util = intel_pstate_update_util_hwp;
+ 			goto hwp_cpu_matched;
+ 		}
+ 	} else {
+ 		const struct x86_cpu_id *id;
+ 
+ 		id = x86_match_cpu(intel_pstate_cpu_ids);
+ 		if (!id)
+ 			return -ENODEV;
+ 
+ 		copy_cpu_funcs((struct pstate_funcs *)id->driver_data);
++>>>>>>> 2f49afc2a6f6 (cpufreq: intel_pstate: Drop struct cpu_defaults)
  	}
  
 +	id = x86_match_cpu(intel_pstate_cpu_ids);
 +	if (!id)
 +		return -ENODEV;
 +
 +	cpu_info = (struct cpu_defaults *)id->driver_data;
 +
 +	copy_pid_params(&cpu_info->pid_policy);
 +	copy_cpu_funcs(&cpu_info->funcs);
 +
  	if (intel_pstate_msrs_not_valid())
  		return -ENODEV;
  
* Unmerged path drivers/cpufreq/intel_pstate.c
