ovl: check if upperdir fs supports O_TMPFILE

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Amir Goldstein <amir73il@gmail.com>
commit e7f52429b4a5b2e3224948d1737eb264c8f7e15f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e7f52429.failed

This is needed for choosing between concurrent copyup
using O_TMPFILE and legacy copyup using workdir+rename.

	Signed-off-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit e7f52429b4a5b2e3224948d1737eb264c8f7e15f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/ovl_entry.h
#	fs/overlayfs/super.c
diff --cc fs/overlayfs/super.c
index 0f0882c84939,ff05065b510f..000000000000
--- a/fs/overlayfs/super.c
+++ b/fs/overlayfs/super.c
@@@ -1356,13 -832,20 +1358,25 @@@ static int ovl_fill_super(struct super_
  				goto out_put_workdir;
  
  			/*
 -			 * We allowed this configuration and don't want to
 -			 * break users over kernel upgrade. So warn instead
 -			 * of erroring out.
 +			 * Warn instead of error to avoid breaking previously
 +			 * working configurations over upgrade. If d_type
 +			 * is not supported, whiteouts will become visible
 +			 * to user space.
  			 */
  			if (!err)
++<<<<<<< HEAD
 +				pr_warn("overlayfs: upper fs needs to support d_type. This is an invalid configuration.\n");
++=======
+ 				pr_warn("overlayfs: upper fs needs to support d_type.\n");
+ 
+ 			/* Check if upper/work fs supports O_TMPFILE */
+ 			temp = ovl_do_tmpfile(ufs->workdir, S_IFREG | 0);
+ 			ufs->tmpfile = !IS_ERR(temp);
+ 			if (ufs->tmpfile)
+ 				dput(temp);
+ 			else
+ 				pr_warn("overlayfs: upper fs does not support tmpfile.\n");
++>>>>>>> e7f52429b4a5 (ovl: check if upperdir fs supports O_TMPFILE)
  		}
  	}
  
* Unmerged path fs/overlayfs/ovl_entry.h
diff --git a/fs/overlayfs/overlayfs.h b/fs/overlayfs/overlayfs.h
index 952ccab31629..634f7f74b3b3 100644
--- a/fs/overlayfs/overlayfs.h
+++ b/fs/overlayfs/overlayfs.h
@@ -131,6 +131,15 @@ static inline int ovl_do_whiteout(struct inode *dir, struct dentry *dentry)
 	return err;
 }
 
+static inline struct dentry *ovl_do_tmpfile(struct dentry *dentry, umode_t mode)
+{
+	struct dentry *ret = vfs_tmpfile(dentry, mode, 0);
+	int err = IS_ERR(ret) ? PTR_ERR(ret) : 0;
+
+	pr_debug("tmpfile(%pd2, 0%o) = %i\n", dentry, mode, err);
+	return ret;
+}
+
 static inline struct inode *ovl_inode_real(struct inode *inode, bool *is_upper)
 {
 	unsigned long x = (unsigned long) READ_ONCE(inode->i_private);
* Unmerged path fs/overlayfs/ovl_entry.h
* Unmerged path fs/overlayfs/super.c
