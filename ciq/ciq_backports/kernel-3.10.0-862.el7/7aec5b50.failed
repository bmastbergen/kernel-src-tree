cpufreq: intel_pstate: Set HWP sampling interval once

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Set HWP sampling interval once (Prarit Bhargava) [1465349]
Rebuild_FUZZ: 90.72%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 7aec5b50e97dd3e2e6ad8a87ccfd62ba8f49a105
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7aec5b50.failed

In the HWP enabled case pid_params.sample_rate_ns only needs to be
updated once, because it is global, so do that when setting hwp_active
instead of doing it during the initialization of every CPU.

Moreover, pid_params.sample_rate_ms is never used if HWP is enabled,
so do not update it at all then.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 7aec5b50e97dd3e2e6ad8a87ccfd62ba8f49a105)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index b6f8db18a31a,b631ab02f170..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -1748,21 -2554,28 +1748,42 @@@ static int __init intel_pstate_init(voi
  	if (no_load)
  		return -ENODEV;
  
 -	if (x86_match_cpu(hwp_support_ids)) {
 +	if (x86_match_cpu(hwp_support_ids) && !no_hwp) {
  		copy_cpu_funcs(&core_params.funcs);
++<<<<<<< HEAD
 +		hwp_active++;
 +		goto hwp_cpu_matched;
++=======
+ 		if (no_hwp) {
+ 			pstate_funcs.get_target_pstate = get_target_pstate_use_cpu_load;
+ 		} else {
+ 			hwp_active++;
+ 			intel_pstate.attr = hwp_cpufreq_attrs;
+ 			pid_params.sample_rate_ns = 50 * NSEC_PER_MSEC;
+ 			goto hwp_cpu_matched;
+ 		}
+ 	} else {
+ 		const struct x86_cpu_id *id;
+ 		struct cpu_defaults *cpu_def;
+ 
+ 		id = x86_match_cpu(intel_pstate_cpu_ids);
+ 		if (!id)
+ 			return -ENODEV;
+ 
+ 		cpu_def = (struct cpu_defaults *)id->driver_data;
+ 		copy_cpu_funcs(&cpu_def->funcs);
++>>>>>>> 7aec5b50e97d (cpufreq: intel_pstate: Set HWP sampling interval once)
  	}
  
 +	id = x86_match_cpu(intel_pstate_cpu_ids);
 +	if (!id)
 +		return -ENODEV;
 +
 +	cpu_info = (struct cpu_defaults *)id->driver_data;
 +
 +	copy_pid_params(&cpu_info->pid_policy);
 +	copy_cpu_funcs(&cpu_info->funcs);
 +
  	if (intel_pstate_msrs_not_valid())
  		return -ENODEV;
  
* Unmerged path drivers/cpufreq/intel_pstate.c
