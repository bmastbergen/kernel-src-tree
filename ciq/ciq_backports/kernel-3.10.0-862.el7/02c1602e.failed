net: remove __napi_complete()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] remove __napi_complete() (Ivan Vecera) [1489406]
Rebuild_FUZZ: 90.57%
commit-author Eric Dumazet <edumazet@google.com>
commit 02c1602ee7b3e3d062c3eacd374d6a6e3a2ebb73
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/02c1602e.failed

All __napi_complete() callers have been converted to
use the more standard napi_complete_done(),
we can now remove this NAPI method for good.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 02c1602ee7b3e3d062c3eacd374d6a6e3a2ebb73)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/dev.c
diff --cc include/linux/netdevice.h
index f2e995a93118,014fbe256d55..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -471,11 -463,10 +471,15 @@@ static inline bool napi_reschedule(stru
  	return false;
  }
  
++<<<<<<< HEAD
 +void __napi_complete(struct napi_struct *n);
 +void napi_complete_done(struct napi_struct *n, int work_done);
++=======
+ bool napi_complete_done(struct napi_struct *n, int work_done);
++>>>>>>> 02c1602ee7b3 (net: remove __napi_complete())
  /**
   *	napi_complete - NAPI processing complete
 - *	@n: NAPI context
 + *	@n: napi context
   *
   * Mark NAPI processing as complete.
   * Consider using napi_complete_done() instead.
diff --cc net/core/dev.c
index 82a64f802cfd,404d2e6d5d32..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -4726,17 -4883,7 +4726,21 @@@ void __napi_schedule_irqoff(struct napi
  }
  EXPORT_SYMBOL(__napi_schedule_irqoff);
  
++<<<<<<< HEAD
 +void __napi_complete(struct napi_struct *n)
 +{
 +	BUG_ON(!test_bit(NAPI_STATE_SCHED, &n->state));
 +
 +	list_del_init(&n->poll_list);
 +	smp_mb__before_clear_bit();
 +	clear_bit(NAPI_STATE_SCHED, &n->state);
 +}
 +EXPORT_SYMBOL(__napi_complete);
 +
 +void napi_complete_done(struct napi_struct *n, int work_done)
++=======
+ bool napi_complete_done(struct napi_struct *n, int work_done)
++>>>>>>> 02c1602ee7b3 (net: remove __napi_complete())
  {
  	unsigned long flags;
  
@@@ -4759,14 -4909,14 +4763,17 @@@
  		else
  			napi_gro_flush(n, false);
  	}
- 	if (likely(list_empty(&n->poll_list))) {
- 		WARN_ON_ONCE(!test_and_clear_bit(NAPI_STATE_SCHED, &n->state));
- 	} else {
+ 	if (unlikely(!list_empty(&n->poll_list))) {
  		/* If n->poll_list is not empty, we need to mask irqs */
  		local_irq_save(flags);
- 		__napi_complete(n);
+ 		list_del_init(&n->poll_list);
  		local_irq_restore(flags);
  	}
++<<<<<<< HEAD
++=======
+ 	WARN_ON_ONCE(!test_and_clear_bit(NAPI_STATE_SCHED, &n->state));
+ 	return true;
++>>>>>>> 02c1602ee7b3 (net: remove __napi_complete())
  }
  EXPORT_SYMBOL(napi_complete_done);
  
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/dev.c
