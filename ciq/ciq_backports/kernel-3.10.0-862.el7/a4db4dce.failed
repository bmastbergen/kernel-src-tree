radix-tree: rename ptr_to_indirect() to node_to_entry()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Matthew Wilcox <willy@linux.intel.com>
commit a4db4dcea1b3990e8c5dc8a03d11f36a3c0c6d8b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a4db4dce.failed

ptr_to_indirect() was a bad name.  What it really means is "Convert this
pointer to a node into an entry suitable for storing in the radix tree".
So node_to_entry() seemed like a better name.

	Signed-off-by: Matthew Wilcox <willy@linux.intel.com>
	Cc: Konstantin Khlebnikov <koct9i@gmail.com>
	Cc: Kirill Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Jan Kara <jack@suse.com>
	Cc: Neil Brown <neilb@suse.de>
	Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit a4db4dcea1b3990e8c5dc8a03d11f36a3c0c6d8b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/radix-tree.c
diff --cc lib/radix-tree.c
index 467d6e0a3a58,f66bb3932452..000000000000
--- a/lib/radix-tree.c
+++ b/lib/radix-tree.c
@@@ -70,15 -66,12 +70,19 @@@ struct radix_tree_preload 
  };
  static DEFINE_PER_CPU(struct radix_tree_preload, radix_tree_preloads) = { 0, };
  
- static inline void *ptr_to_indirect(void *ptr)
+ static inline void *node_to_entry(void *ptr)
  {
 -	return (void *)((unsigned long)ptr | RADIX_TREE_INTERNAL_NODE);
 +	return (void *)((unsigned long)ptr | RADIX_TREE_INDIRECT_PTR);
  }
  
++<<<<<<< HEAD
 +static inline void *indirect_to_ptr(void *ptr)
 +{
 +	return (void *)((unsigned long)ptr & ~RADIX_TREE_INDIRECT_PTR);
 +}
++=======
+ #define RADIX_TREE_RETRY	node_to_entry(NULL)
++>>>>>>> a4db4dcea1b3 (radix-tree: rename ptr_to_indirect() to node_to_entry())
  
  #ifdef CONFIG_RADIX_TREE_MULTIORDER
  /* Sibling slots point directly to another slot in the same node */
@@@ -461,15 -470,15 +465,22 @@@ static int radix_tree_extend(struct rad
  		if (radix_tree_is_indirect_ptr(slot)) {
  			slot = indirect_to_ptr(slot);
  			slot->parent = node;
- 			slot = ptr_to_indirect(slot);
+ 			slot = node_to_entry(slot);
  		}
  		node->slots[0] = slot;
++<<<<<<< HEAD
 +		node = ptr_to_indirect(node);
 +		rcu_assign_pointer(root->rnode, node);
 +		root->height = newheight;
 +	} while (height > root->height);
++=======
+ 		slot = node_to_entry(node);
+ 		rcu_assign_pointer(root->rnode, slot);
+ 		shift += RADIX_TREE_MAP_SHIFT;
+ 	} while (shift <= maxshift);
++>>>>>>> a4db4dcea1b3 (radix-tree: rename ptr_to_indirect() to node_to_entry())
  out:
 -	return maxshift + RADIX_TREE_MAP_SHIFT;
 +	return height * RADIX_TREE_MAP_SHIFT;
  }
  
  /**
@@@ -525,12 -533,11 +536,12 @@@ int __radix_tree_create(struct radix_tr
  			slot->parent = node;
  			if (node) {
  				rcu_assign_pointer(node->slots[offset],
- 							ptr_to_indirect(slot));
+ 							node_to_entry(slot));
  				node->count++;
 +				slot->path |= offset << RADIX_TREE_HEIGHT_SHIFT;
  			} else
  				rcu_assign_pointer(root->rnode,
- 							ptr_to_indirect(slot));
+ 							node_to_entry(slot));
  		} else if (!radix_tree_is_indirect_ptr(slot))
  			break;
  
@@@ -1401,6 -1415,14 +1412,17 @@@ static inline bool radix_tree_shrink(st
  		slot = to_free->slots[0];
  		if (!slot)
  			break;
++<<<<<<< HEAD
++=======
+ 		if (!radix_tree_is_indirect_ptr(slot) && to_free->shift)
+ 			break;
+ 
+ 		if (radix_tree_is_indirect_ptr(slot)) {
+ 			slot = indirect_to_ptr(slot);
+ 			slot->parent = NULL;
+ 			slot = node_to_entry(slot);
+ 		}
++>>>>>>> a4db4dcea1b3 (radix-tree: rename ptr_to_indirect() to node_to_entry())
  
  		/*
  		 * We don't need rcu_assign_pointer(), since we are simply
@@@ -1540,13 -1562,7 +1562,17 @@@ void *radix_tree_delete_item(struct rad
  			radix_tree_tag_clear(root, index, tag);
  	}
  
++<<<<<<< HEAD
 +	/* Delete any sibling slots pointing to this slot */
 +	for (i = 1; offset + i < RADIX_TREE_MAP_SIZE; i++) {
 +		if (node->slots[offset + i] != ptr_to_indirect(slot))
 +			break;
 +		node->slots[offset + i] = NULL;
 +		node->count--;
 +	}
++=======
+ 	delete_sibling_entries(node, node_to_entry(slot), offset);
++>>>>>>> a4db4dcea1b3 (radix-tree: rename ptr_to_indirect() to node_to_entry())
  	node->slots[offset] = NULL;
  	node->count--;
  
* Unmerged path lib/radix-tree.c
