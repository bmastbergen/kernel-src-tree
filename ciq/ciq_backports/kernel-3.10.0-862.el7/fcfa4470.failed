NFS: Revert "NFS: Move the flock open mode check into nfs_flock()"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Benjamin Coddington <bcodding@redhat.com>
commit fcfa447062b2061e11f68b846d61cbfe60d0d604
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/fcfa4470.failed

Commit e12937279c8b "NFS: Move the flock open mode check into nfs_flock()"
changed NFSv3 behavior for flock() such that the open mode must match the
lock type, however that requirement shouldn't be enforced for flock().

	Signed-off-by: Benjamin Coddington <bcodding@redhat.com>
	Cc: stable@vger.kernel.org # v4.12
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit fcfa447062b2061e11f68b846d61cbfe60d0d604)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/file.c
diff --cc fs/nfs/file.c
index 297be8cac29d,81cca49a8375..000000000000
--- a/fs/nfs/file.c
+++ b/fs/nfs/file.c
@@@ -905,27 -829,9 +905,23 @@@ int nfs_flock(struct file *filp, int cm
  	if (NFS_SERVER(inode)->flags & NFS_MOUNT_LOCAL_FLOCK)
  		is_local = 1;
  
++<<<<<<< HEAD
 +	fl->fl_owner = (fl_owner_t)filp;
 +	fl->fl_start = 0;
 +	fl->fl_end = OFFSET_MAX;
 +
 +	/*
 +	 * VFS doesn't require the open mode to match a flock() lock's type.
 +	 * NFS, however, may simulate flock() locking with posix locking which
 +	 * requires the open mode to match the lock type.
 +	 */
 +	switch (fl->fl_type) {
 +	case F_UNLCK:
++=======
+ 	/* We're simulating flock() locks using posix locks on the server */
+ 	if (fl->fl_type == F_UNLCK)
++>>>>>>> fcfa447062b2 (NFS: Revert "NFS: Move the flock open mode check into nfs_flock()")
  		return do_unlk(filp, cmd, fl, is_local);
- 	case F_RDLCK:
- 		if (!(filp->f_mode & FMODE_READ))
- 			return -EBADF;
- 		break;
- 	case F_WRLCK:
- 		if (!(filp->f_mode & FMODE_WRITE))
- 			return -EBADF;
- 	}
- 
  	return do_setlk(filp, cmd, fl, is_local);
  }
  EXPORT_SYMBOL_GPL(nfs_flock);
* Unmerged path fs/nfs/file.c
diff --git a/fs/nfs/nfs4proc.c b/fs/nfs/nfs4proc.c
index 7c82e8d4ff55..d7cf6103992a 100644
--- a/fs/nfs/nfs4proc.c
+++ b/fs/nfs/nfs4proc.c
@@ -6557,6 +6557,20 @@ nfs4_proc_lock(struct file *filp, int cmd, struct file_lock *request)
 	    !test_bit(NFS_STATE_POSIX_LOCKS, &state->flags))
 		return -ENOLCK;
 
+	/*
+	 * Don't rely on the VFS having checked the file open mode,
+	 * since it won't do this for flock() locks.
+	 */
+	switch (request->fl_type) {
+	case F_RDLCK:
+		if (!(filp->f_mode & FMODE_READ))
+			return -EBADF;
+		break;
+	case F_WRLCK:
+		if (!(filp->f_mode & FMODE_WRITE))
+			return -EBADF;
+	}
+
 	status = nfs4_set_lock_state(state, request);
 	if (status != 0)
 		return status;
