x86/asm: Make asm/alternative.h safe from assembly

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] asm: Make asm/alternative.h safe from assembly (Josh Poimboeuf) [1535644]
Rebuild_FUZZ: 95.83%
commit-author Andy Lutomirski <luto@kernel.org>
commit f005f5d860e0231fe212cfda8c1a3148b99609f4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f005f5d8.failed

asm/alternative.h isn't directly useful from assembly, but it
shouldn't break the build.

	Signed-off-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/e5b693fcef99fe6e80341c9e97a002fb23871e91.1461698311.git.luto@kernel.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f005f5d860e0231fe212cfda8c1a3148b99609f4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/alternative.h
diff --cc arch/x86/include/asm/alternative.h
index 87e309068892,e77a6443104f..000000000000
--- a/arch/x86/include/asm/alternative.h
+++ b/arch/x86/include/asm/alternative.h
@@@ -210,47 -234,6 +212,51 @@@ static inline int alternatives_text_res
   */
  #define ASM_NO_INPUT_CLOBBER(clbr...) "i" (0) : clbr
  
++<<<<<<< HEAD
 +struct paravirt_patch_site;
 +#ifdef CONFIG_PARAVIRT
 +void apply_paravirt(struct paravirt_patch_site *start,
 +		    struct paravirt_patch_site *end);
 +#else
 +static inline void apply_paravirt(struct paravirt_patch_site *start,
 +				  struct paravirt_patch_site *end)
 +{}
 +#define __parainstructions	NULL
 +#define __parainstructions_end	NULL
 +#endif
 +
 +extern void *text_poke_early(void *addr, const void *opcode, size_t len);
 +
 +/*
 + * Clear and restore the kernel write-protection flag on the local CPU.
 + * Allows the kernel to edit read-only pages.
 + * Side-effect: any interrupt handler running between save and restore will have
 + * the ability to write to read-only pages.
 + *
 + * Warning:
 + * Code patching in the UP case is safe if NMIs and MCE handlers are stopped and
 + * no thread can be preempted in the instructions being modified (no iret to an
 + * invalid instruction possible) or if the instructions are changed from a
 + * consistent state to another consistent state atomically.
 + * More care must be taken when modifying code in the SMP case because of
 + * Intel's errata. text_poke_smp() takes care that errata, but still
 + * doesn't support NMI/MCE handler code modifying.
 + * On the local CPU you need to be protected again NMI or MCE handlers seeing an
 + * inconsistent instruction while you patch.
 + */
 +struct text_poke_param {
 +	void *addr;
 +	const void *opcode;
 +	size_t len;
 +};
 +
 +extern void *text_poke(void *addr, const void *opcode, size_t len);
 +extern int poke_int3_handler(struct pt_regs *regs);
 +extern void *text_poke_bp(void *addr, const void *opcode, size_t len, void *handler);
 +extern void *text_poke_smp(void *addr, const void *opcode, size_t len);
 +extern void text_poke_smp_batch(struct text_poke_param *params, int n);
++=======
+ #endif /* __ASSEMBLY__ */
++>>>>>>> f005f5d860e0 (x86/asm: Make asm/alternative.h safe from assembly)
  
  #endif /* _ASM_X86_ALTERNATIVE_H */
* Unmerged path arch/x86/include/asm/alternative.h
