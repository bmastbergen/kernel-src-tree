iommu/amd: Allocate iova_domain for dma_ops_domain

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Allocate iova_domain for dma_ops_domain (Jerry Snitselaar) [1411581]
Rebuild_FUZZ: 93.62%
commit-author Joerg Roedel <jroedel@suse.de>
commit 307d5851ef74c6c06a68f50302bf19809966d345
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/307d5851.failed

Use it later for allocating the IO virtual addresses.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 307d5851ef74c6c06a68f50302bf19809966d345)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
diff --cc drivers/iommu/amd_iommu.c
index 052bec78c73d,e7825b25c62f..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -34,6 -37,9 +34,12 @@@
  #include <linux/irq.h>
  #include <linux/msi.h>
  #include <linux/dma-contiguous.h>
++<<<<<<< HEAD
++=======
+ #include <linux/irqdomain.h>
+ #include <linux/percpu.h>
+ #include <linux/iova.h>
++>>>>>>> 307d5851ef74 (iommu/amd: Allocate iova_domain for dma_ops_domain)
  #include <asm/irq_remapping.h>
  #include <asm/io_apic.h>
  #include <asm/apic.h>
@@@ -1912,6 -1978,10 +1926,13 @@@ static void dma_ops_domain_free(struct 
  	if (!dom)
  		return;
  
++<<<<<<< HEAD
++=======
+ 	put_iova_domain(&dom->iovad);
+ 
+ 	free_percpu(dom->next_index);
+ 
++>>>>>>> 307d5851ef74 (iommu/amd: Allocate iova_domain for dma_ops_domain)
  	del_domain_from_list(&dom->domain);
  
  	free_pagetable(&dom->domain);
@@@ -1976,9 -2051,13 +1997,12 @@@ static struct dma_ops_domain *dma_ops_d
  	 * a valid dma-address. So we can use 0 as error value
  	 */
  	dma_dom->aperture[0]->bitmap[0] = 1;
 +	dma_dom->next_index = 0;
  
 -	for_each_possible_cpu(cpu)
 -		*per_cpu_ptr(dma_dom->next_index, cpu) = 0;
  
+ 	init_iova_domain(&dma_dom->iovad, PAGE_SIZE,
+ 			 IOVA_START_PFN, DMA_32BIT_PFN);
+ 
  	return dma_dom;
  
  free_dma_dom:
@@@ -2873,7 -2965,24 +2897,28 @@@ static struct dma_map_ops amd_iommu_dma
  
  int __init amd_iommu_init_api(void)
  {
++<<<<<<< HEAD
 +	return bus_set_iommu(&pci_bus_type, &amd_iommu_ops);
++=======
+ 	int ret, err = 0;
+ 
+ 	ret = iova_cache_get();
+ 	if (ret)
+ 		return ret;
+ 
+ 	err = bus_set_iommu(&pci_bus_type, &amd_iommu_ops);
+ 	if (err)
+ 		return err;
+ #ifdef CONFIG_ARM_AMBA
+ 	err = bus_set_iommu(&amba_bustype, &amd_iommu_ops);
+ 	if (err)
+ 		return err;
+ #endif
+ 	err = bus_set_iommu(&platform_bus_type, &amd_iommu_ops);
+ 	if (err)
+ 		return err;
+ 	return 0;
++>>>>>>> 307d5851ef74 (iommu/amd: Allocate iova_domain for dma_ops_domain)
  }
  
  int __init amd_iommu_init_dma_ops(void)
* Unmerged path drivers/iommu/amd_iommu.c
