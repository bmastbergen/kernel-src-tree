iommu/amd: Free already flushed ring-buffer entries before full-check

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [iommu] amd: Free already flushed ring-buffer entries before full-check (Suravee Suthikulpanit) [1508644]
Rebuild_FUZZ: 95.45%
commit-author Joerg Roedel <jroedel@suse.de>
commit 9ce3a72cd7f7e0b9ba1c5952e4461b363824bca9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9ce3a72c.failed

To benefit from IOTLB flushes on other CPUs we have to free
the already flushed IOVAs from the ring-buffer before we do
the queue_ring_full() check.

	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 9ce3a72cd7f7e0b9ba1c5952e4461b363824bca9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/amd_iommu.c
diff --cc drivers/iommu/amd_iommu.c
index e80343c1de99,c618c26a3b33..000000000000
--- a/drivers/iommu/amd_iommu.c
+++ b/drivers/iommu/amd_iommu.c
@@@ -1972,6 -1786,180 +1972,183 @@@ static void free_gcr3_table(struct prot
  	free_page((unsigned long)domain->gcr3_tbl);
  }
  
++<<<<<<< HEAD
++=======
+ static void dma_ops_domain_free_flush_queue(struct dma_ops_domain *dom)
+ {
+ 	int cpu;
+ 
+ 	for_each_possible_cpu(cpu) {
+ 		struct flush_queue *queue;
+ 
+ 		queue = per_cpu_ptr(dom->flush_queue, cpu);
+ 		kfree(queue->entries);
+ 	}
+ 
+ 	free_percpu(dom->flush_queue);
+ 
+ 	dom->flush_queue = NULL;
+ }
+ 
+ static int dma_ops_domain_alloc_flush_queue(struct dma_ops_domain *dom)
+ {
+ 	int cpu;
+ 
+ 	atomic64_set(&dom->flush_start_cnt,  0);
+ 	atomic64_set(&dom->flush_finish_cnt, 0);
+ 
+ 	dom->flush_queue = alloc_percpu(struct flush_queue);
+ 	if (!dom->flush_queue)
+ 		return -ENOMEM;
+ 
+ 	/* First make sure everything is cleared */
+ 	for_each_possible_cpu(cpu) {
+ 		struct flush_queue *queue;
+ 
+ 		queue = per_cpu_ptr(dom->flush_queue, cpu);
+ 		queue->head    = 0;
+ 		queue->tail    = 0;
+ 		queue->entries = NULL;
+ 	}
+ 
+ 	/* Now start doing the allocation */
+ 	for_each_possible_cpu(cpu) {
+ 		struct flush_queue *queue;
+ 
+ 		queue = per_cpu_ptr(dom->flush_queue, cpu);
+ 		queue->entries = kzalloc(FLUSH_QUEUE_SIZE * sizeof(*queue->entries),
+ 					 GFP_KERNEL);
+ 		if (!queue->entries) {
+ 			dma_ops_domain_free_flush_queue(dom);
+ 			return -ENOMEM;
+ 		}
+ 
+ 		spin_lock_init(&queue->lock);
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ static void dma_ops_domain_flush_tlb(struct dma_ops_domain *dom)
+ {
+ 	atomic64_inc(&dom->flush_start_cnt);
+ 	domain_flush_tlb(&dom->domain);
+ 	domain_flush_complete(&dom->domain);
+ 	atomic64_inc(&dom->flush_finish_cnt);
+ }
+ 
+ static inline bool queue_ring_full(struct flush_queue *queue)
+ {
+ 	assert_spin_locked(&queue->lock);
+ 
+ 	return (((queue->tail + 1) % FLUSH_QUEUE_SIZE) == queue->head);
+ }
+ 
+ #define queue_ring_for_each(i, q) \
+ 	for (i = (q)->head; i != (q)->tail; i = (i + 1) % FLUSH_QUEUE_SIZE)
+ 
+ static inline unsigned queue_ring_add(struct flush_queue *queue)
+ {
+ 	unsigned idx = queue->tail;
+ 
+ 	assert_spin_locked(&queue->lock);
+ 	queue->tail = (idx + 1) % FLUSH_QUEUE_SIZE;
+ 
+ 	return idx;
+ }
+ 
+ static inline void queue_ring_remove_head(struct flush_queue *queue)
+ {
+ 	assert_spin_locked(&queue->lock);
+ 	queue->head = (queue->head + 1) % FLUSH_QUEUE_SIZE;
+ }
+ 
+ static void queue_ring_free_flushed(struct dma_ops_domain *dom,
+ 				    struct flush_queue *queue)
+ {
+ 	u64 counter = atomic64_read(&dom->flush_finish_cnt);
+ 	int idx;
+ 
+ 	queue_ring_for_each(idx, queue) {
+ 		/*
+ 		 * This assumes that counter values in the ring-buffer are
+ 		 * monotonously rising.
+ 		 */
+ 		if (queue->entries[idx].counter >= counter)
+ 			break;
+ 
+ 		free_iova_fast(&dom->iovad,
+ 			       queue->entries[idx].iova_pfn,
+ 			       queue->entries[idx].pages);
+ 
+ 		queue_ring_remove_head(queue);
+ 	}
+ }
+ 
+ static void queue_add(struct dma_ops_domain *dom,
+ 		      unsigned long address, unsigned long pages)
+ {
+ 	struct flush_queue *queue;
+ 	unsigned long flags;
+ 	int idx;
+ 
+ 	pages     = __roundup_pow_of_two(pages);
+ 	address >>= PAGE_SHIFT;
+ 
+ 	queue = get_cpu_ptr(dom->flush_queue);
+ 	spin_lock_irqsave(&queue->lock, flags);
+ 
+ 	/*
+ 	 * First remove the enries from the ring-buffer that are already
+ 	 * flushed to make the below queue_ring_full() check less likely
+ 	 */
+ 	queue_ring_free_flushed(dom, queue);
+ 
+ 	/*
+ 	 * When ring-queue is full, flush the entries from the IOTLB so
+ 	 * that we can free all entries with queue_ring_free_flushed()
+ 	 * below.
+ 	 */
+ 	if (queue_ring_full(queue)) {
+ 		dma_ops_domain_flush_tlb(dom);
+ 		queue_ring_free_flushed(dom, queue);
+ 	}
+ 
+ 	idx = queue_ring_add(queue);
+ 
+ 	queue->entries[idx].iova_pfn = address;
+ 	queue->entries[idx].pages    = pages;
+ 	queue->entries[idx].counter  = atomic64_read(&dom->flush_start_cnt);
+ 
+ 	spin_unlock_irqrestore(&queue->lock, flags);
+ 
+ 	if (atomic_cmpxchg(&dom->flush_timer_on, 0, 1) == 0)
+ 		mod_timer(&dom->flush_timer, jiffies + msecs_to_jiffies(10));
+ 
+ 	put_cpu_ptr(dom->flush_queue);
+ }
+ 
+ static void queue_flush_timeout(unsigned long data)
+ {
+ 	struct dma_ops_domain *dom = (struct dma_ops_domain *)data;
+ 	int cpu;
+ 
+ 	atomic_set(&dom->flush_timer_on, 0);
+ 
+ 	dma_ops_domain_flush_tlb(dom);
+ 
+ 	for_each_possible_cpu(cpu) {
+ 		struct flush_queue *queue;
+ 		unsigned long flags;
+ 
+ 		queue = per_cpu_ptr(dom->flush_queue, cpu);
+ 		spin_lock_irqsave(&queue->lock, flags);
+ 		queue_ring_free_flushed(dom, queue);
+ 		spin_unlock_irqrestore(&queue->lock, flags);
+ 	}
+ }
+ 
++>>>>>>> 9ce3a72cd7f7 (iommu/amd: Free already flushed ring-buffer entries before full-check)
  /*
   * Free a domain, only used if something went wrong in the
   * allocation path and we need to free an already allocated page table
* Unmerged path drivers/iommu/amd_iommu.c
