target: remove the get_fabric_proto_ident method

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] remove the get_fabric_proto_ident method (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 90.91%
commit-author Christoph Hellwig <hch@lst.de>
commit 2aeeafae6bb9f04dbe17b521bcd8f0d03516c393
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2aeeafae.failed

Now that we store the protocol identifier in the tpg structure we don't
need this method.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit 2aeeafae6bb9f04dbe17b521bcd8f0d03516c393)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/target/tcm_mod_builder.py
#	drivers/target/iscsi/iscsi_target_configfs.c
#	drivers/target/loopback/tcm_loop.c
#	drivers/vhost/scsi.c
#	drivers/xen/xen-scsiback.c
diff --cc Documentation/target/tcm_mod_builder.py
index 3fe0d812dcec,29176c29537c..000000000000
--- a/Documentation/target/tcm_mod_builder.py
+++ b/Documentation/target/tcm_mod_builder.py
@@@ -370,12 -297,12 +370,17 @@@ def tcm_mod_build_configfs(proto_ident
  	buf += "	NULL,\n"
  	buf += "};\n\n"
  
++<<<<<<< HEAD
 +	buf += "static struct target_core_fabric_ops " + fabric_mod_name + "_ops = {\n"
++=======
+ 	buf += "static const struct target_core_fabric_ops " + fabric_mod_name + "_ops = {\n"
+ 	buf += "	.module				= THIS_MODULE,\n"
+ 	buf += "	.name				= " + fabric_mod_name + ",\n"
++>>>>>>> 2aeeafae6bb9 (target: remove the get_fabric_proto_ident method)
  	buf += "	.get_fabric_name		= " + fabric_mod_name + "_get_fabric_name,\n"
- 	buf += "	.get_fabric_proto_ident		= " + fabric_mod_name + "_get_fabric_proto_ident,\n"
  	buf += "	.tpg_get_wwn			= " + fabric_mod_name + "_get_fabric_wwn,\n"
  	buf += "	.tpg_get_tag			= " + fabric_mod_name + "_get_tag,\n"
 +	buf += "	.tpg_get_default_depth		= " + fabric_mod_name + "_get_default_depth,\n"
  	buf += "	.tpg_get_pr_transport_id	= " + fabric_mod_name + "_get_pr_transport_id,\n"
  	buf += "	.tpg_get_pr_transport_id_len	= " + fabric_mod_name + "_get_pr_transport_id_len,\n"
  	buf += "	.tpg_parse_pr_out_transport_id	= " + fabric_mod_name + "_parse_pr_out_transport_id,\n"
diff --cc drivers/target/iscsi/iscsi_target_configfs.c
index e02616d0c024,9dec9f39139f..000000000000
--- a/drivers/target/iscsi/iscsi_target_configfs.c
+++ b/drivers/target/iscsi/iscsi_target_configfs.c
@@@ -2051,115 -1913,58 +2051,160 @@@ static void lio_release_cmd(struct se_c
  	iscsit_release_cmd(cmd);
  }
  
++<<<<<<< HEAD
 +/* End functions for target_core_fabric_ops */
++=======
+ const struct target_core_fabric_ops iscsi_ops = {
+ 	.module				= THIS_MODULE,
+ 	.name				= "iscsi",
+ 	.node_acl_size			= sizeof(struct iscsi_node_acl),
+ 	.get_fabric_name		= iscsi_get_fabric_name,
+ 	.tpg_get_wwn			= lio_tpg_get_endpoint_wwn,
+ 	.tpg_get_tag			= lio_tpg_get_tag,
+ 	.tpg_get_default_depth		= lio_tpg_get_default_depth,
+ 	.tpg_get_pr_transport_id	= iscsi_get_pr_transport_id,
+ 	.tpg_get_pr_transport_id_len	= iscsi_get_pr_transport_id_len,
+ 	.tpg_parse_pr_out_transport_id	= iscsi_parse_pr_out_transport_id,
+ 	.tpg_check_demo_mode		= lio_tpg_check_demo_mode,
+ 	.tpg_check_demo_mode_cache	= lio_tpg_check_demo_mode_cache,
+ 	.tpg_check_demo_mode_write_protect =
+ 			lio_tpg_check_demo_mode_write_protect,
+ 	.tpg_check_prod_mode_write_protect =
+ 			lio_tpg_check_prod_mode_write_protect,
+ 	.tpg_check_prot_fabric_only	= &lio_tpg_check_prot_fabric_only,
+ 	.tpg_get_inst_index		= lio_tpg_get_inst_index,
+ 	.check_stop_free		= lio_check_stop_free,
+ 	.release_cmd			= lio_release_cmd,
+ 	.shutdown_session		= lio_tpg_shutdown_session,
+ 	.close_session			= lio_tpg_close_session,
+ 	.sess_get_index			= lio_sess_get_index,
+ 	.sess_get_initiator_sid		= lio_sess_get_initiator_sid,
+ 	.write_pending			= lio_write_pending,
+ 	.write_pending_status		= lio_write_pending_status,
+ 	.set_default_node_attributes	= lio_set_default_node_attributes,
+ 	.get_task_tag			= iscsi_get_task_tag,
+ 	.get_cmd_state			= iscsi_get_cmd_state,
+ 	.queue_data_in			= lio_queue_data_in,
+ 	.queue_status			= lio_queue_status,
+ 	.queue_tm_rsp			= lio_queue_tm_rsp,
+ 	.aborted_task			= lio_aborted_task,
+ 	.fabric_make_wwn		= lio_target_call_coreaddtiqn,
+ 	.fabric_drop_wwn		= lio_target_call_coredeltiqn,
+ 	.fabric_make_tpg		= lio_target_tiqn_addtpg,
+ 	.fabric_drop_tpg		= lio_target_tiqn_deltpg,
+ 	.fabric_make_np			= lio_target_call_addnptotpg,
+ 	.fabric_drop_np			= lio_target_call_delnpfromtpg,
+ 	.fabric_init_nodeacl		= lio_target_init_nodeacl,
+ 	.fabric_cleanup_nodeacl		= lio_target_cleanup_nodeacl,
++>>>>>>> 2aeeafae6bb9 (target: remove the get_fabric_proto_ident method)
  
 -	.tfc_discovery_attrs		= lio_target_discovery_auth_attrs,
 -	.tfc_wwn_attrs			= lio_target_wwn_attrs,
 -	.tfc_tpg_base_attrs		= lio_target_tpg_attrs,
 -	.tfc_tpg_attrib_attrs		= lio_target_tpg_attrib_attrs,
 -	.tfc_tpg_auth_attrs		= lio_target_tpg_auth_attrs,
 -	.tfc_tpg_param_attrs		= lio_target_tpg_param_attrs,
 -	.tfc_tpg_np_base_attrs		= lio_target_portal_attrs,
 -	.tfc_tpg_nacl_base_attrs	= lio_target_initiator_attrs,
 -	.tfc_tpg_nacl_attrib_attrs	= lio_target_nacl_attrib_attrs,
 -	.tfc_tpg_nacl_auth_attrs	= lio_target_nacl_auth_attrs,
 -	.tfc_tpg_nacl_param_attrs	= lio_target_nacl_param_attrs,
 -};
 +int iscsi_target_register_configfs(void)
 +{
 +	struct target_fabric_configfs *fabric;
 +	int ret;
 +
 +	lio_target_fabric_configfs = NULL;
 +	fabric = target_fabric_configfs_init(THIS_MODULE, "iscsi");
 +	if (IS_ERR(fabric)) {
 +		pr_err("target_fabric_configfs_init() for"
 +				" LIO-Target failed!\n");
 +		return PTR_ERR(fabric);
 +	}
 +	/*
 +	 * Setup the fabric API of function pointers used by target_core_mod..
 +	 */
 +	fabric->tf_ops.get_fabric_name = &iscsi_get_fabric_name;
 +	fabric->tf_ops.get_fabric_proto_ident = &iscsi_get_fabric_proto_ident;
 +	fabric->tf_ops.tpg_get_wwn = &lio_tpg_get_endpoint_wwn;
 +	fabric->tf_ops.tpg_get_tag = &lio_tpg_get_tag;
 +	fabric->tf_ops.tpg_get_default_depth = &lio_tpg_get_default_depth;
 +	fabric->tf_ops.tpg_get_pr_transport_id = &iscsi_get_pr_transport_id;
 +	fabric->tf_ops.tpg_get_pr_transport_id_len =
 +				&iscsi_get_pr_transport_id_len;
 +	fabric->tf_ops.tpg_parse_pr_out_transport_id =
 +				&iscsi_parse_pr_out_transport_id;
 +	fabric->tf_ops.tpg_check_demo_mode = &lio_tpg_check_demo_mode;
 +	fabric->tf_ops.tpg_check_demo_mode_cache =
 +				&lio_tpg_check_demo_mode_cache;
 +	fabric->tf_ops.tpg_check_demo_mode_write_protect =
 +				&lio_tpg_check_demo_mode_write_protect;
 +	fabric->tf_ops.tpg_check_prod_mode_write_protect =
 +				&lio_tpg_check_prod_mode_write_protect;
 +	fabric->tf_ops.tpg_alloc_fabric_acl = &lio_tpg_alloc_fabric_acl;
 +	fabric->tf_ops.tpg_release_fabric_acl = &lio_tpg_release_fabric_acl;
 +	fabric->tf_ops.tpg_get_inst_index = &lio_tpg_get_inst_index;
 +	fabric->tf_ops.check_stop_free = &lio_check_stop_free,
 +	fabric->tf_ops.release_cmd = &lio_release_cmd;
 +	fabric->tf_ops.shutdown_session = &lio_tpg_shutdown_session;
 +	fabric->tf_ops.close_session = &lio_tpg_close_session;
 +	fabric->tf_ops.sess_get_index = &lio_sess_get_index;
 +	fabric->tf_ops.sess_get_initiator_sid = &lio_sess_get_initiator_sid;
 +	fabric->tf_ops.write_pending = &lio_write_pending;
 +	fabric->tf_ops.write_pending_status = &lio_write_pending_status;
 +	fabric->tf_ops.set_default_node_attributes =
 +				&lio_set_default_node_attributes;
 +	fabric->tf_ops.get_task_tag = &iscsi_get_task_tag;
 +	fabric->tf_ops.get_cmd_state = &iscsi_get_cmd_state;
 +	fabric->tf_ops.queue_data_in = &lio_queue_data_in;
 +	fabric->tf_ops.queue_status = &lio_queue_status;
 +	fabric->tf_ops.queue_tm_rsp = &lio_queue_tm_rsp;
 +	fabric->tf_ops.aborted_task = &lio_aborted_task;
 +	/*
 +	 * Setup function pointers for generic logic in target_core_fabric_configfs.c
 +	 */
 +	fabric->tf_ops.fabric_make_wwn = &lio_target_call_coreaddtiqn;
 +	fabric->tf_ops.fabric_drop_wwn = &lio_target_call_coredeltiqn;
 +	fabric->tf_ops.fabric_make_tpg = &lio_target_tiqn_addtpg;
 +	fabric->tf_ops.fabric_drop_tpg = &lio_target_tiqn_deltpg;
 +	fabric->tf_ops.fabric_post_link	= NULL;
 +	fabric->tf_ops.fabric_pre_unlink = NULL;
 +	fabric->tf_ops.fabric_make_np = &lio_target_call_addnptotpg;
 +	fabric->tf_ops.fabric_drop_np = &lio_target_call_delnpfromtpg;
 +	fabric->tf_ops.fabric_make_nodeacl = &lio_target_make_nodeacl;
 +	fabric->tf_ops.fabric_drop_nodeacl = &lio_target_drop_nodeacl;
 +	/*
 +	 * Setup default attribute lists for various fabric->tf_cit_tmpl
 +	 * sturct config_item_type's
 +	 */
 +	fabric->tf_cit_tmpl.tfc_discovery_cit.ct_attrs = lio_target_discovery_auth_attrs;
 +	fabric->tf_cit_tmpl.tfc_wwn_cit.ct_attrs = lio_target_wwn_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_base_cit.ct_attrs = lio_target_tpg_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_attrib_cit.ct_attrs = lio_target_tpg_attrib_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_auth_cit.ct_attrs = lio_target_tpg_auth_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_param_cit.ct_attrs = lio_target_tpg_param_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_np_base_cit.ct_attrs = lio_target_portal_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_base_cit.ct_attrs = lio_target_initiator_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_attrib_cit.ct_attrs = lio_target_nacl_attrib_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_auth_cit.ct_attrs = lio_target_nacl_auth_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_nacl_param_cit.ct_attrs = lio_target_nacl_param_attrs;
 +
 +	ret = target_fabric_configfs_register(fabric);
 +	if (ret < 0) {
 +		pr_err("target_fabric_configfs_register() for"
 +				" LIO-Target failed!\n");
 +		target_fabric_configfs_free(fabric);
 +		return ret;
 +	}
 +
 +	lio_target_fabric_configfs = fabric;
 +	pr_debug("LIO_TARGET[0] - Set fabric ->"
 +			" lio_target_fabric_configfs\n");
 +	return 0;
 +}
 +
 +
 +void iscsi_target_deregister_configfs(void)
 +{
 +	if (!lio_target_fabric_configfs)
 +		return;
 +	/*
 +	 * Shutdown discovery sessions and disable discovery TPG
 +	 */
 +	if (iscsit_global->discovery_tpg)
 +		iscsit_tpg_disable_portal_group(iscsit_global->discovery_tpg, 1);
 +
 +	target_fabric_configfs_deregister(lio_target_fabric_configfs);
 +	lio_target_fabric_configfs = NULL;
 +	pr_debug("LIO_TARGET[0] - Cleared"
 +				" lio_target_fabric_configfs\n");
 +}
diff --cc drivers/target/loopback/tcm_loop.c
index d49ba0b7387a,0eed0209a7f4..000000000000
--- a/drivers/target/loopback/tcm_loop.c
+++ b/drivers/target/loopback/tcm_loop.c
@@@ -1411,129 -1326,47 +1385,173 @@@ static struct configfs_attribute *tcm_l
  
  /* End items for tcm_loop_cit */
  
++<<<<<<< HEAD
 +static int tcm_loop_register_configfs(void)
 +{
 +	struct target_fabric_configfs *fabric;
 +	int ret;
 +	/*
 +	 * Set the TCM Loop HBA counter to zero
 +	 */
 +	tcm_loop_hba_no_cnt = 0;
 +	/*
 +	 * Register the top level struct config_item_type with TCM core
 +	 */
 +	fabric = target_fabric_configfs_init(THIS_MODULE, "loopback");
 +	if (IS_ERR(fabric)) {
 +		pr_err("tcm_loop_register_configfs() failed!\n");
 +		return PTR_ERR(fabric);
 +	}
 +	/*
 +	 * Setup the fabric API of function pointers used by target_core_mod
 +	 */
 +	fabric->tf_ops.get_fabric_name = &tcm_loop_get_fabric_name;
 +	fabric->tf_ops.get_fabric_proto_ident = &tcm_loop_get_fabric_proto_ident;
 +	fabric->tf_ops.tpg_get_wwn = &tcm_loop_get_endpoint_wwn;
 +	fabric->tf_ops.tpg_get_tag = &tcm_loop_get_tag;
 +	fabric->tf_ops.tpg_get_default_depth = &tcm_loop_get_default_depth;
 +	fabric->tf_ops.tpg_get_pr_transport_id = &tcm_loop_get_pr_transport_id;
 +	fabric->tf_ops.tpg_get_pr_transport_id_len =
 +					&tcm_loop_get_pr_transport_id_len;
 +	fabric->tf_ops.tpg_parse_pr_out_transport_id =
 +					&tcm_loop_parse_pr_out_transport_id;
 +	fabric->tf_ops.tpg_check_demo_mode = &tcm_loop_check_demo_mode;
 +	fabric->tf_ops.tpg_check_demo_mode_cache =
 +					&tcm_loop_check_demo_mode_cache;
 +	fabric->tf_ops.tpg_check_demo_mode_write_protect =
 +					&tcm_loop_check_demo_mode_write_protect;
 +	fabric->tf_ops.tpg_check_prod_mode_write_protect =
 +					&tcm_loop_check_prod_mode_write_protect;
 +	fabric->tf_ops.tpg_check_prot_fabric_only =
 +					&tcm_loop_check_prot_fabric_only;
 +	/*
 +	 * The TCM loopback fabric module runs in demo-mode to a local
 +	 * virtual SCSI device, so fabric dependent initator ACLs are
 +	 * not required.
 +	 */
 +	fabric->tf_ops.tpg_alloc_fabric_acl = &tcm_loop_tpg_alloc_fabric_acl;
 +	fabric->tf_ops.tpg_release_fabric_acl =
 +					&tcm_loop_tpg_release_fabric_acl;
 +	fabric->tf_ops.tpg_get_inst_index = &tcm_loop_get_inst_index;
 +	/*
 +	 * Used for setting up remaining TCM resources in process context
 +	 */
 +	fabric->tf_ops.check_stop_free = &tcm_loop_check_stop_free;
 +	fabric->tf_ops.release_cmd = &tcm_loop_release_cmd;
 +	fabric->tf_ops.shutdown_session = &tcm_loop_shutdown_session;
 +	fabric->tf_ops.close_session = &tcm_loop_close_session;
 +	fabric->tf_ops.sess_get_index = &tcm_loop_sess_get_index;
 +	fabric->tf_ops.sess_get_initiator_sid = NULL;
 +	fabric->tf_ops.write_pending = &tcm_loop_write_pending;
 +	fabric->tf_ops.write_pending_status = &tcm_loop_write_pending_status;
 +	/*
 +	 * Not used for TCM loopback
 +	 */
 +	fabric->tf_ops.set_default_node_attributes =
 +					&tcm_loop_set_default_node_attributes;
 +	fabric->tf_ops.get_task_tag = &tcm_loop_get_task_tag;
 +	fabric->tf_ops.get_cmd_state = &tcm_loop_get_cmd_state;
 +	fabric->tf_ops.queue_data_in = &tcm_loop_queue_data_in;
 +	fabric->tf_ops.queue_status = &tcm_loop_queue_status;
 +	fabric->tf_ops.queue_tm_rsp = &tcm_loop_queue_tm_rsp;
 +	fabric->tf_ops.aborted_task = &tcm_loop_aborted_task;
 +
 +	/*
 +	 * Setup function pointers for generic logic in target_core_fabric_configfs.c
 +	 */
 +	fabric->tf_ops.fabric_make_wwn = &tcm_loop_make_scsi_hba;
 +	fabric->tf_ops.fabric_drop_wwn = &tcm_loop_drop_scsi_hba;
 +	fabric->tf_ops.fabric_make_tpg = &tcm_loop_make_naa_tpg;
 +	fabric->tf_ops.fabric_drop_tpg = &tcm_loop_drop_naa_tpg;
 +	/*
 +	 * fabric_post_link() and fabric_pre_unlink() are used for
 +	 * registration and release of TCM Loop Virtual SCSI LUNs.
 +	 */
 +	fabric->tf_ops.fabric_post_link = &tcm_loop_port_link;
 +	fabric->tf_ops.fabric_pre_unlink = &tcm_loop_port_unlink;
 +	fabric->tf_ops.fabric_make_np = NULL;
 +	fabric->tf_ops.fabric_drop_np = NULL;
 +	/*
 +	 * Setup default attribute lists for various fabric->tf_cit_tmpl
 +	 */
 +	fabric->tf_cit_tmpl.tfc_wwn_cit.ct_attrs = tcm_loop_wwn_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_base_cit.ct_attrs = tcm_loop_tpg_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_attrib_cit.ct_attrs = tcm_loop_tpg_attrib_attrs;
 +	fabric->tf_cit_tmpl.tfc_tpg_param_cit.ct_attrs = NULL;
 +	fabric->tf_cit_tmpl.tfc_tpg_np_base_cit.ct_attrs = NULL;
 +	/*
 +	 * Once fabric->tf_ops has been setup, now register the fabric for
 +	 * use within TCM
 +	 */
 +	ret = target_fabric_configfs_register(fabric);
 +	if (ret < 0) {
 +		pr_err("target_fabric_configfs_register() for"
 +				" TCM_Loop failed!\n");
 +		target_fabric_configfs_free(fabric);
 +		return -1;
 +	}
 +	/*
 +	 * Setup our local pointer to *fabric.
 +	 */
 +	tcm_loop_fabric_configfs = fabric;
 +	pr_debug("TCM_LOOP[0] - Set fabric ->"
 +			" tcm_loop_fabric_configfs\n");
 +	return 0;
 +}
 +
 +static void tcm_loop_deregister_configfs(void)
 +{
 +	if (!tcm_loop_fabric_configfs)
 +		return;
 +
 +	target_fabric_configfs_deregister(tcm_loop_fabric_configfs);
 +	tcm_loop_fabric_configfs = NULL;
 +	pr_debug("TCM_LOOP[0] - Cleared"
 +				" tcm_loop_fabric_configfs\n");
 +}
++=======
+ static const struct target_core_fabric_ops loop_ops = {
+ 	.module				= THIS_MODULE,
+ 	.name				= "loopback",
+ 	.get_fabric_name		= tcm_loop_get_fabric_name,
+ 	.tpg_get_wwn			= tcm_loop_get_endpoint_wwn,
+ 	.tpg_get_tag			= tcm_loop_get_tag,
+ 	.tpg_get_pr_transport_id	= tcm_loop_get_pr_transport_id,
+ 	.tpg_get_pr_transport_id_len	= tcm_loop_get_pr_transport_id_len,
+ 	.tpg_parse_pr_out_transport_id	= tcm_loop_parse_pr_out_transport_id,
+ 	.tpg_check_demo_mode		= tcm_loop_check_demo_mode,
+ 	.tpg_check_demo_mode_cache	= tcm_loop_check_demo_mode_cache,
+ 	.tpg_check_demo_mode_write_protect =
+ 				tcm_loop_check_demo_mode_write_protect,
+ 	.tpg_check_prod_mode_write_protect =
+ 				tcm_loop_check_prod_mode_write_protect,
+ 	.tpg_check_prot_fabric_only	= tcm_loop_check_prot_fabric_only,
+ 	.tpg_get_inst_index		= tcm_loop_get_inst_index,
+ 	.check_stop_free		= tcm_loop_check_stop_free,
+ 	.release_cmd			= tcm_loop_release_cmd,
+ 	.shutdown_session		= tcm_loop_shutdown_session,
+ 	.close_session			= tcm_loop_close_session,
+ 	.sess_get_index			= tcm_loop_sess_get_index,
+ 	.write_pending			= tcm_loop_write_pending,
+ 	.write_pending_status		= tcm_loop_write_pending_status,
+ 	.set_default_node_attributes	= tcm_loop_set_default_node_attributes,
+ 	.get_task_tag			= tcm_loop_get_task_tag,
+ 	.get_cmd_state			= tcm_loop_get_cmd_state,
+ 	.queue_data_in			= tcm_loop_queue_data_in,
+ 	.queue_status			= tcm_loop_queue_status,
+ 	.queue_tm_rsp			= tcm_loop_queue_tm_rsp,
+ 	.aborted_task			= tcm_loop_aborted_task,
+ 	.fabric_make_wwn		= tcm_loop_make_scsi_hba,
+ 	.fabric_drop_wwn		= tcm_loop_drop_scsi_hba,
+ 	.fabric_make_tpg		= tcm_loop_make_naa_tpg,
+ 	.fabric_drop_tpg		= tcm_loop_drop_naa_tpg,
+ 	.fabric_post_link		= tcm_loop_port_link,
+ 	.fabric_pre_unlink		= tcm_loop_port_unlink,
+ 	.tfc_wwn_attrs			= tcm_loop_wwn_attrs,
+ 	.tfc_tpg_base_attrs		= tcm_loop_tpg_attrs,
+ 	.tfc_tpg_attrib_attrs		= tcm_loop_tpg_attrib_attrs,
+ };
++>>>>>>> 2aeeafae6bb9 (target: remove the get_fabric_proto_ident method)
  
  static int __init tcm_loop_fabric_init(void)
  {
diff --cc drivers/vhost/scsi.c
index 65142d377371,022860ccd008..000000000000
--- a/drivers/vhost/scsi.c
+++ b/drivers/vhost/scsi.c
@@@ -285,33 -288,11 +285,37 @@@ static char *tcm_vhost_get_fabric_name(
  	return "vhost";
  }
  
++<<<<<<< HEAD
 +static u8 tcm_vhost_get_fabric_proto_ident(struct se_portal_group *se_tpg)
 +{
 +	struct tcm_vhost_tpg *tpg = container_of(se_tpg,
 +				struct tcm_vhost_tpg, se_tpg);
 +	struct tcm_vhost_tport *tport = tpg->tport;
 +
 +	switch (tport->tport_proto_id) {
 +	case SCSI_PROTOCOL_SAS:
 +		return sas_get_fabric_proto_ident(se_tpg);
 +	case SCSI_PROTOCOL_FCP:
 +		return fc_get_fabric_proto_ident(se_tpg);
 +	case SCSI_PROTOCOL_ISCSI:
 +		return iscsi_get_fabric_proto_ident(se_tpg);
 +	default:
 +		pr_err("Unknown tport_proto_id: 0x%02x, using"
 +			" SAS emulation\n", tport->tport_proto_id);
 +		break;
 +	}
 +
 +	return sas_get_fabric_proto_ident(se_tpg);
 +}
 +
 +static char *tcm_vhost_get_fabric_wwn(struct se_portal_group *se_tpg)
++=======
+ static char *vhost_scsi_get_fabric_wwn(struct se_portal_group *se_tpg)
++>>>>>>> 2aeeafae6bb9 (target: remove the get_fabric_proto_ident method)
  {
 -	struct vhost_scsi_tpg *tpg = container_of(se_tpg,
 -				struct vhost_scsi_tpg, se_tpg);
 -	struct vhost_scsi_tport *tport = tpg->tport;
 +	struct tcm_vhost_tpg *tpg = container_of(se_tpg,
 +				struct tcm_vhost_tpg, se_tpg);
 +	struct tcm_vhost_tport *tport = tpg->tport;
  
  	return &tport->tport_name[0];
  }
@@@ -1989,35 -2218,36 +1993,58 @@@ static struct configfs_attribute *tcm_v
  	NULL,
  };
  
++<<<<<<< HEAD
 +static struct target_core_fabric_ops tcm_vhost_ops = {
 +	.get_fabric_name		= tcm_vhost_get_fabric_name,
 +	.get_fabric_proto_ident		= tcm_vhost_get_fabric_proto_ident,
 +	.tpg_get_wwn			= tcm_vhost_get_fabric_wwn,
 +	.tpg_get_tag			= tcm_vhost_get_tag,
 +	.tpg_get_default_depth		= tcm_vhost_get_default_depth,
 +	.tpg_get_pr_transport_id	= tcm_vhost_get_pr_transport_id,
 +	.tpg_get_pr_transport_id_len	= tcm_vhost_get_pr_transport_id_len,
 +	.tpg_parse_pr_out_transport_id	= tcm_vhost_parse_pr_out_transport_id,
 +	.tpg_check_demo_mode		= tcm_vhost_check_true,
 +	.tpg_check_demo_mode_cache	= tcm_vhost_check_true,
 +	.tpg_check_demo_mode_write_protect = tcm_vhost_check_false,
 +	.tpg_check_prod_mode_write_protect = tcm_vhost_check_false,
 +	.tpg_alloc_fabric_acl		= tcm_vhost_alloc_fabric_acl,
 +	.tpg_release_fabric_acl		= tcm_vhost_release_fabric_acl,
 +	.tpg_get_inst_index		= tcm_vhost_tpg_get_inst_index,
 +	.release_cmd			= tcm_vhost_release_cmd,
 +	.shutdown_session		= tcm_vhost_shutdown_session,
 +	.close_session			= tcm_vhost_close_session,
 +	.sess_get_index			= tcm_vhost_sess_get_index,
++=======
+ static struct target_core_fabric_ops vhost_scsi_ops = {
+ 	.module				= THIS_MODULE,
+ 	.name				= "vhost",
+ 	.get_fabric_name		= vhost_scsi_get_fabric_name,
+ 	.tpg_get_wwn			= vhost_scsi_get_fabric_wwn,
+ 	.tpg_get_tag			= vhost_scsi_get_tpgt,
+ 	.tpg_get_pr_transport_id	= vhost_scsi_get_pr_transport_id,
+ 	.tpg_get_pr_transport_id_len	= vhost_scsi_get_pr_transport_id_len,
+ 	.tpg_parse_pr_out_transport_id	= vhost_scsi_parse_pr_out_transport_id,
+ 	.tpg_check_demo_mode		= vhost_scsi_check_true,
+ 	.tpg_check_demo_mode_cache	= vhost_scsi_check_true,
+ 	.tpg_check_demo_mode_write_protect = vhost_scsi_check_false,
+ 	.tpg_check_prod_mode_write_protect = vhost_scsi_check_false,
+ 	.tpg_check_prot_fabric_only	= vhost_scsi_check_prot_fabric_only,
+ 	.tpg_get_inst_index		= vhost_scsi_tpg_get_inst_index,
+ 	.release_cmd			= vhost_scsi_release_cmd,
+ 	.check_stop_free		= vhost_scsi_check_stop_free,
+ 	.shutdown_session		= vhost_scsi_shutdown_session,
+ 	.close_session			= vhost_scsi_close_session,
+ 	.sess_get_index			= vhost_scsi_sess_get_index,
++>>>>>>> 2aeeafae6bb9 (target: remove the get_fabric_proto_ident method)
  	.sess_get_initiator_sid		= NULL,
 -	.write_pending			= vhost_scsi_write_pending,
 -	.write_pending_status		= vhost_scsi_write_pending_status,
 -	.set_default_node_attributes	= vhost_scsi_set_default_node_attrs,
 -	.get_task_tag			= vhost_scsi_get_task_tag,
 -	.get_cmd_state			= vhost_scsi_get_cmd_state,
 -	.queue_data_in			= vhost_scsi_queue_data_in,
 -	.queue_status			= vhost_scsi_queue_status,
 -	.queue_tm_rsp			= vhost_scsi_queue_tm_rsp,
 -	.aborted_task			= vhost_scsi_aborted_task,
 +	.write_pending			= tcm_vhost_write_pending,
 +	.write_pending_status		= tcm_vhost_write_pending_status,
 +	.set_default_node_attributes	= tcm_vhost_set_default_node_attrs,
 +	.get_task_tag			= tcm_vhost_get_task_tag,
 +	.get_cmd_state			= tcm_vhost_get_cmd_state,
 +	.queue_data_in			= tcm_vhost_queue_data_in,
 +	.queue_status			= tcm_vhost_queue_status,
 +	.queue_tm_rsp			= tcm_vhost_queue_tm_rsp,
  	/*
  	 * Setup callers for generic logic in target_core_fabric_configfs.c
  	 */
* Unmerged path drivers/xen/xen-scsiback.c
* Unmerged path Documentation/target/tcm_mod_builder.py
diff --git a/drivers/infiniband/ulp/srpt/ib_srpt.c b/drivers/infiniband/ulp/srpt/ib_srpt.c
index 72146d165e84..8cbbd8b3f909 100644
--- a/drivers/infiniband/ulp/srpt/ib_srpt.c
+++ b/drivers/infiniband/ulp/srpt/ib_srpt.c
@@ -2685,11 +2685,6 @@ static char *srpt_get_fabric_name(void)
 	return "srpt";
 }
 
-static u8 srpt_get_fabric_proto_ident(struct se_portal_group *se_tpg)
-{
-	return SCSI_TRANSPORTID_PROTOCOLID_SRP;
-}
-
 static char *srpt_get_fabric_wwn(struct se_portal_group *tpg)
 {
 	struct srpt_port *sport = container_of(tpg, struct srpt_port, port_tpg_1);
@@ -3221,7 +3216,6 @@ static struct configfs_attribute *srpt_wwn_attrs[] = {
 
 static struct target_core_fabric_ops srpt_template = {
 	.get_fabric_name		= srpt_get_fabric_name,
-	.get_fabric_proto_ident		= srpt_get_fabric_proto_ident,
 	.tpg_get_wwn			= srpt_get_fabric_wwn,
 	.tpg_get_tag			= srpt_get_tag,
 	.tpg_get_default_depth		= srpt_get_default_depth,
diff --git a/drivers/scsi/qla2xxx/tcm_qla2xxx.c b/drivers/scsi/qla2xxx/tcm_qla2xxx.c
index 14250fcfe054..c187ee02a2fc 100644
--- a/drivers/scsi/qla2xxx/tcm_qla2xxx.c
+++ b/drivers/scsi/qla2xxx/tcm_qla2xxx.c
@@ -204,23 +204,6 @@ static char *tcm_qla2xxx_npiv_get_fabric_name(void)
 	return "qla2xxx_npiv";
 }
 
-static u8 tcm_qla2xxx_get_fabric_proto_ident(struct se_portal_group *se_tpg)
-{
-	struct tcm_qla2xxx_tpg *tpg = container_of(se_tpg,
-				struct tcm_qla2xxx_tpg, se_tpg);
-	struct tcm_qla2xxx_lport *lport = tpg->lport;
-	u8 proto_id;
-
-	switch (lport->lport_proto_id) {
-	case SCSI_PROTOCOL_FCP:
-	default:
-		proto_id = fc_get_fabric_proto_ident(se_tpg);
-		break;
-	}
-
-	return proto_id;
-}
-
 static char *tcm_qla2xxx_get_fabric_wwn(struct se_portal_group *se_tpg)
 {
 	struct tcm_qla2xxx_tpg *tpg = container_of(se_tpg,
@@ -1734,7 +1717,6 @@ static struct configfs_attribute *tcm_qla2xxx_wwn_attrs[] = {
 
 static struct target_core_fabric_ops tcm_qla2xxx_ops = {
 	.get_fabric_name		= tcm_qla2xxx_get_fabric_name,
-	.get_fabric_proto_ident		= tcm_qla2xxx_get_fabric_proto_ident,
 	.tpg_get_wwn			= tcm_qla2xxx_get_fabric_wwn,
 	.tpg_get_tag			= tcm_qla2xxx_get_tag,
 	.tpg_get_default_depth		= tcm_qla2xxx_get_default_depth,
@@ -1784,7 +1766,6 @@ static struct target_core_fabric_ops tcm_qla2xxx_ops = {
 
 static struct target_core_fabric_ops tcm_qla2xxx_npiv_ops = {
 	.get_fabric_name		= tcm_qla2xxx_npiv_get_fabric_name,
-	.get_fabric_proto_ident		= tcm_qla2xxx_get_fabric_proto_ident,
 	.tpg_get_wwn			= tcm_qla2xxx_get_fabric_wwn,
 	.tpg_get_tag			= tcm_qla2xxx_get_tag,
 	.tpg_get_default_depth		= tcm_qla2xxx_get_default_depth,
* Unmerged path drivers/target/iscsi/iscsi_target_configfs.c
* Unmerged path drivers/target/loopback/tcm_loop.c
diff --git a/drivers/target/sbp/sbp_target.c b/drivers/target/sbp/sbp_target.c
index b33c121ab56c..200412dd0e55 100644
--- a/drivers/target/sbp/sbp_target.c
+++ b/drivers/target/sbp/sbp_target.c
@@ -1850,18 +1850,6 @@ static int sbp_check_stop_free(struct se_cmd *se_cmd)
 	return 1;
 }
 
-/*
- * Handlers for Serial Bus Protocol 2/3 (SBP-2 / SBP-3)
- */
-static u8 sbp_get_fabric_proto_ident(struct se_portal_group *se_tpg)
-{
-	/*
-	 * Return a IEEE 1394 SCSI Protocol identifier for loopback operations
-	 * This is defined in section 7.5.1 Table 362 in spc4r17
-	 */
-	return SCSI_PROTOCOL_SBP;
-}
-
 static u32 sbp_get_pr_transport_id(
 	struct se_portal_group *se_tpg,
 	struct se_node_acl *se_nacl,
@@ -2487,7 +2475,6 @@ static struct configfs_attribute *sbp_tpg_attrib_attrs[] = {
 
 static struct target_core_fabric_ops sbp_ops = {
 	.get_fabric_name		= sbp_get_fabric_name,
-	.get_fabric_proto_ident		= sbp_get_fabric_proto_ident,
 	.tpg_get_wwn			= sbp_get_fabric_wwn,
 	.tpg_get_tag			= sbp_get_tag,
 	.tpg_get_default_depth		= sbp_get_default_depth,
diff --git a/drivers/target/target_core_configfs.c b/drivers/target/target_core_configfs.c
index 372df6e87bcb..460fd6db13c1 100644
--- a/drivers/target/target_core_configfs.c
+++ b/drivers/target/target_core_configfs.c
@@ -379,10 +379,6 @@ static int target_fabric_tf_ops_check(
 		pr_err("Missing tfo->get_fabric_name()\n");
 		return -EINVAL;
 	}
-	if (!tfo->get_fabric_proto_ident) {
-		pr_err("Missing tfo->get_fabric_proto_ident()\n");
-		return -EINVAL;
-	}
 	if (!tfo->tpg_get_wwn) {
 		pr_err("Missing tfo->tpg_get_wwn()\n");
 		return -EINVAL;
diff --git a/drivers/target/target_core_fabric_lib.c b/drivers/target/target_core_fabric_lib.c
index 35bfe77160d8..6fed14adbe61 100644
--- a/drivers/target/target_core_fabric_lib.c
+++ b/drivers/target/target_core_fabric_lib.c
@@ -42,16 +42,6 @@
 /*
  * Handlers for Serial Attached SCSI (SAS)
  */
-u8 sas_get_fabric_proto_ident(struct se_portal_group *se_tpg)
-{
-	/*
-	 * Return a SAS Serial SCSI Protocol identifier for loopback operations
-	 * This is defined in  section 7.5.1 Table 362 in spc4r17
-	 */
-	return 0x6;
-}
-EXPORT_SYMBOL(sas_get_fabric_proto_ident);
-
 u32 sas_get_pr_transport_id(
 	struct se_portal_group *se_tpg,
 	struct se_node_acl *se_nacl,
@@ -128,12 +118,6 @@ EXPORT_SYMBOL(sas_parse_pr_out_transport_id);
 /*
  * Handlers for Fibre Channel Protocol (FCP)
  */
-u8 fc_get_fabric_proto_ident(struct se_portal_group *se_tpg)
-{
-	return 0x0;	/* 0 = fcp-2 per SPC4 section 7.5.1 */
-}
-EXPORT_SYMBOL(fc_get_fabric_proto_ident);
-
 u32 fc_get_pr_transport_id_len(
 	struct se_portal_group *se_tpg,
 	struct se_node_acl *se_nacl,
@@ -208,17 +192,6 @@ EXPORT_SYMBOL(fc_parse_pr_out_transport_id);
 /*
  * Handlers for Internet Small Computer Systems Interface (iSCSI)
  */
-
-u8 iscsi_get_fabric_proto_ident(struct se_portal_group *se_tpg)
-{
-	/*
-	 * This value is defined for "Internet SCSI (iSCSI)"
-	 * in spc4r17 section 7.5.1 Table 362
-	 */
-	return 0x5;
-}
-EXPORT_SYMBOL(iscsi_get_fabric_proto_ident);
-
 u32 iscsi_get_pr_transport_id(
 	struct se_portal_group *se_tpg,
 	struct se_node_acl *se_nacl,
diff --git a/drivers/target/target_core_pr.c b/drivers/target/target_core_pr.c
index a255afc452a9..d2924926a4bc 100644
--- a/drivers/target/target_core_pr.c
+++ b/drivers/target/target_core_pr.c
@@ -1463,7 +1463,7 @@ core_scsi3_decode_spec_i_port(
 	struct pr_transport_id_holder *tidh_new, *tidh, *tidh_tmp;
 	struct target_core_fabric_ops *tmp_tf_ops;
 	unsigned char *buf;
-	unsigned char *ptr, *i_str = NULL, proto_ident, tmp_proto_ident;
+	unsigned char *ptr, *i_str = NULL, proto_ident;
 	char *iport_ptr = NULL, i_buf[PR_REG_ISID_ID_LEN];
 	sense_reason_t ret;
 	u32 tpdl, tid_len = 0;
@@ -1552,15 +1552,13 @@ core_scsi3_decode_spec_i_port(
 			tmp_tf_ops = tmp_tpg->se_tpg_tfo;
 			if (!tmp_tf_ops)
 				continue;
-			if (!tmp_tf_ops->get_fabric_proto_ident ||
-			    !tmp_tf_ops->tpg_parse_pr_out_transport_id)
+			if (!tmp_tf_ops->tpg_parse_pr_out_transport_id)
 				continue;
 			/*
 			 * Look for the matching proto_ident provided by
 			 * the received TransportID
 			 */
-			tmp_proto_ident = tmp_tf_ops->get_fabric_proto_ident(tmp_tpg);
-			if (tmp_proto_ident != proto_ident)
+			if (tmp_tpg->proto_id != proto_ident)
 				continue;
 			dest_rtpi = tmp_port->sep_rtpi;
 
@@ -3246,11 +3244,11 @@ core_scsi3_emulate_pro_register_and_move(struct se_cmd *cmd, u64 res_key,
 	pr_debug("SPC-3 PR REGISTER_AND_MOVE: Extracted Protocol Identifier:"
 			" 0x%02x\n", proto_ident);
 
-	if (proto_ident != dest_tf_ops->get_fabric_proto_ident(dest_se_tpg)) {
+	if (proto_ident != dest_se_tpg->proto_id) {
 		pr_err("SPC-3 PR REGISTER_AND_MOVE: Received"
 			" proto_ident: 0x%02x does not match ident: 0x%02x"
 			" from fabric: %s\n", proto_ident,
-			dest_tf_ops->get_fabric_proto_ident(dest_se_tpg),
+			dest_se_tpg->proto_id,
 			dest_tf_ops->get_fabric_name());
 		ret = TCM_INVALID_PARAMETER_LIST;
 		goto out;
diff --git a/drivers/target/target_core_spc.c b/drivers/target/target_core_spc.c
index 7912aa124385..5243d9b3596c 100644
--- a/drivers/target/target_core_spc.c
+++ b/drivers/target/target_core_spc.c
@@ -286,8 +286,7 @@ check_t10_vend_desc:
 		 * Get the PROTOCOL IDENTIFIER as defined by spc4r17
 		 * section 7.5.1 Table 362
 		 */
-		buf[off] =
-			(tpg->se_tpg_tfo->get_fabric_proto_ident(tpg) << 4);
+		buf[off] = tpg->proto_id << 4;
 		buf[off++] |= 0x1; /* CODE SET == Binary */
 		buf[off] = 0x80; /* Set PIV=1 */
 		/* Set ASSOCIATION == target port: 01b */
@@ -322,8 +321,7 @@ check_t10_vend_desc:
 		tg_pt_gp_id = tg_pt_gp->tg_pt_gp_id;
 		spin_unlock(&tg_pt_gp_mem->tg_pt_gp_mem_lock);
 
-		buf[off] =
-			(tpg->se_tpg_tfo->get_fabric_proto_ident(tpg) << 4);
+		buf[off] = tpg->proto_id << 4;
 		buf[off++] |= 0x1; /* CODE SET == Binary */
 		buf[off] = 0x80; /* Set PIV=1 */
 		/* Set ASSOCIATION == target port: 01b */
@@ -371,8 +369,7 @@ check_lu_gp:
 		 * section 7.5.1 Table 362
 		 */
 check_scsi_name:
-		buf[off] =
-			(tpg->se_tpg_tfo->get_fabric_proto_ident(tpg) << 4);
+		buf[off] = tpg->proto_id << 4;
 		buf[off++] |= 0x3; /* CODE SET == UTF-8 */
 		buf[off] = 0x80; /* Set PIV=1 */
 		/* Set ASSOCIATION == target port: 01b */
@@ -412,8 +409,7 @@ check_scsi_name:
 		/*
 		 * Target device designator
 		 */
-		buf[off] =
-			(tpg->se_tpg_tfo->get_fabric_proto_ident(tpg) << 4);
+		buf[off] = tpg->proto_id << 4;
 		buf[off++] |= 0x3; /* CODE SET == UTF-8 */
 		buf[off] = 0x80; /* Set PIV=1 */
 		/* Set ASSOCIATION == target device: 10b */
diff --git a/drivers/target/tcm_fc/tfc_conf.c b/drivers/target/tcm_fc/tfc_conf.c
index 8f5b91a74d09..80a7256ebe82 100644
--- a/drivers/target/tcm_fc/tfc_conf.c
+++ b/drivers/target/tcm_fc/tfc_conf.c
@@ -508,7 +508,6 @@ static u32 ft_tpg_get_inst_index(struct se_portal_group *se_tpg)
 
 static struct target_core_fabric_ops ft_fabric_ops = {
 	.get_fabric_name =		ft_get_fabric_name,
-	.get_fabric_proto_ident =	fc_get_fabric_proto_ident,
 	.tpg_get_wwn =			ft_get_fabric_wwn,
 	.tpg_get_tag =			ft_get_tag,
 	.tpg_get_default_depth =	ft_get_default_depth,
diff --git a/drivers/usb/gadget/tcm_usb_gadget.c b/drivers/usb/gadget/tcm_usb_gadget.c
index 7cacd6ae818e..5a0acd576989 100644
--- a/drivers/usb/gadget/tcm_usb_gadget.c
+++ b/drivers/usb/gadget/tcm_usb_gadget.c
@@ -1274,23 +1274,6 @@ static char *usbg_get_fabric_name(void)
 	return "usb_gadget";
 }
 
-static u8 usbg_get_fabric_proto_ident(struct se_portal_group *se_tpg)
-{
-	struct usbg_tpg *tpg = container_of(se_tpg,
-				struct usbg_tpg, se_tpg);
-	struct usbg_tport *tport = tpg->tport;
-	u8 proto_id;
-
-	switch (tport->tport_proto_id) {
-	case SCSI_PROTOCOL_SAS:
-	default:
-		proto_id = sas_get_fabric_proto_ident(se_tpg);
-		break;
-	}
-
-	return proto_id;
-}
-
 static char *usbg_get_fabric_wwn(struct se_portal_group *se_tpg)
 {
 	struct usbg_tpg *tpg = container_of(se_tpg,
@@ -1871,7 +1854,6 @@ static int usbg_check_stop_free(struct se_cmd *se_cmd)
 
 static struct target_core_fabric_ops usbg_ops = {
 	.get_fabric_name		= usbg_get_fabric_name,
-	.get_fabric_proto_ident		= usbg_get_fabric_proto_ident,
 	.tpg_get_wwn			= usbg_get_fabric_wwn,
 	.tpg_get_tag			= usbg_get_tag,
 	.tpg_get_default_depth		= usbg_get_default_depth,
* Unmerged path drivers/vhost/scsi.c
* Unmerged path drivers/xen/xen-scsiback.c
diff --git a/include/target/target_core_fabric.h b/include/target/target_core_fabric.h
index c9a57a197803..52d2ec3a2836 100644
--- a/include/target/target_core_fabric.h
+++ b/include/target/target_core_fabric.h
@@ -4,7 +4,6 @@
 struct target_core_fabric_ops {
 	struct configfs_subsystem *tf_subsys;
 	char *(*get_fabric_name)(void);
-	u8 (*get_fabric_proto_ident)(struct se_portal_group *);
 	char *(*tpg_get_wwn)(struct se_portal_group *);
 	u16 (*tpg_get_tag)(struct se_portal_group *);
 	u32 (*tpg_get_default_depth)(struct se_portal_group *);
@@ -167,7 +166,6 @@ int	core_tpg_register(struct target_core_fabric_ops *, struct se_wwn *,
 int	core_tpg_deregister(struct se_portal_group *);
 
 /* SAS helpers */
-u8	sas_get_fabric_proto_ident(struct se_portal_group *);
 u32	sas_get_pr_transport_id(struct se_portal_group *, struct se_node_acl *,
 		struct t10_pr_registration *, int *, unsigned char *);
 u32	sas_get_pr_transport_id_len(struct se_portal_group *, struct se_node_acl *,
@@ -176,7 +174,6 @@ char	*sas_parse_pr_out_transport_id(struct se_portal_group *, const char *,
 		u32 *, char **);
 
 /* FC helpers */
-u8	fc_get_fabric_proto_ident(struct se_portal_group *);
 u32	fc_get_pr_transport_id(struct se_portal_group *, struct se_node_acl *,
 		struct t10_pr_registration *, int *, unsigned char *);
 u32	fc_get_pr_transport_id_len(struct se_portal_group *, struct se_node_acl *,
@@ -185,7 +182,6 @@ char	*fc_parse_pr_out_transport_id(struct se_portal_group *, const char *,
 		u32 *, char **);
 
 /* iSCSI helpers */
-u8	iscsi_get_fabric_proto_ident(struct se_portal_group *);
 u32	iscsi_get_pr_transport_id(struct se_portal_group *, struct se_node_acl *,
 		struct t10_pr_registration *, int *, unsigned char *);
 u32	iscsi_get_pr_transport_id_len(struct se_portal_group *, struct se_node_acl *,
