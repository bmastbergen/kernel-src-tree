net/act_pedit: Introduce 'add' operation

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] act_pedit: Introduce 'add' operation (Ivan Vecera) [1445420]
Rebuild_FUZZ: 94.74%
commit-author Amir Vadai <amir@vadai.me>
commit 853a14ba4682f820266469979c9297debc05f60c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/853a14ba.failed

This command could be useful to inc/dec fields.

For example, to forward any TCP packet and decrease its TTL:
$ tc filter add dev enp0s9 protocol ip parent ffff: \
    flower ip_proto tcp \
    action pedit munge ip ttl add 0xff pipe \
    action mirred egress redirect dev veth0

In the example above, adding 0xff to this u8 field is actually
decreasing it by one, since the operation is masked.

	Signed-off-by: Amir Vadai <amir@vadai.me>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 853a14ba4682f820266469979c9297debc05f60c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tc_act/tc_pedit.h
#	include/uapi/linux/tc_act/tc_pedit.h
#	net/sched/act_pedit.c
diff --cc include/net/tc_act/tc_pedit.h
index e7a3d4c49079,dfbd6ee0bc7c..000000000000
--- a/include/net/tc_act/tc_pedit.h
+++ b/include/net/tc_act/tc_pedit.h
@@@ -2,10 -2,14 +2,18 @@@
  #define __NET_TC_PED_H
  
  #include <net/act_api.h>
++<<<<<<< HEAD
 +#include <linux/tc_act/tc_pedit.h>
++=======
+ 
+ struct tcf_pedit_key_ex {
+ 	enum pedit_header_type htype;
+ 	enum pedit_cmd cmd;
+ };
++>>>>>>> 853a14ba4682 (net/act_pedit: Introduce 'add' operation)
  
  struct tcf_pedit {
 -	struct tc_action	common;
 +	struct tcf_common	common;
  	unsigned char		tcfp_nkeys;
  	unsigned char		tcfp_flags;
  	struct tc_pedit_key	*tcfp_keys;
diff --cc include/uapi/linux/tc_act/tc_pedit.h
index 6389959a5157,143d2b31a316..000000000000
--- a/include/uapi/linux/tc_act/tc_pedit.h
+++ b/include/uapi/linux/tc_act/tc_pedit.h
@@@ -15,6 -18,34 +15,37 @@@ enum 
  };
  #define TCA_PEDIT_MAX (__TCA_PEDIT_MAX - 1)
                                                                                  
++<<<<<<< HEAD
++=======
+ enum {
+ 	TCA_PEDIT_KEY_EX_HTYPE = 1,
+ 	TCA_PEDIT_KEY_EX_CMD = 2,
+ 	__TCA_PEDIT_KEY_EX_MAX
+ };
+ #define TCA_PEDIT_KEY_EX_MAX (__TCA_PEDIT_KEY_EX_MAX - 1)
+ 
+  /* TCA_PEDIT_KEY_EX_HDR_TYPE_NETWROK is a special case for legacy users. It
+   * means no specific header type - offset is relative to the network layer
+   */
+ enum pedit_header_type {
+ 	TCA_PEDIT_KEY_EX_HDR_TYPE_NETWORK = 0,
+ 	TCA_PEDIT_KEY_EX_HDR_TYPE_ETH = 1,
+ 	TCA_PEDIT_KEY_EX_HDR_TYPE_IP4 = 2,
+ 	TCA_PEDIT_KEY_EX_HDR_TYPE_IP6 = 3,
+ 	TCA_PEDIT_KEY_EX_HDR_TYPE_TCP = 4,
+ 	TCA_PEDIT_KEY_EX_HDR_TYPE_UDP = 5,
+ 	__PEDIT_HDR_TYPE_MAX,
+ };
+ #define TCA_PEDIT_HDR_TYPE_MAX (__PEDIT_HDR_TYPE_MAX - 1)
+ 
+ enum pedit_cmd {
+ 	TCA_PEDIT_KEY_EX_CMD_SET = 0,
+ 	TCA_PEDIT_KEY_EX_CMD_ADD = 1,
+ 	__PEDIT_CMD_MAX,
+ };
+ #define TCA_PEDIT_CMD_MAX (__PEDIT_CMD_MAX - 1)
+ 
++>>>>>>> 853a14ba4682 (net/act_pedit: Introduce 'add' operation)
  struct tc_pedit_key {
  	__u32           mask;  /* AND */
  	__u32           val;   /*XOR */
diff --cc net/sched/act_pedit.c
index 0ad8b8fe7165,c1310472f620..000000000000
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@@ -25,15 -25,118 +25,114 @@@
  
  #define PEDIT_TAB_MASK	15
  
 -static unsigned int pedit_net_id;
 -static struct tc_action_ops act_pedit_ops;
 -
  static const struct nla_policy pedit_policy[TCA_PEDIT_MAX + 1] = {
  	[TCA_PEDIT_PARMS]	= { .len = sizeof(struct tc_pedit) },
 -	[TCA_PEDIT_KEYS_EX]   = { .type = NLA_NESTED },
  };
  
++<<<<<<< HEAD
++=======
+ static const struct nla_policy pedit_key_ex_policy[TCA_PEDIT_KEY_EX_MAX + 1] = {
+ 	[TCA_PEDIT_KEY_EX_HTYPE]  = { .type = NLA_U16 },
+ 	[TCA_PEDIT_KEY_EX_CMD]	  = { .type = NLA_U16 },
+ };
+ 
+ static struct tcf_pedit_key_ex *tcf_pedit_keys_ex_parse(struct nlattr *nla,
+ 							u8 n)
+ {
+ 	struct tcf_pedit_key_ex *keys_ex;
+ 	struct tcf_pedit_key_ex *k;
+ 	const struct nlattr *ka;
+ 	int err = -EINVAL;
+ 	int rem;
+ 
+ 	if (!nla || !n)
+ 		return NULL;
+ 
+ 	keys_ex = kcalloc(n, sizeof(*k), GFP_KERNEL);
+ 	if (!keys_ex)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	k = keys_ex;
+ 
+ 	nla_for_each_nested(ka, nla, rem) {
+ 		struct nlattr *tb[TCA_PEDIT_KEY_EX_MAX + 1];
+ 
+ 		if (!n) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 		n--;
+ 
+ 		if (nla_type(ka) != TCA_PEDIT_KEY_EX) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		err = nla_parse_nested(tb, TCA_PEDIT_KEY_EX_MAX, ka,
+ 				       pedit_key_ex_policy);
+ 		if (err)
+ 			goto err_out;
+ 
+ 		if (!tb[TCA_PEDIT_KEY_EX_HTYPE] ||
+ 		    !tb[TCA_PEDIT_KEY_EX_CMD]) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		k->htype = nla_get_u16(tb[TCA_PEDIT_KEY_EX_HTYPE]);
+ 		k->cmd = nla_get_u16(tb[TCA_PEDIT_KEY_EX_CMD]);
+ 
+ 		if (k->htype > TCA_PEDIT_HDR_TYPE_MAX ||
+ 		    k->cmd > TCA_PEDIT_CMD_MAX) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		k++;
+ 	}
+ 
+ 	if (n)
+ 		goto err_out;
+ 
+ 	return keys_ex;
+ 
+ err_out:
+ 	kfree(keys_ex);
+ 	return ERR_PTR(err);
+ }
+ 
+ static int tcf_pedit_key_ex_dump(struct sk_buff *skb,
+ 				 struct tcf_pedit_key_ex *keys_ex, int n)
+ {
+ 	struct nlattr *keys_start = nla_nest_start(skb, TCA_PEDIT_KEYS_EX);
+ 
+ 	for (; n > 0; n--) {
+ 		struct nlattr *key_start;
+ 
+ 		key_start = nla_nest_start(skb, TCA_PEDIT_KEY_EX);
+ 
+ 		if (nla_put_u16(skb, TCA_PEDIT_KEY_EX_HTYPE, keys_ex->htype) ||
+ 		    nla_put_u16(skb, TCA_PEDIT_KEY_EX_CMD, keys_ex->cmd)) {
+ 			nlmsg_trim(skb, keys_start);
+ 			return -EINVAL;
+ 		}
+ 
+ 		nla_nest_end(skb, key_start);
+ 
+ 		keys_ex++;
+ 	}
+ 
+ 	nla_nest_end(skb, keys_start);
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 853a14ba4682 (net/act_pedit: Introduce 'add' operation)
  static int tcf_pedit_init(struct net *net, struct nlattr *nla,
 -			  struct nlattr *est, struct tc_action **a,
 +			  struct nlattr *est, struct tc_action *a,
  			  int ovr, int bind)
  {
 -	struct tc_action_net *tn = net_generic(net, pedit_net_id);
  	struct nlattr *tb[TCA_PEDIT_MAX + 1];
 -	struct nlattr *pattr;
  	struct tc_pedit *parm;
  	int ret = 0, err;
  	struct tcf_pedit *p;
@@@ -133,10 -283,30 +232,36 @@@ static int tcf_pedit(struct sk_buff *sk
  
  	if (p->tcfp_nkeys > 0) {
  		struct tc_pedit_key *tkey = p->tcfp_keys;
++<<<<<<< HEAD
++=======
+ 		struct tcf_pedit_key_ex *tkey_ex = p->tcfp_keys_ex;
+ 		enum pedit_header_type htype = TCA_PEDIT_KEY_EX_HDR_TYPE_NETWORK;
+ 		enum pedit_cmd cmd = TCA_PEDIT_KEY_EX_CMD_SET;
++>>>>>>> 853a14ba4682 (net/act_pedit: Introduce 'add' operation)
  
  		for (i = p->tcfp_nkeys; i > 0; i--, tkey++) {
  			u32 *ptr, _data;
  			int offset = tkey->off;
++<<<<<<< HEAD
++=======
+ 			int hoffset;
+ 			u32 val;
+ 			int rc;
+ 
+ 			if (tkey_ex) {
+ 				htype = tkey_ex->htype;
+ 				cmd = tkey_ex->cmd;
+ 
+ 				tkey_ex++;
+ 			}
+ 
+ 			rc = pedit_skb_hdr_offset(skb, htype, &hoffset);
+ 			if (rc) {
+ 				pr_info("tc filter pedit bad header type specified (0x%x)\n",
+ 					htype);
+ 				goto bad;
+ 			}
++>>>>>>> 853a14ba4682 (net/act_pedit: Introduce 'add' operation)
  
  			if (tkey->offmask) {
  				char *d, _d;
@@@ -169,9 -339,22 +294,22 @@@
  			if (!ptr)
  				goto bad;
  			/* just do it, baby */
- 			*ptr = ((*ptr & tkey->mask) ^ tkey->val);
+ 			switch (cmd) {
+ 			case TCA_PEDIT_KEY_EX_CMD_SET:
+ 				val = tkey->val;
+ 				break;
+ 			case TCA_PEDIT_KEY_EX_CMD_ADD:
+ 				val = (*ptr + tkey->val) & ~tkey->mask;
+ 				break;
+ 			default:
+ 				pr_info("tc filter pedit bad command (%d)\n",
+ 					cmd);
+ 				goto bad;
+ 			}
+ 
+ 			*ptr = ((*ptr & tkey->mask) ^ val);
  			if (ptr == &_data)
 -				skb_store_bits(skb, hoffset + offset, ptr, 4);
 +				skb_store_bits(skb, off + offset, ptr, 4);
  		}
  
  		goto done;
* Unmerged path include/net/tc_act/tc_pedit.h
* Unmerged path include/uapi/linux/tc_act/tc_pedit.h
* Unmerged path net/sched/act_pedit.c
