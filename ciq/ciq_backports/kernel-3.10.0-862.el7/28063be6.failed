nfp: support LSO2 capability

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Edwin Peer <edwin.peer@netronome.com>
commit 28063be693c23340a17164a8e4bb347f0d9d1440
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/28063be6.failed

Firmware advertising the LSO2 capability exploits driver provided L3 and L4
offsets in order to avoid parsing packet headers in the TX path. The vlan
field in struct nfp_net_tx_desc is repurposed, making TXVLAN a mutually
exclusive configuration to LSO2.

	Signed-off-by: Edwin Peer <edwin.peer@netronome.com>
	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 28063be693c23340a17164a8e4bb347f0d9d1440)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
#	drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 57f4d1370a10,5e8049a84d16..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -794,13 -828,12 +799,20 @@@ static int nfp_net_tx(struct sk_buff *s
  
  	txd->flags = 0;
  	txd->mss = 0;
 -	txd->lso_hdrlen = 0;
 +	txd->l4_offset = 0;
 +
++<<<<<<< HEAD
 +	nfp_net_tx_tso(nn, r_vec, txbuf, txd, skb);
  
 +	nfp_net_tx_csum(nn, r_vec, txbuf, txd, skb);
 +
 +	if (skb_vlan_tag_present(skb) && nn->ctrl & NFP_NET_CFG_CTRL_TXVLAN) {
++=======
+ 	/* Do not reorder - tso may adjust pkt cnt, vlan may override fields */
+ 	nfp_net_tx_tso(r_vec, txbuf, txd, skb);
+ 	nfp_net_tx_csum(dp, r_vec, txbuf, txd, skb);
+ 	if (skb_vlan_tag_present(skb) && dp->ctrl & NFP_NET_CFG_CTRL_TXVLAN) {
++>>>>>>> 28063be693c2 (nfp: support LSO2 capability)
  		txd->flags |= PCIE_DESC_TX_VLAN;
  		txd->vlan = cpu_to_le16(skb_vlan_tag_get(skb));
  	}
@@@ -2632,7 -3037,7 +2645,11 @@@ void nfp_net_info(struct nfp_net *nn
  		nn->fw_ver.resv, nn->fw_ver.class,
  		nn->fw_ver.major, nn->fw_ver.minor,
  		nn->max_mtu);
++<<<<<<< HEAD
 +	nn_info(nn, "CAP: %#x %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n",
++=======
+ 	nn_info(nn, "CAP: %#x %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n",
++>>>>>>> 28063be693c2 (nfp: support LSO2 capability)
  		nn->cap,
  		nn->cap & NFP_NET_CFG_CTRL_PROMISC  ? "PROMISC "  : "",
  		nn->cap & NFP_NET_CFG_CTRL_L2BC     ? "L2BCFILT " : "",
@@@ -2788,11 -3253,13 +2806,17 @@@ int nfp_net_netdev_init(struct net_devi
  	}
  	if (nn->cap & NFP_NET_CFG_CTRL_GATHER) {
  		netdev->hw_features |= NETIF_F_SG;
 -		nn->dp.ctrl |= NFP_NET_CFG_CTRL_GATHER;
 +		nn->ctrl |= NFP_NET_CFG_CTRL_GATHER;
  	}
- 	if ((nn->cap & NFP_NET_CFG_CTRL_LSO) && nn->fw_ver.major > 2) {
+ 	if ((nn->cap & NFP_NET_CFG_CTRL_LSO && nn->fw_ver.major > 2) ||
+ 	    nn->cap & NFP_NET_CFG_CTRL_LSO2) {
  		netdev->hw_features |= NETIF_F_TSO | NETIF_F_TSO6;
++<<<<<<< HEAD
 +		nn->ctrl |= NFP_NET_CFG_CTRL_LSO;
++=======
+ 		nn->dp.ctrl |= nn->cap & NFP_NET_CFG_CTRL_LSO2 ?:
+ 					 NFP_NET_CFG_CTRL_LSO;
++>>>>>>> 28063be693c2 (nfp: support LSO2 capability)
  	}
  	if (nn->cap & NFP_NET_CFG_CTRL_RSS) {
  		netdev->hw_features |= NETIF_F_RXHASH;
@@@ -2813,18 -3280,25 +2837,27 @@@
  
  	if (nn->cap & NFP_NET_CFG_CTRL_RXVLAN) {
  		netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_RX;
 -		nn->dp.ctrl |= NFP_NET_CFG_CTRL_RXVLAN;
 +		nn->ctrl |= NFP_NET_CFG_CTRL_RXVLAN;
  	}
  	if (nn->cap & NFP_NET_CFG_CTRL_TXVLAN) {
++<<<<<<< HEAD
 +		netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_TX;
 +		nn->ctrl |= NFP_NET_CFG_CTRL_TXVLAN;
++=======
+ 		if (nn->cap & NFP_NET_CFG_CTRL_LSO2) {
+ 			nn_warn(nn, "Device advertises both TSO2 and TXVLAN. Refusing to enable TXVLAN.\n");
+ 		} else {
+ 			netdev->hw_features |= NETIF_F_HW_VLAN_CTAG_TX;
+ 			nn->dp.ctrl |= NFP_NET_CFG_CTRL_TXVLAN;
+ 		}
++>>>>>>> 28063be693c2 (nfp: support LSO2 capability)
  	}
  
  	netdev->features = netdev->hw_features;
  
 -	if (nfp_net_ebpf_capable(nn))
 -		netdev->hw_features |= NETIF_F_HW_TC;
 -
  	/* Advertise but disable TSO by default. */
  	netdev->features &= ~(NETIF_F_TSO | NETIF_F_TSO6);
- 	nn->dp.ctrl &= ~NFP_NET_CFG_CTRL_LSO;
+ 	nn->dp.ctrl &= ~NFP_NET_CFG_CTRL_LSO_ANY;
  
  	/* Allow L2 Broadcast and Multicast through by default, if supported */
  	if (nn->cap & NFP_NET_CFG_CTRL_L2BC)
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
index 92d76a860c19,1575e8fdb541..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
@@@ -123,6 -130,12 +123,15 @@@
  #define   NFP_NET_CFG_CTRL_L2SWITCH_LOCAL (0x1 << 23) /* Switch to local */
  #define   NFP_NET_CFG_CTRL_VXLAN	  (0x1 << 24) /* VXLAN tunnel support */
  #define   NFP_NET_CFG_CTRL_NVGRE	  (0x1 << 25) /* NVGRE tunnel support */
++<<<<<<< HEAD
++=======
+ #define   NFP_NET_CFG_CTRL_BPF		  (0x1 << 27) /* BPF offload capable */
+ #define   NFP_NET_CFG_CTRL_LSO2		  (0x1 << 28) /* LSO/TSO (version 2) */
+ 
+ #define NFP_NET_CFG_CTRL_LSO_ANY	(NFP_NET_CFG_CTRL_LSO | \
+ 					 NFP_NET_CFG_CTRL_LSO2)
+ 
++>>>>>>> 28063be693c2 (nfp: support LSO2 capability)
  #define NFP_NET_CFG_UPDATE              0x0004
  #define   NFP_NET_CFG_UPDATE_GEN          (0x1 <<  0) /* General update */
  #define   NFP_NET_CFG_UPDATE_RING         (0x1 <<  1) /* Ring config change */
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net.h b/drivers/net/ethernet/netronome/nfp/nfp_net.h
index 600c79f39fe0..97d03a59462a 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@ -151,8 +151,13 @@ struct nfp_net_tx_desc {
 			__le16 mss;	/* MSS to be used for LSO */
 			u8 l4_offset;	/* LSO, where the L4 data starts */
 			u8 flags;	/* TX Flags, see @PCIE_DESC_TX_* */
-
-			__le16 vlan;	/* VLAN tag to add if indicated */
+			union {
+				struct {
+					u8 l3_offset; /* L3 header offset */
+					u8 l4_offset; /* L4 header offset */
+				};
+				__le16 vlan; /* VLAN tag to add if indicated */
+			};
 			__le16 data_len; /* Length of frame + meta data */
 		} __packed;
 		__le32 vals[4];
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ctrl.h
