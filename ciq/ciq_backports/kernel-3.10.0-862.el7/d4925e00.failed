mm/gup: Factor out VMA fault permission checking

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [mm] gup: Factor out VMA fault permission checking (Rui Wang) [1272615]
Rebuild_FUZZ: 96.77%
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit d4925e00d59698a201231cf99dce47d8b922bb34
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d4925e00.failed

This code matches a fault condition up with the VMA and ensures
that the VMA allows the fault to be handled instead of just
erroring out.

We will be extending this in a moment to comprehend protection
keys.

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Denys Vlasenko <dvlasenk@redhat.com>
	Cc: Dominik Dingel <dingel@linux.vnet.ibm.com>
	Cc: Eric B Munson <emunson@akamai.com>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Jason Low <jason.low2@hp.com>
	Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Rik van Riel <riel@redhat.com>
	Cc: Sasha Levin <sasha.levin@oracle.com>
	Cc: linux-kernel@vger.kernel.org
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/20160212210216.C3824032@viggo.jf.intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit d4925e00d59698a201231cf99dce47d8b922bb34)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/gup.c
diff --cc mm/gup.c
index 3166366affd5,b935c2c71ec9..000000000000
--- a/mm/gup.c
+++ b/mm/gup.c
@@@ -560,15 -649,20 +572,19 @@@ bool vma_permits_fault(struct vm_area_s
   * such architectures, gup() will not be enough to make a subsequent access
   * succeed.
   *
 - * This function will not return with an unlocked mmap_sem. So it has not the
 - * same semantics wrt the @mm->mmap_sem as does filemap_fault().
 + * This should be called with the mm_sem held for read.
   */
  int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,
 -		     unsigned long address, unsigned int fault_flags,
 -		     bool *unlocked)
 +		     unsigned long address, unsigned int fault_flags)
  {
  	struct vm_area_struct *vma;
++<<<<<<< HEAD
 +	vm_flags_t vm_flags;
 +	int ret;
++=======
+ 	int ret, major = 0;
++>>>>>>> d4925e00d596 (mm/gup: Factor out VMA fault permission checking)
  
 -	if (unlocked)
 -		fault_flags |= FAULT_FLAG_ALLOW_RETRY;
 -
 -retry:
  	vma = find_extend_vma(mm, address);
  	if (!vma || address < vma->vm_start)
  		return -EFAULT;
* Unmerged path mm/gup.c
