scsi: lpfc: Fix loop mode target discovery

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] lpfc: Fix loop mode target discovery (Dick Kennedy) [1385844 1461977 1387768]
Rebuild_FUZZ: 92.31%
commit-author Dick Kennedy <dick.kennedy@broadcom.com>
commit 2877cbffb79ed121a6bcc5edbe629d3aba36cd29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2877cbff.failed

The driver does not discover targets when in loop mode.

The NLP type is correctly getting set when a fabric connection is
detected but, not for loop. The unknown NLP type means that the driver
does not issue a PRLI when in loop topology. Thus target discovery
fails.

Fix by checking the topology during discovery.  If it is loop, set the
NLP FC4 type to FCP.

	Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
	Signed-off-by: James Smart <james.smart@broadcom.com>
	Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 2877cbffb79ed121a6bcc5edbe629d3aba36cd29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/lpfc/lpfc_nportdisc.c
diff --cc drivers/scsi/lpfc/lpfc_nportdisc.c
index 56a3df4fddb0,95b2b43ac37d..000000000000
--- a/drivers/scsi/lpfc/lpfc_nportdisc.c
+++ b/drivers/scsi/lpfc/lpfc_nportdisc.c
@@@ -1616,7 -1701,38 +1616,42 @@@ lpfc_cmpl_reglogin_reglogin_issue(struc
  	ndlp->nlp_flag |= NLP_RPI_REGISTERED;
  
  	/* Only if we are not a fabric nport do we issue PRLI */
++<<<<<<< HEAD
 +	if (!(ndlp->nlp_type & NLP_FABRIC)) {
++=======
+ 	lpfc_printf_vlog(vport, KERN_INFO, LOG_DISCOVERY,
+ 			 "3066 RegLogin Complete on x%x x%x x%x\n",
+ 			 did, ndlp->nlp_type, ndlp->nlp_fc4_type);
+ 	if (!(ndlp->nlp_type & NLP_FABRIC) &&
+ 	    (phba->nvmet_support == 0)) {
+ 		/* The driver supports FCP and NVME concurrently.  If the
+ 		 * ndlp's nlp_fc4_type is still zero, the driver doesn't
+ 		 * know what PRLI to send yet.  Figure that out now and
+ 		 * call PRLI depending on the outcome.
+ 		 */
+ 		if (vport->fc_flag & FC_PT2PT) {
+ 			/* If we are pt2pt, there is no Fabric to determine
+ 			 * the FC4 type of the remote nport. So if NVME
+ 			 * is configured try it.
+ 			 */
+ 			ndlp->nlp_fc4_type |= NLP_FC4_FCP;
+ 			if ((phba->cfg_enable_fc4_type == LPFC_ENABLE_BOTH) ||
+ 			     (phba->cfg_enable_fc4_type == LPFC_ENABLE_NVME)) {
+ 				ndlp->nlp_fc4_type |= NLP_FC4_NVME;
+ 				/* We need to update the localport also */
+ 				lpfc_nvme_update_localport(vport);
+ 			}
+ 
+ 		} else if (phba->fc_topology == LPFC_TOPOLOGY_LOOP) {
+ 			ndlp->nlp_fc4_type |= NLP_FC4_FCP;
+ 
+ 		} else if (ndlp->nlp_fc4_type == 0) {
+ 			rc = lpfc_ns_cmd(vport, SLI_CTNS_GFT_ID,
+ 					 0, ndlp->nlp_DID);
+ 			return ndlp->nlp_state;
+ 		}
+ 
++>>>>>>> 2877cbffb79e (scsi: lpfc: Fix loop mode target discovery)
  		ndlp->nlp_prev_state = NLP_STE_REG_LOGIN_ISSUE;
  		lpfc_nlp_set_state(vport, ndlp, NLP_STE_PRLI_ISSUE);
  		lpfc_issue_els_prli(vport, ndlp, 0);
* Unmerged path drivers/scsi/lpfc/lpfc_nportdisc.c
