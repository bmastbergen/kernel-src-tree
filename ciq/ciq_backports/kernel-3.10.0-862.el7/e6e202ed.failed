target: initialize the nacl base CIT begfore init_nodeacl

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [target] initialize the nacl base CIT begfore init_nodeacl (Maurizio Lombardi) [1366062]
Rebuild_FUZZ: 92.45%
commit-author Christoph Hellwig <hch@lst.de>
commit e6e202edf000004422a901dfa301d600e32f17e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e6e202ed.failed

The iSCSI targets wants to add a default group, for which we need to
have the list of default groups initialized previously.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
(cherry picked from commit e6e202edf000004422a901dfa301d600e32f17e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/target_core_fabric_configfs.c
diff --cc drivers/target/target_core_fabric_configfs.c
index 0c3f90130b7d,5991a4f816d8..000000000000
--- a/drivers/target/target_core_fabric_configfs.c
+++ b/drivers/target/target_core_fabric_configfs.c
@@@ -496,26 -381,38 +496,38 @@@ static struct config_group *target_fabr
  	if (IS_ERR(se_nacl))
  		return ERR_CAST(se_nacl);
  
++<<<<<<< HEAD
 +	nacl_cg = &se_nacl->acl_group;
 +	nacl_cg->default_groups = se_nacl->acl_default_groups;
 +	nacl_cg->default_groups[0] = &se_nacl->acl_attrib_group;
 +	nacl_cg->default_groups[1] = &se_nacl->acl_auth_group;
 +	nacl_cg->default_groups[2] = &se_nacl->acl_param_group;
 +	nacl_cg->default_groups[3] = &se_nacl->acl_fabric_stat_group;
 +	nacl_cg->default_groups[4] = NULL;
 +
++=======
++>>>>>>> e6e202edf000 (target: initialize the nacl base CIT begfore init_nodeacl)
  	config_group_init_type_name(&se_nacl->acl_group, name,
 -			&tf->tf_tpg_nacl_base_cit);
 -
 +			&tf->tf_cit_tmpl.tfc_tpg_nacl_base_cit);
  	config_group_init_type_name(&se_nacl->acl_attrib_group, "attrib",
 -			&tf->tf_tpg_nacl_attrib_cit);
 -	configfs_add_default_group(&se_nacl->acl_attrib_group,
 -			&se_nacl->acl_group);
 -
 +			&tf->tf_cit_tmpl.tfc_tpg_nacl_attrib_cit);
  	config_group_init_type_name(&se_nacl->acl_auth_group, "auth",
 -			&tf->tf_tpg_nacl_auth_cit);
 -	configfs_add_default_group(&se_nacl->acl_auth_group,
 -			&se_nacl->acl_group);
 -
 +			&tf->tf_cit_tmpl.tfc_tpg_nacl_auth_cit);
  	config_group_init_type_name(&se_nacl->acl_param_group, "param",
 -			&tf->tf_tpg_nacl_param_cit);
 -	configfs_add_default_group(&se_nacl->acl_param_group,
 -			&se_nacl->acl_group);
 -
 +			&tf->tf_cit_tmpl.tfc_tpg_nacl_param_cit);
  	config_group_init_type_name(&se_nacl->acl_fabric_stat_group,
 -			"fabric_statistics", &tf->tf_tpg_nacl_stat_cit);
 -	configfs_add_default_group(&se_nacl->acl_fabric_stat_group,
 -			&se_nacl->acl_group);
 +			"fabric_statistics",
 +			&tf->tf_cit_tmpl.tfc_tpg_nacl_stat_cit);
  
+ 	if (tf->tf_ops->fabric_init_nodeacl) {
+ 		int ret = tf->tf_ops->fabric_init_nodeacl(se_nacl, name);
+ 		if (ret) {
+ 			configfs_remove_default_groups(&se_nacl->acl_fabric_stat_group);
+ 			core_tpg_del_initiator_node_acl(se_nacl);
+ 			return ERR_PTR(ret);
+ 		}
+ 	}
+ 
  	return &se_nacl->acl_group;
  }
  
* Unmerged path drivers/target/target_core_fabric_configfs.c
