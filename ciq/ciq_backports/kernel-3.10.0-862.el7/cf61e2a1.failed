memremap: don't modify flags

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Brian Starkey <brian.starkey@arm.com>
commit cf61e2a1487d833e4748dead4096584de70bf742
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/cf61e2a1.failed

These patches implement a MEMREMAP_WC flag for memremap(), which can be
used to obtain writecombine mappings.  This is then used for setting up
dma_coherent_mem regions which use the DMA_MEMORY_MAP flag.

The motivation is to fix an alignment fault on arm64, and the suggestion
to implement MEMREMAP_WC for this case was made at [1].  That particular
issue is handled in patch 4, which makes sure that the appropriate
memset function is used when zeroing allocations mapped as IO memory.

This patch (of 4):

Don't modify the flags input argument to memremap(). MEMREMAP_WB is
already a special case so we can check for it directly instead of
clearing flag bits in each mapper.

	Signed-off-by: Brian Starkey <brian.starkey@arm.com>
	Cc: Catalin Marinas <catalin.marinas@arm.com>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit cf61e2a1487d833e4748dead4096584de70bf742)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/memremap.c
diff --cc kernel/memremap.c
index 10769b16af58,e5e685e6ff2a..000000000000
--- a/kernel/memremap.c
+++ b/kernel/memremap.c
@@@ -69,9 -60,13 +69,12 @@@ static void *try_ram_remap(resource_siz
   */
  void *memremap(resource_size_t offset, size_t size, unsigned long flags)
  {
 -	int is_ram = region_intersects(offset, size,
 -				       IORESOURCE_SYSTEM_RAM, IORES_DESC_NONE);
 +	int is_ram = region_intersects_ram(offset, size);
  	void *addr = NULL;
  
+ 	if (!flags)
+ 		return NULL;
+ 
  	if (is_ram == REGION_MIXED) {
  		WARN_ONCE(1, "memremap attempted on mixed range %pa size: %#lx\n",
  				&offset, (unsigned long) size);
@@@ -94,21 -88,19 +96,26 @@@
  	}
  
  	/*
- 	 * If we don't have a mapping yet and more request flags are
- 	 * pending then we will be attempting to establish a new virtual
+ 	 * If we don't have a mapping yet and other request flags are
+ 	 * present then we will be attempting to establish a new virtual
  	 * address mapping.  Enforce that this mapping is not aliasing
 -	 * System RAM.
 +	 * "System RAM"
  	 */
- 	if (!addr && is_ram == REGION_INTERSECTS && flags) {
+ 	if (!addr && is_ram == REGION_INTERSECTS && flags != MEMREMAP_WB) {
  		WARN_ONCE(1, "memremap attempted on ram %pa size: %#lx\n",
  				&offset, (unsigned long) size);
  		return NULL;
  	}
  
++<<<<<<< HEAD
 +	if (!addr && (flags & MEMREMAP_WT)) {
 +		flags &= ~MEMREMAP_WT;
 +		addr = ioremap_nocache(offset, size);
 +	}
++=======
+ 	if (!addr && (flags & MEMREMAP_WT))
+ 		addr = ioremap_wt(offset, size);
++>>>>>>> cf61e2a1487d (memremap: don't modify flags)
  
  	return addr;
  }
* Unmerged path kernel/memremap.c
