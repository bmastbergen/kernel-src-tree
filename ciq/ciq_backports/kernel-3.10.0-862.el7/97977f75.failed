dmaengine: dw: went back to plain {request,free}_irq() calls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [sound] alsa: dmaengine: dw: went back to plain {request,free}_irq() calls (Jaroslav Kysela) [1463624]
Rebuild_FUZZ: 95.24%
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 97977f7576a89cb9436c000ae703c0d515e748ac
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/97977f75.failed

The commit dbde5c29 "dw_dmac: use devm_* functions to simplify code" turns
probe function to use devm_* helpers and simultaneously brings a regression. We
need to ensure irq is disabled, followed by ensuring that don't schedule any
more tasklets and then its safe to use tasklet_kill().

The free_irq() will ensure that the irq is disabled and also wait till all
scheduled interrupts are executed by invoking synchronize_irq(). So we need to
only do tasklet_kill() after invoking free_irq().

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Cc: stable@vger.kernel.org # v3.11+
	Signed-off-by: Vinod Koul <vinod.koul@intel.com>
(cherry picked from commit 97977f7576a89cb9436c000ae703c0d515e748ac)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/dma/dw_dmac.c
diff --cc drivers/dma/dw_dmac.c
index 5d0ba000e772,7a740769c2fa..000000000000
--- a/drivers/dma/dw_dmac.c
+++ b/drivers/dma/dw_dmac.c
@@@ -1745,18 -1548,11 +1745,21 @@@ static int dw_probe(struct platform_dev
  	/* Disable BLOCK interrupts as well */
  	channel_clear_bit(dw, MASK.BLOCK, dw->all_chan_mask);
  
++<<<<<<< HEAD:drivers/dma/dw_dmac.c
 +	err = devm_request_irq(&pdev->dev, irq, dw_dma_interrupt, 0,
 +			       "dw_dmac", dw);
 +	if (err)
 +		return err;
 +
 +	platform_set_drvdata(pdev, dw);
 +
++=======
++>>>>>>> 97977f7576a8 (dmaengine: dw: went back to plain {request,free}_irq() calls):drivers/dma/dw/core.c
  	/* Create a pool of consistent memory blocks for hardware descriptors */
 -	dw->desc_pool = dmam_pool_create("dw_dmac_desc_pool", chip->dev,
 +	dw->desc_pool = dmam_pool_create("dw_dmac_desc_pool", &pdev->dev,
  					 sizeof(struct dw_desc), 4, 0);
  	if (!dw->desc_pool) {
 -		dev_err(chip->dev, "No memory for descriptors dma pool\n");
 +		dev_err(&pdev->dev, "No memory for descriptors dma pool\n");
  		return -ENOMEM;
  	}
  
* Unmerged path drivers/dma/dw_dmac.c
