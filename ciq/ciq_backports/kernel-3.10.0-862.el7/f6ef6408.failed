ibmvnic: Move ibmvnic adapter intialization to its own routine

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author John Allen <jallen@linux.vnet.ibm.com>
commit f6ef6408e840f6e1a7c016d6dd1b4341bc1023f6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/f6ef6408.failed

The intialization of the ibmvnic driver with respect to the virtual
server it connects to should be moved to its own routine. This will
alolow the driver to initiate this process from places outside of
the drivers probe routine.

	Signed-off-by: Nathan Fontenot <nfont@linux.vnet.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit f6ef6408e840f6e1a7c016d6dd1b4341bc1023f6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/ibm/ibmvnic.c
diff --cc drivers/net/ethernet/ibm/ibmvnic.c
index 6a325c61534d,42274bf4bc09..000000000000
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@@ -3814,80 -3884,23 +3859,88 @@@ static int ibmvnic_probe(struct vio_de
  	spin_lock_init(&adapter->error_list_lock);
  	spin_lock_init(&adapter->inflight_lock);
  
- 	adapter->stats_token = dma_map_single(&dev->dev, &adapter->stats,
- 					      sizeof(struct ibmvnic_statistics),
- 					      DMA_FROM_DEVICE);
- 	if (dma_mapping_error(&dev->dev, adapter->stats_token)) {
- 		if (!firmware_has_feature(FW_FEATURE_CMO))
- 			dev_err(&dev->dev, "Couldn't map stats buffer\n");
- 		rc = -ENOMEM;
- 		goto free_crq;
+ 	rc = ibmvnic_init(adapter);
+ 	if (rc) {
+ 		free_netdev(netdev);
+ 		return rc;
  	}
  
++<<<<<<< HEAD
 +	snprintf(buf, sizeof(buf), "ibmvnic_%x", dev->unit_address);
 +	ent = debugfs_create_dir(buf, NULL);
 +	if (!ent || IS_ERR(ent)) {
 +		dev_info(&dev->dev, "debugfs create directory failed\n");
 +		adapter->debugfs_dir = NULL;
 +	} else {
 +		adapter->debugfs_dir = ent;
 +		ent = debugfs_create_file("dump", S_IRUGO, adapter->debugfs_dir,
 +					  netdev, &ibmvnic_dump_ops);
 +		if (!ent || IS_ERR(ent)) {
 +			dev_info(&dev->dev,
 +				 "debugfs create dump file failed\n");
 +			adapter->debugfs_dump = NULL;
 +		} else {
 +			adapter->debugfs_dump = ent;
 +		}
 +	}
 +
 +	init_completion(&adapter->init_done);
 +	ibmvnic_send_crq_init(adapter);
 +	if (!wait_for_completion_timeout(&adapter->init_done, timeout))
 +		return 0;
 +
 +	do {
 +		if (adapter->renegotiate) {
 +			adapter->renegotiate = false;
 +			release_sub_crqs_no_irqs(adapter);
 +
 +			reinit_completion(&adapter->init_done);
 +			send_cap_queries(adapter);
 +			if (!wait_for_completion_timeout(&adapter->init_done,
 +							 timeout))
 +				return 0;
 +		}
 +	} while (adapter->renegotiate);
 +
 +	rc = init_sub_crq_irqs(adapter);
 +	if (rc) {
 +		dev_err(&dev->dev, "failed to initialize sub crq irqs\n");
 +		goto free_debugfs;
 +	}
 +
 +	netdev->real_num_tx_queues = adapter->req_tx_queues;
 +	netdev->mtu = adapter->req_mtu;
++=======
+ 	netdev->mtu = adapter->req_mtu - ETH_HLEN;
++>>>>>>> f6ef6408e840 (ibmvnic: Move ibmvnic adapter intialization to its own routine)
  
  	rc = register_netdev(netdev);
  	if (rc) {
  		dev_err(&dev->dev, "failed to register netdev rc=%d\n", rc);
++<<<<<<< HEAD
 +		goto free_sub_crqs;
++=======
+ 		free_netdev(netdev);
+ 		return rc;
++>>>>>>> f6ef6408e840 (ibmvnic: Move ibmvnic adapter intialization to its own routine)
  	}
  	dev_info(&dev->dev, "ibmvnic registered\n");
  
  	return 0;
++<<<<<<< HEAD
 +
 +free_sub_crqs:
 +	release_sub_crqs(adapter);
 +free_debugfs:
 +	if (adapter->debugfs_dir && !IS_ERR(adapter->debugfs_dir))
 +		debugfs_remove_recursive(adapter->debugfs_dir);
 +free_crq:
 +	ibmvnic_release_crq_queue(adapter);
 +free_netdev:
 +	free_netdev(netdev);
 +	return rc;
++=======
++>>>>>>> f6ef6408e840 (ibmvnic: Move ibmvnic adapter intialization to its own routine)
  }
  
  static int ibmvnic_remove(struct vio_dev *dev)
* Unmerged path drivers/net/ethernet/ibm/ibmvnic.c
