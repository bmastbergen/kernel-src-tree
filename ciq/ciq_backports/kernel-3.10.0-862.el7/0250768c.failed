mlxsw: spectrum_router: Add IPv6 neighbor access helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Arkadi Sharshevsky <arkadis@mellanox.com>
commit 0250768c6c6e131bded979fd939bc4642a506a07
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0250768c.failed

Add helper for accessing destination IP in case of IPv6 neighbor.

	Signed-off-by: Arkadi Sharshevsky <arkadis@mellanox.com>
	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0250768c6c6e131bded979fd939bc4642a506a07)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.h
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index 6908726c154c,db57c0c4c9d8..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -613,6 -911,62 +613,65 @@@ static const struct rhashtable_params m
  	.key_len = sizeof(struct mlxsw_sp_neigh_key),
  };
  
++<<<<<<< HEAD
++=======
+ struct mlxsw_sp_neigh_entry *
+ mlxsw_sp_rif_neigh_next(struct mlxsw_sp_rif *rif,
+ 			struct mlxsw_sp_neigh_entry *neigh_entry)
+ {
+ 	if (!neigh_entry) {
+ 		if (list_empty(&rif->neigh_list))
+ 			return NULL;
+ 		else
+ 			return list_first_entry(&rif->neigh_list,
+ 						typeof(*neigh_entry),
+ 						rif_list_node);
+ 	}
+ 	if (neigh_entry->rif_list_node.next == &rif->neigh_list)
+ 		return NULL;
+ 	return list_next_entry(neigh_entry, rif_list_node);
+ }
+ 
+ int mlxsw_sp_neigh_entry_type(struct mlxsw_sp_neigh_entry *neigh_entry)
+ {
+ 	return neigh_entry->key.n->tbl->family;
+ }
+ 
+ unsigned char *
+ mlxsw_sp_neigh_entry_ha(struct mlxsw_sp_neigh_entry *neigh_entry)
+ {
+ 	return neigh_entry->ha;
+ }
+ 
+ u32 mlxsw_sp_neigh4_entry_dip(struct mlxsw_sp_neigh_entry *neigh_entry)
+ {
+ 	struct neighbour *n;
+ 
+ 	n = neigh_entry->key.n;
+ 	return ntohl(*((__be32 *) n->primary_key));
+ }
+ 
+ struct in6_addr *
+ mlxsw_sp_neigh6_entry_dip(struct mlxsw_sp_neigh_entry *neigh_entry)
+ {
+ 	struct neighbour *n;
+ 
+ 	n = neigh_entry->key.n;
+ 	return (struct in6_addr *) &n->primary_key;
+ }
+ 
+ int mlxsw_sp_neigh_counter_get(struct mlxsw_sp *mlxsw_sp,
+ 			       struct mlxsw_sp_neigh_entry *neigh_entry,
+ 			       u64 *p_counter)
+ {
+ 	if (!neigh_entry->counter_valid)
+ 		return -EINVAL;
+ 
+ 	return mlxsw_sp_flow_counter_get(mlxsw_sp, neigh_entry->counter_index,
+ 					 p_counter, NULL);
+ }
+ 
++>>>>>>> 0250768c6c6e (mlxsw: spectrum_router: Add IPv6 neighbor access helper)
  static struct mlxsw_sp_neigh_entry *
  mlxsw_sp_neigh_entry_alloc(struct mlxsw_sp *mlxsw_sp, struct neighbour *n,
  			   u16 rif)
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.h
