tpm: fix byte order related arithmetic inconsistency in tpm_getcap()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
commit 124bdcf4a697f9672d1150de60c5ea489bcad201
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/124bdcf4.failed

You should not do arithmetic with __be32 or __le32 types because
sometimes it results incorrect results. Calculations must be done only
with integers that are in in the CPU byte order. This commit migrates
tpm_getcap() to struct tpm_buf in order to sort out these issues.

	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Reviewed-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
(cherry picked from commit 124bdcf4a697f9672d1150de60c5ea489bcad201)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/tpm/tpm-interface.c
diff --cc drivers/char/tpm/tpm-interface.c
index 0d319f9dabc5,be5415923886..000000000000
--- a/drivers/char/tpm/tpm-interface.c
+++ b/drivers/char/tpm/tpm-interface.c
@@@ -513,18 -566,19 +514,23 @@@ ssize_t tpm_getcap(struct tpm_chip *chi
  	} else {
  		if (subcap_id == TPM_CAP_FLAG_PERM ||
  		    subcap_id == TPM_CAP_FLAG_VOL)
- 			tpm_cmd.params.getcap_in.cap =
- 				cpu_to_be32(TPM_CAP_FLAG);
+ 			tpm_buf_append_u32(&buf, TPM_CAP_FLAG);
  		else
- 			tpm_cmd.params.getcap_in.cap =
- 				cpu_to_be32(TPM_CAP_PROP);
- 		tpm_cmd.params.getcap_in.subcap_size = cpu_to_be32(4);
- 		tpm_cmd.params.getcap_in.subcap = cpu_to_be32(subcap_id);
+ 			tpm_buf_append_u32(&buf, TPM_CAP_PROP);
+ 
+ 		tpm_buf_append_u32(&buf, 4);
+ 		tpm_buf_append_u32(&buf, subcap_id);
  	}
++<<<<<<< HEAD
 +	rc = tpm_transmit_cmd(chip, &tpm_cmd, TPM_INTERNAL_RESULT_SIZE,
++=======
+ 	rc = tpm_transmit_cmd(chip, NULL, buf.data, PAGE_SIZE,
++>>>>>>> 124bdcf4a697 (tpm: fix byte order related arithmetic inconsistency in tpm_getcap())
  			      min_cap_length, 0, desc);
  	if (!rc)
- 		*cap = tpm_cmd.params.getcap_out.cap;
+ 		*cap = *(cap_t *)&buf.data[TPM_HEADER_SIZE + 4];
+ 
+ 	tpm_buf_destroy(&buf);
  	return rc;
  }
  EXPORT_SYMBOL_GPL(tpm_getcap);
* Unmerged path drivers/char/tpm/tpm-interface.c
diff --git a/drivers/char/tpm/tpm.h b/drivers/char/tpm/tpm.h
index 32abf1b43b7e..b33f7136b69e 100644
--- a/drivers/char/tpm/tpm.h
+++ b/drivers/char/tpm/tpm.h
@@ -310,17 +310,6 @@ enum tpm_sub_capabilities {
 	TPM_CAP_PROP_TIS_DURATION = 0x120,
 };
 
-struct	tpm_getcap_params_in {
-	__be32	cap;
-	__be32	subcap_size;
-	__be32	subcap;
-} __packed;
-
-struct	tpm_getcap_params_out {
-	__be32	cap_size;
-	cap_t	cap;
-} __packed;
-
 struct	tpm_readpubek_params_out {
 	u8	algorithm[4];
 	u8	encscheme[2];
@@ -370,10 +359,8 @@ struct tpm_startup_in {
 } __packed;
 
 typedef union {
-	struct	tpm_getcap_params_out getcap_out;
 	struct	tpm_readpubek_params_out readpubek_out;
 	u8	readpubek_out_buffer[sizeof(struct tpm_readpubek_params_out)];
-	struct	tpm_getcap_params_in getcap_in;
 	struct	tpm_pcrread_in	pcrread_in;
 	struct	tpm_pcrread_out	pcrread_out;
 	struct	tpm_pcrextend_in pcrextend_in;
