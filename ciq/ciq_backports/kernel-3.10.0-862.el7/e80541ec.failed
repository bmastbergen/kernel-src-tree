net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5: Add CONFIG_MLX5_ESWITCH Kconfig (Kamal Heib) [1456694]
Rebuild_FUZZ: 94.87%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit e80541ecabd57b69726232b89242e28d8123cccc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e80541ec.failed

Allow to selectively build the driver with or without sriov eswitch, VF
representors and TC offloads.

Also remove the need of two ndo ops structures (sriov & basic)
and keep only one unified ndo ops, compile out VF SRIOV ndos when not
needed (MLX5_ESWITCH=n), and for VF netdev calling those ndos will result
in returning -EPERM.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Cc: Jes Sorensen <jsorensen@fb.com>
	Cc: kernel-team@fb.com
(cherry picked from commit e80541ecabd57b69726232b89242e28d8123cccc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/Kconfig
#	drivers/net/ethernet/mellanox/mlx5/core/Makefile
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
#	drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
#	drivers/net/ethernet/mellanox/mlx5/core/eq.c
#	drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Kconfig
index f02f05f1f135,fdaef00465d7..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
@@@ -19,6 -34,27 +19,30 @@@ config MLX5_CORE_E
  	---help---
  	  Ethernet support in Mellanox Technologies ConnectX-4 NIC.
  
++<<<<<<< HEAD
++=======
+ config MLX5_MPFS
+         bool "Mellanox Technologies MLX5 MPFS support"
+         depends on MLX5_CORE_EN
+ 	default y
+         ---help---
+ 	  Mellanox Technologies Ethernet Multi-Physical Function Switch (MPFS)
+           support in ConnectX NIC. MPFs is required for when multi-PF configuration
+           is enabled to allow passing user configured unicast MAC addresses to the
+           requesting PF.
+ 
+ config MLX5_ESWITCH
+ 	bool "Mellanox Technologies MLX5 SRIOV E-Switch support"
+ 	depends on MLX5_CORE_EN
+ 	default y
+ 	---help---
+ 	  Mellanox Technologies Ethernet SRIOV E-Switch support in ConnectX NIC.
+           E-Switch provides internal SRIOV packet steering and switching for the
+           enabled VFs and PF in two available modes:
+                 Legacy SRIOV mode (L2 mac vlan steering based).
+                 Switchdev mode (eswitch offloads).
+ 
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  config MLX5_CORE_EN_DCB
  	bool "Data Center Bridging (DCB) Support"
  	default y
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Makefile
index 9e644615f07a,22ed657d263a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Makefile
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
@@@ -3,13 -4,24 +3,29 @@@ obj-$(CONFIG_MLX5_CORE)		+= mlx5_core.
  mlx5_core-y :=	main.o cmd.o debugfs.o fw.o eq.o uar.o pagealloc.o \
  		health.o mcg.o cq.o srq.o alloc.o qp.o port.o mr.o pd.o \
  		mad.o transobj.o vport.o sriov.o fs_cmd.o fs_core.o \
 -		fs_counters.o rl.o lag.o dev.o wq.o lib/gid.o
 +		fs_counters.o rl.o lag.o dev.o
  
++<<<<<<< HEAD
 +mlx5_core-$(CONFIG_MLX5_CORE_EN) += wq.o eswitch.o eswitch_offloads.o \
 +		en_main.o en_common.o en_fs.o en_ethtool.o en_tx.o \
 +		en_rx.o en_rx_am.o en_txrx.o en_clock.o vxlan.o \
 +		en_tc.o en_arfs.o en_rep.o en_fs_ethtool.o en_selftest.o
 +
++=======
+ mlx5_core-$(CONFIG_MLX5_ACCEL) += accel/ipsec.o
+ 
+ mlx5_core-$(CONFIG_MLX5_FPGA) += fpga/cmd.o fpga/core.o fpga/conn.o fpga/sdk.o \
+ 		fpga/ipsec.o
+ 
+ mlx5_core-$(CONFIG_MLX5_CORE_EN) += en_main.o en_common.o en_fs.o en_ethtool.o \
+ 		en_tx.o en_rx.o en_rx_am.o en_txrx.o en_clock.o vxlan.o \
+ 		en_arfs.o en_fs_ethtool.o en_selftest.o
+ 
+ mlx5_core-$(CONFIG_MLX5_MPFS) += lib/mpfs.o
+ 
+ mlx5_core-$(CONFIG_MLX5_ESWITCH) += eswitch.o eswitch_offloads.o en_rep.o en_tc.o
+ 
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  mlx5_core-$(CONFIG_MLX5_CORE_EN_DCB) +=  en_dcbnl.o
  
 -mlx5_core-$(CONFIG_MLX5_CORE_IPOIB) += ipoib/ipoib.o ipoib/ethtool.o
 -
 -mlx5_core-$(CONFIG_MLX5_EN_IPSEC) += en_accel/ipsec.o en_accel/ipsec_rxtx.o \
 -		en_accel/ipsec_stats.o
 +mlx5_core-$(CONFIG_MLX5_CORE_IPOIB) += ipoib.o
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 5a367b6ed375,b19e9d235008..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -2608,8 -3022,10 +2608,9 @@@ static int mlx5e_setup_tc(struct net_de
  }
  
  static int mlx5e_ndo_setup_tc(struct net_device *dev, u32 handle,
 -			      u32 chain_index, __be16 proto,
 -			      struct tc_to_netdev *tc)
 +			      __be16 proto, struct tc_to_netdev *tc)
  {
+ #ifdef CONFIG_MLX5_ESWITCH
  	struct mlx5e_priv *priv = netdev_priv(dev);
  
  	if (TC_H_MAJ(handle) != TC_H_MAJ(TC_H_INGRESS))
@@@ -3012,9 -3455,10 +3015,10 @@@ static int mlx5e_get_vf_stats(struct ne
  	return mlx5_eswitch_get_vport_stats(mdev->priv.eswitch, vf + 1,
  					    vf_stats);
  }
+ #endif
  
 -static void mlx5e_add_vxlan_port(struct net_device *netdev,
 -				 struct udp_tunnel_info *ti)
 +void mlx5e_add_vxlan_port(struct net_device *netdev,
 +			  struct udp_tunnel_info *ti)
  {
  	struct mlx5e_priv *priv = netdev_priv(netdev);
  
@@@ -3128,8 -3689,7 +3132,12 @@@ static void mlx5e_netpoll(struct net_de
  }
  #endif
  
++<<<<<<< HEAD
 +static const struct net_device_ops mlx5e_netdev_ops_basic = {
 +	.ndo_size                = sizeof(struct net_device_ops),
++=======
+ static const struct net_device_ops mlx5e_netdev_ops = {
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  	.ndo_open                = mlx5e_open,
  	.ndo_stop                = mlx5e_close,
  	.ndo_start_xmit          = mlx5e_xmit,
@@@ -3151,44 -3714,20 +3159,55 @@@
  #ifdef CONFIG_NET_POLL_CONTROLLER
  	.ndo_poll_controller     = mlx5e_netpoll,
  #endif
++<<<<<<< HEAD
 +};
 +
 +static const struct net_device_ops mlx5e_netdev_ops_sriov = {
 +	.ndo_size                = sizeof(struct net_device_ops),
 +	.ndo_open                = mlx5e_open,
 +	.ndo_stop                = mlx5e_close,
 +	.ndo_start_xmit          = mlx5e_xmit,
 +	.ndo_setup_tc            = mlx5e_ndo_setup_tc,
 +	.ndo_select_queue        = mlx5e_select_queue,
 +	.ndo_get_stats64         = mlx5e_get_stats,
 +	.ndo_set_rx_mode         = mlx5e_set_rx_mode,
 +	.ndo_set_mac_address     = mlx5e_set_mac,
 +	.ndo_vlan_rx_add_vid     = mlx5e_vlan_rx_add_vid,
 +	.ndo_vlan_rx_kill_vid    = mlx5e_vlan_rx_kill_vid,
 +	.ndo_set_features        = mlx5e_set_features,
 +	.ndo_change_mtu          = mlx5e_change_mtu,
 +	.ndo_do_ioctl            = mlx5e_ioctl,
 +	.extended.ndo_udp_tunnel_add	 = mlx5e_add_vxlan_port,
 +	.extended.ndo_udp_tunnel_del	 = mlx5e_del_vxlan_port,
 +	.extended.ndo_set_tx_maxrate      = mlx5e_set_tx_maxrate,
 +	.ndo_features_check      = mlx5e_features_check,
 +#ifdef CONFIG_RFS_ACCEL
 +	.ndo_rx_flow_steer	 = mlx5e_rx_flow_steer,
 +#endif
++=======
+ #ifdef CONFIG_MLX5_ESWITCH
+ 	/* SRIOV E-Switch NDOs */
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  	.ndo_set_vf_mac          = mlx5e_set_vf_mac,
 -	.ndo_set_vf_vlan         = mlx5e_set_vf_vlan,
  	.ndo_set_vf_spoofchk     = mlx5e_set_vf_spoofchk,
 -	.ndo_set_vf_trust        = mlx5e_set_vf_trust,
 +	.extended.ndo_set_vf_trust        = mlx5e_set_vf_trust,
 +	.extended.ndo_set_vf_vlan = mlx5e_set_vf_vlan,
  	.ndo_set_vf_rate         = mlx5e_set_vf_rate,
  	.ndo_get_vf_config       = mlx5e_get_vf_config,
  	.ndo_set_vf_link_state   = mlx5e_set_vf_link_state,
  	.ndo_get_vf_stats        = mlx5e_get_vf_stats,
++<<<<<<< HEAD
 +	.ndo_tx_timeout          = mlx5e_tx_timeout,
 +#ifdef CONFIG_NET_POLL_CONTROLLER
 +	.ndo_poll_controller     = mlx5e_netpoll,
 +#endif
 +	.extended.ndo_has_offload_stats	 = mlx5e_has_offload_stats,
 +	.extended.ndo_get_offload_stats	 = mlx5e_get_offload_stats,
++=======
+ 	.ndo_has_offload_stats	 = mlx5e_has_offload_stats,
+ 	.ndo_get_offload_stats	 = mlx5e_get_offload_stats,
+ #endif
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  };
  
  static int mlx5e_check_required_hca_cap(struct mlx5_core_dev *mdev)
@@@ -3468,10 -4049,12 +3486,15 @@@ static void mlx5e_build_nic_netdev(stru
  
  	mlx5e_set_netdev_dev_addr(netdev);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_NET_SWITCHDEV
 +	if (MLX5_CAP_GEN(mdev, vport_group_manager))
++=======
+ #if IS_ENABLED(CONFIG_NET_SWITCHDEV) && IS_ENABLED(CONFIG_MLX5_ESWITCH)
+ 	if (MLX5_VPORT_MANAGER(mdev))
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  		netdev->switchdev_ops = &mlx5e_switchdev_ops;
  #endif
 -
 -	mlx5e_ipsec_build_netdev(priv);
  }
  
  static void mlx5e_create_q_counter(struct mlx5e_priv *priv)
@@@ -3860,13 -4408,20 +3883,25 @@@ static void *mlx5e_add(struct mlx5_core
  	if (err)
  		return NULL;
  
++<<<<<<< HEAD
 +	if (MLX5_CAP_GEN(mdev, vport_group_manager))
 +		ppriv = &esw->offloads.vport_reps[0];
++=======
+ #ifdef CONFIG_MLX5_ESWITCH
+ 	if (MLX5_VPORT_MANAGER(mdev)) {
+ 		rpriv = mlx5e_alloc_nic_rep_priv(mdev);
+ 		if (!rpriv) {
+ 			mlx5_core_warn(mdev, "Failed to alloc NIC rep priv data\n");
+ 			return NULL;
+ 		}
+ 	}
+ #endif
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  
 -	netdev = mlx5e_create_netdev(mdev, &mlx5e_nic_profile, rpriv);
 +	netdev = mlx5e_create_netdev(mdev, &mlx5e_nic_profile, ppriv);
  	if (!netdev) {
  		mlx5_core_err(mdev, "mlx5e_create_netdev failed\n");
 -		goto err_free_rpriv;
 +		goto err_unregister_reps;
  	}
  
  	priv = netdev_priv(netdev);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/eq.c
index 25afb9383ccb,de704ff5619a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@@ -35,9 -35,8 +35,12 @@@
  #include <linux/mlx5/driver.h>
  #include <linux/mlx5/cmd.h>
  #include "mlx5_core.h"
++<<<<<<< HEAD
 +#ifdef CONFIG_MLX5_CORE_EN
++=======
+ #include "fpga/core.h"
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  #include "eswitch.h"
- #endif
  
  enum {
  	MLX5_EQE_SIZE		= sizeof(struct mlx5_eqe),
@@@ -278,13 -465,6 +281,16 @@@ static int mlx5_eq_int(struct mlx5_core
  			}
  			break;
  
++<<<<<<< HEAD
 +#ifdef CONFIG_INFINIBAND_ON_DEMAND_PAGING
 +		case MLX5_EVENT_TYPE_PAGE_FAULT:
 +			mlx5_eq_pagefault(dev, eqe);
 +			break;
 +#endif
 +
 +#ifdef CONFIG_MLX5_CORE_EN
++=======
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  		case MLX5_EVENT_TYPE_NIC_VPORT_CHANGE:
  			mlx5_eswitch_vport_event(dev->priv.eswitch, eqe);
  			break;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/main.c
index 83ed808b199e,124c7c3c3a00..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@@ -53,9 -53,11 +53,17 @@@
  #include <net/devlink.h>
  #include "mlx5_core.h"
  #include "fs_core.h"
++<<<<<<< HEAD
 +#ifdef CONFIG_MLX5_CORE_EN
 +#include "eswitch.h"
 +#endif
++=======
+ #include "lib/mpfs.h"
+ #include "eswitch.h"
+ #include "lib/mlx5.h"
+ #include "fpga/core.h"
+ #include "accel/ipsec.h"
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  
  MODULE_AUTHOR("Eli Cohen <eli@mellanox.com>");
  MODULE_DESCRIPTION("Mellanox Connect-IB, ConnectX-4 core driver");
@@@ -924,13 -945,17 +932,21 @@@ static int mlx5_init_once(struct mlx5_c
  		goto err_tables_cleanup;
  	}
  
++<<<<<<< HEAD
 +#ifdef CONFIG_MLX5_CORE_EN
++=======
+ 	err = mlx5_mpfs_init(dev);
+ 	if (err) {
+ 		dev_err(&pdev->dev, "Failed to init l2 table %d\n", err);
+ 		goto err_rl_cleanup;
+ 	}
+ 
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  	err = mlx5_eswitch_init(dev);
  	if (err) {
  		dev_err(&pdev->dev, "Failed to init eswitch %d\n", err);
 -		goto err_mpfs_cleanup;
 +		goto err_rl_cleanup;
  	}
- #endif
  
  	err = mlx5_sriov_init(dev);
  	if (err) {
@@@ -938,16 -963,22 +954,20 @@@
  		goto err_eswitch_cleanup;
  	}
  
 -	err = mlx5_fpga_init(dev);
 -	if (err) {
 -		dev_err(&pdev->dev, "Failed to init fpga device %d\n", err);
 -		goto err_sriov_cleanup;
 -	}
 -
  	return 0;
  
 -err_sriov_cleanup:
 -	mlx5_sriov_cleanup(dev);
  err_eswitch_cleanup:
- #ifdef CONFIG_MLX5_CORE_EN
  	mlx5_eswitch_cleanup(dev->priv.eswitch);
++<<<<<<< HEAD
 +
++=======
+ err_mpfs_cleanup:
+ 	mlx5_mpfs_cleanup(dev);
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  err_rl_cleanup:
 +#endif
  	mlx5_cleanup_rl_table(dev);
 +
  err_tables_cleanup:
  	mlx5_cleanup_mkey_table(dev);
  	mlx5_cleanup_srq_table(dev);
@@@ -963,11 -994,12 +983,14 @@@ out
  
  static void mlx5_cleanup_once(struct mlx5_core_dev *dev)
  {
 -	mlx5_fpga_cleanup(dev);
  	mlx5_sriov_cleanup(dev);
- #ifdef CONFIG_MLX5_CORE_EN
  	mlx5_eswitch_cleanup(dev->priv.eswitch);
++<<<<<<< HEAD
 +#endif
++=======
+ 	mlx5_mpfs_cleanup(dev);
++>>>>>>> e80541ecabd5 (net/mlx5: Add CONFIG_MLX5_ESWITCH Kconfig)
  	mlx5_cleanup_rl_table(dev);
 -	mlx5_cleanup_reserved_gids(dev);
  	mlx5_cleanup_mkey_table(dev);
  	mlx5_cleanup_srq_table(dev);
  	mlx5_cleanup_qp_table(dev);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Kconfig
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Makefile
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_rep.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
index cb3c25deeda2..00fea6db3acb 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@ -703,6 +703,7 @@ wq_ll_pop:
 		       &wqe->next.next_wqe_index);
 }
 
+#ifdef CONFIG_MLX5_ESWITCH
 void mlx5e_handle_rx_cqe_rep(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe)
 {
 	struct net_device *netdev = rq->netdev;
@@ -734,6 +735,7 @@ wq_ll_pop:
 	mlx5_wq_ll_pop(&rq->wq, wqe_counter_be,
 		       &wqe->next.next_wqe_index);
 }
+#endif
 
 static inline void mlx5e_mpwqe_fill_rx_skb(struct mlx5e_rq *rq,
 					   struct mlx5_cqe64 *cqe,
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
index 34bf903fc886..1d77b38b606c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
@@ -35,6 +35,7 @@
 
 #define MLX5E_TC_FLOW_ID_MASK 0x0000ffff
 
+#ifdef CONFIG_MLX5_ESWITCH
 int mlx5e_tc_init(struct mlx5e_priv *priv);
 void mlx5e_tc_cleanup(struct mlx5e_priv *priv);
 
@@ -51,4 +52,10 @@ static inline int mlx5e_tc_num_filters(struct mlx5e_priv *priv)
 	return atomic_read(&priv->fs.tc.ht.nelems);
 }
 
+#else /* CONFIG_MLX5_ESWITCH */
+static inline int  mlx5e_tc_init(struct mlx5e_priv *priv) { return 0; }
+static inline void mlx5e_tc_cleanup(struct mlx5e_priv *priv) {}
+static inline int  mlx5e_tc_num_filters(struct mlx5e_priv *priv) { return 0; }
+#endif
+
 #endif /* __MLX5_EN_TC_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/eq.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index a09bdedc0e36..be53e2dce34f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -40,6 +40,14 @@
 #include <net/ip_tunnels.h>
 #include <linux/mlx5/device.h>
 
+enum {
+	SRIOV_NONE,
+	SRIOV_LEGACY,
+	SRIOV_OFFLOADS
+};
+
+#ifdef CONFIG_MLX5_ESWITCH
+
 #define MLX5_MAX_UC_PER_VPORT(dev) \
 	(1 << MLX5_CAP_GEN(dev, log_max_current_uc_list))
 
@@ -177,12 +185,6 @@ struct mlx5_eswitch_fdb {
 	};
 };
 
-enum {
-	SRIOV_NONE,
-	SRIOV_LEGACY,
-	SRIOV_OFFLOADS
-};
-
 struct mlx5_esw_sq {
 	struct mlx5_flow_handle	*send_to_vport_rule;
 	struct list_head	 list;
@@ -357,4 +359,13 @@ int __mlx5_eswitch_set_vport_vlan(struct mlx5_eswitch *esw,
 
 #define esw_debug(dev, format, ...)				\
 	mlx5_core_dbg_mask(dev, MLX5_DEBUG_ESWITCH_MASK, format, ##__VA_ARGS__)
+#else  /* CONFIG_MLX5_ESWITCH */
+/* eswitch API stubs */
+static inline int  mlx5_eswitch_init(struct mlx5_core_dev *dev) { return 0; }
+static inline void mlx5_eswitch_cleanup(struct mlx5_eswitch *esw) {}
+static inline void mlx5_eswitch_vport_event(struct mlx5_eswitch *esw, struct mlx5_eqe *eqe) {}
+static inline int  mlx5_eswitch_enable_sriov(struct mlx5_eswitch *esw, int nvfs, int mode) { return 0; }
+static inline void mlx5_eswitch_disable_sriov(struct mlx5_eswitch *esw) {}
+#endif /* CONFIG_MLX5_ESWITCH */
+
 #endif /* __MLX5_ESWITCH_H__ */
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/main.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/sriov.c b/drivers/net/ethernet/mellanox/mlx5/core/sriov.c
index 28d8472b36f1..9ef9592c86a7 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/sriov.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/sriov.c
@@ -34,9 +34,7 @@
 #include <linux/mlx5/driver.h>
 #include <linux/mlx5/vport.h>
 #include "mlx5_core.h"
-#ifdef CONFIG_MLX5_CORE_EN
 #include "eswitch.h"
-#endif
 
 bool mlx5_sriov_is_enabled(struct mlx5_core_dev *dev)
 {
@@ -90,14 +88,12 @@ static int mlx5_device_enable_sriov(struct mlx5_core_dev *dev, int num_vfs)
 		return -EBUSY;
 	}
 
-#ifdef CONFIG_MLX5_CORE_EN
 	err = mlx5_eswitch_enable_sriov(dev->priv.eswitch, num_vfs, SRIOV_LEGACY);
 	if (err) {
 		mlx5_core_warn(dev,
 			       "failed to enable eswitch SRIOV (%d)\n", err);
 		return err;
 	}
-#endif
 
 	for (vf = 0; vf < num_vfs; vf++) {
 		err = mlx5_core_enable_hca(dev, vf + 1);
@@ -130,11 +126,7 @@ static void mlx5_device_disable_sriov(struct mlx5_core_dev *dev)
 	int vf;
 
 	if (!sriov->enabled_vfs)
-#ifdef CONFIG_MLX5_CORE_EN
-		goto disable_sriov_resources;
-#else
-		return;
-#endif
+		goto out;
 
 	for (vf = 0; vf < sriov->num_vfs; vf++) {
 		if (!sriov->vfs_ctx[vf].enabled)
@@ -148,10 +140,8 @@ static void mlx5_device_disable_sriov(struct mlx5_core_dev *dev)
 		sriov->enabled_vfs--;
 	}
 
-#ifdef CONFIG_MLX5_CORE_EN
-disable_sriov_resources:
+out:
 	mlx5_eswitch_disable_sriov(dev->priv.eswitch);
-#endif
 
 	if (mlx5_wait_for_vf_pages(dev))
 		mlx5_core_warn(dev, "timeout reclaiming VFs pages\n");
