i40e: fix handling of HW ATR eviction

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 6964e53f55837b0c49ed60d36656d2e0ee4fc27b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/6964e53f.failed

A recent commit to refactor the driver and remove the hw_disabled_flags
field accidentally introduced two regressions. First, we overwrote
pf->flags which removed various key flags including the MSI-X settings.

Additionally, it was intended that we have now two flags,
HW_ATR_EVICT_CAPABLE and HW_ATR_EVICT_ENABLED, but this was not done,
and we accidentally were mis-using HW_ATR_EVICT_CAPABLE everywhere.

This patch adds the missing piece, HW_ATR_EVICT_ENABLED, and safely
updates pf->flags instead of overwriting it.

Without this patch we will have many problems including disabling MSI-X
support, and we'll attempt to use HW ATR eviction on devices which do
not support it.

Fixes: 47994c119a36 ("i40e: remove hw_disabled_flags in favor of using separate flag bits", 2017-04-19)
	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6964e53f55837b0c49ed60d36656d2e0ee4fc27b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40e/i40e_ethtool.c
#	drivers/net/ethernet/intel/i40e/i40e_main.c
diff --cc drivers/net/ethernet/intel/i40e/i40e_ethtool.c
index 498ee9667bd1,894c8e57ba00..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_ethtool.c
@@@ -246,7 -224,8 +246,12 @@@ static const struct i40e_priv_flags i40
  	I40E_PRIV_FLAG("LinkPolling", I40E_FLAG_LINK_POLLING_ENABLED, 0),
  	I40E_PRIV_FLAG("flow-director-atr", I40E_FLAG_FD_ATR_ENABLED, 0),
  	I40E_PRIV_FLAG("veb-stats", I40E_FLAG_VEB_STATS_ENABLED, 0),
++<<<<<<< HEAD
 +	I40E_PRIV_FLAG("hw-atr-eviction", I40E_FLAG_HW_ATR_EVICT_CAPABLE, 0),
++=======
+ 	I40E_PRIV_FLAG("hw-atr-eviction", I40E_FLAG_HW_ATR_EVICT_ENABLED, 0),
+ 	I40E_PRIV_FLAG("legacy-rx", I40E_FLAG_LEGACY_RX, 0),
++>>>>>>> 6964e53f5583 (i40e: fix handling of HW ATR eviction)
  };
  
  #define I40E_PRIV_FLAGS_STR_LEN ARRAY_SIZE(i40e_gstrings_priv_flags)
@@@ -4125,8 -4091,8 +4130,13 @@@ flags_complete
  	}
  
  	/* Only allow ATR evict on hardware that is capable of handling it */
++<<<<<<< HEAD
 +	if (pf->hw_disabled_flags & I40E_FLAG_HW_ATR_EVICT_CAPABLE)
 +		pf->flags &= ~I40E_FLAG_HW_ATR_EVICT_CAPABLE;
++=======
+ 	if (pf->flags & I40E_FLAG_HW_ATR_EVICT_CAPABLE)
+ 		pf->flags &= ~I40E_FLAG_HW_ATR_EVICT_ENABLED;
++>>>>>>> 6964e53f5583 (i40e: fix handling of HW ATR eviction)
  
  	if (changed_flags & I40E_FLAG_TRUE_PROMISC_SUPPORT) {
  		u16 sw_flags = 0, valid_flags = 0;
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index f0ba3da9c566,a7a4b28b4144..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -8929,11 -8821,12 +8929,18 @@@ static int i40e_sw_init(struct i40e_pf 
  		    (pf->hw.aq.api_min_ver > 4))) {
  		/* Supported in FW API version higher than 1.4 */
  		pf->flags |= I40E_FLAG_GENEVE_OFFLOAD_CAPABLE;
++<<<<<<< HEAD
 +		pf->hw_disabled_flags = I40E_FLAG_HW_ATR_EVICT_CAPABLE;
 +	} else {
 +		pf->hw_disabled_flags = I40E_FLAG_HW_ATR_EVICT_CAPABLE;
++=======
++>>>>>>> 6964e53f5583 (i40e: fix handling of HW ATR eviction)
  	}
  
+ 	/* Enable HW ATR eviction if possible */
+ 	if (pf->flags & I40E_FLAG_HW_ATR_EVICT_CAPABLE)
+ 		pf->flags |= I40E_FLAG_HW_ATR_EVICT_ENABLED;
+ 
  	pf->eeprom_version = 0xDEAD;
  	pf->lan_veb = I40E_NO_VEB;
  	pf->lan_vsi = I40E_NO_VSI;
diff --git a/drivers/net/ethernet/intel/i40e/i40e.h b/drivers/net/ethernet/intel/i40e/i40e.h
index de1a2622c2a4..462e1769ccd1 100644
--- a/drivers/net/ethernet/intel/i40e/i40e.h
+++ b/drivers/net/ethernet/intel/i40e/i40e.h
@@ -398,6 +398,7 @@ struct i40e_pf {
 #define I40E_FLAG_RX_CSUM_ENABLED		BIT_ULL(1)
 #define I40E_FLAG_MSI_ENABLED			BIT_ULL(2)
 #define I40E_FLAG_MSIX_ENABLED			BIT_ULL(3)
+#define I40E_FLAG_HW_ATR_EVICT_ENABLED		BIT_ULL(4)
 #define I40E_FLAG_RSS_ENABLED			BIT_ULL(6)
 #define I40E_FLAG_VMDQ_ENABLED			BIT_ULL(7)
 #define I40E_FLAG_NEED_LINK_UPDATE		BIT_ULL(9)
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_ethtool.c
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
diff --git a/drivers/net/ethernet/intel/i40e/i40e_txrx.c b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
index eab06027e116..c68d4e721ec8 100644
--- a/drivers/net/ethernet/intel/i40e/i40e_txrx.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_txrx.c
@@ -2221,7 +2221,7 @@ static void i40e_atr(struct i40e_ring *tx_ring, struct sk_buff *skb,
 	/* Due to lack of space, no more new filters can be programmed */
 	if (th->syn && (pf->hw_disabled_flags & I40E_FLAG_FD_ATR_ENABLED))
 		return;
-	if (pf->flags & I40E_FLAG_HW_ATR_EVICT_CAPABLE) {
+	if (pf->flags & I40E_FLAG_HW_ATR_EVICT_ENABLED) {
 		/* HW ATR eviction will take care of removing filters on FIN
 		 * and RST packets.
 		 */
@@ -2283,7 +2283,7 @@ static void i40e_atr(struct i40e_ring *tx_ring, struct sk_buff *skb,
 			I40E_TXD_FLTR_QW1_CNTINDEX_SHIFT) &
 			I40E_TXD_FLTR_QW1_CNTINDEX_MASK;
 
-	if (pf->flags & I40E_FLAG_HW_ATR_EVICT_CAPABLE)
+	if (pf->flags & I40E_FLAG_HW_ATR_EVICT_ENABLED)
 		dtype_cmd |= I40E_TXD_FLTR_QW1_ATR_MASK;
 
 	fdir_desc->qindex_flex_ptype_vsi = cpu_to_le32(flex_ptype);
