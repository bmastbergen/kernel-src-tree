drm/vmwgfx: fix memory corruption with legacy/sou connectors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Rob Clark <rclark@redhat.com>
commit 8a510a5c75261ba0ec39155326982aa786541e29
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8a510a5c.failed

It looks like in all cases 'struct vmw_connector_state' is used.  But
only in stdu connectors, was atomic_{duplicate,destroy}_state() properly
subclassed.  Leading to writes beyond the end of the allocated connector
state block and all sorts of fun memory corruption related crashes.

Fixes: d7721ca71126 "drm/vmwgfx: Connector atomic state"
	Cc: <stable@vger.kernel.org>
	Signed-off-by: Rob Clark <rclark@redhat.com>
	Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
(cherry picked from commit 8a510a5c75261ba0ec39155326982aa786541e29)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/vmwgfx/vmwgfx_ldu.c
#	drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c
diff --cc drivers/gpu/drm/vmwgfx/vmwgfx_ldu.c
index 23ec673d5e16,3824595fece1..000000000000
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_ldu.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_ldu.c
@@@ -333,8 -265,128 +333,16 @@@ static const struct drm_connector_func
  	.fill_modes = vmw_du_connector_fill_modes,
  	.set_property = vmw_du_connector_set_property,
  	.destroy = vmw_ldu_connector_destroy,
++<<<<<<< HEAD
++=======
+ 	.reset = vmw_du_connector_reset,
+ 	.atomic_duplicate_state = vmw_du_connector_duplicate_state,
+ 	.atomic_destroy_state = vmw_du_connector_destroy_state,
+ 	.atomic_set_property = vmw_du_connector_atomic_set_property,
+ 	.atomic_get_property = vmw_du_connector_atomic_get_property,
++>>>>>>> 8a510a5c7526 (drm/vmwgfx: fix memory corruption with legacy/sou connectors)
  };
  
 -static const struct
 -drm_connector_helper_funcs vmw_ldu_connector_helper_funcs = {
 -	.best_encoder = drm_atomic_helper_best_encoder,
 -};
 -
 -/*
 - * Legacy Display Plane Functions
 - */
 -
 -/**
 - * vmw_ldu_primary_plane_cleanup_fb - Noop
 - *
 - * @plane:  display plane
 - * @old_state: Contains the FB to clean up
 - *
 - * Unpins the display surface
 - *
 - * Returns 0 on success
 - */
 -static void
 -vmw_ldu_primary_plane_cleanup_fb(struct drm_plane *plane,
 -				 struct drm_plane_state *old_state)
 -{
 -}
 -
 -
 -/**
 - * vmw_ldu_primary_plane_prepare_fb - Noop
 - *
 - * @plane:  display plane
 - * @new_state: info on the new plane state, including the FB
 - *
 - * Returns 0 on success
 - */
 -static int
 -vmw_ldu_primary_plane_prepare_fb(struct drm_plane *plane,
 -				 struct drm_plane_state *new_state)
 -{
 -	return 0;
 -}
 -
 -
 -static void
 -vmw_ldu_primary_plane_atomic_update(struct drm_plane *plane,
 -				    struct drm_plane_state *old_state)
 -{
 -	struct vmw_private *dev_priv;
 -	struct vmw_legacy_display_unit *ldu;
 -	struct vmw_framebuffer *vfb;
 -	struct drm_framebuffer *fb;
 -	struct drm_crtc *crtc = plane->state->crtc ?: old_state->crtc;
 -
 -
 -	ldu = vmw_crtc_to_ldu(crtc);
 -	dev_priv = vmw_priv(plane->dev);
 -	fb       = plane->state->fb;
 -
 -	vfb = (fb) ? vmw_framebuffer_to_vfb(fb) : NULL;
 -
 -	if (vfb)
 -		vmw_ldu_add_active(dev_priv, ldu, vfb);
 -	else
 -		vmw_ldu_del_active(dev_priv, ldu);
 -
 -	vmw_ldu_commit_list(dev_priv);
 -}
 -
 -
 -static const struct drm_plane_funcs vmw_ldu_plane_funcs = {
 -	.update_plane = drm_atomic_helper_update_plane,
 -	.disable_plane = drm_atomic_helper_disable_plane,
 -	.destroy = vmw_du_primary_plane_destroy,
 -	.reset = vmw_du_plane_reset,
 -	.atomic_duplicate_state = vmw_du_plane_duplicate_state,
 -	.atomic_destroy_state = vmw_du_plane_destroy_state,
 -};
 -
 -static const struct drm_plane_funcs vmw_ldu_cursor_funcs = {
 -	.update_plane = drm_atomic_helper_update_plane,
 -	.disable_plane = drm_atomic_helper_disable_plane,
 -	.destroy = vmw_du_cursor_plane_destroy,
 -	.reset = vmw_du_plane_reset,
 -	.atomic_duplicate_state = vmw_du_plane_duplicate_state,
 -	.atomic_destroy_state = vmw_du_plane_destroy_state,
 -};
 -
 -/*
 - * Atomic Helpers
 - */
 -static const struct
 -drm_plane_helper_funcs vmw_ldu_cursor_plane_helper_funcs = {
 -	.atomic_check = vmw_du_cursor_plane_atomic_check,
 -	.atomic_update = vmw_du_cursor_plane_atomic_update,
 -	.prepare_fb = vmw_du_cursor_plane_prepare_fb,
 -	.cleanup_fb = vmw_du_plane_cleanup_fb,
 -};
 -
 -static const struct
 -drm_plane_helper_funcs vmw_ldu_primary_plane_helper_funcs = {
 -	.atomic_check = vmw_du_primary_plane_atomic_check,
 -	.atomic_update = vmw_ldu_primary_plane_atomic_update,
 -	.prepare_fb = vmw_ldu_primary_plane_prepare_fb,
 -	.cleanup_fb = vmw_ldu_primary_plane_cleanup_fb,
 -};
 -
 -static const struct drm_crtc_helper_funcs vmw_ldu_crtc_helper_funcs = {
 -	.mode_set_nofb = vmw_ldu_crtc_mode_set_nofb,
 -	.atomic_check = vmw_du_crtc_atomic_check,
 -	.atomic_begin = vmw_du_crtc_atomic_begin,
 -	.atomic_flush = vmw_du_crtc_atomic_flush,
 -	.atomic_enable = vmw_ldu_crtc_atomic_enable,
 -	.atomic_disable = vmw_ldu_crtc_atomic_disable,
 -};
 -
 -
  static int vmw_ldu_init(struct vmw_private *dev_priv, unsigned unit)
  {
  	struct vmw_legacy_display_unit *ldu;
diff --cc drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c
index f42359084adc,63a4cd794b73..000000000000
--- a/drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c
+++ b/drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c
@@@ -495,8 -419,171 +495,16 @@@ static const struct drm_connector_func
  	.fill_modes = vmw_du_connector_fill_modes,
  	.set_property = vmw_du_connector_set_property,
  	.destroy = vmw_sou_connector_destroy,
++<<<<<<< HEAD
++=======
+ 	.reset = vmw_du_connector_reset,
+ 	.atomic_duplicate_state = vmw_du_connector_duplicate_state,
+ 	.atomic_destroy_state = vmw_du_connector_destroy_state,
+ 	.atomic_set_property = vmw_du_connector_atomic_set_property,
+ 	.atomic_get_property = vmw_du_connector_atomic_get_property,
++>>>>>>> 8a510a5c7526 (drm/vmwgfx: fix memory corruption with legacy/sou connectors)
  };
  
 -
 -static const struct
 -drm_connector_helper_funcs vmw_sou_connector_helper_funcs = {
 -	.best_encoder = drm_atomic_helper_best_encoder,
 -};
 -
 -
 -
 -/*
 - * Screen Object Display Plane Functions
 - */
 -
 -/**
 - * vmw_sou_primary_plane_cleanup_fb - Frees sou backing buffer
 - *
 - * @plane:  display plane
 - * @old_state: Contains the FB to clean up
 - *
 - * Unpins the display surface
 - *
 - * Returns 0 on success
 - */
 -static void
 -vmw_sou_primary_plane_cleanup_fb(struct drm_plane *plane,
 -				 struct drm_plane_state *old_state)
 -{
 -	struct vmw_plane_state *vps = vmw_plane_state_to_vps(old_state);
 -
 -	vmw_dmabuf_unreference(&vps->dmabuf);
 -	vps->dmabuf_size = 0;
 -
 -	vmw_du_plane_cleanup_fb(plane, old_state);
 -}
 -
 -
 -/**
 - * vmw_sou_primary_plane_prepare_fb - allocate backing buffer
 - *
 - * @plane:  display plane
 - * @new_state: info on the new plane state, including the FB
 - *
 - * The SOU backing buffer is our equivalent of the display plane.
 - *
 - * Returns 0 on success
 - */
 -static int
 -vmw_sou_primary_plane_prepare_fb(struct drm_plane *plane,
 -				 struct drm_plane_state *new_state)
 -{
 -	struct drm_framebuffer *new_fb = new_state->fb;
 -	struct drm_crtc *crtc = plane->state->crtc ?: new_state->crtc;
 -	struct vmw_plane_state *vps = vmw_plane_state_to_vps(new_state);
 -	struct vmw_private *dev_priv;
 -	size_t size;
 -	int ret;
 -
 -
 -	if (!new_fb) {
 -		vmw_dmabuf_unreference(&vps->dmabuf);
 -		vps->dmabuf_size = 0;
 -
 -		return 0;
 -	}
 -
 -	size = new_state->crtc_w * new_state->crtc_h * 4;
 -
 -	if (vps->dmabuf) {
 -		if (vps->dmabuf_size == size)
 -			return 0;
 -
 -		vmw_dmabuf_unreference(&vps->dmabuf);
 -		vps->dmabuf_size = 0;
 -	}
 -
 -	vps->dmabuf = kzalloc(sizeof(*vps->dmabuf), GFP_KERNEL);
 -	if (!vps->dmabuf)
 -		return -ENOMEM;
 -
 -	dev_priv = vmw_priv(crtc->dev);
 -	vmw_svga_enable(dev_priv);
 -
 -	/* After we have alloced the backing store might not be able to
 -	 * resume the overlays, this is preferred to failing to alloc.
 -	 */
 -	vmw_overlay_pause_all(dev_priv);
 -	ret = vmw_dmabuf_init(dev_priv, vps->dmabuf, size,
 -			      &vmw_vram_ne_placement,
 -			      false, &vmw_dmabuf_bo_free);
 -	vmw_overlay_resume_all(dev_priv);
 -
 -	if (ret != 0)
 -		vps->dmabuf = NULL; /* vmw_dmabuf_init frees on error */
 -	else
 -		vps->dmabuf_size = size;
 -
 -	return ret;
 -}
 -
 -
 -static void
 -vmw_sou_primary_plane_atomic_update(struct drm_plane *plane,
 -				    struct drm_plane_state *old_state)
 -{
 -	struct drm_crtc *crtc = plane->state->crtc;
 -
 -	if (crtc)
 -		crtc->primary->fb = plane->state->fb;
 -}
 -
 -
 -static const struct drm_plane_funcs vmw_sou_plane_funcs = {
 -	.update_plane = drm_atomic_helper_update_plane,
 -	.disable_plane = drm_atomic_helper_disable_plane,
 -	.destroy = vmw_du_primary_plane_destroy,
 -	.reset = vmw_du_plane_reset,
 -	.atomic_duplicate_state = vmw_du_plane_duplicate_state,
 -	.atomic_destroy_state = vmw_du_plane_destroy_state,
 -};
 -
 -static const struct drm_plane_funcs vmw_sou_cursor_funcs = {
 -	.update_plane = drm_atomic_helper_update_plane,
 -	.disable_plane = drm_atomic_helper_disable_plane,
 -	.destroy = vmw_du_cursor_plane_destroy,
 -	.reset = vmw_du_plane_reset,
 -	.atomic_duplicate_state = vmw_du_plane_duplicate_state,
 -	.atomic_destroy_state = vmw_du_plane_destroy_state,
 -};
 -
 -/*
 - * Atomic Helpers
 - */
 -static const struct
 -drm_plane_helper_funcs vmw_sou_cursor_plane_helper_funcs = {
 -	.atomic_check = vmw_du_cursor_plane_atomic_check,
 -	.atomic_update = vmw_du_cursor_plane_atomic_update,
 -	.prepare_fb = vmw_du_cursor_plane_prepare_fb,
 -	.cleanup_fb = vmw_du_plane_cleanup_fb,
 -};
 -
 -static const struct
 -drm_plane_helper_funcs vmw_sou_primary_plane_helper_funcs = {
 -	.atomic_check = vmw_du_primary_plane_atomic_check,
 -	.atomic_update = vmw_sou_primary_plane_atomic_update,
 -	.prepare_fb = vmw_sou_primary_plane_prepare_fb,
 -	.cleanup_fb = vmw_sou_primary_plane_cleanup_fb,
 -};
 -
 -static const struct drm_crtc_helper_funcs vmw_sou_crtc_helper_funcs = {
 -	.prepare = vmw_sou_crtc_helper_prepare,
 -	.mode_set_nofb = vmw_sou_crtc_mode_set_nofb,
 -	.atomic_check = vmw_du_crtc_atomic_check,
 -	.atomic_begin = vmw_du_crtc_atomic_begin,
 -	.atomic_flush = vmw_du_crtc_atomic_flush,
 -	.atomic_enable = vmw_sou_crtc_atomic_enable,
 -	.atomic_disable = vmw_sou_crtc_atomic_disable,
 -};
 -
 -
  static int vmw_sou_init(struct vmw_private *dev_priv, unsigned unit)
  {
  	struct vmw_screen_object_unit *sou;
* Unmerged path drivers/gpu/drm/vmwgfx/vmwgfx_ldu.c
* Unmerged path drivers/gpu/drm/vmwgfx/vmwgfx_scrn.c
