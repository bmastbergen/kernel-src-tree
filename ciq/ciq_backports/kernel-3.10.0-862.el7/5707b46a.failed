x86/intel_rdt: Remove redundant ternary operator on return

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] intel_rdt: Remove redundant ternary operator on return (Jiri Olsa) [1457533]
Rebuild_FUZZ: 96.43%
commit-author Colin Ian King <colin.king@canonical.com>
commit 5707b46a4206be2068444eb6b514a1ee070651c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5707b46a.failed

The use of the ternary operator is redundant as ret can never be
non-zero at that point. Instead, just return nbytes.

Detected by CoverityScan, CID#1452658 ("Logically dead code")

	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vikas Shivappa <vikas.shivappa@linux.intel.com>
	Cc: Fenghua Yu <fenghua.yu@intel.com>
	Cc: kernel-janitors@vger.kernel.org
Link: http://lkml.kernel.org/r/20170808092859.13021-1-colin.king@canonical.com
(cherry picked from commit 5707b46a4206be2068444eb6b514a1ee070651c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
diff --cc arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
index 1c3603d97e9d,a869d4a073c5..000000000000
--- a/arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
+++ b/arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
@@@ -475,8 -569,193 +475,198 @@@ static int rdtgroup_tasks_show(struct k
  	return ret;
  }
  
++<<<<<<< HEAD
 +/* Files in each rdtgroup */
 +static struct rftype rdtgroup_base_files[] = {
++=======
+ static int rdt_num_closids_show(struct kernfs_open_file *of,
+ 				struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%d\n", r->num_closid);
+ 	return 0;
+ }
+ 
+ static int rdt_default_ctrl_show(struct kernfs_open_file *of,
+ 			     struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%x\n", r->default_ctrl);
+ 	return 0;
+ }
+ 
+ static int rdt_min_cbm_bits_show(struct kernfs_open_file *of,
+ 			     struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%u\n", r->cache.min_cbm_bits);
+ 	return 0;
+ }
+ 
+ static int rdt_shareable_bits_show(struct kernfs_open_file *of,
+ 				   struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%x\n", r->cache.shareable_bits);
+ 	return 0;
+ }
+ 
+ static int rdt_min_bw_show(struct kernfs_open_file *of,
+ 			     struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%u\n", r->membw.min_bw);
+ 	return 0;
+ }
+ 
+ static int rdt_num_rmids_show(struct kernfs_open_file *of,
+ 			      struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%d\n", r->num_rmid);
+ 
+ 	return 0;
+ }
+ 
+ static int rdt_mon_features_show(struct kernfs_open_file *of,
+ 				 struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 	struct mon_evt *mevt;
+ 
+ 	list_for_each_entry(mevt, &r->evt_list, list)
+ 		seq_printf(seq, "%s\n", mevt->name);
+ 
+ 	return 0;
+ }
+ 
+ static int rdt_bw_gran_show(struct kernfs_open_file *of,
+ 			     struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%u\n", r->membw.bw_gran);
+ 	return 0;
+ }
+ 
+ static int rdt_delay_linear_show(struct kernfs_open_file *of,
+ 			     struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%u\n", r->membw.delay_linear);
+ 	return 0;
+ }
+ 
+ static int max_threshold_occ_show(struct kernfs_open_file *of,
+ 				  struct seq_file *seq, void *v)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 
+ 	seq_printf(seq, "%u\n", intel_cqm_threshold * r->mon_scale);
+ 
+ 	return 0;
+ }
+ 
+ static ssize_t max_threshold_occ_write(struct kernfs_open_file *of,
+ 				       char *buf, size_t nbytes, loff_t off)
+ {
+ 	struct rdt_resource *r = of->kn->parent->priv;
+ 	unsigned int bytes;
+ 	int ret;
+ 
+ 	ret = kstrtouint(buf, 0, &bytes);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (bytes > (boot_cpu_data.x86_cache_size * 1024))
+ 		return -EINVAL;
+ 
+ 	intel_cqm_threshold = bytes / r->mon_scale;
+ 
+ 	return nbytes;
+ }
+ 
+ /* rdtgroup information files for one cache resource. */
+ static struct rftype res_common_files[] = {
+ 	{
+ 		.name		= "num_closids",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_num_closids_show,
+ 		.fflags		= RF_CTRL_INFO,
+ 	},
+ 	{
+ 		.name		= "mon_features",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_mon_features_show,
+ 		.fflags		= RF_MON_INFO,
+ 	},
+ 	{
+ 		.name		= "num_rmids",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_num_rmids_show,
+ 		.fflags		= RF_MON_INFO,
+ 	},
+ 	{
+ 		.name		= "cbm_mask",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_default_ctrl_show,
+ 		.fflags		= RF_CTRL_INFO | RFTYPE_RES_CACHE,
+ 	},
+ 	{
+ 		.name		= "min_cbm_bits",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_min_cbm_bits_show,
+ 		.fflags		= RF_CTRL_INFO | RFTYPE_RES_CACHE,
+ 	},
+ 	{
+ 		.name		= "shareable_bits",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_shareable_bits_show,
+ 		.fflags		= RF_CTRL_INFO | RFTYPE_RES_CACHE,
+ 	},
+ 	{
+ 		.name		= "min_bandwidth",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_min_bw_show,
+ 		.fflags		= RF_CTRL_INFO | RFTYPE_RES_MB,
+ 	},
+ 	{
+ 		.name		= "bandwidth_gran",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_bw_gran_show,
+ 		.fflags		= RF_CTRL_INFO | RFTYPE_RES_MB,
+ 	},
+ 	{
+ 		.name		= "delay_linear",
+ 		.mode		= 0444,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.seq_show	= rdt_delay_linear_show,
+ 		.fflags		= RF_CTRL_INFO | RFTYPE_RES_MB,
+ 	},
+ 	{
+ 		.name		= "max_threshold_occupancy",
+ 		.mode		= 0644,
+ 		.kf_ops		= &rdtgroup_kf_single_ops,
+ 		.write		= max_threshold_occ_write,
+ 		.seq_show	= max_threshold_occ_show,
+ 		.fflags		= RF_MON_INFO | RFTYPE_RES_CACHE,
+ 	},
++>>>>>>> 5707b46a4206 (x86/intel_rdt: Remove redundant ternary operator on return)
  	{
  		.name		= "cpus",
  		.mode		= 0644,
* Unmerged path arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
