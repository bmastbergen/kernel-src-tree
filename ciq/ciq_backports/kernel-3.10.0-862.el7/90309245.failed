iio: hid-sensors: Add api to get poll value

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
commit 9030924510a9e7d4b7d218749533840075879f2f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/90309245.failed

Added interface to get poll value in milli-seconds. This value is
changed by changing sampling frequency. This API allows clients
to wait for at least some poll milli seconds before reading a new sample.

	Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
	Signed-off-by: Jonathan Cameron <jic23@kernel.org>
(cherry picked from commit 9030924510a9e7d4b7d218749533840075879f2f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/hid-sensor-hub.h
diff --cc include/linux/hid-sensor-hub.h
index 05fe6c21f3e2,88d8d636a68f..000000000000
--- a/include/linux/hid-sensor-hub.h
+++ b/include/linux/hid-sensor-hub.h
@@@ -198,4 -220,13 +198,16 @@@ int hid_sensor_write_samp_freq_value(st
  int hid_sensor_read_samp_freq_value(struct hid_sensor_common *st,
  					int *val1, int *val2);
  
++<<<<<<< HEAD
++=======
+ int hid_sensor_get_usage_index(struct hid_sensor_hub_device *hsdev,
+ 				u32 report_id, int field_index, u32 usage_id);
+ 
+ int hid_sensor_format_scale(u32 usage_id,
+ 			    struct hid_sensor_hub_attribute_info *attr_info,
+ 			    int *val0, int *val1);
+ 
+ s32 hid_sensor_read_poll_value(struct hid_sensor_common *st);
+ 
++>>>>>>> 9030924510a9 (iio: hid-sensors: Add api to get poll value)
  #endif
diff --git a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
index 75b54730a963..cbf0711e3d8f 100644
--- a/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-attributes.c
@@ -113,6 +113,26 @@ static u32 convert_to_vtf_format(int size, int exp, int val1, int val2)
 	return value;
 }
 
+s32 hid_sensor_read_poll_value(struct hid_sensor_common *st)
+{
+	s32 value = 0;
+	int ret;
+
+	ret = sensor_hub_get_feature(st->hsdev,
+		st->poll.report_id,
+		st->poll.index, &value);
+
+	if (ret < 0 || value < 0) {
+		return -EINVAL;
+	} else {
+		if (st->poll.units == HID_USAGE_SENSOR_UNITS_SECOND)
+			value = value * 1000;
+	}
+
+	return value;
+}
+EXPORT_SYMBOL(hid_sensor_read_poll_value);
+
 int hid_sensor_read_samp_freq_value(struct hid_sensor_common *st,
 				int *val1, int *val2)
 {
* Unmerged path include/linux/hid-sensor-hub.h
