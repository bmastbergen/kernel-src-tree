s390/noexec: execute kexec datamover without DAT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [s390] noexec: execute kexec datamover without DAT (Hendrik Brueckner) [1513893]
Rebuild_FUZZ: 94.51%
commit-author Heiko Carstens <heiko.carstens@de.ibm.com>
commit d0e810eeb3d326978f248b8f0233a2f30f58c72d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d0e810ee.failed

Rebooting into a new kernel with kexec fails (system dies) if tried on
a machine that has no-execute support. Reason for this is that the so
called datamover code gets executed with DAT on (MMU is active) and
the page that contains the datamover is marked as non-executable.
Therefore when branching into the datamover an unexpected program
check happens and afterwards the machine is dead.

This can be simply avoided by disabling DAT, which also disables any
no-execute checks, just before the datamover gets executed.

In fact the first thing done by the datamover is to disable DAT. The
code in the datamover that disables DAT can be removed as well.

Thanks to Michael Holzheu and Gerald Schaefer for tracking this down.

	Reviewed-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
	Reviewed-by: Philipp Rudo <prudo@linux.vnet.ibm.com>
	Cc: Gerald Schaefer <gerald.schaefer@de.ibm.com>
	Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
Fixes: 57d7f939e7bd ("s390: add no-execute support")
	Cc: <stable@vger.kernel.org> # v4.11+
	Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
(cherry picked from commit d0e810eeb3d326978f248b8f0233a2f30f58c72d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/kernel/relocate_kernel.S
diff --cc arch/s390/kernel/relocate_kernel.S
index f4e6f20e117a,a613581fea67..000000000000
--- a/arch/s390/kernel/relocate_kernel.S
+++ b/arch/s390/kernel/relocate_kernel.S
@@@ -26,9 -28,13 +26,19 @@@
  ENTRY(relocate_kernel)
  		basr	%r13,0		# base address
  	.base:
++<<<<<<< HEAD
 +		stnsm	sys_msk-.base(%r13),0xfb	# disable DAT
 +		stctl	%c0,%c15,ctlregs-.base(%r13)
 +		stm	%r0,%r15,gprregs-.base(%r13)
++=======
+ 		stctg	%c0,%c15,ctlregs-.base(%r13)
+ 		stmg	%r0,%r15,gprregs-.base(%r13)
+ 		lghi	%r0,3
+ 		sllg	%r0,%r0,31
+ 		stg	%r0,0x1d0(%r0)
+ 		la	%r0,.back_pgm-.base(%r13)
+ 		stg	%r0,0x1d8(%r0)
++>>>>>>> d0e810eeb3d3 (s390/noexec: execute kexec datamover without DAT)
  		la	%r1,load_psw-.base(%r13)
  		mvc	0(8,%r0),0(%r1)
  		la	%r0,.back-.base(%r13)
@@@ -98,11 -101,9 +108,9 @@@
  		.align	8
  	load_psw:
  		.long	0x00080000,0x80000000
- 	sys_msk:
- 		.quad	0
  	ctlregs:
  		.rept	16
 -		.quad	0
 +		.long	0
  		.endr
  	gprregs:
  		.rept	16
diff --git a/arch/s390/kernel/machine_kexec.c b/arch/s390/kernel/machine_kexec.c
index cf910480d58c..2e8d40f65252 100644
--- a/arch/s390/kernel/machine_kexec.c
+++ b/arch/s390/kernel/machine_kexec.c
@@ -237,6 +237,7 @@ static void __do_machine_kexec(void *data)
 
 	data_mover = (relocate_kernel_t) page_to_phys(image->control_code_page);
 
+	__arch_local_irq_stnsm(0xfb); /* disable DAT - avoid no-execute */
 	/* Call the moving routine */
 	(*data_mover)(&image->head, image->start);
 }
* Unmerged path arch/s390/kernel/relocate_kernel.S
