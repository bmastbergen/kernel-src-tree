scripts/spelling.txt: add "overwritting" pattern and fix typo instances

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Masahiro Yamada <yamada.masahiro@socionext.com>
commit 9a284e5c9e04a3533f72eda8956162dfc77684a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9a284e5c.failed

Fix typos and add the following to the scripts/spelling.txt:

  overwritting||overwriting

Link: http://lkml.kernel.org/r/1481573103-11329-29-git-send-email-yamada.masahiro@socionext.com
	Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9a284e5c9e04a3533f72eda8956162dfc77684a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/arm64/lib/copy_template.S
#	drivers/net/ethernet/adi/bfin_mac.c
#	scripts/spelling.txt
diff --cc drivers/net/ethernet/adi/bfin_mac.c
index dada66bfe0d6,a9ac58c351a0..000000000000
--- a/drivers/net/ethernet/adi/bfin_mac.c
+++ b/drivers/net/ethernet/adi/bfin_mac.c
@@@ -1240,8 -1205,8 +1240,13 @@@ static void bfin_mac_rx(struct net_devi
  	}
  	/* reserve 2 bytes for RXDWA padding */
  	skb_reserve(new_skb, NET_IP_ALIGN);
++<<<<<<< HEAD
 +	/* Invidate the data cache of skb->data range when it is write back
 +	 * cache. It will prevent overwritting the new data from DMA
++=======
+ 	/* Invalidate the data cache of skb->data range when it is write back
+ 	 * cache. It will prevent overwriting the new data from DMA
++>>>>>>> 9a284e5c9e04 (scripts/spelling.txt: add "overwritting" pattern and fix typo instances)
  	 */
  	blackfin_dcache_invalidate_range((unsigned long)new_skb->head,
  					 (unsigned long)new_skb->end);
* Unmerged path arch/arm64/lib/copy_template.S
* Unmerged path scripts/spelling.txt
* Unmerged path arch/arm64/lib/copy_template.S
* Unmerged path drivers/net/ethernet/adi/bfin_mac.c
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.c b/drivers/net/ethernet/intel/igb/e1000_phy.c
index 2788a5409023..68812d783f33 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.c
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.c
@@ -294,7 +294,7 @@ s32 igb_write_phy_reg_i2c(struct e1000_hw *hw, u32 offset, u16 data)
 	u32 i, i2ccmd = 0;
 	u16 phy_data_swapped;
 
-	/* Prevent overwritting SFP I2C EEPROM which is at A0 address.*/
+	/* Prevent overwriting SFP I2C EEPROM which is at A0 address.*/
 	if ((hw->phy.addr == 0) || (hw->phy.addr > 7)) {
 		hw_dbg("PHY I2C Address %d is out of range.\n",
 			  hw->phy.addr);
diff --git a/drivers/scsi/mpt3sas/mpt3sas_ctl.c b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
index 93a1b9113023..77469c796802 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_ctl.c
+++ b/drivers/scsi/mpt3sas/mpt3sas_ctl.c
@@ -1925,7 +1925,7 @@ mpt3sas_send_diag_release(struct MPT3SAS_ADAPTER *ioc, u8 buffer_type,
  *
  * This allows ownership of the specified buffer to returned to the driver,
  * allowing an application to read the buffer without fear that firmware is
- * overwritting information in the buffer.
+ * overwriting information in the buffer.
  */
 static long
 _ctl_diag_release(struct MPT3SAS_ADAPTER *ioc, void __user *arg)
diff --git a/drivers/scsi/mpt3sas/mpt3sas_ctl.h b/drivers/scsi/mpt3sas/mpt3sas_ctl.h
index f3e17a8c1b07..a44046cff0f3 100644
--- a/drivers/scsi/mpt3sas/mpt3sas_ctl.h
+++ b/drivers/scsi/mpt3sas/mpt3sas_ctl.h
@@ -390,7 +390,7 @@ struct mpt3_diag_query {
  *
  * This allows ownership of the specified buffer to returned to the driver,
  * allowing an application to read the buffer without fear that firmware is
- * overwritting information in the buffer.
+ * overwriting information in the buffer.
  */
 struct mpt3_diag_release {
 	struct mpt3_ioctl_header hdr;
diff --git a/drivers/usb/usbip/usbip_common.c b/drivers/usb/usbip/usbip_common.c
index 8b232290be6b..1a6f78d7d027 100644
--- a/drivers/usb/usbip/usbip_common.c
+++ b/drivers/usb/usbip/usbip_common.c
@@ -707,7 +707,7 @@ void usbip_pad_iso(struct usbip_device *ud, struct urb *urb)
 		return;
 
 	/*
-	 * loop over all packets from last to first (to prevent overwritting
+	 * loop over all packets from last to first (to prevent overwriting
 	 * memory when padding) and move them into the proper place
 	 */
 	for (i = np-1; i > 0; i--) {
* Unmerged path scripts/spelling.txt
