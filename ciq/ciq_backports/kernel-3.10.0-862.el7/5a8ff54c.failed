x86/dumpstack: Remove unnecessary stack pointer arguments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] dumpstack: Remove unnecessary stack pointer arguments (Josh Poimboeuf) [1430637]
Rebuild_FUZZ: 96.36%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 5a8ff54c260ecfed3de9b8d1272eb87826935df8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5a8ff54c.failed

When calling show_stack_log_lvl() or dump_trace() with a regs argument,
providing a stack pointer or frame pointer is redundant.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>d
	Reviewed-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Brian Gerst <brgerst@gmail.com>
	Cc: Byungchul Park <byungchul.park@lge.com>
	Cc: Frederic Weisbecker <fweisbec@gmail.com>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Nilay Vaish <nilayvaish@gmail.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/1694e2e955e3b9a73a3c3d5ba2634344014dd550.1472057064.git.jpoimboe@redhat.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 5a8ff54c260ecfed3de9b8d1272eb87826935df8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/dumpstack.c
#	arch/x86/oprofile/backtrace.c
diff --cc arch/x86/kernel/dumpstack.c
index 08594671b59f,c6c6c39c367f..000000000000
--- a/arch/x86/kernel/dumpstack.c
+++ b/arch/x86/kernel/dumpstack.c
@@@ -199,6 -183,11 +199,14 @@@ void show_stack(struct task_struct *tas
  	show_stack_log_lvl(task, NULL, sp, bp, "");
  }
  
++<<<<<<< HEAD
++=======
+ void show_stack_regs(struct pt_regs *regs)
+ {
+ 	show_stack_log_lvl(current, regs, NULL, 0, "");
+ }
+ 
++>>>>>>> 5a8ff54c260e (x86/dumpstack: Remove unnecessary stack pointer arguments)
  static arch_spinlock_t die_lock = __ARCH_SPIN_LOCK_UNLOCKED;
  static int die_owner = -1;
  static unsigned int die_nest_count;
diff --cc arch/x86/oprofile/backtrace.c
index 71672f4c4579,d950f9ea9a8c..000000000000
--- a/arch/x86/oprofile/backtrace.c
+++ b/arch/x86/oprofile/backtrace.c
@@@ -112,9 -112,7 +112,13 @@@ x86_backtrace(struct pt_regs * const re
  {
  	struct stack_frame *head = (struct stack_frame *)frame_pointer(regs);
  
++<<<<<<< HEAD
 +	if (!user_mode_vm(regs)) {
 +		unsigned long stack = kernel_stack_pointer(regs);
 +
++=======
+ 	if (!user_mode(regs)) {
++>>>>>>> 5a8ff54c260e (x86/dumpstack: Remove unnecessary stack pointer arguments)
  		if (!depth)
  			return;
  
* Unmerged path arch/x86/kernel/dumpstack.c
diff --git a/arch/x86/kernel/dumpstack_32.c b/arch/x86/kernel/dumpstack_32.c
index c90b53d2857e..3400beb6195d 100644
--- a/arch/x86/kernel/dumpstack_32.c
+++ b/arch/x86/kernel/dumpstack_32.c
@@ -105,7 +105,7 @@ void show_regs(struct pt_regs *regs)
 		u8 *ip;
 
 		pr_emerg("Stack:\n");
-		show_stack_log_lvl(NULL, regs, &regs->sp, 0, KERN_EMERG);
+		show_stack_log_lvl(NULL, regs, NULL, 0, KERN_EMERG);
 
 		pr_emerg("Code:");
 
diff --git a/arch/x86/kernel/dumpstack_64.c b/arch/x86/kernel/dumpstack_64.c
index 101e30243d5b..5c04f4697832 100644
--- a/arch/x86/kernel/dumpstack_64.c
+++ b/arch/x86/kernel/dumpstack_64.c
@@ -299,9 +299,7 @@ show_stack_log_lvl(struct task_struct *task, struct pt_regs *regs,
 void show_regs(struct pt_regs *regs)
 {
 	int i;
-	unsigned long sp;
 
-	sp = regs->sp;
 	show_regs_print_info(KERN_DEFAULT);
 	__show_regs(regs, 1);
 
@@ -316,8 +314,7 @@ void show_regs(struct pt_regs *regs)
 		u8 *ip;
 
 		printk(KERN_DEFAULT "Stack:\n");
-		show_stack_log_lvl(NULL, regs, (unsigned long *)sp,
-				   0, KERN_DEFAULT);
+		show_stack_log_lvl(NULL, regs, NULL, 0, KERN_DEFAULT);
 
 		printk(KERN_DEFAULT "Code: ");
 
* Unmerged path arch/x86/oprofile/backtrace.c
