net: sched: cls_matchall: no need to call tcf_exts_change for newly allocated struct

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] sched: cls_matchall: no need to call tcf_exts_change for newly allocated struct (Ivan Vecera) [1445420]
Rebuild_FUZZ: 96.93%
commit-author Jiri Pirko <jiri@mellanox.com>
commit a74cb36980c3676c888a87dd66bcd410f7e75c08
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a74cb369.failed

As the head struct was allocated right before mall_set_parms call,
no need to use tcf_exts_change to do atomic change, and we can just
fill-up the unused exts struct directly by tcf_exts_validate.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit a74cb36980c3676c888a87dd66bcd410f7e75c08)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_matchall.c
diff --cc net/sched/cls_matchall.c
index f7bc58777169,f35177b48373..000000000000
--- a/net/sched/cls_matchall.c
+++ b/net/sched/cls_matchall.c
@@@ -121,16 -120,11 +121,19 @@@ static int mall_set_parms(struct net *n
  			  unsigned long base, struct nlattr **tb,
  			  struct nlattr *est, bool ovr)
  {
- 	struct tcf_exts e;
  	int err;
  
++<<<<<<< HEAD
 +	tcf_exts_init(&e, TCA_MATCHALL_ACT, 0);
 +	err = 0; /* tcf_exts_init() is void in RHEL */
 +	if (err)
 +		return err;
 +	err = tcf_exts_validate(net, tp, tb, est, &e, ovr);
++=======
+ 	err = tcf_exts_validate(net, tp, tb, est, &head->exts, ovr);
++>>>>>>> a74cb36980c3 (net: sched: cls_matchall: no need to call tcf_exts_change for newly allocated struct)
  	if (err < 0)
- 		goto errout;
+ 		return err;
  
  	if (tb[TCA_MATCHALL_CLASSID]) {
  		head->res.classid = nla_get_u32(tb[TCA_MATCHALL_CLASSID]);
* Unmerged path net/sched/cls_matchall.c
