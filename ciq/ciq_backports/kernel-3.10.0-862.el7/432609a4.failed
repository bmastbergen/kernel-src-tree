net/mlx5e: Move and optimize query out of buffer function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Move and optimize query out of buffer function (Kamal Heib) [1456694]
Rebuild_FUZZ: 96.36%
commit-author Gal Pressman <galp@mellanox.com>
commit 432609a4cdfb1c3e3a58e6e37b3501e42bfc50ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/432609a4.failed

Move "query queue counter out of buffer" helper function out of
qp.c to en_main.c, since mlx5e netdev driver is the only one to use it.

Also allocate the output buffer on the stack instead of the heap, to reduce
number of heap allocs on update_stats work.

	Signed-off-by: Gal Pressman <galp@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Cc: kernel-team@fb.com
(cherry picked from commit 432609a4cdfb1c3e3a58e6e37b3501e42bfc50ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/qp.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/qp.c
index f9792274fb27,340f281c9801..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/qp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/qp.c
@@@ -641,23 -518,3 +641,26 @@@ int mlx5_core_query_q_counter(struct ml
  	return mlx5_cmd_exec(dev, in, sizeof(in), out, out_size);
  }
  EXPORT_SYMBOL_GPL(mlx5_core_query_q_counter);
++<<<<<<< HEAD
 +
 +int mlx5_core_query_out_of_buffer(struct mlx5_core_dev *dev, u16 counter_id,
 +				  u32 *out_of_buffer)
 +{
 +	int outlen = MLX5_ST_SZ_BYTES(query_q_counter_out);
 +	void *out;
 +	int err;
 +
 +	out = mlx5_vzalloc(outlen);
 +	if (!out)
 +		return -ENOMEM;
 +
 +	err = mlx5_core_query_q_counter(dev, counter_id, 0, out, outlen);
 +	if (!err)
 +		*out_of_buffer = MLX5_GET(query_q_counter_out, out,
 +					  out_of_buffer);
 +
 +	kfree(out);
 +	return err;
 +}
++=======
++>>>>>>> 432609a4cdfb (net/mlx5e: Move and optimize query out of buffer function)
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 950c1d21ad52..3efb635d44b6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -288,12 +288,17 @@ free_out:
 static void mlx5e_update_q_counter(struct mlx5e_priv *priv)
 {
 	struct mlx5e_qcounter_stats *qcnt = &priv->stats.qcnt;
+	u32 out[MLX5_ST_SZ_DW(query_q_counter_out)];
+	int err;
 
 	if (!priv->q_counter)
 		return;
 
-	mlx5_core_query_out_of_buffer(priv->mdev, priv->q_counter,
-				      &qcnt->rx_out_of_buffer);
+	err = mlx5_core_query_q_counter(priv->mdev, priv->q_counter, 0, out, sizeof(out));
+	if (err)
+		return;
+
+	qcnt->rx_out_of_buffer = MLX5_GET(query_q_counter_out, out, out_of_buffer);
 }
 
 static void mlx5e_update_pcie_counters(struct mlx5e_priv *priv)
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/qp.c
diff --git a/include/linux/mlx5/qp.h b/include/linux/mlx5/qp.h
index face9b45adec..0b3cd4f1abd8 100644
--- a/include/linux/mlx5/qp.h
+++ b/include/linux/mlx5/qp.h
@@ -586,8 +586,6 @@ int mlx5_core_alloc_q_counter(struct mlx5_core_dev *dev, u16 *counter_id);
 int mlx5_core_dealloc_q_counter(struct mlx5_core_dev *dev, u16 counter_id);
 int mlx5_core_query_q_counter(struct mlx5_core_dev *dev, u16 counter_id,
 			      int reset, void *out, int out_size);
-int mlx5_core_query_out_of_buffer(struct mlx5_core_dev *dev, u16 counter_id,
-				  u32 *out_of_buffer);
 
 static inline const char *mlx5_qp_type_str(int type)
 {
