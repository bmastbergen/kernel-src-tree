NFS/filelayout: Fix racy setting of fl->dsaddr in filelayout_check_deviceid()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 1ebf980127924c639e2b85c08468311ba1c95b70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1ebf9801.failed

We must set fl->dsaddr once, and once only, even if there are multiple
processes calling filelayout_check_deviceid() for the same layout
segment.

	Reported-by: Olga Kornievskaia <kolga@netapp.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
	Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
(cherry picked from commit 1ebf980127924c639e2b85c08468311ba1c95b70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/filelayout/filelayout.c
diff --cc fs/nfs/filelayout/filelayout.c
index b859b153da3d,44c638b7876c..000000000000
--- a/fs/nfs/filelayout/filelayout.c
+++ b/fs/nfs/filelayout/filelayout.c
@@@ -551,30 -542,12 +551,36 @@@ filelayout_check_layout(struct pnfs_lay
  	struct nfs4_file_layout_dsaddr *dsaddr;
  	int status = -EINVAL;
  
++<<<<<<< HEAD
 +	dprintk("--> %s\n", __func__);
 +
 +	/* FIXME: remove this check when layout segment support is added */
 +	if (lgr->range.offset != 0 ||
 +	    lgr->range.length != NFS4_MAX_UINT64) {
 +		dprintk("%s Only whole file layouts supported. Use MDS i/o\n",
 +			__func__);
 +		goto out;
 +	}
 +
 +	if (fl->pattern_offset > lgr->range.offset) {
 +		dprintk("%s pattern_offset %lld too large\n",
 +				__func__, fl->pattern_offset);
 +		goto out;
 +	}
 +
 +	if (!fl->stripe_unit) {
 +		dprintk("%s Invalid stripe unit (%u)\n",
 +			__func__, fl->stripe_unit);
 +		goto out;
 +	}
++=======
+ 	/* Is the deviceid already set? If so, we're good. */
+ 	if (fl->dsaddr != NULL)
+ 		return 0;
++>>>>>>> 1ebf98012792 (NFS/filelayout: Fix racy setting of fl->dsaddr in filelayout_check_deviceid())
  
  	/* find and reference the deviceid */
 -	d = nfs4_find_get_deviceid(NFS_SERVER(lo->plh_inode), &fl->deviceid,
 +	d = nfs4_find_get_deviceid(NFS_SERVER(lo->plh_inode), id,
  			lo->plh_lc_cred, gfp_flags);
  	if (d == NULL)
  		goto out;
@@@ -600,6 -571,58 +604,61 @@@
  			__func__, fl->num_fh);
  		goto out_put;
  	}
++<<<<<<< HEAD
++=======
+ 	status = 0;
+ 
+ 	/*
+ 	 * Atomic compare and xchange to ensure we don't scribble
+ 	 * over a non-NULL pointer.
+ 	 */
+ 	if (cmpxchg(&fl->dsaddr, NULL, dsaddr) != NULL)
+ 		goto out_put;
+ out:
+ 	return status;
+ out_put:
+ 	nfs4_fl_put_deviceid(dsaddr);
+ 	goto out;
+ }
+ 
+ /*
+  * filelayout_check_layout()
+  *
+  * Make sure layout segment parameters are sane WRT the device.
+  * At this point no generic layer initialization of the lseg has occurred,
+  * and nothing has been added to the layout_hdr cache.
+  *
+  */
+ static int
+ filelayout_check_layout(struct pnfs_layout_hdr *lo,
+ 			struct nfs4_filelayout_segment *fl,
+ 			struct nfs4_layoutget_res *lgr,
+ 			gfp_t gfp_flags)
+ {
+ 	int status = -EINVAL;
+ 
+ 	dprintk("--> %s\n", __func__);
+ 
+ 	/* FIXME: remove this check when layout segment support is added */
+ 	if (lgr->range.offset != 0 ||
+ 	    lgr->range.length != NFS4_MAX_UINT64) {
+ 		dprintk("%s Only whole file layouts supported. Use MDS i/o\n",
+ 			__func__);
+ 		goto out;
+ 	}
+ 
+ 	if (fl->pattern_offset > lgr->range.offset) {
+ 		dprintk("%s pattern_offset %lld too large\n",
+ 				__func__, fl->pattern_offset);
+ 		goto out;
+ 	}
+ 
+ 	if (!fl->stripe_unit) {
+ 		dprintk("%s Invalid stripe unit (%u)\n",
+ 			__func__, fl->stripe_unit);
+ 		goto out;
+ 	}
++>>>>>>> 1ebf98012792 (NFS/filelayout: Fix racy setting of fl->dsaddr in filelayout_check_deviceid())
  
  	status = 0;
  out:
* Unmerged path fs/nfs/filelayout/filelayout.c
