ipv4: arp: update neighbour address when a gratuitous arp is received and arp_accept is set

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Salam Noureddine <noureddine@aristanetworks.com>
commit 56022a8fdd874c56bb61d8c82559e43044d1aa06
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/56022a8f.failed

Gratuitous arp packets are useful in switchover scenarios to update
client arp tables as quickly as possible. Currently, the mac address
of a neighbour is only updated after a locktime period has elapsed
since the last update. In most use cases such delays are unacceptable
for network admins. Moreover, the "updated" field of the neighbour
stucture doesn't record the last time the address of a neighbour
changed but records any change that happens to the neighbour. This is
clearly a bug since locktime uses that field as meaning "addr_updated".
With this observation, I was able to perpetuate a stale address by
sending a stream of gratuitous arp packets spaced less than locktime
apart. With this change the address is updated when a gratuitous arp
is received and the arp_accept sysctl is set.

	Signed-off-by: Salam Noureddine <noureddine@aristanetworks.com>
	Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 56022a8fdd874c56bb61d8c82559e43044d1aa06)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/arp.c
diff --cc net/ipv4/arp.c
index 98def2add661,1a9b99e04465..000000000000
--- a/net/ipv4/arp.c
+++ b/net/ipv4/arp.c
@@@ -745,7 -732,7 +745,11 @@@ static int arp_process(struct sock *sk
  	int addr_type;
  	struct neighbour *n;
  	struct net *net = dev_net(dev);
++<<<<<<< HEAD
 +	struct dst_entry *reply_dst = NULL;
++=======
+ 	bool is_garp = false;
++>>>>>>> 56022a8fdd87 (ipv4: arp: update neighbour address when a gratuitous arp is received and arp_accept is set)
  
  	/* arp_rcv below verifies the ARP header and verifies the device
  	 * is ARP'able.
* Unmerged path net/ipv4/arp.c
