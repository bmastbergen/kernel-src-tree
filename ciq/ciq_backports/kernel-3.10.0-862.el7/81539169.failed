x86/dumpstack: Remove NULL task pointer convention

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] dumpstack: Remove NULL task pointer convention (Josh Poimboeuf) [1430637]
Rebuild_FUZZ: 95.83%
commit-author Josh Poimboeuf <jpoimboe@redhat.com>
commit 81539169f283329fd8bc58457cc15754f683ba69
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/81539169.failed

show_stack_log_lvl() and friends allow a NULL pointer for the
task_struct to indicate the current task.  This creates confusion and
can cause sneaky bugs.

Instead require the caller to pass 'current' directly.

This only changes the internal workings of the dumpstack code.  The
dump_trace() and show_stack() interfaces still allow a NULL task
pointer.  Those interfaces should also probably be fixed as well.

	Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 81539169f283329fd8bc58457cc15754f683ba69)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/stacktrace.h
#	arch/x86/kernel/dumpstack.c
#	arch/x86/kernel/dumpstack_32.c
#	arch/x86/kernel/dumpstack_64.c
diff --cc arch/x86/include/asm/stacktrace.h
index 7c247e7404be,ed2be1b5ada8..000000000000
--- a/arch/x86/include/asm/stacktrace.h
+++ b/arch/x86/include/asm/stacktrace.h
@@@ -56,30 -88,36 +56,52 @@@ void dump_trace(struct task_struct *tsk
  #endif
  
  #ifdef CONFIG_FRAME_POINTER
 -static inline unsigned long *
 -get_frame_pointer(struct task_struct *task, struct pt_regs *regs)
 +static inline unsigned long
 +stack_frame(struct task_struct *task, struct pt_regs *regs)
  {
 -	if (regs)
 -		return (unsigned long *)regs->bp;
 +	unsigned long bp;
  
 +	if (regs)
 +		return regs->bp;
 +
++<<<<<<< HEAD
 +	if (task == current) {
 +		/* Grab bp right from our regs */
 +		get_bp(bp);
 +		return bp;
 +	}
++=======
+ 	if (task == current)
+ 		return __builtin_frame_address(0);
++>>>>>>> 81539169f283 (x86/dumpstack: Remove NULL task pointer convention)
  
 -	return (unsigned long *)((struct inactive_task_frame *)task->thread.sp)->bp;
 +	/* bp is the last reg pushed by switch_to */
 +	return *(unsigned long *)task->thread.sp;
  }
  #else
 -static inline unsigned long *
 -get_frame_pointer(struct task_struct *task, struct pt_regs *regs)
 +static inline unsigned long
 +stack_frame(struct task_struct *task, struct pt_regs *regs)
  {
++<<<<<<< HEAD
 +	return 0;
++=======
+ 	return NULL;
+ }
+ #endif /* CONFIG_FRAME_POINTER */
+ 
+ static inline unsigned long *
+ get_stack_pointer(struct task_struct *task, struct pt_regs *regs)
+ {
+ 	if (regs)
+ 		return (unsigned long *)kernel_stack_pointer(regs);
+ 
+ 	if (task == current)
+ 		return __builtin_frame_address(0);
+ 
+ 	return (unsigned long *)task->thread.sp;
++>>>>>>> 81539169f283 (x86/dumpstack: Remove NULL task pointer convention)
  }
 +#endif
  
  extern void
  show_trace_log_lvl(struct task_struct *task, struct pt_regs *regs,
diff --cc arch/x86/kernel/dumpstack.c
index 08594671b59f,e0648f755158..000000000000
--- a/arch/x86/kernel/dumpstack.c
+++ b/arch/x86/kernel/dumpstack.c
@@@ -185,15 -174,16 +185,23 @@@ void show_trace(struct task_struct *tas
  void show_stack(struct task_struct *task, unsigned long *sp)
  {
  	unsigned long bp = 0;
 +	unsigned long stack;
  
+ 	task = task ? : current;
+ 
  	/*
  	 * Stack frames below this one aren't interesting.  Don't show them
  	 * if we're printing for %current.
  	 */
++<<<<<<< HEAD
 +	if (!sp && (!task || task == current)) {
 +		sp = &stack;
 +		bp = stack_frame(current, NULL);
++=======
+ 	if (!sp && task == current) {
+ 		sp = get_stack_pointer(current, NULL);
+ 		bp = (unsigned long)get_frame_pointer(current, NULL);
++>>>>>>> 81539169f283 (x86/dumpstack: Remove NULL task pointer convention)
  	}
  
  	show_stack_log_lvl(task, NULL, sp, bp, "");
diff --cc arch/x86/kernel/dumpstack_32.c
index c90b53d2857e,4ff000811e03..000000000000
--- a/arch/x86/kernel/dumpstack_32.c
+++ b/arch/x86/kernel/dumpstack_32.c
@@@ -105,7 -205,7 +105,11 @@@ void show_regs(struct pt_regs *regs
  		u8 *ip;
  
  		pr_emerg("Stack:\n");
++<<<<<<< HEAD
 +		show_stack_log_lvl(NULL, regs, &regs->sp, 0, KERN_EMERG);
++=======
+ 		show_stack_log_lvl(current, regs, NULL, 0, KERN_EMERG);
++>>>>>>> 81539169f283 (x86/dumpstack: Remove NULL task pointer convention)
  
  		pr_emerg("Code:");
  
diff --cc arch/x86/kernel/dumpstack_64.c
index 101e30243d5b,008a29837cab..000000000000
--- a/arch/x86/kernel/dumpstack_64.c
+++ b/arch/x86/kernel/dumpstack_64.c
@@@ -316,8 -278,7 +316,12 @@@ void show_regs(struct pt_regs *regs
  		u8 *ip;
  
  		printk(KERN_DEFAULT "Stack:\n");
++<<<<<<< HEAD
 +		show_stack_log_lvl(NULL, regs, (unsigned long *)sp,
 +				   0, KERN_DEFAULT);
++=======
+ 		show_stack_log_lvl(current, regs, NULL, 0, KERN_DEFAULT);
++>>>>>>> 81539169f283 (x86/dumpstack: Remove NULL task pointer convention)
  
  		printk(KERN_DEFAULT "Code: ");
  
* Unmerged path arch/x86/include/asm/stacktrace.h
* Unmerged path arch/x86/kernel/dumpstack.c
* Unmerged path arch/x86/kernel/dumpstack_32.c
* Unmerged path arch/x86/kernel/dumpstack_64.c
