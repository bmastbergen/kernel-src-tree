x86/headers: Don't include asm/processor.h in asm/atomic.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] x86/headers: Don't asm/processor.h in asm/atomic.h (Jeff Moyer) [1437205]
Rebuild_FUZZ: 92.59%
commit-author Andi Kleen <ak@linux.intel.com>
commit 153a4334c439cfb62e1d31cee0c790ba4157813d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/153a4334.failed

asm/atomic.h doesn't really need asm/processor.h anymore. Everything
it uses has moved to other header files. So remove that include.

processor.h is a nasty header that includes lots of
other headers and makes it prone to include loops. Removing the
include here makes asm/atomic.h a "leaf" header that can
be safely included in most other headers.

The only fallout is in the lib/atomic tester which relied on
this implicit include. Give it an explicit include.
(the include is in ifdef because the user is also in ifdef)

	Signed-off-by: Andi Kleen <ak@linux.intel.com>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Mike Galbraith <efault@gmx.de>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Vince Weaver <vincent.weaver@maine.edu>
	Cc: rostedt@goodmis.org
Link: http://lkml.kernel.org/r/1449018060-1742-1-git-send-email-andi@firstfloor.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 153a4334c439cfb62e1d31cee0c790ba4157813d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	lib/atomic64_test.c
diff --cc lib/atomic64_test.c
index 00bca223d1e1,d51e25aa5f1d..000000000000
--- a/lib/atomic64_test.c
+++ b/lib/atomic64_test.c
@@@ -13,8 -16,43 +13,46 @@@
  #include <linux/kernel.h>
  #include <linux/atomic.h>
  
++<<<<<<< HEAD
++=======
+ #ifdef CONFIG_X86
+ #include <asm/processor.h>	/* for boot_cpu_has below */
+ #endif
+ 
+ #define TEST(bit, op, c_op, val)				\
+ do {								\
+ 	atomic##bit##_set(&v, v0);				\
+ 	r = v0;							\
+ 	atomic##bit##_##op(val, &v);				\
+ 	r c_op val;						\
+ 	WARN(atomic##bit##_read(&v) != r, "%Lx != %Lx\n",	\
+ 		(unsigned long long)atomic##bit##_read(&v),	\
+ 		(unsigned long long)r);				\
+ } while (0)
+ 
+ static __init void test_atomic(void)
+ {
+ 	int v0 = 0xaaa31337;
+ 	int v1 = 0xdeadbeef;
+ 	int onestwos = 0x11112222;
+ 	int one = 1;
+ 
+ 	atomic_t v;
+ 	int r;
+ 
+ 	TEST(, add, +=, onestwos);
+ 	TEST(, add, +=, -one);
+ 	TEST(, sub, -=, onestwos);
+ 	TEST(, sub, -=, -one);
+ 	TEST(, or, |=, v1);
+ 	TEST(, and, &=, v1);
+ 	TEST(, xor, ^=, v1);
+ 	TEST(, andnot, &= ~, v1);
+ }
+ 
++>>>>>>> 153a4334c439 (x86/headers: Don't include asm/processor.h in asm/atomic.h)
  #define INIT(c) do { atomic64_set(&v, c); r = c; } while (0)
 -static __init void test_atomic64(void)
 +static __init int test_atomic64(void)
  {
  	long long v0 = 0xaaa31337c001d00dLL;
  	long long v1 = 0xdeadbeefdeafcafeLL;
diff --git a/arch/x86/include/asm/atomic.h b/arch/x86/include/asm/atomic.h
index 00a4389d3b4e..72e8184bc20f 100644
--- a/arch/x86/include/asm/atomic.h
+++ b/arch/x86/include/asm/atomic.h
@@ -3,7 +3,6 @@
 
 #include <linux/compiler.h>
 #include <linux/types.h>
-#include <asm/processor.h>
 #include <asm/alternative.h>
 #include <asm/cmpxchg.h>
 #include <asm/barrier.h>
diff --git a/arch/x86/include/asm/atomic64_32.h b/arch/x86/include/asm/atomic64_32.h
index 82496c5feadd..71d7705fb303 100644
--- a/arch/x86/include/asm/atomic64_32.h
+++ b/arch/x86/include/asm/atomic64_32.h
@@ -3,7 +3,6 @@
 
 #include <linux/compiler.h>
 #include <linux/types.h>
-#include <asm/processor.h>
 //#include <asm/cmpxchg.h>
 
 /* An 64bit atomic type */
* Unmerged path lib/atomic64_test.c
