ALSA: x86: Simplify comments

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Takashi Iwai <tiwai@suse.de>
commit 44684f61b23c68786834dd2a99d4a68d40a13308
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/44684f61.failed

It's a stand-alone small driver code, and we don't have to describe
too much formalized comments in kernel-doc style for local functions
at all.

	Signed-off-by: Takashi Iwai <tiwai@suse.de>
(cherry picked from commit 44684f61b23c68786834dd2a99d4a68d40a13308)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	sound/x86/intel_hdmi_audio.c
diff --cc sound/x86/intel_hdmi_audio.c
index 063e2be94d05,5613c675ce70..000000000000
--- a/sound/x86/intel_hdmi_audio.c
+++ b/sound/x86/intel_hdmi_audio.c
@@@ -637,24 -654,20 +633,29 @@@ static void snd_intelhad_prog_dip(struc
  
  	/* program remaining DIP words with zero */
  	for (i = 0; i < HAD_MAX_DIP_WORDS-VALID_DIP_WORDS; i++)
 -		had_write_register(intelhaddata, AUD_HDMIW_INFOFR, 0x0);
 +		had_write_register(intelhaddata, AUD_HDMIW_INFOFR_v2, 0x0);
  
 -	ctrl_state.regx.dip_freq = 1;
 -	ctrl_state.regx.dip_en_sta = 1;
 -	had_write_register(intelhaddata, AUD_CNTL_ST, ctrl_state.regval);
 +	ctrl_state.ctrl_regx.dip_freq = 1;
 +	ctrl_state.ctrl_regx.dip_en_sta = 1;
 +	had_write_register(intelhaddata, AUD_CNTL_ST, ctrl_state.ctrl_val);
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_prog_buffer - programs buffer
 + * address and length registers
 + *
 + * @substream:substream for which the prepare function is called
 + * @intelhaddata:substream private data
 + *
++=======
+ /*
+  * Programs buffer address and length registers
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   * This function programs ring buffer address and length into registers.
   */
 -static int snd_intelhad_prog_buffer(struct snd_pcm_substream *substream,
 -				    struct snd_intelhad *intelhaddata,
 -				    int start, int end)
 +int snd_intelhad_prog_buffer(struct snd_intelhad *intelhaddata,
 +					int start, int end)
  {
  	u32 ring_buf_addr, ring_buf_size, period_bytes;
  	u8 i, num_periods;
@@@ -942,14 -951,11 +943,19 @@@ void snd_intelhad_handle_underrun(struc
  			break;
  	} while (i < MAX_CNT);
  	if (i >= MAX_CNT)
 -		dev_err(intelhaddata->dev, "Unable to clear UNDERRUN bits\n");
 +		pr_err("Unable to clear UNDERRUN bits\n");
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_open - stream initializations are done here
 + * @substream:substream for which the stream function is called
 + *
 + * This function is called whenever a PCM stream is opened
++=======
+ /*
+  * ALSA PCM open callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
  static int snd_intelhad_open(struct snd_pcm_substream *substream)
  {
@@@ -1015,55 -1006,8 +1021,60 @@@ exit_put_handle
  	return retval;
  }
  
++<<<<<<< HEAD
 +/**
 + * had_period_elapsed - updates the hardware pointer status
 + * @had_substream:substream for which the stream function is called
 + *
 + */
 +static void had_period_elapsed(void *had_substream)
 +{
 +	struct snd_pcm_substream *substream = had_substream;
 +	struct had_stream_pvt *stream;
 +
 +	/* pr_debug("had_period_elapsed called\n"); */
 +
 +	if (!substream || !substream->runtime)
 +		return;
 +	stream = substream->runtime->private_data;
 +	if (!stream)
 +		return;
 +
 +	if (stream->stream_status != STREAM_RUNNING)
 +		return;
 +	snd_pcm_period_elapsed(substream);
 +}
 +
 +/**
 + * snd_intelhad_init_stream - internal function to initialize stream info
 + * @substream:substream for which the stream function is called
 + *
 + */
 +static int snd_intelhad_init_stream(struct snd_pcm_substream *substream)
 +{
 +	struct snd_intelhad *intelhaddata = snd_pcm_substream_chip(substream);
 +
 +	pr_debug("snd_intelhad_init_stream called\n");
 +
 +	pr_debug("setting buffer ptr param\n");
 +	intelhaddata->stream_info.period_elapsed = had_period_elapsed;
 +	intelhaddata->stream_info.had_substream = substream;
 +	intelhaddata->stream_info.buffer_ptr = 0;
 +	intelhaddata->stream_info.buffer_rendered = 0;
 +	intelhaddata->stream_info.sfreq = substream->runtime->rate;
 +	return 0;
 +}
 +
 +/**
 + * snd_intelhad_close- to free parameteres when stream is stopped
 + *
 + * @substream:  substream for which the function is called
 + *
 + * This function is called by ALSA framework when stream is stopped
++=======
+ /*
+  * ALSA PCM close callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
  static int snd_intelhad_close(struct snd_pcm_substream *substream)
  {
@@@ -1097,14 -1037,8 +1108,19 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_hw_params- to setup the hardware parameters
 + * like allocating the buffers
 + *
 + * @substream:  substream for which the function is called
 + * @hw_params: hardware parameters
 + *
 + * This function is called by ALSA framework when hardware params are set
++=======
+ /*
+  * ALSA PCM hw_params callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
  static int snd_intelhad_hw_params(struct snd_pcm_substream *substream,
  				    struct snd_pcm_hw_params *hw_params)
@@@ -1135,14 -1071,8 +1151,19 @@@
  	return retval;
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_hw_free- to release the resources allocated during
 + * hardware params setup
 + *
 + * @substream:  substream for which the function is called
 + *
 + * This function is called by ALSA framework before close callback.
 + *
++=======
+ /*
+  * ALSA PCM hw_free callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
  static int snd_intelhad_hw_free(struct snd_pcm_substream *substream)
  {
@@@ -1162,11 -1090,8 +1183,16 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_pcm_trigger - stream activities are handled here
 + * @substream:substream for which the stream function is called
 + * @cmd:the stream commamd thats requested from upper layer
 + * This function is called whenever an a stream activity is invoked
++=======
+ /*
+  * ALSA PCM trigger callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
  static int snd_intelhad_pcm_trigger(struct snd_pcm_substream *substream,
  					int cmd)
@@@ -1243,12 -1145,8 +1269,17 @@@
  	return retval;
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_pcm_prepare- internal preparation before starting a stream
 + *
 + * @substream:  substream for which the function is called
 + *
 + * This function is called when a stream is started for internal preparation.
++=======
+ /*
+  * ALSA PCM prepare callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
  static int snd_intelhad_pcm_prepare(struct snd_pcm_substream *substream)
  {
@@@ -1336,16 -1213,11 +1367,21 @@@ prep_end
  	return retval;
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_pcm_pointer- to send the current buffer pointerprocessed by hw
 + *
 + * @substream:  substream for which the function is called
 + *
 + * This function is called by ALSA framework to get the current hw buffer ptr
 + * when a period is elapsed
++=======
+ /*
+  * ALSA PCM pointer callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
- static snd_pcm_uframes_t snd_intelhad_pcm_pointer(
- 					struct snd_pcm_substream *substream)
+ static snd_pcm_uframes_t
+ snd_intelhad_pcm_pointer(struct snd_pcm_substream *substream)
  {
  	struct snd_intelhad *intelhaddata;
  	u32 bytes_rendered = 0;
@@@ -1392,20 -1262,11 +1428,25 @@@
  			intelhaddata->stream_info.ring_buf_size,
  			&(bytes_rendered));
  
 -	return bytes_to_frames(substream->runtime, bytes_rendered + t);
 +	intelhaddata->stream_info.buffer_ptr = bytes_to_frames(
 +						substream->runtime,
 +						bytes_rendered + t);
 +	return intelhaddata->stream_info.buffer_ptr;
  }
  
++<<<<<<< HEAD
 +/**
 + * snd_intelhad_pcm_mmap- mmaps a kernel buffer to user space for copying data
 + *
 + * @substream:  substream for which the function is called
 + * @vma:		struct instance of memory VMM memory area
 + *
 + * This function is called by OS when a user space component
 + * tries to get mmap memory from driver
++=======
+ /*
+  * ALSA PCM mmap callback
++>>>>>>> 44684f61b23c (ALSA: x86: Simplify comments)
   */
  static int snd_intelhad_pcm_mmap(struct snd_pcm_substream *substream,
  	struct vm_area_struct *vma)
* Unmerged path sound/x86/intel_hdmi_audio.c
