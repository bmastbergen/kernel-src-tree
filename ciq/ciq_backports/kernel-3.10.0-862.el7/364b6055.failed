net: busy-poll: return busypolling status to drivers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] busy-poll: return busypolling status to drivers (Ivan Vecera) [1489406]
Rebuild_FUZZ: 94.95%
commit-author Eric Dumazet <edumazet@google.com>
commit 364b6055738b4c752c30ccaaf25c624e69d76195
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/364b6055.failed

NAPI drivers use napi_complete_done() or napi_complete() when
they drained RX ring and right before re-enabling device interrupts.

In busy polling, we can avoid interrupts being delivered since
we are polling RX ring in a controlled loop.

Drivers can chose to use napi_complete_done() return value
to reduce interrupts overhead while busy polling is active.

This is optional, legacy drivers should work fine even
if not updated.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Cc: Willem de Bruijn <willemb@google.com>
	Cc: Adam Belay <abelay@google.com>
	Cc: Tariq Toukan <tariqt@mellanox.com>
	Cc: Yuval Mintz <Yuval.Mintz@cavium.com>
	Cc: Ariel Elior <ariel.elior@cavium.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 364b6055738b4c752c30ccaaf25c624e69d76195)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/netdevice.h
#	net/core/dev.c
diff --cc include/linux/netdevice.h
index 118817028a8c,bcddf951ccee..000000000000
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@@ -472,16 -463,17 +472,21 @@@ static inline bool napi_reschedule(stru
  	return false;
  }
  
- void __napi_complete(struct napi_struct *n);
- void napi_complete_done(struct napi_struct *n, int work_done);
+ bool __napi_complete(struct napi_struct *n);
+ bool napi_complete_done(struct napi_struct *n, int work_done);
  /**
   *	napi_complete - NAPI processing complete
 - *	@n: NAPI context
 + *	@n: napi context
   *
   * Mark NAPI processing as complete.
   * Consider using napi_complete_done() instead.
+  * Return false if device should avoid rearming interrupts.
   */
++<<<<<<< HEAD
 +static inline void _napi_complete(struct napi_struct *n)
++=======
+ static inline bool napi_complete(struct napi_struct *n)
++>>>>>>> 364b6055738b (net: busy-poll: return busypolling status to drivers)
  {
  	return napi_complete_done(n, 0);
  }
diff --cc net/core/dev.c
index 5f3231ddea24,edba9efeb2e9..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -4730,9 -4902,16 +4730,19 @@@ bool __napi_complete(struct napi_struc
  {
  	BUG_ON(!test_bit(NAPI_STATE_SCHED, &n->state));
  
++<<<<<<< HEAD
++=======
+ 	/* Some drivers call us directly, instead of calling
+ 	 * napi_complete_done().
+ 	 */
+ 	if (unlikely(test_bit(NAPI_STATE_IN_BUSY_POLL, &n->state)))
+ 		return false;
+ 
++>>>>>>> 364b6055738b (net: busy-poll: return busypolling status to drivers)
  	list_del_init(&n->poll_list);
 -	smp_mb__before_atomic();
 +	smp_mb__before_clear_bit();
  	clear_bit(NAPI_STATE_SCHED, &n->state);
+ 	return true;
  }
  EXPORT_SYMBOL(__napi_complete);
  
@@@ -4741,11 -4920,14 +4751,17 @@@ bool napi_complete_done(struct napi_str
  	unsigned long flags;
  
  	/*
 -	 * 1) Don't let napi dequeue from the cpu poll list
 -	 *    just in case its running on a different cpu.
 -	 * 2) If we are busy polling, do nothing here, we have
 -	 *    the guarantee we will be called later.
 +	 * don't let napi dequeue from the cpu poll list
 +	 * just in case its running on a different cpu
  	 */
++<<<<<<< HEAD
 +	if (unlikely(test_bit(NAPI_STATE_NPSVC, &n->state)))
 +		return;
++=======
+ 	if (unlikely(n->state & (NAPIF_STATE_NPSVC |
+ 				 NAPIF_STATE_IN_BUSY_POLL)))
+ 		return false;
++>>>>>>> 364b6055738b (net: busy-poll: return busypolling status to drivers)
  
  	if (n->gro_list) {
  		unsigned long timeout = 0;
* Unmerged path include/linux/netdevice.h
* Unmerged path net/core/dev.c
