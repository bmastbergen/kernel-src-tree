sch_fq_codel: avoid double free on init failure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
commit 30c31d746d0eb458ae327f522bc8e4c44cbea0f0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/30c31d74.failed

It is very unlikely to happen but the backlogs memory allocation
could fail and will free q->flows, but then ->destroy() will free
q->flows too. For correctness remove the first free and let ->destroy
clean up.

Fixes: 87b60cfacf9f ("net_sched: fix error recovery at qdisc creation")
	Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 30c31d746d0eb458ae327f522bc8e4c44cbea0f0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/sch_fq_codel.c
diff --cc net/sched/sch_fq_codel.c
index 7d8847dc1983,2c0c05f2cc34..000000000000
--- a/net/sched/sch_fq_codel.c
+++ b/net/sched/sch_fq_codel.c
@@@ -500,16 -481,18 +500,20 @@@ static int fq_codel_init(struct Qdisc *
  			return err;
  	}
  
 -	err = tcf_block_get(&q->block, &q->filter_list);
 -	if (err)
 -		return err;
 -
  	if (!q->flows) {
 -		q->flows = kvzalloc(q->flows_cnt *
 -					   sizeof(struct fq_codel_flow), GFP_KERNEL);
 +		q->flows = fq_codel_zalloc(q->flows_cnt *
 +					   sizeof(struct fq_codel_flow));
  		if (!q->flows)
  			return -ENOMEM;
++<<<<<<< HEAD
 +		q->backlogs = fq_codel_zalloc(q->flows_cnt * sizeof(u32));
 +		if (!q->backlogs) {
 +			fq_codel_free(q->flows);
++=======
+ 		q->backlogs = kvzalloc(q->flows_cnt * sizeof(u32), GFP_KERNEL);
+ 		if (!q->backlogs)
++>>>>>>> 30c31d746d0e (sch_fq_codel: avoid double free on init failure)
  			return -ENOMEM;
- 		}
  		for (i = 0; i < q->flows_cnt; i++) {
  			struct fq_codel_flow *flow = q->flows + i;
  
* Unmerged path net/sched/sch_fq_codel.c
