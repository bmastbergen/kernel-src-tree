hwrng: remember rng chosen by user

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Harald Freudenberger <freude@linux.vnet.ibm.com>
commit 10a515ddb5f19a1ff0b9882c430b4427843169f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/10a515dd.failed

When a user chooses a rng source via sysfs attribute
this rng should be sticky, even when other sources
with better quality to register. This patch introduces
a simple way to remember the user's choice. This is
reflected by a new sysfs attribute file 'rng_selected'
which shows if the current rng has been chosen by
userspace. The new attribute file shows '1' for user
selected rng and '0' otherwise.

	Signed-off-by: Harald Freudenberger <freude@linux.vnet.ibm.com>
	Reviewed-by: PrasannaKumar Muralidharan <prasannatsmkumar@gmail.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 10a515ddb5f19a1ff0b9882c430b4427843169f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/hw_random/core.c
diff --cc drivers/char/hw_random/core.c
index 77bf713e0049,9701ac7d8b47..000000000000
--- a/drivers/char/hw_random/core.c
+++ b/drivers/char/hw_random/core.c
@@@ -1,58 -1,35 +1,60 @@@
  /*
 - * hw_random/core.c: HWRNG core API
 - *
 - * Copyright 2006 Michael Buesch <m@bues.ch>
 - * Copyright 2005 (c) MontaVista Software, Inc.
 - *
 - * Please read Documentation/hw_random.txt for details on use.
 - *
 - * This software may be used and distributed according to the terms
 - * of the GNU General Public License, incorporated herein by reference.
 +        Added support for the AMD Geode LX RNG
 +	(c) Copyright 2004-2005 Advanced Micro Devices, Inc.
 +
 +	derived from
 +
 + 	Hardware driver for the Intel/AMD/VIA Random Number Generators (RNG)
 +	(c) Copyright 2003 Red Hat Inc <jgarzik@redhat.com>
 +
 + 	derived from
 +
 +        Hardware driver for the AMD 768 Random Number Generator (RNG)
 +        (c) Copyright 2001 Red Hat Inc <alan@redhat.com>
 +
 + 	derived from
 +
 +	Hardware driver for Intel i810 Random Number Generator (RNG)
 +	Copyright 2000,2001 Jeff Garzik <jgarzik@pobox.com>
 +	Copyright 2000,2001 Philipp Rumpf <prumpf@mandrakesoft.com>
 +
 +	Added generic RNG API
 +	Copyright 2006 Michael Buesch <m@bues.ch>
 +	Copyright 2005 (c) MontaVista Software, Inc.
 +
 +	Please read Documentation/hw_random.txt for details on use.
 +
 +	----------------------------------------------------------
 +	This software may be used and distributed according to the terms
 +        of the GNU General Public License, incorporated herein by reference.
 +
   */
  
 -#include <linux/delay.h>
 +
  #include <linux/device.h>
 -#include <linux/err.h>
 -#include <linux/fs.h>
  #include <linux/hw_random.h>
 -#include <linux/kernel.h>
 -#include <linux/kthread.h>
 -#include <linux/sched/signal.h>
 -#include <linux/miscdevice.h>
  #include <linux/module.h>
 -#include <linux/random.h>
 +#include <linux/kernel.h>
 +#include <linux/fs.h>
  #include <linux/sched.h>
 +#include <linux/init.h>
 +#include <linux/miscdevice.h>
 +#include <linux/kthread.h>
 +#include <linux/delay.h>
  #include <linux/slab.h>
 -#include <linux/uaccess.h>
 +#include <linux/random.h>
 +#include <linux/err.h>
 +#include <asm/uaccess.h>
 +
  
  #define RNG_MODULE_NAME		"hw_random"
 +#define PFX			RNG_MODULE_NAME ": "
 +#define RNG_MISCDEV_MINOR	183 /* official */
 +
  
  static struct hwrng *current_rng;
+ /* the current rng has been explicitly chosen by user via sysfs */
+ static int cur_rng_set_by_user;
  static struct task_struct *hwrng_fill;
  /* list of registered rngs, sorted decending by quality */
  static LIST_HEAD(rng_list);
@@@ -325,8 -304,9 +327,9 @@@ static ssize_t hwrng_attr_current_store
  		return -ERESTARTSYS;
  	err = -ENODEV;
  	list_for_each_entry(rng, &rng_list, list) {
 -		if (sysfs_streq(rng->name, buf)) {
 +		if (strcmp(rng->name, buf) == 0) {
  			err = 0;
+ 			cur_rng_set_by_user = 1;
  			if (rng != current_rng)
  				err = set_current_rng(rng);
  			break;
@@@ -367,25 -346,40 +370,46 @@@ static ssize_t hwrng_attr_available_sho
  		return -ERESTARTSYS;
  	buf[0] = '\0';
  	list_for_each_entry(rng, &rng_list, list) {
 -		strlcat(buf, rng->name, PAGE_SIZE);
 -		strlcat(buf, " ", PAGE_SIZE);
 +		strncat(buf, rng->name, PAGE_SIZE - ret - 1);
 +		ret += strlen(rng->name);
 +		strncat(buf, " ", PAGE_SIZE - ret - 1);
 +		ret++;
  	}
 -	strlcat(buf, "\n", PAGE_SIZE);
 +	strncat(buf, "\n", PAGE_SIZE - ret - 1);
 +	ret++;
  	mutex_unlock(&rng_mutex);
  
 -	return strlen(buf);
 +	return ret;
  }
  
+ static ssize_t hwrng_attr_selected_show(struct device *dev,
+ 					struct device_attribute *attr,
+ 					char *buf)
+ {
+ 	return snprintf(buf, PAGE_SIZE, "%d\n", cur_rng_set_by_user);
+ }
+ 
  static DEVICE_ATTR(rng_current, S_IRUGO | S_IWUSR,
  		   hwrng_attr_current_show,
  		   hwrng_attr_current_store);
  static DEVICE_ATTR(rng_available, S_IRUGO,
  		   hwrng_attr_available_show,
  		   NULL);
+ static DEVICE_ATTR(rng_selected, S_IRUGO,
+ 		   hwrng_attr_selected_show,
+ 		   NULL);
+ 
++<<<<<<< HEAD
++=======
+ static struct attribute *rng_dev_attrs[] = {
+ 	&dev_attr_rng_current.attr,
+ 	&dev_attr_rng_available.attr,
+ 	&dev_attr_rng_selected.attr,
+ 	NULL
+ };
  
+ ATTRIBUTE_GROUPS(rng_dev);
++>>>>>>> 10a515ddb5f1 (hwrng: remember rng chosen by user)
  
  static void __exit unregister_miscdev(void)
  {
* Unmerged path drivers/char/hw_random/core.c
