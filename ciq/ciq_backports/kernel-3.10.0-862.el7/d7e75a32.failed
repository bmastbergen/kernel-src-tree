net/mlx5e: Add offloading of E-Switch TC pedit (header re-write) actions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Add offloading of E-Switch TC pedit (header re-write) actions (Don Dutile) [1456687 1499362]
Rebuild_FUZZ: 97.14%
commit-author Or Gerlitz <ogerlitz@mellanox.com>
commit d7e75a325cb2d2b72e7ac9a185abc1cd59bc9922
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d7e75a32.failed

This includes calling the parsing code that translates from pedit
speak to the HW API, allocation (deallocation) of a modify header
context and setting the modify header id associated with this
context to the FTE of that flow.

	Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
	Reviewed-by: Hadar Hen Zion <hadarh@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit d7e75a325cb2d2b72e7ac9a185abc1cd59bc9922)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 29674f9689a9,9dec11c00a49..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -111,6 -116,19 +111,22 @@@ mlx5e_tc_add_nic_flow(struct mlx5e_pri
  		dest.counter = counter;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR) {
+ 		err = mlx5_modify_header_alloc(dev, MLX5_FLOW_NAMESPACE_KERNEL,
+ 					       parse_attr->num_mod_hdr_actions,
+ 					       parse_attr->mod_hdr_actions,
+ 					       &attr->mod_hdr_id);
+ 		flow_act.modify_id = attr->mod_hdr_id;
+ 		kfree(parse_attr->mod_hdr_actions);
+ 		if (err) {
+ 			rule = ERR_PTR(err);
+ 			goto err_create_mod_hdr_id;
+ 		}
+ 	}
+ 
++>>>>>>> d7e75a325cb2 (net/mlx5e: Add offloading of E-Switch TC pedit (header re-write) actions)
  	if (IS_ERR_OR_NULL(priv->fs.tc.t)) {
  		priv->fs.tc.t =
  			mlx5_create_auto_grouped_flow_table(priv->fs.ns,
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
index c35a84ceec14..a91e2753100f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch.h
@@ -309,6 +309,7 @@ struct mlx5_esw_flow_attr {
 	u16	vlan;
 	bool	vlan_handled;
 	struct mlx5_encap_entry *encap;
+	u32	mod_hdr_id;
 };
 
 int mlx5_eswitch_sqs2vport_start(struct mlx5_eswitch *esw,
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 688bdd547745..d53c637e7199 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@ -88,7 +88,10 @@ mlx5_eswitch_add_offloaded_rule(struct mlx5_eswitch *esw,
 	if (flow_act.action & MLX5_FLOW_CONTEXT_ACTION_DECAP)
 		spec->match_criteria_enable |= MLX5_MATCH_INNER_HEADERS;
 
-	if (attr->encap)
+	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
+		flow_act.modify_id = attr->mod_hdr_id;
+
+	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_ENCAP)
 		flow_act.encap_id = attr->encap->encap_id;
 
 	rule = mlx5_add_flow_rules((struct mlx5_flow_table *)esw->fdb_table.fdb,
