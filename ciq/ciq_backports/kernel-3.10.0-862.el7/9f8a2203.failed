net: aquantia: Fill ndev stat couters from hardware

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] aquantia: Fill ndev stat couters from hardware (David Arcari) [1500365]
Rebuild_FUZZ: 94.85%
commit-author Igor Russkikh <igor.russkikh@aquantia.com>
commit 9f8a2203a542f5f3cdeb17f40250c49bb87aa7e3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9f8a2203.failed

Originally they were filled from ring sw counters.
These sometimes incorrectly calculate byte and packet amounts
when using LRO/LSO and jumboframes. Filling ndev counters from
hardware makes them precise.

	Signed-off-by: Igor Russkikh <igor.russkikh@aquantia.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9f8a2203a542f5f3cdeb17f40250c49bb87aa7e3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/aquantia/atlantic/aq_nic.c
diff --cc drivers/net/ethernet/aquantia/atlantic/aq_nic.c
index 7c2a87f5d89a,307caac68731..000000000000
--- a/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
+++ b/drivers/net/ethernet/aquantia/atlantic/aq_nic.c
@@@ -24,6 -25,20 +24,23 @@@
  #include <linux/tcp.h>
  #include <net/ip.h>
  
++<<<<<<< HEAD
++=======
+ static unsigned int aq_itr = AQ_CFG_INTERRUPT_MODERATION_AUTO;
+ module_param_named(aq_itr, aq_itr, uint, 0644);
+ MODULE_PARM_DESC(aq_itr, "Interrupt throttling mode");
+ 
+ static unsigned int aq_itr_tx;
+ module_param_named(aq_itr_tx, aq_itr_tx, uint, 0644);
+ MODULE_PARM_DESC(aq_itr_tx, "TX interrupt throttle rate");
+ 
+ static unsigned int aq_itr_rx;
+ module_param_named(aq_itr_rx, aq_itr_rx, uint, 0644);
+ MODULE_PARM_DESC(aq_itr_rx, "RX interrupt throttle rate");
+ 
+ static void aq_nic_update_ndev_stats(struct aq_nic_s *self);
+ 
++>>>>>>> 9f8a2203a542 (net: aquantia: Fill ndev stat couters from hardware)
  static void aq_nic_rss_init(struct aq_nic_s *self, unsigned int num_rss_queues)
  {
  	struct aq_nic_cfg_s *cfg = &self->aq_nic_cfg;
@@@ -117,15 -134,41 +134,51 @@@ int aq_nic_cfg_start(struct aq_nic_s *s
  	return 0;
  }
  
 -static int aq_nic_update_link_status(struct aq_nic_s *self)
 +static void aq_nic_service_timer_cb(unsigned long param)
  {
++<<<<<<< HEAD
 +	struct aq_nic_s *self = (struct aq_nic_s *)param;
 +	struct net_device *ndev = aq_nic_get_ndev(self);
 +	int err = 0;
 +	unsigned int i = 0U;
 +	struct aq_hw_link_status_s link_status;
 +	struct aq_ring_stats_rx_s stats_rx;
 +	struct aq_ring_stats_tx_s stats_tx;
++=======
+ 	int err = self->aq_hw_ops.hw_get_link_status(self->aq_hw);
+ 
+ 	if (err)
+ 		return err;
+ 
+ 	if (self->link_status.mbps != self->aq_hw->aq_link_status.mbps) {
+ 		pr_info("%s: link change old %d new %d\n",
+ 			AQ_CFG_DRV_NAME, self->link_status.mbps,
+ 			self->aq_hw->aq_link_status.mbps);
+ 		aq_nic_update_interrupt_moderation_settings(self);
+ 	}
+ 
+ 	self->link_status = self->aq_hw->aq_link_status;
+ 	if (!netif_carrier_ok(self->ndev) && self->link_status.mbps) {
+ 		aq_utils_obj_set(&self->header.flags,
+ 				 AQ_NIC_FLAG_STARTED);
+ 		aq_utils_obj_clear(&self->header.flags,
+ 				   AQ_NIC_LINK_DOWN);
+ 		netif_carrier_on(self->ndev);
+ 		netif_tx_wake_all_queues(self->ndev);
+ 	}
+ 	if (netif_carrier_ok(self->ndev) && !self->link_status.mbps) {
+ 		netif_carrier_off(self->ndev);
+ 		netif_tx_disable(self->ndev);
+ 		aq_utils_obj_set(&self->header.flags, AQ_NIC_LINK_DOWN);
+ 	}
+ 	return 0;
+ }
+ 
+ static void aq_nic_service_timer_cb(struct timer_list *t)
+ {
+ 	struct aq_nic_s *self = from_timer(self, t, service_timer);
+ 	int err = 0;
++>>>>>>> 9f8a2203a542 (net: aquantia: Fill ndev stat couters from hardware)
  
  	if (aq_utils_obj_test(&self->header.flags, AQ_NIC_FLAGS_IS_NOT_READY))
  		goto err_exit;
* Unmerged path drivers/net/ethernet/aquantia/atlantic/aq_nic.c
