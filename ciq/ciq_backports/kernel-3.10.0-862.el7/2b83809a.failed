x86/cpu/amd: Derive L3 shared_cpu_map from cpu_llc_shared_mask

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] amd: Derive L3 shared_cpu_map from cpu_llc_shared_mask (Suravee Suthikulpanit) [1477399]
Rebuild_FUZZ: 93.10%
commit-author Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
commit 2b83809a5e6d619a780876fcaf68cdc42b50d28c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2b83809a.failed

For systems with X86_FEATURE_TOPOEXT, current logic uses the APIC ID
to calculate shared_cpu_map. However, APIC IDs are not guaranteed to
be contiguous for cores across different L3s (e.g. family17h system
w/ downcore configuration). This breaks the logic, and results in an
incorrect L3 shared_cpu_map.

Instead, always use the previously calculated cpu_llc_shared_mask of
each CPU to derive the L3 shared_cpu_map.

	Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: http://lkml.kernel.org/r/20170731085159.9455-3-bp@alien8.de
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 2b83809a5e6d619a780876fcaf68cdc42b50d28c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/intel_cacheinfo.c
diff --cc arch/x86/kernel/cpu/intel_cacheinfo.c
index 3182124f26fd,24f749324c0f..000000000000
--- a/arch/x86/kernel/cpu/intel_cacheinfo.c
+++ b/arch/x86/kernel/cpu/intel_cacheinfo.c
@@@ -738,27 -804,35 +738,48 @@@ unsigned int init_intel_cacheinfo(struc
  	return l2;
  }
  
 -static int __cache_amd_cpumap_setup(unsigned int cpu, int index,
 -				    struct _cpuid4_info_regs *base)
 +#ifdef CONFIG_SYSFS
 +
 +/* pointer to _cpuid4_info array (for each cache leaf) */
 +static DEFINE_PER_CPU(struct _cpuid4_info *, ici_cpuid4_info);
 +#define CPUID4_INFO_IDX(x, y)	(&((per_cpu(ici_cpuid4_info, x))[y]))
 +
 +#ifdef CONFIG_SMP
 +
 +static int cache_shared_amd_cpu_map_setup(unsigned int cpu, int index)
  {
 -	struct cpu_cacheinfo *this_cpu_ci = get_cpu_cacheinfo(cpu);
 -	struct cacheinfo *this_leaf;
 +	struct _cpuid4_info *this_leaf;
  	int i, sibling;
  
++<<<<<<< HEAD
 +	if (cpu_has_topoext) {
++=======
+ 	/*
+ 	 * For L3, always use the pre-calculated cpu_llc_shared_mask
+ 	 * to derive shared_cpu_map.
+ 	 */
+ 	if (index == 3) {
+ 		for_each_cpu(i, cpu_llc_shared_mask(cpu)) {
+ 			this_cpu_ci = get_cpu_cacheinfo(i);
+ 			if (!this_cpu_ci->info_list)
+ 				continue;
+ 			this_leaf = this_cpu_ci->info_list + index;
+ 			for_each_cpu(sibling, cpu_llc_shared_mask(cpu)) {
+ 				if (!cpu_online(sibling))
+ 					continue;
+ 				cpumask_set_cpu(sibling,
+ 						&this_leaf->shared_cpu_map);
+ 			}
+ 		}
+ 	} else if (boot_cpu_has(X86_FEATURE_TOPOEXT)) {
++>>>>>>> 2b83809a5e6d (x86/cpu/amd: Derive L3 shared_cpu_map from cpu_llc_shared_mask)
  		unsigned int apicid, nshared, first, last;
  
 -		this_leaf = this_cpu_ci->info_list + index;
 -		nshared = base->eax.split.num_threads_sharing + 1;
 +		if (!per_cpu(ici_cpuid4_info, cpu))
 +			return 0;
 +
 +		this_leaf = CPUID4_INFO_IDX(cpu, index);
 +		nshared = this_leaf->base.eax.split.num_threads_sharing + 1;
  		apicid = cpu_data(cpu).apicid;
  		first = apicid - (apicid % nshared);
  		last = first + nshared - 1;
@@@ -775,20 -852,10 +796,23 @@@
  				apicid = cpu_data(sibling).apicid;
  				if ((apicid < first) || (apicid > last))
  					continue;
 -				cpumask_set_cpu(sibling,
 -						&this_leaf->shared_cpu_map);
 +				set_bit(sibling, this_leaf->shared_cpu_map);
  			}
  		}
++<<<<<<< HEAD
 +	} else if (index == 3) {
 +		for_each_cpu(i, cpu_llc_shared_mask(cpu)) {
 +			if (!per_cpu(ici_cpuid4_info, i))
 +				continue;
 +			this_leaf = CPUID4_INFO_IDX(i, index);
 +			for_each_cpu(sibling, cpu_llc_shared_mask(cpu)) {
 +				if (!cpu_online(sibling))
 +					continue;
 +				set_bit(sibling, this_leaf->shared_cpu_map);
 +			}
 +		}
++=======
++>>>>>>> 2b83809a5e6d (x86/cpu/amd: Derive L3 shared_cpu_map from cpu_llc_shared_mask)
  	} else
  		return 0;
  
* Unmerged path arch/x86/kernel/cpu/intel_cacheinfo.c
