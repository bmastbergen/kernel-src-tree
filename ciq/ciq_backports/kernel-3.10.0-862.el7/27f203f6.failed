untangle fsnotify_d_instantiate() a bit

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 27f203f655a2e1dab66598a5b19afb637c587f0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/27f203f6.failed

First of all, don't bother calling it if inode is NULL -
that makes inode argument unused.  Moreover, do it *before*
dropping ->d_lock, not right after that (and don't bother
grabbing ->d_lock in it, of course).

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
(cherry picked from commit 27f203f655a2e1dab66598a5b19afb637c587f0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/dcache.c
diff --cc fs/dcache.c
index e518a196fb4f,244fd2487fe9..000000000000
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@@ -1534,13 -1745,14 +1534,21 @@@ static void __d_instantiate(struct dent
  	unsigned add_flags = d_flags_for_inode(inode);
  
  	spin_lock(&dentry->d_lock);
 +	__d_set_type(dentry, add_flags);
  	if (inode)
++<<<<<<< HEAD
 +		hlist_add_head(&dentry->d_alias, &inode->i_dentry);
 +	dentry->d_inode = inode;
 +	dentry_rcuwalk_barrier(dentry);
++=======
+ 		hlist_add_head(&dentry->d_u.d_alias, &inode->i_dentry);
+ 	raw_write_seqcount_begin(&dentry->d_seq);
+ 	__d_set_inode_and_type(dentry, inode, add_flags);
+ 	raw_write_seqcount_end(&dentry->d_seq);
+ 	if (inode)
+ 		__fsnotify_d_instantiate(dentry);
++>>>>>>> 27f203f655a2 (untangle fsnotify_d_instantiate() a bit)
  	spin_unlock(&dentry->d_lock);
- 	fsnotify_d_instantiate(dentry, inode);
  }
  
  /**
* Unmerged path fs/dcache.c
diff --git a/include/linux/fsnotify.h b/include/linux/fsnotify.h
index fe48e677497c..7d055463dc7c 100644
--- a/include/linux/fsnotify.h
+++ b/include/linux/fsnotify.h
@@ -16,15 +16,6 @@
 #include <linux/slab.h>
 #include <linux/bug.h>
 
-/*
- * fsnotify_d_instantiate - instantiate a dentry for inode
- */
-static inline void fsnotify_d_instantiate(struct dentry *dentry,
-					  struct inode *inode)
-{
-	__fsnotify_d_instantiate(dentry, inode);
-}
-
 /* Notify this dentry's parent about a child's events. */
 static inline int fsnotify_parent(const struct path *path, struct dentry *dentry, __u32 mask)
 {
diff --git a/include/linux/fsnotify_backend.h b/include/linux/fsnotify_backend.h
index 5dbf2133158a..e8bceb599b6b 100644
--- a/include/linux/fsnotify_backend.h
+++ b/include/linux/fsnotify_backend.h
@@ -290,14 +290,9 @@ static inline void __fsnotify_update_dcache_flags(struct dentry *dentry)
 /*
  * fsnotify_d_instantiate - instantiate a dentry for inode
  */
-static inline void __fsnotify_d_instantiate(struct dentry *dentry, struct inode *inode)
+static inline void __fsnotify_d_instantiate(struct dentry *dentry)
 {
-	if (!inode)
-		return;
-
-	spin_lock(&dentry->d_lock);
 	__fsnotify_update_dcache_flags(dentry);
-	spin_unlock(&dentry->d_lock);
 }
 
 /* called from fsnotify listeners, such as fanotify or dnotify */
@@ -392,7 +387,7 @@ static inline void __fsnotify_vfsmount_delete(struct vfsmount *mnt)
 static inline void __fsnotify_update_dcache_flags(struct dentry *dentry)
 {}
 
-static inline void __fsnotify_d_instantiate(struct dentry *dentry, struct inode *inode)
+static inline void __fsnotify_d_instantiate(struct dentry *dentry)
 {}
 
 static inline u32 fsnotify_get_cookie(void)
