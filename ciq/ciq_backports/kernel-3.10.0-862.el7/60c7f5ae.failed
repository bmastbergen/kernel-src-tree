mlx4: removal of frag_sizes[]

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 60c7f5ae5416a8491216bcccf6b3b3d842d69fa4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/60c7f5ae.failed

We will soon use order-0 pages, and frag truesize will more precisely
match real sizes.

In the new model, we prefer to use <= 2048 bytes fragments, so that
we can use page-recycle technique on PAGE_SIZE=4096 arches.

We will still pack as much frames as possible on arches with big
pages, like PowerPC.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 60c7f5ae5416a8491216bcccf6b3b3d842d69fa4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx4/en_rx.c
diff --cc drivers/net/ethernet/mellanox/mlx4/en_rx.c
index 984f22166c89,0c61c1200f2a..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_rx.c
@@@ -1129,37 -1181,44 +1129,65 @@@ int mlx4_en_poll_rx_cq(struct napi_stru
  	return done;
  }
  
- static const int frag_sizes[] = {
- 	FRAG_SZ0,
- 	FRAG_SZ1,
- 	FRAG_SZ2,
- 	FRAG_SZ3
- };
- 
  void mlx4_en_calc_rx_buf(struct net_device *dev)
  {
 +	enum dma_data_direction dma_dir = PCI_DMA_FROMDEVICE;
  	struct mlx4_en_priv *priv = netdev_priv(dev);
 -	int eff_mtu = MLX4_EN_EFF_MTU(dev->mtu);
 +	/* VLAN_HLEN is added twice,to support skb vlan tagged with multiple
 +	 * headers. (For example: ETH_P_8021Q and ETH_P_8021AD).
 +	 */
 +	int eff_mtu = dev->mtu + ETH_HLEN + (2 * VLAN_HLEN);
 +	int order = MLX4_EN_ALLOC_PREFER_ORDER;
 +	u32 align = SMP_CACHE_BYTES;
 +	int buf_size = 0;
  	int i = 0;
  
++<<<<<<< HEAD
 +	while (buf_size < eff_mtu) {
 +		priv->frag_info[i].order = order;
 +		priv->frag_info[i].frag_size =
 +			(eff_mtu > buf_size + frag_sizes[i]) ?
 +				frag_sizes[i] : eff_mtu - buf_size;
 +		priv->frag_info[i].frag_prefix_size = buf_size;
 +		priv->frag_info[i].frag_stride =
 +				ALIGN(priv->frag_info[i].frag_size, align);
 +		priv->frag_info[i].dma_dir = dma_dir;
 +		buf_size += priv->frag_info[i].frag_size;
 +		i++;
++=======
+ 	/* bpf requires buffers to be set up as 1 packet per page.
+ 	 * This only works when num_frags == 1.
+ 	 */
+ 	if (priv->tx_ring_num[TX_XDP]) {
+ 		priv->rx_page_order = 0;
+ 		priv->frag_info[0].frag_size = eff_mtu;
+ 		/* This will gain efficient xdp frame recycling at the
+ 		 * expense of more costly truesize accounting
+ 		 */
+ 		priv->frag_info[0].frag_stride = PAGE_SIZE;
+ 		priv->dma_dir = PCI_DMA_BIDIRECTIONAL;
+ 		priv->rx_headroom = XDP_PACKET_HEADROOM;
+ 		i = 1;
+ 	} else {
+ 		int buf_size = 0;
+ 
+ 		while (buf_size < eff_mtu) {
+ 			int frag_size = eff_mtu - buf_size;
+ 
+ 			if (i < MLX4_EN_MAX_RX_FRAGS - 1)
+ 				frag_size = min(frag_size, 2048);
+ 
+ 			priv->frag_info[i].frag_size = frag_size;
+ 
+ 			priv->frag_info[i].frag_stride = ALIGN(frag_size,
+ 							       SMP_CACHE_BYTES);
+ 			buf_size += frag_size;
+ 			i++;
+ 		}
+ 		priv->rx_page_order = MLX4_EN_ALLOC_PREFER_ORDER;
+ 		priv->dma_dir = PCI_DMA_FROMDEVICE;
+ 		priv->rx_headroom = 0;
++>>>>>>> 60c7f5ae5416 (mlx4: removal of frag_sizes[])
  	}
  
  	priv->num_frags = i;
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_rx.c
diff --git a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
index d8f46d99701e..da82a90bfd4f 100644
--- a/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
+++ b/drivers/net/ethernet/mellanox/mlx4/mlx4_en.h
@@ -105,14 +105,6 @@
 #define MLX4_EN_ALLOC_PREFER_ORDER min_t(int, get_order(32768),		\
 					 PAGE_ALLOC_COSTLY_ORDER)
 
-/* Receive fragment sizes; we use at most 3 fragments (for 9600 byte MTU
- * and 4K allocations) */
-enum {
-	FRAG_SZ0 = 1536 - NET_IP_ALIGN,
-	FRAG_SZ1 = 4096,
-	FRAG_SZ2 = 4096,
-	FRAG_SZ3 = MLX4_EN_ALLOC_SIZE
-};
 #define MLX4_EN_MAX_RX_FRAGS	4
 
 #ifndef CONFIG_GENERIC_HARDIRQS
