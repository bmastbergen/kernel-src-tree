perf test: Add a test case for SDT event

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Masami Hiramatsu <mhiramat@kernel.org>
commit 8e5dc848356ecf6ea8d27d641c4d7ad8d42fe92b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8e5dc848.failed

Add a basic test case for SDT event support.  This test scans an SDT
event in perftools and check whether the SDT event is correctly stored
into the buildid cache.

Here is an example:

  ----
  $ perf test sdt -v
  47: Test SDT event probing                                   :
  --- start ---
  test child forked, pid 20732
  Found 72 SDTs in /home/mhiramat/ksrc/linux/tools/perf/perf
  Writing cache: %sdt_perf:test_target=test_target
  Cache committed: 0
  symbol:test_target file:(null) line:0 offset:0 return:0 lazy:(null)
  test child finished with 0
  ---- end ----
  Test SDT event probing: Ok
  ----

	Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Cc: Ananth N Mavinakayanahalli <ananth@linux.vnet.ibm.com>
	Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
	Cc: Hemant Kumar <hemant@linux.vnet.ibm.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/146831796546.17065.1502584370844087537.stgit@devbox
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 8e5dc848356ecf6ea8d27d641c4d7ad8d42fe92b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/Build
#	tools/perf/tests/builtin-test.c
#	tools/perf/tests/tests.h
diff --cc tools/perf/tests/Build
index c68ddf31ffcf,4158422cc2a6..000000000000
--- a/tools/perf/tests/Build
+++ b/tools/perf/tests/Build
@@@ -36,14 -38,38 +36,18 @@@ perf-y += cpumap.
  perf-y += stat.o
  perf-y += event_update.o
  perf-y += event-times.o
 +perf-y += expr.o
  perf-y += backward-ring-buffer.o
++<<<<<<< HEAD
 +perf-y += is_printable_array.o
 +perf-y += bitmap.o
 +perf-y += perf-hooks.o
 +perf-y += unit_number__scnprintf.o
++=======
+ perf-y += sdt.o
++>>>>>>> 8e5dc848356e (perf test: Add a test case for SDT event)
  
 -$(OUTPUT)tests/llvm-src-base.c: tests/bpf-script-example.c tests/Build
 -	$(call rule_mkdir)
 -	$(Q)echo '#include <tests/llvm.h>' > $@
 -	$(Q)echo 'const char test_llvm__bpf_base_prog[] =' >> $@
 -	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
 -	$(Q)echo ';' >> $@
 -
 -$(OUTPUT)tests/llvm-src-kbuild.c: tests/bpf-script-test-kbuild.c tests/Build
 -	$(call rule_mkdir)
 -	$(Q)echo '#include <tests/llvm.h>' > $@
 -	$(Q)echo 'const char test_llvm__bpf_test_kbuild_prog[] =' >> $@
 -	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
 -	$(Q)echo ';' >> $@
 -
 -$(OUTPUT)tests/llvm-src-prologue.c: tests/bpf-script-test-prologue.c tests/Build
 -	$(call rule_mkdir)
 -	$(Q)echo '#include <tests/llvm.h>' > $@
 -	$(Q)echo 'const char test_llvm__bpf_test_prologue_prog[] =' >> $@
 -	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
 -	$(Q)echo ';' >> $@
 -
 -$(OUTPUT)tests/llvm-src-relocation.c: tests/bpf-script-test-relocation.c tests/Build
 -	$(call rule_mkdir)
 -	$(Q)echo '#include <tests/llvm.h>' > $@
 -	$(Q)echo 'const char test_llvm__bpf_test_relocation[] =' >> $@
 -	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
 -	$(Q)echo ';' >> $@
 -
 -ifeq ($(ARCH),$(filter $(ARCH),x86 arm arm64))
 +ifeq ($(ARCH),$(filter $(ARCH),x86 arm arm64 powerpc))
  perf-$(CONFIG_DWARF_UNWIND) += dwarf-unwind.o
  endif
  
diff --cc tools/perf/tests/builtin-test.c
index 15ee18262e31,4dd2d050788a..000000000000
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@@ -210,20 -218,8 +210,25 @@@ static struct test generic_tests[] = 
  		.func = test__cpu_map_print,
  	},
  	{
++<<<<<<< HEAD
 +		.desc = "is_printable_array",
 +		.func = test__is_printable_array,
 +	},
 +	{
 +		.desc = "Print bitmap",
 +		.func = test__bitmap_print,
 +	},
 +	{
 +		.desc = "perf hooks",
 +		.func = test__perf_hooks,
 +	},
 +	{
 +		.desc = "unit_number__scnprintf",
 +		.func = test__unit_number__scnprint,
++=======
+ 		.desc = "Test SDT event probing",
+ 		.func = test__sdt_event,
++>>>>>>> 8e5dc848356e (perf test: Add a test case for SDT event)
  	},
  	{
  		.func = NULL,
diff --cc tools/perf/tests/tests.h
index 263299486992,a0288f8092b2..000000000000
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@@ -80,12 -88,7 +80,16 @@@ int test__event_update(int subtest)
  int test__event_times(int subtest);
  int test__backward_ring_buffer(int subtest);
  int test__cpu_map_print(int subtest);
++<<<<<<< HEAD
 +int test__is_printable_array(int subtest);
 +int test__bitmap_print(int subtest);
 +int test__perf_hooks(int subtest);
 +int test__unit_number__scnprint(int subtest);
 +
 +bool test__bp_signal_is_supported(void);
++=======
+ int test__sdt_event(int subtest);
++>>>>>>> 8e5dc848356e (perf test: Add a test case for SDT event)
  
  #if defined(__arm__) || defined(__aarch64__)
  #ifdef HAVE_DWARF_UNWIND_SUPPORT
* Unmerged path tools/perf/tests/Build
* Unmerged path tools/perf/tests/builtin-test.c
diff --git a/tools/perf/tests/sdt.c b/tools/perf/tests/sdt.c
new file mode 100644
index 000000000000..f59d210e1baf
--- /dev/null
+++ b/tools/perf/tests/sdt.c
@@ -0,0 +1,115 @@
+#include <stdio.h>
+#include <sys/epoll.h>
+#include <util/util.h>
+#include <util/evlist.h>
+#include <linux/filter.h>
+#include "tests.h"
+#include "debug.h"
+#include "probe-file.h"
+#include "build-id.h"
+
+/* To test SDT event, we need libelf support to scan elf binary */
+#if defined(HAVE_SDT_EVENT) && defined(HAVE_LIBELF_SUPPORT)
+
+#include <sys/sdt.h>
+
+static int target_function(void)
+{
+	DTRACE_PROBE(perf, test_target);
+	return TEST_OK;
+}
+
+/* Copied from builtin-buildid-cache.c */
+static int build_id_cache__add_file(const char *filename)
+{
+	char sbuild_id[SBUILD_ID_SIZE];
+	u8 build_id[BUILD_ID_SIZE];
+	int err;
+
+	err = filename__read_build_id(filename, &build_id, sizeof(build_id));
+	if (err < 0) {
+		pr_debug("Failed to read build id of %s\n", filename);
+		return err;
+	}
+
+	build_id__sprintf(build_id, sizeof(build_id), sbuild_id);
+	err = build_id_cache__add_s(sbuild_id, filename, false, false);
+	if (err < 0)
+		pr_debug("Failed to add build id cache of %s\n", filename);
+	return err;
+}
+
+static char *get_self_path(void)
+{
+	char *buf = calloc(PATH_MAX, sizeof(char));
+
+	if (buf && readlink("/proc/self/exe", buf, PATH_MAX) < 0) {
+		pr_debug("Failed to get correct path of perf\n");
+		free(buf);
+		return NULL;
+	}
+	return buf;
+}
+
+static int search_cached_probe(const char *target,
+			       const char *group, const char *event)
+{
+	struct probe_cache *cache = probe_cache__new(target);
+	int ret = 0;
+
+	if (!cache) {
+		pr_debug("Failed to open probe cache of %s\n", target);
+		return -EINVAL;
+	}
+
+	if (!probe_cache__find_by_name(cache, group, event)) {
+		pr_debug("Failed to find %s:%s in the cache\n", group, event);
+		ret = -ENOENT;
+	}
+	probe_cache__delete(cache);
+
+	return ret;
+}
+
+int test__sdt_event(int subtests __maybe_unused)
+{
+	int ret = TEST_FAIL;
+	char __tempdir[] = "./test-buildid-XXXXXX";
+	char *tempdir = NULL, *myself = get_self_path();
+
+	if (myself == NULL || mkdtemp(__tempdir) == NULL) {
+		pr_debug("Failed to make a tempdir for build-id cache\n");
+		goto error;
+	}
+	/* Note that buildid_dir must be an absolute path */
+	tempdir = realpath(__tempdir, NULL);
+
+	/* At first, scan itself */
+	set_buildid_dir(tempdir);
+	if (build_id_cache__add_file(myself) < 0)
+		goto error_rmdir;
+
+	/* Open a cache and make sure the SDT is stored */
+	if (search_cached_probe(myself, "sdt_perf", "test_target") < 0)
+		goto error_rmdir;
+
+	/* TBD: probing on the SDT event and collect logs */
+
+	/* Call the target and get an event */
+	ret = target_function();
+
+error_rmdir:
+	/* Cleanup temporary buildid dir */
+	rm_rf(tempdir);
+error:
+	free(tempdir);
+	free(myself);
+	return ret;
+}
+#else
+int test__sdt_event(int subtests __maybe_unused)
+{
+	pr_debug("Skip SDT event test because SDT support is not compiled\n");
+	return TEST_SKIP;
+}
+#endif
* Unmerged path tools/perf/tests/tests.h
