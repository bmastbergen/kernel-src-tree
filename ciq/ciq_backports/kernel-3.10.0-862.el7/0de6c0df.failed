tools/power turbostat: use wide columns to display large numbers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [tools] power turbostat: use wide columns to display large numbers (Prarit Bhargava) [1514290]
Rebuild_FUZZ: 95.08%
commit-author Len Brown <len.brown@intel.com>
commit 0de6c0df4ecc32ffaf064fea3a43846ba4474bd0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0de6c0df.failed

When a counter overlfows 7 columns, it shifts the remaining
columns to the right, so they no longer line up under
their column header.

Update turbostat to dectect when it is handling large
numbers, and switch to wider columns where, necessary.

	Reported-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
	Signed-off-by: Len Brown <len.brown@intel.com>
(cherry picked from commit 0de6c0df4ecc32ffaf064fea3a43846ba4474bd0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/power/x86/turbostat/turbostat.c
diff --cc tools/power/x86/turbostat/turbostat.c
index 416137df44fe,cafc6bba6539..000000000000
--- a/tools/power/x86/turbostat/turbostat.c
+++ b/tools/power/x86/turbostat/turbostat.c
@@@ -49,8 -49,11 +49,13 @@@ FILE *outf
  int *fd_percpu;
  struct timespec interval_ts = {5, 0};
  unsigned int debug;
++<<<<<<< HEAD
++=======
+ unsigned int quiet;
+ unsigned int sums_need_wide_columns;
++>>>>>>> 0de6c0df4ecc (tools/power turbostat: use wide columns to display large numbers)
  unsigned int rapl_joules;
  unsigned int summary_only;
 -unsigned int list_header_only;
  unsigned int dump_only;
  unsigned int do_snb_cstates;
  unsigned int do_knl_cstates;
@@@ -464,36 -476,41 +469,53 @@@ void print_header(void
  	struct msr_counter *mp;
  
  	if (DO_BIC(BIC_Package))
 -		outp += sprintf(outp, "%sPackage", delim);
 +		outp += sprintf(outp, "\tPackage");
  	if (DO_BIC(BIC_Core))
 -		outp += sprintf(outp, "%sCore", delim);
 +		outp += sprintf(outp, "\tCore");
  	if (DO_BIC(BIC_CPU))
 -		outp += sprintf(outp, "%sCPU", delim);
 +		outp += sprintf(outp, "\tCPU");
  	if (DO_BIC(BIC_Avg_MHz))
 -		outp += sprintf(outp, "%sAvg_MHz", delim);
 +		outp += sprintf(outp, "\tAvg_MHz");
  	if (DO_BIC(BIC_Busy))
 -		outp += sprintf(outp, "%sBusy%%", delim);
 +		outp += sprintf(outp, "\tBusy%%");
  	if (DO_BIC(BIC_Bzy_MHz))
 -		outp += sprintf(outp, "%sBzy_MHz", delim);
 +		outp += sprintf(outp, "\tBzy_MHz");
  	if (DO_BIC(BIC_TSC_MHz))
 -		outp += sprintf(outp, "%sTSC_MHz", delim);
 +		outp += sprintf(outp, "\tTSC_MHz");
  
++<<<<<<< HEAD
 +	if (DO_BIC(BIC_IRQ))
 +		outp += sprintf(outp, "\tIRQ");
++=======
+ 	if (DO_BIC(BIC_IRQ)) {
+ 		if (sums_need_wide_columns)
+ 			outp += sprintf(outp, "%s     IRQ", delim);
+ 		else
+ 			outp += sprintf(outp, "%sIRQ", delim);
+ 	}
+ 
++>>>>>>> 0de6c0df4ecc (tools/power turbostat: use wide columns to display large numbers)
  	if (DO_BIC(BIC_SMI))
 -		outp += sprintf(outp, "%sSMI", delim);
 +		outp += sprintf(outp, "\tSMI");
 +
 +	if (DO_BIC(BIC_CPU_c1))
 +		outp += sprintf(outp, "\tCPU%%c1");
  
  	for (mp = sys.tp; mp; mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
  			if (mp->width == 64)
 -				outp += sprintf(outp, "%s%18.18s", delim, mp->name);
 +				outp += sprintf(outp, "\t%18.18s", mp->name);
  			else
 -				outp += sprintf(outp, "%s%10.10s", delim, mp->name);
 +				outp += sprintf(outp, "\t%10.10s", mp->name);
  		} else {
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%-7.7s", mp->name);
++=======
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "%s%8s", delim, mp->name);
+ 			else
+ 				outp += sprintf(outp, "%s%s", delim, mp->name);
++>>>>>>> 0de6c0df4ecc (tools/power turbostat: use wide columns to display large numbers)
  		}
  	}
  
@@@ -511,11 -532,14 +533,18 @@@
  	for (mp = sys.cp; mp; mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
  			if (mp->width == 64)
 -				outp += sprintf(outp, "%s%18.18s", delim, mp->name);
 +				outp += sprintf(outp, "\t%18.18s", mp->name);
  			else
 -				outp += sprintf(outp, "%s%10.10s", delim, mp->name);
 +				outp += sprintf(outp, "\t%10.10s", mp->name);
  		} else {
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%-7.7s", mp->name);
++=======
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "%s%8s", delim, mp->name);
+ 			else
+ 				outp += sprintf(outp, "%s%s", delim, mp->name);
++>>>>>>> 0de6c0df4ecc (tools/power turbostat: use wide columns to display large numbers)
  		}
  	}
  
@@@ -580,13 -604,17 +609,20 @@@
  	for (mp = sys.pp; mp; mp = mp->next) {
  		if (mp->format == FORMAT_RAW) {
  			if (mp->width == 64)
 -				outp += sprintf(outp, "%s%18.18s", delim, mp->name);
 +				outp += sprintf(outp, "\t%18.18s", mp->name);
  			else
 -				outp += sprintf(outp, "%s%10.10s", delim, mp->name);
 +				outp += sprintf(outp, "\t%10.10s", mp->name);
  		} else {
++<<<<<<< HEAD
 +			outp += sprintf(outp, "\t%-7.7s", mp->name);
++=======
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "%s%8s", delim, mp->name);
+ 			else
+ 				outp += sprintf(outp, "%s%s", delim, mp->name);
++>>>>>>> 0de6c0df4ecc (tools/power turbostat: use wide columns to display large numbers)
  		}
  	}
 -
  	outp += sprintf(outp, "\n");
  }
  
@@@ -753,9 -789,15 +793,12 @@@ int format_counters(struct thread_data 
  			else
  				outp += sprintf(outp, "\t0x%016llx", t->counter[i]);
  		} else if (mp->format == FORMAT_DELTA) {
- 			outp += sprintf(outp, "\t%lld", t->counter[i]);
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "\t%8lld", t->counter[i]);
+ 			else
+ 				outp += sprintf(outp, "\t%lld", t->counter[i]);
  		} else if (mp->format == FORMAT_PERCENT) {
 -			if (mp->type == COUNTER_USEC)
 -				outp += sprintf(outp, "\t%.2f", t->counter[i]/interval_float/10000);
 -			else
 -				outp += sprintf(outp, "\t%.2f", 100.0 * t->counter[i]/tsc);
 +			outp += sprintf(outp, "\t%.2f", 100.0 * t->counter[i]/t->tsc);
  		}
  	}
  
@@@ -780,9 -831,12 +823,12 @@@
  			else
  				outp += sprintf(outp, "\t0x%016llx", c->counter[i]);
  		} else if (mp->format == FORMAT_DELTA) {
- 			outp += sprintf(outp, "\t%lld", c->counter[i]);
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "\t%8lld", c->counter[i]);
+ 			else
+ 				outp += sprintf(outp, "\t%lld", c->counter[i]);
  		} else if (mp->format == FORMAT_PERCENT) {
 -			outp += sprintf(outp, "\t%.2f", 100.0 * c->counter[i]/tsc);
 +			outp += sprintf(outp, "\t%.2f", 100.0 * c->counter[i]/t->tsc);
  		}
  	}
  
@@@ -868,9 -922,12 +914,12 @@@
  			else
  				outp += sprintf(outp, "\t0x%016llx", p->counter[i]);
  		} else if (mp->format == FORMAT_DELTA) {
- 			outp += sprintf(outp, "\t%lld", p->counter[i]);
+ 			if ((mp->type == COUNTER_ITEMS) && sums_need_wide_columns)
+ 				outp += sprintf(outp, "\t%8lld", p->counter[i]);
+ 			else
+ 				outp += sprintf(outp, "\t%lld", p->counter[i]);
  		} else if (mp->format == FORMAT_PERCENT) {
 -			outp += sprintf(outp, "\t%.2f", 100.0 * p->counter[i]/tsc);
 +			outp += sprintf(outp, "\t%.2f", 100.0 * p->counter[i]/t->tsc);
  		}
  	}
  
@@@ -1266,6 -1330,11 +1318,14 @@@ void compute_average(struct thread_dat
  	for (i = 0, mp = sys.tp; mp; i++, mp = mp->next) {
  		if (mp->format == FORMAT_RAW)
  			continue;
++<<<<<<< HEAD
++=======
+ 		if (mp->type == COUNTER_ITEMS) {
+ 			if (average.threads.counter[i] > 9999999)
+ 				sums_need_wide_columns = 1;
+ 			continue;
+ 		}
++>>>>>>> 0de6c0df4ecc (tools/power turbostat: use wide columns to display large numbers)
  		average.threads.counter[i] /= topo.num_cpus;
  	}
  	for (i = 0, mp = sys.cp; mp; i++, mp = mp->next) {
* Unmerged path tools/power/x86/turbostat/turbostat.c
