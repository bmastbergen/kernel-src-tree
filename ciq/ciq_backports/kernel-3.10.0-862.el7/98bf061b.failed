scsi: smartpqi: cleanup interrupt management

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] smartpqi: cleanup interrupt management (Don Brace) [1457414]
Rebuild_FUZZ: 92.68%
commit-author Kevin Barnett <kevin.barnett@microsemi.com>
commit 98bf061b0b423a2b6f3c31b7e4b48d947352331c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/98bf061b.failed

minor cleanup of interrupt initialization and tear-down.

	Reviewed-by: Scott Benesh <scott.benesh@microsemi.com>
	Reviewed-by: Scott Teel <scott.teel@microsemi.com>
	Signed-off-by: Kevin Barnett <kevin.barnett@microsemi.com>
	Signed-off-by: Don Brace <don.brace@microsemi.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 98bf061b0b423a2b6f3c31b7e4b48d947352331c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/smartpqi/smartpqi_init.c
diff --cc drivers/scsi/smartpqi/smartpqi_init.c
index 16a7ff292377,b5a35055229b..000000000000
--- a/drivers/scsi/smartpqi/smartpqi_init.c
+++ b/drivers/scsi/smartpqi/smartpqi_init.c
@@@ -2933,67 -2918,39 +2933,100 @@@ static void pqi_free_irqs(struct pqi_ct
  	int i;
  
  	for (i = 0; i < ctrl_info->num_msix_vectors_initialized; i++)
++<<<<<<< HEAD
 +		free_irq(ctrl_info->msix_vectors[i],
 +			ctrl_info->intr_data[i]);
++=======
+ 		free_irq(pci_irq_vector(ctrl_info->pci_dev, i),
+ 			&ctrl_info->queue_groups[i]);
+ 
+ 	ctrl_info->num_msix_vectors_initialized = 0;
++>>>>>>> 98bf061b0b42 (scsi: smartpqi: cleanup interrupt management)
  }
  
  static int pqi_enable_msix_interrupts(struct pqi_ctrl_info *ctrl_info)
  {
++<<<<<<< HEAD
 +	unsigned int i;
 +	int max_vectors;
 +	int num_vectors_enabled;
 +	struct msix_entry msix_entries[PQI_MAX_MSIX_VECTORS];
 +
 +	max_vectors = ctrl_info->num_queue_groups;
 +
 +	for (i = 0; i < max_vectors; i++)
 +		msix_entries[i].entry = i;
 +
 +	num_vectors_enabled = pci_enable_msix_range(ctrl_info->pci_dev,
 +		msix_entries, PQI_MIN_MSIX_VECTORS, max_vectors);
 +
++=======
+ 	int num_vectors_enabled;
+ 
+ 	num_vectors_enabled = pci_alloc_irq_vectors(ctrl_info->pci_dev,
+ 			PQI_MIN_MSIX_VECTORS, ctrl_info->num_queue_groups,
+ 			PCI_IRQ_MSIX | PCI_IRQ_AFFINITY);
++>>>>>>> 98bf061b0b42 (scsi: smartpqi: cleanup interrupt management)
  	if (num_vectors_enabled < 0) {
  		dev_err(&ctrl_info->pci_dev->dev,
  			"MSI-X init failed with error %d\n",
  			num_vectors_enabled);
  		return num_vectors_enabled;
++<<<<<<< HEAD
 +	}
 +
 +	ctrl_info->num_msix_vectors_enabled = num_vectors_enabled;
 +	for (i = 0; i < num_vectors_enabled; i++) {
 +		ctrl_info->msix_vectors[i] = msix_entries[i].vector;
 +		ctrl_info->intr_data[i] = &ctrl_info->queue_groups[i];
 +	}
 +
 +	return 0;
 +}
 +
 +static void pqi_irq_set_affinity_hint(struct pqi_ctrl_info *ctrl_info)
 +{
 +	int i;
 +	int rc;
 +	int cpu;
 +
 +	cpu = cpumask_first(cpu_online_mask);
 +	for (i = 0; i < ctrl_info->num_msix_vectors_initialized; i++) {
 +		rc = irq_set_affinity_hint(ctrl_info->msix_vectors[i],
 +			get_cpu_mask(cpu));
 +		if (rc)
 +			dev_err(&ctrl_info->pci_dev->dev,
 +				"error %d setting affinity hint for irq vector %u\n",
 +				rc, ctrl_info->msix_vectors[i]);
 +		cpu = cpumask_next(cpu, cpu_online_mask);
 +	}
 +}
 +
 +static void pqi_irq_unset_affinity_hint(struct pqi_ctrl_info *ctrl_info)
 +{
 +	int i;
 +
 +	for (i = 0; i < ctrl_info->num_msix_vectors_initialized; i++)
 +		irq_set_affinity_hint(ctrl_info->msix_vectors[i], NULL);
 +}
 +
++=======
+ 	}
+ 
+ 	ctrl_info->num_msix_vectors_enabled = num_vectors_enabled;
+ 
+ 	return 0;
+ }
+ 
+ static void pqi_disable_msix_interrupts(struct pqi_ctrl_info *ctrl_info)
+ {
+ 	if (ctrl_info->num_msix_vectors_enabled) {
+ 		pci_free_irq_vectors(ctrl_info->pci_dev);
+ 		ctrl_info->num_msix_vectors_enabled = 0;
+ 	}
+ }
+ 
++>>>>>>> 98bf061b0b42 (scsi: smartpqi: cleanup interrupt management)
  static int pqi_alloc_operational_queues(struct pqi_ctrl_info *ctrl_info)
  {
  	unsigned int i;
@@@ -5606,10 -5540,8 +5639,15 @@@ static inline void pqi_free_ctrl_info(s
  
  static void pqi_free_interrupts(struct pqi_ctrl_info *ctrl_info)
  {
++<<<<<<< HEAD
 +	pqi_irq_unset_affinity_hint(ctrl_info);
 +	pqi_free_irqs(ctrl_info);
 +	if (ctrl_info->num_msix_vectors_enabled)
 +		pci_disable_msix(ctrl_info->pci_dev);
++=======
+ 	pqi_free_irqs(ctrl_info);
+ 	pqi_disable_msix_interrupts(ctrl_info);
++>>>>>>> 98bf061b0b42 (scsi: smartpqi: cleanup interrupt management)
  }
  
  static void pqi_free_ctrl_resources(struct pqi_ctrl_info *ctrl_info)
* Unmerged path drivers/scsi/smartpqi/smartpqi_init.c
