perf tools: Fix build with ARCH=x86_64

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jiada Wang <jiada_wang@mentor.com>
commit 7a759cd8e8272ee18922838ee711219c7c796a31
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7a759cd8.failed

With commit: 0a943cb10ce78 (tools build: Add HOSTARCH Makefile variable)
when building for ARCH=x86_64, ARCH=x86_64 is passed to perf instead of
ARCH=x86, so the perf build process searchs header files from
tools/arch/x86_64/include, which doesn't exist.

The following build failure is seen:

  In file included from util/event.c:2:0:
    tools/include/uapi/linux/mman.h:4:27: fatal error: uapi/asm/mman.h: No such file or directory
    compilation terminated.

Fix this issue by using SRCARCH instead of ARCH in perf, just like the
main kernel Makefile and tools/objtool's.

	Signed-off-by: Jiada Wang <jiada_wang@mentor.com>
	Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Eugeniu Rosca <erosca@de.adit-jv.com>
	Cc: Jan Stancek <jstancek@redhat.com>
	Cc: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi Bangoria <ravi.bangoria@linux.vnet.ibm.com>
	Cc: Rui Teng <rui.teng@linux.vnet.ibm.com>
	Cc: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
	Cc: Wang Nan <wangnan0@huawei.com>
Fixes: 0a943cb10ce7 ("tools build: Add HOSTARCH Makefile variable")
Link: http://lkml.kernel.org/r/1491793357-14977-2-git-send-email-jiada_wang@mentor.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7a759cd8e8272ee18922838ee711219c7c796a31)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Makefile.config
#	tools/perf/tests/Build
diff --cc tools/perf/Makefile.config
index 3063e69cf632,1f4fbc9a3292..000000000000
--- a/tools/perf/Makefile.config
+++ b/tools/perf/Makefile.config
@@@ -61,7 -61,7 +61,11 @@@ endi
  # Disable it on all other architectures in case libdw unwind
  # support is detected in system. Add supported architectures
  # to the check.
++<<<<<<< HEAD
 +ifneq ($(ARCH),$(filter $(ARCH),x86 arm powerpc))
++=======
+ ifneq ($(SRCARCH),$(filter $(SRCARCH),x86 arm))
++>>>>>>> 7a759cd8e827 (perf tools: Fix build with ARCH=x86_64)
    NO_LIBDW_DWARF_UNWIND := 1
  endif
  
@@@ -115,8 -115,9 +119,12 @@@ endi
  FEATURE_CHECK_CFLAGS-libbabeltrace := $(LIBBABELTRACE_CFLAGS)
  FEATURE_CHECK_LDFLAGS-libbabeltrace := $(LIBBABELTRACE_LDFLAGS) -lbabeltrace-ctf
  
++<<<<<<< HEAD
++=======
+ FEATURE_CHECK_CFLAGS-bpf = -I. -I$(srctree)/tools/include -I$(srctree)/tools/arch/$(SRCARCH)/include/uapi -I$(srctree)/tools/include/uapi
++>>>>>>> 7a759cd8e827 (perf tools: Fix build with ARCH=x86_64)
  # include ARCH specific config
- -include $(src-perf)/arch/$(ARCH)/Makefile
+ -include $(src-perf)/arch/$(SRCARCH)/Makefile
  
  ifdef PERF_HAVE_ARCH_REGS_QUERY_REGISTER_OFFSET
    CFLAGS += -DHAVE_ARCH_REGS_QUERY_REGISTER_OFFSET
@@@ -226,13 -227,13 +234,23 @@@ ifeq ($(DEBUG),0
    endif
  endif
  
++<<<<<<< HEAD
 +CFLAGS += -I$(src-perf)/util/include
 +CFLAGS += -I$(src-perf)/arch/$(ARCH)/include
 +CFLAGS += -I$(srctree)/tools/include/uapi
 +CFLAGS += -I$(srctree)/tools/include/
 +CFLAGS += -I$(srctree)/tools/arch/$(ARCH)/include/uapi
 +CFLAGS += -I$(srctree)/tools/arch/$(ARCH)/include/
 +CFLAGS += -I$(srctree)/tools/arch/$(ARCH)/
++=======
+ INC_FLAGS += -I$(src-perf)/util/include
+ INC_FLAGS += -I$(src-perf)/arch/$(SRCARCH)/include
+ INC_FLAGS += -I$(srctree)/tools/include/uapi
+ INC_FLAGS += -I$(srctree)/tools/include/
+ INC_FLAGS += -I$(srctree)/tools/arch/$(SRCARCH)/include/uapi
+ INC_FLAGS += -I$(srctree)/tools/arch/$(SRCARCH)/include/
+ INC_FLAGS += -I$(srctree)/tools/arch/$(SRCARCH)/
++>>>>>>> 7a759cd8e827 (perf tools: Fix build with ARCH=x86_64)
  
  # $(obj-perf)      for generated common-cmds.h
  # $(obj-perf)/util for generated bison/flex headers
@@@ -356,6 -368,25 +374,28 @@@ ifndef NO_LIBEL
        $(call detected,CONFIG_DWARF)
      endif # PERF_HAVE_DWARF_REGS
    endif # NO_DWARF
++<<<<<<< HEAD
++=======
+ 
+   ifndef NO_LIBBPF
+     ifeq ($(feature-bpf), 1)
+       CFLAGS += -DHAVE_LIBBPF_SUPPORT
+       $(call detected,CONFIG_LIBBPF)
+     endif
+ 
+     ifndef NO_DWARF
+       ifdef PERF_HAVE_ARCH_REGS_QUERY_REGISTER_OFFSET
+         CFLAGS += -DHAVE_BPF_PROLOGUE
+         $(call detected,CONFIG_BPF_PROLOGUE)
+       else
+         msg := $(warning BPF prologue is not supported by architecture $(SRCARCH), missing regs_query_register_offset());
+       endif
+     else
+       msg := $(warning DWARF support is off, BPF prologue is disabled);
+     endif
+ 
+   endif # NO_LIBBPF
++>>>>>>> 7a759cd8e827 (perf tools: Fix build with ARCH=x86_64)
  endif # NO_LIBELF
  
  ifndef NO_SDT
diff --cc tools/perf/tests/Build
index c68ddf31ffcf,84222bdb8689..000000000000
--- a/tools/perf/tests/Build
+++ b/tools/perf/tests/Build
@@@ -41,9 -43,39 +41,41 @@@ perf-y += backward-ring-buffer.
  perf-y += is_printable_array.o
  perf-y += bitmap.o
  perf-y += perf-hooks.o
 -perf-y += clang.o
  perf-y += unit_number__scnprintf.o
  
++<<<<<<< HEAD
 +ifeq ($(ARCH),$(filter $(ARCH),x86 arm arm64 powerpc))
++=======
+ $(OUTPUT)tests/llvm-src-base.c: tests/bpf-script-example.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_base_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-kbuild.c: tests/bpf-script-test-kbuild.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_kbuild_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-prologue.c: tests/bpf-script-test-prologue.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_prologue_prog[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ $(OUTPUT)tests/llvm-src-relocation.c: tests/bpf-script-test-relocation.c tests/Build
+ 	$(call rule_mkdir)
+ 	$(Q)echo '#include <tests/llvm.h>' > $@
+ 	$(Q)echo 'const char test_llvm__bpf_test_relocation[] =' >> $@
+ 	$(Q)sed -e 's/"/\\"/g' -e 's/\(.*\)/"\1\\n"/g' $< >> $@
+ 	$(Q)echo ';' >> $@
+ 
+ ifeq ($(SRCARCH),$(filter $(SRCARCH),x86 arm arm64 powerpc))
++>>>>>>> 7a759cd8e827 (perf tools: Fix build with ARCH=x86_64)
  perf-$(CONFIG_DWARF_UNWIND) += dwarf-unwind.o
  endif
  
* Unmerged path tools/perf/Makefile.config
diff --git a/tools/perf/Makefile.perf b/tools/perf/Makefile.perf
index 64b6e480c2bf..d908a5858e2d 100644
--- a/tools/perf/Makefile.perf
+++ b/tools/perf/Makefile.perf
@@ -223,7 +223,7 @@ endif
 
 ifeq ($(config),0)
 include $(srctree)/tools/scripts/Makefile.arch
--include arch/$(ARCH)/Makefile
+-include arch/$(SRCARCH)/Makefile
 endif
 
 # The FEATURE_DUMP_EXPORT holds location of the actual
diff --git a/tools/perf/arch/Build b/tools/perf/arch/Build
index 109eb75cf7de..d9b6af837c7d 100644
--- a/tools/perf/arch/Build
+++ b/tools/perf/arch/Build
@@ -1,2 +1,2 @@
 libperf-y += common.o
-libperf-y += $(ARCH)/
+libperf-y += $(SRCARCH)/
diff --git a/tools/perf/pmu-events/Build b/tools/perf/pmu-events/Build
index 9213a1273697..999a4e878162 100644
--- a/tools/perf/pmu-events/Build
+++ b/tools/perf/pmu-events/Build
@@ -2,7 +2,7 @@ hostprogs := jevents
 
 jevents-y	+= json.o jsmn.o jevents.o
 pmu-events-y	+= pmu-events.o
-JDIR		=  pmu-events/arch/$(ARCH)
+JDIR		=  pmu-events/arch/$(SRCARCH)
 JSON		=  $(shell [ -d $(JDIR) ] &&				\
 			find $(JDIR) -name '*.json' -o -name 'mapfile.csv')
 #
@@ -10,4 +10,4 @@ JSON		=  $(shell [ -d $(JDIR) ] &&				\
 # directory and create tables in pmu-events.c.
 #
 $(OUTPUT)pmu-events/pmu-events.c: $(JSON) $(JEVENTS)
-	$(Q)$(call echo-cmd,gen)$(JEVENTS) $(ARCH) pmu-events/arch $(OUTPUT)pmu-events/pmu-events.c $(V)
+	$(Q)$(call echo-cmd,gen)$(JEVENTS) $(SRCARCH) pmu-events/arch $(OUTPUT)pmu-events/pmu-events.c $(V)
* Unmerged path tools/perf/tests/Build
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index 4a4de3c4b5fa..d1c29e1ffc0b 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -833,7 +833,7 @@ static int write_group_desc(int fd, struct perf_header *h __maybe_unused,
 
 /*
  * default get_cpuid(): nothing gets recorded
- * actual implementation must be in arch/$(ARCH)/util/header.c
+ * actual implementation must be in arch/$(SRCARCH)/util/header.c
  */
 int __weak get_cpuid(char *buffer __maybe_unused, size_t sz __maybe_unused)
 {
