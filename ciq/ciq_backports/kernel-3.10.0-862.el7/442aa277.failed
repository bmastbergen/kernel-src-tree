drm/i915/cnl: Change the macro name to DPLL_CFGCR0_DCO_FRACTION_SHIFT

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Manasi Navare <manasi.d.navare@intel.com>
commit 442aa277c066cec6cfe8508b3edbdda022b10568
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/442aa277.failed

No functional changes. Only change the macro from
"DPLL_CFGCR0_DC0_FRAC_SHIFT to DPLL_CFGCR0_DCO_FRACTION_SHIFT
to be consistent with DPLL_CFGCR0_DCO_FRACTION_MASK
and DPLL_CFGCR0_DCO_FRACTION

	Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
	Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/1505413899-30876-1-git-send-email-manasi.d.navare@intel.com
(cherry picked from commit 442aa277c066cec6cfe8508b3edbdda022b10568)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/i915_reg.h
#	drivers/gpu/drm/i915/intel_ddi.c
diff --cc drivers/gpu/drm/i915/i915_reg.h
index c70c07a7b586,94b40a469afd..000000000000
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@@ -7650,6 -8567,63 +7650,66 @@@ enum 
  #define DPLL_CFGCR1(id)	_MMIO_PIPE((id) - SKL_DPLL1, _DPLL1_CFGCR1, _DPLL2_CFGCR1)
  #define DPLL_CFGCR2(id)	_MMIO_PIPE((id) - SKL_DPLL1, _DPLL1_CFGCR2, _DPLL2_CFGCR2)
  
++<<<<<<< HEAD
++=======
+ /*
+  * CNL Clocks
+  */
+ #define DPCLKA_CFGCR0				_MMIO(0x6C200)
+ #define  DPCLKA_CFGCR0_DDI_CLK_OFF(port)	(1 << ((port)+10))
+ #define  DPCLKA_CFGCR0_DDI_CLK_SEL_MASK(port)	(3 << ((port)*2))
+ #define  DPCLKA_CFGCR0_DDI_CLK_SEL_SHIFT(port)	((port)*2)
+ #define  DPCLKA_CFGCR0_DDI_CLK_SEL(pll, port)	((pll) << ((port)*2))
+ 
+ /* CNL PLL */
+ #define DPLL0_ENABLE		0x46010
+ #define DPLL1_ENABLE		0x46014
+ #define  PLL_ENABLE		(1 << 31)
+ #define  PLL_LOCK		(1 << 30)
+ #define  PLL_POWER_ENABLE	(1 << 27)
+ #define  PLL_POWER_STATE	(1 << 26)
+ #define CNL_DPLL_ENABLE(pll)	_MMIO_PLL(pll, DPLL0_ENABLE, DPLL1_ENABLE)
+ 
+ #define _CNL_DPLL0_CFGCR0		0x6C000
+ #define _CNL_DPLL1_CFGCR0		0x6C080
+ #define  DPLL_CFGCR0_HDMI_MODE		(1 << 30)
+ #define  DPLL_CFGCR0_SSC_ENABLE		(1 << 29)
+ #define  DPLL_CFGCR0_LINK_RATE_MASK	(0xf << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_2700	(0 << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_1350	(1 << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_810	(2 << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_1620	(3 << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_1080	(4 << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_2160	(5 << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_3240	(6 << 25)
+ #define  DPLL_CFGCR0_LINK_RATE_4050	(7 << 25)
+ #define  DPLL_CFGCR0_DCO_FRACTION_MASK	(0x7fff << 10)
+ #define  DPLL_CFGCR0_DCO_FRACTION_SHIFT	(10)
+ #define  DPLL_CFGCR0_DCO_FRACTION(x)	((x) << 10)
+ #define  DPLL_CFGCR0_DCO_INTEGER_MASK	(0x3ff)
+ #define CNL_DPLL_CFGCR0(pll)		_MMIO_PLL(pll, _CNL_DPLL0_CFGCR0, _CNL_DPLL1_CFGCR0)
+ 
+ #define _CNL_DPLL0_CFGCR1		0x6C004
+ #define _CNL_DPLL1_CFGCR1		0x6C084
+ #define  DPLL_CFGCR1_QDIV_RATIO_MASK	(0xff << 10)
+ #define  DPLL_CFGCR1_QDIV_RATIO_SHIFT	(10)
+ #define  DPLL_CFGCR1_QDIV_RATIO(x)	((x) << 10)
+ #define  DPLL_CFGCR1_QDIV_MODE(x)	((x) << 9)
+ #define  DPLL_CFGCR1_KDIV_MASK		(7 << 6)
+ #define  DPLL_CFGCR1_KDIV(x)		((x) << 6)
+ #define  DPLL_CFGCR1_KDIV_1		(1 << 6)
+ #define  DPLL_CFGCR1_KDIV_2		(2 << 6)
+ #define  DPLL_CFGCR1_KDIV_4		(4 << 6)
+ #define  DPLL_CFGCR1_PDIV_MASK		(0xf << 2)
+ #define  DPLL_CFGCR1_PDIV(x)		((x) << 2)
+ #define  DPLL_CFGCR1_PDIV_2		(1 << 2)
+ #define  DPLL_CFGCR1_PDIV_3		(2 << 2)
+ #define  DPLL_CFGCR1_PDIV_5		(4 << 2)
+ #define  DPLL_CFGCR1_PDIV_7		(8 << 2)
+ #define  DPLL_CFGCR1_CENTRAL_FREQ	(3 << 0)
+ #define CNL_DPLL_CFGCR1(pll)		_MMIO_PLL(pll, _CNL_DPLL0_CFGCR1, _CNL_DPLL1_CFGCR1)
+ 
++>>>>>>> 442aa277c066 (drm/i915/cnl: Change the macro name to DPLL_CFGCR0_DCO_FRACTION_SHIFT)
  /* BXT display engine PLL */
  #define BXT_DE_PLL_CTL			_MMIO(0x6d000)
  #define   BXT_DE_PLL_RATIO(x)		(x)	/* {60,65,100} * 19.2MHz */
diff --cc drivers/gpu/drm/i915/intel_ddi.c
index d42007e133bd,31d14587ad86..000000000000
--- a/drivers/gpu/drm/i915/intel_ddi.c
+++ b/drivers/gpu/drm/i915/intel_ddi.c
@@@ -929,6 -1161,62 +929,65 @@@ static int skl_calc_wrpll_link(struct d
  	return dco_freq / (p0 * p1 * p2 * 5);
  }
  
++<<<<<<< HEAD
++=======
+ static int cnl_calc_wrpll_link(struct drm_i915_private *dev_priv,
+ 			       uint32_t pll_id)
+ {
+ 	uint32_t cfgcr0, cfgcr1;
+ 	uint32_t p0, p1, p2, dco_freq, ref_clock;
+ 
+ 	cfgcr0 = I915_READ(CNL_DPLL_CFGCR0(pll_id));
+ 	cfgcr1 = I915_READ(CNL_DPLL_CFGCR1(pll_id));
+ 
+ 	p0 = cfgcr1 & DPLL_CFGCR1_PDIV_MASK;
+ 	p2 = cfgcr1 & DPLL_CFGCR1_KDIV_MASK;
+ 
+ 	if (cfgcr1 & DPLL_CFGCR1_QDIV_MODE(1))
+ 		p1 = (cfgcr1 & DPLL_CFGCR1_QDIV_RATIO_MASK) >>
+ 			DPLL_CFGCR1_QDIV_RATIO_SHIFT;
+ 	else
+ 		p1 = 1;
+ 
+ 
+ 	switch (p0) {
+ 	case DPLL_CFGCR1_PDIV_2:
+ 		p0 = 2;
+ 		break;
+ 	case DPLL_CFGCR1_PDIV_3:
+ 		p0 = 3;
+ 		break;
+ 	case DPLL_CFGCR1_PDIV_5:
+ 		p0 = 5;
+ 		break;
+ 	case DPLL_CFGCR1_PDIV_7:
+ 		p0 = 7;
+ 		break;
+ 	}
+ 
+ 	switch (p2) {
+ 	case DPLL_CFGCR1_KDIV_1:
+ 		p2 = 1;
+ 		break;
+ 	case DPLL_CFGCR1_KDIV_2:
+ 		p2 = 2;
+ 		break;
+ 	case DPLL_CFGCR1_KDIV_4:
+ 		p2 = 4;
+ 		break;
+ 	}
+ 
+ 	ref_clock = dev_priv->cdclk.hw.ref;
+ 
+ 	dco_freq = (cfgcr0 & DPLL_CFGCR0_DCO_INTEGER_MASK) * ref_clock;
+ 
+ 	dco_freq += (((cfgcr0 & DPLL_CFGCR0_DCO_FRACTION_MASK) >>
+ 		      DPLL_CFGCR0_DCO_FRACTION_SHIFT) * ref_clock) / 0x8000;
+ 
+ 	return dco_freq / (p0 * p1 * p2 * 5);
+ }
+ 
++>>>>>>> 442aa277c066 (drm/i915/cnl: Change the macro name to DPLL_CFGCR0_DCO_FRACTION_SHIFT)
  static void ddi_dotclock_get(struct intel_crtc_state *pipe_config)
  {
  	int dotclock;
* Unmerged path drivers/gpu/drm/i915/i915_reg.h
* Unmerged path drivers/gpu/drm/i915/intel_ddi.c
