nvme: get list of namespace descriptors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] get list of namespace descriptors (David Milburn) [1451199]
Rebuild_FUZZ: 91.67%
commit-author Johannes Thumshirn <jthumshirn@suse.de>
commit 3b22ba2682b43296b55f5b4e8c2e91b7248db02b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/3b22ba26.failed

If a target identifies itself as NVMe 1.3 compliant, try to get the
list of Namespace Identification Descriptors and populate the UUID,
NGUID and EUI64 fileds in the NVMe namespace structure with these
values.

	Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 3b22ba2682b43296b55f5b4e8c2e91b7248db02b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
#	drivers/nvme/host/nvme.h
diff --cc drivers/nvme/host/core.c
index b83a9ba5ece8,17118ef63c59..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -888,15 -1080,25 +959,27 @@@ static int nvme_revalidate_disk(struct 
  	}
  
  	if (ns->ctrl->vs >= NVME_VS(1, 1, 0))
 -		memcpy(ns->eui, (*id)->eui64, sizeof(ns->eui));
 +		memcpy(ns->eui, id->eui64, sizeof(ns->eui));
  	if (ns->ctrl->vs >= NVME_VS(1, 2, 0))
++<<<<<<< HEAD
 +		memcpy(ns->uuid, id->nguid, sizeof(ns->uuid));
++=======
+ 		memcpy(ns->nguid, (*id)->nguid, sizeof(ns->nguid));
+ 	if (ns->ctrl->vs >= NVME_VS(1, 3, 0)) {
+ 		 /* Don't treat error as fatal we potentially
+ 		  * already have a NGUID or EUI-64
+ 		  */
+ 		if (nvme_identify_ns_descs(ns, ns->ns_id))
+ 			dev_warn(ns->ctrl->device,
+ 				 "%s: Identify Descriptors failed\n", __func__);
+ 	}
++>>>>>>> 3b22ba2682b4 (nvme: get list of namespace descriptors)
  
 -	return 0;
 -}
 -
 -static void __nvme_revalidate_disk(struct gendisk *disk, struct nvme_id_ns *id)
 -{
 -	struct nvme_ns *ns = disk->private_data;
 -	u16 bs;
 +	old_ms = ns->ms;
 +	lbaf = id->flbas & NVME_NS_FLBAS_LBA_MASK;
 +	ns->lba_shift = id->lbaf[lbaf].ds;
 +	ns->ms = le16_to_cpu(id->lbaf[lbaf].ms);
 +	ns->ext = ns->ms && (id->flbas & NVME_NS_FLBAS_META_EXT);
  
  	/*
  	 * If identify namespace failed, use default 512 byte block size so
diff --cc drivers/nvme/host/nvme.h
index edb3488b21b7,f88c6ce5e742..000000000000
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@@ -167,7 -195,8 +167,12 @@@ struct nvme_ns 
  	int instance;
  
  	u8 eui[8];
++<<<<<<< HEAD
 +	u8 uuid[16];
++=======
+ 	u8 nguid[16];
+ 	uuid_t uuid;
++>>>>>>> 3b22ba2682b4 (nvme: get list of namespace descriptors)
  
  	unsigned ns_id;
  	int lba_shift;
* Unmerged path drivers/nvme/host/core.c
* Unmerged path drivers/nvme/host/nvme.h
