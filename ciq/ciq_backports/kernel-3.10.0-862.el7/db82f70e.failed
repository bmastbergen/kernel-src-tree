qed: Add support for PTP resource locking.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] qed: Add support for PTP resource locking (Don Dutile) [1462433 1499362]
Rebuild_FUZZ: 98.80%
commit-author sudarsana.kalluru@cavium.com <sudarsana.kalluru@cavium.com>
commit db82f70e4c3e0901ba1e5c0eecbd913133261985
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/db82f70e.failed

The patch adds support for per-port resource lock in favour of PTP.
PTP module acquires/releases the MFW resource lock while enabling/
disabling the PTP on the interface. The PF instance which has the
ownership of this resource lock will get the exclusive access to the
PTP clock functionality on the port.

	Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
	Signed-off-by: Yuval Mintz <Yuval.Mintz@cavium.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit db82f70e4c3e0901ba1e5c0eecbd913133261985)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qed/qed_mcp.h
#	drivers/net/ethernet/qlogic/qed/qed_ptp.c
diff --cc drivers/net/ethernet/qlogic/qed/qed_mcp.h
index 18c783a25451,5ae35d6cc7d1..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_mcp.h
+++ b/drivers/net/ethernet/qlogic/qed/qed_mcp.h
@@@ -709,10 -753,12 +709,11 @@@ int qed_mcp_mask_parities(struct qed_hw
   *
   * @return int - 0 - operation was successful.
   */
 -int
 -qed_mcp_set_resc_max_val(struct qed_hwfn *p_hwfn,
 -			 struct qed_ptt *p_ptt,
 -			 enum qed_resources res_id,
 -			 u32 resc_max_val, u32 *p_mcp_resp);
 +int qed_mcp_ov_update_eswitch(struct qed_hwfn *p_hwfn,
 +			      struct qed_ptt *p_ptt,
 +			      enum qed_ov_eswitch eswitch);
  
++<<<<<<< HEAD
  /**
   * @brief - Gets the MFW allocation info for the given resource
   *
@@@ -724,10 -786,22 +725,24 @@@
   *
   * @return int - 0 - operation was successful.
   */
 -int qed_mcp_ov_update_eswitch(struct qed_hwfn *p_hwfn,
 -			      struct qed_ptt *p_ptt,
 -			      enum qed_ov_eswitch eswitch);
 -
 +int qed_mcp_get_resc_info(struct qed_hwfn *p_hwfn,
 +			  struct qed_ptt *p_ptt,
 +			  struct resource_info *p_resc_info,
 +			  u32 *p_mcp_resp, u32 *p_mcp_param);
++=======
+ #define QED_MCP_RESC_LOCK_MIN_VAL       RESOURCE_DUMP
+ #define QED_MCP_RESC_LOCK_MAX_VAL       31
+ 
+ enum qed_resc_lock {
+ 	QED_RESC_LOCK_DBG_DUMP = QED_MCP_RESC_LOCK_MIN_VAL,
+ 	QED_RESC_LOCK_PTP_PORT0,
+ 	QED_RESC_LOCK_PTP_PORT1,
+ 	QED_RESC_LOCK_PTP_PORT2,
+ 	QED_RESC_LOCK_PTP_PORT3,
+ 	QED_RESC_LOCK_RESC_ALLOC = QED_MCP_RESC_LOCK_MAX_VAL,
+ 	QED_RESC_LOCK_RESC_INVALID
+ };
++>>>>>>> db82f70e4c3e (qed: Add support for PTP resource locking.)
  
  /**
   * @brief - Initiates PF FLR
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_ptp.c
diff --git a/drivers/net/ethernet/qlogic/qed/qed.h b/drivers/net/ethernet/qlogic/qed/qed.h
index d52c188a91a3..58023993fe5e 100644
--- a/drivers/net/ethernet/qlogic/qed/qed.h
+++ b/drivers/net/ethernet/qlogic/qed/qed.h
@@ -733,6 +733,7 @@ void qed_configure_vp_wfq_on_link_change(struct qed_dev *cdev,
 
 void qed_clean_wfq_db(struct qed_hwfn *p_hwfn, struct qed_ptt *p_ptt);
 int qed_device_num_engines(struct qed_dev *cdev);
+int qed_device_get_port_id(struct qed_dev *cdev);
 
 #define QED_LEADING_HWFN(dev)   (&dev->hwfns[0])
 
diff --git a/drivers/net/ethernet/qlogic/qed/qed_dev.c b/drivers/net/ethernet/qlogic/qed/qed_dev.c
index c54b5c213337..4aa93fba3d33 100644
--- a/drivers/net/ethernet/qlogic/qed/qed_dev.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_dev.c
@@ -3979,3 +3979,17 @@ int qed_device_num_engines(struct qed_dev *cdev)
 {
 	return QED_IS_BB(cdev) ? 2 : 1;
 }
+
+static int qed_device_num_ports(struct qed_dev *cdev)
+{
+	/* in CMT always only one port */
+	if (cdev->num_hwfns > 1)
+		return 1;
+
+	return cdev->num_ports_in_engines * qed_device_num_engines(cdev);
+}
+
+int qed_device_get_port_id(struct qed_dev *cdev)
+{
+	return (QED_LEADING_HWFN(cdev)->abs_pf_id) % qed_device_num_ports(cdev);
+}
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_mcp.h
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_ptp.c
