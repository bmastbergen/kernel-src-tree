net/mlx5e: Remove unnecessary wqe_sz field from RQ buffer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Remove unnecessary wqe_sz field from RQ buffer (Kamal Heib) [1456694]
Rebuild_FUZZ: 96.36%
commit-author Tariq Toukan <tariqt@mellanox.com>
commit b681c481f11bd2839d759f493b00008a6c690e61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b681c481.failed

Field is used only locally within the RQ create function.
The use of a local variable is sufficient.

	Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit b681c481f11bd2839d759f493b00008a6c690e61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index 819a88f4cbad,ce8b4f648757..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -359,10 -538,12 +359,14 @@@ struct mlx5e_rq 
  		} mpwqe;
  	};
  	struct {
++<<<<<<< HEAD
++=======
+ 		u16            headroom;
++>>>>>>> b681c481f11b (net/mlx5e: Remove unnecessary wqe_sz field from RQ buffer)
  		u8             page_order;
 -		u8             map_dir;   /* dma map direction */
 +		u32            wqe_sz;    /* wqe data buffer size */
  	} buff;
 +	__be32                 mkey_be;
  
  	struct device         *pdev;
  	struct net_device     *netdev;
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 582cfccdbde3,591e0dca9671..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -582,13 -601,26 +582,20 @@@ static int mlx5e_create_rq(struct mlx5e
  		rq->alloc_wqe = mlx5e_alloc_rx_mpwqe;
  		rq->dealloc_wqe = mlx5e_dealloc_rx_mpwqe;
  
 -		rq->handle_rx_cqe = c->priv->profile->rx_handlers.handle_rx_cqe_mpwqe;
 -#ifdef CONFIG_MLX5_EN_IPSEC
 -		if (MLX5_IPSEC_DEV(mdev)) {
 -			err = -EINVAL;
 -			netdev_err(c->netdev, "MPWQE RQ with IPSec offload not supported\n");
 -			goto err_rq_wq_destroy;
 -		}
 -#endif
 -		if (!rq->handle_rx_cqe) {
 -			err = -EINVAL;
 -			netdev_err(c->netdev, "RX handler of MPWQE RQ is not set, err %d\n", err);
 -			goto err_rq_wq_destroy;
 -		}
 +		rq->mpwqe_stride_sz = BIT(priv->params.mpwqe_log_stride_sz);
 +		rq->mpwqe_num_strides = BIT(priv->params.mpwqe_log_num_strides);
  
++<<<<<<< HEAD
 +		rq->buff.wqe_sz = rq->mpwqe_stride_sz * rq->mpwqe_num_strides;
 +		byte_count = rq->buff.wqe_sz;
++=======
+ 		rq->mpwqe.log_stride_sz = params->mpwqe_log_stride_sz;
+ 		rq->mpwqe.num_strides = BIT(params->mpwqe_log_num_strides);
+ 
+ 		byte_count = rq->mpwqe.num_strides << rq->mpwqe.log_stride_sz;
++>>>>>>> b681c481f11b (net/mlx5e: Remove unnecessary wqe_sz field from RQ buffer)
  
 -		err = mlx5e_create_rq_umr_mkey(mdev, rq);
 +		err = mlx5e_create_rq_umr_mkey(rq);
  		if (err)
  			goto err_rq_wq_destroy;
  		rq->mkey_be = cpu_to_be32(rq->umr_mkey.key);
@@@ -613,18 -640,31 +620,42 @@@
  		rq->alloc_wqe = mlx5e_alloc_rx_wqe;
  		rq->dealloc_wqe = mlx5e_dealloc_rx_wqe;
  
++<<<<<<< HEAD
 +		rq->buff.wqe_sz = (priv->params.lro_en) ?
 +				priv->params.lro_wqe_sz :
 +				MLX5E_SW2HW_MTU(priv->netdev->mtu);
 +		byte_count = rq->buff.wqe_sz;
++=======
+ #ifdef CONFIG_MLX5_EN_IPSEC
+ 		if (c->priv->ipsec)
+ 			rq->handle_rx_cqe = mlx5e_ipsec_handle_rx_cqe;
+ 		else
+ #endif
+ 			rq->handle_rx_cqe = c->priv->profile->rx_handlers.handle_rx_cqe;
+ 		if (!rq->handle_rx_cqe) {
+ 			kfree(rq->wqe.frag_info);
+ 			err = -EINVAL;
+ 			netdev_err(c->netdev, "RX handler of RQ is not set, err %d\n", err);
+ 			goto err_rq_wq_destroy;
+ 		}
+ 
+ 		byte_count = params->lro_en  ?
+ 				params->lro_wqe_sz :
+ 				MLX5E_SW2HW_MTU(c->priv, c->netdev->mtu);
+ #ifdef CONFIG_MLX5_EN_IPSEC
+ 		if (MLX5_IPSEC_DEV(mdev))
+ 			byte_count += MLX5E_METADATA_ETHER_LEN;
+ #endif
+ 		rq->wqe.page_reuse = !params->xdp_prog && !params->lro_en;
++>>>>>>> b681c481f11b (net/mlx5e: Remove unnecessary wqe_sz field from RQ buffer)
  
  		/* calc the required page order */
 -		rq->wqe.frag_sz = MLX5_SKB_FRAG_SZ(rq->buff.headroom + byte_count);
 -		npages = DIV_ROUND_UP(rq->wqe.frag_sz, PAGE_SIZE);
 +		frag_sz = MLX5_RX_HEADROOM +
 +			  byte_count /* packet data */ +
 +			  SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 +		frag_sz = SKB_DATA_ALIGN(frag_sz);
 +
 +		npages = DIV_ROUND_UP(frag_sz, PAGE_SIZE);
  		rq->buff.page_order = order_base_2(npages);
  
  		byte_count |= MLX5_HW_START_PADDING;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
