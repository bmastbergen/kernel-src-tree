x86/intel_rdt: Add command line options for resource director technology

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] intel_rdt: Add command line options for resource director technology (Jiri Olsa) [1486121]
Rebuild_FUZZ: 97.14%
commit-author Tony Luck <tony.luck@intel.com>
commit 1d9807fc64c131a83a96917f2b2da1c9b00cf127
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/1d9807fc.failed

Command line options allow us to ignore features that we don't want.
Also we can re-enable options that have been disabled on a platform
(so long as the underlying h/w actually supports the option).

[ tglx: Marked the option array __initdata and the helper function __init ]

	Signed-off-by: Tony Luck <tony.luck@intel.com>
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Cc: Fenghua" <fenghua.yu@intel.com>
	Cc: Ravi V" <ravi.v.shankar@intel.com>
	Cc: "Peter Zijlstra" <peterz@infradead.org>
	Cc: "Stephane Eranian" <eranian@google.com>
	Cc: "Andi Kleen" <ak@linux.intel.com>
	Cc: "David Carrillo-Cisneros" <davidcc@google.com>
	Cc: Vikas Shivappa <vikas.shivappa@linux.intel.com>
Link: http://lkml.kernel.org/r/0c37b0d4dbc30977a3c1cee08b66420f83662694.1503512900.git.tony.luck@intel.com

(cherry picked from commit 1d9807fc64c131a83a96917f2b2da1c9b00cf127)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/kernel-parameters.rst
#	Documentation/kernel-parameters.txt
#	arch/x86/kernel/cpu/intel_rdt.c
diff --cc Documentation/kernel-parameters.txt
index 1d9178db9795,ef52ae4ed6e8..000000000000
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@@ -2916,9 -3598,23 +2916,29 @@@ bytes respectively. Such letter suffixe
  			Run specified binary instead of /init from the ramdisk,
  			used for early userspace startup. See initrd.
  
++<<<<<<< HEAD:Documentation/kernel-parameters.txt
 +	reboot=		[BUGS=X86-32,BUGS=ARM,BUGS=IA-64] Rebooting mode
 +			Format: <reboot_mode>[,<reboot_mode2>[,...]]
 +			See arch/*/kernel/reboot.c or arch/*/kernel/process.c
++=======
+ 	rdt=		[HW,X86,RDT]
+ 			Turn on/off individual RDT features. List is:
+ 			cmt, mbmtotal, mbmlocal, l3cat, l3cdp, l2cat, mba.
+ 			E.g. to turn on cmt and turn off mba use:
+ 				rdt=cmt,!mba
+ 
+ 	reboot=		[KNL]
+ 			Format (x86 or x86_64):
+ 				[w[arm] | c[old] | h[ard] | s[oft] | g[pio]] \
+ 				[[,]s[mp]#### \
+ 				[[,]b[ios] | a[cpi] | k[bd] | t[riple] | e[fi] | p[ci]] \
+ 				[[,]f[orce]
+ 			Where reboot_mode is one of warm (soft) or cold (hard) or gpio,
+ 			      reboot_type is one of bios, acpi, kbd, triple, efi, or pci,
+ 			      reboot_force is either force or not specified,
+ 			      reboot_cpu is s[mp]#### with #### being the processor
+ 					to be used for rebooting.
++>>>>>>> 1d9807fc64c1 (x86/intel_rdt: Add command line options for resource director technology):Documentation/admin-guide/kernel-parameters.txt
  
  	relax_domain_level=
  			[KNL, SMP] Set scheduler's default relax_domain_level.
diff --cc arch/x86/kernel/cpu/intel_rdt.c
index ad087dd4421e,b641622003cf..000000000000
--- a/arch/x86/kernel/cpu/intel_rdt.c
+++ b/arch/x86/kernel/cpu/intel_rdt.c
@@@ -398,42 -618,157 +398,177 @@@ static int intel_rdt_offline_cpu(unsign
  	return 0;
  }
  
 -/*
 - * Choose a width for the resource name and resource data based on the
 - * resource that has widest name and cbm.
 - */
 -static __init void rdt_init_padding(void)
 +static int
 +rdt_cpu_notify(struct notifier_block *self, unsigned long action, void *hcpu)
  {
 -	struct rdt_resource *r;
 -	int cl;
 +       unsigned int cpu = (long)hcpu;
  
 -	for_each_alloc_capable_rdt_resource(r) {
 -		cl = strlen(r->name);
 -		if (cl > max_name_width)
 -			max_name_width = cl;
 +       switch (action & ~CPU_TASKS_FROZEN) {
  
 -		if (r->data_width > max_data_width)
 -			max_data_width = r->data_width;
 -	}
 +       case CPU_ONLINE:
 +       case CPU_DOWN_FAILED:
 +               intel_rdt_online_cpu(cpu, true);
 +               break;
 +
 +       case CPU_UP_CANCELED:
 +       case CPU_DOWN_PREPARE:
 +               intel_rdt_offline_cpu(cpu);
 +               break;
 +       default:
 +               break;
 +       }
 +
 +       return NOTIFY_OK;
  }
  
 +static void __init rdt_cpu_setup(void *dummy)
 +{
 +	struct rdt_resource *r;
 +	int i;
 +
 +	clear_closid(smp_processor_id());
 +
 +	for_each_capable_rdt_resource(r) {
 +		for (i = 0; i < r->num_closid; i++) {
 +			int idx = cbm_idx(r, i);
 +
++<<<<<<< HEAD
 +			wrmsrl(r->msr_base + idx, r->max_cbm);
 +		}
++=======
+ enum {
+ 	RDT_FLAG_CMT,
+ 	RDT_FLAG_MBM_TOTAL,
+ 	RDT_FLAG_MBM_LOCAL,
+ 	RDT_FLAG_L3_CAT,
+ 	RDT_FLAG_L3_CDP,
+ 	RDT_FLAG_L2_CAT,
+ 	RDT_FLAG_MBA,
+ };
+ 
+ #define RDT_OPT(idx, n, f)	\
+ [idx] = {			\
+ 	.name = n,		\
+ 	.flag = f		\
+ }
+ 
+ struct rdt_options {
+ 	char	*name;
+ 	int	flag;
+ 	bool	force_off, force_on;
+ };
+ 
+ static struct rdt_options rdt_options[]  __initdata = {
+ 	RDT_OPT(RDT_FLAG_CMT,	    "cmt",	X86_FEATURE_CQM_OCCUP_LLC),
+ 	RDT_OPT(RDT_FLAG_MBM_TOTAL, "mbmtotal", X86_FEATURE_CQM_MBM_TOTAL),
+ 	RDT_OPT(RDT_FLAG_MBM_LOCAL, "mbmlocal", X86_FEATURE_CQM_MBM_LOCAL),
+ 	RDT_OPT(RDT_FLAG_L3_CAT,    "l3cat",	X86_FEATURE_CAT_L3),
+ 	RDT_OPT(RDT_FLAG_L3_CDP,    "l3cdp",	X86_FEATURE_CDP_L3),
+ 	RDT_OPT(RDT_FLAG_L2_CAT,    "l2cat",	X86_FEATURE_CAT_L2),
+ 	RDT_OPT(RDT_FLAG_MBA,	    "mba",	X86_FEATURE_MBA),
+ };
+ #define NUM_RDT_OPTIONS ARRAY_SIZE(rdt_options)
+ 
+ static int __init set_rdt_options(char *str)
+ {
+ 	struct rdt_options *o;
+ 	bool force_off;
+ 	char *tok;
+ 
+ 	if (*str == '=')
+ 		str++;
+ 	while ((tok = strsep(&str, ",")) != NULL) {
+ 		force_off = *tok == '!';
+ 		if (force_off)
+ 			tok++;
+ 		for (o = rdt_options; o < &rdt_options[NUM_RDT_OPTIONS]; o++) {
+ 			if (strcmp(tok, o->name) == 0) {
+ 				if (force_off)
+ 					o->force_off = true;
+ 				else
+ 					o->force_on = true;
+ 				break;
+ 			}
+ 		}
+ 	}
+ 	return 1;
+ }
+ __setup("rdt", set_rdt_options);
+ 
+ static bool __init rdt_cpu_has(int flag)
+ {
+ 	bool ret = boot_cpu_has(flag);
+ 	struct rdt_options *o;
+ 
+ 	if (!ret)
+ 		return ret;
+ 
+ 	for (o = rdt_options; o < &rdt_options[NUM_RDT_OPTIONS]; o++) {
+ 		if (flag == o->flag) {
+ 			if (o->force_off)
+ 				ret = false;
+ 			if (o->force_on)
+ 				ret = true;
+ 			break;
+ 		}
+ 	}
+ 	return ret;
+ }
+ 
+ static __init bool get_rdt_alloc_resources(void)
+ {
+ 	bool ret = false;
+ 
+ 	if (rdt_alloc_capable)
+ 		return true;
+ 
+ 	if (!boot_cpu_has(X86_FEATURE_RDT_A))
+ 		return false;
+ 
+ 	if (rdt_cpu_has(X86_FEATURE_CAT_L3)) {
+ 		rdt_get_cache_alloc_cfg(1, &rdt_resources_all[RDT_RESOURCE_L3]);
+ 		if (rdt_cpu_has(X86_FEATURE_CDP_L3)) {
+ 			rdt_get_cdp_l3_config(RDT_RESOURCE_L3DATA);
+ 			rdt_get_cdp_l3_config(RDT_RESOURCE_L3CODE);
+ 		}
+ 		ret = true;
+ 	}
+ 	if (rdt_cpu_has(X86_FEATURE_CAT_L2)) {
+ 		/* CPUID 0x10.2 fields are same format at 0x10.1 */
+ 		rdt_get_cache_alloc_cfg(2, &rdt_resources_all[RDT_RESOURCE_L2]);
+ 		ret = true;
+ 	}
+ 
+ 	if (rdt_cpu_has(X86_FEATURE_MBA)) {
+ 		if (rdt_get_mem_config(&rdt_resources_all[RDT_RESOURCE_MBA]))
+ 			ret = true;
+ 	}
+ 	return ret;
+ }
+ 
+ static __init bool get_rdt_mon_resources(void)
+ {
+ 	if (rdt_cpu_has(X86_FEATURE_CQM_OCCUP_LLC))
+ 		rdt_mon_features |= (1 << QOS_L3_OCCUP_EVENT_ID);
+ 	if (rdt_cpu_has(X86_FEATURE_CQM_MBM_TOTAL))
+ 		rdt_mon_features |= (1 << QOS_L3_MBM_TOTAL_EVENT_ID);
+ 	if (rdt_cpu_has(X86_FEATURE_CQM_MBM_LOCAL))
+ 		rdt_mon_features |= (1 << QOS_L3_MBM_LOCAL_EVENT_ID);
+ 
+ 	if (!rdt_mon_features)
+ 		return false;
+ 
+ 	return !rdt_get_mon_l3_config(&rdt_resources_all[RDT_RESOURCE_L3]);
+ }
+ 
+ static __init void rdt_quirks(void)
+ {
+ 	switch (boot_cpu_data.x86_model) {
+ 	case INTEL_FAM6_HASWELL_X:
+ 		if (!rdt_options[RDT_FLAG_L3_CAT].force_off)
+ 			cache_alloc_hsw_probe();
+ 		break;
++>>>>>>> 1d9807fc64c1 (x86/intel_rdt: Add command line options for resource director technology)
  	}
  }
  
* Unmerged path Documentation/admin-guide/kernel-parameters.rst
* Unmerged path Documentation/admin-guide/kernel-parameters.rst
* Unmerged path Documentation/kernel-parameters.txt
* Unmerged path arch/x86/kernel/cpu/intel_rdt.c
