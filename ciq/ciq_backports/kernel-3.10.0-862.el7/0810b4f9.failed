fsnotify: Move fsnotify_destroy_marks()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jan Kara <jack@suse.cz>
commit 0810b4f9f207910d90aee56d312d25f334796363
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0810b4f9.failed

Move fsnotify_destroy_marks() to be later in the fs/notify/mark.c. It
will need some functions that are declared after its current
declaration. No functional change.

	Reviewed-by: Miklos Szeredi <mszeredi@redhat.com>
	Reviewed-by: Amir Goldstein <amir73il@gmail.com>
	Signed-off-by: Jan Kara <jack@suse.cz>
(cherry picked from commit 0810b4f9f207910d90aee56d312d25f334796363)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/notify/mark.c
diff --cc fs/notify/mark.c
index 44836e539169,b3f83ed6e8be..000000000000
--- a/fs/notify/mark.c
+++ b/fs/notify/mark.c
@@@ -220,34 -224,11 +220,42 @@@ void fsnotify_destroy_mark(struct fsnot
  	fsnotify_free_mark(mark);
  }
  
++<<<<<<< HEAD
 +void fsnotify_destroy_marks(struct hlist_head *head, spinlock_t *lock)
 +{
 +	struct fsnotify_mark *mark;
 +
 +	while (1) {
 +		/*
 +		 * We have to be careful since we can race with e.g.
 +		 * fsnotify_clear_marks_by_group() and once we drop 'lock',
 +		 * mark can get removed from the obj_list and destroyed. But
 +		 * we are holding mark reference so mark cannot be freed and
 +		 * calling fsnotify_destroy_mark() more than once is fine.
 +		 */
 +		spin_lock(lock);
 +		if (hlist_empty(head)) {
 +			spin_unlock(lock);
 +			break;
 +		}
 +		mark = hlist_entry(head->first, struct fsnotify_mark, obj_list);
 +		/*
 +		 * We don't update i_fsnotify_mask / mnt_fsnotify_mask here
 +		 * since inode / mount is going away anyway. So just remove
 +		 * mark from the list.
 +		 */
 +		hlist_del_init_rcu(&mark->obj_list);
 +		fsnotify_get_mark(mark);
 +		spin_unlock(lock);
 +		fsnotify_destroy_mark(mark, mark->group);
 +		fsnotify_put_mark(mark);
++=======
+ void fsnotify_connector_free(struct fsnotify_mark_connector **connp)
+ {
+ 	if (*connp) {
+ 		kmem_cache_free(fsnotify_mark_connector_cachep, *connp);
+ 		*connp = NULL;
++>>>>>>> 0810b4f9f207 (fsnotify: Move fsnotify_destroy_marks())
  	}
  }
  
* Unmerged path fs/notify/mark.c
