nvme: provide UUID value to userspace

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] provide UUID value to userspace (David Milburn) [1451199]
Rebuild_FUZZ: 91.18%
commit-author Johannes Thumshirn <jthumshirn@suse.de>
commit d934f9848a77be4afe0ca336ea419dd066c934f3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d934f984.failed

Now that we have a way for getting the UUID from a target, provide it
to userspace as well.

Unfortunately there is already a sysfs attribute called UUID which is
a misnomer as it holds the NGUID value. So instead of creating yet
another wrong name, create a new 'nguid' sysfs attribute for the
NGUID. For the UUID attribute add a check wheter the namespace has a
UUID assigned to it and return this or return the NGUID to maintain
backwards compatibility. This should give userspace a chance to catch
up.

	Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Sagi Grimberg <sagi@rimberg.me>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit d934f9848a77be4afe0ca336ea419dd066c934f3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index b83a9ba5ece8,89a7fe422e1a..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1395,8 -1890,17 +1403,22 @@@ static DEVICE_ATTR(nguid, S_IRUGO, ngui
  static ssize_t uuid_show(struct device *dev, struct device_attribute *attr,
  								char *buf)
  {
++<<<<<<< HEAD
 +	struct nvme_ns *ns = dev_to_disk(dev)->private_data;
 +	return sprintf(buf, "%pU\n", ns->uuid);
++=======
+ 	struct nvme_ns *ns = nvme_get_ns_from_dev(dev);
+ 
+ 	/* For backward compatibility expose the NGUID to userspace if
+ 	 * we have no UUID set
+ 	 */
+ 	if (uuid_is_null(&ns->uuid)) {
+ 		printk_ratelimited(KERN_WARNING
+ 				   "No UUID available providing old NGUID\n");
+ 		return sprintf(buf, "%pU\n", ns->nguid);
+ 	}
+ 	return sprintf(buf, "%pU\n", &ns->uuid);
++>>>>>>> d934f9848a77 (nvme: provide UUID value to userspace)
  }
  static DEVICE_ATTR(uuid, S_IRUGO, uuid_show, NULL);
  
@@@ -1428,10 -1933,15 +1451,19 @@@ static umode_t nvme_ns_attrs_are_visibl
  		struct attribute *a, int n)
  {
  	struct device *dev = container_of(kobj, struct device, kobj);
 -	struct nvme_ns *ns = nvme_get_ns_from_dev(dev);
 +	struct nvme_ns *ns = dev_to_disk(dev)->private_data;
  
  	if (a == &dev_attr_uuid.attr) {
++<<<<<<< HEAD
 +		if (!memchr_inv(ns->uuid, 0, sizeof(ns->uuid)))
++=======
+ 		if (uuid_is_null(&ns->uuid) ||
+ 		    !memchr_inv(ns->nguid, 0, sizeof(ns->nguid)))
+ 			return 0;
+ 	}
+ 	if (a == &dev_attr_nguid.attr) {
+ 		if (!memchr_inv(ns->nguid, 0, sizeof(ns->nguid)))
++>>>>>>> d934f9848a77 (nvme: provide UUID value to userspace)
  			return 0;
  	}
  	if (a == &dev_attr_eui.attr) {
* Unmerged path drivers/nvme/host/core.c
