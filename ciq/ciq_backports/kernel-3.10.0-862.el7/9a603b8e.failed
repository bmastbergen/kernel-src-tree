vmbus: remove unused vmbus_sendpacket_multipagebuffer

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 9a603b8e1136f2b55f780fefbcbf84d31844ff2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9a603b8e.failed

This function is not used anywhere in current code.

	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9a603b8e1136f2b55f780fefbcbf84d31844ff2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/hv/channel.c
diff --cc drivers/hv/channel.c
index fe4f1e75543b,756a1e841142..000000000000
--- a/drivers/hv/channel.c
+++ b/drivers/hv/channel.c
@@@ -807,63 -814,6 +807,66 @@@ int vmbus_sendpacket_mpb_desc(struct vm
  }
  EXPORT_SYMBOL_GPL(vmbus_sendpacket_mpb_desc);
  
++<<<<<<< HEAD
 +/*
 + * vmbus_sendpacket_multipagebuffer - Send a multi-page buffer packet
 + * using a GPADL Direct packet type.
 + */
 +int vmbus_sendpacket_multipagebuffer(struct vmbus_channel *channel,
 +				struct hv_multipage_buffer *multi_pagebuffer,
 +				void *buffer, u32 bufferlen, u64 requestid)
 +{
 +	struct vmbus_channel_packet_multipage_buffer desc;
 +	u32 descsize;
 +	u32 packetlen;
 +	u32 packetlen_aligned;
 +	struct kvec bufferlist[3];
 +	u64 aligned_data = 0;
 +	bool lock = channel->acquire_ring_lock;
 +	u32 pfncount = NUM_PAGES_SPANNED(multi_pagebuffer->offset,
 +					 multi_pagebuffer->len);
 +
 +	if (pfncount > MAX_MULTIPAGE_BUFFER_COUNT)
 +		return -EINVAL;
 +
 +	/*
 +	 * Adjust the size down since vmbus_channel_packet_multipage_buffer is
 +	 * the largest size we support
 +	 */
 +	descsize = sizeof(struct vmbus_channel_packet_multipage_buffer) -
 +			  ((MAX_MULTIPAGE_BUFFER_COUNT - pfncount) *
 +			  sizeof(u64));
 +	packetlen = descsize + bufferlen;
 +	packetlen_aligned = ALIGN(packetlen, sizeof(u64));
 +
 +
 +	/* Setup the descriptor */
 +	desc.type = VM_PKT_DATA_USING_GPA_DIRECT;
 +	desc.flags = VMBUS_DATA_PACKET_FLAG_COMPLETION_REQUESTED;
 +	desc.dataoffset8 = descsize >> 3; /* in 8-bytes granularity */
 +	desc.length8 = (u16)(packetlen_aligned >> 3);
 +	desc.transactionid = requestid;
 +	desc.rangecount = 1;
 +
 +	desc.range.len = multi_pagebuffer->len;
 +	desc.range.offset = multi_pagebuffer->offset;
 +
 +	memcpy(desc.range.pfn_array, multi_pagebuffer->pfn_array,
 +	       pfncount * sizeof(u64));
 +
 +	bufferlist[0].iov_base = &desc;
 +	bufferlist[0].iov_len = descsize;
 +	bufferlist[1].iov_base = buffer;
 +	bufferlist[1].iov_len = bufferlen;
 +	bufferlist[2].iov_base = &aligned_data;
 +	bufferlist[2].iov_len = (packetlen_aligned - packetlen);
 +
 +	return hv_ringbuffer_write(channel, bufferlist, 3, lock);
 +}
 +EXPORT_SYMBOL_GPL(vmbus_sendpacket_multipagebuffer);
 +
++=======
++>>>>>>> 9a603b8e1136 (vmbus: remove unused vmbus_sendpacket_multipagebuffer)
  /**
   * vmbus_recvpacket() - Retrieve the user packet on the specified channel
   * @channel: Pointer to vmbus_channel structure.
* Unmerged path drivers/hv/channel.c
diff --git a/include/linux/hyperv.h b/include/linux/hyperv.h
index 5c0043b7dddc..2cb638eedf12 100644
--- a/include/linux/hyperv.h
+++ b/include/linux/hyperv.h
@@ -1068,12 +1068,6 @@ extern int vmbus_sendpacket_pagebuffer_ctl(struct vmbus_channel *channel,
 					   u64 requestid,
 					   u32 flags);
 
-extern int vmbus_sendpacket_multipagebuffer(struct vmbus_channel *channel,
-					struct hv_multipage_buffer *mpb,
-					void *buffer,
-					u32 bufferlen,
-					u64 requestid);
-
 extern int vmbus_sendpacket_mpb_desc(struct vmbus_channel *channel,
 				     struct vmbus_packet_mpb_array *mpb,
 				     u32 desc_size,
