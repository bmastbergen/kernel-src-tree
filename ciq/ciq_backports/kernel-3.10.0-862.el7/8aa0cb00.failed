nfp: move port init to apps

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 8aa0cb00743a1767013a5ee0a581db62620aabd7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/8aa0cb00.failed

Start fleshing out the apps by turning the vNIC init code to
a per-app callback.  The two initial apps we have are NIC and
eBPF.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8aa0cb00743a1767013a5ee0a581db62620aabd7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/Makefile
#	drivers/net/ethernet/netronome/nfp/nfp_app.c
#	drivers/net/ethernet/netronome/nfp/nfp_app.h
#	drivers/net/ethernet/netronome/nfp/nfp_main.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_main.c
diff --cc drivers/net/ethernet/netronome/nfp/Makefile
index a30f2e651180,bbbfc19e5887..000000000000
--- a/drivers/net/ethernet/netronome/nfp/Makefile
+++ b/drivers/net/ethernet/netronome/nfp/Makefile
@@@ -14,10 -14,24 +14,30 @@@ nfp-objs := 
  	    nfpcore/nfp_resource.o \
  	    nfpcore/nfp_rtsym.o \
  	    nfpcore/nfp_target.o \
++<<<<<<< HEAD
++=======
+ 	    nfp_app.o \
+ 	    nfp_app_nic.o \
+ 	    nfp_devlink.o \
+ 	    nfp_hwmon.o \
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  	    nfp_main.o \
  	    nfp_net_common.o \
  	    nfp_net_ethtool.o \
 -	    nfp_net_offload.o \
  	    nfp_net_main.o \
++<<<<<<< HEAD
 +	    nfp_netvf_main.o
++=======
+ 	    nfp_netvf_main.o \
+ 	    nfp_port.o \
+ 	    bpf/main.o \
+ 	    nic/main.o
+ 
+ ifeq ($(CONFIG_BPF_SYSCALL),y)
+ nfp-objs += \
+ 	    nfp_bpf_verifier.o \
+ 	    nfp_bpf_jit.o
+ endif
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  
  nfp-$(CONFIG_NFP_DEBUG) += nfp_net_debugfs.o
diff --cc drivers/net/ethernet/netronome/nfp/nfp_main.h
index 1ac430fbaa18,c46d00bbf19d..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_main.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_main.h
@@@ -52,6 -54,8 +52,11 @@@ struct pci_dev
  struct nfp_cpp;
  struct nfp_cpp_area;
  struct nfp_eth_table;
++<<<<<<< HEAD
++=======
+ struct nfp_net;
+ struct nfp_nsp_identify;
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  
  /**
   * struct nfp_pf - NFP PF-specific device structure
@@@ -102,4 -119,14 +107,15 @@@ extern struct pci_driver nfp_netvf_pci_
  int nfp_net_pci_probe(struct nfp_pf *pf);
  void nfp_net_pci_remove(struct nfp_pf *pf);
  
++<<<<<<< HEAD
++=======
+ int nfp_hwmon_register(struct nfp_pf *pf);
+ void nfp_hwmon_unregister(struct nfp_pf *pf);
+ 
+ struct nfp_eth_table_port *
+ nfp_net_find_port(struct nfp_eth_table *eth_tbl, unsigned int id);
+ void
+ nfp_net_get_mac_addr(struct nfp_net *nn, struct nfp_cpp *cpp, unsigned int id);
+ 
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  #endif /* NFP_MAIN_H */
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index acc8cfe284f3,28782bf3ce68..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@@ -130,10 -132,20 +130,24 @@@ err_area
  	return (u8 __iomem *)ERR_PTR(err);
  }
  
++<<<<<<< HEAD
 +static void
 +nfp_net_get_mac_addr_hwinfo(struct nfp_net *nn, struct nfp_cpp *cpp,
 +			    unsigned int id)
++=======
+ /**
+  * nfp_net_get_mac_addr() - Get the MAC address.
+  * @nn:       NFP Network structure
+  * @cpp:      NFP CPP handle
+  * @id:	      NFP port id
+  *
+  * First try to get the MAC address from NSP ETH table. If that
+  * fails try HWInfo.  As a last resort generate a random address.
+  */
+ void
+ nfp_net_get_mac_addr(struct nfp_net *nn, struct nfp_cpp *cpp, unsigned int id)
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  {
 -	struct nfp_eth_table_port *eth_port;
 -	struct nfp_net_dp *dp = &nn->dp;
  	u8 mac_addr[ETH_ALEN];
  	const char *mac_str;
  	char name[32];
@@@ -157,21 -175,12 +171,26 @@@
  		return;
  	}
  
 -	ether_addr_copy(dp->netdev->dev_addr, mac_addr);
 -	ether_addr_copy(dp->netdev->perm_addr, mac_addr);
 +	ether_addr_copy(nn->netdev->dev_addr, mac_addr);
 +	ether_addr_copy(nn->netdev->perm_addr, mac_addr);
  }
  
++<<<<<<< HEAD
 +/**
 + * nfp_net_get_mac_addr() - Get the MAC address.
 + * @nn:       NFP Network structure
 + * @pf:	      NFP PF device structure
 + * @id:	      NFP port id
 + *
 + * First try to get the MAC address from NSP ETH table. If that
 + * fails try HWInfo.  As a last resort generate a random address.
 + */
 +static void
 +nfp_net_get_mac_addr(struct nfp_net *nn, struct nfp_pf *pf, unsigned int id)
++=======
+ struct nfp_eth_table_port *
+ nfp_net_find_port(struct nfp_eth_table *eth_tbl, unsigned int id)
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  {
  	int i;
  
@@@ -207,6 -212,17 +226,20 @@@ static unsigned int nfp_net_pf_get_num_
  	return val;
  }
  
++<<<<<<< HEAD
++=======
+ static int nfp_net_pf_get_num_ports(struct nfp_pf *pf)
+ {
+ 	return nfp_net_pf_rtsym_read_optional(pf, "nfd_cfg_pf%u_num_ports", 1);
+ }
+ 
+ static int nfp_net_pf_get_app_id(struct nfp_pf *pf)
+ {
+ 	return nfp_net_pf_rtsym_read_optional(pf, "_pf%u_net_app_id",
+ 					      NFP_APP_CORE_NIC);
+ }
+ 
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  static unsigned int
  nfp_net_pf_total_qcs(struct nfp_pf *pf, void __iomem *ctrl_bar,
  		     unsigned int stride, u32 start_off, u32 num_off)
@@@ -305,6 -329,15 +339,18 @@@ nfp_net_pf_alloc_port_netdev(struct nfp
  	nn->stride_rx = stride;
  	nn->stride_tx = stride;
  
++<<<<<<< HEAD
++=======
+ 	err = nfp_app_vnic_init(pf->app, nn, eth_id);
+ 	if (err) {
+ 		nfp_net_free(nn);
+ 		return ERR_PTR(err);
+ 	}
+ 
+ 	pf->num_vnics++;
+ 	list_add_tail(&nn->vnic_list, &pf->vnics);
+ 
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  	return nn;
  }
  
@@@ -314,9 -346,6 +360,12 @@@ nfp_net_pf_init_port_netdev(struct nfp_
  {
  	int err;
  
++<<<<<<< HEAD
 +	/* Get MAC address */
 +	nfp_net_get_mac_addr(nn, pf, id);
 +
++=======
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  	/* Get ME clock frequency from ctrl BAR
  	 * XXX for now frequency is hardcoded until we figure out how
  	 * to get the value from nfp-hwinfo into ctrl bar
@@@ -361,11 -401,19 +410,20 @@@ nfp_net_pf_alloc_netdevs(struct nfp_pf 
  			err = PTR_ERR(nn);
  			goto err_free_prev;
  		}
 +		list_add_tail(&nn->port_list, &pf->ports);
  
  		ctrl_bar += NFP_PF_CSR_SLICE_SIZE;
++<<<<<<< HEAD
++=======
+ 
+ 		/* Kill the vNIC if app init marked it as invalid */
+ 		if (nn->port && nn->port->type == NFP_PORT_INVALID) {
+ 			nfp_net_pf_free_vnic(pf, nn);
+ 			continue;
+ 		}
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  	}
  
 -	if (list_empty(&pf->vnics))
 -		return -ENODEV;
 -
  	return 0;
  
  err_free_prev:
@@@ -447,6 -501,31 +505,34 @@@ err_nn_free
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ static int nfp_net_pf_app_init(struct nfp_pf *pf)
+ {
+ 	int err;
+ 
+ 	pf->app = nfp_app_alloc(pf, nfp_net_pf_get_app_id(pf));
+ 	if (IS_ERR(pf->app))
+ 		return PTR_ERR(pf->app);
+ 
+ 	err = nfp_app_init(pf->app);
+ 	if (err)
+ 		goto err_free;
+ 
+ 	return 0;
+ 
+ err_free:
+ 	nfp_app_free(pf->app);
+ 	return err;
+ }
+ 
+ static void nfp_net_pf_app_clean(struct nfp_pf *pf)
+ {
+ 	nfp_app_free(pf->app);
+ 	pf->app = NULL;
+ }
+ 
++>>>>>>> 8aa0cb00743a (nfp: move port init to apps)
  static void nfp_net_pci_remove_finish(struct nfp_pf *pf)
  {
  	nfp_net_debugfs_dir_clean(&pf->ddir);
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.h
* Unmerged path drivers/net/ethernet/netronome/nfp/Makefile
diff --git a/drivers/net/ethernet/netronome/nfp/bpf/main.c b/drivers/net/ethernet/netronome/nfp/bpf/main.c
new file mode 100644
index 000000000000..63b4769c58c2
--- /dev/null
+++ b/drivers/net/ethernet/netronome/nfp/bpf/main.c
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2017 Netronome Systems, Inc.
+ *
+ * This software is dual licensed under the GNU General License Version 2,
+ * June 1991 as shown in the file COPYING in the top-level directory of this
+ * source tree or the BSD 2-Clause License provided below.  You have the
+ * option to license this software under the complete terms of either license.
+ *
+ * The BSD 2-Clause License:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      1. Redistributions of source code must retain the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer.
+ *
+ *      2. Redistributions in binary form must reproduce the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer in the documentation and/or other materials
+ *         provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "../nfpcore/nfp_cpp.h"
+#include "../nfp_app.h"
+#include "../nfp_main.h"
+#include "../nfp_net.h"
+#include "../nfp_port.h"
+
+static int
+nfp_bpf_vnic_init(struct nfp_app *app, struct nfp_net *nn, unsigned int id)
+{
+	/* Limit to single port, otherwise it's just a NIC */
+	if (id > 0) {
+		nfp_warn(app->cpp,
+			 "BPF NIC doesn't support more than one port right now\n");
+		nn->port = nfp_port_alloc(app, NFP_PORT_INVALID, nn->dp.netdev);
+		return PTR_ERR_OR_ZERO(nn->port);
+	}
+
+	return nfp_app_nic_vnic_init(app, nn, id);
+}
+
+const struct nfp_app_type app_bpf = {
+	.id		= NFP_APP_BPF_NIC,
+
+	.vnic_init	= nfp_bpf_vnic_init,
+};
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.c
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_app.h
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_app_nic.c b/drivers/net/ethernet/netronome/nfp/nfp_app_nic.c
new file mode 100644
index 000000000000..1a33ad9f4170
--- /dev/null
+++ b/drivers/net/ethernet/netronome/nfp/nfp_app_nic.c
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2017 Netronome Systems, Inc.
+ *
+ * This software is dual licensed under the GNU General License Version 2,
+ * June 1991 as shown in the file COPYING in the top-level directory of this
+ * source tree or the BSD 2-Clause License provided below.  You have the
+ * option to license this software under the complete terms of either license.
+ *
+ * The BSD 2-Clause License:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      1. Redistributions of source code must retain the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer.
+ *
+ *      2. Redistributions in binary form must reproduce the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer in the documentation and/or other materials
+ *         provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "nfpcore/nfp_cpp.h"
+#include "nfpcore/nfp_nsp.h"
+#include "nfp_app.h"
+#include "nfp_main.h"
+#include "nfp_net.h"
+#include "nfp_port.h"
+
+static int
+nfp_app_nic_vnic_init_phy_port(struct nfp_pf *pf, struct nfp_app *app,
+			       struct nfp_net *nn, unsigned int id)
+{
+	if (!pf->eth_tbl)
+		return 0;
+
+	nn->port = nfp_port_alloc(app, NFP_PORT_PHYS_PORT, nn->dp.netdev);
+	if (IS_ERR(nn->port))
+		return PTR_ERR(nn->port);
+
+	nn->port->eth_id = id;
+	nn->port->eth_port = nfp_net_find_port(pf->eth_tbl, id);
+
+	/* Check if vNIC has external port associated and cfg is OK */
+	if (!nn->port->eth_port) {
+		nfp_err(app->cpp,
+			"NSP port entries don't match vNICs (no entry for port #%d)\n",
+			id);
+		nfp_port_free(nn->port);
+		return -EINVAL;
+	}
+	if (nn->port->eth_port->override_changed) {
+		nfp_warn(app->cpp,
+			 "Config changed for port #%d, reboot required before port will be operational\n",
+			 id);
+		nn->port->type = NFP_PORT_INVALID;
+		return 1;
+	}
+
+	return 0;
+}
+
+int nfp_app_nic_vnic_init(struct nfp_app *app, struct nfp_net *nn,
+			  unsigned int id)
+{
+	int err;
+
+	err = nfp_app_nic_vnic_init_phy_port(app->pf, app, nn, id);
+	if (err)
+		return err < 0 ? err : 0;
+
+	nfp_net_get_mac_addr(nn, app->cpp, id);
+
+	return 0;
+}
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_main.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_main.c
diff --git a/drivers/net/ethernet/netronome/nfp/nic/main.c b/drivers/net/ethernet/netronome/nfp/nic/main.c
new file mode 100644
index 000000000000..6a5b30667248
--- /dev/null
+++ b/drivers/net/ethernet/netronome/nfp/nic/main.c
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2017 Netronome Systems, Inc.
+ *
+ * This software is dual licensed under the GNU General License Version 2,
+ * June 1991 as shown in the file COPYING in the top-level directory of this
+ * source tree or the BSD 2-Clause License provided below.  You have the
+ * option to license this software under the complete terms of either license.
+ *
+ * The BSD 2-Clause License:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      1. Redistributions of source code must retain the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer.
+ *
+ *      2. Redistributions in binary form must reproduce the above
+ *         copyright notice, this list of conditions and the following
+ *         disclaimer in the documentation and/or other materials
+ *         provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "../nfpcore/nfp_cpp.h"
+#include "../nfpcore/nfp_nsp.h"
+#include "../nfp_app.h"
+#include "../nfp_main.h"
+
+static int nfp_nic_init(struct nfp_app *app)
+{
+	struct nfp_pf *pf = app->pf;
+
+	if (pf->eth_tbl && pf->max_data_vnics != pf->eth_tbl->count) {
+		nfp_err(pf->cpp, "ETH entries don't match vNICs (%d vs %d)\n",
+			pf->max_data_vnics, pf->eth_tbl->count);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+const struct nfp_app_type app_nic = {
+	.id		= NFP_APP_CORE_NIC,
+
+	.init		= nfp_nic_init,
+	.vnic_init	= nfp_app_nic_vnic_init,
+};
