net_sched: fq_codel: cache skb->truesize into skb->cb

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 008830bc321c0fc22c0db8d5b0b56f854ed90a5c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/008830bc.failed

Now we defer skb drops, it makes sense to keep a copy
of skb->truesize in struct codel_skb_cb to avoid one
cache line miss per dropped skb in fq_codel_drop(),
to reduce latencies a bit further.

	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 008830bc321c0fc22c0db8d5b0b56f854ed90a5c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/sch_fq_codel.c
diff --cc net/sched/sch_fq_codel.c
index d1079342abe0,a5ea0e9b6be4..000000000000
--- a/net/sched/sch_fq_codel.c
+++ b/net/sched/sch_fq_codel.c
@@@ -171,8 -172,8 +171,13 @@@ static unsigned int fq_codel_drop(struc
  	do {
  		skb = dequeue_head(flow);
  		len += qdisc_pkt_len(skb);
++<<<<<<< HEAD
 +		mem += skb->truesize;
 +		kfree_skb(skb);
++=======
+ 		mem += get_codel_cb(skb)->mem_usage;
+ 		__qdisc_drop(skb, to_free);
++>>>>>>> 008830bc321c (net_sched: fq_codel: cache skb->truesize into skb->cb)
  	} while (++i < max_packets && len < threshold);
  
  	flow->dropped += i;
diff --git a/include/net/codel_qdisc.h b/include/net/codel_qdisc.h
index 8144d9cd2908..098630f83a55 100644
--- a/include/net/codel_qdisc.h
+++ b/include/net/codel_qdisc.h
@@ -52,6 +52,7 @@
 /* Qdiscs using codel plugin must use codel_skb_cb in their own cb[] */
 struct codel_skb_cb {
 	codel_time_t enqueue_time;
+	unsigned int mem_usage;
 };
 
 static struct codel_skb_cb *get_codel_cb(const struct sk_buff *skb)
* Unmerged path net/sched/sch_fq_codel.c
