i40evf: Use le32_to_cpu before evaluating HW desc fields

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Tushar Dave <tushar.n.dave@oracle.com>
commit c969ef4ed9cbf3662fc8709e2581427c191504fb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c969ef4e.failed

i40e hardware descriptor fields are in little-endian format. Driver
must use le32_to_cpu while evaluating these fields otherwise on
big-endian arch we end up evaluating incorrect values, cause errors
like:
i40evf 0000:03:0a.0: Expected response 24 from PF, received 402653184
i40evf 0000:03:0a.1: Expected response 7 from PF, received 117440512

	Signed-off-by: Tushar Dave <tushar.n.dave@oracle.com>
	Reviewed-by: Shannon Nelson <shannon.nelson@oracle.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit c969ef4ed9cbf3662fc8709e2581427c191504fb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40evf/i40evf_main.c
diff --cc drivers/net/ethernet/intel/i40evf/i40evf_main.c
index 7093b3b1de4c,93536b9fc629..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40evf_main.c
+++ b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
@@@ -1929,8 -1957,8 +1929,13 @@@ static void i40evf_adminq_task(struct w
  		container_of(work, struct i40evf_adapter, adminq_task);
  	struct i40e_hw *hw = &adapter->hw;
  	struct i40e_arq_event_info event;
++<<<<<<< HEAD
 +	struct i40e_virtchnl_msg *v_msg;
 +	i40e_status ret;
++=======
+ 	enum virtchnl_ops v_op;
+ 	i40e_status ret, v_ret;
++>>>>>>> c969ef4ed9cb (i40evf: Use le32_to_cpu before evaluating HW desc fields)
  	u32 val, oldval;
  	u16 pending;
  
@@@ -1942,14 -1970,15 +1947,24 @@@
  	if (!event.msg_buf)
  		goto out;
  
++<<<<<<< HEAD
 +	v_msg = (struct i40e_virtchnl_msg *)&event.desc;
++=======
++>>>>>>> c969ef4ed9cb (i40evf: Use le32_to_cpu before evaluating HW desc fields)
  	do {
  		ret = i40evf_clean_arq_element(hw, &event, &pending);
- 		if (ret || !v_msg->v_opcode)
+ 		v_op = (enum virtchnl_ops)le32_to_cpu(event.desc.cookie_high);
+ 		v_ret = (i40e_status)le32_to_cpu(event.desc.cookie_low);
+ 
+ 		if (ret || !v_op)
  			break; /* No event to process or error cleaning ARQ */
  
++<<<<<<< HEAD
 +		i40evf_virtchnl_completion(adapter, v_msg->v_opcode,
 +					   v_msg->v_retval, event.msg_buf,
++=======
+ 		i40evf_virtchnl_completion(adapter, v_op, v_ret, event.msg_buf,
++>>>>>>> c969ef4ed9cb (i40evf: Use le32_to_cpu before evaluating HW desc fields)
  					   event.msg_len);
  		if (pending != 0)
  			memset(event.msg_buf, 0, I40EVF_MAX_AQ_BUF_SIZE);
* Unmerged path drivers/net/ethernet/intel/i40evf/i40evf_main.c
