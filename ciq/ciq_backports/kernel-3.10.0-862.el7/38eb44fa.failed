IB/uverbs: Add new SRQ type IB_SRQT_TM

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Artemy Kovalyov <artemyko@mellanox.com>
commit 38eb44fac71729fabdef71166e72bee5964c10d6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/38eb44fa.failed

Add new SRQ type capable of new tag matching feature.

When SRQ receives a message it will search through the matching list
for the corresponding posted receive buffer. The process of searching
the matching list is called tag matching.

In case the tag matching results in a match, the received message will
be placed in the address specified by the receive buffer. In case no
match was found the message will be placed in a generic buffer until the
corresponding receive buffer will be posted. These messages are called
unexpected and their set is called an unexpected list.

	Signed-off-by: Artemy Kovalyov <artemyko@mellanox.com>
	Reviewed-by: Yossi Itigin <yosefe@mellanox.com>
	Signed-off-by: Leon Romanovsky <leon@kernel.org>
	Signed-off-by: Doug Ledford <dledford@redhat.com>
(cherry picked from commit 38eb44fac71729fabdef71166e72bee5964c10d6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/infiniband/core/uverbs_cmd.c
diff --cc drivers/infiniband/core/uverbs_cmd.c
index 4761b0709900,e69038a07fa0..000000000000
--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@@ -1830,9 -1436,9 +1830,15 @@@ static int create_qp(struct ib_uverbs_f
  			cmd->max_recv_sge = 0;
  		} else {
  			if (cmd->is_srq) {
++<<<<<<< HEAD
 +				srq = idr_read_srq(cmd->srq_handle,
 +						   file->ucontext);
 +				if (!srq || srq->srq_type != IB_SRQT_BASIC) {
++=======
+ 				srq = uobj_get_obj_read(srq, cmd->srq_handle,
+ 							file->ucontext);
+ 				if (!srq || srq->srq_type == IB_SRQT_XRC) {
++>>>>>>> 38eb44fac717 (IB/uverbs: Add new SRQ type IB_SRQT_TM)
  					ret = -EINVAL;
  					goto err_put;
  				}
@@@ -4012,18 -3476,26 +4018,21 @@@ static int __uverbs_create_xsrq(struct 
  	struct ib_srq_init_attr          attr;
  	int ret;
  
 -	obj  = (struct ib_usrq_object *)uobj_alloc(uobj_get_type(srq),
 -						   file->ucontext);
 -	if (IS_ERR(obj))
 -		return PTR_ERR(obj);
 +	obj = kmalloc(sizeof *obj, GFP_KERNEL);
 +	if (!obj)
 +		return -ENOMEM;
 +
 +	init_uobj(&obj->uevent.uobject, cmd->user_handle, file->ucontext, &srq_lock_class);
 +	down_write(&obj->uevent.uobject.mutex);
  
+ 	if (cmd->srq_type == IB_SRQT_TM)
+ 		attr.ext.tag_matching.max_num_tags = cmd->max_num_tags;
+ 
  	if (cmd->srq_type == IB_SRQT_XRC) {
 -		xrcd_uobj = uobj_get_read(uobj_get_type(xrcd), cmd->xrcd_handle,
 -					  file->ucontext);
 -		if (IS_ERR(xrcd_uobj)) {
 -			ret = -EINVAL;
 -			goto err;
 -		}
 -
 -		attr.ext.xrc.xrcd = (struct ib_xrcd *)xrcd_uobj->object;
 +		attr.ext.xrc.xrcd  = idr_read_xrcd(cmd->xrcd_handle, file->ucontext, &xrcd_uobj);
  		if (!attr.ext.xrc.xrcd) {
  			ret = -EINVAL;
 -			goto err_put_xrcd;
 +			goto err;
  		}
  
  		obj->uxrcd = container_of(xrcd_uobj, struct ib_uxrcd_object, uobject);
* Unmerged path drivers/infiniband/core/uverbs_cmd.c
