trace/kprobes: Allow return probes with offsets and absolute addresses

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
commit 35b6f55aa9ba65141f2def0997e23aab13715d3f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/35b6f55a.failed

Since the kernel includes many non-global functions with same names, we
will need to use offsets from other symbols (typically _text/_stext) or
absolute addresses to place return probes on specific functions. Also,
the core register_kretprobe() API never forbid use of offsets or
absolute addresses with kretprobes.

Allow its use with the trace infrastructure. To distinguish kernels that
support this, update ftrace README to explicitly call this out.

	Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
	Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Ananth N Mavinakayanahalli <ananth@linux.vnet.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Steven Rostedt <rostedt@goodmis.org>
	Cc: linuxppc-dev@lists.ozlabs.org
Link: http://lkml.kernel.org/r/183e7ce2921a08c9c755ee9a5da3134febc6695b.1487770934.git.naveen.n.rao@linux.vnet.ibm.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 35b6f55aa9ba65141f2def0997e23aab13715d3f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/trace.c
diff --cc kernel/trace/trace.c
index a14bc0a4b959,0ed834d6beb0..000000000000
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@@ -3613,17 -4326,139 +3613,77 @@@ static const char readme_msg[] 
  	"  max_graph_depth\t- Trace a limited depth of nested calls (0 is unlimited)\n"
  #endif
  #ifdef CONFIG_TRACER_SNAPSHOT
++<<<<<<< HEAD
 +	"\n  snapshot\t\t- Like 'trace' but shows the content of the static snapshot buffer\n"
 +	"\t\t\t  Read the contents for more information\n"
++=======
+ 	"\n  snapshot\t\t- Like 'trace' but shows the content of the static\n"
+ 	"\t\t\t  snapshot buffer. Read the contents for more\n"
+ 	"\t\t\t  information\n"
+ #endif
+ #ifdef CONFIG_STACK_TRACER
+ 	"  stack_trace\t\t- Shows the max stack trace when active\n"
+ 	"  stack_max_size\t- Shows current max stack size that was traced\n"
+ 	"\t\t\t  Write into this file to reset the max size (trigger a\n"
+ 	"\t\t\t  new trace)\n"
+ #ifdef CONFIG_DYNAMIC_FTRACE
+ 	"  stack_trace_filter\t- Like set_ftrace_filter but limits what stack_trace\n"
+ 	"\t\t\t  traces\n"
+ #endif
+ #endif /* CONFIG_STACK_TRACER */
+ #ifdef CONFIG_KPROBE_EVENTS
+ 	"  kprobe_events\t\t- Add/remove/show the kernel dynamic events\n"
+ 	"\t\t\t  Write into this file to define/undefine new trace events.\n"
+ #endif
+ #ifdef CONFIG_UPROBE_EVENTS
+ 	"  uprobe_events\t\t- Add/remove/show the userspace dynamic events\n"
+ 	"\t\t\t  Write into this file to define/undefine new trace events.\n"
+ #endif
+ #if defined(CONFIG_KPROBE_EVENTS) || defined(CONFIG_UPROBE_EVENTS)
+ 	"\t  accepts: event-definitions (one definition per line)\n"
+ 	"\t   Format: p|r[:[<group>/]<event>] <place> [<args>]\n"
+ 	"\t           -:[<group>/]<event>\n"
+ #ifdef CONFIG_KPROBE_EVENTS
+ 	"\t    place: [<module>:]<symbol>[+<offset>]|<memaddr>\n"
+   "place (kretprobe): [<module>:]<symbol>[+<offset>]|<memaddr>\n"
+ #endif
+ #ifdef CONFIG_UPROBE_EVENTS
+ 	"\t    place: <path>:<offset>\n"
+ #endif
+ 	"\t     args: <name>=fetcharg[:type]\n"
+ 	"\t fetcharg: %<register>, @<address>, @<symbol>[+|-<offset>],\n"
+ 	"\t           $stack<index>, $stack, $retval, $comm\n"
+ 	"\t     type: s8/16/32/64, u8/16/32/64, x8/16/32/64, string,\n"
+ 	"\t           b<bit-width>@<bit-offset>/<container-size>\n"
+ #endif
+ 	"  events/\t\t- Directory containing all trace event subsystems:\n"
+ 	"      enable\t\t- Write 0/1 to enable/disable tracing of all events\n"
+ 	"  events/<system>/\t- Directory containing all trace events for <system>:\n"
+ 	"      enable\t\t- Write 0/1 to enable/disable tracing of all <system>\n"
+ 	"\t\t\t  events\n"
+ 	"      filter\t\t- If set, only events passing filter are traced\n"
+ 	"  events/<system>/<event>/\t- Directory containing control files for\n"
+ 	"\t\t\t  <event>:\n"
+ 	"      enable\t\t- Write 0/1 to enable/disable tracing of <event>\n"
+ 	"      filter\t\t- If set, only events passing filter are traced\n"
+ 	"      trigger\t\t- If set, a command to perform when event is hit\n"
+ 	"\t    Format: <trigger>[:count][if <filter>]\n"
+ 	"\t   trigger: traceon, traceoff\n"
+ 	"\t            enable_event:<system>:<event>\n"
+ 	"\t            disable_event:<system>:<event>\n"
+ #ifdef CONFIG_HIST_TRIGGERS
+ 	"\t            enable_hist:<system>:<event>\n"
+ 	"\t            disable_hist:<system>:<event>\n"
++>>>>>>> 35b6f55aa9ba (trace/kprobes: Allow return probes with offsets and absolute addresses)
  #endif
  #ifdef CONFIG_STACKTRACE
 -	"\t\t    stacktrace\n"
 -#endif
 -#ifdef CONFIG_TRACER_SNAPSHOT
 -	"\t\t    snapshot\n"
 -#endif
 -#ifdef CONFIG_HIST_TRIGGERS
 -	"\t\t    hist (see below)\n"
 -#endif
 -	"\t   example: echo traceoff > events/block/block_unplug/trigger\n"
 -	"\t            echo traceoff:3 > events/block/block_unplug/trigger\n"
 -	"\t            echo 'enable_event:kmem:kmalloc:3 if nr_rq > 1' > \\\n"
 -	"\t                  events/block/block_unplug/trigger\n"
 -	"\t   The first disables tracing every time block_unplug is hit.\n"
 -	"\t   The second disables tracing the first 3 times block_unplug is hit.\n"
 -	"\t   The third enables the kmalloc event the first 3 times block_unplug\n"
 -	"\t     is hit and has value of greater than 1 for the 'nr_rq' event field.\n"
 -	"\t   Like function triggers, the counter is only decremented if it\n"
 -	"\t    enabled or disabled tracing.\n"
 -	"\t   To remove a trigger without a count:\n"
 -	"\t     echo '!<trigger> > <system>/<event>/trigger\n"
 -	"\t   To remove a trigger with a count:\n"
 -	"\t     echo '!<trigger>:0 > <system>/<event>/trigger\n"
 -	"\t   Filters can be ignored when removing a trigger.\n"
 -#ifdef CONFIG_HIST_TRIGGERS
 -	"      hist trigger\t- If set, event hits are aggregated into a hash table\n"
 -	"\t    Format: hist:keys=<field1[,field2,...]>\n"
 -	"\t            [:values=<field1[,field2,...]>]\n"
 -	"\t            [:sort=<field1[,field2,...]>]\n"
 -	"\t            [:size=#entries]\n"
 -	"\t            [:pause][:continue][:clear]\n"
 -	"\t            [:name=histname1]\n"
 -	"\t            [if <filter>]\n\n"
 -	"\t    When a matching event is hit, an entry is added to a hash\n"
 -	"\t    table using the key(s) and value(s) named, and the value of a\n"
 -	"\t    sum called 'hitcount' is incremented.  Keys and values\n"
 -	"\t    correspond to fields in the event's format description.  Keys\n"
 -	"\t    can be any field, or the special string 'stacktrace'.\n"
 -	"\t    Compound keys consisting of up to two fields can be specified\n"
 -	"\t    by the 'keys' keyword.  Values must correspond to numeric\n"
 -	"\t    fields.  Sort keys consisting of up to two fields can be\n"
 -	"\t    specified using the 'sort' keyword.  The sort direction can\n"
 -	"\t    be modified by appending '.descending' or '.ascending' to a\n"
 -	"\t    sort field.  The 'size' parameter can be used to specify more\n"
 -	"\t    or fewer than the default 2048 entries for the hashtable size.\n"
 -	"\t    If a hist trigger is given a name using the 'name' parameter,\n"
 -	"\t    its histogram data will be shared with other triggers of the\n"
 -	"\t    same name, and trigger hits will update this common data.\n\n"
 -	"\t    Reading the 'hist' file for the event will dump the hash\n"
 -	"\t    table in its entirety to stdout.  If there are multiple hist\n"
 -	"\t    triggers attached to an event, there will be a table for each\n"
 -	"\t    trigger in the output.  The table displayed for a named\n"
 -	"\t    trigger will be the same as any other instance having the\n"
 -	"\t    same name.  The default format used to display a given field\n"
 -	"\t    can be modified by appending any of the following modifiers\n"
 -	"\t    to the field name, as applicable:\n\n"
 -	"\t            .hex        display a number as a hex value\n"
 -	"\t            .sym        display an address as a symbol\n"
 -	"\t            .sym-offset display an address as a symbol and offset\n"
 -	"\t            .execname   display a common_pid as a program name\n"
 -	"\t            .syscall    display a syscall id as a syscall name\n\n"
 -	"\t            .log2       display log2 value rather than raw number\n\n"
 -	"\t    The 'pause' parameter can be used to pause an existing hist\n"
 -	"\t    trigger or to start a hist trigger but not log any events\n"
 -	"\t    until told to do so.  'continue' can be used to start or\n"
 -	"\t    restart a paused hist trigger.\n\n"
 -	"\t    The 'clear' parameter will clear the contents of a running\n"
 -	"\t    hist trigger and leave its current paused/active state\n"
 -	"\t    unchanged.\n\n"
 -	"\t    The enable_hist and disable_hist triggers can be used to\n"
 -	"\t    have one event conditionally start and stop another event's\n"
 -	"\t    already-attached hist trigger.  The syntax is analagous to\n"
 -	"\t    the enable_event and disable_event triggers.\n"
 +	"  stack_trace\t\t- Shows the max stack trace when active\n"
 +	"  stack_max_size\t- Shows current max stack size that was traced\n"
 +	"\t\t\t  Write into this file to reset the max size (trigger a new trace)\n"
 +#ifdef CONFIG_DYNAMIC_FTRACE
 +	"  stack_trace_filter\t- Like set_ftrace_filter but limits what stack_trace traces\n"
  #endif
 +#endif /* CONFIG_STACKTRACE */
  ;
  
  static ssize_t
* Unmerged path kernel/trace/trace.c
diff --git a/kernel/trace/trace_kprobe.c b/kernel/trace/trace_kprobe.c
index 50356290f72e..ba42e0019a83 100644
--- a/kernel/trace/trace_kprobe.c
+++ b/kernel/trace/trace_kprobe.c
@@ -756,10 +756,6 @@ static int create_trace_probe(int argc, char **argv)
 		return -EINVAL;
 	}
 	if (isdigit(argv[1][0])) {
-		if (is_return) {
-			pr_info("Return probe point must be a symbol.\n");
-			return -EINVAL;
-		}
 		/* an address specified */
 		ret = kstrtoul(&argv[1][0], 0, (unsigned long *)&addr);
 		if (ret) {
@@ -775,10 +771,6 @@ static int create_trace_probe(int argc, char **argv)
 			pr_info("Failed to parse symbol.\n");
 			return ret;
 		}
-		if (offset && is_return) {
-			pr_info("Return probe must be used without offset.\n");
-			return -EINVAL;
-		}
 	}
 	argc -= 2; argv += 2;
 
