net: sched: change return value of ndo_setup_tc for driver supporting mqprio only

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] sched: change return value of ndo_setup_tc for driver supporting mqprio only (Ivan Vecera) [1445420]
Rebuild_FUZZ: 96.82%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 38cf0426e5178b1c3810bb88e65dd23882e40283
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/38cf0426.failed

Change the return value from -EINVAL to -EOPNOTSUPP. The rest of the
drivers have it like that, so be aligned.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 38cf0426e5178b1c3810bb88e65dd23882e40283)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/amd/xgbe/xgbe-drv.c
#	drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
#	drivers/net/ethernet/hisilicon/hns3/hns3pf/hns3_enet.c
#	drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
#	drivers/net/ethernet/intel/i40e/i40e_main.c
#	drivers/net/ethernet/mellanox/mlx4/en_netdev.c
#	drivers/net/ethernet/sfc/falcon/tx.c
#	drivers/net/ethernet/sfc/tx.c
#	drivers/net/ethernet/ti/netcp_core.c
diff --cc drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index a01866542bfd,37d3e5b65d94..000000000000
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@@ -1858,10 -1924,11 +1858,15 @@@ static int xgbe_setup_tc(struct net_dev
  	struct xgbe_prv_data *pdata = netdev_priv(netdev);
  	u8 tc;
  
++<<<<<<< HEAD
 +	if (tc_to_netdev->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  
 -	tc_to_netdev->mqprio->hw = TC_MQPRIO_HW_OFFLOAD_TCS;
 -	tc = tc_to_netdev->mqprio->num_tc;
 +	tc = tc_to_netdev->tc;
  
  	if (tc > pdata->hw_feat.tc_cnt)
  		return -EINVAL;
diff --cc drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
index 4810103f310d,8687afc24698..000000000000
--- a/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
+++ b/drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
@@@ -4283,12 -4284,15 +4283,21 @@@ int bnx2x_setup_tc(struct net_device *d
  	return 0;
  }
  
 -int __bnx2x_setup_tc(struct net_device *dev, enum tc_setup_type type,
 +int __bnx2x_setup_tc(struct net_device *dev, u32 handle, __be16 proto,
  		     struct tc_to_netdev *tc)
  {
++<<<<<<< HEAD
 +	if (tc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
 +	return bnx2x_setup_tc(dev, tc->tc);
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
+ 
+ 	tc->mqprio->hw = TC_MQPRIO_HW_OFFLOAD_TCS;
+ 
+ 	return bnx2x_setup_tc(dev, tc->mqprio->num_tc);
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  }
  
  /* called with rtnl_lock */
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index bdacd982a1af,a78f72a53042..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -6715,13 -7237,15 +6715,18 @@@ int bnxt_setup_mq_tc(struct net_device 
  	return 0;
  }
  
 -static int bnxt_setup_tc(struct net_device *dev, enum tc_setup_type type,
 +static int bnxt_setup_tc(struct net_device *dev, u32 handle, __be16 proto,
  			 struct tc_to_netdev *ntc)
  {
++<<<<<<< HEAD
 +	if (ntc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  
 -	ntc->mqprio->hw = TC_MQPRIO_HW_OFFLOAD_TCS;
 -
 -	return bnxt_setup_mq_tc(dev, ntc->mqprio->num_tc);
 +	return bnxt_setup_mq_tc(dev, ntc->tc);
  }
  
  #ifdef CONFIG_RFS_ACCEL
diff --cc drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
index 4afd8bd1bd47,70888129200b..000000000000
--- a/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
+++ b/drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
@@@ -1236,16 -1265,17 +1236,21 @@@ err_queueing_scheme
  	return err;
  }
  
 -static int __fm10k_setup_tc(struct net_device *dev, enum tc_setup_type type,
 +static int __fm10k_setup_tc(struct net_device *dev, u32 handle, __be16 proto,
  			    struct tc_to_netdev *tc)
  {
++<<<<<<< HEAD
 +	if (tc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  
 -	tc->mqprio->hw = TC_MQPRIO_HW_OFFLOAD_TCS;
 -
 -	return fm10k_setup_tc(dev, tc->mqprio->num_tc);
 +	return fm10k_setup_tc(dev, tc->tc);
  }
  
 +#if 0
  static void fm10k_assign_l2_accel(struct fm10k_intfc *interface,
  				  struct fm10k_l2_accel *l2_accel)
  {
diff --cc drivers/net/ethernet/intel/i40e/i40e_main.c
index 807f35d0c136,1f4633830c79..000000000000
--- a/drivers/net/ethernet/intel/i40e/i40e_main.c
+++ b/drivers/net/ethernet/intel/i40e/i40e_main.c
@@@ -5610,17 -5656,15 +5610,26 @@@ exit
  	return ret;
  }
  
 -static int __i40e_setup_tc(struct net_device *netdev, enum tc_setup_type type,
 +#ifdef I40E_FCOE
 +int __i40e_setup_tc(struct net_device *netdev, u32 handle, __be16 proto,
 +		    struct tc_to_netdev *tc)
 +#else
 +static int __i40e_setup_tc(struct net_device *netdev, u32 handle, __be16 proto,
  			   struct tc_to_netdev *tc)
 +#endif
  {
++<<<<<<< HEAD
 +	if (handle != TC_H_ROOT || tc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
 +	return i40e_setup_tc(netdev, tc->tc);
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
+ 
+ 	tc->mqprio->hw = TC_MQPRIO_HW_OFFLOAD_TCS;
+ 
+ 	return i40e_setup_tc(netdev, tc->mqprio->num_tc);
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  }
  
  /**
diff --cc drivers/net/ethernet/mellanox/mlx4/en_netdev.c
index 76d984cbb6d9,1667e86ac05d..000000000000
--- a/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
@@@ -82,13 -86,62 +82,18 @@@ int mlx4_en_setup_tc(struct net_device 
  	return 0;
  }
  
 -int mlx4_en_alloc_tx_queue_per_tc(struct net_device *dev, u8 tc)
 -{
 -	struct mlx4_en_priv *priv = netdev_priv(dev);
 -	struct mlx4_en_dev *mdev = priv->mdev;
 -	struct mlx4_en_port_profile new_prof;
 -	struct mlx4_en_priv *tmp;
 -	int port_up = 0;
 -	int err = 0;
 -
 -	tmp = kzalloc(sizeof(*tmp), GFP_KERNEL);
 -	if (!tmp)
 -		return -ENOMEM;
 -
 -	mutex_lock(&mdev->state_lock);
 -	memcpy(&new_prof, priv->prof, sizeof(struct mlx4_en_port_profile));
 -	new_prof.num_up = (tc == 0) ? MLX4_EN_NUM_UP_LOW :
 -				      MLX4_EN_NUM_UP_HIGH;
 -	new_prof.tx_ring_num[TX] = new_prof.num_tx_rings_p_up *
 -				   new_prof.num_up;
 -	err = mlx4_en_try_alloc_resources(priv, tmp, &new_prof, true);
 -	if (err)
 -		goto out;
 -
 -	if (priv->port_up) {
 -		port_up = 1;
 -		mlx4_en_stop_port(dev, 1);
 -	}
 -
 -	mlx4_en_safe_replace_resources(priv, tmp);
 -	if (port_up) {
 -		err = mlx4_en_start_port(dev);
 -		if (err) {
 -			en_err(priv, "Failed starting port for setup TC\n");
 -			goto out;
 -		}
 -	}
 -
 -	err = mlx4_en_setup_tc(dev, tc);
 -out:
 -	mutex_unlock(&mdev->state_lock);
 -	kfree(tmp);
 -	return err;
 -}
 -
 -static int __mlx4_en_setup_tc(struct net_device *dev, enum tc_setup_type type,
 +static int __mlx4_en_setup_tc(struct net_device *dev, u32 handle, __be16 proto,
  			      struct tc_to_netdev *tc)
  {
++<<<<<<< HEAD
 +	if (tc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  
 -	if (tc->mqprio->num_tc && tc->mqprio->num_tc != MLX4_EN_NUM_UP_HIGH)
 -		return -EINVAL;
 -
 -	tc->mqprio->hw = TC_MQPRIO_HW_OFFLOAD_TCS;
 -
 -	return mlx4_en_alloc_tx_queue_per_tc(dev, tc->mqprio->num_tc);
 +	return mlx4_en_setup_tc(dev, tc->tc);
  }
  
  #ifdef CONFIG_RFS_ACCEL
diff --cc drivers/net/ethernet/sfc/falcon/tx.c
index 104fb15a73f2,0f125e15143a..000000000000
--- a/drivers/net/ethernet/sfc/falcon/tx.c
+++ b/drivers/net/ethernet/sfc/falcon/tx.c
@@@ -434,10 -434,10 +434,15 @@@ int ef4_setup_tc(struct net_device *net
  	unsigned tc, num_tc;
  	int rc;
  
++<<<<<<< HEAD
 +	if (ntc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  
 -	num_tc = ntc->mqprio->num_tc;
 +	num_tc = ntc->tc;
  
  	if (ef4_nic_rev(efx) < EF4_REV_FALCON_B0 || num_tc > EF4_MAX_TX_TC)
  		return -EINVAL;
diff --cc drivers/net/ethernet/sfc/tx.c
index ff88d60aa6d5,53ba30c3eb7b..000000000000
--- a/drivers/net/ethernet/sfc/tx.c
+++ b/drivers/net/ethernet/sfc/tx.c
@@@ -662,10 -662,10 +662,15 @@@ int efx_setup_tc(struct net_device *net
  	unsigned tc, num_tc;
  	int rc;
  
++<<<<<<< HEAD
 +	if (ntc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
++=======
+ 	if (type != TC_SETUP_MQPRIO)
+ 		return -EOPNOTSUPP;
++>>>>>>> 38cf0426e517 (net: sched: change return value of ndo_setup_tc for driver supporting mqprio only)
  
 -	num_tc = ntc->mqprio->num_tc;
 +	num_tc = ntc->tc;
  
  	if (num_tc > EFX_MAX_TX_TC)
  		return -EINVAL;
* Unmerged path drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3pf/hns3_enet.c
* Unmerged path drivers/net/ethernet/ti/netcp_core.c
* Unmerged path drivers/net/ethernet/amd/xgbe/xgbe-drv.c
* Unmerged path drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/freescale/dpaa/dpaa_eth.c
* Unmerged path drivers/net/ethernet/hisilicon/hns3/hns3pf/hns3_enet.c
* Unmerged path drivers/net/ethernet/intel/fm10k/fm10k_netdev.c
* Unmerged path drivers/net/ethernet/intel/i40e/i40e_main.c
* Unmerged path drivers/net/ethernet/mellanox/mlx4/en_netdev.c
* Unmerged path drivers/net/ethernet/sfc/falcon/tx.c
* Unmerged path drivers/net/ethernet/sfc/tx.c
* Unmerged path drivers/net/ethernet/ti/netcp_core.c
