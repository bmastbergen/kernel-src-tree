net, sched: add skb_at_tc_ingress helper

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] sched: add skb_at_tc_ingress helper (Ivan Vecera) [1445420]
Rebuild_FUZZ: 93.33%
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit fdc5432a7b44ab7de17141beec19d946b9344e91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/fdc5432a.failed

Add a skb_at_tc_ingress() as this will be needed elsewhere as well and
can hide the ugly ifdef.

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit fdc5432a7b44ab7de17141beec19d946b9344e91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_bpf.c
diff --cc net/sched/cls_bpf.c
index c13fb5505297,b3c8bb4aeef5..000000000000
--- a/net/sched/cls_bpf.c
+++ b/net/sched/cls_bpf.c
@@@ -53,11 -79,38 +53,16 @@@ static int cls_bpf_classify(struct sk_b
  			    struct tcf_result *res)
  {
  	struct cls_bpf_head *head = rcu_dereference_bh(tp->root);
+ 	bool at_ingress = skb_at_tc_ingress(skb);
  	struct cls_bpf_prog *prog;
++<<<<<<< HEAD
 +	int ret;
++=======
+ 	int ret = -1;
++>>>>>>> fdc5432a7b44 (net, sched: add skb_at_tc_ingress helper)
  
 -	if (unlikely(!skb_mac_header_was_set(skb)))
 -		return -1;
 -
 -	/* Needed here for accessing maps. */
 -	rcu_read_lock();
  	list_for_each_entry_rcu(prog, &head->plist, link) {
 -		int filter_res;
 -
 -		qdisc_skb_cb(skb)->tc_classid = prog->res.classid;
 -
 -		if (at_ingress) {
 -			/* It is safe to push/pull even if skb_shared() */
 -			__skb_push(skb, skb->mac_len);
 -			filter_res = BPF_PROG_RUN(prog->filter, skb);
 -			__skb_pull(skb, skb->mac_len);
 -		} else {
 -			filter_res = BPF_PROG_RUN(prog->filter, skb);
 -		}
 -
 -		if (prog->exts_integrated) {
 -			res->class = prog->res.class;
 -			res->classid = qdisc_skb_cb(skb)->tc_classid;
 -
 -			ret = cls_bpf_exec_opcode(filter_res);
 -			if (ret == TC_ACT_UNSPEC)
 -				continue;
 -			break;
 -		}
 +		int filter_res = SK_RUN_FILTER(prog->filter, skb);
  
  		if (filter_res == 0)
  			continue;
diff --git a/include/net/sch_generic.h b/include/net/sch_generic.h
index 32bc1a5c6d5a..c3c011f77a3d 100644
--- a/include/net/sch_generic.h
+++ b/include/net/sch_generic.h
@@ -420,6 +420,15 @@ void __qdisc_calculate_pkt_len(struct sk_buff *skb,
 bool tcf_destroy(struct tcf_proto *tp, bool force);
 void tcf_destroy_chain(struct tcf_proto __rcu **fl);
 
+static inline bool skb_at_tc_ingress(const struct sk_buff *skb)
+{
+#ifdef CONFIG_NET_CLS_ACT
+	return G_TC_AT(skb->tc_verd) & AT_INGRESS;
+#else
+	return false;
+#endif
+}
+
 /* Reset all TX qdiscs greater then index of a device.  */
 static inline void qdisc_reset_all_tx_gt(struct net_device *dev, unsigned int i)
 {
* Unmerged path net/sched/cls_bpf.c
