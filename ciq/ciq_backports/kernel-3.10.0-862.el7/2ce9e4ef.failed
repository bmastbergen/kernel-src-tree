ibmvnic: Send gratuitous arp on reset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author John Allen <jallen@linux.vnet.ibm.com>
commit 2ce9e4efbf4289ce48144ec4986f58033890fb6d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2ce9e4ef.failed

Send gratuitous arp after any reset.

	Signed-off-by: John Allen <jallen@linux.vnet.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 2ce9e4efbf4289ce48144ec4986f58033890fb6d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/ibm/ibmvnic.c
diff --cc drivers/net/ethernet/ibm/ibmvnic.c
index 0a15141d22b3,465a8fafd95b..000000000000
--- a/drivers/net/ethernet/ibm/ibmvnic.c
+++ b/drivers/net/ethernet/ibm/ibmvnic.c
@@@ -944,15 -1202,180 +944,19 @@@ static int ibmvnic_set_mac(struct net_d
  	return 0;
  }
  
 -/**
 - * do_reset returns zero if we are able to keep processing reset events, or
 - * non-zero if we hit a fatal error and must halt.
 - */
 -static int do_reset(struct ibmvnic_adapter *adapter,
 -		    struct ibmvnic_rwi *rwi, u32 reset_state)
 -{
 -	struct net_device *netdev = adapter->netdev;
 -	int i, rc;
 -
 -	netif_carrier_off(netdev);
 -	adapter->reset_reason = rwi->reset_reason;
 -
 -	if (rwi->reset_reason == VNIC_RESET_MOBILITY) {
 -		rc = ibmvnic_reenable_crq_queue(adapter);
 -		if (rc)
 -			return 0;
 -	}
 -
 -	rc = __ibmvnic_close(netdev);
 -	if (rc)
 -		return rc;
 -
 -	/* remove the closed state so when we call open it appears
 -	 * we are coming from the probed state.
 -	 */
 -	adapter->state = VNIC_PROBED;
 -
 -	release_resources(adapter);
 -	release_sub_crqs(adapter);
 -	release_crq_queue(adapter);
 -
 -	rc = ibmvnic_init(adapter);
 -	if (rc)
 -		return 0;
 -
 -	/* If the adapter was in PROBE state prior to the reset, exit here. */
 -	if (reset_state == VNIC_PROBED)
 -		return 0;
 -
 -	rc = ibmvnic_login(netdev);
 -	if (rc) {
 -		adapter->state = VNIC_PROBED;
 -		return 0;
 -	}
 -
 -	rtnl_lock();
 -	rc = init_resources(adapter);
 -	rtnl_unlock();
 -	if (rc)
 -		return rc;
 -
 -	if (reset_state == VNIC_CLOSED)
 -		return 0;
 -
 -	rc = __ibmvnic_open(netdev);
 -	if (rc) {
 -		if (list_empty(&adapter->rwi_list))
 -			adapter->state = VNIC_CLOSED;
 -		else
 -			adapter->state = reset_state;
 -
 -		return 0;
 -	}
 -
 -	netif_carrier_on(netdev);
 -
 -	/* kick napi */
 -	for (i = 0; i < adapter->req_rx_queues; i++)
 -		napi_schedule(&adapter->napi[i]);
 -
 -	netdev_notify_peers(netdev);
 -	return 0;
 -}
 -
 -static struct ibmvnic_rwi *get_next_rwi(struct ibmvnic_adapter *adapter)
 -{
 -	struct ibmvnic_rwi *rwi;
 -
 -	mutex_lock(&adapter->rwi_lock);
 -
 -	if (!list_empty(&adapter->rwi_list)) {
 -		rwi = list_first_entry(&adapter->rwi_list, struct ibmvnic_rwi,
 -				       list);
 -		list_del(&rwi->list);
 -	} else {
 -		rwi = NULL;
 -	}
 -
 -	mutex_unlock(&adapter->rwi_lock);
 -	return rwi;
 -}
 -
 -static void free_all_rwi(struct ibmvnic_adapter *adapter)
 -{
 -	struct ibmvnic_rwi *rwi;
 -
 -	rwi = get_next_rwi(adapter);
 -	while (rwi) {
 -		kfree(rwi);
 -		rwi = get_next_rwi(adapter);
 -	}
 -}
 -
 -static void __ibmvnic_reset(struct work_struct *work)
 -{
 -	struct ibmvnic_rwi *rwi;
 -	struct ibmvnic_adapter *adapter;
 -	struct net_device *netdev;
 -	u32 reset_state;
 -	int rc;
 -
 -	adapter = container_of(work, struct ibmvnic_adapter, ibmvnic_reset);
 -	netdev = adapter->netdev;
 -
 -	mutex_lock(&adapter->reset_lock);
 -	adapter->resetting = true;
 -	reset_state = adapter->state;
 -
 -	rwi = get_next_rwi(adapter);
 -	while (rwi) {
 -		rc = do_reset(adapter, rwi, reset_state);
 -		kfree(rwi);
 -		if (rc)
 -			break;
 -
 -		rwi = get_next_rwi(adapter);
 -	}
 -
 -	if (rc) {
 -		free_all_rwi(adapter);
 -		mutex_unlock(&adapter->reset_lock);
 -		return;
 -	}
 -
 -	adapter->resetting = false;
 -	mutex_unlock(&adapter->reset_lock);
 -}
 -
 -static void ibmvnic_reset(struct ibmvnic_adapter *adapter,
 -			  enum ibmvnic_reset_reason reason)
 +static int ibmvnic_change_mtu(struct net_device *netdev, int new_mtu)
  {
 -	struct ibmvnic_rwi *rwi, *tmp;
 -	struct net_device *netdev = adapter->netdev;
 -	struct list_head *entry;
 -
 -	if (adapter->state == VNIC_REMOVING ||
 -	    adapter->state == VNIC_REMOVED) {
 -		netdev_dbg(netdev, "Adapter removing, skipping reset\n");
 -		return;
 -	}
 -
 -	mutex_lock(&adapter->rwi_lock);
 -
 -	list_for_each(entry, &adapter->rwi_list) {
 -		tmp = list_entry(entry, struct ibmvnic_rwi, list);
 -		if (tmp->reset_reason == reason) {
 -			netdev_err(netdev, "Matching reset found, skipping\n");
 -			mutex_unlock(&adapter->rwi_lock);
 -			return;
 -		}
 -	}
 +	struct ibmvnic_adapter *adapter = netdev_priv(netdev);
  
 -	rwi = kzalloc(sizeof(*rwi), GFP_KERNEL);
 -	if (!rwi) {
 -		mutex_unlock(&adapter->rwi_lock);
 -		ibmvnic_close(netdev);
 -		return;
 -	}
 +	if (new_mtu > adapter->req_mtu || new_mtu < adapter->min_mtu)
 +		return -EINVAL;
  
 -	rwi->reset_reason = reason;
 -	list_add_tail(&rwi->list, &adapter->rwi_list);
 -	mutex_unlock(&adapter->rwi_lock);
 -	schedule_work(&adapter->ibmvnic_reset);
++<<<<<<< HEAD
 +	netdev->mtu = new_mtu;
++=======
++	netdev_notify_peers(netdev);
++>>>>>>> 2ce9e4efbf42 (ibmvnic: Send gratuitous arp on reset)
 +	return 0;
  }
  
  static void ibmvnic_tx_timeout(struct net_device *dev)
* Unmerged path drivers/net/ethernet/ibm/ibmvnic.c
