netvsc: fix deadlock betwen link status and removal

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author stephen hemminger <stephen@networkplumber.org>
commit 9b4e946ce14e20d7addbfb7d9139e604f9fda107
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9b4e946c.failed

There is a deadlock possible when canceling the link status
delayed work queue. The removal process is run with RTNL held,
and the link status callback is acquring RTNL.

Resolve the issue by using trylock and rescheduling.
If cancel is in process, that block it from happening.

Fixes: 122a5f6410f4 ("staging: hv: use delayed_work for netvsc_send_garp()")
	Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9b4e946ce14e20d7addbfb7d9139e604f9fda107)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index 5103dca8a92e,d91cbc6c3ca4..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -1219,11 -1269,16 +1219,22 @@@ static void netvsc_link_change(struct w
  	bool notify = false, reschedule = false;
  	unsigned long flags, next_reconfig, delay;
  
++<<<<<<< HEAD
 +	rtnl_lock();
 +	if (ndev_ctx->start_remove)
++=======
+ 	/* if changes are happening, comeback later */
+ 	if (!rtnl_trylock()) {
+ 		schedule_delayed_work(&ndev_ctx->dwork, LINKCHANGE_INT);
+ 		return;
+ 	}
+ 
+ 	net_device = rtnl_dereference(ndev_ctx->nvdev);
+ 	if (!net_device)
++>>>>>>> 9b4e946ce14e (netvsc: fix deadlock betwen link status and removal)
  		goto out_unlock;
  
 +	net_device = ndev_ctx->nvdev;
  	rdev = net_device->extension;
  
  	next_reconfig = ndev_ctx->last_reconfig + LINKCHANGE_INT;
* Unmerged path drivers/net/hyperv/netvsc_drv.c
