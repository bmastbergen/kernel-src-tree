net/mlx5e: IPoIB, RSS flow steering tables

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: IPoIB, RSS flow steering tables (Don Dutile) [1385325 1499362]
Rebuild_FUZZ: 95.00%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit bc81b9d3267c4d23d829e9af88b21eb46d9d388b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/bc81b9d3.failed

Like the mlx5e ethernet mode, on IPoIB mode we need to create RX steering
tables, but IPoIB do not require MAC and VLAN steering tables so the
only tables we create in here are:
1. TTC Table (Traffic Type Classifier table for RSS steering)
2. ARFS Table (for accelerated RFS support)

Creation of those tables is identical to mlx5e ethernet mode, hence the
use of mlx5e_create_ttc_table and mlx5e_arfs_create_tables.

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Erez Shitrit <erezsh@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit bc81b9d3267c4d23d829e9af88b21eb46d9d388b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en.h
#	drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en.h
index f6e3d4bf0928,c813eab5d764..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en.h
@@@ -903,10 -999,21 +903,27 @@@ int mlx5e_attr_get(struct net_device *d
  void mlx5e_handle_rx_cqe_rep(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
  void mlx5e_update_hw_rep_counters(struct mlx5e_priv *priv);
  
++<<<<<<< HEAD
++=======
+ /* common netdev helpers */
+ int mlx5e_create_indirect_rqt(struct mlx5e_priv *priv);
+ 
+ int mlx5e_create_indirect_tirs(struct mlx5e_priv *priv);
+ void mlx5e_destroy_indirect_tirs(struct mlx5e_priv *priv);
+ 
++>>>>>>> bc81b9d3267c (net/mlx5e: IPoIB, RSS flow steering tables)
  int mlx5e_create_direct_rqts(struct mlx5e_priv *priv);
 -void mlx5e_destroy_direct_rqts(struct mlx5e_priv *priv);
 +void mlx5e_destroy_rqt(struct mlx5e_priv *priv, struct mlx5e_rqt *rqt);
  int mlx5e_create_direct_tirs(struct mlx5e_priv *priv);
  void mlx5e_destroy_direct_tirs(struct mlx5e_priv *priv);
++<<<<<<< HEAD
++=======
+ void mlx5e_destroy_rqt(struct mlx5e_priv *priv, struct mlx5e_rqt *rqt);
+ 
+ int mlx5e_create_ttc_table(struct mlx5e_priv *priv, u32 underlay_qpn);
+ void mlx5e_destroy_ttc_table(struct mlx5e_priv *priv);
+ 
++>>>>>>> bc81b9d3267c (net/mlx5e: IPoIB, RSS flow steering tables)
  int mlx5e_create_tises(struct mlx5e_priv *priv);
  void mlx5e_cleanup_nic_tx(struct mlx5e_priv *priv);
  int mlx5e_close(struct net_device *netdev);
diff --cc drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
index 2f65927a8d03,e16e1c7b246e..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
@@@ -65,14 -72,89 +65,97 @@@ static void mlx5i_cleanup_tx(struct mlx
  {
  }
  
+ static int mlx5i_create_flow_steering(struct mlx5e_priv *priv)
+ {
+ 	struct mlx5i_priv *ipriv = priv->ppriv;
+ 	int err;
+ 
+ 	priv->fs.ns = mlx5_get_flow_namespace(priv->mdev,
+ 					       MLX5_FLOW_NAMESPACE_KERNEL);
+ 
+ 	if (!priv->fs.ns)
+ 		return -EINVAL;
+ 
+ 	err = mlx5e_arfs_create_tables(priv);
+ 	if (err) {
+ 		netdev_err(priv->netdev, "Failed to create arfs tables, err=%d\n",
+ 			   err);
+ 		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
+ 	}
+ 
+ 	err = mlx5e_create_ttc_table(priv, ipriv->qp.qpn);
+ 	if (err) {
+ 		netdev_err(priv->netdev, "Failed to create ttc table, err=%d\n",
+ 			   err);
+ 		goto err_destroy_arfs_tables;
+ 	}
+ 
+ 	return 0;
+ 
+ err_destroy_arfs_tables:
+ 	mlx5e_arfs_destroy_tables(priv);
+ 
+ 	return err;
+ }
+ 
+ static void mlx5i_destroy_flow_steering(struct mlx5e_priv *priv)
+ {
+ 	mlx5e_destroy_ttc_table(priv);
+ 	mlx5e_arfs_destroy_tables(priv);
+ }
+ 
  static int mlx5i_init_rx(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
 +	/* TODO: create IPoIB RX HW steering contexts */
 +	return 0;
++=======
+ 	int err;
+ 
+ 	err = mlx5e_create_indirect_rqt(priv);
+ 	if (err)
+ 		return err;
+ 
+ 	err = mlx5e_create_direct_rqts(priv);
+ 	if (err)
+ 		goto err_destroy_indirect_rqts;
+ 
+ 	err = mlx5e_create_indirect_tirs(priv);
+ 	if (err)
+ 		goto err_destroy_direct_rqts;
+ 
+ 	err = mlx5e_create_direct_tirs(priv);
+ 	if (err)
+ 		goto err_destroy_indirect_tirs;
+ 
+ 	err = mlx5i_create_flow_steering(priv);
+ 	if (err)
+ 		goto err_destroy_direct_tirs;
+ 
+ 	return 0;
+ 
+ err_destroy_direct_tirs:
+ 	mlx5e_destroy_direct_tirs(priv);
+ err_destroy_indirect_tirs:
+ 	mlx5e_destroy_indirect_tirs(priv);
+ err_destroy_direct_rqts:
+ 	mlx5e_destroy_direct_rqts(priv);
+ err_destroy_indirect_rqts:
+ 	mlx5e_destroy_rqt(priv, &priv->indir_rqt);
+ 	return err;
++>>>>>>> bc81b9d3267c (net/mlx5e: IPoIB, RSS flow steering tables)
  }
  
  static void mlx5i_cleanup_rx(struct mlx5e_priv *priv)
  {
++<<<<<<< HEAD
++=======
+ 	mlx5i_destroy_flow_steering(priv);
+ 	mlx5e_destroy_direct_tirs(priv);
+ 	mlx5e_destroy_indirect_tirs(priv);
+ 	mlx5e_destroy_direct_rqts(priv);
+ 	mlx5e_destroy_rqt(priv, &priv->indir_rqt);
++>>>>>>> bc81b9d3267c (net/mlx5e: IPoIB, RSS flow steering tables)
  }
  
  static const struct mlx5e_profile mlx5i_nic_profile = {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
index 729904c43801..576d6787b484 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_fs.c
@@ -792,7 +792,7 @@ err:
 	return err;
 }
 
-static void mlx5e_destroy_ttc_table(struct mlx5e_priv *priv)
+void mlx5e_destroy_ttc_table(struct mlx5e_priv *priv)
 {
 	struct mlx5e_ttc_table *ttc = &priv->fs.ttc;
 
@@ -800,7 +800,7 @@ static void mlx5e_destroy_ttc_table(struct mlx5e_priv *priv)
 	mlx5e_destroy_flow_table(&ttc->ft);
 }
 
-static int mlx5e_create_ttc_table(struct mlx5e_priv *priv)
+int mlx5e_create_ttc_table(struct mlx5e_priv *priv, u32 underlay_qpn)
 {
 	struct mlx5e_ttc_table *ttc = &priv->fs.ttc;
 	struct mlx5_flow_table_attr ft_attr = {};
@@ -810,6 +810,7 @@ static int mlx5e_create_ttc_table(struct mlx5e_priv *priv)
 	ft_attr.max_fte = MLX5E_TTC_TABLE_SIZE;
 	ft_attr.level = MLX5E_TTC_FT_LEVEL;
 	ft_attr.prio = MLX5E_NIC_PRIO;
+	ft_attr.underlay_qpn = underlay_qpn;
 
 	ft->t = mlx5_create_flow_table(priv->fs.ns, &ft_attr);
 	if (IS_ERR(ft->t)) {
@@ -1146,7 +1147,7 @@ int mlx5e_create_flow_steering(struct mlx5e_priv *priv)
 		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
 	}
 
-	err = mlx5e_create_ttc_table(priv);
+	err = mlx5e_create_ttc_table(priv, 0);
 	if (err) {
 		netdev_err(priv->netdev, "Failed to create ttc table, err=%d\n",
 			   err);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
