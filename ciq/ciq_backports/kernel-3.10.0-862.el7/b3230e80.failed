pNFS: Ensure we check layout segment validity in the pg_init() callback

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit b3230e80a6d115d2eb50fe3f4794ad04d84766de
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b3230e80.failed

If we have a layout segment cached in pgio->pg_lseg, we should check it
for validity before reusing it in a new RPC request. Otherwise, if we
recoalesce, we can end up looping forever.

	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit b3230e80a6d115d2eb50fe3f4794ad04d84766de)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/pnfs.c
diff --cc fs/nfs/pnfs.c
index d74b5e4a8e21,634adb3f8524..000000000000
--- a/fs/nfs/pnfs.c
+++ b/fs/nfs/pnfs.c
@@@ -2066,25 -2072,23 +2066,40 @@@ void pnfs_error_mark_layout_for_return(
  }
  EXPORT_SYMBOL_GPL(pnfs_error_mark_layout_for_return);
  
 +/*
 + * Check for any intersection between the request and the pgio->pg_lseg,
 + * and if none, put this pgio->pg_lseg away.
 + */
 +static void
 +pnfs_generic_pg_check_range(struct nfs_pageio_descriptor *pgio, struct nfs_page *req)
 +{
 +	if (pgio->pg_lseg && !pnfs_lseg_request_intersecting(pgio->pg_lseg, req)) {
 +		pnfs_put_lseg(pgio->pg_lseg);
 +		pgio->pg_lseg = NULL;
 +	}
 +}
 +
+ void
+ pnfs_generic_pg_check_layout(struct nfs_pageio_descriptor *pgio)
+ {
+ 	if (pgio->pg_lseg == NULL ||
+ 	    test_bit(NFS_LSEG_VALID, &pgio->pg_lseg->pls_flags))
+ 		return;
+ 	pnfs_put_lseg(pgio->pg_lseg);
+ 	pgio->pg_lseg = NULL;
+ }
+ EXPORT_SYMBOL_GPL(pnfs_generic_pg_check_layout);
+ 
  void
  pnfs_generic_pg_init_read(struct nfs_pageio_descriptor *pgio, struct nfs_page *req)
  {
  	u64 rd_size = req->wb_bytes;
  
++<<<<<<< HEAD
 +	pnfs_generic_pg_check_range(pgio, req);
++=======
+ 	pnfs_generic_pg_check_layout(pgio);
++>>>>>>> b3230e80a6d1 (pNFS: Ensure we check layout segment validity in the pg_init() callback)
  	if (pgio->pg_lseg == NULL) {
  		if (pgio->pg_dreq == NULL)
  			rd_size = i_size_read(pgio->pg_inode) - req_offset(req);
@@@ -2115,7 -2119,7 +2130,11 @@@ voi
  pnfs_generic_pg_init_write(struct nfs_pageio_descriptor *pgio,
  			   struct nfs_page *req, u64 wb_size)
  {
++<<<<<<< HEAD
 +	pnfs_generic_pg_check_range(pgio, req);
++=======
+ 	pnfs_generic_pg_check_layout(pgio);
++>>>>>>> b3230e80a6d1 (pNFS: Ensure we check layout segment validity in the pg_init() callback)
  	if (pgio->pg_lseg == NULL) {
  		pgio->pg_lseg = pnfs_update_layout(pgio->pg_inode,
  						   req->wb_context,
diff --git a/fs/nfs/filelayout/filelayout.c b/fs/nfs/filelayout/filelayout.c
index 5eb597e40ead..cc870872ff97 100644
--- a/fs/nfs/filelayout/filelayout.c
+++ b/fs/nfs/filelayout/filelayout.c
@@ -891,6 +891,7 @@ static void
 filelayout_pg_init_read(struct nfs_pageio_descriptor *pgio,
 			struct nfs_page *req)
 {
+	pnfs_generic_pg_check_layout(pgio);
 	if (!pgio->pg_lseg) {
 		pgio->pg_lseg = pnfs_update_layout(pgio->pg_inode,
 					   req->wb_context,
@@ -917,6 +918,7 @@ filelayout_pg_init_write(struct nfs_pageio_descriptor *pgio,
 	struct nfs_commit_info cinfo;
 	int status;
 
+	pnfs_generic_pg_check_layout(pgio);
 	if (!pgio->pg_lseg) {
 		pgio->pg_lseg = pnfs_update_layout(pgio->pg_inode,
 					   req->wb_context,
diff --git a/fs/nfs/flexfilelayout/flexfilelayout.c b/fs/nfs/flexfilelayout/flexfilelayout.c
index d274963fa7cc..f76bafece5e2 100644
--- a/fs/nfs/flexfilelayout/flexfilelayout.c
+++ b/fs/nfs/flexfilelayout/flexfilelayout.c
@@ -839,6 +839,7 @@ ff_layout_pg_init_read(struct nfs_pageio_descriptor *pgio,
 	int ds_idx;
 
 retry:
+	pnfs_generic_pg_check_layout(pgio);
 	/* Use full layout for now */
 	if (!pgio->pg_lseg)
 		ff_layout_pg_get_read(pgio, req, false);
@@ -887,6 +888,7 @@ ff_layout_pg_init_write(struct nfs_pageio_descriptor *pgio,
 	int status;
 
 retry:
+	pnfs_generic_pg_check_layout(pgio);
 	if (!pgio->pg_lseg) {
 		pgio->pg_lseg = pnfs_update_layout(pgio->pg_inode,
 						   req->wb_context,
* Unmerged path fs/nfs/pnfs.c
diff --git a/fs/nfs/pnfs.h b/fs/nfs/pnfs.h
index 65dbdbc226e1..ea80e6d88dc9 100644
--- a/fs/nfs/pnfs.h
+++ b/fs/nfs/pnfs.h
@@ -239,6 +239,7 @@ void pnfs_put_lseg_locked(struct pnfs_layout_segment *lseg);
 
 void set_pnfs_layoutdriver(struct nfs_server *, const struct nfs_fh *, struct nfs_fsinfo *);
 void unset_pnfs_layoutdriver(struct nfs_server *);
+void pnfs_generic_pg_check_layout(struct nfs_pageio_descriptor *pgio);
 void pnfs_generic_pg_init_read(struct nfs_pageio_descriptor *, struct nfs_page *);
 int pnfs_generic_pg_readpages(struct nfs_pageio_descriptor *desc);
 void pnfs_generic_pg_init_write(struct nfs_pageio_descriptor *pgio,
