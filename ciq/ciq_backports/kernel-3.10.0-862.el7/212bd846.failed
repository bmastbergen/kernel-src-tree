genirq/affinity: Handle pre/post vectors in irq_calc_affinity_vectors()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 212bd846223c718b6577d4df16fd8d05a55ad914
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/212bd846.failed

Only calculate the affinity for the main I/O vectors, and skip the pre or
post vectors specified by struct irq_affinity.

Also remove the irq_affinity cpumask argument that has never been used.  If
we ever need it in the future we can pass it through struct irq_affinity.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Acked-by: Jens Axboe <axboe@kernel.dk>
	Cc: linux-block@vger.kernel.org
	Cc: linux-pci@vger.kernel.org
Link: http://lkml.kernel.org/r/1478654107-7384-3-git-send-email-hch@lst.de
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit 212bd846223c718b6577d4df16fd8d05a55ad914)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/msi.c
#	include/linux/interrupt.h
#	kernel/irq/affinity.c
diff --cc drivers/pci/msi.c
index a0b55b8fc002,dad2da7cf80e..000000000000
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@@ -1068,25 -1058,11 +1068,30 @@@ int pci_msi_enabled(void
  }
  EXPORT_SYMBOL(pci_msi_enabled);
  
 -static int __pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec,
 -		unsigned int flags)
 +void pci_msi_init_pci_dev(struct pci_dev *dev)
 +{
 +	INIT_LIST_HEAD(&dev->msi_list);
 +}
 +
 +/**
 + * pci_enable_msi_range - configure device's MSI capability structure
 + * @dev: device to configure
 + * @minvec: minimal number of interrupts to configure
 + * @maxvec: maximum number of interrupts to configure
 + *
 + * This function tries to allocate a maximum possible number of interrupts in a
 + * range between @minvec and @maxvec. It returns a negative errno if an error
 + * occurs. If it succeeds, it returns the actual number of interrupts allocated
 + * and updates the @dev's irq member to the lowest new interrupt number;
 + * the other interrupt numbers allocated to this device are consecutive.
 + **/
 +int pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec)
  {
++<<<<<<< HEAD
++=======
+ 	static const struct irq_affinity default_affd;
+ 	bool affinity = flags & PCI_IRQ_AFFINITY;
++>>>>>>> 212bd846223c (genirq/affinity: Handle pre/post vectors in irq_calc_affinity_vectors())
  	int nvec;
  	int rc;
  
@@@ -1108,26 -1084,81 +1113,75 @@@
  	nvec = pci_msi_vec_count(dev);
  	if (nvec < 0)
  		return nvec;
 -	if (nvec < minvec)
 +	else if (nvec < minvec)
  		return -EINVAL;
 -
 -	if (nvec > maxvec)
 +	else if (nvec > maxvec)
  		nvec = maxvec;
  
++<<<<<<< HEAD
 +	do {
 +		rc = msi_capability_init(dev, nvec);
 +		if (rc < 0) {
++=======
+ 	for (;;) {
+ 		if (affinity) {
+ 			nvec = irq_calc_affinity_vectors(nvec, &default_affd);
+ 			if (nvec < minvec)
+ 				return -ENOSPC;
+ 		}
+ 
+ 		rc = msi_capability_init(dev, nvec, affinity);
+ 		if (rc == 0)
+ 			return nvec;
+ 
+ 		if (rc < 0)
++>>>>>>> 212bd846223c (genirq/affinity: Handle pre/post vectors in irq_calc_affinity_vectors())
  			return rc;
 -		if (rc < minvec)
 -			return -ENOSPC;
 -
 -		nvec = rc;
 -	}
 -}
 +		} else if (rc > 0) {
 +			if (rc < minvec)
 +				return -ENOSPC;
 +			nvec = rc;
 +		}
 +	} while (rc);
  
 -/**
 - * pci_enable_msi_range - configure device's MSI capability structure
 - * @dev: device to configure
 - * @minvec: minimal number of interrupts to configure
 - * @maxvec: maximum number of interrupts to configure
 - *
 - * This function tries to allocate a maximum possible number of interrupts in a
 - * range between @minvec and @maxvec. It returns a negative errno if an error
 - * occurs. If it succeeds, it returns the actual number of interrupts allocated
 - * and updates the @dev's irq member to the lowest new interrupt number;
 - * the other interrupt numbers allocated to this device are consecutive.
 - **/
 -int pci_enable_msi_range(struct pci_dev *dev, int minvec, int maxvec)
 -{
 -	return __pci_enable_msi_range(dev, minvec, maxvec, 0);
 +	return nvec;
  }
  EXPORT_SYMBOL(pci_enable_msi_range);
  
++<<<<<<< HEAD
++=======
+ static int __pci_enable_msix_range(struct pci_dev *dev,
+ 		struct msix_entry *entries, int minvec, int maxvec,
+ 		unsigned int flags)
+ {
+ 	static const struct irq_affinity default_affd;
+ 	bool affinity = flags & PCI_IRQ_AFFINITY;
+ 	int rc, nvec = maxvec;
+ 
+ 	if (maxvec < minvec)
+ 		return -ERANGE;
+ 
+ 	for (;;) {
+ 		if (affinity) {
+ 			nvec = irq_calc_affinity_vectors(nvec, &default_affd);
+ 			if (nvec < minvec)
+ 				return -ENOSPC;
+ 		}
+ 
+ 		rc = __pci_enable_msix(dev, entries, nvec, affinity);
+ 		if (rc == 0)
+ 			return nvec;
+ 
+ 		if (rc < 0)
+ 			return rc;
+ 		if (rc < minvec)
+ 			return -ENOSPC;
+ 
+ 		nvec = rc;
+ 	}
+ }
+ 
++>>>>>>> 212bd846223c (genirq/affinity: Handle pre/post vectors in irq_calc_affinity_vectors())
  /**
   * pci_enable_msix_range - configure device's MSI-X capability structure
   * @dev: pointer to the pci_dev data structure of MSI-X device function
diff --cc include/linux/interrupt.h
index 775c38a0baff,9081f23bc0ff..000000000000
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@@ -299,6 -290,9 +299,12 @@@ struct irq_affinity_notify 
  extern int
  irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);
  
++<<<<<<< HEAD
++=======
+ struct cpumask *irq_create_affinity_masks(const struct cpumask *affinity, int nvec);
+ int irq_calc_affinity_vectors(int maxvec, const struct irq_affinity *affd);
+ 
++>>>>>>> 212bd846223c (genirq/affinity: Handle pre/post vectors in irq_calc_affinity_vectors())
  #else /* CONFIG_SMP */
  
  static inline int irq_set_affinity(unsigned int irq, const struct cpumask *m)
@@@ -318,9 -317,27 +324,32 @@@ static inline int irq_set_affinity_hint
  {
  	return -EINVAL;
  }
 +#endif /* CONFIG_SMP && CONFIG_GENERIC_HARDIRQS */
  
++<<<<<<< HEAD
 +#ifdef CONFIG_GENERIC_HARDIRQS
++=======
+ static inline int
+ irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify)
+ {
+ 	return 0;
+ }
+ 
+ static inline struct cpumask *
+ irq_create_affinity_masks(const struct cpumask *affinity, int nvec)
+ {
+ 	return NULL;
+ }
+ 
+ static inline int
+ irq_calc_affinity_vectors(int maxvec, const struct irq_affinity *affd)
+ {
+ 	return maxvec;
+ }
+ 
+ #endif /* CONFIG_SMP */
+ 
++>>>>>>> 212bd846223c (genirq/affinity: Handle pre/post vectors in irq_calc_affinity_vectors())
  /*
   * Special lockdep variants of irq disabling/enabling.
   * These should be used for locking constructs that
* Unmerged path kernel/irq/affinity.c
* Unmerged path drivers/pci/msi.c
* Unmerged path include/linux/interrupt.h
* Unmerged path kernel/irq/affinity.c
