cpufreq: intel_pstate: Use load-based P-state selection more widely

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Use load-based P-state selection more widely (Prarit Bhargava) [1465349]
Rebuild_FUZZ: 92.80%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 553953453b4b64fbccba31691257d006cee36613
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/55395345.failed

Extend the set of systems for which intel_pstate will use the
"powersave" P-state selection algorithm based on CPU load in the
active mode by systems with ACPI preferred profile set to "tablet",
"appliance PC", "desktop", or "workstation" (ie. everything with a
specified preferred profile that is not a "server").

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit 553953453b4b64fbccba31691257d006cee36613)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index c8ed8841fcf2,2ef02fd568a6..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -1594,7 -2466,26 +1594,30 @@@ static void copy_pid_params(struct psta
  	pid_params.setpoint = policy->setpoint;
  }
  
++<<<<<<< HEAD
 +static void copy_cpu_funcs(struct pstate_funcs *funcs)
++=======
+ #ifdef CONFIG_ACPI
+ static void intel_pstate_use_acpi_profile(void)
+ {
+ 	switch (acpi_gbl_FADT.preferred_profile) {
+ 	case PM_MOBILE:
+ 	case PM_TABLET:
+ 	case PM_APPLIANCE_PC:
+ 	case PM_DESKTOP:
+ 	case PM_WORKSTATION:
+ 		pstate_funcs.get_target_pstate =
+ 				get_target_pstate_use_cpu_load;
+ 	}
+ }
+ #else
+ static void intel_pstate_use_acpi_profile(void)
+ {
+ }
+ #endif
+ 
+ static void __init copy_cpu_funcs(struct pstate_funcs *funcs)
++>>>>>>> 553953453b4b (cpufreq: intel_pstate: Use load-based P-state selection more widely)
  {
  	pstate_funcs.get_max   = funcs->get_max;
  	pstate_funcs.get_max_physical = funcs->get_max_physical;
* Unmerged path drivers/cpufreq/intel_pstate.c
