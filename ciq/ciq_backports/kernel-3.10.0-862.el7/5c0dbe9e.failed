nfp: prepare config and enable for working without netdevs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 5c0dbe9ecf02349490794a4205d61c6603390082
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/5c0dbe9e.failed

Out of the three stages of ifup/ifdown (allocate, configure, start)
- this commit prepares the configuration stage for working with
control vNICs.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 5c0dbe9ecf02349490794a4205d61c6603390082)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net_common.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_common.c
index 5094c56dbda7,c47705861a81..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_common.c
@@@ -1952,22 -2225,24 +1952,32 @@@ static int nfp_net_set_config_and_enabl
  		update |= NFP_NET_CFG_UPDATE_IRQMOD;
  	}
  
 -	for (r = 0; r < nn->dp.num_tx_rings; r++)
 -		nfp_net_tx_ring_hw_cfg_write(nn, &nn->dp.tx_rings[r], r);
 -	for (r = 0; r < nn->dp.num_rx_rings; r++)
 -		nfp_net_rx_ring_hw_cfg_write(nn, &nn->dp.rx_rings[r], r);
 +	for (r = 0; r < nn->num_tx_rings; r++)
 +		nfp_net_tx_ring_hw_cfg_write(nn, &nn->tx_rings[r], r);
 +	for (r = 0; r < nn->num_rx_rings; r++)
 +		nfp_net_rx_ring_hw_cfg_write(nn, &nn->rx_rings[r], r);
  
 -	nn_writeq(nn, NFP_NET_CFG_TXRS_ENABLE, nn->dp.num_tx_rings == 64 ?
 -		  0xffffffffffffffffULL : ((u64)1 << nn->dp.num_tx_rings) - 1);
 +	nn_writeq(nn, NFP_NET_CFG_TXRS_ENABLE, nn->num_tx_rings == 64 ?
 +		  0xffffffffffffffffULL : ((u64)1 << nn->num_tx_rings) - 1);
  
 -	nn_writeq(nn, NFP_NET_CFG_RXRS_ENABLE, nn->dp.num_rx_rings == 64 ?
 -		  0xffffffffffffffffULL : ((u64)1 << nn->dp.num_rx_rings) - 1);
 +	nn_writeq(nn, NFP_NET_CFG_RXRS_ENABLE, nn->num_rx_rings == 64 ?
 +		  0xffffffffffffffffULL : ((u64)1 << nn->num_rx_rings) - 1);
  
++<<<<<<< HEAD
 +	nfp_net_write_mac_addr(nn);
 +
 +	nn_writel(nn, NFP_NET_CFG_MTU, nn->netdev->mtu);
 +	nn_writel(nn, NFP_NET_CFG_FLBUFSZ,
 +		  nn->fl_bufsz - NFP_NET_RX_BUF_NON_DATA);
++=======
+ 	if (nn->dp.netdev)
+ 		nfp_net_write_mac_addr(nn, nn->dp.netdev->dev_addr);
+ 
+ 	nn_writel(nn, NFP_NET_CFG_MTU, nn->dp.mtu);
+ 
+ 	bufsz = nn->dp.fl_bufsz - nn->dp.rx_dma_off - NFP_NET_RX_BUF_NON_DATA;
+ 	nn_writel(nn, NFP_NET_CFG_FLBUFSZ, bufsz);
++>>>>>>> 5c0dbe9ecf02 (nfp: prepare config and enable for working without netdevs)
  
  	/* Enable device */
  	new_ctrl |= NFP_NET_CFG_CTRL_ENABLE;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_common.c
