bnxt_en: alloc tc_info{} struct only when tc flower is enabled

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Sathya Perla <sathya.perla@broadcom.com>
commit cd66358e52f74585f043ef63089727273b3421d3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/cd66358e.failed

TC flower is not enabled on VFs and when there's no FW support.
Alloc the tc_info{} struct at init time only when TC flower is being
enabled.

	Signed-off-by: Sathya Perla <sathya.perla@broadcom.com>
	Signed-off-by: Michael Chan <michael.chan@broadcom.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit cd66358e52f74585f043ef63089727273b3421d3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt.h
#	drivers/net/ethernet/broadcom/bnxt/bnxt_tc.c
#	drivers/net/ethernet/broadcom/bnxt/bnxt_tc.h
#	drivers/net/ethernet/broadcom/bnxt/bnxt_vfr.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index c325a10cc99e,5ce950629ce9..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -6934,13 -7342,58 +6934,63 @@@ int bnxt_setup_mq_tc(struct net_device 
  	return 0;
  }
  
 -static int bnxt_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
 -				  void *cb_priv)
 +static int bnxt_setup_tc(struct net_device *dev, u32 handle, __be16 proto,
 +			 struct tc_to_netdev *ntc)
  {
 -	struct bnxt *bp = cb_priv;
 +	if (ntc->type != TC_SETUP_MQPRIO)
 +		return -EINVAL;
  
++<<<<<<< HEAD
 +	return bnxt_setup_mq_tc(dev, ntc->tc);
++=======
+ 	if (!bnxt_tc_flower_enabled(bp))
+ 		return -EOPNOTSUPP;
+ 
+ 	switch (type) {
+ 	case TC_SETUP_CLSFLOWER:
+ 		return bnxt_tc_setup_flower(bp, bp->pf.fw_fid, type_data);
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
+ 
+ static int bnxt_setup_tc_block(struct net_device *dev,
+ 			       struct tc_block_offload *f)
+ {
+ 	struct bnxt *bp = netdev_priv(dev);
+ 
+ 	if (f->binder_type != TCF_BLOCK_BINDER_TYPE_CLSACT_INGRESS)
+ 		return -EOPNOTSUPP;
+ 
+ 	switch (f->command) {
+ 	case TC_BLOCK_BIND:
+ 		return tcf_block_cb_register(f->block, bnxt_setup_tc_block_cb,
+ 					     bp, bp);
+ 	case TC_BLOCK_UNBIND:
+ 		tcf_block_cb_unregister(f->block, bnxt_setup_tc_block_cb, bp);
+ 		return 0;
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
+ }
+ 
+ static int bnxt_setup_tc(struct net_device *dev, enum tc_setup_type type,
+ 			 void *type_data)
+ {
+ 	switch (type) {
+ 	case TC_SETUP_BLOCK:
+ 		return bnxt_setup_tc_block(dev, type_data);
+ 	case TC_SETUP_MQPRIO: {
+ 		struct tc_mqprio_qopt *mqprio = type_data;
+ 
+ 		mqprio->hw = TC_MQPRIO_HW_OFFLOAD_TCS;
+ 
+ 		return bnxt_setup_mq_tc(dev, mqprio->num_tc);
+ 	}
+ 	default:
+ 		return -EOPNOTSUPP;
+ 	}
++>>>>>>> cd66358e52f7 (bnxt_en: alloc tc_info{} struct only when tc flower is enabled)
  }
  
  #ifdef CONFIG_RFS_ACCEL
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.h
index db9012ea3731,5359a1f0045f..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@@ -1201,6 -1338,15 +1201,18 @@@ struct bnxt 
  
  	u8			num_leds;
  	struct bnxt_led_info	leds[BNXT_MAX_LED];
++<<<<<<< HEAD
++=======
+ 
+ 	struct bpf_prog		*xdp_prog;
+ 
+ 	/* devlink interface and vf-rep structs */
+ 	struct devlink		*dl;
+ 	enum devlink_eswitch_mode eswitch_mode;
+ 	struct bnxt_vf_rep	**vf_reps; /* array of vf-rep ptrs */
+ 	u16			*cfa_code_map; /* cfa_code -> vf_idx map */
+ 	struct bnxt_tc_info	*tc_info;
++>>>>>>> cd66358e52f7 (bnxt_en: alloc tc_info{} struct only when tc flower is enabled)
  };
  
  #define BNXT_RX_STATS_OFFSET(counter)			\
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_tc.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_tc.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_vfr.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_tc.c
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_tc.h
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt_vfr.c
