i2c: designware: Enable high speed mode

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [i2c] designware: Enable high speed mode (Gopal Tiwari) [1456705]
Rebuild_FUZZ: 93.15%
commit-author Weifeng Voon <weifeng.voon@intel.com>
commit b6e67145f14903ca430e011db3b771d8de4c3d8a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/b6e67145.failed

This patch enabled high speed mode. High speed mode can be turn on by
setting the clk_freq to 3400000. High speed HCNT and LCNT are needed
as there is no default value provided.

	Signed-off-by: Weifeng Voon <weifeng.voon@intel.com>
	Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
	Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
(cherry picked from commit b6e67145f14903ca430e011db3b771d8de4c3d8a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/i2c/busses/i2c-designware-core.c
#	drivers/i2c/busses/i2c-designware-core.h
diff --cc drivers/i2c/busses/i2c-designware-core.c
index a035315318e4,c5783ed9388d..000000000000
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@@ -93,6 -95,11 +95,14 @@@
  
  #define DW_IC_ERR_TX_ABRT	0x1
  
++<<<<<<< HEAD
++=======
+ #define DW_IC_TAR_10BITADDR_MASTER BIT(12)
+ 
+ #define DW_IC_COMP_PARAM_1_SPEED_MODE_HIGH	(BIT(2) | BIT(3))
+ #define DW_IC_COMP_PARAM_1_SPEED_MODE_MASK	GENMASK(3, 2)
+ 
++>>>>>>> b6e67145f149 (i2c: designware: Enable high speed mode)
  /*
   * status codes
   */
@@@ -279,9 -297,8 +289,9 @@@ static void __i2c_dw_enable(struct dw_i
   */
  int i2c_dw_init(struct dw_i2c_dev *dev)
  {
 +	u32 input_clock_khz;
  	u32 hcnt, lcnt;
- 	u32 reg;
+ 	u32 reg, comp_param1;
  	u32 sda_falling_time, scl_falling_time;
  	int ret;
  
diff --cc drivers/i2c/busses/i2c-designware-core.h
index ca3e0266eaf2,22bfbe147870..000000000000
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@@ -26,6 -26,8 +26,11 @@@
  #define DW_IC_CON_MASTER		0x1
  #define DW_IC_CON_SPEED_STD		0x2
  #define DW_IC_CON_SPEED_FAST		0x4
++<<<<<<< HEAD
++=======
+ #define DW_IC_CON_SPEED_HIGH		0x6
+ #define DW_IC_CON_SPEED_MASK		0x6
++>>>>>>> b6e67145f149 (i2c: designware: Enable high speed mode)
  #define DW_IC_CON_10BITADDR_MASTER	0x10
  #define DW_IC_CON_RESTART_EN		0x20
  #define DW_IC_CON_SLAVE_DISABLE		0x40
* Unmerged path drivers/i2c/busses/i2c-designware-core.c
* Unmerged path drivers/i2c/busses/i2c-designware-core.h
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 1ea294b2df77..55a1b605373d 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -182,12 +182,12 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 
 	/*
 	 * Only standard mode at 100kHz, fast mode at 400kHz,
-	 * and fast mode plus at 1MHz are supported.
+	 * fast mode plus at 1MHz and high speed mode at 3.4MHz are supported.
 	 */
 	if (dev->clk_freq != 100000 && dev->clk_freq != 400000
-	    && dev->clk_freq != 1000000) {
+	    && dev->clk_freq != 1000000 && dev->clk_freq != 3400000) {
 		dev_err(&pdev->dev,
-			"Only 100kHz, 400kHz and 1MHz are supported");
+			"Only 100kHz, 400kHz, 1MHz and 3.4MHz supported");
 		return -EINVAL;
 	}
 
@@ -206,10 +206,16 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 	dev->master_cfg = DW_IC_CON_MASTER | DW_IC_CON_SLAVE_DISABLE |
 			  DW_IC_CON_RESTART_EN;
 
-	if (dev->clk_freq == 100000)
+	switch (dev->clk_freq) {
+	case 100000:
 		dev->master_cfg |= DW_IC_CON_SPEED_STD;
-	else
+		break;
+	case 3400000:
+		dev->master_cfg |= DW_IC_CON_SPEED_HIGH;
+		break;
+	default:
 		dev->master_cfg |= DW_IC_CON_SPEED_FAST;
+	}
 
 	dev->clk = devm_clk_get(&pdev->dev, NULL);
 	dev->get_clk_rate_khz = i2c_dw_get_clk_rate_khz;
