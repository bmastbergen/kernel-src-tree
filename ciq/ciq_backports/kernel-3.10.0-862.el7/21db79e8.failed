kexec: add a kexec_crash_loaded() function

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Petr Tesarik <ptesarik@suse.com>
commit 21db79e8bb054d0351a6b1b464f1c9c47a2e6e8d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/21db79e8.failed

Provide a wrapper function to be used by kernel code to check whether a
crash kernel is loaded.  It returns the same value that can be seen in
/sys/kernel/kexec_crash_loaded by userspace programs.

I'm exporting the function, because it will be used by Xen, and it is
possible to compile Xen modules separately to enable the use of PV
drivers with unmodified bare-metal kernels.

Link: http://lkml.kernel.org/r/20160713121955.14969.69080.stgit@hananiah.suse.cz
	Signed-off-by: Petr Tesarik <ptesarik@suse.com>
	Cc: Juergen Gross <jgross@suse.com>
	Cc: Josh Triplett <josh@joshtriplett.org>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Eric Biederman <ebiederm@xmission.com>
	Cc: "H. Peter Anvin" <hpa@zytor.com>
	Cc: Boris Ostrovsky <boris.ostrovsky@oracle.com>
	Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: David Vrabel <david.vrabel@citrix.com>
	Cc: Vivek Goyal <vgoyal@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 21db79e8bb054d0351a6b1b464f1c9c47a2e6e8d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/kexec.h
diff --cc include/linux/kexec.h
index 49113b30f883,d7437777baaa..000000000000
--- a/include/linux/kexec.h
+++ b/include/linux/kexec.h
@@@ -204,9 -230,35 +204,10 @@@ extern void *kexec_purgatory_get_symbol
  extern void __crash_kexec(struct pt_regs *);
  extern void crash_kexec(struct pt_regs *);
  int kexec_should_crash(struct task_struct *);
+ int kexec_crash_loaded(void);
  void crash_save_cpu(struct pt_regs *regs, int cpu);
 -void crash_save_vmcoreinfo(void);
 -void arch_crash_save_vmcoreinfo(void);
 -__printf(1, 2)
 -void vmcoreinfo_append_str(const char *fmt, ...);
 -phys_addr_t paddr_vmcoreinfo_note(void);
 -
 -#define VMCOREINFO_OSRELEASE(value) \
 -	vmcoreinfo_append_str("OSRELEASE=%s\n", value)
 -#define VMCOREINFO_PAGESIZE(value) \
 -	vmcoreinfo_append_str("PAGESIZE=%ld\n", value)
 -#define VMCOREINFO_SYMBOL(name) \
 -	vmcoreinfo_append_str("SYMBOL(%s)=%lx\n", #name, (unsigned long)&name)
 -#define VMCOREINFO_SIZE(name) \
 -	vmcoreinfo_append_str("SIZE(%s)=%lu\n", #name, \
 -			      (unsigned long)sizeof(name))
 -#define VMCOREINFO_STRUCT_SIZE(name) \
 -	vmcoreinfo_append_str("SIZE(%s)=%lu\n", #name, \
 -			      (unsigned long)sizeof(struct name))
 -#define VMCOREINFO_OFFSET(name, field) \
 -	vmcoreinfo_append_str("OFFSET(%s.%s)=%lu\n", #name, #field, \
 -			      (unsigned long)offsetof(struct name, field))
 -#define VMCOREINFO_LENGTH(name, value) \
 -	vmcoreinfo_append_str("LENGTH(%s)=%lu\n", #name, (unsigned long)value)
 -#define VMCOREINFO_NUMBER(name) \
 -	vmcoreinfo_append_str("NUMBER(%s)=%ld\n", #name, (long)name)
 -#define VMCOREINFO_CONFIG(name) \
 -	vmcoreinfo_append_str("CONFIG_%s=y\n", #name)
 +void crash_map_reserved_pages(void);
 +void crash_unmap_reserved_pages(void);
  
  extern struct kimage *kexec_image;
  extern struct kimage *kexec_crash_image;
@@@ -259,5 -365,10 +260,10 @@@ struct task_struct
  static inline void __crash_kexec(struct pt_regs *regs) { }
  static inline void crash_kexec(struct pt_regs *regs) { }
  static inline int kexec_should_crash(struct task_struct *p) { return 0; }
++<<<<<<< HEAD
++=======
+ static inline int kexec_crash_loaded(void) { return 0; }
+ #define kexec_in_progress false
++>>>>>>> 21db79e8bb05 (kexec: add a kexec_crash_loaded() function)
  #endif /* CONFIG_KEXEC_CORE */
 -
 -#endif /* !defined(__ASSEBMLY__) */
 -
  #endif /* LINUX_KEXEC_H */
* Unmerged path include/linux/kexec.h
diff --git a/kernel/kexec_core.c b/kernel/kexec_core.c
index 14172d54abad..1ce5c2e2f2d1 100644
--- a/kernel/kexec_core.c
+++ b/kernel/kexec_core.c
@@ -87,6 +87,12 @@ int kexec_should_crash(struct task_struct *p)
 	return 0;
 }
 
+int kexec_crash_loaded(void)
+{
+	return !!kexec_crash_image;
+}
+EXPORT_SYMBOL_GPL(kexec_crash_loaded);
+
 /*
  * When kexec transitions to the new kernel there is a one-to-one
  * mapping between physical and virtual addresses.  On processors
diff --git a/kernel/ksysfs.c b/kernel/ksysfs.c
index 09981aa3fb84..dab41a870fdf 100644
--- a/kernel/ksysfs.c
+++ b/kernel/ksysfs.c
@@ -98,7 +98,7 @@ KERNEL_ATTR_RO(kexec_loaded);
 static ssize_t kexec_crash_loaded_show(struct kobject *kobj,
 				       struct kobj_attribute *attr, char *buf)
 {
-	return sprintf(buf, "%d\n", !!kexec_crash_image);
+	return sprintf(buf, "%d\n", kexec_crash_loaded());
 }
 KERNEL_ATTR_RO(kexec_crash_loaded);
 
