block: use same block debugfs directory for blk-mq and blktrace

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [block] use same block debugfs directory for blk-mq and blktrace (Ming Lei) [1458104]
Rebuild_FUZZ: 94.12%
commit-author Omar Sandoval <osandov@fb.com>
commit 18fbda91c6370d520278db9ee1e768b59ef5c4ab
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/18fbda91.failed

When I added the blk-mq debugging information to debugfs, I didn't
notice that blktrace also creates a "block" directory in debugfs. Make
them use the same dentry, now created in the core block code. Based on a
patch from Jens.

	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit 18fbda91c6370d520278db9ee1e768b59ef5c4ab)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
#	block/blk-mq-debugfs.c
#	block/blk-mq.c
#	block/blk-mq.h
diff --cc block/blk-core.c
index 844f81639307,76c42f559df8..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -32,14 -32,21 +32,23 @@@
  #include <linux/delay.h>
  #include <linux/ratelimit.h>
  #include <linux/pm_runtime.h>
++<<<<<<< HEAD
++=======
+ #include <linux/blk-cgroup.h>
+ #include <linux/debugfs.h>
++>>>>>>> 18fbda91c637 (block: use same block debugfs directory for blk-mq and blktrace)
  
  #define CREATE_TRACE_POINTS
  #include <trace/events/block.h>
  
  #include "blk.h"
 +#include "blk-cgroup.h"
  #include "blk-mq.h"
 -#include "blk-mq-sched.h"
 -#include "blk-wbt.h"
  
+ #ifdef CONFIG_DEBUG_FS
+ struct dentry *blk_debugfs_root;
+ #endif
+ 
  EXPORT_TRACEPOINT_SYMBOL_GPL(block_bio_remap);
  EXPORT_TRACEPOINT_SYMBOL_GPL(block_rq_remap);
  EXPORT_TRACEPOINT_SYMBOL_GPL(block_bio_complete);
@@@ -3480,9 -3443,12 +3489,13 @@@ int __init blk_dev_init(void
  	request_cachep = kmem_cache_create("blkdev_requests",
  			sizeof(struct request), 0, SLAB_PANIC, NULL);
  
 -	blk_requestq_cachep = kmem_cache_create("request_queue",
 -			sizeof(struct request_queue), 0, SLAB_PANIC, NULL);
 +	blk_requestq_cachep = kmem_cache_create("blkdev_queue",
 +						sizeof(struct request_queue) + sizeof(struct queue_limits_aux), 
 +						0, SLAB_PANIC, NULL);
  
+ #ifdef CONFIG_DEBUG_FS
+ 	blk_debugfs_root = debugfs_create_dir("block", NULL);
+ #endif
+ 
  	return 0;
  }
diff --cc block/blk-mq.c
index 1b06c94aa73d,e9957df05700..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -2575,10 -2817,12 +2575,15 @@@ void blk_mq_enable_hotplug(void
  
  static int __init blk_mq_init(void)
  {
++<<<<<<< HEAD
 +	blk_mq_cpu_init();
 +
 +	hotcpu_notifier(blk_mq_queue_reinit_notify, 0);
++=======
+ 	cpuhp_setup_state_multi(CPUHP_BLK_MQ_DEAD, "block/mq:dead", NULL,
+ 				blk_mq_hctx_notify_dead);
++>>>>>>> 18fbda91c637 (block: use same block debugfs directory for blk-mq and blktrace)
  
 -	cpuhp_setup_state_nocalls(CPUHP_BLK_MQ_PREPARE, "block/mq:prepare",
 -				  blk_mq_queue_reinit_prepare,
 -				  blk_mq_queue_reinit_dead);
  	return 0;
  }
  subsys_initcall(blk_mq_init);
diff --cc block/blk-mq.h
index 2d50f02667c4,24b2256186f3..000000000000
--- a/block/blk-mq.h
+++ b/block/blk-mq.h
@@@ -61,6 -81,35 +61,38 @@@ extern int blk_mq_sysfs_register(struc
  extern void blk_mq_sysfs_unregister(struct request_queue *q);
  extern void blk_mq_hctx_kobj_init(struct blk_mq_hw_ctx *hctx);
  
++<<<<<<< HEAD
++=======
+ /*
+  * debugfs helpers
+  */
+ #ifdef CONFIG_BLK_DEBUG_FS
+ int blk_mq_debugfs_register(struct request_queue *q, const char *name);
+ void blk_mq_debugfs_unregister(struct request_queue *q);
+ int blk_mq_debugfs_register_hctxs(struct request_queue *q);
+ void blk_mq_debugfs_unregister_hctxs(struct request_queue *q);
+ #else
+ static inline int blk_mq_debugfs_register(struct request_queue *q,
+ 					  const char *name)
+ {
+ 	return 0;
+ }
+ 
+ static inline void blk_mq_debugfs_unregister(struct request_queue *q)
+ {
+ }
+ 
+ static inline int blk_mq_debugfs_register_hctxs(struct request_queue *q)
+ {
+ 	return 0;
+ }
+ 
+ static inline void blk_mq_debugfs_unregister_hctxs(struct request_queue *q)
+ {
+ }
+ #endif
+ 
++>>>>>>> 18fbda91c637 (block: use same block debugfs directory for blk-mq and blktrace)
  extern void blk_mq_rq_timed_out(struct request *req, bool reserved);
  
  void blk_mq_release(struct request_queue *q);
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-core.c
* Unmerged path block/blk-mq-debugfs.c
* Unmerged path block/blk-mq.c
* Unmerged path block/blk-mq.h
diff --git a/block/blk.h b/block/blk.h
index 4d1760d40372..f238cac23b1d 100644
--- a/block/blk.h
+++ b/block/blk.h
@@ -16,6 +16,10 @@
 /* Max future timer expiry for timeouts */
 #define BLK_MAX_TIMEOUT		(5 * HZ)
 
+#ifdef CONFIG_DEBUG_FS
+extern struct dentry *blk_debugfs_root;
+#endif
+
 struct blk_flush_queue {
 	unsigned int		flush_queue_delayed:1;
 	unsigned int		flush_pending_idx:1;
diff --git a/kernel/trace/blktrace.c b/kernel/trace/blktrace.c
index b6d074326fe3..99f6cb66eb2e 100644
--- a/kernel/trace/blktrace.c
+++ b/kernel/trace/blktrace.c
@@ -27,6 +27,8 @@
 #include <linux/time.h>
 #include <linux/uaccess.h>
 
+#include "../../block/blk.h"
+
 #include <trace/events/block.h>
 
 #include "trace_output.h"
@@ -275,9 +277,6 @@ record_it:
 	local_irq_restore(flags);
 }
 
-static struct dentry *blk_tree_root;
-static DEFINE_MUTEX(blk_tree_mutex);
-
 static void blk_trace_free(struct blk_trace *bt)
 {
 	debugfs_remove(bt->msg_file);
@@ -459,17 +458,10 @@ static int do_blk_trace_setup(struct request_queue *q, char *name, dev_t dev,
 
 	ret = -ENOENT;
 
-	mutex_lock(&blk_tree_mutex);
-	if (!blk_tree_root) {
-		blk_tree_root = debugfs_create_dir("block", NULL);
-		if (!blk_tree_root) {
-			mutex_unlock(&blk_tree_mutex);
-			goto err;
-		}
-	}
-	mutex_unlock(&blk_tree_mutex);
+	if (!blk_debugfs_root)
+		goto err;
 
-	dir = debugfs_create_dir(buts->name, blk_tree_root);
+	dir = debugfs_create_dir(buts->name, blk_debugfs_root);
 
 	if (!dir)
 		goto err;
