generic syscalls: Wire up memory protection keys syscalls

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Dave Hansen <dave.hansen@linux.intel.com>
commit a60f7b69d92c0142c80a30d669a76b617b7f6879
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/a60f7b69.failed

These new syscalls are implemented as generic code, so enable them for
architectures like arm64 which use the generic syscall table.

According to Arnd:

  Even if the support is x86 specific for the forseeable future, it may be
  good to reserve the number just in case.  The other architecture specific
  syscall lists are usually left to the individual arch maintainers, most a
  lot of the newer architectures share this table.

	Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
	Acked-by: Arnd Bergmann <arnd@arndb.de>
	Cc: linux-arch@vger.kernel.org
	Cc: Dave Hansen <dave@sr71.net>
	Cc: mgorman@techsingularity.net
	Cc: linux-api@vger.kernel.org
	Cc: linux-mm@kvack.org
	Cc: luto@kernel.org
	Cc: akpm@linux-foundation.org
	Cc: torvalds@linux-foundation.org
Link: http://lkml.kernel.org/r/20160729163018.505A6875@viggo.jf.intel.com
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit a60f7b69d92c0142c80a30d669a76b617b7f6879)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/syscalls.h
#	include/uapi/asm-generic/unistd.h
diff --cc include/linux/syscalls.h
index f951b8d99280,0d7abb8b7315..000000000000
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@@ -866,4 -894,16 +866,18 @@@ asmlinkage long sys_getrandom(char __us
  asmlinkage long sys_copy_file_range(int fd_in, loff_t __user *off_in,
  				    int fd_out, loff_t __user *off_out,
  				    size_t len, unsigned int flags);
++<<<<<<< HEAD
++=======
+ 
+ asmlinkage long sys_mlock2(unsigned long start, size_t len, int flags);
+ 
+ asmlinkage long sys_pkey_mprotect(unsigned long start, size_t len,
+ 				  unsigned long prot, int pkey);
+ asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
+ asmlinkage long sys_pkey_free(int pkey);
+ //asmlinkage long sys_pkey_get(int pkey, unsigned long flags);
+ //asmlinkage long sys_pkey_set(int pkey, unsigned long access_rights,
+ //			     unsigned long flags);
+ 
++>>>>>>> a60f7b69d92c (generic syscalls: Wire up memory protection keys syscalls)
  #endif
diff --cc include/uapi/asm-generic/unistd.h
index 525a70c4372a,dbfee7e86ba6..000000000000
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@@ -692,13 -696,47 +692,33 @@@ __SC_COMP(__NR_process_vm_writev, sys_p
  __SYSCALL(__NR_kcmp, sys_kcmp)
  #define __NR_finit_module 273
  __SYSCALL(__NR_finit_module, sys_finit_module)
 -#define __NR_sched_setattr 274
 -__SYSCALL(__NR_sched_setattr, sys_sched_setattr)
 -#define __NR_sched_getattr 275
 -__SYSCALL(__NR_sched_getattr, sys_sched_getattr)
 -#define __NR_renameat2 276
 -__SYSCALL(__NR_renameat2, sys_renameat2)
 -#define __NR_seccomp 277
 -__SYSCALL(__NR_seccomp, sys_seccomp)
  #define __NR_getrandom 278
  __SYSCALL(__NR_getrandom, sys_getrandom)
 -#define __NR_memfd_create 279
 -__SYSCALL(__NR_memfd_create, sys_memfd_create)
 -#define __NR_bpf 280
 -__SYSCALL(__NR_bpf, sys_bpf)
 -#define __NR_execveat 281
 -__SC_COMP(__NR_execveat, sys_execveat, compat_sys_execveat)
 -#define __NR_userfaultfd 282
 -__SYSCALL(__NR_userfaultfd, sys_userfaultfd)
 -#define __NR_membarrier 283
 -__SYSCALL(__NR_membarrier, sys_membarrier)
 -#define __NR_mlock2 284
 -__SYSCALL(__NR_mlock2, sys_mlock2)
  #define __NR_copy_file_range 285
  __SYSCALL(__NR_copy_file_range, sys_copy_file_range)
++<<<<<<< HEAD
 +
 +#undef __NR_syscalls
 +#define __NR_syscalls 286
++=======
+ #define __NR_preadv2 286
+ __SC_COMP(__NR_preadv2, sys_preadv2, compat_sys_preadv2)
+ #define __NR_pwritev2 287
+ __SC_COMP(__NR_pwritev2, sys_pwritev2, compat_sys_pwritev2)
+ #define __NR_pkey_mprotect 288
+ __SYSCALL(__NR_pkey_mprotect, sys_pkey_mprotect)
+ #define __NR_pkey_alloc 289
+ __SYSCALL(__NR_pkey_alloc,    sys_pkey_alloc)
+ #define __NR_pkey_free 290
+ __SYSCALL(__NR_pkey_free,     sys_pkey_free)
+ #define __NR_pkey_get 291
+ //__SYSCALL(__NR_pkey_get,      sys_pkey_get)
+ #define __NR_pkey_set 292
+ //__SYSCALL(__NR_pkey_set,      sys_pkey_set)
+ 
+ #undef __NR_syscalls
+ #define __NR_syscalls 291
++>>>>>>> a60f7b69d92c (generic syscalls: Wire up memory protection keys syscalls)
  
  /*
   * All syscalls below here should go away really,
* Unmerged path include/linux/syscalls.h
* Unmerged path include/uapi/asm-generic/unistd.h
