sysfs: add sysfs_bin_read()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Tejun Heo <tj@kernel.org>
commit 2f0c6b7593a590eef7fa35344da57380fcee7581
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/2f0c6b75.failed

sysfs bin file handling will be merged into the regular file support.
This patch prepares the read path.

Copy fs/sysfs/bin.c::read() to fs/sysfs/file.c and make it use
sysfs_open_file instead of bin_buffer.  The function is identical copy
except for the use of sysfs_open_file.

The new function is added to sysfs_bin_operations.  This isn't used
yet but will eventually replace fs/sysfs/bin.c.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 2f0c6b7593a590eef7fa35344da57380fcee7581)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/sysfs/file.c
diff --cc fs/sysfs/file.c
index d8887c896abc,9ba492a3d932..000000000000
--- a/fs/sysfs/file.c
+++ b/fs/sysfs/file.c
@@@ -98,145 -135,169 +98,209 @@@ static int fill_read_buffer(struct dent
  		/* Try to struggle along */
  		count = PAGE_SIZE - 1;
  	}
 -	seq_commit(sf, count);
 -	return 0;
 +	if (count >= 0) {
 +		buffer->needs_read_fill = 0;
 +		buffer->count = count;
 +	} else {
 +		ret = count;
 +	}
 +	return ret;
  }
  
+ /*
+  * Read method for bin files.  As reading a bin file can have side-effects,
+  * the exact offset and bytes specified in read(2) call should be passed to
+  * the read callback making it difficult to use seq_file.  Implement
+  * simplistic custom buffering for bin files.
+  */
+ static ssize_t sysfs_bin_read(struct file *file, char __user *userbuf,
+ 			      size_t bytes, loff_t *off)
+ {
+ 	struct sysfs_open_file *of = sysfs_of(file);
+ 	struct bin_attribute *battr = of->sd->s_bin_attr.bin_attr;
+ 	struct kobject *kobj = of->sd->s_parent->s_dir.kobj;
+ 	int size = file_inode(file)->i_size;
+ 	int count = min_t(size_t, bytes, PAGE_SIZE);
+ 	loff_t offs = *off;
+ 	char *buf;
+ 
+ 	if (!bytes)
+ 		return 0;
+ 
+ 	if (size) {
+ 		if (offs > size)
+ 			return 0;
+ 		if (offs + count > size)
+ 			count = size - offs;
+ 	}
+ 
+ 	buf = kmalloc(count, GFP_KERNEL);
+ 	if (!buf)
+ 		return -ENOMEM;
+ 
+ 	/* need of->sd for battr, its parent for kobj */
+ 	mutex_lock(&of->mutex);
+ 	if (!sysfs_get_active(of->sd)) {
+ 		count = -ENODEV;
+ 		mutex_unlock(&of->mutex);
+ 		goto out_free;
+ 	}
+ 
+ 	if (battr->read)
+ 		count = battr->read(file, kobj, battr, buf, offs, count);
+ 	else
+ 		count = -EIO;
+ 
+ 	sysfs_put_active(of->sd);
+ 	mutex_unlock(&of->mutex);
+ 
+ 	if (count < 0)
+ 		goto out_free;
+ 
+ 	if (copy_to_user(userbuf, buf, count)) {
+ 		count = -EFAULT;
+ 		goto out_free;
+ 	}
+ 
+ 	pr_debug("offs = %lld, *off = %lld, count = %d\n", offs, *off, count);
+ 
+ 	*off = offs + count;
+ 
+  out_free:
+ 	kfree(buf);
+ 	return count;
+ }
+ 
  /**
 - * flush_write_buffer - push buffer to kobject
 - * @of: open file
 - * @buf: data buffer for file
 - * @off: file offset to write to
 - * @count: number of bytes
 + *	sysfs_read_file - read an attribute.
 + *	@file:	file pointer.
 + *	@buf:	buffer to fill.
 + *	@count:	number of bytes to read.
 + *	@ppos:	starting offset in file.
   *
 - * Get the correct pointers for the kobject and the attribute we're dealing
 - * with, then call the store() method for it with @buf.
 + *	Userspace wants to read an attribute file. The attribute descriptor
 + *	is in the file's ->d_fsdata. The target object is in the directory's
 + *	->d_fsdata.
 + *
 + *	We call fill_read_buffer() to allocate and fill the buffer from the
 + *	object's show() method exactly once (if the read is happening from
 + *	the beginning of the file). That should fill the entire buffer with
 + *	all the data the object has to offer for that attribute.
 + *	We then call flush_read_buffer() to copy the buffer to userspace
 + *	in the increments specified.
   */
 -static int flush_write_buffer(struct sysfs_open_file *of, char *buf, loff_t off,
 -			      size_t count)
 -{
 -	struct kobject *kobj = of->sd->s_parent->s_dir.kobj;
 -	int rc = 0;
  
 -	/*
 -	 * Need @of->sd for attr and ops, its parent for kobj.  @of->mutex
 -	 * nests outside active ref and is just to ensure that the ops
 -	 * aren't called concurrently for the same open file.
 -	 */
 -	mutex_lock(&of->mutex);
 -	if (!sysfs_get_active(of->sd)) {
 -		mutex_unlock(&of->mutex);
 -		return -ENODEV;
 +static ssize_t
 +sysfs_read_file(struct file *file, char __user *buf, size_t count, loff_t *ppos)
 +{
 +	struct sysfs_buffer * buffer = file->private_data;
 +	ssize_t retval = 0;
 +
 +	mutex_lock(&buffer->mutex);
 +	if (buffer->needs_read_fill || *ppos == 0) {
 +		retval = fill_read_buffer(file->f_path.dentry,buffer);
 +		if (retval)
 +			goto out;
  	}
 +	pr_debug("%s: count = %zd, ppos = %lld, buf = %s\n",
 +		 __func__, count, *ppos, buffer->page);
 +	retval = simple_read_from_buffer(buf, count, ppos, buffer->page,
 +					 buffer->count);
 +out:
 +	mutex_unlock(&buffer->mutex);
 +	return retval;
 +}
  
 -	if (sysfs_is_bin(of->sd)) {
 -		struct bin_attribute *battr = of->sd->s_bin_attr.bin_attr;
 -
 -		rc = -EIO;
 -		if (battr->write)
 -			rc = battr->write(of->file, kobj, battr, buf, off,
 -					  count);
 -	} else {
 -		const struct sysfs_ops *ops = sysfs_file_ops(of->sd);
 -
 -		rc = ops->store(kobj, of->sd->s_attr.attr, buf, count);
 -	}
 +/**
 + *	fill_write_buffer - copy buffer from userspace.
 + *	@buffer:	data buffer for file.
 + *	@buf:		data from user.
 + *	@count:		number of bytes in @userbuf.
 + *
 + *	Allocate @buffer->page if it hasn't been already, then
 + *	copy the user-supplied buffer into it.
 + */
 +static int fill_write_buffer(struct sysfs_buffer * buffer,
 +			     const char __user * buf, size_t count)
 +{
 +	int error;
  
 -	sysfs_put_active(of->sd);
 -	mutex_unlock(&of->mutex);
 +	if (!buffer->page)
 +		buffer->page = (char *)get_zeroed_page(GFP_KERNEL);
 +	if (!buffer->page)
 +		return -ENOMEM;
  
 -	return rc;
 +	if (count >= PAGE_SIZE)
 +		count = PAGE_SIZE - 1;
 +	error = copy_from_user(buffer->page,buf,count);
 +	buffer->needs_read_fill = 1;
 +	/* if buf is assumed to contain a string, terminate it by \0,
 +	   so e.g. sscanf() can scan the string easily */
 +	buffer->page[count] = 0;
 +	return error ? -EFAULT : count;
  }
  
 +
  /**
 - * sysfs_write_file - write an attribute
 - * @file: file pointer
 - * @user_buf: data to write
 - * @count: number of bytes
 - * @ppos: starting offset
 + *	flush_write_buffer - push buffer to kobject.
 + *	@dentry:	dentry to the attribute
 + *	@buffer:	data buffer for file.
 + *	@count:		number of bytes
   *
 - * Copy data in from userland and pass it to the matching
 - * sysfs_ops->store() by invoking flush_write_buffer().
 - *
 - * There is no easy way for us to know if userspace is only doing a partial
 - * write, so we don't support them. We expect the entire buffer to come on
 - * the first write.  Hint: if you're writing a value, first read the file,
 - * modify only the the value you're changing, then write entire buffer
 - * back.
 + *	Get the correct pointers for the kobject and the attribute we're
 + *	dealing with, then call the store() method for the attribute,
 + *	passing the buffer that we acquired in fill_write_buffer().
   */
 -static ssize_t sysfs_write_file(struct file *file, const char __user *user_buf,
 -				size_t count, loff_t *ppos)
 +static int
 +flush_write_buffer(struct dentry * dentry, struct sysfs_buffer * buffer, size_t count)
  {
 -	struct sysfs_open_file *of = sysfs_of(file);
 -	ssize_t len = min_t(size_t, count, PAGE_SIZE);
 -	char *buf;
 +	struct sysfs_dirent *attr_sd = dentry->d_fsdata;
 +	struct kobject *kobj = attr_sd->s_parent->s_dir.kobj;
 +	const struct sysfs_ops * ops = buffer->ops;
 +	int rc;
  
 -	if (sysfs_is_bin(of->sd)) {
 -		loff_t size = file_inode(file)->i_size;
 +	/* need attr_sd for attr and ops, its parent for kobj */
 +	if (!sysfs_get_active(attr_sd))
 +		return -ENODEV;
  
 -		if (size <= *ppos)
 -			return 0;
 -		len = min_t(ssize_t, len, size - *ppos);
 -	}
 +	rc = ops->store(kobj, attr_sd->s_attr.attr, buffer->page, count);
  
 -	if (!len)
 -		return 0;
 +	sysfs_put_active(attr_sd);
  
 -	buf = kmalloc(len + 1, GFP_KERNEL);
 -	if (!buf)
 -		return -ENOMEM;
 +	return rc;
 +}
  
 -	if (copy_from_user(buf, user_buf, len)) {
 -		len = -EFAULT;
 -		goto out_free;
 -	}
 -	buf[len] = '\0';	/* guarantee string termination */
  
 -	len = flush_write_buffer(of, buf, *ppos, len);
 +/**
 + *	sysfs_write_file - write an attribute.
 + *	@file:	file pointer
 + *	@buf:	data to write
 + *	@count:	number of bytes
 + *	@ppos:	starting offset
 + *
 + *	Similar to sysfs_read_file(), though working in the opposite direction.
 + *	We allocate and fill the data from the user in fill_write_buffer(),
 + *	then push it to the kobject in flush_write_buffer().
 + *	There is no easy way for us to know if userspace is only doing a partial
 + *	write, so we don't support them. We expect the entire buffer to come
 + *	on the first write.
 + *	Hint: if you're writing a value, first read the file, modify only the
 + *	the value you're changing, then write entire buffer back.
 + */
 +
 +static ssize_t
 +sysfs_write_file(struct file *file, const char __user *buf, size_t count, loff_t *ppos)
 +{
 +	struct sysfs_buffer * buffer = file->private_data;
 +	ssize_t len;
 +
 +	mutex_lock(&buffer->mutex);
 +	len = fill_write_buffer(buffer, buf, count);
 +	if (len > 0)
 +		len = flush_write_buffer(file->f_path.dentry, buffer, len);
  	if (len > 0)
  		*ppos += len;
 -out_free:
 -	kfree(buf);
 +	mutex_unlock(&buffer->mutex);
  	return len;
  }
  
@@@ -492,47 -558,15 +556,55 @@@ const struct file_operations sysfs_file
  	.poll		= sysfs_poll,
  };
  
++<<<<<<< HEAD
 +static int sysfs_attr_ns(struct kobject *kobj, const struct attribute *attr,
 +			 const void **pns)
 +{
 +	struct sysfs_dirent *dir_sd = kobj->sd;
 +	const struct sysfs_ops *ops;
 +	const void *ns = NULL;
 +	int err;
++=======
+ const struct file_operations sysfs_bin_operations = {
+ 	.read		= sysfs_bin_read,
+ 	.write		= sysfs_write_file,
+ 	.llseek		= generic_file_llseek,
+ };
++>>>>>>> 2f0c6b7593a5 (sysfs: add sysfs_bin_read())
 +
 +	if (!dir_sd) {
 +		WARN(1, KERN_ERR "sysfs: kobject %s without dirent\n",
 +			kobject_name(kobj));
 +		return -ENOENT;
 +	}
 +
 +	err = 0;
 +	if (!sysfs_ns_type(dir_sd))
 +		goto out;
 +
 +	err = -EINVAL;
 +	if (!kobj->ktype)
 +		goto out;
 +	ops = kobj->ktype->sysfs_ops;
 +	if (!ops)
 +		goto out;
 +	if (!ops->namespace)
 +		goto out;
 +
 +	err = 0;
 +	ns = ops->namespace(kobj, attr);
 +out:
 +	if (err) {
 +		WARN(1, KERN_ERR
 +		     "missing sysfs namespace attribute operation for kobject: %s\n",
 +		     kobject_name(kobj));
 +	}
 +	*pns = ns;
 +	return err;
 +}
  
 -int sysfs_add_file_mode_ns(struct sysfs_dirent *dir_sd,
 -			   const struct attribute *attr, int type,
 -			   umode_t amode, const void *ns)
 +int sysfs_add_file_mode(struct sysfs_dirent *dir_sd,
 +			const struct attribute *attr, int type, umode_t amode)
  {
  	umode_t mode = (amode & S_IALLUGO) | S_IFREG;
  	struct sysfs_addrm_cxt acxt;
* Unmerged path fs/sysfs/file.c
