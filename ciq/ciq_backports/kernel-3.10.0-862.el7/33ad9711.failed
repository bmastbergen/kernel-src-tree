net/mlx5e: Generalize SQ create/modify/destroy functions

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [netdrv] mlx5e: Generalize SQ create/modify/destroy functions (Don Dutile) [1456694 1499362]
Rebuild_FUZZ: 96.30%
commit-author Saeed Mahameed <saeedm@mellanox.com>
commit 33ad9711861060d82d5c9c3a5ffb238f4d54b097
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/33ad9711.failed

In the next patches we will introduce different SQ types,
and we would want to reuse those functions, in this patch we make them
agnostic to SQ type (txq, xdp, ico).

	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 33ad9711861060d82d5c9c3a5ffb238f4d54b097)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_main.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index edb21d8194bc,dcc67df54a5c..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@@ -1007,20 -1051,25 +1007,33 @@@ err_unmap_free_uar
  	return err;
  }
  
 -static void mlx5e_free_sq(struct mlx5e_sq *sq)
 +static void mlx5e_destroy_sq(struct mlx5e_sq *sq)
  {
 +	struct mlx5e_channel *c = sq->channel;
 +	struct mlx5e_priv *priv = c->priv;
 +
  	mlx5e_free_sq_db(sq);
  	mlx5_wq_destroy(&sq->wq_ctrl);
 +	mlx5_unmap_free_uar(priv->mdev, &sq->uar);
  }
  
++<<<<<<< HEAD
 +static int mlx5e_enable_sq(struct mlx5e_sq *sq, struct mlx5e_sq_param *param)
++=======
+ struct mlx5e_create_sq_param {
+ 	struct mlx5_wq_ctrl        *wq_ctrl;
+ 	u32                         cqn;
+ 	u32                         tisn;
+ 	u8                          tis_lst_sz;
+ 	u8                          min_inline_mode;
+ };
+ 
+ static int mlx5e_create_sq(struct mlx5e_priv *priv,
+ 			   struct mlx5e_sq_param *param,
+ 			   struct mlx5e_create_sq_param *csp,
+ 			   u32 *sqn)
++>>>>>>> 33ad97118610 (net/mlx5e: Generalize SQ create/modify/destroy functions)
  {
- 	struct mlx5e_channel *c = sq->channel;
- 	struct mlx5e_priv *priv = c->priv;
  	struct mlx5_core_dev *mdev = priv->mdev;
  
  	void *in;
@@@ -1039,24 -1088,24 +1052,38 @@@
  	wq = MLX5_ADDR_OF(sqc, sqc, wq);
  
  	memcpy(sqc, param->sqc, sizeof(param->sqc));
++<<<<<<< HEAD
 +
 +	MLX5_SET(sqc,  sqc, tis_num_0, param->type == MLX5E_SQ_ICO ?
 +				       0 : priv->tisn[sq->tc]);
 +	MLX5_SET(sqc,  sqc, cqn,		sq->cq.mcq.cqn);
 +	MLX5_SET(sqc,  sqc, min_wqe_inline_mode, sq->min_inline_mode);
 +	MLX5_SET(sqc,  sqc, state,		MLX5_SQC_STATE_RST);
 +	MLX5_SET(sqc,  sqc, tis_lst_sz, param->type == MLX5E_SQ_ICO ? 0 : 1);
 +
 +	MLX5_SET(wq,   wq, wq_type,       MLX5_WQ_TYPE_CYCLIC);
 +	MLX5_SET(wq,   wq, uar_page,      sq->uar.index);
 +	MLX5_SET(wq,   wq, log_wq_pg_sz,  sq->wq_ctrl.buf.page_shift -
++=======
+ 	MLX5_SET(sqc,  sqc, tis_lst_sz, csp->tis_lst_sz);
+ 	MLX5_SET(sqc,  sqc, tis_num_0, csp->tisn);
+ 	MLX5_SET(sqc,  sqc, cqn, csp->cqn);
+ 
+ 	if (MLX5_CAP_ETH(mdev, wqe_inline_mode) == MLX5_CAP_INLINE_MODE_VPORT_CONTEXT)
+ 		MLX5_SET(sqc,  sqc, min_wqe_inline_mode, csp->min_inline_mode);
+ 
+ 	MLX5_SET(sqc,  sqc, state, MLX5_SQC_STATE_RST);
+ 
+ 	MLX5_SET(wq,   wq, wq_type,       MLX5_WQ_TYPE_CYCLIC);
+ 	MLX5_SET(wq,   wq, uar_page,      priv->mdev->mlx5e_res.bfreg.index);
+ 	MLX5_SET(wq,   wq, log_wq_pg_sz,  csp->wq_ctrl->buf.page_shift -
++>>>>>>> 33ad97118610 (net/mlx5e: Generalize SQ create/modify/destroy functions)
  					  MLX5_ADAPTER_PAGE_SHIFT);
- 	MLX5_SET64(wq, wq, dbr_addr,      sq->wq_ctrl.db.dma);
+ 	MLX5_SET64(wq, wq, dbr_addr,      csp->wq_ctrl->db.dma);
  
- 	mlx5_fill_page_array(&sq->wq_ctrl.buf,
- 			     (__be64 *)MLX5_ADDR_OF(wq, wq, pas));
+ 	mlx5_fill_page_array(&csp->wq_ctrl->buf, (__be64 *)MLX5_ADDR_OF(wq, wq, pas));
  
- 	err = mlx5_core_create_sq(mdev, in, inlen, &sq->sqn);
+ 	err = mlx5_core_create_sq(mdev, in, inlen, sqn);
  
  	kvfree(in);
  
@@@ -1096,15 -1151,10 +1129,18 @@@ static int mlx5e_modify_sq(struct mlx5e
  	return err;
  }
  
++<<<<<<< HEAD
 +static void mlx5e_disable_sq(struct mlx5e_sq *sq)
 +{
 +	struct mlx5e_channel *c = sq->channel;
 +	struct mlx5e_priv *priv = c->priv;
 +	struct mlx5_core_dev *mdev = priv->mdev;
++=======
++>>>>>>> 33ad97118610 (net/mlx5e: Generalize SQ create/modify/destroy functions)
  
- 	mlx5_core_destroy_sq(mdev, sq->sqn);
- 	if (sq->rate_limit)
- 		mlx5_rl_remove_rate(mdev, sq->rate_limit);
+ static void mlx5e_destroy_sq(struct mlx5e_priv *priv, u32 sqn)
+ {
+ 	mlx5_core_destroy_sq(priv->mdev, sqn);
  }
  
  static int mlx5e_open_sq(struct mlx5e_channel *c,
@@@ -1112,21 -1162,31 +1148,35 @@@
  			 struct mlx5e_sq_param *param,
  			 struct mlx5e_sq *sq)
  {
+ 	struct mlx5e_create_sq_param csp = {0};
+ 	struct mlx5e_modify_sq_param msp = {0};
+ 	struct mlx5e_priv *priv = c->priv;
  	int err;
  
 -	err = mlx5e_alloc_sq(c, tc, param, sq);
 +	err = mlx5e_create_sq(c, tc, param, sq);
  	if (err)
  		return err;
  
++<<<<<<< HEAD
 +	err = mlx5e_enable_sq(sq, param);
++=======
+ 	csp.tisn            = param->type == MLX5E_SQ_ICO ? 0 : priv->tisn[sq->tc];
+ 	csp.tis_lst_sz      = param->type == MLX5E_SQ_ICO ? 0 : 1;
+ 	csp.cqn             = sq->cq.mcq.cqn;
+ 	csp.wq_ctrl         = &sq->wq_ctrl;
+ 	csp.min_inline_mode = sq->min_inline_mode;
+ 
+ 	err = mlx5e_create_sq(c->priv, param, &csp, &sq->sqn);
++>>>>>>> 33ad97118610 (net/mlx5e: Generalize SQ create/modify/destroy functions)
  	if (err)
 -		goto err_free_sq;
 +		goto err_destroy_sq;
  
  	set_bit(MLX5E_SQ_STATE_ENABLED, &sq->state);
- 	err = mlx5e_modify_sq(sq, MLX5_SQC_STATE_RST, MLX5_SQC_STATE_RDY,
- 			      false, 0);
+ 	msp.curr_state = MLX5_SQC_STATE_RST;
+ 	msp.next_state = MLX5_SQC_STATE_RDY;
+ 	err = mlx5e_modify_sq(priv, sq->sqn, &msp);
  	if (err)
 -		goto err_destroy_sq;
 +		goto err_disable_sq;
  
  	if (sq->txq) {
  		netdev_tx_reset_queue(sq->txq);
@@@ -1135,11 -1195,11 +1185,17 @@@
  
  	return 0;
  
 -err_destroy_sq:
 +err_disable_sq:
  	clear_bit(MLX5E_SQ_STATE_ENABLED, &sq->state);
++<<<<<<< HEAD
 +	mlx5e_disable_sq(sq);
 +err_destroy_sq:
 +	mlx5e_destroy_sq(sq);
++=======
+ 	mlx5e_destroy_sq(priv, sq->sqn);
+ err_free_sq:
+ 	mlx5e_free_sq(sq);
++>>>>>>> 33ad97118610 (net/mlx5e: Generalize SQ create/modify/destroy functions)
  
  	return err;
  }
@@@ -1167,14 -1234,16 +1227,22 @@@ static void mlx5e_close_sq(struct mlx5e
  		}
  	}
  
++<<<<<<< HEAD
 +	mlx5e_disable_sq(sq);
 +	mlx5e_free_tx_descs(sq);
 +	mlx5e_destroy_sq(sq);
++=======
+ 	mlx5e_destroy_sq(priv, sq->sqn);
+ 	if (sq->rate_limit)
+ 		mlx5_rl_remove_rate(mdev, sq->rate_limit);
+ 	mlx5e_free_sq_descs(sq);
+ 	mlx5e_free_sq(sq);
++>>>>>>> 33ad97118610 (net/mlx5e: Generalize SQ create/modify/destroy functions)
  }
  
 -static int mlx5e_alloc_cq(struct mlx5e_channel *c,
 -			  struct mlx5e_cq_param *param,
 -			  struct mlx5e_cq *cq)
 +static int mlx5e_create_cq(struct mlx5e_channel *c,
 +			   struct mlx5e_cq_param *param,
 +			   struct mlx5e_cq *cq)
  {
  	struct mlx5e_priv *priv = c->priv;
  	struct mlx5_core_dev *mdev = priv->mdev;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_main.c
