seccomp: implement SECCOMP_FILTER_FLAG_TSYNC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Kees Cook <keescook@chromium.org>
commit c2e1f2e30daa551db3c670c0ccfeab20a540b9e1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c2e1f2e3.failed

Applying restrictive seccomp filter programs to large or diverse
codebases often requires handling threads which may be started early in
the process lifetime (e.g., by code that is linked in). While it is
possible to apply permissive programs prior to process start up, it is
difficult to further restrict the kernel ABI to those threads after that
point.

This change adds a new seccomp syscall flag to SECCOMP_SET_MODE_FILTER for
synchronizing thread group seccomp filters at filter installation time.

When calling seccomp(SECCOMP_SET_MODE_FILTER, SECCOMP_FILTER_FLAG_TSYNC,
filter) an attempt will be made to synchronize all threads in current's
threadgroup to its new seccomp filter program. This is possible iff all
threads are using a filter that is an ancestor to the filter current is
attempting to synchronize to. NULL filters (where the task is running as
SECCOMP_MODE_NONE) are also treated as ancestors allowing threads to be
transitioned into SECCOMP_MODE_FILTER. If prctrl(PR_SET_NO_NEW_PRIVS,
...) has been set on the calling thread, no_new_privs will be set for
all synchronized threads too. On success, 0 is returned. On failure,
the pid of one of the failing threads will be returned and no filters
will have been applied.

The race conditions against another thread are:
- requesting TSYNC (already handled by sighand lock)
- performing a clone (already handled by sighand lock)
- changing its filter (already handled by sighand lock)
- calling exec (handled by cred_guard_mutex)
The clone case is assisted by the fact that new threads will have their
seccomp state duplicated from their parent before appearing on the tasklist.

Holding cred_guard_mutex means that seccomp filters cannot be assigned
while in the middle of another thread's exec (potentially bypassing
no_new_privs or similar). The call to de_thread() may kill threads waiting
for the mutex.

Changes across threads to the filter pointer includes a barrier.

Based on patches by Will Drewry.

	Suggested-by: Julien Tinnes <jln@chromium.org>
	Signed-off-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Oleg Nesterov <oleg@redhat.com>
	Reviewed-by: Andy Lutomirski <luto@amacapital.net>
(cherry picked from commit c2e1f2e30daa551db3c670c0ccfeab20a540b9e1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/uapi/linux/seccomp.h
#	kernel/seccomp.c
diff --cc include/uapi/linux/seccomp.h
index ac2dc9f72973,0f238a43ff1e..000000000000
--- a/include/uapi/linux/seccomp.h
+++ b/include/uapi/linux/seccomp.h
@@@ -10,6 -10,13 +10,16 @@@
  #define SECCOMP_MODE_STRICT	1 /* uses hard-coded filter. */
  #define SECCOMP_MODE_FILTER	2 /* uses user-supplied filter. */
  
++<<<<<<< HEAD
++=======
+ /* Valid operations for seccomp syscall. */
+ #define SECCOMP_SET_MODE_STRICT	0
+ #define SECCOMP_SET_MODE_FILTER	1
+ 
+ /* Valid flags for SECCOMP_SET_MODE_FILTER */
+ #define SECCOMP_FILTER_FLAG_TSYNC	1
+ 
++>>>>>>> c2e1f2e30daa (seccomp: implement SECCOMP_FILTER_FLAG_TSYNC)
  /*
   * All BPF programs must return a 32-bit value.
   * The bottom 16-bits are for optional return data.
diff --cc kernel/seccomp.c
index dab81904040f,74f460179171..000000000000
--- a/kernel/seccomp.c
+++ b/kernel/seccomp.c
@@@ -24,9 -26,9 +24,10 @@@
  #ifdef CONFIG_SECCOMP_FILTER
  #include <asm/syscall.h>
  #include <linux/filter.h>
+ #include <linux/pid.h>
  #include <linux/ptrace.h>
  #include <linux/security.h>
 +#include <linux/slab.h>
  #include <linux/tracehook.h>
  #include <linux/uaccess.h>
  
@@@ -236,17 -226,126 +237,125 @@@ static inline void seccomp_assign_mode(
  }
  
  #ifdef CONFIG_SECCOMP_FILTER
+ /* Returns 1 if the parent is an ancestor of the child. */
+ static int is_ancestor(struct seccomp_filter *parent,
+ 		       struct seccomp_filter *child)
+ {
+ 	/* NULL is the root ancestor. */
+ 	if (parent == NULL)
+ 		return 1;
+ 	for (; child; child = child->prev)
+ 		if (child == parent)
+ 			return 1;
+ 	return 0;
+ }
+ 
+ /**
+  * seccomp_can_sync_threads: checks if all threads can be synchronized
+  *
+  * Expects sighand and cred_guard_mutex locks to be held.
+  *
+  * Returns 0 on success, -ve on error, or the pid of a thread which was
+  * either not in the correct seccomp mode or it did not have an ancestral
+  * seccomp filter.
+  */
+ static inline pid_t seccomp_can_sync_threads(void)
+ {
+ 	struct task_struct *thread, *caller;
+ 
+ 	BUG_ON(!mutex_is_locked(&current->signal->cred_guard_mutex));
+ 	BUG_ON(!spin_is_locked(&current->sighand->siglock));
+ 
+ 	/* Validate all threads being eligible for synchronization. */
+ 	caller = current;
+ 	for_each_thread(caller, thread) {
+ 		pid_t failed;
+ 
+ 		/* Skip current, since it is initiating the sync. */
+ 		if (thread == caller)
+ 			continue;
+ 
+ 		if (thread->seccomp.mode == SECCOMP_MODE_DISABLED ||
+ 		    (thread->seccomp.mode == SECCOMP_MODE_FILTER &&
+ 		     is_ancestor(thread->seccomp.filter,
+ 				 caller->seccomp.filter)))
+ 			continue;
+ 
+ 		/* Return the first thread that cannot be synchronized. */
+ 		failed = task_pid_vnr(thread);
+ 		/* If the pid cannot be resolved, then return -ESRCH */
+ 		if (unlikely(WARN_ON(failed == 0)))
+ 			failed = -ESRCH;
+ 		return failed;
+ 	}
+ 
+ 	return 0;
+ }
+ 
+ /**
+  * seccomp_sync_threads: sets all threads to use current's filter
+  *
+  * Expects sighand and cred_guard_mutex locks to be held, and for
+  * seccomp_can_sync_threads() to have returned success already
+  * without dropping the locks.
+  *
+  */
+ static inline void seccomp_sync_threads(void)
+ {
+ 	struct task_struct *thread, *caller;
+ 
+ 	BUG_ON(!mutex_is_locked(&current->signal->cred_guard_mutex));
+ 	BUG_ON(!spin_is_locked(&current->sighand->siglock));
+ 
+ 	/* Synchronize all threads. */
+ 	caller = current;
+ 	for_each_thread(caller, thread) {
+ 		/* Skip current, since it needs no changes. */
+ 		if (thread == caller)
+ 			continue;
+ 
+ 		/* Get a task reference for the new leaf node. */
+ 		get_seccomp_filter(caller);
+ 		/*
+ 		 * Drop the task reference to the shared ancestor since
+ 		 * current's path will hold a reference.  (This also
+ 		 * allows a put before the assignment.)
+ 		 */
+ 		put_seccomp_filter(thread);
+ 		smp_store_release(&thread->seccomp.filter,
+ 				  caller->seccomp.filter);
+ 		/*
+ 		 * Opt the other thread into seccomp if needed.
+ 		 * As threads are considered to be trust-realm
+ 		 * equivalent (see ptrace_may_access), it is safe to
+ 		 * allow one thread to transition the other.
+ 		 */
+ 		if (thread->seccomp.mode == SECCOMP_MODE_DISABLED) {
+ 			/*
+ 			 * Don't let an unprivileged task work around
+ 			 * the no_new_privs restriction by creating
+ 			 * a thread that sets it up, enters seccomp,
+ 			 * then dies.
+ 			 */
+ 			if (task_no_new_privs(caller))
+ 				task_set_no_new_privs(thread);
+ 
+ 			seccomp_assign_mode(thread, SECCOMP_MODE_FILTER);
+ 		}
+ 	}
+ }
+ 
  /**
 - * seccomp_prepare_filter: Prepares a seccomp filter for use.
 + * seccomp_attach_filter: Attaches a seccomp filter to current.
   * @fprog: BPF program to install
   *
 - * Returns filter on success or an ERR_PTR on failure.
 + * Returns 0 on success or an errno on failure.
   */
 -static struct seccomp_filter *seccomp_prepare_filter(struct sock_fprog *fprog)
 +static long seccomp_attach_filter(struct sock_fprog *fprog)
  {
  	struct seccomp_filter *filter;
 -	unsigned long fp_size;
 -	struct sock_filter *fp;
 -	int new_len;
 +	unsigned long fp_size = fprog->len * sizeof(struct sock_filter);
 +	unsigned long total_insns = fprog->len;
  	long ret;
  
  	if (fprog->len == 0 || fprog->len > BPF_MAXINSNS)
@@@ -325,9 -444,56 +434,60 @@@ long seccomp_attach_user_filter(char __
  #endif
  	if (copy_from_user(&fprog, user_filter, sizeof(fprog)))
  		goto out;
 -	filter = seccomp_prepare_filter(&fprog);
 +	ret = seccomp_attach_filter(&fprog);
  out:
++<<<<<<< HEAD
 +	return ret;
++=======
+ 	return filter;
+ }
+ 
+ /**
+  * seccomp_attach_filter: validate and attach filter
+  * @flags:  flags to change filter behavior
+  * @filter: seccomp filter to add to the current process
+  *
+  * Caller must be holding current->sighand->siglock lock.
+  *
+  * Returns 0 on success, -ve on error.
+  */
+ static long seccomp_attach_filter(unsigned int flags,
+ 				  struct seccomp_filter *filter)
+ {
+ 	unsigned long total_insns;
+ 	struct seccomp_filter *walker;
+ 
+ 	BUG_ON(!spin_is_locked(&current->sighand->siglock));
+ 
+ 	/* Validate resulting filter length. */
+ 	total_insns = filter->prog->len;
+ 	for (walker = current->seccomp.filter; walker; walker = walker->prev)
+ 		total_insns += walker->prog->len + 4;  /* 4 instr penalty */
+ 	if (total_insns > MAX_INSNS_PER_PATH)
+ 		return -ENOMEM;
+ 
+ 	/* If thread sync has been requested, check that it is possible. */
+ 	if (flags & SECCOMP_FILTER_FLAG_TSYNC) {
+ 		int ret;
+ 
+ 		ret = seccomp_can_sync_threads();
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	/*
+ 	 * If there is an existing filter, make it the prev and don't drop its
+ 	 * task reference.
+ 	 */
+ 	filter->prev = current->seccomp.filter;
+ 	current->seccomp.filter = filter;
+ 
+ 	/* Now that the new filter is in place, synchronize to all threads. */
+ 	if (flags & SECCOMP_FILTER_FLAG_TSYNC)
+ 		seccomp_sync_threads();
+ 
+ 	return 0;
++>>>>>>> c2e1f2e30daa (seccomp: implement SECCOMP_FILTER_FLAG_TSYNC)
  }
  
  /* get_seccomp_filter - increments the reference count of the filter on @tsk */
@@@ -521,20 -704,48 +681,50 @@@ out
   *
   * Returns 0 on success or -EINVAL on failure.
   */
 -static long seccomp_set_mode_filter(unsigned int flags,
 -				    const char __user *filter)
 +static long seccomp_set_mode_filter(char __user *filter)
  {
  	const unsigned long seccomp_mode = SECCOMP_MODE_FILTER;
 -	struct seccomp_filter *prepared = NULL;
  	long ret = -EINVAL;
  
++<<<<<<< HEAD
++=======
+ 	/* Validate flags. */
+ 	if (flags & ~SECCOMP_FILTER_FLAG_MASK)
+ 		return -EINVAL;
+ 
+ 	/* Prepare the new filter before holding any locks. */
+ 	prepared = seccomp_prepare_user_filter(filter);
+ 	if (IS_ERR(prepared))
+ 		return PTR_ERR(prepared);
+ 
+ 	/*
+ 	 * Make sure we cannot change seccomp or nnp state via TSYNC
+ 	 * while another thread is in the middle of calling exec.
+ 	 */
+ 	if (flags & SECCOMP_FILTER_FLAG_TSYNC &&
+ 	    mutex_lock_killable(&current->signal->cred_guard_mutex))
+ 		goto out_free;
+ 
+ 	spin_lock_irq(&current->sighand->siglock);
+ 
++>>>>>>> c2e1f2e30daa (seccomp: implement SECCOMP_FILTER_FLAG_TSYNC)
  	if (!seccomp_may_assign_mode(seccomp_mode))
  		goto out;
  
 -	ret = seccomp_attach_filter(flags, prepared);
 +	ret = seccomp_attach_user_filter(filter);
  	if (ret)
  		goto out;
 -	/* Do not free the successfully attached filter. */
 -	prepared = NULL;
  
 -	seccomp_assign_mode(current, seccomp_mode);
 +	seccomp_assign_mode(seccomp_mode);
  out:
++<<<<<<< HEAD
++=======
+ 	spin_unlock_irq(&current->sighand->siglock);
+ 	if (flags & SECCOMP_FILTER_FLAG_TSYNC)
+ 		mutex_unlock(&current->signal->cred_guard_mutex);
+ out_free:
+ 	seccomp_filter_free(prepared);
++>>>>>>> c2e1f2e30daa (seccomp: implement SECCOMP_FILTER_FLAG_TSYNC)
  	return ret;
  }
  #else
diff --git a/fs/exec.c b/fs/exec.c
index 9ca6d51722de..403611809292 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1285,7 +1285,7 @@ static void bprm_fill_uid(struct linux_binprm *bprm)
 /*
  * determine how safe it is to execute the proposed program
  * - the caller must hold ->cred_guard_mutex to protect against
- *   PTRACE_ATTACH
+ *   PTRACE_ATTACH or seccomp thread-sync
  */
 static int check_unsafe_exec(struct linux_binprm *bprm)
 {
diff --git a/include/linux/seccomp.h b/include/linux/seccomp.h
index 6f19cfd1840e..5e272941eb7c 100644
--- a/include/linux/seccomp.h
+++ b/include/linux/seccomp.h
@@ -3,6 +3,8 @@
 
 #include <uapi/linux/seccomp.h>
 
+#define SECCOMP_FILTER_FLAG_MASK	(SECCOMP_FILTER_FLAG_TSYNC)
+
 #ifdef CONFIG_SECCOMP
 
 #include <linux/thread_info.h>
* Unmerged path include/uapi/linux/seccomp.h
* Unmerged path kernel/seccomp.c
