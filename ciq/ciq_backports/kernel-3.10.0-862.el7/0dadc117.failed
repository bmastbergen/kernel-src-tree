cls_flower: use tcf_exts_get_net() before call_rcu()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Cong Wang <xiyou.wangcong@gmail.com>
commit 0dadc117ac8bc78d8144e862ac8ad23f342f9ea8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0dadc117.failed

Hold netns refcnt before call_rcu() and release it after
the tcf_exts_destroy() is done.

Note, on ->destroy() path we have to respect the return value
of tcf_exts_get_net(), on other paths it should always return
true, so we don't need to care.

	Cc: Lucas Bates <lucasb@mojatatu.com>
	Cc: Jamal Hadi Salim <jhs@mojatatu.com>
	Cc: Jiri Pirko <jiri@resnulli.us>
	Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 0dadc117ac8bc78d8144e862ac8ad23f342f9ea8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/cls_flower.c
diff --cc net/sched/cls_flower.c
index bef481fd9fe0,7a838d1c1c00..000000000000
--- a/net/sched/cls_flower.c
+++ b/net/sched/cls_flower.c
@@@ -215,6 -218,22 +215,25 @@@ static int fl_init(struct tcf_proto *tp
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static void __fl_destroy_filter(struct cls_fl_filter *f)
+ {
+ 	tcf_exts_destroy(&f->exts);
+ 	tcf_exts_put_net(&f->exts);
+ 	kfree(f);
+ }
+ 
+ static void fl_destroy_filter_work(struct work_struct *work)
+ {
+ 	struct cls_fl_filter *f = container_of(work, struct cls_fl_filter, work);
+ 
+ 	rtnl_lock();
+ 	__fl_destroy_filter(f);
+ 	rtnl_unlock();
+ }
+ 
++>>>>>>> 0dadc117ac8b (cls_flower: use tcf_exts_get_net() before call_rcu())
  static void fl_destroy_filter(struct rcu_head *head)
  {
  	struct cls_fl_filter *f = container_of(head, struct cls_fl_filter, rcu);
@@@ -997,11 -990,14 +1019,12 @@@ static int fl_change(struct net *net, s
  			fl_hw_destroy_filter(tp, fold);
  	}
  
 -	*arg = fnew;
 +	*arg = (unsigned long) fnew;
  
  	if (fold) {
 -		fnew->handle = handle;
 -		idr_replace_ext(&head->handle_idr, fnew, fnew->handle);
  		list_replace_rcu(&fold->list, &fnew->list);
  		tcf_unbind_filter(tp, &fold->res);
+ 		tcf_exts_get_net(&fold->exts);
  		call_rcu(&fold->rcu, fl_destroy_filter);
  	} else {
  		list_add_tail_rcu(&fnew->list, &head->filters);
* Unmerged path net/sched/cls_flower.c
