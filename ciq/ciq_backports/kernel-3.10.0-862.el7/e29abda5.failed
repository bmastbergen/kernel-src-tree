crypto: chcr - Increase priority of AEAD algos.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [crypto] chcr - Increase priority of AEAD algos (Arjun Vynipadath) [1458315]
Rebuild_FUZZ: 89.41%
commit-author Harsh Jain <harsh@chelsio.com>
commit e29abda591b517be47df7479962ce6baee302a85
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e29abda5.failed

templates(gcm,ccm etc) inherit priority value of driver to
calculate its priority. In some cases template priority becomes
 more than driver priority for same algo.
Without this patch we will not be able to use driver authenc algos. It will
be good if it pushed in stable kernel.

	Signed-off-by: Harsh Jain <harsh@chelsio.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit e29abda591b517be47df7479962ce6baee302a85)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/chelsio/chcr_algo.c
#	drivers/crypto/chelsio/chcr_crypto.h
diff --cc drivers/crypto/chelsio/chcr_algo.c
index bda117371c9f,7d595912909c..000000000000
--- a/drivers/crypto/chelsio/chcr_algo.c
+++ b/drivers/crypto/chelsio/chcr_algo.c
@@@ -1440,6 -2664,210 +1440,213 @@@ static struct chcr_alg_template driver_
  			}
  		}
  	},
++<<<<<<< HEAD
++=======
+ 	/* Add AEAD Algorithms */
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_GCM,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "gcm(aes)",
+ 				.cra_driver_name = "gcm-aes-chcr",
+ 				.cra_blocksize	= 1,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_gcm_ctx),
+ 			},
+ 			.ivsize = 12,
+ 			.maxauthsize = GHASH_DIGEST_SIZE,
+ 			.setkey = chcr_gcm_setkey,
+ 			.setauthsize = chcr_gcm_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_RFC4106,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "rfc4106(gcm(aes))",
+ 				.cra_driver_name = "rfc4106-gcm-aes-chcr",
+ 				.cra_blocksize	 = 1,
+ 				.cra_priority = CHCR_AEAD_PRIORITY + 1,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_gcm_ctx),
+ 
+ 			},
+ 			.ivsize = 8,
+ 			.maxauthsize	= GHASH_DIGEST_SIZE,
+ 			.setkey = chcr_gcm_setkey,
+ 			.setauthsize	= chcr_4106_4309_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_CCM,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "ccm(aes)",
+ 				.cra_driver_name = "ccm-aes-chcr",
+ 				.cra_blocksize	 = 1,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx),
+ 
+ 			},
+ 			.ivsize = AES_BLOCK_SIZE,
+ 			.maxauthsize	= GHASH_DIGEST_SIZE,
+ 			.setkey = chcr_aead_ccm_setkey,
+ 			.setauthsize	= chcr_ccm_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_RFC4309,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "rfc4309(ccm(aes))",
+ 				.cra_driver_name = "rfc4309-ccm-aes-chcr",
+ 				.cra_blocksize	 = 1,
+ 				.cra_priority = CHCR_AEAD_PRIORITY + 1,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx),
+ 
+ 			},
+ 			.ivsize = 8,
+ 			.maxauthsize	= GHASH_DIGEST_SIZE,
+ 			.setkey = chcr_aead_rfc4309_setkey,
+ 			.setauthsize = chcr_4106_4309_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_AUTHENC,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "authenc(hmac(sha1),cbc(aes))",
+ 				.cra_driver_name =
+ 					"authenc-hmac-sha1-cbc-aes-chcr",
+ 				.cra_blocksize	 = AES_BLOCK_SIZE,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_authenc_ctx),
+ 
+ 			},
+ 			.ivsize = AES_BLOCK_SIZE,
+ 			.maxauthsize = SHA1_DIGEST_SIZE,
+ 			.setkey = chcr_authenc_setkey,
+ 			.setauthsize = chcr_authenc_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_AUTHENC,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 
+ 				.cra_name = "authenc(hmac(sha256),cbc(aes))",
+ 				.cra_driver_name =
+ 					"authenc-hmac-sha256-cbc-aes-chcr",
+ 				.cra_blocksize	 = AES_BLOCK_SIZE,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_authenc_ctx),
+ 
+ 			},
+ 			.ivsize = AES_BLOCK_SIZE,
+ 			.maxauthsize	= SHA256_DIGEST_SIZE,
+ 			.setkey = chcr_authenc_setkey,
+ 			.setauthsize = chcr_authenc_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_AUTHENC,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "authenc(hmac(sha224),cbc(aes))",
+ 				.cra_driver_name =
+ 					"authenc-hmac-sha224-cbc-aes-chcr",
+ 				.cra_blocksize	 = AES_BLOCK_SIZE,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_authenc_ctx),
+ 			},
+ 			.ivsize = AES_BLOCK_SIZE,
+ 			.maxauthsize = SHA224_DIGEST_SIZE,
+ 			.setkey = chcr_authenc_setkey,
+ 			.setauthsize = chcr_authenc_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_AUTHENC,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "authenc(hmac(sha384),cbc(aes))",
+ 				.cra_driver_name =
+ 					"authenc-hmac-sha384-cbc-aes-chcr",
+ 				.cra_blocksize	 = AES_BLOCK_SIZE,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_authenc_ctx),
+ 
+ 			},
+ 			.ivsize = AES_BLOCK_SIZE,
+ 			.maxauthsize = SHA384_DIGEST_SIZE,
+ 			.setkey = chcr_authenc_setkey,
+ 			.setauthsize = chcr_authenc_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_AUTHENC,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "authenc(hmac(sha512),cbc(aes))",
+ 				.cra_driver_name =
+ 					"authenc-hmac-sha512-cbc-aes-chcr",
+ 				.cra_blocksize	 = AES_BLOCK_SIZE,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_authenc_ctx),
+ 
+ 			},
+ 			.ivsize = AES_BLOCK_SIZE,
+ 			.maxauthsize = SHA512_DIGEST_SIZE,
+ 			.setkey = chcr_authenc_setkey,
+ 			.setauthsize = chcr_authenc_setauthsize,
+ 		}
+ 	},
+ 	{
+ 		.type = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_SUB_TYPE_AEAD_NULL,
+ 		.is_registered = 0,
+ 		.alg.aead = {
+ 			.base = {
+ 				.cra_name = "authenc(digest_null,cbc(aes))",
+ 				.cra_driver_name =
+ 					"authenc-digest_null-cbc-aes-chcr",
+ 				.cra_blocksize	 = AES_BLOCK_SIZE,
+ 				.cra_priority = CHCR_AEAD_PRIORITY,
+ 				.cra_ctxsize =	sizeof(struct chcr_context) +
+ 						sizeof(struct chcr_aead_ctx) +
+ 						sizeof(struct chcr_authenc_ctx),
+ 
+ 			},
+ 			.ivsize  = AES_BLOCK_SIZE,
+ 			.maxauthsize = 0,
+ 			.setkey  = chcr_aead_digest_null_setkey,
+ 			.setauthsize = chcr_authenc_null_setauthsize,
+ 		}
+ 	},
++>>>>>>> e29abda591b5 (crypto: chcr - Increase priority of AEAD algos.)
  };
  
  /*
@@@ -1491,6 -2924,17 +1698,20 @@@ static int chcr_register_alg(void
  			err = crypto_register_alg(&driver_algs[i].alg.crypto);
  			name = driver_algs[i].alg.crypto.cra_driver_name;
  			break;
++<<<<<<< HEAD
++=======
+ 		case CRYPTO_ALG_TYPE_AEAD:
+ 			driver_algs[i].alg.aead.base.cra_flags =
+ 				CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_ASYNC;
+ 			driver_algs[i].alg.aead.encrypt = chcr_aead_encrypt;
+ 			driver_algs[i].alg.aead.decrypt = chcr_aead_decrypt;
+ 			driver_algs[i].alg.aead.init = chcr_aead_cra_init;
+ 			driver_algs[i].alg.aead.exit = chcr_aead_cra_exit;
+ 			driver_algs[i].alg.aead.base.cra_module = THIS_MODULE;
+ 			err = crypto_register_aead(&driver_algs[i].alg.aead);
+ 			name = driver_algs[i].alg.aead.base.cra_driver_name;
+ 			break;
++>>>>>>> e29abda591b5 (crypto: chcr - Increase priority of AEAD algos.)
  		case CRYPTO_ALG_TYPE_AHASH:
  			a_hash = &driver_algs[i].alg.hash;
  			a_hash->update = chcr_ahash_update;
diff --cc drivers/crypto/chelsio/chcr_crypto.h
index c00250405824,4469feae84a2..000000000000
--- a/drivers/crypto/chelsio/chcr_crypto.h
+++ b/drivers/crypto/chelsio/chcr_crypto.h
@@@ -40,8 -48,8 +40,13 @@@
   * giving the processed data
   */
  
++<<<<<<< HEAD
 +#define CHCR_CRA_PRIORITY 300
 +
++=======
+ #define CHCR_CRA_PRIORITY 500
+ #define CHCR_AEAD_PRIORITY 6000
++>>>>>>> e29abda591b5 (crypto: chcr - Increase priority of AEAD algos.)
  #define CHCR_AES_MAX_KEY_LEN  (2 * (AES_MAX_KEY_SIZE)) /* consider xts */
  #define CHCR_MAX_CRYPTO_IV_LEN 16 /* AES IV len */
  
* Unmerged path drivers/crypto/chelsio/chcr_algo.c
* Unmerged path drivers/crypto/chelsio/chcr_crypto.h
