cpufreq: intel_pstate: Avoid percentages in limits-related computations

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [cpufreq] intel_pstate: Avoid percentages in limits-related computations (Prarit Bhargava) [1465349]
Rebuild_FUZZ: 93.23%
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit e4c204ced0ac25e02e58679f07096c5bac0b0d96
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e4c204ce.failed

Currently, intel_pstate_update_perf_limits() first converts the
policy minimum and maximum limits into percentages of the maximum
turbo frequency (rounding up to an integer) and then converts these
percentages to fractions (by using fixed-point arithmetic to divide
them by 100).

That introduces a rounding error unnecessarily, because the fractions
can be obtained by carrying out fixed-point divisions directly on the
input numbers.

Rework the computations in intel_pstate_hwp_set() to use fractions
instead of percentages (and drop redundant local variables from
there) and modify intel_pstate_update_perf_limits() to compute the
fractions directly and percentages out of them.

While at it, introduce percent_ext_fp() for converting percentages
to fractions (with extended number of fraction bits) and use it in
the computations.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
(cherry picked from commit e4c204ced0ac25e02e58679f07096c5bac0b0d96)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/cpufreq/intel_pstate.c
diff --cc drivers/cpufreq/intel_pstate.c
index 9b85edc571c0,08e134ffba68..000000000000
--- a/drivers/cpufreq/intel_pstate.c
+++ b/drivers/cpufreq/intel_pstate.c
@@@ -67,12 -74,27 +67,30 @@@ static inline int ceiling_fp(int32_t x
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static inline u64 mul_ext_fp(u64 x, u64 y)
+ {
+ 	return (x * y) >> EXT_FRAC_BITS;
+ }
+ 
+ static inline u64 div_ext_fp(u64 x, u64 y)
+ {
+ 	return div64_u64(x << EXT_FRAC_BITS, y);
+ }
+ 
+ static inline int32_t percent_ext_fp(int percent)
+ {
+ 	return div_ext_fp(percent, 100);
+ }
+ 
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
  /**
   * struct sample -	Store performance sample
 - * @core_avg_perf:	Ratio of APERF/MPERF which is the actual average
 + * @core_pct_busy:	Ratio of APERF/MPERF in percent, which is actual
   *			performance during last sample period
   * @busy_scaled:	Scaled busy value which is used to calculate next
 - *			P state. This can be different than core_avg_perf
 + *			P state. This can be different than core_pct_busy
   *			to account for cpu idle period
   * @aperf:		Difference of actual performance frequency clock count
   *			read from APERF MSR between last and current sample
@@@ -551,31 -631,300 +569,50 @@@ static inline void update_turbo_state(v
  		 cpu->pstate.max_pstate == cpu->pstate.turbo_pstate);
  }
  
 -static s16 intel_pstate_get_epb(struct cpudata *cpu_data)
 -{
 -	u64 epb;
 -	int ret;
 -
 -	if (!static_cpu_has(X86_FEATURE_EPB))
 -		return -ENXIO;
 -
 -	ret = rdmsrl_on_cpu(cpu_data->cpu, MSR_IA32_ENERGY_PERF_BIAS, &epb);
 -	if (ret)
 -		return (s16)ret;
 -
 -	return (s16)(epb & 0x0f);
 -}
 -
 -static s16 intel_pstate_get_epp(struct cpudata *cpu_data, u64 hwp_req_data)
 -{
 -	s16 epp;
 -
 -	if (static_cpu_has(X86_FEATURE_HWP_EPP)) {
 -		/*
 -		 * When hwp_req_data is 0, means that caller didn't read
 -		 * MSR_HWP_REQUEST, so need to read and get EPP.
 -		 */
 -		if (!hwp_req_data) {
 -			epp = rdmsrl_on_cpu(cpu_data->cpu, MSR_HWP_REQUEST,
 -					    &hwp_req_data);
 -			if (epp)
 -				return epp;
 -		}
 -		epp = (hwp_req_data >> 24) & 0xff;
 -	} else {
 -		/* When there is no EPP present, HWP uses EPB settings */
 -		epp = intel_pstate_get_epb(cpu_data);
 -	}
 -
 -	return epp;
 -}
 -
 -static int intel_pstate_set_epb(int cpu, s16 pref)
 -{
 -	u64 epb;
 -	int ret;
 -
 -	if (!static_cpu_has(X86_FEATURE_EPB))
 -		return -ENXIO;
 -
 -	ret = rdmsrl_on_cpu(cpu, MSR_IA32_ENERGY_PERF_BIAS, &epb);
 -	if (ret)
 -		return ret;
 -
 -	epb = (epb & ~0x0f) | pref;
 -	wrmsrl_on_cpu(cpu, MSR_IA32_ENERGY_PERF_BIAS, epb);
 -
 -	return 0;
 -}
 -
 -/*
 - * EPP/EPB display strings corresponding to EPP index in the
 - * energy_perf_strings[]
 - *	index		String
 - *-------------------------------------
 - *	0		default
 - *	1		performance
 - *	2		balance_performance
 - *	3		balance_power
 - *	4		power
 - */
 -static const char * const energy_perf_strings[] = {
 -	"default",
 -	"performance",
 -	"balance_performance",
 -	"balance_power",
 -	"power",
 -	NULL
 -};
 -
 -static int intel_pstate_get_energy_pref_index(struct cpudata *cpu_data)
 -{
 -	s16 epp;
 -	int index = -EINVAL;
 -
 -	epp = intel_pstate_get_epp(cpu_data, 0);
 -	if (epp < 0)
 -		return epp;
 -
 -	if (static_cpu_has(X86_FEATURE_HWP_EPP)) {
 -		/*
 -		 * Range:
 -		 *	0x00-0x3F	:	Performance
 -		 *	0x40-0x7F	:	Balance performance
 -		 *	0x80-0xBF	:	Balance power
 -		 *	0xC0-0xFF	:	Power
 -		 * The EPP is a 8 bit value, but our ranges restrict the
 -		 * value which can be set. Here only using top two bits
 -		 * effectively.
 -		 */
 -		index = (epp >> 6) + 1;
 -	} else if (static_cpu_has(X86_FEATURE_EPB)) {
 -		/*
 -		 * Range:
 -		 *	0x00-0x03	:	Performance
 -		 *	0x04-0x07	:	Balance performance
 -		 *	0x08-0x0B	:	Balance power
 -		 *	0x0C-0x0F	:	Power
 -		 * The EPB is a 4 bit value, but our ranges restrict the
 -		 * value which can be set. Here only using top two bits
 -		 * effectively.
 -		 */
 -		index = (epp >> 2) + 1;
 -	}
 -
 -	return index;
 -}
 -
 -static int intel_pstate_set_energy_pref_index(struct cpudata *cpu_data,
 -					      int pref_index)
 -{
 -	int epp = -EINVAL;
 -	int ret;
 -
 -	if (!pref_index)
 -		epp = cpu_data->epp_default;
 -
 -	mutex_lock(&intel_pstate_limits_lock);
 -
 -	if (static_cpu_has(X86_FEATURE_HWP_EPP)) {
 -		u64 value;
 -
 -		ret = rdmsrl_on_cpu(cpu_data->cpu, MSR_HWP_REQUEST, &value);
 -		if (ret)
 -			goto return_pref;
 -
 -		value &= ~GENMASK_ULL(31, 24);
 -
 -		/*
 -		 * If epp is not default, convert from index into
 -		 * energy_perf_strings to epp value, by shifting 6
 -		 * bits left to use only top two bits in epp.
 -		 * The resultant epp need to shifted by 24 bits to
 -		 * epp position in MSR_HWP_REQUEST.
 -		 */
 -		if (epp == -EINVAL)
 -			epp = (pref_index - 1) << 6;
 -
 -		value |= (u64)epp << 24;
 -		ret = wrmsrl_on_cpu(cpu_data->cpu, MSR_HWP_REQUEST, value);
 -	} else {
 -		if (epp == -EINVAL)
 -			epp = (pref_index - 1) << 2;
 -		ret = intel_pstate_set_epb(cpu_data->cpu, epp);
 -	}
 -return_pref:
 -	mutex_unlock(&intel_pstate_limits_lock);
 -
 -	return ret;
 -}
 -
 -static ssize_t show_energy_performance_available_preferences(
 -				struct cpufreq_policy *policy, char *buf)
 -{
 -	int i = 0;
 -	int ret = 0;
 -
 -	while (energy_perf_strings[i] != NULL)
 -		ret += sprintf(&buf[ret], "%s ", energy_perf_strings[i++]);
 -
 -	ret += sprintf(&buf[ret], "\n");
 -
 -	return ret;
 -}
 -
 -cpufreq_freq_attr_ro(energy_performance_available_preferences);
 -
 -static ssize_t store_energy_performance_preference(
 -		struct cpufreq_policy *policy, const char *buf, size_t count)
 -{
 -	struct cpudata *cpu_data = all_cpu_data[policy->cpu];
 -	char str_preference[21];
 -	int ret, i = 0;
 -
 -	ret = sscanf(buf, "%20s", str_preference);
 -	if (ret != 1)
 -		return -EINVAL;
 -
 -	while (energy_perf_strings[i] != NULL) {
 -		if (!strcmp(str_preference, energy_perf_strings[i])) {
 -			intel_pstate_set_energy_pref_index(cpu_data, i);
 -			return count;
 -		}
 -		++i;
 -	}
 -
 -	return -EINVAL;
 -}
 -
 -static ssize_t show_energy_performance_preference(
 -				struct cpufreq_policy *policy, char *buf)
 -{
 -	struct cpudata *cpu_data = all_cpu_data[policy->cpu];
 -	int preference;
 -
 -	preference = intel_pstate_get_energy_pref_index(cpu_data);
 -	if (preference < 0)
 -		return preference;
 -
 -	return  sprintf(buf, "%s\n", energy_perf_strings[preference]);
 -}
 -
 -cpufreq_freq_attr_rw(energy_performance_preference);
 -
 -static struct freq_attr *hwp_cpufreq_attrs[] = {
 -	&energy_performance_preference,
 -	&energy_performance_available_preferences,
 -	NULL,
 -};
 -
 -static void intel_pstate_hwp_set(struct cpufreq_policy *policy)
 +static void intel_pstate_hwp_set(const struct cpumask *cpumask)
  {
 -	int min, hw_min, max, hw_max, cpu;
 -	struct perf_limits *perf_limits = limits;
 +	int min, hw_min, max, hw_max, cpu, range, adj_range;
  	u64 value, cap;
  
++<<<<<<< HEAD
 +	for_each_cpu(cpu, cpumask) {
++=======
+ 	for_each_cpu(cpu, policy->cpus) {
+ 		struct cpudata *cpu_data = all_cpu_data[cpu];
+ 		s16 epp;
+ 
+ 		if (per_cpu_limits)
+ 			perf_limits = all_cpu_data[cpu]->perf_limits;
+ 
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
  		rdmsrl_on_cpu(cpu, MSR_HWP_CAPABILITIES, &cap);
  		hw_min = HWP_LOWEST_PERF(cap);
  		if (limits->no_turbo)
  			hw_max = HWP_GUARANTEED_PERF(cap);
  		else
  			hw_max = HWP_HIGHEST_PERF(cap);
++<<<<<<< HEAD
 +		range = hw_max - hw_min;
++=======
+ 
+ 		min = fp_ext_toint(hw_max * perf_limits->min_perf);
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
  
  		rdmsrl_on_cpu(cpu, MSR_HWP_REQUEST, &value);
 -
 +		adj_range = limits->min_perf_pct * range / 100;
 +		min = hw_min + adj_range;
  		value &= ~HWP_MIN_PERF(~0L);
  		value |= HWP_MIN_PERF(min);
  
++<<<<<<< HEAD
 +		adj_range = limits->max_perf_pct * range / 100;
 +		max = hw_min + adj_range;
 +
++=======
+ 		max = fp_ext_toint(hw_max * perf_limits->max_perf);
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
  		value &= ~HWP_MAX_PERF(~0L);
  		value |= HWP_MAX_PERF(max);
 -
 -		if (cpu_data->epp_policy == cpu_data->policy)
 -			goto skip_epp;
 -
 -		cpu_data->epp_policy = cpu_data->policy;
 -
 -		if (cpu_data->epp_saved >= 0) {
 -			epp = cpu_data->epp_saved;
 -			cpu_data->epp_saved = -EINVAL;
 -			goto update_epp;
 -		}
 -
 -		if (cpu_data->policy == CPUFREQ_POLICY_PERFORMANCE) {
 -			epp = intel_pstate_get_epp(cpu_data, value);
 -			cpu_data->epp_powersave = epp;
 -			/* If EPP read was failed, then don't try to write */
 -			if (epp < 0)
 -				goto skip_epp;
 -
 -
 -			epp = 0;
 -		} else {
 -			/* skip setting EPP, when saved value is invalid */
 -			if (cpu_data->epp_powersave < 0)
 -				goto skip_epp;
 -
 -			/*
 -			 * No need to restore EPP when it is not zero. This
 -			 * means:
 -			 *  - Policy is not changed
 -			 *  - user has manually changed
 -			 *  - Error reading EPB
 -			 */
 -			epp = intel_pstate_get_epp(cpu_data, value);
 -			if (epp)
 -				goto skip_epp;
 -
 -			epp = cpu_data->epp_powersave;
 -		}
 -update_epp:
 -		if (static_cpu_has(X86_FEATURE_HWP_EPP)) {
 -			value &= ~GENMASK_ULL(31, 24);
 -			value |= (u64)epp << 24;
 -		} else {
 -			intel_pstate_set_epb(cpu, epp);
 -		}
 -skip_epp:
  		wrmsrl_on_cpu(cpu, MSR_HWP_REQUEST, value);
  	}
  }
@@@ -726,11 -1225,14 +763,21 @@@ static ssize_t store_max_perf_pct(struc
  				   limits->max_perf_pct);
  	limits->max_perf_pct = max(limits->min_perf_pct,
  				   limits->max_perf_pct);
++<<<<<<< HEAD
 +	limits->max_perf = div_fp(int_tofp(limits->max_perf_pct),
 +				  int_tofp(100));
++=======
+ 	limits->max_perf = percent_ext_fp(limits->max_perf_pct);
+ 
+ 	intel_pstate_update_policies();
+ 
+ 	mutex_unlock(&intel_pstate_limits_lock);
+ 
+ 	mutex_unlock(&intel_pstate_driver_lock);
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
  
 +	if (hwp_active)
 +		intel_pstate_hwp_set_online_cpus();
  	return count;
  }
  
@@@ -751,11 -1262,14 +798,21 @@@ static ssize_t store_min_perf_pct(struc
  				   limits->min_perf_pct);
  	limits->min_perf_pct = min(limits->max_perf_pct,
  				   limits->min_perf_pct);
++<<<<<<< HEAD
 +	limits->min_perf = div_fp(int_tofp(limits->min_perf_pct),
 +				  int_tofp(100));
++=======
+ 	limits->min_perf = percent_ext_fp(limits->min_perf_pct);
+ 
+ 	intel_pstate_update_policies();
+ 
+ 	mutex_unlock(&intel_pstate_limits_lock);
+ 
+ 	mutex_unlock(&intel_pstate_driver_lock);
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
  
 +	if (hwp_active)
 +		intel_pstate_hwp_set_online_cpus();
  	return count;
  }
  
@@@ -1424,62 -2046,130 +1481,104 @@@ static int intel_pstate_init_cpu(unsign
  
  static unsigned int intel_pstate_get(unsigned int cpu_num)
  {
 -	struct cpudata *cpu = all_cpu_data[cpu_num];
 +	struct sample *sample;
 +	struct cpudata *cpu;
  
 -	return cpu ? get_avg_frequency(cpu) : 0;
 +	cpu = all_cpu_data[cpu_num];
 +	if (!cpu)
 +		return 0;
 +	sample = &cpu->sample;
 +	return sample->freq;
  }
  
 -static void intel_pstate_set_update_util_hook(unsigned int cpu_num)
 +static int intel_pstate_set_policy(struct cpufreq_policy *policy)
  {
 -	struct cpudata *cpu = all_cpu_data[cpu_num];
 +	if (!policy->cpuinfo.max_freq)
 +		return -ENODEV;
  
 -	if (cpu->update_util_set)
 -		return;
 +	pr_debug("set_policy cpuinfo.max %u policy->max %u\n",
 +		 policy->cpuinfo.max_freq, policy->max);
 +
++<<<<<<< HEAD
 +	if (policy->policy == CPUFREQ_POLICY_PERFORMANCE &&
 +	    policy->max >= policy->cpuinfo.max_freq) {
 +		pr_debug("intel_pstate: set performance\n");
 +		limits = &performance_limits;
 +		if (hwp_active)
 +			intel_pstate_hwp_set(policy->cpus);
 +		return 0;
 +	}
  
 +	pr_debug("intel_pstate: set powersave\n");
 +	limits = &powersave_limits;
 +	limits->min_policy_pct = (policy->min * 100) / policy->cpuinfo.max_freq;
 +	limits->min_policy_pct = clamp_t(int, limits->min_policy_pct, 0 , 100);
 +	limits->max_policy_pct = DIV_ROUND_UP(policy->max * 100,
 +					      policy->cpuinfo.max_freq);
 +	limits->max_policy_pct = clamp_t(int, limits->max_policy_pct, 0 , 100);
++=======
+ 	/* Prevent intel_pstate_update_util() from using stale data. */
+ 	cpu->sample.time = 0;
+ 	cpufreq_add_update_util_hook(cpu_num, &cpu->update_util,
+ 				     intel_pstate_update_util);
+ 	cpu->update_util_set = true;
+ }
  
- 	/* Normalize user input to [min_policy_pct, max_policy_pct] */
- 	limits->min_perf_pct = max(limits->min_policy_pct,
- 				   limits->min_sysfs_pct);
- 	limits->min_perf_pct = min(limits->max_policy_pct,
- 				   limits->min_perf_pct);
- 	limits->max_perf_pct = min(limits->max_policy_pct,
- 				   limits->max_sysfs_pct);
- 	limits->max_perf_pct = max(limits->min_policy_pct,
- 				   limits->max_perf_pct);
+ static void intel_pstate_clear_update_util_hook(unsigned int cpu)
+ {
+ 	struct cpudata *cpu_data = all_cpu_data[cpu];
+ 
+ 	if (!cpu_data->update_util_set)
+ 		return;
+ 
+ 	cpufreq_remove_update_util_hook(cpu);
+ 	cpu_data->update_util_set = false;
+ 	synchronize_sched();
+ }
+ 
+ static void intel_pstate_update_perf_limits(struct cpufreq_policy *policy,
+ 					    struct perf_limits *limits)
+ {
+ 	int32_t max_policy_perf, min_policy_perf;
+ 
+ 	max_policy_perf = div_ext_fp(policy->max, policy->cpuinfo.max_freq);
+ 	max_policy_perf = clamp_t(int32_t, max_policy_perf, 0, int_ext_tofp(1));
+ 	if (policy->max == policy->min) {
+ 		min_policy_perf = max_policy_perf;
+ 	} else {
+ 		min_policy_perf = div_ext_fp(policy->min,
+ 					     policy->cpuinfo.max_freq);
+ 		min_policy_perf = clamp_t(int32_t, min_policy_perf,
+ 					  0, max_policy_perf);
+ 	}
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
+ 
+ 	/* Normalize user input to [min_perf, max_perf] */
+ 	limits->min_perf = max(min_policy_perf,
+ 			       percent_ext_fp(limits->min_sysfs_pct));
+ 	limits->min_perf = min(limits->min_perf, max_policy_perf);
+ 	limits->max_perf = min(max_policy_perf,
+ 			       percent_ext_fp(limits->max_sysfs_pct));
+ 	limits->max_perf = max(min_policy_perf, limits->max_perf);
  
- 	/* Make sure min_perf_pct <= max_perf_pct */
- 	limits->min_perf_pct = min(limits->max_perf_pct, limits->min_perf_pct);
+ 	/* Make sure min_perf <= max_perf */
+ 	limits->min_perf = min(limits->min_perf, limits->max_perf);
  
++<<<<<<< HEAD
 +	limits->min_perf = div_fp(int_tofp(limits->min_perf_pct),
 +				  int_tofp(100));
 +	limits->max_perf = div_fp(int_tofp(limits->max_perf_pct),
 +				  int_tofp(100));
 +	limits->max_perf = round_up(limits->max_perf, FRAC_BITS);
++=======
+ 	limits->max_perf = round_up(limits->max_perf, EXT_FRAC_BITS);
+ 	limits->min_perf = round_up(limits->min_perf, EXT_FRAC_BITS);
+ 	limits->max_perf_pct = fp_ext_toint(limits->max_perf * 100);
+ 	limits->min_perf_pct = fp_ext_toint(limits->min_perf * 100);
++>>>>>>> e4c204ced0ac (cpufreq: intel_pstate: Avoid percentages in limits-related computations)
  
 -	pr_debug("cpu:%d max_perf_pct:%d min_perf_pct:%d\n", policy->cpu,
 -		 limits->max_perf_pct, limits->min_perf_pct);
 -}
 -
 -static int intel_pstate_set_policy(struct cpufreq_policy *policy)
 -{
 -	struct cpudata *cpu;
 -	struct perf_limits *perf_limits = NULL;
 -
 -	if (!policy->cpuinfo.max_freq)
 -		return -ENODEV;
 -
 -	pr_debug("set_policy cpuinfo.max %u policy->max %u\n",
 -		 policy->cpuinfo.max_freq, policy->max);
 -
 -	cpu = all_cpu_data[policy->cpu];
 -	cpu->policy = policy->policy;
 -
 -	if (cpu->pstate.max_pstate_physical > cpu->pstate.max_pstate &&
 -	    policy->max < policy->cpuinfo.max_freq &&
 -	    policy->max > cpu->pstate.max_pstate * cpu->pstate.scaling) {
 -		pr_debug("policy->max > max non turbo frequency\n");
 -		policy->max = policy->cpuinfo.max_freq;
 -	}
 -
 -	if (per_cpu_limits)
 -		perf_limits = cpu->perf_limits;
 -
 -	mutex_lock(&intel_pstate_limits_lock);
 -
 -	if (policy->policy == CPUFREQ_POLICY_PERFORMANCE) {
 -		pr_debug("set performance\n");
 -		if (!perf_limits) {
 -			limits = &performance_limits;
 -			perf_limits = limits;
 -		}
 -	} else {
 -		pr_debug("set powersave\n");
 -		if (!perf_limits) {
 -			limits = &powersave_limits;
 -			perf_limits = limits;
 -		}
 -
 -	}
 -
 -	intel_pstate_update_perf_limits(policy, perf_limits);
 -
 -	if (cpu->policy == CPUFREQ_POLICY_PERFORMANCE) {
 -		/*
 -		 * NOHZ_FULL CPUs need this as the governor callback may not
 -		 * be invoked on them.
 -		 */
 -		intel_pstate_clear_update_util_hook(policy->cpu);
 -		intel_pstate_max_within_limits(cpu);
 -	}
 -
 -	intel_pstate_set_update_util_hook(policy->cpu);
 -
 -	intel_pstate_hwp_set_policy(policy);
 -
 -	mutex_unlock(&intel_pstate_limits_lock);
 +	if (hwp_active)
 +		intel_pstate_hwp_set(policy->cpus);
  
  	return 0;
  }
* Unmerged path drivers/cpufreq/intel_pstate.c
