PCI: hv: Use page allocation for hbus structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [pci] hv: Use page allocation for hbus structure (Vitaly Kuznetsov) [1459202]
Rebuild_FUZZ: 94.38%
commit-author Jork Loeser <jloeser@microsoft.com>
commit be66b673659116930f2da2f41ec79c9d1279cd8f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/be66b673.failed

The hv_pcibus_device structure contains an in-memory hypercall argument
that must not cross a page boundary.  Allocate the structure as a page to
ensure that.

	Signed-off-by: Jork Loeser <jloeser@microsoft.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Reviewed-by: K. Y. Srinivasan <kys@microsoft.com>
	Acked-by: K. Y. Srinivasan <kys@microsoft.com>
(cherry picked from commit be66b673659116930f2da2f41ec79c9d1279cd8f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/pci-hyperv.c
diff --cc drivers/pci/pci-hyperv.c
index 1ea5749f5262,6e4b02678b7a..000000000000
--- a/drivers/pci/pci-hyperv.c
+++ b/drivers/pci/pci-hyperv.c
@@@ -375,7 -378,14 +375,17 @@@ struct hv_pcibus_device 
  
  	struct list_head children;
  	struct list_head dr_list;
++<<<<<<< HEAD:drivers/pci/pci-hyperv.c
++=======
+ 
+ 	struct msi_domain_info msi_info;
+ 	struct msi_controller msi_chip;
+ 	struct irq_domain *irq_domain;
+ 
+ 	/* hypercall arg, must not cross page boundary */
++>>>>>>> be66b6736591 (PCI: hv: Use page allocation for hbus structure):drivers/pci/host/pci-hyperv.c
  	struct retarget_msi_interrupt retarget_msi_interrupt_params;
+ 
  	spinlock_t retarget_msi_interrupt_lock;
  };
  
@@@ -2286,9 -2391,11 +2302,9 @@@ static int hv_pci_remove(struct hv_devi
  	hv_free_config_window(hbus);
  	pci_free_resource_list(&hbus->resources_for_children);
  	hv_pci_free_bridge_windows(hbus);
 -	irq_domain_remove(hbus->irq_domain);
 -	irq_domain_free_fwnode(hbus->sysdata.fwnode);
  	put_hvpcibus(hbus);
  	wait_for_completion(&hbus->remove_event);
- 	kfree(hbus);
+ 	free_page((unsigned long)hbus);
  	return 0;
  }
  
* Unmerged path drivers/pci/pci-hyperv.c
