net: Busy polling should ignore sender CPUs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] Busy polling should ignore sender CPUs (Ivan Vecera) [1489406]
Rebuild_FUZZ: 93.83%
commit-author Alexander Duyck <alexander.h.duyck@intel.com>
commit 545cd5e5ec5477c325e4098b6fd21213dceda408
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/545cd5e5.failed

This patch is a cleanup/fix for NAPI IDs following the changes that made it
so that sender_cpu and napi_id were doing a better job of sharing the same
location in the sk_buff.

One issue I found is that we weren't validating the napi_id as being valid
before we started trying to setup the busy polling.  This change corrects
that by using the MIN_NAPI_ID value that is now used in both allocating the
NAPI IDs, as well as validating them.

	Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
	Acked-by: Eric Dumazet <edumazet@google.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 545cd5e5ec5477c325e4098b6fd21213dceda408)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/busy_poll.h
#	net/core/dev.c
diff --cc include/net/busy_poll.h
index 0e737177db2a,3fcda9e70c3f..000000000000
--- a/include/net/busy_poll.h
+++ b/include/net/busy_poll.h
@@@ -33,9 -35,11 +33,17 @@@ struct napi_struct
  extern unsigned int sysctl_net_busy_read __read_mostly;
  extern unsigned int sysctl_net_busy_poll __read_mostly;
  
++<<<<<<< HEAD
 +/* return values from ndo_ll_poll */
 +#define LL_FLUSH_FAILED		-1
 +#define LL_FLUSH_BUSY		-2
++=======
+ /*		0 - Reserved to indicate value not set
+  *     1..NR_CPUS - Reserved for sender_cpu
+  *  NR_CPUS+1..~0 - Region available for NAPI IDs
+  */
+ #define MIN_NAPI_ID ((unsigned int)(NR_CPUS + 1))
++>>>>>>> 545cd5e5ec54 (net: Busy polling should ignore sender CPUs)
  
  static inline bool net_busy_loop_on(void)
  {
diff --cc net/core/dev.c
index a40c9678b9f6,ab337bf5bbf4..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -4796,9 -5032,50 +4796,22 @@@ static struct napi_struct *napi_by_id(u
  bool sk_busy_loop(struct sock *sk, int nonblock)
  {
  	unsigned long end_time = !nonblock ? sk_busy_loop_end_time(sk) : 0;
 -	int (*napi_poll)(struct napi_struct *napi, int budget);
 -	void *have_poll_lock = NULL;
 +	int (*busy_poll)(struct napi_struct *dev);
  	struct napi_struct *napi;
++<<<<<<< HEAD
 +	int rc = false;
++=======
+ 	unsigned int napi_id;
+ 	int rc;
+ 
+ restart:
+ 	napi_id = READ_ONCE(sk->sk_napi_id);
+ 	if (napi_id < MIN_NAPI_ID)
+ 		return 0;
+ 
+ 	rc = false;
+ 	napi_poll = NULL;
++>>>>>>> 545cd5e5ec54 (net: Busy polling should ignore sender CPUs)
  
  	rcu_read_lock();
  
* Unmerged path include/net/busy_poll.h
* Unmerged path net/core/dev.c
