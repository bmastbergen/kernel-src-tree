perf tools: Move timestamp routines from util.h to time-utils.h

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit c5e4027e056c3027f682f0d69fe9fd75083b65f8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c5e4027e.failed

We already have a header for time utilities, so use it.

Link: http://lkml.kernel.org/n/tip-sijzpbvutlg0c3oxn49hy9ca@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit c5e4027e056c3027f682f0d69fe9fd75083b65f8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-record.c
#	tools/perf/util/util.c
#	tools/perf/util/util.h
diff --cc tools/perf/builtin-record.c
index 83ef8562c896,32a9a68d38a2..000000000000
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@@ -34,12 -34,19 +34,17 @@@
  #include "util/tsc.h"
  #include "util/parse-branch-options.h"
  #include "util/parse-regs-options.h"
 -#include "util/llvm-utils.h"
 -#include "util/bpf-loader.h"
  #include "util/trigger.h"
  #include "util/perf-hooks.h"
++<<<<<<< HEAD
++=======
+ #include "util/time-utils.h"
+ #include "util/units.h"
++>>>>>>> c5e4027e056c (perf tools: Move timestamp routines from util.h to time-utils.h)
  #include "asm/bug.h"
  
 -#include <errno.h>
 -#include <inttypes.h>
  #include <unistd.h>
  #include <sched.h>
 -#include <signal.h>
  #include <sys/mman.h>
  #include <asm/bug.h>
  #include <linux/time64.h>
diff --cc tools/perf/util/util.c
index f6c11c5d964f,e86dba2f791a..000000000000
--- a/tools/perf/util/util.c
+++ b/tools/perf/util/util.c
@@@ -631,95 -684,3 +623,98 @@@ out
  
  	return tip;
  }
++<<<<<<< HEAD
 +
 +bool is_regular_file(const char *file)
 +{
 +	struct stat st;
 +
 +	if (stat(file, &st))
 +		return false;
 +
 +	return S_ISREG(st.st_mode);
 +}
 +
 +int fetch_current_timestamp(char *buf, size_t sz)
 +{
 +	struct timeval tv;
 +	struct tm tm;
 +	char dt[32];
 +
 +	if (gettimeofday(&tv, NULL) || !localtime_r(&tv.tv_sec, &tm))
 +		return -1;
 +
 +	if (!strftime(dt, sizeof(dt), "%Y%m%d%H%M%S", &tm))
 +		return -1;
 +
 +	scnprintf(buf, sz, "%s%02u", dt, (unsigned)tv.tv_usec / 10000);
 +
 +	return 0;
 +}
 +
 +void print_binary(unsigned char *data, size_t len,
 +		  size_t bytes_per_line, print_binary_t printer,
 +		  void *extra)
 +{
 +	size_t i, j, mask;
 +
 +	if (!printer)
 +		return;
 +
 +	bytes_per_line = roundup_pow_of_two(bytes_per_line);
 +	mask = bytes_per_line - 1;
 +
 +	printer(BINARY_PRINT_DATA_BEGIN, 0, extra);
 +	for (i = 0; i < len; i++) {
 +		if ((i & mask) == 0) {
 +			printer(BINARY_PRINT_LINE_BEGIN, -1, extra);
 +			printer(BINARY_PRINT_ADDR, i, extra);
 +		}
 +
 +		printer(BINARY_PRINT_NUM_DATA, data[i], extra);
 +
 +		if (((i & mask) == mask) || i == len - 1) {
 +			for (j = 0; j < mask-(i & mask); j++)
 +				printer(BINARY_PRINT_NUM_PAD, -1, extra);
 +
 +			printer(BINARY_PRINT_SEP, i, extra);
 +			for (j = i & ~mask; j <= i; j++)
 +				printer(BINARY_PRINT_CHAR_DATA, data[j], extra);
 +			for (j = 0; j < mask-(i & mask); j++)
 +				printer(BINARY_PRINT_CHAR_PAD, i, extra);
 +			printer(BINARY_PRINT_LINE_END, -1, extra);
 +		}
 +	}
 +	printer(BINARY_PRINT_DATA_END, -1, extra);
 +}
 +
 +int is_printable_array(char *p, unsigned int len)
 +{
 +	unsigned int i;
 +
 +	if (!p || !len || p[len - 1] != 0)
 +		return 0;
 +
 +	len--;
 +
 +	for (i = 0; i < len; i++) {
 +		if (!isprint(p[i]) && !isspace(p[i]))
 +			return 0;
 +	}
 +	return 1;
 +}
 +
 +int unit_number__scnprintf(char *buf, size_t size, u64 n)
 +{
 +	char unit[4] = "BKMG";
 +	int i = 0;
 +
 +	while (((n / 1024) > 1) && (i < 3)) {
 +		n /= 1024;
 +		i++;
 +	}
 +
 +	return scnprintf(buf, size, "%" PRIu64 "%c", n, unit[i]);
 +}
++=======
++>>>>>>> c5e4027e056c (perf tools: Move timestamp routines from util.h to time-utils.h)
diff --cc tools/perf/util/util.h
index 5f9bec1e16fd,dc8eb942f92b..000000000000
--- a/tools/perf/util/util.h
+++ b/tools/perf/util/util.h
@@@ -22,14 -20,7 +22,18 @@@
  #include <limits.h>
  #include <sys/param.h>
  #include <sys/types.h>
++<<<<<<< HEAD
 +#include <dirent.h>
 +#include <sys/time.h>
 +#include <time.h>
 +#include <signal.h>
 +#include <fnmatch.h>
  #include <assert.h>
 +#include <regex.h>
 +#include <utime.h>
++=======
++#include <assert.h>
++>>>>>>> c5e4027e056c (perf tools: Move timestamp routines from util.h to time-utils.h)
  #include <sys/wait.h>
  #include <poll.h>
  #include <sys/socket.h>
@@@ -161,53 -111,20 +165,59 @@@ int gzip_decompress_to_file(const char 
  int lzma_decompress_to_file(const char *input, int output_fd);
  #endif
  
 -int get_stack_size(const char *str, unsigned long *_size);
 +char *asprintf_expr_inout_ints(const char *var, bool in, size_t nints, int *ints);
 +
 +static inline char *asprintf_expr_in_ints(const char *var, size_t nints, int *ints)
 +{
 +	return asprintf_expr_inout_ints(var, true, nints, ints);
 +}
 +
 +static inline char *asprintf_expr_not_in_ints(const char *var, size_t nints, int *ints)
 +{
 +	return asprintf_expr_inout_ints(var, false, nints, ints);
 +}
  
 -int fetch_kernel_version(unsigned int *puint,
 -			 char *str, size_t str_sz);
 -#define KVER_VERSION(x)		(((x) >> 16) & 0xff)
 -#define KVER_PATCHLEVEL(x)	(((x) >> 8) & 0xff)
 -#define KVER_SUBLEVEL(x)	((x) & 0xff)
 -#define KVER_FMT	"%d.%d.%d"
 -#define KVER_PARAM(x)	KVER_VERSION(x), KVER_PATCHLEVEL(x), KVER_SUBLEVEL(x)
 +int get_stack_size(const char *str, unsigned long *_size);
  
  const char *perf_tip(const char *dirpath);
++<<<<<<< HEAD
 +bool is_regular_file(const char *file);
 +int fetch_current_timestamp(char *buf, size_t sz);
++=======
++>>>>>>> c5e4027e056c (perf tools: Move timestamp routines from util.h to time-utils.h)
 +
 +enum binary_printer_ops {
 +	BINARY_PRINT_DATA_BEGIN,
 +	BINARY_PRINT_LINE_BEGIN,
 +	BINARY_PRINT_ADDR,
 +	BINARY_PRINT_NUM_DATA,
 +	BINARY_PRINT_NUM_PAD,
 +	BINARY_PRINT_SEP,
 +	BINARY_PRINT_CHAR_DATA,
 +	BINARY_PRINT_CHAR_PAD,
 +	BINARY_PRINT_LINE_END,
 +	BINARY_PRINT_DATA_END,
 +};
 +
 +typedef void (*print_binary_t)(enum binary_printer_ops,
 +			       unsigned int val,
 +			       void *extra);
 +
 +void print_binary(unsigned char *data, size_t len,
 +		  size_t bytes_per_line, print_binary_t printer,
 +		  void *extra);
  
 -#ifndef HAVE_SCHED_GETCPU_SUPPORT
 -int sched_getcpu(void);
 +#if !defined(__GLIBC__) && !defined(__ANDROID__)
 +extern int sched_getcpu(void);
  #endif
  
++<<<<<<< HEAD
 +int is_printable_array(char *p, unsigned int len);
 +
 +int timestamp__scnprintf_usec(u64 timestamp, char *buf, size_t sz);
 +
 +int unit_number__scnprintf(char *buf, size_t size, u64 n);
 +
++=======
++>>>>>>> c5e4027e056c (perf tools: Move timestamp routines from util.h to time-utils.h)
  #endif /* GIT_COMPAT_UTIL_H */
diff --git a/tools/perf/builtin-buildid-cache.c b/tools/perf/builtin-buildid-cache.c
index bfff0a00533e..5887ca964a66 100644
--- a/tools/perf/builtin-buildid-cache.c
+++ b/tools/perf/builtin-buildid-cache.c
@@ -21,6 +21,7 @@
 #include "util/build-id.h"
 #include "util/session.h"
 #include "util/symbol.h"
+#include "util/time-utils.h"
 
 static int build_id_cache__kcore_buildid(const char *proc_dir, char *sbuildid)
 {
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index 693f98cb99a8..6400bf014ecb 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -23,6 +23,7 @@
 #ifdef HAVE_TIMERFD_SUPPORT
 #include <sys/timerfd.h>
 #endif
+#include <sys/time.h>
 
 #include <linux/time64.h>
 #include <termios.h>
* Unmerged path tools/perf/builtin-record.c
diff --git a/tools/perf/util/time-utils.c b/tools/perf/util/time-utils.c
index d1b21c72206d..5b5d0214debd 100644
--- a/tools/perf/util/time-utils.c
+++ b/tools/perf/util/time-utils.c
@@ -117,3 +117,28 @@ bool perf_time__skip_sample(struct perf_time_interval *ptime, u64 timestamp)
 
 	return false;
 }
+
+int timestamp__scnprintf_usec(u64 timestamp, char *buf, size_t sz)
+{
+	u64  sec = timestamp / NSEC_PER_SEC;
+	u64 usec = (timestamp % NSEC_PER_SEC) / NSEC_PER_USEC;
+
+	return scnprintf(buf, sz, "%"PRIu64".%06"PRIu64, sec, usec);
+}
+
+int fetch_current_timestamp(char *buf, size_t sz)
+{
+	struct timeval tv;
+	struct tm tm;
+	char dt[32];
+
+	if (gettimeofday(&tv, NULL) || !localtime_r(&tv.tv_sec, &tm))
+		return -1;
+
+	if (!strftime(dt, sizeof(dt), "%Y%m%d%H%M%S", &tm))
+		return -1;
+
+	scnprintf(buf, sz, "%s%02u", dt, (unsigned)tv.tv_usec / 10000);
+
+	return 0;
+}
diff --git a/tools/perf/util/time-utils.h b/tools/perf/util/time-utils.h
index c1f197c4af6c..8656be08513b 100644
--- a/tools/perf/util/time-utils.h
+++ b/tools/perf/util/time-utils.h
@@ -1,6 +1,9 @@
 #ifndef _TIME_UTILS_H_
 #define _TIME_UTILS_H_
 
+#include <stddef.h>
+#include <linux/types.h>
+
 struct perf_time_interval {
 	u64 start, end;
 };
@@ -11,4 +14,8 @@ int perf_time__parse_str(struct perf_time_interval *ptime, const char *ostr);
 
 bool perf_time__skip_sample(struct perf_time_interval *ptime, u64 timestamp);
 
+int timestamp__scnprintf_usec(u64 timestamp, char *buf, size_t sz);
+
+int fetch_current_timestamp(char *buf, size_t sz);
+
 #endif
* Unmerged path tools/perf/util/util.c
* Unmerged path tools/perf/util/util.h
