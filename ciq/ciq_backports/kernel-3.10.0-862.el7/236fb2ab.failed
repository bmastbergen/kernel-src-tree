s390/zcrypt: simplify message type handling

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [s390] zcrypt: simplify message type handling (Hendrik Brueckner) [1380349]
Rebuild_FUZZ: 93.83%
commit-author Martin Schwidefsky <schwidefsky@de.ibm.com>
commit 236fb2ab95e9832880501d465d64eb2f2935b852
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/236fb2ab.failed

Now that the message type modules are linked with the zcrypt_api
into a single module the zcrypt_ops_list is initialized by
the module init function of the zcyppt.ko module. After that
the list is static and all message types are present.

Drop the zcrypt_ops_list_lock spinlock and the module handling
in regard to the message types.

	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit 236fb2ab95e9832880501d465d64eb2f2935b852)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/s390/crypto/zcrypt_api.c
#	drivers/s390/crypto/zcrypt_pcixcc.c
diff --cc drivers/s390/crypto/zcrypt_api.c
index aac1d13c55dd,dc6d891a7b48..000000000000
--- a/drivers/s390/crypto/zcrypt_api.c
+++ b/drivers/s390/crypto/zcrypt_api.c
@@@ -313,63 -317,25 +312,68 @@@ EXPORT_SYMBOL(zcrypt_device_unregister)
  
  void zcrypt_msgtype_register(struct zcrypt_ops *zops)
  {
++<<<<<<< HEAD
 +	if (zops->owner) {
 +		spin_lock_bh(&zcrypt_ops_list_lock);
 +		list_add_tail(&zops->list, &zcrypt_ops_list);
 +		spin_unlock_bh(&zcrypt_ops_list_lock);
 +	}
++=======
+ 	list_add_tail(&zops->list, &zcrypt_ops_list);
++>>>>>>> 236fb2ab95e9 (s390/zcrypt: simplify message type handling)
  }
- EXPORT_SYMBOL(zcrypt_msgtype_register);
  
  void zcrypt_msgtype_unregister(struct zcrypt_ops *zops)
  {
- 	spin_lock_bh(&zcrypt_ops_list_lock);
  	list_del_init(&zops->list);
- 	spin_unlock_bh(&zcrypt_ops_list_lock);
  }
- EXPORT_SYMBOL(zcrypt_msgtype_unregister);
  
- static inline
- struct zcrypt_ops *__ops_lookup(unsigned char *name, int variant)
+ struct zcrypt_ops *zcrypt_msgtype(unsigned char *name, int variant)
  {
  	struct zcrypt_ops *zops;
- 	int found = 0;
  
- 	spin_lock_bh(&zcrypt_ops_list_lock);
- 	list_for_each_entry(zops, &zcrypt_ops_list, list) {
+ 	list_for_each_entry(zops, &zcrypt_ops_list, list)
  		if ((zops->variant == variant) &&
++<<<<<<< HEAD
 +		    (!strncmp(zops->owner->name, name, MODULE_NAME_LEN))) {
 +			found = 1;
 +			break;
 +		}
 +	}
 +	if (!found || !try_module_get(zops->owner))
 +		zops = NULL;
 +
 +	spin_unlock_bh(&zcrypt_ops_list_lock);
 +
 +	return zops;
 +}
 +
 +struct zcrypt_ops *zcrypt_msgtype_request(unsigned char *name, int variant)
 +{
 +	struct zcrypt_ops *zops = NULL;
 +
 +	zops = __ops_lookup(name, variant);
 +	if (!zops) {
 +		request_module(name);
 +		zops = __ops_lookup(name, variant);
 +	}
 +	return zops;
 +}
 +EXPORT_SYMBOL(zcrypt_msgtype_request);
 +
 +void zcrypt_msgtype_release(struct zcrypt_ops *zops)
 +{
 +	if (zops)
 +		module_put(zops->owner);
 +}
 +EXPORT_SYMBOL(zcrypt_msgtype_release);
++=======
+ 		    (!strncmp(zops->name, name, sizeof(zops->name))))
+ 			return zops;
+ 	return NULL;
+ }
+ EXPORT_SYMBOL(zcrypt_msgtype);
++>>>>>>> 236fb2ab95e9 (s390/zcrypt: simplify message type handling)
  
  /**
   * zcrypt_read (): Not supported beyond zcrypt 1.3.1.
diff --cc drivers/s390/crypto/zcrypt_pcixcc.c
index 899ffa19f5ec,8491541f72cf..000000000000
--- a/drivers/s390/crypto/zcrypt_pcixcc.c
+++ b/drivers/s390/crypto/zcrypt_pcixcc.c
@@@ -322,12 -322,12 +322,18 @@@ static int zcrypt_pcixcc_probe(struct a
  		return rc;
  	}
  	if (rc)
- 		zdev->ops = zcrypt_msgtype_request(MSGTYPE06_NAME,
- 						   MSGTYPE06_VARIANT_DEFAULT);
+ 		zdev->ops = zcrypt_msgtype(MSGTYPE06_NAME,
+ 					   MSGTYPE06_VARIANT_DEFAULT);
  	else
++<<<<<<< HEAD
 +		zdev->ops = zcrypt_msgtype_request(MSGTYPE06_NAME,
 +						   MSGTYPE06_VARIANT_NORNG);
 +	ap_dev->reply = &zdev->reply;
++=======
+ 		zdev->ops = zcrypt_msgtype(MSGTYPE06_NAME,
+ 					   MSGTYPE06_VARIANT_NORNG);
+ 	ap_device_init_reply(ap_dev, &zdev->reply);
++>>>>>>> 236fb2ab95e9 (s390/zcrypt: simplify message type handling)
  	ap_dev->private = zdev;
  	rc = zcrypt_device_register(zdev);
  	if (rc)
* Unmerged path drivers/s390/crypto/zcrypt_api.c
diff --git a/drivers/s390/crypto/zcrypt_api.h b/drivers/s390/crypto/zcrypt_api.h
index 01d02342c190..753f3c180c80 100644
--- a/drivers/s390/crypto/zcrypt_api.h
+++ b/drivers/s390/crypto/zcrypt_api.h
@@ -132,8 +132,7 @@ int zcrypt_device_register(struct zcrypt_device *);
 void zcrypt_device_unregister(struct zcrypt_device *);
 void zcrypt_msgtype_register(struct zcrypt_ops *);
 void zcrypt_msgtype_unregister(struct zcrypt_ops *);
-struct zcrypt_ops *zcrypt_msgtype_request(unsigned char *, int);
-void zcrypt_msgtype_release(struct zcrypt_ops *);
+struct zcrypt_ops *zcrypt_msgtype(unsigned char *, int);
 int zcrypt_api_init(void);
 void zcrypt_api_exit(void);
 
diff --git a/drivers/s390/crypto/zcrypt_cex2a.c b/drivers/s390/crypto/zcrypt_cex2a.c
index 1e849d6e1dfe..62c0a3e7ce72 100644
--- a/drivers/s390/crypto/zcrypt_cex2a.c
+++ b/drivers/s390/crypto/zcrypt_cex2a.c
@@ -122,8 +122,7 @@ static int zcrypt_cex2a_probe(struct ap_device *ap_dev)
 	}
 	if (!zdev)
 		return -ENODEV;
-	zdev->ops = zcrypt_msgtype_request(MSGTYPE50_NAME,
-					   MSGTYPE50_VARIANT_DEFAULT);
+	zdev->ops = zcrypt_msgtype(MSGTYPE50_NAME, MSGTYPE50_VARIANT_DEFAULT);
 	zdev->ap_dev = ap_dev;
 	zdev->online = 1;
 	ap_dev->reply = &zdev->reply;
@@ -131,7 +130,6 @@ static int zcrypt_cex2a_probe(struct ap_device *ap_dev)
 	rc = zcrypt_device_register(zdev);
 	if (rc) {
 		ap_dev->private = NULL;
-		zcrypt_msgtype_release(zdev->ops);
 		zcrypt_device_free(zdev);
 	}
 	return rc;
@@ -144,10 +142,8 @@ static int zcrypt_cex2a_probe(struct ap_device *ap_dev)
 static void zcrypt_cex2a_remove(struct ap_device *ap_dev)
 {
 	struct zcrypt_device *zdev = ap_dev->private;
-	struct zcrypt_ops *zops = zdev->ops;
 
 	zcrypt_device_unregister(zdev);
-	zcrypt_msgtype_release(zops);
 }
 
 int __init zcrypt_cex2a_init(void)
diff --git a/drivers/s390/crypto/zcrypt_cex4.c b/drivers/s390/crypto/zcrypt_cex4.c
index bb3908818505..95154e33e681 100644
--- a/drivers/s390/crypto/zcrypt_cex4.c
+++ b/drivers/s390/crypto/zcrypt_cex4.c
@@ -102,8 +102,8 @@ static int zcrypt_cex4_probe(struct ap_device *ap_dev)
 					CEX4A_MAX_MOD_SIZE_2K;
 			}
 			zdev->short_crt = 1;
-			zdev->ops = zcrypt_msgtype_request(MSGTYPE50_NAME,
-							   MSGTYPE50_VARIANT_DEFAULT);
+			zdev->ops = zcrypt_msgtype(MSGTYPE50_NAME,
+						   MSGTYPE50_VARIANT_DEFAULT);
 		} else if (ap_test_bit(&ap_dev->functions, AP_FUNC_COPRO)) {
 			zdev = zcrypt_device_alloc(CEX4C_MAX_MESSAGE_SIZE);
 			if (!zdev)
@@ -120,8 +120,8 @@ static int zcrypt_cex4_probe(struct ap_device *ap_dev)
 			zdev->max_mod_size = CEX4C_MAX_MOD_SIZE;
 			zdev->max_exp_bit_length = CEX4C_MAX_MOD_SIZE;
 			zdev->short_crt = 0;
-			zdev->ops = zcrypt_msgtype_request(MSGTYPE06_NAME,
-							   MSGTYPE06_VARIANT_DEFAULT);
+			zdev->ops = zcrypt_msgtype(MSGTYPE06_NAME,
+						   MSGTYPE06_VARIANT_DEFAULT);
 		} else if (ap_test_bit(&ap_dev->functions, AP_FUNC_EP11)) {
 			zdev = zcrypt_device_alloc(CEX4C_MAX_MESSAGE_SIZE);
 			if (!zdev)
@@ -138,8 +138,8 @@ static int zcrypt_cex4_probe(struct ap_device *ap_dev)
 			zdev->max_mod_size = CEX4C_MAX_MOD_SIZE;
 			zdev->max_exp_bit_length = CEX4C_MAX_MOD_SIZE;
 			zdev->short_crt = 0;
-			zdev->ops = zcrypt_msgtype_request(MSGTYPE06_NAME,
-							MSGTYPE06_VARIANT_EP11);
+			zdev->ops = zcrypt_msgtype(MSGTYPE06_NAME,
+						   MSGTYPE06_VARIANT_EP11);
 		}
 		break;
 	}
@@ -151,7 +151,6 @@ static int zcrypt_cex4_probe(struct ap_device *ap_dev)
 	ap_dev->private = zdev;
 	rc = zcrypt_device_register(zdev);
 	if (rc) {
-		zcrypt_msgtype_release(zdev->ops);
 		ap_dev->private = NULL;
 		zcrypt_device_free(zdev);
 	}
@@ -165,12 +164,9 @@ static int zcrypt_cex4_probe(struct ap_device *ap_dev)
 static void zcrypt_cex4_remove(struct ap_device *ap_dev)
 {
 	struct zcrypt_device *zdev = ap_dev->private;
-	struct zcrypt_ops *zops;
 
 	if (zdev) {
-		zops = zdev->ops;
 		zcrypt_device_unregister(zdev);
-		zcrypt_msgtype_release(zops);
 	}
 }
 
* Unmerged path drivers/s390/crypto/zcrypt_pcixcc.c
