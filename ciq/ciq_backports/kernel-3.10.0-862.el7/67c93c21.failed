genirq/affinity: Handle pre/post vectors in irq_create_affinity_masks()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Christoph Hellwig <hch@lst.de>
commit 67c93c218dc5d1b45d547771f1fdb44a381e1faf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/67c93c21.failed

Only calculate the affinity for the main I/O vectors, and skip the
pre or post vectors specified by struct irq_affinity.

Also remove the irq_affinity cpumask argument that has never been used.
If we ever need it in the future we can pass it through struct
irq_affinity.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Acked-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Jens Axboe <axboe@kernel.dk>
	Cc: linux-block@vger.kernel.org
	Cc: linux-pci@vger.kernel.org
Link: http://lkml.kernel.org/r/1478654107-7384-4-git-send-email-hch@lst.de
	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

(cherry picked from commit 67c93c218dc5d1b45d547771f1fdb44a381e1faf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/msi.c
#	include/linux/interrupt.h
#	kernel/irq/affinity.c
diff --cc drivers/pci/msi.c
index a0b55b8fc002,f4a108b59336..000000000000
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@@ -542,15 -550,24 +542,28 @@@ error_attrs
  	return ret;
  }
  
 -static struct msi_desc *
 -msi_setup_entry(struct pci_dev *dev, int nvec, bool affinity)
 +static struct msi_desc *msi_setup_entry(struct pci_dev *dev, int nvec)
  {
++<<<<<<< HEAD
 +	u16 control;
 +	struct msi_desc *entry;
++=======
+ 	static const struct irq_affinity default_affd;
+ 	struct cpumask *masks = NULL;
+ 	struct msi_desc *entry;
+ 	u16 control;
+ 
+ 	if (affinity) {
+ 		masks = irq_create_affinity_masks(nvec, &default_affd);
+ 		if (!masks)
+ 			pr_err("Unable to allocate affinity masks, ignoring\n");
+ 	}
++>>>>>>> 67c93c218dc5 (genirq/affinity: Handle pre/post vectors in irq_create_affinity_masks())
  
  	/* MSI Entry Initialization */
 -	entry = alloc_msi_entry(&dev->dev, nvec, masks);
 +	entry = alloc_msi_entry(dev);
  	if (!entry)
 -		goto out;
 +		return NULL;
  
  	pci_read_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, &control);
  
@@@ -673,13 -690,22 +686,29 @@@ static void __iomem *msix_map_region(st
  }
  
  static int msix_setup_entries(struct pci_dev *dev, void __iomem *base,
 -			      struct msix_entry *entries, int nvec,
 -			      bool affinity)
 +			      struct msix_entry *entries, int nvec)
  {
++<<<<<<< HEAD
++=======
+ 	static const struct irq_affinity default_affd;
+ 	struct cpumask *curmsk, *masks = NULL;
++>>>>>>> 67c93c218dc5 (genirq/affinity: Handle pre/post vectors in irq_create_affinity_masks())
  	struct msi_desc *entry;
 -	int ret, i;
 +	int i;
  
++<<<<<<< HEAD
 +	for (i = 0; i < nvec; i++) {
 +		entry = alloc_msi_entry(dev);
++=======
+ 	if (affinity) {
+ 		masks = irq_create_affinity_masks(nvec, &default_affd);
+ 		if (!masks)
+ 			pr_err("Unable to allocate affinity masks, ignoring\n");
+ 	}
+ 
+ 	for (i = 0, curmsk = masks; i < nvec; i++) {
+ 		entry = alloc_msi_entry(&dev->dev, 1, curmsk);
++>>>>>>> 67c93c218dc5 (genirq/affinity: Handle pre/post vectors in irq_create_affinity_masks())
  		if (!entry) {
  			if (!i)
  				iounmap(base);
diff --cc include/linux/interrupt.h
index 775c38a0baff,53144e78a369..000000000000
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@@ -299,6 -290,9 +299,12 @@@ struct irq_affinity_notify 
  extern int
  irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);
  
++<<<<<<< HEAD
++=======
+ struct cpumask *irq_create_affinity_masks(int nvec, const struct irq_affinity *affd);
+ int irq_calc_affinity_vectors(int maxvec, const struct irq_affinity *affd);
+ 
++>>>>>>> 67c93c218dc5 (genirq/affinity: Handle pre/post vectors in irq_create_affinity_masks())
  #else /* CONFIG_SMP */
  
  static inline int irq_set_affinity(unsigned int irq, const struct cpumask *m)
@@@ -318,9 -317,27 +324,32 @@@ static inline int irq_set_affinity_hint
  {
  	return -EINVAL;
  }
 +#endif /* CONFIG_SMP && CONFIG_GENERIC_HARDIRQS */
  
++<<<<<<< HEAD
 +#ifdef CONFIG_GENERIC_HARDIRQS
++=======
+ static inline int
+ irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify)
+ {
+ 	return 0;
+ }
+ 
+ static inline struct cpumask *
+ irq_create_affinity_masks(int nvec, const struct irq_affinity *affd)
+ {
+ 	return NULL;
+ }
+ 
+ static inline int
+ irq_calc_affinity_vectors(int maxvec, const struct irq_affinity *affd)
+ {
+ 	return maxvec;
+ }
+ 
+ #endif /* CONFIG_SMP */
+ 
++>>>>>>> 67c93c218dc5 (genirq/affinity: Handle pre/post vectors in irq_create_affinity_masks())
  /*
   * Special lockdep variants of irq disabling/enabling.
   * These should be used for locking constructs that
* Unmerged path kernel/irq/affinity.c
* Unmerged path drivers/pci/msi.c
* Unmerged path include/linux/interrupt.h
* Unmerged path kernel/irq/affinity.c
