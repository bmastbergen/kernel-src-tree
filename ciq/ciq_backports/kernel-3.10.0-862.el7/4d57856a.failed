tpm2: add session handle context saving and restoring to the space code

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author James Bottomley <James.Bottomley@HansenPartnership.com>
commit 4d57856a21ed2abe33412e0526cc84bdcf67ea08
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/4d57856a.failed

Sessions are different from transient objects in that their handles
may not be virtualized (because they're used for some hmac
calculations).  Additionally when a session is context saved, a
vestigial memory remains in the TPM and if it is also flushed, that
will be lost and the session context will refuse to load next time, so
the code is updated to flush only transient objects after a context
save.  Add a separate array (chip->session_tbl) to save and restore
sessions by handle.  Use the failure of a context save or load to
signal that the session has been flushed from the TPM and we can
remove its memory from chip->session_tbl.

Sessions are also isolated during each instance of a tpm space.  This
means that spaces shouldn't be able to see each other's sessions and
is enforced by ensuring that a space user may only refer to sessions
handles that are present in their own chip->session_tbl.  Finally when
a space is closed, all the sessions belonging to it should be flushed
so the handles may be re-used by other spaces.

Note that if we get a session save or load error, all sessions are
effectively flushed.  Even though we restore the session buffer, all
the old sessions will refuse to load after the flush and they'll be
purged from our session memory.  This means that while transient
context handling is still soft in the face of errors, session handling
is hard (any failure of the model means all sessions are lost).

Fixes-from: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
	Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
(cherry picked from commit 4d57856a21ed2abe33412e0526cc84bdcf67ea08)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/char/tpm/tpm-chip.c
#	drivers/char/tpm/tpm.h
#	drivers/char/tpm/tpm2-space.c
#	drivers/char/tpm/tpmrm-dev.c
diff --cc drivers/char/tpm/tpm-chip.c
index d2e9a9450e38,aade6995f310..000000000000
--- a/drivers/char/tpm/tpm-chip.c
+++ b/drivers/char/tpm/tpm-chip.c
@@@ -128,6 -129,8 +128,11 @@@ static void tpm_dev_release(struct devi
  	mutex_unlock(&idr_lock);
  
  	kfree(chip->log.bios_event_log);
++<<<<<<< HEAD
++=======
+ 	kfree(chip->work_space.context_buf);
+ 	kfree(chip->work_space.session_buf);
++>>>>>>> 4d57856a21ed (tpm2: add session handle context saving and restoring to the space code)
  	kfree(chip);
  }
  
@@@ -186,10 -214,23 +191,25 @@@ struct tpm_chip *tpm_chip_alloc(struct 
  		chip->flags |= TPM_CHIP_FLAG_VIRTUAL;
  
  	cdev_init(&chip->cdev, &tpm_fops);
 -	cdev_init(&chip->cdevs, &tpmrm_fops);
  	chip->cdev.owner = THIS_MODULE;
 -	chip->cdevs.owner = THIS_MODULE;
  	chip->cdev.kobj.parent = &chip->dev.kobj;
++<<<<<<< HEAD
++=======
+ 	chip->cdevs.kobj.parent = &chip->devs.kobj;
+ 
+ 	chip->work_space.context_buf = kzalloc(PAGE_SIZE, GFP_KERNEL);
+ 	if (!chip->work_space.context_buf) {
+ 		rc = -ENOMEM;
+ 		goto out;
+ 	}
+ 	chip->work_space.session_buf = kzalloc(PAGE_SIZE, GFP_KERNEL);
+ 	if (!chip->work_space.session_buf) {
+ 		rc = -ENOMEM;
+ 		goto out;
+ 	}
++>>>>>>> 4d57856a21ed (tpm2: add session handle context saving and restoring to the space code)
  
 +	chip->locality = -1;
  	return chip;
  
  out:
@@@ -252,6 -293,27 +272,30 @@@ static int tpm_add_char_device(struct t
  		return rc;
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (chip->flags & TPM_CHIP_FLAG_TPM2)
+ 		rc = cdev_add(&chip->cdevs, chip->devs.devt, 1);
+ 	if (rc) {
+ 		dev_err(&chip->dev,
+ 			"unable to cdev_add() %s, major %d, minor %d, err=%d\n",
+ 			dev_name(&chip->devs), MAJOR(chip->devs.devt),
+ 			MINOR(chip->devs.devt), rc);
+ 		return rc;
+ 	}
+ 
+ 	if (chip->flags & TPM_CHIP_FLAG_TPM2)
+ 		rc = device_add(&chip->devs);
+ 	if (rc) {
+ 		dev_err(&chip->dev,
+ 			"unable to device_register() %s, major %d, minor %d, err=%d\n",
+ 			dev_name(&chip->devs), MAJOR(chip->devs.devt),
+ 			MINOR(chip->devs.devt), rc);
+ 		cdev_del(&chip->cdevs);
+ 		return rc;
+ 	}
+ 
++>>>>>>> 4d57856a21ed (tpm2: add session handle context saving and restoring to the space code)
  	/* Make the chip available. */
  	mutex_lock(&idr_lock);
  	idr_replace(&dev_nums_idr, chip, chip->dev_num);
diff --cc drivers/char/tpm/tpm.h
index c039c6d97636,5eacb3fd2ed2..000000000000
--- a/drivers/char/tpm/tpm.h
+++ b/drivers/char/tpm/tpm.h
@@@ -142,6 -158,13 +142,16 @@@ enum tpm2_startup_types 
  
  #define TPM_PPI_VERSION_LEN		3
  
++<<<<<<< HEAD
++=======
+ struct tpm_space {
+ 	u32 context_tbl[3];
+ 	u8 *context_buf;
+ 	u32 session_tbl[3];
+ 	u8 *session_buf;
+ };
+ 
++>>>>>>> 4d57856a21ed (tpm2: add session handle context saving and restoring to the space code)
  enum tpm_chip_flags {
  	TPM_CHIP_FLAG_TPM2		= BIT(1),
  	TPM_CHIP_FLAG_IRQ		= BIT(2),
@@@ -553,5 -588,11 +563,15 @@@ int tpm2_auto_startup(struct tpm_chip *
  void tpm2_shutdown(struct tpm_chip *chip, u16 shutdown_type);
  unsigned long tpm2_calc_ordinal_duration(struct tpm_chip *chip, u32 ordinal);
  int tpm2_probe(struct tpm_chip *chip);
++<<<<<<< HEAD
 +ssize_t tpm2_get_pcr_allocation(struct tpm_chip *chip);
++=======
+ int tpm2_find_cc(struct tpm_chip *chip, u32 cc);
+ int tpm2_init_space(struct tpm_space *space);
+ void tpm2_del_space(struct tpm_chip *chip, struct tpm_space *space);
+ int tpm2_prepare_space(struct tpm_chip *chip, struct tpm_space *space, u32 cc,
+ 		       u8 *cmd);
+ int tpm2_commit_space(struct tpm_chip *chip, struct tpm_space *space,
+ 		      u32 cc, u8 *buf, size_t *bufsiz);
++>>>>>>> 4d57856a21ed (tpm2: add session handle context saving and restoring to the space code)
  #endif
* Unmerged path drivers/char/tpm/tpm2-space.c
* Unmerged path drivers/char/tpm/tpmrm-dev.c
* Unmerged path drivers/char/tpm/tpm-chip.c
* Unmerged path drivers/char/tpm/tpm.h
* Unmerged path drivers/char/tpm/tpm2-space.c
* Unmerged path drivers/char/tpm/tpmrm-dev.c
