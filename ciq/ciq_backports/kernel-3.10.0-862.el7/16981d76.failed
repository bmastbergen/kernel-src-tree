mm: improve readability of transparent_hugepage_enabled()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [mm] improve readability of transparent_hugepage_enabled() (Jeff Moyer) [1472025]
Rebuild_FUZZ: 96.36%
commit-author Dan Williams <dan.j.williams@intel.com>
commit 16981d763501c0e06e434cf6b59f964c520e0ccc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/16981d76.failed

Turn the macro into a static inline and rewrite the condition checks for
better readability in preparation for adding another condition.

[ross.zwisler@linux.intel.com: fix logic to make conversion equivalent]
[akpm@linux-foundation.org: resolve vs mm-make-pr_set_thp_disable-immediately-active.patch]
[akpm@linux-foundation.org: include coredump.h for MMF_DISABLE_THP]
Link: http://lkml.kernel.org/r/149739530612.20686.14760671150202647861.stgit@dwillia2-desk3.amr.corp.intel.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
	Reviewed-by: Ross Zwisler <ross.zwisler@linux.intel.com>
	Acked-by: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
	Acked-by: Michal Hocko <mhocko@suse.com>
	Cc: Christoph Hellwig <hch@lst.de>
	Cc: Jan Kara <jack@suse.cz>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 16981d763501c0e06e434cf6b59f964c520e0ccc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/huge_mm.h
diff --cc include/linux/huge_mm.h
index 2f1205c8c5a1,f4239d3c9c73..000000000000
--- a/include/linux/huge_mm.h
+++ b/include/linux/huge_mm.h
@@@ -1,10 -1,9 +1,16 @@@
  #ifndef _LINUX_HUGE_MM_H
  #define _LINUX_HUGE_MM_H
  
++<<<<<<< HEAD
 +extern int do_huge_pmd_anonymous_page(struct mm_struct *mm,
 +				      struct vm_area_struct *vma,
 +				      unsigned long address, pmd_t *pmd,
 +				      unsigned int flags);
++=======
+ #include <linux/sched/coredump.h>
+ 
+ extern int do_huge_pmd_anonymous_page(struct vm_fault *vmf);
++>>>>>>> 16981d763501 (mm: improve readability of transparent_hugepage_enabled())
  extern int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
  			 pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
  			 struct vm_area_struct *vma);
@@@ -68,22 -81,35 +74,48 @@@ extern pmd_t *page_check_address_pmd(st
  #define HPAGE_PMD_SIZE	((1UL) << HPAGE_PMD_SHIFT)
  #define HPAGE_PMD_MASK	(~(HPAGE_PMD_SIZE - 1))
  
 -#define HPAGE_PUD_SHIFT PUD_SHIFT
 -#define HPAGE_PUD_SIZE	((1UL) << HPAGE_PUD_SHIFT)
 -#define HPAGE_PUD_MASK	(~(HPAGE_PUD_SIZE - 1))
 -
  extern bool is_vma_temporary_stack(struct vm_area_struct *vma);
  
++<<<<<<< HEAD
 +#define transparent_hugepage_enabled(__vma)				\
 +	((transparent_hugepage_flags &					\
 +	  (1<<TRANSPARENT_HUGEPAGE_FLAG) ||				\
 +	  (transparent_hugepage_flags &					\
 +	   (1<<TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG) &&			\
 +	   ((__vma)->vm_flags & VM_HUGEPAGE))) &&			\
 +	 !((__vma)->vm_flags & VM_NOHUGEPAGE) &&			\
 +	 !is_vma_temporary_stack(__vma))
 +#define transparent_hugepage_defrag(__vma)				\
 +	((transparent_hugepage_flags &					\
 +	  (1<<TRANSPARENT_HUGEPAGE_DEFRAG_FLAG)) ||			\
 +	 (transparent_hugepage_flags &					\
 +	  (1<<TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG) &&		\
 +	  (__vma)->vm_flags & VM_HUGEPAGE))
++=======
+ extern unsigned long transparent_hugepage_flags;
+ 
+ static inline bool transparent_hugepage_enabled(struct vm_area_struct *vma)
+ {
+ 	if (vma->vm_flags & VM_NOHUGEPAGE)
+ 		return false;
+ 
+ 	if (is_vma_temporary_stack(vma))
+ 		return false;
+ 
+ 	if (test_bit(MMF_DISABLE_THP, &vma->vm_mm->flags))
+ 		return false;
+ 
+ 	if (transparent_hugepage_flags & (1 << TRANSPARENT_HUGEPAGE_FLAG))
+ 		return true;
+ 
+ 	if (transparent_hugepage_flags &
+ 				(1 << TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG))
+ 		return !!(vma->vm_flags & VM_HUGEPAGE);
+ 
+ 	return false;
+ }
+ 
++>>>>>>> 16981d763501 (mm: improve readability of transparent_hugepage_enabled())
  #define transparent_hugepage_use_zero_page()				\
  	(transparent_hugepage_flags &					\
  	 (1<<TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG))
@@@ -95,12 -121,15 +127,24 @@@
  #define transparent_hugepage_debug_cow() 0
  #endif /* CONFIG_DEBUG_VM */
  
++<<<<<<< HEAD
 +extern unsigned long transparent_hugepage_flags;
 +extern int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 +			  pmd_t *dst_pmd, pmd_t *src_pmd,
 +			  struct vm_area_struct *vma,
 +			  unsigned long addr, unsigned long end);
 +extern int split_huge_page_to_list(struct page *page, struct list_head *list);
++=======
+ extern unsigned long thp_get_unmapped_area(struct file *filp,
+ 		unsigned long addr, unsigned long len, unsigned long pgoff,
+ 		unsigned long flags);
+ 
+ extern void prep_transhuge_page(struct page *page);
+ extern void free_transhuge_page(struct page *page);
+ 
+ bool can_split_huge_page(struct page *page, int *pextra_pins);
+ int split_huge_page_to_list(struct page *page, struct list_head *list);
++>>>>>>> 16981d763501 (mm: improve readability of transparent_hugepage_enabled())
  static inline int split_huge_page(struct page *page)
  {
  	return split_huge_page_to_list(page, NULL);
@@@ -239,11 -233,29 +283,14 @@@ struct page *get_huge_zero_page(void)
  #define HPAGE_PMD_MASK ({ BUILD_BUG(); 0; })
  #define HPAGE_PMD_SIZE ({ BUILD_BUG(); 0; })
  
 -#define HPAGE_PUD_SHIFT ({ BUILD_BUG(); 0; })
 -#define HPAGE_PUD_MASK ({ BUILD_BUG(); 0; })
 -#define HPAGE_PUD_SIZE ({ BUILD_BUG(); 0; })
 -
  #define hpage_nr_pages(x) 1
  
- #define transparent_hugepage_enabled(__vma) 0
+ static inline bool transparent_hugepage_enabled(struct vm_area_struct *vma)
+ {
+ 	return false;
+ }
  
 -static inline void prep_transhuge_page(struct page *page) {}
 -
  #define transparent_hugepage_flags 0UL
 -
 -#define thp_get_unmapped_area	NULL
 -
 -static inline bool
 -can_split_huge_page(struct page *page, int *pextra_pins)
 -{
 -	BUILD_BUG();
 -	return false;
 -}
  static inline int
  split_huge_page_to_list(struct page *page, struct list_head *list)
  {
* Unmerged path include/linux/huge_mm.h
