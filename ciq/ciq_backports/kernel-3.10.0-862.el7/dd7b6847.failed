x86/mm: Honour passed pgprot in track_pfn_insert() and track_pfn_remap()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [x86] Honour passed pgprot in track_pfn_insert() and track_pfn_remap() (Larry Woodman) [1457572 1457561]
Rebuild_FUZZ: 94.12%
commit-author Matthew Wilcox <willy@linux.intel.com>
commit dd7b6847670a84b7bb7c38f8e69b2f12059bca66
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/dd7b6847.failed

track_pfn_insert() overwrites the pgprot that is passed in with a value
based on the VMA's page_prot.  This is a problem for people trying to
do clever things with the new vm_insert_pfn_prot() as it will simply
overwrite the passed protection flags.  If we use the current value of
the pgprot as the base, then it will behave as people are expecting.

Also fix track_pfn_remap() in the same way.

	Signed-off-by: Matthew Wilcox <willy@linux.intel.com>
	Acked-by: Andy Lutomirski <luto@kernel.org>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Andy Lutomirski <luto@amacapital.net>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: linux-mm@kvack.org
Link: http://lkml.kernel.org/r/1453742717-10326-2-git-send-email-matthew.r.wilcox@intel.com
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit dd7b6847670a84b7bb7c38f8e69b2f12059bca66)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/mm/pat.c
diff --cc arch/x86/mm/pat.c
index 59c76de65d5c,04e2e7144bee..000000000000
--- a/arch/x86/mm/pat.c
+++ b/arch/x86/mm/pat.c
@@@ -739,8 -943,8 +739,13 @@@ int track_pfn_remap(struct vm_area_stru
  			return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	*prot = __pgprot((pgprot_val(vma->vm_page_prot) & (~_PAGE_CACHE_MASK)) |
 +			 flags);
++=======
+ 	*prot = __pgprot((pgprot_val(*prot) & (~_PAGE_CACHE_MASK)) |
+ 			 cachemode2protval(pcm));
++>>>>>>> dd7b6847670a (x86/mm: Honour passed pgprot in track_pfn_insert() and track_pfn_remap())
  
  	return 0;
  }
@@@ -754,9 -958,9 +759,15 @@@ int track_pfn_insert(struct vm_area_str
  		return 0;
  
  	/* Set prot based on lookup */
++<<<<<<< HEAD
 +	flags = lookup_memtype(pfn_t_to_phys(pfn));
 +	*prot = __pgprot((pgprot_val(vma->vm_page_prot) & (~_PAGE_CACHE_MASK)) |
 +			 flags);
++=======
+ 	pcm = lookup_memtype(pfn_t_to_phys(pfn));
+ 	*prot = __pgprot((pgprot_val(*prot) & (~_PAGE_CACHE_MASK)) |
+ 			 cachemode2protval(pcm));
++>>>>>>> dd7b6847670a (x86/mm: Honour passed pgprot in track_pfn_insert() and track_pfn_remap())
  
  	return 0;
  }
* Unmerged path arch/x86/mm/pat.c
