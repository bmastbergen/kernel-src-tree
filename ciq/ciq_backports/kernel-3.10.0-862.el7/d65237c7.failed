scsi: qla2xxx: Fix mailbox failure while deleting Queue pairs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Fix mailbox failure while deleting Queue pairs (Himanshu Madhani) [1460030]
Rebuild_FUZZ: 94.83%
commit-author Sawan Chandak <sawan.chandak@cavium.com>
commit d65237c7f086042b5630d94fe2d151f62c09f723
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d65237c7.failed

In target mode driver, queue pairs are not created during driver load
time, instead they are created at the configuration time after chip
reset.  If a user tries to load/unload driver after queue pairs are
created, then there would be mailbox failure, while deleting queue
pairs.  Flag is added to check if queue pairs are created or not. Queue
pairs will be deleted only If they were created during target
configuration.

	Signed-off-by: Sawan Chandak <sawan.chandak@cavium.com>
	Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit d65237c7f086042b5630d94fe2d151f62c09f723)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_init.c
#	drivers/scsi/qla2xxx/qla_mid.c
#	drivers/scsi/qla2xxx/qla_os.c
diff --cc drivers/scsi/qla2xxx/qla_init.c
index b9189cae77e5,6230f33f2b85..000000000000
--- a/drivers/scsi/qla2xxx/qla_init.c
+++ b/drivers/scsi/qla2xxx/qla_init.c
@@@ -6778,10 -7719,12 +6778,17 @@@ fail_qid_map
  
  int qla2xxx_delete_qpair(struct scsi_qla_host *vha, struct qla_qpair *qpair)
  {
++<<<<<<< HEAD
 +	int ret, cpu_id;
++=======
+ 	int ret = QLA_FUNCTION_FAILED;
++>>>>>>> d65237c7f086 (scsi: qla2xxx: Fix mailbox failure while deleting Queue pairs)
  	struct qla_hw_data *ha = qpair->hw;
 +	struct qla_percpu_qp_hint *hint;
  
+ 	if (!vha->flags.qpairs_req_created && !vha->flags.qpairs_rsp_created)
+ 		goto fail;
+ 
  	qpair->delete_in_progress = 1;
  	while (atomic_read(&qpair->ref_count))
  		msleep(500);
@@@ -6796,15 -7739,13 +6803,22 @@@
  	mutex_lock(&ha->mq_lock);
  	ha->queue_pair_map[qpair->id] = NULL;
  	clear_bit(qpair->id, ha->qpair_qid_map);
 -	ha->num_qpairs--;
  	list_del(&qpair->qp_list_elem);
++<<<<<<< HEAD
 +	for_each_cpu(cpu_id, &qpair->cpu_mask) {
 +		hint = per_cpu_ptr(vha->qps_hint, cpu_id);
 +		hint->change_in_progress = 1;
 +		hint->qp = NULL;
 +		hint->change_in_progress = 0;
 +	}
 +	if (list_empty(&vha->qp_list))
++=======
+ 	if (list_empty(&vha->qp_list)) {
++>>>>>>> d65237c7f086 (scsi: qla2xxx: Fix mailbox failure while deleting Queue pairs)
  		vha->flags.qpairs_available = 0;
+ 		vha->flags.qpairs_req_created = 0;
+ 		vha->flags.qpairs_rsp_created = 0;
+ 	}
  	mempool_destroy(qpair->srb_mempool);
  	kfree(qpair);
  	mutex_unlock(&ha->mq_lock);
diff --cc drivers/scsi/qla2xxx/qla_mid.c
index e8fb4d809d33,f0605cd196fb..000000000000
--- a/drivers/scsi/qla2xxx/qla_mid.c
+++ b/drivers/scsi/qla2xxx/qla_mid.c
@@@ -730,14 -732,17 +731,28 @@@ qla25xx_create_req_que(struct qla_hw_da
  	    req->ring_ptr, req->ring_index, req->cnt,
  	    req->id, req->max_q_depth);
  
++<<<<<<< HEAD
 +	ret = qla25xx_init_req_que(base_vha, req);
 +	if (ret != QLA_SUCCESS) {
 +		ql_log(ql_log_fatal, base_vha, 0x00df,
 +		    "%s failed.\n", __func__);
 +		mutex_lock(&ha->mq_lock);
 +		clear_bit(que_id, ha->req_qid_map);
 +		mutex_unlock(&ha->mq_lock);
 +		goto que_failed;
++=======
+ 	if (startqp) {
+ 		ret = qla25xx_init_req_que(base_vha, req);
+ 		if (ret != QLA_SUCCESS) {
+ 			ql_log(ql_log_fatal, base_vha, 0x00df,
+ 			    "%s failed.\n", __func__);
+ 			mutex_lock(&ha->mq_lock);
+ 			clear_bit(que_id, ha->req_qid_map);
+ 			mutex_unlock(&ha->mq_lock);
+ 			goto que_failed;
+ 		}
+ 		vha->flags.qpairs_req_created = 1;
++>>>>>>> d65237c7f086 (scsi: qla2xxx: Fix mailbox failure while deleting Queue pairs)
  	}
  
  	return req->id;
@@@ -842,14 -848,17 +858,28 @@@ qla25xx_create_rsp_que(struct qla_hw_da
  	if (ret)
  		goto que_failed;
  
++<<<<<<< HEAD
 +	ret = qla25xx_init_rsp_que(base_vha, rsp);
 +	if (ret != QLA_SUCCESS) {
 +		ql_log(ql_log_fatal, base_vha, 0x00e7,
 +		    "%s failed.\n", __func__);
 +		mutex_lock(&ha->mq_lock);
 +		clear_bit(que_id, ha->rsp_qid_map);
 +		mutex_unlock(&ha->mq_lock);
 +		goto que_failed;
++=======
+ 	if (startqp) {
+ 		ret = qla25xx_init_rsp_que(base_vha, rsp);
+ 		if (ret != QLA_SUCCESS) {
+ 			ql_log(ql_log_fatal, base_vha, 0x00e7,
+ 			    "%s failed.\n", __func__);
+ 			mutex_lock(&ha->mq_lock);
+ 			clear_bit(que_id, ha->rsp_qid_map);
+ 			mutex_unlock(&ha->mq_lock);
+ 			goto que_failed;
+ 		}
+ 		vha->flags.qpairs_rsp_created = 1;
++>>>>>>> d65237c7f086 (scsi: qla2xxx: Fix mailbox failure while deleting Queue pairs)
  	}
  	rsp->req = NULL;
  
diff --cc drivers/scsi/qla2xxx/qla_os.c
index 4e0d0a2f9461,13e4d2428a9a..000000000000
--- a/drivers/scsi/qla2xxx/qla_os.c
+++ b/drivers/scsi/qla2xxx/qla_os.c
@@@ -347,9 -371,27 +347,30 @@@ static int qla2x00_alloc_queues(struct 
  		goto fail_rsp_map;
  	}
  
++<<<<<<< HEAD
++=======
+ 	ha->base_qpair = kzalloc(sizeof(struct qla_qpair), GFP_KERNEL);
+ 	if (ha->base_qpair == NULL) {
+ 		ql_log(ql_log_warn, vha, 0x00e0,
+ 		    "Failed to allocate base queue pair memory.\n");
+ 		goto fail_base_qpair;
+ 	}
+ 
+ 	rsp->qpair = ha->base_qpair;
+ 	rsp->req = req;
+ 	ha->base_qpair->req = req;
+ 	ha->base_qpair->rsp = rsp;
+ 	ha->base_qpair->vha = vha;
+ 	ha->base_qpair->qp_lock_ptr = &ha->hardware_lock;
+ 	/* init qpair to this cpu. Will adjust at run time. */
+ 	ha->base_qpair->msix = &ha->msix_entries[QLA_MSIX_RSP_Q];
+ 	INIT_LIST_HEAD(&ha->base_qpair->hints_list);
+ 	qla_cpu_update(rsp->qpair, smp_processor_id());
+ 
++>>>>>>> d65237c7f086 (scsi: qla2xxx: Fix mailbox failure while deleting Queue pairs)
  	if (ql2xmqsupport && ha->max_qpairs) {
 -		ha->queue_pair_map = kcalloc(ha->max_qpairs, sizeof(struct qla_qpair *),
 -			GFP_KERNEL);
 +		ha->queue_pair_map = kcalloc(ha->max_qpairs,
 +			sizeof(struct qla_qpair *), GFP_KERNEL);
  		if (!ha->queue_pair_map) {
  			ql_log(ql_log_fatal, vha, 0x0180,
  			    "Unable to allocate memory for queue pair ptrs.\n");
diff --git a/drivers/scsi/qla2xxx/qla_def.h b/drivers/scsi/qla2xxx/qla_def.h
index 3f28536dc812..35540aba9f2a 100644
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@ -3575,6 +3575,8 @@ typedef struct scsi_qla_host {
 		uint32_t	fw_tgt_reported:1;
 		uint32_t	bbcr_enable:1;
 		uint32_t	qpairs_available:1;
+		uint32_t	qpairs_req_created:1;
+		uint32_t	qpairs_rsp_created:1;
 	} flags;
 
 	atomic_t	loop_state;
* Unmerged path drivers/scsi/qla2xxx/qla_init.c
* Unmerged path drivers/scsi/qla2xxx/qla_mid.c
* Unmerged path drivers/scsi/qla2xxx/qla_os.c
