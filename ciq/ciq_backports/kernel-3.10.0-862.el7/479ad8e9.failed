scsi: cxlflash: Remove zeroing of private command data

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] cxlflash: Remove zeroing of private command data (Gustavo Duarte) [1456494]
Rebuild_FUZZ: 94.12%
commit-author Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
commit 479ad8e9d48c4d82c92417b012193e967fc33b8a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/479ad8e9.failed

The SCSI core now zeroes the per-command private data area prior to
calling into the LLD. Replace the clearing operation that takes place
when the private command data reference is obtained with a routine that
performs common initializations. The zeroing that takes place in the
device reset path remains intact as the private command data associated
with the specified SCSI command is not guaranteed to be cleared.

	Signed-off-by: Matthew R. Ochs <mrochs@linux.vnet.ibm.com>
	Signed-off-by: Uma Krishnan <ukrishn@linux.vnet.ibm.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 479ad8e9d48c4d82c92417b012193e967fc33b8a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/cxlflash/common.h
#	drivers/scsi/cxlflash/main.c
diff --cc drivers/scsi/cxlflash/common.h
index 811927d91c5c,6d95e8e147e0..000000000000
--- a/drivers/scsi/cxlflash/common.h
+++ b/drivers/scsi/cxlflash/common.h
@@@ -146,14 -173,31 +146,39 @@@ struct afu_cmd 
  	 */
  } __aligned(cache_line_size());
  
++<<<<<<< HEAD
 +struct afu {
++=======
+ static inline struct afu_cmd *sc_to_afuc(struct scsi_cmnd *sc)
+ {
+ 	return PTR_ALIGN(scsi_cmd_priv(sc), __alignof__(struct afu_cmd));
+ }
+ 
+ static inline struct afu_cmd *sc_to_afuci(struct scsi_cmnd *sc)
+ {
+ 	struct afu_cmd *afuc = sc_to_afuc(sc);
+ 
+ 	INIT_LIST_HEAD(&afuc->queue);
+ 	return afuc;
+ }
+ 
+ static inline struct afu_cmd *sc_to_afucz(struct scsi_cmnd *sc)
+ {
+ 	struct afu_cmd *afuc = sc_to_afuc(sc);
+ 
+ 	memset(afuc, 0, sizeof(*afuc));
+ 	return sc_to_afuci(sc);
+ }
+ 
+ struct hwq {
++>>>>>>> 479ad8e9d48c (scsi: cxlflash: Remove zeroing of private command data)
  	/* Stuff requiring alignment go first. */
 -	struct sisl_ioarcb sq[NUM_SQ_ENTRY];		/* 16K SQ */
 -	u64 rrq_entry[NUM_RRQ_ENTRY];			/* 2K RRQ */
 +
 +	u64 rrq_entry[NUM_RRQ_ENTRY];	/* 2K RRQ */
 +	/*
 +	 * Command & data for AFU commands.
 +	 */
 +	struct afu_cmd cmd[CXLFLASH_NUM_CMDS];
  
  	/* Beware of alignment till here. Preferably introduce new
  	 * fields after this point
diff --cc drivers/scsi/cxlflash/main.c
index c68badcfa77f,43389825299a..000000000000
--- a/drivers/scsi/cxlflash/main.c
+++ b/drivers/scsi/cxlflash/main.c
@@@ -455,19 -540,19 +455,27 @@@ static const char *cxlflash_driver_info
   */
  static int cxlflash_queuecommand(struct Scsi_Host *host, struct scsi_cmnd *scp)
  {
 -	struct cxlflash_cfg *cfg = shost_priv(host);
 +	struct cxlflash_cfg *cfg = (struct cxlflash_cfg *)host->hostdata;
  	struct afu *afu = cfg->afu;
  	struct device *dev = &cfg->dev->dev;
++<<<<<<< HEAD
 +	struct afu_cmd *cmd;
 +	u32 port_sel = scp->device->channel + 1;
 +	int nseg, i, ncount;
 +	struct scatterlist *sg;
++=======
+ 	struct afu_cmd *cmd = sc_to_afuci(scp);
+ 	struct scatterlist *sg = scsi_sglist(scp);
+ 	int hwq_index = cmd_to_target_hwq(host, scp, afu);
+ 	struct hwq *hwq = get_hwq(afu, hwq_index);
+ 	u16 req_flags = SISL_REQ_FLAGS_SUP_UNDERRUN;
++>>>>>>> 479ad8e9d48c (scsi: cxlflash: Remove zeroing of private command data)
  	ulong lock_flags;
 +	short lflag = 0;
  	int rc = 0;
  
 -	dev_dbg_ratelimited(dev, "%s: (scp=%p) %d/%d/%d/%llu "
 -			    "cdb=(%08x-%08x-%08x-%08x)\n",
 +	dev_dbg_ratelimited(dev, "%s: (scp=%p) %d/%d/%d/%d "
 +			    "cdb=(%08X-%08X-%08X-%08X)\n",
  			    __func__, scp, host->host_no, scp->device->channel,
  			    scp->device->id, scp->device->lun,
  			    get_unaligned_be32(&((u32 *)scp->cmnd)[0]),
* Unmerged path drivers/scsi/cxlflash/common.h
* Unmerged path drivers/scsi/cxlflash/main.c
