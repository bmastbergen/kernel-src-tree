nvme: Quirks for PM1725 controllers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] Quirks for PM1725 controllers (David Milburn) [1457880 1456486 1454365]
Rebuild_FUZZ: 90.62%
commit-author Martin K. Petersen <martin.petersen@oracle.com>
commit d554b5e1ca64d23e4f839e6531490fee8479fbaf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d554b5e1.failed

PM1725 controllers have a couple of quirks that need to be handled in
the driver:

 - I/O queue depth must be limited to 64 entries on controllers that do
   not report MQES.

 - The host interface registers go offline briefly while resetting the
   chip. Thus a delay is needed before checking whether the controller
   is ready.

Note that the admin queue depth is also limited to 64 on older versions
of this board. Since our NVME_AQ_DEPTH is now 32 that is no longer an
issue.

	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
(cherry picked from commit d554b5e1ca64d23e4f839e6531490fee8479fbaf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/pci.c
diff --cc drivers/nvme/host/pci.c
index bdee6de6e811,343263bcb49a..000000000000
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@@ -1520,6 -1898,24 +1520,27 @@@ static int nvme_pci_enable(struct nvme_
  	dev->q_depth = min_t(int, NVME_CAP_MQES(cap) + 1, NVME_Q_DEPTH);
  	dev->db_stride = 1 << NVME_CAP_STRIDE(cap);
  	dev->dbs = dev->bar + 4096;
++<<<<<<< HEAD
++=======
+ 
+ 	/*
+ 	 * Temporary fix for the Apple controller found in the MacBook8,1 and
+ 	 * some MacBook7,1 to avoid controller resets and data loss.
+ 	 */
+ 	if (pdev->vendor == PCI_VENDOR_ID_APPLE && pdev->device == 0x2001) {
+ 		dev->q_depth = 2;
+ 		dev_warn(dev->ctrl.device, "detected Apple NVMe controller, "
+ 			"set queue depth=%u to work around controller resets\n",
+ 			dev->q_depth);
+ 	} else if (pdev->vendor == PCI_VENDOR_ID_SAMSUNG &&
+ 		   (pdev->device == 0xa821 || pdev->device == 0xa822) &&
+ 		   NVME_CAP_MQES(cap) == 0) {
+ 		dev->q_depth = 64;
+ 		dev_err(dev->ctrl.device, "detected PM1725 NVMe controller, "
+                         "set queue depth=%u\n", dev->q_depth);
+ 	}
+ 
++>>>>>>> d554b5e1ca64 (nvme: Quirks for PM1725 controllers)
  	/*
  	 * CMBs can currently only exist on >=1.2 PCIe devices. We only
  	 * populate sysfs if a CMB is implemented. Note that we add the
@@@ -2037,7 -2460,13 +2058,11 @@@ static const struct pci_device_id nvme_
  		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
  	{ PCI_DEVICE(0x1c5f, 0x0540),	/* Memblaze Pblaze4 adapter */
  		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
+ 	{ PCI_DEVICE(0x144d, 0xa821),   /* Samsung PM1725 */
+ 		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
+ 	{ PCI_DEVICE(0x144d, 0xa822),   /* Samsung PM1725a */
+ 		.driver_data = NVME_QUIRK_DELAY_BEFORE_CHK_RDY, },
  	{ PCI_DEVICE_CLASS(PCI_CLASS_STORAGE_EXPRESS, 0xffffff) },
 -	{ PCI_DEVICE(PCI_VENDOR_ID_APPLE, 0x2001) },
 -	{ PCI_DEVICE(PCI_VENDOR_ID_APPLE, 0x2003) },
  	{ 0, }
  };
  MODULE_DEVICE_TABLE(pci, nvme_id_table);
* Unmerged path drivers/nvme/host/pci.c
