nvme: rename uuid to nguid in nvme_ns

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [nvme] rename uuid to nguid in nvme_ns (David Milburn) [1451199]
Rebuild_FUZZ: 91.18%
commit-author Johannes Thumshirn <jthumshirn@suse.de>
commit 90985b84c42a045c0d3ed2753a839b37edb3a8f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/90985b84.failed

The uuid field in the nvme_ns structure represents the nguid field
from the identify namespace command. And as NVMe 1.3 introduced an
UUID in the NVMe Namespace Identification Descriptor this will
collide.

So rename the uuid to nguid to prevent any further
confusion. Unfortunately we export the nguid to sysfs in the uuid
sysfs attribute, but this can't be changed anymore without possibly
breaking existing userspace.

	Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.com>
	Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit 90985b84c42a045c0d3ed2753a839b37edb3a8f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index b83a9ba5ece8,c6e01ee2e35e..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -888,15 -1009,17 +888,19 @@@ static int nvme_revalidate_disk(struct 
  	}
  
  	if (ns->ctrl->vs >= NVME_VS(1, 1, 0))
 -		memcpy(ns->eui, (*id)->eui64, sizeof(ns->eui));
 +		memcpy(ns->eui, id->eui64, sizeof(ns->eui));
  	if (ns->ctrl->vs >= NVME_VS(1, 2, 0))
++<<<<<<< HEAD
 +		memcpy(ns->uuid, id->nguid, sizeof(ns->uuid));
++=======
+ 		memcpy(ns->nguid, (*id)->nguid, sizeof(ns->nguid));
++>>>>>>> 90985b84c42a (nvme: rename uuid to nguid in nvme_ns)
  
 -	return 0;
 -}
 -
 -static void __nvme_revalidate_disk(struct gendisk *disk, struct nvme_id_ns *id)
 -{
 -	struct nvme_ns *ns = disk->private_data;
 -	u16 bs;
 +	old_ms = ns->ms;
 +	lbaf = id->flbas & NVME_NS_FLBAS_LBA_MASK;
 +	ns->lba_shift = id->lbaf[lbaf].ds;
 +	ns->ms = le16_to_cpu(id->lbaf[lbaf].ms);
 +	ns->ext = ns->ms && (id->flbas & NVME_NS_FLBAS_META_EXT);
  
  	/*
  	 * If identify namespace failed, use default 512 byte block size so
@@@ -1395,8 -1803,8 +1399,13 @@@ static DEVICE_ATTR(wwid, S_IRUGO, wwid_
  static ssize_t uuid_show(struct device *dev, struct device_attribute *attr,
  								char *buf)
  {
++<<<<<<< HEAD
 +	struct nvme_ns *ns = dev_to_disk(dev)->private_data;
 +	return sprintf(buf, "%pU\n", ns->uuid);
++=======
+ 	struct nvme_ns *ns = nvme_get_ns_from_dev(dev);
+ 	return sprintf(buf, "%pU\n", ns->nguid);
++>>>>>>> 90985b84c42a (nvme: rename uuid to nguid in nvme_ns)
  }
  static DEVICE_ATTR(uuid, S_IRUGO, uuid_show, NULL);
  
@@@ -1428,10 -1836,10 +1437,10 @@@ static umode_t nvme_ns_attrs_are_visibl
  		struct attribute *a, int n)
  {
  	struct device *dev = container_of(kobj, struct device, kobj);
 -	struct nvme_ns *ns = nvme_get_ns_from_dev(dev);
 +	struct nvme_ns *ns = dev_to_disk(dev)->private_data;
  
  	if (a == &dev_attr_uuid.attr) {
- 		if (!memchr_inv(ns->uuid, 0, sizeof(ns->uuid)))
+ 		if (!memchr_inv(ns->nguid, 0, sizeof(ns->nguid)))
  			return 0;
  	}
  	if (a == &dev_attr_eui.attr) {
* Unmerged path drivers/nvme/host/core.c
diff --git a/drivers/nvme/host/nvme.h b/drivers/nvme/host/nvme.h
index edb3488b21b7..493a7ba20bac 100644
--- a/drivers/nvme/host/nvme.h
+++ b/drivers/nvme/host/nvme.h
@@ -167,7 +167,7 @@ struct nvme_ns {
 	int instance;
 
 	u8 eui[8];
-	u8 uuid[16];
+	u8 nguid[16];
 
 	unsigned ns_id;
 	int lba_shift;
