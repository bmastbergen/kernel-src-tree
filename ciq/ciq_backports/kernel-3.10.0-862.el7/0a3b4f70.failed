i40evf: enable support for VF VLAN tag stripping control

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jacob Keller <jacob.e.keller@intel.com>
commit 0a3b4f702fb1f76b03530d58af9efc5e10392185
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/0a3b4f70.failed

A recent commit 809481484e5d ("i40e/i40evf: support for VF VLAN tag
stripping control") added support for VFs to negotiate the control of
VLAN tag stripping. This should have allowed VFs to disable the feature.
Unfortunately, the flag was set only in netdev->feature flags and not in
netdev->hw_features.

This ultimately causes the stack to assume that it cannot change the
flag, so it was unchangeable and marked as [fixed] in the ethtool -k
output.

Fix this by setting the feature in hw_features first, just as we do for
the PF code. This enables ethtool -K to disable the feature correctly,
and fully enables user control of the VLAN tag stripping feature.

	Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 0a3b4f702fb1f76b03530d58af9efc5e10392185)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/i40evf/i40evf_main.c
diff --cc drivers/net/ethernet/intel/i40evf/i40evf_main.c
index 9ec61c90b9c2,1d2fc898b664..000000000000
--- a/drivers/net/ethernet/intel/i40evf/i40evf_main.c
+++ b/drivers/net/ethernet/intel/i40evf/i40evf_main.c
@@@ -2320,9 -2435,11 +2316,17 @@@ static netdev_features_t i40evf_fix_fea
  {
  	struct i40evf_adapter *adapter = netdev_priv(netdev);
  
++<<<<<<< HEAD
 +	features &= ~I40EVF_VLAN_FEATURES;
 +	if (adapter->vf_res->vf_offload_flags & I40E_VIRTCHNL_VF_OFFLOAD_VLAN)
 +		features |= I40EVF_VLAN_FEATURES;
++=======
+ 	if (!(adapter->vf_res->vf_cap_flags & VIRTCHNL_VF_OFFLOAD_VLAN))
+ 		features &= ~(NETIF_F_HW_VLAN_CTAG_TX |
+ 			      NETIF_F_HW_VLAN_CTAG_RX |
+ 			      NETIF_F_HW_VLAN_CTAG_FILTER);
+ 
++>>>>>>> 0a3b4f702fb1 (i40evf: enable support for VF VLAN tag stripping control)
  	return features;
  }
  
@@@ -2390,46 -2510,77 +2394,60 @@@ int i40evf_process_config(struct i40evf
  		return -ENODEV;
  	}
  
 -	if (num_req_queues &&
 -	    num_req_queues != adapter->vsi_res->num_queue_pairs) {
 -		/* Problem.  The PF gave us fewer queues than what we had
 -		 * negotiated in our request.  Need a reset to see if we can't
 -		 * get back to a working state.
 -		 */
 -		dev_err(&adapter->pdev->dev,
 -			"Requested %d queues, but PF only gave us %d.\n",
 -			num_req_queues,
 -			adapter->vsi_res->num_queue_pairs);
 -		adapter->flags |= I40EVF_FLAG_REINIT_ITR_NEEDED;
 -		adapter->num_req_queues = adapter->vsi_res->num_queue_pairs;
 -		i40evf_schedule_reset(adapter);
 -		return -ENODEV;
 -	}
 -	adapter->num_req_queues = 0;
 -
 -	hw_enc_features = NETIF_F_SG			|
 -			  NETIF_F_IP_CSUM		|
 -			  NETIF_F_IPV6_CSUM		|
 -			  NETIF_F_HIGHDMA		|
 -			  NETIF_F_SOFT_FEATURES	|
 -			  NETIF_F_TSO			|
 -			  NETIF_F_TSO_ECN		|
 -			  NETIF_F_TSO6			|
 -			  NETIF_F_SCTP_CRC		|
 -			  NETIF_F_RXHASH		|
 -			  NETIF_F_RXCSUM		|
 -			  0;
 -
 -	/* advertise to stack only if offloads for encapsulated packets is
 -	 * supported
 -	 */
 -	if (vfres->vf_cap_flags & VIRTCHNL_VF_OFFLOAD_ENCAP) {
 -		hw_enc_features |= NETIF_F_GSO_UDP_TUNNEL	|
 +	netdev->hw_enc_features |= NETIF_F_SG			|
 +				   NETIF_F_IP_CSUM		|
 +				   NETIF_F_IPV6_CSUM		|
 +				   NETIF_F_HIGHDMA		|
 +				   NETIF_F_SOFT_FEATURES	|
 +				   NETIF_F_TSO			|
 +				   NETIF_F_TSO_ECN		|
 +				   NETIF_F_TSO6			|
  				   NETIF_F_GSO_GRE		|
  				   NETIF_F_GSO_GRE_CSUM		|
 -				   NETIF_F_GSO_IPXIP4		|
 -				   NETIF_F_GSO_IPXIP6		|
 +				   NETIF_F_GSO_IPIP		|
 +				   NETIF_F_GSO_SIT		|
 +				   NETIF_F_GSO_UDP_TUNNEL	|
  				   NETIF_F_GSO_UDP_TUNNEL_CSUM	|
  				   NETIF_F_GSO_PARTIAL		|
 +				   NETIF_F_SCTP_CRC		|
 +				   NETIF_F_RXHASH		|
 +				   NETIF_F_RXCSUM		|
  				   0;
  
 -		if (!(vfres->vf_cap_flags &
 -		      VIRTCHNL_VF_OFFLOAD_ENCAP_CSUM))
 -			netdev->gso_partial_features |=
 -				NETIF_F_GSO_UDP_TUNNEL_CSUM;
 +	if (!(adapter->flags & I40EVF_FLAG_OUTER_UDP_CSUM_CAPABLE))
 +		netdev->gso_partial_features |= NETIF_F_GSO_UDP_TUNNEL_CSUM;
 +
 +	netdev->gso_partial_features |= NETIF_F_GSO_GRE_CSUM;
  
 -		netdev->gso_partial_features |= NETIF_F_GSO_GRE_CSUM;
 -		netdev->hw_enc_features |= NETIF_F_TSO_MANGLEID;
 -		netdev->hw_enc_features |= hw_enc_features;
 -	}
  	/* record features VLANs can make use of */
 -	netdev->vlan_features |= hw_enc_features | NETIF_F_TSO_MANGLEID;
 +	netdev->vlan_features |= netdev->hw_enc_features |
 +				 NETIF_F_TSO_MANGLEID;
  
  	/* Write features and hw_features separately to avoid polluting
 -	 * with, or dropping, features that are set when we registered.
 +	 * with, or dropping, features that are set when we registgered.
  	 */
 -	hw_features = hw_enc_features;
 +	netdev->hw_features |= netdev->hw_enc_features;
 +
++<<<<<<< HEAD
 +	netdev->features |= netdev->hw_enc_features | I40EVF_VLAN_FEATURES;
 +	netdev->hw_enc_features |= NETIF_F_TSO_MANGLEID;
  
 +	/* disable VLAN features if not supported */
 +	if (!(vfres->vf_offload_flags & I40E_VIRTCHNL_VF_OFFLOAD_VLAN))
 +		netdev->features ^= I40EVF_VLAN_FEATURES;
++=======
+ 	/* Enable VLAN features if supported */
+ 	if (vfres->vf_cap_flags & VIRTCHNL_VF_OFFLOAD_VLAN)
+ 		hw_features |= (NETIF_F_HW_VLAN_CTAG_TX |
+ 				NETIF_F_HW_VLAN_CTAG_RX);
+ 
+ 	netdev->hw_features |= hw_features;
+ 
+ 	netdev->features |= hw_features;
+ 
+ 	if (vfres->vf_cap_flags & VIRTCHNL_VF_OFFLOAD_VLAN)
+ 		netdev->features |= NETIF_F_HW_VLAN_CTAG_FILTER;
++>>>>>>> 0a3b4f702fb1 (i40evf: enable support for VF VLAN tag stripping control)
  
  	adapter->vsi.id = adapter->vsi_res->vsi_id;
  
* Unmerged path drivers/net/ethernet/intel/i40evf/i40evf_main.c
