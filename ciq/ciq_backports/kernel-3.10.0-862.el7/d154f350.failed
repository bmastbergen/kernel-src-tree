qla2xxx: Enable SLER conditionally in target mode.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [scsi] qla2xxx: Enable SLER conditionally in target mode (Himanshu Madhani) [1327621]
Rebuild_FUZZ: 98.99%
commit-author Arun Easi <arun.easi@qlogic.com>
commit d154f35029c1f77b589389d2afb1e1766fb80c28
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d154f350.failed

Sequence level error recovery (aka FC Tape) is not really required
for disk devices. On heavily loaded system, with slow turn around,
a bunch of status enquiries using REC puts additional burden to the
target, so just turn off SLER by default.

	Signed-off-by: Arun Easi <arun.easi@qlogic.com>
	Signed-off-by: Saurav Kashyap <saurav.kashyap@qlogic.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit d154f35029c1f77b589389d2afb1e1766fb80c28)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_target.c
diff --cc drivers/scsi/qla2xxx/qla_target.c
index 5f7b0de5e170,85587fcd5a38..000000000000
--- a/drivers/scsi/qla2xxx/qla_target.c
+++ b/drivers/scsi/qla2xxx/qla_target.c
@@@ -4719,19 -5171,23 +4724,29 @@@ qlt_24xx_config_nvram_stage1(struct scs
  
  		/* Disable ini mode, if requested */
  		if (!qla_ini_mode_enabled(vha))
 -			nv->firmware_options_1 |= __constant_cpu_to_le32(BIT_5);
 +			nv->firmware_options_1 |= cpu_to_le32(BIT_5);
  
  		/* Disable Full Login after LIP */
 -		nv->firmware_options_1 &= __constant_cpu_to_le32(~BIT_13);
 +		nv->firmware_options_1 &= cpu_to_le32(~BIT_13);
  		/* Enable initial LIP */
++<<<<<<< HEAD
 +		nv->firmware_options_1 &= cpu_to_le32(~BIT_9);
 +		/* Enable FC Tape support */
 +		nv->firmware_options_2 |= cpu_to_le32(BIT_12);
++=======
+ 		nv->firmware_options_1 &= __constant_cpu_to_le32(~BIT_9);
+ 		if (ql2xtgt_tape_enable)
+ 			/* Enable FC Tape support */
+ 			nv->firmware_options_2 |= cpu_to_le32(BIT_12);
+ 		else
+ 			/* Disable FC Tape support */
+ 			nv->firmware_options_2 &= cpu_to_le32(~BIT_12);
++>>>>>>> d154f35029c1 (qla2xxx: Enable SLER conditionally in target mode.)
  
  		/* Disable Full Login after LIP */
 -		nv->host_p &= __constant_cpu_to_le32(~BIT_10);
 +		nv->host_p &= cpu_to_le32(~BIT_10);
  		/* Enable target PRLI control */
 -		nv->firmware_options_2 |= __constant_cpu_to_le32(BIT_14);
 +		nv->firmware_options_2 |= cpu_to_le32(BIT_14);
  	} else {
  		if (ha->tgt.saved_set) {
  			nv->exchange_count = ha->tgt.saved_exchange_count;
@@@ -4802,19 -5258,24 +4817,29 @@@ qlt_81xx_config_nvram_stage1(struct scs
  
  		/* Disable ini mode, if requested */
  		if (!qla_ini_mode_enabled(vha))
 -			nv->firmware_options_1 |=
 -			    __constant_cpu_to_le32(BIT_5);
 +			nv->firmware_options_1 |= cpu_to_le32(BIT_5);
  
  		/* Disable Full Login after LIP */
 -		nv->firmware_options_1 &= __constant_cpu_to_le32(~BIT_13);
 +		nv->firmware_options_1 &= cpu_to_le32(~BIT_13);
  		/* Enable initial LIP */
++<<<<<<< HEAD
 +		nv->firmware_options_1 &= cpu_to_le32(~BIT_9);
 +		/* Enable FC tape support */
 +		nv->firmware_options_2 |= cpu_to_le32(BIT_12);
++=======
+ 		nv->firmware_options_1 &= __constant_cpu_to_le32(~BIT_9);
+ 		if (ql2xtgt_tape_enable)
+ 			/* Enable FC tape support */
+ 			nv->firmware_options_2 |= cpu_to_le32(BIT_12);
+ 		else
+ 			/* Disable FC tape support */
+ 			nv->firmware_options_2 &= cpu_to_le32(~BIT_12);
++>>>>>>> d154f35029c1 (qla2xxx: Enable SLER conditionally in target mode.)
  
  		/* Disable Full Login after LIP */
 -		nv->host_p &= __constant_cpu_to_le32(~BIT_10);
 +		nv->host_p &= cpu_to_le32(~BIT_10);
  		/* Enable target PRLI control */
 -		nv->firmware_options_2 |= __constant_cpu_to_le32(BIT_14);
 +		nv->firmware_options_2 |= cpu_to_le32(BIT_14);
  	} else {
  		if (ha->tgt.saved_set) {
  			nv->exchange_count = ha->tgt.saved_exchange_count;
* Unmerged path drivers/scsi/qla2xxx/qla_target.c
