net: dev: reduce both ingress hook ifdefs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] dev: reduce both ingress hook ifdefs (Ivan Vecera) [1445420]
Rebuild_FUZZ: 93.51%
commit-author Daniel Borkmann <daniel@iogearbox.net>
commit e7582bab5d28ea72e07cf2c74632eaf46a6c1a50
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/e7582bab.failed

Reduce ifdef pollution slightly, no functional change. We can simply
remove the extra alternative definition of handle_ing() and nf_ingress().

	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e7582bab5d28ea72e07cf2c74632eaf46a6c1a50)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index 826f335251e4,594163d0c6eb..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -3826,26 -3665,9 +3826,29 @@@ static inline struct sk_buff *handle_in
  	default:
  		break;
  	}
- 
+ #endif /* CONFIG_NET_CLS_ACT */
  	return skb;
  }
++<<<<<<< HEAD
 +#endif
++=======
++>>>>>>> e7582bab5d28 (net: dev: reduce both ingress hook ifdefs)
 +
 +/**
 + *	netdev_is_rx_handler_busy - check if receive handler is registered
 + *	@dev: device to check
 + *
 + *	Check if a receive handler is already registered for a given device.
 + *	Return true if there one.
 + *
 + *	The caller must hold the rtnl_mutex.
 + */
 +bool netdev_is_rx_handler_busy(struct net_device *dev)
 +{
 +	ASSERT_RTNL();
 +	return dev && rtnl_dereference(dev->rx_handler);
 +}
 +EXPORT_SYMBOL_GPL(netdev_is_rx_handler_busy);
  
  /**
   *	netdev_rx_handler_register - register receive handler
@@@ -3918,6 -3740,22 +3921,25 @@@ static bool skb_pfmemalloc_protocol(str
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static inline int nf_ingress(struct sk_buff *skb, struct packet_type **pt_prev,
+ 			     int *ret, struct net_device *orig_dev)
+ {
+ #ifdef CONFIG_NETFILTER_INGRESS
+ 	if (nf_hook_ingress_active(skb)) {
+ 		if (*pt_prev) {
+ 			*ret = deliver_skb(skb, *pt_prev, orig_dev);
+ 			*pt_prev = NULL;
+ 		}
+ 
+ 		return nf_hook_ingress(skb);
+ 	}
+ #endif /* CONFIG_NETFILTER_INGRESS */
+ 	return 0;
+ }
+ 
++>>>>>>> e7582bab5d28 (net: dev: reduce both ingress hook ifdefs)
  static int __netif_receive_skb_core(struct sk_buff *skb, bool pfmemalloc)
  {
  	struct packet_type *ptype, *pt_prev;
* Unmerged path net/core/dev.c
