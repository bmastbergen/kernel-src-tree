blk-mq-sched: make completed_request() callback more useful

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Omar Sandoval <osandov@fb.com>
commit c05f8525f67b7d6489b0502211d4ed35622d9beb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/c05f8525.failed

Currently, this callback is called right after put_request() and has no
distinguishable purpose. Instead, let's call it before put_request() as
soon as I/O has completed on the request, before we account it in
blk-stat. With this, Kyber can enable stats when it sees a latency
outlier and make sure the outlier gets accounted.

	Signed-off-by: Omar Sandoval <osandov@fb.com>
	Signed-off-by: Jens Axboe <axboe@fb.com>
(cherry picked from commit c05f8525f67b7d6489b0502211d4ed35622d9beb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-sched.h
#	block/blk-mq.c
#	include/linux/elevator.h
diff --cc block/blk-mq.c
index c88b894107f8,e2ef7b460924..000000000000
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@@ -354,18 -333,25 +354,27 @@@ out_queue_exit
  }
  EXPORT_SYMBOL_GPL(blk_mq_alloc_request_hctx);
  
 -void __blk_mq_finish_request(struct blk_mq_hw_ctx *hctx, struct blk_mq_ctx *ctx,
 -			     struct request *rq)
 +static void __blk_mq_free_request(struct blk_mq_hw_ctx *hctx,
 +				  struct blk_mq_ctx *ctx, struct request *rq)
  {
 -	const int sched_tag = rq->internal_tag;
 +	const int tag = rq->tag;
  	struct request_queue *q = rq->q;
  
 -	if (rq->rq_flags & RQF_MQ_INFLIGHT)
 +	if (rq->cmd_flags & REQ_MQ_INFLIGHT)
  		atomic_dec(&hctx->nr_active);
 -
 -	wbt_done(q->rq_wb, &rq->issue_stat);
 -	rq->rq_flags = 0;
 +	rq->cmd_flags = 0;
  
  	clear_bit(REQ_ATOM_STARTED, &rq->atomic_flags);
++<<<<<<< HEAD
 +	blk_mq_put_tag(hctx, tag, &ctx->last_tag);
++=======
+ 	clear_bit(REQ_ATOM_POLL_SLEPT, &rq->atomic_flags);
+ 	if (rq->tag != -1)
+ 		blk_mq_put_tag(hctx, hctx->tags, ctx, rq->tag);
+ 	if (sched_tag != -1)
+ 		blk_mq_put_tag(hctx, hctx->sched_tags, ctx, sched_tag);
+ 	blk_mq_sched_restart(hctx);
++>>>>>>> c05f8525f67b (blk-mq-sched: make completed_request() callback more useful)
  	blk_queue_exit(q);
  }
  
@@@ -448,6 -444,11 +457,14 @@@ static void __blk_mq_complete_request(s
  {
  	struct request_queue *q = rq->q;
  
++<<<<<<< HEAD
++=======
+ 	if (rq->internal_tag != -1)
+ 		blk_mq_sched_completed_request(rq);
+ 
+ 	blk_mq_stat_add(rq);
+ 
++>>>>>>> c05f8525f67b (blk-mq-sched: make completed_request() callback more useful)
  	if (!q->softirq_done_fn)
  		blk_mq_end_request(rq, rq->errors);
  	else
diff --cc include/linux/elevator.h
index 297200f44dc5,3a216318ae73..000000000000
--- a/include/linux/elevator.h
+++ b/include/linux/elevator.h
@@@ -72,6 -87,36 +72,39 @@@ struct elevator_op
  	elevator_registered_fn *elevator_registered_fn;
  };
  
++<<<<<<< HEAD
++=======
+ struct blk_mq_alloc_data;
+ struct blk_mq_hw_ctx;
+ 
+ struct elevator_mq_ops {
+ 	int (*init_sched)(struct request_queue *, struct elevator_type *);
+ 	void (*exit_sched)(struct elevator_queue *);
+ 	int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int);
+ 	void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int);
+ 
+ 	bool (*allow_merge)(struct request_queue *, struct request *, struct bio *);
+ 	bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *);
+ 	int (*request_merge)(struct request_queue *q, struct request **, struct bio *);
+ 	void (*request_merged)(struct request_queue *, struct request *, enum elv_merge);
+ 	void (*requests_merged)(struct request_queue *, struct request *, struct request *);
+ 	struct request *(*get_request)(struct request_queue *, unsigned int, struct blk_mq_alloc_data *);
+ 	void (*put_request)(struct request *);
+ 	void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool);
+ 	struct request *(*dispatch_request)(struct blk_mq_hw_ctx *);
+ 	bool (*has_work)(struct blk_mq_hw_ctx *);
+ 	void (*completed_request)(struct request *);
+ 	void (*started_request)(struct request *);
+ 	void (*requeue_request)(struct request *);
+ 	struct request *(*former_request)(struct request_queue *, struct request *);
+ 	struct request *(*next_request)(struct request_queue *, struct request *);
+ 	int (*get_rq_priv)(struct request_queue *, struct request *, struct bio *);
+ 	void (*put_rq_priv)(struct request_queue *, struct request *);
+ 	void (*init_icq)(struct io_cq *);
+ 	void (*exit_icq)(struct io_cq *);
+ };
+ 
++>>>>>>> c05f8525f67b (blk-mq-sched: make completed_request() callback more useful)
  #define ELV_NAME_MAX	(16)
  
  struct elv_fs_entry {
* Unmerged path block/blk-mq-sched.h
* Unmerged path block/blk-mq-sched.h
* Unmerged path block/blk-mq.c
* Unmerged path include/linux/elevator.h
