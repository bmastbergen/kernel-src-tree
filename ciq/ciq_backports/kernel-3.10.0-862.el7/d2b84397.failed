nfp: move control BAR pointer into data path structure

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit d2b84397601f370ca11a5a37a40787d31af778b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/d2b84397.failed

Control BAR pointer is used to unmask interrupts so it should be
in the first cacheline of adapter structure.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit d2b84397601f370ca11a5a37a40787d31af778b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfp_net.h
#	drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
#	drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net.h
index 1826ee93d1da,90a44fad6bd5..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net.h
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net.h
@@@ -417,18 -428,74 +417,82 @@@ static inline bool nfp_net_fw_ver_eq(st
  	       fw_ver->minor == minor;
  }
  
++<<<<<<< HEAD
++=======
+ struct nfp_stat_pair {
+ 	u64 pkts;
+ 	u64 bytes;
+ };
+ 
+ /**
+  * struct nfp_net_dp - NFP network device datapath data structure
+  * @dev:		Backpointer to struct device
+  * @netdev:		Backpointer to net_device structure
+  * @is_vf:		Is the driver attached to a VF?
+  * @bpf_offload_skip_sw:  Offloaded BPF program will not be rerun by cls_bpf
+  * @bpf_offload_xdp:	Offloaded BPF program is XDP
+  * @chained_metadata_format:  Firemware will use new metadata format
+  * @ctrl:		Local copy of the control register/word.
+  * @fl_bufsz:		Currently configured size of the freelist buffers
+  * @rx_offset:		Offset in the RX buffers where packet data starts
+  * @xdp_prog:		Installed XDP program
+  * @tx_rings:		Array of pre-allocated TX ring structures
+  * @rx_rings:		Array of pre-allocated RX ring structures
+  * @ctrl_bar:		Pointer to mapped control BAR
+  *
+  * @txd_cnt:		Size of the TX ring in number of descriptors
+  * @rxd_cnt:		Size of the RX ring in number of descriptors
+  * @num_r_vecs:		Number of used ring vectors
+  * @num_tx_rings:	Currently configured number of TX rings
+  * @num_stack_tx_rings:	Number of TX rings used by the stack (not XDP)
+  * @num_rx_rings:	Currently configured number of RX rings
+  */
+ struct nfp_net_dp {
+ 	struct device *dev;
+ 	struct net_device *netdev;
+ 
+ 	unsigned is_vf:1;
+ 	unsigned bpf_offload_skip_sw:1;
+ 	unsigned bpf_offload_xdp:1;
+ 	unsigned chained_metadata_format:1;
+ 
+ 	u32 ctrl;
+ 	u32 fl_bufsz;
+ 
+ 	u32 rx_offset;
+ 
+ 	struct bpf_prog *xdp_prog;
+ 
+ 	struct nfp_net_tx_ring *tx_rings;
+ 	struct nfp_net_rx_ring *rx_rings;
+ 
+ 	u8 __iomem *ctrl_bar;
+ 
+ 	/* Cold data follows */
+ 
+ 	unsigned int txd_cnt;
+ 	unsigned int rxd_cnt;
+ 
+ 	unsigned int num_r_vecs;
+ 
+ 	unsigned int num_tx_rings;
+ 	unsigned int num_stack_tx_rings;
+ 	unsigned int num_rx_rings;
+ };
+ 
++>>>>>>> d2b84397601f (nfp: move control BAR pointer into data path structure)
  /**
   * struct nfp_net - NFP network device structure
 - * @dp:			Datapath structure
 - * @fw_ver:		Firmware version
 + * @pdev:               Backpointer to PCI device
 + * @netdev:             Backpointer to net_device structure
 + * @is_vf:              Is the driver attached to a VF?
 + * @fw_loaded:          Is the firmware loaded?
 + * @ctrl:               Local copy of the control register/word.
 + * @fl_bufsz:           Currently configured size of the freelist buffers
 + * @rx_offset:		Offset in the RX buffers where packet data starts
 + * @fw_ver:             Firmware version
   * @cap:                Capabilities advertised by the Firmware
   * @max_mtu:            Maximum support MTU advertised by the Firmware
 - * @rss_hfunc:		RSS selected hash function
   * @rss_cfg:            RSS configuration
   * @rss_key:            RSS secret key
   * @rss_itbl:           RSS indirection table
diff --cc drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
index dfbf6b94ff5b,969c30589f23..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
@@@ -324,16 -338,16 +324,26 @@@ static void nfp_net_get_stats(struct ne
  	}
  	for (j = 0; j < NN_ET_RVEC_GATHER_STATS; j++)
  		data[i++] = gathered_stats[j];
++<<<<<<< HEAD
 +	for (j = 0; j < nn->num_tx_rings; j++) {
 +		io_p = nn->ctrl_bar + NFP_NET_CFG_TXR_STATS(j);
++=======
+ 	for (j = 0; j < nn->dp.num_tx_rings; j++) {
+ 		io_p = nn->dp.ctrl_bar + NFP_NET_CFG_TXR_STATS(j);
++>>>>>>> d2b84397601f (nfp: move control BAR pointer into data path structure)
  		data[i++] = readq(io_p);
- 		io_p = nn->ctrl_bar + NFP_NET_CFG_TXR_STATS(j) + 8;
+ 		io_p = nn->dp.ctrl_bar + NFP_NET_CFG_TXR_STATS(j) + 8;
  		data[i++] = readq(io_p);
  	}
++<<<<<<< HEAD
 +	for (j = 0; j < nn->num_rx_rings; j++) {
 +		io_p = nn->ctrl_bar + NFP_NET_CFG_RXR_STATS(j);
++=======
+ 	for (j = 0; j < nn->dp.num_rx_rings; j++) {
+ 		io_p = nn->dp.ctrl_bar + NFP_NET_CFG_RXR_STATS(j);
++>>>>>>> d2b84397601f (nfp: move control BAR pointer into data path structure)
  		data[i++] = readq(io_p);
- 		io_p = nn->ctrl_bar + NFP_NET_CFG_RXR_STATS(j) + 8;
+ 		io_p = nn->dp.ctrl_bar + NFP_NET_CFG_RXR_STATS(j) + 8;
  		data[i++] = readq(io_p);
  	}
  }
diff --cc drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
index bd3cf87f2365,86e61be6f35c..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
@@@ -209,8 -210,8 +209,13 @@@ static int nfp_netvf_pci_probe(struct p
  	vf->nn = nn;
  
  	nn->fw_ver = fw_ver;
++<<<<<<< HEAD
 +	nn->ctrl_bar = ctrl_bar;
 +	nn->is_vf = 1;
++=======
+ 	nn->dp.ctrl_bar = ctrl_bar;
+ 	nn->dp.is_vf = 1;
++>>>>>>> d2b84397601f (nfp: move control BAR pointer into data path structure)
  	nn->stride_tx = stride;
  	nn->stride_rx = stride;
  
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net.h
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_net_ethtool.c
diff --git a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
index 3afcdc11480c..1e52ccb4c274 100644
--- a/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
+++ b/drivers/net/ethernet/netronome/nfp/nfp_net_main.c
@@ -305,7 +305,7 @@ nfp_net_pf_alloc_port_netdev(struct nfp_pf *pf, void __iomem *ctrl_bar,
 
 	nn->cpp = pf->cpp;
 	nn->fw_ver = *fw_ver;
-	nn->ctrl_bar = ctrl_bar;
+	nn->dp.ctrl_bar = ctrl_bar;
 	nn->tx_bar = tx_bar;
 	nn->rx_bar = rx_bar;
 	nn->is_vf = 0;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfp_netvf_main.c
