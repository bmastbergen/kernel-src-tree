qed: fix spelling mistake: "calescing" -> "coalescing"

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Colin Ian King <colin.king@canonical.com>
commit 9e4a56139d091713b8dff93632f2149f28494ca8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/9e4a5613.failed

Trivial fix to spelling mistake in DP_NOTICE message

	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9e4a56139d091713b8dff93632f2149f28494ca8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/qlogic/qed/qed_l2.c
diff --cc drivers/net/ethernet/qlogic/qed/qed_l2.c
index f852981b5922,085338990f49..000000000000
--- a/drivers/net/ethernet/qlogic/qed/qed_l2.c
+++ b/drivers/net/ethernet/qlogic/qed/qed_l2.c
@@@ -2352,6 -2743,73 +2352,76 @@@ static int qed_configure_filter(struct 
  	}
  }
  
++<<<<<<< HEAD
++=======
+ static int qed_configure_arfs_searcher(struct qed_dev *cdev, bool en_searcher)
+ {
+ 	struct qed_hwfn *p_hwfn = QED_LEADING_HWFN(cdev);
+ 	struct qed_arfs_config_params arfs_config_params;
+ 
+ 	memset(&arfs_config_params, 0, sizeof(arfs_config_params));
+ 	arfs_config_params.tcp = true;
+ 	arfs_config_params.udp = true;
+ 	arfs_config_params.ipv4 = true;
+ 	arfs_config_params.ipv6 = true;
+ 	arfs_config_params.arfs_enable = en_searcher;
+ 
+ 	qed_arfs_mode_configure(p_hwfn, p_hwfn->p_arfs_ptt,
+ 				&arfs_config_params);
+ 	return 0;
+ }
+ 
+ static void
+ qed_arfs_sp_response_handler(struct qed_hwfn *p_hwfn,
+ 			     void *cookie, union event_ring_data *data,
+ 			     u8 fw_return_code)
+ {
+ 	struct qed_common_cb_ops *op = p_hwfn->cdev->protocol_ops.common;
+ 	void *dev = p_hwfn->cdev->ops_cookie;
+ 
+ 	op->arfs_filter_op(dev, cookie, fw_return_code);
+ }
+ 
+ static int qed_ntuple_arfs_filter_config(struct qed_dev *cdev, void *cookie,
+ 					 dma_addr_t mapping, u16 length,
+ 					 u16 vport_id, u16 rx_queue_id,
+ 					 bool add_filter)
+ {
+ 	struct qed_hwfn *p_hwfn = QED_LEADING_HWFN(cdev);
+ 	struct qed_spq_comp_cb cb;
+ 	int rc = -EINVAL;
+ 
+ 	cb.function = qed_arfs_sp_response_handler;
+ 	cb.cookie = cookie;
+ 
+ 	rc = qed_configure_rfs_ntuple_filter(p_hwfn, p_hwfn->p_arfs_ptt,
+ 					     &cb, mapping, length, rx_queue_id,
+ 					     vport_id, add_filter);
+ 	if (rc)
+ 		DP_NOTICE(p_hwfn,
+ 			  "Failed to issue a-RFS filter configuration\n");
+ 	else
+ 		DP_VERBOSE(p_hwfn, NETIF_MSG_DRV,
+ 			   "Successfully issued a-RFS filter configuration\n");
+ 
+ 	return rc;
+ }
+ 
+ static int qed_get_coalesce(struct qed_dev *cdev, u16 *coal, void *handle)
+ {
+ 	struct qed_queue_cid *p_cid = handle;
+ 	struct qed_hwfn *p_hwfn;
+ 	int rc;
+ 
+ 	p_hwfn = p_cid->p_owner;
+ 	rc = qed_get_queue_coalesce(p_hwfn, coal, handle);
+ 	if (rc)
+ 		DP_NOTICE(p_hwfn, "Unable to read queue coalescing\n");
+ 
+ 	return rc;
+ }
+ 
++>>>>>>> 9e4a56139d09 (qed: fix spelling mistake: "calescing" -> "coalescing")
  static int qed_fp_cqe_completion(struct qed_dev *dev,
  				 u8 rss_id, struct eth_slow_path_rx_cqe *cqe)
  {
* Unmerged path drivers/net/ethernet/qlogic/qed/qed_l2.c
