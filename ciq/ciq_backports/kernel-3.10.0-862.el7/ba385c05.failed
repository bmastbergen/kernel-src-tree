s390/mm: fix write access check in gup_huge_pmd()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [s390] mm: fix write access check in gup_huge_pmd() (Hendrik Brueckner) [1506126]
Rebuild_FUZZ: 94.62%
commit-author Gerald Schaefer <gerald.schaefer@de.ibm.com>
commit ba385c0594e723d41790ecfb12c610e6f90c7785
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/ba385c05.failed

The check for the _SEGMENT_ENTRY_PROTECT bit in gup_huge_pmd() is the
wrong way around. It must not be set for write==1, and not be checked for
write==0. Fix this similar to how it was fixed for ptes long time ago in
commit 25591b070336 ("[S390] fix get_user_pages_fast").

One impact of this bug would be unnecessarily using the gup slow path for
write==0 on r/w mappings. A potentially more severe impact would be that
gup_huge_pmd() will succeed for write==1 on r/o mappings.

	Cc: <stable@vger.kernel.org>
	Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
	Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
(cherry picked from commit ba385c0594e723d41790ecfb12c610e6f90c7785)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/mm/gup.c
diff --cc arch/s390/mm/gup.c
index 58889b77a1de,98ffe3ee9411..000000000000
--- a/arch/s390/mm/gup.c
+++ b/arch/s390/mm/gup.c
@@@ -53,13 -56,12 +53,17 @@@ static inline int gup_pte_range(pmd_t *
  static inline int gup_huge_pmd(pmd_t *pmdp, pmd_t pmd, unsigned long addr,
  		unsigned long end, int write, struct page **pages, int *nr)
  {
++<<<<<<< HEAD
 +	unsigned long mask, result;
 +	struct page *head, *page, *tail;
++=======
+ 	struct page *head, *page;
+ 	unsigned long mask;
++>>>>>>> ba385c0594e7 (s390/mm: fix write access check in gup_huge_pmd())
  	int refs;
  
- 	result = write ? 0 : _SEGMENT_ENTRY_PROTECT;
- 	mask = result | _SEGMENT_ENTRY_INVALID;
- 	if ((pmd_val(pmd) & mask) != result)
+ 	mask = (write ? _SEGMENT_ENTRY_PROTECT : 0) | _SEGMENT_ENTRY_INVALID;
+ 	if ((pmd_val(pmd) & mask) != 0)
  		return 0;
  	VM_BUG_ON(!pfn_valid(pmd_val(pmd) >> PAGE_SHIFT));
  
* Unmerged path arch/s390/mm/gup.c
