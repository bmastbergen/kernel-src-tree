sysfs/cpu: Add vulnerability folder

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Thomas Gleixner <tglx@linutronix.de>
commit 87590ce6e373d1a5401f6539f0c59ef92dd924a9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/87590ce6.failed

As the meltdown/spectre problem affects several CPU architectures, it makes
sense to have common way to express whether a system is affected by a
particular vulnerability or not. If affected the way to express the
mitigation should be common as well.

Create /sys/devices/system/cpu/vulnerabilities folder and files for
meltdown, spectre_v1 and spectre_v2.

Allow architectures to override the show function.

	Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: Dave Hansen <dave.hansen@intel.com>
	Cc: Linus Torvalds <torvalds@linuxfoundation.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: David Woodhouse <dwmw@amazon.co.uk>
Link: https://lkml.kernel.org/r/20180107214913.096657732@linutronix.de

(cherry picked from commit 87590ce6e373d1a5401f6539f0c59ef92dd924a9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/ABI/testing/sysfs-devices-system-cpu
#	drivers/base/Kconfig
#	include/linux/cpu.h
diff --cc Documentation/ABI/testing/sysfs-devices-system-cpu
index 4a639ed0987f,bd3a88e16d8b..000000000000
--- a/Documentation/ABI/testing/sysfs-devices-system-cpu
+++ b/Documentation/ABI/testing/sysfs-devices-system-cpu
@@@ -269,3 -356,36 +269,39 @@@ Description:	POWERNV CPUFreq driver's f
  		'policyX/throttle_stats' directory and all the attributes are same as
  		the /sys/devices/system/cpu/cpuX/cpufreq/throttle_stats directory and
  		attributes which give the frequency throttle information of the chip.
++<<<<<<< HEAD
++=======
+ 
+ What:		/sys/devices/system/cpu/cpuX/regs/
+ 		/sys/devices/system/cpu/cpuX/regs/identification/
+ 		/sys/devices/system/cpu/cpuX/regs/identification/midr_el1
+ 		/sys/devices/system/cpu/cpuX/regs/identification/revidr_el1
+ Date:		June 2016
+ Contact:	Linux ARM Kernel Mailing list <linux-arm-kernel@lists.infradead.org>
+ Description:	AArch64 CPU registers
+ 		'identification' directory exposes the CPU ID registers for
+ 		 identifying model and revision of the CPU.
+ 
+ What:		/sys/devices/system/cpu/cpu#/cpu_capacity
+ Date:		December 2016
+ Contact:	Linux kernel mailing list <linux-kernel@vger.kernel.org>
+ Description:	information about CPUs heterogeneity.
+ 
+ 		cpu_capacity: capacity of cpu#.
+ 
+ What:		/sys/devices/system/cpu/vulnerabilities
+ 		/sys/devices/system/cpu/vulnerabilities/meltdown
+ 		/sys/devices/system/cpu/vulnerabilities/spectre_v1
+ 		/sys/devices/system/cpu/vulnerabilities/spectre_v2
+ Date:		Januar 2018
+ Contact:	Linux kernel mailing list <linux-kernel@vger.kernel.org>
+ Description:	Information about CPU vulnerabilities
+ 
+ 		The files are named after the code names of CPU
+ 		vulnerabilities. The output of those files reflects the
+ 		state of the CPUs in the system. Possible output values:
+ 
+ 		"Not affected"	  CPU is not affected by the vulnerability
+ 		"Vulnerable"	  CPU is affected and no mitigation in effect
+ 		"Mitigation: $M"  CPU is affetcted and mitigation $M is in effect
++>>>>>>> 87590ce6e373 (sysfs/cpu: Add vulnerability folder)
diff --cc drivers/base/Kconfig
index 7cb8b4a6a1cd,37a71fd9043f..000000000000
--- a/drivers/base/Kconfig
+++ b/drivers/base/Kconfig
@@@ -206,8 -232,15 +206,17 @@@ config GENERIC_CPU_DEVICE
  	bool
  	default n
  
++<<<<<<< HEAD
++=======
+ config GENERIC_CPU_AUTOPROBE
+ 	bool
+ 
+ config GENERIC_CPU_VULNERABILITIES
+ 	bool
+ 
++>>>>>>> 87590ce6e373 (sysfs/cpu: Add vulnerability folder)
  config SOC_BUS
  	bool
 -	select GLOB
  
  source "drivers/base/regmap/Kconfig"
  
diff --cc include/linux/cpu.h
index e2bdd999bd70,c816e6f2730c..000000000000
--- a/include/linux/cpu.h
+++ b/include/linux/cpu.h
@@@ -36,6 -47,17 +36,20 @@@ extern void cpu_remove_dev_attr(struct 
  extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
  extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);
  
++<<<<<<< HEAD
++=======
+ extern ssize_t cpu_show_meltdown(struct device *dev,
+ 				 struct device_attribute *attr, char *buf);
+ extern ssize_t cpu_show_spectre_v1(struct device *dev,
+ 				   struct device_attribute *attr, char *buf);
+ extern ssize_t cpu_show_spectre_v2(struct device *dev,
+ 				   struct device_attribute *attr, char *buf);
+ 
+ extern __printf(4, 5)
+ struct device *cpu_device_create(struct device *parent, void *drvdata,
+ 				 const struct attribute_group **groups,
+ 				 const char *fmt, ...);
++>>>>>>> 87590ce6e373 (sysfs/cpu: Add vulnerability folder)
  #ifdef CONFIG_HOTPLUG_CPU
  extern void unregister_cpu(struct cpu *cpu);
  extern ssize_t arch_cpu_probe(const char *, size_t);
* Unmerged path Documentation/ABI/testing/sysfs-devices-system-cpu
* Unmerged path drivers/base/Kconfig
diff --git a/drivers/base/cpu.c b/drivers/base/cpu.c
index dfc78709efb5..7273f1a79f33 100644
--- a/drivers/base/cpu.c
+++ b/drivers/base/cpu.c
@@ -394,10 +394,58 @@ static void __init cpu_dev_register_generic(void)
 #endif
 }
 
+#ifdef CONFIG_GENERIC_CPU_VULNERABILITIES
+
+ssize_t __weak cpu_show_meltdown(struct device *dev,
+				 struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "Not affected\n");
+}
+
+ssize_t __weak cpu_show_spectre_v1(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "Not affected\n");
+}
+
+ssize_t __weak cpu_show_spectre_v2(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "Not affected\n");
+}
+
+static DEVICE_ATTR(meltdown, 0444, cpu_show_meltdown, NULL);
+static DEVICE_ATTR(spectre_v1, 0444, cpu_show_spectre_v1, NULL);
+static DEVICE_ATTR(spectre_v2, 0444, cpu_show_spectre_v2, NULL);
+
+static struct attribute *cpu_root_vulnerabilities_attrs[] = {
+	&dev_attr_meltdown.attr,
+	&dev_attr_spectre_v1.attr,
+	&dev_attr_spectre_v2.attr,
+	NULL
+};
+
+static const struct attribute_group cpu_root_vulnerabilities_group = {
+	.name  = "vulnerabilities",
+	.attrs = cpu_root_vulnerabilities_attrs,
+};
+
+static void __init cpu_register_vulnerabilities(void)
+{
+	if (sysfs_create_group(&cpu_subsys.dev_root->kobj,
+			       &cpu_root_vulnerabilities_group))
+		pr_err("Unable to register CPU vulnerabilities\n");
+}
+
+#else
+static inline void cpu_register_vulnerabilities(void) { }
+#endif
+
 void __init cpu_dev_init(void)
 {
 	if (subsys_system_register(&cpu_subsys, cpu_root_attr_groups))
 		panic("Failed to register CPU subsystem");
 
 	cpu_dev_register_generic();
+	cpu_register_vulnerabilities();
 }
* Unmerged path include/linux/cpu.h
