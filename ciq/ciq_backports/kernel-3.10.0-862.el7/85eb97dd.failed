nfp: add extended error messages

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 85eb97dd2f073e72784505e51b048171ab9bda61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/85eb97dd.failed

Allow NSP to set option code even when error is reported.  This provides
a way for NSP to give user more precise information about why command
failed.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 85eb97dd2f073e72784505e51b048171ab9bda61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/netronome/nfp/nfpcore/nfp_nsp.c
diff --cc drivers/net/ethernet/netronome/nfp/nfpcore/nfp_nsp.c
index 17822ae4a17f,96bb5f6bd87b..000000000000
--- a/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_nsp.c
+++ b/drivers/net/ethernet/netronome/nfp/nfpcore/nfp_nsp.c
@@@ -103,8 -111,63 +110,61 @@@ struct nfp_nsp 
  		u16 major;
  		u16 minor;
  	} ver;
 -
 -	/* Eth table config state */
 -	bool modified;
 -	unsigned int idx;
 -	void *entries;
  };
  
++<<<<<<< HEAD
++=======
+ struct nfp_cpp *nfp_nsp_cpp(struct nfp_nsp *state)
+ {
+ 	return state->cpp;
+ }
+ 
+ bool nfp_nsp_config_modified(struct nfp_nsp *state)
+ {
+ 	return state->modified;
+ }
+ 
+ void nfp_nsp_config_set_modified(struct nfp_nsp *state, bool modified)
+ {
+ 	state->modified = modified;
+ }
+ 
+ void *nfp_nsp_config_entries(struct nfp_nsp *state)
+ {
+ 	return state->entries;
+ }
+ 
+ unsigned int nfp_nsp_config_idx(struct nfp_nsp *state)
+ {
+ 	return state->idx;
+ }
+ 
+ void
+ nfp_nsp_config_set_state(struct nfp_nsp *state, void *entries, unsigned int idx)
+ {
+ 	state->entries = entries;
+ 	state->idx = idx;
+ }
+ 
+ void nfp_nsp_config_clear_state(struct nfp_nsp *state)
+ {
+ 	state->entries = NULL;
+ 	state->idx = 0;
+ }
+ 
+ static void nfp_nsp_print_extended_error(struct nfp_nsp *state, u32 ret_val)
+ {
+ 	int i;
+ 
+ 	if (!ret_val)
+ 		return;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(nsp_errors); i++)
+ 		if (ret_val == nsp_errors[i].code)
+ 			nfp_err(state->cpp, "err msg: %s\n", nsp_errors[i].msg);
+ }
+ 
++>>>>>>> 85eb97dd2f07 (nfp: add extended error messages)
  static int nfp_nsp_check(struct nfp_nsp *state)
  {
  	struct nfp_cpp *cpp = state->cpp;
* Unmerged path drivers/net/ethernet/netronome/nfp/nfpcore/nfp_nsp.c
