ovl: extract helper to get temp file in copy up

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
commit-author Miklos Szeredi <mszeredi@redhat.com>
commit 7d90b853f932874f0b348858fddbd41f022179ee
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/7d90b853.failed

	Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
(cherry picked from commit 7d90b853f932874f0b348858fddbd41f022179ee)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/overlayfs/copy_up.c
diff --cc fs/overlayfs/copy_up.c
index 6e96b99a973d,a7941ab80c9b..000000000000
--- a/fs/overlayfs/copy_up.c
+++ b/fs/overlayfs/copy_up.c
@@@ -264,29 -233,133 +264,150 @@@ int ovl_set_attr(struct dentry *upperde
  	return err;
  }
  
++<<<<<<< HEAD
 +static int ovl_copy_up_locked(struct dentry *workdir, struct dentry *upperdir,
 +			      struct dentry *dentry, struct path *lowerpath,
 +			      struct kstat *stat, const char *link)
 +{
 +	struct inode *wdir = workdir->d_inode;
 +	struct inode *udir = upperdir->d_inode;
 +	struct dentry *newdentry = NULL;
 +	struct dentry *upper = NULL;
 +	umode_t mode = stat->mode;
++=======
+ struct ovl_fh *ovl_encode_fh(struct dentry *lower, bool is_upper)
+ {
+ 	struct ovl_fh *fh;
+ 	int fh_type, fh_len, dwords;
+ 	void *buf;
+ 	int buflen = MAX_HANDLE_SZ;
+ 	uuid_t *uuid = &lower->d_sb->s_uuid;
+ 
+ 	buf = kmalloc(buflen, GFP_TEMPORARY);
+ 	if (!buf)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	/*
+ 	 * We encode a non-connectable file handle for non-dir, because we
+ 	 * only need to find the lower inode number and we don't want to pay
+ 	 * the price or reconnecting the dentry.
+ 	 */
+ 	dwords = buflen >> 2;
+ 	fh_type = exportfs_encode_fh(lower, buf, &dwords, 0);
+ 	buflen = (dwords << 2);
+ 
+ 	fh = ERR_PTR(-EIO);
+ 	if (WARN_ON(fh_type < 0) ||
+ 	    WARN_ON(buflen > MAX_HANDLE_SZ) ||
+ 	    WARN_ON(fh_type == FILEID_INVALID))
+ 		goto out;
+ 
+ 	BUILD_BUG_ON(MAX_HANDLE_SZ + offsetof(struct ovl_fh, fid) > 255);
+ 	fh_len = offsetof(struct ovl_fh, fid) + buflen;
+ 	fh = kmalloc(fh_len, GFP_KERNEL);
+ 	if (!fh) {
+ 		fh = ERR_PTR(-ENOMEM);
+ 		goto out;
+ 	}
+ 
+ 	fh->version = OVL_FH_VERSION;
+ 	fh->magic = OVL_FH_MAGIC;
+ 	fh->type = fh_type;
+ 	fh->flags = OVL_FH_FLAG_CPU_ENDIAN;
+ 	/*
+ 	 * When we will want to decode an overlay dentry from this handle
+ 	 * and all layers are on the same fs, if we get a disconncted real
+ 	 * dentry when we decode fid, the only way to tell if we should assign
+ 	 * it to upperdentry or to lowerstack is by checking this flag.
+ 	 */
+ 	if (is_upper)
+ 		fh->flags |= OVL_FH_FLAG_PATH_UPPER;
+ 	fh->len = fh_len;
+ 	fh->uuid = *uuid;
+ 	memcpy(fh->fid, buf, buflen);
+ 
+ out:
+ 	kfree(buf);
+ 	return fh;
+ }
+ 
+ static int ovl_set_origin(struct dentry *dentry, struct dentry *lower,
+ 			  struct dentry *upper)
+ {
+ 	const struct ovl_fh *fh = NULL;
  	int err;
+ 
+ 	/*
+ 	 * When lower layer doesn't support export operations store a 'null' fh,
+ 	 * so we can use the overlay.origin xattr to distignuish between a copy
+ 	 * up and a pure upper inode.
+ 	 */
+ 	if (ovl_can_decode_fh(lower->d_sb)) {
+ 		fh = ovl_encode_fh(lower, false);
+ 		if (IS_ERR(fh))
+ 			return PTR_ERR(fh);
+ 	}
+ 
+ 	/*
+ 	 * Do not fail when upper doesn't support xattrs.
+ 	 */
+ 	err = ovl_check_setxattr(dentry, upper, OVL_XATTR_ORIGIN, fh,
+ 				 fh ? fh->len : 0, 0);
+ 	kfree(fh);
+ 
+ 	return err;
+ }
+ 
+ static int ovl_install_temp(struct dentry *workdir, struct dentry *upperdir,
+ 			    struct dentry *dentry,
+ 			    struct dentry *temp, struct kstat *pstat,
+ 			    bool tmpfile, struct dentry **newdentry)
+ {
+ 	int err;
+ 	struct dentry *upper;
+ 	struct inode *udir = d_inode(upperdir);
+ 
+ 	upper = lookup_one_len(dentry->d_name.name, upperdir,
+ 			       dentry->d_name.len);
+ 	if (IS_ERR(upper))
+ 		return PTR_ERR(upper);
+ 
+ 	if (tmpfile)
+ 		err = ovl_do_link(temp, udir, upper, true);
+ 	else
+ 		err = ovl_do_rename(d_inode(workdir), temp, udir, upper, 0);
+ 
+ 	/* Restore timestamps on parent (best effort) */
+ 	if (!err) {
+ 		ovl_set_timestamps(upperdir, pstat);
+ 		*newdentry = dget(tmpfile ? upper : temp);
+ 	}
+ 	dput(upper);
+ 
+ 	return err;
+ }
+ 
+ static int ovl_get_tmpfile(struct dentry *workdir, struct dentry *upperdir,
+ 			   struct dentry *dentry,
+ 			   struct kstat *stat, const char *link, bool tmpfile,
+ 			   struct dentry **tempp)
+ {
++>>>>>>> 7d90b853f932 (ovl: extract helper to get temp file in copy up)
+ 	int err;
+ 	struct dentry *temp;
  	const struct cred *old_creds = NULL;
  	struct cred *new_creds = NULL;
 -	struct cattr cattr = {
 -		/* Can't properly set mode on creation because of the umask */
 -		.mode = stat->mode & S_IFMT,
 -		.rdev = stat->rdev,
 -		.link = link
 -	};
 +
 +	newdentry = ovl_lookup_temp(workdir, dentry);
 +	err = PTR_ERR(newdentry);
 +	if (IS_ERR(newdentry))
 +		goto out;
 +
 +	upper = lookup_one_len(dentry->d_name.name, upperdir,
 +			       dentry->d_name.len);
 +	err = PTR_ERR(upper);
 +	if (IS_ERR(upper))
 +		goto out1;
  
  	err = security_inode_copy_up(dentry, &new_creds);
  	if (err < 0)
@@@ -295,18 -368,52 +416,60 @@@
  	if (new_creds)
  		old_creds = override_creds(new_creds);
  
++<<<<<<< HEAD
 +	/* Can't properly set mode on creation because of the umask */
 +	stat->mode &= S_IFMT;
 +	err = ovl_create_real(wdir, newdentry, stat, link, NULL, true);
 +	stat->mode = mode;
 +
++=======
+ 	if (tmpfile) {
+ 		temp = ovl_do_tmpfile(upperdir, stat->mode);
+ 		if (IS_ERR(temp))
+ 			goto temp_err;
+ 	} else {
+ 		temp = ovl_lookup_temp(workdir);
+ 		if (IS_ERR(temp))
+ 			goto temp_err;
+ 
+ 		err = ovl_create_real(d_inode(workdir), temp, &cattr,
+ 				      NULL, true);
+ 		if (err) {
+ 			dput(temp);
+ 			goto out;
+ 		}
+ 	}
+ 	err = 0;
+ 	*tempp = temp;
+ out:
++>>>>>>> 7d90b853f932 (ovl: extract helper to get temp file in copy up)
  	if (new_creds) {
  		revert_creds(old_creds);
  		put_cred(new_creds);
  	}
  
+ 	return err;
+ 
+ temp_err:
+ 	err = PTR_ERR(temp);
+ 	goto out;
+ }
+ 
+ static int ovl_copy_up_locked(struct dentry *workdir, struct dentry *upperdir,
+ 			      struct dentry *dentry, struct path *lowerpath,
+ 			      struct kstat *stat, const char *link,
+ 			      struct kstat *pstat, bool tmpfile)
+ {
+ 	struct inode *wdir = workdir->d_inode;
+ 	struct inode *udir = upperdir->d_inode;
+ 	struct dentry *newdentry = NULL;
+ 	struct dentry *temp = NULL;
+ 	int err;
+ 
+ 	err = ovl_get_tmpfile(workdir, upperdir, dentry, stat, link, tmpfile,
+ 			      &temp);
  	if (err)
 -		goto out;
 +		goto out2;
  
  	if (S_ISREG(stat->mode)) {
  		struct path upperpath;
* Unmerged path fs/overlayfs/copy_up.c
