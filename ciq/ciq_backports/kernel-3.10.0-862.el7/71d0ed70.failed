net/act_pedit: Support using offset relative to the conventional network headers

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-862.el7
Rebuild_CHGLOG: - [net] act_pedit: Support using offset relative to the conventional network headers (Ivan Vecera) [1445420]
Rebuild_FUZZ: 97.44%
commit-author Amir Vadai <amir@vadai.me>
commit 71d0ed7079dffbc5cd0941d77d9b84e04109c9bb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-862.el7/71d0ed70.failed

Extend pedit to enable the user setting offset relative to network
headers. This change would enable to work with more complex header
schemes (vs the simple IPv4 case) where setting a fixed offset relative
to the network header is not enough.

After this patch, the action has information about the exact header type
and field inside this header. This information could be used later on
for hardware offloading of pedit.

Backward compatibility was being kept:
1. Old kernel <-> new userspace
2. New kernel <-> old userspace
3. add rule using new userspace <-> dump using old userspace
4. add rule using old userspace <-> dump using new userspace

When using the extended api, new netlink attributes are being used. This
way, operation will fail in (1) and (3) - and no malformed rule be added
or dumped. Of course, new user space that doesn't need the new
functionality can use the old netlink attributes and operation will
succeed.
Since action can support both api's, (2) should work, and it is easy to
write the new user space to have (4) work.

The action is having a strict check that only header types and commands
it can handle are accepted. This way future additions will be much
easier.

Usage example:
$ tc filter add dev enp0s9 protocol ip parent ffff: \
  flower \
    ip_proto tcp \
    dst_port 80 \
  action pedit munge tcp dport set 8080 pipe \
  action mirred egress redirect dev veth0

Will forward tcp port whose original dest port is 80, while modifying
the destination port to 8080.

	Signed-off-by: Amir Vadai <amir@vadai.me>
	Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 71d0ed7079dffbc5cd0941d77d9b84e04109c9bb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/sched/act_pedit.c
diff --cc net/sched/act_pedit.c
index 0ad8b8fe7165,fdd012bd3602..000000000000
--- a/net/sched/act_pedit.c
+++ b/net/sched/act_pedit.c
@@@ -25,15 -26,112 +26,108 @@@
  
  #define PEDIT_TAB_MASK	15
  
 -static unsigned int pedit_net_id;
 -static struct tc_action_ops act_pedit_ops;
 -
  static const struct nla_policy pedit_policy[TCA_PEDIT_MAX + 1] = {
  	[TCA_PEDIT_PARMS]	= { .len = sizeof(struct tc_pedit) },
+ 	[TCA_PEDIT_KEYS_EX]   = { .type = NLA_NESTED },
  };
  
+ static const struct nla_policy pedit_key_ex_policy[TCA_PEDIT_KEY_EX_MAX + 1] = {
+ 	[TCA_PEDIT_KEY_EX_HTYPE]  = { .type = NLA_U16 },
+ };
+ 
+ static struct tcf_pedit_key_ex *tcf_pedit_keys_ex_parse(struct nlattr *nla,
+ 							u8 n)
+ {
+ 	struct tcf_pedit_key_ex *keys_ex;
+ 	struct tcf_pedit_key_ex *k;
+ 	const struct nlattr *ka;
+ 	int err = -EINVAL;
+ 	int rem;
+ 
+ 	if (!nla || !n)
+ 		return NULL;
+ 
+ 	keys_ex = kcalloc(n, sizeof(*k), GFP_KERNEL);
+ 	if (!keys_ex)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	k = keys_ex;
+ 
+ 	nla_for_each_nested(ka, nla, rem) {
+ 		struct nlattr *tb[TCA_PEDIT_KEY_EX_MAX + 1];
+ 
+ 		if (!n) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 		n--;
+ 
+ 		if (nla_type(ka) != TCA_PEDIT_KEY_EX) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		err = nla_parse_nested(tb, TCA_PEDIT_KEY_EX_MAX, ka,
+ 				       pedit_key_ex_policy);
+ 		if (err)
+ 			goto err_out;
+ 
+ 		if (!tb[TCA_PEDIT_KEY_EX_HTYPE]) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		k->htype = nla_get_u16(tb[TCA_PEDIT_KEY_EX_HTYPE]);
+ 
+ 		if (k->htype > TCA_PEDIT_HDR_TYPE_MAX) {
+ 			err = -EINVAL;
+ 			goto err_out;
+ 		}
+ 
+ 		k++;
+ 	}
+ 
+ 	if (n)
+ 		goto err_out;
+ 
+ 	return keys_ex;
+ 
+ err_out:
+ 	kfree(keys_ex);
+ 	return ERR_PTR(err);
+ }
+ 
+ static int tcf_pedit_key_ex_dump(struct sk_buff *skb,
+ 				 struct tcf_pedit_key_ex *keys_ex, int n)
+ {
+ 	struct nlattr *keys_start = nla_nest_start(skb, TCA_PEDIT_KEYS_EX);
+ 
+ 	for (; n > 0; n--) {
+ 		struct nlattr *key_start;
+ 
+ 		key_start = nla_nest_start(skb, TCA_PEDIT_KEY_EX);
+ 
+ 		if (nla_put_u16(skb, TCA_PEDIT_KEY_EX_HTYPE, keys_ex->htype)) {
+ 			nlmsg_trim(skb, keys_start);
+ 			return -EINVAL;
+ 		}
+ 
+ 		nla_nest_end(skb, key_start);
+ 
+ 		keys_ex++;
+ 	}
+ 
+ 	nla_nest_end(skb, keys_start);
+ 
+ 	return 0;
+ }
+ 
  static int tcf_pedit_init(struct net *net, struct nlattr *nla,
 -			  struct nlattr *est, struct tc_action **a,
 +			  struct nlattr *est, struct tc_action *a,
  			  int ovr, int bind)
  {
 -	struct tc_action_net *tn = net_generic(net, pedit_net_id);
  	struct nlattr *tb[TCA_PEDIT_MAX + 1];
+ 	struct nlattr *pattr;
  	struct tc_pedit *parm;
  	int ret = 0, err;
  	struct tcf_pedit *p;
@@@ -47,38 -146,49 +142,57 @@@
  	if (err < 0)
  		return err;
  
- 	if (tb[TCA_PEDIT_PARMS] == NULL)
+ 	pattr = tb[TCA_PEDIT_PARMS];
+ 	if (!pattr)
+ 		pattr = tb[TCA_PEDIT_PARMS_EX];
+ 	if (!pattr)
  		return -EINVAL;
- 	parm = nla_data(tb[TCA_PEDIT_PARMS]);
+ 
+ 	parm = nla_data(pattr);
  	ksize = parm->nkeys * sizeof(struct tc_pedit_key);
- 	if (nla_len(tb[TCA_PEDIT_PARMS]) < sizeof(*parm) + ksize)
+ 	if (nla_len(pattr) < sizeof(*parm) + ksize)
  		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (!tcf_hash_check(parm->index, a, bind)) {
++=======
+ 	keys_ex = tcf_pedit_keys_ex_parse(tb[TCA_PEDIT_KEYS_EX], parm->nkeys);
+ 	if (IS_ERR(keys_ex))
+ 		return PTR_ERR(keys_ex);
+ 
+ 	if (!tcf_hash_check(tn, parm->index, a, bind)) {
++>>>>>>> 71d0ed7079df (net/act_pedit: Support using offset relative to the conventional network headers)
  		if (!parm->nkeys)
  			return -EINVAL;
 -		ret = tcf_hash_create(tn, parm->index, est, a,
 -				      &act_pedit_ops, bind, false);
 +		ret = tcf_hash_create(parm->index, est, a, sizeof(*p),
 +				      bind, false);
  		if (ret)
  			return ret;
 -		p = to_pedit(*a);
 +		p = to_pedit(a);
  		keys = kmalloc(ksize, GFP_KERNEL);
  		if (keys == NULL) {
++<<<<<<< HEAD
 +			tcf_hash_cleanup(a, est);
++=======
+ 			tcf_hash_cleanup(*a, est);
+ 			kfree(keys_ex);
++>>>>>>> 71d0ed7079df (net/act_pedit: Support using offset relative to the conventional network headers)
  			return -ENOMEM;
  		}
  		ret = ACT_P_CREATED;
  	} else {
  		if (bind)
  			return 0;
 -		tcf_hash_release(*a, bind);
 +		tcf_hash_release(a, bind);
  		if (!ovr)
  			return -EEXIST;
 -		p = to_pedit(*a);
 +		p = to_pedit(a);
  		if (p->tcfp_nkeys && p->tcfp_nkeys != parm->nkeys) {
  			keys = kmalloc(ksize, GFP_KERNEL);
- 			if (keys == NULL)
+ 			if (!keys) {
+ 				kfree(keys_ex);
  				return -ENOMEM;
+ 			}
  		}
  	}
  
@@@ -91,17 -201,22 +205,22 @@@
  		p->tcfp_nkeys = parm->nkeys;
  	}
  	memcpy(p->tcfp_keys, parm->keys, ksize);
+ 
+ 	kfree(p->tcfp_keys_ex);
+ 	p->tcfp_keys_ex = keys_ex;
+ 
  	spin_unlock_bh(&p->tcf_lock);
  	if (ret == ACT_P_CREATED)
 -		tcf_hash_insert(tn, *a);
 +		tcf_hash_insert(a);
  	return ret;
  }
  
  static void tcf_pedit_cleanup(struct tc_action *a, int bind)
  {
 -	struct tcf_pedit *p = to_pedit(a);
 +	struct tcf_pedit *p = a->priv;
  	struct tc_pedit_key *keys = p->tcfp_keys;
  	kfree(keys);
+ 	kfree(p->tcfp_keys_ex);
  }
  
  static bool offset_valid(struct sk_buff *skb, int offset)
@@@ -118,9 -266,8 +270,8 @@@ static int pedit_skb_hdr_offset(struct 
  static int tcf_pedit(struct sk_buff *skb, const struct tc_action *a,
  		     struct tcf_result *res)
  {
 -	struct tcf_pedit *p = to_pedit(a);
 +	struct tcf_pedit *p = a->priv;
  	int i;
- 	unsigned int off;
  
  	if (skb_unclone(skb, GFP_ATOMIC))
  		return p->tcf_action;
diff --git a/include/net/tc_act/tc_pedit.h b/include/net/tc_act/tc_pedit.h
index e7a3d4c49079..b40b50738e5b 100644
--- a/include/net/tc_act/tc_pedit.h
+++ b/include/net/tc_act/tc_pedit.h
@@ -4,11 +4,16 @@
 #include <net/act_api.h>
 #include <linux/tc_act/tc_pedit.h>
 
+struct tcf_pedit_key_ex {
+	enum pedit_header_type htype;
+};
+
 struct tcf_pedit {
 	struct tcf_common	common;
 	unsigned char		tcfp_nkeys;
 	unsigned char		tcfp_flags;
 	struct tc_pedit_key	*tcfp_keys;
+	struct tcf_pedit_key_ex	*tcfp_keys_ex;
 };
 #define to_pedit(a) \
 	container_of(a->priv, struct tcf_pedit, common)
diff --git a/include/uapi/linux/tc_act/tc_pedit.h b/include/uapi/linux/tc_act/tc_pedit.h
index 6389959a5157..22f19eeda997 100644
--- a/include/uapi/linux/tc_act/tc_pedit.h
+++ b/include/uapi/linux/tc_act/tc_pedit.h
@@ -11,10 +11,33 @@ enum {
 	TCA_PEDIT_TM,
 	TCA_PEDIT_PARMS,
 	TCA_PEDIT_PAD,
+	TCA_PEDIT_PARMS_EX,
+	TCA_PEDIT_KEYS_EX,
+	TCA_PEDIT_KEY_EX,
 	__TCA_PEDIT_MAX
 };
 #define TCA_PEDIT_MAX (__TCA_PEDIT_MAX - 1)
                                                                                 
+enum {
+	TCA_PEDIT_KEY_EX_HTYPE = 1,
+	__TCA_PEDIT_KEY_EX_MAX
+};
+#define TCA_PEDIT_KEY_EX_MAX (__TCA_PEDIT_KEY_EX_MAX - 1)
+
+ /* TCA_PEDIT_KEY_EX_HDR_TYPE_NETWROK is a special case for legacy users. It
+  * means no specific header type - offset is relative to the network layer
+  */
+enum pedit_header_type {
+	TCA_PEDIT_KEY_EX_HDR_TYPE_NETWORK = 0,
+	TCA_PEDIT_KEY_EX_HDR_TYPE_ETH = 1,
+	TCA_PEDIT_KEY_EX_HDR_TYPE_IP4 = 2,
+	TCA_PEDIT_KEY_EX_HDR_TYPE_IP6 = 3,
+	TCA_PEDIT_KEY_EX_HDR_TYPE_TCP = 4,
+	TCA_PEDIT_KEY_EX_HDR_TYPE_UDP = 5,
+	__PEDIT_HDR_TYPE_MAX,
+};
+#define TCA_PEDIT_HDR_TYPE_MAX (__PEDIT_HDR_TYPE_MAX - 1)
+
 struct tc_pedit_key {
 	__u32           mask;  /* AND */
 	__u32           val;   /*XOR */
* Unmerged path net/sched/act_pedit.c
