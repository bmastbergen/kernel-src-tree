bnxt: make sure xmit_more + errors does not miss doorbells

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.102.1.el7
commit-author Jakub Kicinski <kuba@kernel.org>
commit e8d8c5d80f5e9d4586c68061b62c642752289095
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.102.1.el7/e8d8c5d8.failed

skbs are freed on error and not put on the ring. We may, however,
be in a situation where we're freeing the last skb of a batch,
and there is a doorbell ring pending because of xmit_more() being
true earlier. Make sure we ring the door bell in such situations.

Since errors are rare don't pay attention to xmit_more() and just
always flush the pending frames.

The busy case should be safe to be left alone because it can
only happen if start_xmit races with completions and they
both enable the queue. In that case the kick can't be pending.

Noticed while reading the code.

Fixes: 4d172f21cefe ("bnxt_en: Implement xmit_more.")
	Reviewed-by: Michael Chan <michael.chan@broadcom.com>
	Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
	Signed-off-by: Jakub Kicinski <kuba@kernel.org>
(cherry picked from commit e8d8c5d80f5e9d4586c68061b62c642752289095)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --cc drivers/net/ethernet/broadcom/bnxt/bnxt.c
index 328eef7b7ef2,389016ea65cf..000000000000
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.c
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.c
@@@ -69,9 -72,8 +69,14 @@@
  #include "bnxt_debugfs.h"
  
  #define BNXT_TX_TIMEOUT		(5 * HZ)
++<<<<<<< HEAD
 +
 +static const char version[] =
 +	"Broadcom NetXtreme-C/E driver " DRV_MODULE_NAME " v" DRV_MODULE_VERSION "\n";
++=======
+ #define BNXT_DEF_MSG_ENABLE	(NETIF_MSG_DRV | NETIF_MSG_HW | \
+ 				 NETIF_MSG_TX_ERR)
++>>>>>>> e8d8c5d80f5e (bnxt: make sure xmit_more + errors does not miss doorbells)
  
  MODULE_LICENSE("GPL");
  MODULE_DESCRIPTION("Broadcom BCM573xx network driver");
@@@ -588,16 -644,16 +599,28 @@@ normal_tx
  	prod = NEXT_TX(prod);
  	txr->tx_prod = prod;
  
++<<<<<<< HEAD
 +	if (!skb->xmit_more || netif_xmit_stopped(txq))
 +		bnxt_db_write(bp, &txr->tx_db, prod);
++=======
+ 	if (!netdev_xmit_more() || netif_xmit_stopped(txq))
+ 		bnxt_txr_db_kick(bp, txr, prod);
+ 	else
+ 		txr->kick_pending = 1;
++>>>>>>> e8d8c5d80f5e (bnxt: make sure xmit_more + errors does not miss doorbells)
  
  tx_done:
  
 +	mmiowb();
 +
  	if (unlikely(bnxt_tx_avail(bp, txr) <= MAX_SKB_FRAGS + 1)) {
++<<<<<<< HEAD
 +		if (skb->xmit_more && !tx_buf->is_push)
 +			bnxt_db_write(bp, &txr->tx_db, prod);
++=======
+ 		if (netdev_xmit_more() && !tx_buf->is_push)
+ 			bnxt_txr_db_kick(bp, txr, prod);
++>>>>>>> e8d8c5d80f5e (bnxt: make sure xmit_more + errors does not miss doorbells)
  
  		bnxt_txr_netif_try_stop_queue(bp, txr, txq);
  	}
* Unmerged path drivers/net/ethernet/broadcom/bnxt/bnxt.c
diff --git a/drivers/net/ethernet/broadcom/bnxt/bnxt.h b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
index 9612f7b487e2..fa5e467d2bb3 100644
--- a/drivers/net/ethernet/broadcom/bnxt/bnxt.h
+++ b/drivers/net/ethernet/broadcom/bnxt/bnxt.h
@@ -743,6 +743,7 @@ struct bnxt_tx_ring_info {
 	u16			tx_prod;
 	u16			tx_cons;
 	u16			txq_index;
+	u8			kick_pending;
 	struct bnxt_db_info	tx_db;
 
 	struct tx_bd		*tx_desc_ring[MAX_TX_PAGES];
