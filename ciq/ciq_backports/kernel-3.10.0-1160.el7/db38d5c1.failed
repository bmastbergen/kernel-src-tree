kernel: add panic_on_taint

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Rafael Aquini <aquini@redhat.com>
commit db38d5c106dfdd7cb7207c83267d82fdf4950b61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/db38d5c1.failed

Analogously to the introduction of panic_on_warn, this patch introduces
a kernel option named panic_on_taint in order to provide a simple and
generic way to stop execution and catch a coredump when the kernel gets
tainted by any given flag.

This is useful for debugging sessions as it avoids having to rebuild the
kernel to explicitly add calls to panic() into the code sites that
introduce the taint flags of interest.

For instance, if one is interested in proceeding with a post-mortem
analysis at the point a given code path is hitting a bad page (i.e.
unaccount_page_cache_page(), or slab_bug()), a coredump can be collected
by rebooting the kernel with 'panic_on_taint=0x20' amended to the
command line.

Another, perhaps less frequent, use for this option would be as a means
for assuring a security policy case where only a subset of taints, or no
single taint (in paranoid mode), is allowed for the running system.  The
optional switch 'nousertaint' is handy in this particular scenario, as
it will avoid userspace induced crashes by writes to sysctl interface
/proc/sys/kernel/tainted causing false positive hits for such policies.

[akpm@linux-foundation.org: tweak kernel-parameters.txt wording]

	Suggested-by: Qian Cai <cai@lca.pw>
	Signed-off-by: Rafael Aquini <aquini@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Reviewed-by: Luis Chamberlain <mcgrof@kernel.org>
	Cc: Dave Young <dyoung@redhat.com>
	Cc: Baoquan He <bhe@redhat.com>
	Cc: Jonathan Corbet <corbet@lwn.net>
	Cc: Kees Cook <keescook@chromium.org>
	Cc: Randy Dunlap <rdunlap@infradead.org>
	Cc: "Theodore Ts'o" <tytso@mit.edu>
	Cc: Adrian Bunk <bunk@kernel.org>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Laura Abbott <labbott@redhat.com>
	Cc: Jeff Mahoney <jeffm@suse.com>
	Cc: Jiri Kosina <jikos@kernel.org>
	Cc: Takashi Iwai <tiwai@suse.de>
Link: http://lkml.kernel.org/r/20200515175502.146720-1-aquini@redhat.com
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit db38d5c106dfdd7cb7207c83267d82fdf4950b61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/admin-guide/sysctl/kernel.rst
#	Documentation/kernel-parameters.txt
#	include/linux/kernel.h
diff --cc Documentation/kernel-parameters.txt
index 25318ee68938,df9b0fe2ed60..000000000000
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@@ -2659,6 -3438,28 +2659,31 @@@ bytes respectively. Such letter suffixe
  			timeout < 0: reboot immediately
  			Format: <timeout>
  
++<<<<<<< HEAD:Documentation/kernel-parameters.txt
++=======
+ 	panic_print=	Bitmask for printing system info when panic happens.
+ 			User can chose combination of the following bits:
+ 			bit 0: print all tasks info
+ 			bit 1: print system memory info
+ 			bit 2: print timer info
+ 			bit 3: print locks info if CONFIG_LOCKDEP is on
+ 			bit 4: print ftrace buffer
+ 			bit 5: print all printk messages in buffer
+ 
+ 	panic_on_taint=	Bitmask for conditionally calling panic() in add_taint()
+ 			Format: <hex>[,nousertaint]
+ 			Hexadecimal bitmask representing the set of TAINT flags
+ 			that will cause the kernel to panic when add_taint() is
+ 			called with any of the flags in this set.
+ 			The optional switch "nousertaint" can be utilized to
+ 			prevent userspace forced crashes by writing to sysctl
+ 			/proc/sys/kernel/tainted any flagset matching with the
+ 			bitmask set on panic_on_taint.
+ 			See Documentation/admin-guide/tainted-kernels.rst for
+ 			extra details on the taint flags that users can pick
+ 			to compose the bitmask to assign to panic_on_taint.
+ 
++>>>>>>> db38d5c106df (kernel: add panic_on_taint):Documentation/admin-guide/kernel-parameters.txt
  	panic_on_warn	panic() instead of WARN().  Useful to cause kdump
  			on a WARN().
  
diff --cc include/linux/kernel.h
index 51489e7df1c0,f7835db7102e..000000000000
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@@ -519,25 -595,10 +521,32 @@@ extern enum system_states 
  #define TAINT_UNSIGNED_MODULE		13
  #define TAINT_SOFTLOCKUP		14
  #define TAINT_LIVEPATCH			15
++<<<<<<< HEAD
 +#define TAINT_16			16
 +#define TAINT_17			17
 +#define TAINT_18			18
 +#define TAINT_19			19
 +#define TAINT_20			20
 +#define TAINT_21			21
 +#define TAINT_22			22
 +#define TAINT_23			23
 +#define TAINT_24			24
 +#define TAINT_25			25
 +#define TAINT_26			26
 +#define TAINT_27			27
 +/* Reserving bits for vendor specific uses */
 +#define TAINT_HARDWARE_UNSUPPORTED	28
 +#define TAINT_TECH_PREVIEW		29
 +/* Bits 30 - 31 are reserved for Red Hat use only */
 +#define TAINT_RESERVED30		30
 +#define TAINT_RESERVED31		31
 +#define TAINT_FLAGS_COUNT		32
++=======
+ #define TAINT_AUX			16
+ #define TAINT_RANDSTRUCT		17
+ #define TAINT_FLAGS_COUNT		18
+ #define TAINT_FLAGS_MAX			((1UL << TAINT_FLAGS_COUNT) - 1)
++>>>>>>> db38d5c106df (kernel: add panic_on_taint)
  
  struct taint_flag {
  	char c_true;	/* character printed when tainted */
* Unmerged path Documentation/admin-guide/sysctl/kernel.rst
* Unmerged path Documentation/admin-guide/sysctl/kernel.rst
diff --git a/Documentation/kdump/kdump.txt b/Documentation/kdump/kdump.txt
index 967b20764d00..bdc9f3e108e8 100644
--- a/Documentation/kdump/kdump.txt
+++ b/Documentation/kdump/kdump.txt
@@ -504,6 +504,14 @@ To Do
    can be used to capture the dump.
 
 
+Trigger Kdump on add_taint()
+============================
+
+The kernel parameter panic_on_taint facilitates a conditional call to panic()
+from within add_taint() whenever the value set in this bitmask matches with the
+bit flag being set by add_taint().
+This will cause a kdump to occur at the add_taint()->panic() call.
+
 Contact
 =======
 
* Unmerged path Documentation/kernel-parameters.txt
* Unmerged path include/linux/kernel.h
diff --git a/kernel/panic.c b/kernel/panic.c
index 2c5df6144bf0..b3b4d295a115 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -35,6 +35,8 @@ static int pause_on_oops_flag;
 static DEFINE_SPINLOCK(pause_on_oops_lock);
 bool crash_kexec_post_notifiers;
 int panic_on_warn __read_mostly;
+unsigned long panic_on_taint;
+bool panic_on_taint_nousertaint = false;
 
 int panic_timeout = CONFIG_PANIC_TIMEOUT;
 EXPORT_SYMBOL_GPL(panic_timeout);
@@ -388,6 +390,11 @@ void add_taint(unsigned flag, enum lockdep_ok lockdep_ok)
 		       "Disabling lock debugging due to kernel taint\n");
 
 	set_bit(flag, &tainted_mask);
+
+	if (tainted_mask & panic_on_taint) {
+		panic_on_taint = 0;
+		panic("panic_on_taint set ...");
+	}
 }
 EXPORT_SYMBOL(add_taint);
 
@@ -613,3 +620,30 @@ static int __init oops_setup(char *s)
 	return 0;
 }
 early_param("oops", oops_setup);
+
+static int __init panic_on_taint_setup(char *s)
+{
+	char *taint_str;
+
+	if (!s)
+		return -EINVAL;
+
+	taint_str = strsep(&s, ",");
+	if (kstrtoul(taint_str, 16, &panic_on_taint))
+		return -EINVAL;
+
+	/* make sure panic_on_taint doesn't hold out-of-range TAINT flags */
+	panic_on_taint &= TAINT_FLAGS_MAX;
+
+	if (!panic_on_taint)
+		return -EINVAL;
+
+	if (s && !strcmp(s, "nousertaint"))
+		panic_on_taint_nousertaint = true;
+
+	pr_info("panic_on_taint: bitmask=0x%lx nousertaint_mode=%sabled\n",
+		panic_on_taint, panic_on_taint_nousertaint ? "en" : "dis");
+
+	return 0;
+}
+early_param("panic_on_taint", panic_on_taint_setup);
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 10b17c319970..1e393cd5dd15 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -2504,11 +2504,20 @@ static int proc_taint(struct ctl_table *table, int write,
 		return err;
 
 	if (write) {
+		int i;
+
+		/*
+		 * If we are relying on panic_on_taint not producing
+		 * false positives due to userspace input, bail out
+		 * before setting the requested taint flags.
+		 */
+		if (panic_on_taint_nousertaint && (tmptaint & panic_on_taint))
+			return -EINVAL;
+
 		/*
 		 * Poor man's atomic or. Not worth adding a primitive
 		 * to everyone's atomic.h for this
 		 */
-		int i;
 		for (i = 0; i < BITS_PER_LONG && tmptaint >> i; i++) {
 			if ((tmptaint >> i) & 1)
 				add_taint(i, LOCKDEP_STILL_OK);
