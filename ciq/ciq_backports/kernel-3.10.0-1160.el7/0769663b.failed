NFSv4.1 fix incorrect return value in copy_file_range

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Olga Kornievskaia <kolga@netapp.com>
commit 0769663b4f580566ef6cdf366f3073dbe8022c39
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/0769663b.failed

According to the NFSv4.2 spec if the input and output file is the
same file, operation should fail with EINVAL. However, linux
copy_file_range() system call has no such restrictions. Therefore,
in such case let's return EOPNOTSUPP and allow VFS to fallback
to doing do_splice_direct(). Also when copy_file_range is called
on an NFSv4.0 or 4.1 mount (ie., a server that doesn't support
COPY functionality), we also need to return EOPNOTSUPP and
fallback to a regular copy.

Fixes xfstest generic/075, generic/091, generic/112, generic/263
for all NFSv4.x versions.

	Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
	Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
(cherry picked from commit 0769663b4f580566ef6cdf366f3073dbe8022c39)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/nfs4file.c
diff --cc fs/nfs/nfs4file.c
index 0b9f20bc0c2a,00d17198ee12..000000000000
--- a/fs/nfs/nfs4file.c
+++ b/fs/nfs/nfs4file.c
@@@ -164,9 -133,10 +164,15 @@@ static ssize_t nfs4_copy_file_range(str
  				    struct file *file_out, loff_t pos_out,
  				    size_t count, unsigned int flags)
  {
+ 	if (!nfs_server_capable(file_inode(file_out), NFS_CAP_COPY))
+ 		return -EOPNOTSUPP;
  	if (file_inode(file_in) == file_inode(file_out))
++<<<<<<< HEAD
 +		return -EINVAL;
 +
++=======
+ 		return -EOPNOTSUPP;
++>>>>>>> 0769663b4f58 (NFSv4.1 fix incorrect return value in copy_file_range)
  	return nfs42_proc_copy(file_in, pos_in, file_out, pos_out, count);
  }
  
diff --git a/fs/nfs/nfs42proc.c b/fs/nfs/nfs42proc.c
index 1fdf66723d69..f39cd4f92c25 100644
--- a/fs/nfs/nfs42proc.c
+++ b/fs/nfs/nfs42proc.c
@@ -215,9 +215,6 @@ ssize_t nfs42_proc_copy(struct file *src, loff_t pos_src,
 	};
 	ssize_t err, err2;
 
-	if (!nfs_server_capable(file_inode(dst), NFS_CAP_COPY))
-		return -EOPNOTSUPP;
-
 	src_lock = nfs_get_lock_context(nfs_file_open_context(src));
 	if (IS_ERR(src_lock))
 		return PTR_ERR(src_lock);
* Unmerged path fs/nfs/nfs4file.c
