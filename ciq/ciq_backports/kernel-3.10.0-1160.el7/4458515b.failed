kprobes: Replace %p with other pointer types

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
Rebuild_CHGLOG: - [kernel] kprobes: Replace p with other pointer types (Yannick Cote) [1764262]
Rebuild_FUZZ: 98.85%
commit-author Masami Hiramatsu <mhiramat@kernel.org>
commit 4458515b2c52831ee622411d2fe3e774d1f5c49a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/4458515b.failed

Replace %p with %pS or just remove it if unneeded.
And use WARN_ONCE() if it is a single bug.

	Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
	Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com>
	Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Cc: David Howells <dhowells@redhat.com>
	Cc: David S . Miller <davem@davemloft.net>
	Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
	Cc: Jon Medhurst <tixy@linaro.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: Thomas Richter <tmricht@linux.ibm.com>
	Cc: Tobin C . Harding <me@tobin.cc>
	Cc: Will Deacon <will.deacon@arm.com>
	Cc: acme@kernel.org
	Cc: akpm@linux-foundation.org
	Cc: brueckner@linux.vnet.ibm.com
	Cc: linux-arch@vger.kernel.org
	Cc: rostedt@goodmis.org
	Cc: schwidefsky@de.ibm.com
	Cc: stable@vger.kernel.org
Link: https://lkml.kernel.org/lkml/152491899284.9916.5350534544808158621.stgit@devbox
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 4458515b2c52831ee622411d2fe3e774d1f5c49a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/kprobes.c
diff --cc kernel/kprobes.c
index 7f971d04c732,ab257be4d924..000000000000
--- a/kernel/kprobes.c
+++ b/kernel/kprobes.c
@@@ -2065,16 -2069,51 +2065,58 @@@ out
  }
  EXPORT_SYMBOL_GPL(enable_kprobe);
  
++<<<<<<< HEAD
 +void __kprobes dump_kprobe(struct kprobe *kp)
++=======
+ /* Caller must NOT call this in usual path. This is only for critical case */
+ void dump_kprobe(struct kprobe *kp)
++>>>>>>> 4458515b2c52 (kprobes: Replace %p with other pointer types)
  {
- 	printk(KERN_WARNING "Dumping kprobe:\n");
- 	printk(KERN_WARNING "Name: %s\nAddress: %p\nOffset: %x\n",
- 	       kp->symbol_name, kp->addr, kp->offset);
+ 	pr_err("Dumping kprobe:\n");
+ 	pr_err("Name: %s\nOffset: %x\nAddress: %pS\n",
+ 	       kp->symbol_name, kp->offset, kp->addr);
  }
++<<<<<<< HEAD
++=======
+ NOKPROBE_SYMBOL(dump_kprobe);
+ 
+ /*
+  * Lookup and populate the kprobe_blacklist.
+  *
+  * Unlike the kretprobe blacklist, we'll need to determine
+  * the range of addresses that belong to the said functions,
+  * since a kprobe need not necessarily be at the beginning
+  * of a function.
+  */
+ static int __init populate_kprobe_blacklist(unsigned long *start,
+ 					     unsigned long *end)
+ {
+ 	unsigned long *iter;
+ 	struct kprobe_blacklist_entry *ent;
+ 	unsigned long entry, offset = 0, size = 0;
+ 
+ 	for (iter = start; iter < end; iter++) {
+ 		entry = arch_deref_entry_point((void *)*iter);
+ 
+ 		if (!kernel_text_address(entry) ||
+ 		    !kallsyms_lookup_size_offset(entry, &size, &offset))
+ 			continue;
+ 
+ 		ent = kmalloc(sizeof(*ent), GFP_KERNEL);
+ 		if (!ent)
+ 			return -ENOMEM;
+ 		ent->start_addr = entry;
+ 		ent->end_addr = entry + size;
+ 		INIT_LIST_HEAD(&ent->list);
+ 		list_add_tail(&ent->list, &kprobe_blacklist);
+ 	}
+ 	return 0;
+ }
++>>>>>>> 4458515b2c52 (kprobes: Replace %p with other pointer types)
  
  /* Module notifier call back, checking kprobes on the module */
 -static int kprobes_module_callback(struct notifier_block *nb,
 -				   unsigned long val, void *data)
 +static int __kprobes kprobes_module_callback(struct notifier_block *nb,
 +					     unsigned long val, void *data)
  {
  	struct module *mod = data;
  	struct hlist_head *head;
* Unmerged path kernel/kprobes.c
