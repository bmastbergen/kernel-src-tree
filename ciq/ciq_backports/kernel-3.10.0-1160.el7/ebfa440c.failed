vfio/pci: Fix SR-IOV VF handling with MMIO blocking

jira LE-1907
cve CVE-2020-12888
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Alex Williamson <alex.williamson@redhat.com>
commit ebfa440ce38b7e2e04c3124aa89c8a9f4094cf21
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/ebfa440c.failed

SR-IOV VFs do not implement the memory enable bit of the command
register, therefore this bit is not set in config space after
pci_enable_device().  This leads to an unintended difference
between PF and VF in hand-off state to the user.  We can correct
this by setting the initial value of the memory enable bit in our
virtualized config space.  There's really no need however to
ever fault a user on a VF though as this would only indicate an
error in the user's management of the enable bit, versus a PF
where the same access could trigger hardware faults.

Fixes: abafbc551fdd ("vfio-pci: Invalidate mmaps and block MMIO access on disabled memory")
	Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
(cherry picked from commit ebfa440ce38b7e2e04c3124aa89c8a9f4094cf21)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/vfio/pci/vfio_pci_config.c
diff --cc drivers/vfio/pci/vfio_pci_config.c
index 4082bfbce848,d98843feddce..000000000000
--- a/drivers/vfio/pci/vfio_pci_config.c
+++ b/drivers/vfio/pci/vfio_pci_config.c
@@@ -398,6 -395,20 +398,23 @@@ static inline void p_setd(struct perm_b
  	*(__le32 *)(&p->write[off]) = cpu_to_le32(write);
  }
  
++<<<<<<< HEAD
++=======
+ /* Caller should hold memory_lock semaphore */
+ bool __vfio_pci_memory_enabled(struct vfio_pci_device *vdev)
+ {
+ 	struct pci_dev *pdev = vdev->pdev;
+ 	u16 cmd = le16_to_cpu(*(__le16 *)&vdev->vconfig[PCI_COMMAND]);
+ 
+ 	/*
+ 	 * SR-IOV VF memory enable is handled by the MSE bit in the
+ 	 * PF SR-IOV capability, there's therefore no need to trigger
+ 	 * faults based on the virtual value.
+ 	 */
+ 	return pdev->is_virtfn || (cmd & PCI_COMMAND_MEMORY);
+ }
+ 
++>>>>>>> ebfa440ce38b (vfio/pci: Fix SR-IOV VF handling with MMIO blocking)
  /*
   * Restore the *real* BARs after we detect a FLR or backdoor reset.
   * (backdoor = some device specific technique that we didn't catch)
* Unmerged path drivers/vfio/pci/vfio_pci_config.c
