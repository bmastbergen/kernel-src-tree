ceph: use ceph_evict_inode to cleanup inode's resource

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Yan, Zheng <zyan@redhat.com>
commit 87bc5b895d94a0f40fe170d4cf5771c8e8f85d15
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/87bc5b89.failed

remove_session_caps() relies on __wait_on_freeing_inode(), to wait for
freeing inode to remove its caps. But VFS wakes freeing inode waiters
before calling destroy_inode().

	Cc: stable@vger.kernel.org
Link: https://tracker.ceph.com/issues/40102
	Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
	Reviewed-by: Jeff Layton <jlayton@redhat.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 87bc5b895d94a0f40fe170d4cf5771c8e8f85d15)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/super.c
#	fs/ceph/super.h
diff --cc fs/ceph/super.c
index 0343bd4d76c7,5f0c950ca966..000000000000
--- a/fs/ceph/super.c
+++ b/fs/ceph/super.c
@@@ -774,13 -832,21 +774,18 @@@ static void ceph_umount_begin(struct su
  	return;
  }
  
 -static int ceph_remount(struct super_block *sb, int *flags, char *data)
 -{
 -	sync_filesystem(sb);
 -	return 0;
 -}
 -
  static const struct super_operations ceph_super_ops = {
  	.alloc_inode	= ceph_alloc_inode,
++<<<<<<< HEAD
 +	.destroy_inode	= ceph_destroy_inode,
++=======
+ 	.free_inode	= ceph_free_inode,
++>>>>>>> 87bc5b895d94 (ceph: use ceph_evict_inode to cleanup inode's resource)
  	.write_inode    = ceph_write_inode,
  	.drop_inode	= ceph_drop_inode,
+ 	.evict_inode	= ceph_evict_inode,
  	.sync_fs        = ceph_sync_fs,
  	.put_super	= ceph_put_super,
 -	.remount_fs	= ceph_remount,
  	.show_options   = ceph_show_options,
  	.statfs		= ceph_statfs,
  	.umount_begin   = ceph_umount_begin,
diff --cc fs/ceph/super.h
index 30d1ebe3bba4,30e9a4e415cc..000000000000
--- a/fs/ceph/super.h
+++ b/fs/ceph/super.h
@@@ -834,7 -884,8 +834,12 @@@ static inline bool __ceph_have_pending_
  extern const struct inode_operations ceph_file_iops;
  
  extern struct inode *ceph_alloc_inode(struct super_block *sb);
++<<<<<<< HEAD
 +extern void ceph_destroy_inode(struct inode *inode);
++=======
+ extern void ceph_evict_inode(struct inode *inode);
+ extern void ceph_free_inode(struct inode *inode);
++>>>>>>> 87bc5b895d94 (ceph: use ceph_evict_inode to cleanup inode's resource)
  extern int ceph_drop_inode(struct inode *inode);
  
  extern struct inode *ceph_get_inode(struct super_block *sb,
diff --git a/fs/ceph/inode.c b/fs/ceph/inode.c
index 9881f548a6fd..b1dee368ece1 100644
--- a/fs/ceph/inode.c
+++ b/fs/ceph/inode.c
@@ -524,13 +524,16 @@ static void ceph_i_callback(struct rcu_head *head)
 	kmem_cache_free(ceph_inode_cachep, ci);
 }
 
-void ceph_destroy_inode(struct inode *inode)
+void ceph_evict_inode(struct inode *inode)
 {
 	struct ceph_inode_info *ci = ceph_inode(inode);
 	struct ceph_inode_frag *frag;
 	struct rb_node *n;
 
-	dout("destroy_inode %p ino %llx.%llx\n", inode, ceph_vinop(inode));
+	dout("evict_inode %p ino %llx.%llx\n", inode, ceph_vinop(inode));
+
+	truncate_inode_pages_final(&inode->i_data);
+	clear_inode(inode);
 
 	ceph_queue_caps_release(inode);
 
* Unmerged path fs/ceph/super.c
* Unmerged path fs/ceph/super.h
