ceph: don't NULL terminate virtual xattrs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Jeff Layton <jlayton@kernel.org>
commit 26350535c2cef4bcf5de597c301b0560650cec19
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/26350535.failed

The convention with xattrs is to not store the termination with string
data, given that it returns the length. This is how setfattr/getfattr
operate.

Most of ceph's virtual xattr routines use snprintf to plop the string
directly into the destination buffer, but snprintf always NULL
terminates the string. This means that if we send the kernel a buffer
that is the exact length needed to hold the string, it'll end up
truncated.

Add a ceph_fmt_xattr helper function to format the string into an
on-stack buffer that should always be large enough to hold the whole
thing and then memcpy the result into the destination buffer. If it does
turn out that the formatted string won't fit in the on-stack buffer,
then return -E2BIG and do a WARN_ONCE().

Change over most of the virtual xattr routines to use the new helper. A
couple of the xattrs are sourced from strings however, and it's
difficult to know how long they'll be. Just have those memcpy the result
in place after verifying the length.

	Signed-off-by: Jeff Layton <jlayton@kernel.org>
	Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
	Acked-by: Ilya Dryomov <idryomov@gmail.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit 26350535c2cef4bcf5de597c301b0560650cec19)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/xattr.c
diff --cc fs/ceph/xattr.c
index 1675927c49b6,37b458a9af3a..000000000000
--- a/fs/ceph/xattr.c
+++ b/fs/ceph/xattr.c
@@@ -120,28 -109,55 +120,60 @@@ static size_t ceph_vxattrcb_layout(stru
  	return ret;
  }
  
++<<<<<<< HEAD
 +static size_t ceph_vxattrcb_layout_stripe_unit(struct ceph_inode_info *ci,
 +					       char *val, size_t size)
++=======
+ /*
+  * The convention with strings in xattrs is that they should not be NULL
+  * terminated, since we're returning the length with them. snprintf always
+  * NULL terminates however, so call it on a temporary buffer and then memcpy
+  * the result into place.
+  */
+ static int ceph_fmt_xattr(char *val, size_t size, const char *fmt, ...)
  {
- 	return snprintf(val, size, "%u", ci->i_layout.stripe_unit);
+ 	int ret;
+ 	va_list args;
+ 	char buf[96]; /* NB: reevaluate size if new vxattrs are added */
+ 
+ 	va_start(args, fmt);
+ 	ret = vsnprintf(buf, size ? sizeof(buf) : 0, fmt, args);
+ 	va_end(args);
+ 
+ 	/* Sanity check */
+ 	if (size && ret + 1 > sizeof(buf)) {
+ 		WARN_ONCE(true, "Returned length too big (%d)", ret);
+ 		return -E2BIG;
+ 	}
+ 
+ 	if (ret <= size)
+ 		memcpy(val, buf, ret);
+ 	return ret;
+ }
+ 
+ static ssize_t ceph_vxattrcb_layout_stripe_unit(struct ceph_inode_info *ci,
+ 						char *val, size_t size)
++>>>>>>> 26350535c2ce (ceph: don't NULL terminate virtual xattrs)
+ {
+ 	return ceph_fmt_xattr(val, size, "%u", ci->i_layout.stripe_unit);
  }
  
 -static ssize_t ceph_vxattrcb_layout_stripe_count(struct ceph_inode_info *ci,
 -						 char *val, size_t size)
 +static size_t ceph_vxattrcb_layout_stripe_count(struct ceph_inode_info *ci,
 +						char *val, size_t size)
  {
- 	return snprintf(val, size, "%u", ci->i_layout.stripe_count);
+ 	return ceph_fmt_xattr(val, size, "%u", ci->i_layout.stripe_count);
  }
  
 -static ssize_t ceph_vxattrcb_layout_object_size(struct ceph_inode_info *ci,
 -						char *val, size_t size)
 +static size_t ceph_vxattrcb_layout_object_size(struct ceph_inode_info *ci,
 +					       char *val, size_t size)
  {
- 	return snprintf(val, size, "%u", ci->i_layout.object_size);
+ 	return ceph_fmt_xattr(val, size, "%u", ci->i_layout.object_size);
  }
  
 -static ssize_t ceph_vxattrcb_layout_pool(struct ceph_inode_info *ci,
 -					 char *val, size_t size)
 +static size_t ceph_vxattrcb_layout_pool(struct ceph_inode_info *ci,
 +					char *val, size_t size)
  {
 -	ssize_t ret;
 +	int ret;
  	struct ceph_fs_client *fsc = ceph_sb_to_client(ci->vfs_inode.i_sb);
  	struct ceph_osd_client *osdc = &fsc->client->osdc;
  	s64 pool = ci->i_layout.pool_id;
@@@ -149,21 -165,27 +181,38 @@@
  
  	down_read(&osdc->lock);
  	pool_name = ceph_pg_pool_name_by_id(osdc->osdmap, pool);
++<<<<<<< HEAD
 +	if (pool_name)
 +		ret = snprintf(val, size, "%s", pool_name);
 +	else
 +		ret = snprintf(val, size, "%lld", (unsigned long long)pool);
++=======
+ 	if (pool_name) {
+ 		ret = strlen(pool_name);
+ 		if (ret <= size)
+ 			memcpy(val, pool_name, ret);
+ 	} else {
+ 		ret = ceph_fmt_xattr(val, size, "%lld", pool);
+ 	}
++>>>>>>> 26350535c2ce (ceph: don't NULL terminate virtual xattrs)
  	up_read(&osdc->lock);
  	return ret;
  }
  
 -static ssize_t ceph_vxattrcb_layout_pool_namespace(struct ceph_inode_info *ci,
 -						   char *val, size_t size)
 +static size_t ceph_vxattrcb_layout_pool_namespace(struct ceph_inode_info *ci,
 +						  char *val, size_t size)
  {
- 	int ret = 0;
+ 	ssize_t ret = 0;
  	struct ceph_string *ns = ceph_try_get_string(ci->i_layout.pool_ns);
+ 
  	if (ns) {
++<<<<<<< HEAD
 +		ret = snprintf(val, size, "%.*s", (int)ns->len, ns->str);
++=======
+ 		ret = ns->len;
+ 		if (ret <= size)
+ 			memcpy(val, ns->str, ret);
++>>>>>>> 26350535c2ce (ceph: don't NULL terminate virtual xattrs)
  		ceph_put_string(ns);
  	}
  	return ret;
@@@ -171,53 -193,66 +220,71 @@@
  
  /* directories */
  
 -static ssize_t ceph_vxattrcb_dir_entries(struct ceph_inode_info *ci, char *val,
 -					 size_t size)
 +static size_t ceph_vxattrcb_dir_entries(struct ceph_inode_info *ci, char *val,
 +					size_t size)
  {
- 	return snprintf(val, size, "%lld", ci->i_files + ci->i_subdirs);
+ 	return ceph_fmt_xattr(val, size, "%lld", ci->i_files + ci->i_subdirs);
  }
  
 -static ssize_t ceph_vxattrcb_dir_files(struct ceph_inode_info *ci, char *val,
 -				       size_t size)
 +static size_t ceph_vxattrcb_dir_files(struct ceph_inode_info *ci, char *val,
 +				      size_t size)
  {
- 	return snprintf(val, size, "%lld", ci->i_files);
+ 	return ceph_fmt_xattr(val, size, "%lld", ci->i_files);
  }
  
 -static ssize_t ceph_vxattrcb_dir_subdirs(struct ceph_inode_info *ci, char *val,
 -					 size_t size)
 +static size_t ceph_vxattrcb_dir_subdirs(struct ceph_inode_info *ci, char *val,
 +					size_t size)
  {
- 	return snprintf(val, size, "%lld", ci->i_subdirs);
+ 	return ceph_fmt_xattr(val, size, "%lld", ci->i_subdirs);
  }
  
 -static ssize_t ceph_vxattrcb_dir_rentries(struct ceph_inode_info *ci, char *val,
 -					  size_t size)
 +static size_t ceph_vxattrcb_dir_rentries(struct ceph_inode_info *ci, char *val,
 +					 size_t size)
  {
- 	return snprintf(val, size, "%lld", ci->i_rfiles + ci->i_rsubdirs);
+ 	return ceph_fmt_xattr(val, size, "%lld",
+ 				ci->i_rfiles + ci->i_rsubdirs);
  }
  
 -static ssize_t ceph_vxattrcb_dir_rfiles(struct ceph_inode_info *ci, char *val,
 -					size_t size)
 +static size_t ceph_vxattrcb_dir_rfiles(struct ceph_inode_info *ci, char *val,
 +				       size_t size)
  {
- 	return snprintf(val, size, "%lld", ci->i_rfiles);
+ 	return ceph_fmt_xattr(val, size, "%lld", ci->i_rfiles);
  }
  
 -static ssize_t ceph_vxattrcb_dir_rsubdirs(struct ceph_inode_info *ci, char *val,
 -					  size_t size)
 +static size_t ceph_vxattrcb_dir_rsubdirs(struct ceph_inode_info *ci, char *val,
 +					 size_t size)
  {
- 	return snprintf(val, size, "%lld", ci->i_rsubdirs);
+ 	return ceph_fmt_xattr(val, size, "%lld", ci->i_rsubdirs);
  }
  
 -static ssize_t ceph_vxattrcb_dir_rbytes(struct ceph_inode_info *ci, char *val,
 -					size_t size)
 +static size_t ceph_vxattrcb_dir_rbytes(struct ceph_inode_info *ci, char *val,
 +				       size_t size)
  {
- 	return snprintf(val, size, "%lld", ci->i_rbytes);
+ 	return ceph_fmt_xattr(val, size, "%lld", ci->i_rbytes);
  }
  
 -static ssize_t ceph_vxattrcb_dir_rctime(struct ceph_inode_info *ci, char *val,
 -					size_t size)
 +static size_t ceph_vxattrcb_dir_rctime(struct ceph_inode_info *ci, char *val,
 +				       size_t size)
  {
++<<<<<<< HEAD
 +	return snprintf(val, size, "%ld.09%ld", (long)ci->i_rctime.tv_sec,
 +			(long)ci->i_rctime.tv_nsec);
++=======
+ 	return ceph_fmt_xattr(val, size, "%lld.%09ld", ci->i_rctime.tv_sec,
+ 				ci->i_rctime.tv_nsec);
+ }
+ 
+ /* dir pin */
+ static bool ceph_vxattrcb_dir_pin_exists(struct ceph_inode_info *ci)
+ {
+ 	return ci->i_dir_pin != -ENODATA;
+ }
+ 
+ static ssize_t ceph_vxattrcb_dir_pin(struct ceph_inode_info *ci, char *val,
+ 				     size_t size)
+ {
+ 	return ceph_fmt_xattr(val, size, "%d", (int)ci->i_dir_pin);
++>>>>>>> 26350535c2ce (ceph: don't NULL terminate virtual xattrs)
  }
  
  /* quotas */
@@@ -235,25 -269,38 +302,41 @@@ static bool ceph_vxattrcb_quota_exists(
  	return ret;
  }
  
 -static ssize_t ceph_vxattrcb_quota(struct ceph_inode_info *ci, char *val,
 -				   size_t size)
 +static size_t ceph_vxattrcb_quota(struct ceph_inode_info *ci, char *val,
 +				  size_t size)
  {
- 	return snprintf(val, size, "max_bytes=%llu max_files=%llu",
- 			ci->i_max_bytes, ci->i_max_files);
+ 	return ceph_fmt_xattr(val, size, "max_bytes=%llu max_files=%llu",
+ 				ci->i_max_bytes, ci->i_max_files);
  }
  
 -static ssize_t ceph_vxattrcb_quota_max_bytes(struct ceph_inode_info *ci,
 -					     char *val, size_t size)
 +static size_t ceph_vxattrcb_quota_max_bytes(struct ceph_inode_info *ci,
 +					    char *val, size_t size)
  {
- 	return snprintf(val, size, "%llu", ci->i_max_bytes);
+ 	return ceph_fmt_xattr(val, size, "%llu", ci->i_max_bytes);
  }
  
 -static ssize_t ceph_vxattrcb_quota_max_files(struct ceph_inode_info *ci,
 -					     char *val, size_t size)
 +static size_t ceph_vxattrcb_quota_max_files(struct ceph_inode_info *ci,
 +					    char *val, size_t size)
  {
- 	return snprintf(val, size, "%llu", ci->i_max_files);
+ 	return ceph_fmt_xattr(val, size, "%llu", ci->i_max_files);
+ }
+ 
++<<<<<<< HEAD
++=======
+ /* snapshots */
+ static bool ceph_vxattrcb_snap_btime_exists(struct ceph_inode_info *ci)
+ {
+ 	return (ci->i_snap_btime.tv_sec != 0 || ci->i_snap_btime.tv_nsec != 0);
+ }
+ 
+ static ssize_t ceph_vxattrcb_snap_btime(struct ceph_inode_info *ci, char *val,
+ 					size_t size)
+ {
+ 	return ceph_fmt_xattr(val, size, "%lld.%09ld", ci->i_snap_btime.tv_sec,
+ 				ci->i_snap_btime.tv_nsec);
  }
  
++>>>>>>> 26350535c2ce (ceph: don't NULL terminate virtual xattrs)
  #define CEPH_XATTR_NAME(_type, _name)	XATTR_CEPH_PREFIX #_type "." #_name
  #define CEPH_XATTR_NAME2(_type, _name, _name2)	\
  	XATTR_CEPH_PREFIX #_type "." #_name "." #_name2
* Unmerged path fs/ceph/xattr.c
