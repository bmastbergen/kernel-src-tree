hv_netvsc: Fix error handling in netvsc_set_features()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Haiyang Zhang <haiyangz@microsoft.com>
commit c4509a5ac0ace94d5b1f0092dc4d36933c1d896e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/c4509a5a.failed

When an error is returned by rndis_filter_set_offload_params(), we should
still assign the unaffected features to ndev->features. Otherwise, these
features will be missing.

Fixes: d6792a5a0747 ("hv_netvsc: Add handler for LRO setting change")
	Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit c4509a5ac0ace94d5b1f0092dc4d36933c1d896e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index e00e04dec2a4,bab7c1f84dfd..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -1708,6 -1779,49 +1708,52 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static int netvsc_set_features(struct net_device *ndev,
+ 			       netdev_features_t features)
+ {
+ 	netdev_features_t change = features ^ ndev->features;
+ 	struct net_device_context *ndevctx = netdev_priv(ndev);
+ 	struct netvsc_device *nvdev = rtnl_dereference(ndevctx->nvdev);
+ 	struct net_device *vf_netdev = rtnl_dereference(ndevctx->vf_netdev);
+ 	struct ndis_offload_params offloads;
+ 	int ret = 0;
+ 
+ 	if (!nvdev || nvdev->destroy)
+ 		return -ENODEV;
+ 
+ 	if (!(change & NETIF_F_LRO))
+ 		goto syncvf;
+ 
+ 	memset(&offloads, 0, sizeof(struct ndis_offload_params));
+ 
+ 	if (features & NETIF_F_LRO) {
+ 		offloads.rsc_ip_v4 = NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED;
+ 		offloads.rsc_ip_v6 = NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED;
+ 	} else {
+ 		offloads.rsc_ip_v4 = NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED;
+ 		offloads.rsc_ip_v6 = NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED;
+ 	}
+ 
+ 	ret = rndis_filter_set_offload_params(ndev, nvdev, &offloads);
+ 
+ 	if (ret) {
+ 		features ^= NETIF_F_LRO;
+ 		ndev->features = features;
+ 	}
+ 
+ syncvf:
+ 	if (!vf_netdev)
+ 		return ret;
+ 
+ 	vf_netdev->wanted_features = features;
+ 	netdev_update_features(vf_netdev);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> c4509a5ac0ac (hv_netvsc: Fix error handling in netvsc_set_features())
  static u32 netvsc_get_msglevel(struct net_device *ndev)
  {
  	struct net_device_context *ndev_ctx = netdev_priv(ndev);
* Unmerged path drivers/net/hyperv/netvsc_drv.c
