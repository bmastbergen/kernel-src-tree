NFS: Move buffered I/O locking into nfs_file_write()

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Trond Myklebust <trond.myklebust@primarydata.com>
commit 18290650b1c8655cfe6e0d63dd34942a037a130b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/18290650.failed

Preparation for the patch that de-serialises O_DIRECT reads and
writes.

	Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
(cherry picked from commit 18290650b1c8655cfe6e0d63dd34942a037a130b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/nfs/file.c
diff --cc fs/nfs/file.c
index 5b55f801cd6b,46cf0afe3c0f..000000000000
--- a/fs/nfs/file.c
+++ b/fs/nfs/file.c
@@@ -669,19 -623,17 +669,26 @@@ ssize_t nfs_file_write(struct kiocb *io
  	struct inode *inode = file_inode(file);
  	unsigned long written = 0;
  	ssize_t result;
++<<<<<<< HEAD
 +	size_t count = iov_length(iov, nr_segs);
++=======
++>>>>>>> 18290650b1c8 (NFS: Move buffered I/O locking into nfs_file_write())
  
  	result = nfs_key_timeout_notify(file, inode);
  	if (result)
  		return result;
  
 -	if (iocb->ki_flags & IOCB_DIRECT)
 -		return nfs_file_direct_write(iocb, from);
 +	if (file->f_flags & O_DIRECT)
 +		return nfs_file_direct_write(iocb, iov, nr_segs, pos, true);
  
++<<<<<<< HEAD
 +	dprintk("NFS: write(%pD2, %lu@%Ld)\n",
 +		file, (unsigned long) count, (long long) pos);
++=======
+ 	dprintk("NFS: write(%pD2, %zu@%Ld)\n",
+ 		file, iov_iter_count(from), (long long) iocb->ki_pos);
++>>>>>>> 18290650b1c8 (NFS: Move buffered I/O locking into nfs_file_write())
  
- 	result = -EBUSY;
  	if (IS_SWAPFILE(inode))
  		goto out_swapfile;
  	/*
@@@ -693,16 -645,22 +700,28 @@@
  			goto out;
  	}
  
- 	result = count;
- 	if (!count)
+ 	inode_lock(inode);
+ 	result = generic_write_checks(iocb, from);
+ 	if (result > 0) {
+ 		current->backing_dev_info = inode_to_bdi(inode);
+ 		result = generic_perform_write(file, from, iocb->ki_pos);
+ 		current->backing_dev_info = NULL;
+ 	}
+ 	inode_unlock(inode);
+ 	if (result <= 0)
  		goto out;
  
++<<<<<<< HEAD
 +	result = generic_file_aio_write(iocb, iov, nr_segs, pos);
 +	if (result > 0)
 +		written = result;
++=======
+ 	written = generic_write_sync(iocb, result);
+ 	iocb->ki_pos += written;
++>>>>>>> 18290650b1c8 (NFS: Move buffered I/O locking into nfs_file_write())
  
  	/* Return error values */
- 	if (result >= 0 && nfs_need_check_write(file, inode)) {
+ 	if (nfs_need_check_write(file, inode)) {
  		int err = vfs_fsync(file, 0);
  		if (err < 0)
  			result = err;
* Unmerged path fs/nfs/file.c
