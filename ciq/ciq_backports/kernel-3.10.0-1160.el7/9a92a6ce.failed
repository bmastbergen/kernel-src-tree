stacktrace: introduce snprint_stack_trace for buffer output

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Joonsoo Kim <iamjoonsoo.kim@lge.com>
commit 9a92a6ce6f842713ccd0025c5228fe8bea61234c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/9a92a6ce.failed

Current stacktrace only have the function for console output.  page_owner
that will be introduced in following patch needs to print the output of
stacktrace into the buffer for our own output format so so new function,
snprint_stack_trace(), is needed.

	Signed-off-by: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Cc: Mel Gorman <mgorman@suse.de>
	Cc: Johannes Weiner <hannes@cmpxchg.org>
	Cc: Minchan Kim <minchan@kernel.org>
	Cc: Dave Hansen <dave@sr71.net>
	Cc: Michal Nazarewicz <mina86@mina86.com>
	Cc: Jungsoo Son <jungsoo.son@lge.com>
	Cc: Ingo Molnar <mingo@redhat.com>
	Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 9a92a6ce6f842713ccd0025c5228fe8bea61234c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/stacktrace.h
diff --cc include/linux/stacktrace.h
index 53a1abc19678,669045ab73f3..000000000000
--- a/include/linux/stacktrace.h
+++ b/include/linux/stacktrace.h
@@@ -18,10 -20,10 +20,12 @@@ extern void save_stack_trace_regs(struc
  				  struct stack_trace *trace);
  extern void save_stack_trace_tsk(struct task_struct *tsk,
  				struct stack_trace *trace);
 +extern int save_stack_trace_tsk_reliable(struct task_struct *tsk,
 +					 struct stack_trace *trace);
  
  extern void print_stack_trace(struct stack_trace *trace, int spaces);
+ extern int snprint_stack_trace(char *buf, size_t size,
+ 			struct stack_trace *trace, int spaces);
  
  #ifdef CONFIG_USER_STACKTRACE_SUPPORT
  extern void save_stack_trace_user(struct stack_trace *trace);
@@@ -34,7 -36,7 +38,12 @@@
  # define save_stack_trace_tsk(tsk, trace)		do { } while (0)
  # define save_stack_trace_user(trace)			do { } while (0)
  # define print_stack_trace(trace, spaces)		do { } while (0)
++<<<<<<< HEAD
 +# define save_stack_trace_tsk_reliable(tsk, trace)	({ -ENOSYS; })
 +#endif /* CONFIG_STACKTRACE */
++=======
+ # define snprint_stack_trace(buf, size, trace, spaces)	do { } while (0)
+ #endif
++>>>>>>> 9a92a6ce6f84 (stacktrace: introduce snprint_stack_trace for buffer output)
  
 -#endif
 +#endif /* __LINUX_STACKTRACE_H */
* Unmerged path include/linux/stacktrace.h
diff --git a/kernel/stacktrace.c b/kernel/stacktrace.c
index a47ae65b277a..4ef81dc5a52b 100644
--- a/kernel/stacktrace.c
+++ b/kernel/stacktrace.c
@@ -25,6 +25,38 @@ void print_stack_trace(struct stack_trace *trace, int spaces)
 }
 EXPORT_SYMBOL_GPL(print_stack_trace);
 
+int snprint_stack_trace(char *buf, size_t size,
+			struct stack_trace *trace, int spaces)
+{
+	int i;
+	unsigned long ip;
+	int generated;
+	int total = 0;
+
+	if (WARN_ON(!trace->entries))
+		return 0;
+
+	for (i = 0; i < trace->nr_entries; i++) {
+		ip = trace->entries[i];
+		generated = snprintf(buf, size, "%*c[<%p>] %pS\n",
+				1 + spaces, ' ', (void *) ip, (void *) ip);
+
+		total += generated;
+
+		/* Assume that generated isn't a negative number */
+		if (generated >= size) {
+			buf += size;
+			size = 0;
+		} else {
+			buf += generated;
+			size -= generated;
+		}
+	}
+
+	return total;
+}
+EXPORT_SYMBOL_GPL(snprint_stack_trace);
+
 /*
  * Architectures that do not implement save_stack_trace_*()
  * get these weak aliases and once-per-bootup warnings
