net: ipv4: avoid mixed n_redirects and rate_tokens usage

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
Rebuild_CHGLOG: - [net] ipv4: avoid mixed n_redirects and rate_tokens usage (Paolo Abeni) [1832332]
Rebuild_FUZZ: 95.33%
commit-author Paolo Abeni <pabeni@redhat.com>
commit b406472b5ad79ede8d10077f0c8f05505ace8b6d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/b406472b.failed

Since commit c09551c6ff7f ("net: ipv4: use a dedicated counter
for icmp_v4 redirect packets") we use 'n_redirects' to account
for redirect packets, but we still use 'rate_tokens' to compute
the redirect packets exponential backoff.

If the device sent to the relevant peer any ICMP error packet
after sending a redirect, it will also update 'rate_token' according
to the leaking bucket schema; typically 'rate_token' will raise
above BITS_PER_LONG and the redirect packets backoff algorithm
will produce undefined behavior.

Fix the issue using 'n_redirects' to compute the exponential backoff
in ip_rt_send_redirect().

Note that we still clear rate_tokens after a redirect silence period,
to avoid changing an established behaviour.

The root cause predates git history; before the mentioned commit in
the critical scenario, the kernel stopped sending redirects, after
the mentioned commit the behavior more randomic.

	Reported-by: Xiumei Mu <xmu@redhat.com>
Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
Fixes: c09551c6ff7f ("net: ipv4: use a dedicated counter for icmp_v4 redirect packets")
	Signed-off-by: Paolo Abeni <pabeni@redhat.com>
	Acked-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b406472b5ad79ede8d10077f0c8f05505ace8b6d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/ipv4/route.c
diff --cc net/ipv4/route.c
index 9cf3c3fd762f,14654876127e..000000000000
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@@ -922,10 -921,10 +922,14 @@@ void ip_rt_send_redirect(struct sk_buf
  
  		icmp_send(skb, ICMP_REDIRECT, ICMP_REDIR_HOST, gw);
  		peer->rate_last = jiffies;
++<<<<<<< HEAD
 +		++peer->rate_tokens;
++=======
+ 		++peer->n_redirects;
++>>>>>>> b406472b5ad7 (net: ipv4: avoid mixed n_redirects and rate_tokens usage)
  #ifdef CONFIG_IP_ROUTE_VERBOSE
  		if (log_martians &&
- 		    peer->rate_tokens == ip_rt_redirect_number)
+ 		    peer->n_redirects == ip_rt_redirect_number)
  			net_warn_ratelimited("host %pI4/if%d ignores redirects for %pI4 to %pI4\n",
  					     &ip_hdr(skb)->saddr, inet_iif(skb),
  					     &ip_hdr(skb)->daddr, &gw);
* Unmerged path net/ipv4/route.c
