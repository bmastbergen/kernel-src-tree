drm/nouveau/kms/gv100-: avoid sending a core update until the first modeset

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Ben Skeggs <bskeggs@redhat.com>
commit 137c4ba7163ad9d5696b9fde78b1c0898a9c115b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/137c4ba7.failed

The OR routing logic in NVKM does not expect to receive supervisor
interrupts until the DD has provided consistent information on the
ORs it's using and the EVO/NVD assembly state to match.

The combination of changing window ownership + core channel update
during display init triggered a situation where we'd disconnect an
OR from the pad it was meant to still be driving on some systems.

	Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
(cherry picked from commit 137c4ba7163ad9d5696b9fde78b1c0898a9c115b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/nouveau/dispnv50/corec37d.c
#	drivers/gpu/drm/nouveau/dispnv50/corec57d.c
diff --cc drivers/gpu/drm/nouveau/dispnv50/corec37d.c
index 7860774b65bc,3b36dc8d36b2..000000000000
--- a/drivers/gpu/drm/nouveau/dispnv50/corec37d.c
+++ b/drivers/gpu/drm/nouveau/dispnv50/corec37d.c
@@@ -76,7 -90,7 +76,11 @@@ corec37d_init(struct nv50_core *core
  {
  	const u32 windows = 8; /*XXX*/
  	u32 *push, i;
++<<<<<<< HEAD
 +	if ((push = evo_wait(&core->chan, 2 + 6 * windows + 2))) {
++=======
+ 	if ((push = evo_wait(&core->chan, 2 + 5 * windows))) {
++>>>>>>> 137c4ba7163a (drm/nouveau/kms/gv100-: avoid sending a core update until the first modeset)
  		evo_mthd(push, 0x0208, 1);
  		evo_data(push, core->chan.sync.handle);
  		for (i = 0; i < windows; i++) {
@@@ -87,9 -100,8 +91,7 @@@
  			evo_mthd(push, 0x1010 + (i * 0x080), 1);
  			evo_data(push, 0x00127fff);
  		}
- 		evo_mthd(push, 0x0200, 1);
- 		evo_data(push, 0x00000001);
  		evo_kick(push, &core->chan);
 -		core->assign_windows = true;
  	}
  }
  
diff --cc drivers/gpu/drm/nouveau/dispnv50/corec57d.c
index b606d68cda10,147adcd60937..000000000000
--- a/drivers/gpu/drm/nouveau/dispnv50/corec57d.c
+++ b/drivers/gpu/drm/nouveau/dispnv50/corec57d.c
@@@ -27,7 -27,7 +27,11 @@@ corec57d_init(struct nv50_core *core
  {
  	const u32 windows = 8; /*XXX*/
  	u32 *push, i;
++<<<<<<< HEAD
 +	if ((push = evo_wait(&core->chan, 2 + 6 * windows + 2))) {
++=======
+ 	if ((push = evo_wait(&core->chan, 2 + 5 * windows))) {
++>>>>>>> 137c4ba7163a (drm/nouveau/kms/gv100-: avoid sending a core update until the first modeset)
  		evo_mthd(push, 0x0208, 1);
  		evo_data(push, core->chan.sync.handle);
  		for (i = 0; i < windows; i++) {
@@@ -38,9 -37,8 +42,7 @@@
  			evo_mthd(push, 0x1010 + (i * 0x080), 1);
  			evo_data(push, 0x00117fff);
  		}
- 		evo_mthd(push, 0x0200, 1);
- 		evo_data(push, 0x00000001);
  		evo_kick(push, &core->chan);
 -		core->assign_windows = true;
  	}
  }
  
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/corec37d.c
* Unmerged path drivers/gpu/drm/nouveau/dispnv50/corec57d.c
