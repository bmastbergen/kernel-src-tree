blktrace: fix dereference after null check

jira LE-1907
cve CVE-2019-19768
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Cengiz Can <cengiz@kernel.wtf>
commit 153031a301bb07194e9c37466cfce8eacb977621
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/153031a3.failed

There was a recent change in blktrace.c that added a RCU protection to
`q->blk_trace` in order to fix a use-after-free issue during access.

However the change missed an edge case that can lead to dereferencing of
`bt` pointer even when it's NULL:

Coverity static analyzer marked this as a FORWARD_NULL issue with CID
1460458.

```
/kernel/trace/blktrace.c: 1904 in sysfs_blk_trace_attr_store()
1898            ret = 0;
1899            if (bt == NULL)
1900                    ret = blk_trace_setup_queue(q, bdev);
1901
1902            if (ret == 0) {
1903                    if (attr == &dev_attr_act_mask)
>>>     CID 1460458:  Null pointer dereferences  (FORWARD_NULL)
>>>     Dereferencing null pointer "bt".
1904                            bt->act_mask = value;
1905                    else if (attr == &dev_attr_pid)
1906                            bt->pid = value;
1907                    else if (attr == &dev_attr_start_lba)
1908                            bt->start_lba = value;
1909                    else if (attr == &dev_attr_end_lba)
```

Added a reassignment with RCU annotation to fix the issue.

Fixes: c780e86dd48 ("blktrace: Protect q->blk_trace with RCU")
	Cc: stable@vger.kernel.org
	Reviewed-by: Ming Lei <ming.lei@redhat.com>
	Reviewed-by: Bob Liu <bob.liu@oracle.com>
	Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
	Signed-off-by: Cengiz Can <cengiz@kernel.wtf>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 153031a301bb07194e9c37466cfce8eacb977621)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/trace/blktrace.c
diff --cc kernel/trace/blktrace.c
index d9820b3be08a,ca39dc3230cb..000000000000
--- a/kernel/trace/blktrace.c
+++ b/kernel/trace/blktrace.c
@@@ -1772,8 -1896,11 +1772,15 @@@ static ssize_t sysfs_blk_trace_attr_sto
  	}
  
  	ret = 0;
++<<<<<<< HEAD
 +	if (q->blk_trace == NULL)
++=======
+ 	if (bt == NULL) {
++>>>>>>> 153031a301bb (blktrace: fix dereference after null check)
  		ret = blk_trace_setup_queue(q, bdev);
+ 		bt = rcu_dereference_protected(q->blk_trace,
+ 				lockdep_is_held(&q->blk_trace_mutex));
+ 	}
  
  	if (ret == 0) {
  		if (attr == &dev_attr_act_mask)
* Unmerged path kernel/trace/blktrace.c
