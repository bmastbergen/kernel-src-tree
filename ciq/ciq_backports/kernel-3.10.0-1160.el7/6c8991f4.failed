net: ipv6_stub: use ip6_dst_lookup_flow instead of ip6_dst_lookup

jira LE-1907
cve CVE-2020-1749
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
Rebuild_CHGLOG: - [net] ipv6_stub: use ip6_dst_lookup_flow instead of ip6_dst_lookup (Sabrina Dubroca) [1774447] {CVE-2020-1749}
Rebuild_FUZZ: 96.00%
commit-author Sabrina Dubroca <sd@queasysnail.net>
commit 6c8991f41546c3c472503dff1ea9daaddf9331c2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/6c8991f4.failed

ipv6_stub uses the ip6_dst_lookup function to allow other modules to
perform IPv6 lookups. However, this function skips the XFRM layer
entirely.

All users of ipv6_stub->ip6_dst_lookup use ip_route_output_flow (via the
ip_route_output_key and ip_route_output helpers) for their IPv4 lookups,
which calls xfrm_lookup_route(). This patch fixes this inconsistent
behavior by switching the stub to ip6_dst_lookup_flow, which also calls
xfrm_lookup_route().

This requires some changes in all the callers, as these two functions
take different arguments and have different return types.

Fixes: 5f81bd2e5d80 ("ipv6: export a stub for IPv6 symbols used by vxlan")
	Reported-by: Xiumei Mu <xmu@redhat.com>
	Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6c8991f41546c3c472503dff1ea9daaddf9331c2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
#	include/net/ipv6_stubs.h
#	net/core/lwt_bpf.c
#	net/ipv6/addrconf_core.c
#	net/ipv6/af_inet6.c
#	net/mpls/af_mpls.c
#	net/tipc/udp_media.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
index d4ca71c4555c,c754987278a9..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
@@@ -329,6 -283,43 +329,46 @@@ out
  	return err;
  }
  
++<<<<<<< HEAD
++=======
+ #if IS_ENABLED(CONFIG_INET) && IS_ENABLED(CONFIG_IPV6)
+ static int mlx5e_route_lookup_ipv6(struct mlx5e_priv *priv,
+ 				   struct net_device *mirred_dev,
+ 				   struct net_device **out_dev,
+ 				   struct net_device **route_dev,
+ 				   struct flowi6 *fl6,
+ 				   struct neighbour **out_n,
+ 				   u8 *out_ttl)
+ {
+ 	struct dst_entry *dst;
+ 	struct neighbour *n;
+ 
+ 	int ret;
+ 
+ 	dst = ipv6_stub->ipv6_dst_lookup_flow(dev_net(mirred_dev), NULL, fl6,
+ 					      NULL);
+ 	if (IS_ERR(dst))
+ 		return PTR_ERR(dst);
+ 
+ 	if (!(*out_ttl))
+ 		*out_ttl = ip6_dst_hoplimit(dst);
+ 
+ 	ret = get_route_and_out_devs(priv, dst->dev, route_dev, out_dev);
+ 	if (ret < 0) {
+ 		dst_release(dst);
+ 		return ret;
+ 	}
+ 
+ 	n = dst_neigh_lookup(dst, &fl6->daddr);
+ 	dst_release(dst);
+ 	if (!n)
+ 		return -ENOMEM;
+ 
+ 	*out_n = n;
+ 	return 0;
+ }
+ 
++>>>>>>> 6c8991f41546 (net: ipv6_stub: use ip6_dst_lookup_flow instead of ip6_dst_lookup)
  int mlx5e_tc_tun_create_header_ipv6(struct mlx5e_priv *priv,
  				    struct net_device *mirred_dev,
  				    struct mlx5e_encap_entry *e)
diff --cc net/ipv6/addrconf_core.c
index 1cebf09e793d,ea00ce3d4117..000000000000
--- a/net/ipv6/addrconf_core.c
+++ b/net/ipv6/addrconf_core.c
@@@ -127,15 -129,77 +127,28 @@@ int inet6addr_validator_notifier_call_c
  }
  EXPORT_SYMBOL(inet6addr_validator_notifier_call_chain);
  
- static int eafnosupport_ipv6_dst_lookup(struct net *net, struct sock *u1,
- 					struct dst_entry **u2,
- 					struct flowi6 *u3)
+ static struct dst_entry *eafnosupport_ipv6_dst_lookup_flow(struct net *net,
+ 							   const struct sock *sk,
+ 							   struct flowi6 *fl6,
+ 							   const struct in6_addr *final_dst)
  {
- 	return -EAFNOSUPPORT;
+ 	return ERR_PTR(-EAFNOSUPPORT);
  }
  
 -static int eafnosupport_ipv6_route_input(struct sk_buff *skb)
 -{
 -	return -EAFNOSUPPORT;
 -}
 -
 -static struct fib6_table *eafnosupport_fib6_get_table(struct net *net, u32 id)
 -{
 -	return NULL;
 -}
 -
 -static int
 -eafnosupport_fib6_table_lookup(struct net *net, struct fib6_table *table,
 -			       int oif, struct flowi6 *fl6,
 -			       struct fib6_result *res, int flags)
 -{
 -	return -EAFNOSUPPORT;
 -}
 -
 -static int
 -eafnosupport_fib6_lookup(struct net *net, int oif, struct flowi6 *fl6,
 -			 struct fib6_result *res, int flags)
 -{
 -	return -EAFNOSUPPORT;
 -}
 -
 -static void
 -eafnosupport_fib6_select_path(const struct net *net, struct fib6_result *res,
 -			      struct flowi6 *fl6, int oif, bool have_oif_match,
 -			      const struct sk_buff *skb, int strict)
 -{
 -}
 -
 -static u32
 -eafnosupport_ip6_mtu_from_fib6(const struct fib6_result *res,
 -			       const struct in6_addr *daddr,
 -			       const struct in6_addr *saddr)
 -{
 -	return 0;
 -}
 -
 -static int eafnosupport_fib6_nh_init(struct net *net, struct fib6_nh *fib6_nh,
 -				     struct fib6_config *cfg, gfp_t gfp_flags,
 -				     struct netlink_ext_ack *extack)
 -{
 -	NL_SET_ERR_MSG(extack, "IPv6 support not enabled in kernel");
 -	return -EAFNOSUPPORT;
 -}
 -
 -static int eafnosupport_ip6_del_rt(struct net *net, struct fib6_info *rt)
 -{
 -	return -EAFNOSUPPORT;
 -}
 -
  const struct ipv6_stub *ipv6_stub __read_mostly = &(struct ipv6_stub) {
++<<<<<<< HEAD
 +	.ipv6_dst_lookup = eafnosupport_ipv6_dst_lookup,
++=======
+ 	.ipv6_dst_lookup_flow = eafnosupport_ipv6_dst_lookup_flow,
+ 	.ipv6_route_input  = eafnosupport_ipv6_route_input,
+ 	.fib6_get_table    = eafnosupport_fib6_get_table,
+ 	.fib6_table_lookup = eafnosupport_fib6_table_lookup,
+ 	.fib6_lookup       = eafnosupport_fib6_lookup,
+ 	.fib6_select_path  = eafnosupport_fib6_select_path,
+ 	.ip6_mtu_from_fib6 = eafnosupport_ip6_mtu_from_fib6,
+ 	.fib6_nh_init	   = eafnosupport_fib6_nh_init,
+ 	.ip6_del_rt	   = eafnosupport_ip6_del_rt,
++>>>>>>> 6c8991f41546 (net: ipv6_stub: use ip6_dst_lookup_flow instead of ip6_dst_lookup)
  };
  EXPORT_SYMBOL_GPL(ipv6_stub);
  
diff --cc net/ipv6/af_inet6.c
index fe70b1020043,d727c3b41495..000000000000
--- a/net/ipv6/af_inet6.c
+++ b/net/ipv6/af_inet6.c
@@@ -824,7 -940,24 +824,22 @@@ static struct pernet_operations inet6_n
  static const struct ipv6_stub ipv6_stub_impl = {
  	.ipv6_sock_mc_join = ipv6_sock_mc_join,
  	.ipv6_sock_mc_drop = ipv6_sock_mc_drop,
++<<<<<<< HEAD
 +	.ipv6_dst_lookup = ip6_dst_lookup,
++=======
+ 	.ipv6_dst_lookup_flow = ip6_dst_lookup_flow,
+ 	.ipv6_route_input  = ipv6_route_input,
+ 	.fib6_get_table	   = fib6_get_table,
+ 	.fib6_table_lookup = fib6_table_lookup,
+ 	.fib6_lookup       = fib6_lookup,
+ 	.fib6_select_path  = fib6_select_path,
+ 	.ip6_mtu_from_fib6 = ip6_mtu_from_fib6,
+ 	.fib6_nh_init	   = fib6_nh_init,
+ 	.fib6_nh_release   = fib6_nh_release,
+ 	.fib6_update_sernum = fib6_update_sernum_stub,
+ 	.fib6_rt_update	   = fib6_rt_update,
+ 	.ip6_del_rt	   = ip6_del_rt,
++>>>>>>> 6c8991f41546 (net: ipv6_stub: use ip6_dst_lookup_flow instead of ip6_dst_lookup)
  	.udpv6_encap_enable = udpv6_encap_enable,
  	.ndisc_send_na = ndisc_send_na,
  	.nd_tbl	= &nd_tbl,
* Unmerged path include/net/ipv6_stubs.h
* Unmerged path net/core/lwt_bpf.c
* Unmerged path net/mpls/af_mpls.c
* Unmerged path net/tipc/udp_media.c
diff --git a/drivers/infiniband/core/addr.c b/drivers/infiniband/core/addr.c
index dca955be7e73..bf7fcc52904c 100644
--- a/drivers/infiniband/core/addr.c
+++ b/drivers/infiniband/core/addr.c
@@ -419,16 +419,15 @@ static int addr6_resolve(struct sockaddr *src_sock,
 				(const struct sockaddr_in6 *)dst_sock;
 	struct flowi6 fl6;
 	struct dst_entry *dst;
-	int ret;
 
 	memset(&fl6, 0, sizeof fl6);
 	fl6.daddr = dst_in->sin6_addr;
 	fl6.saddr = src_in->sin6_addr;
 	fl6.flowi6_oif = addr->bound_dev_if;
 
-	ret = ipv6_stub->ipv6_dst_lookup(addr->net, NULL, &dst, &fl6);
-	if (ret < 0)
-		return ret;
+	dst = ipv6_stub->ipv6_dst_lookup_flow(addr->net, NULL, &fl6, NULL);
+	if (IS_ERR(dst))
+		return PTR_ERR(dst);
 
 	if (ipv6_addr_any(&src_in->sin6_addr))
 		src_in->sin6_addr = fl6.saddr;
diff --git a/drivers/infiniband/sw/rxe/rxe_net.c b/drivers/infiniband/sw/rxe/rxe_net.c
index 138accace6cd..8d2451362178 100644
--- a/drivers/infiniband/sw/rxe/rxe_net.c
+++ b/drivers/infiniband/sw/rxe/rxe_net.c
@@ -154,10 +154,12 @@ static struct dst_entry *rxe_find_route6(struct net_device *ndev,
 	memcpy(&fl6.daddr, daddr, sizeof(*daddr));
 	fl6.flowi6_proto = IPPROTO_UDP;
 
-	if (unlikely(ipv6_stub->ipv6_dst_lookup(sock_net(recv_sockets.sk6->sk),
-						recv_sockets.sk6->sk, &ndst, &fl6))) {
+	ndst = ipv6_stub->ipv6_dst_lookup_flow(sock_net(recv_sockets.sk6->sk),
+					       recv_sockets.sk6->sk, &fl6,
+					       NULL);
+	if (unlikely(IS_ERR(ndst))) {
 		pr_err_ratelimited("no route to %pI6\n", daddr);
-		goto put;
+		return NULL;
 	}
 
 	if (unlikely(ndst->error)) {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/tc_tun.c
diff --git a/drivers/net/geneve.c b/drivers/net/geneve.c
index 40967422e27e..682a01ad1ddf 100644
--- a/drivers/net/geneve.c
+++ b/drivers/net/geneve.c
@@ -854,7 +854,9 @@ static struct dst_entry *geneve_get_v6_dst(struct sk_buff *skb,
 		if (dst)
 			return dst;
 	}
-	if (ipv6_stub->ipv6_dst_lookup(geneve->net, gs6->sock->sk, &dst, fl6)) {
+	dst = ipv6_stub->ipv6_dst_lookup_flow(geneve->net, gs6->sock->sk, fl6,
+					      NULL);
+	if (IS_ERR(dst)) {
 		netdev_dbg(dev, "no route to %pI6\n", &fl6->daddr);
 		return ERR_PTR(-ENETUNREACH);
 	}
diff --git a/drivers/net/vxlan.c b/drivers/net/vxlan.c
index 63adcab3e6e2..c36f8e0f8c93 100644
--- a/drivers/net/vxlan.c
+++ b/drivers/net/vxlan.c
@@ -1908,7 +1908,6 @@ static struct dst_entry *vxlan6_get_route(struct vxlan_dev *vxlan,
 	bool use_cache = ip_tunnel_dst_cache_usable(skb, info);
 	struct dst_entry *ndst;
 	struct flowi6 fl6;
-	int err;
 
 	if (!sock6)
 		return ERR_PTR(-EIO);
@@ -1931,10 +1930,9 @@ static struct dst_entry *vxlan6_get_route(struct vxlan_dev *vxlan,
 	fl6.fl6_dport = dport;
 	fl6.fl6_sport = sport;
 
-	err = ipv6_stub->ipv6_dst_lookup(vxlan->net,
-					 sock6->sock->sk,
-					 &ndst, &fl6);
-	if (unlikely(err < 0)) {
+	ndst = ipv6_stub->ipv6_dst_lookup_flow(vxlan->net, sock6->sock->sk,
+					       &fl6, NULL);
+	if (unlikely(IS_ERR(ndst))) {
 		netdev_dbg(dev, "no route to %pI6\n", daddr);
 		return ERR_PTR(-ENETUNREACH);
 	}
* Unmerged path include/net/ipv6_stubs.h
* Unmerged path net/core/lwt_bpf.c
* Unmerged path net/ipv6/addrconf_core.c
* Unmerged path net/ipv6/af_inet6.c
* Unmerged path net/mpls/af_mpls.c
* Unmerged path net/tipc/udp_media.c
