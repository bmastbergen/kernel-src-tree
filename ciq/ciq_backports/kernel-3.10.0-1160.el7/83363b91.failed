oom: make sure that TIF_MEMDIE is set under task_lock

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
Rebuild_CHGLOG: - [mm] mm: oom: make sure that TIF_MEMDIE is set under task_lock (Rafael Aquini) [1261799]
Rebuild_FUZZ: 96.36%
commit-author Michal Hocko <mhocko@suse.cz>
commit 83363b917a2982dd509a5e2125e905b6873505a3
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/83363b91.failed

OOM killer tries to exclude tasks which do not have mm_struct associated
because killing such a task wouldn't help much.  The OOM victim gets
TIF_MEMDIE set to disable OOM killer while the current victim releases the
memory and then enables the OOM killer again by dropping the flag.

oom_kill_process is currently prone to a race condition when the OOM
victim is already exiting and TIF_MEMDIE is set after the task releases
its address space.  This might theoretically lead to OOM livelock if the
OOM victim blocks on an allocation later during exiting because it
wouldn't kill any other process and the exiting one won't be able to exit.
 The situation is highly unlikely because the OOM victim is expected to
release some memory which should help to sort out OOM situation.

Fix this by checking task->mm and setting TIF_MEMDIE flag under task_lock
which will serialize the OOM killer with exit_mm which sets task->mm to
NULL.  Setting the flag for current is not necessary because check and set
is not racy.

	Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
	Signed-off-by: Michal Hocko <mhocko@suse.cz>
	Cc: David Rientjes <rientjes@google.com>
	Cc: Oleg Nesterov <oleg@redhat.com>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit 83363b917a2982dd509a5e2125e905b6873505a3)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/oom_kill.c
diff --cc mm/oom_kill.c
index cb09e6224089,294493a7ae4b..000000000000
--- a/mm/oom_kill.c
+++ b/mm/oom_kill.c
@@@ -498,12 -495,11 +501,18 @@@ void oom_kill_process(struct task_struc
  
  	/* mm cannot safely be dereferenced after task_unlock(victim) */
  	mm = victim->mm;
++<<<<<<< HEAD
 +	pr_err("Killed process %d (%s), UID %d, total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\n",
 +		task_pid_nr(victim), victim->comm,
 +		task_uid(victim).val, K(victim->mm->total_vm),
++=======
+ 	set_tsk_thread_flag(victim, TIF_MEMDIE);
+ 	pr_err("Killed process %d (%s) total-vm:%lukB, anon-rss:%lukB, file-rss:%lukB\n",
+ 		task_pid_nr(victim), victim->comm, K(victim->mm->total_vm),
++>>>>>>> 83363b917a29 (oom: make sure that TIF_MEMDIE is set under task_lock)
  		K(get_mm_counter(victim->mm, MM_ANONPAGES)),
 -		K(get_mm_counter(victim->mm, MM_FILEPAGES)));
 +		K(get_mm_counter(victim->mm, MM_FILEPAGES)),
 +		K(get_mm_counter(victim->mm, MM_SHMEMPAGES)));
  	task_unlock(victim);
  
  	/*
* Unmerged path mm/oom_kill.c
