ext4: cleanup flag definitions for extent status tree

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Jan Kara <jack@suse.cz>
commit 624d0f1dd7c80d2bac4fc3066b2ff3947f890883
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/624d0f1d.failed

Currently flags for extent status tree are defined twice, once shifted
and once without a being shifted. Consolidate these definitions into one
place and make some computations automatic to make adding flags less
error prone. Compiler should be clever enough to figure out these are
constants and generate the same code.

	Signed-off-by: Jan Kara <jack@suse.cz>
	Signed-off-by: Theodore Ts'o <tytso@mit.edu>
(cherry picked from commit 624d0f1dd7c80d2bac4fc3066b2ff3947f890883)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ext4/extents_status.c
diff --cc fs/ext4/extents_status.c
index 3ef7f932e809,30596498ed0b..000000000000
--- a/fs/ext4/extents_status.c
+++ b/fs/ext4/extents_status.c
@@@ -1039,14 -1156,59 +1039,51 @@@ static int ext4_es_shrink(struct shrink
  	return ret;
  }
  
 -static int
 -ext4_es_seq_shrinker_info_release(struct inode *inode, struct file *file)
 +void ext4_es_register_shrinker(struct ext4_sb_info *sbi)
  {
++<<<<<<< HEAD
 +	INIT_LIST_HEAD(&sbi->s_es_lru);
 +	spin_lock_init(&sbi->s_es_lru_lock);
 +	sbi->s_es_last_sorted = 0;
 +	sbi->s_es_shrinker.shrink = ext4_es_shrink;
++=======
+ 	return seq_release(inode, file);
+ }
+ 
+ static const struct file_operations ext4_es_seq_shrinker_info_fops = {
+ 	.owner		= THIS_MODULE,
+ 	.open		= ext4_es_seq_shrinker_info_open,
+ 	.read		= seq_read,
+ 	.llseek		= seq_lseek,
+ 	.release	= ext4_es_seq_shrinker_info_release,
+ };
+ 
+ int ext4_es_register_shrinker(struct ext4_sb_info *sbi)
+ {
+ 	int err;
+ 
+ 	/* Make sure we have enough bits for physical block number */
+ 	BUILD_BUG_ON(ES_SHIFT < 48);
+ 	INIT_LIST_HEAD(&sbi->s_es_list);
+ 	sbi->s_es_nr_inode = 0;
+ 	spin_lock_init(&sbi->s_es_lock);
+ 	sbi->s_es_stats.es_stats_shrunk = 0;
+ 	sbi->s_es_stats.es_stats_cache_hits = 0;
+ 	sbi->s_es_stats.es_stats_cache_misses = 0;
+ 	sbi->s_es_stats.es_stats_scan_time = 0;
+ 	sbi->s_es_stats.es_stats_max_scan_time = 0;
+ 	err = percpu_counter_init(&sbi->s_es_stats.es_stats_all_cnt, 0, GFP_KERNEL);
+ 	if (err)
+ 		return err;
+ 	err = percpu_counter_init(&sbi->s_es_stats.es_stats_shk_cnt, 0, GFP_KERNEL);
+ 	if (err)
+ 		goto err1;
+ 
+ 	sbi->s_es_shrinker.scan_objects = ext4_es_scan;
+ 	sbi->s_es_shrinker.count_objects = ext4_es_count;
++>>>>>>> 624d0f1dd7c8 (ext4: cleanup flag definitions for extent status tree)
  	sbi->s_es_shrinker.seeks = DEFAULT_SEEKS;
 -	err = register_shrinker(&sbi->s_es_shrinker);
 -	if (err)
 -		goto err2;
 -
 -	if (sbi->s_proc)
 -		proc_create_data("es_shrinker_info", S_IRUGO, sbi->s_proc,
 -				 &ext4_es_seq_shrinker_info_fops, sbi);
 -
 -	return 0;
 -
 -err2:
 -	percpu_counter_destroy(&sbi->s_es_stats.es_stats_shk_cnt);
 -err1:
 -	percpu_counter_destroy(&sbi->s_es_stats.es_stats_all_cnt);
 -	return err;
 +	register_shrinker(&sbi->s_es_shrinker);
  }
  
  void ext4_es_unregister_shrinker(struct ext4_sb_info *sbi)
* Unmerged path fs/ext4/extents_status.c
diff --git a/fs/ext4/extents_status.h b/fs/ext4/extents_status.h
index f1b62a419920..4145e2284699 100644
--- a/fs/ext4/extents_status.h
+++ b/fs/ext4/extents_status.h
@@ -29,25 +29,21 @@
 /*
  * These flags live in the high bits of extent_status.es_pblk
  */
-#define ES_SHIFT	60
-
-#define EXTENT_STATUS_WRITTEN	(1 << 3)
-#define EXTENT_STATUS_UNWRITTEN (1 << 2)
-#define EXTENT_STATUS_DELAYED	(1 << 1)
-#define EXTENT_STATUS_HOLE	(1 << 0)
-
-#define EXTENT_STATUS_FLAGS	(EXTENT_STATUS_WRITTEN | \
-				 EXTENT_STATUS_UNWRITTEN | \
-				 EXTENT_STATUS_DELAYED | \
-				 EXTENT_STATUS_HOLE)
+enum {
+	ES_WRITTEN_B,
+	ES_UNWRITTEN_B,
+	ES_DELAYED_B,
+	ES_HOLE_B,
+	ES_FLAGS
+};
 
-#define ES_WRITTEN		(1ULL << 63)
-#define ES_UNWRITTEN		(1ULL << 62)
-#define ES_DELAYED		(1ULL << 61)
-#define ES_HOLE			(1ULL << 60)
+#define ES_SHIFT (sizeof(ext4_fsblk_t)*8 - ES_FLAGS)
+#define ES_MASK (~((ext4_fsblk_t)0) << ES_SHIFT)
 
-#define ES_MASK			(ES_WRITTEN | ES_UNWRITTEN | \
-				 ES_DELAYED | ES_HOLE)
+#define EXTENT_STATUS_WRITTEN	(1 << ES_WRITTEN_B)
+#define EXTENT_STATUS_UNWRITTEN (1 << ES_UNWRITTEN_B)
+#define EXTENT_STATUS_DELAYED	(1 << ES_DELAYED_B)
+#define EXTENT_STATUS_HOLE	(1 << ES_HOLE_B)
 
 struct ext4_sb_info;
 struct ext4_extent;
@@ -82,29 +78,29 @@ extern void ext4_es_find_delayed_extent_range(struct inode *inode,
 extern int ext4_es_lookup_extent(struct inode *inode, ext4_lblk_t lblk,
 				 struct extent_status *es);
 
+static inline unsigned int ext4_es_status(struct extent_status *es)
+{
+	return es->es_pblk >> ES_SHIFT;
+}
+
 static inline int ext4_es_is_written(struct extent_status *es)
 {
-	return (es->es_pblk & ES_WRITTEN) != 0;
+	return (ext4_es_status(es) & EXTENT_STATUS_WRITTEN) != 0;
 }
 
 static inline int ext4_es_is_unwritten(struct extent_status *es)
 {
-	return (es->es_pblk & ES_UNWRITTEN) != 0;
+	return (ext4_es_status(es) & EXTENT_STATUS_UNWRITTEN) != 0;
 }
 
 static inline int ext4_es_is_delayed(struct extent_status *es)
 {
-	return (es->es_pblk & ES_DELAYED) != 0;
+	return (ext4_es_status(es) & EXTENT_STATUS_DELAYED) != 0;
 }
 
 static inline int ext4_es_is_hole(struct extent_status *es)
 {
-	return (es->es_pblk & ES_HOLE) != 0;
-}
-
-static inline unsigned int ext4_es_status(struct extent_status *es)
-{
-	return es->es_pblk >> ES_SHIFT;
+	return (ext4_es_status(es) & EXTENT_STATUS_HOLE) != 0;
 }
 
 static inline ext4_fsblk_t ext4_es_pblock(struct extent_status *es)
@@ -124,18 +120,16 @@ static inline void ext4_es_store_pblock(struct extent_status *es,
 static inline void ext4_es_store_status(struct extent_status *es,
 					unsigned int status)
 {
-	es->es_pblk = (((ext4_fsblk_t)
-			(status & EXTENT_STATUS_FLAGS) << ES_SHIFT) |
-		       (es->es_pblk & ~ES_MASK));
+	es->es_pblk = (((ext4_fsblk_t)status << ES_SHIFT) & ES_MASK) |
+		      (es->es_pblk & ~ES_MASK);
 }
 
 static inline void ext4_es_store_pblock_status(struct extent_status *es,
 					       ext4_fsblk_t pb,
 					       unsigned int status)
 {
-	es->es_pblk = (((ext4_fsblk_t)
-			(status & EXTENT_STATUS_FLAGS) << ES_SHIFT) |
-		       (pb & ~ES_MASK));
+	es->es_pblk = (((ext4_fsblk_t)status << ES_SHIFT) & ES_MASK) |
+		      (pb & ~ES_MASK);
 }
 
 extern void ext4_es_register_shrinker(struct ext4_sb_info *sbi);
