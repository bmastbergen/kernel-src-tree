x86/platform/uv: Return UV Hubless System Type

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Mike Travis <mike.travis@hpe.com>
commit 0959f8256ada0431c1470d89e5a2811ff2305c88
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/0959f825.failed

Return the type of UV hubless system for UV specific code that depends
on that.  Add a function to convert UV system type to bit pattern needed
for is_uv_hubless().

	Signed-off-by: Mike Travis <mike.travis@hpe.com>
	Reviewed-by: Steve Wahl <steve.wahl@hpe.com>
	Reviewed-by: Dimitri Sivanich <dimitri.sivanich@hpe.com>
	Cc: Andrew Morton <akpm@linux-foundation.org>
	Cc: Borislav Petkov <bp@alien8.de>
	Cc: Christoph Hellwig <hch@infradead.org>
	Cc: H. Peter Anvin <hpa@zytor.com>
	Cc: Hedi Berriche <hedi.berriche@hpe.com>
	Cc: Justin Ernst <justin.ernst@hpe.com>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Russ Anderson <russ.anderson@hpe.com>
	Cc: Thomas Gleixner <tglx@linutronix.de>
Link: https://lkml.kernel.org/r/20190910145839.814880843@stormcage.eag.rdlabs.hpecorp.net
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit 0959f8256ada0431c1470d89e5a2811ff2305c88)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/include/asm/uv/uv.h
#	arch/x86/kernel/apic/x2apic_uv_x.c
diff --cc arch/x86/include/asm/uv/uv.h
index 1b03ada33714,792faab9df64..000000000000
--- a/arch/x86/include/asm/uv/uv.h
+++ b/arch/x86/include/asm/uv/uv.h
@@@ -7,10 -10,25 +7,24 @@@ struct cpumask
  struct mm_struct;
  
  #ifdef CONFIG_X86_UV
++<<<<<<< HEAD
++=======
+ #include <linux/efi.h>
+ 
+ static inline int uv(int uvtype)
+ {
+ 	/* uv(0) is "any" */
+ 	if (uvtype >= 0 && uvtype <= 30)
+ 		return 1 << uvtype;
+ 	return 1;
+ }
+ 
+ extern unsigned long uv_systab_phys;
++>>>>>>> 0959f8256ada (x86/platform/uv: Return UV Hubless System Type)
  
  extern enum uv_system_type get_uv_system_type(void);
 -static inline bool is_early_uv_system(void)
 -{
 -	return uv_systab_phys && uv_systab_phys != EFI_INVALID_TABLE_ADDR;
 -}
  extern int is_uv_system(void);
- extern int is_uv_hubless(void);
+ extern int is_uv_hubless(int uvtype);
  extern void uv_cpu_init(void);
  extern void uv_nmi_init(void);
  extern void uv_system_init(void);
@@@ -30,8 -38,9 +44,8 @@@ static inline int is_early_uv_system(vo
  #else	/* X86_UV */
  
  static inline enum uv_system_type get_uv_system_type(void) { return UV_NONE; }
 -static inline bool is_early_uv_system(void)	{ return 0; }
  static inline int is_uv_system(void)	{ return 0; }
- static inline int is_uv_hubless(void)	{ return 0; }
+ static inline int is_uv_hubless(int uv) { return 0; }
  static inline void uv_cpu_init(void)	{ }
  static inline void uv_system_init(void)	{ }
  static inline const struct cpumask *
diff --cc arch/x86/kernel/apic/x2apic_uv_x.c
index b9f18051b988,43fad6172873..000000000000
--- a/arch/x86/kernel/apic/x2apic_uv_x.c
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c
@@@ -34,24 -22,21 +34,33 @@@
  #include <asm/uv/bios.h>
  #include <asm/uv/uv.h>
  #include <asm/apic.h>
 +#include <asm/ipi.h>
 +#include <asm/smp.h>
 +#include <asm/x86_init.h>
 +#include <asm/emergency-restart.h>
 +#include <asm/nmi.h>
  
 -static DEFINE_PER_CPU(int, x2apic_extra_bits);
 +DEFINE_PER_CPU(int, x2apic_extra_bits);
  
++<<<<<<< HEAD
 +#define PR_DEVEL(fmt, args...)	pr_devel("%s: " fmt, __func__, args)
++=======
+ static enum uv_system_type	uv_system_type;
+ static int			uv_hubless_system;
+ static u64			gru_start_paddr, gru_end_paddr;
+ static u64			gru_dist_base, gru_first_node_paddr = -1LL, gru_last_node_paddr;
+ static u64			gru_dist_lmask, gru_dist_umask;
+ static union uvh_apicid		uvh_apicid;
++>>>>>>> 0959f8256ada (x86/platform/uv: Return UV Hubless System Type)
  
 -/* Unpack OEM/TABLE ID's to be NULL terminated strings */
 -static u8 oem_id[ACPI_OEM_ID_SIZE + 1];
 -static u8 oem_table_id[ACPI_OEM_TABLE_ID_SIZE + 1];
 +static enum uv_system_type uv_system_type;
 +static bool uv_hubless_system;
 +static u64 gru_start_paddr, gru_end_paddr;
 +static u64 gru_dist_base, gru_first_node_paddr = -1LL, gru_last_node_paddr;
 +static u64 gru_dist_lmask, gru_dist_umask;
 +static union uvh_apicid uvh_apicid;
  
 -/* Information derived from CPUID: */
 +/* info derived from CPUID */
  static struct {
  	unsigned int apicid_shift;
  	unsigned int apicid_mask;
@@@ -268,12 -264,24 +277,21 @@@ static int __init uv_acpi_madt_oem_chec
  	int pnodeid;
  	int uv_apic;
  
 -	uv_stringify(sizeof(oem_id), oem_id, _oem_id);
 -	uv_stringify(sizeof(oem_table_id), oem_table_id, _oem_table_id);
 -
  	if (strncmp(oem_id, "SGI", 3) != 0) {
- 		if (strncmp(oem_id, "NSGI", 4) == 0) {
- 			uv_hubless_system = true;
- 			pr_info("UV: OEM IDs %s/%s, HUBLESS\n",
- 				oem_id, oem_table_id);
- 		}
+ 		if (strncmp(oem_id, "NSGI", 4) != 0)
+ 			return 0;
+ 
+ 		/* UV4 Hubless, CH, (0x11:UV4+Any) */
+ 		if (strncmp(oem_id, "NSGI4", 5) == 0)
+ 			uv_hubless_system = 0x11;
+ 
+ 		/* UV3 Hubless, UV300/MC990X w/o hub (0x9:UV3+Any) */
+ 		else
+ 			uv_hubless_system = 0x9;
+ 
+ 		pr_info("UV: OEM IDs %s/%s, HUBLESS(0x%x)\n",
+ 			oem_id, oem_table_id, uv_hubless_system);
+ 
  		return 0;
  	}
  
* Unmerged path arch/x86/include/asm/uv/uv.h
* Unmerged path arch/x86/kernel/apic/x2apic_uv_x.c
