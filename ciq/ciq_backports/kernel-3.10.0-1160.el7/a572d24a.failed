scsi: target: iscsi: CHAP: add support for SHA1, SHA256 and SHA3-256

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Maurizio Lombardi <mlombard@redhat.com>
commit a572d24af4d16e70743feb0b4decb17aaae7ce43
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/a572d24a.failed

This patch modifies the chap_server_compute_hash() function to make it
agnostic to the choice of hash algorithm that is used.  It also adds
support to three new hash algorithms: SHA1, SHA256 and SHA3-256.

The chap_got_response() function has been removed because the digest type
validity is already checked by chap_server_open()

Link: https://lore.kernel.org/r/20191028123822.5864-2-mlombard@redhat.com
	Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
	Tested-by: Chris Leech <cleech@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit a572d24af4d16e70743feb0b4decb17aaae7ce43)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target_auth.c
diff --cc drivers/target/iscsi/iscsi_target_auth.c
index cc9294c1362f,b09f20842e40..000000000000
--- a/drivers/target/iscsi/iscsi_target_auth.c
+++ b/drivers/target/iscsi/iscsi_target_auth.c
@@@ -26,7 -18,23 +26,27 @@@
  #include "iscsi_target_nego.h"
  #include "iscsi_target_auth.h"
  
++<<<<<<< HEAD
 +static void chap_gen_challenge(
++=======
+ static char *chap_get_digest_name(const int digest_type)
+ {
+ 	switch (digest_type) {
+ 	case CHAP_DIGEST_MD5:
+ 		return "md5";
+ 	case CHAP_DIGEST_SHA1:
+ 		return "sha1";
+ 	case CHAP_DIGEST_SHA256:
+ 		return "sha256";
+ 	case CHAP_DIGEST_SHA3_256:
+ 		return "sha3-256";
+ 	default:
+ 		return NULL;
+ 	}
+ }
+ 
+ static int chap_gen_challenge(
++>>>>>>> a572d24af4d1 (scsi: target: iscsi: CHAP: add support for SHA1, SHA256 and SHA3-256)
  	struct iscsi_conn *conn,
  	int caller,
  	char *c_str,
@@@ -48,11 -59,26 +68,25 @@@
  
  	pr_debug("[%s] Sending CHAP_C=0x%s\n\n", (caller) ? "server" : "client",
  			challenge_asciihex);
 -	return 0;
  }
  
+ static int chap_test_algorithm(const char *name)
+ {
+ 	struct crypto_shash *tfm;
+ 
+ 	tfm = crypto_alloc_shash(name, 0, 0);
+ 	if (IS_ERR(tfm))
+ 		return -1;
+ 
+ 	crypto_free_shash(tfm);
+ 	return 0;
+ }
+ 
  static int chap_check_algorithm(const char *a_str)
  {
- 	char *tmp, *orig, *token;
+ 	char *tmp, *orig, *token, *digest_name;
+ 	long digest_type;
+ 	int r = CHAP_DIGEST_UNKNOWN;
  
  	tmp = kstrdup(a_str, GFP_KERNEL);
  	if (!tmp) {
@@@ -273,15 -340,15 +346,20 @@@ static int chap_server_compute_hash
  		goto out;
  	}
  
- 	bin2hex(response, server_digest, MD5_SIGNATURE_SIZE);
- 	pr_debug("[server] MD5 Server Digest: %s\n", response);
+ 	bin2hex(response, server_digest, chap->digest_size);
+ 	pr_debug("[server] %s Server Digest: %s\n", hash_name, response);
  
- 	if (memcmp(server_digest, client_digest, MD5_SIGNATURE_SIZE) != 0) {
- 		pr_debug("[server] MD5 Digests do not match!\n\n");
+ 	if (memcmp(server_digest, client_digest, chap->digest_size) != 0) {
+ 		pr_debug("[server] %s Digests do not match!\n\n", hash_name);
  		goto out;
  	} else
++<<<<<<< HEAD
 +		pr_debug("[server] MD5 Digests match, CHAP connetication"
 +				" successful.\n\n");
++=======
+ 		pr_debug("[server] %s Digests match, CHAP connection"
+ 				" successful.\n\n", hash_name);
++>>>>>>> a572d24af4d1 (scsi: target: iscsi: CHAP: add support for SHA1, SHA256 and SHA3-256)
  	/*
  	 * One way authentication has succeeded, return now if mutual
  	 * authentication is not enabled.
* Unmerged path drivers/target/iscsi/iscsi_target_auth.c
diff --git a/drivers/target/iscsi/iscsi_target_auth.h b/drivers/target/iscsi/iscsi_target_auth.h
index d22f7b96a06c..40f34615a43c 100644
--- a/drivers/target/iscsi/iscsi_target_auth.h
+++ b/drivers/target/iscsi/iscsi_target_auth.h
@@ -3,14 +3,19 @@
 
 #define CHAP_DIGEST_UNKNOWN	0
 #define CHAP_DIGEST_MD5		5
-#define CHAP_DIGEST_SHA		6
+#define CHAP_DIGEST_SHA1	6
+#define CHAP_DIGEST_SHA256	7
+#define CHAP_DIGEST_SHA3_256	8
 
 #define CHAP_CHALLENGE_LENGTH	16
 #define CHAP_CHALLENGE_STR_LEN	4096
-#define MAX_RESPONSE_LENGTH	64	/* sufficient for MD5 */
+#define MAX_RESPONSE_LENGTH	128	/* sufficient for SHA3 256 */
 #define	MAX_CHAP_N_SIZE		512
 
 #define MD5_SIGNATURE_SIZE	16	/* 16 bytes in a MD5 message digest */
+#define SHA1_SIGNATURE_SIZE	20	/* 20 bytes in a SHA1 message digest */
+#define SHA256_SIGNATURE_SIZE	32	/* 32 bytes in a SHA256 message digest */
+#define SHA3_256_SIGNATURE_SIZE	32	/* 32 bytes in a SHA3 256 message digest */
 
 #define CHAP_STAGE_CLIENT_A	1
 #define CHAP_STAGE_SERVER_AIC	2
@@ -22,9 +27,11 @@ extern u32 chap_main_loop(struct iscsi_conn *, struct iscsi_node_auth *, char *,
 				int *, int *);
 
 struct iscsi_chap {
-	unsigned char	digest_type;
 	unsigned char	id;
 	unsigned char	challenge[CHAP_CHALLENGE_LENGTH];
+	unsigned int	challenge_len;
+	unsigned char	*digest_name;
+	unsigned int	digest_size;
 	unsigned int	authenticate_target;
 	unsigned int	chap_state;
 } ____cacheline_aligned;
