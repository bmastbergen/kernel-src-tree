gfs2: Switch to list_{first,last}_entry

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Andreas Gruenbacher <agruenba@redhat.com>
commit 969183bc68bc27d637d6d29e81d71cf854d0ca61
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/969183bc.failed

Replace open-coded versions of list_first_entry and list_last_entry with those
functions.

	Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
	Signed-off-by: Bob Peterson <rpeterso@redhat.com>
(cherry picked from commit 969183bc68bc27d637d6d29e81d71cf854d0ca61)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/gfs2/glock.c
#	fs/gfs2/log.c
diff --cc fs/gfs2/glock.c
index 7443b515edca,29f9b6684b74..000000000000
--- a/fs/gfs2/glock.c
+++ b/fs/gfs2/glock.c
@@@ -1600,10 -1679,11 +1600,15 @@@ static void gfs2_scan_glock_lru(int nr
  	struct gfs2_glock *gl;
  	LIST_HEAD(skipped);
  	LIST_HEAD(dispose);
 -	long freed = 0;
  
  	spin_lock(&lru_lock);
++<<<<<<< HEAD
 +	while(nr && !list_empty(&lru_list)) {
 +		gl = list_entry(lru_list.next, struct gfs2_glock, gl_lru);
++=======
+ 	while ((nr-- >= 0) && !list_empty(&lru_list)) {
+ 		gl = list_first_entry(&lru_list, struct gfs2_glock, gl_lru);
++>>>>>>> 969183bc68bc (gfs2: Switch to list_{first,last}_entry)
  
  		/* Test for being demotable */
  		if (!test_bit(GLF_LOCK, &gl->gl_flags)) {
diff --cc fs/gfs2/log.c
index 412d469e8255,8729f5f3a98c..000000000000
--- a/fs/gfs2/log.c
+++ b/fs/gfs2/log.c
@@@ -504,12 -578,15 +504,23 @@@ static void gfs2_ordered_write(struct g
  	LIST_HEAD(written);
  
  	spin_lock(&sdp->sd_ordered_lock);
++<<<<<<< HEAD
 +	list_sort(NULL, &sdp->sd_log_le_ordered, &ip_cmp);
 +	while (!list_empty(&sdp->sd_log_le_ordered)) {
 +		ip = list_entry(sdp->sd_log_le_ordered.next, struct gfs2_inode, i_ordered);
++=======
+ 	list_sort(NULL, &sdp->sd_log_ordered, &ip_cmp);
+ 	while (!list_empty(&sdp->sd_log_ordered)) {
+ 		ip = list_first_entry(&sdp->sd_log_ordered, struct gfs2_inode, i_ordered);
+ 		if (ip->i_inode.i_mapping->nrpages == 0) {
+ 			test_and_clear_bit(GIF_ORDERED, &ip->i_flags);
+ 			list_del(&ip->i_ordered);
+ 			continue;
+ 		}
++>>>>>>> 969183bc68bc (gfs2: Switch to list_{first,last}_entry)
  		list_move(&ip->i_ordered, &written);
 +		if (ip->i_inode.i_mapping->nrpages == 0)
 +			continue;
  		spin_unlock(&sdp->sd_ordered_lock);
  		filemap_fdatawrite(ip->i_inode.i_mapping);
  		spin_lock(&sdp->sd_ordered_lock);
@@@ -523,8 -600,8 +534,13 @@@ static void gfs2_ordered_wait(struct gf
  	struct gfs2_inode *ip;
  
  	spin_lock(&sdp->sd_ordered_lock);
++<<<<<<< HEAD
 +	while (!list_empty(&sdp->sd_log_le_ordered)) {
 +		ip = list_entry(sdp->sd_log_le_ordered.next, struct gfs2_inode, i_ordered);
++=======
+ 	while (!list_empty(&sdp->sd_log_ordered)) {
+ 		ip = list_first_entry(&sdp->sd_log_ordered, struct gfs2_inode, i_ordered);
++>>>>>>> 969183bc68bc (gfs2: Switch to list_{first,last}_entry)
  		list_del(&ip->i_ordered);
  		WARN_ON(!test_and_clear_bit(GIF_ORDERED, &ip->i_flags));
  		if (ip->i_inode.i_mapping->nrpages == 0)
diff --git a/fs/gfs2/bmap.c b/fs/gfs2/bmap.c
index 1879d6dd89c5..c9253633e273 100644
--- a/fs/gfs2/bmap.c
+++ b/fs/gfs2/bmap.c
@@ -2226,7 +2226,7 @@ void gfs2_free_journal_extents(struct gfs2_jdesc *jd)
 	struct gfs2_journal_extent *jext;
 
 	while(!list_empty(&jd->extent_list)) {
-		jext = list_entry(jd->extent_list.next, struct gfs2_journal_extent, list);
+		jext = list_first_entry(&jd->extent_list, struct gfs2_journal_extent, list);
 		list_del(&jext->list);
 		kfree(jext);
 	}
@@ -2247,7 +2247,7 @@ static int gfs2_add_jextent(struct gfs2_jdesc *jd, u64 lblock, u64 dblock, u64 b
 	struct gfs2_journal_extent *jext;
 
 	if (!list_empty(&jd->extent_list)) {
-		jext = list_entry(jd->extent_list.prev, struct gfs2_journal_extent, list);
+		jext = list_last_entry(&jd->extent_list, struct gfs2_journal_extent, list);
 		if ((jext->dblock + jext->blocks) == dblock) {
 			jext->blocks += blocks;
 			return 0;
* Unmerged path fs/gfs2/glock.c
* Unmerged path fs/gfs2/log.c
diff --git a/fs/gfs2/lops.c b/fs/gfs2/lops.c
index 13eb06ebcf6c..7afba5b007bf 100644
--- a/fs/gfs2/lops.c
+++ b/fs/gfs2/lops.c
@@ -696,7 +696,7 @@ static void buf_lo_after_commit(struct gfs2_sbd *sdp, struct gfs2_trans *tr)
 
 	head = &tr->tr_buf;
 	while (!list_empty(head)) {
-		bd = list_entry(head->next, struct gfs2_bufdata, bd_list);
+		bd = list_first_entry(head, struct gfs2_bufdata, bd_list);
 		list_del_init(&bd->bd_list);
 		gfs2_unpin(sdp, bd->bd_bh, tr);
 	}
@@ -826,7 +826,7 @@ static void revoke_lo_after_commit(struct gfs2_sbd *sdp, struct gfs2_trans *tr)
 	struct gfs2_glock *gl;
 
 	while (!list_empty(head)) {
-		bd = list_entry(head->next, struct gfs2_bufdata, bd_list);
+		bd = list_first_entry(head, struct gfs2_bufdata, bd_list);
 		list_del_init(&bd->bd_list);
 		gl = bd->bd_gl;
 		atomic_dec(&gl->gl_revokes);
@@ -1006,7 +1006,7 @@ static void databuf_lo_after_commit(struct gfs2_sbd *sdp, struct gfs2_trans *tr)
 
 	head = &tr->tr_databuf;
 	while (!list_empty(head)) {
-		bd = list_entry(head->next, struct gfs2_bufdata, bd_list);
+		bd = list_first_entry(head, struct gfs2_bufdata, bd_list);
 		list_del_init(&bd->bd_list);
 		gfs2_unpin(sdp, bd->bd_bh, tr);
 	}
diff --git a/fs/gfs2/quota.c b/fs/gfs2/quota.c
index 59f8789aa118..2474e2a1544e 100644
--- a/fs/gfs2/quota.c
+++ b/fs/gfs2/quota.c
@@ -116,7 +116,7 @@ static void gfs2_qd_dispose(struct list_head *list)
 	struct gfs2_sbd *sdp;
 
 	while (!list_empty(list)) {
-		qd = list_entry(list->next, struct gfs2_quota_data, qd_lru);
+		qd = list_first_entry(list, struct gfs2_quota_data, qd_lru);
 		sdp = qd->qd_gl->gl_name.ln_sbd;
 
 		list_del(&qd->qd_lru);
@@ -1439,7 +1439,7 @@ void gfs2_quota_cleanup(struct gfs2_sbd *sdp)
 
 	spin_lock(&qd_lock);
 	while (!list_empty(head)) {
-		qd = list_entry(head->prev, struct gfs2_quota_data, qd_list);
+		qd = list_last_entry(head, struct gfs2_quota_data, qd_list);
 
 		list_del(&qd->qd_list);
 
@@ -1507,7 +1507,7 @@ static void quotad_check_trunc_list(struct gfs2_sbd *sdp)
 		ip = NULL;
 		spin_lock(&sdp->sd_trunc_lock);
 		if (!list_empty(&sdp->sd_trunc_list)) {
-			ip = list_entry(sdp->sd_trunc_list.next,
+			ip = list_first_entry(&sdp->sd_trunc_list,
 					struct gfs2_inode, i_trunc_list);
 			list_del_init(&ip->i_trunc_list);
 		}
diff --git a/fs/gfs2/recovery.c b/fs/gfs2/recovery.c
index 05c02c30db0e..d5b191c2263a 100644
--- a/fs/gfs2/recovery.c
+++ b/fs/gfs2/recovery.c
@@ -112,7 +112,7 @@ void gfs2_revoke_clean(struct gfs2_jdesc *jd)
 	struct gfs2_revoke_replay *rr;
 
 	while (!list_empty(head)) {
-		rr = list_entry(head->next, struct gfs2_revoke_replay, rr_list);
+		rr = list_first_entry(head, struct gfs2_revoke_replay, rr_list);
 		list_del(&rr->rr_list);
 		kfree(rr);
 	}
diff --git a/fs/gfs2/super.c b/fs/gfs2/super.c
index 6327156ef20f..2840603b41f9 100644
--- a/fs/gfs2/super.c
+++ b/fs/gfs2/super.c
@@ -316,7 +316,7 @@ void gfs2_jindex_free(struct gfs2_sbd *sdp)
 	spin_unlock(&sdp->sd_jindex_spin);
 
 	while (!list_empty(&list)) {
-		jd = list_entry(list.next, struct gfs2_jdesc, jd_list);
+		jd = list_first_entry(&list, struct gfs2_jdesc, jd_list);
 		gfs2_free_journal_extents(jd);
 		list_del(&jd->jd_list);
 		iput(jd->jd_inode);
@@ -693,7 +693,7 @@ static int gfs2_lock_fs_check_clean(struct gfs2_sbd *sdp,
 
 out:
 	while (!list_empty(&list)) {
-		lfcc = list_entry(list.next, struct lfcc, list);
+		lfcc = list_first_entry(&list, struct lfcc, list);
 		list_del(&lfcc->list);
 		gfs2_glock_dq_uninit(&lfcc->gh);
 		kfree(lfcc);
