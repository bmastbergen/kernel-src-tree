hv_netvsc: Sync offloading features to VF NIC

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Haiyang Zhang <haiyangz@microsoft.com>
commit 68622d071e555e1528f3e7807f30f73311c1acae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/68622d07.failed

VF NIC may go down then come up during host servicing events. This
causes the VF NIC offloading feature settings to roll back to the
defaults. This patch can synchronize features from synthetic NIC to
the VF NIC during ndo_set_features (ethtool -K),
and netvsc_register_vf when VF comes back after host events.

	Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
	Cc: Mark Bloch <markb@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 68622d071e555e1528f3e7807f30f73311c1acae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/hyperv/netvsc_drv.c
diff --cc drivers/net/hyperv/netvsc_drv.c
index e00e04dec2a4,39dddcd8b3cb..000000000000
--- a/drivers/net/hyperv/netvsc_drv.c
+++ b/drivers/net/hyperv/netvsc_drv.c
@@@ -1708,6 -1779,47 +1708,50 @@@ out
  	return ret;
  }
  
++<<<<<<< HEAD
++=======
+ static int netvsc_set_features(struct net_device *ndev,
+ 			       netdev_features_t features)
+ {
+ 	netdev_features_t change = features ^ ndev->features;
+ 	struct net_device_context *ndevctx = netdev_priv(ndev);
+ 	struct netvsc_device *nvdev = rtnl_dereference(ndevctx->nvdev);
+ 	struct net_device *vf_netdev = rtnl_dereference(ndevctx->vf_netdev);
+ 	struct ndis_offload_params offloads;
+ 	int ret = 0;
+ 
+ 	if (!nvdev || nvdev->destroy)
+ 		return -ENODEV;
+ 
+ 	if (!(change & NETIF_F_LRO))
+ 		goto syncvf;
+ 
+ 	memset(&offloads, 0, sizeof(struct ndis_offload_params));
+ 
+ 	if (features & NETIF_F_LRO) {
+ 		offloads.rsc_ip_v4 = NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED;
+ 		offloads.rsc_ip_v6 = NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED;
+ 	} else {
+ 		offloads.rsc_ip_v4 = NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED;
+ 		offloads.rsc_ip_v6 = NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED;
+ 	}
+ 
+ 	ret = rndis_filter_set_offload_params(ndev, nvdev, &offloads);
+ 
+ 	if (ret)
+ 		features ^= NETIF_F_LRO;
+ 
+ syncvf:
+ 	if (!vf_netdev)
+ 		return ret;
+ 
+ 	vf_netdev->wanted_features = features;
+ 	netdev_update_features(vf_netdev);
+ 
+ 	return ret;
+ }
+ 
++>>>>>>> 68622d071e55 (hv_netvsc: Sync offloading features to VF NIC)
  static u32 netvsc_get_msglevel(struct net_device *ndev)
  {
  	struct net_device_context *ndev_ctx = netdev_priv(ndev);
* Unmerged path drivers/net/hyperv/netvsc_drv.c
