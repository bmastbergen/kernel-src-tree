tcp: make tcp_space() aware of socket backlog

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Eric Dumazet <edumazet@google.com>
commit 85bdf7db5b53cdcc7a901db12bcb3d0063e3866d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/85bdf7db.failed

Jean-Louis Dupond reported poor iscsi TCP receive performance
that we tracked to backlog drops.

Apparently we fail to send window updates reflecting the
fact that we are under stress.

Note that we might lack a proper window increase when
backlog is fully processed, since __release_sock() clears
sk->sk_backlog.len _after_ all skbs have been processed.

This should not matter in practice. If we had a significant
load through socket backlog, we are in a dangerous
situation.

	Reported-by: Jean-Louis Dupond <jean-louis@dupond.be>
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Acked-by: Neal Cardwell <ncardwell@google.com>
	Acked-by: Yuchung Cheng <ycheng@google.com>
	Tested-by: Jean-Louis Dupond<jean-louis@dupond.be>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 85bdf7db5b53cdcc7a901db12bcb3d0063e3866d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/net/tcp.h
diff --cc include/net/tcp.h
index 913c5962be73,3b522259da7d..000000000000
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@@ -1106,19 -1356,21 +1106,23 @@@ void tcp_select_initial_window(int __sp
  			       __u32 *window_clamp, int wscale_ok,
  			       __u8 *rcv_wscale, __u32 init_rcv_wnd);
  
 -static inline int tcp_win_from_space(const struct sock *sk, int space)
 +static inline int tcp_win_from_space(int space)
  {
 -	int tcp_adv_win_scale = sock_net(sk)->ipv4.sysctl_tcp_adv_win_scale;
 -
 -	return tcp_adv_win_scale <= 0 ?
 -		(space>>(-tcp_adv_win_scale)) :
 -		space - (space>>tcp_adv_win_scale);
 +	return sysctl_tcp_adv_win_scale<=0 ?
 +		(space>>(-sysctl_tcp_adv_win_scale)) :
 +		space - (space>>sysctl_tcp_adv_win_scale);
  }
  
 -/* Note: caller must be prepared to deal with negative returns */
 +/* Note: caller must be prepared to deal with negative returns */ 
  static inline int tcp_space(const struct sock *sk)
  {
++<<<<<<< HEAD
 +	return tcp_win_from_space(sk->sk_rcvbuf -
++=======
+ 	return tcp_win_from_space(sk, sk->sk_rcvbuf - sk->sk_backlog.len -
++>>>>>>> 85bdf7db5b53 (tcp: make tcp_space() aware of socket backlog)
  				  atomic_read(&sk->sk_rmem_alloc));
 -}
 +} 
  
  static inline int tcp_full_space(const struct sock *sk)
  {
* Unmerged path include/net/tcp.h
