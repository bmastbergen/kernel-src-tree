scsi: megaraid_sas: Limit device queue depth to controller queue depth

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Kashyap Desai <kashyap.desai@broadcom.com>
commit 6c205a66d65d031e8bf54cf0f4586258ca09396a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/6c205a66.failed

The driver currently assigns a pre-defined queue depth when the
firmware-provided device queue depth is greater than the controller queue
depth.

Use the controller queue depth if the reported target queue depth is too
large.

Link: https://lore.kernel.org/r/20200508083838.22778-2-chandrakanth.patil@broadcom.com
	Signed-off-by: Kashyap Desai <kashyap.desai@broadcom.com>
	Signed-off-by: Chandrakanth Patil <chandrakanth.patil@broadcom.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 6c205a66d65d031e8bf54cf0f4586258ca09396a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/megaraid/megaraid_sas_base.c
diff --cc drivers/scsi/megaraid/megaraid_sas_base.c
index 5e11ab8b0ce1,00668335c2af..000000000000
--- a/drivers/scsi/megaraid/megaraid_sas_base.c
+++ b/drivers/scsi/megaraid/megaraid_sas_base.c
@@@ -1994,15 -1982,47 +1994,22 @@@ static void megasas_set_static_target_p
  
  	if (is_target_prop) {
  		tgt_device_qd = le32_to_cpu(instance->tgt_prop->device_qdepth);
++<<<<<<< HEAD
 +		if (tgt_device_qd &&
 +		    (tgt_device_qd <= instance->host->can_queue))
 +			device_qd = tgt_device_qd;
++=======
+ 		if (tgt_device_qd)
+ 			device_qd = min(instance->host->can_queue,
+ 					(int)tgt_device_qd);
+ 	}
++>>>>>>> 6c205a66d65d (scsi: megaraid_sas: Limit device queue depth to controller queue depth)
  
 -	if (instance->enable_sdev_max_qd && interface_type != UNKNOWN_DRIVE)
 -		device_qd = instance->host->can_queue;
 -
 -	scsi_change_queue_depth(sdev, device_qd);
 -}
 -
 -/*
 - * megasas_set_static_target_properties -
 - * Device property set by driver are static and it is not required to be
 - * updated after OCR.
 - *
 - * set io timeout
 - * set device queue depth
 - * set nvme device properties. see - megasas_set_nvme_device_properties
 - *
 - * @sdev:				scsi device
 - * @is_target_prop			true, if fw provided target properties.
 - */
 -static void megasas_set_static_target_properties(struct scsi_device *sdev,
 -						 bool is_target_prop)
 -{
 -	u32 max_io_size_kb = MR_DEFAULT_NVME_MDTS_KB;
 -	struct megasas_instance *instance;
 -
 -	instance = megasas_lookup_instance(sdev->host->host_no);
 -
 -	/*
 -	 * The RAID firmware may require extended timeouts.
 -	 */
 -	blk_queue_rq_timeout(sdev->request_queue, scmd_timeout * HZ);
 -
 -	/* max_io_size_kb will be set to non zero for
 -	 * nvme based vd and syspd.
 -	 */
 -	if (is_target_prop)
 +		/* max_io_size_kb will be set to non zero for
 +		 * nvme based vd and syspd.
 +		 */
  		max_io_size_kb = le32_to_cpu(instance->tgt_prop->max_io_size_kb);
 +	}
  
  	if (instance->nvme_page_size && max_io_size_kb)
  		megasas_set_nvme_device_properties(sdev, (max_io_size_kb << 10));
* Unmerged path drivers/scsi/megaraid/megaraid_sas_base.c
