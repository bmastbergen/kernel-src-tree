x86/mce: Do not log spurious corrected mce errors

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Prarit Bhargava <prarit@redhat.com>
commit 2976908e4198aa02fc3f76802358f69396267189
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/2976908e.failed

A user has reported that they are seeing spurious corrected errors on
their hardware.

Intel Errata HSD131, HSM142, HSW131, and BDM48 report that "spurious
corrected errors may be logged in the IA32_MC0_STATUS register with
the valid field (bit 63) set, the uncorrected error field (bit 61) not
set, a Model Specific Error Code (bits [31:16]) of 0x000F, and an MCA
Error Code (bits [15:0]) of 0x0005." The Errata PDFs are linked in the
bugzilla below.

Block these spurious errors from the console and logs.

 [ bp: Move the intel_filter_mce() header declarations into the already
   existing CONFIG_X86_MCE_INTEL ifdeffery. ]

Co-developed-by: Alexander Krupp <centos@akr.yagii.de>
	Signed-off-by: Alexander Krupp <centos@akr.yagii.de>
	Signed-off-by: Prarit Bhargava <prarit@redhat.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://bugzilla.kernel.org/show_bug.cgi?id=206587
Link: https://lkml.kernel.org/r/20200219131611.36816-1-prarit@redhat.com
(cherry picked from commit 2976908e4198aa02fc3f76802358f69396267189)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kernel/cpu/mce/internal.h
#	arch/x86/kernel/cpu/mcheck/mce.c
diff --cc arch/x86/kernel/cpu/mcheck/mce.c
index 0cda901b18f6,fe3983d551cc..000000000000
--- a/arch/x86/kernel/cpu/mcheck/mce.c
+++ b/arch/x86/kernel/cpu/mcheck/mce.c
@@@ -1765,11 -1867,20 +1765,26 @@@ static void mce_start_timer(unsigned in
  
  static void __mcheck_cpu_init_timer(void)
  {
 -	struct timer_list *t = this_cpu_ptr(&mce_timer);
 +	struct timer_list *t = &__get_cpu_var(mce_timer);
 +	unsigned int cpu = smp_processor_id();
  
++<<<<<<< HEAD:arch/x86/kernel/cpu/mcheck/mce.c
 +	setup_timer(t, mce_timer_fn, cpu);
 +	mce_start_timer(cpu, t);
++=======
+ 	timer_setup(t, mce_timer_fn, TIMER_PINNED);
+ 	mce_start_timer(t);
+ }
+ 
+ bool filter_mce(struct mce *m)
+ {
+ 	if (boot_cpu_data.x86_vendor == X86_VENDOR_AMD)
+ 		return amd_filter_mce(m);
+ 	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL)
+ 		return intel_filter_mce(m);
+ 
+ 	return false;
++>>>>>>> 2976908e4198 (x86/mce: Do not log spurious corrected mce errors):arch/x86/kernel/cpu/mce/core.c
  }
  
  /* Handle unconfigured int18 (should never happen) */
* Unmerged path arch/x86/kernel/cpu/mce/internal.h
* Unmerged path arch/x86/kernel/cpu/mce/internal.h
* Unmerged path arch/x86/kernel/cpu/mcheck/mce.c
diff --git a/arch/x86/kernel/cpu/mcheck/mce_intel.c b/arch/x86/kernel/cpu/mcheck/mce_intel.c
index ce03639dff02..736cf649698b 100644
--- a/arch/x86/kernel/cpu/mcheck/mce_intel.c
+++ b/arch/x86/kernel/cpu/mcheck/mce_intel.c
@@ -515,3 +515,20 @@ void mce_intel_feature_clear(struct cpuinfo_x86 *c)
 {
 	intel_clear_lmce();
 }
+
+bool intel_filter_mce(struct mce *m)
+{
+	struct cpuinfo_x86 *c = &boot_cpu_data;
+
+	/* MCE errata HSD131, HSM142, HSW131, BDM48, and HSM142 */
+	if ((c->x86 == 6) &&
+	    ((c->x86_model == INTEL_FAM6_HASWELL) ||
+	     (c->x86_model == INTEL_FAM6_HASWELL_L) ||
+	     (c->x86_model == INTEL_FAM6_BROADWELL) ||
+	     (c->x86_model == INTEL_FAM6_HASWELL_G)) &&
+	    (m->bank == 0) &&
+	    ((m->status & 0xa0000000ffffffff) == 0x80000000000f0005))
+		return true;
+
+	return false;
+}
