KVM: x86: Allow suppressing prints on RDMSR/WRMSR of unhandled MSRs

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Eyal Moscovici <eyal.moscovici@oracle.com>
commit fab0aa3b776f0a3af1db1f50e04f1884015f9082
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/fab0aa3b.failed

Some guests use these unhandled MSRs very frequently.
This cause dmesg to be populated with lots of aggregated messages on
usage of ignored MSRs. As ignore_msrs=true means that the user is
well-aware his guest use ignored MSRs, allow to also disable the
prints on their usage.

An example of such guest is ESXi which tends to access a lot to MSR
0x34 (MSR_SMI_COUNT) very frequently.

In addition, we have observed this to cause unnecessary delays to
guest execution. Such an example is ESXi which experience networking
delays in it's guests (L2 guests) because of these prints (even when
prints are rate-limited). This can easily be reproduced by pinging
from one L2 guest to another.  Once in a while, a peak in ping RTT
will be observed. Removing these unhandled MSR prints solves the
issue.

Because these prints can help diagnose issues with guests,
this commit only suppress them by a module parameter instead of
removing them from code entirely.

	Signed-off-by: Eyal Moscovici <eyal.moscovici@oracle.com>
	Reviewed-by: Liran Alon <liran.alon@oracle.com>
	Reviewed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
	Signed-off-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
	Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
[Changed suppress_ignore_msrs_prints to report_ignored_msrs - Radim]
	Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
(cherry picked from commit fab0aa3b776f0a3af1db1f50e04f1884015f9082)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index 8137675c477b,0c5b141927b8..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -2428,7 -2328,9 +2431,13 @@@ int kvm_set_msr_common(struct kvm_vcpu 
  		/* Drop writes to this legacy MSR -- see rdmsr
  		 * counterpart for further detail.
  		 */
++<<<<<<< HEAD
 +		vcpu_unimpl(vcpu, "ignored wrmsr: 0x%x data %llx\n", msr, data);
++=======
+ 		if (report_ignored_msrs)
+ 			vcpu_unimpl(vcpu, "ignored wrmsr: 0x%x data 0x%llx\n",
+ 				msr, data);
++>>>>>>> fab0aa3b776f (KVM: x86: Allow suppressing prints on RDMSR/WRMSR of unhandled MSRs)
  		break;
  	case MSR_AMD64_OSVW_ID_LENGTH:
  		if (!guest_cpuid_has(vcpu, X86_FEATURE_OSVW))
@@@ -2450,8 -2367,10 +2459,15 @@@
  				    msr, data);
  			return 1;
  		} else {
++<<<<<<< HEAD
 +			vcpu_unimpl(vcpu, "ignored wrmsr: 0x%x data %llx\n",
 +				    msr, data);
++=======
+ 			if (report_ignored_msrs)
+ 				vcpu_unimpl(vcpu,
+ 					"ignored wrmsr: 0x%x data 0x%llx\n",
+ 					msr, data);
++>>>>>>> fab0aa3b776f (KVM: x86: Allow suppressing prints on RDMSR/WRMSR of unhandled MSRs)
  			break;
  		}
  	}
* Unmerged path arch/x86/kvm/x86.c
