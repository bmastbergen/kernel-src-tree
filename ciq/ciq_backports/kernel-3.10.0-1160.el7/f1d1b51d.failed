ceph: make getxattr_cb return ssize_t

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
commit-author Jeff Layton <jlayton@kernel.org>
commit f1d1b51deabbd1e7b8c24883145fbf784784d250
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/f1d1b51d.failed

The getxattr_cb functions return size_t, which is unsigned and then
cast that value to int and then ssize_t before returning it. While all
of this works, it relies on implicit casting rules for signed/unsigned
conversions.

Change getxattr_cb to return ssize_t to better conform with what the
caller actually wants. Also, remove some suspicious casts.

	Signed-off-by: Jeff Layton <jlayton@kernel.org>
	Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
	Acked-by: Ilya Dryomov <idryomov@gmail.com>
	Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
(cherry picked from commit f1d1b51deabbd1e7b8c24883145fbf784784d250)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/ceph/xattr.c
diff --cc fs/ceph/xattr.c
index f32fb0d1b484,e90e19e9660b..000000000000
--- a/fs/ceph/xattr.c
+++ b/fs/ceph/xattr.c
@@@ -216,11 -205,23 +216,28 @@@ static ssize_t ceph_vxattrcb_dir_rbytes
  	return snprintf(val, size, "%lld", ci->i_rbytes);
  }
  
- static size_t ceph_vxattrcb_dir_rctime(struct ceph_inode_info *ci, char *val,
- 				       size_t size)
+ static ssize_t ceph_vxattrcb_dir_rctime(struct ceph_inode_info *ci, char *val,
+ 					size_t size)
  {
++<<<<<<< HEAD
 +	return snprintf(val, size, "%ld.09%ld", (long)ci->i_rctime.tv_sec,
 +			(long)ci->i_rctime.tv_nsec);
++=======
+ 	return snprintf(val, size, "%lld.%09ld", ci->i_rctime.tv_sec,
+ 			ci->i_rctime.tv_nsec);
+ }
+ 
+ /* dir pin */
+ static bool ceph_vxattrcb_dir_pin_exists(struct ceph_inode_info *ci)
+ {
+ 	return ci->i_dir_pin != -ENODATA;
+ }
+ 
+ static ssize_t ceph_vxattrcb_dir_pin(struct ceph_inode_info *ci, char *val,
+ 				     size_t size)
+ {
+ 	return snprintf(val, size, "%d", (int)ci->i_dir_pin);
++>>>>>>> f1d1b51deabb (ceph: make getxattr_cb return ssize_t)
  }
  
  /* quotas */
@@@ -257,6 -257,19 +274,22 @@@ static ssize_t ceph_vxattrcb_quota_max_
  	return snprintf(val, size, "%llu", ci->i_max_files);
  }
  
++<<<<<<< HEAD
++=======
+ /* snapshots */
+ static bool ceph_vxattrcb_snap_btime_exists(struct ceph_inode_info *ci)
+ {
+ 	return (ci->i_snap_btime.tv_sec != 0 || ci->i_snap_btime.tv_nsec != 0);
+ }
+ 
+ static ssize_t ceph_vxattrcb_snap_btime(struct ceph_inode_info *ci, char *val,
+ 					size_t size)
+ {
+ 	return snprintf(val, size, "%lld.%09ld", ci->i_snap_btime.tv_sec,
+ 			ci->i_snap_btime.tv_nsec);
+ }
+ 
++>>>>>>> f1d1b51deabb (ceph: make getxattr_cb return ssize_t)
  #define CEPH_XATTR_NAME(_type, _name)	XATTR_CEPH_PREFIX #_type "." #_name
  #define CEPH_XATTR_NAME2(_type, _name, _name2)	\
  	XATTR_CEPH_PREFIX #_type "." #_name "." #_name2
@@@ -811,11 -791,8 +844,11 @@@ ssize_t __ceph_getxattr(struct inode *i
  	struct ceph_inode_xattr *xattr;
  	struct ceph_vxattr *vxattr = NULL;
  	int req_mask;
- 	int err;
+ 	ssize_t err;
  
 +	if (!ceph_is_valid_xattr(name))
 +		return -ENODATA;
 +
  	/* let's see if a virtual xattr was requested */
  	vxattr = ceph_match_vxattr(inode, name);
  	if (vxattr) {
* Unmerged path fs/ceph/xattr.c
