scsi: target: iscsi: rename some variables to avoid confusion.

jira LE-1907
Rebuild_History Non-Buildable kernel-3.10.0-1160.el7
Rebuild_CHGLOG: - [target] scsi: target: iscsi: rename some variables to avoid confusion (Maurizio Lombardi) [1806966]
Rebuild_FUZZ: 99.19%
commit-author Maurizio Lombardi <mlombard@redhat.com>
commit f9fab3d9860050ed69b7cee348a449a7853a3259
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-3.10.0-1160.el7/f9fab3d9.failed

This patch renames some variables in chap_server_compute_hash() to make it
harder to confuse the initiator's challenge with the target's challenge
when the mutual chap authentication is used.

Link: https://lore.kernel.org/r/20191017131037.9903-4-mlombard@redhat.com
	Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit f9fab3d9860050ed69b7cee348a449a7853a3259)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/target/iscsi/iscsi_target_auth.c
diff --cc drivers/target/iscsi/iscsi_target_auth.c
index cc9294c1362f,0e54627d9aa8..000000000000
--- a/drivers/target/iscsi/iscsi_target_auth.c
+++ b/drivers/target/iscsi/iscsi_target_auth.c
@@@ -156,29 -214,50 +156,39 @@@ static int chap_server_compute_md5
  {
  	unsigned long id;
  	unsigned char id_as_uchar;
++<<<<<<< HEAD
 +	unsigned char digest[MD5_SIGNATURE_SIZE];
 +	unsigned char type, response[MD5_SIGNATURE_SIZE * 2 + 2];
 +	unsigned char identifier[10], *challenge = NULL;
 +	unsigned char *challenge_binhex = NULL;
 +	unsigned char client_digest[MD5_SIGNATURE_SIZE];
 +	unsigned char server_digest[MD5_SIGNATURE_SIZE];
++=======
+ 	unsigned char type;
+ 	unsigned char identifier[10], *initiatorchg = NULL;
+ 	unsigned char *initiatorchg_binhex = NULL;
+ 	unsigned char *digest = NULL;
+ 	unsigned char *response = NULL;
+ 	unsigned char *client_digest = NULL;
+ 	unsigned char *server_digest = NULL;
++>>>>>>> f9fab3d98600 (scsi: target: iscsi: rename some variables to avoid confusion.)
  	unsigned char chap_n[MAX_CHAP_N_SIZE], chap_r[MAX_RESPONSE_LENGTH];
  	size_t compare_len;
  	struct iscsi_chap *chap = conn->auth_protocol;
  	struct crypto_shash *tfm = NULL;
  	struct shash_desc *desc = NULL;
- 	int auth_ret = -1, ret, challenge_len;
+ 	int auth_ret = -1, ret, initiatorchg_len;
  
 -	digest = kzalloc(chap->digest_size, GFP_KERNEL);
 -	if (!digest) {
 -		pr_err("Unable to allocate the digest buffer\n");
 -		goto out;
 -	}
 -
 -	response = kzalloc(chap->digest_size * 2 + 2, GFP_KERNEL);
 -	if (!response) {
 -		pr_err("Unable to allocate the response buffer\n");
 -		goto out;
 -	}
 -
 -	client_digest = kzalloc(chap->digest_size, GFP_KERNEL);
 -	if (!client_digest) {
 -		pr_err("Unable to allocate the client_digest buffer\n");
 -		goto out;
 -	}
 -
 -	server_digest = kzalloc(chap->digest_size, GFP_KERNEL);
 -	if (!server_digest) {
 -		pr_err("Unable to allocate the server_digest buffer\n");
 -		goto out;
 -	}
 -
  	memset(identifier, 0, 10);
  	memset(chap_n, 0, MAX_CHAP_N_SIZE);
  	memset(chap_r, 0, MAX_RESPONSE_LENGTH);
 +	memset(digest, 0, MD5_SIGNATURE_SIZE);
 +	memset(response, 0, MD5_SIGNATURE_SIZE * 2 + 2);
 +	memset(client_digest, 0, MD5_SIGNATURE_SIZE);
 +	memset(server_digest, 0, MD5_SIGNATURE_SIZE);
  
- 	challenge = kzalloc(CHAP_CHALLENGE_STR_LEN, GFP_KERNEL);
- 	if (!challenge) {
+ 	initiatorchg = kzalloc(CHAP_CHALLENGE_STR_LEN, GFP_KERNEL);
+ 	if (!initiatorchg) {
  		pr_err("Unable to allocate challenge buffer\n");
  		goto out;
  	}
@@@ -347,7 -427,9 +357,13 @@@
  	 * initiator must not match the original CHAP_C generated by
  	 * the target.
  	 */
++<<<<<<< HEAD
 +	if (!memcmp(challenge_binhex, chap->challenge, CHAP_CHALLENGE_LENGTH)) {
++=======
+ 	if (initiatorchg_len == chap->challenge_len &&
+ 				!memcmp(initiatorchg_binhex, chap->challenge,
+ 				initiatorchg_len)) {
++>>>>>>> f9fab3d98600 (scsi: target: iscsi: rename some variables to avoid confusion.)
  		pr_err("initiator CHAP_C matches target CHAP_C, failing"
  		       " login attempt\n");
  		goto out;
@@@ -405,8 -487,12 +421,17 @@@ out
  	kzfree(desc);
  	if (tfm)
  		crypto_free_shash(tfm);
++<<<<<<< HEAD
 +	kfree(challenge);
 +	kfree(challenge_binhex);
++=======
+ 	kfree(initiatorchg);
+ 	kfree(initiatorchg_binhex);
+ 	kfree(digest);
+ 	kfree(response);
+ 	kfree(server_digest);
+ 	kfree(client_digest);
++>>>>>>> f9fab3d98600 (scsi: target: iscsi: rename some variables to avoid confusion.)
  	return auth_ret;
  }
  
* Unmerged path drivers/target/iscsi/iscsi_target_auth.c
