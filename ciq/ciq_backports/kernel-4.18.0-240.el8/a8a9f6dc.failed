perf diff: Use __block_info__cmp() to replace block_pair_cmp()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jin Yao <yao.jin@linux.intel.com>
commit a8a9f6dc0dbfc0f4f225987abec7eb688f4b2d7e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a8a9f6dc.failed

'perf diff' uses block_pair_cmp() to compare two blocks. But
block_info__cmp() has the similar functionality and it's a bit more
complete.

This patch removes block_pair_cmp() and uses __block_info__cmp()
instead. __block_info__cmp() is wrapped by block_info__cmp() and it
doesn't receives a perf_hpp_fmt parameter.

	Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jin Yao <yao.jin@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Kan Liang <kan.liang@linux.intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20200202141655.32053-3-yao.jin@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a8a9f6dc0dbfc0f4f225987abec7eb688f4b2d7e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-diff.c
#	tools/perf/util/block-info.c
#	tools/perf/util/block-info.h
diff --cc tools/perf/builtin-diff.c
index 2a37211ce0ec,5e697cd2224a..000000000000
--- a/tools/perf/builtin-diff.c
+++ b/tools/perf/builtin-diff.c
@@@ -606,77 -572,6 +606,80 @@@ static void init_block_hist(struct bloc
  	bh->valid = true;
  }
  
++<<<<<<< HEAD
 +static void init_block_info(struct block_info *bi, struct symbol *sym,
 +			    struct cyc_hist *ch, int offset)
 +{
 +	bi->sym = sym;
 +	bi->start = ch->start;
 +	bi->end = offset;
 +	bi->cycles = ch->cycles;
 +	bi->cycles_aggr = ch->cycles_aggr;
 +	bi->num = ch->num;
 +	bi->num_aggr = ch->num_aggr;
 +
 +	memcpy(bi->cycles_spark, ch->cycles_spark,
 +	       NUM_SPARKS * sizeof(u64));
 +}
 +
 +static int process_block_per_sym(struct hist_entry *he)
 +{
 +	struct annotation *notes;
 +	struct cyc_hist *ch;
 +	struct block_hist *bh;
 +
 +	if (!he->ms.map || !he->ms.sym)
 +		return 0;
 +
 +	notes = symbol__annotation(he->ms.sym);
 +	if (!notes || !notes->src || !notes->src->cycles_hist)
 +		return 0;
 +
 +	bh = container_of(he, struct block_hist, he);
 +	init_block_hist(bh);
 +
 +	ch = notes->src->cycles_hist;
 +	for (unsigned int i = 0; i < symbol__size(he->ms.sym); i++) {
 +		if (ch[i].num_aggr) {
 +			struct block_info *bi;
 +			struct hist_entry *he_block;
 +
 +			bi = block_info__new();
 +			if (!bi)
 +				return -1;
 +
 +			init_block_info(bi, he->ms.sym, &ch[i], i);
 +			he_block = hists__add_entry_block(&bh->block_hists,
 +							  &dummy_al, bi);
 +			if (!he_block) {
 +				block_info__put(bi);
 +				return -1;
 +			}
 +		}
 +	}
 +
 +	return 0;
 +}
 +
 +static int block_pair_cmp(struct hist_entry *a, struct hist_entry *b)
 +{
 +	struct block_info *bi_a = a->block_info;
 +	struct block_info *bi_b = b->block_info;
 +	int cmp;
 +
 +	if (!bi_a->sym || !bi_b->sym)
 +		return -1;
 +
 +	cmp = strcmp(bi_a->sym->name, bi_b->sym->name);
 +
 +	if ((!cmp) && (bi_a->start == bi_b->start) && (bi_a->end == bi_b->end))
 +		return 0;
 +
 +	return -1;
 +}
 +
++=======
++>>>>>>> a8a9f6dc0dbf (perf diff: Use __block_info__cmp() to replace block_pair_cmp())
  static struct hist_entry *get_block_pair(struct hist_entry *he,
  					 struct hists *hists_pair)
  {
* Unmerged path tools/perf/util/block-info.c
* Unmerged path tools/perf/util/block-info.h
* Unmerged path tools/perf/builtin-diff.c
* Unmerged path tools/perf/util/block-info.c
* Unmerged path tools/perf/util/block-info.h
