net/mlx5e: Introduce kconfig var for TC support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Vlad Buslov <vladbu@mellanox.com>
commit d956873f908cff46dd55976dbd9442a027e9d9d1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d956873f.failed

In order to improve code maintainability and readability, introduce new
CONFIG_MLX5_CLS_ACT kconfig variable to control compilation of TC hardware
offloads implementation. This allows distinguishing between features that
require TC support (MPLSoUDP, etc.) and features that just rely on
representor functionality (rep_bond for live migration, etc.).

Modify rep_tc.h, rep_neigh.h, en_tc.h and chains.h files to provide stubs
for functions that are called from generic code.

	Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit d956873f908cff46dd55976dbd9442a027e9d9d1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/Kconfig
#	drivers/net/ethernet/mellanox/mlx5/core/Makefile
#	drivers/net/ethernet/mellanox/mlx5/core/en/rep/neigh.h
#	drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.h
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
#	drivers/net/ethernet/mellanox/mlx5/core/esw/chains.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Kconfig
index 361c783ec9b5,4256d59eca2b..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Kconfig
@@@ -72,10 -73,35 +72,42 @@@ config MLX5_ESWITC
  	default y
  	---help---
  	  Mellanox Technologies Ethernet SRIOV E-Switch support in ConnectX NIC.
++<<<<<<< HEAD
 +          E-Switch provides internal SRIOV packet steering and switching for the
 +          enabled VFs and PF in two available modes:
 +                Legacy SRIOV mode (L2 mac vlan steering based).
 +                Switchdev mode (eswitch offloads).
++=======
+ 	  E-Switch provides internal SRIOV packet steering and switching for the
+ 	  enabled VFs and PF in two available modes:
+ 	        Legacy SRIOV mode (L2 mac vlan steering based).
+ 	        Switchdev mode (eswitch offloads).
+ 
+ config MLX5_CLS_ACT
+ 	bool "MLX5 TC classifier action support"
+ 	depends on MLX5_ESWITCH && NET_CLS_ACT
+ 	default y
+ 	help
+ 	  mlx5 ConnectX offloads support for TC classifier action (NET_CLS_ACT),
+ 	  works in both native NIC mdoe and Switchdev SRIOV mode.
+ 	  Actions get attached to a Hardware offloaded classifiers and are
+ 	  invoked after a successful classification. Actions are used to
+ 	  overwrite the classification result, instantly drop or redirect and/or
+ 	  reformat packets in wire speeds without involving the host cpu.
+ 
+ 	  If set to N, TC offloads in both NIC and switchdev modes will be disabled.
+ 	  If unsure, set to Y
+ 
+ config MLX5_TC_CT
+ 	bool "MLX5 TC connection tracking offload support"
+ 	depends on MLX5_CLS_ACT && NF_FLOW_TABLE && NET_ACT_CT && NET_TC_SKB_EXT
+ 	default y
+ 	help
+ 	  Say Y here if you want to support offloading connection tracking rules
+ 	  via tc ct action.
+ 
+ 	  If unsure, set to Y
++>>>>>>> d956873f908c (net/mlx5e: Introduce kconfig var for TC support)
  
  config MLX5_CORE_EN_DCB
  	bool "Data Center Bridging (DCB) Support"
diff --cc drivers/net/ethernet/mellanox/mlx5/core/Makefile
index 8d3b7a3aee92,3c1f12c7175f..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/Makefile
+++ b/drivers/net/ethernet/mellanox/mlx5/core/Makefile
@@@ -32,9 -33,13 +32,19 @@@ mlx5_core-$(CONFIG_MLX5_CORE_EN) += en_
  mlx5_core-$(CONFIG_MLX5_EN_ARFS)     += en_arfs.o
  mlx5_core-$(CONFIG_MLX5_EN_RXNFC)    += en_fs_ethtool.o
  mlx5_core-$(CONFIG_MLX5_CORE_EN_DCB) += en_dcbnl.o en/port_buffer.o
++<<<<<<< HEAD
 +mlx5_core-$(CONFIG_MLX5_ESWITCH)     += en_rep.o en_tc.o en/tc_tun.o lib/port_tun.o lag_mp.o \
 +					lib/geneve.o en/tc_tun_vxlan.o en/tc_tun_gre.o \
 +					en/tc_tun_geneve.o
++=======
+ mlx5_core-$(CONFIG_PCI_HYPERV_INTERFACE) += en/hv_vhca_stats.o
+ mlx5_core-$(CONFIG_MLX5_ESWITCH)     += en_rep.o lib/geneve.o lib/port_tun.o lag_mp.o
+ mlx5_core-$(CONFIG_MLX5_CLS_ACT)     += en_tc.o en/rep/tc.o en/rep/neigh.o \
+ 					en/mapping.o esw/chains.o en/tc_tun.o \
+ 					en/tc_tun_vxlan.o en/tc_tun_gre.o en/tc_tun_geneve.o \
+ 					diag/en_tc_tracepoint.o
+ mlx5_core-$(CONFIG_MLX5_TC_CT)	     += en/tc_ct.o
++>>>>>>> d956873f908c (net/mlx5e: Introduce kconfig var for TC support)
  
  #
  # Core extra
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
index 22d5efd4edec,037aa73bf9ab..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
@@@ -114,6 -167,25 +111,28 @@@ int alloc_mod_hdr_actions(struct mlx5_c
  			  struct mlx5e_tc_mod_hdr_acts *mod_hdr_acts);
  void dealloc_mod_hdr_actions(struct mlx5e_tc_mod_hdr_acts *mod_hdr_acts);
  
++<<<<<<< HEAD
++=======
+ struct mlx5e_tc_flow;
+ u32 mlx5e_tc_get_flow_tun_id(struct mlx5e_tc_flow *flow);
+ 
+ #if IS_ENABLED(CONFIG_MLX5_CLS_ACT)
+ 
+ int mlx5e_tc_nic_init(struct mlx5e_priv *priv);
+ void mlx5e_tc_nic_cleanup(struct mlx5e_priv *priv);
+ 
+ int mlx5e_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
+ 			    void *cb_priv);
+ 
+ #else /* CONFIG_MLX5_CLS_ACT */
+ static inline int  mlx5e_tc_nic_init(struct mlx5e_priv *priv) { return 0; }
+ static inline void mlx5e_tc_nic_cleanup(struct mlx5e_priv *priv) {}
+ static inline int
+ mlx5e_setup_tc_block_cb(enum tc_setup_type type, void *type_data, void *cb_priv)
+ { return -EOPNOTSUPP; }
+ #endif /* CONFIG_MLX5_CLS_ACT */
+ 
++>>>>>>> d956873f908c (net/mlx5e: Introduce kconfig var for TC support)
  #else /* CONFIG_MLX5_ESWITCH */
  static inline int  mlx5e_tc_nic_init(struct mlx5e_priv *priv) { return 0; }
  static inline void mlx5e_tc_nic_cleanup(struct mlx5e_priv *priv) {}
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/neigh.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/esw/chains.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Kconfig
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/Makefile
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/neigh.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/rep/tc.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
index 41becb602ff0..336c554f7700 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_main.c
@@ -3704,7 +3704,7 @@ static int set_feature_cvlan_filter(struct net_device *netdev, bool enable)
 	return 0;
 }
 
-#ifdef CONFIG_MLX5_ESWITCH
+#if IS_ENABLED(CONFIG_MLX5_CLS_ACT)
 static int set_feature_tc_num_filters(struct net_device *netdev, bool enable)
 {
 	struct mlx5e_priv *priv = netdev_priv(netdev);
@@ -3815,7 +3815,7 @@ int mlx5e_set_features(struct net_device *netdev, netdev_features_t features)
 	err |= MLX5E_HANDLE_FEATURE(NETIF_F_LRO, set_feature_lro);
 	err |= MLX5E_HANDLE_FEATURE(NETIF_F_HW_VLAN_CTAG_FILTER,
 				    set_feature_cvlan_filter);
-#ifdef CONFIG_MLX5_ESWITCH
+#if IS_ENABLED(CONFIG_MLX5_CLS_ACT)
 	err |= MLX5E_HANDLE_FEATURE(NETIF_F_HW_TC, set_feature_tc_num_filters);
 #endif
 	err |= MLX5E_HANDLE_FEATURE(NETIF_F_RXALL, set_feature_rx_all);
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.h
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/esw/chains.h
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
index 98ef84b15725..ea1bdd0a7e74 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c
@@ -1643,7 +1643,9 @@ static int mlx5_esw_offloads_pair(struct mlx5_eswitch *esw,
 
 static void mlx5_esw_offloads_unpair(struct mlx5_eswitch *esw)
 {
+#if IS_ENABLED(CONFIG_MLX5_CLS_ACT)
 	mlx5e_tc_clean_fdb_peer_flows(esw);
+#endif
 	esw_del_fdb_peer_miss_rules(esw);
 }
 
