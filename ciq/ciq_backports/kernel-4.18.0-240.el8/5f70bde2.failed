selftests: fix build behaviour on targets' failures

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Cristian Marussi <cristian.marussi@arm.com>
commit 5f70bde26a48769012006e22f16cb768f9681020
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5f70bde2.failed

Currently, when some of the KSFT subsystems fails to build, the toplevel
KSFT Makefile just keeps carrying on with the build process.

This behaviour is expected and desirable especially in the context of a CI
system running KSelfTest, since it is not always easy to guarantee that the
most recent and esoteric dependencies are respected across all KSFT TARGETS
in a timely manner.

Unfortunately, as of now, this holds true only if the very last of the
built subsystems could have been successfully compiled: if the last of
those subsystem instead failed to build, such failure is taken as the whole
outcome of the Makefile target and the complete build/install process halts
even though many other preceding subsytems were in fact already built
successfully.

Fix the KSFT Makefile behaviour related to all/install targets in order
to fail as a whole only when the all/install targets have failed for all
of the requested TARGETS, while succeeding when at least one of TARGETS
has been successfully built.

	Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 5f70bde26a48769012006e22f16cb768f9681020)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/Makefile
diff --cc tools/testing/selftests/Makefile
index a94dc15ec364,86b2a3fca04d..000000000000
--- a/tools/testing/selftests/Makefile
+++ b/tools/testing/selftests/Makefile
@@@ -78,21 -88,68 +78,69 @@@ ifneq ($(KBUILD_SRC),
  override LDFLAGS =
  endif
  
 -ifneq ($(O),)
 -	BUILD := $(O)
 -else
 -	ifneq ($(KBUILD_OUTPUT),)
 -		BUILD := $(KBUILD_OUTPUT)/kselftest
 -	else
 -		BUILD := $(shell pwd)
 -		DEFAULT_INSTALL_HDR_PATH := 1
 -	endif
 +BUILD := $(O)
 +ifndef BUILD
 +  BUILD := $(KBUILD_OUTPUT)
 +endif
 +ifndef BUILD
 +  BUILD := $(shell pwd)
  endif
  
 -# Prepare for headers install
 -top_srcdir ?= ../../..
 -include $(top_srcdir)/scripts/subarch.include
 -ARCH           ?= $(SUBARCH)
 -export KSFT_KHDR_INSTALL_DONE := 1
  export BUILD
++<<<<<<< HEAD
 +all:
 +	@for TARGET in $(TARGETS); do		\
 +		BUILD_TARGET=$$BUILD/$$TARGET;	\
 +		mkdir $$BUILD_TARGET  -p;	\
 +		make OUTPUT=$$BUILD_TARGET -C $$TARGET;\
 +	done;
++=======
+ 
+ # build and run gpio when output directory is the src dir.
+ # gpio has dependency on tools/gpio and builds tools/gpio
+ # objects in the src directory in all cases making the src
+ # repo dirty even when objects are relocated.
+ ifneq (1,$(DEFAULT_INSTALL_HDR_PATH))
+ 	TMP := $(filter-out gpio, $(TARGETS))
+ 	TARGETS := $(TMP)
+ endif
+ 
+ # set default goal to all, so make without a target runs all, even when
+ # all isn't the first target in the file.
+ .DEFAULT_GOAL := all
+ 
+ # Install headers here once for all tests. KSFT_KHDR_INSTALL_DONE
+ # is used to avoid running headers_install from lib.mk.
+ # Invoke headers install with --no-builtin-rules to avoid circular
+ # dependency in "make kselftest" case. In this case, second level
+ # make inherits builtin-rules which will use the rule generate
+ # Makefile.o and runs into
+ # "Circular Makefile.o <- prepare dependency dropped."
+ # and headers_install fails and test compile fails.
+ #
+ # O= KBUILD_OUTPUT cases don't run into this error, since main Makefile
+ # invokes them as sub-makes and --no-builtin-rules is not necessary,
+ # but doesn't cause any failures. Keep it simple and use the same
+ # flags in both cases.
+ # Local build cases: "make kselftest", "make -C" - headers are installed
+ # in the default INSTALL_HDR_PATH usr/include.
+ khdr:
+ ifeq (1,$(DEFAULT_INSTALL_HDR_PATH))
+ 	$(MAKE) --no-builtin-rules ARCH=$(ARCH) -C $(top_srcdir) headers_install
+ else
+ 	$(MAKE) --no-builtin-rules INSTALL_HDR_PATH=$$BUILD/usr \
+ 		ARCH=$(ARCH) -C $(top_srcdir) headers_install
+ endif
+ 
+ all: khdr
+ 	@ret=1;							\
+ 	for TARGET in $(TARGETS); do				\
+ 		BUILD_TARGET=$$BUILD/$$TARGET;			\
+ 		mkdir $$BUILD_TARGET  -p;			\
+ 		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET;	\
+ 		ret=$$((ret * $$?));				\
+ 	done; exit $$ret;
++>>>>>>> 5f70bde26a48 (selftests: fix build behaviour on targets' failures)
  
  run_tests: all
  	@for TARGET in $(TARGETS); do \
@@@ -135,12 -195,15 +183,19 @@@ install: al
  ifdef INSTALL_PATH
  	@# Ask all targets to install their files
  	mkdir -p $(INSTALL_PATH)/kselftest
 -	install -m 744 kselftest/module.sh $(INSTALL_PATH)/kselftest/
  	install -m 744 kselftest/runner.sh $(INSTALL_PATH)/kselftest/
  	install -m 744 kselftest/prefix.pl $(INSTALL_PATH)/kselftest/
- 	@for TARGET in $(TARGETS); do \
+ 	@ret=1;	\
+ 	for TARGET in $(TARGETS); do \
  		BUILD_TARGET=$$BUILD/$$TARGET;	\
++<<<<<<< HEAD
 +		make OUTPUT=$$BUILD_TARGET -C $$TARGET INSTALL_PATH=$(INSTALL_PATH)/$$TARGET install; \
 +	done;
++=======
+ 		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET INSTALL_PATH=$(INSTALL_PATH)/$$TARGET install; \
+ 		ret=$$((ret * $$?));		\
+ 	done; exit $$ret;
++>>>>>>> 5f70bde26a48 (selftests: fix build behaviour on targets' failures)
  
  	@# Ask all targets to emit their test scripts
  	echo "#!/bin/sh" > $(ALL_SCRIPT)
* Unmerged path tools/testing/selftests/Makefile
