libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 1fc632cef4ea137bc45fd0fc4cb902e374064163
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1fc632ce.failed

Move the perf_event_attr struct fron 'struct evsel' to 'struct perf_evsel'.

Committer notes:

Fixed up these:

 tools/perf/arch/arm/util/auxtrace.c
 tools/perf/arch/arm/util/cs-etm.c
 tools/perf/arch/arm64/util/arm-spe.c
 tools/perf/arch/s390/util/auxtrace.c
 tools/perf/util/cs-etm.c

Also

  cc1: warnings being treated as errors
  tests/sample-parsing.c: In function 'do_test':
  tests/sample-parsing.c:162: error: missing initializer
  tests/sample-parsing.c:162: error: (near initialization for 'evsel.core.cpus')

   	struct evsel evsel = {
   		.needs_swap = false,
  -		.core.attr = {
  -			.sample_type = sample_type,
  -			.read_format = read_format,
  +		.core = {
  +			. attr = {
  +				.sample_type = sample_type,
  +				.read_format = read_format,
  +			},

  [perfbuilder@a70e4eeb5549 /]$ gcc --version |& head -1
  gcc (GCC) 4.4.7

Also we don't need to include perf_event.h in
tools/perf/lib/include/perf/evsel.h, forward declaring 'struct
perf_event_attr' is enough. And this even fixes the build in some
systems where things are used somewhere down the include path from
perf_event.h without defining __always_inline.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-43-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 1fc632cef4ea137bc45fd0fc4cb902e374064163)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/arm/util/cs-etm.c
#	tools/perf/arch/x86/util/intel-bts.c
#	tools/perf/arch/x86/util/intel-pt.c
#	tools/perf/lib/evsel.c
#	tools/perf/lib/include/internal/evsel.h
#	tools/perf/lib/include/perf/evsel.h
#	tools/perf/tests/parse-events.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/intel-pt.c
#	tools/perf/util/parse-events.c
#	tools/perf/util/stat-display.c
#	tools/perf/util/stat.c
#	tools/perf/util/trace-event-info.c
diff --cc tools/perf/arch/arm/util/cs-etm.c
index 4208974c24f8,f5aafdec7f50..000000000000
--- a/tools/perf/arch/arm/util/cs-etm.c
+++ b/tools/perf/arch/arm/util/cs-etm.c
@@@ -434,11 -434,11 +434,11 @@@ static u64 cs_etm_get_config(struct aux
  	struct cs_etm_recording *ptr =
  			container_of(itr, struct cs_etm_recording, itr);
  	struct perf_pmu *cs_etm_pmu = ptr->cs_etm_pmu;
 -	struct evlist *evlist = ptr->evlist;
 -	struct evsel *evsel;
 +	struct perf_evlist *evlist = ptr->evlist;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
- 		if (evsel->attr.type == cs_etm_pmu->type) {
+ 		if (evsel->core.attr.type == cs_etm_pmu->type) {
  			/*
  			 * Variable perf_event_attr::config is assigned to
  			 * ETMv3/PTM.  The bit fields have been made to match
@@@ -817,11 -817,11 +817,16 @@@ static int cs_etm_snapshot_start(struc
  {
  	struct cs_etm_recording *ptr =
  			container_of(itr, struct cs_etm_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(ptr->evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == ptr->cs_etm_pmu->type)
 +			return perf_evsel__disable(evsel);
++=======
+ 		if (evsel->core.attr.type == ptr->cs_etm_pmu->type)
+ 			return evsel__disable(evsel);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	}
  	return -EINVAL;
  }
@@@ -830,11 -830,11 +835,16 @@@ static int cs_etm_snapshot_finish(struc
  {
  	struct cs_etm_recording *ptr =
  			container_of(itr, struct cs_etm_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(ptr->evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == ptr->cs_etm_pmu->type)
 +			return perf_evsel__enable(evsel);
++=======
+ 		if (evsel->core.attr.type == ptr->cs_etm_pmu->type)
+ 			return evsel__enable(evsel);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	}
  	return -EINVAL;
  }
@@@ -858,10 -858,10 +868,10 @@@ static int cs_etm_read_finish(struct au
  {
  	struct cs_etm_recording *ptr =
  			container_of(itr, struct cs_etm_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(ptr->evlist, evsel) {
- 		if (evsel->attr.type == ptr->cs_etm_pmu->type)
+ 		if (evsel->core.attr.type == ptr->cs_etm_pmu->type)
  			return perf_evlist__enable_event_idx(ptr->evlist,
  							     evsel, idx);
  	}
diff --cc tools/perf/arch/x86/util/intel-bts.c
index 4cbd3d775c19,d8a091266185..000000000000
--- a/tools/perf/arch/x86/util/intel-bts.c
+++ b/tools/perf/arch/x86/util/intel-bts.c
@@@ -322,11 -313,11 +322,16 @@@ static int intel_bts_snapshot_start(str
  {
  	struct intel_bts_recording *btsr =
  			container_of(itr, struct intel_bts_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(btsr->evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == btsr->intel_bts_pmu->type)
 +			return perf_evsel__disable(evsel);
++=======
+ 		if (evsel->core.attr.type == btsr->intel_bts_pmu->type)
+ 			return evsel__disable(evsel);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	}
  	return -EINVAL;
  }
@@@ -335,11 -326,11 +340,16 @@@ static int intel_bts_snapshot_finish(st
  {
  	struct intel_bts_recording *btsr =
  			container_of(itr, struct intel_bts_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(btsr->evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == btsr->intel_bts_pmu->type)
 +			return perf_evsel__enable(evsel);
++=======
+ 		if (evsel->core.attr.type == btsr->intel_bts_pmu->type)
+ 			return evsel__enable(evsel);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	}
  	return -EINVAL;
  }
@@@ -417,10 -408,10 +427,10 @@@ static int intel_bts_read_finish(struc
  {
  	struct intel_bts_recording *btsr =
  			container_of(itr, struct intel_bts_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(btsr->evlist, evsel) {
- 		if (evsel->attr.type == btsr->intel_bts_pmu->type)
+ 		if (evsel->core.attr.type == btsr->intel_bts_pmu->type)
  			return perf_evlist__enable_event_idx(btsr->evlist,
  							     evsel, idx);
  	}
diff --cc tools/perf/arch/x86/util/intel-pt.c
index 3a851647e6f4,aada6a2c456a..000000000000
--- a/tools/perf/arch/x86/util/intel-pt.c
+++ b/tools/perf/arch/x86/util/intel-pt.c
@@@ -277,13 -268,13 +277,13 @@@ intel_pt_pmu_default_config(struct perf
  	return attr;
  }
  
 -static const char *intel_pt_find_filter(struct evlist *evlist,
 +static const char *intel_pt_find_filter(struct perf_evlist *evlist,
  					struct perf_pmu *intel_pt_pmu)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
- 		if (evsel->attr.type == intel_pt_pmu->type)
+ 		if (evsel->core.attr.type == intel_pt_pmu->type)
  			return evsel->filter;
  	}
  
@@@ -793,11 -784,11 +793,16 @@@ static int intel_pt_snapshot_start(stru
  {
  	struct intel_pt_recording *ptr =
  			container_of(itr, struct intel_pt_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(ptr->evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == ptr->intel_pt_pmu->type)
 +			return perf_evsel__disable(evsel);
++=======
+ 		if (evsel->core.attr.type == ptr->intel_pt_pmu->type)
+ 			return evsel__disable(evsel);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	}
  	return -EINVAL;
  }
@@@ -806,11 -797,11 +811,16 @@@ static int intel_pt_snapshot_finish(str
  {
  	struct intel_pt_recording *ptr =
  			container_of(itr, struct intel_pt_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(ptr->evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == ptr->intel_pt_pmu->type)
 +			return perf_evsel__enable(evsel);
++=======
+ 		if (evsel->core.attr.type == ptr->intel_pt_pmu->type)
+ 			return evsel__enable(evsel);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	}
  	return -EINVAL;
  }
@@@ -1079,10 -1070,10 +1089,10 @@@ static int intel_pt_read_finish(struct 
  {
  	struct intel_pt_recording *ptr =
  			container_of(itr, struct intel_pt_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(ptr->evlist, evsel) {
- 		if (evsel->attr.type == ptr->intel_pt_pmu->type)
+ 		if (evsel->core.attr.type == ptr->intel_pt_pmu->type)
  			return perf_evlist__enable_event_idx(ptr->evlist, evsel,
  							     idx);
  	}
diff --cc tools/perf/tests/parse-events.c
index 8f3c80e13584,5b4a5a3dac50..000000000000
--- a/tools/perf/tests/parse-events.c
+++ b/tools/perf/tests/parse-events.c
@@@ -44,16 -44,16 +44,16 @@@ static bool kvm_s390_create_vm_valid(vo
  }
  #endif
  
 -static int test__checkevent_tracepoint(struct evlist *evlist)
 +static int test__checkevent_tracepoint(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong number of groups", 0 == evlist->nr_groups);
- 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_TRACEPOINT == evsel->attr.type);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_TRACEPOINT == evsel->core.attr.type);
  	TEST_ASSERT_VAL("wrong sample_type",
- 		PERF_TP_SAMPLE_TYPE == evsel->attr.sample_type);
- 	TEST_ASSERT_VAL("wrong sample_period", 1 == evsel->attr.sample_period);
+ 		PERF_TP_SAMPLE_TYPE == evsel->core.attr.sample_type);
+ 	TEST_ASSERT_VAL("wrong sample_period", 1 == evsel->core.attr.sample_period);
  	return 0;
  }
  
@@@ -75,45 -75,45 +75,67 @@@ static int test__checkevent_tracepoint_
  	return 0;
  }
  
 -static int test__checkevent_raw(struct evlist *evlist)
 +static int test__checkevent_raw(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0x1a == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0x1a == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	return 0;
  }
  
 -static int test__checkevent_numeric(struct evlist *evlist)
 +static int test__checkevent_numeric(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", 1 == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 1 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", 1 == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 1 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	return 0;
  }
  
 -static int test__checkevent_symbolic_name(struct evlist *evlist)
 +static int test__checkevent_symbolic_name(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong config",
- 			PERF_COUNT_HW_INSTRUCTIONS == evsel->attr.config);
+ 			PERF_COUNT_HW_INSTRUCTIONS == evsel->core.attr.config);
  	return 0;
  }
  
 -static int test__checkevent_symbolic_name_config(struct evlist *evlist)
 +static int test__checkevent_symbolic_name_config(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->attr.type);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HARDWARE == evsel->core.attr.type);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong config",
- 			PERF_COUNT_HW_CPU_CYCLES == evsel->attr.config);
+ 			PERF_COUNT_HW_CPU_CYCLES == evsel->core.attr.config);
  	/*
  	 * The period value gets configured within perf_evlist__config,
  	 * while this test executes only parse events method.
@@@ -127,107 -127,107 +149,130 @@@
  	return 0;
  }
  
 -static int test__checkevent_symbolic_alias(struct evlist *evlist)
 +static int test__checkevent_symbolic_alias(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->attr.type);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->core.attr.type);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong config",
- 			PERF_COUNT_SW_PAGE_FAULTS == evsel->attr.config);
+ 			PERF_COUNT_SW_PAGE_FAULTS == evsel->core.attr.config);
  	return 0;
  }
  
 -static int test__checkevent_genhw(struct evlist *evlist)
 +static int test__checkevent_genhw(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HW_CACHE == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", (1 << 16) == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_HW_CACHE == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", (1 << 16) == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	return 0;
  }
  
 -static int test__checkevent_breakpoint(struct evlist *evlist)
 +static int test__checkevent_breakpoint(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong bp_type", (HW_BREAKPOINT_R | HW_BREAKPOINT_W) ==
- 					 evsel->attr.bp_type);
+ 					 evsel->core.attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len", HW_BREAKPOINT_LEN_4 ==
- 					evsel->attr.bp_len);
+ 					evsel->core.attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_x(struct evlist *evlist)
 +static int test__checkevent_breakpoint_x(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong bp_type",
- 			HW_BREAKPOINT_X == evsel->attr.bp_type);
- 	TEST_ASSERT_VAL("wrong bp_len", sizeof(long) == evsel->attr.bp_len);
+ 			HW_BREAKPOINT_X == evsel->core.attr.bp_type);
+ 	TEST_ASSERT_VAL("wrong bp_len", sizeof(long) == evsel->core.attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_r(struct evlist *evlist)
 +static int test__checkevent_breakpoint_r(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong type",
- 			PERF_TYPE_BREAKPOINT == evsel->attr.type);
- 	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
+ 			PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
  	TEST_ASSERT_VAL("wrong bp_type",
- 			HW_BREAKPOINT_R == evsel->attr.bp_type);
+ 			HW_BREAKPOINT_R == evsel->core.attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len",
- 			HW_BREAKPOINT_LEN_4 == evsel->attr.bp_len);
+ 			HW_BREAKPOINT_LEN_4 == evsel->core.attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_w(struct evlist *evlist)
 +static int test__checkevent_breakpoint_w(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong type",
- 			PERF_TYPE_BREAKPOINT == evsel->attr.type);
- 	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
+ 			PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
  	TEST_ASSERT_VAL("wrong bp_type",
- 			HW_BREAKPOINT_W == evsel->attr.bp_type);
+ 			HW_BREAKPOINT_W == evsel->core.attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len",
- 			HW_BREAKPOINT_LEN_4 == evsel->attr.bp_len);
+ 			HW_BREAKPOINT_LEN_4 == evsel->core.attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_rw(struct evlist *evlist)
 +static int test__checkevent_breakpoint_rw(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
 -	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong type",
- 			PERF_TYPE_BREAKPOINT == evsel->attr.type);
- 	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
+ 			PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
  	TEST_ASSERT_VAL("wrong bp_type",
- 		(HW_BREAKPOINT_R|HW_BREAKPOINT_W) == evsel->attr.bp_type);
+ 		(HW_BREAKPOINT_R|HW_BREAKPOINT_W) == evsel->core.attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len",
- 			HW_BREAKPOINT_LEN_4 == evsel->attr.bp_len);
+ 			HW_BREAKPOINT_LEN_4 == evsel->core.attr.bp_len);
  	return 0;
  }
  
 -static int test__checkevent_tracepoint_modifier(struct evlist *evlist)
 +static int test__checkevent_tracepoint_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  
  	return test__checkevent_tracepoint(evlist);
  }
@@@ -251,197 -251,197 +296,205 @@@ test__checkevent_tracepoint_multi_modif
  	return test__checkevent_tracepoint_multi(evlist);
  }
  
 -static int test__checkevent_raw_modifier(struct evlist *evlist)
 +static int test__checkevent_raw_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
  
  	return test__checkevent_raw(evlist);
  }
  
 -static int test__checkevent_numeric_modifier(struct evlist *evlist)
 +static int test__checkevent_numeric_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
  
  	return test__checkevent_numeric(evlist);
  }
  
 -static int test__checkevent_symbolic_name_modifier(struct evlist *evlist)
 +static int test__checkevent_symbolic_name_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_exclude_host_modifier(struct evlist *evlist)
 +static int test__checkevent_exclude_host_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
- 	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
+ 	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
+ 	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_exclude_guest_modifier(struct evlist *evlist)
 +static int test__checkevent_exclude_guest_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude guest", evsel->attr.exclude_guest);
- 	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
+ 	TEST_ASSERT_VAL("wrong exclude guest", evsel->core.attr.exclude_guest);
+ 	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_symbolic_alias_modifier(struct evlist *evlist)
 +static int test__checkevent_symbolic_alias_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  
  	return test__checkevent_symbolic_alias(evlist);
  }
  
 -static int test__checkevent_genhw_modifier(struct evlist *evlist)
 +static int test__checkevent_genhw_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
  
  	return test__checkevent_genhw(evlist);
  }
  
 -static int test__checkevent_exclude_idle_modifier(struct evlist *evlist)
 +static int test__checkevent_exclude_idle_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude idle", evsel->attr.exclude_idle);
- 	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
- 	TEST_ASSERT_VAL("wrong exclude host", !evsel->attr.exclude_host);
- 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude idle", evsel->core.attr.exclude_idle);
+ 	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
+ 	TEST_ASSERT_VAL("wrong exclude host", !evsel->core.attr.exclude_host);
+ 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_exclude_idle_modifier_1(struct evlist *evlist)
 +static int test__checkevent_exclude_idle_modifier_1(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude idle", evsel->attr.exclude_idle);
- 	TEST_ASSERT_VAL("wrong exclude guest", !evsel->attr.exclude_guest);
- 	TEST_ASSERT_VAL("wrong exclude host", evsel->attr.exclude_host);
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude idle", evsel->core.attr.exclude_idle);
+ 	TEST_ASSERT_VAL("wrong exclude guest", !evsel->core.attr.exclude_guest);
+ 	TEST_ASSERT_VAL("wrong exclude host", evsel->core.attr.exclude_host);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  
  	return test__checkevent_symbolic_name(evlist);
  }
  
 -static int test__checkevent_breakpoint_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
  
- 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:u"));
  
  	return test__checkevent_breakpoint(evlist);
  }
  
 -static int test__checkevent_breakpoint_x_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_x_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:x:k"));
  
  	return test__checkevent_breakpoint_x(evlist);
  }
  
 -static int test__checkevent_breakpoint_r_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_r_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:r:hp"));
  
  	return test__checkevent_breakpoint_r(evlist);
  }
  
 -static int test__checkevent_breakpoint_w_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_w_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:w:up"));
  
  	return test__checkevent_breakpoint_w(evlist);
  }
  
 -static int test__checkevent_breakpoint_rw_modifier(struct evlist *evlist)
 +static int test__checkevent_breakpoint_rw_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "mem:0:rw:kp"));
  
  	return test__checkevent_breakpoint_rw(evlist);
  }
  
 -static int test__checkevent_pmu(struct evlist *evlist)
 +static int test__checkevent_pmu(struct perf_evlist *evlist)
  {
  
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config",    10 == evsel->attr.config);
 +	TEST_ASSERT_VAL("wrong config1",    1 == evsel->attr.config1);
 +	TEST_ASSERT_VAL("wrong config2",    3 == evsel->attr.config2);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config",    10 == evsel->core.attr.config);
+ 	TEST_ASSERT_VAL("wrong config1",    1 == evsel->core.attr.config1);
+ 	TEST_ASSERT_VAL("wrong config2",    3 == evsel->core.attr.config2);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	/*
  	 * The period value gets configured within perf_evlist__config,
  	 * while this test executes only parse events method.
@@@ -451,21 -451,21 +504,21 @@@
  	return 0;
  }
  
 -static int test__checkevent_list(struct evlist *evlist)
 +static int test__checkevent_list(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
 -	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 3 == evlist->nr_entries);
  
  	/* r1 */
- 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
- 	TEST_ASSERT_VAL("wrong config", 1 == evsel->attr.config);
- 	TEST_ASSERT_VAL("wrong config1", 0 == evsel->attr.config1);
- 	TEST_ASSERT_VAL("wrong config2", 0 == evsel->attr.config2);
- 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 1 == evsel->core.attr.config);
+ 	TEST_ASSERT_VAL("wrong config1", 0 == evsel->core.attr.config1);
+ 	TEST_ASSERT_VAL("wrong config2", 0 == evsel->core.attr.config2);
+ 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", !evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", !evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  
  	/* syscalls:sys_enter_openat:k */
  	evsel = perf_evsel__next(evsel);
@@@ -490,35 -490,35 +543,53 @@@
  	return 0;
  }
  
 -static int test__checkevent_pmu_name(struct evlist *evlist)
 +static int test__checkevent_pmu_name(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
  	/* cpu/config=1,name=krava/u */
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config",  1 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config",  1 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong name", !strcmp(perf_evsel__name(evsel), "krava"));
  
  	/* cpu/config=2/u" */
  	evsel = perf_evsel__next(evsel);
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config",  2 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config",  2 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong name",
  			!strcmp(perf_evsel__name(evsel), "cpu/config=2/u"));
  
  	return 0;
  }
  
 -static int test__checkevent_pmu_partial_time_callgraph(struct evlist *evlist)
 +static int test__checkevent_pmu_partial_time_callgraph(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
  	/* cpu/config=1,call-graph=fp,time,period=100000/ */
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config",  1 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config",  1 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	/*
  	 * The period, time and callgraph value gets configured
  	 * within perf_evlist__config,
@@@ -544,49 -544,49 +615,59 @@@
  	return 0;
  }
  
 -static int test__checkevent_pmu_events(struct evlist *evlist)
 +static int test__checkevent_pmu_events(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong exclude_user",
- 			!evsel->attr.exclude_user);
+ 			!evsel->core.attr.exclude_user);
  	TEST_ASSERT_VAL("wrong exclude_kernel",
- 			evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
- 	TEST_ASSERT_VAL("wrong pinned", !evsel->attr.pinned);
+ 			evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong pinned", !evsel->core.attr.pinned);
  
  	return 0;
  }
  
  
 -static int test__checkevent_pmu_events_mix(struct evlist *evlist)
 +static int test__checkevent_pmu_events_mix(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
  	/* pmu-event:u */
 -	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
  	TEST_ASSERT_VAL("wrong exclude_user",
- 			!evsel->attr.exclude_user);
+ 			!evsel->core.attr.exclude_user);
  	TEST_ASSERT_VAL("wrong exclude_kernel",
- 			evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
- 	TEST_ASSERT_VAL("wrong pinned", !evsel->attr.pinned);
+ 			evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong pinned", !evsel->core.attr.pinned);
  
  	/* cpu/pmu-event/u*/
  	evsel = perf_evsel__next(evsel);
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->attr.type);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_RAW == evsel->core.attr.type);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong exclude_user",
- 			!evsel->attr.exclude_user);
+ 			!evsel->core.attr.exclude_user);
  	TEST_ASSERT_VAL("wrong exclude_kernel",
- 			evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
- 	TEST_ASSERT_VAL("wrong pinned", !evsel->attr.pinned);
+ 			evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong pinned", !evsel->core.attr.pinned);
  
  	return 0;
  }
@@@ -1205,15 -1205,15 +1286,15 @@@ static int test__leader_sample2(struct 
  	return 0;
  }
  
 -static int test__checkevent_pinned_modifier(struct evlist *evlist)
 +static int test__checkevent_pinned_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", evsel->attr.precise_ip);
- 	TEST_ASSERT_VAL("wrong pinned", evsel->attr.pinned);
+ 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", evsel->core.attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong pinned", evsel->core.attr.pinned);
  
  	return test__checkevent_symbolic_name(evlist);
  }
@@@ -1249,57 -1249,57 +1330,74 @@@ static int test__pinned_group(struct pe
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_len(struct evlist *evlist)
 +static int test__checkevent_breakpoint_len(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong bp_type", (HW_BREAKPOINT_R | HW_BREAKPOINT_W) ==
- 					 evsel->attr.bp_type);
+ 					 evsel->core.attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len", HW_BREAKPOINT_LEN_1 ==
- 					evsel->attr.bp_len);
+ 					evsel->core.attr.bp_len);
  
  	return 0;
  }
  
 -static int test__checkevent_breakpoint_len_w(struct evlist *evlist)
 +static int test__checkevent_breakpoint_len_w(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->attr.type);
 +	TEST_ASSERT_VAL("wrong config", 0 == evsel->attr.config);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 1 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_BREAKPOINT == evsel->core.attr.type);
+ 	TEST_ASSERT_VAL("wrong config", 0 == evsel->core.attr.config);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong bp_type", HW_BREAKPOINT_W ==
- 					 evsel->attr.bp_type);
+ 					 evsel->core.attr.bp_type);
  	TEST_ASSERT_VAL("wrong bp_len", HW_BREAKPOINT_LEN_2 ==
- 					evsel->attr.bp_len);
+ 					evsel->core.attr.bp_len);
  
  	return 0;
  }
  
  static int
 -test__checkevent_breakpoint_len_rw_modifier(struct evlist *evlist)
 +test__checkevent_breakpoint_len_rw_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->attr.exclude_user);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
- 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->attr.exclude_hv);
- 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->attr.precise_ip);
+ 	TEST_ASSERT_VAL("wrong exclude_user", !evsel->core.attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong exclude_hv", evsel->core.attr.exclude_hv);
+ 	TEST_ASSERT_VAL("wrong precise_ip", !evsel->core.attr.precise_ip);
  
  	return test__checkevent_breakpoint_rw(evlist);
  }
  
 -static int test__checkevent_precise_max_modifier(struct evlist *evlist)
 +static int test__checkevent_precise_max_modifier(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
++<<<<<<< HEAD
 +	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->nr_entries);
 +	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->attr.type);
++=======
+ 	TEST_ASSERT_VAL("wrong number of entries", 2 == evlist->core.nr_entries);
+ 	TEST_ASSERT_VAL("wrong type", PERF_TYPE_SOFTWARE == evsel->core.attr.type);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	TEST_ASSERT_VAL("wrong config",
- 			PERF_COUNT_SW_TASK_CLOCK == evsel->attr.config);
+ 			PERF_COUNT_SW_TASK_CLOCK == evsel->core.attr.config);
  	return 0;
  }
  
@@@ -1356,23 -1356,23 +1454,23 @@@ static int test__checkevent_complex_nam
  	return 0;
  }
  
 -static int test__sym_event_slash(struct evlist *evlist)
 +static int test__sym_event_slash(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong type", evsel->attr.type == PERF_TYPE_HARDWARE);
- 	TEST_ASSERT_VAL("wrong config", evsel->attr.config == PERF_COUNT_HW_CPU_CYCLES);
- 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->attr.exclude_kernel);
+ 	TEST_ASSERT_VAL("wrong type", evsel->core.attr.type == PERF_TYPE_HARDWARE);
+ 	TEST_ASSERT_VAL("wrong config", evsel->core.attr.config == PERF_COUNT_HW_CPU_CYCLES);
+ 	TEST_ASSERT_VAL("wrong exclude_kernel", evsel->core.attr.exclude_kernel);
  	return 0;
  }
  
 -static int test__sym_event_dc(struct evlist *evlist)
 +static int test__sym_event_dc(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__first(evlist);
 +	struct perf_evsel *evsel = perf_evlist__first(evlist);
  
- 	TEST_ASSERT_VAL("wrong type", evsel->attr.type == PERF_TYPE_HARDWARE);
- 	TEST_ASSERT_VAL("wrong config", evsel->attr.config == PERF_COUNT_HW_CPU_CYCLES);
- 	TEST_ASSERT_VAL("wrong exclude_user", evsel->attr.exclude_user);
+ 	TEST_ASSERT_VAL("wrong type", evsel->core.attr.type == PERF_TYPE_HARDWARE);
+ 	TEST_ASSERT_VAL("wrong config", evsel->core.attr.config == PERF_COUNT_HW_CPU_CYCLES);
+ 	TEST_ASSERT_VAL("wrong exclude_user", evsel->core.attr.exclude_user);
  	return 0;
  }
  
diff --cc tools/perf/util/evlist.c
index 4739b7914374,ae75777a0ba4..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -290,31 -290,31 +290,31 @@@ int __perf_evlist__add_default_attrs(st
  	for (i = 0; i < nr_attrs; i++)
  		event_attr_init(attrs + i);
  
 -	return evlist__add_attrs(evlist, attrs, nr_attrs);
 +	return perf_evlist__add_attrs(evlist, attrs, nr_attrs);
  }
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id)
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
- 		if (evsel->attr.type   == PERF_TYPE_TRACEPOINT &&
- 		    (int)evsel->attr.config == id)
+ 		if (evsel->core.attr.type   == PERF_TYPE_TRACEPOINT &&
+ 		    (int)evsel->core.attr.config == id)
  			return evsel;
  	}
  
  	return NULL;
  }
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
  				     const char *name)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
- 		if ((evsel->attr.type == PERF_TYPE_TRACEPOINT) &&
+ 		if ((evsel->core.attr.type == PERF_TYPE_TRACEPOINT) &&
  		    (strcmp(evsel->name, name) == 0))
  			return evsel;
  	}
@@@ -639,10 -639,10 +639,10 @@@ struct perf_evsel *perf_evlist__event2e
  	int hash;
  	u64 id;
  
 -	if (evlist->core.nr_entries == 1)
 +	if (evlist->nr_entries == 1)
  		return first;
  
- 	if (!first->attr.sample_id_all &&
+ 	if (!first->core.attr.sample_id_all &&
  	    event->header.type != PERF_RECORD_SAMPLE)
  		return first;
  
@@@ -744,10 -744,10 +744,10 @@@ static struct perf_mmap *perf_evlist__a
  }
  
  static bool
 -perf_evlist__should_poll(struct evlist *evlist __maybe_unused,
 -			 struct evsel *evsel)
 +perf_evlist__should_poll(struct perf_evlist *evlist __maybe_unused,
 +			 struct perf_evsel *evsel)
  {
- 	if (evsel->attr.write_backward)
+ 	if (evsel->core.attr.write_backward)
  		return false;
  	return true;
  }
@@@ -1266,14 -1266,14 +1266,20 @@@ u64 perf_evlist__combined_branch_type(s
  	return branch_type;
  }
  
 -bool perf_evlist__valid_read_format(struct evlist *evlist)
 +bool perf_evlist__valid_read_format(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist), *pos = first;
 +	u64 read_format = first->attr.read_format;
 +	u64 sample_type = first->attr.sample_type;
++=======
+ 	struct evsel *first = perf_evlist__first(evlist), *pos = first;
+ 	u64 read_format = first->core.attr.read_format;
+ 	u64 sample_type = first->core.attr.sample_type;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  
  	evlist__for_each_entry(evlist, pos) {
- 		if (read_format != pos->attr.read_format)
+ 		if (read_format != pos->core.attr.read_format)
  			return false;
  	}
  
@@@ -1286,15 -1286,15 +1292,20 @@@
  	return true;
  }
  
 -u64 perf_evlist__read_format(struct evlist *evlist)
 +u64 perf_evlist__read_format(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist);
 +	return first->attr.read_format;
++=======
+ 	struct evsel *first = perf_evlist__first(evlist);
+ 	return first->core.attr.read_format;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  }
  
 -u16 perf_evlist__id_hdr_size(struct evlist *evlist)
 +u16 perf_evlist__id_hdr_size(struct perf_evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist);
 +	struct perf_evsel *first = perf_evlist__first(evlist);
  	struct perf_sample *data;
  	u64 sample_type;
  	u16 size = 0;
@@@ -1325,26 -1325,26 +1336,31 @@@ out
  	return size;
  }
  
 -bool perf_evlist__valid_sample_id_all(struct evlist *evlist)
 +bool perf_evlist__valid_sample_id_all(struct perf_evlist *evlist)
  {
 -	struct evsel *first = perf_evlist__first(evlist), *pos = first;
 +	struct perf_evsel *first = perf_evlist__first(evlist), *pos = first;
  
  	evlist__for_each_entry_continue(evlist, pos) {
- 		if (first->attr.sample_id_all != pos->attr.sample_id_all)
+ 		if (first->core.attr.sample_id_all != pos->core.attr.sample_id_all)
  			return false;
  	}
  
  	return true;
  }
  
 -bool perf_evlist__sample_id_all(struct evlist *evlist)
 +bool perf_evlist__sample_id_all(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *first = perf_evlist__first(evlist);
 +	return first->attr.sample_id_all;
++=======
+ 	struct evsel *first = perf_evlist__first(evlist);
+ 	return first->core.attr.sample_id_all;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  }
  
 -void perf_evlist__set_selected(struct evlist *evlist,
 -			       struct evsel *evsel)
 +void perf_evlist__set_selected(struct perf_evlist *evlist,
 +			       struct perf_evsel *evsel)
  {
  	evlist->selected = evsel;
  }
@@@ -1777,12 -1777,12 +1793,12 @@@ state_err
  	return;
  }
  
 -bool perf_evlist__exclude_kernel(struct evlist *evlist)
 +bool perf_evlist__exclude_kernel(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
- 		if (!evsel->attr.exclude_kernel)
+ 		if (!evsel->core.attr.exclude_kernel)
  			return false;
  	}
  
diff --cc tools/perf/util/evsel.c
index e99257f738ba,089582e644d7..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -168,27 -168,27 +168,27 @@@ static int __perf_evsel__calc_is_pos(u6
  	return idx;
  }
  
 -void perf_evsel__calc_id_pos(struct evsel *evsel)
 +void perf_evsel__calc_id_pos(struct perf_evsel *evsel)
  {
- 	evsel->id_pos = __perf_evsel__calc_id_pos(evsel->attr.sample_type);
- 	evsel->is_pos = __perf_evsel__calc_is_pos(evsel->attr.sample_type);
+ 	evsel->id_pos = __perf_evsel__calc_id_pos(evsel->core.attr.sample_type);
+ 	evsel->is_pos = __perf_evsel__calc_is_pos(evsel->core.attr.sample_type);
  }
  
 -void __perf_evsel__set_sample_bit(struct evsel *evsel,
 +void __perf_evsel__set_sample_bit(struct perf_evsel *evsel,
  				  enum perf_event_sample_format bit)
  {
- 	if (!(evsel->attr.sample_type & bit)) {
- 		evsel->attr.sample_type |= bit;
+ 	if (!(evsel->core.attr.sample_type & bit)) {
+ 		evsel->core.attr.sample_type |= bit;
  		evsel->sample_size += sizeof(u64);
  		perf_evsel__calc_id_pos(evsel);
  	}
  }
  
 -void __perf_evsel__reset_sample_bit(struct evsel *evsel,
 +void __perf_evsel__reset_sample_bit(struct perf_evsel *evsel,
  				    enum perf_event_sample_format bit)
  {
- 	if (evsel->attr.sample_type & bit) {
- 		evsel->attr.sample_type &= ~bit;
+ 	if (evsel->core.attr.sample_type & bit) {
+ 		evsel->core.attr.sample_type &= ~bit;
  		evsel->sample_size -= sizeof(u64);
  		perf_evsel__calc_id_pos(evsel);
  	}
@@@ -224,12 -224,12 +224,15 @@@ bool perf_evsel__is_function_event(stru
  #undef FUNCTION_EVENT
  }
  
 -void evsel__init(struct evsel *evsel,
 -		 struct perf_event_attr *attr, int idx)
 +void perf_evsel__init(struct perf_evsel *evsel,
 +		      struct perf_event_attr *attr, int idx)
  {
++<<<<<<< HEAD
++=======
+ 	perf_evsel__init(&evsel->core, attr);
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	evsel->idx	   = idx;
  	evsel->tracking	   = !idx;
- 	evsel->attr	   = *attr;
  	evsel->leader	   = evsel;
  	evsel->unit	   = "";
  	evsel->scale	   = 1.0;
@@@ -256,12 -255,12 +259,12 @@@ struct perf_evsel *perf_evsel__new_idx(
  
  	if (!evsel)
  		return NULL;
 -	evsel__init(evsel, attr, idx);
 +	perf_evsel__init(evsel, attr, idx);
  
  	if (perf_evsel__is_bpf_output(evsel)) {
- 		evsel->attr.sample_type |= (PERF_SAMPLE_RAW | PERF_SAMPLE_TIME |
+ 		evsel->core.attr.sample_type |= (PERF_SAMPLE_RAW | PERF_SAMPLE_TIME |
  					    PERF_SAMPLE_CPU | PERF_SAMPLE_PERIOD),
- 		evsel->attr.sample_period = 1;
+ 		evsel->core.attr.sample_period = 1;
  	}
  
  	if (perf_evsel__is_clock(evsel)) {
@@@ -384,10 -383,10 +387,10 @@@ static const char *__perf_evsel__hw_nam
  	return "unknown-hardware";
  }
  
 -static int perf_evsel__add_modifiers(struct evsel *evsel, char *bf, size_t size)
 +static int perf_evsel__add_modifiers(struct perf_evsel *evsel, char *bf, size_t size)
  {
  	int colon = 0, r = 0;
- 	struct perf_event_attr *attr = &evsel->attr;
+ 	struct perf_event_attr *attr = &evsel->core.attr;
  	bool exclude_guest_default = false;
  
  #define MOD_PRINT(context, mod)	do {					\
@@@ -420,9 -419,9 +423,9 @@@
  	return r;
  }
  
 -static int perf_evsel__hw_name(struct evsel *evsel, char *bf, size_t size)
 +static int perf_evsel__hw_name(struct perf_evsel *evsel, char *bf, size_t size)
  {
- 	int r = scnprintf(bf, size, "%s", __perf_evsel__hw_name(evsel->attr.config));
+ 	int r = scnprintf(bf, size, "%s", __perf_evsel__hw_name(evsel->core.attr.config));
  	return r + perf_evsel__add_modifiers(evsel, bf + r, size - r);
  }
  
@@@ -446,9 -445,9 +449,9 @@@ static const char *__perf_evsel__sw_nam
  	return "unknown-software";
  }
  
 -static int perf_evsel__sw_name(struct evsel *evsel, char *bf, size_t size)
 +static int perf_evsel__sw_name(struct perf_evsel *evsel, char *bf, size_t size)
  {
- 	int r = scnprintf(bf, size, "%s", __perf_evsel__sw_name(evsel->attr.config));
+ 	int r = scnprintf(bf, size, "%s", __perf_evsel__sw_name(evsel->core.attr.config));
  	return r + perf_evsel__add_modifiers(evsel, bf + r, size - r);
  }
  
@@@ -470,9 -469,9 +473,9 @@@ static int __perf_evsel__bp_name(char *
  	return r;
  }
  
 -static int perf_evsel__bp_name(struct evsel *evsel, char *bf, size_t size)
 +static int perf_evsel__bp_name(struct perf_evsel *evsel, char *bf, size_t size)
  {
- 	struct perf_event_attr *attr = &evsel->attr;
+ 	struct perf_event_attr *attr = &evsel->core.attr;
  	int r = __perf_evsel__bp_name(bf, size, attr->bp_addr, attr->bp_type);
  	return r + perf_evsel__add_modifiers(evsel, bf + r, size - r);
  }
@@@ -570,15 -569,15 +573,15 @@@ out_err
  	return scnprintf(bf, size, "%s", err);
  }
  
 -static int perf_evsel__hw_cache_name(struct evsel *evsel, char *bf, size_t size)
 +static int perf_evsel__hw_cache_name(struct perf_evsel *evsel, char *bf, size_t size)
  {
- 	int ret = __perf_evsel__hw_cache_name(evsel->attr.config, bf, size);
+ 	int ret = __perf_evsel__hw_cache_name(evsel->core.attr.config, bf, size);
  	return ret + perf_evsel__add_modifiers(evsel, bf + ret, size - ret);
  }
  
 -static int perf_evsel__raw_name(struct evsel *evsel, char *bf, size_t size)
 +static int perf_evsel__raw_name(struct perf_evsel *evsel, char *bf, size_t size)
  {
- 	int ret = scnprintf(bf, size, "raw 0x%" PRIx64, evsel->attr.config);
+ 	int ret = scnprintf(bf, size, "raw 0x%" PRIx64, evsel->core.attr.config);
  	return ret + perf_evsel__add_modifiers(evsel, bf + ret, size - ret);
  }
  
@@@ -745,10 -744,10 +748,10 @@@ void perf_evsel__config_callchain(struc
  }
  
  static void
 -perf_evsel__reset_callgraph(struct evsel *evsel,
 +perf_evsel__reset_callgraph(struct perf_evsel *evsel,
  			    struct callchain_param *param)
  {
- 	struct perf_event_attr *attr = &evsel->attr;
+ 	struct perf_event_attr *attr = &evsel->core.attr;
  
  	perf_evsel__reset_sample_bit(evsel, CALLCHAIN);
  	if (param->record_mode == CALLCHAIN_LBR) {
@@@ -887,10 -886,10 +890,10 @@@ static void apply_config_terms(struct p
  	}
  }
  
 -static bool is_dummy_event(struct evsel *evsel)
 +static bool is_dummy_event(struct perf_evsel *evsel)
  {
- 	return (evsel->attr.type == PERF_TYPE_SOFTWARE) &&
- 	       (evsel->attr.config == PERF_COUNT_SW_DUMMY);
+ 	return (evsel->core.attr.type == PERF_TYPE_SOFTWARE) &&
+ 	       (evsel->core.attr.config == PERF_COUNT_SW_DUMMY);
  }
  
  /*
@@@ -921,11 -920,11 +924,16 @@@
   *     enable/disable events specifically, as there's no
   *     initial traced exec call.
   */
 -void perf_evsel__config(struct evsel *evsel, struct record_opts *opts,
 +void perf_evsel__config(struct perf_evsel *evsel, struct record_opts *opts,
  			struct callchain_param *callchain)
  {
++<<<<<<< HEAD
 +	struct perf_evsel *leader = evsel->leader;
 +	struct perf_event_attr *attr = &evsel->attr;
++=======
+ 	struct evsel *leader = evsel->leader;
+ 	struct perf_event_attr *attr = &evsel->core.attr;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	int track = evsel->tracking;
  	bool per_cpu = opts->target.default_per_cpu && !opts->target.per_thread;
  
@@@ -1380,9 -1379,9 +1388,9 @@@ void perf_counts_values__scale(struct p
  		*pscaled = scaled;
  }
  
 -static int perf_evsel__read_size(struct evsel *evsel)
 +static int perf_evsel__read_size(struct perf_evsel *evsel)
  {
- 	u64 read_format = evsel->attr.read_format;
+ 	u64 read_format = evsel->core.attr.read_format;
  	int entry = sizeof(u64); /* value */
  	int size = 0;
  	int nr = 1;
@@@ -1445,10 -1444,10 +1453,10 @@@ perf_evsel__set_count(struct perf_evse
  }
  
  static int
 -perf_evsel__process_group_data(struct evsel *leader,
 +perf_evsel__process_group_data(struct perf_evsel *leader,
  			       int cpu, int thread, u64 *data)
  {
- 	u64 read_format = leader->attr.read_format;
+ 	u64 read_format = leader->core.attr.read_format;
  	struct sample_read_value *v;
  	u64 nr, ena = 0, run = 0, i;
  
@@@ -1483,10 -1482,10 +1491,10 @@@
  }
  
  static int
 -perf_evsel__read_group(struct evsel *leader, int cpu, int thread)
 +perf_evsel__read_group(struct perf_evsel *leader, int cpu, int thread)
  {
  	struct perf_stat_evsel *ps = leader->stats;
- 	u64 read_format = leader->attr.read_format;
+ 	u64 read_format = leader->core.attr.read_format;
  	int size = perf_evsel__read_size(leader);
  	u64 *data = ps->group_data;
  
@@@ -1513,9 -1512,9 +1521,9 @@@
  	return perf_evsel__process_group_data(leader, cpu, thread, data);
  }
  
 -int perf_evsel__read_counter(struct evsel *evsel, int cpu, int thread)
 +int perf_evsel__read_counter(struct perf_evsel *evsel, int cpu, int thread)
  {
- 	u64 read_format = evsel->attr.read_format;
+ 	u64 read_format = evsel->core.attr.read_format;
  
  	if (read_format & PERF_FORMAT_GROUP)
  		return perf_evsel__read_group(evsel, cpu, thread);
@@@ -2186,10 -2185,10 +2194,10 @@@ perf_event__check_size(union perf_even
  	return 0;
  }
  
 -int perf_evsel__parse_sample(struct evsel *evsel, union perf_event *event,
 +int perf_evsel__parse_sample(struct perf_evsel *evsel, union perf_event *event,
  			     struct perf_sample *data)
  {
- 	u64 type = evsel->attr.sample_type;
+ 	u64 type = evsel->core.attr.sample_type;
  	bool swapped = evsel->needs_swap;
  	const u64 *array;
  	u16 max_size = event->header.size;
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,43f66158de3b..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -100,10 -100,9 +100,16 @@@ struct bpf_object
   *          is used there is an id sample appended to non-sample events
   * @priv:   And what is in its containing unnamed union are tool specific
   */
++<<<<<<< HEAD
 +struct perf_evsel {
 +	struct list_head	node;
 +	struct perf_evlist	*evlist;
 +	struct perf_event_attr	attr;
++=======
+ struct evsel {
+ 	struct perf_evsel	core;
+ 	struct evlist	*evlist;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	char			*filter;
  	struct xyarray		*fd;
  	struct xyarray		*sample_id;
@@@ -325,31 -323,31 +331,31 @@@ struct tep_format_field
  
  u64 format_field__intval(struct tep_format_field *field, struct perf_sample *sample, bool needs_swap);
  
 -struct tep_format_field *perf_evsel__field(struct evsel *evsel, const char *name);
 +struct tep_format_field *perf_evsel__field(struct perf_evsel *evsel, const char *name);
  
  #define perf_evsel__match(evsel, t, c)		\
- 	(evsel->attr.type == PERF_TYPE_##t &&	\
- 	 evsel->attr.config == PERF_COUNT_##c)
+ 	(evsel->core.attr.type == PERF_TYPE_##t &&	\
+ 	 evsel->core.attr.config == PERF_COUNT_##c)
  
 -static inline bool perf_evsel__match2(struct evsel *e1,
 -				      struct evsel *e2)
 +static inline bool perf_evsel__match2(struct perf_evsel *e1,
 +				      struct perf_evsel *e2)
  {
- 	return (e1->attr.type == e2->attr.type) &&
- 	       (e1->attr.config == e2->attr.config);
+ 	return (e1->core.attr.type == e2->core.attr.type) &&
+ 	       (e1->core.attr.config == e2->core.attr.config);
  }
  
  #define perf_evsel__cmp(a, b)			\
  	((a) &&					\
  	 (b) &&					\
- 	 (a)->attr.type == (b)->attr.type &&	\
- 	 (a)->attr.config == (b)->attr.config)
+ 	 (a)->core.attr.type == (b)->core.attr.type &&	\
+ 	 (a)->core.attr.config == (b)->core.attr.config)
  
 -int perf_evsel__read(struct evsel *evsel, int cpu, int thread,
 +int perf_evsel__read(struct perf_evsel *evsel, int cpu, int thread,
  		     struct perf_counts_values *count);
  
 -int perf_evsel__read_counter(struct evsel *evsel, int cpu, int thread);
 +int perf_evsel__read_counter(struct perf_evsel *evsel, int cpu, int thread);
  
 -int __perf_evsel__read_on_cpu(struct evsel *evsel,
 +int __perf_evsel__read_on_cpu(struct perf_evsel *evsel,
  			      int cpu, int thread, bool scale);
  
  /**
@@@ -487,16 -485,16 +493,16 @@@ for ((_evsel) = list_entry((_leader)->n
  #define for_each_group_evsel(_evsel, _leader) 					\
  for ((_evsel) = _leader; 							\
       (_evsel) && (_evsel)->leader == (_leader);					\
 -     (_evsel) = list_entry((_evsel)->core.node.next, struct evsel, core.node))
 +     (_evsel) = list_entry((_evsel)->node.next, struct perf_evsel, node))
  
 -static inline bool perf_evsel__has_branch_callstack(const struct evsel *evsel)
 +static inline bool perf_evsel__has_branch_callstack(const struct perf_evsel *evsel)
  {
- 	return evsel->attr.branch_sample_type & PERF_SAMPLE_BRANCH_CALL_STACK;
+ 	return evsel->core.attr.branch_sample_type & PERF_SAMPLE_BRANCH_CALL_STACK;
  }
  
 -static inline bool evsel__has_callchain(const struct evsel *evsel)
 +static inline bool evsel__has_callchain(const struct perf_evsel *evsel)
  {
- 	return (evsel->attr.sample_type & PERF_SAMPLE_CALLCHAIN) != 0;
+ 	return (evsel->core.attr.sample_type & PERF_SAMPLE_CALLCHAIN) != 0;
  }
  
  typedef int (*attr__fprintf_f)(FILE *, const char *, const char *, void *);
diff --cc tools/perf/util/intel-pt.c
index c05fafa87b14,4c52204868d8..000000000000
--- a/tools/perf/util/intel-pt.c
+++ b/tools/perf/util/intel-pt.c
@@@ -732,11 -723,11 +732,11 @@@ static bool intel_pt_get_config(struct 
  
  static bool intel_pt_exclude_kernel(struct intel_pt *pt)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(pt->session->evlist, evsel) {
- 		if (intel_pt_get_config(pt, &evsel->attr, NULL) &&
- 		    !evsel->attr.exclude_kernel)
+ 		if (intel_pt_get_config(pt, &evsel->core.attr, NULL) &&
+ 		    !evsel->core.attr.exclude_kernel)
  			return false;
  	}
  	return true;
@@@ -814,11 -805,11 +814,11 @@@ static bool intel_pt_timeless_decoding(
  
  static bool intel_pt_tracing_kernel(struct intel_pt *pt)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(pt->session->evlist, evsel) {
- 		if (intel_pt_get_config(pt, &evsel->attr, NULL) &&
- 		    !evsel->attr.exclude_kernel)
+ 		if (intel_pt_get_config(pt, &evsel->core.attr, NULL) &&
+ 		    !evsel->core.attr.exclude_kernel)
  			return true;
  	}
  	return false;
@@@ -1711,8 -1702,8 +1711,13 @@@ static int intel_pt_synth_pebs_sample(s
  	struct perf_sample sample = { .ip = 0, };
  	union perf_event *event = ptq->event_buf;
  	struct intel_pt *pt = ptq->pt;
++<<<<<<< HEAD
 +	struct perf_evsel *evsel = pt->pebs_evsel;
 +	u64 sample_type = evsel->attr.sample_type;
++=======
+ 	struct evsel *evsel = pt->pebs_evsel;
+ 	u64 sample_type = evsel->core.attr.sample_type;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  	u64 id = evsel->id[0];
  	u8 cpumode;
  
@@@ -2737,13 -2728,13 +2742,13 @@@ static void intel_pt_set_event_name(str
  	}
  }
  
 -static struct evsel *intel_pt_evsel(struct intel_pt *pt,
 -					 struct evlist *evlist)
 +static struct perf_evsel *intel_pt_evsel(struct intel_pt *pt,
 +					 struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
- 		if (evsel->attr.type == pt->pmu_type && evsel->ids)
+ 		if (evsel->core.attr.type == pt->pmu_type && evsel->ids)
  			return evsel;
  	}
  
@@@ -2917,12 -2908,12 +2922,12 @@@ static struct perf_evsel *intel_pt_find
  	return NULL;
  }
  
 -static bool intel_pt_find_switch(struct evlist *evlist)
 +static bool intel_pt_find_switch(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel) {
- 		if (evsel->attr.context_switch)
+ 		if (evsel->core.attr.context_switch)
  			return true;
  	}
  
diff --cc tools/perf/util/parse-events.c
index 0540303e5e97,ec7ce18b999a..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -1588,18 -1588,18 +1588,18 @@@ struct event_modifier 
  };
  
  static int get_event_modifier(struct event_modifier *mod, char *str,
 -			       struct evsel *evsel)
 +			       struct perf_evsel *evsel)
  {
- 	int eu = evsel ? evsel->attr.exclude_user : 0;
- 	int ek = evsel ? evsel->attr.exclude_kernel : 0;
- 	int eh = evsel ? evsel->attr.exclude_hv : 0;
- 	int eH = evsel ? evsel->attr.exclude_host : 0;
- 	int eG = evsel ? evsel->attr.exclude_guest : 0;
- 	int eI = evsel ? evsel->attr.exclude_idle : 0;
- 	int precise = evsel ? evsel->attr.precise_ip : 0;
+ 	int eu = evsel ? evsel->core.attr.exclude_user : 0;
+ 	int ek = evsel ? evsel->core.attr.exclude_kernel : 0;
+ 	int eh = evsel ? evsel->core.attr.exclude_hv : 0;
+ 	int eH = evsel ? evsel->core.attr.exclude_host : 0;
+ 	int eG = evsel ? evsel->core.attr.exclude_guest : 0;
+ 	int eI = evsel ? evsel->core.attr.exclude_idle : 0;
+ 	int precise = evsel ? evsel->core.attr.precise_ip : 0;
  	int precise_max = 0;
  	int sample_read = 0;
- 	int pinned = evsel ? evsel->attr.pinned : 0;
+ 	int pinned = evsel ? evsel->core.attr.pinned : 0;
  
  	int exclude = eu | ek | eh;
  	int exclude_GH = evsel ? evsel->exclude_GH : 0;
@@@ -2331,13 -2331,13 +2331,18 @@@ static bool is_event_supported(u8 type
  			 * by default as some ARM machines do not support it.
  			 *
  			 */
++<<<<<<< HEAD
 +			evsel->attr.exclude_kernel = 1;
 +			ret = perf_evsel__open(evsel, NULL, tmap) >= 0;
++=======
+ 			evsel->core.attr.exclude_kernel = 1;
+ 			ret = evsel__open(evsel, NULL, tmap) >= 0;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  		}
 -		evsel__delete(evsel);
 +		perf_evsel__delete(evsel);
  	}
  
 -	perf_thread_map__put(tmap);
 +	thread_map__put(tmap);
  	return ret;
  }
  
diff --cc tools/perf/util/stat-display.c
index 58df6a0dbb9f,99bda99a1b2d..000000000000
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@@ -363,11 -363,11 +363,17 @@@ static void abs_printout(struct perf_st
  	print_cgroup(config, evsel);
  }
  
 -static bool is_mixed_hw_group(struct evsel *counter)
 +static bool is_mixed_hw_group(struct perf_evsel *counter)
  {
++<<<<<<< HEAD
 +	struct perf_evlist *evlist = counter->evlist;
 +	u32 pmu_type = counter->attr.type;
 +	struct perf_evsel *pos;
++=======
+ 	struct evlist *evlist = counter->evlist;
+ 	u32 pmu_type = counter->core.attr.type;
+ 	struct evsel *pos;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  
  	if (counter->nr_members < 2)
  		return false;
diff --cc tools/perf/util/stat.c
index da269d46c09f,632bf72cf780..000000000000
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@@ -441,8 -441,8 +441,13 @@@ int create_perf_stat_counter(struct per
  			     struct perf_stat_config *config,
  			     struct target *target)
  {
++<<<<<<< HEAD
 +	struct perf_event_attr *attr = &evsel->attr;
 +	struct perf_evsel *leader = evsel->leader;
++=======
+ 	struct perf_event_attr *attr = &evsel->core.attr;
+ 	struct evsel *leader = evsel->leader;
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  
  	attr->read_format = PERF_FORMAT_TOTAL_TIME_ENABLED |
  			    PERF_FORMAT_TOTAL_TIME_RUNNING;
diff --cc tools/perf/util/trace-event-info.c
index 76a460ff7867,2f8a0601a546..000000000000
--- a/tools/perf/util/trace-event-info.c
+++ b/tools/perf/util/trace-event-info.c
@@@ -421,11 -405,11 +421,16 @@@ static struct tracepoint_path 
  get_tracepoints_path(struct list_head *pattrs)
  {
  	struct tracepoint_path path, *ppath = &path;
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  	int nr_tracepoints = 0;
  
++<<<<<<< HEAD
 +	list_for_each_entry(pos, pattrs, node) {
 +		if (pos->attr.type != PERF_TYPE_TRACEPOINT)
++=======
+ 	list_for_each_entry(pos, pattrs, core.node) {
+ 		if (pos->core.attr.type != PERF_TYPE_TRACEPOINT)
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  			continue;
  		++nr_tracepoints;
  
@@@ -457,10 -441,10 +462,15 @@@ next
  
  bool have_tracepoints(struct list_head *pattrs)
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
++<<<<<<< HEAD
 +	list_for_each_entry(pos, pattrs, node)
 +		if (pos->attr.type == PERF_TYPE_TRACEPOINT)
++=======
+ 	list_for_each_entry(pos, pattrs, core.node)
+ 		if (pos->core.attr.type == PERF_TYPE_TRACEPOINT)
++>>>>>>> 1fc632cef4ea (libperf: Move perf_event_attr field from perf's evsel to libperf's perf_evsel)
  			return true;
  
  	return false;
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/lib/include/perf/evsel.h
diff --git a/tools/perf/arch/arm/util/auxtrace.c b/tools/perf/arch/arm/util/auxtrace.c
index 02014740a1aa..aadf11282424 100644
--- a/tools/perf/arch/arm/util/auxtrace.c
+++ b/tools/perf/arch/arm/util/auxtrace.c
@@ -70,14 +70,14 @@ struct auxtrace_record
 
 	evlist__for_each_entry(evlist, evsel) {
 		if (cs_etm_pmu &&
-		    evsel->attr.type == cs_etm_pmu->type)
+		    evsel->core.attr.type == cs_etm_pmu->type)
 			found_etm = true;
 
 		if (!nr_spes)
 			continue;
 
 		for (i = 0; i < nr_spes; i++) {
-			if (evsel->attr.type == arm_spe_pmus[i]->type) {
+			if (evsel->core.attr.type == arm_spe_pmus[i]->type) {
 				found_spe = true;
 				break;
 			}
* Unmerged path tools/perf/arch/arm/util/cs-etm.c
diff --git a/tools/perf/arch/arm64/util/arm-spe.c b/tools/perf/arch/arm64/util/arm-spe.c
index 2c009aa74633..5e52fe04aedd 100644
--- a/tools/perf/arch/arm64/util/arm-spe.c
+++ b/tools/perf/arch/arm64/util/arm-spe.c
@@ -73,13 +73,13 @@ static int arm_spe_recording_options(struct auxtrace_record *itr,
 	sper->evlist = evlist;
 
 	evlist__for_each_entry(evlist, evsel) {
-		if (evsel->attr.type == arm_spe_pmu->type) {
+		if (evsel->core.attr.type == arm_spe_pmu->type) {
 			if (arm_spe_evsel) {
 				pr_err("There may be only one " ARM_SPE_PMU_NAME "x event\n");
 				return -EINVAL;
 			}
-			evsel->attr.freq = 0;
-			evsel->attr.sample_period = 1;
+			evsel->core.attr.freq = 0;
+			evsel->core.attr.sample_period = 1;
 			arm_spe_evsel = evsel;
 			opts->full_auxtrace = true;
 		}
@@ -130,8 +130,8 @@ static int arm_spe_recording_options(struct auxtrace_record *itr,
 	tracking_evsel = perf_evlist__last(evlist);
 	perf_evlist__set_tracking_event(evlist, tracking_evsel);
 
-	tracking_evsel->attr.freq = 0;
-	tracking_evsel->attr.sample_period = 1;
+	tracking_evsel->core.attr.freq = 0;
+	tracking_evsel->core.attr.sample_period = 1;
 	perf_evsel__set_sample_bit(tracking_evsel, TIME);
 	perf_evsel__set_sample_bit(tracking_evsel, CPU);
 	perf_evsel__reset_sample_bit(tracking_evsel, BRANCH_STACK);
@@ -163,7 +163,7 @@ static int arm_spe_read_finish(struct auxtrace_record *itr, int idx)
 	struct perf_evsel *evsel;
 
 	evlist__for_each_entry(sper->evlist, evsel) {
-		if (evsel->attr.type == sper->arm_spe_pmu->type)
+		if (evsel->core.attr.type == sper->arm_spe_pmu->type)
 			return perf_evlist__enable_event_idx(sper->evlist,
 							     evsel, idx);
 	}
diff --git a/tools/perf/arch/s390/util/auxtrace.c b/tools/perf/arch/s390/util/auxtrace.c
index 0fe1be93f375..c53c17a47c08 100644
--- a/tools/perf/arch/s390/util/auxtrace.c
+++ b/tools/perf/arch/s390/util/auxtrace.c
@@ -94,7 +94,7 @@ struct auxtrace_record *auxtrace_record__init(struct perf_evlist *evlist,
 		return NULL;
 
 	evlist__for_each_entry(evlist, pos) {
-		if (pos->attr.config == PERF_EVENT_CPUM_SF_DIAG) {
+		if (pos->core.attr.config == PERF_EVENT_CPUM_SF_DIAG) {
 			diagnose = 1;
 			break;
 		}
diff --git a/tools/perf/arch/x86/tests/perf-time-to-tsc.c b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86..4ffd86601db5 100644
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@ -79,9 +79,9 @@ int test__perf_time_to_tsc(struct test *test __maybe_unused, int subtest __maybe
 
 	evsel = perf_evlist__first(evlist);
 
-	evsel->attr.comm = 1;
-	evsel->attr.disabled = 1;
-	evsel->attr.enable_on_exec = 0;
+	evsel->core.attr.comm = 1;
+	evsel->core.attr.disabled = 1;
+	evsel->core.attr.enable_on_exec = 0;
 
 	CHECK__(perf_evlist__open(evlist));
 
diff --git a/tools/perf/arch/x86/util/auxtrace.c b/tools/perf/arch/x86/util/auxtrace.c
index b135af62011c..9885da3e7309 100644
--- a/tools/perf/arch/x86/util/auxtrace.c
+++ b/tools/perf/arch/x86/util/auxtrace.c
@@ -38,9 +38,9 @@ struct auxtrace_record *auxtrace_record__init_intel(struct perf_evlist *evlist,
 	intel_bts_pmu = perf_pmu__find(INTEL_BTS_PMU_NAME);
 
 	evlist__for_each_entry(evlist, evsel) {
-		if (intel_pt_pmu && evsel->attr.type == intel_pt_pmu->type)
+		if (intel_pt_pmu && evsel->core.attr.type == intel_pt_pmu->type)
 			found_pt = true;
-		if (intel_bts_pmu && evsel->attr.type == intel_bts_pmu->type)
+		if (intel_bts_pmu && evsel->core.attr.type == intel_bts_pmu->type)
 			found_bts = true;
 	}
 
* Unmerged path tools/perf/arch/x86/util/intel-bts.c
* Unmerged path tools/perf/arch/x86/util/intel-pt.c
diff --git a/tools/perf/builtin-evlist.c b/tools/perf/builtin-evlist.c
index 36069acf5df2..1351201b5067 100644
--- a/tools/perf/builtin-evlist.c
+++ b/tools/perf/builtin-evlist.c
@@ -37,7 +37,7 @@ static int __cmd_evlist(const char *file_name, struct perf_attr_details *details
 	evlist__for_each_entry(session->evlist, pos) {
 		perf_evsel__fprintf(pos, details, stdout);
 
-		if (pos->attr.type == PERF_TYPE_TRACEPOINT)
+		if (pos->core.attr.type == PERF_TYPE_TRACEPOINT)
 			has_tracepoint = true;
 	}
 
diff --git a/tools/perf/builtin-inject.c b/tools/perf/builtin-inject.c
index b82ad14f3fd0..cf44671cab63 100644
--- a/tools/perf/builtin-inject.c
+++ b/tools/perf/builtin-inject.c
@@ -531,8 +531,8 @@ static int perf_inject__sched_stat(struct perf_tool *tool,
 
 	sample_sw.period = sample->period;
 	sample_sw.time	 = sample->time;
-	perf_event__synthesize_sample(event_sw, evsel->attr.sample_type,
-				      evsel->attr.read_format, &sample_sw);
+	perf_event__synthesize_sample(event_sw, evsel->core.attr.sample_type,
+				      evsel->core.attr.read_format, &sample_sw);
 	build_id__mark_dso_hit(tool, event_sw, &sample_sw, evsel, machine);
 	return perf_event__repipe(tool, event_sw, &sample_sw, machine);
 }
@@ -545,7 +545,7 @@ static void sig_handler(int sig __maybe_unused)
 static int perf_evsel__check_stype(struct perf_evsel *evsel,
 				   u64 sample_type, const char *sample_msg)
 {
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	const char *name = perf_evsel__name(evsel);
 
 	if (!(attr->sample_type & sample_type)) {
@@ -579,8 +579,8 @@ static void strip_init(struct perf_inject *inject)
 
 static bool has_tracking(struct perf_evsel *evsel)
 {
-	return evsel->attr.mmap || evsel->attr.mmap2 || evsel->attr.comm ||
-	       evsel->attr.task;
+	return evsel->core.attr.mmap || evsel->core.attr.mmap2 || evsel->core.attr.comm ||
+	       evsel->core.attr.task;
 }
 
 #define COMPAT_MASK (PERF_SAMPLE_ID | PERF_SAMPLE_TID | PERF_SAMPLE_TIME | \
@@ -604,8 +604,8 @@ static bool ok_to_remove(struct perf_evlist *evlist,
 	evlist__for_each_entry(evlist, evsel) {
 		if (evsel->handler != drop_sample) {
 			cnt += 1;
-			if ((evsel->attr.sample_type & COMPAT_MASK) ==
-			    (evsel_to_remove->attr.sample_type & COMPAT_MASK))
+			if ((evsel->core.attr.sample_type & COMPAT_MASK) ==
+			    (evsel_to_remove->core.attr.sample_type & COMPAT_MASK))
 				ok = true;
 		}
 	}
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index 02e719faa488..444f99d4d049 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -1023,7 +1023,7 @@ static int kvm_live_open_events(struct perf_kvm_stat *kvm)
 	 *       This command processes KVM tracepoints from host only
 	 */
 	evlist__for_each_entry(evlist, pos) {
-		struct perf_event_attr *attr = &pos->attr;
+		struct perf_event_attr *attr = &pos->core.attr;
 
 		/* make sure these *are* set */
 		perf_evsel__set_sample_bit(pos, TID);
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..28d7a53f7d32 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -733,7 +733,7 @@ static int record__open(struct record *rec)
 		pos->tracking = 0;
 		pos = perf_evlist__last(evlist);
 		pos->tracking = 1;
-		pos->attr.enable_on_exec = 1;
+		pos->core.attr.enable_on_exec = 1;
 	}
 
 	perf_evlist__config(evlist, opts, &callchain_param);
diff --git a/tools/perf/builtin-script.c b/tools/perf/builtin-script.c
index 381a10d3337c..f14ce4964615 100644
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@ -346,7 +346,7 @@ static int perf_evsel__do_check_stype(struct perf_evsel *evsel,
 				      enum perf_output_field field,
 				      bool allow_user_set)
 {
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	int type = output_type(attr->type);
 	const char *evname;
 
@@ -384,7 +384,7 @@ static int perf_evsel__check_stype(struct perf_evsel *evsel,
 static int perf_evsel__check_attr(struct perf_evsel *evsel,
 				  struct perf_session *session)
 {
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	bool allow_user_set;
 
 	if (perf_header__has_feat(&session->header, HEADER_STAT))
@@ -419,7 +419,7 @@ static int perf_evsel__check_attr(struct perf_evsel *evsel,
 		return -EINVAL;
 
 	if (PRINT_FIELD(SYM) &&
-		!(evsel->attr.sample_type & (PERF_SAMPLE_IP|PERF_SAMPLE_ADDR))) {
+		!(evsel->core.attr.sample_type & (PERF_SAMPLE_IP|PERF_SAMPLE_ADDR))) {
 		pr_err("Display of symbols requested but neither sample IP nor "
 			   "sample address\navailable. Hence, no addresses to convert "
 		       "to symbols.\n");
@@ -431,7 +431,7 @@ static int perf_evsel__check_attr(struct perf_evsel *evsel,
 		return -EINVAL;
 	}
 	if (PRINT_FIELD(DSO) &&
-		!(evsel->attr.sample_type & (PERF_SAMPLE_IP|PERF_SAMPLE_ADDR))) {
+		!(evsel->core.attr.sample_type & (PERF_SAMPLE_IP|PERF_SAMPLE_ADDR))) {
 		pr_err("Display of DSO requested but no address to convert.\n");
 		return -EINVAL;
 	}
@@ -532,7 +532,7 @@ static int perf_session__check_output_opt(struct perf_session *session)
 		if (evsel == NULL)
 			continue;
 
-		set_print_ip_opts(&evsel->attr);
+		set_print_ip_opts(&evsel->core.attr);
 	}
 
 	if (!no_callchain) {
@@ -559,7 +559,7 @@ static int perf_session__check_output_opt(struct perf_session *session)
 		j = PERF_TYPE_TRACEPOINT;
 
 		evlist__for_each_entry(session->evlist, evsel) {
-			if (evsel->attr.type != j)
+			if (evsel->core.attr.type != j)
 				continue;
 
 			if (evsel__has_callchain(evsel)) {
@@ -567,7 +567,7 @@ static int perf_session__check_output_opt(struct perf_session *session)
 				output[j].fields |= PERF_OUTPUT_SYM;
 				output[j].fields |= PERF_OUTPUT_SYMOFFSET;
 				output[j].fields |= PERF_OUTPUT_DSO;
-				set_print_ip_opts(&evsel->attr);
+				set_print_ip_opts(&evsel->core.attr);
 				goto out;
 			}
 		}
@@ -618,7 +618,7 @@ static int perf_sample__fprintf_start(struct perf_sample *sample,
 				      struct perf_evsel *evsel,
 				      u32 type, FILE *fp)
 {
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	unsigned long secs;
 	unsigned long long nsecs;
 	int printed = 0;
@@ -1169,7 +1169,7 @@ static const char *resolve_branch_sym(struct perf_sample *sample,
 				      u64 *ip)
 {
 	struct addr_location addr_al;
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	const char *name = NULL;
 
 	if (sample->flags & (PERF_IP_FLAG_CALL | PERF_IP_FLAG_TRACE_BEGIN)) {
@@ -1196,7 +1196,7 @@ static int perf_sample__fprintf_callindent(struct perf_sample *sample,
 					   struct thread *thread,
 					   struct addr_location *al, FILE *fp)
 {
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	size_t depth = thread_stack__depth(thread, sample->cpu);
 	const char *name = NULL;
 	static int spacing;
@@ -1291,7 +1291,7 @@ static int perf_sample__fprintf_bts(struct perf_sample *sample,
 				    struct addr_location *al,
 				    struct machine *machine, FILE *fp)
 {
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	unsigned int type = output_type(attr->type);
 	bool print_srcline_last = false;
 	int printed = 0;
@@ -1323,7 +1323,7 @@ static int perf_sample__fprintf_bts(struct perf_sample *sample,
 
 	/* print branch_to information */
 	if (PRINT_FIELD(ADDR) ||
-	    ((evsel->attr.sample_type & PERF_SAMPLE_ADDR) &&
+	    ((evsel->core.attr.sample_type & PERF_SAMPLE_ADDR) &&
 	     !output[type].user_set)) {
 		printed += fprintf(fp, " => ");
 		printed += perf_sample__fprintf_addr(sample, thread, attr, fp);
@@ -1596,7 +1596,7 @@ static int perf_sample__fprintf_synth_cbr(struct perf_sample *sample, FILE *fp)
 static int perf_sample__fprintf_synth(struct perf_sample *sample,
 				      struct perf_evsel *evsel, FILE *fp)
 {
-	switch (evsel->attr.config) {
+	switch (evsel->core.attr.config) {
 	case PERF_SYNTH_INTEL_PTWRITE:
 		return perf_sample__fprintf_synth_ptwrite(sample, fp);
 	case PERF_SYNTH_INTEL_MWAIT:
@@ -1794,7 +1794,7 @@ static void process_event(struct perf_script *script,
 			  struct machine *machine)
 {
 	struct thread *thread = al->thread;
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	unsigned int type = output_type(attr->type);
 	struct perf_evsel_script *es = evsel->priv;
 	FILE *fp = es->fp;
@@ -2047,18 +2047,18 @@ static int process_attr(struct perf_tool *tool, union perf_event *event,
 		}
 	}
 
-	if (evsel->attr.type >= PERF_TYPE_MAX &&
-	    evsel->attr.type != PERF_TYPE_SYNTH)
+	if (evsel->core.attr.type >= PERF_TYPE_MAX &&
+	    evsel->core.attr.type != PERF_TYPE_SYNTH)
 		return 0;
 
 	evlist__for_each_entry(evlist, pos) {
-		if (pos->attr.type == evsel->attr.type && pos != evsel)
+		if (pos->core.attr.type == evsel->core.attr.type && pos != evsel)
 			return 0;
 	}
 
-	set_print_ip_opts(&evsel->attr);
+	set_print_ip_opts(&evsel->core.attr);
 
-	if (evsel->attr.sample_type)
+	if (evsel->core.attr.sample_type)
 		err = perf_evsel__check_attr(evsel, scr->session);
 
 	return err;
@@ -2084,7 +2084,7 @@ static int process_comm_event(struct perf_tool *tool,
 	if (perf_event__process_comm(tool, event, sample, machine) < 0)
 		goto out;
 
-	if (!evsel->attr.sample_id_all) {
+	if (!evsel->core.attr.sample_id_all) {
 		sample->cpu = 0;
 		sample->time = 0;
 		sample->tid = event->comm.tid;
@@ -2122,7 +2122,7 @@ static int process_namespaces_event(struct perf_tool *tool,
 	if (perf_event__process_namespaces(tool, event, sample, machine) < 0)
 		goto out;
 
-	if (!evsel->attr.sample_id_all) {
+	if (!evsel->core.attr.sample_id_all) {
 		sample->cpu = 0;
 		sample->time = 0;
 		sample->tid = event->namespaces.tid;
@@ -2158,7 +2158,7 @@ static int process_fork_event(struct perf_tool *tool,
 		return -1;
 	}
 
-	if (!evsel->attr.sample_id_all) {
+	if (!evsel->core.attr.sample_id_all) {
 		sample->cpu = 0;
 		sample->time = event->fork.time;
 		sample->tid = event->fork.tid;
@@ -2190,7 +2190,7 @@ static int process_exit_event(struct perf_tool *tool,
 		return -1;
 	}
 
-	if (!evsel->attr.sample_id_all) {
+	if (!evsel->core.attr.sample_id_all) {
 		sample->cpu = 0;
 		sample->time = 0;
 		sample->tid = event->fork.tid;
@@ -2228,7 +2228,7 @@ static int process_mmap_event(struct perf_tool *tool,
 		return -1;
 	}
 
-	if (!evsel->attr.sample_id_all) {
+	if (!evsel->core.attr.sample_id_all) {
 		sample->cpu = 0;
 		sample->time = 0;
 		sample->tid = event->mmap.tid;
@@ -2262,7 +2262,7 @@ static int process_mmap2_event(struct perf_tool *tool,
 		return -1;
 	}
 
-	if (!evsel->attr.sample_id_all) {
+	if (!evsel->core.attr.sample_id_all) {
 		sample->cpu = 0;
 		sample->time = 0;
 		sample->tid = event->mmap2.tid;
@@ -2361,7 +2361,7 @@ process_bpf_events(struct perf_tool *tool __maybe_unused,
 	if (machine__process_ksymbol(machine, event, sample) < 0)
 		return -1;
 
-	if (!evsel->attr.sample_id_all) {
+	if (!evsel->core.attr.sample_id_all) {
 		perf_event__fprintf(event, stdout);
 		return 0;
 	}
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index b71c4390d333..2ce1bcc81d21 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -393,7 +393,7 @@ static void workload_exec_failed_signal(int signo __maybe_unused, siginfo_t *inf
 
 static bool perf_evsel__should_store_id(struct perf_evsel *counter)
 {
-	return STAT_RECORD || counter->attr.read_format & PERF_FORMAT_ID;
+	return STAT_RECORD || counter->core.attr.read_format & PERF_FORMAT_ID;
 }
 
 static bool is_target_alive(struct target *_target,
diff --git a/tools/perf/builtin-timechart.c b/tools/perf/builtin-timechart.c
index 55ea71365e89..0efae53771cb 100644
--- a/tools/perf/builtin-timechart.c
+++ b/tools/perf/builtin-timechart.c
@@ -562,7 +562,7 @@ static int process_sample_event(struct perf_tool *tool,
 {
 	struct timechart *tchart = container_of(tool, struct timechart, tool);
 
-	if (evsel->attr.sample_type & PERF_SAMPLE_TIME) {
+	if (evsel->core.attr.sample_type & PERF_SAMPLE_TIME) {
 		if (!tchart->first_time || tchart->first_time > sample->time)
 			tchart->first_time = sample->time;
 		if (tchart->last_time < sample->time)
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 6d6fb101231d..552899266a46 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -968,7 +968,7 @@ static int perf_top_overwrite_fallback(struct perf_top *top,
 		return 0;
 
 	evlist__for_each_entry(evlist, counter)
-		counter->attr.write_backward = false;
+		counter->core.attr.write_backward = false;
 	opts->overwrite = false;
 	pr_debug2("fall back to non-overwrite mode\n");
 	return 1;
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 9f9c869e0f26..9769eab0b23c 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -2046,8 +2046,8 @@ static int trace__resolve_callchain(struct trace *trace, struct perf_evsel *evse
 				    struct callchain_cursor *cursor)
 {
 	struct addr_location al;
-	int max_stack = evsel->attr.sample_max_stack ?
-			evsel->attr.sample_max_stack :
+	int max_stack = evsel->core.attr.sample_max_stack ?
+			evsel->core.attr.sample_max_stack :
 			trace->max_stack;
 	int err;
 
@@ -2462,7 +2462,7 @@ static int trace__pgfault(struct trace *trace,
 	if (ttrace == NULL)
 		goto out_put;
 
-	if (evsel->attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ)
+	if (evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ)
 		ttrace->pfmaj++;
 	else
 		ttrace->pfmin++;
@@ -2475,7 +2475,7 @@ static int trace__pgfault(struct trace *trace,
 	trace__fprintf_entry_head(trace, thread, 0, true, sample->time, trace->output);
 
 	fprintf(trace->output, "%sfault [",
-		evsel->attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ ?
+		evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ ?
 		"maj" : "min");
 
 	print_location(trace->output, sample, &al, false, true);
@@ -2523,7 +2523,7 @@ static void trace__set_base_time(struct trace *trace,
 	 * appears in our event stream (vfs_getname comes to mind).
 	 */
 	if (trace->base_time == 0 && !trace->full_time &&
-	    (evsel->attr.sample_type & PERF_SAMPLE_TIME))
+	    (evsel->core.attr.sample_type & PERF_SAMPLE_TIME))
 		trace->base_time = sample->time;
 }
 
@@ -2682,7 +2682,7 @@ static void trace__handle_event(struct trace *trace, union perf_event *event, st
 
 	trace__set_base_time(trace, evsel, sample);
 
-	if (evsel->attr.type == PERF_TYPE_TRACEPOINT &&
+	if (evsel->core.attr.type == PERF_TYPE_TRACEPOINT &&
 	    sample->raw_data == NULL) {
 		fprintf(trace->output, "%s sample with no payload for tid: %d, cpu %d, raw_size=%d, skipping...\n",
 		       perf_evsel__name(evsel), sample->tid,
@@ -2728,7 +2728,7 @@ static int trace__add_syscall_newtp(struct trace *trace)
 		 * leading to the syscall, allow overriding that for
 		 * debugging reasons using --kernel_syscall_callchains
 		 */
-		sys_exit->attr.exclude_callchain_kernel = 1;
+		sys_exit->core.attr.exclude_callchain_kernel = 1;
 	}
 
 	trace->syscalls.events.sys_enter = sys_enter;
@@ -3414,18 +3414,18 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 
 	trace->multiple_threads = thread_map__pid(evlist->threads, 0) == -1 ||
 				  evlist->threads->nr > 1 ||
-				  perf_evlist__first(evlist)->attr.inherit;
+				  perf_evlist__first(evlist)->core.attr.inherit;
 
 	/*
-	 * Now that we already used evsel->attr to ask the kernel to setup the
-	 * events, lets reuse evsel->attr.sample_max_stack as the limit in
+	 * Now that we already used evsel->core.attr to ask the kernel to setup the
+	 * events, lets reuse evsel->core.attr.sample_max_stack as the limit in
 	 * trace__resolve_callchain(), allowing per-event max-stack settings
 	 * to override an explicitly set --max-stack global setting.
 	 */
 	evlist__for_each_entry(evlist, evsel) {
 		if (evsel__has_callchain(evsel) &&
-		    evsel->attr.sample_max_stack == 0)
-			evsel->attr.sample_max_stack = trace->max_stack;
+		    evsel->core.attr.sample_max_stack == 0)
+			evsel->core.attr.sample_max_stack = trace->max_stack;
 	}
 again:
 	before = trace->nr_events;
@@ -3618,10 +3618,10 @@ static int trace__replay(struct trace *trace)
 	}
 
 	evlist__for_each_entry(session->evlist, evsel) {
-		if (evsel->attr.type == PERF_TYPE_SOFTWARE &&
-		    (evsel->attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ ||
-		     evsel->attr.config == PERF_COUNT_SW_PAGE_FAULTS_MIN ||
-		     evsel->attr.config == PERF_COUNT_SW_PAGE_FAULTS))
+		if (evsel->core.attr.type == PERF_TYPE_SOFTWARE &&
+		    (evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MAJ ||
+		     evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS_MIN ||
+		     evsel->core.attr.config == PERF_COUNT_SW_PAGE_FAULTS))
 			evsel->handler = trace__pgfault;
 	}
 
* Unmerged path tools/perf/lib/evsel.c
* Unmerged path tools/perf/lib/include/internal/evsel.h
* Unmerged path tools/perf/lib/include/perf/evsel.h
diff --git a/tools/perf/tests/code-reading.c b/tools/perf/tests/code-reading.c
index aa6df122b175..1945e1bf5d69 100644
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@ -642,9 +642,9 @@ static int do_test_code_reading(bool try_kcore)
 
 		evsel = perf_evlist__first(evlist);
 
-		evsel->attr.comm = 1;
-		evsel->attr.disabled = 1;
-		evsel->attr.enable_on_exec = 0;
+		evsel->core.attr.comm = 1;
+		evsel->core.attr.disabled = 1;
+		evsel->core.attr.enable_on_exec = 0;
 
 		ret = perf_evlist__open(evlist);
 		if (ret < 0) {
diff --git a/tools/perf/tests/event-times.c b/tools/perf/tests/event-times.c
index 1a2686f1fcf0..7408569d747e 100644
--- a/tools/perf/tests/event-times.c
+++ b/tools/perf/tests/event-times.c
@@ -36,7 +36,7 @@ static int attach__enable_on_exec(struct perf_evlist *evlist)
 		return err;
 	}
 
-	evsel->attr.enable_on_exec = 1;
+	evsel->core.attr.enable_on_exec = 1;
 
 	err = perf_evlist__open(evlist);
 	if (err < 0) {
@@ -68,7 +68,7 @@ static int attach__current_disabled(struct perf_evlist *evlist)
 		return -1;
 	}
 
-	evsel->attr.disabled = 1;
+	evsel->core.attr.disabled = 1;
 
 	err = perf_evsel__open_per_thread(evsel, threads);
 	if (err) {
@@ -121,7 +121,7 @@ static int attach__cpu_disabled(struct perf_evlist *evlist)
 		return -1;
 	}
 
-	evsel->attr.disabled = 1;
+	evsel->core.attr.disabled = 1;
 
 	err = perf_evsel__open_per_cpu(evsel, cpus);
 	if (err) {
@@ -179,7 +179,7 @@ static int test_times(int (attach)(struct perf_evlist *),
 	}
 
 	evsel = perf_evlist__last(evlist);
-	evsel->attr.read_format |=
+	evsel->core.attr.read_format |=
 		PERF_FORMAT_TOTAL_TIME_ENABLED |
 		PERF_FORMAT_TOTAL_TIME_RUNNING;
 
diff --git a/tools/perf/tests/keep-tracking.c b/tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e..cb11f9e77d58 100644
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@ -90,9 +90,9 @@ int test__keep_tracking(struct test *test __maybe_unused, int subtest __maybe_un
 
 	evsel = perf_evlist__first(evlist);
 
-	evsel->attr.comm = 1;
-	evsel->attr.disabled = 1;
-	evsel->attr.enable_on_exec = 0;
+	evsel->core.attr.comm = 1;
+	evsel->core.attr.disabled = 1;
+	evsel->core.attr.enable_on_exec = 0;
 
 	if (perf_evlist__open(evlist) < 0) {
 		pr_debug("Unable to open dummy and cycles event\n");
diff --git a/tools/perf/tests/mmap-basic.c b/tools/perf/tests/mmap-basic.c
index 0919b0793e5b..099f76df26df 100644
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@ -79,7 +79,7 @@ int test__basic_mmap(struct test *test __maybe_unused, int subtest __maybe_unuse
 			goto out_delete_evlist;
 		}
 
-		evsels[i]->attr.wakeup_events = 1;
+		evsels[i]->core.attr.wakeup_events = 1;
 		perf_evsel__set_sample_id(evsels[i], false);
 
 		perf_evlist__add(evlist, evsels[i]);
* Unmerged path tools/perf/tests/parse-events.c
diff --git a/tools/perf/tests/sample-parsing.c b/tools/perf/tests/sample-parsing.c
index 361714e2583c..991e23bd4baa 100644
--- a/tools/perf/tests/sample-parsing.c
+++ b/tools/perf/tests/sample-parsing.c
@@ -155,9 +155,11 @@ static int do_test(u64 sample_type, u64 sample_regs, u64 read_format)
 {
 	struct perf_evsel evsel = {
 		.needs_swap = false,
-		.attr = {
-			.sample_type = sample_type,
-			.read_format = read_format,
+		.core = {
+			. attr = {
+				.sample_type = sample_type,
+				.read_format = read_format,
+			},
 		},
 	};
 	union perf_event *event;
@@ -221,10 +223,10 @@ static int do_test(u64 sample_type, u64 sample_regs, u64 read_format)
 	int err, ret = -1;
 
 	if (sample_type & PERF_SAMPLE_REGS_USER)
-		evsel.attr.sample_regs_user = sample_regs;
+		evsel.core.attr.sample_regs_user = sample_regs;
 
 	if (sample_type & PERF_SAMPLE_REGS_INTR)
-		evsel.attr.sample_regs_intr = sample_regs;
+		evsel.core.attr.sample_regs_intr = sample_regs;
 
 	for (i = 0; i < sizeof(regs); i++)
 		*(i + (u8 *)regs) = i & 0xfe;
diff --git a/tools/perf/tests/switch-tracking.c b/tools/perf/tests/switch-tracking.c
index 6cdab5f4812a..5d73bf56a607 100644
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@ -420,8 +420,8 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 
 	perf_evlist__set_tracking_event(evlist, tracking_evsel);
 
-	tracking_evsel->attr.freq = 0;
-	tracking_evsel->attr.sample_period = 1;
+	tracking_evsel->core.attr.freq = 0;
+	tracking_evsel->core.attr.sample_period = 1;
 
 	perf_evsel__set_sample_bit(tracking_evsel, TIME);
 
@@ -435,7 +435,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 	}
 
 	/* Check tracking event is tracking */
-	if (!tracking_evsel->attr.mmap || !tracking_evsel->attr.comm) {
+	if (!tracking_evsel->core.attr.mmap || !tracking_evsel->core.attr.comm) {
 		pr_debug("Tracking event not tracking\n");
 		goto out_err;
 	}
@@ -443,7 +443,7 @@ int test__switch_tracking(struct test *test __maybe_unused, int subtest __maybe_
 	/* Check non-tracking events are not tracking */
 	evlist__for_each_entry(evlist, evsel) {
 		if (evsel != tracking_evsel) {
-			if (evsel->attr.mmap || evsel->attr.comm) {
+			if (evsel->core.attr.mmap || evsel->core.attr.comm) {
 				pr_debug("Non-tracking event is tracking\n");
 				goto out_err;
 			}
diff --git a/tools/perf/tests/task-exit.c b/tools/perf/tests/task-exit.c
index e92fa6029ac7..583ca00bcb1f 100644
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@ -84,16 +84,16 @@ int test__task_exit(struct test *test __maybe_unused, int subtest __maybe_unused
 	}
 
 	evsel = perf_evlist__first(evlist);
-	evsel->attr.task = 1;
+	evsel->core.attr.task = 1;
 #ifdef __s390x__
-	evsel->attr.sample_freq = 1000000;
+	evsel->core.attr.sample_freq = 1000000;
 #else
-	evsel->attr.sample_freq = 1;
+	evsel->core.attr.sample_freq = 1;
 #endif
-	evsel->attr.inherit = 0;
-	evsel->attr.watermark = 0;
-	evsel->attr.wakeup_events = 1;
-	evsel->attr.exclude_kernel = 1;
+	evsel->core.attr.inherit = 0;
+	evsel->core.attr.watermark = 0;
+	evsel->core.attr.wakeup_events = 1;
+	evsel->core.attr.exclude_kernel = 1;
 
 	err = perf_evlist__open(evlist);
 	if (err < 0) {
diff --git a/tools/perf/ui/browsers/res_sample.c b/tools/perf/ui/browsers/res_sample.c
index 8aa3547bb9ff..db94a8eff1b5 100644
--- a/tools/perf/ui/browsers/res_sample.c
+++ b/tools/perf/ui/browsers/res_sample.c
@@ -66,7 +66,7 @@ int res_sample_browse(struct res_sample *res_samples, int num_res,
 
 	timestamp__scnprintf_nsec(r->time, tsample, sizeof tsample);
 
-	attr_to_script(extra_format, &evsel->attr);
+	attr_to_script(extra_format, &evsel->core.attr);
 
 	if (asprintf(&cmd, "%s script %s%s --time %s %s%s %s%s --ns %s %s %s %s %s | less +/%s",
 		     perf,
diff --git a/tools/perf/ui/browsers/scripts.c b/tools/perf/ui/browsers/scripts.c
index 4d565cc14076..97534fc6279a 100644
--- a/tools/perf/ui/browsers/scripts.c
+++ b/tools/perf/ui/browsers/scripts.c
@@ -100,7 +100,7 @@ static int list_scripts(char *script_name, bool *custom,
 		return -1;
 
 	if (evsel)
-		attr_to_script(scriptc.extra_format, &evsel->attr);
+		attr_to_script(scriptc.extra_format, &evsel->core.attr);
 	add_script_option("Show individual samples", "", &scriptc);
 	add_script_option("Show individual samples with assembler", "-F +insn --xed",
 			  &scriptc);
diff --git a/tools/perf/util/auxtrace.c b/tools/perf/util/auxtrace.c
index 7479b73720be..507538918450 100644
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@ -2149,7 +2149,7 @@ static struct perf_pmu *perf_evsel__find_pmu(struct perf_evsel *evsel)
 	struct perf_pmu *pmu = NULL;
 
 	while ((pmu = perf_pmu__scan(pmu)) != NULL) {
-		if (pmu->type == evsel->attr.type)
+		if (pmu->type == evsel->core.attr.type)
 			break;
 	}
 
diff --git a/tools/perf/util/bpf-loader.c b/tools/perf/util/bpf-loader.c
index 6d0dfb777a79..ec3b0c00eec5 100644
--- a/tools/perf/util/bpf-loader.c
+++ b/tools/perf/util/bpf-loader.c
@@ -1421,7 +1421,7 @@ apply_config_evsel_for_key(const char *name, int map_fd, void *pkey,
 		return -BPF_LOADER_ERRNO__OBJCONF_MAP_EVTDIM;
 	}
 
-	attr = &evsel->attr;
+	attr = &evsel->core.attr;
 	if (attr->inherit) {
 		pr_debug("ERROR: Can't put inherit event into map %s\n", name);
 		return -BPF_LOADER_ERRNO__OBJCONF_MAP_EVTINH;
diff --git a/tools/perf/util/cs-etm.c b/tools/perf/util/cs-etm.c
index 3e8fd34d54e1..35c2339377bb 100644
--- a/tools/perf/util/cs-etm.c
+++ b/tools/perf/util/cs-etm.c
@@ -1231,7 +1231,7 @@ static int cs_etm__synth_events(struct cs_etm_auxtrace *etm,
 	int err;
 
 	evlist__for_each_entry(evlist, evsel) {
-		if (evsel->attr.type == etm->pmu_type) {
+		if (evsel->core.attr.type == etm->pmu_type) {
 			found = true;
 			break;
 		}
@@ -1245,7 +1245,7 @@ static int cs_etm__synth_events(struct cs_etm_auxtrace *etm,
 	memset(&attr, 0, sizeof(struct perf_event_attr));
 	attr.size = sizeof(struct perf_event_attr);
 	attr.type = PERF_TYPE_HARDWARE;
-	attr.sample_type = evsel->attr.sample_type & PERF_SAMPLE_MASK;
+	attr.sample_type = evsel->core.attr.sample_type & PERF_SAMPLE_MASK;
 	attr.sample_type |= PERF_SAMPLE_IP | PERF_SAMPLE_TID |
 			    PERF_SAMPLE_PERIOD;
 	if (etm->timeless_decoding)
@@ -1253,13 +1253,13 @@ static int cs_etm__synth_events(struct cs_etm_auxtrace *etm,
 	else
 		attr.sample_type |= PERF_SAMPLE_TIME;
 
-	attr.exclude_user = evsel->attr.exclude_user;
-	attr.exclude_kernel = evsel->attr.exclude_kernel;
-	attr.exclude_hv = evsel->attr.exclude_hv;
-	attr.exclude_host = evsel->attr.exclude_host;
-	attr.exclude_guest = evsel->attr.exclude_guest;
-	attr.sample_id_all = evsel->attr.sample_id_all;
-	attr.read_format = evsel->attr.read_format;
+	attr.exclude_user = evsel->core.attr.exclude_user;
+	attr.exclude_kernel = evsel->core.attr.exclude_kernel;
+	attr.exclude_hv = evsel->core.attr.exclude_hv;
+	attr.exclude_host = evsel->core.attr.exclude_host;
+	attr.exclude_guest = evsel->core.attr.exclude_guest;
+	attr.sample_id_all = evsel->core.attr.sample_id_all;
+	attr.read_format = evsel->core.attr.read_format;
 
 	/* create new id val to be a fixed offset from evsel id */
 	id = evsel->id[0] + 1000000000;
@@ -2304,7 +2304,7 @@ static bool cs_etm__is_timeless_decoding(struct cs_etm_auxtrace *etm)
 	 * with the time bit set.
 	 */
 	evlist__for_each_entry(evlist, evsel) {
-		if ((evsel->attr.sample_type & PERF_SAMPLE_TIME))
+		if ((evsel->core.attr.sample_type & PERF_SAMPLE_TIME))
 			timeless_decoding = false;
 	}
 
diff --git a/tools/perf/util/data-convert-bt.c b/tools/perf/util/data-convert-bt.c
index 59cd62936a46..5f2ce6ad1940 100644
--- a/tools/perf/util/data-convert-bt.c
+++ b/tools/perf/util/data-convert-bt.c
@@ -589,7 +589,7 @@ static int add_generic_values(struct ctf_writer *cw,
 			      struct perf_evsel *evsel,
 			      struct perf_sample *sample)
 {
-	u64 type = evsel->attr.sample_type;
+	u64 type = evsel->core.attr.sample_type;
 	int ret;
 
 	/*
@@ -759,7 +759,7 @@ static int get_sample_cpu(struct ctf_writer *cw, struct perf_sample *sample,
 {
 	int cpu = 0;
 
-	if (evsel->attr.sample_type & PERF_SAMPLE_CPU)
+	if (evsel->core.attr.sample_type & PERF_SAMPLE_CPU)
 		cpu = sample->cpu;
 
 	if (cpu > cw->stream_cnt) {
@@ -797,7 +797,7 @@ static int process_sample_event(struct perf_tool *tool,
 	struct bt_ctf_event_class *event_class;
 	struct bt_ctf_event *event;
 	int ret;
-	unsigned long type = evsel->attr.sample_type;
+	unsigned long type = evsel->core.attr.sample_type;
 
 	if (WARN_ONCE(!priv, "Failed to setup all events.\n"))
 		return 0;
@@ -822,7 +822,7 @@ static int process_sample_event(struct perf_tool *tool,
 	if (ret)
 		return -1;
 
-	if (evsel->attr.type == PERF_TYPE_TRACEPOINT) {
+	if (evsel->core.attr.type == PERF_TYPE_TRACEPOINT) {
 		ret = add_tracepoint_values(cw, event_class, event,
 					    evsel, sample);
 		if (ret)
@@ -1089,7 +1089,7 @@ static int add_bpf_output_types(struct ctf_writer *cw,
 static int add_generic_types(struct ctf_writer *cw, struct perf_evsel *evsel,
 			     struct bt_ctf_event_class *event_class)
 {
-	u64 type = evsel->attr.sample_type;
+	u64 type = evsel->core.attr.sample_type;
 
 	/*
 	 * missing:
@@ -1159,7 +1159,7 @@ static int add_event(struct ctf_writer *cw, struct perf_evsel *evsel)
 	const char *name = perf_evsel__name(evsel);
 	int ret;
 
-	pr("Adding event '%s' (type %d)\n", name, evsel->attr.type);
+	pr("Adding event '%s' (type %d)\n", name, evsel->core.attr.type);
 
 	event_class = bt_ctf_event_class_create(name);
 	if (!event_class)
@@ -1169,7 +1169,7 @@ static int add_event(struct ctf_writer *cw, struct perf_evsel *evsel)
 	if (ret)
 		goto err;
 
-	if (evsel->attr.type == PERF_TYPE_TRACEPOINT) {
+	if (evsel->core.attr.type == PERF_TYPE_TRACEPOINT) {
 		ret = add_tracepoint_types(cw, evsel, event_class);
 		if (ret)
 			goto err;
diff --git a/tools/perf/util/db-export.c b/tools/perf/util/db-export.c
index 4fb68cd21d1b..0039dfcee059 100644
--- a/tools/perf/util/db-export.c
+++ b/tools/perf/util/db-export.c
@@ -397,8 +397,8 @@ int db_export__sample(struct db_export *dbe, union perf_event *event,
 		}
 	}
 
-	if ((evsel->attr.sample_type & PERF_SAMPLE_ADDR) &&
-	    sample_addr_correlates_sym(&evsel->attr)) {
+	if ((evsel->core.attr.sample_type & PERF_SAMPLE_ADDR) &&
+	    sample_addr_correlates_sym(&evsel->core.attr)) {
 		struct addr_location addr_al;
 
 		thread__resolve(thread, &addr_al, sample);
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
diff --git a/tools/perf/util/evsel_fprintf.c b/tools/perf/util/evsel_fprintf.c
index 95ea147f9e18..9e4361e86532 100644
--- a/tools/perf/util/evsel_fprintf.c
+++ b/tools/perf/util/evsel_fprintf.c
@@ -60,22 +60,22 @@ int perf_evsel__fprintf(struct perf_evsel *evsel,
 	printed += fprintf(fp, "%s", perf_evsel__name(evsel));
 
 	if (details->verbose) {
-		printed += perf_event_attr__fprintf(fp, &evsel->attr,
+		printed += perf_event_attr__fprintf(fp, &evsel->core.attr,
 						    __print_attr__fprintf, &first);
 	} else if (details->freq) {
 		const char *term = "sample_freq";
 
-		if (!evsel->attr.freq)
+		if (!evsel->core.attr.freq)
 			term = "sample_period";
 
 		printed += comma_fprintf(fp, &first, " %s=%" PRIu64,
-					 term, (u64)evsel->attr.sample_freq);
+					 term, (u64)evsel->core.attr.sample_freq);
 	}
 
 	if (details->trace_fields) {
 		struct tep_format_field *field;
 
-		if (evsel->attr.type != PERF_TYPE_TRACEPOINT) {
+		if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT) {
 			printed += comma_fprintf(fp, &first, " (not a tracepoint)");
 			goto out;
 		}
diff --git a/tools/perf/util/header.c b/tools/perf/util/header.c
index c3fbdc63c78a..d9779a77f4e1 100644
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@ -488,13 +488,13 @@ static int write_event_desc(struct feat_fd *ff,
 	/*
 	 * size of perf_event_attr struct
 	 */
-	sz = (u32)sizeof(evsel->attr);
+	sz = (u32)sizeof(evsel->core.attr);
 	ret = do_write(ff, &sz, sizeof(sz));
 	if (ret < 0)
 		return ret;
 
 	evlist__for_each_entry(evlist, evsel) {
-		ret = do_write(ff, &evsel->attr, sz);
+		ret = do_write(ff, &evsel->core.attr, sz);
 		if (ret < 0)
 			return ret;
 		/*
@@ -1567,7 +1567,7 @@ static void free_event_desc(struct perf_evsel *events)
 	if (!events)
 		return;
 
-	for (evsel = events; evsel->attr.size; evsel++) {
+	for (evsel = events; evsel->core.attr.size; evsel++) {
 		zfree(&evsel->name);
 		zfree(&evsel->id);
 	}
@@ -1595,12 +1595,12 @@ static struct perf_evsel *read_event_desc(struct feat_fd *ff)
 	if (!buf)
 		goto error;
 
-	/* the last event terminates with evsel->attr.size == 0: */
+	/* the last event terminates with evsel->core.attr.size == 0: */
 	events = calloc(nre + 1, sizeof(*events));
 	if (!events)
 		goto error;
 
-	msz = sizeof(evsel->attr);
+	msz = sizeof(evsel->core.attr);
 	if (sz < msz)
 		msz = sz;
 
@@ -1617,7 +1617,7 @@ static struct perf_evsel *read_event_desc(struct feat_fd *ff)
 		if (ff->ph->needs_swap)
 			perf_event__attr_swap(buf);
 
-		memcpy(&evsel->attr, buf, msz);
+		memcpy(&evsel->core.attr, buf, msz);
 
 		if (do_read_u32(ff, &nr))
 			goto error;
@@ -1675,7 +1675,7 @@ static void print_event_desc(struct feat_fd *ff, FILE *fp)
 		return;
 	}
 
-	for (evsel = events; evsel->attr.size; evsel++) {
+	for (evsel = events; evsel->core.attr.size; evsel++) {
 		fprintf(fp, "# event : name = %s, ", evsel->name);
 
 		if (evsel->ids) {
@@ -1688,7 +1688,7 @@ static void print_event_desc(struct feat_fd *ff, FILE *fp)
 			fprintf(fp, " }");
 		}
 
-		perf_event_attr__fprintf(fp, &evsel->attr, __desc_attr__fprintf, NULL);
+		perf_event_attr__fprintf(fp, &evsel->core.attr, __desc_attr__fprintf, NULL);
 
 		fputc('\n', fp);
 	}
@@ -2130,7 +2130,7 @@ process_event_desc(struct feat_fd *ff, void *data __maybe_unused)
 		ff->events = events;
 	}
 
-	for (evsel = events; evsel->attr.size; evsel++)
+	for (evsel = events; evsel->core.attr.size; evsel++)
 		perf_evlist__set_event_name(session->evlist, evsel);
 
 	if (!session->data->is_pipe)
@@ -3063,7 +3063,7 @@ int perf_session__write_header(struct perf_session *session,
 
 	evlist__for_each_entry(evlist, evsel) {
 		f_attr = (struct perf_file_attr){
-			.attr = evsel->attr,
+			.attr = evsel->core.attr,
 			.ids  = {
 				.offset = evsel->id_offset,
 				.size   = evsel->ids * sizeof(u64),
@@ -3486,9 +3486,9 @@ static int perf_evsel__prepare_tracepoint_event(struct perf_evsel *evsel,
 		return -1;
 	}
 
-	event = tep_find_event(pevent, evsel->attr.config);
+	event = tep_find_event(pevent, evsel->core.attr.config);
 	if (event == NULL) {
-		pr_debug("cannot find event format for %d\n", (int)evsel->attr.config);
+		pr_debug("cannot find event format for %d\n", (int)evsel->core.attr.config);
 		return -1;
 	}
 
@@ -3509,7 +3509,7 @@ static int perf_evlist__prepare_tracepoint_events(struct perf_evlist *evlist,
 	struct perf_evsel *pos;
 
 	evlist__for_each_entry(evlist, pos) {
-		if (pos->attr.type == PERF_TYPE_TRACEPOINT &&
+		if (pos->core.attr.type == PERF_TYPE_TRACEPOINT &&
 		    perf_evsel__prepare_tracepoint_event(pos, pevent))
 			return -1;
 	}
@@ -3920,7 +3920,7 @@ int perf_event__synthesize_attrs(struct perf_tool *tool,
 	int err = 0;
 
 	evlist__for_each_entry(evlist, evsel) {
-		err = perf_event__synthesize_attr(tool, &evsel->attr, evsel->ids,
+		err = perf_event__synthesize_attr(tool, &evsel->core.attr, evsel->ids,
 						  evsel->id, process);
 		if (err) {
 			pr_debug("failed to create perf header attribute\n");
diff --git a/tools/perf/util/hist.c b/tools/perf/util/hist.c
index f24fd1954f6c..4387149efa4c 100644
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@ -2638,7 +2638,7 @@ int __hists__scnprintf_title(struct hists *hists, char *bf, size_t size, bool sh
 		enable_ref = true;
 
 	if (show_freq)
-		scnprintf(sample_freq_str, sizeof(sample_freq_str), " %d Hz,", evsel->attr.sample_freq);
+		scnprintf(sample_freq_str, sizeof(sample_freq_str), " %d Hz,", evsel->core.attr.sample_freq);
 
 	nr_samples = convert_unit(nr_samples, &unit);
 	printed = scnprintf(bf, size,
diff --git a/tools/perf/util/intel-bts.c b/tools/perf/util/intel-bts.c
index 278498772e84..f55d19d95fe5 100644
--- a/tools/perf/util/intel-bts.c
+++ b/tools/perf/util/intel-bts.c
@@ -777,7 +777,7 @@ static int intel_bts_synth_events(struct intel_bts *bts,
 	int err;
 
 	evlist__for_each_entry(evlist, evsel) {
-		if (evsel->attr.type == bts->pmu_type && evsel->ids) {
+		if (evsel->core.attr.type == bts->pmu_type && evsel->ids) {
 			found = true;
 			break;
 		}
@@ -791,18 +791,18 @@ static int intel_bts_synth_events(struct intel_bts *bts,
 	memset(&attr, 0, sizeof(struct perf_event_attr));
 	attr.size = sizeof(struct perf_event_attr);
 	attr.type = PERF_TYPE_HARDWARE;
-	attr.sample_type = evsel->attr.sample_type & PERF_SAMPLE_MASK;
+	attr.sample_type = evsel->core.attr.sample_type & PERF_SAMPLE_MASK;
 	attr.sample_type |= PERF_SAMPLE_IP | PERF_SAMPLE_TID |
 			    PERF_SAMPLE_PERIOD;
 	attr.sample_type &= ~(u64)PERF_SAMPLE_TIME;
 	attr.sample_type &= ~(u64)PERF_SAMPLE_CPU;
-	attr.exclude_user = evsel->attr.exclude_user;
-	attr.exclude_kernel = evsel->attr.exclude_kernel;
-	attr.exclude_hv = evsel->attr.exclude_hv;
-	attr.exclude_host = evsel->attr.exclude_host;
-	attr.exclude_guest = evsel->attr.exclude_guest;
-	attr.sample_id_all = evsel->attr.sample_id_all;
-	attr.read_format = evsel->attr.read_format;
+	attr.exclude_user = evsel->core.attr.exclude_user;
+	attr.exclude_kernel = evsel->core.attr.exclude_kernel;
+	attr.exclude_hv = evsel->core.attr.exclude_hv;
+	attr.exclude_host = evsel->core.attr.exclude_host;
+	attr.exclude_guest = evsel->core.attr.exclude_guest;
+	attr.sample_id_all = evsel->core.attr.sample_id_all;
+	attr.read_format = evsel->core.attr.read_format;
 
 	id = evsel->id[0] + 1000000000;
 	if (!id)
* Unmerged path tools/perf/util/intel-pt.c
diff --git a/tools/perf/util/jitdump.c b/tools/perf/util/jitdump.c
index 18c34f0c1966..0f54a9b4bc69 100644
--- a/tools/perf/util/jitdump.c
+++ b/tools/perf/util/jitdump.c
@@ -124,7 +124,7 @@ jit_validate_events(struct perf_session *session)
 	 * check that all events use CLOCK_MONOTONIC
 	 */
 	evlist__for_each_entry(session->evlist, evsel) {
-		if (evsel->attr.use_clockid == 0 || evsel->attr.clockid != CLOCK_MONOTONIC)
+		if (evsel->core.attr.use_clockid == 0 || evsel->core.attr.clockid != CLOCK_MONOTONIC)
 			return -1;
 	}
 	return 0;
@@ -779,7 +779,7 @@ jit_process(struct perf_session *session,
 	 * perf sets the same sample type to all events as of now
 	 */
 	first = perf_evlist__first(session->evlist);
-	jd.sample_type = first->attr.sample_type;
+	jd.sample_type = first->core.attr.sample_type;
 
 	*nbytes = 0;
 
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index db2090803f4c..a70d836f47e7 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -2499,8 +2499,8 @@ static int thread__resolve_callchain_unwind(struct thread *thread,
 					    int max_stack)
 {
 	/* Can we do dwarf post unwind? */
-	if (!((evsel->attr.sample_type & PERF_SAMPLE_REGS_USER) &&
-	      (evsel->attr.sample_type & PERF_SAMPLE_STACK_USER)))
+	if (!((evsel->core.attr.sample_type & PERF_SAMPLE_REGS_USER) &&
+	      (evsel->core.attr.sample_type & PERF_SAMPLE_STACK_USER)))
 		return 0;
 
 	/* Bail out if nothing was captured. */
* Unmerged path tools/perf/util/parse-events.c
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 1e5b6718dcea..34b7bd3c94ae 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -337,7 +337,7 @@ static PyObject *pyrf_sample_event__repr(struct pyrf_event *pevent)
 
 static bool is_tracepoint(struct pyrf_event *pevent)
 {
-	return pevent->evsel->attr.type == PERF_TYPE_TRACEPOINT;
+	return pevent->evsel->core.attr.type == PERF_TYPE_TRACEPOINT;
 }
 
 static PyObject*
@@ -389,7 +389,7 @@ get_tracepoint_field(struct pyrf_event *pevent, PyObject *attr_name)
 	if (!evsel->tp_format) {
 		struct tep_event *tp_format;
 
-		tp_format = trace_event__tp_format_id(evsel->attr.config);
+		tp_format = trace_event__tp_format_id(evsel->core.attr.config);
 		if (!tp_format)
 			return NULL;
 
@@ -812,7 +812,7 @@ static PyObject *pyrf_evsel__open(struct pyrf_evsel *pevsel,
 	if (pcpus != NULL)
 		cpus = ((struct pyrf_cpu_map *)pcpus)->cpus;
 
-	evsel->attr.inherit = inherit;
+	evsel->core.attr.inherit = inherit;
 	/*
 	 * This will group just the fds for this single evsel, to group
 	 * multiple events, use evlist.open().
diff --git a/tools/perf/util/record.c b/tools/perf/util/record.c
index 9cfc7bf16531..daa3f11e6cb8 100644
--- a/tools/perf/util/record.c
+++ b/tools/perf/util/record.c
@@ -29,7 +29,7 @@ static int perf_do_probe_api(setup_probe_fn_t fn, int cpu, const char *str)
 	evsel = perf_evlist__first(evlist);
 
 	while (1) {
-		fd = sys_perf_event_open(&evsel->attr, pid, cpu, -1, flags);
+		fd = sys_perf_event_open(&evsel->core.attr, pid, cpu, -1, flags);
 		if (fd < 0) {
 			if (pid == -1 && errno == EACCES) {
 				pid = 0;
@@ -43,7 +43,7 @@ static int perf_do_probe_api(setup_probe_fn_t fn, int cpu, const char *str)
 
 	fn(evsel);
 
-	fd = sys_perf_event_open(&evsel->attr, pid, cpu, -1, flags);
+	fd = sys_perf_event_open(&evsel->core.attr, pid, cpu, -1, flags);
 	if (fd < 0) {
 		if (errno == EINVAL)
 			err = -EINVAL;
@@ -80,17 +80,17 @@ static bool perf_probe_api(setup_probe_fn_t fn)
 
 static void perf_probe_sample_identifier(struct perf_evsel *evsel)
 {
-	evsel->attr.sample_type |= PERF_SAMPLE_IDENTIFIER;
+	evsel->core.attr.sample_type |= PERF_SAMPLE_IDENTIFIER;
 }
 
 static void perf_probe_comm_exec(struct perf_evsel *evsel)
 {
-	evsel->attr.comm_exec = 1;
+	evsel->core.attr.comm_exec = 1;
 }
 
 static void perf_probe_context_switch(struct perf_evsel *evsel)
 {
-	evsel->attr.context_switch = 1;
+	evsel->core.attr.context_switch = 1;
 }
 
 bool perf_can_sample_identifier(void)
@@ -155,7 +155,7 @@ void perf_evlist__config(struct perf_evlist *evlist, struct record_opts *opts,
 	evlist__for_each_entry(evlist, evsel) {
 		perf_evsel__config(evsel, opts, callchain);
 		if (evsel->tracking && use_comm_exec)
-			evsel->attr.comm_exec = 1;
+			evsel->core.attr.comm_exec = 1;
 	}
 
 	if (opts->full_auxtrace) {
@@ -170,7 +170,7 @@ void perf_evlist__config(struct perf_evlist *evlist, struct record_opts *opts,
 		struct perf_evsel *first = perf_evlist__first(evlist);
 
 		evlist__for_each_entry(evlist, evsel) {
-			if (evsel->attr.sample_type == first->attr.sample_type)
+			if (evsel->core.attr.sample_type == first->core.attr.sample_type)
 				continue;
 			use_sample_identifier = perf_can_sample_identifier();
 			break;
@@ -284,7 +284,7 @@ bool perf_evlist__can_select_event(struct perf_evlist *evlist, const char *str)
 	}
 
 	while (1) {
-		fd = sys_perf_event_open(&evsel->attr, pid, cpu, -1,
+		fd = sys_perf_event_open(&evsel->core.attr, pid, cpu, -1,
 					 perf_event_open_cloexec_flag());
 		if (fd < 0) {
 			if (pid == -1 && errno == EACCES) {
diff --git a/tools/perf/util/s390-cpumsf.c b/tools/perf/util/s390-cpumsf.c
index 83d2e149ef19..661fb16b85cf 100644
--- a/tools/perf/util/s390-cpumsf.c
+++ b/tools/perf/util/s390-cpumsf.c
@@ -935,7 +935,7 @@ s390_cpumsf_process_event(struct perf_session *session,
 		/* Handle event with raw data */
 		ev_bc000 = perf_evlist__event2evsel(session->evlist, event);
 		if (ev_bc000 &&
-		    ev_bc000->attr.config == PERF_EVENT_CPUM_CF_DIAG)
+		    ev_bc000->core.attr.config == PERF_EVENT_CPUM_CF_DIAG)
 			err = s390_cpumcf_dumpctr(sf, sample);
 		return err;
 	}
diff --git a/tools/perf/util/s390-sample-raw.c b/tools/perf/util/s390-sample-raw.c
index 6650f599ed9c..e0888c3d9b91 100644
--- a/tools/perf/util/s390-sample-raw.c
+++ b/tools/perf/util/s390-sample-raw.c
@@ -210,7 +210,7 @@ void perf_evlist__s390_sample_raw(struct perf_evlist *evlist, union perf_event *
 
 	ev_bc000 = perf_evlist__event2evsel(evlist, event);
 	if (ev_bc000 == NULL ||
-	    ev_bc000->attr.config != PERF_EVENT_CPUM_CF_DIAG)
+	    ev_bc000->core.attr.config != PERF_EVENT_CPUM_CF_DIAG)
 		return;
 
 	/* Display raw data on screen */
diff --git a/tools/perf/util/scripting-engines/trace-event-perl.c b/tools/perf/util/scripting-engines/trace-event-perl.c
index 61aa7f3df915..45960735f7c1 100644
--- a/tools/perf/util/scripting-engines/trace-event-perl.c
+++ b/tools/perf/util/scripting-engines/trace-event-perl.c
@@ -353,11 +353,11 @@ static void perl_process_tracepoint(struct perf_sample *sample,
 
 	dSP;
 
-	if (evsel->attr.type != PERF_TYPE_TRACEPOINT)
+	if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT)
 		return;
 
 	if (!event) {
-		pr_debug("ug! no event found for type %" PRIu64, (u64)evsel->attr.config);
+		pr_debug("ug! no event found for type %" PRIu64, (u64)evsel->core.attr.config);
 		return;
 	}
 
@@ -442,7 +442,7 @@ static void perl_process_event_generic(union perf_event *event,
 	SAVETMPS;
 	PUSHMARK(SP);
 	XPUSHs(sv_2mortal(newSVpvn((const char *)event, event->header.size)));
-	XPUSHs(sv_2mortal(newSVpvn((const char *)&evsel->attr, sizeof(evsel->attr))));
+	XPUSHs(sv_2mortal(newSVpvn((const char *)&evsel->core.attr, sizeof(evsel->core.attr))));
 	XPUSHs(sv_2mortal(newSVpvn((const char *)sample, sizeof(*sample))));
 	XPUSHs(sv_2mortal(newSVpvn((const char *)sample->raw_data, sample->raw_size)));
 	PUTBACK;
diff --git a/tools/perf/util/scripting-engines/trace-event-python.c b/tools/perf/util/scripting-engines/trace-event-python.c
index 25dc1d765553..d3d501e9edb8 100644
--- a/tools/perf/util/scripting-engines/trace-event-python.c
+++ b/tools/perf/util/scripting-engines/trace-event-python.c
@@ -636,7 +636,7 @@ static void set_sample_read_in_dict(PyObject *dict_sample,
 					 struct perf_sample *sample,
 					 struct perf_evsel *evsel)
 {
-	u64 read_format = evsel->attr.read_format;
+	u64 read_format = evsel->core.attr.read_format;
 	PyObject *values;
 	unsigned int i;
 
@@ -707,7 +707,7 @@ static void set_regs_in_dict(PyObject *dict,
 			     struct perf_sample *sample,
 			     struct perf_evsel *evsel)
 {
-	struct perf_event_attr *attr = &evsel->attr;
+	struct perf_event_attr *attr = &evsel->core.attr;
 	char bf[512];
 
 	regs_map(&sample->intr_regs, attr->sample_regs_intr, bf, sizeof(bf));
@@ -737,7 +737,7 @@ static PyObject *get_perf_sample_dict(struct perf_sample *sample,
 		Py_FatalError("couldn't create Python dictionary");
 
 	pydict_set_item_string_decref(dict, "ev_name", _PyUnicode_FromString(perf_evsel__name(evsel)));
-	pydict_set_item_string_decref(dict, "attr", _PyBytes_FromStringAndSize((const char *)&evsel->attr, sizeof(evsel->attr)));
+	pydict_set_item_string_decref(dict, "attr", _PyBytes_FromStringAndSize((const char *)&evsel->core.attr, sizeof(evsel->core.attr)));
 
 	pydict_set_item_string_decref(dict_sample, "pid",
 			_PyLong_FromLong(sample->pid));
@@ -809,7 +809,7 @@ static void python_process_tracepoint(struct perf_sample *sample,
 
 	if (!event) {
 		snprintf(handler_name, sizeof(handler_name),
-			 "ug! no event found for type %" PRIu64, (u64)evsel->attr.config);
+			 "ug! no event found for type %" PRIu64, (u64)evsel->core.attr.config);
 		Py_FatalError(handler_name);
 	}
 
@@ -1163,7 +1163,7 @@ static void python_export_synth(struct db_export *dbe, struct export_sample *es)
 	t = tuple_new(3);
 
 	tuple_set_u64(t, 0, es->db_id);
-	tuple_set_u64(t, 1, es->evsel->attr.config);
+	tuple_set_u64(t, 1, es->evsel->core.attr.config);
 	tuple_set_bytes(t, 2, es->sample->raw_data, es->sample->raw_size);
 
 	call_object(tables->synth_handler, t, "synth_data");
@@ -1178,7 +1178,7 @@ static int python_export_sample(struct db_export *dbe,
 
 	python_export_sample_table(dbe, es);
 
-	if (es->evsel->attr.type == PERF_TYPE_SYNTH && tables->synth_handler)
+	if (es->evsel->core.attr.type == PERF_TYPE_SYNTH && tables->synth_handler)
 		python_export_synth(dbe, es);
 
 	return 0;
@@ -1316,7 +1316,7 @@ static void python_process_event(union perf_event *event,
 {
 	struct tables *tables = &tables_global;
 
-	switch (evsel->attr.type) {
+	switch (evsel->core.attr.type) {
 	case PERF_TYPE_TRACEPOINT:
 		python_process_tracepoint(sample, evsel, al);
 		break;
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index 8e7c741a2b51..80f6881f7ddf 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -155,7 +155,7 @@ static bool perf_session__has_comm_exec(struct perf_session *session)
 	struct perf_evsel *evsel;
 
 	evlist__for_each_entry(session->evlist, evsel) {
-		if (evsel->attr.comm_exec)
+		if (evsel->core.attr.comm_exec)
 			return true;
 	}
 
@@ -1217,7 +1217,7 @@ static void dump_sample(struct perf_evsel *evsel, union perf_event *event,
 	       event->header.misc, sample->pid, sample->tid, sample->ip,
 	       sample->period, sample->addr);
 
-	sample_type = evsel->attr.sample_type;
+	sample_type = evsel->core.attr.sample_type;
 
 	if (evsel__has_callchain(evsel))
 		callchain__printf(evsel, sample);
@@ -1247,7 +1247,7 @@ static void dump_sample(struct perf_evsel *evsel, union perf_event *event,
 		printf("... transaction: %" PRIx64 "\n", sample->transaction);
 
 	if (sample_type & PERF_SAMPLE_READ)
-		sample_read__printf(sample, evsel->attr.read_format);
+		sample_read__printf(sample, evsel->core.attr.read_format);
 }
 
 static void dump_read(struct perf_evsel *evsel, union perf_event *event)
@@ -1265,7 +1265,7 @@ static void dump_read(struct perf_evsel *evsel, union perf_event *event)
 	if (!evsel)
 		return;
 
-	read_format = evsel->attr.read_format;
+	read_format = evsel->core.attr.read_format;
 
 	if (read_format & PERF_FORMAT_TOTAL_TIME_ENABLED)
 		printf("... time enabled : %" PRIu64 "\n", read_event->time_enabled);
@@ -1362,8 +1362,8 @@ static int
 			     struct machine *machine)
 {
 	/* We know evsel != NULL. */
-	u64 sample_type = evsel->attr.sample_type;
-	u64 read_format = evsel->attr.read_format;
+	u64 sample_type = evsel->core.attr.sample_type;
+	u64 read_format = evsel->core.attr.read_format;
 
 	/* Standard sample delivery. */
 	if (!(sample_type & PERF_SAMPLE_READ))
@@ -1716,7 +1716,7 @@ perf_session__warn_order(const struct perf_session *session)
 	bool should_warn = true;
 
 	evlist__for_each_entry(session->evlist, evsel) {
-		if (evsel->attr.write_backward)
+		if (evsel->core.attr.write_backward)
 			should_warn = false;
 	}
 
@@ -2193,7 +2193,7 @@ bool perf_session__has_traces(struct perf_session *session, const char *msg)
 	struct perf_evsel *evsel;
 
 	evlist__for_each_entry(session->evlist, evsel) {
-		if (evsel->attr.type == PERF_TYPE_TRACEPOINT)
+		if (evsel->core.attr.type == PERF_TYPE_TRACEPOINT)
 			return true;
 	}
 
@@ -2270,7 +2270,7 @@ struct perf_evsel *perf_session__find_first_evtype(struct perf_session *session,
 	struct perf_evsel *pos;
 
 	evlist__for_each_entry(session->evlist, pos) {
-		if (pos->attr.type == type)
+		if (pos->core.attr.type == type)
 			return pos;
 	}
 	return NULL;
@@ -2290,7 +2290,7 @@ int perf_session__cpu_bitmap(struct perf_session *session,
 		if (!evsel)
 			continue;
 
-		if (!(evsel->attr.sample_type & PERF_SAMPLE_CPU)) {
+		if (!(evsel->core.attr.sample_type & PERF_SAMPLE_CPU)) {
 			pr_err("File does not contain CPU events. "
 			       "Remove -C option to proceed.\n");
 			return -1;
diff --git a/tools/perf/util/sort.c b/tools/perf/util/sort.c
index 5d2518e89fc4..44785de786c9 100644
--- a/tools/perf/util/sort.c
+++ b/tools/perf/util/sort.c
@@ -726,7 +726,7 @@ sort__trace_cmp(struct hist_entry *left, struct hist_entry *right)
 	struct perf_evsel *evsel;
 
 	evsel = hists_to_evsel(left->hists);
-	if (evsel->attr.type != PERF_TYPE_TRACEPOINT)
+	if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT)
 		return 0;
 
 	if (left->trace_output == NULL)
@@ -743,7 +743,7 @@ static int hist_entry__trace_snprintf(struct hist_entry *he, char *bf,
 	struct perf_evsel *evsel;
 
 	evsel = hists_to_evsel(he->hists);
-	if (evsel->attr.type != PERF_TYPE_TRACEPOINT)
+	if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT)
 		return scnprintf(bf, size, "%-.*s", width, "N/A");
 
 	if (he->trace_output == NULL)
@@ -2391,7 +2391,7 @@ static int add_all_dynamic_fields(struct perf_evlist *evlist, bool raw_trace,
 	struct perf_evsel *evsel;
 
 	evlist__for_each_entry(evlist, evsel) {
-		if (evsel->attr.type != PERF_TYPE_TRACEPOINT)
+		if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT)
 			continue;
 
 		ret = add_evsel_fields(evsel, raw_trace, level);
@@ -2409,7 +2409,7 @@ static int add_all_matching_fields(struct perf_evlist *evlist,
 	struct tep_format_field *field;
 
 	evlist__for_each_entry(evlist, evsel) {
-		if (evsel->attr.type != PERF_TYPE_TRACEPOINT)
+		if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT)
 			continue;
 
 		field = tep_find_any_field(evsel->tp_format, field_name);
@@ -2470,7 +2470,7 @@ static int add_dynamic_entry(struct perf_evlist *evlist, const char *tok,
 		goto out;
 	}
 
-	if (evsel->attr.type != PERF_TYPE_TRACEPOINT) {
+	if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT) {
 		pr_debug("%s is not a tracepoint event\n", event_name);
 		ret = -EINVAL;
 		goto out;
@@ -2728,7 +2728,7 @@ static const char *get_default_sort_order(struct perf_evlist *evlist)
 		goto out_no_evlist;
 
 	evlist__for_each_entry(evlist, evsel) {
-		if (evsel->attr.type != PERF_TYPE_TRACEPOINT) {
+		if (evsel->core.attr.type != PERF_TYPE_TRACEPOINT) {
 			use_trace = false;
 			break;
 		}
* Unmerged path tools/perf/util/stat-display.c
diff --git a/tools/perf/util/stat-shadow.c b/tools/perf/util/stat-shadow.c
index accb1bf1cfd8..1f73eb4c358b 100644
--- a/tools/perf/util/stat-shadow.c
+++ b/tools/perf/util/stat-shadow.c
@@ -150,15 +150,15 @@ static int evsel_context(struct perf_evsel *evsel)
 {
 	int ctx = 0;
 
-	if (evsel->attr.exclude_kernel)
+	if (evsel->core.attr.exclude_kernel)
 		ctx |= CTX_BIT_KERNEL;
-	if (evsel->attr.exclude_user)
+	if (evsel->core.attr.exclude_user)
 		ctx |= CTX_BIT_USER;
-	if (evsel->attr.exclude_hv)
+	if (evsel->core.attr.exclude_hv)
 		ctx |= CTX_BIT_HV;
-	if (evsel->attr.exclude_host)
+	if (evsel->core.attr.exclude_host)
 		ctx |= CTX_BIT_HOST;
-	if (evsel->attr.exclude_idle)
+	if (evsel->core.attr.exclude_idle)
 		ctx |= CTX_BIT_IDLE;
 
 	return ctx;
@@ -829,8 +829,8 @@ void perf_stat__print_shadow_stats(struct perf_stat_config *config,
 		else
 			print_metric(config, ctxp, NULL, NULL, "of all branches", 0);
 	} else if (
-		evsel->attr.type == PERF_TYPE_HW_CACHE &&
-		evsel->attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |
+		evsel->core.attr.type == PERF_TYPE_HW_CACHE &&
+		evsel->core.attr.config ==  ( PERF_COUNT_HW_CACHE_L1D |
 					((PERF_COUNT_HW_CACHE_OP_READ) << 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) << 16))) {
 
@@ -839,8 +839,8 @@ void perf_stat__print_shadow_stats(struct perf_stat_config *config,
 		else
 			print_metric(config, ctxp, NULL, NULL, "of all L1-dcache hits", 0);
 	} else if (
-		evsel->attr.type == PERF_TYPE_HW_CACHE &&
-		evsel->attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |
+		evsel->core.attr.type == PERF_TYPE_HW_CACHE &&
+		evsel->core.attr.config ==  ( PERF_COUNT_HW_CACHE_L1I |
 					((PERF_COUNT_HW_CACHE_OP_READ) << 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) << 16))) {
 
@@ -849,8 +849,8 @@ void perf_stat__print_shadow_stats(struct perf_stat_config *config,
 		else
 			print_metric(config, ctxp, NULL, NULL, "of all L1-icache hits", 0);
 	} else if (
-		evsel->attr.type == PERF_TYPE_HW_CACHE &&
-		evsel->attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |
+		evsel->core.attr.type == PERF_TYPE_HW_CACHE &&
+		evsel->core.attr.config ==  ( PERF_COUNT_HW_CACHE_DTLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) << 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) << 16))) {
 
@@ -859,8 +859,8 @@ void perf_stat__print_shadow_stats(struct perf_stat_config *config,
 		else
 			print_metric(config, ctxp, NULL, NULL, "of all dTLB cache hits", 0);
 	} else if (
-		evsel->attr.type == PERF_TYPE_HW_CACHE &&
-		evsel->attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |
+		evsel->core.attr.type == PERF_TYPE_HW_CACHE &&
+		evsel->core.attr.config ==  ( PERF_COUNT_HW_CACHE_ITLB |
 					((PERF_COUNT_HW_CACHE_OP_READ) << 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) << 16))) {
 
@@ -869,8 +869,8 @@ void perf_stat__print_shadow_stats(struct perf_stat_config *config,
 		else
 			print_metric(config, ctxp, NULL, NULL, "of all iTLB cache hits", 0);
 	} else if (
-		evsel->attr.type == PERF_TYPE_HW_CACHE &&
-		evsel->attr.config ==  ( PERF_COUNT_HW_CACHE_LL |
+		evsel->core.attr.type == PERF_TYPE_HW_CACHE &&
+		evsel->core.attr.config ==  ( PERF_COUNT_HW_CACHE_LL |
 					((PERF_COUNT_HW_CACHE_OP_READ) << 8) |
 					 ((PERF_COUNT_HW_CACHE_RESULT_MISS) << 16))) {
 
* Unmerged path tools/perf/util/stat.c
diff --git a/tools/perf/util/top.c b/tools/perf/util/top.c
index 4c8da8c4435f..204ccdd4c441 100644
--- a/tools/perf/util/top.c
+++ b/tools/perf/util/top.c
@@ -74,7 +74,7 @@ size_t perf_top__header_snprintf(struct perf_top *top, char *bf, size_t size)
 	if (top->evlist->nr_entries == 1) {
 		struct perf_evsel *first = perf_evlist__first(top->evlist);
 		ret += SNPRINTF(bf + ret, size - ret, "%" PRIu64 "%s ",
-				(uint64_t)first->attr.sample_period,
+				(uint64_t)first->core.attr.sample_period,
 				opts->freq ? "Hz" : "");
 	}
 
* Unmerged path tools/perf/util/trace-event-info.c
