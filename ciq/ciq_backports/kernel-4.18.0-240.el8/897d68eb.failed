scsi: qla2xxx: Fix WARN_ON in qla_nvme_register_hba

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arun Easi <aeasi@marvell.com>
commit 897d68eb816bfae5ad9e870f68350dbb599d6e0e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/897d68eb.failed

qla_nvme_register_hba() puts out a warning when there are not enough queue
pairs available for FC-NVME.  Just fail the NVME registration rather than a
WARNING + call Trace.

Link: https://lore.kernel.org/r/20200806111014.28434-8-njavali@marvell.com
	Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
	Signed-off-by: Arun Easi <aeasi@marvell.com>
	Signed-off-by: Nilesh Javali <njavali@marvell.com>
	Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
(cherry picked from commit 897d68eb816bfae5ad9e870f68350dbb599d6e0e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/qla2xxx/qla_def.h
diff --cc drivers/scsi/qla2xxx/qla_def.h
index 103d2f113826,1bc090d8a71b..000000000000
--- a/drivers/scsi/qla2xxx/qla_def.h
+++ b/drivers/scsi/qla2xxx/qla_def.h
@@@ -3684,6 -3874,13 +3684,16 @@@ struct qla_hw_data 
  		uint32_t        n2n_bigger:1;
  		uint32_t	secure_adapter:1;
  		uint32_t	secure_fw:1;
++<<<<<<< HEAD
++=======
+ 				/* Supported by Adapter */
+ 		uint32_t	scm_supported_a:1;
+ 				/* Supported by Firmware */
+ 		uint32_t	scm_supported_f:1;
+ 				/* Enabled in Driver */
+ 		uint32_t	scm_enabled:1;
+ 		uint32_t	max_req_queue_warned:1;
++>>>>>>> 897d68eb816b (scsi: qla2xxx: Fix WARN_ON in qla_nvme_register_hba)
  	} flags;
  
  	uint16_t max_exchg;
* Unmerged path drivers/scsi/qla2xxx/qla_def.h
diff --git a/drivers/scsi/qla2xxx/qla_nvme.c b/drivers/scsi/qla2xxx/qla_nvme.c
index 941aa53363f5..554fbabf9dde 100644
--- a/drivers/scsi/qla2xxx/qla_nvme.c
+++ b/drivers/scsi/qla2xxx/qla_nvme.c
@@ -686,7 +686,15 @@ int qla_nvme_register_hba(struct scsi_qla_host *vha)
 	tmpl = &qla_nvme_fc_transport;
 
 	WARN_ON(vha->nvme_local_port);
-	WARN_ON(ha->max_req_queues < 3);
+
+	if (ha->max_req_queues < 3) {
+		if (!ha->flags.max_req_queue_warned)
+			ql_log(ql_log_info, vha, 0x2120,
+			       "%s: Disabling FC-NVME due to lack of free queue pairs (%d).\n",
+			       __func__, ha->max_req_queues);
+		ha->flags.max_req_queue_warned = 1;
+		return ret;
+	}
 
 	qla_nvme_fc_transport.max_hw_queues =
 	    min((uint8_t)(qla_nvme_fc_transport.max_hw_queues),
