libperf: Add 'refcnt' to struct perf_mmap

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit e03edfeac0330eaa2b19b82fc942611c1abf2120
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e03edfea.failed

Move 'refcnt' from tools/perf's mmap to libperf's perf_mmap struct.

Committer notes:

Add the refcount.h include directive here, now it is needed.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-15-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit e03edfeac0330eaa2b19b82fc942611c1abf2120)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/util/mmap.c
#	tools/perf/util/mmap.h
diff --cc tools/perf/util/mmap.c
index 850493205040,d6406d216cfe..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -106,16 -109,16 +106,20 @@@ static bool perf_mmap__empty(struct per
  	return perf_mmap__read_head(map) == map->prev && !map->auxtrace_mmap.base;
  }
  
 -void perf_mmap__get(struct mmap *map)
 +void perf_mmap__get(struct perf_mmap *map)
  {
- 	refcount_inc(&map->refcnt);
+ 	refcount_inc(&map->core.refcnt);
  }
  
 -void perf_mmap__put(struct mmap *map)
 +void perf_mmap__put(struct perf_mmap *map)
  {
++<<<<<<< HEAD
 +	BUG_ON(map->base && refcount_read(&map->refcnt) == 0);
++=======
+ 	BUG_ON(map->core.base && refcount_read(&map->core.refcnt) == 0);
++>>>>>>> e03edfeac033 (libperf: Add 'refcnt' to struct perf_mmap)
  
- 	if (refcount_dec_and_test(&map->refcnt))
+ 	if (refcount_dec_and_test(&map->core.refcnt))
  		perf_mmap__munmap(map);
  }
  
@@@ -314,11 -317,11 +318,19 @@@ void perf_mmap__munmap(struct perf_mma
  		munmap(map->data, perf_mmap__mmap_len(map));
  		map->data = NULL;
  	}
++<<<<<<< HEAD
 +	if (map->base != NULL) {
 +		munmap(map->base, perf_mmap__mmap_len(map));
 +		map->base = NULL;
 +		map->fd = -1;
 +		refcount_set(&map->refcnt, 0);
++=======
+ 	if (map->core.base != NULL) {
+ 		munmap(map->core.base, perf_mmap__mmap_len(map));
+ 		map->core.base = NULL;
+ 		map->core.fd = -1;
+ 		refcount_set(&map->core.refcnt, 0);
++>>>>>>> e03edfeac033 (libperf: Add 'refcnt' to struct perf_mmap)
  	}
  	auxtrace_mmap__munmap(&map->auxtrace_mmap);
  }
@@@ -364,19 -367,19 +376,19 @@@ int perf_mmap__mmap(struct perf_mmap *m
  	 * evlist layer can't just drop it when filtering events in
  	 * perf_evlist__filter_pollfd().
  	 */
- 	refcount_set(&map->refcnt, 2);
+ 	refcount_set(&map->core.refcnt, 2);
  	map->prev = 0;
 -	map->core.mask = mp->mask;
 -	map->core.base = mmap(NULL, perf_mmap__mmap_len(map), mp->prot,
 +	map->mask = mp->mask;
 +	map->base = mmap(NULL, perf_mmap__mmap_len(map), mp->prot,
  			 MAP_SHARED, fd, 0);
 -	if (map->core.base == MAP_FAILED) {
 +	if (map->base == MAP_FAILED) {
  		pr_debug2("failed to mmap perf event ring buffer, error %d\n",
  			  errno);
 -		map->core.base = NULL;
 +		map->base = NULL;
  		return -1;
  	}
 -	map->core.fd = fd;
 -	map->core.cpu = cpu;
 +	map->fd = fd;
 +	map->cpu = cpu;
  
  	perf_mmap__setup_affinity_mask(map, mp);
  
diff --cc tools/perf/util/mmap.h
index 274ce389cd84,5febd22fbe2e..000000000000
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@@ -18,12 -20,8 +18,17 @@@ struct aiocb
   *
   * @refcnt - e.g. code using PERF_EVENT_IOC_SET_OUTPUT to share this
   */
++<<<<<<< HEAD
 +struct perf_mmap {
 +	void		 *base;
 +	int		 mask;
 +	int		 fd;
 +	int		 cpu;
 +	refcount_t	 refcnt;
++=======
+ struct mmap {
+ 	struct perf_mmap	core;
++>>>>>>> e03edfeac033 (libperf: Add 'refcnt' to struct perf_mmap)
  	u64		 prev;
  	u64		 start;
  	u64		 end;
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/include/internal/mmap.h
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index 29a998d183ce..0628615e8ac9 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -741,7 +741,7 @@ static struct perf_mmap *perf_evlist__alloc_mmap(struct perf_evlist *evlist,
 		 * Each PERF_EVENT_IOC_SET_OUTPUT points to this mmap and
 		 * thus does perf_mmap__get() on it.
 		 */
-		refcount_set(&map[i].refcnt, 0);
+		refcount_set(&map[i].core.refcnt, 0);
 	}
 	return map;
 }
* Unmerged path tools/perf/util/mmap.c
* Unmerged path tools/perf/util/mmap.h
