perf annotate: Stop using map->groups, use map_symbol->mg instead

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 94e44b9ca52a72cddd07111a8beb12a2f217c6a2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/94e44b9c.failed

These were the last uses of map->groups, next cset will nuke it.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-n3g0foos7l7uxq9nar0zo0vj@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 94e44b9ca52a72cddd07111a8beb12a2f217c6a2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/s390/annotate/instructions.c
#	tools/perf/ui/browsers/annotate.c
#	tools/perf/util/annotate.c
diff --cc tools/perf/arch/s390/annotate/instructions.c
index 20050fb54948,2a6662e42f89..000000000000
--- a/tools/perf/arch/s390/annotate/instructions.c
+++ b/tools/perf/arch/s390/annotate/instructions.c
@@@ -38,9 -38,9 +38,15 @@@ static int s390_call__parse(struct arc
  		return -1;
  	target.addr = map__objdump_2mem(map, ops->target.addr);
  
++<<<<<<< HEAD
 +	if (map_groups__find_ams(map->groups, &target) == 0 &&
 +	    map__rip_2objdump(target.map, map->map_ip(target.map, target.addr)) == ops->target.addr)
 +		ops->target.sym = target.sym;
++=======
+ 	if (map_groups__find_ams(ms->mg, &target) == 0 &&
+ 	    map__rip_2objdump(target.ms.map, map->map_ip(target.ms.map, target.addr)) == ops->target.addr)
+ 		ops->target.sym = target.ms.sym;
++>>>>>>> 94e44b9ca52a (perf annotate: Stop using map->groups, use map_symbol->mg instead)
  
  	return 0;
  }
diff --cc tools/perf/ui/browsers/annotate.c
index e67880bf1efe,992705c78bd0..000000000000
--- a/tools/perf/ui/browsers/annotate.c
+++ b/tools/perf/ui/browsers/annotate.c
@@@ -429,8 -430,11 +429,14 @@@ static bool annotate_browser__callq(str
  		return true;
  	}
  
++<<<<<<< HEAD
++=======
+ 	target_ms.mg  = ms->mg;
+ 	target_ms.map = ms->map;
+ 	target_ms.sym = dl->ops.target.sym;
++>>>>>>> 94e44b9ca52a (perf annotate: Stop using map->groups, use map_symbol->mg instead)
  	pthread_mutex_unlock(&notes->lock);
 -	symbol__tui_annotate(&target_ms, evsel, hbt, browser->opts);
 +	symbol__tui_annotate(dl->ops.target.sym, ms->map, evsel, hbt, browser->opts);
  	sym_title(ms->sym, ms->map, title, sizeof(title), browser->opts->percent_type);
  	ui_browser__show_title(&browser->b, title);
  	return true;
diff --cc tools/perf/util/annotate.c
index e5850bb6616c,5ea9a4534848..000000000000
--- a/tools/perf/util/annotate.c
+++ b/tools/perf/util/annotate.c
@@@ -269,9 -271,9 +269,15 @@@ static int call__parse(struct arch *arc
  find_target:
  	target.addr = map__objdump_2mem(map, ops->target.addr);
  
++<<<<<<< HEAD
 +	if (map_groups__find_ams(map->groups, &target) == 0 &&
 +	    map__rip_2objdump(target.map, map->map_ip(target.map, target.addr)) == ops->target.addr)
 +		ops->target.sym = target.sym;
++=======
+ 	if (map_groups__find_ams(ms->mg, &target) == 0 &&
+ 	    map__rip_2objdump(target.ms.map, map->map_ip(target.ms.map, target.addr)) == ops->target.addr)
+ 		ops->target.sym = target.ms.sym;
++>>>>>>> 94e44b9ca52a (perf annotate: Stop using map->groups, use map_symbol->mg instead)
  
  	return 0;
  
@@@ -389,9 -391,9 +395,15 @@@ static int jump__parse(struct arch *arc
  	 * Actual navigation will come next, with further understanding of how
  	 * the symbol searching and disassembly should be done.
  	 */
++<<<<<<< HEAD
 +	if (map_groups__find_ams(map->groups, &target) == 0 &&
 +	    map__rip_2objdump(target.map, map->map_ip(target.map, target.addr)) == ops->target.addr)
 +		ops->target.sym = target.sym;
++=======
+ 	if (map_groups__find_ams(ms->mg, &target) == 0 &&
+ 	    map__rip_2objdump(target.ms.map, map->map_ip(target.ms.map, target.addr)) == ops->target.addr)
+ 		ops->target.sym = target.ms.sym;
++>>>>>>> 94e44b9ca52a (perf annotate: Stop using map->groups, use map_symbol->mg instead)
  
  	if (!ops->target.outside) {
  		ops->target.offset = target.addr - start;
@@@ -1538,13 -1541,13 +1550,19 @@@ static int symbol__parse_objdump_line(s
  	/* kcore has no symbols, so add the call target symbol */
  	if (dl->ins.ops && ins__is_call(&dl->ins) && !dl->ops.target.sym) {
  		struct addr_map_symbol target = {
 +			.map = map,
  			.addr = dl->ops.target.addr,
 -			.ms = { .map = map, },
  		};
  
++<<<<<<< HEAD
 +		if (!map_groups__find_ams(map->groups, &target) &&
 +		    target.sym->start == target.al_addr)
 +			dl->ops.target.sym = target.sym;
++=======
+ 		if (!map_groups__find_ams(args->ms.mg, &target) &&
+ 		    target.ms.sym->start == target.al_addr)
+ 			dl->ops.target.sym = target.ms.sym;
++>>>>>>> 94e44b9ca52a (perf annotate: Stop using map->groups, use map_symbol->mg instead)
  	}
  
  	annotation_line__add(&dl->al, &notes->src->source);
* Unmerged path tools/perf/arch/s390/annotate/instructions.c
* Unmerged path tools/perf/ui/browsers/annotate.c
* Unmerged path tools/perf/util/annotate.c
