KVM: nSVM: inject exceptions via svm_check_nested_events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Paolo Bonzini <pbonzini@redhat.com>
commit 7c86663b68bab393633d8312a0d25a3d004de182
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7c86663b.failed

This allows exceptions injected by the emulator to be properly delivered
as vmexits.  The code also becomes simpler, because we can just let all
L0-intercepted exceptions go through the usual path.  In particular, our
emulation of the VMX #DB exit qualification is very much simplified,
because the vmexit injection path can use kvm_deliver_exception_payload
to update DR6.

	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 7c86663b68bab393633d8312a0d25a3d004de182)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/svm/nested.c
#	arch/x86/kvm/svm/svm.h
#	arch/x86/kvm/x86.c
diff --cc arch/x86/kvm/x86.c
index c6d2c69f3cd9,f0fa610bed91..000000000000
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@@ -1063,13 -1072,7 +1063,17 @@@ static void kvm_update_dr0123(struct kv
  	}
  }
  
++<<<<<<< HEAD
 +static void kvm_update_dr6(struct kvm_vcpu *vcpu)
 +{
 +	if (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP))
 +		kvm_x86_ops->set_dr6(vcpu, vcpu->arch.dr6);
 +}
 +
 +static void kvm_update_dr7(struct kvm_vcpu *vcpu)
++=======
+ void kvm_update_dr7(struct kvm_vcpu *vcpu)
++>>>>>>> 7c86663b68ba (KVM: nSVM: inject exceptions via svm_check_nested_events)
  {
  	unsigned long dr7;
  
* Unmerged path arch/x86/kvm/svm/nested.c
* Unmerged path arch/x86/kvm/svm/svm.h
diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index f7765e8782c3..ac892137af46 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1487,6 +1487,8 @@ void kvm_pic_clear_all(struct kvm_pic *pic, int irq_source_id);
 
 void kvm_inject_nmi(struct kvm_vcpu *vcpu);
 
+void kvm_update_dr7(struct kvm_vcpu *vcpu);
+
 int kvm_mmu_unprotect_page(struct kvm *kvm, gfn_t gfn);
 int kvm_mmu_unprotect_page_virt(struct kvm_vcpu *vcpu, gva_t gva);
 void __kvm_mmu_free_some_pages(struct kvm_vcpu *vcpu);
* Unmerged path arch/x86/kvm/svm/nested.c
diff --git a/arch/x86/kvm/svm/svm.c b/arch/x86/kvm/svm/svm.c
index 2816d8e26433..aaef334d8edf 100644
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@ -838,17 +838,8 @@ static void svm_queue_exception(struct kvm_vcpu *vcpu)
 	struct vcpu_svm *svm = to_svm(vcpu);
 	unsigned nr = vcpu->arch.exception.nr;
 	bool has_error_code = vcpu->arch.exception.has_error_code;
-	bool reinject = vcpu->arch.exception.injected;
 	u32 error_code = vcpu->arch.exception.error_code;
 
-	/*
-	 * If we are within a nested VM we'd better #VMEXIT and let the guest
-	 * handle the exception
-	 */
-	if (!reinject &&
-	    nested_svm_check_exception(svm, nr, has_error_code, error_code))
-		return;
-
 	kvm_deliver_exception_payload(&svm->vcpu);
 
 	if (nr == BP_VECTOR && !nrips) {
* Unmerged path arch/x86/kvm/svm/svm.h
* Unmerged path arch/x86/kvm/x86.c
