perf evsel: Rename perf_evsel__open() to evsel__open()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 5972d1e07bd95c7458e2d7f484391d69008affc7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5972d1e0.failed

Rename perf_evsel__open() to evsel__open(), so we don't have a name
clash when we add perf_evsel__open() in libperf.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-15-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 5972d1e07bd95c7458e2d7f484391d69008affc7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
diff --cc tools/perf/util/evsel.c
index e99257f738ba,f365d0685268..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1826,8 -1825,8 +1826,13 @@@ static int perf_event_open(struct perf_
  	return fd;
  }
  
++<<<<<<< HEAD
 +int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 +		     struct thread_map *threads)
++=======
+ int evsel__open(struct evsel *evsel, struct perf_cpu_map *cpus,
+ 		struct perf_thread_map *threads)
++>>>>>>> 5972d1e07bd9 (perf evsel: Rename perf_evsel__open() to evsel__open())
  {
  	int cpu, thread, nthreads;
  	unsigned long flags = PERF_FLAG_FD_CLOEXEC;
@@@ -2084,19 -2083,19 +2089,19 @@@ void perf_evsel__close(struct perf_evse
  	perf_evsel__free_id(evsel);
  }
  
 -int perf_evsel__open_per_cpu(struct evsel *evsel,
 -			     struct perf_cpu_map *cpus)
 +int perf_evsel__open_per_cpu(struct perf_evsel *evsel,
 +			     struct cpu_map *cpus)
  {
- 	return perf_evsel__open(evsel, cpus, NULL);
+ 	return evsel__open(evsel, cpus, NULL);
  }
  
 -int perf_evsel__open_per_thread(struct evsel *evsel,
 -				struct perf_thread_map *threads)
 +int perf_evsel__open_per_thread(struct perf_evsel *evsel,
 +				struct thread_map *threads)
  {
- 	return perf_evsel__open(evsel, NULL, threads);
+ 	return evsel__open(evsel, NULL, threads);
  }
  
 -static int perf_evsel__parse_id_sample(const struct evsel *evsel,
 +static int perf_evsel__parse_id_sample(const struct perf_evsel *evsel,
  				       const union perf_event *event,
  				       struct perf_sample *sample)
  {
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,d43409bb07c5..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -288,24 -287,24 +288,34 @@@ void __perf_evsel__reset_sample_bit(str
  #define perf_evsel__reset_sample_bit(evsel, bit) \
  	__perf_evsel__reset_sample_bit(evsel, PERF_SAMPLE_##bit)
  
 -void perf_evsel__set_sample_id(struct evsel *evsel,
 +void perf_evsel__set_sample_id(struct perf_evsel *evsel,
  			       bool use_sample_identifier);
  
 -int perf_evsel__set_filter(struct evsel *evsel, const char *filter);
 -int perf_evsel__append_tp_filter(struct evsel *evsel, const char *filter);
 -int perf_evsel__append_addr_filter(struct evsel *evsel,
 +int perf_evsel__set_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__append_tp_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__append_addr_filter(struct perf_evsel *evsel,
  				   const char *filter);
 -int perf_evsel__apply_filter(struct evsel *evsel, const char *filter);
 -int perf_evsel__enable(struct evsel *evsel);
 -int perf_evsel__disable(struct evsel *evsel);
 -
 +int perf_evsel__apply_filter(struct perf_evsel *evsel, const char *filter);
 +int perf_evsel__enable(struct perf_evsel *evsel);
 +int perf_evsel__disable(struct perf_evsel *evsel);
 +
++<<<<<<< HEAD
 +int perf_evsel__open_per_cpu(struct perf_evsel *evsel,
 +			     struct cpu_map *cpus);
 +int perf_evsel__open_per_thread(struct perf_evsel *evsel,
 +				struct thread_map *threads);
 +int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 +		     struct thread_map *threads);
 +void perf_evsel__close(struct perf_evsel *evsel);
++=======
+ int perf_evsel__open_per_cpu(struct evsel *evsel,
+ 			     struct perf_cpu_map *cpus);
+ int perf_evsel__open_per_thread(struct evsel *evsel,
+ 				struct perf_thread_map *threads);
+ int evsel__open(struct evsel *evsel, struct perf_cpu_map *cpus,
+ 		struct perf_thread_map *threads);
+ void perf_evsel__close(struct evsel *evsel);
++>>>>>>> 5972d1e07bd9 (perf evsel: Rename perf_evsel__open() to evsel__open())
  
  struct perf_sample;
  
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..3edf5e097aad 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -740,7 +740,7 @@ static int record__open(struct record *rec)
 
 	evlist__for_each_entry(evlist, pos) {
 try_again:
-		if (perf_evsel__open(pos, pos->cpus, pos->threads) < 0) {
+		if (evsel__open(pos, pos->cpus, pos->threads) < 0) {
 			if (perf_evsel__fallback(pos, errno, msg, sizeof(msg))) {
 				if (verbose > 0)
 					ui__warning("%s\n", msg);
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 6d6fb101231d..fb1738b2b824 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -991,7 +991,7 @@ static int perf_top__start_counters(struct perf_top *top)
 
 	evlist__for_each_entry(evlist, counter) {
 try_again:
-		if (perf_evsel__open(counter, top->evlist->cpus,
+		if (evsel__open(counter, top->evlist->cpus,
 				     top->evlist->threads) < 0) {
 
 			/*
diff --git a/tools/perf/tests/mmap-basic.c b/tools/perf/tests/mmap-basic.c
index 0919b0793e5b..894e79fdacd5 100644
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@ -84,7 +84,7 @@ int test__basic_mmap(struct test *test __maybe_unused, int subtest __maybe_unuse
 
 		perf_evlist__add(evlist, evsels[i]);
 
-		if (perf_evsel__open(evsels[i], cpus, threads) < 0) {
+		if (evsel__open(evsels[i], cpus, threads) < 0) {
 			pr_debug("failed to open counter: %s, "
 				 "tweak /proc/sys/kernel/perf_event_paranoid?\n",
 				 str_error_r(errno, sbuf, sizeof(sbuf)));
diff --git a/tools/perf/tests/openat-syscall-all-cpus.c b/tools/perf/tests/openat-syscall-all-cpus.c
index 493ecb611540..6694fbe01ec2 100644
--- a/tools/perf/tests/openat-syscall-all-cpus.c
+++ b/tools/perf/tests/openat-syscall-all-cpus.c
@@ -48,7 +48,7 @@ int test__openat_syscall_event_on_all_cpus(struct test *test __maybe_unused, int
 		goto out_cpu_map_delete;
 	}
 
-	if (perf_evsel__open(evsel, cpus, threads) < 0) {
+	if (evsel__open(evsel, cpus, threads) < 0) {
 		pr_debug("failed to open counter: %s, "
 			 "tweak /proc/sys/kernel/perf_event_paranoid?\n",
 			 str_error_r(errno, sbuf, sizeof(sbuf)));
diff --git a/tools/perf/util/evlist.c b/tools/perf/util/evlist.c
index 4739b7914374..caf986e40d8b 100644
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@ -1406,7 +1406,7 @@ int perf_evlist__open(struct perf_evlist *evlist)
 	perf_evlist__update_id_pos(evlist);
 
 	evlist__for_each_entry(evlist, evsel) {
-		err = perf_evsel__open(evsel, evsel->cpus, evsel->threads);
+		err = evsel__open(evsel, evsel->cpus, evsel->threads);
 		if (err < 0)
 			goto out_err;
 	}
@@ -1919,7 +1919,7 @@ int perf_evlist__start_sb_thread(struct perf_evlist *evlist,
 		goto out_delete_evlist;
 
 	evlist__for_each_entry(evlist, counter) {
-		if (perf_evsel__open(counter, evlist->cpus,
+		if (evsel__open(counter, evlist->cpus,
 				     evlist->threads) < 0)
 			goto out_delete_evlist;
 	}
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
diff --git a/tools/perf/util/parse-events.c b/tools/perf/util/parse-events.c
index 0540303e5e97..0e1bf4a544b3 100644
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@ -2320,7 +2320,7 @@ static bool is_event_supported(u8 type, unsigned config)
 
 	evsel = perf_evsel__new(&attr);
 	if (evsel) {
-		open_return = perf_evsel__open(evsel, NULL, tmap);
+		open_return = evsel__open(evsel, NULL, tmap);
 		ret = open_return >= 0;
 
 		if (open_return == -EACCES) {
@@ -2332,7 +2332,7 @@ static bool is_event_supported(u8 type, unsigned config)
 			 *
 			 */
 			evsel->attr.exclude_kernel = 1;
-			ret = perf_evsel__open(evsel, NULL, tmap) >= 0;
+			ret = evsel__open(evsel, NULL, tmap) >= 0;
 		}
 		perf_evsel__delete(evsel);
 	}
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 1e5b6718dcea..2a77485256c7 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -817,7 +817,7 @@ static PyObject *pyrf_evsel__open(struct pyrf_evsel *pevsel,
 	 * This will group just the fds for this single evsel, to group
 	 * multiple events, use evlist.open().
 	 */
-	if (perf_evsel__open(evsel, cpus, threads) < 0) {
+	if (evsel__open(evsel, cpus, threads) < 0) {
 		PyErr_SetFromErrno(PyExc_OSError);
 		return NULL;
 	}
