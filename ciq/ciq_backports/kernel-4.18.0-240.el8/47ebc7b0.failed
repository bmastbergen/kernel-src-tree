ice: Check if unicast MAC exists before setting VF MAC

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Brett Creeley <brett.creeley@intel.com>
commit 47ebc7b02485aa0c0e18f96368e6f6958735fcea
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/47ebc7b0.failed

Currently if a unicast MAC is set via ndo_set_vf_mac, the PF driver will
set the VF's dflt_lan_addr.addr once some basic checks have passed. The
VF is then reset. During reset the PF driver will attempt to program the
VF's MAC from the dflt_lan_addr.addr field. This fails when the MAC
already exists on the PF's switch.

This is causing the VF to be completely disabled until removing/enabling
any VFs via sysfs.

Fix this by checking if the unicast MAC exists before triggering a VF
reset directly in ndo_set_vf_mac. Also, add a check if the unicast MAC
is set to the same value as before and return 0 if that is the case.

	Signed-off-by: Brett Creeley <brett.creeley@intel.com>
	Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit 47ebc7b02485aa0c0e18f96368e6f6958735fcea)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
diff --cc drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
index 4c35e5f2a915,95e8bca562e5..000000000000
--- a/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
+++ b/drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
@@@ -3321,20 -3641,36 +3321,53 @@@ ice_get_vf_cfg(struct net_device *netde
  }
  
  /**
++<<<<<<< HEAD
 + * ice_wait_on_vf_reset
 + * @vf: The VF being resseting
 + *
 + * Poll to make sure a given VF is ready after reset
 + */
 +static void ice_wait_on_vf_reset(struct ice_vf *vf)
 +{
 +	int i;
 +
 +	for (i = 0; i < ICE_MAX_VF_RESET_WAIT; i++) {
 +		if (test_bit(ICE_VF_STATE_INIT, vf->vf_states))
 +			break;
 +		msleep(20);
 +	}
++=======
+  * ice_unicast_mac_exists - check if the unicast MAC exists on the PF's switch
+  * @pf: PF used to reference the switch's rules
+  * @umac: unicast MAC to compare against existing switch rules
+  *
+  * Return true on the first/any match, else return false
+  */
+ static bool ice_unicast_mac_exists(struct ice_pf *pf, u8 *umac)
+ {
+ 	struct ice_sw_recipe *mac_recipe_list =
+ 		&pf->hw.switch_info->recp_list[ICE_SW_LKUP_MAC];
+ 	struct ice_fltr_mgmt_list_entry *list_itr;
+ 	struct list_head *rule_head;
+ 	struct mutex *rule_lock; /* protect MAC filter list access */
+ 
+ 	rule_head = &mac_recipe_list->filt_rules;
+ 	rule_lock = &mac_recipe_list->filt_rule_lock;
+ 
+ 	mutex_lock(rule_lock);
+ 	list_for_each_entry(list_itr, rule_head, list_entry) {
+ 		u8 *existing_mac = &list_itr->fltr_info.l_data.mac.mac_addr[0];
+ 
+ 		if (ether_addr_equal(existing_mac, umac)) {
+ 			mutex_unlock(rule_lock);
+ 			return true;
+ 		}
+ 	}
+ 
+ 	mutex_unlock(rule_lock);
+ 
+ 	return false;
++>>>>>>> 47ebc7b02485 (ice: Check if unicast MAC exists before setting VF MAC)
  }
  
  /**
@@@ -3372,6 -3695,21 +3405,24 @@@ int ice_set_vf_mac(struct net_device *n
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
++=======
+ 	vf = &pf->vf[vf_id];
+ 	/* nothing left to do, unicast MAC already set */
+ 	if (ether_addr_equal(vf->dflt_lan_addr.addr, mac))
+ 		return 0;
+ 
+ 	ret = ice_check_vf_ready_for_cfg(vf);
+ 	if (ret)
+ 		return ret;
+ 
+ 	if (ice_unicast_mac_exists(pf, mac)) {
+ 		netdev_err(netdev, "Unicast MAC %pM already exists on this PF. Preventing setting VF %u unicast MAC address to %pM\n",
+ 			   mac, vf_id, mac);
+ 		return -EINVAL;
+ 	}
+ 
++>>>>>>> 47ebc7b02485 (ice: Check if unicast MAC exists before setting VF MAC)
  	/* copy MAC into dflt_lan_addr and trigger a VF reset. The reset
  	 * flow will use the updated dflt_lan_addr and add a MAC filter
  	 * using ice_add_mac. Also set pf_set_mac to indicate that the PF has
* Unmerged path drivers/net/ethernet/intel/ice/ice_virtchnl_pf.c
