block: revert back to synchronous request_queue removal

jira LE-1907
cve CVE-2019-19770
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Luis Chamberlain <mcgrof@kernel.org>
commit e8c7d14ac6c37c173ec606907d38802b00302988
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e8c7d14a.failed

Commit dc9edc44de6c ("block: Fix a blk_exit_rl() regression") merged on
v4.12 moved the work behind blk_release_queue() into a workqueue after a
splat floated around which indicated some work on blk_release_queue()
could sleep in blk_exit_rl(). This splat would be possible when a driver
called blk_put_queue() or blk_cleanup_queue() (which calls blk_put_queue()
as its final call) from an atomic context.

blk_put_queue() decrements the refcount for the request_queue kobject, and
upon reaching 0 blk_release_queue() is called. Although blk_exit_rl() is
now removed through commit db6d99523560 ("block: remove request_list code")
on v5.0, we reserve the right to be able to sleep within
blk_release_queue() context.

The last reference for the request_queue must not be called from atomic
context. *When* the last reference to the request_queue reaches 0 varies,
and so let's take the opportunity to document when that is expected to
happen and also document the context of the related calls as best as
possible so we can avoid future issues, and with the hopes that the
synchronous request_queue removal sticks.

We revert back to synchronous request_queue removal because asynchronous
removal creates a regression with expected userspace interaction with
several drivers. An example is when removing the loopback driver, one
uses ioctls from userspace to do so, but upon return and if successful,
one expects the device to be removed. Likewise if one races to add another
device the new one may not be added as it is still being removed. This was
expected behavior before and it now fails as the device is still present
and busy still. Moving to asynchronous request_queue removal could have
broken many scripts which relied on the removal to have been completed if
there was no error. Document this expectation as well so that this
doesn't regress userspace again.

Using asynchronous request_queue removal however has helped us find
other bugs. In the future we can test what could break with this
arrangement by enabling CONFIG_DEBUG_KOBJECT_RELEASE.

While at it, update the docs with the context expectations for the
request_queue / gendisk refcount decrement, and make these
expectations explicit by using might_sleep().

Fixes: dc9edc44de6c ("block: Fix a blk_exit_rl() regression")
	Suggested-by: Nicolai Stange <nstange@suse.de>
	Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Bart Van Assche <bvanassche@acm.org>
	Cc: Bart Van Assche <bvanassche@acm.org>
	Cc: Omar Sandoval <osandov@fb.com>
	Cc: Hannes Reinecke <hare@suse.com>
	Cc: Nicolai Stange <nstange@suse.de>
	Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: yu kuai <yukuai3@huawei.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit e8c7d14ac6c37c173ec606907d38802b00302988)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
#	block/genhd.c
diff --cc block/blk-core.c
index 4b5867b7c476,a99b22fac38a..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -300,6 -321,16 +300,19 @@@ void blk_clear_pm_only(struct request_q
  }
  EXPORT_SYMBOL_GPL(blk_clear_pm_only);
  
++<<<<<<< HEAD
++=======
+ /**
+  * blk_put_queue - decrement the request_queue refcount
+  * @q: the request_queue structure to decrement the refcount for
+  *
+  * Decrements the refcount of the request_queue kobject. When this reaches 0
+  * we'll have blk_release_queue() called.
+  *
+  * Context: Any context, but the last reference must not be dropped from
+  *          atomic context.
+  */
++>>>>>>> e8c7d14ac6c3 (block: revert back to synchronous request_queue removal)
  void blk_put_queue(struct request_queue *q)
  {
  	kobject_put(&q->kobj);
diff --cc block/genhd.c
index 450adefa8955,60ae4e1b4d38..000000000000
--- a/block/genhd.c
+++ b/block/genhd.c
@@@ -805,6 -857,44 +805,47 @@@ void device_add_disk_no_queue_reg(struc
  }
  EXPORT_SYMBOL(device_add_disk_no_queue_reg);
  
++<<<<<<< HEAD
++=======
+ static void invalidate_partition(struct gendisk *disk, int partno)
+ {
+ 	struct block_device *bdev;
+ 
+ 	bdev = bdget_disk(disk, partno);
+ 	if (!bdev)
+ 		return;
+ 
+ 	fsync_bdev(bdev);
+ 	__invalidate_device(bdev, true);
+ 
+ 	/*
+ 	 * Unhash the bdev inode for this device so that it gets evicted as soon
+ 	 * as last inode reference is dropped.
+ 	 */
+ 	remove_inode_hash(bdev->bd_inode);
+ 	bdput(bdev);
+ }
+ 
+ /**
+  * del_gendisk - remove the gendisk
+  * @disk: the struct gendisk to remove
+  *
+  * Removes the gendisk and all its associated resources. This deletes the
+  * partitions associated with the gendisk, and unregisters the associated
+  * request_queue.
+  *
+  * This is the counter to the respective __device_add_disk() call.
+  *
+  * The final removal of the struct gendisk happens when its refcount reaches 0
+  * with put_disk(), which should be called after del_gendisk(), if
+  * __device_add_disk() was used.
+  *
+  * Drivers exist which depend on the release of the gendisk to be synchronous,
+  * it should not be deferred.
+  *
+  * Context: can sleep
+  */
++>>>>>>> e8c7d14ac6c3 (block: revert back to synchronous request_queue removal)
  void del_gendisk(struct gendisk *disk)
  {
  	struct disk_part_iter piter;
@@@ -1355,6 -1539,25 +1398,28 @@@ int disk_expand_part_tbl(struct gendis
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * disk_release - releases all allocated resources of the gendisk
+  * @dev: the device representing this disk
+  *
+  * This function releases all allocated resources of the gendisk.
+  *
+  * The struct gendisk refcount is incremented with get_gendisk() or
+  * get_disk_and_module(), and its refcount is decremented with
+  * put_disk_and_module() or put_disk(). Once the refcount reaches 0 this
+  * function is called.
+  *
+  * Drivers which used __device_add_disk() have a gendisk with a request_queue
+  * assigned. Since the request_queue sits on top of the gendisk for these
+  * drivers we also call blk_put_queue() for them, and we expect the
+  * request_queue refcount to reach 0 at this point, and so the request_queue
+  * will also be freed prior to the disk.
+  *
+  * Context: can sleep
+  */
++>>>>>>> e8c7d14ac6c3 (block: revert back to synchronous request_queue removal)
  static void disk_release(struct device *dev)
  {
  	struct gendisk *disk = dev_to_disk(dev);
@@@ -1570,6 -1802,16 +1637,19 @@@ struct kobject *get_disk_and_module(str
  }
  EXPORT_SYMBOL(get_disk_and_module);
  
++<<<<<<< HEAD
++=======
+ /**
+  * put_disk - decrements the gendisk refcount
+  * @disk: the struct gendisk to to decrement the refcount for
+  *
+  * This decrements the refcount for the struct gendisk. When this reaches 0
+  * we'll have disk_release() called.
+  *
+  * Context: Any context, but the last reference must not be dropped from
+  *          atomic context.
+  */
++>>>>>>> e8c7d14ac6c3 (block: revert back to synchronous request_queue removal)
  void put_disk(struct gendisk *disk)
  {
  	if (disk)
@@@ -1577,9 -1819,15 +1657,12 @@@
  }
  EXPORT_SYMBOL(put_disk);
  
 -/**
 - * put_disk_and_module - decrements the module and gendisk refcount
 - * @disk: the struct gendisk to to decrement the refcount for
 - *
 +/*
   * This is a counterpart of get_disk_and_module() and thus also of
   * get_gendisk().
+  *
+  * Context: Any context, but the last reference must not be dropped from
+  *          atomic context.
   */
  void put_disk_and_module(struct gendisk *disk)
  {
* Unmerged path block/blk-core.c
diff --git a/block/blk-sysfs.c b/block/blk-sysfs.c
index 0930d9a99248..3e55b90f29b0 100644
--- a/block/blk-sysfs.c
+++ b/block/blk-sysfs.c
@@ -878,22 +878,32 @@ static void blk_exit_queue(struct request_queue *q)
 	bdi_put(q->backing_dev_info);
 }
 
-
 /**
- * __blk_release_queue - release a request queue
- * @work: pointer to the release_work member of the request queue to be released
+ * blk_release_queue - releases all allocated resources of the request_queue
+ * @kobj: pointer to a kobject, whose container is a request_queue
+ *
+ * This function releases all allocated resources of the request queue.
+ *
+ * The struct request_queue refcount is incremented with blk_get_queue() and
+ * decremented with blk_put_queue(). Once the refcount reaches 0 this function
+ * is called.
+ *
+ * For drivers that have a request_queue on a gendisk and added with
+ * __device_add_disk() the refcount to request_queue will reach 0 with
+ * the last put_disk() called by the driver. For drivers which don't use
+ * __device_add_disk() this happens with blk_cleanup_queue().
  *
- * Description:
- *     This function is called when a block device is being unregistered. The
- *     process of releasing a request queue starts with blk_cleanup_queue, which
- *     set the appropriate flags and then calls blk_put_queue, that decrements
- *     the reference counter of the request queue. Once the reference counter
- *     of the request queue reaches zero, blk_release_queue is called to release
- *     all allocated resources of the request queue.
+ * Drivers exist which depend on the release of the request_queue to be
+ * synchronous, it should not be deferred.
+ *
+ * Context: can sleep
  */
-static void __blk_release_queue(struct work_struct *work)
+static void blk_release_queue(struct kobject *kobj)
 {
-	struct request_queue *q = container_of(work, typeof(*q), release_work);
+	struct request_queue *q =
+		container_of(kobj, struct request_queue, kobj);
+
+	might_sleep();
 
 	if (test_bit(QUEUE_FLAG_POLL_STATS, &q->queue_flags))
 		blk_stat_remove_callback(q, q->poll_cb);
@@ -922,15 +932,6 @@ static void __blk_release_queue(struct work_struct *work)
 	call_rcu(&q->rcu_head, blk_free_queue_rcu);
 }
 
-static void blk_release_queue(struct kobject *kobj)
-{
-	struct request_queue *q =
-		container_of(kobj, struct request_queue, kobj);
-
-	INIT_WORK(&q->release_work, __blk_release_queue);
-	schedule_work(&q->release_work);
-}
-
 static const struct sysfs_ops queue_sysfs_ops = {
 	.show	= queue_attr_show,
 	.store	= queue_attr_store,
* Unmerged path block/genhd.c
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 647f9d3e3ef0..7f9052a65f7d 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -577,8 +577,6 @@ struct request_queue {
 
 	size_t			cmd_size;
 
-	struct work_struct	release_work;
-
 #define BLK_MAX_WRITE_HINTS	5
 	u64			write_hints[BLK_MAX_WRITE_HINTS];
 
