selftests/bpf: Add a test for a large global function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit 6db2d81a46f99edb5690cf0b03bbe3b7f29dfd7b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6db2d81a.failed

test results:
pyperf50 with always_inlined the same function five times: processed 46378 insns
pyperf50 with global function: processed 6102 insns

	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Song Liu <songliubraving@fb.com>
Link: https://lore.kernel.org/bpf/20200110064124.1760511-5-ast@kernel.org
(cherry picked from commit 6db2d81a46f99edb5690cf0b03bbe3b7f29dfd7b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
diff --cc tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
index 849f258e2efd,e9f2f12ba06b..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
+++ b/tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
@@@ -33,14 -33,27 +33,26 @@@ static int check_load(const char *file
  	return err;
  }
  
 -struct scale_test_def {
 -	const char *file;
 -	enum bpf_prog_type attach_type;
 -	bool fails;
 -};
 -
  void test_bpf_verif_scale(void)
  {
++<<<<<<< HEAD
 +	const char *sched_cls[] = {
 +		"./test_verif_scale1.o", "./test_verif_scale2.o", "./test_verif_scale3.o",
 +	};
 +	const char *raw_tp[] = {
++=======
+ 	struct scale_test_def tests[] = {
+ 		{ "loop3.o", BPF_PROG_TYPE_RAW_TRACEPOINT, true /* fails */ },
+ 
+ 		{ "test_verif_scale1.o", BPF_PROG_TYPE_SCHED_CLS },
+ 		{ "test_verif_scale2.o", BPF_PROG_TYPE_SCHED_CLS },
+ 		{ "test_verif_scale3.o", BPF_PROG_TYPE_SCHED_CLS },
+ 
+ 		{ "pyperf_global.o", BPF_PROG_TYPE_RAW_TRACEPOINT },
+ 
++>>>>>>> 6db2d81a46f9 (selftests/bpf: Add a test for a large global function)
  		/* full unroll by llvm */
 -		{ "pyperf50.o", BPF_PROG_TYPE_RAW_TRACEPOINT },
 -		{ "pyperf100.o", BPF_PROG_TYPE_RAW_TRACEPOINT },
 -		{ "pyperf180.o", BPF_PROG_TYPE_RAW_TRACEPOINT },
 +		"./pyperf50.o",	"./pyperf100.o", "./pyperf180.o",
  
  		/* partial unroll. llvm will unroll loop ~150 times.
  		 * C loop count -> 600.
* Unmerged path tools/testing/selftests/bpf/prog_tests/bpf_verif_scale.c
diff --git a/tools/testing/selftests/bpf/progs/pyperf.h b/tools/testing/selftests/bpf/progs/pyperf.h
index 71d383cc9b85..e186899954e9 100644
--- a/tools/testing/selftests/bpf/progs/pyperf.h
+++ b/tools/testing/selftests/bpf/progs/pyperf.h
@@ -154,7 +154,12 @@ struct {
 	__uint(value_size, sizeof(long long) * 127);
 } stackmap SEC(".maps");
 
-static __always_inline int __on_event(struct pt_regs *ctx)
+#ifdef GLOBAL_FUNC
+__attribute__((noinline))
+#else
+static __always_inline
+#endif
+int __on_event(struct bpf_raw_tracepoint_args *ctx)
 {
 	uint64_t pid_tgid = bpf_get_current_pid_tgid();
 	pid_t pid = (pid_t)(pid_tgid >> 32);
@@ -254,7 +259,7 @@ static __always_inline int __on_event(struct pt_regs *ctx)
 }
 
 SEC("raw_tracepoint/kfree_skb")
-int on_event(struct pt_regs* ctx)
+int on_event(struct bpf_raw_tracepoint_args* ctx)
 {
 	int i, ret = 0;
 	ret |= __on_event(ctx);
diff --git a/tools/testing/selftests/bpf/progs/pyperf_global.c b/tools/testing/selftests/bpf/progs/pyperf_global.c
new file mode 100644
index 000000000000..079e78a7562b
--- /dev/null
+++ b/tools/testing/selftests/bpf/progs/pyperf_global.c
@@ -0,0 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright (c) 2020 Facebook */
+#define STACK_MAX_LEN 50
+#define GLOBAL_FUNC
+#include "pyperf.h"
