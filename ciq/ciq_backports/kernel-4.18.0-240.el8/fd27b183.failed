selftests/bpf: Reset process and thread affinity after each test/sub-test

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit fd27b1835e7079d26809cd4d33ba98f84e593766
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fd27b183.failed

Some tests and sub-tests are setting "custom" thread/process affinity and
don't reset it back. Instead of requiring each test to undo all this, ensure
that thread affinity is restored by test_progs test runner itself.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20200314013932.4035712-3-andriin@fb.com
(cherry picked from commit fd27b1835e7079d26809cd4d33ba98f84e593766)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/test_progs.c
diff --cc tools/testing/selftests/bpf/test_progs.c
index 7174b6f52659,b521e0a512b6..000000000000
--- a/tools/testing/selftests/bpf/test_progs.c
+++ b/tools/testing/selftests/bpf/test_progs.c
@@@ -1,17 -1,19 +1,26 @@@
 -// SPDX-License-Identifier: GPL-2.0-only
  /* Copyright (c) 2017 Facebook
 + *
 + * This program is free software; you can redistribute it and/or
 + * modify it under the terms of version 2 of the GNU General Public
 + * License as published by the Free Software Foundation.
   */
+ #define _GNU_SOURCE
  #include "test_progs.h"
 -#include "cgroup_helpers.h"
  #include "bpf_rlimit.h"
  #include <argp.h>
++<<<<<<< HEAD
 +#include <string.h>
++=======
+ #include <pthread.h>
+ #include <sched.h>
+ #include <signal.h>
+ #include <string.h>
+ #include <execinfo.h> /* backtrace */
++>>>>>>> fd27b1835e70 (selftests/bpf: Reset process and thread affinity after each test/sub-test)
  
  /* defined in test_progs.h */
 -struct test_env env = {};
 +struct test_env env;
 +int error_cnt, pass_cnt;
  
  struct prog_test_def {
  	const char *test_name;
@@@ -103,6 -137,11 +140,14 @@@ void test__end_subtest(
  	fprintf(env.stdout, "#%d/%d %s:%s\n",
  	       test->test_num, test->subtest_num,
  	       test->subtest_name, sub_error_cnt ? "FAIL" : "OK");
++<<<<<<< HEAD
++=======
+ 
+ 	reset_affinity();
+ 
+ 	free(test->subtest_name);
+ 	test->subtest_name = NULL;
++>>>>>>> fd27b1835e70 (selftests/bpf: Reset process and thread affinity after each test/sub-test)
  }
  
  bool test__start_subtest(const char *name)
@@@ -586,13 -747,21 +637,20 @@@ int main(int argc, char **argv
  		fprintf(env.stdout, "#%d %s:%s\n",
  			test->test_num, test->test_name,
  			test->error_cnt ? "FAIL" : "OK");
++<<<<<<< HEAD
++=======
+ 
+ 		reset_affinity();
+ 		if (test->need_cgroup_cleanup)
+ 			cleanup_cgroup_environment();
++>>>>>>> fd27b1835e70 (selftests/bpf: Reset process and thread affinity after each test/sub-test)
  	}
  	stdio_restore();
 -	fprintf(stdout, "Summary: %d/%d PASSED, %d SKIPPED, %d FAILED\n",
 -		env.succ_cnt, env.sub_succ_cnt, env.skip_cnt, env.fail_cnt);
 +	printf("Summary: %d/%d PASSED, %d SKIPPED, %d FAILED\n",
 +	       env.succ_cnt, env.sub_succ_cnt, env.skip_cnt, env.fail_cnt);
  
 -	free(env.test_selector.blacklist.strs);
 -	free(env.test_selector.whitelist.strs);
  	free(env.test_selector.num_set);
 -	free(env.subtest_selector.blacklist.strs);
 -	free(env.subtest_selector.whitelist.strs);
  	free(env.subtest_selector.num_set);
  
 -	return env.fail_cnt ? EXIT_FAILURE : EXIT_SUCCESS;
 +	return error_cnt ? EXIT_FAILURE : EXIT_SUCCESS;
  }
* Unmerged path tools/testing/selftests/bpf/test_progs.c
diff --git a/tools/testing/selftests/bpf/test_progs.h b/tools/testing/selftests/bpf/test_progs.h
index 9defd35cb6c0..bcd32872a17c 100644
--- a/tools/testing/selftests/bpf/test_progs.h
+++ b/tools/testing/selftests/bpf/test_progs.h
@@ -60,6 +60,7 @@ struct test_env {
 	FILE *stderr;
 	char *log_buf;
 	size_t log_cnt;
+	int nr_cpus;
 
 	int succ_cnt; /* successful tests */
 	int sub_succ_cnt; /* successful sub-tests */
