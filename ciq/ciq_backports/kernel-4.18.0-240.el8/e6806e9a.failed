net/mlx5: Create bypass and loopback flow steering namespaces for RDMA RX

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Mark Zhang <markz@mellanox.com>
commit e6806e9a63a759e445383915bb9d2ec85a90aebf
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e6806e9a.failed

Use different namespaces for bypass and switchdev loopback because they
have different priorities and default table miss action requirement:
1. bypass: with multiple priorities support, and
   MLX5_FLOW_TABLE_MISS_ACTION_DEF as the default table miss action;
2. switchdev loopback: with single priority support, and
   MLX5_FLOW_TABLE_MISS_ACTION_SWITCH_DOMAIN as the default table miss
   action.

	Signed-off-by: Mark Zhang <markz@mellanox.com>
	Reviewed-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit e6806e9a63a759e445383915bb9d2ec85a90aebf)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index 26d0333080e4,7bdec442f0ac..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -2504,12 -2535,19 +2526,24 @@@ static int init_rdma_rx_root_ns(struct 
  	if (!steering->rdma_rx_root_ns)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	steering->rdma_rx_root_ns->def_miss_action =
 +		MLX5_FLOW_TABLE_MISS_ACTION_SWITCH_DOMAIN;
++=======
+ 	err = init_root_tree(steering, &rdma_rx_root_fs,
+ 			     &steering->rdma_rx_root_ns->ns.node);
+ 	if (err)
+ 		goto out_err;
++>>>>>>> e6806e9a63a7 (net/mlx5: Create bypass and loopback flow steering namespaces for RDMA RX)
  
- 	/* Create single prio */
- 	prio = fs_create_prio(&steering->rdma_rx_root_ns->ns, 0, 1);
- 	return PTR_ERR_OR_ZERO(prio);
+ 	set_prio_attrs(steering->rdma_rx_root_ns);
+ 
+ 	return 0;
+ 
+ out_err:
+ 	cleanup_root_ns(steering->rdma_rx_root_ns);
+ 	steering->rdma_rx_root_ns = NULL;
+ 	return err;
  }
  static int init_fdb_root_ns(struct mlx5_flow_steering *steering)
  {
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/rdma.c b/drivers/net/ethernet/mellanox/mlx5/core/rdma.c
index c43f7dc43cea..0fc7de4aa572 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/rdma.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/rdma.c
@@ -48,7 +48,7 @@ static int mlx5_rdma_enable_roce_steering(struct mlx5_core_dev *dev)
 		return -ENOMEM;
 	}
 
-	ns = mlx5_get_flow_namespace(dev, MLX5_FLOW_NAMESPACE_RDMA_RX);
+	ns = mlx5_get_flow_namespace(dev, MLX5_FLOW_NAMESPACE_RDMA_RX_KERNEL);
 	if (!ns) {
 		mlx5_core_err(dev, "Failed to get RDMA RX namespace");
 		err = -EOPNOTSUPP;
diff --git a/include/linux/mlx5/fs.h b/include/linux/mlx5/fs.h
index a008e9b63b78..724d276ea133 100644
--- a/include/linux/mlx5/fs.h
+++ b/include/linux/mlx5/fs.h
@@ -75,6 +75,7 @@ enum mlx5_flow_namespace_type {
 	MLX5_FLOW_NAMESPACE_SNIFFER_TX,
 	MLX5_FLOW_NAMESPACE_EGRESS,
 	MLX5_FLOW_NAMESPACE_RDMA_RX,
+	MLX5_FLOW_NAMESPACE_RDMA_RX_KERNEL,
 };
 
 enum {
