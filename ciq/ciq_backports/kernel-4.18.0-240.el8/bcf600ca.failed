KVM: x86: Remove the unnecessary loop on CPUID 0x7 sub-leafs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit bcf600ca8d21e49af21fec5d2cf3927d6f62d048
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/bcf600ca.failed

Explicitly handle CPUID 0x7 sub-leaf 1.  The kernel is currently aware
of exactly one feature in CPUID 0x7.1,  which means there is room for
another 127 features before CPUID 0x7.2 will see the light of day, i.e.
the looping is likely to be dead code for years to come.

	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit bcf600ca8d21e49af21fec5d2cf3927d6f62d048)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/cpuid.c
diff --cc arch/x86/kvm/cpuid.c
index d4472786ed92,cce78723376c..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -579,10 -520,25 +579,16 @@@ static inline int __do_cpuid_func(struc
  		break;
  	/* function 7 has additional index. */
  	case 7:
 -		entry->eax = min(entry->eax, 1u);
 -		cpuid_entry_mask(entry, CPUID_7_0_EBX);
 -		cpuid_entry_mask(entry, CPUID_7_ECX);
 -		cpuid_entry_mask(entry, CPUID_7_EDX);
 -
 -		/* TSC_ADJUST and ARCH_CAPABILITIES are emulated in software. */
 -		cpuid_entry_set(entry, X86_FEATURE_TSC_ADJUST);
 -		cpuid_entry_set(entry, X86_FEATURE_ARCH_CAPABILITIES);
 -
 -		if (boot_cpu_has(X86_FEATURE_IBPB) && boot_cpu_has(X86_FEATURE_IBRS))
 -			cpuid_entry_set(entry, X86_FEATURE_SPEC_CTRL);
 -		if (boot_cpu_has(X86_FEATURE_STIBP))
 -			cpuid_entry_set(entry, X86_FEATURE_INTEL_STIBP);
 -		if (boot_cpu_has(X86_FEATURE_AMD_SSBD))
 -			cpuid_entry_set(entry, X86_FEATURE_SPEC_CTRL_SSBD);
 +		do_cpuid_7_mask(entry);
  
++<<<<<<< HEAD
 +		for (i = 1, max_idx = entry->eax; i <= max_idx; i++) {
 +			entry = do_host_cpuid(array, function, i);
++=======
+ 		/* KVM only supports 0x7.0 and 0x7.1, capped above via min(). */
+ 		if (entry->eax == 1) {
+ 			entry = do_host_cpuid(array, function, 1);
++>>>>>>> bcf600ca8d21 (KVM: x86: Remove the unnecessary loop on CPUID 0x7 sub-leafs)
  			if (!entry)
  				goto out;
  
* Unmerged path arch/x86/kvm/cpuid.c
