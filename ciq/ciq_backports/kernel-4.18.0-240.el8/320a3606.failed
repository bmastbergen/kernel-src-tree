libbpf: Fix handling of optional field_name in btf_dump__emit_type_decl

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 320a36063e1441210106aa33997ad3770d4c86b4
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/320a3606.failed

Internal functions, used by btf_dump__emit_type_decl(), assume field_name is
never going to be NULL. Ensure it's always the case.

Fixes: 9f81654eebe8 ("libbpf: Expose BTF-to-C type declaration emitting API")
	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200303180800.3303471-1-andriin@fb.com
(cherry picked from commit 320a36063e1441210106aa33997ad3770d4c86b4)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/btf_dump.c
diff --cc tools/lib/bpf/btf_dump.c
index 613a4208127f,dc451e4de5ad..000000000000
--- a/tools/lib/bpf/btf_dump.c
+++ b/tools/lib/bpf/btf_dump.c
@@@ -970,6 -1021,21 +970,24 @@@ static int btf_dump_push_decl_stack_id(
   * of a stack frame. Some care is required to "pop" stack frames after
   * processing type declaration chain.
   */
++<<<<<<< HEAD
++=======
+ int btf_dump__emit_type_decl(struct btf_dump *d, __u32 id,
+ 			     const struct btf_dump_emit_type_decl_opts *opts)
+ {
+ 	const char *fname;
+ 	int lvl;
+ 
+ 	if (!OPTS_VALID(opts, btf_dump_emit_type_decl_opts))
+ 		return -EINVAL;
+ 
+ 	fname = OPTS_GET(opts, field_name, "");
+ 	lvl = OPTS_GET(opts, indent_level, 0);
+ 	btf_dump_emit_type_decl(d, id, fname, lvl);
+ 	return 0;
+ }
+ 
++>>>>>>> 320a36063e14 (libbpf: Fix handling of optional field_name in btf_dump__emit_type_decl)
  static void btf_dump_emit_type_decl(struct btf_dump *d, __u32 id,
  				    const char *fname, int lvl)
  {
* Unmerged path tools/lib/bpf/btf_dump.c
