io_uring: put the flag changing code in the same spot

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pavel Begunkov <asml.silence@gmail.com>
commit 3e577dcd73a1fdc641bf45e5ea4a37869de221b5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3e577dcd.failed

Both iocb_flags() and kiocb_set_rw_flags() are inline and modify
kiocb->ki_flags. Place them close, so they can be potentially better
optimised.

	Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 3e577dcd73a1fdc641bf45e5ea4a37869de221b5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index ffb8e9d82a6a,edb00ae2619b..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -1030,15 -1859,19 +1030,26 @@@ static int io_prep_rw(struct io_kiocb *
  	unsigned ioprio;
  	int ret;
  
 -	if (S_ISREG(file_inode(req->file)->i_mode))
 -		req->flags |= REQ_F_ISREG;
 +	if (!req->file)
 +		return -EBADF;
 +
 +	if (force_nonblock && !io_file_supports_async(req->file))
 +		force_nonblock = false;
  
  	kiocb->ki_pos = READ_ONCE(sqe->off);
++<<<<<<< HEAD
 +	kiocb->ki_flags = iocb_flags(kiocb->ki_filp);
++=======
+ 	if (kiocb->ki_pos == -1 && !(req->file->f_mode & FMODE_STREAM)) {
+ 		req->flags |= REQ_F_CUR_POS;
+ 		kiocb->ki_pos = req->file->f_pos;
+ 	}
++>>>>>>> 3e577dcd73a1 (io_uring: put the flag changing code in the same spot)
  	kiocb->ki_hint = ki_hint_validate(file_write_hint(kiocb->ki_filp));
+ 	kiocb->ki_flags = iocb_flags(kiocb->ki_filp);
+ 	ret = kiocb_set_rw_flags(kiocb, READ_ONCE(sqe->rw_flags));
+ 	if (unlikely(ret))
+ 		return ret;
  
  	ioprio = READ_ONCE(sqe->ioprio);
  	if (ioprio) {
@@@ -1050,12 -1883,9 +1061,8 @@@
  	} else
  		kiocb->ki_ioprio = get_current_ioprio();
  
- 	ret = kiocb_set_rw_flags(kiocb, READ_ONCE(sqe->rw_flags));
- 	if (unlikely(ret))
- 		return ret;
- 
  	/* don't allow async punt if RWF_NOWAIT was requested */
 -	if ((kiocb->ki_flags & IOCB_NOWAIT) ||
 -	    (req->file->f_flags & O_NONBLOCK))
 +	if (kiocb->ki_flags & IOCB_NOWAIT)
  		req->flags |= REQ_F_NOWAIT;
  
  	if (force_nonblock)
* Unmerged path fs/io_uring.c
