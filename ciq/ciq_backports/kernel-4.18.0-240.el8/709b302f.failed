io_uring: simplify io_get_sqring

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pavel Begunkov <asml.silence@gmail.com>
commit 709b302faddfac757d87df2080f900eccb1dc9e2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/709b302f.failed

Make io_get_sqring() care only about sqes themselves, not initialising
the io_kiocb. Also, split it into get + consume, that will be helpful in
the future.

	Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 709b302faddfac757d87df2080f900eccb1dc9e2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 2afa3b27779e,08f520456db8..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -2402,9 -5781,9 +2402,13 @@@ static void io_commit_sqring(struct io_
   * used, it's important that those reads are done through READ_ONCE() to
   * prevent a re-load down the line.
   */
++<<<<<<< HEAD
 +static bool io_get_sqring(struct io_ring_ctx *ctx, struct sqe_submit *s)
++=======
+ static const struct io_uring_sqe *io_get_sqe(struct io_ring_ctx *ctx)
++>>>>>>> 709b302faddf (io_uring: simplify io_get_sqring)
  {
 -	u32 *sq_array = ctx->sq_array;
 +	struct io_sq_ring *ring = ctx->sq_ring;
  	unsigned head;
  
  	/*
@@@ -2415,27 -5794,24 +2419,43 @@@
  	 * 2) allows the kernel side to track the head on its own, even
  	 *    though the application is the one updating it.
  	 */
++<<<<<<< HEAD
 +	head = ctx->cached_sq_head;
 +	/* make sure SQ entry isn't read before tail */
 +	if (head == smp_load_acquire(&ring->r.tail))
 +		return false;
 +
 +	head = READ_ONCE(ring->array[head & ctx->sq_mask]);
 +	if (head < ctx->sq_entries) {
 +		s->sqe = &ctx->sq_sqes[head];
 +		s->sequence = ctx->cached_sq_head;
 +		ctx->cached_sq_head++;
 +		return true;
 +	}
 +
 +	/* drop invalid entries */
 +	ctx->cached_sq_head++;
 +	ring->dropped++;
 +	return false;
++=======
+ 	head = READ_ONCE(sq_array[ctx->cached_sq_head & ctx->sq_mask]);
+ 	if (likely(head < ctx->sq_entries))
+ 		return &ctx->sq_sqes[head];
+ 
+ 	/* drop invalid entries */
+ 	ctx->cached_sq_dropped++;
+ 	WRITE_ONCE(ctx->rings->sq_dropped, ctx->cached_sq_dropped);
+ 	return NULL;
+ }
+ 
+ static inline void io_consume_sqe(struct io_ring_ctx *ctx)
+ {
+ 	ctx->cached_sq_head++;
++>>>>>>> 709b302faddf (io_uring: simplify io_get_sqring)
  }
  
 -static int io_submit_sqes(struct io_ring_ctx *ctx, unsigned int nr,
 -			  struct file *ring_file, int ring_fd,
 -			  struct mm_struct **mm, bool async)
 +static int io_submit_sqes(struct io_ring_ctx *ctx, struct sqe_submit *sqes,
 +			  unsigned int nr, bool has_user, bool mm_fault)
  {
  	struct io_submit_state state, *statep = NULL;
  	struct io_kiocb *link = NULL;
@@@ -2448,45 -5836,72 +2468,92 @@@
  		statep = &state;
  	}
  
 -	ctx->ring_fd = ring_fd;
 -	ctx->ring_file = ring_file;
 -
  	for (i = 0; i < nr; i++) {
++<<<<<<< HEAD
 +		/*
 +		 * If previous wasn't linked and we have a linked command,
 +		 * that's the end of the chain. Submit the previous link.
 +		 */
 +		if (!prev_was_link && link) {
 +			io_queue_link_head(ctx, link, &link->submit, shadow_req,
 +						true);
 +			link = NULL;
 +			shadow_req = NULL;
++=======
+ 		const struct io_uring_sqe *sqe;
+ 		struct io_kiocb *req;
+ 		int err;
+ 
+ 		req = io_get_req(ctx, statep);
+ 		if (unlikely(!req)) {
+ 			if (!submitted)
+ 				submitted = -EAGAIN;
+ 			break;
+ 		}
+ 		sqe = io_get_sqe(ctx);
+ 		if (!sqe) {
+ 			__io_req_do_free(req);
+ 			io_consume_sqe(ctx);
+ 			break;
++>>>>>>> 709b302faddf (io_uring: simplify io_get_sqring)
  		}
 -
 +		prev_was_link = (sqes[i].sqe->flags & IOSQE_IO_LINK) != 0;
 +
++<<<<<<< HEAD
 +		if (link && (sqes[i].sqe->flags & IOSQE_IO_DRAIN)) {
 +			if (!shadow_req) {
 +				shadow_req = io_get_req(ctx, NULL);
 +				if (unlikely(!shadow_req))
 +					goto out;
 +				shadow_req->flags |= (REQ_F_IO_DRAIN | REQ_F_SHADOW_DRAIN);
 +				refcount_dec(&shadow_req->refs);
++=======
+ 		/*
+ 		 * All io need record the previous position, if LINK vs DARIN,
+ 		 * it can be used to mark the position of the first IO in the
+ 		 * link list.
+ 		 */
+ 		req->sequence = ctx->cached_sq_head;
+ 		req->opcode = READ_ONCE(sqe->opcode);
+ 		req->user_data = READ_ONCE(sqe->user_data);
+ 		io_consume_sqe(ctx);
+ 
+ 		/* will complete beyond this point, count as submitted */
+ 		submitted++;
+ 
+ 		if (unlikely(req->opcode >= IORING_OP_LAST)) {
+ 			err = -EINVAL;
+ fail_req:
+ 			io_cqring_add_event(req, err);
+ 			io_double_put_req(req);
+ 			break;
+ 		}
+ 
+ 		if (io_op_defs[req->opcode].needs_mm && !*mm) {
+ 			mm_fault = mm_fault || !mmget_not_zero(ctx->sqo_mm);
+ 			if (unlikely(mm_fault)) {
+ 				err = -EFAULT;
+ 				goto fail_req;
++>>>>>>> 709b302faddf (io_uring: simplify io_get_sqring)
  			}
 -			use_mm(ctx->sqo_mm);
 -			*mm = ctx->sqo_mm;
 +			shadow_req->sequence = sqes[i].sequence;
  		}
  
 -		req->needs_fixed_file = async;
 -		trace_io_uring_submit_sqe(ctx, req->opcode, req->user_data,
 -						true, async);
 -		if (!io_submit_sqe(req, sqe, statep, &link))
 -			break;
 +out:
 +		if (unlikely(mm_fault)) {
 +			io_cqring_add_event(ctx, sqes[i].sqe->user_data,
 +						-EFAULT);
 +		} else {
 +			sqes[i].has_user = has_user;
 +			sqes[i].needs_lock = true;
 +			sqes[i].needs_fixed_file = true;
 +			io_submit_sqe(ctx, &sqes[i], statep, &link, true);
 +			submitted++;
 +		}
  	}
  
 -	if (unlikely(submitted != nr)) {
 -		int ref_used = (submitted == -EAGAIN) ? 0 : submitted;
 -
 -		percpu_ref_put_many(&ctx->refs, nr - ref_used);
 -	}
  	if (link)
 -		io_queue_link_head(link);
 +		io_queue_link_head(ctx, link, &link->submit, shadow_req, true);
  	if (statep)
  		io_submit_state_end(&state);
  
* Unmerged path fs/io_uring.c
