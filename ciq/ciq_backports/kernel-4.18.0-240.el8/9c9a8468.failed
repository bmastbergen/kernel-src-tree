drm/hisilicon: Enforce 128-byte stride alignment to fix the hardware limitation

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Tian Tao <tiantao6@hisilicon.com>
commit 9c9a8468de21895abc43f45fc86346467217c986
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9c9a8468.failed

because the hardware limitation,The initial color depth must set to 32bpp
and must set the FB Offset of the display hardware to 128Byte alignment,
which is used to solve the display problem at 800x600 and 1440x900
resolution under 16bpp.

	Signed-off-by: Tian Tao <tiantao6@hisilicon.com>
	Signed-off-by: Gong junjie <gongjunjie2@huawei.com>
	Acked-by: Xinliang Liu <xinliang.liu@linaro.org>
	Signed-off-by: Xinliang Liu <xinliang.liu@linaro.org>
Link: https://patchwork.freedesktop.org/patch/msgid/1583466184-7060-4-git-send-email-tiantao6@hisilicon.com
(cherry picked from commit 9c9a8468de21895abc43f45fc86346467217c986)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_drv.c
#	drivers/gpu/drm/hisilicon/hibmc/hibmc_ttm.c
diff --cc drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_drv.c
index ce89e56937b0,79a180ae4509..000000000000
--- a/drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_drv.c
+++ b/drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_drv.c
@@@ -89,11 -91,11 +89,16 @@@ static int hibmc_kms_init(struct hibmc_
  	priv->dev->mode_config.min_width = 0;
  	priv->dev->mode_config.min_height = 0;
  	priv->dev->mode_config.max_width = 1920;
 -	priv->dev->mode_config.max_height = 1200;
 +	priv->dev->mode_config.max_height = 1440;
  
  	priv->dev->mode_config.fb_base = priv->fb_base;
++<<<<<<< HEAD
 +	priv->dev->mode_config.preferred_depth = 24;
 +	priv->dev->mode_config.prefer_shadow = 0;
++=======
+ 	priv->dev->mode_config.preferred_depth = 32;
+ 	priv->dev->mode_config.prefer_shadow = 1;
++>>>>>>> 9c9a8468de21 (drm/hisilicon: Enforce 128-byte stride alignment to fix the hardware limitation)
  
  	priv->dev->mode_config.funcs = (void *)&hibmc_mode_funcs;
  
@@@ -307,7 -307,7 +312,11 @@@ static int hibmc_load(struct drm_devic
  	/* reset all the states of crtc/plane/encoder/connector */
  	drm_mode_config_reset(dev);
  
++<<<<<<< HEAD
 +	ret = hibmc_fbdev_init(priv);
++=======
+ 	ret = drm_fbdev_generic_setup(dev, dev->mode_config.preferred_depth);
++>>>>>>> 9c9a8468de21 (drm/hisilicon: Enforce 128-byte stride alignment to fix the hardware limitation)
  	if (ret) {
  		DRM_ERROR("failed to initialize fbdev: %d\n", ret);
  		goto err;
diff --cc drivers/gpu/drm/hisilicon/hibmc/hibmc_ttm.c
index 5d4a03cd7d50,322bd542e89d..000000000000
--- a/drivers/gpu/drm/hisilicon/hibmc/hibmc_ttm.c
+++ b/drivers/gpu/drm/hisilicon/hibmc/hibmc_ttm.c
@@@ -67,95 -50,7 +67,99 @@@ int hibmc_gem_create(struct drm_device 
  int hibmc_dumb_create(struct drm_file *file, struct drm_device *dev,
  		      struct drm_mode_create_dumb *args)
  {
++<<<<<<< HEAD
 +	struct drm_gem_object *gobj;
 +	u32 handle;
 +	int ret;
 +
 +	args->pitch = ALIGN(args->width * DIV_ROUND_UP(args->bpp, 8), 16);
 +	args->size = args->pitch * args->height;
 +
 +	ret = hibmc_gem_create(dev, args->size, false,
 +			       &gobj);
 +	if (ret) {
 +		DRM_ERROR("failed to create GEM object: %d\n", ret);
 +		return ret;
 +	}
 +
 +	ret = drm_gem_handle_create(file, gobj, &handle);
 +	drm_gem_object_put_unlocked(gobj);
 +	if (ret) {
 +		DRM_ERROR("failed to unreference GEM object: %d\n", ret);
 +		return ret;
 +	}
 +
 +	args->handle = handle;
 +	return 0;
 +}
 +
 +static void hibmc_user_framebuffer_destroy(struct drm_framebuffer *fb)
 +{
 +	struct hibmc_framebuffer *hibmc_fb = to_hibmc_framebuffer(fb);
 +
 +	drm_gem_object_put_unlocked(hibmc_fb->obj);
 +	drm_framebuffer_cleanup(fb);
 +	kfree(hibmc_fb);
 +}
 +
 +static const struct drm_framebuffer_funcs hibmc_fb_funcs = {
 +	.destroy = hibmc_user_framebuffer_destroy,
 +};
 +
 +struct hibmc_framebuffer *
 +hibmc_framebuffer_init(struct drm_device *dev,
 +		       const struct drm_mode_fb_cmd2 *mode_cmd,
 +		       struct drm_gem_object *obj)
 +{
 +	struct hibmc_framebuffer *hibmc_fb;
 +	int ret;
 +
 +	hibmc_fb = kzalloc(sizeof(*hibmc_fb), GFP_KERNEL);
 +	if (!hibmc_fb) {
 +		DRM_ERROR("failed to allocate hibmc_fb\n");
 +		return ERR_PTR(-ENOMEM);
 +	}
 +
 +	drm_helper_mode_fill_fb_struct(dev, &hibmc_fb->fb, mode_cmd);
 +	hibmc_fb->obj = obj;
 +	ret = drm_framebuffer_init(dev, &hibmc_fb->fb, &hibmc_fb_funcs);
 +	if (ret) {
 +		DRM_ERROR("drm_framebuffer_init failed: %d\n", ret);
 +		kfree(hibmc_fb);
 +		return ERR_PTR(ret);
 +	}
 +
 +	return hibmc_fb;
 +}
 +
 +static struct drm_framebuffer *
 +hibmc_user_framebuffer_create(struct drm_device *dev,
 +			      struct drm_file *filp,
 +			      const struct drm_mode_fb_cmd2 *mode_cmd)
 +{
 +	struct drm_gem_object *obj;
 +	struct hibmc_framebuffer *hibmc_fb;
 +
 +	DRM_DEBUG_DRIVER("%dx%d, format %c%c%c%c\n",
 +			 mode_cmd->width, mode_cmd->height,
 +			 (mode_cmd->pixel_format) & 0xff,
 +			 (mode_cmd->pixel_format >> 8)  & 0xff,
 +			 (mode_cmd->pixel_format >> 16) & 0xff,
 +			 (mode_cmd->pixel_format >> 24) & 0xff);
 +
 +	obj = drm_gem_object_lookup(filp, mode_cmd->handles[0]);
 +	if (!obj)
 +		return ERR_PTR(-ENOENT);
 +
 +	hibmc_fb = hibmc_framebuffer_init(dev, mode_cmd, obj);
 +	if (IS_ERR(hibmc_fb)) {
 +		drm_gem_object_put_unlocked(obj);
 +		return ERR_PTR((long)hibmc_fb);
 +	}
 +	return &hibmc_fb->fb;
++=======
+ 	return drm_gem_vram_fill_create_dumb(file, dev, 0, 128, args);
++>>>>>>> 9c9a8468de21 (drm/hisilicon: Enforce 128-byte stride alignment to fix the hardware limitation)
  }
  
  const struct drm_mode_config_funcs hibmc_mode_funcs = {
diff --git a/drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_de.c b/drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_de.c
index 08657a3627f3..5e16de9e3c3b 100644
--- a/drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_de.c
+++ b/drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_de.c
@@ -82,6 +82,10 @@ static int hibmc_plane_atomic_check(struct drm_plane *plane,
 		return -EINVAL;
 	}
 
+	if (state->fb->pitches[0] % 128 != 0) {
+		DRM_DEBUG_ATOMIC("wrong stride with 128-byte aligned\n");
+		return -EINVAL;
+	}
 	return 0;
 }
 
@@ -117,11 +121,8 @@ static void hibmc_plane_atomic_update(struct drm_plane *plane,
 	writel(gpu_addr, priv->mmio + HIBMC_CRT_FB_ADDRESS);
 
 	reg = state->fb->width * (state->fb->format->cpp[0]);
-	/* now line_pad is 16 */
-	reg = PADDING(16, reg);
 
-	line_l = state->fb->width * state->fb->format->cpp[0];
-	line_l = PADDING(16, line_l);
+	line_l = state->fb->pitches[0];
 	writel(HIBMC_FIELD(HIBMC_CRT_FB_WIDTH_WIDTH, reg) |
 	       HIBMC_FIELD(HIBMC_CRT_FB_WIDTH_OFFS, line_l),
 	       priv->mmio + HIBMC_CRT_FB_WIDTH);
* Unmerged path drivers/gpu/drm/hisilicon/hibmc/hibmc_drm_drv.c
* Unmerged path drivers/gpu/drm/hisilicon/hibmc/hibmc_ttm.c
