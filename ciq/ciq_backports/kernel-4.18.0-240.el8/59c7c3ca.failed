nvme: fix possible hang when ns scanning fails during error recovery

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sagi Grimberg <sagi@grimberg.me>
commit 59c7c3caaaf8750df4ec3255082f15eb4e371514
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/59c7c3ca.failed

When the controller is reconnecting, the host fails I/O and admin
commands as the host cannot reach the controller. ns scanning may
revalidate namespaces during that period and it is wrong to remove
namespaces due to these failures as we may hang (see 205da2434301).

One command that may fail is nvme_identify_ns_descs. Since we return
success due to having ns identify descriptor list optional, we continue
to compare ns identifiers in nvme_revalidate_disk, obviously fail and
return -ENODEV to nvme_validate_ns, which will remove the namespace.

Exactly what we don't want to happen.

Fixes: 22802bf742c2 ("nvme: Namepace identification descriptor list is optional")
	Tested-by: Anton Eidelman <anton@lightbitslabs.com>
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 59c7c3caaaf8750df4ec3255082f15eb4e371514)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 54bfa09c007b,f3c037f5a9ba..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1022,8 -1103,17 +1022,20 @@@ static int nvme_identify_ns_descs(struc
  
  	status = nvme_submit_sync_cmd(ctrl->admin_q, &c, data,
  				      NVME_IDENTIFY_DATA_SIZE);
++<<<<<<< HEAD
 +	if (status)
++=======
+ 	if (status) {
+ 		dev_warn(ctrl->device,
+ 			"Identify Descriptors failed (%d)\n", status);
+ 		 /*
+ 		  * Don't treat an error as fatal, as we potentially already
+ 		  * have a NGUID or EUI-64.
+ 		  */
+ 		if (status > 0 && !(status & NVME_SC_DNR))
+ 			status = 0;
++>>>>>>> 59c7c3caaaf8 (nvme: fix possible hang when ns scanning fails during error recovery)
  		goto free_data;
 -	}
  
  	for (pos = 0; pos < NVME_IDENTIFY_DATA_SIZE; pos += len) {
  		struct nvme_ns_id_desc *cur = data + pos;
* Unmerged path drivers/nvme/host/core.c
