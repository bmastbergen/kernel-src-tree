drm/i915/gt: Make timeslicing an explicit engine property

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit a211da9c771bf97395a3ced83a3aa383372b13a7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a211da9c.failed

In order to allow userspace to rely on timeslicing to reorder their
batches, we must support preemption of those user batches. Declare
timeslicing as an explicit property that is a combination of having the
kernel support and HW support.

	Suggested-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Fixes: 8ee36e048c98 ("drm/i915/execlists: Minimalistic timeslicing")
	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
	Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200501122249.12417-1-chris@chris-wilson.co.uk
(cherry picked from commit a211da9c771bf97395a3ced83a3aa383372b13a7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/intel_engine.h
#	drivers/gpu/drm/i915/gt/intel_engine_types.h
#	drivers/gpu/drm/i915/gt/intel_lrc.c
diff --cc drivers/gpu/drm/i915/gt/intel_engine.h
index 2f1c6871ee95,19d0b8830905..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_engine.h
+++ b/drivers/gpu/drm/i915/gt/intel_engine.h
@@@ -571,4 -323,13 +571,16 @@@ void intel_engine_init_active(struct in
  #define ENGINE_MOCK	1
  #define ENGINE_VIRTUAL	2
  
++<<<<<<< HEAD
++=======
+ static inline bool
+ intel_engine_has_preempt_reset(const struct intel_engine_cs *engine)
+ {
+ 	if (!IS_ACTIVE(CONFIG_DRM_I915_PREEMPT_TIMEOUT))
+ 		return false;
+ 
+ 	return intel_engine_has_preemption(engine);
+ }
+ 
++>>>>>>> a211da9c771b (drm/i915/gt: Make timeslicing an explicit engine property)
  #endif /* _INTEL_RINGBUFFER_H_ */
diff --cc drivers/gpu/drm/i915/gt/intel_engine_types.h
index 3f6c58b68bb1,6c676774dcd9..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_engine_types.h
+++ b/drivers/gpu/drm/i915/gt/intel_engine_types.h
@@@ -464,9 -492,11 +464,17 @@@ struct intel_engine_cs 
  #define I915_ENGINE_SUPPORTS_STATS   BIT(1)
  #define I915_ENGINE_HAS_PREEMPTION   BIT(2)
  #define I915_ENGINE_HAS_SEMAPHORES   BIT(3)
++<<<<<<< HEAD
 +#define I915_ENGINE_NEEDS_BREADCRUMB_TASKLET BIT(4)
 +#define I915_ENGINE_IS_VIRTUAL       BIT(5)
 +#define I915_ENGINE_REQUIRES_CMD_PARSER BIT(7)
++=======
+ #define I915_ENGINE_HAS_TIMESLICES   BIT(4)
+ #define I915_ENGINE_NEEDS_BREADCRUMB_TASKLET BIT(5)
+ #define I915_ENGINE_IS_VIRTUAL       BIT(6)
+ #define I915_ENGINE_HAS_RELATIVE_MMIO BIT(7)
+ #define I915_ENGINE_REQUIRES_CMD_PARSER BIT(8)
++>>>>>>> a211da9c771b (drm/i915/gt: Make timeslicing an explicit engine property)
  	unsigned int flags;
  
  	/*
diff --cc drivers/gpu/drm/i915/gt/intel_lrc.c
index f2865f3cc1d5,d4ef344657b0..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_lrc.c
+++ b/drivers/gpu/drm/i915/gt/intel_lrc.c
@@@ -2601,18 -4799,40 +2601,35 @@@ void intel_execlists_set_default_submis
  	engine->unpark = NULL;
  
  	engine->flags |= I915_ENGINE_SUPPORTS_STATS;
 -	if (!intel_vgpu_active(engine->i915)) {
 +	if (!intel_vgpu_active(engine->i915))
  		engine->flags |= I915_ENGINE_HAS_SEMAPHORES;
++<<<<<<< HEAD
 +	if (engine->preempt_context &&
 +	    HAS_LOGICAL_RING_PREEMPTION(engine->i915))
 +		engine->flags |= I915_ENGINE_HAS_PREEMPTION;
++=======
+ 		if (HAS_LOGICAL_RING_PREEMPTION(engine->i915)) {
+ 			engine->flags |= I915_ENGINE_HAS_PREEMPTION;
+ 			if (IS_ACTIVE(CONFIG_DRM_I915_TIMESLICE_DURATION))
+ 				engine->flags |= I915_ENGINE_HAS_TIMESLICES;
+ 		}
+ 	}
+ 
+ 	if (INTEL_GEN(engine->i915) >= 12)
+ 		engine->flags |= I915_ENGINE_HAS_RELATIVE_MMIO;
+ 
+ 	if (intel_engine_has_preemption(engine))
+ 		engine->emit_bb_start = gen8_emit_bb_start;
+ 	else
+ 		engine->emit_bb_start = gen8_emit_bb_start_noarb;
++>>>>>>> a211da9c771b (drm/i915/gt: Make timeslicing an explicit engine property)
  }
  
 -static void execlists_shutdown(struct intel_engine_cs *engine)
 +static void execlists_destroy(struct intel_engine_cs *engine)
  {
 -	/* Synchronise with residual timers and any softirq they raise */
 -	del_timer_sync(&engine->execlists.timer);
 -	del_timer_sync(&engine->execlists.preempt);
 -	tasklet_kill(&engine->execlists.tasklet);
 -}
 -
 -static void execlists_release(struct intel_engine_cs *engine)
 -{
 -	engine->sanitize = NULL; /* no longer in control, nothing to sanitize */
 -
 -	execlists_shutdown(engine);
 -
  	intel_engine_cleanup_common(engine);
  	lrc_destroy_wa_ctx(engine);
 +	kfree(engine);
  }
  
  static void
* Unmerged path drivers/gpu/drm/i915/gt/intel_engine.h
* Unmerged path drivers/gpu/drm/i915/gt/intel_engine_types.h
* Unmerged path drivers/gpu/drm/i915/gt/intel_lrc.c
