scsi: sd_zbc: Cleanup sd_zbc_alloc_report_buffer()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Damien Le Moal <damien.lemoal@wdc.com>
commit 23a50861adda26a3f3b3ec5fbca0583133d89538
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/23a50861.failed

There is no need to arbitrarily limit the size of a report zone to the
number of zones defined by SD_ZBC_REPORT_MAX_ZONES. Rather, simply
calculate the report buffer size needed for the requested number of
zones without exceeding the device total number of zones. This buffer
size limitation to the hardware maximum transfer size and page mapping
capabilities is kept unchanged. Starting with this initial buffer size,
the allocation is optimized by iterating over decreasing buffer size
until the allocation succeeds (each iteration is allowed to fail fast
using the __GFP_NORETRY flag). This ensures forward progress for zone
reports and avoids failures of zones revalidation under memory pressure.

While at it, also replace the hard coded 512 B sector size with the
SECTOR_SIZE macro.

	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Acked-by: Martin K. Petersen <martin.petersen@oracle.com>
	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 23a50861adda26a3f3b3ec5fbca0583133d89538)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd_zbc.c
diff --cc drivers/scsi/sd_zbc.c
index 3707ee36b4d8,663608d1003b..000000000000
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@@ -103,6 -104,55 +103,58 @@@ static int sd_zbc_do_report_zones(struc
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * Allocate a buffer for report zones reply.
+  * @sdkp: The target disk
+  * @nr_zones: Maximum number of zones to report
+  * @buflen: Size of the buffer allocated
+  *
+  * Try to allocate a reply buffer for the number of requested zones.
+  * The size of the buffer allocated may be smaller than requested to
+  * satify the device constraint (max_hw_sectors, max_segments, etc).
+  *
+  * Return the address of the allocated buffer and update @buflen with
+  * the size of the allocated buffer.
+  */
+ static void *sd_zbc_alloc_report_buffer(struct scsi_disk *sdkp,
+ 					unsigned int nr_zones, size_t *buflen)
+ {
+ 	struct request_queue *q = sdkp->disk->queue;
+ 	size_t bufsize;
+ 	void *buf;
+ 
+ 	/*
+ 	 * Report zone buffer size should be at most 64B times the number of
+ 	 * zones requested plus the 64B reply header, but should be at least
+ 	 * SECTOR_SIZE for ATA devices.
+ 	 * Make sure that this size does not exceed the hardware capabilities.
+ 	 * Furthermore, since the report zone command cannot be split, make
+ 	 * sure that the allocated buffer can always be mapped by limiting the
+ 	 * number of pages allocated to the HBA max segments limit.
+ 	 */
+ 	nr_zones = min(nr_zones, sdkp->nr_zones);
+ 	bufsize = roundup((nr_zones + 1) * 64, SECTOR_SIZE);
+ 	bufsize = min_t(size_t, bufsize,
+ 			queue_max_hw_sectors(q) << SECTOR_SHIFT);
+ 	bufsize = min_t(size_t, bufsize, queue_max_segments(q) << PAGE_SHIFT);
+ 
+ 	while (bufsize >= SECTOR_SIZE) {
+ 		buf = __vmalloc(bufsize,
+ 				GFP_KERNEL | __GFP_ZERO | __GFP_NORETRY,
+ 				PAGE_KERNEL);
+ 		if (buf) {
+ 			*buflen = bufsize;
+ 			return buf;
+ 		}
+ 		bufsize >>= 1;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
++>>>>>>> 23a50861adda (scsi: sd_zbc: Cleanup sd_zbc_alloc_report_buffer())
  /**
   * sd_zbc_report_zones - Disk report zones operation.
   * @disk: The target disk
* Unmerged path drivers/scsi/sd_zbc.c
