net/mlx5: Verify goto chain offload support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Eli Cohen <eli@mellanox.com>
commit 2fbbc30da05d9bd32d7fefeef445db3edd28d0bd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/2fbbc30d.failed

According to PRM, forward to flow table along with either packet
reformat or decap is supported only if reformat_and_fwd_to_table
capability is set for the flow table.

Add dependency on the capability and pack all the conditions for "goto
chain" in a single function.

Fix language in error message in case of not supporting forward to a
lower numbered flow table.

	Signed-off-by: Eli Cohen <eli@mellanox.com>
	Reviewed-by: Roi Dayan <roid@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 2fbbc30da05d9bd32d7fefeef445db3edd28d0bd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
index 3a708d1db4f9,33d3e70418fb..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@@ -3262,6 -3293,65 +3262,68 @@@ bool mlx5e_is_valid_eswitch_fwd_dev(str
  	       same_hw_devs(priv, netdev_priv(out_dev));
  }
  
++<<<<<<< HEAD
++=======
+ static bool is_duplicated_output_device(struct net_device *dev,
+ 					struct net_device *out_dev,
+ 					int *ifindexes, int if_count,
+ 					struct netlink_ext_ack *extack)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < if_count; i++) {
+ 		if (ifindexes[i] == out_dev->ifindex) {
+ 			NL_SET_ERR_MSG_MOD(extack,
+ 					   "can't duplicate output to same device");
+ 			netdev_err(dev, "can't duplicate output to same device: %s\n",
+ 				   out_dev->name);
+ 			return true;
+ 		}
+ 	}
+ 
+ 	return false;
+ }
+ 
+ static int mlx5_validate_goto_chain(struct mlx5_eswitch *esw,
+ 				    struct mlx5e_tc_flow *flow,
+ 				    const struct flow_action_entry *act,
+ 				    u32 actions,
+ 				    struct netlink_ext_ack *extack)
+ {
+ 	u32 max_chain = mlx5_esw_chains_get_chain_range(esw);
+ 	struct mlx5_esw_flow_attr *attr = flow->esw_attr;
+ 	bool ft_flow = mlx5e_is_ft_flow(flow);
+ 	u32 dest_chain = act->chain_index;
+ 
+ 	if (ft_flow) {
+ 		NL_SET_ERR_MSG_MOD(extack, "Goto action is not supported");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	if (!mlx5_esw_chains_backwards_supported(esw) &&
+ 	    dest_chain <= attr->chain) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "Goto lower numbered chain isn't supported");
+ 		return -EOPNOTSUPP;
+ 	}
+ 	if (dest_chain > max_chain) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "Requested destination chain is out of supported range");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	if (actions & (MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT |
+ 		       MLX5_FLOW_CONTEXT_ACTION_DECAP) &&
+ 	    !MLX5_CAP_ESW_FLOWTABLE_FDB(esw->dev, reformat_and_fwd_to_table)) {
+ 		NL_SET_ERR_MSG_MOD(extack,
+ 				   "Goto chain is not allowed if action has reformat or decap");
+ 		return -EOPNOTSUPP;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 2fbbc30da05d (net/mlx5: Verify goto chain offload support)
  static int parse_tc_fdb_actions(struct mlx5e_priv *priv,
  				struct flow_action *flow_action,
  				struct mlx5e_tc_flow *flow,
@@@ -3468,26 -3573,15 +3530,34 @@@
  		case FLOW_ACTION_TUNNEL_DECAP:
  			action |= MLX5_FLOW_CONTEXT_ACTION_DECAP;
  			break;
++<<<<<<< HEAD
 +		case FLOW_ACTION_GOTO: {
 +			u32 dest_chain = act->chain_index;
 +			u32 max_chain = mlx5_eswitch_get_chain_range(esw);
 +
 +			if (ft_flow) {
 +				NL_SET_ERR_MSG_MOD(extack, "Goto action is not supported");
 +				return -EOPNOTSUPP;
 +			}
 +			if (dest_chain <= attr->chain) {
 +				NL_SET_ERR_MSG(extack, "Goto earlier chain isn't supported");
 +				return -EOPNOTSUPP;
 +			}
 +			if (dest_chain > max_chain) {
 +				NL_SET_ERR_MSG(extack, "Requested destination chain is out of supported range");
 +				return -EOPNOTSUPP;
 +			}
++=======
+ 		case FLOW_ACTION_GOTO:
+ 			err = mlx5_validate_goto_chain(esw, flow, act, action,
+ 						       extack);
+ 			if (err)
+ 				return err;
+ 
++>>>>>>> 2fbbc30da05d (net/mlx5: Verify goto chain offload support)
  			action |= MLX5_FLOW_CONTEXT_ACTION_COUNT;
- 			attr->dest_chain = dest_chain;
+ 			attr->dest_chain = act->chain_index;
  			break;
- 			}
  		default:
  			NL_SET_ERR_MSG_MOD(extack, "The offload action is not supported");
  			return -EOPNOTSUPP;
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
