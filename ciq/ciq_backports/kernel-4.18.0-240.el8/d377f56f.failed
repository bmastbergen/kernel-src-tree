gpio: gpiolib: Normalize return code variable name

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Linus Walleij <linus.walleij@linaro.org>
commit d377f56f34f5bc549c3aabfe27320f3c31235c05
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d377f56f.failed

It is confusing to name return variables mixedly "status",
"err" or "ret". I just changed them all to "ret", by personal
preference, to lower cognitive stress.

	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
Link: https://lore.kernel.org/r/20190716091145.8235-1-linus.walleij@linaro.org
(cherry picked from commit d377f56f34f5bc549c3aabfe27320f3c31235c05)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/gpiolib.c
diff --cc drivers/gpio/gpiolib.c
index e17af7d89361,5163e87969e7..000000000000
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@@ -1376,20 -1359,28 +1376,38 @@@ int gpiochip_add_data_with_key(struct g
  	INIT_LIST_HEAD(&gdev->pin_ranges);
  #endif
  
- 	status = gpiochip_set_desc_names(chip);
- 	if (status)
+ 	ret = gpiochip_set_desc_names(chip);
+ 	if (ret)
  		goto err_remove_from_list;
  
++<<<<<<< HEAD
 +	status = gpiochip_alloc_valid_mask(chip);
 +	if (status)
 +		goto err_remove_from_list;
 +
 +	status = of_gpiochip_add(chip);
 +	if (status)
 +		goto err_free_gpiochip_mask;
++=======
+ 	ret = gpiochip_irqchip_init_valid_mask(chip);
+ 	if (ret)
+ 		goto err_remove_from_list;
+ 
+ 	ret = gpiochip_alloc_valid_mask(chip);
+ 	if (ret)
+ 		goto err_remove_irqchip_mask;
+ 
+ 	ret = gpiochip_add_irqchip(chip, lock_key, request_key);
+ 	if (ret)
+ 		goto err_free_gpiochip_mask;
  
- 	status = gpiochip_init_valid_mask(chip);
- 	if (status)
+ 	ret = of_gpiochip_add(chip);
+ 	if (ret)
+ 		goto err_remove_chip;
++>>>>>>> d377f56f34f5 (gpio: gpiolib: Normalize return code variable name)
+ 
+ 	ret = gpiochip_init_valid_mask(chip);
+ 	if (ret)
  		goto err_remove_of_chip;
  
  	for (i = 0; i < chip->ngpio; i++) {
@@@ -1429,9 -1407,9 +1447,15 @@@
  	 * Otherwise, defer until later.
  	 */
  	if (gpiolib_initialized) {
++<<<<<<< HEAD
 +		status = gpiochip_setup_dev(gdev);
 +		if (status)
 +			goto err_remove_irqchip;
++=======
+ 		ret = gpiochip_setup_dev(gdev);
+ 		if (ret)
+ 			goto err_remove_acpi_chip;
++>>>>>>> d377f56f34f5 (gpio: gpiolib: Normalize return code variable name)
  	}
  	return 0;
  
@@@ -2539,20 -2818,29 +2563,30 @@@ EXPORT_SYMBOL_GPL(gpiochip_is_requested
   * code on failure.
   */
  struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *chip, u16 hwnum,
 -					    const char *label,
 -					    enum gpio_lookup_flags lflags,
 -					    enum gpiod_flags dflags)
 +					    const char *label)
  {
  	struct gpio_desc *desc = gpiochip_get_desc(chip, hwnum);
- 	int err;
+ 	int ret;
  
  	if (IS_ERR(desc)) {
  		chip_err(chip, "failed to get GPIO descriptor\n");
  		return desc;
  	}
  
- 	err = gpiod_request_commit(desc, label);
- 	if (err < 0)
- 		return ERR_PTR(err);
+ 	ret = gpiod_request_commit(desc, label);
+ 	if (ret < 0)
+ 		return ERR_PTR(ret);
  
++<<<<<<< HEAD
++=======
+ 	ret = gpiod_configure_flags(desc, label, lflags, dflags);
+ 	if (ret) {
+ 		chip_err(chip, "setup of own GPIO %s failed\n", label);
+ 		gpiod_free_commit(desc);
+ 		return ERR_PTR(ret);
+ 	}
+ 
++>>>>>>> d377f56f34f5 (gpio: gpiolib: Normalize return code variable name)
  	return desc;
  }
  EXPORT_SYMBOL_GPL(gpiochip_request_own_desc);
@@@ -4180,9 -4449,9 +4214,9 @@@ struct gpio_desc *__must_check gpiod_ge
  					       unsigned int idx,
  					       enum gpiod_flags flags)
  {
 -	unsigned long lookupflags = GPIO_LOOKUP_FLAGS_DEFAULT;
 +	unsigned long lookupflags = 0;
  	struct gpio_desc *desc = NULL;
- 	int status;
+ 	int ret;
  	/* Maybe we have a device name, maybe not */
  	const char *devname = dev ? dev_name(dev) : "?";
  
@@@ -4433,22 -4629,15 +4467,22 @@@ int gpiod_hog(struct gpio_desc *desc, c
  	chip = gpiod_to_chip(desc);
  	hwnum = gpio_chip_hwgpio(desc);
  
 -	local_desc = gpiochip_request_own_desc(chip, hwnum, name,
 -					       lflags, dflags);
 +	local_desc = gpiochip_request_own_desc(chip, hwnum, name);
  	if (IS_ERR(local_desc)) {
- 		status = PTR_ERR(local_desc);
+ 		ret = PTR_ERR(local_desc);
  		pr_err("requesting hog GPIO %s (chip %s, offset %d) failed, %d\n",
- 		       name, chip->label, hwnum, status);
- 		return status;
+ 		       name, chip->label, hwnum, ret);
+ 		return ret;
  	}
  
 +	status = gpiod_configure_flags(desc, name, lflags, dflags);
 +	if (status < 0) {
 +		pr_err("setup of hog GPIO %s (chip %s, offset %d) failed, %d\n",
 +		       name, chip->label, hwnum, status);
 +		gpiochip_free_own_desc(desc);
 +		return status;
 +	}
 +
  	/* Mark GPIO as hogged so it can be identified and removed later */
  	set_bit(FLAG_IS_HOGGED, &desc->flags);
  
* Unmerged path drivers/gpio/gpiolib.c
