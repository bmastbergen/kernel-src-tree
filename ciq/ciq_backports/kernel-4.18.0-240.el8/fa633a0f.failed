libbpf: Fix build on read-only filesystems

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Namhyung Kim <namhyung@kernel.org>
commit fa633a0f89192379828103957874682d389eae83
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fa633a0f.failed

I got the following error when I tried to build perf on a read-only
filesystem with O=dir option.

  $ cd /some/where/ro/linux/tools/perf
  $ make O=$HOME/build/perf
  ...
    CC       /home/namhyung/build/perf/lib.o
  /bin/sh: bpf_helper_defs.h: Read-only file system
  make[3]: *** [Makefile:184: bpf_helper_defs.h] Error 1
  make[2]: *** [Makefile.perf:778: /home/namhyung/build/perf/libbpf.a] Error 2
  make[2]: *** Waiting for unfinished jobs....
    LD       /home/namhyung/build/perf/libperf-in.o
    AR       /home/namhyung/build/perf/libperf.a
    PERF_VERSION = 5.4.0
  make[1]: *** [Makefile.perf:225: sub-make] Error 2
  make: *** [Makefile:70: all] Error 2

It was becaused bpf_helper_defs.h was generated in current directory.
Move it to OUTPUT directory.

	Signed-off-by: Namhyung Kim <namhyung@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Tested-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
Link: https://lore.kernel.org/bpf/20191223061326.843366-1-namhyung@kernel.org
(cherry picked from commit fa633a0f89192379828103957874682d389eae83)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/Makefile
#	tools/testing/selftests/bpf/.gitignore
#	tools/testing/selftests/bpf/Makefile
diff --cc tools/lib/bpf/Makefile
index e6fcbcad3199,97830e46d1a0..000000000000
--- a/tools/lib/bpf/Makefile
+++ b/tools/lib/bpf/Makefile
@@@ -130,8 -133,12 +130,9 @@@ all
  export srctree OUTPUT CC LD CFLAGS V
  include $(srctree)/tools/build/Makefile.include
  
 -SHARED_OBJDIR	:= $(OUTPUT)sharedobjs/
 -STATIC_OBJDIR	:= $(OUTPUT)staticobjs/
 -BPF_IN_SHARED	:= $(SHARED_OBJDIR)libbpf-in.o
 -BPF_IN_STATIC	:= $(STATIC_OBJDIR)libbpf-in.o
 +BPF_IN		:= $(OUTPUT)libbpf-in.o
  VERSION_SCRIPT	:= libbpf.map
+ BPF_HELPER_DEFS	:= $(OUTPUT)bpf_helper_defs.h
  
  LIB_TARGET	:= $(addprefix $(OUTPUT),$(LIB_TARGET))
  LIB_FILE	:= $(addprefix $(OUTPUT),$(LIB_FILE))
@@@ -149,7 -160,7 +150,11 @@@ all: fixde
  
  all_cmd: $(CMD_TARGETS) check
  
++<<<<<<< HEAD
 +$(BPF_IN): force elfdep bpfdep bpf_helper_defs.h
++=======
+ $(BPF_IN_SHARED): force elfdep bpfdep $(BPF_HELPER_DEFS)
++>>>>>>> fa633a0f8919 (libbpf: Fix build on read-only filesystems)
  	@(test -f ../../include/uapi/linux/bpf.h -a -f ../../../include/uapi/linux/bpf.h && ( \
  	(diff -B ../../include/uapi/linux/bpf.h ../../../include/uapi/linux/bpf.h >/dev/null) || \
  	echo "Warning: Kernel ABI header at 'tools/include/uapi/linux/bpf.h' differs from latest version at 'include/uapi/linux/bpf.h'" >&2 )) || true
@@@ -165,11 -176,14 +170,18 @@@
  	@(test -f ../../include/uapi/linux/if_xdp.h -a -f ../../../include/uapi/linux/if_xdp.h && ( \
  	(diff -B ../../include/uapi/linux/if_xdp.h ../../../include/uapi/linux/if_xdp.h >/dev/null) || \
  	echo "Warning: Kernel ABI header at 'tools/include/uapi/linux/if_xdp.h' differs from latest version at 'include/uapi/linux/if_xdp.h'" >&2 )) || true
++<<<<<<< HEAD
 +	$(Q)$(MAKE) $(build)=libbpf
++=======
+ 	$(Q)$(MAKE) $(build)=libbpf OUTPUT=$(SHARED_OBJDIR) CFLAGS="$(CFLAGS) $(SHLIB_FLAGS)"
  
- bpf_helper_defs.h: $(srctree)/tools/include/uapi/linux/bpf.h
+ $(BPF_IN_STATIC): force elfdep bpfdep $(BPF_HELPER_DEFS)
+ 	$(Q)$(MAKE) $(build)=libbpf OUTPUT=$(STATIC_OBJDIR)
++>>>>>>> fa633a0f8919 (libbpf: Fix build on read-only filesystems)
+ 
+ $(BPF_HELPER_DEFS): $(srctree)/tools/include/uapi/linux/bpf.h
  	$(Q)$(srctree)/scripts/bpf_helpers_doc.py --header 		\
- 		--file $(srctree)/tools/include/uapi/linux/bpf.h > bpf_helper_defs.h
+ 		--file $(srctree)/tools/include/uapi/linux/bpf.h > $(BPF_HELPER_DEFS)
  
  $(OUTPUT)libbpf.so: $(OUTPUT)libbpf.so.$(LIBBPF_VERSION)
  
@@@ -258,9 -270,10 +270,14 @@@ config-clean
  	$(Q)$(MAKE) -C $(srctree)/tools/build/feature/ clean >/dev/null
  
  clean:
 -	$(call QUIET_CLEAN, libbpf) $(RM) -rf $(CMD_TARGETS) \
 +	$(call QUIET_CLEAN, libbpf) $(RM) $(CMD_TARGETS) \
  		*.o *~ *.a *.so *.so.$(LIBBPF_MAJOR_VERSION) .*.d .*.cmd \
++<<<<<<< HEAD
 +		*.pc LIBBPF-CFLAGS bpf_helper_defs.h
++=======
+ 		*.pc LIBBPF-CFLAGS $(BPF_HELPER_DEFS) \
+ 		$(SHARED_OBJDIR) $(STATIC_OBJDIR)
++>>>>>>> fa633a0f8919 (libbpf: Fix build on read-only filesystems)
  	$(call QUIET_CLEAN, core-gen) $(RM) $(OUTPUT)FEATURE-DUMP.libbpf
  
  
diff --cc tools/testing/selftests/bpf/.gitignore
index f9d8aed126b8,1ff0a9f49c01..000000000000
--- a/tools/testing/selftests/bpf/.gitignore
+++ b/tools/testing/selftests/bpf/.gitignore
@@@ -21,5 -21,23 +21,25 @@@ test_lirc_mode2_use
  get_cgroup_id_user
  test_skb_cgroup_id_user
  test_socket_cookie
 -test_cgroup_attach
  test_cgroup_storage
  test_select_reuseport
++<<<<<<< HEAD
++=======
+ test_flow_dissector
+ flow_dissector_load
+ test_netcnt
+ test_section_names
+ test_tcpnotify_user
+ test_libbpf
+ test_tcp_check_syncookie_user
+ test_sysctl
+ libbpf.pc
+ libbpf.so.*
+ test_hashmap
+ test_btf_dump
+ xdping
+ test_cpp
+ /no_alu32
+ /bpf_gcc
+ bpf_helper_defs.h
++>>>>>>> fa633a0f8919 (libbpf: Fix build on read-only filesystems)
diff --cc tools/testing/selftests/bpf/Makefile
index 5f86f43d0e39,e2fd6f8d579c..000000000000
--- a/tools/testing/selftests/bpf/Makefile
+++ b/tools/testing/selftests/bpf/Makefile
@@@ -138,6 -120,10 +138,13 @@@ force
  $(BPFOBJ): force
  	$(MAKE) -C $(BPFDIR) OUTPUT=$(OUTPUT)/
  
++<<<<<<< HEAD
++=======
+ BPF_HELPERS := $(OUTPUT)/bpf_helper_defs.h $(wildcard $(BPFDIR)/bpf_*.h)
+ $(OUTPUT)/bpf_helper_defs.h:
+ 	$(MAKE) -C $(BPFDIR) OUTPUT=$(OUTPUT)/ $(OUTPUT)/bpf_helper_defs.h
+ 
++>>>>>>> fa633a0f8919 (libbpf: Fix build on read-only filesystems)
  # Get Clang's default includes on this system, as opposed to those seen by
  # '-target bpf'. This fixes "missing" files on some architectures/distros,
  # such as asm/byteorder.h, asm/socket.h, asm/sockios.h, sys/cdefs.h etc.
* Unmerged path tools/lib/bpf/Makefile
* Unmerged path tools/testing/selftests/bpf/.gitignore
* Unmerged path tools/testing/selftests/bpf/Makefile
