veth: introduce more xdp counters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Lorenzo Bianconi <lorenzo@kernel.org>
commit 9152cff0dd3df6613091ab8c8bf1c419a5f01047
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9152cff0.failed

Introduce xdp_xmit counter in order to distinguish between XDP_TX and
ndo_xdp_xmit stats. Introduce the following ethtool counters:
- rx_xdp_tx
- rx_xdp_tx_errors
- tx_xdp_xmit
- tx_xdp_xmit_errors
- rx_xdp_redirect

	Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 9152cff0dd3df6613091ab8c8bf1c419a5f01047)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/veth.c
diff --cc drivers/net/veth.c
index 013947869d96,093b55acedb1..000000000000
--- a/drivers/net/veth.c
+++ b/drivers/net/veth.c
@@@ -33,16 -34,23 +33,32 @@@
  #define VETH_RING_SIZE		256
  #define VETH_XDP_HEADROOM	(XDP_PACKET_HEADROOM + NET_IP_ALIGN)
  
 +/* Separating two types of XDP xmit */
 +#define VETH_XDP_TX		BIT(0)
 +#define VETH_XDP_REDIR		BIT(1)
 +
  #define VETH_XDP_TX_BULK_SIZE	16
  
++<<<<<<< HEAD
++=======
+ struct veth_stats {
+ 	u64	rx_drops;
+ 	/* xdp */
+ 	u64	xdp_packets;
+ 	u64	xdp_bytes;
+ 	u64	xdp_redirect;
+ 	u64	xdp_drops;
+ 	u64	xdp_tx;
+ 	u64	xdp_tx_err;
+ 	u64	xdp_xmit;
+ 	u64	xdp_xmit_err;
+ };
+ 
++>>>>>>> 9152cff0dd3d (veth: introduce more xdp counters)
  struct veth_rq_stats {
 -	struct veth_stats	vs;
 +	u64			xdp_packets;
 +	u64			xdp_bytes;
 +	u64			xdp_drops;
  	struct u64_stats_sync	syncp;
  };
  
@@@ -84,7 -92,13 +100,17 @@@ struct veth_q_stat_desc 
  static const struct veth_q_stat_desc veth_rq_stats_desc[] = {
  	{ "xdp_packets",	VETH_RQ_STAT(xdp_packets) },
  	{ "xdp_bytes",		VETH_RQ_STAT(xdp_bytes) },
++<<<<<<< HEAD
 +	{ "xdp_drops",		VETH_RQ_STAT(xdp_drops) },
++=======
+ 	{ "rx_drops",		VETH_RQ_STAT(rx_drops) },
+ 	{ "rx_xdp_redirect",	VETH_RQ_STAT(xdp_redirect) },
+ 	{ "rx_xdp_drops",	VETH_RQ_STAT(xdp_drops) },
+ 	{ "rx_xdp_tx",		VETH_RQ_STAT(xdp_tx) },
+ 	{ "rx_xdp_tx_errors",	VETH_RQ_STAT(xdp_tx_err) },
+ 	{ "tx_xdp_xmit",	VETH_RQ_STAT(xdp_xmit) },
+ 	{ "tx_xdp_xmit_errors",	VETH_RQ_STAT(xdp_xmit_err) },
++>>>>>>> 9152cff0dd3d (veth: introduce more xdp counters)
  };
  
  #define VETH_RQ_STATS_LEN	ARRAY_SIZE(veth_rq_stats_desc)
@@@ -389,14 -382,16 +415,15 @@@ static int veth_select_rxq(struct net_d
  }
  
  static int veth_xdp_xmit(struct net_device *dev, int n,
- 			 struct xdp_frame **frames, u32 flags)
+ 			 struct xdp_frame **frames,
+ 			 u32 flags, bool ndo_xmit)
  {
  	struct veth_priv *rcv_priv, *priv = netdev_priv(dev);
+ 	unsigned int qidx, max_len;
  	struct net_device *rcv;
  	int i, ret, drops = n;
- 	unsigned int max_len;
  	struct veth_rq *rq;
  
 -	rcu_read_lock();
  	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK)) {
  		ret = -EINVAL;
  		goto drop;
@@@ -438,8 -434,21 +466,24 @@@
  	if (flags & XDP_XMIT_FLUSH)
  		__veth_xdp_flush(rq);
  
++<<<<<<< HEAD
 +	if (likely(!drops))
++=======
+ 	rq = &priv->rq[qidx];
+ 	u64_stats_update_begin(&rq->stats.syncp);
+ 	if (ndo_xmit) {
+ 		rq->stats.vs.xdp_xmit += n - drops;
+ 		rq->stats.vs.xdp_xmit_err += drops;
+ 	} else {
+ 		rq->stats.vs.xdp_tx += n - drops;
+ 		rq->stats.vs.xdp_tx_err += drops;
+ 	}
+ 	u64_stats_update_end(&rq->stats.syncp);
+ 
+ 	if (likely(!drops)) {
+ 		rcu_read_unlock();
++>>>>>>> 9152cff0dd3d (veth: introduce more xdp counters)
  		return n;
 -	}
  
  	ret = n - drops;
  drop:
@@@ -756,9 -780,11 +806,17 @@@ static int veth_xdp_rcv(struct veth_rq 
  	}
  
  	u64_stats_update_begin(&rq->stats.syncp);
++<<<<<<< HEAD
 +	rq->stats.xdp_packets += done;
 +	rq->stats.xdp_bytes += bytes;
 +	rq->stats.xdp_drops += drops;
++=======
+ 	rq->stats.vs.xdp_redirect += stats->xdp_redirect;
+ 	rq->stats.vs.xdp_bytes += stats->xdp_bytes;
+ 	rq->stats.vs.xdp_drops += stats->xdp_drops;
+ 	rq->stats.vs.rx_drops += stats->rx_drops;
+ 	rq->stats.vs.xdp_packets += done;
++>>>>>>> 9152cff0dd3d (veth: introduce more xdp counters)
  	u64_stats_update_end(&rq->stats.syncp);
  
  	return done;
* Unmerged path drivers/net/veth.c
