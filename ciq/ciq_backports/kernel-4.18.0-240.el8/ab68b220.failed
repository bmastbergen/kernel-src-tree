pinctrl: baytrail: Group GPIO IRQ chip initialization

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit ab68b220e81fd03383c0d9e1a87b51f9bbe4db77
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ab68b220.failed

After commit 5ea422750a9f ("pinctrl: baytrail: Pass irqchip when
adding gpiochip") the GPIO IRQ chip structure is being initialized
under conditional when IRQ resource has been discovered. But that
commit left aside the assignment of ->init_valid_mask() callback
that is done unconditionally.

For sake of consistency and preventing some garbage in GPIO IRQ chip
structure group initialization together.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
(cherry picked from commit ab68b220e81fd03383c0d9e1a87b51f9bbe4db77)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pinctrl/intel/pinctrl-baytrail.c
diff --cc drivers/pinctrl/intel/pinctrl-baytrail.c
index e4fb0870066b,d829843314ba..000000000000
--- a/drivers/pinctrl/intel/pinctrl-baytrail.c
+++ b/drivers/pinctrl/intel/pinctrl-baytrail.c
@@@ -1527,7 -1529,6 +1527,10 @@@ static int byt_gpio_probe(struct byt_gp
  	gc->add_pin_ranges = byt_gpio_add_pin_ranges;
  	gc->parent	= &vg->pdev->dev;
  	gc->ngpio	= vg->soc_data->npins;
++<<<<<<< HEAD
 +	gc->irq.need_valid_mask	= true;
++=======
++>>>>>>> ab68b220e81f (pinctrl: baytrail: Group GPIO IRQ chip initialization)
  
  #ifdef CONFIG_PM_SLEEP
  	vg->saved_context = devm_kcalloc(&vg->pdev->dev, gc->ngpio,
@@@ -1535,6 -1536,34 +1538,37 @@@
  	if (!vg->saved_context)
  		return -ENOMEM;
  #endif
++<<<<<<< HEAD
++=======
+ 
+ 	/* set up interrupts  */
+ 	irq_rc = platform_get_resource(vg->pdev, IORESOURCE_IRQ, 0);
+ 	if (irq_rc && irq_rc->start) {
+ 		struct gpio_irq_chip *girq;
+ 
+ 		vg->irqchip.name = "BYT-GPIO",
+ 		vg->irqchip.irq_ack = byt_irq_ack,
+ 		vg->irqchip.irq_mask = byt_irq_mask,
+ 		vg->irqchip.irq_unmask = byt_irq_unmask,
+ 		vg->irqchip.irq_set_type = byt_irq_type,
+ 		vg->irqchip.flags = IRQCHIP_SKIP_SET_WAKE,
+ 
+ 		girq = &gc->irq;
+ 		girq->chip = &vg->irqchip;
+ 		girq->init_hw = byt_gpio_irq_init_hw;
+ 		girq->init_valid_mask = byt_init_irq_valid_mask;
+ 		girq->parent_handler = byt_gpio_irq_handler;
+ 		girq->num_parents = 1;
+ 		girq->parents = devm_kcalloc(&vg->pdev->dev, girq->num_parents,
+ 					     sizeof(*girq->parents), GFP_KERNEL);
+ 		if (!girq->parents)
+ 			return -ENOMEM;
+ 		girq->parents[0] = (unsigned int)irq_rc->start;
+ 		girq->default_type = IRQ_TYPE_NONE;
+ 		girq->handler = handle_bad_irq;
+ 	}
+ 
++>>>>>>> ab68b220e81f (pinctrl: baytrail: Group GPIO IRQ chip initialization)
  	ret = devm_gpiochip_add_data(&vg->pdev->dev, gc, vg);
  	if (ret) {
  		dev_err(&vg->pdev->dev, "failed adding byt-gpio chip\n");
* Unmerged path drivers/pinctrl/intel/pinctrl-baytrail.c
