crypto/nx: Enable and setup GZIP compression type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [crypto] crypto/nx: Enable and setup GZIP compresstion type (Gustavo Duarte) [1725806]
Rebuild_FUZZ: 98.99%
commit-author Haren Myneni <haren@linux.ibm.com>
commit 1af11ae225350a92a1e13a4c27c215befced20af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1af11ae2.failed

Changes to probe GZIP device-tree nodes, open RX windows and setup
GZIP compression type. No plans to provide GZIP usage in kernel right
now, but this patch enables GZIP for user space usage.

	Signed-off-by: Haren Myneni <haren@linux.ibm.com>
	Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/1587114624.2275.1129.camel@hbabu-laptop
(cherry picked from commit 1af11ae225350a92a1e13a4c27c215befced20af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/nx/nx-common-powernv.c
diff --cc drivers/crypto/nx/nx-common-powernv.c
index aa010b74f3e0,651d2860de0d..000000000000
--- a/drivers/crypto/nx/nx-common-powernv.c
+++ b/drivers/crypto/nx/nx-common-powernv.c
@@@ -65,9 -58,16 +65,19 @@@ struct nx842_coproc 
  static DEFINE_PER_CPU(struct vas_window *, cpu_txwin);
  
  /* no cpu hotplug on powernv, so this list never changes after init */
 -static LIST_HEAD(nx_coprocs);
 +static LIST_HEAD(nx842_coprocs);
  static unsigned int nx842_ct;	/* used in icswx function */
  
++<<<<<<< HEAD
++=======
+ /*
+  * Using same values as in skiboot or coprocessor type representing
+  * in NX workbook.
+  */
+ #define NX_CT_GZIP	(2)	/* on P9 and later */
+ #define NX_CT_842	(3)
+ 
++>>>>>>> 1af11ae22535 (crypto/nx: Enable and setup GZIP compression type)
  static int (*nx842_powernv_exec)(const unsigned char *in,
  				unsigned int inlen, unsigned char *out,
  				unsigned int *outlenp, void *workmem, int fc);
@@@ -801,15 -817,15 +811,26 @@@ static int __init vas_cfg_coproc_info(s
  	if (!coproc)
  		return -ENOMEM;
  
++<<<<<<< HEAD
 +	if (!strcmp(priority, "High"))
 +		coproc->ct = VAS_COP_TYPE_842_HIPRI;
 +	else if (!strcmp(priority, "Normal"))
 +		coproc->ct = VAS_COP_TYPE_842;
 +	else {
 +		pr_err("Invalid RxFIFO priority value\n");
 +		ret =  -EINVAL;
++=======
+ 	if (type == NX_CT_842)
+ 		ret = nx_set_ct(coproc, priority, VAS_COP_TYPE_842_HIPRI,
+ 			VAS_COP_TYPE_842);
+ 	else if (type == NX_CT_GZIP)
+ 		ret = nx_set_ct(coproc, priority, VAS_COP_TYPE_GZIP_HIPRI,
+ 				VAS_COP_TYPE_GZIP);
+ 
+ 	if (ret)
++>>>>>>> 1af11ae22535 (crypto/nx: Enable and setup GZIP compression type)
  		goto err_out;
 +	}
  
  	vas_init_rx_win_attr(&rxattr, coproc->ct);
  	rxattr.rx_fifo = (void *)rx_fifo;
@@@ -846,12 -871,47 +867,56 @@@ err_out
  	return ret;
  }
  
++<<<<<<< HEAD
 +
 +static int __init nx842_powernv_probe_vas(struct device_node *pn)
 +{
 +	struct device_node *dn;
 +	int chip_id, vasid, ret = 0;
 +	int nx_fifo_found = 0;
++=======
+ static int __init nx_coproc_init(int chip_id, int ct_842, int ct_gzip)
+ {
+ 	int ret = 0;
+ 
+ 	if (opal_check_token(OPAL_NX_COPROC_INIT)) {
+ 		ret = opal_nx_coproc_init(chip_id, ct_842);
+ 
+ 		if (!ret)
+ 			ret = opal_nx_coproc_init(chip_id, ct_gzip);
+ 
+ 		if (ret) {
+ 			ret = opal_error_code(ret);
+ 			pr_err("Failed to initialize NX for chip(%d): %d\n",
+ 				chip_id, ret);
+ 		}
+ 	} else
+ 		pr_warn("Firmware doesn't support NX initialization\n");
+ 
+ 	return ret;
+ }
+ 
+ static int __init find_nx_device_tree(struct device_node *dn, int chip_id,
+ 					int vasid, int type, char *devname,
+ 					int *ct)
+ {
+ 	int ret = 0;
+ 
+ 	if (of_device_is_compatible(dn, devname)) {
+ 		ret  = vas_cfg_coproc_info(dn, chip_id, vasid, type, ct);
+ 		if (ret)
+ 			of_node_put(dn);
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static int __init nx_powernv_probe_vas(struct device_node *pn)
+ {
+ 	int chip_id, vasid, ret = 0;
+ 	int ct_842 = 0, ct_gzip = 0;
+ 	struct device_node *dn;
++>>>>>>> 1af11ae22535 (crypto/nx: Enable and setup GZIP compression type)
  
  	chip_id = of_get_ibm_chip_id(pn);
  	if (chip_id < 0) {
@@@ -866,21 -926,27 +931,45 @@@
  	}
  
  	for_each_child_of_node(pn, dn) {
++<<<<<<< HEAD
 +		if (of_device_is_compatible(dn, "ibm,p9-nx-842")) {
 +			ret = vas_cfg_coproc_info(dn, chip_id, vasid);
 +			if (ret) {
 +				of_node_put(dn);
 +				return ret;
 +			}
 +			nx_fifo_found++;
 +		}
 +	}
 +
 +	if (!nx_fifo_found) {
 +		pr_err("NX842 FIFO nodes are missing\n");
 +		ret = -EINVAL;
 +	}
 +
++=======
+ 		ret = find_nx_device_tree(dn, chip_id, vasid, NX_CT_842,
+ 					"ibm,p9-nx-842", &ct_842);
+ 
+ 		if (!ret)
+ 			ret = find_nx_device_tree(dn, chip_id, vasid,
+ 				NX_CT_GZIP, "ibm,p9-nx-gzip", &ct_gzip);
+ 
+ 		if (ret)
+ 			return ret;
+ 	}
+ 
+ 	if (!ct_842 || !ct_gzip) {
+ 		pr_err("NX FIFO nodes are missing\n");
+ 		return -EINVAL;
+ 	}
+ 
+ 	/*
+ 	 * Initialize NX instance for both high and normal priority FIFOs.
+ 	 */
+ 	ret = nx_coproc_init(chip_id, ct_842, ct_gzip);
+ 
++>>>>>>> 1af11ae22535 (crypto/nx: Enable and setup GZIP compression type)
  	return ret;
  }
  
@@@ -1018,9 -1084,25 +1107,29 @@@ static __init int nx842_powernv_init(vo
  
  		nx842_powernv_exec = nx842_exec_icswx;
  	} else {
++<<<<<<< HEAD
 +		ret = nx842_open_percpu_txwins();
++=======
+ 		/*
+ 		 * Register VAS user space API for NX GZIP so
+ 		 * that user space can use GZIP engine.
+ 		 * Using high FIFO priority for kernel requests and
+ 		 * normal FIFO priority is assigned for userspace.
+ 		 * 842 compression is supported only in kernel.
+ 		 */
+ 		ret = vas_register_coproc_api(THIS_MODULE, VAS_COP_TYPE_GZIP,
+ 						"nx-gzip");
+ 
+ 		/*
+ 		 * GZIP is not supported in kernel right now.
+ 		 * So open tx windows only for 842.
+ 		 */
+ 		if (!ret)
+ 			ret = nx_open_percpu_txwins();
+ 
++>>>>>>> 1af11ae22535 (crypto/nx: Enable and setup GZIP compression type)
  		if (ret) {
 -			nx_delete_coprocs();
 +			nx842_delete_coprocs();
  			return ret;
  		}
  
@@@ -1035,12 -1117,21 +1144,21 @@@
  
  	return 0;
  }
 -module_init(nx_compress_powernv_init);
 +module_init(nx842_powernv_init);
  
 -static void __exit nx_compress_powernv_exit(void)
 +static void __exit nx842_powernv_exit(void)
  {
+ 	/*
+ 	 * GZIP engine is supported only in power9 or later and nx842_ct
+ 	 * is used on power8 (icswx).
+ 	 * VAS API for NX GZIP is registered during init for user space
+ 	 * use. So delete this API use for GZIP engine.
+ 	 */
+ 	if (!nx842_ct)
+ 		vas_unregister_coproc_api();
+ 
  	crypto_unregister_alg(&nx842_powernv_alg);
  
 -	nx_delete_coprocs();
 +	nx842_delete_coprocs();
  }
 -module_exit(nx_compress_powernv_exit);
 +module_exit(nx842_powernv_exit);
* Unmerged path drivers/crypto/nx/nx-common-powernv.c
