gpiolib: Introduce GPIO_LOOKUP_FLAGS_DEFAULT

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andy Shevchenko <andriy.shevchenko@linux.intel.com>
commit 2d6c06f5a4094ab4ea15b63af72d2dab74e9415a
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/2d6c06f5.failed

Since GPIO library operates with enumerator when it's subject to handle
the GPIO lookup flags, it will be better to clearly see what default means.

Thus, introduce GPIO_LOOKUP_FLAGS_DEFAULT entry to describe
the default assumptions.

While here, replace 0 by newly introduced constant.

	Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
	Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit 2d6c06f5a4094ab4ea15b63af72d2dab74e9415a)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpio/gpiolib.c
diff --cc drivers/gpio/gpiolib.c
index 4b301c7e24f3,b8e4c9cd7b9e..000000000000
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@@ -2512,8 -2512,10 +2512,9 @@@ EXPORT_SYMBOL_GPL(gpiochip_is_requested
   * code on failure.
   */
  struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *chip, u16 hwnum,
 -					    const char *label,
 -					    enum gpiod_flags flags)
 +					    const char *label)
  {
+ 	unsigned long lflags = GPIO_LOOKUP_FLAGS_DEFAULT;
  	struct gpio_desc *desc = gpiochip_get_desc(chip, hwnum);
  	int err;
  
@@@ -2526,6 -2528,13 +2527,16 @@@
  	if (err < 0)
  		return ERR_PTR(err);
  
++<<<<<<< HEAD
++=======
+ 	err = gpiod_configure_flags(desc, label, lflags, flags);
+ 	if (err) {
+ 		chip_err(chip, "setup of own GPIO %s failed\n", label);
+ 		gpiod_free_commit(desc);
+ 		return ERR_PTR(err);
+ 	}
+ 
++>>>>>>> 2d6c06f5a409 (gpiolib: Introduce GPIO_LOOKUP_FLAGS_DEFAULT)
  	return desc;
  }
  EXPORT_SYMBOL_GPL(gpiochip_request_own_desc);
diff --git a/drivers/gpio/gpiolib-acpi.c b/drivers/gpio/gpiolib-acpi.c
index 7572a75ab9e8..e1b49d88f229 100644
--- a/drivers/gpio/gpiolib-acpi.c
+++ b/drivers/gpio/gpiolib-acpi.c
@@ -819,6 +819,7 @@ int acpi_dev_gpio_irq_get(struct acpi_device *adev, int index)
 			return PTR_ERR(desc);
 
 		if (info.gpioint && idx++ == index) {
+			unsigned long lflags = GPIO_LOOKUP_FLAGS_DEFAULT;
 			char label[32];
 			int irq;
 
@@ -830,7 +831,7 @@ int acpi_dev_gpio_irq_get(struct acpi_device *adev, int index)
 				return irq;
 
 			snprintf(label, sizeof(label), "GpioInt() %d", index);
-			ret = gpiod_configure_flags(desc, label, 0, info.flags);
+			ret = gpiod_configure_flags(desc, label, lflags, info.flags);
 			if (ret < 0)
 				return ret;
 
@@ -1014,7 +1015,7 @@ acpi_gpiochip_parse_own_gpio(struct acpi_gpio_chip *achip,
 	u32 gpios[2];
 	int ret;
 
-	*lflags = 0;
+	*lflags = GPIO_LOOKUP_FLAGS_DEFAULT;
 	*dflags = 0;
 	*name = NULL;
 
diff --git a/drivers/gpio/gpiolib-of.c b/drivers/gpio/gpiolib-of.c
index c5547df4f6cd..aec7bd86ae7e 100644
--- a/drivers/gpio/gpiolib-of.c
+++ b/drivers/gpio/gpiolib-of.c
@@ -386,7 +386,7 @@ static struct gpio_desc *of_parse_own_gpio(struct device_node *np,
 		return ERR_PTR(-EINVAL);
 
 	xlate_flags = 0;
-	*lflags = 0;
+	*lflags = GPIO_LOOKUP_FLAGS_DEFAULT;
 	*dflags = 0;
 
 	ret = of_property_read_u32(chip_np, "#gpio-cells", &tmp);
* Unmerged path drivers/gpio/gpiolib.c
diff --git a/include/linux/gpio/machine.h b/include/linux/gpio/machine.h
index dad392158550..35f299d1f6a7 100644
--- a/include/linux/gpio/machine.h
+++ b/include/linux/gpio/machine.h
@@ -14,6 +14,8 @@ enum gpio_lookup_flags {
 	GPIO_TRANSITORY			= (1 << 3),
 	GPIO_PULL_UP			= (1 << 4),
 	GPIO_PULL_DOWN			= (1 << 5),
+
+	GPIO_LOOKUP_FLAGS_DEFAULT	= GPIO_ACTIVE_HIGH | GPIO_PERSISTENT,
 };
 
 /**
