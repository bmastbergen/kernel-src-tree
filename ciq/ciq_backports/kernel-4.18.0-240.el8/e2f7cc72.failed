netfilter: conntrack: fix bogus port values for other l4 protocols

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Florian Westphal <fw@strlen.de>
commit e2f7cc72cbf42e037229d8bd998966569662442f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e2f7cc72.failed

We must only extract l4 proto information if we can track the layer 4
protocol.

Before removal of pkt_to_tuple callback, the code to extract port
information was only reached for TCP/UDP/LITE/DCCP/SCTP.

The other protocols were handled by the indirect call, and the
'generic' tracker took care of other protocols that have no notion
of 'ports'.

After removal of the callback we must be more strict here and only
init port numbers for those protocols that have ports.

Fixes: df5e1629087a ("netfilter: conntrack: remove pkt_to_tuple callback")
	Signed-off-by: Florian Westphal <fw@strlen.de>
	Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
(cherry picked from commit e2f7cc72cbf42e037229d8bd998966569662442f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/netfilter/nf_conntrack_core.c
diff --cc net/netfilter/nf_conntrack_core.c
index 680e0b0d92a5,815956ac5a76..000000000000
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@@ -275,16 -287,36 +289,41 @@@ nf_ct_get_tuple(const struct sk_buff *s
  	tuple->dst.protonum = protonum;
  	tuple->dst.dir = IP_CT_DIR_ORIGINAL;
  
++<<<<<<< HEAD
 +	if (unlikely(l4proto->pkt_to_tuple))
 +		return l4proto->pkt_to_tuple(skb, dataoff, net, tuple);
++=======
+ 	switch (protonum) {
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	case IPPROTO_ICMPV6:
+ 		return icmpv6_pkt_to_tuple(skb, dataoff, net, tuple);
+ #endif
+ 	case IPPROTO_ICMP:
+ 		return icmp_pkt_to_tuple(skb, dataoff, net, tuple);
+ #ifdef CONFIG_NF_CT_PROTO_GRE
+ 	case IPPROTO_GRE:
+ 		return gre_pkt_to_tuple(skb, dataoff, net, tuple);
+ #endif
+ 	case IPPROTO_TCP:
+ 	case IPPROTO_UDP: /* fallthrough */
+ 		return nf_ct_get_tuple_ports(skb, dataoff, tuple);
+ #ifdef CONFIG_NF_CT_PROTO_UDPLITE
+ 	case IPPROTO_UDPLITE:
+ 		return nf_ct_get_tuple_ports(skb, dataoff, tuple);
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_SCTP
+ 	case IPPROTO_SCTP:
+ 		return nf_ct_get_tuple_ports(skb, dataoff, tuple);
+ #endif
+ #ifdef CONFIG_NF_CT_PROTO_DCCP
+ 	case IPPROTO_DCCP:
+ 		return nf_ct_get_tuple_ports(skb, dataoff, tuple);
+ #endif
+ 	default:
+ 		break;
+ 	}
++>>>>>>> e2f7cc72cbf4 (netfilter: conntrack: fix bogus port values for other l4 protocols)
  
- 	/* Actually only need first 4 bytes to get ports. */
- 	inet_hdr = skb_header_pointer(skb, dataoff, sizeof(_inet_hdr), &_inet_hdr);
- 	if (!inet_hdr)
- 		return false;
- 
- 	tuple->src.u.udp.port = inet_hdr->sport;
- 	tuple->dst.u.udp.port = inet_hdr->dport;
  	return true;
  }
  
* Unmerged path net/netfilter/nf_conntrack_core.c
