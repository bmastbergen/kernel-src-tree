block: Simplify report zones execution

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Damien Le Moal <damien.lemoal@wdc.com>
commit ceeb373aa6b9eb75ed3278d4b3ff2318c304e70c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ceeb373a.failed

All kernel users of blkdev_report_zones() as well as applications use
through ioctl(BLKZONEREPORT) expect to potentially get less zone
descriptors than requested. As such, the use of the internal report
zones command execution loop implemented by blk_report_zones() is
not necessary and can even be harmful to performance by causing the
execution of inefficient small zones report command to service the
reminder of a requested zone array.

This patch removes blk_report_zones(), simplifying the code. Also
remove a now incorrect comment in dm_blk_report_zones().

	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Javier Gonzalez <javier@javigon.com>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit ceeb373aa6b9eb75ed3278d4b3ff2318c304e70c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-zoned.c
#	drivers/md/dm.c
diff --cc block/blk-zoned.c
index 023c295c4f36,ea4e086ba00e..000000000000
--- a/block/blk-zoned.c
+++ b/block/blk-zoned.c
@@@ -115,33 -119,6 +115,36 @@@ static bool blkdev_report_zone(struct b
  	return true;
  }
  
++<<<<<<< HEAD
 +static int blk_report_zones(struct gendisk *disk, sector_t sector,
 +			    struct blk_zone *zones, unsigned int *nr_zones,
 +			    gfp_t gfp_mask)
 +{
 +	struct request_queue *q = disk->queue;
 +	unsigned int z = 0, n, nrz = *nr_zones;
 +	sector_t capacity = get_capacity(disk);
 +	int ret;
 +
 +	while (z < nrz && sector < capacity) {
 +		n = nrz - z;
 +		ret = disk->fops->report_zones(disk, sector, &zones[z], &n,
 +					       gfp_mask);
 +		if (ret)
 +			return ret;
 +		if (!n)
 +			break;
 +		sector += blk_queue_zone_sectors(q) * n;
 +		z += n;
 +	}
 +
 +	WARN_ON(z > *nr_zones);
 +	*nr_zones = z;
 +
 +	return 0;
 +}
 +
++=======
++>>>>>>> ceeb373aa6b9 (block: Simplify report zones execution)
  /**
   * blkdev_report_zones - Get zones information
   * @bdev:	Target block device
@@@ -155,12 -131,15 +158,13 @@@
   *    The number of zone information reported may be less than the number
   *    requested by @nr_zones. The number of zones actually reported is
   *    returned in @nr_zones.
 - *    The caller must use memalloc_noXX_save/restore() calls to control
 - *    memory allocations done within this function (zone array and command
 - *    buffer allocation by the device driver).
   */
  int blkdev_report_zones(struct block_device *bdev, sector_t sector,
 -			struct blk_zone *zones, unsigned int *nr_zones)
 +			struct blk_zone *zones, unsigned int *nr_zones,
 +			gfp_t gfp_mask)
  {
  	struct request_queue *q = bdev_get_queue(bdev);
+ 	struct gendisk *disk = bdev->bd_disk;
  	unsigned int i, nrz;
  	int ret;
  
@@@ -182,8 -161,8 +186,13 @@@
  
  	nrz = min(*nr_zones,
  		  __blkdev_nr_zones(q, bdev->bd_part->nr_sects - sector));
++<<<<<<< HEAD
 +	ret = blk_report_zones(bdev->bd_disk, get_start_sect(bdev) + sector,
 +			       zones, &nrz, gfp_mask);
++=======
+ 	ret = disk->fops->report_zones(disk, get_start_sect(bdev) + sector,
+ 				       zones, &nrz);
++>>>>>>> ceeb373aa6b9 (block: Simplify report zones execution)
  	if (ret)
  		return ret;
  
@@@ -469,7 -537,7 +478,11 @@@ int blk_revalidate_disk_zones(struct ge
  
  	while (z < nr_zones) {
  		nrz = min(nr_zones - z, rep_nr_zones);
++<<<<<<< HEAD
 +		ret = blk_report_zones(disk, sector, zones, &nrz, GFP_NOIO);
++=======
+ 		ret = disk->fops->report_zones(disk, sector, zones, &nrz);
++>>>>>>> ceeb373aa6b9 (block: Simplify report zones execution)
  		if (ret)
  			goto out;
  		if (!nrz)
diff --cc drivers/md/dm.c
index 37a4e35680f7,89189c29438f..000000000000
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@@ -474,14 -473,7 +474,18 @@@ static int dm_blk_report_zones(struct g
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * blkdev_report_zones() will loop and call this again to cover all the
 +	 * zones of the target, eventually moving on to the next target.
 +	 * So there is no need to loop here trying to fill the entire array
 +	 * of zones.
 +	 */
 +	ret = tgt->type->report_zones(tgt, sector, zones,
 +				      nr_zones, gfp_mask);
++=======
+ 	ret = tgt->type->report_zones(tgt, sector, zones, nr_zones);
++>>>>>>> ceeb373aa6b9 (block: Simplify report zones execution)
  
  out:
  	dm_put_live_table(md, srcu_idx);
* Unmerged path block/blk-zoned.c
* Unmerged path drivers/md/dm.c
