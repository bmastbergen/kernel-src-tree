mm/swap: fix release_pages() when releasing devmap pages

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ira Weiny <ira.weiny@intel.com>
commit c5d6c45e90c49150670346967971e14576afd7f1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c5d6c45e.failed

release_pages() is an optimized version of a loop around put_page().
Unfortunately for devmap pages the logic is not entirely correct in
release_pages().  This is because device pages can be more than type
MEMORY_DEVICE_PUBLIC.  There are in fact 4 types, private, public, FS DAX,
and PCI P2PDMA.  Some of these have specific needs to "put" the page while
others do not.

This logic to handle any special needs is contained in
put_devmap_managed_page().  Therefore all devmap pages should be processed
by this function where we can contain the correct logic for a page put.

Handle all device type pages within release_pages() by calling
put_devmap_managed_page() on all devmap pages.  If
put_devmap_managed_page() returns true the page has been put and we
continue with the next page.  A false return of put_devmap_managed_page()
means the page did not require special processing and should fall to
"normal" processing.

This was found via code inspection while determining if release_pages()
and the new put_user_pages() could be interchangeable.[1]

[1] https://lkml.kernel.org/r/20190523172852.GA27175@iweiny-DESK2.sc.intel.com

Link: https://lkml.kernel.org/r/20190605214922.17684-1-ira.weiny@intel.com
	Cc: Jérôme Glisse <jglisse@redhat.com>
	Cc: Michal Hocko <mhocko@suse.com>
	Reviewed-by: Dan Williams <dan.j.williams@intel.com>
	Reviewed-by: John Hubbard <jhubbard@nvidia.com>
	Signed-off-by: Ira Weiny <ira.weiny@intel.com>
	Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
(cherry picked from commit c5d6c45e90c49150670346967971e14576afd7f1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	mm/swap.c
diff --cc mm/swap.c
index f2098f8772b3,607c48229a1d..000000000000
--- a/mm/swap.c
+++ b/mm/swap.c
@@@ -736,6 -740,22 +736,25 @@@ void release_pages(struct page **pages
  		if (is_huge_zero_page(page))
  			continue;
  
++<<<<<<< HEAD
++=======
+ 		if (is_zone_device_page(page)) {
+ 			if (locked_pgdat) {
+ 				spin_unlock_irqrestore(&locked_pgdat->lru_lock,
+ 						       flags);
+ 				locked_pgdat = NULL;
+ 			}
+ 			/*
+ 			 * ZONE_DEVICE pages that return 'false' from
+ 			 * put_devmap_managed_page() do not require special
+ 			 * processing, and instead, expect a call to
+ 			 * put_page_testzero().
+ 			 */
+ 			if (put_devmap_managed_page(page))
+ 				continue;
+ 		}
+ 
++>>>>>>> c5d6c45e90c4 (mm/swap: fix release_pages() when releasing devmap pages)
  		page = compound_head(page);
  		if (!put_page_testzero(page))
  			continue;
* Unmerged path mm/swap.c
