locking/percpu-rwsem, lockdep: Make percpu-rwsem use its own lockdep_map

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 1751060e2527462714359573a39dca10451ffbf8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1751060e.failed

As preparation for replacing the embedded rwsem, give percpu-rwsem its
own lockdep_map.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Reviewed-by: Davidlohr Bueso <dbueso@suse.de>
	Acked-by: Will Deacon <will@kernel.org>
	Acked-by: Waiman Long <longman@redhat.com>
	Tested-by: Juri Lelli <juri.lelli@redhat.com>
Link: https://lkml.kernel.org/r/20200131151539.927625541@infradead.org
(cherry picked from commit 1751060e2527462714359573a39dca10451ffbf8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/percpu-rwsem.h
#	kernel/cpu.c
#	kernel/locking/percpu-rwsem.c
diff --cc include/linux/percpu-rwsem.h
index 0a43830f1932,f2c36fb5e661..000000000000
--- a/include/linux/percpu-rwsem.h
+++ b/include/linux/percpu-rwsem.h
@@@ -15,16 -15,31 +15,38 @@@ struct percpu_rw_semaphore 
  	struct rw_semaphore	rw_sem; /* slowpath */
  	struct rcuwait          writer; /* blocked writer */
  	int			readers_block;
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	struct lockdep_map	dep_map;
+ #endif
  };
  
++<<<<<<< HEAD
 +#define DEFINE_STATIC_PERCPU_RWSEM(name)				\
++=======
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ #define __PERCPU_RWSEM_DEP_MAP_INIT(lockname)	.dep_map = { .name = #lockname },
+ #else
+ #define __PERCPU_RWSEM_DEP_MAP_INIT(lockname)
+ #endif
+ 
+ #define __DEFINE_PERCPU_RWSEM(name, is_static)				\
++>>>>>>> 1751060e2527 (locking/percpu-rwsem, lockdep: Make percpu-rwsem use its own lockdep_map)
  static DEFINE_PER_CPU(unsigned int, __percpu_rwsem_rc_##name);		\
 -is_static struct percpu_rw_semaphore name = {				\
 -	.rss = __RCU_SYNC_INITIALIZER(name.rss),			\
 +static struct percpu_rw_semaphore name = {				\
 +	.rss = __RCU_SYNC_INITIALIZER(name.rss, RCU_SCHED_SYNC),	\
  	.read_count = &__percpu_rwsem_rc_##name,			\
  	.rw_sem = __RWSEM_INITIALIZER(name.rw_sem),			\
  	.writer = __RCUWAIT_INITIALIZER(name.writer),			\
+ 	__PERCPU_RWSEM_DEP_MAP_INIT(name)				\
  }
++<<<<<<< HEAD
++=======
+ 
+ #define DEFINE_PERCPU_RWSEM(name)		\
+ 	__DEFINE_PERCPU_RWSEM(name, /* not static */)
+ #define DEFINE_STATIC_PERCPU_RWSEM(name)	\
+ 	__DEFINE_PERCPU_RWSEM(name, static)
++>>>>>>> 1751060e2527 (locking/percpu-rwsem, lockdep: Make percpu-rwsem use its own lockdep_map)
  
  extern int __percpu_down_read(struct percpu_rw_semaphore *, int);
  extern void __percpu_up_read(struct percpu_rw_semaphore *);
@@@ -88,8 -105,6 +112,11 @@@ static inline void percpu_up_read(struc
  	else
  		__percpu_up_read(sem); /* Unconditional memory barrier */
  	preempt_enable();
++<<<<<<< HEAD
 +
 +	rwsem_release(&sem->rw_sem.dep_map, 1, _RET_IP_);
++=======
++>>>>>>> 1751060e2527 (locking/percpu-rwsem, lockdep: Make percpu-rwsem use its own lockdep_map)
  }
  
  extern void percpu_down_write(struct percpu_rw_semaphore *);
@@@ -114,7 -127,7 +139,11 @@@ extern void percpu_free_rwsem(struct pe
  static inline void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
  					bool read, unsigned long ip)
  {
++<<<<<<< HEAD
 +	lock_release(&sem->rw_sem.dep_map, 1, ip);
++=======
+ 	lock_release(&sem->dep_map, ip);
++>>>>>>> 1751060e2527 (locking/percpu-rwsem, lockdep: Make percpu-rwsem use its own lockdep_map)
  #ifdef CONFIG_RWSEM_SPIN_ON_OWNER
  	if (!read)
  		atomic_long_set(&sem->rw_sem.owner, RWSEM_OWNER_UNKNOWN);
diff --cc kernel/cpu.c
index bdd394a186ef,221bf6a9e98a..000000000000
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@@ -333,7 -336,7 +333,11 @@@ static void lockdep_acquire_cpus_lock(v
  
  static void lockdep_release_cpus_lock(void)
  {
++<<<<<<< HEAD
 +	rwsem_release(&cpu_hotplug_lock.rw_sem.dep_map, 1, _THIS_IP_);
++=======
+ 	rwsem_release(&cpu_hotplug_lock.dep_map, _THIS_IP_);
++>>>>>>> 1751060e2527 (locking/percpu-rwsem, lockdep: Make percpu-rwsem use its own lockdep_map)
  }
  
  /*
diff --cc kernel/locking/percpu-rwsem.c
index f17dad99eec8,aa2b118d2f88..000000000000
--- a/kernel/locking/percpu-rwsem.c
+++ b/kernel/locking/percpu-rwsem.c
@@@ -17,10 -18,14 +17,19 @@@ int __percpu_init_rwsem(struct percpu_r
  		return -ENOMEM;
  
  	/* ->rw_sem represents the whole percpu_rw_semaphore for lockdep */
++<<<<<<< HEAD
 +	rcu_sync_init(&sem->rss, RCU_SCHED_SYNC);
 +	__init_rwsem(&sem->rw_sem, name, rwsem_key);
++=======
+ 	rcu_sync_init(&sem->rss);
+ 	init_rwsem(&sem->rw_sem);
++>>>>>>> 1751060e2527 (locking/percpu-rwsem, lockdep: Make percpu-rwsem use its own lockdep_map)
  	rcuwait_init(&sem->writer);
  	sem->readers_block = 0;
+ #ifdef CONFIG_DEBUG_LOCK_ALLOC
+ 	debug_check_no_locks_freed((void *)sem, sizeof(*sem));
+ 	lockdep_init_map(&sem->dep_map, name, key, 0);
+ #endif
  	return 0;
  }
  EXPORT_SYMBOL_GPL(__percpu_init_rwsem);
* Unmerged path include/linux/percpu-rwsem.h
* Unmerged path kernel/cpu.c
* Unmerged path kernel/locking/percpu-rwsem.c
diff --git a/kernel/locking/rwsem.c b/kernel/locking/rwsem.c
index cd8da9df6e07..cc1fb6b19a8c 100644
--- a/kernel/locking/rwsem.c
+++ b/kernel/locking/rwsem.c
@@ -1391,7 +1391,7 @@ static inline int __down_read_trylock(struct rw_semaphore *sem)
 /*
  * lock for writing
  */
-static inline void __down_write(struct rw_semaphore *sem)
+inline void __down_write(struct rw_semaphore *sem)
 {
 	long tmp = RWSEM_UNLOCKED_VALUE;
 
@@ -1454,7 +1454,7 @@ inline void __up_read(struct rw_semaphore *sem)
 /*
  * unlock after writing
  */
-static inline void __up_write(struct rw_semaphore *sem)
+inline void __up_write(struct rw_semaphore *sem)
 {
 	long tmp;
 
diff --git a/kernel/locking/rwsem.h b/kernel/locking/rwsem.h
index 2534ce49f648..d0d33a59622d 100644
--- a/kernel/locking/rwsem.h
+++ b/kernel/locking/rwsem.h
@@ -6,5 +6,7 @@
 
 extern void __down_read(struct rw_semaphore *sem);
 extern void __up_read(struct rw_semaphore *sem);
+extern void __down_write(struct rw_semaphore *sem);
+extern void __up_write(struct rw_semaphore *sem);
 
 #endif /* __INTERNAL_RWSEM_H */
