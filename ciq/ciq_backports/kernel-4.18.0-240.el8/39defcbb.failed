mlxsw: spectrum_trap: Add support for setting of packet trap group parameters

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ido Schimmel <idosch@mellanox.com>
commit 39defcbba0cd24ef4d5547370c4d689d4a7863af
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/39defcbb.failed

Implement support for setting of packet trap group parameters by
invoking the trap_group_init() callback with the new parameters.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Reviewed-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 39defcbba0cd24ef4d5547370c4d689d4a7863af)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/core.c
#	drivers/net/ethernet/mellanox/mlxsw/core.h
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.c
#	drivers/net/ethernet/mellanox/mlxsw/spectrum.h
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/core.c
index 885b75062085,e9ccd333f61d..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/core.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.c
@@@ -1197,6 -1198,72 +1197,75 @@@ mlxsw_devlink_trap_group_init(struct de
  	return mlxsw_driver->trap_group_init(mlxsw_core, group);
  }
  
++<<<<<<< HEAD
++=======
+ static int
+ mlxsw_devlink_trap_group_set(struct devlink *devlink,
+ 			     const struct devlink_trap_group *group,
+ 			     const struct devlink_trap_policer *policer)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_driver *mlxsw_driver = mlxsw_core->driver;
+ 
+ 	if (!mlxsw_driver->trap_group_set)
+ 		return -EOPNOTSUPP;
+ 	return mlxsw_driver->trap_group_set(mlxsw_core, group, policer);
+ }
+ 
+ static int
+ mlxsw_devlink_trap_policer_init(struct devlink *devlink,
+ 				const struct devlink_trap_policer *policer)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_driver *mlxsw_driver = mlxsw_core->driver;
+ 
+ 	if (!mlxsw_driver->trap_policer_init)
+ 		return -EOPNOTSUPP;
+ 	return mlxsw_driver->trap_policer_init(mlxsw_core, policer);
+ }
+ 
+ static void
+ mlxsw_devlink_trap_policer_fini(struct devlink *devlink,
+ 				const struct devlink_trap_policer *policer)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_driver *mlxsw_driver = mlxsw_core->driver;
+ 
+ 	if (!mlxsw_driver->trap_policer_fini)
+ 		return;
+ 	mlxsw_driver->trap_policer_fini(mlxsw_core, policer);
+ }
+ 
+ static int
+ mlxsw_devlink_trap_policer_set(struct devlink *devlink,
+ 			       const struct devlink_trap_policer *policer,
+ 			       u64 rate, u64 burst,
+ 			       struct netlink_ext_ack *extack)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_driver *mlxsw_driver = mlxsw_core->driver;
+ 
+ 	if (!mlxsw_driver->trap_policer_set)
+ 		return -EOPNOTSUPP;
+ 	return mlxsw_driver->trap_policer_set(mlxsw_core, policer, rate, burst,
+ 					      extack);
+ }
+ 
+ static int
+ mlxsw_devlink_trap_policer_counter_get(struct devlink *devlink,
+ 				       const struct devlink_trap_policer *policer,
+ 				       u64 *p_drops)
+ {
+ 	struct mlxsw_core *mlxsw_core = devlink_priv(devlink);
+ 	struct mlxsw_driver *mlxsw_driver = mlxsw_core->driver;
+ 
+ 	if (!mlxsw_driver->trap_policer_counter_get)
+ 		return -EOPNOTSUPP;
+ 	return mlxsw_driver->trap_policer_counter_get(mlxsw_core, policer,
+ 						      p_drops);
+ }
+ 
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  static const struct devlink_ops mlxsw_devlink_ops = {
  	.reload_down		= mlxsw_devlink_core_bus_device_reload_down,
  	.reload_up		= mlxsw_devlink_core_bus_device_reload_up,
@@@ -1219,6 -1286,11 +1288,14 @@@
  	.trap_fini			= mlxsw_devlink_trap_fini,
  	.trap_action_set		= mlxsw_devlink_trap_action_set,
  	.trap_group_init		= mlxsw_devlink_trap_group_init,
++<<<<<<< HEAD
++=======
+ 	.trap_group_set			= mlxsw_devlink_trap_group_set,
+ 	.trap_policer_init		= mlxsw_devlink_trap_policer_init,
+ 	.trap_policer_fini		= mlxsw_devlink_trap_policer_fini,
+ 	.trap_policer_set		= mlxsw_devlink_trap_policer_set,
+ 	.trap_policer_counter_get	= mlxsw_devlink_trap_policer_counter_get,
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  };
  
  static int
diff --cc drivers/net/ethernet/mellanox/mlxsw/core.h
index 4a005e104c33,22b0dfa7cfae..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/core.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/core.h
@@@ -324,6 -327,20 +324,23 @@@ struct mlxsw_driver 
  			       enum devlink_trap_action action);
  	int (*trap_group_init)(struct mlxsw_core *mlxsw_core,
  			       const struct devlink_trap_group *group);
++<<<<<<< HEAD
++=======
+ 	int (*trap_group_set)(struct mlxsw_core *mlxsw_core,
+ 			      const struct devlink_trap_group *group,
+ 			      const struct devlink_trap_policer *policer);
+ 	int (*trap_policer_init)(struct mlxsw_core *mlxsw_core,
+ 				 const struct devlink_trap_policer *policer);
+ 	void (*trap_policer_fini)(struct mlxsw_core *mlxsw_core,
+ 				  const struct devlink_trap_policer *policer);
+ 	int (*trap_policer_set)(struct mlxsw_core *mlxsw_core,
+ 				const struct devlink_trap_policer *policer,
+ 				u64 rate, u64 burst,
+ 				struct netlink_ext_ack *extack);
+ 	int (*trap_policer_counter_get)(struct mlxsw_core *mlxsw_core,
+ 					const struct devlink_trap_policer *policer,
+ 					u64 *p_drops);
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  	void (*txhdr_construct)(struct sk_buff *skb,
  				const struct mlxsw_tx_info *tx_info);
  	int (*resources_register)(struct mlxsw_core *mlxsw_core);
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.c
index df6805113dbf,24ca8d5bc564..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.c
@@@ -5657,6 -5674,11 +5657,14 @@@ static struct mlxsw_driver mlxsw_sp1_dr
  	.trap_fini			= mlxsw_sp_trap_fini,
  	.trap_action_set		= mlxsw_sp_trap_action_set,
  	.trap_group_init		= mlxsw_sp_trap_group_init,
++<<<<<<< HEAD
++=======
+ 	.trap_group_set			= mlxsw_sp_trap_group_set,
+ 	.trap_policer_init		= mlxsw_sp_trap_policer_init,
+ 	.trap_policer_fini		= mlxsw_sp_trap_policer_fini,
+ 	.trap_policer_set		= mlxsw_sp_trap_policer_set,
+ 	.trap_policer_counter_get	= mlxsw_sp_trap_policer_counter_get,
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  	.txhdr_construct		= mlxsw_sp_txhdr_construct,
  	.resources_register		= mlxsw_sp1_resources_register,
  	.kvd_sizes_get			= mlxsw_sp_kvd_sizes_get,
@@@ -5691,6 -5713,11 +5699,14 @@@ static struct mlxsw_driver mlxsw_sp2_dr
  	.trap_fini			= mlxsw_sp_trap_fini,
  	.trap_action_set		= mlxsw_sp_trap_action_set,
  	.trap_group_init		= mlxsw_sp_trap_group_init,
++<<<<<<< HEAD
++=======
+ 	.trap_group_set			= mlxsw_sp_trap_group_set,
+ 	.trap_policer_init		= mlxsw_sp_trap_policer_init,
+ 	.trap_policer_fini		= mlxsw_sp_trap_policer_fini,
+ 	.trap_policer_set		= mlxsw_sp_trap_policer_set,
+ 	.trap_policer_counter_get	= mlxsw_sp_trap_policer_counter_get,
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  	.txhdr_construct		= mlxsw_sp_txhdr_construct,
  	.resources_register		= mlxsw_sp2_resources_register,
  	.params_register		= mlxsw_sp2_params_register,
@@@ -5724,6 -5751,11 +5740,14 @@@ static struct mlxsw_driver mlxsw_sp3_dr
  	.trap_fini			= mlxsw_sp_trap_fini,
  	.trap_action_set		= mlxsw_sp_trap_action_set,
  	.trap_group_init		= mlxsw_sp_trap_group_init,
++<<<<<<< HEAD
++=======
+ 	.trap_group_set			= mlxsw_sp_trap_group_set,
+ 	.trap_policer_init		= mlxsw_sp_trap_policer_init,
+ 	.trap_policer_fini		= mlxsw_sp_trap_policer_fini,
+ 	.trap_policer_set		= mlxsw_sp_trap_policer_set,
+ 	.trap_policer_counter_get	= mlxsw_sp_trap_policer_counter_get,
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  	.txhdr_construct		= mlxsw_sp_txhdr_construct,
  	.resources_register		= mlxsw_sp2_resources_register,
  	.params_register		= mlxsw_sp2_params_register,
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum.h
index 2d08bfdfa522,ca56e72cb4b7..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum.h
@@@ -1015,5 -1023,26 +1015,29 @@@ int mlxsw_sp_trap_action_set(struct mlx
  			     enum devlink_trap_action action);
  int mlxsw_sp_trap_group_init(struct mlxsw_core *mlxsw_core,
  			     const struct devlink_trap_group *group);
++<<<<<<< HEAD
++=======
+ int mlxsw_sp_trap_group_set(struct mlxsw_core *mlxsw_core,
+ 			    const struct devlink_trap_group *group,
+ 			    const struct devlink_trap_policer *policer);
+ int
+ mlxsw_sp_trap_policer_init(struct mlxsw_core *mlxsw_core,
+ 			   const struct devlink_trap_policer *policer);
+ void mlxsw_sp_trap_policer_fini(struct mlxsw_core *mlxsw_core,
+ 				const struct devlink_trap_policer *policer);
+ int
+ mlxsw_sp_trap_policer_set(struct mlxsw_core *mlxsw_core,
+ 			  const struct devlink_trap_policer *policer,
+ 			  u64 rate, u64 burst, struct netlink_ext_ack *extack);
+ int
+ mlxsw_sp_trap_policer_counter_get(struct mlxsw_core *mlxsw_core,
+ 				  const struct devlink_trap_policer *policer,
+ 				  u64 *p_drops);
+ 
+ static inline struct net *mlxsw_sp_net(struct mlxsw_sp *mlxsw_sp)
+ {
+ 	return mlxsw_core_net(mlxsw_sp->core);
+ }
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  
  #endif
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
index 13424366f1bb,9096ffd89e50..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
@@@ -311,44 -537,15 +311,51 @@@ int mlxsw_sp_trap_action_set(struct mlx
  	return 0;
  }
  
++<<<<<<< HEAD
 +#define MLXSW_SP_DISCARD_POLICER_ID	(MLXSW_REG_HTGT_TRAP_GROUP_MAX + 1)
 +
 +static int
 +mlxsw_sp_trap_group_policer_init(struct mlxsw_sp *mlxsw_sp,
 +				 const struct devlink_trap_group *group)
 +{
 +	enum mlxsw_reg_qpcr_ir_units ir_units;
 +	char qpcr_pl[MLXSW_REG_QPCR_LEN];
 +	u16 policer_id;
 +	u8 burst_size;
 +	bool is_bytes;
 +	u32 rate;
 +
 +	switch (group->id) {
 +	case DEVLINK_TRAP_GROUP_GENERIC_ID_L2_DROPS: /* fall through */
 +	case DEVLINK_TRAP_GROUP_GENERIC_ID_L3_DROPS:
 +		policer_id = MLXSW_SP_DISCARD_POLICER_ID;
 +		ir_units = MLXSW_REG_QPCR_IR_UNITS_M;
 +		is_bytes = false;
 +		rate = 10 * 1024; /* 10Kpps */
 +		burst_size = 7;
 +		break;
 +	default:
 +		return -EINVAL;
 +	}
 +
 +	mlxsw_reg_qpcr_pack(qpcr_pl, policer_id, ir_units, is_bytes, rate,
 +			    burst_size);
 +	return mlxsw_reg_write(mlxsw_sp->core, MLXSW_REG(qpcr), qpcr_pl);
 +}
 +
 +static int
 +__mlxsw_sp_trap_group_init(struct mlxsw_sp *mlxsw_sp,
 +			   const struct devlink_trap_group *group)
++=======
+ static int
+ __mlxsw_sp_trap_group_init(struct mlxsw_core *mlxsw_core,
+ 			   const struct devlink_trap_group *group,
+ 			   u32 policer_id)
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  {
 -	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
 -	u16 hw_policer_id = MLXSW_REG_HTGT_INVALID_POLICER;
  	char htgt_pl[MLXSW_REG_HTGT_LEN];
  	u8 priority, tc, group_id;
 +	u16 policer_id;
  
  	switch (group->id) {
  	case DEVLINK_TRAP_GROUP_GENERIC_ID_L2_DROPS:
@@@ -367,21 -572,175 +374,55 @@@
  		return -EINVAL;
  	}
  
++<<<<<<< HEAD
 +	mlxsw_reg_htgt_pack(htgt_pl, group_id, policer_id, priority, tc);
 +	return mlxsw_reg_write(mlxsw_sp->core, MLXSW_REG(htgt), htgt_pl);
++=======
+ 	if (policer_id) {
+ 		struct mlxsw_sp_trap_policer_item *policer_item;
+ 
+ 		policer_item = mlxsw_sp_trap_policer_item_lookup(mlxsw_sp,
+ 								 policer_id);
+ 		if (WARN_ON(!policer_item))
+ 			return -EINVAL;
+ 		hw_policer_id = policer_item->hw_id;
+ 	}
+ 
+ 	mlxsw_reg_htgt_pack(htgt_pl, group_id, hw_policer_id, priority, tc);
+ 	return mlxsw_reg_write(mlxsw_core, MLXSW_REG(htgt), htgt_pl);
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  }
  
  int mlxsw_sp_trap_group_init(struct mlxsw_core *mlxsw_core,
  			     const struct devlink_trap_group *group)
++<<<<<<< HEAD
++=======
+ {
+ 	return __mlxsw_sp_trap_group_init(mlxsw_core, group,
+ 					  group->init_policer_id);
+ }
+ 
+ int mlxsw_sp_trap_group_set(struct mlxsw_core *mlxsw_core,
+ 			    const struct devlink_trap_group *group,
+ 			    const struct devlink_trap_policer *policer)
+ {
+ 	u32 policer_id = policer ? policer->id : 0;
+ 
+ 	return __mlxsw_sp_trap_group_init(mlxsw_core, group, policer_id);
+ }
+ 
+ static struct mlxsw_sp_trap_policer_item *
+ mlxsw_sp_trap_policer_item_init(struct mlxsw_sp *mlxsw_sp, u32 id)
 -{
 -	struct mlxsw_sp_trap_policer_item *policer_item;
 -	struct mlxsw_sp_trap *trap = mlxsw_sp->trap;
 -	u16 hw_id;
 -
 -	/* We should be able to allocate a policer because the number of
 -	 * policers we registered with devlink is in according with the number
 -	 * of available policers.
 -	 */
 -	hw_id = find_first_zero_bit(trap->policers_usage, trap->max_policers);
 -	if (WARN_ON(hw_id == trap->max_policers))
 -		return ERR_PTR(-ENOBUFS);
 -
 -	policer_item = kzalloc(sizeof(*policer_item), GFP_KERNEL);
 -	if (!policer_item)
 -		return ERR_PTR(-ENOMEM);
 -
 -	__set_bit(hw_id, trap->policers_usage);
 -	policer_item->hw_id = hw_id;
 -	policer_item->id = id;
 -	list_add_tail(&policer_item->list, &trap->policer_item_list);
 -
 -	return policer_item;
 -}
 -
 -static void
 -mlxsw_sp_trap_policer_item_fini(struct mlxsw_sp *mlxsw_sp,
 -				struct mlxsw_sp_trap_policer_item *policer_item)
 -{
 -	list_del(&policer_item->list);
 -	__clear_bit(policer_item->hw_id, mlxsw_sp->trap->policers_usage);
 -	kfree(policer_item);
 -}
 -
 -static int mlxsw_sp_trap_policer_bs(u64 burst, u8 *p_burst_size,
 -				    struct netlink_ext_ack *extack)
 -{
 -	int bs = fls64(burst) - 1;
 -
 -	if (burst != (1 << bs)) {
 -		NL_SET_ERR_MSG_MOD(extack, "Policer burst size is not power of two");
 -		return -EINVAL;
 -	}
 -
 -	*p_burst_size = bs;
 -
 -	return 0;
 -}
 -
 -static int __mlxsw_sp_trap_policer_set(struct mlxsw_sp *mlxsw_sp, u16 hw_id,
 -				       u64 rate, u64 burst, bool clear_counter,
 -				       struct netlink_ext_ack *extack)
 -{
 -	char qpcr_pl[MLXSW_REG_QPCR_LEN];
 -	u8 burst_size;
 -	int err;
 -
 -	err = mlxsw_sp_trap_policer_bs(burst, &burst_size, extack);
 -	if (err)
 -		return err;
 -
 -	mlxsw_reg_qpcr_pack(qpcr_pl, hw_id, MLXSW_REG_QPCR_IR_UNITS_M, false,
 -			    rate, burst_size);
 -	mlxsw_reg_qpcr_clear_counter_set(qpcr_pl, clear_counter);
 -	return mlxsw_reg_write(mlxsw_sp->core, MLXSW_REG(qpcr), qpcr_pl);
 -}
 -
 -int mlxsw_sp_trap_policer_init(struct mlxsw_core *mlxsw_core,
 -			       const struct devlink_trap_policer *policer)
++>>>>>>> 39defcbba0cd (mlxsw: spectrum_trap: Add support for setting of packet trap group parameters)
  {
  	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
 -	struct mlxsw_sp_trap_policer_item *policer_item;
  	int err;
  
 -	policer_item = mlxsw_sp_trap_policer_item_init(mlxsw_sp, policer->id);
 -	if (IS_ERR(policer_item))
 -		return PTR_ERR(policer_item);
 -
 -	err = __mlxsw_sp_trap_policer_set(mlxsw_sp, policer_item->hw_id,
 -					  policer->init_rate,
 -					  policer->init_burst, true, NULL);
 +	err = mlxsw_sp_trap_group_policer_init(mlxsw_sp, group);
  	if (err)
 -		goto err_trap_policer_set;
 -
 -	return 0;
 -
 -err_trap_policer_set:
 -	mlxsw_sp_trap_policer_item_fini(mlxsw_sp, policer_item);
 -	return err;
 -}
 -
 -void mlxsw_sp_trap_policer_fini(struct mlxsw_core *mlxsw_core,
 -				const struct devlink_trap_policer *policer)
 -{
 -	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
 -	struct mlxsw_sp_trap_policer_item *policer_item;
 -
 -	policer_item = mlxsw_sp_trap_policer_item_lookup(mlxsw_sp, policer->id);
 -	if (WARN_ON(!policer_item))
 -		return;
 -
 -	mlxsw_sp_trap_policer_item_fini(mlxsw_sp, policer_item);
 -}
 -
 -int mlxsw_sp_trap_policer_set(struct mlxsw_core *mlxsw_core,
 -			      const struct devlink_trap_policer *policer,
 -			      u64 rate, u64 burst,
 -			      struct netlink_ext_ack *extack)
 -{
 -	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
 -	struct mlxsw_sp_trap_policer_item *policer_item;
 -
 -	policer_item = mlxsw_sp_trap_policer_item_lookup(mlxsw_sp, policer->id);
 -	if (WARN_ON(!policer_item))
 -		return -EINVAL;
 -
 -	return __mlxsw_sp_trap_policer_set(mlxsw_sp, policer_item->hw_id,
 -					   rate, burst, false, extack);
 -}
 -
 -int
 -mlxsw_sp_trap_policer_counter_get(struct mlxsw_core *mlxsw_core,
 -				  const struct devlink_trap_policer *policer,
 -				  u64 *p_drops)
 -{
 -	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
 -	struct mlxsw_sp_trap_policer_item *policer_item;
 -	char qpcr_pl[MLXSW_REG_QPCR_LEN];
 -	int err;
 -
 -	policer_item = mlxsw_sp_trap_policer_item_lookup(mlxsw_sp, policer->id);
 -	if (WARN_ON(!policer_item))
 -		return -EINVAL;
 +		return err;
  
 -	mlxsw_reg_qpcr_pack(qpcr_pl, policer_item->hw_id,
 -			    MLXSW_REG_QPCR_IR_UNITS_M, false, 0, 0);
 -	err = mlxsw_reg_query(mlxsw_sp->core, MLXSW_REG(qpcr), qpcr_pl);
 +	err = __mlxsw_sp_trap_group_init(mlxsw_sp, group);
  	if (err)
  		return err;
  
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/core.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/core.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.c
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
