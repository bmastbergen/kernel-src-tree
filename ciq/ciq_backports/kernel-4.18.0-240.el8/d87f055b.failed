mm/mmu_notifier: contextual information for event enums

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jérôme Glisse <jglisse@redhat.com>
commit d87f055b94ea9270c491b5e650dd776ecc30d7c9
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d87f055b.failed

CPU page table update can happens for many reasons, not only as a result
of a syscall (munmap(), mprotect(), mremap(), madvise(), ...) but also as
a result of kernel activities (memory compression, reclaim, migration,
...).

This patch introduce a set of enums that can be associated with each of
the events triggering a mmu notifier.  Latter patches take advantages of
those enum values.

    - UNMAP: munmap() or mremap()
    - CLEAR: page table is cleared (migration, compaction, reclaim, ...)
    - PROTECTION_VMA: change in access protections for the range
    - PROTECTION_PAGE: change in access protections for page in the range
    - SOFT_DIRTY: soft dirtyness tracking

Being able to identify munmap() and mremap() from other reasons why the
page table is cleared is important to allow user of mmu notifier to update
their own internal tracking structure accordingly (on munmap or mremap it
is not longer needed to track range of virtual address as it becomes
invalid).

Link: http://lkml.kernel.org/r/20190326164747.24405-5-jglisse@redhat.com
	Signed-off-by: Jérôme Glisse <jglisse@redhat.com>
	Reviewed-by: Ralph Campbell <rcampbell@nvidia.com>
	Reviewed-by: Ira Weiny <ira.weiny@intel.com>
	Cc: Christian König <christian.koenig@amd.com>
	Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
	Cc: Jani Nikula <jani.nikula@linux.intel.com>
	Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
	Cc: Jan Kara <jack@suse.cz>
	Cc: Andrea Arcangeli <aarcange@redhat.com>
	Cc: Peter Xu <peterx@redhat.com>
	Cc: Felix Kuehling <Felix.Kuehling@amd.com>
	Cc: Jason Gunthorpe <jgg@mellanox.com>
	Cc: Ross Zwisler <zwisler@kernel.org>
	Cc: Dan Williams <dan.j.williams@intel.com>
	Cc: Paolo Bonzini <pbonzini@redhat.com>
	Cc: Radim Krcmar <rkrcmar@redhat.com>
	Cc: Michal Hocko <mhocko@kernel.org>
	Cc: Christian Koenig <christian.koenig@amd.com>
	Cc: John Hubbard <jhubbard@nvidia.com>
	Cc: Arnd Bergmann <arnd@arndb.de>
	Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit d87f055b94ea9270c491b5e650dd776ecc30d7c9)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/mmu_notifier.h
diff --cc include/linux/mmu_notifier.h
index a49e12254503,2386e71ac1b8..000000000000
--- a/include/linux/mmu_notifier.h
+++ b/include/linux/mmu_notifier.h
@@@ -12,8 -10,35 +12,40 @@@
  struct mmu_notifier;
  struct mmu_notifier_ops;
  
++<<<<<<< HEAD
 +/* mmu_notifier_ops flags */
 +#define MMU_INVALIDATE_DOES_NOT_BLOCK	(0x01)
++=======
+ /**
+  * enum mmu_notifier_event - reason for the mmu notifier callback
+  * @MMU_NOTIFY_UNMAP: either munmap() that unmap the range or a mremap() that
+  * move the range
+  *
+  * @MMU_NOTIFY_CLEAR: clear page table entry (many reasons for this like
+  * madvise() or replacing a page by another one, ...).
+  *
+  * @MMU_NOTIFY_PROTECTION_VMA: update is due to protection change for the range
+  * ie using the vma access permission (vm_page_prot) to update the whole range
+  * is enough no need to inspect changes to the CPU page table (mprotect()
+  * syscall)
+  *
+  * @MMU_NOTIFY_PROTECTION_PAGE: update is due to change in read/write flag for
+  * pages in the range so to mirror those changes the user must inspect the CPU
+  * page table (from the end callback).
+  *
+  * @MMU_NOTIFY_SOFT_DIRTY: soft dirty accounting (still same page and same
+  * access flags). User should soft dirty the page in the end callback to make
+  * sure that anyone relying on soft dirtyness catch pages that might be written
+  * through non CPU mappings.
+  */
+ enum mmu_notifier_event {
+ 	MMU_NOTIFY_UNMAP = 0,
+ 	MMU_NOTIFY_CLEAR,
+ 	MMU_NOTIFY_PROTECTION_VMA,
+ 	MMU_NOTIFY_PROTECTION_PAGE,
+ 	MMU_NOTIFY_SOFT_DIRTY,
+ };
++>>>>>>> d87f055b94ea (mm/mmu_notifier: contextual information for event enums)
  
  #ifdef CONFIG_MMU_NOTIFIER
  
* Unmerged path include/linux/mmu_notifier.h
