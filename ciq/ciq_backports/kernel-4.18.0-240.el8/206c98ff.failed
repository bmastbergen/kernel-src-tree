locking/percpu-rwsem: Convert to bool

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit 206c98ffbeda588dbbd9d272505c42acbc364a30
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/206c98ff.failed

Use bool where possible.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
	Reviewed-by: Davidlohr Bueso <dbueso@suse.de>
	Acked-by: Will Deacon <will@kernel.org>
	Acked-by: Waiman Long <longman@redhat.com>
	Tested-by: Juri Lelli <juri.lelli@redhat.com>
Link: https://lkml.kernel.org/r/20200131151539.984626569@infradead.org
(cherry picked from commit 206c98ffbeda588dbbd9d272505c42acbc364a30)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/percpu-rwsem.h
diff --cc include/linux/percpu-rwsem.h
index 0a43830f1932,4ceaa1921951..000000000000
--- a/include/linux/percpu-rwsem.h
+++ b/include/linux/percpu-rwsem.h
@@@ -24,9 -33,15 +24,18 @@@ static struct percpu_rw_semaphore name 
  	.read_count = &__percpu_rwsem_rc_##name,			\
  	.rw_sem = __RWSEM_INITIALIZER(name.rw_sem),			\
  	.writer = __RCUWAIT_INITIALIZER(name.writer),			\
 -	__PERCPU_RWSEM_DEP_MAP_INIT(name)				\
  }
  
++<<<<<<< HEAD
 +extern int __percpu_down_read(struct percpu_rw_semaphore *, int);
++=======
+ #define DEFINE_PERCPU_RWSEM(name)		\
+ 	__DEFINE_PERCPU_RWSEM(name, /* not static */)
+ #define DEFINE_STATIC_PERCPU_RWSEM(name)	\
+ 	__DEFINE_PERCPU_RWSEM(name, static)
+ 
+ extern bool __percpu_down_read(struct percpu_rw_semaphore *, bool);
++>>>>>>> 206c98ffbeda (locking/percpu-rwsem: Convert to bool)
  extern void __percpu_up_read(struct percpu_rw_semaphore *);
  
  static inline void percpu_down_read(struct percpu_rw_semaphore *sem)
* Unmerged path include/linux/percpu-rwsem.h
diff --git a/kernel/locking/percpu-rwsem.c b/kernel/locking/percpu-rwsem.c
index f17dad99eec8..99da3fa7d72a 100644
--- a/kernel/locking/percpu-rwsem.c
+++ b/kernel/locking/percpu-rwsem.c
@@ -40,7 +40,7 @@ void percpu_free_rwsem(struct percpu_rw_semaphore *sem)
 }
 EXPORT_SYMBOL_GPL(percpu_free_rwsem);
 
-int __percpu_down_read(struct percpu_rw_semaphore *sem, int try)
+bool __percpu_down_read(struct percpu_rw_semaphore *sem, bool try)
 {
 	/*
 	 * Due to having preemption disabled the decrement happens on
@@ -64,7 +64,7 @@ int __percpu_down_read(struct percpu_rw_semaphore *sem, int try)
 	 * release in percpu_up_write().
 	 */
 	if (likely(!smp_load_acquire(&sem->readers_block)))
-		return 1;
+		return true;
 
 	/*
 	 * Per the above comment; we still have preemption disabled and
@@ -73,7 +73,7 @@ int __percpu_down_read(struct percpu_rw_semaphore *sem, int try)
 	__percpu_up_read(sem);
 
 	if (try)
-		return 0;
+		return false;
 
 	/*
 	 * We either call schedule() in the wait, or we'll fall through
@@ -89,7 +89,7 @@ int __percpu_down_read(struct percpu_rw_semaphore *sem, int try)
 	__up_read(&sem->rw_sem);
 
 	preempt_disable();
-	return 1;
+	return true;
 }
 EXPORT_SYMBOL_GPL(__percpu_down_read);
 
