net/smc: move llc layer related init and clear into smc_llc.c

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Karsten Graul <kgraul@linux.ibm.com>
commit 00a049cfde95931c6832edad19d9a4be441cacf5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/00a049cf.failed

Introduce smc_llc_lgr_init() and smc_llc_lgr_clear() to implement all
llc layer specific initialization and cleanup in module smc_llc.c.

	Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
	Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 00a049cfde95931c6832edad19d9a4be441cacf5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/smc_core.c
#	net/smc/smc_core.h
#	net/smc/smc_llc.c
diff --cc net/smc/smc_core.c
index f20ceb288355,db49f8cd5c95..000000000000
--- a/net/smc/smc_core.c
+++ b/net/smc/smc_core.c
@@@ -409,6 -412,7 +409,10 @@@ static int smc_lgr_create(struct smc_so
  		lgr->role = smc->listen_smc ? SMC_SERV : SMC_CLNT;
  		memcpy(lgr->peer_systemid, ini->ib_lcl->id_for_peer,
  		       SMC_SYSTEMID_LEN);
++<<<<<<< HEAD
++=======
+ 		smc_llc_lgr_init(lgr, smc);
++>>>>>>> 00a049cfde95 (net/smc: move llc layer related init and clear into smc_llc.c)
  
  		link_idx = SMC_SINGLE_LINK;
  		lnk = &lgr->lnk[link_idx];
@@@ -602,10 -611,10 +606,14 @@@ static void smc_lgr_free(struct smc_lin
  			wake_up(&lgr->smcd->lgrs_deleted);
  	} else {
  		for (i = 0; i < SMC_LINKS_PER_LGR_MAX; i++) {
 -			if (lgr->lnk[i].state != SMC_LNK_UNUSED)
 -				smcr_link_clear(&lgr->lnk[i]);
 +			if (lgr->lnk[i].state == SMC_LNK_INACTIVE)
 +				continue;
 +			smcr_link_clear(&lgr->lnk[i]);
  		}
++<<<<<<< HEAD
++=======
+ 		smc_llc_lgr_clear(lgr);
++>>>>>>> 00a049cfde95 (net/smc: move llc layer related init and clear into smc_llc.c)
  		if (!atomic_dec_return(&lgr_cnt))
  			wake_up(&lgrs_deleted);
  	}
diff --cc net/smc/smc_core.h
index f72213c98957,b5781511063d..000000000000
--- a/net/smc/smc_core.h
+++ b/net/smc/smc_core.h
@@@ -232,6 -232,14 +232,17 @@@ struct smc_link_group 
  			DECLARE_BITMAP(rtokens_used_mask, SMC_RMBS_PER_LGR_MAX);
  						/* used rtoken elements */
  			u8			next_link_id;
++<<<<<<< HEAD
++=======
+ 			struct list_head	llc_event_q;
+ 						/* queue for llc events */
+ 			spinlock_t		llc_event_q_lock;
+ 						/* protects llc_event_q */
+ 			struct work_struct	llc_event_work;
+ 						/* llc event worker */
+ 			int			llc_testlink_time;
+ 						/* link keep alive time */
++>>>>>>> 00a049cfde95 (net/smc: move llc layer related init and clear into smc_llc.c)
  		};
  		struct { /* SMC-D */
  			u64			peer_gid;
diff --cc net/smc/smc_llc.c
index 4119cdb6b6bf,e715dd6735ee..000000000000
--- a/net/smc/smc_llc.c
+++ b/net/smc/smc_llc.c
@@@ -532,38 -477,41 +532,43 @@@ static void smc_llc_rx_delete_rkey(stru
  	u8 err_mask = 0;
  	int i, max;
  
 -	max = min_t(u8, llc->num_rkeys, SMC_LLC_DEL_RKEY_MAX);
 -	for (i = 0; i < max; i++) {
 -		if (smc_rtoken_delete(link, llc->rkey[i]))
 -			err_mask |= 1 << (SMC_LLC_DEL_RKEY_MAX - 1 - i);
 -	}
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		link->llc_delete_rkey_rc = llc->hd.flags &
 +					    SMC_LLC_FLAG_RKEY_NEG;
 +		complete(&link->llc_delete_rkey);
 +	} else {
 +		max = min_t(u8, llc->num_rkeys, SMC_LLC_DEL_RKEY_MAX);
 +		for (i = 0; i < max; i++) {
 +			if (smc_rtoken_delete(link, llc->rkey[i]))
 +				err_mask |= 1 << (SMC_LLC_DEL_RKEY_MAX - 1 - i);
 +		}
  
 -	if (err_mask) {
 -		llc->hd.flags |= SMC_LLC_FLAG_RKEY_NEG;
 -		llc->err_mask = err_mask;
 -	}
 +		if (err_mask) {
 +			llc->hd.flags |= SMC_LLC_FLAG_RKEY_NEG;
 +			llc->err_mask = err_mask;
 +		}
  
 -	llc->hd.flags |= SMC_LLC_FLAG_RESP;
 -	smc_llc_send_message(link, llc);
 +		llc->hd.flags |= SMC_LLC_FLAG_RESP;
 +		smc_llc_send_message(link, llc, sizeof(*llc));
 +	}
  }
  
++<<<<<<< HEAD
 +static void smc_llc_rx_handler(struct ib_wc *wc, void *buf)
++=======
+ /* flush the llc event queue */
+ static void smc_llc_event_flush(struct smc_link_group *lgr)
++>>>>>>> 00a049cfde95 (net/smc: move llc layer related init and clear into smc_llc.c)
  {
 -	struct smc_llc_qentry *qentry, *q;
 -
 -	spin_lock_bh(&lgr->llc_event_q_lock);
 -	list_for_each_entry_safe(qentry, q, &lgr->llc_event_q, list) {
 -		list_del_init(&qentry->list);
 -		kfree(qentry);
 -	}
 -	spin_unlock_bh(&lgr->llc_event_q_lock);
 -}
 -
 -static void smc_llc_event_handler(struct smc_llc_qentry *qentry)
 -{
 -	union smc_llc_msg *llc = &qentry->msg;
 -	struct smc_link *link = qentry->link;
 +	struct smc_link *link = (struct smc_link *)wc->qp->qp_context;
 +	union smc_llc_msg *llc = buf;
  
 -	if (!smc_link_usable(link))
 -		goto out;
 +	if (wc->byte_len < sizeof(*llc))
 +		return; /* short message */
 +	if (llc->raw.hdr.length != sizeof(*llc))
 +		return; /* invalid message */
 +	if (link->state == SMC_LNK_INACTIVE)
 +		return; /* link not active, drop msg */
  
  	switch (llc->raw.hdr.common.type) {
  	case SMC_LLC_TEST_LINK:
@@@ -624,14 -669,25 +629,31 @@@ out
  	schedule_delayed_work(&link->llc_testlink_wrk, next_interval);
  }
  
+ void smc_llc_lgr_init(struct smc_link_group *lgr, struct smc_sock *smc)
+ {
+ 	struct net *net = sock_net(smc->clcsock->sk);
+ 
+ 	INIT_WORK(&lgr->llc_event_work, smc_llc_event_work);
+ 	INIT_LIST_HEAD(&lgr->llc_event_q);
+ 	spin_lock_init(&lgr->llc_event_q_lock);
+ 	lgr->llc_testlink_time = net->ipv4.sysctl_tcp_keepalive_time;
+ }
+ 
+ /* called after lgr was removed from lgr_list */
+ void smc_llc_lgr_clear(struct smc_link_group *lgr)
+ {
+ 	smc_llc_event_flush(lgr);
+ 	cancel_work_sync(&lgr->llc_event_work);
+ }
+ 
  int smc_llc_link_init(struct smc_link *link)
  {
 +	struct smc_link_group *lgr = smc_get_lgr(link);
 +	link->llc_wq = alloc_ordered_workqueue("llc_wq-%x:%x)", WQ_MEM_RECLAIM,
 +					       *((u32 *)lgr->id),
 +					       link->link_id);
 +	if (!link->llc_wq)
 +		return -ENOMEM;
  	init_completion(&link->llc_confirm);
  	init_completion(&link->llc_confirm_resp);
  	init_completion(&link->llc_add);
diff --git a/net/smc/af_smc.c b/net/smc/af_smc.c
index 61adbee56cf2..584f55f87141 100644
--- a/net/smc/af_smc.c
+++ b/net/smc/af_smc.c
@@ -379,7 +379,6 @@ static int smcr_lgr_reg_rmbs(struct smc_link_group *lgr,
 
 static int smcr_clnt_conf_first_link(struct smc_sock *smc)
 {
-	struct net *net = sock_net(smc->clcsock->sk);
 	struct smc_link *link = smc->conn.lnk;
 	int rest;
 	int rc;
@@ -431,7 +430,7 @@ static int smcr_clnt_conf_first_link(struct smc_sock *smc)
 	if (rc < 0)
 		return SMC_CLC_DECL_TIMEOUT_AL;
 
-	smc_llc_link_active(link, net->ipv4.sysctl_tcp_keepalive_time);
+	smc_llc_link_active(link);
 
 	return 0;
 }
@@ -1017,7 +1016,6 @@ void smc_close_non_accepted(struct sock *sk)
 
 static int smcr_serv_conf_first_link(struct smc_sock *smc)
 {
-	struct net *net = sock_net(smc->clcsock->sk);
 	struct smc_link *link = smc->conn.lnk;
 	int rest;
 	int rc;
@@ -1063,7 +1061,7 @@ static int smcr_serv_conf_first_link(struct smc_sock *smc)
 		return rc == -EAGAIN ? SMC_CLC_DECL_TIMEOUT_AL : rc;
 	}
 
-	smc_llc_link_active(link, net->ipv4.sysctl_tcp_keepalive_time);
+	smc_llc_link_active(link);
 
 	return 0;
 }
* Unmerged path net/smc/smc_core.c
* Unmerged path net/smc/smc_core.h
* Unmerged path net/smc/smc_llc.c
diff --git a/net/smc/smc_llc.h b/net/smc/smc_llc.h
index 461c0c3ef76e..c0e88471a897 100644
--- a/net/smc/smc_llc.h
+++ b/net/smc/smc_llc.h
@@ -42,8 +42,10 @@ int smc_llc_send_add_link(struct smc_link *link, u8 mac[], u8 gid[],
 			  enum smc_llc_reqresp reqresp);
 int smc_llc_send_delete_link(struct smc_link *link,
 			     enum smc_llc_reqresp reqresp, bool orderly);
+void smc_llc_lgr_init(struct smc_link_group *lgr, struct smc_sock *smc);
+void smc_llc_lgr_clear(struct smc_link_group *lgr);
 int smc_llc_link_init(struct smc_link *link);
-void smc_llc_link_active(struct smc_link *link, int testlink_time);
+void smc_llc_link_active(struct smc_link *link);
 void smc_llc_link_deleting(struct smc_link *link);
 void smc_llc_link_inactive(struct smc_link *link);
 void smc_llc_link_clear(struct smc_link *link);
