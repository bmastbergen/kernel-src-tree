libperf: Adopt perf_mmap__unmap() function from tools/perf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 59d7ea620b58fa7d107834a81528e3098f1c27b0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/59d7ea62.failed

Move perf_mmap__unmap() from tools/perf to libperf, to internal header
internal/mmap.h. It will be used in the following patches. And rename
the existing perf's function to mmap__munmap().

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20191007125344.14268-7-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 59d7ea620b58fa7d107834a81528e3098f1c27b0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/lib/mmap.c
#	tools/perf/util/evlist.c
#	tools/perf/util/mmap.c
#	tools/perf/util/mmap.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,0b877d39a660..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -701,17 -600,17 +701,26 @@@ static void perf_evlist__munmap_nofree(
  	int i;
  
  	if (evlist->mmap)
++<<<<<<< HEAD
 +		for (i = 0; i < evlist->nr_mmaps; i++)
 +			perf_mmap__munmap(&evlist->mmap[i]);
 +
 +	if (evlist->overwrite_mmap)
 +		for (i = 0; i < evlist->nr_mmaps; i++)
 +			perf_mmap__munmap(&evlist->overwrite_mmap[i]);
++=======
+ 		for (i = 0; i < evlist->core.nr_mmaps; i++)
+ 			mmap__munmap(&evlist->mmap[i]);
+ 
+ 	if (evlist->overwrite_mmap)
+ 		for (i = 0; i < evlist->core.nr_mmaps; i++)
+ 			mmap__munmap(&evlist->overwrite_mmap[i]);
++>>>>>>> 59d7ea620b58 (libperf: Adopt perf_mmap__unmap() function from tools/perf)
  }
  
 -void evlist__munmap(struct evlist *evlist)
 +void perf_evlist__munmap(struct perf_evlist *evlist)
  {
 -	evlist__munmap_nofree(evlist);
 +	perf_evlist__munmap_nofree(evlist);
  	zfree(&evlist->mmap);
  	zfree(&evlist->overwrite_mmap);
  }
diff --cc tools/perf/util/mmap.c
index 850493205040,2c73b5bcf74e..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -101,28 -105,23 +101,33 @@@ union perf_event *perf_mmap__read_event
  	return event;
  }
  
 -static bool perf_mmap__empty(struct mmap *map)
 +static bool perf_mmap__empty(struct perf_mmap *map)
 +{
 +	return perf_mmap__read_head(map) == map->prev && !map->auxtrace_mmap.base;
 +}
 +
 +void perf_mmap__get(struct perf_mmap *map)
  {
 -	return perf_mmap__read_head(map) == map->core.prev && !map->auxtrace_mmap.base;
 +	refcount_inc(&map->refcnt);
  }
  
 -void perf_mmap__put(struct mmap *map)
++<<<<<<< HEAD
 +void perf_mmap__put(struct perf_mmap *map)
  {
 -	BUG_ON(map->core.base && refcount_read(&map->core.refcnt) == 0);
 +	BUG_ON(map->base && refcount_read(&map->refcnt) == 0);
  
 +	if (refcount_dec_and_test(&map->refcnt))
 +		perf_mmap__munmap(map);
++=======
+ 	if (refcount_dec_and_test(&map->core.refcnt))
+ 		mmap__munmap(map);
++>>>>>>> 59d7ea620b58 (libperf: Adopt perf_mmap__unmap() function from tools/perf)
  }
  
 -void perf_mmap__consume(struct mmap *map)
 +void perf_mmap__consume(struct perf_mmap *map)
  {
 -	if (!map->core.overwrite) {
 -		u64 old = map->core.prev;
 +	if (!map->overwrite) {
 +		u64 old = map->prev;
  
  		perf_mmap__write_tail(map, old);
  	}
@@@ -307,19 -306,14 +312,27 @@@ static void perf_mmap__aio_munmap(struc
  }
  #endif
  
++<<<<<<< HEAD
 +void perf_mmap__munmap(struct perf_mmap *map)
++=======
+ void mmap__munmap(struct mmap *map)
++>>>>>>> 59d7ea620b58 (libperf: Adopt perf_mmap__unmap() function from tools/perf)
  {
+ 	perf_mmap__munmap(&map->core);
  	perf_mmap__aio_munmap(map);
  	if (map->data != NULL) {
 -		munmap(map->data, mmap__mmap_len(map));
 +		munmap(map->data, perf_mmap__mmap_len(map));
  		map->data = NULL;
  	}
++<<<<<<< HEAD
 +	if (map->base != NULL) {
 +		munmap(map->base, perf_mmap__mmap_len(map));
 +		map->base = NULL;
 +		map->fd = -1;
 +		refcount_set(&map->refcnt, 0);
 +	}
++=======
++>>>>>>> 59d7ea620b58 (libperf: Adopt perf_mmap__unmap() function from tools/perf)
  	auxtrace_mmap__munmap(&map->auxtrace_mmap);
  }
  
diff --cc tools/perf/util/mmap.h
index 274ce389cd84,6a18b2990059..000000000000
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@@ -77,33 -42,32 +77,38 @@@ struct mmap_params 
  	struct auxtrace_mmap_params auxtrace_mp;
  };
  
++<<<<<<< HEAD
 +int perf_mmap__mmap(struct perf_mmap *map, struct mmap_params *mp, int fd, int cpu);
 +void perf_mmap__munmap(struct perf_mmap *map);
++=======
+ int mmap__mmap(struct mmap *map, struct mmap_params *mp, int fd, int cpu);
+ void mmap__munmap(struct mmap *map);
++>>>>>>> 59d7ea620b58 (libperf: Adopt perf_mmap__unmap() function from tools/perf)
  
 -void perf_mmap__put(struct mmap *map);
 +void perf_mmap__get(struct perf_mmap *map);
 +void perf_mmap__put(struct perf_mmap *map);
  
 -void perf_mmap__consume(struct mmap *map);
 +void perf_mmap__consume(struct perf_mmap *map);
  
 -static inline u64 perf_mmap__read_head(struct mmap *mm)
 +static inline u64 perf_mmap__read_head(struct perf_mmap *mm)
  {
 -	return ring_buffer_read_head(mm->core.base);
 +	return ring_buffer_read_head(mm->base);
  }
  
 -static inline void perf_mmap__write_tail(struct mmap *md, u64 tail)
 +static inline void perf_mmap__write_tail(struct perf_mmap *md, u64 tail)
  {
 -	ring_buffer_write_tail(md->core.base, tail);
 +	ring_buffer_write_tail(md->base, tail);
  }
  
 -union perf_event *perf_mmap__read_forward(struct mmap *map);
 +union perf_event *perf_mmap__read_forward(struct perf_mmap *map);
  
 -union perf_event *perf_mmap__read_event(struct mmap *map);
 +union perf_event *perf_mmap__read_event(struct perf_mmap *map);
  
 -int perf_mmap__push(struct mmap *md, void *to,
 -		    int push(struct mmap *map, void *to, void *buf, size_t size));
 +int perf_mmap__push(struct perf_mmap *md, void *to,
 +		    int push(struct perf_mmap *map, void *to, void *buf, size_t size));
  
 -size_t mmap__mmap_len(struct mmap *map);
 +size_t perf_mmap__mmap_len(struct perf_mmap *map);
  
 -int perf_mmap__read_init(struct mmap *md);
 -void perf_mmap__read_done(struct mmap *map);
 +int perf_mmap__read_init(struct perf_mmap *md);
 +void perf_mmap__read_done(struct perf_mmap *map);
  #endif /*__PERF_MMAP_H */
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/mmap.c
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/mmap.c
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/mmap.c
* Unmerged path tools/perf/util/mmap.h
