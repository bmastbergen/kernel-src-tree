perf tests: Rename thread-mg-share to thread-maps-share

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 6d38267cf996bafdbc99eda6ad8c406fc3dcec93
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6d38267c.failed

One more step in merging 'struct maps' with 'struct map_groups'.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-naxsl3g4ou3fyxb8l8e0pn5e@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 6d38267cf996bafdbc99eda6ad8c406fc3dcec93)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/thread-maps-share.c
diff --cc tools/perf/tests/thread-maps-share.c
index cbac71716dec,9371484973f2..000000000000
--- a/tools/perf/tests/thread-maps-share.c
+++ b/tools/perf/tests/thread-maps-share.c
@@@ -16,7 -16,7 +16,11 @@@ int test__thread_maps_share(struct tes
  
  	/* other process */
  	struct thread *other, *other_leader;
++<<<<<<< HEAD:tools/perf/tests/thread-mg-share.c
 +	struct map_groups *other_mg;
++=======
+ 	struct maps *other_maps;
++>>>>>>> 6d38267cf996 (perf tests: Rename thread-mg-share to thread-maps-share):tools/perf/tests/thread-maps-share.c
  
  	/*
  	 * This test create 2 processes abstractions (struct thread)
@@@ -42,13 -42,13 +46,20 @@@
  	TEST_ASSERT_VAL("failed to create threads",
  			leader && t1 && t2 && t3 && other);
  
 -	maps = leader->maps;
 -	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&maps->refcnt), 4);
 +	mg = leader->mg;
 +	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&mg->refcnt), 4);
  
++<<<<<<< HEAD:tools/perf/tests/thread-mg-share.c
 +	/* test the map groups pointer is shared */
 +	TEST_ASSERT_VAL("map groups don't match", mg == t1->mg);
 +	TEST_ASSERT_VAL("map groups don't match", mg == t2->mg);
 +	TEST_ASSERT_VAL("map groups don't match", mg == t3->mg);
++=======
+ 	/* test the maps pointer is shared */
+ 	TEST_ASSERT_VAL("maps don't match", maps == t1->maps);
+ 	TEST_ASSERT_VAL("maps don't match", maps == t2->maps);
+ 	TEST_ASSERT_VAL("maps don't match", maps == t3->maps);
++>>>>>>> 6d38267cf996 (perf tests: Rename thread-mg-share to thread-maps-share):tools/perf/tests/thread-maps-share.c
  
  	/*
  	 * Verify the other leader was created by previous call.
@@@ -70,10 -70,10 +81,17 @@@
  	machine__remove_thread(machine, other);
  	machine__remove_thread(machine, other_leader);
  
++<<<<<<< HEAD:tools/perf/tests/thread-mg-share.c
 +	other_mg = other->mg;
 +	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&other_mg->refcnt), 2);
 +
 +	TEST_ASSERT_VAL("map groups don't match", other_mg == other_leader->mg);
++=======
+ 	other_maps = other->maps;
+ 	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&other_maps->refcnt), 2);
+ 
+ 	TEST_ASSERT_VAL("maps don't match", other_maps == other_leader->maps);
++>>>>>>> 6d38267cf996 (perf tests: Rename thread-mg-share to thread-maps-share):tools/perf/tests/thread-maps-share.c
  
  	/* release thread group */
  	thread__put(leader);
diff --git a/tools/perf/tests/Build b/tools/perf/tests/Build
index e72accefd669..5b9b0a813916 100644
--- a/tools/perf/tests/Build
+++ b/tools/perf/tests/Build
@@ -27,7 +27,7 @@ perf-y += wp.o
 perf-y += task-exit.o
 perf-y += sw-clock.o
 perf-y += mmap-thread-lookup.o
-perf-y += thread-mg-share.o
+perf-y += thread-maps-share.o
 perf-y += switch-tracking.o
 perf-y += keep-tracking.o
 perf-y += code-reading.o
diff --git a/tools/perf/tests/builtin-test.c b/tools/perf/tests/builtin-test.c
index 97a250538a4a..84dc84b69911 100644
--- a/tools/perf/tests/builtin-test.c
+++ b/tools/perf/tests/builtin-test.c
@@ -165,8 +165,8 @@ static struct test generic_tests[] = {
 		.func = test__mmap_thread_lookup,
 	},
 	{
-		.desc = "Share thread mg",
-		.func = test__thread_mg_share,
+		.desc = "Share thread maps",
+		.func = test__thread_maps_share,
 	},
 	{
 		.desc = "Sort output of hist entries",
diff --git a/tools/perf/tests/tests.h b/tools/perf/tests/tests.h
index 9837b6e93023..f2b9bb024746 100644
--- a/tools/perf/tests/tests.h
+++ b/tools/perf/tests/tests.h
@@ -73,7 +73,7 @@ int test__dwarf_unwind(struct test *test, int subtest);
 int test__expr(struct test *test, int subtest);
 int test__hists_filter(struct test *test, int subtest);
 int test__mmap_thread_lookup(struct test *test, int subtest);
-int test__thread_mg_share(struct test *test, int subtest);
+int test__thread_maps_share(struct test *test, int subtest);
 int test__hists_output(struct test *test, int subtest);
 int test__hists_cumulate(struct test *test, int subtest);
 int test__switch_tracking(struct test *test, int subtest);
* Unmerged path tools/perf/tests/thread-maps-share.c
diff --git a/tools/perf/tests/thread-mg-share.c b/tools/perf/tests/thread-mg-share.c
deleted file mode 100644
index cbac71716dec..000000000000
--- a/tools/perf/tests/thread-mg-share.c
+++ /dev/null
@@ -1,98 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-#include "tests.h"
-#include "machine.h"
-#include "thread.h"
-#include "debug.h"
-
-int test__thread_mg_share(struct test *test __maybe_unused, int subtest __maybe_unused)
-{
-	struct machines machines;
-	struct machine *machine;
-
-	/* thread group */
-	struct thread *leader;
-	struct thread *t1, *t2, *t3;
-	struct map_groups *mg;
-
-	/* other process */
-	struct thread *other, *other_leader;
-	struct map_groups *other_mg;
-
-	/*
-	 * This test create 2 processes abstractions (struct thread)
-	 * with several threads and checks they properly share and
-	 * maintain map groups info (struct map_groups).
-	 *
-	 * thread group (pid: 0, tids: 0, 1, 2, 3)
-	 * other  group (pid: 4, tids: 4, 5)
-	*/
-
-	machines__init(&machines);
-	machine = &machines.host;
-
-	/* create process with 4 threads */
-	leader = machine__findnew_thread(machine, 0, 0);
-	t1     = machine__findnew_thread(machine, 0, 1);
-	t2     = machine__findnew_thread(machine, 0, 2);
-	t3     = machine__findnew_thread(machine, 0, 3);
-
-	/* and create 1 separated process, without thread leader */
-	other  = machine__findnew_thread(machine, 4, 5);
-
-	TEST_ASSERT_VAL("failed to create threads",
-			leader && t1 && t2 && t3 && other);
-
-	mg = leader->mg;
-	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&mg->refcnt), 4);
-
-	/* test the map groups pointer is shared */
-	TEST_ASSERT_VAL("map groups don't match", mg == t1->mg);
-	TEST_ASSERT_VAL("map groups don't match", mg == t2->mg);
-	TEST_ASSERT_VAL("map groups don't match", mg == t3->mg);
-
-	/*
-	 * Verify the other leader was created by previous call.
-	 * It should have shared map groups with no change in
-	 * refcnt.
-	 */
-	other_leader = machine__find_thread(machine, 4, 4);
-	TEST_ASSERT_VAL("failed to find other leader", other_leader);
-
-	/*
-	 * Ok, now that all the rbtree related operations were done,
-	 * lets remove all of them from there so that we can do the
-	 * refcounting tests.
-	 */
-	machine__remove_thread(machine, leader);
-	machine__remove_thread(machine, t1);
-	machine__remove_thread(machine, t2);
-	machine__remove_thread(machine, t3);
-	machine__remove_thread(machine, other);
-	machine__remove_thread(machine, other_leader);
-
-	other_mg = other->mg;
-	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&other_mg->refcnt), 2);
-
-	TEST_ASSERT_VAL("map groups don't match", other_mg == other_leader->mg);
-
-	/* release thread group */
-	thread__put(leader);
-	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&mg->refcnt), 3);
-
-	thread__put(t1);
-	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&mg->refcnt), 2);
-
-	thread__put(t2);
-	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&mg->refcnt), 1);
-
-	thread__put(t3);
-
-	/* release other group  */
-	thread__put(other_leader);
-	TEST_ASSERT_EQUAL("wrong refcnt", refcount_read(&other_mg->refcnt), 1);
-
-	thread__put(other);
-
-	machines__exit(&machines);
-	return 0;
-}
