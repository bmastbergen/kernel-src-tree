bpf: Add tests for bpf_sk_storage to bpf_tcp_ca

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit c9b24312040edaa89acb6fb91a9a53fb4775309e
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c9b24312.failed

This patch adds test to exercise the bpf_sk_storage_get()
and bpf_sk_storage_delete() helper from the bpf_dctcp.c.

The setup and check on the sk_storage is done immediately
before and after the connect().

This patch also takes this chance to move the pthread_create()
after the connect() has been done.  That will remove the need of
the "wait_thread" label.

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20200320152107.2169904-1-kafai@fb.com
(cherry picked from commit c9b24312040edaa89acb6fb91a9a53fb4775309e)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/bpf_tcp_ca.c
diff --cc tools/testing/selftests/bpf/prog_tests/bpf_tcp_ca.c
index 517318f05b1d,9a8f47fc0b91..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/bpf_tcp_ca.c
+++ b/tools/testing/selftests/bpf/prog_tests/bpf_tcp_ca.c
@@@ -158,6 -179,28 +178,31 @@@ done
  	close(fd);
  }
  
++<<<<<<< HEAD
++=======
+ static void test_cubic(void)
+ {
+ 	struct bpf_cubic *cubic_skel;
+ 	struct bpf_link *link;
+ 
+ 	cubic_skel = bpf_cubic__open_and_load();
+ 	if (CHECK(!cubic_skel, "bpf_cubic__open_and_load", "failed\n"))
+ 		return;
+ 
+ 	link = bpf_map__attach_struct_ops(cubic_skel->maps.cubic);
+ 	if (CHECK(IS_ERR(link), "bpf_map__attach_struct_ops", "err:%ld\n",
+ 		  PTR_ERR(link))) {
+ 		bpf_cubic__destroy(cubic_skel);
+ 		return;
+ 	}
+ 
+ 	do_test("bpf_cubic", NULL);
+ 
+ 	bpf_link__destroy(link);
+ 	bpf_cubic__destroy(cubic_skel);
+ }
+ 
++>>>>>>> c9b24312040e (bpf: Add tests for bpf_sk_storage to bpf_tcp_ca)
  static void test_dctcp(void)
  {
  	struct bpf_dctcp *dctcp_skel;
* Unmerged path tools/testing/selftests/bpf/prog_tests/bpf_tcp_ca.c
diff --git a/tools/testing/selftests/bpf/progs/bpf_dctcp.c b/tools/testing/selftests/bpf/progs/bpf_dctcp.c
index 19650f43c192..9e9bdc31f0c5 100644
--- a/tools/testing/selftests/bpf/progs/bpf_dctcp.c
+++ b/tools/testing/selftests/bpf/progs/bpf_dctcp.c
@@ -6,6 +6,7 @@
  * the kernel BPF logic.
  */
 
+#include <stddef.h>
 #include <linux/bpf.h>
 #include <linux/types.h>
 #include <bpf_helpers.h>
@@ -14,6 +15,15 @@
 
 char _license[] SEC("license") = "GPL";
 
+int stg_result = 0;
+
+struct {
+	__uint(type, BPF_MAP_TYPE_SK_STORAGE);
+	__uint(map_flags, BPF_F_NO_PREALLOC);
+	__type(key, int);
+	__type(value, int);
+} sk_stg_map SEC(".maps");
+
 #define DCTCP_MAX_ALPHA	1024U
 
 struct dctcp {
@@ -43,12 +53,18 @@ void BPF_PROG(dctcp_init, struct sock *sk)
 {
 	const struct tcp_sock *tp = tcp_sk(sk);
 	struct dctcp *ca = inet_csk_ca(sk);
+	int *stg;
 
 	ca->prior_rcv_nxt = tp->rcv_nxt;
 	ca->dctcp_alpha = min(dctcp_alpha_on_init, DCTCP_MAX_ALPHA);
 	ca->loss_cwnd = 0;
 	ca->ce_state = 0;
 
+	stg = bpf_sk_storage_get(&sk_stg_map, (void *)tp, NULL, 0);
+	if (stg) {
+		stg_result = *stg;
+		bpf_sk_storage_delete(&sk_stg_map, (void *)tp);
+	}
 	dctcp_reset(tp, ca);
 }
 
