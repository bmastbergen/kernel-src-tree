libnvdimm/region: Fix build error

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author YueHaibing <yuehaibing@huawei.com>
commit 04ff4863e1261187ef6152d2cf1f9a20e9b4cc04
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/04ff4863.failed

On CONFIG_PPC32=y build fails:

drivers/nvdimm/region_devs.c:1034:14: note: in expansion of macro ‘do_div’
  remainder = do_div(per_mapping, mappings);
              ^~~~~~
In file included from ./arch/powerpc/include/generated/asm/div64.h:1:0,
                 from ./include/linux/kernel.h:18,
                 from ./include/asm-generic/bug.h:19,
                 from ./arch/powerpc/include/asm/bug.h:109,
                 from ./include/linux/bug.h:5,
                 from ./include/linux/scatterlist.h:7,
                 from drivers/nvdimm/region_devs.c:5:
./include/asm-generic/div64.h:243:22: error: passing argument 1 of ‘__div64_32’ from incompatible pointer type [-Werror=incompatible-pointer-types]
   __rem = __div64_32(&(n), __base); \

Use div_u64 instead of do_div to fix this.

Fixes: 2522afb86a8c ("libnvdimm/region: Introduce an 'align' attribute")
	Signed-off-by: YueHaibing <yuehaibing@huawei.com>
Link: https://lore.kernel.org/r/20200331115024.31628-1-yuehaibing@huawei.com
	Signed-off-by: Dan Williams <dan.j.williams@intel.com>
(cherry picked from commit 04ff4863e1261187ef6152d2cf1f9a20e9b4cc04)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvdimm/region_devs.c
diff --cc drivers/nvdimm/region_devs.c
index f4c680fc5e01,ccbb5b43b8b2..000000000000
--- a/drivers/nvdimm/region_devs.c
+++ b/drivers/nvdimm/region_devs.c
@@@ -565,6 -533,54 +565,57 @@@ static ssize_t read_only_store(struct d
  }
  static DEVICE_ATTR_RW(read_only);
  
++<<<<<<< HEAD
++=======
+ static ssize_t align_show(struct device *dev,
+ 		struct device_attribute *attr, char *buf)
+ {
+ 	struct nd_region *nd_region = to_nd_region(dev);
+ 
+ 	return sprintf(buf, "%#lx\n", nd_region->align);
+ }
+ 
+ static ssize_t align_store(struct device *dev,
+ 		struct device_attribute *attr, const char *buf, size_t len)
+ {
+ 	struct nd_region *nd_region = to_nd_region(dev);
+ 	unsigned long val, dpa;
+ 	u32 remainder;
+ 	int rc;
+ 
+ 	rc = kstrtoul(buf, 0, &val);
+ 	if (rc)
+ 		return rc;
+ 
+ 	if (!nd_region->ndr_mappings)
+ 		return -ENXIO;
+ 
+ 	/*
+ 	 * Ensure space-align is evenly divisible by the region
+ 	 * interleave-width because the kernel typically has no facility
+ 	 * to determine which DIMM(s), dimm-physical-addresses, would
+ 	 * contribute to the tail capacity in system-physical-address
+ 	 * space for the namespace.
+ 	 */
+ 	dpa = div_u64_rem(val, nd_region->ndr_mappings, &remainder);
+ 	if (!is_power_of_2(dpa) || dpa < PAGE_SIZE
+ 			|| val > region_size(nd_region) || remainder)
+ 		return -EINVAL;
+ 
+ 	/*
+ 	 * Given that space allocation consults this value multiple
+ 	 * times ensure it does not change for the duration of the
+ 	 * allocation.
+ 	 */
+ 	nvdimm_bus_lock(dev);
+ 	nd_region->align = val;
+ 	nvdimm_bus_unlock(dev);
+ 
+ 	return len;
+ }
+ static DEVICE_ATTR_RW(align);
+ 
++>>>>>>> 04ff4863e126 (libnvdimm/region: Fix build error)
  static ssize_t region_badblocks_show(struct device *dev,
  		struct device_attribute *attr, char *buf)
  {
@@@ -936,9 -1001,44 +987,47 @@@ void nd_region_release_lane(struct nd_r
  }
  EXPORT_SYMBOL(nd_region_release_lane);
  
++<<<<<<< HEAD
++=======
+ /*
+  * PowerPC requires this alignment for memremap_pages(). All other archs
+  * should be ok with SUBSECTION_SIZE (see memremap_compat_align()).
+  */
+ #define MEMREMAP_COMPAT_ALIGN_MAX SZ_16M
+ 
+ static unsigned long default_align(struct nd_region *nd_region)
+ {
+ 	unsigned long align;
+ 	int i, mappings;
+ 	u32 remainder;
+ 
+ 	if (is_nd_blk(&nd_region->dev))
+ 		align = PAGE_SIZE;
+ 	else
+ 		align = MEMREMAP_COMPAT_ALIGN_MAX;
+ 
+ 	for (i = 0; i < nd_region->ndr_mappings; i++) {
+ 		struct nd_mapping *nd_mapping = &nd_region->mapping[i];
+ 		struct nvdimm *nvdimm = nd_mapping->nvdimm;
+ 
+ 		if (test_bit(NDD_ALIASING, &nvdimm->flags)) {
+ 			align = MEMREMAP_COMPAT_ALIGN_MAX;
+ 			break;
+ 		}
+ 	}
+ 
+ 	mappings = max_t(u16, 1, nd_region->ndr_mappings);
+ 	div_u64_rem(align, mappings, &remainder);
+ 	if (remainder)
+ 		align *= mappings;
+ 
+ 	return align;
+ }
+ 
++>>>>>>> 04ff4863e126 (libnvdimm/region: Fix build error)
  static struct nd_region *nd_region_create(struct nvdimm_bus *nvdimm_bus,
 -		struct nd_region_desc *ndr_desc,
 -		const struct device_type *dev_type, const char *caller)
 +		struct nd_region_desc *ndr_desc, struct device_type *dev_type,
 +		const char *caller)
  {
  	struct nd_region *nd_region;
  	struct device *dev;
* Unmerged path drivers/nvdimm/region_devs.c
