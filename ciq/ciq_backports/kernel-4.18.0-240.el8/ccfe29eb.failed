bpf: Add attach_btf_id attribute to program load

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alexei Starovoitov <ast@kernel.org>
commit ccfe29eb29c2edcea6552072ef00ff4117f53e83
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ccfe29eb.failed

Add attach_btf_id attribute to prog_load command.
It's similar to existing expected_attach_type attribute which is
used in several cgroup based program types.
Unfortunately expected_attach_type is ignored for
tracing programs and cannot be reused for new purpose.
Hence introduce attach_btf_id to verify bpf programs against
given in-kernel BTF type id at load time.
It is strictly checked to be valid for raw_tp programs only.
In a later patches it will become:
btf_id == 0 semantics of existing raw_tp progs.
btd_id > 0 raw_tp with BTF and additional type safety.

	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Andrii Nakryiko <andriin@fb.com>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20191016032505.2089704-5-ast@kernel.org
(cherry picked from commit ccfe29eb29c2edcea6552072ef00ff4117f53e83)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/bpf.h
#	include/uapi/linux/bpf.h
#	kernel/bpf/syscall.c
diff --cc include/linux/bpf.h
index 9032221ed0a6,f916380675dd..000000000000
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@@ -392,8 -374,9 +392,14 @@@ struct bpf_prog_aux 
  	u32 stack_depth;
  	u32 id;
  	u32 func_cnt; /* used by non-func prog as the number of func progs */
++<<<<<<< HEAD
 +	RH_KABI_BROKEN_INSERT(u32 func_idx) /* 0 for non-func prog, the index in func array for func prog */
 +	RH_KABI_BROKEN_INSERT(bool verifier_zext) /* Zero extensions has been inserted by verifier. */
++=======
+ 	u32 func_idx; /* 0 for non-func prog, the index in func array for func prog */
+ 	u32 attach_btf_id; /* in-kernel BTF type id to attach to */
+ 	bool verifier_zext; /* Zero extensions has been inserted by verifier. */
++>>>>>>> ccfe29eb29c2 (bpf: Add attach_btf_id attribute to program load)
  	bool offload_requested;
  	struct bpf_prog **func;
  	void *jit_data; /* JIT specific data. arch dependent */
diff --cc include/uapi/linux/bpf.h
index f26f93a554f1,3bb2cd1de341..000000000000
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@@ -426,7 -420,7 +426,11 @@@ union bpf_attr 
  		__u32		line_info_rec_size;	/* userspace bpf_line_info size */
  		__aligned_u64	line_info;	/* line info */
  		__u32		line_info_cnt;	/* number of bpf_line_info records */
++<<<<<<< HEAD
 +#endif /* __GENKSYMS__ */
++=======
+ 		__u32		attach_btf_id;	/* in-kernel BTF type id to attach to */
++>>>>>>> ccfe29eb29c2 (bpf: Add attach_btf_id attribute to program load)
  	};
  
  	struct { /* anonymous struct used by BPF_OBJ_* commands */
diff --cc kernel/bpf/syscall.c
index 508dc7afd03d,b56c482c9760..000000000000
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@@ -31,10 -23,7 +31,14 @@@
  #include <linux/timekeeping.h>
  #include <linux/ctype.h>
  #include <linux/nospec.h>
++<<<<<<< HEAD
 +#include <linux/audit.h>
 +#include <linux/init.h>
 +
 +#include <linux/rh_features.h>
++=======
+ #include <uapi/linux/btf.h>
++>>>>>>> ccfe29eb29c2 (bpf: Add attach_btf_id attribute to program load)
  
  #define IS_FD_ARRAY(map) ((map)->map_type == BPF_MAP_TYPE_PROG_ARRAY || \
  			   (map)->map_type == BPF_MAP_TYPE_PERF_EVENT_ARRAY || \
* Unmerged path include/linux/bpf.h
* Unmerged path include/uapi/linux/bpf.h
* Unmerged path kernel/bpf/syscall.c
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 4c50a38c7288..91e6735f6911 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -417,6 +417,7 @@ union bpf_attr {
 		__u32		line_info_rec_size;	/* userspace bpf_line_info size */
 		__aligned_u64	line_info;	/* line info */
 		__u32		line_info_cnt;	/* number of bpf_line_info records */
+		__u32		attach_btf_id;	/* in-kernel BTF type id to attach to */
 	};
 
 	struct { /* anonymous struct used by BPF_OBJ_* commands */
