perf expr: Straighten expr__parse()/expr__find_other() interface

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 0f9b1e124bb29719eb1572db74b7893bd616f938
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/0f9b1e12.failed

Now that we have a flex parser we don't need to update the parsed string
pointer, so the interface can just be passed the pointer to the
expression instead of a pointer to pointer.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Reviewed-by: Andi Kleen <ak@linux.intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: John Garry <john.garry@huawei.com>
	Cc: Kajol Jain <kjain@linux.ibm.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
Link: http://lore.kernel.org/lkml/20200228093616.67125-5-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 0f9b1e124bb29719eb1572db74b7893bd616f938)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/stat-shadow.c
diff --cc tools/perf/util/stat-shadow.c
index 7b8f4fa4b612,0fd713d3674f..000000000000
--- a/tools/perf/util/stat-shadow.c
+++ b/tools/perf/util/stat-shadow.c
@@@ -755,18 -769,36 +755,43 @@@ static void generic_metric(struct perf_
  		pn = strchr(n, ' ');
  		if (pn)
  			*pn = 0;
 -
 -		if (metric_total)
 -			expr__add_id(&pctx, n, metric_total);
 -		else
 -			expr__add_id(&pctx, n, avg_stats(stats)*scale);
 +		expr__add_id(&pctx, n, avg_stats(stats)*scale);
  	}
 -
  	if (!metric_events[i]) {
++<<<<<<< HEAD
 +		const char *p = metric_expr;
 +
 +		if (expr__parse(&ratio, &pctx, &p) == 0)
 +			print_metric(config, ctxp, NULL, "%8.1f",
 +				metric_name ?
 +				metric_name :
 +				out->force_header ?  name : "",
 +				ratio);
 +		else
++=======
+ 		if (expr__parse(&ratio, &pctx, metric_expr) == 0) {
+ 			char *unit;
+ 			char metric_bf[64];
+ 
+ 			if (metric_unit && metric_name) {
+ 				if (perf_pmu__convert_scale(metric_unit,
+ 					&unit, &scale) >= 0) {
+ 					ratio *= scale;
+ 				}
+ 
+ 				scnprintf(metric_bf, sizeof(metric_bf),
+ 					  "%s  %s", unit, metric_name);
+ 				print_metric(config, ctxp, NULL, "%8.1f",
+ 					     metric_bf, ratio);
+ 			} else {
+ 				print_metric(config, ctxp, NULL, "%8.1f",
+ 					metric_name ?
+ 					metric_name :
+ 					out->force_header ?  name : "",
+ 					ratio);
+ 			}
+ 		} else {
++>>>>>>> 0f9b1e124bb2 (perf expr: Straighten expr__parse()/expr__find_other() interface)
  			print_metric(config, ctxp, NULL, NULL,
  				     out->force_header ?
  				     (metric_name ? metric_name : name) : "", 0);
diff --git a/tools/perf/tests/expr.c b/tools/perf/tests/expr.c
index ee1d88650e69..e434932653b5 100644
--- a/tools/perf/tests/expr.c
+++ b/tools/perf/tests/expr.c
@@ -9,7 +9,7 @@ static int test(struct parse_ctx *ctx, const char *e, double val2)
 {
 	double val;
 
-	if (expr__parse(&val, ctx, &e))
+	if (expr__parse(&val, ctx, e))
 		TEST_ASSERT_VAL("parse test failed", 0);
 	TEST_ASSERT_VAL("unexpected value", val == val2);
 	return 0;
@@ -43,11 +43,11 @@ int test__expr(struct test *t __maybe_unused, int subtest __maybe_unused)
 		return ret;
 
 	p = "FOO/0";
-	ret = expr__parse(&val, &ctx, &p);
+	ret = expr__parse(&val, &ctx, p);
 	TEST_ASSERT_VAL("division by zero", ret == 1);
 
 	p = "BAR/";
-	ret = expr__parse(&val, &ctx, &p);
+	ret = expr__parse(&val, &ctx, p);
 	TEST_ASSERT_VAL("missing operand", ret == 1);
 
 	TEST_ASSERT_VAL("find other",
diff --git a/tools/perf/util/expr.c b/tools/perf/util/expr.c
index b39fd39f10ec..45b25530db5b 100644
--- a/tools/perf/util/expr.c
+++ b/tools/perf/util/expr.c
@@ -52,9 +52,9 @@ __expr__parse(double *val, struct parse_ctx *ctx, const char *expr,
 	return ret;
 }
 
-int expr__parse(double *final_val, struct parse_ctx *ctx, const char **pp)
+int expr__parse(double *final_val, struct parse_ctx *ctx, const char *expr)
 {
-	return __expr__parse(final_val, ctx, *pp, EXPR_PARSE);
+	return __expr__parse(final_val, ctx, expr, EXPR_PARSE);
 }
 
 static bool
@@ -71,14 +71,14 @@ already_seen(const char *val, const char *one, const char **other,
 	return false;
 }
 
-int expr__find_other(const char *p, const char *one, const char ***other,
+int expr__find_other(const char *expr, const char *one, const char ***other,
 		     int *num_other)
 {
 	int err, i = 0, j = 0;
 	struct parse_ctx ctx;
 
 	expr__ctx_init(&ctx);
-	err = __expr__parse(NULL, &ctx, p, EXPR_OTHER);
+	err = __expr__parse(NULL, &ctx, expr, EXPR_OTHER);
 	if (err)
 		return -1;
 
diff --git a/tools/perf/util/expr.h b/tools/perf/util/expr.h
index df0a17df0cef..9377538f4097 100644
--- a/tools/perf/util/expr.h
+++ b/tools/perf/util/expr.h
@@ -17,8 +17,8 @@ struct parse_ctx {
 
 void expr__ctx_init(struct parse_ctx *ctx);
 void expr__add_id(struct parse_ctx *ctx, const char *id, double val);
-int expr__parse(double *final_val, struct parse_ctx *ctx, const char **pp);
-int expr__find_other(const char *p, const char *one, const char ***other,
+int expr__parse(double *final_val, struct parse_ctx *ctx, const char *expr);
+int expr__find_other(const char *expr, const char *one, const char ***other,
 		int *num_other);
 
 #endif
* Unmerged path tools/perf/util/stat-shadow.c
