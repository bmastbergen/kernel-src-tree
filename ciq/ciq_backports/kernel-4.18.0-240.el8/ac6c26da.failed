PCI: Make pci_enable_ptm() private

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Kelsey Skunberg <skunberg.kelsey@gmail.com>
commit ac6c26da29c12fa511c877c273ed5c939dc9e96c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ac6c26da.failed

This interface:

  int pci_enable_ptm(struct pci_dev *dev, u8 *granularity);

is only used in drivers/pci/ and does not need to be seen by the rest of
the kernel.  Move it to drivers/pci/pci.h so it's private to the PCI
subsystem.

Link: https://lore.kernel.org/r/20190724233848.73327-11-skunberg.kelsey@gmail.com
	Signed-off-by: Kelsey Skunberg <skunberg.kelsey@gmail.com>
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
(cherry picked from commit ac6c26da29c12fa511c877c273ed5c939dc9e96c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/pci.h
diff --cc include/linux/pci.h
index 816e47e08160,ef73b0c87f01..000000000000
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@@ -1580,28 -1561,6 +1580,31 @@@ static inline bool pci_aer_available(vo
  
  bool pci_ats_disabled(void);
  
++<<<<<<< HEAD
 +#ifdef CONFIG_PCI_ATS
 +/* Address Translation Service */
 +void pci_ats_init(struct pci_dev *dev);
 +int pci_enable_ats(struct pci_dev *dev, int ps);
 +void pci_disable_ats(struct pci_dev *dev);
 +int pci_ats_queue_depth(struct pci_dev *dev);
 +int pci_ats_page_aligned(struct pci_dev *dev);
 +#else
 +static inline void pci_ats_init(struct pci_dev *d) { }
 +static inline int pci_enable_ats(struct pci_dev *d, int ps) { return -ENODEV; }
 +static inline void pci_disable_ats(struct pci_dev *d) { }
 +static inline int pci_ats_queue_depth(struct pci_dev *d) { return -ENODEV; }
 +static inline int pci_ats_page_aligned(struct pci_dev *dev) { return 0; }
 +#endif
 +
 +#ifdef CONFIG_PCIE_PTM
 +int pci_enable_ptm(struct pci_dev *dev, u8 *granularity);
 +#else
 +static inline int pci_enable_ptm(struct pci_dev *dev, u8 *granularity)
 +{ return -EINVAL; }
 +#endif
 +
++=======
++>>>>>>> ac6c26da29c1 (PCI: Make pci_enable_ptm() private)
  void pci_cfg_access_lock(struct pci_dev *dev);
  bool pci_cfg_access_trylock(struct pci_dev *dev);
  void pci_cfg_access_unlock(struct pci_dev *dev);
diff --git a/drivers/pci/pci.h b/drivers/pci/pci.h
index 2cff7d172dc0..ae492ff73d99 100644
--- a/drivers/pci/pci.h
+++ b/drivers/pci/pci.h
@@ -568,8 +568,11 @@ static inline void pcie_ecrc_get_policy(char *str) { }
 
 #ifdef CONFIG_PCIE_PTM
 void pci_ptm_init(struct pci_dev *dev);
+int pci_enable_ptm(struct pci_dev *dev, u8 *granularity);
 #else
 static inline void pci_ptm_init(struct pci_dev *dev) { }
+static inline int pci_enable_ptm(struct pci_dev *dev, u8 *granularity)
+{ return -EINVAL; }
 #endif
 
 struct pci_dev_reset_methods {
* Unmerged path include/linux/pci.h
