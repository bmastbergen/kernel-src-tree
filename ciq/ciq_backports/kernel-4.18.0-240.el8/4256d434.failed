libperf: Adopt perf_cpu_map__max() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 4256d434935e9c85a731823be562785494ca364b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4256d434.failed

From 'perf stat', so that it can be used from multiple places.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Joe Mario <jmario@redhat.com>
	Cc: Kan Liang <kan.liang@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20190902121255.536-2-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 4256d434935e9c85a731823be562785494ca364b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/builtin-stat.c
#	tools/perf/lib/cpumap.c
#	tools/perf/lib/include/perf/cpumap.h
#	tools/perf/lib/libperf.map
diff --cc tools/perf/builtin-stat.c
index b71c4390d333,5bc0c570b7b6..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -822,20 -822,8 +822,23 @@@ static int perf_stat__get_core(struct p
  	return cpu_map__get_core(map, cpu, NULL);
  }
  
++<<<<<<< HEAD
 +static int cpu_map__get_max(struct cpu_map *map)
 +{
 +	int i, max = -1;
 +
 +	for (i = 0; i < map->nr; i++) {
 +		if (map->map[i] > max)
 +			max = map->map[i];
 +	}
 +
 +	return max;
 +}
 +
++=======
++>>>>>>> 4256d434935e (libperf: Adopt perf_cpu_map__max() function)
  static int perf_stat__get_aggr(struct perf_stat_config *config,
 -			       aggr_get_id_t get_id, struct perf_cpu_map *map, int idx)
 +			       aggr_get_id_t get_id, struct cpu_map *map, int idx)
  {
  	int cpu;
  
@@@ -928,8 -916,8 +931,13 @@@ static int perf_stat_init_aggr_mode(voi
  	 * taking the highest cpu number to be the size of
  	 * the aggregation translate cpumap.
  	 */
++<<<<<<< HEAD
 +	nr = cpu_map__get_max(evsel_list->cpus);
 +	stat_config.cpus_aggr_map = cpu_map__empty_new(nr + 1);
++=======
+ 	nr = perf_cpu_map__max(evsel_list->core.cpus);
+ 	stat_config.cpus_aggr_map = perf_cpu_map__empty_new(nr + 1);
++>>>>>>> 4256d434935e (libperf: Adopt perf_cpu_map__max() function)
  	return stat_config.cpus_aggr_map ? 0 : -ENOMEM;
  }
  
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,cd0d17b996c8..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,44 +1,47 @@@
  LIBPERF_0.0.1 {
  	global:
  		libperf_set_print;
++<<<<<<< HEAD
++=======
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_cpu_map__new;
+ 		perf_cpu_map__read;
+ 		perf_cpu_map__nr;
+ 		perf_cpu_map__cpu;
+ 		perf_cpu_map__empty;
+ 		perf_cpu_map__max;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__nr;
+ 		perf_thread_map__pid;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
+ 		perf_evsel__new;
+ 		perf_evsel__delete;
+ 		perf_evsel__enable;
+ 		perf_evsel__disable;
+ 		perf_evsel__init;
+ 		perf_evsel__open;
+ 		perf_evsel__close;
+ 		perf_evsel__read;
+ 		perf_evsel__cpus;
+ 		perf_evsel__threads;
+ 		perf_evsel__attr;
+ 		perf_evlist__new;
+ 		perf_evlist__delete;
+ 		perf_evlist__open;
+ 		perf_evlist__close;
+ 		perf_evlist__enable;
+ 		perf_evlist__disable;
+ 		perf_evlist__init;
+ 		perf_evlist__add;
+ 		perf_evlist__remove;
+ 		perf_evlist__next;
+ 		perf_evlist__set_maps;
++>>>>>>> 4256d434935e (libperf: Adopt perf_cpu_map__max() function)
  	local:
  		*;
  };
* Unmerged path tools/perf/lib/cpumap.c
* Unmerged path tools/perf/lib/include/perf/cpumap.h
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/lib/cpumap.c
* Unmerged path tools/perf/lib/include/perf/cpumap.h
* Unmerged path tools/perf/lib/libperf.map
