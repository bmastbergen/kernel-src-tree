tipc: Add a missing case of TIPC_DIRECT_MSG type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Hoang Le <hoang.h.le@dektech.com.au>
commit 8b1e5b0a99f04bda2d6c85ecfe5e68a356c10914
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8b1e5b0a.failed

In the commit f73b12812a3d
("tipc: improve throughput between nodes in netns"), we're missing a check
to handle TIPC_DIRECT_MSG type, it's still using old sending mechanism for
this message type. So, throughput improvement is not significant as
expected.

Besides that, when sending a large message with that type, we're also
handle wrong receiving queue, it should be enqueued in socket receiving
instead of multicast messages.

Fix this by adding the missing case for TIPC_DIRECT_MSG.

Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
	Reported-by: Tuong Lien <tuong.t.lien@dektech.com.au>
	Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
	Acked-by: Jon Maloy <jmaloy@redhat.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 8b1e5b0a99f04bda2d6c85ecfe5e68a356c10914)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/tipc/node.c
#	net/tipc/socket.c
diff --cc net/tipc/node.c
index 3fe27ab13350,10292c942384..000000000000
--- a/net/tipc/node.c
+++ b/net/tipc/node.c
@@@ -1435,6 -1576,57 +1435,60 @@@ msg_full
  	return -EMSGSIZE;
  }
  
++<<<<<<< HEAD
++=======
+ static void tipc_lxc_xmit(struct net *peer_net, struct sk_buff_head *list)
+ {
+ 	struct tipc_msg *hdr = buf_msg(skb_peek(list));
+ 	struct sk_buff_head inputq;
+ 
+ 	switch (msg_user(hdr)) {
+ 	case TIPC_LOW_IMPORTANCE:
+ 	case TIPC_MEDIUM_IMPORTANCE:
+ 	case TIPC_HIGH_IMPORTANCE:
+ 	case TIPC_CRITICAL_IMPORTANCE:
+ 		if (msg_connected(hdr) || msg_named(hdr) ||
+ 		    msg_direct(hdr)) {
+ 			tipc_loopback_trace(peer_net, list);
+ 			spin_lock_init(&list->lock);
+ 			tipc_sk_rcv(peer_net, list);
+ 			return;
+ 		}
+ 		if (msg_mcast(hdr)) {
+ 			tipc_loopback_trace(peer_net, list);
+ 			skb_queue_head_init(&inputq);
+ 			tipc_sk_mcast_rcv(peer_net, list, &inputq);
+ 			__skb_queue_purge(list);
+ 			skb_queue_purge(&inputq);
+ 			return;
+ 		}
+ 		return;
+ 	case MSG_FRAGMENTER:
+ 		if (tipc_msg_assemble(list)) {
+ 			tipc_loopback_trace(peer_net, list);
+ 			skb_queue_head_init(&inputq);
+ 			tipc_sk_mcast_rcv(peer_net, list, &inputq);
+ 			__skb_queue_purge(list);
+ 			skb_queue_purge(&inputq);
+ 		}
+ 		return;
+ 	case GROUP_PROTOCOL:
+ 	case CONN_MANAGER:
+ 		tipc_loopback_trace(peer_net, list);
+ 		spin_lock_init(&list->lock);
+ 		tipc_sk_rcv(peer_net, list);
+ 		return;
+ 	case LINK_PROTOCOL:
+ 	case NAME_DISTRIBUTOR:
+ 	case TUNNEL_PROTOCOL:
+ 	case BCAST_PROTOCOL:
+ 		return;
+ 	default:
+ 		return;
+ 	};
+ }
+ 
++>>>>>>> 8b1e5b0a99f0 (tipc: Add a missing case of TIPC_DIRECT_MSG type)
  /**
   * tipc_node_xmit() is the general link level function for message sending
   * @net: the applicable net namespace
diff --cc net/tipc/socket.c
index 82ad7f264ef8,87466607097f..000000000000
--- a/net/tipc/socket.c
+++ b/net/tipc/socket.c
@@@ -1461,7 -1461,7 +1461,11 @@@ static int __tipc_sendmsg(struct socke
  	}
  
  	__skb_queue_head_init(&pkts);
++<<<<<<< HEAD
 +	mtu = tipc_node_get_mtu(net, dnode, tsk->portid);
++=======
+ 	mtu = tipc_node_get_mtu(net, dnode, tsk->portid, true);
++>>>>>>> 8b1e5b0a99f0 (tipc: Add a missing case of TIPC_DIRECT_MSG type)
  	rc = tipc_msg_build(hdr, m, 0, dlen, mtu, &pkts);
  	if (unlikely(rc != dlen))
  		return rc;
diff --git a/net/tipc/msg.h b/net/tipc/msg.h
index 98b5a5f8cdce..a47291de21db 100644
--- a/net/tipc/msg.h
+++ b/net/tipc/msg.h
@@ -368,6 +368,11 @@ static inline u32 msg_connected(struct tipc_msg *m)
 	return msg_type(m) == TIPC_CONN_MSG;
 }
 
+static inline u32 msg_direct(struct tipc_msg *m)
+{
+	return msg_type(m) == TIPC_DIRECT_MSG;
+}
+
 static inline u32 msg_errcode(struct tipc_msg *m)
 {
 	return msg_bits(m, 1, 25, 0xf);
* Unmerged path net/tipc/node.c
* Unmerged path net/tipc/socket.c
