gpio: Propagate errors from gpiod_set_array_value_complex()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Geert Uytterhoeven <geert+renesas@glider.be>
commit cf9af0d5786c008971148f4e06567a98f6a7f9d0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/cf9af0d5.failed

Internal helper function gpiod_set_array_value_complex() was changed to
return an error value, but not all gpiolib callers were updated to
propagate the new error up.

Fixes: 3027743f83f867d8 ("gpio: Remove VLA from gpiolib")
	Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit cf9af0d5786c008971148f4e06567a98f6a7f9d0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/driver-api/gpio/consumer.rst
diff --cc Documentation/driver-api/gpio/consumer.rst
index 2823a3ffa907,5e4d8aa68913..000000000000
--- a/Documentation/driver-api/gpio/consumer.rst
+++ b/Documentation/driver-api/gpio/consumer.rst
@@@ -340,22 -340,22 +340,41 @@@ The following functions get or set the 
  					   struct gpio_array *array_info,
  					   unsigned long *value_bitmap);
  
++<<<<<<< HEAD
 +	void gpiod_set_array_value(unsigned int array_size,
 +				   struct gpio_desc **desc_array,
 +				   struct gpio_array *array_info,
 +				   unsigned long *value_bitmap)
 +	void gpiod_set_raw_array_value(unsigned int array_size,
 +				       struct gpio_desc **desc_array,
 +				       struct gpio_array *array_info,
 +				       unsigned long *value_bitmap)
 +	void gpiod_set_array_value_cansleep(unsigned int array_size,
 +					    struct gpio_desc **desc_array,
 +					    struct gpio_array *array_info,
 +					    unsigned long *value_bitmap)
 +	void gpiod_set_raw_array_value_cansleep(unsigned int array_size,
 +						struct gpio_desc **desc_array,
 +						struct gpio_array *array_info,
 +						unsigned long *value_bitmap)
++=======
+ 	int gpiod_set_array_value(unsigned int array_size,
+ 				  struct gpio_desc **desc_array,
+ 				  struct gpio_array *array_info,
+ 				  unsigned long *value_bitmap)
+ 	int gpiod_set_raw_array_value(unsigned int array_size,
+ 				      struct gpio_desc **desc_array,
+ 				      struct gpio_array *array_info,
+ 				      unsigned long *value_bitmap)
+ 	int gpiod_set_array_value_cansleep(unsigned int array_size,
+ 					   struct gpio_desc **desc_array,
+ 					   struct gpio_array *array_info,
+ 					   unsigned long *value_bitmap)
+ 	int gpiod_set_raw_array_value_cansleep(unsigned int array_size,
+ 					       struct gpio_desc **desc_array,
+ 					       struct gpio_array *array_info,
+ 					       unsigned long *value_bitmap)
++>>>>>>> cf9af0d5786c (gpio: Propagate errors from gpiod_set_array_value_complex())
  
  The array can be an arbitrary set of GPIOs. The functions will try to access
  GPIOs belonging to the same bank or chip simultaneously if supported by the
* Unmerged path Documentation/driver-api/gpio/consumer.rst
diff --git a/drivers/gpio/gpiolib.c b/drivers/gpio/gpiolib.c
index 6f46a51a934b..8fdb56d2feee 100644
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@ -3347,15 +3347,16 @@ EXPORT_SYMBOL_GPL(gpiod_set_raw_array_value);
  * This function should be called from contexts where we cannot sleep, and will
  * complain if the GPIO chip functions potentially sleep.
  */
-void gpiod_set_array_value(unsigned int array_size,
-			   struct gpio_desc **desc_array,
-			   struct gpio_array *array_info,
-			   unsigned long *value_bitmap)
+int gpiod_set_array_value(unsigned int array_size,
+			  struct gpio_desc **desc_array,
+			  struct gpio_array *array_info,
+			  unsigned long *value_bitmap)
 {
 	if (!desc_array)
-		return;
-	gpiod_set_array_value_complex(false, false, array_size, desc_array,
-				      array_info, value_bitmap);
+		return -EINVAL;
+	return gpiod_set_array_value_complex(false, false, array_size,
+					     desc_array, array_info,
+					     value_bitmap);
 }
 EXPORT_SYMBOL_GPL(gpiod_set_array_value);
 
@@ -3764,16 +3765,17 @@ void gpiod_add_lookup_tables(struct gpiod_lookup_table **tables, size_t n)
  *
  * This function is to be called from contexts that can sleep.
  */
-void gpiod_set_array_value_cansleep(unsigned int array_size,
-				    struct gpio_desc **desc_array,
-				    struct gpio_array *array_info,
-				    unsigned long *value_bitmap)
+int gpiod_set_array_value_cansleep(unsigned int array_size,
+				   struct gpio_desc **desc_array,
+				   struct gpio_array *array_info,
+				   unsigned long *value_bitmap)
 {
 	might_sleep_if(extra_checks);
 	if (!desc_array)
-		return;
-	gpiod_set_array_value_complex(false, true, array_size, desc_array,
-				      array_info, value_bitmap);
+		return -EINVAL;
+	return gpiod_set_array_value_complex(false, true, array_size,
+					     desc_array, array_info,
+					     value_bitmap);
 }
 EXPORT_SYMBOL_GPL(gpiod_set_array_value_cansleep);
 
diff --git a/include/linux/gpio/consumer.h b/include/linux/gpio/consumer.h
index cf3820f932be..40a4c86740f6 100644
--- a/include/linux/gpio/consumer.h
+++ b/include/linux/gpio/consumer.h
@@ -118,10 +118,10 @@ int gpiod_get_array_value(unsigned int array_size,
 			  struct gpio_array *array_info,
 			  unsigned long *value_bitmap);
 void gpiod_set_value(struct gpio_desc *desc, int value);
-void gpiod_set_array_value(unsigned int array_size,
-			   struct gpio_desc **desc_array,
-			   struct gpio_array *array_info,
-			   unsigned long *value_bitmap);
+int gpiod_set_array_value(unsigned int array_size,
+			  struct gpio_desc **desc_array,
+			  struct gpio_array *array_info,
+			  unsigned long *value_bitmap);
 int gpiod_get_raw_value(const struct gpio_desc *desc);
 int gpiod_get_raw_array_value(unsigned int array_size,
 			      struct gpio_desc **desc_array,
@@ -140,10 +140,10 @@ int gpiod_get_array_value_cansleep(unsigned int array_size,
 				   struct gpio_array *array_info,
 				   unsigned long *value_bitmap);
 void gpiod_set_value_cansleep(struct gpio_desc *desc, int value);
-void gpiod_set_array_value_cansleep(unsigned int array_size,
-				    struct gpio_desc **desc_array,
-				    struct gpio_array *array_info,
-				    unsigned long *value_bitmap);
+int gpiod_set_array_value_cansleep(unsigned int array_size,
+				   struct gpio_desc **desc_array,
+				   struct gpio_array *array_info,
+				   unsigned long *value_bitmap);
 int gpiod_get_raw_value_cansleep(const struct gpio_desc *desc);
 int gpiod_get_raw_array_value_cansleep(unsigned int array_size,
 				       struct gpio_desc **desc_array,
@@ -366,13 +366,14 @@ static inline void gpiod_set_value(struct gpio_desc *desc, int value)
 	/* GPIO can never have been requested */
 	WARN_ON(1);
 }
-static inline void gpiod_set_array_value(unsigned int array_size,
-					 struct gpio_desc **desc_array,
-					 struct gpio_array *array_info,
-					 unsigned long *value_bitmap)
+static inline int gpiod_set_array_value(unsigned int array_size,
+					struct gpio_desc **desc_array,
+					struct gpio_array *array_info,
+					unsigned long *value_bitmap)
 {
 	/* GPIO can never have been requested */
 	WARN_ON(1);
+	return 0;
 }
 static inline int gpiod_get_raw_value(const struct gpio_desc *desc)
 {
@@ -424,13 +425,14 @@ static inline void gpiod_set_value_cansleep(struct gpio_desc *desc, int value)
 	/* GPIO can never have been requested */
 	WARN_ON(1);
 }
-static inline void gpiod_set_array_value_cansleep(unsigned int array_size,
+static inline int gpiod_set_array_value_cansleep(unsigned int array_size,
 					    struct gpio_desc **desc_array,
 					    struct gpio_array *array_info,
 					    unsigned long *value_bitmap)
 {
 	/* GPIO can never have been requested */
 	WARN_ON(1);
+	return 0;
 }
 static inline int gpiod_get_raw_value_cansleep(const struct gpio_desc *desc)
 {
