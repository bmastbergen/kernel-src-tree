io_uring: remove extra check in __io_commit_cqring

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pavel Begunkov <asml.silence@gmail.com>
commit 0791015837f1520dd72918355dcb1f1e79175255
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/07910158.failed

__io_commit_cqring() is almost always called when there is a change in
the rings, so the check is rather pessimising.

	Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 0791015837f1520dd72918355dcb1f1e79175255)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 28a601d08266,771954bb4c38..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -452,18 -839,33 +452,22 @@@ static struct io_kiocb *io_get_deferred
  	return NULL;
  }
  
 -static struct io_kiocb *io_get_timeout_req(struct io_ring_ctx *ctx)
 -{
 -	struct io_kiocb *req;
 -
 -	req = list_first_entry_or_null(&ctx->timeout_list, struct io_kiocb, list);
 -	if (req) {
 -		if (req->flags & REQ_F_TIMEOUT_NOSEQ)
 -			return NULL;
 -		if (!__req_need_defer(req)) {
 -			list_del_init(&req->list);
 -			return req;
 -		}
 -	}
 -
 -	return NULL;
 -}
 -
  static void __io_commit_cqring(struct io_ring_ctx *ctx)
  {
 -	struct io_rings *rings = ctx->rings;
 +	struct io_cq_ring *ring = ctx->cq_ring;
  
++<<<<<<< HEAD
 +	if (ctx->cached_cq_tail != READ_ONCE(ring->r.tail)) {
 +		/* order cqe stores with ring update */
 +		smp_store_release(&ring->r.tail, ctx->cached_cq_tail);
- 
- 		if (wq_has_sleeper(&ctx->cq_wait)) {
- 			wake_up_interruptible(&ctx->cq_wait);
- 			kill_fasync(&ctx->cq_fasync, SIGIO, POLL_IN);
- 		}
++=======
+ 	/* order cqe stores with ring update */
+ 	smp_store_release(&rings->cq.tail, ctx->cached_cq_tail);
++>>>>>>> 0791015837f1 (io_uring: remove extra check in __io_commit_cqring)
+ 
+ 	if (wq_has_sleeper(&ctx->cq_wait)) {
+ 		wake_up_interruptible(&ctx->cq_wait);
+ 		kill_fasync(&ctx->cq_fasync, SIGIO, POLL_IN);
  	}
  }
  
* Unmerged path fs/io_uring.c
