io_uring: remove passed in 'ctx' function parameter ctx if possible

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jackie Liu <liuyun01@kylinos.cn>
commit a197f664a0db8a6219d9ce949f5f29b89f60fb2b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a197f664.failed

Many times, the core of the function is req, and req has already set
req->ctx at initialization time, so there is no need to pass in the
ctx from the caller.

Cleanup, no functional change.

	Signed-off-by: Jackie Liu <liuyun01@kylinos.cn>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit a197f664a0db8a6219d9ce949f5f29b89f60fb2b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index fca9cdc96d77,147d1f0e13cc..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -424,27 -427,52 +424,63 @@@ static struct io_ring_ctx *io_ring_ctx_
  	INIT_LIST_HEAD(&ctx->poll_list);
  	INIT_LIST_HEAD(&ctx->cancel_list);
  	INIT_LIST_HEAD(&ctx->defer_list);
 -	INIT_LIST_HEAD(&ctx->timeout_list);
 -	init_waitqueue_head(&ctx->inflight_wait);
 -	spin_lock_init(&ctx->inflight_lock);
 -	INIT_LIST_HEAD(&ctx->inflight_list);
  	return ctx;
++<<<<<<< HEAD
++=======
+ err:
+ 	kfree(ctx->completions);
+ 	kfree(ctx);
+ 	return NULL;
+ }
+ 
+ static inline bool __io_sequence_defer(struct io_kiocb *req)
+ {
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 
+ 	return req->sequence != ctx->cached_cq_tail + ctx->cached_sq_dropped
+ 					+ atomic_read(&ctx->cached_cq_overflow);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  }
  
- static inline bool io_sequence_defer(struct io_ring_ctx *ctx,
- 				     struct io_kiocb *req)
+ static inline bool io_sequence_defer(struct io_kiocb *req)
  {
  	if ((req->flags & (REQ_F_IO_DRAIN|REQ_F_IO_DRAINED)) != REQ_F_IO_DRAIN)
  		return false;
  
++<<<<<<< HEAD
 +	return req->sequence != ctx->cached_cq_tail + ctx->sq_ring->dropped;
++=======
+ 	return __io_sequence_defer(req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  }
  
  static struct io_kiocb *io_get_deferred_req(struct io_ring_ctx *ctx)
  {
  	struct io_kiocb *req;
  
++<<<<<<< HEAD
 +	if (list_empty(&ctx->defer_list))
 +		return NULL;
 +
 +	req = list_first_entry(&ctx->defer_list, struct io_kiocb, list);
 +	if (!io_sequence_defer(ctx, req)) {
++=======
+ 	req = list_first_entry_or_null(&ctx->defer_list, struct io_kiocb, list);
+ 	if (req && !io_sequence_defer(req)) {
+ 		list_del_init(&req->list);
+ 		return req;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ static struct io_kiocb *io_get_timeout_req(struct io_ring_ctx *ctx)
+ {
+ 	struct io_kiocb *req;
+ 
+ 	req = list_first_entry_or_null(&ctx->timeout_list, struct io_kiocb, list);
+ 	if (req && !__io_sequence_defer(req)) {
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  		list_del_init(&req->list);
  		return req;
  	}
@@@ -476,12 -511,66 +512,54 @@@ static inline void io_queue_async_work(
  		switch (req->submit.sqe->opcode) {
  		case IORING_OP_WRITEV:
  		case IORING_OP_WRITE_FIXED:
 -			do_hashed = true;
 -			/* fall-through */
 -		case IORING_OP_READV:
 -		case IORING_OP_READ_FIXED:
 -		case IORING_OP_SENDMSG:
 -		case IORING_OP_RECVMSG:
 -		case IORING_OP_ACCEPT:
 -		case IORING_OP_POLL_ADD:
 -			/*
 -			 * We know REQ_F_ISREG is not set on some of these
 -			 * opcodes, but this enables us to keep the check in
 -			 * just one place.
 -			 */
 -			if (!(req->flags & REQ_F_ISREG))
 -				req->work.flags |= IO_WQ_WORK_UNBOUND;
 +			rw = !(req->rw.ki_flags & IOCB_DIRECT);
  			break;
  		}
 -		if (io_sqe_needs_user(req->submit.sqe))
 -			req->work.flags |= IO_WQ_WORK_NEEDS_USER;
  	}
  
++<<<<<<< HEAD
 +	queue_work(ctx->sqo_wq[rw], &req->work);
++=======
+ 	return do_hashed;
+ }
+ 
+ static inline void io_queue_async_work(struct io_kiocb *req)
+ {
+ 	bool do_hashed = io_prep_async_work(req);
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 
+ 	trace_io_uring_queue_async_work(ctx, do_hashed, req, &req->work,
+ 					req->flags);
+ 	if (!do_hashed) {
+ 		io_wq_enqueue(ctx->io_wq, &req->work);
+ 	} else {
+ 		io_wq_enqueue_hashed(ctx->io_wq, &req->work,
+ 					file_inode(req->file));
+ 	}
+ }
+ 
+ static void io_kill_timeout(struct io_kiocb *req)
+ {
+ 	int ret;
+ 
+ 	ret = hrtimer_try_to_cancel(&req->timeout.timer);
+ 	if (ret != -1) {
+ 		atomic_inc(&req->ctx->cq_timeouts);
+ 		list_del_init(&req->list);
+ 		io_cqring_fill_event(req, 0);
+ 		io_put_req(req, NULL);
+ 	}
+ }
+ 
+ static void io_kill_timeouts(struct io_ring_ctx *ctx)
+ {
+ 	struct io_kiocb *req, *tmp;
+ 
+ 	spin_lock_irq(&ctx->completion_lock);
+ 	list_for_each_entry_safe(req, tmp, &ctx->timeout_list, list)
+ 		io_kill_timeout(req);
+ 	spin_unlock_irq(&ctx->completion_lock);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  }
  
  static void io_commit_cqring(struct io_ring_ctx *ctx)
@@@ -632,9 -792,28 +710,32 @@@ static void __io_free_req(struct io_kio
  	kmem_cache_free(req_cachep, req);
  }
  
++<<<<<<< HEAD
 +static void io_req_link_next(struct io_kiocb *req)
 +{
++=======
+ static bool io_link_cancel_timeout(struct io_kiocb *req)
+ {
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 	int ret;
+ 
+ 	ret = hrtimer_try_to_cancel(&req->timeout.timer);
+ 	if (ret != -1) {
+ 		io_cqring_fill_event(req, -ECANCELED);
+ 		io_commit_cqring(ctx);
+ 		req->flags &= ~REQ_F_LINK;
+ 		io_put_req(req, NULL);
+ 		return true;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ static void io_req_link_next(struct io_kiocb *req, struct io_kiocb **nxtptr)
+ {
+ 	struct io_ring_ctx *ctx = req->ctx;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	struct io_kiocb *nxt;
 -	bool wake_ev = false;
  
  	/*
  	 * The list should never be empty when we are called here. But could
@@@ -650,10 -829,27 +751,30 @@@
  			nxt->flags |= REQ_F_LINK;
  		}
  
++<<<<<<< HEAD
 +		nxt->flags |= REQ_F_LINK_DONE;
 +		INIT_WORK(&nxt->work, io_sq_wq_submit_work);
 +		io_queue_async_work(req->ctx, nxt);
++=======
+ 		/*
+ 		 * If we're in async work, we can continue processing the chain
+ 		 * in this context instead of having to queue up new async work.
+ 		 */
+ 		if (req->flags & REQ_F_LINK_TIMEOUT) {
+ 			wake_ev = io_link_cancel_timeout(nxt);
+ 
+ 			/* we dropped this link, get next */
+ 			nxt = list_first_entry_or_null(&req->link_list,
+ 							struct io_kiocb, list);
+ 		} else if (nxtptr && current_work()) {
+ 			*nxtptr = nxt;
+ 			break;
+ 		} else {
+ 			io_queue_async_work(nxt);
+ 			break;
+ 		}
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	}
 -
 -	if (wake_ev)
 -		io_cqring_ev_posted(ctx);
  }
  
  /*
@@@ -665,15 -862,34 +786,27 @@@ static void io_fail_links(struct io_kio
  
  	while (!list_empty(&req->link_list)) {
  		link = list_first_entry(&req->link_list, struct io_kiocb, list);
 -		list_del_init(&link->list);
 +		list_del(&link->list);
  
++<<<<<<< HEAD
 +		io_cqring_add_event(req->ctx, link->user_data, -ECANCELED);
 +		__io_free_req(link);
++=======
+ 		trace_io_uring_fail_link(req, link);
+ 
+ 		if ((req->flags & REQ_F_LINK_TIMEOUT) &&
+ 		    link->submit.sqe->opcode == IORING_OP_LINK_TIMEOUT) {
+ 			io_link_cancel_timeout(link);
+ 		} else {
+ 			io_cqring_fill_event(link, -ECANCELED);
+ 			io_double_put_req(link);
+ 		}
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	}
 -
 -	io_commit_cqring(ctx);
 -	spin_unlock_irqrestore(&ctx->completion_lock, flags);
 -	io_cqring_ev_posted(ctx);
  }
  
 -static void io_free_req(struct io_kiocb *req, struct io_kiocb **nxt)
 +static void io_free_req(struct io_kiocb *req)
  {
 -	if (likely(!(req->flags & REQ_F_LINK))) {
 -		__io_free_req(req);
 -		return;
 -	}
 -
  	/*
  	 * If LINK is set, we have dependent requests in this chain. If we
  	 * didn't fail this request, queue the first one up, moving any other
@@@ -690,17 -917,65 +823,52 @@@
  	__io_free_req(req);
  }
  
 -/*
 - * Drop reference to request, return next in chain (if there is one) if this
 - * was the last reference to this request.
 - */
 -static struct io_kiocb *io_put_req_find_next(struct io_kiocb *req)
 +static void io_put_req(struct io_kiocb *req)
  {
 -	struct io_kiocb *nxt = NULL;
 -
  	if (refcount_dec_and_test(&req->refs))
 -		io_free_req(req, &nxt);
 -
 -	return nxt;
 +		io_free_req(req);
  }
  
 -static void io_put_req(struct io_kiocb *req, struct io_kiocb **nxtptr)
 +static unsigned io_cqring_events(struct io_cq_ring *ring)
  {
++<<<<<<< HEAD
++=======
+ 	struct io_kiocb *nxt;
+ 
+ 	nxt = io_put_req_find_next(req);
+ 	if (nxt) {
+ 		if (nxtptr)
+ 			*nxtptr = nxt;
+ 		else
+ 			io_queue_async_work(nxt);
+ 	}
+ }
+ 
+ static void io_double_put_req(struct io_kiocb *req)
+ {
+ 	/* drop both submit and complete references */
+ 	if (refcount_sub_and_test(2, &req->refs))
+ 		__io_free_req(req);
+ }
+ 
+ static unsigned io_cqring_events(struct io_ring_ctx *ctx, bool noflush)
+ {
+ 	struct io_rings *rings = ctx->rings;
+ 
+ 	/*
+ 	 * noflush == true is from the waitqueue handler, just ensure we wake
+ 	 * up the task, and the next invocation will flush the entries. We
+ 	 * cannot safely to it from here.
+ 	 */
+ 	if (noflush && !list_empty(&ctx->cq_overflow_list))
+ 		return -1U;
+ 
+ 	io_cqring_overflow_flush(ctx, false);
+ 
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	/* See comment at the top of this file */
  	smp_rmb();
 -	return READ_ONCE(rings->cq.tail) - READ_ONCE(rings->cq.head);
 -}
 -
 -static inline unsigned int io_sqring_entries(struct io_ring_ctx *ctx)
 -{
 -	struct io_rings *rings = ctx->rings;
 -
 -	/* make sure SQ entry isn't read before tail */
 -	return smp_load_acquire(&rings->sq.tail) - ctx->cached_sq_head;
 +	return READ_ONCE(ring->r.tail) - READ_ONCE(ring->r.head);
  }
  
  /*
@@@ -1679,11 -1951,12 +1847,12 @@@ static int io_poll_remove(struct io_kio
  	return 0;
  }
  
- static void io_poll_complete(struct io_ring_ctx *ctx, struct io_kiocb *req,
- 			     __poll_t mask)
+ static void io_poll_complete(struct io_kiocb *req, __poll_t mask)
  {
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 
  	req->poll.done = true;
 -	io_cqring_fill_event(req, mangle_poll(mask));
 +	io_cqring_fill_event(ctx, req->user_data, mangle_poll(mask));
  	io_commit_cqring(ctx);
  }
  
@@@ -1741,9 -2022,9 +1910,9 @@@ static int io_poll_wake(struct wait_que
  		spin_unlock_irqrestore(&ctx->completion_lock, flags);
  
  		io_cqring_ev_posted(ctx);
 -		io_put_req(req, NULL);
 +		io_put_req(req);
  	} else {
- 		io_queue_async_work(ctx, req);
+ 		io_queue_async_work(req);
  	}
  
  	return 1;
@@@ -1838,12 -2120,249 +2007,253 @@@ static int io_poll_add(struct io_kiocb 
  	return ipt.error;
  }
  
 -static enum hrtimer_restart io_timeout_fn(struct hrtimer *timer)
 +static int io_req_defer(struct io_ring_ctx *ctx, struct io_kiocb *req,
 +			const struct io_uring_sqe *sqe)
  {
++<<<<<<< HEAD
++=======
+ 	struct io_ring_ctx *ctx;
+ 	struct io_kiocb *req;
+ 	unsigned long flags;
+ 
+ 	req = container_of(timer, struct io_kiocb, timeout.timer);
+ 	ctx = req->ctx;
+ 	atomic_inc(&ctx->cq_timeouts);
+ 
+ 	spin_lock_irqsave(&ctx->completion_lock, flags);
+ 	/*
+ 	 * We could be racing with timeout deletion. If the list is empty,
+ 	 * then timeout lookup already found it and will be handling it.
+ 	 */
+ 	if (!list_empty(&req->list)) {
+ 		struct io_kiocb *prev;
+ 
+ 		/*
+ 		 * Adjust the reqs sequence before the current one because it
+ 		 * will consume a slot in the cq_ring and the the cq_tail
+ 		 * pointer will be increased, otherwise other timeout reqs may
+ 		 * return in advance without waiting for enough wait_nr.
+ 		 */
+ 		prev = req;
+ 		list_for_each_entry_continue_reverse(prev, &ctx->timeout_list, list)
+ 			prev->sequence++;
+ 		list_del_init(&req->list);
+ 	}
+ 
+ 	io_cqring_fill_event(req, -ETIME);
+ 	io_commit_cqring(ctx);
+ 	spin_unlock_irqrestore(&ctx->completion_lock, flags);
+ 
+ 	io_cqring_ev_posted(ctx);
+ 	if (req->flags & REQ_F_LINK)
+ 		req->flags |= REQ_F_FAIL_LINK;
+ 	io_put_req(req, NULL);
+ 	return HRTIMER_NORESTART;
+ }
+ 
+ /*
+  * Remove or update an existing timeout command
+  */
+ static int io_timeout_remove(struct io_kiocb *req,
+ 			     const struct io_uring_sqe *sqe)
+ {
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 	struct io_kiocb *treq;
+ 	int ret = -ENOENT;
+ 	__u64 user_data;
+ 	unsigned flags;
+ 
+ 	if (unlikely(ctx->flags & IORING_SETUP_IOPOLL))
+ 		return -EINVAL;
+ 	if (sqe->flags || sqe->ioprio || sqe->buf_index || sqe->len)
+ 		return -EINVAL;
+ 	flags = READ_ONCE(sqe->timeout_flags);
+ 	if (flags)
+ 		return -EINVAL;
+ 
+ 	user_data = READ_ONCE(sqe->addr);
+ 	spin_lock_irq(&ctx->completion_lock);
+ 	list_for_each_entry(treq, &ctx->timeout_list, list) {
+ 		if (user_data == treq->user_data) {
+ 			list_del_init(&treq->list);
+ 			ret = 0;
+ 			break;
+ 		}
+ 	}
+ 
+ 	/* didn't find timeout */
+ 	if (ret) {
+ fill_ev:
+ 		io_cqring_fill_event(req, ret);
+ 		io_commit_cqring(ctx);
+ 		spin_unlock_irq(&ctx->completion_lock);
+ 		io_cqring_ev_posted(ctx);
+ 		if (req->flags & REQ_F_LINK)
+ 			req->flags |= REQ_F_FAIL_LINK;
+ 		io_put_req(req, NULL);
+ 		return 0;
+ 	}
+ 
+ 	ret = hrtimer_try_to_cancel(&treq->timeout.timer);
+ 	if (ret == -1) {
+ 		ret = -EBUSY;
+ 		goto fill_ev;
+ 	}
+ 
+ 	io_cqring_fill_event(req, 0);
+ 	io_cqring_fill_event(treq, -ECANCELED);
+ 	io_commit_cqring(ctx);
+ 	spin_unlock_irq(&ctx->completion_lock);
+ 	io_cqring_ev_posted(ctx);
+ 
+ 	io_put_req(treq, NULL);
+ 	io_put_req(req, NULL);
+ 	return 0;
+ }
+ 
+ static int io_timeout(struct io_kiocb *req, const struct io_uring_sqe *sqe)
+ {
+ 	unsigned count;
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 	struct list_head *entry;
+ 	enum hrtimer_mode mode;
+ 	struct timespec64 ts;
+ 	unsigned span = 0;
+ 	unsigned flags;
+ 
+ 	if (unlikely(ctx->flags & IORING_SETUP_IOPOLL))
+ 		return -EINVAL;
+ 	if (sqe->flags || sqe->ioprio || sqe->buf_index || sqe->len != 1)
+ 		return -EINVAL;
+ 	flags = READ_ONCE(sqe->timeout_flags);
+ 	if (flags & ~IORING_TIMEOUT_ABS)
+ 		return -EINVAL;
+ 
+ 	if (get_timespec64(&ts, u64_to_user_ptr(sqe->addr)))
+ 		return -EFAULT;
+ 
+ 	if (flags & IORING_TIMEOUT_ABS)
+ 		mode = HRTIMER_MODE_ABS;
+ 	else
+ 		mode = HRTIMER_MODE_REL;
+ 
+ 	hrtimer_init(&req->timeout.timer, CLOCK_MONOTONIC, mode);
+ 
+ 	/*
+ 	 * sqe->off holds how many events that need to occur for this
+ 	 * timeout event to be satisfied.
+ 	 */
+ 	count = READ_ONCE(sqe->off);
+ 	if (!count)
+ 		count = 1;
+ 
+ 	req->sequence = ctx->cached_sq_head + count - 1;
+ 	/* reuse it to store the count */
+ 	req->submit.sequence = count;
+ 	req->flags |= REQ_F_TIMEOUT;
+ 
+ 	/*
+ 	 * Insertion sort, ensuring the first entry in the list is always
+ 	 * the one we need first.
+ 	 */
+ 	spin_lock_irq(&ctx->completion_lock);
+ 	list_for_each_prev(entry, &ctx->timeout_list) {
+ 		struct io_kiocb *nxt = list_entry(entry, struct io_kiocb, list);
+ 		unsigned nxt_sq_head;
+ 		long long tmp, tmp_nxt;
+ 
+ 		/*
+ 		 * Since cached_sq_head + count - 1 can overflow, use type long
+ 		 * long to store it.
+ 		 */
+ 		tmp = (long long)ctx->cached_sq_head + count - 1;
+ 		nxt_sq_head = nxt->sequence - nxt->submit.sequence + 1;
+ 		tmp_nxt = (long long)nxt_sq_head + nxt->submit.sequence - 1;
+ 
+ 		/*
+ 		 * cached_sq_head may overflow, and it will never overflow twice
+ 		 * once there is some timeout req still be valid.
+ 		 */
+ 		if (ctx->cached_sq_head < nxt_sq_head)
+ 			tmp += UINT_MAX;
+ 
+ 		if (tmp > tmp_nxt)
+ 			break;
+ 
+ 		/*
+ 		 * Sequence of reqs after the insert one and itself should
+ 		 * be adjusted because each timeout req consumes a slot.
+ 		 */
+ 		span++;
+ 		nxt->sequence++;
+ 	}
+ 	req->sequence -= span;
+ 	list_add(&req->list, entry);
+ 	req->timeout.timer.function = io_timeout_fn;
+ 	hrtimer_start(&req->timeout.timer, timespec64_to_ktime(ts), mode);
+ 	spin_unlock_irq(&ctx->completion_lock);
+ 	return 0;
+ }
+ 
+ static bool io_cancel_cb(struct io_wq_work *work, void *data)
+ {
+ 	struct io_kiocb *req = container_of(work, struct io_kiocb, work);
+ 
+ 	return req->user_data == (unsigned long) data;
+ }
+ 
+ static int io_async_cancel_one(struct io_ring_ctx *ctx, void *sqe_addr)
+ {
+ 	enum io_wq_cancel cancel_ret;
+ 	int ret = 0;
+ 
+ 	cancel_ret = io_wq_cancel_cb(ctx->io_wq, io_cancel_cb, sqe_addr);
+ 	switch (cancel_ret) {
+ 	case IO_WQ_CANCEL_OK:
+ 		ret = 0;
+ 		break;
+ 	case IO_WQ_CANCEL_RUNNING:
+ 		ret = -EALREADY;
+ 		break;
+ 	case IO_WQ_CANCEL_NOTFOUND:
+ 		ret = -ENOENT;
+ 		break;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static int io_async_cancel(struct io_kiocb *req, const struct io_uring_sqe *sqe,
+ 			   struct io_kiocb **nxt)
+ {
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 	void *sqe_addr;
+ 	int ret;
+ 
+ 	if (unlikely(ctx->flags & IORING_SETUP_IOPOLL))
+ 		return -EINVAL;
+ 	if (sqe->flags || sqe->ioprio || sqe->off || sqe->len ||
+ 	    sqe->cancel_flags)
+ 		return -EINVAL;
+ 
+ 	sqe_addr = (void *) (unsigned long) READ_ONCE(sqe->addr);
+ 	ret = io_async_cancel_one(ctx, sqe_addr);
+ 
+ 	if (ret < 0 && (req->flags & REQ_F_LINK))
+ 		req->flags |= REQ_F_FAIL_LINK;
+ 	io_cqring_add_event(req, ret);
+ 	io_put_req(req, nxt);
+ 	return 0;
+ }
+ 
+ static int io_req_defer(struct io_kiocb *req)
+ {
+ 	const struct io_uring_sqe *sqe = req->submit.sqe;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	struct io_uring_sqe *sqe_copy;
+ 	struct io_ring_ctx *ctx = req->ctx;
  
- 	if (!io_sequence_defer(ctx, req) && list_empty(&ctx->defer_list))
+ 	if (!io_sequence_defer(req) && list_empty(&ctx->defer_list))
  		return 0;
  
  	sqe_copy = kmalloc(sizeof(*sqe_copy), GFP_KERNEL);
@@@ -1866,12 -2385,12 +2276,21 @@@
  	return -EIOCBQUEUED;
  }
  
++<<<<<<< HEAD
 +static int __io_submit_sqe(struct io_ring_ctx *ctx, struct io_kiocb *req,
 +			   const struct sqe_submit *s, bool force_nonblock)
 +{
 +	int ret, opcode;
 +
 +	req->user_data = READ_ONCE(s->sqe->user_data);
++=======
+ static int __io_submit_sqe(struct io_kiocb *req, struct io_kiocb **nxt,
+ 			   bool force_nonblock)
+ {
+ 	int ret, opcode;
+ 	struct sqe_submit *s = &req->submit;
+ 	struct io_ring_ctx *ctx = req->ctx;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  
  	opcode = READ_ONCE(s->sqe->opcode);
  	switch (opcode) {
@@@ -1935,177 -2466,55 +2354,201 @@@
  	return 0;
  }
  
 -static void io_wq_submit_work(struct io_wq_work **workptr)
 +static struct async_list *io_async_list_from_sqe(struct io_ring_ctx *ctx,
 +						 const struct io_uring_sqe *sqe)
 +{
 +	switch (sqe->opcode) {
 +	case IORING_OP_READV:
 +	case IORING_OP_READ_FIXED:
 +		return &ctx->pending_async[READ];
 +	case IORING_OP_WRITEV:
 +	case IORING_OP_WRITE_FIXED:
 +		return &ctx->pending_async[WRITE];
 +	default:
 +		return NULL;
 +	}
 +}
 +
 +static inline bool io_sqe_needs_user(const struct io_uring_sqe *sqe)
 +{
 +	u8 opcode = READ_ONCE(sqe->opcode);
 +
 +	return !(opcode == IORING_OP_READ_FIXED ||
 +		 opcode == IORING_OP_WRITE_FIXED);
 +}
 +
 +static void io_sq_wq_submit_work(struct work_struct *work)
  {
 -	struct io_wq_work *work = *workptr;
  	struct io_kiocb *req = container_of(work, struct io_kiocb, work);
++<<<<<<< HEAD
 +	struct io_ring_ctx *ctx = req->ctx;
 +	struct mm_struct *cur_mm = NULL;
 +	struct async_list *async_list;
 +	LIST_HEAD(req_list);
 +	mm_segment_t old_fs;
 +	int ret;
++=======
+ 	struct sqe_submit *s = &req->submit;
+ 	const struct io_uring_sqe *sqe = s->sqe;
+ 	struct io_kiocb *nxt = NULL;
+ 	int ret = 0;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
 +
 +	async_list = io_async_list_from_sqe(ctx, req->submit.sqe);
 +restart:
 +	do {
 +		struct sqe_submit *s = &req->submit;
 +		const struct io_uring_sqe *sqe = s->sqe;
 +		unsigned int flags = req->flags;
 +
 +		/* Ensure we clear previously set non-block flag */
 +		req->rw.ki_flags &= ~IOCB_NOWAIT;
 +
++<<<<<<< HEAD
 +		ret = 0;
 +		if (io_sqe_needs_user(sqe) && !cur_mm) {
 +			if (!mmget_not_zero(ctx->sqo_mm)) {
 +				ret = -EFAULT;
 +			} else {
 +				cur_mm = ctx->sqo_mm;
 +				use_mm(cur_mm);
 +				old_fs = get_fs();
 +				set_fs(USER_DS);
 +			}
 +		}
 +
 +		if (!ret) {
 +			s->has_user = cur_mm != NULL;
 +			s->needs_lock = true;
 +			do {
 +				ret = __io_submit_sqe(ctx, req, s, false);
 +				/*
 +				 * We can get EAGAIN for polled IO even though
 +				 * we're forcing a sync submission from here,
 +				 * since we can't wait for request slots on the
 +				 * block side.
 +				 */
 +				if (ret != -EAGAIN)
 +					break;
 +				cond_resched();
 +			} while (1);
 +		}
 +
 +		/* drop submission reference */
 +		io_put_req(req);
 +
 +		if (ret) {
 +			io_cqring_add_event(ctx, sqe->user_data, ret);
 +			io_put_req(req);
 +		}
 +
 +		/* async context always use a copy of the sqe */
 +		kfree(sqe);
 +
 +		/* req from defer and link list needn't decrease async cnt */
 +		if (flags & (REQ_F_IO_DRAINED | REQ_F_LINK_DONE))
 +			goto out;
 +
 +		if (!async_list)
 +			break;
 +		if (!list_empty(&req_list)) {
 +			req = list_first_entry(&req_list, struct io_kiocb,
 +						list);
 +			list_del(&req->list);
 +			continue;
 +		}
 +		if (list_empty(&async_list->list))
 +			break;
  
 -	/* Ensure we clear previously set non-block flag */
 -	req->rw.ki_flags &= ~IOCB_NOWAIT;
 +		req = NULL;
 +		spin_lock(&async_list->lock);
 +		if (list_empty(&async_list->list)) {
 +			spin_unlock(&async_list->lock);
 +			break;
 +		}
 +		list_splice_init(&async_list->list, &req_list);
 +		spin_unlock(&async_list->lock);
  
 -	if (work->flags & IO_WQ_WORK_CANCEL)
 -		ret = -ECANCELED;
 +		req = list_first_entry(&req_list, struct io_kiocb, list);
 +		list_del(&req->list);
 +	} while (req);
  
 +	/*
 +	 * Rare case of racing with a submitter. If we find the count has
 +	 * dropped to zero AND we have pending work items, then restart
 +	 * the processing. This is a tiny race window.
 +	 */
 +	if (async_list) {
 +		ret = atomic_dec_return(&async_list->cnt);
 +		while (!ret && !list_empty(&async_list->list)) {
 +			spin_lock(&async_list->lock);
 +			atomic_inc(&async_list->cnt);
 +			list_splice_init(&async_list->list, &req_list);
 +			spin_unlock(&async_list->lock);
 +
 +			if (!list_empty(&req_list)) {
 +				req = list_first_entry(&req_list,
 +							struct io_kiocb, list);
 +				list_del(&req->list);
 +				goto restart;
 +			}
 +			ret = atomic_dec_return(&async_list->cnt);
 +		}
++=======
+ 	if (!ret) {
+ 		s->has_user = (work->flags & IO_WQ_WORK_HAS_MM) != 0;
+ 		s->in_async = true;
+ 		do {
+ 			ret = __io_submit_sqe(req, &nxt, false);
+ 			/*
+ 			 * We can get EAGAIN for polled IO even though we're
+ 			 * forcing a sync submission from here, since we can't
+ 			 * wait for request slots on the block side.
+ 			 */
+ 			if (ret != -EAGAIN)
+ 				break;
+ 			cond_resched();
+ 		} while (1);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	}
  
 -	/* drop submission reference */
 -	io_put_req(req, NULL);
 -
 -	if (ret) {
 -		if (req->flags & REQ_F_LINK)
 -			req->flags |= REQ_F_FAIL_LINK;
 -		io_cqring_add_event(req, ret);
 -		io_put_req(req, NULL);
 +out:
 +	if (cur_mm) {
 +		set_fs(old_fs);
 +		unuse_mm(cur_mm);
 +		mmput(cur_mm);
  	}
 +}
 +
 +/*
 + * See if we can piggy back onto previously submitted work, that is still
 + * running. We currently only allow this if the new request is sequential
 + * to the previous one we punted.
 + */
 +static bool io_add_to_prev_work(struct async_list *list, struct io_kiocb *req)
 +{
 +	bool ret;
  
 -	/* async context always use a copy of the sqe */
 -	kfree(sqe);
 +	if (!list)
 +		return false;
 +	if (!(req->flags & REQ_F_SEQ_PREV))
 +		return false;
 +	if (!atomic_read(&list->cnt))
 +		return false;
  
 -	/* if a dependent link is ready, pass it back */
 -	if (!ret && nxt) {
 -		io_prep_async_work(nxt);
 -		*workptr = &nxt->work;
 +	ret = true;
 +	spin_lock(&list->lock);
 +	list_add_tail(&req->list, &list->list);
 +	/*
 +	 * Ensure we see a simultaneous modification from io_sq_wq_submit_work()
 +	 */
 +	smp_mb();
 +	if (!atomic_read(&list->cnt)) {
 +		list_del_init(&req->list);
 +		ret = false;
  	}
 +	spin_unlock(&list->lock);
 +	return ret;
  }
  
  static bool io_op_needs_file(const struct io_uring_sqe *sqe)
@@@ -2121,9 -2530,19 +2564,25 @@@
  	}
  }
  
++<<<<<<< HEAD
 +static int io_req_set_file(struct io_ring_ctx *ctx, const struct sqe_submit *s,
 +			   struct io_submit_state *state, struct io_kiocb *req)
 +{
++=======
+ static inline struct file *io_file_from_index(struct io_ring_ctx *ctx,
+ 					      int index)
+ {
+ 	struct fixed_file_table *table;
+ 
+ 	table = &ctx->file_table[index >> IORING_FILE_TABLE_SHIFT];
+ 	return table->files[index & IORING_FILE_TABLE_MASK];
+ }
+ 
+ static int io_req_set_file(struct io_submit_state *state, struct io_kiocb *req)
+ {
+ 	struct sqe_submit *s = &req->submit;
+ 	struct io_ring_ctx *ctx = req->ctx;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	unsigned flags;
  	int fd;
  
@@@ -2162,33 -2582,164 +2621,189 @@@
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int __io_queue_sqe(struct io_ring_ctx *ctx, struct io_kiocb *req,
 +			struct sqe_submit *s, bool force_nonblock)
 +{
 +	int ret;
 +
 +	ret = __io_submit_sqe(ctx, req, s, force_nonblock);
 +	if (ret == -EAGAIN && !(req->flags & REQ_F_NOWAIT)) {
++=======
+ static int io_grab_files(struct io_kiocb *req)
+ {
+ 	int ret = -EBADF;
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 
+ 	rcu_read_lock();
+ 	spin_lock_irq(&ctx->inflight_lock);
+ 	/*
+ 	 * We use the f_ops->flush() handler to ensure that we can flush
+ 	 * out work accessing these files if the fd is closed. Check if
+ 	 * the fd has changed since we started down this path, and disallow
+ 	 * this operation if it has.
+ 	 */
+ 	if (fcheck(req->submit.ring_fd) == req->submit.ring_file) {
+ 		list_add(&req->inflight_entry, &ctx->inflight_list);
+ 		req->flags |= REQ_F_INFLIGHT;
+ 		req->work.files = current->files;
+ 		ret = 0;
+ 	}
+ 	spin_unlock_irq(&ctx->inflight_lock);
+ 	rcu_read_unlock();
+ 
+ 	return ret;
+ }
+ 
+ static enum hrtimer_restart io_link_timeout_fn(struct hrtimer *timer)
+ {
+ 	struct io_kiocb *req = container_of(timer, struct io_kiocb,
+ 						timeout.timer);
+ 	struct io_ring_ctx *ctx = req->ctx;
+ 	struct io_kiocb *prev = NULL;
+ 	unsigned long flags;
+ 	int ret = -ETIME;
+ 
+ 	spin_lock_irqsave(&ctx->completion_lock, flags);
+ 
+ 	/*
+ 	 * We don't expect the list to be empty, that will only happen if we
+ 	 * race with the completion of the linked work.
+ 	 */
+ 	if (!list_empty(&req->list)) {
+ 		prev = list_entry(req->list.prev, struct io_kiocb, link_list);
+ 		list_del_init(&req->list);
+ 	}
+ 
+ 	spin_unlock_irqrestore(&ctx->completion_lock, flags);
+ 
+ 	if (prev) {
+ 		void *user_data = (void *) (unsigned long) prev->user_data;
+ 		ret = io_async_cancel_one(ctx, user_data);
+ 	}
+ 
+ 	io_cqring_add_event(req, ret);
+ 	io_put_req(req, NULL);
+ 	return HRTIMER_NORESTART;
+ }
+ 
+ static int io_queue_linked_timeout(struct io_kiocb *req, struct io_kiocb *nxt)
+ {
+ 	const struct io_uring_sqe *sqe = nxt->submit.sqe;
+ 	enum hrtimer_mode mode;
+ 	struct timespec64 ts;
+ 	int ret = -EINVAL;
+ 
+ 	if (sqe->ioprio || sqe->buf_index || sqe->len != 1 || sqe->off)
+ 		goto err;
+ 	if (sqe->timeout_flags & ~IORING_TIMEOUT_ABS)
+ 		goto err;
+ 	if (get_timespec64(&ts, u64_to_user_ptr(sqe->addr))) {
+ 		ret = -EFAULT;
+ 		goto err;
+ 	}
+ 
+ 	req->flags |= REQ_F_LINK_TIMEOUT;
+ 
+ 	if (sqe->timeout_flags & IORING_TIMEOUT_ABS)
+ 		mode = HRTIMER_MODE_ABS;
+ 	else
+ 		mode = HRTIMER_MODE_REL;
+ 	hrtimer_init(&nxt->timeout.timer, CLOCK_MONOTONIC, mode);
+ 	nxt->timeout.timer.function = io_link_timeout_fn;
+ 	hrtimer_start(&nxt->timeout.timer, timespec64_to_ktime(ts), mode);
+ 	ret = 0;
+ err:
+ 	/* drop submission reference */
+ 	io_put_req(nxt, NULL);
+ 
+ 	if (ret) {
+ 		struct io_ring_ctx *ctx = req->ctx;
+ 
+ 		/*
+ 		 * Break the link and fail linked timeout, parent will get
+ 		 * failed by the regular submission path.
+ 		 */
+ 		list_del(&nxt->list);
+ 		io_cqring_fill_event(nxt, ret);
+ 		trace_io_uring_fail_link(req, nxt);
+ 		io_commit_cqring(ctx);
+ 		io_put_req(nxt, NULL);
+ 		ret = -ECANCELED;
+ 	}
+ 
+ 	return ret;
+ }
+ 
+ static inline struct io_kiocb *io_get_linked_timeout(struct io_kiocb *req)
+ {
+ 	struct io_kiocb *nxt;
+ 
+ 	if (!(req->flags & REQ_F_LINK))
+ 		return NULL;
+ 
+ 	nxt = list_first_entry_or_null(&req->link_list, struct io_kiocb, list);
+ 	if (nxt && nxt->submit.sqe->opcode == IORING_OP_LINK_TIMEOUT)
+ 		return nxt;
+ 
+ 	return NULL;
+ }
+ 
+ static int __io_queue_sqe(struct io_kiocb *req)
+ {
+ 	struct io_kiocb *nxt;
+ 	int ret;
+ 
+ 	nxt = io_get_linked_timeout(req);
+ 	if (unlikely(nxt)) {
+ 		ret = io_queue_linked_timeout(req, nxt);
+ 		if (ret)
+ 			goto err;
+ 	}
+ 
+ 	ret = __io_submit_sqe(req, NULL, true);
+ 
+ 	/*
+ 	 * We async punt it if the file wasn't marked NOWAIT, or if the file
+ 	 * doesn't support non-blocking read/write attempts
+ 	 */
+ 	if (ret == -EAGAIN && (!(req->flags & REQ_F_NOWAIT) ||
+ 	    (req->flags & REQ_F_MUST_PUNT))) {
+ 		struct sqe_submit *s = &req->submit;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  		struct io_uring_sqe *sqe_copy;
  
  		sqe_copy = kmemdup(s->sqe, sizeof(*sqe_copy), GFP_KERNEL);
  		if (sqe_copy) {
 +			struct async_list *list;
 +
  			s->sqe = sqe_copy;
++<<<<<<< HEAD
 +			memcpy(&req->submit, s, sizeof(*s));
 +			list = io_async_list_from_sqe(ctx, s->sqe);
 +			if (!io_add_to_prev_work(list, req)) {
 +				if (list)
 +					atomic_inc(&list->cnt);
 +				INIT_WORK(&req->work, io_sq_wq_submit_work);
 +				io_queue_async_work(ctx, req);
++=======
+ 			if (req->work.flags & IO_WQ_WORK_NEEDS_FILES) {
+ 				ret = io_grab_files(req);
+ 				if (ret) {
+ 					kfree(sqe_copy);
+ 					goto err;
+ 				}
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  			}
  
  			/*
  			 * Queued up for async execution, worker will release
  			 * submit reference when the iocb is actually submitted.
  			 */
++<<<<<<< HEAD
++=======
+ 			io_queue_async_work(req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  			return 0;
  		}
  	}
@@@ -2207,32 -2759,30 +2822,52 @@@
  	return ret;
  }
  
++<<<<<<< HEAD
 +static int io_queue_sqe(struct io_ring_ctx *ctx, struct io_kiocb *req,
 +			struct sqe_submit *s, bool force_nonblock)
 +{
 +	int ret;
 +
 +	ret = io_req_defer(ctx, req, s->sqe);
++=======
+ static int io_queue_sqe(struct io_kiocb *req)
+ {
+ 	int ret;
+ 
+ 	ret = io_req_defer(req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	if (ret) {
  		if (ret != -EIOCBQUEUED) {
 -			io_cqring_add_event(req, ret);
 -			io_double_put_req(req);
 +			io_free_req(req);
 +			io_cqring_add_event(ctx, s->sqe->user_data, ret);
  		}
  		return 0;
  	}
  
++<<<<<<< HEAD
 +	return __io_queue_sqe(ctx, req, s, force_nonblock);
 +}
 +
 +static int io_queue_link_head(struct io_ring_ctx *ctx, struct io_kiocb *req,
 +			      struct sqe_submit *s, struct io_kiocb *shadow,
 +			      bool force_nonblock)
++=======
+ 	return __io_queue_sqe(req);
+ }
+ 
+ static int io_queue_link_head(struct io_kiocb *req, struct io_kiocb *shadow)
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  {
  	int ret;
  	int need_submit = false;
+ 	struct io_ring_ctx *ctx = req->ctx;
  
  	if (!shadow)
++<<<<<<< HEAD
 +		return io_queue_sqe(ctx, req, s, force_nonblock);
++=======
+ 		return io_queue_sqe(req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  
  	/*
  	 * Mark the first IO in link list as DRAIN, let all the following
@@@ -2240,12 -2790,12 +2875,16 @@@
  	 * list.
  	 */
  	req->flags |= REQ_F_IO_DRAIN;
++<<<<<<< HEAD
 +	ret = io_req_defer(ctx, req, s->sqe);
++=======
+ 	ret = io_req_defer(req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	if (ret) {
  		if (ret != -EIOCBQUEUED) {
 -			io_cqring_add_event(req, ret);
 -			io_double_put_req(req);
 +			io_free_req(req);
  			__io_free_req(shadow);
 +			io_cqring_add_event(ctx, s->sqe->user_data, ret);
  			return 0;
  		}
  	} else {
@@@ -2262,39 -2813,34 +2901,56 @@@
  	spin_unlock_irq(&ctx->completion_lock);
  
  	if (need_submit)
++<<<<<<< HEAD
 +		return __io_queue_sqe(ctx, req, s, force_nonblock);
++=======
+ 		return __io_queue_sqe(req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  
  	return 0;
  }
  
  #define SQE_VALID_FLAGS	(IOSQE_FIXED_FILE|IOSQE_IO_DRAIN|IOSQE_IO_LINK)
  
++<<<<<<< HEAD
 +static void io_submit_sqe(struct io_ring_ctx *ctx, struct sqe_submit *s,
 +			  struct io_submit_state *state, struct io_kiocb **link,
 +			  bool force_nonblock)
 +{
 +	struct io_uring_sqe *sqe_copy;
 +	struct io_kiocb *req;
++=======
+ static void io_submit_sqe(struct io_kiocb *req, struct io_submit_state *state,
+ 			  struct io_kiocb **link)
+ {
+ 	struct io_uring_sqe *sqe_copy;
+ 	struct sqe_submit *s = &req->submit;
+ 	struct io_ring_ctx *ctx = req->ctx;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	int ret;
  
 -	req->user_data = s->sqe->user_data;
 -
  	/* enforce forwards compatibility on users */
  	if (unlikely(s->sqe->flags & ~SQE_VALID_FLAGS)) {
  		ret = -EINVAL;
 -		goto err_req;
 +		goto err;
  	}
  
++<<<<<<< HEAD
 +	req = io_get_req(ctx, state);
 +	if (unlikely(!req)) {
 +		ret = -EAGAIN;
 +		goto err;
 +	}
 +
 +	ret = io_req_set_file(ctx, s, state, req);
++=======
+ 	ret = io_req_set_file(state, req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	if (unlikely(ret)) {
  err_req:
 -		io_cqring_add_event(req, ret);
 -		io_double_put_req(req);
 +		io_free_req(req);
 +err:
 +		io_cqring_add_event(ctx, s->sqe->user_data, ret);
  		return;
  	}
  
@@@ -2322,11 -2866,14 +2978,15 @@@
  	} else if (s->sqe->flags & IOSQE_IO_LINK) {
  		req->flags |= REQ_F_LINK;
  
 +		memcpy(&req->submit, s, sizeof(*s));
  		INIT_LIST_HEAD(&req->link_list);
  		*link = req;
 -	} else if (READ_ONCE(s->sqe->opcode) == IORING_OP_LINK_TIMEOUT) {
 -		/* Only valid as a linked SQE */
 -		ret = -EINVAL;
 -		goto err_req;
  	} else {
++<<<<<<< HEAD
 +		io_queue_sqe(ctx, req, s, force_nonblock);
++=======
+ 		io_queue_sqe(req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	}
  }
  
@@@ -2447,20 -3015,29 +3107,45 @@@ static int io_submit_sqes(struct io_rin
  		}
  
  out:
++<<<<<<< HEAD
 +		if (unlikely(mm_fault)) {
 +			io_cqring_add_event(ctx, sqes[i].sqe->user_data,
 +						-EFAULT);
 +		} else {
 +			sqes[i].has_user = has_user;
 +			sqes[i].needs_lock = true;
 +			sqes[i].needs_fixed_file = true;
 +			io_submit_sqe(ctx, &sqes[i], statep, &link, true);
 +			submitted++;
++=======
+ 		req->submit.ring_file = ring_file;
+ 		req->submit.ring_fd = ring_fd;
+ 		req->submit.has_user = *mm != NULL;
+ 		req->submit.in_async = async;
+ 		req->submit.needs_fixed_file = async;
+ 		trace_io_uring_submit_sqe(ctx, req->submit.sqe->user_data,
+ 					  true, async);
+ 		io_submit_sqe(req, statep, &link);
+ 		submitted++;
+ 
+ 		/*
+ 		 * If previous wasn't linked and we have a linked command,
+ 		 * that's the end of the chain. Submit the previous link.
+ 		 */
+ 		if (!(sqe_flags & IOSQE_IO_LINK) && link) {
+ 			io_queue_link_head(link, shadow_req);
+ 			link = NULL;
+ 			shadow_req = NULL;
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  		}
  	}
  
  	if (link)
++<<<<<<< HEAD
 +		io_queue_link_head(ctx, link, &link->submit, shadow_req, true);
++=======
+ 		io_queue_link_head(link, shadow_req);
++>>>>>>> a197f664a0db (io_uring: remove passed in 'ctx' function parameter ctx if possible)
  	if (statep)
  		io_submit_state_end(&state);
  
* Unmerged path fs/io_uring.c
