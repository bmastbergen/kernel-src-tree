libperf: Add perf_thread_map__get()/perf_thread_map__put()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 7836e52e518b5e3fd695850f1d4081f756f58406
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7836e52e.failed

Move the following functions:

  thread_map__get()
  thread_map__put()
  thread_map__comm()

to libperf with the following names:

  perf_thread_map__get()
  perf_thread_map__put()
  perf_thread_map__comm()

Add the perf_thread_map__comm() function for it to work/compile.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-34-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7836e52e518b5e3fd695850f1d4081f756f58406)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/include/perf/threadmap.h
#	tools/perf/lib/libperf.map
#	tools/perf/lib/threadmap.c
#	tools/perf/tests/code-reading.c
#	tools/perf/tests/event-times.c
#	tools/perf/tests/keep-tracking.c
#	tools/perf/tests/sw-clock.c
#	tools/perf/tests/switch-tracking.c
#	tools/perf/tests/task-exit.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evsel.c
#	tools/perf/util/thread_map.c
#	tools/perf/util/thread_map.h
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,c4f611010ccc..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,14 +1,17 @@@
  LIBPERF_0.0.1 {
  	global:
  		libperf_set_print;
++<<<<<<< HEAD
++=======
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  	local:
  		*;
  };
diff --cc tools/perf/tests/code-reading.c
index aa6df122b175,7b26be1dfb47..000000000000
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@@ -655,10 -655,10 +655,15 @@@ static int do_test_code_reading(bool tr
  				 * and will be freed by following perf_evlist__set_maps
  				 * call. Getting refference to keep them alive.
  				 */
++<<<<<<< HEAD
 +				cpu_map__get(cpus);
 +				thread_map__get(threads);
++=======
+ 				perf_cpu_map__get(cpus);
+ 				perf_thread_map__get(threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  				perf_evlist__set_maps(evlist, NULL, NULL);
 -				evlist__delete(evlist);
 +				perf_evlist__delete(evlist);
  				evlist = NULL;
  				continue;
  			}
@@@ -703,10 -703,10 +708,15 @@@ out_put
  out_err:
  
  	if (evlist) {
 -		evlist__delete(evlist);
 +		perf_evlist__delete(evlist);
  	} else {
++<<<<<<< HEAD
 +		cpu_map__put(cpus);
 +		thread_map__put(threads);
++=======
+ 		perf_cpu_map__put(cpus);
+ 		perf_thread_map__put(threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  	}
  	machine__delete_threads(machine);
  	machine__delete(machine);
diff --cc tools/perf/tests/event-times.c
index 1a2686f1fcf0,9238180416b0..000000000000
--- a/tools/perf/tests/event-times.c
+++ b/tools/perf/tests/event-times.c
@@@ -76,14 -76,14 +76,19 @@@ static int attach__current_disabled(str
  		return err;
  	}
  
++<<<<<<< HEAD
 +	thread_map__put(threads);
 +	return perf_evsel__enable(evsel) == 0 ? TEST_OK : TEST_FAIL;
++=======
+ 	perf_thread_map__put(threads);
+ 	return evsel__enable(evsel) == 0 ? TEST_OK : TEST_FAIL;
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  }
  
 -static int attach__current_enabled(struct evlist *evlist)
 +static int attach__current_enabled(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel = perf_evlist__last(evlist);
 -	struct perf_thread_map *threads;
 +	struct perf_evsel *evsel = perf_evlist__last(evlist);
 +	struct thread_map *threads;
  	int err;
  
  	pr_debug("attaching to current thread as enabled\n");
diff --cc tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e,830fb3d7ea2e..000000000000
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@@ -146,11 -146,11 +146,16 @@@ int test__keep_tracking(struct test *te
  
  out_err:
  	if (evlist) {
 -		evlist__disable(evlist);
 -		evlist__delete(evlist);
 +		perf_evlist__disable(evlist);
 +		perf_evlist__delete(evlist);
  	} else {
++<<<<<<< HEAD
 +		cpu_map__put(cpus);
 +		thread_map__put(threads);
++=======
+ 		perf_cpu_map__put(cpus);
+ 		perf_thread_map__put(threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  	}
  
  	return err;
diff --cc tools/perf/tests/sw-clock.c
index f9490b237893,2decda2d4c17..000000000000
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@@ -125,10 -125,10 +125,15 @@@ out_init
  	}
  
  out_free_maps:
++<<<<<<< HEAD
 +	cpu_map__put(cpus);
 +	thread_map__put(threads);
++=======
+ 	perf_cpu_map__put(cpus);
+ 	perf_thread_map__put(threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  out_delete_evlist:
 -	evlist__delete(evlist);
 +	perf_evlist__delete(evlist);
  	return err;
  }
  
diff --cc tools/perf/tests/switch-tracking.c
index 6cdab5f4812a,0935a5a1ecaa..000000000000
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@@ -566,11 -566,11 +566,16 @@@ int test__switch_tracking(struct test *
  	}
  out:
  	if (evlist) {
 -		evlist__disable(evlist);
 -		evlist__delete(evlist);
 +		perf_evlist__disable(evlist);
 +		perf_evlist__delete(evlist);
  	} else {
++<<<<<<< HEAD
 +		cpu_map__put(cpus);
 +		thread_map__put(threads);
++=======
+ 		perf_cpu_map__put(cpus);
+ 		perf_thread_map__put(threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  	}
  
  	return err;
diff --cc tools/perf/tests/task-exit.c
index e92fa6029ac7,24257285844b..000000000000
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@@ -135,9 -135,9 +135,14 @@@ out_init
  	}
  
  out_free_maps:
++<<<<<<< HEAD
 +	cpu_map__put(cpus);
 +	thread_map__put(threads);
++=======
+ 	perf_cpu_map__put(cpus);
+ 	perf_thread_map__put(threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  out_delete_evlist:
 -	evlist__delete(evlist);
 +	perf_evlist__delete(evlist);
  	return err;
  }
diff --cc tools/perf/util/evlist.c
index 4739b7914374,38a3c6d16b4b..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -141,9 -140,9 +141,15 @@@ void perf_evlist__delete(struct perf_ev
  		return;
  
  	perf_evlist__munmap(evlist);
++<<<<<<< HEAD
 +	perf_evlist__close(evlist);
 +	cpu_map__put(evlist->cpus);
 +	thread_map__put(evlist->threads);
++=======
+ 	evlist__close(evlist);
+ 	perf_cpu_map__put(evlist->cpus);
+ 	perf_thread_map__put(evlist->threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  	evlist->cpus = NULL;
  	evlist->threads = NULL;
  	perf_evlist__purge(evlist);
@@@ -159,20 -158,20 +165,20 @@@ static void __perf_evlist__propagate_ma
  	 * keep it, if there's no target cpu list defined.
  	 */
  	if (!evsel->own_cpus || evlist->has_user_cpus) {
 -		perf_cpu_map__put(evsel->cpus);
 -		evsel->cpus = perf_cpu_map__get(evlist->cpus);
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evlist->cpus);
  	} else if (evsel->cpus != evsel->own_cpus) {
 -		perf_cpu_map__put(evsel->cpus);
 -		evsel->cpus = perf_cpu_map__get(evsel->own_cpus);
 +		cpu_map__put(evsel->cpus);
 +		evsel->cpus = cpu_map__get(evsel->own_cpus);
  	}
  
- 	thread_map__put(evsel->threads);
- 	evsel->threads = thread_map__get(evlist->threads);
+ 	perf_thread_map__put(evsel->threads);
+ 	evsel->threads = perf_thread_map__get(evlist->threads);
  }
  
 -static void perf_evlist__propagate_maps(struct evlist *evlist)
 +static void perf_evlist__propagate_maps(struct perf_evlist *evlist)
  {
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(evlist, evsel)
  		__perf_evlist__propagate_maps(evlist, evsel);
diff --cc tools/perf/util/evsel.c
index e99257f738ba,652e53279b28..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1326,9 -1325,9 +1326,15 @@@ void perf_evsel__exit(struct perf_evse
  	perf_evsel__free_id(evsel);
  	perf_evsel__free_config_terms(evsel);
  	cgroup__put(evsel->cgrp);
++<<<<<<< HEAD
 +	cpu_map__put(evsel->cpus);
 +	cpu_map__put(evsel->own_cpus);
 +	thread_map__put(evsel->threads);
++=======
+ 	perf_cpu_map__put(evsel->cpus);
+ 	perf_cpu_map__put(evsel->own_cpus);
+ 	perf_thread_map__put(evsel->threads);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  	zfree(&evsel->group_name);
  	zfree(&evsel->name);
  	perf_evsel__object.fini(evsel);
diff --cc tools/perf/util/thread_map.c
index 5b3511f2b6b1,c58385ea05be..000000000000
--- a/tools/perf/util/thread_map.c
+++ b/tools/perf/util/thread_map.c
@@@ -339,33 -304,7 +339,37 @@@ struct thread_map *thread_map__new_str(
  	return thread_map__new_by_tid_str(tid);
  }
  
++<<<<<<< HEAD
 +static void thread_map__delete(struct thread_map *threads)
 +{
 +	if (threads) {
 +		int i;
 +
 +		WARN_ONCE(refcount_read(&threads->refcnt) != 0,
 +			  "thread map refcnt unbalanced\n");
 +		for (i = 0; i < threads->nr; i++)
 +			free(thread_map__comm(threads, i));
 +		free(threads);
 +	}
 +}
 +
 +struct thread_map *thread_map__get(struct thread_map *map)
 +{
 +	if (map)
 +		refcount_inc(&map->refcnt);
 +	return map;
 +}
 +
 +void thread_map__put(struct thread_map *map)
 +{
 +	if (map && refcount_dec_and_test(&map->refcnt))
 +		thread_map__delete(map);
 +}
 +
 +size_t thread_map__fprintf(struct thread_map *threads, FILE *fp)
++=======
+ size_t thread_map__fprintf(struct perf_thread_map *threads, FILE *fp)
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  {
  	int i;
  	size_t printed = fprintf(fp, "%d thread%s: ",
diff --cc tools/perf/util/thread_map.h
index 2f689c90a8c6,ba45c760be72..000000000000
--- a/tools/perf/util/thread_map.h
+++ b/tools/perf/util/thread_map.h
@@@ -20,25 -10,22 +20,29 @@@ struct thread_map 
  
  struct thread_map_event;
  
 -struct perf_thread_map *thread_map__new_dummy(void);
 -struct perf_thread_map *thread_map__new_by_pid(pid_t pid);
 -struct perf_thread_map *thread_map__new_by_tid(pid_t tid);
 -struct perf_thread_map *thread_map__new_by_uid(uid_t uid);
 -struct perf_thread_map *thread_map__new_all_cpus(void);
 -struct perf_thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
 -struct perf_thread_map *thread_map__new_event(struct thread_map_event *event);
 +struct thread_map *thread_map__new_dummy(void);
 +struct thread_map *thread_map__new_by_pid(pid_t pid);
 +struct thread_map *thread_map__new_by_tid(pid_t tid);
 +struct thread_map *thread_map__new_by_uid(uid_t uid);
 +struct thread_map *thread_map__new_all_cpus(void);
 +struct thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
 +struct thread_map *thread_map__new_event(struct thread_map_event *event);
 +
++<<<<<<< HEAD
 +struct thread_map *thread_map__get(struct thread_map *map);
 +void thread_map__put(struct thread_map *map);
  
 +struct thread_map *thread_map__new_str(const char *pid,
++=======
+ struct perf_thread_map *thread_map__new_str(const char *pid,
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  		const char *tid, uid_t uid, bool all_threads);
  
 -struct perf_thread_map *thread_map__new_by_tid_str(const char *tid_str);
 +struct thread_map *thread_map__new_by_tid_str(const char *tid_str);
  
 -size_t thread_map__fprintf(struct perf_thread_map *threads, FILE *fp);
 +size_t thread_map__fprintf(struct thread_map *threads, FILE *fp);
  
 -static inline int thread_map__nr(struct perf_thread_map *threads)
 +static inline int thread_map__nr(struct thread_map *threads)
  {
  	return threads ? threads->nr : 1;
  }
@@@ -48,18 -35,7 +52,24 @@@ static inline pid_t thread_map__pid(str
  	return map->map[thread].pid;
  }
  
++<<<<<<< HEAD
 +static inline void
 +thread_map__set_pid(struct thread_map *map, int thread, pid_t pid)
 +{
 +	map->map[thread].pid = pid;
 +}
 +
 +static inline char *thread_map__comm(struct thread_map *map, int thread)
 +{
 +	return map->map[thread].comm;
 +}
 +
 +void thread_map__read_comms(struct thread_map *threads);
 +bool thread_map__has(struct thread_map *threads, pid_t pid);
 +int thread_map__remove(struct thread_map *threads, int idx);
++=======
+ void thread_map__read_comms(struct perf_thread_map *threads);
+ bool thread_map__has(struct perf_thread_map *threads, pid_t pid);
+ int thread_map__remove(struct perf_thread_map *threads, int idx);
++>>>>>>> 7836e52e518b (libperf: Add perf_thread_map__get()/perf_thread_map__put())
  #endif	/* __PERF_THREAD_MAP_H */
* Unmerged path tools/perf/lib/include/perf/threadmap.h
* Unmerged path tools/perf/lib/threadmap.c
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..3c95e3528617 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1061,7 +1061,7 @@ static int record__synthesize_workload(struct record *rec, bool tail)
 						 process_synthesized_event,
 						 &rec->session->machines.host,
 						 rec->opts.sample_address);
-	thread_map__put(thread_map);
+	perf_thread_map__put(thread_map);
 	return err;
 }
 
* Unmerged path tools/perf/lib/include/perf/threadmap.h
* Unmerged path tools/perf/lib/libperf.map
* Unmerged path tools/perf/lib/threadmap.c
* Unmerged path tools/perf/tests/code-reading.c
* Unmerged path tools/perf/tests/event-times.c
* Unmerged path tools/perf/tests/keep-tracking.c
diff --git a/tools/perf/tests/mmap-basic.c b/tools/perf/tests/mmap-basic.c
index 0919b0793e5b..fe1909e946b7 100644
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@ -157,6 +157,6 @@ int test__basic_mmap(struct test *test __maybe_unused, int subtest __maybe_unuse
 out_free_cpus:
 	cpu_map__put(cpus);
 out_free_threads:
-	thread_map__put(threads);
+	perf_thread_map__put(threads);
 	return err;
 }
diff --git a/tools/perf/tests/mmap-thread-lookup.c b/tools/perf/tests/mmap-thread-lookup.c
index 0a4301a5155c..ff81f86afb5c 100644
--- a/tools/perf/tests/mmap-thread-lookup.c
+++ b/tools/perf/tests/mmap-thread-lookup.c
@@ -147,7 +147,7 @@ static int synth_process(struct machine *machine)
 						perf_event__process,
 						machine, 0);
 
-	thread_map__put(map);
+	perf_thread_map__put(map);
 	return err;
 }
 
diff --git a/tools/perf/tests/openat-syscall-all-cpus.c b/tools/perf/tests/openat-syscall-all-cpus.c
index 493ecb611540..99ee45eea865 100644
--- a/tools/perf/tests/openat-syscall-all-cpus.c
+++ b/tools/perf/tests/openat-syscall-all-cpus.c
@@ -122,6 +122,6 @@ int test__openat_syscall_event_on_all_cpus(struct test *test __maybe_unused, int
 out_cpu_map_delete:
 	cpu_map__put(cpus);
 out_thread_map_delete:
-	thread_map__put(threads);
+	perf_thread_map__put(threads);
 	return err;
 }
diff --git a/tools/perf/tests/openat-syscall.c b/tools/perf/tests/openat-syscall.c
index 00cd63f90b92..9c229c635a69 100644
--- a/tools/perf/tests/openat-syscall.c
+++ b/tools/perf/tests/openat-syscall.c
@@ -61,6 +61,6 @@ int test__openat_syscall_event(struct test *test __maybe_unused, int subtest __m
 out_evsel_delete:
 	perf_evsel__delete(evsel);
 out_thread_map_delete:
-	thread_map__put(threads);
+	perf_thread_map__put(threads);
 	return err;
 }
* Unmerged path tools/perf/tests/sw-clock.c
* Unmerged path tools/perf/tests/switch-tracking.c
* Unmerged path tools/perf/tests/task-exit.c
diff --git a/tools/perf/tests/thread-map.c b/tools/perf/tests/thread-map.c
index ccc17aced49e..432ea05ccc80 100644
--- a/tools/perf/tests/thread-map.c
+++ b/tools/perf/tests/thread-map.c
@@ -28,11 +28,11 @@ int test__thread_map(struct test *test __maybe_unused, int subtest __maybe_unuse
 	TEST_ASSERT_VAL("wrong pid",
 			thread_map__pid(map, 0) == getpid());
 	TEST_ASSERT_VAL("wrong comm",
-			thread_map__comm(map, 0) &&
-			!strcmp(thread_map__comm(map, 0), NAME));
+			perf_thread_map__comm(map, 0) &&
+			!strcmp(perf_thread_map__comm(map, 0), NAME));
 	TEST_ASSERT_VAL("wrong refcnt",
 			refcount_read(&map->refcnt) == 1);
-	thread_map__put(map);
+	perf_thread_map__put(map);
 
 	/* test dummy pid */
 	map = thread_map__new_dummy();
@@ -43,11 +43,11 @@ int test__thread_map(struct test *test __maybe_unused, int subtest __maybe_unuse
 	TEST_ASSERT_VAL("wrong nr", map->nr == 1);
 	TEST_ASSERT_VAL("wrong pid", thread_map__pid(map, 0) == -1);
 	TEST_ASSERT_VAL("wrong comm",
-			thread_map__comm(map, 0) &&
-			!strcmp(thread_map__comm(map, 0), "dummy"));
+			perf_thread_map__comm(map, 0) &&
+			!strcmp(perf_thread_map__comm(map, 0), "dummy"));
 	TEST_ASSERT_VAL("wrong refcnt",
 			refcount_read(&map->refcnt) == 1);
-	thread_map__put(map);
+	perf_thread_map__put(map);
 	return 0;
 }
 
@@ -70,11 +70,11 @@ static int process_event(struct perf_tool *tool __maybe_unused,
 	TEST_ASSERT_VAL("wrong pid",
 			thread_map__pid(threads, 0) == getpid());
 	TEST_ASSERT_VAL("wrong comm",
-			thread_map__comm(threads, 0) &&
-			!strcmp(thread_map__comm(threads, 0), NAME));
+			perf_thread_map__comm(threads, 0) &&
+			!strcmp(perf_thread_map__comm(threads, 0), NAME));
 	TEST_ASSERT_VAL("wrong refcnt",
 			refcount_read(&threads->refcnt) == 1);
-	thread_map__put(threads);
+	perf_thread_map__put(threads);
 	return 0;
 }
 
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index f1f4848947ce..dcc3ab421c6e 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -992,7 +992,7 @@ int perf_event__synthesize_thread_map2(struct perf_tool *tool,
 
 	for (i = 0; i < threads->nr; i++) {
 		struct thread_map_event_entry *entry = &event->thread_map.entries[i];
-		char *comm = thread_map__comm(threads, i);
+		char *comm = perf_thread_map__comm(threads, i);
 
 		if (!comm)
 			comm = (char *) "";
@@ -1387,7 +1387,7 @@ size_t perf_event__fprintf_thread_map(union perf_event *event, FILE *fp)
 	else
 		ret += fprintf(fp, "failed to get threads from event\n");
 
-	thread_map__put(threads);
+	perf_thread_map__put(threads);
 	return ret;
 }
 
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evsel.c
diff --git a/tools/perf/util/parse-events.c b/tools/perf/util/parse-events.c
index 0540303e5e97..6a310ed70423 100644
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@ -2337,7 +2337,7 @@ static bool is_event_supported(u8 type, unsigned config)
 		perf_evsel__delete(evsel);
 	}
 
-	thread_map__put(tmap);
+	perf_thread_map__put(tmap);
 	return ret;
 }
 
diff --git a/tools/perf/util/python.c b/tools/perf/util/python.c
index 1e5b6718dcea..cf233e5957cc 100644
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@ -626,7 +626,7 @@ static int pyrf_thread_map__init(struct pyrf_thread_map *pthreads,
 
 static void pyrf_thread_map__delete(struct pyrf_thread_map *pthreads)
 {
-	thread_map__put(pthreads->threads);
+	perf_thread_map__put(pthreads->threads);
 	Py_TYPE(pthreads)->tp_free((PyObject*)pthreads);
 }
 
diff --git a/tools/perf/util/stat-display.c b/tools/perf/util/stat-display.c
index 58df6a0dbb9f..d91d596d1a72 100644
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@ -116,7 +116,7 @@ static void aggr_printout(struct perf_stat_config *config,
 	case AGGR_THREAD:
 		fprintf(config->output, "%*s-%*d%s",
 			config->csv_output ? 0 : 16,
-			thread_map__comm(evsel->threads, id),
+			perf_thread_map__comm(evsel->threads, id),
 			config->csv_output ? 0 : -8,
 			thread_map__pid(evsel->threads, id),
 			config->csv_sep);
* Unmerged path tools/perf/util/thread_map.c
* Unmerged path tools/perf/util/thread_map.h
