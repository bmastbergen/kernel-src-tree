KVM: VMX: Convert feature updates from CPUID to KVM cpu caps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 3ec6fd8cf0ba6bb3ded5cdee88319c9af90e14c8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3ec6fd8c.failed

Use the recently introduced KVM CPU caps to propagate VMX-only (kernel)
settings to supported CPUID flags.

No functional change intended.

	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 3ec6fd8cf0ba6bb3ded5cdee88319c9af90e14c8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/kvm/vmx/vmx.c
index b4f527d117f1,19507222414d..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -7251,10 -7123,48 +7251,55 @@@ static void vmx_cpuid_update(struct kvm
  	}
  }
  
++<<<<<<< HEAD
 +static void vmx_set_supported_cpuid(u32 func, struct kvm_cpuid_entry2 *entry)
 +{
 +	if (func == 1 && nested)
 +		entry->ecx |= feature_bit(VMX);
++=======
+ /*
+  * Vendor specific emulation must be handled via ->set_supported_cpuid(), not
+  * vmx_set_cpu_caps(), as capabilities configured during hardware_setup() are
+  * masked against hardware/kernel support, i.e. they'd be lost.
+  */
+ static void vmx_set_supported_cpuid(struct kvm_cpuid_entry2 *entry)
+ {
+ 	switch (entry->function) {
+ 	case 0x7:
+ 		if (vmx_umip_emulated())
+ 			cpuid_entry_set(entry, X86_FEATURE_UMIP);
+ 		break;
+ 	default:
+ 		break;
+ 	}
++>>>>>>> 3ec6fd8cf0ba (KVM: VMX: Convert feature updates from CPUID to KVM cpu caps)
+ }
+ 
+ static __init void vmx_set_cpu_caps(void)
+ {
+ 	kvm_set_cpu_caps();
+ 
+ 	/* CPUID 0x1 */
+ 	if (nested)
+ 		kvm_cpu_cap_set(X86_FEATURE_VMX);
+ 
+ 	/* CPUID 0x7 */
+ 	if (boot_cpu_has(X86_FEATURE_MPX) && kvm_mpx_supported())
+ 		kvm_cpu_cap_set(X86_FEATURE_MPX);
+ 	if (boot_cpu_has(X86_FEATURE_INVPCID) && cpu_has_vmx_invpcid())
+ 		kvm_cpu_cap_set(X86_FEATURE_INVPCID);
+ 	if (boot_cpu_has(X86_FEATURE_INTEL_PT) &&
+ 	    vmx_pt_mode_is_host_guest())
+ 		kvm_cpu_cap_set(X86_FEATURE_INTEL_PT);
+ 
+ 	/* PKU is not yet implemented for shadow paging. */
+ 	if (enable_ept && boot_cpu_has(X86_FEATURE_PKU) &&
+ 	    boot_cpu_has(X86_FEATURE_OSPKE))
+ 		kvm_cpu_cap_set(X86_FEATURE_PKU);
+ 
+ 	/* CPUID 0x80000001 */
+ 	if (!cpu_has_vmx_rdtscp())
+ 		kvm_cpu_cap_clear(X86_FEATURE_RDTSCP);
  }
  
  static void vmx_request_immediate_exit(struct kvm_vcpu *vcpu)
@@@ -7868,6 -7830,8 +7913,11 @@@ static __init int hardware_setup(void
  			return r;
  	}
  
++<<<<<<< HEAD
++=======
+ 	vmx_set_cpu_caps();
+ 
++>>>>>>> 3ec6fd8cf0ba (KVM: VMX: Convert feature updates from CPUID to KVM cpu caps)
  	r = alloc_kvm_area();
  	if (r)
  		nested_vmx_hardware_unsetup();
* Unmerged path arch/x86/kvm/vmx/vmx.c
