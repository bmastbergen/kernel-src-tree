bpftool: Only build bpftool-prog-profile if supported by clang

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Song Liu <songliubraving@fb.com>
commit 14e5728ff8176d4d5924b0bf5ab9b1c94d6b3381
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/14e5728f.failed

bpftool-prog-profile requires clang to generate BTF for global variables.
When compared with older clang, skip this command. This is achieved by
adding a new feature, clang-bpf-global-var, to tools/build/feature.

	Signed-off-by: Song Liu <songliubraving@fb.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Reviewed-by: Quentin Monnet <quentin@isovalent.com>
Link: https://lore.kernel.org/bpf/20200312182332.3953408-2-songliubraving@fb.com
(cherry picked from commit 14e5728ff8176d4d5924b0bf5ab9b1c94d6b3381)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/build/feature/Makefile
diff --cc tools/build/feature/Makefile
index 621f528f7822,ab8e89a7009c..000000000000
--- a/tools/build/feature/Makefile
+++ b/tools/build/feature/Makefile
@@@ -68,7 -68,7 +68,11 @@@ FILES
           test-llvm-version.bin			\
           test-libaio.bin			\
           test-libzstd.bin			\
++<<<<<<< HEAD
 +         test-file-handle.bin
++=======
+          test-clang-bpf-global-var.bin
++>>>>>>> 14e5728ff817 (bpftool: Only build bpftool-prog-profile if supported by clang)
  
  FILES := $(addprefix $(OUTPUT),$(FILES))
  
@@@ -322,8 -323,10 +327,15 @@@ $(OUTPUT)test-libaio.bin
  $(OUTPUT)test-libzstd.bin:
  	$(BUILD) -lzstd
  
++<<<<<<< HEAD
 +$(OUTPUT)test-file-handle.bin:
 +	$(BUILD)
++=======
+ $(OUTPUT)test-clang-bpf-global-var.bin:
+ 	$(CLANG) -S -g -target bpf -o - $(patsubst %.bin,%.c,$(@F)) |	\
+ 		grep BTF_KIND_VAR
+ 
++>>>>>>> 14e5728ff817 (bpftool: Only build bpftool-prog-profile if supported by clang)
  
  ###############################
  
diff --git a/tools/bpf/bpftool/Makefile b/tools/bpf/bpftool/Makefile
index d2101124645e..11426866692b 100644
--- a/tools/bpf/bpftool/Makefile
+++ b/tools/bpf/bpftool/Makefile
@@ -61,8 +61,9 @@ RM ?= rm -f
 CLANG ?= clang
 
 FEATURE_USER = .bpftool
-FEATURE_TESTS = libbfd disassembler-four-args reallocarray zlib
-FEATURE_DISPLAY = libbfd disassembler-four-args zlib
+FEATURE_TESTS = libbfd disassembler-four-args reallocarray zlib \
+	clang-bpf-global-var
+FEATURE_DISPLAY = libbfd disassembler-four-args zlib clang-bpf-global-var
 
 check_feat := 1
 NON_CHECK_FEAT_TARGETS := clean uninstall doc doc-clean doc-install doc-uninstall
@@ -112,6 +113,12 @@ endif
 OBJS = $(patsubst %.c,$(OUTPUT)%.o,$(SRCS)) $(OUTPUT)disasm.o
 _OBJS = $(filter-out $(OUTPUT)prog.o,$(OBJS)) $(OUTPUT)_prog.o
 
+ifeq ($(feature-clang-bpf-global-var),1)
+	__OBJS = $(OBJS)
+else
+	__OBJS = $(_OBJS)
+endif
+
 $(OUTPUT)_prog.o: prog.c
 	$(QUIET_CC)$(COMPILE.c) -MMD -DBPFTOOL_WITHOUT_SKELETONS -o $@ $<
 
@@ -135,8 +142,8 @@ $(OUTPUT)disasm.o: $(srctree)/kernel/bpf/disasm.c
 
 $(OUTPUT)feature.o: | zdep
 
-$(OUTPUT)bpftool: $(OBJS) $(LIBBPF)
-	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
+$(OUTPUT)bpftool: $(__OBJS) $(LIBBPF)
+	$(QUIET_LINK)$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(__OBJS) $(LIBS)
 
 $(OUTPUT)%.o: %.c
 	$(QUIET_CC)$(COMPILE.c) -MMD -o $@ $<
diff --git a/tools/bpf/bpftool/prog.c b/tools/bpf/bpftool/prog.c
index 712cce24e9d9..15a1bba44d69 100644
--- a/tools/bpf/bpftool/prog.c
+++ b/tools/bpf/bpftool/prog.c
@@ -1545,6 +1545,7 @@ static int do_loadall(int argc, char **argv)
 
 static int do_profile(int argc, char **argv)
 {
+	p_err("bpftool prog profile command is not supported. Please build bpftool with clang >= 10.0.0");
 	return 0;
 }
 
* Unmerged path tools/build/feature/Makefile
diff --git a/tools/build/feature/test-clang-bpf-global-var.c b/tools/build/feature/test-clang-bpf-global-var.c
new file mode 100644
index 000000000000..221f1481d52e
--- /dev/null
+++ b/tools/build/feature/test-clang-bpf-global-var.c
@@ -0,0 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2020 Facebook
+
+volatile int global_value_for_test = 1;
