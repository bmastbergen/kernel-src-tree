KEYS: Use common tpm_buf for trusted and asymmetric keys

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sumit Garg <sumit.garg@linaro.org>
commit c6f61e59760df04a245ef48c8805b4eb3d958230
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c6f61e59.failed

Switch to utilize common heap based tpm_buf code for TPM based trusted
and asymmetric keys rather than using stack based tpm1_buf code. Also,
remove tpm1_buf code.

	Suggested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
	Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
	Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Tested-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
	Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
(cherry picked from commit c6f61e59760df04a245ef48c8805b4eb3d958230)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	crypto/asymmetric_keys/asym_tpm.c
#	include/keys/trusted.h
#	security/keys/trusted.c
diff --cc include/keys/trusted.h
index 0071298b9b28,29e3e9ba8e1a..000000000000
--- a/include/keys/trusted.h
+++ b/include/keys/trusted.h
@@@ -17,13 -13,6 +13,16 @@@
  #define LOAD32N(buffer, offset)	(*(uint32_t *)&buffer[offset])
  #define LOAD16(buffer, offset)	(ntohs(*(uint16_t *)&buffer[offset]))
  
++<<<<<<< HEAD
 +struct tpm_buf {
 +	int len;
 +	unsigned char data[MAX_BUF_SIZE];
 +};
 +
 +#define INIT_BUF(tb) (tb->len = 0)
 +
++=======
++>>>>>>> c6f61e59760d (KEYS: Use common tpm_buf for trusted and asymmetric keys)
  struct osapsess {
  	uint32_t handle;
  	unsigned char secret[SHA1_DIGEST_SIZE];
@@@ -109,28 -98,4 +108,31 @@@ static inline void dump_tpm_buf(unsigne
  {
  }
  #endif
++<<<<<<< HEAD
 +
 +static inline void store8(struct tpm_buf *buf, const unsigned char value)
 +{
 +	buf->data[buf->len++] = value;
 +}
 +
 +static inline void store16(struct tpm_buf *buf, const uint16_t value)
 +{
 +	*(uint16_t *) & buf->data[buf->len] = htons(value);
 +	buf->len += sizeof value;
 +}
 +
 +static inline void store32(struct tpm_buf *buf, const uint32_t value)
 +{
 +	*(uint32_t *) & buf->data[buf->len] = htonl(value);
 +	buf->len += sizeof value;
 +}
 +
 +static inline void storebytes(struct tpm_buf *buf, const unsigned char *in,
 +			      const int len)
 +{
 +	memcpy(buf->data + buf->len, in, len);
 +	buf->len += len;
 +}
++=======
++>>>>>>> c6f61e59760d (KEYS: Use common tpm_buf for trusted and asymmetric keys)
  #endif
diff --cc security/keys/trusted.c
index 4007ce9882e3,707101170aec..000000000000
--- a/security/keys/trusted.c
+++ b/security/keys/trusted.c
@@@ -674,12 -658,12 +662,16 @@@ static int tpm_unseal(struct tpm_buf *t
  static int key_seal(struct trusted_key_payload *p,
  		    struct trusted_key_options *o)
  {
++<<<<<<< HEAD
 +	struct tpm_buf *tb;
++=======
+ 	struct tpm_buf tb;
++>>>>>>> c6f61e59760d (KEYS: Use common tpm_buf for trusted and asymmetric keys)
  	int ret;
  
- 	tb = kzalloc(sizeof *tb, GFP_KERNEL);
- 	if (!tb)
- 		return -ENOMEM;
+ 	ret = tpm_buf_init(&tb, 0, 0);
+ 	if (ret)
+ 		return ret;
  
  	/* include migratable flag at end of sealed key */
  	p->key[p->key_len] = p->migratable;
@@@ -700,14 -684,14 +692,18 @@@
  static int key_unseal(struct trusted_key_payload *p,
  		      struct trusted_key_options *o)
  {
++<<<<<<< HEAD
 +	struct tpm_buf *tb;
++=======
+ 	struct tpm_buf tb;
++>>>>>>> c6f61e59760d (KEYS: Use common tpm_buf for trusted and asymmetric keys)
  	int ret;
  
- 	tb = kzalloc(sizeof *tb, GFP_KERNEL);
- 	if (!tb)
- 		return -ENOMEM;
+ 	ret = tpm_buf_init(&tb, 0, 0);
+ 	if (ret)
+ 		return ret;
  
- 	ret = tpm_unseal(tb, o->keyhandle, o->keyauth, p->blob, p->blob_len,
+ 	ret = tpm_unseal(&tb, o->keyhandle, o->keyauth, p->blob, p->blob_len,
  			 o->blobauth, p->key, &p->key_len);
  	if (ret < 0)
  		pr_info("trusted_key: srkunseal failed (%d)\n", ret);
* Unmerged path crypto/asymmetric_keys/asym_tpm.c
* Unmerged path crypto/asymmetric_keys/asym_tpm.c
* Unmerged path include/keys/trusted.h
* Unmerged path security/keys/trusted.c
