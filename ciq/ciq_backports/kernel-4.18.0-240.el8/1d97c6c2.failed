samples/bpf: Base target programs rules on Makefile.target

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
commit 1d97c6c2511f10e19f683a4431e8ee887c1daab6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1d97c6c2.failed

The main reason for that - HOSTCC and CC have different aims.
HOSTCC is used to build programs running on host, that can
cross-comple target programs with CC. It was tested for arm and arm64
cross compilation, based on linaro toolchain, but should work for
others.

So, in order to split cross compilation (CC) with host build (HOSTCC),
lets base samples on Makefile.target. It allows to cross-compile
samples/bpf programs with CC while auxialry tools running on host
built with HOSTCC.

	Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20191011002808.28206-9-ivan.khoronzhuk@linaro.org
(cherry picked from commit 1d97c6c2511f10e19f683a4431e8ee887c1daab6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	samples/bpf/Makefile
diff --cc samples/bpf/Makefile
index 3ff0e2c54680,91bfb421c278..000000000000
--- a/samples/bpf/Makefile
+++ b/samples/bpf/Makefile
@@@ -4,54 -4,53 +4,104 @@@ BPF_SAMPLES_PATH ?= $(abspath $(srctree
  TOOLS_PATH := $(BPF_SAMPLES_PATH)/../../tools
  
  # List of programs to build
++<<<<<<< HEAD
 +hostprogs-y := test_lru_dist
 +hostprogs-y += sock_example
 +hostprogs-y += fds_example
 +hostprogs-y += sockex1
 +hostprogs-y += sockex2
 +hostprogs-y += sockex3
 +hostprogs-y += tracex1
 +hostprogs-y += tracex2
 +hostprogs-y += tracex3
 +hostprogs-y += tracex4
 +hostprogs-y += tracex5
 +hostprogs-y += tracex6
 +hostprogs-y += tracex7
 +hostprogs-y += test_probe_write_user
 +hostprogs-y += trace_output
 +hostprogs-y += lathist
 +hostprogs-y += offwaketime
 +hostprogs-y += spintest
 +hostprogs-y += map_perf_test
 +hostprogs-y += test_overhead
 +hostprogs-y += test_cgrp2_array_pin
 +hostprogs-y += test_cgrp2_attach
 +hostprogs-y += test_cgrp2_sock
 +hostprogs-y += test_cgrp2_sock2
 +hostprogs-y += xdp1
 +hostprogs-y += xdp2
 +hostprogs-y += xdp_router_ipv4
 +hostprogs-y += test_current_task_under_cgroup
 +hostprogs-y += trace_event
 +hostprogs-y += sampleip
 +hostprogs-y += tc_l2_redirect
 +hostprogs-y += lwt_len_hist
 +hostprogs-y += xdp_tx_iptunnel
 +hostprogs-y += test_map_in_map
 +hostprogs-y += per_socket_stats_example
 +hostprogs-y += xdp_redirect
 +hostprogs-y += xdp_redirect_map
 +hostprogs-y += xdp_redirect_cpu
 +hostprogs-y += xdp_monitor
 +hostprogs-y += xdp_rxq_info
 +hostprogs-y += syscall_tp
 +hostprogs-y += cpustat
 +hostprogs-y += xdp_adjust_tail
 +hostprogs-y += xdpsock
 +hostprogs-y += xdp_fwd
 +hostprogs-y += task_fd_query
 +hostprogs-y += xdp_sample_pkts
 +hostprogs-y += hbm
++=======
+ tprogs-y := test_lru_dist
+ tprogs-y += sock_example
+ tprogs-y += fds_example
+ tprogs-y += sockex1
+ tprogs-y += sockex2
+ tprogs-y += sockex3
+ tprogs-y += tracex1
+ tprogs-y += tracex2
+ tprogs-y += tracex3
+ tprogs-y += tracex4
+ tprogs-y += tracex5
+ tprogs-y += tracex6
+ tprogs-y += tracex7
+ tprogs-y += test_probe_write_user
+ tprogs-y += trace_output
+ tprogs-y += lathist
+ tprogs-y += offwaketime
+ tprogs-y += spintest
+ tprogs-y += map_perf_test
+ tprogs-y += test_overhead
+ tprogs-y += test_cgrp2_array_pin
+ tprogs-y += test_cgrp2_attach
+ tprogs-y += test_cgrp2_sock
+ tprogs-y += test_cgrp2_sock2
+ tprogs-y += xdp1
+ tprogs-y += xdp2
+ tprogs-y += xdp_router_ipv4
+ tprogs-y += test_current_task_under_cgroup
+ tprogs-y += trace_event
+ tprogs-y += sampleip
+ tprogs-y += tc_l2_redirect
+ tprogs-y += lwt_len_hist
+ tprogs-y += xdp_tx_iptunnel
+ tprogs-y += test_map_in_map
+ tprogs-y += xdp_redirect_map
+ tprogs-y += xdp_redirect_cpu
+ tprogs-y += xdp_monitor
+ tprogs-y += xdp_rxq_info
+ tprogs-y += syscall_tp
+ tprogs-y += cpustat
+ tprogs-y += xdp_adjust_tail
+ tprogs-y += xdpsock
+ tprogs-y += xdp_fwd
+ tprogs-y += task_fd_query
+ tprogs-y += xdp_sample_pkts
+ tprogs-y += ibumad
+ tprogs-y += hbm
++>>>>>>> 1d97c6c2511f (samples/bpf: Base target programs rules on Makefile.target)
  
  # Libbpf dependencies
  LIBBPF = $(TOOLS_PATH)/lib/bpf/libbpf.a
@@@ -167,22 -167,7 +217,25 @@@ always += xdp_sample_pkts_kern.
  always += hbm_out_kern.o
  always += hbm_edt_kern.o
  
++<<<<<<< HEAD
 +KBUILD_HOSTCFLAGS += -I$(objtree)/usr/include
 +KBUILD_HOSTCFLAGS += -I$(srctree)/tools/lib/bpf/
 +KBUILD_HOSTCFLAGS += -I$(srctree)/tools/testing/selftests/bpf/
 +KBUILD_HOSTCFLAGS += -I$(srctree)/tools/lib/ -I$(srctree)/tools/include
 +KBUILD_HOSTCFLAGS += -I$(srctree)/tools/perf
 +KBUILD_HOSTCFLAGS += -DHAVE_ATTR_TEST=0
 +
 +HOSTCFLAGS_bpf_load.o += -Wno-unused-variable
 +
 +KBUILD_HOSTLDLIBS		+= $(LIBBPF) -lelf
 +HOSTLDLIBS_tracex4		+= -lrt
 +HOSTLDLIBS_trace_output	+= -lrt
 +HOSTLDLIBS_map_perf_test	+= -lrt
 +HOSTLDLIBS_test_overhead	+= -lrt
 +HOSTLDLIBS_xdpsock		+= -pthread
 +
++=======
++>>>>>>> 1d97c6c2511f (samples/bpf: Base target programs rules on Makefile.target)
  ifeq ($(ARCH), arm)
  # Strip all except -D__LINUX_ARM_ARCH__ option needed to handle linux
  # headers when arm instruction set identification is requested.
* Unmerged path samples/bpf/Makefile
