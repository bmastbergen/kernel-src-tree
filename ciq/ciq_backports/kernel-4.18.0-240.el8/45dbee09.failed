mlxsw: spectrum_trap: Add ACL devlink-trap support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Pirko <jiri@mellanox.com>
commit 45dbee09058484165e5546e5463df5d6df346f9f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/45dbee09.failed

Add the trap group used to report ACL drops. Setup the trap IDs for
ingress/egress flow action drop. Register the two packet traps
associated with ACL trap group with devlink during driver
initialization. As these are "source traps", set the disabled
trap group to be the dummy, discarding as many packets in HW
as possible.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 45dbee09058484165e5546e5463df5d6df346f9f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/reg.h
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/reg.h
index a87894f192e5,e22cea92fbce..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/reg.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/reg.h
@@@ -5445,8 -5526,11 +5445,13 @@@ enum mlxsw_reg_htgt_trap_group 
  
  enum mlxsw_reg_htgt_discard_trap_group {
  	MLXSW_REG_HTGT_DISCARD_TRAP_GROUP_BASE = MLXSW_REG_HTGT_TRAP_GROUP_MAX,
 -	MLXSW_REG_HTGT_TRAP_GROUP_SP_DUMMY,
  	MLXSW_REG_HTGT_TRAP_GROUP_SP_L2_DISCARDS,
  	MLXSW_REG_HTGT_TRAP_GROUP_SP_L3_DISCARDS,
++<<<<<<< HEAD
++=======
+ 	MLXSW_REG_HTGT_TRAP_GROUP_SP_TUNNEL_DISCARDS,
+ 	MLXSW_REG_HTGT_TRAP_GROUP_SP_ACL_DISCARDS,
++>>>>>>> 45dbee090584 (mlxsw: spectrum_trap: Add ACL devlink-trap support)
  };
  
  /* reg_htgt_trap_group
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
index 6d6a29fdad47,04f2445f6d43..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
@@@ -130,6 -155,13 +135,16 @@@ static const struct devlink_trap mlxsw_
  	MLXSW_SP_TRAP_EXCEPTION(UNRESOLVED_NEIGH, L3_DROPS),
  	MLXSW_SP_TRAP_EXCEPTION(IPV4_LPM_UNICAST_MISS, L3_DROPS),
  	MLXSW_SP_TRAP_EXCEPTION(IPV6_LPM_UNICAST_MISS, L3_DROPS),
++<<<<<<< HEAD
++=======
+ 	MLXSW_SP_TRAP_DRIVER_DROP(IRIF_DISABLED, L3_DROPS),
+ 	MLXSW_SP_TRAP_DRIVER_DROP(ERIF_DISABLED, L3_DROPS),
+ 	MLXSW_SP_TRAP_DROP(NON_ROUTABLE, L3_DROPS),
+ 	MLXSW_SP_TRAP_EXCEPTION(DECAP_ERROR, TUNNEL_DROPS),
+ 	MLXSW_SP_TRAP_DROP(OVERLAY_SMAC_MC, TUNNEL_DROPS),
+ 	MLXSW_SP_TRAP_DROP(INGRESS_FLOW_ACTION_DROP, ACL_DROPS),
+ 	MLXSW_SP_TRAP_DROP(EGRESS_FLOW_ACTION_DROP, ACL_DROPS),
++>>>>>>> 45dbee090584 (mlxsw: spectrum_trap: Add ACL devlink-trap support)
  };
  
  static const struct mlxsw_listener mlxsw_sp_listeners_arr[] = {
@@@ -162,6 -194,17 +177,20 @@@
  			       TRAP_EXCEPTION_TO_CPU),
  	MLXSW_SP_RXL_EXCEPTION(DISCARD_ROUTER_LPM6, ROUTER_EXP,
  			       TRAP_EXCEPTION_TO_CPU),
++<<<<<<< HEAD
++=======
+ 	MLXSW_SP_RXL_DISCARD(ROUTER_IRIF_EN, L3_DISCARDS),
+ 	MLXSW_SP_RXL_DISCARD(ROUTER_ERIF_EN, L3_DISCARDS),
+ 	MLXSW_SP_RXL_DISCARD(NON_ROUTABLE, L3_DISCARDS),
+ 	MLXSW_SP_RXL_EXCEPTION(DECAP_ECN0, ROUTER_EXP, TRAP_EXCEPTION_TO_CPU),
+ 	MLXSW_SP_RXL_EXCEPTION(IPIP_DECAP_ERROR, ROUTER_EXP,
+ 			       TRAP_EXCEPTION_TO_CPU),
+ 	MLXSW_SP_RXL_EXCEPTION(DISCARD_DEC_PKT, TUNNEL_DISCARDS,
+ 			       TRAP_EXCEPTION_TO_CPU),
+ 	MLXSW_SP_RXL_DISCARD(OVERLAY_SMAC_MC, TUNNEL_DISCARDS),
+ 	MLXSW_SP_RXL_ACL_DISCARD(INGRESS_ACL, ACL_DISCARDS, DUMMY),
+ 	MLXSW_SP_RXL_ACL_DISCARD(EGRESS_ACL, ACL_DISCARDS, DUMMY),
++>>>>>>> 45dbee090584 (mlxsw: spectrum_trap: Add ACL devlink-trap support)
  };
  
  /* Mapping between hardware trap and devlink trap. Multiple hardware traps can
@@@ -195,8 -238,48 +224,20 @@@ static const u16 mlxsw_sp_listener_devl
  	DEVLINK_TRAP_GENERIC_ID_UNRESOLVED_NEIGH,
  	DEVLINK_TRAP_GENERIC_ID_IPV4_LPM_UNICAST_MISS,
  	DEVLINK_TRAP_GENERIC_ID_IPV6_LPM_UNICAST_MISS,
++<<<<<<< HEAD
++=======
+ 	DEVLINK_MLXSW_TRAP_ID_IRIF_DISABLED,
+ 	DEVLINK_MLXSW_TRAP_ID_ERIF_DISABLED,
+ 	DEVLINK_TRAP_GENERIC_ID_NON_ROUTABLE,
+ 	DEVLINK_TRAP_GENERIC_ID_DECAP_ERROR,
+ 	DEVLINK_TRAP_GENERIC_ID_DECAP_ERROR,
+ 	DEVLINK_TRAP_GENERIC_ID_DECAP_ERROR,
+ 	DEVLINK_TRAP_GENERIC_ID_OVERLAY_SMAC_MC,
+ 	DEVLINK_TRAP_GENERIC_ID_INGRESS_FLOW_ACTION_DROP,
+ 	DEVLINK_TRAP_GENERIC_ID_EGRESS_FLOW_ACTION_DROP,
++>>>>>>> 45dbee090584 (mlxsw: spectrum_trap: Add ACL devlink-trap support)
  };
  
 -#define MLXSW_SP_DISCARD_POLICER_ID	(MLXSW_REG_HTGT_TRAP_GROUP_MAX + 1)
 -#define MLXSW_SP_THIN_POLICER_ID	(MLXSW_SP_DISCARD_POLICER_ID + 1)
 -
 -static int mlxsw_sp_trap_cpu_policers_set(struct mlxsw_sp *mlxsw_sp)
 -{
 -	char qpcr_pl[MLXSW_REG_QPCR_LEN];
 -	int err;
 -
 -	mlxsw_reg_qpcr_pack(qpcr_pl, MLXSW_SP_DISCARD_POLICER_ID,
 -			    MLXSW_REG_QPCR_IR_UNITS_M, false, 10 * 1024, 7);
 -	err = mlxsw_reg_write(mlxsw_sp->core, MLXSW_REG(qpcr), qpcr_pl);
 -	if (err)
 -		return err;
 -
 -	/* The purpose of "thin" policer is to drop as many packets
 -	 * as possible. The dummy group is using it.
 -	 */
 -	mlxsw_reg_qpcr_pack(qpcr_pl, MLXSW_SP_THIN_POLICER_ID,
 -			    MLXSW_REG_QPCR_IR_UNITS_M, false, 1, 4);
 -	return mlxsw_reg_write(mlxsw_sp->core, MLXSW_REG(qpcr), qpcr_pl);
 -}
 -
 -static int mlxsw_sp_trap_dummy_group_init(struct mlxsw_sp *mlxsw_sp)
 -{
 -	char htgt_pl[MLXSW_REG_HTGT_LEN];
 -
 -	mlxsw_reg_htgt_pack(htgt_pl, MLXSW_REG_HTGT_TRAP_GROUP_SP_DUMMY,
 -			    MLXSW_SP_THIN_POLICER_ID, 0, 1);
 -	return mlxsw_reg_write(mlxsw_sp->core, MLXSW_REG(htgt), htgt_pl);
 -}
 -
  int mlxsw_sp_devlink_traps_init(struct mlxsw_sp *mlxsw_sp)
  {
  	struct devlink *devlink = priv_to_devlink(mlxsw_sp->core);
@@@ -339,6 -399,18 +380,21 @@@ __mlxsw_sp_trap_group_init(struct mlxsw
  		priority = 0;
  		tc = 1;
  		break;
++<<<<<<< HEAD
++=======
+ 	case DEVLINK_TRAP_GROUP_GENERIC_ID_TUNNEL_DROPS:
+ 		group_id = MLXSW_REG_HTGT_TRAP_GROUP_SP_TUNNEL_DISCARDS;
+ 		policer_id = MLXSW_SP_DISCARD_POLICER_ID;
+ 		priority = 0;
+ 		tc = 1;
+ 		break;
+ 	case DEVLINK_TRAP_GROUP_GENERIC_ID_ACL_DROPS:
+ 		group_id = MLXSW_REG_HTGT_TRAP_GROUP_SP_ACL_DISCARDS;
+ 		policer_id = MLXSW_SP_DISCARD_POLICER_ID;
+ 		priority = 0;
+ 		tc = 1;
+ 		break;
++>>>>>>> 45dbee090584 (mlxsw: spectrum_trap: Add ACL devlink-trap support)
  	default:
  		return -EINVAL;
  	}
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/reg.h
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
