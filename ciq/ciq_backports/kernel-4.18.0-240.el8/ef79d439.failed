net/smc: process llc responses in tasklet context

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Karsten Graul <kgraul@linux.ibm.com>
commit ef79d439cd124d9fb7258bb35d44c71aec11b829
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ef79d439.failed

When llc responses are received then possible waiters for this response
are to be notified. This can be done in tasklet context, without to
use a work in the llc work queue. Move all code that handles llc
responses into smc_llc_rx_response().

	Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
	Reviewed-by: Ursula Braun <ubraun@linux.ibm.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit ef79d439cd124d9fb7258bb35d44c71aec11b829)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/smc/smc_llc.c
diff --cc net/smc/smc_llc.c
index 4119cdb6b6bf,265889c8b03b..000000000000
--- a/net/smc/smc_llc.c
+++ b/net/smc/smc_llc.c
@@@ -433,27 -403,22 +423,45 @@@ static void smc_llc_rx_add_link(struct 
  {
  	struct smc_link_group *lgr = smc_get_lgr(link);
  
++<<<<<<< HEAD
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		if (link->state == SMC_LNK_ACTIVATING)
 +			complete(&link->llc_add_resp);
 +	} else {
 +		if (link->state == SMC_LNK_ACTIVATING) {
 +			complete(&link->llc_add);
 +			return;
 +		}
 +
 +		if (lgr->role == SMC_SERV) {
 +			smc_llc_prep_add_link(llc, link,
 +					link->smcibdev->mac[link->ibport - 1],
 +					link->gid, SMC_LLC_REQ);
 +
 +		} else {
 +			smc_llc_prep_add_link(llc, link,
 +					link->smcibdev->mac[link->ibport - 1],
 +					link->gid, SMC_LLC_RESP);
 +		}
 +		smc_llc_send_message(link, llc, sizeof(*llc));
++=======
+ 	if (link->state == SMC_LNK_ACTIVATING) {
+ 		complete(&link->llc_add);
+ 		return;
++>>>>>>> ef79d439cd12 (net/smc: process llc responses in tasklet context)
  	}
+ 
+ 	if (lgr->role == SMC_SERV) {
+ 		smc_llc_prep_add_link(llc, link,
+ 				link->smcibdev->mac[link->ibport - 1],
+ 				link->gid, SMC_LLC_REQ);
+ 
+ 	} else {
+ 		smc_llc_prep_add_link(llc, link,
+ 				link->smcibdev->mac[link->ibport - 1],
+ 				link->gid, SMC_LLC_RESP);
+ 	}
+ 	smc_llc_send_message(link, llc);
  }
  
  static void smc_llc_rx_delete_link(struct smc_link *link,
@@@ -461,34 -426,24 +469,48 @@@
  {
  	struct smc_link_group *lgr = smc_get_lgr(link);
  
- 	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
- 		if (lgr->role == SMC_SERV)
- 			smc_lgr_schedule_free_work_fast(lgr);
+ 	smc_lgr_forget(lgr);
+ 	smc_llc_link_deleting(link);
+ 	if (lgr->role == SMC_SERV) {
+ 		/* client asks to delete this link, send request */
+ 		smc_llc_prep_delete_link(llc, link, SMC_LLC_REQ, true);
  	} else {
++<<<<<<< HEAD
 +		smc_lgr_forget(lgr);
 +		smc_llc_link_deleting(link);
 +		if (lgr->role == SMC_SERV) {
 +			/* client asks to delete this link, send request */
 +			smc_llc_prep_delete_link(llc, link, SMC_LLC_REQ, true);
 +		} else {
 +			/* server requests to delete this link, send response */
 +			smc_llc_prep_delete_link(llc, link, SMC_LLC_RESP, true);
 +		}
 +		smc_llc_send_message(link, llc, sizeof(*llc));
 +		smc_lgr_terminate_sched(lgr);
++=======
+ 		/* server requests to delete this link, send response */
+ 		smc_llc_prep_delete_link(llc, link, SMC_LLC_RESP, true);
++>>>>>>> ef79d439cd12 (net/smc: process llc responses in tasklet context)
  	}
+ 	smc_llc_send_message(link, llc);
+ 	smc_lgr_terminate_sched(lgr);
  }
  
  static void smc_llc_rx_test_link(struct smc_link *link,
  				 struct smc_llc_msg_test_link *llc)
  {
++<<<<<<< HEAD
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		if (link->state == SMC_LNK_ACTIVE)
 +			complete(&link->llc_testlink_resp);
 +	} else {
 +		llc->hd.flags |= SMC_LLC_FLAG_RESP;
 +		smc_llc_send_message(link, llc, sizeof(*llc));
 +	}
++=======
+ 	llc->hd.flags |= SMC_LLC_FLAG_RESP;
+ 	smc_llc_send_message(link, llc);
++>>>>>>> ef79d439cd12 (net/smc: process llc responses in tasklet context)
  }
  
  static void smc_llc_rx_confirm_rkey(struct smc_link *link,
@@@ -496,34 -451,24 +518,42 @@@
  {
  	int rc;
  
- 	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
- 		link->llc_confirm_rkey_rc = llc->hd.flags &
- 					    SMC_LLC_FLAG_RKEY_NEG;
- 		complete(&link->llc_confirm_rkey);
- 	} else {
- 		rc = smc_rtoken_add(link,
- 				    llc->rtoken[0].rmb_vaddr,
- 				    llc->rtoken[0].rmb_key);
+ 	rc = smc_rtoken_add(link,
+ 			    llc->rtoken[0].rmb_vaddr,
+ 			    llc->rtoken[0].rmb_key);
  
- 		/* ignore rtokens for other links, we have only one link */
+ 	/* ignore rtokens for other links, we have only one link */
  
++<<<<<<< HEAD
 +		llc->hd.flags |= SMC_LLC_FLAG_RESP;
 +		if (rc < 0)
 +			llc->hd.flags |= SMC_LLC_FLAG_RKEY_NEG;
 +		smc_llc_send_message(link, llc, sizeof(*llc));
 +	}
++=======
+ 	llc->hd.flags |= SMC_LLC_FLAG_RESP;
+ 	if (rc < 0)
+ 		llc->hd.flags |= SMC_LLC_FLAG_RKEY_NEG;
+ 	smc_llc_send_message(link, llc);
++>>>>>>> ef79d439cd12 (net/smc: process llc responses in tasklet context)
  }
  
  static void smc_llc_rx_confirm_rkey_cont(struct smc_link *link,
  				      struct smc_llc_msg_confirm_rkey_cont *llc)
  {
++<<<<<<< HEAD
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		/* unused as long as we don't send this type of msg */
 +	} else {
 +		/* ignore rtokens for other links, we have only one link */
 +		llc->hd.flags |= SMC_LLC_FLAG_RESP;
 +		smc_llc_send_message(link, llc, sizeof(*llc));
 +	}
++=======
+ 	/* ignore rtokens for other links, we have only one link */
+ 	llc->hd.flags |= SMC_LLC_FLAG_RESP;
+ 	smc_llc_send_message(link, llc);
++>>>>>>> ef79d439cd12 (net/smc: process llc responses in tasklet context)
  }
  
  static void smc_llc_rx_delete_rkey(struct smc_link *link,
@@@ -532,38 -477,41 +562,53 @@@
  	u8 err_mask = 0;
  	int i, max;
  
++<<<<<<< HEAD
 +	if (llc->hd.flags & SMC_LLC_FLAG_RESP) {
 +		link->llc_delete_rkey_rc = llc->hd.flags &
 +					    SMC_LLC_FLAG_RKEY_NEG;
 +		complete(&link->llc_delete_rkey);
 +	} else {
 +		max = min_t(u8, llc->num_rkeys, SMC_LLC_DEL_RKEY_MAX);
 +		for (i = 0; i < max; i++) {
 +			if (smc_rtoken_delete(link, llc->rkey[i]))
 +				err_mask |= 1 << (SMC_LLC_DEL_RKEY_MAX - 1 - i);
 +		}
 +
 +		if (err_mask) {
 +			llc->hd.flags |= SMC_LLC_FLAG_RKEY_NEG;
 +			llc->err_mask = err_mask;
 +		}
 +
 +		llc->hd.flags |= SMC_LLC_FLAG_RESP;
 +		smc_llc_send_message(link, llc, sizeof(*llc));
++=======
+ 	max = min_t(u8, llc->num_rkeys, SMC_LLC_DEL_RKEY_MAX);
+ 	for (i = 0; i < max; i++) {
+ 		if (smc_rtoken_delete(link, llc->rkey[i]))
+ 			err_mask |= 1 << (SMC_LLC_DEL_RKEY_MAX - 1 - i);
++>>>>>>> ef79d439cd12 (net/smc: process llc responses in tasklet context)
  	}
+ 
+ 	if (err_mask) {
+ 		llc->hd.flags |= SMC_LLC_FLAG_RKEY_NEG;
+ 		llc->err_mask = err_mask;
+ 	}
+ 
+ 	llc->hd.flags |= SMC_LLC_FLAG_RESP;
+ 	smc_llc_send_message(link, llc);
  }
  
 -/* flush the llc event queue */
 -void smc_llc_event_flush(struct smc_link_group *lgr)
 -{
 -	struct smc_llc_qentry *qentry, *q;
 -
 -	spin_lock_bh(&lgr->llc_event_q_lock);
 -	list_for_each_entry_safe(qentry, q, &lgr->llc_event_q, list) {
 -		list_del_init(&qentry->list);
 -		kfree(qentry);
 -	}
 -	spin_unlock_bh(&lgr->llc_event_q_lock);
 -}
 -
 -static void smc_llc_event_handler(struct smc_llc_qentry *qentry)
 +static void smc_llc_rx_handler(struct ib_wc *wc, void *buf)
  {
 -	union smc_llc_msg *llc = &qentry->msg;
 -	struct smc_link *link = qentry->link;
 +	struct smc_link *link = (struct smc_link *)wc->qp->qp_context;
 +	union smc_llc_msg *llc = buf;
  
 -	if (!smc_link_usable(link))
 -		goto out;
 +	if (wc->byte_len < sizeof(*llc))
 +		return; /* short message */
 +	if (llc->raw.hdr.length != sizeof(*llc))
 +		return; /* invalid message */
 +	if (link->state == SMC_LNK_INACTIVE)
 +		return; /* link not active, drop msg */
  
  	switch (llc->raw.hdr.common.type) {
  	case SMC_LLC_TEST_LINK:
@@@ -588,6 -536,103 +633,106 @@@
  		smc_llc_rx_delete_rkey(link, &llc->delete_rkey);
  		break;
  	}
++<<<<<<< HEAD
++=======
+ out:
+ 	kfree(qentry);
+ }
+ 
+ /* worker to process llc messages on the event queue */
+ static void smc_llc_event_work(struct work_struct *work)
+ {
+ 	struct smc_link_group *lgr = container_of(work, struct smc_link_group,
+ 						  llc_event_work);
+ 	struct smc_llc_qentry *qentry;
+ 
+ again:
+ 	spin_lock_bh(&lgr->llc_event_q_lock);
+ 	if (!list_empty(&lgr->llc_event_q)) {
+ 		qentry = list_first_entry(&lgr->llc_event_q,
+ 					  struct smc_llc_qentry, list);
+ 		list_del_init(&qentry->list);
+ 		spin_unlock_bh(&lgr->llc_event_q_lock);
+ 		smc_llc_event_handler(qentry);
+ 		goto again;
+ 	}
+ 	spin_unlock_bh(&lgr->llc_event_q_lock);
+ }
+ 
+ /* process llc responses in tasklet context */
+ static void smc_llc_rx_response(struct smc_link *link, union smc_llc_msg *llc)
+ {
+ 	int rc = 0;
+ 
+ 	switch (llc->raw.hdr.common.type) {
+ 	case SMC_LLC_TEST_LINK:
+ 		if (link->state == SMC_LNK_ACTIVE)
+ 			complete(&link->llc_testlink_resp);
+ 		break;
+ 	case SMC_LLC_CONFIRM_LINK:
+ 		if (!(llc->raw.hdr.flags & SMC_LLC_FLAG_NO_RMBE_EYEC))
+ 			rc = ENOTSUPP;
+ 		if (link->lgr->role == SMC_SERV &&
+ 		    link->state == SMC_LNK_ACTIVATING) {
+ 			link->llc_confirm_resp_rc = rc;
+ 			complete(&link->llc_confirm_resp);
+ 		}
+ 		break;
+ 	case SMC_LLC_ADD_LINK:
+ 		if (link->state == SMC_LNK_ACTIVATING)
+ 			complete(&link->llc_add_resp);
+ 		break;
+ 	case SMC_LLC_DELETE_LINK:
+ 		if (link->lgr->role == SMC_SERV)
+ 			smc_lgr_schedule_free_work_fast(link->lgr);
+ 		break;
+ 	case SMC_LLC_CONFIRM_RKEY:
+ 		link->llc_confirm_rkey_resp_rc = llc->raw.hdr.flags &
+ 						 SMC_LLC_FLAG_RKEY_NEG;
+ 		complete(&link->llc_confirm_rkey_resp);
+ 		break;
+ 	case SMC_LLC_CONFIRM_RKEY_CONT:
+ 		/* unused as long as we don't send this type of msg */
+ 		break;
+ 	case SMC_LLC_DELETE_RKEY:
+ 		link->llc_delete_rkey_resp_rc = llc->raw.hdr.flags &
+ 						SMC_LLC_FLAG_RKEY_NEG;
+ 		complete(&link->llc_delete_rkey_resp);
+ 		break;
+ 	}
+ }
+ 
+ /* copy received msg and add it to the event queue */
+ static void smc_llc_rx_handler(struct ib_wc *wc, void *buf)
+ {
+ 	struct smc_link *link = (struct smc_link *)wc->qp->qp_context;
+ 	struct smc_link_group *lgr = link->lgr;
+ 	struct smc_llc_qentry *qentry;
+ 	union smc_llc_msg *llc = buf;
+ 	unsigned long flags;
+ 
+ 	if (wc->byte_len < sizeof(*llc))
+ 		return; /* short message */
+ 	if (llc->raw.hdr.length != sizeof(*llc))
+ 		return; /* invalid message */
+ 
+ 	/* process responses immediately */
+ 	if (llc->raw.hdr.flags & SMC_LLC_FLAG_RESP) {
+ 		smc_llc_rx_response(link, llc);
+ 		return;
+ 	}
+ 
+ 	qentry = kmalloc(sizeof(*qentry), GFP_ATOMIC);
+ 	if (!qentry)
+ 		return;
+ 	qentry->link = link;
+ 	INIT_LIST_HEAD(&qentry->list);
+ 	memcpy(&qentry->msg, llc, sizeof(union smc_llc_msg));
+ 	spin_lock_irqsave(&lgr->llc_event_q_lock, flags);
+ 	list_add_tail(&qentry->list, &lgr->llc_event_q);
+ 	spin_unlock_irqrestore(&lgr->llc_event_q_lock, flags);
+ 	schedule_work(&link->lgr->llc_event_work);
++>>>>>>> ef79d439cd12 (net/smc: process llc responses in tasklet context)
  }
  
  /***************************** worker, utils *********************************/
@@@ -636,10 -675,11 +781,10 @@@ int smc_llc_link_init(struct smc_link *
  	init_completion(&link->llc_confirm_resp);
  	init_completion(&link->llc_add);
  	init_completion(&link->llc_add_resp);
- 	init_completion(&link->llc_confirm_rkey);
- 	init_completion(&link->llc_delete_rkey);
+ 	init_completion(&link->llc_confirm_rkey_resp);
+ 	init_completion(&link->llc_delete_rkey_resp);
  	mutex_init(&link->llc_delete_rkey_mutex);
  	init_completion(&link->llc_testlink_resp);
 -	INIT_WORK(&link->lgr->llc_event_work, smc_llc_event_work);
  	INIT_DELAYED_WORK(&link->llc_testlink_wrk, smc_llc_testlink_work);
  	return 0;
  }
diff --git a/net/smc/smc_core.h b/net/smc/smc_core.h
index d8e041838cfe..d52e4860632d 100644
--- a/net/smc/smc_core.h
+++ b/net/smc/smc_core.h
@@ -129,10 +129,10 @@ struct smc_link {
 	struct delayed_work	llc_testlink_wrk; /* testlink worker */
 	struct completion	llc_testlink_resp; /* wait for rx of testlink */
 	int			llc_testlink_time; /* testlink interval */
-	struct completion	llc_confirm_rkey; /* wait 4 rx of cnf rkey */
-	int			llc_confirm_rkey_rc; /* rc from cnf rkey msg */
-	struct completion	llc_delete_rkey; /* wait 4 rx of del rkey */
-	int			llc_delete_rkey_rc; /* rc from del rkey msg */
+	struct completion	llc_confirm_rkey_resp; /* w4 rx of cnf rkey */
+	int			llc_confirm_rkey_resp_rc; /* rc from cnf rkey */
+	struct completion	llc_delete_rkey_resp; /* w4 rx of del rkey */
+	int			llc_delete_rkey_resp_rc; /* rc from del rkey */
 	struct mutex		llc_delete_rkey_mutex; /* serialize usage */
 };
 
* Unmerged path net/smc/smc_llc.c
