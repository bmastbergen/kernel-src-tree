drivers/iommu: Take a ref to the IOMMU driver prior to ->add_device()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Will Deacon <will@kernel.org>
commit 25f003de987aed630db265ceae9cd978537a3f80
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/25f003de.failed

To avoid accidental removal of an active IOMMU driver module, take a
reference to the driver module in 'iommu_probe_device()' immediately
prior to invoking the '->add_device()' callback and hold it until the
after the device has been removed by '->remove_device()'.

	Suggested-by: Joerg Roedel <joro@8bytes.org>
	Signed-off-by: Will Deacon <will@kernel.org>
	Tested-by: John Garry <john.garry@huawei.com> # smmu v3
	Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit 25f003de987aed630db265ceae9cd978537a3f80)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/iommu.c
#	include/linux/iommu.h
diff --cc drivers/iommu/iommu.c
index be043063e8fb,32ceda1d5031..000000000000
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@@ -34,6 -21,8 +34,11 @@@
  #include <linux/pci.h>
  #include <linux/bitops.h>
  #include <linux/property.h>
++<<<<<<< HEAD
++=======
+ #include <linux/fsl/mc.h>
+ #include <linux/module.h>
++>>>>>>> 25f003de987a (drivers/iommu: Take a ref to the IOMMU driver prior to ->add_device())
  #include <trace/events/iommu.h>
  
  static struct kset *iommu_group_kset;
@@@ -165,13 -177,30 +170,33 @@@ void iommu_device_unregister(struct iom
  int iommu_probe_device(struct device *dev)
  {
  	const struct iommu_ops *ops = dev->bus->iommu_ops;
 -	int ret;
 +	int ret = -EINVAL;
  
  	WARN_ON(dev->iommu_group);
 -	if (!ops)
 -		return -EINVAL;
  
++<<<<<<< HEAD
 +	if (ops)
 +		ret = ops->add_device(dev);
++=======
+ 	if (!iommu_get_dev_param(dev))
+ 		return -ENOMEM;
  
+ 	if (!try_module_get(ops->owner)) {
+ 		ret = -EINVAL;
+ 		goto err_free_dev_param;
+ 	}
+ 
+ 	ret = ops->add_device(dev);
+ 	if (ret)
+ 		goto err_module_put;
++>>>>>>> 25f003de987a (drivers/iommu: Take a ref to the IOMMU driver prior to ->add_device())
+ 
+ 	return 0;
+ 
+ err_module_put:
+ 	module_put(ops->owner);
+ err_free_dev_param:
+ 	iommu_free_dev_param(dev);
  	return ret;
  }
  
@@@ -181,6 -210,11 +206,14 @@@ void iommu_release_device(struct devic
  
  	if (dev->iommu_group)
  		ops->remove_device(dev);
++<<<<<<< HEAD
++=======
+ 
+ 	if (dev->iommu_param) {
+ 		module_put(ops->owner);
+ 		iommu_free_dev_param(dev);
+ 	}
++>>>>>>> 25f003de987a (drivers/iommu: Take a ref to the IOMMU driver prior to ->add_device())
  }
  
  static struct iommu_domain *__iommu_domain_alloc(struct bus_type *bus,
diff --cc include/linux/iommu.h
index 8e26403172ec,e9f94d3f7a04..000000000000
--- a/include/linux/iommu.h
+++ b/include/linux/iommu.h
@@@ -257,7 -244,12 +257,16 @@@ struct iommu_iotlb_gather 
   * @sva_bind: Bind process address space to device
   * @sva_unbind: Unbind process address space from device
   * @sva_get_pasid: Get PASID associated to a SVA handle
++<<<<<<< HEAD
 + * @pgsize_bitmap: bitmap of all possible supported page sizes
++=======
+  * @page_response: handle page request response
+  * @cache_invalidate: invalidate translation caches
+  * @sva_bind_gpasid: bind guest pasid and mm
+  * @sva_unbind_gpasid: unbind guest pasid and mm
+  * @pgsize_bitmap: bitmap of all possible supported page sizes
+  * @owner: Driver module providing these ops
++>>>>>>> 25f003de987a (drivers/iommu: Take a ref to the IOMMU driver prior to ->add_device())
   */
  struct iommu_ops {
  	bool (*capable)(enum iommu_cap);
@@@ -324,9 -307,19 +333,10 @@@
  				      void *drvdata);
  	void (*sva_unbind)(struct iommu_sva *handle);
  	int (*sva_get_pasid)(struct iommu_sva *handle);
 -
 -	int (*page_response)(struct device *dev,
 -			     struct iommu_fault_event *evt,
 -			     struct iommu_page_response *msg);
 -	int (*cache_invalidate)(struct iommu_domain *domain, struct device *dev,
 -				struct iommu_cache_invalidate_info *inv_info);
 -	int (*sva_bind_gpasid)(struct iommu_domain *domain,
 -			struct device *dev, struct iommu_gpasid_bind_data *data);
 -
 -	int (*sva_unbind_gpasid)(struct device *dev, int pasid);
 +	) /* RH_KABI_BROKEN_INSERT_BLOCK */
  
  	unsigned long pgsize_bitmap;
+ 	struct module *owner;
  };
  
  /**
* Unmerged path drivers/iommu/iommu.c
* Unmerged path include/linux/iommu.h
