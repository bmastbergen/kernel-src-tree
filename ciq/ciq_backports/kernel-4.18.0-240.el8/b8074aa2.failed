PCI: Convert pci_resource_to_user() to a weak function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Denis Efremov <efremov@linux.com>
commit b8074aa2460b535915e8f65bf83c4bcb4220f804
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b8074aa2.failed

Convert pci_resource_to_user() to a weak function so the existing
architecture-specific implementations will automatically override the
generic one.  This allows us to remove HAVE_ARCH_PCI_RESOURCE_TO_USER
definitions and avoid the conditional compilation for this single function.

Link: https://lore.kernel.org/r/20190729101401.28068-1-efremov@linux.com
Link: https://lore.kernel.org/r/20190729101401.28068-2-efremov@linux.com
Link: https://lore.kernel.org/r/20190729101401.28068-3-efremov@linux.com
Link: https://lore.kernel.org/r/20190729101401.28068-4-efremov@linux.com
Link: https://lore.kernel.org/r/20190729101401.28068-5-efremov@linux.com
Link: https://lore.kernel.org/r/20190729101401.28068-6-efremov@linux.com
	Signed-off-by: Denis Efremov <efremov@linux.com>
[bhelgaas: squash into one commit]
	Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
	Acked-by: Paul Burton <paul.burton@mips.com>	# MIPS
(cherry picked from commit b8074aa2460b535915e8f65bf83c4bcb4220f804)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/sparc/include/asm/pci.h
#	drivers/pci/pci.c
diff --cc arch/sparc/include/asm/pci.h
index cad79a6ce0e4,4deddf430e5d..000000000000
--- a/arch/sparc/include/asm/pci.h
+++ b/arch/sparc/include/asm/pci.h
@@@ -1,9 -1,52 +1,56 @@@
  /* SPDX-License-Identifier: GPL-2.0 */
  #ifndef ___ASM_SPARC_PCI_H
  #define ___ASM_SPARC_PCI_H
++<<<<<<< HEAD
 +#if defined(__sparc__) && defined(__arch64__)
 +#include <asm/pci_64.h>
++=======
+ 
+ 
+ /* Can be used to override the logic in pci_scan_bus for skipping
+  * already-configured bus numbers - to be used for buggy BIOSes
+  * or architectures with incomplete PCI setup by the loader.
+  */
+ #define pcibios_assign_all_busses()	0
+ 
+ #define PCIBIOS_MIN_IO		0UL
+ #define PCIBIOS_MIN_MEM		0UL
+ 
+ #define PCI_IRQ_NONE		0xffffffff
+ 
+ 
+ #ifdef CONFIG_SPARC64
+ 
+ /* PCI IOMMU mapping bypass support. */
+ 
+ /* PCI 64-bit addressing works for all slots on all controller
+  * types on sparc64.  However, it requires that the device
+  * can drive enough of the 64 bits.
+  */
+ #define PCI64_REQUIRED_MASK	(~(u64)0)
+ #define PCI64_ADDR_BASE		0xfffc000000000000UL
+ 
+ /* Return the index of the PCI controller for device PDEV. */
+ int pci_domain_nr(struct pci_bus *bus);
+ static inline int pci_proc_domain(struct pci_bus *bus)
+ {
+ 	return 1;
+ }
+ 
+ /* Platform support for /proc/bus/pci/X/Y mmap()s. */
+ #define HAVE_PCI_MMAP
+ #define arch_can_pci_mmap_io()	1
+ #define HAVE_ARCH_PCI_GET_UNMAPPED_AREA
+ #define get_pci_unmapped_area get_fb_unmapped_area
+ #endif /* CONFIG_SPARC64 */
+ 
+ #if defined(CONFIG_SPARC64) || defined(CONFIG_LEON_PCI)
+ static inline int pci_get_legacy_ide_irq(struct pci_dev *dev, int channel)
+ {
+ 	return PCI_IRQ_NONE;
+ }
++>>>>>>> b8074aa2460b (PCI: Convert pci_resource_to_user() to a weak function)
  #else
 -#include <asm-generic/pci.h>
 +#include <asm/pci_32.h>
 +#endif
  #endif
 -
 -#endif /* ___ASM_SPARC_PCI_H */
diff --cc drivers/pci/pci.c
index f0cbb9e99e2d,da3241bb4479..000000000000
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@@ -6048,7 -5932,20 +6048,24 @@@ resource_size_t __weak pcibios_default_
  	return 0;
  }
  
++<<<<<<< HEAD
 +static char *resource_alignment_param;
++=======
+ /*
+  * Arches that don't want to expose struct resource to userland as-is in
+  * sysfs and /proc can implement their own pci_resource_to_user().
+  */
+ void __weak pci_resource_to_user(const struct pci_dev *dev, int bar,
+ 				 const struct resource *rsrc,
+ 				 resource_size_t *start, resource_size_t *end)
+ {
+ 	*start = rsrc->start;
+ 	*end = rsrc->end;
+ }
+ 
+ #define RESOURCE_ALIGNMENT_PARAM_SIZE COMMAND_LINE_SIZE
+ static char resource_alignment_param[RESOURCE_ALIGNMENT_PARAM_SIZE] = {0};
++>>>>>>> b8074aa2460b (PCI: Convert pci_resource_to_user() to a weak function)
  static DEFINE_SPINLOCK(resource_alignment_lock);
  
  /**
diff --git a/arch/microblaze/include/asm/pci.h b/arch/microblaze/include/asm/pci.h
index 859c19828dd4..3e91b568b026 100644
--- a/arch/microblaze/include/asm/pci.h
+++ b/arch/microblaze/include/asm/pci.h
@@ -69,8 +69,6 @@ extern pgprot_t	pci_phys_mem_access_prot(struct file *file,
 					 unsigned long size,
 					 pgprot_t prot);
 
-#define HAVE_ARCH_PCI_RESOURCE_TO_USER
-
 /* This part of code was originally in xilinx-pci.h */
 #ifdef CONFIG_PCI_XILINX
 extern void __init xilinx_pci_init(void);
diff --git a/arch/mips/include/asm/pci.h b/arch/mips/include/asm/pci.h
index 436099883022..6f48649201c5 100644
--- a/arch/mips/include/asm/pci.h
+++ b/arch/mips/include/asm/pci.h
@@ -108,7 +108,6 @@ extern unsigned long PCIBIOS_MIN_MEM;
 
 #define HAVE_PCI_MMAP
 #define ARCH_GENERIC_PCI_MMAP_RESOURCE
-#define HAVE_ARCH_PCI_RESOURCE_TO_USER
 
 /*
  * Dynamic DMA mapping stuff.
diff --git a/arch/powerpc/include/asm/pci.h b/arch/powerpc/include/asm/pci.h
index 0c72f1897063..0e4f146b5e74 100644
--- a/arch/powerpc/include/asm/pci.h
+++ b/arch/powerpc/include/asm/pci.h
@@ -117,8 +117,6 @@ extern pgprot_t	pci_phys_mem_access_prot(struct file *file,
 					 unsigned long size,
 					 pgprot_t prot);
 
-#define HAVE_ARCH_PCI_RESOURCE_TO_USER
-
 extern resource_size_t pcibios_io_space_offset(struct pci_controller *hose);
 extern void pcibios_setup_bus_devices(struct pci_bus *bus);
 extern void pcibios_setup_bus_self(struct pci_bus *bus);
* Unmerged path arch/sparc/include/asm/pci.h
* Unmerged path drivers/pci/pci.c
diff --git a/include/linux/pci.h b/include/linux/pci.h
index cceda893502d..464aab5ced57 100644
--- a/include/linux/pci.h
+++ b/include/linux/pci.h
@@ -1852,25 +1852,9 @@ static inline const char *pci_name(const struct pci_dev *pdev)
 	return dev_name(&pdev->dev);
 }
 
-
-/*
- * Some archs don't want to expose struct resource to userland as-is
- * in sysfs and /proc
- */
-#ifdef HAVE_ARCH_PCI_RESOURCE_TO_USER
 void pci_resource_to_user(const struct pci_dev *dev, int bar,
 			  const struct resource *rsrc,
 			  resource_size_t *start, resource_size_t *end);
-#else
-static inline void pci_resource_to_user(const struct pci_dev *dev, int bar,
-		const struct resource *rsrc, resource_size_t *start,
-		resource_size_t *end)
-{
-	*start = rsrc->start;
-	*end = rsrc->end;
-}
-#endif /* HAVE_ARCH_PCI_RESOURCE_TO_USER */
-
 
 /*
  * The world is not perfect and supplies us with broken PCI devices.
