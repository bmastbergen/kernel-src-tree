ima: Call ima_calc_boot_aggregate() in ima_eventdigest_init()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Roberto Sassu <roberto.sassu@huawei.com>
commit 6cc7c266e5b47d3cd2b5bb7fd3aac4e6bb2dd1d2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6cc7c266.failed

If the template field 'd' is chosen and the digest to be added to the
measurement entry was not calculated with SHA1 or MD5, it is
recalculated with SHA1, by using the passed file descriptor. However, this
cannot be done for boot_aggregate, because there is no file descriptor.

This patch adds a call to ima_calc_boot_aggregate() in
ima_eventdigest_init(), so that the digest can be recalculated also for the
boot_aggregate entry.

	Cc: stable@vger.kernel.org # 3.13.x
Fixes: 3ce1217d6cd5d ("ima: define template fields library and new helpers")
	Reported-by: Takashi Iwai <tiwai@suse.de>
	Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
	Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
(cherry picked from commit 6cc7c266e5b47d3cd2b5bb7fd3aac4e6bb2dd1d2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	security/integrity/ima/ima.h
diff --cc security/integrity/ima/ima.h
index eaf37a5d1609,df93ac258e01..000000000000
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@@ -54,8 -52,12 +54,9 @@@ extern int ima_policy_flag
  
  /* set during initialization */
  extern int ima_hash_algo;
 -extern int ima_sha1_idx __ro_after_init;
 -extern int ima_hash_algo_idx __ro_after_init;
 -extern int ima_extra_slots __ro_after_init;
  extern int ima_appraise;
  extern struct tpm_chip *ima_tpm_chip;
+ extern const char boot_aggregate_name[];
  
  /* IMA event related data */
  struct ima_event_data {
@@@ -139,9 -144,8 +140,14 @@@ int ima_calc_file_hash(struct file *fil
  int ima_calc_buffer_hash(const void *buf, loff_t len,
  			 struct ima_digest_data *hash);
  int ima_calc_field_array_hash(struct ima_field_data *field_data,
++<<<<<<< HEAD
 +			      struct ima_template_desc *desc, int num_fields,
 +			      struct ima_digest_data *hash);
 +int __init ima_calc_boot_aggregate(struct ima_digest_data *hash);
++=======
+ 			      struct ima_template_entry *entry);
+ int ima_calc_boot_aggregate(struct ima_digest_data *hash);
++>>>>>>> 6cc7c266e5b4 (ima: Call ima_calc_boot_aggregate() in ima_eventdigest_init())
  void ima_add_violation(struct file *file, const unsigned char *filename,
  		       struct integrity_iint_cache *iint,
  		       const char *op, const char *cause);
* Unmerged path security/integrity/ima/ima.h
diff --git a/security/integrity/ima/ima_crypto.c b/security/integrity/ima/ima_crypto.c
index f05e0e76632d..3d4d22e0d6cf 100644
--- a/security/integrity/ima/ima_crypto.c
+++ b/security/integrity/ima/ima_crypto.c
@@ -671,8 +671,8 @@ static void __init ima_pcrread(u32 idx, struct tpm_digest *d)
  * hash algorithm for reading the TPM PCRs as for calculating the boot
  * aggregate digest as stored in the measurement list.
  */
-static int __init ima_calc_boot_aggregate_tfm(char *digest, u16 alg_id,
-					      struct crypto_shash *tfm)
+static int ima_calc_boot_aggregate_tfm(char *digest, u16 alg_id,
+				       struct crypto_shash *tfm)
 {
 	struct tpm_digest d = { .alg_id = alg_id, .digest = {0} };
 	int rc;
@@ -701,7 +701,7 @@ static int __init ima_calc_boot_aggregate_tfm(char *digest, u16 alg_id,
 	return rc;
 }
 
-int __init ima_calc_boot_aggregate(struct ima_digest_data *hash)
+int ima_calc_boot_aggregate(struct ima_digest_data *hash)
 {
 	struct crypto_shash *tfm;
 	u16 crypto_id, alg_id;
diff --git a/security/integrity/ima/ima_init.c b/security/integrity/ima/ima_init.c
index 6ebba47b401c..62d029523293 100644
--- a/security/integrity/ima/ima_init.c
+++ b/security/integrity/ima/ima_init.c
@@ -25,7 +25,7 @@
 #include "ima.h"
 
 /* name for boot aggregate entry */
-static const char boot_aggregate_name[] = "boot_aggregate";
+const char boot_aggregate_name[] = "boot_aggregate";
 struct tpm_chip *ima_tpm_chip;
 
 /* Add the boot aggregate to the IMA measurement list and extend
diff --git a/security/integrity/ima/ima_template_lib.c b/security/integrity/ima/ima_template_lib.c
index b6852b020d9c..e962314da0e8 100644
--- a/security/integrity/ima/ima_template_lib.c
+++ b/security/integrity/ima/ima_template_lib.c
@@ -290,6 +290,24 @@ int ima_eventdigest_init(struct ima_event_data *event_data,
 		goto out;
 	}
 
+	if ((const char *)event_data->filename == boot_aggregate_name) {
+		if (ima_tpm_chip) {
+			hash.hdr.algo = HASH_ALGO_SHA1;
+			result = ima_calc_boot_aggregate(&hash.hdr);
+
+			/* algo can change depending on available PCR banks */
+			if (!result && hash.hdr.algo != HASH_ALGO_SHA1)
+				result = -EINVAL;
+
+			if (result < 0)
+				memset(&hash, 0, sizeof(hash));
+		}
+
+		cur_digest = hash.hdr.digest;
+		cur_digestsize = hash_digest_size[HASH_ALGO_SHA1];
+		goto out;
+	}
+
 	if (!event_data->file)	/* missing info to re-calculate the digest */
 		return -EINVAL;
 
