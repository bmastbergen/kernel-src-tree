perf maps: Mark ksymbol DSOs with kernel type

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@redhat.com>
commit 4a4eb6154d67f7766cc7eb74e9f1db424073e832
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4a4eb615.failed

We add ksymbol map into machine->kmaps, so it needs to be created as
'struct kmap', which is dependent on its dso having kernel type.

	Reported-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Tested-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Tested-by: Kim Phillips <kim.phillips@amd.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20200210200847.GA36715@krava
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 4a4eb6154d67f7766cc7eb74e9f1db424073e832)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/machine.c
diff --cc tools/perf/util/machine.c
index 40cbcc9a1474,0ad026561c7f..000000000000
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@@ -716,17 -724,24 +716,30 @@@ static int machine__process_ksymbol_reg
  					     struct perf_sample *sample __maybe_unused)
  {
  	struct symbol *sym;
 -	struct map *map = maps__find(&machine->kmaps, event->ksymbol.addr);
 +	struct map *map;
  
 +	map = map_groups__find(&machine->kmaps, event->ksymbol_event.addr);
  	if (!map) {
++<<<<<<< HEAD
 +		map = dso__new_map(event->ksymbol_event.name);
 +		if (!map)
++=======
+ 		struct dso *dso = dso__new(event->ksymbol.name);
+ 
+ 		if (dso) {
+ 			dso->kernel = DSO_TYPE_KERNEL;
+ 			map = map__new2(0, dso);
+ 		}
+ 
+ 		if (!dso || !map) {
+ 			dso__put(dso);
++>>>>>>> 4a4eb6154d67 (perf maps: Mark ksymbol DSOs with kernel type)
  			return -ENOMEM;
+ 		}
  
 -		map->start = event->ksymbol.addr;
 -		map->end = map->start + event->ksymbol.len;
 -		maps__insert(&machine->kmaps, map);
 +		map->start = event->ksymbol_event.addr;
 +		map->end = map->start + event->ksymbol_event.len;
 +		map_groups__insert(&machine->kmaps, map);
  	}
  
  	sym = symbol__new(map->map_ip(map, map->start),
* Unmerged path tools/perf/util/machine.c
