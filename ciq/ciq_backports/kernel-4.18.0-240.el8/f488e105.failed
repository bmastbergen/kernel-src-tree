sched/core: Make pick_next_task_idle() more consistent

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Peter Zijlstra <peterz@infradead.org>
commit f488e1057bb97b881ed317557dc5e62ff8747393
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f488e105.failed

Only pick_next_task_fair() needs the @prev and @rf argument; these are
required to implement the cpu-cgroup optimization. None of the other
pick_next_task() methods need this. Make pick_next_task_idle() more
consistent.

	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Cc: Linus Torvalds <torvalds@linux-foundation.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Thomas Gleixner <tglx@linutronix.de>
	Cc: bsegall@google.com
	Cc: dietmar.eggemann@arm.com
	Cc: juri.lelli@redhat.com
	Cc: ktkhai@virtuozzo.com
	Cc: mgorman@suse.de
	Cc: qais.yousef@arm.com
	Cc: qperret@google.com
	Cc: rostedt@goodmis.org
	Cc: valentin.schneider@arm.com
	Cc: vincent.guittot@linaro.org
Link: https://lkml.kernel.org/r/20191108131909.545730862@infradead.org
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
(cherry picked from commit f488e1057bb97b881ed317557dc5e62ff8747393)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/idle.c
diff --cc kernel/sched/idle.c
index b77157291d47,179d1d4ac5a6..000000000000
--- a/kernel/sched/idle.c
+++ b/kernel/sched/idle.c
@@@ -403,7 -396,8 +403,12 @@@ pick_next_task_idle(struct rq *rq, stru
  {
  	struct task_struct *next = rq->idle;
  
++<<<<<<< HEAD
 +	put_prev_task(rq, prev);
++=======
+ 	WARN_ON_ONCE(prev || rf);
+ 
++>>>>>>> f488e1057bb9 (sched/core: Make pick_next_task_idle() more consistent)
  	set_next_task_idle(rq, next);
  
  	return next;
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 9079f8ce0c0d..3d30fb96c256 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3344,8 +3344,10 @@ pick_next_task(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
 			goto again;
 
 		/* Assumes fair_sched_class->next == idle_sched_class */
-		if (unlikely(!p))
-			p = idle_sched_class.pick_next_task(rq, prev, rf);
+		if (unlikely(!p)) {
+			put_prev_task(rq, prev);
+			p = idle_sched_class.pick_next_task(rq, NULL, NULL);
+		}
 
 		return p;
 	}
* Unmerged path kernel/sched/idle.c
