powerpc/powernv: Move core and fadump_release_opalcore under new kobject

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sourabh Jain <sourabhjain@linux.ibm.com>
commit 8852c07a881b0acfd3d75cf3927adaab815c4ee5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/8852c07a.failed

The /sys/firmware/opal/core and /sys/kernel/fadump_release_opalcore
sysfs files are used to export and release the OPAL memory on PowerNV
platform. let's organize them into a new kobject under
/sys/firmware/opal/mpipl/ directory.

A symlink is added to maintain the backward compatibility for
/sys/firmware/opal/core sysfs file.

	Signed-off-by: Sourabh Jain <sourabhjain@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/20191211160910.21656-5-sourabhjain@linux.ibm.com
(cherry picked from commit 8852c07a881b0acfd3d75cf3927adaab815c4ee5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	Documentation/powerpc/firmware-assisted-dump.txt
diff --cc Documentation/powerpc/firmware-assisted-dump.txt
index 63b10b17678e,345a3405206e..000000000000
--- a/Documentation/powerpc/firmware-assisted-dump.txt
+++ b/Documentation/powerpc/firmware-assisted-dump.txt
@@@ -108,16 -112,16 +108,16 @@@ to ensure that crash data is preserved 
  
  -- On OPAL based machines (PowerNV), if the kernel is build with
     CONFIG_OPAL_CORE=y, OPAL memory at the time of crash is also
-    exported as /sys/firmware/opal/core file. This procfs file is
+    exported as /sys/firmware/opal/mpipl/core file. This procfs file is
     helpful in debugging OPAL crashes with GDB. The kernel memory
     used for exporting this procfs file can be released by echo'ing
-    '1' to /sys/kernel/fadump_release_opalcore node.
+    '1' to /sys/firmware/opal/mpipl/release_core node.
  
     e.g.
-      # echo 1 > /sys/kernel/fadump_release_opalcore
+      # echo 1 > /sys/firmware/opal/mpipl/release_core
  
  Implementation details:
 ------------------------
 +----------------------
  
  During boot, a check is made to see if firmware supports
  this feature on that particular machine. If it does, then
@@@ -239,57 -244,57 +239,103 @@@ Sysfs/debugfs files
  Firmware-assisted dump feature uses sysfs file system to hold
  the control files and debugfs file to display memory reserved region.
  
++<<<<<<< HEAD:Documentation/powerpc/firmware-assisted-dump.txt
 + /sys/kernel/fadump_release_opalcore
++=======
+ Here is the list of files under kernel sysfs:
+ 
+  /sys/kernel/fadump_enabled
+     This is used to display the FADump status.
+ 
+     - 0 = FADump is disabled
+     - 1 = FADump is enabled
+ 
+     This interface can be used by kdump init scripts to identify if
+     FADump is enabled in the kernel and act accordingly.
+ 
+  /sys/kernel/fadump_registered
+     This is used to display the FADump registration status as well
+     as to control (start/stop) the FADump registration.
+ 
+     - 0 = FADump is not registered.
+     - 1 = FADump is registered and ready to handle system crash.
+ 
+     To register FADump echo 1 > /sys/kernel/fadump_registered and
+     echo 0 > /sys/kernel/fadump_registered for un-register and stop the
+     FADump. Once the FADump is un-registered, the system crash will not
+     be handled and vmcore will not be captured. This interface can be
+     easily integrated with kdump service start/stop.
+ 
+  /sys/kernel/fadump_release_mem
+     This file is available only when FADump is active during
+     second kernel. This is used to release the reserved memory
+     region that are held for saving crash dump. To release the
+     reserved memory echo 1 to it::
+ 
+ 	echo 1  > /sys/kernel/fadump_release_mem
+ 
+     After echo 1, the content of the /sys/kernel/debug/powerpc/fadump_region
+     file will change to reflect the new memory reservations.
+ 
+     The existing userspace tools (kdump infrastructure) can be easily
+     enhanced to use this interface to release the memory reserved for
+     dump and continue without 2nd reboot.
+ 
+ Note: /sys/kernel/fadump_release_opalcore sysfs has moved to
+       /sys/firmware/opal/mpipl/release_core
+ 
+  /sys/firmware/opal/mpipl/release_core
++>>>>>>> 8852c07a881b (powerpc/powernv: Move core and fadump_release_opalcore under new kobject):Documentation/powerpc/firmware-assisted-dump.rst
  
      This file is available only on OPAL based machines when FADump is
      active during capture kernel. This is used to release the memory
-     used by the kernel to export /sys/firmware/opal/core file. To
+     used by the kernel to export /sys/firmware/opal/mpipl/core file. To
      release this memory, echo '1' to it:
  
-     echo 1  > /sys/kernel/fadump_release_opalcore
+     echo 1  > /sys/firmware/opal/mpipl/release_core
  
 +Here is the list of files under kernel sysfs:
 +
 + /sys/kernel/fadump_enabled
 +
 +    This is used to display the FADump status.
 +
 +    0 = FADump is disabled
 +    1 = FADump is enabled
 +
 +    This interface can be used by kdump init scripts to identify if
 +    FADump is enabled in the kernel and act accordingly.
 +
 + /sys/kernel/fadump_registered
 +
 +    This is used to display the FADump registration status as well
 +    as to control (start/stop) the FADump registration.
 +
 +    0 = FADump is not registered.
 +    1 = FADump is registered and ready to handle system crash.
 +
 +    To register FADump echo 1 > /sys/kernel/fadump_registered and
 +    echo 0 > /sys/kernel/fadump_registered for un-register and stop the
 +    FADump. Once the FADump is un-registered, the system crash will not
 +    be handled and vmcore will not be captured. This interface can be
 +    easily integrated with kdump service start/stop.
 +
 + /sys/kernel/fadump_release_mem
 +
 +    This file is available only when FADump is active during
 +    second kernel. This is used to release the reserved memory
 +    region that are held for saving crash dump. To release the
 +    reserved memory echo 1 to it:
 +
 +    echo 1  > /sys/kernel/fadump_release_mem
 +
 +    After echo 1, the content of the /sys/kernel/debug/powerpc/fadump_region
 +    file will change to reflect the new memory reservations.
 +
 +    The existing userspace tools (kdump infrastructure) can be easily
 +    enhanced to use this interface to release the memory reserved for
 +    dump and continue without 2nd reboot.
 +
  Here is the list of files under powerpc debugfs:
  (Assuming debugfs is mounted on /sys/kernel/debug directory.)
  
diff --git a/Documentation/ABI/testing/sysfs-kernel-fadump_release_opalcore b/Documentation/ABI/removed/sysfs-kernel-fadump_release_opalcore
similarity index 82%
rename from Documentation/ABI/testing/sysfs-kernel-fadump_release_opalcore
rename to Documentation/ABI/removed/sysfs-kernel-fadump_release_opalcore
index 53313c1d4e7a..a8d46cd0f4e6 100644
--- a/Documentation/ABI/testing/sysfs-kernel-fadump_release_opalcore
+++ b/Documentation/ABI/removed/sysfs-kernel-fadump_release_opalcore
@@ -1,3 +1,5 @@
+This ABI is moved to /sys/firmware/opal/mpipl/release_core.
+
 What:		/sys/kernel/fadump_release_opalcore
 Date:		Sep 2019
 Contact:	linuxppc-dev@lists.ozlabs.org
* Unmerged path Documentation/powerpc/firmware-assisted-dump.txt
diff --git a/arch/powerpc/platforms/powernv/opal-core.c b/arch/powerpc/platforms/powernv/opal-core.c
index ed895d82c048..6dba3b62269f 100644
--- a/arch/powerpc/platforms/powernv/opal-core.c
+++ b/arch/powerpc/platforms/powernv/opal-core.c
@@ -71,6 +71,7 @@ static LIST_HEAD(opalcore_list);
 static struct opalcore_config *oc_conf;
 static const struct opal_mpipl_fadump *opalc_metadata;
 static const struct opal_mpipl_fadump *opalc_cpu_metadata;
+struct kobject *mpipl_kobj;
 
 /*
  * Set crashing CPU's signal to SIGUSR1. if the kernel is triggered
@@ -428,7 +429,7 @@ static void opalcore_cleanup(void)
 		return;
 
 	/* Remove OPAL core sysfs file */
-	sysfs_remove_bin_file(opal_kobj, &opal_core_attr);
+	sysfs_remove_bin_file(mpipl_kobj, &opal_core_attr);
 	oc_conf->ptload_phdr = NULL;
 	oc_conf->ptload_cnt = 0;
 
@@ -563,9 +564,9 @@ static void __init opalcore_config_init(void)
 	of_node_put(np);
 }
 
-static ssize_t fadump_release_opalcore_store(struct kobject *kobj,
-					     struct kobj_attribute *attr,
-					     const char *buf, size_t count)
+static ssize_t release_core_store(struct kobject *kobj,
+				  struct kobj_attribute *attr,
+				  const char *buf, size_t count)
 {
 	int input = -1;
 
@@ -589,9 +590,23 @@ static ssize_t fadump_release_opalcore_store(struct kobject *kobj,
 	return count;
 }
 
-static struct kobj_attribute opalcore_rel_attr = __ATTR(fadump_release_opalcore,
-						0200, NULL,
-						fadump_release_opalcore_store);
+static struct kobj_attribute opalcore_rel_attr = __ATTR_WO(release_core);
+
+static struct attribute *mpipl_attr[] = {
+	&opalcore_rel_attr.attr,
+	NULL,
+};
+
+static struct bin_attribute *mpipl_bin_attr[] = {
+	&opal_core_attr,
+	NULL,
+
+};
+
+static struct attribute_group mpipl_group = {
+	.attrs = mpipl_attr,
+	.bin_attrs =  mpipl_bin_attr,
+};
 
 static int __init opalcore_init(void)
 {
@@ -609,7 +624,7 @@ static int __init opalcore_init(void)
 	 * then capture the dump.
 	 */
 	if (!(is_opalcore_usable())) {
-		pr_err("Failed to export /sys/firmware/opal/core\n");
+		pr_err("Failed to export /sys/firmware/opal/mpipl/core\n");
 		opalcore_cleanup();
 		return rc;
 	}
@@ -617,18 +632,28 @@ static int __init opalcore_init(void)
 	/* Set OPAL core file size */
 	opal_core_attr.size = oc_conf->opalcore_size;
 
+	mpipl_kobj = kobject_create_and_add("mpipl", opal_kobj);
+	if (!mpipl_kobj) {
+		pr_err("unable to create mpipl kobject\n");
+		return -ENOMEM;
+	}
+
 	/* Export OPAL core sysfs file */
-	rc = sysfs_create_bin_file(opal_kobj, &opal_core_attr);
-	if (rc != 0) {
-		pr_err("Failed to export /sys/firmware/opal/core\n");
+	rc = sysfs_create_group(mpipl_kobj, &mpipl_group);
+	if (rc) {
+		pr_err("mpipl sysfs group creation failed (%d)", rc);
 		opalcore_cleanup();
 		return rc;
 	}
-
-	rc = sysfs_create_file(kernel_kobj, &opalcore_rel_attr.attr);
+	/* The /sys/firmware/opal/core is moved to /sys/firmware/opal/mpipl/
+	 * directory, need to create symlink at old location to maintain
+	 * backward compatibility.
+	 */
+	rc = compat_only_sysfs_link_entry_to_kobj(opal_kobj, mpipl_kobj,
+						  "core", NULL);
 	if (rc) {
-		pr_warn("unable to create sysfs file fadump_release_opalcore (%d)\n",
-			rc);
+		pr_err("unable to create core symlink (%d)\n", rc);
+		return rc;
 	}
 
 	return 0;
