net: phy: Added IRQ print to phylink_bringup_phy()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Florian Fainelli <f.fainelli@gmail.com>
commit e27f178793de16ca1b421f2c3f4bc3497b2ce723
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e27f1787.failed

The information about the PHY attached to the PHYLINK instance is useful
but is missing the IRQ prints that phy_attached_info() adds.
phy_attached_info() is a bit long and it would not be possible to use
phylink_info() anyway.

	Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit e27f178793de16ca1b421f2c3f4bc3497b2ce723)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/phy/phylink.c
diff --cc drivers/net/phy/phylink.c
index 74553188de14,efabbfa4a6d3..000000000000
--- a/drivers/net/phy/phylink.c
+++ b/drivers/net/phy/phylink.c
@@@ -690,9 -762,11 +691,17 @@@ static int phylink_bringup_phy(struct p
  	phy->phylink = pl;
  	phy->phy_link_change = phylink_phy_change;
  
++<<<<<<< HEAD
 +	netdev_info(pl->netdev,
 +		    "PHY [%s] driver [%s]\n", dev_name(&phy->mdio.dev),
 +		    phy->drv->name);
++=======
+ 	irq_str = phy_attached_info_irq(phy);
+ 	phylink_info(pl,
+ 		     "PHY [%s] driver [%s] (irq=%s)\n",
+ 		     dev_name(&phy->mdio.dev), phy->drv->name, irq_str);
+ 	kfree(irq_str);
++>>>>>>> e27f178793de (net: phy: Added IRQ print to phylink_bringup_phy())
  
  	mutex_lock(&phy->lock);
  	mutex_lock(&pl->state_mutex);
diff --git a/drivers/net/phy/phy_device.c b/drivers/net/phy/phy_device.c
index 94212711c058..05417419c484 100644
--- a/drivers/net/phy/phy_device.c
+++ b/drivers/net/phy/phy_device.c
@@ -1107,9 +1107,8 @@ void phy_attached_info(struct phy_device *phydev)
 EXPORT_SYMBOL(phy_attached_info);
 
 #define ATTACHED_FMT "attached PHY driver [%s] (mii_bus:phy_addr=%s, irq=%s)"
-void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
+char *phy_attached_info_irq(struct phy_device *phydev)
 {
-	const char *drv_name = phydev->drv ? phydev->drv->name : "unbound";
 	char *irq_str;
 	char irq_num[8];
 
@@ -1126,6 +1125,14 @@ void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
 		break;
 	}
 
+	return kasprintf(GFP_KERNEL, "%s", irq_str);
+}
+EXPORT_SYMBOL(phy_attached_info_irq);
+
+void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
+{
+	const char *drv_name = phydev->drv ? phydev->drv->name : "unbound";
+	char *irq_str = phy_attached_info_irq(phydev);
 
 	if (!fmt) {
 		phydev_info(phydev, ATTACHED_FMT "\n",
@@ -1142,6 +1149,7 @@ void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
 		vprintk(fmt, ap);
 		va_end(ap);
 	}
+	kfree(irq_str);
 }
 EXPORT_SYMBOL(phy_attached_print);
 
* Unmerged path drivers/net/phy/phylink.c
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 78062139cfd6..72d51f1e9ade 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -1176,6 +1176,8 @@ static inline void phy_unlock_mdio_bus(struct phy_device *phydev)
 
 void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
 	__printf(2, 3);
+char *phy_attached_info_irq(struct phy_device *phydev)
+	__malloc;
 void phy_attached_info(struct phy_device *phydev);
 
 /* Clause 22 PHY */
