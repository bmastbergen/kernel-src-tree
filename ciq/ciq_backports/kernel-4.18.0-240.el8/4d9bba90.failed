KVM: selftests: Use kernel's list instead of homebrewed replacement

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 4d9bba9007167074504187d27fd80352eb3a04e7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4d9bba90.failed

Replace the KVM selftests' homebrewed linked lists for vCPUs and memory
regions with the kernel's 'struct list_head'.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Reviewed-by: Andrew Jones <drjones@redhat.com>
Message-Id: <20200410231707.7128-3-sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 4d9bba9007167074504187d27fd80352eb3a04e7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/kvm/lib/kvm_util.c
diff --cc tools/testing/selftests/kvm/lib/kvm_util.c
index f90b20990ff5,105ee9bc09f0..000000000000
--- a/tools/testing/selftests/kvm/lib/kvm_util.c
+++ b/tools/testing/selftests/kvm/lib/kvm_util.c
@@@ -612,13 -606,11 +607,21 @@@ void vm_userspace_mem_region_add(struc
  			(uint64_t) region->region.memory_size);
  
  	/* Confirm no region with the requested slot already exists. */
++<<<<<<< HEAD
 +	for (region = vm->userspace_mem_region_head; region;
 +		region = region->next) {
 +		if (region->region.slot == slot)
 +			break;
 +	}
 +	if (region != NULL)
 +		TEST_ASSERT(false, "A mem region with the requested slot "
++=======
+ 	list_for_each_entry(region, &vm->userspace_mem_regions, list) {
+ 		if (region->region.slot != slot)
+ 			continue;
+ 
+ 		TEST_FAIL("A mem region with the requested slot "
++>>>>>>> 4d9bba900716 (KVM: selftests: Use kernel's list instead of homebrewed replacement)
  			"already exists.\n"
  			"  requested slot: %u paddr: 0x%lx npages: 0x%lx\n"
  			"  existing slot: %u paddr: 0x%lx size: 0x%lx",
@@@ -712,20 -702,17 +713,28 @@@ memslot2region(struct kvm_vm *vm, uint3
  {
  	struct userspace_mem_region *region;
  
- 	for (region = vm->userspace_mem_region_head; region;
- 		region = region->next) {
+ 	list_for_each_entry(region, &vm->userspace_mem_regions, list) {
  		if (region->region.slot == memslot)
++<<<<<<< HEAD
 +			break;
 +	}
 +	if (region == NULL) {
 +		fprintf(stderr, "No mem region with the requested slot found,\n"
 +			"  requested slot: %u\n", memslot);
 +		fputs("---- vm dump ----\n", stderr);
 +		vm_dump(stderr, vm, 2);
 +		TEST_ASSERT(false, "Mem region not found");
++=======
+ 			return region;
++>>>>>>> 4d9bba900716 (KVM: selftests: Use kernel's list instead of homebrewed replacement)
  	}
  
- 	return region;
+ 	fprintf(stderr, "No mem region with the requested slot found,\n"
+ 		"  requested slot: %u\n", memslot);
+ 	fputs("---- vm dump ----\n", stderr);
+ 	vm_dump(stderr, vm, 2);
+ 	TEST_FAIL("Mem region not found");
+ 	return NULL;
  }
  
  /*
diff --git a/tools/testing/selftests/kvm/include/kvm_util.h b/tools/testing/selftests/kvm/include/kvm_util.h
index 34d395c8a16f..ed9572058265 100644
--- a/tools/testing/selftests/kvm/include/kvm_util.h
+++ b/tools/testing/selftests/kvm/include/kvm_util.h
@@ -12,6 +12,7 @@
 #include "test_util.h"
 
 #include "asm/kvm.h"
+#include "linux/list.h"
 #include "linux/kvm.h"
 #include <sys/ioctl.h>
 
* Unmerged path tools/testing/selftests/kvm/lib/kvm_util.c
diff --git a/tools/testing/selftests/kvm/lib/kvm_util_internal.h b/tools/testing/selftests/kvm/lib/kvm_util_internal.h
index 812c53775553..8b687a0d653a 100644
--- a/tools/testing/selftests/kvm/lib/kvm_util_internal.h
+++ b/tools/testing/selftests/kvm/lib/kvm_util_internal.h
@@ -14,7 +14,6 @@
 #define KVM_DEV_PATH		"/dev/kvm"
 
 struct userspace_mem_region {
-	struct userspace_mem_region *next, *prev;
 	struct kvm_userspace_memory_region region;
 	struct sparsebit *unused_phy_pages;
 	int fd;
@@ -22,10 +21,11 @@ struct userspace_mem_region {
 	void *host_mem;
 	void *mmap_start;
 	size_t mmap_size;
+	struct list_head list;
 };
 
 struct vcpu {
-	struct vcpu *next, *prev;
+	struct list_head list;
 	uint32_t id;
 	int fd;
 	struct kvm_run *state;
@@ -42,8 +42,8 @@ struct kvm_vm {
 	unsigned int pa_bits;
 	unsigned int va_bits;
 	uint64_t max_gfn;
-	struct vcpu *vcpu_head;
-	struct userspace_mem_region *userspace_mem_region_head;
+	struct list_head vcpus;
+	struct list_head userspace_mem_regions;
 	struct sparsebit *vpages_valid;
 	struct sparsebit *vpages_mapped;
 	bool has_irqchip;
diff --git a/tools/testing/selftests/kvm/lib/s390x/processor.c b/tools/testing/selftests/kvm/lib/s390x/processor.c
index 8eb8fd4d3140..22fc2b162fa0 100644
--- a/tools/testing/selftests/kvm/lib/s390x/processor.c
+++ b/tools/testing/selftests/kvm/lib/s390x/processor.c
@@ -279,7 +279,10 @@ void vcpu_setup(struct kvm_vm *vm, int vcpuid, int pgd_memslot, int gdt_memslot)
 
 void vcpu_dump(FILE *stream, struct kvm_vm *vm, uint32_t vcpuid, uint8_t indent)
 {
-	struct vcpu *vcpu = vm->vcpu_head;
+	struct vcpu *vcpu = vcpu_find(vm, vcpuid);
+
+	if (!vcpu)
+		return;
 
 	fprintf(stream, "%*spstate: psw: 0x%.16llx:0x%.16llx\n",
 		indent, "", vcpu->state->psw_mask, vcpu->state->psw_addr);
