drivers: Introduce device lookup variants by ACPI_COMPANION device

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Suzuki K Poulose <suzuki.poulose@arm.com>
commit 00500147cbd3fc51353d0d003eaa9d31c72c0d50
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/00500147.failed

Add a generic helper to match a device by the ACPI_COMPANION device
and provide wrappers for the device lookup APIs.

	Cc: Len Brown <lenb@kernel.org>
	Cc: linux-acpi@vger.kernel.org
	Cc: linux-spi@vger.kernel.org
	Cc: Mika Westerberg <mika.westerberg@linux.intel.com>
	Cc: linux-i2c@vger.kernel.org
	Cc: "Rafael J. Wysocki" <rafael@kernel.org>
	Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
	Acked-by: Mark Brown <broonie@kernel.org>
	Acked-by: Wolfram Sang <wsa@the-dreams.de> # I2C parts
Link: https://lore.kernel.org/r/20190723221838.12024-6-suzuki.poulose@arm.com
	Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
(cherry picked from commit 00500147cbd3fc51353d0d003eaa9d31c72c0d50)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/base/core.c
#	include/linux/device.h
diff --cc drivers/base/core.c
index 26bae20f0553,57d71bc2c559..000000000000
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@@ -3193,3 -3349,33 +3193,36 @@@ void device_set_of_node_from_dev(struc
  	dev->of_node_reused = true;
  }
  EXPORT_SYMBOL_GPL(device_set_of_node_from_dev);
++<<<<<<< HEAD
++=======
+ 
+ int device_match_name(struct device *dev, const void *name)
+ {
+ 	return sysfs_streq(dev_name(dev), name);
+ }
+ EXPORT_SYMBOL_GPL(device_match_name);
+ 
+ int device_match_of_node(struct device *dev, const void *np)
+ {
+ 	return dev->of_node == np;
+ }
+ EXPORT_SYMBOL_GPL(device_match_of_node);
+ 
+ int device_match_fwnode(struct device *dev, const void *fwnode)
+ {
+ 	return dev_fwnode(dev) == fwnode;
+ }
+ EXPORT_SYMBOL_GPL(device_match_fwnode);
+ 
+ int device_match_devt(struct device *dev, const void *pdevt)
+ {
+ 	return dev->devt == *(dev_t *)pdevt;
+ }
+ EXPORT_SYMBOL_GPL(device_match_devt);
+ 
+ int device_match_acpi_dev(struct device *dev, const void *adev)
+ {
+ 	return ACPI_COMPANION(dev) == adev;
+ }
+ EXPORT_SYMBOL(device_match_acpi_dev);
++>>>>>>> 00500147cbd3 (drivers: Introduce device lookup variants by ACPI_COMPANION device)
diff --cc include/linux/device.h
index a7e07e1be4e6,7514ef3d3f1a..000000000000
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@@ -167,14 -164,89 +167,98 @@@ void subsys_dev_iter_init(struct subsys
  struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
  void subsys_dev_iter_exit(struct subsys_dev_iter *iter);
  
++<<<<<<< HEAD
++=======
+ int device_match_name(struct device *dev, const void *name);
+ int device_match_of_node(struct device *dev, const void *np);
+ int device_match_fwnode(struct device *dev, const void *fwnode);
+ int device_match_devt(struct device *dev, const void *pdevt);
+ int device_match_acpi_dev(struct device *dev, const void *adev);
+ 
++>>>>>>> 00500147cbd3 (drivers: Introduce device lookup variants by ACPI_COMPANION device)
  int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
  		     int (*fn)(struct device *dev, void *data));
  struct device *bus_find_device(struct bus_type *bus, struct device *start,
  			       const void *data,
  			       int (*match)(struct device *dev, const void *data));
++<<<<<<< HEAD
 +struct device *bus_find_device_by_name(struct bus_type *bus,
 +				       struct device *start,
 +				       const char *name);
++=======
+ /**
+  * bus_find_device_by_name - device iterator for locating a particular device
+  * of a specific name.
+  * @bus: bus type
+  * @start: Device to begin with
+  * @name: name of the device to match
+  */
+ static inline struct device *bus_find_device_by_name(struct bus_type *bus,
+ 						     struct device *start,
+ 						     const char *name)
+ {
+ 	return bus_find_device(bus, start, name, device_match_name);
+ }
+ 
+ /**
+  * bus_find_device_by_of_node : device iterator for locating a particular device
+  * matching the of_node.
+  * @bus: bus type
+  * @np: of_node of the device to match.
+  */
+ static inline struct device *
+ bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
+ {
+ 	return bus_find_device(bus, NULL, np, device_match_of_node);
+ }
+ 
+ /**
+  * bus_find_device_by_fwnode : device iterator for locating a particular device
+  * matching the fwnode.
+  * @bus: bus type
+  * @fwnode: fwnode of the device to match.
+  */
+ static inline struct device *
+ bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
+ {
+ 	return bus_find_device(bus, NULL, fwnode, device_match_fwnode);
+ }
+ 
+ /**
+  * bus_find_device_by_devt : device iterator for locating a particular device
+  * matching the device type.
+  * @bus: bus type
+  * @devt: device type of the device to match.
+  */
+ static inline struct device *bus_find_device_by_devt(struct bus_type *bus,
+ 						     dev_t devt)
+ {
+ 	return bus_find_device(bus, NULL, &devt, device_match_devt);
+ }
+ 
+ #ifdef CONFIG_ACPI
+ struct acpi_device;
+ 
+ /**
+  * bus_find_device_by_acpi_dev : device iterator for locating a particular device
+  * matching the ACPI COMPANION device.
+  * @bus: bus type
+  * @adev: ACPI COMPANION device to match.
+  */
+ static inline struct device *
+ bus_find_device_by_acpi_dev(struct bus_type *bus, const struct acpi_device *adev)
+ {
+ 	return bus_find_device(bus, NULL, adev, device_match_acpi_dev);
+ }
+ #else
+ static inline struct device *
+ bus_find_device_by_acpi_dev(struct bus_type *bus, const void *adev)
+ {
+ 	return NULL;
+ }
+ #endif
+ 
++>>>>>>> 00500147cbd3 (drivers: Introduce device lookup variants by ACPI_COMPANION device)
  struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
  					struct device *hint);
  int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
@@@ -351,9 -412,81 +435,84 @@@ extern int __must_check driver_for_each
  					       int (*fn)(struct device *dev,
  							 void *));
  struct device *driver_find_device(struct device_driver *drv,
 -				  struct device *start, const void *data,
 -				  int (*match)(struct device *dev, const void *data));
 +				  struct device *start, void *data,
 +				  int (*match)(struct device *dev, void *data));
  
++<<<<<<< HEAD
++=======
+ /**
+  * driver_find_device_by_name - device iterator for locating a particular device
+  * of a specific name.
+  * @driver: the driver we're iterating
+  * @name: name of the device to match
+  */
+ static inline struct device *driver_find_device_by_name(struct device_driver *drv,
+ 							const char *name)
+ {
+ 	return driver_find_device(drv, NULL, name, device_match_name);
+ }
+ 
+ /**
+  * driver_find_device_by_of_node- device iterator for locating a particular device
+  * by of_node pointer.
+  * @driver: the driver we're iterating
+  * @np: of_node pointer to match.
+  */
+ static inline struct device *
+ driver_find_device_by_of_node(struct device_driver *drv,
+ 			      const struct device_node *np)
+ {
+ 	return driver_find_device(drv, NULL, np, device_match_of_node);
+ }
+ 
+ /**
+  * driver_find_device_by_fwnode- device iterator for locating a particular device
+  * by fwnode pointer.
+  * @driver: the driver we're iterating
+  * @fwnode: fwnode pointer to match.
+  */
+ static inline struct device *
+ driver_find_device_by_fwnode(struct device_driver *drv,
+ 			     const struct fwnode_handle *fwnode)
+ {
+ 	return driver_find_device(drv, NULL, fwnode, device_match_fwnode);
+ }
+ 
+ /**
+  * driver_find_device_by_devt- device iterator for locating a particular device
+  * by devt.
+  * @driver: the driver we're iterating
+  * @devt: devt pointer to match.
+  */
+ static inline struct device *driver_find_device_by_devt(struct device_driver *drv,
+ 							dev_t devt)
+ {
+ 	return driver_find_device(drv, NULL, &devt, device_match_devt);
+ }
+ 
+ #ifdef CONFIG_ACPI
+ /**
+  * driver_find_device_by_acpi_dev : device iterator for locating a particular
+  * device matching the ACPI_COMPANION device.
+  * @driver: the driver we're iterating
+  * @adev: ACPI_COMPANION device to match.
+  */
+ static inline struct device *
+ driver_find_device_by_acpi_dev(struct device_driver *drv,
+ 			       const struct acpi_device *adev)
+ {
+ 	return driver_find_device(drv, NULL, adev, device_match_acpi_dev);
+ }
+ #else
+ static inline struct device *
+ driver_find_device_by_acpi_dev(struct device_driver *drv, const void *adev)
+ {
+ 	return NULL;
+ }
+ #endif
+ 
+ void driver_deferred_probe_add(struct device *dev);
++>>>>>>> 00500147cbd3 (drivers: Introduce device lookup variants by ACPI_COMPANION device)
  int driver_deferred_probe_check_state(struct device *dev);
  int driver_deferred_probe_check_state_continue(struct device *dev);
  
@@@ -489,6 -615,76 +648,79 @@@ extern struct device *class_find_device
  					struct device *start, const void *data,
  					int (*match)(struct device *, const void *));
  
++<<<<<<< HEAD
++=======
+ /**
+  * class_find_device_by_name - device iterator for locating a particular device
+  * of a specific name.
+  * @class: class type
+  * @name: name of the device to match
+  */
+ static inline struct device *class_find_device_by_name(struct class *class,
+ 						       const char *name)
+ {
+ 	return class_find_device(class, NULL, name, device_match_name);
+ }
+ 
+ /**
+  * class_find_device_by_of_node : device iterator for locating a particular device
+  * matching the of_node.
+  * @class: class type
+  * @np: of_node of the device to match.
+  */
+ static inline struct device *
+ class_find_device_by_of_node(struct class *class, const struct device_node *np)
+ {
+ 	return class_find_device(class, NULL, np, device_match_of_node);
+ }
+ 
+ /**
+  * class_find_device_by_fwnode : device iterator for locating a particular device
+  * matching the fwnode.
+  * @class: class type
+  * @fwnode: fwnode of the device to match.
+  */
+ static inline struct device *
+ class_find_device_by_fwnode(struct class *class,
+ 			    const struct fwnode_handle *fwnode)
+ {
+ 	return class_find_device(class, NULL, fwnode, device_match_fwnode);
+ }
+ 
+ /**
+  * class_find_device_by_devt : device iterator for locating a particular device
+  * matching the device type.
+  * @class: class type
+  * @devt: device type of the device to match.
+  */
+ static inline struct device *class_find_device_by_devt(struct class *class,
+ 						       dev_t devt)
+ {
+ 	return class_find_device(class, NULL, &devt, device_match_devt);
+ }
+ 
+ #ifdef CONFIG_ACPI
+ struct acpi_device;
+ /**
+  * class_find_device_by_acpi_dev : device iterator for locating a particular
+  * device matching the ACPI_COMPANION device.
+  * @class: class type
+  * @adev: ACPI_COMPANION device to match.
+  */
+ static inline struct device *
+ class_find_device_by_acpi_dev(struct class *class, const struct acpi_device *adev)
+ {
+ 	return class_find_device(class, NULL, adev, device_match_acpi_dev);
+ }
+ #else
+ static inline struct device *
+ class_find_device_by_acpi_dev(struct class *class, const void *adev)
+ {
+ 	return NULL;
+ }
+ #endif
+ 
++>>>>>>> 00500147cbd3 (drivers: Introduce device lookup variants by ACPI_COMPANION device)
  struct class_attribute {
  	struct attribute attr;
  	ssize_t (*show)(struct class *class, struct class_attribute *attr,
* Unmerged path drivers/base/core.c
diff --git a/drivers/i2c/i2c-core-acpi.c b/drivers/i2c/i2c-core-acpi.c
index bdb838081083..9474d148b6d7 100644
--- a/drivers/i2c/i2c-core-acpi.c
+++ b/drivers/i2c/i2c-core-acpi.c
@@ -384,17 +384,11 @@ static int i2c_acpi_find_match_adapter(struct device *dev, const void *data)
 	return ACPI_HANDLE(dev) == (acpi_handle)data;
 }
 
-static int i2c_acpi_find_match_device(struct device *dev, const void *data)
-{
-	return ACPI_COMPANION(dev) == data;
-}
 
 struct i2c_adapter *i2c_acpi_find_adapter_by_handle(acpi_handle handle)
 {
-	struct device *dev;
+	struct device *dev = bus_find_device_by_acpi_dev(&i2c_bus_type, handle);
 
-	dev = bus_find_device(&i2c_bus_type, NULL, handle,
-			      i2c_acpi_find_match_adapter);
 	return dev ? i2c_verify_adapter(dev) : NULL;
 }
 EXPORT_SYMBOL_GPL(i2c_acpi_find_adapter_by_handle);
@@ -403,8 +397,7 @@ static struct i2c_client *i2c_acpi_find_client_by_adev(struct acpi_device *adev)
 {
 	struct device *dev;
 
-	dev = bus_find_device(&i2c_bus_type, NULL, adev,
-			      i2c_acpi_find_match_device);
+	dev = bus_find_device_by_acpi_dev(&i2c_bus_type, adev);
 	return dev ? i2c_verify_client(dev) : NULL;
 }
 
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index 1051edf941c1..4e0cf6374d62 100644
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -3619,11 +3619,6 @@ static int spi_acpi_controller_match(struct device *dev, const void *data)
 	return ACPI_COMPANION(dev->parent) == data;
 }
 
-static int spi_acpi_device_match(struct device *dev, const void *data)
-{
-	return ACPI_COMPANION(dev) == data;
-}
-
 static struct spi_controller *acpi_spi_find_controller_by_adev(struct acpi_device *adev)
 {
 	struct device *dev;
@@ -3643,8 +3638,7 @@ static struct spi_device *acpi_spi_find_device_by_adev(struct acpi_device *adev)
 {
 	struct device *dev;
 
-	dev = bus_find_device(&spi_bus_type, NULL, adev, spi_acpi_device_match);
-
+	dev = bus_find_device_by_acpi_dev(&spi_bus_type, adev);
 	return dev ? to_spi_device(dev) : NULL;
 }
 
* Unmerged path include/linux/device.h
