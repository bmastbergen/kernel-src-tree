PCI: hv: Allocate a named fwnode instead of an address-based one

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [pci] hv: Allocate a named fwnode instead of an address-based one (Mohammed Gamal) [1846666]
Rebuild_FUZZ: 95.93%
commit-author Marc Zyngier <maz@kernel.org>
commit 467a3bb974320a23c0c000559cc54b64e06e9787
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/467a3bb9.failed

To allocate its fwnode that is then used to allocate an irqdomain,
the driver uses irq_domain_alloc_fwnode(), passing it a VA as an
identifier. This is a rather bad idea, as this address ends up
published in debugfs (and we want to move away from VAs there
anyway).

Instead, let's allocate a named fwnode by using the device GUID as
an identifier. It is allegedly unique, and can be traced back to
the original device.

	Acked-by: Thomas Gleixner <tglx@linutronix.de>
	Signed-off-by: Marc Zyngier <maz@kernel.org>
(cherry picked from commit 467a3bb974320a23c0c000559cc54b64e06e9787)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pci/controller/pci-hyperv.c
diff --cc drivers/pci/controller/pci-hyperv.c
index cec6983784a8,97056f3dd317..000000000000
--- a/drivers/pci/controller/pci-hyperv.c
+++ b/drivers/pci/controller/pci-hyperv.c
@@@ -3008,7 -2521,7 +3008,11 @@@ static int hv_pci_probe(struct hv_devic
  			const struct hv_vmbus_device_id *dev_id)
  {
  	struct hv_pcibus_device *hbus;
++<<<<<<< HEAD
 +	u16 dom_req, dom;
++=======
+ 	char *name;
++>>>>>>> 467a3bb97432 (PCI: hv: Allocate a named fwnode instead of an address-based one)
  	int ret;
  
  	/*
* Unmerged path drivers/pci/controller/pci-hyperv.c
