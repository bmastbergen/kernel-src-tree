perf tools: Rename struct thread_map to struct perf_thread_map

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 9749b90e566ca1a235fc8e2118f99c5690969342
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9749b90e.failed

Rename struct thread_map to struct perf_thread_map, so it could be part
of libperf.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-4-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9749b90e566ca1a235fc8e2118f99c5690969342)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/x86/tests/perf-time-to-tsc.c
#	tools/perf/builtin-script.c
#	tools/perf/builtin-stat.c
#	tools/perf/tests/code-reading.c
#	tools/perf/tests/keep-tracking.c
#	tools/perf/tests/mmap-basic.c
#	tools/perf/tests/sw-clock.c
#	tools/perf/tests/switch-tracking.c
#	tools/perf/tests/task-exit.c
#	tools/perf/util/event.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
#	tools/perf/util/evsel.c
#	tools/perf/util/evsel.h
#	tools/perf/util/python.c
#	tools/perf/util/scripting-engines/trace-event-python.c
diff --cc tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86,f542b878bdb5..000000000000
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@@ -49,8 -49,8 +49,13 @@@ int test__perf_time_to_tsc(struct test 
  		},
  		.sample_time	     = true,
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_evlist *evlist = NULL;
  	struct perf_evsel *evsel = NULL;
  	int err = -1, ret, i;
diff --cc tools/perf/builtin-script.c
index 381a10d3337c,fccc960df92b..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -1628,8 -1627,8 +1628,13 @@@ struct perf_script 
  	bool			show_bpf_events;
  	bool			allocated;
  	bool			per_event_dump;
++<<<<<<< HEAD
 +	struct cpu_map		*cpus;
 +	struct thread_map	*threads;
++=======
+ 	struct perf_cpu_map	*cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	int			name_width;
  	const char              *time_str;
  	struct perf_time_interval *ptime_range;
diff --cc tools/perf/builtin-stat.c
index b71c4390d333,2b9518a38baf..000000000000
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@@ -166,8 -164,8 +166,13 @@@ struct perf_stat 
  	u64			 bytes_written;
  	struct perf_tool	 tool;
  	bool			 maps_allocated;
++<<<<<<< HEAD
 +	struct cpu_map		*cpus;
 +	struct thread_map	*threads;
++=======
+ 	struct perf_cpu_map	*cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	enum aggr_mode		 aggr_mode;
  };
  
diff --cc tools/perf/tests/code-reading.c
index aa6df122b175,88c218eacc43..000000000000
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@@ -552,8 -552,8 +552,13 @@@ static int do_test_code_reading(bool tr
  	struct state state = {
  		.done_cnt = 0,
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_evlist *evlist = NULL;
  	struct perf_evsel *evsel = NULL;
  	int err = -1, ret;
diff --cc tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e,e1e5e32cbb53..000000000000
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@@ -65,8 -65,8 +65,13 @@@ int test__keep_tracking(struct test *te
  			.uses_mmap   = true,
  		},
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_evlist *evlist = NULL;
  	struct perf_evsel *evsel = NULL;
  	int found, err = -1;
diff --cc tools/perf/tests/mmap-basic.c
index 0919b0793e5b,c1e2fe087b67..000000000000
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@@ -27,8 -27,8 +27,13 @@@ int test__basic_mmap(struct test *test 
  {
  	int err = -1;
  	union perf_event *event;
++<<<<<<< HEAD
 +	struct thread_map *threads;
 +	struct cpu_map *cpus;
++=======
+ 	struct perf_thread_map *threads;
+ 	struct perf_cpu_map *cpus;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_evlist *evlist;
  	cpu_set_t cpu_set;
  	const char *syscall_names[] = { "getsid", "getppid", "getpgid", };
diff --cc tools/perf/tests/sw-clock.c
index f9490b237893,d57b8d9c1575..000000000000
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@@ -37,8 -37,8 +37,13 @@@ static int __test__sw_clock_freq(enum p
  		.disabled = 1,
  		.freq = 1,
  	};
++<<<<<<< HEAD
 +	struct cpu_map *cpus;
 +	struct thread_map *threads;
++=======
+ 	struct perf_cpu_map *cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_mmap *md;
  
  	attr.sample_freq = 500;
diff --cc tools/perf/tests/switch-tracking.c
index 6cdab5f4812a,3652c548cc22..000000000000
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@@ -327,8 -327,8 +327,13 @@@ int test__switch_tracking(struct test *
  			.uses_mmap   = true,
  		},
  	};
++<<<<<<< HEAD
 +	struct thread_map *threads = NULL;
 +	struct cpu_map *cpus = NULL;
++=======
+ 	struct perf_thread_map *threads = NULL;
+ 	struct perf_cpu_map *cpus = NULL;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_evlist *evlist = NULL;
  	struct perf_evsel *evsel, *cpu_clocks_evsel, *cycles_evsel;
  	struct perf_evsel *switch_evsel, *tracking_evsel;
diff --cc tools/perf/tests/task-exit.c
index e92fa6029ac7,9602ff91a3c7..000000000000
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@@ -45,8 -45,8 +45,13 @@@ int test__task_exit(struct test *test _
  	};
  	const char *argv[] = { "true", NULL };
  	char sbuf[STRERR_BUFSIZE];
++<<<<<<< HEAD
 +	struct cpu_map *cpus;
 +	struct thread_map *threads;
++=======
+ 	struct perf_cpu_map *cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_mmap *md;
  
  	signal(SIGCHLD, sig_handler);
diff --cc tools/perf/util/event.h
index 1f1da6082806,70841d115349..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -674,8 -674,8 +674,13 @@@ union perf_event 
  void perf_event__print_totals(void);
  
  struct perf_tool;
++<<<<<<< HEAD
 +struct thread_map;
 +struct cpu_map;
++=======
+ struct perf_thread_map;
+ struct perf_cpu_map;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  struct perf_stat_config;
  struct perf_counts_values;
  
diff --cc tools/perf/util/evlist.c
index 4739b7914374,a95d0461f718..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -42,8 -41,8 +42,13 @@@ int sigqueue(pid_t pid, int sig, const 
  #define FD(e, x, y) (*(int *)xyarray__entry(e->fd, x, y))
  #define SID(e, x, y) xyarray__entry(e->sample_id, x, y)
  
++<<<<<<< HEAD
 +void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
 +		       struct thread_map *threads)
++=======
+ void perf_evlist__init(struct perf_evlist *evlist, struct perf_cpu_map *cpus,
+ 		       struct perf_thread_map *threads)
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  {
  	int i;
  
@@@ -1013,8 -1012,8 +1018,13 @@@ int perf_evlist__mmap_ex(struct perf_ev
  			 int comp_level)
  {
  	struct perf_evsel *evsel;
++<<<<<<< HEAD
 +	const struct cpu_map *cpus = evlist->cpus;
 +	const struct thread_map *threads = evlist->threads;
++=======
+ 	const struct perf_cpu_map *cpus = evlist->cpus;
+ 	const struct perf_thread_map *threads = evlist->threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	/*
  	 * Delay setting mp.prot: set it before calling perf_mmap__mmap.
  	 * Its value is decided by evsel's write_backward.
@@@ -1059,8 -1058,8 +1069,13 @@@ int perf_evlist__mmap(struct perf_evlis
  int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target)
  {
  	bool all_threads = (target->per_thread && target->system_wide);
++<<<<<<< HEAD
 +	struct cpu_map *cpus;
 +	struct thread_map *threads;
++=======
+ 	struct perf_cpu_map *cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  
  	/*
  	 * If specify '-a' and '--per-thread' to perf record, perf record
@@@ -1105,8 -1104,8 +1120,13 @@@ out_delete_threads
  	return -1;
  }
  
++<<<<<<< HEAD
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads)
++=======
+ void perf_evlist__set_maps(struct perf_evlist *evlist, struct perf_cpu_map *cpus,
+ 			   struct perf_thread_map *threads)
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  {
  	/*
  	 * Allow for the possibility that one or another of the maps isn't being
@@@ -1359,8 -1358,8 +1379,13 @@@ void perf_evlist__close(struct perf_evl
  
  static int perf_evlist__create_syswide_maps(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct cpu_map	  *cpus;
 +	struct thread_map *threads;
++=======
+ 	struct perf_cpu_map *cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	int err = -ENOMEM;
  
  	/*
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,ab2f0b6c7640..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -44,8 -44,8 +44,13 @@@ struct perf_evlist 
  	struct fdarray	 pollfd;
  	struct perf_mmap *mmap;
  	struct perf_mmap *overwrite_mmap;
++<<<<<<< HEAD
 +	struct thread_map *threads;
 +	struct cpu_map	  *cpus;
++=======
+ 	struct perf_thread_map *threads;
+ 	struct perf_cpu_map *cpus;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	struct perf_evsel *selected;
  	struct events_stats stats;
  	struct perf_env	*env;
@@@ -68,8 -68,8 +73,13 @@@ struct perf_evsel_str_handler 
  struct perf_evlist *perf_evlist__new(void);
  struct perf_evlist *perf_evlist__new_default(void);
  struct perf_evlist *perf_evlist__new_dummy(void);
++<<<<<<< HEAD
 +void perf_evlist__init(struct perf_evlist *evlist, struct cpu_map *cpus,
 +		       struct thread_map *threads);
++=======
+ void perf_evlist__init(struct perf_evlist *evlist, struct perf_cpu_map *cpus,
+ 		       struct perf_thread_map *threads);
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  void perf_evlist__exit(struct perf_evlist *evlist);
  void perf_evlist__delete(struct perf_evlist *evlist);
  
@@@ -194,8 -194,8 +204,13 @@@ int perf_evlist__enable_event_idx(struc
  void perf_evlist__set_selected(struct perf_evlist *evlist,
  			       struct perf_evsel *evsel);
  
++<<<<<<< HEAD
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads);
++=======
+ void perf_evlist__set_maps(struct perf_evlist *evlist, struct perf_cpu_map *cpus,
+ 			   struct perf_thread_map *threads);
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target);
  int perf_evlist__apply_filters(struct perf_evlist *evlist, struct perf_evsel **err_evsel);
  
diff --cc tools/perf/util/evsel.c
index e99257f738ba,ab66d65b7968..000000000000
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@@ -1826,8 -1825,8 +1826,13 @@@ static int perf_event_open(struct perf_
  	return fd;
  }
  
++<<<<<<< HEAD
 +int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 +		     struct thread_map *threads)
++=======
+ int perf_evsel__open(struct perf_evsel *evsel, struct perf_cpu_map *cpus,
+ 		     struct perf_thread_map *threads)
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  {
  	int cpu, thread, nthreads;
  	unsigned long flags = PERF_FLAG_FD_CLOEXEC;
@@@ -3065,8 -3064,8 +3070,13 @@@ static int store_evsel_ids(struct perf_
  
  int perf_evsel__store_ids(struct perf_evsel *evsel, struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	struct cpu_map *cpus = evsel->cpus;
 +	struct thread_map *threads = evsel->threads;
++=======
+ 	struct perf_cpu_map *cpus = evsel->cpus;
+ 	struct perf_thread_map *threads = evsel->threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  
  	if (perf_evsel__alloc_id(evsel, cpus->nr, threads->nr))
  		return -ENOMEM;
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,ba2385f22e28..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -124,9 -124,9 +124,15 @@@ struct perf_evsel 
  	u64			db_id;
  	struct cgroup		*cgrp;
  	void			*handler;
++<<<<<<< HEAD
 +	struct cpu_map		*cpus;
 +	struct cpu_map		*own_cpus;
 +	struct thread_map	*threads;
++=======
+ 	struct perf_cpu_map	*cpus;
+ 	struct perf_cpu_map	*own_cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	unsigned int		sample_size;
  	int			id_pos;
  	int			is_pos;
@@@ -300,11 -300,11 +306,17 @@@ int perf_evsel__enable(struct perf_evse
  int perf_evsel__disable(struct perf_evsel *evsel);
  
  int perf_evsel__open_per_cpu(struct perf_evsel *evsel,
 -			     struct perf_cpu_map *cpus);
 +			     struct cpu_map *cpus);
  int perf_evsel__open_per_thread(struct perf_evsel *evsel,
++<<<<<<< HEAD
 +				struct thread_map *threads);
 +int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,
 +		     struct thread_map *threads);
++=======
+ 				struct perf_thread_map *threads);
+ int perf_evsel__open(struct perf_evsel *evsel, struct perf_cpu_map *cpus,
+ 		     struct perf_thread_map *threads);
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  void perf_evsel__close(struct perf_evsel *evsel);
  
  struct perf_sample;
diff --cc tools/perf/util/python.c
index 1e5b6718dcea,62dda70227e5..000000000000
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@@ -796,8 -796,8 +796,13 @@@ static PyObject *pyrf_evsel__open(struc
  				  PyObject *args, PyObject *kwargs)
  {
  	struct perf_evsel *evsel = &pevsel->evsel;
++<<<<<<< HEAD
 +	struct cpu_map *cpus = NULL;
 +	struct thread_map *threads = NULL;
++=======
+ 	struct perf_cpu_map *cpus = NULL;
+ 	struct perf_thread_map *threads = NULL;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	PyObject *pcpus = NULL, *pthreads = NULL;
  	int group = 0, inherit = 0;
  	static char *kwlist[] = { "cpus", "threads", "group", "inherit", NULL };
@@@ -865,8 -865,8 +870,13 @@@ static int pyrf_evlist__init(struct pyr
  			     PyObject *args, PyObject *kwargs __maybe_unused)
  {
  	PyObject *pcpus = NULL, *pthreads = NULL;
++<<<<<<< HEAD
 +	struct cpu_map *cpus;
 +	struct thread_map *threads;
++=======
+ 	struct perf_cpu_map *cpus;
+ 	struct perf_thread_map *threads;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  
  	if (!PyArg_ParseTuple(args, "OO", &pcpus, &pthreads))
  		return -1;
diff --cc tools/perf/util/scripting-engines/trace-event-python.c
index 25dc1d765553,0a7e662036b4..000000000000
--- a/tools/perf/util/scripting-engines/trace-event-python.c
+++ b/tools/perf/util/scripting-engines/trace-event-python.c
@@@ -1392,8 -1392,8 +1392,13 @@@ process_stat(struct perf_evsel *counter
  static void python_process_stat(struct perf_stat_config *config,
  				struct perf_evsel *counter, u64 tstamp)
  {
++<<<<<<< HEAD
 +	struct thread_map *threads = counter->threads;
 +	struct cpu_map *cpus = counter->cpus;
++=======
+ 	struct perf_thread_map *threads = counter->threads;
+ 	struct perf_cpu_map *cpus = counter->cpus;
++>>>>>>> 9749b90e566c (perf tools: Rename struct thread_map to struct perf_thread_map)
  	int cpu, thread;
  
  	if (config->aggr_mode == AGGR_GLOBAL) {
* Unmerged path tools/perf/arch/x86/tests/perf-time-to-tsc.c
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..4a19eebc7930 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1048,7 +1048,7 @@ record__finish_output(struct record *rec)
 static int record__synthesize_workload(struct record *rec, bool tail)
 {
 	int err;
-	struct thread_map *thread_map;
+	struct perf_thread_map *thread_map;
 
 	if (rec->opts.tail_synthesize != tail)
 		return 0;
diff --git a/tools/perf/builtin-sched.c b/tools/perf/builtin-sched.c
index d17a75eb69b7..1a2364417ec9 100644
--- a/tools/perf/builtin-sched.c
+++ b/tools/perf/builtin-sched.c
@@ -160,7 +160,7 @@ struct perf_sched_map {
 	DECLARE_BITMAP(comp_cpus_mask, MAX_CPUS);
 	int			*comp_cpus;
 	bool			 comp;
-	struct thread_map	*color_pids;
+	struct perf_thread_map *color_pids;
 	const char		*color_pids_str;
 	struct cpu_map		*color_cpus;
 	const char		*color_cpus_str;
@@ -3196,7 +3196,7 @@ static int setup_map_cpus(struct perf_sched *sched)
 
 static int setup_color_pids(struct perf_sched *sched)
 {
-	struct thread_map *map;
+	struct perf_thread_map *map;
 
 	if (!sched->map.color_pids_str)
 		return 0;
* Unmerged path tools/perf/builtin-script.c
* Unmerged path tools/perf/builtin-stat.c
* Unmerged path tools/perf/tests/code-reading.c
diff --git a/tools/perf/tests/event-times.c b/tools/perf/tests/event-times.c
index 1a2686f1fcf0..614c9e53740f 100644
--- a/tools/perf/tests/event-times.c
+++ b/tools/perf/tests/event-times.c
@@ -57,7 +57,7 @@ static int detach__enable_on_exec(struct perf_evlist *evlist)
 static int attach__current_disabled(struct perf_evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__last(evlist);
-	struct thread_map *threads;
+	struct perf_thread_map *threads;
 	int err;
 
 	pr_debug("attaching to current thread as disabled\n");
@@ -83,7 +83,7 @@ static int attach__current_disabled(struct perf_evlist *evlist)
 static int attach__current_enabled(struct perf_evlist *evlist)
 {
 	struct perf_evsel *evsel = perf_evlist__last(evlist);
-	struct thread_map *threads;
+	struct perf_thread_map *threads;
 	int err;
 
 	pr_debug("attaching to current thread as enabled\n");
* Unmerged path tools/perf/tests/keep-tracking.c
* Unmerged path tools/perf/tests/mmap-basic.c
diff --git a/tools/perf/tests/mmap-thread-lookup.c b/tools/perf/tests/mmap-thread-lookup.c
index 0a4301a5155c..ad6ca943e568 100644
--- a/tools/perf/tests/mmap-thread-lookup.c
+++ b/tools/perf/tests/mmap-thread-lookup.c
@@ -138,7 +138,7 @@ static int synth_all(struct machine *machine)
 
 static int synth_process(struct machine *machine)
 {
-	struct thread_map *map;
+	struct perf_thread_map *map;
 	int err;
 
 	map = thread_map__new_by_pid(getpid());
diff --git a/tools/perf/tests/openat-syscall-all-cpus.c b/tools/perf/tests/openat-syscall-all-cpus.c
index 493ecb611540..dcb3a49dc76f 100644
--- a/tools/perf/tests/openat-syscall-all-cpus.c
+++ b/tools/perf/tests/openat-syscall-all-cpus.c
@@ -24,7 +24,7 @@ int test__openat_syscall_event_on_all_cpus(struct test *test __maybe_unused, int
 	struct perf_evsel *evsel;
 	unsigned int nr_openat_calls = 111, i;
 	cpu_set_t cpu_set;
-	struct thread_map *threads = thread_map__new(-1, getpid(), UINT_MAX);
+	struct perf_thread_map *threads = thread_map__new(-1, getpid(), UINT_MAX);
 	char sbuf[STRERR_BUFSIZE];
 	char errbuf[BUFSIZ];
 
diff --git a/tools/perf/tests/openat-syscall.c b/tools/perf/tests/openat-syscall.c
index 00cd63f90b92..652b8328ca93 100644
--- a/tools/perf/tests/openat-syscall.c
+++ b/tools/perf/tests/openat-syscall.c
@@ -16,7 +16,7 @@ int test__openat_syscall_event(struct test *test __maybe_unused, int subtest __m
 	int err = -1, fd;
 	struct perf_evsel *evsel;
 	unsigned int nr_openat_calls = 111, i;
-	struct thread_map *threads = thread_map__new(-1, getpid(), UINT_MAX);
+	struct perf_thread_map *threads = thread_map__new(-1, getpid(), UINT_MAX);
 	char sbuf[STRERR_BUFSIZE];
 	char errbuf[BUFSIZ];
 
* Unmerged path tools/perf/tests/sw-clock.c
* Unmerged path tools/perf/tests/switch-tracking.c
* Unmerged path tools/perf/tests/task-exit.c
diff --git a/tools/perf/tests/thread-map.c b/tools/perf/tests/thread-map.c
index ccc17aced49e..367dfe708e4c 100644
--- a/tools/perf/tests/thread-map.c
+++ b/tools/perf/tests/thread-map.c
@@ -13,7 +13,7 @@
 
 int test__thread_map(struct test *test __maybe_unused, int subtest __maybe_unused)
 {
-	struct thread_map *map;
+	struct perf_thread_map *map;
 
 	TEST_ASSERT_VAL("failed to set process name",
 			!prctl(PR_SET_NAME, NAMEUL, 0, 0, 0));
@@ -57,7 +57,7 @@ static int process_event(struct perf_tool *tool __maybe_unused,
 			 struct machine *machine __maybe_unused)
 {
 	struct thread_map_event *map = &event->thread_map;
-	struct thread_map *threads;
+	struct perf_thread_map *threads;
 
 	TEST_ASSERT_VAL("wrong nr",   map->nr == 1);
 	TEST_ASSERT_VAL("wrong pid",  map->entries[0].pid == (u64) getpid());
@@ -80,7 +80,7 @@ static int process_event(struct perf_tool *tool __maybe_unused,
 
 int test__thread_map_synthesize(struct test *test __maybe_unused, int subtest __maybe_unused)
 {
-	struct thread_map *threads;
+	struct perf_thread_map *threads;
 
 	TEST_ASSERT_VAL("failed to set process name",
 			!prctl(PR_SET_NAME, NAMEUL, 0, 0, 0));
@@ -99,7 +99,7 @@ int test__thread_map_synthesize(struct test *test __maybe_unused, int subtest __
 
 int test__thread_map_remove(struct test *test __maybe_unused, int subtest __maybe_unused)
 {
-	struct thread_map *threads;
+	struct perf_thread_map *threads;
 	char *str;
 	int i;
 
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index f1f4848947ce..c1b3d66e0537 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -616,7 +616,7 @@ static int __event__synthesize_thread(union perf_event *comm_event,
 }
 
 int perf_event__synthesize_thread_map(struct perf_tool *tool,
-				      struct thread_map *threads,
+				      struct perf_thread_map *threads,
 				      perf_event__handler_t process,
 				      struct machine *machine,
 				      bool mmap_data)
@@ -972,7 +972,7 @@ int perf_event__synthesize_kernel_mmap(struct perf_tool *tool,
 }
 
 int perf_event__synthesize_thread_map2(struct perf_tool *tool,
-				      struct thread_map *threads,
+				      struct perf_thread_map *threads,
 				      perf_event__handler_t process,
 				      struct machine *machine)
 {
@@ -1377,7 +1377,7 @@ size_t perf_event__fprintf_mmap2(union perf_event *event, FILE *fp)
 
 size_t perf_event__fprintf_thread_map(union perf_event *event, FILE *fp)
 {
-	struct thread_map *threads = thread_map__new_event(&event->thread_map);
+	struct perf_thread_map *threads = thread_map__new_event(&event->thread_map);
 	size_t ret;
 
 	ret = fprintf(fp, " nr: ");
* Unmerged path tools/perf/util/event.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
* Unmerged path tools/perf/util/evsel.c
* Unmerged path tools/perf/util/evsel.h
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index db2090803f4c..a34b326b5ca0 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -2600,7 +2600,7 @@ int machines__for_each_thread(struct machines *machines,
 }
 
 int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
-				  struct target *target, struct thread_map *threads,
+				  struct target *target, struct perf_thread_map *threads,
 				  perf_event__handler_t process, bool data_mmap,
 				  unsigned int nr_threads_synthesize)
 {
diff --git a/tools/perf/util/machine.h b/tools/perf/util/machine.h
index 7aa38da26427..1ec8941f85a6 100644
--- a/tools/perf/util/machine.h
+++ b/tools/perf/util/machine.h
@@ -251,12 +251,12 @@ int machines__for_each_thread(struct machines *machines,
 			      void *priv);
 
 int __machine__synthesize_threads(struct machine *machine, struct perf_tool *tool,
-				  struct target *target, struct thread_map *threads,
+				  struct target *target, struct perf_thread_map *threads,
 				  perf_event__handler_t process, bool data_mmap,
 				  unsigned int nr_threads_synthesize);
 static inline
 int machine__synthesize_threads(struct machine *machine, struct target *target,
-				struct thread_map *threads, bool data_mmap,
+				struct perf_thread_map *threads, bool data_mmap,
 				unsigned int nr_threads_synthesize)
 {
 	return __machine__synthesize_threads(machine, NULL, target, threads,
diff --git a/tools/perf/util/parse-events.c b/tools/perf/util/parse-events.c
index 0540303e5e97..01647efa40a2 100644
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@ -2313,7 +2313,7 @@ static bool is_event_supported(u8 type, unsigned config)
 		.config = config,
 		.disabled = 1,
 	};
-	struct thread_map *tmap = thread_map__new_by_tid(0);
+	struct perf_thread_map *tmap = thread_map__new_by_tid(0);
 
 	if (tmap == NULL)
 		return false;
* Unmerged path tools/perf/util/python.c
* Unmerged path tools/perf/util/scripting-engines/trace-event-python.c
diff --git a/tools/perf/util/thread_map.c b/tools/perf/util/thread_map.c
index 5b3511f2b6b1..e89496c39d58 100644
--- a/tools/perf/util/thread_map.c
+++ b/tools/perf/util/thread_map.c
@@ -28,7 +28,7 @@ static int filter(const struct dirent *dir)
 		return 1;
 }
 
-static void thread_map__reset(struct thread_map *map, int start, int nr)
+static void thread_map__reset(struct perf_thread_map *map, int start, int nr)
 {
 	size_t size = (nr - start) * sizeof(map->map[0]);
 
@@ -36,7 +36,7 @@ static void thread_map__reset(struct thread_map *map, int start, int nr)
 	map->err_thread = -1;
 }
 
-static struct thread_map *thread_map__realloc(struct thread_map *map, int nr)
+static struct perf_thread_map *thread_map__realloc(struct perf_thread_map *map, int nr)
 {
 	size_t size = sizeof(*map) + sizeof(map->map[0]) * nr;
 	int start = map ? map->nr : 0;
@@ -53,9 +53,9 @@ static struct thread_map *thread_map__realloc(struct thread_map *map, int nr)
 
 #define thread_map__alloc(__nr) thread_map__realloc(NULL, __nr)
 
-struct thread_map *thread_map__new_by_pid(pid_t pid)
+struct perf_thread_map *thread_map__new_by_pid(pid_t pid)
 {
-	struct thread_map *threads;
+	struct perf_thread_map *threads;
 	char name[256];
 	int items;
 	struct dirent **namelist = NULL;
@@ -81,9 +81,9 @@ struct thread_map *thread_map__new_by_pid(pid_t pid)
 	return threads;
 }
 
-struct thread_map *thread_map__new_by_tid(pid_t tid)
+struct perf_thread_map *thread_map__new_by_tid(pid_t tid)
 {
-	struct thread_map *threads = thread_map__alloc(1);
+	struct perf_thread_map *threads = thread_map__alloc(1);
 
 	if (threads != NULL) {
 		thread_map__set_pid(threads, 0, tid);
@@ -94,13 +94,13 @@ struct thread_map *thread_map__new_by_tid(pid_t tid)
 	return threads;
 }
 
-static struct thread_map *__thread_map__new_all_cpus(uid_t uid)
+static struct perf_thread_map *__thread_map__new_all_cpus(uid_t uid)
 {
 	DIR *proc;
 	int max_threads = 32, items, i;
 	char path[NAME_MAX + 1 + 6];
 	struct dirent *dirent, **namelist = NULL;
-	struct thread_map *threads = thread_map__alloc(max_threads);
+	struct perf_thread_map *threads = thread_map__alloc(max_threads);
 
 	if (threads == NULL)
 		goto out;
@@ -140,7 +140,7 @@ static struct thread_map *__thread_map__new_all_cpus(uid_t uid)
 		}
 
 		if (grow) {
-			struct thread_map *tmp;
+			struct perf_thread_map *tmp;
 
 			tmp = thread_map__realloc(threads, max_threads);
 			if (tmp == NULL)
@@ -180,17 +180,17 @@ static struct thread_map *__thread_map__new_all_cpus(uid_t uid)
 	goto out_closedir;
 }
 
-struct thread_map *thread_map__new_all_cpus(void)
+struct perf_thread_map *thread_map__new_all_cpus(void)
 {
 	return __thread_map__new_all_cpus(UINT_MAX);
 }
 
-struct thread_map *thread_map__new_by_uid(uid_t uid)
+struct perf_thread_map *thread_map__new_by_uid(uid_t uid)
 {
 	return __thread_map__new_all_cpus(uid);
 }
 
-struct thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid)
+struct perf_thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid)
 {
 	if (pid != -1)
 		return thread_map__new_by_pid(pid);
@@ -201,9 +201,9 @@ struct thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid)
 	return thread_map__new_by_tid(tid);
 }
 
-static struct thread_map *thread_map__new_by_pid_str(const char *pid_str)
+static struct perf_thread_map *thread_map__new_by_pid_str(const char *pid_str)
 {
-	struct thread_map *threads = NULL, *nt;
+	struct perf_thread_map *threads = NULL, *nt;
 	char name[256];
 	int items, total_tasks = 0;
 	struct dirent **namelist = NULL;
@@ -263,9 +263,9 @@ static struct thread_map *thread_map__new_by_pid_str(const char *pid_str)
 	goto out;
 }
 
-struct thread_map *thread_map__new_dummy(void)
+struct perf_thread_map *thread_map__new_dummy(void)
 {
-	struct thread_map *threads = thread_map__alloc(1);
+	struct perf_thread_map *threads = thread_map__alloc(1);
 
 	if (threads != NULL) {
 		thread_map__set_pid(threads, 0, -1);
@@ -275,9 +275,9 @@ struct thread_map *thread_map__new_dummy(void)
 	return threads;
 }
 
-struct thread_map *thread_map__new_by_tid_str(const char *tid_str)
+struct perf_thread_map *thread_map__new_by_tid_str(const char *tid_str)
 {
-	struct thread_map *threads = NULL, *nt;
+	struct perf_thread_map *threads = NULL, *nt;
 	int ntasks = 0;
 	pid_t tid, prev_tid = INT_MAX;
 	char *end_ptr;
@@ -324,7 +324,7 @@ struct thread_map *thread_map__new_by_tid_str(const char *tid_str)
 	goto out;
 }
 
-struct thread_map *thread_map__new_str(const char *pid, const char *tid,
+struct perf_thread_map *thread_map__new_str(const char *pid, const char *tid,
 				       uid_t uid, bool all_threads)
 {
 	if (pid)
@@ -339,7 +339,7 @@ struct thread_map *thread_map__new_str(const char *pid, const char *tid,
 	return thread_map__new_by_tid_str(tid);
 }
 
-static void thread_map__delete(struct thread_map *threads)
+static void thread_map__delete(struct perf_thread_map *threads)
 {
 	if (threads) {
 		int i;
@@ -352,20 +352,20 @@ static void thread_map__delete(struct thread_map *threads)
 	}
 }
 
-struct thread_map *thread_map__get(struct thread_map *map)
+struct perf_thread_map *thread_map__get(struct perf_thread_map *map)
 {
 	if (map)
 		refcount_inc(&map->refcnt);
 	return map;
 }
 
-void thread_map__put(struct thread_map *map)
+void thread_map__put(struct perf_thread_map *map)
 {
 	if (map && refcount_dec_and_test(&map->refcnt))
 		thread_map__delete(map);
 }
 
-size_t thread_map__fprintf(struct thread_map *threads, FILE *fp)
+size_t thread_map__fprintf(struct perf_thread_map *threads, FILE *fp)
 {
 	int i;
 	size_t printed = fprintf(fp, "%d thread%s: ",
@@ -400,7 +400,7 @@ static int get_comm(char **comm, pid_t pid)
 	return err;
 }
 
-static void comm_init(struct thread_map *map, int i)
+static void comm_init(struct perf_thread_map *map, int i)
 {
 	pid_t pid = thread_map__pid(map, i);
 	char *comm = NULL;
@@ -421,7 +421,7 @@ static void comm_init(struct thread_map *map, int i)
 	map->map[i].comm = comm;
 }
 
-void thread_map__read_comms(struct thread_map *threads)
+void thread_map__read_comms(struct perf_thread_map *threads)
 {
 	int i;
 
@@ -429,7 +429,7 @@ void thread_map__read_comms(struct thread_map *threads)
 		comm_init(threads, i);
 }
 
-static void thread_map__copy_event(struct thread_map *threads,
+static void thread_map__copy_event(struct perf_thread_map *threads,
 				   struct thread_map_event *event)
 {
 	unsigned i;
@@ -444,9 +444,9 @@ static void thread_map__copy_event(struct thread_map *threads,
 	refcount_set(&threads->refcnt, 1);
 }
 
-struct thread_map *thread_map__new_event(struct thread_map_event *event)
+struct perf_thread_map *thread_map__new_event(struct thread_map_event *event)
 {
-	struct thread_map *threads;
+	struct perf_thread_map *threads;
 
 	threads = thread_map__alloc(event->nr);
 	if (threads)
@@ -455,7 +455,7 @@ struct thread_map *thread_map__new_event(struct thread_map_event *event)
 	return threads;
 }
 
-bool thread_map__has(struct thread_map *threads, pid_t pid)
+bool thread_map__has(struct perf_thread_map *threads, pid_t pid)
 {
 	int i;
 
@@ -467,7 +467,7 @@ bool thread_map__has(struct thread_map *threads, pid_t pid)
 	return false;
 }
 
-int thread_map__remove(struct thread_map *threads, int idx)
+int thread_map__remove(struct perf_thread_map *threads, int idx)
 {
 	int i;
 
diff --git a/tools/perf/util/thread_map.h b/tools/perf/util/thread_map.h
index 2f689c90a8c6..9358b1b6e657 100644
--- a/tools/perf/util/thread_map.h
+++ b/tools/perf/util/thread_map.h
@@ -11,7 +11,7 @@ struct thread_map_data {
 	char	*comm;
 };
 
-struct thread_map {
+struct perf_thread_map {
 	refcount_t refcnt;
 	int nr;
 	int err_thread;
@@ -20,46 +20,46 @@ struct thread_map {
 
 struct thread_map_event;
 
-struct thread_map *thread_map__new_dummy(void);
-struct thread_map *thread_map__new_by_pid(pid_t pid);
-struct thread_map *thread_map__new_by_tid(pid_t tid);
-struct thread_map *thread_map__new_by_uid(uid_t uid);
-struct thread_map *thread_map__new_all_cpus(void);
-struct thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
-struct thread_map *thread_map__new_event(struct thread_map_event *event);
+struct perf_thread_map *thread_map__new_dummy(void);
+struct perf_thread_map *thread_map__new_by_pid(pid_t pid);
+struct perf_thread_map *thread_map__new_by_tid(pid_t tid);
+struct perf_thread_map *thread_map__new_by_uid(uid_t uid);
+struct perf_thread_map *thread_map__new_all_cpus(void);
+struct perf_thread_map *thread_map__new(pid_t pid, pid_t tid, uid_t uid);
+struct perf_thread_map *thread_map__new_event(struct thread_map_event *event);
 
-struct thread_map *thread_map__get(struct thread_map *map);
-void thread_map__put(struct thread_map *map);
+struct perf_thread_map *thread_map__get(struct perf_thread_map *map);
+void thread_map__put(struct perf_thread_map *map);
 
-struct thread_map *thread_map__new_str(const char *pid,
+struct perf_thread_map *thread_map__new_str(const char *pid,
 		const char *tid, uid_t uid, bool all_threads);
 
-struct thread_map *thread_map__new_by_tid_str(const char *tid_str);
+struct perf_thread_map *thread_map__new_by_tid_str(const char *tid_str);
 
-size_t thread_map__fprintf(struct thread_map *threads, FILE *fp);
+size_t thread_map__fprintf(struct perf_thread_map *threads, FILE *fp);
 
-static inline int thread_map__nr(struct thread_map *threads)
+static inline int thread_map__nr(struct perf_thread_map *threads)
 {
 	return threads ? threads->nr : 1;
 }
 
-static inline pid_t thread_map__pid(struct thread_map *map, int thread)
+static inline pid_t thread_map__pid(struct perf_thread_map *map, int thread)
 {
 	return map->map[thread].pid;
 }
 
 static inline void
-thread_map__set_pid(struct thread_map *map, int thread, pid_t pid)
+thread_map__set_pid(struct perf_thread_map *map, int thread, pid_t pid)
 {
 	map->map[thread].pid = pid;
 }
 
-static inline char *thread_map__comm(struct thread_map *map, int thread)
+static inline char *thread_map__comm(struct perf_thread_map *map, int thread)
 {
 	return map->map[thread].comm;
 }
 
-void thread_map__read_comms(struct thread_map *threads);
-bool thread_map__has(struct thread_map *threads, pid_t pid);
-int thread_map__remove(struct thread_map *threads, int idx);
+void thread_map__read_comms(struct perf_thread_map *threads);
+bool thread_map__has(struct perf_thread_map *threads, pid_t pid);
+int thread_map__remove(struct perf_thread_map *threads, int idx);
 #endif	/* __PERF_THREAD_MAP_H */
