io_uring: fix hanging iopoll in case of -EAGAIN

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Pavel Begunkov <asml.silence@gmail.com>
commit cd664b0e35cb1202f40c259a1a5ea791d18c879d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/cd664b0e.failed

io_do_iopoll() won't do anything with a request unless
req->iopoll_completed is set. So io_complete_rw_iopoll() has to set
it, otherwise io_do_iopoll() will poll a file again and again even
though the request of interest was completed long time ago.

Also, remove -EAGAIN check from io_issue_sqe() as it races with
the changed lines. The request will take the long way and be
resubmitted from io_iopoll*().

io_kiocb's result and iopoll_completed")

Fixes: bbde017a32b3 ("io_uring: add memory barrier to synchronize
	Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit cd664b0e35cb1202f40c259a1a5ea791d18c879d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 0b681a205810,c3e5c1346cfe..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -932,15 -1984,18 +932,25 @@@ static void io_complete_rw(struct kioc
  
  static void io_complete_rw_iopoll(struct kiocb *kiocb, long res, long res2)
  {
 -	struct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);
 +	struct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw);
  
 -	if (kiocb->ki_flags & IOCB_WRITE)
 -		kiocb_end_write(req);
 +	kiocb_end_write(kiocb);
  
++<<<<<<< HEAD
 +	if ((req->flags & REQ_F_LINK) && res != req->result)
 +		req->flags |= REQ_F_FAIL_LINK;
 +	req->result = res;
 +	if (res != -EAGAIN)
 +		req->flags |= REQ_F_IOPOLL_COMPLETED;
++=======
+ 	if (res != -EAGAIN && res != req->result)
+ 		req_set_fail_links(req);
+ 
+ 	WRITE_ONCE(req->result, res);
+ 	/* order with io_poll_complete() checking ->result */
+ 	smp_wmb();
+ 	WRITE_ONCE(req->iopoll_completed, 1);
++>>>>>>> cd664b0e35cb (io_uring: fix hanging iopoll in case of -EAGAIN)
  }
  
  /*
@@@ -1947,15 -5347,17 +1957,21 @@@ static int __io_submit_sqe(struct io_ri
  	if (ret)
  		return ret;
  
++<<<<<<< HEAD
 +	if (ctx->flags & IORING_SETUP_IOPOLL) {
 +		if (req->result == -EAGAIN)
 +			return -EAGAIN;
++=======
+ 	/* If the op doesn't have a file, we're not polling for it */
+ 	if ((ctx->flags & IORING_SETUP_IOPOLL) && req->file) {
+ 		const bool in_async = io_wq_current_is_worker();
++>>>>>>> cd664b0e35cb (io_uring: fix hanging iopoll in case of -EAGAIN)
  
  		/* workqueue context doesn't hold uring_lock, grab it now */
 -		if (in_async)
 +		if (s->needs_lock)
  			mutex_lock(&ctx->uring_lock);
 -
  		io_iopoll_req_issued(req);
 -
 -		if (in_async)
 +		if (s->needs_lock)
  			mutex_unlock(&ctx->uring_lock);
  	}
  
* Unmerged path fs/io_uring.c
