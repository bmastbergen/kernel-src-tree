ipv4: Remove old route notifications and convert listeners

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ido Schimmel <idosch@mellanox.com>
commit 446f739104f4da6207230363848ec2c89dfd858d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/446f7391.failed

Unlike mlxsw, the other listeners to the FIB notification chain do not
require any special modifications as they never considered multiple
identical routes.

This patch removes the old route notifications and converts all the
listeners to use the new replace / delete notifications.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Reviewed-by: David Ahern <dsahern@gmail.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 446f739104f4da6207230363848ec2c89dfd858d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/netdevsim/fib.c
#	net/ipv4/fib_trie.c
diff --cc drivers/net/netdevsim/fib.c
index 1a251f76d09b,4e02a4231fcb..000000000000
--- a/drivers/net/netdevsim/fib.c
+++ b/drivers/net/netdevsim/fib.c
@@@ -184,12 -173,14 +184,17 @@@ static int nsim_fib_event_nb(struct not
  	switch (event) {
  	case FIB_EVENT_RULE_ADD: /* fall through */
  	case FIB_EVENT_RULE_DEL:
 -		err = nsim_fib_rule_event(data, info,
 -					  event == FIB_EVENT_RULE_ADD);
 +		err = nsim_fib_rule_event(info, event == FIB_EVENT_RULE_ADD);
  		break;
  
+ 	case FIB_EVENT_ENTRY_REPLACE:  /* fall through */
  	case FIB_EVENT_ENTRY_ADD:  /* fall through */
  	case FIB_EVENT_ENTRY_DEL:
++<<<<<<< HEAD
 +		err = nsim_fib_event(info, event == FIB_EVENT_ENTRY_ADD);
++=======
+ 		err = nsim_fib_event(data, info, event != FIB_EVENT_ENTRY_DEL);
++>>>>>>> 446f739104f4 (ipv4: Remove old route notifications and convert listeners)
  		break;
  	}
  
diff --cc net/ipv4/fib_trie.c
index 852a585393c4,b92a42433a7d..000000000000
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@@ -2017,13 -2077,21 +1999,25 @@@ static void fib_leaf_notify(struct net 
  		if (tb->tb_id != fa->tb_id)
  			continue;
  
++<<<<<<< HEAD
 +		call_fib_entry_notifier(nb, net, FIB_EVENT_ENTRY_ADD, l->key,
 +					KEYLENGTH - fa->fa_slen, fa);
++=======
+ 		if (fa->fa_slen == last_slen)
+ 			continue;
+ 
+ 		last_slen = fa->fa_slen;
+ 		err = call_fib_entry_notifier(nb, FIB_EVENT_ENTRY_REPLACE,
+ 					      l->key, KEYLENGTH - fa->fa_slen,
+ 					      fa, extack);
+ 		if (err)
+ 			return err;
++>>>>>>> 446f739104f4 (ipv4: Remove old route notifications and convert listeners)
  	}
 -	return 0;
  }
  
 -static int fib_table_notify(struct fib_table *tb, struct notifier_block *nb,
 -			    struct netlink_ext_ack *extack)
 +static void fib_table_notify(struct net *net, struct fib_table *tb,
 +			     struct notifier_block *nb)
  {
  	struct trie *t = (struct trie *)tb->tb_data;
  	struct key_vector *l, *tp = t->kv;
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c b/drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c
index a5addeadc732..c68748b54d78 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lag_mp.c
@@ -191,8 +191,6 @@ static void mlx5_lag_fib_update(struct work_struct *work)
 	rtnl_lock();
 	switch (fib_work->event) {
 	case FIB_EVENT_ENTRY_REPLACE: /* fall through */
-	case FIB_EVENT_ENTRY_APPEND: /* fall through */
-	case FIB_EVENT_ENTRY_ADD: /* fall through */
 	case FIB_EVENT_ENTRY_DEL:
 		mlx5_lag_fib_route_event(ldev, fib_work->event,
 					 fib_work->fen_info.fi);
@@ -249,8 +247,6 @@ static int mlx5_lag_fib_event(struct notifier_block *nb,
 
 	switch (event) {
 	case FIB_EVENT_ENTRY_REPLACE: /* fall through */
-	case FIB_EVENT_ENTRY_APPEND: /* fall through */
-	case FIB_EVENT_ENTRY_ADD: /* fall through */
 	case FIB_EVENT_ENTRY_DEL:
 		fen_info = container_of(info, struct fib_entry_notifier_info,
 					info);
diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index 52037acf49a1..da58e6339456 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@ -5908,14 +5908,14 @@ static void mlxsw_sp_router_fib4_event_work(struct work_struct *work)
 	mlxsw_sp_span_respin(mlxsw_sp);
 
 	switch (fib_work->event) {
-	case FIB_EVENT_ENTRY_REPLACE_TMP:
+	case FIB_EVENT_ENTRY_REPLACE:
 		err = mlxsw_sp_router_fib4_replace(mlxsw_sp,
 						   &fib_work->fen_info);
 		if (err)
 			mlxsw_sp_router_fib_abort(mlxsw_sp);
 		fib_info_put(fib_work->fen_info.fi);
 		break;
-	case FIB_EVENT_ENTRY_DEL_TMP:
+	case FIB_EVENT_ENTRY_DEL:
 		mlxsw_sp_router_fib4_del(mlxsw_sp, &fib_work->fen_info);
 		fib_info_put(fib_work->fen_info.fi);
 		break;
@@ -6012,8 +6012,8 @@ static void mlxsw_sp_router_fib4_event(struct mlxsw_sp_fib_event_work *fib_work,
 	struct fib_nh_notifier_info *fnh_info;
 
 	switch (fib_work->event) {
-	case FIB_EVENT_ENTRY_REPLACE_TMP: /* fall through */
-	case FIB_EVENT_ENTRY_DEL_TMP:
+	case FIB_EVENT_ENTRY_REPLACE: /* fall through */
+	case FIB_EVENT_ENTRY_DEL:
 		fen_info = container_of(info, struct fib_entry_notifier_info,
 					info);
 		fib_work->fen_info = *fen_info;
@@ -6145,8 +6145,7 @@ static int mlxsw_sp_router_fib_event(struct notifier_block *nb,
 						     router->mlxsw_sp);
 		return notifier_from_errno(err);
 	case FIB_EVENT_ENTRY_ADD: /* fall through */
-	case FIB_EVENT_ENTRY_REPLACE: /* fall through */
-	case FIB_EVENT_ENTRY_REPLACE_TMP:
+	case FIB_EVENT_ENTRY_REPLACE:
 		if (router->aborted) {
 			NL_SET_ERR_MSG_MOD(info->extack, "FIB offload was aborted. Not configuring route");
 			return notifier_from_errno(-EINVAL);
diff --git a/drivers/net/ethernet/rocker/rocker_main.c b/drivers/net/ethernet/rocker/rocker_main.c
index c06a7a50400c..88c5c4afa2be 100644
--- a/drivers/net/ethernet/rocker/rocker_main.c
+++ b/drivers/net/ethernet/rocker/rocker_main.c
@@ -2186,7 +2186,7 @@ static void rocker_router_fib_event_work(struct work_struct *work)
 	/* Protect internal structures from changes */
 	rtnl_lock();
 	switch (fib_work->event) {
-	case FIB_EVENT_ENTRY_ADD:
+	case FIB_EVENT_ENTRY_REPLACE:
 		err = rocker_world_fib4_add(rocker, &fib_work->fen_info);
 		if (err)
 			rocker_world_fib4_abort(rocker);
@@ -2228,7 +2228,7 @@ static int rocker_router_fib_event(struct notifier_block *nb,
 	fib_work->event = event;
 
 	switch (event) {
-	case FIB_EVENT_ENTRY_ADD: /* fall through */
+	case FIB_EVENT_ENTRY_REPLACE: /* fall through */
 	case FIB_EVENT_ENTRY_DEL:
 		memcpy(&fib_work->fen_info, ptr, sizeof(fib_work->fen_info));
 		/* Take referece on fib_info to prevent it from being
* Unmerged path drivers/net/netdevsim/fib.c
* Unmerged path net/ipv4/fib_trie.c
