nbd:fix memory leak in nbd_get_socket()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sun Ke <sunke32@huawei.com>
commit dff10bbea4be47bdb615b036c834a275b7c68133
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/dff10bbe.failed

Before returning NULL, put the sock first.

	Cc: stable@vger.kernel.org
Fixes: cf1b2326b734 ("nbd: verify socket is supported during setup")
	Reviewed-by: Josef Bacik <josef@toxicpanda.com>
	Reviewed-by: Mike Christie <mchristi@redhat.com>
	Signed-off-by: Sun Ke <sunke32@huawei.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit dff10bbea4be47bdb615b036c834a275b7c68133)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/block/nbd.c
diff --cc drivers/block/nbd.c
index 73bf952a0d16,19e75999bb15..000000000000
--- a/drivers/block/nbd.c
+++ b/drivers/block/nbd.c
@@@ -968,23 -980,24 +968,31 @@@ static blk_status_t nbd_queue_rq(struc
  	return ret;
  }
  
 -static struct socket *nbd_get_socket(struct nbd_device *nbd, unsigned long fd,
 -				     int *err)
 +static int nbd_check_sock_type(struct nbd_device *nbd, struct socket *sock)
  {
 -	struct socket *sock;
 +	struct sockaddr_storage buf;
 +	struct sockaddr *addr = (struct sockaddr *)&buf;
 +	int err;
  
 -	*err = 0;
 -	sock = sockfd_lookup(fd, err);
 -	if (!sock)
 -		return NULL;
 +	err = kernel_getsockname(sock, addr);
 +	if (err < 0)
 +		return err;
  
++<<<<<<< HEAD
 +	if (addr->sa_family != AF_UNIX) {
 +		dev_err(disk_to_dev(nbd->disk),
 +			"Only AF_UNIX sockets are supported.\n");
 +		return -EINVAL;
++=======
+ 	if (sock->ops->shutdown == sock_no_shutdown) {
+ 		dev_err(disk_to_dev(nbd->disk), "Unsupported socket: shutdown callout must be supported.\n");
+ 		*err = -EINVAL;
+ 		sockfd_put(sock);
+ 		return NULL;
++>>>>>>> dff10bbea4be (nbd:fix memory leak in nbd_get_socket())
  	}
  
 -	return sock;
 +	return 0;
  }
  
  static int nbd_add_socket(struct nbd_device *nbd, unsigned long arg,
* Unmerged path drivers/block/nbd.c
