libbpf: Remove BPF_EMBED_OBJ macro from libbpf.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 3bf3c79b772f4155312c000310abab700aba2200
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3bf3c79b.failed

Drop BPF_EMBED_OBJ and struct bpf_embed_data now that skeleton automatically
embeds contents of its source object file. While BPF_EMBED_OBJ is useful
independently of skeleton, we are currently don't have any use cases utilizing
it, so let's remove them until/if we need it.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20191218052552.2915188-3-andriin@fb.com
(cherry picked from commit 3bf3c79b772f4155312c000310abab700aba2200)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.h
diff --cc tools/lib/bpf/libbpf.h
index e454ceec9fa2,f7084235bae9..000000000000
--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@@ -582,6 -600,50 +582,53 @@@ bpf_program__bpil_offs_to_addr(struct b
   */
  LIBBPF_API int libbpf_num_possible_cpus(void);
  
++<<<<<<< HEAD
++=======
+ struct bpf_map_skeleton {
+ 	const char *name;
+ 	struct bpf_map **map;
+ 	void **mmaped;
+ };
+ 
+ struct bpf_prog_skeleton {
+ 	const char *name;
+ 	struct bpf_program **prog;
+ 	struct bpf_link **link;
+ };
+ 
+ struct bpf_object_skeleton {
+ 	size_t sz; /* size of this struct, for forward/backward compatibility */
+ 
+ 	const char *name;
+ 	void *data;
+ 	size_t data_sz;
+ 
+ 	struct bpf_object **obj;
+ 
+ 	int map_cnt;
+ 	int map_skel_sz; /* sizeof(struct bpf_skeleton_map) */
+ 	struct bpf_map_skeleton *maps;
+ 
+ 	int prog_cnt;
+ 	int prog_skel_sz; /* sizeof(struct bpf_skeleton_prog) */
+ 	struct bpf_prog_skeleton *progs;
+ };
+ 
+ LIBBPF_API int
+ bpf_object__open_skeleton(struct bpf_object_skeleton *s,
+ 			  const struct bpf_object_open_opts *opts);
+ LIBBPF_API int bpf_object__load_skeleton(struct bpf_object_skeleton *s);
+ LIBBPF_API int bpf_object__attach_skeleton(struct bpf_object_skeleton *s);
+ LIBBPF_API void bpf_object__detach_skeleton(struct bpf_object_skeleton *s);
+ LIBBPF_API void bpf_object__destroy_skeleton(struct bpf_object_skeleton *s);
+ 
+ enum libbpf_tristate {
+ 	TRI_NO = 0,
+ 	TRI_YES = 1,
+ 	TRI_MODULE = 2,
+ };
+ 
++>>>>>>> 3bf3c79b772f (libbpf: Remove BPF_EMBED_OBJ macro from libbpf.h)
  #ifdef __cplusplus
  } /* extern "C" */
  #endif
* Unmerged path tools/lib/bpf/libbpf.h
