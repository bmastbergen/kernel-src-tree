bpf: Add enum support to btf_ctx_access()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Martin KaFai Lau <kafai@fb.com>
commit 218b3f65f9081f5e1bffe6de5f0f4b22c935410b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/218b3f65.failed

It allows bpf prog (e.g. tracing) to attach
to a kernel function that takes enum argument.

	Signed-off-by: Martin KaFai Lau <kafai@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20200109003459.3855366-1-kafai@fb.com
(cherry picked from commit 218b3f65f9081f5e1bffe6de5f0f4b22c935410b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/btf.c
diff --cc kernel/bpf/btf.c
index dc1f2324f36a,6a5ccb748a72..000000000000
--- a/kernel/bpf/btf.c
+++ b/kernel/bpf/btf.c
@@@ -3561,20 -3649,35 +3561,25 @@@ bool btf_ctx_access(int off, int size, 
  	}
  	arg = off / 8;
  	args = (const struct btf_param *)(t + 1);
 -	/* if (t == NULL) Fall back to default BPF prog with 5 u64 arguments */
 -	nr_args = t ? btf_type_vlen(t) : 5;
 -	if (prog->aux->attach_btf_trace) {
 -		/* skip first 'void *__data' argument in btf_trace_##name typedef */
 -		args++;
 -		nr_args--;
 -	}
 -
 -	if (prog->expected_attach_type == BPF_TRACE_FEXIT &&
 -	    arg == nr_args) {
 -		if (!t)
 -			/* Default prog with 5 args. 6th arg is retval. */
 -			return true;
 -		/* function return type */
 -		t = btf_type_by_id(btf, t->type);
 -	} else if (arg >= nr_args) {
 -		bpf_log(log, "func '%s' doesn't have %d-th argument\n",
 -			tname, arg + 1);
 +	/* skip first 'void *__data' argument in btf_trace_##name typedef */
 +	args++;
 +	nr_args = btf_type_vlen(t) - 1;
 +	if (arg >= nr_args) {
 +		bpf_log(log, "raw_tp '%s' doesn't have %d-th argument\n",
 +			tname, arg);
  		return false;
 -	} else {
 -		if (!t)
 -			/* Default prog with 5 args */
 -			return true;
 -		t = btf_type_by_id(btf, args[arg].type);
  	}
 +
 +	t = btf_type_by_id(btf_vmlinux, args[arg].type);
  	/* skip modifiers */
  	while (btf_type_is_modifier(t))
++<<<<<<< HEAD
 +		t = btf_type_by_id(btf_vmlinux, t->type);
 +	if (btf_type_is_int(t))
++=======
+ 		t = btf_type_by_id(btf, t->type);
+ 	if (btf_type_is_int(t) || btf_type_is_enum(t))
++>>>>>>> 218b3f65f908 (bpf: Add enum support to btf_ctx_access())
  		/* accessing a scalar */
  		return true;
  	if (!btf_type_is_ptr(t)) {
* Unmerged path kernel/bpf/btf.c
