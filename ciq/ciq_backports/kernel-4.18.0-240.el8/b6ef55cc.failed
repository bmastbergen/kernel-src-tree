drm/amd/display: DP training to set properly SCRAMBLING_DISABLE

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Vladimir Stempen <vladimir.stempen@amd.com>
commit b6ef55ccba7ed00fc10e3e6f619c8f886162427f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b6ef55cc.failed

[Why]
DP training sequence to set SCRAMBLING_DISABLE bit properly based on
training pattern - per DP Spec.

[How]
Update dpcd_pattern.v1_4.SCRAMBLING_DISABLE with 1 for TPS1, TPS2, TPS3,
but not for TPS4.

	Signed-off-by: Vladimir Stempen <vladimir.stempen@amd.com>
	Reviewed-by: Wenjing Liu <Wenjing.Liu@amd.com>
	Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
	Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
(cherry picked from commit b6ef55ccba7ed00fc10e3e6f619c8f886162427f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/amd/display/dc/core/dc_link_dp.c
diff --cc drivers/gpu/drm/amd/display/dc/core/dc_link_dp.c
index 9e31e95b04fb,caa090d0b6ac..000000000000
--- a/drivers/gpu/drm/amd/display/dc/core/dc_link_dp.c
+++ b/drivers/gpu/drm/amd/display/dc/core/dc_link_dp.c
@@@ -212,7 -218,35 +212,37 @@@ static enum dpcd_training_pattern
  	}
  
  	return dpcd_tr_pattern;
 -}
  
++<<<<<<< HEAD
++=======
+ static uint8_t dc_dp_initialize_scrambling_data_symbols(
+ 	struct dc_link *link,
+ 	enum dc_dp_training_pattern pattern)
+ {
+ 	uint8_t disable_scrabled_data_symbols = 0;
+ 
+ 	switch (pattern) {
+ 	case DP_TRAINING_PATTERN_SEQUENCE_1:
+ 	case DP_TRAINING_PATTERN_SEQUENCE_2:
+ 	case DP_TRAINING_PATTERN_SEQUENCE_3:
+ 		disable_scrabled_data_symbols = 1;
+ 		break;
+ 	case DP_TRAINING_PATTERN_SEQUENCE_4:
+ 		disable_scrabled_data_symbols = 0;
+ 		break;
+ 	default:
+ 		ASSERT(0);
+ 		DC_LOG_HW_LINK_TRAINING("%s: Invalid HW Training pattern: %d\n",
+ 			__func__, pattern);
+ 		break;
+ 	}
+ 	return disable_scrabled_data_symbols;
+ }
+ 
+ static inline bool is_repeater(struct dc_link *link, uint32_t offset)
+ {
+ 	return (!link->is_lttpr_mode_transparent && offset != 0);
++>>>>>>> b6ef55ccba7e (drm/amd/display: DP training to set properly SCRAMBLING_DISABLE)
  }
  
  static void dpcd_set_lt_pattern_and_lane_settings(
@@@ -233,16 -274,26 +263,23 @@@
  	* DpcdAddress_TrainingPatternSet
  	*****************************************************************/
  	dpcd_pattern.v1_4.TRAINING_PATTERN_SET =
 -		dc_dp_training_pattern_to_dpcd_training_pattern(link, pattern);
 +		hw_training_pattern_to_dpcd_training_pattern(link, pattern);
  
++<<<<<<< HEAD
 +	dpcd_lt_buffer[DP_TRAINING_PATTERN_SET - dpcd_base_lt_offset]
++=======
+ 	dpcd_pattern.v1_4.SCRAMBLING_DISABLE =
+ 		dc_dp_initialize_scrambling_data_symbols(link, pattern);
+ 
+ 	dpcd_lt_buffer[DP_TRAINING_PATTERN_SET - DP_TRAINING_PATTERN_SET]
++>>>>>>> b6ef55ccba7e (drm/amd/display: DP training to set properly SCRAMBLING_DISABLE)
  		= dpcd_pattern.raw;
  
 -	if (is_repeater(link, offset)) {
 -		DC_LOG_HW_LINK_TRAINING("%s\n LTTPR Repeater ID: %d\n 0x%X pattern = %x\n",
 -			__func__,
 -			offset,
 -			dpcd_base_lt_offset,
 -			dpcd_pattern.v1_4.TRAINING_PATTERN_SET);
 -	} else {
 -		DC_LOG_HW_LINK_TRAINING("%s\n 0x%X pattern = %x\n",
 -			__func__,
 -			dpcd_base_lt_offset,
 -			dpcd_pattern.v1_4.TRAINING_PATTERN_SET);
 -	}
 +	DC_LOG_HW_LINK_TRAINING("%s\n %x pattern = %x\n",
 +		__func__,
 +		DP_TRAINING_PATTERN_SET,
 +		dpcd_pattern.v1_4.TRAINING_PATTERN_SET);
 +
  	/*****************************************************************
  	* DpcdAddress_Lane0Set -> DpcdAddress_Lane3Set
  	*****************************************************************/
* Unmerged path drivers/gpu/drm/amd/display/dc/core/dc_link_dp.c
