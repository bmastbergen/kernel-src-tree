Bluetooth: btrtl: Add firmware version print

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Alex Lu <alex_lu@realsil.com.cn>
commit 240b64a83165dde816664b50900aa12f1db92359
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/240b64a8.failed

This patch is used to print fw version for debug convenience

	Signed-off-by: Alex Lu <alex_lu@realsil.com.cn>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 240b64a83165dde816664b50900aa12f1db92359)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/btrtl.c
diff --cc drivers/bluetooth/btrtl.c
index 437f080deaab,adb8ba0fcd59..000000000000
--- a/drivers/bluetooth/btrtl.c
+++ b/drivers/bluetooth/btrtl.c
@@@ -85,10 -146,59 +85,61 @@@ static const struct id_table ic_id_tabl
  	/* 8822B */
  	{ IC_INFO(RTL_ROM_LMP_8822B, 0xb),
  	  .config_needed = true,
 -	  .has_rom_version = true,
  	  .fw_name  = "rtl_bt/rtl8822b_fw.bin",
 -	  .cfg_name = "rtl_bt/rtl8822b_config" },
 +	  .cfg_name = "rtl_bt/rtl8822b_config.bin" },
  	};
  
++<<<<<<< HEAD
++=======
+ static const struct id_table *btrtl_match_ic(u16 lmp_subver, u16 hci_rev,
+ 					     u8 hci_ver, u8 hci_bus)
+ {
+ 	int i;
+ 
+ 	for (i = 0; i < ARRAY_SIZE(ic_id_table); i++) {
+ 		if ((ic_id_table[i].match_flags & IC_MATCH_FL_LMPSUBV) &&
+ 		    (ic_id_table[i].lmp_subver != lmp_subver))
+ 			continue;
+ 		if ((ic_id_table[i].match_flags & IC_MATCH_FL_HCIREV) &&
+ 		    (ic_id_table[i].hci_rev != hci_rev))
+ 			continue;
+ 		if ((ic_id_table[i].match_flags & IC_MATCH_FL_HCIVER) &&
+ 		    (ic_id_table[i].hci_ver != hci_ver))
+ 			continue;
+ 		if ((ic_id_table[i].match_flags & IC_MATCH_FL_HCIBUS) &&
+ 		    (ic_id_table[i].hci_bus != hci_bus))
+ 			continue;
+ 
+ 		break;
+ 	}
+ 	if (i >= ARRAY_SIZE(ic_id_table))
+ 		return NULL;
+ 
+ 	return &ic_id_table[i];
+ }
+ 
+ static struct sk_buff *btrtl_read_local_version(struct hci_dev *hdev)
+ {
+ 	struct sk_buff *skb;
+ 
+ 	skb = __hci_cmd_sync(hdev, HCI_OP_READ_LOCAL_VERSION, 0, NULL,
+ 			     HCI_INIT_TIMEOUT);
+ 	if (IS_ERR(skb)) {
+ 		rtl_dev_err(hdev, "HCI_OP_READ_LOCAL_VERSION failed (%ld)",
+ 			    PTR_ERR(skb));
+ 		return skb;
+ 	}
+ 
+ 	if (skb->len != sizeof(struct hci_rp_read_local_version)) {
+ 		rtl_dev_err(hdev, "HCI_OP_READ_LOCAL_VERSION event length mismatch");
+ 		kfree_skb(skb);
+ 		return ERR_PTR(-EIO);
+ 	}
+ 
+ 	return skb;
+ }
+ 
++>>>>>>> 240b64a83165 (Bluetooth: btrtl: Add firmware version print)
  static int rtl_read_rom_version(struct hci_dev *hdev, u8 *version)
  {
  	struct rtl_rom_version_evt *rom_version;
@@@ -460,44 -519,43 +525,48 @@@ err_req_fw
  	return ret;
  }
  
 -void btrtl_free(struct btrtl_device_info *btrtl_dev)
++<<<<<<< HEAD
 +static struct sk_buff *btrtl_read_local_version(struct hci_dev *hdev)
  {
 -	kfree(btrtl_dev->fw_data);
 -	kfree(btrtl_dev->cfg_data);
 -	kfree(btrtl_dev);
 +	struct sk_buff *skb;
 +
 +	skb = __hci_cmd_sync(hdev, HCI_OP_READ_LOCAL_VERSION, 0, NULL,
 +			     HCI_INIT_TIMEOUT);
 +	if (IS_ERR(skb)) {
 +		BT_ERR("%s: HCI_OP_READ_LOCAL_VERSION failed (%ld)",
 +		       hdev->name, PTR_ERR(skb));
 +		return skb;
 +	}
 +
 +	if (skb->len != sizeof(struct hci_rp_read_local_version)) {
 +		BT_ERR("%s: HCI_OP_READ_LOCAL_VERSION event length mismatch",
 +		       hdev->name);
 +		kfree_skb(skb);
 +		return ERR_PTR(-EIO);
 +	}
 +
 +	return skb;
  }
 -EXPORT_SYMBOL_GPL(btrtl_free);
  
 -struct btrtl_device_info *btrtl_initialize(struct hci_dev *hdev,
 -					   const char *postfix)
 +int btrtl_setup_realtek(struct hci_dev *hdev)
++=======
++void btrtl_free(struct btrtl_device_info *btrtl_dev)
++>>>>>>> 240b64a83165 (Bluetooth: btrtl: Add firmware version print)
  {
 -	struct btrtl_device_info *btrtl_dev;
  	struct sk_buff *skb;
  	struct hci_rp_read_local_version *resp;
 -	char cfg_name[40];
  	u16 hci_rev, lmp_subver;
 -	u8 hci_ver;
 -	int ret;
 -
 -	btrtl_dev = kzalloc(sizeof(*btrtl_dev), GFP_KERNEL);
 -	if (!btrtl_dev) {
 -		ret = -ENOMEM;
 -		goto err_alloc;
 -	}
  
  	skb = btrtl_read_local_version(hdev);
 -	if (IS_ERR(skb)) {
 -		ret = PTR_ERR(skb);
 -		goto err_free;
 -	}
 +	if (IS_ERR(skb))
 +		return -PTR_ERR(skb);
  
  	resp = (struct hci_rp_read_local_version *)skb->data;
 -	rtl_dev_info(hdev, "rtl: examining hci_ver=%02x hci_rev=%04x lmp_ver=%02x lmp_subver=%04x\n",
 -		     resp->hci_ver, resp->hci_rev,
 -		     resp->lmp_ver, resp->lmp_subver);
 +	bt_dev_info(hdev, "rtl: examining hci_ver=%02x hci_rev=%04x "
 +		    "lmp_ver=%02x lmp_subver=%04x",
 +		    resp->hci_ver, resp->hci_rev,
 +		    resp->lmp_ver, resp->lmp_subver);
  
 -	hci_ver = resp->hci_ver;
  	hci_rev = le16_to_cpu(resp->hci_rev);
  	lmp_subver = le16_to_cpu(resp->lmp_subver);
  	kfree_skb(skb);
* Unmerged path drivers/bluetooth/btrtl.c
