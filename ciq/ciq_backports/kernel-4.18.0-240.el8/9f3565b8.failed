Bluetooth: hci_qca: Replace of_device_get_match_data with device_get_match_data

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rocky Liao <rjliao@codeaurora.org>
commit 9f3565b89c43d2a0082bccbc3918f2ebae739533
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9f3565b8.failed

Replace of_device_get_match_data with device_get_match_data to make driver
work across platforms.

	Signed-off-by: Rocky Liao <rjliao@codeaurora.org>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 9f3565b89c43d2a0082bccbc3918f2ebae739533)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/bluetooth/hci_qca.c
diff --cc drivers/bluetooth/hci_qca.c
index c7723b08787d,b602ed01505b..000000000000
--- a/drivers/bluetooth/hci_qca.c
+++ b/drivers/bluetooth/hci_qca.c
@@@ -998,34 -1501,68 +998,38 @@@ static int qca_serdev_probe(struct serd
  		return -ENOMEM;
  
  	qcadev->serdev_hu.serdev = serdev;
++<<<<<<< HEAD
++=======
+ 	data = device_get_match_data(&serdev->dev);
++>>>>>>> 9f3565b89c43 (Bluetooth: hci_qca: Replace of_device_get_match_data with device_get_match_data)
  	serdev_device_set_drvdata(serdev, qcadev);
 -	device_property_read_string(&serdev->dev, "firmware-name",
 -					 &qcadev->firmware_name);
 -	if (data && qca_is_wcn399x(data->soc_type)) {
 -		qcadev->btsoc_type = data->soc_type;
 -		qcadev->bt_power = devm_kzalloc(&serdev->dev,
 -						sizeof(struct qca_power),
 -						GFP_KERNEL);
 -		if (!qcadev->bt_power)
 -			return -ENOMEM;
 -
 -		qcadev->bt_power->dev = &serdev->dev;
 -		err = qca_init_regulators(qcadev->bt_power, data->vregs,
 -					  data->num_vregs);
 -		if (err) {
 -			BT_ERR("Failed to init regulators:%d", err);
 -			goto out;
 -		}
 -
 -		qcadev->bt_power->vregs_on = false;
 -
 -		device_property_read_u32(&serdev->dev, "max-speed",
 -					 &qcadev->oper_speed);
 -		if (!qcadev->oper_speed)
 -			BT_DBG("UART will pick default operating speed");
 -
 -		err = hci_uart_register_device(&qcadev->serdev_hu, &qca_proto);
 -		if (err) {
 -			BT_ERR("wcn3990 serdev registration failed");
 -			goto out;
 -		}
 -	} else {
 -		qcadev->btsoc_type = QCA_ROME;
 -		qcadev->bt_en = devm_gpiod_get(&serdev->dev, "enable",
 -					       GPIOD_OUT_LOW);
 -		if (IS_ERR(qcadev->bt_en)) {
 -			dev_err(&serdev->dev, "failed to acquire enable gpio\n");
 -			return PTR_ERR(qcadev->bt_en);
 -		}
  
 -		qcadev->susclk = devm_clk_get(&serdev->dev, NULL);
 -		if (IS_ERR(qcadev->susclk)) {
 -			dev_err(&serdev->dev, "failed to acquire clk\n");
 -			return PTR_ERR(qcadev->susclk);
 -		}
 +	qcadev->bt_en = devm_gpiod_get(&serdev->dev, "enable",
 +				       GPIOD_OUT_LOW);
 +	if (IS_ERR(qcadev->bt_en)) {
 +		dev_err(&serdev->dev, "failed to acquire enable gpio\n");
 +		return PTR_ERR(qcadev->bt_en);
 +	}
  
 -		err = clk_set_rate(qcadev->susclk, SUSCLK_RATE_32KHZ);
 -		if (err)
 -			return err;
 +	qcadev->susclk = devm_clk_get(&serdev->dev, NULL);
 +	if (IS_ERR(qcadev->susclk)) {
 +		dev_err(&serdev->dev, "failed to acquire clk\n");
 +		return PTR_ERR(qcadev->susclk);
 +	}
  
 -		err = clk_prepare_enable(qcadev->susclk);
 -		if (err)
 -			return err;
 +	err = clk_set_rate(qcadev->susclk, SUSCLK_RATE_32KHZ);
 +	if (err)
 +		return err;
  
 -		err = hci_uart_register_device(&qcadev->serdev_hu, &qca_proto);
 -		if (err)
 -			clk_disable_unprepare(qcadev->susclk);
 -	}
 +	err = clk_prepare_enable(qcadev->susclk);
 +	if (err)
 +		return err;
  
 -out:	return err;
 +	err = hci_uart_register_device(&qcadev->serdev_hu, &qca_proto);
 +	if (err)
 +		clk_disable_unprepare(qcadev->susclk);
  
 +	return err;
  }
  
  static void qca_serdev_remove(struct serdev_device *serdev)
* Unmerged path drivers/bluetooth/hci_qca.c
