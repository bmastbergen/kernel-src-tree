block/rq_qos: add rq_qos_merge()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Tejun Heo <tj@kernel.org>
commit d3e65ffff61c329fb2d0bf15736c440c2d0cfc97
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d3e65fff.failed

Add a merge hook for rq_qos.  This will be used by io.weight.

	Signed-off-by: Tejun Heo <tj@kernel.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit d3e65ffff61c329fb2d0bf15736c440c2d0cfc97)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-core.c
diff --cc block/blk-core.c
index 667e52975e7b,875e8d105067..000000000000
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@@ -594,10 -600,11 +594,15 @@@ bool bio_attempt_back_merge(struct requ
  {
  	const int ff = bio->bi_opf & REQ_FAILFAST_MASK;
  
 -	if (!ll_back_merge_fn(req, bio, nr_segs))
 +	if (!ll_back_merge_fn(q, req, bio))
  		return false;
  
++<<<<<<< HEAD
 +	trace_block_bio_backmerge(q, req, bio);
++=======
+ 	trace_block_bio_backmerge(req->q, req, bio);
+ 	rq_qos_merge(req->q, req, bio);
++>>>>>>> d3e65ffff61c (block/rq_qos: add rq_qos_merge())
  
  	if ((req->cmd_flags & REQ_FAILFAST_MASK) != ff)
  		blk_rq_set_mixed_merge(req);
@@@ -615,10 -622,11 +620,15 @@@ bool bio_attempt_front_merge(struct req
  {
  	const int ff = bio->bi_opf & REQ_FAILFAST_MASK;
  
 -	if (!ll_front_merge_fn(req, bio, nr_segs))
 +	if (!ll_front_merge_fn(q, req, bio))
  		return false;
  
++<<<<<<< HEAD
 +	trace_block_bio_frontmerge(q, req, bio);
++=======
+ 	trace_block_bio_frontmerge(req->q, req, bio);
+ 	rq_qos_merge(req->q, req, bio);
++>>>>>>> d3e65ffff61c (block/rq_qos: add rq_qos_merge())
  
  	if ((req->cmd_flags & REQ_FAILFAST_MASK) != ff)
  		blk_rq_set_mixed_merge(req);
* Unmerged path block/blk-core.c
diff --git a/block/blk-rq-qos.c b/block/blk-rq-qos.c
index 7f70f6906a57..b069962168b0 100644
--- a/block/blk-rq-qos.c
+++ b/block/blk-rq-qos.c
@@ -81,6 +81,15 @@ void __rq_qos_track(struct rq_qos *rqos, struct request *rq, struct bio *bio)
 	} while (rqos);
 }
 
+void __rq_qos_merge(struct rq_qos *rqos, struct request *rq, struct bio *bio)
+{
+	do {
+		if (rqos->ops->merge)
+			rqos->ops->merge(rqos, rq, bio);
+		rqos = rqos->next;
+	} while (rqos);
+}
+
 void __rq_qos_done_bio(struct rq_qos *rqos, struct bio *bio)
 {
 	do {
diff --git a/block/blk-rq-qos.h b/block/blk-rq-qos.h
index 3c85f26d3846..7b12c02575c2 100644
--- a/block/blk-rq-qos.h
+++ b/block/blk-rq-qos.h
@@ -34,6 +34,7 @@ struct rq_qos {
 struct rq_qos_ops {
 	void (*throttle)(struct rq_qos *, struct bio *);
 	void (*track)(struct rq_qos *, struct request *, struct bio *);
+	void (*merge)(struct rq_qos *, struct request *, struct bio *);
 	void (*issue)(struct rq_qos *, struct request *);
 	void (*requeue)(struct rq_qos *, struct request *);
 	void (*done)(struct rq_qos *, struct request *);
@@ -134,6 +135,7 @@ void __rq_qos_issue(struct rq_qos *rqos, struct request *rq);
 void __rq_qos_requeue(struct rq_qos *rqos, struct request *rq);
 void __rq_qos_throttle(struct rq_qos *rqos, struct bio *bio);
 void __rq_qos_track(struct rq_qos *rqos, struct request *rq, struct bio *bio);
+void __rq_qos_merge(struct rq_qos *rqos, struct request *rq, struct bio *bio);
 void __rq_qos_done_bio(struct rq_qos *rqos, struct bio *bio);
 
 static inline void rq_qos_cleanup(struct request_queue *q, struct bio *bio)
@@ -179,6 +181,13 @@ static inline void rq_qos_track(struct request_queue *q, struct request *rq,
 		__rq_qos_track(q->rq_qos, rq, bio);
 }
 
+static inline void rq_qos_merge(struct request_queue *q, struct request *rq,
+				struct bio *bio)
+{
+	if (q->rq_qos)
+		__rq_qos_merge(q->rq_qos, rq, bio);
+}
+
 void rq_qos_exit(struct request_queue *);
 
 #endif
