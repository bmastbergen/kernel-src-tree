igc: Add PHY power management control

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sasha Neftin <sasha.neftin@intel.com>
commit bcb3244ccdc4cebb6ed3d47d973da7b1a03837c0
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/bcb3244c.failed

PHY power management control should provide a reliable and accurate
indication of PHY reset completion and decrease the delay time
after a PHY reset

	Signed-off-by: Sasha Neftin <sasha.neftin@intel.com>
	Tested-by: Aaron Brown <aaron.f.brown@intel.com>
	Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
(cherry picked from commit bcb3244ccdc4cebb6ed3d47d973da7b1a03837c0)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/igc/igc_phy.c
diff --cc drivers/net/ethernet/intel/igc/igc_phy.c
index dfd983cbe767,8e1799508edc..000000000000
--- a/drivers/net/ethernet/intel/igc/igc_phy.c
+++ b/drivers/net/ethernet/intel/igc/igc_phy.c
@@@ -195,8 -198,18 +198,23 @@@ s32 igc_phy_hw_reset(struct igc_hw *hw
  	wr32(IGC_CTRL, ctrl);
  	wrfl();
  
++<<<<<<< HEAD
 +	mdelay(100); /* RHEL Only */
 +	/* Was: usleep_range(1500, 2000);*/
++=======
+ 	/* SW should guarantee 100us for the completion of the PHY reset */
+ 	usleep_range(100, 150);
+ 	do {
+ 		phpm = rd32(IGC_I225_PHPM);
+ 		timeout--;
+ 		udelay(1);
+ 	} while (!(phpm & IGC_PHY_RST_COMP) && timeout);
+ 
+ 	if (!timeout)
+ 		hw_dbg("Timeout is expired after a phy reset\n");
+ 
+ 	usleep_range(100, 150);
++>>>>>>> bcb3244ccdc4 (igc: Add PHY power management control)
  
  	phy->ops.release(hw);
  
diff --git a/drivers/net/ethernet/intel/igc/igc_defines.h b/drivers/net/ethernet/intel/igc/igc_defines.h
index 9e34b0969322..58efa7a02c68 100644
--- a/drivers/net/ethernet/intel/igc/igc_defines.h
+++ b/drivers/net/ethernet/intel/igc/igc_defines.h
@@ -464,6 +464,7 @@
 /* PHY Status Register */
 #define MII_SR_LINK_STATUS	0x0004 /* Link Status 1 = link */
 #define MII_SR_AUTONEG_COMPLETE	0x0020 /* Auto Neg Complete */
+#define IGC_PHY_RST_COMP	0x0100 /* Internal PHY reset completion */
 
 /* PHY 1000 MII Register/Bit Definitions */
 /* PHY Registers defined by IEEE */
* Unmerged path drivers/net/ethernet/intel/igc/igc_phy.c
diff --git a/drivers/net/ethernet/intel/igc/igc_regs.h b/drivers/net/ethernet/intel/igc/igc_regs.h
index c82111051898..c9029b549b90 100644
--- a/drivers/net/ethernet/intel/igc/igc_regs.h
+++ b/drivers/net/ethernet/intel/igc/igc_regs.h
@@ -12,6 +12,7 @@
 #define IGC_MDIC		0x00020  /* MDI Control - RW */
 #define IGC_MDICNFG		0x00E04  /* MDC/MDIO Configuration - RW */
 #define IGC_CONNSW		0x00034  /* Copper/Fiber switch control - RW */
+#define IGC_I225_PHPM		0x00E14  /* I225 PHY Power Management */
 
 /* Internal Packet Buffer Size Registers */
 #define IGC_RXPBS		0x02404  /* Rx Packet Buffer Size - RW */
