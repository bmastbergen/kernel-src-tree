powerpc/ima: Add support to initialize ima policy rules

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Nayna Jain <nayna@linux.ibm.com>
commit 4238fad366a660cbc6499ca1ea4be42bd4d1ac5b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4238fad3.failed

PowerNV systems use a Linux-based bootloader, which rely on the IMA
subsystem to enforce different secure boot modes. Since the
verification policy may differ based on the secure boot mode of the
system, the policies must be defined at runtime.

This patch implements arch-specific support to define IMA policy rules
based on the runtime secure boot mode of the system.

This patch provides arch-specific IMA policies if PPC_SECURE_BOOT
config is enabled.

	Signed-off-by: Nayna Jain <nayna@linux.ibm.com>
	Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
	Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
Link: https://lore.kernel.org/r/1572492694-6520-3-git-send-email-zohar@linux.ibm.com
(cherry picked from commit 4238fad366a660cbc6499ca1ea4be42bd4d1ac5b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/powerpc/Kconfig
#	arch/powerpc/kernel/Makefile
#	include/linux/ima.h
diff --cc arch/powerpc/Kconfig
index 4e03e8517ccd,c795039bdc73..000000000000
--- a/arch/powerpc/Kconfig
+++ b/arch/powerpc/Kconfig
@@@ -889,6 -934,17 +889,20 @@@ config PPC_MEM_KEY
  
  	  If unsure, say y.
  
++<<<<<<< HEAD
++=======
+ config PPC_SECURE_BOOT
+ 	prompt "Enable secure boot support"
+ 	bool
+ 	depends on PPC_POWERNV
+ 	depends on IMA_ARCH_POLICY
+ 	help
+ 	  Systems with firmware secure boot enabled need to define security
+ 	  policies to extend secure boot to the OS. This config allows a user
+ 	  to enable OS secure boot on systems that have firmware support for
+ 	  it. If in doubt say N.
+ 
++>>>>>>> 4238fad366a6 (powerpc/ima: Add support to initialize ima policy rules)
  endmenu
  
  config ISA_DMA_API
diff --cc arch/powerpc/kernel/Makefile
index ee9c85467e0d,e8eb2955b7d5..000000000000
--- a/arch/powerpc/kernel/Makefile
+++ b/arch/powerpc/kernel/Makefile
@@@ -143,17 -157,27 +143,23 @@@ endi
  
  obj-$(CONFIG_EPAPR_PARAVIRT)	+= epapr_paravirt.o epapr_hcalls.o
  obj-$(CONFIG_KVM_GUEST)		+= kvm.o kvm_emul.o
 -ifneq ($(CONFIG_PPC_POWERNV)$(CONFIG_PPC_SVM),)
 -obj-y				+= ucall.o
 -endif
  
++<<<<<<< HEAD
 +# Disable GCOV & sanitizers in odd or sensitive code
++=======
+ obj-$(CONFIG_PPC_SECURE_BOOT)	+= secure_boot.o ima_arch.o
+ 
+ # Disable GCOV, KCOV & sanitizers in odd or sensitive code
++>>>>>>> 4238fad366a6 (powerpc/ima: Add support to initialize ima policy rules)
  GCOV_PROFILE_prom_init.o := n
 -KCOV_INSTRUMENT_prom_init.o := n
  UBSAN_SANITIZE_prom_init.o := n
  GCOV_PROFILE_machine_kexec_64.o := n
 -KCOV_INSTRUMENT_machine_kexec_64.o := n
  UBSAN_SANITIZE_machine_kexec_64.o := n
  GCOV_PROFILE_machine_kexec_32.o := n
 -KCOV_INSTRUMENT_machine_kexec_32.o := n
  UBSAN_SANITIZE_machine_kexec_32.o := n
  GCOV_PROFILE_kprobes.o := n
 -KCOV_INSTRUMENT_kprobes.o := n
  UBSAN_SANITIZE_kprobes.o := n
  GCOV_PROFILE_kprobes-ftrace.o := n
 -KCOV_INSTRUMENT_kprobes-ftrace.o := n
  UBSAN_SANITIZE_kprobes-ftrace.o := n
  UBSAN_SANITIZE_vdso.o := n
  
diff --cc include/linux/ima.h
index c7e90742b6e5,6d904754d858..000000000000
--- a/include/linux/ima.h
+++ b/include/linux/ima.h
@@@ -31,7 -29,8 +31,12 @@@ extern void ima_kexec_cmdline(const voi
  extern void ima_add_kexec_buffer(struct kimage *image);
  #endif
  
++<<<<<<< HEAD
 +#if defined(CONFIG_X86) && defined(CONFIG_EFI)
++=======
+ #if (defined(CONFIG_X86) && defined(CONFIG_EFI)) || defined(CONFIG_S390) \
+ 	|| defined(CONFIG_PPC_SECURE_BOOT)
++>>>>>>> 4238fad366a6 (powerpc/ima: Add support to initialize ima policy rules)
  extern bool arch_ima_get_secureboot(void);
  extern const char * const *arch_get_ima_policy(void);
  #else
* Unmerged path arch/powerpc/Kconfig
* Unmerged path arch/powerpc/kernel/Makefile
diff --git a/arch/powerpc/kernel/ima_arch.c b/arch/powerpc/kernel/ima_arch.c
new file mode 100644
index 000000000000..d88913dc0da7
--- /dev/null
+++ b/arch/powerpc/kernel/ima_arch.c
@@ -0,0 +1,43 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2019 IBM Corporation
+ * Author: Nayna Jain
+ */
+
+#include <linux/ima.h>
+#include <asm/secure_boot.h>
+
+bool arch_ima_get_secureboot(void)
+{
+	return is_ppc_secureboot_enabled();
+}
+
+/*
+ * The "secure_rules" are enabled only on "secureboot" enabled systems.
+ * These rules verify the file signatures against known good values.
+ * The "appraise_type=imasig|modsig" option allows the known good signature
+ * to be stored as an xattr or as an appended signature.
+ *
+ * To avoid duplicate signature verification as much as possible, the IMA
+ * policy rule for module appraisal is added only if CONFIG_MODULE_SIG_FORCE
+ * is not enabled.
+ */
+static const char *const secure_rules[] = {
+	"appraise func=KEXEC_KERNEL_CHECK appraise_type=imasig|modsig",
+#ifndef CONFIG_MODULE_SIG_FORCE
+	"appraise func=MODULE_CHECK appraise_type=imasig|modsig",
+#endif
+	NULL
+};
+
+/*
+ * Returns the relevant IMA arch-specific policies based on the system secure
+ * boot state.
+ */
+const char *const *arch_get_ima_policy(void)
+{
+	if (is_ppc_secureboot_enabled())
+		return secure_rules;
+
+	return NULL;
+}
* Unmerged path include/linux/ima.h
