mlxsw: spectrum_router: Consolidate identical functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ido Schimmel <idosch@mellanox.com>
commit b04720aee9a61b0b2f03a81d575fdcfb84c43c34
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b04720ae.failed

After the last patch mlxsw_sp_fib{4,6}_node_entry_link() and
mlxsw_sp_fib{4,6}_node_entry_unlink() are identical and can therefore be
consolidated into the same common function.

Perform the consolidation.

	Signed-off-by: Ido Schimmel <idosch@mellanox.com>
	Acked-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit b04720aee9a61b0b2f03a81d575fdcfb84c43c34)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
index 575ab41fc96b,f332c55fc83e..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
@@@ -5318,106 -5374,6 +5318,109 @@@ static void mlxsw_sp_fib6_entry_destroy
  	kfree(fib6_entry);
  }
  
++<<<<<<< HEAD
 +static struct mlxsw_sp_fib6_entry *
 +mlxsw_sp_fib6_node_entry_find(const struct mlxsw_sp_fib_node *fib_node,
 +			      const struct fib6_info *nrt, bool replace)
 +{
 +	struct mlxsw_sp_fib6_entry *fib6_entry, *fallback = NULL;
 +
 +	list_for_each_entry(fib6_entry, &fib_node->entry_list, common.list) {
 +		struct fib6_info *rt = mlxsw_sp_fib6_entry_rt(fib6_entry);
 +
 +		if (rt->fib6_table->tb6_id > nrt->fib6_table->tb6_id)
 +			continue;
 +		if (rt->fib6_table->tb6_id != nrt->fib6_table->tb6_id)
 +			break;
 +		if (replace && rt->fib6_metric == nrt->fib6_metric) {
 +			if (mlxsw_sp_fib6_rt_can_mp(rt) ==
 +			    mlxsw_sp_fib6_rt_can_mp(nrt))
 +				return fib6_entry;
 +			if (mlxsw_sp_fib6_rt_can_mp(nrt))
 +				fallback = fallback ?: fib6_entry;
 +		}
 +		if (rt->fib6_metric > nrt->fib6_metric)
 +			return fallback ?: fib6_entry;
 +	}
 +
 +	return fallback;
 +}
 +
 +static int
 +mlxsw_sp_fib6_node_list_insert(struct mlxsw_sp_fib6_entry *new6_entry,
 +			       bool *p_replace)
 +{
 +	struct mlxsw_sp_fib_node *fib_node = new6_entry->common.fib_node;
 +	struct fib6_info *nrt = mlxsw_sp_fib6_entry_rt(new6_entry);
 +	struct mlxsw_sp_fib6_entry *fib6_entry;
 +
 +	fib6_entry = mlxsw_sp_fib6_node_entry_find(fib_node, nrt, *p_replace);
 +
 +	if (*p_replace && !fib6_entry)
 +		*p_replace = false;
 +
 +	if (fib6_entry) {
 +		list_add_tail(&new6_entry->common.list,
 +			      &fib6_entry->common.list);
 +	} else {
 +		struct mlxsw_sp_fib6_entry *last;
 +
 +		list_for_each_entry(last, &fib_node->entry_list, common.list) {
 +			struct fib6_info *rt = mlxsw_sp_fib6_entry_rt(last);
 +
 +			if (nrt->fib6_table->tb6_id > rt->fib6_table->tb6_id)
 +				break;
 +			fib6_entry = last;
 +		}
 +
 +		if (fib6_entry)
 +			list_add(&new6_entry->common.list,
 +				 &fib6_entry->common.list);
 +		else
 +			list_add(&new6_entry->common.list,
 +				 &fib_node->entry_list);
 +	}
 +
 +	return 0;
 +}
 +
 +static void
 +mlxsw_sp_fib6_node_list_remove(struct mlxsw_sp_fib6_entry *fib6_entry)
 +{
 +	list_del(&fib6_entry->common.list);
 +}
 +
 +static int mlxsw_sp_fib6_node_entry_link(struct mlxsw_sp *mlxsw_sp,
 +					 struct mlxsw_sp_fib6_entry *fib6_entry,
 +					 bool *p_replace)
 +{
 +	int err;
 +
 +	err = mlxsw_sp_fib6_node_list_insert(fib6_entry, p_replace);
 +	if (err)
 +		return err;
 +
 +	err = mlxsw_sp_fib_node_entry_add(mlxsw_sp, &fib6_entry->common);
 +	if (err)
 +		goto err_fib_node_entry_add;
 +
 +	return 0;
 +
 +err_fib_node_entry_add:
 +	mlxsw_sp_fib6_node_list_remove(fib6_entry);
 +	return err;
 +}
 +
 +static void
 +mlxsw_sp_fib6_node_entry_unlink(struct mlxsw_sp *mlxsw_sp,
 +				struct mlxsw_sp_fib6_entry *fib6_entry)
 +{
 +	mlxsw_sp_fib_node_entry_del(mlxsw_sp, &fib6_entry->common);
 +	mlxsw_sp_fib6_node_list_remove(fib6_entry);
 +}
 +
++=======
++>>>>>>> b04720aee9a6 (mlxsw: spectrum_router: Consolidate identical functions)
  static struct mlxsw_sp_fib6_entry *
  mlxsw_sp_fib6_entry_lookup(struct mlxsw_sp *mlxsw_sp,
  			   const struct fib6_info *rt)
@@@ -5457,12 -5412,13 +5460,12 @@@ static void mlxsw_sp_fib6_entry_replace
  	struct mlxsw_sp_fib_node *fib_node = fib6_entry->common.fib_node;
  	struct mlxsw_sp_fib6_entry *replaced;
  
 -	if (list_is_singular(&fib_node->entry_list))
 +	if (!replace)
  		return;
  
 -	/* We inserted the new entry before replaced one */
  	replaced = list_next_entry(fib6_entry, common.list);
  
- 	mlxsw_sp_fib6_node_entry_unlink(mlxsw_sp, replaced);
+ 	mlxsw_sp_fib_node_entry_unlink(mlxsw_sp, &replaced->common);
  	mlxsw_sp_fib6_entry_destroy(mlxsw_sp, replaced);
  	mlxsw_sp_fib_node_put(mlxsw_sp, fib_node);
  }
@@@ -5512,17 -5456,61 +5515,21 @@@ static int mlxsw_sp_router_fib6_add(str
  		goto err_fib6_entry_create;
  	}
  
++<<<<<<< HEAD
 +	err = mlxsw_sp_fib6_node_entry_link(mlxsw_sp, fib6_entry, &replace);
++=======
+ 	err = mlxsw_sp_fib_node_entry_link(mlxsw_sp, &fib6_entry->common);
++>>>>>>> b04720aee9a6 (mlxsw: spectrum_router: Consolidate identical functions)
  	if (err)
- 		goto err_fib6_node_entry_link;
+ 		goto err_fib_node_entry_link;
  
 -	mlxsw_sp_fib6_entry_replace(mlxsw_sp, fib6_entry);
 +	mlxsw_sp_fib6_entry_replace(mlxsw_sp, fib6_entry, replace);
  
  	return 0;
  
- err_fib6_node_entry_link:
+ err_fib_node_entry_link:
  	mlxsw_sp_fib6_entry_destroy(mlxsw_sp, fib6_entry);
  err_fib6_entry_create:
 -	mlxsw_sp_fib_node_put(mlxsw_sp, fib_node);
 -	return err;
 -}
 -
 -static int mlxsw_sp_router_fib6_append(struct mlxsw_sp *mlxsw_sp,
 -				       struct fib6_info **rt_arr,
 -				       unsigned int nrt6)
 -{
 -	struct mlxsw_sp_fib6_entry *fib6_entry;
 -	struct mlxsw_sp_fib_node *fib_node;
 -	struct fib6_info *rt = rt_arr[0];
 -	int err;
 -
 -	if (mlxsw_sp->router->aborted)
 -		return 0;
 -
 -	if (rt->fib6_src.plen)
 -		return -EINVAL;
 -
 -	if (mlxsw_sp_fib6_rt_should_ignore(rt))
 -		return 0;
 -
 -	fib_node = mlxsw_sp_fib_node_get(mlxsw_sp, rt->fib6_table->tb6_id,
 -					 &rt->fib6_dst.addr,
 -					 sizeof(rt->fib6_dst.addr),
 -					 rt->fib6_dst.plen,
 -					 MLXSW_SP_L3_PROTO_IPV6);
 -	if (IS_ERR(fib_node))
 -		return PTR_ERR(fib_node);
 -
 -	if (WARN_ON_ONCE(list_empty(&fib_node->entry_list))) {
 -		mlxsw_sp_fib_node_put(mlxsw_sp, fib_node);
 -		return -EINVAL;
 -	}
 -
 -	fib6_entry = list_first_entry(&fib_node->entry_list,
 -				      struct mlxsw_sp_fib6_entry, common.list);
 -	err = mlxsw_sp_fib6_entry_nexthop_add(mlxsw_sp, fib6_entry, rt_arr,
 -					      nrt6);
 -	if (err)
 -		goto err_fib6_entry_nexthop_add;
 -
 -	return 0;
 -
  err_fib6_entry_nexthop_add:
  	mlxsw_sp_fib_node_put(mlxsw_sp, fib_node);
  	return err;
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c
