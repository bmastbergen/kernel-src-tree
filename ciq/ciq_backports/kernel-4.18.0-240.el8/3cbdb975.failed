drm/i915/tgl: TBT AUX should use TC power well ops

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Matt Roper <matthew.d.roper@intel.com>
commit 3cbdb97564a39020262e62b655e788b63cf426cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/3cbdb975.failed

As on ICL, we want to use the Type-C aux handlers for the TBT aux wells
to ensure the DP_AUX_CH_CTL_TBT_IO flag is set properly.

Fixes: 656409bbaf87 ("drm/i915/tgl: Add power well support")
	Cc: José Roberto de Souza <jose.souza@intel.com>
	Cc: Imre Deak <imre.deak@intel.com>
	Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200415233435.3064257-1-matthew.d.roper@intel.com
	Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
(cherry picked from commit 3cbdb97564a39020262e62b655e788b63cf426cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/display/intel_display_power.c
diff --cc drivers/gpu/drm/i915/display/intel_display_power.c
index dd1a43a366f2,03bdde19c8c9..000000000000
--- a/drivers/gpu/drm/i915/display/intel_display_power.c
+++ b/drivers/gpu/drm/i915/display/intel_display_power.c
@@@ -3362,6 -3762,480 +3362,483 @@@ static const struct i915_power_well_des
  	},
  };
  
++<<<<<<< HEAD
++=======
+ static const struct i915_power_well_desc ehl_power_wells[] = {
+ 	{
+ 		.name = "always-on",
+ 		.always_on = true,
+ 		.domains = POWER_DOMAIN_MASK,
+ 		.ops = &i9xx_always_on_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 	},
+ 	{
+ 		.name = "power well 1",
+ 		/* Handled by the DMC firmware */
+ 		.always_on = true,
+ 		.domains = 0,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = SKL_DISP_PW_1,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_1,
+ 			.hsw.has_fuses = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "DC off",
+ 		.domains = ICL_DISPLAY_DC_OFF_POWER_DOMAINS,
+ 		.ops = &gen9_dc_off_power_well_ops,
+ 		.id = SKL_DISP_DC_OFF,
+ 	},
+ 	{
+ 		.name = "power well 2",
+ 		.domains = ICL_PW_2_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = SKL_DISP_PW_2,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_2,
+ 			.hsw.has_fuses = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "power well 3",
+ 		.domains = ICL_PW_3_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_3,
+ 			.hsw.irq_pipe_mask = BIT(PIPE_B),
+ 			.hsw.has_vga = true,
+ 			.hsw.has_fuses = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI A IO",
+ 		.domains = ICL_DDI_IO_A_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_DDI_A,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI B IO",
+ 		.domains = ICL_DDI_IO_B_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_DDI_B,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI C IO",
+ 		.domains = ICL_DDI_IO_C_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_DDI_C,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI D IO",
+ 		.domains = ICL_DDI_IO_D_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_DDI_D,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX A",
+ 		.domains = ICL_AUX_A_IO_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_AUX_A,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX B",
+ 		.domains = ICL_AUX_B_IO_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_AUX_B,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX C",
+ 		.domains = ICL_AUX_C_TC1_IO_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_AUX_C,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX D",
+ 		.domains = ICL_AUX_D_TC2_IO_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_AUX_D,
+ 		},
+ 	},
+ 	{
+ 		.name = "power well 4",
+ 		.domains = ICL_PW_4_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_4,
+ 			.hsw.has_fuses = true,
+ 			.hsw.irq_pipe_mask = BIT(PIPE_C),
+ 		},
+ 	},
+ };
+ 
+ static const struct i915_power_well_desc tgl_power_wells[] = {
+ 	{
+ 		.name = "always-on",
+ 		.always_on = true,
+ 		.domains = POWER_DOMAIN_MASK,
+ 		.ops = &i9xx_always_on_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 	},
+ 	{
+ 		.name = "power well 1",
+ 		/* Handled by the DMC firmware */
+ 		.always_on = true,
+ 		.domains = 0,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = SKL_DISP_PW_1,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_1,
+ 			.hsw.has_fuses = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "DC off",
+ 		.domains = TGL_DISPLAY_DC_OFF_POWER_DOMAINS,
+ 		.ops = &gen9_dc_off_power_well_ops,
+ 		.id = SKL_DISP_DC_OFF,
+ 	},
+ 	{
+ 		.name = "power well 2",
+ 		.domains = TGL_PW_2_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = SKL_DISP_PW_2,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_2,
+ 			.hsw.has_fuses = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "power well 3",
+ 		.domains = TGL_PW_3_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = TGL_DISP_PW_3,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_3,
+ 			.hsw.irq_pipe_mask = BIT(PIPE_B),
+ 			.hsw.has_vga = true,
+ 			.hsw.has_fuses = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI A IO",
+ 		.domains = ICL_DDI_IO_A_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_DDI_A,
+ 		}
+ 	},
+ 	{
+ 		.name = "DDI B IO",
+ 		.domains = ICL_DDI_IO_B_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_DDI_B,
+ 		}
+ 	},
+ 	{
+ 		.name = "DDI C IO",
+ 		.domains = ICL_DDI_IO_C_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_DDI_C,
+ 		}
+ 	},
+ 	{
+ 		.name = "DDI D TC1 IO",
+ 		.domains = TGL_DDI_IO_D_TC1_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_DDI_TC1,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI E TC2 IO",
+ 		.domains = TGL_DDI_IO_E_TC2_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_DDI_TC2,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI F TC3 IO",
+ 		.domains = TGL_DDI_IO_F_TC3_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_DDI_TC3,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI G TC4 IO",
+ 		.domains = TGL_DDI_IO_G_TC4_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_DDI_TC4,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI H TC5 IO",
+ 		.domains = TGL_DDI_IO_H_TC5_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_DDI_TC5,
+ 		},
+ 	},
+ 	{
+ 		.name = "DDI I TC6 IO",
+ 		.domains = TGL_DDI_IO_I_TC6_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_ddi_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_DDI_TC6,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX A",
+ 		.domains = TGL_AUX_A_IO_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_AUX_A,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX B",
+ 		.domains = TGL_AUX_B_IO_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_AUX_B,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX C",
+ 		.domains = TGL_AUX_C_IO_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_AUX_C,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX D TC1",
+ 		.domains = TGL_AUX_D_TC1_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TC1,
+ 			.hsw.is_tc_tbt = false,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX E TC2",
+ 		.domains = TGL_AUX_E_TC2_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TC2,
+ 			.hsw.is_tc_tbt = false,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX F TC3",
+ 		.domains = TGL_AUX_F_TC3_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TC3,
+ 			.hsw.is_tc_tbt = false,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX G TC4",
+ 		.domains = TGL_AUX_G_TC4_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TC4,
+ 			.hsw.is_tc_tbt = false,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX H TC5",
+ 		.domains = TGL_AUX_H_TC5_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TC5,
+ 			.hsw.is_tc_tbt = false,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX I TC6",
+ 		.domains = TGL_AUX_I_TC6_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TC6,
+ 			.hsw.is_tc_tbt = false,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX D TBT1",
+ 		.domains = TGL_AUX_D_TBT1_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TBT1,
+ 			.hsw.is_tc_tbt = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX E TBT2",
+ 		.domains = TGL_AUX_E_TBT2_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TBT2,
+ 			.hsw.is_tc_tbt = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX F TBT3",
+ 		.domains = TGL_AUX_F_TBT3_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TBT3,
+ 			.hsw.is_tc_tbt = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX G TBT4",
+ 		.domains = TGL_AUX_G_TBT4_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TBT4,
+ 			.hsw.is_tc_tbt = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX H TBT5",
+ 		.domains = TGL_AUX_H_TBT5_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TBT5,
+ 			.hsw.is_tc_tbt = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "AUX I TBT6",
+ 		.domains = TGL_AUX_I_TBT6_IO_POWER_DOMAINS,
+ 		.ops = &icl_tc_phy_aux_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &icl_aux_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_AUX_TBT6,
+ 			.hsw.is_tc_tbt = true,
+ 		},
+ 	},
+ 	{
+ 		.name = "power well 4",
+ 		.domains = TGL_PW_4_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = ICL_PW_CTL_IDX_PW_4,
+ 			.hsw.has_fuses = true,
+ 			.hsw.irq_pipe_mask = BIT(PIPE_C),
+ 		}
+ 	},
+ 	{
+ 		.name = "power well 5",
+ 		.domains = TGL_PW_5_POWER_DOMAINS,
+ 		.ops = &hsw_power_well_ops,
+ 		.id = DISP_PW_ID_NONE,
+ 		{
+ 			.hsw.regs = &hsw_power_well_regs,
+ 			.hsw.idx = TGL_PW_CTL_IDX_PW_5,
+ 			.hsw.has_fuses = true,
+ 			.hsw.irq_pipe_mask = BIT(PIPE_D),
+ 		},
+ 	},
+ };
+ 
++>>>>>>> 3cbdb97564a3 (drm/i915/tgl: TBT AUX should use TC power well ops)
  static int
  sanitize_disable_power_well_option(const struct drm_i915_private *dev_priv,
  				   int disable_power_well)
* Unmerged path drivers/gpu/drm/i915/display/intel_display_power.c
