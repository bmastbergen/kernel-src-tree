netdevsim: fix nsim_fib6_rt_create() error path

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Eric Dumazet <edumazet@google.com>
commit 41cdc741048b0d04604c02aad9ec19f7d9130b70
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/41cdc741.failed

It seems nsim_fib6_rt_create() intent was to return
either a valid pointer or an embedded error code.

BUG: unable to handle page fault for address: fffffffffffffff4
PGD 9870067 P4D 9870067 PUD 9872067 PMD 0
Oops: 0000 [#1] PREEMPT SMP KASAN
CPU: 0 PID: 22851 Comm: syz-executor.1 Not tainted 5.5.0-rc5-syzkaller #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
RIP: 0010:jhash2 include/linux/jhash.h:125 [inline]
RIP: 0010:rhashtable_jhash2+0x76/0x2c0 lib/rhashtable.c:963
Code: b9 00 00 00 00 00 fc ff df 48 c1 e8 03 0f b6 14 08 4c 89 f0 83 e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85 30 02 00 00 49 8d 7e 04 <41> 8b 06 48 be 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 0f b6
RSP: 0018:ffffc90016127190 EFLAGS: 00010246
RAX: 0000000000000007 RBX: 00000000dfb3ab49 RCX: dffffc0000000000
RDX: 0000000000000000 RSI: ffffffff839ba7c8 RDI: fffffffffffffff8
RBP: ffffc900161271c0 R08: ffff8880951f8640 R09: ffffed1015d0703d
R10: ffffed1015d0703c R11: ffff8880ae8381e3 R12: 00000000dfb3ab49
R13: 00000000dfb3ab49 R14: fffffffffffffff4 R15: 0000000000000007
FS:  00007f40bfbc6700(0000) GS:ffff8880ae800000(0000) knlGS:0000000000000000
CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
CR2: fffffffffffffff4 CR3: 0000000093660000 CR4: 00000000001406f0
DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
Call Trace:
 rht_key_get_hash include/linux/rhashtable.h:133 [inline]
 rht_key_hashfn include/linux/rhashtable.h:159 [inline]
 rht_head_hashfn include/linux/rhashtable.h:174 [inline]
 __rhashtable_insert_fast.constprop.0+0xe15/0x1180 include/linux/rhashtable.h:723
 rhashtable_insert_fast include/linux/rhashtable.h:832 [inline]
 nsim_fib6_rt_add drivers/net/netdevsim/fib.c:603 [inline]
 nsim_fib6_rt_insert drivers/net/netdevsim/fib.c:658 [inline]
 nsim_fib6_event drivers/net/netdevsim/fib.c:719 [inline]
 nsim_fib_event drivers/net/netdevsim/fib.c:744 [inline]
 nsim_fib_event_nb+0x1b16/0x2600 drivers/net/netdevsim/fib.c:772
 notifier_call_chain+0xc2/0x230 kernel/notifier.c:83
 __atomic_notifier_call_chain+0xa6/0x1a0 kernel/notifier.c:173
 atomic_notifier_call_chain+0x2e/0x40 kernel/notifier.c:183
 call_fib_notifiers+0x173/0x2a0 net/core/fib_notifier.c:35
 call_fib6_notifiers+0x4b/0x60 net/ipv6/fib6_notifier.c:22
 call_fib6_entry_notifiers+0xfb/0x150 net/ipv6/ip6_fib.c:399
 fib6_add_rt2node net/ipv6/ip6_fib.c:1216 [inline]
 fib6_add+0x20cd/0x3ec0 net/ipv6/ip6_fib.c:1471
 __ip6_ins_rt+0x54/0x80 net/ipv6/route.c:1315
 ip6_ins_rt+0x96/0xd0 net/ipv6/route.c:1325
 __ipv6_dev_ac_inc+0x76f/0xb20 net/ipv6/anycast.c:324
 ipv6_sock_ac_join+0x4c1/0x790 net/ipv6/anycast.c:139
 do_ipv6_setsockopt.isra.0+0x3908/0x4290 net/ipv6/ipv6_sockglue.c:670
 ipv6_setsockopt+0xff/0x180 net/ipv6/ipv6_sockglue.c:944
 udpv6_setsockopt+0x68/0xb0 net/ipv6/udp.c:1564
 sock_common_setsockopt+0x94/0xd0 net/core/sock.c:3149
 __sys_setsockopt+0x261/0x4c0 net/socket.c:2130
 __do_sys_setsockopt net/socket.c:2146 [inline]
 __se_sys_setsockopt net/socket.c:2143 [inline]
 __x64_sys_setsockopt+0xbe/0x150 net/socket.c:2143
 do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294
 entry_SYSCALL_64_after_hwframe+0x49/0xbe
RIP: 0033:0x45aff9

Fixes: 48bb9eb47b27 ("netdevsim: fib: Add dummy implementation for FIB offload")
	Signed-off-by: Eric Dumazet <edumazet@google.com>
	Reported-by: syzbot <syzkaller@googlegroups.com>
	Cc: Ido Schimmel <idosch@mellanox.com>
	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 41cdc741048b0d04604c02aad9ec19f7d9130b70)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/netdevsim/fib.c
diff --cc drivers/net/netdevsim/fib.c
index 1a251f76d09b,f32d56ac3e80..000000000000
--- a/drivers/net/netdevsim/fib.c
+++ b/drivers/net/netdevsim/fib.c
@@@ -157,10 -192,548 +157,554 @@@ static int nsim_fib_account(struct nsim
  	return err;
  }
  
++<<<<<<< HEAD
 +static int nsim_fib_event(struct fib_notifier_info *info, bool add)
++=======
+ static void nsim_fib_rt_init(struct nsim_fib_data *data,
+ 			     struct nsim_fib_rt *fib_rt, const void *addr,
+ 			     size_t addr_len, unsigned int prefix_len,
+ 			     int family, u32 tb_id)
+ {
+ 	memcpy(fib_rt->key.addr, addr, addr_len);
+ 	fib_rt->key.prefix_len = prefix_len;
+ 	fib_rt->key.family = family;
+ 	fib_rt->key.tb_id = tb_id;
+ 	list_add(&fib_rt->list, &data->fib_rt_list);
+ }
+ 
+ static void nsim_fib_rt_fini(struct nsim_fib_rt *fib_rt)
+ {
+ 	list_del(&fib_rt->list);
+ }
+ 
+ static struct nsim_fib_rt *nsim_fib_rt_lookup(struct rhashtable *fib_rt_ht,
+ 					      const void *addr, size_t addr_len,
+ 					      unsigned int prefix_len,
+ 					      int family, u32 tb_id)
+ {
+ 	struct nsim_fib_rt_key key;
+ 
+ 	memset(&key, 0, sizeof(key));
+ 	memcpy(key.addr, addr, addr_len);
+ 	key.prefix_len = prefix_len;
+ 	key.family = family;
+ 	key.tb_id = tb_id;
+ 
+ 	return rhashtable_lookup_fast(fib_rt_ht, &key, nsim_fib_rt_ht_params);
+ }
+ 
+ static struct nsim_fib4_rt *
+ nsim_fib4_rt_create(struct nsim_fib_data *data,
+ 		    struct fib_entry_notifier_info *fen_info)
+ {
+ 	struct nsim_fib4_rt *fib4_rt;
+ 
+ 	fib4_rt = kzalloc(sizeof(*fib4_rt), GFP_ATOMIC);
+ 	if (!fib4_rt)
+ 		return NULL;
+ 
+ 	nsim_fib_rt_init(data, &fib4_rt->common, &fen_info->dst, sizeof(u32),
+ 			 fen_info->dst_len, AF_INET, fen_info->tb_id);
+ 
+ 	fib4_rt->fi = fen_info->fi;
+ 	fib_info_hold(fib4_rt->fi);
+ 	fib4_rt->tos = fen_info->tos;
+ 	fib4_rt->type = fen_info->type;
+ 
+ 	return fib4_rt;
+ }
+ 
+ static void nsim_fib4_rt_destroy(struct nsim_fib4_rt *fib4_rt)
+ {
+ 	fib_info_put(fib4_rt->fi);
+ 	nsim_fib_rt_fini(&fib4_rt->common);
+ 	kfree(fib4_rt);
+ }
+ 
+ static struct nsim_fib4_rt *
+ nsim_fib4_rt_lookup(struct rhashtable *fib_rt_ht,
+ 		    const struct fib_entry_notifier_info *fen_info)
+ {
+ 	struct nsim_fib_rt *fib_rt;
+ 
+ 	fib_rt = nsim_fib_rt_lookup(fib_rt_ht, &fen_info->dst, sizeof(u32),
+ 				    fen_info->dst_len, AF_INET,
+ 				    fen_info->tb_id);
+ 	if (!fib_rt)
+ 		return NULL;
+ 
+ 	return container_of(fib_rt, struct nsim_fib4_rt, common);
+ }
+ 
+ static void nsim_fib4_rt_hw_flags_set(struct net *net,
+ 				      const struct nsim_fib4_rt *fib4_rt,
+ 				      bool trap)
+ {
+ 	u32 *p_dst = (u32 *) fib4_rt->common.key.addr;
+ 	int dst_len = fib4_rt->common.key.prefix_len;
+ 	struct fib_rt_info fri;
+ 
+ 	fri.fi = fib4_rt->fi;
+ 	fri.tb_id = fib4_rt->common.key.tb_id;
+ 	fri.dst = cpu_to_be32(*p_dst);
+ 	fri.dst_len = dst_len;
+ 	fri.tos = fib4_rt->tos;
+ 	fri.type = fib4_rt->type;
+ 	fri.offload = false;
+ 	fri.trap = trap;
+ 	fib_alias_hw_flags_set(net, &fri);
+ }
+ 
+ static int nsim_fib4_rt_add(struct nsim_fib_data *data,
+ 			    struct nsim_fib4_rt *fib4_rt,
+ 			    struct netlink_ext_ack *extack)
+ {
+ 	struct net *net = devlink_net(data->devlink);
+ 	int err;
+ 
+ 	err = nsim_fib_account(&data->ipv4.fib, true, extack);
+ 	if (err)
+ 		return err;
+ 
+ 	err = rhashtable_insert_fast(&data->fib_rt_ht,
+ 				     &fib4_rt->common.ht_node,
+ 				     nsim_fib_rt_ht_params);
+ 	if (err) {
+ 		NL_SET_ERR_MSG_MOD(extack, "Failed to insert IPv4 route");
+ 		goto err_fib_dismiss;
+ 	}
+ 
+ 	nsim_fib4_rt_hw_flags_set(net, fib4_rt, true);
+ 
+ 	return 0;
+ 
+ err_fib_dismiss:
+ 	nsim_fib_account(&data->ipv4.fib, false, extack);
+ 	return err;
+ }
+ 
+ static int nsim_fib4_rt_replace(struct nsim_fib_data *data,
+ 				struct nsim_fib4_rt *fib4_rt,
+ 				struct nsim_fib4_rt *fib4_rt_old,
+ 				struct netlink_ext_ack *extack)
+ {
+ 	struct net *net = devlink_net(data->devlink);
+ 	int err;
+ 
+ 	/* We are replacing a route, so no need to change the accounting. */
+ 	err = rhashtable_replace_fast(&data->fib_rt_ht,
+ 				      &fib4_rt_old->common.ht_node,
+ 				      &fib4_rt->common.ht_node,
+ 				      nsim_fib_rt_ht_params);
+ 	if (err) {
+ 		NL_SET_ERR_MSG_MOD(extack, "Failed to replace IPv4 route");
+ 		return err;
+ 	}
+ 
+ 	nsim_fib4_rt_hw_flags_set(net, fib4_rt, true);
+ 
+ 	nsim_fib4_rt_hw_flags_set(net, fib4_rt_old, false);
+ 	nsim_fib4_rt_destroy(fib4_rt_old);
+ 
+ 	return 0;
+ }
+ 
+ static int nsim_fib4_rt_insert(struct nsim_fib_data *data,
+ 			       struct fib_entry_notifier_info *fen_info)
+ {
+ 	struct netlink_ext_ack *extack = fen_info->info.extack;
+ 	struct nsim_fib4_rt *fib4_rt, *fib4_rt_old;
+ 	int err;
+ 
+ 	fib4_rt = nsim_fib4_rt_create(data, fen_info);
+ 	if (!fib4_rt)
+ 		return -ENOMEM;
+ 
+ 	fib4_rt_old = nsim_fib4_rt_lookup(&data->fib_rt_ht, fen_info);
+ 	if (!fib4_rt_old)
+ 		err = nsim_fib4_rt_add(data, fib4_rt, extack);
+ 	else
+ 		err = nsim_fib4_rt_replace(data, fib4_rt, fib4_rt_old, extack);
+ 
+ 	if (err)
+ 		nsim_fib4_rt_destroy(fib4_rt);
+ 
+ 	return err;
+ }
+ 
+ static void nsim_fib4_rt_remove(struct nsim_fib_data *data,
+ 				const struct fib_entry_notifier_info *fen_info)
+ {
+ 	struct netlink_ext_ack *extack = fen_info->info.extack;
+ 	struct nsim_fib4_rt *fib4_rt;
+ 
+ 	fib4_rt = nsim_fib4_rt_lookup(&data->fib_rt_ht, fen_info);
+ 	if (WARN_ON_ONCE(!fib4_rt))
+ 		return;
+ 
+ 	rhashtable_remove_fast(&data->fib_rt_ht, &fib4_rt->common.ht_node,
+ 			       nsim_fib_rt_ht_params);
+ 	nsim_fib_account(&data->ipv4.fib, false, extack);
+ 	nsim_fib4_rt_destroy(fib4_rt);
+ }
+ 
+ static int nsim_fib4_event(struct nsim_fib_data *data,
+ 			   struct fib_notifier_info *info,
+ 			   unsigned long event)
+ {
+ 	struct fib_entry_notifier_info *fen_info;
+ 	int err = 0;
+ 
+ 	fen_info = container_of(info, struct fib_entry_notifier_info, info);
+ 
+ 	if (fen_info->fi->nh) {
+ 		NL_SET_ERR_MSG_MOD(info->extack, "IPv4 route with nexthop objects is not supported");
+ 		return 0;
+ 	}
+ 
+ 	switch (event) {
+ 	case FIB_EVENT_ENTRY_REPLACE:
+ 		err = nsim_fib4_rt_insert(data, fen_info);
+ 		break;
+ 	case FIB_EVENT_ENTRY_DEL:
+ 		nsim_fib4_rt_remove(data, fen_info);
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static struct nsim_fib6_rt_nh *
+ nsim_fib6_rt_nh_find(const struct nsim_fib6_rt *fib6_rt,
+ 		     const struct fib6_info *rt)
+ {
+ 	struct nsim_fib6_rt_nh *fib6_rt_nh;
+ 
+ 	list_for_each_entry(fib6_rt_nh, &fib6_rt->nh_list, list) {
+ 		if (fib6_rt_nh->rt == rt)
+ 			return fib6_rt_nh;
+ 	}
+ 
+ 	return NULL;
+ }
+ 
+ static int nsim_fib6_rt_nh_add(struct nsim_fib6_rt *fib6_rt,
+ 			       struct fib6_info *rt)
+ {
+ 	struct nsim_fib6_rt_nh *fib6_rt_nh;
+ 
+ 	fib6_rt_nh = kzalloc(sizeof(*fib6_rt_nh), GFP_ATOMIC);
+ 	if (!fib6_rt_nh)
+ 		return -ENOMEM;
+ 
+ 	fib6_info_hold(rt);
+ 	fib6_rt_nh->rt = rt;
+ 	list_add_tail(&fib6_rt_nh->list, &fib6_rt->nh_list);
+ 	fib6_rt->nhs++;
+ 
+ 	return 0;
+ }
+ 
+ static void nsim_fib6_rt_nh_del(struct nsim_fib6_rt *fib6_rt,
+ 				const struct fib6_info *rt)
+ {
+ 	struct nsim_fib6_rt_nh *fib6_rt_nh;
+ 
+ 	fib6_rt_nh = nsim_fib6_rt_nh_find(fib6_rt, rt);
+ 	if (WARN_ON_ONCE(!fib6_rt_nh))
+ 		return;
+ 
+ 	fib6_rt->nhs--;
+ 	list_del(&fib6_rt_nh->list);
+ #if IS_ENABLED(CONFIG_IPV6)
+ 	fib6_info_release(fib6_rt_nh->rt);
+ #endif
+ 	kfree(fib6_rt_nh);
+ }
+ 
+ static struct nsim_fib6_rt *
+ nsim_fib6_rt_create(struct nsim_fib_data *data,
+ 		    struct fib6_entry_notifier_info *fen6_info)
+ {
+ 	struct fib6_info *iter, *rt = fen6_info->rt;
+ 	struct nsim_fib6_rt *fib6_rt;
+ 	int i = 0;
+ 	int err;
+ 
+ 	fib6_rt = kzalloc(sizeof(*fib6_rt), GFP_ATOMIC);
+ 	if (!fib6_rt)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	nsim_fib_rt_init(data, &fib6_rt->common, &rt->fib6_dst.addr,
+ 			 sizeof(rt->fib6_dst.addr), rt->fib6_dst.plen, AF_INET6,
+ 			 rt->fib6_table->tb6_id);
+ 
+ 	/* We consider a multipath IPv6 route as one entry, but it can be made
+ 	 * up from several fib6_info structs (one for each nexthop), so we
+ 	 * add them all to the same list under the entry.
+ 	 */
+ 	INIT_LIST_HEAD(&fib6_rt->nh_list);
+ 
+ 	err = nsim_fib6_rt_nh_add(fib6_rt, rt);
+ 	if (err)
+ 		goto err_fib_rt_fini;
+ 
+ 	if (!fen6_info->nsiblings)
+ 		return fib6_rt;
+ 
+ 	list_for_each_entry(iter, &rt->fib6_siblings, fib6_siblings) {
+ 		if (i == fen6_info->nsiblings)
+ 			break;
+ 
+ 		err = nsim_fib6_rt_nh_add(fib6_rt, iter);
+ 		if (err)
+ 			goto err_fib6_rt_nh_del;
+ 		i++;
+ 	}
+ 	WARN_ON_ONCE(i != fen6_info->nsiblings);
+ 
+ 	return fib6_rt;
+ 
+ err_fib6_rt_nh_del:
+ 	list_for_each_entry_continue_reverse(iter, &rt->fib6_siblings,
+ 					     fib6_siblings)
+ 		nsim_fib6_rt_nh_del(fib6_rt, iter);
+ 	nsim_fib6_rt_nh_del(fib6_rt, rt);
+ err_fib_rt_fini:
+ 	nsim_fib_rt_fini(&fib6_rt->common);
+ 	kfree(fib6_rt);
+ 	return ERR_PTR(err);
+ }
+ 
+ static void nsim_fib6_rt_destroy(struct nsim_fib6_rt *fib6_rt)
+ {
+ 	struct nsim_fib6_rt_nh *iter, *tmp;
+ 
+ 	list_for_each_entry_safe(iter, tmp, &fib6_rt->nh_list, list)
+ 		nsim_fib6_rt_nh_del(fib6_rt, iter->rt);
+ 	WARN_ON_ONCE(!list_empty(&fib6_rt->nh_list));
+ 	nsim_fib_rt_fini(&fib6_rt->common);
+ 	kfree(fib6_rt);
+ }
+ 
+ static struct nsim_fib6_rt *
+ nsim_fib6_rt_lookup(struct rhashtable *fib_rt_ht, const struct fib6_info *rt)
+ {
+ 	struct nsim_fib_rt *fib_rt;
+ 
+ 	fib_rt = nsim_fib_rt_lookup(fib_rt_ht, &rt->fib6_dst.addr,
+ 				    sizeof(rt->fib6_dst.addr),
+ 				    rt->fib6_dst.plen, AF_INET6,
+ 				    rt->fib6_table->tb6_id);
+ 	if (!fib_rt)
+ 		return NULL;
+ 
+ 	return container_of(fib_rt, struct nsim_fib6_rt, common);
+ }
+ 
+ static int nsim_fib6_rt_append(struct nsim_fib_data *data,
+ 			       struct fib6_entry_notifier_info *fen6_info)
+ {
+ 	struct fib6_info *iter, *rt = fen6_info->rt;
+ 	struct nsim_fib6_rt *fib6_rt;
+ 	int i = 0;
+ 	int err;
+ 
+ 	fib6_rt = nsim_fib6_rt_lookup(&data->fib_rt_ht, rt);
+ 	if (WARN_ON_ONCE(!fib6_rt))
+ 		return -EINVAL;
+ 
+ 	err = nsim_fib6_rt_nh_add(fib6_rt, rt);
+ 	if (err)
+ 		return err;
+ 	rt->trap = true;
+ 
+ 	if (!fen6_info->nsiblings)
+ 		return 0;
+ 
+ 	list_for_each_entry(iter, &rt->fib6_siblings, fib6_siblings) {
+ 		if (i == fen6_info->nsiblings)
+ 			break;
+ 
+ 		err = nsim_fib6_rt_nh_add(fib6_rt, iter);
+ 		if (err)
+ 			goto err_fib6_rt_nh_del;
+ 		iter->trap = true;
+ 		i++;
+ 	}
+ 	WARN_ON_ONCE(i != fen6_info->nsiblings);
+ 
+ 	return 0;
+ 
+ err_fib6_rt_nh_del:
+ 	list_for_each_entry_continue_reverse(iter, &rt->fib6_siblings,
+ 					     fib6_siblings) {
+ 		iter->trap = false;
+ 		nsim_fib6_rt_nh_del(fib6_rt, iter);
+ 	}
+ 	rt->trap = false;
+ 	nsim_fib6_rt_nh_del(fib6_rt, rt);
+ 	return err;
+ }
+ 
+ static void nsim_fib6_rt_hw_flags_set(const struct nsim_fib6_rt *fib6_rt,
+ 				      bool trap)
+ {
+ 	struct nsim_fib6_rt_nh *fib6_rt_nh;
+ 
+ 	list_for_each_entry(fib6_rt_nh, &fib6_rt->nh_list, list)
+ 		fib6_info_hw_flags_set(fib6_rt_nh->rt, false, trap);
+ }
+ 
+ static int nsim_fib6_rt_add(struct nsim_fib_data *data,
+ 			    struct nsim_fib6_rt *fib6_rt,
+ 			    struct netlink_ext_ack *extack)
+ {
+ 	int err;
+ 
+ 	err = nsim_fib_account(&data->ipv6.fib, true, extack);
+ 	if (err)
+ 		return err;
+ 
+ 	err = rhashtable_insert_fast(&data->fib_rt_ht,
+ 				     &fib6_rt->common.ht_node,
+ 				     nsim_fib_rt_ht_params);
+ 	if (err) {
+ 		NL_SET_ERR_MSG_MOD(extack, "Failed to insert IPv6 route");
+ 		goto err_fib_dismiss;
+ 	}
+ 
+ 	nsim_fib6_rt_hw_flags_set(fib6_rt, true);
+ 
+ 	return 0;
+ 
+ err_fib_dismiss:
+ 	nsim_fib_account(&data->ipv6.fib, false, extack);
+ 	return err;
+ }
+ 
+ static int nsim_fib6_rt_replace(struct nsim_fib_data *data,
+ 				struct nsim_fib6_rt *fib6_rt,
+ 				struct nsim_fib6_rt *fib6_rt_old,
+ 				struct netlink_ext_ack *extack)
+ {
+ 	int err;
+ 
+ 	/* We are replacing a route, so no need to change the accounting. */
+ 	err = rhashtable_replace_fast(&data->fib_rt_ht,
+ 				      &fib6_rt_old->common.ht_node,
+ 				      &fib6_rt->common.ht_node,
+ 				      nsim_fib_rt_ht_params);
+ 	if (err) {
+ 		NL_SET_ERR_MSG_MOD(extack, "Failed to replace IPv6 route");
+ 		return err;
+ 	}
+ 
+ 	nsim_fib6_rt_hw_flags_set(fib6_rt, true);
+ 
+ 	nsim_fib6_rt_hw_flags_set(fib6_rt_old, false);
+ 	nsim_fib6_rt_destroy(fib6_rt_old);
+ 
+ 	return 0;
+ }
+ 
+ static int nsim_fib6_rt_insert(struct nsim_fib_data *data,
+ 			       struct fib6_entry_notifier_info *fen6_info)
+ {
+ 	struct netlink_ext_ack *extack = fen6_info->info.extack;
+ 	struct nsim_fib6_rt *fib6_rt, *fib6_rt_old;
+ 	int err;
+ 
+ 	fib6_rt = nsim_fib6_rt_create(data, fen6_info);
+ 	if (IS_ERR(fib6_rt))
+ 		return PTR_ERR(fib6_rt);
+ 
+ 	fib6_rt_old = nsim_fib6_rt_lookup(&data->fib_rt_ht, fen6_info->rt);
+ 	if (!fib6_rt_old)
+ 		err = nsim_fib6_rt_add(data, fib6_rt, extack);
+ 	else
+ 		err = nsim_fib6_rt_replace(data, fib6_rt, fib6_rt_old, extack);
+ 
+ 	if (err)
+ 		nsim_fib6_rt_destroy(fib6_rt);
+ 
+ 	return err;
+ }
+ 
+ static void
+ nsim_fib6_rt_remove(struct nsim_fib_data *data,
+ 		    const struct fib6_entry_notifier_info *fen6_info)
+ {
+ 	struct netlink_ext_ack *extack = fen6_info->info.extack;
+ 	struct nsim_fib6_rt *fib6_rt;
+ 
+ 	/* Multipath routes are first added to the FIB trie and only then
+ 	 * notified. If we vetoed the addition, we will get a delete
+ 	 * notification for a route we do not have. Therefore, do not warn if
+ 	 * route was not found.
+ 	 */
+ 	fib6_rt = nsim_fib6_rt_lookup(&data->fib_rt_ht, fen6_info->rt);
+ 	if (!fib6_rt)
+ 		return;
+ 
+ 	/* If not all the nexthops are deleted, then only reduce the nexthop
+ 	 * group.
+ 	 */
+ 	if (fen6_info->nsiblings + 1 != fib6_rt->nhs) {
+ 		nsim_fib6_rt_nh_del(fib6_rt, fen6_info->rt);
+ 		return;
+ 	}
+ 
+ 	rhashtable_remove_fast(&data->fib_rt_ht, &fib6_rt->common.ht_node,
+ 			       nsim_fib_rt_ht_params);
+ 	nsim_fib_account(&data->ipv6.fib, false, extack);
+ 	nsim_fib6_rt_destroy(fib6_rt);
+ }
+ 
+ static int nsim_fib6_event(struct nsim_fib_data *data,
+ 			   struct fib_notifier_info *info,
+ 			   unsigned long event)
+ {
+ 	struct fib6_entry_notifier_info *fen6_info;
+ 	int err = 0;
+ 
+ 	fen6_info = container_of(info, struct fib6_entry_notifier_info, info);
+ 
+ 	if (fen6_info->rt->nh) {
+ 		NL_SET_ERR_MSG_MOD(info->extack, "IPv6 route with nexthop objects is not supported");
+ 		return 0;
+ 	}
+ 
+ 	if (fen6_info->rt->fib6_src.plen) {
+ 		NL_SET_ERR_MSG_MOD(info->extack, "IPv6 source-specific route is not supported");
+ 		return 0;
+ 	}
+ 
+ 	switch (event) {
+ 	case FIB_EVENT_ENTRY_REPLACE:
+ 		err = nsim_fib6_rt_insert(data, fen6_info);
+ 		break;
+ 	case FIB_EVENT_ENTRY_APPEND:
+ 		err = nsim_fib6_rt_append(data, fen6_info);
+ 		break;
+ 	case FIB_EVENT_ENTRY_DEL:
+ 		nsim_fib6_rt_remove(data, fen6_info);
+ 		break;
+ 	default:
+ 		break;
+ 	}
+ 
+ 	return err;
+ }
+ 
+ static int nsim_fib_event(struct nsim_fib_data *data,
+ 			  struct fib_notifier_info *info, unsigned long event)
++>>>>>>> 41cdc741048b (netdevsim: fix nsim_fib6_rt_create() error path)
  {
 +	struct nsim_fib_data *data = net_generic(info->net, nsim_fib_net_id);
 +	struct netlink_ext_ack *extack = info->extack;
  	int err = 0;
  
  	switch (info->family) {
* Unmerged path drivers/net/netdevsim/fib.c
