libbpf: Fix unneeded extra initialization in bpf_map_batch_common

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Brian Vazquez <brianvv@google.com>
commit 858e284f0ec18bff2620d9a6afe764dc683f8ba1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/858e284f.failed

bpf_attr doesn't required to be declared with '= {}' as memset is used
in the code.

Fixes: 2ab3d86ea1859 ("libbpf: Add libbpf support to batch ops")
	Reported-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Brian Vazquez <brianvv@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
Link: https://lore.kernel.org/bpf/20200116045918.75597-1-brianvv@google.com
(cherry picked from commit 858e284f0ec18bff2620d9a6afe764dc683f8ba1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/bpf.c
diff --cc tools/lib/bpf/bpf.c
index f9124e381f55,ed42b006533c..000000000000
--- a/tools/lib/bpf/bpf.c
+++ b/tools/lib/bpf/bpf.c
@@@ -441,6 -452,64 +441,67 @@@ int bpf_map_freeze(int fd
  	return sys_bpf(BPF_MAP_FREEZE, &attr, sizeof(attr));
  }
  
++<<<<<<< HEAD
++=======
+ static int bpf_map_batch_common(int cmd, int fd, void  *in_batch,
+ 				void *out_batch, void *keys, void *values,
+ 				__u32 *count,
+ 				const struct bpf_map_batch_opts *opts)
+ {
+ 	union bpf_attr attr;
+ 	int ret;
+ 
+ 	if (!OPTS_VALID(opts, bpf_map_batch_opts))
+ 		return -EINVAL;
+ 
+ 	memset(&attr, 0, sizeof(attr));
+ 	attr.batch.map_fd = fd;
+ 	attr.batch.in_batch = ptr_to_u64(in_batch);
+ 	attr.batch.out_batch = ptr_to_u64(out_batch);
+ 	attr.batch.keys = ptr_to_u64(keys);
+ 	attr.batch.values = ptr_to_u64(values);
+ 	attr.batch.count = *count;
+ 	attr.batch.elem_flags  = OPTS_GET(opts, elem_flags, 0);
+ 	attr.batch.flags = OPTS_GET(opts, flags, 0);
+ 
+ 	ret = sys_bpf(cmd, &attr, sizeof(attr));
+ 	*count = attr.batch.count;
+ 
+ 	return ret;
+ }
+ 
+ int bpf_map_delete_batch(int fd, void *keys, __u32 *count,
+ 			 const struct bpf_map_batch_opts *opts)
+ {
+ 	return bpf_map_batch_common(BPF_MAP_DELETE_BATCH, fd, NULL,
+ 				    NULL, keys, NULL, count, opts);
+ }
+ 
+ int bpf_map_lookup_batch(int fd, void *in_batch, void *out_batch, void *keys,
+ 			 void *values, __u32 *count,
+ 			 const struct bpf_map_batch_opts *opts)
+ {
+ 	return bpf_map_batch_common(BPF_MAP_LOOKUP_BATCH, fd, in_batch,
+ 				    out_batch, keys, values, count, opts);
+ }
+ 
+ int bpf_map_lookup_and_delete_batch(int fd, void *in_batch, void *out_batch,
+ 				    void *keys, void *values, __u32 *count,
+ 				    const struct bpf_map_batch_opts *opts)
+ {
+ 	return bpf_map_batch_common(BPF_MAP_LOOKUP_AND_DELETE_BATCH,
+ 				    fd, in_batch, out_batch, keys, values,
+ 				    count, opts);
+ }
+ 
+ int bpf_map_update_batch(int fd, void *keys, void *values, __u32 *count,
+ 			 const struct bpf_map_batch_opts *opts)
+ {
+ 	return bpf_map_batch_common(BPF_MAP_UPDATE_BATCH, fd, NULL, NULL,
+ 				    keys, values, count, opts);
+ }
+ 
++>>>>>>> 858e284f0ec1 (libbpf: Fix unneeded extra initialization in bpf_map_batch_common)
  int bpf_obj_pin(int fd, const char *pathname)
  {
  	union bpf_attr attr;
* Unmerged path tools/lib/bpf/bpf.c
