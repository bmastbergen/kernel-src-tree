net: push code from net notifier reg/unreg into helpers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] push code from net notifier reg/unreg into helpers (Ivan Vecera) [1818102]
Rebuild_FUZZ: 95.24%
commit-author Jiri Pirko <jiri@mellanox.com>
commit 1f637703d8b63f1ba411b4c798e998e3f828b6cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1f637703.failed

Push the code which is done under rtnl lock in net notifier register and
unregister function into separate helpers.

	Signed-off-by: Jiri Pirko <jiri@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 1f637703d8b63f1ba411b4c798e998e3f828b6cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/dev.c
diff --cc net/core/dev.c
index fa297e42a858,b521b509a653..000000000000
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@@ -1752,7 -1784,97 +1752,100 @@@ unlock
  }
  EXPORT_SYMBOL(unregister_netdevice_notifier);
  
+ static int __register_netdevice_notifier_net(struct net *net,
+ 					     struct notifier_block *nb,
+ 					     bool ignore_call_fail)
+ {
+ 	int err;
+ 
+ 	err = raw_notifier_chain_register(&net->netdev_chain, nb);
+ 	if (err)
+ 		return err;
+ 	if (dev_boot_phase)
+ 		return 0;
+ 
+ 	err = call_netdevice_register_net_notifiers(nb, net);
+ 	if (err && !ignore_call_fail)
+ 		goto chain_unregister;
+ 
+ 	return 0;
+ 
+ chain_unregister:
+ 	raw_notifier_chain_unregister(&net->netdev_chain, nb);
+ 	return err;
+ }
+ 
+ static int __unregister_netdevice_notifier_net(struct net *net,
+ 					       struct notifier_block *nb)
+ {
+ 	int err;
+ 
+ 	err = raw_notifier_chain_unregister(&net->netdev_chain, nb);
+ 	if (err)
+ 		return err;
+ 
+ 	call_netdevice_unregister_net_notifiers(nb, net);
+ 	return 0;
+ }
+ 
+ /**
++<<<<<<< HEAD
++=======
+  * register_netdevice_notifier_net - register a per-netns network notifier block
+  * @net: network namespace
+  * @nb: notifier
+  *
+  * Register a notifier to be called when network device events occur.
+  * The notifier passed is linked into the kernel structures and must
+  * not be reused until it has been unregistered. A negative errno code
+  * is returned on a failure.
+  *
+  * When registered all registration and up events are replayed
+  * to the new notifier to allow device to have a race free
+  * view of the network device list.
+  */
+ 
+ int register_netdevice_notifier_net(struct net *net, struct notifier_block *nb)
+ {
+ 	int err;
+ 
+ 	rtnl_lock();
+ 	err = __register_netdevice_notifier_net(net, nb, false);
+ 	rtnl_unlock();
+ 	return err;
+ }
+ EXPORT_SYMBOL(register_netdevice_notifier_net);
+ 
+ /**
+  * unregister_netdevice_notifier_net - unregister a per-netns
+  *                                     network notifier block
+  * @net: network namespace
+  * @nb: notifier
+  *
+  * Unregister a notifier previously registered by
+  * register_netdevice_notifier(). The notifier is unlinked into the
+  * kernel structures and may then be reused. A negative errno code
+  * is returned on a failure.
+  *
+  * After unregistering unregister and down device events are synthesized
+  * for all devices on the device list to the removed notifier to remove
+  * the need for special case cleanup code.
+  */
+ 
+ int unregister_netdevice_notifier_net(struct net *net,
+ 				      struct notifier_block *nb)
+ {
+ 	int err;
+ 
+ 	rtnl_lock();
+ 	err = __unregister_netdevice_notifier_net(net, nb);
+ 	rtnl_unlock();
+ 	return err;
+ }
+ EXPORT_SYMBOL(unregister_netdevice_notifier_net);
+ 
  /**
++>>>>>>> 1f637703d8b6 (net: push code from net notifier reg/unreg into helpers)
   *	call_netdevice_notifiers_info - call all network notifier blocks
   *	@val: value passed unmodified to notifier function
   *	@info: notifier information data
* Unmerged path net/core/dev.c
