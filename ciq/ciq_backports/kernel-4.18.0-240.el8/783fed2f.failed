perf intel-bts: Fix endless record after being terminated

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Wei Li <liwei391@huawei.com>
commit 783fed2f35e2a6771c8dc6ee29b8c4b9930783ce
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/783fed2f.failed

In __cmd_record(), when receiving SIGINT(ctrl + c), a 'done' flag will
be set and the event list will be disabled by evlist__disable() once.

While in auxtrace_record.read_finish(), the related events will be
enabled again, if they are continuous, the recording seems to be
endless.

If the intel_bts event is disabled, we don't enable it again here.

Note: This patch is NOT tested since i don't have such a machine with
intel_bts feature, but the code seems buggy same as arm-spe and
intel-pt.

	Signed-off-by: Wei Li <liwei391@huawei.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Tan Xiaojun <tanxiaojun@huawei.com>
	Cc: stable@vger.kernel.org # 5.4+
Link: http://lore.kernel.org/lkml/20200214132654.20395-3-adrian.hunter@intel.com
[ahunter: removed redundant 'else' after 'return']
	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 783fed2f35e2a6771c8dc6ee29b8c4b9930783ce)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/x86/util/intel-bts.c
diff --cc tools/perf/arch/x86/util/intel-bts.c
index 7aa8dcee0a73,39e363151ad7..000000000000
--- a/tools/perf/arch/x86/util/intel-bts.c
+++ b/tools/perf/arch/x86/util/intel-bts.c
@@@ -422,12 -417,15 +422,19 @@@ static int intel_bts_read_finish(struc
  {
  	struct intel_bts_recording *btsr =
  			container_of(itr, struct intel_bts_recording, itr);
 -	struct evsel *evsel;
 +	struct perf_evsel *evsel;
  
  	evlist__for_each_entry(btsr->evlist, evsel) {
++<<<<<<< HEAD
 +		if (evsel->attr.type == btsr->intel_bts_pmu->type)
++=======
+ 		if (evsel->core.attr.type == btsr->intel_bts_pmu->type) {
+ 			if (evsel->disabled)
+ 				return 0;
++>>>>>>> 783fed2f35e2 (perf intel-bts: Fix endless record after being terminated)
  			return perf_evlist__enable_event_idx(btsr->evlist,
  							     evsel, idx);
+ 		}
  	}
  	return -EINVAL;
  }
* Unmerged path tools/perf/arch/x86/util/intel-bts.c
