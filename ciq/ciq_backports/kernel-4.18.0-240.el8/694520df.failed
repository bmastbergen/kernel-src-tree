perf addr_location: Rename al->mg to al->maps

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 694520dfeb474619402620b68edf08e60ca36a17
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/694520df.failed

One more step on the merge of 'struct maps' with 'struct map_groups'.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-foo95pyyp3bhocbt7yd8qrvq@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 694520dfeb474619402620b68edf08e60ca36a17)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/callchain.c
#	tools/perf/util/db-export.c
#	tools/perf/util/hist.c
#	tools/perf/util/machine.c
#	tools/perf/util/symbol.h
#	tools/perf/util/unwind-libdw.c
#	tools/perf/util/unwind-libunwind-local.c
diff --cc tools/perf/util/callchain.c
index ca37b95d0f91,c7270c057b6b..000000000000
--- a/tools/perf/util/callchain.c
+++ b/tools/perf/util/callchain.c
@@@ -1102,6 -1106,7 +1102,10 @@@ int hist_entry__append_callchain(struc
  int fill_callchain_info(struct addr_location *al, struct callchain_cursor_node *node,
  			bool hide_unresolved)
  {
++<<<<<<< HEAD
++=======
+ 	al->maps = node->ms.mg;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	al->map = node->ms.map;
  	al->sym = node->ms.sym;
  	al->srcline = node->srcline;
diff --cc tools/perf/util/db-export.c
index ef945a31d692,db7447154622..000000000000
--- a/tools/perf/util/db-export.c
+++ b/tools/perf/util/db-export.c
@@@ -259,7 -251,7 +259,11 @@@ static struct call_path *call_path_from
  		 */
  		al.sym = node->ms.sym;
  		al.map = node->ms.map;
++<<<<<<< HEAD
 +		al.mg  = thread->mg;
++=======
+ 		al.maps = thread->maps;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  		al.addr = node->ip;
  
  		if (al.map && !al.sym)
diff --cc tools/perf/util/hist.c
index e487bb0ce346,5ebfbe373442..000000000000
--- a/tools/perf/util/hist.c
+++ b/tools/perf/util/hist.c
@@@ -684,6 -692,7 +684,10 @@@ __hists__add_entry(struct hists *hists
  			.ino = ns ? ns->link_info[CGROUP_NS_INDEX].ino : 0,
  		},
  		.ms = {
++<<<<<<< HEAD
++=======
+ 			.mg	= al->maps,
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  			.map	= al->map,
  			.sym	= al->sym,
  		},
@@@ -750,6 -759,11 +754,14 @@@ struct hist_entry *hists__add_entry_blo
  	struct hist_entry entry = {
  		.block_info = block_info,
  		.hists = hists,
++<<<<<<< HEAD
++=======
+ 		.ms = {
+ 			.mg  = al->maps,
+ 			.map = al->map,
+ 			.sym = al->sym,
+ 		},
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	}, *he = hists__findnew_entry(hists, &entry, al, false);
  
  	return he;
@@@ -881,8 -895,9 +893,14 @@@ iter_next_branch_entry(struct hist_entr
  	if (iter->curr >= iter->total)
  		return 0;
  
++<<<<<<< HEAD
 +	al->map = bi[i].to.map;
 +	al->sym = bi[i].to.sym;
++=======
+ 	al->maps = bi[i].to.ms.mg;
+ 	al->map = bi[i].to.ms.map;
+ 	al->sym = bi[i].to.ms.sym;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	al->addr = bi[i].to.addr;
  	return 1;
  }
@@@ -1057,6 -1072,7 +1075,10 @@@ iter_add_next_cumulative_entry(struct h
  		.comm = thread__comm(al->thread),
  		.ip = al->addr,
  		.ms = {
++<<<<<<< HEAD
++=======
+ 			.mg  = al->maps,
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  			.map = al->map,
  			.sym = al->sym,
  		},
diff --cc tools/perf/util/machine.c
index 97b56c40a5df,de5d6b4727e3..000000000000
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@@ -1931,8 -1934,9 +1931,14 @@@ static void ip__resolve_ams(struct thre
  
  	ams->addr = ip;
  	ams->al_addr = al.addr;
++<<<<<<< HEAD
 +	ams->sym = al.sym;
 +	ams->map = al.map;
++=======
+ 	ams->ms.mg  = al.maps;
+ 	ams->ms.sym = al.sym;
+ 	ams->ms.map = al.map;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	ams->phys_addr = 0;
  }
  
@@@ -1948,8 -1952,9 +1954,14 @@@ static void ip__resolve_data(struct thr
  
  	ams->addr = addr;
  	ams->al_addr = al.addr;
++<<<<<<< HEAD
 +	ams->sym = al.sym;
 +	ams->map = al.map;
++=======
+ 	ams->ms.mg  = al.maps;
+ 	ams->ms.sym = al.sym;
+ 	ams->ms.map = al.map;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	ams->phys_addr = phys_addr;
  }
  
@@@ -2064,6 -2069,7 +2076,10 @@@ static int add_callchain_ip(struct thre
  		iter_cycles = iter->cycles;
  	}
  
++<<<<<<< HEAD
++=======
+ 	ms.mg  = al.maps;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	ms.map = al.map;
  	ms.sym = al.sym;
  	srcline = callchain_srcline(&ms, al.addr);
diff --cc tools/perf/util/symbol.h
index 38ecd98dfede,29c4ea4c354f..000000000000
--- a/tools/perf/util/symbol.h
+++ b/tools/perf/util/symbol.h
@@@ -108,36 -106,9 +108,40 @@@ struct ref_reloc_sym 
  	u64		unrelocated_addr;
  };
  
 +struct branch_info {
 +	struct addr_map_symbol from;
 +	struct addr_map_symbol to;
 +	struct branch_flags flags;
 +	char			*srcline_from;
 +	char			*srcline_to;
 +};
 +
 +struct mem_info {
 +	struct addr_map_symbol	iaddr;
 +	struct addr_map_symbol	daddr;
 +	union perf_mem_data_src	data_src;
 +	refcount_t		refcnt;
 +};
 +
 +struct block_info {
 +	struct symbol		*sym;
 +	u64			start;
 +	u64			end;
 +	u64			cycles;
 +	u64			cycles_aggr;
 +	s64			cycles_spark[NUM_SPARKS];
 +	int			num;
 +	int			num_aggr;
 +	refcount_t		refcnt;
 +};
 +
  struct addr_location {
  	struct thread *thread;
++<<<<<<< HEAD
 +	struct map_groups *mg;
++=======
+ 	struct maps   *maps;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	struct map    *map;
  	struct symbol *sym;
  	const char    *srcline;
diff --cc tools/perf/util/unwind-libdw.c
index c1679f08d22f,bb4f515bdff9..000000000000
--- a/tools/perf/util/unwind-libdw.c
+++ b/tools/perf/util/unwind-libdw.c
@@@ -81,6 -81,7 +81,10 @@@ static int entry(u64 ip, struct unwind_
  		return -1;
  
  	e->ip	  = ip;
++<<<<<<< HEAD
++=======
+ 	e->ms.mg  = al.maps;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  	e->ms.map = al.map;
  	e->ms.sym = al.sym;
  
diff --cc tools/perf/util/unwind-libunwind-local.c
index aaf7a445c595,a744dfaefef5..000000000000
--- a/tools/perf/util/unwind-libunwind-local.c
+++ b/tools/perf/util/unwind-libunwind-local.c
@@@ -579,6 -578,7 +579,10 @@@ static int entry(u64 ip, struct thread 
  	e.ms.sym = thread__find_symbol(thread, PERF_RECORD_MISC_USER, ip, &al);
  	e.ip     = ip;
  	e.ms.map = al.map;
++<<<<<<< HEAD
++=======
+ 	e.ms.mg  = al.maps;
++>>>>>>> 694520dfeb47 (perf addr_location: Rename al->mg to al->maps)
  
  	pr_debug("unwind: %s:ip = 0x%" PRIx64 " (0x%" PRIx64 ")\n",
  		 al.sym ? al.sym->name : "''",
* Unmerged path tools/perf/util/callchain.c
* Unmerged path tools/perf/util/db-export.c
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index 8a8363d72082..bafc571c180a 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -1561,7 +1561,7 @@ struct map *thread__find_map(struct thread *thread, u8 cpumode, u64 addr,
 	struct machine *machine = mg->machine;
 	bool load_map = false;
 
-	al->mg = mg;
+	al->maps = mg;
 	al->thread = thread;
 	al->addr = addr;
 	al->cpumode = cpumode;
@@ -1574,13 +1574,13 @@ struct map *thread__find_map(struct thread *thread, u8 cpumode, u64 addr,
 
 	if (cpumode == PERF_RECORD_MISC_KERNEL && perf_host) {
 		al->level = 'k';
-		al->mg = mg = &machine->kmaps;
+		al->maps = mg = &machine->kmaps;
 		load_map = true;
 	} else if (cpumode == PERF_RECORD_MISC_USER && perf_host) {
 		al->level = '.';
 	} else if (cpumode == PERF_RECORD_MISC_GUEST_KERNEL && perf_guest) {
 		al->level = 'g';
-		al->mg = mg = &machine->kmaps;
+		al->maps = mg = &machine->kmaps;
 		load_map = true;
 	} else if (cpumode == PERF_RECORD_MISC_GUEST_USER && perf_guest) {
 		al->level = 'u';
* Unmerged path tools/perf/util/hist.c
* Unmerged path tools/perf/util/machine.c
diff --git a/tools/perf/util/scripting-engines/trace-event-python.c b/tools/perf/util/scripting-engines/trace-event-python.c
index dca43377add1..accfe8742fca 100644
--- a/tools/perf/util/scripting-engines/trace-event-python.c
+++ b/tools/perf/util/scripting-engines/trace-event-python.c
@@ -1127,7 +1127,7 @@ static void python_export_sample_table(struct db_export *dbe,
 
 	tuple_set_u64(t, 0, es->db_id);
 	tuple_set_u64(t, 1, es->evsel->db_id);
-	tuple_set_u64(t, 2, es->al->mg->machine->db_id);
+	tuple_set_u64(t, 2, es->al->maps->machine->db_id);
 	tuple_set_u64(t, 3, es->al->thread->db_id);
 	tuple_set_u64(t, 4, es->comm_db_id);
 	tuple_set_u64(t, 5, es->dso_db_id);
* Unmerged path tools/perf/util/symbol.h
* Unmerged path tools/perf/util/unwind-libdw.c
* Unmerged path tools/perf/util/unwind-libunwind-local.c
