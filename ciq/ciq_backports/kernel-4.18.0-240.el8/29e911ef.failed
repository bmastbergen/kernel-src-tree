selftests: Fix kselftest O=objdir build from cluttering top level objdir

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Shuah Khan <skhan@linuxfoundation.org>
commit 29e911ef7b706215caf02a82b0d3076611d6abe8
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/29e911ef.failed

make kselftest-all O=objdir builds create generated objects in objdir.
This clutters the top level directory with kselftest objects. Fix it
to create sub-directory under objdir for kselftest objects.

	Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
(cherry picked from commit 29e911ef7b706215caf02a82b0d3076611d6abe8)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/Makefile
diff --cc tools/testing/selftests/Makefile
index a94dc15ec364,be22dbe94a4c..000000000000
--- a/tools/testing/selftests/Makefile
+++ b/tools/testing/selftests/Makefile
@@@ -74,25 -85,75 +74,44 @@@ override LDFLAGS 
  override MAKEFLAGS =
  endif
  
++<<<<<<< HEAD
 +ifneq ($(KBUILD_SRC),)
 +override LDFLAGS =
 +endif
 +
 +BUILD := $(O)
 +ifndef BUILD
 +  BUILD := $(KBUILD_OUTPUT)
 +endif
 +ifndef BUILD
 +  BUILD := $(shell pwd)
++=======
+ # Append kselftest to KBUILD_OUTPUT and O to avoid cluttering
+ # KBUILD_OUTPUT with selftest objects and headers installed
+ # by selftests Makefile or lib.mk.
+ ifdef building_out_of_srctree
+ override LDFLAGS =
+ endif
+ 
+ ifneq ($(O),)
+ 	BUILD := $(O)/kselftest
+ else
+ 	ifneq ($(KBUILD_OUTPUT),)
+ 		BUILD := $(KBUILD_OUTPUT)/kselftest
+ 	else
+ 		BUILD := $(shell pwd)
+ 		DEFAULT_INSTALL_HDR_PATH := 1
+ 	endif
++>>>>>>> 29e911ef7b70 (selftests: Fix kselftest O=objdir build from cluttering top level objdir)
  endif
  
 -# Prepare for headers install
 -top_srcdir ?= ../../..
 -include $(top_srcdir)/scripts/subarch.include
 -ARCH           ?= $(SUBARCH)
 -export KSFT_KHDR_INSTALL_DONE := 1
  export BUILD
 -
 -# build and run gpio when output directory is the src dir.
 -# gpio has dependency on tools/gpio and builds tools/gpio
 -# objects in the src directory in all cases making the src
 -# repo dirty even when objects are relocated.
 -ifneq (1,$(DEFAULT_INSTALL_HDR_PATH))
 -	TMP := $(filter-out gpio, $(TARGETS))
 -	TARGETS := $(TMP)
 -endif
 -
 -# set default goal to all, so make without a target runs all, even when
 -# all isn't the first target in the file.
 -.DEFAULT_GOAL := all
 -
 -# Install headers here once for all tests. KSFT_KHDR_INSTALL_DONE
 -# is used to avoid running headers_install from lib.mk.
 -# Invoke headers install with --no-builtin-rules to avoid circular
 -# dependency in "make kselftest" case. In this case, second level
 -# make inherits builtin-rules which will use the rule generate
 -# Makefile.o and runs into
 -# "Circular Makefile.o <- prepare dependency dropped."
 -# and headers_install fails and test compile fails.
 -#
 -# O= KBUILD_OUTPUT cases don't run into this error, since main Makefile
 -# invokes them as sub-makes and --no-builtin-rules is not necessary,
 -# but doesn't cause any failures. Keep it simple and use the same
 -# flags in both cases.
 -# Local build cases: "make kselftest", "make -C" - headers are installed
 -# in the default INSTALL_HDR_PATH usr/include.
 -khdr:
 -ifeq (1,$(DEFAULT_INSTALL_HDR_PATH))
 -	$(MAKE) --no-builtin-rules ARCH=$(ARCH) -C $(top_srcdir) headers_install
 -else
 -	$(MAKE) --no-builtin-rules INSTALL_HDR_PATH=$$BUILD/usr \
 -		ARCH=$(ARCH) -C $(top_srcdir) headers_install
 -endif
 -
 -all: khdr
 -	@ret=1;							\
 -	for TARGET in $(TARGETS); do				\
 -		BUILD_TARGET=$$BUILD/$$TARGET;			\
 -		mkdir $$BUILD_TARGET  -p;			\
 -		$(MAKE) OUTPUT=$$BUILD_TARGET -C $$TARGET;	\
 -		ret=$$((ret * $$?));				\
 -	done; exit $$ret;
 +all:
 +	@for TARGET in $(TARGETS); do		\
 +		BUILD_TARGET=$$BUILD/$$TARGET;	\
 +		mkdir $$BUILD_TARGET  -p;	\
 +		make OUTPUT=$$BUILD_TARGET -C $$TARGET;\
 +	done;
  
  run_tests: all
  	@for TARGET in $(TARGETS); do \
* Unmerged path tools/testing/selftests/Makefile
