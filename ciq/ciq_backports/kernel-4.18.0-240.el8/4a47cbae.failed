dma-direct: improve swiotlb error reporting

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Christoph Hellwig <hch@lst.de>
commit 4a47cbae04844f0c5e2365aa6c217b61850bb832
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4a47cbae.failed

Untangle the way how dma_direct_map_page calls into swiotlb to be able
to properly report errors where the swiotlb DMA address overflows the
mask separately from overflows in the !swiotlb case.  This means that
siotlb_map now has to do a little more work that duplicates
dma_direct_map_page, but doing so greatly simplifies the calling
convention.

	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
(cherry picked from commit 4a47cbae04844f0c5e2365aa6c217b61850bb832)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/swiotlb.h
#	kernel/dma/direct.c
#	kernel/dma/swiotlb.c
diff --cc include/linux/swiotlb.h
index 29bc3a203283,046bb94bd4d6..000000000000
--- a/include/linux/swiotlb.h
+++ b/include/linux/swiotlb.h
@@@ -60,8 -64,8 +60,13 @@@ extern void swiotlb_tbl_sync_single(str
  				    size_t size, enum dma_data_direction dir,
  				    enum dma_sync_target target);
  
++<<<<<<< HEAD
 +extern int
 +swiotlb_dma_supported(struct device *hwdev, u64 mask);
++=======
+ dma_addr_t swiotlb_map(struct device *dev, phys_addr_t phys,
+ 		size_t size, enum dma_data_direction dir, unsigned long attrs);
++>>>>>>> 4a47cbae0484 (dma-direct: improve swiotlb error reporting)
  
  #ifdef CONFIG_SWIOTLB
  extern enum swiotlb_force swiotlb_force;
diff --cc kernel/dma/direct.c
index f4581748eeeb,594bddd04e01..000000000000
--- a/kernel/dma/direct.c
+++ b/kernel/dma/direct.c
@@@ -317,13 -357,6 +317,16 @@@ void dma_direct_unmap_sg(struct device 
  EXPORT_SYMBOL(dma_direct_unmap_sg);
  #endif
  
++<<<<<<< HEAD
 +static inline bool dma_direct_possible(struct device *dev, dma_addr_t dma_addr,
 +		size_t size)
 +{
 +	return swiotlb_force != SWIOTLB_FORCE &&
 +		dma_capable(dev, dma_addr, size);
 +}
 +
++=======
++>>>>>>> 4a47cbae0484 (dma-direct: improve swiotlb error reporting)
  dma_addr_t dma_direct_map_page(struct device *dev, struct page *page,
  		unsigned long offset, size_t size, enum dma_data_direction dir,
  		unsigned long attrs)
diff --cc kernel/dma/swiotlb.c
index ab8254d12114,c19379fabd20..000000000000
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@@ -647,49 -657,40 +648,65 @@@ void swiotlb_tbl_sync_single(struct dev
  }
  
  /*
-  * Create a swiotlb mapping for the buffer at @phys, and in case of DMAing
+  * Create a swiotlb mapping for the buffer at @paddr, and in case of DMAing
   * to the device copy the data into it as well.
   */
- bool swiotlb_map(struct device *dev, phys_addr_t *phys, dma_addr_t *dma_addr,
- 		size_t size, enum dma_data_direction dir, unsigned long attrs)
+ dma_addr_t swiotlb_map(struct device *dev, phys_addr_t paddr, size_t size,
+ 		enum dma_data_direction dir, unsigned long attrs)
  {
- 	trace_swiotlb_bounced(dev, *dma_addr, size, swiotlb_force);
+ 	phys_addr_t swiotlb_addr;
+ 	dma_addr_t dma_addr;
  
- 	if (unlikely(swiotlb_force == SWIOTLB_NO_FORCE)) {
- 		dev_warn_ratelimited(dev,
- 			"Cannot do DMA to address %pa\n", phys);
- 		return false;
- 	}
+ 	trace_swiotlb_bounced(dev, phys_to_dma(dev, paddr), size,
+ 			      swiotlb_force);
  
++<<<<<<< HEAD
 +	/* Oh well, have to allocate and map a bounce buffer. */
 +	*phys = swiotlb_tbl_map_single(dev, __phys_to_dma(dev, io_tlb_start),
 +			*phys, size, dir, attrs);
 +	if (*phys == (phys_addr_t)DMA_MAPPING_ERROR)
 +		return false;
 +
 +	/* Ensure that the address returned is DMA'ble */
 +	*dma_addr = __phys_to_dma(dev, *phys);
 +	if (unlikely(!dma_capable(dev, *dma_addr, size))) {
 +		swiotlb_tbl_unmap_single(dev, *phys, size, dir,
++=======
+ 	swiotlb_addr = swiotlb_tbl_map_single(dev,
+ 			__phys_to_dma(dev, io_tlb_start),
+ 			paddr, size, size, dir, attrs);
+ 	if (swiotlb_addr == (phys_addr_t)DMA_MAPPING_ERROR)
+ 		return DMA_MAPPING_ERROR;
+ 
+ 	/* Ensure that the address returned is DMA'ble */
+ 	dma_addr = __phys_to_dma(dev, swiotlb_addr);
+ 	if (unlikely(!dma_capable(dev, dma_addr, size, true))) {
+ 		swiotlb_tbl_unmap_single(dev, swiotlb_addr, size, size, dir,
++>>>>>>> 4a47cbae0484 (dma-direct: improve swiotlb error reporting)
  			attrs | DMA_ATTR_SKIP_CPU_SYNC);
- 		return false;
+ 		dev_WARN_ONCE(dev, 1,
+ 			"swiotlb addr %pad+%zu overflow (mask %llx, bus limit %llx).\n",
+ 			&dma_addr, size, *dev->dma_mask, dev->bus_dma_limit);
+ 		return DMA_MAPPING_ERROR;
  	}
  
- 	return true;
+ 	if (!dev_is_dma_coherent(dev) && !(attrs & DMA_ATTR_SKIP_CPU_SYNC))
+ 		arch_sync_dma_for_device(swiotlb_addr, size, dir);
+ 	return dma_addr;
  }
  
 +/*
 + * Return whether the given device DMA address mask can be supported
 + * properly.  For example, if your device can only drive the low 24-bits
 + * during bus mastering, then you would pass 0x00ffffff as the mask to
 + * this function.
 + */
 +int
 +swiotlb_dma_supported(struct device *hwdev, u64 mask)
 +{
 +	return __phys_to_dma(hwdev, io_tlb_end - 1) <= mask;
 +}
 +
  size_t swiotlb_max_mapping_size(struct device *dev)
  {
  	return ((size_t)1 << IO_TLB_SHIFT) * IO_TLB_SEGSIZE;
* Unmerged path include/linux/swiotlb.h
* Unmerged path kernel/dma/direct.c
* Unmerged path kernel/dma/swiotlb.c
