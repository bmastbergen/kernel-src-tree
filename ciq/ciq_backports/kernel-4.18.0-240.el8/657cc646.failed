Bluetooth: Remove usage of BT_ERR_RATELIMITED macro

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Marcel Holtmann <marcel@holtmann.org>
commit 657cc646475b721f5c5bab82e7fd43302c7c8358
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/657cc646.failed

The macro is really not needed and can be replaced with either usage of
bt_err_ratelimited or bt_dev_err_ratelimited.

	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
	Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>
(cherry picked from commit 657cc646475b721f5c5bab82e7fd43302c7c8358)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/hci_event.c
diff --cc net/bluetooth/hci_event.c
index 235b5aaab23d,1941f120a376..000000000000
--- a/net/bluetooth/hci_event.c
+++ b/net/bluetooth/hci_event.c
@@@ -4957,6 -5451,76 +4957,79 @@@ static void hci_le_adv_report_evt(struc
  	hci_dev_unlock(hdev);
  }
  
++<<<<<<< HEAD
++=======
+ static u8 ext_evt_type_to_legacy(struct hci_dev *hdev, u16 evt_type)
+ {
+ 	if (evt_type & LE_EXT_ADV_LEGACY_PDU) {
+ 		switch (evt_type) {
+ 		case LE_LEGACY_ADV_IND:
+ 			return LE_ADV_IND;
+ 		case LE_LEGACY_ADV_DIRECT_IND:
+ 			return LE_ADV_DIRECT_IND;
+ 		case LE_LEGACY_ADV_SCAN_IND:
+ 			return LE_ADV_SCAN_IND;
+ 		case LE_LEGACY_NONCONN_IND:
+ 			return LE_ADV_NONCONN_IND;
+ 		case LE_LEGACY_SCAN_RSP_ADV:
+ 		case LE_LEGACY_SCAN_RSP_ADV_SCAN:
+ 			return LE_ADV_SCAN_RSP;
+ 		}
+ 
+ 		goto invalid;
+ 	}
+ 
+ 	if (evt_type & LE_EXT_ADV_CONN_IND) {
+ 		if (evt_type & LE_EXT_ADV_DIRECT_IND)
+ 			return LE_ADV_DIRECT_IND;
+ 
+ 		return LE_ADV_IND;
+ 	}
+ 
+ 	if (evt_type & LE_EXT_ADV_SCAN_RSP)
+ 		return LE_ADV_SCAN_RSP;
+ 
+ 	if (evt_type & LE_EXT_ADV_SCAN_IND)
+ 		return LE_ADV_SCAN_IND;
+ 
+ 	if (evt_type == LE_EXT_ADV_NON_CONN_IND ||
+ 	    evt_type & LE_EXT_ADV_DIRECT_IND)
+ 		return LE_ADV_NONCONN_IND;
+ 
+ invalid:
+ 	bt_dev_err_ratelimited(hdev, "Unknown advertising packet type: 0x%02x",
+ 			       evt_type);
+ 
+ 	return LE_ADV_INVALID;
+ }
+ 
+ static void hci_le_ext_adv_report_evt(struct hci_dev *hdev, struct sk_buff *skb)
+ {
+ 	u8 num_reports = skb->data[0];
+ 	void *ptr = &skb->data[1];
+ 
+ 	hci_dev_lock(hdev);
+ 
+ 	while (num_reports--) {
+ 		struct hci_ev_le_ext_adv_report *ev = ptr;
+ 		u8 legacy_evt_type;
+ 		u16 evt_type;
+ 
+ 		evt_type = __le16_to_cpu(ev->evt_type);
+ 		legacy_evt_type = ext_evt_type_to_legacy(hdev, evt_type);
+ 		if (legacy_evt_type != LE_ADV_INVALID) {
+ 			process_adv_report(hdev, legacy_evt_type, &ev->bdaddr,
+ 					   ev->bdaddr_type, NULL, 0, ev->rssi,
+ 					   ev->data, ev->length);
+ 		}
+ 
+ 		ptr += sizeof(*ev) + ev->length;
+ 	}
+ 
+ 	hci_dev_unlock(hdev);
+ }
+ 
++>>>>>>> 657cc646475b (Bluetooth: Remove usage of BT_ERR_RATELIMITED macro)
  static void hci_le_remote_feat_complete_evt(struct hci_dev *hdev,
  					    struct sk_buff *skb)
  {
diff --git a/include/net/bluetooth/bluetooth.h b/include/net/bluetooth/bluetooth.h
index 90909c373a39..634392a3fd5b 100644
--- a/include/net/bluetooth/bluetooth.h
+++ b/include/net/bluetooth/bluetooth.h
@@ -138,8 +138,6 @@ void bt_err_ratelimited(const char *fmt, ...);
 #define BT_ERR(fmt, ...)	bt_err(fmt "\n", ##__VA_ARGS__)
 #define BT_DBG(fmt, ...)	pr_debug(fmt "\n", ##__VA_ARGS__)
 
-#define BT_ERR_RATELIMITED(fmt, ...) bt_err_ratelimited(fmt "\n", ##__VA_ARGS__)
-
 #define bt_dev_info(hdev, fmt, ...)				\
 	BT_INFO("%s: " fmt, (hdev)->name, ##__VA_ARGS__)
 #define bt_dev_warn(hdev, fmt, ...)				\
@@ -152,7 +150,7 @@ void bt_err_ratelimited(const char *fmt, ...);
 #define bt_dev_warn_ratelimited(hdev, fmt, ...)			\
 	bt_warn_ratelimited("%s: " fmt, (hdev)->name, ##__VA_ARGS__)
 #define bt_dev_err_ratelimited(hdev, fmt, ...)			\
-	BT_ERR_RATELIMITED("%s: " fmt, (hdev)->name, ##__VA_ARGS__)
+	bt_err_ratelimited("%s: " fmt, (hdev)->name, ##__VA_ARGS__)
 
 /* Connection and socket states */
 enum {
* Unmerged path net/bluetooth/hci_event.c
