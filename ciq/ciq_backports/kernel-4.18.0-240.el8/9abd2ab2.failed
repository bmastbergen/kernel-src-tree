perf tools: Introduce perf_evlist__mmap_cb_idx()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 9abd2ab2377613425e1c362694f85b110f5bace2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/9abd2ab2.failed

Add perf_evlist__mmap_cb_idx function to call auxtrace_mmap_params__set_idx()
on each new index during perf_evlist__mmap_ops call.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20191007125344.14268-19-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 9abd2ab2377613425e1c362694f85b110f5bace2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evlist.c
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,11716f2b965a..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -833,7 -739,18 +833,22 @@@ static int perf_evlist__mmap_per_evsel(
  	return 0;
  }
  
++<<<<<<< HEAD
 +static int perf_evlist__mmap_per_cpu(struct perf_evlist *evlist,
++=======
+ static void
+ perf_evlist__mmap_cb_idx(struct perf_evlist *_evlist,
+ 			 struct perf_mmap_param *_mp,
+ 			 int idx, bool per_cpu)
+ {
+ 	struct evlist *evlist = container_of(_evlist, struct evlist, core);
+ 	struct mmap_params *mp = container_of(_mp, struct mmap_params, core);
+ 
+ 	auxtrace_mmap_params__set_idx(&mp->auxtrace_mp, evlist, idx, per_cpu);
+ }
+ 
+ static int evlist__mmap_per_cpu(struct evlist *evlist,
++>>>>>>> 9abd2ab23776 (perf tools: Introduce perf_evlist__mmap_cb_idx())
  				     struct mmap_params *mp)
  {
  	int cpu, thread;
@@@ -1023,11 -940,18 +1038,23 @@@ int perf_evlist__mmap_ex(struct perf_ev
  	 * Its value is decided by evsel's write_backward.
  	 * So &mp should not be passed through const pointer.
  	 */
++<<<<<<< HEAD
 +	struct mmap_params mp = { .nr_cblocks = nr_cblocks, .affinity = affinity, .flush = flush,
 +				  .comp_level = comp_level };
++=======
+ 	struct mmap_params mp = {
+ 		.nr_cblocks	= nr_cblocks,
+ 		.affinity	= affinity,
+ 		.flush		= flush,
+ 		.comp_level	= comp_level
+ 	};
+ 	struct perf_evlist_mmap_ops ops __maybe_unused = {
+ 		.idx = perf_evlist__mmap_cb_idx,
+ 	};
++>>>>>>> 9abd2ab23776 (perf tools: Introduce perf_evlist__mmap_cb_idx())
  
  	if (!evlist->mmap)
 -		evlist->mmap = evlist__alloc_mmap(evlist, false);
 +		evlist->mmap = perf_evlist__alloc_mmap(evlist, false);
  	if (!evlist->mmap)
  		return -ENOMEM;
  
* Unmerged path tools/perf/util/evlist.c
