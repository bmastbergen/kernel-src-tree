libperf: Add perf_evlist__id_add_fd() function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit d5a99483dece17dbde01968a7ffc03b7f575dc11
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d5a99483.failed

Add the perf_evlist__id_add_fd() function to libperf as an internal
function.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lore.kernel.org/lkml/20190913132355.21634-32-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit d5a99483dece17dbde01968a7ffc03b7f575dc11)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/lib/evlist.c
#	tools/perf/lib/include/internal/evlist.h
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,a37eccf65eae..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -482,74 -456,13 +482,79 @@@ int perf_evlist__filter_pollfd(struct p
  			       perf_evlist__munmap_filtered, NULL);
  }
  
 -int perf_evlist__poll(struct evlist *evlist, int timeout)
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout)
 +{
 +	return fdarray__poll(&evlist->pollfd, timeout);
 +}
 +
++<<<<<<< HEAD
 +static void perf_evlist__id_hash(struct perf_evlist *evlist,
 +				 struct perf_evsel *evsel,
 +				 int cpu, int thread, u64 id)
 +{
 +	int hash;
 +	struct perf_sample_id *sid = SID(evsel, cpu, thread);
 +
 +	sid->id = id;
 +	sid->evsel = evsel;
 +	hash = hash_64(sid->id, PERF_EVLIST__HLIST_BITS);
 +	hlist_add_head(&sid->node, &evlist->heads[hash]);
 +}
 +
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id)
 +{
 +	perf_evlist__id_hash(evlist, evsel, cpu, thread, id);
 +	evsel->id[evsel->ids++] = id;
 +}
 +
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
 +			   int cpu, int thread, int fd)
  {
 -	return fdarray__poll(&evlist->core.pollfd, timeout);
 +	u64 read_data[4] = { 0, };
 +	int id_idx = 1; /* The first entry is the counter value */
 +	u64 id;
 +	int ret;
 +
 +	ret = ioctl(fd, PERF_EVENT_IOC_ID, &id);
 +	if (!ret)
 +		goto add;
 +
 +	if (errno != ENOTTY)
 +		return -1;
 +
 +	/* Legacy way to get event id.. All hail to old kernels! */
 +
 +	/*
 +	 * This way does not work with group format read, so bail
 +	 * out in that case.
 +	 */
 +	if (perf_evlist__read_format(evlist) & PERF_FORMAT_GROUP)
 +		return -1;
 +
 +	if (!(evsel->attr.read_format & PERF_FORMAT_ID) ||
 +	    read(fd, &read_data, sizeof(read_data)) == -1)
 +		return -1;
 +
 +	if (evsel->attr.read_format & PERF_FORMAT_TOTAL_TIME_ENABLED)
 +		++id_idx;
 +	if (evsel->attr.read_format & PERF_FORMAT_TOTAL_TIME_RUNNING)
 +		++id_idx;
 +
 +	id = read_data[id_idx];
 +
 + add:
 +	perf_evlist__id_add(evlist, evsel, cpu, thread, id);
 +	return 0;
  }
  
 +static void perf_evlist__set_sid_idx(struct perf_evlist *evlist,
 +				     struct perf_evsel *evsel, int idx, int cpu,
++=======
+ static void perf_evlist__set_sid_idx(struct evlist *evlist,
+ 				     struct evsel *evsel, int idx, int cpu,
++>>>>>>> d5a99483dece (libperf: Add perf_evlist__id_add_fd() function)
  				     int thread)
  {
  	struct perf_sample_id *sid = SID(evsel, cpu, thread);
@@@ -821,8 -734,8 +826,13 @@@ static int perf_evlist__mmap_per_evsel(
  			return -1;
  		}
  
++<<<<<<< HEAD
 +		if (evsel->attr.read_format & PERF_FORMAT_ID) {
 +			if (perf_evlist__id_add_fd(evlist, evsel, cpu, thread,
++=======
+ 		if (evsel->core.attr.read_format & PERF_FORMAT_ID) {
+ 			if (perf_evlist__id_add_fd(&evlist->core, &evsel->core, cpu, thread,
++>>>>>>> d5a99483dece (libperf: Add perf_evlist__id_add_fd() function)
  						   fd) < 0)
  				return -1;
  			perf_evlist__set_sid_idx(evlist, evsel, idx, cpu,
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,80b3361613e5..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -113,41 -130,35 +113,47 @@@ void __perf_evlist__reset_sample_bit(st
  #define perf_evlist__reset_sample_bit(evlist, bit) \
  	__perf_evlist__reset_sample_bit(evlist, PERF_SAMPLE_##bit)
  
 -int perf_evlist__set_tp_filter(struct evlist *evlist, const char *filter);
 -int perf_evlist__set_tp_filter_pid(struct evlist *evlist, pid_t pid);
 -int perf_evlist__set_tp_filter_pids(struct evlist *evlist, size_t npids, pid_t *pids);
 +int perf_evlist__set_tp_filter(struct perf_evlist *evlist, const char *filter);
 +int perf_evlist__set_tp_filter_pid(struct perf_evlist *evlist, pid_t pid);
 +int perf_evlist__set_tp_filter_pids(struct perf_evlist *evlist, size_t npids, pid_t *pids);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_id(struct evlist *evlist, int id);
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_id(struct perf_evlist *evlist, int id);
  
 -struct evsel *
 -perf_evlist__find_tracepoint_by_name(struct evlist *evlist,
 +struct perf_evsel *
 +perf_evlist__find_tracepoint_by_name(struct perf_evlist *evlist,
  				     const char *name);
  
++<<<<<<< HEAD
 +void perf_evlist__id_add(struct perf_evlist *evlist, struct perf_evsel *evsel,
 +			 int cpu, int thread, u64 id);
 +int perf_evlist__id_add_fd(struct perf_evlist *evlist,
 +			   struct perf_evsel *evsel,
 +			   int cpu, int thread, int fd);
 +
 +int perf_evlist__add_pollfd(struct perf_evlist *evlist, int fd);
 +int perf_evlist__alloc_pollfd(struct perf_evlist *evlist);
 +int perf_evlist__filter_pollfd(struct perf_evlist *evlist, short revents_and_mask);
++=======
+ int perf_evlist__add_pollfd(struct evlist *evlist, int fd);
+ int perf_evlist__alloc_pollfd(struct evlist *evlist);
+ int perf_evlist__filter_pollfd(struct evlist *evlist, short revents_and_mask);
++>>>>>>> d5a99483dece (libperf: Add perf_evlist__id_add_fd() function)
  
 -int perf_evlist__poll(struct evlist *evlist, int timeout);
 +int perf_evlist__poll(struct perf_evlist *evlist, int timeout);
  
 -struct evsel *perf_evlist__id2evsel(struct evlist *evlist, u64 id);
 -struct evsel *perf_evlist__id2evsel_strict(struct evlist *evlist,
 +struct perf_evsel *perf_evlist__id2evsel(struct perf_evlist *evlist, u64 id);
 +struct perf_evsel *perf_evlist__id2evsel_strict(struct perf_evlist *evlist,
  						u64 id);
  
 -struct perf_sample_id *perf_evlist__id2sid(struct evlist *evlist, u64 id);
 +struct perf_sample_id *perf_evlist__id2sid(struct perf_evlist *evlist, u64 id);
  
 -void perf_evlist__toggle_bkw_mmap(struct evlist *evlist, enum bkw_mmap_state state);
 +void perf_evlist__toggle_bkw_mmap(struct perf_evlist *evlist, enum bkw_mmap_state state);
  
 -void evlist__mmap_consume(struct evlist *evlist, int idx);
 +void perf_evlist__mmap_consume(struct perf_evlist *evlist, int idx);
  
 -int evlist__open(struct evlist *evlist);
 -void evlist__close(struct evlist *evlist);
 +int perf_evlist__open(struct perf_evlist *evlist);
 +void perf_evlist__close(struct perf_evlist *evlist);
  
  struct callchain_param;
  
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/lib/evlist.c
* Unmerged path tools/perf/lib/include/internal/evlist.h
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
diff --git a/tools/perf/util/evsel.c b/tools/perf/util/evsel.c
index 90bfc2303a40..8964e932f6b9 100644
--- a/tools/perf/util/evsel.c
+++ b/tools/perf/util/evsel.c
@@ -3058,7 +3058,7 @@ static int store_evsel_ids(struct perf_evsel *evsel, struct perf_evlist *evlist)
 		     thread++) {
 			int fd = FD(evsel, cpu, thread);
 
-			if (perf_evlist__id_add_fd(evlist, evsel,
+			if (perf_evlist__id_add_fd(&evlist->core, &evsel->core,
 						   cpu, thread, fd) < 0)
 				return -1;
 		}
