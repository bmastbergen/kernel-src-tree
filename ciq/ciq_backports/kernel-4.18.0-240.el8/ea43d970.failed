nvme: fix identify error status silent ignore

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sagi Grimberg <sagi@grimberg.me>
commit ea43d9709f727e728e933a8157a7a7ca1a868281
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ea43d970.failed

Commit 59c7c3caaaf8 intended to only silently ignore non retry-able
errors (DNR bit set) such that we can still identify misbehaving
controllers, and in the other hand propagate retry-able errors (DNR bit
cleared) so we don't wrongly abandon a namespace just because it happens
to be temporarily inaccessible.

The goal remains the same as the original commit where this was
introduced but unfortunately had the logic backwards.

Fixes: 59c7c3caaaf8 ("nvme: fix possible hang when ns scanning fails during error recovery")
	Reported-by: Keith Busch <kbusch@kernel.org>
	Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
	Reviewed-by: Keith Busch <kbusch@kernel.org>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
(cherry picked from commit ea43d9709f727e728e933a8157a7a7ca1a868281)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/nvme/host/core.c
diff --cc drivers/nvme/host/core.c
index 54bfa09c007b,8410d03b940d..000000000000
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@@ -1022,8 -1112,23 +1022,26 @@@ static int nvme_identify_ns_descs(struc
  
  	status = nvme_submit_sync_cmd(ctrl->admin_q, &c, data,
  				      NVME_IDENTIFY_DATA_SIZE);
++<<<<<<< HEAD
 +	if (status)
++=======
+ 	if (status) {
+ 		dev_warn(ctrl->device,
+ 			"Identify Descriptors failed (%d)\n", status);
+ 		 /*
+ 		  * Don't treat non-retryable errors as fatal, as we potentially
+ 		  * already have a NGUID or EUI-64.  If we failed with DNR set,
+ 		  * we want to silently ignore the error as we can still
+ 		  * identify the device, but if the status has DNR set, we want
+ 		  * to propagate the error back specifically for the disk
+ 		  * revalidation flow to make sure we don't abandon the
+ 		  * device just because of a temporal retry-able error (such
+ 		  * as path of transport errors).
+ 		  */
+ 		if (status > 0 && (status & NVME_SC_DNR))
+ 			status = 0;
++>>>>>>> ea43d9709f72 (nvme: fix identify error status silent ignore)
  		goto free_data;
 -	}
  
  	for (pos = 0; pos < NVME_IDENTIFY_DATA_SIZE; pos += len) {
  		struct nvme_ns_id_desc *cur = data + pos;
* Unmerged path drivers/nvme/host/core.c
