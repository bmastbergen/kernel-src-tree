net/tls: allow compiling TLS TOE out

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [net] tls: allow compiling TLS TOE out (Sabrina Dubroca) [1819627]
Rebuild_FUZZ: 94.12%
commit-author Jakub Kicinski <jakub.kicinski@netronome.com>
commit 53b4414a7003099f41ab61ef9a452804c025e2c1
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/53b4414a.failed

TLS "record layer offload" requires TOE, and bypasses most of
the normal networking stack. It is also significantly less
maintained. Allow users to compile it out to avoid issues.

	Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
	Reviewed-by: John Hurley <john.hurley@netronome.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 53b4414a7003099f41ab61ef9a452804c025e2c1)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/tls/tls_main.c
diff --cc net/tls/tls_main.c
index f7a147ae7fd3,237e58e4928a..000000000000
--- a/net/tls/tls_main.c
+++ b/net/tls/tls_main.c
@@@ -766,10 -679,11 +766,16 @@@ static void build_protos(struct proto p
  
  	prot[TLS_HW][TLS_HW] = prot[TLS_HW][TLS_SW];
  #endif
- 
+ #ifdef CONFIG_TLS_TOE
  	prot[TLS_HW_RECORD][TLS_HW_RECORD] = *base;
++<<<<<<< HEAD
 +	prot[TLS_HW_RECORD][TLS_HW_RECORD].hash		= tls_hw_hash;
 +	prot[TLS_HW_RECORD][TLS_HW_RECORD].unhash	= tls_hw_unhash;
++=======
+ 	prot[TLS_HW_RECORD][TLS_HW_RECORD].hash		= tls_toe_hash;
+ 	prot[TLS_HW_RECORD][TLS_HW_RECORD].unhash	= tls_toe_unhash;
+ #endif
++>>>>>>> 53b4414a7003 (net/tls: allow compiling TLS TOE out)
  }
  
  static int tls_init(struct sock *sk)
@@@ -777,8 -691,12 +783,16 @@@
  	struct tls_context *ctx;
  	int rc = 0;
  
++<<<<<<< HEAD
 +	if (tls_hw_prot(sk))
++=======
+ 	tls_build_proto(sk);
+ 
+ #ifdef CONFIG_TLS_TOE
+ 	if (tls_toe_bypass(sk))
++>>>>>>> 53b4414a7003 (net/tls: allow compiling TLS TOE out)
  		return 0;
+ #endif
  
  	/* The TLS ulp is currently supported only for TCP sockets
  	 * in ESTABLISHED state.
diff --git a/drivers/crypto/chelsio/Kconfig b/drivers/crypto/chelsio/Kconfig
index 930d82d991f2..29e2cc60da97 100644
--- a/drivers/crypto/chelsio/Kconfig
+++ b/drivers/crypto/chelsio/Kconfig
@@ -33,7 +33,7 @@ config CHELSIO_IPSEC_INLINE
 config CRYPTO_DEV_CHELSIO_TLS
         tristate "Chelsio Crypto Inline TLS Driver"
         depends on CHELSIO_T4
-        depends on TLS
+        depends on TLS_TOE
         select CRYPTO_DEV_CHELSIO
         ---help---
           Support Chelsio Inline TLS with Chelsio crypto accelerator.
diff --git a/net/tls/Kconfig b/net/tls/Kconfig
index 99c1a19c17b1..859cf43e9a0e 100644
--- a/net/tls/Kconfig
+++ b/net/tls/Kconfig
@@ -25,3 +25,13 @@ config TLS_DEVICE
 	Enable kernel support for HW offload of the TLS protocol.
 
 	If unsure, say N.
+
+config TLS_TOE
+	bool "Transport Layer Security TCP stack bypass"
+	depends on TLS
+	default n
+	help
+	Enable kernel support for legacy HW offload of the TLS protocol,
+	which is incompatible with the Linux networking stack semantics.
+
+	If unsure, say N.
diff --git a/net/tls/Makefile b/net/tls/Makefile
index 4d6b728a67d0..f9447491fa57 100644
--- a/net/tls/Makefile
+++ b/net/tls/Makefile
@@ -6,4 +6,5 @@ obj-$(CONFIG_TLS) += tls.o
 
 tls-y := tls_main.o tls_sw.o
 
+tls-$(CONFIG_TLS_TOE) += tls_toe.o
 tls-$(CONFIG_TLS_DEVICE) += tls_device.o tls_device_fallback.o
* Unmerged path net/tls/tls_main.c
