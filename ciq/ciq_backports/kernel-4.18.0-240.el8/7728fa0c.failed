libperf: Adopt perf_mmap__consume() function from tools/perf

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit 7728fa0cfaeb7d25b12c8865c733359cc8e5fb13
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7728fa0c.failed

Move perf_mmap__consume() vrom tools/perf to libperf and export it in
the perf/mmap.h header.

Move also the needed helpers perf_mmap__write_tail(),
perf_mmap__read_head() and perf_mmap__empty().

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lore.kernel.org/lkml/20191007125344.14268-10-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 7728fa0cfaeb7d25b12c8865c733359cc8e5fb13)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/arch/x86/tests/perf-time-to-tsc.c
#	tools/perf/lib/include/internal/mmap.h
#	tools/perf/lib/libperf.map
#	tools/perf/lib/mmap.c
#	tools/perf/tests/backward-ring-buffer.c
#	tools/perf/tests/code-reading.c
#	tools/perf/tests/keep-tracking.c
#	tools/perf/tests/mmap-basic.c
#	tools/perf/tests/sw-clock.c
#	tools/perf/tests/switch-tracking.c
#	tools/perf/tests/task-exit.c
#	tools/perf/util/evlist.c
#	tools/perf/util/mmap.c
#	tools/perf/util/mmap.h
#	tools/perf/util/python.c
diff --cc tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86,3397898824f6..000000000000
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@@ -5,7 -7,11 +5,13 @@@
  #include <unistd.h>
  #include <linux/types.h>
  #include <sys/prctl.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
 -#include "debug.h"
  #include "parse-events.h"
  #include "evlist.h"
  #include "evsel.h"
diff --cc tools/perf/lib/libperf.map
index 3536242c545c,d7b327f224e2..000000000000
--- a/tools/perf/lib/libperf.map
+++ b/tools/perf/lib/libperf.map
@@@ -1,6 -1,46 +1,50 @@@
  LIBPERF_0.0.1 {
  	global:
++<<<<<<< HEAD
 +		libperf_set_print;
++=======
+ 		libperf_init;
+ 		perf_cpu_map__dummy_new;
+ 		perf_cpu_map__get;
+ 		perf_cpu_map__put;
+ 		perf_cpu_map__new;
+ 		perf_cpu_map__read;
+ 		perf_cpu_map__nr;
+ 		perf_cpu_map__cpu;
+ 		perf_cpu_map__empty;
+ 		perf_cpu_map__max;
+ 		perf_thread_map__new_dummy;
+ 		perf_thread_map__set_pid;
+ 		perf_thread_map__comm;
+ 		perf_thread_map__nr;
+ 		perf_thread_map__pid;
+ 		perf_thread_map__get;
+ 		perf_thread_map__put;
+ 		perf_evsel__new;
+ 		perf_evsel__delete;
+ 		perf_evsel__enable;
+ 		perf_evsel__disable;
+ 		perf_evsel__init;
+ 		perf_evsel__open;
+ 		perf_evsel__close;
+ 		perf_evsel__read;
+ 		perf_evsel__cpus;
+ 		perf_evsel__threads;
+ 		perf_evsel__attr;
+ 		perf_evlist__new;
+ 		perf_evlist__delete;
+ 		perf_evlist__open;
+ 		perf_evlist__close;
+ 		perf_evlist__enable;
+ 		perf_evlist__disable;
+ 		perf_evlist__init;
+ 		perf_evlist__add;
+ 		perf_evlist__remove;
+ 		perf_evlist__next;
+ 		perf_evlist__set_maps;
+ 		perf_evlist__poll;
+ 		perf_mmap__consume;
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  	local:
  		*;
  };
diff --cc tools/perf/tests/backward-ring-buffer.c
index 1a9c3becf5ff,13f9a060361a..000000000000
--- a/tools/perf/tests/backward-ring-buffer.c
+++ b/tools/perf/tests/backward-ring-buffer.c
@@@ -4,12 -4,16 +4,17 @@@
   * beginning
   */
  
 +#include <perf.h>
  #include <evlist.h>
  #include <sys/prctl.h>
 -#include "record.h"
  #include "tests.h"
  #include "debug.h"
 -#include "parse-events.h"
 -#include "util/mmap.h"
  #include <errno.h>
++<<<<<<< HEAD
++=======
+ #include <linux/string.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
  #define NR_ITERS 111
  
diff --cc tools/perf/tests/code-reading.c
index aa6df122b175,b5a57bb54c25..000000000000
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@@ -8,8 -8,15 +8,14 @@@
  #include <stdio.h>
  #include <string.h>
  #include <sys/param.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
 -#include "debug.h"
 -#include "dso.h"
 -#include "env.h"
  #include "parse-events.h"
 -#include "trace-event.h"
  #include "evlist.h"
  #include "evsel.h"
  #include "thread_map.h"
diff --cc tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e,31c005e07b17..000000000000
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@@ -1,8 -1,13 +1,14 @@@
  // SPDX-License-Identifier: GPL-2.0
  #include <linux/types.h>
 -#include <limits.h>
  #include <unistd.h>
  #include <sys/prctl.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
 -#include "debug.h"
  #include "parse-events.h"
  #include "evlist.h"
  #include "evsel.h"
diff --cc tools/perf/tests/mmap-basic.c
index 0919b0793e5b,b176acc4f52e..000000000000
--- a/tools/perf/tests/mmap-basic.c
+++ b/tools/perf/tests/mmap-basic.c
@@@ -7,10 -9,14 +7,16 @@@
  #include "evlist.h"
  #include "evsel.h"
  #include "thread_map.h"
 +#include "cpumap.h"
  #include "tests.h"
 -#include "util/mmap.h"
  #include <linux/err.h>
  #include <linux/kernel.h>
++<<<<<<< HEAD
++=======
+ #include <linux/string.h>
+ #include <perf/evlist.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
  /*
   * This test will generate random numbers of calls to some getpid syscalls,
diff --cc tools/perf/tests/sw-clock.c
index f9490b237893,1aeb558010c1..000000000000
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@@ -10,7 -11,11 +10,12 @@@
  #include "util/evsel.h"
  #include "util/evlist.h"
  #include "util/cpumap.h"
 -#include "util/mmap.h"
  #include "util/thread_map.h"
++<<<<<<< HEAD
++=======
+ #include <perf/evlist.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
  #define NR_LOOPS  10000000
  
diff --cc tools/perf/tests/switch-tracking.c
index 6cdab5f4812a,55728b3da057..000000000000
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@@ -5,7 -5,12 +5,13 @@@
  #include <time.h>
  #include <stdlib.h>
  #include <linux/zalloc.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
 -#include "debug.h"
  #include "parse-events.h"
  #include "evlist.h"
  #include "evsel.h"
diff --cc tools/perf/tests/task-exit.c
index e92fa6029ac7,a0f689594848..000000000000
--- a/tools/perf/tests/task-exit.c
+++ b/tools/perf/tests/task-exit.c
@@@ -7,6 -8,11 +7,13 @@@
  
  #include <errno.h>
  #include <signal.h>
++<<<<<<< HEAD
++=======
+ #include <linux/string.h>
+ #include <perf/cpumap.h>
+ #include <perf/evlist.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
  static int exited;
  static int nr_exit;
diff --cc tools/perf/util/evlist.c
index 29a998d183ce,34ba47b9896b..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -34,7 -37,12 +34,14 @@@
  #include <linux/hash.h>
  #include <linux/log2.h>
  #include <linux/err.h>
 -#include <linux/string.h>
  #include <linux/zalloc.h>
++<<<<<<< HEAD
++=======
+ #include <perf/evlist.h>
+ #include <perf/evsel.h>
+ #include <perf/cpumap.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
  #include <internal/xyarray.h>
  
diff --cc tools/perf/util/mmap.c
index 850493205040,abe7cbe6c95f..000000000000
--- a/tools/perf/util/mmap.c
+++ b/tools/perf/util/mmap.c
@@@ -11,6 -10,10 +11,13 @@@
  #include <inttypes.h>
  #include <asm/bug.h>
  #include <linux/zalloc.h>
++<<<<<<< HEAD
++=======
+ #include <stdlib.h>
+ #include <string.h>
+ #include <unistd.h> // sysconf()
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  #ifdef HAVE_LIBNUMA_SUPPORT
  #include <numaif.h>
  #endif
@@@ -90,47 -95,17 +97,55 @@@ union perf_event *perf_mmap__read_event
  		return NULL;
  
  	/* non-overwirte doesn't pause the ringbuffer */
++<<<<<<< HEAD
 +	if (!map->overwrite)
 +		map->end = perf_mmap__read_head(map);
++=======
+ 	if (!map->core.overwrite)
+ 		map->core.end = perf_mmap__read_head(&map->core);
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
 -	event = perf_mmap__read(map, &map->core.start, map->core.end);
 +	event = perf_mmap__read(map, &map->start, map->end);
  
 -	if (!map->core.overwrite)
 -		map->core.prev = map->core.start;
 +	if (!map->overwrite)
 +		map->prev = map->start;
  
  	return event;
  }
  
++<<<<<<< HEAD
 +static bool perf_mmap__empty(struct perf_mmap *map)
 +{
 +	return perf_mmap__read_head(map) == map->prev && !map->auxtrace_mmap.base;
 +}
 +
 +void perf_mmap__get(struct perf_mmap *map)
 +{
 +	refcount_inc(&map->refcnt);
 +}
 +
 +void perf_mmap__put(struct perf_mmap *map)
 +{
 +	BUG_ON(map->base && refcount_read(&map->refcnt) == 0);
 +
 +	if (refcount_dec_and_test(&map->refcnt))
 +		perf_mmap__munmap(map);
 +}
 +
 +void perf_mmap__consume(struct perf_mmap *map)
 +{
 +	if (!map->overwrite) {
 +		u64 old = map->prev;
 +
 +		perf_mmap__write_tail(map, old);
 +	}
 +
 +	if (refcount_read(&map->refcnt) == 1 && perf_mmap__empty(map))
 +		perf_mmap__put(map);
 +}
 +
++=======
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  int __weak auxtrace_mmap__mmap(struct auxtrace_mmap *mm __maybe_unused,
  			       struct auxtrace_mmap_params *mp __maybe_unused,
  			       void *userpg __maybe_unused,
@@@ -437,26 -400,26 +452,37 @@@ static int overwrite_rb_find_range(voi
  /*
   * Report the start and end of the available data in ringbuffer
   */
 -static int __perf_mmap__read_init(struct mmap *md)
 +static int __perf_mmap__read_init(struct perf_mmap *md)
  {
++<<<<<<< HEAD
 +	u64 head = perf_mmap__read_head(md);
 +	u64 old = md->prev;
 +	unsigned char *data = md->base + page_size;
++=======
+ 	u64 head = perf_mmap__read_head(&md->core);
+ 	u64 old = md->core.prev;
+ 	unsigned char *data = md->core.base + page_size;
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  	unsigned long size;
  
 -	md->core.start = md->core.overwrite ? head : old;
 -	md->core.end = md->core.overwrite ? old : head;
 +	md->start = md->overwrite ? head : old;
 +	md->end = md->overwrite ? old : head;
  
 -	if ((md->core.end - md->core.start) < md->core.flush)
 +	if ((md->end - md->start) < md->flush)
  		return -EAGAIN;
  
 -	size = md->core.end - md->core.start;
 -	if (size > (unsigned long)(md->core.mask) + 1) {
 -		if (!md->core.overwrite) {
 +	size = md->end - md->start;
 +	if (size > (unsigned long)(md->mask) + 1) {
 +		if (!md->overwrite) {
  			WARN_ONCE(1, "failed to keep up with mmap data. (warn only once)\n");
  
++<<<<<<< HEAD
 +			md->prev = head;
 +			perf_mmap__consume(md);
++=======
+ 			md->core.prev = head;
+ 			perf_mmap__consume(&md->core);
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  			return -EAGAIN;
  		}
  
@@@ -482,11 -445,11 +508,16 @@@ int perf_mmap__read_init(struct perf_mm
  	return __perf_mmap__read_init(map);
  }
  
 -int perf_mmap__push(struct mmap *md, void *to,
 -		    int push(struct mmap *map, void *to, void *buf, size_t size))
 +int perf_mmap__push(struct perf_mmap *md, void *to,
 +		    int push(struct perf_mmap *map, void *to, void *buf, size_t size))
  {
++<<<<<<< HEAD
 +	u64 head = perf_mmap__read_head(md);
 +	unsigned char *data = md->base + page_size;
++=======
+ 	u64 head = perf_mmap__read_head(&md->core);
+ 	unsigned char *data = md->core.base + page_size;
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  	unsigned long size;
  	void *buf;
  	int rc = 0;
@@@ -517,8 -480,8 +548,13 @@@
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	md->prev = head;
 +	perf_mmap__consume(md);
++=======
+ 	md->core.prev = head;
+ 	perf_mmap__consume(&md->core);
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  out:
  	return rc;
  }
@@@ -534,8 -497,8 +570,12 @@@ void perf_mmap__read_done(struct perf_m
  	/*
  	 * Check if event was unmapped due to a POLLHUP/POLLERR.
  	 */
 -	if (!refcount_read(&map->core.refcnt))
 +	if (!refcount_read(&map->refcnt))
  		return;
  
++<<<<<<< HEAD
 +	map->prev = perf_mmap__read_head(map);
++=======
+ 	map->core.prev = perf_mmap__read_head(&map->core);
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  }
diff --cc tools/perf/util/mmap.h
index 274ce389cd84,89fb93267ff1..000000000000
--- a/tools/perf/util/mmap.h
+++ b/tools/perf/util/mmap.h
@@@ -77,33 -42,18 +77,37 @@@ struct mmap_params 
  	struct auxtrace_mmap_params auxtrace_mp;
  };
  
 -int mmap__mmap(struct mmap *map, struct mmap_params *mp, int fd, int cpu);
 -void mmap__munmap(struct mmap *map);
 +int perf_mmap__mmap(struct perf_mmap *map, struct mmap_params *mp, int fd, int cpu);
 +void perf_mmap__munmap(struct perf_mmap *map);
 +
++<<<<<<< HEAD
 +void perf_mmap__get(struct perf_mmap *map);
 +void perf_mmap__put(struct perf_mmap *map);
 +
 +void perf_mmap__consume(struct perf_mmap *map);
 +
 +static inline u64 perf_mmap__read_head(struct perf_mmap *mm)
 +{
 +	return ring_buffer_read_head(mm->base);
 +}
 +
 +static inline void perf_mmap__write_tail(struct perf_mmap *md, u64 tail)
 +{
 +	ring_buffer_write_tail(md->base, tail);
 +}
  
 +union perf_event *perf_mmap__read_forward(struct perf_mmap *map);
++=======
+ union perf_event *perf_mmap__read_forward(struct mmap *map);
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  
 -union perf_event *perf_mmap__read_event(struct mmap *map);
 +union perf_event *perf_mmap__read_event(struct perf_mmap *map);
  
 -int perf_mmap__push(struct mmap *md, void *to,
 -		    int push(struct mmap *map, void *to, void *buf, size_t size));
 +int perf_mmap__push(struct perf_mmap *md, void *to,
 +		    int push(struct perf_mmap *map, void *to, void *buf, size_t size));
  
 -size_t mmap__mmap_len(struct mmap *map);
 +size_t perf_mmap__mmap_len(struct perf_mmap *map);
  
 -int perf_mmap__read_init(struct mmap *md);
 -void perf_mmap__read_done(struct mmap *map);
 +int perf_mmap__read_init(struct perf_mmap *md);
 +void perf_mmap__read_done(struct perf_mmap *map);
  #endif /*__PERF_MMAP_H */
diff --cc tools/perf/util/python.c
index 9c3b43665909,82a4fa6c87bd..000000000000
--- a/tools/perf/util/python.c
+++ b/tools/perf/util/python.c
@@@ -4,6 -4,9 +4,12 @@@
  #include <inttypes.h>
  #include <poll.h>
  #include <linux/err.h>
++<<<<<<< HEAD
++=======
+ #include <perf/cpumap.h>
+ #include <traceevent/event-parse.h>
+ #include <perf/mmap.h>
++>>>>>>> 7728fa0cfaeb (libperf: Adopt perf_mmap__consume() function from tools/perf)
  #include "evlist.h"
  #include "callchain.h"
  #include "evsel.h"
* Unmerged path tools/perf/lib/include/internal/mmap.h
* Unmerged path tools/perf/lib/mmap.c
* Unmerged path tools/perf/arch/x86/tests/perf-time-to-tsc.c
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index 0b1c94b91443..24e5f5ca7805 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -40,6 +40,7 @@
 #include <semaphore.h>
 #include <signal.h>
 #include <math.h>
+#include <perf/mmap.h>
 
 static const char *get_filename_for_perf_kvm(void)
 {
@@ -761,7 +762,7 @@ static s64 perf_kvm__mmap_read_idx(struct perf_kvm_stat *kvm, int idx,
 	while ((event = perf_mmap__read_event(md)) != NULL) {
 		err = perf_evlist__parse_sample_timestamp(evlist, event, &timestamp);
 		if (err) {
-			perf_mmap__consume(md);
+			perf_mmap__consume(&md->core);
 			pr_err("Failed to parse sample\n");
 			return -1;
 		}
@@ -771,7 +772,7 @@ static s64 perf_kvm__mmap_read_idx(struct perf_kvm_stat *kvm, int idx,
 		 * FIXME: Here we can't consume the event, as perf_session__queue_event will
 		 *        point to it, and it'll get possibly overwritten by the kernel.
 		 */
-		perf_mmap__consume(md);
+		perf_mmap__consume(&md->core);
 
 		if (err) {
 			pr_err("Failed to enqueue sample: %d\n", err);
diff --git a/tools/perf/builtin-top.c b/tools/perf/builtin-top.c
index 68f3bdeb4246..9af29dbe8715 100644
--- a/tools/perf/builtin-top.c
+++ b/tools/perf/builtin-top.c
@@ -79,6 +79,7 @@
 #include <linux/err.h>
 
 #include <linux/ctype.h>
+#include <perf/mmap.h>
 
 static volatile int done;
 static volatile int resize;
@@ -886,7 +887,7 @@ static void perf_top__mmap_read_idx(struct perf_top *top, int idx)
 		if (ret)
 			break;
 
-		perf_mmap__consume(md);
+		perf_mmap__consume(&md->core);
 
 		if (top->qe.rotate) {
 			pthread_mutex_lock(&top->qe.mutex);
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 8a34b71ac3d6..f1902c8df762 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -69,6 +69,7 @@
 #include <sys/sysmacros.h>
 
 #include <linux/ctype.h>
+#include <perf/mmap.h>
 
 #ifndef O_CLOEXEC
 # define O_CLOEXEC		02000000
@@ -3692,7 +3693,7 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 			if (err)
 				goto out_disable;
 
-			perf_mmap__consume(md);
+			perf_mmap__consume(&md->core);
 
 			if (interrupted)
 				goto out_disable;
diff --git a/tools/perf/lib/Makefile b/tools/perf/lib/Makefile
index 71da7acddad6..8a138c24c8fa 100644
--- a/tools/perf/lib/Makefile
+++ b/tools/perf/lib/Makefile
@@ -167,8 +167,9 @@ install_headers:
 		$(call do_install,include/perf/cpumap.h,$(prefix)/include/perf,644); \
 		$(call do_install,include/perf/threadmap.h,$(prefix)/include/perf,644); \
 		$(call do_install,include/perf/evlist.h,$(prefix)/include/perf,644); \
-		$(call do_install,include/perf/evsel.h,$(prefix)/include/perf,644);
-		$(call do_install,include/perf/event.h,$(prefix)/include/perf,644);
+		$(call do_install,include/perf/evsel.h,$(prefix)/include/perf,644); \
+		$(call do_install,include/perf/event.h,$(prefix)/include/perf,644); \
+		$(call do_install,include/perf/mmap.h,$(prefix)/include/perf,644);
 
 install_pkgconfig: $(LIBPERF_PC)
 	$(call QUIET_INSTALL, $(LIBPERF_PC)) \
* Unmerged path tools/perf/lib/include/internal/mmap.h
diff --git a/tools/perf/lib/include/perf/mmap.h b/tools/perf/lib/include/perf/mmap.h
new file mode 100644
index 000000000000..d3678d1834d9
--- /dev/null
+++ b/tools/perf/lib/include/perf/mmap.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __LIBPERF_MMAP_H
+#define __LIBPERF_MMAP_H
+
+#include <perf/core.h>
+
+struct perf_mmap;
+
+LIBPERF_API void perf_mmap__consume(struct perf_mmap *map);
+
+#endif /* __LIBPERF_MMAP_H */
* Unmerged path tools/perf/lib/libperf.map
* Unmerged path tools/perf/lib/mmap.c
* Unmerged path tools/perf/tests/backward-ring-buffer.c
diff --git a/tools/perf/tests/bpf.c b/tools/perf/tests/bpf.c
index c9e4cdc4c9c8..f1c26c50090d 100644
--- a/tools/perf/tests/bpf.c
+++ b/tools/perf/tests/bpf.c
@@ -13,6 +13,7 @@
 #include <linux/kernel.h>
 #include <api/fs/fs.h>
 #include <bpf/bpf.h>
+#include <perf/mmap.h>
 #include "tests.h"
 #include "llvm.h"
 #include "debug.h"
* Unmerged path tools/perf/tests/code-reading.c
* Unmerged path tools/perf/tests/keep-tracking.c
* Unmerged path tools/perf/tests/mmap-basic.c
diff --git a/tools/perf/tests/openat-syscall-tp-fields.c b/tools/perf/tests/openat-syscall-tp-fields.c
index 344dc3ac2469..5a2edbad7324 100644
--- a/tools/perf/tests/openat-syscall-tp-fields.c
+++ b/tools/perf/tests/openat-syscall-tp-fields.c
@@ -10,6 +10,7 @@
 #include "tests.h"
 #include "debug.h"
 #include <errno.h>
+#include <perf/mmap.h>
 
 #ifndef O_DIRECTORY
 #define O_DIRECTORY    00200000
@@ -100,7 +101,7 @@ int test__syscall_openat_tp_fields(struct test *test __maybe_unused, int subtest
 				++nr_events;
 
 				if (type != PERF_RECORD_SAMPLE) {
-					perf_mmap__consume(md);
+					perf_mmap__consume(&md->core);
 					continue;
 				}
 
diff --git a/tools/perf/tests/perf-record.c b/tools/perf/tests/perf-record.c
index 07f6bd8ed719..81e018956a67 100644
--- a/tools/perf/tests/perf-record.c
+++ b/tools/perf/tests/perf-record.c
@@ -5,6 +5,7 @@
 #include <pthread.h>
 
 #include <sched.h>
+#include <perf/mmap.h>
 #include "evlist.h"
 #include "evsel.h"
 #include "perf.h"
@@ -274,7 +275,7 @@ int test__PERF_RECORD(struct test *test __maybe_unused, int subtest __maybe_unus
 					++errs;
 				}
 
-				perf_mmap__consume(md);
+				perf_mmap__consume(&md->core);
 			}
 			perf_mmap__read_done(md);
 		}
* Unmerged path tools/perf/tests/sw-clock.c
* Unmerged path tools/perf/tests/switch-tracking.c
* Unmerged path tools/perf/tests/task-exit.c
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/mmap.c
* Unmerged path tools/perf/util/mmap.h
* Unmerged path tools/perf/util/python.c
