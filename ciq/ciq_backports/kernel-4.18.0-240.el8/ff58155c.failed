x86/purgatory: Add -fno-stack-protector

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arvind Sankar <nivedita@alum.mit.edu>
commit ff58155ca4fa7e931f34d948fa09fe14c6a66116
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ff58155c.failed

The purgatory Makefile removes -fstack-protector options if they were
configured in, but does not currently add -fno-stack-protector.

If gcc was configured with the --enable-default-ssp configure option,
this results in the stack protector still being enabled for the
purgatory (absent distro-specific specs files that might disable it
again for freestanding compilations), if the main kernel is being
compiled with stack protection enabled (if it's disabled for the main
kernel, the top-level Makefile will add -fno-stack-protector).

This will break the build since commit
  e4160b2e4b02 ("x86/purgatory: Fail the build if purgatory.ro has missing symbols")
and prior to that would have caused runtime failure when trying to use
kexec.

Explicitly add -fno-stack-protector to avoid this, as done in other
Makefiles that need to disable the stack protector.

	Reported-by: Gabriel C <nix.or.die@googlemail.com>
	Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
	Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
(cherry picked from commit ff58155ca4fa7e931f34d948fa09fe14c6a66116)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/purgatory/Makefile
diff --cc arch/x86/purgatory/Makefile
index f40064fc27a6,088bd764e0b7..000000000000
--- a/arch/x86/purgatory/Makefile
+++ b/arch/x86/purgatory/Makefile
@@@ -9,19 -9,60 +9,30 @@@ PURGATORY_OBJS = $(addprefix $(obj)/,$(
  $(obj)/sha256.o: $(srctree)/lib/crypto/sha256.c FORCE
  	$(call if_changed_rule,cc_o_c)
  
 -CFLAGS_sha256.o := -D__DISABLE_EXPORTS
 -
 -# When linking purgatory.ro with -r unresolved symbols are not checked,
 -# also link a purgatory.chk binary without -r to check for unresolved symbols.
 -PURGATORY_LDFLAGS := -e purgatory_start -nostdlib -z nodefaultlib
 -LDFLAGS_purgatory.ro := -r $(PURGATORY_LDFLAGS)
 -LDFLAGS_purgatory.chk := $(PURGATORY_LDFLAGS)
 -targets += purgatory.ro purgatory.chk
 +LDFLAGS_purgatory.ro := -e purgatory_start -r --no-undefined -nostdlib -z nodefaultlib
 +targets += purgatory.ro
  
 -# Sanitizer, etc. runtimes are unavailable and cannot be linked here.
 -GCOV_PROFILE	:= n
  KASAN_SANITIZE	:= n
 -UBSAN_SANITIZE	:= n
 -KCSAN_SANITIZE	:= n
  KCOV_INSTRUMENT := n
  
++<<<<<<< HEAD
++=======
+ # These are adjustments to the compiler flags used for objects that
+ # make up the standalone purgatory.ro
+ 
+ PURGATORY_CFLAGS_REMOVE := -mcmodel=kernel
+ PURGATORY_CFLAGS := -mcmodel=large -ffreestanding -fno-zero-initialized-in-bss
+ PURGATORY_CFLAGS += $(DISABLE_STACKLEAK_PLUGIN) -DDISABLE_BRANCH_PROFILING
+ PURGATORY_CFLAGS += $(call cc-option,-fno-stack-protector)
+ 
++>>>>>>> ff58155ca4fa (x86/purgatory: Add -fno-stack-protector)
  # Default KBUILD_CFLAGS can have -pg option set when FTRACE is enabled. That
  # in turn leaves some undefined symbols like __fentry__ in purgatory and not
 -# sure how to relocate those.
 -ifdef CONFIG_FUNCTION_TRACER
 -PURGATORY_CFLAGS_REMOVE		+= $(CC_FLAGS_FTRACE)
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector
 -endif
 -
 -ifdef CONFIG_STACKPROTECTOR_STRONG
 -PURGATORY_CFLAGS_REMOVE		+= -fstack-protector-strong
 -endif
 +# sure how to relocate those. Like kexec-tools, use custom flags.
  
 -ifdef CONFIG_RETPOLINE
 -PURGATORY_CFLAGS_REMOVE		+= $(RETPOLINE_CFLAGS)
 -endif
 -
 -CFLAGS_REMOVE_purgatory.o	+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_purgatory.o		+= $(PURGATORY_CFLAGS)
 -
 -CFLAGS_REMOVE_sha256.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_sha256.o			+= $(PURGATORY_CFLAGS)
 -
 -CFLAGS_REMOVE_string.o		+= $(PURGATORY_CFLAGS_REMOVE)
 -CFLAGS_string.o			+= $(PURGATORY_CFLAGS)
 +KBUILD_CFLAGS := -fno-strict-aliasing -Wall -Wstrict-prototypes -fno-zero-initialized-in-bss -fno-builtin -ffreestanding -c -Os -mcmodel=large
 +KBUILD_CFLAGS += -m$(BITS)
 +KBUILD_CFLAGS += $(call cc-option,-fno-PIE)
  
  $(obj)/purgatory.ro: $(PURGATORY_OBJS) FORCE
  		$(call if_changed,ld)
* Unmerged path arch/x86/purgatory/Makefile
