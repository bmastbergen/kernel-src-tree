perf evlist: Rename perf_evlist__disable() to evlist__disable()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit e74676debaae7dcce20a34817ef145478887ba95
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/e74676de.failed

Rename perf_evlist__disable() to evlist__disable(), so we don't have a
name clash when we add perf_evlist__disable() in libperf.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-23-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit e74676debaae7dcce20a34817ef145478887ba95)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/tests/keep-tracking.c
#	tools/perf/tests/switch-tracking.c
#	tools/perf/util/evlist.c
#	tools/perf/util/evlist.h
diff --cc tools/perf/tests/keep-tracking.c
index 17c46f3e6f1e,7bfc859971e5..000000000000
--- a/tools/perf/tests/keep-tracking.c
+++ b/tools/perf/tests/keep-tracking.c
@@@ -146,8 -146,8 +146,13 @@@ int test__keep_tracking(struct test *te
  
  out_err:
  	if (evlist) {
++<<<<<<< HEAD
 +		perf_evlist__disable(evlist);
 +		perf_evlist__delete(evlist);
++=======
+ 		evlist__disable(evlist);
+ 		evlist__delete(evlist);
++>>>>>>> e74676debaae (perf evlist: Rename perf_evlist__disable() to evlist__disable())
  	} else {
  		cpu_map__put(cpus);
  		thread_map__put(threads);
diff --cc tools/perf/tests/switch-tracking.c
index 6cdab5f4812a,d5537edb47db..000000000000
--- a/tools/perf/tests/switch-tracking.c
+++ b/tools/perf/tests/switch-tracking.c
@@@ -566,8 -566,8 +566,13 @@@ int test__switch_tracking(struct test *
  	}
  out:
  	if (evlist) {
++<<<<<<< HEAD
 +		perf_evlist__disable(evlist);
 +		perf_evlist__delete(evlist);
++=======
+ 		evlist__disable(evlist);
+ 		evlist__delete(evlist);
++>>>>>>> e74676debaae (perf evlist: Rename perf_evlist__disable() to evlist__disable())
  	} else {
  		cpu_map__put(cpus);
  		thread_map__put(threads);
diff --cc tools/perf/util/evlist.c
index 4739b7914374,1bedec28e58f..000000000000
--- a/tools/perf/util/evlist.c
+++ b/tools/perf/util/evlist.c
@@@ -344,9 -343,9 +344,13 @@@ static int perf_evlist__nr_threads(stru
  		return thread_map__nr(evlist->threads);
  }
  
++<<<<<<< HEAD
 +void perf_evlist__disable(struct perf_evlist *evlist)
++=======
+ void evlist__disable(struct evlist *evlist)
++>>>>>>> e74676debaae (perf evlist: Rename perf_evlist__disable() to evlist__disable())
  {
 -	struct evsel *pos;
 +	struct perf_evsel *pos;
  
  	evlist__for_each_entry(evlist, pos) {
  		if (pos->disabled || !perf_evsel__is_group_leader(pos) || !pos->fd)
@@@ -370,13 -369,13 +374,17 @@@ void perf_evlist__enable(struct perf_ev
  	evlist->enabled = true;
  }
  
 -void perf_evlist__toggle_enable(struct evlist *evlist)
 +void perf_evlist__toggle_enable(struct perf_evlist *evlist)
  {
++<<<<<<< HEAD
 +	(evlist->enabled ? perf_evlist__disable : perf_evlist__enable)(evlist);
++=======
+ 	(evlist->enabled ? evlist__disable : evlist__enable)(evlist);
++>>>>>>> e74676debaae (perf evlist: Rename perf_evlist__disable() to evlist__disable())
  }
  
 -static int perf_evlist__enable_event_cpu(struct evlist *evlist,
 -					 struct evsel *evsel, int cpu)
 +static int perf_evlist__enable_event_cpu(struct perf_evlist *evlist,
 +					 struct perf_evsel *evsel, int cpu)
  {
  	int thread;
  	int nr_threads = perf_evlist__nr_threads(evlist, evsel);
diff --cc tools/perf/util/evlist.h
index 49354fe24d5f,99621c056d09..000000000000
--- a/tools/perf/util/evlist.h
+++ b/tools/perf/util/evlist.h
@@@ -184,35 -184,35 +184,41 @@@ void perf_evlist__munmap(struct perf_ev
  
  size_t perf_evlist__mmap_size(unsigned long pages);
  
++<<<<<<< HEAD
 +void perf_evlist__disable(struct perf_evlist *evlist);
 +void perf_evlist__enable(struct perf_evlist *evlist);
 +void perf_evlist__toggle_enable(struct perf_evlist *evlist);
++=======
+ void evlist__disable(struct evlist *evlist);
+ void evlist__enable(struct evlist *evlist);
+ void perf_evlist__toggle_enable(struct evlist *evlist);
++>>>>>>> e74676debaae (perf evlist: Rename perf_evlist__disable() to evlist__disable())
  
 -int perf_evlist__enable_event_idx(struct evlist *evlist,
 -				  struct evsel *evsel, int idx);
 +int perf_evlist__enable_event_idx(struct perf_evlist *evlist,
 +				  struct perf_evsel *evsel, int idx);
  
 -void perf_evlist__set_selected(struct evlist *evlist,
 -			       struct evsel *evsel);
 +void perf_evlist__set_selected(struct perf_evlist *evlist,
 +			       struct perf_evsel *evsel);
  
 -void perf_evlist__set_maps(struct evlist *evlist, struct perf_cpu_map *cpus,
 -			   struct perf_thread_map *threads);
 -int perf_evlist__create_maps(struct evlist *evlist, struct target *target);
 -int perf_evlist__apply_filters(struct evlist *evlist, struct evsel **err_evsel);
 +void perf_evlist__set_maps(struct perf_evlist *evlist, struct cpu_map *cpus,
 +			   struct thread_map *threads);
 +int perf_evlist__create_maps(struct perf_evlist *evlist, struct target *target);
 +int perf_evlist__apply_filters(struct perf_evlist *evlist, struct perf_evsel **err_evsel);
  
  void __perf_evlist__set_leader(struct list_head *list);
 -void perf_evlist__set_leader(struct evlist *evlist);
 +void perf_evlist__set_leader(struct perf_evlist *evlist);
  
 -u64 perf_evlist__read_format(struct evlist *evlist);
 -u64 __perf_evlist__combined_sample_type(struct evlist *evlist);
 -u64 perf_evlist__combined_sample_type(struct evlist *evlist);
 -u64 perf_evlist__combined_branch_type(struct evlist *evlist);
 -bool perf_evlist__sample_id_all(struct evlist *evlist);
 -u16 perf_evlist__id_hdr_size(struct evlist *evlist);
 +u64 perf_evlist__read_format(struct perf_evlist *evlist);
 +u64 __perf_evlist__combined_sample_type(struct perf_evlist *evlist);
 +u64 perf_evlist__combined_sample_type(struct perf_evlist *evlist);
 +u64 perf_evlist__combined_branch_type(struct perf_evlist *evlist);
 +bool perf_evlist__sample_id_all(struct perf_evlist *evlist);
 +u16 perf_evlist__id_hdr_size(struct perf_evlist *evlist);
  
 -int perf_evlist__parse_sample(struct evlist *evlist, union perf_event *event,
 +int perf_evlist__parse_sample(struct perf_evlist *evlist, union perf_event *event,
  			      struct perf_sample *sample);
  
 -int perf_evlist__parse_sample_timestamp(struct evlist *evlist,
 +int perf_evlist__parse_sample_timestamp(struct perf_evlist *evlist,
  					union perf_event *event,
  					u64 *timestamp);
  
diff --git a/tools/perf/arch/x86/tests/perf-time-to-tsc.c b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
index 7a7721604b86..8c37942c7484 100644
--- a/tools/perf/arch/x86/tests/perf-time-to-tsc.c
+++ b/tools/perf/arch/x86/tests/perf-time-to-tsc.c
@@ -107,7 +107,7 @@ int test__perf_time_to_tsc(struct test *test __maybe_unused, int subtest __maybe
 	comm2 = "Test COMM 2";
 	CHECK__(prctl(PR_SET_NAME, (unsigned long)comm2, 0, 0, 0));
 
-	perf_evlist__disable(evlist);
+	evlist__disable(evlist);
 
 	for (i = 0; i < evlist->nr_mmaps; i++) {
 		md = &evlist->mmap[i];
diff --git a/tools/perf/builtin-kvm.c b/tools/perf/builtin-kvm.c
index 02e719faa488..aaaa5a8ffd22 100644
--- a/tools/perf/builtin-kvm.c
+++ b/tools/perf/builtin-kvm.c
@@ -994,7 +994,7 @@ static int kvm_events_live_report(struct perf_kvm_stat *kvm)
 			err = fdarray__poll(fda, 100);
 	}
 
-	perf_evlist__disable(kvm->evlist);
+	evlist__disable(kvm->evlist);
 
 	if (err == 0) {
 		sort_result(kvm);
diff --git a/tools/perf/builtin-record.c b/tools/perf/builtin-record.c
index 6dccaf4058f3..a9d87e807de4 100644
--- a/tools/perf/builtin-record.c
+++ b/tools/perf/builtin-record.c
@@ -1606,7 +1606,7 @@ static int __cmd_record(struct record *rec, int argc, const char **argv)
 		 */
 		if (done && !disabled && !target__none(&opts->target)) {
 			trigger_off(&auxtrace_snapshot_trigger);
-			perf_evlist__disable(rec->evlist);
+			evlist__disable(rec->evlist);
 			disabled = true;
 		}
 	}
diff --git a/tools/perf/builtin-stat.c b/tools/perf/builtin-stat.c
index b71c4390d333..3213252607df 100644
--- a/tools/perf/builtin-stat.c
+++ b/tools/perf/builtin-stat.c
@@ -375,7 +375,7 @@ static void disable_counters(void)
 	 * from counting before reading their constituent counters.
 	 */
 	if (!target__none(&target))
-		perf_evlist__disable(evsel_list);
+		evlist__disable(evsel_list);
 }
 
 static volatile int workload_exec_errno;
diff --git a/tools/perf/builtin-trace.c b/tools/perf/builtin-trace.c
index 9f9c869e0f26..15c9e024064c 100644
--- a/tools/perf/builtin-trace.c
+++ b/tools/perf/builtin-trace.c
@@ -3451,7 +3451,7 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 				goto out_disable;
 
 			if (done && !draining) {
-				perf_evlist__disable(evlist);
+				evlist__disable(evlist);
 				draining = true;
 			}
 		}
@@ -3477,7 +3477,7 @@ static int trace__run(struct trace *trace, int argc, const char **argv)
 out_disable:
 	thread__zput(trace->current);
 
-	perf_evlist__disable(evlist);
+	evlist__disable(evlist);
 
 	if (trace->sort_events)
 		ordered_events__flush(&trace->oe.data, OE_FLUSH__FINAL);
diff --git a/tools/perf/tests/backward-ring-buffer.c b/tools/perf/tests/backward-ring-buffer.c
index 1a9c3becf5ff..c197a8449c35 100644
--- a/tools/perf/tests/backward-ring-buffer.c
+++ b/tools/perf/tests/backward-ring-buffer.c
@@ -70,7 +70,7 @@ static int do_test(struct perf_evlist *evlist, int mmap_pages,
 
 	perf_evlist__enable(evlist);
 	testcase();
-	perf_evlist__disable(evlist);
+	evlist__disable(evlist);
 
 	err = count_samples(evlist, sample_count, comm_count);
 	perf_evlist__munmap(evlist);
diff --git a/tools/perf/tests/bpf.c b/tools/perf/tests/bpf.c
index c9e4cdc4c9c8..ea9ff922a4db 100644
--- a/tools/perf/tests/bpf.c
+++ b/tools/perf/tests/bpf.c
@@ -173,7 +173,7 @@ static int do_test(struct bpf_object *obj, int (*func)(void),
 
 	perf_evlist__enable(evlist);
 	(*func)();
-	perf_evlist__disable(evlist);
+	evlist__disable(evlist);
 
 	for (i = 0; i < evlist->nr_mmaps; i++) {
 		union perf_event *event;
diff --git a/tools/perf/tests/code-reading.c b/tools/perf/tests/code-reading.c
index aa6df122b175..c9c7419bb2b3 100644
--- a/tools/perf/tests/code-reading.c
+++ b/tools/perf/tests/code-reading.c
@@ -684,7 +684,7 @@ static int do_test_code_reading(bool try_kcore)
 
 	do_something();
 
-	perf_evlist__disable(evlist);
+	evlist__disable(evlist);
 
 	ret = process_events(machine, evlist, &state);
 	if (ret < 0)
* Unmerged path tools/perf/tests/keep-tracking.c
diff --git a/tools/perf/tests/sw-clock.c b/tools/perf/tests/sw-clock.c
index f9490b237893..4e2796352cfb 100644
--- a/tools/perf/tests/sw-clock.c
+++ b/tools/perf/tests/sw-clock.c
@@ -92,7 +92,7 @@ static int __test__sw_clock_freq(enum perf_sw_ids clock_id)
 	for (i = 0; i < NR_LOOPS; i++)
 		tmp++;
 
-	perf_evlist__disable(evlist);
+	evlist__disable(evlist);
 
 	md = &evlist->mmap[0];
 	if (perf_mmap__read_init(md) < 0)
* Unmerged path tools/perf/tests/switch-tracking.c
* Unmerged path tools/perf/util/evlist.c
* Unmerged path tools/perf/util/evlist.h
