selftests/bpf: test_progs: remove asserts from subtests

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Stanislav Fomichev <sdf@google.com>
commit 62d69f24fe5eca23410b6a21334a7267b0c8838b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/62d69f24.failed

Otherwise they can bring the whole process down.

	Cc: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 62d69f24fe5eca23410b6a21334a7267b0c8838b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/bpf_obj_id.c
#	tools/testing/selftests/bpf/prog_tests/map_lock.c
#	tools/testing/selftests/bpf/prog_tests/spinlock.c
diff --cc tools/testing/selftests/bpf/prog_tests/bpf_obj_id.c
index fb5840a62548,f10029821e16..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/bpf_obj_id.c
+++ b/tools/testing/selftests/bpf/prog_tests/bpf_obj_id.c
@@@ -48,9 -48,8 +48,14 @@@ void test_bpf_obj_id(void
  		/* test_obj_id.o is a dumb prog. It should never fail
  		 * to load.
  		 */
++<<<<<<< HEAD
 +		if (err)
 +			error_cnt++;
 +		assert(!err);
++=======
+ 		if (CHECK_FAIL(err))
+ 			continue;
++>>>>>>> 62d69f24fe5e (selftests/bpf: test_progs: remove asserts from subtests)
  
  		/* Insert a magic value to the map */
  		map_fds[i] = bpf_find_map(__func__, objs[i], "test_map_id");
diff --cc tools/testing/selftests/bpf/prog_tests/map_lock.c
index ee99368c595c,8f91f1881d11..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/map_lock.c
+++ b/tools/testing/selftests/bpf/prog_tests/map_lock.c
@@@ -56,20 -54,22 +56,30 @@@ void test_map_lock(void
  	bpf_map_update_elem(map_fd[0], &key, vars, BPF_F_LOCK);
  
  	for (i = 0; i < 4; i++)
- 		assert(pthread_create(&thread_id[i], NULL,
- 				      &spin_lock_thread, &prog_fd) == 0);
+ 		if (CHECK_FAIL(pthread_create(&thread_id[i], NULL,
+ 					      &spin_lock_thread, &prog_fd)))
+ 			goto close_prog;
  	for (i = 4; i < 6; i++)
- 		assert(pthread_create(&thread_id[i], NULL,
- 				      &parallel_map_access, &map_fd[i - 4]) == 0);
+ 		if (CHECK_FAIL(pthread_create(&thread_id[i], NULL,
+ 					      &parallel_map_access,
+ 					      &map_fd[i - 4])))
+ 			goto close_prog;
  	for (i = 0; i < 4; i++)
- 		assert(pthread_join(thread_id[i], &ret) == 0 &&
- 		       ret == (void *)&prog_fd);
+ 		if (CHECK_FAIL(pthread_join(thread_id[i], &ret) ||
+ 			       ret != (void *)&prog_fd))
+ 			goto close_prog;
  	for (i = 4; i < 6; i++)
++<<<<<<< HEAD
 +		assert(pthread_join(thread_id[i], &ret) == 0 &&
 +		       ret == (void *)&map_fd[i - 4]);
 +	goto close_prog_noerr;
++=======
+ 		if (CHECK_FAIL(pthread_join(thread_id[i], &ret) ||
+ 			       ret != (void *)&map_fd[i - 4]))
+ 			goto close_prog;
++>>>>>>> 62d69f24fe5e (selftests/bpf: test_progs: remove asserts from subtests)
  close_prog:
 +	error_cnt++;
 +close_prog_noerr:
  	bpf_object__close(obj);
  }
diff --cc tools/testing/selftests/bpf/prog_tests/spinlock.c
index 114ebe6a438e,1ae00cd3174e..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/spinlock.c
+++ b/tools/testing/selftests/bpf/prog_tests/spinlock.c
@@@ -16,14 -16,14 +16,25 @@@ void test_spinlock(void
  		goto close_prog;
  	}
  	for (i = 0; i < 4; i++)
++<<<<<<< HEAD
 +		assert(pthread_create(&thread_id[i], NULL,
 +				      &spin_lock_thread, &prog_fd) == 0);
 +	for (i = 0; i < 4; i++)
 +		assert(pthread_join(thread_id[i], &ret) == 0 &&
 +		       ret == (void *)&prog_fd);
 +	goto close_prog_noerr;
++=======
+ 		if (CHECK_FAIL(pthread_create(&thread_id[i], NULL,
+ 					      &spin_lock_thread, &prog_fd)))
+ 			goto close_prog;
+ 
+ 	for (i = 0; i < 4; i++)
+ 		if (CHECK_FAIL(pthread_join(thread_id[i], &ret) ||
+ 			       ret != (void *)&prog_fd))
+ 			goto close_prog;
++>>>>>>> 62d69f24fe5e (selftests/bpf: test_progs: remove asserts from subtests)
  close_prog:
 +	error_cnt++;
 +close_prog_noerr:
  	bpf_object__close(obj);
  }
* Unmerged path tools/testing/selftests/bpf/prog_tests/bpf_obj_id.c
* Unmerged path tools/testing/selftests/bpf/prog_tests/map_lock.c
* Unmerged path tools/testing/selftests/bpf/prog_tests/spinlock.c
diff --git a/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id.c b/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id.c
index ac44fda84833..d841dced971f 100644
--- a/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id.c
+++ b/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id.c
@@ -51,9 +51,10 @@ void test_stacktrace_build_id(void)
 		  "err %d errno %d\n", err, errno))
 		goto disable_pmu;
 
-	assert(system("dd if=/dev/urandom of=/dev/zero count=4 2> /dev/null")
-	       == 0);
-	assert(system("./urandom_read") == 0);
+	if (CHECK_FAIL(system("dd if=/dev/urandom of=/dev/zero count=4 2> /dev/null")))
+		goto disable_pmu;
+	if (CHECK_FAIL(system("./urandom_read")))
+		goto disable_pmu;
 	/* disable stack trace collection */
 	key = 0;
 	val = 1;
diff --git a/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id_nmi.c b/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id_nmi.c
index 9557b7dfb782..f62aa0eb959b 100644
--- a/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id_nmi.c
+++ b/tools/testing/selftests/bpf/prog_tests/stacktrace_build_id_nmi.c
@@ -82,9 +82,10 @@ void test_stacktrace_build_id_nmi(void)
 		  "err %d errno %d\n", err, errno))
 		goto disable_pmu;
 
-	assert(system("dd if=/dev/urandom of=/dev/zero count=4 2> /dev/null")
-	       == 0);
-	assert(system("taskset 0x1 ./urandom_read 100000") == 0);
+	if (CHECK_FAIL(system("dd if=/dev/urandom of=/dev/zero count=4 2> /dev/null")))
+		goto disable_pmu;
+	if (CHECK_FAIL(system("taskset 0x1 ./urandom_read 100000")))
+		goto disable_pmu;
 	/* disable stack trace collection */
 	key = 0;
 	val = 1;
