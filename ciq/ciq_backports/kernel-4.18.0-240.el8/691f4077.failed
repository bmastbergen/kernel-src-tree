gve: Replace zero-length array with flexible-array member

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
Rebuild_CHGLOG: - [pci] hv: Replace zero-length array with flexible-array member (Mohammed Gamal) [1793636]
Rebuild_FUZZ: 97.35%
commit-author Gustavo A. R. Silva <gustavoars@kernel.org>
commit 691f4077d5604af4067ebbea4a27f05e760557b7
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/691f4077.failed

There is a regular need in the kernel to provide a way to declare having a
dynamically sized set of trailing elements in a structure.  Kernel code
should always use “flexible array members”[1] for these cases.  The
older style of one-element or zero-length arrays should no longer be
used[2].

Refactor the code according to the use of a flexible-array member in
struct gve_stats_report, instead of a zero-length array, and use the
struct_size() helper to calculate the size for the resource allocation.

[1] https://en.wikipedia.org/wiki/Flexible_array_member
[2] https://www.kernel.org/doc/html/v5.9/process/deprecated.html#zero-length-and-one-element-arrays

	Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
(cherry picked from commit 691f4077d5604af4067ebbea4a27f05e760557b7)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/google/gve/gve_adminq.h
#	drivers/net/ethernet/google/gve/gve_main.c
diff --cc drivers/net/ethernet/google/gve/gve_adminq.h
index 4dfa06edc0f8,015796a20118..000000000000
--- a/drivers/net/ethernet/google/gve/gve_adminq.h
+++ b/drivers/net/ethernet/google/gve/gve_adminq.h
@@@ -172,6 -174,51 +172,54 @@@ struct gve_adminq_set_driver_parameter 
  
  static_assert(sizeof(struct gve_adminq_set_driver_parameter) == 16);
  
++<<<<<<< HEAD
++=======
+ struct gve_adminq_report_stats {
+ 	__be64 stats_report_len;
+ 	__be64 stats_report_addr;
+ 	__be64 interval;
+ };
+ 
+ static_assert(sizeof(struct gve_adminq_report_stats) == 24);
+ 
+ struct gve_adminq_report_link_speed {
+ 	__be64 link_speed_address;
+ };
+ 
+ static_assert(sizeof(struct gve_adminq_report_link_speed) == 8);
+ 
+ struct stats {
+ 	__be32 stat_name;
+ 	__be32 queue_id;
+ 	__be64 value;
+ };
+ 
+ static_assert(sizeof(struct stats) == 16);
+ 
+ struct gve_stats_report {
+ 	__be64 written_count;
+ 	struct stats stats[];
+ };
+ 
+ static_assert(sizeof(struct gve_stats_report) == 8);
+ 
+ enum gve_stat_names {
+ 	// stats from gve
+ 	TX_WAKE_CNT			= 1,
+ 	TX_STOP_CNT			= 2,
+ 	TX_FRAMES_SENT			= 3,
+ 	TX_BYTES_SENT			= 4,
+ 	TX_LAST_COMPLETION_PROCESSED	= 5,
+ 	RX_NEXT_EXPECTED_SEQUENCE	= 6,
+ 	RX_BUFFERS_POSTED		= 7,
+ 	// stats from NIC
+ 	RX_QUEUE_DROP_CNT		= 65,
+ 	RX_NO_BUFFERS_POSTED		= 66,
+ 	RX_DROPS_PACKET_OVER_MRU	= 67,
+ 	RX_DROPS_INVALID_CHECKSUM	= 68,
+ };
+ 
++>>>>>>> 691f4077d560 (gve: Replace zero-length array with flexible-array member)
  union gve_adminq_command {
  	struct {
  		__be32 opcode;
diff --cc drivers/net/ethernet/google/gve/gve_main.c
index 9b7a8db9860f,02e7d74779f4..000000000000
--- a/drivers/net/ethernet/google/gve/gve_main.c
+++ b/drivers/net/ethernet/google/gve/gve_main.c
@@@ -78,6 -78,65 +78,68 @@@ static void gve_free_counter_array(stru
  	priv->counter_array = NULL;
  }
  
++<<<<<<< HEAD
++=======
+ /* NIC requests to report stats */
+ static void gve_stats_report_task(struct work_struct *work)
+ {
+ 	struct gve_priv *priv = container_of(work, struct gve_priv,
+ 					     stats_report_task);
+ 	if (gve_get_do_report_stats(priv)) {
+ 		gve_handle_report_stats(priv);
+ 		gve_clear_do_report_stats(priv);
+ 	}
+ }
+ 
+ static void gve_stats_report_schedule(struct gve_priv *priv)
+ {
+ 	if (!gve_get_probe_in_progress(priv) &&
+ 	    !gve_get_reset_in_progress(priv)) {
+ 		gve_set_do_report_stats(priv);
+ 		queue_work(priv->gve_wq, &priv->stats_report_task);
+ 	}
+ }
+ 
+ static void gve_stats_report_timer(struct timer_list *t)
+ {
+ 	struct gve_priv *priv = from_timer(priv, t, stats_report_timer);
+ 
+ 	mod_timer(&priv->stats_report_timer,
+ 		  round_jiffies(jiffies +
+ 		  msecs_to_jiffies(priv->stats_report_timer_period)));
+ 	gve_stats_report_schedule(priv);
+ }
+ 
+ static int gve_alloc_stats_report(struct gve_priv *priv)
+ {
+ 	int tx_stats_num, rx_stats_num;
+ 
+ 	tx_stats_num = (GVE_TX_STATS_REPORT_NUM + NIC_TX_STATS_REPORT_NUM) *
+ 		       priv->tx_cfg.num_queues;
+ 	rx_stats_num = (GVE_RX_STATS_REPORT_NUM + NIC_RX_STATS_REPORT_NUM) *
+ 		       priv->rx_cfg.num_queues;
+ 	priv->stats_report_len = struct_size(priv->stats_report, stats,
+ 					     tx_stats_num + rx_stats_num);
+ 	priv->stats_report =
+ 		dma_alloc_coherent(&priv->pdev->dev, priv->stats_report_len,
+ 				   &priv->stats_report_bus, GFP_KERNEL);
+ 	if (!priv->stats_report)
+ 		return -ENOMEM;
+ 	/* Set up timer for the report-stats task */
+ 	timer_setup(&priv->stats_report_timer, gve_stats_report_timer, 0);
+ 	priv->stats_report_timer_period = GVE_STATS_REPORT_TIMER_PERIOD;
+ 	return 0;
+ }
+ 
+ static void gve_free_stats_report(struct gve_priv *priv)
+ {
+ 	del_timer_sync(&priv->stats_report_timer);
+ 	dma_free_coherent(&priv->pdev->dev, priv->stats_report_len,
+ 			  priv->stats_report, priv->stats_report_bus);
+ 	priv->stats_report = NULL;
+ }
+ 
++>>>>>>> 691f4077d560 (gve: Replace zero-length array with flexible-array member)
  static irqreturn_t gve_mgmnt_intr(int irq, void *arg)
  {
  	struct gve_priv *priv = arg;
* Unmerged path drivers/net/ethernet/google/gve/gve_adminq.h
* Unmerged path drivers/net/ethernet/google/gve/gve_main.c
