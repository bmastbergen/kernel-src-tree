net/mlx5: Add per-namespace flow table default miss action support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Mark Zhang <markz@mellanox.com>
commit f66ad830b11406cdff84e7d8656a0a9e34b0b606
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/f66ad830.failed

Currently all the namespaces under the same steering domain share the same
default table miss action, however in some situations (e.g., RDMA RX)
different actions are required. This patch adds a per-namespace default
table miss action instead of using the miss action of the steering domain.

	Signed-off-by: Mark Zhang <markz@mellanox.com>
	Reviewed-by: Mark Bloch <markb@mellanox.com>
	Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
(cherry picked from commit f66ad830b11406cdff84e7d8656a0a9e34b0b606)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --cc drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
index 26d0333080e4,fb3cfdfbafbe..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
@@@ -134,30 -136,37 +136,64 @@@ static struct init_tree_node 
  } root_fs = {
  	.type = FS_TYPE_NAMESPACE,
  	.ar_size = 7,
++<<<<<<< HEAD
 +	.children = (struct init_tree_node[]) {
 +		ADD_PRIO(0, BY_PASS_MIN_LEVEL, 0,
 +			 FS_CHAINING_CAPS,
 +			 ADD_NS(ADD_MULTIPLE_PRIO(MLX5_BY_PASS_NUM_PRIOS,
 +						  BY_PASS_PRIO_NUM_LEVELS))),
 +		ADD_PRIO(0, LAG_MIN_LEVEL, 0,
 +			 FS_CHAINING_CAPS,
 +			 ADD_NS(ADD_MULTIPLE_PRIO(LAG_NUM_PRIOS,
 +						  LAG_PRIO_NUM_LEVELS))),
 +		ADD_PRIO(0, OFFLOADS_MIN_LEVEL, 0, FS_CHAINING_CAPS,
 +			 ADD_NS(ADD_MULTIPLE_PRIO(OFFLOADS_NUM_PRIOS, OFFLOADS_MAX_FT))),
 +		ADD_PRIO(0, ETHTOOL_MIN_LEVEL, 0,
 +			 FS_CHAINING_CAPS,
 +			 ADD_NS(ADD_MULTIPLE_PRIO(ETHTOOL_NUM_PRIOS,
 +						  ETHTOOL_PRIO_NUM_LEVELS))),
 +		ADD_PRIO(0, KERNEL_MIN_LEVEL, 0, {},
 +			 ADD_NS(ADD_MULTIPLE_PRIO(KERNEL_NIC_TC_NUM_PRIOS, KERNEL_NIC_TC_NUM_LEVELS),
 +				ADD_MULTIPLE_PRIO(KERNEL_NIC_NUM_PRIOS,
 +						  KERNEL_NIC_PRIO_NUM_LEVELS))),
 +		ADD_PRIO(0, BY_PASS_MIN_LEVEL, 0,
 +			 FS_CHAINING_CAPS,
 +			 ADD_NS(ADD_MULTIPLE_PRIO(LEFTOVERS_NUM_PRIOS, LEFTOVERS_NUM_LEVELS))),
 +		ADD_PRIO(0, ANCHOR_MIN_LEVEL, 0, {},
 +			 ADD_NS(ADD_MULTIPLE_PRIO(ANCHOR_NUM_PRIOS, ANCHOR_NUM_LEVELS))),
++=======
+ 	  .children = (struct init_tree_node[]){
+ 		  ADD_PRIO(0, BY_PASS_MIN_LEVEL, 0, FS_CHAINING_CAPS,
+ 			   ADD_NS(MLX5_FLOW_TABLE_MISS_ACTION_DEF,
+ 				  ADD_MULTIPLE_PRIO(MLX5_BY_PASS_NUM_PRIOS,
+ 						    BY_PASS_PRIO_NUM_LEVELS))),
+ 		  ADD_PRIO(0, LAG_MIN_LEVEL, 0, FS_CHAINING_CAPS,
+ 			   ADD_NS(MLX5_FLOW_TABLE_MISS_ACTION_DEF,
+ 				  ADD_MULTIPLE_PRIO(LAG_NUM_PRIOS,
+ 						    LAG_PRIO_NUM_LEVELS))),
+ 		  ADD_PRIO(0, OFFLOADS_MIN_LEVEL, 0, {},
+ 			   ADD_NS(MLX5_FLOW_TABLE_MISS_ACTION_DEF,
+ 				  ADD_MULTIPLE_PRIO(OFFLOADS_NUM_PRIOS,
+ 						    OFFLOADS_MAX_FT))),
+ 		  ADD_PRIO(0, ETHTOOL_MIN_LEVEL, 0, FS_CHAINING_CAPS,
+ 			   ADD_NS(MLX5_FLOW_TABLE_MISS_ACTION_DEF,
+ 				  ADD_MULTIPLE_PRIO(ETHTOOL_NUM_PRIOS,
+ 						    ETHTOOL_PRIO_NUM_LEVELS))),
+ 		  ADD_PRIO(0, KERNEL_MIN_LEVEL, 0, {},
+ 			   ADD_NS(MLX5_FLOW_TABLE_MISS_ACTION_DEF,
+ 				  ADD_MULTIPLE_PRIO(KERNEL_NIC_TC_NUM_PRIOS,
+ 						    KERNEL_NIC_TC_NUM_LEVELS),
+ 				  ADD_MULTIPLE_PRIO(KERNEL_NIC_NUM_PRIOS,
+ 						    KERNEL_NIC_PRIO_NUM_LEVELS))),
+ 		  ADD_PRIO(0, BY_PASS_MIN_LEVEL, 0, FS_CHAINING_CAPS,
+ 			   ADD_NS(MLX5_FLOW_TABLE_MISS_ACTION_DEF,
+ 				  ADD_MULTIPLE_PRIO(LEFTOVERS_NUM_PRIOS,
+ 						    LEFTOVERS_NUM_LEVELS))),
+ 		  ADD_PRIO(0, ANCHOR_MIN_LEVEL, 0, {},
+ 			   ADD_NS(MLX5_FLOW_TABLE_MISS_ACTION_DEF,
+ 				  ADD_MULTIPLE_PRIO(ANCHOR_NUM_PRIOS,
+ 						    ANCHOR_NUM_LEVELS))),
++>>>>>>> f66ad830b114 (net/mlx5: Add per-namespace flow table default miss action support)
  	}
  };
  
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c b/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
index a848272a60a1..3c816e81f8d9 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_cmd.c
@@ -226,7 +226,7 @@ static int mlx5_cmd_create_flow_table(struct mlx5_flow_root_namespace *ns,
 		} else {
 			MLX5_SET(create_flow_table_in, in,
 				 flow_table_context.table_miss_action,
-				 ns->def_miss_action);
+				 ft->def_miss_action);
 		}
 		break;
 
@@ -306,7 +306,7 @@ static int mlx5_cmd_modify_flow_table(struct mlx5_flow_root_namespace *ns,
 		} else {
 			MLX5_SET(modify_flow_table_in, in,
 				 flow_table_context.table_miss_action,
-				 ns->def_miss_action);
+				 ft->def_miss_action);
 		}
 	}
 
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/fs_core.c
diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 51e1bdb49ff8..c2621b911563 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -171,6 +171,7 @@ struct mlx5_flow_table {
 	struct list_head		fwd_rules;
 	u32				flags;
 	struct rhltable			fgs_hash;
+	enum mlx5_flow_table_miss_action def_miss_action;
 };
 
 struct mlx5_ft_underlay_qp {
@@ -218,6 +219,7 @@ struct fs_prio {
 struct mlx5_flow_namespace {
 	/* parent == NULL => root ns */
 	struct	fs_node			node;
+	enum mlx5_flow_table_miss_action def_miss_action;
 };
 
 struct mlx5_flow_group_mask {
@@ -249,7 +251,6 @@ struct mlx5_flow_root_namespace {
 	struct mutex			chain_lock;
 	struct list_head		underlay_qpns;
 	const struct mlx5_flow_cmds	*cmds;
-	enum mlx5_flow_table_miss_action def_miss_action;
 };
 
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev);
