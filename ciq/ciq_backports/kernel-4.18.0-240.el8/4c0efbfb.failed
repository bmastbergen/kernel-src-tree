pinctrl: msm: Add ability for drivers to supply a reserved GPIO list

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Lee Jones <lee.jones@linaro.org>
commit 4c0efbfb2669aa99e43e5deee30f39afd69cad65
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4c0efbfb.failed

When booting MSM based platforms with Device Tree or some ACPI
implementations, it is possible to provide a list of reserved pins
via the 'gpio-reserved-ranges' and 'gpios' properties respectively.
However some ACPI tables are not populated with this information,
thus it has to come from a knowledgable device driver instead.

Here we provide the MSM common driver with additional support to
parse this informtion and correctly populate the widely used
'valid_mask'.

	Signed-off-by: Lee Jones <lee.jones@linaro.org>
	Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
	Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
(cherry picked from commit 4c0efbfb2669aa99e43e5deee30f39afd69cad65)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/pinctrl/qcom/pinctrl-msm.h
diff --cc drivers/pinctrl/qcom/pinctrl-msm.h
index 9b9feea540ff,23b93ae92269..000000000000
--- a/drivers/pinctrl/qcom/pinctrl-msm.h
+++ b/drivers/pinctrl/qcom/pinctrl-msm.h
@@@ -117,8 -119,13 +117,14 @@@ struct msm_pinctrl_soc_data 
  	unsigned ngroups;
  	unsigned ngpios;
  	bool pull_no_keeper;
++<<<<<<< HEAD
++=======
+ 	const char *const *tiles;
+ 	unsigned int ntiles;
+ 	const int *reserved_gpios;
++>>>>>>> 4c0efbfb2669 (pinctrl: msm: Add ability for drivers to supply a reserved GPIO list)
  };
  
 -extern const struct dev_pm_ops msm_pinctrl_dev_pm_ops;
 -
  int msm_pinctrl_probe(struct platform_device *pdev,
  		      const struct msm_pinctrl_soc_data *soc_data);
  int msm_pinctrl_remove(struct platform_device *pdev);
diff --git a/drivers/pinctrl/qcom/pinctrl-msm.c b/drivers/pinctrl/qcom/pinctrl-msm.c
index d4d949b548bb..7c63edc9cda1 100644
--- a/drivers/pinctrl/qcom/pinctrl-msm.c
+++ b/drivers/pinctrl/qcom/pinctrl-msm.c
@@ -564,8 +564,23 @@ static int msm_gpio_init_valid_mask(struct gpio_chip *chip)
 	int ret;
 	unsigned int len, i;
 	unsigned int max_gpios = pctrl->soc->ngpios;
+	const int *reserved = pctrl->soc->reserved_gpios;
 	u16 *tmp;
 
+	/* Driver provided reserved list overrides DT and ACPI */
+	if (reserved) {
+		bitmap_fill(chip->valid_mask, max_gpios);
+		for (i = 0; reserved[i] >= 0; i++) {
+			if (i >= max_gpios || reserved[i] >= max_gpios) {
+				dev_err(pctrl->dev, "invalid list of reserved GPIOs\n");
+				return -EINVAL;
+			}
+			clear_bit(reserved[i], chip->valid_mask);
+		}
+
+		return 0;
+	}
+
 	/* The number of GPIOs in the ACPI tables */
 	len = ret = device_property_read_u16_array(pctrl->dev, "gpios", NULL,
 						   0);
@@ -862,6 +877,9 @@ static void msm_gpio_irq_handler(struct irq_desc *desc)
 
 static bool msm_gpio_needs_valid_mask(struct msm_pinctrl *pctrl)
 {
+	if (pctrl->soc->reserved_gpios)
+		return true;
+
 	return device_property_read_u16_array(pctrl->dev, "gpios", NULL, 0) > 0;
 }
 
* Unmerged path drivers/pinctrl/qcom/pinctrl-msm.h
