Bluetooth: Auto tune if input MTU is set to 0

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
commit 4b6e228e297b73451f3a4b12fb7d0b24d9d32e6f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/4b6e228e.failed

This enables the code to set the input MTU using the underline link
packet types when set to 0, previously this would likely be rejected by
the remote peer since it would be bellow the minimal of 48 for BR/EDR
or 23 for LE, that way it shall be safe to use 0 without causing any
side effects.

This is convenient for the likes of A2DP transport, see:

https://habr.com/en/post/456182/

	Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
	Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
(cherry picked from commit 4b6e228e297b73451f3a4b12fb7d0b24d9d32e6f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/bluetooth/l2cap_core.c
diff --cc net/bluetooth/l2cap_core.c
index 02e46357f85e,1bca608e0170..000000000000
--- a/net/bluetooth/l2cap_core.c
+++ b/net/bluetooth/l2cap_core.c
@@@ -1282,6 -1289,11 +1282,14 @@@ static void l2cap_le_connect(struct l2c
  	if (test_and_set_bit(FLAG_LE_CONN_REQ_SENT, &chan->flags))
  		return;
  
++<<<<<<< HEAD
++=======
+ 	if (!chan->imtu)
+ 		chan->imtu = chan->conn->mtu;
+ 
+ 	l2cap_le_flowctl_init(chan, 0);
+ 
++>>>>>>> 4b6e228e297b (Bluetooth: Auto tune if input MTU is set to 0)
  	req.psm     = chan->psm;
  	req.scid    = cpu_to_le16(chan->scid);
  	req.mtu     = cpu_to_le16(chan->imtu);
* Unmerged path net/bluetooth/l2cap_core.c
