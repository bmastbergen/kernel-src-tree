iommu: Don't take group reference in iommu_alloc_default_domain()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Joerg Roedel <jroedel@suse.de>
commit 79659190ee972c05498c338e48d80cb45490c533
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/79659190.failed

The iommu_alloc_default_domain() function takes a reference to an IOMMU
group without releasing it. This causes the group to never be released,
with undefined side effects.

The function has only one call-site, which takes a group reference on
its own, so to fix this leak, do not take another reference in
iommu_alloc_default_domain() and pass the group as a function parameter
instead.

Fixes: 6e1aa2049154 ("iommu: Move default domain allocation to iommu_probe_device()")
	Reported-by: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
	Signed-off-by: Joerg Roedel <jroedel@suse.de>
	Tested-by: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
	Cc: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
Link: https://lore.kernel.org/r/20200525130122.380-1-joro@8bytes.org
Reference: https://lore.kernel.org/lkml/20200522130145.30067-1-saiprakash.ranjan@codeaurora.org/
(cherry picked from commit 79659190ee972c05498c338e48d80cb45490c533)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/iommu/iommu.c
diff --cc drivers/iommu/iommu.c
index 7997fcb701e0,298397721144..000000000000
--- a/drivers/iommu/iommu.c
+++ b/drivers/iommu/iommu.c
@@@ -91,6 -80,20 +91,23 @@@ static bool iommu_cmd_line_dma_api(void
  	return !!(iommu_cmd_line & IOMMU_CMD_LINE_DMA_API);
  }
  
++<<<<<<< HEAD
++=======
+ static int iommu_alloc_default_domain(struct iommu_group *group,
+ 				      struct device *dev);
+ static struct iommu_domain *__iommu_domain_alloc(struct bus_type *bus,
+ 						 unsigned type);
+ static int __iommu_attach_device(struct iommu_domain *domain,
+ 				 struct device *dev);
+ static int __iommu_attach_group(struct iommu_domain *domain,
+ 				struct iommu_group *group);
+ static void __iommu_detach_group(struct iommu_domain *domain,
+ 				 struct iommu_group *group);
+ static int iommu_create_device_direct_mappings(struct iommu_group *group,
+ 					       struct device *dev);
+ static struct iommu_group *iommu_group_get_for_dev(struct device *dev);
+ 
++>>>>>>> 79659190ee97 (iommu: Don't take group reference in iommu_alloc_default_domain())
  #define IOMMU_GROUP_ATTR(_name, _mode, _show, _store)		\
  struct iommu_group_attribute iommu_group_attr_##_name =		\
  	__ATTR(_name, _mode, _show, _store)
@@@ -165,14 -245,46 +182,48 @@@ void iommu_device_unregister(struct iom
  int iommu_probe_device(struct device *dev)
  {
  	const struct iommu_ops *ops = dev->bus->iommu_ops;
 -	struct iommu_group *group;
 -	int ret;
 +	int ret = -EINVAL;
  
 -	ret = __iommu_probe_device(dev, NULL);
 -	if (ret)
 -		goto err_out;
 +	WARN_ON(dev->iommu_group);
 +
++<<<<<<< HEAD
 +	if (ops)
 +		ret = ops->add_device(dev);
  
++=======
+ 	group = iommu_group_get(dev);
+ 	if (!group)
+ 		goto err_release;
+ 
+ 	/*
+ 	 * Try to allocate a default domain - needs support from the
+ 	 * IOMMU driver. There are still some drivers which don't
+ 	 * support default domains, so the return value is not yet
+ 	 * checked.
+ 	 */
+ 	iommu_alloc_default_domain(group, dev);
+ 
+ 	if (group->default_domain)
+ 		ret = __iommu_attach_device(group->default_domain, dev);
+ 
+ 	iommu_create_device_direct_mappings(group, dev);
+ 
+ 	iommu_group_put(group);
+ 
+ 	if (ret)
+ 		goto err_release;
+ 
+ 	if (ops->probe_finalize)
+ 		ops->probe_finalize(dev);
+ 
+ 	return 0;
+ 
+ err_release:
+ 	iommu_release_device(dev);
+ 
+ err_out:
++>>>>>>> 79659190ee97 (iommu: Don't take group reference in iommu_alloc_default_domain())
  	return ret;
 -
  }
  
  void iommu_release_device(struct device *dev)
@@@ -1155,6 -1479,19 +1206,22 @@@ static int iommu_alloc_default_domain(s
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int iommu_alloc_default_domain(struct iommu_group *group,
+ 				      struct device *dev)
+ {
+ 	unsigned int type;
+ 
+ 	if (group->default_domain)
+ 		return 0;
+ 
+ 	type = iommu_get_def_domain_type(dev);
+ 
+ 	return iommu_group_alloc_default_domain(dev->bus, group, type);
+ }
+ 
++>>>>>>> 79659190ee97 (iommu: Don't take group reference in iommu_alloc_default_domain())
  /**
   * iommu_group_get_for_dev - Find or create the IOMMU group for a device
   * @dev: target device
* Unmerged path drivers/iommu/iommu.c
