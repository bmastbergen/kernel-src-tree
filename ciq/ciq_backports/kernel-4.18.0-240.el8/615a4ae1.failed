KVM: x86: Make kvm_mpx_supported() an inline function

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 615a4ae1c74c2997f19189412fae0326baaf1bff
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/615a4ae1.failed

Expose kvm_mpx_supported() as a static inline so that it can be inlined
in kvm_intel.ko.

No functional change intended.

	Reviewed-by: Xiaoyao Li <xiaoyao.li@intel.com>
	Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
(cherry picked from commit 615a4ae1c74c2997f19189412fae0326baaf1bff)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/cpuid.c
diff --cc arch/x86/kvm/cpuid.c
index 0254041b8e5b,1ff16300a468..000000000000
--- a/arch/x86/kvm/cpuid.c
+++ b/arch/x86/kvm/cpuid.c
@@@ -48,23 -45,6 +48,26 @@@ static u32 xstate_required_size(u64 xst
  	return ret;
  }
  
++<<<<<<< HEAD
 +bool kvm_mpx_supported(void)
 +{
 +	return ((host_xcr0 & (XFEATURE_MASK_BNDREGS | XFEATURE_MASK_BNDCSR))
 +		 && kvm_x86_ops->mpx_supported());
 +}
 +EXPORT_SYMBOL_GPL(kvm_mpx_supported);
 +
 +u64 kvm_supported_xcr0(void)
 +{
 +	u64 xcr0 = KVM_SUPPORTED_XCR0 & host_xcr0;
 +
 +	if (!kvm_mpx_supported())
 +		xcr0 &= ~(XFEATURE_MASK_BNDREGS | XFEATURE_MASK_BNDCSR);
 +
 +	return xcr0;
 +}
 +
++=======
++>>>>>>> 615a4ae1c74c (KVM: x86: Make kvm_mpx_supported() an inline function)
  #define F feature_bit
  
  int kvm_update_cpuid(struct kvm_vcpu *vcpu)
* Unmerged path arch/x86/kvm/cpuid.c
diff --git a/arch/x86/kvm/cpuid.h b/arch/x86/kvm/cpuid.h
index 7366c618aa04..c1ac0995843d 100644
--- a/arch/x86/kvm/cpuid.h
+++ b/arch/x86/kvm/cpuid.h
@@ -7,7 +7,6 @@
 #include <asm/processor.h>
 
 int kvm_update_cpuid(struct kvm_vcpu *vcpu);
-bool kvm_mpx_supported(void);
 struct kvm_cpuid_entry2 *kvm_find_cpuid_entry(struct kvm_vcpu *vcpu,
 					      u32 function, u32 index);
 int kvm_dev_ioctl_get_cpuid(struct kvm_cpuid2 *cpuid,
diff --git a/arch/x86/kvm/x86.h b/arch/x86/kvm/x86.h
index 916e17e33414..ef5c089cffeb 100644
--- a/arch/x86/kvm/x86.h
+++ b/arch/x86/kvm/x86.h
@@ -278,6 +278,12 @@ extern u64 host_xcr0;
 
 extern u64 kvm_supported_xcr0(void);
 
+static inline bool kvm_mpx_supported(void)
+{
+	return (supported_xcr0 & (XFEATURE_MASK_BNDREGS | XFEATURE_MASK_BNDCSR))
+		== (XFEATURE_MASK_BNDREGS | XFEATURE_MASK_BNDCSR);
+}
+
 extern unsigned int min_timer_period_us;
 
 extern bool enable_vmware_backdoor;
