selftests/bpf: Initialize duration variable before using

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author John Sperbeck <jsperbeck@google.com>
commit 1a6fa10640d97e16d4184fa1c24aa8c3337d4653
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/1a6fa106.failed

The 'duration' variable is referenced in the CHECK() macro, and there are
some uses of the macro before 'duration' is set.  The clang compiler
(validly) complains about this.

Sample error:

.../selftests/bpf/prog_tests/fexit_test.c:23:6: warning: variable 'duration' is uninitialized when used here [-Wuninitialized]
        if (CHECK(err, "prog_load sched cls", "err %d errno %d\n", err, errno))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.../selftests/bpf/test_progs.h:134:25: note: expanded from macro 'CHECK'
        if (CHECK(err, "prog_load sched cls", "err %d errno %d\n", err, errno))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        _CHECK(condition, tag, duration, format)
                               ^~~~~~~~

	Signed-off-by: John Sperbeck <jsperbeck@google.com>
	Signed-off-by: Stanislav Fomichev <sdf@google.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20200123235144.93610-1-sdf@google.com
(cherry picked from commit 1a6fa10640d97e16d4184fa1c24aa8c3337d4653)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/prog_tests/fentry_test.c
diff --cc tools/testing/selftests/bpf/prog_tests/fentry_test.c
index 9fb103193878,5cc06021f27d..000000000000
--- a/tools/testing/selftests/bpf/prog_tests/fentry_test.c
+++ b/tools/testing/selftests/bpf/prog_tests/fentry_test.c
@@@ -4,41 -4,26 +4,49 @@@
  
  void test_fentry_test(void)
  {
++<<<<<<< HEAD
 +	struct bpf_prog_load_attr attr = {
 +		.file = "./fentry_test.o",
 +	};
 +
 +	char prog_name[] = "fentry/bpf_fentry_testX";
 +	struct bpf_object *obj = NULL, *pkt_obj;
 +	int err, pkt_fd, kfree_skb_fd, i;
 +	struct bpf_link *link[6] = {};
 +	struct bpf_program *prog[6];
 +	__u32 duration, retval;
 +	struct bpf_map *data_map;
 +	const int zero = 0;
 +	u64 result[6];
++=======
+ 	struct test_pkt_access *pkt_skel = NULL;
+ 	struct fentry_test *fentry_skel = NULL;
+ 	int err, pkt_fd, i;
+ 	__u32 duration = 0, retval;
+ 	__u64 *result;
++>>>>>>> 1a6fa10640d9 (selftests/bpf: Initialize duration variable before using)
  
 -	pkt_skel = test_pkt_access__open_and_load();
 -	if (CHECK(!pkt_skel, "pkt_skel_load", "pkt_access skeleton failed\n"))
 +	err = bpf_prog_load("./test_pkt_access.o", BPF_PROG_TYPE_SCHED_CLS,
 +			    &pkt_obj, &pkt_fd);
 +	if (CHECK(err, "prog_load sched cls", "err %d errno %d\n", err, errno))
  		return;
 -	fentry_skel = fentry_test__open_and_load();
 -	if (CHECK(!fentry_skel, "fentry_skel_load", "fentry skeleton failed\n"))
 -		goto cleanup;
 +	err = bpf_prog_load_xattr(&attr, &obj, &kfree_skb_fd);
 +	if (CHECK(err, "prog_load fail", "err %d errno %d\n", err, errno))
 +		goto close_prog;
  
 -	err = fentry_test__attach(fentry_skel);
 -	if (CHECK(err, "fentry_attach", "fentry attach failed: %d\n", err))
 -		goto cleanup;
 +	for (i = 0; i < 6; i++) {
 +		prog_name[sizeof(prog_name) - 2] = '1' + i;
 +		prog[i] = bpf_object__find_program_by_title(obj, prog_name);
 +		if (CHECK(!prog[i], "find_prog", "prog %s not found\n", prog_name))
 +			goto close_prog;
 +		link[i] = bpf_program__attach_trace(prog[i]);
 +		if (CHECK(IS_ERR(link[i]), "attach_trace", "failed to link\n"))
 +			goto close_prog;
 +	}
 +	data_map = bpf_object__find_map_by_name(obj, "fentry_t.bss");
 +	if (CHECK(!data_map, "find_data_map", "data map not found\n"))
 +		goto close_prog;
  
 -	pkt_fd = bpf_program__fd(pkt_skel->progs.test_pkt_access);
  	err = bpf_prog_test_run(pkt_fd, 1, &pkt_v6, sizeof(pkt_v6),
  				NULL, NULL, &retval, &duration);
  	CHECK(err || retval, "ipv6",
* Unmerged path tools/testing/selftests/bpf/prog_tests/fentry_test.c
diff --git a/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c b/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
index 7d3740d38965..8bc704ae96c3 100644
--- a/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
+++ b/tools/testing/selftests/bpf/prog_tests/fexit_bpf2bpf.c
@@ -11,7 +11,7 @@ static void test_fexit_bpf2bpf_common(const char *obj_file,
 	int err, pkt_fd, i;
 	struct bpf_link **link = NULL;
 	struct bpf_program **prog = NULL;
-	__u32 duration, retval;
+	__u32 duration = 0, retval;
 	struct bpf_map *data_map;
 	const int zero = 0;
 	u64 *result = NULL;
diff --git a/tools/testing/selftests/bpf/prog_tests/fexit_test.c b/tools/testing/selftests/bpf/prog_tests/fexit_test.c
index f99013222c74..d2c3655dd7a3 100644
--- a/tools/testing/selftests/bpf/prog_tests/fexit_test.c
+++ b/tools/testing/selftests/bpf/prog_tests/fexit_test.c
@@ -13,7 +13,7 @@ void test_fexit_test(void)
 	int err, pkt_fd, kfree_skb_fd, i;
 	struct bpf_link *link[6] = {};
 	struct bpf_program *prog[6];
-	__u32 duration, retval;
+	__u32 duration = 0, retval;
 	struct bpf_map *data_map;
 	const int zero = 0;
 	u64 result[6];
