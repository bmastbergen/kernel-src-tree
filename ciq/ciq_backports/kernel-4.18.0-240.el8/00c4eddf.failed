bpf: Factor out cgroup storages operations

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 00c4eddf7ee5cb4941d669d605815454dc9a5419
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/00c4eddf.failed

Refactor cgroup attach/detach code to abstract away common operations
performed on all types of cgroup storages. This makes high-level logic more
apparent, plus allows to reuse more code across multiple functions.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200325065746.640559-2-andriin@fb.com
(cherry picked from commit 00c4eddf7ee5cb4941d669d605815454dc9a5419)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/bpf/cgroup.c
diff --cc kernel/bpf/cgroup.c
index 5b8da1ceafe3,9c8472823a7f..000000000000
--- a/kernel/bpf/cgroup.c
+++ b/kernel/bpf/cgroup.c
@@@ -303,18 -345,19 +352,17 @@@ cleanup
   * Must be called with cgroup_mutex held.
   */
  int __cgroup_bpf_attach(struct cgroup *cgrp, struct bpf_prog *prog,
 -			struct bpf_prog *replace_prog,
  			enum bpf_attach_type type, u32 flags)
  {
 -	u32 saved_flags = (flags & (BPF_F_ALLOW_OVERRIDE | BPF_F_ALLOW_MULTI));
  	struct list_head *progs = &cgrp->bpf.progs[type];
  	struct bpf_prog *old_prog = NULL;
 -	struct bpf_cgroup_storage *storage[MAX_BPF_CGROUP_STORAGE_TYPE],
 -		*old_storage[MAX_BPF_CGROUP_STORAGE_TYPE] = {NULL};
 +	struct bpf_cgroup_storage *storage[MAX_BPF_CGROUP_STORAGE_TYPE] = {};
 +	struct bpf_cgroup_storage *old_storage[MAX_BPF_CGROUP_STORAGE_TYPE] = {};
  	struct bpf_prog_list *pl, *replace_pl = NULL;
- 	enum bpf_cgroup_storage_type stype;
  	int err;
  
 -	if (((flags & BPF_F_ALLOW_OVERRIDE) && (flags & BPF_F_ALLOW_MULTI)) ||
 -	    ((flags & BPF_F_REPLACE) && !(flags & BPF_F_ALLOW_MULTI)))
 +	BUILD_BUG_ON(RH_MAX_BPF_ATTACH_TYPE < MAX_BPF_ATTACH_TYPE);
 +	if ((flags & BPF_F_ALLOW_OVERRIDE) && (flags & BPF_F_ALLOW_MULTI))
  		/* invalid combination */
  		return -EINVAL;
  
@@@ -369,10 -407,8 +407,15 @@@
  	}
  
  	pl->prog = prog;
++<<<<<<< HEAD
 +	for_each_cgroup_storage_type(stype)
 +		pl->storage[stype] = storage[stype];
 +
 +	cgrp->bpf.flags[type] = flags;
++=======
+ 	bpf_cgroup_storages_assign(pl->storage, storage);
+ 	cgrp->bpf.flags[type] = saved_flags;
++>>>>>>> 00c4eddf7ee5 (bpf: Factor out cgroup storages operations)
  
  	err = update_effective_progs(cgrp, type);
  	if (err)
* Unmerged path kernel/bpf/cgroup.c
