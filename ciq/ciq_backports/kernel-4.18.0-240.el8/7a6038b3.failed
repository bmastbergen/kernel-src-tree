compat_ioctl: move hci_sock handlers into driver

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnd Bergmann <arnd@arndb.de>
commit 7a6038b30017c45e1110388083849689356a23ae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7a6038b3.failed

All these ioctl commands are compatible, so we can handle
them with a trivial wrapper in hci_sock.c and remove
the listing in fs/compat_ioctl.c.

A few of the commands pass integer arguments instead of
pointers, so for correctness skip the compat_ptr() conversion
here.

	Acked-by: Marcel Holtmann <marcel@holtmann.org>
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
(cherry picked from commit 7a6038b30017c45e1110388083849689356a23ae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/compat_ioctl.c
diff --cc fs/compat_ioctl.c
index 52e8324e4cf7,9302157d1471..000000000000
--- a/fs/compat_ioctl.c
+++ b/fs/compat_ioctl.c
@@@ -58,13 -40,6 +58,16 @@@
  
  #include "internal.h"
  
++<<<<<<< HEAD
 +#include <net/bluetooth/bluetooth.h>
 +#include <net/bluetooth/hci_sock.h>
 +#include <net/bluetooth/rfcomm.h>
 +
 +#include <linux/capi.h>
 +#include <linux/gigaset_dev.h>
 +
++=======
++>>>>>>> 7a6038b30017 (compat_ioctl: move hci_sock handlers into driver)
  #ifdef CONFIG_BLOCK
  #include <linux/cdrom.h>
  #include <linux/fd.h>
* Unmerged path fs/compat_ioctl.c
diff --git a/net/bluetooth/hci_sock.c b/net/bluetooth/hci_sock.c
index 1506e1632394..3a748884c9b2 100644
--- a/net/bluetooth/hci_sock.c
+++ b/net/bluetooth/hci_sock.c
@@ -23,7 +23,7 @@
 */
 
 /* Bluetooth HCI sockets. */
-
+#include <linux/compat.h>
 #include <linux/export.h>
 #include <linux/utsname.h>
 #include <linux/sched.h>
@@ -1055,6 +1055,22 @@ static int hci_sock_ioctl(struct socket *sock, unsigned int cmd,
 	return err;
 }
 
+#ifdef CONFIG_COMPAT
+static int hci_sock_compat_ioctl(struct socket *sock, unsigned int cmd,
+				 unsigned long arg)
+{
+	switch (cmd) {
+	case HCIDEVUP:
+	case HCIDEVDOWN:
+	case HCIDEVRESET:
+	case HCIDEVRESTAT:
+		return hci_sock_ioctl(sock, cmd, arg);
+	}
+
+	return hci_sock_ioctl(sock, cmd, (unsigned long)compat_ptr(arg));
+}
+#endif
+
 static int hci_sock_bind(struct socket *sock, struct sockaddr *addr,
 			 int addr_len)
 {
@@ -1975,6 +1991,9 @@ static const struct proto_ops hci_sock_ops = {
 	.sendmsg	= hci_sock_sendmsg,
 	.recvmsg	= hci_sock_recvmsg,
 	.ioctl		= hci_sock_ioctl,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl	= hci_sock_compat_ioctl,
+#endif
 	.poll		= datagram_poll,
 	.listen		= sock_no_listen,
 	.shutdown	= sock_no_shutdown,
