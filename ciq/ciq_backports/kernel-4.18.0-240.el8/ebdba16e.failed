perf tools: Rename perf_event::ksymbol_event to perf_event::ksymbol

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit ebdba16e95f728e94dba07fe0f1221b0e8efdb9d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ebdba16e.failed

Just like all the other meta events, that extra _event suffix is just
redundant, ditch it.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Song Liu <songliubraving@fb.com>
Link: https://lkml.kernel.org/n/tip-0q8b2xnfs17q0g523oej75s0@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit ebdba16e95f728e94dba07fe0f1221b0e8efdb9d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/bpf-event.c
#	tools/perf/util/event.h
diff --cc tools/perf/util/bpf-event.c
index 2a4a0da35632,69795c32ecf3..000000000000
--- a/tools/perf/util/bpf-event.c
+++ b/tools/perf/util/bpf-event.c
@@@ -160,8 -161,8 +160,13 @@@ static int perf_event__synthesize_one_b
  					       union perf_event *event,
  					       struct record_opts *opts)
  {
++<<<<<<< HEAD
 +	struct ksymbol_event *ksymbol_event = &event->ksymbol_event;
 +	struct bpf_event *bpf_event = &event->bpf_event;
++=======
+ 	struct perf_record_ksymbol *ksymbol_event = &event->ksymbol;
+ 	struct perf_record_bpf_event *bpf_event = &event->bpf_event;
++>>>>>>> ebdba16e95f7 (perf tools: Rename perf_event::ksymbol_event to perf_event::ksymbol)
  	struct bpf_prog_info_linear *info_linear;
  	struct perf_tool *tool = session->tool;
  	struct bpf_prog_info_node *info_node;
diff --cc tools/perf/util/event.h
index ba0ec1b6aad3,34190e01f307..000000000000
--- a/tools/perf/util/event.h
+++ b/tools/perf/util/event.h
@@@ -555,16 -550,18 +555,31 @@@ struct compressed_event 
  
  union perf_event {
  	struct perf_event_header	header;
++<<<<<<< HEAD
 +	struct mmap_event		mmap;
 +	struct mmap2_event		mmap2;
 +	struct comm_event		comm;
 +	struct namespaces_event		namespaces;
 +	struct fork_event		fork;
 +	struct lost_event		lost;
 +	struct lost_samples_event	lost_samples;
 +	struct read_event		read;
 +	struct throttle_event		throttle;
 +	struct sample_event		sample;
++=======
+ 	struct perf_record_mmap		mmap;
+ 	struct perf_record_mmap2	mmap2;
+ 	struct perf_record_comm		comm;
+ 	struct perf_record_namespaces	namespaces;
+ 	struct perf_record_fork		fork;
+ 	struct perf_record_lost		lost;
+ 	struct perf_record_lost_samples	lost_samples;
+ 	struct perf_record_read		read;
+ 	struct perf_record_throttle	throttle;
+ 	struct perf_record_sample	sample;
+ 	struct perf_record_bpf_event	bpf_event;
+ 	struct perf_record_ksymbol	ksymbol;
++>>>>>>> ebdba16e95f7 (perf tools: Rename perf_event::ksymbol_event to perf_event::ksymbol)
  	struct attr_event		attr;
  	struct event_update_event	event_update;
  	struct event_type_event		event_type;
* Unmerged path tools/perf/util/bpf-event.c
diff --git a/tools/perf/util/event.c b/tools/perf/util/event.c
index ca1efa67f07a..cb9501bfb071 100644
--- a/tools/perf/util/event.c
+++ b/tools/perf/util/event.c
@@ -1486,9 +1486,9 @@ static size_t perf_event__fprintf_lost(union perf_event *event, FILE *fp)
 size_t perf_event__fprintf_ksymbol(union perf_event *event, FILE *fp)
 {
 	return fprintf(fp, " addr %" PRI_lx64 " len %u type %u flags 0x%x name %s\n",
-		       event->ksymbol_event.addr, event->ksymbol_event.len,
-		       event->ksymbol_event.ksym_type,
-		       event->ksymbol_event.flags, event->ksymbol_event.name);
+		       event->ksymbol.addr, event->ksymbol.len,
+		       event->ksymbol.ksym_type,
+		       event->ksymbol.flags, event->ksymbol.name);
 }
 
 size_t perf_event__fprintf_bpf_event(union perf_event *event, FILE *fp)
* Unmerged path tools/perf/util/event.h
diff --git a/tools/perf/util/machine.c b/tools/perf/util/machine.c
index d0790082f28d..4939aca9b1c6 100644
--- a/tools/perf/util/machine.c
+++ b/tools/perf/util/machine.c
@@ -712,20 +712,20 @@ static int machine__process_ksymbol_register(struct machine *machine,
 	struct symbol *sym;
 	struct map *map;
 
-	map = map_groups__find(&machine->kmaps, event->ksymbol_event.addr);
+	map = map_groups__find(&machine->kmaps, event->ksymbol.addr);
 	if (!map) {
-		map = dso__new_map(event->ksymbol_event.name);
+		map = dso__new_map(event->ksymbol.name);
 		if (!map)
 			return -ENOMEM;
 
-		map->start = event->ksymbol_event.addr;
-		map->end = map->start + event->ksymbol_event.len;
+		map->start = event->ksymbol.addr;
+		map->end = map->start + event->ksymbol.len;
 		map_groups__insert(&machine->kmaps, map);
 	}
 
 	sym = symbol__new(map->map_ip(map, map->start),
-			  event->ksymbol_event.len,
-			  0, 0, event->ksymbol_event.name);
+			  event->ksymbol.len,
+			  0, 0, event->ksymbol.name);
 	if (!sym)
 		return -ENOMEM;
 	dso__insert_symbol(map->dso, sym);
@@ -738,7 +738,7 @@ static int machine__process_ksymbol_unregister(struct machine *machine,
 {
 	struct map *map;
 
-	map = map_groups__find(&machine->kmaps, event->ksymbol_event.addr);
+	map = map_groups__find(&machine->kmaps, event->ksymbol.addr);
 	if (map)
 		map_groups__remove(&machine->kmaps, map);
 
@@ -752,7 +752,7 @@ int machine__process_ksymbol(struct machine *machine __maybe_unused,
 	if (dump_trace)
 		perf_event__fprintf_ksymbol(event, stdout);
 
-	if (event->ksymbol_event.flags & PERF_RECORD_KSYMBOL_FLAGS_UNREGISTER)
+	if (event->ksymbol.flags & PERF_RECORD_KSYMBOL_FLAGS_UNREGISTER)
 		return machine__process_ksymbol_unregister(machine, event,
 							   sample);
 	return machine__process_ksymbol_register(machine, event, sample);
