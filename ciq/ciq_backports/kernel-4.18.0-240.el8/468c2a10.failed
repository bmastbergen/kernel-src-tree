mlxsw: spectrum_trap: fix unintention integer overflow on left shift

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Colin Ian King <colin.king@canonical.com>
commit 468c2a100208461c1821315f6fd81b32b9d12561
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/468c2a10.failed

Shifting the integer value 1 is evaluated using 32-bit
arithmetic and then used in an expression that expects a 64-bit
value, so there is potentially an integer overflow. Fix this
by using the BIT_ULL macro to perform the shift and avoid the
overflow.

Addresses-Coverity: ("Unintentional integer overflow")
Fixes: 13f2e64b94ea ("mlxsw: spectrum_trap: Add devlink-trap policer support")
	Signed-off-by: Colin Ian King <colin.king@canonical.com>
	Reviewed-by: Ido Schimmel <idosch@mellanox.com>
	Tested-by: Ido Schimmel <idosch@mellanox.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 468c2a100208461c1821315f6fd81b32b9d12561)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
diff --cc drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
index 13424366f1bb,fbf714d027d8..000000000000
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
@@@ -374,10 -589,79 +374,83 @@@ __mlxsw_sp_trap_group_init(struct mlxsw
  int mlxsw_sp_trap_group_init(struct mlxsw_core *mlxsw_core,
  			     const struct devlink_trap_group *group)
  {
++<<<<<<< HEAD
 +	struct mlxsw_sp *mlxsw_sp = mlxsw_core_driver_priv(mlxsw_core);
++=======
+ 	return __mlxsw_sp_trap_group_init(mlxsw_core, group,
+ 					  group->init_policer_id);
+ }
+ 
+ int mlxsw_sp_trap_group_set(struct mlxsw_core *mlxsw_core,
+ 			    const struct devlink_trap_group *group,
+ 			    const struct devlink_trap_policer *policer)
+ {
+ 	u32 policer_id = policer ? policer->id : 0;
+ 
+ 	return __mlxsw_sp_trap_group_init(mlxsw_core, group, policer_id);
+ }
+ 
+ static struct mlxsw_sp_trap_policer_item *
+ mlxsw_sp_trap_policer_item_init(struct mlxsw_sp *mlxsw_sp, u32 id)
+ {
+ 	struct mlxsw_sp_trap_policer_item *policer_item;
+ 	struct mlxsw_sp_trap *trap = mlxsw_sp->trap;
+ 	u16 hw_id;
+ 
+ 	/* We should be able to allocate a policer because the number of
+ 	 * policers we registered with devlink is in according with the number
+ 	 * of available policers.
+ 	 */
+ 	hw_id = find_first_zero_bit(trap->policers_usage, trap->max_policers);
+ 	if (WARN_ON(hw_id == trap->max_policers))
+ 		return ERR_PTR(-ENOBUFS);
+ 
+ 	policer_item = kzalloc(sizeof(*policer_item), GFP_KERNEL);
+ 	if (!policer_item)
+ 		return ERR_PTR(-ENOMEM);
+ 
+ 	__set_bit(hw_id, trap->policers_usage);
+ 	policer_item->hw_id = hw_id;
+ 	policer_item->id = id;
+ 	list_add_tail(&policer_item->list, &trap->policer_item_list);
+ 
+ 	return policer_item;
+ }
+ 
+ static void
+ mlxsw_sp_trap_policer_item_fini(struct mlxsw_sp *mlxsw_sp,
+ 				struct mlxsw_sp_trap_policer_item *policer_item)
+ {
+ 	list_del(&policer_item->list);
+ 	__clear_bit(policer_item->hw_id, mlxsw_sp->trap->policers_usage);
+ 	kfree(policer_item);
+ }
+ 
+ static int mlxsw_sp_trap_policer_bs(u64 burst, u8 *p_burst_size,
+ 				    struct netlink_ext_ack *extack)
+ {
+ 	int bs = fls64(burst) - 1;
+ 
+ 	if (burst != (BIT_ULL(bs))) {
+ 		NL_SET_ERR_MSG_MOD(extack, "Policer burst size is not power of two");
+ 		return -EINVAL;
+ 	}
+ 
+ 	*p_burst_size = bs;
+ 
+ 	return 0;
+ }
+ 
+ static int __mlxsw_sp_trap_policer_set(struct mlxsw_sp *mlxsw_sp, u16 hw_id,
+ 				       u64 rate, u64 burst, bool clear_counter,
+ 				       struct netlink_ext_ack *extack)
+ {
+ 	char qpcr_pl[MLXSW_REG_QPCR_LEN];
+ 	u8 burst_size;
++>>>>>>> 468c2a100208 (mlxsw: spectrum_trap: fix unintention integer overflow on left shift)
  	int err;
  
 -	err = mlxsw_sp_trap_policer_bs(burst, &burst_size, extack);
 +	err = mlxsw_sp_trap_group_policer_init(mlxsw_sp, group);
  	if (err)
  		return err;
  
* Unmerged path drivers/net/ethernet/mellanox/mlxsw/spectrum_trap.c
