KVM: VMX: Drop initialization of IA32_FEAT_CTL MSR

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Sean Christopherson <sean.j.christopherson@intel.com>
commit 21bd3467a58ea51ccc0b1d9bcb86dadf1640a002
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/21bd3467.failed

Remove KVM's code to initialize IA32_FEAT_CTL MSR when KVM is loaded now
that the MSR is initialized during boot on all CPUs that support VMX,
i.e. on all CPUs that can possibly load kvm_intel.

Note, don't WARN if IA32_FEAT_CTL is unlocked, even though the MSR is
unconditionally locked by init_ia32_feat_ctl().  KVM isn't tied directly
to a CPU vendor detection, whereas init_ia32_feat_ctl() is invoked if
and only if the CPU vendor is recognized and known to support VMX.  As a
result, vmx_disabled_by_bios() may be reached without going through
init_ia32_feat_ctl() and thus without locking IA32_FEAT_CTL.  This quirk
will be eliminated in a future patch.

	Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
	Signed-off-by: Borislav Petkov <bp@suse.de>
	Reviewed-by: Jim Mattson <jmattson@google.com>
Link: https://lkml.kernel.org/r/20191221044513.21680-15-sean.j.christopherson@intel.com
(cherry picked from commit 21bd3467a58ea51ccc0b1d9bcb86dadf1640a002)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/x86/kvm/vmx/vmx.c
diff --cc arch/x86/kvm/vmx/vmx.c
index d1c5b096e0f4,a026334ffc58..000000000000
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -2245,25 -2206,27 +2245,48 @@@ static __init int vmx_disabled_by_bios(
  {
  	u64 msr;
  
++<<<<<<< HEAD
 +	rdmsrl(MSR_IA32_FEATURE_CONTROL, msr);
 +	if (msr & FEATURE_CONTROL_LOCKED) {
 +		/* launched w/ TXT and VMX disabled */
 +		if (!(msr & FEATURE_CONTROL_VMXON_ENABLED_INSIDE_SMX)
 +			&& tboot_enabled())
 +			return 1;
 +		/* launched w/o TXT and VMX only enabled w/ TXT */
 +		if (!(msr & FEATURE_CONTROL_VMXON_ENABLED_OUTSIDE_SMX)
 +			&& (msr & FEATURE_CONTROL_VMXON_ENABLED_INSIDE_SMX)
 +			&& !tboot_enabled()) {
 +			printk(KERN_WARNING "kvm: disable TXT in the BIOS or "
 +				"activate TXT before enabling KVM\n");
 +			return 1;
 +		}
 +		/* launched w/o TXT and VMX disabled */
 +		if (!(msr & FEATURE_CONTROL_VMXON_ENABLED_OUTSIDE_SMX)
 +			&& !tboot_enabled())
 +			return 1;
++=======
+ 	rdmsrl(MSR_IA32_FEAT_CTL, msr);
+ 
+ 	if (unlikely(!(msr & FEAT_CTL_LOCKED)))
+ 		return 1;
+ 
+ 	/* launched w/ TXT and VMX disabled */
+ 	if (!(msr & FEAT_CTL_VMX_ENABLED_INSIDE_SMX) &&
+ 	    tboot_enabled())
+ 		return 1;
+ 	/* launched w/o TXT and VMX only enabled w/ TXT */
+ 	if (!(msr & FEAT_CTL_VMX_ENABLED_OUTSIDE_SMX) &&
+ 	    (msr & FEAT_CTL_VMX_ENABLED_INSIDE_SMX) &&
+ 	    !tboot_enabled()) {
+ 		pr_warn("kvm: disable TXT in the BIOS or "
+ 			"activate TXT before enabling KVM\n");
+ 		return 1;
++>>>>>>> 21bd3467a58e (KVM: VMX: Drop initialization of IA32_FEAT_CTL MSR)
  	}
+ 	/* launched w/o TXT and VMX disabled */
+ 	if (!(msr & FEAT_CTL_VMX_ENABLED_OUTSIDE_SMX) &&
+ 	    !tboot_enabled())
+ 		return 1;
  
  	return 0;
  }
@@@ -2308,17 -2270,6 +2330,20 @@@ static int hardware_enable(void
  	 */
  	crash_enable_local_vmclear(cpu);
  
++<<<<<<< HEAD
 +	rdmsrl(MSR_IA32_FEATURE_CONTROL, old);
 +
 +	test_bits = FEATURE_CONTROL_LOCKED;
 +	test_bits |= FEATURE_CONTROL_VMXON_ENABLED_OUTSIDE_SMX;
 +	if (tboot_enabled())
 +		test_bits |= FEATURE_CONTROL_VMXON_ENABLED_INSIDE_SMX;
 +
 +	if ((old & test_bits) != test_bits) {
 +		/* enable and lock */
 +		wrmsrl(MSR_IA32_FEATURE_CONTROL, old | test_bits);
 +	}
++=======
++>>>>>>> 21bd3467a58e (KVM: VMX: Drop initialization of IA32_FEAT_CTL MSR)
  	kvm_cpu_vmxon(phys_addr);
  	if (enable_ept)
  		ept_sync_global();
* Unmerged path arch/x86/kvm/vmx/vmx.c
