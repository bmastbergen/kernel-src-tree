KVM: s390: protvirt: Support cmd 5 operation state

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Janosch Frank <frankja@linux.ibm.com>
commit 7c36a3fcf444ced8efc3da106cc7215227d60fde
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/7c36a3fc.failed

Code 5 for the set cpu state UV call tells the UV to load a PSW from
the SE header (first IPL) or from guest location 0x0 (diag 308 subcode
0/1). Also it sets the cpu into operating state afterwards, so we can
start it.

	Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
	Reviewed-by: David Hildenbrand <david@redhat.com>
	Reviewed-by: Cornelia Huck <cohuck@redhat.com>
[borntraeger@de.ibm.com: patch merging, splitting, fixing]
	Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
(cherry picked from commit 7c36a3fcf444ced8efc3da106cc7215227d60fde)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	arch/s390/include/asm/uv.h
diff --cc arch/s390/include/asm/uv.h
index 4093a2856929,e55727b63a68..000000000000
--- a/arch/s390/include/asm/uv.h
+++ b/arch/s390/include/asm/uv.h
@@@ -44,9 -78,122 +44,113 @@@ struct uv_cb_qui 
  	struct uv_cb_header header;
  	u64 reserved08;
  	u64 inst_calls_list[4];
 -	u64 reserved30[2];
 -	u64 uv_base_stor_len;
 -	u64 reserved48;
 -	u64 conf_base_phys_stor_len;
 -	u64 conf_base_virt_stor_len;
 -	u64 conf_virt_var_stor_len;
 -	u64 cpu_stor_len;
 -	u32 reserved70[3];
 -	u32 max_num_sec_conf;
 -	u64 max_guest_stor_addr;
 -	u8  reserved88[158 - 136];
 -	u16 max_guest_cpus;
 -	u8  reserveda0[200 - 160];
 +	u64 reserved30[15];
  } __packed __aligned(8);
  
++<<<<<<< HEAD
++=======
+ /* Initialize Ultravisor */
+ struct uv_cb_init {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 stor_origin;
+ 	u64 stor_len;
+ 	u64 reserved28[4];
+ } __packed __aligned(8);
+ 
+ /* Create Guest Configuration */
+ struct uv_cb_cgc {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 guest_handle;
+ 	u64 conf_base_stor_origin;
+ 	u64 conf_virt_stor_origin;
+ 	u64 reserved30;
+ 	u64 guest_stor_origin;
+ 	u64 guest_stor_len;
+ 	u64 guest_sca;
+ 	u64 guest_asce;
+ 	u64 reserved58[5];
+ } __packed __aligned(8);
+ 
+ /* Create Secure CPU */
+ struct uv_cb_csc {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 cpu_handle;
+ 	u64 guest_handle;
+ 	u64 stor_origin;
+ 	u8  reserved30[6];
+ 	u16 num;
+ 	u64 state_origin;
+ 	u64 reserved40[4];
+ } __packed __aligned(8);
+ 
+ /* Convert to Secure */
+ struct uv_cb_cts {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 guest_handle;
+ 	u64 gaddr;
+ } __packed __aligned(8);
+ 
+ /* Convert from Secure / Pin Page Shared */
+ struct uv_cb_cfs {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 paddr;
+ } __packed __aligned(8);
+ 
+ /* Set Secure Config Parameter */
+ struct uv_cb_ssc {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 guest_handle;
+ 	u64 sec_header_origin;
+ 	u32 sec_header_len;
+ 	u32 reserved2c;
+ 	u64 reserved30[4];
+ } __packed __aligned(8);
+ 
+ /* Unpack */
+ struct uv_cb_unp {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 guest_handle;
+ 	u64 gaddr;
+ 	u64 tweak[2];
+ 	u64 reserved38[3];
+ } __packed __aligned(8);
+ 
+ #define PV_CPU_STATE_OPR	1
+ #define PV_CPU_STATE_STP	2
+ #define PV_CPU_STATE_CHKSTP	3
+ #define PV_CPU_STATE_OPR_LOAD	5
+ 
+ struct uv_cb_cpu_set_state {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 cpu_handle;
+ 	u8  reserved20[7];
+ 	u8  state;
+ 	u64 reserved28[5];
+ };
+ 
+ /*
+  * A common UV call struct for calls that take no payload
+  * Examples:
+  * Destroy cpu/config
+  * Verify
+  */
+ struct uv_cb_nodata {
+ 	struct uv_cb_header header;
+ 	u64 reserved08[2];
+ 	u64 handle;
+ 	u64 reserved20[4];
+ } __packed __aligned(8);
+ 
+ /* Set Shared Access */
++>>>>>>> 7c36a3fcf444 (KVM: s390: protvirt: Support cmd 5 operation state)
  struct uv_cb_share {
  	struct uv_cb_header header;
  	u64 reserved08[3];
* Unmerged path arch/s390/include/asm/uv.h
diff --git a/arch/s390/kvm/kvm-s390.c b/arch/s390/kvm/kvm-s390.c
index af147f0b9f94..e2a1baa61ae4 100644
--- a/arch/s390/kvm/kvm-s390.c
+++ b/arch/s390/kvm/kvm-s390.c
@@ -3473,6 +3473,12 @@ int kvm_arch_vcpu_ioctl_set_mpstate(struct kvm_vcpu *vcpu,
 		kvm_s390_vcpu_start(vcpu);
 		break;
 	case KVM_MP_STATE_LOAD:
+		if (!kvm_s390_pv_cpu_is_protected(vcpu)) {
+			rc = -ENXIO;
+			break;
+		}
+		rc = kvm_s390_pv_set_cpu_state(vcpu, PV_CPU_STATE_OPR_LOAD);
+		break;
 	case KVM_MP_STATE_CHECK_STOP:
 		/* fall through - CHECK_STOP and LOAD are not supported yet */
 	default:
