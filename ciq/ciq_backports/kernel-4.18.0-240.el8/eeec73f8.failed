drm/i915/gt: Skip rmw for masked registers

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Chris Wilson <chris@chris-wilson.co.uk>
commit eeec73f8a4a4d27a1e7be3dedc4b9c81e42ccc0b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/eeec73f8.failed

A masked register does not need rmw to update, and it is best not to use
such a sequence.

	Reported-by: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
	Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
	Cc: Ville Syrj채l채 <ville.syrjala@linux.intel.com>
	Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
	Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20200131235035.3522102-1-chris@chris-wilson.co.uk
(cherry picked from commit eeec73f8a4a4d27a1e7be3dedc4b9c81e42ccc0b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/gpu/drm/i915/gt/intel_workarounds.c
#	drivers/gpu/drm/i915/i915_debugfs.c
diff --cc drivers/gpu/drm/i915/gt/intel_workarounds.c
index 8f75882ded3f,857337f323ee..000000000000
--- a/drivers/gpu/drm/i915/gt/intel_workarounds.c
+++ b/drivers/gpu/drm/i915/gt/intel_workarounds.c
@@@ -143,59 -147,57 +143,85 @@@ static void _wa_add(struct i915_wa_lis
  	}
  }
  
++<<<<<<< HEAD
 +static void
 +wa_write_masked_or(struct i915_wa_list *wal, i915_reg_t reg, u32 mask,
 +		   u32 val)
 +{
 +	struct i915_wa wa = {
 +		.reg  = reg,
 +		.mask = mask,
 +		.val  = val,
 +		.read = mask,
++=======
+ static void wa_add(struct i915_wa_list *wal, i915_reg_t reg,
+ 		   u32 clear, u32 set, u32 read_mask)
+ {
+ 	struct i915_wa wa = {
+ 		.reg  = reg,
+ 		.clr  = clear,
+ 		.set  = set,
+ 		.read = read_mask,
++>>>>>>> eeec73f8a4a4 (drm/i915/gt: Skip rmw for masked registers)
  	};
  
  	_wa_add(wal, &wa);
  }
  
  static void
- wa_masked_en(struct i915_wa_list *wal, i915_reg_t reg, u32 val)
++<<<<<<< HEAD
++=======
+ wa_write_masked_or(struct i915_wa_list *wal, i915_reg_t reg, u32 clear, u32 set)
  {
- 	wa_write_masked_or(wal, reg, val, _MASKED_BIT_ENABLE(val));
+ 	wa_add(wal, reg, clear, set, clear);
  }
  
  static void
- wa_write(struct i915_wa_list *wal, i915_reg_t reg, u32 val)
+ wa_write(struct i915_wa_list *wal, i915_reg_t reg, u32 set)
+ {
+ 	wa_write_masked_or(wal, reg, ~0, set);
+ }
+ 
+ static void
+ wa_write_or(struct i915_wa_list *wal, i915_reg_t reg, u32 set)
+ {
+ 	wa_write_masked_or(wal, reg, set, set);
+ }
+ 
+ static void
++>>>>>>> eeec73f8a4a4 (drm/i915/gt: Skip rmw for masked registers)
+ wa_masked_en(struct i915_wa_list *wal, i915_reg_t reg, u32 val)
  {
- 	wa_write_masked_or(wal, reg, ~0, val);
+ 	wa_add(wal, reg, 0, _MASKED_BIT_ENABLE(val), val);
  }
  
  static void
- wa_write_or(struct i915_wa_list *wal, i915_reg_t reg, u32 val)
+ wa_masked_dis(struct i915_wa_list *wal, i915_reg_t reg, u32 val)
  {
- 	wa_write_masked_or(wal, reg, val, val);
+ 	wa_add(wal, reg, 0, _MASKED_BIT_DISABLE(val), val);
  }
  
 +static void
 +ignore_wa_write_or(struct i915_wa_list *wal, i915_reg_t reg, u32 mask, u32 val)
 +{
 +	struct i915_wa wa = {
 +		.reg  = reg,
 +		.mask = mask,
 +		.val  = val,
 +		/* Bonkers HW, skip verifying */
 +	};
 +
 +	_wa_add(wal, &wa);
 +}
 +
  #define WA_SET_BIT_MASKED(addr, mask) \
- 	wa_write_masked_or(wal, (addr), (mask), _MASKED_BIT_ENABLE(mask))
+ 	wa_masked_en(wal, (addr), (mask))
  
  #define WA_CLR_BIT_MASKED(addr, mask) \
- 	wa_write_masked_or(wal, (addr), (mask), _MASKED_BIT_DISABLE(mask))
+ 	wa_masked_dis(wal, (addr), (mask))
  
  #define WA_SET_FIELD_MASKED(addr, mask, value) \
- 	wa_write_masked_or(wal, (addr), (mask), _MASKED_FIELD((mask), (value)))
+ 	wa_write_masked_or(wal, (addr), 0, _MASKED_FIELD((mask), (value)))
  
  static void gen8_ctx_workarounds_init(struct intel_engine_cs *engine,
  				      struct i915_wa_list *wal)
diff --cc drivers/gpu/drm/i915/i915_debugfs.c
index 62cf34db9280,e75e8212f03b..000000000000
--- a/drivers/gpu/drm/i915/i915_debugfs.c
+++ b/drivers/gpu/drm/i915/i915_debugfs.c
@@@ -2966,14 -2786,27 +2966,36 @@@ static int i915_shared_dplls_info(struc
  static int i915_wa_registers(struct seq_file *m, void *unused)
  {
  	struct drm_i915_private *i915 = node_to_i915(m->private);
 -	struct intel_engine_cs *engine;
 +	const struct i915_wa_list *wal = &i915->engine[RCS0]->ctx_wa_list;
 +	struct i915_wa *wa;
 +	unsigned int i;
  
++<<<<<<< HEAD
 +	seq_printf(m, "Workarounds applied: %u\n", wal->count);
 +	for (i = 0, wa = wal->list; i < wal->count; i++, wa++)
 +		seq_printf(m, "0x%X: 0x%08X, mask: 0x%08X\n",
 +			   i915_mmio_reg_offset(wa->reg), wa->val, wa->mask);
++=======
+ 	for_each_uabi_engine(engine, i915) {
+ 		const struct i915_wa_list *wal = &engine->ctx_wa_list;
+ 		const struct i915_wa *wa;
+ 		unsigned int count;
+ 
+ 		count = wal->count;
+ 		if (!count)
+ 			continue;
+ 
+ 		seq_printf(m, "%s: Workarounds applied: %u\n",
+ 			   engine->name, count);
+ 
+ 		for (wa = wal->list; count--; wa++)
+ 			seq_printf(m, "0x%X: 0x%08X, mask: 0x%08X\n",
+ 				   i915_mmio_reg_offset(wa->reg),
+ 				   wa->set, wa->clr);
+ 
+ 		seq_printf(m, "\n");
+ 	}
++>>>>>>> eeec73f8a4a4 (drm/i915/gt: Skip rmw for masked registers)
  
  	return 0;
  }
* Unmerged path drivers/gpu/drm/i915/gt/intel_workarounds.c
diff --git a/drivers/gpu/drm/i915/gt/intel_workarounds_types.h b/drivers/gpu/drm/i915/gt/intel_workarounds_types.h
index 42ac1fb99572..648360b66b7e 100644
--- a/drivers/gpu/drm/i915/gt/intel_workarounds_types.h
+++ b/drivers/gpu/drm/i915/gt/intel_workarounds_types.h
@@ -13,8 +13,8 @@
 
 struct i915_wa {
 	i915_reg_t	reg;
-	u32		mask;
-	u32		val;
+	u32		clr;
+	u32		set;
 	u32		read;
 };
 
* Unmerged path drivers/gpu/drm/i915/i915_debugfs.c
