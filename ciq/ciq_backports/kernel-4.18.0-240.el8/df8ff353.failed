libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit df8ff35311c8d10d90b4604c02b32c361dc997aa
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/df8ff353.failed

Move BPF_PROG, BPF_KPROBE, and BPF_KRETPROBE macro into libbpf's bpf_tracing.h
header to make it available for non-selftests users.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20200229231112.1240137-5-andriin@fb.com
(cherry picked from commit df8ff35311c8d10d90b4604c02b32c361dc997aa)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/testing/selftests/bpf/bpf_tcp_helpers.h
#	tools/testing/selftests/bpf/bpf_trace_helpers.h
#	tools/testing/selftests/bpf/progs/bpf_dctcp.c
#	tools/testing/selftests/bpf/progs/fentry_test.c
#	tools/testing/selftests/bpf/progs/fexit_bpf2bpf.c
#	tools/testing/selftests/bpf/progs/fexit_bpf2bpf_simple.c
#	tools/testing/selftests/bpf/progs/fexit_test.c
#	tools/testing/selftests/bpf/progs/kfree_skb.c
#	tools/testing/selftests/bpf/progs/test_attach_probe.c
#	tools/testing/selftests/bpf/progs/test_overhead.c
#	tools/testing/selftests/bpf/progs/test_perf_branches.c
#	tools/testing/selftests/bpf/progs/test_perf_buffer.c
#	tools/testing/selftests/bpf/progs/test_probe_user.c
#	tools/testing/selftests/bpf/progs/test_xdp_bpf2bpf.c
diff --cc tools/testing/selftests/bpf/bpf_tcp_helpers.h
index 1052b9bb4320,5bf2fe9b1efa..000000000000
--- a/tools/testing/selftests/bpf/bpf_tcp_helpers.h
+++ b/tools/testing/selftests/bpf/bpf_tcp_helpers.h
@@@ -4,8 -4,15 +4,20 @@@
  
  #include <stdbool.h>
  #include <linux/types.h>
++<<<<<<< HEAD
 +#include <bpf_helpers.h>
 +#include <bpf_core_read.h>
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_core_read.h>
+ #include <bpf/bpf_tracing.h>
+ 
+ #define BPF_STRUCT_OPS(name, args...) \
+ SEC("struct_ops/"#name) \
+ BPF_PROG(name, args)
+ 
+ #define tcp_jiffies32 ((__u32)bpf_jiffies64())
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  struct sock_common {
  	unsigned char	skc_state;
diff --cc tools/testing/selftests/bpf/progs/bpf_dctcp.c
index 19650f43c192,127ea762a062..000000000000
--- a/tools/testing/selftests/bpf/progs/bpf_dctcp.c
+++ b/tools/testing/selftests/bpf/progs/bpf_dctcp.c
@@@ -8,8 -8,8 +8,13 @@@
  
  #include <linux/bpf.h>
  #include <linux/types.h>
++<<<<<<< HEAD
 +#include <bpf_helpers.h>
 +#include <bpf_trace_helpers.h>
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  #include "bpf_tcp_helpers.h"
  
  char _license[] SEC("license") = "GPL";
diff --cc tools/testing/selftests/bpf/progs/fentry_test.c
index 1ae1779a8e2e,9365b686f84b..000000000000
--- a/tools/testing/selftests/bpf/progs/fentry_test.c
+++ b/tools/testing/selftests/bpf/progs/fentry_test.c
@@@ -1,8 -1,8 +1,13 @@@
  // SPDX-License-Identifier: GPL-2.0
  /* Copyright (c) 2019 Facebook */
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  char _license[] SEC("license") = "GPL";
  
diff --cc tools/testing/selftests/bpf/progs/fexit_bpf2bpf.c
index 7c17ee159378,98e1efe14549..000000000000
--- a/tools/testing/selftests/bpf/progs/fexit_bpf2bpf.c
+++ b/tools/testing/selftests/bpf/progs/fexit_bpf2bpf.c
@@@ -1,8 -1,11 +1,14 @@@
  // SPDX-License-Identifier: GPL-2.0
  /* Copyright (c) 2019 Facebook */
 -#include <linux/stddef.h>
 -#include <linux/ipv6.h>
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_endian.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  struct sk_buff {
  	unsigned int len;
diff --cc tools/testing/selftests/bpf/progs/fexit_bpf2bpf_simple.c
index ac527b10dd80,85c0b516d6ee..000000000000
--- a/tools/testing/selftests/bpf/progs/fexit_bpf2bpf_simple.c
+++ b/tools/testing/selftests/bpf/progs/fexit_bpf2bpf_simple.c
@@@ -1,8 -1,8 +1,13 @@@
  // SPDX-License-Identifier: GPL-2.0
  /* Copyright (c) 2019 Facebook */
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  struct sk_buff {
  	unsigned int len;
diff --cc tools/testing/selftests/bpf/progs/fexit_test.c
index f0dd412ca128,bd1e17d8024c..000000000000
--- a/tools/testing/selftests/bpf/progs/fexit_test.c
+++ b/tools/testing/selftests/bpf/progs/fexit_test.c
@@@ -1,8 -1,8 +1,13 @@@
  // SPDX-License-Identifier: GPL-2.0
  /* Copyright (c) 2019 Facebook */
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  char _license[] SEC("license") = "GPL";
  
diff --cc tools/testing/selftests/bpf/progs/kfree_skb.c
index 046fae868f93,a46a264ce24e..000000000000
--- a/tools/testing/selftests/bpf/progs/kfree_skb.c
+++ b/tools/testing/selftests/bpf/progs/kfree_skb.c
@@@ -2,9 -2,9 +2,15 @@@
  // Copyright (c) 2019 Facebook
  #include <linux/bpf.h>
  #include <stdbool.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_endian.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_endian.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  char _license[] SEC("license") = "GPL";
  struct {
diff --cc tools/testing/selftests/bpf/progs/test_attach_probe.c
index 534621e38906,8056a4c6d918..000000000000
--- a/tools/testing/selftests/bpf/progs/test_attach_probe.c
+++ b/tools/testing/selftests/bpf/progs/test_attach_probe.c
@@@ -3,21 -3,18 +3,26 @@@
  
  #include <linux/ptrace.h>
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
 -int kprobe_res = 0;
 -int kretprobe_res = 0;
 -int uprobe_res = 0;
 -int uretprobe_res = 0;
 +struct {
 +	__uint(type, BPF_MAP_TYPE_ARRAY);
 +	__uint(max_entries, 4);
 +	__type(key, int);
 +	__type(value, int);
 +} results_map SEC(".maps");
  
  SEC("kprobe/sys_nanosleep")
 -int handle_kprobe(struct pt_regs *ctx)
 +int handle_sys_nanosleep_entry(struct pt_regs *ctx)
  {
 -	kprobe_res = 1;
 +	const int key = 0, value = 1;
 +
 +	bpf_map_update_elem(&results_map, &key, &value, 0);
  	return 0;
  }
  
diff --cc tools/testing/selftests/bpf/progs/test_overhead.c
index 65bdc6c76418,56a50b25cd33..000000000000
--- a/tools/testing/selftests/bpf/progs/test_overhead.c
+++ b/tools/testing/selftests/bpf/progs/test_overhead.c
@@@ -4,9 -4,8 +4,14 @@@
  #include <stddef.h>
  #include <linux/bpf.h>
  #include <linux/ptrace.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_tracing.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  struct task_struct;
  
diff --cc tools/testing/selftests/bpf/progs/test_perf_buffer.c
index 1fdc999031ac,ad59c4c9aba8..000000000000
--- a/tools/testing/selftests/bpf/progs/test_perf_buffer.c
+++ b/tools/testing/selftests/bpf/progs/test_perf_buffer.c
@@@ -3,8 -3,8 +3,13 @@@
  
  #include <linux/ptrace.h>
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  struct {
  	__uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY);
diff --cc tools/testing/selftests/bpf/progs/test_probe_user.c
index 5b570969e5c5,89b3532ccc75..000000000000
--- a/tools/testing/selftests/bpf/progs/test_probe_user.c
+++ b/tools/testing/selftests/bpf/progs/test_probe_user.c
@@@ -5,9 -5,8 +5,14 @@@
  
  #include <netinet/in.h>
  
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_tracing.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_helpers.h>
+ #include <bpf/bpf_tracing.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  static struct sockaddr_in old;
  
diff --cc tools/testing/selftests/bpf/progs/test_xdp_bpf2bpf.c
index c0f6d0831c5d,42dd2fedd588..000000000000
--- a/tools/testing/selftests/bpf/progs/test_xdp_bpf2bpf.c
+++ b/tools/testing/selftests/bpf/progs/test_xdp_bpf2bpf.c
@@@ -1,7 -1,7 +1,12 @@@
  // SPDX-License-Identifier: GPL-2.0
  #include <linux/bpf.h>
++<<<<<<< HEAD
 +#include "bpf_helpers.h"
 +#include "bpf_trace_helpers.h"
++=======
+ #include <bpf/bpf_tracing.h>
+ #include <bpf/bpf_helpers.h>
++>>>>>>> df8ff35311c8 (libbpf: Merge selftests' bpf_trace_helpers.h into libbpf's bpf_tracing.h)
  
  struct net_device {
  	/* Structure does not need to contain all entries,
* Unmerged path tools/testing/selftests/bpf/bpf_trace_helpers.h
* Unmerged path tools/testing/selftests/bpf/progs/test_perf_branches.c
diff --git a/tools/lib/bpf/bpf_tracing.h b/tools/lib/bpf/bpf_tracing.h
index 8376f22b0e36..379d03b211ea 100644
--- a/tools/lib/bpf/bpf_tracing.h
+++ b/tools/lib/bpf/bpf_tracing.h
@@ -192,4 +192,122 @@ struct pt_regs;
 			  (void *)(PT_REGS_FP(ctx) + sizeof(ip))); })
 #endif
 
+#define ___bpf_concat(a, b) a ## b
+#define ___bpf_apply(fn, n) ___bpf_concat(fn, n)
+#define ___bpf_nth(_, _1, _2, _3, _4, _5, _6, _7, _8, _9, _a, _b, _c, N, ...) N
+#define ___bpf_narg(...) \
+	___bpf_nth(_, ##__VA_ARGS__, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
+#define ___bpf_empty(...) \
+	___bpf_nth(_, ##__VA_ARGS__, N, N, N, N, N, N, N, N, N, N, 0)
+
+#define ___bpf_ctx_cast0() ctx
+#define ___bpf_ctx_cast1(x) ___bpf_ctx_cast0(), (void *)ctx[0]
+#define ___bpf_ctx_cast2(x, args...) ___bpf_ctx_cast1(args), (void *)ctx[1]
+#define ___bpf_ctx_cast3(x, args...) ___bpf_ctx_cast2(args), (void *)ctx[2]
+#define ___bpf_ctx_cast4(x, args...) ___bpf_ctx_cast3(args), (void *)ctx[3]
+#define ___bpf_ctx_cast5(x, args...) ___bpf_ctx_cast4(args), (void *)ctx[4]
+#define ___bpf_ctx_cast6(x, args...) ___bpf_ctx_cast5(args), (void *)ctx[5]
+#define ___bpf_ctx_cast7(x, args...) ___bpf_ctx_cast6(args), (void *)ctx[6]
+#define ___bpf_ctx_cast8(x, args...) ___bpf_ctx_cast7(args), (void *)ctx[7]
+#define ___bpf_ctx_cast9(x, args...) ___bpf_ctx_cast8(args), (void *)ctx[8]
+#define ___bpf_ctx_cast10(x, args...) ___bpf_ctx_cast9(args), (void *)ctx[9]
+#define ___bpf_ctx_cast11(x, args...) ___bpf_ctx_cast10(args), (void *)ctx[10]
+#define ___bpf_ctx_cast12(x, args...) ___bpf_ctx_cast11(args), (void *)ctx[11]
+#define ___bpf_ctx_cast(args...) \
+	___bpf_apply(___bpf_ctx_cast, ___bpf_narg(args))(args)
+
+/*
+ * BPF_PROG is a convenience wrapper for generic tp_btf/fentry/fexit and
+ * similar kinds of BPF programs, that accept input arguments as a single
+ * pointer to untyped u64 array, where each u64 can actually be a typed
+ * pointer or integer of different size. Instead of requring user to write
+ * manual casts and work with array elements by index, BPF_PROG macro
+ * allows user to declare a list of named and typed input arguments in the
+ * same syntax as for normal C function. All the casting is hidden and
+ * performed transparently, while user code can just assume working with
+ * function arguments of specified type and name.
+ *
+ * Original raw context argument is preserved as well as 'ctx' argument.
+ * This is useful when using BPF helpers that expect original context
+ * as one of the parameters (e.g., for bpf_perf_event_output()).
+ */
+#define BPF_PROG(name, args...)						    \
+name(unsigned long long *ctx);						    \
+static __attribute__((always_inline)) typeof(name(0))			    \
+____##name(unsigned long long *ctx, ##args);				    \
+typeof(name(0)) name(unsigned long long *ctx)				    \
+{									    \
+	_Pragma("GCC diagnostic push")					    \
+	_Pragma("GCC diagnostic ignored \"-Wint-conversion\"")		    \
+	return ____##name(___bpf_ctx_cast(args));			    \
+	_Pragma("GCC diagnostic pop")					    \
+}									    \
+static __attribute__((always_inline)) typeof(name(0))			    \
+____##name(unsigned long long *ctx, ##args)
+
+struct pt_regs;
+
+#define ___bpf_kprobe_args0() ctx
+#define ___bpf_kprobe_args1(x) \
+	___bpf_kprobe_args0(), (void *)PT_REGS_PARM1(ctx)
+#define ___bpf_kprobe_args2(x, args...) \
+	___bpf_kprobe_args1(args), (void *)PT_REGS_PARM2(ctx)
+#define ___bpf_kprobe_args3(x, args...) \
+	___bpf_kprobe_args2(args), (void *)PT_REGS_PARM3(ctx)
+#define ___bpf_kprobe_args4(x, args...) \
+	___bpf_kprobe_args3(args), (void *)PT_REGS_PARM4(ctx)
+#define ___bpf_kprobe_args5(x, args...) \
+	___bpf_kprobe_args4(args), (void *)PT_REGS_PARM5(ctx)
+#define ___bpf_kprobe_args(args...) \
+	___bpf_apply(___bpf_kprobe_args, ___bpf_narg(args))(args)
+
+/*
+ * BPF_KPROBE serves the same purpose for kprobes as BPF_PROG for
+ * tp_btf/fentry/fexit BPF programs. It hides the underlying platform-specific
+ * low-level way of getting kprobe input arguments from struct pt_regs, and
+ * provides a familiar typed and named function arguments syntax and
+ * semantics of accessing kprobe input paremeters.
+ *
+ * Original struct pt_regs* context is preserved as 'ctx' argument. This might
+ * be necessary when using BPF helpers like bpf_perf_event_output().
+ */
+#define BPF_KPROBE(name, args...)					    \
+name(struct pt_regs *ctx);						    \
+static __attribute__((always_inline)) typeof(name(0))			    \
+____##name(struct pt_regs *ctx, ##args);				    \
+typeof(name(0)) name(struct pt_regs *ctx)				    \
+{									    \
+	_Pragma("GCC diagnostic push")					    \
+	_Pragma("GCC diagnostic ignored \"-Wint-conversion\"")		    \
+	return ____##name(___bpf_kprobe_args(args));			    \
+	_Pragma("GCC diagnostic pop")					    \
+}									    \
+static __attribute__((always_inline)) typeof(name(0))			    \
+____##name(struct pt_regs *ctx, ##args)
+
+#define ___bpf_kretprobe_args0() ctx
+#define ___bpf_kretprobe_args1(x) \
+	___bpf_kretprobe_args0(), (void *)PT_REGS_RET(ctx)
+#define ___bpf_kretprobe_args(args...) \
+	___bpf_apply(___bpf_kretprobe_args, ___bpf_narg(args))(args)
+
+/*
+ * BPF_KRETPROBE is similar to BPF_KPROBE, except, it only provides optional
+ * return value (in addition to `struct pt_regs *ctx`), but no input
+ * arguments, because they will be clobbered by the time probed function
+ * returns.
+ */
+#define BPF_KRETPROBE(name, args...)					    \
+name(struct pt_regs *ctx);						    \
+static __attribute__((always_inline)) typeof(name(0))			    \
+____##name(struct pt_regs *ctx, ##args);				    \
+typeof(name(0)) name(struct pt_regs *ctx)				    \
+{									    \
+	_Pragma("GCC diagnostic push")					    \
+	_Pragma("GCC diagnostic ignored \"-Wint-conversion\"")		    \
+	return ____##name(___bpf_kretprobe_args(args));			    \
+	_Pragma("GCC diagnostic pop")					    \
+}									    \
+static __always_inline typeof(name(0)) ____##name(struct pt_regs *ctx, ##args)
+
 #endif
* Unmerged path tools/testing/selftests/bpf/bpf_tcp_helpers.h
* Unmerged path tools/testing/selftests/bpf/bpf_trace_helpers.h
* Unmerged path tools/testing/selftests/bpf/progs/bpf_dctcp.c
* Unmerged path tools/testing/selftests/bpf/progs/fentry_test.c
* Unmerged path tools/testing/selftests/bpf/progs/fexit_bpf2bpf.c
* Unmerged path tools/testing/selftests/bpf/progs/fexit_bpf2bpf_simple.c
* Unmerged path tools/testing/selftests/bpf/progs/fexit_test.c
* Unmerged path tools/testing/selftests/bpf/progs/kfree_skb.c
* Unmerged path tools/testing/selftests/bpf/progs/test_attach_probe.c
* Unmerged path tools/testing/selftests/bpf/progs/test_overhead.c
* Unmerged path tools/testing/selftests/bpf/progs/test_perf_branches.c
* Unmerged path tools/testing/selftests/bpf/progs/test_perf_buffer.c
* Unmerged path tools/testing/selftests/bpf/progs/test_probe_user.c
diff --git a/tools/testing/selftests/bpf/progs/test_trampoline_count.c b/tools/testing/selftests/bpf/progs/test_trampoline_count.c
index e51e6e3a81c2..f030e469d05b 100644
--- a/tools/testing/selftests/bpf/progs/test_trampoline_count.c
+++ b/tools/testing/selftests/bpf/progs/test_trampoline_count.c
@@ -2,7 +2,8 @@
 #include <stdbool.h>
 #include <stddef.h>
 #include <linux/bpf.h>
-#include "bpf_trace_helpers.h"
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_tracing.h>
 
 struct task_struct;
 
* Unmerged path tools/testing/selftests/bpf/progs/test_xdp_bpf2bpf.c
