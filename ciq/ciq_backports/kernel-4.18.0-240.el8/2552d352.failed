PM: QoS: Rename things related to the CPU latency QoS

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Rafael J. Wysocki <rafael.j.wysocki@intel.com>
commit 2552d3520132a22834e0be85c51168a7a798608c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/2552d352.failed

First, rename PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE to
PM_QOS_CPU_LATENCY_DEFAULT_VALUE and update all of the code
referring to it accordingly.

Next, rename cpu_dma_constraints to cpu_latency_constraints, move
the definition of it closer to the functions referring to it and
update all of them accordingly.  [While at it, add a comment to mark
the start of the code related to the CPU latency QoS.]

Finally, rename the pm_qos_power_*() family of functions and
pm_qos_power_fops to cpu_latency_qos_*() and cpu_latency_qos_fops,
respectively, and update the definition of cpu_latency_qos_miscdev.
[While at it, update the miscdev interface code start comment.]

No intentional functional impact.

	Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
	Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
	Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
	Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
	Tested-by: Amit Kucheria <amit.kucheria@linaro.org>
(cherry picked from commit 2552d3520132a22834e0be85c51168a7a798608c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/power/qos.c
diff --cc kernel/power/qos.c
index 61dc8358d615,a6bf53e9db17..000000000000
--- a/kernel/power/qos.c
+++ b/kernel/power/qos.c
@@@ -53,35 -54,8 +53,38 @@@
   * or pm_qos_object list and pm_qos_objects need to happen with pm_qos_lock
   * held, taken with _irqsave.  One lock to rule them all
   */
 +struct pm_qos_object {
 +	struct pm_qos_constraints *constraints;
 +	struct miscdevice pm_qos_power_miscdev;
 +	char *name;
 +};
 +
  static DEFINE_SPINLOCK(pm_qos_lock);
  
++<<<<<<< HEAD
 +static struct pm_qos_object null_pm_qos;
 +
 +static BLOCKING_NOTIFIER_HEAD(cpu_dma_lat_notifier);
 +static struct pm_qos_constraints cpu_dma_constraints = {
 +	.list = PLIST_HEAD_INIT(cpu_dma_constraints.list),
 +	.target_value = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE,
 +	.default_value = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE,
 +	.no_constraint_value = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE,
 +	.type = PM_QOS_MIN,
 +	.notifiers = &cpu_dma_lat_notifier,
 +};
 +static struct pm_qos_object cpu_dma_pm_qos = {
 +	.constraints = &cpu_dma_constraints,
 +	.name = "cpu_dma_latency",
 +};
 +
 +static struct pm_qos_object *pm_qos_array[] = {
 +	&null_pm_qos,
 +	&cpu_dma_pm_qos,
 +};
 +
++=======
++>>>>>>> 2552d3520132 (PM: QoS: Rename things related to the CPU latency QoS)
  /**
   * pm_qos_read_value - Return the current effective constraint value.
   * @c: List of PM QoS constraint requests.
@@@ -245,21 -219,31 +248,39 @@@ bool pm_qos_update_flags(struct pm_qos_
  	return prev_value != curr_value;
  }
  
+ /* Definitions related to the CPU latency QoS. */
+ 
+ static struct pm_qos_constraints cpu_latency_constraints = {
+ 	.list = PLIST_HEAD_INIT(cpu_latency_constraints.list),
+ 	.target_value = PM_QOS_CPU_LATENCY_DEFAULT_VALUE,
+ 	.default_value = PM_QOS_CPU_LATENCY_DEFAULT_VALUE,
+ 	.no_constraint_value = PM_QOS_CPU_LATENCY_DEFAULT_VALUE,
+ 	.type = PM_QOS_MIN,
+ };
+ 
  /**
   * pm_qos_request - returns current system wide qos expectation
 - * @pm_qos_class: Ignored.
 + * @pm_qos_class: identification of which qos value is requested
   *
   * This function returns the current target value.
   */
  int pm_qos_request(int pm_qos_class)
  {
++<<<<<<< HEAD
 +	return pm_qos_read_value(pm_qos_array[pm_qos_class]->constraints);
++=======
+ 	return pm_qos_read_value(&cpu_latency_constraints);
++>>>>>>> 2552d3520132 (PM: QoS: Rename things related to the CPU latency QoS)
  }
  EXPORT_SYMBOL_GPL(pm_qos_request);
  
  int pm_qos_request_active(struct pm_qos_request *req)
  {
++<<<<<<< HEAD
 +	return req->pm_qos_class != 0;
++=======
+ 	return req->qos == &cpu_latency_constraints;
++>>>>>>> 2552d3520132 (PM: QoS: Rename things related to the CPU latency QoS)
  }
  EXPORT_SYMBOL_GPL(pm_qos_request_active);
  
@@@ -297,10 -277,11 +318,18 @@@ void pm_qos_add_request(struct pm_qos_r
  		WARN(1, KERN_ERR "pm_qos_add_request() called for already added request\n");
  		return;
  	}
++<<<<<<< HEAD
 +	req->pm_qos_class = pm_qos_class;
 +	trace_pm_qos_add_request(pm_qos_class, value);
 +	pm_qos_update_target(pm_qos_array[pm_qos_class]->constraints,
 +			     &req->node, PM_QOS_ADD_REQ, value);
++=======
+ 
+ 	trace_pm_qos_add_request(PM_QOS_CPU_DMA_LATENCY, value);
+ 
+ 	req->qos = &cpu_latency_constraints;
+ 	cpu_latency_qos_update(req, PM_QOS_ADD_REQ, value);
++>>>>>>> 2552d3520132 (PM: QoS: Rename things related to the CPU latency QoS)
  }
  EXPORT_SYMBOL_GPL(pm_qos_add_request);
  
@@@ -356,49 -340,9 +385,53 @@@ void pm_qos_remove_request(struct pm_qo
  }
  EXPORT_SYMBOL_GPL(pm_qos_remove_request);
  
++<<<<<<< HEAD
 +/**
 + * pm_qos_add_notifier - sets notification entry for changes to target value
 + * @pm_qos_class: identifies which qos target changes should be notified.
 + * @notifier: notifier block managed by caller.
 + *
 + * will register the notifier into a notification chain that gets called
 + * upon changes to the pm_qos_class target value.
 + */
 +int pm_qos_add_notifier(int pm_qos_class, struct notifier_block *notifier)
 +{
 +	int retval;
 +
 +	retval = blocking_notifier_chain_register(
 +			pm_qos_array[pm_qos_class]->constraints->notifiers,
 +			notifier);
 +
 +	return retval;
 +}
 +EXPORT_SYMBOL_GPL(pm_qos_add_notifier);
 +
 +/**
 + * pm_qos_remove_notifier - deletes notification entry from chain.
 + * @pm_qos_class: identifies which qos target changes are notified.
 + * @notifier: notifier block to be removed.
 + *
 + * will remove the notifier from the notification chain that gets called
 + * upon changes to the pm_qos_class target value.
 + */
 +int pm_qos_remove_notifier(int pm_qos_class, struct notifier_block *notifier)
 +{
 +	int retval;
 +
 +	retval = blocking_notifier_chain_unregister(
 +			pm_qos_array[pm_qos_class]->constraints->notifiers,
 +			notifier);
 +
 +	return retval;
 +}
 +EXPORT_SYMBOL_GPL(pm_qos_remove_notifier);
 +
 +/* User space interface to global PM QoS via misc device. */
++=======
+ /* User space interface to the CPU latency QoS via misc device. */
++>>>>>>> 2552d3520132 (PM: QoS: Rename things related to the CPU latency QoS)
  
- static int pm_qos_power_open(struct inode *inode, struct file *filp)
+ static int cpu_latency_qos_open(struct inode *inode, struct file *filp)
  {
  	struct pm_qos_request *req;
  
@@@ -435,7 -379,7 +468,11 @@@ static ssize_t cpu_latency_qos_read(str
  		return -EINVAL;
  
  	spin_lock_irqsave(&pm_qos_lock, flags);
++<<<<<<< HEAD
 +	value = pm_qos_get_value(pm_qos_array[req->pm_qos_class]->constraints);
++=======
+ 	value = pm_qos_get_value(&cpu_latency_constraints);
++>>>>>>> 2552d3520132 (PM: QoS: Rename things related to the CPU latency QoS)
  	spin_unlock_irqrestore(&pm_qos_lock, flags);
  
  	return simple_read_from_buffer(buf, count, f_pos, &value, sizeof(s32));
@@@ -470,16 -414,13 +507,24 @@@ static const struct file_operations cpu
  	.llseek = noop_llseek,
  };
  
++<<<<<<< HEAD
 +static int register_pm_qos_misc(struct pm_qos_object *qos)
 +{
 +	qos->pm_qos_power_miscdev.minor = MISC_DYNAMIC_MINOR;
 +	qos->pm_qos_power_miscdev.name = qos->name;
 +	qos->pm_qos_power_miscdev.fops = &pm_qos_power_fops;
 +
 +	return misc_register(&qos->pm_qos_power_miscdev);
 +}
++=======
+ static struct miscdevice cpu_latency_qos_miscdev = {
+ 	.minor = MISC_DYNAMIC_MINOR,
+ 	.name = "cpu_dma_latency",
+ 	.fops = &cpu_latency_qos_fops,
+ };
++>>>>>>> 2552d3520132 (PM: QoS: Rename things related to the CPU latency QoS)
  
- static int __init pm_qos_power_init(void)
+ static int __init cpu_latency_qos_init(void)
  {
  	int ret;
  
diff --git a/drivers/tty/serial/8250/8250_omap.c b/drivers/tty/serial/8250/8250_omap.c
index 1b337fee07ed..76ab6be66947 100644
--- a/drivers/tty/serial/8250/8250_omap.c
+++ b/drivers/tty/serial/8250/8250_omap.c
@@ -1217,8 +1217,8 @@ static int omap8250_probe(struct platform_device *pdev)
 			 DEFAULT_CLK_SPEED);
 	}
 
-	priv->latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
-	priv->calc_latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
+	priv->latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
+	priv->calc_latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
 	pm_qos_add_request(&priv->pm_qos_request, PM_QOS_CPU_DMA_LATENCY,
 			   priv->latency);
 	INIT_WORK(&priv->qos_work, omap8250_uart_qos_work);
@@ -1433,7 +1433,7 @@ static int omap8250_runtime_suspend(struct device *dev)
 	if (up->dma && up->dma->rxchan)
 		omap_8250_rx_dma_flush(up);
 
-	priv->latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
+	priv->latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
 	schedule_work(&priv->qos_work);
 
 	return 0;
diff --git a/drivers/tty/serial/omap-serial.c b/drivers/tty/serial/omap-serial.c
index 6420ae581a80..a909bfc275b8 100644
--- a/drivers/tty/serial/omap-serial.c
+++ b/drivers/tty/serial/omap-serial.c
@@ -1722,8 +1722,8 @@ static int serial_omap_probe(struct platform_device *pdev)
 			 DEFAULT_CLK_SPEED);
 	}
 
-	up->latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
-	up->calc_latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
+	up->latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
+	up->calc_latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
 	pm_qos_add_request(&up->pm_qos_request,
 		PM_QOS_CPU_DMA_LATENCY, up->latency);
 	INIT_WORK(&up->qos_work, serial_omap_uart_qos_work);
@@ -1869,7 +1869,7 @@ static int serial_omap_runtime_suspend(struct device *dev)
 
 	serial_omap_enable_wakeup(up, true);
 
-	up->latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
+	up->latency = PM_QOS_CPU_LATENCY_DEFAULT_VALUE;
 	schedule_work(&up->qos_work);
 
 	return 0;
diff --git a/include/linux/pm_qos.h b/include/linux/pm_qos.h
index 7df56233f298..3c488ed3c897 100644
--- a/include/linux/pm_qos.h
+++ b/include/linux/pm_qos.h
@@ -28,7 +28,7 @@ enum pm_qos_flags_status {
 #define PM_QOS_LATENCY_ANY	S32_MAX
 #define PM_QOS_LATENCY_ANY_NS	((s64)PM_QOS_LATENCY_ANY * NSEC_PER_USEC)
 
-#define PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE	(2000 * USEC_PER_SEC)
+#define PM_QOS_CPU_LATENCY_DEFAULT_VALUE	(2000 * USEC_PER_SEC)
 #define PM_QOS_RESUME_LATENCY_DEFAULT_VALUE	PM_QOS_LATENCY_ANY
 #define PM_QOS_RESUME_LATENCY_NO_CONSTRAINT	PM_QOS_LATENCY_ANY
 #define PM_QOS_RESUME_LATENCY_NO_CONSTRAINT_NS	PM_QOS_LATENCY_ANY_NS
* Unmerged path kernel/power/qos.c
