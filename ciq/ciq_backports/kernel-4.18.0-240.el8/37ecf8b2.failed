compat_sys_ioctl(): make parallel to do_vfs_ioctl()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Al Viro <viro@zeniv.linux.org.uk>
commit 37ecf8b20abd05cdcb6391e842802e3b4ca97876
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/37ecf8b2.failed

Handle ioctls that might be handled without reaching ->ioctl() in
native case on the top level there.  The counterpart of vfs_ioctl()
(i.e. calling ->unlock_ioctl(), etc.) left as-is; eventually
that would turn simply into the call of ->compat_ioctl(), but
that'll take more work.  Once that is done, we can move the
remains of compat_sys_ioctl() into fs/ioctl.c and finally bury
fs/compat_ioctl.c.

	Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
	Signed-off-by: Arnd Bergmann <arnd@arndb.de>
(cherry picked from commit 37ecf8b20abd05cdcb6391e842802e3b4ca97876)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/compat_ioctl.c
diff --cc fs/compat_ioctl.c
index 52e8324e4cf7,cec3ec0a1727..000000000000
--- a/fs/compat_ioctl.c
+++ b/fs/compat_ioctl.c
@@@ -700,91 -485,10 +700,92 @@@ static int rtc_ioctl(struct file *file
  
  static unsigned int ioctl_pointer[] = {
  /* compatible ioctls first */
 +COMPATIBLE_IOCTL(0x4B50)   /* KDGHWCLK - not in the kernel, but don't complain */
 +COMPATIBLE_IOCTL(0x4B51)   /* KDSHWCLK - not in the kernel, but don't complain */
 +
 +/* Big T */
 +COMPATIBLE_IOCTL(TCGETA)
 +COMPATIBLE_IOCTL(TCSETA)
 +COMPATIBLE_IOCTL(TCSETAW)
 +COMPATIBLE_IOCTL(TCSETAF)
 +COMPATIBLE_IOCTL(TCSBRK)
 +COMPATIBLE_IOCTL(TCXONC)
 +COMPATIBLE_IOCTL(TCFLSH)
 +COMPATIBLE_IOCTL(TCGETS)
 +COMPATIBLE_IOCTL(TCSETS)
 +COMPATIBLE_IOCTL(TCSETSW)
 +COMPATIBLE_IOCTL(TCSETSF)
 +COMPATIBLE_IOCTL(TIOCLINUX)
 +COMPATIBLE_IOCTL(TIOCSBRK)
 +COMPATIBLE_IOCTL(TIOCGDEV)
 +COMPATIBLE_IOCTL(TIOCCBRK)
 +COMPATIBLE_IOCTL(TIOCGSID)
 +COMPATIBLE_IOCTL(TIOCGICOUNT)
 +COMPATIBLE_IOCTL(TIOCGEXCL)
  /* Little t */
 +COMPATIBLE_IOCTL(TIOCGETD)
 +COMPATIBLE_IOCTL(TIOCSETD)
 +COMPATIBLE_IOCTL(TIOCEXCL)
 +COMPATIBLE_IOCTL(TIOCNXCL)
 +COMPATIBLE_IOCTL(TIOCCONS)
 +COMPATIBLE_IOCTL(TIOCGSOFTCAR)
 +COMPATIBLE_IOCTL(TIOCSSOFTCAR)
 +COMPATIBLE_IOCTL(TIOCSWINSZ)
 +COMPATIBLE_IOCTL(TIOCGWINSZ)
 +COMPATIBLE_IOCTL(TIOCMGET)
 +COMPATIBLE_IOCTL(TIOCMBIC)
 +COMPATIBLE_IOCTL(TIOCMBIS)
 +COMPATIBLE_IOCTL(TIOCMSET)
 +COMPATIBLE_IOCTL(TIOCNOTTY)
 +COMPATIBLE_IOCTL(TIOCSTI)
  COMPATIBLE_IOCTL(TIOCOUTQ)
++<<<<<<< HEAD
 +COMPATIBLE_IOCTL(TIOCSPGRP)
 +COMPATIBLE_IOCTL(TIOCGPGRP)
 +COMPATIBLE_IOCTL(TIOCSERGETLSR)
 +#ifdef TIOCSRS485
 +COMPATIBLE_IOCTL(TIOCSRS485)
 +#endif
 +#ifdef TIOCGRS485
 +COMPATIBLE_IOCTL(TIOCGRS485)
 +#endif
 +#ifdef TCGETS2
 +COMPATIBLE_IOCTL(TCGETS2)
 +COMPATIBLE_IOCTL(TCSETS2)
 +COMPATIBLE_IOCTL(TCSETSW2)
 +COMPATIBLE_IOCTL(TCSETSF2)
 +#endif
 +/* Little f */
 +COMPATIBLE_IOCTL(FIOCLEX)
 +COMPATIBLE_IOCTL(FIONCLEX)
 +COMPATIBLE_IOCTL(FIOASYNC)
 +COMPATIBLE_IOCTL(FIONBIO)
 +COMPATIBLE_IOCTL(FIONREAD)  /* This is also TIOCINQ */
 +COMPATIBLE_IOCTL(FS_IOC_FIEMAP)
 +/* 0x00 */
 +COMPATIBLE_IOCTL(FIBMAP)
 +COMPATIBLE_IOCTL(FIGETBSZ)
++=======
++>>>>>>> 37ecf8b20abd (compat_sys_ioctl(): make parallel to do_vfs_ioctl())
  /* 'X' - originally XFS but some now in the VFS */
- COMPATIBLE_IOCTL(FIFREEZE)
- COMPATIBLE_IOCTL(FITHAW)
  COMPATIBLE_IOCTL(FITRIM)
 +COMPATIBLE_IOCTL(KDGETKEYCODE)
 +COMPATIBLE_IOCTL(KDSETKEYCODE)
 +COMPATIBLE_IOCTL(KDGKBTYPE)
 +COMPATIBLE_IOCTL(KDGETMODE)
 +COMPATIBLE_IOCTL(KDGKBMODE)
 +COMPATIBLE_IOCTL(KDGKBMETA)
 +COMPATIBLE_IOCTL(KDGKBENT)
 +COMPATIBLE_IOCTL(KDSKBENT)
 +COMPATIBLE_IOCTL(KDGKBSENT)
 +COMPATIBLE_IOCTL(KDSKBSENT)
 +COMPATIBLE_IOCTL(KDGKBDIACR)
 +COMPATIBLE_IOCTL(KDSKBDIACR)
 +COMPATIBLE_IOCTL(KDGKBDIACRUC)
 +COMPATIBLE_IOCTL(KDSKBDIACRUC)
 +COMPATIBLE_IOCTL(KDKBDREP)
 +COMPATIBLE_IOCTL(KDGKBLED)
 +COMPATIBLE_IOCTL(KDGETLED)
  #ifdef CONFIG_BLOCK
  /* Big S */
  COMPATIBLE_IOCTL(SCSI_IOCTL_GET_IDLUN)
* Unmerged path fs/compat_ioctl.c
