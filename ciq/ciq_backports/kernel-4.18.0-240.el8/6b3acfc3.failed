flow_dissector: fix document for skb_flow_get_icmp_tci

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Li RongQing <lirongqing@baidu.com>
commit 6b3acfc3cc3d54a99cc5148960edfc38c94a93f2
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/6b3acfc3.failed

using correct input parameter name to fix the below warning:

net/core/flow_dissector.c:242: warning: Function parameter or member 'thoff' not described in 'skb_flow_get_icmp_tci'
net/core/flow_dissector.c:242: warning: Excess function parameter 'toff' description in 'skb_flow_get_icmp_tci'

	Signed-off-by: Li RongQing <lirongqing@baidu.com>
	Reviewed-by: Simon Horman <simon.horman@netronome.com>
	Signed-off-by: David S. Miller <davem@davemloft.net>
(cherry picked from commit 6b3acfc3cc3d54a99cc5148960edfc38c94a93f2)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/core/flow_dissector.c
diff --cc net/core/flow_dissector.c
index f70970e9cb2b,f560b4902060..000000000000
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@@ -237,6 -213,72 +237,75 @@@ __be32 __skb_flow_get_ports(const struc
  }
  EXPORT_SYMBOL(__skb_flow_get_ports);
  
++<<<<<<< HEAD
++=======
+ static bool icmp_has_id(u8 type)
+ {
+ 	switch (type) {
+ 	case ICMP_ECHO:
+ 	case ICMP_ECHOREPLY:
+ 	case ICMP_TIMESTAMP:
+ 	case ICMP_TIMESTAMPREPLY:
+ 	case ICMPV6_ECHO_REQUEST:
+ 	case ICMPV6_ECHO_REPLY:
+ 		return true;
+ 	}
+ 
+ 	return false;
+ }
+ 
+ /**
+  * skb_flow_get_icmp_tci - extract ICMP(6) Type, Code and Identifier fields
+  * @skb: sk_buff to extract from
+  * @key_icmp: struct flow_dissector_key_icmp to fill
+  * @data: raw buffer pointer to the packet
+  * @thoff: offset to extract at
+  * @hlen: packet header length
+  */
+ void skb_flow_get_icmp_tci(const struct sk_buff *skb,
+ 			   struct flow_dissector_key_icmp *key_icmp,
+ 			   void *data, int thoff, int hlen)
+ {
+ 	struct icmphdr *ih, _ih;
+ 
+ 	ih = __skb_header_pointer(skb, thoff, sizeof(_ih), data, hlen, &_ih);
+ 	if (!ih)
+ 		return;
+ 
+ 	key_icmp->type = ih->type;
+ 	key_icmp->code = ih->code;
+ 
+ 	/* As we use 0 to signal that the Id field is not present,
+ 	 * avoid confusion with packets without such field
+ 	 */
+ 	if (icmp_has_id(ih->type))
+ 		key_icmp->id = ih->un.echo.id ? : 1;
+ 	else
+ 		key_icmp->id = 0;
+ }
+ EXPORT_SYMBOL(skb_flow_get_icmp_tci);
+ 
+ /* If FLOW_DISSECTOR_KEY_ICMP is set, dissect an ICMP packet
+  * using skb_flow_get_icmp_tci().
+  */
+ static void __skb_flow_dissect_icmp(const struct sk_buff *skb,
+ 				    struct flow_dissector *flow_dissector,
+ 				    void *target_container,
+ 				    void *data, int thoff, int hlen)
+ {
+ 	struct flow_dissector_key_icmp *key_icmp;
+ 
+ 	if (!dissector_uses_key(flow_dissector, FLOW_DISSECTOR_KEY_ICMP))
+ 		return;
+ 
+ 	key_icmp = skb_flow_dissector_target(flow_dissector,
+ 					     FLOW_DISSECTOR_KEY_ICMP,
+ 					     target_container);
+ 
+ 	skb_flow_get_icmp_tci(skb, key_icmp, data, thoff, hlen);
+ }
+ 
++>>>>>>> 6b3acfc3cc3d (flow_dissector: fix document for skb_flow_get_icmp_tci)
  void skb_flow_dissect_meta(const struct sk_buff *skb,
  			   struct flow_dissector *flow_dissector,
  			   void *target_container)
* Unmerged path net/core/flow_dissector.c
