perf header: Add check for unexpected use of reserved membrs in event attr

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Kan Liang <kan.liang@linux.intel.com>
commit 277ce1efa7b504873cd32a4106654836c2f80e1b
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/277ce1ef.failed

The perf.data may be generated by a newer version of perf tool, which
support new input bits in attr, e.g. new bit for branch_sample_type.

The perf.data may be parsed by an older version of perf tool later.  The
old perf tool may parse the perf.data incorrectly. There is no warning
message for this case.

Current perf header never check for unknown input bits in attr.

When read the event desc from header, check the stored event attr.  The
reserved bits, sample type, read format and branch sample type will be
checked.

	Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
	Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Pavel Gerasimov <pavel.gerasimov@intel.com>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: Vitaly Slobodskoy <vitaly.slobodskoy@intel.com>
Link: http://lkml.kernel.org/r/20200228163011.19358-4-kan.liang@linux.intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 277ce1efa7b504873cd32a4106654836c2f80e1b)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/header.c
diff --cc tools/perf/util/header.c
index 99641a18bac2,acbd046bf95c..000000000000
--- a/tools/perf/util/header.c
+++ b/tools/perf/util/header.c
@@@ -1594,9 -1590,43 +1594,47 @@@ static void free_event_desc(struct perf
  	free(events);
  }
  
++<<<<<<< HEAD
 +static struct perf_evsel *read_event_desc(struct feat_fd *ff)
++=======
+ static bool perf_attr_check(struct perf_event_attr *attr)
+ {
+ 	if (attr->__reserved_1 || attr->__reserved_2 || attr->__reserved_3) {
+ 		pr_warning("Reserved bits are set unexpectedly. "
+ 			   "Please update perf tool.\n");
+ 		return false;
+ 	}
+ 
+ 	if (attr->sample_type & ~(PERF_SAMPLE_MAX-1)) {
+ 		pr_warning("Unknown sample type (0x%llx) is detected. "
+ 			   "Please update perf tool.\n",
+ 			   attr->sample_type);
+ 		return false;
+ 	}
+ 
+ 	if (attr->read_format & ~(PERF_FORMAT_MAX-1)) {
+ 		pr_warning("Unknown read format (0x%llx) is detected. "
+ 			   "Please update perf tool.\n",
+ 			   attr->read_format);
+ 		return false;
+ 	}
+ 
+ 	if ((attr->sample_type & PERF_SAMPLE_BRANCH_STACK) &&
+ 	    (attr->branch_sample_type & ~(PERF_SAMPLE_BRANCH_MAX-1))) {
+ 		pr_warning("Unknown branch sample type (0x%llx) is detected. "
+ 			   "Please update perf tool.\n",
+ 			   attr->branch_sample_type);
+ 
+ 		return false;
+ 	}
+ 
+ 	return true;
+ }
+ 
+ static struct evsel *read_event_desc(struct feat_fd *ff)
++>>>>>>> 277ce1efa7b5 (perf header: Add check for unexpected use of reserved membrs in event attr)
  {
 -	struct evsel *evsel, *events = NULL;
 +	struct perf_evsel *evsel, *events = NULL;
  	u64 *id;
  	void *buf = NULL;
  	u32 nre, sz, nr, i, j;
@@@ -1636,8 -1666,11 +1674,11 @@@
  		if (ff->ph->needs_swap)
  			perf_event__attr_swap(buf);
  
 -		memcpy(&evsel->core.attr, buf, msz);
 +		memcpy(&evsel->attr, buf, msz);
  
+ 		if (!perf_attr_check(&evsel->core.attr))
+ 			goto error;
+ 
  		if (do_read_u32(ff, &nr))
  			goto error;
  
* Unmerged path tools/perf/util/header.c
