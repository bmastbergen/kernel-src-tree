gpio: don't WARN() on NULL descs if gpiolib is disabled

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Bartosz Golaszewski <bgolaszewski@baylibre.com>
commit ffe0bbabb0cffceceae07484fde1ec2a63b1537c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/ffe0bbab.failed

If gpiolib is disabled, we use the inline stubs from gpio/consumer.h
instead of regular definitions of GPIO API. The stubs for 'optional'
variants of gpiod_get routines return NULL in this case as if the
relevant GPIO wasn't found. This is correct so far.

Calling other (non-gpio_get) stubs from this header triggers a warning
because the GPIO descriptor couldn't have been requested. The warning
however is unconditional (WARN_ON(1)) and is emitted even if the passed
descriptor pointer is NULL.

We don't want to force the users of 'optional' gpio_get to check the
returned pointer before calling e.g. gpiod_set_value() so let's only
WARN on non-NULL descriptors.

	Cc: stable@vger.kernel.org
	Reported-by: Claus H. Stovgaard <cst@phaseone.com>
	Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
(cherry picked from commit ffe0bbabb0cffceceae07484fde1ec2a63b1537c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	include/linux/gpio/consumer.h
diff --cc include/linux/gpio/consumer.h
index 359518ef39a1,a7f08fb0f865..000000000000
--- a/include/linux/gpio/consumer.h
+++ b/include/linux/gpio/consumer.h
@@@ -374,15 -374,16 +374,20 @@@ static inline int gpiod_get_array_value
  static inline void gpiod_set_value(struct gpio_desc *desc, int value)
  {
  	/* GPIO can never have been requested */
- 	WARN_ON(1);
+ 	WARN_ON(desc);
  }
 -static inline int gpiod_set_array_value(unsigned int array_size,
 -					struct gpio_desc **desc_array,
 -					struct gpio_array *array_info,
 -					unsigned long *value_bitmap)
 +static inline void gpiod_set_array_value(unsigned int array_size,
 +					 struct gpio_desc **desc_array,
 +					 struct gpio_array *array_info,
 +					 unsigned long *value_bitmap)
  {
  	/* GPIO can never have been requested */
++<<<<<<< HEAD
 +	WARN_ON(1);
++=======
+ 	WARN_ON(desc_array);
+ 	return 0;
++>>>>>>> ffe0bbabb0cf (gpio: don't WARN() on NULL descs if gpiolib is disabled)
  }
  static inline int gpiod_get_raw_value(const struct gpio_desc *desc)
  {
@@@ -432,15 -433,16 +437,20 @@@ static inline int gpiod_get_array_value
  static inline void gpiod_set_value_cansleep(struct gpio_desc *desc, int value)
  {
  	/* GPIO can never have been requested */
- 	WARN_ON(1);
+ 	WARN_ON(desc);
  }
 -static inline int gpiod_set_array_value_cansleep(unsigned int array_size,
 +static inline void gpiod_set_array_value_cansleep(unsigned int array_size,
  					    struct gpio_desc **desc_array,
  					    struct gpio_array *array_info,
  					    unsigned long *value_bitmap)
  {
  	/* GPIO can never have been requested */
++<<<<<<< HEAD
 +	WARN_ON(1);
++=======
+ 	WARN_ON(desc_array);
+ 	return 0;
++>>>>>>> ffe0bbabb0cf (gpio: don't WARN() on NULL descs if gpiolib is disabled)
  }
  static inline int gpiod_get_raw_value_cansleep(const struct gpio_desc *desc)
  {
* Unmerged path include/linux/gpio/consumer.h
