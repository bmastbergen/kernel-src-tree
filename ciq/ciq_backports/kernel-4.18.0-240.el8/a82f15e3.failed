perf map: Remove unused functions

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit a82f15e39a4b75482d48d0910f6abe5e4f869b76
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/a82f15e3.failed

At some point those stopped being used, prune them.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Link: https://lkml.kernel.org/n/tip-p2k98mj3ff2uk1z95sbl5r6e@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit a82f15e39a4b75482d48d0910f6abe5e4f869b76)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/map.c
#	tools/perf/util/map_groups.h
diff --cc tools/perf/util/map.c
index be8418d003b5,267d951b5dfd..000000000000
--- a/tools/perf/util/map.c
+++ b/tools/perf/util/map.c
@@@ -530,9 -525,67 +530,59 @@@ void map_groups__init(struct map_group
  	refcount_set(&mg->refcnt, 1);
  }
  
 -static void __map_groups__free_maps_by_name(struct map_groups *mg)
 -{
 -	/*
 -	 * Free everything to try to do it from the rbtree in the next search
 -	 */
 -	zfree(&mg->maps_by_name);
 -	mg->nr_maps_allocated = 0;
 -}
 -
  void map_groups__insert(struct map_groups *mg, struct map *map)
  {
++<<<<<<< HEAD
 +	maps__insert(&mg->maps, map);
++=======
+ 	struct maps *maps = &mg->maps;
+ 
+ 	down_write(&maps->lock);
+ 	__maps__insert(maps, map);
+ 	++mg->nr_maps;
+ 
+ 	/*
+ 	 * If we already performed some search by name, then we need to add the just
+ 	 * inserted map and resort.
+ 	 */
+ 	if (mg->maps_by_name) {
+ 		if (mg->nr_maps > mg->nr_maps_allocated) {
+ 			int nr_allocate = mg->nr_maps * 2;
+ 			struct map **maps_by_name = realloc(mg->maps_by_name, nr_allocate * sizeof(map));
+ 
+ 			if (maps_by_name == NULL) {
+ 				__map_groups__free_maps_by_name(mg);
+ 				return;
+ 			}
+ 
+ 			mg->maps_by_name = maps_by_name;
+ 			mg->nr_maps_allocated = nr_allocate;
+ 		}
+ 		mg->maps_by_name[mg->nr_maps - 1] = map;
+ 		__map_groups__sort_by_name(mg);
+ 	}
+ 	up_write(&maps->lock);
+ }
+ 
+ static void __maps__remove(struct maps *maps, struct map *map)
+ {
+ 	rb_erase_init(&map->rb_node, &maps->entries);
+ 	map__put(map);
+ }
+ 
+ void map_groups__remove(struct map_groups *mg, struct map *map)
+ {
+ 	struct maps *maps = &mg->maps;
+ 	down_write(&maps->lock);
+ 	if (mg->last_search_by_name == map)
+ 		mg->last_search_by_name = NULL;
+ 
+ 	__maps__remove(maps, map);
+ 	--mg->nr_maps;
+ 	if (mg->maps_by_name)
+ 		__map_groups__free_maps_by_name(mg);
+ 	up_write(&maps->lock);
++>>>>>>> a82f15e39a4b (perf map: Remove unused functions)
  }
  
  static void __maps__purge(struct maps *maps)
@@@ -626,11 -660,11 +676,11 @@@ static bool map__contains_symbol(struc
  	return ip >= map->start && ip < map->end;
  }
  
- struct symbol *maps__find_symbol_by_name(struct maps *maps, const char *name,
- 					 struct map **mapp)
+ static struct symbol *maps__find_symbol_by_name(struct maps *maps, const char *name,
+ 						struct map **mapp)
  {
  	struct symbol *sym;
 -	struct map *pos;
 +	struct rb_node *nd;
  
  	down_read(&maps->lock);
  
@@@ -866,51 -896,6 +916,54 @@@ static void __maps__insert(struct maps 
  	map__get(map);
  }
  
++<<<<<<< HEAD
 +static void __maps__insert_name(struct maps *maps, struct map *map)
 +{
 +	struct rb_node **p = &maps->names.rb_node;
 +	struct rb_node *parent = NULL;
 +	struct map *m;
 +	int rc;
 +
 +	while (*p != NULL) {
 +		parent = *p;
 +		m = rb_entry(parent, struct map, rb_node_name);
 +		rc = strcmp(m->dso->short_name, map->dso->short_name);
 +		if (rc < 0)
 +			p = &(*p)->rb_left;
 +		else
 +			p = &(*p)->rb_right;
 +	}
 +	rb_link_node(&map->rb_node_name, parent, p);
 +	rb_insert_color(&map->rb_node_name, &maps->names);
 +	map__get(map);
 +}
 +
 +void maps__insert(struct maps *maps, struct map *map)
 +{
 +	down_write(&maps->lock);
 +	__maps__insert(maps, map);
 +	__maps__insert_name(maps, map);
 +	up_write(&maps->lock);
 +}
 +
 +static void __maps__remove(struct maps *maps, struct map *map)
 +{
 +	rb_erase_init(&map->rb_node, &maps->entries);
 +	map__put(map);
 +
 +	rb_erase_init(&map->rb_node_name, &maps->names);
 +	map__put(map);
 +}
 +
 +void maps__remove(struct maps *maps, struct map *map)
 +{
 +	down_write(&maps->lock);
 +	__maps__remove(maps, map);
 +	up_write(&maps->lock);
 +}
 +
++=======
++>>>>>>> a82f15e39a4b (perf map: Remove unused functions)
  struct map *maps__find(struct maps *maps, u64 ip)
  {
  	struct rb_node *p;
diff --cc tools/perf/util/map_groups.h
index 1876388e8dd8,f6270243ac4b..000000000000
--- a/tools/perf/util/map_groups.h
+++ b/tools/perf/util/map_groups.h
@@@ -20,12 -19,15 +20,24 @@@ struct maps 
  	struct rw_semaphore lock;
  };
  
++<<<<<<< HEAD
 +void maps__insert(struct maps *maps, struct map *map);
 +void maps__remove(struct maps *maps, struct map *map);
 +struct map *maps__find(struct maps *maps, u64 addr);
 +struct map *maps__first(struct maps *maps);
 +struct map *map__next(struct map *map);
 +struct symbol *maps__find_symbol_by_name(struct maps *maps, const char *name, struct map **mapp);
++=======
+ struct map *maps__find(struct maps *maps, u64 addr);
+ struct map *maps__first(struct maps *maps);
+ struct map *map__next(struct map *map);
+ 
+ #define maps__for_each_entry(maps, map) \
+ 	for (map = maps__first(maps); map; map = map__next(map))
+ 
+ #define maps__for_each_entry_safe(maps, map, next) \
+ 	for (map = maps__first(maps), next = map__next(map); map; map = next, next = map__next(map))
++>>>>>>> a82f15e39a4b (perf map: Remove unused functions)
  
  struct map_groups {
  	struct maps	 maps;
* Unmerged path tools/perf/util/map.c
* Unmerged path tools/perf/util/map_groups.h
