io_uring: separate the io_free_req and io_free_req_find_next interface

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jackie Liu <liuyun01@kylinos.cn>
commit c69f8dbe2426cbf6150407b7e86ce85bb463c1dc
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/c69f8dbe.failed

Similar to the distinction between io_put_req and io_put_req_find_next,
io_free_req has been modified similarly, with no functional changes.

	Signed-off-by: Jackie Liu <liuyun01@kylinos.cn>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit c69f8dbe2426cbf6150407b7e86ce85bb463c1dc)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index fca9cdc96d77,2b4257a965db..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -665,15 -862,34 +665,19 @@@ static void io_fail_links(struct io_kio
  
  	while (!list_empty(&req->link_list)) {
  		link = list_first_entry(&req->link_list, struct io_kiocb, list);
 -		list_del_init(&link->list);
 -
 -		trace_io_uring_fail_link(req, link);
 +		list_del(&link->list);
  
 -		if ((req->flags & REQ_F_LINK_TIMEOUT) &&
 -		    link->submit.sqe->opcode == IORING_OP_LINK_TIMEOUT) {
 -			io_link_cancel_timeout(link);
 -		} else {
 -			io_cqring_fill_event(link, -ECANCELED);
 -			io_double_put_req(link);
 -		}
 +		io_cqring_add_event(req->ctx, link->user_data, -ECANCELED);
 +		__io_free_req(link);
  	}
 -
 -	io_commit_cqring(ctx);
 -	spin_unlock_irqrestore(&ctx->completion_lock, flags);
 -	io_cqring_ev_posted(ctx);
  }
  
++<<<<<<< HEAD
 +static void io_free_req(struct io_kiocb *req)
++=======
+ static void io_free_req_find_next(struct io_kiocb *req, struct io_kiocb **nxt)
++>>>>>>> c69f8dbe2426 (io_uring: separate the io_free_req and io_free_req_find_next interface)
  {
 -	if (likely(!(req->flags & REQ_F_LINK))) {
 -		__io_free_req(req);
 -		return;
 -	}
 -
  	/*
  	 * If LINK is set, we have dependent requests in this chain. If we
  	 * didn't fail this request, queue the first one up, moving any other
@@@ -690,6 -917,30 +694,33 @@@
  	__io_free_req(req);
  }
  
++<<<<<<< HEAD
++=======
+ static void io_free_req(struct io_kiocb *req)
+ {
+ 	io_free_req_find_next(req, NULL);
+ }
+ 
+ /*
+  * Drop reference to request, return next in chain (if there is one) if this
+  * was the last reference to this request.
+  */
+ static void io_put_req_find_next(struct io_kiocb *req, struct io_kiocb **nxtptr)
+ {
+ 	struct io_kiocb *nxt = NULL;
+ 
+ 	if (refcount_dec_and_test(&req->refs))
+ 		io_free_req_find_next(req, &nxt);
+ 
+ 	if (nxt) {
+ 		if (nxtptr)
+ 			*nxtptr = nxt;
+ 		else
+ 			io_queue_async_work(nxt);
+ 	}
+ }
+ 
++>>>>>>> c69f8dbe2426 (io_uring: separate the io_free_req and io_free_req_find_next interface)
  static void io_put_req(struct io_kiocb *req)
  {
  	if (refcount_dec_and_test(&req->refs))
* Unmerged path fs/io_uring.c
