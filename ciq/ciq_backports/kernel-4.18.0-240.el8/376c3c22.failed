perf report/top TUI: Fix title line formatting

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit 376c3c22e2ba69d7509aa070f1a7dd88efdb0a9c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/376c3c22.failed

In d10ec006dcd7 ("perf hists browser: Allow passing an initial hotkey")
the hist_entry__title() call was cut'n'pasted to a function where the
'title' variable is a pointer, not an array, so the sizeof(title)
continues syntactically valid but ends up reducing the real size of the
buffer where to format the first line in the screen to 8 bytes, which
makes the formatting at the title at each refresh to produce just the
string "Samples ", duh, fix it by passing the size of the buffer.

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jin Yao <yao.jin@linux.intel.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
Fixes: d10ec006dcd7 ("perf hists browser: Allow passing an initial hotkey")
Link: http://lore.kernel.org/lkml/20200330154314.GB4576@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 376c3c22e2ba69d7509aa070f1a7dd88efdb0a9c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/ui/browsers/hists.c
diff --cc tools/perf/ui/browsers/hists.c
index 3386768d57cb,487e54ef56a9..000000000000
--- a/tools/perf/ui/browsers/hists.c
+++ b/tools/perf/ui/browsers/hists.c
@@@ -665,10 -677,81 +665,85 @@@ static int hist_browser__title(struct h
  	return browser->title ? browser->title(browser, bf, size) : 0;
  }
  
++<<<<<<< HEAD
++=======
+ static int hist_browser__handle_hotkey(struct hist_browser *browser, bool warn_lost_event, char *title, size_t size, int key)
+ {
+ 	switch (key) {
+ 	case K_TIMER: {
+ 		struct hist_browser_timer *hbt = browser->hbt;
+ 		u64 nr_entries;
+ 
+ 		WARN_ON_ONCE(!hbt);
+ 
+ 		if (hbt)
+ 			hbt->timer(hbt->arg);
+ 
+ 		if (hist_browser__has_filter(browser) || symbol_conf.report_hierarchy)
+ 			hist_browser__update_nr_entries(browser);
+ 
+ 		nr_entries = hist_browser__nr_entries(browser);
+ 		ui_browser__update_nr_entries(&browser->b, nr_entries);
+ 
+ 		if (warn_lost_event &&
+ 		    (browser->hists->stats.nr_lost_warned !=
+ 		    browser->hists->stats.nr_events[PERF_RECORD_LOST])) {
+ 			browser->hists->stats.nr_lost_warned =
+ 				browser->hists->stats.nr_events[PERF_RECORD_LOST];
+ 			ui_browser__warn_lost_events(&browser->b);
+ 		}
+ 
+ 		hist_browser__title(browser, title, size);
+ 		ui_browser__show_title(&browser->b, title);
+ 		break;
+ 	}
+ 	case 'D': { /* Debug */
+ 		struct hist_entry *h = rb_entry(browser->b.top, struct hist_entry, rb_node);
+ 		static int seq;
+ 
+ 		ui_helpline__pop();
+ 		ui_helpline__fpush("%d: nr_ent=(%d,%d), etl: %d, rows=%d, idx=%d, fve: idx=%d, row_off=%d, nrows=%d",
+ 				   seq++, browser->b.nr_entries, browser->hists->nr_entries,
+ 				   browser->b.extra_title_lines, browser->b.rows,
+ 				   browser->b.index, browser->b.top_idx, h->row_offset, h->nr_rows);
+ 	}
+ 		break;
+ 	case 'C':
+ 		/* Collapse the whole world. */
+ 		hist_browser__set_folding(browser, false);
+ 		break;
+ 	case 'c':
+ 		/* Collapse the selected entry. */
+ 		hist_browser__set_folding_selected(browser, false);
+ 		break;
+ 	case 'E':
+ 		/* Expand the whole world. */
+ 		hist_browser__set_folding(browser, true);
+ 		break;
+ 	case 'e':
+ 		/* Expand the selected entry. */
+ 		hist_browser__set_folding_selected(browser, !hist_browser__he_selection_unfolded(browser));
+ 		break;
+ 	case 'H':
+ 		browser->show_headers = !browser->show_headers;
+ 		hist_browser__update_rows(browser);
+ 		break;
+ 	case '+':
+ 		if (hist_browser__toggle_fold(browser))
+ 			break;
+ 		/* fall thru */
+ 	default:
+ 		return -1;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> 376c3c22e2ba (perf report/top TUI: Fix title line formatting)
  int hist_browser__run(struct hist_browser *browser, const char *help,
 -		      bool warn_lost_event, int key)
 +		      bool warn_lost_event)
  {
 +	int key;
  	char title[160];
  	struct hist_browser_timer *hbt = browser->hbt;
  	int delay_secs = hbt ? hbt->refresh : 0;
@@@ -681,79 -764,14 +756,89 @@@
  	if (ui_browser__show(&browser->b, title, "%s", help) < 0)
  		return -1;
  
++<<<<<<< HEAD
 +	while (1) {
 +		key = ui_browser__run(&browser->b, delay_secs);
 +
 +		switch (key) {
 +		case K_TIMER: {
 +			u64 nr_entries;
 +
 +			WARN_ON_ONCE(!hbt);
 +
 +			if (hbt)
 +				hbt->timer(hbt->arg);
 +
 +			if (hist_browser__has_filter(browser) ||
 +			    symbol_conf.report_hierarchy)
 +				hist_browser__update_nr_entries(browser);
 +
 +			nr_entries = hist_browser__nr_entries(browser);
 +			ui_browser__update_nr_entries(&browser->b, nr_entries);
 +
 +			if (warn_lost_event &&
 +			    (browser->hists->stats.nr_lost_warned !=
 +			    browser->hists->stats.nr_events[PERF_RECORD_LOST])) {
 +				browser->hists->stats.nr_lost_warned =
 +					browser->hists->stats.nr_events[PERF_RECORD_LOST];
 +				ui_browser__warn_lost_events(&browser->b);
 +			}
 +
 +			hist_browser__title(browser, title, sizeof(title));
 +			ui_browser__show_title(&browser->b, title);
 +			continue;
 +		}
 +		case 'D': { /* Debug */
 +			static int seq;
 +			struct hist_entry *h = rb_entry(browser->b.top,
 +							struct hist_entry, rb_node);
 +			ui_helpline__pop();
 +			ui_helpline__fpush("%d: nr_ent=(%d,%d), etl: %d, rows=%d, idx=%d, fve: idx=%d, row_off=%d, nrows=%d",
 +					   seq++, browser->b.nr_entries,
 +					   browser->hists->nr_entries,
 +					   browser->b.extra_title_lines,
 +					   browser->b.rows,
 +					   browser->b.index,
 +					   browser->b.top_idx,
 +					   h->row_offset, h->nr_rows);
 +		}
++=======
+ 	if (key && hist_browser__handle_hotkey(browser, warn_lost_event, title, sizeof(title), key))
+ 		goto out;
+ 
+ 	while (1) {
+ 		key = ui_browser__run(&browser->b, delay_secs);
+ 
+ 		if (hist_browser__handle_hotkey(browser, warn_lost_event, title, sizeof(title), key))
++>>>>>>> 376c3c22e2ba (perf report/top TUI: Fix title line formatting)
 +			break;
 +		case 'C':
 +			/* Collapse the whole world. */
 +			hist_browser__set_folding(browser, false);
 +			break;
 +		case 'c':
 +			/* Collapse the selected entry. */
 +			hist_browser__set_folding_selected(browser, false);
  			break;
 +		case 'E':
 +			/* Expand the whole world. */
 +			hist_browser__set_folding(browser, true);
 +			break;
 +		case 'e':
 +			/* Expand the selected entry. */
 +			hist_browser__set_folding_selected(browser, true);
 +			break;
 +		case 'H':
 +			browser->show_headers = !browser->show_headers;
 +			hist_browser__update_rows(browser);
 +			break;
 +		case '+':
 +			if (hist_browser__toggle_fold(browser))
 +				break;
 +			/* fall thru */
 +		default:
 +			goto out;
 +		}
  	}
  out:
  	ui_browser__hide(&browser->b);
* Unmerged path tools/perf/ui/browsers/hists.c
