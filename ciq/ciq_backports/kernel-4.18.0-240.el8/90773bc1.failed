crypto: ccp - module parameter to limit the number of enabled CCPs

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Hook, Gary <Gary.Hook@amd.com>
commit 90773bc1ab407bc2198d7e9fc1c6d6b5ef27a24f
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/90773bc1.failed

Provide the ability to constrain the total number of enabled devices in
the system. Once max_devs devices have been configured, subsequently
probed devices are ignored.

The max_devs parameter may be zero, in which case all CCPs are disabled.
PSPs are always enabled and active.

Disabling the CCPs also disables DMA and RNG registration.

	Signed-off-by: Gary R Hook <gary.hook@amd.com>
	Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
(cherry picked from commit 90773bc1ab407bc2198d7e9fc1c6d6b5ef27a24f)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/crypto/ccp/ccp-dev.c
diff --cc drivers/crypto/ccp/ccp-dev.c
index 3ea52a1d4b4f,e58d69d4dd43..000000000000
--- a/drivers/crypto/ccp/ccp-dev.c
+++ b/drivers/crypto/ccp/ccp-dev.c
@@@ -26,6 -28,19 +27,22 @@@
  
  #include "ccp-dev.h"
  
++<<<<<<< HEAD
++=======
+ #define MAX_CCPS 32
+ 
+ /* Limit CCP use to a specifed number of queues per device */
+ static unsigned int nqueues = 0;
+ module_param(nqueues, uint, 0444);
+ MODULE_PARM_DESC(nqueues, "Number of queues per CCP (minimum 1; default: all available)");
+ 
+ /* Limit the maximum number of configured CCPs */
+ static atomic_t dev_count = ATOMIC_INIT(0);
+ static unsigned int max_devs = MAX_CCPS;
+ module_param(max_devs, uint, 0444);
+ MODULE_PARM_DESC(max_devs, "Maximum number of CCPs to enable (default: all; 0 disables all CCPs)");
+ 
++>>>>>>> 90773bc1ab40 (crypto: ccp - module parameter to limit the number of enabled CCPs)
  struct ccp_tasklet_data {
  	struct completion completion;
  	struct ccp_cmd *cmd;
* Unmerged path drivers/crypto/ccp/ccp-dev.c
