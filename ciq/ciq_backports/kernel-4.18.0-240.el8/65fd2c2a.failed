xfrm: gso partial offload support

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Boris Pismenny <borisp@mellanox.com>
commit 65fd2c2afac31a4b46a80150347a1748fa9101cb
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/65fd2c2a.failed

This patch introduces support for gso partial ESP offload.

	Signed-off-by: Boris Pismenny <borisp@mellanox.com>
	Signed-off-by: Raed Salem <raeds@mellanox.com>
	Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
(cherry picked from commit 65fd2c2afac31a4b46a80150347a1748fa9101cb)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	net/xfrm/xfrm_device.c
diff --cc net/xfrm/xfrm_device.c
index 456be7c7cd0f,e437b60fba51..000000000000
--- a/net/xfrm/xfrm_device.c
+++ b/net/xfrm/xfrm_device.c
@@@ -99,7 -102,9 +100,13 @@@ struct sk_buff *validate_xmit_xfrm(stru
  
  	do {
  		struct sk_buff *nskb = skb2->next;
++<<<<<<< HEAD
 +		skb2->next = NULL;
++=======
+ 
+ 		esp_features |= skb->dev->gso_partial_features;
+ 		skb_mark_not_on_list(skb2);
++>>>>>>> 65fd2c2afac3 (xfrm: gso partial offload support)
  
  		xo = xfrm_offload(skb2);
  		xo->flags |= XFRM_DEV_RESUME;
diff --git a/net/ipv4/esp4_offload.c b/net/ipv4/esp4_offload.c
index 27b0232dd3b1..e03d6447c0ec 100644
--- a/net/ipv4/esp4_offload.c
+++ b/net/ipv4/esp4_offload.c
@@ -139,9 +139,11 @@ static struct sk_buff *esp4_gso_segment(struct sk_buff *skb,
 
 	skb->encap_hdr_csum = 1;
 
-	if (!(features & NETIF_F_HW_ESP) || x->xso.dev != skb->dev)
+	if ((!(skb->dev->gso_partial_features & NETIF_F_HW_ESP) &&
+	     !(features & NETIF_F_HW_ESP)) || x->xso.dev != skb->dev)
 		esp_features = features & ~(NETIF_F_SG | NETIF_F_CSUM_MASK);
-	else if (!(features & NETIF_F_HW_ESP_TX_CSUM))
+	else if (!(features & NETIF_F_HW_ESP_TX_CSUM) &&
+		 !(skb->dev->gso_partial_features & NETIF_F_HW_ESP_TX_CSUM))
 		esp_features = features & ~NETIF_F_CSUM_MASK;
 
 	xo->flags |= XFRM_GSO_SEGMENT;
@@ -182,7 +184,9 @@ static int esp_xmit(struct xfrm_state *x, struct sk_buff *skb,  netdev_features_
 	if (!xo)
 		return -EINVAL;
 
-	if (!(features & NETIF_F_HW_ESP) || x->xso.dev != skb->dev) {
+	if ((!(features & NETIF_F_HW_ESP) &&
+	     !(skb->dev->gso_partial_features & NETIF_F_HW_ESP)) ||
+	    x->xso.dev != skb->dev) {
 		xo->flags |= CRYPTO_FALLBACK;
 		hw_offload = false;
 	}
* Unmerged path net/xfrm/xfrm_device.c
