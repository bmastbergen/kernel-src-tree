perf evsel: Rename perf_evsel__cpus() to evsel__cpus()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Jiri Olsa <jolsa@kernel.org>
commit b49aca3e9ce60d00e5bf0694b2ff4c2cd40809e5
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b49aca3e.failed

Rename perf_evsel__cpus() to evsel__cpus(), so we don't have a name
clash when we add perf_evsel__cpus() in libperf.

	Signed-off-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Michael Petlan <mpetlan@redhat.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
Link: http://lkml.kernel.org/r/20190721112506.12306-19-jolsa@kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit b49aca3e9ce60d00e5bf0694b2ff4c2cd40809e5)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/evsel.h
#	tools/perf/util/stat.c
diff --cc tools/perf/util/evsel.h
index b27935a6d36c,5fec1ca64f58..000000000000
--- a/tools/perf/util/evsel.h
+++ b/tools/perf/util/evsel.h
@@@ -197,14 -197,14 +197,18 @@@ struct target
  struct thread_map;
  struct record_opts;
  
++<<<<<<< HEAD
 +static inline struct cpu_map *perf_evsel__cpus(struct perf_evsel *evsel)
++=======
+ static inline struct perf_cpu_map *evsel__cpus(struct evsel *evsel)
++>>>>>>> b49aca3e9ce6 (perf evsel: Rename perf_evsel__cpus() to evsel__cpus())
  {
  	return evsel->cpus;
  }
  
 -static inline int perf_evsel__nr_cpus(struct evsel *evsel)
 +static inline int perf_evsel__nr_cpus(struct perf_evsel *evsel)
  {
- 	return perf_evsel__cpus(evsel)->nr;
+ 	return evsel__cpus(evsel)->nr;
  }
  
  void perf_counts_values__scale(struct perf_counts_values *count,
diff --cc tools/perf/util/stat.c
index da269d46c09f,63f7815ceb4f..000000000000
--- a/tools/perf/util/stat.c
+++ b/tools/perf/util/stat.c
@@@ -215,7 -215,7 +215,11 @@@ static int check_per_pkg(struct perf_ev
  			 struct perf_counts_values *vals, int cpu, bool *skip)
  {
  	unsigned long *mask = counter->per_pkg_mask;
++<<<<<<< HEAD
 +	struct cpu_map *cpus = perf_evsel__cpus(counter);
++=======
+ 	struct perf_cpu_map *cpus = evsel__cpus(counter);
++>>>>>>> b49aca3e9ce6 (perf evsel: Rename perf_evsel__cpus() to evsel__cpus())
  	int s;
  
  	*skip = false;
* Unmerged path tools/perf/util/evsel.h
diff --git a/tools/perf/util/stat-display.c b/tools/perf/util/stat-display.c
index 58df6a0dbb9f..a49ec355d84d 100644
--- a/tools/perf/util/stat-display.c
+++ b/tools/perf/util/stat-display.c
@@ -109,7 +109,7 @@ static void aggr_printout(struct perf_stat_config *config,
 		} else {
 			fprintf(config->output, "CPU%*d%s ",
 				config->csv_output ? 0 : -5,
-				perf_evsel__cpus(evsel)->map[id],
+				evsel__cpus(evsel)->map[id],
 				config->csv_sep);
 		}
 		break;
@@ -325,7 +325,7 @@ static int first_shadow_cpu(struct perf_stat_config *config,
 		return 0;
 
 	for (i = 0; i < perf_evsel__nr_cpus(evsel); i++) {
-		int cpu2 = perf_evsel__cpus(evsel)->map[i];
+		int cpu2 = evsel__cpus(evsel)->map[i];
 
 		if (config->aggr_get_id(config, evlist->cpus, cpu2) == id)
 			return cpu2;
@@ -593,7 +593,7 @@ static void aggr_cb(struct perf_stat_config *config,
 	for (cpu = 0; cpu < perf_evsel__nr_cpus(counter); cpu++) {
 		struct perf_counts_values *counts;
 
-		s2 = config->aggr_get_id(config, perf_evsel__cpus(counter), cpu);
+		s2 = config->aggr_get_id(config, evsel__cpus(counter), cpu);
 		if (s2 != ad->id)
 			continue;
 		if (first)
* Unmerged path tools/perf/util/stat.c
