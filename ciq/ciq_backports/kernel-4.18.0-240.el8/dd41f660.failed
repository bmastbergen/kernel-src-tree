perf script: Allow specifying event to switch off processing of other events

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Arnaldo Carvalho de Melo <acme@redhat.com>
commit dd41f660c03a6d8f2c2f3b2cccf50d8c4e06dd42
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/dd41f660.failed

Counterpart of --switch-on:

  # perf record -e sched:*,syscalls:sys_*_nanosleep sleep 1
  [ perf record: Woken up 36 times to write data ]
  [ perf record: Captured and wrote 0.032 MB perf.data (10 samples) ]
  #
  # perf script
      :20918 20918 [002] 109866.143696:            sched:sched_waking: comm=perf pid=20919 prio=120 target_cpu=001
      :20918 20918 [002] 109866.143702:            sched:sched_wakeup: perf:20919 [120] success=1 CPU:001
       sleep 20919 [001] 109866.144081:      sched:sched_process_exec: filename=/usr/bin/sleep pid=20919 old_pid=20919
       sleep 20919 [001] 109866.144408:  syscalls:sys_enter_nanosleep: rqtp: 0x7ffc2384fef0, rmtp: 0x00000000
       sleep 20919 [001] 109866.144411:      sched:sched_stat_runtime: comm=sleep pid=20919 runtime=521249 [ns] vruntime=202919398131 [n>
       sleep 20919 [001] 109866.144412:            sched:sched_switch: sleep:20919 [120] S ==> swapper/1:0 [120]
     swapper     0 [001] 109867.144568:            sched:sched_waking: comm=sleep pid=20919 prio=120 target_cpu=001
     swapper     0 [001] 109867.144586:            sched:sched_wakeup: sleep:20919 [120] success=1 CPU:001
       sleep 20919 [001] 109867.144614:   syscalls:sys_exit_nanosleep: 0x0
       sleep 20919 [001] 109867.144753:      sched:sched_process_exit: comm=sleep pid=20919 prio=120
  #
  # perf script --switch-off syscalls:sys_exit_nanosleep
      :20918 20918 [002] 109866.143696:            sched:sched_waking: comm=perf pid=20919 prio=120 target_cpu=001
      :20918 20918 [002] 109866.143702:            sched:sched_wakeup: perf:20919 [120] success=1 CPU:001
       sleep 20919 [001] 109866.144081:      sched:sched_process_exec: filename=/usr/bin/sleep pid=20919 old_pid=20919
       sleep 20919 [001] 109866.144408:  syscalls:sys_enter_nanosleep: rqtp: 0x7ffc2384fef0, rmtp: 0x00000000
       sleep 20919 [001] 109866.144411:      sched:sched_stat_runtime: comm=sleep pid=20919 runtime=521249 [ns] vruntime=202919398131 [n>
       sleep 20919 [001] 109866.144412:            sched:sched_switch: sleep:20919 [120] S ==> swapper/1:0 [120]
     swapper     0 [001] 109867.144568:            sched:sched_waking: comm=sleep pid=20919 prio=120 target_cpu=001
     swapper     0 [001] 109867.144586:            sched:sched_wakeup: sleep:20919 [120] success=1 CPU:001
       sleep 20919 [001] 109867.144753:      sched:sched_process_exit: comm=sleep pid=20919 prio=120
  #
  # perf script --switch-on syscalls:sys_enter_nanosleep --switch-off syscalls:sys_exit_nanosleep
       sleep 20919 [001] 109866.144411:      sched:sched_stat_runtime: comm=sleep pid=20919 runtime=521249 [ns] vruntime=202919398131 [n>
       sleep 20919 [001] 109866.144412:            sched:sched_switch: sleep:20919 [120] S ==> swapper/1:0 [120]
     swapper     0 [001] 109867.144568:            sched:sched_waking: comm=sleep pid=20919 prio=120 target_cpu=001
     swapper     0 [001] 109867.144586:            sched:sched_wakeup: sleep:20919 [120] success=1 CPU:001
  #
  # perf script --switch-on syscalls:sys_enter_nanosleep --switch-off syscalls:sys_exit_nanosleep --show-on-off
       sleep 20919 [001] 109866.144408:  syscalls:sys_enter_nanosleep: rqtp: 0x7ffc2384fef0, rmtp: 0x00000000
       sleep 20919 [001] 109866.144411:      sched:sched_stat_runtime: comm=sleep pid=20919 runtime=521249 [ns] vruntime=202919398131 [n>
       sleep 20919 [001] 109866.144412:            sched:sched_switch: sleep:20919 [120] S ==> swapper/1:0 [120]
     swapper     0 [001] 109867.144568:            sched:sched_waking: comm=sleep pid=20919 prio=120 target_cpu=001
     swapper     0 [001] 109867.144586:            sched:sched_wakeup: sleep:20919 [120] success=1 CPU:001
       sleep 20919 [001] 109867.144614:   syscalls:sys_exit_nanosleep: 0x0
  #

Now think about using this together with 'perf probe' to create custom on/off
events in your app :-)

	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Florian Weimer <fweimer@redhat.com>
	Cc: Jiri Olsa <jolsa@kernel.org>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: William Cohen <wcohen@redhat.com>
Link: https://lkml.kernel.org/n/tip-li3j01c4tmj9kw6ydsl8swej@git.kernel.org
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit dd41f660c03a6d8f2c2f3b2cccf50d8c4e06dd42)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/Documentation/perf-script.txt
#	tools/perf/builtin-script.c
diff --cc tools/perf/Documentation/perf-script.txt
index caaab28f8400,2599b057e47b..000000000000
--- a/tools/perf/Documentation/perf-script.txt
+++ b/tools/perf/Documentation/perf-script.txt
@@@ -417,6 -417,15 +417,18 @@@ include::itrace.txt[
  	For itrace only show specified functions and their callees for
  	itrace. Multiple functions can be separated by comma.
  
++<<<<<<< HEAD
++=======
+ --switch-on EVENT_NAME::
+ 	Only consider events after this event is found.
+ 
+ --switch-off EVENT_NAME::
+ 	Stop considering events after this event is found.
+ 
+ --show-on-off-events::
+ 	Show the --switch-on/off events too.
+ 
++>>>>>>> dd41f660c03a (perf script: Allow specifying event to switch off processing of other events)
  SEE ALSO
  --------
  linkperf:perf-record[1], linkperf:perf-script-perl[1],
diff --cc tools/perf/builtin-script.c
index 381a10d3337c,b6eed0f7e835..000000000000
--- a/tools/perf/builtin-script.c
+++ b/tools/perf/builtin-script.c
@@@ -1616,6 -1616,13 +1616,16 @@@ static int perf_sample__fprintf_synth(s
  	return 0;
  }
  
++<<<<<<< HEAD
++=======
+ struct evswitch {
+ 	struct evsel *on,
+ 		     *off;
+ 	bool	     discarding;
+ 	bool	     show_on_off_events;
+ };
+ 
++>>>>>>> dd41f660c03a (perf script: Allow specifying event to switch off processing of other events)
  struct perf_script {
  	struct perf_tool	tool;
  	struct perf_session	*session;
@@@ -1805,6 -1813,28 +1815,31 @@@ static void process_event(struct perf_s
  	if (!show_event(sample, evsel, thread, al))
  		return;
  
++<<<<<<< HEAD
++=======
+ 	if (script->evswitch.on && script->evswitch.discarding) {
+ 		if (script->evswitch.on != evsel)
+ 			return;
+ 
+ 		script->evswitch.discarding = false;
+ 
+ 		if (!script->evswitch.show_on_off_events)
+ 			return;
+ 
+ 		goto print_it;
+ 	}
+ 
+ 	if (script->evswitch.off && !script->evswitch.discarding) {
+ 		if (script->evswitch.off != evsel)
+ 			goto print_it;
+ 
+ 		script->evswitch.discarding = true;
+ 
+ 		if (!script->evswitch.show_on_off_events)
+ 			return;
+ 	}
+ print_it:
++>>>>>>> dd41f660c03a (perf script: Allow specifying event to switch off processing of other events)
  	++es->samples;
  
  	perf_sample__fprintf_start(sample, thread, evsel,
@@@ -3395,6 -3425,8 +3430,11 @@@ int cmd_script(int argc, const char **a
  	struct utsname uts;
  	char *script_path = NULL;
  	const char **__argv;
++<<<<<<< HEAD
++=======
+ 	const char *event_switch_on  = NULL,
+ 		   *event_switch_off = NULL;
++>>>>>>> dd41f660c03a (perf script: Allow specifying event to switch off processing of other events)
  	int i, j, err = 0;
  	struct perf_script script = {
  		.tool = {
@@@ -3538,6 -3570,12 +3578,15 @@@
  		   "file", "file saving guest os /proc/kallsyms"),
  	OPT_STRING(0, "guestmodules", &symbol_conf.default_guest_modules,
  		   "file", "file saving guest os /proc/modules"),
++<<<<<<< HEAD
++=======
+ 	OPT_STRING(0, "switch-on", &event_switch_on,
+ 		   "event", "Consider events after the ocurrence of this event"),
+ 	OPT_STRING(0, "switch-off", &event_switch_off,
+ 		   "event", "Stop considering events after the ocurrence of this event"),
+ 	OPT_BOOLEAN(0, "show-on-off-events", &script.evswitch.show_on_off_events,
+ 		    "Show the on/off switch events, used with --switch-on"),
++>>>>>>> dd41f660c03a (perf script: Allow specifying event to switch off processing of other events)
  	OPT_END()
  	};
  	const char * const script_subcommands[] = { "record", "report", NULL };
@@@ -3862,6 -3900,25 +3911,28 @@@
  						  script.range_num);
  	}
  
++<<<<<<< HEAD
++=======
+ 	if (event_switch_on) {
+ 		script.evswitch.on = perf_evlist__find_evsel_by_str(session->evlist, event_switch_on);
+ 		if (script.evswitch.on == NULL) {
+ 			fprintf(stderr, "switch-on event not found (%s)\n", event_switch_on);
+ 			err = -ENOENT;
+ 			goto out_delete;
+ 		}
+ 		script.evswitch.discarding = true;
+ 	}
+ 
+ 	if (event_switch_off) {
+ 		script.evswitch.off = perf_evlist__find_evsel_by_str(session->evlist, event_switch_off);
+ 		if (script.evswitch.off == NULL) {
+ 			fprintf(stderr, "switch-off event not found (%s)\n", event_switch_off);
+ 			err = -ENOENT;
+ 			goto out_delete;
+ 		}
+ 	}
+ 
++>>>>>>> dd41f660c03a (perf script: Allow specifying event to switch off processing of other events)
  	err = __cmd_script(&script);
  
  	flush_scripting();
* Unmerged path tools/perf/Documentation/perf-script.txt
* Unmerged path tools/perf/builtin-script.c
