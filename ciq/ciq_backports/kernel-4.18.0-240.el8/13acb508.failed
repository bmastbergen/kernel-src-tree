libbpf: Postpone BTF ID finding for TRACING programs to load phase

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Andrii Nakryiko <andriin@fb.com>
commit 13acb508ae203075134327551a6705e6e8f23d48
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/13acb508.failed

Move BTF ID determination for BPF_PROG_TYPE_TRACING programs to a load phase.
Performing it at open step is inconvenient, because it prevents BPF skeleton
generation on older host kernel, which doesn't contain BTF_KIND_FUNCs
information in vmlinux BTF. This is a common set up, though, when, e.g.,
selftests are compiled on older host kernel, but the test program itself is
executed in qemu VM with bleeding edge kernel. Having this BTF searching
performed at load time allows to successfully use bpf_object__open() for
codegen and inspection of BPF object file.

	Signed-off-by: Andrii Nakryiko <andriin@fb.com>
	Signed-off-by: Alexei Starovoitov <ast@kernel.org>
	Acked-by: Martin KaFai Lau <kafai@fb.com>
Link: https://lore.kernel.org/bpf/20191214014341.3442258-11-andriin@fb.com
(cherry picked from commit 13acb508ae203075134327551a6705e6e8f23d48)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/lib/bpf/libbpf.c
diff --cc tools/lib/bpf/libbpf.c
index 28fea38c48f3,3488ac4f7015..000000000000
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@@ -4010,6 -3990,8 +4019,11 @@@ __bpf_object__open(const char *path, co
  
  		bpf_program__set_type(prog, prog_type);
  		bpf_program__set_expected_attach_type(prog, attach_type);
++<<<<<<< HEAD
++=======
+ 		if (prog_type == BPF_PROG_TYPE_TRACING)
+ 			prog->attach_prog_fd = attach_prog_fd;
++>>>>>>> 13acb508ae20 (libbpf: Postpone BTF ID finding for TRACING programs to load phase)
  	}
  
  	return obj;
* Unmerged path tools/lib/bpf/libbpf.c
