blk-mq: add blk_mq_all_tag_iter

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ming Lei <ming.lei@redhat.com>
commit 602380d28e28b454683efac41dc4b2862d055d91
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/602380d2.failed

Add a new blk_mq_all_tag_iter function to iterate over all allocated
scheduler tags and driver tags.  This is more flexible than the existing
blk_mq_all_tag_busy_iter function as it allows the callers to do whatever
they want on allocated request instead of being limited to started
requests.

It will be used to implement draining allocated requests on specified
hctx in this patchset.

[hch: switch from the two booleans to a more readable flags field and
 consolidate the tags iter functions]

	Signed-off-by: Ming Lei <ming.lei@redhat.com>
	Signed-off-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Reviewed-by: Daniel Wagner <dwagner@suse.de>
	Reviewed-by: Bart van Assche <bvanassche@acm.org>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 602380d28e28b454683efac41dc4b2862d055d91)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	block/blk-mq-tag.c
diff --cc block/blk-mq-tag.c
index c9d18c5028de,762198b62088..000000000000
--- a/block/blk-mq-tag.c
+++ b/block/blk-mq-tag.c
@@@ -259,14 -277,28 +262,31 @@@ static bool bt_tags_iter(struct sbitma
  	 * test and set the bit before assining ->rqs[].
  	 */
  	rq = tags->rqs[bitnr];
- 	if (rq && blk_mq_request_started(rq))
- 		return iter_data->fn(rq, iter_data->data, reserved);
- 
- 	return true;
+ 	if (!rq)
+ 		return true;
+ 	if ((iter_data->flags & BT_TAG_ITER_STARTED) &&
+ 	    !blk_mq_request_started(rq))
+ 		return true;
+ 	return iter_data->fn(rq, iter_data->data, reserved);
  }
  
++<<<<<<< HEAD
++=======
+ /**
+  * bt_tags_for_each - iterate over the requests in a tag map
+  * @tags:	Tag map to iterate over.
+  * @bt:		sbitmap to examine. This is either the breserved_tags member
+  *		or the bitmap_tags member of struct blk_mq_tags.
+  * @fn:		Pointer to the function that will be called for each started
+  *		request. @fn will be called as follows: @fn(rq, @data,
+  *		@reserved) where rq is a pointer to a request. Return true
+  *		to continue iterating tags, false to stop.
+  * @data:	Will be passed as second argument to @fn.
+  * @flags:	BT_TAG_ITER_*
+  */
++>>>>>>> 602380d28e28 (blk-mq: add blk_mq_all_tag_iter)
  static void bt_tags_for_each(struct blk_mq_tags *tags, struct sbitmap_queue *bt,
- 			     busy_tag_iter_fn *fn, void *data, bool reserved)
+ 			     busy_tag_iter_fn *fn, void *data, unsigned int flags)
  {
  	struct bt_tags_iter_data iter_data = {
  		.tags = tags,
@@@ -279,14 -311,43 +299,38 @@@
  		sbitmap_for_each_set(&bt->sb, bt_tags_iter, &iter_data);
  }
  
++<<<<<<< HEAD
 +static void blk_mq_all_tag_busy_iter(struct blk_mq_tags *tags,
 +		busy_tag_iter_fn *fn, void *priv)
++=======
+ static void __blk_mq_all_tag_iter(struct blk_mq_tags *tags,
+ 		busy_tag_iter_fn *fn, void *priv, unsigned int flags)
  {
+ 	WARN_ON_ONCE(flags & BT_TAG_ITER_RESERVED);
+ 
  	if (tags->nr_reserved_tags)
- 		bt_tags_for_each(tags, &tags->breserved_tags, fn, priv, true);
- 	bt_tags_for_each(tags, &tags->bitmap_tags, fn, priv, false);
+ 		bt_tags_for_each(tags, &tags->breserved_tags, fn, priv,
+ 				 flags | BT_TAG_ITER_RESERVED);
+ 	bt_tags_for_each(tags, &tags->bitmap_tags, fn, priv, flags);
+ }
+ 
+ /**
+  * blk_mq_all_tag_iter - iterate over all requests in a tag map
+  * @tags:	Tag map to iterate over.
+  * @fn:		Pointer to the function that will be called for each
+  *		request. @fn will be called as follows: @fn(rq, @priv,
+  *		reserved) where rq is a pointer to a request. 'reserved'
+  *		indicates whether or not @rq is a reserved request. Return
+  *		true to continue iterating tags, false to stop.
+  * @priv:	Will be passed as second argument to @fn.
+  */
+ void blk_mq_all_tag_iter(struct blk_mq_tags *tags, busy_tag_iter_fn *fn,
+ 		void *priv)
++>>>>>>> 602380d28e28 (blk-mq: add blk_mq_all_tag_iter)
+ {
+ 	return __blk_mq_all_tag_iter(tags, fn, priv, 0);
  }
  
 -/**
 - * blk_mq_tagset_busy_iter - iterate over all started requests in a tag set
 - * @tagset:	Tag set to iterate over.
 - * @fn:		Pointer to the function that will be called for each started
 - *		request. @fn will be called as follows: @fn(rq, @priv,
 - *		reserved) where rq is a pointer to a request. 'reserved'
 - *		indicates whether or not @rq is a reserved request. Return
 - *		true to continue iterating tags, false to stop.
 - * @priv:	Will be passed as second argument to @fn.
 - */
  void blk_mq_tagset_busy_iter(struct blk_mq_tag_set *tagset,
  		busy_tag_iter_fn *fn, void *priv)
  {
* Unmerged path block/blk-mq-tag.c
diff --git a/block/blk-mq-tag.h b/block/blk-mq-tag.h
index 8a741752af8b..d38e48f2a0a4 100644
--- a/block/blk-mq-tag.h
+++ b/block/blk-mq-tag.h
@@ -34,6 +34,8 @@ extern int blk_mq_tag_update_depth(struct blk_mq_hw_ctx *hctx,
 extern void blk_mq_tag_wakeup_all(struct blk_mq_tags *tags, bool);
 void blk_mq_queue_tag_busy_iter(struct request_queue *q, busy_iter_fn *fn,
 		void *priv);
+void blk_mq_all_tag_iter(struct blk_mq_tags *tags, busy_tag_iter_fn *fn,
+		void *priv);
 
 static inline struct sbq_wait_state *bt_wait_ptr(struct sbitmap_queue *bt,
 						 struct blk_mq_hw_ctx *hctx)
