io_uring: don't fail links for EAGAIN error in IOPOLL mode

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Xiaoguang Wang <xiaoguang.wang@linux.alibaba.com>
commit 2d7d67920e5c8e0854df23ca77da2dd5880ce5dd
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/2d7d6792.failed

In IOPOLL mode, for EAGAIN error, we'll try to submit io request
again using io-wq, so don't fail rest of links if this io request
has links.

	Cc: stable@vger.kernel.org
	Signed-off-by: Xiaoguang Wang <xiaoguang.wang@linux.alibaba.com>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit 2d7d67920e5c8e0854df23ca77da2dd5880ce5dd)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	fs/io_uring.c
diff --cc fs/io_uring.c
index 0b681a205810,eb3797714539..000000000000
--- a/fs/io_uring.c
+++ b/fs/io_uring.c
@@@ -932,15 -1983,16 +932,20 @@@ static void io_complete_rw(struct kioc
  
  static void io_complete_rw_iopoll(struct kiocb *kiocb, long res, long res2)
  {
 -	struct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);
 +	struct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw);
  
 -	if (kiocb->ki_flags & IOCB_WRITE)
 -		kiocb_end_write(req);
 +	kiocb_end_write(kiocb);
  
++<<<<<<< HEAD
 +	if ((req->flags & REQ_F_LINK) && res != req->result)
 +		req->flags |= REQ_F_FAIL_LINK;
++=======
+ 	if (res != -EAGAIN && res != req->result)
+ 		req_set_fail_links(req);
++>>>>>>> 2d7d67920e5c (io_uring: don't fail links for EAGAIN error in IOPOLL mode)
  	req->result = res;
  	if (res != -EAGAIN)
 -		WRITE_ONCE(req->iopoll_completed, 1);
 +		req->flags |= REQ_F_IOPOLL_COMPLETED;
  }
  
  /*
* Unmerged path fs/io_uring.c
