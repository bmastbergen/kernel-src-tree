ixgbe: add support for AF_XDP need_wakeup feature

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Magnus Karlsson <magnus.karlsson@intel.com>
commit 5c129241e2de79f09cb4e50bbca09e1c14ad787d
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/5c129241.failed

This patch adds support for the need_wakeup feature of AF_XDP. If the
application has told the kernel that it might sleep using the new bind
flag XDP_USE_NEED_WAKEUP, the driver will then set this flag if it has
no more buffers on the NIC Rx ring and yield to the application. For
Tx, it will set the flag if it has no outstanding Tx completion
interrupts and return to the application.

	Signed-off-by: Magnus Karlsson <magnus.karlsson@intel.com>
	Acked-by: Jonathan Lemon <jonathan.lemon@gmail.com>
	Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
(cherry picked from commit 5c129241e2de79f09cb4e50bbca09e1c14ad787d)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/intel/ixgbe/ixgbe_xsk.c
diff --cc drivers/net/ethernet/intel/ixgbe/ixgbe_xsk.c
index ca6f4a1b65b0,9a28d98a1484..000000000000
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_xsk.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_xsk.c
@@@ -675,10 -698,19 +685,23 @@@ bool ixgbe_clean_xdp_tx_irq(struct ixgb
  	if (xsk_frames)
  		xsk_umem_complete_tx(umem, xsk_frames);
  
++<<<<<<< HEAD
 +	return ixgbe_xmit_zc(tx_ring, q_vector->tx.work_limit);
++=======
+ 	if (xsk_umem_uses_need_wakeup(tx_ring->xsk_umem)) {
+ 		if (tx_ring->next_to_clean == tx_ring->next_to_use)
+ 			xsk_set_tx_need_wakeup(tx_ring->xsk_umem);
+ 		else
+ 			xsk_clear_tx_need_wakeup(tx_ring->xsk_umem);
+ 	}
+ 
+ 	xmit_done = ixgbe_xmit_zc(tx_ring, q_vector->tx.work_limit);
+ 
+ 	return budget > 0 && xmit_done;
++>>>>>>> 5c129241e2de (ixgbe: add support for AF_XDP need_wakeup feature)
  }
  
 -int ixgbe_xsk_wakeup(struct net_device *dev, u32 qid, u32 flags)
 +int ixgbe_xsk_async_xmit(struct net_device *dev, u32 qid)
  {
  	struct ixgbe_adapter *adapter = netdev_priv(dev);
  	struct ixgbe_ring *ring;
* Unmerged path drivers/net/ethernet/intel/ixgbe/ixgbe_xsk.c
