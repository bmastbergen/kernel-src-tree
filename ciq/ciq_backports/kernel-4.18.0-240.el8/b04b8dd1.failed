perf auxtrace: Add support for dumping AUX area samples

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Adrian Hunter <adrian.hunter@intel.com>
commit b04b8dd1e4265525dbd74647f747e63e85540189
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/b04b8dd1.failed

Add support for dumping AUX area samples i.e. via the perf script/report
 -D (--dump-raw-trace) option.

Committer notes:

Add __maybe_unused to the two args for auxtrace__dump_auxtrace_sample()
for when we don't HAVE_AUXTRACE_SUPPORT.

	Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Jiri Olsa <jolsa@redhat.com>
Link: http://lore.kernel.org/lkml/20191115124225.5247-10-adrian.hunter@intel.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit b04b8dd1e4265525dbd74647f747e63e85540189)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/auxtrace.c
#	tools/perf/util/auxtrace.h
diff --cc tools/perf/util/auxtrace.c
index 130597309e55,4f5c5fe3516b..000000000000
--- a/tools/perf/util/auxtrace.c
+++ b/tools/perf/util/auxtrace.c
@@@ -2232,3 -2407,46 +2232,49 @@@ int auxtrace_parse_filters(struct perf_
  
  	return 0;
  }
++<<<<<<< HEAD
++=======
+ 
+ int auxtrace__process_event(struct perf_session *session, union perf_event *event,
+ 			    struct perf_sample *sample, struct perf_tool *tool)
+ {
+ 	if (!session->auxtrace)
+ 		return 0;
+ 
+ 	return session->auxtrace->process_event(session, event, sample, tool);
+ }
+ 
+ void auxtrace__dump_auxtrace_sample(struct perf_session *session,
+ 				    struct perf_sample *sample)
+ {
+ 	if (!session->auxtrace || !session->auxtrace->dump_auxtrace_sample ||
+ 	    auxtrace__dont_decode(session))
+ 		return;
+ 
+ 	session->auxtrace->dump_auxtrace_sample(session, sample);
+ }
+ 
+ int auxtrace__flush_events(struct perf_session *session, struct perf_tool *tool)
+ {
+ 	if (!session->auxtrace)
+ 		return 0;
+ 
+ 	return session->auxtrace->flush_events(session, tool);
+ }
+ 
+ void auxtrace__free_events(struct perf_session *session)
+ {
+ 	if (!session->auxtrace)
+ 		return;
+ 
+ 	return session->auxtrace->free_events(session);
+ }
+ 
+ void auxtrace__free(struct perf_session *session)
+ {
+ 	if (!session->auxtrace)
+ 		return;
+ 
+ 	return session->auxtrace->free(session);
+ }
++>>>>>>> b04b8dd1e426 (perf auxtrace: Add support for dumping AUX area samples)
diff --cc tools/perf/util/auxtrace.h
index f02a86ad68b3,4a8ac7de6e22..000000000000
--- a/tools/perf/util/auxtrace.h
+++ b/tools/perf/util/auxtrace.h
@@@ -554,43 -554,15 +557,53 @@@ void addr_filters__init(struct addr_fil
  void addr_filters__exit(struct addr_filters *filts);
  int addr_filters__parse_bare_filter(struct addr_filters *filts,
  				    const char *filter);
 -int auxtrace_parse_filters(struct evlist *evlist);
 +int auxtrace_parse_filters(struct perf_evlist *evlist);
 +
++<<<<<<< HEAD
 +static inline int auxtrace__process_event(struct perf_session *session,
 +					  union perf_event *event,
 +					  struct perf_sample *sample,
 +					  struct perf_tool *tool)
 +{
 +	if (!session->auxtrace)
 +		return 0;
 +
 +	return session->auxtrace->process_event(session, event, sample, tool);
 +}
  
 +static inline int auxtrace__flush_events(struct perf_session *session,
 +					 struct perf_tool *tool)
 +{
 +	if (!session->auxtrace)
 +		return 0;
 +
 +	return session->auxtrace->flush_events(session, tool);
 +}
 +
 +static inline void auxtrace__free_events(struct perf_session *session)
 +{
 +	if (!session->auxtrace)
 +		return;
 +
 +	return session->auxtrace->free_events(session);
 +}
 +
 +static inline void auxtrace__free(struct perf_session *session)
 +{
 +	if (!session->auxtrace)
 +		return;
 +
 +	return session->auxtrace->free(session);
 +}
++=======
+ int auxtrace__process_event(struct perf_session *session, union perf_event *event,
+ 			    struct perf_sample *sample, struct perf_tool *tool);
+ void auxtrace__dump_auxtrace_sample(struct perf_session *session,
+ 				    struct perf_sample *sample);
+ int auxtrace__flush_events(struct perf_session *session, struct perf_tool *tool);
+ void auxtrace__free_events(struct perf_session *session);
+ void auxtrace__free(struct perf_session *session);
++>>>>>>> b04b8dd1e426 (perf auxtrace: Add support for dumping AUX area samples)
  
  #define ITRACE_HELP \
  "				i:	    		synthesize instructions events\n"		\
* Unmerged path tools/perf/util/auxtrace.c
* Unmerged path tools/perf/util/auxtrace.h
diff --git a/tools/perf/util/session.c b/tools/perf/util/session.c
index e662529655c6..b29b62a81b4b 100644
--- a/tools/perf/util/session.c
+++ b/tools/perf/util/session.c
@@ -1484,8 +1484,13 @@ static int perf_session__deliver_event(struct perf_session *session,
 	if (ret > 0)
 		return 0;
 
-	return machines__deliver_event(&session->machines, session->evlist,
-				       event, &sample, tool, file_offset);
+	ret = machines__deliver_event(&session->machines, session->evlist,
+				      event, &sample, tool, file_offset);
+
+	if (dump_trace && sample.aux_sample.size)
+		auxtrace__dump_auxtrace_sample(session, &sample);
+
+	return ret;
 }
 
 static s64 perf_session__process_user_event(struct perf_session *session,
