net/mlx5e: Do not recover from a non-fatal syndrome

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Aya Levin <ayal@mellanox.com>
commit 187a9830c921d92c4a9a8e2921ecc4b35a97532c
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/187a9830.failed

For non-fatal syndromes like LOCAL_LENGTH_ERR, recovery shouldn't be
triggered. In these scenarios, the RQ is not actually in ERR state.
This misleads the recovery flow which assumes that the RQ is really in
error state and no more completions arrive, causing crashes on bad page
state.

Fixes: 8276ea1353a4 ("net/mlx5e: Report and recover from CQE with error on RQ")
	Signed-off-by: Aya Levin <ayal@mellanox.com>
	Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
	Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
(cherry picked from commit 187a9830c921d92c4a9a8e2921ecc4b35a97532c)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/net/ethernet/mellanox/mlx5/core/en/health.h
diff --cc drivers/net/ethernet/mellanox/mlx5/core/en/health.h
index cee840e40a05,e54f70d9af22..000000000000
--- a/drivers/net/ethernet/mellanox/mlx5/core/en/health.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en/health.h
@@@ -6,9 -6,47 +6,54 @@@
  
  #include "en.h"
  
++<<<<<<< HEAD
 +int mlx5e_tx_reporter_create(struct mlx5e_priv *priv);
 +void mlx5e_tx_reporter_destroy(struct mlx5e_priv *priv);
 +void mlx5e_tx_reporter_err_cqe(struct mlx5e_txqsq *sq);
 +int mlx5e_tx_reporter_timeout(struct mlx5e_txqsq *sq);
++=======
+ #define MLX5E_RX_ERR_CQE(cqe) (get_cqe_opcode(cqe) != MLX5_CQE_RESP_SEND)
+ 
+ static inline bool cqe_syndrome_needs_recover(u8 syndrome)
+ {
+ 	return syndrome == MLX5_CQE_SYNDROME_LOCAL_QP_OP_ERR ||
+ 	       syndrome == MLX5_CQE_SYNDROME_LOCAL_PROT_ERR ||
+ 	       syndrome == MLX5_CQE_SYNDROME_WR_FLUSH_ERR;
+ }
+ 
+ int mlx5e_reporter_tx_create(struct mlx5e_priv *priv);
+ void mlx5e_reporter_tx_destroy(struct mlx5e_priv *priv);
+ void mlx5e_reporter_tx_err_cqe(struct mlx5e_txqsq *sq);
+ int mlx5e_reporter_tx_timeout(struct mlx5e_txqsq *sq);
+ 
+ int mlx5e_reporter_cq_diagnose(struct mlx5e_cq *cq, struct devlink_fmsg *fmsg);
+ int mlx5e_reporter_cq_common_diagnose(struct mlx5e_cq *cq, struct devlink_fmsg *fmsg);
+ int mlx5e_reporter_named_obj_nest_start(struct devlink_fmsg *fmsg, char *name);
+ int mlx5e_reporter_named_obj_nest_end(struct devlink_fmsg *fmsg);
+ 
+ int mlx5e_reporter_rx_create(struct mlx5e_priv *priv);
+ void mlx5e_reporter_rx_destroy(struct mlx5e_priv *priv);
+ void mlx5e_reporter_icosq_cqe_err(struct mlx5e_icosq *icosq);
+ void mlx5e_reporter_rq_cqe_err(struct mlx5e_rq *rq);
+ void mlx5e_reporter_rx_timeout(struct mlx5e_rq *rq);
+ 
+ #define MLX5E_REPORTER_PER_Q_MAX_LEN 256
+ 
+ struct mlx5e_err_ctx {
+ 	int (*recover)(void *ctx);
+ 	void *ctx;
+ };
+ 
+ int mlx5e_health_sq_to_ready(struct mlx5e_channel *channel, u32 sqn);
+ int mlx5e_health_channel_eq_recover(struct mlx5_eq_comp *eq, struct mlx5e_channel *channel);
+ int mlx5e_health_recover_channels(struct mlx5e_priv *priv);
+ int mlx5e_health_report(struct mlx5e_priv *priv,
+ 			struct devlink_health_reporter *reporter, char *err_str,
+ 			struct mlx5e_err_ctx *err_ctx);
+ int mlx5e_health_create_reporters(struct mlx5e_priv *priv);
+ void mlx5e_health_destroy_reporters(struct mlx5e_priv *priv);
+ void mlx5e_health_channels_update(struct mlx5e_priv *priv);
+ 
++>>>>>>> 187a9830c921 (net/mlx5e: Do not recover from a non-fatal syndrome)
  
  #endif
* Unmerged path drivers/net/ethernet/mellanox/mlx5/core/en/health.h
