perf parse-events: Fix reading of invalid memory in event parsing

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Ian Rogers <irogers@google.com>
commit 05e54e2386733dfdb62b6784b3d6e1b0bd9bb559
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/05e54e23.failed

ADD_CONFIG_TERM accesses term->weak, however, in get_config_chgs this
value is accessed outside of the list_for_each_entry and references
invalid memory. Add an argument for ADD_CONFIG_TERM for weak and set it
to false in the get_config_chgs case.

This bug was cause by clang's address sanitizer and libfuzzer. It can be
reproduced with a command line of:

  perf stat -a -e i/bs,tsc,L2/o

	Signed-off-by: Ian Rogers <irogers@google.com>
	Acked-by: Jiri Olsa <jolsa@kernel.org>
	Cc: Adrian Hunter <adrian.hunter@intel.com>
	Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
	Cc: Andi Kleen <ak@linux.intel.com>
	Cc: Leo Yan <leo.yan@linaro.org>
	Cc: Mark Rutland <mark.rutland@arm.com>
	Cc: Namhyung Kim <namhyung@kernel.org>
	Cc: Peter Zijlstra <peterz@infradead.org>
	Cc: Stephane Eranian <eranian@google.com>
	Cc: clang-built-linux@googlegroups.com
Link: http://lore.kernel.org/lkml/20200307073121.203816-1-irogers@google.com
	Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
(cherry picked from commit 05e54e2386733dfdb62b6784b3d6e1b0bd9bb559)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	tools/perf/util/parse-events.c
diff --cc tools/perf/util/parse-events.c
index 6ab891192730,a7dc0b096974..000000000000
--- a/tools/perf/util/parse-events.c
+++ b/tools/perf/util/parse-events.c
@@@ -1182,8 -1213,7 +1182,12 @@@ static int config_attr(struct perf_even
  static int get_config_terms(struct list_head *head_config,
  			    struct list_head *head_terms __maybe_unused)
  {
++<<<<<<< HEAD
 +#define ADD_CONFIG_TERM(__type, __name, __val)			\
 +do {								\
++=======
+ #define ADD_CONFIG_TERM(__type, __weak)				\
++>>>>>>> 05e54e238673 (perf parse-events: Fix reading of invalid memory in event parsing)
  	struct perf_evsel_config_term *__t;			\
  								\
  	__t = zalloc(sizeof(*__t));				\
@@@ -1192,9 -1222,24 +1196,30 @@@
  								\
  	INIT_LIST_HEAD(&__t->list);				\
  	__t->type       = PERF_EVSEL__CONFIG_TERM_ ## __type;	\
++<<<<<<< HEAD
 +	__t->val.__name = __val;				\
 +	__t->weak	= term->weak;				\
 +	list_add_tail(&__t->list, head_terms);			\
++=======
+ 	__t->weak	= __weak;				\
+ 	list_add_tail(&__t->list, head_terms)
+ 
+ #define ADD_CONFIG_TERM_VAL(__type, __name, __val, __weak)	\
+ do {								\
+ 	ADD_CONFIG_TERM(__type, __weak);			\
+ 	__t->val.__name = __val;				\
+ } while (0)
+ 
+ #define ADD_CONFIG_TERM_STR(__type, __val, __weak)		\
+ do {								\
+ 	ADD_CONFIG_TERM(__type, __weak);			\
+ 	__t->val.str = strdup(__val);				\
+ 	if (!__t->val.str) {					\
+ 		zfree(&__t);					\
+ 		return -ENOMEM;					\
+ 	}							\
+ 	__t->free_str = true;					\
++>>>>>>> 05e54e238673 (perf parse-events: Fix reading of invalid memory in event parsing)
  } while (0)
  
  	struct parse_events_term *term;
@@@ -1202,56 -1247,101 +1227,152 @@@
  	list_for_each_entry(term, head_config, list) {
  		switch (term->type_term) {
  		case PARSE_EVENTS__TERM_TYPE_SAMPLE_PERIOD:
++<<<<<<< HEAD
 +			ADD_CONFIG_TERM(PERIOD, period, term->val.num);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_SAMPLE_FREQ:
 +			ADD_CONFIG_TERM(FREQ, freq, term->val.num);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_TIME:
 +			ADD_CONFIG_TERM(TIME, time, term->val.num);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_CALLGRAPH:
 +			ADD_CONFIG_TERM(CALLGRAPH, callgraph, term->val.str);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE:
 +			ADD_CONFIG_TERM(BRANCH, branch, term->val.str);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_STACKSIZE:
 +			ADD_CONFIG_TERM(STACK_USER, stack_user, term->val.num);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_INHERIT:
 +			ADD_CONFIG_TERM(INHERIT, inherit, term->val.num ? 1 : 0);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_NOINHERIT:
 +			ADD_CONFIG_TERM(INHERIT, inherit, term->val.num ? 0 : 1);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_MAX_STACK:
 +			ADD_CONFIG_TERM(MAX_STACK, max_stack, term->val.num);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_MAX_EVENTS:
 +			ADD_CONFIG_TERM(MAX_EVENTS, max_events, term->val.num);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_OVERWRITE:
 +			ADD_CONFIG_TERM(OVERWRITE, overwrite, term->val.num ? 1 : 0);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_NOOVERWRITE:
 +			ADD_CONFIG_TERM(OVERWRITE, overwrite, term->val.num ? 0 : 1);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_DRV_CFG:
 +			ADD_CONFIG_TERM(DRV_CFG, drv_cfg, term->val.str);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_PERCORE:
 +			ADD_CONFIG_TERM(PERCORE, percore,
 +					term->val.num ? true : false);
 +			break;
 +		case PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT:
 +			ADD_CONFIG_TERM(AUX_OUTPUT, aux_output, term->val.num ? 1 : 0);
++=======
+ 			ADD_CONFIG_TERM_VAL(PERIOD, period, term->val.num, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_SAMPLE_FREQ:
+ 			ADD_CONFIG_TERM_VAL(FREQ, freq, term->val.num, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_TIME:
+ 			ADD_CONFIG_TERM_VAL(TIME, time, term->val.num, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_CALLGRAPH:
+ 			ADD_CONFIG_TERM_STR(CALLGRAPH, term->val.str, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_BRANCH_SAMPLE_TYPE:
+ 			ADD_CONFIG_TERM_STR(BRANCH, term->val.str, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_STACKSIZE:
+ 			ADD_CONFIG_TERM_VAL(STACK_USER, stack_user,
+ 					    term->val.num, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_INHERIT:
+ 			ADD_CONFIG_TERM_VAL(INHERIT, inherit,
+ 					    term->val.num ? 1 : 0, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_NOINHERIT:
+ 			ADD_CONFIG_TERM_VAL(INHERIT, inherit,
+ 					    term->val.num ? 0 : 1, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_MAX_STACK:
+ 			ADD_CONFIG_TERM_VAL(MAX_STACK, max_stack,
+ 					    term->val.num, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_MAX_EVENTS:
+ 			ADD_CONFIG_TERM_VAL(MAX_EVENTS, max_events,
+ 					    term->val.num, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_OVERWRITE:
+ 			ADD_CONFIG_TERM_VAL(OVERWRITE, overwrite,
+ 					    term->val.num ? 1 : 0, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_NOOVERWRITE:
+ 			ADD_CONFIG_TERM_VAL(OVERWRITE, overwrite,
+ 					    term->val.num ? 0 : 1, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_DRV_CFG:
+ 			ADD_CONFIG_TERM_STR(DRV_CFG, term->val.str, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_PERCORE:
+ 			ADD_CONFIG_TERM_VAL(PERCORE, percore,
+ 					    term->val.num ? true : false, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_AUX_OUTPUT:
+ 			ADD_CONFIG_TERM_VAL(AUX_OUTPUT, aux_output,
+ 					    term->val.num ? 1 : 0, term->weak);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_AUX_SAMPLE_SIZE:
+ 			ADD_CONFIG_TERM_VAL(AUX_SAMPLE_SIZE, aux_sample_size,
+ 					    term->val.num, term->weak);
++>>>>>>> 05e54e238673 (perf parse-events: Fix reading of invalid memory in event parsing)
  			break;
  		default:
  			break;
  		}
  	}
++<<<<<<< HEAD
 +#undef ADD_EVSEL_CONFIG
++=======
+ 	return 0;
+ }
+ 
+ /*
+  * Add PERF_EVSEL__CONFIG_TERM_CFG_CHG where cfg_chg will have a bit set for
+  * each bit of attr->config that the user has changed.
+  */
+ static int get_config_chgs(struct perf_pmu *pmu, struct list_head *head_config,
+ 			   struct list_head *head_terms)
+ {
+ 	struct parse_events_term *term;
+ 	u64 bits = 0;
+ 	int type;
+ 
+ 	list_for_each_entry(term, head_config, list) {
+ 		switch (term->type_term) {
+ 		case PARSE_EVENTS__TERM_TYPE_USER:
+ 			type = perf_pmu__format_type(&pmu->format, term->config);
+ 			if (type != PERF_PMU_FORMAT_VALUE_CONFIG)
+ 				continue;
+ 			bits |= perf_pmu__format_bits(&pmu->format, term->config);
+ 			break;
+ 		case PARSE_EVENTS__TERM_TYPE_CONFIG:
+ 			bits = ~(u64)0;
+ 			break;
+ 		default:
+ 			break;
+ 		}
+ 	}
+ 
+ 	if (bits)
+ 		ADD_CONFIG_TERM_VAL(CFG_CHG, cfg_chg, bits, false);
+ 
+ #undef ADD_CONFIG_TERM
++>>>>>>> 05e54e238673 (perf parse-events: Fix reading of invalid memory in event parsing)
  	return 0;
  }
  
* Unmerged path tools/perf/util/parse-events.c
