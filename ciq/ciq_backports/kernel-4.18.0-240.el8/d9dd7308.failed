block: Enhance blk_revalidate_disk_zones()

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Damien Le Moal <damien.lemoal@wdc.com>
commit d9dd73087a8b6d78d3bf8411620306f2313cdbae
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/d9dd7308.failed

For ZBC and ZAC zoned devices, the scsi driver revalidation processing
implemented by sd_revalidate_disk() includes a call to
sd_zbc_read_zones() which executes a full disk zone report used to
check that all zones of the disk are the same size. This processing is
followed by a call to blk_revalidate_disk_zones(), used to initialize
the device request queue zone bitmaps (zone type and zone write lock
bitmaps). To do so, blk_revalidate_disk_zones() also executes a full
device zone report to obtain zone types. As a result, the entire
zoned block device revalidation process includes two full device zone
report.

By moving the zone size checks into blk_revalidate_disk_zones(), this
process can be optimized to a single full device zone report, leading to
shorter device scan and revalidation times. This patch implements this
optimization, reducing the original full device zone report implemented
in sd_zbc_check_zones() to a single, small, report zones command
execution to obtain the size of the first zone of the device. Checks
whether all zones of the device are the same size as the first zone
size are moved to the generic blk_check_zone() function called from
blk_revalidate_disk_zones().

This optimization also has the following benefits:
1) fewer memory allocations in the scsi layer during disk revalidation
   as the potentailly large buffer for zone report execution is not
   needed.
2) Implement zone checks in a generic manner, reducing the burden on
   device driver which only need to obtain the zone size and check that
   this size is a power of 2 number of LBAs. Any new type of zoned
   block device will benefit from this.

	Signed-off-by: Damien Le Moal <damien.lemoal@wdc.com>
	Reviewed-by: Christoph Hellwig <hch@lst.de>
	Reviewed-by: Hannes Reinecke <hare@suse.de>
	Signed-off-by: Jens Axboe <axboe@kernel.dk>
(cherry picked from commit d9dd73087a8b6d78d3bf8411620306f2313cdbae)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	drivers/scsi/sd_zbc.c
diff --cc drivers/scsi/sd_zbc.c
index 3707ee36b4d8,7c4690f26698..000000000000
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@@ -302,26 -339,19 +302,34 @@@ static int sd_zbc_check_zoned_character
   * Returns the zone size in number of blocks upon success or an error code
   * upon failure.
   */
- static int sd_zbc_check_zones(struct scsi_disk *sdkp, u32 *zblocks)
+ static int sd_zbc_check_zones(struct scsi_disk *sdkp, unsigned char *buf,
+ 			      u32 *zblocks)
  {
++<<<<<<< HEAD
++=======
+ 	size_t buflen;
++>>>>>>> d9dd73087a8b (block: Enhance blk_revalidate_disk_zones())
  	u64 zone_blocks = 0;
- 	sector_t max_lba, block = 0;
- 	unsigned char *buf;
+ 	sector_t max_lba;
  	unsigned char *rec;
 +	unsigned int buf_len;
 +	unsigned int list_length;
  	int ret;
- 	u8 same;
  
++<<<<<<< HEAD
 +	/* Get a buffer */
 +	buf = kmalloc(SD_ZBC_BUF_SIZE, GFP_KERNEL);
 +	if (!buf)
 +		return -ENOMEM;
 +
 +	/* Do a report zone to get max_lba and the same field */
 +	ret = sd_zbc_do_report_zones(sdkp, buf, SD_ZBC_BUF_SIZE, 0, false);
++=======
+ 	/* Do a report zone to get max_lba and the size of the first zone */
+ 	ret = sd_zbc_do_report_zones(sdkp, buf, SD_BUF_SIZE, 0, false);
++>>>>>>> d9dd73087a8b (block: Enhance blk_revalidate_disk_zones())
  	if (ret)
- 		goto out_free;
+ 		return ret;
  
  	if (sdkp->rc_basis == 0) {
  		/* The max_lba field is the capacity of this device */
@@@ -336,62 -366,11 +344,70 @@@
  		}
  	}
  
++<<<<<<< HEAD
 +	/*
 +	 * Check same field: for any value other than 0, we know that all zones
 +	 * have the same size.
 +	 */
 +	same = buf[4] & 0x0f;
 +	if (same > 0) {
 +		rec = &buf[64];
 +		zone_blocks = get_unaligned_be64(&rec[8]);
 +		goto out;
 +	}
 +
 +	/*
 +	 * Check the size of all zones: all zones must be of
 +	 * equal size, except the last zone which can be smaller
 +	 * than other zones.
 +	 */
 +	do {
 +
 +		/* Parse REPORT ZONES header */
 +		list_length = get_unaligned_be32(&buf[0]) + 64;
 +		rec = buf + 64;
 +		buf_len = min(list_length, SD_ZBC_BUF_SIZE);
 +
 +		/* Parse zone descriptors */
 +		while (rec < buf + buf_len) {
 +			u64 this_zone_blocks = get_unaligned_be64(&rec[8]);
 +
 +			if (zone_blocks == 0) {
 +				zone_blocks = this_zone_blocks;
 +			} else if (this_zone_blocks != zone_blocks &&
 +				   (block + this_zone_blocks < sdkp->capacity
 +				    || this_zone_blocks > zone_blocks)) {
 +				zone_blocks = 0;
 +				goto out;
 +			}
 +			block += this_zone_blocks;
 +			rec += 64;
 +		}
 +
 +		if (block < sdkp->capacity) {
 +			ret = sd_zbc_do_report_zones(sdkp, buf, SD_ZBC_BUF_SIZE,
 +						     block, true);
 +			if (ret)
 +				goto out_free;
 +		}
 +
 +	} while (block < sdkp->capacity);
 +
 +out:
 +	if (!zone_blocks) {
 +		if (sdkp->first_scan)
 +			sd_printk(KERN_NOTICE, sdkp,
 +				  "Devices with non constant zone "
 +				  "size are not supported\n");
 +		ret = -ENODEV;
 +	} else if (!is_power_of_2(zone_blocks)) {
++=======
+ 	/* Parse REPORT ZONES header */
+ 	buflen = min_t(size_t, get_unaligned_be32(&buf[0]) + 64, SD_BUF_SIZE);
+ 	rec = buf + 64;
+ 	zone_blocks = get_unaligned_be64(&rec[8]);
+ 	if (!zone_blocks || !is_power_of_2(zone_blocks)) {
++>>>>>>> d9dd73087a8b (block: Enhance blk_revalidate_disk_zones())
  		if (sdkp->first_scan)
  			sd_printk(KERN_NOTICE, sdkp,
  				  "Devices with non power of 2 zone "
@@@ -401,16 -382,12 +419,17 @@@
  		if (sdkp->first_scan)
  			sd_printk(KERN_NOTICE, sdkp,
  				  "Zone size too large\n");
- 		ret = -EFBIG;
- 	} else {
- 		*zblocks = zone_blocks;
- 		ret = 0;
+ 		return -EFBIG;
  	}
  
++<<<<<<< HEAD
 +out_free:
 +	kfree(buf);
++=======
+ 	*zblocks = zone_blocks;
++>>>>>>> d9dd73087a8b (block: Enhance blk_revalidate_disk_zones())
  
- 	return ret;
+ 	return 0;
  }
  
  int sd_zbc_read_zones(struct scsi_disk *sdkp, unsigned char *buf)
diff --git a/block/blk-zoned.c b/block/blk-zoned.c
index 023c295c4f36..bb3c54a3cd0e 100644
--- a/block/blk-zoned.c
+++ b/block/blk-zoned.c
@@ -419,6 +419,58 @@ void blk_queue_free_zone_bitmaps(struct request_queue *q)
 	q->seq_zones_wlock = NULL;
 }
 
+/*
+ * Helper function to check the validity of zones of a zoned block device.
+ */
+static bool blk_zone_valid(struct gendisk *disk, struct blk_zone *zone,
+			   sector_t *sector)
+{
+	struct request_queue *q = disk->queue;
+	sector_t zone_sectors = blk_queue_zone_sectors(q);
+	sector_t capacity = get_capacity(disk);
+
+	/*
+	 * All zones must have the same size, with the exception on an eventual
+	 * smaller last zone.
+	 */
+	if (zone->start + zone_sectors < capacity &&
+	    zone->len != zone_sectors) {
+		pr_warn("%s: Invalid zoned device with non constant zone size\n",
+			disk->disk_name);
+		return false;
+	}
+
+	if (zone->start + zone->len >= capacity &&
+	    zone->len > zone_sectors) {
+		pr_warn("%s: Invalid zoned device with larger last zone size\n",
+			disk->disk_name);
+		return false;
+	}
+
+	/* Check for holes in the zone report */
+	if (zone->start != *sector) {
+		pr_warn("%s: Zone gap at sectors %llu..%llu\n",
+			disk->disk_name, *sector, zone->start);
+		return false;
+	}
+
+	/* Check zone type */
+	switch (zone->type) {
+	case BLK_ZONE_TYPE_CONVENTIONAL:
+	case BLK_ZONE_TYPE_SEQWRITE_REQ:
+	case BLK_ZONE_TYPE_SEQWRITE_PREF:
+		break;
+	default:
+		pr_warn("%s: Invalid zone type 0x%x at sectors %llu\n",
+			disk->disk_name, (int)zone->type, zone->start);
+		return false;
+	}
+
+	*sector += zone->len;
+
+	return true;
+}
+
 /**
  * blk_revalidate_disk_zones - (re)allocate and initialize zone bitmaps
  * @disk:	Target disk
@@ -461,7 +513,10 @@ int blk_revalidate_disk_zones(struct gendisk *disk)
 	if (!seq_zones_bitmap)
 		goto out;
 
-	/* Get zone information and initialize seq_zones_bitmap */
+	/*
+	 * Get zone information to check the zones and initialize
+	 * seq_zones_bitmap.
+	 */
 	rep_nr_zones = nr_zones;
 	zones = blk_alloc_zones(q->node, &rep_nr_zones);
 	if (!zones)
@@ -475,11 +530,14 @@ int blk_revalidate_disk_zones(struct gendisk *disk)
 		if (!nrz)
 			break;
 		for (i = 0; i < nrz; i++) {
+			if (!blk_zone_valid(disk, &zones[i], &sector)) {
+				ret = -ENODEV;
+				goto out;
+			}
 			if (zones[i].type != BLK_ZONE_TYPE_CONVENTIONAL)
 				set_bit(z, seq_zones_bitmap);
 			z++;
 		}
-		sector += nrz * blk_queue_zone_sectors(q);
 	}
 
 	if (WARN_ON(z != nr_zones)) {
* Unmerged path drivers/scsi/sd_zbc.c
