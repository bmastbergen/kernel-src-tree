sched/core: Check cpus_mask, not cpus_ptr in __set_cpus_allowed_ptr(), to fix mask corruption

jira LE-1907
Rebuild_History Non-Buildable kernel-4.18.0-240.el8
commit-author Scott Wood <swood@redhat.com>
commit fd844ba9ae59b51e34e77105d79f8eca780b3bd6
Empty-Commit: Cherry-Pick Conflicts during history rebuild.
Will be included in final tarball splat. Ref for failed cherry-pick at:
ciq/ciq_backports/kernel-4.18.0-240.el8/fd844ba9.failed

This function is concerned with the long-term CPU mask, not the
transitory mask the task might have while migrate disabled.  Before
this patch, if a task was migrate-disabled at the time
__set_cpus_allowed_ptr() was called, and the new mask happened to be
equal to the CPU that the task was running on, then the mask update
would be lost.

	Signed-off-by: Scott Wood <swood@redhat.com>
	Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
	Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
	Signed-off-by: Ingo Molnar <mingo@kernel.org>
Link: https://lkml.kernel.org/r/20200617121742.cpxppyi7twxmpin7@linutronix.de
(cherry picked from commit fd844ba9ae59b51e34e77105d79f8eca780b3bd6)
	Signed-off-by: Jonathan Maple <jmaple@ciq.com>

# Conflicts:
#	kernel/sched/core.c
diff --cc kernel/sched/core.c
index 8dd8c4568e62,9eeac94224db..000000000000
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@@ -1119,10 -1637,15 +1119,14 @@@ static int __set_cpus_allowed_ptr(struc
  		goto out;
  	}
  
++<<<<<<< HEAD
 +	if (cpumask_equal(&p->cpus_allowed, new_mask))
++=======
+ 	if (cpumask_equal(&p->cpus_mask, new_mask))
++>>>>>>> fd844ba9ae59 (sched/core: Check cpus_mask, not cpus_ptr in __set_cpus_allowed_ptr(), to fix mask corruption)
  		goto out;
  
 -	/*
 -	 * Picking a ~random cpu helps in cases where we are changing affinity
 -	 * for groups of tasks (ie. cpuset), so that load balancing is not
 -	 * immediately required to distribute the tasks within their new mask.
 -	 */
 -	dest_cpu = cpumask_any_and_distribute(cpu_valid_mask, new_mask);
 +	dest_cpu = cpumask_any_and(cpu_valid_mask, new_mask);
  	if (dest_cpu >= nr_cpu_ids) {
  		ret = -EINVAL;
  		goto out;
* Unmerged path kernel/sched/core.c
